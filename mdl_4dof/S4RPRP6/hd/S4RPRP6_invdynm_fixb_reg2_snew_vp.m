% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RPRP6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:46
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RPRP6_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(5,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RPRP6_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RPRP6_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RPRP6_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RPRP6_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'S4RPRP6_invdynm_fixb_reg2_snew_vp: pkin has to be [5x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:46:17
% EndTime: 2019-12-31 16:46:19
% DurationCPUTime: 2.08s
% Computational Cost: add. (3195->289), mult. (6745->271), div. (0->0), fcn. (3054->4), ass. (0->197)
t433 = sin(qJ(3));
t435 = cos(qJ(3));
t438 = qJD(1) ^ 2;
t417 = t433 * t438 * t435;
t407 = qJDD(3) - t417;
t399 = pkin(3) * t407;
t434 = sin(qJ(1));
t436 = cos(qJ(1));
t408 = t434 * g(1) - t436 * g(2);
t463 = qJDD(2) - t408;
t449 = -t438 * qJ(2) + t463;
t516 = -pkin(5) - pkin(1);
t373 = t516 * qJDD(1) + t449;
t490 = t435 * t373;
t503 = t433 * g(3);
t345 = t490 + t503;
t346 = t435 * g(3) - t433 * t373;
t323 = t435 * t345 - t433 * t346;
t437 = qJD(3) ^ 2;
t430 = t433 ^ 2;
t499 = t430 * t438;
t413 = -t437 - t499;
t488 = t435 * t407;
t358 = t433 * t413 + t488;
t482 = qJD(1) * qJD(3);
t424 = t435 * t482;
t479 = t433 * qJDD(1);
t395 = 0.2e1 * t424 + t479;
t520 = -pkin(1) * t358 + qJ(2) * t395;
t431 = t435 ^ 2;
t498 = t431 * t438;
t415 = -t437 - t498;
t406 = qJDD(3) + t417;
t494 = t433 * t406;
t360 = t435 * t415 - t494;
t423 = t433 * t482;
t425 = t435 * qJDD(1);
t398 = t425 - 0.2e1 * t423;
t519 = -pkin(1) * t360 + qJ(2) * t398;
t484 = t430 + t431;
t400 = t484 * qJDD(1);
t403 = t484 * t438;
t518 = pkin(1) * t400 - qJ(2) * t403;
t483 = qJD(1) * t435;
t405 = qJD(3) * pkin(3) - qJ(4) * t483;
t517 = -t405 * t483 + (qJ(4) * t430 - t516) * t438 - qJDD(4);
t493 = t433 * t407;
t362 = t435 * t413 - t493;
t515 = pkin(1) * t362;
t489 = t435 * t406;
t365 = -t433 * t415 - t489;
t514 = pkin(1) * t365;
t513 = pkin(2) * t323;
t409 = t436 * g(1) + t434 * g(2);
t429 = qJDD(1) * qJ(2);
t457 = t409 - t429;
t480 = qJD(2) * qJD(1);
t444 = t457 - 0.2e1 * t480;
t368 = -t516 * t438 + t444;
t512 = pkin(2) * t368;
t511 = pkin(2) * t403;
t510 = pkin(4) * (-t436 * t358 + t434 * t395);
t509 = pkin(4) * (-t436 * t360 + t434 * t398);
t487 = t436 * t400;
t508 = pkin(4) * (-t434 * t403 + t487);
t507 = pkin(5) * t358;
t506 = pkin(5) * t360;
t505 = pkin(5) * t400;
t396 = -t424 - t479;
t504 = t396 * pkin(3);
t502 = qJ(2) * t362;
t501 = qJ(2) * t365;
t500 = qJDD(1) * pkin(1);
t397 = t425 - t423;
t451 = -t503 + (t397 + t423) * qJ(4) - t399;
t443 = -t451 + t490;
t481 = qJD(1) * qJD(4);
t474 = t435 * t481;
t320 = -0.2e1 * t474 + t443;
t497 = t433 * t320;
t495 = t433 * t368;
t492 = t434 * t400;
t491 = t435 * t320;
t355 = t435 * t368;
t486 = pkin(2) * t395 - pkin(5) * t362;
t485 = pkin(2) * t398 - pkin(5) * t365;
t478 = t434 * qJDD(1);
t477 = t436 * qJDD(1);
t476 = pkin(3) * t425;
t475 = t433 * t481;
t450 = t396 * qJ(4) - qJD(3) * t405 - t346;
t442 = pkin(3) * t499 - t450;
t322 = t442 + 0.2e1 * t475;
t300 = -t433 * t322 + t491;
t319 = pkin(3) * t320;
t473 = -pkin(2) * t300 - t319;
t472 = -t355 - t506;
t374 = t438 * pkin(1) + t444;
t376 = -t449 + t500;
t471 = -t436 * t374 - t434 * t376;
t470 = -t434 * t408 - t436 * t409;
t469 = t434 * t417;
t468 = t436 * t417;
t351 = pkin(2) * t360;
t466 = t346 + t351;
t401 = -t434 * t438 + t477;
t465 = pkin(4) * t401 + t434 * g(3);
t402 = t436 * t438 + t478;
t464 = -pkin(4) * t402 + t436 * g(3);
t462 = -t486 + t355;
t461 = -t485 - t495;
t460 = -t495 - t507;
t324 = -t433 * t345 - t435 * t346;
t459 = t434 * t374 - t436 * t376;
t458 = t436 * t408 - t434 * t409;
t420 = -0.2e1 * t475;
t311 = -qJ(4) * t479 + t420 + (t403 - t499) * pkin(3) + t450;
t421 = 0.2e1 * t474;
t317 = t421 + (qJ(4) * qJDD(1) - t373) * t435 + t451;
t456 = -t433 * t311 + t435 * t317 + t505;
t427 = 0.2e1 * t480;
t321 = -qJ(4) * t415 + t427 - t457 - t504 - t517;
t354 = -pkin(3) * t398 - qJ(4) * t406;
t455 = t435 * t321 - t433 * t354 - t506;
t454 = t505 - t323;
t350 = pkin(2) * t358;
t453 = t345 + t350;
t439 = t444 + t517;
t325 = t439 + t504;
t305 = pkin(3) * t325 - qJ(4) * t322;
t452 = -qJ(4) * t491 - t433 * t305;
t448 = t433 * t321 + t435 * t354 - t485;
t314 = qJ(4) * t413 + (-t395 + t396) * pkin(3) + t439;
t447 = -qJ(4) * t493 + t435 * t314 - t486;
t446 = -pkin(2) * t325 + qJ(4) * t497 - t435 * t305;
t445 = -qJ(4) * t488 - t433 * t314 - t507;
t441 = t320 + t399;
t410 = pkin(3) * t415;
t440 = t322 + t410;
t414 = t437 - t498;
t412 = -t437 + t499;
t404 = (-t430 + t431) * t438;
t393 = pkin(2) * t400;
t390 = t484 * t482;
t383 = t463 - 0.2e1 * t500;
t381 = -t409 + t427 + 0.2e1 * t429;
t375 = t393 + t476;
t372 = t436 * qJDD(3) - t434 * t390;
t371 = t434 * qJDD(3) + t436 * t390;
t370 = t433 * t397 + t431 * t482;
t369 = t435 * t396 + t430 * t482;
t364 = -t433 * t414 + t488;
t363 = (t397 - t423) * t435;
t361 = t435 * t412 - t494;
t359 = t435 * t414 + t493;
t357 = t433 * t412 + t489;
t356 = (-t396 + t424) * t433;
t344 = pkin(4) * (-t436 * t403 - t492);
t343 = -t435 * t395 - t433 * t398;
t342 = -t433 * t395 + t435 * t398;
t340 = t434 * t369 - t468;
t339 = t434 * t370 + t468;
t338 = -t436 * t369 - t469;
t337 = -t436 * t370 + t469;
t336 = t434 * t359 + t435 * t477;
t335 = t434 * t357 - t433 * t477;
t334 = -t436 * t359 + t434 * t425;
t333 = -t436 * t357 - t433 * t478;
t332 = pkin(1) * t376 - qJ(2) * t374;
t329 = pkin(4) * (t434 * t360 + t436 * t398);
t328 = pkin(4) * (t434 * t358 + t436 * t395);
t327 = t434 * t342 + t436 * t404;
t326 = -t436 * t342 + t434 * t404;
t316 = t324 + t511;
t313 = t466 - t501;
t312 = t453 - t502;
t310 = -t462 - t515;
t309 = -t461 - t514;
t308 = t472 + t519;
t307 = t460 + t520;
t306 = t454 + t518;
t304 = t351 + t440 - t501;
t303 = t350 + t441 - t502;
t302 = -qJ(2) * t324 + t513;
t301 = -t435 * t322 - t497;
t299 = t516 * t324 - t512;
t298 = -qJ(2) * t368 + t516 * t323;
t297 = -t447 - t515;
t296 = t445 + t520;
t295 = -t448 - t514;
t294 = t455 + t519;
t293 = t435 * t311 + t433 * t317 + t511;
t292 = t456 + t518;
t291 = -qJ(2) * t301 - t473;
t290 = t516 * t301 + t446;
t289 = -qJ(2) * t325 + t516 * t300 + t452;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t401, 0, -t402, 0, -t465, -t464, -t458, -pkin(4) * t458, 0, -t401, t402, 0, 0, 0, t459, t465, t464, pkin(4) * t459 + (-t434 * pkin(1) + t436 * qJ(2)) * g(3), t339, t327, t336, t340, t335, t372, -t434 * t310 + t436 * t312 - t510, -t434 * t309 + t436 * t313 - t509, -pkin(2) * t487 + t434 * t316 - t508, t436 * t302 - t434 * t299 - pkin(4) * (-t436 * t323 - t434 * t368), t339, t327, t336, t340, t335, t372, -t434 * t297 + t436 * t303 - t510, -t434 * t295 + t436 * t304 - t509, t434 * t293 - t436 * t375 - t508, t436 * t291 - t434 * t290 - pkin(4) * (-t436 * t300 - t434 * t325); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t402, 0, t401, 0, t464, -t465, t470, pkin(4) * t470, 0, -t402, -t401, 0, 0, 0, t471, -t464, t465, pkin(4) * t471 + (t436 * pkin(1) + t434 * qJ(2)) * g(3), t337, t326, t334, t338, t333, t371, t436 * t310 + t434 * t312 + t328, t436 * t309 + t434 * t313 + t329, -pkin(2) * t492 - t436 * t316 + t344, t434 * t302 + t436 * t299 + pkin(4) * (t434 * t323 - t436 * t368), t337, t326, t334, t338, t333, t371, t436 * t297 + t434 * t303 + t328, t436 * t295 + t434 * t304 + t329, -t436 * t293 - t434 * t375 + t344, t434 * t291 + t436 * t290 + pkin(4) * (t434 * t300 - t436 * t325); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t408, t409, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t383, t381, t332, t363, t343, t364, t356, t361, 0, t307, t308, t306, t298, t363, t343, t364, t356, t361, 0, t296, t294, t292, t289; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t438, 0, 0, -g(3), -t408, 0, 0, -qJDD(1), t438, 0, 0, 0, -t376, 0, g(3), qJ(2) * g(3), t417, t404, t425, -t417, -t479, qJDD(3), t312, t313, -t393, t302, t417, t404, t425, -t417, -t479, qJDD(3), t303, t304, -t375, t291; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t438, 0, qJDD(1), 0, g(3), 0, -t409, 0, 0, -t438, -qJDD(1), 0, 0, 0, -t374, -g(3), 0, pkin(1) * g(3), -t370, -t342, -t359, -t369, -t357, t390, t310, t309, -t316, t299, -t370, -t342, -t359, -t369, -t357, t390, t297, t295, -t293, t290; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t408, t409, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t383, t381, t332, t363, t343, t364, t356, t361, 0, t307, t308, t306, t298, t363, t343, t364, t356, t361, 0, t296, t294, t292, t289; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t376, -t374, 0, t363, t343, t364, t356, t361, 0, t460, t472, t454, -pkin(5) * t323, t363, t343, t364, t356, t361, 0, t445, t455, t456, -pkin(5) * t300 + t452; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t438, 0, 0, 0, t376, 0, -g(3), 0, -t417, -t404, -t425, t417, t479, -qJDD(3), -t453, -t466, t393, -t513, -t417, -t404, -t425, t417, t479, -qJDD(3), -t350 - t399 + t421 - t443, -t351 - t410 + t420 - t442, t375, t473; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t438, qJDD(1), 0, 0, 0, t374, g(3), 0, 0, t370, t342, t359, t369, t357, -t390, t462, t461, t316, pkin(5) * t324 + t512, t370, t342, t359, t369, t357, -t390, t447, t448, t293, pkin(5) * t301 - t446; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t397, -t395, t407, t423, t412, -t423, 0, -t368, -t345, 0, t397, -t395, t407, t423, t412, -t423, -qJ(4) * t407, t321, t317, -qJ(4) * t320; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t424, t398, t414, t396, t406, -t424, t368, 0, -t346, 0, t424, t398, t414, t396, t406, -t424, t314, t354, t311, t305; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t417, t404, t425, -t417, -t479, qJDD(3), t345, t346, 0, 0, t417, t404, t425, -t417, -t479, qJDD(3), t441, t440, -t476, t319; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t397, -t395, t407, t423, t412, -t423, 0, -t325, -t320, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t424, t398, t414, t396, t406, -t424, t325, 0, -t322, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t417, t404, t425, -t417, -t479, qJDD(3), t320, t322, 0, 0;];
m_new_reg = t1;
