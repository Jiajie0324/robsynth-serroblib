% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RRRP3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d3]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:14
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RRRP3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRRP3_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRRP3_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRRP3_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRRP3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4RRRP3_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:14:21
% EndTime: 2019-12-31 17:14:25
% DurationCPUTime: 3.72s
% Computational Cost: add. (8147->326), mult. (11830->368), div. (0->0), fcn. (6221->6), ass. (0->222)
t628 = qJD(3) ^ 2;
t615 = qJD(1) + qJD(2);
t613 = t615 ^ 2;
t622 = sin(qJ(3));
t618 = t622 ^ 2;
t668 = t613 * t618;
t594 = t628 + t668;
t625 = cos(qJ(3));
t599 = t625 * t613 * t622;
t591 = qJDD(3) - t599;
t664 = t625 * t591;
t550 = -t594 * t622 + t664;
t658 = qJD(3) * t615;
t606 = t625 * t658;
t614 = qJDD(1) + qJDD(2);
t665 = t622 * t614;
t572 = 0.2e1 * t606 + t665;
t623 = sin(qJ(2));
t626 = cos(qJ(2));
t497 = t550 * t623 + t572 * t626;
t500 = t550 * t626 - t572 * t623;
t624 = sin(qJ(1));
t627 = cos(qJ(1));
t724 = pkin(4) * (t497 * t624 - t500 * t627);
t723 = pkin(4) * (t497 * t627 + t500 * t624);
t722 = pkin(1) * t497;
t721 = pkin(5) * t497;
t671 = t591 * t622;
t544 = t594 * t625 + t671;
t720 = -pkin(1) * t544 + pkin(5) * t500;
t582 = t613 * t626 + t614 * t623;
t560 = pkin(5) * t582 - g(3) * t626;
t585 = t613 * t623 - t614 * t626;
t639 = t582 * t627 - t585 * t624;
t700 = pkin(5) * t585 - g(3) * t623;
t717 = pkin(4) * t639 + t627 * t560 - t624 * t700;
t605 = t622 * t658;
t663 = t625 * t614;
t575 = -0.2e1 * t605 + t663;
t675 = t575 * t625;
t680 = t572 * t622;
t525 = -t675 + t680;
t619 = t625 ^ 2;
t587 = (t618 - t619) * t613;
t487 = t525 * t623 + t587 * t626;
t489 = t525 * t626 - t587 * t623;
t716 = t487 * t627 + t489 * t624;
t715 = t487 * t624 - t489 * t627;
t667 = t613 * t619;
t596 = -t628 + t667;
t548 = -t596 * t625 + t671;
t515 = t548 * t623 + t626 * t663;
t518 = t548 * t626 - t623 * t663;
t714 = t515 * t627 + t518 * t624;
t713 = t515 * t624 - t518 * t627;
t699 = t582 * t624 + t585 * t627;
t712 = pkin(4) * t699 + t624 * t560 + t627 * t700;
t601 = g(1) * t627 + g(2) * t624;
t629 = qJD(1) ^ 2;
t589 = -pkin(1) * t629 - t601;
t600 = g(1) * t624 - g(2) * t627;
t636 = qJDD(1) * pkin(1) + t600;
t533 = t589 * t623 - t626 * t636;
t534 = t626 * t589 + t623 * t636;
t650 = t533 * t623 + t534 * t626;
t484 = t533 * t626 - t534 * t623;
t682 = t484 * t627;
t710 = -t624 * t650 + t682;
t683 = t484 * t624;
t709 = t627 * t650 + t683;
t708 = -pkin(2) * t572 - pkin(6) * t550;
t705 = pkin(2) * t544;
t703 = pkin(6) * t544;
t521 = -pkin(2) * t613 + pkin(6) * t614 + t534;
t642 = -pkin(3) * t625 - qJ(4) * t622;
t681 = t642 * t613;
t686 = g(3) * t625;
t474 = -qJDD(3) * pkin(3) - t628 * qJ(4) + (t521 + t681) * t622 + qJDD(4) + t686;
t590 = qJDD(3) + t599;
t597 = -t628 - t667;
t702 = pkin(3) * t590 + qJ(4) * t597 - t474;
t573 = t606 + t665;
t701 = t573 + t606;
t502 = t521 * t622 + t686;
t503 = -g(3) * t622 + t521 * t625;
t459 = t502 * t622 + t503 * t625;
t540 = t596 * t622 + t664;
t579 = t625 * t590;
t541 = t597 * t622 + t579;
t695 = pkin(2) * t541;
t672 = t590 * t622;
t547 = t597 * t625 - t672;
t496 = t547 * t623 + t575 * t626;
t499 = t547 * t626 - t575 * t623;
t692 = pkin(4) * (t496 * t627 + t499 * t624);
t659 = t618 + t619;
t578 = t659 * t614;
t586 = t659 * t613;
t528 = t578 * t623 + t586 * t626;
t530 = t578 * t626 - t586 * t623;
t691 = pkin(4) * (t528 * t627 + t530 * t624);
t690 = pkin(5) * t496;
t689 = pkin(5) * t528;
t688 = pkin(6) * t541;
t678 = t572 * t625;
t676 = t575 * t622;
t666 = t615 * t622;
t520 = -pkin(2) * t614 - pkin(6) * t613 + t533;
t506 = t622 * t520;
t507 = t625 * t520;
t662 = -pkin(2) * t520 + pkin(6) * t459;
t661 = pkin(2) * t575 + pkin(6) * t547;
t660 = pkin(2) * t586 + pkin(6) * t578;
t657 = (qJD(4) * qJD(3));
t654 = t506 + t708;
t653 = -t507 + t661;
t652 = -pkin(1) * t541 + pkin(5) * t499;
t649 = -t600 * t624 - t601 * t627;
t648 = t623 * t599;
t647 = t626 * t599;
t609 = 2 * t657;
t640 = -pkin(3) * t628 + qJDD(3) * qJ(4) + t625 * t681 + t503;
t472 = t609 + t640;
t464 = pkin(3) * t586 + t472;
t465 = qJ(4) * t586 + t474;
t646 = t464 * t625 + t465 * t622 + t660;
t645 = t660 + t459;
t593 = qJDD(1) * t627 - t624 * t629;
t644 = -pkin(4) * t593 - g(3) * t624;
t643 = -pkin(3) * t474 + qJ(4) * t472;
t641 = pkin(3) * t622 - qJ(4) * t625;
t458 = t502 * t625 - t503 * t622;
t522 = t676 + t678;
t638 = t600 * t627 - t601 * t624;
t574 = -t605 + t663;
t633 = -t574 * pkin(3) - qJ(4) * t701 + t520;
t631 = 0.2e1 * qJD(4) * t666 - t633;
t452 = -pkin(3) * t605 + qJ(4) * t572 + t631;
t635 = pkin(3) * t678 + t452 * t622 - t708;
t453 = (t575 - t605) * pkin(3) + t631;
t634 = qJ(4) * t676 + t453 * t625 + t661;
t441 = t472 * t625 + t474 * t622;
t461 = (pkin(3) * qJD(3) - 0.2e1 * qJD(4)) * t666 + t633;
t632 = pkin(6) * t441 + (-pkin(2) + t642) * t461;
t630 = pkin(3) * t594 + qJ(4) * t591 + t640;
t595 = -t628 + t668;
t592 = qJDD(1) * t624 + t627 * t629;
t569 = -pkin(4) * t592 + g(3) * t627;
t568 = t641 * t614;
t567 = t659 * t658;
t555 = qJDD(3) * t623 + t567 * t626;
t554 = -qJDD(3) * t626 + t567 * t623;
t553 = t573 * t625 - t618 * t658;
t552 = -t574 * t622 - t619 * t658;
t549 = t595 * t622 + t579;
t543 = -t595 * t625 + t672;
t536 = t701 * t622;
t535 = (t574 - t605) * t625;
t527 = pkin(1) * t528;
t526 = pkin(5) * t530;
t519 = t549 * t626 + t623 * t665;
t516 = t549 * t623 - t626 * t665;
t512 = t553 * t626 - t648;
t511 = t552 * t626 + t648;
t510 = t553 * t623 + t647;
t509 = t552 * t623 - t647;
t505 = -pkin(1) * t582 - t534;
t504 = -pkin(1) * t585 - t533;
t495 = pkin(1) * t496;
t491 = -t554 * t624 + t555 * t627;
t490 = t554 * t627 + t555 * t624;
t481 = pkin(1) * t484;
t480 = pkin(1) * g(3) + pkin(5) * t650;
t479 = t507 + t703;
t478 = t506 - t688;
t477 = t503 + t705;
t476 = t502 - t695;
t473 = pkin(4) * (-t528 * t624 + t530 * t627);
t471 = -t516 * t624 + t519 * t627;
t470 = t516 * t627 + t519 * t624;
t469 = -t510 * t624 + t512 * t627;
t468 = -t509 * t624 + t511 * t627;
t467 = t510 * t627 + t512 * t624;
t466 = t509 * t627 + t511 * t624;
t454 = pkin(4) * (-t496 * t624 + t499 * t627);
t449 = -t695 - t702;
t448 = -t630 - (2 * t657) - t705;
t447 = t495 + t653;
t446 = t654 - t722;
t445 = t458 * t626 - t689;
t444 = t458 * t623 + t526;
t443 = t459 * t626 + t520 * t623;
t442 = t459 * t623 - t520 * t626;
t440 = t472 * t622 - t474 * t625;
t438 = -pkin(3) * t680 + t452 * t625 - t703;
t437 = qJ(4) * t675 - t453 * t622 - t688;
t436 = t527 + t645;
t435 = -t464 * t622 + t465 * t625;
t434 = -t477 * t623 + t479 * t626 + t721;
t433 = -t476 * t623 + t478 * t626 - t690;
t432 = t477 * t626 + t479 * t623 - t720;
t431 = t476 * t626 + t478 * t623 + t652;
t430 = t635 + t722;
t429 = t495 + t634;
t428 = t435 * t626 - t568 * t623 - t689;
t427 = t435 * t623 + t568 * t626 + t526;
t426 = t527 + t646;
t425 = t441 * t626 + t461 * t623;
t424 = t441 * t623 - t461 * t626;
t423 = pkin(1) * t442 + t662;
t422 = -pkin(2) * t440 - t643;
t421 = t437 * t626 - t449 * t623 - t690;
t420 = t438 * t626 - t448 * t623 - t721;
t419 = -pkin(5) * t442 - (pkin(2) * t623 - pkin(6) * t626) * t458;
t418 = -pkin(6) * t440 + t461 * t641;
t417 = t437 * t623 + t449 * t626 + t652;
t416 = t438 * t623 + t448 * t626 + t720;
t415 = pkin(5) * t443 - (-pkin(2) * t626 - pkin(6) * t623 - pkin(1)) * t458;
t414 = pkin(1) * t424 + t632;
t413 = -pkin(5) * t424 + t418 * t626 - t422 * t623;
t412 = -pkin(1) * t440 + pkin(5) * t425 + t418 * t623 + t422 * t626;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t593, 0, -t592, 0, t644, -t569, -t638, -pkin(4) * t638, 0, 0, -t699, 0, -t639, 0, t712, t717, t710, pkin(4) * t710 + pkin(5) * t682 - t624 * t480, t469, t715, t471, t468, t713, t491, -t431 * t624 + t433 * t627 - t692, -t624 * t432 + t627 * t434 + t723, -t444 * t624 + t445 * t627 - t691, t627 * t419 - t624 * t415 - pkin(4) * (t442 * t627 + t443 * t624), t469, t471, -t715, t491, -t713, t468, -t417 * t624 + t421 * t627 - t692, -t427 * t624 + t428 * t627 - t691, -t624 * t416 + t627 * t420 - t723, t627 * t413 - t624 * t412 - pkin(4) * (t424 * t627 + t425 * t624); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t592, 0, t593, 0, t569, t644, t649, pkin(4) * t649, 0, 0, t639, 0, -t699, 0, -t717, t712, t709, pkin(4) * t709 + pkin(5) * t683 + t627 * t480, t467, -t716, t470, t466, -t714, t490, t431 * t627 + t433 * t624 + t454, t627 * t432 + t624 * t434 + t724, t444 * t627 + t445 * t624 + t473, t624 * t419 + t627 * t415 + pkin(4) * (-t442 * t624 + t443 * t627), t467, t470, t716, t490, t714, t466, t417 * t627 + t421 * t624 + t454, t427 * t627 + t428 * t624 + t473, t627 * t416 + t624 * t420 - t724, t624 * t413 + t627 * t412 + pkin(4) * (-t424 * t624 + t425 * t627); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t600, t601, 0, 0, 0, 0, 0, 0, 0, t614, t504, t505, 0, -t481, t536, t522, t543, t535, t540, 0, t447, t446, t436, t423, t536, t543, -t522, 0, -t540, t535, t429, t426, t430, t414; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t629, 0, 0, -g(3), -t600, 0, 0, 0, -t585, 0, -t582, 0, t700, t560, t484, pkin(5) * t484, t512, -t489, t519, t511, -t518, t555, t433, t434, t445, t419, t512, t519, t489, t555, t518, t511, t421, t428, t420, t413; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t629, 0, qJDD(1), 0, g(3), 0, -t601, 0, 0, 0, t582, 0, -t585, 0, -t560, t700, t650, t480, t510, -t487, t516, t509, -t515, t554, t431, t432, t444, t415, t510, t516, t487, t554, t515, t509, t417, t427, t416, t412; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t600, t601, 0, 0, 0, 0, 0, 0, 0, t614, t504, t505, 0, -t481, t536, t522, t543, t535, t540, 0, t447, t446, t436, t423, t536, t543, -t522, 0, -t540, t535, t429, t426, t430, t414; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t614, 0, -t613, 0, 0, -g(3), t533, 0, t553, -t525, t549, t552, -t548, t567, t478, t479, t458, pkin(6) * t458, t553, t549, t525, t567, t548, t552, t437, t435, t438, t418; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t613, 0, t614, 0, g(3), 0, t534, 0, t599, -t587, -t665, -t599, -t663, -qJDD(3), t476, t477, 0, pkin(2) * t458, t599, -t665, t587, -qJDD(3), t663, -t599, t449, t568, t448, t422; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t614, -t533, -t534, 0, 0, t536, t522, t543, t535, t540, 0, t653, t654, t645, t662, t536, t543, -t522, 0, -t540, t535, t634, t646, t635, t632; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t573, t575, t590, -t606, t596, t606, 0, t520, t502, 0, t573, t590, -t575, t606, -t596, -t606, qJ(4) * t575, t465, t452, -qJ(4) * t461; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t605, t572, -t595, t574, t591, -t605, -t520, 0, t503, 0, t605, -t595, -t572, -t605, -t591, t574, t453, t464, pkin(3) * t572, -pkin(3) * t461; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t599, t587, t665, t599, t663, qJDD(3), -t502, -t503, 0, 0, -t599, t665, -t587, qJDD(3), -t663, t599, t702, -t568, t609 + t630, t643; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t573, t590, -t575, t606, -t596, -t606, 0, t474, -t461, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t599, t665, -t587, qJDD(3), -t663, t599, -t474, 0, t472, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t605, t595, t572, t605, t591, -t574, t461, -t472, 0, 0;];
m_new_reg = t1;
