% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4PRPR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d2,d4,theta1,theta3]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:23
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4PRPR5_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4PRPR5_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4PRPR5_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4PRPR5_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4PRPR5_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4PRPR5_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:23:23
% EndTime: 2019-12-31 16:23:26
% DurationCPUTime: 3.03s
% Computational Cost: add. (7106->284), mult. (12620->399), div. (0->0), fcn. (8512->8), ass. (0->191)
t481 = sin(qJ(2));
t476 = sin(pkin(6));
t478 = cos(pkin(6));
t454 = t478 * g(1) + t476 * g(2);
t473 = g(3) - qJDD(1);
t483 = cos(qJ(2));
t428 = -t483 * t454 - t481 * t473;
t485 = qJD(2) ^ 2;
t422 = -t485 * pkin(2) + t428;
t475 = sin(pkin(7));
t477 = cos(pkin(7));
t427 = -t481 * t454 + t483 * t473;
t486 = qJDD(2) * pkin(2) - t427;
t364 = t475 * t422 - t477 * t486;
t365 = t477 * t422 + t475 * t486;
t502 = t475 * t364 + t477 * t365;
t325 = t477 * t364 - t475 * t365;
t516 = t483 * t325;
t312 = -t481 * t502 + t516;
t521 = t481 * t325;
t537 = t483 * t502 + t521;
t453 = t476 * g(1) - t478 * g(2);
t445 = -qJDD(3) + t453;
t446 = t475 * qJDD(2) + t477 * t485;
t400 = qJ(3) * t446 - t477 * t445;
t447 = t477 * qJDD(2) - t475 * t485;
t491 = -qJ(3) * t447 - t475 * t445;
t500 = -t481 * t446 + t483 * t447;
t536 = -pkin(4) * t500 + t481 * t400 + t483 * t491;
t390 = t483 * t446 + t481 * t447;
t340 = pkin(4) * t390 + t483 * t400 - t481 * t491;
t362 = -t485 * pkin(3) + qJDD(2) * pkin(5) + t365;
t480 = sin(qJ(4));
t482 = cos(qJ(4));
t353 = t480 * t362 + t482 * t445;
t354 = t482 * t362 - t480 * t445;
t321 = t480 * t353 + t482 * t354;
t433 = t478 * t453;
t531 = -t476 * t454 + t433;
t529 = pkin(2) * t325;
t471 = t480 ^ 2;
t528 = t471 * t485;
t527 = t476 * t453;
t525 = t476 * t473;
t524 = t478 * t473;
t361 = -qJDD(2) * pkin(3) - t485 * pkin(5) + t364;
t357 = t480 * t361;
t461 = t480 * t485 * t482;
t455 = qJDD(4) + t461;
t523 = t480 * t455;
t456 = qJDD(4) - t461;
t522 = t480 * t456;
t358 = t482 * t361;
t518 = t482 * t455;
t517 = t482 * t456;
t515 = -pkin(3) * t361 + pkin(5) * t321;
t472 = t482 ^ 2;
t514 = t471 + t472;
t513 = qJD(2) * qJD(4);
t512 = t478 * qJDD(2);
t511 = t480 * qJDD(2);
t467 = t482 * qJDD(2);
t484 = qJD(4) ^ 2;
t458 = -t484 - t528;
t420 = -t480 * t458 - t517;
t464 = t482 * t513;
t440 = 0.2e1 * t464 + t511;
t510 = -pkin(3) * t440 + pkin(5) * t420 + t357;
t469 = t472 * t485;
t460 = -t469 - t484;
t418 = t482 * t460 - t523;
t508 = t480 * t513;
t443 = t467 - 0.2e1 * t508;
t509 = pkin(3) * t443 + pkin(5) * t418 - t358;
t448 = t514 * qJDD(2);
t451 = t469 + t528;
t398 = t475 * t448 + t477 * t451;
t401 = t477 * t448 - t475 * t451;
t355 = t483 * t398 + t481 * t401;
t495 = pkin(3) * t451 + pkin(5) * t448 + t321;
t487 = pkin(2) * t398 + t495;
t303 = -pkin(1) * t355 - t487;
t356 = -t481 * t398 + t483 * t401;
t507 = qJ(1) * t356 + t303;
t493 = -pkin(2) * t446 - t365;
t331 = pkin(1) * t390 - t493;
t506 = -qJ(1) * t500 + t331;
t488 = pkin(2) * t447 - t364;
t332 = -pkin(1) * t500 - t488;
t505 = -qJ(1) * t390 + t332;
t449 = t481 * qJDD(2) + t483 * t485;
t386 = pkin(1) * t449 + t428;
t450 = t483 * qJDD(2) - t481 * t485;
t504 = qJ(1) * t450 - t386;
t387 = -pkin(1) * t450 + t427;
t503 = qJ(1) * t449 - t387;
t501 = t481 * t427 + t483 * t428;
t498 = -t478 * t454 - t527;
t497 = t475 * t461;
t496 = t477 * t461;
t314 = t475 * t321 - t477 * t361;
t494 = pkin(2) * t314 + t515;
t410 = pkin(4) * t449 - t483 * t453;
t492 = -pkin(4) * t450 - t481 * t453;
t320 = t482 * t353 - t480 * t354;
t372 = t483 * t427 - t481 * t428;
t375 = t475 * t420 - t477 * t440;
t490 = pkin(2) * t375 + t510;
t374 = t475 * t418 + t477 * t443;
t489 = pkin(2) * t374 + t509;
t465 = t476 * qJDD(2);
t459 = t469 - t484;
t457 = t484 - t528;
t452 = -t469 + t528;
t442 = t467 - t508;
t441 = t464 + t511;
t438 = t514 * t513;
t426 = t482 * t441 - t471 * t513;
t425 = -t480 * t442 - t472 * t513;
t424 = t475 * qJDD(4) + t477 * t438;
t423 = -t477 * qJDD(4) + t475 * t438;
t419 = -t480 * t457 + t518;
t417 = t482 * t459 - t522;
t416 = t482 * t458 - t522;
t415 = t482 * t457 + t523;
t414 = t480 * t460 + t518;
t413 = t480 * t459 + t517;
t412 = (t441 + t464) * t480;
t411 = -t482 * t442 + t480 * t464;
t389 = -t480 * t440 + t482 * t443;
t388 = t482 * t440 + t480 * t443;
t385 = t477 * t426 - t497;
t384 = t477 * t425 + t497;
t383 = t475 * t426 + t496;
t382 = t475 * t425 - t496;
t381 = t477 * t419 + t475 * t511;
t380 = t477 * t417 + t475 * t467;
t379 = t475 * t419 - t477 * t511;
t378 = t475 * t417 - t477 * t467;
t377 = t477 * t420 + t475 * t440;
t376 = t477 * t418 - t475 * t443;
t369 = t477 * t389 + t475 * t452;
t368 = t475 * t389 - t477 * t452;
t367 = -t481 * t423 + t483 * t424;
t366 = t483 * t423 + t481 * t424;
t360 = pkin(1) * t453 + pkin(4) * t501;
t352 = -t481 * t383 + t483 * t385;
t351 = -t481 * t382 + t483 * t384;
t350 = t483 * t383 + t481 * t385;
t349 = t483 * t382 + t481 * t384;
t348 = -t481 * t379 + t483 * t381;
t347 = -t481 * t378 + t483 * t380;
t346 = t483 * t379 + t481 * t381;
t345 = t483 * t378 + t481 * t380;
t342 = -pkin(5) * t416 + t358;
t341 = -pkin(5) * t414 + t357;
t336 = -t481 * t375 + t483 * t377;
t335 = -t481 * t374 + t483 * t376;
t334 = t483 * t375 + t481 * t377;
t333 = t483 * t374 + t481 * t376;
t330 = -t481 * t368 + t483 * t369;
t329 = t483 * t368 + t481 * t369;
t328 = -pkin(3) * t416 + t354;
t327 = -pkin(3) * t414 + t353;
t322 = pkin(2) * t445 + qJ(3) * t502;
t317 = -qJ(3) * t398 + t477 * t320;
t316 = qJ(3) * t401 + t475 * t320;
t315 = t477 * t321 + t475 * t361;
t309 = -pkin(1) * t334 - t490;
t308 = -pkin(1) * t333 - t489;
t307 = -qJ(3) * t375 - t475 * t328 + t477 * t342;
t306 = -qJ(3) * t374 - t475 * t327 + t477 * t341;
t305 = -pkin(2) * t416 + qJ(3) * t377 + t477 * t328 + t475 * t342;
t304 = -pkin(2) * t414 + qJ(3) * t376 + t477 * t327 + t475 * t341;
t302 = pkin(1) * t312 + t529;
t301 = -pkin(4) * t355 - t481 * t316 + t483 * t317;
t300 = pkin(4) * t356 + t483 * t316 + t481 * t317;
t299 = -t481 * t314 + t483 * t315;
t298 = t483 * t314 + t481 * t315;
t297 = pkin(4) * t312 + qJ(3) * t516 - t481 * t322;
t296 = pkin(1) * t445 + pkin(4) * t537 + qJ(3) * t521 + t483 * t322;
t295 = -qJ(3) * t314 - (pkin(3) * t475 - pkin(5) * t477) * t320;
t294 = -pkin(4) * t334 - t481 * t305 + t483 * t307;
t293 = -pkin(4) * t333 - t481 * t304 + t483 * t306;
t292 = -pkin(1) * t416 + pkin(4) * t336 + t483 * t305 + t481 * t307;
t291 = -pkin(1) * t414 + pkin(4) * t335 + t483 * t304 + t481 * t306;
t290 = qJ(3) * t315 - (-pkin(3) * t477 - pkin(5) * t475 - pkin(2)) * t320;
t289 = -pkin(1) * t298 - t494;
t288 = -pkin(4) * t298 - t481 * t290 + t483 * t295;
t287 = pkin(1) * t320 + pkin(4) * t299 + t483 * t290 + t481 * t295;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t525, -t524, -t531, -qJ(1) * t531, 0, 0, t478 * t450, 0, -t478 * t449, t465, t503 * t476 + t478 * t492, t478 * t410 + t504 * t476, t478 * t372, -qJ(1) * (t476 * t501 + t433) - (t476 * pkin(1) - t478 * pkin(4)) * t372, 0, 0, t478 * t500, 0, -t478 * t390, t465, -t505 * t476 + t478 * t536, t478 * t340 - t506 * t476, t478 * t312, t478 * t297 - t476 * t302 - qJ(1) * (t478 * t445 + t476 * t537), t478 * t352 + t476 * t412, t478 * t330 + t476 * t388, t478 * t348 + t476 * t415, t478 * t351 - t476 * t411, t478 * t347 + t476 * t413, t478 * t367, t478 * t293 - t476 * t308 - qJ(1) * (t476 * t335 - t478 * t414), t478 * t294 - t476 * t309 - qJ(1) * (t476 * t336 - t478 * t416), t478 * t301 - t476 * t507, t478 * t288 - t476 * t289 - qJ(1) * (t476 * t299 + t320 * t478); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t524, -t525, t498, qJ(1) * t498, 0, 0, t476 * t450, 0, -t476 * t449, -t512, t476 * t492 - t503 * t478, t476 * t410 - t504 * t478, t476 * t372, qJ(1) * (t478 * t501 - t527) - (-t478 * pkin(1) - t476 * pkin(4)) * t372, 0, 0, t476 * t500, 0, -t476 * t390, -t512, t476 * t536 + t505 * t478, t476 * t340 + t506 * t478, t476 * t312, t476 * t297 + t478 * t302 + qJ(1) * (-t476 * t445 + t478 * t537), t476 * t352 - t478 * t412, t476 * t330 - t478 * t388, t476 * t348 - t478 * t415, t476 * t351 + t478 * t411, t476 * t347 - t478 * t413, t476 * t367, t476 * t293 + t478 * t308 + qJ(1) * (t478 * t335 + t476 * t414), t476 * t294 + t478 * t309 + qJ(1) * (t478 * t336 + t476 * t416), t476 * t301 + t478 * t507, t476 * t288 + t478 * t289 + qJ(1) * (t478 * t299 - t320 * t476); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t453, t454, 0, 0, 0, 0, t449, 0, t450, 0, -t410, t492, t501, t360, 0, 0, t390, 0, t500, 0, -t340, t536, t537, t296, t350, t329, t346, t349, t345, t366, t291, t292, t300, t287; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t473, -t453, 0, 0, 0, t450, 0, -t449, 0, t492, t410, t372, pkin(4) * t372, 0, 0, t500, 0, -t390, 0, t536, t340, t312, t297, t352, t330, t348, t351, t347, t367, t293, t294, t301, t288; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t473, 0, -t454, 0, 0, 0, 0, 0, 0, -qJDD(2), t387, t386, 0, pkin(1) * t372, 0, 0, 0, 0, 0, -qJDD(2), t332, t331, 0, t302, -t412, -t388, -t415, t411, -t413, 0, t308, t309, t303, t289; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t453, t454, 0, 0, 0, 0, t449, 0, t450, 0, -t410, t492, t501, t360, 0, 0, t390, 0, t500, 0, -t340, t536, t537, t296, t350, t329, t346, t349, t345, t366, t291, t292, t300, t287; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t485, 0, 0, -t453, t427, 0, 0, 0, t447, 0, -t446, 0, t491, t400, t325, qJ(3) * t325, t385, t369, t381, t384, t380, t424, t306, t307, t317, t295; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t485, 0, qJDD(2), 0, t453, 0, t428, 0, 0, 0, t446, 0, t447, 0, -t400, t491, t502, t322, t383, t368, t379, t382, t378, t423, t304, t305, t316, t290; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t427, -t428, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t488, t493, 0, -t529, t412, t388, t415, -t411, t413, 0, t489, t490, t487, t494; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t485, 0, 0, -t445, t364, 0, t426, t389, t419, t425, t417, t438, t341, t342, t320, pkin(5) * t320; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t485, 0, qJDD(2), 0, t445, 0, t365, 0, t461, -t452, -t511, -t461, -t467, -qJDD(4), t327, t328, 0, pkin(3) * t320; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t364, -t365, 0, 0, t412, t388, t415, -t411, t413, 0, t509, t510, t495, t515; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t441, t443, t455, -t464, t459, t464, 0, t361, t353, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t508, t440, t457, t442, t456, -t508, -t361, 0, t354, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t461, t452, t511, t461, t467, qJDD(4), -t353, -t354, 0, 0;];
m_new_reg = t1;
