% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4PRRP4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d2,d3,theta1]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:28
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4PRRP4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4PRRP4_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4PRRP4_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4PRRP4_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4PRRP4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4PRRP4_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:28:03
% EndTime: 2019-12-31 16:28:06
% DurationCPUTime: 3.52s
% Computational Cost: add. (4998->315), mult. (10702->359), div. (0->0), fcn. (6205->6), ass. (0->218)
t590 = qJD(3) ^ 2;
t586 = sin(qJ(3));
t577 = t586 ^ 2;
t591 = qJD(2) ^ 2;
t652 = t577 * t591;
t558 = t590 + t652;
t588 = cos(qJ(3));
t563 = t586 * t591 * t588;
t557 = qJDD(3) - t563;
t633 = t588 * t557;
t518 = -t586 * t558 + t633;
t624 = qJD(2) * qJD(3);
t570 = t588 * t624;
t622 = t586 * qJDD(2);
t545 = 0.2e1 * t570 + t622;
t587 = sin(qJ(2));
t589 = cos(qJ(2));
t466 = t587 * t518 + t589 * t545;
t470 = t589 * t518 - t587 * t545;
t582 = sin(pkin(6));
t583 = cos(pkin(6));
t692 = qJ(1) * (t582 * t466 - t583 * t470);
t691 = qJ(1) * (t583 * t466 + t582 * t470);
t690 = pkin(1) * t466;
t689 = pkin(4) * t466;
t640 = t586 * t557;
t512 = t588 * t558 + t640;
t688 = -pkin(1) * t512 + pkin(4) * t470;
t569 = t586 * t624;
t620 = t588 * qJDD(2);
t548 = -0.2e1 * t569 + t620;
t634 = t588 * t548;
t643 = t586 * t545;
t493 = -t634 + t643;
t578 = t588 ^ 2;
t554 = (t577 - t578) * t591;
t457 = t587 * t493 + t589 * t554;
t459 = t589 * t493 - t587 * t554;
t685 = t583 * t457 + t582 * t459;
t684 = t582 * t457 - t583 * t459;
t651 = t578 * t591;
t560 = -t590 + t651;
t516 = -t588 * t560 + t640;
t619 = t589 * qJDD(2);
t478 = t587 * t516 + t588 * t619;
t481 = t589 * t516 - t587 * t620;
t683 = t583 * t478 + t582 * t481;
t682 = t582 * t478 - t583 * t481;
t555 = t583 * g(1) + t582 * g(2);
t613 = t582 * g(1) - t583 * g(2);
t596 = t589 * t555 - t587 * t613;
t611 = t587 * t555 + t589 * t613;
t612 = -t587 * t611 - t589 * t596;
t452 = t587 * t596 - t589 * t611;
t645 = t583 * t452;
t681 = -t582 * t612 + t645;
t650 = t582 * t452;
t680 = t583 * t612 + t650;
t679 = -pkin(2) * t545 - pkin(5) * t518;
t677 = pkin(2) * t512;
t676 = pkin(5) * t512;
t489 = -t591 * pkin(2) + qJDD(2) * pkin(5) - t596;
t579 = g(3) - qJDD(1);
t568 = t588 * t579;
t603 = -pkin(3) * t588 - qJ(4) * t586;
t626 = t591 * t603;
t443 = -qJDD(3) * pkin(3) - t590 * qJ(4) + (t489 + t626) * t586 + qJDD(4) + t568;
t556 = qJDD(3) + t563;
t561 = -t590 - t651;
t675 = pkin(3) * t556 + qJ(4) * t561 - t443;
t546 = t570 + t622;
t674 = t546 + t570;
t621 = t587 * qJDD(2);
t551 = t589 * t591 + t621;
t527 = pkin(4) * t551 - t589 * t579;
t552 = -t587 * t591 + t619;
t601 = -pkin(4) * t552 - t587 * t579;
t667 = t583 * t551 + t582 * t552;
t673 = qJ(1) * t667 + t583 * t527 - t582 * t601;
t497 = -t582 * t551 + t583 * t552;
t672 = -qJ(1) * t497 + t582 * t527 + t583 * t601;
t464 = t586 * t489 + t568;
t468 = t588 * t489 - t586 * t579;
t425 = t586 * t464 + t588 * t468;
t508 = t586 * t560 + t633;
t665 = -t583 * t555 - t582 * t613;
t663 = -t582 * t555 + t583 * t613;
t539 = t588 * t556;
t509 = t586 * t561 + t539;
t662 = pkin(2) * t509;
t641 = t586 * t556;
t515 = t588 * t561 - t641;
t465 = t587 * t515 + t589 * t548;
t659 = pkin(4) * t465;
t627 = t577 + t578;
t550 = t627 * qJDD(2);
t553 = t627 * t591;
t499 = t587 * t550 + t589 * t553;
t658 = pkin(4) * t499;
t657 = pkin(5) * t509;
t469 = t589 * t515 - t587 * t548;
t656 = qJ(1) * (t583 * t465 + t582 * t469);
t500 = t589 * t550 - t587 * t553;
t655 = qJ(1) * (t583 * t499 + t582 * t500);
t646 = t582 * t579;
t644 = t583 * t579;
t599 = qJDD(2) * pkin(2) + t591 * pkin(5) + t611;
t474 = t586 * t599;
t642 = t586 * t548;
t475 = t588 * t599;
t635 = t588 * t545;
t630 = pkin(2) * t599 + pkin(5) * t425;
t629 = pkin(2) * t548 + pkin(5) * t515;
t628 = pkin(2) * t553 + pkin(5) * t550;
t625 = qJD(2) * t586;
t623 = (qJD(4) * qJD(3));
t618 = -t474 + t679;
t617 = t475 + t629;
t614 = -pkin(1) * t509 + pkin(4) * t469;
t609 = t587 * t563;
t608 = t589 * t563;
t573 = 2 * t623;
t600 = -t590 * pkin(3) + qJDD(3) * qJ(4) + t588 * t626 + t468;
t440 = t573 + t600;
t430 = pkin(3) * t553 + t440;
t432 = qJ(4) * t553 + t443;
t607 = t588 * t430 + t586 * t432 + t628;
t606 = t628 + t425;
t604 = -pkin(3) * t443 + qJ(4) * t440;
t602 = pkin(3) * t586 - qJ(4) * t588;
t424 = t588 * t464 - t586 * t468;
t490 = t635 + t642;
t547 = -t569 + t620;
t595 = -t547 * pkin(3) - t674 * qJ(4) - t599;
t593 = 0.2e1 * qJD(4) * t625 - t595;
t426 = -pkin(3) * t569 + qJ(4) * t545 + t593;
t598 = pkin(3) * t635 + t586 * t426 - t679;
t427 = (t548 - t569) * pkin(3) + t593;
t597 = qJ(4) * t642 + t588 * t427 + t629;
t407 = t588 * t440 + t586 * t443;
t433 = (pkin(3) * qJD(3) - 0.2e1 * qJD(4)) * t625 + t595;
t594 = pkin(5) * t407 + (-pkin(2) + t603) * t433;
t592 = pkin(3) * t558 + qJ(4) * t557 + t600;
t559 = -t590 + t652;
t542 = t602 * qJDD(2);
t538 = t627 * t624;
t523 = t587 * qJDD(3) + t589 * t538;
t522 = t588 * t546 - t577 * t624;
t521 = -t589 * qJDD(3) + t587 * t538;
t520 = -t586 * t547 - t578 * t624;
t517 = t586 * t559 + t539;
t511 = -t588 * t559 + t641;
t507 = t674 * t586;
t506 = (t547 - t569) * t588;
t496 = pkin(1) * t499;
t495 = pkin(4) * t500;
t486 = t589 * t522 - t609;
t485 = t589 * t520 + t609;
t484 = t587 * t522 + t608;
t483 = t587 * t520 - t608;
t482 = t589 * t517 + t586 * t621;
t479 = t587 * t517 - t586 * t619;
t473 = -pkin(1) * t551 + t596;
t472 = pkin(1) * t552 + t611;
t463 = pkin(1) * t465;
t455 = -t582 * t521 + t583 * t523;
t454 = t583 * t521 + t582 * t523;
t449 = pkin(1) * t452;
t448 = -t475 + t676;
t447 = -t474 - t657;
t445 = qJ(1) * (-t582 * t499 + t583 * t500);
t444 = pkin(1) * t579 + pkin(4) * t612;
t442 = t468 + t677;
t441 = t464 - t662;
t439 = -t582 * t484 + t583 * t486;
t438 = -t582 * t483 + t583 * t485;
t437 = t583 * t484 + t582 * t486;
t436 = t583 * t483 + t582 * t485;
t435 = -t582 * t479 + t583 * t482;
t434 = t583 * t479 + t582 * t482;
t420 = qJ(1) * (-t582 * t465 + t583 * t469);
t417 = -t662 - t675;
t416 = -t592 - (2 * t623) - t677;
t415 = t618 - t690;
t414 = t463 + t617;
t413 = t589 * t424 - t658;
t412 = t587 * t424 + t495;
t411 = t589 * t425 - t587 * t599;
t410 = t587 * t425 + t589 * t599;
t409 = -pkin(3) * t643 + t588 * t426 - t676;
t408 = qJ(4) * t634 - t586 * t427 - t657;
t406 = t586 * t440 - t588 * t443;
t405 = t496 + t606;
t403 = -t586 * t430 + t588 * t432;
t402 = -t587 * t442 + t589 * t448 + t689;
t401 = -t587 * t441 + t589 * t447 - t659;
t400 = t598 + t690;
t399 = t463 + t597;
t398 = t589 * t442 + t587 * t448 - t688;
t397 = t589 * t441 + t587 * t447 + t614;
t396 = t589 * t403 - t587 * t542 - t658;
t395 = t587 * t403 + t589 * t542 + t495;
t394 = t496 + t607;
t393 = t589 * t407 + t587 * t433;
t392 = t587 * t407 - t589 * t433;
t391 = pkin(1) * t410 + t630;
t390 = -pkin(2) * t406 - t604;
t389 = t589 * t408 - t587 * t417 - t659;
t388 = t589 * t409 - t587 * t416 - t689;
t387 = -pkin(5) * t406 + t602 * t433;
t386 = t587 * t408 + t589 * t417 + t614;
t385 = -pkin(4) * t410 - (pkin(2) * t587 - pkin(5) * t589) * t424;
t384 = t587 * t409 + t589 * t416 + t688;
t383 = pkin(4) * t411 - (-pkin(2) * t589 - pkin(5) * t587 - pkin(1)) * t424;
t382 = pkin(1) * t392 + t594;
t381 = -pkin(4) * t392 + t589 * t387 - t587 * t390;
t380 = -pkin(1) * t406 + pkin(4) * t393 + t587 * t387 + t589 * t390;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t646, -t644, -t663, -qJ(1) * t663, 0, 0, t497, 0, -t667, 0, t672, t673, t681, pkin(4) * t645 + qJ(1) * t681 - t582 * t444, t439, t684, t435, t438, t682, t455, -t582 * t397 + t583 * t401 - t656, -t582 * t398 + t583 * t402 + t691, -t582 * t412 + t583 * t413 - t655, t583 * t385 - t582 * t383 - qJ(1) * (t583 * t410 + t582 * t411), t439, t435, -t684, t455, -t682, t438, -t582 * t386 + t583 * t389 - t656, -t582 * t395 + t583 * t396 - t655, -t582 * t384 + t583 * t388 - t691, t583 * t381 - t582 * t380 - qJ(1) * (t583 * t392 + t582 * t393); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t644, -t646, t665, qJ(1) * t665, 0, 0, t667, 0, t497, 0, -t673, t672, t680, pkin(4) * t650 + qJ(1) * t680 + t583 * t444, t437, -t685, t434, t436, -t683, t454, t583 * t397 + t582 * t401 + t420, t583 * t398 + t582 * t402 + t692, t583 * t412 + t582 * t413 + t445, t582 * t385 + t583 * t383 + qJ(1) * (-t582 * t410 + t583 * t411), t437, t434, t685, t454, t683, t436, t583 * t386 + t582 * t389 + t420, t583 * t395 + t582 * t396 + t445, t583 * t384 + t582 * t388 - t692, t582 * t381 + t583 * t380 + qJ(1) * (-t582 * t392 + t583 * t393); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t613, t555, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t472, t473, 0, -t449, t507, t490, t511, t506, t508, 0, t414, t415, t405, t391, t507, t511, -t490, 0, -t508, t506, t399, t394, t400, t382; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t579, -t613, 0, 0, 0, t552, 0, -t551, 0, t601, t527, t452, pkin(4) * t452, t486, -t459, t482, t485, -t481, t523, t401, t402, t413, t385, t486, t482, t459, t523, t481, t485, t389, t396, t388, t381; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t579, 0, -t555, 0, 0, 0, t551, 0, t552, 0, -t527, t601, t612, t444, t484, -t457, t479, t483, -t478, t521, t397, t398, t412, t383, t484, t479, t457, t521, t478, t483, t386, t395, t384, t380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t613, t555, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t472, t473, 0, -t449, t507, t490, t511, t506, t508, 0, t414, t415, t405, t391, t507, t511, -t490, 0, -t508, t506, t399, t394, t400, t382; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t591, 0, 0, -t579, -t611, 0, t522, -t493, t517, t520, -t516, t538, t447, t448, t424, pkin(5) * t424, t522, t517, t493, t538, t516, t520, t408, t403, t409, t387; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t591, 0, qJDD(2), 0, t579, 0, -t596, 0, t563, -t554, -t622, -t563, -t620, -qJDD(3), t441, t442, 0, pkin(2) * t424, t563, -t622, t554, -qJDD(3), t620, -t563, t417, t542, t416, t390; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t611, t596, 0, 0, t507, t490, t511, t506, t508, 0, t617, t618, t606, t630, t507, t511, -t490, 0, -t508, t506, t597, t607, t598, t594; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t546, t548, t556, -t570, t560, t570, 0, -t599, t464, 0, t546, t556, -t548, t570, -t560, -t570, qJ(4) * t548, t432, t426, -qJ(4) * t433; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t569, t545, -t559, t547, t557, -t569, t599, 0, t468, 0, t569, -t559, -t545, -t569, -t557, t547, t427, t430, pkin(3) * t545, -pkin(3) * t433; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t563, t554, t622, t563, t620, qJDD(3), -t464, -t468, 0, 0, -t563, t622, -t554, qJDD(3), -t620, t563, t675, -t542, t573 + t592, t604; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t546, t556, -t548, t570, -t560, -t570, 0, t443, -t433, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t563, t622, -t554, qJDD(3), -t620, t563, -t443, 0, t440, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t569, t559, t545, t569, t557, -t547, t433, -t440, 0, 0;];
m_new_reg = t1;
