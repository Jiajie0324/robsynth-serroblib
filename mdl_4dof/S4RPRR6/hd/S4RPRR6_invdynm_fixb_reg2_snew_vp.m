% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RPRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:52
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RPRR6_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RPRR6_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RPRR6_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RPRR6_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RPRR6_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RPRR6_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:52:51
% EndTime: 2019-12-31 16:52:57
% DurationCPUTime: 6.35s
% Computational Cost: add. (30260->440), mult. (74680->623), div. (0->0), fcn. (54273->8), ass. (0->304)
t777 = sin(qJ(4));
t775 = sin(pkin(7));
t776 = cos(pkin(7));
t778 = sin(qJ(3));
t781 = cos(qJ(3));
t744 = (t775 * t778 - t776 * t781) * qJD(1);
t793 = t775 * t781 + t776 * t778;
t746 = t793 * qJD(1);
t780 = cos(qJ(4));
t708 = t780 * t744 + t777 * t746;
t710 = -t777 * t744 + t780 * t746;
t670 = t710 * t708;
t771 = qJDD(3) + qJDD(4);
t845 = -t670 + t771;
t851 = t777 * t845;
t724 = t746 * t744;
t843 = qJDD(3) - t724;
t850 = t778 * t843;
t849 = t780 * t845;
t848 = t781 * t843;
t779 = sin(qJ(1));
t782 = cos(qJ(1));
t758 = t782 * g(1) + t779 * g(2);
t784 = qJD(1) ^ 2;
t800 = -t784 * pkin(1) + qJDD(1) * qJ(2) + 0.2e1 * qJD(1) * qJD(2) - t758;
t847 = pkin(5) * qJDD(1) + t800;
t765 = t775 * qJDD(1);
t767 = t776 * qJDD(1);
t742 = t778 * t765 - t781 * t767;
t815 = t746 * qJD(3);
t719 = -t742 - t815;
t737 = t744 * qJD(3);
t743 = t793 * qJDD(1);
t721 = -t737 + t743;
t654 = -t708 * qJD(4) + t777 * t719 + t780 * t721;
t774 = qJD(3) + qJD(4);
t700 = t774 * t708;
t846 = t654 - t700;
t772 = t775 ^ 2;
t773 = t776 ^ 2;
t844 = t772 + t773;
t842 = t784 * t844;
t802 = -t780 * t719 + t777 * t721;
t622 = (qJD(4) - t774) * t710 + t802;
t706 = t708 ^ 2;
t707 = t710 ^ 2;
t740 = t744 ^ 2;
t741 = t746 ^ 2;
t770 = t774 ^ 2;
t828 = t776 * t784;
t838 = t776 * g(3);
t696 = -t838 + (pkin(2) * t828 - t847) * t775;
t768 = t773 * t784;
t839 = t775 * g(3);
t703 = -pkin(2) * t768 + t847 * t776 - t839;
t657 = -t781 * t696 + t778 * t703;
t658 = t778 * t696 + t781 * t703;
t605 = -t781 * t657 + t778 * t658;
t841 = pkin(2) * t605;
t673 = -t742 * t778 - t781 * t743;
t840 = pkin(2) * t673;
t836 = qJDD(1) * pkin(1);
t835 = t772 * t784;
t834 = t774 * t710;
t833 = t774 * t777;
t832 = t774 * t780;
t831 = t775 * t605;
t830 = t775 * t776;
t829 = t776 * t605;
t757 = t779 * g(1) - t782 * g(2);
t797 = -qJDD(2) + t757;
t714 = (pkin(2) * t776 + pkin(1)) * qJDD(1) + (t844 * pkin(5) + qJ(2)) * t784 + t797;
t795 = qJD(3) * pkin(3) - t746 * pkin(6);
t646 = t719 * pkin(3) + t740 * pkin(6) - t746 * t795 + t714;
t827 = t777 * t646;
t667 = t670 + t771;
t826 = t777 * t667;
t610 = (-t721 - t737) * pkin(6) + t843 * pkin(3) - t657;
t614 = -t740 * pkin(3) + t719 * pkin(6) - qJD(3) * t795 + t658;
t578 = -t780 * t610 + t777 * t614;
t579 = t777 * t610 + t780 * t614;
t548 = -t780 * t578 + t777 * t579;
t825 = t778 * t548;
t824 = t778 * t714;
t716 = qJDD(3) + t724;
t823 = t778 * t716;
t738 = t784 * qJ(2) + t797 + t836;
t822 = t779 * t738;
t821 = t780 * t646;
t820 = t780 * t667;
t819 = t781 * t548;
t818 = t781 * t714;
t817 = t781 * t716;
t816 = t782 * t738;
t812 = t779 * qJDD(1);
t811 = t782 * qJDD(1);
t810 = t779 * t670;
t809 = t779 * t724;
t808 = t782 * t670;
t807 = t782 * t724;
t806 = t775 * t767;
t549 = t777 * t578 + t780 * t579;
t529 = t778 * t549 + t819;
t547 = pkin(3) * t548;
t805 = pkin(2) * t529 + t547;
t626 = t654 + t700;
t589 = -t622 * t777 - t780 * t626;
t591 = -t622 * t780 + t777 * t626;
t557 = t781 * t589 + t778 * t591;
t587 = pkin(3) * t589;
t804 = pkin(2) * t557 + t587;
t803 = t738 + t836;
t606 = t778 * t657 + t781 * t658;
t725 = t800 * t775 + t838;
t726 = t800 * t776 - t839;
t679 = t775 * t725 + t776 * t726;
t801 = -t779 * t757 - t782 * t758;
t783 = qJD(3) ^ 2;
t733 = -t741 - t783;
t682 = t781 * t733 - t823;
t799 = pkin(2) * t682 - t658;
t756 = -t779 * t784 + t811;
t798 = -pkin(4) * t756 - t779 * g(3);
t665 = -t770 - t706;
t612 = t777 * t665 + t849;
t796 = pkin(3) * t612 - t578;
t678 = t776 * t725 - t775 * t726;
t794 = t782 * t757 - t779 * t758;
t755 = t782 * t784 + t812;
t713 = -t783 - t740;
t671 = t778 * t713 + t848;
t792 = pkin(2) * t671 - t657;
t694 = -t707 - t770;
t633 = t780 * t694 - t826;
t791 = pkin(3) * t633 - t579;
t749 = t776 * t842;
t790 = -t779 * t749 + t776 * t811;
t789 = t782 * t749 + t776 * t812;
t613 = t780 * t665 - t851;
t580 = t781 * t612 + t778 * t613;
t788 = pkin(2) * t580 + t796;
t634 = -t777 * t694 - t820;
t595 = t781 * t633 + t778 * t634;
t787 = pkin(2) * t595 + t791;
t766 = t773 * qJDD(1);
t764 = t772 * qJDD(1);
t760 = t775 * t828;
t759 = 0.2e1 * t806;
t754 = -t768 + t835;
t753 = t768 + t835;
t752 = t766 - t764;
t751 = t766 + t764;
t748 = t775 * t842;
t739 = -pkin(4) * t755 + t782 * g(3);
t732 = -t741 + t783;
t731 = t740 - t783;
t730 = t756 * t830;
t729 = t755 * t830;
t728 = t782 * t748 + t775 * t812;
t727 = t779 * t748 - t775 * t811;
t723 = t741 - t740;
t720 = -0.2e1 * t737 + t743;
t718 = t742 + 0.2e1 * t815;
t705 = (-t744 * t781 + t746 * t778) * qJD(3);
t704 = (-t744 * t778 - t746 * t781) * qJD(3);
t702 = -qJ(2) * t749 + t803 * t776;
t701 = qJ(2) * t748 - t803 * t775;
t698 = -t707 + t770;
t697 = t706 - t770;
t691 = -t740 - t741;
t689 = t781 * t721 - t778 * t815;
t688 = t778 * t721 + t781 * t815;
t687 = -t778 * t719 + t781 * t737;
t686 = t781 * t719 + t778 * t737;
t685 = -t778 * t733 - t817;
t684 = -t778 * t732 + t848;
t683 = t781 * t731 - t823;
t681 = t781 * t732 + t850;
t680 = t778 * t731 + t817;
t676 = -t781 * t718 - t778 * t720;
t675 = -t742 * t781 + t778 * t743;
t674 = -t778 * t718 + t781 * t720;
t672 = t781 * t713 - t850;
t669 = t707 - t706;
t664 = pkin(1) * t738 + qJ(2) * t679;
t663 = -t775 * t704 + t776 * t705;
t662 = t776 * t704 + t775 * t705;
t661 = (-t708 * t780 + t710 * t777) * t774;
t660 = (-t708 * t777 - t710 * t780) * t774;
t659 = pkin(1) * t753 + qJ(2) * t751 + t679;
t655 = -pkin(5) * t682 - t818;
t653 = -t710 * qJD(4) - t802;
t652 = -pkin(5) * t671 - t824;
t651 = -t706 - t707;
t650 = -t775 * t688 + t776 * t689;
t649 = -t775 * t686 + t776 * t687;
t648 = t776 * t688 + t775 * t689;
t647 = t776 * t686 + t775 * t687;
t645 = -t775 * t682 + t776 * t685;
t644 = -t775 * t681 + t776 * t684;
t643 = -t775 * t680 + t776 * t683;
t642 = t776 * t682 + t775 * t685;
t641 = t776 * t681 + t775 * t684;
t640 = t776 * t680 + t775 * t683;
t639 = t780 * t697 - t826;
t638 = -t777 * t698 + t849;
t637 = t777 * t697 + t820;
t636 = t780 * t698 + t851;
t635 = -pkin(2) * t720 + pkin(5) * t685 - t824;
t631 = -pkin(2) * t718 + pkin(5) * t672 + t818;
t630 = -t775 * t674 + t776 * t676;
t629 = -t775 * t673 + t776 * t675;
t628 = t776 * t674 + t775 * t676;
t627 = t776 * t673 + t775 * t675;
t621 = (qJD(4) + t774) * t710 + t802;
t620 = -t775 * t671 + t776 * t672;
t619 = t776 * t671 + t775 * t672;
t618 = t780 * t654 - t710 * t833;
t617 = t777 * t654 + t710 * t832;
t616 = -t777 * t653 + t708 * t832;
t615 = t780 * t653 + t708 * t833;
t608 = -t778 * t660 + t781 * t661;
t607 = t781 * t660 + t778 * t661;
t604 = pkin(2) * t714 + pkin(5) * t606;
t603 = -pkin(1) * t627 - t840;
t602 = -pkin(6) * t633 - t821;
t601 = -pkin(5) * t673 - t605;
t600 = -t778 * t637 + t781 * t639;
t599 = -t778 * t636 + t781 * t638;
t598 = t781 * t637 + t778 * t639;
t597 = t781 * t636 + t778 * t638;
t596 = -t778 * t633 + t781 * t634;
t594 = -pkin(1) * t642 - t799;
t593 = -pkin(6) * t612 - t827;
t592 = -pkin(2) * t691 + pkin(5) * t675 + t606;
t590 = -t780 * t621 - t777 * t846;
t588 = -t777 * t621 + t780 * t846;
t586 = -pkin(1) * t619 - t792;
t585 = -t778 * t617 + t781 * t618;
t584 = -t778 * t615 + t781 * t616;
t583 = t781 * t617 + t778 * t618;
t582 = t781 * t615 + t778 * t616;
t581 = -t778 * t612 + t781 * t613;
t576 = -qJ(2) * t642 - t775 * t635 + t776 * t655;
t575 = -t775 * t607 + t776 * t608;
t574 = t776 * t607 + t775 * t608;
t573 = t776 * t606 - t831;
t572 = t775 * t606 + t829;
t571 = -pkin(1) * t720 + qJ(2) * t645 + t776 * t635 + t775 * t655;
t570 = -pkin(3) * t846 + pkin(6) * t634 - t827;
t569 = -qJ(2) * t619 - t775 * t631 + t776 * t652;
t568 = -pkin(3) * t621 + pkin(6) * t613 + t821;
t567 = -pkin(1) * t718 + qJ(2) * t620 + t776 * t631 + t775 * t652;
t566 = -t775 * t598 + t776 * t600;
t565 = -t775 * t597 + t776 * t599;
t564 = t776 * t598 + t775 * t600;
t563 = t776 * t597 + t775 * t599;
t562 = -t775 * t595 + t776 * t596;
t561 = t776 * t595 + t775 * t596;
t560 = -pkin(1) * t572 - t841;
t559 = -t778 * t589 + t781 * t591;
t558 = -t778 * t588 + t781 * t590;
t556 = t781 * t588 + t778 * t590;
t555 = -t775 * t583 + t776 * t585;
t554 = -t775 * t582 + t776 * t584;
t553 = t776 * t583 + t775 * t585;
t552 = t776 * t582 + t775 * t584;
t551 = -t775 * t580 + t776 * t581;
t550 = t776 * t580 + t775 * t581;
t546 = -qJ(2) * t627 - t775 * t592 + t776 * t601;
t545 = -pkin(1) * t691 + qJ(2) * t629 + t776 * t592 + t775 * t601;
t544 = -pkin(5) * t829 - qJ(2) * t572 - t775 * t604;
t543 = pkin(3) * t646 + pkin(6) * t549;
t542 = pkin(1) * t714 - pkin(5) * t831 + qJ(2) * t573 + t776 * t604;
t541 = -pkin(5) * t595 - t778 * t570 + t781 * t602;
t540 = -pkin(6) * t589 - t548;
t539 = -pkin(5) * t580 - t778 * t568 + t781 * t593;
t538 = -pkin(2) * t846 + pkin(5) * t596 + t781 * t570 + t778 * t602;
t537 = -pkin(3) * t651 + pkin(6) * t591 + t549;
t536 = -pkin(2) * t621 + pkin(5) * t581 + t781 * t568 + t778 * t593;
t535 = -t775 * t557 + t776 * t559;
t534 = -t775 * t556 + t776 * t558;
t533 = t776 * t557 + t775 * t559;
t532 = t776 * t556 + t775 * t558;
t531 = -pkin(1) * t561 - t787;
t530 = t781 * t549 - t825;
t528 = -pkin(1) * t550 - t788;
t527 = -pkin(1) * t533 - t804;
t526 = -qJ(2) * t561 - t775 * t538 + t776 * t541;
t525 = -pkin(1) * t846 + qJ(2) * t562 + t776 * t538 + t775 * t541;
t524 = -pkin(5) * t557 - t778 * t537 + t781 * t540;
t523 = -t775 * t529 + t776 * t530;
t522 = t776 * t529 + t775 * t530;
t521 = -pkin(2) * t651 + pkin(5) * t559 + t781 * t537 + t778 * t540;
t520 = -pkin(5) * t529 - pkin(6) * t819 - t778 * t543;
t519 = -qJ(2) * t550 - t775 * t536 + t776 * t539;
t518 = pkin(2) * t646 + pkin(5) * t530 - pkin(6) * t825 + t781 * t543;
t517 = -pkin(1) * t621 + qJ(2) * t551 + t776 * t536 + t775 * t539;
t516 = -pkin(1) * t522 - t805;
t515 = -qJ(2) * t533 - t775 * t521 + t776 * t524;
t514 = -pkin(1) * t651 + qJ(2) * t535 + t776 * t521 + t775 * t524;
t513 = -qJ(2) * t522 - t775 * t518 + t776 * t520;
t512 = pkin(1) * t646 + qJ(2) * t523 + t776 * t518 + t775 * t520;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t756, 0, -t755, 0, t798, -t739, -t794, -pkin(4) * t794, t730, t782 * t752 + t779 * t754, t728, -t730, t789, 0, -pkin(4) * t790 - t779 * t725 - t775 * t816, -pkin(4) * t727 - t779 * t726 - t776 * t816, t782 * t678 - pkin(4) * (t779 * t751 + t782 * t753), -pkin(4) * (t779 * t679 + t816) - (t779 * pkin(1) - t782 * qJ(2)) * t678, t782 * t650 + t809, t782 * t630 + t779 * t723, t782 * t644 + t779 * t743, t782 * t649 - t809, t782 * t643 - t779 * t742, t779 * qJDD(3) + t782 * t663, t782 * t569 - t779 * t586 - pkin(4) * (t779 * t620 - t782 * t718), t782 * t576 - t779 * t594 - pkin(4) * (t779 * t645 - t782 * t720), t782 * t546 - t779 * t603 - pkin(4) * (t779 * t629 - t782 * t691), t782 * t544 - t779 * t560 - pkin(4) * (t779 * t573 + t782 * t714), t782 * t555 + t810, t782 * t534 + t779 * t669, t782 * t565 + t779 * t626, t782 * t554 - t810, t782 * t566 - t779 * t622, t782 * t575 + t779 * t771, t782 * t519 - t779 * t528 - pkin(4) * (t779 * t551 - t782 * t621), t782 * t526 - t779 * t531 - pkin(4) * (t779 * t562 - t782 * t846), t782 * t515 - t779 * t527 - pkin(4) * (t779 * t535 - t782 * t651), t782 * t513 - t779 * t516 - pkin(4) * (t779 * t523 + t782 * t646); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t755, 0, t756, 0, t739, t798, t801, pkin(4) * t801, t729, t779 * t752 - t782 * t754, t727, -t729, -t790, 0, -pkin(4) * t789 + t782 * t725 - t775 * t822, pkin(4) * t728 + t782 * t726 - t776 * t822, t779 * t678 + pkin(4) * (t782 * t751 - t779 * t753), pkin(4) * (t782 * t679 - t822) - (-t782 * pkin(1) - t779 * qJ(2)) * t678, t779 * t650 - t807, t779 * t630 - t782 * t723, t779 * t644 - t782 * t743, t779 * t649 + t807, t779 * t643 + t782 * t742, -t782 * qJDD(3) + t779 * t663, t779 * t569 + t782 * t586 + pkin(4) * (t782 * t620 + t779 * t718), t779 * t576 + t782 * t594 + pkin(4) * (t782 * t645 + t779 * t720), t779 * t546 + t782 * t603 + pkin(4) * (t782 * t629 + t779 * t691), t779 * t544 + t782 * t560 + pkin(4) * (t782 * t573 - t779 * t714), t779 * t555 - t808, t779 * t534 - t782 * t669, t779 * t565 - t782 * t626, t779 * t554 + t808, t779 * t566 + t782 * t622, t779 * t575 - t782 * t771, t779 * t519 + t782 * t528 + pkin(4) * (t782 * t551 + t779 * t621), t779 * t526 + t782 * t531 + pkin(4) * (t782 * t562 + t779 * t846), t779 * t515 + t782 * t527 + pkin(4) * (t782 * t535 + t779 * t651), t779 * t513 + t782 * t516 + pkin(4) * (t782 * t523 - t779 * t646); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t757, t758, 0, 0, t764, t759, 0, t766, 0, 0, t702, t701, t659, t664, t648, t628, t641, t647, t640, t662, t567, t571, t545, t542, t553, t532, t563, t552, t564, t574, t517, t525, t514, t512; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t784, 0, 0, -g(3), -t757, 0, t806, t752, t748, -t806, t749, 0, -t775 * t738, -t776 * t738, t678, qJ(2) * t678, t650, t630, t644, t649, t643, t663, t569, t576, t546, t544, t555, t534, t565, t554, t566, t575, t519, t526, t515, t513; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t784, 0, qJDD(1), 0, g(3), 0, -t758, 0, t760, -t754, -t765, -t760, -t767, 0, t725, t726, 0, pkin(1) * t678, -t724, -t723, -t743, t724, t742, -qJDD(3), t586, t594, t603, t560, -t670, -t669, -t626, t670, t622, -t771, t528, t531, t527, t516; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t757, t758, 0, 0, t764, t759, 0, t766, 0, 0, t702, t701, t659, t664, t648, t628, t641, t647, t640, t662, t567, t571, t545, t542, t553, t532, t563, t552, t564, t574, t517, t525, t514, t512; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t765, t767, t760, 0, t768, 0, 0, -t738, t725, 0, t689, t676, t684, t687, t683, t705, t652, t655, t601, -pkin(5) * t605, t585, t558, t599, t584, t600, t608, t539, t541, t524, t520; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t765, -t835, t767, -t760, 0, t738, 0, t726, 0, t688, t674, t681, t686, t680, t704, t631, t635, t592, t604, t583, t556, t597, t582, t598, t607, t536, t538, t521, t518; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t760, t754, t765, t760, t767, 0, -t725, -t726, 0, 0, t724, t723, t743, -t724, -t742, qJDD(3), t792, t799, t840, t841, t670, t669, t626, -t670, -t622, t771, t788, t787, t804, t805; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t721, -t718, t843, t737, t731, -t737, 0, -t714, t657, 0, t618, t590, t638, t616, t639, t661, t593, t602, t540, -pkin(6) * t548; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t815, t720, t732, t719, t716, -t815, t714, 0, t658, 0, t617, t588, t636, t615, t637, t660, t568, t570, t537, t543; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t724, t723, t743, -t724, -t742, qJDD(3), -t657, -t658, 0, 0, t670, t669, t626, -t670, -t622, t771, t796, t791, t587, t547; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t654, -t621, t845, t700, t697, -t700, 0, -t646, t578, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t834, t846, t698, t653, t667, -t834, t646, 0, t579, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t670, t669, t626, -t670, -t622, t771, -t578, -t579, 0, 0;];
m_new_reg = t1;
