% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S4RPRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
%
% Output:
% f_new_reg [(3*5)x(5*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:52
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S4RPRR6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RPRR6_invdynf_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RPRR6_invdynf_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RPRR6_invdynf_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RPRR6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RPRR6_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:52:57
% EndTime: 2019-12-31 16:52:58
% DurationCPUTime: 1.40s
% Computational Cost: add. (5807->163), mult. (14367->229), div. (0->0), fcn. (10473->8), ass. (0->129)
t972 = qJD(1) ^ 2;
t963 = sin(pkin(7));
t960 = t963 ^ 2;
t964 = cos(pkin(7));
t961 = t964 ^ 2;
t990 = t960 + t961;
t948 = t990 * t972;
t962 = qJD(3) + qJD(4);
t1000 = qJD(4) + t962;
t966 = sin(qJ(3));
t969 = cos(qJ(3));
t976 = t963 * t969 + t964 * t966;
t999 = t976 * qJDD(1);
t941 = (t963 * t966 - t964 * t969) * qJD(1);
t943 = t976 * qJD(1);
t965 = sin(qJ(4));
t968 = cos(qJ(4));
t918 = t968 * t941 + t965 * t943;
t998 = t918 ^ 2;
t920 = -t965 * t941 + t968 * t943;
t997 = t920 ^ 2;
t939 = t941 ^ 2;
t996 = t943 ^ 2;
t995 = t962 ^ 2;
t994 = t920 * t918;
t993 = t943 * t941;
t992 = t961 * t972;
t991 = t964 * t972;
t967 = sin(qJ(1));
t970 = cos(qJ(1));
t952 = -t970 * g(1) - t967 * g(2);
t944 = -t972 * pkin(1) + qJDD(1) * qJ(2) + t952;
t986 = qJD(1) * qJD(2);
t981 = -t964 * g(3) - 0.2e1 * t963 * t986;
t915 = (pkin(2) * t991 - pkin(5) * qJDD(1) - t944) * t963 + t981;
t932 = -t963 * g(3) + (t944 + 0.2e1 * t986) * t964;
t958 = t964 * qJDD(1);
t917 = -pkin(2) * t992 + pkin(5) * t958 + t932;
t897 = t966 * t915 + t969 * t917;
t989 = t941 * qJD(3);
t988 = t943 * qJD(3);
t987 = qJD(4) - t962;
t985 = t963 * qJDD(1);
t984 = t967 * qJDD(1);
t983 = t970 * qJDD(1);
t982 = -qJDD(3) - qJDD(4);
t951 = t967 * g(1) - t970 * g(2);
t896 = t969 * t915 - t966 * t917;
t909 = t969 * t958 - t966 * t985;
t928 = t909 - t988;
t930 = t999 - t989;
t980 = t968 * t928 - t965 * t930;
t925 = qJDD(3) - t993;
t979 = -qJDD(2) + t951;
t978 = qJD(3) * pkin(3) - t943 * pkin(6);
t977 = -t965 * t928 - t968 * t930;
t924 = (pkin(2) * t964 + pkin(1)) * qJDD(1) + (t990 * pkin(5) + qJ(2)) * t972 + t979;
t971 = qJD(3) ^ 2;
t953 = t963 * t991;
t950 = -t970 * t972 - t984;
t949 = -t967 * t972 + t983;
t947 = t990 * qJDD(1);
t946 = t964 * t948;
t945 = t963 * t948;
t938 = qJDD(1) * pkin(1) + t972 * qJ(2) + t979;
t933 = -t971 - t996;
t931 = -t963 * t944 + t981;
t929 = t999 - 0.2e1 * t989;
t927 = -t909 + 0.2e1 * t988;
t926 = -qJDD(3) - t993;
t923 = -t971 - t939;
t913 = -t995 - t997;
t910 = -t939 - t996;
t908 = t969 * t926 - t966 * t933;
t907 = t966 * t926 + t969 * t933;
t906 = -t963 * t931 + t964 * t932;
t905 = t964 * t931 + t963 * t932;
t904 = t969 * t909 + t966 * t999;
t903 = t966 * t909 - t969 * t999;
t902 = t969 * t923 - t966 * t925;
t901 = t966 * t923 + t969 * t925;
t900 = t982 - t994;
t899 = -t982 - t994;
t898 = -t995 - t998;
t895 = -t997 - t998;
t894 = t928 * pkin(3) + t939 * pkin(6) - t943 * t978 + t924;
t893 = -t963 * t907 + t964 * t908;
t892 = t964 * t907 + t963 * t908;
t891 = t968 * t900 - t965 * t913;
t890 = t965 * t900 + t968 * t913;
t889 = -t963 * t903 + t964 * t904;
t888 = t964 * t903 + t963 * t904;
t887 = t987 * t918 + t977;
t886 = -t1000 * t918 - t977;
t885 = -t987 * t920 + t980;
t884 = t1000 * t920 - t980;
t883 = -t963 * t901 + t964 * t902;
t882 = t964 * t901 + t963 * t902;
t881 = -t939 * pkin(3) + t928 * pkin(6) - qJD(3) * t978 + t897;
t880 = t968 * t898 - t965 * t899;
t879 = t965 * t898 + t968 * t899;
t878 = (-t930 - t989) * pkin(6) + t925 * pkin(3) + t896;
t877 = -t966 * t896 + t969 * t897;
t876 = t969 * t896 + t966 * t897;
t875 = -t966 * t890 + t969 * t891;
t874 = t969 * t890 + t966 * t891;
t873 = t968 * t885 - t965 * t887;
t872 = t965 * t885 + t968 * t887;
t871 = -t966 * t879 + t969 * t880;
t870 = t969 * t879 + t966 * t880;
t869 = t965 * t878 + t968 * t881;
t868 = t968 * t878 - t965 * t881;
t867 = -t963 * t876 + t964 * t877;
t866 = t964 * t876 + t963 * t877;
t865 = -t963 * t874 + t964 * t875;
t864 = t964 * t874 + t963 * t875;
t863 = -t966 * t872 + t969 * t873;
t862 = t969 * t872 + t966 * t873;
t861 = -t963 * t870 + t964 * t871;
t860 = t964 * t870 + t963 * t871;
t859 = -t965 * t868 + t968 * t869;
t858 = t968 * t868 + t965 * t869;
t857 = -t963 * t862 + t964 * t863;
t856 = t964 * t862 + t963 * t863;
t855 = -t966 * t858 + t969 * t859;
t854 = t969 * t858 + t966 * t859;
t853 = -t963 * t854 + t964 * t855;
t852 = t964 * t854 + t963 * t855;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t950, -t949, 0, -t967 * t951 + t970 * t952, 0, 0, 0, 0, 0, 0, -t970 * t946 - t964 * t984, t970 * t945 + t963 * t984, t970 * t947 - t967 * t948, t970 * t906 - t967 * t938, 0, 0, 0, 0, 0, 0, t970 * t883 + t967 * t927, t970 * t893 + t967 * t929, t970 * t889 + t967 * t910, t970 * t867 - t967 * t924, 0, 0, 0, 0, 0, 0, t970 * t861 + t967 * t884, t970 * t865 + t967 * t886, t970 * t857 + t967 * t895, t970 * t853 - t967 * t894; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t949, t950, 0, t970 * t951 + t967 * t952, 0, 0, 0, 0, 0, 0, -t967 * t946 + t964 * t983, t967 * t945 - t963 * t983, t967 * t947 + t970 * t948, t967 * t906 + t970 * t938, 0, 0, 0, 0, 0, 0, t967 * t883 - t970 * t927, t967 * t893 - t970 * t929, t967 * t889 - t970 * t910, t967 * t867 + t970 * t924, 0, 0, 0, 0, 0, 0, t967 * t861 - t970 * t884, t967 * t865 - t970 * t886, t967 * t857 - t970 * t895, t967 * t853 + t970 * t894; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t905, 0, 0, 0, 0, 0, 0, t882, t892, t888, t866, 0, 0, 0, 0, 0, 0, t860, t864, t856, t852; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t972, -qJDD(1), 0, t952, 0, 0, 0, 0, 0, 0, -t946, t945, t947, t906, 0, 0, 0, 0, 0, 0, t883, t893, t889, t867, 0, 0, 0, 0, 0, 0, t861, t865, t857, t853; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t972, 0, t951, 0, 0, 0, 0, 0, 0, t958, -t985, t948, t938, 0, 0, 0, 0, 0, 0, -t927, -t929, -t910, t924, 0, 0, 0, 0, 0, 0, -t884, -t886, -t895, t894; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t905, 0, 0, 0, 0, 0, 0, t882, t892, t888, t866, 0, 0, 0, 0, 0, 0, t860, t864, t856, t852; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t992, t953, t958, t932, 0, 0, 0, 0, 0, 0, t902, t908, t904, t877, 0, 0, 0, 0, 0, 0, t871, t875, t863, t855; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t953, -t960 * t972, -t985, t931, 0, 0, 0, 0, 0, 0, t901, t907, t903, t876, 0, 0, 0, 0, 0, 0, t870, t874, t862, t854; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t958, t985, -t948, -t938, 0, 0, 0, 0, 0, 0, t927, t929, t910, -t924, 0, 0, 0, 0, 0, 0, t884, t886, t895, -t894; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t923, t926, t909, t897, 0, 0, 0, 0, 0, 0, t880, t891, t873, t859; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t925, t933, -t999, t896, 0, 0, 0, 0, 0, 0, t879, t890, t872, t858; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t927, t929, t910, -t924, 0, 0, 0, 0, 0, 0, t884, t886, t895, -t894; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t898, t900, t885, t869; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t899, t913, t887, t868; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t884, t886, t895, -t894;];
f_new_reg = t1;
