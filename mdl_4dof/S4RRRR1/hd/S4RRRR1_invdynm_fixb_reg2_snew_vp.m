% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RRRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d3,d4]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:22
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RRRR1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRRR1_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRRR1_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRRR1_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRRR1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RRRR1_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:22:20
% EndTime: 2019-12-31 17:22:23
% DurationCPUTime: 3.91s
% Computational Cost: add. (14089->297), mult. (18042->400), div. (0->0), fcn. (10718->8), ass. (0->208)
t561 = qJD(1) + qJD(2);
t557 = qJD(3) + t561;
t555 = t557 ^ 2;
t569 = cos(qJ(3));
t560 = qJDD(1) + qJDD(2);
t556 = qJDD(3) + t560;
t565 = sin(qJ(3));
t604 = t565 * t556;
t522 = t569 * t555 + t604;
t600 = t569 * t556;
t525 = t565 * t555 - t600;
t566 = sin(qJ(2));
t570 = cos(qJ(2));
t470 = t570 * t522 - t566 * t525;
t503 = pkin(6) * t522 - t569 * g(3);
t621 = pkin(6) * t525 - t565 * g(3);
t427 = pkin(5) * t470 + t570 * t503 - t566 * t621;
t567 = sin(qJ(1));
t571 = cos(qJ(1));
t475 = t566 * t522 + t570 * t525;
t620 = t571 * t470 - t567 * t475;
t631 = pkin(5) * t475 + t566 * t503 + t570 * t621;
t643 = pkin(4) * t620 + t571 * t427 - t567 * t631;
t633 = t567 * t470 + t571 * t475;
t642 = pkin(4) * t633 + t567 * t427 + t571 * t631;
t549 = t567 * g(1) - t571 * g(2);
t538 = qJDD(1) * pkin(1) + t549;
t550 = t571 * g(1) + t567 * g(2);
t574 = qJD(1) ^ 2;
t539 = -t574 * pkin(1) - t550;
t489 = t566 * t538 + t570 * t539;
t559 = t561 ^ 2;
t478 = -t559 * pkin(2) + t489;
t488 = -t570 * t538 + t566 * t539;
t576 = t560 * pkin(2) - t488;
t438 = t565 * t478 - t569 * t576;
t439 = t569 * t478 + t565 * t576;
t590 = t565 * t438 + t569 * t439;
t398 = t569 * t438 - t565 * t439;
t599 = t570 * t398;
t379 = -t566 * t590 + t599;
t603 = t566 * t398;
t625 = t570 * t590 + t603;
t640 = t567 * t379 + t571 * t625;
t639 = t571 * t379 - t567 * t625;
t531 = t570 * t559 + t566 * t560;
t507 = pkin(5) * t531 - t570 * g(3);
t534 = t566 * t559 - t570 * t560;
t578 = t571 * t531 - t567 * t534;
t622 = pkin(5) * t534 - t566 * g(3);
t634 = pkin(4) * t578 + t571 * t507 - t567 * t622;
t619 = t567 * t531 + t571 * t534;
t632 = pkin(4) * t619 + t567 * t507 + t571 * t622;
t589 = t566 * t488 + t570 * t489;
t444 = t570 * t488 - t566 * t489;
t598 = t571 * t444;
t627 = -t567 * t589 + t598;
t602 = t567 * t444;
t626 = t571 * t589 + t602;
t432 = -t555 * pkin(3) + t556 * pkin(7) + t439;
t564 = sin(qJ(4));
t568 = cos(qJ(4));
t418 = t568 * g(3) + t564 * t432;
t419 = -t564 * g(3) + t568 * t432;
t393 = t564 * t418 + t568 * t419;
t562 = t564 ^ 2;
t608 = t562 * t555;
t431 = -t556 * pkin(3) - t555 * pkin(7) + t438;
t428 = t564 * t431;
t544 = t568 * t555 * t564;
t535 = qJDD(4) + t544;
t607 = t564 * t535;
t536 = qJDD(4) - t544;
t606 = t564 * t536;
t605 = t564 * t556;
t429 = t568 * t431;
t601 = t568 * t536;
t551 = t568 * t556;
t597 = -pkin(3) * t431 + pkin(7) * t393;
t563 = t568 ^ 2;
t596 = t562 + t563;
t595 = qJD(4) * t557;
t573 = qJD(4) ^ 2;
t541 = -t573 - t608;
t497 = -t564 * t541 - t601;
t548 = t568 * t595;
t515 = 0.2e1 * t548 + t605;
t594 = -pkin(3) * t515 + pkin(7) * t497 + t428;
t552 = t563 * t555;
t543 = -t552 - t573;
t495 = t568 * t543 - t607;
t591 = t564 * t595;
t518 = t551 - 0.2e1 * t591;
t593 = pkin(3) * t518 + pkin(7) * t495 - t429;
t386 = t565 * t393 - t569 * t431;
t592 = pkin(2) * t386 + t597;
t587 = -t567 * t549 - t571 * t550;
t586 = t565 * t544;
t585 = t569 * t544;
t520 = t596 * t556;
t526 = t552 + t608;
t584 = pkin(3) * t526 + pkin(7) * t520 + t393;
t453 = t565 * t497 - t569 * t515;
t583 = pkin(2) * t453 + t594;
t452 = t565 * t495 + t569 * t518;
t582 = pkin(2) * t452 + t593;
t546 = t571 * qJDD(1) - t567 * t574;
t581 = -pkin(4) * t546 - t567 * g(3);
t580 = -pkin(2) * t525 - t438;
t469 = t565 * t520 + t569 * t526;
t579 = pkin(2) * t469 + t584;
t392 = t568 * t418 - t564 * t419;
t577 = t571 * t549 - t567 * t550;
t575 = -pkin(2) * t522 - t439;
t572 = pkin(1) * g(3);
t545 = t567 * qJDD(1) + t571 * t574;
t542 = t552 - t573;
t540 = t573 - t608;
t529 = t568 * t535;
t528 = -pkin(4) * t545 + t571 * g(3);
t527 = -t552 + t608;
t517 = t551 - t591;
t516 = t548 + t605;
t511 = t596 * t595;
t499 = t565 * qJDD(4) + t569 * t511;
t498 = -t569 * qJDD(4) + t565 * t511;
t496 = -t564 * t540 + t529;
t494 = t568 * t542 - t606;
t493 = t568 * t541 - t606;
t492 = t568 * t540 + t607;
t491 = t564 * t543 + t529;
t490 = t564 * t542 + t601;
t487 = t568 * t516 - t562 * t595;
t486 = -t564 * t517 - t563 * t595;
t482 = (t516 + t548) * t564;
t481 = (t517 - t591) * t568;
t473 = t569 * t520 - t565 * t526;
t467 = -t564 * t515 + t568 * t518;
t466 = t568 * t515 + t564 * t518;
t465 = t569 * t496 + t564 * t604;
t464 = t569 * t494 + t565 * t551;
t463 = t565 * t496 - t564 * t600;
t462 = t565 * t494 - t568 * t600;
t461 = -pkin(1) * t534 - t488;
t460 = -pkin(1) * t531 - t489;
t459 = t569 * t487 - t586;
t458 = t569 * t486 + t586;
t457 = t565 * t487 + t585;
t456 = t565 * t486 - t585;
t455 = t569 * t497 + t565 * t515;
t454 = t569 * t495 - t565 * t518;
t449 = -t566 * t498 + t570 * t499;
t448 = t570 * t498 + t566 * t499;
t447 = t569 * t467 + t565 * t527;
t446 = t565 * t467 - t569 * t527;
t441 = pkin(1) * t444;
t440 = pkin(5) * t589 + t572;
t435 = -t566 * t469 + t570 * t473;
t433 = t570 * t469 + t566 * t473;
t423 = -t566 * t463 + t570 * t465;
t422 = -t566 * t462 + t570 * t464;
t421 = t570 * t463 + t566 * t465;
t420 = t570 * t462 + t566 * t464;
t415 = -t566 * t457 + t570 * t459;
t414 = -t566 * t456 + t570 * t458;
t413 = t570 * t457 + t566 * t459;
t412 = t570 * t456 + t566 * t458;
t411 = -t566 * t453 + t570 * t455;
t410 = -t566 * t452 + t570 * t454;
t409 = t570 * t453 + t566 * t455;
t408 = t570 * t452 + t566 * t454;
t407 = -pkin(7) * t493 + t429;
t406 = -pkin(7) * t491 + t428;
t405 = -pkin(3) * t493 + t419;
t404 = -pkin(3) * t491 + t418;
t403 = -pkin(1) * t475 + t580;
t402 = -pkin(1) * t470 + t575;
t401 = -t566 * t446 + t570 * t447;
t400 = t570 * t446 + t566 * t447;
t395 = pkin(2) * t398;
t394 = pkin(2) * g(3) + pkin(6) * t590;
t389 = -pkin(6) * t469 + t569 * t392;
t388 = pkin(6) * t473 + t565 * t392;
t387 = t569 * t393 + t565 * t431;
t384 = -pkin(6) * t453 - t565 * t405 + t569 * t407;
t383 = -pkin(6) * t452 - t565 * t404 + t569 * t406;
t382 = pkin(1) * t409 + t583;
t381 = pkin(1) * t408 + t582;
t376 = -pkin(2) * t493 + pkin(6) * t455 + t569 * t405 + t565 * t407;
t375 = -pkin(2) * t491 + pkin(6) * t454 + t569 * t404 + t565 * t406;
t374 = pkin(1) * t433 + t579;
t373 = -pkin(1) * t379 - t395;
t372 = -pkin(5) * t433 - t566 * t388 + t570 * t389;
t371 = pkin(5) * t435 + t570 * t388 + t566 * t389;
t370 = -t566 * t386 + t570 * t387;
t369 = t570 * t386 + t566 * t387;
t368 = pkin(5) * t379 + pkin(6) * t599 - t566 * t394;
t367 = pkin(5) * t625 + pkin(6) * t603 + t570 * t394 + t572;
t366 = -pkin(6) * t386 - (pkin(3) * t565 - pkin(7) * t569) * t392;
t365 = -pkin(5) * t409 - t566 * t376 + t570 * t384;
t364 = -pkin(5) * t408 - t566 * t375 + t570 * t383;
t363 = -pkin(1) * t493 + pkin(5) * t411 + t570 * t376 + t566 * t384;
t362 = -pkin(1) * t491 + pkin(5) * t410 + t570 * t375 + t566 * t383;
t361 = pkin(6) * t387 - (-pkin(3) * t569 - pkin(7) * t565 - pkin(2)) * t392;
t360 = pkin(1) * t369 + t592;
t359 = -pkin(5) * t369 - t566 * t361 + t570 * t366;
t358 = pkin(1) * t392 + pkin(5) * t370 + t570 * t361 + t566 * t366;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t546, 0, -t545, 0, t581, -t528, -t577, -pkin(4) * t577, 0, 0, -t619, 0, -t578, 0, t632, t634, t627, pkin(4) * t627 + pkin(5) * t598 - t567 * t440, 0, 0, -t633, 0, -t620, 0, t642, t643, t639, pkin(4) * t639 - t567 * t367 + t571 * t368, -t567 * t413 + t571 * t415, -t567 * t400 + t571 * t401, -t567 * t421 + t571 * t423, -t567 * t412 + t571 * t414, -t567 * t420 + t571 * t422, -t567 * t448 + t571 * t449, t571 * t364 - t567 * t362 - pkin(4) * (t571 * t408 + t567 * t410), t571 * t365 - t567 * t363 - pkin(4) * (t571 * t409 + t567 * t411), t571 * t372 - t567 * t371 - pkin(4) * (t571 * t433 + t567 * t435), t571 * t359 - t567 * t358 - pkin(4) * (t571 * t369 + t567 * t370); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t545, 0, t546, 0, t528, t581, t587, pkin(4) * t587, 0, 0, t578, 0, -t619, 0, -t634, t632, t626, pkin(4) * t626 + pkin(5) * t602 + t571 * t440, 0, 0, t620, 0, -t633, 0, -t643, t642, t640, pkin(4) * t640 + t571 * t367 + t567 * t368, t571 * t413 + t567 * t415, t571 * t400 + t567 * t401, t571 * t421 + t567 * t423, t571 * t412 + t567 * t414, t571 * t420 + t567 * t422, t571 * t448 + t567 * t449, t567 * t364 + t571 * t362 + pkin(4) * (-t567 * t408 + t571 * t410), t567 * t365 + t571 * t363 + pkin(4) * (-t567 * t409 + t571 * t411), t567 * t372 + t571 * t371 + pkin(4) * (-t567 * t433 + t571 * t435), t567 * t359 + t571 * t358 + pkin(4) * (-t567 * t369 + t571 * t370); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t549, t550, 0, 0, 0, 0, 0, 0, 0, t560, t461, t460, 0, -t441, 0, 0, 0, 0, 0, t556, t403, t402, 0, t373, t482, t466, t492, t481, t490, 0, t381, t382, t374, t360; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t574, 0, 0, -g(3), -t549, 0, 0, 0, -t534, 0, -t531, 0, t622, t507, t444, pkin(5) * t444, 0, 0, -t475, 0, -t470, 0, t631, t427, t379, t368, t415, t401, t423, t414, t422, t449, t364, t365, t372, t359; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t574, 0, qJDD(1), 0, g(3), 0, -t550, 0, 0, 0, t531, 0, -t534, 0, -t507, t622, t589, t440, 0, 0, t470, 0, -t475, 0, -t427, t631, t625, t367, t413, t400, t421, t412, t420, t448, t362, t363, t371, t358; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t549, t550, 0, 0, 0, 0, 0, 0, 0, t560, t461, t460, 0, -t441, 0, 0, 0, 0, 0, t556, t403, t402, 0, t373, t482, t466, t492, t481, t490, 0, t381, t382, t374, t360; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t560, 0, -t559, 0, 0, -g(3), t488, 0, 0, 0, -t525, 0, -t522, 0, t621, t503, t398, pkin(6) * t398, t459, t447, t465, t458, t464, t499, t383, t384, t389, t366; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t559, 0, t560, 0, g(3), 0, t489, 0, 0, 0, t522, 0, -t525, 0, -t503, t621, t590, t394, t457, t446, t463, t456, t462, t498, t375, t376, t388, t361; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t560, -t488, -t489, 0, 0, 0, 0, 0, 0, 0, t556, t580, t575, 0, -t395, t482, t466, t492, t481, t490, 0, t582, t583, t579, t592; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t556, 0, -t555, 0, 0, -g(3), t438, 0, t487, t467, t496, t486, t494, t511, t406, t407, t392, pkin(7) * t392; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t555, 0, t556, 0, g(3), 0, t439, 0, t544, -t527, -t605, -t544, -t551, -qJDD(4), t404, t405, 0, pkin(3) * t392; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t556, -t438, -t439, 0, 0, t482, t466, t492, t481, t490, 0, t593, t594, t584, t597; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t516, t518, t535, -t548, t542, t548, 0, t431, t418, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t591, t515, t540, t517, t536, -t591, -t431, 0, t419, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t544, t527, t605, t544, t551, qJDD(4), -t418, -t419, 0, 0;];
m_new_reg = t1;
