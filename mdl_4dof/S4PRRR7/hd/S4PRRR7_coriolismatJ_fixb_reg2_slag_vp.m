% Calculate inertial parameters regressor of coriolis matrix for
% S4PRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% 
% Output:
% cmat_reg [(4*4)x(4*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:37
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S4PRRR7_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4PRRR7_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4PRRR7_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [4x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S4PRRR7_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:36:51
% EndTime: 2019-12-31 16:36:54
% DurationCPUTime: 1.68s
% Computational Cost: add. (1385->192), mult. (3965->334), div. (0->0), fcn. (4000->8), ass. (0->156)
t149 = sin(qJ(3));
t152 = cos(qJ(3));
t147 = sin(pkin(4));
t150 = sin(qJ(2));
t230 = t147 * t150;
t234 = cos(pkin(4));
t110 = t234 * t149 + t152 * t230;
t151 = cos(qJ(4));
t148 = sin(qJ(4));
t153 = cos(qJ(2));
t229 = t147 * t153;
t198 = t148 * t229;
t163 = -t110 * t151 + t198;
t250 = t163 / 0.2e1;
t143 = t148 ^ 2;
t145 = t151 ^ 2;
t133 = t145 - t143;
t206 = t149 * qJD(2);
t196 = t151 * t206;
t249 = t133 * qJD(3) - 0.2e1 * t148 * t196;
t197 = t151 * t229;
t232 = t110 * t148;
t70 = t197 + t232;
t248 = t70 / 0.2e1;
t247 = t148 / 0.2e1;
t246 = -t149 / 0.2e1;
t245 = t151 / 0.2e1;
t244 = -t152 / 0.2e1;
t144 = t149 ^ 2;
t243 = pkin(6) * t144;
t242 = t110 * pkin(6);
t241 = t149 * pkin(3);
t240 = t152 * pkin(6);
t239 = t152 * pkin(7);
t109 = t149 * t230 - t234 * t152;
t5 = (-t70 * t148 + t163 * t151 + t110) * t109;
t238 = t5 * qJD(1);
t233 = t109 * t149;
t221 = t152 * t153;
t225 = t150 * t151;
t95 = (-t148 * t221 + t225) * t147;
t226 = t150 * t148;
t96 = (t151 * t221 + t226) * t147;
t6 = -t163 * t96 + t229 * t233 - t70 * t95;
t237 = t6 * qJD(1);
t176 = -t152 * pkin(3) - t149 * pkin(7);
t169 = -pkin(2) + t176;
t203 = t148 * t240;
t97 = -t151 * t169 + t203;
t236 = t97 * t152;
t201 = t151 * t240;
t98 = t148 * t169 + t201;
t235 = t98 * t152;
t48 = t109 * t148;
t50 = t109 * t151;
t231 = t110 * t152;
t128 = -t239 + t241;
t228 = t148 * t128;
t227 = t148 * t149;
t224 = t151 * t128;
t223 = t151 * t144;
t222 = t151 * t149;
t28 = (-t230 + t231 + t233) * t229;
t220 = t28 * qJD(1);
t202 = pkin(6) * t222;
t106 = -t202 + t228;
t30 = t106 * t152 + (-t98 + 0.2e1 * t201) * t149;
t219 = t30 * qJD(2);
t146 = t152 ^ 2;
t134 = t146 - t144;
t218 = qJD(2) * t147;
t217 = qJD(2) * t152;
t216 = qJD(3) * t148;
t215 = qJD(3) * t151;
t214 = qJD(4) * t148;
t213 = qJD(4) * t151;
t212 = qJD(4) * t152;
t211 = t110 * qJD(3);
t111 = (t143 / 0.2e1 - t145 / 0.2e1) * t149;
t210 = t111 * qJD(4);
t121 = t134 * t148;
t209 = t121 * qJD(2);
t122 = t151 * t146 - t223;
t208 = t122 * qJD(2);
t207 = t134 * qJD(2);
t205 = t149 * qJD(3);
t204 = t152 * qJD(3);
t139 = pkin(6) * t227;
t200 = pkin(2) * t206;
t199 = pkin(2) * t217;
t195 = t148 * t212;
t194 = t151 * t212;
t193 = t153 * t218;
t192 = t148 * t213;
t191 = t148 * t215;
t190 = t149 * t204;
t137 = t152 * t206;
t189 = t151 * t205;
t188 = -t233 / 0.2e1;
t187 = -t229 / 0.2e1;
t186 = t227 / 0.2e1;
t185 = t222 / 0.2e1;
t184 = -t221 / 0.2e1;
t183 = (-t143 - t145) * t109;
t182 = pkin(3) * t187;
t181 = -qJD(4) + t217;
t180 = t144 * t192;
t178 = t148 * t189;
t177 = t151 * t187;
t105 = t139 + t224;
t155 = t105 * t248 + t106 * t250;
t166 = t96 * t245 - t95 * t148 / 0.2e1;
t160 = t166 * pkin(7);
t1 = t149 * t182 + t242 * t246 + t160 + (t98 * t245 + t97 * t247 - t240 / 0.2e1) * t109 + t155;
t15 = t152 * pkin(6) ^ 2 * t149 - t97 * t105 + t98 * t106;
t175 = -t1 * qJD(1) + t15 * qJD(2);
t14 = (t105 * t149 - t236) * t151 + (t106 * t149 + t235) * t148;
t154 = (t163 * t247 + t70 * t245) * t152;
t8 = t154 - t166;
t174 = t8 * qJD(1) - t14 * qJD(2);
t11 = (t177 + t248 - t232 / 0.2e1) * t149;
t29 = t97 * t149 + (t105 - 0.2e1 * t139) * t152;
t173 = -t11 * qJD(1) - t29 * qJD(2);
t17 = (t230 / 0.2e1 - t231 / 0.2e1 + t188) * t151;
t67 = -pkin(6) * t223 - t235;
t172 = t17 * qJD(1) + t67 * qJD(2);
t156 = (t151 * t184 - t226 / 0.2e1) * t147;
t161 = t148 * t188 + t70 * t244;
t18 = t156 - t161;
t66 = -t148 * t243 - t236;
t171 = t18 * qJD(1) - t66 * qJD(2);
t170 = -t105 * t148 + t106 * t151;
t168 = t181 * t149;
t167 = t239 / 0.2e1 - t241 / 0.2e1;
t159 = -t128 / 0.2e1 + t167;
t69 = t159 * t151;
t165 = pkin(3) * t216 - t69 * qJD(2);
t68 = t159 * t148;
t164 = pkin(3) * t215 + t68 * qJD(2);
t162 = t151 * t168;
t82 = -t111 * qJD(2) + t191;
t71 = t148 * qJD(2) * t223 + t111 * qJD(3);
t120 = t133 * t144;
t158 = t120 * qJD(2) + 0.2e1 * t178;
t141 = t205 / 0.2e1;
t127 = t229 * t243;
t114 = qJD(4) * t246 + t137;
t57 = t139 + t224 / 0.2e1 + t167 * t151;
t56 = t202 - t228 / 0.2e1 - t167 * t148;
t20 = t163 * t244 + t109 * t185 + (t148 * t184 + t225 / 0.2e1) * t147;
t19 = t156 + t161;
t13 = t110 * t185 + t149 * t250 + t186 * t229;
t12 = t110 * t186 + t149 * t177 + t70 * t246;
t7 = t154 + t166;
t2 = -t98 * t50 / 0.2e1 - t97 * t48 / 0.2e1 + t109 * t240 / 0.2e1 + (t242 / 0.2e1 + t182) * t149 + t160 - t155;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t6 * qJD(2) + t5 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t150 * t218, -t193, 0, 0, 0, 0, 0, 0, 0, 0, (-t150 * t217 - t153 * t205) * t147, (t150 * t206 - t153 * t204) * t147, (t144 + t146) * t193, t220 + (t127 + (pkin(6) * t146 * t153 - pkin(2) * t150) * t147) * qJD(2), 0, 0, 0, 0, 0, 0, (t144 * t198 - t95 * t152) * qJD(2) + t12 * qJD(3) + t20 * qJD(4), (t144 * t197 + t96 * t152) * qJD(2) + t13 * qJD(3) + t19 * qJD(4), t7 * qJD(3) + (-t148 * t96 - t151 * t95) * t206, t237 + (-t95 * t97 + t96 * t98 + t127) * qJD(2) + t2 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t149 * t193 - t211, t109 * qJD(3) - t152 * t193, 0, 0, 0, 0, 0, 0, 0, 0, t12 * qJD(2) + t48 * qJD(4) - t151 * t211, t13 * qJD(2) + t50 * qJD(4) + t148 * t211, t7 * qJD(2) + qJD(3) * t183, t238 + t2 * qJD(2) + (-t110 * pkin(3) + pkin(7) * t183) * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20 * qJD(2) + t48 * qJD(3) + qJD(4) * t163, t19 * qJD(2) + t50 * qJD(3) + t70 * qJD(4), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t220, 0, 0, 0, 0, 0, 0, -t11 * qJD(3) - t17 * qJD(4), -t18 * qJD(4), t8 * qJD(3), -t1 * qJD(3) - t237; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t190, t134 * qJD(3), 0, -t190, 0, 0, -pkin(2) * t205, -pkin(2) * t204, 0, 0, t145 * t190 - t180, -t120 * qJD(4) - 0.2e1 * t152 * t178, -t122 * qJD(3) + t149 * t195, t143 * t190 + t180, t121 * qJD(3) + t149 * t194, -t190, -t29 * qJD(3) - t67 * qJD(4), t30 * qJD(3) + t66 * qJD(4), -t14 * qJD(3), t15 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t137, t207, t204, -t137, -t205, 0, -pkin(6) * t204 - t200, pkin(6) * t205 - t199, 0, 0, -t210 + (t145 * t206 + t191) * t152, -0.2e1 * t149 * t192 + t249 * t152, t148 * t205 - t208, t210 + (t143 * t206 - t191) * t152, t189 + t209, -t114, (t148 * t176 - t201) * qJD(3) + t57 * qJD(4) + t173, t219 + (t151 * t176 + t203) * qJD(3) + t56 * qJD(4), qJD(3) * t170 + t174, (-pkin(3) * t240 + pkin(7) * t170) * qJD(3) + t175; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t71, -t158, t148 * t168, t71, t162, t141, t57 * qJD(3) - t98 * qJD(4) - t172, t56 * qJD(3) + t97 * qJD(4) - t171, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11 * qJD(2), 0, -t8 * qJD(2), t1 * qJD(2) - t238; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t137, -t207, 0, t137, 0, 0, t200, t199, 0, 0, -t145 * t137 - t210, 0.2e1 * t148 * t162, -t194 + t208, -t137 * t143 + t210, t195 - t209, t114, t69 * qJD(4) - t173, -t68 * qJD(4) - t219, -t174, -t175; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t192, t133 * qJD(4), 0, -t192, 0, 0, -pkin(3) * t214, -pkin(3) * t213, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, t249, -t181 * t151, -t82, t181 * t148, -t206 / 0.2e1, -pkin(7) * t213 - t165, pkin(7) * t214 - t164, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17 * qJD(2), t18 * qJD(2), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, t158, (-t148 * t206 + t215) * t152, -t71, (-t196 - t216) * t152, t141, -t69 * qJD(3) + t172, t68 * qJD(3) + t171, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t82, -t249, t151 * t217, t82, -t148 * t217, t206 / 0.2e1, t165, t164, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t3;
