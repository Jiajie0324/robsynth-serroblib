% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4PRRR7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:37
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4PRRR7_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4PRRR7_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4PRRR7_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4PRRR7_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4PRRR7_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S4PRRR7_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:36:57
% EndTime: 2019-12-31 16:37:03
% DurationCPUTime: 6.39s
% Computational Cost: add. (24196->479), mult. (47705->728), div. (0->0), fcn. (34341->10), ass. (0->344)
t767 = sin(pkin(4));
t769 = cos(pkin(4));
t766 = sin(pkin(8));
t768 = cos(pkin(8));
t826 = t766 * g(1) - t768 * g(2);
t838 = g(3) - qJDD(1);
t865 = -t767 * t838 + t769 * t826;
t864 = t766 * t838;
t863 = t768 * t838;
t772 = sin(qJ(4));
t773 = sin(qJ(3));
t834 = qJD(2) * qJD(3);
t754 = t773 * t834;
t776 = cos(qJ(3));
t830 = t776 * qJDD(2);
t734 = -t754 + t830;
t725 = -qJDD(4) + t734;
t775 = cos(qJ(4));
t836 = qJD(2) * t773;
t728 = -t775 * qJD(3) + t772 * t836;
t730 = t772 * qJD(3) + t775 * t836;
t854 = t730 * t728;
t781 = -t725 - t854;
t862 = t772 * t781;
t861 = t775 * t781;
t741 = t768 * g(1) + t766 * g(2);
t860 = -t768 * t741 - t766 * t826;
t859 = -t766 * t741 + t768 * t826;
t723 = t728 ^ 2;
t724 = t730 ^ 2;
t835 = t776 * qJD(2);
t751 = -qJD(4) + t835;
t749 = t751 ^ 2;
t858 = qJD(3) ^ 2;
t857 = pkin(3) * t773;
t856 = pkin(3) * t776;
t774 = sin(qJ(2));
t777 = cos(qJ(2));
t677 = -t774 * t741 - t865 * t777;
t678 = -t777 * t741 + t865 * t774;
t625 = t774 * t677 + t777 * t678;
t855 = pkin(5) * t625;
t853 = t751 * t772;
t852 = t751 * t775;
t762 = t773 ^ 2;
t778 = qJD(2) ^ 2;
t851 = t762 * t778;
t670 = -t778 * pkin(2) + qJDD(2) * pkin(6) + t678;
t714 = t767 * t826 + t769 * t838;
t708 = t776 * t714;
t820 = -pkin(7) * t773 - t856;
t731 = t820 * qJD(2);
t610 = t708 - qJDD(3) * pkin(3) - t858 * pkin(7) + (qJD(2) * t731 + t670) * t773;
t849 = t772 * t610;
t674 = t725 - t854;
t848 = t772 * t674;
t669 = -qJDD(2) * pkin(2) - t778 * pkin(6) + t677;
t847 = t773 * t669;
t750 = t773 * t778 * t776;
t742 = qJDD(3) + t750;
t846 = t773 * t742;
t743 = qJDD(3) - t750;
t845 = t773 * t743;
t844 = t774 * t714;
t843 = t775 * t610;
t842 = t775 * t674;
t841 = t776 * t669;
t840 = t776 * t743;
t839 = t777 * t714;
t638 = t776 * t670 - t773 * t714;
t763 = t776 ^ 2;
t837 = t762 + t763;
t833 = t767 * qJDD(2);
t832 = t773 * qJDD(2);
t831 = t774 * qJDD(2);
t829 = t777 * qJDD(2);
t828 = t773 * t854;
t827 = t776 * t854;
t755 = t776 * t834;
t611 = -t858 * pkin(3) + qJDD(3) * pkin(7) + t731 * t835 + t638;
t814 = -t734 + t754;
t733 = t755 + t832;
t815 = t733 + t755;
t623 = t814 * pkin(3) - t815 * pkin(7) + t669;
t575 = t772 * t611 - t775 * t623;
t576 = t775 * t611 + t772 * t623;
t541 = t772 * t575 + t775 * t576;
t637 = t773 * t670 + t708;
t586 = t773 * t637 + t776 * t638;
t824 = t775 * qJDD(3) - t772 * t733;
t823 = t777 * t750;
t822 = t774 * t750;
t821 = -pkin(3) * t610 + pkin(7) * t541;
t585 = t776 * t637 - t773 * t638;
t736 = t837 * qJDD(2);
t760 = t763 * t778;
t739 = t760 + t851;
t693 = t777 * t736 - t774 * t739;
t818 = pkin(5) * t693 + t585 * t774;
t737 = -t774 * t778 + t829;
t817 = -pkin(5) * t737 - t844;
t796 = t777 * t778 + t831;
t816 = -pkin(5) * t796 + t839;
t527 = t776 * t541 + t773 * t610;
t540 = -t775 * t575 + t772 * t576;
t813 = t527 * t774 - t540 * t777;
t661 = (-qJD(4) - t751) * t730 + t824;
t794 = -t772 * qJDD(3) - t775 * t733;
t684 = -t728 * qJD(4) - t794;
t716 = t728 * t751;
t663 = t684 - t716;
t601 = t775 * t661 + t772 * t663;
t673 = t723 + t724;
t581 = t776 * t601 - t773 * t673;
t599 = t772 * t661 - t775 * t663;
t812 = t581 * t774 - t599 * t777;
t811 = t586 * t774 - t669 * t777;
t683 = -t730 * qJD(4) + t824;
t715 = t730 * t751;
t660 = t683 + t715;
t662 = t684 + t716;
t600 = t775 * t660 - t772 * t662;
t696 = t724 - t723;
t588 = t776 * t600 + t773 * t696;
t598 = t772 * t660 + t775 * t662;
t810 = t588 * t774 - t598 * t777;
t687 = -t749 - t723;
t627 = t775 * t687 - t862;
t590 = t776 * t627 - t773 * t660;
t626 = t772 * t687 + t861;
t809 = t590 * t774 - t626 * t777;
t692 = -t724 - t749;
t636 = -t772 * t692 + t842;
t664 = (qJD(4) - t751) * t728 + t794;
t592 = t776 * t636 - t773 * t664;
t635 = t775 * t692 + t848;
t808 = t592 * t774 - t635 * t777;
t713 = -t724 + t749;
t649 = -t772 * t713 + t861;
t595 = t776 * t649 + t773 * t663;
t647 = t775 * t713 + t862;
t807 = t595 * t774 - t647 * t777;
t712 = t723 - t749;
t650 = t775 * t712 + t848;
t659 = -t683 + t715;
t596 = t776 * t650 - t773 * t659;
t648 = t772 * t712 - t842;
t806 = t596 * t774 - t648 * t777;
t656 = -t772 * t683 - t728 * t852;
t614 = t776 * t656 - t828;
t655 = -t775 * t683 + t728 * t853;
t805 = t614 * t774 + t655 * t777;
t658 = t775 * t684 + t730 * t853;
t615 = t776 * t658 + t828;
t657 = t772 * t684 - t730 * t852;
t804 = t615 * t774 - t657 * t777;
t668 = (t728 * t775 - t730 * t772) * t751;
t652 = t776 * t668 - t773 * t725;
t667 = (t728 * t772 + t730 * t775) * t751;
t803 = t652 * t774 - t667 * t777;
t624 = t777 * t677 - t774 * t678;
t732 = 0.2e1 * t755 + t832;
t735 = -0.2e1 * t754 + t830;
t691 = -t773 * t732 + t776 * t735;
t740 = -t760 + t851;
t802 = t691 * t774 - t740 * t777;
t748 = -t760 - t858;
t704 = t776 * t748 - t846;
t801 = t704 * t774 + t735 * t777;
t746 = -t851 - t858;
t706 = -t773 * t746 - t840;
t800 = t706 * t774 - t732 * t777;
t719 = t796 * t769;
t799 = t768 * t719 + t766 * t737;
t798 = t766 * t719 - t768 * t737;
t797 = t736 * t774 + t739 * t777;
t726 = t837 * t834;
t795 = -qJDD(3) * t777 + t726 * t774;
t747 = t760 - t858;
t703 = t776 * t747 - t845;
t793 = t703 * t774 - t776 * t829;
t727 = t776 * t742;
t745 = -t851 + t858;
t705 = -t773 * t745 + t727;
t792 = t705 * t774 - t773 * t829;
t709 = -t773 * t734 - t763 * t834;
t791 = t709 * t774 - t823;
t710 = t776 * t733 - t762 * t834;
t790 = t710 * t774 + t823;
t789 = pkin(3) * t660 + pkin(7) * t627 - t843;
t788 = pkin(3) * t664 + pkin(7) * t636 + t849;
t526 = t773 * t541 - t776 * t610;
t512 = -pkin(6) * t526 + (-pkin(7) * t776 + t857) * t540;
t516 = -pkin(2) * t526 - t821;
t518 = t777 * t527 + t774 * t540;
t787 = pkin(5) * t518 + t512 * t774 + t516 * t777;
t525 = -pkin(7) * t599 - t540;
t580 = t773 * t601 + t776 * t673;
t519 = -pkin(6) * t580 + t776 * t525 + t599 * t857;
t780 = pkin(3) * t673 + pkin(7) * t601 + t541;
t520 = -pkin(2) * t580 - t780;
t554 = t777 * t581 + t774 * t599;
t786 = pkin(5) * t554 + t519 * t774 + t520 * t777;
t556 = -pkin(3) * t626 + t575;
t577 = -pkin(7) * t626 + t849;
t589 = t773 * t627 + t776 * t660;
t523 = -pkin(6) * t589 - t773 * t556 + t776 * t577;
t542 = -pkin(2) * t589 - t789;
t564 = t777 * t590 + t774 * t626;
t785 = pkin(5) * t564 + t523 * t774 + t542 * t777;
t561 = -pkin(3) * t635 + t576;
t579 = -pkin(7) * t635 + t843;
t591 = t773 * t636 + t776 * t664;
t524 = -pkin(6) * t591 - t773 * t561 + t776 * t579;
t543 = -pkin(2) * t591 - t788;
t565 = t777 * t592 + t774 * t635;
t784 = pkin(5) * t565 + t524 * t774 + t543 * t777;
t700 = t773 * t748 + t727;
t608 = -pkin(2) * t700 + t637;
t633 = -pkin(6) * t700 + t847;
t671 = t777 * t704 - t774 * t735;
t783 = pkin(5) * t671 + t608 * t777 + t633 * t774;
t702 = t776 * t746 - t845;
t609 = -pkin(2) * t702 + t638;
t634 = -pkin(6) * t702 + t841;
t672 = t777 * t706 + t774 * t732;
t782 = pkin(5) * t672 + t609 * t777 + t634 * t774;
t568 = t777 * t586 + t774 * t669;
t779 = pkin(5) * t568 - (-pkin(2) * t777 - pkin(6) * t774) * t585;
t756 = t769 * qJDD(2);
t720 = t737 * t769;
t718 = t737 * t767;
t717 = t796 * t767;
t711 = t774 * qJDD(3) + t777 * t726;
t701 = t776 * t745 + t846;
t699 = t773 * t747 + t840;
t698 = t815 * t773;
t697 = t814 * t776;
t695 = t795 * t769;
t694 = t795 * t767;
t690 = t776 * t732 + t773 * t735;
t689 = t797 * t769;
t688 = t797 * t767;
t686 = -t766 * t720 - t768 * t796;
t685 = t768 * t720 - t766 * t796;
t682 = t777 * t710 - t822;
t681 = t777 * t709 + t822;
t680 = t777 * t705 + t773 * t831;
t679 = t777 * t703 + t774 * t830;
t666 = t777 * t691 + t774 * t740;
t654 = -t839 + (t717 * t767 + t719 * t769) * pkin(5);
t653 = -t844 + (-t718 * t767 - t720 * t769) * pkin(5);
t651 = t773 * t668 + t776 * t725;
t646 = -t767 * t698 + t769 * t790;
t645 = t767 * t697 + t769 * t791;
t644 = t769 * t698 + t767 * t790;
t643 = -t769 * t697 + t767 * t791;
t642 = -t767 * t701 + t769 * t792;
t641 = -t767 * t699 + t769 * t793;
t640 = t769 * t701 + t767 * t792;
t639 = t769 * t699 + t767 * t793;
t631 = -t767 * t702 + t769 * t800;
t630 = -t767 * t700 + t769 * t801;
t629 = t769 * t702 + t767 * t800;
t628 = t769 * t700 + t767 * t801;
t622 = -t767 * t690 + t769 * t802;
t621 = t769 * t690 + t767 * t802;
t620 = pkin(2) * t735 + pkin(6) * t704 - t841;
t619 = -pkin(2) * t732 + pkin(6) * t706 + t847;
t617 = t625 * t769;
t616 = t625 * t767;
t613 = t773 * t658 - t827;
t612 = t773 * t656 + t827;
t607 = -pkin(1) * t718 + t767 * t677 + t816 * t769;
t606 = pkin(1) * t717 + t767 * t678 + t817 * t769;
t605 = pkin(1) * t720 - t769 * t677 + t816 * t767;
t604 = -pkin(1) * t719 - t769 * t678 + t817 * t767;
t603 = -t624 * t769 + t767 * t714;
t602 = -t624 * t767 - t769 * t714;
t597 = t777 * t652 + t774 * t667;
t594 = t773 * t650 + t776 * t659;
t593 = t773 * t649 - t776 * t663;
t587 = t773 * t600 - t776 * t696;
t583 = t777 * t615 + t774 * t657;
t582 = t777 * t614 - t774 * t655;
t578 = pkin(2) * t739 + pkin(6) * t736 + t586;
t573 = -t767 * t651 + t769 * t803;
t572 = t769 * t651 + t767 * t803;
t571 = -pkin(2) * t669 + pkin(6) * t586;
t570 = t777 * t596 + t774 * t648;
t569 = t777 * t595 + t774 * t647;
t567 = pkin(1) * t603 + t767 * t855;
t566 = -pkin(1) * t602 + t769 * t855;
t563 = t777 * t585 + (-t688 * t767 - t689 * t769) * pkin(5);
t562 = (-t602 * t767 - t603 * t769) * pkin(5);
t560 = -t767 * t613 + t769 * t804;
t559 = -t767 * t612 + t769 * t805;
t558 = t769 * t613 + t767 * t804;
t557 = t769 * t612 + t767 * t805;
t555 = t777 * t588 + t774 * t598;
t553 = -t774 * t609 + t777 * t634 + (-t629 * t767 - t631 * t769) * pkin(5);
t552 = -t774 * t608 + t777 * t633 + (-t628 * t767 - t630 * t769) * pkin(5);
t551 = -t767 * t594 + t769 * t806;
t550 = -t767 * t593 + t769 * t807;
t549 = t769 * t594 + t767 * t806;
t548 = t769 * t593 + t767 * t807;
t547 = -t767 * t591 + t769 * t808;
t546 = t769 * t591 + t767 * t808;
t545 = t585 * t767 + t769 * t811;
t544 = -t585 * t769 + t767 * t811;
t539 = -t767 * t589 + t769 * t809;
t538 = t769 * t589 + t767 * t809;
t537 = -pkin(1) * t629 - t767 * t619 + t769 * t782;
t536 = -pkin(1) * t628 - t767 * t620 + t769 * t783;
t535 = pkin(1) * t631 + t769 * t619 + t767 * t782;
t534 = pkin(1) * t630 + t769 * t620 + t767 * t783;
t533 = -pkin(1) * t688 - t767 * t578 + t818 * t769;
t532 = pkin(1) * t689 + t769 * t578 + t818 * t767;
t531 = -t767 * t587 + t769 * t810;
t530 = t769 * t587 + t767 * t810;
t529 = -t767 * t580 + t769 * t812;
t528 = t769 * t580 + t767 * t812;
t522 = -pkin(2) * t635 + pkin(6) * t592 + t776 * t561 + t773 * t579;
t521 = -pkin(2) * t626 + pkin(6) * t590 + t776 * t556 + t773 * t577;
t517 = pkin(6) * t581 + t773 * t525 + (-pkin(2) - t856) * t599;
t515 = -(pkin(2) * t774 - pkin(6) * t777) * t585 + (-t544 * t767 - t545 * t769) * pkin(5);
t514 = -pkin(1) * t544 - t767 * t571 + t769 * t779;
t513 = pkin(1) * t545 + t769 * t571 + t767 * t779;
t511 = -t767 * t526 + t769 * t813;
t510 = t769 * t526 + t767 * t813;
t509 = pkin(6) * t527 + (-pkin(2) + t820) * t540;
t508 = t777 * t524 - t774 * t543 + (-t546 * t767 - t547 * t769) * pkin(5);
t507 = t777 * t523 - t774 * t542 + (-t538 * t767 - t539 * t769) * pkin(5);
t506 = -pkin(1) * t546 - t767 * t522 + t769 * t784;
t505 = pkin(1) * t547 + t769 * t522 + t767 * t784;
t504 = -pkin(1) * t538 - t767 * t521 + t769 * t785;
t503 = pkin(1) * t539 + t769 * t521 + t767 * t785;
t502 = t777 * t519 - t774 * t520 + (-t528 * t767 - t529 * t769) * pkin(5);
t501 = -pkin(1) * t528 - t767 * t517 + t769 * t786;
t500 = pkin(1) * t529 + t769 * t517 + t767 * t786;
t499 = t777 * t512 - t774 * t516 + (-t510 * t767 - t511 * t769) * pkin(5);
t498 = -pkin(1) * t510 - t767 * t509 + t769 * t787;
t497 = pkin(1) * t511 + t769 * t509 + t767 * t787;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t864, -t863, -t859, -qJ(1) * t859, 0, 0, -t798, 0, t686, t766 * t833, -qJ(1) * t685 - t766 * t607 + t768 * t653, qJ(1) * t799 - t766 * t606 + t768 * t654, -t766 * t617 + t768 * t624, t768 * t562 - t766 * t566 - qJ(1) * (t768 * t603 + t766 * t625), -t766 * t646 + t768 * t682, -t766 * t622 + t768 * t666, -t766 * t642 + t768 * t680, -t766 * t645 + t768 * t681, -t766 * t641 + t768 * t679, -t766 * t695 + t768 * t711, t768 * t552 - t766 * t536 - qJ(1) * (t768 * t630 + t766 * t671), t768 * t553 - t766 * t537 - qJ(1) * (t768 * t631 + t766 * t672), t768 * t563 - t766 * t533 - qJ(1) * (t768 * t689 + t766 * t693), t768 * t515 - t766 * t514 - qJ(1) * (t768 * t545 + t766 * t568), -t766 * t560 + t768 * t583, -t766 * t531 + t768 * t555, -t766 * t550 + t768 * t569, -t766 * t559 + t768 * t582, -t766 * t551 + t768 * t570, -t766 * t573 + t768 * t597, t768 * t507 - t766 * t504 - qJ(1) * (t768 * t539 + t766 * t564), t768 * t508 - t766 * t506 - qJ(1) * (t768 * t547 + t766 * t565), t768 * t502 - t766 * t501 - qJ(1) * (t768 * t529 + t766 * t554), t768 * t499 - t766 * t498 - qJ(1) * (t768 * t511 + t766 * t518); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t863, -t864, t860, qJ(1) * t860, 0, 0, t799, 0, t685, -t768 * t833, qJ(1) * t686 + t768 * t607 + t766 * t653, qJ(1) * t798 + t768 * t606 + t766 * t654, t768 * t617 + t766 * t624, t766 * t562 + t768 * t566 + qJ(1) * (-t766 * t603 + t768 * t625), t768 * t646 + t766 * t682, t768 * t622 + t766 * t666, t768 * t642 + t766 * t680, t768 * t645 + t766 * t681, t768 * t641 + t766 * t679, t768 * t695 + t766 * t711, t766 * t552 + t768 * t536 + qJ(1) * (-t766 * t630 + t768 * t671), t766 * t553 + t768 * t537 + qJ(1) * (-t766 * t631 + t768 * t672), t766 * t563 + t768 * t533 + qJ(1) * (-t766 * t689 + t768 * t693), t766 * t515 + t768 * t514 + qJ(1) * (-t766 * t545 + t768 * t568), t768 * t560 + t766 * t583, t768 * t531 + t766 * t555, t768 * t550 + t766 * t569, t768 * t559 + t766 * t582, t768 * t551 + t766 * t570, t768 * t573 + t766 * t597, t766 * t507 + t768 * t504 + qJ(1) * (-t766 * t539 + t768 * t564), t766 * t508 + t768 * t506 + qJ(1) * (-t766 * t547 + t768 * t565), t766 * t502 + t768 * t501 + qJ(1) * (-t766 * t529 + t768 * t554), t766 * t499 + t768 * t498 + qJ(1) * (-t766 * t511 + t768 * t518); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t826, t741, 0, 0, 0, 0, t717, 0, t718, t756, t605, t604, t616, t567, t644, t621, t640, t643, t639, t694, t534, t535, t532, t513, t558, t530, t548, t557, t549, t572, t503, t505, t500, t497; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t838, -t826, 0, 0, 0, t737, 0, -t796, 0, t653, t654, t624, t562, t682, t666, t680, t681, t679, t711, t552, t553, t563, t515, t583, t555, t569, t582, t570, t597, t507, t508, t502, t499; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t838, 0, -t741, 0, 0, 0, t719, 0, t720, -t833, t607, t606, t617, t566, t646, t622, t642, t645, t641, t695, t536, t537, t533, t514, t560, t531, t550, t559, t551, t573, t504, t506, t501, t498; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t826, t741, 0, 0, 0, 0, t717, 0, t718, t756, t605, t604, t616, t567, t644, t621, t640, t643, t639, t694, t534, t535, t532, t513, t558, t530, t548, t557, t549, t572, t503, t505, t500, t497; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t778, 0, 0, -t714, t677, 0, t710, t691, t705, t709, t703, t726, t633, t634, t585, pkin(6) * t585, t615, t588, t595, t614, t596, t652, t523, t524, t519, t512; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t778, 0, qJDD(2), 0, t714, 0, t678, 0, t750, -t740, -t832, -t750, -t830, -qJDD(3), t608, t609, 0, pkin(2) * t585, -t657, -t598, -t647, t655, -t648, -t667, t542, t543, t520, t516; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t677, -t678, 0, 0, t698, t690, t701, -t697, t699, 0, t620, t619, t578, t571, t613, t587, t593, t612, t594, t651, t521, t522, t517, t509; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t733, t735, t742, -t755, t747, t755, 0, t669, t637, 0, t658, t600, t649, t656, t650, t668, t577, t579, t525, -pkin(7) * t540; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t754, t732, t745, t734, t743, -t754, -t669, 0, t638, 0, -t854, -t696, -t663, t854, t659, t725, t556, t561, -pkin(3) * t599, -pkin(3) * t540; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t750, t740, t832, t750, t830, qJDD(3), -t637, -t638, 0, 0, t657, t598, t647, -t655, t648, t667, t789, t788, t780, t821; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t684, t660, t781, -t716, t712, t716, 0, t610, t575, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t715, t662, t713, t683, -t674, t715, -t610, 0, t576, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t854, t696, t663, -t854, -t659, -t725, -t575, -t576, 0, 0;];
m_new_reg = t1;
