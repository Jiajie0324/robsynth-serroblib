% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S4PRRR7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
%
% Output:
% f_new_reg [(3*5)x(5*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:37
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S4PRRR7_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4PRRR7_invdynf_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4PRRR7_invdynf_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4PRRR7_invdynf_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4PRRR7_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S4PRRR7_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:37:03
% EndTime: 2019-12-31 16:37:04
% DurationCPUTime: 1.30s
% Computational Cost: add. (4000->154), mult. (7926->240), div. (0->0), fcn. (5809->10), ass. (0->136)
t978 = sin(pkin(8));
t980 = cos(pkin(8));
t958 = g(1) * t978 - g(2) * t980;
t975 = -g(3) + qJDD(1);
t979 = sin(pkin(4));
t981 = cos(pkin(4));
t1022 = t958 * t981 + t975 * t979;
t988 = cos(qJ(3));
t1012 = qJD(2) * t988;
t967 = -qJD(4) + t1012;
t1021 = qJD(4) - t967;
t985 = sin(qJ(3));
t1013 = qJD(2) * t985;
t984 = sin(qJ(4));
t987 = cos(qJ(4));
t947 = -t987 * qJD(3) + t984 * t1013;
t1020 = t947 ^ 2;
t949 = qJD(3) * t984 + t987 * t1013;
t1019 = t949 ^ 2;
t1018 = t967 ^ 2;
t1017 = t947 * t949;
t959 = -g(1) * t980 - g(2) * t978;
t986 = sin(qJ(2));
t989 = cos(qJ(2));
t926 = t1022 * t986 + t989 * t959;
t991 = qJD(2) ^ 2;
t919 = -pkin(2) * t991 + qJDD(2) * pkin(6) + t926;
t938 = -t958 * t979 + t975 * t981;
t912 = t988 * t919 + t985 * t938;
t973 = t985 ^ 2;
t974 = t988 ^ 2;
t1014 = t973 + t974;
t1011 = qJD(4) + t967;
t1010 = qJD(2) * qJD(3);
t1009 = t985 * qJDD(2);
t1008 = t985 * t1010;
t1007 = t988 * t1010;
t952 = t1007 + t1009;
t1006 = t987 * qJDD(3) - t952 * t984;
t1005 = -t1022 * t989 + t986 * t959;
t971 = t988 * qJDD(2);
t1004 = -t971 + 0.2e1 * t1008;
t950 = (-pkin(3) * t988 - pkin(7) * t985) * qJD(2);
t990 = qJD(3) ^ 2;
t900 = -pkin(3) * t990 + qJDD(3) * pkin(7) + t950 * t1012 + t912;
t918 = -qJDD(2) * pkin(2) - t991 * pkin(6) + t1005;
t901 = (-t952 - t1007) * pkin(7) + t1004 * pkin(3) + t918;
t885 = -t900 * t984 + t901 * t987;
t886 = t900 * t987 + t901 * t984;
t876 = -t885 * t984 + t886 * t987;
t937 = t988 * t938;
t899 = -t937 - qJDD(3) * pkin(3) - t990 * pkin(7) + (qJD(2) * t950 + t919) * t985;
t870 = t876 * t988 + t899 * t985;
t875 = t885 * t987 + t886 * t984;
t1003 = t870 * t986 - t875 * t989;
t914 = -t1011 * t949 + t1006;
t993 = -qJDD(3) * t984 - t952 * t987;
t916 = t1011 * t947 + t993;
t896 = t914 * t987 - t916 * t984;
t922 = -t1019 - t1020;
t888 = t896 * t988 + t922 * t985;
t895 = t914 * t984 + t916 * t987;
t1002 = t888 * t986 - t895 * t989;
t911 = -t919 * t985 + t937;
t890 = -t911 * t985 + t912 * t988;
t1001 = t890 * t986 - t918 * t989;
t992 = -qJDD(4) + t971 - t1008;
t924 = -t992 - t1017;
t927 = -t1018 - t1020;
t904 = -t924 * t984 + t927 * t987;
t913 = t1021 * t949 - t1006;
t892 = t904 * t988 + t913 * t985;
t903 = t924 * t987 + t927 * t984;
t1000 = t892 * t986 - t903 * t989;
t923 = t992 - t1017;
t930 = -t1018 - t1019;
t910 = t923 * t987 - t930 * t984;
t915 = -t1021 * t947 - t993;
t894 = t910 * t988 + t915 * t985;
t909 = t923 * t984 + t930 * t987;
t999 = t894 * t986 - t909 * t989;
t998 = -t1005 * t989 + t926 * t986;
t966 = t985 * t991 * t988;
t960 = qJDD(3) + t966;
t965 = -t974 * t991 - t990;
t934 = -t960 * t985 + t965 * t988;
t997 = -t1004 * t989 + t934 * t986;
t961 = -qJDD(3) + t966;
t964 = -t973 * t991 - t990;
t935 = t961 * t988 - t964 * t985;
t951 = 0.2e1 * t1007 + t1009;
t996 = t935 * t986 - t951 * t989;
t954 = t1014 * qJDD(2);
t957 = t1014 * t991;
t995 = t954 * t986 + t957 * t989;
t994 = qJDD(2) * t989 - t986 * t991;
t956 = -qJDD(2) * t986 - t989 * t991;
t943 = t994 * t981;
t942 = t956 * t981;
t941 = t994 * t979;
t940 = t956 * t979;
t933 = t961 * t985 + t964 * t988;
t932 = t960 * t988 + t965 * t985;
t931 = t954 * t989 - t957 * t986;
t929 = t995 * t981;
t928 = t995 * t979;
t921 = t935 * t989 + t951 * t986;
t920 = t1004 * t986 + t934 * t989;
t908 = -t933 * t979 + t996 * t981;
t907 = -t932 * t979 + t997 * t981;
t906 = t933 * t981 + t996 * t979;
t905 = t932 * t981 + t997 * t979;
t902 = t1005 * t986 + t926 * t989;
t898 = -t938 * t979 + t998 * t981;
t897 = t938 * t981 + t998 * t979;
t893 = t910 * t985 - t915 * t988;
t891 = t904 * t985 - t913 * t988;
t889 = t911 * t988 + t912 * t985;
t887 = t896 * t985 - t922 * t988;
t884 = t890 * t989 + t918 * t986;
t883 = t894 * t989 + t909 * t986;
t882 = t892 * t989 + t903 * t986;
t881 = t888 * t989 + t895 * t986;
t880 = -t893 * t979 + t999 * t981;
t879 = t893 * t981 + t999 * t979;
t878 = t1001 * t981 - t889 * t979;
t877 = t1001 * t979 + t889 * t981;
t874 = t1000 * t981 - t891 * t979;
t873 = t1000 * t979 + t891 * t981;
t872 = t1002 * t981 - t887 * t979;
t871 = t1002 * t979 + t887 * t981;
t869 = t876 * t985 - t899 * t988;
t868 = t870 * t989 + t875 * t986;
t867 = t1003 * t981 - t869 * t979;
t866 = t1003 * t979 + t869 * t981;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t958 * t978 + t959 * t980, 0, 0, 0, 0, 0, 0, -t943 * t978 + t956 * t980, -t942 * t978 - t980 * t994, 0, -t898 * t978 + t902 * t980, 0, 0, 0, 0, 0, 0, -t907 * t978 + t920 * t980, -t908 * t978 + t921 * t980, -t929 * t978 + t931 * t980, -t878 * t978 + t884 * t980, 0, 0, 0, 0, 0, 0, -t874 * t978 + t882 * t980, -t880 * t978 + t883 * t980, -t872 * t978 + t881 * t980, -t867 * t978 + t868 * t980; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t958 * t980 + t959 * t978, 0, 0, 0, 0, 0, 0, t943 * t980 + t956 * t978, t942 * t980 - t978 * t994, 0, t898 * t980 + t902 * t978, 0, 0, 0, 0, 0, 0, t907 * t980 + t920 * t978, t908 * t980 + t921 * t978, t929 * t980 + t931 * t978, t878 * t980 + t884 * t978, 0, 0, 0, 0, 0, 0, t874 * t980 + t882 * t978, t880 * t980 + t883 * t978, t872 * t980 + t881 * t978, t867 * t980 + t868 * t978; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t975, 0, 0, 0, 0, 0, 0, t941, t940, 0, t897, 0, 0, 0, 0, 0, 0, t905, t906, t928, t877, 0, 0, 0, 0, 0, 0, t873, t879, t871, t866; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t959, 0, 0, 0, 0, 0, 0, t956, -t994, 0, t902, 0, 0, 0, 0, 0, 0, t920, t921, t931, t884, 0, 0, 0, 0, 0, 0, t882, t883, t881, t868; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t958, 0, 0, 0, 0, 0, 0, t943, t942, 0, t898, 0, 0, 0, 0, 0, 0, t907, t908, t929, t878, 0, 0, 0, 0, 0, 0, t874, t880, t872, t867; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t975, 0, 0, 0, 0, 0, 0, t941, t940, 0, t897, 0, 0, 0, 0, 0, 0, t905, t906, t928, t877, 0, 0, 0, 0, 0, 0, t873, t879, t871, t866; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t991, -qJDD(2), 0, t926, 0, 0, 0, 0, 0, 0, t934, t935, t954, t890, 0, 0, 0, 0, 0, 0, t892, t894, t888, t870; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t991, 0, -t1005, 0, 0, 0, 0, 0, 0, -t1004, -t951, t957, -t918, 0, 0, 0, 0, 0, 0, -t903, -t909, -t895, -t875; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t938, 0, 0, 0, 0, 0, 0, t932, t933, 0, t889, 0, 0, 0, 0, 0, 0, t891, t893, t887, t869; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t965, t961, t971, t912, 0, 0, 0, 0, 0, 0, t904, t910, t896, t876; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t960, t964, -t1009, t911, 0, 0, 0, 0, 0, 0, -t913, -t915, -t922, -t899; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1004, t951, -t957, t918, 0, 0, 0, 0, 0, 0, t903, t909, t895, t875; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t927, t923, t914, t886; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t924, t930, t916, t885; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t913, t915, t922, t899;];
f_new_reg = t1;
