% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S4PRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d2,d3,d4,theta1]';
% 
% Output:
% tauB_reg [6x(5*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:37
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S4PRRR7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4PRRR7_invdynB_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4PRRR7_invdynB_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4PRRR7_invdynB_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4PRRR7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S4PRRR7_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:36:51
% EndTime: 2019-12-31 16:36:57
% DurationCPUTime: 5.00s
% Computational Cost: add. (15821->441), mult. (31263->722), div. (0->0), fcn. (22664->10), ass. (0->329)
t404 = sin(pkin(4));
t406 = cos(pkin(4));
t403 = sin(pkin(8));
t405 = cos(pkin(8));
t458 = g(1) * t403 - t405 * g(2);
t472 = g(3) - qJDD(1);
t496 = -t404 * t472 + t406 * t458;
t495 = t403 * t472;
t494 = t405 * t472;
t409 = sin(qJ(4));
t410 = sin(qJ(3));
t467 = qJD(2) * qJD(3);
t391 = t410 * t467;
t413 = cos(qJ(3));
t394 = t413 * qJDD(2);
t370 = t394 - t391;
t361 = -qJDD(4) + t370;
t412 = cos(qJ(4));
t470 = qJD(2) * t410;
t364 = -t412 * qJD(3) + t409 * t470;
t366 = qJD(3) * t409 + t412 * t470;
t482 = t364 * t366;
t428 = -t361 - t482;
t493 = t409 * t428;
t492 = t412 * t428;
t469 = qJD(2) * t413;
t387 = -qJD(4) + t469;
t350 = t364 * t387;
t459 = t413 * t467;
t465 = qJDD(2) * t410;
t369 = t459 + t465;
t460 = t364 * qJD(4) - t409 * qJDD(3) - t412 * t369;
t295 = t460 - t350;
t377 = g(1) * t405 + g(2) * t403;
t330 = -t405 * t377 - t403 * t458;
t456 = -t412 * qJDD(3) + t409 * t369;
t291 = (qJD(4) + t387) * t366 + t456;
t329 = -t403 * t377 + t405 * t458;
t359 = t364 ^ 2;
t360 = t366 ^ 2;
t385 = t387 ^ 2;
t491 = pkin(3) * t410;
t490 = pkin(3) * t413;
t411 = sin(qJ(2));
t414 = cos(qJ(2));
t309 = -t377 * t411 - t496 * t414;
t310 = -t414 * t377 + t496 * t411;
t259 = t309 * t411 + t310 * t414;
t489 = pkin(5) * t259;
t416 = qJD(2) ^ 2;
t302 = -t416 * pkin(2) + qJDD(2) * pkin(6) + t310;
t349 = t404 * t458 + t406 * t472;
t343 = t413 * t349;
t453 = -pkin(7) * t410 - t490;
t367 = t453 * qJD(2);
t415 = qJD(3) ^ 2;
t245 = t343 - qJDD(3) * pkin(3) - t415 * pkin(7) + (qJD(2) * t367 + t302) * t410;
t488 = t245 * t409;
t487 = t245 * t412;
t301 = -qJDD(2) * pkin(2) - t416 * pkin(6) + t309;
t486 = t301 * t410;
t485 = t301 * t413;
t306 = t361 - t482;
t484 = t306 * t409;
t483 = t306 * t412;
t386 = t410 * t416 * t413;
t378 = qJDD(3) + t386;
t481 = t378 * t410;
t379 = qJDD(3) - t386;
t480 = t379 * t410;
t479 = t379 * t413;
t478 = t387 * t409;
t477 = t387 * t412;
t399 = t410 ^ 2;
t476 = t399 * t416;
t474 = t411 * t349;
t473 = t414 * t349;
t272 = t413 * t302 - t410 * t349;
t246 = -pkin(3) * t415 + qJDD(3) * pkin(7) + t367 * t469 + t272;
t447 = -t370 + t391;
t448 = t369 + t459;
t257 = pkin(3) * t447 - pkin(7) * t448 + t301;
t208 = t412 * t246 + t409 * t257;
t400 = t413 ^ 2;
t471 = t399 + t400;
t466 = qJDD(2) * t404;
t464 = qJDD(2) * t411;
t463 = qJDD(2) * t414;
t462 = t410 * t482;
t461 = t413 * t482;
t207 = t246 * t409 - t412 * t257;
t271 = t302 * t410 + t343;
t218 = t271 * t410 + t413 * t272;
t455 = t411 * t386;
t454 = t414 * t386;
t217 = t271 * t413 - t272 * t410;
t372 = t471 * qJDD(2);
t397 = t400 * t416;
t375 = t397 + t476;
t327 = t372 * t414 - t375 * t411;
t451 = pkin(5) * t327 + t217 * t411;
t373 = -t411 * t416 + t463;
t450 = -pkin(5) * t373 - t474;
t430 = t414 * t416 + t464;
t449 = -pkin(5) * t430 + t473;
t178 = t207 * t409 + t208 * t412;
t168 = t178 * t413 + t245 * t410;
t177 = -t207 * t412 + t208 * t409;
t446 = t168 * t411 - t177 * t414;
t296 = t350 + t460;
t237 = -t291 * t412 - t296 * t409;
t305 = t359 + t360;
t213 = t237 * t413 - t305 * t410;
t235 = -t291 * t409 + t296 * t412;
t445 = t213 * t411 - t235 * t414;
t444 = t218 * t411 - t301 * t414;
t292 = (-qJD(4) + t387) * t366 - t456;
t236 = t292 * t412 + t295 * t409;
t331 = -t360 + t359;
t220 = t236 * t413 - t331 * t410;
t234 = -t292 * t409 + t295 * t412;
t443 = t220 * t411 + t234 * t414;
t321 = -t385 - t359;
t261 = t321 * t412 - t493;
t222 = t261 * t413 - t292 * t410;
t260 = t321 * t409 + t492;
t442 = t222 * t411 - t260 * t414;
t326 = -t360 - t385;
t270 = -t326 * t409 + t483;
t224 = t270 * t413 - t295 * t410;
t269 = t326 * t412 + t484;
t441 = t224 * t411 - t269 * t414;
t348 = -t360 + t385;
t281 = -t348 * t409 + t492;
t227 = t281 * t413 - t296 * t410;
t279 = -t348 * t412 - t493;
t440 = t227 * t411 + t279 * t414;
t347 = t359 - t385;
t282 = t347 * t412 + t484;
t228 = t282 * t413 - t291 * t410;
t280 = -t347 * t409 + t483;
t439 = t228 * t411 + t280 * t414;
t315 = -qJD(4) * t366 - t456;
t288 = -t315 * t409 - t364 * t477;
t249 = t288 * t413 - t462;
t287 = -t315 * t412 + t364 * t478;
t438 = t249 * t411 + t287 * t414;
t290 = t366 * t478 - t412 * t460;
t250 = t290 * t413 + t462;
t289 = t366 * t477 + t409 * t460;
t437 = t250 * t411 + t289 * t414;
t300 = (t364 * t412 - t366 * t409) * t387;
t284 = t300 * t413 - t361 * t410;
t299 = (-t364 * t409 - t366 * t412) * t387;
t436 = t284 * t411 + t299 * t414;
t258 = t309 * t414 - t310 * t411;
t368 = 0.2e1 * t459 + t465;
t371 = t394 - 0.2e1 * t391;
t325 = -t368 * t410 + t371 * t413;
t376 = t397 - t476;
t435 = t325 * t411 + t376 * t414;
t384 = -t397 - t415;
t339 = t384 * t413 - t481;
t434 = t339 * t411 + t371 * t414;
t382 = -t415 - t476;
t341 = -t382 * t410 - t479;
t433 = t341 * t411 - t368 * t414;
t353 = t430 * t406;
t432 = t353 * t405 + t373 * t403;
t319 = t353 * t403 - t373 * t405;
t431 = t372 * t411 + t375 * t414;
t362 = t471 * t467;
t429 = -qJDD(3) * t414 + t362 * t411;
t383 = t397 - t415;
t338 = t383 * t413 - t480;
t427 = t338 * t411 - t394 * t414;
t363 = t413 * t378;
t381 = t415 - t476;
t340 = -t381 * t410 + t363;
t426 = t340 * t411 - t410 * t463;
t344 = -t370 * t410 - t400 * t467;
t425 = t344 * t411 - t454;
t345 = t369 * t413 - t399 * t467;
t424 = t345 * t411 + t454;
t167 = t178 * t410 - t245 * t413;
t146 = -pkin(6) * t167 + (-pkin(7) * t413 + t491) * t177;
t149 = -pkin(2) * t167 + pkin(3) * t245 - pkin(7) * t178;
t151 = t168 * t414 + t177 * t411;
t423 = pkin(5) * t151 + t146 * t411 + t149 * t414;
t166 = -pkin(7) * t235 - t177;
t212 = t237 * t410 + t305 * t413;
t152 = -pkin(6) * t212 + t166 * t413 + t235 * t491;
t155 = -pkin(2) * t212 - pkin(3) * t305 - pkin(7) * t237 - t178;
t189 = t213 * t414 + t235 * t411;
t422 = pkin(5) * t189 + t152 * t411 + t155 * t414;
t191 = -pkin(3) * t260 + t207;
t209 = -pkin(7) * t260 + t488;
t221 = t261 * t410 + t292 * t413;
t160 = -pkin(6) * t221 - t191 * t410 + t209 * t413;
t179 = -pkin(2) * t221 - pkin(3) * t292 - pkin(7) * t261 + t487;
t197 = t222 * t414 + t260 * t411;
t421 = pkin(5) * t197 + t160 * t411 + t179 * t414;
t194 = -pkin(3) * t269 + t208;
t211 = -pkin(7) * t269 + t487;
t223 = t270 * t410 + t295 * t413;
t163 = -pkin(6) * t223 - t194 * t410 + t211 * t413;
t180 = -pkin(2) * t223 - pkin(3) * t295 - pkin(7) * t270 - t488;
t198 = t224 * t414 + t269 * t411;
t420 = pkin(5) * t198 + t163 * t411 + t180 * t414;
t335 = t384 * t410 + t363;
t242 = -pkin(2) * t335 + t271;
t267 = -pkin(6) * t335 + t486;
t303 = t339 * t414 - t371 * t411;
t419 = pkin(5) * t303 + t242 * t414 + t267 * t411;
t337 = t382 * t413 - t480;
t243 = -pkin(2) * t337 + t272;
t268 = -pkin(6) * t337 + t485;
t304 = t341 * t414 + t368 * t411;
t418 = pkin(5) * t304 + t243 * t414 + t268 * t411;
t202 = t218 * t414 + t301 * t411;
t417 = pkin(5) * t202 - (-pkin(2) * t414 - pkin(6) * t411) * t217;
t354 = t373 * t406;
t352 = t373 * t404;
t351 = t430 * t404;
t346 = qJDD(3) * t411 + t362 * t414;
t336 = t381 * t413 + t481;
t334 = t383 * t410 + t479;
t333 = t448 * t410;
t332 = t447 * t413;
t328 = t429 * t406;
t324 = t368 * t413 + t371 * t410;
t323 = t431 * t406;
t322 = t431 * t404;
t320 = -t354 * t403 - t405 * t430;
t318 = t354 * t405 - t403 * t430;
t314 = t345 * t414 - t455;
t313 = t344 * t414 + t455;
t312 = t340 * t414 + t410 * t464;
t311 = t338 * t414 + t394 * t411;
t298 = t325 * t414 - t376 * t411;
t286 = -t473 + (t351 * t404 + t353 * t406) * pkin(5);
t285 = -t474 + (-t352 * t404 - t354 * t406) * pkin(5);
t283 = t300 * t410 + t361 * t413;
t278 = -t323 * t403 + t327 * t405;
t277 = t323 * t405 + t327 * t403;
t276 = -t404 * t333 + t406 * t424;
t275 = t404 * t332 + t406 * t425;
t274 = -t404 * t336 + t406 * t426;
t273 = -t404 * t334 + t406 * t427;
t265 = -t404 * t337 + t406 * t433;
t264 = -t404 * t335 + t406 * t434;
t263 = t406 * t337 + t404 * t433;
t262 = t406 * t335 + t404 * t434;
t256 = -t404 * t324 + t406 * t435;
t255 = pkin(2) * t371 + pkin(6) * t339 - t485;
t254 = -pkin(2) * t368 + pkin(6) * t341 + t486;
t251 = t259 * t406;
t248 = t290 * t410 - t461;
t247 = t288 * t410 + t461;
t241 = -pkin(1) * t352 + t404 * t309 + t406 * t449;
t240 = pkin(1) * t351 + t404 * t310 + t406 * t450;
t239 = -t258 * t406 + t404 * t349;
t238 = -t258 * t404 - t406 * t349;
t233 = t284 * t414 - t299 * t411;
t232 = -t265 * t403 + t304 * t405;
t231 = -t264 * t403 + t303 * t405;
t230 = t265 * t405 + t304 * t403;
t229 = t264 * t405 + t303 * t403;
t226 = t282 * t410 + t291 * t413;
t225 = t281 * t410 + t296 * t413;
t219 = t236 * t410 + t331 * t413;
t215 = t250 * t414 - t289 * t411;
t214 = t249 * t414 - t287 * t411;
t210 = pkin(2) * t375 + pkin(6) * t372 + t218;
t206 = -t404 * t283 + t406 * t436;
t205 = -pkin(2) * t301 + pkin(6) * t218;
t204 = t228 * t414 - t280 * t411;
t203 = t227 * t414 - t279 * t411;
t201 = -pkin(1) * t238 + t406 * t489;
t200 = -t239 * t403 + t259 * t405;
t199 = t239 * t405 + t259 * t403;
t196 = t414 * t217 + (-t322 * t404 - t323 * t406) * pkin(5);
t195 = (-t238 * t404 - t239 * t406) * pkin(5);
t193 = -t404 * t248 + t406 * t437;
t192 = -t404 * t247 + t406 * t438;
t190 = t220 * t414 - t234 * t411;
t188 = -t243 * t411 + t268 * t414 + (-t263 * t404 - t265 * t406) * pkin(5);
t187 = -t242 * t411 + t267 * t414 + (-t262 * t404 - t264 * t406) * pkin(5);
t186 = -t404 * t226 + t406 * t439;
t185 = -t404 * t225 + t406 * t440;
t184 = -t404 * t223 + t406 * t441;
t183 = t406 * t223 + t404 * t441;
t182 = t217 * t404 + t406 * t444;
t181 = -t217 * t406 + t404 * t444;
t176 = -t404 * t221 + t406 * t442;
t175 = t406 * t221 + t404 * t442;
t174 = -pkin(1) * t263 - t254 * t404 + t406 * t418;
t173 = -pkin(1) * t262 - t255 * t404 + t406 * t419;
t172 = -pkin(1) * t322 - t404 * t210 + t406 * t451;
t171 = -t404 * t219 + t406 * t443;
t170 = -t404 * t212 + t406 * t445;
t169 = t406 * t212 + t404 * t445;
t165 = -t182 * t403 + t202 * t405;
t164 = t182 * t405 + t202 * t403;
t162 = -t184 * t403 + t198 * t405;
t161 = t184 * t405 + t198 * t403;
t159 = -t176 * t403 + t197 * t405;
t158 = t176 * t405 + t197 * t403;
t157 = -pkin(2) * t269 + pkin(6) * t224 + t194 * t413 + t211 * t410;
t156 = -pkin(2) * t260 + pkin(6) * t222 + t191 * t413 + t209 * t410;
t154 = -t170 * t403 + t189 * t405;
t153 = t170 * t405 + t189 * t403;
t150 = pkin(6) * t213 + t410 * t166 + (-pkin(2) - t490) * t235;
t148 = -(pkin(2) * t411 - pkin(6) * t414) * t217 + (-t181 * t404 - t182 * t406) * pkin(5);
t147 = -pkin(1) * t181 - t205 * t404 + t406 * t417;
t145 = -t404 * t167 + t406 * t446;
t144 = t406 * t167 + t404 * t446;
t143 = pkin(6) * t168 + (-pkin(2) + t453) * t177;
t142 = t163 * t414 - t180 * t411 + (-t183 * t404 - t184 * t406) * pkin(5);
t141 = t414 * t160 - t411 * t179 + (-t175 * t404 - t176 * t406) * pkin(5);
t140 = -pkin(1) * t183 - t157 * t404 + t406 * t420;
t139 = -t145 * t403 + t151 * t405;
t138 = t145 * t405 + t151 * t403;
t137 = -pkin(1) * t175 - t156 * t404 + t406 * t421;
t136 = t414 * t152 - t411 * t155 + (-t169 * t404 - t170 * t406) * pkin(5);
t135 = -pkin(1) * t169 - t150 * t404 + t406 * t422;
t134 = t414 * t146 - t411 * t149 + (-t144 * t404 - t145 * t406) * pkin(5);
t133 = -pkin(1) * t144 - t143 * t404 + t406 * t423;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t330, 0, 0, 0, 0, 0, 0, t320, t319, 0, t200, 0, 0, 0, 0, 0, 0, t231, t232, t278, t165, 0, 0, 0, 0, 0, 0, t159, t162, t154, t139; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t329, 0, 0, 0, 0, 0, 0, t318, -t432, 0, t199, 0, 0, 0, 0, 0, 0, t229, t230, t277, t164, 0, 0, 0, 0, 0, 0, t158, t161, t153, t138; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t472, 0, 0, 0, 0, 0, 0, t352, -t351, 0, t238, 0, 0, 0, 0, 0, 0, t262, t263, t322, t181, 0, 0, 0, 0, 0, 0, t175, t183, t169, t144; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t495, -t494, -t329, -qJ(1) * t329, 0, 0, -t319, 0, t320, t403 * t466, -qJ(1) * t318 - t241 * t403 + t285 * t405, qJ(1) * t432 - t240 * t403 + t286 * t405, -t251 * t403 + t258 * t405, -qJ(1) * t199 + t195 * t405 - t201 * t403, -t276 * t403 + t314 * t405, -t256 * t403 + t298 * t405, -t274 * t403 + t312 * t405, -t275 * t403 + t313 * t405, -t273 * t403 + t311 * t405, -t328 * t403 + t346 * t405, -qJ(1) * t229 - t173 * t403 + t187 * t405, -qJ(1) * t230 - t174 * t403 + t188 * t405, -qJ(1) * t277 - t172 * t403 + t196 * t405, -qJ(1) * t164 - t147 * t403 + t148 * t405, -t193 * t403 + t215 * t405, -t171 * t403 + t190 * t405, -t185 * t403 + t203 * t405, -t192 * t403 + t214 * t405, -t186 * t403 + t204 * t405, -t206 * t403 + t233 * t405, -qJ(1) * t158 - t137 * t403 + t141 * t405, -qJ(1) * t161 - t140 * t403 + t142 * t405, -qJ(1) * t153 - t135 * t403 + t136 * t405, -qJ(1) * t138 - t133 * t403 + t134 * t405; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t494, -t495, t330, qJ(1) * t330, 0, 0, t432, 0, t318, -t405 * t466, qJ(1) * t320 + t241 * t405 + t285 * t403, qJ(1) * t319 + t240 * t405 + t286 * t403, t251 * t405 + t258 * t403, qJ(1) * t200 + t195 * t403 + t201 * t405, t276 * t405 + t314 * t403, t256 * t405 + t298 * t403, t274 * t405 + t312 * t403, t275 * t405 + t313 * t403, t273 * t405 + t311 * t403, t328 * t405 + t346 * t403, qJ(1) * t231 + t173 * t405 + t187 * t403, qJ(1) * t232 + t174 * t405 + t188 * t403, qJ(1) * t278 + t172 * t405 + t196 * t403, qJ(1) * t165 + t147 * t405 + t148 * t403, t193 * t405 + t215 * t403, t171 * t405 + t190 * t403, t185 * t405 + t203 * t403, t192 * t405 + t214 * t403, t186 * t405 + t204 * t403, t206 * t405 + t233 * t403, qJ(1) * t159 + t137 * t405 + t141 * t403, qJ(1) * t162 + t140 * t405 + t142 * t403, qJ(1) * t154 + t135 * t405 + t136 * t403, qJ(1) * t139 + t133 * t405 + t134 * t403; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t458, t377, 0, 0, 0, 0, t351, 0, t352, t406 * qJDD(2), pkin(1) * t354 - t406 * t309 + t404 * t449, -pkin(1) * t353 - t406 * t310 + t404 * t450, t259 * t404, pkin(1) * t239 + t404 * t489, t406 * t333 + t404 * t424, t406 * t324 + t404 * t435, t406 * t336 + t404 * t426, -t406 * t332 + t404 * t425, t406 * t334 + t404 * t427, t429 * t404, pkin(1) * t264 + t255 * t406 + t404 * t419, pkin(1) * t265 + t254 * t406 + t404 * t418, pkin(1) * t323 + t406 * t210 + t404 * t451, pkin(1) * t182 + t205 * t406 + t404 * t417, t406 * t248 + t404 * t437, t406 * t219 + t404 * t443, t406 * t225 + t404 * t440, t406 * t247 + t404 * t438, t406 * t226 + t404 * t439, t406 * t283 + t404 * t436, pkin(1) * t176 + t156 * t406 + t404 * t421, pkin(1) * t184 + t157 * t406 + t404 * t420, pkin(1) * t170 + t150 * t406 + t404 * t422, pkin(1) * t145 + t143 * t406 + t404 * t423;];
tauB_reg = t1;
