% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RRPR8
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:08
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RRPR8_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRPR8_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRPR8_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRPR8_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRPR8_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4RRPR8_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:08:31
% EndTime: 2019-12-31 17:08:35
% DurationCPUTime: 4.56s
% Computational Cost: add. (9820->408), mult. (21363->476), div. (0->0), fcn. (12008->6), ass. (0->265)
t685 = qJD(2) ^ 2;
t680 = sin(qJ(2));
t676 = t680 ^ 2;
t686 = qJD(1) ^ 2;
t749 = t676 * t686;
t653 = t685 + t749;
t683 = cos(qJ(2));
t733 = t683 * t686;
t658 = t680 * t733;
t649 = qJDD(2) - t658;
t734 = t683 * t649;
t605 = -t680 * t653 + t734;
t724 = qJD(1) * qJD(2);
t663 = t683 * t724;
t722 = t680 * qJDD(1);
t639 = 0.2e1 * t663 + t722;
t681 = sin(qJ(1));
t684 = cos(qJ(1));
t791 = pkin(4) * (t684 * t605 - t681 * t639);
t790 = pkin(4) * (t681 * t605 + t684 * t639);
t789 = pkin(5) * t605;
t679 = sin(qJ(4));
t671 = qJDD(2) - qJDD(4);
t682 = cos(qJ(4));
t623 = (-t679 * t680 - t682 * t683) * qJD(1);
t726 = qJD(1) * t683;
t727 = qJD(1) * t680;
t625 = -t679 * t726 + t682 * t727;
t753 = t625 * t623;
t780 = -t671 + t753;
t788 = t679 * t780;
t787 = t682 * t780;
t741 = t680 * t649;
t599 = t683 * t653 + t741;
t784 = pkin(1) * t599;
t783 = pkin(5) * t599;
t759 = t683 * g(3);
t695 = -qJDD(2) * pkin(2) - t685 * qJ(3) + qJDD(3) + t759;
t652 = t684 * g(1) + t681 * g(2);
t627 = -t686 * pkin(1) + qJDD(1) * pkin(5) - t652;
t765 = pkin(2) * t683;
t704 = -qJ(3) * t680 - t765;
t637 = t704 * qJD(1);
t710 = qJD(1) * t637 + t627;
t563 = t710 * t680 + t695;
t648 = qJDD(2) + t658;
t770 = t683 ^ 2;
t732 = t770 * t686;
t656 = -t685 - t732;
t782 = pkin(2) * t648 + qJ(3) * t656 - t563;
t640 = t663 + t722;
t665 = t683 * qJDD(1);
t716 = t680 * t724;
t698 = -t665 + t716;
t565 = t623 * qJD(4) + t682 * t640 + t679 * t698;
t672 = qJD(2) - qJD(4);
t754 = t623 * t672;
t781 = t565 - t754;
t641 = t665 - 0.2e1 * t716;
t593 = t683 * t641;
t744 = t680 * t639;
t588 = -t593 + t744;
t647 = (t676 - t770) * t686;
t779 = t681 * t588 + t684 * t647;
t778 = t684 * t588 - t681 * t647;
t655 = -t685 + t732;
t603 = -t683 * t655 + t741;
t720 = t684 * qJDD(1);
t777 = t681 * t603 + t683 * t720;
t776 = t684 * t603 - t681 * t665;
t723 = qJD(3) * qJD(2);
t666 = 0.2e1 * t723;
t609 = -t680 * g(3) + t683 * t627;
t697 = -t685 * pkin(2) + qJDD(2) * qJ(3) + t637 * t726 + t609;
t560 = t666 + t697;
t650 = -qJD(2) * pkin(3) - pkin(6) * t727;
t528 = -pkin(3) * t732 + t698 * pkin(6) + qJD(2) * t650 + t560;
t529 = -qJDD(2) * pkin(3) + (-t640 + t663) * pkin(6) + (-pkin(3) * t733 + t710) * t680 + t695;
t493 = t679 * t528 - t682 * t529;
t494 = t682 * t528 + t679 * t529;
t478 = -t682 * t493 + t679 * t494;
t595 = t680 * t655 + t734;
t479 = t679 * t493 + t682 * t494;
t768 = pkin(2) + pkin(3);
t774 = qJ(3) * t479 - t768 * t478;
t712 = t679 * t640 - t682 * t698;
t541 = (qJD(4) + t672) * t625 + t712;
t545 = t754 + t565;
t503 = -t541 * t679 - t682 * t545;
t505 = -t541 * t682 + t679 * t545;
t773 = qJ(3) * t505 - t768 * t503;
t621 = t623 ^ 2;
t670 = t672 ^ 2;
t573 = -t670 - t621;
t530 = t679 * t573 + t787;
t531 = t682 * t573 - t788;
t772 = qJ(3) * t531 - t768 * t530 + t493;
t622 = t625 ^ 2;
t607 = -t622 - t670;
t580 = t753 + t671;
t746 = t679 * t580;
t546 = t682 * t607 + t746;
t736 = t682 * t580;
t547 = -t679 * t607 + t736;
t771 = qJ(3) * t547 - t768 * t546 + t494;
t769 = 0.2e1 * qJD(3);
t632 = t683 * t648;
t596 = t680 * t656 + t632;
t767 = pkin(1) * t596;
t742 = t680 * t648;
t602 = t683 * t656 - t742;
t764 = pkin(4) * (t681 * t602 + t684 * t641);
t719 = t676 + t770;
t643 = t719 * qJDD(1);
t646 = t719 * t686;
t763 = pkin(4) * (t681 * t643 + t684 * t646);
t762 = pkin(5) * t596;
t761 = pkin(6) * t478;
t760 = pkin(6) * t479;
t755 = qJ(3) * t683;
t752 = t672 * t625;
t751 = t672 * t679;
t750 = t672 * t682;
t651 = t681 * g(1) - t684 * g(2);
t626 = qJDD(1) * pkin(1) + t686 * pkin(5) + t651;
t690 = -pkin(2) * t716 + t626;
t523 = t665 * pkin(2) + t640 * qJ(3) - t698 * pkin(3) - pkin(6) * t732 + (qJD(2) * t755 + (-pkin(2) * qJD(2) + t650 + t769) * t680) * qJD(1) + t690;
t747 = t679 * t523;
t745 = t680 * t626;
t743 = t680 * t641;
t519 = t682 * t523;
t735 = t683 * t626;
t729 = pkin(1) * t641 + pkin(5) * t602;
t728 = pkin(1) * t646 + pkin(5) * t643;
t721 = t681 * qJDD(1);
t718 = t681 * t753;
t717 = t684 * t753;
t713 = -pkin(6) * t546 + t519;
t608 = t680 * t627 + t759;
t559 = t680 * t608 + t683 * t609;
t711 = -t681 * t651 - t684 * t652;
t709 = t681 * t658;
t708 = t684 * t658;
t645 = -t681 * t686 + t720;
t707 = -pkin(4) * t645 - t681 * g(3);
t705 = -pkin(2) * t563 + qJ(3) * t560;
t703 = pkin(2) * t680 - t755;
t702 = -pkin(6) * t530 + t747;
t701 = -pkin(6) * t531 + t519;
t700 = -pkin(6) * t547 - t747;
t699 = t640 + t663;
t558 = t683 * t608 - t680 * t609;
t585 = t683 * t639 + t743;
t696 = t684 * t651 - t681 * t652;
t694 = -pkin(6) * t503 - t478;
t693 = -pkin(6) * t505 - t479;
t692 = t698 * pkin(2);
t689 = pkin(2) * t653 + qJ(3) * t649 + t697;
t688 = t727 * t769 + t690;
t687 = t699 * qJ(3) + t688;
t654 = -t685 + t749;
t644 = t684 * t686 + t721;
t635 = t703 * qJDD(1);
t631 = t719 * t724;
t620 = -pkin(4) * t644 + t684 * g(3);
t615 = -t622 + t670;
t614 = t621 - t670;
t613 = t681 * qJDD(2) + t684 * t631;
t612 = t683 * t640 - t676 * t724;
t611 = -t684 * qJDD(2) + t681 * t631;
t610 = t680 * t698 - t770 * t724;
t604 = t680 * t654 + t632;
t598 = -t683 * t654 + t742;
t594 = t699 * t680;
t589 = pkin(4) * (t684 * t643 - t681 * t646);
t583 = t622 - t621;
t579 = t684 * t612 - t709;
t578 = t684 * t610 + t709;
t577 = t681 * t612 + t708;
t576 = t681 * t610 - t708;
t575 = t684 * t604 + t680 * t721;
t574 = t681 * t604 - t680 * t720;
t571 = pkin(4) * (t684 * t602 - t681 * t641);
t570 = (-t623 * t682 - t625 * t679) * t672;
t569 = (-t623 * t679 + t625 * t682) * t672;
t568 = -t735 + t783;
t567 = -t745 - t762;
t566 = -t621 - t622;
t564 = -t625 * qJD(4) - t712;
t562 = t609 + t784;
t561 = t608 - t767;
t556 = t729 + t735;
t555 = -pkin(1) * t639 - t745 - t789;
t554 = qJ(3) * t646 + t563;
t553 = pkin(2) * t646 + t560;
t552 = -t692 + t687;
t551 = t682 * t614 + t746;
t550 = -t679 * t615 + t787;
t549 = t679 * t614 - t736;
t548 = t682 * t615 + t788;
t540 = (qJD(4) - t672) * t625 + t712;
t539 = pkin(1) * t626 + pkin(5) * t559;
t538 = t682 * t565 + t625 * t751;
t537 = t679 * t565 - t625 * t750;
t536 = -t679 * t564 + t623 * t750;
t535 = -t682 * t564 - t623 * t751;
t534 = (t641 - t698) * pkin(2) + t687;
t533 = -t692 + (t639 + t699) * qJ(3) + t688;
t532 = t559 + t728;
t524 = -t767 - t782;
t522 = -t689 - 0.2e1 * t723 - t784;
t521 = t680 * t569 + t683 * t570;
t520 = -t683 * t569 + t680 * t570;
t518 = t683 * t560 + t680 * t563;
t517 = t680 * t560 - t683 * t563;
t516 = -pkin(2) * t744 + t683 * t533 - t783;
t515 = qJ(3) * t593 - t680 * t534 - t762;
t514 = -t680 * t553 + t683 * t554;
t513 = t680 * t549 + t683 * t551;
t512 = t680 * t548 + t683 * t550;
t511 = -t683 * t549 + t680 * t551;
t510 = -t683 * t548 + t680 * t550;
t509 = t789 + t680 * t533 + (pkin(1) + t765) * t639;
t508 = qJ(3) * t743 + t683 * t534 + t729;
t507 = t680 * t546 + t683 * t547;
t506 = -t683 * t546 + t680 * t547;
t504 = -t682 * t540 - t679 * t781;
t502 = -t679 * t540 + t682 * t781;
t501 = t683 * t553 + t680 * t554 + t728;
t500 = t680 * t537 + t683 * t538;
t499 = -t680 * t535 + t683 * t536;
t498 = -t683 * t537 + t680 * t538;
t497 = t683 * t535 + t680 * t536;
t496 = t680 * t530 + t683 * t531;
t495 = -t683 * t530 + t680 * t531;
t490 = -pkin(1) * t517 - t705;
t489 = qJ(3) * t781 + t713;
t488 = -pkin(5) * t517 - t703 * t552;
t487 = qJ(3) * t540 + t702;
t486 = t680 * t503 + t683 * t505;
t485 = t680 * t502 + t683 * t504;
t484 = -t683 * t503 + t680 * t505;
t483 = -t683 * t502 + t680 * t504;
t482 = pkin(5) * t518 + (pkin(1) - t704) * t552;
t481 = t768 * t781 + t700;
t480 = t768 * t540 + t701;
t477 = qJ(3) * t523 - t761;
t476 = -pkin(1) * t506 - t771;
t475 = qJ(3) * t566 + t694;
t474 = t768 * t523 - t760;
t473 = -pkin(1) * t495 - t772;
t472 = t768 * t566 + t693;
t471 = t680 * t478 + t683 * t479;
t470 = -t683 * t478 + t680 * t479;
t469 = -pkin(5) * t506 - t680 * t481 + t683 * t489;
t468 = -pkin(1) * t484 - t773;
t467 = -pkin(5) * t495 - t680 * t480 + t683 * t487;
t466 = pkin(1) * t781 + pkin(5) * t507 + t683 * t481 + t680 * t489;
t465 = pkin(1) * t540 + pkin(5) * t496 + t683 * t480 + t680 * t487;
t464 = -pkin(5) * t484 - t680 * t472 + t683 * t475;
t463 = pkin(1) * t566 + pkin(5) * t486 + t683 * t472 + t680 * t475;
t462 = -pkin(5) * t470 - t680 * t474 + t683 * t477;
t461 = -pkin(1) * t470 - t774;
t460 = pkin(1) * t523 + pkin(5) * t471 + t683 * t474 + t680 * t477;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t645, 0, -t644, 0, t707, -t620, -t696, -pkin(4) * t696, t579, -t778, t575, t578, -t776, t613, -t681 * t561 + t684 * t567 - t764, -t681 * t562 + t684 * t568 + t790, t684 * t558 - t763, -pkin(4) * (t681 * t559 + t684 * t626) - (t681 * pkin(1) - t684 * pkin(5)) * t558, t579, t575, t778, t613, t776, t578, t684 * t515 - t681 * t524 - t764, t684 * t514 - t681 * t635 - t763, t684 * t516 - t681 * t522 - t790, t684 * t488 - t681 * t490 - pkin(4) * (t681 * t518 + t684 * t552), t684 * t500 + t718, t684 * t485 - t681 * t583, t684 * t512 - t681 * t545, t684 * t499 - t718, t684 * t513 + t681 * t541, t684 * t521 + t681 * t671, t684 * t467 - t681 * t473 - pkin(4) * (t681 * t496 + t684 * t540), t684 * t469 - t681 * t476 - pkin(4) * (t681 * t507 + t684 * t781), t684 * t464 - t681 * t468 - pkin(4) * (t681 * t486 + t684 * t566), t684 * t462 - t681 * t461 - pkin(4) * (t681 * t471 + t684 * t523); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t644, 0, t645, 0, t620, t707, t711, pkin(4) * t711, t577, -t779, t574, t576, -t777, t611, t684 * t561 + t681 * t567 + t571, t684 * t562 + t681 * t568 - t791, t681 * t558 + t589, pkin(4) * (t684 * t559 - t681 * t626) - (-t684 * pkin(1) - t681 * pkin(5)) * t558, t577, t574, t779, t611, t777, t576, t681 * t515 + t684 * t524 + t571, t681 * t514 + t684 * t635 + t589, t681 * t516 + t684 * t522 + t791, t681 * t488 + t684 * t490 + pkin(4) * (t684 * t518 - t681 * t552), t681 * t500 - t717, t681 * t485 + t684 * t583, t681 * t512 + t684 * t545, t681 * t499 + t717, t681 * t513 - t684 * t541, t681 * t521 - t684 * t671, t681 * t467 + t684 * t473 + pkin(4) * (t684 * t496 - t681 * t540), t681 * t469 + t684 * t476 + pkin(4) * (t684 * t507 - t681 * t781), t681 * t464 + t684 * t468 + pkin(4) * (t684 * t486 - t681 * t566), t681 * t462 + t684 * t461 + pkin(4) * (t684 * t471 - t681 * t523); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t651, t652, 0, 0, t594, t585, t598, t593, t595, 0, t556, t555, t532, t539, t594, t598, -t585, 0, -t595, t593, t508, t501, t509, t482, t498, t483, t510, t497, t511, t520, t465, t466, t463, t460; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t686, 0, 0, -g(3), -t651, 0, t612, -t588, t604, t610, -t603, t631, t567, t568, t558, pkin(5) * t558, t612, t604, t588, t631, t603, t610, t515, t514, t516, t488, t500, t485, t512, t499, t513, t521, t467, t469, t464, t462; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t686, 0, qJDD(1), 0, g(3), 0, -t652, 0, t658, -t647, -t722, -t658, -t665, -qJDD(2), t561, t562, 0, pkin(1) * t558, t658, -t722, t647, -qJDD(2), t665, -t658, t524, t635, t522, t490, -t753, t583, t545, t753, -t541, -t671, t473, t476, t468, t461; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t651, t652, 0, 0, t594, t585, t598, t593, t595, 0, t556, t555, t532, t539, t594, t598, -t585, 0, -t595, t593, t508, t501, t509, t482, t498, t483, t510, t497, t511, t520, t465, t466, t463, t460; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t640, t641, t648, -t663, t655, t663, 0, -t626, t608, 0, t640, t648, -t641, t663, -t655, -t663, qJ(3) * t641, t554, t533, qJ(3) * t552, t538, t504, t550, t536, t551, t570, t487, t489, t475, t477; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t716, t639, -t654, -t698, t649, -t716, t626, 0, t609, 0, t716, -t654, -t639, -t716, -t649, -t698, t534, t553, pkin(2) * t639, pkin(2) * t552, -t537, -t502, -t548, t535, -t549, -t569, t480, t481, t472, t474; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t658, t647, t722, t658, t665, qJDD(2), -t608, -t609, 0, 0, -t658, t722, -t647, qJDD(2), -t665, t658, t782, -t635, t666 + t689, t705, t753, -t583, -t545, -t753, t541, t671, t772, t771, t773, t774; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t640, t648, -t641, t663, -t655, -t663, 0, t563, t552, 0, t538, t504, t550, t536, t551, t570, t702, t713, t694, -t761; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t658, t722, -t647, qJDD(2), -t665, t658, -t563, 0, t560, 0, t753, -t583, -t545, -t753, t541, t671, -pkin(3) * t530 + t493, -pkin(3) * t546 + t494, -pkin(3) * t503, -pkin(3) * t478; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t716, t654, t639, t716, t649, t698, -t552, -t560, 0, 0, t537, t502, t548, -t535, t549, t569, -pkin(3) * t540 - t701, -pkin(3) * t781 - t700, -pkin(3) * t566 - t693, -pkin(3) * t523 + t760; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t565, -t540, t780, t754, t614, -t754, 0, t523, t493, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t752, t781, t615, t564, -t580, t752, -t523, 0, t494, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t753, t583, t545, t753, -t541, -t671, -t493, -t494, 0, 0;];
m_new_reg = t1;
