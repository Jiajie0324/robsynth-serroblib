% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4PPRR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d3,d4,theta1,theta2]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:18
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4PPRR4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4PPRR4_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4PPRR4_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4PPRR4_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4PPRR4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4PPRR4_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:18:45
% EndTime: 2019-12-31 16:18:47
% DurationCPUTime: 2.82s
% Computational Cost: add. (6256->270), mult. (11277->382), div. (0->0), fcn. (8442->8), ass. (0->182)
t441 = sin(pkin(7));
t442 = sin(pkin(6));
t444 = cos(pkin(6));
t423 = g(1) * t444 + g(2) * t442;
t439 = g(3) - qJDD(1);
t443 = cos(pkin(7));
t395 = -t441 * t423 + t439 * t443;
t396 = -t423 * t443 - t439 * t441;
t447 = sin(qJ(3));
t449 = cos(qJ(3));
t345 = t449 * t395 + t396 * t447;
t346 = -t447 * t395 + t449 * t396;
t467 = t345 * t447 + t449 * t346;
t300 = t345 * t449 - t346 * t447;
t488 = t300 * t443;
t287 = -t441 * t467 + t488;
t489 = t300 * t441;
t497 = t443 * t467 + t489;
t422 = g(1) * t442 - t444 * g(2);
t416 = -qJDD(2) + t422;
t451 = qJD(3) ^ 2;
t418 = qJDD(3) * t447 + t449 * t451;
t374 = pkin(4) * t418 - t416 * t449;
t419 = qJDD(3) * t449 - t447 * t451;
t457 = -pkin(4) * t419 - t416 * t447;
t465 = -t418 * t441 + t443 * t419;
t496 = -qJ(2) * t465 + t374 * t441 + t443 * t457;
t363 = t443 * t418 + t419 * t441;
t313 = qJ(2) * t363 + t374 * t443 - t441 * t457;
t337 = -pkin(3) * t451 + qJDD(3) * pkin(5) + t346;
t446 = sin(qJ(4));
t448 = cos(qJ(4));
t328 = t337 * t446 + t448 * t416;
t329 = t337 * t448 - t416 * t446;
t296 = t446 * t328 + t448 * t329;
t490 = pkin(2) * t300;
t487 = t416 * t442;
t430 = t446 * t451 * t448;
t424 = qJDD(4) + t430;
t484 = t424 * t446;
t483 = t424 * t448;
t425 = qJDD(4) - t430;
t482 = t425 * t446;
t481 = t425 * t448;
t437 = t446 ^ 2;
t480 = t437 * t451;
t397 = t441 * t416;
t479 = t442 * t439;
t398 = t443 * t416;
t399 = t444 * t416;
t478 = t444 * t439;
t336 = -qJDD(3) * pkin(3) - t451 * pkin(5) + t345;
t333 = t446 * t336;
t334 = t448 * t336;
t477 = -pkin(3) * t336 + pkin(5) * t296;
t438 = t448 ^ 2;
t476 = t437 + t438;
t475 = qJD(3) * qJD(4);
t474 = t446 * qJDD(3);
t433 = t448 * qJDD(3);
t450 = qJD(4) ^ 2;
t427 = -t450 - t480;
t387 = -t427 * t446 - t481;
t432 = t448 * t475;
t411 = 0.2e1 * t432 + t474;
t473 = -pkin(3) * t411 + pkin(5) * t387 + t333;
t435 = t438 * t451;
t429 = -t435 - t450;
t385 = t429 * t448 - t484;
t471 = t446 * t475;
t414 = t433 - 0.2e1 * t471;
t472 = pkin(3) * t414 + pkin(5) * t385 - t334;
t417 = t476 * qJDD(3);
t420 = t435 + t480;
t369 = t417 * t447 + t420 * t449;
t370 = t417 * t449 - t420 * t447;
t331 = t369 * t443 + t370 * t441;
t460 = pkin(3) * t420 + pkin(5) * t417 + t296;
t452 = pkin(2) * t369 + t460;
t278 = -pkin(1) * t331 - t452;
t332 = -t369 * t441 + t370 * t443;
t470 = qJ(1) * t332 + t278;
t458 = -pkin(2) * t418 - t346;
t314 = pkin(1) * t363 - t458;
t469 = -qJ(1) * t465 + t314;
t453 = pkin(2) * t419 - t345;
t315 = -pkin(1) * t465 - t453;
t468 = -qJ(1) * t363 + t315;
t466 = t395 * t441 + t443 * t396;
t463 = -t422 * t442 - t444 * t423;
t462 = t447 * t430;
t461 = t449 * t430;
t289 = t296 * t447 - t336 * t449;
t459 = pkin(2) * t289 + t477;
t295 = t328 * t448 - t329 * t446;
t343 = t395 * t443 - t396 * t441;
t456 = t422 * t444 - t423 * t442;
t350 = t387 * t447 - t411 * t449;
t455 = pkin(2) * t350 + t473;
t349 = t385 * t447 + t414 * t449;
t454 = pkin(2) * t349 + t472;
t428 = t435 - t450;
t426 = t450 - t480;
t421 = -t435 + t480;
t413 = t433 - t471;
t412 = t432 + t474;
t409 = pkin(1) * t416;
t408 = t476 * t475;
t394 = qJDD(4) * t447 + t408 * t449;
t393 = t412 * t448 - t437 * t475;
t392 = -qJDD(4) * t449 + t408 * t447;
t391 = -t413 * t446 - t438 * t475;
t386 = -t426 * t446 + t483;
t384 = t428 * t448 - t482;
t383 = t427 * t448 - t482;
t382 = t426 * t448 + t484;
t381 = t429 * t446 + t483;
t380 = t428 * t446 + t481;
t379 = (t412 + t432) * t446;
t378 = -t448 * t413 + t446 * t432;
t362 = -t411 * t446 + t414 * t448;
t361 = t411 * t448 + t414 * t446;
t360 = t393 * t449 - t462;
t359 = t391 * t449 + t462;
t358 = t393 * t447 + t461;
t357 = t391 * t447 - t461;
t356 = t386 * t449 + t447 * t474;
t355 = t384 * t449 + t447 * t433;
t354 = t386 * t447 - t449 * t474;
t353 = t384 * t447 - t449 * t433;
t352 = t387 * t449 + t411 * t447;
t351 = t385 * t449 - t414 * t447;
t348 = t362 * t449 + t421 * t447;
t347 = t362 * t447 - t421 * t449;
t340 = -t392 * t441 + t394 * t443;
t339 = t392 * t443 + t394 * t441;
t330 = qJ(2) * t466 + t409;
t325 = -t358 * t441 + t360 * t443;
t324 = -t357 * t441 + t359 * t443;
t323 = t358 * t443 + t360 * t441;
t322 = t357 * t443 + t359 * t441;
t321 = -t354 * t441 + t356 * t443;
t320 = -t353 * t441 + t355 * t443;
t319 = t354 * t443 + t356 * t441;
t318 = t353 * t443 + t355 * t441;
t317 = -pkin(5) * t383 + t334;
t316 = -pkin(5) * t381 + t333;
t309 = -t350 * t441 + t352 * t443;
t308 = -t349 * t441 + t351 * t443;
t307 = t350 * t443 + t352 * t441;
t306 = t349 * t443 + t351 * t441;
t305 = -pkin(3) * t383 + t329;
t304 = -pkin(3) * t381 + t328;
t303 = -t347 * t441 + t348 * t443;
t302 = t347 * t443 + t348 * t441;
t297 = pkin(2) * t416 + pkin(4) * t467;
t292 = -pkin(4) * t369 + t295 * t449;
t291 = pkin(4) * t370 + t295 * t447;
t290 = t296 * t449 + t336 * t447;
t284 = -pkin(4) * t350 - t305 * t447 + t317 * t449;
t283 = -pkin(4) * t349 - t304 * t447 + t316 * t449;
t282 = -pkin(1) * t307 - t455;
t281 = -pkin(1) * t306 - t454;
t280 = -pkin(2) * t383 + pkin(4) * t352 + t305 * t449 + t317 * t447;
t279 = -pkin(2) * t381 + pkin(4) * t351 + t304 * t449 + t316 * t447;
t277 = pkin(1) * t287 + t490;
t276 = -t289 * t441 + t290 * t443;
t275 = t289 * t443 + t290 * t441;
t274 = -qJ(2) * t331 - t291 * t441 + t292 * t443;
t273 = qJ(2) * t332 + t291 * t443 + t292 * t441;
t272 = pkin(4) * t488 + qJ(2) * t287 - t297 * t441;
t271 = pkin(4) * t489 + qJ(2) * t497 + t297 * t443 + t409;
t270 = -pkin(4) * t289 - (pkin(3) * t447 - pkin(5) * t449) * t295;
t269 = -qJ(2) * t307 - t280 * t441 + t284 * t443;
t268 = -qJ(2) * t306 - t279 * t441 + t283 * t443;
t267 = -pkin(1) * t383 + qJ(2) * t309 + t280 * t443 + t284 * t441;
t266 = -pkin(1) * t381 + qJ(2) * t308 + t279 * t443 + t283 * t441;
t265 = pkin(4) * t290 - (-pkin(3) * t449 - pkin(5) * t447 - pkin(2)) * t295;
t264 = -pkin(1) * t275 - t459;
t263 = -qJ(2) * t275 - t265 * t441 + t270 * t443;
t262 = pkin(1) * t295 + qJ(2) * t276 + t265 * t443 + t270 * t441;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t479, -t478, -t456, -qJ(1) * t456, 0, 0, 0, 0, 0, 0, -t395 * t442 - t441 * t399, -t396 * t442 - t443 * t399, t444 * t343, -qJ(1) * (t442 * t466 + t399) - (pkin(1) * t442 - qJ(2) * t444) * t343, 0, 0, t444 * t465, 0, -t444 * t363, t442 * qJDD(3), -t468 * t442 + t444 * t496, t313 * t444 - t469 * t442, t444 * t287, t444 * t272 - t442 * t277 - qJ(1) * (t442 * t497 + t399), t325 * t444 + t379 * t442, t303 * t444 + t361 * t442, t321 * t444 + t382 * t442, t324 * t444 - t378 * t442, t320 * t444 + t380 * t442, t444 * t340, t444 * t268 - t442 * t281 - qJ(1) * (t308 * t442 - t381 * t444), t444 * t269 - t442 * t282 - qJ(1) * (t309 * t442 - t383 * t444), t444 * t274 - t442 * t470, t444 * t263 - t442 * t264 - qJ(1) * (t276 * t442 + t295 * t444); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t478, -t479, t463, qJ(1) * t463, 0, 0, 0, 0, 0, 0, t395 * t444 - t442 * t397, t396 * t444 - t442 * t398, t442 * t343, qJ(1) * (t444 * t466 - t487) - (-pkin(1) * t444 - qJ(2) * t442) * t343, 0, 0, t442 * t465, 0, -t442 * t363, -t444 * qJDD(3), t442 * t496 + t468 * t444, t442 * t313 + t469 * t444, t442 * t287, t442 * t272 + t444 * t277 + qJ(1) * (t444 * t497 - t487), t325 * t442 - t379 * t444, t303 * t442 - t361 * t444, t321 * t442 - t382 * t444, t324 * t442 + t378 * t444, t320 * t442 - t380 * t444, t442 * t340, t442 * t268 + t444 * t281 + qJ(1) * (t308 * t444 + t381 * t442), t442 * t269 + t444 * t282 + qJ(1) * (t309 * t444 + t383 * t442), t442 * t274 + t444 * t470, t442 * t263 + t444 * t264 + qJ(1) * (t276 * t444 - t295 * t442); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t422, t423, 0, 0, 0, 0, 0, 0, 0, 0, t398, -t397, t466, t330, 0, 0, t363, 0, t465, 0, -t313, t496, t497, t271, t323, t302, t319, t322, t318, t339, t266, t267, t273, t262; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t439, -t422, 0, 0, 0, 0, 0, 0, 0, -t397, -t398, t343, qJ(2) * t343, 0, 0, t465, 0, -t363, 0, t496, t313, t287, t272, t325, t303, t321, t324, t320, t340, t268, t269, t274, t263; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t439, 0, -t423, 0, 0, 0, 0, 0, 0, 0, t395, t396, 0, pkin(1) * t343, 0, 0, 0, 0, 0, -qJDD(3), t315, t314, 0, t277, -t379, -t361, -t382, t378, -t380, 0, t281, t282, t278, t264; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t422, t423, 0, 0, 0, 0, 0, 0, 0, 0, t398, -t397, t466, t330, 0, 0, t363, 0, t465, 0, -t313, t496, t497, t271, t323, t302, t319, t322, t318, t339, t266, t267, t273, t262; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t416, t395, 0, 0, 0, t419, 0, -t418, 0, t457, t374, t300, pkin(4) * t300, t360, t348, t356, t359, t355, t394, t283, t284, t292, t270; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t416, 0, t396, 0, 0, 0, t418, 0, t419, 0, -t374, t457, t467, t297, t358, t347, t354, t357, t353, t392, t279, t280, t291, t265; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t395, -t396, 0, 0, 0, 0, 0, 0, 0, qJDD(3), t453, t458, 0, -t490, t379, t361, t382, -t378, t380, 0, t454, t455, t452, t459; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), 0, -t451, 0, 0, -t416, t345, 0, t393, t362, t386, t391, t384, t408, t316, t317, t295, pkin(5) * t295; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t451, 0, qJDD(3), 0, t416, 0, t346, 0, t430, -t421, -t474, -t430, -t433, -qJDD(4), t304, t305, 0, pkin(3) * t295; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t345, -t346, 0, 0, t379, t361, t382, -t378, t380, 0, t472, t473, t460, t477; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t412, t414, t424, -t432, t428, t432, 0, t336, t328, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t471, t411, t426, t413, t425, -t471, -t336, 0, t329, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t430, t421, t474, t430, t433, qJDD(4), -t328, -t329, 0, 0;];
m_new_reg = t1;
