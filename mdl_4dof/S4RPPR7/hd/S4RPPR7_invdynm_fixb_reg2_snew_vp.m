% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RPPR7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d4,theta3]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:41
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RPPR7_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RPPR7_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RPPR7_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RPPR7_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RPPR7_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4RPPR7_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:41:45
% EndTime: 2019-12-31 16:41:49
% DurationCPUTime: 3.29s
% Computational Cost: add. (7155->312), mult. (15933->379), div. (0->0), fcn. (9806->6), ass. (0->197)
t466 = sin(qJ(4));
t464 = sin(pkin(6));
t465 = cos(pkin(6));
t468 = cos(qJ(4));
t489 = t464 * t468 + t465 * t466;
t429 = t489 * qJD(1);
t431 = (-t464 * t466 + t465 * t468) * qJD(1);
t534 = t431 * t429;
t544 = qJDD(4) - t534;
t548 = t466 * t544;
t547 = t468 * t544;
t546 = -0.2e1 * qJD(1);
t471 = qJD(1) ^ 2;
t467 = sin(qJ(1));
t469 = cos(qJ(1));
t444 = t467 * g(1) - t469 * g(2);
t493 = qJDD(2) - t444;
t483 = -t471 * qJ(2) + t493;
t536 = -qJ(3) - pkin(1);
t545 = qJD(3) * t546 + t536 * qJDD(1) + t483;
t461 = t464 ^ 2;
t462 = t465 ^ 2;
t518 = t461 + t462;
t542 = t518 * t471;
t389 = t464 * g(3) + t545 * t465;
t496 = -t465 * g(3) + t545 * t464;
t354 = t465 * t389 + t464 * t496;
t541 = t489 * qJDD(1);
t424 = t429 ^ 2;
t425 = t431 ^ 2;
t539 = pkin(2) * t354;
t463 = qJDD(1) * qJ(2);
t445 = t469 * g(1) + t467 * g(2);
t479 = qJD(2) * t546 + t445;
t476 = -t463 + t479;
t475 = -qJDD(3) + t476;
t408 = -t536 * t471 + t475;
t538 = pkin(2) * t408;
t438 = t518 * qJDD(1);
t537 = pkin(2) * t438;
t535 = qJDD(1) * pkin(1);
t533 = t461 * t471;
t528 = t464 * t471;
t381 = (-pkin(3) * t528 - pkin(5) * qJDD(1)) * t465 + t389;
t512 = t464 * qJDD(1);
t383 = -pkin(3) * t533 - pkin(5) * t512 + t496;
t349 = -t468 * t381 + t466 * t383;
t350 = t466 * t381 + t468 * t383;
t320 = -t468 * t349 + t466 * t350;
t532 = t464 * t320;
t530 = t464 * t408;
t529 = t464 * t465;
t527 = t465 * t320;
t403 = t465 * t408;
t386 = -pkin(3) * t512 + (t518 * pkin(5) - t536) * t471 + t475;
t526 = t466 * t386;
t393 = qJDD(4) + t534;
t525 = t466 * t393;
t524 = t467 * t438;
t523 = t468 * t386;
t522 = t468 * t393;
t521 = t469 * t438;
t519 = t461 - t462;
t517 = t429 * qJD(4);
t516 = t431 * qJD(4);
t514 = t461 * qJDD(1);
t513 = t462 * qJDD(1);
t456 = t465 * qJDD(1);
t511 = t467 * qJDD(1);
t510 = t469 * qJDD(1);
t509 = t467 * t534;
t508 = t469 * t534;
t321 = t466 * t349 + t468 * t350;
t311 = t464 * t321 + t527;
t319 = pkin(3) * t320;
t505 = -pkin(2) * t311 - t319;
t427 = t468 * t456 - t466 * t512;
t360 = -t468 * t427 - t466 * t541;
t362 = t466 * t427 - t468 * t541;
t328 = t465 * t360 + t464 * t362;
t359 = pkin(3) * t360;
t504 = -pkin(2) * t328 - t359;
t382 = -t424 - t425;
t315 = -pkin(3) * t382 + pkin(5) * t362 + t321;
t317 = -pkin(5) * t360 - t320;
t502 = -t464 * t315 + t465 * t317;
t470 = qJD(4) ^ 2;
t391 = -t470 - t424;
t358 = t468 * t391 - t548;
t395 = t541 + 0.2e1 * t516;
t327 = -pkin(3) * t395 + pkin(5) * t358 + t523;
t357 = t466 * t391 + t547;
t344 = -pkin(5) * t357 - t526;
t501 = -t464 * t327 + t465 * t344;
t414 = -t425 - t470;
t372 = -t466 * t414 - t522;
t397 = -0.2e1 * t517 + t427;
t332 = -pkin(3) * t397 + pkin(5) * t372 - t526;
t369 = t468 * t414 - t525;
t348 = -pkin(5) * t369 - t523;
t500 = -t464 * t332 + t465 * t348;
t415 = t471 * pkin(1) + t476;
t419 = -t483 + t535;
t498 = -t469 * t415 - t467 * t419;
t497 = -t467 * t444 - t469 * t445;
t442 = -t467 * t471 + t510;
t495 = pkin(4) * t442 + t467 * g(3);
t443 = t469 * t471 + t511;
t494 = -pkin(4) * t443 + t469 * g(3);
t492 = pkin(3) * t357 - t349;
t355 = -t464 * t389 + t465 * t496;
t491 = t467 * t415 - t469 * t419;
t490 = t469 * t444 - t467 * t445;
t318 = pkin(3) * t386 + pkin(5) * t321;
t488 = -pkin(5) * t527 - t464 * t318;
t487 = pkin(3) * t369 - t350;
t436 = t464 * t542;
t486 = -t467 * t436 + t464 * t510;
t485 = t469 * t436 + t464 * t511;
t324 = t465 * t357 + t464 * t358;
t484 = -pkin(2) * t324 - t492;
t482 = pkin(2) * t382 - t465 * t315 - t464 * t317;
t481 = pkin(2) * t395 - t465 * t327 - t464 * t344;
t480 = pkin(2) * t397 - t465 * t332 - t464 * t348;
t478 = -pkin(2) * t386 + pkin(5) * t532 - t465 * t318;
t335 = t465 * t369 + t464 * t372;
t477 = -pkin(2) * t335 - t487;
t448 = t465 * t528;
t447 = t464 * t456;
t446 = -0.2e1 * t447;
t440 = t519 * t471;
t439 = t519 * qJDD(1);
t435 = t465 * t542;
t434 = t493 - 0.2e1 * t535;
t428 = 0.2e1 * t463 - t479;
t413 = -t425 + t470;
t412 = t424 - t470;
t411 = t443 * t529;
t410 = t442 * t529;
t405 = -t467 * t435 + t465 * t510;
t404 = t469 * t435 + t465 * t511;
t401 = t425 - t424;
t400 = -pkin(2) * t512 + t403;
t399 = -pkin(2) * t456 - t530;
t398 = -t517 + t427;
t396 = -t541 - t516;
t387 = pkin(1) * t419 - qJ(2) * t415;
t385 = (-t429 * t468 + t431 * t466) * qJD(4);
t384 = (-t429 * t466 - t431 * t468) * qJD(4);
t380 = pkin(2) * t435 + t496;
t379 = pkin(2) * t436 - t389;
t376 = t468 * t398 - t466 * t516;
t375 = t466 * t398 + t468 * t516;
t374 = -t466 * t396 + t468 * t517;
t373 = t468 * t396 + t466 * t517;
t371 = -t466 * t413 + t547;
t370 = t468 * t412 - t525;
t368 = t468 * t413 + t548;
t367 = t466 * t412 + t522;
t365 = qJ(2) * t456 - t536 * t435 - t403;
t364 = (-t408 + t463) * t464 - t536 * t436;
t363 = -t468 * t395 - t466 * t397;
t361 = -t466 * t395 + t468 * t397;
t353 = pkin(2) * t542 + t355;
t352 = -t464 * t384 + t465 * t385;
t351 = t465 * t384 + t464 * t385;
t345 = -qJ(2) * t542 - t536 * t438 - t354;
t343 = -t464 * t375 + t465 * t376;
t342 = -t464 * t373 + t465 * t374;
t341 = t465 * t375 + t464 * t376;
t340 = t465 * t373 + t464 * t374;
t338 = -t464 * t369 + t465 * t372;
t337 = -t464 * t368 + t465 * t371;
t336 = -t464 * t367 + t465 * t370;
t334 = t465 * t368 + t464 * t371;
t333 = t465 * t367 + t464 * t370;
t331 = -t464 * t361 + t465 * t363;
t330 = -t464 * t360 + t465 * t362;
t329 = t465 * t361 + t464 * t363;
t326 = -qJ(2) * t355 + t539;
t325 = -t464 * t357 + t465 * t358;
t323 = t536 * t355 - t538;
t322 = -qJ(2) * t408 + t536 * t354;
t314 = -qJ(2) * t330 - t504;
t313 = -qJ(2) * t338 - t477;
t312 = t465 * t321 - t532;
t310 = -qJ(2) * t325 - t484;
t309 = t536 * t338 + t480;
t308 = qJ(2) * t397 + t536 * t335 + t500;
t307 = t536 * t325 + t481;
t306 = qJ(2) * t395 + t536 * t324 + t501;
t305 = t536 * t330 + t482;
t304 = qJ(2) * t382 + t536 * t328 + t502;
t303 = -qJ(2) * t312 - t505;
t302 = t536 * t312 + t478;
t301 = -qJ(2) * t386 + t536 * t311 + t488;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t442, 0, -t443, 0, -t495, -t494, -t490, -pkin(4) * t490, 0, -t442, t443, 0, 0, 0, t491, t495, t494, pkin(4) * t491 + (-t467 * pkin(1) + t469 * qJ(2)) * g(3), t411, -t467 * t439 - t469 * t440, t405, -t411, -t486, 0, -pkin(4) * t485 - t469 * t379 + t467 * t400, -pkin(4) * t404 - t469 * t380 + t467 * t399, -pkin(2) * t521 + t467 * t353 - pkin(4) * (-t467 * t542 + t521), t469 * t326 - t467 * t323 - pkin(4) * (-t469 * t354 - t467 * t408), t467 * t341 + t508, t467 * t329 + t469 * t401, t467 * t334 + t469 * t427, t467 * t340 - t508, t467 * t333 - t469 * t541, t469 * qJDD(4) + t467 * t351, t469 * t310 - t467 * t307 - pkin(4) * (-t469 * t324 + t467 * t395), t469 * t313 - t467 * t309 - pkin(4) * (-t469 * t335 + t467 * t397), t469 * t314 - t467 * t305 - pkin(4) * (-t469 * t328 + t467 * t382), t469 * t303 - t467 * t302 - pkin(4) * (-t469 * t311 - t467 * t386); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t443, 0, t442, 0, t494, -t495, t497, pkin(4) * t497, 0, -t443, -t442, 0, 0, 0, t498, -t494, t495, pkin(4) * t498 + (t469 * pkin(1) + t467 * qJ(2)) * g(3), -t410, t469 * t439 - t467 * t440, t404, t410, -t485, 0, pkin(4) * t486 - t467 * t379 - t469 * t400, pkin(4) * t405 - t467 * t380 - t469 * t399, -pkin(2) * t524 - t469 * t353 + pkin(4) * (-t469 * t542 - t524), t467 * t326 + t469 * t323 + pkin(4) * (t467 * t354 - t469 * t408), -t469 * t341 + t509, -t469 * t329 + t467 * t401, -t469 * t334 + t467 * t427, -t469 * t340 - t509, -t469 * t333 - t467 * t541, t467 * qJDD(4) - t469 * t351, t467 * t310 + t469 * t307 + pkin(4) * (t467 * t324 + t469 * t395), t467 * t313 + t469 * t309 + pkin(4) * (t467 * t335 + t469 * t397), t467 * t314 + t469 * t305 + pkin(4) * (t467 * t328 + t469 * t382), t467 * t303 + t469 * t302 + pkin(4) * (t467 * t311 - t469 * t386); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t444, t445, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t434, t428, t387, t513, t446, 0, t514, 0, 0, t364, t365, t345, t322, t343, t331, t337, t342, t336, t352, t306, t308, t304, t301; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t471, 0, 0, -g(3), -t444, 0, 0, -qJDD(1), t471, 0, 0, 0, -t419, 0, g(3), qJ(2) * g(3), t448, -t440, t456, -t448, -t512, 0, -t379, -t380, -t537, t326, t534, t401, t427, -t534, -t541, qJDD(4), t310, t313, t314, t303; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t471, 0, qJDD(1), 0, g(3), 0, -t445, 0, 0, -t471, -qJDD(1), 0, 0, 0, -t415, -g(3), 0, pkin(1) * g(3), -t447, t439, t435, t447, -t436, 0, -t400, -t399, -t353, t323, -t341, -t329, -t334, -t340, -t333, -t351, t307, t309, t305, t302; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t444, t445, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t434, t428, t387, t513, t446, 0, t514, 0, 0, t364, t365, t345, t322, t343, t331, t337, t342, t336, t352, t306, t308, t304, t301; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t419, -t415, 0, t513, t446, 0, t514, 0, 0, qJ(3) * t436 - t530, qJ(3) * t435 - t403, qJ(3) * t438 - t354, -qJ(3) * t354, t343, t331, t337, t342, t336, t352, -qJ(3) * t324 + t501, -qJ(3) * t335 + t500, -qJ(3) * t328 + t502, -qJ(3) * t311 + t488; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t471, 0, 0, 0, t419, 0, -g(3), 0, -t448, t440, -t456, t448, t512, 0, t379, t380, t537, -t539, -t534, -t401, -t427, t534, t541, -qJDD(4), t484, t477, t504, t505; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t471, qJDD(1), 0, 0, 0, t415, g(3), 0, 0, t447, -t439, -t435, -t447, t436, 0, t400, t399, t353, qJ(3) * t355 + t538, t341, t329, t334, t340, t333, t351, qJ(3) * t325 - t481, qJ(3) * t338 - t480, qJ(3) * t330 - t482, qJ(3) * t312 - t478; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t456, -t512, -t448, 0, t533, 0, 0, -t408, -t389, 0, t376, t363, t371, t374, t370, t385, t344, t348, t317, -pkin(5) * t320; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t456, -t462 * t471, -t512, t448, 0, t408, 0, t496, 0, t375, t361, t368, t373, t367, t384, t327, t332, t315, t318; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t448, -t440, t456, -t448, -t512, 0, t389, -t496, 0, 0, t534, t401, t427, -t534, -t541, qJDD(4), t492, t487, t359, t319; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t398, -t395, t544, t517, t412, -t517, 0, -t386, t349, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t516, t397, t413, t396, t393, -t516, t386, 0, t350, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t534, t401, t427, -t534, -t541, qJDD(4), -t349, -t350, 0, 0;];
m_new_reg = t1;
