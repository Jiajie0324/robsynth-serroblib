% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RPRR8
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:55
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RPRR8_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RPRR8_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RPRR8_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RPRR8_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RPRR8_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4RPRR8_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:55:21
% EndTime: 2019-12-31 16:55:24
% DurationCPUTime: 3.69s
% Computational Cost: add. (9599->356), mult. (19372->432), div. (0->0), fcn. (11816->6), ass. (0->228)
t525 = sin(qJ(4));
t520 = qJDD(3) + qJDD(4);
t526 = sin(qJ(3));
t528 = cos(qJ(4));
t529 = cos(qJ(3));
t486 = (-t525 * t529 - t526 * t528) * qJD(1);
t577 = qJD(1) * t529;
t488 = -t525 * t526 * qJD(1) + t528 * t577;
t599 = t488 * t486;
t605 = t520 + t599;
t608 = t525 * t605;
t607 = t528 * t605;
t576 = qJD(1) * qJD(3);
t569 = t529 * t576;
t575 = t526 * qJDD(1);
t495 = -t569 - t575;
t515 = t529 * qJDD(1);
t570 = t526 * t576;
t496 = t515 - t570;
t439 = t486 * qJD(4) + t525 * t495 + t528 * t496;
t521 = qJD(3) + qJD(4);
t598 = t521 * t486;
t606 = t439 + t598;
t532 = qJD(1) ^ 2;
t527 = sin(qJ(1));
t530 = cos(qJ(1));
t505 = t527 * g(1) - t530 * g(2);
t555 = qJDD(2) - t505;
t543 = -t532 * qJ(2) + t555;
t604 = pkin(5) + pkin(1);
t535 = -t604 * qJDD(1) + t543;
t534 = t529 * t535;
t453 = t526 * g(3) + t534;
t454 = t529 * g(3) - t526 * t535;
t428 = t529 * t453 - t526 * t454;
t484 = t486 ^ 2;
t485 = t488 ^ 2;
t519 = t521 ^ 2;
t603 = pkin(2) * t428;
t522 = qJDD(1) * qJ(2);
t506 = t530 * g(1) + t527 * g(2);
t539 = -0.2e1 * qJD(2) * qJD(1) + t506;
t536 = -t522 + t539;
t469 = t604 * t532 + t536;
t602 = pkin(2) * t469;
t523 = t526 ^ 2;
t524 = t529 ^ 2;
t578 = t523 + t524;
t498 = t578 * qJDD(1);
t601 = pkin(2) * t498;
t600 = qJDD(1) * pkin(1);
t597 = t521 * t525;
t596 = t521 * t528;
t595 = t523 * t532;
t594 = t524 * t532;
t548 = -qJD(3) * pkin(3) + pkin(6) * t577;
t437 = t495 * pkin(3) + t548 * t577 + (pkin(6) * t523 + t604) * t532 + t536;
t593 = t525 * t437;
t446 = -t599 + t520;
t592 = t525 * t446;
t580 = t529 * t532;
t435 = t534 - t496 * pkin(6) + qJDD(3) * pkin(3) + (-pkin(3) * t580 - pkin(6) * t576 + g(3)) * t526;
t436 = -pkin(3) * t595 + t495 * pkin(6) + qJD(3) * t548 - t454;
t400 = -t528 * t435 + t525 * t436;
t401 = t525 * t435 + t528 * t436;
t371 = -t528 * t400 + t525 * t401;
t591 = t526 * t371;
t589 = t526 * t469;
t512 = t526 * t580;
t503 = qJDD(3) + t512;
t588 = t526 * t503;
t504 = qJDD(3) - t512;
t587 = t526 * t504;
t586 = t527 * t498;
t585 = t528 * t437;
t584 = t528 * t446;
t583 = t529 * t371;
t455 = t529 * t469;
t582 = t529 * t503;
t581 = t529 * t504;
t579 = t530 * t498;
t574 = t527 * qJDD(1);
t573 = t530 * qJDD(1);
t572 = t527 * t599;
t571 = t530 * t599;
t372 = t525 * t400 + t528 * t401;
t359 = t526 * t372 + t583;
t370 = pkin(3) * t371;
t568 = -pkin(2) * t359 - t370;
t561 = t528 * t495 - t525 * t496;
t422 = (-qJD(4) + t521) * t488 + t561;
t425 = t439 - t598;
t385 = t525 * t422 - t528 * t425;
t387 = t528 * t422 + t525 * t425;
t367 = t529 * t385 + t526 * t387;
t383 = pkin(3) * t385;
t567 = -pkin(2) * t367 - t383;
t440 = -t484 - t485;
t362 = -pkin(3) * t440 + pkin(6) * t387 + t372;
t364 = -pkin(6) * t385 - t371;
t566 = -t526 * t362 + t529 * t364;
t444 = -t519 - t484;
t413 = t528 * t444 - t608;
t476 = t521 * t488;
t545 = t488 * qJD(4) - t561;
t420 = t476 + t545;
t373 = -pkin(3) * t420 + pkin(6) * t413 + t585;
t412 = t525 * t444 + t607;
t391 = -pkin(6) * t412 - t593;
t565 = -t526 * t373 + t529 * t391;
t466 = -t485 - t519;
t427 = -t525 * t466 - t584;
t374 = -pkin(3) * t606 + pkin(6) * t427 - t593;
t426 = t528 * t466 - t592;
t399 = -pkin(6) * t426 - t585;
t564 = -t526 * t374 + t529 * t399;
t477 = t532 * pkin(1) + t536;
t478 = -t543 + t600;
t562 = -t530 * t477 - t527 * t478;
t560 = -t527 * t505 - t530 * t506;
t559 = t527 * t512;
t558 = t530 * t512;
t499 = -t527 * t532 + t573;
t557 = pkin(4) * t499 + t527 * g(3);
t500 = t530 * t532 + t574;
t556 = -pkin(4) * t500 + t530 * g(3);
t554 = pkin(3) * t412 - t400;
t494 = 0.2e1 * t569 + t575;
t553 = pkin(2) * t494 - t455;
t497 = t515 - 0.2e1 * t570;
t552 = pkin(2) * t497 + t589;
t429 = -t526 * t453 - t529 * t454;
t551 = t527 * t477 - t530 * t478;
t550 = t530 * t505 - t527 * t506;
t531 = qJD(3) ^ 2;
t510 = -t531 - t594;
t460 = t529 * t510 - t588;
t549 = -pkin(2) * t460 - t454;
t365 = pkin(3) * t437 + pkin(6) * t372;
t547 = -pkin(6) * t583 - t526 * t365;
t546 = pkin(3) * t426 - t401;
t375 = t529 * t412 + t526 * t413;
t544 = -pkin(2) * t375 - t554;
t542 = pkin(2) * t440 - t529 * t362 - t526 * t364;
t541 = pkin(2) * t420 - t529 * t373 - t526 * t391;
t540 = pkin(2) * t606 - t529 * t374 - t526 * t399;
t538 = -pkin(2) * t437 + pkin(6) * t591 - t529 * t365;
t389 = t529 * t426 + t526 * t427;
t537 = -pkin(2) * t389 - t546;
t508 = -t531 - t595;
t458 = t526 * t508 + t581;
t533 = -pkin(2) * t458 - t453;
t509 = t531 - t594;
t507 = -t531 + t595;
t502 = (-t523 + t524) * t532;
t501 = t578 * t532;
t492 = t578 * t576;
t491 = t555 - 0.2e1 * t600;
t483 = 0.2e1 * t522 - t539;
t473 = -t485 + t519;
t472 = t484 - t519;
t471 = t526 * t496 + t524 * t576;
t470 = t529 * t495 + t523 * t576;
t465 = -t526 * t510 - t582;
t464 = -t526 * t509 + t581;
t463 = (t496 - t570) * t529;
t462 = t529 * t508 - t587;
t461 = t529 * t507 - t588;
t459 = t529 * t509 + t587;
t457 = t526 * t507 + t582;
t456 = (-t495 + t569) * t526;
t452 = -t529 * t494 - t526 * t497;
t451 = -t526 * t494 + t529 * t497;
t448 = t485 - t484;
t443 = pkin(1) * t478 - qJ(2) * t477;
t442 = (t486 * t528 + t488 * t525) * t521;
t441 = (t486 * t525 - t488 * t528) * t521;
t433 = t528 * t472 - t592;
t432 = -t525 * t473 + t607;
t431 = t525 * t472 + t584;
t430 = t528 * t473 + t608;
t421 = -t476 + t545;
t418 = t528 * t439 - t488 * t597;
t417 = t525 * t439 + t488 * t596;
t416 = -t486 * t596 + t525 * t545;
t415 = -t486 * t597 - t528 * t545;
t414 = pkin(2) * t501 + t429;
t410 = -qJ(2) * t465 - t549;
t409 = -qJ(2) * t462 - t533;
t408 = -t604 * t462 + t553;
t407 = -t604 * t465 + t552;
t406 = qJ(2) * t497 - t604 * t460 - t455;
t405 = qJ(2) * t494 - t604 * t458 - t589;
t404 = -t526 * t441 + t529 * t442;
t403 = t529 * t441 + t526 * t442;
t402 = -qJ(2) * t501 + t604 * t498 - t428;
t396 = -qJ(2) * t429 + t603;
t395 = -t526 * t431 + t529 * t433;
t394 = -t526 * t430 + t529 * t432;
t393 = t529 * t431 + t526 * t433;
t392 = t529 * t430 + t526 * t432;
t390 = -t526 * t426 + t529 * t427;
t386 = -t528 * t420 - t525 * t606;
t384 = -t525 * t420 + t528 * t606;
t382 = -t604 * t429 - t602;
t381 = -t526 * t417 + t529 * t418;
t380 = -t526 * t415 + t529 * t416;
t379 = t529 * t417 + t526 * t418;
t378 = t529 * t415 + t526 * t416;
t377 = -qJ(2) * t469 - t604 * t428;
t376 = -t526 * t412 + t529 * t413;
t369 = -t526 * t385 + t529 * t387;
t368 = -t526 * t384 + t529 * t386;
t366 = t529 * t384 + t526 * t386;
t361 = -qJ(2) * t390 - t537;
t360 = t529 * t372 - t591;
t358 = -qJ(2) * t376 - t544;
t357 = -t604 * t390 + t540;
t356 = qJ(2) * t606 - t604 * t389 + t564;
t355 = -qJ(2) * t369 - t567;
t354 = -t604 * t376 + t541;
t353 = qJ(2) * t420 - t604 * t375 + t565;
t352 = -qJ(2) * t360 - t568;
t351 = -t604 * t369 + t542;
t350 = qJ(2) * t440 - t604 * t367 + t566;
t349 = -t604 * t360 + t538;
t348 = -qJ(2) * t437 - t604 * t359 + t547;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t499, 0, -t500, 0, -t557, -t556, -t550, -pkin(4) * t550, 0, -t499, t500, 0, 0, 0, t551, t557, t556, pkin(4) * t551 + (-t527 * pkin(1) + t530 * qJ(2)) * g(3), t527 * t471 + t558, t527 * t451 + t530 * t502, t527 * t459 + t529 * t573, t527 * t470 - t558, t527 * t457 - t526 * t573, t530 * qJDD(3) - t527 * t492, t530 * t409 - t527 * t408 - pkin(4) * (-t530 * t458 + t527 * t494), t530 * t410 - t527 * t407 - pkin(4) * (-t530 * t460 + t527 * t497), -pkin(2) * t579 + t527 * t414 - pkin(4) * (-t527 * t501 + t579), t530 * t396 - t527 * t382 - pkin(4) * (-t530 * t428 - t527 * t469), t527 * t379 - t571, t527 * t366 + t530 * t448, t527 * t392 + t530 * t425, t527 * t378 + t571, t527 * t393 - t530 * t421, t527 * t403 + t530 * t520, t530 * t358 - t527 * t354 - pkin(4) * (-t530 * t375 + t527 * t420), t530 * t361 - t527 * t357 - pkin(4) * (-t530 * t389 + t527 * t606), t530 * t355 - t527 * t351 - pkin(4) * (-t530 * t367 + t527 * t440), t530 * t352 - t527 * t349 - pkin(4) * (-t530 * t359 - t527 * t437); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t500, 0, t499, 0, t556, -t557, t560, pkin(4) * t560, 0, -t500, -t499, 0, 0, 0, t562, -t556, t557, pkin(4) * t562 + (t530 * pkin(1) + t527 * qJ(2)) * g(3), -t530 * t471 + t559, -t530 * t451 + t527 * t502, -t530 * t459 + t527 * t515, -t530 * t470 - t559, -t530 * t457 - t526 * t574, t527 * qJDD(3) + t530 * t492, t527 * t409 + t530 * t408 + pkin(4) * (t527 * t458 + t530 * t494), t527 * t410 + t530 * t407 + pkin(4) * (t527 * t460 + t530 * t497), -pkin(2) * t586 - t530 * t414 + pkin(4) * (-t530 * t501 - t586), t527 * t396 + t530 * t382 + pkin(4) * (t527 * t428 - t530 * t469), -t530 * t379 - t572, -t530 * t366 + t527 * t448, -t530 * t392 + t527 * t425, -t530 * t378 + t572, -t530 * t393 - t527 * t421, -t530 * t403 + t527 * t520, t527 * t358 + t530 * t354 + pkin(4) * (t527 * t375 + t530 * t420), t527 * t361 + t530 * t357 + pkin(4) * (t527 * t389 + t530 * t606), t527 * t355 + t530 * t351 + pkin(4) * (t527 * t367 + t530 * t440), t527 * t352 + t530 * t349 + pkin(4) * (t527 * t359 - t530 * t437); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t505, t506, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t491, t483, t443, t463, t452, t464, t456, t461, 0, t405, t406, t402, t377, t381, t368, t394, t380, t395, t404, t353, t356, t350, t348; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t532, 0, 0, -g(3), -t505, 0, 0, -qJDD(1), t532, 0, 0, 0, -t478, 0, g(3), qJ(2) * g(3), t512, t502, t515, -t512, -t575, qJDD(3), t409, t410, -t601, t396, -t599, t448, t425, t599, -t421, t520, t358, t361, t355, t352; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t532, 0, qJDD(1), 0, g(3), 0, -t506, 0, 0, -t532, -qJDD(1), 0, 0, 0, -t477, -g(3), 0, pkin(1) * g(3), -t471, -t451, -t459, -t470, -t457, t492, t408, t407, -t414, t382, -t379, -t366, -t392, -t378, -t393, -t403, t354, t357, t351, t349; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t505, t506, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t491, t483, t443, t463, t452, t464, t456, t461, 0, t405, t406, t402, t377, t381, t368, t394, t380, t395, t404, t353, t356, t350, t348; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t478, -t477, 0, t463, t452, t464, t456, t461, 0, -pkin(5) * t458 - t589, -pkin(5) * t460 - t455, pkin(5) * t498 - t428, -pkin(5) * t428, t381, t368, t394, t380, t395, t404, -pkin(5) * t375 + t565, -pkin(5) * t389 + t564, -pkin(5) * t367 + t566, -pkin(5) * t359 + t547; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t532, 0, 0, 0, t478, 0, -g(3), 0, -t512, -t502, -t515, t512, t575, -qJDD(3), t533, t549, t601, -t603, t599, -t448, -t425, -t599, t421, -t520, t544, t537, t567, t568; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t532, qJDD(1), 0, 0, 0, t477, g(3), 0, 0, t471, t451, t459, t470, t457, -t492, pkin(5) * t462 - t553, pkin(5) * t465 - t552, t414, pkin(5) * t429 + t602, t379, t366, t392, t378, t393, t403, pkin(5) * t376 - t541, pkin(5) * t390 - t540, pkin(5) * t369 - t542, pkin(5) * t360 - t538; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t496, -t494, t504, t570, t507, -t570, 0, -t469, -t453, 0, t418, t386, t432, t416, t433, t442, t391, t399, t364, -pkin(6) * t371; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t569, t497, t509, t495, t503, -t569, t469, 0, -t454, 0, t417, t384, t430, t415, t431, t441, t373, t374, t362, t365; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t512, t502, t515, -t512, -t575, qJDD(3), t453, t454, 0, 0, -t599, t448, t425, t599, -t421, t520, t554, t546, t383, t370; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t439, -t420, t605, -t598, t472, t598, 0, -t437, t400, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t476, t606, t473, -t545, t446, -t476, t437, 0, t401, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t599, t448, t425, t599, -t421, t520, -t400, -t401, 0, 0;];
m_new_reg = t1;
