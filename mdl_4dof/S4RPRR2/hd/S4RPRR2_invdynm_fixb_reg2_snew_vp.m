% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RPRR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:48
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RPRR2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RPRR2_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RPRR2_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RPRR2_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RPRR2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RPRR2_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:48:18
% EndTime: 2019-12-31 16:48:21
% DurationCPUTime: 3.87s
% Computational Cost: add. (11423->292), mult. (18042->399), div. (0->0), fcn. (10718->8), ass. (0->206)
t552 = qJD(1) + qJD(3);
t550 = t552 ^ 2;
t562 = cos(qJ(3));
t551 = qJDD(1) + qJDD(3);
t559 = sin(qJ(3));
t597 = t559 * t551;
t517 = t562 * t550 + t597;
t591 = t562 * t551;
t520 = t559 * t550 - t591;
t556 = sin(pkin(7));
t557 = cos(pkin(7));
t463 = t557 * t517 - t556 * t520;
t555 = g(3) - qJDD(2);
t496 = pkin(5) * t517 - t562 * t555;
t619 = pkin(5) * t520 - t559 * t555;
t416 = qJ(2) * t463 + t557 * t496 - t556 * t619;
t560 = sin(qJ(1));
t563 = cos(qJ(1));
t467 = t556 * t517 + t557 * t520;
t618 = t563 * t463 - t560 * t467;
t625 = qJ(2) * t467 + t556 * t496 + t557 * t619;
t635 = pkin(4) * t618 + t563 * t416 - t560 * t625;
t626 = t560 * t463 + t563 * t467;
t634 = pkin(4) * t626 + t560 * t416 + t563 * t625;
t539 = t560 * g(1) - t563 * g(2);
t526 = qJDD(1) * pkin(1) + t539;
t540 = t563 * g(1) + t560 * g(2);
t565 = qJD(1) ^ 2;
t527 = -t565 * pkin(1) - t540;
t474 = t556 * t526 + t557 * t527;
t472 = -t565 * pkin(2) + t474;
t473 = -t557 * t526 + t556 * t527;
t567 = qJDD(1) * pkin(2) - t473;
t432 = t559 * t472 - t562 * t567;
t433 = t562 * t472 + t559 * t567;
t581 = t559 * t432 + t562 * t433;
t391 = t562 * t432 - t559 * t433;
t601 = t557 * t391;
t372 = -t556 * t581 + t601;
t602 = t556 * t391;
t620 = t557 * t581 + t602;
t632 = t560 * t372 + t563 * t620;
t631 = t563 * t372 - t560 * t620;
t580 = t556 * t473 + t557 * t474;
t437 = t557 * t473 - t556 * t474;
t589 = t563 * t437;
t622 = -t560 * t580 + t589;
t595 = t560 * t437;
t621 = t563 * t580 + t595;
t530 = t556 * qJDD(1) + t557 * t565;
t500 = qJ(2) * t530 - t557 * t555;
t531 = t557 * qJDD(1) - t556 * t565;
t569 = -qJ(2) * t531 - t556 * t555;
t607 = t563 * t530 + t560 * t531;
t617 = pkin(4) * t607 + t563 * t500 - t560 * t569;
t479 = -t560 * t530 + t563 * t531;
t616 = -pkin(4) * t479 + t560 * t500 + t563 * t569;
t425 = -t550 * pkin(3) + t551 * pkin(6) + t433;
t558 = sin(qJ(4));
t561 = cos(qJ(4));
t407 = t558 * t425 + t561 * t555;
t408 = t561 * t425 - t558 * t555;
t386 = t558 * t407 + t561 * t408;
t605 = pkin(1) * t555;
t553 = t558 ^ 2;
t603 = t553 * t550;
t424 = -t551 * pkin(3) - t550 * pkin(6) + t432;
t421 = t558 * t424;
t538 = t561 * t550 * t558;
t528 = qJDD(4) + t538;
t600 = t558 * t528;
t529 = qJDD(4) - t538;
t599 = t558 * t529;
t598 = t558 * t551;
t422 = t561 * t424;
t592 = t561 * t529;
t543 = t561 * t551;
t588 = -pkin(3) * t424 + pkin(6) * t386;
t554 = t561 ^ 2;
t587 = t553 + t554;
t586 = qJD(4) * t552;
t564 = qJD(4) ^ 2;
t535 = -t564 - t603;
t488 = -t558 * t535 - t592;
t542 = t561 * t586;
t509 = 0.2e1 * t542 + t598;
t585 = -pkin(3) * t509 + pkin(6) * t488 + t421;
t544 = t554 * t550;
t537 = -t544 - t564;
t486 = t561 * t537 - t600;
t582 = t558 * t586;
t512 = t543 - 0.2e1 * t582;
t584 = pkin(3) * t512 + pkin(6) * t486 - t422;
t379 = t559 * t386 - t562 * t424;
t583 = pkin(2) * t379 + t588;
t578 = -t560 * t539 - t563 * t540;
t577 = t559 * t538;
t576 = t562 * t538;
t515 = t587 * t551;
t521 = t544 + t603;
t575 = pkin(3) * t521 + pkin(6) * t515 + t386;
t446 = t559 * t488 - t562 * t509;
t574 = pkin(2) * t446 + t585;
t445 = t559 * t486 + t562 * t512;
t573 = pkin(2) * t445 + t584;
t533 = t563 * qJDD(1) - t560 * t565;
t572 = -pkin(4) * t533 - t560 * g(3);
t571 = -pkin(2) * t520 - t432;
t469 = t559 * t515 + t562 * t521;
t570 = pkin(2) * t469 + t575;
t385 = t561 * t407 - t558 * t408;
t568 = t563 * t539 - t560 * t540;
t566 = -pkin(2) * t517 - t433;
t536 = t544 - t564;
t534 = t564 - t603;
t532 = t560 * qJDD(1) + t563 * t565;
t522 = -t544 + t603;
t516 = t561 * t528;
t511 = t543 - t582;
t510 = t542 + t598;
t505 = -pkin(4) * t532 + t563 * g(3);
t504 = t587 * t586;
t492 = t559 * qJDD(4) + t562 * t504;
t491 = -t562 * qJDD(4) + t559 * t504;
t490 = t561 * t510 - t553 * t586;
t489 = -t558 * t511 - t554 * t586;
t487 = -t558 * t534 + t516;
t485 = t561 * t536 - t599;
t484 = t561 * t535 - t599;
t483 = t561 * t534 + t600;
t482 = t558 * t537 + t516;
t481 = t558 * t536 + t592;
t476 = (t510 + t542) * t558;
t475 = (t511 - t582) * t561;
t470 = t562 * t515 - t559 * t521;
t460 = -t558 * t509 + t561 * t512;
t459 = t561 * t509 + t558 * t512;
t458 = t562 * t487 + t558 * t597;
t457 = t562 * t485 + t559 * t543;
t456 = t559 * t487 - t558 * t591;
t455 = t559 * t485 - t561 * t591;
t454 = t562 * t490 - t577;
t453 = t562 * t489 + t577;
t452 = t559 * t490 + t576;
t451 = t559 * t489 - t576;
t450 = pkin(1) * t531 - t473;
t449 = -pkin(1) * t530 - t474;
t448 = t562 * t488 + t559 * t509;
t447 = t562 * t486 - t559 * t512;
t442 = -t556 * t491 + t557 * t492;
t441 = t557 * t491 + t556 * t492;
t440 = t562 * t460 + t559 * t522;
t439 = t559 * t460 - t562 * t522;
t434 = pkin(1) * t437;
t431 = qJ(2) * t580 + t605;
t429 = -t556 * t469 + t557 * t470;
t428 = t557 * t469 + t556 * t470;
t420 = -t556 * t456 + t557 * t458;
t419 = -t556 * t455 + t557 * t457;
t418 = t557 * t456 + t556 * t458;
t417 = t557 * t455 + t556 * t457;
t412 = -t556 * t452 + t557 * t454;
t411 = -t556 * t451 + t557 * t453;
t410 = t557 * t452 + t556 * t454;
t409 = t557 * t451 + t556 * t453;
t404 = -t556 * t446 + t557 * t448;
t403 = -t556 * t445 + t557 * t447;
t402 = t557 * t446 + t556 * t448;
t401 = t557 * t445 + t556 * t447;
t400 = -pkin(6) * t484 + t422;
t399 = -pkin(6) * t482 + t421;
t398 = -pkin(3) * t484 + t408;
t397 = -pkin(3) * t482 + t407;
t396 = -t556 * t439 + t557 * t440;
t395 = t557 * t439 + t556 * t440;
t394 = -pkin(1) * t467 + t571;
t393 = -pkin(1) * t463 + t566;
t388 = pkin(2) * t391;
t387 = pkin(2) * t555 + pkin(5) * t581;
t382 = -pkin(5) * t469 + t562 * t385;
t381 = pkin(5) * t470 + t559 * t385;
t380 = t562 * t386 + t559 * t424;
t377 = pkin(1) * t402 + t574;
t376 = pkin(1) * t401 + t573;
t375 = -pkin(5) * t446 - t559 * t398 + t562 * t400;
t374 = -pkin(5) * t445 - t559 * t397 + t562 * t399;
t369 = -pkin(2) * t484 + pkin(5) * t448 + t562 * t398 + t559 * t400;
t368 = -pkin(2) * t482 + pkin(5) * t447 + t562 * t397 + t559 * t399;
t367 = pkin(1) * t428 + t570;
t366 = -pkin(1) * t372 - t388;
t365 = -qJ(2) * t428 - t556 * t381 + t557 * t382;
t364 = qJ(2) * t429 + t557 * t381 + t556 * t382;
t363 = -t556 * t379 + t557 * t380;
t362 = t557 * t379 + t556 * t380;
t361 = pkin(5) * t601 + qJ(2) * t372 - t556 * t387;
t360 = pkin(5) * t602 + qJ(2) * t620 + t557 * t387 + t605;
t359 = -pkin(5) * t379 - (pkin(3) * t559 - pkin(6) * t562) * t385;
t358 = -qJ(2) * t402 - t556 * t369 + t557 * t375;
t357 = -qJ(2) * t401 - t556 * t368 + t557 * t374;
t356 = -pkin(1) * t484 + qJ(2) * t404 + t557 * t369 + t556 * t375;
t355 = -pkin(1) * t482 + qJ(2) * t403 + t557 * t368 + t556 * t374;
t354 = pkin(5) * t380 - (-pkin(3) * t562 - pkin(6) * t559 - pkin(2)) * t385;
t353 = pkin(1) * t362 + t583;
t352 = -qJ(2) * t362 - t556 * t354 + t557 * t359;
t351 = pkin(1) * t385 + qJ(2) * t363 + t557 * t354 + t556 * t359;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t533, 0, -t532, 0, t572, -t505, -t568, -pkin(4) * t568, 0, 0, t479, 0, -t607, 0, t616, t617, t622, pkin(4) * t622 + qJ(2) * t589 - t560 * t431, 0, 0, -t626, 0, -t618, 0, t634, t635, t631, pkin(4) * t631 - t560 * t360 + t563 * t361, -t410 * t560 + t412 * t563, -t395 * t560 + t396 * t563, -t418 * t560 + t420 * t563, -t409 * t560 + t411 * t563, -t417 * t560 + t419 * t563, -t441 * t560 + t442 * t563, t563 * t357 - t560 * t355 - pkin(4) * (t401 * t563 + t403 * t560), t563 * t358 - t560 * t356 - pkin(4) * (t402 * t563 + t404 * t560), t563 * t365 - t560 * t364 - pkin(4) * (t428 * t563 + t429 * t560), t563 * t352 - t560 * t351 - pkin(4) * (t362 * t563 + t363 * t560); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t532, 0, t533, 0, t505, t572, t578, pkin(4) * t578, 0, 0, t607, 0, t479, 0, -t617, t616, t621, pkin(4) * t621 + qJ(2) * t595 + t563 * t431, 0, 0, t618, 0, -t626, 0, -t635, t634, t632, pkin(4) * t632 + t563 * t360 + t560 * t361, t410 * t563 + t412 * t560, t395 * t563 + t396 * t560, t418 * t563 + t420 * t560, t409 * t563 + t411 * t560, t417 * t563 + t419 * t560, t441 * t563 + t442 * t560, t560 * t357 + t563 * t355 + pkin(4) * (-t401 * t560 + t403 * t563), t560 * t358 + t563 * t356 + pkin(4) * (-t402 * t560 + t404 * t563), t560 * t365 + t563 * t364 + pkin(4) * (-t428 * t560 + t429 * t563), t560 * t352 + t563 * t351 + pkin(4) * (-t362 * t560 + t363 * t563); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t539, t540, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t450, t449, 0, -t434, 0, 0, 0, 0, 0, t551, t394, t393, 0, t366, t476, t459, t483, t475, t481, 0, t376, t377, t367, t353; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t565, 0, 0, -g(3), -t539, 0, 0, 0, t531, 0, -t530, 0, t569, t500, t437, qJ(2) * t437, 0, 0, -t467, 0, -t463, 0, t625, t416, t372, t361, t412, t396, t420, t411, t419, t442, t357, t358, t365, t352; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t565, 0, qJDD(1), 0, g(3), 0, -t540, 0, 0, 0, t530, 0, t531, 0, -t500, t569, t580, t431, 0, 0, t463, 0, -t467, 0, -t416, t625, t620, t360, t410, t395, t418, t409, t417, t441, t355, t356, t364, t351; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t539, t540, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t450, t449, 0, -t434, 0, 0, 0, 0, 0, t551, t394, t393, 0, t366, t476, t459, t483, t475, t481, 0, t376, t377, t367, t353; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t565, 0, 0, -t555, t473, 0, 0, 0, -t520, 0, -t517, 0, t619, t496, t391, pkin(5) * t391, t454, t440, t458, t453, t457, t492, t374, t375, t382, t359; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t565, 0, qJDD(1), 0, t555, 0, t474, 0, 0, 0, t517, 0, -t520, 0, -t496, t619, t581, t387, t452, t439, t456, t451, t455, t491, t368, t369, t381, t354; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t473, -t474, 0, 0, 0, 0, 0, 0, 0, t551, t571, t566, 0, -t388, t476, t459, t483, t475, t481, 0, t573, t574, t570, t583; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t551, 0, -t550, 0, 0, -t555, t432, 0, t490, t460, t487, t489, t485, t504, t399, t400, t385, pkin(6) * t385; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t550, 0, t551, 0, t555, 0, t433, 0, t538, -t522, -t598, -t538, -t543, -qJDD(4), t397, t398, 0, pkin(3) * t385; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t551, -t432, -t433, 0, 0, t476, t459, t483, t475, t481, 0, t584, t585, t575, t588; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t510, t512, t528, -t542, t536, t542, 0, t424, t407, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t582, t509, t534, t511, t529, -t582, -t424, 0, t408, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t538, t522, t598, t538, t543, qJDD(4), -t407, -t408, 0, 0;];
m_new_reg = t1;
