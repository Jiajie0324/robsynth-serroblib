% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S4RRPR7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4,theta3]';
%
% Output:
% f_new_reg [(3*5)x(5*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:07
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S4RRPR7_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRPR7_invdynf_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRPR7_invdynf_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRPR7_invdynf_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRPR7_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RRPR7_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:07:00
% EndTime: 2019-12-31 17:07:02
% DurationCPUTime: 1.42s
% Computational Cost: add. (5091->179), mult. (11848->245), div. (0->0), fcn. (8071->8), ass. (0->142)
t1041 = sin(pkin(7));
t1042 = cos(pkin(7));
t1048 = cos(qJ(2));
t1074 = qJD(1) * t1048;
t1045 = sin(qJ(2));
t1075 = qJD(1) * t1045;
t1010 = t1041 * t1075 - t1042 * t1074;
t1009 = qJD(4) + t1010;
t1083 = qJD(4) + t1009;
t1035 = t1048 * qJDD(1);
t1064 = qJD(2) * t1075;
t1019 = t1035 - t1064;
t1039 = t1048 ^ 2;
t1051 = qJD(1) ^ 2;
t1054 = qJD(2) * pkin(2) - qJ(3) * t1075;
t1046 = sin(qJ(1));
t1049 = cos(qJ(1));
t1027 = t1046 * g(1) - t1049 * g(2);
t1055 = qJDD(1) * pkin(1) + t1027;
t984 = t1019 * pkin(2) + (t1039 * qJ(3) + pkin(5)) * t1051 - t1054 * t1075 - qJDD(3) + t1055;
t1012 = (t1041 * t1048 + t1042 * t1045) * qJD(1);
t1044 = sin(qJ(4));
t1047 = cos(qJ(4));
t996 = -t1047 * qJD(2) + t1044 * t1012;
t1082 = t996 ^ 2;
t998 = t1044 * qJD(2) + t1047 * t1012;
t1081 = t998 ^ 2;
t1080 = t1009 ^ 2;
t1079 = t1010 ^ 2;
t1078 = t1012 ^ 2;
t1077 = -2 * qJD(3);
t1076 = t998 * t996;
t1073 = qJD(2) * t1010;
t1072 = qJD(2) * t1012;
t1071 = t1012 * t1010;
t1070 = t1039 * t1051;
t1028 = -t1049 * g(1) - t1046 * g(2);
t1015 = -t1051 * pkin(1) + qJDD(1) * pkin(5) + t1028;
t1069 = t1045 * t1015;
t1068 = t1045 * t1051;
t1067 = qJD(4) - t1009;
t1038 = t1045 ^ 2;
t1066 = t1038 + t1039;
t1065 = t1045 * qJDD(1);
t1063 = qJD(2) * t1074;
t1018 = t1063 + t1065;
t1052 = qJDD(2) * pkin(2) - t1018 * qJ(3) - t1069 + (qJD(2) * qJ(3) * qJD(1) + pkin(2) * t1068 - g(3)) * t1048;
t1004 = -t1045 * g(3) + t1048 * t1015;
t981 = -pkin(2) * t1070 + t1019 * qJ(3) - qJD(2) * t1054 + t1004;
t960 = t1010 * t1077 + t1041 * t1052 + t1042 * t981;
t1061 = t1041 * t981 - t1042 * t1052;
t995 = t1042 * t1018 + t1041 * t1019;
t1060 = -t995 + t1073;
t1059 = t1047 * qJDD(2) - t1044 * t995;
t1058 = t1041 * t1018 - t1042 * t1019;
t1057 = -qJDD(4) - t1058;
t1056 = -t1044 * qJDD(2) - t1047 * t995;
t986 = t1058 + t1072;
t1050 = qJD(2) ^ 2;
t1032 = t1048 * t1068;
t1031 = -t1050 - t1070;
t1030 = -t1038 * t1051 - t1050;
t1026 = -qJDD(2) + t1032;
t1025 = qJDD(2) + t1032;
t1024 = t1066 * t1051;
t1023 = -t1046 * qJDD(1) - t1049 * t1051;
t1022 = t1049 * qJDD(1) - t1046 * t1051;
t1021 = t1066 * qJDD(1);
t1020 = t1035 - 0.2e1 * t1064;
t1017 = 0.2e1 * t1063 + t1065;
t1014 = t1051 * pkin(5) + t1055;
t1005 = -t1050 - t1078;
t1003 = -t1048 * g(3) - t1069;
t1002 = t1048 * t1026 - t1045 * t1030;
t1001 = -t1045 * t1025 + t1048 * t1031;
t1000 = t1045 * t1026 + t1048 * t1030;
t999 = t1048 * t1025 + t1045 * t1031;
t994 = -qJDD(2) - t1071;
t993 = qJDD(2) - t1071;
t992 = -t1050 - t1079;
t991 = t1010 * pkin(3) - t1012 * pkin(6);
t989 = -t995 - t1073;
t987 = -t1058 + t1072;
t985 = -t1078 - t1079;
t983 = -t1045 * t1003 + t1048 * t1004;
t982 = t1048 * t1003 + t1045 * t1004;
t977 = -t1080 - t1081;
t976 = -t1041 * t1005 + t1042 * t994;
t975 = t1042 * t1005 + t1041 * t994;
t974 = -t1080 - t1082;
t973 = -t1081 - t1082;
t972 = -t1041 * t993 + t1042 * t992;
t971 = t1041 * t992 + t1042 * t993;
t970 = t1057 - t1076;
t969 = -t1057 - t1076;
t968 = -t1041 * t989 + t1042 * t987;
t967 = t1041 * t987 + t1042 * t989;
t966 = t1067 * t996 + t1056;
t965 = -t1083 * t996 - t1056;
t964 = -t1067 * t998 + t1059;
t963 = t1083 * t998 - t1059;
t962 = -t1045 * t975 + t1048 * t976;
t961 = t1045 * t976 + t1048 * t975;
t959 = t1012 * t1077 - t1061;
t958 = -t1044 * t977 + t1047 * t970;
t957 = t1044 * t970 + t1047 * t977;
t956 = pkin(3) * t986 + pkin(6) * t1060 - t984;
t955 = -t1044 * t969 + t1047 * t974;
t954 = t1044 * t974 + t1047 * t969;
t953 = -t1045 * t971 + t1048 * t972;
t952 = t1045 * t972 + t1048 * t971;
t951 = -t1050 * pkin(3) + qJDD(2) * pkin(6) - t1010 * t991 + t960;
t950 = -qJDD(2) * pkin(3) - t1050 * pkin(6) + ((2 * qJD(3)) + t991) * t1012 + t1061;
t949 = -t1045 * t967 + t1048 * t968;
t948 = t1045 * t968 + t1048 * t967;
t947 = -t1044 * t966 + t1047 * t964;
t946 = t1044 * t964 + t1047 * t966;
t945 = t1041 * t965 + t1042 * t958;
t944 = t1041 * t958 - t1042 * t965;
t943 = t1041 * t963 + t1042 * t955;
t942 = t1041 * t955 - t1042 * t963;
t941 = -t1041 * t959 + t1042 * t960;
t940 = t1041 * t960 + t1042 * t959;
t939 = t1041 * t973 + t1042 * t947;
t938 = t1041 * t947 - t1042 * t973;
t937 = t1044 * t956 + t1047 * t951;
t936 = -t1044 * t951 + t1047 * t956;
t935 = -t1045 * t944 + t1048 * t945;
t934 = t1045 * t945 + t1048 * t944;
t933 = -t1045 * t942 + t1048 * t943;
t932 = t1045 * t943 + t1048 * t942;
t931 = -t1045 * t940 + t1048 * t941;
t930 = t1045 * t941 + t1048 * t940;
t929 = -t1045 * t938 + t1048 * t939;
t928 = t1045 * t939 + t1048 * t938;
t927 = -t1044 * t936 + t1047 * t937;
t926 = t1044 * t937 + t1047 * t936;
t925 = t1041 * t950 + t1042 * t927;
t924 = t1041 * t927 - t1042 * t950;
t923 = -t1045 * t924 + t1048 * t925;
t922 = t1045 * t925 + t1048 * t924;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1023, -t1022, 0, -t1046 * t1027 + t1049 * t1028, 0, 0, 0, 0, 0, 0, t1049 * t1001 - t1046 * t1020, t1049 * t1002 + t1046 * t1017, t1049 * t1021 - t1046 * t1024, -t1046 * t1014 + t1049 * t983, 0, 0, 0, 0, 0, 0, t1046 * t986 + t1049 * t953, -t1046 * t1060 + t1049 * t962, t1046 * t985 + t1049 * t949, -t1046 * t984 + t1049 * t931, 0, 0, 0, 0, 0, 0, t1046 * t954 + t1049 * t933, t1046 * t957 + t1049 * t935, t1046 * t946 + t1049 * t929, t1046 * t926 + t1049 * t923; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1022, t1023, 0, t1049 * t1027 + t1046 * t1028, 0, 0, 0, 0, 0, 0, t1046 * t1001 + t1049 * t1020, t1046 * t1002 - t1049 * t1017, t1046 * t1021 + t1049 * t1024, t1049 * t1014 + t1046 * t983, 0, 0, 0, 0, 0, 0, t1046 * t953 - t1049 * t986, t1046 * t962 + t1049 * t1060, t1046 * t949 - t1049 * t985, t1046 * t931 + t1049 * t984, 0, 0, 0, 0, 0, 0, t1046 * t933 - t1049 * t954, t1046 * t935 - t1049 * t957, t1046 * t929 - t1049 * t946, t1046 * t923 - t1049 * t926; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t999, t1000, 0, t982, 0, 0, 0, 0, 0, 0, t952, t961, t948, t930, 0, 0, 0, 0, 0, 0, t932, t934, t928, t922; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1051, -qJDD(1), 0, t1028, 0, 0, 0, 0, 0, 0, t1001, t1002, t1021, t983, 0, 0, 0, 0, 0, 0, t953, t962, t949, t931, 0, 0, 0, 0, 0, 0, t933, t935, t929, t923; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1051, 0, t1027, 0, 0, 0, 0, 0, 0, t1020, -t1017, t1024, t1014, 0, 0, 0, 0, 0, 0, -t986, t1060, -t985, t984, 0, 0, 0, 0, 0, 0, -t954, -t957, -t946, -t926; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t999, t1000, 0, t982, 0, 0, 0, 0, 0, 0, t952, t961, t948, t930, 0, 0, 0, 0, 0, 0, t932, t934, t928, t922; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1031, t1026, t1035, t1004, 0, 0, 0, 0, 0, 0, t972, t976, t968, t941, 0, 0, 0, 0, 0, 0, t943, t945, t939, t925; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1025, t1030, -t1065, t1003, 0, 0, 0, 0, 0, 0, t971, t975, t967, t940, 0, 0, 0, 0, 0, 0, t942, t944, t938, t924; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1020, t1017, -t1024, -t1014, 0, 0, 0, 0, 0, 0, t986, -t1060, t985, -t984, 0, 0, 0, 0, 0, 0, t954, t957, t946, t926; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t992, t994, t987, t960, 0, 0, 0, 0, 0, 0, t955, t958, t947, t927; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t993, t1005, t989, t959, 0, 0, 0, 0, 0, 0, -t963, -t965, -t973, -t950; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t986, -t1060, t985, -t984, 0, 0, 0, 0, 0, 0, t954, t957, t946, t926; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t974, t970, t964, t937; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t969, t977, t966, t936; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t963, t965, t973, t950;];
f_new_reg = t1;
