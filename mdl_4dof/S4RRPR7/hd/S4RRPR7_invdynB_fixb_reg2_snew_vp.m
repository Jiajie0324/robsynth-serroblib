% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S4RRPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4,theta3]';
% 
% Output:
% tauB_reg [6x(5*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:07
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S4RRPR7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRPR7_invdynB_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRPR7_invdynB_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRPR7_invdynB_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRPR7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RRPR7_invdynB_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:06:49
% EndTime: 2019-12-31 17:06:54
% DurationCPUTime: 4.74s
% Computational Cost: add. (16296->438), mult. (37721->663), div. (0->0), fcn. (25476->8), ass. (0->311)
t472 = sin(pkin(7));
t473 = cos(pkin(7));
t479 = cos(qJ(2));
t515 = qJD(1) * t479;
t476 = sin(qJ(2));
t516 = qJD(1) * t476;
t430 = t472 * t516 - t473 * t515;
t432 = t472 * t515 + t473 * t516;
t394 = t432 * t430;
t539 = qJDD(2) - t394;
t544 = t472 * t539;
t543 = t473 * t539;
t475 = sin(qJ(4));
t478 = cos(qJ(4));
t406 = -t478 * qJD(2) + t475 * t432;
t408 = t475 * qJD(2) + t478 * t432;
t367 = t408 * t406;
t509 = qJD(1) * qJD(2);
t498 = t479 * t509;
t508 = t476 * qJDD(1);
t440 = t498 + t508;
t464 = t479 * qJDD(1);
t499 = t476 * t509;
t441 = t464 - t499;
t494 = t472 * t440 - t473 * t441;
t489 = qJDD(4) + t494;
t540 = -t367 + t489;
t542 = t475 * t540;
t541 = t478 * t540;
t513 = qJD(2) * t432;
t368 = t494 + t513;
t396 = t473 * t440 + t472 * t441;
t345 = -t406 * qJD(4) + t475 * qJDD(2) + t478 * t396;
t426 = qJD(4) + t430;
t385 = t426 * t406;
t325 = -t385 + t345;
t495 = -t478 * qJDD(2) + t475 * t396;
t322 = (qJD(4) - t426) * t408 + t495;
t470 = t479 ^ 2;
t482 = qJD(1) ^ 2;
t487 = qJD(2) * pkin(2) - qJ(3) * t516;
t477 = sin(qJ(1));
t480 = cos(qJ(1));
t450 = t477 * g(1) - t480 * g(2);
t488 = qJDD(1) * pkin(1) + t450;
t365 = t441 * pkin(2) + (qJ(3) * t470 + pkin(5)) * t482 - t487 * t516 - qJDD(3) + t488;
t404 = t406 ^ 2;
t405 = t408 ^ 2;
t425 = t426 ^ 2;
t428 = t430 ^ 2;
t429 = t432 ^ 2;
t538 = 2 * qJD(3);
t537 = pkin(3) * t472;
t536 = t426 * t475;
t535 = t426 * t478;
t469 = t476 ^ 2;
t534 = t469 * t482;
t467 = t470 * t482;
t533 = t472 * t365;
t389 = qJDD(2) + t394;
t532 = t472 * t389;
t531 = t473 * t365;
t530 = t473 * t389;
t386 = t430 * pkin(3) - t432 * pkin(6);
t481 = qJD(2) ^ 2;
t451 = t480 * g(1) + t477 * g(2);
t486 = -t482 * pkin(1) + qJDD(1) * pkin(5) - t451;
t416 = -t476 * g(3) + t479 * t486;
t360 = -pkin(2) * t467 + t441 * qJ(3) - qJD(2) * t487 + t416;
t484 = t476 * t486;
t523 = t476 * t482;
t483 = -t484 - t440 * qJ(3) + qJDD(2) * pkin(2) + (pkin(2) * t523 + qJ(3) * t509 - g(3)) * t479;
t496 = t472 * t360 - t473 * t483;
t282 = -qJDD(2) * pkin(3) - t481 * pkin(6) + (t538 + t386) * t432 + t496;
t529 = t475 * t282;
t336 = t367 + t489;
t528 = t475 * t336;
t302 = t432 * t538 + t496;
t303 = -0.2e1 * qJD(3) * t430 + t473 * t360 + t472 * t483;
t259 = -t473 * t302 + t472 * t303;
t527 = t476 * t259;
t434 = t482 * pkin(5) + t488;
t526 = t476 * t434;
t459 = t479 * t523;
t448 = qJDD(2) + t459;
t525 = t476 * t448;
t449 = qJDD(2) - t459;
t524 = t476 * t449;
t522 = t478 * t282;
t521 = t478 * t336;
t520 = t479 * t259;
t519 = t479 * t434;
t518 = t479 * t449;
t283 = -t481 * pkin(3) + qJDD(2) * pkin(6) - t430 * t386 + t303;
t514 = qJD(2) * t430;
t493 = -t396 + t514;
t298 = t368 * pkin(3) + t493 * pkin(6) - t365;
t248 = t478 * t283 + t475 * t298;
t517 = t469 + t470;
t512 = qJD(2) * t472;
t511 = qJD(2) * t473;
t507 = t477 * qJDD(1);
t506 = t480 * qJDD(1);
t505 = t480 * qJDD(2);
t504 = t472 * t367;
t503 = t473 * t367;
t502 = t477 * t394;
t501 = t480 * t394;
t500 = -pkin(3) * t473 - pkin(2);
t247 = t475 * t283 - t478 * t298;
t260 = t472 * t302 + t473 * t303;
t415 = t479 * g(3) + t484;
t363 = t476 * t415 + t479 * t416;
t403 = -t477 * t450 - t480 * t451;
t492 = t477 * t459;
t491 = t480 * t459;
t445 = -t477 * t482 + t506;
t490 = -pkin(4) * t445 - t477 * g(3);
t222 = -t478 * t247 + t475 * t248;
t223 = t475 * t247 + t478 * t248;
t362 = t479 * t415 - t476 * t416;
t402 = t480 * t450 - t477 * t451;
t370 = -t494 + t513;
t462 = t477 * qJDD(2);
t458 = -t467 - t481;
t457 = t467 - t481;
t456 = -t481 - t534;
t455 = t481 - t534;
t447 = t467 - t534;
t446 = t467 + t534;
t444 = t480 * t482 + t507;
t443 = t517 * qJDD(1);
t442 = t464 - 0.2e1 * t499;
t439 = 0.2e1 * t498 + t508;
t437 = t479 * t448;
t436 = t517 * t509;
t427 = -pkin(4) * t444 + t480 * g(3);
t421 = -t429 - t481;
t420 = -t429 + t481;
t419 = t428 - t481;
t418 = t479 * t440 - t469 * t509;
t417 = -t476 * t441 - t470 * t509;
t414 = -t476 * t456 - t518;
t413 = -t476 * t455 + t437;
t412 = t479 * t458 - t525;
t411 = t479 * t457 - t524;
t410 = t479 * t456 - t524;
t409 = t476 * t458 + t437;
t399 = t480 * t443 - t477 * t446;
t398 = t477 * t443 + t480 * t446;
t397 = -t476 * t439 + t479 * t442;
t392 = -t429 + t428;
t387 = -t481 - t428;
t384 = (-t430 * t473 + t432 * t472) * qJD(2);
t383 = (-t430 * t472 - t432 * t473) * qJD(2);
t382 = t480 * t414 + t477 * t439;
t381 = t480 * t412 - t477 * t442;
t380 = t477 * t414 - t480 * t439;
t379 = t477 * t412 + t480 * t442;
t378 = -t405 + t425;
t377 = t404 - t425;
t376 = -pkin(5) * t410 - t519;
t375 = -pkin(5) * t409 - t526;
t374 = -pkin(1) * t410 + t416;
t373 = -pkin(1) * t409 + t415;
t372 = -t396 - t514;
t366 = -t428 - t429;
t364 = -t405 + t404;
t359 = t473 * t396 - t432 * t512;
t358 = t472 * t396 + t432 * t511;
t357 = t430 * t511 + t472 * t494;
t356 = t430 * t512 - t473 * t494;
t352 = -t405 - t425;
t351 = -t472 * t421 - t530;
t350 = -t472 * t420 + t543;
t349 = t473 * t419 - t532;
t348 = t473 * t421 - t532;
t347 = t473 * t420 + t544;
t346 = t472 * t419 + t530;
t344 = -t408 * qJD(4) - t495;
t343 = -t425 - t404;
t342 = t404 + t405;
t341 = t480 * t363 - t477 * t434;
t340 = t477 * t363 + t480 * t434;
t339 = t473 * t387 - t544;
t338 = t472 * t387 + t543;
t334 = (-t406 * t478 + t408 * t475) * t426;
t333 = (t406 * t475 + t408 * t478) * t426;
t332 = -t476 * t383 + t479 * t384;
t331 = t473 * t370 - t472 * t372;
t330 = -t473 * t368 + t472 * t493;
t329 = t472 * t370 + t473 * t372;
t328 = -t472 * t368 - t473 * t493;
t326 = -t385 - t345;
t323 = (-qJD(4) - t426) * t408 - t495;
t321 = t478 * t345 - t408 * t536;
t320 = -t475 * t345 - t408 * t535;
t319 = -t475 * t344 + t406 * t535;
t318 = -t478 * t344 - t406 * t536;
t317 = -qJ(3) * t348 - t531;
t316 = -t476 * t358 + t479 * t359;
t315 = -t476 * t356 + t479 * t357;
t314 = -t476 * t348 + t479 * t351;
t313 = -t476 * t347 + t479 * t350;
t312 = -t476 * t346 + t479 * t349;
t311 = t479 * t348 + t476 * t351;
t310 = t473 * t334 + t472 * t489;
t309 = t472 * t334 - t473 * t489;
t308 = t478 * t377 - t528;
t307 = -t475 * t378 + t541;
t306 = -t475 * t377 - t521;
t305 = -t478 * t378 - t542;
t304 = -qJ(3) * t338 - t533;
t300 = -t475 * t352 - t521;
t299 = t478 * t352 - t528;
t295 = t478 * t343 - t542;
t294 = t475 * t343 + t541;
t293 = -t476 * t338 + t479 * t339;
t292 = t479 * t338 + t476 * t339;
t291 = pkin(2) * t493 + qJ(3) * t351 - t533;
t290 = t473 * t321 + t504;
t289 = t473 * t319 - t504;
t288 = t472 * t321 - t503;
t287 = t472 * t319 + t503;
t286 = -pkin(2) * t368 + qJ(3) * t339 + t531;
t285 = t480 * t314 - t477 * t493;
t284 = t477 * t314 + t480 * t493;
t280 = t480 * t293 + t477 * t368;
t279 = -t476 * t329 + t479 * t331;
t278 = -t476 * t328 + t479 * t330;
t277 = t477 * t293 - t480 * t368;
t276 = t479 * t329 + t476 * t331;
t275 = -t322 * t478 - t475 * t326;
t274 = t478 * t323 - t475 * t325;
t273 = -t322 * t475 + t478 * t326;
t272 = -t475 * t323 - t478 * t325;
t271 = t473 * t308 - t472 * t322;
t270 = t473 * t307 - t472 * t326;
t269 = t472 * t308 + t473 * t322;
t268 = t472 * t307 + t473 * t326;
t267 = t473 * t300 + t325 * t472;
t266 = t472 * t300 - t325 * t473;
t265 = -t476 * t309 + t479 * t310;
t264 = t473 * t295 - t472 * t323;
t263 = t472 * t295 + t473 * t323;
t262 = t480 * t279 + t477 * t366;
t261 = t477 * t279 - t480 * t366;
t258 = t473 * t274 - t472 * t364;
t257 = t472 * t274 + t473 * t364;
t256 = t473 * t275 - t472 * t342;
t255 = t472 * t275 + t473 * t342;
t254 = -pkin(1) * t276 - pkin(2) * t329;
t253 = -pkin(1) * t311 - pkin(2) * t348 + t303;
t252 = pkin(2) * t365 + qJ(3) * t260;
t251 = -pkin(6) * t299 + t522;
t250 = -t476 * t288 + t479 * t290;
t249 = -t476 * t287 + t479 * t289;
t246 = -pkin(6) * t294 + t529;
t245 = -pkin(1) * t292 - pkin(2) * t338 + t302;
t244 = -qJ(3) * t329 - t259;
t243 = -pkin(5) * t311 - t476 * t291 + t479 * t317;
t242 = -pkin(2) * t366 + qJ(3) * t331 + t260;
t241 = -pkin(5) * t292 - t476 * t286 + t479 * t304;
t240 = -pkin(3) * t299 + t248;
t239 = -t476 * t269 + t479 * t271;
t238 = -t476 * t268 + t479 * t270;
t237 = -pkin(3) * t294 + t247;
t236 = -t476 * t266 + t479 * t267;
t235 = t479 * t266 + t476 * t267;
t234 = -t476 * t263 + t479 * t264;
t233 = t479 * t263 + t476 * t264;
t232 = t479 * t260 - t527;
t231 = t476 * t260 + t520;
t230 = -t476 * t257 + t479 * t258;
t229 = t480 * t232 - t477 * t365;
t228 = t477 * t232 + t480 * t365;
t227 = -t476 * t255 + t479 * t256;
t226 = t479 * t255 + t476 * t256;
t225 = t480 * t236 + t477 * t299;
t224 = t477 * t236 - t480 * t299;
t221 = t480 * t234 + t477 * t294;
t220 = t477 * t234 - t480 * t294;
t219 = -pkin(1) * t231 - pkin(2) * t259;
t218 = t480 * t227 + t477 * t273;
t217 = t477 * t227 - t480 * t273;
t216 = t473 * t223 + t472 * t282;
t215 = t472 * t223 - t473 * t282;
t214 = -pkin(6) * t273 - t222;
t213 = -pkin(5) * t276 - t476 * t242 + t479 * t244;
t212 = -qJ(3) * t266 - t472 * t240 + t473 * t251;
t211 = -qJ(3) * t263 - t472 * t237 + t473 * t246;
t210 = -pkin(5) * t231 - qJ(3) * t520 - t476 * t252;
t209 = -pkin(1) * t235 - pkin(2) * t266 + pkin(3) * t325 - pkin(6) * t300 - t529;
t208 = -pkin(2) * t299 + qJ(3) * t267 + t473 * t240 + t472 * t251;
t207 = -pkin(1) * t233 - pkin(2) * t263 - pkin(3) * t323 - pkin(6) * t295 + t522;
t206 = -pkin(2) * t294 + qJ(3) * t264 + t473 * t237 + t472 * t246;
t205 = -qJ(3) * t255 + t473 * t214 + t273 * t537;
t204 = qJ(3) * t256 + t472 * t214 + t500 * t273;
t203 = -t476 * t215 + t479 * t216;
t202 = t479 * t215 + t476 * t216;
t201 = -pkin(1) * t226 - pkin(2) * t255 - pkin(3) * t342 - pkin(6) * t275 - t223;
t200 = -qJ(3) * t215 + (-pkin(6) * t473 + t537) * t222;
t199 = t480 * t203 + t477 * t222;
t198 = t477 * t203 - t480 * t222;
t197 = -pkin(5) * t235 - t476 * t208 + t479 * t212;
t196 = -pkin(5) * t233 - t476 * t206 + t479 * t211;
t195 = qJ(3) * t216 + (-pkin(6) * t472 + t500) * t222;
t194 = -pkin(1) * t202 - pkin(2) * t215 + pkin(3) * t282 - pkin(6) * t223;
t193 = -pkin(5) * t226 - t476 * t204 + t479 * t205;
t192 = -pkin(5) * t202 - t476 * t195 + t479 * t200;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t444, -t445, 0, t403, 0, 0, 0, 0, 0, 0, t381, t382, t399, t341, 0, 0, 0, 0, 0, 0, t280, t285, t262, t229, 0, 0, 0, 0, 0, 0, t221, t225, t218, t199; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t445, -t444, 0, t402, 0, 0, 0, 0, 0, 0, t379, t380, t398, t340, 0, 0, 0, 0, 0, 0, t277, t284, t261, t228, 0, 0, 0, 0, 0, 0, t220, t224, t217, t198; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t409, t410, 0, -t362, 0, 0, 0, 0, 0, 0, t292, t311, t276, t231, 0, 0, 0, 0, 0, 0, t233, t235, t226, t202; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t445, 0, -t444, 0, t490, -t427, -t402, -pkin(4) * t402, t480 * t418 - t492, t480 * t397 - t477 * t447, t480 * t413 + t476 * t507, t480 * t417 + t492, t480 * t411 + t464 * t477, t480 * t436 + t462, -pkin(4) * t379 - t477 * t373 + t480 * t375, -pkin(4) * t380 - t477 * t374 + t480 * t376, -pkin(4) * t398 + t480 * t362, -pkin(4) * t340 - (pkin(1) * t477 - pkin(5) * t480) * t362, t480 * t316 + t502, t480 * t278 - t477 * t392, t480 * t313 - t477 * t372, t480 * t315 - t502, t480 * t312 + t370 * t477, t480 * t332 + t462, -pkin(4) * t277 + t480 * t241 - t477 * t245, -pkin(4) * t284 + t480 * t243 - t477 * t253, -pkin(4) * t261 + t480 * t213 - t477 * t254, -pkin(4) * t228 + t480 * t210 - t477 * t219, t480 * t250 - t477 * t320, t480 * t230 - t477 * t272, t480 * t238 - t477 * t305, t480 * t249 - t477 * t318, t480 * t239 - t477 * t306, t480 * t265 - t477 * t333, -pkin(4) * t220 + t480 * t196 - t477 * t207, -pkin(4) * t224 + t480 * t197 - t477 * t209, -pkin(4) * t217 + t480 * t193 - t477 * t201, -pkin(4) * t198 + t480 * t192 - t477 * t194; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t444, 0, t445, 0, t427, t490, t403, pkin(4) * t403, t477 * t418 + t491, t477 * t397 + t480 * t447, t477 * t413 - t476 * t506, t477 * t417 - t491, t477 * t411 - t479 * t506, t477 * t436 - t505, pkin(4) * t381 + t480 * t373 + t477 * t375, pkin(4) * t382 + t480 * t374 + t477 * t376, pkin(4) * t399 + t477 * t362, pkin(4) * t341 - (-pkin(1) * t480 - pkin(5) * t477) * t362, t477 * t316 - t501, t477 * t278 + t480 * t392, t477 * t313 + t480 * t372, t477 * t315 + t501, t477 * t312 - t370 * t480, t477 * t332 - t505, pkin(4) * t280 + t477 * t241 + t480 * t245, pkin(4) * t285 + t477 * t243 + t480 * t253, pkin(4) * t262 + t477 * t213 + t480 * t254, pkin(4) * t229 + t477 * t210 + t480 * t219, t477 * t250 + t480 * t320, t477 * t230 + t480 * t272, t477 * t238 + t480 * t305, t477 * t249 + t480 * t318, t477 * t239 + t480 * t306, t477 * t265 + t480 * t333, pkin(4) * t221 + t477 * t196 + t480 * t207, pkin(4) * t225 + t477 * t197 + t480 * t209, pkin(4) * t218 + t477 * t193 + t480 * t201, pkin(4) * t199 + t477 * t192 + t480 * t194; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t450, t451, 0, 0, (t440 + t498) * t476, t479 * t439 + t476 * t442, t479 * t455 + t525, (t441 - t499) * t479, t476 * t457 + t518, 0, pkin(1) * t442 + pkin(5) * t412 + t519, -pkin(1) * t439 + pkin(5) * t414 - t526, pkin(1) * t446 + pkin(5) * t443 + t363, pkin(1) * t434 + pkin(5) * t363, t479 * t358 + t476 * t359, t479 * t328 + t476 * t330, t479 * t347 + t476 * t350, t479 * t356 + t476 * t357, t479 * t346 + t476 * t349, t479 * t383 + t476 * t384, -pkin(1) * t368 + pkin(5) * t293 + t479 * t286 + t476 * t304, pkin(1) * t493 + pkin(5) * t314 + t479 * t291 + t476 * t317, -pkin(1) * t366 + pkin(5) * t279 + t479 * t242 + t476 * t244, pkin(1) * t365 + pkin(5) * t232 - qJ(3) * t527 + t479 * t252, t479 * t288 + t476 * t290, t479 * t257 + t476 * t258, t479 * t268 + t476 * t270, t479 * t287 + t476 * t289, t479 * t269 + t476 * t271, t479 * t309 + t476 * t310, -pkin(1) * t294 + pkin(5) * t234 + t479 * t206 + t476 * t211, -pkin(1) * t299 + pkin(5) * t236 + t479 * t208 + t476 * t212, -pkin(1) * t273 + pkin(5) * t227 + t479 * t204 + t476 * t205, -pkin(1) * t222 + pkin(5) * t203 + t479 * t195 + t476 * t200;];
tauB_reg = t1;
