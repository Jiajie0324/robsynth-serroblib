% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4PRRR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d2,d3,d4,theta1]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:32
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4PRRR4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4PRRR4_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4PRRR4_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4PRRR4_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4PRRR4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4PRRR4_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:32:46
% EndTime: 2019-12-31 16:32:50
% DurationCPUTime: 4.74s
% Computational Cost: add. (14886->388), mult. (30769->550), div. (0->0), fcn. (20874->8), ass. (0->270)
t682 = sin(pkin(7));
t687 = sin(qJ(2));
t690 = cos(qJ(2));
t683 = cos(pkin(7));
t658 = g(1) * t683 + g(2) * t682;
t708 = g(1) * t682 - t683 * g(2);
t693 = t690 * t658 - t687 * t708;
t705 = t658 * t687 + t690 * t708;
t707 = -t687 * t705 - t690 * t693;
t559 = t687 * t693 - t690 * t705;
t735 = t559 * t683;
t760 = -t682 * t707 + t735;
t736 = t559 * t682;
t759 = t683 * t707 + t736;
t685 = sin(qJ(4));
t688 = cos(qJ(4));
t689 = cos(qJ(3));
t686 = sin(qJ(3));
t719 = qJD(2) * t686;
t635 = -t688 * t689 * qJD(2) + t685 * t719;
t637 = (t685 * t689 + t686 * t688) * qJD(2);
t598 = t637 * t635;
t677 = qJDD(3) + qJDD(4);
t750 = -t598 + t677;
t758 = t685 * t750;
t757 = t688 * t750;
t692 = qJD(2) ^ 2;
t654 = qJDD(2) * t687 + t690 * t692;
t680 = g(3) - qJDD(1);
t632 = pkin(4) * t654 - t680 * t690;
t655 = qJDD(2) * t690 - t687 * t692;
t698 = -pkin(4) * t655 - t680 * t687;
t748 = t683 * t654 + t655 * t682;
t756 = qJ(1) * t748 + t683 * t632 - t682 * t698;
t602 = -t654 * t682 + t683 * t655;
t755 = -qJ(1) * t602 + t682 * t632 + t683 * t698;
t596 = -t692 * pkin(2) + qJDD(2) * pkin(5) - t693;
t571 = t596 * t686 + t689 * t680;
t574 = t689 * t596 - t686 * t680;
t525 = t686 * t571 + t689 * t574;
t717 = qJD(2) * qJD(3);
t671 = t689 * t717;
t716 = t686 * qJDD(2);
t650 = t671 + t716;
t709 = t686 * t717;
t715 = t689 * qJDD(2);
t695 = t709 - t715;
t563 = -t635 * qJD(4) + t688 * t650 - t685 * t695;
t678 = qJD(3) + qJD(4);
t628 = t678 * t635;
t749 = -t628 + t563;
t706 = t650 * t685 + t688 * t695;
t541 = (qJD(4) - t678) * t637 + t706;
t747 = -t683 * t658 - t682 * t708;
t745 = -t682 * t658 + t683 * t708;
t633 = t635 ^ 2;
t634 = t637 ^ 2;
t676 = t678 ^ 2;
t744 = t689 ^ 2;
t666 = t686 * t692 * t689;
t659 = qJDD(3) + t666;
t529 = (-t650 + t671) * pkin(6) + t659 * pkin(3) - t571;
t661 = qJD(3) * pkin(3) - pkin(6) * t719;
t674 = t744 * t692;
t534 = -pkin(3) * t674 - t695 * pkin(6) - qJD(3) * t661 + t574;
t490 = -t688 * t529 + t534 * t685;
t493 = t529 * t685 + t534 * t688;
t458 = -t490 * t688 + t493 * t685;
t743 = pkin(3) * t458;
t545 = t628 + t563;
t501 = -t541 * t685 - t545 * t688;
t742 = pkin(3) * t501;
t740 = t458 * t686;
t739 = t458 * t689;
t595 = -qJDD(2) * pkin(2) - t692 * pkin(5) - t705;
t549 = t695 * pkin(3) - pkin(6) * t674 + t661 * t719 + t595;
t738 = t549 * t685;
t737 = t549 * t688;
t592 = t598 + t677;
t734 = t592 * t685;
t733 = t592 * t688;
t651 = -0.2e1 * t709 + t715;
t610 = t651 * t689;
t730 = t659 * t686;
t660 = qJDD(3) - t666;
t729 = t660 * t686;
t728 = t660 * t689;
t727 = t678 * t637;
t726 = t678 * t685;
t725 = t678 * t688;
t679 = t686 ^ 2;
t724 = t679 * t692;
t722 = t682 * t680;
t721 = t683 * t680;
t580 = t686 * t595;
t581 = t689 * t595;
t720 = -pkin(2) * t595 + pkin(5) * t525;
t714 = t679 + t744;
t713 = t687 * t598;
t712 = t690 * t598;
t691 = qJD(3) ^ 2;
t663 = -t691 - t724;
t619 = -t663 * t686 - t728;
t649 = 0.2e1 * t671 + t716;
t711 = -pkin(2) * t649 + pkin(5) * t619 + t580;
t665 = -t674 - t691;
t617 = t665 * t689 - t730;
t710 = pkin(2) * t651 + pkin(5) * t617 - t581;
t459 = t490 * t685 + t688 * t493;
t704 = t687 * t666;
t703 = t690 * t666;
t503 = -t541 * t688 + t545 * t685;
t566 = -t633 - t634;
t443 = -pkin(3) * t566 + pkin(6) * t503 + t459;
t446 = -pkin(6) * t501 - t458;
t464 = -t501 * t686 + t503 * t689;
t702 = -pkin(2) * t566 + pkin(5) * t464 + t689 * t443 + t686 * t446;
t579 = -t676 - t633;
t527 = t579 * t688 - t758;
t540 = (qJD(4) + t678) * t637 + t706;
t469 = -pkin(3) * t540 + pkin(6) * t527 - t737;
t526 = t579 * t685 + t757;
t488 = -t526 * t686 + t527 * t689;
t497 = -pkin(6) * t526 + t738;
t701 = -pkin(2) * t540 + pkin(5) * t488 + t689 * t469 + t686 * t497;
t620 = -t634 - t676;
t548 = -t620 * t685 - t733;
t479 = -pkin(3) * t749 + pkin(6) * t548 + t738;
t547 = t620 * t688 - t734;
t506 = -t547 * t686 + t548 * t689;
t507 = -pkin(6) * t547 + t737;
t700 = -pkin(2) * t749 + pkin(5) * t506 + t689 * t479 + t686 * t507;
t653 = t714 * qJDD(2);
t656 = t674 + t724;
t699 = pkin(2) * t656 + pkin(5) * t653 + t525;
t524 = t571 * t689 - t574 * t686;
t697 = pkin(3) * t526 - t490;
t440 = t459 * t689 - t740;
t451 = -pkin(3) * t549 + pkin(6) * t459;
t696 = -pkin(2) * t549 + pkin(5) * t440 - pkin(6) * t740 + t689 * t451;
t694 = pkin(3) * t547 - t493;
t664 = t674 - t691;
t662 = t691 - t724;
t657 = -t674 + t724;
t647 = t689 * t659;
t646 = t714 * t717;
t626 = -t634 + t676;
t625 = t633 - t676;
t624 = qJDD(3) * t687 + t646 * t690;
t623 = t650 * t689 - t679 * t717;
t622 = -qJDD(3) * t690 + t646 * t687;
t621 = t686 * t695 - t744 * t717;
t618 = -t662 * t686 + t647;
t616 = t664 * t689 - t729;
t615 = t663 * t689 - t729;
t614 = t662 * t689 + t730;
t613 = t665 * t686 + t647;
t612 = t664 * t686 + t728;
t611 = (t650 + t671) * t686;
t605 = t653 * t690 - t656 * t687;
t604 = t653 * t687 + t656 * t690;
t600 = -t649 * t686 + t610;
t599 = t649 * t689 + t651 * t686;
t597 = t634 - t633;
t590 = t623 * t690 - t704;
t589 = t621 * t690 + t704;
t588 = t623 * t687 + t703;
t587 = t621 * t687 - t703;
t586 = t618 * t690 + t687 * t716;
t585 = t616 * t690 + t687 * t715;
t584 = t618 * t687 - t690 * t716;
t583 = t616 * t687 - t690 * t715;
t578 = -pkin(1) * t654 + t693;
t577 = pkin(1) * t655 + t705;
t576 = t619 * t690 + t649 * t687;
t575 = t617 * t690 - t651 * t687;
t573 = t619 * t687 - t649 * t690;
t572 = t617 * t687 + t651 * t690;
t570 = (-t635 * t688 + t637 * t685) * t678;
t569 = (-t635 * t685 - t637 * t688) * t678;
t565 = t600 * t690 + t657 * t687;
t564 = t600 * t687 - t657 * t690;
t562 = -qJD(4) * t637 - t706;
t556 = pkin(1) * t559;
t555 = -pkin(5) * t615 + t581;
t554 = -pkin(5) * t613 + t580;
t553 = t625 * t688 - t734;
t552 = -t626 * t685 + t757;
t551 = t625 * t685 + t733;
t550 = t626 * t688 + t758;
t539 = pkin(1) * t680 + pkin(4) * t707;
t536 = -pkin(2) * t615 + t574;
t535 = -pkin(2) * t613 + t571;
t533 = t563 * t688 - t637 * t726;
t532 = t563 * t685 + t637 * t725;
t531 = -t562 * t685 + t635 * t725;
t530 = t562 * t688 + t635 * t726;
t521 = -t569 * t686 + t570 * t689;
t520 = t569 * t689 + t570 * t686;
t519 = t521 * t690 + t677 * t687;
t518 = t521 * t687 - t677 * t690;
t517 = pkin(1) * t573 + t711;
t516 = pkin(1) * t572 + t710;
t515 = -pkin(4) * t604 + t524 * t690;
t514 = pkin(4) * t605 + t524 * t687;
t513 = -t551 * t686 + t553 * t689;
t512 = -t550 * t686 + t552 * t689;
t511 = t551 * t689 + t553 * t686;
t510 = t550 * t689 + t552 * t686;
t509 = t525 * t690 + t595 * t687;
t508 = t525 * t687 - t595 * t690;
t505 = t547 * t689 + t548 * t686;
t502 = -t540 * t688 - t685 * t749;
t500 = -t540 * t685 + t688 * t749;
t498 = pkin(1) * t604 + t699;
t495 = -t532 * t686 + t533 * t689;
t494 = -t530 * t686 + t531 * t689;
t492 = t532 * t689 + t533 * t686;
t491 = t530 * t689 + t531 * t686;
t487 = t526 * t689 + t527 * t686;
t485 = -pkin(4) * t573 - t536 * t687 + t555 * t690;
t484 = -pkin(4) * t572 - t535 * t687 + t554 * t690;
t483 = t495 * t690 + t713;
t482 = t494 * t690 - t713;
t481 = t495 * t687 - t712;
t480 = t494 * t687 + t712;
t478 = t513 * t690 - t541 * t687;
t477 = t512 * t690 + t545 * t687;
t476 = t513 * t687 + t541 * t690;
t475 = t512 * t687 - t545 * t690;
t474 = -pkin(1) * t615 + pkin(4) * t576 + t536 * t690 + t555 * t687;
t473 = -pkin(1) * t613 + pkin(4) * t575 + t535 * t690 + t554 * t687;
t471 = t506 * t690 + t687 * t749;
t470 = t506 * t687 - t690 * t749;
t467 = t488 * t690 + t540 * t687;
t466 = t488 * t687 - t540 * t690;
t465 = pkin(1) * t508 + t720;
t463 = -t500 * t686 + t502 * t689;
t462 = t501 * t689 + t503 * t686;
t461 = t500 * t689 + t502 * t686;
t457 = t463 * t690 + t597 * t687;
t456 = t463 * t687 - t597 * t690;
t455 = -pkin(4) * t508 - (pkin(2) * t687 - pkin(5) * t690) * t524;
t454 = t464 * t690 + t566 * t687;
t453 = t464 * t687 - t566 * t690;
t452 = -pkin(2) * t505 - t694;
t449 = -pkin(2) * t487 - t697;
t448 = pkin(4) * t509 - (-pkin(2) * t690 - pkin(5) * t687 - pkin(1)) * t524;
t447 = -pkin(2) * t462 - t742;
t444 = -pkin(5) * t505 - t479 * t686 + t507 * t689;
t441 = -pkin(5) * t487 - t469 * t686 + t497 * t689;
t439 = t459 * t686 + t739;
t437 = t440 * t690 + t549 * t687;
t436 = t440 * t687 - t549 * t690;
t435 = pkin(1) * t470 + t700;
t434 = pkin(1) * t466 + t701;
t433 = -pkin(2) * t439 - t743;
t432 = -pkin(4) * t470 + t444 * t690 - t452 * t687;
t431 = -pkin(4) * t466 + t441 * t690 - t449 * t687;
t430 = -pkin(1) * t505 + pkin(4) * t471 + t444 * t687 + t452 * t690;
t429 = -pkin(5) * t462 - t443 * t686 + t446 * t689;
t428 = -pkin(1) * t487 + pkin(4) * t467 + t441 * t687 + t449 * t690;
t427 = -pkin(5) * t439 - pkin(6) * t739 - t451 * t686;
t426 = pkin(1) * t453 + t702;
t425 = -pkin(4) * t453 + t429 * t690 - t447 * t687;
t424 = pkin(1) * t436 + t696;
t423 = -pkin(1) * t462 + pkin(4) * t454 + t429 * t687 + t447 * t690;
t422 = -pkin(4) * t436 + t427 * t690 - t433 * t687;
t421 = -pkin(1) * t439 + pkin(4) * t437 + t427 * t687 + t433 * t690;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t722, -t721, -t745, -qJ(1) * t745, 0, 0, t602, 0, -t748, 0, t755, t756, t760, pkin(4) * t735 + qJ(1) * t760 - t682 * t539, -t588 * t682 + t590 * t683, -t564 * t682 + t565 * t683, -t584 * t682 + t586 * t683, -t587 * t682 + t589 * t683, -t583 * t682 + t585 * t683, -t622 * t682 + t624 * t683, t683 * t484 - t682 * t473 - qJ(1) * (t572 * t683 + t575 * t682), t683 * t485 - t682 * t474 - qJ(1) * (t573 * t683 + t576 * t682), t683 * t515 - t682 * t514 - qJ(1) * (t604 * t683 + t605 * t682), t683 * t455 - t682 * t448 - qJ(1) * (t508 * t683 + t509 * t682), -t481 * t682 + t483 * t683, -t456 * t682 + t457 * t683, -t475 * t682 + t477 * t683, -t480 * t682 + t482 * t683, -t476 * t682 + t478 * t683, -t518 * t682 + t519 * t683, t683 * t431 - t682 * t428 - qJ(1) * (t466 * t683 + t467 * t682), t683 * t432 - t682 * t430 - qJ(1) * (t470 * t683 + t471 * t682), t683 * t425 - t682 * t423 - qJ(1) * (t453 * t683 + t454 * t682), t683 * t422 - t682 * t421 - qJ(1) * (t436 * t683 + t437 * t682); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t721, -t722, t747, qJ(1) * t747, 0, 0, t748, 0, t602, 0, -t756, t755, t759, pkin(4) * t736 + qJ(1) * t759 + t683 * t539, t588 * t683 + t590 * t682, t564 * t683 + t565 * t682, t584 * t683 + t586 * t682, t587 * t683 + t589 * t682, t583 * t683 + t585 * t682, t622 * t683 + t624 * t682, t682 * t484 + t683 * t473 + qJ(1) * (-t572 * t682 + t575 * t683), t682 * t485 + t683 * t474 + qJ(1) * (-t573 * t682 + t576 * t683), t682 * t515 + t683 * t514 + qJ(1) * (-t604 * t682 + t605 * t683), t682 * t455 + t683 * t448 + qJ(1) * (-t508 * t682 + t509 * t683), t481 * t683 + t483 * t682, t456 * t683 + t457 * t682, t475 * t683 + t477 * t682, t480 * t683 + t482 * t682, t476 * t683 + t478 * t682, t518 * t683 + t519 * t682, t682 * t431 + t683 * t428 + qJ(1) * (-t466 * t682 + t467 * t683), t682 * t432 + t683 * t430 + qJ(1) * (-t470 * t682 + t471 * t683), t682 * t425 + t683 * t423 + qJ(1) * (-t453 * t682 + t454 * t683), t682 * t422 + t683 * t421 + qJ(1) * (-t436 * t682 + t437 * t683); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t708, t658, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t577, t578, 0, -t556, t611, t599, t614, t610, t612, 0, t516, t517, t498, t465, t492, t461, t510, t491, t511, t520, t434, t435, t426, t424; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t680, -t708, 0, 0, 0, t655, 0, -t654, 0, t698, t632, t559, pkin(4) * t559, t590, t565, t586, t589, t585, t624, t484, t485, t515, t455, t483, t457, t477, t482, t478, t519, t431, t432, t425, t422; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t680, 0, -t658, 0, 0, 0, t654, 0, t655, 0, -t632, t698, t707, t539, t588, t564, t584, t587, t583, t622, t473, t474, t514, t448, t481, t456, t475, t480, t476, t518, t428, t430, t423, t421; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t708, t658, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t577, t578, 0, -t556, t611, t599, t614, t610, t612, 0, t516, t517, t498, t465, t492, t461, t510, t491, t511, t520, t434, t435, t426, t424; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t692, 0, 0, -t680, -t705, 0, t623, t600, t618, t621, t616, t646, t554, t555, t524, pkin(5) * t524, t495, t463, t512, t494, t513, t521, t441, t444, t429, t427; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t692, 0, qJDD(2), 0, t680, 0, -t693, 0, t666, -t657, -t716, -t666, -t715, -qJDD(3), t535, t536, 0, pkin(2) * t524, -t598, -t597, -t545, t598, t541, -t677, t449, t452, t447, t433; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t705, t693, 0, 0, t611, t599, t614, t610, t612, 0, t710, t711, t699, t720, t492, t461, t510, t491, t511, t520, t701, t700, t702, t696; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t650, t651, t659, -t671, t664, t671, 0, t595, t571, 0, t533, t502, t552, t531, t553, t570, t497, t507, t446, -pkin(6) * t458; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t709, t649, t662, -t695, t660, -t709, -t595, 0, t574, 0, t532, t500, t550, t530, t551, t569, t469, t479, t443, t451; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t666, t657, t716, t666, t715, qJDD(3), -t571, -t574, 0, 0, t598, t597, t545, -t598, -t541, t677, t697, t694, t742, t743; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t563, -t540, t750, t628, t625, -t628, 0, t549, t490, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t727, t749, t626, t562, t592, -t727, -t549, 0, t493, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t598, t597, t545, -t598, -t541, t677, -t490, -t493, 0, 0;];
m_new_reg = t1;
