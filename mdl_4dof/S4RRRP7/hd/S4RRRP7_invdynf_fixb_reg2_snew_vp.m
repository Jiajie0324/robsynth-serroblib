% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S4RRRP7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d3]';
%
% Output:
% f_new_reg [(3*5)x(5*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:21
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S4RRRP7_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRRP7_invdynf_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRRP7_invdynf_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRRP7_invdynf_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRRP7_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4RRRP7_invdynf_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:21:22
% EndTime: 2019-12-31 17:21:24
% DurationCPUTime: 1.53s
% Computational Cost: add. (2653->162), mult. (5393->178), div. (0->0), fcn. (3468->6), ass. (0->106)
t1164 = sin(qJ(2));
t1189 = qJD(1) * t1164;
t1157 = qJD(2) * t1189;
t1167 = cos(qJ(2));
t1179 = t1167 * qJDD(1);
t1176 = t1157 - t1179;
t1175 = -qJDD(3) - t1176;
t1163 = sin(qJ(3));
t1166 = cos(qJ(3));
t1135 = -t1166 * qJD(2) + t1163 * t1189;
t1137 = t1163 * qJD(2) + t1166 * t1189;
t1187 = t1137 * t1135;
t1106 = t1175 - t1187;
t1134 = t1137 ^ 2;
t1182 = t1167 * qJD(1);
t1155 = qJD(3) - t1182;
t1191 = t1155 ^ 2;
t1196 = -t1134 - t1191;
t1088 = t1166 * t1106 - t1163 * t1196;
t1178 = qJD(2) * t1182;
t1180 = t1164 * qJDD(1);
t1140 = t1178 + t1180;
t1172 = -t1135 * qJD(3) + t1163 * qJDD(2) + t1166 * t1140;
t1188 = t1135 * t1155;
t1171 = t1172 - t1188;
t1074 = t1167 * t1088 + t1164 * t1171;
t1086 = t1163 * t1106 + t1166 * t1196;
t1165 = sin(qJ(1));
t1168 = cos(qJ(1));
t1216 = t1165 * t1074 - t1168 * t1086;
t1215 = t1168 * t1074 + t1165 * t1086;
t1072 = t1164 * t1088 - t1167 * t1171;
t1098 = t1172 + t1188;
t1177 = -t1166 * qJDD(2) + t1163 * t1140;
t1173 = (-qJD(3) + t1155) * t1137 - t1177;
t1194 = -t1166 * t1098 + t1163 * t1173;
t1116 = t1135 ^ 2;
t1105 = t1134 + t1116;
t1193 = t1163 * t1098 + t1166 * t1173;
t1206 = -t1164 * t1105 + t1167 * t1193;
t1212 = t1165 * t1206 - t1168 * t1194;
t1211 = t1165 * t1194 + t1168 * t1206;
t1107 = t1175 + t1187;
t1195 = -t1191 - t1116;
t1199 = t1163 * t1107 + t1166 * t1195;
t1210 = t1164 * t1199;
t1200 = -t1166 * t1107 + t1163 * t1195;
t1209 = t1165 * t1200;
t1208 = t1167 * t1199;
t1207 = t1168 * t1200;
t1205 = t1167 * t1105 + t1164 * t1193;
t1192 = qJD(2) ^ 2;
t1190 = t1167 * g(3);
t1149 = -t1168 * g(1) - t1165 * g(2);
t1169 = qJD(1) ^ 2;
t1131 = -t1169 * pkin(1) + qJDD(1) * pkin(5) + t1149;
t1122 = -t1164 * g(3) + t1167 * t1131;
t1138 = (-t1167 * pkin(2) - pkin(6) * t1164) * qJD(1);
t1103 = -t1192 * pkin(2) + qJDD(2) * pkin(6) + t1138 * t1182 + t1122;
t1148 = t1165 * g(1) - t1168 * g(2);
t1130 = qJDD(1) * pkin(1) + t1169 * pkin(5) + t1148;
t1170 = (-t1140 - t1178) * pkin(6) + (t1176 + t1157) * pkin(2) - t1130;
t1081 = t1166 * t1103 + t1163 * t1170;
t1159 = t1164 ^ 2;
t1160 = t1167 ^ 2;
t1181 = t1159 + t1160;
t1080 = -t1163 * t1103 + t1166 * t1170;
t1174 = -t1137 * qJD(3) - t1177;
t1102 = t1190 - qJDD(2) * pkin(2) - t1192 * pkin(6) + (qJD(1) * t1138 + t1131) * t1164;
t1154 = t1167 * t1169 * t1164;
t1152 = -t1160 * t1169 - t1192;
t1151 = -t1159 * t1169 - t1192;
t1147 = -qJDD(2) + t1154;
t1146 = qJDD(2) + t1154;
t1145 = t1181 * t1169;
t1144 = -t1165 * qJDD(1) - t1168 * t1169;
t1143 = t1168 * qJDD(1) - t1165 * t1169;
t1142 = t1181 * qJDD(1);
t1141 = -0.2e1 * t1157 + t1179;
t1139 = 0.2e1 * t1178 + t1180;
t1121 = -t1164 * t1131 - t1190;
t1120 = t1167 * t1147 - t1164 * t1151;
t1119 = -t1164 * t1146 + t1167 * t1152;
t1118 = t1164 * t1147 + t1167 * t1151;
t1117 = t1167 * t1146 + t1164 * t1152;
t1113 = t1135 * pkin(3) - t1137 * qJ(4);
t1100 = -t1164 * t1121 + t1167 * t1122;
t1099 = t1167 * t1121 + t1164 * t1122;
t1093 = (qJD(3) + t1155) * t1137 + t1177;
t1092 = t1155 * t1137 - t1174;
t1075 = t1164 * t1092 + t1208;
t1073 = -t1167 * t1092 + t1210;
t1071 = t1164 * t1093 + t1208;
t1069 = -t1167 * t1093 + t1210;
t1063 = t1175 * pkin(3) - qJ(4) * t1191 + t1137 * t1113 + qJDD(4) - t1080;
t1062 = -t1174 * pkin(3) + (pkin(3) * t1155 - (2 * qJD(4))) * t1137 + t1102 - t1171 * qJ(4);
t1061 = -pkin(3) * t1191 - t1175 * qJ(4) + 0.2e1 * qJD(4) * t1155 - t1135 * t1113 + t1081;
t1060 = -t1163 * t1080 + t1166 * t1081;
t1059 = t1166 * t1080 + t1163 * t1081;
t1058 = t1167 * t1060 + t1164 * t1102;
t1057 = t1164 * t1060 - t1167 * t1102;
t1056 = t1166 * t1061 + t1163 * t1063;
t1055 = t1163 * t1061 - t1166 * t1063;
t1054 = t1167 * t1056 + t1164 * t1062;
t1053 = t1164 * t1056 - t1167 * t1062;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1144, -t1143, 0, -t1165 * t1148 + t1168 * t1149, 0, 0, 0, 0, 0, 0, t1168 * t1119 - t1165 * t1141, t1168 * t1120 + t1165 * t1139, t1168 * t1142 - t1165 * t1145, t1168 * t1100 - t1165 * t1130, 0, 0, 0, 0, 0, 0, t1168 * t1071 + t1209, t1215, t1211, t1168 * t1058 + t1165 * t1059, 0, 0, 0, 0, 0, 0, t1168 * t1075 + t1209, t1211, -t1215, t1168 * t1054 + t1165 * t1055; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1143, t1144, 0, t1168 * t1148 + t1165 * t1149, 0, 0, 0, 0, 0, 0, t1165 * t1119 + t1168 * t1141, t1165 * t1120 - t1168 * t1139, t1165 * t1142 + t1168 * t1145, t1165 * t1100 + t1168 * t1130, 0, 0, 0, 0, 0, 0, t1165 * t1071 - t1207, t1216, t1212, t1165 * t1058 - t1168 * t1059, 0, 0, 0, 0, 0, 0, t1165 * t1075 - t1207, t1212, -t1216, t1165 * t1054 - t1168 * t1055; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1117, t1118, 0, t1099, 0, 0, 0, 0, 0, 0, t1069, t1072, t1205, t1057, 0, 0, 0, 0, 0, 0, t1073, t1205, -t1072, t1053; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1169, -qJDD(1), 0, t1149, 0, 0, 0, 0, 0, 0, t1119, t1120, t1142, t1100, 0, 0, 0, 0, 0, 0, t1071, t1074, t1206, t1058, 0, 0, 0, 0, 0, 0, t1075, t1206, -t1074, t1054; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1169, 0, t1148, 0, 0, 0, 0, 0, 0, t1141, -t1139, t1145, t1130, 0, 0, 0, 0, 0, 0, -t1200, -t1086, -t1194, -t1059, 0, 0, 0, 0, 0, 0, -t1200, -t1194, t1086, -t1055; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1117, t1118, 0, t1099, 0, 0, 0, 0, 0, 0, t1069, t1072, t1205, t1057, 0, 0, 0, 0, 0, 0, t1073, t1205, -t1072, t1053; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1152, t1147, t1179, t1122, 0, 0, 0, 0, 0, 0, t1199, t1088, t1193, t1060, 0, 0, 0, 0, 0, 0, t1199, t1193, -t1088, t1056; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1146, t1151, -t1180, t1121, 0, 0, 0, 0, 0, 0, -t1093, -t1171, t1105, -t1102, 0, 0, 0, 0, 0, 0, -t1092, t1105, t1171, -t1062; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1141, t1139, -t1145, -t1130, 0, 0, 0, 0, 0, 0, t1200, t1086, t1194, t1059, 0, 0, 0, 0, 0, 0, t1200, t1194, -t1086, t1055; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1195, t1106, t1173, t1081, 0, 0, 0, 0, 0, 0, t1195, t1173, -t1106, t1061; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1107, t1196, -t1098, t1080, 0, 0, 0, 0, 0, 0, -t1107, -t1098, -t1196, -t1063; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1093, t1171, -t1105, t1102, 0, 0, 0, 0, 0, 0, t1092, -t1105, -t1171, t1062; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1195, t1173, -t1106, t1061; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1092, -t1105, -t1171, t1062; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1107, t1098, t1196, t1063;];
f_new_reg = t1;
