% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RRRP7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d3]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:21
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RRRP7_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRRP7_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRRP7_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRRP7_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRRP7_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4RRRP7_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:21:15
% EndTime: 2019-12-31 17:21:22
% DurationCPUTime: 7.03s
% Computational Cost: add. (12854->432), mult. (26002->500), div. (0->0), fcn. (16411->6), ass. (0->284)
t896 = cos(qJ(3));
t893 = sin(qJ(3));
t894 = sin(qJ(2));
t943 = qJD(1) * t894;
t852 = -t896 * qJD(2) + t893 * t943;
t897 = cos(qJ(2));
t940 = qJD(1) * qJD(2);
t884 = t897 * t940;
t939 = t894 * qJDD(1);
t858 = t884 + t939;
t909 = -t893 * qJDD(2) - t896 * t858;
t801 = -t852 * qJD(3) - t909;
t941 = t897 * qJD(1);
t880 = -qJD(3) + t941;
t970 = t852 * t880;
t995 = t801 + t970;
t965 = t893 * t995;
t854 = t893 * qJD(2) + t896 * t943;
t929 = t896 * qJDD(2) - t893 * t858;
t800 = t854 * qJD(3) - t929;
t836 = t854 * t880;
t997 = t800 - t836;
t716 = t896 * t997 + t965;
t848 = t854 ^ 2;
t979 = t852 ^ 2;
t992 = t848 - t979;
t692 = t897 * t716 - t894 * t992;
t714 = -t893 * t997 + t896 * t995;
t895 = sin(qJ(1));
t898 = cos(qJ(1));
t1052 = t895 * t692 + t898 * t714;
t1051 = t898 * t692 - t895 * t714;
t978 = t880 ^ 2;
t829 = t979 - t978;
t813 = t854 * t852;
t883 = t894 * t940;
t937 = t897 * qJDD(1);
t859 = -t883 + t937;
t849 = -qJDD(3) + t859;
t993 = -t813 + t849;
t962 = t893 * t993;
t747 = t896 * t829 + t962;
t769 = t800 + t836;
t709 = t897 * t747 - t894 * t769;
t950 = t896 * t993;
t743 = t893 * t829 - t950;
t1050 = t895 * t709 - t898 * t743;
t1049 = t898 * t709 + t895 * t743;
t803 = t978 + t848;
t731 = t896 * t803 - t962;
t1048 = pkin(1) * t731;
t1047 = pkin(2) * t731;
t1046 = pkin(6) * t731;
t738 = t893 * t803 + t950;
t1045 = pkin(6) * t738;
t1044 = t894 * t738;
t1043 = t895 * t731;
t1041 = t897 * t738;
t1040 = t898 * t731;
t705 = t894 * t747 + t897 * t769;
t690 = t894 * t716 + t897 * t992;
t830 = t848 - t978;
t994 = -t813 - t849;
t961 = t893 * t994;
t1020 = -t896 * t830 + t961;
t949 = t896 * t994;
t1019 = t893 * t830 + t949;
t996 = t801 - t970;
t1028 = t1019 * t897 + t894 * t996;
t1038 = -t1020 * t898 + t1028 * t895;
t1037 = t1020 * t895 + t1028 * t898;
t990 = -t978 - t979;
t1003 = t896 * t990 - t961;
t1016 = t1003 * t894 - t897 * t997;
t1036 = pkin(1) * t1016;
t1035 = pkin(5) * t1016;
t1004 = t893 * t990 + t949;
t1015 = t1003 * t897 + t894 * t997;
t1030 = -pkin(1) * t1004 + pkin(5) * t1015;
t1029 = t1019 * t894 - t897 * t996;
t1027 = pkin(4) * (-t1004 * t898 + t1015 * t895);
t1026 = pkin(4) * (t1004 * t895 + t1015 * t898);
t1024 = pkin(2) * t1004;
t1023 = pkin(6) * t1003;
t1022 = pkin(6) * t1004;
t1021 = qJ(4) * t995;
t991 = t848 + t979;
t1014 = pkin(2) * t991;
t1013 = t894 * t991;
t1009 = t897 * t991;
t871 = t898 * g(1) + t895 * g(2);
t899 = qJD(1) ^ 2;
t842 = -t899 * pkin(1) + qJDD(1) * pkin(5) - t871;
t975 = pkin(2) * t897;
t923 = -pkin(6) * t894 - t975;
t856 = t923 * qJD(1);
t972 = t897 * g(3);
t977 = qJD(2) ^ 2;
t786 = -qJDD(2) * pkin(2) - t977 * pkin(6) + (qJD(1) * t856 + t842) * t894 + t972;
t1005 = t800 * pkin(3) - t1021 + t786;
t969 = t880 * t893;
t757 = t896 * t800 + t852 * t969;
t968 = t880 * t896;
t934 = t852 * t968;
t907 = t893 * t800 - t934;
t935 = t894 * t813;
t982 = t897 * t907 - t935;
t1002 = t898 * t757 + t895 * t982;
t1001 = -t895 * t757 + t898 * t982;
t826 = t854 * t969;
t919 = -t826 + t934;
t981 = -t894 * t849 + t897 * t919;
t998 = (t852 * t893 + t854 * t896) * t880;
t1000 = t895 * t998 + t898 * t981;
t999 = t895 * t981 - t898 * t998;
t942 = qJD(4) * t880;
t868 = -0.2e1 * t942;
t870 = t895 * g(1) - t898 * g(2);
t841 = qJDD(1) * pkin(1) + t899 * pkin(5) + t870;
t913 = -t859 + t883;
t914 = t858 + t884;
t766 = pkin(2) * t913 - pkin(6) * t914 - t841;
t825 = -t894 * g(3) + t897 * t842;
t787 = -t977 * pkin(2) + qJDD(2) * pkin(6) + t856 * t941 + t825;
t722 = t893 * t766 + t896 * t787;
t806 = t852 * pkin(3) - t854 * qJ(4);
t912 = -pkin(3) * t978 - t849 * qJ(4) - t852 * t806 + t722;
t683 = t868 + t912;
t721 = -t896 * t766 + t893 * t787;
t685 = t849 * pkin(3) - qJ(4) * t978 + t854 * t806 + qJDD(4) + t721;
t666 = t896 * t683 + t893 * t685;
t684 = (-pkin(3) * t880 - 0.2e1 * qJD(4)) * t854 + t1005;
t931 = qJ(4) * t893 + pkin(2);
t974 = pkin(3) * t896;
t988 = -(t931 + t974) * t684 + pkin(6) * t666;
t760 = t893 * t801 - t854 * t968;
t761 = t896 * t801 + t826;
t920 = t897 * t761 + t935;
t987 = -t898 * t760 + t895 * t920;
t901 = 0.2e1 * qJD(4) * t854 - t1005;
t676 = (-t997 + t836) * pkin(3) + t901;
t986 = t896 * t676 - t931 * t997 + t1023;
t675 = pkin(3) * t836 + t1021 + t901;
t985 = -t1045 + t893 * t675 + (pkin(2) + t974) * t995;
t984 = t897 * t849 + t894 * t919;
t933 = t897 * t813;
t983 = t894 * t907 + t933;
t980 = t895 * t760 + t898 * t920;
t976 = pkin(2) * t894;
t971 = qJ(4) * t896;
t889 = t894 ^ 2;
t967 = t889 * t899;
t964 = t893 * t996;
t963 = t893 * t786;
t958 = t894 * t841;
t879 = t897 * t899 * t894;
t866 = qJDD(2) + t879;
t956 = t894 * t866;
t867 = qJDD(2) - t879;
t955 = t894 * t867;
t952 = t896 * t996;
t951 = t896 * t786;
t946 = t897 * t841;
t945 = t897 * t867;
t890 = t897 ^ 2;
t944 = t889 + t890;
t938 = t895 * qJDD(1);
t936 = t898 * qJDD(1);
t679 = t893 * t721 + t896 * t722;
t824 = t894 * t842 + t972;
t778 = t894 * t824 + t897 * t825;
t930 = -t895 * t870 - t898 * t871;
t927 = t895 * t879;
t926 = t898 * t879;
t924 = -pkin(2) * t786 + pkin(6) * t679;
t863 = -t895 * t899 + t936;
t922 = -pkin(4) * t863 - t895 * g(3);
t921 = t894 * t761 - t933;
t918 = -pkin(3) * t685 + qJ(4) * t683;
t917 = -pkin(3) * t996 - qJ(4) * t769;
t678 = -t896 * t721 + t893 * t722;
t777 = t897 * t824 - t894 * t825;
t910 = t898 * t870 - t895 * t871;
t906 = -pkin(2) * t997 + t1023 - t951;
t775 = (qJD(3) - t880) * t852 + t909;
t905 = pkin(2) * t775 + t1045 + t963;
t770 = (-qJD(3) - t880) * t854 + t929;
t719 = t896 * t770 + t964;
t904 = pkin(6) * t719 + t1014 + t679;
t677 = pkin(3) * t991 + t683;
t680 = qJ(4) * t991 + t685;
t717 = -t896 * t769 + t964;
t903 = pkin(6) * t717 + t896 * t677 + t893 * t680 + t1014;
t902 = pkin(3) * t803 - qJ(4) * t993 + t912;
t900 = pkin(3) * t994 + qJ(4) * t990 - t685;
t887 = t890 * t899;
t877 = -t887 - t977;
t876 = t887 - t977;
t875 = -t967 - t977;
t874 = -t967 + t977;
t865 = -t887 + t967;
t864 = t887 + t967;
t862 = t898 * t899 + t938;
t861 = t944 * qJDD(1);
t860 = -0.2e1 * t883 + t937;
t857 = 0.2e1 * t884 + t939;
t851 = t897 * t866;
t850 = t944 * t940;
t838 = -pkin(4) * t862 + t898 * g(3);
t828 = t897 * t858 - t889 * t940;
t827 = -t894 * t859 - t890 * t940;
t823 = -t894 * t875 - t945;
t822 = -t894 * t874 + t851;
t821 = t897 * t877 - t956;
t820 = t897 * t876 - t955;
t819 = t897 * t875 - t955;
t818 = t897 * t874 + t956;
t817 = t894 * t877 + t851;
t816 = t894 * t876 + t945;
t815 = t914 * t894;
t814 = t913 * t897;
t805 = -t894 * t857 + t897 * t860;
t804 = t897 * t857 + t894 * t860;
t789 = -pkin(5) * t819 - t946;
t788 = -pkin(5) * t817 - t958;
t780 = -pkin(1) * t819 + t825;
t779 = -pkin(1) * t817 + t824;
t765 = pkin(1) * t860 + pkin(5) * t821 + t946;
t764 = -pkin(1) * t857 + pkin(5) * t823 - t958;
t740 = pkin(1) * t841 + pkin(5) * t778;
t735 = pkin(1) * t864 + pkin(5) * t861 + t778;
t715 = t893 * t770 - t952;
t713 = -t893 * t769 - t952;
t711 = t951 + t1046;
t702 = t963 - t1022;
t700 = -t894 * t775 + t1041;
t698 = t897 * t775 + t1044;
t696 = -t894 * t995 - t1041;
t694 = t897 * t995 - t1044;
t689 = t897 * t719 - t1013;
t688 = t897 * t717 - t1013;
t687 = t894 * t719 + t1009;
t686 = t894 * t717 + t1009;
t682 = t722 + t1047;
t681 = t721 - t1024;
t674 = -pkin(2) * t713 - t917;
t673 = t897 * t679 + t894 * t786;
t672 = t894 * t679 - t897 * t786;
t671 = -pkin(1) * t698 - t905;
t670 = -t900 - t1024;
t669 = -t906 - t1036;
t668 = -t902 + 0.2e1 * t942 - t1047;
t667 = -pkin(6) * t715 - t678;
t665 = t893 * t683 - t896 * t685;
t664 = -t893 * t676 - t971 * t997 - t1022;
t663 = -pkin(3) * t965 + t896 * t675 - t1046;
t662 = -pkin(5) * t698 - t894 * t682 + t897 * t711;
t661 = -t894 * t681 + t897 * t702 - t1035;
t660 = pkin(5) * t700 + t897 * t682 + t894 * t711 + t1048;
t659 = t897 * t666 + t894 * t684;
t658 = t894 * t666 - t897 * t684;
t657 = -pkin(1) * t687 - t904;
t656 = -pkin(1) * t672 - t924;
t655 = t897 * t681 + t894 * t702 + t1030;
t654 = -t986 - t1036;
t653 = -pkin(6) * t713 - t893 * t677 + t896 * t680;
t652 = -pkin(1) * t694 - t985;
t651 = -pkin(5) * t687 + t897 * t667 + t715 * t976;
t650 = -pkin(6) * t665 + (pkin(3) * t893 - t971) * t684;
t649 = -pkin(2) * t665 - t918;
t648 = -pkin(5) * t672 + (-pkin(6) * t897 + t976) * t678;
t647 = pkin(5) * t689 + t894 * t667 + (-pkin(1) - t975) * t715;
t646 = -pkin(1) * t686 - t903;
t645 = t897 * t664 - t894 * t670 - t1035;
t644 = -pkin(5) * t694 + t897 * t663 - t894 * t668;
t643 = t894 * t664 + t897 * t670 + t1030;
t642 = pkin(5) * t696 + t894 * t663 + t897 * t668 - t1048;
t641 = pkin(5) * t673 + (-pkin(1) + t923) * t678;
t640 = -pkin(5) * t686 + t897 * t653 - t894 * t674;
t639 = -pkin(1) * t713 + pkin(5) * t688 + t894 * t653 + t897 * t674;
t638 = -pkin(1) * t658 - t988;
t637 = -pkin(5) * t658 - t894 * t649 + t897 * t650;
t636 = -pkin(1) * t665 + pkin(5) * t659 + t897 * t649 + t894 * t650;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t863, 0, -t862, 0, t922, -t838, -t910, -pkin(4) * t910, t898 * t828 - t927, t898 * t805 + t895 * t865, t898 * t822 + t894 * t938, t898 * t827 + t927, t898 * t820 + t895 * t937, t895 * qJDD(2) + t898 * t850, t898 * t788 - t895 * t779 - pkin(4) * (t895 * t821 + t898 * t860), t898 * t789 - t895 * t780 - pkin(4) * (t895 * t823 - t898 * t857), t898 * t777 - pkin(4) * (t895 * t861 + t898 * t864), -pkin(4) * (t895 * t778 + t898 * t841) - (t895 * pkin(1) - t898 * pkin(5)) * t777, t980, -t1051, t1037, t1001, t1049, t1000, t898 * t661 - t895 * t669 - t1027, t898 * t662 - t895 * t671 - pkin(4) * (t895 * t700 + t1040), t898 * t651 - t895 * t657 - pkin(4) * (t895 * t689 - t898 * t715), t898 * t648 - t895 * t656 - pkin(4) * (t895 * t673 - t898 * t678), t980, t1037, t1051, t1000, -t1049, t1001, t898 * t645 - t895 * t654 - t1027, t898 * t640 - t895 * t646 - pkin(4) * (t895 * t688 - t898 * t713), t898 * t644 - t895 * t652 - pkin(4) * (t895 * t696 - t1040), t898 * t637 - t895 * t638 - pkin(4) * (t895 * t659 - t898 * t665); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t862, 0, t863, 0, t838, t922, t930, pkin(4) * t930, t895 * t828 + t926, t895 * t805 - t898 * t865, t895 * t822 - t894 * t936, t895 * t827 - t926, t895 * t820 - t897 * t936, -t898 * qJDD(2) + t895 * t850, t895 * t788 + t898 * t779 + pkin(4) * (t898 * t821 - t895 * t860), t895 * t789 + t898 * t780 + pkin(4) * (t898 * t823 + t895 * t857), t895 * t777 + pkin(4) * (t898 * t861 - t895 * t864), pkin(4) * (t898 * t778 - t895 * t841) - (-t898 * pkin(1) - t895 * pkin(5)) * t777, t987, -t1052, t1038, t1002, t1050, t999, t895 * t661 + t898 * t669 + t1026, t895 * t662 + t898 * t671 + pkin(4) * (t898 * t700 - t1043), t895 * t651 + t898 * t657 + pkin(4) * (t898 * t689 + t895 * t715), t895 * t648 + t898 * t656 + pkin(4) * (t898 * t673 + t895 * t678), t987, t1038, t1052, t999, -t1050, t1002, t895 * t645 + t898 * t654 + t1026, t895 * t640 + t898 * t646 + pkin(4) * (t898 * t688 + t895 * t713), t895 * t644 + t898 * t652 + pkin(4) * (t898 * t696 + t1043), t895 * t637 + t898 * t638 + pkin(4) * (t898 * t659 + t895 * t665); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t870, t871, 0, 0, t815, t804, t818, -t814, t816, 0, t765, t764, t735, t740, t921, -t690, t1029, t983, t705, t984, t655, t660, t647, t641, t921, t1029, t690, t984, -t705, t983, t643, t639, t642, t636; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t899, 0, 0, -g(3), -t870, 0, t828, t805, t822, t827, t820, t850, t788, t789, t777, pkin(5) * t777, t920, -t692, t1028, t982, t709, t981, t661, t662, t651, t648, t920, t1028, t692, t981, -t709, t982, t645, t640, t644, t637; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t899, 0, qJDD(1), 0, g(3), 0, -t871, 0, t879, -t865, -t939, -t879, -t937, -qJDD(2), t779, t780, 0, pkin(1) * t777, -t760, -t714, -t1020, t757, -t743, -t998, t669, t671, t657, t656, -t760, -t1020, t714, -t998, t743, t757, t654, t646, t652, t638; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t870, t871, 0, 0, t815, t804, t818, -t814, t816, 0, t765, t764, t735, t740, t921, -t690, t1029, t983, t705, t984, t655, t660, t647, t641, t921, t1029, t690, t984, -t705, t983, t643, t639, t642, t636; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t858, t860, t866, -t884, t876, t884, 0, -t841, t824, 0, t761, -t716, t1019, t907, t747, t919, t702, t711, t667, -pkin(6) * t678, t761, t1019, t716, t919, -t747, t907, t664, t653, t663, t650; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t883, t857, t874, t859, t867, -t883, t841, 0, t825, 0, -t813, -t992, -t996, t813, t769, t849, t681, t682, -pkin(2) * t715, -pkin(2) * t678, -t813, -t996, t992, t849, -t769, t813, t670, t674, t668, t649; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t879, t865, t939, t879, t937, qJDD(2), -t824, -t825, 0, 0, t760, t714, t1020, -t757, t743, t998, t906, t905, t904, t924, t760, t1020, -t714, t998, -t743, -t757, t986, t903, t985, t988; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t801, -t997, t994, -t970, t829, t970, 0, t786, t721, 0, t801, t994, t997, t970, -t829, -t970, -qJ(4) * t997, t680, t675, -qJ(4) * t684; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t836, t995, -t830, -t800, -t993, t836, -t786, 0, t722, 0, -t836, -t830, -t995, t836, t993, -t800, t676, t677, pkin(3) * t995, -pkin(3) * t684; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t813, t992, t996, -t813, -t769, -t849, -t721, -t722, 0, 0, t813, t996, -t992, -t849, t769, -t813, t900, t917, t868 + t902, t918; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t801, t994, t997, t970, -t829, -t970, 0, t685, -t684, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t813, t996, -t992, -t849, t769, -t813, -t685, 0, t683, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t836, t830, t995, -t836, -t993, t800, t684, -t683, 0, 0;];
m_new_reg = t1;
