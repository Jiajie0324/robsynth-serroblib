% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4PRRP3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d2,d3,theta1]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:27
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4PRRP3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4PRRP3_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4PRRP3_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4PRRP3_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4PRRP3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4PRRP3_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:27:00
% EndTime: 2019-12-31 16:27:02
% DurationCPUTime: 2.68s
% Computational Cost: add. (5125->290), mult. (11160->357), div. (0->0), fcn. (6450->6), ass. (0->219)
t546 = sin(pkin(6));
t547 = cos(pkin(6));
t514 = g(1) * t546 - g(2) * t547;
t515 = g(1) * t547 + g(2) * t546;
t550 = sin(qJ(2));
t552 = cos(qJ(2));
t470 = t514 * t550 - t515 * t552;
t568 = t514 * t552 + t515 * t550;
t570 = t470 * t552 - t550 * t568;
t425 = -t470 * t550 - t552 * t568;
t599 = t425 * t547;
t624 = -t546 * t570 + t599;
t600 = t425 * t546;
t623 = t547 * t570 + t600;
t549 = sin(qJ(3));
t551 = cos(qJ(3));
t554 = qJD(2) ^ 2;
t525 = t549 * t554 * t551;
t517 = qJDD(3) + t525;
t611 = pkin(3) * t517;
t580 = t550 * qJDD(2);
t510 = t552 * t554 + t580;
t543 = g(3) - qJDD(1);
t491 = pkin(4) * t510 - t543 * t552;
t579 = t552 * qJDD(2);
t511 = -t550 * t554 + t579;
t561 = -pkin(4) * t511 - t543 * t550;
t616 = t510 * t547 + t511 * t546;
t622 = qJ(1) * t616 + t547 * t491 - t546 * t561;
t465 = -t510 * t546 + t511 * t547;
t621 = -qJ(1) * t465 + t546 * t491 + t547 * t561;
t531 = t551 * t543;
t458 = -pkin(2) * t554 + qJDD(2) * pkin(5) + t470;
t598 = t458 * t549;
t437 = t531 + t598;
t440 = t458 * t551 - t543 * t549;
t396 = t437 * t549 + t440 * t551;
t501 = t551 * t517;
t542 = t551 ^ 2;
t539 = t542 * t554;
t553 = qJD(3) ^ 2;
t523 = -t539 - t553;
t477 = t523 * t549 + t501;
t614 = pkin(2) * t477;
t541 = t549 ^ 2;
t589 = t554 * t541;
t521 = -t553 - t589;
t518 = qJDD(3) - t525;
t590 = t549 * t518;
t479 = t521 * t551 - t590;
t613 = pkin(2) * t479;
t582 = qJD(2) * qJD(3);
t533 = t551 * t582;
t536 = t549 * qJDD(2);
t504 = t536 + t533;
t556 = t531 + (t504 - t533) * qJ(4) - t611;
t581 = (qJD(2) * qJD(4));
t567 = t458 + (2 * t581);
t401 = t549 * t567 + t556;
t612 = pkin(3) * t401;
t591 = t549 * t517;
t481 = t523 * t551 - t591;
t532 = t549 * t582;
t537 = t551 * qJDD(2);
t506 = t537 - 0.2e1 * t532;
t438 = t481 * t550 + t506 * t552;
t610 = pkin(4) * t438;
t595 = t518 * t551;
t483 = -t521 * t549 - t595;
t503 = t536 + 0.2e1 * t533;
t439 = t483 * t550 - t503 * t552;
t609 = pkin(4) * t439;
t584 = t541 + t542;
t509 = t584 * qJDD(2);
t512 = t539 + t589;
t467 = t509 * t550 + t512 * t552;
t608 = pkin(4) * t467;
t607 = pkin(5) * t477;
t606 = pkin(5) * t479;
t441 = t481 * t552 - t506 * t550;
t605 = qJ(1) * (t438 * t547 + t441 * t546);
t442 = t483 * t552 + t503 * t550;
t604 = qJ(1) * (t439 * t547 + t442 * t546);
t468 = t509 * t552 - t512 * t550;
t603 = qJ(1) * (t467 * t547 + t468 * t546);
t601 = t401 * t551;
t594 = t546 * t543;
t593 = t547 * t543;
t592 = t549 * t401;
t457 = -qJDD(2) * pkin(2) - pkin(5) * t554 - t568;
t445 = t549 * t457;
t446 = t551 * t457;
t588 = -pkin(2) * t457 + pkin(5) * t396;
t587 = pkin(2) * t506 + pkin(5) * t481;
t586 = -pkin(2) * t503 + pkin(5) * t483;
t585 = pkin(2) * t512 + pkin(5) * t509;
t583 = qJD(2) * t549;
t578 = pkin(3) * t536;
t577 = t445 + t586;
t576 = -t446 + t587;
t575 = t551 * t581;
t574 = t549 * t579;
t573 = t549 * t580;
t572 = -pkin(1) * t477 + pkin(4) * t441;
t571 = -pkin(1) * t479 + pkin(4) * t442;
t569 = -t514 * t546 - t515 * t547;
t566 = t550 * t525;
t565 = t552 * t525;
t528 = 0.2e1 * t575;
t505 = t537 - t532;
t516 = qJD(3) * pkin(3) - qJ(4) * t583;
t560 = pkin(3) * t539 - qJ(4) * t505 + qJD(3) * t516 - t440;
t403 = t528 - t560;
t388 = pkin(3) * t512 + qJ(4) * t537 + t403;
t400 = (qJ(4) * qJDD(2) + t567) * t549 + t556;
t564 = t388 * t551 + t400 * t549 + t585;
t416 = -pkin(3) * t505 - qJ(4) * t539 + t516 * t583 + qJDD(4) + t457;
t412 = -qJ(4) * t521 + t416;
t473 = -pkin(3) * t503 - qJ(4) * t518;
t563 = t412 * t549 + t473 * t551 + t586;
t562 = t585 + t396;
t395 = t437 * t551 - t440 * t549;
t559 = t514 * t547 - t515 * t546;
t371 = t403 * t551 + t592;
t373 = -pkin(3) * t416 + qJ(4) * t403;
t558 = -pkin(2) * t416 + pkin(5) * t371 + qJ(4) * t592 + t373 * t551;
t399 = pkin(3) * t506 + qJ(4) * t523 - t416;
t557 = -qJ(4) * t591 + t399 * t551 + t587;
t555 = pkin(3) * t521 + t560;
t522 = t539 - t553;
t520 = t553 - t589;
t513 = -t539 + t589;
t500 = t584 * t582;
t487 = qJDD(3) * t550 + t500 * t552;
t486 = t504 * t551 - t541 * t582;
t485 = -qJDD(3) * t552 + t500 * t550;
t484 = -t505 * t549 - t542 * t582;
t482 = -t520 * t549 + t501;
t480 = t522 * t551 - t590;
t478 = t520 * t551 + t591;
t476 = t522 * t549 + t595;
t475 = (t504 + t533) * t549;
t474 = (t505 - t532) * t551;
t463 = pkin(1) * t467;
t462 = pkin(4) * t468;
t460 = -t503 * t549 + t506 * t551;
t459 = t503 * t551 + t506 * t549;
t455 = t486 * t552 - t566;
t454 = t484 * t552 + t566;
t453 = t486 * t550 + t565;
t452 = t484 * t550 - t565;
t451 = t482 * t552 + t573;
t450 = t480 * t552 + t537 * t550;
t449 = t482 * t550 - t574;
t448 = t480 * t550 - t551 * t579;
t444 = -pkin(1) * t510 - t470;
t443 = pkin(1) * t511 + t568;
t436 = pkin(1) * t439;
t435 = pkin(1) * t438;
t430 = t460 * t552 + t513 * t550;
t429 = t460 * t550 - t513 * t552;
t428 = -t485 * t546 + t487 * t547;
t427 = t485 * t547 + t487 * t546;
t422 = pkin(1) * t425;
t421 = t446 - t606;
t420 = t445 - t607;
t418 = qJ(1) * (-t467 * t546 + t468 * t547);
t417 = pkin(1) * t543 + pkin(4) * t570;
t415 = t440 - t613;
t414 = t437 - t614;
t411 = -t453 * t546 + t455 * t547;
t410 = -t452 * t546 + t454 * t547;
t409 = t453 * t547 + t455 * t546;
t408 = t452 * t547 + t454 * t546;
t407 = -t449 * t546 + t451 * t547;
t406 = -t448 * t546 + t450 * t547;
t405 = t449 * t547 + t451 * t546;
t404 = t448 * t547 + t450 * t546;
t390 = qJ(1) * (-t439 * t546 + t442 * t547);
t389 = qJ(1) * (-t438 * t546 + t441 * t547);
t386 = -t429 * t546 + t430 * t547;
t385 = t429 * t547 + t430 * t546;
t384 = t528 - t555 - t613;
t383 = t401 - t611 - t614;
t382 = t436 + t577;
t381 = t435 + t576;
t380 = t395 * t552 - t608;
t379 = t395 * t550 + t462;
t378 = t396 * t552 + t457 * t550;
t377 = t396 * t550 - t457 * t552;
t376 = -qJ(4) * t501 - t399 * t549 - t607;
t375 = t412 * t551 - t473 * t549 - t606;
t374 = t463 + t562;
t370 = t403 * t549 - t601;
t368 = -t415 * t550 + t421 * t552 - t609;
t367 = -t414 * t550 + t420 * t552 - t610;
t366 = t435 + t557;
t365 = -t388 * t549 + t400 * t551;
t364 = t436 + t563;
t363 = t415 * t552 + t421 * t550 + t571;
t362 = t414 * t552 + t420 * t550 + t572;
t361 = -pkin(3) * t573 + t365 * t552 - t608;
t360 = pkin(3) * t574 + t365 * t550 + t462;
t359 = t371 * t552 + t416 * t550;
t358 = t371 * t550 - t416 * t552;
t357 = t463 + t564;
t356 = -pkin(2) * t370 + t612;
t355 = pkin(1) * t377 + t588;
t354 = t375 * t552 - t384 * t550 - t609;
t353 = t376 * t552 - t383 * t550 - t610;
t352 = t375 * t550 + t384 * t552 + t571;
t351 = t376 * t550 + t383 * t552 + t572;
t350 = -pkin(4) * t377 - (pkin(2) * t550 - pkin(5) * t552) * t395;
t349 = -pkin(5) * t370 + qJ(4) * t601 - t373 * t549;
t348 = pkin(4) * t378 - (-pkin(2) * t552 - pkin(5) * t550 - pkin(1)) * t395;
t347 = pkin(1) * t358 + t558;
t346 = -pkin(4) * t358 + t349 * t552 - t356 * t550;
t345 = -pkin(1) * t370 + pkin(4) * t359 + t349 * t550 + t356 * t552;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t594, -t593, -t559, -qJ(1) * t559, 0, 0, t465, 0, -t616, 0, t621, t622, t624, pkin(4) * t599 + qJ(1) * t624 - t546 * t417, t411, t386, t407, t410, t406, t428, -t362 * t546 + t367 * t547 - t605, -t363 * t546 + t368 * t547 - t604, -t379 * t546 + t380 * t547 - t603, t547 * t350 - t546 * t348 - qJ(1) * (t377 * t547 + t378 * t546), t411, t386, t407, t410, t406, t428, -t351 * t546 + t353 * t547 - t605, -t352 * t546 + t354 * t547 - t604, -t360 * t546 + t361 * t547 - t603, t547 * t346 - t546 * t345 - qJ(1) * (t358 * t547 + t359 * t546); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t593, -t594, t569, qJ(1) * t569, 0, 0, t616, 0, t465, 0, -t622, t621, t623, pkin(4) * t600 + qJ(1) * t623 + t547 * t417, t409, t385, t405, t408, t404, t427, t362 * t547 + t367 * t546 + t389, t363 * t547 + t368 * t546 + t390, t379 * t547 + t380 * t546 + t418, t546 * t350 + t547 * t348 + qJ(1) * (-t377 * t546 + t378 * t547), t409, t385, t405, t408, t404, t427, t351 * t547 + t353 * t546 + t389, t352 * t547 + t354 * t546 + t390, t360 * t547 + t361 * t546 + t418, t546 * t346 + t547 * t345 + qJ(1) * (-t358 * t546 + t359 * t547); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t514, t515, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t443, t444, 0, -t422, t475, t459, t478, t474, t476, 0, t381, t382, t374, t355, t475, t459, t478, t474, t476, 0, t366, t364, t357, t347; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t543, -t514, 0, 0, 0, t511, 0, -t510, 0, t561, t491, t425, pkin(4) * t425, t455, t430, t451, t454, t450, t487, t367, t368, t380, t350, t455, t430, t451, t454, t450, t487, t353, t354, t361, t346; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t543, 0, -t515, 0, 0, 0, t510, 0, t511, 0, -t491, t561, t570, t417, t453, t429, t449, t452, t448, t485, t362, t363, t379, t348, t453, t429, t449, t452, t448, t485, t351, t352, t360, t345; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t514, t515, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t443, t444, 0, -t422, t475, t459, t478, t474, t476, 0, t381, t382, t374, t355, t475, t459, t478, t474, t476, 0, t366, t364, t357, t347; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t554, 0, 0, -t543, -t568, 0, t486, t460, t482, t484, t480, t500, t420, t421, t395, pkin(5) * t395, t486, t460, t482, t484, t480, t500, t376, t375, t365, t349; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t554, 0, qJDD(2), 0, t543, 0, t470, 0, t525, -t513, -t536, -t525, -t537, -qJDD(3), t414, t415, 0, pkin(2) * t395, t525, -t513, -t536, -t525, -t537, -qJDD(3), t383, t384, t578, t356; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t568, -t470, 0, 0, t475, t459, t478, t474, t476, 0, t576, t577, t562, t588, t475, t459, t478, t474, t476, 0, t557, t563, t564, t558; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t504, t506, t517, -t533, t522, t533, 0, t457, t437, 0, t504, t506, t517, -t533, t522, t533, -qJ(4) * t517, t412, t400, qJ(4) * t401; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t532, t503, t520, t505, t518, -t532, -t457, 0, t440, 0, t532, t503, t520, t505, t518, -t532, t399, t473, t388, t373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t525, t513, t536, t525, t537, qJDD(3), -t437, -t440, 0, 0, -t525, t513, t536, t525, t537, qJDD(3), -0.2e1 * t549 * t581 - t556 - t598 + t611, t555 - 0.2e1 * t575, -t578, -t612; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t504, t506, t517, -t533, t522, t533, 0, t416, t401, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t532, t503, t520, t505, t518, -t532, -t416, 0, t403, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t525, t513, t536, t525, t537, qJDD(3), -t401, -t403, 0, 0;];
m_new_reg = t1;
