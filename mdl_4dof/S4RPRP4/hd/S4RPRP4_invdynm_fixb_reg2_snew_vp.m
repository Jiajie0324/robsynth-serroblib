% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RPRP4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,theta2]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:44
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RPRP4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RPRP4_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RPRP4_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RPRP4_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RPRP4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4RPRP4_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:43:58
% EndTime: 2019-12-31 16:44:02
% DurationCPUTime: 3.61s
% Computational Cost: add. (5737->321), mult. (11830->367), div. (0->0), fcn. (6221->6), ass. (0->220)
t600 = qJD(3) ^ 2;
t596 = sin(qJ(3));
t587 = t596 ^ 2;
t601 = qJD(1) ^ 2;
t657 = t587 * t601;
t568 = t600 + t657;
t598 = cos(qJ(3));
t573 = t598 * t601 * t596;
t565 = qJDD(3) - t573;
t640 = t598 * t565;
t523 = -t596 * t568 + t640;
t632 = qJD(1) * qJD(3);
t580 = t598 * t632;
t630 = t596 * qJDD(1);
t552 = 0.2e1 * t580 + t630;
t592 = sin(pkin(6));
t593 = cos(pkin(6));
t474 = t592 * t523 + t593 * t552;
t477 = t593 * t523 - t592 * t552;
t597 = sin(qJ(1));
t599 = cos(qJ(1));
t695 = pkin(4) * (t597 * t474 - t599 * t477);
t694 = pkin(4) * (t599 * t474 + t597 * t477);
t693 = pkin(1) * t474;
t692 = qJ(2) * t474;
t648 = t596 * t565;
t517 = t598 * t568 + t648;
t691 = -pkin(1) * t517 + qJ(2) * t477;
t579 = t596 * t632;
t629 = t598 * qJDD(1);
t555 = -0.2e1 * t579 + t629;
t641 = t598 * t555;
t651 = t596 * t552;
t501 = -t641 + t651;
t588 = t598 ^ 2;
t563 = (t587 - t588) * t601;
t464 = t592 * t501 + t593 * t563;
t467 = t593 * t501 - t592 * t563;
t688 = t599 * t464 + t597 * t467;
t687 = t597 * t464 - t599 * t467;
t656 = t588 * t601;
t570 = -t600 + t656;
t521 = -t598 * t570 + t648;
t486 = t592 * t521 + t593 * t629;
t489 = t593 * t521 - t592 * t629;
t686 = t599 * t486 + t597 * t489;
t685 = t597 * t486 - t599 * t489;
t567 = t599 * g(1) + t597 * g(2);
t550 = -t601 * pkin(1) - t567;
t566 = t597 * g(1) - t599 * g(2);
t608 = qJDD(1) * pkin(1) + t566;
t496 = t592 * t550 - t593 * t608;
t497 = t593 * t550 + t592 * t608;
t623 = t592 * t496 + t593 * t497;
t453 = t593 * t496 - t592 * t497;
t639 = t599 * t453;
t684 = -t597 * t623 + t639;
t645 = t597 * t453;
t683 = t599 * t623 + t645;
t682 = -pkin(2) * t552 - pkin(5) * t523;
t680 = pkin(2) * t517;
t679 = pkin(5) * t517;
t484 = -t601 * pkin(2) + qJDD(1) * pkin(5) + t497;
t589 = g(3) - qJDD(2);
t578 = t598 * t589;
t613 = -pkin(3) * t598 - qJ(4) * t596;
t634 = t601 * t613;
t450 = -qJDD(3) * pkin(3) - t600 * qJ(4) + (t484 + t634) * t596 + qJDD(4) + t578;
t564 = qJDD(3) + t573;
t571 = -t600 - t656;
t678 = pkin(3) * t564 + qJ(4) * t571 - t450;
t553 = t580 + t630;
t677 = t553 + t580;
t557 = t592 * qJDD(1) + t593 * t601;
t532 = qJ(2) * t557 - t593 * t589;
t558 = t593 * qJDD(1) - t592 * t601;
t610 = -qJ(2) * t558 - t592 * t589;
t670 = t599 * t557 + t597 * t558;
t676 = pkin(4) * t670 + t599 * t532 - t597 * t610;
t504 = -t597 * t557 + t599 * t558;
t675 = -pkin(4) * t504 + t597 * t532 + t599 * t610;
t465 = t596 * t484 + t578;
t468 = t598 * t484 - t596 * t589;
t426 = t596 * t465 + t598 * t468;
t513 = t596 * t570 + t640;
t544 = t598 * t564;
t514 = t596 * t571 + t544;
t667 = pkin(2) * t514;
t649 = t596 * t564;
t520 = t598 * t571 - t649;
t473 = t592 * t520 + t593 * t555;
t476 = t593 * t520 - t592 * t555;
t664 = pkin(4) * (t599 * t473 + t597 * t476);
t635 = t587 + t588;
t559 = t635 * qJDD(1);
t562 = t635 * t601;
t506 = t592 * t559 + t593 * t562;
t507 = t593 * t559 - t592 * t562;
t663 = pkin(4) * (t599 * t506 + t597 * t507);
t661 = pkin(5) * t514;
t660 = qJ(2) * t473;
t659 = qJ(2) * t506;
t483 = -qJDD(1) * pkin(2) - t601 * pkin(5) + t496;
t479 = t596 * t483;
t650 = t596 * t555;
t480 = t598 * t483;
t642 = t598 * t552;
t638 = -pkin(2) * t483 + pkin(5) * t426;
t637 = pkin(2) * t555 + pkin(5) * t520;
t636 = pkin(2) * t562 + pkin(5) * t559;
t633 = qJD(1) * t596;
t631 = (qJD(4) * qJD(3));
t628 = t479 + t682;
t627 = -t480 + t637;
t624 = -pkin(1) * t514 + qJ(2) * t476;
t622 = -t597 * t566 - t599 * t567;
t620 = t592 * t573;
t619 = t593 * t573;
t582 = 2 * t631;
t611 = -t600 * pkin(3) + qJDD(3) * qJ(4) + t598 * t634 + t468;
t446 = t582 + t611;
t435 = pkin(3) * t562 + t446;
t437 = qJ(4) * t562 + t450;
t618 = t598 * t435 + t596 * t437 + t636;
t617 = t636 + t426;
t561 = t599 * qJDD(1) - t597 * t601;
t615 = -pkin(4) * t561 - t597 * g(3);
t614 = -pkin(3) * t450 + qJ(4) * t446;
t612 = pkin(3) * t596 - qJ(4) * t598;
t425 = t598 * t465 - t596 * t468;
t498 = t642 + t650;
t609 = t599 * t566 - t597 * t567;
t554 = -t579 + t629;
t605 = -t554 * pkin(3) - t677 * qJ(4) + t483;
t603 = 0.2e1 * qJD(4) * t633 - t605;
t429 = -pkin(3) * t579 + qJ(4) * t552 + t603;
t607 = pkin(3) * t642 + t596 * t429 - t682;
t430 = (t555 - t579) * pkin(3) + t603;
t606 = qJ(4) * t650 + t598 * t430 + t637;
t412 = t598 * t446 + t596 * t450;
t438 = (pkin(3) * qJD(3) - 0.2e1 * qJD(4)) * t633 + t605;
t604 = pkin(5) * t412 + (-pkin(2) + t613) * t438;
t602 = pkin(3) * t568 + qJ(4) * t565 + t611;
t569 = -t600 + t657;
t560 = t597 * qJDD(1) + t599 * t601;
t547 = t612 * qJDD(1);
t543 = t635 * t632;
t534 = -pkin(4) * t560 + t599 * g(3);
t528 = t598 * t553 - t587 * t632;
t527 = -t596 * t554 - t588 * t632;
t526 = t592 * qJDD(3) + t593 * t543;
t525 = -t593 * qJDD(3) + t592 * t543;
t522 = t596 * t569 + t544;
t516 = -t598 * t569 + t649;
t512 = t677 * t596;
t511 = (t554 - t579) * t598;
t503 = pkin(1) * t506;
t502 = qJ(2) * t507;
t494 = t593 * t528 - t620;
t493 = t593 * t527 + t620;
t492 = t592 * t528 + t619;
t491 = t592 * t527 - t619;
t490 = t593 * t522 + t592 * t630;
t487 = t592 * t522 - t593 * t630;
t472 = -pkin(1) * t557 - t497;
t471 = pkin(1) * t558 - t496;
t470 = pkin(1) * t473;
t460 = -t597 * t525 + t599 * t526;
t459 = t599 * t525 + t597 * t526;
t457 = pkin(4) * (-t597 * t506 + t599 * t507);
t456 = t480 + t679;
t455 = t479 - t661;
t449 = pkin(1) * t453;
t448 = t468 + t680;
t447 = t465 - t667;
t445 = pkin(1) * t589 + qJ(2) * t623;
t444 = -t597 * t492 + t599 * t494;
t443 = -t597 * t491 + t599 * t493;
t442 = t599 * t492 + t597 * t494;
t441 = t599 * t491 + t597 * t493;
t440 = -t597 * t487 + t599 * t490;
t439 = t599 * t487 + t597 * t490;
t431 = pkin(4) * (-t597 * t473 + t599 * t476);
t422 = -t667 - t678;
t421 = -t602 - (2 * t631) - t680;
t420 = t470 + t627;
t419 = t628 - t693;
t418 = t593 * t425 - t659;
t417 = t592 * t425 + t502;
t416 = -pkin(3) * t651 + t598 * t429 - t679;
t415 = qJ(4) * t641 - t596 * t430 - t661;
t414 = t593 * t426 + t592 * t483;
t413 = t592 * t426 - t593 * t483;
t411 = t596 * t446 - t598 * t450;
t409 = t503 + t617;
t408 = -t596 * t435 + t598 * t437;
t407 = -t592 * t448 + t593 * t456 + t692;
t406 = -t592 * t447 + t593 * t455 - t660;
t405 = t607 + t693;
t404 = t470 + t606;
t403 = t593 * t448 + t592 * t456 - t691;
t402 = t593 * t447 + t592 * t455 + t624;
t401 = t593 * t408 - t592 * t547 - t659;
t400 = t592 * t408 + t593 * t547 + t502;
t399 = t503 + t618;
t398 = t593 * t412 + t592 * t438;
t397 = t592 * t412 - t593 * t438;
t396 = pkin(1) * t413 + t638;
t395 = -pkin(2) * t411 - t614;
t394 = t593 * t415 - t592 * t422 - t660;
t393 = t593 * t416 - t592 * t421 - t692;
t392 = -pkin(5) * t411 + t612 * t438;
t391 = t592 * t415 + t593 * t422 + t624;
t390 = t592 * t416 + t593 * t421 + t691;
t389 = -qJ(2) * t413 - (pkin(2) * t592 - pkin(5) * t593) * t425;
t388 = qJ(2) * t414 - (-pkin(2) * t593 - pkin(5) * t592 - pkin(1)) * t425;
t387 = pkin(1) * t397 + t604;
t386 = -qJ(2) * t397 + t593 * t392 - t592 * t395;
t385 = -pkin(1) * t411 + qJ(2) * t398 + t592 * t392 + t593 * t395;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t561, 0, -t560, 0, t615, -t534, -t609, -pkin(4) * t609, 0, 0, t504, 0, -t670, 0, t675, t676, t684, pkin(4) * t684 + qJ(2) * t639 - t597 * t445, t444, t687, t440, t443, t685, t460, -t597 * t402 + t599 * t406 - t664, -t597 * t403 + t599 * t407 + t694, -t597 * t417 + t599 * t418 - t663, t599 * t389 - t597 * t388 - pkin(4) * (t599 * t413 + t597 * t414), t444, t440, -t687, t460, -t685, t443, -t597 * t391 + t599 * t394 - t664, -t597 * t400 + t599 * t401 - t663, -t597 * t390 + t599 * t393 - t694, t599 * t386 - t597 * t385 - pkin(4) * (t599 * t397 + t597 * t398); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t560, 0, t561, 0, t534, t615, t622, pkin(4) * t622, 0, 0, t670, 0, t504, 0, -t676, t675, t683, pkin(4) * t683 + qJ(2) * t645 + t599 * t445, t442, -t688, t439, t441, -t686, t459, t599 * t402 + t597 * t406 + t431, t599 * t403 + t597 * t407 + t695, t599 * t417 + t597 * t418 + t457, t597 * t389 + t599 * t388 + pkin(4) * (-t597 * t413 + t599 * t414), t442, t439, t688, t459, t686, t441, t599 * t391 + t597 * t394 + t431, t599 * t400 + t597 * t401 + t457, t599 * t390 + t597 * t393 - t695, t597 * t386 + t599 * t385 + pkin(4) * (-t597 * t397 + t599 * t398); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t566, t567, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t471, t472, 0, -t449, t512, t498, t516, t511, t513, 0, t420, t419, t409, t396, t512, t516, -t498, 0, -t513, t511, t404, t399, t405, t387; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t601, 0, 0, -g(3), -t566, 0, 0, 0, t558, 0, -t557, 0, t610, t532, t453, qJ(2) * t453, t494, -t467, t490, t493, -t489, t526, t406, t407, t418, t389, t494, t490, t467, t526, t489, t493, t394, t401, t393, t386; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t601, 0, qJDD(1), 0, g(3), 0, -t567, 0, 0, 0, t557, 0, t558, 0, -t532, t610, t623, t445, t492, -t464, t487, t491, -t486, t525, t402, t403, t417, t388, t492, t487, t464, t525, t486, t491, t391, t400, t390, t385; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t566, t567, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t471, t472, 0, -t449, t512, t498, t516, t511, t513, 0, t420, t419, t409, t396, t512, t516, -t498, 0, -t513, t511, t404, t399, t405, t387; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t601, 0, 0, -t589, t496, 0, t528, -t501, t522, t527, -t521, t543, t455, t456, t425, pkin(5) * t425, t528, t522, t501, t543, t521, t527, t415, t408, t416, t392; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t601, 0, qJDD(1), 0, t589, 0, t497, 0, t573, -t563, -t630, -t573, -t629, -qJDD(3), t447, t448, 0, pkin(2) * t425, t573, -t630, t563, -qJDD(3), t629, -t573, t422, t547, t421, t395; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t496, -t497, 0, 0, t512, t498, t516, t511, t513, 0, t627, t628, t617, t638, t512, t516, -t498, 0, -t513, t511, t606, t618, t607, t604; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t553, t555, t564, -t580, t570, t580, 0, t483, t465, 0, t553, t564, -t555, t580, -t570, -t580, qJ(4) * t555, t437, t429, -qJ(4) * t438; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t579, t552, -t569, t554, t565, -t579, -t483, 0, t468, 0, t579, -t569, -t552, -t579, -t565, t554, t430, t435, pkin(3) * t552, -pkin(3) * t438; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t573, t563, t630, t573, t629, qJDD(3), -t465, -t468, 0, 0, -t573, t630, -t563, qJDD(3), -t629, t573, t678, -t547, t582 + t602, t614; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t553, t564, -t555, t580, -t570, -t580, 0, t450, -t438, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t573, t630, -t563, qJDD(3), -t629, t573, -t450, 0, t446, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t579, t569, t552, t579, t565, -t554, t438, -t446, 0, 0;];
m_new_reg = t1;
