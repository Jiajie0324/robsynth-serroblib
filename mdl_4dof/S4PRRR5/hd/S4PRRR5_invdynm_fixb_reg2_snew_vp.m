% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4PRRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d2,d3,d4,theta1]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:33
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4PRRR5_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4PRRR5_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4PRRR5_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4PRRR5_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4PRRR5_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4PRRR5_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:33:51
% EndTime: 2019-12-31 16:33:54
% DurationCPUTime: 3.31s
% Computational Cost: add. (8662->292), mult. (12620->399), div. (0->0), fcn. (8512->8), ass. (0->195)
t497 = qJD(2) + qJD(3);
t495 = t497 ^ 2;
t507 = cos(qJ(3));
t496 = qJDD(2) + qJDD(3);
t504 = sin(qJ(3));
t543 = t504 * t496;
t463 = t507 * t495 + t543;
t538 = t507 * t496;
t466 = t504 * t495 - t538;
t505 = sin(qJ(2));
t508 = cos(qJ(2));
t411 = t508 * t463 - t505 * t466;
t501 = sin(pkin(7));
t502 = cos(pkin(7));
t479 = t501 * g(1) - t502 * g(2);
t427 = pkin(5) * t463 - t507 * t479;
t557 = pkin(5) * t466 - t504 * t479;
t362 = pkin(4) * t411 + t508 * t427 - t505 * t557;
t416 = t505 * t463 + t508 * t466;
t561 = pkin(4) * t416 + t505 * t427 + t508 * t557;
t480 = t502 * g(1) + t501 * g(2);
t500 = g(3) - qJDD(1);
t450 = -t508 * t480 - t505 * t500;
t510 = qJD(2) ^ 2;
t448 = -t510 * pkin(2) + t450;
t449 = -t505 * t480 + t508 * t500;
t511 = qJDD(2) * pkin(2) - t449;
t390 = t504 * t448 - t507 * t511;
t391 = t507 * t448 + t504 * t511;
t525 = t504 * t390 + t507 * t391;
t349 = t507 * t390 - t504 * t391;
t537 = t508 * t349;
t336 = -t505 * t525 + t537;
t542 = t505 * t349;
t558 = t508 * t525 + t542;
t383 = -t495 * pkin(3) + t496 * pkin(6) + t391;
t503 = sin(qJ(4));
t506 = cos(qJ(4));
t375 = t503 * t383 + t506 * t479;
t376 = t506 * t383 - t503 * t479;
t343 = t503 * t375 + t506 * t376;
t469 = t502 * t479;
t554 = -t501 * t480 + t469;
t553 = pkin(2) * t349;
t498 = t503 ^ 2;
t552 = t498 * t495;
t551 = t501 * t479;
t549 = t501 * t500;
t548 = t502 * t500;
t382 = -t496 * pkin(3) - t495 * pkin(6) + t390;
t379 = t503 * t382;
t485 = t503 * t495 * t506;
t473 = qJDD(4) + t485;
t547 = t503 * t473;
t474 = qJDD(4) - t485;
t546 = t503 * t474;
t545 = t503 * t496;
t380 = t506 * t382;
t541 = t506 * t473;
t540 = t506 * t474;
t488 = t506 * t496;
t536 = -pkin(3) * t382 + pkin(6) * t343;
t499 = t506 ^ 2;
t535 = t498 + t499;
t534 = qJD(4) * t497;
t509 = qJD(4) ^ 2;
t482 = -t509 - t552;
t435 = -t503 * t482 - t540;
t487 = t506 * t534;
t457 = 0.2e1 * t487 + t545;
t533 = -pkin(3) * t457 + pkin(6) * t435 + t379;
t489 = t499 * t495;
t484 = -t489 - t509;
t433 = t506 * t484 - t547;
t531 = t503 * t534;
t460 = t488 - 0.2e1 * t531;
t532 = pkin(3) * t460 + pkin(6) * t433 - t380;
t462 = t535 * t496;
t467 = t489 + t552;
t410 = t504 * t462 + t507 * t467;
t414 = t507 * t462 - t504 * t467;
t377 = t508 * t410 + t505 * t414;
t519 = pkin(3) * t467 + pkin(6) * t462 + t343;
t512 = pkin(2) * t410 + t519;
t325 = -pkin(1) * t377 - t512;
t378 = -t505 * t410 + t508 * t414;
t530 = qJ(1) * t378 + t325;
t517 = -pkin(2) * t463 - t391;
t357 = pkin(1) * t411 - t517;
t529 = qJ(1) * t416 + t357;
t513 = -pkin(2) * t466 - t390;
t358 = pkin(1) * t416 - t513;
t528 = -qJ(1) * t411 + t358;
t477 = t505 * qJDD(2) + t508 * t510;
t418 = pkin(1) * t477 + t450;
t478 = t508 * qJDD(2) - t505 * t510;
t527 = qJ(1) * t478 - t418;
t419 = -pkin(1) * t478 + t449;
t526 = qJ(1) * t477 - t419;
t524 = t505 * t449 + t508 * t450;
t522 = -t502 * t480 - t551;
t521 = t504 * t485;
t520 = t507 * t485;
t332 = t504 * t343 - t507 * t382;
t518 = pkin(2) * t332 + t536;
t446 = pkin(4) * t477 - t508 * t479;
t516 = -pkin(4) * t478 - t505 * t479;
t342 = t506 * t375 - t503 * t376;
t398 = t508 * t449 - t505 * t450;
t393 = t504 * t435 - t507 * t457;
t515 = pkin(2) * t393 + t533;
t392 = t504 * t433 + t507 * t460;
t514 = pkin(2) * t392 + t532;
t483 = t489 - t509;
t481 = t509 - t552;
t476 = t503 * t487;
t475 = pkin(1) * t479;
t468 = -t489 + t552;
t459 = t488 - t531;
t458 = t487 + t545;
t455 = t535 * t534;
t442 = t504 * qJDD(4) + t507 * t455;
t441 = -t507 * qJDD(4) + t504 * t455;
t437 = t506 * t458 - t498 * t534;
t436 = -t503 * t459 - t499 * t534;
t434 = -t503 * t481 + t541;
t432 = t506 * t483 - t546;
t431 = t506 * t482 - t546;
t430 = t506 * t481 + t547;
t429 = t503 * t484 + t541;
t428 = t503 * t483 + t540;
t421 = t506 * t459 - t476;
t420 = -t503 * t458 - t476;
t409 = -t503 * t457 + t506 * t460;
t408 = t506 * t457 + t503 * t460;
t407 = t507 * t434 + t503 * t543;
t406 = t507 * t432 + t504 * t488;
t405 = t504 * t434 - t503 * t538;
t404 = t504 * t432 - t506 * t538;
t403 = t507 * t437 - t521;
t402 = t507 * t436 + t521;
t401 = t504 * t437 + t520;
t400 = t504 * t436 - t520;
t395 = t507 * t435 + t504 * t457;
t394 = t507 * t433 - t504 * t460;
t388 = -t505 * t441 + t508 * t442;
t387 = t508 * t441 + t505 * t442;
t386 = t507 * t409 + t504 * t468;
t385 = t504 * t409 - t507 * t468;
t384 = pkin(4) * t524 + t475;
t372 = -t505 * t405 + t508 * t407;
t371 = -t505 * t404 + t508 * t406;
t370 = t508 * t405 + t505 * t407;
t369 = t508 * t404 + t505 * t406;
t368 = -t505 * t401 + t508 * t403;
t367 = -t505 * t400 + t508 * t402;
t366 = t508 * t401 + t505 * t403;
t365 = t508 * t400 + t505 * t402;
t364 = -pkin(6) * t431 + t380;
t363 = -pkin(6) * t429 + t379;
t356 = -t505 * t393 + t508 * t395;
t355 = -t505 * t392 + t508 * t394;
t354 = t508 * t393 + t505 * t395;
t353 = t508 * t392 + t505 * t394;
t352 = -pkin(3) * t431 + t376;
t351 = -pkin(3) * t429 + t375;
t346 = pkin(2) * t479 + pkin(5) * t525;
t345 = -t505 * t385 + t508 * t386;
t344 = t508 * t385 + t505 * t386;
t339 = -pkin(5) * t410 + t507 * t342;
t338 = pkin(5) * t414 + t504 * t342;
t333 = t507 * t343 + t504 * t382;
t331 = -pkin(5) * t393 - t504 * t352 + t507 * t364;
t330 = -pkin(5) * t392 - t504 * t351 + t507 * t363;
t329 = -pkin(1) * t354 - t515;
t328 = -pkin(1) * t353 - t514;
t327 = -pkin(2) * t431 + pkin(5) * t395 + t507 * t352 + t504 * t364;
t326 = -pkin(2) * t429 + pkin(5) * t394 + t507 * t351 + t504 * t363;
t324 = pkin(1) * t336 + t553;
t323 = -t505 * t332 + t508 * t333;
t322 = t508 * t332 + t505 * t333;
t321 = pkin(4) * t336 + pkin(5) * t537 - t505 * t346;
t320 = pkin(4) * t558 + pkin(5) * t542 + t508 * t346 + t475;
t319 = -pkin(4) * t377 - t505 * t338 + t508 * t339;
t318 = pkin(4) * t378 + t508 * t338 + t505 * t339;
t317 = -pkin(5) * t332 - (pkin(3) * t504 - pkin(6) * t507) * t342;
t316 = -pkin(4) * t354 - t505 * t327 + t508 * t331;
t315 = -pkin(4) * t353 - t505 * t326 + t508 * t330;
t314 = -pkin(1) * t431 + pkin(4) * t356 + t508 * t327 + t505 * t331;
t313 = -pkin(1) * t429 + pkin(4) * t355 + t508 * t326 + t505 * t330;
t312 = pkin(5) * t333 - (-pkin(3) * t507 - pkin(6) * t504 - pkin(2)) * t342;
t311 = -pkin(1) * t322 - t518;
t310 = -pkin(4) * t322 - t505 * t312 + t508 * t317;
t309 = pkin(1) * t342 + pkin(4) * t323 + t508 * t312 + t505 * t317;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t549, -t548, -t554, -qJ(1) * t554, 0, 0, t502 * t478, 0, -t502 * t477, t501 * qJDD(2), t526 * t501 + t502 * t516, t502 * t446 + t527 * t501, t502 * t398, -qJ(1) * (t501 * t524 + t469) - (t501 * pkin(1) - t502 * pkin(4)) * t398, 0, 0, -t502 * t416, 0, -t502 * t411, t501 * t496, -t528 * t501 + t502 * t561, t502 * t362 - t529 * t501, t502 * t336, t502 * t321 - t501 * t324 - qJ(1) * (t501 * t558 + t469), t502 * t368 - t501 * t420, t502 * t345 + t501 * t408, t502 * t372 + t501 * t430, t502 * t367 + t501 * t421, t502 * t371 + t501 * t428, t502 * t388, t502 * t315 - t501 * t328 - qJ(1) * (t501 * t355 - t502 * t429), t502 * t316 - t501 * t329 - qJ(1) * (t501 * t356 - t502 * t431), t502 * t319 - t501 * t530, t502 * t310 - t501 * t311 - qJ(1) * (t501 * t323 + t342 * t502); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t548, -t549, t522, qJ(1) * t522, 0, 0, t501 * t478, 0, -t501 * t477, -t502 * qJDD(2), t501 * t516 - t526 * t502, t501 * t446 - t527 * t502, t501 * t398, qJ(1) * (t502 * t524 - t551) - (-t502 * pkin(1) - t501 * pkin(4)) * t398, 0, 0, -t501 * t416, 0, -t501 * t411, -t502 * t496, t501 * t561 + t528 * t502, t501 * t362 + t529 * t502, t501 * t336, t501 * t321 + t502 * t324 + qJ(1) * (t502 * t558 - t551), t501 * t368 + t502 * t420, t501 * t345 - t502 * t408, t501 * t372 - t502 * t430, t501 * t367 - t502 * t421, t501 * t371 - t502 * t428, t501 * t388, t501 * t315 + t502 * t328 + qJ(1) * (t502 * t355 + t501 * t429), t501 * t316 + t502 * t329 + qJ(1) * (t502 * t356 + t501 * t431), t501 * t319 + t502 * t530, t501 * t310 + t502 * t311 + qJ(1) * (t502 * t323 - t342 * t501); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t479, t480, 0, 0, 0, 0, t477, 0, t478, 0, -t446, t516, t524, t384, 0, 0, t411, 0, -t416, 0, -t362, t561, t558, t320, t366, t344, t370, t365, t369, t387, t313, t314, t318, t309; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t500, -t479, 0, 0, 0, t478, 0, -t477, 0, t516, t446, t398, pkin(4) * t398, 0, 0, -t416, 0, -t411, 0, t561, t362, t336, t321, t368, t345, t372, t367, t371, t388, t315, t316, t319, t310; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t500, 0, -t480, 0, 0, 0, 0, 0, 0, -qJDD(2), t419, t418, 0, pkin(1) * t398, 0, 0, 0, 0, 0, -t496, t358, t357, 0, t324, t420, -t408, -t430, -t421, -t428, 0, t328, t329, t325, t311; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t479, t480, 0, 0, 0, 0, t477, 0, t478, 0, -t446, t516, t524, t384, 0, 0, t411, 0, -t416, 0, -t362, t561, t558, t320, t366, t344, t370, t365, t369, t387, t313, t314, t318, t309; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t510, 0, 0, -t479, t449, 0, 0, 0, -t466, 0, -t463, 0, t557, t427, t349, pkin(5) * t349, t403, t386, t407, t402, t406, t442, t330, t331, t339, t317; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t510, 0, qJDD(2), 0, t479, 0, t450, 0, 0, 0, t463, 0, -t466, 0, -t427, t557, t525, t346, t401, t385, t405, t400, t404, t441, t326, t327, t338, t312; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t449, -t450, 0, 0, 0, 0, 0, 0, 0, t496, t513, t517, 0, -t553, -t420, t408, t430, t421, t428, 0, t514, t515, t512, t518; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t496, 0, -t495, 0, 0, -t479, t390, 0, t437, t409, t434, t436, t432, t455, t363, t364, t342, pkin(6) * t342; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t495, 0, t496, 0, t479, 0, t391, 0, t485, -t468, -t545, -t485, -t488, -qJDD(4), t351, t352, 0, pkin(3) * t342; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t496, -t390, -t391, 0, 0, -t420, t408, t430, t421, t428, 0, t532, t533, t519, t536; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t458, t460, t473, -t487, t483, t487, 0, t382, t375, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t531, t457, t481, t459, t474, -t531, -t382, 0, t376, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t485, t468, t545, t485, t488, qJDD(4), -t375, -t376, 0, 0;];
m_new_reg = t1;
