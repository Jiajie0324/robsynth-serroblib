% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S4RRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d3,d4]';
% 
% Output:
% tauB_reg [6x(5*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:26
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S4RRRR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRRR4_invdynB_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRRR4_invdynB_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRRR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRRR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RRRR4_invdynB_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:26:20
% EndTime: 2019-12-31 17:26:27
% DurationCPUTime: 5.59s
% Computational Cost: add. (19054->441), mult. (39655->667), div. (0->0), fcn. (27220->8), ass. (0->309)
t495 = sin(qJ(4));
t496 = sin(qJ(3));
t497 = sin(qJ(2));
t500 = cos(qJ(3));
t501 = cos(qJ(2));
t455 = (t496 * t501 + t497 * t500) * qJD(1);
t492 = qJD(2) + qJD(3);
t499 = cos(qJ(4));
t427 = t495 * t455 - t499 * t492;
t429 = t499 * t455 + t495 * t492;
t393 = t429 * t427;
t529 = qJD(1) * qJD(2);
t518 = t501 * t529;
t528 = t497 * qJDD(1);
t463 = t518 + t528;
t487 = t501 * qJDD(1);
t519 = t497 * t529;
t464 = t487 - t519;
t516 = t496 * t463 - t500 * t464;
t398 = -t455 * qJD(3) - t516;
t510 = qJDD(4) - t398;
t559 = -t393 + t510;
t564 = t495 * t559;
t532 = qJD(1) * t497;
t453 = -t500 * t501 * qJD(1) + t496 * t532;
t419 = t455 * t453;
t491 = qJDD(2) + qJDD(3);
t558 = -t419 + t491;
t563 = t496 * t558;
t562 = t499 * t559;
t561 = t500 * t558;
t446 = t492 * t453;
t509 = t453 * qJD(3) - t500 * t463 - t496 * t464;
t560 = t446 + t509;
t361 = -t427 * qJD(4) + t495 * t491 - t499 * t509;
t449 = qJD(4) + t453;
t408 = t449 * t427;
t347 = -t408 + t361;
t517 = -t499 * t491 - t495 * t509;
t344 = (qJD(4) - t449) * t429 + t517;
t373 = (qJD(3) - t492) * t455 + t516;
t494 = t501 ^ 2;
t504 = qJD(1) ^ 2;
t498 = sin(qJ(1));
t502 = cos(qJ(1));
t473 = t498 * g(1) - t502 * g(2);
t511 = qJDD(1) * pkin(1) + t473;
t512 = qJD(2) * pkin(2) - pkin(6) * t532;
t401 = t464 * pkin(2) + (pkin(6) * t494 + pkin(5)) * t504 - t512 * t532 + t511;
t424 = t427 ^ 2;
t425 = t429 ^ 2;
t448 = t449 ^ 2;
t451 = t453 ^ 2;
t452 = t455 ^ 2;
t556 = t492 ^ 2;
t555 = pkin(3) * t496;
t554 = t449 * t495;
t553 = t449 * t499;
t552 = t492 * t496;
t551 = t492 * t500;
t493 = t497 ^ 2;
t550 = t493 * t504;
t489 = t494 * t504;
t474 = t502 * g(1) + t498 * g(2);
t507 = -t504 * pkin(1) + qJDD(1) * pkin(5) - t474;
t440 = -t497 * g(3) + t501 * t507;
t392 = -pkin(2) * t489 + t464 * pkin(6) - qJD(2) * t512 + t440;
t506 = t497 * t507;
t541 = t497 * t504;
t505 = -t506 - t463 * pkin(6) + qJDD(2) * pkin(2) + (pkin(2) * t541 + pkin(6) * t529 - g(3)) * t501;
t352 = t496 * t392 - t500 * t505;
t417 = t453 * pkin(3) - t455 * pkin(7);
t317 = -t491 * pkin(3) - t556 * pkin(7) + t455 * t417 + t352;
t549 = t495 * t317;
t355 = t393 + t510;
t548 = t495 * t355;
t547 = t496 * t401;
t415 = t419 + t491;
t546 = t496 * t415;
t353 = t500 * t392 + t496 * t505;
t301 = -t500 * t352 + t496 * t353;
t545 = t497 * t301;
t456 = t504 * pkin(5) + t511;
t544 = t497 * t456;
t480 = t501 * t541;
t471 = qJDD(2) + t480;
t543 = t497 * t471;
t472 = qJDD(2) - t480;
t542 = t497 * t472;
t540 = t499 * t317;
t539 = t499 * t355;
t538 = t500 * t401;
t537 = t500 * t415;
t536 = t501 * t301;
t535 = t501 * t456;
t534 = t501 * t472;
t313 = t560 * pkin(7) + (t492 * t455 - t398) * pkin(3) - t401;
t318 = -t556 * pkin(3) + t491 * pkin(7) - t453 * t417 + t353;
t271 = t495 * t313 + t499 * t318;
t533 = t493 + t494;
t527 = t498 * qJDD(1);
t526 = t502 * qJDD(1);
t525 = t496 * t393;
t524 = t498 * t419;
t523 = t500 * t393;
t522 = t502 * t419;
t521 = -pkin(3) * t500 - pkin(2);
t270 = -t499 * t313 + t495 * t318;
t302 = t496 * t352 + t500 * t353;
t439 = t501 * g(3) + t506;
t391 = t497 * t439 + t501 * t440;
t431 = -t498 * t473 - t502 * t474;
t515 = t498 * t480;
t514 = t502 * t480;
t468 = -t498 * t504 + t526;
t513 = -pkin(4) * t468 - t498 * g(3);
t245 = -t499 * t270 + t495 * t271;
t246 = t495 * t270 + t499 * t271;
t390 = t501 * t439 - t497 * t440;
t430 = t502 * t473 - t498 * t474;
t503 = qJD(2) ^ 2;
t478 = -t489 - t503;
t477 = t489 - t503;
t476 = -t503 - t550;
t475 = t503 - t550;
t470 = t489 - t550;
t469 = t489 + t550;
t467 = t502 * t504 + t527;
t466 = t533 * qJDD(1);
t465 = t487 - 0.2e1 * t519;
t462 = 0.2e1 * t518 + t528;
t460 = t501 * t471;
t459 = t533 * t529;
t450 = -pkin(4) * t467 + t502 * g(3);
t444 = -t452 + t556;
t443 = t451 - t556;
t442 = t501 * t463 - t493 * t529;
t441 = -t497 * t464 - t494 * t529;
t438 = -t452 - t556;
t437 = -t497 * t476 - t534;
t436 = -t497 * t475 + t460;
t435 = t501 * t478 - t543;
t434 = t501 * t477 - t542;
t433 = t501 * t476 - t542;
t432 = t497 * t478 + t460;
t423 = t502 * t466 - t498 * t469;
t422 = t498 * t466 + t502 * t469;
t420 = -t497 * t462 + t501 * t465;
t418 = -t452 + t451;
t413 = -t556 - t451;
t412 = t502 * t437 + t498 * t462;
t411 = t502 * t435 - t498 * t465;
t410 = t498 * t437 - t502 * t462;
t409 = t498 * t435 + t502 * t465;
t407 = -t425 + t448;
t406 = t424 - t448;
t405 = (-t453 * t500 + t455 * t496) * t492;
t404 = (-t453 * t496 - t455 * t500) * t492;
t403 = -pkin(5) * t433 - t535;
t402 = -pkin(5) * t432 - t544;
t400 = -t451 - t452;
t397 = -pkin(1) * t433 + t440;
t396 = -pkin(1) * t432 + t439;
t388 = -t425 + t424;
t384 = -t425 - t448;
t383 = t500 * t443 - t546;
t382 = -t496 * t444 + t561;
t381 = t496 * t443 + t537;
t380 = t500 * t444 + t563;
t379 = -t496 * t438 - t537;
t378 = t500 * t438 - t546;
t377 = -t446 + t509;
t372 = (qJD(3) + t492) * t455 + t516;
t371 = -t448 - t424;
t370 = -t455 * t552 - t500 * t509;
t369 = t455 * t551 - t496 * t509;
t368 = -t496 * t398 + t453 * t551;
t367 = t500 * t398 + t453 * t552;
t366 = t502 * t391 - t498 * t456;
t365 = t498 * t391 + t502 * t456;
t364 = t500 * t413 - t563;
t363 = t496 * t413 + t561;
t362 = t424 + t425;
t360 = -t429 * qJD(4) - t517;
t359 = (-t427 * t499 + t429 * t495) * t449;
t358 = (t427 * t495 + t429 * t499) * t449;
t357 = -t497 * t404 + t501 * t405;
t350 = -pkin(6) * t378 - t538;
t348 = -t408 - t361;
t345 = (-qJD(4) - t449) * t429 - t517;
t343 = -pkin(6) * t363 - t547;
t342 = -t497 * t381 + t501 * t383;
t341 = -t497 * t380 + t501 * t382;
t340 = t499 * t361 - t429 * t554;
t339 = -t495 * t361 - t429 * t553;
t338 = -t495 * t360 + t427 * t553;
t337 = -t499 * t360 - t427 * t554;
t336 = -t497 * t378 + t501 * t379;
t335 = t501 * t378 + t497 * t379;
t334 = -t373 * t500 - t496 * t377;
t333 = -t500 * t372 + t496 * t560;
t332 = -t373 * t496 + t500 * t377;
t331 = -t496 * t372 - t500 * t560;
t330 = t500 * t359 + t496 * t510;
t329 = t496 * t359 - t500 * t510;
t328 = t499 * t406 - t548;
t327 = -t495 * t407 + t562;
t326 = -t495 * t406 - t539;
t325 = -t499 * t407 - t564;
t324 = -t497 * t369 + t501 * t370;
t323 = -t497 * t367 + t501 * t368;
t322 = -t497 * t363 + t501 * t364;
t321 = t501 * t363 + t497 * t364;
t320 = -t495 * t384 - t539;
t319 = t499 * t384 - t548;
t315 = t499 * t371 - t564;
t314 = t495 * t371 + t562;
t312 = pkin(2) * t560 + pkin(6) * t379 - t547;
t309 = t500 * t340 + t525;
t308 = t500 * t338 - t525;
t307 = t496 * t340 - t523;
t306 = t496 * t338 + t523;
t305 = -pkin(2) * t372 + pkin(6) * t364 + t538;
t304 = t502 * t336 - t498 * t560;
t303 = t498 * t336 + t502 * t560;
t300 = t502 * t322 + t498 * t372;
t299 = t498 * t322 - t502 * t372;
t298 = -t344 * t499 - t495 * t348;
t297 = t499 * t345 - t495 * t347;
t296 = -t344 * t495 + t499 * t348;
t295 = -t495 * t345 - t499 * t347;
t294 = pkin(2) * t401 + pkin(6) * t302;
t293 = -t497 * t332 + t501 * t334;
t292 = -t497 * t331 + t501 * t333;
t291 = t501 * t332 + t497 * t334;
t290 = t500 * t328 - t496 * t344;
t289 = t500 * t327 - t496 * t348;
t288 = t496 * t328 + t500 * t344;
t287 = t496 * t327 + t500 * t348;
t286 = -t497 * t329 + t501 * t330;
t285 = t500 * t320 + t347 * t496;
t284 = t496 * t320 - t347 * t500;
t283 = t500 * t315 - t496 * t345;
t282 = t496 * t315 + t500 * t345;
t281 = -pkin(1) * t335 - pkin(2) * t378 + t353;
t280 = t500 * t297 - t496 * t388;
t279 = t496 * t297 + t500 * t388;
t278 = t502 * t293 + t498 * t400;
t277 = t498 * t293 - t502 * t400;
t276 = -pkin(7) * t319 + t540;
t275 = t500 * t298 - t496 * t362;
t274 = t496 * t298 + t500 * t362;
t273 = -pkin(1) * t321 - pkin(2) * t363 + t352;
t272 = -pkin(7) * t314 + t549;
t269 = -pkin(6) * t332 - t301;
t268 = -t497 * t307 + t501 * t309;
t267 = -t497 * t306 + t501 * t308;
t266 = -pkin(2) * t400 + pkin(6) * t334 + t302;
t265 = -pkin(1) * t291 - pkin(2) * t332;
t264 = -pkin(5) * t335 - t497 * t312 + t501 * t350;
t263 = t501 * t302 - t545;
t262 = t497 * t302 + t536;
t261 = -pkin(5) * t321 - t497 * t305 + t501 * t343;
t260 = t502 * t263 - t498 * t401;
t259 = t498 * t263 + t502 * t401;
t258 = -pkin(3) * t319 + t271;
t257 = -pkin(3) * t314 + t270;
t256 = -t497 * t288 + t501 * t290;
t255 = -t497 * t287 + t501 * t289;
t254 = -t497 * t284 + t501 * t285;
t253 = t501 * t284 + t497 * t285;
t252 = -t497 * t282 + t501 * t283;
t251 = t501 * t282 + t497 * t283;
t250 = -t497 * t279 + t501 * t280;
t249 = -t497 * t274 + t501 * t275;
t248 = t501 * t274 + t497 * t275;
t247 = -pkin(1) * t262 - pkin(2) * t301;
t244 = t502 * t254 + t498 * t319;
t243 = t498 * t254 - t502 * t319;
t242 = t502 * t252 + t498 * t314;
t241 = t498 * t252 - t502 * t314;
t240 = t500 * t246 + t496 * t317;
t239 = t496 * t246 - t500 * t317;
t238 = t502 * t249 + t498 * t296;
t237 = t498 * t249 - t502 * t296;
t236 = -pkin(7) * t296 - t245;
t235 = -pkin(5) * t262 - pkin(6) * t536 - t497 * t294;
t234 = -pkin(5) * t291 - t497 * t266 + t501 * t269;
t233 = -pkin(6) * t284 - t496 * t258 + t500 * t276;
t232 = -pkin(6) * t282 - t496 * t257 + t500 * t272;
t231 = -pkin(2) * t319 + pkin(6) * t285 + t500 * t258 + t496 * t276;
t230 = -pkin(1) * t253 - pkin(2) * t284 + pkin(3) * t347 - pkin(7) * t320 - t549;
t229 = -pkin(2) * t314 + pkin(6) * t283 + t500 * t257 + t496 * t272;
t228 = -pkin(1) * t251 - pkin(2) * t282 - pkin(3) * t345 - pkin(7) * t315 + t540;
t227 = -pkin(6) * t274 + t500 * t236 + t296 * t555;
t226 = -t497 * t239 + t501 * t240;
t225 = t501 * t239 + t497 * t240;
t224 = pkin(6) * t275 + t496 * t236 + t521 * t296;
t223 = -pkin(1) * t248 - pkin(2) * t274 - pkin(3) * t362 - pkin(7) * t298 - t246;
t222 = -pkin(6) * t239 + (-pkin(7) * t500 + t555) * t245;
t221 = t502 * t226 + t498 * t245;
t220 = t498 * t226 - t502 * t245;
t219 = pkin(6) * t240 + (-pkin(7) * t496 + t521) * t245;
t218 = -pkin(5) * t253 - t497 * t231 + t501 * t233;
t217 = -pkin(5) * t251 - t497 * t229 + t501 * t232;
t216 = -pkin(1) * t225 - pkin(2) * t239 + pkin(3) * t317 - pkin(7) * t246;
t215 = -pkin(5) * t248 - t497 * t224 + t501 * t227;
t214 = -pkin(5) * t225 - t497 * t219 + t501 * t222;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t467, -t468, 0, t431, 0, 0, 0, 0, 0, 0, t411, t412, t423, t366, 0, 0, 0, 0, 0, 0, t300, t304, t278, t260, 0, 0, 0, 0, 0, 0, t242, t244, t238, t221; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t468, -t467, 0, t430, 0, 0, 0, 0, 0, 0, t409, t410, t422, t365, 0, 0, 0, 0, 0, 0, t299, t303, t277, t259, 0, 0, 0, 0, 0, 0, t241, t243, t237, t220; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t432, t433, 0, -t390, 0, 0, 0, 0, 0, 0, t321, t335, t291, t262, 0, 0, 0, 0, 0, 0, t251, t253, t248, t225; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t468, 0, -t467, 0, t513, -t450, -t430, -pkin(4) * t430, t502 * t442 - t515, t502 * t420 - t498 * t470, t502 * t436 + t497 * t527, t502 * t441 + t515, t502 * t434 + t498 * t487, t498 * qJDD(2) + t502 * t459, -pkin(4) * t409 - t498 * t396 + t502 * t402, -pkin(4) * t410 - t498 * t397 + t502 * t403, -pkin(4) * t422 + t502 * t390, -pkin(4) * t365 - (pkin(1) * t498 - pkin(5) * t502) * t390, t502 * t324 + t524, t502 * t292 - t498 * t418, t502 * t341 - t498 * t377, t502 * t323 - t524, t502 * t342 - t498 * t373, t502 * t357 + t498 * t491, -pkin(4) * t299 + t502 * t261 - t498 * t273, -pkin(4) * t303 + t502 * t264 - t498 * t281, -pkin(4) * t277 + t502 * t234 - t498 * t265, -pkin(4) * t259 + t502 * t235 - t498 * t247, t502 * t268 - t498 * t339, t502 * t250 - t498 * t295, t502 * t255 - t498 * t325, t502 * t267 - t498 * t337, t502 * t256 - t498 * t326, t502 * t286 - t498 * t358, -pkin(4) * t241 + t502 * t217 - t498 * t228, -pkin(4) * t243 + t502 * t218 - t498 * t230, -pkin(4) * t237 + t502 * t215 - t498 * t223, -pkin(4) * t220 + t502 * t214 - t498 * t216; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t467, 0, t468, 0, t450, t513, t431, pkin(4) * t431, t498 * t442 + t514, t498 * t420 + t502 * t470, t498 * t436 - t497 * t526, t498 * t441 - t514, t498 * t434 - t501 * t526, -t502 * qJDD(2) + t498 * t459, pkin(4) * t411 + t502 * t396 + t498 * t402, pkin(4) * t412 + t502 * t397 + t498 * t403, pkin(4) * t423 + t498 * t390, pkin(4) * t366 - (-pkin(1) * t502 - pkin(5) * t498) * t390, t498 * t324 - t522, t498 * t292 + t502 * t418, t498 * t341 + t502 * t377, t498 * t323 + t522, t498 * t342 + t502 * t373, t498 * t357 - t502 * t491, pkin(4) * t300 + t498 * t261 + t502 * t273, pkin(4) * t304 + t498 * t264 + t502 * t281, pkin(4) * t278 + t498 * t234 + t502 * t265, pkin(4) * t260 + t498 * t235 + t502 * t247, t498 * t268 + t502 * t339, t498 * t250 + t502 * t295, t498 * t255 + t502 * t325, t498 * t267 + t502 * t337, t498 * t256 + t502 * t326, t498 * t286 + t502 * t358, pkin(4) * t242 + t498 * t217 + t502 * t228, pkin(4) * t244 + t498 * t218 + t502 * t230, pkin(4) * t238 + t498 * t215 + t502 * t223, pkin(4) * t221 + t498 * t214 + t502 * t216; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t473, t474, 0, 0, (t463 + t518) * t497, t501 * t462 + t497 * t465, t501 * t475 + t543, (t464 - t519) * t501, t497 * t477 + t534, 0, pkin(1) * t465 + pkin(5) * t435 + t535, -pkin(1) * t462 + pkin(5) * t437 - t544, pkin(1) * t469 + pkin(5) * t466 + t391, pkin(1) * t456 + pkin(5) * t391, t501 * t369 + t497 * t370, t501 * t331 + t497 * t333, t501 * t380 + t497 * t382, t501 * t367 + t497 * t368, t501 * t381 + t497 * t383, t501 * t404 + t497 * t405, -pkin(1) * t372 + pkin(5) * t322 + t501 * t305 + t497 * t343, pkin(1) * t560 + pkin(5) * t336 + t501 * t312 + t497 * t350, -pkin(1) * t400 + pkin(5) * t293 + t501 * t266 + t497 * t269, pkin(1) * t401 + pkin(5) * t263 - pkin(6) * t545 + t501 * t294, t501 * t307 + t497 * t309, t501 * t279 + t497 * t280, t501 * t287 + t497 * t289, t501 * t306 + t497 * t308, t501 * t288 + t497 * t290, t501 * t329 + t497 * t330, -pkin(1) * t314 + pkin(5) * t252 + t501 * t229 + t497 * t232, -pkin(1) * t319 + pkin(5) * t254 + t501 * t231 + t497 * t233, -pkin(1) * t296 + pkin(5) * t249 + t501 * t224 + t497 * t227, -pkin(1) * t245 + pkin(5) * t226 + t501 * t219 + t497 * t222;];
tauB_reg = t1;
