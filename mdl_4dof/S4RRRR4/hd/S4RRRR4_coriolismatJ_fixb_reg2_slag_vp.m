% Calculate inertial parameters regressor of coriolis matrix for
% S4RRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d3,d4]';
% 
% Output:
% cmat_reg [(4*4)x(4*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:26
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S4RRRR4_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRRR4_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRRR4_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [4x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RRRR4_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:26:18
% EndTime: 2019-12-31 17:26:23
% DurationCPUTime: 3.04s
% Computational Cost: add. (4038->270), mult. (8435->392), div. (0->0), fcn. (8482->6), ass. (0->232)
t279 = qJD(2) + qJD(3);
t213 = sin(qJ(2));
t348 = cos(qJ(3));
t268 = t348 * t213;
t212 = sin(qJ(3));
t215 = cos(qJ(2));
t309 = t212 * t215;
t185 = t268 + t309;
t211 = sin(qJ(4));
t363 = pkin(6) + pkin(5);
t191 = t363 * t215;
t187 = t348 * t191;
t310 = t212 * t213;
t254 = t363 * t310;
t360 = t187 - t254;
t367 = t360 * t211;
t214 = cos(qJ(4));
t204 = -t215 * pkin(2) - pkin(1);
t183 = -t348 * t215 + t310;
t346 = t183 * pkin(3);
t247 = -t185 * pkin(7) + t346;
t222 = t204 + t247;
t64 = -t214 * t222 + t367;
t373 = (-t64 + t367) * t185;
t366 = t360 * t214;
t65 = t211 * t222 + t366;
t372 = (-t65 + t366) * t185;
t371 = -0.2e1 * t185;
t347 = t360 * pkin(3);
t362 = t279 * t185;
t370 = t183 * t362;
t257 = t212 * t191 + t268 * t363;
t369 = t257 * t211;
t368 = t257 * t214;
t324 = t257 * t360;
t365 = t279 * t257;
t364 = 0.2e1 * t185;
t209 = t211 ^ 2;
t210 = t214 ^ 2;
t195 = t210 - t209;
t361 = t279 * t195;
t182 = t185 ^ 2;
t278 = -t183 ^ 2 + t182;
t276 = t348 * pkin(2);
t253 = -t276 / 0.2e1;
t203 = -t276 - pkin(3);
t350 = t203 / 0.2e1;
t359 = t253 + t350;
t269 = t348 * t183;
t318 = t185 * t212;
t343 = t212 * pkin(2);
t202 = pkin(7) + t343;
t319 = t185 * t202;
t320 = t183 * t203;
t358 = t346 / 0.2e1 - t319 / 0.2e1 - t320 / 0.2e1 + (-t269 / 0.2e1 + t318 / 0.2e1) * pkin(2);
t104 = (t209 / 0.2e1 - t210 / 0.2e1) * t185;
t311 = t211 * t214;
t267 = qJD(1) * t311;
t46 = t279 * t104 + t182 * t267;
t89 = t267 * t371 + t361;
t355 = -pkin(3) / 0.2e1;
t354 = pkin(7) / 0.2e1;
t352 = t257 / 0.2e1;
t249 = -t187 / 0.2e1;
t351 = -t203 / 0.2e1;
t349 = -t211 / 0.2e1;
t345 = t183 * pkin(7);
t344 = t185 * pkin(3);
t342 = t213 * pkin(2);
t341 = pkin(2) * qJD(3);
t340 = pkin(3) * qJD(3);
t339 = qJD(2) * pkin(2);
t229 = (-t65 * t211 + t214 * t64) * t183;
t131 = t344 + t345;
t112 = t131 + t342;
t308 = t214 * t112;
t70 = t308 + t369;
t315 = t211 * t112;
t71 = -t368 + t315;
t3 = (t211 * t71 + t214 * t70) * t185 + t229;
t338 = t3 * qJD(1);
t307 = t214 * t131;
t73 = t307 + t369;
t314 = t211 * t131;
t74 = t314 - t368;
t4 = (t211 * t74 + t214 * t73) * t185 + t229;
t337 = t4 * qJD(1);
t5 = -t64 * t70 + t65 * t71 + t324;
t336 = t5 * qJD(1);
t6 = -t64 * t73 + t65 * t74 + t324;
t335 = t6 * qJD(1);
t334 = t70 * t211;
t333 = t71 * t214;
t332 = t73 * t211;
t331 = t74 * t214;
t10 = t373 + (t70 - t369) * t183;
t330 = t10 * qJD(1);
t11 = t372 + (-t71 - t368) * t183;
t329 = t11 * qJD(1);
t12 = t373 + (t73 - t369) * t183;
t328 = t12 * qJD(1);
t13 = t372 + (-t74 - t368) * t183;
t327 = t13 * qJD(1);
t236 = t253 + t351;
t217 = (-t202 / 0.2e1 + t343 / 0.2e1 + t354) * t185 + (t355 + t236) * t183;
t14 = t217 * t211;
t321 = t14 * qJD(1);
t317 = t185 * t214;
t38 = t64 * t183 - t185 * t369;
t304 = t38 * qJD(1);
t39 = -t65 * t183 + t257 * t317;
t303 = t39 * qJD(1);
t42 = t204 * t342;
t302 = t42 * qJD(1);
t79 = t278 * t211;
t301 = t79 * qJD(1);
t80 = t278 * t214;
t300 = t80 * qJD(1);
t299 = t278 * qJD(1);
t96 = t183 * t342 + t204 * t185;
t298 = t96 * qJD(1);
t97 = -t204 * t183 + t185 * t342;
t297 = t97 * qJD(1);
t296 = qJD(1) * t183;
t295 = qJD(1) * t185;
t294 = qJD(1) * t204;
t293 = qJD(1) * t215;
t292 = qJD(2) * t203;
t291 = qJD(3) * t204;
t290 = qJD(4) * t211;
t289 = qJD(4) * t214;
t288 = t104 * qJD(1);
t287 = t104 * qJD(4);
t105 = t211 * t183;
t286 = t105 * qJD(1);
t108 = t214 * t183;
t101 = t108 * qJD(1);
t115 = t195 * t182;
t285 = t115 * qJD(1);
t136 = t249 + t187 / 0.2e1;
t284 = t136 * qJD(1);
t177 = t268 / 0.2e1 + t309 / 0.2e1;
t283 = t177 * qJD(1);
t196 = -t213 ^ 2 + t215 ^ 2;
t282 = t196 * qJD(1);
t281 = t213 * qJD(2);
t280 = t215 * qJD(2);
t275 = pkin(1) * t213 * qJD(1);
t274 = pkin(1) * t293;
t273 = t212 * t341;
t272 = t212 * t339;
t270 = pkin(7) * t349;
t266 = qJD(4) * t183 * t185;
t265 = t183 * t295;
t264 = t183 * t294;
t263 = t185 * t294;
t199 = t211 * t289;
t262 = t213 * t280;
t261 = t352 - t257 / 0.2e1;
t259 = t348 * qJD(2);
t258 = t348 * qJD(3);
t255 = t279 * t214;
t252 = t182 * t199;
t248 = t279 * t343;
t245 = t279 * t311;
t243 = t211 * t255;
t242 = t333 - t334;
t241 = t331 - t332;
t223 = (t209 + t210) * t348;
t102 = (t223 * t202 + t203 * t212) * pkin(2);
t233 = t331 / 0.2e1 - t332 / 0.2e1;
t216 = t233 * t202 + (t212 * t352 + (t211 * t64 + t214 * t65) * t348 / 0.2e1) * pkin(2) + t360 * t350;
t234 = -t333 / 0.2e1 + t334 / 0.2e1;
t2 = t347 / 0.2e1 + t234 * pkin(7) + t216;
t240 = -t2 * qJD(1) - t102 * qJD(2);
t176 = t223 * pkin(2);
t8 = (t74 / 0.2e1 - t71 / 0.2e1) * t214 + (-t73 / 0.2e1 + t70 / 0.2e1) * t211;
t239 = -t8 * qJD(1) - t176 * qJD(2);
t238 = -t319 - t320;
t237 = t185 * (-qJD(4) - t296);
t235 = t345 / 0.2e1 + t344 / 0.2e1;
t232 = t202 * t183 / 0.2e1 + t185 * t351;
t221 = t112 / 0.2e1 + t232;
t31 = t261 * t211 - t221 * t214;
t231 = -t31 * qJD(1) - t211 * t292;
t29 = t221 * t211 + t261 * t214;
t230 = -t29 * qJD(1) - t214 * t292;
t228 = t214 * t237;
t81 = t177 * qJD(4) + t265;
t227 = pkin(3) / 0.2e1 + t236;
t17 = t217 * t214;
t226 = -t17 * qJD(1) - t211 * t272;
t225 = t131 / 0.2e1 + t235;
t224 = t243 * t364;
t149 = t227 * t211;
t35 = t225 * t214;
t220 = t35 * qJD(1) + t149 * qJD(2) + t211 * t340;
t150 = t227 * t214;
t33 = t225 * t211;
t219 = -t33 * qJD(1) + t150 * qJD(2) + t214 * t340;
t200 = t213 * t293;
t194 = t211 * t273;
t190 = t195 * qJD(4);
t173 = t176 * qJD(3);
t152 = (t355 + t359) * t214;
t151 = pkin(3) * t349 + t359 * t211;
t129 = t279 * t183;
t113 = t279 * t177;
t91 = 0.2e1 * t249 + t254;
t86 = t101 + t289;
t85 = -t286 - t290;
t78 = t243 - t288;
t77 = -t245 + t288;
t76 = 0.2e1 * t211 * t228;
t67 = t210 * t265 - t287;
t66 = t209 * t265 + t287;
t49 = t108 * qJD(4) - t300;
t48 = -t105 * qJD(4) + t301;
t44 = -t287 + (-t210 * t295 - t245) * t183;
t43 = t287 + (-t209 * t295 + t243) * t183;
t41 = t211 * t362 + t300;
t40 = t185 * t255 - t301;
t37 = (-qJD(4) + t296) * t311 * t364 - t183 * t361;
t36 = t369 + t307 / 0.2e1 - t235 * t214;
t34 = t368 - t314 / 0.2e1 + t235 * t211;
t32 = t369 + t308 / 0.2e1 - t232 * t214;
t30 = t368 - t315 / 0.2e1 + t232 * t211;
t16 = t367 - pkin(7) * t317 / 0.2e1 + t358 * t214;
t15 = t185 * t270 + t358 * t211 - t366;
t7 = t233 - t234;
t1 = t333 * t354 + t70 * t270 - t347 / 0.2e1 + t216;
t9 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t262, t196 * qJD(2), 0, -t262, 0, 0, -pkin(1) * t281, -pkin(1) * t280, 0, 0, -t370, -t279 * t278, 0, t370, 0, 0, t96 * qJD(2) + t185 * t291, t97 * qJD(2) - t183 * t291, 0, t42 * qJD(2), -t210 * t370 - t252, -t115 * qJD(4) + t183 * t224, -t211 * t266 + t279 * t80, -t209 * t370 + t252, -t214 * t266 - t279 * t79, t370, t10 * qJD(2) + t12 * qJD(3) + t39 * qJD(4), t11 * qJD(2) + t13 * qJD(3) + t38 * qJD(4), -t3 * qJD(2) - t4 * qJD(3), t5 * qJD(2) + t6 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t200, t282, t280, -t200, -t281, 0, -pkin(5) * t280 - t275, pkin(5) * t281 - t274, 0, 0, -t265, -t299, -t129, t265, -t362, 0, -qJD(2) * t360 + t91 * qJD(3) + t298, t297 + t365, (t269 - t318) * t339, t302 + (-t212 * t257 - t348 * t360) * t339, t44, t37, t41, t43, t40, t81, t330 + (t211 * t238 - t366) * qJD(2) + t15 * qJD(3) + t32 * qJD(4), t329 + (t214 * t238 + t367) * qJD(2) + t16 * qJD(3) + t30 * qJD(4), qJD(2) * t242 + t7 * qJD(3) - t338, t336 + (t202 * t242 + t203 * t360) * qJD(2) + t1 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t265, -t299, -t129, t265, -t362, 0, t91 * qJD(2) - qJD(3) * t360 + t263, -t264 + t365, 0, 0, t44, t37, t41, t43, t40, t81, t328 + t15 * qJD(2) + (t211 * t247 - t366) * qJD(3) + t36 * qJD(4), t327 + t16 * qJD(2) + (t214 * t247 + t367) * qJD(3) + t34 * qJD(4), t7 * qJD(2) + qJD(3) * t241 - t337, t335 + t1 * qJD(2) + (pkin(7) * t241 - t347) * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t46, t245 * t371 - t285, t211 * t237, t46, t228, t113, t32 * qJD(2) + t36 * qJD(3) - t65 * qJD(4) + t303, t30 * qJD(2) + t34 * qJD(3) + t64 * qJD(4) + t304, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t200, -t282, 0, t200, 0, 0, t275, t274, 0, 0, t265, t299, 0, -t265, 0, 0, t136 * qJD(3) - t298, -t297, 0, -t302, t67, t76, t49, t66, t48, -t81, t14 * qJD(3) + t31 * qJD(4) - t330, t17 * qJD(3) + t29 * qJD(4) - t329, t8 * qJD(3) + t338, t2 * qJD(3) - t336; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t273, -pkin(2) * t258, 0, 0, t199, t190, 0, -t199, 0, 0, t203 * t290 - t214 * t273, t203 * t289 + t194, t173, t102 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t248 + t284, (-t259 - t258) * pkin(2), 0, 0, t199, t190, 0, -t199, 0, 0, t151 * qJD(4) - t214 * t248 + t321, t152 * qJD(4) + t194 - t226, t173 - t239, (-pkin(3) * t212 + pkin(7) * t223) * t341 - t240; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t78, t89, t86, t77, t85, -t283, t151 * qJD(3) - t202 * t289 - t231, t152 * qJD(3) + t202 * t290 - t230, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t265, t299, 0, -t265, 0, 0, -t136 * qJD(2) - t263, t264, 0, 0, t67, t76, t49, t66, t48, -t81, -t14 * qJD(2) - t35 * qJD(4) - t328, -t17 * qJD(2) + t33 * qJD(4) - t327, -t8 * qJD(2) + t337, -t2 * qJD(2) - t335; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t272 - t284, pkin(2) * t259, 0, 0, t199, t190, 0, -t199, 0, 0, -t149 * qJD(4) + t214 * t272 - t321, -t150 * qJD(4) + t226, t239, t240; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t199, t190, 0, -t199, 0, 0, -pkin(3) * t290, -pkin(3) * t289, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t78, t89, t86, t77, t85, -t283, -pkin(7) * t289 - t220, pkin(7) * t290 - t219, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, t224 + t285, -t108 * t279 + t211 * t265, -t46, t105 * t279 + t214 * t265, t113, -t31 * qJD(2) + t35 * qJD(3) - t303, -t29 * qJD(2) - t33 * qJD(3) - t304, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, -t89, -t101, t78, t286, t283, t149 * qJD(3) + t231, t150 * qJD(3) + t230, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, -t89, -t101, t78, t286, t283, t220, t219, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t9;
