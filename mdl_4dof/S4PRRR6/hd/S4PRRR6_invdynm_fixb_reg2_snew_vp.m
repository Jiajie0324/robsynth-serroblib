% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4PRRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d2,d3,d4,theta1]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:35
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4PRRR6_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4PRRR6_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4PRRR6_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4PRRR6_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4PRRR6_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4PRRR6_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:35:13
% EndTime: 2019-12-31 16:35:17
% DurationCPUTime: 4.28s
% Computational Cost: add. (14202->396), mult. (29093->551), div. (0->0), fcn. (19628->8), ass. (0->268)
t641 = sin(qJ(4));
t644 = cos(qJ(4));
t645 = cos(qJ(3));
t642 = sin(qJ(3));
t680 = qJD(2) * t642;
t595 = -qJD(2) * t644 * t645 + t641 * t680;
t597 = (t641 * t645 + t642 * t644) * qJD(2);
t559 = t597 * t595;
t634 = qJDD(3) + qJDD(4);
t705 = -t559 + t634;
t709 = t641 * t705;
t708 = t644 * t705;
t677 = qJD(2) * qJD(3);
t669 = t642 * t677;
t674 = t645 * qJDD(2);
t656 = 0.2e1 * t669 - t674;
t571 = t656 * t645;
t638 = sin(pkin(7));
t681 = g(3) - qJDD(1);
t707 = t638 * t681;
t639 = cos(pkin(7));
t706 = t639 * t681;
t628 = t645 * t677;
t676 = t642 * qJDD(2);
t607 = t628 + t676;
t657 = t669 - t674;
t527 = -qJD(4) * t595 + t607 * t644 - t641 * t657;
t635 = qJD(3) + qJD(4);
t592 = t635 * t595;
t704 = -t592 + t527;
t614 = g(1) * t638 - g(2) * t639;
t599 = t639 * t614;
t615 = g(1) * t639 + g(2) * t638;
t703 = -t638 * t615 + t599;
t664 = t641 * t607 + t644 * t657;
t511 = (qJD(4) - t635) * t597 + t664;
t593 = t595 ^ 2;
t594 = t597 ^ 2;
t633 = t635 ^ 2;
t702 = t645 ^ 2;
t701 = qJD(2) ^ 2;
t643 = sin(qJ(2));
t646 = cos(qJ(2));
t590 = -t615 * t646 - t643 * t681;
t566 = -pkin(2) * t701 + qJDD(2) * pkin(5) + t590;
t538 = t642 * t566 + t614 * t645;
t623 = t642 * t701 * t645;
t616 = qJDD(3) + t623;
t502 = (-t607 + t628) * pkin(6) + t616 * pkin(3) - t538;
t541 = t566 * t645 - t614 * t642;
t618 = qJD(3) * pkin(3) - pkin(6) * t680;
t631 = t702 * t701;
t507 = -pkin(3) * t631 - pkin(6) * t657 - qJD(3) * t618 + t541;
t467 = -t502 * t644 + t507 * t641;
t470 = t502 * t641 + t507 * t644;
t439 = -t467 * t644 + t470 * t641;
t700 = pkin(3) * t439;
t515 = t592 + t527;
t476 = -t511 * t641 - t515 * t644;
t699 = pkin(3) * t476;
t698 = t597 * t635;
t697 = t635 * t641;
t696 = t635 * t644;
t695 = t638 * t614;
t589 = -t615 * t643 + t646 * t681;
t565 = -qJDD(2) * pkin(2) - pkin(5) * t701 + t589;
t523 = pkin(3) * t657 - pkin(6) * t631 + t618 * t680 + t565;
t693 = t641 * t523;
t554 = t559 + t634;
t692 = t641 * t554;
t691 = t642 * t439;
t690 = t642 * t565;
t689 = t642 * t616;
t617 = qJDD(3) - t623;
t688 = t642 * t617;
t687 = t644 * t523;
t686 = t644 * t554;
t685 = t645 * t439;
t684 = t645 * t565;
t683 = t645 * t616;
t682 = t645 * t617;
t636 = t642 ^ 2;
t679 = t636 * t701;
t675 = t643 * qJDD(2);
t673 = t646 * qJDD(2);
t672 = t636 + t702;
t671 = t643 * t559;
t670 = t646 * t559;
t609 = t672 * qJDD(2);
t612 = t631 + t679;
t563 = t609 * t643 + t612 * t646;
t498 = t538 * t642 + t541 * t645;
t652 = pkin(2) * t612 + pkin(5) * t609 + t498;
t473 = -pkin(1) * t563 - t652;
t564 = t609 * t646 - t612 * t643;
t668 = qJ(1) * t564 + t473;
t611 = -t643 * t701 + t673;
t557 = -pkin(1) * t611 + t589;
t610 = t646 * t701 + t675;
t667 = qJ(1) * t610 - t557;
t558 = pkin(1) * t610 + t590;
t666 = qJ(1) * t611 - t558;
t440 = t467 * t641 + t470 * t644;
t665 = t589 * t643 + t590 * t646;
t663 = -t615 * t639 - t695;
t662 = t643 * t623;
t661 = t646 * t623;
t660 = -pkin(2) * t565 + pkin(5) * t498;
t570 = pkin(4) * t610 - t614 * t646;
t659 = -pkin(4) * t611 - t614 * t643;
t497 = t538 * t645 - t541 * t642;
t533 = t589 * t646 - t590 * t643;
t544 = -t633 - t593;
t499 = t544 * t641 + t708;
t658 = pkin(3) * t499 - t467;
t647 = qJD(3) ^ 2;
t622 = -t631 - t647;
t578 = t622 * t645 - t689;
t655 = -pkin(2) * t656 + pkin(5) * t578 - t684;
t620 = -t647 - t679;
t580 = -t620 * t642 - t682;
t606 = 0.2e1 * t628 + t676;
t654 = -pkin(2) * t606 + pkin(5) * t580 + t690;
t581 = -t594 - t633;
t516 = t581 * t644 - t692;
t653 = pkin(3) * t516 - t470;
t478 = -t511 * t644 + t515 * t641;
t530 = -t593 - t594;
t426 = -pkin(3) * t530 + pkin(6) * t478 + t440;
t428 = -pkin(6) * t476 - t439;
t444 = -t476 * t642 + t478 * t645;
t651 = -pkin(2) * t530 + pkin(5) * t444 + t426 * t645 + t428 * t642;
t500 = t544 * t644 - t709;
t510 = (qJD(4) + t635) * t597 + t664;
t450 = -pkin(3) * t510 + pkin(6) * t500 - t687;
t465 = -t499 * t642 + t500 * t645;
t474 = -pkin(6) * t499 + t693;
t650 = -pkin(2) * t510 + pkin(5) * t465 + t450 * t645 + t474 * t642;
t517 = -t581 * t641 - t686;
t457 = -pkin(3) * t704 + pkin(6) * t517 + t693;
t480 = -t516 * t642 + t517 * t645;
t485 = -pkin(6) * t516 + t687;
t649 = -pkin(2) * t704 + pkin(5) * t480 + t457 * t645 + t485 * t642;
t424 = t440 * t645 - t691;
t432 = -pkin(3) * t523 + pkin(6) * t440;
t648 = -pkin(2) * t523 + pkin(5) * t424 - pkin(6) * t691 + t432 * t645;
t621 = t631 - t647;
t619 = t647 - t679;
t613 = -t631 + t679;
t605 = t672 * t677;
t588 = -t594 + t633;
t587 = t593 - t633;
t586 = qJDD(3) * t643 + t605 * t646;
t585 = t607 * t645 - t636 * t677;
t584 = -qJDD(3) * t646 + t605 * t643;
t583 = t642 * t657 - t677 * t702;
t579 = -t619 * t642 + t683;
t577 = t621 * t645 - t688;
t576 = t620 * t645 - t688;
t575 = t619 * t645 + t689;
t574 = t622 * t642 + t683;
t573 = t621 * t642 + t682;
t572 = (t607 + t628) * t642;
t561 = -t606 * t642 - t571;
t560 = t606 * t645 - t642 * t656;
t556 = t594 - t593;
t552 = t585 * t646 - t662;
t551 = t583 * t646 + t662;
t550 = t585 * t643 + t661;
t549 = t583 * t643 - t661;
t548 = t579 * t646 + t642 * t675;
t547 = t577 * t646 + t643 * t674;
t546 = t579 * t643 - t642 * t673;
t545 = t577 * t643 - t645 * t673;
t543 = t580 * t646 + t606 * t643;
t542 = t578 * t646 + t643 * t656;
t540 = t580 * t643 - t606 * t646;
t539 = t578 * t643 - t646 * t656;
t537 = (-t595 * t644 + t597 * t641) * t635;
t536 = (-t595 * t641 - t597 * t644) * t635;
t529 = t561 * t646 + t613 * t643;
t528 = t561 * t643 - t613 * t646;
t526 = -qJD(4) * t597 - t664;
t525 = -pkin(5) * t576 + t684;
t524 = -pkin(5) * t574 + t690;
t522 = pkin(1) * t614 + pkin(4) * t665;
t521 = t587 * t644 - t692;
t520 = -t588 * t641 + t708;
t519 = t587 * t641 + t686;
t518 = t588 * t644 + t709;
t509 = -pkin(2) * t576 + t541;
t508 = -pkin(2) * t574 + t538;
t506 = t527 * t644 - t597 * t697;
t505 = t527 * t641 + t597 * t696;
t504 = -t526 * t641 + t595 * t696;
t503 = t526 * t644 + t595 * t697;
t495 = -t536 * t642 + t537 * t645;
t494 = t536 * t645 + t537 * t642;
t493 = t495 * t646 + t634 * t643;
t492 = t495 * t643 - t634 * t646;
t491 = -pkin(1) * t539 - t655;
t490 = -pkin(1) * t540 - t654;
t489 = -pkin(4) * t563 + t497 * t646;
t488 = pkin(4) * t564 + t497 * t643;
t487 = t498 * t646 + t565 * t643;
t486 = t498 * t643 - t565 * t646;
t484 = -t519 * t642 + t521 * t645;
t483 = -t518 * t642 + t520 * t645;
t482 = t519 * t645 + t521 * t642;
t481 = t518 * t645 + t520 * t642;
t479 = t516 * t645 + t517 * t642;
t477 = -t510 * t644 - t641 * t704;
t475 = -t510 * t641 + t644 * t704;
t472 = -t505 * t642 + t506 * t645;
t471 = -t503 * t642 + t504 * t645;
t469 = t505 * t645 + t506 * t642;
t468 = t503 * t645 + t504 * t642;
t464 = t499 * t645 + t500 * t642;
t463 = -pkin(4) * t540 - t509 * t643 + t525 * t646;
t462 = -pkin(4) * t539 - t508 * t643 + t524 * t646;
t461 = t472 * t646 + t671;
t460 = t471 * t646 - t671;
t459 = t472 * t643 - t670;
t458 = t471 * t643 + t670;
t456 = -pkin(1) * t576 + pkin(4) * t543 + t509 * t646 + t525 * t643;
t455 = -pkin(1) * t574 + pkin(4) * t542 + t508 * t646 + t524 * t643;
t454 = t484 * t646 - t511 * t643;
t453 = t483 * t646 + t515 * t643;
t452 = t484 * t643 + t511 * t646;
t451 = t483 * t643 - t515 * t646;
t449 = t480 * t646 + t643 * t704;
t448 = t480 * t643 - t646 * t704;
t447 = t465 * t646 + t510 * t643;
t446 = t465 * t643 - t510 * t646;
t445 = -pkin(1) * t486 - t660;
t443 = -t475 * t642 + t477 * t645;
t442 = t476 * t645 + t478 * t642;
t441 = t475 * t645 + t477 * t642;
t438 = -pkin(4) * t486 - (pkin(2) * t643 - pkin(5) * t646) * t497;
t437 = t443 * t646 + t556 * t643;
t436 = t443 * t643 - t556 * t646;
t435 = t444 * t646 + t530 * t643;
t434 = t444 * t643 - t530 * t646;
t433 = -pkin(2) * t479 - t653;
t431 = -pkin(2) * t464 - t658;
t430 = pkin(4) * t487 - (-pkin(2) * t646 - pkin(5) * t643 - pkin(1)) * t497;
t429 = -pkin(2) * t442 - t699;
t427 = -pkin(5) * t479 - t457 * t642 + t485 * t645;
t425 = -pkin(5) * t464 - t450 * t642 + t474 * t645;
t423 = t440 * t642 + t685;
t422 = t424 * t646 + t523 * t643;
t421 = t424 * t643 - t523 * t646;
t420 = -pkin(1) * t448 - t649;
t419 = -pkin(1) * t446 - t650;
t418 = -pkin(2) * t423 - t700;
t417 = -pkin(4) * t448 + t427 * t646 - t433 * t643;
t416 = -pkin(4) * t446 + t425 * t646 - t431 * t643;
t415 = -pkin(1) * t479 + pkin(4) * t449 + t427 * t643 + t433 * t646;
t414 = -pkin(5) * t442 - t426 * t642 + t428 * t645;
t413 = -pkin(1) * t464 + pkin(4) * t447 + t425 * t643 + t431 * t646;
t412 = -pkin(5) * t423 - pkin(6) * t685 - t432 * t642;
t411 = -pkin(1) * t434 - t651;
t410 = -pkin(4) * t434 + t414 * t646 - t429 * t643;
t409 = -pkin(1) * t421 - t648;
t408 = -pkin(1) * t442 + pkin(4) * t435 + t414 * t643 + t429 * t646;
t407 = -pkin(4) * t421 + t412 * t646 - t418 * t643;
t406 = -pkin(1) * t423 + pkin(4) * t422 + t412 * t643 + t418 * t646;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t707, -t706, -t703, -qJ(1) * t703, 0, 0, t639 * t611, 0, -t639 * t610, t638 * qJDD(2), t638 * t667 + t639 * t659, t639 * t570 + t638 * t666, t639 * t533, -qJ(1) * (t638 * t665 + t599) - (pkin(1) * t638 - pkin(4) * t639) * t533, t552 * t639 + t572 * t638, t529 * t639 + t560 * t638, t548 * t639 + t575 * t638, t551 * t639 - t571 * t638, t547 * t639 + t573 * t638, t639 * t586, t639 * t462 - t638 * t491 - qJ(1) * (t542 * t638 - t574 * t639), t639 * t463 - t638 * t490 - qJ(1) * (t543 * t638 - t576 * t639), t639 * t489 - t638 * t668, t639 * t438 - t638 * t445 - qJ(1) * (t487 * t638 + t497 * t639), t461 * t639 + t469 * t638, t437 * t639 + t441 * t638, t453 * t639 + t481 * t638, t460 * t639 + t468 * t638, t454 * t639 + t482 * t638, t493 * t639 + t494 * t638, t639 * t416 - t638 * t419 - qJ(1) * (t447 * t638 - t464 * t639), t639 * t417 - t638 * t420 - qJ(1) * (t449 * t638 - t479 * t639), t639 * t410 - t638 * t411 - qJ(1) * (t435 * t638 - t442 * t639), t639 * t407 - t638 * t409 - qJ(1) * (t422 * t638 - t423 * t639); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t706, -t707, t663, qJ(1) * t663, 0, 0, t638 * t611, 0, -t638 * t610, -t639 * qJDD(2), t638 * t659 - t639 * t667, t638 * t570 - t639 * t666, t638 * t533, qJ(1) * (t639 * t665 - t695) - (-pkin(1) * t639 - pkin(4) * t638) * t533, t552 * t638 - t572 * t639, t529 * t638 - t560 * t639, t548 * t638 - t575 * t639, t551 * t638 + t571 * t639, t547 * t638 - t573 * t639, t638 * t586, t638 * t462 + t639 * t491 + qJ(1) * (t542 * t639 + t574 * t638), t638 * t463 + t639 * t490 + qJ(1) * (t543 * t639 + t576 * t638), t638 * t489 + t639 * t668, t638 * t438 + t639 * t445 + qJ(1) * (t487 * t639 - t497 * t638), t461 * t638 - t469 * t639, t437 * t638 - t441 * t639, t453 * t638 - t481 * t639, t460 * t638 - t468 * t639, t454 * t638 - t482 * t639, t493 * t638 - t494 * t639, t638 * t416 + t639 * t419 + qJ(1) * (t447 * t639 + t464 * t638), t638 * t417 + t639 * t420 + qJ(1) * (t449 * t639 + t479 * t638), t638 * t410 + t639 * t411 + qJ(1) * (t435 * t639 + t442 * t638), t638 * t407 + t639 * t409 + qJ(1) * (t422 * t639 + t423 * t638); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t614, t615, 0, 0, 0, 0, t610, 0, t611, 0, -t570, t659, t665, t522, t550, t528, t546, t549, t545, t584, t455, t456, t488, t430, t459, t436, t451, t458, t452, t492, t413, t415, t408, t406; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t681, -t614, 0, 0, 0, t611, 0, -t610, 0, t659, t570, t533, pkin(4) * t533, t552, t529, t548, t551, t547, t586, t462, t463, t489, t438, t461, t437, t453, t460, t454, t493, t416, t417, t410, t407; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t681, 0, -t615, 0, 0, 0, 0, 0, 0, -qJDD(2), t557, t558, 0, pkin(1) * t533, -t572, -t560, -t575, t571, -t573, 0, t491, t490, t473, t445, -t469, -t441, -t481, -t468, -t482, -t494, t419, t420, t411, t409; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t614, t615, 0, 0, 0, 0, t610, 0, t611, 0, -t570, t659, t665, t522, t550, t528, t546, t549, t545, t584, t455, t456, t488, t430, t459, t436, t451, t458, t452, t492, t413, t415, t408, t406; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t701, 0, 0, -t614, t589, 0, t585, t561, t579, t583, t577, t605, t524, t525, t497, pkin(5) * t497, t472, t443, t483, t471, t484, t495, t425, t427, t414, t412; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t701, 0, qJDD(2), 0, t614, 0, t590, 0, t623, -t613, -t676, -t623, -t674, -qJDD(3), t508, t509, 0, pkin(2) * t497, -t559, -t556, -t515, t559, t511, -t634, t431, t433, t429, t418; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t589, -t590, 0, 0, t572, t560, t575, -t571, t573, 0, t655, t654, t652, t660, t469, t441, t481, t468, t482, t494, t650, t649, t651, t648; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t607, -t656, t616, -t628, t621, t628, 0, t565, t538, 0, t506, t477, t520, t504, t521, t537, t474, t485, t428, -pkin(6) * t439; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t669, t606, t619, -t657, t617, -t669, -t565, 0, t541, 0, t505, t475, t518, t503, t519, t536, t450, t457, t426, t432; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t623, t613, t676, t623, t674, qJDD(3), -t538, -t541, 0, 0, t559, t556, t515, -t559, -t511, t634, t658, t653, t699, t700; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t527, -t510, t705, t592, t587, -t592, 0, t523, t467, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t698, t704, t588, t526, t554, -t698, -t523, 0, t470, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t559, t556, t515, -t559, -t511, t634, -t467, -t470, 0, 0;];
m_new_reg = t1;
