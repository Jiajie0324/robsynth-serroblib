% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4PRRP6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d2,d3,theta1]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:30
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4PRRP6_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4PRRP6_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4PRRP6_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4PRRP6_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4PRRP6_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4PRRP6_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:30:48
% EndTime: 2019-12-31 16:30:51
% DurationCPUTime: 3.21s
% Computational Cost: add. (4719->319), mult. (9873->362), div. (0->0), fcn. (5591->6), ass. (0->213)
t552 = qJD(3) ^ 2;
t548 = sin(qJ(3));
t540 = t548 ^ 2;
t553 = qJD(2) ^ 2;
t613 = t540 * t553;
t521 = t552 + t613;
t550 = cos(qJ(3));
t526 = t548 * t553 * t550;
t520 = qJDD(3) - t526;
t599 = t550 * t520;
t485 = -t548 * t521 + t599;
t589 = qJD(2) * qJD(3);
t533 = t550 * t589;
t587 = t548 * qJDD(2);
t508 = 0.2e1 * t533 + t587;
t549 = sin(qJ(2));
t551 = cos(qJ(2));
t440 = t551 * t485 - t549 * t508;
t605 = t548 * t520;
t479 = t550 * t521 + t605;
t544 = sin(pkin(6));
t545 = cos(pkin(6));
t654 = qJ(1) * (t545 * t440 + t544 * t479);
t653 = qJ(1) * (t544 * t440 - t545 * t479);
t436 = t549 * t485 + t551 * t508;
t652 = pkin(1) * t436;
t651 = pkin(4) * t436;
t650 = -pkin(1) * t479 + pkin(4) * t440;
t532 = t548 * t589;
t585 = t550 * qJDD(2);
t510 = -0.2e1 * t532 + t585;
t601 = t550 * t510;
t608 = t548 * t508;
t458 = -t601 + t608;
t541 = t550 ^ 2;
t516 = (t540 - t541) * t553;
t427 = t551 * t458 - t549 * t516;
t607 = t548 * t510;
t455 = t550 * t508 + t607;
t649 = t544 * t427 + t545 * t455;
t648 = t545 * t427 - t544 * t455;
t612 = t541 * t553;
t523 = -t552 + t612;
t483 = -t550 * t523 + t605;
t446 = t551 * t483 - t549 * t585;
t475 = t548 * t523 + t599;
t645 = t544 * t446 + t545 * t475;
t644 = t545 * t446 - t544 * t475;
t642 = pkin(2) * t479;
t641 = pkin(5) * t479;
t640 = pkin(5) * t485;
t518 = t545 * g(1) + t544 * g(2);
t596 = g(3) - qJDD(1);
t493 = -t551 * t518 - t549 * t596;
t464 = -t553 * pkin(2) + qJDD(2) * pkin(5) + t493;
t517 = t544 * g(1) - t545 * g(2);
t502 = t550 * t517;
t621 = pkin(3) * t550;
t567 = -qJ(4) * t548 - t621;
t591 = t553 * t567;
t414 = -qJDD(3) * pkin(3) - t552 * qJ(4) + (t464 + t591) * t548 + qJDD(4) + t502;
t519 = qJDD(3) + t526;
t524 = -t552 - t612;
t633 = pkin(3) * t519 + qJ(4) * t524 - t414;
t509 = t533 + t587;
t632 = t509 + t533;
t425 = t549 * t458 + t551 * t516;
t584 = t551 * qJDD(2);
t443 = t549 * t483 + t550 * t584;
t631 = t544 * t596;
t630 = t545 * t596;
t497 = t545 * t517;
t629 = -t544 * t518 + t497;
t588 = (qJD(4) * qJD(3));
t536 = 2 * t588;
t438 = t550 * t464 - t548 * t517;
t563 = -t552 * pkin(3) + qJDD(3) * qJ(4) + t550 * t591 + t438;
t411 = t536 + t563;
t390 = t550 * t411 + t548 * t414;
t576 = t549 * t518 - t551 * t596;
t560 = qJDD(2) * pkin(2) + t553 * pkin(5) + t576;
t574 = -t532 + t585;
t556 = -t574 * pkin(3) - qJ(4) * t632 - t560;
t590 = qJD(2) * t548;
t410 = (pkin(3) * qJD(3) - (2 * qJD(4))) * t590 + t556;
t627 = -(pkin(2) - t567) * t410 + pkin(5) * t390;
t555 = 0.2e1 * qJD(4) * t590 - t556;
t404 = -pkin(3) * t532 + qJ(4) * t508 + t555;
t626 = t640 + t548 * t404 + (pkin(2) + t621) * t508;
t606 = t548 * t519;
t482 = t550 * t524 - t606;
t435 = t549 * t482 + t551 * t510;
t625 = pkin(1) * t435;
t592 = t540 + t541;
t512 = t592 * qJDD(2);
t515 = t592 * t553;
t461 = t549 * t512 + t551 * t515;
t624 = pkin(1) * t461;
t600 = t550 * t519;
t476 = t548 * t524 + t600;
t623 = pkin(2) * t476;
t620 = pkin(4) * t435;
t619 = pkin(4) * t461;
t617 = pkin(5) * t476;
t439 = t551 * t482 - t549 * t510;
t616 = qJ(1) * (t544 * t439 - t545 * t476);
t462 = t551 * t512 - t549 * t515;
t615 = qJ(1) * t462;
t611 = t544 * t517;
t609 = t548 * t560;
t602 = t550 * t560;
t595 = -pkin(1) * t476 + pkin(4) * t439;
t594 = pkin(2) * t510 + pkin(5) * t482;
t593 = pkin(2) * t515 + pkin(5) * t512;
t586 = t549 * qJDD(2);
t514 = -t549 * t553 + t584;
t453 = -pkin(1) * t514 - t576;
t513 = t551 * t553 + t586;
t580 = qJ(1) * t513 - t453;
t454 = pkin(1) * t513 + t493;
t579 = qJ(1) * t514 - t454;
t434 = t548 * t464 + t502;
t403 = t548 * t434 + t550 * t438;
t578 = t551 * t493 - t549 * t576;
t577 = -t545 * t518 - t611;
t573 = t549 * t526;
t572 = t551 * t526;
t570 = pkin(2) * t560 + pkin(5) * t403;
t569 = t594 + t602;
t568 = -pkin(3) * t414 + qJ(4) * t411;
t566 = pkin(3) * t548 - qJ(4) * t550;
t470 = pkin(4) * t513 - t551 * t517;
t565 = -pkin(4) * t514 - t549 * t517;
t402 = t550 * t434 - t548 * t438;
t430 = -t549 * t493 - t551 * t576;
t561 = t403 + t593;
t559 = -pkin(2) * t508 - t609 - t640;
t406 = pkin(3) * t515 + t411;
t407 = qJ(4) * t515 + t414;
t558 = t550 * t406 + t548 * t407 + t593;
t405 = (t510 - t532) * pkin(3) + t555;
t557 = qJ(4) * t607 + t550 * t405 + t594;
t554 = pkin(3) * t521 + qJ(4) * t520 + t563;
t522 = -t552 + t613;
t505 = t566 * qJDD(2);
t504 = t592 * t589;
t491 = t549 * qJDD(3) + t551 * t504;
t490 = t550 * t509 - t540 * t589;
t489 = -t551 * qJDD(3) + t549 * t504;
t488 = -t541 * t589 - t548 * t574;
t484 = t548 * t522 + t600;
t478 = -t550 * t522 + t606;
t474 = t632 * t548;
t473 = t548 * t533 - t550 * t574;
t472 = t545 * t491;
t471 = t544 * t491;
t460 = pkin(4) * t462;
t452 = t545 * t615;
t451 = t551 * t490 - t573;
t450 = t551 * t488 + t573;
t449 = t549 * t490 + t572;
t448 = t549 * t488 - t572;
t447 = t551 * t484 + t548 * t586;
t444 = t549 * t484 - t548 * t584;
t423 = -t602 + t641;
t422 = -t609 - t617;
t421 = pkin(1) * t517 + pkin(4) * t578;
t420 = t545 * t451 + t544 * t474;
t419 = t545 * t450 - t544 * t473;
t418 = t544 * t451 - t545 * t474;
t417 = t544 * t450 + t545 * t473;
t416 = t545 * t447 + t544 * t478;
t415 = t544 * t447 - t545 * t478;
t413 = t438 + t642;
t412 = t434 - t623;
t408 = qJ(1) * (t545 * t439 + t544 * t476);
t400 = -t569 - t625;
t399 = -t559 + t652;
t398 = -t623 - t633;
t397 = -t554 - (2 * t588) - t642;
t396 = t551 * t402 - t619;
t395 = t549 * t402 + t460;
t394 = t551 * t403 - t549 * t560;
t393 = t549 * t403 + t551 * t560;
t392 = -pkin(3) * t608 + t550 * t404 - t641;
t391 = qJ(4) * t601 - t548 * t405 - t617;
t389 = t548 * t411 - t550 * t414;
t388 = -t561 - t624;
t387 = -t548 * t406 + t550 * t407;
t386 = -t549 * t413 + t551 * t423 + t651;
t385 = -t549 * t412 + t551 * t422 - t620;
t384 = -t626 - t652;
t383 = -t557 - t625;
t382 = t551 * t413 + t549 * t423 - t650;
t381 = t551 * t412 + t549 * t422 + t595;
t380 = t551 * t387 - t549 * t505 - t619;
t379 = t549 * t387 + t551 * t505 + t460;
t378 = -t558 - t624;
t377 = t551 * t390 + t549 * t410;
t376 = t549 * t390 - t551 * t410;
t375 = -pkin(1) * t393 - t570;
t374 = -pkin(2) * t389 - t568;
t373 = t551 * t391 - t549 * t398 - t620;
t372 = t551 * t392 - t549 * t397 - t651;
t371 = -pkin(5) * t389 + t566 * t410;
t370 = t549 * t391 + t551 * t398 + t595;
t369 = -pkin(4) * t393 - (pkin(2) * t549 - pkin(5) * t551) * t402;
t368 = t549 * t392 + t551 * t397 + t650;
t367 = pkin(4) * t394 - (-pkin(2) * t551 - pkin(5) * t549 - pkin(1)) * t402;
t366 = -pkin(1) * t376 - t627;
t365 = -pkin(4) * t376 + t551 * t371 - t549 * t374;
t364 = -pkin(1) * t389 + pkin(4) * t377 + t549 * t371 + t551 * t374;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t631, -t630, -t629, -qJ(1) * t629, 0, 0, t545 * t514, 0, -t545 * t513, t544 * qJDD(2), t580 * t544 + t545 * t565, t545 * t470 + t579 * t544, t545 * t430, -qJ(1) * (t544 * t578 + t497) - (t544 * pkin(1) - t545 * pkin(4)) * t430, t420, -t648, t416, t419, -t644, t472, t545 * t385 - t544 * t400 - t616, t545 * t386 - t544 * t399 + t653, t545 * t396 + (-t388 - t615) * t544, t545 * t369 - t544 * t375 - qJ(1) * (t544 * t394 + t402 * t545), t420, t416, t648, t472, t644, t419, t545 * t373 - t544 * t383 - t616, t545 * t380 + (-t378 - t615) * t544, t545 * t372 - t544 * t384 - t653, t545 * t365 - t544 * t366 - qJ(1) * (t544 * t377 - t545 * t389); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t630, -t631, t577, qJ(1) * t577, 0, 0, t544 * t514, 0, -t544 * t513, -t545 * qJDD(2), t544 * t565 - t580 * t545, t544 * t470 - t579 * t545, t544 * t430, qJ(1) * (t545 * t578 - t611) - (-t545 * pkin(1) - t544 * pkin(4)) * t430, t418, -t649, t415, t417, -t645, t471, t544 * t385 + t545 * t400 + t408, t544 * t386 + t545 * t399 - t654, t545 * t388 + t544 * t396 + t452, t544 * t369 + t545 * t375 + qJ(1) * (t545 * t394 - t402 * t544), t418, t415, t649, t471, t645, t417, t544 * t373 + t545 * t383 + t408, t545 * t378 + t544 * t380 + t452, t544 * t372 + t545 * t384 + t654, t544 * t365 + t545 * t366 + qJ(1) * (t545 * t377 + t544 * t389); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t517, t518, 0, 0, 0, 0, t513, 0, t514, 0, -t470, t565, t578, t421, t449, -t425, t444, t448, -t443, t489, t381, t382, t395, t367, t449, t444, t425, t489, t443, t448, t370, t379, t368, t364; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t596, -t517, 0, 0, 0, t514, 0, -t513, 0, t565, t470, t430, pkin(4) * t430, t451, -t427, t447, t450, -t446, t491, t385, t386, t396, t369, t451, t447, t427, t491, t446, t450, t373, t380, t372, t365; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t596, 0, -t518, 0, 0, 0, 0, 0, 0, -qJDD(2), t453, t454, 0, pkin(1) * t430, -t474, -t455, -t478, t473, -t475, 0, t400, t399, t388, t375, -t474, -t478, t455, 0, t475, t473, t383, t378, t384, t366; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t517, t518, 0, 0, 0, 0, t513, 0, t514, 0, -t470, t565, t578, t421, t449, -t425, t444, t448, -t443, t489, t381, t382, t395, t367, t449, t444, t425, t489, t443, t448, t370, t379, t368, t364; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t553, 0, 0, -t517, -t576, 0, t490, -t458, t484, t488, -t483, t504, t422, t423, t402, pkin(5) * t402, t490, t484, t458, t504, t483, t488, t391, t387, t392, t371; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t553, 0, qJDD(2), 0, t517, 0, t493, 0, t526, -t516, -t587, -t526, -t585, -qJDD(3), t412, t413, 0, pkin(2) * t402, t526, -t587, t516, -qJDD(3), t585, -t526, t398, t505, t397, t374; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t576, -t493, 0, 0, t474, t455, t478, -t473, t475, 0, t569, t559, t561, t570, t474, t478, -t455, 0, -t475, -t473, t557, t558, t626, t627; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t509, t510, t519, -t533, t523, t533, 0, -t560, t434, 0, t509, t519, -t510, t533, -t523, -t533, qJ(4) * t510, t407, t404, -qJ(4) * t410; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t532, t508, -t522, t574, t520, -t532, t560, 0, t438, 0, t532, -t522, -t508, -t532, -t520, t574, t405, t406, pkin(3) * t508, -pkin(3) * t410; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t526, t516, t587, t526, t585, qJDD(3), -t434, -t438, 0, 0, -t526, t587, -t516, qJDD(3), -t585, t526, t633, -t505, t536 + t554, t568; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t509, t519, -t510, t533, -t523, -t533, 0, t414, -t410, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t526, t587, -t516, qJDD(3), -t585, t526, -t414, 0, t411, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t532, t522, t508, t532, t520, -t574, t410, -t411, 0, 0;];
m_new_reg = t1;
