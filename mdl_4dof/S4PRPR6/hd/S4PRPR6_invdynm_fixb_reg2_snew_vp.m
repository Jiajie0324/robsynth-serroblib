% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4PRPR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d2,d4,theta1,theta3]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:24
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4PRPR6_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4PRPR6_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4PRPR6_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4PRPR6_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4PRPR6_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4PRPR6_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:24:47
% EndTime: 2019-12-31 16:24:50
% DurationCPUTime: 3.60s
% Computational Cost: add. (10749->341), mult. (24198->485), div. (0->0), fcn. (16762->8), ass. (0->236)
t573 = sin(qJ(4));
t569 = sin(pkin(7));
t571 = cos(pkin(7));
t575 = cos(qJ(4));
t532 = (t569 * t573 - t571 * t575) * qJD(2);
t588 = t569 * t575 + t571 * t573;
t534 = t588 * qJD(2);
t498 = t534 * t532;
t637 = qJDD(4) - t498;
t643 = t573 * t637;
t642 = t575 * t637;
t570 = sin(pkin(6));
t572 = cos(pkin(6));
t549 = t572 * g(1) + t570 * g(2);
t574 = sin(qJ(2));
t576 = cos(qJ(2));
t614 = g(3) - qJDD(1);
t521 = -t576 * t549 - t574 * t614;
t633 = qJD(2) ^ 2;
t591 = -t633 * pkin(2) + qJDD(2) * qJ(3) + 0.2e1 * qJD(2) * qJD(3) + t521;
t641 = pkin(5) * qJDD(2) + t591;
t640 = t570 * t614;
t639 = t572 * t614;
t548 = t570 * g(1) - t572 * g(2);
t538 = t572 * t548;
t638 = -t570 * t549 + t538;
t579 = t571 ^ 2;
t563 = t579 * t633;
t566 = t569 ^ 2;
t612 = t566 * t633;
t543 = t563 + t612;
t636 = t633 * (t566 + t579);
t535 = t569 * t636;
t520 = -t574 * t549 + t576 * t614;
t568 = qJDD(2) * pkin(2);
t505 = -t633 * qJ(3) + qJDD(3) + t520 - t568;
t601 = -t505 + t568;
t635 = qJ(3) * t535 - t601 * t569;
t536 = t571 * t636;
t634 = -qJ(3) * t536 + t601 * t571;
t528 = t532 ^ 2;
t529 = t534 ^ 2;
t537 = t571 * t548;
t611 = t571 * t633;
t464 = -t537 + (pkin(3) * t611 - t641) * t569;
t626 = t569 * t548;
t465 = -pkin(3) * t563 + t641 * t571 - t626;
t430 = -t575 * t464 + t573 * t465;
t431 = t573 * t464 + t575 * t465;
t397 = -t575 * t430 + t573 * t431;
t632 = pkin(3) * t397;
t560 = t569 * qJDD(2);
t562 = t571 * qJDD(2);
t530 = t573 * t560 - t575 * t562;
t531 = t588 * qJDD(2);
t459 = -t530 * t573 - t575 * t531;
t631 = pkin(3) * t459;
t627 = t569 * t397;
t550 = t569 * t611;
t606 = t576 * qJDD(2);
t602 = t571 * t606;
t519 = -t574 * t550 + t569 * t602;
t625 = t570 * t519;
t624 = t570 * t548;
t622 = t571 * t397;
t621 = t572 * t519;
t486 = -pkin(3) * t562 - t543 * pkin(5) + t505;
t620 = t573 * t486;
t491 = qJDD(4) + t498;
t619 = t573 * t491;
t618 = t574 * t505;
t617 = t575 * t486;
t616 = t575 * t491;
t615 = t576 * t505;
t527 = t532 * qJD(4);
t613 = t534 * qJD(4);
t609 = t570 * qJDD(2);
t608 = t572 * qJDD(2);
t607 = t574 * qJDD(2);
t561 = t579 * qJDD(2);
t605 = t574 * t498;
t604 = t576 * t498;
t603 = t569 * t562;
t559 = t566 * qJDD(2);
t541 = t561 + t559;
t501 = t574 * t541 + t576 * t543;
t479 = t591 * t569 + t537;
t480 = t591 * t571 - t626;
t450 = t569 * t479 + t571 * t480;
t585 = pkin(2) * t543 + qJ(3) * t541 + t450;
t408 = -pkin(1) * t501 - t585;
t503 = t576 * t541 - t574 * t543;
t600 = qJ(1) * t503 + t408;
t507 = t574 * t535 - t569 * t606;
t455 = -pkin(1) * t507 - t635;
t512 = t576 * t535 + t569 * t607;
t599 = qJ(1) * t512 + t455;
t511 = -t574 * t536 + t602;
t456 = -pkin(1) * t511 - t634;
t515 = t576 * t536 + t571 * t607;
t598 = -qJ(1) * t515 + t456;
t547 = -t574 * t633 + t606;
t499 = -pkin(1) * t547 + t520;
t546 = t576 * t633 + t607;
t597 = qJ(1) * t546 - t499;
t500 = pkin(1) * t546 + t521;
t596 = qJ(1) * t547 - t500;
t398 = t573 * t430 + t575 * t431;
t595 = t574 * t520 + t576 * t521;
t594 = -t572 * t549 - t624;
t593 = -0.2e1 * t603;
t592 = 0.2e1 * t603;
t590 = -pkin(2) * t505 + qJ(3) * t450;
t514 = pkin(4) * t546 - t576 * t548;
t589 = -pkin(4) * t547 - t574 * t548;
t449 = t571 * t479 - t569 * t480;
t484 = t576 * t520 - t574 * t521;
t577 = qJD(4) ^ 2;
t489 = -t577 - t528;
t457 = t573 * t489 + t642;
t587 = pkin(3) * t457 - t430;
t524 = -t529 - t577;
t468 = t575 * t524 - t619;
t586 = pkin(3) * t468 - t431;
t461 = -t530 * t575 + t573 * t531;
t481 = -t528 - t529;
t389 = -pkin(3) * t481 + pkin(5) * t461 + t398;
t393 = -pkin(5) * t459 - t397;
t418 = -t569 * t459 + t571 * t461;
t584 = -pkin(2) * t481 + qJ(3) * t418 + t571 * t389 + t569 * t393;
t458 = t575 * t489 - t643;
t493 = t530 + 0.2e1 * t613;
t413 = -pkin(3) * t493 + pkin(5) * t458 - t617;
t415 = -t569 * t457 + t571 * t458;
t438 = -pkin(5) * t457 + t620;
t583 = -pkin(2) * t493 + qJ(3) * t415 + t571 * t413 + t569 * t438;
t471 = -t573 * t524 - t616;
t495 = -0.2e1 * t527 + t531;
t424 = -pkin(3) * t495 + pkin(5) * t471 + t620;
t437 = -t569 * t468 + t571 * t471;
t447 = -pkin(5) * t468 + t617;
t582 = -pkin(2) * t495 + qJ(3) * t437 + t571 * t424 + t569 * t447;
t386 = t571 * t398 - t627;
t395 = -pkin(3) * t486 + pkin(5) * t398;
t581 = -pkin(2) * t486 - pkin(5) * t627 + qJ(3) * t386 + t571 * t395;
t544 = -t563 + t612;
t542 = t561 - t559;
t523 = -t529 + t577;
t522 = t528 - t577;
t518 = t546 * t571 * t569;
t504 = t576 * t542 + t574 * t544;
t502 = t574 * t542 - t576 * t544;
t497 = t529 - t528;
t496 = -t527 + t531;
t494 = -t530 - t613;
t488 = (-t532 * t575 + t534 * t573) * qJD(4);
t487 = (-t532 * t573 - t534 * t575) * qJD(4);
t476 = t575 * t496 - t573 * t613;
t475 = t573 * t496 + t575 * t613;
t474 = -t573 * t494 + t575 * t527;
t473 = t575 * t494 + t573 * t527;
t472 = pkin(1) * t548 + pkin(4) * t595;
t470 = -t573 * t523 + t642;
t469 = t575 * t522 - t619;
t467 = t575 * t523 + t643;
t466 = t573 * t522 + t616;
t462 = -t575 * t493 - t573 * t495;
t460 = -t573 * t493 + t575 * t495;
t454 = -t569 * t487 + t571 * t488;
t453 = t571 * t487 + t569 * t488;
t452 = t574 * qJDD(4) + t576 * t454;
t451 = -t576 * qJDD(4) + t574 * t454;
t446 = -pkin(4) * t507 - t574 * t480 + t571 * t615;
t445 = -pkin(4) * t511 - t574 * t479 + t569 * t615;
t444 = pkin(4) * t512 + t576 * t480 + t571 * t618;
t443 = -pkin(4) * t515 + t576 * t479 + t569 * t618;
t442 = -t569 * t475 + t571 * t476;
t441 = -t569 * t473 + t571 * t474;
t440 = t571 * t475 + t569 * t476;
t439 = t571 * t473 + t569 * t474;
t436 = -t569 * t467 + t571 * t470;
t435 = -t569 * t466 + t571 * t469;
t434 = t571 * t468 + t569 * t471;
t433 = t571 * t467 + t569 * t470;
t432 = t571 * t466 + t569 * t469;
t428 = -pkin(4) * t501 + t576 * t449;
t427 = pkin(4) * t503 + t574 * t449;
t426 = t576 * t450 + t618;
t425 = t574 * t450 - t615;
t423 = t576 * t436 + t574 * t531;
t422 = t576 * t435 - t574 * t530;
t421 = t574 * t436 - t576 * t531;
t420 = t574 * t435 + t576 * t530;
t419 = -t569 * t460 + t571 * t462;
t417 = t571 * t460 + t569 * t462;
t416 = t571 * t459 + t569 * t461;
t414 = t571 * t457 + t569 * t458;
t412 = t576 * t442 + t605;
t411 = t576 * t441 - t605;
t410 = t574 * t442 - t604;
t409 = t574 * t441 + t604;
t407 = t576 * t437 + t574 * t495;
t406 = t574 * t437 - t576 * t495;
t405 = t576 * t419 + t574 * t497;
t404 = t574 * t419 - t576 * t497;
t403 = t576 * t415 + t574 * t493;
t402 = t574 * t415 - t576 * t493;
t401 = t576 * t418 + t574 * t481;
t400 = t574 * t418 - t576 * t481;
t399 = -pkin(2) * t416 - t631;
t396 = -pkin(1) * t425 - t590;
t394 = -pkin(2) * t434 - t586;
t392 = -pkin(4) * t425 - (pkin(2) * t574 - qJ(3) * t576) * t449;
t391 = -pkin(2) * t414 - t587;
t390 = -qJ(3) * t434 - t569 * t424 + t571 * t447;
t388 = -qJ(3) * t414 - t569 * t413 + t571 * t438;
t387 = pkin(4) * t426 - (-pkin(2) * t576 - qJ(3) * t574 - pkin(1)) * t449;
t385 = t569 * t398 + t622;
t384 = -pkin(1) * t406 - t582;
t383 = t576 * t386 + t574 * t486;
t382 = t574 * t386 - t576 * t486;
t381 = -pkin(1) * t402 - t583;
t380 = -pkin(2) * t385 - t632;
t379 = -pkin(4) * t406 + t576 * t390 - t574 * t394;
t378 = -qJ(3) * t416 - t569 * t389 + t571 * t393;
t377 = -pkin(1) * t434 + pkin(4) * t407 + t574 * t390 + t576 * t394;
t376 = -pkin(4) * t402 + t576 * t388 - t574 * t391;
t375 = -pkin(5) * t622 - qJ(3) * t385 - t569 * t395;
t374 = -pkin(1) * t400 - t584;
t373 = -pkin(1) * t414 + pkin(4) * t403 + t574 * t388 + t576 * t391;
t372 = -pkin(4) * t400 + t576 * t378 - t574 * t399;
t371 = -pkin(1) * t416 + pkin(4) * t401 + t574 * t378 + t576 * t399;
t370 = -pkin(1) * t382 - t581;
t369 = -pkin(4) * t382 + t576 * t375 - t574 * t380;
t368 = -pkin(1) * t385 + pkin(4) * t383 + t574 * t375 + t576 * t380;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t640, -t639, -t638, -qJ(1) * t638, 0, 0, t572 * t547, 0, -t572 * t546, t609, t597 * t570 + t572 * t589, t572 * t514 + t570 * t596, t572 * t484, -qJ(1) * (t570 * t595 + t538) - (t570 * pkin(1) - t572 * pkin(4)) * t484, t566 * t609 + t621, t572 * t504 + t570 * t592, t572 * t512, t561 * t570 - t621, t572 * t515, 0, t572 * t445 - t570 * t598, t572 * t446 - t570 * t599, t572 * t428 - t570 * t600, t572 * t392 - t570 * t396 - qJ(1) * (t570 * t426 + t449 * t572), t572 * t412 + t570 * t440, t572 * t405 + t570 * t417, t572 * t423 + t570 * t433, t572 * t411 + t570 * t439, t572 * t422 + t570 * t432, t572 * t452 + t570 * t453, t572 * t376 - t570 * t381 - qJ(1) * (t570 * t403 - t572 * t414), t572 * t379 - t570 * t384 - qJ(1) * (t570 * t407 - t572 * t434), t572 * t372 - t570 * t374 - qJ(1) * (t570 * t401 - t572 * t416), t572 * t369 - t570 * t370 - qJ(1) * (t570 * t383 - t572 * t385); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t639, -t640, t594, qJ(1) * t594, 0, 0, t570 * t547, 0, -t570 * t546, -t608, t570 * t589 - t572 * t597, t570 * t514 - t572 * t596, t570 * t484, qJ(1) * (t572 * t595 - t624) - (-t572 * pkin(1) - t570 * pkin(4)) * t484, -t566 * t608 + t625, t570 * t504 + t572 * t593, t570 * t512, -t561 * t572 - t625, t570 * t515, 0, t570 * t445 + t572 * t598, t570 * t446 + t572 * t599, t570 * t428 + t572 * t600, t570 * t392 + t572 * t396 + qJ(1) * (t572 * t426 - t449 * t570), t570 * t412 - t572 * t440, t570 * t405 - t572 * t417, t570 * t423 - t572 * t433, t570 * t411 - t572 * t439, t570 * t422 - t572 * t432, t570 * t452 - t572 * t453, t570 * t376 + t572 * t381 + qJ(1) * (t572 * t403 + t570 * t414), t570 * t379 + t572 * t384 + qJ(1) * (t572 * t407 + t570 * t434), t570 * t372 + t572 * t374 + qJ(1) * (t572 * t401 + t570 * t416), t570 * t369 + t572 * t370 + qJ(1) * (t572 * t383 + t570 * t385); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t548, t549, 0, 0, 0, 0, t546, 0, t547, 0, -t514, t589, t595, t472, t518, t502, t507, -t518, -t511, 0, t443, t444, t427, t387, t410, t404, t421, t409, t420, t451, t373, t377, t371, t368; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t614, -t548, 0, 0, 0, t547, 0, -t546, 0, t589, t514, t484, pkin(4) * t484, t519, t504, t512, -t519, t515, 0, t445, t446, t428, t392, t412, t405, t423, t411, t422, t452, t376, t379, t372, t369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t614, 0, -t549, 0, 0, 0, 0, 0, 0, -qJDD(2), t499, t500, 0, pkin(1) * t484, -t559, t593, 0, -t561, 0, 0, t456, t455, t408, t396, -t440, -t417, -t433, -t439, -t432, -t453, t381, t384, t374, t370; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t548, t549, 0, 0, 0, 0, t546, 0, t547, 0, -t514, t589, t595, t472, t518, t502, t507, -t518, -t511, 0, t443, t444, t427, t387, t410, t404, t421, t409, t420, t451, t373, t377, t371, t368; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t633, 0, 0, -t548, t520, 0, t603, t542, t535, -t603, t536, 0, t569 * t505, t571 * t505, t449, qJ(3) * t449, t442, t419, t436, t441, t435, t454, t388, t390, t378, t375; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t633, 0, qJDD(2), 0, t548, 0, t521, 0, t550, -t544, -t560, -t550, -t562, 0, t479, t480, 0, pkin(2) * t449, -t498, -t497, -t531, t498, t530, -qJDD(4), t391, t394, t399, t380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t520, -t521, 0, 0, t559, t592, 0, t561, 0, 0, t634, t635, t585, t590, t440, t417, t433, t439, t432, t453, t583, t582, t584, t581; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t560, t562, t550, 0, t563, 0, 0, t505, t479, 0, t476, t462, t470, t474, t469, t488, t438, t447, t393, -pkin(5) * t397; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t560, -t612, t562, -t550, 0, -t505, 0, t480, 0, t475, t460, t467, t473, t466, t487, t413, t424, t389, t395; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t550, t544, t560, t550, t562, 0, -t479, -t480, 0, 0, t498, t497, t531, -t498, -t530, qJDD(4), t587, t586, t631, t632; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t496, -t493, t637, t527, t522, -t527, 0, t486, t430, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t613, t495, t523, t494, t491, -t613, -t486, 0, t431, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t498, t497, t531, -t498, -t530, qJDD(4), -t430, -t431, 0, 0;];
m_new_reg = t1;
