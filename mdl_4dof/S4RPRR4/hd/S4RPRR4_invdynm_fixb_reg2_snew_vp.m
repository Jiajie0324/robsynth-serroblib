% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RPRR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:50
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RPRR4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RPRR4_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RPRR4_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RPRR4_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RPRR4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RPRR4_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:50:42
% EndTime: 2019-12-31 16:50:47
% DurationCPUTime: 4.85s
% Computational Cost: add. (14594->404), mult. (28482->558), div. (0->0), fcn. (17758->8), ass. (0->280)
t711 = sin(qJ(1));
t714 = cos(qJ(1));
t681 = t714 * g(1) + t711 * g(2);
t715 = qJD(1) ^ 2;
t663 = -t715 * pkin(1) - t681;
t705 = sin(pkin(7));
t706 = cos(pkin(7));
t680 = t711 * g(1) - t714 * g(2);
t722 = qJDD(1) * pkin(1) + t680;
t614 = t705 * t663 - t706 * t722;
t615 = t706 * t663 + t705 * t722;
t738 = t705 * t614 + t706 * t615;
t556 = t706 * t614 - t705 * t615;
t750 = t714 * t556;
t780 = -t711 * t738 + t750;
t756 = t711 * t556;
t779 = t714 * t738 + t756;
t671 = t705 * qJDD(1) + t706 * t715;
t702 = g(3) - qJDD(2);
t645 = qJ(2) * t671 - t706 * t702;
t672 = t706 * qJDD(1) - t705 * t715;
t725 = -qJ(2) * t672 - t705 * t702;
t770 = t714 * t671 + t711 * t672;
t778 = pkin(4) * t770 + t714 * t645 - t711 * t725;
t618 = -t711 * t671 + t714 * t672;
t777 = -pkin(4) * t618 + t711 * t645 + t714 * t725;
t709 = sin(qJ(4));
t710 = sin(qJ(3));
t745 = qJD(1) * qJD(3);
t693 = t710 * t745;
t713 = cos(qJ(3));
t743 = t713 * qJDD(1);
t668 = -t693 + t743;
t654 = -qJDD(4) + t668;
t712 = cos(qJ(4));
t747 = qJD(1) * t710;
t659 = -t712 * qJD(3) + t709 * t747;
t661 = t709 * qJD(3) + t712 * t747;
t764 = t661 * t659;
t718 = -t654 - t764;
t775 = t709 * t718;
t773 = t712 * t718;
t601 = -t715 * pkin(2) + qJDD(1) * pkin(5) + t615;
t692 = t713 * t702;
t581 = t710 * t601 + t692;
t583 = t713 * t601 - t710 * t702;
t537 = t710 * t581 + t713 * t583;
t652 = t659 ^ 2;
t653 = t661 ^ 2;
t746 = t713 * qJD(1);
t688 = -qJD(4) + t746;
t686 = t688 ^ 2;
t768 = qJD(3) ^ 2;
t767 = pkin(3) * t710;
t766 = pkin(3) * t713;
t763 = t688 * t709;
t762 = t688 * t712;
t700 = t710 ^ 2;
t761 = t700 * t715;
t729 = -pkin(6) * t710 - t766;
t665 = t729 * qJD(1);
t558 = t692 - qJDD(3) * pkin(3) - t768 * pkin(6) + (qJD(1) * t665 + t601) * t710;
t760 = t709 * t558;
t597 = t654 - t764;
t759 = t709 * t597;
t600 = -qJDD(1) * pkin(2) - t715 * pkin(5) + t614;
t592 = t710 * t600;
t687 = t713 * t715 * t710;
t678 = qJDD(3) + t687;
t758 = t710 * t678;
t679 = qJDD(3) - t687;
t757 = t710 * t679;
t753 = t712 * t558;
t752 = t712 * t597;
t593 = t713 * t600;
t751 = t713 * t679;
t749 = -pkin(2) * t600 + pkin(5) * t537;
t701 = t713 ^ 2;
t748 = t700 + t701;
t744 = t710 * qJDD(1);
t742 = t710 * t764;
t741 = t713 * t764;
t683 = -t761 - t768;
t635 = -t710 * t683 - t751;
t694 = t713 * t745;
t666 = 0.2e1 * t694 + t744;
t740 = -pkin(2) * t666 + pkin(5) * t635 + t592;
t698 = t701 * t715;
t685 = -t698 - t768;
t633 = t713 * t685 - t758;
t669 = -0.2e1 * t693 + t743;
t739 = pkin(2) * t669 + pkin(5) * t633 - t593;
t726 = -t668 + t693;
t667 = t694 + t744;
t727 = t667 + t694;
t547 = t726 * pkin(3) - t727 * pkin(6) + t600;
t559 = -t768 * pkin(3) + qJDD(3) * pkin(6) + t665 * t746 + t583;
t505 = -t712 * t547 + t709 * t559;
t506 = t709 * t547 + t712 * t559;
t472 = t709 * t505 + t712 * t506;
t737 = -t711 * t680 - t714 * t681;
t736 = t712 * qJDD(3) - t709 * t667;
t735 = t705 * t687;
t734 = t706 * t687;
t613 = -t686 - t652;
t544 = t709 * t613 + t773;
t479 = -pkin(3) * t544 + t505;
t504 = -pkin(6) * t544 + t760;
t545 = t712 * t613 - t775;
t611 = -t661 * qJD(4) + t736;
t647 = t688 * t661;
t573 = t611 + t647;
t515 = t713 * t545 - t710 * t573;
t733 = -pkin(2) * t544 + pkin(5) * t515 + t713 * t479 + t710 * t504;
t622 = -t653 - t686;
t549 = t712 * t622 + t759;
t481 = -pkin(3) * t549 + t506;
t510 = -pkin(6) * t549 + t753;
t550 = -t709 * t622 + t752;
t723 = -t709 * qJDD(3) - t712 * t667;
t577 = (qJD(4) - t688) * t659 + t723;
t520 = t713 * t550 - t710 * t577;
t732 = -pkin(2) * t549 + pkin(5) * t520 + t713 * t481 + t710 * t510;
t673 = t748 * qJDD(1);
t676 = t698 + t761;
t731 = pkin(2) * t676 + pkin(5) * t673 + t537;
t730 = -pkin(3) * t558 + pkin(6) * t472;
t675 = t714 * qJDD(1) - t711 * t715;
t728 = -pkin(4) * t675 - t711 * g(3);
t471 = -t712 * t505 + t709 * t506;
t536 = t713 * t581 - t710 * t583;
t724 = t714 * t680 - t711 * t681;
t574 = (-qJD(4) - t688) * t661 + t736;
t612 = -t659 * qJD(4) - t723;
t646 = t659 * t688;
t576 = t612 - t646;
t531 = t709 * t574 - t712 * t576;
t463 = -pkin(6) * t531 - t471;
t533 = t712 * t574 + t709 * t576;
t595 = t652 + t653;
t496 = t713 * t533 - t710 * t595;
t721 = pkin(5) * t496 + t710 * t463 + (-pkin(2) - t766) * t531;
t720 = pkin(3) * t573 + pkin(6) * t545 - t753;
t719 = pkin(3) * t577 + pkin(6) * t550 + t760;
t717 = pkin(3) * t595 + pkin(6) * t533 + t472;
t466 = t713 * t472 + t710 * t558;
t716 = pkin(5) * t466 + (-pkin(2) + t729) * t471;
t684 = t698 - t768;
t682 = -t761 + t768;
t677 = -t698 + t761;
t674 = t711 * qJDD(1) + t714 * t715;
t658 = t713 * t678;
t657 = t748 * t745;
t648 = -pkin(4) * t674 + t714 * g(3);
t641 = -t653 + t686;
t640 = t652 - t686;
t639 = t713 * t667 - t700 * t745;
t638 = -t710 * t668 - t701 * t745;
t637 = t705 * qJDD(3) + t706 * t657;
t636 = -t706 * qJDD(3) + t705 * t657;
t634 = -t710 * t682 + t658;
t632 = t713 * t684 - t757;
t631 = t713 * t683 - t757;
t630 = t713 * t682 + t758;
t629 = t710 * t685 + t658;
t628 = t710 * t684 + t751;
t627 = t727 * t710;
t626 = t726 * t713;
t623 = t653 - t652;
t621 = t706 * t673 - t705 * t676;
t620 = t705 * t673 + t706 * t676;
t617 = -t710 * t666 + t713 * t669;
t616 = t713 * t666 + t710 * t669;
t609 = t706 * t639 - t735;
t608 = t706 * t638 + t735;
t607 = t705 * t639 + t734;
t606 = t705 * t638 - t734;
t605 = t706 * t634 + t705 * t744;
t604 = t706 * t632 + t705 * t743;
t603 = t705 * t634 - t706 * t744;
t602 = t705 * t632 - t706 * t743;
t591 = t706 * t635 + t705 * t666;
t590 = t706 * t633 - t705 * t669;
t589 = t705 * t635 - t706 * t666;
t588 = t705 * t633 + t706 * t669;
t587 = -pkin(1) * t671 - t615;
t586 = pkin(1) * t672 - t614;
t585 = (t659 * t712 - t661 * t709) * t688;
t584 = (t659 * t709 + t661 * t712) * t688;
t582 = t706 * t617 + t705 * t677;
t580 = t705 * t617 - t706 * t677;
t575 = t612 + t646;
t572 = -t611 + t647;
t571 = t712 * t612 + t661 * t763;
t570 = t709 * t612 - t661 * t762;
t569 = -t709 * t611 - t659 * t762;
t568 = -t712 * t611 + t659 * t763;
t567 = t713 * t585 - t710 * t654;
t566 = t710 * t585 + t713 * t654;
t565 = -pkin(5) * t631 + t593;
t564 = t712 * t640 + t759;
t563 = -t709 * t641 + t773;
t562 = -pkin(5) * t629 + t592;
t561 = t709 * t640 - t752;
t560 = t712 * t641 + t775;
t553 = pkin(1) * t556;
t552 = -pkin(2) * t631 + t583;
t551 = -pkin(2) * t629 + t581;
t546 = pkin(1) * t702 + qJ(2) * t738;
t541 = t713 * t571 + t742;
t540 = t713 * t569 - t742;
t539 = t710 * t571 - t741;
t538 = t710 * t569 + t741;
t532 = t712 * t573 - t709 * t575;
t530 = t709 * t573 + t712 * t575;
t528 = t706 * t567 + t705 * t584;
t527 = t705 * t567 - t706 * t584;
t526 = pkin(1) * t588 + t739;
t525 = pkin(1) * t589 + t740;
t524 = t713 * t564 - t710 * t572;
t523 = t713 * t563 + t710 * t576;
t522 = t710 * t564 + t713 * t572;
t521 = t710 * t563 - t713 * t576;
t519 = t710 * t550 + t713 * t577;
t517 = -qJ(2) * t620 + t706 * t536;
t516 = qJ(2) * t621 + t705 * t536;
t514 = t710 * t545 + t713 * t573;
t512 = t706 * t537 + t705 * t600;
t511 = t705 * t537 - t706 * t600;
t509 = t713 * t532 + t710 * t623;
t508 = t710 * t532 - t713 * t623;
t503 = pkin(1) * t620 + t731;
t500 = t706 * t541 + t705 * t570;
t499 = t706 * t540 - t705 * t568;
t498 = t705 * t541 - t706 * t570;
t497 = t705 * t540 + t706 * t568;
t495 = t710 * t533 + t713 * t595;
t493 = -qJ(2) * t589 - t705 * t552 + t706 * t565;
t492 = -qJ(2) * t588 - t705 * t551 + t706 * t562;
t491 = t706 * t524 + t705 * t561;
t490 = t706 * t523 + t705 * t560;
t489 = t705 * t524 - t706 * t561;
t488 = t705 * t523 - t706 * t560;
t487 = t706 * t520 + t705 * t549;
t486 = t705 * t520 - t706 * t549;
t485 = -pkin(1) * t631 + qJ(2) * t591 + t706 * t552 + t705 * t565;
t484 = -pkin(1) * t629 + qJ(2) * t590 + t706 * t551 + t705 * t562;
t483 = t706 * t515 + t705 * t544;
t482 = t705 * t515 - t706 * t544;
t477 = t706 * t509 + t705 * t530;
t476 = t705 * t509 - t706 * t530;
t475 = t706 * t496 + t705 * t531;
t474 = t705 * t496 - t706 * t531;
t473 = pkin(1) * t511 + t749;
t469 = -pkin(2) * t519 - t719;
t468 = -pkin(2) * t514 - t720;
t467 = -qJ(2) * t511 - (pkin(2) * t705 - pkin(5) * t706) * t536;
t465 = t710 * t472 - t713 * t558;
t461 = qJ(2) * t512 - (-pkin(2) * t706 - pkin(5) * t705 - pkin(1)) * t536;
t460 = -pkin(5) * t519 - t710 * t481 + t713 * t510;
t459 = -pkin(5) * t514 - t710 * t479 + t713 * t504;
t458 = -pkin(2) * t495 - t717;
t457 = t706 * t466 + t705 * t471;
t456 = t705 * t466 - t706 * t471;
t455 = -pkin(5) * t495 + t713 * t463 + t531 * t767;
t454 = -pkin(2) * t465 - t730;
t453 = pkin(1) * t486 + t732;
t452 = pkin(1) * t482 + t733;
t451 = -pkin(5) * t465 + (-pkin(6) * t713 + t767) * t471;
t450 = -qJ(2) * t486 + t706 * t460 - t705 * t469;
t449 = pkin(1) * t474 + t721;
t448 = -qJ(2) * t482 + t706 * t459 - t705 * t468;
t447 = -pkin(1) * t519 + qJ(2) * t487 + t705 * t460 + t706 * t469;
t446 = -pkin(1) * t514 + qJ(2) * t483 + t705 * t459 + t706 * t468;
t445 = -qJ(2) * t474 + t706 * t455 - t705 * t458;
t444 = -pkin(1) * t495 + qJ(2) * t475 + t705 * t455 + t706 * t458;
t443 = pkin(1) * t456 + t716;
t442 = -qJ(2) * t456 + t706 * t451 - t705 * t454;
t441 = -pkin(1) * t465 + qJ(2) * t457 + t705 * t451 + t706 * t454;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t675, 0, -t674, 0, t728, -t648, -t724, -pkin(4) * t724, 0, 0, t618, 0, -t770, 0, t777, t778, t780, pkin(4) * t780 + qJ(2) * t750 - t711 * t546, -t711 * t607 + t714 * t609, -t711 * t580 + t714 * t582, -t711 * t603 + t714 * t605, -t711 * t606 + t714 * t608, -t711 * t602 + t714 * t604, -t711 * t636 + t714 * t637, t714 * t492 - t711 * t484 - pkin(4) * (t714 * t588 + t711 * t590), t714 * t493 - t711 * t485 - pkin(4) * (t714 * t589 + t711 * t591), t714 * t517 - t711 * t516 - pkin(4) * (t714 * t620 + t711 * t621), t714 * t467 - t711 * t461 - pkin(4) * (t714 * t511 + t711 * t512), -t711 * t498 + t714 * t500, -t711 * t476 + t714 * t477, -t711 * t488 + t714 * t490, -t711 * t497 + t714 * t499, -t711 * t489 + t714 * t491, -t711 * t527 + t714 * t528, t714 * t448 - t711 * t446 - pkin(4) * (t714 * t482 + t711 * t483), t714 * t450 - t711 * t447 - pkin(4) * (t714 * t486 + t711 * t487), t714 * t445 - t711 * t444 - pkin(4) * (t714 * t474 + t711 * t475), t714 * t442 - t711 * t441 - pkin(4) * (t714 * t456 + t711 * t457); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t674, 0, t675, 0, t648, t728, t737, pkin(4) * t737, 0, 0, t770, 0, t618, 0, -t778, t777, t779, pkin(4) * t779 + qJ(2) * t756 + t714 * t546, t714 * t607 + t711 * t609, t714 * t580 + t711 * t582, t714 * t603 + t711 * t605, t714 * t606 + t711 * t608, t714 * t602 + t711 * t604, t714 * t636 + t711 * t637, t711 * t492 + t714 * t484 + pkin(4) * (-t711 * t588 + t714 * t590), t711 * t493 + t714 * t485 + pkin(4) * (-t711 * t589 + t714 * t591), t711 * t517 + t714 * t516 + pkin(4) * (-t711 * t620 + t714 * t621), t711 * t467 + t714 * t461 + pkin(4) * (-t711 * t511 + t714 * t512), t714 * t498 + t711 * t500, t714 * t476 + t711 * t477, t714 * t488 + t711 * t490, t714 * t497 + t711 * t499, t714 * t489 + t711 * t491, t714 * t527 + t711 * t528, t711 * t448 + t714 * t446 + pkin(4) * (-t711 * t482 + t714 * t483), t711 * t450 + t714 * t447 + pkin(4) * (-t711 * t486 + t714 * t487), t711 * t445 + t714 * t444 + pkin(4) * (-t711 * t474 + t714 * t475), t711 * t442 + t714 * t441 + pkin(4) * (-t711 * t456 + t714 * t457); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t680, t681, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t586, t587, 0, -t553, t627, t616, t630, -t626, t628, 0, t526, t525, t503, t473, t539, t508, t521, t538, t522, t566, t452, t453, t449, t443; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t715, 0, 0, -g(3), -t680, 0, 0, 0, t672, 0, -t671, 0, t725, t645, t556, qJ(2) * t556, t609, t582, t605, t608, t604, t637, t492, t493, t517, t467, t500, t477, t490, t499, t491, t528, t448, t450, t445, t442; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t715, 0, qJDD(1), 0, g(3), 0, -t681, 0, 0, 0, t671, 0, t672, 0, -t645, t725, t738, t546, t607, t580, t603, t606, t602, t636, t484, t485, t516, t461, t498, t476, t488, t497, t489, t527, t446, t447, t444, t441; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t680, t681, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t586, t587, 0, -t553, t627, t616, t630, -t626, t628, 0, t526, t525, t503, t473, t539, t508, t521, t538, t522, t566, t452, t453, t449, t443; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t715, 0, 0, -t702, t614, 0, t639, t617, t634, t638, t632, t657, t562, t565, t536, pkin(5) * t536, t541, t509, t523, t540, t524, t567, t459, t460, t455, t451; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t715, 0, qJDD(1), 0, t702, 0, t615, 0, t687, -t677, -t744, -t687, -t743, -qJDD(3), t551, t552, 0, pkin(2) * t536, -t570, -t530, -t560, t568, -t561, -t584, t468, t469, t458, t454; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t614, -t615, 0, 0, t627, t616, t630, -t626, t628, 0, t739, t740, t731, t749, t539, t508, t521, t538, t522, t566, t733, t732, t721, t716; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t667, t669, t678, -t694, t684, t694, 0, t600, t581, 0, t571, t532, t563, t569, t564, t585, t504, t510, t463, -pkin(6) * t471; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t693, t666, t682, t668, t679, -t693, -t600, 0, t583, 0, -t764, -t623, -t576, t764, t572, t654, t479, t481, -pkin(3) * t531, -pkin(3) * t471; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t687, t677, t744, t687, t743, qJDD(3), -t581, -t583, 0, 0, t570, t530, t560, -t568, t561, t584, t720, t719, t717, t730; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t612, t573, t718, -t646, t640, t646, 0, t558, t505, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t647, t575, t641, t611, -t597, t647, -t558, 0, t506, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t764, t623, t576, -t764, -t572, -t654, -t505, -t506, 0, 0;];
m_new_reg = t1;
