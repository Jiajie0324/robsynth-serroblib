% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S4RRRP5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d3]';
%
% Output:
% f_new_reg [(3*5)x(5*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:17
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S4RRRP5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRRP5_invdynf_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRRP5_invdynf_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRRP5_invdynf_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRRP5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4RRRP5_invdynf_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:17:23
% EndTime: 2019-12-31 17:17:24
% DurationCPUTime: 1.59s
% Computational Cost: add. (2907->154), mult. (6244->176), div. (0->0), fcn. (4081->6), ass. (0->106)
t1151 = qJDD(2) + qJDD(3);
t1132 = sin(qJ(3));
t1135 = cos(qJ(3));
t1136 = cos(qJ(2));
t1163 = qJD(1) * t1136;
t1133 = sin(qJ(2));
t1164 = qJD(1) * t1133;
t1099 = t1132 * t1164 - t1135 * t1163;
t1101 = (t1132 * t1136 + t1133 * t1135) * qJD(1);
t1162 = t1101 * t1099;
t1078 = t1151 + t1162;
t1098 = t1101 ^ 2;
t1129 = qJD(2) + qJD(3);
t1166 = t1129 ^ 2;
t1171 = -t1098 - t1166;
t1050 = t1132 * t1078 - t1135 * t1171;
t1052 = t1135 * t1078 + t1132 * t1171;
t1046 = t1133 * t1050 - t1136 * t1052;
t1134 = sin(qJ(1));
t1137 = cos(qJ(1));
t1149 = qJD(2) * t1163;
t1152 = t1133 * qJDD(1);
t1107 = t1149 + t1152;
t1126 = t1136 * qJDD(1);
t1150 = qJD(2) * t1164;
t1108 = t1126 - t1150;
t1147 = t1135 * t1107 + t1132 * t1108;
t1142 = -t1099 * qJD(3) + t1147;
t1161 = t1129 * t1099;
t1141 = t1142 - t1161;
t1188 = t1134 * t1046 - t1137 * t1141;
t1187 = t1137 * t1046 + t1134 * t1141;
t1148 = t1132 * t1107 - t1135 * t1108;
t1154 = qJD(3) + t1129;
t1056 = t1154 * t1101 + t1148;
t1079 = t1151 - t1162;
t1082 = t1099 ^ 2;
t1169 = -t1166 - t1082;
t1176 = -t1132 * t1079 + t1135 * t1169;
t1177 = t1135 * t1079 + t1132 * t1169;
t1179 = -t1133 * t1177 + t1136 * t1176;
t1186 = t1134 * t1056 + t1137 * t1179;
t1185 = -t1137 * t1056 + t1134 * t1179;
t1036 = t1136 * t1050 + t1133 * t1052;
t1073 = t1098 + t1082;
t1061 = t1142 + t1161;
t1143 = (-qJD(3) + t1129) * t1101 - t1148;
t1167 = t1132 * t1061 + t1135 * t1143;
t1168 = -t1135 * t1061 + t1132 * t1143;
t1175 = -t1133 * t1168 + t1136 * t1167;
t1181 = t1137 * t1073 + t1134 * t1175;
t1180 = -t1134 * t1073 + t1137 * t1175;
t1178 = t1133 * t1176 + t1136 * t1177;
t1174 = t1133 * t1167 + t1136 * t1168;
t1165 = 2 * qJD(4);
t1131 = t1136 ^ 2;
t1139 = qJD(1) ^ 2;
t1159 = t1131 * t1139;
t1117 = -t1137 * g(1) - t1134 * g(2);
t1103 = -t1139 * pkin(1) + qJDD(1) * pkin(5) + t1117;
t1156 = t1133 * t1103;
t1155 = t1133 * t1139;
t1090 = -t1133 * g(3) + t1136 * t1103;
t1146 = qJD(2) * pkin(2) - pkin(6) * t1164;
t1071 = -pkin(2) * t1159 + t1108 * pkin(6) - qJD(2) * t1146 + t1090;
t1140 = qJDD(2) * pkin(2) - t1107 * pkin(6) - t1156 + (qJD(2) * pkin(6) * qJD(1) + pkin(2) * t1155 - g(3)) * t1136;
t1049 = t1135 * t1071 + t1132 * t1140;
t1130 = t1133 ^ 2;
t1153 = t1130 + t1131;
t1116 = t1134 * g(1) - t1137 * g(2);
t1048 = -t1132 * t1071 + t1135 * t1140;
t1145 = qJDD(1) * pkin(1) + t1116;
t1074 = t1108 * pkin(2) - t1146 * t1164 + (t1131 * pkin(6) + pkin(5)) * t1139 + t1145;
t1138 = qJD(2) ^ 2;
t1122 = t1136 * t1155;
t1120 = -t1138 - t1159;
t1119 = -t1130 * t1139 - t1138;
t1115 = -qJDD(2) + t1122;
t1114 = qJDD(2) + t1122;
t1113 = t1153 * t1139;
t1112 = -t1134 * qJDD(1) - t1137 * t1139;
t1111 = t1137 * qJDD(1) - t1134 * t1139;
t1110 = t1153 * qJDD(1);
t1109 = t1126 - 0.2e1 * t1150;
t1106 = 0.2e1 * t1149 + t1152;
t1102 = t1139 * pkin(5) + t1145;
t1089 = -t1136 * g(3) - t1156;
t1086 = t1136 * t1115 - t1133 * t1119;
t1085 = -t1133 * t1114 + t1136 * t1120;
t1084 = t1133 * t1115 + t1136 * t1119;
t1083 = t1136 * t1114 + t1133 * t1120;
t1081 = t1099 * pkin(3) - t1101 * qJ(4);
t1070 = -t1133 * t1089 + t1136 * t1090;
t1069 = t1136 * t1089 + t1133 * t1090;
t1035 = -t1151 * pkin(3) - qJ(4) * t1166 + t1101 * t1081 + qJDD(4) - t1048;
t1034 = -pkin(3) * t1166 + t1151 * qJ(4) - t1099 * t1081 + t1129 * t1165 + t1049;
t1033 = t1101 * t1165 + (-t1154 * t1099 + t1147) * qJ(4) + t1074 - t1056 * pkin(3);
t1032 = -t1132 * t1048 + t1135 * t1049;
t1031 = t1135 * t1048 + t1132 * t1049;
t1026 = t1135 * t1034 + t1132 * t1035;
t1025 = t1132 * t1034 - t1135 * t1035;
t1024 = -t1133 * t1031 + t1136 * t1032;
t1023 = t1136 * t1031 + t1133 * t1032;
t1022 = -t1133 * t1025 + t1136 * t1026;
t1021 = t1136 * t1025 + t1133 * t1026;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1112, -t1111, 0, -t1134 * t1116 + t1137 * t1117, 0, 0, 0, 0, 0, 0, t1137 * t1085 - t1134 * t1109, t1137 * t1086 + t1134 * t1106, t1137 * t1110 - t1134 * t1113, t1137 * t1070 - t1134 * t1102, 0, 0, 0, 0, 0, 0, t1186, t1187, t1180, t1137 * t1024 - t1134 * t1074, 0, 0, 0, 0, 0, 0, t1186, t1180, -t1187, t1137 * t1022 - t1134 * t1033; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1111, t1112, 0, t1137 * t1116 + t1134 * t1117, 0, 0, 0, 0, 0, 0, t1134 * t1085 + t1137 * t1109, t1134 * t1086 - t1137 * t1106, t1134 * t1110 + t1137 * t1113, t1134 * t1070 + t1137 * t1102, 0, 0, 0, 0, 0, 0, t1185, t1188, t1181, t1134 * t1024 + t1137 * t1074, 0, 0, 0, 0, 0, 0, t1185, t1181, -t1188, t1134 * t1022 + t1137 * t1033; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1083, t1084, 0, t1069, 0, 0, 0, 0, 0, 0, t1178, -t1036, t1174, t1023, 0, 0, 0, 0, 0, 0, t1178, t1174, t1036, t1021; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1139, -qJDD(1), 0, t1117, 0, 0, 0, 0, 0, 0, t1085, t1086, t1110, t1070, 0, 0, 0, 0, 0, 0, t1179, t1046, t1175, t1024, 0, 0, 0, 0, 0, 0, t1179, t1175, -t1046, t1022; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1139, 0, t1116, 0, 0, 0, 0, 0, 0, t1109, -t1106, t1113, t1102, 0, 0, 0, 0, 0, 0, -t1056, -t1141, t1073, t1074, 0, 0, 0, 0, 0, 0, -t1056, t1073, t1141, t1033; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1083, t1084, 0, t1069, 0, 0, 0, 0, 0, 0, t1178, -t1036, t1174, t1023, 0, 0, 0, 0, 0, 0, t1178, t1174, t1036, t1021; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1120, t1115, t1126, t1090, 0, 0, 0, 0, 0, 0, t1176, -t1052, t1167, t1032, 0, 0, 0, 0, 0, 0, t1176, t1167, t1052, t1026; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1114, t1119, -t1152, t1089, 0, 0, 0, 0, 0, 0, t1177, -t1050, t1168, t1031, 0, 0, 0, 0, 0, 0, t1177, t1168, t1050, t1025; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1109, t1106, -t1113, -t1102, 0, 0, 0, 0, 0, 0, t1056, t1141, -t1073, -t1074, 0, 0, 0, 0, 0, 0, t1056, -t1073, -t1141, -t1033; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1169, -t1078, t1143, t1049, 0, 0, 0, 0, 0, 0, t1169, t1143, t1078, t1034; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1079, t1171, -t1061, t1048, 0, 0, 0, 0, 0, 0, t1079, -t1061, -t1171, -t1035; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1056, t1141, -t1073, -t1074, 0, 0, 0, 0, 0, 0, t1056, -t1073, -t1141, -t1033; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1169, t1143, t1078, t1034; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1056, -t1073, -t1141, -t1033; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1079, t1061, t1171, t1035;];
f_new_reg = t1;
