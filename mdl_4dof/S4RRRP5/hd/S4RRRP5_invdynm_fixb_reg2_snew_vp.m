% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RRRP5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d3]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:17
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RRRP5_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRRP5_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRRP5_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRRP5_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRRP5_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4RRRP5_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:17:16
% EndTime: 2019-12-31 17:17:23
% DurationCPUTime: 7.23s
% Computational Cost: add. (14239->413), mult. (30716->491), div. (0->0), fcn. (19816->6), ass. (0->281)
t875 = sin(qJ(3));
t876 = sin(qJ(2));
t878 = cos(qJ(3));
t879 = cos(qJ(2));
t832 = (t875 * t879 + t876 * t878) * qJD(1);
t829 = t832 ^ 2;
t872 = qJD(2) + qJD(3);
t955 = t872 ^ 2;
t781 = t955 + t829;
t871 = qJDD(2) + qJDD(3);
t919 = qJD(1) * t876;
t830 = -t878 * t879 * qJD(1) + t875 * t919;
t949 = t832 * t830;
t964 = t871 + t949;
t940 = t875 * t964;
t715 = t878 * t781 + t940;
t927 = t878 * t964;
t741 = t875 * t781 - t927;
t696 = t876 * t715 + t879 * t741;
t877 = sin(qJ(1));
t880 = cos(qJ(1));
t917 = qJD(1) * qJD(2);
t863 = t879 * t917;
t916 = t876 * qJDD(1);
t841 = t863 + t916;
t909 = t876 * t917;
t914 = t879 * qJDD(1);
t889 = -t909 + t914;
t766 = -t830 * qJD(3) + t878 * t841 + t875 * t889;
t948 = t872 * t830;
t966 = t766 - t948;
t1020 = pkin(4) * (t880 * t696 + t877 * t966);
t1019 = pkin(4) * (t877 * t696 - t880 * t966);
t674 = t879 * t715 - t876 * t741;
t1018 = pkin(1) * t674;
t1017 = pkin(5) * t674;
t1016 = pkin(1) * t966 - pkin(5) * t696;
t907 = -t875 * t841 + t878 * t889;
t765 = t832 * qJD(3) - t907;
t823 = t872 * t832;
t967 = t765 + t823;
t688 = -t875 * t967 + t878 * t966;
t943 = t875 * t966;
t690 = t878 * t967 + t943;
t656 = t876 * t688 + t879 * t690;
t956 = t830 ^ 2;
t965 = t829 - t956;
t1015 = t877 * t656 + t880 * t965;
t1014 = t880 * t656 - t877 * t965;
t815 = t956 - t955;
t745 = t875 * t815 + t927;
t749 = t878 * t815 - t940;
t705 = t876 * t745 - t879 * t749;
t732 = t765 - t823;
t1011 = t877 * t705 - t880 * t732;
t1010 = t880 * t705 + t877 * t732;
t1009 = pkin(2) * t715;
t1008 = pkin(6) * t715;
t1007 = pkin(6) * t741;
t963 = t948 + t766;
t816 = t829 - t955;
t962 = -t949 + t871;
t939 = t875 * t962;
t987 = -t878 * t816 + t939;
t776 = t878 * t962;
t988 = t875 * t816 + t776;
t996 = -t876 * t987 + t879 * t988;
t1006 = t877 * t996 - t880 * t963;
t1005 = t877 * t963 + t880 * t996;
t652 = -t879 * t688 + t876 * t690;
t700 = t879 * t745 + t876 * t749;
t961 = -t955 - t956;
t970 = t878 * t961 - t939;
t973 = t875 * t961 + t776;
t985 = t876 * t970 + t879 * t973;
t1004 = pkin(1) * t985;
t1003 = pkin(5) * t985;
t986 = -t876 * t973 + t879 * t970;
t1000 = -pkin(1) * t967 + pkin(5) * t986;
t999 = pkin(4) * (t877 * t986 - t880 * t967);
t998 = pkin(4) * (t877 * t967 + t880 * t986);
t997 = t876 * t988 + t879 * t987;
t767 = -t956 - t829;
t995 = pkin(1) * t767;
t994 = pkin(2) * t767;
t993 = pkin(2) * t973;
t992 = pkin(6) * t970;
t991 = pkin(6) * t973;
t990 = t877 * t767;
t989 = t880 * t767;
t974 = t966 * qJ(4);
t890 = (-t830 * t875 - t832 * t878) * t872;
t947 = t872 * t875;
t812 = t832 * t947;
t946 = t872 * t878;
t911 = t830 * t946;
t896 = t812 - t911;
t959 = -t876 * t890 + t879 * t896;
t972 = -t880 * t871 + t877 * t959;
t910 = t880 * t949;
t891 = t875 * t765 + t911;
t897 = -t878 * t765 + t830 * t947;
t958 = -t876 * t897 + t879 * t891;
t971 = t877 * t958 + t910;
t912 = t877 * t949;
t969 = t880 * t958 - t912;
t968 = t877 * t871 + t880 * t959;
t874 = t879 ^ 2;
t882 = qJD(1) ^ 2;
t868 = t874 * t882;
t881 = qJD(2) ^ 2;
t856 = -t868 - t881;
t960 = t876 * t896 + t879 * t890;
t957 = t876 * t891 + t879 * t897;
t932 = t876 * t882;
t851 = t880 * g(1) + t877 * g(2);
t834 = -t882 * pkin(1) + qJDD(1) * pkin(5) - t851;
t935 = t876 * t834;
t756 = qJDD(2) * pkin(2) - t841 * pkin(6) - t935 + (pkin(2) * t932 + pkin(6) * t917 - g(3)) * t879;
t811 = -t876 * g(3) + t879 * t834;
t760 = t856 * pkin(2) + pkin(6) * t914 + t811;
t709 = -t878 * t756 + t875 * t760;
t710 = t875 * t756 + t878 * t760;
t663 = -t878 * t709 + t875 * t710;
t954 = pkin(2) * t663;
t727 = t878 * t963;
t733 = (-qJD(3) + t872) * t832 + t907;
t689 = t875 * t733 - t727;
t953 = pkin(2) * t689;
t952 = pkin(3) * t878;
t951 = t765 * pkin(3);
t950 = qJ(4) * t878;
t873 = t876 ^ 2;
t945 = t873 * t882;
t942 = t875 * t963;
t850 = t877 * g(1) - t880 * g(2);
t893 = qJDD(1) * pkin(1) + t850;
t769 = t889 * pkin(2) - (qJD(2) * pkin(2) - pkin(6) * t919) * t919 + (t874 * pkin(6) + pkin(5)) * t882 + t893;
t941 = t875 * t769;
t937 = t876 * t663;
t833 = t882 * pkin(5) + t893;
t936 = t876 * t833;
t858 = t879 * t932;
t848 = qJDD(2) + t858;
t934 = t876 * t848;
t849 = qJDD(2) - t858;
t933 = t876 * t849;
t928 = t878 * t769;
t926 = t879 * t663;
t925 = t879 * t833;
t842 = -0.2e1 * t909 + t914;
t797 = t879 * t842;
t924 = t879 * t849;
t918 = qJD(4) * t872;
t861 = 0.2e1 * t918;
t787 = t830 * pkin(3) - t832 * qJ(4);
t895 = -pkin(3) * t955 + t871 * qJ(4) - t830 * t787 + t710;
t671 = t861 + t895;
t673 = -t871 * pkin(3) - qJ(4) * t955 + t832 * t787 + qJDD(4) + t709;
t922 = -pkin(3) * t673 + qJ(4) * t671;
t921 = -pkin(3) * t963 - qJ(4) * t732;
t920 = t873 + t874;
t915 = t877 * qJDD(1);
t913 = t880 * qJDD(1);
t908 = -qJ(4) * t875 - pkin(2);
t664 = t875 * t709 + t878 * t710;
t810 = t879 * g(3) + t935;
t759 = t876 * t810 + t879 * t811;
t906 = -t877 * t850 - t880 * t851;
t905 = t877 * t858;
t904 = t880 * t858;
t648 = t875 * t671 - t878 * t673;
t903 = pkin(2) * t648 + t922;
t687 = -t875 * t732 - t727;
t902 = pkin(2) * t687 + t921;
t901 = -t710 - t1009;
t845 = -t877 * t882 + t913;
t900 = -pkin(4) * t845 - t877 * g(3);
t724 = t875 * t766 + t832 * t946;
t725 = t878 * t766 - t812;
t685 = -t876 * t724 + t879 * t725;
t899 = t877 * t685 - t910;
t898 = t880 * t685 + t912;
t758 = t879 * t810 - t876 * t811;
t894 = t880 * t850 - t877 * t851;
t892 = -t709 + t993;
t888 = pkin(3) * t781 + qJ(4) * t964 + t895;
t887 = t888 + t1009;
t886 = pkin(3) * t962 + qJ(4) * t961 - t673;
t885 = t886 + t993;
t884 = -pkin(3) * t823 + 0.2e1 * qJD(4) * t832 + t769;
t883 = t884 + t974;
t855 = t868 - t881;
t854 = -t881 - t945;
t853 = t881 - t945;
t847 = -t868 + t945;
t846 = t868 + t945;
t844 = t880 * t882 + t915;
t843 = t920 * qJDD(1);
t840 = 0.2e1 * t863 + t916;
t838 = t879 * t848;
t837 = t920 * t917;
t826 = -pkin(4) * t844 + t880 * g(3);
t814 = t879 * t841 - t873 * t917;
t813 = -t874 * t917 - t876 * t889;
t806 = -t876 * t854 - t924;
t805 = -t876 * t853 + t838;
t804 = t879 * t856 - t934;
t803 = t879 * t855 - t933;
t802 = t879 * t854 - t933;
t801 = t879 * t853 + t934;
t800 = t876 * t856 + t838;
t799 = t876 * t855 + t924;
t798 = (t841 + t863) * t876;
t794 = -t876 * t840 + t797;
t793 = t879 * t840 + t876 * t842;
t771 = -pkin(5) * t802 - t925;
t770 = -pkin(5) * t800 - t936;
t764 = -pkin(1) * t802 + t811;
t763 = -pkin(1) * t800 + t810;
t752 = pkin(1) * t842 + pkin(5) * t804 + t925;
t751 = -pkin(1) * t840 + pkin(5) * t806 - t936;
t726 = pkin(1) * t833 + pkin(5) * t759;
t719 = pkin(1) * t846 + pkin(5) * t843 + t759;
t707 = -t928 + t1008;
t706 = -t941 - t991;
t693 = t878 * t733 + t942;
t691 = -t878 * t732 + t942;
t682 = t879 * t724 + t876 * t725;
t669 = -pkin(2) * t966 + t1007 - t941;
t668 = -pkin(2) * t967 + t928 + t992;
t667 = t883 - t951;
t666 = -qJ(4) * t767 + t673;
t665 = -pkin(3) * t767 + t671;
t662 = (-t765 - t967) * pkin(3) + t883;
t661 = t884 - t951 + 0.2e1 * t974;
t660 = pkin(2) * t769 + pkin(6) * t664;
t659 = -t876 * t689 + t879 * t693;
t657 = -t876 * t687 + t879 * t691;
t655 = t879 * t689 + t876 * t693;
t653 = t879 * t687 + t876 * t691;
t651 = -t901 + t1018;
t650 = -t892 - t1004;
t649 = t878 * t671 + t875 * t673;
t647 = -pkin(6) * t689 - t663;
t646 = -t875 * t662 - t950 * t967 - t991;
t645 = -pkin(3) * t943 + t878 * t661 - t1008;
t644 = pkin(6) * t693 + t664 - t994;
t643 = -pkin(1) * t655 - t953;
t642 = -t885 - t1004;
t641 = -t876 * t669 + t879 * t707 + t1017;
t640 = t879 * t664 - t937;
t639 = t876 * t664 + t926;
t638 = t878 * t662 + t908 * t967 + t992;
t637 = -t1007 + t875 * t661 + (pkin(2) + t952) * t966;
t636 = -t887 - 0.2e1 * t918 - t1018;
t635 = -t876 * t668 + t879 * t706 - t1003;
t634 = t879 * t669 + t876 * t707 - t1016;
t633 = t879 * t668 + t876 * t706 + t1000;
t632 = -pkin(1) * t653 - t902;
t631 = -pkin(6) * t687 - t875 * t665 + t878 * t666;
t630 = pkin(6) * t691 + t878 * t665 + t875 * t666 - t994;
t629 = -pkin(1) * t639 - t954;
t628 = -t876 * t648 + t879 * t649;
t627 = t879 * t648 + t876 * t649;
t626 = -pkin(6) * t648 + (-pkin(3) * t875 + t950) * t667;
t625 = pkin(6) * t649 + (-t908 + t952) * t667;
t624 = -pkin(5) * t639 - pkin(6) * t926 - t876 * t660;
t623 = -t876 * t638 + t879 * t646 - t1003;
t622 = pkin(1) * t769 + pkin(5) * t640 - pkin(6) * t937 + t879 * t660;
t621 = -t876 * t637 + t879 * t645 - t1017;
t620 = -pkin(5) * t655 - t876 * t644 + t879 * t647;
t619 = t879 * t638 + t876 * t646 + t1000;
t618 = pkin(5) * t659 + t879 * t644 + t876 * t647 - t995;
t617 = t879 * t637 + t876 * t645 + t1016;
t616 = -pkin(1) * t627 - t903;
t615 = -pkin(5) * t653 - t876 * t630 + t879 * t631;
t614 = pkin(5) * t657 + t879 * t630 + t876 * t631 - t995;
t613 = -pkin(5) * t627 - t876 * t625 + t879 * t626;
t612 = pkin(1) * t667 + pkin(5) * t628 + t879 * t625 + t876 * t626;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t845, 0, -t844, 0, t900, -t826, -t894, -pkin(4) * t894, t880 * t814 - t905, t880 * t794 + t877 * t847, t880 * t805 + t876 * t915, t880 * t813 + t905, t880 * t803 + t877 * t914, t877 * qJDD(2) + t880 * t837, t880 * t770 - t877 * t763 - pkin(4) * (t877 * t804 + t880 * t842), t880 * t771 - t877 * t764 - pkin(4) * (t877 * t806 - t880 * t840), t880 * t758 - pkin(4) * (t877 * t843 + t880 * t846), -pkin(4) * (t877 * t759 + t880 * t833) - (t877 * pkin(1) - t880 * pkin(5)) * t758, t898, -t1014, t1005, t969, -t1010, t968, t880 * t635 - t877 * t650 - t999, t880 * t641 - t877 * t651 - t1019, t880 * t620 - t877 * t643 - pkin(4) * (t877 * t659 - t989), t880 * t624 - t877 * t629 - pkin(4) * (t877 * t640 + t880 * t769), t898, t1005, t1014, t968, t1010, t969, t880 * t623 - t877 * t642 - t999, t880 * t615 - t877 * t632 - pkin(4) * (t877 * t657 - t989), t880 * t621 - t877 * t636 + t1019, t880 * t613 - t877 * t616 - pkin(4) * (t877 * t628 + t880 * t667); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t844, 0, t845, 0, t826, t900, t906, pkin(4) * t906, t877 * t814 + t904, t877 * t794 - t880 * t847, t877 * t805 - t876 * t913, t877 * t813 - t904, t877 * t803 - t879 * t913, -t880 * qJDD(2) + t877 * t837, t877 * t770 + t880 * t763 + pkin(4) * (t880 * t804 - t877 * t842), t877 * t771 + t880 * t764 + pkin(4) * (t880 * t806 + t877 * t840), t877 * t758 + pkin(4) * (t880 * t843 - t877 * t846), pkin(4) * (t880 * t759 - t877 * t833) - (-t880 * pkin(1) - t877 * pkin(5)) * t758, t899, -t1015, t1006, t971, -t1011, t972, t877 * t635 + t880 * t650 + t998, t877 * t641 + t880 * t651 + t1020, t877 * t620 + t880 * t643 + pkin(4) * (t880 * t659 + t990), t877 * t624 + t880 * t629 + pkin(4) * (t880 * t640 - t877 * t769), t899, t1006, t1015, t972, t1011, t971, t877 * t623 + t880 * t642 + t998, t877 * t615 + t880 * t632 + pkin(4) * (t880 * t657 + t990), t877 * t621 + t880 * t636 - t1020, t877 * t613 + t880 * t616 + pkin(4) * (t880 * t628 - t877 * t667); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t850, t851, 0, 0, t798, t793, t801, t797, t799, 0, t752, t751, t719, t726, t682, -t652, t997, t957, t700, t960, t633, t634, t618, t622, t682, t997, t652, t960, -t700, t957, t619, t614, t617, t612; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t882, 0, 0, -g(3), -t850, 0, t814, t794, t805, t813, t803, t837, t770, t771, t758, pkin(5) * t758, t685, -t656, t996, t958, -t705, t959, t635, t641, t620, t624, t685, t996, t656, t959, t705, t958, t623, t615, t621, t613; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t882, 0, qJDD(1), 0, g(3), 0, -t851, 0, t858, -t847, -t916, -t858, -t914, -qJDD(2), t763, t764, 0, pkin(1) * t758, -t949, -t965, -t963, t949, t732, -t871, t650, t651, t643, t629, -t949, -t963, t965, -t871, -t732, t949, t642, t632, t636, t616; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t850, t851, 0, 0, t798, t793, t801, t797, t799, 0, t752, t751, t719, t726, t682, -t652, t997, t957, t700, t960, t633, t634, t618, t622, t682, t997, t652, t960, -t700, t957, t619, t614, t617, t612; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t841, t842, t848, -t863, t855, t863, 0, -t833, t810, 0, t725, -t690, t988, t891, t749, t896, t706, t707, t647, -pkin(6) * t663, t725, t988, t690, t896, -t749, t891, t646, t631, t645, t626; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t909, t840, t853, t889, t849, -t909, t833, 0, t811, 0, t724, t688, t987, t897, t745, t890, t668, t669, t644, t660, t724, t987, -t688, t890, -t745, t897, t638, t630, t637, t625; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t858, t847, t916, t858, t914, qJDD(2), -t810, -t811, 0, 0, t949, t965, t963, -t949, -t732, t871, t892, t901, t953, t954, t949, t963, -t965, t871, t732, -t949, t885, t902, t861 + t887, t903; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t766, -t967, t962, t948, t815, -t948, 0, -t769, t709, 0, t766, t962, t967, -t948, -t815, t948, -qJ(4) * t967, t666, t661, qJ(4) * t667; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t823, t966, -t816, -t765, t964, -t823, t769, 0, t710, 0, t823, -t816, -t966, -t823, -t964, -t765, t662, t665, pkin(3) * t966, pkin(3) * t667; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t949, t965, t963, -t949, -t732, t871, -t709, -t710, 0, 0, t949, t963, -t965, t871, t732, -t949, t886, t921, t861 + t888, t922; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t766, t962, t967, -t948, -t815, t948, 0, t673, t667, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t949, t963, -t965, t871, t732, -t949, -t673, 0, t671, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t823, t816, t966, t823, t964, t765, -t667, -t671, 0, 0;];
m_new_reg = t1;
