% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RRPR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4,theta3]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:05
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RRPR6_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRPR6_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRPR6_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRPR6_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRPR6_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RRPR6_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:05:04
% EndTime: 2019-12-31 17:05:11
% DurationCPUTime: 7.53s
% Computational Cost: add. (34758->479), mult. (82166->672), div. (0->0), fcn. (56067->8), ass. (0->331)
t829 = sin(pkin(7));
t830 = cos(pkin(7));
t835 = cos(qJ(2));
t832 = sin(qJ(2));
t874 = qJD(1) * t832;
t789 = -t830 * t835 * qJD(1) + t829 * t874;
t787 = t789 ^ 2;
t837 = qJD(2) ^ 2;
t751 = -t837 - t787;
t791 = (t829 * t835 + t830 * t832) * qJD(1);
t757 = t791 * t789;
t903 = qJDD(2) - t757;
t908 = t830 * t903;
t703 = t829 * t751 + t908;
t867 = qJD(1) * qJD(2);
t819 = t835 * t867;
t866 = t832 * qJDD(1);
t800 = t819 + t866;
t838 = qJD(1) ^ 2;
t882 = t832 * t838;
t833 = sin(qJ(1));
t836 = cos(qJ(1));
t811 = t836 * g(1) + t833 * g(2);
t794 = -t838 * pkin(1) + qJDD(1) * pkin(5) - t811;
t885 = t832 * t794;
t722 = qJDD(2) * pkin(2) - t800 * qJ(3) - t885 + (pkin(2) * t882 + qJ(3) * t867 - g(3)) * t835;
t774 = -t832 * g(3) + t835 * t794;
t821 = t835 * qJDD(1);
t858 = t832 * t867;
t801 = t821 - t858;
t828 = t835 ^ 2;
t822 = t828 * t838;
t842 = qJD(2) * pkin(2) - qJ(3) * t874;
t723 = -pkin(2) * t822 + t801 * qJ(3) - qJD(2) * t842 + t774;
t846 = -0.2e1 * qJD(3) * t791 + t830 * t722 - t829 * t723;
t910 = pkin(2) * t703 + t846;
t909 = t829 * t903;
t831 = sin(qJ(4));
t834 = cos(qJ(4));
t747 = t834 * t789 + t831 * t791;
t749 = -t831 * t789 + t834 * t791;
t702 = t749 * t747;
t825 = qJDD(2) + qJDD(4);
t904 = -t702 + t825;
t907 = t831 * t904;
t906 = t834 * t904;
t759 = t830 * t800 + t829 * t801;
t853 = t829 * t800 - t830 * t801;
t688 = -t747 * qJD(4) + t834 * t759 - t831 * t853;
t826 = qJD(2) + qJD(4);
t742 = t826 * t747;
t905 = t688 - t742;
t785 = qJD(2) * t789;
t733 = t759 + t785;
t854 = t831 * t759 + t834 * t853;
t658 = (qJD(4) - t826) * t749 + t854;
t745 = t747 ^ 2;
t746 = t749 ^ 2;
t788 = t791 ^ 2;
t824 = t826 ^ 2;
t870 = qJD(3) * t789;
t781 = -0.2e1 * t870;
t876 = t829 * t722 + t830 * t723;
t669 = t781 + t876;
t631 = t829 * t669 + t830 * t846;
t902 = pkin(2) * t631;
t873 = qJD(2) * t791;
t731 = -t853 + t873;
t690 = t829 * t731 - t830 * t733;
t901 = pkin(2) * t690;
t899 = t826 * t749;
t898 = t826 * t831;
t897 = t826 * t834;
t827 = t832 ^ 2;
t896 = t827 * t838;
t638 = pkin(3) * t903 - t733 * pkin(6) + t846;
t845 = qJD(2) * pkin(3) - t791 * pkin(6);
t643 = -t787 * pkin(3) - pkin(6) * t853 - qJD(2) * t845 + t669;
t604 = -t834 * t638 + t831 * t643;
t605 = t831 * t638 + t834 * t643;
t578 = -t834 * t604 + t831 * t605;
t895 = t829 * t578;
t810 = t833 * g(1) - t836 * g(2);
t843 = qJDD(1) * pkin(1) + t810;
t727 = t801 * pkin(2) - qJDD(3) - t842 * t874 + (qJ(3) * t828 + pkin(5)) * t838 + t843;
t894 = t829 * t727;
t753 = qJDD(2) + t757;
t893 = t829 * t753;
t892 = t830 * t578;
t891 = t830 * t727;
t890 = t830 * t753;
t667 = -pkin(3) * t853 + t787 * pkin(6) - t791 * t845 + t727;
t889 = t831 * t667;
t699 = t702 + t825;
t888 = t831 * t699;
t887 = t832 * t631;
t793 = t838 * pkin(5) + t843;
t886 = t832 * t793;
t817 = t835 * t882;
t808 = qJDD(2) + t817;
t884 = t832 * t808;
t809 = qJDD(2) - t817;
t883 = t832 * t809;
t881 = t834 * t667;
t880 = t834 * t699;
t879 = t835 * t631;
t878 = t835 * t793;
t877 = t835 * t809;
t875 = t827 + t828;
t872 = qJD(2) * t829;
t871 = qJD(2) * t830;
t865 = t833 * qJDD(1);
t864 = t836 * qJDD(1);
t863 = t836 * qJDD(2);
t862 = t833 * t702;
t861 = t833 * t757;
t860 = t836 * t702;
t859 = t836 * t757;
t579 = t831 * t604 + t834 * t605;
t558 = t829 * t579 + t892;
t577 = pkin(3) * t578;
t857 = pkin(2) * t558 + t577;
t662 = t688 + t742;
t625 = -t658 * t831 - t834 * t662;
t627 = -t658 * t834 + t831 * t662;
t588 = t830 * t625 + t829 * t627;
t623 = pkin(3) * t625;
t856 = pkin(2) * t588 + t623;
t632 = t830 * t669 - t829 * t846;
t773 = t835 * g(3) + t885;
t726 = t832 * t773 + t835 * t774;
t852 = -t833 * t810 - t836 * t811;
t851 = t833 * t817;
t850 = t836 * t817;
t779 = -t788 - t837;
t709 = t830 * t779 - t893;
t849 = pkin(2) * t709 - t876;
t805 = -t833 * t838 + t864;
t848 = -pkin(4) * t805 - t833 * g(3);
t697 = -t824 - t745;
t648 = t831 * t697 + t906;
t847 = pkin(3) * t648 - t604;
t725 = t835 * t773 - t832 * t774;
t844 = t836 * t810 - t833 * t811;
t736 = -t746 - t824;
t665 = t834 * t736 - t888;
t841 = pkin(3) * t665 - t605;
t649 = t834 * t697 - t907;
t613 = t830 * t648 + t829 * t649;
t840 = pkin(2) * t613 + t847;
t666 = -t831 * t736 - t880;
t628 = t830 * t665 + t829 * t666;
t839 = pkin(2) * t628 + t841;
t820 = t833 * qJDD(2);
t816 = -t822 - t837;
t815 = t822 - t837;
t814 = -t837 - t896;
t813 = t837 - t896;
t807 = -t822 + t896;
t806 = t822 + t896;
t804 = t836 * t838 + t865;
t803 = t875 * qJDD(1);
t802 = t821 - 0.2e1 * t858;
t799 = 0.2e1 * t819 + t866;
t797 = t835 * t808;
t796 = t875 * t867;
t786 = -pkin(4) * t804 + t836 * g(3);
t778 = -t788 + t837;
t777 = t787 - t837;
t776 = t835 * t800 - t827 * t867;
t775 = -t832 * t801 - t828 * t867;
t772 = -t832 * t814 - t877;
t771 = -t832 * t813 + t797;
t770 = t835 * t816 - t884;
t769 = t835 * t815 - t883;
t768 = t835 * t814 - t883;
t767 = t835 * t813 + t884;
t766 = t832 * t816 + t797;
t765 = t832 * t815 + t877;
t764 = (t800 + t819) * t832;
t763 = (t801 - t858) * t835;
t761 = -t832 * t799 + t835 * t802;
t760 = t835 * t799 + t832 * t802;
t756 = t788 - t787;
t744 = (-t789 * t830 + t791 * t829) * qJD(2);
t743 = (-t789 * t829 - t791 * t830) * qJD(2);
t740 = -t746 + t824;
t739 = t745 - t824;
t738 = -pkin(5) * t768 - t878;
t737 = -pkin(5) * t766 - t886;
t735 = -pkin(1) * t768 + t774;
t734 = -pkin(1) * t766 + t773;
t732 = t759 - t785;
t729 = t853 + t873;
t728 = -t787 - t788;
t721 = t830 * t759 - t791 * t872;
t720 = t829 * t759 + t791 * t871;
t719 = t789 * t871 + t829 * t853;
t718 = t789 * t872 - t830 * t853;
t716 = pkin(1) * t802 + pkin(5) * t770 + t878;
t715 = -pkin(1) * t799 + pkin(5) * t772 - t886;
t712 = -t829 * t779 - t890;
t711 = -t829 * t778 + t908;
t710 = t830 * t777 - t893;
t708 = t830 * t778 + t909;
t707 = t829 * t777 + t890;
t706 = pkin(1) * t793 + pkin(5) * t726;
t705 = pkin(1) * t806 + pkin(5) * t803 + t726;
t704 = t830 * t751 - t909;
t701 = t746 - t745;
t696 = -t832 * t743 + t835 * t744;
t695 = t835 * t743 + t832 * t744;
t694 = (-t747 * t834 + t749 * t831) * t826;
t693 = (-t747 * t831 - t749 * t834) * t826;
t692 = t830 * t731 + t829 * t733;
t691 = -t830 * t729 - t829 * t732;
t689 = -t829 * t729 + t830 * t732;
t687 = -t749 * qJD(4) - t854;
t686 = -qJ(3) * t709 - t891;
t685 = -t745 - t746;
t684 = -t832 * t720 + t835 * t721;
t683 = -t832 * t718 + t835 * t719;
t682 = t835 * t720 + t832 * t721;
t681 = t835 * t718 + t832 * t719;
t680 = -t832 * t709 + t835 * t712;
t679 = -t832 * t708 + t835 * t711;
t678 = -t832 * t707 + t835 * t710;
t677 = t835 * t709 + t832 * t712;
t676 = t835 * t708 + t832 * t711;
t675 = t835 * t707 + t832 * t710;
t674 = -qJ(3) * t703 - t894;
t673 = t834 * t739 - t888;
t672 = -t831 * t740 + t906;
t671 = t831 * t739 + t880;
t670 = t834 * t740 + t907;
t657 = (qJD(4) + t826) * t749 + t854;
t656 = t834 * t688 - t749 * t898;
t655 = t831 * t688 + t749 * t897;
t654 = -t831 * t687 + t747 * t897;
t653 = t834 * t687 + t747 * t898;
t652 = -t832 * t703 + t835 * t704;
t651 = t835 * t703 + t832 * t704;
t650 = -pkin(2) * t732 + qJ(3) * t712 - t894;
t646 = -pkin(2) * t729 + qJ(3) * t704 + t891;
t645 = -t829 * t693 + t830 * t694;
t644 = t830 * t693 + t829 * t694;
t642 = -t832 * t690 + t835 * t692;
t641 = -t832 * t689 + t835 * t691;
t640 = t835 * t690 + t832 * t692;
t639 = t835 * t689 + t832 * t691;
t636 = -t829 * t671 + t830 * t673;
t635 = -t829 * t670 + t830 * t672;
t634 = t830 * t671 + t829 * t673;
t633 = t830 * t670 + t829 * t672;
t630 = -pkin(6) * t665 - t881;
t629 = -t829 * t665 + t830 * t666;
t626 = -t834 * t657 - t831 * t905;
t624 = -t831 * t657 + t834 * t905;
t622 = -pkin(6) * t648 - t889;
t621 = -t829 * t655 + t830 * t656;
t620 = -t829 * t653 + t830 * t654;
t619 = t830 * t655 + t829 * t656;
t618 = t830 * t653 + t829 * t654;
t617 = -pkin(1) * t640 - t901;
t616 = -pkin(1) * t677 + t781 - t849;
t615 = pkin(2) * t727 + qJ(3) * t632;
t614 = -t829 * t648 + t830 * t649;
t612 = -pkin(1) * t651 - t910;
t611 = -qJ(3) * t690 - t631;
t610 = -t832 * t644 + t835 * t645;
t609 = t835 * t644 + t832 * t645;
t608 = -pkin(5) * t677 - t832 * t650 + t835 * t686;
t607 = -pkin(3) * t905 + pkin(6) * t666 - t889;
t606 = -pkin(2) * t728 + qJ(3) * t692 + t632;
t602 = -pkin(3) * t657 + pkin(6) * t649 + t881;
t601 = -pkin(1) * t732 + pkin(5) * t680 + t835 * t650 + t832 * t686;
t600 = -pkin(5) * t651 - t832 * t646 + t835 * t674;
t599 = -pkin(1) * t729 + pkin(5) * t652 + t835 * t646 + t832 * t674;
t598 = -t832 * t634 + t835 * t636;
t597 = -t832 * t633 + t835 * t635;
t596 = t835 * t634 + t832 * t636;
t595 = t835 * t633 + t832 * t635;
t594 = t835 * t632 - t887;
t593 = t832 * t632 + t879;
t592 = -t832 * t628 + t835 * t629;
t591 = t835 * t628 + t832 * t629;
t590 = -t829 * t625 + t830 * t627;
t589 = -t829 * t624 + t830 * t626;
t587 = t830 * t624 + t829 * t626;
t586 = -t832 * t619 + t835 * t621;
t585 = -t832 * t618 + t835 * t620;
t584 = t835 * t619 + t832 * t621;
t583 = t835 * t618 + t832 * t620;
t582 = -t832 * t613 + t835 * t614;
t581 = t835 * t613 + t832 * t614;
t580 = -pkin(1) * t593 - t902;
t576 = -qJ(3) * t628 - t829 * t607 + t830 * t630;
t575 = pkin(3) * t667 + pkin(6) * t579;
t574 = -pkin(5) * t640 - t832 * t606 + t835 * t611;
t573 = -pkin(1) * t728 + pkin(5) * t642 + t835 * t606 + t832 * t611;
t572 = -qJ(3) * t613 - t829 * t602 + t830 * t622;
t571 = -pkin(2) * t905 + qJ(3) * t629 + t830 * t607 + t829 * t630;
t570 = -pkin(5) * t593 - qJ(3) * t879 - t832 * t615;
t569 = -pkin(6) * t625 - t578;
t568 = pkin(1) * t727 + pkin(5) * t594 - qJ(3) * t887 + t835 * t615;
t567 = -t832 * t588 + t835 * t590;
t566 = -t832 * t587 + t835 * t589;
t565 = t835 * t588 + t832 * t590;
t564 = t835 * t587 + t832 * t589;
t563 = -pkin(2) * t657 + qJ(3) * t614 + t830 * t602 + t829 * t622;
t562 = -pkin(3) * t685 + pkin(6) * t627 + t579;
t561 = -pkin(1) * t591 - t839;
t560 = -pkin(1) * t581 - t840;
t559 = t830 * t579 - t895;
t557 = -pkin(1) * t565 - t856;
t556 = -pkin(5) * t591 - t832 * t571 + t835 * t576;
t555 = -pkin(1) * t905 + pkin(5) * t592 + t835 * t571 + t832 * t576;
t554 = -qJ(3) * t588 - t829 * t562 + t830 * t569;
t553 = -pkin(5) * t581 - t832 * t563 + t835 * t572;
t552 = -pkin(2) * t685 + qJ(3) * t590 + t830 * t562 + t829 * t569;
t551 = -pkin(1) * t657 + pkin(5) * t582 + t835 * t563 + t832 * t572;
t550 = -t832 * t558 + t835 * t559;
t549 = t835 * t558 + t832 * t559;
t548 = -pkin(6) * t892 - qJ(3) * t558 - t829 * t575;
t547 = pkin(2) * t667 - pkin(6) * t895 + qJ(3) * t559 + t830 * t575;
t546 = -pkin(1) * t549 - t857;
t545 = -pkin(5) * t565 - t832 * t552 + t835 * t554;
t544 = -pkin(1) * t685 + pkin(5) * t567 + t835 * t552 + t832 * t554;
t543 = -pkin(5) * t549 - t832 * t547 + t835 * t548;
t542 = pkin(1) * t667 + pkin(5) * t550 + t835 * t547 + t832 * t548;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t805, 0, -t804, 0, t848, -t786, -t844, -pkin(4) * t844, t836 * t776 - t851, t836 * t761 + t833 * t807, t836 * t771 + t832 * t865, t836 * t775 + t851, t836 * t769 + t821 * t833, t836 * t796 + t820, t836 * t737 - t833 * t734 - pkin(4) * (t833 * t770 + t836 * t802), t836 * t738 - t833 * t735 - pkin(4) * (t833 * t772 - t836 * t799), t836 * t725 - pkin(4) * (t833 * t803 + t836 * t806), -pkin(4) * (t833 * t726 + t836 * t793) - (t833 * pkin(1) - t836 * pkin(5)) * t725, t836 * t684 + t861, t836 * t641 + t833 * t756, t836 * t679 + t833 * t733, t836 * t683 - t861, t836 * t678 + t731 * t833, t836 * t696 + t820, t836 * t600 - t833 * t612 - pkin(4) * (t833 * t652 - t836 * t729), t836 * t608 - t833 * t616 - pkin(4) * (t833 * t680 - t836 * t732), t836 * t574 - t833 * t617 - pkin(4) * (t833 * t642 - t836 * t728), t836 * t570 - t833 * t580 - pkin(4) * (t833 * t594 + t836 * t727), t836 * t586 + t862, t836 * t566 + t833 * t701, t836 * t597 + t833 * t662, t836 * t585 - t862, t836 * t598 - t833 * t658, t836 * t610 + t833 * t825, t836 * t553 - t833 * t560 - pkin(4) * (t833 * t582 - t836 * t657), t836 * t556 - t833 * t561 - pkin(4) * (t833 * t592 - t836 * t905), t836 * t545 - t833 * t557 - pkin(4) * (t833 * t567 - t836 * t685), t836 * t543 - t833 * t546 - pkin(4) * (t833 * t550 + t836 * t667); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t804, 0, t805, 0, t786, t848, t852, pkin(4) * t852, t833 * t776 + t850, t833 * t761 - t836 * t807, t833 * t771 - t832 * t864, t833 * t775 - t850, t833 * t769 - t835 * t864, t833 * t796 - t863, t833 * t737 + t836 * t734 + pkin(4) * (t836 * t770 - t833 * t802), t833 * t738 + t836 * t735 + pkin(4) * (t836 * t772 + t833 * t799), t833 * t725 + pkin(4) * (t836 * t803 - t833 * t806), pkin(4) * (t836 * t726 - t833 * t793) - (-t836 * pkin(1) - t833 * pkin(5)) * t725, t833 * t684 - t859, t833 * t641 - t836 * t756, t833 * t679 - t836 * t733, t833 * t683 + t859, t833 * t678 - t731 * t836, t833 * t696 - t863, t833 * t600 + t836 * t612 + pkin(4) * (t836 * t652 + t833 * t729), t833 * t608 + t836 * t616 + pkin(4) * (t836 * t680 + t833 * t732), t833 * t574 + t836 * t617 + pkin(4) * (t836 * t642 + t833 * t728), t833 * t570 + t836 * t580 + pkin(4) * (t836 * t594 - t833 * t727), t833 * t586 - t860, t833 * t566 - t836 * t701, t833 * t597 - t836 * t662, t833 * t585 + t860, t833 * t598 + t836 * t658, t833 * t610 - t836 * t825, t833 * t553 + t836 * t560 + pkin(4) * (t836 * t582 + t833 * t657), t833 * t556 + t836 * t561 + pkin(4) * (t836 * t592 + t833 * t905), t833 * t545 + t836 * t557 + pkin(4) * (t836 * t567 + t833 * t685), t833 * t543 + t836 * t546 + pkin(4) * (t836 * t550 - t833 * t667); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t810, t811, 0, 0, t764, t760, t767, t763, t765, 0, t716, t715, t705, t706, t682, t639, t676, t681, t675, t695, t599, t601, t573, t568, t584, t564, t595, t583, t596, t609, t551, t555, t544, t542; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t838, 0, 0, -g(3), -t810, 0, t776, t761, t771, t775, t769, t796, t737, t738, t725, pkin(5) * t725, t684, t641, t679, t683, t678, t696, t600, t608, t574, t570, t586, t566, t597, t585, t598, t610, t553, t556, t545, t543; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t838, 0, qJDD(1), 0, g(3), 0, -t811, 0, t817, -t807, -t866, -t817, -t821, -qJDD(2), t734, t735, 0, pkin(1) * t725, -t757, -t756, -t733, t757, -t731, -qJDD(2), t612, t616, t617, t580, -t702, -t701, -t662, t702, t658, -t825, t560, t561, t557, t546; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t810, t811, 0, 0, t764, t760, t767, t763, t765, 0, t716, t715, t705, t706, t682, t639, t676, t681, t675, t695, t599, t601, t573, t568, t584, t564, t595, t583, t596, t609, t551, t555, t544, t542; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t800, t802, t808, -t819, t815, t819, 0, -t793, t773, 0, t721, t691, t711, t719, t710, t744, t674, t686, t611, -qJ(3) * t631, t621, t589, t635, t620, t636, t645, t572, t576, t554, t548; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t858, t799, t813, t801, t809, -t858, t793, 0, t774, 0, t720, t689, t708, t718, t707, t743, t646, t650, t606, t615, t619, t587, t633, t618, t634, t644, t563, t571, t552, t547; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t817, t807, t866, t817, t821, qJDD(2), -t773, -t774, 0, 0, t757, t756, t733, -t757, t731, qJDD(2), t910, t849 + 0.2e1 * t870, t901, t902, t702, t701, t662, -t702, -t658, t825, t840, t839, t856, t857; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t759, -t729, t903, t785, t777, -t785, 0, -t727, -t846, 0, t656, t626, t672, t654, t673, t694, t622, t630, t569, -pkin(6) * t578; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t873, t732, t778, -t853, t753, -t873, t727, 0, t669, 0, t655, t624, t670, t653, t671, t693, t602, t607, t562, t575; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t757, t756, t733, -t757, t731, qJDD(2), t846, -t669, 0, 0, t702, t701, t662, -t702, -t658, t825, t847, t841, t623, t577; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t688, -t657, t904, t742, t739, -t742, 0, -t667, t604, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t899, t905, t740, t687, t699, -t899, t667, 0, t605, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t702, t701, t662, -t702, -t658, t825, -t604, -t605, 0, 0;];
m_new_reg = t1;
