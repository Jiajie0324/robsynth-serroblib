% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S4RRPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4,theta3]';
% 
% Output:
% tauB_reg [6x(5*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:05
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S4RRPR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRPR6_invdynB_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRPR6_invdynB_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRPR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRPR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RRPR6_invdynB_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:04:59
% EndTime: 2019-12-31 17:05:04
% DurationCPUTime: 5.04s
% Computational Cost: add. (21426->438), mult. (50601->666), div. (0->0), fcn. (34572->8), ass. (0->310)
t475 = sin(pkin(7));
t476 = cos(pkin(7));
t481 = cos(qJ(2));
t478 = sin(qJ(2));
t511 = qJD(1) * t478;
t435 = -t476 * t481 * qJD(1) + t475 * t511;
t437 = (t475 * t481 + t476 * t478) * qJD(1);
t406 = t437 * t435;
t535 = qJDD(2) - t406;
t541 = t475 * t535;
t540 = t476 * t535;
t477 = sin(qJ(4));
t480 = cos(qJ(4));
t396 = t480 * t435 + t477 * t437;
t398 = -t477 * t435 + t480 * t437;
t349 = t398 * t396;
t500 = qJDD(2) + qJDD(4);
t537 = -t349 + t500;
t539 = t477 * t537;
t538 = t480 * t537;
t472 = qJD(2) + qJD(4);
t387 = t472 * t396;
t505 = qJD(1) * qJD(2);
t494 = t481 * t505;
t504 = t478 * qJDD(1);
t446 = t494 + t504;
t466 = t481 * qJDD(1);
t495 = t478 * t505;
t447 = t466 - t495;
t408 = t476 * t446 + t475 * t447;
t492 = t475 * t446 - t476 * t447;
t485 = t396 * qJD(4) - t480 * t408 + t477 * t492;
t536 = -t387 - t485;
t493 = t477 * t408 + t480 * t492;
t311 = (qJD(4) - t472) * t398 + t493;
t394 = t396 ^ 2;
t395 = t398 ^ 2;
t433 = t435 ^ 2;
t434 = t437 ^ 2;
t470 = t472 ^ 2;
t534 = t472 * t477;
t533 = t472 * t480;
t473 = t478 ^ 2;
t484 = qJD(1) ^ 2;
t532 = t473 * t484;
t474 = t481 ^ 2;
t468 = t474 * t484;
t518 = t478 * t484;
t479 = sin(qJ(1));
t482 = cos(qJ(1));
t457 = t482 * g(1) + t479 * g(2);
t440 = -t484 * pkin(1) + qJDD(1) * pkin(5) - t457;
t521 = t478 * t440;
t367 = qJDD(2) * pkin(2) - t446 * qJ(3) - t521 + (pkin(2) * t518 + qJ(3) * t505 - g(3)) * t481;
t422 = -t478 * g(3) + t481 * t440;
t486 = qJD(2) * pkin(2) - qJ(3) * t511;
t368 = -pkin(2) * t468 + t447 * qJ(3) - qJD(2) * t486 + t422;
t320 = 0.2e1 * qJD(3) * t437 - t476 * t367 + t475 * t368;
t510 = qJD(2) * t435;
t378 = -t408 - t510;
t288 = pkin(3) * t535 + t378 * pkin(6) - t320;
t321 = -0.2e1 * qJD(3) * t435 + t475 * t367 + t476 * t368;
t488 = qJD(2) * pkin(3) - t437 * pkin(6);
t295 = -t433 * pkin(3) - pkin(6) * t492 - qJD(2) * t488 + t321;
t253 = -t480 * t288 + t477 * t295;
t254 = t477 * t288 + t480 * t295;
t227 = -t480 * t253 + t477 * t254;
t531 = t475 * t227;
t456 = t479 * g(1) - t482 * g(2);
t487 = qJDD(1) * pkin(1) + t456;
t372 = t447 * pkin(2) - qJDD(3) - t486 * t511 + (qJ(3) * t474 + pkin(5)) * t484 + t487;
t530 = t475 * t372;
t402 = qJDD(2) + t406;
t529 = t475 * t402;
t528 = t476 * t227;
t527 = t476 * t372;
t526 = t476 * t402;
t319 = -pkin(3) * t492 + t433 * pkin(6) - t437 * t488 + t372;
t525 = t477 * t319;
t346 = t349 + t500;
t524 = t477 * t346;
t278 = -t476 * t320 + t475 * t321;
t523 = t478 * t278;
t439 = t484 * pkin(5) + t487;
t522 = t478 * t439;
t463 = t481 * t518;
t454 = qJDD(2) + t463;
t520 = t478 * t454;
t455 = qJDD(2) - t463;
t519 = t478 * t455;
t517 = t480 * t319;
t516 = t480 * t346;
t515 = t481 * t278;
t514 = t481 * t439;
t513 = t481 * t455;
t512 = t473 + t474;
t509 = qJD(2) * t437;
t508 = qJD(2) * t475;
t507 = qJD(2) * t476;
t503 = t479 * qJDD(1);
t502 = t482 * qJDD(1);
t501 = t482 * qJDD(2);
t499 = t479 * t349;
t498 = t479 * t406;
t497 = t482 * t349;
t496 = t482 * t406;
t228 = t477 * t253 + t480 * t254;
t279 = t475 * t320 + t476 * t321;
t421 = t481 * g(3) + t521;
t371 = t478 * t421 + t481 * t422;
t414 = -t479 * t456 - t482 * t457;
t491 = t479 * t463;
t490 = t482 * t463;
t451 = -t479 * t484 + t502;
t489 = -pkin(4) * t451 - t479 * g(3);
t370 = t481 * t421 - t478 * t422;
t413 = t482 * t456 - t479 * t457;
t376 = -t492 + t509;
t483 = qJD(2) ^ 2;
t465 = t479 * qJDD(2);
t462 = -t468 - t483;
t461 = t468 - t483;
t460 = -t483 - t532;
t459 = t483 - t532;
t453 = t468 - t532;
t452 = t468 + t532;
t450 = t482 * t484 + t503;
t449 = t512 * qJDD(1);
t448 = t466 - 0.2e1 * t495;
t445 = 0.2e1 * t494 + t504;
t443 = t481 * t454;
t442 = t512 * t505;
t432 = -pkin(4) * t450 + t482 * g(3);
t427 = -t434 - t483;
t426 = -t434 + t483;
t425 = t433 - t483;
t424 = t481 * t446 - t473 * t505;
t423 = -t478 * t447 - t474 * t505;
t420 = -t478 * t460 - t513;
t419 = -t478 * t459 + t443;
t418 = t481 * t462 - t520;
t417 = t481 * t461 - t519;
t416 = t481 * t460 - t519;
t415 = t478 * t462 + t443;
t411 = t482 * t449 - t479 * t452;
t410 = t479 * t449 + t482 * t452;
t409 = -t478 * t445 + t481 * t448;
t405 = -t434 + t433;
t400 = -t483 - t433;
t393 = (-t435 * t476 + t437 * t475) * qJD(2);
t392 = (-t435 * t475 - t437 * t476) * qJD(2);
t391 = t482 * t420 + t479 * t445;
t390 = t482 * t418 - t479 * t448;
t389 = t479 * t420 - t482 * t445;
t388 = t479 * t418 + t482 * t448;
t385 = -t395 + t470;
t384 = t394 - t470;
t383 = -pkin(5) * t416 - t514;
t382 = -pkin(5) * t415 - t522;
t381 = -t395 - t470;
t380 = -pkin(1) * t416 + t422;
t379 = -pkin(1) * t415 + t421;
t377 = t408 - t510;
t374 = t492 + t509;
t373 = -t433 - t434;
t366 = t476 * t408 - t437 * t508;
t365 = t475 * t408 + t437 * t507;
t364 = t435 * t507 + t475 * t492;
t363 = t435 * t508 - t476 * t492;
t359 = -t475 * t427 - t526;
t358 = -t475 * t426 + t540;
t357 = t476 * t425 - t529;
t356 = t476 * t427 - t529;
t355 = t476 * t426 + t541;
t354 = t475 * t425 + t526;
t353 = t482 * t371 - t479 * t439;
t352 = t479 * t371 + t482 * t439;
t351 = t476 * t400 - t541;
t350 = t475 * t400 + t540;
t348 = -t395 + t394;
t344 = -t470 - t394;
t343 = -t478 * t392 + t481 * t393;
t342 = (-t396 * t480 + t398 * t477) * t472;
t341 = (-t396 * t477 - t398 * t480) * t472;
t340 = t476 * t376 - t475 * t378;
t339 = -t476 * t374 - t475 * t377;
t338 = t475 * t376 + t476 * t378;
t337 = -t475 * t374 + t476 * t377;
t335 = -t398 * qJD(4) - t493;
t334 = -qJ(3) * t356 - t527;
t333 = -t394 - t395;
t332 = -t478 * t365 + t481 * t366;
t331 = -t478 * t363 + t481 * t364;
t330 = -t478 * t356 + t481 * t359;
t329 = -t478 * t355 + t481 * t358;
t328 = -t478 * t354 + t481 * t357;
t327 = t481 * t356 + t478 * t359;
t326 = -qJ(3) * t350 - t530;
t325 = t480 * t384 - t524;
t324 = -t477 * t385 + t538;
t323 = t477 * t384 + t516;
t322 = t480 * t385 + t539;
t318 = -t477 * t381 - t516;
t317 = t480 * t381 - t524;
t315 = -t387 + t485;
t310 = (qJD(4) + t472) * t398 + t493;
t309 = -t398 * t534 - t480 * t485;
t308 = t398 * t533 - t477 * t485;
t307 = -t477 * t335 + t396 * t533;
t306 = t480 * t335 + t396 * t534;
t305 = -t478 * t350 + t481 * t351;
t304 = t481 * t350 + t478 * t351;
t303 = -pkin(2) * t377 + qJ(3) * t359 - t530;
t302 = t480 * t344 - t539;
t301 = t477 * t344 + t538;
t300 = -pkin(2) * t374 + qJ(3) * t351 + t527;
t299 = t482 * t330 + t479 * t377;
t298 = t479 * t330 - t482 * t377;
t297 = -t475 * t341 + t476 * t342;
t296 = t476 * t341 + t475 * t342;
t293 = t482 * t305 + t479 * t374;
t292 = -t478 * t338 + t481 * t340;
t291 = -t478 * t337 + t481 * t339;
t290 = t479 * t305 - t482 * t374;
t289 = t481 * t338 + t478 * t340;
t285 = t482 * t292 + t479 * t373;
t284 = t479 * t292 - t482 * t373;
t283 = -t475 * t323 + t476 * t325;
t282 = -t475 * t322 + t476 * t324;
t281 = t476 * t323 + t475 * t325;
t280 = t476 * t322 + t475 * t324;
t277 = -pkin(6) * t317 - t517;
t276 = -t475 * t317 + t476 * t318;
t275 = t476 * t317 + t475 * t318;
t274 = -t311 * t480 - t477 * t315;
t273 = -t480 * t310 - t477 * t536;
t272 = -t311 * t477 + t480 * t315;
t271 = -t477 * t310 + t480 * t536;
t270 = -pkin(6) * t301 - t525;
t269 = -t475 * t308 + t476 * t309;
t268 = -t475 * t306 + t476 * t307;
t267 = t476 * t308 + t475 * t309;
t266 = t476 * t306 + t475 * t307;
t265 = -pkin(1) * t289 - pkin(2) * t338;
t264 = -pkin(1) * t327 - pkin(2) * t356 + t321;
t263 = pkin(2) * t372 + qJ(3) * t279;
t262 = -t475 * t301 + t476 * t302;
t261 = t476 * t301 + t475 * t302;
t260 = -pkin(1) * t304 - pkin(2) * t350 + t320;
t259 = -qJ(3) * t338 - t278;
t258 = -t478 * t296 + t481 * t297;
t257 = -pkin(5) * t327 - t478 * t303 + t481 * t334;
t256 = -pkin(3) * t536 + pkin(6) * t318 - t525;
t255 = -pkin(2) * t373 + qJ(3) * t340 + t279;
t251 = -pkin(3) * t310 + pkin(6) * t302 + t517;
t250 = -pkin(5) * t304 - t478 * t300 + t481 * t326;
t249 = -t478 * t281 + t481 * t283;
t248 = -t478 * t280 + t481 * t282;
t247 = t481 * t279 - t523;
t246 = t478 * t279 + t515;
t245 = -t478 * t275 + t481 * t276;
t244 = t481 * t275 + t478 * t276;
t243 = t482 * t247 - t479 * t372;
t242 = t479 * t247 + t482 * t372;
t241 = -t475 * t272 + t476 * t274;
t240 = -t475 * t271 + t476 * t273;
t239 = t476 * t272 + t475 * t274;
t238 = t476 * t271 + t475 * t273;
t237 = -t478 * t267 + t481 * t269;
t236 = -t478 * t266 + t481 * t268;
t235 = -t478 * t261 + t481 * t262;
t234 = t481 * t261 + t478 * t262;
t233 = t482 * t245 + t479 * t536;
t232 = t479 * t245 - t482 * t536;
t231 = -pkin(1) * t246 - pkin(2) * t278;
t230 = t482 * t235 + t479 * t310;
t229 = t479 * t235 - t482 * t310;
t226 = -qJ(3) * t275 - t475 * t256 + t476 * t277;
t225 = pkin(3) * t319 + pkin(6) * t228;
t224 = -pkin(5) * t289 - t478 * t255 + t481 * t259;
t223 = -qJ(3) * t261 - t475 * t251 + t476 * t270;
t222 = -pkin(2) * t536 + qJ(3) * t276 + t476 * t256 + t475 * t277;
t221 = -pkin(5) * t246 - qJ(3) * t515 - t478 * t263;
t220 = -pkin(6) * t272 - t227;
t219 = -t478 * t239 + t481 * t241;
t218 = -t478 * t238 + t481 * t240;
t217 = t481 * t239 + t478 * t241;
t216 = -pkin(2) * t310 + qJ(3) * t262 + t476 * t251 + t475 * t270;
t215 = -pkin(3) * t333 + pkin(6) * t274 + t228;
t214 = t482 * t219 + t479 * t333;
t213 = t479 * t219 - t482 * t333;
t212 = -pkin(1) * t244 - pkin(2) * t275 - pkin(3) * t317 + t254;
t211 = -pkin(1) * t234 - pkin(2) * t261 - pkin(3) * t301 + t253;
t210 = t476 * t228 - t531;
t209 = t475 * t228 + t528;
t208 = -pkin(1) * t217 - pkin(2) * t239 - pkin(3) * t272;
t207 = -pkin(5) * t244 - t478 * t222 + t481 * t226;
t206 = -qJ(3) * t239 - t475 * t215 + t476 * t220;
t205 = -pkin(5) * t234 - t478 * t216 + t481 * t223;
t204 = -pkin(2) * t333 + qJ(3) * t241 + t476 * t215 + t475 * t220;
t203 = -t478 * t209 + t481 * t210;
t202 = t481 * t209 + t478 * t210;
t201 = -pkin(6) * t528 - qJ(3) * t209 - t475 * t225;
t200 = t482 * t203 - t479 * t319;
t199 = t479 * t203 + t482 * t319;
t198 = pkin(2) * t319 - pkin(6) * t531 + qJ(3) * t210 + t476 * t225;
t197 = -pkin(1) * t202 - pkin(2) * t209 - pkin(3) * t227;
t196 = -pkin(5) * t217 - t478 * t204 + t481 * t206;
t195 = -pkin(5) * t202 - t478 * t198 + t481 * t201;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t450, -t451, 0, t414, 0, 0, 0, 0, 0, 0, t390, t391, t411, t353, 0, 0, 0, 0, 0, 0, t293, t299, t285, t243, 0, 0, 0, 0, 0, 0, t230, t233, t214, t200; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t451, -t450, 0, t413, 0, 0, 0, 0, 0, 0, t388, t389, t410, t352, 0, 0, 0, 0, 0, 0, t290, t298, t284, t242, 0, 0, 0, 0, 0, 0, t229, t232, t213, t199; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t415, t416, 0, -t370, 0, 0, 0, 0, 0, 0, t304, t327, t289, t246, 0, 0, 0, 0, 0, 0, t234, t244, t217, t202; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t451, 0, -t450, 0, t489, -t432, -t413, -pkin(4) * t413, t482 * t424 - t491, t482 * t409 - t479 * t453, t482 * t419 + t478 * t503, t482 * t423 + t491, t482 * t417 + t466 * t479, t482 * t442 + t465, -pkin(4) * t388 - t479 * t379 + t482 * t382, -pkin(4) * t389 - t479 * t380 + t482 * t383, -pkin(4) * t410 + t482 * t370, -pkin(4) * t352 - (pkin(1) * t479 - pkin(5) * t482) * t370, t482 * t332 + t498, t482 * t291 - t479 * t405, t482 * t329 - t479 * t378, t482 * t331 - t498, t482 * t328 + t376 * t479, t482 * t343 + t465, -pkin(4) * t290 + t482 * t250 - t479 * t260, -pkin(4) * t298 + t482 * t257 - t479 * t264, -pkin(4) * t284 + t482 * t224 - t479 * t265, -pkin(4) * t242 + t482 * t221 - t479 * t231, t482 * t237 + t499, t482 * t218 - t479 * t348, t482 * t248 - t479 * t315, t482 * t236 - t499, t482 * t249 - t479 * t311, t482 * t258 + t479 * t500, -pkin(4) * t229 + t482 * t205 - t479 * t211, -pkin(4) * t232 + t482 * t207 - t479 * t212, -pkin(4) * t213 + t482 * t196 - t479 * t208, -pkin(4) * t199 + t482 * t195 - t479 * t197; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t450, 0, t451, 0, t432, t489, t414, pkin(4) * t414, t479 * t424 + t490, t479 * t409 + t482 * t453, t479 * t419 - t478 * t502, t479 * t423 - t490, t479 * t417 - t481 * t502, t479 * t442 - t501, pkin(4) * t390 + t482 * t379 + t479 * t382, pkin(4) * t391 + t482 * t380 + t479 * t383, pkin(4) * t411 + t479 * t370, pkin(4) * t353 - (-pkin(1) * t482 - pkin(5) * t479) * t370, t479 * t332 - t496, t479 * t291 + t482 * t405, t479 * t329 + t482 * t378, t479 * t331 + t496, t479 * t328 - t376 * t482, t479 * t343 - t501, pkin(4) * t293 + t479 * t250 + t482 * t260, pkin(4) * t299 + t479 * t257 + t482 * t264, pkin(4) * t285 + t479 * t224 + t482 * t265, pkin(4) * t243 + t479 * t221 + t482 * t231, t479 * t237 - t497, t479 * t218 + t482 * t348, t479 * t248 + t482 * t315, t479 * t236 + t497, t479 * t249 + t482 * t311, t479 * t258 - t482 * t500, pkin(4) * t230 + t479 * t205 + t482 * t211, pkin(4) * t233 + t479 * t207 + t482 * t212, pkin(4) * t214 + t479 * t196 + t482 * t208, pkin(4) * t200 + t479 * t195 + t482 * t197; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t456, t457, 0, 0, (t446 + t494) * t478, t481 * t445 + t478 * t448, t481 * t459 + t520, (t447 - t495) * t481, t478 * t461 + t513, 0, pkin(1) * t448 + pkin(5) * t418 + t514, -pkin(1) * t445 + pkin(5) * t420 - t522, pkin(1) * t452 + pkin(5) * t449 + t371, pkin(1) * t439 + pkin(5) * t371, t481 * t365 + t478 * t366, t481 * t337 + t478 * t339, t481 * t355 + t478 * t358, t481 * t363 + t478 * t364, t481 * t354 + t478 * t357, t481 * t392 + t478 * t393, -pkin(1) * t374 + pkin(5) * t305 + t481 * t300 + t478 * t326, -pkin(1) * t377 + pkin(5) * t330 + t481 * t303 + t478 * t334, -pkin(1) * t373 + pkin(5) * t292 + t481 * t255 + t478 * t259, pkin(1) * t372 + pkin(5) * t247 - qJ(3) * t523 + t481 * t263, t481 * t267 + t478 * t269, t481 * t238 + t478 * t240, t481 * t280 + t478 * t282, t481 * t266 + t478 * t268, t481 * t281 + t478 * t283, t481 * t296 + t478 * t297, -pkin(1) * t310 + pkin(5) * t235 + t481 * t216 + t478 * t223, -pkin(1) * t536 + pkin(5) * t245 + t481 * t222 + t478 * t226, -pkin(1) * t333 + pkin(5) * t219 + t481 * t204 + t478 * t206, pkin(1) * t319 + pkin(5) * t203 + t481 * t198 + t478 * t201;];
tauB_reg = t1;
