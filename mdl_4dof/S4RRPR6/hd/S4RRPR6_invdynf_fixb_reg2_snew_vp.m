% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S4RRPR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4,theta3]';
%
% Output:
% f_new_reg [(3*5)x(5*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:05
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S4RRPR6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRPR6_invdynf_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRPR6_invdynf_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRPR6_invdynf_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRPR6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RRPR6_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:05:11
% EndTime: 2019-12-31 17:05:13
% DurationCPUTime: 1.45s
% Computational Cost: add. (6721->175), mult. (15928->244), div. (0->0), fcn. (10907->8), ass. (0->141)
t1029 = qJD(2) + qJD(4);
t1067 = qJD(4) + t1029;
t1032 = sin(pkin(7));
t1033 = cos(pkin(7));
t1038 = cos(qJ(2));
t1059 = qJD(1) * t1038;
t1035 = sin(qJ(2));
t1060 = qJD(1) * t1035;
t1003 = t1032 * t1060 - t1033 * t1059;
t1005 = (t1032 * t1038 + t1033 * t1035) * qJD(1);
t1034 = sin(qJ(4));
t1037 = cos(qJ(4));
t981 = t1037 * t1003 + t1005 * t1034;
t1066 = t981 ^ 2;
t983 = -t1003 * t1034 + t1005 * t1037;
t1065 = t983 ^ 2;
t1002 = t1003 ^ 2;
t1064 = t1005 ^ 2;
t1063 = t1029 ^ 2;
t1062 = -2 * qJD(3);
t1061 = t983 * t981;
t1058 = qJD(2) * t1003;
t1057 = qJD(2) * t1005;
t1056 = t1005 * t1003;
t1031 = t1038 ^ 2;
t1041 = qJD(1) ^ 2;
t1055 = t1031 * t1041;
t1036 = sin(qJ(1));
t1039 = cos(qJ(1));
t1021 = -g(1) * t1039 - g(2) * t1036;
t1008 = -pkin(1) * t1041 + qJDD(1) * pkin(5) + t1021;
t1054 = t1035 * t1008;
t1053 = t1035 * t1041;
t1052 = qJD(4) - t1029;
t1030 = t1035 ^ 2;
t1051 = t1030 + t1031;
t1050 = t1035 * qJDD(1);
t1049 = -qJDD(2) - qJDD(4);
t1047 = qJD(2) * t1059;
t1011 = t1047 + t1050;
t969 = qJDD(2) * pkin(2) - t1011 * qJ(3) - t1054 + (qJ(3) * qJD(1) * qJD(2) + pkin(2) * t1053 - g(3)) * t1038;
t1027 = t1038 * qJDD(1);
t1048 = qJD(2) * t1060;
t1012 = t1027 - t1048;
t1042 = qJD(2) * pkin(2) - qJ(3) * t1060;
t996 = -t1035 * g(3) + t1038 * t1008;
t970 = -pkin(2) * t1055 + t1012 * qJ(3) - qJD(2) * t1042 + t996;
t953 = t1003 * t1062 + t1032 * t969 + t1033 * t970;
t1020 = t1036 * g(1) - t1039 * g(2);
t989 = -t1011 * t1032 + t1033 * t1012;
t990 = t1011 * t1033 + t1012 * t1032;
t1046 = -t1034 * t990 + t1037 * t989;
t978 = -t990 - t1058;
t986 = qJDD(2) - t1056;
t1045 = qJD(2) * pkin(3) - pkin(6) * t1005;
t952 = t1005 * t1062 - t1032 * t970 + t1033 * t969;
t1044 = -t1034 * t989 - t1037 * t990;
t1043 = qJDD(1) * pkin(1) + t1020;
t973 = t1012 * pkin(2) - qJDD(3) - t1042 * t1060 + (qJ(3) * t1031 + pkin(5)) * t1041 + t1043;
t1040 = qJD(2) ^ 2;
t1025 = t1038 * t1053;
t1024 = -t1040 - t1055;
t1023 = -t1030 * t1041 - t1040;
t1019 = -qJDD(2) + t1025;
t1018 = qJDD(2) + t1025;
t1017 = t1051 * t1041;
t1016 = -qJDD(1) * t1036 - t1039 * t1041;
t1015 = qJDD(1) * t1039 - t1036 * t1041;
t1014 = t1051 * qJDD(1);
t1013 = t1027 - 0.2e1 * t1048;
t1010 = 0.2e1 * t1047 + t1050;
t1007 = pkin(5) * t1041 + t1043;
t997 = -t1040 - t1064;
t995 = -t1038 * g(3) - t1054;
t994 = t1019 * t1038 - t1023 * t1035;
t993 = -t1018 * t1035 + t1024 * t1038;
t992 = t1019 * t1035 + t1023 * t1038;
t991 = t1018 * t1038 + t1024 * t1035;
t987 = -qJDD(2) - t1056;
t985 = -t1040 - t1002;
t979 = -t1063 - t1065;
t977 = t990 - t1058;
t976 = t989 + t1057;
t975 = -t989 + t1057;
t974 = -t1002 - t1064;
t972 = -t1035 * t995 + t1038 * t996;
t971 = t1035 * t996 + t1038 * t995;
t965 = -t1032 * t997 + t1033 * t987;
t964 = t1032 * t987 + t1033 * t997;
t963 = -t1032 * t986 + t1033 * t985;
t962 = t1032 * t985 + t1033 * t986;
t961 = t1049 - t1061;
t960 = -t1049 - t1061;
t959 = -t1063 - t1066;
t958 = -t1032 * t978 + t1033 * t976;
t957 = t1032 * t976 + t1033 * t978;
t956 = -t1065 - t1066;
t955 = -t1035 * t964 + t1038 * t965;
t954 = t1035 * t965 + t1038 * t964;
t951 = t989 * pkin(3) + t1002 * pkin(6) - t1005 * t1045 + t973;
t950 = -t1034 * t979 + t1037 * t961;
t949 = t1034 * t961 + t1037 * t979;
t948 = t1052 * t981 + t1044;
t947 = -t1067 * t981 - t1044;
t946 = -t1052 * t983 + t1046;
t945 = t1067 * t983 - t1046;
t944 = -t1035 * t962 + t1038 * t963;
t943 = t1035 * t963 + t1038 * t962;
t942 = -t1034 * t960 + t1037 * t959;
t941 = t1034 * t959 + t1037 * t960;
t940 = -t1002 * pkin(3) + t989 * pkin(6) - qJD(2) * t1045 + t953;
t939 = -t1035 * t957 + t1038 * t958;
t938 = t1035 * t958 + t1038 * t957;
t937 = pkin(3) * t986 + pkin(6) * t978 + t952;
t936 = -t1032 * t952 + t1033 * t953;
t935 = t1032 * t953 + t1033 * t952;
t934 = -t1032 * t949 + t1033 * t950;
t933 = t1032 * t950 + t1033 * t949;
t932 = -t1034 * t948 + t1037 * t946;
t931 = t1034 * t946 + t1037 * t948;
t930 = -t1032 * t941 + t1033 * t942;
t929 = t1032 * t942 + t1033 * t941;
t928 = t1034 * t937 + t1037 * t940;
t927 = -t1034 * t940 + t1037 * t937;
t926 = -t1035 * t935 + t1038 * t936;
t925 = t1035 * t936 + t1038 * t935;
t924 = -t1035 * t933 + t1038 * t934;
t923 = t1035 * t934 + t1038 * t933;
t922 = -t1032 * t931 + t1033 * t932;
t921 = t1032 * t932 + t1033 * t931;
t920 = -t1035 * t929 + t1038 * t930;
t919 = t1035 * t930 + t1038 * t929;
t918 = -t1034 * t927 + t1037 * t928;
t917 = t1034 * t928 + t1037 * t927;
t916 = -t1035 * t921 + t1038 * t922;
t915 = t1035 * t922 + t1038 * t921;
t914 = -t1032 * t917 + t1033 * t918;
t913 = t1032 * t918 + t1033 * t917;
t912 = -t1035 * t913 + t1038 * t914;
t911 = t1035 * t914 + t1038 * t913;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1016, -t1015, 0, -t1020 * t1036 + t1021 * t1039, 0, 0, 0, 0, 0, 0, -t1013 * t1036 + t1039 * t993, t1010 * t1036 + t1039 * t994, t1014 * t1039 - t1017 * t1036, -t1007 * t1036 + t1039 * t972, 0, 0, 0, 0, 0, 0, t1036 * t975 + t1039 * t944, t1036 * t977 + t1039 * t955, t1036 * t974 + t1039 * t939, -t1036 * t973 + t1039 * t926, 0, 0, 0, 0, 0, 0, t1036 * t945 + t1039 * t920, t1036 * t947 + t1039 * t924, t1036 * t956 + t1039 * t916, -t1036 * t951 + t1039 * t912; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1015, t1016, 0, t1020 * t1039 + t1021 * t1036, 0, 0, 0, 0, 0, 0, t1013 * t1039 + t1036 * t993, -t1010 * t1039 + t1036 * t994, t1014 * t1036 + t1017 * t1039, t1007 * t1039 + t1036 * t972, 0, 0, 0, 0, 0, 0, t1036 * t944 - t1039 * t975, t1036 * t955 - t1039 * t977, t1036 * t939 - t1039 * t974, t1036 * t926 + t1039 * t973, 0, 0, 0, 0, 0, 0, t1036 * t920 - t1039 * t945, t1036 * t924 - t1039 * t947, t1036 * t916 - t1039 * t956, t1036 * t912 + t1039 * t951; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t991, t992, 0, t971, 0, 0, 0, 0, 0, 0, t943, t954, t938, t925, 0, 0, 0, 0, 0, 0, t919, t923, t915, t911; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1041, -qJDD(1), 0, t1021, 0, 0, 0, 0, 0, 0, t993, t994, t1014, t972, 0, 0, 0, 0, 0, 0, t944, t955, t939, t926, 0, 0, 0, 0, 0, 0, t920, t924, t916, t912; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1041, 0, t1020, 0, 0, 0, 0, 0, 0, t1013, -t1010, t1017, t1007, 0, 0, 0, 0, 0, 0, -t975, -t977, -t974, t973, 0, 0, 0, 0, 0, 0, -t945, -t947, -t956, t951; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t991, t992, 0, t971, 0, 0, 0, 0, 0, 0, t943, t954, t938, t925, 0, 0, 0, 0, 0, 0, t919, t923, t915, t911; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1024, t1019, t1027, t996, 0, 0, 0, 0, 0, 0, t963, t965, t958, t936, 0, 0, 0, 0, 0, 0, t930, t934, t922, t914; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1018, t1023, -t1050, t995, 0, 0, 0, 0, 0, 0, t962, t964, t957, t935, 0, 0, 0, 0, 0, 0, t929, t933, t921, t913; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1013, t1010, -t1017, -t1007, 0, 0, 0, 0, 0, 0, t975, t977, t974, -t973, 0, 0, 0, 0, 0, 0, t945, t947, t956, -t951; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t985, t987, t976, t953, 0, 0, 0, 0, 0, 0, t942, t950, t932, t918; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t986, t997, t978, t952, 0, 0, 0, 0, 0, 0, t941, t949, t931, t917; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t975, t977, t974, -t973, 0, 0, 0, 0, 0, 0, t945, t947, t956, -t951; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t959, t961, t946, t928; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t960, t979, t948, t927; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t945, t947, t956, -t951;];
f_new_reg = t1;
