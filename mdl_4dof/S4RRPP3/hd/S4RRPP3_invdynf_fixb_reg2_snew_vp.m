% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S4RRPP3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,theta3]';
%
% Output:
% f_new_reg [(3*5)x(5*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:58
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S4RRPP3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRPP3_invdynf_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRPP3_invdynf_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRPP3_invdynf_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRPP3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4RRPP3_invdynf_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:58:07
% EndTime: 2019-12-31 16:58:09
% DurationCPUTime: 1.48s
% Computational Cost: add. (2557->155), mult. (6128->176), div. (0->0), fcn. (3945->6), ass. (0->104)
t1129 = sin(pkin(6));
t1130 = cos(pkin(6));
t1133 = cos(qJ(2));
t1156 = qJD(1) * t1133;
t1131 = sin(qJ(2));
t1157 = qJD(1) * t1131;
t1099 = t1129 * t1157 - t1130 * t1156;
t1101 = (t1129 * t1133 + t1130 * t1131) * qJD(1);
t1154 = t1101 * t1099;
t1079 = qJDD(2) + t1154;
t1098 = t1101 ^ 2;
t1135 = qJD(2) ^ 2;
t1163 = -t1098 - t1135;
t1051 = t1129 * t1079 - t1130 * t1163;
t1053 = t1130 * t1079 + t1129 * t1163;
t1045 = t1131 * t1051 - t1133 * t1053;
t1132 = sin(qJ(1));
t1134 = cos(qJ(1));
t1097 = qJD(2) * t1099;
t1144 = qJD(2) * t1156;
t1146 = t1131 * qJDD(1);
t1107 = t1144 + t1146;
t1123 = t1133 * qJDD(1);
t1145 = qJD(2) * t1157;
t1108 = t1123 - t1145;
t1141 = t1130 * t1107 + t1129 * t1108;
t1164 = -t1097 + t1141;
t1179 = t1132 * t1045 - t1134 * t1164;
t1178 = t1134 * t1045 + t1132 * t1164;
t1142 = -t1129 * t1107 + t1130 * t1108;
t1155 = qJD(2) * t1101;
t1162 = t1142 - t1155;
t1080 = qJDD(2) - t1154;
t1082 = t1099 ^ 2;
t1165 = -t1082 - t1135;
t1168 = -t1129 * t1080 + t1130 * t1165;
t1169 = t1130 * t1080 + t1129 * t1165;
t1173 = -t1131 * t1169 + t1133 * t1168;
t1177 = t1132 * t1173 + t1134 * t1162;
t1176 = -t1132 * t1162 + t1134 * t1173;
t1037 = t1133 * t1051 + t1131 * t1053;
t1068 = t1098 + t1082;
t1074 = t1097 + t1141;
t1138 = t1142 + t1155;
t1160 = t1129 * t1074 + t1130 * t1138;
t1161 = -t1130 * t1074 + t1129 * t1138;
t1167 = -t1131 * t1161 + t1133 * t1160;
t1175 = t1134 * t1068 + t1132 * t1167;
t1174 = -t1132 * t1068 + t1134 * t1167;
t1172 = t1131 * t1168 + t1133 * t1169;
t1166 = t1131 * t1160 + t1133 * t1161;
t1159 = -2 * qJD(3);
t1158 = 2 * qJD(4);
t1127 = t1133 ^ 2;
t1136 = qJD(1) ^ 2;
t1153 = t1127 * t1136;
t1117 = -t1134 * g(1) - t1132 * g(2);
t1104 = -t1136 * pkin(1) + qJDD(1) * pkin(5) + t1117;
t1150 = t1131 * t1104;
t1149 = t1131 * t1136;
t1126 = t1131 ^ 2;
t1147 = t1126 + t1127;
t1088 = -t1131 * g(3) + t1133 * t1104;
t1139 = qJD(2) * pkin(2) - qJ(3) * t1157;
t1061 = -pkin(2) * t1153 + t1108 * qJ(3) - qJD(2) * t1139 + t1088;
t1137 = qJDD(2) * pkin(2) - t1107 * qJ(3) - t1150 + (qJD(2) * qJ(3) * qJD(1) + pkin(2) * t1149 - g(3)) * t1133;
t1041 = t1130 * t1061 + t1099 * t1159 + t1129 * t1137;
t1116 = t1132 * g(1) - t1134 * g(2);
t1143 = t1129 * t1061 - t1130 * t1137;
t1140 = qJDD(1) * pkin(1) + t1116;
t1066 = t1108 * pkin(2) - qJDD(3) - t1139 * t1157 + (t1127 * qJ(3) + pkin(5)) * t1136 + t1140;
t1121 = t1133 * t1149;
t1120 = -t1135 - t1153;
t1119 = -t1126 * t1136 - t1135;
t1115 = -qJDD(2) + t1121;
t1114 = qJDD(2) + t1121;
t1113 = t1147 * t1136;
t1112 = -t1132 * qJDD(1) - t1134 * t1136;
t1111 = t1134 * qJDD(1) - t1132 * t1136;
t1110 = t1147 * qJDD(1);
t1109 = t1123 - 0.2e1 * t1145;
t1106 = 0.2e1 * t1144 + t1146;
t1103 = t1136 * pkin(5) + t1140;
t1087 = -t1133 * g(3) - t1150;
t1086 = t1133 * t1115 - t1131 * t1119;
t1085 = -t1131 * t1114 + t1133 * t1120;
t1084 = t1131 * t1115 + t1133 * t1119;
t1083 = t1133 * t1114 + t1131 * t1120;
t1076 = t1099 * pkin(3) - t1101 * qJ(4);
t1063 = -t1131 * t1087 + t1133 * t1088;
t1062 = t1133 * t1087 + t1131 * t1088;
t1040 = t1101 * t1159 - t1143;
t1035 = t1162 * pkin(3) + qJ(4) * t1164 + t1101 * t1158 + t1066;
t1034 = qJDD(4) - t1135 * qJ(4) - qJDD(2) * pkin(3) + ((2 * qJD(3)) + t1076) * t1101 + t1143;
t1033 = -t1135 * pkin(3) + qJDD(2) * qJ(4) + qJD(2) * t1158 - t1099 * t1076 + t1041;
t1028 = -t1129 * t1040 + t1130 * t1041;
t1027 = t1130 * t1040 + t1129 * t1041;
t1026 = t1130 * t1033 + t1129 * t1034;
t1025 = t1129 * t1033 - t1130 * t1034;
t1024 = -t1131 * t1027 + t1133 * t1028;
t1023 = t1133 * t1027 + t1131 * t1028;
t1022 = -t1131 * t1025 + t1133 * t1026;
t1021 = t1133 * t1025 + t1131 * t1026;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1112, -t1111, 0, -t1132 * t1116 + t1134 * t1117, 0, 0, 0, 0, 0, 0, t1134 * t1085 - t1132 * t1109, t1134 * t1086 + t1132 * t1106, t1134 * t1110 - t1132 * t1113, t1134 * t1063 - t1132 * t1103, 0, 0, 0, 0, 0, 0, t1176, t1178, t1174, t1134 * t1024 - t1132 * t1066, 0, 0, 0, 0, 0, 0, t1176, t1174, -t1178, t1134 * t1022 - t1132 * t1035; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1111, t1112, 0, t1134 * t1116 + t1132 * t1117, 0, 0, 0, 0, 0, 0, t1132 * t1085 + t1134 * t1109, t1132 * t1086 - t1134 * t1106, t1132 * t1110 + t1134 * t1113, t1132 * t1063 + t1134 * t1103, 0, 0, 0, 0, 0, 0, t1177, t1179, t1175, t1132 * t1024 + t1134 * t1066, 0, 0, 0, 0, 0, 0, t1177, t1175, -t1179, t1132 * t1022 + t1134 * t1035; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1083, t1084, 0, t1062, 0, 0, 0, 0, 0, 0, t1172, -t1037, t1166, t1023, 0, 0, 0, 0, 0, 0, t1172, t1166, t1037, t1021; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1136, -qJDD(1), 0, t1117, 0, 0, 0, 0, 0, 0, t1085, t1086, t1110, t1063, 0, 0, 0, 0, 0, 0, t1173, t1045, t1167, t1024, 0, 0, 0, 0, 0, 0, t1173, t1167, -t1045, t1022; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1136, 0, t1116, 0, 0, 0, 0, 0, 0, t1109, -t1106, t1113, t1103, 0, 0, 0, 0, 0, 0, t1162, -t1164, t1068, t1066, 0, 0, 0, 0, 0, 0, t1162, t1068, t1164, t1035; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1083, t1084, 0, t1062, 0, 0, 0, 0, 0, 0, t1172, -t1037, t1166, t1023, 0, 0, 0, 0, 0, 0, t1172, t1166, t1037, t1021; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1120, t1115, t1123, t1088, 0, 0, 0, 0, 0, 0, t1168, -t1053, t1160, t1028, 0, 0, 0, 0, 0, 0, t1168, t1160, t1053, t1026; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1114, t1119, -t1146, t1087, 0, 0, 0, 0, 0, 0, t1169, -t1051, t1161, t1027, 0, 0, 0, 0, 0, 0, t1169, t1161, t1051, t1025; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1109, t1106, -t1113, -t1103, 0, 0, 0, 0, 0, 0, -t1162, t1164, -t1068, -t1066, 0, 0, 0, 0, 0, 0, -t1162, -t1068, -t1164, -t1035; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1165, -t1079, t1138, t1041, 0, 0, 0, 0, 0, 0, t1165, t1138, t1079, t1033; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1080, t1163, -t1074, t1040, 0, 0, 0, 0, 0, 0, t1080, -t1074, -t1163, -t1034; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1162, t1164, -t1068, -t1066, 0, 0, 0, 0, 0, 0, -t1162, -t1068, -t1164, -t1035; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1165, t1138, t1079, t1033; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1162, -t1068, -t1164, -t1035; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1080, t1074, t1163, t1034;];
f_new_reg = t1;
