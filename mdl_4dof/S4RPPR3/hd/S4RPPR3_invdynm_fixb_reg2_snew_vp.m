% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RPPR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d4,theta2,theta3]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:38
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RPPR3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RPPR3_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RPPR3_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RPPR3_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RPPR3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RPPR3_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:38:02
% EndTime: 2019-12-31 16:38:06
% DurationCPUTime: 4.12s
% Computational Cost: add. (12803->347), mult. (27973->493), div. (0->0), fcn. (17908->8), ass. (0->243)
t636 = sin(qJ(1));
t638 = cos(qJ(1));
t609 = g(1) * t638 + g(2) * t636;
t690 = qJD(1) ^ 2;
t598 = -pkin(1) * t690 - t609;
t632 = sin(pkin(6));
t634 = cos(pkin(6));
t608 = g(1) * t636 - g(2) * t638;
t646 = qJDD(1) * pkin(1) + t608;
t554 = t598 * t632 - t634 * t646;
t555 = t634 * t598 + t632 * t646;
t660 = t554 * t632 + t555 * t634;
t507 = t554 * t634 - t555 * t632;
t673 = t638 * t507;
t707 = -t636 * t660 + t673;
t678 = t636 * t507;
t706 = t638 * t660 + t678;
t635 = sin(qJ(4));
t631 = sin(pkin(7));
t633 = cos(pkin(7));
t637 = cos(qJ(4));
t585 = (t631 * t635 - t633 * t637) * qJD(1);
t648 = t631 * t637 + t633 * t635;
t587 = t648 * qJD(1);
t553 = t587 * t585;
t693 = qJDD(4) - t553;
t705 = t635 * t693;
t704 = t637 * t693;
t658 = -pkin(2) * t690 + qJDD(1) * qJ(3) + 0.2e1 * qJD(1) * qJD(3) + t555;
t703 = pkin(5) * qJDD(1) + t658;
t667 = t632 * qJDD(1);
t601 = t634 * t690 + t667;
t629 = g(3) - qJDD(2);
t573 = qJ(2) * t601 - t629 * t634;
t666 = t634 * qJDD(1);
t602 = -t632 * t690 + t666;
t652 = -qJ(2) * t602 - t629 * t632;
t694 = t601 * t638 + t602 * t636;
t702 = pkin(4) * t694 + t638 * t573 - t636 * t652;
t560 = -t601 * t636 + t602 * t638;
t701 = -pkin(4) * t560 + t636 * t573 + t638 * t652;
t627 = t631 ^ 2;
t641 = t633 ^ 2;
t692 = t690 * (t627 + t641);
t594 = t633 * t692;
t661 = t633 * t666;
t564 = -t594 * t632 + t661;
t623 = t633 * qJDD(1);
t566 = t594 * t634 + t623 * t632;
t700 = t564 * t638 - t566 * t636;
t699 = t564 * t636 + t566 * t638;
t615 = t633 * t629;
t527 = t631 * t658 + t615;
t684 = t631 * t629;
t528 = t633 * t658 - t684;
t489 = t527 * t631 + t528 * t633;
t625 = t641 * t690;
t670 = t627 * t690;
t604 = t625 + t670;
t581 = t585 ^ 2;
t582 = t587 ^ 2;
t669 = t633 * t690;
t509 = -t615 + (pkin(3) * t669 - t703) * t631;
t510 = -pkin(3) * t625 + t633 * t703 - t684;
t465 = -t509 * t637 + t510 * t635;
t466 = t509 * t635 + t510 * t637;
t428 = -t465 * t637 + t466 * t635;
t689 = pkin(3) * t428;
t621 = t631 * qJDD(1);
t583 = t621 * t635 - t623 * t637;
t584 = t648 * qJDD(1);
t499 = -t583 * t635 - t584 * t637;
t688 = pkin(3) * t499;
t685 = t631 * t428;
t539 = -qJDD(1) * pkin(2) - qJ(3) * t690 + qJDD(3) + t554;
t534 = t631 * t539;
t683 = t632 * t539;
t682 = t633 * t428;
t535 = t633 * t539;
t681 = t634 * t539;
t526 = -pkin(3) * t623 - pkin(5) * t604 + t539;
t680 = t635 * t526;
t546 = qJDD(4) + t553;
t679 = t635 * t546;
t675 = t637 * t526;
t674 = t637 * t546;
t672 = -pkin(2) * t539 + qJ(3) * t489;
t579 = t585 * qJD(4);
t671 = t587 * qJD(4);
t665 = t632 * t553;
t664 = t634 * t553;
t663 = pkin(2) * t623 - qJ(3) * t594 - t535;
t611 = t631 * t669;
t662 = t631 * t623;
t429 = t465 * t635 + t466 * t637;
t659 = -t608 * t636 - t609 * t638;
t501 = -t583 * t637 + t584 * t635;
t531 = -t581 - t582;
t418 = -pkin(3) * t531 + pkin(5) * t501 + t429;
t423 = -pkin(5) * t499 - t428;
t456 = -t499 * t631 + t501 * t633;
t657 = -pkin(2) * t531 + qJ(3) * t456 + t418 * t633 + t423 * t631;
t639 = qJD(4) ^ 2;
t544 = -t639 - t581;
t498 = t544 * t637 - t705;
t548 = t583 + 0.2e1 * t671;
t438 = -pkin(3) * t548 + pkin(5) * t498 - t675;
t497 = t544 * t635 + t704;
t451 = -t497 * t631 + t498 * t633;
t468 = -pkin(5) * t497 + t680;
t656 = -pkin(2) * t548 + qJ(3) * t451 + t438 * t633 + t468 * t631;
t576 = -t582 - t639;
t516 = -t576 * t635 - t674;
t550 = -0.2e1 * t579 + t584;
t453 = -pkin(3) * t550 + pkin(5) * t516 + t680;
t513 = t576 * t637 - t679;
t479 = -t513 * t631 + t516 * t633;
t485 = -pkin(5) * t513 + t675;
t655 = -pkin(2) * t550 + qJ(3) * t479 + t453 * t633 + t485 * t631;
t620 = t627 * qJDD(1);
t622 = t641 * qJDD(1);
t599 = t622 + t620;
t654 = pkin(2) * t604 + qJ(3) * t599 + t489;
t607 = qJDD(1) * t638 - t636 * t690;
t653 = -pkin(4) * t607 - g(3) * t636;
t488 = t527 * t633 - t528 * t631;
t568 = t601 * t633 * t631;
t569 = -t611 * t632 + t631 * t661;
t651 = t568 * t638 + t569 * t636;
t650 = t568 * t636 - t569 * t638;
t649 = t608 * t638 - t609 * t636;
t593 = t631 * t692;
t647 = -pkin(2) * t621 + qJ(3) * t593 + t534;
t645 = pkin(3) * t497 - t465;
t414 = t429 * t633 - t685;
t425 = -pkin(3) * t526 + pkin(5) * t429;
t644 = -pkin(2) * t526 - pkin(5) * t685 + qJ(3) * t414 + t425 * t633;
t643 = pkin(3) * t513 - t466;
t610 = 0.2e1 * t662;
t606 = qJDD(1) * t636 + t638 * t690;
t605 = -t625 + t670;
t600 = t622 - t620;
t580 = -pkin(4) * t606 + g(3) * t638;
t575 = -t582 + t639;
t574 = t581 - t639;
t565 = t593 * t634 + t631 * t667;
t562 = t593 * t632 - t631 * t666;
t559 = t600 * t634 + t605 * t632;
t558 = t599 * t634 - t604 * t632;
t557 = t600 * t632 - t605 * t634;
t556 = t599 * t632 + t604 * t634;
t552 = t582 - t581;
t551 = -t579 + t584;
t549 = -t583 - t671;
t537 = (-t585 * t637 + t587 * t635) * qJD(4);
t536 = (-t585 * t635 - t587 * t637) * qJD(4);
t533 = -pkin(1) * t601 - t555;
t532 = pkin(1) * t602 - t554;
t525 = t551 * t637 - t635 * t671;
t524 = t551 * t635 + t637 * t671;
t523 = -t549 * t635 + t579 * t637;
t522 = t549 * t637 + t579 * t635;
t518 = -t562 * t636 + t565 * t638;
t517 = t562 * t638 + t565 * t636;
t515 = -t575 * t635 + t704;
t514 = t574 * t637 - t679;
t512 = t575 * t637 + t705;
t511 = t574 * t635 + t674;
t504 = pkin(1) * t507;
t502 = -t548 * t637 - t550 * t635;
t500 = -t548 * t635 + t550 * t637;
t496 = pkin(1) * t629 + qJ(2) * t660;
t495 = -t536 * t631 + t537 * t633;
t494 = t536 * t633 + t537 * t631;
t493 = pkin(1) * t564 + t663;
t492 = pkin(1) * t562 + t647;
t491 = qJDD(4) * t632 + t495 * t634;
t490 = -qJDD(4) * t634 + t495 * t632;
t484 = -t524 * t631 + t525 * t633;
t483 = -t522 * t631 + t523 * t633;
t482 = t524 * t633 + t525 * t631;
t481 = t522 * t633 + t523 * t631;
t478 = -t512 * t631 + t515 * t633;
t477 = -t511 * t631 + t514 * t633;
t476 = t513 * t633 + t516 * t631;
t475 = t512 * t633 + t515 * t631;
t474 = t511 * t633 + t514 * t631;
t472 = -qJ(2) * t562 - t528 * t632 + t633 * t681;
t471 = -qJ(2) * t564 - t527 * t632 + t631 * t681;
t470 = qJ(2) * t565 + t528 * t634 + t535 * t632;
t469 = -qJ(2) * t566 + t527 * t634 + t631 * t683;
t463 = t478 * t634 + t584 * t632;
t462 = t477 * t634 - t583 * t632;
t461 = t478 * t632 - t584 * t634;
t460 = t477 * t632 + t583 * t634;
t459 = -qJ(2) * t556 + t488 * t634;
t458 = qJ(2) * t558 + t488 * t632;
t457 = -t500 * t631 + t502 * t633;
t455 = t500 * t633 + t502 * t631;
t454 = t499 * t633 + t501 * t631;
t450 = t497 * t633 + t498 * t631;
t447 = t484 * t634 + t665;
t446 = t483 * t634 - t665;
t445 = t484 * t632 - t664;
t444 = t483 * t632 + t664;
t443 = t489 * t634 + t683;
t442 = t489 * t632 - t681;
t441 = t479 * t634 + t550 * t632;
t440 = t479 * t632 - t550 * t634;
t439 = pkin(1) * t556 + t654;
t436 = t457 * t634 + t552 * t632;
t435 = t457 * t632 - t552 * t634;
t434 = t451 * t634 + t548 * t632;
t433 = t451 * t632 - t548 * t634;
t432 = t456 * t634 + t531 * t632;
t431 = t456 * t632 - t531 * t634;
t430 = -pkin(2) * t454 - t688;
t427 = pkin(1) * t442 + t672;
t426 = -pkin(2) * t476 - t643;
t421 = -pkin(2) * t450 - t645;
t420 = -qJ(2) * t442 - (pkin(2) * t632 - qJ(3) * t634) * t488;
t419 = -qJ(3) * t476 - t453 * t631 + t485 * t633;
t416 = -qJ(3) * t450 - t438 * t631 + t468 * t633;
t415 = qJ(2) * t443 - (-pkin(2) * t634 - qJ(3) * t632 - pkin(1)) * t488;
t413 = t429 * t631 + t682;
t411 = pkin(1) * t440 + t655;
t410 = t414 * t634 + t526 * t632;
t409 = t414 * t632 - t526 * t634;
t408 = pkin(1) * t433 + t656;
t407 = -pkin(2) * t413 - t689;
t406 = -qJ(2) * t440 + t419 * t634 - t426 * t632;
t405 = -qJ(3) * t454 - t418 * t631 + t423 * t633;
t404 = -pkin(1) * t476 + qJ(2) * t441 + t419 * t632 + t426 * t634;
t403 = -qJ(2) * t433 + t416 * t634 - t421 * t632;
t402 = pkin(1) * t431 + t657;
t401 = -pkin(1) * t450 + qJ(2) * t434 + t416 * t632 + t421 * t634;
t400 = -pkin(5) * t682 - qJ(3) * t413 - t425 * t631;
t399 = -qJ(2) * t431 + t405 * t634 - t430 * t632;
t398 = -pkin(1) * t454 + qJ(2) * t432 + t405 * t632 + t430 * t634;
t397 = pkin(1) * t409 + t644;
t396 = -qJ(2) * t409 + t400 * t634 - t407 * t632;
t395 = -pkin(1) * t413 + qJ(2) * t410 + t400 * t632 + t407 * t634;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t607, 0, -t606, 0, t653, -t580, -t649, -pkin(4) * t649, 0, 0, t560, 0, -t694, 0, t701, t702, t707, pkin(4) * t707 + qJ(2) * t673 - t636 * t496, -t650, -t557 * t636 + t559 * t638, t518, t650, t699, 0, -pkin(4) * t700 - t636 * t469 + t638 * t471, -pkin(4) * t517 - t470 * t636 + t472 * t638, t638 * t459 - t636 * t458 - pkin(4) * (t556 * t638 + t558 * t636), t638 * t420 - t636 * t415 - pkin(4) * (t442 * t638 + t443 * t636), -t445 * t636 + t447 * t638, -t435 * t636 + t436 * t638, -t461 * t636 + t463 * t638, -t444 * t636 + t446 * t638, -t460 * t636 + t462 * t638, -t490 * t636 + t491 * t638, t638 * t403 - t636 * t401 - pkin(4) * (t433 * t638 + t434 * t636), t638 * t406 - t636 * t404 - pkin(4) * (t440 * t638 + t441 * t636), t638 * t399 - t636 * t398 - pkin(4) * (t431 * t638 + t432 * t636), t638 * t396 - t636 * t395 - pkin(4) * (t409 * t638 + t410 * t636); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t606, 0, t607, 0, t580, t653, t659, pkin(4) * t659, 0, 0, t694, 0, t560, 0, -t702, t701, t706, pkin(4) * t706 + qJ(2) * t678 + t638 * t496, t651, t557 * t638 + t559 * t636, t517, -t651, -t700, 0, -pkin(4) * t699 + t638 * t469 + t636 * t471, pkin(4) * t518 + t470 * t638 + t472 * t636, t636 * t459 + t638 * t458 + pkin(4) * (-t556 * t636 + t558 * t638), t636 * t420 + t638 * t415 + pkin(4) * (-t442 * t636 + t443 * t638), t445 * t638 + t447 * t636, t435 * t638 + t436 * t636, t461 * t638 + t463 * t636, t444 * t638 + t446 * t636, t460 * t638 + t462 * t636, t490 * t638 + t491 * t636, t636 * t403 + t638 * t401 + pkin(4) * (-t433 * t636 + t434 * t638), t636 * t406 + t638 * t404 + pkin(4) * (-t440 * t636 + t441 * t638), t636 * t399 + t638 * t398 + pkin(4) * (-t431 * t636 + t432 * t638), t636 * t396 + t638 * t395 + pkin(4) * (-t409 * t636 + t410 * t638); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t608, t609, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t532, t533, 0, -t504, t620, t610, 0, t622, 0, 0, t493, t492, t439, t427, t482, t455, t475, t481, t474, t494, t408, t411, t402, t397; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t690, 0, 0, -g(3), -t608, 0, 0, 0, t602, 0, -t601, 0, t652, t573, t507, qJ(2) * t507, t569, t559, t565, -t569, t566, 0, t471, t472, t459, t420, t447, t436, t463, t446, t462, t491, t403, t406, t399, t396; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t690, 0, qJDD(1), 0, g(3), 0, -t609, 0, 0, 0, t601, 0, t602, 0, -t573, t652, t660, t496, t568, t557, t562, -t568, -t564, 0, t469, t470, t458, t415, t445, t435, t461, t444, t460, t490, t401, t404, t398, t395; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t608, t609, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t532, t533, 0, -t504, t620, t610, 0, t622, 0, 0, t493, t492, t439, t427, t482, t455, t475, t481, t474, t494, t408, t411, t402, t397; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t690, 0, 0, -t629, t554, 0, t662, t600, t593, -t662, t594, 0, t534, t535, t488, qJ(3) * t488, t484, t457, t478, t483, t477, t495, t416, t419, t405, t400; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t690, 0, qJDD(1), 0, t629, 0, t555, 0, t611, -t605, -t621, -t611, -t623, 0, t527, t528, 0, pkin(2) * t488, -t553, -t552, -t584, t553, t583, -qJDD(4), t421, t426, t430, t407; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t554, -t555, 0, 0, t620, t610, 0, t622, 0, 0, t663, t647, t654, t672, t482, t455, t475, t481, t474, t494, t656, t655, t657, t644; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t621, t623, t611, 0, t625, 0, 0, t539, t527, 0, t525, t502, t515, t523, t514, t537, t468, t485, t423, -pkin(5) * t428; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t621, -t670, t623, -t611, 0, -t539, 0, t528, 0, t524, t500, t512, t522, t511, t536, t438, t453, t418, t425; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t611, t605, t621, t611, t623, 0, -t527, -t528, 0, 0, t553, t552, t584, -t553, -t583, qJDD(4), t645, t643, t688, t689; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t551, -t548, t693, t579, t574, -t579, 0, t526, t465, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t671, t550, t575, t549, t546, -t671, -t526, 0, t466, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t553, t552, t584, -t553, -t583, qJDD(4), -t465, -t466, 0, 0;];
m_new_reg = t1;
