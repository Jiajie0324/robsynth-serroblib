% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RPPR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d4,theta2]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:40
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RPPR6_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RPPR6_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RPPR6_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RPPR6_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RPPR6_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4RPPR6_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:40:49
% EndTime: 2019-12-31 16:40:52
% DurationCPUTime: 3.62s
% Computational Cost: add. (6527->353), mult. (16048->421), div. (0->0), fcn. (9776->6), ass. (0->223)
t538 = sin(qJ(4));
t536 = sin(pkin(6));
t537 = cos(pkin(6));
t540 = cos(qJ(4));
t556 = t536 * t538 + t537 * t540;
t493 = t556 * qJD(1);
t583 = qJD(1) * t537;
t584 = qJD(1) * t536;
t495 = -t538 * t583 + t540 * t584;
t598 = t495 * t493;
t620 = qJDD(4) - t598;
t622 = t538 * t620;
t621 = t540 * t620;
t535 = t537 ^ 2;
t543 = qJD(1) ^ 2;
t544 = t536 ^ 2;
t616 = t543 * (t535 + t544);
t498 = t536 * t616;
t539 = sin(qJ(1));
t541 = cos(qJ(1));
t578 = t541 * qJDD(1);
t550 = -t539 * t498 + t536 * t578;
t619 = pkin(4) * t550;
t513 = t541 * g(1) + t539 * g(2);
t497 = -t543 * pkin(1) + qJDD(1) * qJ(2) - t513;
t600 = qJ(3) * t536;
t610 = pkin(2) * t537;
t563 = -t600 - t610;
t502 = t563 * qJD(1);
t555 = t497 + ((2 * qJD(2)) + t502) * qJD(1);
t604 = t537 * g(3);
t568 = qJDD(3) + t604;
t595 = t537 * t543;
t426 = (-pkin(3) * t595 - pkin(5) * qJDD(1) + t555) * t536 + t568;
t580 = qJD(1) * qJD(2);
t572 = t537 * t580;
t522 = 0.2e1 * t572;
t587 = -t536 * g(3) + t537 * t497;
t574 = -t502 * t583 - t587;
t447 = t522 - t574;
t531 = t537 * qJDD(1);
t532 = t535 * t543;
t437 = -pkin(3) * t532 - pkin(5) * t531 + t447;
t393 = -t540 * t426 + t538 * t437;
t394 = t538 * t426 + t540 * t437;
t375 = -t540 * t393 + t538 * t394;
t588 = t544 * t543;
t618 = -t588 - t532;
t617 = t556 * qJDD(1);
t376 = t538 * t393 + t540 * t394;
t611 = pkin(2) + pkin(3);
t615 = qJ(3) * t376 - t611 * t375;
t489 = t493 ^ 2;
t542 = qJD(4) ^ 2;
t457 = -t542 - t489;
t412 = t538 * t457 + t621;
t413 = t540 * t457 - t622;
t614 = qJ(3) * t413 - t611 * t412 + t393;
t529 = t536 * qJDD(1);
t492 = t540 * t529 - t538 * t531;
t414 = -t540 * t492 - t538 * t617;
t416 = t538 * t492 - t540 * t617;
t613 = qJ(3) * t416 - t611 * t414;
t490 = t495 ^ 2;
t481 = -t490 - t542;
t459 = qJDD(4) + t598;
t592 = t538 * t459;
t432 = t540 * t481 - t592;
t590 = t540 * t459;
t435 = -t538 * t481 - t590;
t612 = qJ(3) * t435 - t611 * t432 + t394;
t528 = t544 * qJDD(1);
t530 = t535 * qJDD(1);
t505 = t530 + t528;
t609 = pkin(4) * (t539 * t505 - t541 * t618);
t499 = t537 * t616;
t571 = t537 * t578;
t474 = -t539 * t499 + t571;
t608 = pkin(4) * t474;
t579 = t539 * qJDD(1);
t475 = t541 * t498 + t536 * t579;
t607 = pkin(4) * t475;
t606 = pkin(5) * t375;
t605 = pkin(5) * t376;
t603 = qJ(2) * t498;
t599 = qJDD(1) * pkin(1);
t597 = t536 * t537;
t512 = t539 * g(1) - t541 * g(2);
t548 = t543 * qJ(2) - qJDD(2) + t512;
t487 = t548 + t599;
t596 = t537 * t487;
t547 = 0.2e1 * qJD(3) * t584 + t548;
t570 = pkin(1) + t600;
t443 = (t611 * t537 + t570) * qJDD(1) + t547 + t618 * pkin(5);
t593 = t538 * t443;
t591 = t539 * t487;
t442 = t540 * t443;
t589 = t541 * t487;
t586 = -pkin(1) * t618 + qJ(2) * t505;
t585 = pkin(1) * t531 - qJ(2) * t499;
t582 = t493 * qJD(4);
t581 = t495 * qJD(4);
t577 = pkin(2) * t529;
t517 = t536 * t595;
t576 = t539 * t598;
t575 = t541 * t598;
t573 = pkin(1) + t610;
t569 = -pkin(5) * t432 + t442;
t468 = t604 + (t497 + 0.2e1 * t580) * t536;
t469 = t522 + t587;
t422 = t536 * t468 + t537 * t469;
t567 = -t539 * t512 - t541 * t513;
t511 = -t539 * t543 + t578;
t566 = -pkin(4) * t511 - t539 * g(3);
t445 = t555 * t536 + t568;
t564 = -pkin(2) * t445 + qJ(3) * t447;
t562 = -pkin(5) * t412 + t593;
t561 = -pkin(5) * t413 + t442;
t560 = -pkin(5) * t435 - t593;
t421 = t537 * t468 - t536 * t469;
t506 = t530 - t528;
t508 = -t532 + t588;
t559 = t541 * t506 + t539 * t508;
t558 = t539 * t506 - t541 * t508;
t557 = t541 * t512 - t539 * t513;
t510 = t541 * t543 + t579;
t554 = pkin(1) - t563;
t553 = -pkin(5) * t414 - t375;
t552 = -pkin(5) * t416 - t376;
t549 = t541 * t499 + t537 * t579;
t524 = qJ(3) * t531;
t516 = t536 * t531;
t515 = -0.2e1 * t516;
t514 = 0.2e1 * t516;
t500 = -t524 + t577;
t488 = -pkin(4) * t510 + t541 * g(3);
t480 = -t490 + t542;
t479 = t489 - t542;
t478 = -t539 * t517 + t536 * t571;
t477 = t510 * t597;
t472 = pkin(4) * t549;
t470 = pkin(4) * (t541 * t505 + t539 * t618);
t466 = t490 - t489;
t464 = -t582 + t492;
t463 = -0.2e1 * t582 + t492;
t462 = -t617 - t581;
t461 = t617 + 0.2e1 * t581;
t456 = t554 * qJDD(1) + t547;
t455 = (t570 + 0.2e1 * t610) * qJDD(1) + t547;
t454 = (t573 + 0.2e1 * t600) * qJDD(1) + t547;
t453 = (-t493 * t540 + t495 * t538) * qJD(4);
t452 = (-t493 * t538 - t495 * t540) * qJD(4);
t451 = t585 + t596;
t450 = t603 + (-t487 - t599) * t536;
t449 = -pkin(2) * t528 + t537 * t454;
t448 = qJ(3) * t530 - t536 * t455;
t446 = -t489 - t490;
t441 = t540 * t464 - t538 * t581;
t440 = t538 * t464 + t540 * t581;
t439 = -t538 * t462 + t540 * t582;
t438 = -t540 * t462 - t538 * t582;
t436 = -pkin(2) * t618 + t447;
t434 = -t538 * t480 + t621;
t433 = t540 * t479 - t592;
t431 = t540 * t480 + t622;
t430 = t538 * t479 + t590;
t429 = -qJ(3) * t618 + t445;
t428 = -0.2e1 * t572 + (-pkin(2) * t544 + qJ(3) * t597) * t543 + t574;
t425 = qJ(3) * t532 + (-pkin(2) * t595 + t555) * t536 + t568;
t419 = -t603 + (t573 * qJDD(1) + t454) * t536;
t418 = (qJ(3) * t529 + t455) * t537 + t585;
t417 = -t540 * t461 - t538 * t463;
t415 = -t538 * t461 + t540 * t463;
t411 = pkin(1) * t487 + qJ(2) * t422;
t410 = t536 * t452 + t537 * t453;
t409 = -t537 * t452 + t536 * t453;
t408 = t422 + t586;
t407 = t536 * t445 + t537 * t447;
t406 = -t537 * t445 + t536 * t447;
t405 = t536 * t440 + t537 * t441;
t404 = -t536 * t438 + t537 * t439;
t403 = -t537 * t440 + t536 * t441;
t402 = t537 * t438 + t536 * t439;
t401 = t536 * t432 + t537 * t435;
t400 = t536 * t431 + t537 * t434;
t399 = t536 * t430 + t537 * t433;
t398 = -t537 * t432 + t536 * t435;
t397 = -t537 * t431 + t536 * t434;
t396 = -t537 * t430 + t536 * t433;
t395 = t537 * t429 - t536 * t436;
t390 = t536 * t429 + t537 * t436 + t586;
t389 = qJ(3) * t463 + t569;
t388 = t536 * t415 + t537 * t417;
t387 = t536 * t414 + t537 * t416;
t386 = -t537 * t415 + t536 * t417;
t385 = -t537 * t414 + t536 * t416;
t384 = t536 * t412 + t537 * t413;
t383 = -t537 * t412 + t536 * t413;
t382 = qJ(3) * t461 + t562;
t381 = -qJ(2) * t406 + (-pkin(2) * t536 + qJ(3) * t537) * t456;
t380 = t611 * t463 + t560;
t379 = t611 * t461 + t561;
t378 = -pkin(1) * t406 - t564;
t377 = qJ(2) * t407 + t554 * t456;
t374 = qJ(3) * t443 - t606;
t373 = t611 * t443 - t605;
t372 = -pkin(1) * t385 - t613;
t371 = qJ(3) * t446 + t553;
t370 = t611 * t446 + t552;
t369 = -pkin(1) * t398 - t612;
t368 = -qJ(2) * t398 - t536 * t380 + t537 * t389;
t367 = pkin(1) * t463 + qJ(2) * t401 + t537 * t380 + t536 * t389;
t366 = -pkin(1) * t383 - t614;
t365 = t536 * t375 + t537 * t376;
t364 = -t537 * t375 + t536 * t376;
t363 = -qJ(2) * t383 - t536 * t379 + t537 * t382;
t362 = pkin(1) * t461 + qJ(2) * t384 + t537 * t379 + t536 * t382;
t361 = -qJ(2) * t385 - t536 * t370 + t537 * t371;
t360 = pkin(1) * t446 + qJ(2) * t387 + t537 * t370 + t536 * t371;
t359 = -qJ(2) * t364 - t536 * t373 + t537 * t374;
t358 = pkin(1) * t443 + qJ(2) * t365 + t537 * t373 + t536 * t374;
t357 = -pkin(1) * t364 - t615;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t511, 0, -t510, 0, t566, -t488, -t557, -pkin(4) * t557, t478, t559, t475, -t478, t549, 0, -t539 * t468 - t536 * t589 - t608, -t539 * t469 - t537 * t589 + t619, t541 * t421 - t609, -pkin(4) * (t539 * t422 + t589) - (t539 * pkin(1) - t541 * qJ(2)) * t421, t478, t475, -t559, 0, -t549, -t478, -t539 * t425 + t541 * t448 - t608, t541 * t395 - t539 * t500 - t609, -t539 * t428 + t541 * t449 - t619, t541 * t381 - t539 * t378 - pkin(4) * (t539 * t407 + t541 * t456), t541 * t405 - t576, t541 * t388 - t539 * t466, t541 * t400 - t539 * t492, t541 * t404 + t576, t541 * t399 + t539 * t617, -t539 * qJDD(4) + t541 * t410, t541 * t363 - t539 * t366 - pkin(4) * (t539 * t384 + t541 * t461), t541 * t368 - t539 * t369 - pkin(4) * (t539 * t401 + t541 * t463), t541 * t361 - t539 * t372 - pkin(4) * (t539 * t387 + t541 * t446), t541 * t359 - t539 * t357 - pkin(4) * (t539 * t365 + t541 * t443); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t510, 0, t511, 0, t488, t566, t567, pkin(4) * t567, t477, t558, -t550, -t477, -t474, 0, t541 * t468 - t536 * t591 - t472, t541 * t469 - t537 * t591 + t607, t539 * t421 + t470, pkin(4) * (t541 * t422 - t591) - (-t541 * pkin(1) - t539 * qJ(2)) * t421, t477, -t550, -t558, 0, t474, -t477, t541 * t425 + t539 * t448 - t472, t539 * t395 + t541 * t500 + t470, t541 * t428 + t539 * t449 - t607, t539 * t381 + t541 * t378 + pkin(4) * (t541 * t407 - t539 * t456), t539 * t405 + t575, t539 * t388 + t541 * t466, t539 * t400 + t541 * t492, t539 * t404 - t575, t539 * t399 - t541 * t617, t541 * qJDD(4) + t539 * t410, t539 * t363 + t541 * t366 + pkin(4) * (t541 * t384 - t539 * t461), t539 * t368 + t541 * t369 + pkin(4) * (t541 * t401 - t539 * t463), t539 * t361 + t541 * t372 + pkin(4) * (t541 * t387 - t539 * t446), t539 * t359 + t541 * t357 + pkin(4) * (t541 * t365 - t539 * t443); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t512, t513, 0, 0, t528, t514, 0, t530, 0, 0, t451, t450, t408, t411, t528, 0, t515, 0, 0, t530, t418, t390, t419, t377, t403, t386, t397, t402, t396, t409, t362, t367, t360, t358; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t543, 0, 0, -g(3), -t512, 0, t516, t506, t498, -t516, t499, 0, -t536 * t487, -t596, t421, qJ(2) * t421, t516, t498, -t506, 0, -t499, -t516, t448, t395, t449, t381, t405, t388, t400, t404, t399, t410, t363, t368, t361, t359; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t543, 0, qJDD(1), 0, g(3), 0, -t513, 0, t517, -t508, -t529, -t517, -t531, 0, t468, t469, 0, pkin(1) * t421, t517, -t529, t508, 0, t531, -t517, t425, t500, t428, t378, t598, t466, t492, -t598, -t617, qJDD(4), t366, t369, t372, t357; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t512, t513, 0, 0, t528, t514, 0, t530, 0, 0, t451, t450, t408, t411, t528, 0, t515, 0, 0, t530, t418, t390, t419, t377, t403, t386, t397, t402, t396, t409, t362, t367, t360, t358; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t529, t531, t517, 0, t532, 0, 0, -t487, t468, 0, t529, t517, -t531, 0, -t532, 0, t524, t429, t454, qJ(3) * t456, t441, t417, t434, t439, t433, t453, t382, t389, t371, t374; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t529, -t588, t531, -t517, 0, t487, 0, t469, 0, 0, -t588, -t529, 0, t517, t531, t455, t436, t577, pkin(2) * t456, -t440, -t415, -t431, t438, -t430, -t452, t379, t380, t370, t373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t517, t508, t529, t517, t531, 0, -t468, -t469, 0, 0, -t517, t529, -t508, 0, -t531, t517, -t425, -t500, -t428, t564, -t598, -t466, -t492, t598, t617, -qJDD(4), t614, t612, t613, t615; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t529, t517, -t531, 0, -t532, 0, 0, t445, t456, 0, t441, t417, t434, t439, t433, t453, t562, t569, t553, -t606; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t517, t529, -t508, 0, -t531, t517, -t445, 0, t447, 0, -t598, -t466, -t492, t598, t617, -qJDD(4), -pkin(3) * t412 + t393, -pkin(3) * t432 + t394, -pkin(3) * t414, -pkin(3) * t375; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t588, t529, 0, -t517, -t531, -t456, -t447, 0, 0, t440, t415, t431, -t438, t430, t452, -pkin(3) * t461 - t561, -pkin(3) * t463 - t560, -pkin(3) * t446 - t552, -pkin(3) * t443 + t605; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t464, -t461, t620, t582, t479, -t582, 0, t443, t393, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t581, t463, t480, t462, t459, -t581, -t443, 0, t394, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t598, t466, t492, -t598, -t617, qJDD(4), -t393, -t394, 0, 0;];
m_new_reg = t1;
