% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RRPP4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:59
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RRPP4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(5,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRPP4_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRPP4_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRPP4_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRPP4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'S4RRPP4_invdynm_fixb_reg2_snew_vp: pkin has to be [5x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:59:23
% EndTime: 2019-12-31 16:59:26
% DurationCPUTime: 2.98s
% Computational Cost: add. (3931->354), mult. (9032->324), div. (0->0), fcn. (4034->4), ass. (0->205)
t557 = qJD(2) ^ 2;
t553 = sin(qJ(2));
t548 = t553 ^ 2;
t558 = qJD(1) ^ 2;
t610 = t548 * t558;
t524 = t557 + t610;
t555 = cos(qJ(2));
t528 = t555 * t558 * t553;
t518 = qJDD(2) - t528;
t607 = t555 * t518;
t475 = -t524 * t553 + t607;
t598 = qJD(1) * qJD(2);
t537 = t555 * t598;
t596 = t553 * qJDD(1);
t503 = 0.2e1 * t537 + t596;
t554 = sin(qJ(1));
t556 = cos(qJ(1));
t440 = pkin(4) * (t475 * t556 - t503 * t554);
t640 = pkin(4) * (t475 * t554 + t503 * t556);
t605 = pkin(1) * t503 + pkin(5) * t475;
t517 = qJDD(2) + t528;
t496 = t555 * t517;
t525 = -t557 + t610;
t474 = t525 * t553 + t496;
t445 = t474 * t554 - t556 * t596;
t447 = t474 * t556 + t554 * t596;
t614 = t518 * t553;
t468 = t524 * t555 + t614;
t657 = pkin(1) * t468;
t642 = pkin(3) * t517;
t637 = pkin(5) * t468;
t536 = t553 * t598;
t595 = t555 * qJDD(1);
t506 = -0.2e1 * t536 + t595;
t618 = t506 * t555;
t623 = t503 * t553;
t455 = -t618 + t623;
t549 = t555 ^ 2;
t515 = (t548 - t549) * t558;
t435 = t455 * t554 + t515 * t556;
t436 = t455 * t556 - t515 * t554;
t609 = t549 * t558;
t526 = -t557 + t609;
t473 = -t526 * t555 + t614;
t656 = t473 * t554 + t556 * t595;
t655 = t473 * t556 - t554 * t595;
t602 = t548 + t549;
t511 = t602 * qJDD(1);
t514 = t602 * t558;
t456 = pkin(4) * (t511 * t556 - t514 * t554);
t604 = pkin(1) * t514 + pkin(5) * t511;
t654 = pkin(2) * t524 + qJ(3) * t518;
t527 = -t557 - t609;
t653 = pkin(2) * t517 + qJ(3) * t527;
t597 = (qJD(3) * qJD(2));
t542 = 2 * t597;
t600 = qJD(1) * t555;
t591 = qJD(4) * t600;
t652 = -0.2e1 * t591 + t542;
t543 = -2 * t597;
t651 = t543 - t657;
t520 = t554 * g(1) - t556 * g(2);
t488 = qJDD(1) * pkin(1) + t558 * pkin(5) + t520;
t570 = -pkin(2) * t536 + t488;
t504 = t537 + t596;
t577 = t504 + t537;
t601 = qJD(1) * t553;
t594 = 0.2e1 * t601;
t583 = qJD(3) * t594;
t563 = t577 * qJ(3) + t570 + t583;
t505 = -t536 + t595;
t636 = t505 * pkin(2);
t423 = t563 + t636;
t464 = t526 * t553 + t607;
t650 = pkin(3) * t506 - qJ(4) * t527;
t465 = t527 * t553 + t496;
t645 = pkin(1) * t465;
t649 = -t645 - t653;
t648 = t505 * pkin(3) - qJ(4) * t609 + qJDD(4);
t516 = -qJD(2) * pkin(3) - qJ(4) * t601;
t578 = -pkin(2) * t555 - qJ(3) * t553;
t501 = t578 * qJD(1);
t521 = g(1) * t556 + g(2) * t554;
t489 = -pkin(1) * t558 + qJDD(1) * pkin(5) - t521;
t603 = t553 * g(3) - t555 * t489;
t576 = t557 * pkin(2) - qJDD(2) * qJ(3) - t501 * t600 + t603;
t571 = pkin(3) * t609 + t505 * qJ(4) - qJD(2) * t516 + t576;
t417 = -t571 + t652;
t635 = t555 * g(3);
t573 = -qJDD(2) * pkin(2) - t557 * qJ(3) + qJDD(3) + t635;
t608 = t553 * t489;
t568 = -t504 * qJ(4) + t573 + t608 - t642;
t599 = qJD(2) * t555;
t593 = qJ(4) * t599;
t418 = (t593 + (-0.2e1 * qJD(4) + t501) * t553) * qJD(1) + t568;
t646 = pkin(2) + pkin(3);
t647 = qJ(3) * t417 - t646 * t418;
t434 = (qJD(1) * t501 + t489) * t553 + t573;
t615 = t517 * t553;
t472 = t527 * t555 - t615;
t641 = pkin(4) * (t472 * t554 + t506 * t556);
t639 = pkin(4) * (t511 * t554 + t514 * t556);
t638 = pkin(5) * t465;
t633 = qJ(3) * t506;
t632 = qJ(3) * t514;
t631 = qJ(4) * t417;
t630 = qJ(4) * t418;
t629 = qJ(4) * t517;
t628 = qJ(4) * t518;
t627 = qJ(4) * t524;
t625 = t488 * t553;
t624 = t488 * t555;
t621 = t503 * t555;
t619 = t506 * t553;
t606 = pkin(1) * t506 + pkin(5) * t472;
t592 = (t505 + t506) * pkin(2);
t478 = t608 + t635;
t430 = t478 * t553 - t555 * t603;
t586 = -t520 * t554 - t556 * t521;
t585 = (0.2e1 * qJD(3) + t516) * t553;
t582 = t554 * t528;
t581 = t556 * t528;
t513 = qJDD(1) * t556 - t554 * t558;
t580 = -pkin(4) * t513 - g(3) * t554;
t431 = t542 - t576;
t579 = -pkin(2) * t434 + qJ(3) * t431;
t429 = t478 * t555 + t553 * t603;
t452 = t619 + t621;
t467 = -t525 * t555 + t615;
t574 = t520 * t556 - t521 * t554;
t572 = t576 - t654;
t569 = pkin(3) * t524 - t571;
t567 = qJ(4) * t595 + t571;
t566 = t569 + t652;
t564 = t636 + (t503 + t577) * qJ(3) + t570;
t562 = qJD(4) * t594 + (-t501 * t553 - t593) * qJD(1) - t568;
t561 = qJ(4) * t596 + t562;
t560 = t562 + t642;
t559 = t504 * qJ(3) + (qJ(3) * t599 + t585) * qJD(1) + t570 + t648;
t414 = t559 + t636;
t539 = qJ(3) * t595;
t533 = 0.2e1 * t591;
t512 = qJDD(1) * t554 + t556 * t558;
t499 = pkin(2) * t596 - t539;
t495 = t602 * t598;
t487 = -pkin(4) * t512 + g(3) * t556;
t485 = t646 * t596 - t539;
t483 = qJDD(2) * t554 + t495 * t556;
t482 = t504 * t555 - t548 * t598;
t481 = -qJDD(2) * t556 + t495 * t554;
t480 = -t505 * t553 - t549 * t598;
t463 = t577 * t553;
t462 = (t505 - t536) * t555;
t461 = t629 + t633;
t451 = t482 * t556 - t582;
t450 = t480 * t556 + t582;
t449 = t482 * t554 + t581;
t448 = t480 * t554 - t581;
t443 = t646 * t503 - t628;
t439 = pkin(4) * (t472 * t556 - t506 * t554);
t438 = -t624 + t637;
t437 = -t625 - t638;
t433 = -t603 + t657;
t432 = t478 - t645;
t427 = t606 + t624;
t426 = -t605 - t625;
t425 = t434 + t632;
t424 = pkin(2) * t514 + t431;
t422 = pkin(1) * t488 + pkin(5) * t430;
t421 = t592 + t563;
t420 = t564 + t583;
t419 = t430 + t604;
t416 = t434 + t649;
t415 = t572 + t651;
t413 = t561 - t632;
t412 = t431 * t555 + t434 * t553;
t411 = t431 * t553 - t434 * t555;
t410 = -t646 * t514 + t533 + t543 + t567;
t409 = qJD(1) * t585 + t564 + t627 + t648;
t408 = -pkin(2) * t623 + t420 * t555 - t637;
t407 = qJ(3) * t618 - t421 * t553 - t638;
t406 = -t424 * t553 + t425 * t555;
t405 = t559 + t592 + t650;
t404 = pkin(2) * t621 + t420 * t553 + t605;
t403 = qJ(3) * t619 + t421 * t555 + t606;
t402 = t533 - t569 + t651 - t654;
t401 = t418 - t642 + t649;
t400 = t424 * t555 + t425 * t553 + t604;
t399 = t417 * t555 + t418 * t553;
t398 = t417 * t553 - t418 * t555;
t397 = qJ(3) * t414 - t630;
t396 = -t405 * t553 + t461 * t555 - t638;
t395 = t409 * t555 - t443 * t553 - t637;
t394 = t405 * t555 + t461 * t553 + t606;
t393 = t409 * t553 + t443 * t555 + t605;
t392 = -pkin(1) * t411 - t579;
t391 = -t410 * t553 + t413 * t555;
t390 = -pkin(5) * t411 + (-pkin(2) * t553 + qJ(3) * t555) * t423;
t389 = t410 * t555 + t413 * t553 - t604;
t388 = t646 * t414 - t631;
t387 = pkin(5) * t412 + (pkin(1) - t578) * t423;
t386 = -pkin(1) * t398 - t647;
t385 = -pkin(5) * t398 - t388 * t553 + t397 * t555;
t384 = pkin(1) * t414 + pkin(5) * t399 + t388 * t555 + t397 * t553;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t513, 0, -t512, 0, t580, -t487, -t574, -pkin(4) * t574, t451, -t436, t447, t450, -t655, t483, -t432 * t554 + t437 * t556 - t641, -t554 * t433 + t556 * t438 + t640, t429 * t556 - t639, -pkin(4) * (t430 * t554 + t488 * t556) - (pkin(1) * t554 - pkin(5) * t556) * t429, t451, t447, t436, t483, t655, t450, t407 * t556 - t416 * t554 - t641, t406 * t556 - t499 * t554 - t639, t408 * t556 - t415 * t554 - t640, t556 * t390 - t554 * t392 - pkin(4) * (t412 * t554 + t423 * t556), t451, t436, -t447, t450, -t655, t483, t396 * t556 - t401 * t554 - t641, t395 * t556 - t402 * t554 - t640, t556 * t391 + t554 * t485 + t639, t556 * t385 - t554 * t386 - pkin(4) * (t399 * t554 + t414 * t556); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t512, 0, t513, 0, t487, t580, t586, pkin(4) * t586, t449, -t435, t445, t448, -t656, t481, t432 * t556 + t437 * t554 + t439, t556 * t433 + t554 * t438 - t440, t429 * t554 + t456, pkin(4) * (t430 * t556 - t488 * t554) - (-pkin(1) * t556 - pkin(5) * t554) * t429, t449, t445, t435, t481, t656, t448, t407 * t554 + t416 * t556 + t439, t406 * t554 + t499 * t556 + t456, t408 * t554 + t415 * t556 + t440, t554 * t390 + t556 * t392 + pkin(4) * (t412 * t556 - t423 * t554), t449, t435, -t445, t448, -t656, t481, t396 * t554 + t401 * t556 + t439, t395 * t554 + t402 * t556 + t440, t554 * t391 - t556 * t485 - t456, t554 * t385 + t556 * t386 + pkin(4) * (t399 * t556 - t414 * t554); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t520, t521, 0, 0, t463, t452, t467, t462, t464, 0, t427, t426, t419, t422, t463, t467, -t452, 0, -t464, t462, t403, t400, t404, t387, t463, -t452, -t467, t462, t464, 0, t394, t393, t389, t384; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t558, 0, 0, -g(3), -t520, 0, t482, -t455, t474, t480, -t473, t495, t437, t438, t429, pkin(5) * t429, t482, t474, t455, t495, t473, t480, t407, t406, t408, t390, t482, t455, -t474, t480, -t473, t495, t396, t395, t391, t385; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t558, 0, qJDD(1), 0, g(3), 0, -t521, 0, t528, -t515, -t596, -t528, -t595, -qJDD(2), t432, t433, 0, pkin(1) * t429, t528, -t596, t515, -qJDD(2), t595, -t528, t416, t499, t415, t392, t528, t515, t596, -t528, -t595, -qJDD(2), t401, t402, -t485, t386; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t520, t521, 0, 0, t463, t452, t467, t462, t464, 0, t427, t426, t419, t422, t463, t467, -t452, 0, -t464, t462, t403, t400, t404, t387, t463, -t452, -t467, t462, t464, 0, t394, t393, t389, t384; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t504, t506, t517, -t537, t526, t537, 0, -t488, t478, 0, t504, t517, -t506, t537, -t526, -t537, t633, t425, t420, qJ(3) * t423, t504, -t506, -t517, -t537, t526, t537, t461, t409, t413, t397; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t536, t503, -t525, t505, t518, -t536, t488, 0, -t603, 0, t536, -t525, -t503, -t536, -t518, t505, t421, t424, pkin(2) * t503, pkin(2) * t423, t536, -t503, t525, t505, t518, -t536, t405, t443, t410, t388; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t528, t515, t596, t528, t595, qJDD(2), -t478, t603, 0, 0, -t528, t596, -t515, qJDD(2), -t595, t528, -t434 + t653, -t499, t542 - t572, t579, -t528, -t515, -t596, t528, t595, qJDD(2), t560 + t653, t566 + t654, t485, t647; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t504, t517, -t506, t537, -t526, -t537, 0, t434, t423, 0, t504, -t506, -t517, -t537, t526, t537, t629, t414 + t627, t561, -t630; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t528, t596, -t515, qJDD(2), -t595, t528, -t434, 0, t431, 0, -t528, -t515, -t596, t528, t595, qJDD(2), t560, t566, pkin(3) * t596, -pkin(3) * t418; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t536, t525, t503, t536, t518, -t505, -t423, -t431, 0, 0, -t536, t503, -t525, -t505, -t518, t536, -t516 * t601 - t423 - t648 - t650, -pkin(3) * t503 + t628, pkin(3) * t514 - t567 + t652, -pkin(3) * t414 + t631; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t504, -t506, -t517, -t537, t526, t537, 0, t414, -t418, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t536, t503, -t525, -t505, -t518, t536, -t414, 0, t417, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t528, t515, t596, -t528, -t595, -qJDD(2), t418, -t417, 0, 0;];
m_new_reg = t1;
