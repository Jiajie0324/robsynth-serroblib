% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RPPP1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,theta2]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 19:07
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RPPP1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RPPP1_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RPPP1_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RPPP1_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RPPP1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4RPPP1_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 19:07:38
% EndTime: 2019-05-04 19:07:43
% DurationCPUTime: 5.39s
% Computational Cost: add. (8024->422), mult. (26144->473), div. (0->0), fcn. (15794->6), ass. (0->267)
t862 = 2 * qJD(2);
t703 = cos(pkin(6));
t705 = sin(qJ(1));
t706 = cos(qJ(1));
t680 = g(1) * t706 + g(2) * t705;
t707 = qJD(1) ^ 2;
t702 = sin(pkin(4));
t772 = qJDD(1) * t702;
t654 = -pkin(1) * t707 + qJ(2) * t772 - t680;
t860 = qJD(1) * t862;
t741 = t702 * t860 + t654;
t861 = t703 * t741;
t704 = cos(pkin(4));
t783 = t704 * t707;
t767 = t703 * t783;
t701 = sin(pkin(6));
t773 = qJDD(1) * t701;
t721 = t767 + t773;
t647 = t721 * t702;
t697 = t701 ^ 2;
t699 = t702 ^ 2;
t798 = t699 * t707;
t683 = t697 * t798;
t826 = t704 ^ 2;
t695 = t826 * t707;
t663 = -t683 - t695;
t769 = t701 * t703 * t707;
t670 = t699 * t769;
t770 = t704 * qJDD(1);
t656 = -t670 + t770;
t800 = t656 * t701;
t728 = -t663 * t703 + t800;
t605 = t702 * t647 + t704 * t728;
t799 = t656 * t703;
t632 = t663 * t701 + t799;
t818 = pkin(5) * (t605 * t706 + t632 * t705);
t571 = pkin(5) * (t605 * t705 - t632 * t706);
t768 = t702 * t783;
t671 = t701 * t768;
t771 = qJDD(1) * t703;
t759 = t702 * t771;
t650 = -t671 + t759;
t700 = t703 ^ 2;
t684 = t700 * t798;
t665 = -t684 - t695;
t655 = t670 + t770;
t801 = t655 * t703;
t729 = t665 * t701 + t801;
t601 = t702 * t650 + t704 * t729;
t802 = t655 * t701;
t629 = -t665 * t703 + t802;
t819 = pkin(5) * (t601 * t706 - t629 * t705);
t570 = pkin(5) * (t601 * t705 + t629 * t706);
t597 = -t704 * t647 + t702 * t728;
t718 = (t597 * t702 + t605 * t704) * qJ(2);
t593 = -t704 * t650 + t702 * t729;
t719 = (t593 * t702 + t601 * t704) * qJ(2);
t859 = pkin(1) * t593;
t858 = pkin(1) * t597;
t857 = pkin(1) * t601;
t856 = pkin(1) * t605;
t657 = t683 - t684;
t805 = t650 * t701;
t806 = t647 * t703;
t732 = t805 + t806;
t588 = -t702 * t657 + t704 * t732;
t804 = t650 * t703;
t807 = t647 * t701;
t620 = -t804 + t807;
t855 = t588 * t705 + t620 * t706;
t566 = t588 * t706 - t620 * t705;
t649 = t671 + t759;
t664 = t684 - t695;
t727 = t664 * t701 + t799;
t600 = -t702 * t649 + t704 * t727;
t630 = -t664 * t703 + t800;
t576 = t600 * t705 + t630 * t706;
t854 = t600 * t706 - t630 * t705;
t648 = (-t767 + t773) * t702;
t662 = -t683 + t695;
t730 = t662 * t703 + t802;
t604 = -t702 * t648 + t704 * t730;
t631 = -t662 * t701 + t801;
t851 = t604 * t705 - t631 * t706;
t574 = t604 * t706 + t631 * t705;
t846 = qJ(4) * t655;
t834 = pkin(3) * (t665 + t684);
t833 = pkin(3) * (t663 + t684);
t832 = (t699 + t826) * t702 * t769;
t831 = -pkin(2) * t663 + qJ(3) * t656;
t679 = g(1) * t705 - t706 * g(2);
t815 = qJ(2) * t702;
t653 = qJDD(1) * pkin(1) + t707 * t815 + t679;
t803 = t653 * t704;
t748 = (g(3) * t702 - t803) * t703;
t717 = -pkin(2) * t770 - qJ(3) * t695 + qJDD(3) + t748;
t749 = t702 * t767;
t775 = qJD(1) * qJD(4);
t830 = -pkin(3) * t749 - 0.2e1 * t704 * t775 + t717 - t846;
t809 = qJ(3) * t701;
t742 = pkin(2) * t703 + t809;
t778 = qJD(1) * t702;
t651 = t742 * t778;
t766 = t703 * t778;
t829 = -pkin(2) * t695 + qJ(3) * t770 - t651 * t766;
t828 = -pkin(2) * t771 - qJ(3) * t721 - t653;
t592 = t704 * t649 + t702 * t727;
t596 = t704 * t648 + t702 * t730;
t585 = t704 * t657 + t702 * t732;
t796 = t701 * t702;
t685 = g(3) * t796;
t660 = (pkin(3) * t796 - qJ(4) * t704) * qJD(1);
t779 = qJD(1) * t660;
t827 = -qJ(4) * t684 + (t653 * t701 + t779) * t704 + qJDD(4) - t685 + t829;
t751 = (t862 - t651) * qJD(1);
t816 = pkin(3) * qJDD(1);
t558 = (t654 + (t751 + t816) * t702) * t701 + t830;
t825 = pkin(3) * t558;
t776 = qJD(1) * qJD(3);
t763 = t704 * t776;
t687 = 0.2e1 * t763;
t559 = t687 + (t654 + (t860 + t816) * t702) * t703 + t827;
t824 = pkin(3) * t559;
t823 = pkin(3) * t648;
t822 = pkin(3) * t655;
t821 = pkin(3) * t656;
t658 = -t683 - t684;
t731 = -t648 * t703 + t649 * t701;
t587 = -t702 * t658 + t704 * t731;
t618 = t648 * t701 + t649 * t703;
t820 = pkin(5) * (t587 * t706 + t618 * t705);
t817 = pkin(2) + qJ(4);
t814 = qJ(2) * t704;
t813 = qJ(3) * t647;
t812 = qJ(3) * t650;
t811 = qJ(3) * t658;
t810 = qJ(3) * t665;
t808 = qJ(4) * t648;
t754 = t704 * g(3) - qJDD(2);
t639 = t702 * t653 + t754;
t797 = t701 * t639;
t790 = t703 * t639;
t789 = t704 * t639;
t782 = pkin(1) * t587 + t618 * t815;
t781 = -t629 * t815 + t857;
t780 = t632 * t815 + t856;
t621 = -pkin(2) * t648 + qJ(3) * t649;
t774 = qJDD(1) * t699;
t764 = t701 * t776;
t761 = t701 * t771;
t760 = t701 * t772;
t758 = t702 * t770;
t584 = t704 * t658 + t702 * t731;
t757 = -pkin(1) * t584 + t618 * t814;
t756 = -t629 * t814 - t859;
t755 = t632 * t814 - t858;
t753 = -t679 * t705 - t706 * t680;
t673 = qJDD(1) * t706 - t705 * t707;
t746 = -pkin(5) * t673 - g(3) * t705;
t743 = -pkin(2) * t671 + t754;
t740 = -qJ(2) * t632 - t797;
t548 = pkin(3) * t649 - t658 * t817 + t559;
t551 = t558 - t811 + t823;
t739 = t548 * t703 + t551 * t701;
t709 = (t653 + (qJ(3) * qJDD(1) + ((2 * qJD(3)) + t660) * qJD(1)) * t701 + (qJ(3) * t783 + qJDD(1) * t817 + (2 * t775)) * t703) * t702 + t743;
t552 = t650 * t817 + t709 + t834;
t626 = t812 - t822;
t738 = t552 * t703 + t626 * t701;
t557 = t709 + t813 + t833;
t615 = t647 * t817 + t821;
t737 = t557 * t701 + t615 * t703;
t736 = -t558 * t703 + t559 * t701;
t614 = t701 * t803 - t685 + t861;
t578 = t687 + t614 + t829;
t568 = -pkin(2) * t658 + t578;
t579 = (t702 * t751 + t654) * t701 + t717;
t569 = t579 - t811;
t735 = t568 * t703 + t569 * t701;
t734 = t578 * t701 - t579 * t703;
t613 = t701 * t741 + t748;
t733 = -t703 * t613 + t701 * t614;
t562 = t613 * t701 + t614 * t703;
t726 = t679 * t706 - t680 * t705;
t724 = -0.2e1 * t702 * t764 - t743;
t582 = (0.2e1 * t764 - t828) * t702 + t743;
t580 = t582 + t813;
t723 = pkin(2) * t806 + t580 * t701;
t720 = (-t584 * t702 - t587 * t704) * qJ(2);
t563 = pkin(3) * t684 + t709;
t522 = t563 * t817 + t824;
t535 = t558 * t701 + t559 * t703;
t537 = qJ(3) * t563 + t825;
t716 = qJ(2) * t535 + t522 * t703 + t537 * t701;
t581 = -pkin(2) * t650 + t702 * t828 + t724;
t715 = qJ(2) * t629 - qJ(3) * t805 + t581 * t703;
t542 = t578 * t703 + t579 * t701;
t714 = qJ(2) * t542 + t582 * t742;
t712 = -t830 + ((qJD(1) * t651 - t816) * t702 - t741) * t701;
t711 = -0.2e1 * qJD(4) * t766 + (-qJ(3) * t767 - t701 * t779 - t653 + (-t817 * t703 - t809) * qJDD(1)) * t702 + t724;
t710 = -qJ(4) * t663 + t559;
t694 = t826 * qJDD(1);
t682 = t700 * t774;
t681 = t697 * t774;
t672 = qJDD(1) * t705 + t706 * t707;
t659 = -pkin(5) * t672 + g(3) * t706;
t644 = (t697 + t700) * t768;
t643 = (-t697 * t783 + t761) * t702;
t642 = (-t700 * t783 - t761) * t702;
t638 = t697 * t758 + t832;
t637 = t700 * t758 - t832;
t636 = t644 * t706 + t705 * t758;
t635 = t644 * t705 - t706 * t758;
t612 = t621 - t808;
t611 = -t638 * t705 + t643 * t706;
t610 = -t637 * t705 + t642 * t706;
t609 = t638 * t706 + t643 * t705;
t608 = t637 * t706 + t642 * t705;
t564 = pkin(5) * (-t587 * t705 + t618 * t706);
t561 = -pkin(2) * t655 + t579 - t810;
t560 = t578 + t831;
t556 = t702 * t639 + t704 * t733;
t555 = t702 * t733 - t789;
t554 = -t790 + t718;
t553 = -t719 - t797;
t550 = t710 + t831;
t549 = t655 * t817 + t712 + t810;
t547 = t613 * t702 + t703 * t789 + t756;
t546 = t702 * t614 + t704 * t740 + t858;
t545 = -t613 * t704 + t702 * t790 + t781;
t544 = -t704 * t614 + t702 * t740 - t856;
t543 = -pkin(2) * t579 + qJ(3) * t578;
t541 = t562 * t704 + t757;
t540 = t562 * t702 + t782;
t539 = -pkin(2) * t807 + t703 * t580 - t718;
t538 = -qJ(3) * t804 - t701 * t581 + t719;
t536 = t720 - t733;
t534 = t702 * t582 + t704 * t734;
t533 = -t704 * t582 + t702 * t734;
t532 = pkin(1) * t556 + t562 * t815;
t531 = -pkin(1) * t555 + t562 * t814;
t530 = (-t555 * t702 - t556 * t704) * qJ(2);
t529 = -t701 * t552 + t703 * t626 - t719;
t528 = t703 * t557 - t701 * t615 - t718;
t527 = -t702 * t561 + t704 * t715 + t859;
t526 = t704 * t561 + t702 * t715 - t857;
t525 = -t702 * t560 + t704 * t723 + t755;
t524 = t704 * t560 + t702 * t723 + t780;
t523 = -t701 * t568 + t703 * t569 + t720;
t521 = -t702 * t621 + t704 * t735 + t757;
t520 = t704 * t621 + t702 * t735 + t782;
t519 = t702 * t563 + t704 * t736;
t518 = -t704 * t563 + t702 * t736;
t517 = qJ(3) * t559 - t558 * t817;
t516 = -t702 * t550 + t704 * t737 + t755;
t515 = t704 * t550 + t702 * t737 + t780;
t514 = -t701 * t548 + t703 * t551 + t720;
t513 = -t702 * t549 + t704 * t738 + t756;
t512 = t704 * t549 + t702 * t738 + t781;
t511 = -t702 * t612 + t704 * t739 + t757;
t510 = t704 * t612 + t702 * t739 + t782;
t509 = (-pkin(2) * t701 + qJ(3) * t703) * t582 + (-t533 * t702 - t534 * t704) * qJ(2);
t508 = -pkin(1) * t533 - t702 * t543 + t704 * t714;
t507 = pkin(1) * t534 + t704 * t543 + t702 * t714;
t506 = -t701 * t522 + t703 * t537 + (-t518 * t702 - t519 * t704) * qJ(2);
t505 = -pkin(1) * t518 - t702 * t517 + t704 * t716;
t504 = pkin(1) * t519 + t704 * t517 + t702 * t716;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t673, 0, -t672, 0, t746, -t659, -t726, -pkin(5) * t726, t611, -t855, -t851, t610, -t576, t636, -t547 * t705 + t553 * t706 - t819, -t705 * t546 + t706 * t554 + t818, t536 * t706 - t541 * t705 - t820, t706 * t530 - t705 * t531 - pkin(5) * (t556 * t706 + t562 * t705), t636, t851, t576, t611, -t855, t610, -t521 * t705 + t523 * t706 - t820, -t705 * t527 + t706 * t538 + t819, -t525 * t705 + t539 * t706 - t818, t706 * t509 - t705 * t508 - pkin(5) * (t534 * t706 + t542 * t705), t636, t576, -t851, t610, t855, t611, -t511 * t705 + t514 * t706 - t820, -t516 * t705 + t528 * t706 - t818, -t513 * t705 + t529 * t706 - t819, t706 * t506 - t705 * t505 - pkin(5) * (t519 * t706 + t535 * t705); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t672, 0, t673, 0, t659, t746, t753, pkin(5) * t753, t609, t566, t574, t608, t854, t635, t547 * t706 + t553 * t705 - t570, t706 * t546 + t705 * t554 + t571, t536 * t705 + t541 * t706 + t564, t705 * t530 + t706 * t531 + pkin(5) * (-t556 * t705 + t562 * t706), t635, -t574, -t854, t609, t566, t608, t521 * t706 + t523 * t705 + t564, t706 * t527 + t705 * t538 + t570, t525 * t706 + t539 * t705 - t571, t705 * t509 + t706 * t508 + pkin(5) * (-t534 * t705 + t542 * t706), t635, -t854, t574, t608, -t566, t609, t511 * t706 + t514 * t705 + t564, t516 * t706 + t528 * t705 - t571, t513 * t706 + t529 * t705 - t570, t705 * t506 + t706 * t505 + pkin(5) * (-t519 * t705 + t535 * t706); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t679, t680, 0, 0, t681, t585, t596, t682, t592, t694, t545, t544, t540, t532, t694, -t596, -t592, t681, t585, t682, t520, t526, t524, t507, t694, -t592, t596, t682, -t585, t681, t510, t515, t512, t504; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t707, 0, 0, -g(3), -t679, 0, t643, -t620, t631, t642, -t630, t644, t553, t554, t536, t530, t644, -t631, t630, t643, -t620, t642, t523, t538, t539, t509, t644, t630, t631, t642, t620, t643, t514, t528, t529, t506; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t707, 0, qJDD(1), 0, g(3), 0, -t680, 0, t638, t588, t604, t637, t600, -t758, t547, t546, t541, t531, -t758, -t604, -t600, t638, t588, t637, t521, t527, t525, t508, -t758, -t600, t604, t637, -t588, t638, t511, t516, t513, t505; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t679, t680, 0, 0, t681, t585, t596, t682, t592, t694, t545, t544, t540, t532, t694, -t596, -t592, t681, t585, t682, t520, t526, t524, t507, t694, -t592, t596, t682, -t585, t681, t510, t515, t512, t504; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t760, t650, t655, -t749, t664, t749, 0, -t639, t613, 0, t749, -t655, -t664, t760, t650, -t749, t569, -t812, t580, qJ(3) * t582, t749, -t664, t655, -t749, -t650, t760, t551, t557, t626, t537; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t671, t647, t662, t759, t656, -t671, t639, 0, t614, 0, -t671, -t662, -t656, t671, t647, t759, t568, t581, pkin(2) * t647, pkin(2) * t582, -t671, -t656, t662, t759, -t647, t671, t548, t615, t552, t522; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t670, t657, t648, t670, t649, t770, -t613, -t614, 0, 0, t770, -t648, -t649, -t670, t657, t670, t621, t561, t560, t543, t770, -t649, t648, t670, -t657, -t670, t612, t550, t549, t517; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t770, -t648, -t649, -t670, t657, t670, 0, t579, t578, 0, t770, -t649, t648, t670, -t657, -t670, -t808, t710, t712 + t846, -qJ(4) * t558; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t749, t655, t664, -t760, -t650, t749, -t579, 0, -t582, 0, -t749, t664, -t655, t749, t650, -t760, t712 - t823, t711 - t833, t822, -t825; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t671, t662, t656, -t671, -t647, -t759, -t578, t582, 0, 0, t671, t656, -t662, -t759, t647, -t671, qJ(4) * t658 - 0.2e1 * t763 + (-t649 - t759) * pkin(3) - t861 - t827, -qJ(4) * t647 - t821, -qJ(4) * t650 + t711 - t834, -qJ(4) * t563 - t824; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t770, -t649, t648, t670, -t657, -t670, 0, t559, -t558, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t671, t656, -t662, -t759, t647, -t671, -t559, 0, -t563, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t749, -t664, t655, -t749, -t650, t760, t558, t563, 0, 0;];
m_new_reg  = t1;
