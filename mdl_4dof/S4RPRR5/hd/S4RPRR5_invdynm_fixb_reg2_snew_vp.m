% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RPRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:51
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RPRR5_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RPRR5_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RPRR5_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RPRR5_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RPRR5_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4RPRR5_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:51:44
% EndTime: 2019-12-31 16:51:46
% DurationCPUTime: 2.38s
% Computational Cost: add. (5952->274), mult. (8805->306), div. (0->0), fcn. (3880->6), ass. (0->164)
t388 = sin(qJ(1));
t391 = cos(qJ(1));
t387 = sin(qJ(3));
t381 = -qJD(1) + qJD(3);
t379 = t381 ^ 2;
t380 = qJDD(1) - qJDD(3);
t390 = cos(qJ(3));
t423 = t390 * t380;
t407 = t387 * t379 + t423;
t441 = pkin(5) * t407 + t387 * g(3);
t427 = t387 * t380;
t348 = t390 * t379 - t427;
t446 = t391 * t348 + t388 * t407;
t449 = pkin(5) * t348 + t390 * g(3);
t455 = -pkin(4) * t446 + t388 * t441 + t391 * t449;
t409 = t388 * t348 - t391 * t407;
t453 = -pkin(4) * t409 + t388 * t449 - t391 * t441;
t420 = (qJD(2) * qJD(1));
t377 = 2 * t420;
t394 = qJD(1) ^ 2;
t367 = t391 * g(1) + t388 * g(2);
t382 = qJDD(1) * qJ(2);
t405 = -t367 + t382;
t440 = pkin(1) + pkin(2);
t330 = -t440 * t394 + t377 + t405;
t366 = t388 * g(1) - t391 * g(2);
t402 = -qJDD(2) + t366;
t396 = -t394 * qJ(2) - t402;
t395 = -t440 * qJDD(1) + t396;
t295 = t387 * t330 - t390 * t395;
t296 = t390 * t330 + t387 * t395;
t274 = t390 * t295 - t387 * t296;
t411 = t387 * t295 + t390 * t296;
t448 = t388 * t274 - t391 * t411;
t447 = t391 * t274 + t388 * t411;
t290 = -t379 * pkin(3) - t380 * pkin(6) + t296;
t386 = sin(qJ(4));
t389 = cos(qJ(4));
t285 = -t389 * g(3) + t386 * t290;
t286 = t386 * g(3) + t389 * t290;
t268 = t389 * t285 - t386 * t286;
t439 = pkin(3) * t268;
t269 = t386 * t285 + t389 * t286;
t289 = t380 * pkin(3) - t379 * pkin(6) + t295;
t263 = t390 * t269 + t387 * t289;
t438 = pkin(5) * t263;
t437 = pkin(5) * t274;
t436 = pkin(6) * t390;
t433 = qJDD(1) * pkin(1);
t383 = t386 ^ 2;
t432 = t383 * t379;
t431 = t386 * t289;
t365 = t389 * t379 * t386;
t355 = qJDD(4) + t365;
t430 = t386 * t355;
t356 = qJDD(4) - t365;
t429 = t386 * t356;
t428 = t386 * t380;
t426 = t389 * t289;
t425 = t389 * t355;
t424 = t389 * t356;
t370 = t389 * t380;
t384 = t389 ^ 2;
t422 = t383 + t384;
t421 = qJD(4) * t381;
t419 = t386 * t421;
t369 = t389 * t421;
t262 = t387 * t269 - t390 * t289;
t418 = -pkin(5) * t262 - t387 * t439;
t335 = t394 * pkin(1) - t405 - (2 * t420);
t337 = -t396 + t433;
t417 = -t391 * t335 - t388 * t337;
t416 = -t388 * t366 - t391 * t367;
t415 = t387 * t365;
t414 = t390 * t365;
t413 = -pkin(2) * g(3) + pkin(5) * t411;
t412 = pkin(3) * t289 - pkin(6) * t269;
t357 = t388 * qJDD(1) + t391 * t394;
t340 = -pkin(4) * t357 + t391 * g(3);
t358 = t391 * qJDD(1) - t388 * t394;
t339 = pkin(4) * t358 + t388 * g(3);
t410 = t388 * t335 - t391 * t337;
t408 = t391 * t366 - t388 * t367;
t406 = -pkin(3) * t390 - pkin(6) * t387 - pkin(2);
t372 = t384 * t379;
t393 = qJD(4) ^ 2;
t364 = -t372 - t393;
t315 = t386 * t364 + t425;
t278 = -pkin(3) * t315 + t285;
t282 = -pkin(6) * t315 + t431;
t319 = t389 * t364 - t430;
t345 = -t370 - 0.2e1 * t419;
t291 = t387 * t319 + t390 * t345;
t404 = -pkin(5) * t291 - t387 * t278 + t390 * t282;
t362 = -t393 - t432;
t317 = t389 * t362 - t429;
t279 = -pkin(3) * t317 + t286;
t283 = -pkin(6) * t317 + t426;
t321 = -t386 * t362 - t424;
t342 = 0.2e1 * t369 - t428;
t292 = t387 * t321 - t390 * t342;
t403 = -pkin(5) * t292 - t387 * t279 + t390 * t283;
t401 = pkin(3) * t345 + pkin(6) * t319 - t426;
t400 = pkin(3) * t342 - pkin(6) * t321 - t431;
t293 = t390 * t319 - t387 * t345;
t399 = -pkin(5) * t293 - t390 * t278 - t387 * t282;
t294 = t390 * t321 + t387 * t342;
t398 = -pkin(5) * t294 - t390 * t279 - t387 * t283;
t346 = t422 * t380;
t351 = t372 + t432;
t397 = pkin(3) * t351 - pkin(6) * t346 + t269;
t392 = pkin(1) * g(3);
t385 = qJ(2) * g(3);
t363 = t372 - t393;
t361 = t393 - t432;
t353 = t402 + 0.2e1 * t433;
t352 = -t372 + t432;
t344 = -t370 - t419;
t343 = t369 - t428;
t341 = -t367 + t377 + 0.2e1 * t382;
t338 = t422 * t421;
t325 = t387 * qJDD(4) + t390 * t338;
t324 = -t390 * qJDD(4) + t387 * t338;
t323 = t389 * t343 - t383 * t421;
t322 = -t386 * t344 - t384 * t421;
t320 = -t386 * t361 + t425;
t318 = t389 * t363 - t429;
t316 = t389 * t361 + t430;
t314 = t386 * t363 + t424;
t313 = (t343 + t369) * t386;
t312 = (-t344 + t419) * t389;
t310 = -t390 * t346 - t387 * t351;
t308 = -t387 * t346 + t390 * t351;
t307 = -t386 * t342 + t389 * t345;
t306 = t389 * t342 + t386 * t345;
t305 = pkin(1) * t337 - qJ(2) * t335;
t304 = t390 * t320 - t386 * t427;
t303 = t390 * t318 - t387 * t370;
t302 = t387 * t320 + t386 * t423;
t301 = t387 * t318 + t389 * t423;
t300 = t390 * t323 - t415;
t299 = t390 * t322 + t415;
t298 = t387 * t323 + t414;
t297 = t387 * t322 - t414;
t288 = t390 * t307 + t387 * t352;
t287 = t387 * t307 - t390 * t352;
t277 = -qJ(2) * t348 + t407 * t440 + t295;
t276 = qJ(2) * t407 + t348 * t440 + t296;
t271 = t385 + t437;
t270 = t392 - t413;
t265 = -pkin(5) * t308 + t390 * t268;
t264 = pkin(5) * t310 + t387 * t268;
t261 = qJ(2) * t294 - t440 * t292 + t400;
t260 = qJ(2) * t293 - t440 * t291 - t401;
t259 = qJ(2) * t317 + t403;
t258 = qJ(2) * t315 + t404;
t257 = qJ(2) * t310 - t440 * t308 - t397;
t256 = t440 * t317 + t398;
t255 = t440 * t315 + t399;
t254 = qJ(2) * t411 + t274 * t440;
t253 = -(qJ(2) - t436) * t268 + t418;
t252 = -t438 - (pkin(1) - t406) * t268;
t251 = qJ(2) * t263 - t440 * t262 + t412;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t358, 0, -t357, 0, -t339, -t340, -t408, -pkin(4) * t408, 0, t358, 0, 0, t357, 0, -t339, t410, t340, pkin(4) * t410 + (-t388 * pkin(1) + t391 * qJ(2)) * g(3), 0, 0, t409, 0, -t446, 0, -t453, t455, t447, -pkin(4) * t447 - t388 * t270 + t391 * t271, t388 * t298 + t391 * t300, t388 * t287 + t391 * t288, t388 * t302 + t391 * t304, t388 * t297 + t391 * t299, t388 * t301 + t391 * t303, t388 * t324 + t391 * t325, t391 * t258 - t388 * t255 - pkin(4) * (-t391 * t291 + t388 * t293), t391 * t259 - t388 * t256 - pkin(4) * (-t391 * t292 + t388 * t294), t391 * t265 + t388 * t264 - pkin(4) * (-t391 * t308 + t388 * t310), t391 * t253 - t388 * t252 - pkin(4) * (-t391 * t262 + t388 * t263); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t357, 0, t358, 0, t340, -t339, t416, pkin(4) * t416, 0, t357, 0, 0, -t358, 0, t340, t417, t339, pkin(4) * t417 + (t391 * pkin(1) + t388 * qJ(2)) * g(3), 0, 0, -t446, 0, -t409, 0, t455, t453, t448, -pkin(4) * t448 + t391 * t270 + t388 * t271, -t391 * t298 + t388 * t300, -t391 * t287 + t388 * t288, -t391 * t302 + t388 * t304, -t391 * t297 + t388 * t299, -t391 * t301 + t388 * t303, -t391 * t324 + t388 * t325, t388 * t258 + t391 * t255 + pkin(4) * (t388 * t291 + t391 * t293), t388 * t259 + t391 * t256 + pkin(4) * (t388 * t292 + t391 * t294), t388 * t265 - t391 * t264 + pkin(4) * (t388 * t308 + t391 * t310), t388 * t253 + t391 * t252 + pkin(4) * (t388 * t262 + t391 * t263); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t366, t367, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t353, 0, t341, t305, 0, 0, 0, 0, 0, t380, t277, t276, 0, t254, -t313, -t306, -t316, t312, -t314, 0, t260, t261, t257, t251; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t394, 0, 0, -g(3), -t366, 0, 0, qJDD(1), 0, 0, t394, 0, 0, -t337, g(3), t385, 0, 0, -t407, 0, -t348, 0, t441, t449, t274, t271, t300, t288, t304, t299, t303, t325, t258, t259, t265, t253; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t394, 0, qJDD(1), 0, g(3), 0, -t367, 0, 0, t394, 0, 0, -qJDD(1), 0, g(3), -t335, 0, t392, 0, 0, -t348, 0, t407, 0, t449, -t441, -t411, t270, -t298, -t287, -t302, -t297, -t301, -t324, t255, t256, -t264, t252; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t366, t367, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t353, 0, t341, t305, 0, 0, 0, 0, 0, t380, t277, t276, 0, t254, -t313, -t306, -t316, t312, -t314, 0, t260, t261, t257, t251; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t394, 0, 0, -t337, g(3), 0, 0, 0, -t407, 0, -t348, 0, t441, t449, t274, t437, t300, t288, t304, t299, t303, t325, t404, t403, t265, t268 * t436 + t418; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t337, 0, -t335, 0, 0, 0, 0, 0, 0, t380, pkin(2) * t407 + t295, pkin(2) * t348 + t296, 0, pkin(2) * t274, -t313, -t306, -t316, t312, -t314, 0, -pkin(2) * t291 - t401, -pkin(2) * t292 + t400, -pkin(2) * t308 - t397, -pkin(2) * t262 + t412; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t394, 0, 0, qJDD(1), 0, -g(3), t335, 0, 0, 0, 0, t348, 0, -t407, 0, -t449, t441, t411, t413, t298, t287, t302, t297, t301, t324, -pkin(2) * t315 - t399, -pkin(2) * t317 - t398, t264, -t268 * t406 + t438; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t380, 0, -t379, 0, 0, g(3), t295, 0, t323, t307, t320, t322, t318, t338, t282, t283, t268, pkin(6) * t268; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t379, 0, -t380, 0, -g(3), 0, t296, 0, t365, -t352, t428, -t365, t370, -qJDD(4), t278, t279, 0, t439; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t380, -t295, -t296, 0, 0, t313, t306, t316, -t312, t314, 0, t401, -t400, t397, -t412; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t343, t345, t355, -t369, t363, t369, 0, t289, t285, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t419, t342, t361, t344, t356, -t419, -t289, 0, t286, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t365, t352, -t428, t365, -t370, qJDD(4), -t285, -t286, 0, 0;];
m_new_reg = t1;
