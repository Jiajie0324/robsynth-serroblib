% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RPRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:49
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RPRR3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RPRR3_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RPRR3_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RPRR3_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RPRR3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RPRR3_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:49:25
% EndTime: 2019-12-31 16:49:30
% DurationCPUTime: 5.00s
% Computational Cost: add. (16411->394), mult. (33076->558), div. (0->0), fcn. (20890->8), ass. (0->274)
t704 = sin(qJ(1));
t707 = cos(qJ(1));
t678 = t707 * g(1) + t704 * g(2);
t709 = qJD(1) ^ 2;
t661 = -t709 * pkin(1) - t678;
t699 = sin(pkin(7));
t700 = cos(pkin(7));
t677 = t704 * g(1) - t707 * g(2);
t714 = qJDD(1) * pkin(1) + t677;
t611 = t699 * t661 - t700 * t714;
t612 = t700 * t661 + t699 * t714;
t726 = t699 * t611 + t700 * t612;
t554 = t700 * t611 - t699 * t612;
t739 = t707 * t554;
t773 = -t704 * t726 + t739;
t746 = t704 * t554;
t772 = t707 * t726 + t746;
t702 = sin(qJ(4));
t705 = cos(qJ(4));
t706 = cos(qJ(3));
t703 = sin(qJ(3));
t737 = qJD(1) * t703;
t649 = -t705 * t706 * qJD(1) + t702 * t737;
t651 = (t702 * t706 + t703 * t705) * qJD(1);
t613 = t651 * t649;
t694 = qJDD(3) + qJDD(4);
t763 = -t613 + t694;
t771 = t702 * t763;
t770 = t705 * t763;
t667 = t699 * qJDD(1) + t700 * t709;
t697 = g(3) - qJDD(2);
t642 = qJ(2) * t667 - t700 * t697;
t668 = t700 * qJDD(1) - t699 * t709;
t716 = -qJ(2) * t668 - t699 * t697;
t761 = t707 * t667 + t704 * t668;
t769 = pkin(4) * t761 + t707 * t642 - t704 * t716;
t616 = -t704 * t667 + t707 * t668;
t768 = -pkin(4) * t616 + t704 * t642 + t707 * t716;
t596 = -t709 * pkin(2) + qJDD(1) * pkin(5) + t612;
t577 = t703 * t596 + t706 * t697;
t579 = t706 * t596 - t703 * t697;
t535 = t703 * t577 + t706 * t579;
t735 = qJD(1) * qJD(3);
t688 = t706 * t735;
t734 = t703 * qJDD(1);
t664 = t688 + t734;
t727 = t703 * t735;
t733 = t706 * qJDD(1);
t711 = t727 - t733;
t581 = -t649 * qJD(4) + t705 * t664 - t702 * t711;
t695 = qJD(3) + qJD(4);
t644 = t695 * t649;
t762 = -t644 + t581;
t725 = t702 * t664 + t705 * t711;
t562 = (qJD(4) - t695) * t651 + t725;
t646 = t649 ^ 2;
t647 = t651 ^ 2;
t693 = t695 ^ 2;
t759 = t706 ^ 2;
t684 = t706 * t709 * t703;
t674 = qJDD(3) + t684;
t539 = (-t664 + t688) * pkin(6) + t674 * pkin(3) - t577;
t676 = qJD(3) * pkin(3) - pkin(6) * t737;
t691 = t759 * t709;
t541 = -pkin(3) * t691 - pkin(6) * t711 - qJD(3) * t676 + t579;
t499 = -t705 * t539 + t702 * t541;
t500 = t702 * t539 + t705 * t541;
t468 = -t705 * t499 + t702 * t500;
t758 = pkin(3) * t468;
t566 = t644 + t581;
t517 = -t562 * t702 - t705 * t566;
t757 = pkin(3) * t517;
t755 = t695 * t651;
t754 = t695 * t702;
t753 = t695 * t705;
t696 = t703 ^ 2;
t752 = t696 * t709;
t595 = -qJDD(1) * pkin(2) - t709 * pkin(5) + t611;
t556 = pkin(3) * t711 - pkin(6) * t691 + t676 * t737 + t595;
t751 = t702 * t556;
t608 = t613 + t694;
t750 = t702 * t608;
t749 = t703 * t468;
t591 = t703 * t595;
t748 = t703 * t674;
t675 = qJDD(3) - t684;
t747 = t703 * t675;
t743 = t705 * t556;
t742 = t705 * t608;
t741 = t706 * t468;
t592 = t706 * t595;
t665 = -0.2e1 * t727 + t733;
t622 = t706 * t665;
t740 = t706 * t675;
t738 = -pkin(2) * t595 + pkin(5) * t535;
t732 = t696 + t759;
t731 = t699 * t613;
t730 = t700 * t613;
t708 = qJD(3) ^ 2;
t680 = -t708 - t752;
t631 = -t703 * t680 - t740;
t663 = 0.2e1 * t688 + t734;
t729 = -pkin(2) * t663 + pkin(5) * t631 + t591;
t682 = -t691 - t708;
t629 = t706 * t682 - t748;
t728 = pkin(2) * t665 + pkin(5) * t629 - t592;
t469 = t702 * t499 + t705 * t500;
t724 = -t704 * t677 - t707 * t678;
t723 = t699 * t684;
t722 = t700 * t684;
t519 = -t562 * t705 + t702 * t566;
t582 = -t646 - t647;
t455 = -pkin(3) * t582 + pkin(6) * t519 + t469;
t458 = -pkin(6) * t517 - t468;
t477 = -t703 * t517 + t706 * t519;
t721 = -pkin(2) * t582 + pkin(5) * t477 + t706 * t455 + t703 * t458;
t605 = -t693 - t646;
t543 = t705 * t605 - t771;
t561 = (qJD(4) + t695) * t651 + t725;
t481 = -pkin(3) * t561 + pkin(6) * t543 - t743;
t542 = t702 * t605 + t770;
t503 = -t703 * t542 + t706 * t543;
t510 = -pkin(6) * t542 + t751;
t720 = -pkin(2) * t561 + pkin(5) * t503 + t706 * t481 + t703 * t510;
t632 = -t647 - t693;
t568 = -t702 * t632 - t742;
t487 = -pkin(3) * t762 + pkin(6) * t568 + t751;
t567 = t705 * t632 - t750;
t514 = -pkin(6) * t567 + t743;
t521 = -t703 * t567 + t706 * t568;
t719 = -pkin(2) * t762 + pkin(5) * t521 + t706 * t487 + t703 * t514;
t669 = t732 * qJDD(1);
t672 = t691 + t752;
t718 = pkin(2) * t672 + pkin(5) * t669 + t535;
t671 = t707 * qJDD(1) - t704 * t709;
t717 = -pkin(4) * t671 - t704 * g(3);
t534 = t706 * t577 - t703 * t579;
t715 = t707 * t677 - t704 * t678;
t713 = pkin(3) * t542 - t499;
t452 = t706 * t469 - t749;
t462 = -pkin(3) * t556 + pkin(6) * t469;
t712 = -pkin(2) * t556 + pkin(5) * t452 - pkin(6) * t749 + t706 * t462;
t710 = pkin(3) * t567 - t500;
t681 = t691 - t708;
t679 = t708 - t752;
t673 = -t691 + t752;
t670 = t704 * qJDD(1) + t707 * t709;
t659 = t706 * t674;
t658 = t732 * t735;
t645 = -pkin(4) * t670 + t707 * g(3);
t638 = -t647 + t693;
t637 = t646 - t693;
t636 = t706 * t664 - t696 * t735;
t635 = t703 * t711 - t759 * t735;
t634 = t699 * qJDD(3) + t700 * t658;
t633 = -t700 * qJDD(3) + t699 * t658;
t630 = -t703 * t679 + t659;
t628 = t706 * t681 - t747;
t627 = t706 * t680 - t747;
t626 = t706 * t679 + t748;
t625 = t703 * t682 + t659;
t624 = t703 * t681 + t740;
t623 = (t664 + t688) * t703;
t619 = t700 * t669 - t699 * t672;
t618 = t699 * t669 + t700 * t672;
t615 = -t703 * t663 + t622;
t614 = t706 * t663 + t703 * t665;
t610 = t647 - t646;
t604 = t700 * t636 - t723;
t603 = t700 * t635 + t723;
t602 = t699 * t636 + t722;
t601 = t699 * t635 - t722;
t600 = t700 * t630 + t699 * t734;
t599 = t700 * t628 + t699 * t733;
t598 = t699 * t630 - t700 * t734;
t597 = t699 * t628 - t700 * t733;
t590 = t700 * t631 + t699 * t663;
t589 = t700 * t629 - t699 * t665;
t588 = t699 * t631 - t700 * t663;
t587 = t699 * t629 + t700 * t665;
t586 = -pkin(1) * t667 - t612;
t585 = pkin(1) * t668 - t611;
t584 = (-t649 * t705 + t651 * t702) * t695;
t583 = (-t649 * t702 - t651 * t705) * t695;
t580 = -t651 * qJD(4) - t725;
t578 = t700 * t615 + t699 * t673;
t576 = t699 * t615 - t700 * t673;
t572 = t705 * t637 - t750;
t571 = -t702 * t638 + t770;
t570 = t702 * t637 + t742;
t569 = t705 * t638 + t771;
t560 = -pkin(5) * t627 + t592;
t559 = -pkin(5) * t625 + t591;
t550 = pkin(1) * t554;
t549 = t705 * t581 - t651 * t754;
t548 = t702 * t581 + t651 * t753;
t547 = -t702 * t580 + t649 * t753;
t546 = t705 * t580 + t649 * t754;
t545 = -pkin(2) * t627 + t579;
t544 = -pkin(2) * t625 + t577;
t540 = pkin(1) * t697 + qJ(2) * t726;
t537 = -t703 * t583 + t706 * t584;
t536 = t706 * t583 + t703 * t584;
t531 = t700 * t537 + t699 * t694;
t530 = t699 * t537 - t700 * t694;
t529 = pkin(1) * t587 + t728;
t528 = pkin(1) * t588 + t729;
t527 = -t703 * t570 + t706 * t572;
t526 = -t703 * t569 + t706 * t571;
t525 = t706 * t570 + t703 * t572;
t524 = t706 * t569 + t703 * t571;
t523 = -qJ(2) * t618 + t700 * t534;
t522 = qJ(2) * t619 + t699 * t534;
t520 = t706 * t567 + t703 * t568;
t518 = -t705 * t561 - t702 * t762;
t516 = -t702 * t561 + t705 * t762;
t512 = t700 * t535 + t699 * t595;
t511 = t699 * t535 - t700 * t595;
t509 = -t703 * t548 + t706 * t549;
t508 = -t703 * t546 + t706 * t547;
t507 = t706 * t548 + t703 * t549;
t506 = t706 * t546 + t703 * t547;
t504 = pkin(1) * t618 + t718;
t502 = t706 * t542 + t703 * t543;
t497 = t700 * t509 + t731;
t496 = t700 * t508 - t731;
t495 = t699 * t509 - t730;
t494 = t699 * t508 + t730;
t493 = -qJ(2) * t588 - t699 * t545 + t700 * t560;
t492 = -qJ(2) * t587 - t699 * t544 + t700 * t559;
t491 = t700 * t527 - t699 * t562;
t490 = t700 * t526 + t699 * t566;
t489 = t699 * t527 + t700 * t562;
t488 = t699 * t526 - t700 * t566;
t485 = t700 * t521 + t699 * t762;
t484 = t699 * t521 - t700 * t762;
t483 = -pkin(1) * t627 + qJ(2) * t590 + t700 * t545 + t699 * t560;
t482 = -pkin(1) * t625 + qJ(2) * t589 + t700 * t544 + t699 * t559;
t479 = t700 * t503 + t699 * t561;
t478 = t699 * t503 - t700 * t561;
t476 = -t703 * t516 + t706 * t518;
t475 = t706 * t517 + t703 * t519;
t474 = t706 * t516 + t703 * t518;
t472 = pkin(1) * t511 + t738;
t471 = t700 * t476 + t699 * t610;
t470 = t699 * t476 - t700 * t610;
t467 = t700 * t477 + t699 * t582;
t466 = t699 * t477 - t700 * t582;
t465 = -qJ(2) * t511 - (pkin(2) * t699 - pkin(5) * t700) * t534;
t464 = -pkin(2) * t520 - t710;
t463 = -pkin(2) * t502 - t713;
t460 = -pkin(2) * t475 - t757;
t459 = qJ(2) * t512 - (-pkin(2) * t700 - pkin(5) * t699 - pkin(1)) * t534;
t456 = -pkin(5) * t520 - t703 * t487 + t706 * t514;
t453 = -pkin(5) * t502 - t703 * t481 + t706 * t510;
t451 = t703 * t469 + t741;
t449 = t700 * t452 + t699 * t556;
t448 = t699 * t452 - t700 * t556;
t447 = pkin(1) * t484 + t719;
t446 = pkin(1) * t478 + t720;
t445 = -pkin(2) * t451 - t758;
t444 = -qJ(2) * t484 + t700 * t456 - t699 * t464;
t443 = -qJ(2) * t478 + t700 * t453 - t699 * t463;
t442 = -pkin(1) * t520 + qJ(2) * t485 + t699 * t456 + t700 * t464;
t441 = -pkin(5) * t475 - t703 * t455 + t706 * t458;
t440 = -pkin(1) * t502 + qJ(2) * t479 + t699 * t453 + t700 * t463;
t439 = -pkin(5) * t451 - pkin(6) * t741 - t703 * t462;
t438 = pkin(1) * t466 + t721;
t437 = -qJ(2) * t466 + t700 * t441 - t699 * t460;
t436 = pkin(1) * t448 + t712;
t435 = -pkin(1) * t475 + qJ(2) * t467 + t699 * t441 + t700 * t460;
t434 = -qJ(2) * t448 + t700 * t439 - t699 * t445;
t433 = -pkin(1) * t451 + qJ(2) * t449 + t699 * t439 + t700 * t445;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t671, 0, -t670, 0, t717, -t645, -t715, -pkin(4) * t715, 0, 0, t616, 0, -t761, 0, t768, t769, t773, pkin(4) * t773 + qJ(2) * t739 - t704 * t540, -t704 * t602 + t707 * t604, -t704 * t576 + t707 * t578, -t704 * t598 + t707 * t600, -t704 * t601 + t707 * t603, -t704 * t597 + t707 * t599, -t704 * t633 + t707 * t634, t707 * t492 - t704 * t482 - pkin(4) * (t707 * t587 + t704 * t589), t707 * t493 - t704 * t483 - pkin(4) * (t707 * t588 + t704 * t590), t707 * t523 - t704 * t522 - pkin(4) * (t707 * t618 + t704 * t619), t707 * t465 - t704 * t459 - pkin(4) * (t707 * t511 + t704 * t512), -t704 * t495 + t707 * t497, -t704 * t470 + t707 * t471, -t704 * t488 + t707 * t490, -t704 * t494 + t707 * t496, -t704 * t489 + t707 * t491, -t704 * t530 + t707 * t531, t707 * t443 - t704 * t440 - pkin(4) * (t707 * t478 + t704 * t479), t707 * t444 - t704 * t442 - pkin(4) * (t707 * t484 + t704 * t485), t707 * t437 - t704 * t435 - pkin(4) * (t707 * t466 + t704 * t467), t707 * t434 - t704 * t433 - pkin(4) * (t707 * t448 + t704 * t449); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t670, 0, t671, 0, t645, t717, t724, pkin(4) * t724, 0, 0, t761, 0, t616, 0, -t769, t768, t772, pkin(4) * t772 + qJ(2) * t746 + t707 * t540, t707 * t602 + t704 * t604, t707 * t576 + t704 * t578, t707 * t598 + t704 * t600, t707 * t601 + t704 * t603, t707 * t597 + t704 * t599, t707 * t633 + t704 * t634, t704 * t492 + t707 * t482 + pkin(4) * (-t704 * t587 + t707 * t589), t704 * t493 + t707 * t483 + pkin(4) * (-t704 * t588 + t707 * t590), t704 * t523 + t707 * t522 + pkin(4) * (-t704 * t618 + t707 * t619), t704 * t465 + t707 * t459 + pkin(4) * (-t704 * t511 + t707 * t512), t707 * t495 + t704 * t497, t707 * t470 + t704 * t471, t707 * t488 + t704 * t490, t707 * t494 + t704 * t496, t707 * t489 + t704 * t491, t707 * t530 + t704 * t531, t704 * t443 + t707 * t440 + pkin(4) * (-t704 * t478 + t707 * t479), t704 * t444 + t707 * t442 + pkin(4) * (-t704 * t484 + t707 * t485), t704 * t437 + t707 * t435 + pkin(4) * (-t704 * t466 + t707 * t467), t704 * t434 + t707 * t433 + pkin(4) * (-t704 * t448 + t707 * t449); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t677, t678, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t585, t586, 0, -t550, t623, t614, t626, t622, t624, 0, t529, t528, t504, t472, t507, t474, t524, t506, t525, t536, t446, t447, t438, t436; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t709, 0, 0, -g(3), -t677, 0, 0, 0, t668, 0, -t667, 0, t716, t642, t554, qJ(2) * t554, t604, t578, t600, t603, t599, t634, t492, t493, t523, t465, t497, t471, t490, t496, t491, t531, t443, t444, t437, t434; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t709, 0, qJDD(1), 0, g(3), 0, -t678, 0, 0, 0, t667, 0, t668, 0, -t642, t716, t726, t540, t602, t576, t598, t601, t597, t633, t482, t483, t522, t459, t495, t470, t488, t494, t489, t530, t440, t442, t435, t433; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t677, t678, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t585, t586, 0, -t550, t623, t614, t626, t622, t624, 0, t529, t528, t504, t472, t507, t474, t524, t506, t525, t536, t446, t447, t438, t436; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t709, 0, 0, -t697, t611, 0, t636, t615, t630, t635, t628, t658, t559, t560, t534, pkin(5) * t534, t509, t476, t526, t508, t527, t537, t453, t456, t441, t439; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t709, 0, qJDD(1), 0, t697, 0, t612, 0, t684, -t673, -t734, -t684, -t733, -qJDD(3), t544, t545, 0, pkin(2) * t534, -t613, -t610, -t566, t613, t562, -t694, t463, t464, t460, t445; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t611, -t612, 0, 0, t623, t614, t626, t622, t624, 0, t728, t729, t718, t738, t507, t474, t524, t506, t525, t536, t720, t719, t721, t712; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t664, t665, t674, -t688, t681, t688, 0, t595, t577, 0, t549, t518, t571, t547, t572, t584, t510, t514, t458, -pkin(6) * t468; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t727, t663, t679, -t711, t675, -t727, -t595, 0, t579, 0, t548, t516, t569, t546, t570, t583, t481, t487, t455, t462; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t684, t673, t734, t684, t733, qJDD(3), -t577, -t579, 0, 0, t613, t610, t566, -t613, -t562, t694, t713, t710, t757, t758; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t581, -t561, t763, t644, t637, -t644, 0, t556, t499, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t755, t762, t638, t580, t608, -t755, -t556, 0, t500, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t613, t610, t566, -t613, -t562, t694, -t499, -t500, 0, 0;];
m_new_reg = t1;
