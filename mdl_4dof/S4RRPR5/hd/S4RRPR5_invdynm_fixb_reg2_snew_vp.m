% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RRPR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:03
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RRPR5_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRPR5_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRPR5_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRPR5_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRPR5_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4RRPR5_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:03:37
% EndTime: 2019-12-31 17:03:40
% DurationCPUTime: 2.63s
% Computational Cost: add. (5405->263), mult. (7379->311), div. (0->0), fcn. (3984->6), ass. (0->175)
t446 = (qJD(1) + qJD(2));
t444 = t446 ^ 2;
t453 = cos(qJ(2));
t445 = qJDD(1) + qJDD(2);
t450 = sin(qJ(2));
t500 = t450 * t445;
t412 = t453 * t444 + t500;
t493 = t453 * t445;
t414 = t450 * t444 - t493;
t451 = sin(qJ(1));
t454 = cos(qJ(1));
t364 = t454 * t412 - t451 * t414;
t483 = pkin(5) * t412 - t453 * g(3);
t527 = -pkin(5) * t414 + t450 * g(3);
t529 = pkin(4) * t364 + t451 * t527 + t454 * t483;
t479 = t451 * t412 + t454 * t414;
t517 = pkin(4) * t479 + t451 * t483 - t454 * t527;
t430 = t451 * g(1) - t454 * g(2);
t419 = qJDD(1) * pkin(1) + t430;
t431 = t454 * g(1) + t451 * g(2);
t457 = qJD(1) ^ 2;
t420 = -t457 * pkin(1) - t431;
t373 = -t453 * t419 + t450 * t420;
t374 = t450 * t419 + t453 * t420;
t480 = t450 * t373 + t453 * t374;
t328 = t453 * t373 - t450 * t374;
t492 = t454 * t328;
t533 = -t451 * t480 + t492;
t499 = t451 * t328;
t532 = t454 * t480 + t499;
t531 = pkin(1) * t412;
t530 = pkin(1) * t414;
t462 = (2 * qJD(3) * t446) + t374;
t509 = t445 * qJ(3);
t347 = -t444 * pkin(2) + t462 + t509;
t511 = t445 * pkin(2);
t465 = qJDD(3) + t373 - t511;
t355 = -t444 * qJ(3) + t465;
t321 = t450 * t347 - t453 * t355;
t481 = t453 * t347 + t450 * t355;
t526 = -t451 * t321 + t454 * t481;
t525 = t454 * t321 + t451 * t481;
t449 = sin(qJ(4));
t452 = cos(qJ(4));
t459 = -t445 * pkin(6) + t355;
t335 = t449 * g(3) + t452 * t459;
t336 = t452 * g(3) - t449 * t459;
t314 = t452 * t335 - t449 * t336;
t516 = -pkin(2) - pkin(6);
t515 = pkin(3) * t314;
t339 = -t444 * pkin(6) + t347;
t514 = pkin(3) * t339;
t447 = t449 ^ 2;
t448 = t452 ^ 2;
t488 = t447 + t448;
t411 = t488 * t445;
t513 = pkin(3) * t411;
t512 = pkin(6) * t314;
t508 = t447 * t444;
t507 = t448 * t444;
t505 = t449 * t339;
t429 = t449 * t444 * t452;
t421 = qJDD(4) + t429;
t504 = t449 * t421;
t422 = qJDD(4) - t429;
t503 = t449 * t422;
t502 = t449 * t445;
t501 = t450 * t411;
t337 = t452 * t339;
t496 = t452 * t421;
t495 = t452 * t422;
t434 = t452 * t445;
t494 = t453 * t411;
t489 = -pkin(2) * t355 + qJ(3) * t347;
t487 = qJD(4) * t446;
t486 = t449 * t487;
t485 = t452 * t487;
t456 = qJD(4) ^ 2;
t428 = -t456 - t507;
t382 = t452 * t428 - t504;
t482 = -pkin(6) * t382 + t337;
t477 = -t451 * t430 - t454 * t431;
t476 = t450 * t429;
t475 = t453 * t429;
t474 = -pkin(2) * t314 + qJ(3) * t339 - t512;
t424 = t454 * qJDD(1) - t451 * t457;
t473 = -pkin(4) * t424 - t451 * g(3);
t406 = 0.2e1 * t485 + t502;
t472 = pkin(3) * t406 + t337;
t409 = t434 - 0.2e1 * t486;
t471 = pkin(3) * t409 - t505;
t426 = -t456 - t508;
t380 = t449 * t426 + t495;
t470 = -pkin(6) * t380 + t505;
t315 = -t449 * t335 - t452 * t336;
t469 = t454 * t430 - t451 * t431;
t468 = -pkin(2) * t382 + qJ(3) * t409 + t482;
t467 = -pkin(3) * t382 - t336;
t466 = pkin(6) * t411 - t314;
t464 = -pkin(2) * t380 + qJ(3) * t406 + t470;
t463 = -t511 + t465;
t416 = t488 * t444;
t461 = pkin(2) * t411 - qJ(3) * t416 + t466;
t460 = 0.2e1 * t509 + t462;
t458 = -pkin(3) * t380 - t335;
t455 = pkin(1) * g(3);
t427 = t456 - t507;
t425 = -t456 + t508;
t423 = t451 * qJDD(1) + t454 * t457;
t417 = (-t447 + t448) * t444;
t408 = t434 - t486;
t407 = -t485 - t502;
t402 = -pkin(4) * t423 + t454 * g(3);
t401 = t488 * t487;
t390 = t453 * qJDD(4) - t450 * t401;
t389 = t450 * qJDD(4) + t453 * t401;
t388 = t449 * t408 + t448 * t487;
t387 = t452 * t407 + t447 * t487;
t386 = -t449 * t428 - t496;
t385 = -t449 * t427 + t495;
t384 = t452 * t426 - t503;
t383 = t452 * t425 - t504;
t381 = t452 * t427 + t503;
t379 = t449 * t425 + t496;
t376 = (t408 - t486) * t452;
t375 = (-t407 + t485) * t449;
t367 = -t453 * t416 - t501;
t362 = -t450 * t416 + t494;
t361 = -t452 * t406 - t449 * t409;
t360 = -t449 * t406 + t452 * t409;
t359 = t450 * t381 + t452 * t493;
t358 = t450 * t379 - t449 * t493;
t357 = -t453 * t381 + t450 * t434;
t356 = -t453 * t379 - t449 * t500;
t354 = t450 * t387 - t475;
t353 = t450 * t388 + t475;
t352 = -t453 * t387 - t476;
t351 = -t453 * t388 + t476;
t349 = -t373 - t530;
t348 = -t374 - t531;
t344 = t450 * t382 + t453 * t409;
t343 = t450 * t380 + t453 * t406;
t342 = -t453 * t382 + t450 * t409;
t341 = -t453 * t380 + t450 * t406;
t334 = t460 + t531;
t333 = t463 + t530;
t331 = t450 * t360 + t453 * t417;
t330 = -t453 * t360 + t450 * t417;
t325 = pkin(1) * t328;
t324 = pkin(5) * t480 + t455;
t319 = -pkin(5) * t321 + (-pkin(2) * t450 + qJ(3) * t453) * g(3);
t318 = pkin(5) * t481 + t455 + (pkin(2) * t453 + qJ(3) * t450) * g(3);
t317 = -qJ(3) * t386 - t467;
t316 = -qJ(3) * t384 - t458;
t312 = t516 * t384 + t472;
t311 = t516 * t386 + t471;
t310 = pkin(3) * t416 + t315;
t309 = t450 * t314 + t453 * t339;
t308 = -t453 * t314 + t450 * t339;
t307 = pkin(1) * t342 + t468;
t306 = pkin(1) * t341 + t464;
t305 = pkin(1) * t321 + t489;
t304 = -pkin(3) * t494 - pkin(5) * t362 + t450 * t310;
t303 = -pkin(3) * t501 + pkin(5) * t367 - t453 * t310;
t302 = pkin(1) * t362 + t461;
t301 = -qJ(3) * t315 + t515;
t300 = t516 * t315 + t514;
t299 = -pkin(5) * t342 - t450 * t311 + t453 * t317;
t298 = -pkin(5) * t341 - t450 * t312 + t453 * t316;
t297 = -pkin(1) * t386 + pkin(5) * t344 + t453 * t311 + t450 * t317;
t296 = -pkin(1) * t384 + pkin(5) * t343 + t453 * t312 + t450 * t316;
t295 = pkin(1) * t308 + t474;
t294 = -pkin(5) * t308 - t450 * t300 + t453 * t301;
t293 = -pkin(1) * t315 + pkin(5) * t309 + t453 * t300 + t450 * t301;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t424, 0, -t423, 0, t473, -t402, -t469, -pkin(4) * t469, 0, 0, -t479, 0, -t364, 0, t517, t529, t533, pkin(4) * t533 + pkin(5) * t492 - t451 * t324, 0, t479, t364, 0, 0, 0, -t525, -t517, -t529, -pkin(4) * t525 - t451 * t318 + t454 * t319, -t451 * t351 + t454 * t353, -t451 * t330 + t454 * t331, -t451 * t357 + t454 * t359, -t451 * t352 + t454 * t354, -t451 * t356 + t454 * t358, -t451 * t389 + t454 * t390, t454 * t298 - t451 * t296 - pkin(4) * (t454 * t341 + t451 * t343), t454 * t299 - t451 * t297 - pkin(4) * (t454 * t342 + t451 * t344), t454 * t304 - t451 * t303 - pkin(4) * (t454 * t362 + t451 * t367), t454 * t294 - t451 * t293 - pkin(4) * (t454 * t308 + t451 * t309); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t423, 0, t424, 0, t402, t473, t477, pkin(4) * t477, 0, 0, t364, 0, -t479, 0, -t529, t517, t532, pkin(4) * t532 + pkin(5) * t499 + t454 * t324, 0, -t364, t479, 0, 0, 0, t526, t529, -t517, pkin(4) * t526 + t454 * t318 + t451 * t319, t454 * t351 + t451 * t353, t454 * t330 + t451 * t331, t454 * t357 + t451 * t359, t454 * t352 + t451 * t354, t454 * t356 + t451 * t358, t454 * t389 + t451 * t390, t451 * t298 + t454 * t296 + pkin(4) * (-t451 * t341 + t454 * t343), t451 * t299 + t454 * t297 + pkin(4) * (-t451 * t342 + t454 * t344), t451 * t304 + t454 * t303 + pkin(4) * (-t451 * t362 + t454 * t367), t451 * t294 + t454 * t293 + pkin(4) * (-t451 * t308 + t454 * t309); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t430, t431, 0, 0, 0, 0, 0, 0, 0, t445, t349, t348, 0, -t325, t445, 0, 0, 0, 0, 0, 0, t333, t334, t305, t376, t361, t385, t375, t383, 0, t306, t307, t302, t295; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t457, 0, 0, -g(3), -t430, 0, 0, 0, -t414, 0, -t412, 0, -t527, t483, t328, pkin(5) * t328, 0, t414, t412, 0, 0, 0, -t321, t527, -t483, t319, t353, t331, t359, t354, t358, t390, t298, t299, t304, t294; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t457, 0, qJDD(1), 0, g(3), 0, -t431, 0, 0, 0, t412, 0, -t414, 0, -t483, -t527, t480, t324, 0, -t412, t414, 0, 0, 0, t481, t483, t527, t318, t351, t330, t357, t352, t356, t389, t296, t297, t303, t293; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t430, t431, 0, 0, 0, 0, 0, 0, 0, t445, t349, t348, 0, -t325, t445, 0, 0, 0, 0, 0, 0, t333, t334, t305, t376, t361, t385, t375, t383, 0, t306, t307, t302, t295; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t445, 0, -t444, 0, 0, -g(3), t373, 0, 0, -t445, t444, 0, 0, 0, t355, 0, g(3), qJ(3) * g(3), t429, t417, t434, -t429, -t502, qJDD(4), t316, t317, -t513, t301; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t444, 0, t445, 0, g(3), 0, t374, 0, 0, -t444, -t445, 0, 0, 0, t347, -g(3), 0, pkin(2) * g(3), -t388, -t360, -t381, -t387, -t379, t401, t312, t311, -t310, t300; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t445, -t373, -t374, 0, 0, t445, 0, 0, 0, 0, 0, 0, t463, t460, t489, t376, t361, t385, t375, t383, 0, t464, t468, t461, t474; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t445, 0, 0, 0, 0, 0, 0, t355, t347, 0, t376, t361, t385, t375, t383, 0, t470, t482, t466, -t512; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t445, -t444, 0, 0, 0, -t355, 0, -g(3), 0, -t429, -t417, -t434, t429, t502, -qJDD(4), t458, t467, t513, -t515; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t444, t445, 0, 0, 0, -t347, g(3), 0, 0, t388, t360, t381, t387, t379, -t401, pkin(6) * t384 - t472, pkin(6) * t386 - t471, t310, pkin(6) * t315 - t514; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t408, -t406, t422, t486, t425, -t486, 0, t339, -t335, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t485, t409, t427, t407, t421, -t485, -t339, 0, -t336, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t429, t417, t434, -t429, -t502, qJDD(4), t335, t336, 0, 0;];
m_new_reg = t1;
