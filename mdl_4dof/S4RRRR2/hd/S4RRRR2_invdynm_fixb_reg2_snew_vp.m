% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RRRR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d3,d4]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:23
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RRRR2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRRR2_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRRR2_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRRR2_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRRR2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RRRR2_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:23:27
% EndTime: 2019-12-31 17:23:32
% DurationCPUTime: 5.60s
% Computational Cost: add. (24888->401), mult. (33076->563), div. (0->0), fcn. (20890->8), ass. (0->280)
t743 = qJD(1) + qJD(2);
t739 = t743 ^ 2;
t751 = cos(qJ(2));
t741 = qJDD(1) + qJDD(2);
t747 = sin(qJ(2));
t789 = t747 * t741;
t710 = t751 * t739 + t789;
t689 = pkin(5) * t710 - t751 * g(3);
t748 = sin(qJ(1));
t752 = cos(qJ(1));
t782 = t751 * t741;
t713 = t747 * t739 - t782;
t761 = t752 * t710 - t748 * t713;
t813 = pkin(5) * t713 - t747 * g(3);
t822 = pkin(4) * t761 + t752 * t689 - t748 * t813;
t812 = t748 * t710 + t752 * t713;
t821 = pkin(4) * t812 + t748 * t689 + t752 * t813;
t730 = t752 * g(1) + t748 * g(2);
t754 = qJD(1) ^ 2;
t717 = -t754 * pkin(1) - t730;
t729 = t748 * g(1) - t752 * g(2);
t759 = qJDD(1) * pkin(1) + t729;
t663 = t747 * t717 - t751 * t759;
t664 = t751 * t717 + t747 * t759;
t771 = t747 * t663 + t751 * t664;
t616 = t751 * t663 - t747 * t664;
t781 = t752 * t616;
t819 = -t748 * t771 + t781;
t788 = t748 * t616;
t818 = t752 * t771 + t788;
t745 = sin(qJ(4));
t749 = cos(qJ(4));
t750 = cos(qJ(3));
t746 = sin(qJ(3));
t798 = t743 * t746;
t692 = -t749 * t750 * t743 + t745 * t798;
t694 = (t745 * t750 + t746 * t749) * t743;
t655 = t694 * t692;
t740 = qJDD(3) + qJDD(4);
t809 = -t655 + t740;
t815 = t745 * t809;
t814 = t749 * t809;
t653 = -t739 * pkin(2) + t741 * pkin(6) + t664;
t793 = t746 * t653;
t632 = t750 * g(3) + t793;
t633 = -t746 * g(3) + t750 * t653;
t582 = t746 * t632 + t750 * t633;
t779 = qJD(3) * t743;
t732 = t750 * t779;
t790 = t746 * t741;
t704 = t732 + t790;
t772 = t746 * t779;
t783 = t750 * t741;
t757 = t772 - t783;
t620 = -t692 * qJD(4) + t749 * t704 - t745 * t757;
t742 = qJD(3) + qJD(4);
t685 = t742 * t692;
t808 = -t685 + t620;
t770 = t745 * t704 + t749 * t757;
t597 = (qJD(4) - t742) * t694 + t770;
t690 = t692 ^ 2;
t691 = t694 ^ 2;
t738 = t742 ^ 2;
t807 = t750 ^ 2;
t802 = t739 * t746;
t590 = qJDD(3) * pkin(3) - t704 * pkin(7) - t793 + (pkin(3) * t802 + pkin(7) * t779 - g(3)) * t750;
t720 = qJD(3) * pkin(3) - pkin(7) * t798;
t734 = t807 * t739;
t591 = -pkin(3) * t734 - t757 * pkin(7) - qJD(3) * t720 + t633;
t553 = -t749 * t590 + t745 * t591;
t554 = t745 * t590 + t749 * t591;
t515 = -t749 * t553 + t745 * t554;
t806 = pkin(3) * t515;
t601 = t685 + t620;
t557 = -t597 * t745 - t749 * t601;
t805 = pkin(3) * t557;
t801 = t742 * t694;
t800 = t742 * t745;
t799 = t742 * t749;
t744 = t746 ^ 2;
t797 = t744 * t739;
t652 = -t741 * pkin(2) - t739 * pkin(6) + t663;
t595 = t757 * pkin(3) - pkin(7) * t734 + t720 * t798 + t652;
t796 = t745 * t595;
t645 = t655 + t740;
t795 = t745 * t645;
t794 = t746 * t515;
t636 = t746 * t652;
t728 = t750 * t802;
t718 = qJDD(3) + t728;
t792 = t746 * t718;
t719 = qJDD(3) - t728;
t791 = t746 * t719;
t787 = t749 * t595;
t786 = t749 * t645;
t785 = t750 * t515;
t637 = t750 * t652;
t705 = -0.2e1 * t772 + t783;
t665 = t750 * t705;
t784 = t750 * t719;
t780 = -pkin(2) * t652 + pkin(6) * t582;
t777 = t744 + t807;
t776 = t747 * t655;
t775 = t751 * t655;
t753 = qJD(3) ^ 2;
t724 = -t753 - t797;
t676 = -t746 * t724 - t784;
t703 = 0.2e1 * t732 + t790;
t774 = -pkin(2) * t703 + pkin(6) * t676 + t636;
t726 = -t734 - t753;
t674 = t750 * t726 - t792;
t773 = pkin(2) * t705 + pkin(6) * t674 - t637;
t516 = t745 * t553 + t749 * t554;
t769 = -t748 * t729 - t752 * t730;
t768 = t747 * t728;
t767 = t751 * t728;
t559 = -t597 * t749 + t745 * t601;
t623 = -t690 - t691;
t500 = -pkin(3) * t623 + pkin(7) * t559 + t516;
t503 = -pkin(7) * t557 - t515;
t521 = -t746 * t557 + t750 * t559;
t766 = -pkin(2) * t623 + pkin(6) * t521 + t750 * t500 + t746 * t503;
t639 = -t738 - t690;
t584 = t749 * t639 - t815;
t596 = (qJD(4) + t742) * t694 + t770;
t526 = -pkin(3) * t596 + pkin(7) * t584 - t787;
t583 = t745 * t639 + t814;
t545 = -t746 * t583 + t750 * t584;
t552 = -pkin(7) * t583 + t796;
t765 = -pkin(2) * t596 + pkin(6) * t545 + t750 * t526 + t746 * t552;
t677 = -t691 - t738;
t605 = -t745 * t677 - t786;
t530 = -pkin(3) * t808 + pkin(7) * t605 + t796;
t604 = t749 * t677 - t795;
t561 = -pkin(7) * t604 + t787;
t564 = -t746 * t604 + t750 * t605;
t764 = -pkin(2) * t808 + pkin(6) * t564 + t750 * t530 + t746 * t561;
t708 = t777 * t741;
t714 = t734 + t797;
t763 = pkin(2) * t714 + pkin(6) * t708 + t582;
t722 = t752 * qJDD(1) - t748 * t754;
t762 = -pkin(4) * t722 - t748 * g(3);
t581 = t750 * t632 - t746 * t633;
t760 = t752 * t729 - t748 * t730;
t758 = pkin(3) * t583 - t553;
t497 = t750 * t516 - t794;
t508 = -pkin(3) * t595 + pkin(7) * t516;
t756 = -pkin(2) * t595 + pkin(6) * t497 - pkin(7) * t794 + t750 * t508;
t755 = pkin(3) * t604 - t554;
t725 = t734 - t753;
t723 = t753 - t797;
t721 = t748 * qJDD(1) + t752 * t754;
t715 = -t734 + t797;
t709 = t750 * t718;
t701 = -pkin(4) * t721 + t752 * g(3);
t700 = t777 * t779;
t683 = -t691 + t738;
t682 = t690 - t738;
t681 = t747 * qJDD(3) + t751 * t700;
t680 = -t751 * qJDD(3) + t747 * t700;
t679 = t750 * t704 - t744 * t779;
t678 = t746 * t757 - t807 * t779;
t675 = -t746 * t723 + t709;
t673 = t750 * t725 - t791;
t672 = t750 * t724 - t791;
t671 = t750 * t723 + t792;
t670 = t746 * t726 + t709;
t669 = t746 * t725 + t784;
t666 = (t704 + t732) * t746;
t660 = t751 * t708 - t747 * t714;
t658 = t747 * t708 + t751 * t714;
t657 = -t746 * t703 + t665;
t656 = t750 * t703 + t746 * t705;
t654 = t691 - t690;
t651 = t751 * t675 + t746 * t789;
t650 = t751 * t673 + t747 * t783;
t649 = t747 * t675 - t746 * t782;
t648 = t747 * t673 - t750 * t782;
t643 = t751 * t679 - t768;
t642 = t751 * t678 + t768;
t641 = t747 * t679 + t767;
t640 = t747 * t678 - t767;
t635 = -pkin(1) * t710 - t664;
t634 = -pkin(1) * t713 - t663;
t631 = t751 * t676 + t747 * t703;
t630 = t751 * t674 - t747 * t705;
t629 = t747 * t676 - t751 * t703;
t628 = t747 * t674 + t751 * t705;
t627 = (-t692 * t749 + t694 * t745) * t742;
t626 = (-t692 * t745 - t694 * t749) * t742;
t622 = t751 * t657 + t747 * t715;
t621 = t747 * t657 - t751 * t715;
t619 = -t694 * qJD(4) - t770;
t613 = pkin(1) * t616;
t612 = pkin(1) * g(3) + pkin(5) * t771;
t611 = t749 * t682 - t795;
t610 = -t745 * t683 + t814;
t609 = t745 * t682 + t786;
t608 = t749 * t683 + t815;
t607 = -pkin(6) * t672 + t637;
t606 = -pkin(6) * t670 + t636;
t603 = -pkin(2) * t672 + t633;
t602 = -pkin(2) * t670 + t632;
t589 = t749 * t620 - t694 * t800;
t588 = t745 * t620 + t694 * t799;
t587 = -t745 * t619 + t692 * t799;
t586 = t749 * t619 + t692 * t800;
t578 = -t746 * t626 + t750 * t627;
t577 = t750 * t626 + t746 * t627;
t576 = t751 * t578 + t747 * t740;
t575 = t747 * t578 - t751 * t740;
t574 = pkin(1) * t628 + t773;
t573 = pkin(1) * t629 + t774;
t572 = -pkin(5) * t658 + t751 * t581;
t571 = pkin(5) * t660 + t747 * t581;
t570 = t751 * t582 + t747 * t652;
t569 = t747 * t582 - t751 * t652;
t568 = -t746 * t609 + t750 * t611;
t567 = -t746 * t608 + t750 * t610;
t566 = t750 * t609 + t746 * t611;
t565 = t750 * t608 + t746 * t610;
t563 = t750 * t604 + t746 * t605;
t558 = -t749 * t596 - t745 * t808;
t556 = -t745 * t596 + t749 * t808;
t555 = pkin(1) * t658 + t763;
t549 = -t746 * t588 + t750 * t589;
t548 = -t746 * t586 + t750 * t587;
t547 = t750 * t588 + t746 * t589;
t546 = t750 * t586 + t746 * t587;
t544 = t750 * t583 + t746 * t584;
t542 = -pkin(5) * t629 - t747 * t603 + t751 * t607;
t541 = -pkin(5) * t628 - t747 * t602 + t751 * t606;
t540 = t751 * t549 + t776;
t539 = t751 * t548 - t776;
t538 = t747 * t549 - t775;
t537 = t747 * t548 + t775;
t536 = -pkin(1) * t672 + pkin(5) * t631 + t751 * t603 + t747 * t607;
t535 = -pkin(1) * t670 + pkin(5) * t630 + t751 * t602 + t747 * t606;
t534 = t751 * t568 - t747 * t597;
t533 = t751 * t567 + t747 * t601;
t532 = t747 * t568 + t751 * t597;
t531 = t747 * t567 - t751 * t601;
t529 = t751 * t564 + t747 * t808;
t528 = t747 * t564 - t751 * t808;
t524 = t751 * t545 + t747 * t596;
t523 = t747 * t545 - t751 * t596;
t522 = pkin(1) * t569 + t780;
t520 = -t746 * t556 + t750 * t558;
t519 = t750 * t557 + t746 * t559;
t518 = t750 * t556 + t746 * t558;
t514 = -pkin(5) * t569 - (pkin(2) * t747 - pkin(6) * t751) * t581;
t513 = t751 * t520 + t747 * t654;
t512 = t747 * t520 - t751 * t654;
t511 = t751 * t521 + t747 * t623;
t510 = t747 * t521 - t751 * t623;
t509 = -pkin(2) * t563 - t755;
t506 = -pkin(2) * t544 - t758;
t505 = pkin(5) * t570 - (-pkin(2) * t751 - pkin(6) * t747 - pkin(1)) * t581;
t504 = -pkin(2) * t519 - t805;
t501 = -pkin(6) * t563 - t746 * t530 + t750 * t561;
t498 = -pkin(6) * t544 - t746 * t526 + t750 * t552;
t496 = t746 * t516 + t785;
t494 = t751 * t497 + t747 * t595;
t493 = t747 * t497 - t751 * t595;
t492 = pkin(1) * t528 + t764;
t491 = pkin(1) * t523 + t765;
t490 = -pkin(2) * t496 - t806;
t489 = -pkin(5) * t528 + t751 * t501 - t747 * t509;
t488 = -pkin(5) * t523 + t751 * t498 - t747 * t506;
t487 = -pkin(1) * t563 + pkin(5) * t529 + t747 * t501 + t751 * t509;
t486 = -pkin(6) * t519 - t746 * t500 + t750 * t503;
t485 = -pkin(6) * t496 - pkin(7) * t785 - t746 * t508;
t484 = -pkin(1) * t544 + pkin(5) * t524 + t747 * t498 + t751 * t506;
t483 = pkin(1) * t510 + t766;
t482 = -pkin(5) * t510 + t751 * t486 - t747 * t504;
t481 = pkin(1) * t493 + t756;
t480 = -pkin(1) * t519 + pkin(5) * t511 + t747 * t486 + t751 * t504;
t479 = -pkin(5) * t493 + t751 * t485 - t747 * t490;
t478 = -pkin(1) * t496 + pkin(5) * t494 + t747 * t485 + t751 * t490;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t722, 0, -t721, 0, t762, -t701, -t760, -pkin(4) * t760, 0, 0, -t812, 0, -t761, 0, t821, t822, t819, pkin(4) * t819 + pkin(5) * t781 - t748 * t612, -t748 * t641 + t752 * t643, -t748 * t621 + t752 * t622, -t748 * t649 + t752 * t651, -t748 * t640 + t752 * t642, -t748 * t648 + t752 * t650, -t748 * t680 + t752 * t681, t752 * t541 - t748 * t535 - pkin(4) * (t752 * t628 + t748 * t630), t752 * t542 - t748 * t536 - pkin(4) * (t752 * t629 + t748 * t631), t752 * t572 - t748 * t571 - pkin(4) * (t752 * t658 + t748 * t660), t752 * t514 - t748 * t505 - pkin(4) * (t752 * t569 + t748 * t570), -t748 * t538 + t752 * t540, -t748 * t512 + t752 * t513, -t748 * t531 + t752 * t533, -t748 * t537 + t752 * t539, -t748 * t532 + t752 * t534, -t748 * t575 + t752 * t576, t752 * t488 - t748 * t484 - pkin(4) * (t752 * t523 + t748 * t524), t752 * t489 - t748 * t487 - pkin(4) * (t752 * t528 + t748 * t529), t752 * t482 - t748 * t480 - pkin(4) * (t752 * t510 + t748 * t511), t752 * t479 - t748 * t478 - pkin(4) * (t752 * t493 + t748 * t494); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t721, 0, t722, 0, t701, t762, t769, pkin(4) * t769, 0, 0, t761, 0, -t812, 0, -t822, t821, t818, pkin(4) * t818 + pkin(5) * t788 + t752 * t612, t752 * t641 + t748 * t643, t752 * t621 + t748 * t622, t752 * t649 + t748 * t651, t752 * t640 + t748 * t642, t752 * t648 + t748 * t650, t752 * t680 + t748 * t681, t748 * t541 + t752 * t535 + pkin(4) * (-t748 * t628 + t752 * t630), t748 * t542 + t752 * t536 + pkin(4) * (-t748 * t629 + t752 * t631), t748 * t572 + t752 * t571 + pkin(4) * (-t748 * t658 + t752 * t660), t748 * t514 + t752 * t505 + pkin(4) * (-t748 * t569 + t752 * t570), t752 * t538 + t748 * t540, t752 * t512 + t748 * t513, t752 * t531 + t748 * t533, t752 * t537 + t748 * t539, t752 * t532 + t748 * t534, t752 * t575 + t748 * t576, t748 * t488 + t752 * t484 + pkin(4) * (-t748 * t523 + t752 * t524), t748 * t489 + t752 * t487 + pkin(4) * (-t748 * t528 + t752 * t529), t748 * t482 + t752 * t480 + pkin(4) * (-t748 * t510 + t752 * t511), t748 * t479 + t752 * t478 + pkin(4) * (-t748 * t493 + t752 * t494); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t729, t730, 0, 0, 0, 0, 0, 0, 0, t741, t634, t635, 0, -t613, t666, t656, t671, t665, t669, 0, t574, t573, t555, t522, t547, t518, t565, t546, t566, t577, t491, t492, t483, t481; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t754, 0, 0, -g(3), -t729, 0, 0, 0, -t713, 0, -t710, 0, t813, t689, t616, pkin(5) * t616, t643, t622, t651, t642, t650, t681, t541, t542, t572, t514, t540, t513, t533, t539, t534, t576, t488, t489, t482, t479; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t754, 0, qJDD(1), 0, g(3), 0, -t730, 0, 0, 0, t710, 0, -t713, 0, -t689, t813, t771, t612, t641, t621, t649, t640, t648, t680, t535, t536, t571, t505, t538, t512, t531, t537, t532, t575, t484, t487, t480, t478; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t729, t730, 0, 0, 0, 0, 0, 0, 0, t741, t634, t635, 0, -t613, t666, t656, t671, t665, t669, 0, t574, t573, t555, t522, t547, t518, t565, t546, t566, t577, t491, t492, t483, t481; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t741, 0, -t739, 0, 0, -g(3), t663, 0, t679, t657, t675, t678, t673, t700, t606, t607, t581, pkin(6) * t581, t549, t520, t567, t548, t568, t578, t498, t501, t486, t485; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t739, 0, t741, 0, g(3), 0, t664, 0, t728, -t715, -t790, -t728, -t783, -qJDD(3), t602, t603, 0, pkin(2) * t581, -t655, -t654, -t601, t655, t597, -t740, t506, t509, t504, t490; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t741, -t663, -t664, 0, 0, t666, t656, t671, t665, t669, 0, t773, t774, t763, t780, t547, t518, t565, t546, t566, t577, t765, t764, t766, t756; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t704, t705, t718, -t732, t725, t732, 0, t652, t632, 0, t589, t558, t610, t587, t611, t627, t552, t561, t503, -pkin(7) * t515; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t772, t703, t723, -t757, t719, -t772, -t652, 0, t633, 0, t588, t556, t608, t586, t609, t626, t526, t530, t500, t508; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t728, t715, t790, t728, t783, qJDD(3), -t632, -t633, 0, 0, t655, t654, t601, -t655, -t597, t740, t758, t755, t805, t806; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t620, -t596, t809, t685, t682, -t685, 0, t595, t553, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t801, t808, t683, t619, t645, -t801, -t595, 0, t554, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t655, t654, t601, -t655, -t597, t740, -t553, -t554, 0, 0;];
m_new_reg = t1;
