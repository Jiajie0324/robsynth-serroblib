% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S4RRRR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d3,d4]';
%
% Output:
% f_new_reg [(3*5)x(5*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:23
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S4RRRR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRRR2_invdynf_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRRR2_invdynf_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRRR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRRR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RRRR2_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:23:32
% EndTime: 2019-12-31 17:23:33
% DurationCPUTime: 1.17s
% Computational Cost: add. (4614->146), mult. (6131->204), div. (0->0), fcn. (3943->8), ass. (0->120)
t922 = qJD(1) + qJD(2);
t919 = t922 ^ 2;
t920 = qJDD(1) + qJDD(2);
t927 = sin(qJ(2));
t931 = cos(qJ(2));
t899 = t927 * t919 - t931 * t920;
t928 = sin(qJ(1));
t932 = cos(qJ(1));
t937 = -t931 * t919 - t927 * t920;
t959 = t928 * t899 + t932 * t937;
t958 = t932 * t899 - t928 * t937;
t921 = qJD(3) + qJD(4);
t955 = qJD(4) + t921;
t925 = sin(qJ(4));
t929 = cos(qJ(4));
t930 = cos(qJ(3));
t926 = sin(qJ(3));
t949 = t922 * t926;
t885 = -t929 * t930 * t922 + t925 * t949;
t954 = t885 ^ 2;
t887 = (t925 * t930 + t926 * t929) * t922;
t953 = t887 ^ 2;
t952 = t921 ^ 2;
t951 = t887 * t885;
t950 = t919 * t926;
t924 = t930 ^ 2;
t948 = t924 * t919;
t913 = -t932 * g(1) - t928 * g(2);
t934 = qJD(1) ^ 2;
t902 = -t934 * pkin(1) + t913;
t912 = t928 * g(1) - t932 * g(2);
t936 = qJDD(1) * pkin(1) + t912;
t878 = t931 * t902 + t927 * t936;
t874 = -t919 * pkin(2) + t920 * pkin(6) + t878;
t947 = t926 * t874;
t946 = t926 * t920;
t923 = t926 ^ 2;
t945 = t923 + t924;
t944 = qJD(3) * t922;
t943 = qJD(4) - t921;
t942 = -qJDD(3) - qJDD(4);
t941 = t926 * t944;
t940 = t930 * t944;
t868 = -t926 * g(3) + t930 * t874;
t891 = t940 + t946;
t916 = t930 * t920;
t938 = -t916 + t941;
t939 = -t925 * t891 - t929 * t938;
t877 = -t927 * t902 + t931 * t936;
t873 = -t920 * pkin(2) - t919 * pkin(6) - t877;
t935 = -t929 * t891 + t925 * t938;
t933 = qJD(3) ^ 2;
t911 = t930 * t950;
t909 = -t933 - t948;
t908 = -t923 * t919 - t933;
t907 = -t928 * qJDD(1) - t932 * t934;
t906 = t932 * qJDD(1) - t928 * t934;
t905 = qJD(3) * pkin(3) - pkin(7) * t949;
t904 = -qJDD(3) + t911;
t903 = qJDD(3) + t911;
t901 = t945 * t919;
t896 = t945 * t920;
t892 = t916 - 0.2e1 * t941;
t890 = 0.2e1 * t940 + t946;
t883 = -t952 - t953;
t882 = t930 * t904 - t926 * t908;
t881 = -t926 * t903 + t930 * t909;
t880 = t926 * t904 + t930 * t908;
t879 = t930 * t903 + t926 * t909;
t876 = t931 * t896 - t927 * t901;
t875 = t927 * t896 + t931 * t901;
t872 = t942 - t951;
t871 = -t942 - t951;
t870 = -t952 - t954;
t867 = -t930 * g(3) - t947;
t866 = t931 * t882 + t927 * t890;
t865 = t931 * t881 - t927 * t892;
t864 = t927 * t882 - t931 * t890;
t863 = t927 * t881 + t931 * t892;
t862 = -t953 - t954;
t861 = -t927 * t877 + t931 * t878;
t860 = t931 * t877 + t927 * t878;
t859 = t929 * t872 - t925 * t883;
t858 = t925 * t872 + t929 * t883;
t857 = t943 * t885 + t935;
t856 = -t955 * t885 - t935;
t855 = -t943 * t887 + t939;
t854 = t955 * t887 - t939;
t853 = t938 * pkin(3) - pkin(7) * t948 + t905 * t949 + t873;
t852 = -pkin(3) * t948 - t938 * pkin(7) - qJD(3) * t905 + t868;
t851 = qJDD(3) * pkin(3) - t891 * pkin(7) - t947 + (pkin(3) * t950 + pkin(7) * t944 - g(3)) * t930;
t850 = t929 * t870 - t925 * t871;
t849 = t925 * t870 + t929 * t871;
t848 = -t926 * t867 + t930 * t868;
t847 = t930 * t867 + t926 * t868;
t846 = t931 * t848 + t927 * t873;
t845 = t927 * t848 - t931 * t873;
t844 = -t926 * t858 + t930 * t859;
t843 = t930 * t858 + t926 * t859;
t842 = t929 * t855 - t925 * t857;
t841 = t925 * t855 + t929 * t857;
t840 = t925 * t851 + t929 * t852;
t839 = t929 * t851 - t925 * t852;
t838 = -t926 * t849 + t930 * t850;
t837 = t930 * t849 + t926 * t850;
t836 = t931 * t844 + t927 * t856;
t835 = t927 * t844 - t931 * t856;
t834 = t931 * t838 + t927 * t854;
t833 = t927 * t838 - t931 * t854;
t832 = -t926 * t841 + t930 * t842;
t831 = t930 * t841 + t926 * t842;
t830 = -t925 * t839 + t929 * t840;
t829 = t929 * t839 + t925 * t840;
t828 = t931 * t832 + t927 * t862;
t827 = t927 * t832 - t931 * t862;
t826 = -t926 * t829 + t930 * t830;
t825 = t930 * t829 + t926 * t830;
t824 = t931 * t826 + t927 * t853;
t823 = t927 * t826 - t931 * t853;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t907, -t906, 0, -t928 * t912 + t932 * t913, 0, 0, 0, 0, 0, 0, t959, t958, 0, -t928 * t860 + t932 * t861, 0, 0, 0, 0, 0, 0, -t928 * t863 + t932 * t865, -t928 * t864 + t932 * t866, -t928 * t875 + t932 * t876, -t928 * t845 + t932 * t846, 0, 0, 0, 0, 0, 0, -t928 * t833 + t932 * t834, -t928 * t835 + t932 * t836, -t928 * t827 + t932 * t828, -t928 * t823 + t932 * t824; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t906, t907, 0, t932 * t912 + t928 * t913, 0, 0, 0, 0, 0, 0, -t958, t959, 0, t932 * t860 + t928 * t861, 0, 0, 0, 0, 0, 0, t932 * t863 + t928 * t865, t932 * t864 + t928 * t866, t932 * t875 + t928 * t876, t932 * t845 + t928 * t846, 0, 0, 0, 0, 0, 0, t932 * t833 + t928 * t834, t932 * t835 + t928 * t836, t932 * t827 + t928 * t828, t932 * t823 + t928 * t824; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t879, t880, 0, t847, 0, 0, 0, 0, 0, 0, t837, t843, t831, t825; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t934, -qJDD(1), 0, t913, 0, 0, 0, 0, 0, 0, t937, t899, 0, t861, 0, 0, 0, 0, 0, 0, t865, t866, t876, t846, 0, 0, 0, 0, 0, 0, t834, t836, t828, t824; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t934, 0, t912, 0, 0, 0, 0, 0, 0, -t899, t937, 0, t860, 0, 0, 0, 0, 0, 0, t863, t864, t875, t845, 0, 0, 0, 0, 0, 0, t833, t835, t827, t823; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t879, t880, 0, t847, 0, 0, 0, 0, 0, 0, t837, t843, t831, t825; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t919, -t920, 0, t878, 0, 0, 0, 0, 0, 0, t881, t882, t896, t848, 0, 0, 0, 0, 0, 0, t838, t844, t832, t826; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t920, -t919, 0, t877, 0, 0, 0, 0, 0, 0, t892, -t890, t901, -t873, 0, 0, 0, 0, 0, 0, -t854, -t856, -t862, -t853; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t879, t880, 0, t847, 0, 0, 0, 0, 0, 0, t837, t843, t831, t825; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t909, t904, t916, t868, 0, 0, 0, 0, 0, 0, t850, t859, t842, t830; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t903, t908, -t946, t867, 0, 0, 0, 0, 0, 0, t849, t858, t841, t829; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t892, t890, -t901, t873, 0, 0, 0, 0, 0, 0, t854, t856, t862, t853; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t870, t872, t855, t840; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t871, t883, t857, t839; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t854, t856, t862, t853;];
f_new_reg = t1;
