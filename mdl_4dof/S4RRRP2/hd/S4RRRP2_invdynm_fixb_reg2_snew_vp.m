% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RRRP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d3]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:13
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RRRP2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRRP2_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRRP2_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRRP2_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRRP2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4RRRP2_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:13:14
% EndTime: 2019-12-31 17:13:17
% DurationCPUTime: 3.15s
% Computational Cost: add. (8385->301), mult. (12297->366), div. (0->0), fcn. (6466->6), ass. (0->225)
t580 = qJD(1) + qJD(2);
t578 = t580 ^ 2;
t588 = cos(qJ(2));
t579 = qJDD(1) + qJDD(2);
t585 = sin(qJ(2));
t629 = t585 * t579;
t540 = t578 * t588 + t629;
t523 = pkin(5) * t540 - t588 * g(3);
t586 = sin(qJ(1));
t589 = cos(qJ(1));
t625 = t588 * t579;
t543 = t578 * t585 - t625;
t598 = t540 * t589 - t543 * t586;
t654 = pkin(5) * t543 - t585 * g(3);
t661 = pkin(4) * t598 + t589 * t523 - t586 * t654;
t653 = t540 * t586 + t543 * t589;
t660 = pkin(4) * t653 + t586 * t523 + t589 * t654;
t562 = g(1) * t589 + g(2) * t586;
t591 = qJD(1) ^ 2;
t548 = -pkin(1) * t591 - t562;
t561 = g(1) * t586 - g(2) * t589;
t596 = qJDD(1) * pkin(1) + t561;
t502 = t548 * t585 - t588 * t596;
t503 = t588 * t548 + t585 * t596;
t608 = t502 * t585 + t503 * t588;
t457 = t502 * t588 - t503 * t585;
t624 = t589 * t457;
t658 = -t586 * t608 + t624;
t628 = t586 * t457;
t657 = t589 * t608 + t628;
t584 = sin(qJ(3));
t587 = cos(qJ(3));
t560 = t587 * t578 * t584;
t550 = qJDD(3) + t560;
t647 = pkin(3) * t550;
t490 = -pkin(2) * t578 + pkin(6) * t579 + t503;
t632 = t584 * t490;
t637 = t587 * g(3);
t473 = t632 + t637;
t474 = -g(3) * t584 + t490 * t587;
t431 = t473 * t584 + t474 * t587;
t539 = t587 * t550;
t582 = t587 ^ 2;
t573 = t582 * t578;
t590 = qJD(3) ^ 2;
t558 = -t573 - t590;
t509 = t558 * t584 + t539;
t650 = pkin(2) * t509;
t581 = t584 ^ 2;
t634 = t581 * t578;
t556 = -t590 - t634;
t551 = qJDD(3) - t560;
t630 = t584 * t551;
t511 = t556 * t587 - t630;
t649 = pkin(2) * t511;
t618 = qJD(3) * t580;
t568 = t587 * t618;
t571 = t584 * t579;
t533 = t571 + t568;
t592 = t637 + (t533 - t568) * qJ(4) - t647;
t617 = (qJD(4) * t580);
t606 = t490 + (2 * t617);
t435 = t584 * t606 + t592;
t648 = pkin(3) * t435;
t631 = t584 * t550;
t513 = t558 * t587 - t631;
t567 = t584 * t618;
t572 = t587 * t579;
t535 = t572 - 0.2e1 * t567;
t469 = t513 * t585 + t535 * t588;
t471 = t513 * t588 - t535 * t585;
t646 = pkin(4) * (t469 * t589 + t471 * t586);
t626 = t587 * t551;
t515 = -t556 * t584 - t626;
t532 = t571 + 0.2e1 * t568;
t470 = t515 * t585 - t532 * t588;
t472 = t515 * t588 + t532 * t585;
t645 = pkin(4) * (t470 * t589 + t472 * t586);
t619 = t581 + t582;
t538 = t619 * t579;
t544 = t573 + t634;
t495 = t538 * t585 + t544 * t588;
t497 = t538 * t588 - t544 * t585;
t644 = pkin(4) * (t495 * t589 + t497 * t586);
t643 = pkin(5) * t469;
t642 = pkin(5) * t470;
t641 = pkin(5) * t495;
t640 = pkin(6) * t509;
t639 = pkin(6) * t511;
t635 = t580 * t584;
t633 = t584 * t435;
t489 = -pkin(2) * t579 - pkin(6) * t578 + t502;
t477 = t584 * t489;
t627 = t587 * t435;
t478 = t587 * t489;
t623 = -pkin(2) * t489 + pkin(6) * t431;
t622 = pkin(2) * t535 + pkin(6) * t513;
t621 = -pkin(2) * t532 + pkin(6) * t515;
t620 = pkin(2) * t544 + pkin(6) * t538;
t616 = pkin(3) * t571;
t615 = t584 * t629;
t614 = t584 * t625;
t613 = t477 + t621;
t612 = -t478 + t622;
t611 = t587 * t617;
t610 = -pkin(1) * t509 + pkin(5) * t471;
t609 = -pkin(1) * t511 + pkin(5) * t472;
t607 = -t561 * t586 - t562 * t589;
t605 = t585 * t560;
t604 = t588 * t560;
t565 = 0.2e1 * t611;
t534 = t572 - t567;
t549 = qJD(3) * pkin(3) - qJ(4) * t635;
t599 = pkin(3) * t573 - qJ(4) * t534 + qJD(3) * t549 - t474;
t436 = t565 - t599;
t420 = pkin(3) * t544 + qJ(4) * t572 + t436;
t432 = (qJ(4) * t579 + t606) * t584 + t592;
t603 = t420 * t587 + t432 * t584 + t620;
t446 = -pkin(3) * t534 - qJ(4) * t573 + t549 * t635 + qJDD(4) + t489;
t434 = -qJ(4) * t556 + t446;
t501 = -pkin(3) * t532 - qJ(4) * t551;
t602 = t434 * t584 + t501 * t587 + t621;
t601 = t620 + t431;
t553 = qJDD(1) * t589 - t586 * t591;
t600 = -pkin(4) * t553 - g(3) * t586;
t430 = t473 * t587 - t474 * t584;
t597 = t561 * t589 - t562 * t586;
t403 = t436 * t587 + t633;
t405 = -pkin(3) * t446 + qJ(4) * t436;
t595 = -pkin(2) * t446 + pkin(6) * t403 + qJ(4) * t633 + t405 * t587;
t422 = pkin(3) * t535 + qJ(4) * t558 - t446;
t594 = -qJ(4) * t631 + t422 * t587 + t622;
t593 = pkin(3) * t556 + t599;
t557 = t573 - t590;
t555 = t590 - t634;
t552 = qJDD(1) * t586 + t589 * t591;
t545 = -t573 + t634;
t530 = -pkin(4) * t552 + g(3) * t589;
t529 = t619 * t618;
t519 = qJDD(3) * t585 + t529 * t588;
t518 = -qJDD(3) * t588 + t529 * t585;
t517 = t533 * t587 - t581 * t618;
t516 = -t534 * t584 - t582 * t618;
t514 = -t555 * t584 + t539;
t512 = t557 * t587 - t630;
t510 = t555 * t587 + t631;
t508 = t557 * t584 + t626;
t505 = (t533 + t568) * t584;
t504 = (t534 - t567) * t587;
t494 = pkin(1) * t495;
t493 = pkin(5) * t497;
t492 = -t532 * t584 + t535 * t587;
t491 = t532 * t587 + t535 * t584;
t488 = t514 * t588 + t615;
t487 = t512 * t588 + t572 * t585;
t486 = t514 * t585 - t614;
t485 = t512 * t585 - t587 * t625;
t483 = t517 * t588 - t605;
t482 = t516 * t588 + t605;
t481 = t517 * t585 + t604;
t480 = t516 * t585 - t604;
t476 = -pkin(1) * t540 - t503;
t475 = -pkin(1) * t543 - t502;
t468 = pkin(1) * t470;
t467 = pkin(1) * t469;
t462 = -t518 * t586 + t519 * t589;
t461 = t518 * t589 + t519 * t586;
t460 = t492 * t588 + t545 * t585;
t459 = t492 * t585 - t545 * t588;
t454 = pkin(1) * t457;
t453 = pkin(1) * g(3) + pkin(5) * t608;
t452 = t478 - t639;
t451 = t477 - t640;
t450 = t474 - t649;
t449 = t473 - t650;
t447 = pkin(4) * (-t495 * t586 + t497 * t589);
t444 = -t486 * t586 + t488 * t589;
t443 = -t485 * t586 + t487 * t589;
t442 = t486 * t589 + t488 * t586;
t441 = t485 * t589 + t487 * t586;
t440 = -t481 * t586 + t483 * t589;
t439 = -t480 * t586 + t482 * t589;
t438 = t481 * t589 + t483 * t586;
t437 = t480 * t589 + t482 * t586;
t424 = pkin(4) * (-t470 * t586 + t472 * t589);
t423 = pkin(4) * (-t469 * t586 + t471 * t589);
t418 = -t459 * t586 + t460 * t589;
t417 = t459 * t589 + t460 * t586;
t416 = t565 - t593 - t649;
t415 = t435 - t647 - t650;
t414 = t467 + t612;
t413 = t468 + t613;
t412 = t430 * t588 - t641;
t411 = t430 * t585 + t493;
t410 = t431 * t588 + t489 * t585;
t409 = t431 * t585 - t489 * t588;
t408 = -qJ(4) * t539 - t422 * t584 - t640;
t407 = t434 * t587 - t501 * t584 - t639;
t406 = t494 + t601;
t402 = t436 * t584 - t627;
t400 = -t450 * t585 + t452 * t588 - t642;
t399 = -t449 * t585 + t451 * t588 - t643;
t398 = -t420 * t584 + t432 * t587;
t397 = t467 + t594;
t396 = t468 + t602;
t395 = t450 * t588 + t452 * t585 + t609;
t394 = t449 * t588 + t451 * t585 + t610;
t393 = -pkin(3) * t615 + t398 * t588 - t641;
t392 = pkin(3) * t614 + t398 * t585 + t493;
t391 = t403 * t588 + t446 * t585;
t390 = t403 * t585 - t446 * t588;
t389 = -pkin(2) * t402 + t648;
t388 = t494 + t603;
t387 = pkin(1) * t409 + t623;
t386 = t407 * t588 - t416 * t585 - t642;
t385 = t408 * t588 - t415 * t585 - t643;
t384 = -pkin(5) * t409 - (pkin(2) * t585 - pkin(6) * t588) * t430;
t383 = t407 * t585 + t416 * t588 + t609;
t382 = t408 * t585 + t415 * t588 + t610;
t381 = pkin(5) * t410 - (-pkin(2) * t588 - pkin(6) * t585 - pkin(1)) * t430;
t380 = -pkin(6) * t402 + qJ(4) * t627 - t405 * t584;
t379 = pkin(1) * t390 + t595;
t378 = -pkin(5) * t390 + t380 * t588 - t389 * t585;
t377 = -pkin(1) * t402 + pkin(5) * t391 + t380 * t585 + t389 * t588;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t553, 0, -t552, 0, t600, -t530, -t597, -pkin(4) * t597, 0, 0, -t653, 0, -t598, 0, t660, t661, t658, pkin(4) * t658 + pkin(5) * t624 - t586 * t453, t440, t418, t444, t439, t443, t462, -t394 * t586 + t399 * t589 - t646, -t395 * t586 + t400 * t589 - t645, -t411 * t586 + t412 * t589 - t644, t589 * t384 - t586 * t381 - pkin(4) * (t409 * t589 + t410 * t586), t440, t418, t444, t439, t443, t462, -t382 * t586 + t385 * t589 - t646, -t383 * t586 + t386 * t589 - t645, -t392 * t586 + t393 * t589 - t644, t589 * t378 - t586 * t377 - pkin(4) * (t390 * t589 + t391 * t586); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t552, 0, t553, 0, t530, t600, t607, pkin(4) * t607, 0, 0, t598, 0, -t653, 0, -t661, t660, t657, pkin(4) * t657 + pkin(5) * t628 + t589 * t453, t438, t417, t442, t437, t441, t461, t394 * t589 + t399 * t586 + t423, t395 * t589 + t400 * t586 + t424, t411 * t589 + t412 * t586 + t447, t586 * t384 + t589 * t381 + pkin(4) * (-t409 * t586 + t410 * t589), t438, t417, t442, t437, t441, t461, t382 * t589 + t385 * t586 + t423, t383 * t589 + t386 * t586 + t424, t392 * t589 + t393 * t586 + t447, t586 * t378 + t589 * t377 + pkin(4) * (-t390 * t586 + t391 * t589); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t561, t562, 0, 0, 0, 0, 0, 0, 0, t579, t475, t476, 0, -t454, t505, t491, t510, t504, t508, 0, t414, t413, t406, t387, t505, t491, t510, t504, t508, 0, t397, t396, t388, t379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t591, 0, 0, -g(3), -t561, 0, 0, 0, -t543, 0, -t540, 0, t654, t523, t457, pkin(5) * t457, t483, t460, t488, t482, t487, t519, t399, t400, t412, t384, t483, t460, t488, t482, t487, t519, t385, t386, t393, t378; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t591, 0, qJDD(1), 0, g(3), 0, -t562, 0, 0, 0, t540, 0, -t543, 0, -t523, t654, t608, t453, t481, t459, t486, t480, t485, t518, t394, t395, t411, t381, t481, t459, t486, t480, t485, t518, t382, t383, t392, t377; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t561, t562, 0, 0, 0, 0, 0, 0, 0, t579, t475, t476, 0, -t454, t505, t491, t510, t504, t508, 0, t414, t413, t406, t387, t505, t491, t510, t504, t508, 0, t397, t396, t388, t379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t579, 0, -t578, 0, 0, -g(3), t502, 0, t517, t492, t514, t516, t512, t529, t451, t452, t430, pkin(6) * t430, t517, t492, t514, t516, t512, t529, t408, t407, t398, t380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t578, 0, t579, 0, g(3), 0, t503, 0, t560, -t545, -t571, -t560, -t572, -qJDD(3), t449, t450, 0, pkin(2) * t430, t560, -t545, -t571, -t560, -t572, -qJDD(3), t415, t416, t616, t389; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t579, -t502, -t503, 0, 0, t505, t491, t510, t504, t508, 0, t612, t613, t601, t623, t505, t491, t510, t504, t508, 0, t594, t602, t603, t595; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t533, t535, t550, -t568, t557, t568, 0, t489, t473, 0, t533, t535, t550, -t568, t557, t568, -qJ(4) * t550, t434, t432, qJ(4) * t435; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t567, t532, t555, t534, t551, -t567, -t489, 0, t474, 0, t567, t532, t555, t534, t551, -t567, t422, t501, t420, t405; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t560, t545, t571, t560, t572, qJDD(3), -t473, -t474, 0, 0, -t560, t545, t571, t560, t572, qJDD(3), -0.2e1 * t584 * t617 - t592 - t632 + t647, t593 - 0.2e1 * t611, -t616, -t648; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t533, t535, t550, -t568, t557, t568, 0, t446, t435, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t567, t532, t555, t534, t551, -t567, -t446, 0, t436, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t560, t545, t571, t560, t572, qJDD(3), -t435, -t436, 0, 0;];
m_new_reg = t1;
