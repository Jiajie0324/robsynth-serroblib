% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4PRPR7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d2,d4,theta1]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:26
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4PRPR7_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4PRPR7_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4PRPR7_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4PRPR7_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4PRPR7_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4PRPR7_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:25:58
% EndTime: 2019-12-31 16:26:00
% DurationCPUTime: 2.15s
% Computational Cost: add. (3206->265), mult. (5878->308), div. (0->0), fcn. (3514->6), ass. (0->173)
t369 = sin(pkin(6));
t376 = cos(qJ(2));
t378 = qJD(2) ^ 2;
t374 = sin(qJ(2));
t410 = t374 * qJDD(2);
t345 = t376 * t378 + t410;
t370 = cos(pkin(6));
t349 = t369 * g(1) - t370 * g(2);
t406 = -pkin(4) * t345 + t376 * t349;
t454 = t369 * t406;
t453 = t370 * t406;
t409 = t376 * qJDD(2);
t346 = t374 * t378 - t409;
t308 = pkin(4) * t346 - t374 * t349;
t452 = t369 * t308;
t451 = t370 * t308;
t368 = qJDD(2) * pkin(2);
t350 = t370 * g(1) + t369 * g(2);
t367 = g(3) - qJDD(1);
t328 = -t374 * t350 + t376 * t367;
t387 = -qJDD(3) - t328;
t304 = -t378 * qJ(3) - t368 - t387;
t300 = -qJDD(2) * pkin(5) + t304;
t373 = sin(qJ(4));
t375 = cos(qJ(4));
t272 = -t375 * t300 - t373 * t349;
t273 = t373 * t300 - t375 * t349;
t450 = -t375 * t272 + t373 * t273;
t332 = t370 * t349;
t449 = -t369 * t350 + t332;
t329 = -t376 * t350 - t374 * t367;
t380 = (2 * qJD(3) * qJD(2)) + t329;
t413 = qJDD(2) * qJ(3);
t303 = -t378 * pkin(2) + t380 + t413;
t297 = -t378 * pkin(5) + t303;
t444 = pkin(2) + pkin(5);
t448 = qJ(3) * t297 - t444 * t450;
t377 = qJD(4) ^ 2;
t365 = t373 ^ 2;
t434 = t365 * t378;
t354 = -t377 - t434;
t355 = t375 * t378 * t373;
t352 = qJDD(4) - t355;
t418 = t375 * t352;
t315 = t373 * t354 + t418;
t414 = qJD(2) * qJD(4);
t407 = t375 * t414;
t411 = t373 * qJDD(2);
t338 = 0.2e1 * t407 + t411;
t423 = t373 * t297;
t447 = qJ(3) * t338 - t444 * t315 + t423;
t286 = t375 * t297;
t366 = t375 ^ 2;
t433 = t366 * t378;
t394 = -t377 - t433;
t351 = qJDD(4) + t355;
t422 = t373 * t351;
t317 = t375 * t394 - t422;
t360 = t375 * qJDD(2);
t408 = t373 * t414;
t340 = t360 - 0.2e1 * t408;
t446 = qJ(3) * t340 - t444 * t317 + t286;
t415 = t365 + t366;
t344 = t415 * qJDD(2);
t347 = t415 * t378;
t445 = -qJ(3) * t347 + t444 * t344 - t450;
t443 = pkin(1) * t345;
t442 = pkin(1) * t346;
t441 = pkin(3) * t450;
t440 = pkin(3) * t297;
t439 = pkin(3) * t344;
t437 = qJ(1) * t345;
t436 = qJ(1) * t346;
t432 = t369 * t345;
t431 = t369 * t346;
t430 = t369 * t349;
t428 = t369 * t367;
t427 = t370 * t345;
t426 = t370 * t346;
t425 = t370 * t367;
t421 = t373 * t352;
t420 = t374 * t344;
t419 = t375 * t351;
t417 = t376 * t344;
t412 = t370 * qJDD(2);
t305 = -t374 * t347 + t417;
t248 = -pkin(1) * t305 - t445;
t306 = -t376 * t347 - t420;
t404 = qJ(1) * t306 + t248;
t379 = t380 + 0.2e1 * t413;
t284 = -t379 - t443;
t403 = -t284 + t436;
t384 = -0.2e1 * t368 - t387;
t285 = -t384 - t442;
t402 = t285 + t437;
t298 = t329 + t443;
t401 = t298 + t436;
t299 = t328 + t442;
t400 = -t299 + t437;
t397 = t376 * t303 + t374 * t304;
t396 = t374 * t328 + t376 * t329;
t395 = -t370 * t350 - t430;
t393 = t377 - t433;
t392 = t374 * t355;
t391 = t376 * t355;
t390 = -pkin(2) * t304 + qJ(3) * t303;
t389 = pkin(3) * t338 + t286;
t388 = pkin(3) * t340 - t423;
t259 = t373 * t272 + t375 * t273;
t266 = t374 * t303 - t376 * t304;
t278 = t376 * t328 - t374 * t329;
t385 = -pkin(3) * t315 + t272;
t382 = -t407 - t411;
t381 = -pkin(3) * t317 + t273;
t359 = t369 * qJDD(2);
t353 = -t377 + t434;
t348 = (-t365 + t366) * t378;
t341 = pkin(1) * t349;
t339 = t360 - t408;
t336 = t415 * t414;
t327 = t376 * qJDD(4) - t374 * t336;
t326 = t374 * qJDD(4) + t376 * t336;
t325 = t373 * t339 + t366 * t414;
t324 = t365 * t414 + t375 * t382;
t322 = -t373 * t394 - t419;
t321 = -t373 * t393 + t418;
t320 = (t339 - t408) * t375;
t319 = t375 * t354 - t421;
t318 = t375 * t353 - t422;
t316 = t375 * t393 + t421;
t314 = t373 * t353 + t419;
t313 = (-t382 + t407) * t373;
t302 = -t375 * t338 - t373 * t340;
t301 = -t373 * t338 + t375 * t340;
t294 = t374 * t324 - t391;
t293 = t374 * t325 + t391;
t292 = -t376 * t324 - t392;
t291 = -t376 * t325 + t392;
t290 = t374 * t316 + t375 * t409;
t289 = t374 * t314 - t373 * t409;
t288 = -t376 * t316 + t374 * t360;
t287 = -t376 * t314 - t373 * t410;
t283 = t374 * t317 + t376 * t340;
t282 = t374 * t315 + t376 * t338;
t281 = -t376 * t317 + t374 * t340;
t280 = -t376 * t315 + t374 * t338;
t275 = t374 * t301 + t376 * t348;
t274 = -t376 * t301 + t374 * t348;
t269 = pkin(4) * t396 + t341;
t264 = -pkin(4) * t266 + (-pkin(2) * t374 + qJ(3) * t376) * t349;
t263 = -qJ(3) * t322 - t381;
t262 = -qJ(3) * t319 - t385;
t261 = -t444 * t319 + t389;
t260 = -t444 * t322 + t388;
t257 = pkin(4) * t397 + t341 + (pkin(2) * t376 + qJ(3) * t374) * t349;
t256 = pkin(3) * t347 + t259;
t255 = -pkin(1) * t266 - t390;
t254 = t376 * t297 + t374 * t450;
t253 = t374 * t297 - t376 * t450;
t252 = -pkin(1) * t281 - t446;
t251 = -pkin(1) * t280 - t447;
t250 = -pkin(3) * t417 - pkin(4) * t305 + t374 * t256;
t249 = -pkin(3) * t420 + pkin(4) * t306 - t376 * t256;
t247 = -qJ(3) * t259 + t441;
t246 = -t444 * t259 + t440;
t245 = -pkin(4) * t281 - t374 * t260 + t376 * t263;
t244 = -pkin(4) * t280 - t374 * t261 + t376 * t262;
t243 = -pkin(1) * t322 + pkin(4) * t283 + t376 * t260 + t374 * t263;
t242 = -pkin(1) * t319 + pkin(4) * t282 + t376 * t261 + t374 * t262;
t241 = -pkin(1) * t253 - t448;
t240 = -pkin(4) * t253 - t374 * t246 + t376 * t247;
t239 = -pkin(1) * t259 + pkin(4) * t254 + t376 * t246 + t374 * t247;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t428, -t425, -t449, -qJ(1) * t449, 0, 0, -t426, 0, -t427, t359, t400 * t369 + t451, -t401 * t369 - t453, t370 * t278, -qJ(1) * (t369 * t396 + t332) - (t369 * pkin(1) - t370 * pkin(4)) * t278, t359, t426, t427, 0, 0, 0, -t370 * t266, -t369 * t402 - t451, t369 * t403 + t453, t370 * t264 - t369 * t255 - qJ(1) * (t369 * t397 + t332), t370 * t293 + t369 * t320, t370 * t275 + t369 * t302, t370 * t290 + t369 * t321, t370 * t294 + t369 * t313, t370 * t289 + t369 * t318, t370 * t327, t370 * t244 - t369 * t251 - qJ(1) * (t369 * t282 - t370 * t319), t370 * t245 - t369 * t252 - qJ(1) * (t369 * t283 - t370 * t322), t370 * t250 - t369 * t404, t370 * t240 - t369 * t241 - qJ(1) * (t369 * t254 - t370 * t259); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t425, -t428, t395, qJ(1) * t395, 0, 0, -t431, 0, -t432, -t412, -t400 * t370 + t452, t401 * t370 - t454, t369 * t278, qJ(1) * (t370 * t396 - t430) - (-t370 * pkin(1) - t369 * pkin(4)) * t278, -t412, t431, t432, 0, 0, 0, -t369 * t266, t370 * t402 - t452, -t370 * t403 + t454, t369 * t264 + t370 * t255 + qJ(1) * (t370 * t397 - t430), t369 * t293 - t370 * t320, t369 * t275 - t370 * t302, t369 * t290 - t370 * t321, t369 * t294 - t370 * t313, t369 * t289 - t370 * t318, t369 * t327, t369 * t244 + t370 * t251 + qJ(1) * (t370 * t282 + t369 * t319), t369 * t245 + t370 * t252 + qJ(1) * (t370 * t283 + t369 * t322), t369 * t250 + t370 * t404, t369 * t240 + t370 * t241 + qJ(1) * (t370 * t254 + t369 * t259); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t349, t350, 0, 0, 0, 0, t345, 0, -t346, 0, t406, t308, t396, t269, 0, -t345, t346, 0, 0, 0, t397, -t406, -t308, t257, t291, t274, t288, t292, t287, t326, t242, t243, t249, t239; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t367, -t349, 0, 0, 0, -t346, 0, -t345, 0, t308, -t406, t278, pkin(4) * t278, 0, t346, t345, 0, 0, 0, -t266, -t308, t406, t264, t293, t275, t290, t294, t289, t327, t244, t245, t250, t240; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t367, 0, -t350, 0, 0, 0, 0, 0, 0, -qJDD(2), t299, t298, 0, pkin(1) * t278, -qJDD(2), 0, 0, 0, 0, 0, 0, t285, t284, t255, -t320, -t302, -t321, -t313, -t318, 0, t251, t252, t248, t241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t349, t350, 0, 0, 0, 0, t345, 0, -t346, 0, t406, t308, t396, t269, 0, -t345, t346, 0, 0, 0, t397, -t406, -t308, t257, t291, t274, t288, t292, t287, t326, t242, t243, t249, t239; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t378, 0, 0, -t349, t328, 0, 0, -qJDD(2), t378, 0, 0, 0, t304, 0, t349, qJ(3) * t349, t355, t348, t360, -t355, -t411, qJDD(4), t262, t263, -t439, t247; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t378, 0, qJDD(2), 0, t349, 0, t329, 0, 0, -t378, -qJDD(2), 0, 0, 0, t303, -t349, 0, pkin(2) * t349, -t325, -t301, -t316, -t324, -t314, t336, t261, t260, -t256, t246; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t328, -t329, 0, 0, qJDD(2), 0, 0, 0, 0, 0, 0, t384, t379, t390, t320, t302, t321, t313, t318, 0, t447, t446, t445, t448; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, 0, 0, 0, 0, 0, t304, t303, 0, t320, t302, t321, t313, t318, 0, -pkin(5) * t315 + t423, -pkin(5) * t317 + t286, pkin(5) * t344 - t450, -pkin(5) * t450; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t378, 0, 0, 0, -t304, 0, -t349, 0, -t355, -t348, -t360, t355, t411, -qJDD(4), t385, t381, t439, -t441; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t378, qJDD(2), 0, 0, 0, -t303, t349, 0, 0, t325, t301, t316, t324, t314, -t336, pkin(5) * t319 - t389, pkin(5) * t322 - t388, t256, pkin(5) * t259 - t440; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t339, -t338, t352, t408, t353, -t408, 0, t297, t272, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t407, t340, t393, t382, t351, -t407, -t297, 0, t273, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t355, t348, t360, -t355, -t411, qJDD(4), -t272, -t273, 0, 0;];
m_new_reg = t1;
