% Calculate inertial parameters regressor of coriolis matrix for
% S4RRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d3,d4]';
% 
% Output:
% cmat_reg [(4*4)x(4*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:24
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S4RRRR3_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRRR3_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRRR3_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [4x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RRRR3_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:24:40
% EndTime: 2019-12-31 17:24:45
% DurationCPUTime: 2.73s
% Computational Cost: add. (4478->196), mult. (8883->269), div. (0->0), fcn. (9413->6), ass. (0->168)
t185 = sin(qJ(4));
t186 = sin(qJ(3));
t187 = sin(qJ(2));
t188 = cos(qJ(2));
t289 = cos(qJ(3));
t169 = t186 * t188 + t289 * t187;
t291 = -pkin(6) - pkin(5);
t174 = t291 * t187;
t175 = t291 * t188;
t216 = -t289 * t174 - t186 * t175;
t295 = -t169 * pkin(7) - t216;
t303 = t185 * t295;
t221 = -t303 / 0.2e1;
t171 = t289 * t175;
t262 = t186 * t174;
t139 = -t171 + t262;
t167 = t186 * t187 - t289 * t188;
t102 = -t167 * pkin(7) + t139;
t288 = cos(qJ(4));
t313 = t288 * t102;
t92 = -t313 / 0.2e1;
t324 = t221 + t92;
t326 = 0.2e1 * t324;
t325 = -t288 / 0.2e1;
t302 = t288 * t295;
t314 = t185 * t102;
t317 = t302 - t314;
t323 = t317 * t185;
t238 = qJD(2) + qJD(3);
t322 = qJD(3) + qJD(4);
t307 = -t302 / 0.2e1;
t308 = t307 + t314 / 0.2e1;
t321 = 0.2e1 * t308;
t320 = t313 / 0.2e1;
t211 = t302 / 0.2e1;
t21 = t307 + t211;
t319 = t21 * qJD(1);
t318 = t21 * qJD(4);
t60 = t313 + t303;
t316 = qJD(2) * t326;
t315 = qJD(2) * t321;
t229 = t288 * t186;
t234 = t289 * t185;
t160 = (t229 + t234) * pkin(2);
t310 = t160 / 0.2e1;
t122 = t288 * t167 + t185 * t169;
t244 = t122 * qJD(4);
t35 = -t238 * t122 - t244;
t159 = t288 * t169;
t264 = t185 * t167;
t296 = t159 - t264;
t301 = t122 ^ 2 - t296 ^ 2;
t306 = t301 * qJD(1);
t304 = t122 * t296 * qJD(1);
t300 = t238 * t216;
t298 = t238 * t296;
t140 = t185 * pkin(3);
t293 = t140 * qJD(4);
t210 = -t159 / 0.2e1;
t213 = t288 * t289;
t263 = t185 * t186;
t161 = (t213 - t263) * pkin(2);
t290 = -t161 / 0.2e1;
t212 = t171 / 0.2e1;
t287 = pkin(2) * t186;
t285 = t169 * pkin(3);
t284 = t187 * pkin(2);
t279 = pkin(3) * qJD(3);
t278 = qJD(2) * pkin(2);
t182 = -t188 * pkin(2) - pkin(1);
t144 = t167 * pkin(3) + t182;
t145 = t284 + t285;
t8 = t144 * t145;
t274 = t8 * qJD(1);
t9 = t144 * t285;
t273 = t9 * qJD(1);
t214 = t289 * pkin(2) + pkin(3);
t197 = t185 * t214;
t155 = pkin(2) * t229 + t197;
t269 = t155 * t296;
t176 = t288 * t214;
t154 = pkin(2) * t263 - t176;
t270 = t154 * t122;
t189 = -t270 / 0.2e1 - t269 / 0.2e1 + t296 * t310 + t122 * t290;
t230 = t288 * t122;
t271 = t296 * t185;
t191 = (-t271 / 0.2e1 + t230 / 0.2e1) * pkin(3);
t11 = t191 - t189;
t272 = t11 * qJD(1);
t268 = t167 * t169;
t36 = t182 * t284;
t259 = t36 * qJD(1);
t69 = t144 * t296;
t37 = t145 * t122 + t69;
t258 = t37 * qJD(1);
t70 = t144 * t122;
t38 = t145 * t296 - t70;
t257 = t38 * qJD(1);
t48 = -t122 * t285 - t69;
t256 = t48 * qJD(1);
t49 = -t285 * t296 + t70;
t255 = t49 * qJD(1);
t98 = t167 ^ 2 - t169 ^ 2;
t253 = t98 * qJD(1);
t251 = qJD(1) * t144;
t250 = qJD(1) * t182;
t249 = qJD(1) * t188;
t248 = qJD(3) * t182;
t110 = t167 * t284 + t182 * t169;
t247 = t110 * qJD(1);
t111 = -t182 * t167 + t169 * t284;
t246 = t111 * qJD(1);
t120 = t210 + t159 / 0.2e1;
t245 = t120 * qJD(1);
t243 = t296 * qJD(4);
t135 = t212 - t171 / 0.2e1;
t242 = t135 * qJD(1);
t179 = -t187 ^ 2 + t188 ^ 2;
t241 = t179 * qJD(1);
t240 = t187 * qJD(2);
t239 = t188 * qJD(2);
t237 = pkin(1) * t187 * qJD(1);
t236 = pkin(1) * t249;
t227 = t122 * t251;
t226 = t296 * t251;
t225 = qJD(1) * t268;
t224 = t167 * t250;
t223 = t169 * t250;
t222 = t187 * t239;
t220 = t289 * qJD(2);
t219 = t289 * qJD(3);
t218 = t288 * qJD(3);
t217 = t288 * qJD(4);
t129 = t238 * t169;
t190 = (t290 - t154 / 0.2e1) * t60 + (-t155 / 0.2e1 + t310) * t317;
t193 = (t323 / 0.2e1 + t60 * t325) * pkin(3);
t1 = t193 + t190;
t66 = t154 * t160 + t155 * t161;
t206 = -t1 * qJD(1) + t66 * qJD(2);
t192 = t303 / 0.2e1;
t19 = t221 + t192;
t205 = -t19 * qJD(1) - t140 * qJD(2);
t198 = -t176 / 0.2e1 + pkin(3) * t325;
t199 = -t213 / 0.2e1;
t141 = pkin(2) * t199 - t198;
t204 = t141 * qJD(2) - t319;
t203 = -t154 * qJD(2) - t319;
t20 = t320 + t192 + t324;
t202 = t20 * qJD(1) + t155 * qJD(2);
t17 = t92 + t320;
t201 = -t17 * qJD(1) + t160 * qJD(2);
t25 = t211 - t314 / 0.2e1 + t308;
t200 = -t25 * qJD(1) + t161 * qJD(2);
t180 = t187 * t249;
t157 = t161 * qJD(3);
t156 = t160 * qJD(3);
t147 = t155 * qJD(4);
t146 = t154 * qJD(4);
t131 = (t199 + t263) * pkin(2) + t198;
t130 = -t140 / 0.2e1 - t197 / 0.2e1 + (-t229 - t234 / 0.2e1) * pkin(2);
t128 = t238 * t167;
t115 = t120 * qJD(4);
t104 = 0.2e1 * t212 - t262;
t78 = 0.2e1 * t210 + t264;
t34 = t78 * qJD(4) - t298;
t12 = t191 + t189;
t2 = t193 - t190;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t222, t179 * qJD(2), 0, -t222, 0, 0, -pkin(1) * t240, -pkin(1) * t239, 0, 0, -t167 * t129, t238 * t98, 0, t238 * t268, 0, 0, t110 * qJD(2) + t169 * t248, t111 * qJD(2) - t167 * t248, 0, t36 * qJD(2), t35 * t296, (qJD(4) + t238) * t301, 0, (t243 + t298) * t122, 0, 0, t37 * qJD(2) - t48 * qJD(3) + t144 * t243, t38 * qJD(2) - t49 * qJD(3) - t144 * t244, 0, t8 * qJD(2) + t9 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t180, t241, t239, -t180, -t240, 0, -pkin(5) * t239 - t237, pkin(5) * t240 - t236, 0, 0, -t225, t253, -t128, t225, -t129, 0, -qJD(2) * t139 + t104 * qJD(3) + t247, t246 + t300, (t289 * t167 - t169 * t186) * t278, t259 + (-t139 * t289 - t186 * t216) * t278, -t304, t306, t35, t304, t34, 0, -qJD(2) * t60 + t322 * t326 + t258, -t317 * qJD(2) + t322 * t321 + t257, (-t269 - t270) * qJD(2) + t12 * qJD(3), t274 + (t60 * t154 + t155 * t317) * qJD(2) + t2 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t225, t253, -t128, t225, -t129, 0, t104 * qJD(2) - t139 * qJD(3) + t223, -t224 + t300, 0, 0, -t304, t306, t35, t304, t34, 0, -qJD(3) * t60 + qJD(4) * t326 - t256 + t316, -qJD(3) * t317 + qJD(4) * t321 - t255 + t315, t12 * qJD(2) + (t230 - t271) * t279, t273 + t2 * qJD(2) + (-t288 * t60 + t323) * t279; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t304, t306, t35, t304, t238 * t78 - t243, 0, qJD(3) * t326 - t60 * qJD(4) + t226 + t316, qJD(3) * t321 - qJD(4) * t317 - t227 + t315, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t180, -t241, 0, t180, 0, 0, t237, t236, 0, 0, t225, -t253, 0, -t225, 0, 0, t135 * qJD(3) - t247, -t246, 0, -t259, t304, -t306, 0, -t304, t115, 0, t17 * qJD(3) - t20 * qJD(4) - t258, t25 * qJD(3) - t257 + t318, -t11 * qJD(3), -t1 * qJD(3) - t274; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3) * t287, -pkin(2) * t219, 0, 0, 0, 0, 0, 0, 0, 0, -t156 - t147, -t157 + t146, 0, t66 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t238 * t287 + t242, (-t220 - t219) * pkin(2), 0, 0, 0, 0, 0, 0, 0, 0, t130 * qJD(4) - t156 - t201, t131 * qJD(4) - t157 - t200, -t272, (-t288 * t160 + t161 * t185) * t279 + t206; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t245, 0, t130 * qJD(3) - t147 - t202, t131 * qJD(3) + t146 - t203, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t225, -t253, 0, -t225, 0, 0, -t135 * qJD(2) - t223, t224, 0, 0, t304, -t306, 0, -t304, t115, 0, -t17 * qJD(2) - t19 * qJD(4) + t256, -t25 * qJD(2) + t255 + t318, t11 * qJD(2), t1 * qJD(2) - t273; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t186 * t278 - t242, pkin(2) * t220, 0, 0, 0, 0, 0, 0, 0, 0, t201 - t293, -t141 * qJD(4) + t200, t272, -t206; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t293, -pkin(3) * t217, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t245, 0, -t322 * t140 + t205, (-t218 - t217) * pkin(3) - t204, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t304, -t306, 0, -t304, -t238 * t120, 0, t20 * qJD(2) + t19 * qJD(3) - t226, -t238 * t21 + t227, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t245, 0, t140 * qJD(3) + t202, t141 * qJD(3) + t203, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t245, 0, t185 * t279 - t205, pkin(3) * t218 + t204, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t3;
