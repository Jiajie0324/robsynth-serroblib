% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RRRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d3,d4]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:24
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RRRR3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRRR3_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRRR3_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRRR3_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRRR3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RRRR3_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:24:48
% EndTime: 2019-12-31 17:24:55
% DurationCPUTime: 7.26s
% Computational Cost: add. (39015->480), mult. (85849->674), div. (0->0), fcn. (59535->8), ass. (0->330)
t836 = sin(qJ(4));
t837 = sin(qJ(3));
t841 = cos(qJ(3));
t842 = cos(qJ(2));
t838 = sin(qJ(2));
t875 = qJD(1) * t838;
t794 = -t841 * t842 * qJD(1) + t837 * t875;
t796 = (t837 * t842 + t838 * t841) * qJD(1);
t840 = cos(qJ(4));
t758 = t840 * t794 + t836 * t796;
t760 = -t836 * t794 + t840 * t796;
t711 = t760 * t758;
t832 = qJDD(2) + qJDD(3);
t826 = qJDD(4) + t832;
t907 = -t711 + t826;
t912 = t836 * t907;
t766 = t796 * t794;
t905 = -t766 + t832;
t911 = t837 * t905;
t910 = t840 * t907;
t909 = t841 * t905;
t872 = qJD(1) * qJD(2);
t824 = t842 * t872;
t871 = t838 * qJDD(1);
t805 = t824 + t871;
t828 = t842 * qJDD(1);
t864 = t838 * t872;
t806 = t828 - t864;
t860 = t837 * t805 - t841 * t806;
t743 = -t796 * qJD(3) - t860;
t744 = -t794 * qJD(3) + t841 * t805 + t837 * t806;
t675 = -t758 * qJD(4) + t836 * t743 + t840 * t744;
t833 = qJD(2) + qJD(3);
t827 = qJD(4) + t833;
t753 = t827 * t758;
t908 = t675 - t753;
t788 = t833 * t794;
t906 = t744 - t788;
t722 = t744 + t788;
t861 = -t840 * t743 + t836 * t744;
t659 = (qJD(4) - t827) * t760 + t861;
t718 = (qJD(3) - t833) * t796 + t860;
t756 = t758 ^ 2;
t757 = t760 ^ 2;
t792 = t794 ^ 2;
t793 = t796 ^ 2;
t825 = t827 ^ 2;
t831 = t833 ^ 2;
t845 = qJD(1) ^ 2;
t885 = t838 * t845;
t839 = sin(qJ(1));
t843 = cos(qJ(1));
t816 = t843 * g(1) + t839 * g(2);
t798 = -t845 * pkin(1) + qJDD(1) * pkin(5) - t816;
t888 = t838 * t798;
t734 = qJDD(2) * pkin(2) - t805 * pkin(6) - t888 + (pkin(2) * t885 + pkin(6) * t872 - g(3)) * t842;
t782 = -t838 * g(3) + t842 * t798;
t835 = t842 ^ 2;
t829 = t835 * t845;
t851 = qJD(2) * pkin(2) - pkin(6) * t875;
t738 = -pkin(2) * t829 + t806 * pkin(6) - qJD(2) * t851 + t782;
t697 = -t841 * t734 + t837 * t738;
t698 = t837 * t734 + t841 * t738;
t645 = -t841 * t697 + t837 * t698;
t904 = pkin(2) * t645;
t677 = -t718 * t837 - t841 * t722;
t903 = pkin(2) * t677;
t902 = t827 * t760;
t901 = t827 * t836;
t900 = t827 * t840;
t899 = t833 * t796;
t898 = t833 * t837;
t897 = t833 * t841;
t834 = t838 ^ 2;
t896 = t834 * t845;
t815 = t839 * g(1) - t843 * g(2);
t850 = qJDD(1) * pkin(1) + t815;
t746 = t806 * pkin(2) - t851 * t875 + (pkin(6) * t835 + pkin(5)) * t845 + t850;
t855 = t833 * pkin(3) - t796 * pkin(7);
t673 = t743 * pkin(3) + t792 * pkin(7) - t796 * t855 + t746;
t895 = t836 * t673;
t705 = t711 + t826;
t894 = t836 * t705;
t648 = t905 * pkin(3) - t722 * pkin(7) - t697;
t649 = -t792 * pkin(3) + t743 * pkin(7) - t833 * t855 + t698;
t612 = -t840 * t648 + t836 * t649;
t613 = t836 * t648 + t840 * t649;
t584 = -t840 * t612 + t836 * t613;
t893 = t837 * t584;
t892 = t837 * t746;
t763 = t766 + t832;
t891 = t837 * t763;
t890 = t838 * t645;
t797 = t845 * pkin(5) + t850;
t889 = t838 * t797;
t822 = t842 * t885;
t813 = qJDD(2) + t822;
t887 = t838 * t813;
t814 = qJDD(2) - t822;
t886 = t838 * t814;
t884 = t840 * t673;
t883 = t840 * t705;
t882 = t841 * t584;
t881 = t841 * t746;
t880 = t841 * t763;
t879 = t842 * t645;
t878 = t842 * t797;
t877 = t842 * t814;
t876 = t834 + t835;
t870 = t839 * qJDD(1);
t869 = t843 * qJDD(1);
t868 = t839 * t711;
t867 = t839 * t766;
t866 = t843 * t711;
t865 = t843 * t766;
t585 = t836 * t612 + t840 * t613;
t564 = t837 * t585 + t882;
t583 = pkin(3) * t584;
t863 = pkin(2) * t564 + t583;
t662 = t675 + t753;
t625 = -t659 * t836 - t840 * t662;
t627 = -t659 * t840 + t836 * t662;
t591 = t841 * t625 + t837 * t627;
t622 = pkin(3) * t625;
t862 = pkin(2) * t591 + t622;
t646 = t837 * t697 + t841 * t698;
t781 = t842 * g(3) + t888;
t737 = t838 * t781 + t842 * t782;
t859 = -t839 * t815 - t843 * t816;
t858 = t839 * t822;
t857 = t843 * t822;
t780 = -t793 - t831;
t723 = t841 * t780 - t891;
t856 = pkin(2) * t723 - t698;
t810 = -t839 * t845 + t869;
t854 = -pkin(4) * t810 - t839 * g(3);
t703 = -t825 - t756;
t665 = t836 * t703 + t910;
t853 = pkin(3) * t665 - t612;
t736 = t842 * t781 - t838 * t782;
t852 = t843 * t815 - t839 * t816;
t761 = -t831 - t792;
t707 = t837 * t761 + t909;
t849 = pkin(2) * t707 - t697;
t740 = -t757 - t825;
t683 = t840 * t740 - t894;
t848 = pkin(3) * t683 - t613;
t666 = t840 * t703 - t912;
t629 = t841 * t665 + t837 * t666;
t847 = pkin(2) * t629 + t853;
t684 = -t836 * t740 - t883;
t639 = t841 * t683 + t837 * t684;
t846 = pkin(2) * t639 + t848;
t844 = qJD(2) ^ 2;
t820 = -t829 - t844;
t819 = t829 - t844;
t818 = -t844 - t896;
t817 = t844 - t896;
t812 = -t829 + t896;
t811 = t829 + t896;
t809 = t843 * t845 + t870;
t808 = t876 * qJDD(1);
t807 = t828 - 0.2e1 * t864;
t804 = 0.2e1 * t824 + t871;
t802 = t842 * t813;
t801 = t876 * t872;
t791 = -pkin(4) * t809 + t843 * g(3);
t786 = -t793 + t831;
t785 = t792 - t831;
t784 = t842 * t805 - t834 * t872;
t783 = -t838 * t806 - t835 * t872;
t779 = -t838 * t818 - t877;
t778 = -t838 * t817 + t802;
t777 = t842 * t820 - t887;
t776 = t842 * t819 - t886;
t775 = t842 * t818 - t886;
t774 = t842 * t817 + t887;
t773 = t838 * t820 + t802;
t772 = t838 * t819 + t877;
t771 = (t805 + t824) * t838;
t770 = (t806 - t864) * t842;
t768 = -t838 * t804 + t842 * t807;
t767 = t842 * t804 + t838 * t807;
t765 = t793 - t792;
t752 = -t757 + t825;
t751 = t756 - t825;
t750 = (-t794 * t841 + t796 * t837) * t833;
t749 = (-t794 * t837 - t796 * t841) * t833;
t748 = -pkin(5) * t775 - t878;
t747 = -pkin(5) * t773 - t889;
t745 = -t792 - t793;
t742 = -pkin(1) * t775 + t782;
t741 = -pkin(1) * t773 + t781;
t730 = pkin(1) * t807 + pkin(5) * t777 + t878;
t729 = -pkin(1) * t804 + pkin(5) * t779 - t889;
t728 = t841 * t785 - t891;
t727 = -t837 * t786 + t909;
t726 = t837 * t785 + t880;
t725 = t841 * t786 + t911;
t724 = -t837 * t780 - t880;
t717 = (qJD(3) + t833) * t796 + t860;
t716 = pkin(1) * t797 + pkin(5) * t737;
t715 = t841 * t744 - t796 * t898;
t714 = t837 * t744 + t796 * t897;
t713 = -t837 * t743 + t794 * t897;
t712 = t841 * t743 + t794 * t898;
t710 = pkin(1) * t811 + pkin(5) * t808 + t737;
t709 = t757 - t756;
t708 = t841 * t761 - t911;
t702 = (-t758 * t840 + t760 * t836) * t827;
t701 = (-t758 * t836 - t760 * t840) * t827;
t700 = -t838 * t749 + t842 * t750;
t699 = t842 * t749 + t838 * t750;
t696 = -t756 - t757;
t694 = -pkin(6) * t723 - t881;
t693 = -pkin(6) * t707 - t892;
t692 = -t838 * t726 + t842 * t728;
t691 = -t838 * t725 + t842 * t727;
t690 = t842 * t726 + t838 * t728;
t689 = t842 * t725 + t838 * t727;
t688 = t840 * t751 - t894;
t687 = -t836 * t752 + t910;
t686 = t836 * t751 + t883;
t685 = t840 * t752 + t912;
t681 = -t838 * t723 + t842 * t724;
t680 = t842 * t723 + t838 * t724;
t679 = -t718 * t841 + t837 * t722;
t678 = -t841 * t717 - t837 * t906;
t676 = -t837 * t717 + t841 * t906;
t674 = -t760 * qJD(4) - t861;
t672 = -t838 * t714 + t842 * t715;
t671 = -t838 * t712 + t842 * t713;
t670 = t842 * t714 + t838 * t715;
t669 = t842 * t712 + t838 * t713;
t668 = -t838 * t707 + t842 * t708;
t667 = t842 * t707 + t838 * t708;
t658 = (qJD(4) + t827) * t760 + t861;
t657 = -pkin(2) * t906 + pkin(6) * t724 - t892;
t656 = -t837 * t701 + t841 * t702;
t655 = t841 * t701 + t837 * t702;
t654 = t840 * t675 - t760 * t901;
t653 = t836 * t675 + t760 * t900;
t652 = -t836 * t674 + t758 * t900;
t651 = t840 * t674 + t758 * t901;
t650 = -pkin(2) * t717 + pkin(6) * t708 + t881;
t644 = -t837 * t686 + t841 * t688;
t643 = -t837 * t685 + t841 * t687;
t642 = t841 * t686 + t837 * t688;
t641 = t841 * t685 + t837 * t687;
t640 = -t837 * t683 + t841 * t684;
t638 = pkin(2) * t746 + pkin(6) * t646;
t637 = -t838 * t677 + t842 * t679;
t636 = -t838 * t676 + t842 * t678;
t635 = t842 * t677 + t838 * t679;
t634 = t842 * t676 + t838 * t678;
t633 = -pkin(7) * t683 - t884;
t632 = -pkin(1) * t680 - t856;
t631 = -pkin(7) * t665 - t895;
t630 = -t837 * t665 + t841 * t666;
t628 = -pkin(1) * t667 - t849;
t626 = -t840 * t658 - t836 * t908;
t624 = -t836 * t658 + t840 * t908;
t623 = -pkin(6) * t677 - t645;
t621 = -t838 * t655 + t842 * t656;
t620 = t842 * t655 + t838 * t656;
t619 = -t837 * t653 + t841 * t654;
t618 = -t837 * t651 + t841 * t652;
t617 = t841 * t653 + t837 * t654;
t616 = t841 * t651 + t837 * t652;
t615 = -pkin(2) * t745 + pkin(6) * t679 + t646;
t614 = -pkin(1) * t635 - t903;
t610 = -pkin(5) * t680 - t838 * t657 + t842 * t694;
t609 = t842 * t646 - t890;
t608 = t838 * t646 + t879;
t607 = -pkin(3) * t908 + pkin(7) * t684 - t895;
t606 = -pkin(5) * t667 - t838 * t650 + t842 * t693;
t605 = -pkin(3) * t658 + pkin(7) * t666 + t884;
t604 = -pkin(1) * t906 + pkin(5) * t681 + t842 * t657 + t838 * t694;
t603 = -t838 * t642 + t842 * t644;
t602 = -t838 * t641 + t842 * t643;
t601 = t842 * t642 + t838 * t644;
t600 = t842 * t641 + t838 * t643;
t599 = -pkin(1) * t717 + pkin(5) * t668 + t842 * t650 + t838 * t693;
t598 = -t838 * t639 + t842 * t640;
t597 = t842 * t639 + t838 * t640;
t596 = -t838 * t629 + t842 * t630;
t595 = t842 * t629 + t838 * t630;
t594 = -pkin(1) * t608 - t904;
t593 = -t837 * t625 + t841 * t627;
t592 = -t837 * t624 + t841 * t626;
t590 = t841 * t624 + t837 * t626;
t589 = -t838 * t617 + t842 * t619;
t588 = -t838 * t616 + t842 * t618;
t587 = t842 * t617 + t838 * t619;
t586 = t842 * t616 + t838 * t618;
t582 = -pkin(5) * t608 - pkin(6) * t879 - t838 * t638;
t581 = pkin(3) * t673 + pkin(7) * t585;
t580 = pkin(1) * t746 + pkin(5) * t609 - pkin(6) * t890 + t842 * t638;
t579 = -pkin(6) * t639 - t837 * t607 + t841 * t633;
t578 = -pkin(5) * t635 - t838 * t615 + t842 * t623;
t577 = -pkin(1) * t745 + pkin(5) * t637 + t842 * t615 + t838 * t623;
t576 = -pkin(6) * t629 - t837 * t605 + t841 * t631;
t575 = -pkin(2) * t908 + pkin(6) * t640 + t841 * t607 + t837 * t633;
t574 = -pkin(7) * t625 - t584;
t573 = -pkin(3) * t696 + pkin(7) * t627 + t585;
t572 = -pkin(2) * t658 + pkin(6) * t630 + t841 * t605 + t837 * t631;
t571 = -pkin(1) * t597 - t846;
t570 = -t838 * t591 + t842 * t593;
t569 = -t838 * t590 + t842 * t592;
t568 = t842 * t591 + t838 * t593;
t567 = t842 * t590 + t838 * t592;
t566 = -pkin(1) * t595 - t847;
t565 = t841 * t585 - t893;
t563 = -pkin(1) * t568 - t862;
t562 = -pkin(5) * t597 - t838 * t575 + t842 * t579;
t561 = -pkin(1) * t908 + pkin(5) * t598 + t842 * t575 + t838 * t579;
t560 = -pkin(5) * t595 - t838 * t572 + t842 * t576;
t559 = -pkin(6) * t591 - t837 * t573 + t841 * t574;
t558 = -pkin(1) * t658 + pkin(5) * t596 + t842 * t572 + t838 * t576;
t557 = -pkin(2) * t696 + pkin(6) * t593 + t841 * t573 + t837 * t574;
t556 = -t838 * t564 + t842 * t565;
t555 = t842 * t564 + t838 * t565;
t554 = -pkin(6) * t564 - pkin(7) * t882 - t837 * t581;
t553 = pkin(2) * t673 + pkin(6) * t565 - pkin(7) * t893 + t841 * t581;
t552 = -pkin(1) * t555 - t863;
t551 = -pkin(5) * t568 - t838 * t557 + t842 * t559;
t550 = -pkin(1) * t696 + pkin(5) * t570 + t842 * t557 + t838 * t559;
t549 = -pkin(5) * t555 - t838 * t553 + t842 * t554;
t548 = pkin(1) * t673 + pkin(5) * t556 + t842 * t553 + t838 * t554;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t810, 0, -t809, 0, t854, -t791, -t852, -pkin(4) * t852, t843 * t784 - t858, t843 * t768 + t839 * t812, t843 * t778 + t838 * t870, t843 * t783 + t858, t843 * t776 + t839 * t828, t839 * qJDD(2) + t843 * t801, t843 * t747 - t839 * t741 - pkin(4) * (t839 * t777 + t843 * t807), t843 * t748 - t839 * t742 - pkin(4) * (t839 * t779 - t843 * t804), t843 * t736 - pkin(4) * (t839 * t808 + t843 * t811), -pkin(4) * (t839 * t737 + t843 * t797) - (t839 * pkin(1) - t843 * pkin(5)) * t736, t843 * t672 + t867, t843 * t636 + t839 * t765, t843 * t691 + t839 * t722, t843 * t671 - t867, t843 * t692 - t839 * t718, t843 * t700 + t839 * t832, t843 * t606 - t839 * t628 - pkin(4) * (t839 * t668 - t843 * t717), t843 * t610 - t839 * t632 - pkin(4) * (t839 * t681 - t843 * t906), t843 * t578 - t839 * t614 - pkin(4) * (t839 * t637 - t843 * t745), t843 * t582 - t839 * t594 - pkin(4) * (t839 * t609 + t843 * t746), t843 * t589 + t868, t843 * t569 + t839 * t709, t843 * t602 + t839 * t662, t843 * t588 - t868, t843 * t603 - t839 * t659, t843 * t621 + t839 * t826, t843 * t560 - t839 * t566 - pkin(4) * (t839 * t596 - t843 * t658), t843 * t562 - t839 * t571 - pkin(4) * (t839 * t598 - t843 * t908), t843 * t551 - t839 * t563 - pkin(4) * (t839 * t570 - t843 * t696), t843 * t549 - t839 * t552 - pkin(4) * (t839 * t556 + t843 * t673); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t809, 0, t810, 0, t791, t854, t859, pkin(4) * t859, t839 * t784 + t857, t839 * t768 - t843 * t812, t839 * t778 - t838 * t869, t839 * t783 - t857, t839 * t776 - t842 * t869, -t843 * qJDD(2) + t839 * t801, t839 * t747 + t843 * t741 + pkin(4) * (t843 * t777 - t839 * t807), t839 * t748 + t843 * t742 + pkin(4) * (t843 * t779 + t839 * t804), t839 * t736 + pkin(4) * (t843 * t808 - t839 * t811), pkin(4) * (t843 * t737 - t839 * t797) - (-t843 * pkin(1) - t839 * pkin(5)) * t736, t839 * t672 - t865, t839 * t636 - t843 * t765, t839 * t691 - t843 * t722, t839 * t671 + t865, t839 * t692 + t843 * t718, t839 * t700 - t843 * t832, t839 * t606 + t843 * t628 + pkin(4) * (t843 * t668 + t839 * t717), t839 * t610 + t843 * t632 + pkin(4) * (t843 * t681 + t839 * t906), t839 * t578 + t843 * t614 + pkin(4) * (t843 * t637 + t839 * t745), t839 * t582 + t843 * t594 + pkin(4) * (t843 * t609 - t839 * t746), t839 * t589 - t866, t839 * t569 - t843 * t709, t839 * t602 - t843 * t662, t839 * t588 + t866, t839 * t603 + t843 * t659, t839 * t621 - t843 * t826, t839 * t560 + t843 * t566 + pkin(4) * (t843 * t596 + t839 * t658), t839 * t562 + t843 * t571 + pkin(4) * (t843 * t598 + t839 * t908), t839 * t551 + t843 * t563 + pkin(4) * (t843 * t570 + t839 * t696), t839 * t549 + t843 * t552 + pkin(4) * (t843 * t556 - t839 * t673); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t815, t816, 0, 0, t771, t767, t774, t770, t772, 0, t730, t729, t710, t716, t670, t634, t689, t669, t690, t699, t599, t604, t577, t580, t587, t567, t600, t586, t601, t620, t558, t561, t550, t548; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t845, 0, 0, -g(3), -t815, 0, t784, t768, t778, t783, t776, t801, t747, t748, t736, pkin(5) * t736, t672, t636, t691, t671, t692, t700, t606, t610, t578, t582, t589, t569, t602, t588, t603, t621, t560, t562, t551, t549; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t845, 0, qJDD(1), 0, g(3), 0, -t816, 0, t822, -t812, -t871, -t822, -t828, -qJDD(2), t741, t742, 0, pkin(1) * t736, -t766, -t765, -t722, t766, t718, -t832, t628, t632, t614, t594, -t711, -t709, -t662, t711, t659, -t826, t566, t571, t563, t552; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t815, t816, 0, 0, t771, t767, t774, t770, t772, 0, t730, t729, t710, t716, t670, t634, t689, t669, t690, t699, t599, t604, t577, t580, t587, t567, t600, t586, t601, t620, t558, t561, t550, t548; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t805, t807, t813, -t824, t819, t824, 0, -t797, t781, 0, t715, t678, t727, t713, t728, t750, t693, t694, t623, -pkin(6) * t645, t619, t592, t643, t618, t644, t656, t576, t579, t559, t554; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t864, t804, t817, t806, t814, -t864, t797, 0, t782, 0, t714, t676, t725, t712, t726, t749, t650, t657, t615, t638, t617, t590, t641, t616, t642, t655, t572, t575, t557, t553; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t822, t812, t871, t822, t828, qJDD(2), -t781, -t782, 0, 0, t766, t765, t722, -t766, -t718, t832, t849, t856, t903, t904, t711, t709, t662, -t711, -t659, t826, t847, t846, t862, t863; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t744, -t717, t905, t788, t785, -t788, 0, -t746, t697, 0, t654, t626, t687, t652, t688, t702, t631, t633, t574, -pkin(7) * t584; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t899, t906, t786, t743, t763, -t899, t746, 0, t698, 0, t653, t624, t685, t651, t686, t701, t605, t607, t573, t581; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t766, t765, t722, -t766, -t718, t832, -t697, -t698, 0, 0, t711, t709, t662, -t711, -t659, t826, t853, t848, t622, t583; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t675, -t658, t907, t753, t751, -t753, 0, -t673, t612, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t902, t908, t752, t674, t705, -t902, t673, 0, t613, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t711, t709, t662, -t711, -t659, t826, -t612, -t613, 0, 0;];
m_new_reg = t1;
