% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S4RRRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
%
% Output:
% f_new_reg [(3*5)x(5*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:31
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S4RRRR6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRRR6_invdynf_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRRR6_invdynf_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRRR6_invdynf_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRRR6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S4RRRR6_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:31:25
% EndTime: 2019-12-31 17:31:28
% DurationCPUTime: 2.27s
% Computational Cost: add. (11243->208), mult. (24777->312), div. (0->0), fcn. (19219->10), ass. (0->177)
t1307 = sin(pkin(4));
t1317 = qJD(1) ^ 2;
t1364 = t1307 * t1317;
t1308 = cos(pkin(4));
t1301 = t1308 * qJD(1) + qJD(2);
t1310 = sin(qJ(3));
t1314 = cos(qJ(3));
t1311 = sin(qJ(2));
t1350 = t1307 * t1311;
t1343 = qJD(1) * t1350;
t1270 = -t1314 * t1301 + t1310 * t1343;
t1268 = qJD(4) + t1270;
t1363 = qJD(4) + t1268;
t1272 = t1310 * t1301 + t1314 * t1343;
t1315 = cos(qJ(2));
t1349 = t1307 * t1315;
t1342 = qJD(1) * t1349;
t1290 = -qJD(3) + t1342;
t1309 = sin(qJ(4));
t1313 = cos(qJ(4));
t1256 = t1309 * t1272 + t1313 * t1290;
t1362 = t1256 ^ 2;
t1258 = t1313 * t1272 - t1309 * t1290;
t1361 = t1258 ^ 2;
t1360 = t1268 ^ 2;
t1359 = t1270 ^ 2;
t1358 = t1272 ^ 2;
t1357 = t1290 ^ 2;
t1356 = t1301 ^ 2;
t1355 = t1308 * g(3);
t1354 = (-pkin(2) * t1315 - pkin(7) * t1311) * t1364;
t1353 = t1258 * t1256;
t1352 = t1272 * t1270;
t1351 = t1307 ^ 2 * t1317;
t1348 = qJD(3) + t1290;
t1347 = qJD(4) - t1268;
t1300 = t1308 * qJDD(1) + qJDD(2);
t1312 = sin(qJ(1));
t1316 = cos(qJ(1));
t1293 = -t1316 * g(1) - t1312 * g(2);
t1344 = qJDD(1) * t1307;
t1275 = -t1317 * pkin(1) + pkin(6) * t1344 + t1293;
t1292 = t1312 * g(1) - t1316 * g(2);
t1320 = qJDD(1) * pkin(1) + pkin(6) * t1364 + t1292;
t1319 = t1308 * t1320;
t1346 = t1315 * t1275 + t1311 * t1319;
t1233 = -t1356 * pkin(2) + t1300 * pkin(7) + (-g(3) * t1311 + t1315 * t1354) * t1307 + t1346;
t1279 = qJD(2) * t1342 + t1311 * t1344;
t1345 = -qJD(2) * t1343 + t1315 * t1344;
t1318 = -t1355 - t1279 * pkin(7) - t1345 * pkin(2) + ((pkin(2) * t1311 - pkin(7) * t1315) * t1301 * qJD(1) - t1320) * t1307;
t1209 = t1314 * t1233 + t1310 * t1318;
t1341 = -qJDD(3) + t1345;
t1208 = -t1310 * t1233 + t1314 * t1318;
t1323 = -t1314 * t1279 - t1310 * t1300;
t1248 = -t1270 * qJD(3) - t1323;
t1340 = -t1309 * t1248 - t1313 * t1341;
t1339 = -t1270 * t1290 - t1248;
t1338 = t1311 * t1275 - t1315 * t1319;
t1337 = t1310 * t1279 - t1314 * t1300;
t1336 = t1301 * t1342;
t1253 = t1270 * pkin(3) - t1272 * pkin(8);
t1199 = -t1357 * pkin(3) - t1341 * pkin(8) - t1270 * t1253 + t1209;
t1232 = -t1300 * pkin(2) - t1356 * pkin(7) + (t1315 * g(3) + t1311 * t1354) * t1307 + t1338;
t1236 = (qJD(3) - t1290) * t1272 + t1337;
t1200 = t1236 * pkin(3) + t1339 * pkin(8) + t1232;
t1179 = -t1309 * t1199 + t1313 * t1200;
t1180 = t1313 * t1199 + t1309 * t1200;
t1169 = -t1309 * t1179 + t1313 * t1180;
t1198 = t1341 * pkin(3) - t1357 * pkin(8) + t1272 * t1253 - t1208;
t1165 = t1314 * t1169 + t1310 * t1198;
t1168 = t1313 * t1179 + t1309 * t1180;
t1335 = t1165 * t1311 - t1168 * t1315;
t1211 = -t1347 * t1258 + t1340;
t1321 = -t1313 * t1248 + t1309 * t1341;
t1213 = t1347 * t1256 + t1321;
t1193 = t1313 * t1211 - t1309 * t1213;
t1222 = -t1361 - t1362;
t1183 = t1314 * t1193 + t1310 * t1222;
t1192 = t1309 * t1211 + t1313 * t1213;
t1334 = t1183 * t1311 - t1192 * t1315;
t1322 = -t1272 * qJD(3) - qJDD(4) - t1337;
t1218 = -t1322 - t1353;
t1226 = -t1360 - t1362;
t1203 = -t1309 * t1218 + t1313 * t1226;
t1210 = t1363 * t1258 - t1340;
t1187 = t1314 * t1203 + t1310 * t1210;
t1202 = t1313 * t1218 + t1309 * t1226;
t1333 = t1187 * t1311 - t1202 * t1315;
t1219 = t1322 - t1353;
t1240 = -t1360 - t1361;
t1205 = t1313 * t1219 - t1309 * t1240;
t1212 = -t1363 * t1256 - t1321;
t1189 = t1314 * t1205 + t1310 * t1212;
t1204 = t1309 * t1219 + t1313 * t1240;
t1332 = t1189 * t1311 - t1204 * t1315;
t1191 = -t1310 * t1208 + t1314 * t1209;
t1331 = t1191 * t1311 - t1232 * t1315;
t1237 = -t1348 * t1272 - t1337;
t1239 = t1348 * t1270 + t1323;
t1215 = t1314 * t1237 - t1310 * t1239;
t1244 = -t1358 - t1359;
t1330 = t1215 * t1311 - t1244 * t1315;
t1246 = -t1341 - t1352;
t1249 = -t1357 - t1359;
t1221 = -t1310 * t1246 + t1314 * t1249;
t1329 = t1221 * t1311 - t1236 * t1315;
t1245 = t1341 - t1352;
t1254 = -t1357 - t1358;
t1225 = t1314 * t1245 - t1310 * t1254;
t1328 = t1225 * t1311 + t1315 * t1339;
t1250 = -g(3) * t1349 - t1338;
t1251 = -g(3) * t1350 + t1346;
t1327 = t1250 * t1315 + t1251 * t1311;
t1260 = t1336 - t1279;
t1282 = t1301 * t1343;
t1261 = t1282 + t1345;
t1326 = t1260 * t1315 + t1261 * t1311;
t1305 = t1311 ^ 2;
t1267 = -t1305 * t1351 - t1356;
t1289 = t1315 * t1311 * t1351;
t1277 = t1289 - t1300;
t1325 = t1267 * t1315 + t1277 * t1311;
t1276 = t1289 + t1300;
t1306 = t1315 ^ 2;
t1280 = -t1306 * t1351 - t1356;
t1324 = t1276 * t1315 + t1280 * t1311;
t1288 = -t1312 * qJDD(1) - t1316 * t1317;
t1287 = t1316 * qJDD(1) - t1312 * t1317;
t1281 = (-t1305 - t1306) * t1351;
t1264 = -t1307 * t1320 - t1355;
t1262 = t1282 - t1345;
t1259 = t1336 + t1279;
t1255 = -t1311 * t1276 + t1315 * t1280;
t1252 = -t1311 * t1267 + t1315 * t1277;
t1243 = -t1311 * t1260 + t1315 * t1261;
t1242 = -t1307 * t1262 + t1324 * t1308;
t1241 = t1308 * t1262 + t1324 * t1307;
t1235 = -t1307 * t1259 + t1325 * t1308;
t1234 = t1308 * t1259 + t1325 * t1307;
t1231 = -t1307 * t1281 + t1326 * t1308;
t1230 = t1308 * t1281 + t1326 * t1307;
t1224 = t1310 * t1245 + t1314 * t1254;
t1223 = -t1311 * t1250 + t1315 * t1251;
t1220 = t1314 * t1246 + t1310 * t1249;
t1217 = -t1307 * t1264 + t1327 * t1308;
t1216 = t1308 * t1264 + t1327 * t1307;
t1214 = t1310 * t1237 + t1314 * t1239;
t1207 = t1315 * t1225 - t1311 * t1339;
t1206 = t1315 * t1221 + t1311 * t1236;
t1201 = t1315 * t1215 + t1311 * t1244;
t1197 = -t1307 * t1224 + t1328 * t1308;
t1196 = t1308 * t1224 + t1328 * t1307;
t1195 = -t1307 * t1220 + t1329 * t1308;
t1194 = t1308 * t1220 + t1329 * t1307;
t1190 = t1314 * t1208 + t1310 * t1209;
t1188 = t1310 * t1205 - t1314 * t1212;
t1186 = t1310 * t1203 - t1314 * t1210;
t1185 = -t1307 * t1214 + t1330 * t1308;
t1184 = t1308 * t1214 + t1330 * t1307;
t1182 = t1310 * t1193 - t1314 * t1222;
t1181 = t1315 * t1191 + t1311 * t1232;
t1178 = t1315 * t1189 + t1311 * t1204;
t1177 = t1315 * t1187 + t1311 * t1202;
t1176 = t1315 * t1183 + t1311 * t1192;
t1175 = -t1307 * t1190 + t1331 * t1308;
t1174 = t1308 * t1190 + t1331 * t1307;
t1173 = -t1307 * t1188 + t1332 * t1308;
t1172 = t1308 * t1188 + t1332 * t1307;
t1171 = -t1307 * t1186 + t1333 * t1308;
t1170 = t1308 * t1186 + t1333 * t1307;
t1167 = -t1307 * t1182 + t1334 * t1308;
t1166 = t1308 * t1182 + t1334 * t1307;
t1164 = t1310 * t1169 - t1314 * t1198;
t1163 = t1315 * t1165 + t1311 * t1168;
t1162 = -t1307 * t1164 + t1335 * t1308;
t1161 = t1308 * t1164 + t1335 * t1307;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1288, -t1287, 0, -t1312 * t1292 + t1316 * t1293, 0, 0, 0, 0, 0, 0, -t1312 * t1242 + t1316 * t1255, -t1312 * t1235 + t1316 * t1252, -t1312 * t1231 + t1316 * t1243, -t1312 * t1217 + t1316 * t1223, 0, 0, 0, 0, 0, 0, -t1312 * t1195 + t1316 * t1206, -t1312 * t1197 + t1316 * t1207, -t1312 * t1185 + t1316 * t1201, -t1312 * t1175 + t1316 * t1181, 0, 0, 0, 0, 0, 0, -t1312 * t1171 + t1316 * t1177, -t1312 * t1173 + t1316 * t1178, -t1312 * t1167 + t1316 * t1176, -t1312 * t1162 + t1316 * t1163; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1287, t1288, 0, t1316 * t1292 + t1312 * t1293, 0, 0, 0, 0, 0, 0, t1316 * t1242 + t1312 * t1255, t1316 * t1235 + t1312 * t1252, t1316 * t1231 + t1312 * t1243, t1316 * t1217 + t1312 * t1223, 0, 0, 0, 0, 0, 0, t1316 * t1195 + t1312 * t1206, t1316 * t1197 + t1312 * t1207, t1316 * t1185 + t1312 * t1201, t1316 * t1175 + t1312 * t1181, 0, 0, 0, 0, 0, 0, t1316 * t1171 + t1312 * t1177, t1316 * t1173 + t1312 * t1178, t1316 * t1167 + t1312 * t1176, t1316 * t1162 + t1312 * t1163; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1241, t1234, t1230, t1216, 0, 0, 0, 0, 0, 0, t1194, t1196, t1184, t1174, 0, 0, 0, 0, 0, 0, t1170, t1172, t1166, t1161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1317, -qJDD(1), 0, t1293, 0, 0, 0, 0, 0, 0, t1255, t1252, t1243, t1223, 0, 0, 0, 0, 0, 0, t1206, t1207, t1201, t1181, 0, 0, 0, 0, 0, 0, t1177, t1178, t1176, t1163; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1317, 0, t1292, 0, 0, 0, 0, 0, 0, t1242, t1235, t1231, t1217, 0, 0, 0, 0, 0, 0, t1195, t1197, t1185, t1175, 0, 0, 0, 0, 0, 0, t1171, t1173, t1167, t1162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1241, t1234, t1230, t1216, 0, 0, 0, 0, 0, 0, t1194, t1196, t1184, t1174, 0, 0, 0, 0, 0, 0, t1170, t1172, t1166, t1161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1280, t1277, t1261, t1251, 0, 0, 0, 0, 0, 0, t1221, t1225, t1215, t1191, 0, 0, 0, 0, 0, 0, t1187, t1189, t1183, t1165; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1276, t1267, t1260, t1250, 0, 0, 0, 0, 0, 0, -t1236, t1339, -t1244, -t1232, 0, 0, 0, 0, 0, 0, -t1202, -t1204, -t1192, -t1168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1262, t1259, t1281, t1264, 0, 0, 0, 0, 0, 0, t1220, t1224, t1214, t1190, 0, 0, 0, 0, 0, 0, t1186, t1188, t1182, t1164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1249, t1245, t1237, t1209, 0, 0, 0, 0, 0, 0, t1203, t1205, t1193, t1169; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1246, t1254, t1239, t1208, 0, 0, 0, 0, 0, 0, -t1210, -t1212, -t1222, -t1198; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1236, -t1339, t1244, t1232, 0, 0, 0, 0, 0, 0, t1202, t1204, t1192, t1168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1226, t1219, t1211, t1180; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1218, t1240, t1213, t1179; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1210, t1212, t1222, t1198;];
f_new_reg = t1;
