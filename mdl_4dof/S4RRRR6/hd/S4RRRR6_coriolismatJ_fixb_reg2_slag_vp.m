% Calculate inertial parameters regressor of coriolis matrix for
% S4RRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% 
% Output:
% cmat_reg [(4*4)x(4*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:31
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S4RRRR6_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRRR6_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRRR6_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [4x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S4RRRR6_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:30:55
% EndTime: 2019-12-31 17:31:10
% DurationCPUTime: 10.10s
% Computational Cost: add. (7797->570), mult. (20191->849), div. (0->0), fcn. (20520->8), ass. (0->407)
t363 = sin(qJ(4));
t357 = t363 ^ 2;
t366 = cos(qJ(4));
t359 = t366 ^ 2;
t364 = sin(qJ(3));
t312 = (t357 / 0.2e1 - t359 / 0.2e1) * t364;
t362 = sin(pkin(4));
t368 = cos(qJ(2));
t576 = t362 * t368;
t505 = t363 * t576;
t367 = cos(qJ(3));
t612 = cos(pkin(4));
t464 = t612 * t364;
t365 = sin(qJ(2));
t577 = t362 * t365;
t308 = t367 * t577 + t464;
t582 = t308 * t366;
t235 = -t505 + t582;
t591 = t235 * t363;
t557 = t366 * t368;
t504 = t362 * t557;
t583 = t308 * t363;
t233 = t504 + t583;
t593 = t233 * t366;
t399 = -t593 / 0.2e1 - t591 / 0.2e1;
t387 = t399 * t364;
t358 = t364 ^ 2;
t559 = t366 * t358;
t651 = t363 * qJD(2) * t559 - qJD(1) * t387 + t312 * qJD(3);
t571 = t363 * t233;
t590 = t235 * t366;
t121 = -t571 / 0.2e1 + t590 / 0.2e1;
t650 = t121 * qJD(4);
t306 = t364 * t577 - t612 * t367;
t622 = -t364 / 0.2e1;
t479 = t306 * t622;
t618 = t367 / 0.2e1;
t396 = t308 * t618 + t479;
t649 = t396 * qJD(3);
t514 = t367 * qJD(2);
t349 = t364 * t514;
t458 = qJD(1) * t396 + t349;
t522 = t306 * qJD(1);
t648 = -qJD(2) * t396 + t308 * t522;
t539 = qJD(1) * t235;
t647 = -qJD(2) * t387 - qJD(3) * t121 + t233 * t539;
t535 = qJD(3) * t366;
t348 = t363 * t535;
t646 = -qJD(1) * t121 + t312 * qJD(2) - t348;
t180 = t366 * t306;
t469 = -t180 / 0.2e1;
t589 = t235 * t367;
t645 = t364 * t469 + t589 / 0.2e1;
t569 = t363 * t364;
t473 = -t569 / 0.2e1;
t592 = t233 * t367;
t390 = t306 * t473 + t592 / 0.2e1;
t344 = t359 - t357;
t640 = qJD(3) * t344;
t639 = t387 * qJD(4);
t635 = t306 ^ 2;
t634 = -pkin(7) / 0.2e1;
t616 = t306 * pkin(8);
t207 = pkin(3) * t308 + t616;
t562 = t366 * t207;
t500 = pkin(1) * t612;
t453 = t365 * t500;
t311 = pkin(6) * t576 + t453;
t293 = t612 * pkin(7) + t311;
t436 = -pkin(2) * t368 - pkin(7) * t365;
t417 = -pkin(1) + t436;
t392 = t417 * t362;
t165 = t364 * t293 - t367 * t392;
t575 = t363 * t165;
t97 = t562 + t575;
t633 = t97 / 0.2e1;
t564 = t366 * t165;
t573 = t363 * t207;
t98 = -t564 + t573;
t632 = -t98 / 0.2e1;
t631 = t233 / 0.2e1;
t630 = -t235 / 0.2e1;
t337 = t366 * t577;
t273 = t367 * t505 - t337;
t629 = -t273 / 0.2e1;
t554 = t367 * t368;
t565 = t365 * t363;
t274 = (t366 * t554 + t565) * t362;
t628 = -t274 / 0.2e1;
t352 = pkin(7) * t569;
t614 = t367 * pkin(8);
t615 = t364 * pkin(3);
t335 = -t614 + t615;
t560 = t366 * t335;
t286 = t352 + t560;
t627 = t286 / 0.2e1;
t626 = t306 / 0.2e1;
t625 = t308 / 0.2e1;
t624 = t337 / 0.2e1;
t623 = -t363 / 0.2e1;
t621 = t364 / 0.2e1;
t620 = t366 / 0.2e1;
t619 = -t367 / 0.2e1;
t617 = pkin(3) * t367;
t613 = -qJD(4) / 0.2e1;
t140 = pkin(3) * t576 + t165;
t556 = t367 * t293;
t141 = t556 + (-t368 * pkin(8) + t364 * t417) * t362;
t309 = pkin(6) * t577 - t368 * t500;
t292 = -t612 * pkin(2) + t309;
t435 = t306 * pkin(3) - t308 * pkin(8);
t370 = t292 + t435;
t65 = t141 * t363 - t366 * t370;
t33 = -t140 * t233 + t306 * t65;
t611 = qJD(1) * t33;
t66 = t366 * t141 + t363 * t370;
t34 = t140 * t235 - t306 * t66;
t610 = qJD(1) * t34;
t95 = -t165 * t576 - t292 * t306;
t609 = qJD(1) * t95;
t166 = t364 * t392 + t556;
t96 = -t166 * t576 - t292 * t308;
t608 = qJD(1) * t96;
t12 = t140 * t166 - t65 * t97 + t66 * t98;
t607 = t12 * qJD(1);
t13 = -t233 * t98 - t235 * t97 + (t66 * t363 - t65 * t366) * t306;
t606 = t13 * qJD(1);
t208 = t453 + (pkin(6) + t335) * t576;
t561 = t366 * t208;
t310 = (pkin(2) * t365 - pkin(7) * t368) * t362;
t297 = t364 * t310;
t298 = t367 * t309;
t194 = -t298 + t297;
t169 = pkin(8) * t577 + t194;
t574 = t363 * t169;
t100 = t561 - t574;
t563 = t366 * t169;
t572 = t363 * t208;
t101 = t563 + t572;
t14 = -t100 * t235 - t101 * t233 - t273 * t66 + t274 * t65;
t605 = t14 * qJD(1);
t604 = t140 * t363;
t603 = t140 * t366;
t555 = t367 * t310;
t567 = t364 * t309;
t193 = t555 + t567;
t168 = -pkin(3) * t577 - t193;
t15 = -t100 * t65 + t101 * t66 + t140 * t168;
t602 = t15 * qJD(1);
t601 = t166 * t364;
t600 = t168 * t363;
t599 = t168 * t366;
t19 = t166 * t233 - t308 * t65 + (t97 - t604) * t306;
t598 = t19 * qJD(1);
t20 = t166 * t235 - t308 * t66 + (-t98 - t603) * t306;
t597 = t20 * qJD(1);
t506 = t364 * t576;
t21 = t100 * t306 + t140 * t273 + t168 * t233 - t65 * t506;
t596 = t21 * qJD(1);
t22 = -t101 * t306 + t140 * t274 + t168 * t235 - t66 * t506;
t595 = t22 * qJD(1);
t594 = t233 * t364;
t588 = t273 * t366;
t587 = t274 * t363;
t434 = -pkin(8) * t364 - t617;
t416 = -pkin(2) + t434;
t568 = t363 * t367;
t513 = pkin(7) * t568;
t275 = -t366 * t416 + t513;
t586 = t275 * t367;
t558 = t366 * t367;
t511 = pkin(7) * t558;
t276 = t363 * t416 + t511;
t585 = t276 * t367;
t584 = t292 * t367;
t32 = -t193 * t308 - t194 * t306 + (t165 * t367 - t601) * t576;
t581 = t32 * qJD(1);
t35 = -t165 * t193 + t166 * t194 + t292 * t311;
t580 = t35 * qJD(1);
t356 = t362 ^ 2;
t361 = t368 ^ 2;
t579 = t356 * t361;
t578 = t356 * t368;
t176 = t363 * t306;
t570 = t363 * t335;
t566 = t364 * t366;
t41 = t165 * t577 + t193 * t576 - t292 * t506 - t311 * t306;
t553 = t41 * qJD(1);
t42 = t311 * t308 + (-t166 * t365 + (t194 + t584) * t368) * t362;
t552 = t42 * qJD(1);
t249 = t180 * t569;
t44 = t249 + (-t592 / 0.2e1 + t628) * t366 + (-t589 / 0.2e1 + t273 / 0.2e1) * t363;
t551 = t44 * qJD(1);
t78 = -t233 * t274 - t235 * t273;
t550 = t78 * qJD(1);
t424 = t591 + t593;
t81 = t424 * t306;
t549 = t81 * qJD(1);
t360 = t367 ^ 2;
t345 = t360 - t358;
t472 = t568 / 0.2e1;
t386 = t233 * t472 + t357 * t479;
t104 = t588 / 0.2e1 + t386;
t548 = qJD(1) * t104;
t468 = t558 / 0.2e1;
t385 = t235 * t468 + t359 * t479;
t106 = -t587 / 0.2e1 + t385;
t547 = qJD(1) * t106;
t107 = t233 * t308 - t635 * t363;
t546 = qJD(1) * t107;
t108 = t235 * t308 - t635 * t366;
t545 = qJD(1) * t108;
t476 = -t576 / 0.2e1;
t444 = t363 * t476;
t471 = t566 / 0.2e1;
t109 = t624 + t306 * t471 + (t444 + t630) * t367;
t544 = qJD(1) * t109;
t467 = t557 / 0.2e1;
t381 = (t367 * t467 + t565 / 0.2e1) * t362;
t110 = t381 - t390;
t543 = qJD(1) * t110;
t542 = qJD(1) * t176;
t541 = qJD(1) * t180;
t540 = qJD(1) * t233;
t538 = qJD(2) * t362;
t537 = qJD(3) * t363;
t536 = qJD(3) * t364;
t534 = qJD(3) * t367;
t533 = qJD(4) * t306;
t532 = qJD(4) * t363;
t531 = qJD(4) * t366;
t530 = qJD(4) * t367;
t113 = -t233 * t506 - t273 * t306;
t529 = t113 * qJD(1);
t114 = t235 * t506 + t274 * t306;
t528 = t114 * qJD(1);
t129 = -t306 * t367 - t308 * t364;
t157 = t129 * t576;
t527 = t157 * qJD(1);
t223 = -t306 * t577 + t364 * t579;
t526 = t223 * qJD(1);
t224 = -t308 * t577 + t367 * t579;
t525 = t224 * qJD(1);
t239 = pkin(1) * t578 - t309 * t612;
t524 = t239 * qJD(1);
t240 = -t356 * pkin(1) * t365 - t311 * t612;
t523 = t240 * qJD(1);
t521 = t306 * qJD(3);
t520 = t308 * qJD(3);
t517 = t312 * qJD(4);
t317 = (-t365 ^ 2 + t361) * t356;
t516 = t317 * qJD(1);
t515 = t364 * qJD(2);
t512 = pkin(7) * t566;
t510 = -pkin(2) * t308 / 0.2e1;
t509 = pkin(3) * t631;
t508 = pkin(3) * t630;
t507 = t365 * t578;
t503 = t306 * t568;
t502 = t306 * t558;
t501 = t66 * t619;
t498 = t233 * t522;
t497 = t235 * t522;
t495 = qJD(1) * t576;
t494 = t368 * t538;
t493 = t363 * t515;
t492 = t366 * t515;
t491 = qJD(3) * t576;
t490 = t363 * t530;
t489 = t366 * t530;
t488 = t365 * t538;
t487 = t363 * t531;
t486 = t364 * t534;
t485 = t140 * t619;
t483 = t235 * t621;
t481 = -t588 / 0.2e1;
t480 = t587 / 0.2e1;
t478 = -t577 / 0.2e1;
t477 = t577 / 0.2e1;
t475 = t576 / 0.2e1;
t474 = t176 / 0.2e1;
t470 = -t563 / 0.2e1;
t466 = t140 / 0.2e1 - t165 / 0.2e1;
t465 = t297 / 0.2e1 - t298 / 0.2e1;
t463 = t612 * qJD(1);
t456 = pkin(7) * t475;
t455 = -qJD(4) - t522;
t454 = -qJD(4) + t514;
t452 = t364 * t348;
t451 = t358 * t487;
t450 = qJD(2) * t507;
t449 = t364 * t495;
t448 = t367 * t495;
t447 = t363 * t492;
t446 = t364 * t476;
t445 = t364 * t475;
t443 = t363 * t475;
t442 = t362 * t467;
t439 = t616 / 0.2e1 + t207 / 0.2e1;
t438 = t362 * t463;
t437 = t612 * t538;
t433 = 0.2e1 * t447;
t432 = pkin(8) * t446;
t431 = -qJD(3) + t495;
t430 = -t363 * t97 + t366 * t98;
t287 = -t512 + t570;
t397 = t235 * t627 + t287 * t631;
t401 = t276 * t626 + t501;
t402 = t275 * t626 + t65 * t619;
t1 = (pkin(8) * t629 + t101 / 0.2e1 + t97 * t621 + t402) * t366 + (pkin(8) * t274 / 0.2e1 - t100 / 0.2e1 + t98 * t621 - t401) * t363 + t397;
t75 = (t286 * t364 - t586) * t366 + (t287 * t364 + t585) * t363;
t429 = -t1 * qJD(1) - t75 * qJD(2);
t369 = t65 * t627 - t66 * t287 / 0.2e1 + t275 * t633 + t276 * t632 + pkin(7) * t485 + t601 * t634;
t400 = t100 * t623 + t101 * t620;
t371 = t400 * pkin(8) - t168 * pkin(3) / 0.2e1;
t3 = t369 + t371;
t94 = pkin(7) ^ 2 * t364 * t367 - t275 * t286 + t276 * t287;
t428 = -t3 * qJD(1) + t94 * qJD(2);
t134 = t275 * t364 + (t286 - 0.2e1 * t352) * t367;
t376 = t275 * t625 - t286 * t306 / 0.2e1 + t65 * t621;
t384 = pkin(8) * t476 + pkin(7) * t626 - t166 / 0.2e1;
t409 = pkin(3) * t629 - t599 / 0.2e1;
t8 = (t233 * t634 + t633) * t367 + (t384 * t364 + t485) * t363 + t376 + t409;
t427 = -t8 * qJD(1) - t134 * qJD(2);
t135 = t287 * t367 + (-t276 + 0.2e1 * t511) * t364;
t398 = t276 * t625 + t287 * t626;
t407 = pkin(7) * t630 - t603 / 0.2e1;
t408 = pkin(3) * t628 + t600 / 0.2e1;
t9 = (t632 + t407) * t367 + (t66 / 0.2e1 + t384 * t366) * t364 + t398 + t408;
t426 = -t9 * qJD(1) + t135 * qJD(2);
t425 = -t193 * t364 + t194 * t367;
t423 = -t286 * t363 + t287 * t366;
t422 = t463 + qJD(2);
t227 = -pkin(7) * t358 * t363 - t586;
t375 = pkin(7) * t594 / 0.2e1 - t402;
t24 = t470 + (-t208 / 0.2e1 + t140 * t621) * t363 + t375;
t421 = qJD(1) * t24 - qJD(2) * t227;
t228 = -pkin(7) * t559 - t585;
t395 = -t574 / 0.2e1 + t561 / 0.2e1;
t23 = t364 * t407 + t395 + t401;
t420 = qJD(1) * t23 + qJD(2) * t228;
t324 = t345 * t363;
t68 = t503 + (t442 + t583 / 0.2e1 + t631) * t364;
t419 = -qJD(1) * t68 + qJD(2) * t324;
t325 = t360 * t366 - t559;
t67 = -t502 + (t443 - t582 / 0.2e1 + t630) * t364;
t418 = -qJD(1) * t67 - qJD(2) * t325;
t415 = t454 * t364;
t159 = -t308 ^ 2 + t635;
t414 = qJD(1) * t159 + qJD(2) * t129;
t413 = qJD(1) * t129 + qJD(2) * t345;
t412 = -t514 + t522;
t411 = qJD(1) * t308 + t515;
t410 = t614 / 0.2e1 - t615 / 0.2e1;
t299 = t367 * t477 + t464 / 0.2e1;
t406 = t299 * qJD(1) + t515 / 0.2e1;
t92 = t510 + (t456 - t310 / 0.2e1) * t367 + (t292 / 0.2e1 - t309 / 0.2e1) * t364;
t405 = pkin(2) * t515 - qJD(1) * t92;
t372 = pkin(2) * t626 + t584 / 0.2e1 + pkin(7) * t446;
t90 = t372 + t465;
t404 = pkin(2) * t514 - qJD(1) * t90;
t403 = t362 * t436;
t391 = t364 * t613 + t458;
t389 = -t335 / 0.2e1 + t410;
t74 = (-t571 + t590) * t364;
t99 = t233 ^ 2 - t235 ^ 2;
t388 = qJD(1) * t99 - qJD(2) * t74 - qJD(3) * t424;
t231 = t389 * t363;
t36 = t439 * t363 + t466 * t366 + t509;
t383 = pkin(3) * t535 - qJD(1) * t36 + qJD(2) * t231;
t232 = t389 * t366;
t38 = t466 * t363 - t439 * t366 + t508;
t382 = pkin(3) * t537 - qJD(1) * t38 - qJD(2) * t232;
t380 = (t364 * t494 + t520) * t306;
t377 = qJD(4) * t299 + t648;
t323 = t344 * t358;
t374 = qJD(1) * t74 + qJD(2) * t323 + 0.2e1 * t452;
t373 = qJD(1) * t424 + t433 - t640;
t354 = t536 / 0.2e1;
t336 = qJD(2) * t477;
t332 = qJD(1) * t507;
t328 = -0.2e1 * t364 * t487;
t294 = qJD(3) * t478 + t332;
t230 = qJD(2) * t445 + t299 * qJD(3);
t206 = t352 + t560 / 0.2e1 + t410 * t366;
t205 = t512 - t570 / 0.2e1 - t410 * t363;
t124 = t129 * qJD(3);
t112 = t367 * t444 + t624 + t645;
t111 = t381 + t390;
t105 = t480 + t385;
t103 = t481 + t386;
t93 = t367 * t456 + t510 + t292 * t621 + t567 / 0.2e1 + t555 / 0.2e1;
t91 = t372 - t465;
t79 = t424 * qJD(4);
t73 = t74 * qJD(4);
t70 = t308 * t471 + t364 * t443 + t483 + t502;
t69 = -t503 + t308 * t473 - t594 / 0.2e1 + t364 * t442;
t43 = t273 * t623 + t274 * t620 + t399 * t367 + t249;
t39 = pkin(8) * t469 + t508 + t604 / 0.2e1 + t575 / 0.2e1 + t562 / 0.2e1;
t37 = pkin(8) * t474 + t509 + t603 / 0.2e1 + t564 / 0.2e1 - t573 / 0.2e1;
t26 = pkin(7) * t483 + t140 * t471 + t395 - t401;
t25 = t140 * t473 + t470 - t572 / 0.2e1 - t375;
t11 = t645 * pkin(7) + t140 * t468 + t166 * t471 + t366 * t432 + t98 * t618 + t66 * t622 - t398 + t408;
t10 = t97 * t619 + t166 * t569 / 0.2e1 + t140 * t472 + t363 * t432 - t376 + t409 + t390 * pkin(7);
t4 = -t369 + t371;
t2 = t276 * t474 + t98 * t473 + t363 * t501 + t275 * t469 - t97 * t566 / 0.2e1 + t65 * t468 + (t481 + t480) * pkin(8) - t397 + t400;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t450, t317 * qJD(2), t368 * t437, -t450, -t365 * t437, 0, t240 * qJD(2), -t239 * qJD(2), 0, 0, (t367 * t494 - t521) * t308, qJD(2) * t157 + qJD(3) * t159, -t224 * qJD(2) + t306 * t491, t380, t223 * qJD(2) + t308 * t491, -t450, -qJD(2) * t41 - qJD(3) * t96, qJD(2) * t42 + qJD(3) * t95, qJD(2) * t32, qJD(2) * t35, (qJD(2) * t274 - qJD(4) * t233 - t366 * t521) * t235, qJD(2) * t78 + qJD(3) * t81 + qJD(4) * t99, qJD(2) * t114 + qJD(3) * t108 - t233 * t533, (qJD(2) * t273 + qJD(4) * t235 - t363 * t521) * t233, qJD(2) * t113 - qJD(3) * t107 - t235 * t533, t380, qJD(2) * t21 + qJD(3) * t19 + qJD(4) * t34, qJD(2) * t22 + qJD(3) * t20 + qJD(4) * t33, qJD(2) * t14 + qJD(3) * t13, qJD(2) * t15 + qJD(3) * t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t332, t516, t422 * t576, -t332, -t422 * t577, 0, -qJD(2) * t311 + t523, qJD(2) * t309 - t524, 0, 0, t362 * t411 * t554 + t649, t345 * t494 + t124 + t527, t364 * t488 - t525, t412 * t506 - t649, t367 * t488 + t526, -t294, -t553 + (-t311 * t367 + t364 * t403) * qJD(2) + t93 * qJD(3), t552 + (t311 * t364 + t367 * t403) * qJD(2) + t91 * qJD(3), qJD(2) * t425 + t581, t580 + (-pkin(2) * t311 + pkin(7) * t425) * qJD(2), qJD(3) * t105 + t639 + (t492 + t539) * t274, t550 + t43 * qJD(3) - t73 + (-t587 - t588) * t515, t528 + (-t274 * t367 + t358 * t504) * qJD(2) + t70 * qJD(3) + t111 * qJD(4), qJD(3) * t103 - t639 + (t493 + t540) * t273, t529 + (t273 * t367 - t358 * t505) * qJD(2) + t69 * qJD(3) + t112 * qJD(4), -t649 + (qJD(4) / 0.2e1 + t412) * t506, -t100 * t514 + t596 + t10 * qJD(3) + t26 * qJD(4) + (pkin(7) * t273 - t275 * t576 + t600) * t515, t101 * t514 + t595 + t11 * qJD(3) + t25 * qJD(4) + (pkin(7) * t274 - t276 * t576 + t599) * t515, t605 + (-t273 * t276 + t274 * t275 + (-t100 * t366 - t101 * t363) * t364) * qJD(2) + t2 * qJD(3), t602 + (pkin(7) * t168 * t364 - t100 * t275 + t101 * t276) * qJD(2) + t4 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t648, t414, t431 * t306, t648, t431 * t308, t336, qJD(2) * t93 - qJD(3) * t166 - t608, qJD(2) * t91 + qJD(3) * t165 + t609, 0, 0, qJD(2) * t105 + t650 + (-t537 - t539) * t180, t43 * qJD(2) - t344 * t521 + t549 - t79, qJD(2) * t70 + t363 * t520 + t545, qJD(2) * t103 - t650 + (t535 - t540) * t176, qJD(2) * t69 + t366 * t520 - t546, t377, t598 + t10 * qJD(2) + (-t166 * t366 + t363 * t435) * qJD(3) + t39 * qJD(4), t597 + t11 * qJD(2) + (t166 * t363 + t366 * t435) * qJD(3) + t37 * qJD(4), t2 * qJD(2) + qJD(3) * t430 + t606, t607 + t4 * qJD(2) + (-pkin(3) * t166 + pkin(8) * t430) * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t647, t388, qJD(2) * t111 + t233 * t455, t647, qJD(2) * t112 + t235 * t455, t230, qJD(2) * t26 + qJD(3) * t39 - qJD(4) * t66 + t610, qJD(2) * t25 + qJD(3) * t37 + qJD(4) * t65 + t611, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t332, -t516, -t368 * t438, t332, t365 * t438, 0, -t523, t524, 0, 0, -t308 * t448 + t649, t124 - t527, -t367 * t491 + t525, -t306 * t449 - t649, t364 * t491 - t526, t294, qJD(3) * t92 + t553, qJD(3) * t90 - t552, -t581, -t580, qJD(3) * t106 - t274 * t539 + t639, qJD(3) * t44 - t550 - t73, -qJD(3) * t67 - qJD(4) * t110 - t528, qJD(3) * t104 - t273 * t540 - t639, -qJD(3) * t68 - qJD(4) * t109 - t529, -t649 + (-t522 + t613) * t506, -qJD(3) * t8 - qJD(4) * t23 - t596, -qJD(3) * t9 - qJD(4) * t24 - t595, -qJD(3) * t1 - t605, -qJD(3) * t3 - t602; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t486, t345 * qJD(3), 0, -t486, 0, 0, -pkin(2) * t536, -pkin(2) * t534, 0, 0, t359 * t486 - t451, -qJD(4) * t323 - 0.2e1 * t367 * t452, -qJD(3) * t325 + t364 * t490, t357 * t486 + t451, qJD(3) * t324 + t364 * t489, -t486, -qJD(3) * t134 - qJD(4) * t228, qJD(3) * t135 + qJD(4) * t227, -qJD(3) * t75, qJD(3) * t94; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t458, t413, -t431 * t367, -t458, t431 * t364, qJD(1) * t478, -pkin(7) * t534 - t405, pkin(7) * t536 - t404, 0, 0, t547 - t517 + (t359 * t515 + t348) * t367, t551 + t328 + (-0.2e1 * t447 + t640) * t367, t363 * t536 + t418, t548 + t517 + (t357 * t515 - t348) * t367, t364 * t535 + t419, -t391, (t363 * t434 - t511) * qJD(3) + t206 * qJD(4) + t427, (t366 * t434 + t513) * qJD(3) + t205 * qJD(4) + t426, qJD(3) * t423 + t429, (-pkin(7) * t617 + pkin(8) * t423) * qJD(3) + t428; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t651, -t374, t363 * t415 - t543, t651, t366 * t415 - t544, qJD(1) * t446 + t354, qJD(3) * t206 - qJD(4) * t276 - t420, qJD(3) * t205 + qJD(4) * t275 - t421, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t648, -t414, -t412 * t576, -t648, -t411 * t576, t336, -qJD(2) * t92 + t608, -qJD(2) * t90 - t609, 0, 0, -qJD(2) * t106 + t366 * t497 + t650, -qJD(2) * t44 - t549 - t79, qJD(2) * t67 + qJD(4) * t180 - t545, -qJD(2) * t104 + t363 * t498 - t650, qJD(2) * t68 - qJD(4) * t176 + t546, -t377, qJD(2) * t8 + qJD(4) * t38 - t598, qJD(2) * t9 + qJD(4) * t36 - t597, qJD(2) * t1 - t606, qJD(2) * t3 - t607; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t458, -t413, t448, t458, -t449, qJD(1) * t477, t405, t404, 0, 0, -t349 * t359 - t517 - t547, t367 * t433 + t328 - t551, -t418 - t489, -t349 * t357 + t517 - t548, -t419 + t490, t391, qJD(4) * t232 - t427, -qJD(4) * t231 - t426, -t429, -t428; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t487, t344 * qJD(4), 0, -t487, 0, 0, -pkin(3) * t532, -pkin(3) * t531, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t646, -t373, -t366 * t454 + t541, t646, t363 * t454 - t542, -t406, -pkin(8) * t531 - t382, pkin(8) * t532 - t383, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t647, -t388, qJD(2) * t110 - qJD(3) * t180 + t498, -t647, qJD(2) * t109 + qJD(3) * t176 + t497, t230, qJD(2) * t23 - qJD(3) * t38 - t610, qJD(2) * t24 - qJD(3) * t36 - t611, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t651, t374, t543 + (-t493 + t535) * t367, -t651, t544 + (-t492 - t537) * t367, qJD(1) * t445 + t354, -qJD(3) * t232 + t420, qJD(3) * t231 + t421, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t646, t373, t366 * t514 - t541, -t646, -t363 * t514 + t542, t406, t382, t383, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t5;
