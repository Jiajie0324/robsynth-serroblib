% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RRRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:31
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RRRR6_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRRR6_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRRR6_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRRR6_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRRR6_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S4RRRR6_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:31:13
% EndTime: 2019-12-31 17:31:25
% DurationCPUTime: 13.23s
% Computational Cost: add. (66446->591), mult. (146085->899), div. (0->0), fcn. (112520->10), ass. (0->434)
t1028 = cos(pkin(4));
t1120 = t1028 * qJDD(1);
t1020 = qJDD(2) + t1120;
t1030 = sin(qJ(3));
t1034 = cos(qJ(3));
t1027 = sin(pkin(4));
t1031 = sin(qJ(2));
t1119 = t1031 * qJDD(1);
t1035 = cos(qJ(2));
t1124 = t1035 * qJD(1);
t996 = (qJD(2) * t1124 + t1119) * t1027;
t1107 = t1034 * t1020 - t1030 * t996;
t1126 = t1028 * qJD(1);
t1104 = qJD(2) + t1126;
t1127 = t1027 * t1031;
t1112 = qJD(1) * t1127;
t989 = t1030 * t1104 + t1034 * t1112;
t1060 = t989 * qJD(3) - t1107;
t1019 = t1027 * t1124;
t1123 = t1019 - qJD(3);
t977 = t1123 * t989;
t1160 = t1060 - t977;
t1029 = sin(qJ(4));
t1033 = cos(qJ(4));
t964 = t1029 * t989 + t1033 * t1123;
t966 = -t1029 * t1123 + t1033 * t989;
t932 = t966 * t964;
t945 = qJDD(4) + t1060;
t1157 = -t932 + t945;
t1159 = t1029 * t1157;
t1158 = t1033 * t1157;
t1102 = t1104 ^ 2;
t1118 = t1123 ^ 2;
t1065 = -t1030 * t1020 - t1034 * t996;
t987 = t1030 * t1112 - t1034 * t1104;
t947 = -t987 * qJD(3) - t1065;
t976 = t1123 * t987;
t921 = t947 + t976;
t1148 = t989 * t987;
t1016 = qJD(2) * t1112;
t1121 = qJDD(1) * t1035;
t1092 = t1027 * t1121 - t1016;
t991 = -qJDD(3) + t1092;
t1044 = -t991 - t1148;
t1156 = t1030 * t1044;
t1155 = t1034 * t1044;
t962 = t964 ^ 2;
t963 = t966 ^ 2;
t983 = qJD(4) + t987;
t981 = t983 ^ 2;
t985 = t987 ^ 2;
t986 = t989 ^ 2;
t1154 = pkin(2) * t1031;
t1153 = pkin(3) * t1030;
t1152 = pkin(6) * t1027;
t1151 = t1028 * g(3);
t1150 = t1035 * pkin(2);
t1149 = t1035 * g(3);
t1032 = sin(qJ(1));
t1036 = cos(qJ(1));
t1014 = t1032 * g(1) - t1036 * g(2);
t1037 = qJD(1) ^ 2;
t1042 = qJDD(1) * pkin(1) + t1037 * t1152 + t1014;
t1064 = t1104 * qJD(1);
t1057 = t1031 * t1064;
t1058 = t1035 * t1064;
t1039 = t1016 * pkin(2) - t996 * pkin(7) - t1151 + (-pkin(7) * t1058 + (t1057 - t1121) * pkin(2) - t1042) * t1027;
t1041 = t1028 * t1042;
t1040 = -g(3) * t1127 + t1031 * t1041;
t1131 = qJD(1) * t1027;
t1015 = t1036 * g(1) + t1032 * g(2);
t992 = -t1037 * pkin(1) + qJDD(1) * t1152 - t1015;
t1100 = -pkin(7) * t1031 - t1150;
t995 = t1100 * t1131;
t910 = t1020 * pkin(7) - t1102 * pkin(2) + (t995 * t1131 + t992) * t1035 + t1040;
t859 = t1030 * t1039 + t1034 * t910;
t858 = t1030 * t910 - t1034 * t1039;
t956 = t987 * pkin(3) - t989 * pkin(8);
t821 = t991 * pkin(3) - t1118 * pkin(8) + t989 * t956 + t858;
t1147 = t1029 * t821;
t885 = t932 + t945;
t1146 = t1029 * t885;
t1145 = t1029 * t983;
t1108 = t1031 * t992 - t1035 * t1041;
t909 = -t1020 * pkin(2) - t1102 * pkin(7) + (t1031 * qJD(1) * t995 + t1149) * t1027 + t1108;
t1144 = t1030 * t909;
t940 = t991 - t1148;
t1143 = t1030 * t940;
t979 = t1027 * t1042 + t1151;
t1142 = t1031 * t979;
t1125 = t1031 * t1037;
t1024 = t1027 ^ 2;
t1130 = t1024 * t1035;
t1013 = t1125 * t1130;
t993 = t1013 + t1020;
t1141 = t1031 * t993;
t994 = -t1013 + t1020;
t1140 = t1031 * t994;
t1139 = t1033 * t821;
t1138 = t1033 * t885;
t1137 = t1033 * t983;
t1136 = t1034 * t909;
t1135 = t1034 * t940;
t1134 = t1035 * t979;
t1133 = t1035 * t993;
t1132 = t1035 * t994;
t1129 = t1024 * t1037;
t1128 = t1027 * t1020;
t1025 = t1031 ^ 2;
t1026 = t1035 ^ 2;
t1122 = t1025 + t1026;
t1117 = t1030 * t932;
t1116 = t1031 * t1148;
t1115 = t1034 * t932;
t1114 = t1035 * t1148;
t1113 = -pkin(3) * t1034 - pkin(2);
t1111 = t1025 * t1129;
t1110 = t1026 * t1129;
t822 = -t1118 * pkin(3) - t991 * pkin(8) - t987 * t956 + t859;
t826 = t1160 * pkin(3) - t921 * pkin(8) + t909;
t774 = t1029 * t822 - t1033 * t826;
t775 = t1029 * t826 + t1033 * t822;
t746 = t1029 * t774 + t1033 * t775;
t1109 = -t1029 * t947 - t1033 * t991;
t797 = t1030 * t858 + t1034 * t859;
t1106 = t1030 * t1123;
t1105 = t1034 * t1123;
t1103 = -t1032 * t1014 - t1036 * t1015;
t1101 = -pkin(3) * t821 + pkin(8) * t746;
t1012 = t1036 * qJDD(1) - t1032 * t1037;
t1099 = -pkin(5) * t1012 - t1032 * g(3);
t1098 = t987 * t1106;
t1097 = t989 * t1106;
t1096 = t987 * t1105;
t1095 = t989 * t1105;
t982 = -t1111 - t1102;
t955 = -t1031 * t982 - t1132;
t1094 = pkin(6) * t955 - t1142;
t1000 = -t1102 - t1110;
t961 = t1035 * t1000 - t1141;
t1093 = pkin(6) * t961 + t1134;
t745 = t1029 * t775 - t1033 * t774;
t1091 = t1029 * t991 - t1033 * t947;
t796 = t1030 * t859 - t1034 * t858;
t734 = t1030 * t821 + t1034 * t746;
t1090 = t1031 * t734 - t1035 * t745;
t870 = (-qJD(4) + t983) * t966 + t1109;
t892 = -t964 * qJD(4) - t1091;
t943 = t983 * t964;
t872 = t892 + t943;
t805 = t1029 * t872 + t1033 * t870;
t893 = t962 + t963;
t783 = -t1030 * t893 + t1034 * t805;
t803 = t1029 * t870 - t1033 * t872;
t1089 = t1031 * t783 - t1035 * t803;
t891 = -t966 * qJD(4) + t1109;
t944 = t983 * t966;
t869 = t891 - t944;
t871 = t892 - t943;
t804 = -t1029 * t871 + t1033 * t869;
t931 = t963 - t962;
t787 = t1030 * t931 + t1034 * t804;
t802 = t1029 * t869 + t1033 * t871;
t1088 = t1031 * t787 - t1035 * t802;
t901 = -t981 - t962;
t839 = t1033 * t901 - t1159;
t791 = -t1030 * t869 + t1034 * t839;
t838 = t1029 * t901 + t1158;
t1087 = t1031 * t791 - t1035 * t838;
t924 = -t963 - t981;
t844 = -t1029 * t924 - t1138;
t873 = (qJD(4) + t983) * t964 + t1091;
t795 = -t1030 * t873 + t1034 * t844;
t843 = t1033 * t924 - t1146;
t1086 = t1031 * t795 - t1035 * t843;
t1085 = t1031 * t797 - t1035 * t909;
t939 = -t963 + t981;
t855 = -t1029 * t939 + t1158;
t800 = t1030 * t872 + t1034 * t855;
t853 = t1033 * t939 + t1159;
t1084 = t1031 * t800 - t1035 * t853;
t938 = t962 - t981;
t856 = t1033 * t938 - t1146;
t868 = -t891 - t944;
t801 = -t1030 * t868 + t1034 * t856;
t854 = t1029 * t938 + t1138;
t1083 = t1031 * t801 - t1035 * t854;
t865 = -t1029 * t891 + t964 * t1137;
t829 = t1034 * t865 - t1117;
t864 = -t1033 * t891 - t964 * t1145;
t1082 = t1031 * t829 + t1035 * t864;
t867 = t1033 * t892 - t966 * t1145;
t830 = t1034 * t867 + t1117;
t866 = t1029 * t892 + t966 * t1137;
t1081 = t1031 * t830 - t1035 * t866;
t888 = (t1029 * t966 - t1033 * t964) * t983;
t863 = t1030 * t945 + t1034 * t888;
t887 = (-t1029 * t964 - t1033 * t966) * t983;
t1080 = t1031 * t863 - t1035 * t887;
t876 = -t1030 * t921 - t1034 * t1160;
t957 = t986 - t985;
t1079 = t1031 * t876 - t1035 * t957;
t920 = -t1019 * t989 + t1107;
t922 = t947 - t976;
t877 = t1030 * t922 + t1034 * t920;
t937 = t985 + t986;
t1078 = t1031 * t877 + t1035 * t937;
t952 = -t1118 - t985;
t890 = t1034 * t952 - t1156;
t1077 = t1031 * t890 - t1035 * t1160;
t958 = -t986 - t1118;
t896 = -t1030 * t958 + t1135;
t923 = (0.2e1 * qJD(3) - t1019) * t987 + t1065;
t1076 = t1031 * t896 + t1035 * t923;
t970 = -t986 + t1118;
t899 = -t1030 * t970 + t1155;
t1075 = t1031 * t899 - t1035 * t922;
t969 = t985 - t1118;
t900 = t1034 * t969 + t1143;
t918 = t1060 + t977;
t1074 = t1031 * t900 + t1035 * t918;
t936 = t1096 - t1097;
t1073 = t1031 * t936 + t1035 * t991;
t953 = t1027 * t1149 + t1108;
t954 = t1035 * t992 + t1040;
t1072 = t1031 * t954 - t1035 * t953;
t894 = t1031 * t953 + t1035 * t954;
t1004 = t1027 * t1058;
t972 = t1004 + t996;
t1003 = t1027 * t1057;
t975 = -t1003 + t1092;
t1071 = t1031 * t975 + t1035 * t972;
t973 = -t1004 + t996;
t974 = t1003 + t1092;
t1070 = t1031 * t974 - t1035 * t973;
t1069 = t1035 * t982 - t1140;
t998 = t1102 - t1111;
t1068 = t1035 * t998 + t1141;
t999 = -t1102 + t1110;
t1067 = t1031 * t999 + t1132;
t1066 = t1000 * t1031 + t1133;
t1063 = t1036 * t1014 - t1032 * t1015;
t913 = t1030 * t1060 - t1096;
t1062 = t1031 * t913 + t1114;
t915 = t1034 * t947 + t1097;
t1061 = t1031 * t915 - t1114;
t1059 = t1027 * t1064;
t1056 = pkin(3) * t873 + pkin(8) * t844 + t1147;
t1055 = pkin(3) * t869 + pkin(8) * t839 - t1139;
t733 = t1030 * t746 - t1034 * t821;
t716 = -pkin(7) * t733 + (-pkin(8) * t1034 + t1153) * t745;
t717 = -pkin(2) * t733 - t1101;
t722 = t1031 * t745 + t1035 * t734;
t1054 = pkin(6) * t722 + t1031 * t716 + t1035 * t717;
t732 = -pkin(8) * t803 - t745;
t782 = t1030 * t805 + t1034 * t893;
t723 = -pkin(7) * t782 + t1034 * t732 + t803 * t1153;
t1047 = pkin(3) * t893 + pkin(8) * t805 + t746;
t724 = -pkin(2) * t782 - t1047;
t759 = t1031 * t803 + t1035 * t783;
t1053 = pkin(6) * t759 + t1031 * t723 + t1035 * t724;
t761 = -pkin(3) * t838 + t774;
t776 = -pkin(8) * t838 + t1147;
t790 = t1030 * t839 + t1034 * t869;
t729 = -pkin(7) * t790 - t1030 * t761 + t1034 * t776;
t747 = -pkin(2) * t790 - t1055;
t767 = t1031 * t838 + t1035 * t791;
t1052 = pkin(6) * t767 + t1031 * t729 + t1035 * t747;
t762 = -pkin(3) * t843 + t775;
t779 = -pkin(8) * t843 + t1139;
t794 = t1030 * t844 + t1034 * t873;
t730 = -pkin(7) * t794 - t1030 * t762 + t1034 * t779;
t748 = -pkin(2) * t794 - t1056;
t769 = t1031 * t843 + t1035 * t795;
t1051 = pkin(6) * t769 + t1031 * t730 + t1035 * t748;
t889 = t1030 * t952 + t1155;
t811 = -pkin(2) * t889 + t858;
t845 = -pkin(7) * t889 + t1144;
t849 = t1031 * t1160 + t1035 * t890;
t1050 = pkin(6) * t849 + t1031 * t845 + t1035 * t811;
t895 = t1034 * t958 + t1143;
t814 = -pkin(2) * t895 + t859;
t850 = -pkin(7) * t895 + t1136;
t851 = -t1031 * t923 + t1035 * t896;
t1049 = pkin(6) * t851 + t1031 * t850 + t1035 * t814;
t933 = t1031 * t973 + t1035 * t974;
t1048 = pkin(6) * t933 + t894;
t875 = t1030 * t920 - t1034 * t922;
t772 = -pkin(7) * t875 - t796;
t833 = -t1031 * t937 + t1035 * t877;
t1046 = pkin(6) * t833 + t1031 * t772 - t875 * t1150;
t1045 = -t1028 * t1037 + t1064;
t780 = t1031 * t909 + t1035 * t797;
t1043 = pkin(6) * t780 + t1100 * t796;
t1023 = t1027 * t1024;
t1011 = t1032 * qJDD(1) + t1036 * t1037;
t1008 = t1028 * t1020;
t1002 = t1122 * t1129;
t1001 = (t1025 - t1026) * t1129;
t997 = -pkin(5) * t1011 + t1036 * g(3);
t978 = t1104 * t1122 * t1131;
t971 = (t1119 + (0.2e1 * qJD(2) + t1126) * t1124) * t1027;
t968 = -t1025 * t1059 + t1035 * t996;
t967 = -t1026 * t1059 - t1031 * t1092;
t960 = t1035 * t999 - t1140;
t959 = -t1031 * t998 + t1133;
t951 = (t1028 * t996 + (t1023 * t1037 + t1028 * t1059) * t1035) * t1031;
t950 = (t1027 * t996 + t1045 * t1130) * t1031;
t949 = (-t1024 * t1031 * t1045 + t1027 * t1092) * t1035;
t948 = (-t1023 * t1125 - t1028 * t1016 + (-t1028 * t1057 + t1035 * t1120) * t1027) * t1035;
t935 = t1098 + t1095;
t934 = -t1031 * t972 + t1035 * t975;
t930 = t1027 * t975 + t1028 * t1066;
t929 = -t1027 * t974 + t1028 * t1067;
t928 = -t1027 * t973 + t1028 * t1068;
t927 = t1027 * t1066 - t1028 * t975;
t926 = t1027 * t1067 + t1028 * t974;
t925 = t1027 * t1068 + t1028 * t973;
t917 = -t1027 * t971 + t1028 * t1069;
t916 = t1027 * t1069 + t1028 * t971;
t914 = t1030 * t947 - t1095;
t912 = -t1034 * t1060 - t1098;
t911 = -t1031 * t991 + t1035 * t936;
t908 = -t1027 * t1001 + t1028 * t1071;
t907 = t1027 * t1002 + t1028 * t1070;
t906 = t1028 * t1001 + t1027 * t1071;
t905 = -t1028 * t1002 + t1027 * t1070;
t898 = t1030 * t969 - t1135;
t897 = t1034 * t970 + t1156;
t883 = t1035 * t915 + t1116;
t882 = t1035 * t913 - t1116;
t881 = t1027 * t979 + t1028 * t1072;
t880 = t1027 * t1072 - t1028 * t979;
t879 = -t1027 * t935 + t1028 * t1073;
t878 = t1027 * t1073 + t1028 * t935;
t874 = -t1030 * t1160 + t1034 * t921;
t862 = t1030 * t888 - t1034 * t945;
t861 = -t1031 * t918 + t1035 * t900;
t860 = t1031 * t922 + t1035 * t899;
t852 = -t1142 + (-t1027 * t927 - t1028 * t930) * pkin(6);
t848 = -t1134 + (-t1027 * t916 - t1028 * t917) * pkin(6);
t847 = -pkin(1) * t927 + t1027 * t953 + t1028 * t1093;
t846 = pkin(1) * t930 + t1027 * t1093 - t1028 * t953;
t842 = t1031 * t957 + t1035 * t876;
t841 = -pkin(1) * t916 + t1027 * t954 + t1028 * t1094;
t840 = pkin(1) * t917 + t1027 * t1094 - t1028 * t954;
t837 = -t1027 * t914 + t1028 * t1061;
t836 = -t1027 * t912 + t1028 * t1062;
t835 = t1027 * t1061 + t1028 * t914;
t834 = t1027 * t1062 + t1028 * t912;
t832 = pkin(1) * t881 + t894 * t1152;
t831 = t1028 * pkin(6) * t894 - pkin(1) * t880;
t828 = t1030 * t867 - t1115;
t827 = t1030 * t865 + t1115;
t824 = -pkin(1) * t905 + t1028 * t1048;
t823 = pkin(1) * t907 + t1027 * t1048;
t820 = pkin(2) * t923 + pkin(7) * t896 + t1144;
t819 = -t1027 * t898 + t1028 * t1074;
t818 = -t1027 * t897 + t1028 * t1075;
t817 = t1027 * t1074 + t1028 * t898;
t816 = t1027 * t1075 + t1028 * t897;
t815 = (-t1027 * t880 - t1028 * t881) * pkin(6);
t813 = -pkin(2) * t1160 + pkin(7) * t890 - t1136;
t812 = (-t1027 * t905 - t1028 * t907) * pkin(6) - t1072;
t810 = -t1027 * t895 + t1028 * t1076;
t809 = t1027 * t1076 + t1028 * t895;
t808 = t1031 * t887 + t1035 * t863;
t807 = -t1027 * t889 + t1028 * t1077;
t806 = t1027 * t1077 + t1028 * t889;
t799 = t1030 * t856 + t1034 * t868;
t798 = t1030 * t855 - t1034 * t872;
t793 = -t1027 * t874 + t1028 * t1079;
t792 = t1027 * t1079 + t1028 * t874;
t789 = -t1027 * t875 + t1028 * t1078;
t788 = t1027 * t1078 + t1028 * t875;
t786 = t1030 * t804 - t1034 * t931;
t785 = t1031 * t866 + t1035 * t830;
t784 = -t1031 * t864 + t1035 * t829;
t781 = -pkin(2) * t909 + pkin(7) * t797;
t778 = -t1027 * t862 + t1028 * t1080;
t777 = t1027 * t1080 + t1028 * t862;
t771 = t1031 * t854 + t1035 * t801;
t770 = t1031 * t853 + t1035 * t800;
t768 = pkin(2) * t937 + pkin(7) * t877 + t797;
t766 = -t1027 * t828 + t1028 * t1081;
t765 = -t1027 * t827 + t1028 * t1082;
t764 = t1027 * t1081 + t1028 * t828;
t763 = t1027 * t1082 + t1028 * t827;
t760 = t1031 * t802 + t1035 * t787;
t758 = -t1027 * t796 + t1028 * t1085;
t757 = t1027 * t1085 + t1028 * t796;
t756 = -t1027 * t799 + t1028 * t1083;
t755 = -t1027 * t798 + t1028 * t1084;
t754 = t1027 * t1083 + t1028 * t799;
t753 = t1027 * t1084 + t1028 * t798;
t752 = -t1027 * t794 + t1028 * t1086;
t751 = t1027 * t1086 + t1028 * t794;
t750 = -t1027 * t790 + t1028 * t1087;
t749 = t1027 * t1087 + t1028 * t790;
t744 = -t1031 * t814 + t1035 * t850 + (-t1027 * t809 - t1028 * t810) * pkin(6);
t743 = -t1031 * t811 + t1035 * t845 + (-t1027 * t806 - t1028 * t807) * pkin(6);
t742 = -t1027 * t786 + t1028 * t1088;
t741 = t1027 * t1088 + t1028 * t786;
t740 = -pkin(1) * t809 - t1027 * t820 + t1028 * t1049;
t739 = pkin(1) * t810 + t1027 * t1049 + t1028 * t820;
t738 = -t1027 * t782 + t1028 * t1089;
t737 = t1027 * t1089 + t1028 * t782;
t736 = -pkin(1) * t806 - t1027 * t813 + t1028 * t1050;
t735 = pkin(1) * t807 + t1027 * t1050 + t1028 * t813;
t731 = t875 * t1154 + t1035 * t772 + (-t1027 * t788 - t1028 * t789) * pkin(6);
t728 = -pkin(2) * t843 + pkin(7) * t795 + t1030 * t779 + t1034 * t762;
t727 = -pkin(2) * t838 + pkin(7) * t791 + t1030 * t776 + t1034 * t761;
t726 = -pkin(1) * t788 - t1027 * t768 + t1028 * t1046;
t725 = pkin(1) * t789 + t1027 * t1046 + t1028 * t768;
t721 = (-pkin(7) * t1035 + t1154) * t796 + (-t1027 * t757 - t1028 * t758) * pkin(6);
t720 = -pkin(1) * t757 - t1027 * t781 + t1028 * t1043;
t719 = pkin(1) * t758 + t1027 * t1043 + t1028 * t781;
t718 = pkin(7) * t783 + t1030 * t732 + t1113 * t803;
t715 = -t1027 * t733 + t1028 * t1090;
t714 = t1027 * t1090 + t1028 * t733;
t713 = pkin(7) * t734 + (-pkin(8) * t1030 + t1113) * t745;
t712 = -t1031 * t748 + t1035 * t730 + (-t1027 * t751 - t1028 * t752) * pkin(6);
t711 = -t1031 * t747 + t1035 * t729 + (-t1027 * t749 - t1028 * t750) * pkin(6);
t710 = -pkin(1) * t751 - t1027 * t728 + t1028 * t1051;
t709 = pkin(1) * t752 + t1027 * t1051 + t1028 * t728;
t708 = -pkin(1) * t749 - t1027 * t727 + t1028 * t1052;
t707 = pkin(1) * t750 + t1027 * t1052 + t1028 * t727;
t706 = -t1031 * t724 + t1035 * t723 + (-t1027 * t737 - t1028 * t738) * pkin(6);
t705 = -pkin(1) * t737 - t1027 * t718 + t1028 * t1053;
t704 = pkin(1) * t738 + t1027 * t1053 + t1028 * t718;
t703 = -t1031 * t717 + t1035 * t716 + (-t1027 * t714 - t1028 * t715) * pkin(6);
t702 = -pkin(1) * t714 - t1027 * t713 + t1028 * t1054;
t701 = pkin(1) * t715 + t1027 * t1054 + t1028 * t713;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1012, 0, -t1011, 0, t1099, -t997, -t1063, -pkin(5) * t1063, -t1032 * t951 + t1036 * t968, -t1032 * t908 + t1036 * t934, -t1032 * t928 + t1036 * t959, -t1032 * t948 + t1036 * t967, -t1032 * t929 + t1036 * t960, t1032 * t1128 + t1036 * t978, t1036 * t852 - t1032 * t847 - pkin(5) * (t1032 * t961 + t1036 * t930), t1036 * t848 - t1032 * t841 - pkin(5) * (t1032 * t955 + t1036 * t917), t1036 * t812 - t1032 * t824 - pkin(5) * (t1032 * t933 + t1036 * t907), t1036 * t815 - t1032 * t831 - pkin(5) * (t1032 * t894 + t1036 * t881), -t1032 * t837 + t1036 * t883, -t1032 * t793 + t1036 * t842, -t1032 * t818 + t1036 * t860, -t1032 * t836 + t1036 * t882, -t1032 * t819 + t1036 * t861, -t1032 * t879 + t1036 * t911, t1036 * t743 - t1032 * t736 - pkin(5) * (t1032 * t849 + t1036 * t807), t1036 * t744 - t1032 * t740 - pkin(5) * (t1032 * t851 + t1036 * t810), t1036 * t731 - t1032 * t726 - pkin(5) * (t1032 * t833 + t1036 * t789), t1036 * t721 - t1032 * t720 - pkin(5) * (t1032 * t780 + t1036 * t758), -t1032 * t766 + t1036 * t785, -t1032 * t742 + t1036 * t760, -t1032 * t755 + t1036 * t770, -t1032 * t765 + t1036 * t784, -t1032 * t756 + t1036 * t771, -t1032 * t778 + t1036 * t808, t1036 * t711 - t1032 * t708 - pkin(5) * (t1032 * t767 + t1036 * t750), t1036 * t712 - t1032 * t710 - pkin(5) * (t1032 * t769 + t1036 * t752), t1036 * t706 - t1032 * t705 - pkin(5) * (t1032 * t759 + t1036 * t738), t1036 * t703 - t1032 * t702 - pkin(5) * (t1032 * t722 + t1036 * t715); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1011, 0, t1012, 0, t997, t1099, t1103, pkin(5) * t1103, t1032 * t968 + t1036 * t951, t1032 * t934 + t1036 * t908, t1032 * t959 + t1036 * t928, t1032 * t967 + t1036 * t948, t1032 * t960 + t1036 * t929, t1032 * t978 - t1036 * t1128, t1032 * t852 + t1036 * t847 + pkin(5) * (-t1032 * t930 + t1036 * t961), t1032 * t848 + t1036 * t841 + pkin(5) * (-t1032 * t917 + t1036 * t955), t1032 * t812 + t1036 * t824 + pkin(5) * (-t1032 * t907 + t1036 * t933), t1032 * t815 + t1036 * t831 + pkin(5) * (-t1032 * t881 + t1036 * t894), t1032 * t883 + t1036 * t837, t1032 * t842 + t1036 * t793, t1032 * t860 + t1036 * t818, t1032 * t882 + t1036 * t836, t1032 * t861 + t1036 * t819, t1032 * t911 + t1036 * t879, t1032 * t743 + t1036 * t736 + pkin(5) * (-t1032 * t807 + t1036 * t849), t1032 * t744 + t1036 * t740 + pkin(5) * (-t1032 * t810 + t1036 * t851), t1032 * t731 + t1036 * t726 + pkin(5) * (-t1032 * t789 + t1036 * t833), t1032 * t721 + t1036 * t720 + pkin(5) * (-t1032 * t758 + t1036 * t780), t1032 * t785 + t1036 * t766, t1032 * t760 + t1036 * t742, t1032 * t770 + t1036 * t755, t1032 * t784 + t1036 * t765, t1032 * t771 + t1036 * t756, t1032 * t808 + t1036 * t778, t1032 * t711 + t1036 * t708 + pkin(5) * (-t1032 * t750 + t1036 * t767), t1032 * t712 + t1036 * t710 + pkin(5) * (-t1032 * t752 + t1036 * t769), t1032 * t706 + t1036 * t705 + pkin(5) * (-t1032 * t738 + t1036 * t759), t1032 * t703 + t1036 * t702 + pkin(5) * (-t1032 * t715 + t1036 * t722); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1014, t1015, 0, 0, t950, t906, t925, t949, t926, t1008, t846, t840, t823, t832, t835, t792, t816, t834, t817, t878, t735, t739, t725, t719, t764, t741, t753, t763, t754, t777, t707, t709, t704, t701; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1037, 0, 0, -g(3), -t1014, 0, t968, t934, t959, t967, t960, t978, t852, t848, t812, t815, t883, t842, t860, t882, t861, t911, t743, t744, t731, t721, t785, t760, t770, t784, t771, t808, t711, t712, t706, t703; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1037, 0, qJDD(1), 0, g(3), 0, -t1015, 0, t951, t908, t928, t948, t929, -t1128, t847, t841, t824, t831, t837, t793, t818, t836, t819, t879, t736, t740, t726, t720, t766, t742, t755, t765, t756, t778, t708, t710, t705, t702; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1014, t1015, 0, 0, t950, t906, t925, t949, t926, t1008, t846, t840, t823, t832, t835, t792, t816, t834, t817, t878, t735, t739, t725, t719, t764, t741, t753, t763, t754, t777, t707, t709, t704, t701; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t996, t975, t993, -t1004, t999, t1004, 0, -t979, t953, 0, t915, t876, t899, t913, t900, t936, t845, t850, t772, -pkin(7) * t796, t830, t787, t800, t829, t801, t863, t729, t730, t723, t716; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1003, t972, t998, t1092, t994, -t1003, t979, 0, t954, 0, -t1148, -t957, -t922, t1148, t918, t991, t811, t814, -pkin(2) * t875, -pkin(2) * t796, -t866, -t802, -t853, t864, -t854, -t887, t747, t748, t724, t717; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1013, t1001, t973, t1013, t974, t1020, -t953, -t954, 0, 0, t914, t874, t897, t912, t898, t935, t813, t820, t768, t781, t828, t786, t798, t827, t799, t862, t727, t728, t718, t713; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t947, -t1160, t1044, -t976, t969, t976, 0, t909, t858, 0, t867, t804, t855, t865, t856, t888, t776, t779, t732, -pkin(8) * t745; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t977, t921, t970, -t1060, -t940, t977, -t909, 0, t859, 0, -t932, -t931, -t872, t932, t868, -t945, t761, t762, -pkin(3) * t803, -pkin(3) * t745; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1148, t957, t922, -t1148, -t918, -t991, -t858, -t859, 0, 0, t866, t802, t853, -t864, t854, t887, t1055, t1056, t1047, t1101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t892, t869, t1157, t943, t938, -t943, 0, t821, t774, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t944, t871, t939, t891, t885, -t944, -t821, 0, t775, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t932, t931, t872, -t932, -t868, t945, -t774, -t775, 0, 0;];
m_new_reg = t1;
