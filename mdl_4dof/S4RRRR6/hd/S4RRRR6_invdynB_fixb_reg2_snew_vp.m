% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S4RRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,alpha2,d1,d2,d3,d4]';
% 
% Output:
% tauB_reg [6x(5*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:31
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S4RRRR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRRR6_invdynB_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRRR6_invdynB_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRRR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRRR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S4RRRR6_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:30:59
% EndTime: 2019-12-31 17:31:13
% DurationCPUTime: 10.22s
% Computational Cost: add. (43452->543), mult. (95609->890), div. (0->0), fcn. (73786->10), ass. (0->408)
t583 = sin(qJ(4));
t582 = cos(pkin(4));
t573 = qJD(1) * t582 + qJD(2);
t584 = sin(qJ(3));
t588 = cos(qJ(3));
t581 = sin(pkin(4));
t585 = sin(qJ(2));
t660 = qJD(1) * t585;
t645 = t581 * t660;
t538 = t573 * t584 + t588 * t645;
t589 = cos(qJ(2));
t659 = qJD(1) * t589;
t644 = t581 * t659;
t565 = -qJD(3) + t644;
t587 = cos(qJ(4));
t509 = t538 * t583 + t587 * t565;
t511 = t538 * t587 - t565 * t583;
t478 = t511 * t509;
t657 = qJDD(1) * t585;
t547 = (qJD(2) * t659 + t657) * t581;
t572 = qJDD(1) * t582 + qJDD(2);
t648 = t538 * qJD(3) + t584 * t547 - t588 * t572;
t641 = qJDD(4) + t648;
t695 = -t478 + t641;
t700 = t583 * t695;
t699 = t587 * t695;
t675 = t538 * t565;
t698 = t648 - t675;
t569 = qJD(2) * t645;
t656 = qJDD(1) * t589;
t636 = t581 * t656 - t569;
t542 = -qJDD(3) + t636;
t536 = -t588 * t573 + t584 * t645;
t676 = t536 * t538;
t598 = -t542 - t676;
t697 = t584 * t598;
t696 = t588 * t598;
t493 = -t536 * qJD(3) + t588 * t547 + t584 * t572;
t521 = t536 * t565;
t469 = t521 + t493;
t555 = t573 * t644;
t517 = t555 + t547;
t531 = qJD(4) + t536;
t489 = t531 * t509;
t649 = t509 * qJD(4) - t587 * t493 + t583 * t542;
t417 = t649 + t489;
t643 = t583 * t493 + t587 * t542;
t412 = (qJD(4) - t531) * t511 + t643;
t507 = t509 ^ 2;
t508 = t511 ^ 2;
t529 = t531 ^ 2;
t534 = t536 ^ 2;
t535 = t538 ^ 2;
t694 = t565 ^ 2;
t693 = t573 ^ 2;
t692 = pkin(2) * t585;
t691 = pkin(2) * t589;
t690 = pkin(3) * t584;
t689 = pkin(6) * t581;
t688 = g(3) * t589;
t687 = t582 * g(3);
t586 = sin(qJ(1));
t590 = cos(qJ(1));
t568 = g(1) * t590 + g(2) * t586;
t591 = qJD(1) ^ 2;
t543 = -pkin(1) * t591 + qJDD(1) * t689 - t568;
t640 = -pkin(7) * t585 - t691;
t661 = qJD(1) * t581;
t546 = t640 * t661;
t567 = t586 * g(1) - t590 * g(2);
t596 = qJDD(1) * pkin(1) + t591 * t689 + t567;
t595 = t582 * t596;
t594 = (-g(3) * t581 + t595) * t585;
t458 = t572 * pkin(7) - t693 * pkin(2) + (t546 * t661 + t543) * t589 + t594;
t607 = t573 * t660 - t656;
t593 = t569 * pkin(2) - t547 * pkin(7) - t687 + (-t573 * pkin(7) * t659 + pkin(2) * t607 - t596) * t581;
t402 = t458 * t584 - t588 * t593;
t500 = pkin(3) * t536 - pkin(8) * t538;
t368 = t542 * pkin(3) - t694 * pkin(8) + t500 * t538 + t402;
t686 = t368 * t583;
t685 = t368 * t587;
t432 = t478 + t641;
t684 = t432 * t583;
t683 = t432 * t587;
t642 = t543 * t585 - t589 * t595;
t457 = -t572 * pkin(2) - t693 * pkin(7) + (t546 * t660 + t688) * t581 + t642;
t682 = t457 * t584;
t681 = t457 * t588;
t486 = t542 - t676;
t680 = t486 * t584;
t679 = t486 * t588;
t678 = t531 * t583;
t677 = t531 * t587;
t663 = t589 * t591;
t578 = t581 ^ 2;
t667 = t578 * t585;
t564 = t663 * t667;
t544 = t564 + t572;
t674 = t544 * t585;
t673 = t544 * t589;
t545 = -t564 + t572;
t672 = t545 * t585;
t671 = t545 * t589;
t670 = t565 * t584;
t669 = t565 * t588;
t668 = t572 * t581;
t666 = t578 * t591;
t523 = t581 * t596 + t687;
t665 = t585 * t523;
t664 = t589 * t523;
t403 = t588 * t458 + t584 * t593;
t369 = -pkin(3) * t694 - pkin(8) * t542 - t500 * t536 + t403;
t373 = t698 * pkin(3) - t469 * pkin(8) + t457;
t321 = t587 * t369 + t583 * t373;
t579 = t585 ^ 2;
t580 = t589 ^ 2;
t662 = t579 + t580;
t655 = t584 * t478;
t654 = t588 * t478;
t653 = t585 * t676;
t652 = t589 * t676;
t651 = t579 * t666;
t650 = t580 * t666;
t647 = -pkin(3) * t588 - pkin(2);
t646 = t573 * t661;
t320 = t369 * t583 - t587 * t373;
t345 = t402 * t584 + t588 * t403;
t525 = -t567 * t586 - t590 * t568;
t563 = qJDD(1) * t590 - t586 * t591;
t639 = -pkin(5) * t563 - g(3) * t586;
t530 = -t651 - t693;
t499 = -t530 * t585 - t671;
t638 = pkin(6) * t499 - t665;
t551 = -t650 - t693;
t505 = t551 * t589 - t674;
t637 = pkin(6) * t505 + t664;
t295 = t320 * t583 + t321 * t587;
t284 = t295 * t588 + t368 * t584;
t294 = -t320 * t587 + t321 * t583;
t635 = t284 * t585 - t294 * t589;
t416 = -t489 + t649;
t353 = -t412 * t587 - t416 * t583;
t442 = t507 + t508;
t332 = t353 * t588 - t442 * t584;
t351 = -t412 * t583 + t416 * t587;
t634 = t332 * t585 - t351 * t589;
t413 = (-qJD(4) - t531) * t511 - t643;
t352 = t413 * t587 + t417 * t583;
t477 = -t508 + t507;
t336 = t352 * t588 - t477 * t584;
t350 = -t413 * t583 + t417 * t587;
t633 = t336 * t585 + t350 * t589;
t450 = -t529 - t507;
t385 = t450 * t587 - t700;
t340 = t385 * t588 - t413 * t584;
t384 = t450 * t583 + t699;
t632 = t340 * t585 - t384 * t589;
t472 = -t508 - t529;
t389 = -t472 * t583 - t683;
t343 = t389 * t588 - t417 * t584;
t388 = t472 * t587 - t684;
t631 = t343 * t585 - t388 * t589;
t630 = t345 * t585 - t457 * t589;
t485 = -t508 + t529;
t399 = -t485 * t583 + t699;
t348 = t399 * t588 - t416 * t584;
t397 = -t485 * t587 - t700;
t629 = t348 * t585 + t397 * t589;
t484 = t507 - t529;
t400 = t484 * t587 - t684;
t349 = t400 * t588 - t412 * t584;
t398 = -t484 * t583 - t683;
t628 = t349 * t585 + t398 * t589;
t440 = -qJD(4) * t511 - t643;
t409 = -t440 * t583 + t509 * t677;
t376 = t409 * t588 - t655;
t408 = -t440 * t587 - t509 * t678;
t627 = t376 * t585 + t408 * t589;
t411 = -t511 * t678 - t587 * t649;
t377 = t411 * t588 + t655;
t410 = -t511 * t677 + t583 * t649;
t626 = t377 * t585 + t410 * t589;
t344 = -t402 * t588 + t403 * t584;
t437 = (-t509 * t587 + t511 * t583) * t531;
t407 = t437 * t588 + t584 * t641;
t436 = (t509 * t583 + t511 * t587) * t531;
t625 = t407 * t585 + t436 * t589;
t420 = -t469 * t584 - t588 * t698;
t501 = -t535 + t534;
t624 = t420 * t585 + t501 * t589;
t466 = t648 + t675;
t471 = t521 - t493;
t421 = -t466 * t588 - t471 * t584;
t483 = t534 + t535;
t623 = t421 * t585 + t483 * t589;
t496 = -t694 - t534;
t439 = t496 * t588 - t697;
t622 = t439 * t585 - t589 * t698;
t502 = -t535 - t694;
t445 = -t502 * t584 + t679;
t621 = t445 * t585 - t469 * t589;
t515 = -t535 + t694;
t448 = -t515 * t584 + t696;
t620 = t448 * t585 + t471 * t589;
t514 = t534 - t694;
t449 = t514 * t588 + t680;
t619 = t449 * t585 + t466 * t589;
t482 = (t536 * t588 - t538 * t584) * t565;
t618 = t482 * t585 + t542 * t589;
t497 = t581 * t688 + t642;
t498 = t589 * t543 + t594;
t617 = -t589 * t497 + t585 * t498;
t443 = t497 * t585 + t498 * t589;
t554 = t573 * t645;
t520 = -t554 + t636;
t616 = t517 * t589 + t520 * t585;
t518 = -t555 + t547;
t519 = t554 + t636;
t615 = -t518 * t589 + t519 * t585;
t614 = t530 * t589 - t672;
t549 = -t651 + t693;
t613 = t549 * t589 + t674;
t612 = t551 * t585 + t673;
t550 = t650 - t693;
t611 = t550 * t585 + t671;
t524 = t567 * t590 - t568 * t586;
t610 = qJD(1) * t573 - t582 * t591;
t461 = -t536 * t669 + t584 * t648;
t609 = t461 * t585 + t652;
t463 = t493 * t588 + t538 * t670;
t608 = t463 * t585 - t652;
t283 = t295 * t584 - t368 * t588;
t262 = -pkin(7) * t283 + (-pkin(8) * t588 + t690) * t294;
t263 = -pkin(2) * t283 + pkin(3) * t368 - pkin(8) * t295;
t267 = t284 * t589 + t294 * t585;
t606 = pkin(6) * t267 + t262 * t585 + t263 * t589;
t282 = -pkin(8) * t351 - t294;
t331 = t353 * t584 + t442 * t588;
t268 = -pkin(7) * t331 + t282 * t588 + t351 * t690;
t271 = -pkin(2) * t331 - pkin(3) * t442 - pkin(8) * t353 - t295;
t306 = t332 * t589 + t351 * t585;
t605 = pkin(6) * t306 + t268 * t585 + t271 * t589;
t308 = -pkin(3) * t384 + t320;
t324 = -pkin(8) * t384 + t686;
t339 = t385 * t584 + t413 * t588;
t277 = -pkin(7) * t339 - t308 * t584 + t324 * t588;
t296 = -pkin(2) * t339 - pkin(3) * t413 - pkin(8) * t385 + t685;
t314 = t340 * t589 + t384 * t585;
t604 = pkin(6) * t314 + t277 * t585 + t296 * t589;
t309 = -pkin(3) * t388 + t321;
t328 = -pkin(8) * t388 + t685;
t342 = t389 * t584 + t417 * t588;
t278 = -pkin(7) * t342 - t309 * t584 + t328 * t588;
t297 = -pkin(2) * t342 - pkin(3) * t417 - pkin(8) * t389 - t686;
t316 = t343 * t589 + t388 * t585;
t603 = pkin(6) * t316 + t278 * t585 + t297 * t589;
t438 = t496 * t584 + t696;
t359 = -pkin(2) * t438 + t402;
t390 = -pkin(7) * t438 + t682;
t393 = t439 * t589 + t585 * t698;
t602 = pkin(6) * t393 + t359 * t589 + t390 * t585;
t444 = t502 * t588 + t680;
t362 = -pkin(2) * t444 + t403;
t394 = -pkin(7) * t444 + t681;
t395 = t445 * t589 + t469 * t585;
t601 = pkin(6) * t395 + t362 * t589 + t394 * t585;
t479 = t518 * t585 + t519 * t589;
t600 = pkin(6) * t479 + t443;
t419 = -t466 * t584 + t471 * t588;
t319 = -pkin(7) * t419 - t344;
t381 = t421 * t589 - t483 * t585;
t599 = pkin(6) * t381 + t319 * t585 - t419 * t691;
t329 = t345 * t589 + t457 * t585;
t597 = pkin(6) * t329 + t640 * t344;
t577 = t581 * t578;
t562 = qJDD(1) * t586 + t590 * t591;
t553 = t662 * t666;
t552 = (t579 - t580) * t666;
t548 = -pkin(5) * t562 + g(3) * t590;
t522 = t662 * t646;
t516 = (t657 + (qJD(2) + t573) * t659) * t581;
t513 = t547 * t589 - t579 * t646;
t512 = -t580 * t646 - t585 * t636;
t504 = t550 * t589 - t672;
t503 = -t549 * t585 + t673;
t495 = (t517 * t582 + t577 * t663) * t585;
t494 = (-t577 * t591 * t585 + (-t581 * t607 - t569) * t582) * t589;
t481 = (t536 * t584 + t538 * t588) * t565;
t480 = -t517 * t585 + t520 * t589;
t476 = t581 * t520 + t582 * t612;
t475 = -t581 * t519 + t582 * t611;
t474 = -t581 * t518 + t582 * t613;
t473 = -t582 * t520 + t581 * t612;
t465 = -t581 * t516 + t582 * t614;
t464 = t582 * t516 + t581 * t614;
t462 = t493 * t584 - t538 * t669;
t460 = -t536 * t670 - t588 * t648;
t459 = t482 * t589 - t542 * t585;
t456 = -t581 * t552 + t582 * t616;
t455 = t581 * t553 + t582 * t615;
t454 = -t582 * t553 + t581 * t615;
t447 = t514 * t584 - t679;
t446 = t515 * t588 + t697;
t435 = -t476 * t586 + t505 * t590;
t434 = t476 * t590 + t505 * t586;
t430 = t463 * t589 + t653;
t429 = t461 * t589 - t653;
t428 = -t465 * t586 + t499 * t590;
t427 = t465 * t590 + t499 * t586;
t426 = t581 * t523 + t582 * t617;
t425 = -t582 * t523 + t581 * t617;
t424 = -t581 * t481 + t618 * t582;
t423 = -t455 * t586 + t479 * t590;
t422 = t455 * t590 + t479 * t586;
t418 = t469 * t588 - t584 * t698;
t406 = t437 * t584 - t588 * t641;
t405 = t449 * t589 - t466 * t585;
t404 = t448 * t589 - t471 * t585;
t396 = -t665 + (-t473 * t581 - t476 * t582) * pkin(6);
t392 = -t664 + (-t464 * t581 - t465 * t582) * pkin(6);
t391 = -pkin(1) * t473 + t581 * t497 + t637 * t582;
t387 = t420 * t589 - t501 * t585;
t386 = -pkin(1) * t464 + t581 * t498 + t638 * t582;
t383 = -t581 * t462 + t582 * t608;
t382 = -t581 * t460 + t582 * t609;
t380 = pkin(6) * t443 * t582 - pkin(1) * t425;
t379 = -t426 * t586 + t443 * t590;
t378 = t426 * t590 + t443 * t586;
t375 = t411 * t584 - t654;
t374 = t409 * t584 + t654;
t370 = -pkin(1) * t454 + t582 * t600;
t367 = -pkin(2) * t469 + pkin(7) * t445 + t682;
t365 = -t581 * t447 + t619 * t582;
t364 = -t581 * t446 + t620 * t582;
t363 = (-t425 * t581 - t426 * t582) * pkin(6);
t361 = -pkin(2) * t698 + pkin(7) * t439 - t681;
t360 = (-t454 * t581 - t455 * t582) * pkin(6) - t617;
t358 = -t581 * t444 + t621 * t582;
t357 = t582 * t444 + t621 * t581;
t356 = t407 * t589 - t436 * t585;
t355 = -t581 * t438 + t622 * t582;
t354 = t582 * t438 + t622 * t581;
t347 = t400 * t584 + t412 * t588;
t346 = t399 * t584 + t416 * t588;
t341 = -t581 * t418 + t624 * t582;
t338 = -t581 * t419 + t623 * t582;
t337 = t582 * t419 + t623 * t581;
t335 = t352 * t584 + t477 * t588;
t334 = t377 * t589 - t410 * t585;
t333 = t376 * t589 - t408 * t585;
t330 = -pkin(2) * t457 + pkin(7) * t345;
t327 = -t581 * t406 + t625 * t582;
t326 = -t358 * t586 + t395 * t590;
t325 = t358 * t590 + t395 * t586;
t323 = -t355 * t586 + t393 * t590;
t322 = t355 * t590 + t393 * t586;
t318 = t349 * t589 - t398 * t585;
t317 = t348 * t589 - t397 * t585;
t315 = pkin(2) * t483 + pkin(7) * t421 + t345;
t313 = -t338 * t586 + t381 * t590;
t312 = t338 * t590 + t381 * t586;
t311 = -t581 * t375 + t626 * t582;
t310 = -t581 * t374 + t627 * t582;
t307 = t336 * t589 - t350 * t585;
t305 = -t581 * t344 + t630 * t582;
t304 = t582 * t344 + t630 * t581;
t303 = -t581 * t347 + t628 * t582;
t302 = -t581 * t346 + t629 * t582;
t301 = -t581 * t342 + t631 * t582;
t300 = t582 * t342 + t631 * t581;
t299 = -t581 * t339 + t632 * t582;
t298 = t582 * t339 + t632 * t581;
t293 = -t585 * t362 + t589 * t394 + (-t357 * t581 - t358 * t582) * pkin(6);
t292 = -t585 * t359 + t589 * t390 + (-t354 * t581 - t355 * t582) * pkin(6);
t291 = -t581 * t335 + t633 * t582;
t290 = -pkin(1) * t357 - t367 * t581 + t582 * t601;
t289 = -t581 * t331 + t634 * t582;
t288 = t582 * t331 + t634 * t581;
t287 = -t305 * t586 + t329 * t590;
t286 = t305 * t590 + t329 * t586;
t285 = -pkin(1) * t354 - t361 * t581 + t582 * t602;
t281 = t419 * t692 + t589 * t319 + (-t337 * t581 - t338 * t582) * pkin(6);
t280 = -t301 * t586 + t316 * t590;
t279 = t301 * t590 + t316 * t586;
t276 = -t299 * t586 + t314 * t590;
t275 = t299 * t590 + t314 * t586;
t274 = -pkin(2) * t388 + pkin(7) * t343 + t309 * t588 + t328 * t584;
t273 = -pkin(2) * t384 + pkin(7) * t340 + t308 * t588 + t324 * t584;
t272 = -pkin(1) * t337 - t315 * t581 + t582 * t599;
t270 = -t289 * t586 + t306 * t590;
t269 = t289 * t590 + t306 * t586;
t266 = (-pkin(7) * t589 + t692) * t344 + (-t304 * t581 - t305 * t582) * pkin(6);
t265 = -pkin(1) * t304 - t330 * t581 + t582 * t597;
t264 = pkin(7) * t332 + t584 * t282 + t647 * t351;
t261 = -t581 * t283 + t635 * t582;
t260 = t582 * t283 + t635 * t581;
t259 = pkin(7) * t284 + (-pkin(8) * t584 + t647) * t294;
t258 = t589 * t278 - t585 * t297 + (-t300 * t581 - t301 * t582) * pkin(6);
t257 = t589 * t277 - t585 * t296 + (-t298 * t581 - t299 * t582) * pkin(6);
t256 = -pkin(1) * t300 - t274 * t581 + t582 * t603;
t255 = -t261 * t586 + t267 * t590;
t254 = t261 * t590 + t267 * t586;
t253 = -pkin(1) * t298 - t273 * t581 + t582 * t604;
t252 = t589 * t268 - t585 * t271 + (-t288 * t581 - t289 * t582) * pkin(6);
t251 = -pkin(1) * t288 - t264 * t581 + t582 * t605;
t250 = t589 * t262 - t585 * t263 + (-t260 * t581 - t261 * t582) * pkin(6);
t249 = -pkin(1) * t260 - t581 * t259 + t582 * t606;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t562, -t563, 0, t525, 0, 0, 0, 0, 0, 0, t435, t428, t423, t379, 0, 0, 0, 0, 0, 0, t323, t326, t313, t287, 0, 0, 0, 0, 0, 0, t276, t280, t270, t255; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t563, -t562, 0, t524, 0, 0, 0, 0, 0, 0, t434, t427, t422, t378, 0, 0, 0, 0, 0, 0, t322, t325, t312, t286, 0, 0, 0, 0, 0, 0, t275, t279, t269, t254; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t473, t464, t454, t425, 0, 0, 0, 0, 0, 0, t354, t357, t337, t304, 0, 0, 0, 0, 0, 0, t298, t300, t288, t260; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t563, 0, -t562, 0, t639, -t548, -t524, -pkin(5) * t524, -t495 * t586 + t513 * t590, -t456 * t586 + t480 * t590, -t474 * t586 + t503 * t590, -t494 * t586 + t512 * t590, -t475 * t586 + t504 * t590, t522 * t590 + t586 * t668, -pkin(5) * t434 - t391 * t586 + t396 * t590, -pkin(5) * t427 - t386 * t586 + t392 * t590, -pkin(5) * t422 + t360 * t590 - t370 * t586, -pkin(5) * t378 + t363 * t590 - t380 * t586, -t383 * t586 + t430 * t590, -t341 * t586 + t387 * t590, -t364 * t586 + t404 * t590, -t382 * t586 + t429 * t590, -t365 * t586 + t405 * t590, -t424 * t586 + t459 * t590, -pkin(5) * t322 - t285 * t586 + t292 * t590, -pkin(5) * t325 - t290 * t586 + t293 * t590, -pkin(5) * t312 - t272 * t586 + t281 * t590, -pkin(5) * t286 - t265 * t586 + t266 * t590, -t311 * t586 + t334 * t590, -t291 * t586 + t307 * t590, -t302 * t586 + t317 * t590, -t310 * t586 + t333 * t590, -t303 * t586 + t318 * t590, -t327 * t586 + t356 * t590, -pkin(5) * t275 - t253 * t586 + t257 * t590, -pkin(5) * t279 - t256 * t586 + t258 * t590, -pkin(5) * t269 - t251 * t586 + t252 * t590, -pkin(5) * t254 - t249 * t586 + t250 * t590; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t562, 0, t563, 0, t548, t639, t525, pkin(5) * t525, t495 * t590 + t513 * t586, t456 * t590 + t480 * t586, t474 * t590 + t503 * t586, t494 * t590 + t512 * t586, t475 * t590 + t504 * t586, t522 * t586 - t590 * t668, pkin(5) * t435 + t391 * t590 + t396 * t586, pkin(5) * t428 + t386 * t590 + t392 * t586, pkin(5) * t423 + t360 * t586 + t370 * t590, pkin(5) * t379 + t363 * t586 + t380 * t590, t383 * t590 + t430 * t586, t341 * t590 + t387 * t586, t364 * t590 + t404 * t586, t382 * t590 + t429 * t586, t365 * t590 + t405 * t586, t424 * t590 + t459 * t586, pkin(5) * t323 + t285 * t590 + t292 * t586, pkin(5) * t326 + t290 * t590 + t293 * t586, pkin(5) * t313 + t272 * t590 + t281 * t586, pkin(5) * t287 + t265 * t590 + t266 * t586, t311 * t590 + t334 * t586, t291 * t590 + t307 * t586, t302 * t590 + t317 * t586, t310 * t590 + t333 * t586, t303 * t590 + t318 * t586, t327 * t590 + t356 * t586, pkin(5) * t276 + t253 * t590 + t257 * t586, pkin(5) * t280 + t256 * t590 + t258 * t586, pkin(5) * t270 + t251 * t590 + t252 * t586, pkin(5) * t255 + t249 * t590 + t250 * t586; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t567, t568, 0, 0, (t578 * t589 * t610 + t547 * t581) * t585, t582 * t552 + t581 * t616, t582 * t518 + t581 * t613, (t636 * t581 - t610 * t667) * t589, t582 * t519 + t581 * t611, t582 * t572, pkin(1) * t476 - t582 * t497 + t581 * t637, pkin(1) * t465 - t582 * t498 + t581 * t638, pkin(1) * t455 + t581 * t600, pkin(1) * t426 + t443 * t689, t582 * t462 + t581 * t608, t582 * t418 + t581 * t624, t582 * t446 + t581 * t620, t582 * t460 + t581 * t609, t582 * t447 + t581 * t619, t582 * t481 + t581 * t618, pkin(1) * t355 + t361 * t582 + t581 * t602, pkin(1) * t358 + t367 * t582 + t581 * t601, pkin(1) * t338 + t315 * t582 + t581 * t599, pkin(1) * t305 + t330 * t582 + t581 * t597, t582 * t375 + t581 * t626, t582 * t335 + t581 * t633, t582 * t346 + t581 * t629, t582 * t374 + t581 * t627, t582 * t347 + t581 * t628, t582 * t406 + t581 * t625, pkin(1) * t299 + t273 * t582 + t581 * t604, pkin(1) * t301 + t274 * t582 + t581 * t603, pkin(1) * t289 + t264 * t582 + t581 * t605, pkin(1) * t261 + t582 * t259 + t581 * t606;];
tauB_reg = t1;
