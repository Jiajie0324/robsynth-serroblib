% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4PRRP5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d2,d3,theta1]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:29
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4PRRP5_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4PRRP5_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4PRRP5_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4PRRP5_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4PRRP5_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4PRRP5_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:29:26
% EndTime: 2019-12-31 16:29:28
% DurationCPUTime: 2.43s
% Computational Cost: add. (4858->297), mult. (10355->360), div. (0->0), fcn. (5857->6), ass. (0->214)
t510 = sin(qJ(3));
t512 = cos(qJ(3));
t515 = qJD(2) ^ 2;
t488 = t510 * t515 * t512;
t480 = qJDD(3) + t488;
t572 = pkin(3) * t480;
t507 = sin(pkin(6));
t551 = g(3) - qJDD(1);
t581 = t507 * t551;
t508 = cos(pkin(6));
t580 = t508 * t551;
t477 = t507 * g(1) - t508 * g(2);
t456 = t508 * t477;
t478 = t508 * g(1) + t507 * g(2);
t579 = -t507 * t478 + t456;
t504 = t512 ^ 2;
t501 = t504 * t515;
t514 = qJD(3) ^ 2;
t486 = -t501 - t514;
t557 = t510 * t480;
t444 = t512 * t486 - t557;
t543 = qJD(2) * qJD(3);
t495 = t510 * t543;
t499 = t512 * qJDD(2);
t469 = t499 - 0.2e1 * t495;
t511 = sin(qJ(2));
t513 = cos(qJ(2));
t402 = t511 * t444 + t513 * t469;
t578 = pkin(1) * t402;
t503 = t510 ^ 2;
t563 = t503 * t515;
t484 = -t514 - t563;
t481 = qJDD(3) - t488;
t552 = t512 * t481;
t446 = -t510 * t484 - t552;
t496 = t512 * t543;
t541 = t510 * qJDD(2);
t466 = 0.2e1 * t496 + t541;
t403 = t511 * t446 - t513 * t466;
t577 = pkin(1) * t403;
t545 = t503 + t504;
t472 = t545 * qJDD(2);
t475 = t501 + t563;
t422 = t511 * t472 + t513 * t475;
t576 = pkin(1) * t422;
t553 = t512 * t480;
t440 = t510 * t486 + t553;
t575 = pkin(2) * t440;
t556 = t510 * t481;
t442 = t512 * t484 - t556;
t574 = pkin(2) * t442;
t462 = t512 * t477;
t467 = t496 + t541;
t521 = t462 + (t467 - t496) * qJ(4) - t572;
t453 = -t513 * t478 - t511 * t551;
t425 = -t515 * pkin(2) + qJDD(2) * pkin(5) + t453;
t542 = (qJD(2) * qJD(4));
t530 = t425 + (2 * t542);
t371 = t510 * t530 + t521;
t573 = pkin(3) * t371;
t571 = pkin(4) * t402;
t570 = pkin(4) * t403;
t569 = pkin(4) * t422;
t568 = pkin(5) * t440;
t567 = pkin(5) * t442;
t405 = t513 * t444 - t511 * t469;
t566 = qJ(1) * (t507 * t405 - t508 * t440);
t406 = t513 * t446 + t511 * t466;
t565 = qJ(1) * (t507 * t406 - t508 * t442);
t423 = t513 * t472 - t511 * t475;
t564 = qJ(1) * t423;
t562 = t507 * t477;
t560 = t510 * t371;
t452 = -t511 * t478 + t513 * t551;
t424 = -qJDD(2) * pkin(2) - t515 * pkin(5) + t452;
t559 = t510 * t424;
t558 = t510 * t425;
t555 = t512 * t371;
t554 = t512 * t424;
t550 = -pkin(1) * t440 + pkin(4) * t405;
t549 = -pkin(1) * t442 + pkin(4) * t406;
t404 = t512 * t425 - t510 * t477;
t548 = pkin(2) * t469 + pkin(5) * t444;
t547 = pkin(2) * t466 - pkin(5) * t446;
t546 = pkin(2) * t475 + pkin(5) * t472;
t544 = qJD(2) * t510;
t540 = t511 * qJDD(2);
t539 = t513 * qJDD(2);
t538 = pkin(3) * t541;
t537 = t512 * t542;
t536 = t510 * t540;
t535 = t510 * t539;
t474 = -t511 * t515 + t539;
t416 = -pkin(1) * t474 + t452;
t473 = t513 * t515 + t540;
t534 = qJ(1) * t473 - t416;
t417 = pkin(1) * t473 + t453;
t533 = qJ(1) * t474 - t417;
t401 = t462 + t558;
t366 = t510 * t401 + t512 * t404;
t532 = t511 * t452 + t513 * t453;
t531 = -t508 * t478 - t562;
t529 = t511 * t488;
t528 = t513 * t488;
t527 = -pkin(2) * t424 + pkin(5) * t366;
t526 = t548 - t554;
t525 = -t547 + t559;
t433 = pkin(4) * t473 - t513 * t477;
t524 = -pkin(4) * t474 - t511 * t477;
t468 = t499 - t495;
t479 = qJD(3) * pkin(3) - qJ(4) * t544;
t523 = pkin(3) * t501 - t468 * qJ(4) + qJD(3) * t479 - t404;
t365 = t512 * t401 - t510 * t404;
t396 = t513 * t452 - t511 * t453;
t522 = t366 + t546;
t491 = 0.2e1 * t537;
t372 = t491 - t523;
t363 = pkin(3) * t475 + qJ(4) * t499 + t372;
t367 = (qJ(4) * qJDD(2) + t530) * t510 + t521;
t520 = t512 * t363 + t510 * t367 + t546;
t388 = -t468 * pkin(3) - qJ(4) * t501 + t479 * t544 + qJDD(4) + t424;
t377 = -qJ(4) * t484 + t388;
t434 = -pkin(3) * t466 - qJ(4) * t481;
t519 = t510 * t377 + t512 * t434 - t547;
t518 = pkin(3) * t484 + t523;
t370 = pkin(3) * t469 + qJ(4) * t486 - t388;
t517 = -qJ(4) * t557 + t512 * t370 + t548;
t350 = t512 * t372 + t560;
t352 = -pkin(3) * t388 + qJ(4) * t372;
t516 = -pkin(2) * t388 + pkin(5) * t350 + qJ(4) * t560 + t512 * t352;
t485 = t501 - t514;
t483 = t514 - t563;
t476 = -t501 + t563;
t464 = t545 * t543;
t451 = t511 * qJDD(3) + t513 * t464;
t450 = t512 * t467 - t503 * t543;
t449 = -t513 * qJDD(3) + t511 * t464;
t448 = -t510 * t468 - t504 * t543;
t445 = -t510 * t483 + t553;
t443 = t512 * t485 - t556;
t441 = t512 * t483 + t557;
t439 = t510 * t485 + t552;
t438 = (t467 + t496) * t510;
t437 = -t512 * t468 + t510 * t496;
t436 = t508 * t451;
t435 = t507 * t451;
t421 = pkin(4) * t423;
t419 = -t510 * t466 + t512 * t469;
t418 = t512 * t466 + t510 * t469;
t415 = t508 * t564;
t414 = t513 * t450 - t529;
t413 = t513 * t448 + t529;
t412 = t511 * t450 + t528;
t411 = t511 * t448 - t528;
t410 = t513 * t445 + t536;
t409 = t513 * t443 + t511 * t499;
t408 = t511 * t445 - t535;
t407 = t511 * t443 - t512 * t539;
t393 = t513 * t419 + t511 * t476;
t392 = t511 * t419 - t513 * t476;
t391 = t554 - t567;
t390 = t559 - t568;
t389 = pkin(1) * t477 + pkin(4) * t532;
t387 = t508 * t414 + t507 * t438;
t386 = t508 * t413 - t507 * t437;
t385 = t507 * t414 - t508 * t438;
t384 = t507 * t413 + t508 * t437;
t383 = t508 * t410 + t507 * t441;
t382 = t508 * t409 + t507 * t439;
t381 = t507 * t410 - t508 * t441;
t380 = t507 * t409 - t508 * t439;
t379 = t404 - t574;
t378 = t401 - t575;
t374 = qJ(1) * (t508 * t406 + t507 * t442);
t373 = qJ(1) * (t508 * t405 + t507 * t440);
t369 = t508 * t393 + t507 * t418;
t368 = t507 * t393 - t508 * t418;
t362 = -t526 - t578;
t361 = -t525 - t577;
t360 = t491 - t518 - t574;
t359 = t371 - t572 - t575;
t358 = t513 * t365 - t569;
t357 = t511 * t365 + t421;
t356 = t513 * t366 + t511 * t424;
t355 = t511 * t366 - t513 * t424;
t354 = -qJ(4) * t553 - t510 * t370 - t568;
t353 = t512 * t377 - t510 * t434 - t567;
t351 = -t522 - t576;
t349 = t510 * t372 - t555;
t348 = -t511 * t379 + t513 * t391 - t570;
t347 = -t511 * t378 + t513 * t390 - t571;
t346 = -t517 - t578;
t345 = -t519 - t577;
t344 = -t510 * t363 + t512 * t367;
t343 = t513 * t379 + t511 * t391 + t549;
t342 = t513 * t378 + t511 * t390 + t550;
t341 = -pkin(3) * t536 + t513 * t344 - t569;
t340 = pkin(3) * t535 + t511 * t344 + t421;
t339 = t513 * t350 + t511 * t388;
t338 = t511 * t350 - t513 * t388;
t337 = -t520 - t576;
t336 = -pkin(1) * t355 - t527;
t335 = -pkin(2) * t349 + t573;
t334 = t513 * t353 - t511 * t360 - t570;
t333 = t513 * t354 - t511 * t359 - t571;
t332 = t511 * t353 + t513 * t360 + t549;
t331 = t511 * t354 + t513 * t359 + t550;
t330 = -pkin(4) * t355 - (pkin(2) * t511 - pkin(5) * t513) * t365;
t329 = -pkin(5) * t349 + qJ(4) * t555 - t510 * t352;
t328 = pkin(4) * t356 - (-pkin(2) * t513 - pkin(5) * t511 - pkin(1)) * t365;
t327 = -pkin(1) * t338 - t516;
t326 = -pkin(4) * t338 + t513 * t329 - t511 * t335;
t325 = -pkin(1) * t349 + pkin(4) * t339 + t511 * t329 + t513 * t335;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t581, -t580, -t579, -qJ(1) * t579, 0, 0, t508 * t474, 0, -t508 * t473, t507 * qJDD(2), t534 * t507 + t508 * t524, t508 * t433 + t507 * t533, t508 * t396, -qJ(1) * (t507 * t532 + t456) - (t507 * pkin(1) - t508 * pkin(4)) * t396, t387, t369, t383, t386, t382, t436, t508 * t347 - t507 * t362 - t566, t508 * t348 - t507 * t361 - t565, t508 * t358 + (-t351 - t564) * t507, t508 * t330 - t507 * t336 - qJ(1) * (t507 * t356 + t365 * t508), t387, t369, t383, t386, t382, t436, t508 * t333 - t507 * t346 - t566, t508 * t334 - t507 * t345 - t565, t508 * t341 + (-t337 - t564) * t507, t508 * t326 - t507 * t327 - qJ(1) * (t507 * t339 - t508 * t349); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t580, -t581, t531, qJ(1) * t531, 0, 0, t507 * t474, 0, -t507 * t473, -t508 * qJDD(2), t507 * t524 - t534 * t508, t507 * t433 - t508 * t533, t507 * t396, qJ(1) * (t508 * t532 - t562) - (-t508 * pkin(1) - t507 * pkin(4)) * t396, t385, t368, t381, t384, t380, t435, t507 * t347 + t508 * t362 + t373, t507 * t348 + t508 * t361 + t374, t508 * t351 + t507 * t358 + t415, t507 * t330 + t508 * t336 + qJ(1) * (t508 * t356 - t365 * t507), t385, t368, t381, t384, t380, t435, t507 * t333 + t508 * t346 + t373, t507 * t334 + t508 * t345 + t374, t508 * t337 + t507 * t341 + t415, t507 * t326 + t508 * t327 + qJ(1) * (t508 * t339 + t507 * t349); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t477, t478, 0, 0, 0, 0, t473, 0, t474, 0, -t433, t524, t532, t389, t412, t392, t408, t411, t407, t449, t342, t343, t357, t328, t412, t392, t408, t411, t407, t449, t331, t332, t340, t325; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t551, -t477, 0, 0, 0, t474, 0, -t473, 0, t524, t433, t396, pkin(4) * t396, t414, t393, t410, t413, t409, t451, t347, t348, t358, t330, t414, t393, t410, t413, t409, t451, t333, t334, t341, t326; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t551, 0, -t478, 0, 0, 0, 0, 0, 0, -qJDD(2), t416, t417, 0, pkin(1) * t396, -t438, -t418, -t441, t437, -t439, 0, t362, t361, t351, t336, -t438, -t418, -t441, t437, -t439, 0, t346, t345, t337, t327; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t477, t478, 0, 0, 0, 0, t473, 0, t474, 0, -t433, t524, t532, t389, t412, t392, t408, t411, t407, t449, t342, t343, t357, t328, t412, t392, t408, t411, t407, t449, t331, t332, t340, t325; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t515, 0, 0, -t477, t452, 0, t450, t419, t445, t448, t443, t464, t390, t391, t365, pkin(5) * t365, t450, t419, t445, t448, t443, t464, t354, t353, t344, t329; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t515, 0, qJDD(2), 0, t477, 0, t453, 0, t488, -t476, -t541, -t488, -t499, -qJDD(3), t378, t379, 0, pkin(2) * t365, t488, -t476, -t541, -t488, -t499, -qJDD(3), t359, t360, t538, t335; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t452, -t453, 0, 0, t438, t418, t441, -t437, t439, 0, t526, t525, t522, t527, t438, t418, t441, -t437, t439, 0, t517, t519, t520, t516; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t467, t469, t480, -t496, t485, t496, 0, t424, t401, 0, t467, t469, t480, -t496, t485, t496, -qJ(4) * t480, t377, t367, qJ(4) * t371; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t495, t466, t483, t468, t481, -t495, -t424, 0, t404, 0, t495, t466, t483, t468, t481, -t495, t370, t434, t363, t352; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t488, t476, t541, t488, t499, qJDD(3), -t401, -t404, 0, 0, -t488, t476, t541, t488, t499, qJDD(3), -0.2e1 * t510 * t542 - t521 - t558 + t572, t518 - 0.2e1 * t537, -t538, -t573; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t467, t469, t480, -t496, t485, t496, 0, t388, t371, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t495, t466, t483, t468, t481, -t495, -t388, 0, t372, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t488, t476, t541, t488, t499, qJDD(3), -t371, -t372, 0, 0;];
m_new_reg = t1;
