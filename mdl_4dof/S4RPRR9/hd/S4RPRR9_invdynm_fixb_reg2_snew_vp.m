% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RPRR9
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:56
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RPRR9_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RPRR9_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RPRR9_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RPRR9_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RPRR9_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4RPRR9_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:56:34
% EndTime: 2019-12-31 16:56:37
% DurationCPUTime: 3.21s
% Computational Cost: add. (8430->364), mult. (16499->428), div. (0->0), fcn. (9678->6), ass. (0->232)
t531 = sin(qJ(4));
t534 = cos(qJ(4));
t535 = cos(qJ(3));
t585 = qJD(1) * t535;
t496 = -t534 * qJD(3) + t531 * t585;
t498 = t531 * qJD(3) + t534 * t585;
t462 = t498 * t496;
t584 = qJD(1) * qJD(3);
t573 = t535 * t584;
t532 = sin(qJ(3));
t582 = t532 * qJDD(1);
t501 = -t573 - t582;
t494 = qJDD(4) - t501;
t612 = -t462 + t494;
t616 = t531 * t612;
t615 = t534 * t612;
t583 = qJD(2) * qJD(1);
t526 = 0.2e1 * t583;
t533 = sin(qJ(1));
t536 = cos(qJ(1));
t512 = t536 * g(1) + t533 * g(2);
t528 = qJDD(1) * qJ(2);
t548 = t512 - t528;
t523 = t535 * qJDD(1);
t574 = t532 * t584;
t502 = t523 - t574;
t556 = -t502 + t574;
t557 = -t501 + t573;
t538 = qJD(1) ^ 2;
t610 = pkin(5) + pkin(1);
t613 = t610 * t538;
t426 = t557 * pkin(3) + t556 * pkin(6) + t526 - t548 - t613;
t511 = t533 * g(1) - t536 * g(2);
t560 = qJDD(2) - t511;
t544 = -t538 * qJ(2) + t560;
t540 = -t610 * qJDD(1) + t544;
t459 = t535 * g(3) - t532 * t540;
t537 = qJD(3) ^ 2;
t605 = pkin(6) * t535;
t606 = pkin(3) * t532;
t547 = t538 * (-t605 + t606);
t443 = -t537 * pkin(3) + qJDD(3) * pkin(6) - t532 * t547 - t459;
t392 = -t534 * t426 + t531 * t443;
t393 = t531 * t426 + t534 * t443;
t366 = -t534 * t392 + t531 * t393;
t575 = pkin(3) * t535 + pkin(2);
t614 = (pkin(6) * t532 + t575) * t366;
t367 = t531 * t392 + t534 * t393;
t458 = t532 * g(3) + t535 * t540;
t424 = t535 * t458 - t532 * t459;
t519 = t532 * qJD(1) + qJD(4);
t567 = t534 * qJDD(3) - t531 * t502;
t435 = (-qJD(4) + t519) * t498 + t567;
t550 = -t531 * qJDD(3) - t534 * t502;
t453 = -t496 * qJD(4) - t550;
t481 = t519 * t496;
t437 = t453 + t481;
t396 = t531 * t435 - t534 * t437;
t361 = -pkin(6) * t396 - t366;
t611 = t532 * t361 - t575 * t396;
t492 = t496 ^ 2;
t493 = t498 ^ 2;
t517 = t519 ^ 2;
t609 = pkin(2) * t424;
t541 = t548 - 0.2e1 * t583;
t476 = t541 + t613;
t608 = pkin(2) * t476;
t529 = t532 ^ 2;
t530 = t535 ^ 2;
t586 = t529 + t530;
t504 = t586 * qJDD(1);
t607 = pkin(2) * t504;
t604 = qJDD(1) * pkin(1);
t603 = t519 * t531;
t602 = t519 * t534;
t601 = t529 * t538;
t600 = t530 * t538;
t442 = qJDD(3) * pkin(3) + t537 * pkin(6) - t535 * t547 + t458;
t439 = t531 * t442;
t450 = t462 + t494;
t599 = t531 * t450;
t596 = t532 * t476;
t518 = t532 * t538 * t535;
t509 = qJDD(3) + t518;
t595 = t532 * t509;
t510 = qJDD(3) - t518;
t594 = t532 * t510;
t593 = t533 * t504;
t440 = t534 * t442;
t592 = t534 * t450;
t463 = t535 * t476;
t591 = t535 * t509;
t590 = t535 * t510;
t589 = t536 * t504;
t588 = t535 * t361 + t396 * t606;
t587 = pkin(3) * t442 + pkin(6) * t367;
t581 = t533 * qJDD(1);
t580 = t536 * qJDD(1);
t579 = t532 * t462;
t578 = t535 * t462;
t460 = -t493 - t517;
t416 = -t531 * t460 - t592;
t438 = (qJD(4) + t519) * t496 + t550;
t577 = pkin(3) * t438 + pkin(6) * t416 - t439;
t454 = -t517 - t492;
t410 = t534 * t454 - t616;
t482 = t519 * t498;
t546 = t498 * qJD(4) - t567;
t434 = -t482 - t546;
t576 = pkin(3) * t434 + pkin(6) * t410 + t440;
t409 = t531 * t454 + t615;
t368 = -pkin(3) * t409 + t392;
t381 = -pkin(6) * t409 - t439;
t572 = -t532 * t368 + t535 * t381;
t415 = t534 * t460 - t599;
t369 = -pkin(3) * t415 + t393;
t384 = -pkin(6) * t415 - t440;
t571 = -t532 * t369 + t535 * t384;
t483 = t538 * pkin(1) + t541;
t484 = -t544 + t604;
t569 = -t536 * t483 - t533 * t484;
t568 = -t533 * t511 - t536 * t512;
t566 = t533 * t518;
t565 = t536 * t518;
t398 = t534 * t435 + t531 * t437;
t447 = t492 + t493;
t564 = pkin(3) * t447 + pkin(6) * t398 + t367;
t362 = t532 * t367 + t535 * t442;
t563 = -pkin(2) * t362 - t587;
t505 = -t533 * t538 + t580;
t562 = pkin(4) * t505 + t533 * g(3);
t506 = t536 * t538 + t581;
t561 = -pkin(4) * t506 + t536 * g(3);
t500 = 0.2e1 * t573 + t582;
t559 = pkin(2) * t500 - t463;
t503 = t523 - 0.2e1 * t574;
t558 = pkin(2) * t503 + t596;
t425 = -t532 * t458 - t535 * t459;
t555 = t533 * t483 - t536 * t484;
t554 = t536 * t511 - t533 * t512;
t376 = t532 * t410 + t535 * t434;
t552 = -pkin(2) * t376 - t576;
t379 = t532 * t416 + t535 * t438;
t551 = -pkin(2) * t379 - t577;
t516 = -t537 - t600;
t468 = t535 * t516 - t595;
t549 = -pkin(2) * t468 - t459;
t370 = t532 * t398 + t535 * t447;
t545 = -pkin(2) * t370 - t564;
t543 = pkin(2) * t409 - t535 * t368 - t532 * t381;
t542 = pkin(2) * t415 - t535 * t369 - t532 * t384;
t514 = -t537 - t601;
t466 = t532 * t514 + t590;
t539 = -pkin(2) * t466 - t458;
t515 = t537 - t600;
t513 = -t537 + t601;
t508 = (-t529 + t530) * t538;
t507 = t586 * t538;
t495 = t586 * t584;
t491 = t560 - 0.2e1 * t604;
t490 = -t512 + t526 + 0.2e1 * t528;
t480 = -t493 + t517;
t479 = t492 - t517;
t478 = t532 * t502 + t530 * t584;
t477 = t535 * t501 + t529 * t584;
t473 = -t532 * t516 - t591;
t472 = -t532 * t515 + t590;
t471 = t556 * t535;
t470 = t535 * t514 - t594;
t469 = t535 * t513 - t595;
t467 = t535 * t515 + t594;
t465 = t532 * t513 + t591;
t464 = t557 * t532;
t461 = t493 - t492;
t457 = -t535 * t500 - t532 * t503;
t456 = -t532 * t500 + t535 * t503;
t448 = pkin(1) * t484 - qJ(2) * t483;
t445 = (-t496 * t534 + t498 * t531) * t519;
t444 = (-t496 * t531 - t498 * t534) * t519;
t436 = t453 - t481;
t433 = -t482 + t546;
t430 = t534 * t453 - t498 * t603;
t429 = t531 * t453 + t498 * t602;
t428 = t496 * t602 + t531 * t546;
t427 = -t496 * t603 + t534 * t546;
t422 = t535 * t445 + t532 * t494;
t421 = t532 * t445 - t535 * t494;
t420 = t534 * t479 - t599;
t419 = -t531 * t480 + t615;
t418 = t531 * t479 + t592;
t417 = t534 * t480 + t616;
t414 = pkin(2) * t507 + t425;
t412 = -qJ(2) * t473 - t549;
t411 = -qJ(2) * t470 - t539;
t407 = -t610 * t470 + t559;
t406 = -t610 * t473 + t558;
t405 = qJ(2) * t503 - t610 * t468 - t463;
t404 = qJ(2) * t500 - t610 * t466 - t596;
t403 = t535 * t430 + t579;
t402 = t535 * t428 - t579;
t401 = t532 * t430 - t578;
t400 = t532 * t428 + t578;
t399 = -qJ(2) * t507 + t610 * t504 - t424;
t397 = t534 * t434 - t531 * t436;
t395 = t531 * t434 + t534 * t436;
t388 = t535 * t420 - t532 * t433;
t387 = t535 * t419 + t532 * t437;
t386 = t532 * t420 + t535 * t433;
t385 = t532 * t419 - t535 * t437;
t383 = -qJ(2) * t425 + t609;
t380 = t535 * t416 - t532 * t438;
t377 = t535 * t410 - t532 * t434;
t375 = t535 * t397 + t532 * t461;
t374 = t532 * t397 - t535 * t461;
t373 = -t610 * t425 - t608;
t372 = -qJ(2) * t476 - t610 * t424;
t371 = t535 * t398 - t532 * t447;
t364 = t366 * t606;
t363 = t535 * t367 - t532 * t442;
t359 = -qJ(2) * t380 - t551;
t358 = -qJ(2) * t377 - t552;
t357 = -t610 * t380 + t542;
t356 = qJ(2) * t415 - t610 * t379 + t571;
t355 = -t610 * t377 + t543;
t354 = qJ(2) * t409 - t610 * t376 + t572;
t353 = -qJ(2) * t371 - t545;
t352 = -qJ(2) * t363 - t563;
t351 = -t610 * t371 - t611;
t350 = qJ(2) * t396 - t610 * t370 + t588;
t349 = -t610 * t363 + t614;
t348 = t364 + (qJ(2) - t605) * t366 - t610 * t362;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t505, 0, -t506, 0, -t562, -t561, -t554, -pkin(4) * t554, 0, -t505, t506, 0, 0, 0, t555, t562, t561, pkin(4) * t555 + (-t533 * pkin(1) + t536 * qJ(2)) * g(3), t533 * t478 + t565, t533 * t456 + t536 * t508, t533 * t467 + t535 * t580, t533 * t477 - t565, t533 * t465 - t532 * t580, t536 * qJDD(3) - t533 * t495, t536 * t411 - t533 * t407 - pkin(4) * (-t536 * t466 + t533 * t500), t536 * t412 - t533 * t406 - pkin(4) * (-t536 * t468 + t533 * t503), -pkin(2) * t589 + t533 * t414 - pkin(4) * (-t533 * t507 + t589), t536 * t383 - t533 * t373 - pkin(4) * (-t536 * t424 - t533 * t476), t533 * t401 + t536 * t429, t533 * t374 + t536 * t395, t533 * t385 + t536 * t417, t533 * t400 - t536 * t427, t533 * t386 + t536 * t418, t533 * t421 + t536 * t444, t536 * t358 - t533 * t355 - pkin(4) * (-t536 * t376 + t533 * t409), t536 * t359 - t533 * t357 - pkin(4) * (-t536 * t379 + t533 * t415), t536 * t353 - t533 * t351 - pkin(4) * (-t536 * t370 + t533 * t396), t536 * t352 - t533 * t349 - pkin(4) * (-t536 * t362 + t533 * t366); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t506, 0, t505, 0, t561, -t562, t568, pkin(4) * t568, 0, -t506, -t505, 0, 0, 0, t569, -t561, t562, pkin(4) * t569 + (t536 * pkin(1) + t533 * qJ(2)) * g(3), -t536 * t478 + t566, -t536 * t456 + t533 * t508, -t536 * t467 + t533 * t523, -t536 * t477 - t566, -t536 * t465 - t532 * t581, t533 * qJDD(3) + t536 * t495, t533 * t411 + t536 * t407 + pkin(4) * (t533 * t466 + t536 * t500), t533 * t412 + t536 * t406 + pkin(4) * (t533 * t468 + t536 * t503), -pkin(2) * t593 - t536 * t414 + pkin(4) * (-t536 * t507 - t593), t533 * t383 + t536 * t373 + pkin(4) * (t533 * t424 - t536 * t476), -t536 * t401 + t533 * t429, -t536 * t374 + t533 * t395, -t536 * t385 + t533 * t417, -t536 * t400 - t533 * t427, -t536 * t386 + t533 * t418, -t536 * t421 + t533 * t444, t533 * t358 + t536 * t355 + pkin(4) * (t533 * t376 + t536 * t409), t533 * t359 + t536 * t357 + pkin(4) * (t533 * t379 + t536 * t415), t533 * t353 + t536 * t351 + pkin(4) * (t533 * t370 + t536 * t396), t533 * t352 + t536 * t349 + pkin(4) * (t533 * t362 + t536 * t366); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t511, t512, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t491, t490, t448, -t471, t457, t472, t464, t469, 0, t404, t405, t399, t372, t403, t375, t387, t402, t388, t422, t354, t356, t350, t348; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t538, 0, 0, -g(3), -t511, 0, 0, -qJDD(1), t538, 0, 0, 0, -t484, 0, g(3), qJ(2) * g(3), t518, t508, t523, -t518, -t582, qJDD(3), t411, t412, -t607, t383, t429, t395, t417, -t427, t418, t444, t358, t359, t353, t352; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t538, 0, qJDD(1), 0, g(3), 0, -t512, 0, 0, -t538, -qJDD(1), 0, 0, 0, -t483, -g(3), 0, pkin(1) * g(3), -t478, -t456, -t467, -t477, -t465, t495, t407, t406, -t414, t373, -t401, -t374, -t385, -t400, -t386, -t421, t355, t357, t351, t349; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t511, t512, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t491, t490, t448, -t471, t457, t472, t464, t469, 0, t404, t405, t399, t372, t403, t375, t387, t402, t388, t422, t354, t356, t350, t348; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t484, -t483, 0, -t471, t457, t472, t464, t469, 0, -pkin(5) * t466 - t596, -pkin(5) * t468 - t463, pkin(5) * t504 - t424, -pkin(5) * t424, t403, t375, t387, t402, t388, t422, -pkin(5) * t376 + t572, -pkin(5) * t379 + t571, -pkin(5) * t370 + t588, -pkin(5) * t362 - t366 * t605 + t364; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t538, 0, 0, 0, t484, 0, -g(3), 0, -t518, -t508, -t523, t518, t582, -qJDD(3), t539, t549, t607, -t609, -t429, -t395, -t417, t427, -t418, -t444, t552, t551, t545, t563; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t538, qJDD(1), 0, 0, 0, t483, g(3), 0, 0, t478, t456, t467, t477, t465, -t495, pkin(5) * t470 - t559, pkin(5) * t473 - t558, t414, pkin(5) * t425 + t608, t401, t374, t385, t400, t386, t421, pkin(5) * t377 - t543, pkin(5) * t380 - t542, pkin(5) * t371 + t611, pkin(5) * t363 - t614; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t502, -t500, t510, t574, t513, -t574, 0, -t476, -t458, 0, t430, t397, t419, t428, t420, t445, t381, t384, t361, -pkin(6) * t366; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t573, t503, t515, t501, t509, -t573, t476, 0, -t459, 0, -t462, -t461, -t437, t462, t433, -t494, t368, t369, -pkin(3) * t396, -pkin(3) * t366; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t518, t508, t523, -t518, -t582, qJDD(3), t458, t459, 0, 0, t429, t395, t417, -t427, t418, t444, t576, t577, t564, t587; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t453, t434, t612, t481, t479, -t481, 0, -t442, t392, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t482, t436, t480, -t546, t450, -t482, t442, 0, t393, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t462, t461, t437, -t462, -t433, t494, -t392, -t393, 0, 0;];
m_new_reg = t1;
