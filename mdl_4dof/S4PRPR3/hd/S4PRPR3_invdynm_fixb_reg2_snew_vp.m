% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4PRPR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d2,d4,theta1,theta3]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:21
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4PRPR3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4PRPR3_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4PRPR3_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4PRPR3_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4PRPR3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4PRPR3_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:21:01
% EndTime: 2019-12-31 16:21:05
% DurationCPUTime: 4.05s
% Computational Cost: add. (11278->341), mult. (25666->485), div. (0->0), fcn. (17892->8), ass. (0->239)
t614 = sin(pkin(6));
t618 = sin(qJ(2));
t620 = cos(qJ(2));
t616 = cos(pkin(6));
t591 = t616 * g(1) + t614 * g(2);
t641 = t614 * g(1) - t616 * g(2);
t625 = t620 * t591 - t618 * t641;
t639 = t618 * t591 + t620 * t641;
t640 = -t618 * t639 - t620 * t625;
t502 = t618 * t625 - t620 * t639;
t661 = t616 * t502;
t693 = -t614 * t640 + t661;
t667 = t614 * t502;
t692 = t616 * t640 + t667;
t617 = sin(qJ(4));
t613 = sin(pkin(7));
t615 = cos(pkin(7));
t619 = cos(qJ(4));
t571 = (t613 * t617 - t615 * t619) * qJD(2);
t630 = t613 * t619 + t615 * t617;
t573 = t630 * qJD(2);
t539 = t573 * t571;
t679 = qJDD(4) - t539;
t691 = t617 * t679;
t690 = t619 * t679;
t674 = qJD(2) ^ 2;
t638 = -t674 * pkin(2) + qJDD(2) * qJ(3) + 0.2e1 * qJD(2) * qJD(3) - t625;
t689 = pkin(5) * qJDD(2) + t638;
t648 = t618 * qJDD(2);
t589 = t620 * t674 + t648;
t611 = g(3) - qJDD(1);
t563 = pkin(4) * t589 - t620 * t611;
t647 = t620 * qJDD(2);
t590 = -t618 * t674 + t647;
t633 = -pkin(4) * t590 - t618 * t611;
t680 = t616 * t589 + t614 * t590;
t688 = qJ(1) * t680 + t616 * t563 - t614 * t633;
t545 = -t614 * t589 + t616 * t590;
t687 = -qJ(1) * t545 + t614 * t563 + t616 * t633;
t609 = t613 ^ 2;
t623 = t615 ^ 2;
t678 = t674 * (t609 + t623);
t579 = t615 * t678;
t642 = t615 * t647;
t551 = -t618 * t579 + t642;
t553 = t620 * t579 + t615 * t648;
t686 = t616 * t551 - t614 * t553;
t685 = t614 * t551 + t616 * t553;
t597 = t615 * t611;
t516 = t613 * t638 + t597;
t668 = t613 * t611;
t517 = t615 * t638 - t668;
t476 = t613 * t516 + t615 * t517;
t606 = t623 * t674;
t651 = t609 * t674;
t586 = t606 + t651;
t677 = -t616 * t591 - t614 * t641;
t675 = -t614 * t591 + t616 * t641;
t567 = t571 ^ 2;
t568 = t573 ^ 2;
t650 = t615 * t674;
t491 = -t597 + (pkin(3) * t650 - t689) * t613;
t492 = -pkin(3) * t606 + t689 * t615 - t668;
t454 = -t619 * t491 + t617 * t492;
t455 = t617 * t491 + t619 * t492;
t415 = -t619 * t454 + t617 * t455;
t673 = pkin(3) * t415;
t603 = t613 * qJDD(2);
t605 = t615 * qJDD(2);
t569 = t617 * t603 - t619 * t605;
t570 = t630 * qJDD(2);
t485 = -t569 * t617 - t619 * t570;
t672 = pkin(3) * t485;
t669 = t613 * t415;
t532 = -qJDD(2) * pkin(2) - t674 * qJ(3) + qJDD(3) - t639;
t523 = t613 * t532;
t663 = t614 * t611;
t662 = t615 * t415;
t524 = t615 * t532;
t660 = t616 * t611;
t513 = -pkin(3) * t605 - t586 * pkin(5) + t532;
t659 = t617 * t513;
t530 = qJDD(4) + t539;
t658 = t617 * t530;
t657 = t618 * t532;
t656 = t619 * t513;
t655 = t619 * t530;
t654 = t620 * t532;
t653 = -pkin(2) * t532 + qJ(3) * t476;
t566 = t571 * qJD(4);
t652 = t573 * qJD(4);
t646 = t618 * t539;
t645 = t620 * t539;
t644 = pkin(2) * t605 - qJ(3) * t579 - t524;
t593 = t613 * t650;
t643 = t613 * t605;
t416 = t617 * t454 + t619 * t455;
t487 = -t569 * t619 + t617 * t570;
t518 = -t567 - t568;
t406 = -pkin(3) * t518 + pkin(5) * t487 + t416;
t410 = -pkin(5) * t485 - t415;
t439 = -t613 * t485 + t615 * t487;
t637 = -pkin(2) * t518 + qJ(3) * t439 + t615 * t406 + t613 * t410;
t621 = qJD(4) ^ 2;
t528 = -t621 - t567;
t484 = t619 * t528 - t691;
t533 = t569 + 0.2e1 * t652;
t427 = -pkin(3) * t533 + pkin(5) * t484 - t656;
t483 = t617 * t528 + t690;
t435 = -t613 * t483 + t615 * t484;
t453 = -pkin(5) * t483 + t659;
t636 = -pkin(2) * t533 + qJ(3) * t435 + t615 * t427 + t613 * t453;
t559 = -t568 - t621;
t499 = -t617 * t559 - t655;
t535 = -0.2e1 * t566 + t570;
t442 = -pkin(3) * t535 + pkin(5) * t499 + t659;
t496 = t619 * t559 - t658;
t462 = -t613 * t496 + t615 * t499;
t472 = -pkin(5) * t496 + t656;
t635 = -pkin(2) * t535 + qJ(3) * t462 + t615 * t442 + t613 * t472;
t602 = t609 * qJDD(2);
t604 = t623 * qJDD(2);
t584 = t604 + t602;
t634 = pkin(2) * t586 + qJ(3) * t584 + t476;
t475 = t615 * t516 - t613 * t517;
t555 = t589 * t615 * t613;
t556 = -t618 * t593 + t613 * t642;
t632 = t616 * t555 + t614 * t556;
t631 = t614 * t555 - t616 * t556;
t578 = t613 * t678;
t629 = -pkin(2) * t603 + qJ(3) * t578 + t523;
t628 = pkin(3) * t483 - t454;
t401 = t615 * t416 - t669;
t412 = -pkin(3) * t513 + pkin(5) * t416;
t627 = -pkin(2) * t513 - pkin(5) * t669 + qJ(3) * t401 + t615 * t412;
t626 = pkin(3) * t496 - t455;
t592 = 0.2e1 * t643;
t587 = -t606 + t651;
t585 = t604 - t602;
t558 = -t568 + t621;
t557 = t567 - t621;
t552 = t620 * t578 + t613 * t648;
t549 = t618 * t578 - t613 * t647;
t544 = t620 * t585 + t618 * t587;
t543 = t620 * t584 - t618 * t586;
t542 = t618 * t585 - t620 * t587;
t541 = t618 * t584 + t620 * t586;
t537 = t568 - t567;
t536 = -t566 + t570;
t534 = -t569 - t652;
t522 = -pkin(1) * t589 + t625;
t521 = pkin(1) * t590 + t639;
t520 = (-t571 * t619 + t573 * t617) * qJD(4);
t519 = (-t571 * t617 - t573 * t619) * qJD(4);
t509 = t619 * t536 - t617 * t652;
t508 = -t614 * t549 + t616 * t552;
t507 = t617 * t536 + t619 * t652;
t506 = t616 * t549 + t614 * t552;
t505 = -t617 * t534 + t619 * t566;
t504 = t619 * t534 + t617 * t566;
t498 = -t617 * t558 + t690;
t497 = t619 * t557 - t658;
t495 = t619 * t558 + t691;
t494 = t617 * t557 + t655;
t493 = pkin(1) * t502;
t490 = pkin(1) * t611 + pkin(4) * t640;
t488 = -t619 * t533 - t617 * t535;
t486 = -t617 * t533 + t619 * t535;
t482 = pkin(1) * t551 + t644;
t481 = pkin(1) * t549 + t629;
t480 = -t613 * t519 + t615 * t520;
t479 = t615 * t519 + t613 * t520;
t478 = t618 * qJDD(4) + t620 * t480;
t477 = -t620 * qJDD(4) + t618 * t480;
t471 = -pkin(4) * t549 - t618 * t517 + t615 * t654;
t470 = -pkin(4) * t551 - t618 * t516 + t613 * t654;
t469 = pkin(4) * t552 + t620 * t517 + t615 * t657;
t468 = -pkin(4) * t553 + t620 * t516 + t613 * t657;
t466 = -t613 * t507 + t615 * t509;
t465 = -t613 * t504 + t615 * t505;
t464 = t615 * t507 + t613 * t509;
t463 = t615 * t504 + t613 * t505;
t461 = -t613 * t495 + t615 * t498;
t460 = -t613 * t494 + t615 * t497;
t459 = t615 * t496 + t613 * t499;
t458 = t615 * t495 + t613 * t498;
t457 = t615 * t494 + t613 * t497;
t450 = -pkin(4) * t541 + t620 * t475;
t449 = pkin(4) * t543 + t618 * t475;
t448 = t620 * t476 + t657;
t447 = t618 * t476 - t654;
t446 = t620 * t461 + t618 * t570;
t445 = t620 * t460 - t618 * t569;
t444 = t618 * t461 - t620 * t570;
t443 = t618 * t460 + t620 * t569;
t440 = -t613 * t486 + t615 * t488;
t438 = t615 * t486 + t613 * t488;
t437 = t615 * t485 + t613 * t487;
t434 = t615 * t483 + t613 * t484;
t432 = t620 * t466 + t646;
t431 = t620 * t465 - t646;
t430 = t618 * t466 - t645;
t429 = t618 * t465 + t645;
t428 = pkin(1) * t541 + t634;
t426 = t620 * t462 + t618 * t535;
t425 = t618 * t462 - t620 * t535;
t423 = t620 * t440 + t618 * t537;
t422 = t618 * t440 - t620 * t537;
t421 = t620 * t435 + t618 * t533;
t420 = t618 * t435 - t620 * t533;
t419 = t620 * t439 + t618 * t518;
t418 = t618 * t439 - t620 * t518;
t417 = -pkin(2) * t437 - t672;
t414 = pkin(1) * t447 + t653;
t413 = -pkin(2) * t459 - t626;
t408 = -pkin(2) * t434 - t628;
t407 = -pkin(4) * t447 - (pkin(2) * t618 - qJ(3) * t620) * t475;
t404 = -qJ(3) * t459 - t613 * t442 + t615 * t472;
t403 = -qJ(3) * t434 - t613 * t427 + t615 * t453;
t402 = pkin(4) * t448 - (-pkin(2) * t620 - qJ(3) * t618 - pkin(1)) * t475;
t400 = t613 * t416 + t662;
t398 = t620 * t401 + t618 * t513;
t397 = t618 * t401 - t620 * t513;
t396 = pkin(1) * t425 + t635;
t395 = pkin(1) * t420 + t636;
t394 = -pkin(2) * t400 - t673;
t393 = -pkin(4) * t425 + t620 * t404 - t618 * t413;
t392 = -qJ(3) * t437 - t613 * t406 + t615 * t410;
t391 = -pkin(1) * t459 + pkin(4) * t426 + t618 * t404 + t620 * t413;
t390 = -pkin(4) * t420 + t620 * t403 - t618 * t408;
t389 = -pkin(5) * t662 - qJ(3) * t400 - t613 * t412;
t388 = pkin(1) * t418 + t637;
t387 = -pkin(1) * t434 + pkin(4) * t421 + t618 * t403 + t620 * t408;
t386 = -pkin(4) * t418 + t620 * t392 - t618 * t417;
t385 = -pkin(1) * t437 + pkin(4) * t419 + t618 * t392 + t620 * t417;
t384 = pkin(1) * t397 + t627;
t383 = -pkin(4) * t397 + t620 * t389 - t618 * t394;
t382 = -pkin(1) * t400 + pkin(4) * t398 + t618 * t389 + t620 * t394;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t663, -t660, -t675, -qJ(1) * t675, 0, 0, t545, 0, -t680, 0, t687, t688, t693, pkin(4) * t661 + qJ(1) * t693 - t614 * t490, -t631, -t614 * t542 + t616 * t544, t508, t631, t685, 0, -qJ(1) * t686 - t614 * t468 + t616 * t470, -qJ(1) * t506 - t614 * t469 + t616 * t471, t616 * t450 - t614 * t449 - qJ(1) * (t616 * t541 + t614 * t543), t616 * t407 - t614 * t402 - qJ(1) * (t616 * t447 + t614 * t448), -t614 * t430 + t616 * t432, -t614 * t422 + t616 * t423, -t614 * t444 + t616 * t446, -t614 * t429 + t616 * t431, -t614 * t443 + t616 * t445, -t614 * t477 + t616 * t478, t616 * t390 - t614 * t387 - qJ(1) * (t616 * t420 + t614 * t421), t616 * t393 - t614 * t391 - qJ(1) * (t616 * t425 + t614 * t426), t616 * t386 - t614 * t385 - qJ(1) * (t616 * t418 + t614 * t419), t616 * t383 - t614 * t382 - qJ(1) * (t616 * t397 + t614 * t398); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t660, -t663, t677, qJ(1) * t677, 0, 0, t680, 0, t545, 0, -t688, t687, t692, pkin(4) * t667 + qJ(1) * t692 + t616 * t490, t632, t616 * t542 + t614 * t544, t506, -t632, -t686, 0, -qJ(1) * t685 + t616 * t468 + t614 * t470, qJ(1) * t508 + t616 * t469 + t614 * t471, t614 * t450 + t616 * t449 + qJ(1) * (-t614 * t541 + t616 * t543), t614 * t407 + t616 * t402 + qJ(1) * (-t614 * t447 + t616 * t448), t616 * t430 + t614 * t432, t616 * t422 + t614 * t423, t616 * t444 + t614 * t446, t616 * t429 + t614 * t431, t616 * t443 + t614 * t445, t616 * t477 + t614 * t478, t614 * t390 + t616 * t387 + qJ(1) * (-t614 * t420 + t616 * t421), t614 * t393 + t616 * t391 + qJ(1) * (-t614 * t425 + t616 * t426), t614 * t386 + t616 * t385 + qJ(1) * (-t614 * t418 + t616 * t419), t614 * t383 + t616 * t382 + qJ(1) * (-t614 * t397 + t616 * t398); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t641, t591, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t521, t522, 0, -t493, t602, t592, 0, t604, 0, 0, t482, t481, t428, t414, t464, t438, t458, t463, t457, t479, t395, t396, t388, t384; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t611, -t641, 0, 0, 0, t590, 0, -t589, 0, t633, t563, t502, pkin(4) * t502, t556, t544, t552, -t556, t553, 0, t470, t471, t450, t407, t432, t423, t446, t431, t445, t478, t390, t393, t386, t383; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t611, 0, -t591, 0, 0, 0, t589, 0, t590, 0, -t563, t633, t640, t490, t555, t542, t549, -t555, -t551, 0, t468, t469, t449, t402, t430, t422, t444, t429, t443, t477, t387, t391, t385, t382; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t641, t591, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t521, t522, 0, -t493, t602, t592, 0, t604, 0, 0, t482, t481, t428, t414, t464, t438, t458, t463, t457, t479, t395, t396, t388, t384; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t674, 0, 0, -t611, -t639, 0, t643, t585, t578, -t643, t579, 0, t523, t524, t475, qJ(3) * t475, t466, t440, t461, t465, t460, t480, t403, t404, t392, t389; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t674, 0, qJDD(2), 0, t611, 0, -t625, 0, t593, -t587, -t603, -t593, -t605, 0, t516, t517, 0, pkin(2) * t475, -t539, -t537, -t570, t539, t569, -qJDD(4), t408, t413, t417, t394; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t639, t625, 0, 0, t602, t592, 0, t604, 0, 0, t644, t629, t634, t653, t464, t438, t458, t463, t457, t479, t636, t635, t637, t627; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t603, t605, t593, 0, t606, 0, 0, t532, t516, 0, t509, t488, t498, t505, t497, t520, t453, t472, t410, -pkin(5) * t415; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t603, -t651, t605, -t593, 0, -t532, 0, t517, 0, t507, t486, t495, t504, t494, t519, t427, t442, t406, t412; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t593, t587, t603, t593, t605, 0, -t516, -t517, 0, 0, t539, t537, t570, -t539, -t569, qJDD(4), t628, t626, t672, t673; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t536, -t533, t679, t566, t557, -t566, 0, t513, t454, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t652, t535, t558, t534, t530, -t652, -t513, 0, t455, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t539, t537, t570, -t539, -t569, qJDD(4), -t454, -t455, 0, 0;];
m_new_reg = t1;
