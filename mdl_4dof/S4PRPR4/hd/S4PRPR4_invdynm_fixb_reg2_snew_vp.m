% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4PRPR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d2,d4,theta1]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:22
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4PRPR4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4PRPR4_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4PRPR4_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4PRPR4_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4PRPR4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4PRPR4_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:22:05
% EndTime: 2019-12-31 16:22:07
% DurationCPUTime: 2.66s
% Computational Cost: add. (3415->257), mult. (6464->303), div. (0->0), fcn. (3968->6), ass. (0->168)
t413 = sin(qJ(2));
t417 = qJD(2) ^ 2;
t415 = cos(qJ(2));
t448 = t415 * qJDD(2);
t380 = -t413 * t417 + t448;
t406 = g(3) - qJDD(1);
t358 = pkin(4) * t380 + t413 * t406;
t408 = sin(pkin(6));
t409 = cos(pkin(6));
t449 = t413 * qJDD(2);
t381 = t415 * t417 + t449;
t438 = t408 * t380 + t409 * t381;
t445 = -pkin(4) * t381 + t415 * t406;
t504 = -qJ(1) * t438 - t408 * t358 + t409 * t445;
t384 = t408 * g(1) - t409 * g(2);
t385 = t409 * g(1) + t408 * g(2);
t341 = t413 * t384 - t415 * t385;
t435 = t415 * t384 + t413 * t385;
t441 = t415 * t341 - t413 * t435;
t294 = -t413 * t341 - t415 * t435;
t469 = t409 * t294;
t501 = -t408 * t441 + t469;
t475 = t408 * t294;
t500 = t409 * t441 + t475;
t440 = t409 * t380 - t408 * t381;
t486 = qJ(1) * t440 + t409 * t358 + t408 * t445;
t419 = (2 * qJD(3) * qJD(2)) + t341;
t451 = qJDD(2) * qJ(3);
t316 = -t417 * pkin(2) + t419 + t451;
t407 = qJDD(2) * pkin(2);
t428 = qJDD(3) - t435;
t326 = -t417 * qJ(3) - t407 + t428;
t287 = t413 * t316 - t415 * t326;
t442 = t415 * t316 + t413 * t326;
t497 = -t408 * t287 + t409 * t442;
t496 = t409 * t287 + t408 * t442;
t315 = -qJDD(2) * pkin(5) + t326;
t412 = sin(qJ(4));
t414 = cos(qJ(4));
t297 = -t414 * t315 - t412 * t406;
t298 = t412 * t315 - t414 * t406;
t280 = -t414 * t297 + t412 * t298;
t485 = -pkin(2) - pkin(5);
t484 = pkin(1) * t380;
t483 = pkin(1) * t381;
t482 = pkin(3) * t280;
t311 = -t417 * pkin(5) + t316;
t481 = pkin(3) * t311;
t404 = t412 ^ 2;
t405 = t414 ^ 2;
t453 = t404 + t405;
t379 = t453 * qJDD(2);
t480 = pkin(3) * t379;
t478 = pkin(5) * t280;
t477 = t404 * t417;
t476 = t405 * t417;
t470 = t408 * t406;
t464 = t409 * t406;
t462 = t412 * t311;
t392 = t414 * t417 * t412;
t386 = qJDD(4) + t392;
t461 = t412 * t386;
t387 = qJDD(4) - t392;
t460 = t412 * t387;
t459 = t413 * t379;
t307 = t414 * t311;
t458 = t414 * t386;
t457 = t414 * t387;
t456 = t415 * t379;
t454 = -pkin(2) * t326 + qJ(3) * t316;
t452 = qJD(2) * qJD(4);
t450 = t412 * qJDD(2);
t397 = t414 * qJDD(2);
t447 = t412 * t452;
t446 = t414 * t452;
t416 = qJD(4) ^ 2;
t391 = -t416 - t476;
t348 = t414 * t391 - t461;
t443 = -pkin(5) * t348 + t307;
t436 = -t408 * t384 - t409 * t385;
t434 = t413 * t392;
t433 = t415 * t392;
t432 = -pkin(2) * t280 + qJ(3) * t311 - t478;
t375 = 0.2e1 * t446 + t450;
t431 = pkin(3) * t375 + t307;
t378 = t397 - 0.2e1 * t447;
t430 = pkin(3) * t378 - t462;
t389 = -t416 - t477;
t346 = t412 * t389 + t457;
t429 = -pkin(5) * t346 + t462;
t281 = t412 * t297 + t414 * t298;
t427 = t409 * t384 - t408 * t385;
t426 = -pkin(2) * t348 + qJ(3) * t378 + t443;
t425 = -pkin(3) * t346 + t297;
t424 = pkin(5) * t379 - t280;
t423 = -0.2e1 * t407 + t428;
t422 = -pkin(2) * t346 + qJ(3) * t375 + t429;
t421 = -pkin(3) * t348 + t298;
t382 = t453 * t417;
t420 = pkin(2) * t379 - qJ(3) * t382 + t424;
t418 = 0.2e1 * t451 + t419;
t390 = t416 - t476;
t388 = -t416 + t477;
t383 = (-t404 + t405) * t417;
t377 = t397 - t447;
t376 = -t446 - t450;
t372 = t453 * t452;
t357 = t415 * qJDD(4) - t413 * t372;
t356 = t413 * qJDD(4) + t415 * t372;
t355 = t412 * t377 + t405 * t452;
t354 = t414 * t376 + t404 * t452;
t353 = -t412 * t391 - t458;
t352 = -t412 * t390 + t457;
t351 = (t377 - t447) * t414;
t350 = t414 * t389 - t460;
t349 = t414 * t388 - t461;
t347 = t414 * t390 + t460;
t345 = t412 * t388 + t458;
t344 = (-t376 + t446) * t412;
t339 = -t415 * t382 - t459;
t338 = -t413 * t382 + t456;
t328 = -t414 * t375 - t412 * t378;
t327 = -t412 * t375 + t414 * t378;
t325 = t413 * t354 - t433;
t324 = t413 * t355 + t433;
t323 = -t415 * t354 - t434;
t322 = -t415 * t355 + t434;
t321 = t413 * t347 + t414 * t448;
t320 = t413 * t345 - t412 * t448;
t319 = -t415 * t347 + t413 * t397;
t318 = -t415 * t345 - t412 * t449;
t313 = -t341 - t483;
t312 = t435 + t484;
t306 = t413 * t348 + t415 * t378;
t305 = t413 * t346 + t415 * t375;
t304 = -t415 * t348 + t413 * t378;
t303 = -t415 * t346 + t413 * t375;
t302 = t423 - t484;
t301 = t418 + t483;
t300 = t413 * t327 + t415 * t383;
t299 = -t415 * t327 + t413 * t383;
t291 = pkin(1) * t294;
t290 = pkin(1) * t406 + pkin(4) * t441;
t285 = -pkin(4) * t287 + (-pkin(2) * t413 + qJ(3) * t415) * t406;
t284 = -qJ(3) * t353 - t421;
t283 = -qJ(3) * t350 - t425;
t282 = pkin(4) * t442 + (pkin(2) * t415 + qJ(3) * t413 + pkin(1)) * t406;
t278 = t485 * t350 + t431;
t277 = t485 * t353 + t430;
t276 = pkin(3) * t382 + t281;
t275 = t413 * t280 + t415 * t311;
t274 = -t415 * t280 + t413 * t311;
t273 = pkin(1) * t304 + t426;
t272 = pkin(1) * t303 + t422;
t271 = pkin(1) * t287 + t454;
t270 = -pkin(3) * t456 - pkin(4) * t338 + t413 * t276;
t269 = -pkin(3) * t459 + pkin(4) * t339 - t415 * t276;
t268 = pkin(1) * t338 + t420;
t267 = -qJ(3) * t281 + t482;
t266 = t485 * t281 + t481;
t265 = -pkin(4) * t304 - t413 * t277 + t415 * t284;
t264 = -pkin(4) * t303 - t413 * t278 + t415 * t283;
t263 = -pkin(1) * t353 + pkin(4) * t306 + t415 * t277 + t413 * t284;
t262 = -pkin(1) * t350 + pkin(4) * t305 + t415 * t278 + t413 * t283;
t261 = pkin(1) * t274 + t432;
t260 = -pkin(4) * t274 - t413 * t266 + t415 * t267;
t259 = -pkin(1) * t281 + pkin(4) * t275 + t415 * t266 + t413 * t267;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t470, -t464, -t427, -qJ(1) * t427, 0, 0, t440, 0, -t438, 0, -t486, -t504, t501, pkin(4) * t469 + qJ(1) * t501 - t408 * t290, 0, -t440, t438, 0, 0, 0, -t496, t486, t504, -qJ(1) * t496 - t408 * t282 + t409 * t285, -t408 * t322 + t409 * t324, -t408 * t299 + t409 * t300, -t408 * t319 + t409 * t321, -t408 * t323 + t409 * t325, -t408 * t318 + t409 * t320, -t408 * t356 + t409 * t357, t409 * t264 - t408 * t262 - qJ(1) * (t409 * t303 + t408 * t305), t409 * t265 - t408 * t263 - qJ(1) * (t409 * t304 + t408 * t306), t409 * t270 - t408 * t269 - qJ(1) * (t409 * t338 + t408 * t339), t409 * t260 - t408 * t259 - qJ(1) * (t409 * t274 + t408 * t275); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t464, -t470, t436, qJ(1) * t436, 0, 0, t438, 0, t440, 0, t504, -t486, t500, pkin(4) * t475 + qJ(1) * t500 + t409 * t290, 0, -t438, -t440, 0, 0, 0, t497, -t504, t486, qJ(1) * t497 + t409 * t282 + t408 * t285, t409 * t322 + t408 * t324, t409 * t299 + t408 * t300, t409 * t319 + t408 * t321, t409 * t323 + t408 * t325, t409 * t318 + t408 * t320, t409 * t356 + t408 * t357, t408 * t264 + t409 * t262 + qJ(1) * (-t408 * t303 + t409 * t305), t408 * t265 + t409 * t263 + qJ(1) * (-t408 * t304 + t409 * t306), t408 * t270 + t409 * t269 + qJ(1) * (-t408 * t338 + t409 * t339), t408 * t260 + t409 * t259 + qJ(1) * (-t408 * t274 + t409 * t275); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t384, t385, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t312, t313, 0, -t291, qJDD(2), 0, 0, 0, 0, 0, 0, t302, t301, t271, t351, t328, t352, t344, t349, 0, t272, t273, t268, t261; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t406, -t384, 0, 0, 0, t380, 0, -t381, 0, -t358, -t445, t294, pkin(4) * t294, 0, -t380, t381, 0, 0, 0, -t287, t358, t445, t285, t324, t300, t321, t325, t320, t357, t264, t265, t270, t260; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t406, 0, -t385, 0, 0, 0, t381, 0, t380, 0, t445, -t358, t441, t290, 0, -t381, -t380, 0, 0, 0, t442, -t445, t358, t282, t322, t299, t319, t323, t318, t356, t262, t263, t269, t259; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t384, t385, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t312, t313, 0, -t291, qJDD(2), 0, 0, 0, 0, 0, 0, t302, t301, t271, t351, t328, t352, t344, t349, 0, t272, t273, t268, t261; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t417, 0, 0, -t406, -t435, 0, 0, -qJDD(2), t417, 0, 0, 0, t326, 0, t406, qJ(3) * t406, t392, t383, t397, -t392, -t450, qJDD(4), t283, t284, -t480, t267; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t417, 0, qJDD(2), 0, t406, 0, t341, 0, 0, -t417, -qJDD(2), 0, 0, 0, t316, -t406, 0, pkin(2) * t406, -t355, -t327, -t347, -t354, -t345, t372, t278, t277, -t276, t266; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t435, -t341, 0, 0, qJDD(2), 0, 0, 0, 0, 0, 0, t423, t418, t454, t351, t328, t352, t344, t349, 0, t422, t426, t420, t432; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, 0, 0, 0, 0, 0, t326, t316, 0, t351, t328, t352, t344, t349, 0, t429, t443, t424, -t478; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t417, 0, 0, 0, -t326, 0, -t406, 0, -t392, -t383, -t397, t392, t450, -qJDD(4), t425, t421, t480, -t482; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t417, qJDD(2), 0, 0, 0, -t316, t406, 0, 0, t355, t327, t347, t354, t345, -t372, pkin(5) * t350 - t431, pkin(5) * t353 - t430, t276, pkin(5) * t281 - t481; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t377, -t375, t387, t447, t388, -t447, 0, t311, t297, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t446, t378, t390, t376, t386, -t446, -t311, 0, t298, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t392, t383, t397, -t392, -t450, qJDD(4), -t297, -t298, 0, 0;];
m_new_reg = t1;
