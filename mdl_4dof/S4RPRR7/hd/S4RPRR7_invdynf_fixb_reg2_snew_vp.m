% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S4RPRR7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
%
% Output:
% f_new_reg [(3*5)x(5*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:54
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S4RPRR7_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RPRR7_invdynf_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RPRR7_invdynf_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RPRR7_invdynf_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RPRR7_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RPRR7_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:54:20
% EndTime: 2019-12-31 16:54:21
% DurationCPUTime: 1.52s
% Computational Cost: add. (4449->164), mult. (10797->227), div. (0->0), fcn. (7777->8), ass. (0->127)
t972 = sin(qJ(1));
t975 = cos(qJ(1));
t955 = -t975 * g(1) - t972 * g(2);
t977 = qJD(1) ^ 2;
t1012 = -t977 * pkin(1) + qJDD(1) * qJ(2) + (2 * qJD(2) * qJD(1)) + t955;
t968 = cos(pkin(7));
t954 = t972 * g(1) - t975 * g(2);
t986 = -qJDD(2) + t954;
t967 = sin(pkin(7));
t964 = t967 ^ 2;
t965 = t968 ^ 2;
t997 = t964 + t965;
t926 = (t997 * pkin(5) + qJ(2)) * t977 + (t968 * pkin(2) + pkin(1)) * qJDD(1) + t986;
t951 = t997 * t977;
t971 = sin(qJ(3));
t974 = cos(qJ(3));
t944 = (t967 * t971 - t968 * t974) * qJD(1);
t941 = qJD(4) + t944;
t1011 = qJD(4) + t941;
t984 = t967 * t974 + t968 * t971;
t1010 = t984 * qJDD(1);
t946 = t984 * qJD(1);
t970 = sin(qJ(4));
t973 = cos(qJ(4));
t934 = -t973 * qJD(3) + t970 * t946;
t1007 = t934 ^ 2;
t936 = t970 * qJD(3) + t973 * t946;
t1006 = t936 ^ 2;
t1005 = t941 ^ 2;
t1004 = t944 ^ 2;
t1003 = t946 ^ 2;
t1002 = t968 * g(3);
t1001 = t936 * t934;
t1000 = t946 * t944;
t999 = t965 * t977;
t998 = t968 * t977;
t933 = -t967 * g(3) + t1012 * t968;
t960 = t968 * qJDD(1);
t922 = -pkin(2) * t999 + pkin(5) * t960 + t933;
t980 = -t1002 + (pkin(2) * t998 - qJDD(1) * pkin(5) - t1012) * t967;
t903 = t974 * t922 + t971 * t980;
t996 = t944 * qJD(3);
t995 = t946 * qJD(3);
t994 = qJD(4) - t941;
t992 = t967 * qJDD(1);
t991 = t972 * qJDD(1);
t990 = t975 * qJDD(1);
t902 = -t971 * t922 + t974 * t980;
t931 = t1010 - t996;
t988 = t973 * qJDD(3) - t970 * t931;
t985 = -t974 * t960 + t971 * t992;
t983 = -t970 * qJDD(3) - t973 * t931;
t929 = t985 + 0.2e1 * t995;
t981 = -qJDD(4) - t985 - t995;
t976 = qJD(3) ^ 2;
t956 = t967 * t998;
t953 = -t975 * t977 - t991;
t952 = -t972 * t977 + t990;
t950 = t997 * qJDD(1);
t949 = t968 * t951;
t948 = t967 * t951;
t942 = qJDD(1) * pkin(1) + t977 * qJ(2) + t986;
t937 = -t976 - t1003;
t932 = -t1012 * t967 - t1002;
t930 = t1010 - 0.2e1 * t996;
t928 = -qJDD(3) - t1000;
t927 = qJDD(3) - t1000;
t925 = -t976 - t1004;
t924 = t944 * pkin(3) - t946 * pkin(6);
t918 = -t1003 - t1004;
t916 = -t1005 - t1006;
t915 = t974 * t928 - t971 * t937;
t914 = t971 * t928 + t974 * t937;
t913 = -t1005 - t1007;
t912 = -t967 * t932 + t968 * t933;
t911 = t968 * t932 + t967 * t933;
t910 = -t1006 - t1007;
t909 = t1010 * t971 - t974 * t985;
t908 = -t1010 * t974 - t971 * t985;
t907 = t974 * t925 - t971 * t927;
t906 = t971 * t925 + t974 * t927;
t905 = t981 - t1001;
t904 = -t981 - t1001;
t901 = t994 * t934 + t983;
t900 = -t1011 * t934 - t983;
t899 = -t994 * t936 + t988;
t898 = t1011 * t936 - t988;
t897 = -t967 * t914 + t968 * t915;
t896 = t968 * t914 + t967 * t915;
t895 = (-t931 + t996) * pkin(6) + t929 * pkin(3) - t926;
t894 = -t976 * pkin(3) + qJDD(3) * pkin(6) - t944 * t924 + t903;
t893 = -qJDD(3) * pkin(3) - t976 * pkin(6) + t946 * t924 - t902;
t892 = t973 * t905 - t970 * t916;
t891 = t970 * t905 + t973 * t916;
t890 = -t967 * t908 + t968 * t909;
t889 = t968 * t908 + t967 * t909;
t888 = -t970 * t904 + t973 * t913;
t887 = t973 * t904 + t970 * t913;
t886 = -t967 * t906 + t968 * t907;
t885 = t968 * t906 + t967 * t907;
t884 = -t971 * t902 + t974 * t903;
t883 = t974 * t902 + t971 * t903;
t882 = t973 * t899 - t970 * t901;
t881 = t970 * t899 + t973 * t901;
t880 = t974 * t892 + t971 * t900;
t879 = t971 * t892 - t974 * t900;
t878 = t974 * t888 + t971 * t898;
t877 = t971 * t888 - t974 * t898;
t876 = t973 * t894 + t970 * t895;
t875 = -t970 * t894 + t973 * t895;
t874 = t974 * t882 + t971 * t910;
t873 = t971 * t882 - t974 * t910;
t872 = -t967 * t883 + t968 * t884;
t871 = t968 * t883 + t967 * t884;
t870 = -t967 * t879 + t968 * t880;
t869 = t968 * t879 + t967 * t880;
t868 = -t967 * t877 + t968 * t878;
t867 = t968 * t877 + t967 * t878;
t866 = -t970 * t875 + t973 * t876;
t865 = t973 * t875 + t970 * t876;
t864 = -t967 * t873 + t968 * t874;
t863 = t968 * t873 + t967 * t874;
t862 = t974 * t866 + t971 * t893;
t861 = t971 * t866 - t974 * t893;
t860 = -t967 * t861 + t968 * t862;
t859 = t968 * t861 + t967 * t862;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t953, -t952, 0, -t972 * t954 + t975 * t955, 0, 0, 0, 0, 0, 0, -t975 * t949 - t968 * t991, t975 * t948 + t967 * t991, t975 * t950 - t972 * t951, t975 * t912 - t972 * t942, 0, 0, 0, 0, 0, 0, t975 * t886 + t972 * t929, t975 * t897 + t972 * t930, t975 * t890 + t972 * t918, t975 * t872 - t972 * t926, 0, 0, 0, 0, 0, 0, t975 * t868 + t972 * t887, t975 * t870 + t972 * t891, t975 * t864 + t972 * t881, t975 * t860 + t972 * t865; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t952, t953, 0, t975 * t954 + t972 * t955, 0, 0, 0, 0, 0, 0, -t972 * t949 + t968 * t990, t972 * t948 - t967 * t990, t972 * t950 + t975 * t951, t972 * t912 + t975 * t942, 0, 0, 0, 0, 0, 0, t972 * t886 - t975 * t929, t972 * t897 - t975 * t930, t972 * t890 - t975 * t918, t972 * t872 + t975 * t926, 0, 0, 0, 0, 0, 0, t972 * t868 - t975 * t887, t972 * t870 - t975 * t891, t972 * t864 - t975 * t881, t972 * t860 - t975 * t865; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t911, 0, 0, 0, 0, 0, 0, t885, t896, t889, t871, 0, 0, 0, 0, 0, 0, t867, t869, t863, t859; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t977, -qJDD(1), 0, t955, 0, 0, 0, 0, 0, 0, -t949, t948, t950, t912, 0, 0, 0, 0, 0, 0, t886, t897, t890, t872, 0, 0, 0, 0, 0, 0, t868, t870, t864, t860; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t977, 0, t954, 0, 0, 0, 0, 0, 0, t960, -t992, t951, t942, 0, 0, 0, 0, 0, 0, -t929, -t930, -t918, t926, 0, 0, 0, 0, 0, 0, -t887, -t891, -t881, -t865; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t911, 0, 0, 0, 0, 0, 0, t885, t896, t889, t871, 0, 0, 0, 0, 0, 0, t867, t869, t863, t859; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t999, t956, t960, t933, 0, 0, 0, 0, 0, 0, t907, t915, t909, t884, 0, 0, 0, 0, 0, 0, t878, t880, t874, t862; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t956, -t964 * t977, -t992, t932, 0, 0, 0, 0, 0, 0, t906, t914, t908, t883, 0, 0, 0, 0, 0, 0, t877, t879, t873, t861; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t960, t992, -t951, -t942, 0, 0, 0, 0, 0, 0, t929, t930, t918, -t926, 0, 0, 0, 0, 0, 0, t887, t891, t881, t865; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t925, t928, -t985, t903, 0, 0, 0, 0, 0, 0, t888, t892, t882, t866; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t927, t937, -t1010, t902, 0, 0, 0, 0, 0, 0, -t898, -t900, -t910, -t893; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t929, t930, t918, -t926, 0, 0, 0, 0, 0, 0, t887, t891, t881, t865; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t913, t905, t899, t876; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t904, t916, t901, t875; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t898, t900, t910, t893;];
f_new_reg = t1;
