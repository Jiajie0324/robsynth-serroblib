% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S4RPRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
% 
% Output:
% tauB_reg [6x(5*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:54
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S4RPRR7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RPRR7_invdynB_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RPRR7_invdynB_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RPRR7_invdynB_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RPRR7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RPRR7_invdynB_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:54:09
% EndTime: 2019-12-31 16:54:14
% DurationCPUTime: 4.79s
% Computational Cost: add. (14276->401), mult. (34440->611), div. (0->0), fcn. (24596->8), ass. (0->281)
t447 = sin(qJ(1));
t450 = cos(qJ(1));
t427 = t450 * g(1) + t447 * g(2);
t512 = -(2 * qJD(2) * qJD(1)) + t427;
t445 = sin(qJ(4));
t442 = sin(pkin(7));
t443 = cos(pkin(7));
t446 = sin(qJ(3));
t449 = cos(qJ(3));
t460 = t442 * t449 + t443 * t446;
t416 = t460 * qJD(1);
t448 = cos(qJ(4));
t395 = -qJD(3) * t448 + t416 * t445;
t397 = qJD(3) * t445 + t416 * t448;
t357 = t397 * t395;
t475 = qJDD(1) * t443;
t492 = t442 * t446;
t412 = qJDD(1) * t492 - t449 * t475;
t478 = t416 * qJD(3);
t376 = -t412 - t478;
t457 = qJDD(4) - t376;
t506 = -t357 + t457;
t511 = t445 * t506;
t414 = (-t443 * t449 + t492) * qJD(1);
t381 = t416 * t414;
t504 = qJDD(3) - t381;
t510 = t446 * t504;
t509 = t448 * t506;
t508 = t449 * t504;
t452 = qJD(1) ^ 2;
t507 = -(t452 * pkin(1)) + qJDD(1) * qJ(2) - t512;
t426 = t447 * g(1) - g(2) * t450;
t461 = -qJDD(2) + t426;
t466 = pkin(2) * t443 + pkin(1);
t439 = t442 ^ 2;
t440 = t443 ^ 2;
t480 = t439 + t440;
t371 = t466 * qJDD(1) + (pkin(5) * t480 + qJ(2)) * t452 + t461;
t407 = qJD(4) + t414;
t364 = t407 * t395;
t479 = t414 * qJD(3);
t505 = t460 * qJDD(1);
t378 = t505 - t479;
t467 = qJD(4) * t395 - qJDD(3) * t445 - t378 * t448;
t317 = t467 + t364;
t502 = t452 * t480;
t463 = -qJDD(3) * t448 + t445 * t378;
t312 = (qJD(4) - t407) * t397 + t463;
t393 = t395 ^ 2;
t394 = t397 ^ 2;
t406 = t407 ^ 2;
t410 = t414 ^ 2;
t411 = t416 ^ 2;
t500 = pkin(3) * t446;
t499 = t443 * g(3);
t498 = qJDD(1) * pkin(1);
t497 = t407 * t445;
t496 = t407 * t448;
t495 = t439 * t452;
t433 = t440 * t452;
t383 = -t442 * g(3) + t443 * t507;
t363 = -pkin(2) * t433 + pkin(5) * t475 + t383;
t455 = -t499 + (t466 * t452 + (-pkin(5) - qJ(2)) * qJDD(1) + t512) * t442;
t320 = t363 * t446 - t449 * t455;
t321 = t363 * t449 + t446 * t455;
t270 = -t320 * t449 + t321 * t446;
t494 = t442 * t270;
t493 = t442 * t443;
t491 = t443 * t270;
t369 = pkin(3) * t414 - pkin(6) * t416;
t451 = qJD(3) ^ 2;
t288 = -qJDD(3) * pkin(3) - pkin(6) * t451 + t369 * t416 + t320;
t490 = t445 * t288;
t328 = t357 + t457;
t489 = t445 * t328;
t488 = t446 * t371;
t373 = qJDD(3) + t381;
t487 = t446 * t373;
t408 = t452 * qJ(2) + t461 + t498;
t486 = t447 * t408;
t485 = t448 * t288;
t484 = t448 * t328;
t483 = t449 * t371;
t482 = t449 * t373;
t481 = t450 * t408;
t289 = -pkin(3) * t451 + qJDD(3) * pkin(6) - t369 * t414 + t321;
t293 = (-t378 + t479) * pkin(6) + (-t376 + t478) * pkin(3) - t371;
t246 = t289 * t448 + t293 * t445;
t474 = t447 * qJDD(1);
t473 = t450 * qJDD(1);
t471 = t446 * t357;
t470 = t447 * t381;
t469 = t449 * t357;
t468 = t450 * t381;
t465 = -pkin(3) * t449 - pkin(2);
t464 = t408 + t498;
t245 = t289 * t445 - t293 * t448;
t271 = t320 * t446 + t321 * t449;
t382 = t442 * t507 + t499;
t341 = t382 * t442 + t383 * t443;
t392 = -t426 * t447 - t427 * t450;
t425 = -t447 * t452 + t473;
t462 = -pkin(4) * t425 - g(3) * t447;
t219 = -t245 * t448 + t246 * t445;
t220 = t245 * t445 + t246 * t448;
t340 = t382 * t443 - t383 * t442;
t391 = t426 * t450 - t427 * t447;
t424 = t450 * t452 + t474;
t418 = t443 * t502;
t388 = -t418 * t447 + t443 * t473;
t459 = t418 * t450 + t443 * t474;
t432 = t440 * qJDD(1);
t431 = t439 * qJDD(1);
t423 = t433 - t495;
t422 = t433 + t495;
t421 = t432 - t431;
t420 = t432 + t431;
t417 = t442 * t502;
t409 = -pkin(4) * t424 + g(3) * t450;
t402 = -t411 - t451;
t401 = -t411 + t451;
t400 = t410 - t451;
t399 = t425 * t493;
t398 = t424 * t493;
t389 = t417 * t450 + t442 * t474;
t387 = t417 * t447 - t442 * t473;
t385 = t420 * t450 - t422 * t447;
t384 = t420 * t447 + t422 * t450;
t380 = -t411 + t410;
t377 = t505 - 0.2e1 * t479;
t375 = t412 + 0.2e1 * t478;
t370 = -t451 - t410;
t366 = (-t414 * t449 + t416 * t446) * qJD(3);
t365 = (-t414 * t446 - t416 * t449) * qJD(3);
t362 = -t394 + t406;
t361 = t393 - t406;
t356 = -t410 - t411;
t355 = -t394 + t393;
t353 = t378 * t449 - t446 * t478;
t352 = t378 * t446 + t449 * t478;
t351 = -t376 * t446 + t449 * t479;
t350 = t376 * t449 + t446 * t479;
t349 = -t394 - t406;
t348 = -t402 * t446 - t482;
t347 = -t401 * t446 + t508;
t346 = t400 * t449 - t487;
t345 = t402 * t449 - t487;
t344 = t401 * t449 + t510;
t343 = t400 * t446 + t482;
t342 = -t406 - t393;
t337 = -qJD(4) * t397 - t463;
t336 = t393 + t394;
t335 = -t375 * t449 - t377 * t446;
t334 = -t412 * t449 + t446 * t505;
t333 = -t375 * t446 + t377 * t449;
t332 = -t412 * t446 - t449 * t505;
t331 = t370 * t449 - t510;
t330 = t370 * t446 + t508;
t326 = (-t395 * t448 + t397 * t445) * t407;
t325 = (t395 * t445 + t397 * t448) * t407;
t324 = -t365 * t442 + t366 * t443;
t323 = t341 * t450 - t486;
t322 = t341 * t447 + t481;
t318 = -pkin(5) * t345 - t483;
t316 = -t364 + t467;
t313 = (-qJD(4) - t407) * t397 - t463;
t311 = -pkin(5) * t330 - t488;
t310 = -t397 * t497 - t448 * t467;
t309 = -t397 * t496 + t445 * t467;
t308 = -t337 * t445 + t395 * t496;
t307 = -t337 * t448 - t395 * t497;
t306 = -t352 * t442 + t353 * t443;
t305 = -t350 * t442 + t351 * t443;
t304 = -t345 * t442 + t348 * t443;
t303 = -t344 * t442 + t347 * t443;
t302 = -t343 * t442 + t346 * t443;
t301 = t345 * t443 + t348 * t442;
t300 = t326 * t449 + t446 * t457;
t299 = t326 * t446 - t449 * t457;
t298 = t361 * t448 - t489;
t297 = -t362 * t445 + t509;
t296 = -t361 * t445 - t484;
t295 = -t362 * t448 - t511;
t294 = -pkin(2) * t377 + pkin(5) * t348 - t488;
t290 = -pkin(2) * t375 + pkin(5) * t331 + t483;
t287 = -t349 * t445 - t484;
t286 = t349 * t448 - t489;
t284 = -t333 * t442 + t335 * t443;
t283 = -t332 * t442 + t334 * t443;
t282 = t332 * t443 + t334 * t442;
t281 = t342 * t448 - t511;
t280 = t342 * t445 + t509;
t279 = -t330 * t442 + t331 * t443;
t278 = t330 * t443 + t331 * t442;
t277 = t304 * t450 + t377 * t447;
t276 = t304 * t447 - t377 * t450;
t275 = t310 * t449 + t471;
t274 = t308 * t449 - t471;
t273 = t310 * t446 - t469;
t272 = t308 * t446 + t469;
t269 = t279 * t450 + t375 * t447;
t268 = t279 * t447 - t375 * t450;
t267 = t283 * t450 + t356 * t447;
t266 = t283 * t447 - t356 * t450;
t265 = -t312 * t448 - t316 * t445;
t264 = t313 * t448 + t317 * t445;
t263 = -t312 * t445 + t316 * t448;
t262 = -t313 * t445 + t317 * t448;
t261 = pkin(2) * t371 + pkin(5) * t271;
t260 = -pkin(1) * t282 - pkin(2) * t332;
t259 = t298 * t449 - t312 * t446;
t258 = t297 * t449 - t316 * t446;
t257 = t298 * t446 + t312 * t449;
t256 = t297 * t446 + t316 * t449;
t255 = t287 * t449 - t317 * t446;
t254 = t287 * t446 + t317 * t449;
t253 = -pkin(5) * t332 - t270;
t252 = -t299 * t442 + t300 * t443;
t251 = t281 * t449 - t313 * t446;
t250 = t281 * t446 + t313 * t449;
t249 = t264 * t449 - t355 * t446;
t248 = t264 * t446 + t355 * t449;
t247 = -pkin(1) * t301 - pkin(2) * t345 + t321;
t244 = -pkin(6) * t286 + t485;
t243 = t265 * t449 - t336 * t446;
t242 = t265 * t446 + t336 * t449;
t241 = -pkin(6) * t280 + t490;
t240 = -pkin(2) * t356 + pkin(5) * t334 + t271;
t239 = -pkin(1) * t278 - pkin(2) * t330 + t320;
t238 = -t273 * t442 + t275 * t443;
t237 = -t272 * t442 + t274 * t443;
t236 = -qJ(2) * t301 - t294 * t442 + t318 * t443;
t235 = t271 * t443 - t494;
t234 = t271 * t442 + t491;
t233 = -qJ(2) * t278 - t290 * t442 + t311 * t443;
t232 = t235 * t450 - t371 * t447;
t231 = t235 * t447 + t371 * t450;
t230 = -pkin(3) * t286 + t246;
t229 = -pkin(3) * t280 + t245;
t228 = -t257 * t442 + t259 * t443;
t227 = -t256 * t442 + t258 * t443;
t226 = -t254 * t442 + t255 * t443;
t225 = t254 * t443 + t255 * t442;
t224 = -t250 * t442 + t251 * t443;
t223 = t250 * t443 + t251 * t442;
t222 = -t248 * t442 + t249 * t443;
t221 = -pkin(1) * t234 - pkin(2) * t270;
t218 = -t242 * t442 + t243 * t443;
t217 = t242 * t443 + t243 * t442;
t216 = t226 * t450 + t286 * t447;
t215 = t226 * t447 - t286 * t450;
t214 = t224 * t450 + t280 * t447;
t213 = t224 * t447 - t280 * t450;
t212 = -qJ(2) * t282 - t240 * t442 + t253 * t443;
t211 = t220 * t449 + t288 * t446;
t210 = t220 * t446 - t288 * t449;
t209 = -pkin(5) * t491 - qJ(2) * t234 - t261 * t442;
t208 = -pkin(6) * t263 - t219;
t207 = t218 * t450 + t263 * t447;
t206 = t218 * t447 - t263 * t450;
t205 = -pkin(5) * t254 - t230 * t446 + t244 * t449;
t204 = -pkin(5) * t250 - t229 * t446 + t241 * t449;
t203 = -pkin(2) * t286 + pkin(5) * t255 + t230 * t449 + t244 * t446;
t202 = -pkin(2) * t280 + pkin(5) * t251 + t229 * t449 + t241 * t446;
t201 = -pkin(1) * t225 - pkin(2) * t254 - pkin(3) * t317 - pkin(6) * t287 - t490;
t200 = -pkin(1) * t223 - pkin(2) * t250 - pkin(3) * t313 - pkin(6) * t281 + t485;
t199 = -pkin(5) * t242 + t208 * t449 + t263 * t500;
t198 = -t210 * t442 + t211 * t443;
t197 = t210 * t443 + t211 * t442;
t196 = pkin(5) * t243 + t446 * t208 + t263 * t465;
t195 = -pkin(1) * t217 - pkin(2) * t242 - pkin(3) * t336 - pkin(6) * t265 - t220;
t194 = -pkin(5) * t210 + (-pkin(6) * t449 + t500) * t219;
t193 = t198 * t450 + t219 * t447;
t192 = t198 * t447 - t219 * t450;
t191 = pkin(5) * t211 + (-pkin(6) * t446 + t465) * t219;
t190 = -qJ(2) * t225 - t203 * t442 + t205 * t443;
t189 = -qJ(2) * t223 - t202 * t442 + t204 * t443;
t188 = -pkin(1) * t197 - pkin(2) * t210 + pkin(3) * t288 - pkin(6) * t220;
t187 = -qJ(2) * t217 - t196 * t442 + t199 * t443;
t186 = -qJ(2) * t197 - t191 * t442 + t194 * t443;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t424, -t425, 0, t392, 0, 0, 0, 0, 0, 0, -t459, t389, t385, t323, 0, 0, 0, 0, 0, 0, t269, t277, t267, t232, 0, 0, 0, 0, 0, 0, t214, t216, t207, t193; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t425, -t424, 0, t391, 0, 0, 0, 0, 0, 0, t388, t387, t384, t322, 0, 0, 0, 0, 0, 0, t268, t276, t266, t231, 0, 0, 0, 0, 0, 0, t213, t215, t206, t192; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t340, 0, 0, 0, 0, 0, 0, t278, t301, t282, t234, 0, 0, 0, 0, 0, 0, t223, t225, t217, t197; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t425, 0, -t424, 0, t462, -t409, -t391, -pkin(4) * t391, t399, t421 * t450 - t423 * t447, t389, -t399, t459, 0, -pkin(4) * t388 - t382 * t447 - t442 * t481, -pkin(4) * t387 - t383 * t447 - t443 * t481, -pkin(4) * t384 + t340 * t450, -pkin(4) * t322 - (pkin(1) * t447 - qJ(2) * t450) * t340, t306 * t450 + t470, t284 * t450 - t380 * t447, t303 * t450 + t447 * t505, t305 * t450 - t470, t302 * t450 - t412 * t447, qJDD(3) * t447 + t324 * t450, -pkin(4) * t268 + t233 * t450 - t239 * t447, -pkin(4) * t276 + t236 * t450 - t247 * t447, -pkin(4) * t266 + t212 * t450 - t260 * t447, -pkin(4) * t231 + t209 * t450 - t221 * t447, t238 * t450 - t309 * t447, t222 * t450 - t262 * t447, t227 * t450 - t295 * t447, t237 * t450 - t307 * t447, t228 * t450 - t296 * t447, t252 * t450 - t325 * t447, -pkin(4) * t213 + t189 * t450 - t200 * t447, -pkin(4) * t215 + t190 * t450 - t201 * t447, -pkin(4) * t206 + t187 * t450 - t195 * t447, -pkin(4) * t192 + t186 * t450 - t188 * t447; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t424, 0, t425, 0, t409, t462, t392, pkin(4) * t392, t398, t421 * t447 + t423 * t450, t387, -t398, -t388, 0, -pkin(4) * t459 + t382 * t450 - t442 * t486, pkin(4) * t389 + t383 * t450 - t443 * t486, pkin(4) * t385 + t340 * t447, pkin(4) * t323 - (-pkin(1) * t450 - qJ(2) * t447) * t340, t306 * t447 - t468, t284 * t447 + t380 * t450, t303 * t447 - t450 * t505, t305 * t447 + t468, t302 * t447 + t412 * t450, -qJDD(3) * t450 + t324 * t447, pkin(4) * t269 + t233 * t447 + t239 * t450, pkin(4) * t277 + t236 * t447 + t247 * t450, pkin(4) * t267 + t212 * t447 + t260 * t450, pkin(4) * t232 + t209 * t447 + t221 * t450, t238 * t447 + t309 * t450, t222 * t447 + t262 * t450, t227 * t447 + t295 * t450, t237 * t447 + t307 * t450, t228 * t447 + t296 * t450, t252 * t447 + t325 * t450, pkin(4) * t214 + t189 * t447 + t200 * t450, pkin(4) * t216 + t190 * t447 + t201 * t450, pkin(4) * t207 + t187 * t447 + t195 * t450, pkin(4) * t193 + t186 * t447 + t188 * t450; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t426, t427, 0, 0, t431, 0.2e1 * t442 * t475, 0, t432, 0, 0, -qJ(2) * t418 + t443 * t464, qJ(2) * t417 - t442 * t464, pkin(1) * t422 + qJ(2) * t420 + t341, pkin(1) * t408 + qJ(2) * t341, t352 * t443 + t353 * t442, t333 * t443 + t335 * t442, t344 * t443 + t347 * t442, t350 * t443 + t351 * t442, t343 * t443 + t346 * t442, t365 * t443 + t366 * t442, -pkin(1) * t375 + qJ(2) * t279 + t290 * t443 + t311 * t442, -pkin(1) * t377 + qJ(2) * t304 + t294 * t443 + t318 * t442, -pkin(1) * t356 + qJ(2) * t283 + t240 * t443 + t253 * t442, pkin(1) * t371 - pkin(5) * t494 + qJ(2) * t235 + t261 * t443, t273 * t443 + t275 * t442, t248 * t443 + t249 * t442, t256 * t443 + t258 * t442, t272 * t443 + t274 * t442, t257 * t443 + t259 * t442, t299 * t443 + t300 * t442, -pkin(1) * t280 + qJ(2) * t224 + t202 * t443 + t204 * t442, -pkin(1) * t286 + qJ(2) * t226 + t203 * t443 + t205 * t442, -pkin(1) * t263 + qJ(2) * t218 + t196 * t443 + t199 * t442, -pkin(1) * t219 + qJ(2) * t198 + t191 * t443 + t194 * t442;];
tauB_reg = t1;
