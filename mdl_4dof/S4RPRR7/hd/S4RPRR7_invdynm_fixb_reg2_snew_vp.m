% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RPRR7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3,d4,theta2]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:54
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RPRR7_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RPRR7_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RPRR7_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RPRR7_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RPRR7_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RPRR7_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:54:14
% EndTime: 2019-12-31 16:54:20
% DurationCPUTime: 5.86s
% Computational Cost: add. (23588->448), mult. (56900->622), div. (0->0), fcn. (40467->8), ass. (0->307)
t783 = sin(qJ(4));
t780 = sin(pkin(7));
t781 = cos(pkin(7));
t784 = sin(qJ(3));
t787 = cos(qJ(3));
t803 = t780 * t787 + t781 * t784;
t753 = t803 * qJD(1);
t786 = cos(qJ(4));
t732 = -t786 * qJD(3) + t783 * t753;
t734 = t783 * qJD(3) + t786 * t753;
t699 = t734 * t732;
t770 = t780 * qJDD(1);
t772 = t781 * qJDD(1);
t749 = t784 * t770 - t787 * t772;
t824 = t753 * qJD(3);
t720 = -t749 - t824;
t712 = qJDD(4) - t720;
t854 = -t699 + t712;
t858 = t783 * t854;
t751 = (t780 * t784 - t781 * t787) * qJD(1);
t725 = t753 * t751;
t852 = qJDD(3) - t725;
t857 = t784 * t852;
t856 = t786 * t854;
t855 = t787 * t852;
t789 = qJD(1) ^ 2;
t785 = sin(qJ(1));
t788 = cos(qJ(1));
t763 = t785 * g(1) - t788 * g(2);
t805 = -qJDD(2) + t763;
t815 = pkin(2) * t781 + pkin(1);
t777 = t780 ^ 2;
t778 = t781 ^ 2;
t825 = t777 + t778;
t715 = t815 * qJDD(1) + (t825 * pkin(5) + qJ(2)) * t789 + t805;
t773 = t778 * t789;
t764 = t788 * g(1) + t785 * g(2);
t795 = -0.2e1 * qJD(2) * qJD(1) + t764;
t794 = -t789 * pkin(1) - t795;
t844 = t780 * g(3);
t853 = (pkin(5) + qJ(2)) * qJDD(1);
t707 = -pkin(2) * t773 - t844 + (t794 + t853) * t781;
t843 = t781 * g(3);
t792 = -t843 + (t815 * t789 + t795 - t853) * t780;
t660 = t787 * t707 + t784 * t792;
t713 = t751 * pkin(3) - t753 * pkin(6);
t848 = qJD(3) ^ 2;
t623 = -t848 * pkin(3) + qJDD(3) * pkin(6) - t751 * t713 + t660;
t742 = t751 * qJD(3);
t750 = t803 * qJDD(1);
t722 = -t742 + t750;
t626 = (-t722 + t742) * pkin(6) + (-t720 + t824) * pkin(3) - t715;
t578 = t783 * t623 - t786 * t626;
t579 = t786 * t623 + t783 * t626;
t546 = t783 * t578 + t786 * t579;
t850 = t789 * t825;
t730 = t732 ^ 2;
t731 = t734 ^ 2;
t744 = qJD(4) + t751;
t743 = t744 ^ 2;
t747 = t751 ^ 2;
t748 = t753 ^ 2;
t659 = t784 * t707 - t787 * t792;
t601 = -t787 * t659 + t784 * t660;
t847 = pkin(2) * t601;
t673 = -t749 * t784 - t787 * t750;
t846 = pkin(2) * t673;
t845 = pkin(3) * t784;
t841 = qJDD(1) * pkin(1);
t840 = t744 * t783;
t839 = t744 * t786;
t838 = t777 * t789;
t837 = t780 * t601;
t836 = t780 * t781;
t835 = t781 * t601;
t622 = -qJDD(3) * pkin(3) - t848 * pkin(6) + t753 * t713 + t659;
t616 = t783 * t622;
t668 = t699 + t712;
t834 = t783 * t668;
t833 = t784 * t715;
t717 = qJDD(3) + t725;
t832 = t784 * t717;
t745 = t789 * qJ(2) + t805 + t841;
t831 = t785 * t745;
t617 = t786 * t622;
t830 = t786 * t668;
t829 = t787 * t715;
t828 = t787 * t717;
t827 = t788 * t745;
t826 = -pkin(3) * t622 + pkin(6) * t546;
t823 = t785 * qJDD(1);
t822 = t788 * qJDD(1);
t821 = t784 * t699;
t820 = t785 * t725;
t819 = t787 * t699;
t818 = t788 * t725;
t691 = -t731 - t743;
t621 = -t783 * t691 - t830;
t800 = -t783 * qJDD(3) - t786 * t722;
t656 = (qJD(4) + t744) * t732 + t800;
t817 = pkin(3) * t656 + pkin(6) * t621 + t616;
t684 = -t743 - t730;
t611 = t786 * t684 - t858;
t811 = t786 * qJDD(3) - t783 * t722;
t679 = -t734 * qJD(4) + t811;
t709 = t744 * t734;
t652 = t679 - t709;
t816 = pkin(3) * t652 + pkin(6) * t611 - t617;
t814 = -pkin(3) * t787 - pkin(2);
t813 = t780 * t772;
t812 = t745 + t841;
t602 = t784 * t659 + t787 * t660;
t793 = qJDD(1) * qJ(2) + t794;
t726 = t780 * t793 + t843;
t727 = t781 * t793 - t844;
t683 = t780 * t726 + t781 * t727;
t810 = -t785 * t763 - t788 * t764;
t653 = (-qJD(4) + t744) * t734 + t811;
t680 = -t732 * qJD(4) - t800;
t708 = t744 * t732;
t655 = t680 + t708;
t600 = t786 * t653 + t783 * t655;
t677 = t730 + t731;
t809 = pkin(3) * t677 + pkin(6) * t600 + t546;
t539 = t784 * t546 - t787 * t622;
t808 = pkin(2) * t539 + t826;
t739 = -t748 - t848;
t687 = t787 * t739 - t832;
t807 = pkin(2) * t687 - t660;
t762 = -t785 * t789 + t822;
t806 = -pkin(4) * t762 - t785 * g(3);
t545 = -t786 * t578 + t783 * t579;
t682 = t781 * t726 - t780 * t727;
t804 = t788 * t763 - t785 * t764;
t583 = t784 * t611 + t787 * t652;
t802 = pkin(2) * t583 + t816;
t588 = t784 * t621 + t787 * t656;
t801 = pkin(2) * t588 + t817;
t761 = t788 * t789 + t823;
t714 = -t848 - t747;
t670 = t784 * t714 + t855;
t799 = pkin(2) * t670 - t659;
t573 = t784 * t600 + t787 * t677;
t798 = pkin(2) * t573 + t809;
t755 = t781 * t850;
t797 = -t785 * t755 + t781 * t822;
t796 = t788 * t755 + t781 * t823;
t771 = t778 * qJDD(1);
t769 = t777 * qJDD(1);
t766 = t789 * t836;
t765 = 0.2e1 * t813;
t760 = -t773 + t838;
t759 = t773 + t838;
t758 = t771 - t769;
t757 = t771 + t769;
t754 = t780 * t850;
t746 = -pkin(4) * t761 + t788 * g(3);
t738 = -t748 + t848;
t737 = t747 - t848;
t736 = t762 * t836;
t735 = t761 * t836;
t729 = t788 * t754 + t780 * t823;
t728 = t785 * t754 - t780 * t822;
t724 = t748 - t747;
t721 = -0.2e1 * t742 + t750;
t719 = t749 + 0.2e1 * t824;
t711 = (-t751 * t787 + t753 * t784) * qJD(3);
t710 = (-t751 * t784 - t753 * t787) * qJD(3);
t706 = -qJ(2) * t755 + t812 * t781;
t705 = qJ(2) * t754 - t812 * t780;
t704 = -t731 + t743;
t703 = t730 - t743;
t698 = -t747 - t748;
t697 = t731 - t730;
t695 = t787 * t722 - t784 * t824;
t694 = t784 * t722 + t787 * t824;
t693 = -t784 * t720 + t787 * t742;
t692 = t787 * t720 + t784 * t742;
t690 = -t784 * t739 - t828;
t689 = -t784 * t738 + t855;
t688 = t787 * t737 - t832;
t686 = t787 * t738 + t857;
t685 = t784 * t737 + t828;
t676 = -t787 * t719 - t784 * t721;
t675 = -t749 * t787 + t784 * t750;
t674 = -t784 * t719 + t787 * t721;
t671 = t787 * t714 - t857;
t666 = pkin(1) * t745 + qJ(2) * t683;
t665 = (-t732 * t786 + t734 * t783) * t744;
t664 = (-t732 * t783 - t734 * t786) * t744;
t663 = -t780 * t710 + t781 * t711;
t662 = t781 * t710 + t780 * t711;
t661 = pkin(1) * t759 + qJ(2) * t757 + t683;
t657 = -pkin(5) * t687 - t829;
t654 = t680 - t708;
t651 = -t679 - t709;
t648 = -pkin(5) * t670 - t833;
t647 = t786 * t680 - t734 * t840;
t646 = t783 * t680 + t734 * t839;
t645 = -t783 * t679 + t732 * t839;
t644 = -t786 * t679 - t732 * t840;
t643 = -t780 * t694 + t781 * t695;
t642 = -t780 * t692 + t781 * t693;
t641 = t781 * t694 + t780 * t695;
t640 = t781 * t692 + t780 * t693;
t639 = -t780 * t687 + t781 * t690;
t638 = -t780 * t686 + t781 * t689;
t637 = -t780 * t685 + t781 * t688;
t636 = t781 * t687 + t780 * t690;
t635 = t781 * t686 + t780 * t689;
t634 = t781 * t685 + t780 * t688;
t633 = t787 * t665 + t784 * t712;
t632 = t784 * t665 - t787 * t712;
t631 = t786 * t703 - t834;
t630 = -t783 * t704 + t856;
t629 = t783 * t703 + t830;
t628 = t786 * t704 + t858;
t627 = -pkin(2) * t721 + pkin(5) * t690 - t833;
t624 = -pkin(2) * t719 + pkin(5) * t671 + t829;
t620 = t786 * t691 - t834;
t615 = -t780 * t674 + t781 * t676;
t614 = -t780 * t673 + t781 * t675;
t613 = t781 * t674 + t780 * t676;
t612 = t781 * t673 + t780 * t675;
t610 = t783 * t684 + t856;
t609 = -t780 * t670 + t781 * t671;
t608 = t781 * t670 + t780 * t671;
t606 = t787 * t647 + t821;
t605 = t787 * t645 - t821;
t604 = t784 * t647 - t819;
t603 = t784 * t645 + t819;
t599 = t786 * t652 - t783 * t654;
t598 = t783 * t653 - t786 * t655;
t597 = t783 * t652 + t786 * t654;
t595 = pkin(2) * t715 + pkin(5) * t602;
t594 = -pkin(1) * t612 - t846;
t593 = t787 * t631 - t784 * t651;
t592 = t787 * t630 + t784 * t655;
t591 = t784 * t631 + t787 * t651;
t590 = t784 * t630 - t787 * t655;
t589 = t787 * t621 - t784 * t656;
t587 = -pkin(5) * t673 - t601;
t586 = -t780 * t632 + t781 * t633;
t585 = t781 * t632 + t780 * t633;
t584 = t787 * t611 - t784 * t652;
t582 = t787 * t599 + t784 * t697;
t581 = t784 * t599 - t787 * t697;
t580 = -pkin(1) * t636 - t807;
t575 = -pkin(6) * t620 + t617;
t574 = t787 * t600 - t784 * t677;
t572 = -pkin(6) * t610 + t616;
t571 = -pkin(2) * t698 + pkin(5) * t675 + t602;
t570 = -pkin(1) * t608 - t799;
t569 = -t780 * t604 + t781 * t606;
t568 = -t780 * t603 + t781 * t605;
t567 = t781 * t604 + t780 * t606;
t566 = t781 * t603 + t780 * t605;
t565 = -qJ(2) * t636 - t780 * t627 + t781 * t657;
t564 = t781 * t602 - t837;
t563 = t780 * t602 + t835;
t562 = -pkin(1) * t721 + qJ(2) * t639 + t781 * t627 + t780 * t657;
t561 = -qJ(2) * t608 - t780 * t624 + t781 * t648;
t560 = -pkin(3) * t620 + t579;
t559 = -pkin(3) * t610 + t578;
t558 = -pkin(1) * t719 + qJ(2) * t609 + t781 * t624 + t780 * t648;
t557 = -t780 * t591 + t781 * t593;
t556 = -t780 * t590 + t781 * t592;
t555 = t781 * t591 + t780 * t593;
t554 = t781 * t590 + t780 * t592;
t553 = -t780 * t588 + t781 * t589;
t552 = t781 * t588 + t780 * t589;
t551 = -t780 * t583 + t781 * t584;
t550 = t781 * t583 + t780 * t584;
t549 = -t780 * t581 + t781 * t582;
t548 = t781 * t581 + t780 * t582;
t547 = -pkin(1) * t563 - t847;
t543 = -t780 * t573 + t781 * t574;
t542 = t781 * t573 + t780 * t574;
t541 = -qJ(2) * t612 - t780 * t571 + t781 * t587;
t540 = t787 * t546 + t784 * t622;
t538 = -pkin(1) * t698 + qJ(2) * t614 + t781 * t571 + t780 * t587;
t537 = -pkin(5) * t835 - qJ(2) * t563 - t780 * t595;
t536 = -pkin(6) * t598 - t545;
t535 = pkin(1) * t715 - pkin(5) * t837 + qJ(2) * t564 + t781 * t595;
t534 = -pkin(5) * t588 - t784 * t560 + t787 * t575;
t533 = -pkin(5) * t583 - t784 * t559 + t787 * t572;
t532 = -pkin(2) * t620 + pkin(5) * t589 + t787 * t560 + t784 * t575;
t531 = -pkin(2) * t610 + pkin(5) * t584 + t787 * t559 + t784 * t572;
t530 = -pkin(1) * t552 - t801;
t529 = -pkin(1) * t550 - t802;
t528 = -pkin(5) * t573 + t787 * t536 + t598 * t845;
t527 = -t780 * t539 + t781 * t540;
t526 = t781 * t539 + t780 * t540;
t525 = pkin(5) * t574 + t784 * t536 + t814 * t598;
t524 = -pkin(1) * t542 - t798;
t523 = -pkin(5) * t539 + (-pkin(6) * t787 + t845) * t545;
t522 = pkin(5) * t540 + (-pkin(6) * t784 + t814) * t545;
t521 = -qJ(2) * t552 - t780 * t532 + t781 * t534;
t520 = -qJ(2) * t550 - t780 * t531 + t781 * t533;
t519 = -pkin(1) * t620 + qJ(2) * t553 + t781 * t532 + t780 * t534;
t518 = -pkin(1) * t610 + qJ(2) * t551 + t781 * t531 + t780 * t533;
t517 = -pkin(1) * t526 - t808;
t516 = -qJ(2) * t542 - t780 * t525 + t781 * t528;
t515 = -pkin(1) * t598 + qJ(2) * t543 + t781 * t525 + t780 * t528;
t514 = -qJ(2) * t526 - t780 * t522 + t781 * t523;
t513 = -pkin(1) * t545 + qJ(2) * t527 + t781 * t522 + t780 * t523;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t762, 0, -t761, 0, t806, -t746, -t804, -pkin(4) * t804, t736, t788 * t758 + t785 * t760, t729, -t736, t796, 0, -pkin(4) * t797 - t785 * t726 - t780 * t827, -pkin(4) * t728 - t785 * t727 - t781 * t827, t788 * t682 - pkin(4) * (t785 * t757 + t788 * t759), -pkin(4) * (t785 * t683 + t827) - (t785 * pkin(1) - t788 * qJ(2)) * t682, t788 * t643 + t820, t788 * t615 + t785 * t724, t788 * t638 + t785 * t750, t788 * t642 - t820, t788 * t637 - t785 * t749, t785 * qJDD(3) + t788 * t663, t788 * t561 - t785 * t570 - pkin(4) * (t785 * t609 - t788 * t719), t788 * t565 - t785 * t580 - pkin(4) * (t785 * t639 - t788 * t721), t788 * t541 - t785 * t594 - pkin(4) * (t785 * t614 - t788 * t698), t788 * t537 - t785 * t547 - pkin(4) * (t785 * t564 + t788 * t715), t788 * t569 + t785 * t646, t788 * t549 + t785 * t597, t788 * t556 + t785 * t628, t788 * t568 - t785 * t644, t788 * t557 + t785 * t629, t788 * t586 + t785 * t664, t788 * t520 - t785 * t529 - pkin(4) * (t785 * t551 - t788 * t610), t788 * t521 - t785 * t530 - pkin(4) * (t785 * t553 - t788 * t620), t788 * t516 - t785 * t524 - pkin(4) * (t785 * t543 - t788 * t598), t788 * t514 - t785 * t517 - pkin(4) * (t785 * t527 - t788 * t545); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t761, 0, t762, 0, t746, t806, t810, pkin(4) * t810, t735, t785 * t758 - t788 * t760, t728, -t735, -t797, 0, -pkin(4) * t796 + t788 * t726 - t780 * t831, pkin(4) * t729 + t788 * t727 - t781 * t831, t785 * t682 + pkin(4) * (t788 * t757 - t785 * t759), pkin(4) * (t788 * t683 - t831) - (-t788 * pkin(1) - t785 * qJ(2)) * t682, t785 * t643 - t818, t785 * t615 - t788 * t724, t785 * t638 - t788 * t750, t785 * t642 + t818, t785 * t637 + t788 * t749, -t788 * qJDD(3) + t785 * t663, t785 * t561 + t788 * t570 + pkin(4) * (t788 * t609 + t785 * t719), t785 * t565 + t788 * t580 + pkin(4) * (t788 * t639 + t785 * t721), t785 * t541 + t788 * t594 + pkin(4) * (t788 * t614 + t785 * t698), t785 * t537 + t788 * t547 + pkin(4) * (t788 * t564 - t785 * t715), t785 * t569 - t788 * t646, t785 * t549 - t788 * t597, t785 * t556 - t788 * t628, t785 * t568 + t788 * t644, t785 * t557 - t788 * t629, t785 * t586 - t788 * t664, t785 * t520 + t788 * t529 + pkin(4) * (t788 * t551 + t785 * t610), t785 * t521 + t788 * t530 + pkin(4) * (t788 * t553 + t785 * t620), t785 * t516 + t788 * t524 + pkin(4) * (t788 * t543 + t785 * t598), t785 * t514 + t788 * t517 + pkin(4) * (t788 * t527 + t785 * t545); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t763, t764, 0, 0, t769, t765, 0, t771, 0, 0, t706, t705, t661, t666, t641, t613, t635, t640, t634, t662, t558, t562, t538, t535, t567, t548, t554, t566, t555, t585, t518, t519, t515, t513; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t789, 0, 0, -g(3), -t763, 0, t813, t758, t754, -t813, t755, 0, -t780 * t745, -t781 * t745, t682, qJ(2) * t682, t643, t615, t638, t642, t637, t663, t561, t565, t541, t537, t569, t549, t556, t568, t557, t586, t520, t521, t516, t514; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t789, 0, qJDD(1), 0, g(3), 0, -t764, 0, t766, -t760, -t770, -t766, -t772, 0, t726, t727, 0, pkin(1) * t682, -t725, -t724, -t750, t725, t749, -qJDD(3), t570, t580, t594, t547, -t646, -t597, -t628, t644, -t629, -t664, t529, t530, t524, t517; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t763, t764, 0, 0, t769, t765, 0, t771, 0, 0, t706, t705, t661, t666, t641, t613, t635, t640, t634, t662, t558, t562, t538, t535, t567, t548, t554, t566, t555, t585, t518, t519, t515, t513; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t770, t772, t766, 0, t773, 0, 0, -t745, t726, 0, t695, t676, t689, t693, t688, t711, t648, t657, t587, -pkin(5) * t601, t606, t582, t592, t605, t593, t633, t533, t534, t528, t523; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t770, -t838, t772, -t766, 0, t745, 0, t727, 0, t694, t674, t686, t692, t685, t710, t624, t627, t571, t595, t604, t581, t590, t603, t591, t632, t531, t532, t525, t522; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t766, t760, t770, t766, t772, 0, -t726, -t727, 0, 0, t725, t724, t750, -t725, -t749, qJDD(3), t799, t807, t846, t847, t646, t597, t628, -t644, t629, t664, t802, t801, t798, t808; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t722, -t719, t852, t742, t737, -t742, 0, -t715, t659, 0, t647, t599, t630, t645, t631, t665, t572, t575, t536, -pkin(6) * t545; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t824, t721, t738, t720, t717, -t824, t715, 0, t660, 0, -t699, -t697, -t655, t699, t651, -t712, t559, t560, -pkin(3) * t598, -pkin(3) * t545; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t725, t724, t750, -t725, -t749, qJDD(3), -t659, -t660, 0, 0, t646, t597, t628, -t644, t629, t664, t816, t817, t809, t826; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t680, t652, t854, t708, t703, -t708, 0, t622, t578, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t709, t654, t704, t679, t668, -t709, -t622, 0, t579, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t699, t697, t655, -t699, -t651, t712, -t578, -t579, 0, 0;];
m_new_reg = t1;
