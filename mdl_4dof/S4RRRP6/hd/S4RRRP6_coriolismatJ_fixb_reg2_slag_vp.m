% Calculate inertial parameters regressor of coriolis matrix for
% S4RRRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d3]';
% 
% Output:
% cmat_reg [(4*4)x(4*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:19
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S4RRRP6_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRRP6_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRRP6_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [4x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4RRRP6_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:19:13
% EndTime: 2019-12-31 17:19:17
% DurationCPUTime: 2.24s
% Computational Cost: add. (1665->259), mult. (3924->368), div. (0->0), fcn. (3179->4), ass. (0->227)
t175 = cos(qJ(2));
t174 = cos(qJ(3));
t173 = sin(qJ(2));
t191 = -t175 * pkin(2) - t173 * pkin(6);
t184 = -pkin(1) + t191;
t115 = t174 * t184;
t259 = t174 * qJ(4);
t190 = -t173 * t259 + t115;
t172 = sin(qJ(3));
t291 = pkin(5) * t172;
t49 = (-pkin(3) - t291) * t175 + t190;
t261 = t172 * t175;
t227 = pkin(5) * t261;
t55 = -t190 + t227;
t299 = t49 + t55;
t168 = t172 ^ 2;
t170 = t174 ^ 2;
t198 = t168 / 0.2e1 - t170 / 0.2e1;
t151 = t170 - t168;
t236 = t173 * qJD(1);
t206 = t174 * t236;
t298 = t151 * qJD(2) - 0.2e1 * t172 * t206;
t256 = t175 * qJ(4);
t288 = t173 * pkin(3);
t285 = t175 * pkin(6);
t289 = t173 * pkin(2);
t136 = -t285 + t289;
t127 = t174 * t136;
t262 = t172 * t173;
t159 = pkin(5) * t262;
t87 = t159 + t127;
t52 = -t174 * t256 + t288 + t87;
t297 = t52 / 0.2e1;
t290 = t172 * pkin(3);
t215 = pkin(5) + t290;
t128 = t215 * t173;
t296 = -t128 / 0.2e1;
t284 = pkin(6) + qJ(4);
t132 = t284 * t174;
t295 = -t132 / 0.2e1;
t292 = t173 / 0.2e1;
t287 = t174 * pkin(3);
t286 = t175 * pkin(5);
t218 = t55 / 0.2e1 + t49 / 0.2e1;
t219 = -t175 * pkin(3) / 0.2e1;
t3 = (t219 + t218) * t174;
t283 = t3 * qJD(1);
t282 = t49 * t174;
t129 = t215 * t175;
t257 = t174 * t175;
t225 = pkin(5) * t257;
t82 = t172 * t184 + t225;
t56 = -qJ(4) * t262 + t82;
t126 = t172 * t136;
t260 = t173 * t174;
t226 = pkin(5) * t260;
t88 = t126 - t226;
t58 = -t172 * t256 + t88;
t5 = t128 * t129 + t49 * t52 + t56 * t58;
t281 = t5 * qJD(1);
t280 = t56 * t175;
t6 = (t173 * t52 + t175 * t49) * t174 + (t173 * t58 + t280) * t172;
t279 = t6 * qJD(1);
t7 = t299 * t262;
t278 = t7 * qJD(1);
t217 = t128 * t260;
t8 = pkin(3) * t217 - t299 * t56;
t277 = t8 * qJD(1);
t81 = -t115 + t227;
t276 = t81 * t175;
t275 = t82 * t175;
t11 = -t128 * t261 - t129 * t262 - t49 * t173 + t52 * t175;
t274 = t11 * qJD(1);
t12 = (t173 * t87 - t276) * t174 + (t173 * t88 + t275) * t172;
t273 = t12 * qJD(1);
t272 = t128 * t174;
t271 = t129 * t174;
t13 = (t58 + t272) * t175 + (-t56 + t271) * t173;
t270 = t13 * qJD(1);
t131 = t284 * t172;
t269 = t131 * t173;
t268 = t131 * t175;
t267 = t132 * t173;
t266 = t132 * t175;
t14 = t175 * pkin(5) ^ 2 * t173 - t81 * t87 + t82 * t88;
t265 = t14 * qJD(1);
t165 = -pkin(2) - t287;
t264 = t165 * t172;
t263 = t165 * t174;
t169 = t173 ^ 2;
t258 = t174 * t169;
t20 = (t56 * t172 + t282) * t173;
t255 = t20 * qJD(1);
t216 = t172 * t258;
t21 = -pkin(3) * t216 - t217 - t280;
t254 = t21 * qJD(1);
t22 = t81 * t173 + (t87 - 0.2e1 * t159) * t175;
t253 = t22 * qJD(1);
t23 = t88 * t175 + (-t82 + 0.2e1 * t225) * t173;
t252 = t23 * qJD(1);
t24 = t170 * t169 * pkin(3) - t128 * t262 - t55 * t175;
t251 = t24 * qJD(1);
t50 = -t169 * t291 - t276;
t250 = t50 * qJD(1);
t51 = -pkin(5) * t258 - t275;
t249 = t51 * qJD(1);
t248 = t56 * qJD(3);
t150 = t170 + t168;
t171 = t175 ^ 2;
t152 = t171 - t169;
t247 = qJD(3) * t172;
t167 = qJD(3) * t174;
t246 = qJD(3) * t175;
t109 = t198 * t173;
t245 = t109 * qJD(3);
t122 = t150 * t169;
t244 = t122 * qJD(1);
t124 = t152 * t172;
t243 = t124 * qJD(1);
t125 = t174 * t171 - t258;
t242 = t125 * qJD(1);
t241 = t132 * qJD(3);
t240 = t150 * qJD(2);
t239 = t152 * qJD(1);
t238 = t172 * qJD(2);
t237 = t172 * qJD(4);
t235 = t173 * qJD(2);
t234 = t174 * qJD(2);
t233 = t174 * qJD(4);
t232 = t175 * qJD(1);
t231 = t175 * qJD(2);
t230 = t175 * qJD(4);
t113 = t127 / 0.2e1;
t229 = t113 + t159 / 0.2e1;
t228 = t172 * t287;
t224 = pkin(1) * t236;
t223 = pkin(1) * t232;
t222 = pkin(3) * t247;
t221 = pkin(3) * t167;
t220 = t290 / 0.2e1;
t214 = t172 * t246;
t213 = t174 * t246;
t155 = t172 * t167;
t212 = t172 * t234;
t211 = t172 * t232;
t210 = t172 * t230;
t209 = t173 * t231;
t208 = t173 * t232;
t207 = t173 * t234;
t205 = t173 * t233;
t204 = t174 * t230;
t203 = t172 * t296;
t202 = -t263 / 0.2e1;
t201 = t260 / 0.2e1;
t200 = -t257 / 0.2e1;
t199 = t256 / 0.2e1;
t197 = -qJD(3) + t232;
t196 = t169 * t155;
t194 = t172 * t207;
t193 = -t173 * t228 + t268 / 0.2e1;
t192 = -t267 / 0.2e1 - t49 / 0.2e1;
t189 = -t87 * t172 + t88 * t174;
t176 = t173 * t202 + t203;
t1 = t218 * t132 + (t297 + t176) * pkin(3);
t30 = pkin(3) * t264;
t188 = -t1 * qJD(1) + t30 * qJD(2);
t179 = (t56 / 0.2e1 + t269 / 0.2e1) * t174;
t10 = -t286 / 0.2e1 + t179 + (t219 + t192) * t172;
t66 = t131 * t172 + t132 * t174;
t187 = t10 * qJD(1) + t66 * qJD(2);
t101 = t228 - t264;
t15 = t203 + (-t259 / 0.2e1 + t295) * t175 + (t202 + (0.1e1 - t198) * pkin(3)) * t173 + t229;
t186 = -t15 * qJD(1) - t101 * qJD(2);
t110 = t168 * pkin(3) + t263;
t112 = -t126 / 0.2e1;
t18 = t112 + (pkin(5) * t292 + t296) * t174 + (t165 * t292 + t199) * t172 + t193;
t185 = -t18 * qJD(1) + t110 * qJD(2);
t183 = t197 * t173;
t182 = t285 / 0.2e1 - t289 / 0.2e1;
t177 = t182 * t174;
t54 = -t127 / 0.2e1 + t177;
t181 = pkin(2) * t238 - t54 * qJD(1);
t178 = t182 * t172;
t53 = t126 / 0.2e1 - t178;
t180 = pkin(2) * t234 - t53 * qJD(1);
t92 = t174 * t183;
t75 = -t109 * qJD(1) + t212;
t120 = t206 + t238;
t118 = t172 * t236 - t234;
t61 = qJD(1) * t216 + t109 * qJD(2);
t123 = t151 * t169;
t71 = t123 * qJD(1) + 0.2e1 * t194;
t163 = -t236 / 0.2e1;
t162 = t236 / 0.2e1;
t161 = t235 / 0.2e1;
t156 = t174 * t232;
t135 = t151 * qJD(3);
t121 = -t156 + t167;
t119 = t197 * t172;
t114 = (t232 - qJD(3) / 0.2e1) * t173;
t106 = t120 * pkin(3);
t91 = t120 * t175;
t90 = t118 * t175;
t89 = t172 * t183;
t84 = t170 * t209 - t196;
t83 = t168 * t209 + t196;
t80 = t172 * t235 - t242;
t79 = -t213 + t242;
t78 = t214 - t243;
t77 = t207 + t243;
t73 = -t125 * qJD(2) + t173 * t214;
t72 = t124 * qJD(2) + t173 * t213;
t67 = 0.2e1 * t172 * t92;
t60 = -t170 * t208 - t245;
t59 = -t168 * t208 + t245;
t57 = -t123 * qJD(3) - 0.2e1 * t175 * t194;
t42 = t159 + t113 + t177;
t41 = t112 - t178 + t226;
t40 = -t245 + (t170 * t236 + t212) * t175;
t39 = t245 + (t168 * t236 - t212) * t175;
t36 = -0.2e1 * t173 * t155 + t298 * t175;
t19 = -t165 * t262 / 0.2e1 + t272 / 0.2e1 + pkin(5) * t201 + t112 + t172 * t199 - t193;
t16 = t266 / 0.2e1 + qJ(4) * t200 - t176 + t229 + (0.1e1 + t198) * t288;
t9 = t286 / 0.2e1 + t175 * t220 + t179 + t192 * t172;
t4 = -t55 * t174 / 0.2e1 - t282 / 0.2e1 + pkin(3) * t200;
t2 = t128 * t220 + t299 * t295 + (t165 * t201 + t297) * pkin(3);
t17 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t209, t152 * qJD(2), 0, -t209, 0, 0, -pkin(1) * t235, -pkin(1) * t231, 0, 0, t84, t57, t73, t83, t72, -t209, -t22 * qJD(2) - t51 * qJD(3), t23 * qJD(2) + t50 * qJD(3), -t12 * qJD(2), t14 * qJD(2), t84, t57, t73, t83, t72, -t209, -t11 * qJD(2) - t21 * qJD(3) + t173 * t204, t13 * qJD(2) + t24 * qJD(3) - t173 * t210, -t6 * qJD(2) + t7 * qJD(3) + t122 * qJD(4), t5 * qJD(2) + t8 * qJD(3) - t20 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t208, t239, t231, -t208, -t235, 0, -pkin(5) * t231 - t224, pkin(5) * t235 - t223, 0, 0, t40, t36, t80, t39, t77, -t114, -t253 + (t191 * t172 - t225) * qJD(2) + t42 * qJD(3), t252 + (t191 * t174 + t227) * qJD(2) + t41 * qJD(3), qJD(2) * t189 - t273, t265 + (-pkin(2) * t286 + pkin(6) * t189) * qJD(2), t40, t36, t80, t39, t77, -t114, -t274 + (t165 * t261 - t269 - t271) * qJD(2) + t16 * qJD(3) + t210, t270 + (t129 * t172 + t165 * t257 - t267) * qJD(2) + t19 * qJD(3) + t204, -t279 + ((t58 + t268) * t174 + (-t52 - t266) * t172) * qJD(2) + t4 * qJD(3), t281 + (t129 * t165 - t52 * t131 + t58 * t132) * qJD(2) + t2 * qJD(3) + t9 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t61, -t71, t89, t61, t92, t161, t42 * qJD(2) - t82 * qJD(3) - t249, t41 * qJD(2) + t81 * qJD(3) + t250, 0, 0, -t61, -t71, t89, t61, t92, t161, t16 * qJD(2) - t248 - t254, t19 * qJD(2) + t55 * qJD(3) + t251, t4 * qJD(2) + t173 * t222 + t278, -pkin(3) * t248 + t2 * qJD(2) + t277; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91, -t90, t244, t9 * qJD(2) - t255; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t208, -t239, 0, t208, 0, 0, t224, t223, 0, 0, t60, t67, t79, t59, t78, t114, t54 * qJD(3) + t253, t53 * qJD(3) - t252, t273, -t265, t60, t67, t79, t59, t78, t114, -t15 * qJD(3) + t274, -t18 * qJD(3) - t270, -t3 * qJD(3) + t279, -t1 * qJD(3) + t10 * qJD(4) - t281; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t155, t135, 0, -t155, 0, 0, -pkin(2) * t247, -pkin(2) * t167, 0, 0, t155, t135, 0, -t155, 0, 0, -t101 * qJD(3), t110 * qJD(3), t150 * qJD(4), t30 * qJD(3) + t66 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, t298, t121, -t75, t119, t163, -pkin(6) * t167 - t181, pkin(6) * t247 - t180, 0, 0, t75, t298, t121, -t75, t119, t163, t186 - t241, t131 * qJD(3) + t185, -t221 - t283, -pkin(3) * t241 + t188; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t240, t187; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61, t71, -t90, -t61, -t91, t161, -t54 * qJD(2) + t249, -t53 * qJD(2) - t250, 0, 0, t61, t71, -t90, -t61, -t91, t161, t15 * qJD(2) - t205 + t254, t18 * qJD(2) + t173 * t237 - t251, t3 * qJD(2) - t278, -pkin(3) * t205 + t1 * qJD(2) - t277; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t75, -t298, t156, t75, -t211, t162, t181, t180, 0, 0, -t75, -t298, t156, t75, -t211, t162, -t186 - t237, -t185 - t233, t283, -pkin(3) * t237 - t188; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t120, t118, 0, -t106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t92, t89, -t244, -t10 * qJD(2) + t173 * t221 + t255; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t247, t167, -t240, -t187 + t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t120, -t118, 0, t106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t17;
