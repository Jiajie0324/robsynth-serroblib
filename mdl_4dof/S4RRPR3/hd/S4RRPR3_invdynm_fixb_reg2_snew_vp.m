% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RRPR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4,theta3]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:01
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RRPR3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRPR3_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRPR3_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRPR3_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRPR3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RRPR3_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:01:39
% EndTime: 2019-12-31 17:01:43
% DurationCPUTime: 3.89s
% Computational Cost: add. (12380->296), mult. (18042->400), div. (0->0), fcn. (10718->8), ass. (0->203)
t555 = qJD(1) + qJD(2);
t553 = t555 ^ 2;
t554 = qJDD(1) + qJDD(2);
t559 = sin(pkin(7));
t560 = cos(pkin(7));
t519 = t560 * t553 + t559 * t554;
t522 = t559 * t553 - t560 * t554;
t562 = sin(qJ(2));
t565 = cos(qJ(2));
t466 = t565 * t519 - t562 * t522;
t558 = g(3) - qJDD(3);
t499 = qJ(3) * t519 - t560 * t558;
t613 = qJ(3) * t522 - t559 * t558;
t419 = pkin(5) * t466 + t565 * t499 - t562 * t613;
t563 = sin(qJ(1));
t566 = cos(qJ(1));
t470 = t562 * t519 + t565 * t522;
t612 = t566 * t466 - t563 * t470;
t623 = pkin(5) * t470 + t562 * t499 + t565 * t613;
t635 = pkin(4) * t612 + t566 * t419 - t563 * t623;
t625 = t563 * t466 + t566 * t470;
t634 = pkin(4) * t625 + t563 * t419 + t566 * t623;
t543 = t563 * g(1) - t566 * g(2);
t532 = qJDD(1) * pkin(1) + t543;
t544 = t566 * g(1) + t563 * g(2);
t568 = qJD(1) ^ 2;
t533 = -t568 * pkin(1) - t544;
t479 = t562 * t532 + t565 * t533;
t474 = -t553 * pkin(2) + t479;
t478 = -t565 * t532 + t562 * t533;
t570 = t554 * pkin(2) - t478;
t434 = t559 * t474 - t560 * t570;
t435 = t560 * t474 + t559 * t570;
t584 = t559 * t434 + t560 * t435;
t394 = t560 * t434 - t559 * t435;
t593 = t565 * t394;
t375 = -t562 * t584 + t593;
t596 = t562 * t394;
t617 = t565 * t584 + t596;
t632 = t563 * t375 + t566 * t617;
t631 = t566 * t375 - t563 * t617;
t525 = t565 * t553 + t562 * t554;
t503 = pkin(5) * t525 - t565 * g(3);
t528 = t562 * t553 - t565 * t554;
t572 = t566 * t525 - t563 * t528;
t614 = pkin(5) * t528 - t562 * g(3);
t626 = pkin(4) * t572 + t566 * t503 - t563 * t614;
t611 = t563 * t525 + t566 * t528;
t624 = pkin(4) * t611 + t563 * t503 + t566 * t614;
t583 = t562 * t478 + t565 * t479;
t440 = t565 * t478 - t562 * t479;
t592 = t566 * t440;
t619 = -t563 * t583 + t592;
t595 = t563 * t440;
t618 = t566 * t583 + t595;
t428 = -t553 * pkin(3) + t554 * pkin(6) + t435;
t561 = sin(qJ(4));
t564 = cos(qJ(4));
t410 = t561 * t428 + t564 * t558;
t411 = t564 * t428 - t561 * t558;
t389 = t561 * t410 + t564 * t411;
t556 = t561 ^ 2;
t602 = t556 * t553;
t427 = -t554 * pkin(3) - t553 * pkin(6) + t434;
t420 = t561 * t427;
t542 = t564 * t553 * t561;
t534 = qJDD(4) + t542;
t599 = t561 * t534;
t535 = qJDD(4) - t542;
t598 = t561 * t535;
t597 = t561 * t554;
t421 = t564 * t427;
t594 = t564 * t535;
t547 = t564 * t554;
t591 = -pkin(3) * t427 + pkin(6) * t389;
t557 = t564 ^ 2;
t590 = t556 + t557;
t589 = qJD(4) * t555;
t567 = qJD(4) ^ 2;
t539 = -t567 - t602;
t491 = -t561 * t539 - t594;
t546 = t564 * t589;
t513 = 0.2e1 * t546 + t597;
t588 = -pkin(3) * t513 + pkin(6) * t491 + t420;
t548 = t557 * t553;
t541 = -t548 - t567;
t489 = t564 * t541 - t599;
t585 = t561 * t589;
t516 = t547 - 0.2e1 * t585;
t587 = pkin(3) * t516 + pkin(6) * t489 - t421;
t380 = t559 * t389 - t560 * t427;
t586 = pkin(2) * t380 + t591;
t581 = -t563 * t543 - t566 * t544;
t580 = t559 * t542;
t579 = t560 * t542;
t523 = t590 * t554;
t529 = t548 + t602;
t578 = pkin(3) * t529 + pkin(6) * t523 + t389;
t449 = t559 * t491 - t560 * t513;
t577 = pkin(2) * t449 + t588;
t448 = t559 * t489 + t560 * t516;
t576 = pkin(2) * t448 + t587;
t537 = t566 * qJDD(1) - t563 * t568;
t575 = -pkin(4) * t537 - t563 * g(3);
t574 = -pkin(2) * t522 - t434;
t472 = t559 * t523 + t560 * t529;
t573 = pkin(2) * t472 + t578;
t388 = t564 * t410 - t561 * t411;
t571 = t566 * t543 - t563 * t544;
t569 = -pkin(2) * t519 - t435;
t540 = t548 - t567;
t538 = t567 - t602;
t536 = t563 * qJDD(1) + t566 * t568;
t530 = -t548 + t602;
t524 = t564 * t534;
t515 = t547 - t585;
t514 = t546 + t597;
t511 = -pkin(4) * t536 + t566 * g(3);
t508 = t590 * t589;
t495 = t559 * qJDD(4) + t560 * t508;
t494 = -t560 * qJDD(4) + t559 * t508;
t493 = t564 * t514 - t556 * t589;
t492 = -t561 * t515 - t557 * t589;
t490 = -t561 * t538 + t524;
t488 = t564 * t540 - t598;
t487 = t564 * t539 - t598;
t486 = t564 * t538 + t599;
t485 = t561 * t541 + t524;
t484 = t561 * t540 + t594;
t481 = (t514 + t546) * t561;
t480 = (t515 - t585) * t564;
t473 = t560 * t523 - t559 * t529;
t464 = -t561 * t513 + t564 * t516;
t463 = t564 * t513 + t561 * t516;
t461 = t560 * t490 + t559 * t597;
t460 = t560 * t488 + t559 * t547;
t459 = t559 * t490 - t560 * t597;
t458 = t559 * t488 - t560 * t547;
t457 = t560 * t493 - t580;
t456 = t560 * t492 + t580;
t455 = t559 * t493 + t579;
t454 = t559 * t492 - t579;
t453 = -pkin(1) * t528 - t478;
t452 = -pkin(1) * t525 - t479;
t451 = t560 * t491 + t559 * t513;
t450 = t560 * t489 - t559 * t516;
t445 = -t562 * t494 + t565 * t495;
t444 = t565 * t494 + t562 * t495;
t443 = t560 * t464 + t559 * t530;
t442 = t559 * t464 - t560 * t530;
t437 = pkin(1) * t440;
t436 = pkin(1) * g(3) + pkin(5) * t583;
t433 = -t562 * t472 + t565 * t473;
t432 = t565 * t472 + t562 * t473;
t426 = -t562 * t459 + t565 * t461;
t425 = -t562 * t458 + t565 * t460;
t424 = t565 * t459 + t562 * t461;
t423 = t565 * t458 + t562 * t460;
t415 = -t562 * t455 + t565 * t457;
t414 = -t562 * t454 + t565 * t456;
t413 = t565 * t455 + t562 * t457;
t412 = t565 * t454 + t562 * t456;
t407 = -t562 * t449 + t565 * t451;
t406 = -t562 * t448 + t565 * t450;
t405 = t565 * t449 + t562 * t451;
t404 = t565 * t448 + t562 * t450;
t403 = -pkin(6) * t487 + t421;
t402 = -pkin(6) * t485 + t420;
t401 = -t562 * t442 + t565 * t443;
t400 = t565 * t442 + t562 * t443;
t399 = -pkin(3) * t487 + t411;
t398 = -pkin(3) * t485 + t410;
t397 = -pkin(1) * t470 + t574;
t396 = -pkin(1) * t466 + t569;
t391 = pkin(2) * t394;
t390 = pkin(2) * t558 + qJ(3) * t584;
t385 = -qJ(3) * t472 + t560 * t388;
t384 = qJ(3) * t473 + t559 * t388;
t383 = pkin(1) * t405 + t577;
t382 = pkin(1) * t404 + t576;
t381 = t560 * t389 + t559 * t427;
t378 = -qJ(3) * t449 - t559 * t399 + t560 * t403;
t377 = -qJ(3) * t448 - t559 * t398 + t560 * t402;
t372 = -pkin(2) * t487 + qJ(3) * t451 + t560 * t399 + t559 * t403;
t371 = -pkin(2) * t485 + qJ(3) * t450 + t560 * t398 + t559 * t402;
t370 = pkin(1) * t432 + t573;
t369 = -pkin(1) * t375 - t391;
t368 = -pkin(5) * t432 - t562 * t384 + t565 * t385;
t367 = pkin(5) * t433 + t565 * t384 + t562 * t385;
t366 = -t562 * t380 + t565 * t381;
t365 = t565 * t380 + t562 * t381;
t364 = pkin(5) * t375 + qJ(3) * t593 - t562 * t390;
t363 = pkin(1) * t558 + pkin(5) * t617 + qJ(3) * t596 + t565 * t390;
t362 = -qJ(3) * t380 - (pkin(3) * t559 - pkin(6) * t560) * t388;
t361 = -pkin(5) * t405 - t562 * t372 + t565 * t378;
t360 = -pkin(5) * t404 - t562 * t371 + t565 * t377;
t359 = -pkin(1) * t487 + pkin(5) * t407 + t565 * t372 + t562 * t378;
t358 = -pkin(1) * t485 + pkin(5) * t406 + t565 * t371 + t562 * t377;
t357 = qJ(3) * t381 - (-pkin(3) * t560 - pkin(6) * t559 - pkin(2)) * t388;
t356 = pkin(1) * t365 + t586;
t355 = -pkin(5) * t365 - t562 * t357 + t565 * t362;
t354 = pkin(1) * t388 + pkin(5) * t366 + t565 * t357 + t562 * t362;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t537, 0, -t536, 0, t575, -t511, -t571, -pkin(4) * t571, 0, 0, -t611, 0, -t572, 0, t624, t626, t619, pkin(4) * t619 + pkin(5) * t592 - t563 * t436, 0, 0, -t625, 0, -t612, 0, t634, t635, t631, pkin(4) * t631 - t563 * t363 + t566 * t364, -t563 * t413 + t566 * t415, -t563 * t400 + t566 * t401, -t563 * t424 + t566 * t426, -t563 * t412 + t566 * t414, -t563 * t423 + t566 * t425, -t563 * t444 + t566 * t445, t566 * t360 - t563 * t358 - pkin(4) * (t566 * t404 + t563 * t406), t566 * t361 - t563 * t359 - pkin(4) * (t566 * t405 + t563 * t407), t566 * t368 - t563 * t367 - pkin(4) * (t566 * t432 + t563 * t433), t566 * t355 - t563 * t354 - pkin(4) * (t566 * t365 + t563 * t366); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t536, 0, t537, 0, t511, t575, t581, pkin(4) * t581, 0, 0, t572, 0, -t611, 0, -t626, t624, t618, pkin(4) * t618 + pkin(5) * t595 + t566 * t436, 0, 0, t612, 0, -t625, 0, -t635, t634, t632, pkin(4) * t632 + t566 * t363 + t563 * t364, t566 * t413 + t563 * t415, t566 * t400 + t563 * t401, t566 * t424 + t563 * t426, t566 * t412 + t563 * t414, t566 * t423 + t563 * t425, t566 * t444 + t563 * t445, t563 * t360 + t566 * t358 + pkin(4) * (-t563 * t404 + t566 * t406), t563 * t361 + t566 * t359 + pkin(4) * (-t563 * t405 + t566 * t407), t563 * t368 + t566 * t367 + pkin(4) * (-t563 * t432 + t566 * t433), t563 * t355 + t566 * t354 + pkin(4) * (-t563 * t365 + t566 * t366); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t543, t544, 0, 0, 0, 0, 0, 0, 0, t554, t453, t452, 0, -t437, 0, 0, 0, 0, 0, t554, t397, t396, 0, t369, t481, t463, t486, t480, t484, 0, t382, t383, t370, t356; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t568, 0, 0, -g(3), -t543, 0, 0, 0, -t528, 0, -t525, 0, t614, t503, t440, pkin(5) * t440, 0, 0, -t470, 0, -t466, 0, t623, t419, t375, t364, t415, t401, t426, t414, t425, t445, t360, t361, t368, t355; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t568, 0, qJDD(1), 0, g(3), 0, -t544, 0, 0, 0, t525, 0, -t528, 0, -t503, t614, t583, t436, 0, 0, t466, 0, -t470, 0, -t419, t623, t617, t363, t413, t400, t424, t412, t423, t444, t358, t359, t367, t354; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t543, t544, 0, 0, 0, 0, 0, 0, 0, t554, t453, t452, 0, -t437, 0, 0, 0, 0, 0, t554, t397, t396, 0, t369, t481, t463, t486, t480, t484, 0, t382, t383, t370, t356; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t554, 0, -t553, 0, 0, -g(3), t478, 0, 0, 0, -t522, 0, -t519, 0, t613, t499, t394, qJ(3) * t394, t457, t443, t461, t456, t460, t495, t377, t378, t385, t362; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t553, 0, t554, 0, g(3), 0, t479, 0, 0, 0, t519, 0, -t522, 0, -t499, t613, t584, t390, t455, t442, t459, t454, t458, t494, t371, t372, t384, t357; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t554, -t478, -t479, 0, 0, 0, 0, 0, 0, 0, t554, t574, t569, 0, -t391, t481, t463, t486, t480, t484, 0, t576, t577, t573, t586; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t554, 0, -t553, 0, 0, -t558, t434, 0, t493, t464, t490, t492, t488, t508, t402, t403, t388, pkin(6) * t388; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t553, 0, t554, 0, t558, 0, t435, 0, t542, -t530, -t597, -t542, -t547, -qJDD(4), t398, t399, 0, pkin(3) * t388; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t554, -t434, -t435, 0, 0, t481, t463, t486, t480, t484, 0, t587, t588, t578, t591; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t514, t516, t534, -t546, t540, t546, 0, t427, t410, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t585, t513, t538, t515, t535, -t585, -t427, 0, t411, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t542, t530, t597, t542, t547, qJDD(4), -t410, -t411, 0, 0;];
m_new_reg = t1;
