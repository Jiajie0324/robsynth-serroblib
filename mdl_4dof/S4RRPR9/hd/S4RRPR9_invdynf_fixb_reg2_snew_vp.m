% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S4RRPR9
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4,theta3]';
%
% Output:
% f_new_reg [(3*5)x(5*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:10
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S4RRPR9_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRPR9_invdynf_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRPR9_invdynf_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRPR9_invdynf_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRPR9_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RRPR9_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:10:21
% EndTime: 2019-12-31 17:10:23
% DurationCPUTime: 1.45s
% Computational Cost: add. (5727->179), mult. (12655->239), div. (0->0), fcn. (8482->8), ass. (0->139)
t1033 = cos(qJ(2));
t1045 = t1033 * qJD(1);
t1040 = qJD(2) * t1045;
t1030 = sin(qJ(2));
t1042 = t1030 * qJDD(1);
t1001 = t1040 + t1042;
t1027 = sin(pkin(7));
t1028 = cos(pkin(7));
t984 = t1027 * qJDD(2) + t1028 * t1001;
t1047 = qJD(1) * t1030;
t996 = -t1028 * qJD(2) + t1027 * t1047;
t988 = t996 * t1045;
t969 = -t984 + t988;
t1015 = -qJD(4) + t1045;
t1058 = qJD(4) - t1015;
t1018 = qJD(2) * t1047;
t1021 = t1033 * qJDD(1);
t1002 = t1021 - t1018;
t998 = t1027 * qJD(2) + t1028 * t1047;
t1048 = t998 * t996;
t971 = -t1002 - t1048;
t1029 = sin(qJ(4));
t1032 = cos(qJ(4));
t972 = t1029 * t998 + t1032 * t996;
t1057 = t972 ^ 2;
t974 = -t1029 * t996 + t1032 * t998;
t1056 = t974 ^ 2;
t1055 = t996 ^ 2;
t1054 = t998 ^ 2;
t1053 = qJD(2) ^ 2;
t1052 = t1015 ^ 2;
t1051 = -2 * qJD(3);
t1050 = t1033 * g(3);
t1049 = t974 * t972;
t1025 = t1033 ^ 2;
t1035 = qJD(1) ^ 2;
t1046 = t1025 * t1035;
t1044 = qJD(4) + t1015;
t1024 = t1030 ^ 2;
t1043 = t1024 + t1025;
t1031 = sin(qJ(1));
t1034 = cos(qJ(1));
t1010 = t1031 * g(1) - t1034 * g(2);
t993 = qJDD(1) * pkin(1) + t1035 * pkin(5) + t1010;
t957 = (-t1001 - t1040) * qJ(3) + (-t1002 + t1018) * pkin(2) - t993;
t1011 = -t1034 * g(1) - t1031 * g(2);
t994 = -t1035 * pkin(1) + qJDD(1) * pkin(5) + t1011;
t982 = -t1030 * g(3) + t1033 * t994;
t999 = (-pkin(2) * t1033 - qJ(3) * t1030) * qJD(1);
t963 = -t1053 * pkin(2) + qJDD(2) * qJ(3) + t999 * t1045 + t982;
t941 = t1027 * t957 + t1028 * t963 + t996 * t1051;
t1041 = t998 * t1045;
t1039 = -qJDD(4) + t1002;
t1037 = -t1028 * qJDD(2) + t1027 * t1001;
t1038 = -t1029 * t984 - t1032 * t1037;
t940 = -t1027 * t963 + t1028 * t957 + t998 * t1051;
t1036 = t1029 * t1037 - t1032 * t984;
t962 = t1050 + qJDD(3) - t1053 * qJ(3) - qJDD(2) * pkin(2) + (qJD(1) * t999 + t994) * t1030;
t1014 = t1033 * t1035 * t1030;
t1013 = -t1046 - t1053;
t1012 = -t1024 * t1035 - t1053;
t1009 = -qJDD(2) + t1014;
t1008 = qJDD(2) + t1014;
t1007 = t1043 * t1035;
t1006 = -t1031 * qJDD(1) - t1034 * t1035;
t1005 = t1034 * qJDD(1) - t1031 * t1035;
t1004 = t1043 * qJDD(1);
t1003 = t1021 - 0.2e1 * t1018;
t1000 = 0.2e1 * t1040 + t1042;
t986 = -t1046 - t1054;
t985 = -pkin(3) * t1045 - t998 * pkin(6);
t981 = -t1030 * t994 - t1050;
t980 = t1033 * t1009 - t1030 * t1012;
t979 = -t1030 * t1008 + t1033 * t1013;
t978 = t1030 * t1009 + t1033 * t1012;
t977 = t1033 * t1008 + t1030 * t1013;
t975 = -t1046 - t1055;
t970 = t1002 - t1048;
t968 = t984 + t988;
t967 = -t1037 - t1041;
t966 = t1037 - t1041;
t964 = -t1054 - t1055;
t961 = -t1052 - t1056;
t959 = -t1030 * t981 + t1033 * t982;
t958 = t1030 * t982 + t1033 * t981;
t954 = -t1027 * t986 + t1028 * t970;
t953 = t1027 * t970 + t1028 * t986;
t952 = -t1052 - t1057;
t951 = -t1027 * t971 + t1028 * t975;
t950 = t1027 * t975 + t1028 * t971;
t949 = -t1039 - t1049;
t948 = t1039 - t1049;
t947 = -t1027 * t969 + t1028 * t967;
t946 = t1027 * t967 + t1028 * t969;
t945 = -t1056 - t1057;
t944 = t1030 * t968 + t1033 * t954;
t943 = t1030 * t954 - t1033 * t968;
t942 = t1037 * pkin(3) - t1055 * pkin(6) + t998 * t985 + t962;
t939 = t1030 * t966 + t1033 * t951;
t938 = t1030 * t951 - t1033 * t966;
t937 = t1044 * t972 + t1036;
t936 = -t1058 * t972 - t1036;
t935 = -t1044 * t974 + t1038;
t934 = t1058 * t974 - t1038;
t933 = t1030 * t964 + t1033 * t947;
t932 = t1030 * t947 - t1033 * t964;
t931 = -t1029 * t961 + t1032 * t948;
t930 = t1029 * t948 + t1032 * t961;
t929 = -t1029 * t949 + t1032 * t952;
t928 = t1029 * t952 + t1032 * t949;
t927 = -t1055 * pkin(3) - t1037 * pkin(6) + t985 * t1045 + t941;
t926 = t971 * pkin(3) + t969 * pkin(6) + t940;
t925 = -t1027 * t940 + t1028 * t941;
t924 = t1027 * t941 + t1028 * t940;
t923 = -t1029 * t937 + t1032 * t935;
t922 = t1029 * t935 + t1032 * t937;
t921 = -t1027 * t930 + t1028 * t931;
t920 = t1027 * t931 + t1028 * t930;
t919 = t1030 * t962 + t1033 * t925;
t918 = t1030 * t925 - t1033 * t962;
t917 = -t1027 * t928 + t1028 * t929;
t916 = t1027 * t929 + t1028 * t928;
t915 = t1029 * t926 + t1032 * t927;
t914 = -t1029 * t927 + t1032 * t926;
t913 = t1030 * t936 + t1033 * t921;
t912 = t1030 * t921 - t1033 * t936;
t911 = t1030 * t934 + t1033 * t917;
t910 = t1030 * t917 - t1033 * t934;
t909 = -t1027 * t922 + t1028 * t923;
t908 = t1027 * t923 + t1028 * t922;
t907 = t1030 * t945 + t1033 * t909;
t906 = t1030 * t909 - t1033 * t945;
t905 = -t1029 * t914 + t1032 * t915;
t904 = t1029 * t915 + t1032 * t914;
t903 = -t1027 * t904 + t1028 * t905;
t902 = t1027 * t905 + t1028 * t904;
t901 = t1030 * t942 + t1033 * t903;
t900 = t1030 * t903 - t1033 * t942;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1006, -t1005, 0, -t1031 * t1010 + t1034 * t1011, 0, 0, 0, 0, 0, 0, -t1031 * t1003 + t1034 * t979, t1031 * t1000 + t1034 * t980, t1034 * t1004 - t1031 * t1007, -t1031 * t993 + t1034 * t959, 0, 0, 0, 0, 0, 0, t1031 * t950 + t1034 * t939, t1031 * t953 + t1034 * t944, t1031 * t946 + t1034 * t933, t1031 * t924 + t1034 * t919, 0, 0, 0, 0, 0, 0, t1031 * t916 + t1034 * t911, t1031 * t920 + t1034 * t913, t1031 * t908 + t1034 * t907, t1031 * t902 + t1034 * t901; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1005, t1006, 0, t1034 * t1010 + t1031 * t1011, 0, 0, 0, 0, 0, 0, t1034 * t1003 + t1031 * t979, -t1034 * t1000 + t1031 * t980, t1031 * t1004 + t1034 * t1007, t1031 * t959 + t1034 * t993, 0, 0, 0, 0, 0, 0, t1031 * t939 - t1034 * t950, t1031 * t944 - t1034 * t953, t1031 * t933 - t1034 * t946, t1031 * t919 - t1034 * t924, 0, 0, 0, 0, 0, 0, t1031 * t911 - t1034 * t916, t1031 * t913 - t1034 * t920, t1031 * t907 - t1034 * t908, t1031 * t901 - t1034 * t902; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t977, t978, 0, t958, 0, 0, 0, 0, 0, 0, t938, t943, t932, t918, 0, 0, 0, 0, 0, 0, t910, t912, t906, t900; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1035, -qJDD(1), 0, t1011, 0, 0, 0, 0, 0, 0, t979, t980, t1004, t959, 0, 0, 0, 0, 0, 0, t939, t944, t933, t919, 0, 0, 0, 0, 0, 0, t911, t913, t907, t901; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1035, 0, t1010, 0, 0, 0, 0, 0, 0, t1003, -t1000, t1007, t993, 0, 0, 0, 0, 0, 0, -t950, -t953, -t946, -t924, 0, 0, 0, 0, 0, 0, -t916, -t920, -t908, -t902; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t977, t978, 0, t958, 0, 0, 0, 0, 0, 0, t938, t943, t932, t918, 0, 0, 0, 0, 0, 0, t910, t912, t906, t900; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1013, t1009, t1021, t982, 0, 0, 0, 0, 0, 0, t951, t954, t947, t925, 0, 0, 0, 0, 0, 0, t917, t921, t909, t903; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1008, t1012, -t1042, t981, 0, 0, 0, 0, 0, 0, -t966, -t968, -t964, -t962, 0, 0, 0, 0, 0, 0, -t934, -t936, -t945, -t942; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1003, t1000, -t1007, -t993, 0, 0, 0, 0, 0, 0, t950, t953, t946, t924, 0, 0, 0, 0, 0, 0, t916, t920, t908, t902; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t975, t970, t967, t941, 0, 0, 0, 0, 0, 0, t929, t931, t923, t905; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t971, t986, t969, t940, 0, 0, 0, 0, 0, 0, t928, t930, t922, t904; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t966, t968, t964, t962, 0, 0, 0, 0, 0, 0, t934, t936, t945, t942; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t952, t948, t935, t915; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t949, t961, t937, t914; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t934, t936, t945, t942;];
f_new_reg = t1;
