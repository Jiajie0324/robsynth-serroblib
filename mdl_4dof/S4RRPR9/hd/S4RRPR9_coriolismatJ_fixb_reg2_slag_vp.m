% Calculate inertial parameters regressor of coriolis matrix for
% S4RRPR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4,theta3]';
% 
% Output:
% cmat_reg [(4*4)x(4*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:10
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S4RRPR9_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRPR9_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRPR9_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [4x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RRPR9_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:10:07
% EndTime: 2019-12-31 17:10:11
% DurationCPUTime: 2.16s
% Computational Cost: add. (2939->242), mult. (6396->373), div. (0->0), fcn. (6399->6), ass. (0->194)
t156 = cos(pkin(7));
t259 = sin(qJ(4));
t197 = t259 * t156;
t155 = sin(pkin(7));
t260 = cos(qJ(4));
t200 = t260 * t155;
t126 = t200 + t197;
t157 = sin(qJ(2));
t108 = t126 * t157;
t198 = t259 * t155;
t199 = t260 * t156;
t123 = t198 - t199;
t111 = t123 * t157;
t264 = t126 / 0.2e1;
t266 = -t123 / 0.2e1;
t48 = -t108 * t264 - t111 * t266;
t272 = t48 * qJD(4);
t224 = qJD(2) * t126;
t271 = -qJD(1) * t48 + t123 * t224;
t226 = qJD(1) * t111;
t270 = qJD(2) * t48 + t108 * t226;
t255 = pkin(6) + qJ(3);
t136 = t255 * t156;
t190 = t255 * t155;
t92 = t260 * t136 - t259 * t190;
t269 = t92 / 0.2e1;
t153 = t157 ^ 2;
t158 = cos(qJ(2));
t142 = t158 ^ 2 - t153;
t268 = t111 ^ 2;
t267 = t126 ^ 2;
t265 = -t126 / 0.2e1;
t148 = -pkin(3) * t156 - pkin(2);
t263 = t148 / 0.2e1;
t262 = -t158 / 0.2e1;
t241 = t126 * t111;
t244 = t108 * t123;
t49 = -t241 + t244;
t261 = t49 * qJD(3);
t258 = pkin(2) * t158;
t257 = t155 * pkin(3);
t256 = t158 * pkin(5);
t110 = t126 * t158;
t139 = t158 * t198;
t186 = t158 * t199;
t113 = t186 - t139;
t159 = (-pkin(5) * t155 - pkin(3)) * t158 + (-t255 * t157 - pkin(1) - t258) * t156;
t237 = t156 * t158;
t145 = pkin(5) * t237;
t184 = -t157 * qJ(3) - t258;
t174 = -pkin(1) + t184;
t102 = t155 * t174 + t145;
t240 = t155 * t157;
t88 = -pkin(6) * t240 + t102;
t40 = -t260 * t159 + t259 * t88;
t41 = t259 * t159 + t260 * t88;
t137 = t157 * pkin(2) - qJ(3) * t158;
t238 = t156 * t157;
t106 = -pkin(5) * t238 + t155 * t137;
t239 = t155 * t158;
t90 = -pkin(6) * t239 + t106;
t202 = t259 * t90;
t144 = pkin(5) * t240;
t105 = t156 * t137 + t144;
t82 = t157 * pkin(3) - pkin(6) * t237 + t105;
t205 = t260 * t82;
t44 = -t202 + t205;
t203 = t259 * t82;
t204 = t260 * t90;
t45 = t204 + t203;
t6 = -t108 * t45 - t110 * t41 + t111 * t44 + t113 * t40;
t254 = t6 * qJD(1);
t201 = pkin(5) + t257;
t130 = t201 * t157;
t131 = t201 * t158;
t7 = t130 * t131 - t40 * t44 + t41 * t45;
t253 = t7 * qJD(1);
t13 = -t108 * t41 - t111 * t40;
t252 = qJD(1) * t13;
t162 = -t111 * t263 + t130 * t264 + t158 * t269;
t166 = t205 / 0.2e1 - t202 / 0.2e1;
t15 = -t162 + t166;
t251 = qJD(1) * t15;
t91 = t259 * t136 + t260 * t190;
t163 = -t108 * t263 + t130 * t266 + t91 * t262;
t165 = -t204 / 0.2e1 - t203 / 0.2e1;
t16 = -t163 + t165;
t250 = qJD(1) * t16;
t21 = -t130 * t108 - t158 * t40;
t249 = qJD(1) * t21;
t22 = t130 * t111 - t158 * t41;
t248 = qJD(1) * t22;
t101 = -pkin(5) * t239 + t156 * t174;
t56 = (t101 * t156 + t102 * t155) * t157;
t247 = qJD(1) * t56;
t63 = t108 * t157 - t110 * t158;
t246 = qJD(1) * t63;
t64 = t111 * t157 + t113 * t158;
t245 = qJD(1) * t64;
t11 = -t131 * t108 - t130 * t110 + t40 * t157 + t158 * t44;
t243 = t11 * qJD(1);
t12 = -t131 * t111 + t130 * t113 - t41 * t157 + t158 * t45;
t242 = t12 * qJD(1);
t20 = (t101 * t158 + t105 * t157) * t156 + (t102 * t158 + t106 * t157) * t155;
t236 = t20 * qJD(1);
t29 = pkin(5) ^ 2 * t157 * t158 + t101 * t105 + t102 * t106;
t235 = t29 * qJD(1);
t38 = -t108 * t113 + t110 * t111;
t234 = t38 * qJD(1);
t51 = -t101 * t157 + (t105 - 0.2e1 * t144) * t158;
t233 = t51 * qJD(1);
t52 = t106 * t158 + (-t102 + 0.2e1 * t145) * t157;
t232 = t52 * qJD(1);
t164 = -t200 / 0.2e1 - t197 / 0.2e1;
t67 = (t265 - t164) * t158;
t231 = t67 * qJD(1);
t68 = (t265 + t164) * t158;
t230 = t68 * qJD(1);
t69 = t123 * t262 + t186 / 0.2e1 - t139 / 0.2e1;
t229 = t69 * qJD(1);
t70 = t139 / 0.2e1 + (t266 - t199 / 0.2e1) * t158;
t228 = t70 * qJD(1);
t151 = t155 ^ 2;
t152 = t156 ^ 2;
t141 = t152 + t151;
t227 = qJD(1) * t108;
t225 = qJD(1) * t158;
t223 = qJD(2) * t148;
t222 = qJD(2) * t156;
t221 = qJD(3) * t158;
t220 = qJD(4) * t111;
t219 = qJD(4) * t126;
t218 = t108 * qJD(4);
t121 = t141 * t153;
t217 = t121 * qJD(1);
t122 = t142 * t155;
t216 = t122 * qJD(1);
t116 = t123 * qJD(4);
t125 = t142 * t156;
t215 = t125 * qJD(1);
t214 = t141 * qJD(2);
t213 = t142 * qJD(1);
t212 = t157 * qJD(1);
t211 = t157 * qJD(2);
t210 = t158 * qJD(2);
t209 = pkin(1) * t212;
t208 = pkin(1) * t225;
t207 = pkin(5) * t210;
t206 = t256 / 0.2e1;
t194 = t155 * t222;
t193 = t157 * t221;
t192 = t126 * t116;
t191 = t157 * t210;
t143 = t158 * t212;
t189 = -0.2e1 * t155 * t238;
t100 = t111 * t225;
t188 = qJD(2) * t68 + t100;
t187 = qJD(3) + t223;
t185 = t156 * t143;
t37 = -t123 * t92 + t126 * t91;
t160 = t40 * t265 + t41 * t123 / 0.2e1 + t91 * t111 / 0.2e1 + t108 * t269;
t173 = (pkin(5) / 0.2e1 + t257 / 0.2e1) * t158;
t9 = t173 + t160;
t183 = qJD(1) * t9 - qJD(2) * t37;
t24 = t241 + t244;
t107 = t108 ^ 2;
t55 = t107 - t268;
t182 = qJD(1) * t55 + qJD(2) * t24;
t118 = t123 ^ 2;
t65 = t118 - t267;
t181 = qJD(1) * t24 + qJD(2) * t65;
t66 = t107 + t268;
t180 = qJD(1) * t66 + qJD(2) * t49;
t89 = t118 + t267;
t179 = qJD(1) * t49 + qJD(2) * t89;
t178 = -t105 * t155 + t106 * t156;
t132 = t141 * qJ(3);
t172 = -t101 * t155 / 0.2e1 + t102 * t156 / 0.2e1;
t53 = t206 - t172;
t177 = qJD(1) * t53 - qJD(2) * t132;
t176 = -qJD(2) * t123 - t227;
t175 = t224 - t226;
t167 = qJD(2) * t67 + t100 - t220;
t161 = t184 * qJD(2) + t221;
t149 = t211 / 0.2e1;
t119 = t143 - t157 * qJD(4) / 0.2e1;
t54 = t206 + t172;
t50 = t69 * qJD(2) - t108 * t225;
t36 = -t70 * qJD(2) + (-qJD(4) + t225) * t108;
t23 = t24 * qJD(4);
t18 = t162 + t166;
t17 = t163 + t165;
t10 = t173 - t160;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t191, t142 * qJD(2), 0, -t191, 0, 0, -pkin(1) * t211, -pkin(1) * t210, 0, 0, t152 * t191, t189 * t210, -t125 * qJD(2), t151 * t191, t122 * qJD(2), -t191, -t51 * qJD(2) + t156 * t193, t52 * qJD(2) - t155 * t193, -qJD(2) * t20 + qJD(3) * t121, qJD(2) * t29 - qJD(3) * t56, -(qJD(2) * t113 - t218) * t111, qJD(2) * t38 + qJD(4) * t55, -t64 * qJD(2) + t158 * t218, (qJD(2) * t110 - t220) * t108, -t63 * qJD(2) - t158 * t220, -t191, -t11 * qJD(2) - t22 * qJD(4) - t111 * t221, t12 * qJD(2) + t21 * qJD(4) - t108 * t221, qJD(2) * t6 + qJD(3) * t66, qJD(2) * t7 + qJD(3) * t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t143, t213, t210, -t143, -t211, 0, -t207 - t209, pkin(5) * t211 - t208, 0, 0, (t152 * t212 + t194) * t158, (qJD(1) * t189 + (-t151 + t152) * qJD(2)) * t158, t155 * t211 - t215, (t151 * t212 - t194) * t158, t156 * t211 + t216, -t143, -t145 * qJD(2) + t161 * t155 - t233, t155 * t207 + t156 * t161 + t232, qJD(2) * t178 - t236, t235 + (-pkin(2) * t256 + qJ(3) * t178) * qJD(2) + t54 * qJD(3), t113 * t175 + t272, t234 + (-t110 * t126 - t113 * t123) * qJD(2) + t23, -qJD(4) * t70 + t126 * t211 - t245, -t110 * t176 - t272, -qJD(4) * t67 - t123 * t211 - t246, -t119, -t243 + (t110 * t148 + t123 * t131 - t157 * t91) * qJD(2) - t68 * qJD(3) + t18 * qJD(4), t242 + (t113 * t148 + t126 * t131 - t157 * t92) * qJD(2) + t69 * qJD(3) + t17 * qJD(4), t254 + (-t110 * t92 + t113 * t91 - t123 * t45 - t126 * t44) * qJD(2) + t261, t253 + (t131 * t148 - t44 * t91 + t45 * t92) * qJD(2) + t10 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (qJD(2) * t155 + t156 * t212) * t158, (-t155 * t212 + t222) * t158, t217, qJD(2) * t54 - t247, 0, 0, 0, 0, 0, 0, -t188, t50, t180, qJD(2) * t10 + t252; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t270, t182, t36, -t270, -t167, t149, qJD(2) * t18 - qJD(4) * t41 - t248, qJD(2) * t17 + qJD(4) * t40 + t249, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t143, -t213, 0, t143, 0, 0, t209, t208, 0, 0, -t152 * t143, 0.2e1 * t155 * t185, t215, -t151 * t143, -t216, t143, t233, -t232, t236, -qJD(3) * t53 - t235, t113 * t226 + t272, t23 - t234, -qJD(4) * t69 + t245, -t110 * t227 - t272, -qJD(4) * t68 + t246, t119, -qJD(3) * t67 - qJD(4) * t15 + t243, qJD(3) * t70 - qJD(4) * t16 - t242, -t254 + t261, -qJD(3) * t9 - t253; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t141 * qJD(3), t132 * qJD(3), -t192, t65 * qJD(4), 0, t192, 0, 0, t148 * t219, -t148 * t116, qJD(3) * t89, qJD(3) * t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t214, -t177, 0, 0, 0, 0, 0, 0, -t231, t228, t179, -t183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t271, t181, -t116 - t229, t271, -t219 - t230, -t212 / 0.2e1, -qJD(4) * t92 + t126 * t223 - t251, qJD(4) * t91 - t123 * t223 - t250, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t185, t155 * t143, -t217, qJD(2) * t53 + t247, 0, 0, 0, 0, 0, 0, t167, t36, -t180, qJD(2) * t9 - t252; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t214, t177, 0, 0, 0, 0, 0, 0, t219 + t231, -t116 - t228, -t179, t183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t175, t176, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t270, -t182, t50, t270, t188, t149, qJD(2) * t15 + qJD(3) * t111 + t248, qJD(2) * t16 + qJD(3) * t108 - t249, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t271, -t181, t229, -t271, t230, t212 / 0.2e1, -t126 * t187 + t251, t123 * t187 + t250, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t175, -t176, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t1;
