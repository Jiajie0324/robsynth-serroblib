% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RPRP7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d3]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:47
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RPRP7_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(5,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RPRP7_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RPRP7_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RPRP7_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RPRP7_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'S4RPRP7_invdynm_fixb_reg2_snew_vp: pkin has to be [5x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:47:21
% EndTime: 2019-12-31 16:47:23
% DurationCPUTime: 2.28s
% Computational Cost: add. (3100->300), mult. (6438->268), div. (0->0), fcn. (2886->4), ass. (0->191)
t439 = qJD(3) ^ 2;
t437 = cos(qJ(3));
t433 = t437 ^ 2;
t440 = qJD(1) ^ 2;
t506 = t433 * t440;
t416 = t439 + t506;
t435 = sin(qJ(3));
t419 = t435 * t440 * t437;
t408 = qJDD(3) + t419;
t500 = t435 * t408;
t361 = t416 * t437 + t500;
t484 = qJD(1) * qJD(3);
t424 = t435 * t484;
t480 = t437 * qJDD(1);
t400 = -0.2e1 * t424 + t480;
t436 = sin(qJ(1));
t438 = cos(qJ(1));
t542 = pkin(4) * (t361 * t438 + t436 * t400);
t541 = pkin(4) * (t361 * t436 - t438 * t400);
t540 = pkin(2) * t361;
t539 = pkin(5) * t361;
t494 = t437 * t408;
t368 = -t416 * t435 + t494;
t538 = pkin(5) * t368;
t537 = qJ(2) * t368;
t523 = -pkin(5) - pkin(1);
t536 = t523 * t368;
t474 = t437 * t484;
t482 = t435 * qJDD(1);
t397 = 0.2e1 * t474 + t482;
t502 = t435 * t397;
t344 = -t400 * t437 + t502;
t432 = t435 ^ 2;
t407 = (-t432 + t433) * t440;
t535 = t344 * t436 - t438 * t407;
t534 = t344 * t438 + t436 * t407;
t507 = t432 * t440;
t414 = -t439 + t507;
t358 = t414 * t435 + t494;
t479 = t438 * qJDD(1);
t533 = t358 * t436 - t435 * t479;
t481 = t436 * qJDD(1);
t532 = t358 * t438 + t435 * t481;
t529 = qJ(2) * t400 - t361 * t523;
t399 = -t424 + t480;
t412 = t438 * g(1) + t436 * g(2);
t430 = qJDD(1) * qJ(2);
t448 = -t440 * t523 + t412 - t430;
t442 = 0.2e1 * (qJD(4) * t437 - qJD(2)) * qJD(1) - qJ(4) * t424 - pkin(3) * t474 + t448;
t441 = t399 * qJ(4) + t442;
t398 = t474 + t482;
t512 = t398 * pkin(3);
t324 = t441 - t512;
t517 = pkin(3) * t437;
t462 = qJ(4) * t435 + t517;
t528 = (pkin(2) + t462) * t324;
t411 = t436 * g(1) - g(2) * t438;
t465 = qJDD(2) - t411;
t453 = -t440 * qJ(2) + t465;
t378 = qJDD(1) * t523 + t453;
t349 = g(3) * t435 + t378 * t437;
t350 = t437 * g(3) - t378 * t435;
t328 = t349 * t437 - t350 * t435;
t415 = -t439 - t507;
t409 = qJDD(3) - t419;
t493 = t437 * t409;
t359 = t415 * t435 + t493;
t527 = -pkin(1) * t359 + qJ(2) * t397;
t486 = t432 + t433;
t403 = t486 * qJDD(1);
t406 = t486 * t440;
t526 = pkin(1) * t403 - qJ(2) * t406;
t525 = t462 * qJDD(1);
t318 = -t512 + (t399 + t400) * qJ(4) + t442;
t524 = (pkin(2) + t517) * t400 + t435 * t318;
t499 = t435 * t409;
t365 = t415 * t437 - t499;
t522 = pkin(1) * t365;
t521 = pkin(2) * t328;
t478 = -0.2e1 * qJD(2) * qJD(1);
t373 = t448 + t478;
t520 = pkin(2) * t373;
t519 = pkin(2) * t406;
t518 = pkin(3) * t435;
t516 = pkin(4) * (-t359 * t438 + t397 * t436);
t491 = t438 * t403;
t515 = pkin(4) * (-t406 * t436 + t491);
t514 = pkin(5) * t359;
t513 = pkin(5) * t403;
t511 = qJ(2) * t365;
t509 = qJ(4) * t437;
t508 = qJDD(1) * pkin(1);
t503 = t435 * t373;
t501 = t435 * t400;
t497 = t436 * t403;
t355 = t437 * t373;
t495 = t437 * t397;
t489 = -pkin(3) * t501 + t318 * t437;
t485 = t440 * (-t509 + t518);
t451 = qJDD(3) * qJ(4) - t435 * t485 - t350;
t447 = pkin(3) * t439 - t451;
t483 = qJD(4) * qJD(3);
t477 = -0.2e1 * t483;
t331 = t447 + t477;
t333 = qJDD(3) * pkin(3) + qJ(4) * t439 - t437 * t485 - qJDD(4) + t349;
t488 = pkin(3) * t333 - qJ(4) * t331;
t487 = pkin(2) * t397 - pkin(5) * t365;
t452 = t412 + t478;
t379 = t440 * pkin(1) - t430 + t452;
t380 = -t453 + t508;
t472 = -t379 * t438 - t380 * t436;
t471 = -t411 * t436 - t412 * t438;
t470 = t436 * t419;
t469 = t438 * t419;
t310 = -t331 * t435 + t333 * t437;
t468 = -pkin(2) * t310 - t488;
t404 = -t436 * t440 + t479;
t467 = pkin(4) * t404 + g(3) * t436;
t405 = t438 * t440 + t481;
t466 = -pkin(4) * t405 + g(3) * t438;
t464 = -t487 + t355;
t463 = pkin(2) * t400 + t503;
t461 = -t503 - t514;
t329 = -t349 * t435 - t350 * t437;
t460 = t379 * t436 - t380 * t438;
t346 = t495 + t501;
t367 = -t414 * t437 + t500;
t459 = t411 * t438 - t412 * t436;
t457 = -t350 + t540;
t426 = 0.2e1 * t483;
t326 = t426 + (t406 - t439) * pkin(3) + t451;
t327 = qJ(4) * t406 - t333;
t456 = -t326 * t435 + t327 * t437 + t513;
t455 = t513 - t328;
t353 = pkin(2) * t359;
t454 = t349 + t353;
t319 = (-t397 - t398) * pkin(3) + t441;
t450 = -qJ(4) * t502 + t319 * t437 - t487;
t449 = -qJ(4) * t495 - t319 * t435 - t514;
t446 = pkin(3) * t409 + qJ(4) * t415 + t333;
t445 = -t353 - t446;
t444 = pkin(3) * t416 + qJ(4) * t408 - t447;
t443 = -t444 - t540;
t417 = -t439 + t506;
t395 = pkin(2) * t403;
t391 = t486 * t484;
t388 = t465 - 0.2e1 * t508;
t386 = 0.2e1 * t430 - t452;
t377 = qJDD(3) * t438 - t391 * t436;
t376 = qJDD(3) * t436 + t391 * t438;
t375 = t399 * t435 + t433 * t484;
t374 = -t398 * t437 + t432 * t484;
t369 = t417 * t435 + t493;
t366 = (t399 - t424) * t437;
t362 = -t417 * t437 + t499;
t357 = (t398 + t474) * t435;
t356 = t395 + t525;
t348 = pkin(4) * (-t406 * t438 - t497);
t342 = t374 * t436 - t469;
t341 = t375 * t436 + t469;
t340 = -t374 * t438 - t470;
t339 = -t375 * t438 + t470;
t338 = t362 * t436 + t437 * t479;
t337 = -t362 * t438 + t436 * t480;
t336 = pkin(1) * t380 - qJ(2) * t379;
t334 = pkin(4) * (t359 * t436 + t397 * t438);
t323 = t324 * t518;
t322 = t329 + t519;
t321 = -t457 + t537;
t320 = t454 - t511;
t316 = -t464 - t522;
t315 = t463 - t536;
t314 = -t355 + t529;
t313 = t461 + t527;
t312 = t455 + t526;
t311 = -t331 * t437 - t333 * t435;
t309 = -t445 - t511;
t308 = t426 - t443 - t537;
t307 = -qJ(2) * t329 + t521;
t306 = t326 * t437 + t327 * t435 + t519;
t305 = t329 * t523 - t520;
t304 = -qJ(2) * t373 + t328 * t523;
t303 = -t524 + t536;
t302 = -t450 - t522;
t301 = t489 - t529;
t300 = t449 + t527;
t299 = t456 + t526;
t298 = -qJ(2) * t311 - t468;
t297 = t311 * t523 - t528;
t296 = -t323 + (-qJ(2) + t509) * t324 + t523 * t310;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t404, 0, -t405, 0, -t467, -t466, -t459, -pkin(4) * t459, 0, -t404, t405, 0, 0, 0, t460, t467, t466, pkin(4) * t460 + (-pkin(1) * t436 + qJ(2) * t438) * g(3), t341, -t535, t338, t342, t533, t377, -t316 * t436 + t320 * t438 - t516, -t436 * t315 + t438 * t321 - t542, -pkin(2) * t491 + t322 * t436 - t515, t438 * t307 - t436 * t305 - pkin(4) * (-t328 * t438 - t436 * t373), t341, t338, t535, t377, -t533, t342, -t302 * t436 + t309 * t438 - t516, t306 * t436 - t356 * t438 - t515, -t436 * t303 + t438 * t308 + t542, t438 * t298 - t436 * t297 - pkin(4) * (-t310 * t438 - t324 * t436); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t405, 0, t404, 0, t466, -t467, t471, pkin(4) * t471, 0, -t405, -t404, 0, 0, 0, t472, -t466, t467, pkin(4) * t472 + (pkin(1) * t438 + qJ(2) * t436) * g(3), t339, t534, t337, t340, -t532, t376, t316 * t438 + t320 * t436 + t334, t438 * t315 + t436 * t321 - t541, -pkin(2) * t497 - t322 * t438 + t348, t436 * t307 + t438 * t305 + pkin(4) * (t328 * t436 - t438 * t373), t339, t337, -t534, t376, t532, t340, t302 * t438 + t309 * t436 + t334, -t306 * t438 - t356 * t436 + t348, t438 * t303 + t436 * t308 + t541, t436 * t298 + t438 * t297 + pkin(4) * (t310 * t436 - t324 * t438); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t411, t412, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t388, t386, t336, t366, -t346, t369, t357, -t367, 0, t313, t314, t312, t304, t366, t369, t346, 0, t367, t357, t300, t299, t301, t296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t440, 0, 0, -g(3), -t411, 0, 0, -qJDD(1), t440, 0, 0, 0, -t380, 0, g(3), qJ(2) * g(3), t419, t407, t480, -t419, -t482, qJDD(3), t320, t321, -t395, t307, t419, t480, -t407, qJDD(3), t482, -t419, t309, -t356, t308, t298; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t440, 0, qJDD(1), 0, g(3), 0, -t412, 0, 0, -t440, -qJDD(1), 0, 0, 0, -t379, -g(3), 0, pkin(1) * g(3), -t375, t344, -t362, -t374, -t358, t391, t316, t315, -t322, t305, -t375, -t362, -t344, t391, t358, -t374, t302, -t306, t303, t297; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t411, t412, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t388, t386, t336, t366, -t346, t369, t357, -t367, 0, t313, t314, t312, t304, t366, t369, t346, 0, t367, t357, t300, t299, t301, t296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t380, -t379, 0, t366, -t346, t369, t357, -t367, 0, t461, -t355 + t539, t455, -pkin(5) * t328, t366, t369, t346, 0, t367, t357, t449, t456, t489 - t539, -pkin(5) * t310 + t324 * t509 - t323; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t440, 0, 0, 0, t380, 0, -g(3), 0, -t419, -t407, -t480, t419, t482, -qJDD(3), -t454, t457, t395, -t521, -t419, -t480, t407, -qJDD(3), -t482, t419, t445, t356, t443 + t477, t468; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t440, qJDD(1), 0, 0, 0, t379, g(3), 0, 0, t375, -t344, t362, t374, t358, -t391, t464, -t463 - t538, t322, pkin(5) * t329 + t520, t375, t362, t344, -t391, -t358, t374, t450, t306, t524 + t538, pkin(5) * t311 + t528; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t399, -t397, t409, t424, t414, -t424, 0, -t373, -t349, 0, t399, t409, t397, -t424, -t414, t424, -qJ(4) * t397, t327, t318, qJ(4) * t324; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t474, t400, -t417, -t398, t408, -t474, t373, 0, -t350, 0, t474, -t417, -t400, -t474, -t408, -t398, t319, t326, pkin(3) * t400, pkin(3) * t324; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t419, t407, t480, -t419, -t482, qJDD(3), t349, t350, 0, 0, t419, t480, -t407, qJDD(3), t482, -t419, t446, -t525, t426 + t444, t488; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t399, t409, t397, -t424, -t414, t424, 0, -t333, t324, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t419, t480, -t407, qJDD(3), t482, -t419, t333, 0, -t331, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t474, t417, t400, t474, t408, t398, -t324, t331, 0, 0;];
m_new_reg = t1;
