% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4RRPR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d4,theta3]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:02
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4RRPR4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRPR4_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRPR4_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRPR4_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRPR4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RRPR4_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:02:40
% EndTime: 2019-12-31 17:02:45
% DurationCPUTime: 4.61s
% Computational Cost: add. (19195->353), mult. (27973->496), div. (0->0), fcn. (17908->8), ass. (0->245)
t676 = cos(qJ(2));
t711 = qJD(1) + qJD(2);
t710 = t711 ^ 2;
t668 = qJDD(1) + qJDD(2);
t673 = sin(qJ(2));
t720 = t673 * t668;
t640 = t676 * t710 + t720;
t619 = pkin(5) * t640 - t676 * g(3);
t674 = sin(qJ(1));
t677 = cos(qJ(1));
t715 = t676 * t668;
t643 = t673 * t710 - t715;
t690 = t677 * t640 - t674 * t643;
t739 = pkin(5) * t643 - t673 * g(3);
t749 = pkin(4) * t690 + t677 * t619 - t674 * t739;
t736 = t674 * t640 + t677 * t643;
t748 = pkin(4) * t736 + t674 * t619 + t677 * t739;
t655 = t677 * g(1) + t674 * g(2);
t679 = qJD(1) ^ 2;
t646 = -t679 * pkin(1) - t655;
t654 = t674 * g(1) - t677 * g(2);
t686 = qJDD(1) * pkin(1) + t654;
t606 = t673 * t646 - t676 * t686;
t607 = t676 * t646 + t673 * t686;
t704 = t673 * t606 + t676 * t607;
t561 = t676 * t606 - t673 * t607;
t714 = t677 * t561;
t746 = -t674 * t704 + t714;
t719 = t674 * t561;
t745 = t677 * t704 + t719;
t672 = sin(qJ(4));
t670 = sin(pkin(7));
t671 = cos(pkin(7));
t675 = cos(qJ(4));
t699 = t675 * t711;
t700 = t672 * t711;
t624 = t670 * t700 - t671 * t699;
t626 = t670 * t699 + t671 * t700;
t592 = t626 * t624;
t733 = qJDD(4) - t592;
t742 = t672 * t733;
t741 = t675 * t733;
t687 = -t710 * pkin(2) + t668 * qJ(3) + 0.2e1 * qJD(3) * t711 + t607;
t740 = t668 * pkin(6) + t687;
t681 = t671 ^ 2;
t664 = t681 * t710;
t669 = t670 ^ 2;
t701 = t671 * t710;
t630 = t671 * t664 + t669 * t701;
t706 = t671 * t715;
t602 = -t673 * t630 + t706;
t604 = t676 * t630 + t671 * t720;
t738 = t677 * t602 - t674 * t604;
t737 = t674 * t602 + t677 * t604;
t728 = t671 * g(3);
t570 = t687 * t670 + t728;
t729 = t670 * g(3);
t571 = t687 * t671 - t729;
t529 = t670 * t570 + t671 * t571;
t702 = t669 * t710;
t638 = t702 + t664;
t622 = t624 ^ 2;
t623 = t626 ^ 2;
t543 = -t728 + (pkin(3) * t701 - t740) * t670;
t544 = -pkin(3) * t664 + t740 * t671 - t729;
t507 = -t675 * t543 + t672 * t544;
t508 = t672 * t543 + t675 * t544;
t468 = -t675 * t507 + t672 * t508;
t732 = pkin(3) * t468;
t661 = t670 * t668;
t663 = t671 * t668;
t620 = t672 * t661 - t675 * t663;
t621 = (t675 * t670 + t672 * t671) * t668;
t538 = -t620 * t672 - t675 * t621;
t731 = pkin(3) * t538;
t725 = t670 * t468;
t581 = -t668 * pkin(2) - t710 * qJ(3) + qJDD(3) + t606;
t576 = t670 * t581;
t724 = t671 * t468;
t577 = t671 * t581;
t564 = -pkin(3) * t663 - t638 * pkin(6) + t581;
t723 = t672 * t564;
t584 = qJDD(4) + t592;
t722 = t672 * t584;
t721 = t673 * t581;
t718 = t675 * t564;
t717 = t675 * t584;
t716 = t676 * t581;
t713 = -pkin(2) * t581 + qJ(3) * t529;
t615 = t624 * qJD(4);
t712 = t626 * qJD(4);
t709 = t670 * t663;
t708 = t673 * t592;
t707 = t676 * t592;
t705 = pkin(2) * t663 - qJ(3) * t630 - t577;
t469 = t672 * t507 + t675 * t508;
t703 = -t674 * t654 - t677 * t655;
t540 = -t620 * t675 + t672 * t621;
t569 = -t622 - t623;
t459 = -pkin(3) * t569 + pkin(6) * t540 + t469;
t463 = -pkin(6) * t538 - t468;
t493 = -t670 * t538 + t671 * t540;
t697 = -pkin(2) * t569 + qJ(3) * t493 + t671 * t459 + t670 * t463;
t678 = qJD(4) ^ 2;
t582 = -t678 - t622;
t537 = t675 * t582 - t742;
t586 = t620 + 0.2e1 * t712;
t478 = -pkin(3) * t586 + pkin(6) * t537 - t718;
t536 = t672 * t582 + t741;
t489 = -t670 * t536 + t671 * t537;
t505 = -pkin(6) * t536 + t723;
t696 = -pkin(2) * t586 + qJ(3) * t489 + t671 * t478 + t670 * t505;
t612 = -t623 - t678;
t551 = -t672 * t612 - t717;
t588 = -0.2e1 * t615 + t621;
t495 = -pkin(3) * t588 + pkin(6) * t551 + t723;
t548 = t675 * t612 - t722;
t515 = -t670 * t548 + t671 * t551;
t521 = -pkin(6) * t548 + t718;
t695 = -pkin(2) * t588 + qJ(3) * t515 + t671 * t495 + t670 * t521;
t660 = t669 * t668;
t662 = t681 * t668;
t635 = t662 + t660;
t694 = pkin(2) * t638 + qJ(3) * t635 + t529;
t649 = t677 * qJDD(1) - t674 * t679;
t693 = -pkin(4) * t649 - t674 * g(3);
t650 = t670 * t701;
t528 = t671 * t570 - t670 * t571;
t608 = t640 * t671 * t670;
t609 = -t673 * t650 + t670 * t706;
t692 = t677 * t608 + t674 * t609;
t691 = t674 * t608 - t677 * t609;
t689 = t677 * t654 - t674 * t655;
t629 = t638 * t670;
t688 = -pkin(2) * t661 + qJ(3) * t629 + t576;
t685 = pkin(3) * t536 - t507;
t454 = t671 * t469 - t725;
t465 = -pkin(3) * t564 + pkin(6) * t469;
t684 = -pkin(2) * t564 - pkin(6) * t725 + qJ(3) * t454 + t671 * t465;
t683 = pkin(3) * t548 - t508;
t648 = t674 * qJDD(1) + t677 * t679;
t647 = 0.2e1 * t709;
t639 = t702 - t664;
t636 = t662 - t660;
t633 = -pkin(4) * t648 + t677 * g(3);
t611 = -t623 + t678;
t610 = t622 - t678;
t603 = t676 * t629 + t670 * t720;
t600 = t673 * t629 - t670 * t715;
t596 = t676 * t636 + t673 * t639;
t595 = t676 * t635 - t673 * t638;
t594 = t673 * t636 - t676 * t639;
t593 = t673 * t635 + t676 * t638;
t590 = t623 - t622;
t589 = -t615 + t621;
t587 = -t620 - t712;
t575 = -pkin(1) * t640 - t607;
t574 = -pkin(1) * t643 - t606;
t573 = (-t624 * t675 + t626 * t672) * qJD(4);
t572 = (-t624 * t672 - t626 * t675) * qJD(4);
t558 = -t674 * t600 + t677 * t603;
t557 = t677 * t600 + t674 * t603;
t556 = pkin(1) * t561;
t555 = t675 * t589 - t672 * t712;
t554 = t672 * t589 + t675 * t712;
t553 = -t672 * t587 + t675 * t615;
t552 = t675 * t587 + t672 * t615;
t550 = -t672 * t611 + t741;
t549 = t675 * t610 - t722;
t547 = t675 * t611 + t742;
t546 = t672 * t610 + t717;
t545 = pkin(1) * g(3) + pkin(5) * t704;
t541 = -t675 * t586 - t672 * t588;
t539 = -t672 * t586 + t675 * t588;
t535 = -t670 * t572 + t671 * t573;
t534 = t671 * t572 + t670 * t573;
t533 = pkin(1) * t602 + t705;
t532 = pkin(1) * t600 + t688;
t531 = t673 * qJDD(4) + t676 * t535;
t530 = -t676 * qJDD(4) + t673 * t535;
t525 = -pkin(5) * t600 - t673 * t571 + t671 * t716;
t524 = -pkin(5) * t602 - t673 * t570 + t670 * t716;
t523 = pkin(5) * t603 + t676 * t571 + t671 * t721;
t522 = -pkin(5) * t604 + t676 * t570 + t670 * t721;
t519 = -t670 * t554 + t671 * t555;
t518 = -t670 * t552 + t671 * t553;
t517 = t671 * t554 + t670 * t555;
t516 = t671 * t552 + t670 * t553;
t514 = -t670 * t547 + t671 * t550;
t513 = -t670 * t546 + t671 * t549;
t512 = t671 * t548 + t670 * t551;
t511 = t671 * t547 + t670 * t550;
t510 = t671 * t546 + t670 * t549;
t504 = -pkin(5) * t593 + t676 * t528;
t503 = pkin(5) * t595 + t673 * t528;
t501 = t676 * t529 + t721;
t500 = t673 * t529 - t716;
t499 = t676 * t514 + t673 * t621;
t498 = t676 * t513 - t673 * t620;
t497 = t673 * t514 - t676 * t621;
t496 = t673 * t513 + t676 * t620;
t494 = -t670 * t539 + t671 * t541;
t492 = t671 * t539 + t670 * t541;
t491 = t671 * t538 + t670 * t540;
t488 = t671 * t536 + t670 * t537;
t485 = t676 * t519 + t708;
t484 = t676 * t518 - t708;
t483 = t673 * t519 - t707;
t482 = t673 * t518 + t707;
t481 = pkin(1) * t593 + t694;
t480 = t676 * t515 + t673 * t588;
t479 = t673 * t515 - t676 * t588;
t476 = t676 * t494 + t673 * t590;
t475 = t673 * t494 - t676 * t590;
t474 = t676 * t489 + t673 * t586;
t473 = t673 * t489 - t676 * t586;
t472 = t676 * t493 + t673 * t569;
t471 = t673 * t493 - t676 * t569;
t470 = -pkin(2) * t491 - t731;
t467 = pkin(1) * t500 + t713;
t466 = -pkin(2) * t512 - t683;
t461 = -pkin(5) * t500 - (pkin(2) * t673 - qJ(3) * t676) * t528;
t460 = -pkin(2) * t488 - t685;
t457 = -qJ(3) * t512 - t670 * t495 + t671 * t521;
t456 = pkin(5) * t501 - (-pkin(2) * t676 - qJ(3) * t673 - pkin(1)) * t528;
t455 = -qJ(3) * t488 - t670 * t478 + t671 * t505;
t453 = t670 * t469 + t724;
t451 = t676 * t454 + t673 * t564;
t450 = t673 * t454 - t676 * t564;
t449 = pkin(1) * t479 + t695;
t448 = pkin(1) * t473 + t696;
t447 = -pkin(2) * t453 - t732;
t446 = -pkin(5) * t479 + t676 * t457 - t673 * t466;
t445 = -qJ(3) * t491 - t670 * t459 + t671 * t463;
t444 = -pkin(1) * t512 + pkin(5) * t480 + t673 * t457 + t676 * t466;
t443 = -pkin(5) * t473 + t676 * t455 - t673 * t460;
t442 = -pkin(6) * t724 - qJ(3) * t453 - t670 * t465;
t441 = pkin(1) * t471 + t697;
t440 = -pkin(1) * t488 + pkin(5) * t474 + t673 * t455 + t676 * t460;
t439 = -pkin(5) * t471 + t676 * t445 - t673 * t470;
t438 = -pkin(1) * t491 + pkin(5) * t472 + t673 * t445 + t676 * t470;
t437 = pkin(1) * t450 + t684;
t436 = -pkin(5) * t450 + t676 * t442 - t673 * t447;
t435 = -pkin(1) * t453 + pkin(5) * t451 + t673 * t442 + t676 * t447;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t649, 0, -t648, 0, t693, -t633, -t689, -pkin(4) * t689, 0, 0, -t736, 0, -t690, 0, t748, t749, t746, pkin(4) * t746 + pkin(5) * t714 - t674 * t545, -t691, -t674 * t594 + t677 * t596, t558, t691, t737, 0, -pkin(4) * t738 - t674 * t522 + t677 * t524, -pkin(4) * t557 - t674 * t523 + t677 * t525, t677 * t504 - t674 * t503 - pkin(4) * (t677 * t593 + t674 * t595), t677 * t461 - t674 * t456 - pkin(4) * (t677 * t500 + t674 * t501), -t674 * t483 + t677 * t485, -t674 * t475 + t677 * t476, -t674 * t497 + t677 * t499, -t674 * t482 + t677 * t484, -t674 * t496 + t677 * t498, -t674 * t530 + t677 * t531, t677 * t443 - t674 * t440 - pkin(4) * (t677 * t473 + t674 * t474), t677 * t446 - t674 * t444 - pkin(4) * (t677 * t479 + t674 * t480), t677 * t439 - t674 * t438 - pkin(4) * (t677 * t471 + t674 * t472), t677 * t436 - t674 * t435 - pkin(4) * (t677 * t450 + t674 * t451); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t648, 0, t649, 0, t633, t693, t703, pkin(4) * t703, 0, 0, t690, 0, -t736, 0, -t749, t748, t745, pkin(4) * t745 + pkin(5) * t719 + t677 * t545, t692, t677 * t594 + t674 * t596, t557, -t692, -t738, 0, -pkin(4) * t737 + t677 * t522 + t674 * t524, pkin(4) * t558 + t677 * t523 + t674 * t525, t674 * t504 + t677 * t503 + pkin(4) * (-t674 * t593 + t677 * t595), t674 * t461 + t677 * t456 + pkin(4) * (-t674 * t500 + t677 * t501), t677 * t483 + t674 * t485, t677 * t475 + t674 * t476, t677 * t497 + t674 * t499, t677 * t482 + t674 * t484, t677 * t496 + t674 * t498, t677 * t530 + t674 * t531, t674 * t443 + t677 * t440 + pkin(4) * (-t674 * t473 + t677 * t474), t674 * t446 + t677 * t444 + pkin(4) * (-t674 * t479 + t677 * t480), t674 * t439 + t677 * t438 + pkin(4) * (-t674 * t471 + t677 * t472), t674 * t436 + t677 * t435 + pkin(4) * (-t674 * t450 + t677 * t451); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t654, t655, 0, 0, 0, 0, 0, 0, 0, t668, t574, t575, 0, -t556, t660, t647, 0, t662, 0, 0, t533, t532, t481, t467, t517, t492, t511, t516, t510, t534, t448, t449, t441, t437; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t679, 0, 0, -g(3), -t654, 0, 0, 0, -t643, 0, -t640, 0, t739, t619, t561, pkin(5) * t561, t609, t596, t603, -t609, t604, 0, t524, t525, t504, t461, t485, t476, t499, t484, t498, t531, t443, t446, t439, t436; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t679, 0, qJDD(1), 0, g(3), 0, -t655, 0, 0, 0, t640, 0, -t643, 0, -t619, t739, t704, t545, t608, t594, t600, -t608, -t602, 0, t522, t523, t503, t456, t483, t475, t497, t482, t496, t530, t440, t444, t438, t435; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t654, t655, 0, 0, 0, 0, 0, 0, 0, t668, t574, t575, 0, -t556, t660, t647, 0, t662, 0, 0, t533, t532, t481, t467, t517, t492, t511, t516, t510, t534, t448, t449, t441, t437; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t668, 0, -t710, 0, 0, -g(3), t606, 0, t709, t636, t629, -t709, t630, 0, t576, t577, t528, qJ(3) * t528, t519, t494, t514, t518, t513, t535, t455, t457, t445, t442; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t710, 0, t668, 0, g(3), 0, t607, 0, t650, -t639, -t661, -t650, -t663, 0, t570, t571, 0, pkin(2) * t528, -t592, -t590, -t621, t592, t620, -qJDD(4), t460, t466, t470, t447; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t668, -t606, -t607, 0, 0, t660, t647, 0, t662, 0, 0, t705, t688, t694, t713, t517, t492, t511, t516, t510, t534, t696, t695, t697, t684; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t661, t663, t650, 0, t664, 0, 0, t581, t570, 0, t555, t541, t550, t553, t549, t573, t505, t521, t463, -pkin(6) * t468; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t661, -t702, t663, -t650, 0, -t581, 0, t571, 0, t554, t539, t547, t552, t546, t572, t478, t495, t459, t465; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t650, t639, t661, t650, t663, 0, -t570, -t571, 0, 0, t592, t590, t621, -t592, -t620, qJDD(4), t685, t683, t731, t732; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t589, -t586, t733, t615, t610, -t615, 0, t564, t507, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t712, t588, t611, t587, t584, -t712, -t564, 0, t508, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t592, t590, t621, -t592, -t620, qJDD(4), -t507, -t508, 0, 0;];
m_new_reg = t1;
