% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S4RRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d3,d4]';
% 
% Output:
% tauB_reg [6x(5*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:28
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S4RRRR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRRR5_invdynB_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRRR5_invdynB_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRRR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRRR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RRRR5_invdynB_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:28:19
% EndTime: 2019-12-31 17:28:26
% DurationCPUTime: 5.32s
% Computational Cost: add. (20302->438), mult. (41115->660), div. (0->0), fcn. (27883->8), ass. (0->311)
t494 = sin(qJ(3));
t498 = cos(qJ(3));
t495 = sin(qJ(2));
t527 = qJD(1) * t495;
t452 = -t498 * qJD(2) + t494 * t527;
t499 = cos(qJ(2));
t526 = qJD(1) * t499;
t479 = -qJD(3) + t526;
t438 = t452 * t479;
t523 = qJD(1) * qJD(2);
t513 = t499 * t523;
t522 = qJDD(1) * t495;
t458 = t513 + t522;
t514 = t452 * qJD(3) - t494 * qJDD(2) - t498 * t458;
t381 = t438 + t514;
t493 = sin(qJ(4));
t482 = t495 * t523;
t520 = qJDD(1) * t499;
t459 = -t482 + t520;
t449 = -qJDD(3) + t459;
t445 = -qJDD(4) + t449;
t454 = qJD(2) * t494 + t498 * t527;
t497 = cos(qJ(4));
t414 = t497 * t452 + t454 * t493;
t416 = -t452 * t493 + t454 * t497;
t540 = t414 * t416;
t502 = -t445 - t540;
t560 = t493 * t502;
t537 = t452 * t454;
t504 = -t449 - t537;
t559 = t494 * t504;
t558 = t497 * t502;
t557 = t498 * t504;
t471 = -qJD(4) + t479;
t401 = t414 * t471;
t511 = -t498 * qJDD(2) + t494 * t458;
t409 = -qJD(3) * t454 - t511;
t503 = qJD(4) * t414 - t409 * t493 + t497 * t514;
t556 = t401 - t503;
t380 = t514 - t438;
t512 = -t497 * t409 - t493 * t514;
t319 = (qJD(4) + t471) * t416 + t512;
t376 = (qJD(3) + t479) * t454 + t511;
t412 = t414 ^ 2;
t413 = t416 ^ 2;
t555 = t452 ^ 2;
t448 = t454 ^ 2;
t470 = t471 ^ 2;
t477 = t479 ^ 2;
t554 = qJD(2) ^ 2;
t553 = pkin(2) * t495;
t552 = pkin(2) * t499;
t551 = t499 * g(3);
t496 = sin(qJ(1));
t500 = cos(qJ(1));
t468 = t496 * g(1) - t500 * g(2);
t501 = qJD(1) ^ 2;
t442 = qJDD(1) * pkin(1) + t501 * pkin(5) + t468;
t505 = -t459 + t482;
t506 = t458 + t513;
t375 = pkin(2) * t505 - pkin(6) * t506 - t442;
t469 = g(1) * t500 + g(2) * t496;
t443 = -pkin(1) * t501 + qJDD(1) * pkin(5) - t469;
t432 = -g(3) * t495 + t499 * t443;
t508 = -pkin(6) * t495 - t552;
t456 = t508 * qJD(1);
t392 = -t554 * pkin(2) + qJDD(2) * pkin(6) + t456 * t526 + t432;
t346 = -t498 * t375 + t494 * t392;
t302 = t504 * pkin(3) + t381 * pkin(7) - t346;
t347 = t494 * t375 + t498 * t392;
t433 = -pkin(3) * t479 - pkin(7) * t454;
t306 = -pkin(3) * t555 + pkin(7) * t409 + t433 * t479 + t347;
t265 = -t497 * t302 + t306 * t493;
t266 = t493 * t302 + t497 * t306;
t237 = -t265 * t497 + t266 * t493;
t550 = t237 * t494;
t549 = t237 * t498;
t391 = t551 - qJDD(2) * pkin(2) - t554 * pkin(6) + (qJD(1) * t456 + t443) * t495;
t331 = -t409 * pkin(3) - t555 * pkin(7) + t454 * t433 + t391;
t548 = t331 * t493;
t547 = t331 * t497;
t353 = t445 - t540;
t546 = t353 * t493;
t545 = t353 * t497;
t544 = t391 * t494;
t543 = t391 * t498;
t404 = t449 - t537;
t542 = t404 * t494;
t541 = t404 * t498;
t539 = t442 * t495;
t538 = t442 * t499;
t478 = t499 * t501 * t495;
t466 = qJDD(2) + t478;
t536 = t466 * t495;
t467 = qJDD(2) - t478;
t535 = t467 * t495;
t534 = t467 * t499;
t533 = t471 * t493;
t532 = t471 * t497;
t531 = t479 * t494;
t530 = t479 * t498;
t489 = t495 ^ 2;
t529 = t489 * t501;
t490 = t499 ^ 2;
t528 = t489 + t490;
t521 = qJDD(1) * t496;
t519 = qJDD(1) * t500;
t518 = t495 * t540;
t517 = t499 * t540;
t516 = t495 * t537;
t515 = t499 * t537;
t238 = t265 * t493 + t497 * t266;
t431 = t443 * t495 + t551;
t384 = t431 * t495 + t499 * t432;
t424 = -t468 * t496 - t500 * t469;
t510 = t496 * t478;
t509 = t500 * t478;
t463 = -t496 * t501 + t519;
t507 = -pkin(4) * t463 - g(3) * t496;
t296 = -t346 * t498 + t347 * t494;
t297 = t346 * t494 + t347 * t498;
t383 = t431 * t499 - t432 * t495;
t423 = t468 * t500 - t469 * t496;
t487 = t490 * t501;
t476 = -t487 - t554;
t475 = t487 - t554;
t474 = -t529 - t554;
t473 = -t529 + t554;
t465 = t487 - t529;
t464 = t487 + t529;
t462 = t500 * t501 + t521;
t461 = t528 * qJDD(1);
t460 = -0.2e1 * t482 + t520;
t457 = 0.2e1 * t513 + t522;
t451 = t499 * t466;
t450 = t528 * t523;
t440 = -pkin(4) * t462 + g(3) * t500;
t437 = -t448 + t477;
t436 = -t477 + t555;
t435 = t458 * t499 - t489 * t523;
t434 = -t459 * t495 - t490 * t523;
t430 = -t474 * t495 - t534;
t429 = -t473 * t495 + t451;
t428 = t476 * t499 - t536;
t427 = t475 * t499 - t535;
t426 = t474 * t499 - t535;
t425 = t476 * t495 + t451;
t421 = -t448 + t555;
t420 = t461 * t500 - t464 * t496;
t419 = t461 * t496 + t464 * t500;
t418 = -t448 - t477;
t417 = -t457 * t495 + t460 * t499;
t411 = -t477 - t555;
t403 = t448 + t555;
t400 = -t413 + t470;
t399 = t412 - t470;
t398 = t430 * t500 + t457 * t496;
t397 = t428 * t500 - t460 * t496;
t396 = t430 * t496 - t457 * t500;
t395 = t428 * t496 + t460 * t500;
t394 = -pkin(5) * t426 - t538;
t393 = -pkin(5) * t425 - t539;
t390 = (t452 * t498 - t454 * t494) * t479;
t389 = (-t452 * t494 - t454 * t498) * t479;
t387 = -pkin(1) * t426 + t432;
t386 = -pkin(1) * t425 + t431;
t385 = -t413 - t470;
t377 = (-qJD(3) + t479) * t454 - t511;
t372 = t454 * t531 - t498 * t514;
t371 = t454 * t530 + t494 * t514;
t370 = -t409 * t494 - t452 * t530;
t369 = -t409 * t498 + t452 * t531;
t368 = t390 * t499 - t449 * t495;
t367 = -t413 + t412;
t366 = t436 * t498 + t542;
t365 = -t437 * t494 + t557;
t364 = -t436 * t494 + t541;
t363 = -t437 * t498 - t559;
t362 = -t418 * t494 + t541;
t361 = t418 * t498 + t542;
t360 = -t470 - t412;
t359 = t384 * t500 - t442 * t496;
t358 = t384 * t496 + t442 * t500;
t357 = t411 * t498 - t559;
t356 = t411 * t494 + t557;
t352 = (t414 * t497 - t416 * t493) * t471;
t351 = (t414 * t493 + t416 * t497) * t471;
t350 = t372 * t499 + t516;
t349 = t370 * t499 - t516;
t348 = -t412 - t413;
t344 = -qJD(4) * t416 - t512;
t343 = -t376 * t498 - t381 * t494;
t342 = t377 * t498 + t380 * t494;
t341 = -t376 * t494 + t381 * t498;
t340 = -t377 * t494 + t380 * t498;
t339 = -pkin(6) * t361 + t543;
t338 = t366 * t499 - t376 * t495;
t337 = t365 * t499 - t381 * t495;
t336 = t399 * t497 + t546;
t335 = -t400 * t493 + t558;
t334 = t399 * t493 - t545;
t333 = t400 * t497 + t560;
t332 = -pkin(6) * t356 + t544;
t330 = t362 * t499 - t380 * t495;
t329 = t362 * t495 + t380 * t499;
t328 = -t385 * t493 + t545;
t327 = t385 * t497 + t546;
t326 = t357 * t499 - t377 * t495;
t325 = t357 * t495 + t377 * t499;
t324 = t342 * t499 - t421 * t495;
t323 = t401 + t503;
t318 = (qJD(4) - t471) * t416 + t512;
t317 = t416 * t533 - t497 * t503;
t316 = -t416 * t532 - t493 * t503;
t315 = -t344 * t493 - t414 * t532;
t314 = t344 * t497 - t414 * t533;
t313 = t360 * t497 - t560;
t312 = t360 * t493 + t558;
t311 = t343 * t499 - t403 * t495;
t310 = t343 * t495 + t403 * t499;
t309 = -pkin(2) * t361 + t347;
t308 = -t351 * t494 + t352 * t498;
t307 = -t351 * t498 - t352 * t494;
t305 = -pkin(2) * t356 + t346;
t303 = t308 * t499 - t445 * t495;
t299 = t330 * t500 + t361 * t496;
t298 = t330 * t496 - t361 * t500;
t295 = t326 * t500 + t356 * t496;
t294 = t326 * t496 - t356 * t500;
t293 = -t334 * t494 + t336 * t498;
t292 = -t333 * t494 + t335 * t498;
t291 = -t334 * t498 - t336 * t494;
t290 = -t333 * t498 - t335 * t494;
t289 = t297 * t499 + t391 * t495;
t288 = t297 * t495 - t391 * t499;
t287 = -pkin(7) * t327 + t547;
t286 = -t327 * t494 + t328 * t498;
t285 = t327 * t498 + t328 * t494;
t284 = t311 * t500 + t341 * t496;
t283 = t311 * t496 - t341 * t500;
t282 = -pkin(7) * t312 + t548;
t281 = -t319 * t497 - t323 * t493;
t280 = -t318 * t497 - t493 * t556;
t279 = -t319 * t493 + t323 * t497;
t278 = -t318 * t493 + t497 * t556;
t277 = -pkin(1) * t329 - pkin(2) * t380 - pkin(6) * t362 - t544;
t276 = -t316 * t494 + t317 * t498;
t275 = -t314 * t494 + t315 * t498;
t274 = -t316 * t498 - t317 * t494;
t273 = -t314 * t498 - t315 * t494;
t272 = -pkin(1) * t325 - pkin(2) * t377 - pkin(6) * t357 + t543;
t271 = -t312 * t494 + t313 * t498;
t270 = t312 * t498 + t313 * t494;
t269 = -pkin(6) * t341 - t296;
t268 = t276 * t499 + t518;
t267 = t275 * t499 - t518;
t263 = t293 * t499 - t319 * t495;
t262 = t292 * t499 - t323 * t495;
t261 = -pkin(3) * t556 + pkin(7) * t328 + t548;
t260 = t286 * t499 + t495 * t556;
t259 = t286 * t495 - t499 * t556;
t258 = -pkin(5) * t329 - t309 * t495 + t339 * t499;
t257 = -pkin(3) * t318 + pkin(7) * t313 - t547;
t256 = -pkin(5) * t325 - t305 * t495 + t332 * t499;
t255 = t271 * t499 + t318 * t495;
t254 = t271 * t495 - t318 * t499;
t253 = t289 * t500 + t296 * t496;
t252 = t289 * t496 - t296 * t500;
t251 = -pkin(1) * t310 - pkin(2) * t403 - pkin(6) * t343 - t297;
t250 = -pkin(1) * t288 + pkin(2) * t391 - pkin(6) * t297;
t249 = -pkin(5) * t310 + t269 * t499 + t341 * t553;
t248 = -t279 * t494 + t281 * t498;
t247 = -t278 * t494 + t280 * t498;
t246 = t279 * t498 + t281 * t494;
t245 = -t278 * t498 - t280 * t494;
t244 = t247 * t499 - t367 * t495;
t243 = -pkin(5) * t288 + (-pkin(6) * t499 + t553) * t296;
t242 = t260 * t500 + t285 * t496;
t241 = t260 * t496 - t285 * t500;
t240 = t248 * t499 + t348 * t495;
t239 = t248 * t495 - t348 * t499;
t236 = -pkin(2) * t285 - pkin(3) * t327 + t266;
t235 = t255 * t500 + t270 * t496;
t234 = t255 * t496 - t270 * t500;
t233 = -pkin(2) * t270 - pkin(3) * t312 + t265;
t232 = -pkin(3) * t331 + pkin(7) * t238;
t231 = -pkin(2) * t246 - pkin(3) * t279;
t230 = -pkin(6) * t285 - t261 * t494 + t287 * t498;
t229 = -pkin(6) * t270 - t257 * t494 + t282 * t498;
t228 = -pkin(7) * t279 - t237;
t227 = -pkin(3) * t348 + pkin(7) * t281 + t238;
t226 = t240 * t500 + t246 * t496;
t225 = t240 * t496 - t246 * t500;
t224 = -pkin(1) * t259 + pkin(2) * t556 - pkin(6) * t286 - t261 * t498 - t287 * t494;
t223 = t238 * t498 - t550;
t222 = t238 * t494 + t549;
t221 = -pkin(1) * t254 + pkin(2) * t318 - pkin(6) * t271 - t257 * t498 - t282 * t494;
t220 = t223 * t499 + t331 * t495;
t219 = t223 * t495 - t331 * t499;
t218 = -pkin(5) * t259 + t230 * t499 - t236 * t495;
t217 = -pkin(2) * t222 - pkin(3) * t237;
t216 = -pkin(5) * t254 + t229 * t499 - t233 * t495;
t215 = -pkin(6) * t246 - t227 * t494 + t228 * t498;
t214 = -pkin(6) * t222 - pkin(7) * t549 - t232 * t494;
t213 = t220 * t500 + t222 * t496;
t212 = t220 * t496 - t222 * t500;
t211 = -pkin(1) * t239 + pkin(2) * t348 - pkin(6) * t248 - t227 * t498 - t228 * t494;
t210 = -pkin(5) * t239 + t215 * t499 - t231 * t495;
t209 = -pkin(1) * t219 + pkin(2) * t331 - pkin(6) * t223 + pkin(7) * t550 - t232 * t498;
t208 = -pkin(5) * t219 + t214 * t499 - t217 * t495;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t462, -t463, 0, t424, 0, 0, 0, 0, 0, 0, t397, t398, t420, t359, 0, 0, 0, 0, 0, 0, t295, t299, t284, t253, 0, 0, 0, 0, 0, 0, t235, t242, t226, t213; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t463, -t462, 0, t423, 0, 0, 0, 0, 0, 0, t395, t396, t419, t358, 0, 0, 0, 0, 0, 0, t294, t298, t283, t252, 0, 0, 0, 0, 0, 0, t234, t241, t225, t212; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t425, t426, 0, -t383, 0, 0, 0, 0, 0, 0, t325, t329, t310, t288, 0, 0, 0, 0, 0, 0, t254, t259, t239, t219; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t463, 0, -t462, 0, t507, -t440, -t423, -pkin(4) * t423, t435 * t500 - t510, t417 * t500 - t465 * t496, t429 * t500 + t495 * t521, t434 * t500 + t510, t427 * t500 + t496 * t520, qJDD(2) * t496 + t450 * t500, -pkin(4) * t395 - t386 * t496 + t393 * t500, -pkin(4) * t396 - t387 * t496 + t394 * t500, -pkin(4) * t419 + t383 * t500, -pkin(4) * t358 - (pkin(1) * t496 - pkin(5) * t500) * t383, t350 * t500 - t371 * t496, t324 * t500 - t340 * t496, t337 * t500 - t363 * t496, t349 * t500 - t369 * t496, t338 * t500 - t364 * t496, t368 * t500 - t389 * t496, -pkin(4) * t294 + t256 * t500 - t272 * t496, -pkin(4) * t298 + t258 * t500 - t277 * t496, -pkin(4) * t283 + t249 * t500 - t251 * t496, -pkin(4) * t252 + t243 * t500 - t250 * t496, t268 * t500 - t274 * t496, t244 * t500 - t245 * t496, t262 * t500 - t290 * t496, t267 * t500 - t273 * t496, t263 * t500 - t291 * t496, t303 * t500 - t307 * t496, -pkin(4) * t234 + t216 * t500 - t221 * t496, -pkin(4) * t241 + t218 * t500 - t224 * t496, -pkin(4) * t225 + t210 * t500 - t211 * t496, -pkin(4) * t212 + t208 * t500 - t209 * t496; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t462, 0, t463, 0, t440, t507, t424, pkin(4) * t424, t435 * t496 + t509, t417 * t496 + t465 * t500, t429 * t496 - t495 * t519, t434 * t496 - t509, t427 * t496 - t499 * t519, -qJDD(2) * t500 + t450 * t496, pkin(4) * t397 + t386 * t500 + t393 * t496, pkin(4) * t398 + t387 * t500 + t394 * t496, pkin(4) * t420 + t383 * t496, pkin(4) * t359 - (-pkin(1) * t500 - pkin(5) * t496) * t383, t350 * t496 + t371 * t500, t324 * t496 + t340 * t500, t337 * t496 + t363 * t500, t349 * t496 + t369 * t500, t338 * t496 + t364 * t500, t368 * t496 + t389 * t500, pkin(4) * t295 + t256 * t496 + t272 * t500, pkin(4) * t299 + t258 * t496 + t277 * t500, pkin(4) * t284 + t249 * t496 + t251 * t500, pkin(4) * t253 + t243 * t496 + t250 * t500, t268 * t496 + t274 * t500, t244 * t496 + t245 * t500, t262 * t496 + t290 * t500, t267 * t496 + t273 * t500, t263 * t496 + t291 * t500, t303 * t496 + t307 * t500, pkin(4) * t235 + t216 * t496 + t221 * t500, pkin(4) * t242 + t218 * t496 + t224 * t500, pkin(4) * t226 + t210 * t496 + t211 * t500, pkin(4) * t213 + t208 * t496 + t209 * t500; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t468, t469, 0, 0, t506 * t495, t457 * t499 + t460 * t495, t473 * t499 + t536, -t505 * t499, t475 * t495 + t534, 0, pkin(1) * t460 + pkin(5) * t428 + t538, -pkin(1) * t457 + pkin(5) * t430 - t539, pkin(1) * t464 + pkin(5) * t461 + t384, pkin(1) * t442 + pkin(5) * t384, t372 * t495 - t515, t342 * t495 + t421 * t499, t365 * t495 + t381 * t499, t370 * t495 + t515, t366 * t495 + t376 * t499, t390 * t495 + t449 * t499, -pkin(1) * t356 + pkin(5) * t326 + t305 * t499 + t332 * t495, -pkin(1) * t361 + pkin(5) * t330 + t309 * t499 + t339 * t495, pkin(5) * t311 + t495 * t269 + (-pkin(1) - t552) * t341, pkin(5) * t289 + (-pkin(1) + t508) * t296, t276 * t495 - t517, t247 * t495 + t367 * t499, t292 * t495 + t323 * t499, t275 * t495 + t517, t293 * t495 + t319 * t499, t308 * t495 + t445 * t499, -pkin(1) * t270 + pkin(5) * t255 + t229 * t495 + t233 * t499, -pkin(1) * t285 + pkin(5) * t260 + t230 * t495 + t236 * t499, -pkin(1) * t246 + pkin(5) * t240 + t215 * t495 + t231 * t499, -pkin(1) * t222 + pkin(5) * t220 + t214 * t495 + t217 * t499;];
tauB_reg = t1;
