% Calculate inertial parameters regressor of coriolis matrix for
% S4RRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d3,d4]';
% 
% Output:
% cmat_reg [(4*4)x(4*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:28
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S4RRRR5_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRRR5_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRRR5_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [4x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RRRR5_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:28:16
% EndTime: 2019-12-31 17:28:26
% DurationCPUTime: 5.18s
% Computational Cost: add. (5200->352), mult. (11355->527), div. (0->0), fcn. (10932->6), ass. (0->273)
t272 = cos(qJ(3));
t440 = -pkin(7) - pkin(6);
t238 = t440 * t272;
t269 = sin(qJ(4));
t270 = sin(qJ(3));
t383 = t269 * t270;
t428 = cos(qJ(4));
t179 = -t428 * t238 + t440 * t383;
t439 = -t179 / 0.2e1;
t332 = t428 * t270;
t318 = -t269 * t238 - t440 * t332;
t453 = -t318 / 0.2e1;
t346 = qJD(3) + qJD(4);
t271 = sin(qJ(2));
t331 = t428 * t272;
t380 = t270 * t271;
t206 = -t269 * t380 + t271 * t331;
t427 = pkin(3) * t270;
t337 = pkin(5) + t427;
t231 = t337 * t271;
t273 = cos(qJ(2));
t382 = t269 * t272;
t226 = t332 + t382;
t435 = -t226 / 0.2e1;
t264 = -pkin(3) * t272 - pkin(2);
t454 = -t264 / 0.2e1;
t459 = t206 * t454 + t231 * t435 + t273 * t439;
t203 = t226 * t271;
t222 = -t331 + t383;
t436 = -t222 / 0.2e1;
t455 = t203 * t454 + t231 * t436 + t273 * t453;
t422 = t273 * pkin(2);
t281 = (t440 * t271 - pkin(1) - t422) * t272;
t425 = t270 * pkin(5);
t275 = (-pkin(3) - t425) * t273 + t281;
t134 = t428 * t275;
t306 = -t271 * pkin(6) - t422;
t299 = -pkin(1) + t306;
t376 = t272 * t273;
t342 = pkin(5) * t376;
t195 = t270 * t299 + t342;
t164 = -pkin(7) * t380 + t195;
t385 = t269 * t164;
t81 = -t134 + t385;
t379 = t270 * t273;
t344 = pkin(5) * t379;
t163 = t281 - t344;
t335 = t428 * t163;
t93 = t335 - t385;
t458 = t81 + t93;
t274 = t269 * t275;
t334 = t428 * t164;
t82 = t334 + t274;
t386 = t269 * t163;
t92 = -t334 - t386;
t457 = t82 + t92;
t437 = -t203 / 0.2e1;
t90 = t206 * t436 + t226 * t437;
t456 = t346 * t90;
t420 = t273 * pkin(6);
t424 = t271 * pkin(2);
t239 = -t420 + t424;
t228 = t270 * t239;
t378 = t271 * t272;
t343 = pkin(5) * t378;
t199 = t228 - t343;
t167 = -pkin(7) * t379 + t199;
t333 = t428 * t167;
t308 = -t333 / 0.2e1;
t230 = t272 * t239;
t257 = pkin(5) * t380;
t198 = t257 + t230;
t423 = t271 * pkin(3);
t153 = -pkin(7) * t376 + t198 + t423;
t387 = t269 * t153;
t286 = -t387 / 0.2e1 + t308;
t26 = t286 - t455;
t336 = t428 * t153;
t384 = t269 * t167;
t285 = -t384 / 0.2e1 + t336 / 0.2e1;
t25 = t285 + t459;
t28 = t285 - t459;
t363 = qJD(2) * t226;
t450 = -qJD(1) * t90 + t222 * t363;
t365 = qJD(1) * t206;
t449 = qJD(2) * t90 - t203 * t365;
t448 = t346 * t318;
t447 = t346 * t179;
t446 = t82 / 0.2e1;
t316 = t346 * t226;
t445 = t222 * t316;
t265 = t270 ^ 2;
t267 = t272 ^ 2;
t250 = t267 - t265;
t349 = t271 * qJD(1);
t329 = t272 * t349;
t441 = qJD(2) * t250 - 0.2e1 * t270 * t329;
t438 = t318 / 0.2e1;
t241 = t269 * t379;
t434 = -t241 / 0.2e1;
t433 = -t269 / 0.2e1;
t432 = t269 / 0.2e1;
t431 = -t270 / 0.2e1;
t430 = -t272 / 0.2e1;
t429 = t273 / 0.2e1;
t426 = t269 * pkin(3);
t421 = t273 * pkin(3);
t419 = -qJD(3) / 0.2e1;
t52 = t203 * t222 - t226 * t206;
t418 = t346 * t52;
t415 = pkin(3) * qJD(3);
t159 = t231 * t206;
t345 = pkin(3) * t378;
t37 = -t203 * t345 + t273 * t92 - t159;
t410 = qJD(1) * t37;
t392 = t231 * t203;
t38 = t206 * t345 + t273 * t93 - t392;
t409 = qJD(1) * t38;
t48 = -t273 * t81 - t392;
t408 = qJD(1) * t48;
t49 = -t273 * t82 - t159;
t407 = qJD(1) * t49;
t205 = t226 * t273;
t207 = t273 * t331 - t241;
t87 = t336 - t384;
t88 = t333 + t387;
t10 = -t203 * t88 - t205 * t82 - t206 * t87 + t207 * t81;
t406 = t10 * qJD(1);
t11 = -t458 * t203 - t457 * t206;
t405 = t11 * qJD(1);
t232 = t337 * t273;
t12 = t231 * t232 - t81 * t87 + t82 * t88;
t404 = t12 * qJD(1);
t13 = t231 * t345 - t81 * t92 + t82 * t93;
t403 = t13 * qJD(1);
t15 = -t232 * t203 - t231 * t205 + t81 * t271 + t273 * t87;
t402 = t15 * qJD(1);
t16 = t232 * t206 + t231 * t207 - t82 * t271 + t273 * t88;
t401 = t16 * qJD(1);
t290 = t272 * t299;
t194 = -t290 + t344;
t394 = t194 * t273;
t393 = t195 * t273;
t381 = t270 * t203;
t266 = t271 ^ 2;
t377 = t272 * t266;
t321 = t378 / 0.2e1;
t33 = (t421 + t344 / 0.2e1 - t290 / 0.2e1 + pkin(7) * t321 + t163 / 0.2e1) * t269;
t375 = t33 * qJD(1);
t341 = t428 / 0.2e1;
t312 = pkin(3) * t341;
t291 = -t134 / 0.2e1 + t273 * t312;
t35 = t335 / 0.2e1 + t291;
t374 = t35 * qJD(1);
t40 = (t198 * t271 - t394) * t272 + (t199 * t271 + t393) * t270;
t373 = t40 * qJD(1);
t63 = pkin(5) ^ 2 * t271 * t273 - t194 * t198 + t195 * t199;
t372 = t63 * qJD(1);
t73 = -t203 * t207 - t205 * t206;
t371 = t73 * qJD(1);
t97 = t194 * t271 + (t198 - 0.2e1 * t257) * t273;
t370 = t97 * qJD(1);
t98 = t199 * t273 + (-t195 + 0.2e1 * t342) * t271;
t369 = t98 * qJD(1);
t268 = t273 ^ 2;
t251 = t268 - t266;
t147 = -t266 * t425 - t394;
t368 = qJD(1) * t147;
t148 = -pkin(5) * t377 - t393;
t367 = qJD(1) * t148;
t366 = qJD(1) * t203;
t364 = qJD(1) * t273;
t362 = qJD(2) * t264;
t361 = qJD(2) * t270;
t360 = qJD(2) * t272;
t359 = qJD(3) * t270;
t358 = qJD(3) * t272;
t357 = qJD(3) * t273;
t356 = qJD(4) * t264;
t113 = t203 * t271 - t205 * t273;
t355 = t113 * qJD(1);
t114 = -t206 * t271 + t207 * t273;
t354 = t114 * qJD(1);
t284 = -t382 / 0.2e1 - t332 / 0.2e1;
t125 = (t435 + t284) * t273;
t118 = t125 * qJD(1);
t307 = t331 / 0.2e1;
t126 = t434 + (t307 + t436) * t273;
t119 = t126 * qJD(1);
t213 = (t265 / 0.2e1 - t267 / 0.2e1) * t271;
t353 = t213 * qJD(3);
t225 = t251 * t270;
t352 = t225 * qJD(1);
t227 = t268 * t272 - t377;
t351 = t227 * qJD(1);
t350 = t251 * qJD(1);
t348 = t271 * qJD(2);
t347 = t273 * qJD(2);
t340 = pkin(1) * t349;
t339 = pkin(1) * t364;
t338 = t427 / 0.2e1;
t327 = t270 * t360;
t326 = t272 * t348;
t325 = t270 * t357;
t324 = t272 * t357;
t323 = t270 * t358;
t322 = t271 * t347;
t254 = t273 * t349;
t320 = t428 * qJD(3);
t319 = t428 * qJD(4);
t315 = t346 * t273;
t314 = pkin(3) * t321;
t313 = -qJD(3) + t364;
t311 = t270 * t326;
t310 = t266 * t323;
t280 = (t205 * t433 - t428 * t207 / 0.2e1) * pkin(3);
t1 = (t446 + t92 / 0.2e1) * t226 + (t93 / 0.2e1 + t81 / 0.2e1) * t222 + (t179 / 0.2e1 + t439) * t206 + (t453 + t438) * t203 + t280;
t305 = t1 * qJD(1);
t278 = t318 * t446 + t92 * t438 + t458 * t439;
t289 = t87 * t341 + t88 * t432;
t3 = (t231 * t431 + t378 * t454 + t289) * pkin(3) + t278;
t39 = t264 * t427;
t304 = -t3 * qJD(1) + t39 * qJD(2);
t303 = -qJD(4) + t313;
t99 = t203 ^ 2 - t206 ^ 2;
t23 = qJD(1) * t99 + qJD(2) * t52;
t302 = -t198 * t270 + t199 * t272;
t115 = t222 ^ 2 - t226 ^ 2;
t31 = qJD(1) * t52 + qJD(2) * t115;
t121 = t222 * t427 + t226 * t264;
t18 = (-t381 / 0.2e1 + (t222 * t430 + t341) * t271) * pkin(3) + t25;
t301 = qJD(1) * t18 - qJD(2) * t121;
t122 = -t222 * t264 + t226 * t427;
t17 = (t206 * t431 + (t226 * t430 + t433) * t271) * pkin(3) + t26;
t300 = qJD(1) * t17 - qJD(2) * t122;
t298 = t313 * t271;
t297 = t420 / 0.2e1 - t424 / 0.2e1;
t288 = t297 * t270;
t161 = t228 / 0.2e1 - t288;
t296 = pkin(2) * t360 - qJD(1) * t161;
t287 = t297 * t272;
t162 = -t230 / 0.2e1 + t287;
t295 = pkin(2) * t361 - qJD(1) * t162;
t294 = qJD(1) * t26 + t222 * t362;
t293 = qJD(1) * t25 - t226 * t362;
t292 = t272 * t298;
t184 = -qJD(1) * t213 + t327;
t168 = qJD(1) * t270 * t377 + qJD(2) * t213;
t224 = t250 * t266;
t283 = qJD(1) * t224 + 0.2e1 * t311;
t261 = -t349 / 0.2e1;
t260 = t349 / 0.2e1;
t259 = t348 / 0.2e1;
t221 = t271 * t419 + t254;
t200 = t254 + (t419 - qJD(4) / 0.2e1) * t271;
t130 = t257 + t230 / 0.2e1 + t287;
t129 = t343 - t228 / 0.2e1 - t288;
t128 = t226 * t429 + t284 * t273;
t127 = t222 * t429 + t273 * t307 + t434;
t96 = t125 * qJD(2) - t206 * t364;
t95 = t126 * qJD(2) - t203 * t364;
t80 = -t316 - t118;
t79 = -t346 * t222 - t119;
t47 = t128 * qJD(2) + t303 * t206;
t46 = t127 * qJD(2) + t303 * t203;
t36 = t385 - t335 / 0.2e1 + t291;
t34 = t421 * t432 - t334 - t274 / 0.2e1 - t386 / 0.2e1;
t27 = t286 + t455;
t20 = t206 * t338 + t226 * t314 + t308 + (-t423 / 0.2e1 - t153 / 0.2e1) * t269 + t455;
t19 = pkin(3) * t381 / 0.2e1 + t222 * t314 + t271 * t312 + t28;
t4 = t289 * pkin(3) + t231 * t338 + t264 * t314 - t278;
t2 = t203 * t453 - t318 * t437 + t457 * t435 + t458 * t436 + t280;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t322, t251 * qJD(2), 0, -t322, 0, 0, -pkin(1) * t348, -pkin(1) * t347, 0, 0, t267 * t322 - t310, -t224 * qJD(3) - 0.2e1 * t273 * t311, -t227 * qJD(2) + t271 * t325, t265 * t322 + t310, t225 * qJD(2) + t271 * t324, -t322, -qJD(2) * t97 - qJD(3) * t148, qJD(2) * t98 + qJD(3) * t147, -qJD(2) * t40, qJD(2) * t63, (qJD(2) * t207 - t203 * t346) * t206, t73 * qJD(2) + t346 * t99, -t114 * qJD(2) + t203 * t315, (qJD(2) * t205 + t206 * t346) * t203, -t113 * qJD(2) + t206 * t315, -t322, -qJD(2) * t15 - qJD(3) * t37 - qJD(4) * t49, qJD(2) * t16 + qJD(3) * t38 + qJD(4) * t48, qJD(2) * t10 + qJD(3) * t11, qJD(2) * t12 + qJD(3) * t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t254, t350, t347, -t254, -t348, 0, -pkin(5) * t347 - t340, pkin(5) * t348 - t339, 0, 0, -t353 + (t267 * t349 + t327) * t273, -0.2e1 * t271 * t323 + t441 * t273, t270 * t348 - t351, t353 + (t265 * t349 - t327) * t273, t326 + t352, -t221, -t370 + (t270 * t306 - t342) * qJD(2) + t130 * qJD(3), t369 + (t272 * t306 + t344) * qJD(2) + t129 * qJD(3), qJD(2) * t302 - t373, t372 + (-pkin(5) * t422 + pkin(6) * t302) * qJD(2), (t363 + t365) * t207 + t456, t371 + (-t205 * t226 - t207 * t222) * qJD(2) + t418, t127 * t346 + t226 * t348 - t354, (qJD(2) * t222 + t366) * t205 - t456, t128 * t346 - t222 * t348 - t355, -t200, -t402 + (t205 * t264 + t222 * t232 - t271 * t318) * qJD(2) + t19 * qJD(3) + t28 * qJD(4), t401 + (-t179 * t271 + t207 * t264 + t226 * t232) * qJD(2) + t20 * qJD(3) + t27 * qJD(4), t406 + (-t179 * t205 + t207 * t318 - t222 * t88 - t226 * t87) * qJD(2) + t2 * qJD(3), t404 + (t179 * t88 + t232 * t264 - t318 * t87) * qJD(2) + t4 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t168, -t283, t270 * t298, t168, t292, t259, qJD(2) * t130 - qJD(3) * t195 - t367, qJD(2) * t129 + qJD(3) * t194 + t368, 0, 0, t449, t23, t46, -t449, t47, t259, qJD(2) * t19 + qJD(3) * t92 + qJD(4) * t34 - t410, qJD(2) * t20 - qJD(3) * t93 + qJD(4) * t36 + t409, t405 + t2 * qJD(2) + (t203 * t428 - t206 * t269) * t415, t403 + t4 * qJD(2) + (t269 * t93 + t428 * t92) * t415; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t449, t23, t46, -t449, t47, t259, qJD(2) * t28 + qJD(3) * t34 - qJD(4) * t82 - t407, qJD(2) * t27 + qJD(3) * t36 + qJD(4) * t81 + t408, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t254, -t350, 0, t254, 0, 0, t340, t339, 0, 0, -t254 * t267 - t353, 0.2e1 * t270 * t292, -t324 + t351, -t254 * t265 + t353, t325 - t352, t221, qJD(3) * t162 + t370, qJD(3) * t161 - t369, t373, -t372, -t207 * t365 + t456, -t371 + t418, -t126 * t346 + t354, -t205 * t366 - t456, -t125 * t346 + t355, t200, -qJD(3) * t18 - qJD(4) * t25 + t402, -qJD(3) * t17 - qJD(4) * t26 - t401, -qJD(3) * t1 - t406, -qJD(3) * t3 - t404; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t323, t250 * qJD(3), 0, -t323, 0, 0, -pkin(2) * t359, -pkin(2) * t358, 0, 0, -t445, t346 * t115, 0, t445, 0, 0, qJD(3) * t121 + t226 * t356, qJD(3) * t122 - t222 * t356, 0, qJD(3) * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t184, t441, -t313 * t272, -t184, t313 * t270, t261, -pkin(6) * t358 - t295, pkin(6) * t359 - t296, 0, 0, -t450, t31, t79, t450, t80, t261, -t301 - t447, -t300 + t448, (t222 * t428 - t226 * t269) * t415 - t305, (-t179 * t428 - t269 * t318) * t415 + t304; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t450, t31, t79, t450, t80, t261, -t293 - t447, -t294 + t448, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t168, t283, (-t270 * t349 + t360) * t273, -t168, (-t329 - t361) * t273, t259, -qJD(2) * t162 + t367, -qJD(2) * t161 - t368, 0, 0, -t449, -t23, t95, t449, t96, t259, qJD(2) * t18 + qJD(4) * t33 + t410, qJD(2) * t17 + qJD(4) * t35 - t409, qJD(2) * t1 - t405, qJD(2) * t3 - t403; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t184, -t441, t272 * t364, t184, -t270 * t364, t260, t295, t296, 0, 0, t450, -t31, t119, -t450, t118, t260, t301, t300, t305, -t304; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(4) * t426, -pkin(3) * t319, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t346 * t426 + t375, t374 + (-t320 - t319) * pkin(3), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t449, -t23, t95, t449, t96, t259, qJD(2) * t25 - qJD(3) * t33 + t407, qJD(2) * t26 - qJD(3) * t35 - t408, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t450, -t31, t119, -t450, t118, t260, t293, t294, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t269 * t415 - t375, pkin(3) * t320 - t374, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t5;
