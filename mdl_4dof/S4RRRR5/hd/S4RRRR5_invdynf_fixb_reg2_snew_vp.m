% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S4RRRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d1,d2,d3,d4]';
%
% Output:
% f_new_reg [(3*5)x(5*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:28
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S4RRRR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4RRRR5_invdynf_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4RRRR5_invdynf_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4RRRR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4RRRR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S4RRRR5_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:28:33
% EndTime: 2019-12-31 17:28:34
% DurationCPUTime: 1.41s
% Computational Cost: add. (6464->181), mult. (13114->241), div. (0->0), fcn. (8931->8), ass. (0->141)
t1055 = cos(qJ(2));
t1070 = t1055 * qJD(1);
t1037 = -qJD(3) + t1070;
t1032 = -qJD(4) + t1037;
t1083 = qJD(4) - t1032;
t1082 = qJD(2) ^ 2;
t1050 = sin(qJ(3));
t1054 = cos(qJ(3));
t1051 = sin(qJ(2));
t1074 = qJD(1) * t1051;
t1017 = -t1054 * qJD(2) + t1050 * t1074;
t1019 = t1050 * qJD(2) + t1054 * t1074;
t1049 = sin(qJ(4));
t1053 = cos(qJ(4));
t1000 = t1053 * t1017 + t1049 * t1019;
t1081 = t1000 ^ 2;
t1002 = -t1049 * t1017 + t1053 * t1019;
t1080 = t1002 ^ 2;
t1079 = t1017 ^ 2;
t1078 = t1019 ^ 2;
t1077 = t1032 ^ 2;
t1076 = t1037 ^ 2;
t1075 = t1055 * g(3);
t1052 = sin(qJ(1));
t1056 = cos(qJ(1));
t1030 = t1052 * g(1) - t1056 * g(2);
t1057 = qJD(1) ^ 2;
t1014 = qJDD(1) * pkin(1) + t1057 * pkin(5) + t1030;
t1065 = qJD(2) * t1070;
t1066 = t1051 * qJDD(1);
t1022 = t1065 + t1066;
t1040 = qJD(2) * t1074;
t1042 = t1055 * qJDD(1);
t1023 = t1042 - 0.2e1 * t1040;
t981 = (-t1022 - t1065) * pkin(6) - t1023 * pkin(2) - t1014;
t1031 = -t1056 * g(1) - t1052 * g(2);
t1015 = -t1057 * pkin(1) + qJDD(1) * pkin(5) + t1031;
t1009 = -t1051 * g(3) + t1055 * t1015;
t1020 = (-pkin(2) * t1055 - pkin(6) * t1051) * qJD(1);
t991 = -t1082 * pkin(2) + qJDD(2) * pkin(6) + t1020 * t1070 + t1009;
t970 = t1050 * t981 + t1054 * t991;
t1073 = t1002 * t1000;
t1072 = t1017 * t1037;
t1071 = t1019 * t1017;
t1069 = qJD(3) + t1037;
t1068 = qJD(4) + t1032;
t1045 = t1051 ^ 2;
t1046 = t1055 ^ 2;
t1067 = t1045 + t1046;
t1064 = t1042 - qJDD(3) - t1040;
t1062 = -t1054 * qJDD(2) + t1050 * t1022;
t1059 = t1019 * qJD(3) + t1062;
t1060 = -t1050 * qJDD(2) - t1054 * t1022;
t998 = -t1017 * qJD(3) - t1060;
t1063 = -t1049 * t998 - t1053 * t1059;
t969 = -t1050 * t991 + t1054 * t981;
t1061 = -qJDD(4) + t1064;
t995 = -t1064 - t1071;
t990 = t1075 - qJDD(2) * pkin(2) - t1082 * pkin(6) + (qJD(1) * t1020 + t1015) * t1051;
t1058 = t1049 * t1059 - t1053 * t998;
t1036 = t1055 * t1057 * t1051;
t1035 = -t1046 * t1057 - t1082;
t1034 = -t1045 * t1057 - t1082;
t1029 = -qJDD(2) + t1036;
t1028 = qJDD(2) + t1036;
t1027 = t1067 * t1057;
t1026 = -t1052 * qJDD(1) - t1056 * t1057;
t1025 = t1056 * qJDD(1) - t1052 * t1057;
t1024 = t1067 * qJDD(1);
t1021 = 0.2e1 * t1065 + t1066;
t1010 = -t1037 * pkin(3) - t1019 * pkin(7);
t1008 = -t1051 * t1015 - t1075;
t1007 = t1055 * t1029 - t1051 * t1034;
t1006 = -t1051 * t1028 + t1055 * t1035;
t1005 = t1051 * t1029 + t1055 * t1034;
t1004 = t1055 * t1028 + t1051 * t1035;
t1003 = -t1076 - t1078;
t999 = -t1076 - t1079;
t994 = t1064 - t1071;
t993 = -t1078 - t1079;
t988 = -t1077 - t1080;
t987 = -t1051 * t1008 + t1055 * t1009;
t986 = t1055 * t1008 + t1051 * t1009;
t985 = t1069 * t1017 + t1060;
t984 = t998 + t1072;
t983 = -t1069 * t1019 - t1062;
t982 = (qJD(3) - t1037) * t1019 + t1062;
t978 = -t1050 * t1003 + t1054 * t994;
t977 = t1054 * t1003 + t1050 * t994;
t976 = -t1077 - t1081;
t975 = -t1050 * t995 + t1054 * t999;
t974 = t1050 * t999 + t1054 * t995;
t973 = -t1061 - t1073;
t972 = t1061 - t1073;
t971 = -t1080 - t1081;
t968 = -t1050 * t985 + t1054 * t983;
t967 = t1050 * t983 + t1054 * t985;
t966 = t1059 * pkin(3) - t1079 * pkin(7) + t1019 * t1010 + t990;
t965 = t1051 * t984 + t1055 * t978;
t964 = t1051 * t978 - t1055 * t984;
t963 = -t1049 * t988 + t1053 * t972;
t962 = t1049 * t972 + t1053 * t988;
t961 = t1051 * t982 + t1055 * t975;
t960 = t1051 * t975 - t1055 * t982;
t959 = t1068 * t1000 + t1058;
t958 = -t1083 * t1000 - t1058;
t957 = -t1068 * t1002 + t1063;
t956 = t1083 * t1002 - t1063;
t955 = -t1049 * t973 + t1053 * t976;
t954 = t1049 * t976 + t1053 * t973;
t953 = t1051 * t993 + t1055 * t968;
t952 = t1051 * t968 - t1055 * t993;
t951 = -t1079 * pkin(3) - t1059 * pkin(7) + t1037 * t1010 + t970;
t950 = (-t998 + t1072) * pkin(7) + t995 * pkin(3) + t969;
t949 = -t1050 * t969 + t1054 * t970;
t948 = t1050 * t970 + t1054 * t969;
t947 = t1051 * t990 + t1055 * t949;
t946 = t1051 * t949 - t1055 * t990;
t945 = -t1050 * t962 + t1054 * t963;
t944 = t1050 * t963 + t1054 * t962;
t943 = -t1049 * t959 + t1053 * t957;
t942 = t1049 * t957 + t1053 * t959;
t941 = -t1050 * t954 + t1054 * t955;
t940 = t1050 * t955 + t1054 * t954;
t939 = t1049 * t950 + t1053 * t951;
t938 = -t1049 * t951 + t1053 * t950;
t937 = t1051 * t958 + t1055 * t945;
t936 = t1051 * t945 - t1055 * t958;
t935 = t1051 * t956 + t1055 * t941;
t934 = t1051 * t941 - t1055 * t956;
t933 = -t1050 * t942 + t1054 * t943;
t932 = t1050 * t943 + t1054 * t942;
t931 = t1051 * t971 + t1055 * t933;
t930 = t1051 * t933 - t1055 * t971;
t929 = -t1049 * t938 + t1053 * t939;
t928 = t1049 * t939 + t1053 * t938;
t927 = -t1050 * t928 + t1054 * t929;
t926 = t1050 * t929 + t1054 * t928;
t925 = t1051 * t966 + t1055 * t927;
t924 = t1051 * t927 - t1055 * t966;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1026, -t1025, 0, -t1052 * t1030 + t1056 * t1031, 0, 0, 0, 0, 0, 0, t1056 * t1006 - t1052 * t1023, t1056 * t1007 + t1052 * t1021, t1056 * t1024 - t1052 * t1027, -t1052 * t1014 + t1056 * t987, 0, 0, 0, 0, 0, 0, t1052 * t974 + t1056 * t961, t1052 * t977 + t1056 * t965, t1052 * t967 + t1056 * t953, t1052 * t948 + t1056 * t947, 0, 0, 0, 0, 0, 0, t1052 * t940 + t1056 * t935, t1052 * t944 + t1056 * t937, t1052 * t932 + t1056 * t931, t1052 * t926 + t1056 * t925; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1025, t1026, 0, t1056 * t1030 + t1052 * t1031, 0, 0, 0, 0, 0, 0, t1052 * t1006 + t1056 * t1023, t1052 * t1007 - t1056 * t1021, t1052 * t1024 + t1056 * t1027, t1056 * t1014 + t1052 * t987, 0, 0, 0, 0, 0, 0, t1052 * t961 - t1056 * t974, t1052 * t965 - t1056 * t977, t1052 * t953 - t1056 * t967, t1052 * t947 - t1056 * t948, 0, 0, 0, 0, 0, 0, t1052 * t935 - t1056 * t940, t1052 * t937 - t1056 * t944, t1052 * t931 - t1056 * t932, t1052 * t925 - t1056 * t926; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1004, t1005, 0, t986, 0, 0, 0, 0, 0, 0, t960, t964, t952, t946, 0, 0, 0, 0, 0, 0, t934, t936, t930, t924; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1057, -qJDD(1), 0, t1031, 0, 0, 0, 0, 0, 0, t1006, t1007, t1024, t987, 0, 0, 0, 0, 0, 0, t961, t965, t953, t947, 0, 0, 0, 0, 0, 0, t935, t937, t931, t925; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1057, 0, t1030, 0, 0, 0, 0, 0, 0, t1023, -t1021, t1027, t1014, 0, 0, 0, 0, 0, 0, -t974, -t977, -t967, -t948, 0, 0, 0, 0, 0, 0, -t940, -t944, -t932, -t926; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1004, t1005, 0, t986, 0, 0, 0, 0, 0, 0, t960, t964, t952, t946, 0, 0, 0, 0, 0, 0, t934, t936, t930, t924; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1035, t1029, t1042, t1009, 0, 0, 0, 0, 0, 0, t975, t978, t968, t949, 0, 0, 0, 0, 0, 0, t941, t945, t933, t927; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1028, t1034, -t1066, t1008, 0, 0, 0, 0, 0, 0, -t982, -t984, -t993, -t990, 0, 0, 0, 0, 0, 0, -t956, -t958, -t971, -t966; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1023, t1021, -t1027, -t1014, 0, 0, 0, 0, 0, 0, t974, t977, t967, t948, 0, 0, 0, 0, 0, 0, t940, t944, t932, t926; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t999, t994, t983, t970, 0, 0, 0, 0, 0, 0, t955, t963, t943, t929; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t995, t1003, t985, t969, 0, 0, 0, 0, 0, 0, t954, t962, t942, t928; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t982, t984, t993, t990, 0, 0, 0, 0, 0, 0, t956, t958, t971, t966; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t976, t972, t957, t939; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t973, t988, t959, t938; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t956, t958, t971, t966;];
f_new_reg = t1;
