% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S4PPRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [4x1]
%   Generalized joint coordinates (joint angles)
% qJD [4x1]
%   Generalized joint velocities
% qJDD [4x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d3,d4,theta1]';
%
% Output:
% m_new_reg [(3*5)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 16:19
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S4PPRR5_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(4,1),zeros(4,1),zeros(4,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [4 1]), ...
  'S4PPRR5_invdynm_fixb_reg2_snew_vp: qJ has to be [4x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [4 1]), ...
  'S4PPRR5_invdynm_fixb_reg2_snew_vp: qJD has to be [4x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [4 1]), ...
  'S4PPRR5_invdynm_fixb_reg2_snew_vp: qJDD has to be [4x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S4PPRR5_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S4PPRR5_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 16:19:55
% EndTime: 2019-12-31 16:19:57
% DurationCPUTime: 1.78s
% Computational Cost: add. (3045->243), mult. (5574->288), div. (0->0), fcn. (3655->6), ass. (0->157)
t328 = sin(pkin(6));
t329 = cos(pkin(6));
t303 = t328 * g(1) - t329 * g(2);
t297 = -qJDD(2) + t303;
t326 = g(3) - qJDD(1);
t332 = sin(qJ(3));
t334 = cos(qJ(3));
t371 = t332 * t297 + t334 * t326;
t387 = qJD(3) ^ 2;
t259 = -t387 * pkin(3) + qJDD(3) * pkin(5) - t371;
t304 = t329 * g(1) + t328 * g(2);
t331 = sin(qJ(4));
t333 = cos(qJ(4));
t235 = t331 * t259 + t333 * t304;
t236 = t333 * t259 - t331 * t304;
t217 = t333 * t235 - t331 * t236;
t390 = (pkin(3) * t334 + pkin(5) * t332 + pkin(2)) * t217;
t218 = t331 * t235 + t333 * t236;
t289 = t334 * t304;
t366 = t332 * qJDD(3);
t299 = t334 * t387 + t366;
t386 = pkin(1) + pkin(4);
t389 = t386 * t299 - t289;
t388 = -pkin(4) * t299 + t289;
t365 = t334 * qJDD(3);
t300 = -t332 * t387 + t365;
t375 = t332 * t304;
t241 = t386 * t300 + t375;
t355 = -t334 * t297 + t332 * t326;
t227 = t332 * t371 - t334 * t355;
t385 = pkin(2) * t227;
t384 = pkin(2) * t304;
t383 = pkin(3) * t217;
t381 = pkin(5) * t334;
t380 = t328 * t326;
t379 = t329 * t326;
t258 = -qJDD(3) * pkin(3) - t387 * pkin(5) - t355;
t253 = t331 * t258;
t313 = t331 * t387 * t333;
t305 = qJDD(4) + t313;
t378 = t331 * t305;
t306 = qJDD(4) - t313;
t377 = t331 * t306;
t376 = t332 * t217;
t254 = t333 * t258;
t374 = t333 * t305;
t373 = t333 * t306;
t372 = -pkin(3) * t258 + pkin(5) * t218;
t324 = t331 ^ 2;
t325 = t333 ^ 2;
t370 = t324 + t325;
t369 = t324 * t387;
t368 = qJD(3) * qJD(4);
t367 = t331 * qJDD(3);
t319 = t333 * qJDD(3);
t335 = qJD(4) ^ 2;
t308 = -t335 - t369;
t274 = -t331 * t308 - t373;
t318 = t333 * t368;
t292 = 0.2e1 * t318 + t367;
t363 = -pkin(3) * t292 + pkin(5) * t274 + t253;
t322 = t325 * t387;
t310 = -t322 - t335;
t272 = t333 * t310 - t378;
t361 = t331 * t368;
t294 = t319 - 0.2e1 * t361;
t362 = pkin(3) * t294 + pkin(5) * t272 - t254;
t298 = t370 * qJDD(3);
t301 = t322 + t369;
t261 = t334 * t298 - t332 * t301;
t260 = t332 * t298 + t334 * t301;
t350 = pkin(3) * t301 + pkin(5) * t298 + t218;
t338 = -pkin(2) * t260 - t350;
t203 = -qJ(2) * t261 - t338;
t360 = qJ(1) * t260 + t203;
t346 = pkin(2) * t299 - t371;
t233 = qJ(2) * t300 - t346;
t359 = -qJ(1) * t299 + t233;
t339 = -pkin(2) * t300 - t355;
t234 = qJ(2) * t299 - t339;
t358 = qJ(1) * t300 + t234;
t268 = t331 * t310 + t374;
t219 = -pkin(3) * t268 + t235;
t223 = -pkin(5) * t268 + t253;
t357 = -t332 * t219 + t334 * t223;
t270 = t333 * t308 - t377;
t220 = -pkin(3) * t270 + t236;
t224 = -pkin(5) * t270 + t254;
t356 = -t332 * t220 + t334 * t224;
t284 = t328 * t304;
t354 = t329 * t297 - t284;
t353 = t329 * t303 - t284;
t285 = t329 * t304;
t352 = -t328 * t297 - t285;
t351 = -t328 * t303 - t285;
t349 = t332 * t313;
t348 = t334 * t313;
t208 = t332 * t218 - t334 * t258;
t347 = -pkin(2) * t208 - t372;
t345 = -pkin(4) * t300 - t375;
t344 = -t319 + t361;
t343 = -t332 * t355 - t334 * t371;
t237 = t332 * t272 + t334 * t294;
t341 = -pkin(2) * t237 - t362;
t238 = t332 * t274 - t334 * t292;
t340 = -pkin(2) * t238 - t363;
t337 = pkin(2) * t268 - t334 * t219 - t332 * t223;
t336 = pkin(2) * t270 - t334 * t220 - t332 * t224;
t309 = t322 - t335;
t307 = t335 - t369;
t302 = -t322 + t369;
t295 = qJ(2) * t304;
t293 = t318 + t367;
t290 = t370 * t368;
t279 = t332 * qJDD(4) + t334 * t290;
t278 = t333 * t293 - t324 * t368;
t276 = -t334 * qJDD(4) + t332 * t290;
t275 = -t325 * t368 + t331 * t344;
t273 = -t331 * t307 + t374;
t271 = t333 * t309 - t377;
t269 = t333 * t307 + t378;
t267 = t331 * t309 + t373;
t266 = (t293 + t318) * t331;
t265 = t331 * t318 + t333 * t344;
t264 = pkin(1) * t297 - t295;
t256 = -t331 * t292 + t333 * t294;
t255 = t333 * t292 + t331 * t294;
t252 = t334 * t278 - t349;
t251 = t334 * t275 + t349;
t250 = t332 * t278 + t348;
t249 = t332 * t275 - t348;
t248 = t334 * t273 + t331 * t366;
t247 = t334 * t271 + t332 * t319;
t246 = t332 * t273 - t331 * t365;
t245 = t332 * t271 - t333 * t365;
t240 = t334 * t274 + t332 * t292;
t239 = t334 * t272 - t332 * t294;
t232 = t334 * t256 + t332 * t302;
t231 = t332 * t256 - t334 * t302;
t214 = t334 * t217;
t213 = t332 * t383;
t212 = -qJ(2) * t343 - t385;
t211 = -t343 * t386 - t384;
t210 = t227 * t386 - t295;
t209 = t334 * t218 + t332 * t258;
t207 = -t386 * t260 + t214;
t206 = -t386 * t261 - t376;
t205 = -qJ(2) * t240 - t340;
t204 = -qJ(2) * t239 - t341;
t202 = -t386 * t240 + t336;
t201 = -t386 * t239 + t337;
t200 = qJ(2) * t270 - t386 * t238 + t356;
t199 = qJ(2) * t268 - t386 * t237 + t357;
t198 = -qJ(2) * t209 - t347;
t197 = -t386 * t209 - t390;
t196 = -t213 - (qJ(2) - t381) * t217 - t386 * t208;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t380, -t379, -t353, -qJ(1) * t353, 0, 0, 0, 0, 0, 0, -t354, t380, t379, -qJ(1) * t354 + (-t328 * pkin(1) + t329 * qJ(2)) * t326, 0, 0, t328 * t299, 0, t328 * t300, t329 * qJDD(3), -t328 * t389 + t358 * t329, -t328 * t241 + t359 * t329, t328 * t343, t329 * t212 - t328 * t211 - qJ(1) * (t227 * t329 - t284), t328 * t250 + t329 * t266, t328 * t231 + t329 * t255, t328 * t246 + t329 * t269, t328 * t249 - t329 * t265, t328 * t245 + t329 * t267, t328 * t276, t329 * t204 - t328 * t201 - qJ(1) * (-t329 * t237 + t328 * t268), t329 * t205 - t328 * t202 - qJ(1) * (-t329 * t238 + t328 * t270), -t328 * t206 + t329 * t360, t329 * t198 - t328 * t197 - qJ(1) * (-t329 * t208 - t217 * t328); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t379, -t380, t351, qJ(1) * t351, 0, 0, 0, 0, 0, 0, t352, -t379, t380, qJ(1) * t352 + (t329 * pkin(1) + t328 * qJ(2)) * t326, 0, 0, -t329 * t299, 0, -t329 * t300, t328 * qJDD(3), t358 * t328 + t329 * t389, t329 * t241 + t359 * t328, -t329 * t343, t328 * t212 + t329 * t211 + qJ(1) * (-t227 * t328 - t285), -t329 * t250 + t328 * t266, -t329 * t231 + t328 * t255, -t329 * t246 + t328 * t269, -t329 * t249 - t328 * t265, -t329 * t245 + t328 * t267, -t329 * t276, t328 * t204 + t329 * t201 + qJ(1) * (t328 * t237 + t329 * t268), t328 * t205 + t329 * t202 + qJ(1) * (t328 * t238 + t329 * t270), t329 * t206 + t328 * t360, t328 * t198 + t329 * t197 + qJ(1) * (t328 * t208 - t217 * t329); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t303, t304, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t297, -t304, t264, 0, 0, t300, 0, -t299, 0, -t241, t389, t227, t210, t252, t232, t248, t251, t247, t279, t199, t200, t207, t196; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t326, -t303, 0, 0, 0, 0, 0, 0, 0, -t297, 0, t326, qJ(2) * t326, 0, 0, 0, 0, 0, qJDD(3), t234, t233, 0, t212, t266, t255, t269, -t265, t267, 0, t204, t205, t203, t198; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t326, 0, -t304, 0, 0, 0, 0, 0, 0, 0, -t304, -t326, 0, pkin(1) * t326, 0, 0, -t299, 0, -t300, 0, t389, t241, -t343, t211, -t250, -t231, -t246, -t249, -t245, -t276, t201, t202, t206, t197; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t303, t304, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t297, -t304, t264, 0, 0, t300, 0, -t299, 0, -t241, t389, t227, t210, t252, t232, t248, t251, t247, t279, t199, t200, t207, t196; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t297, -t304, 0, 0, 0, t300, 0, -t299, 0, t345, -t388, t227, pkin(4) * t227, t252, t232, t248, t251, t247, t279, -pkin(4) * t237 + t357, -pkin(4) * t238 + t356, -pkin(4) * t260 + t214, -pkin(4) * t208 + t217 * t381 - t213; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t297, 0, -t326, 0, 0, 0, 0, 0, 0, -qJDD(3), t339, t346, 0, t385, -t266, -t255, -t269, t265, -t267, 0, t341, t340, t338, t347; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t304, t326, 0, 0, 0, 0, t299, 0, t300, 0, t388, t345, t343, pkin(4) * t343 + t384, t250, t231, t246, t249, t245, t276, pkin(4) * t239 - t337, pkin(4) * t240 - t336, pkin(4) * t261 + t376, pkin(4) * t209 + t390; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), 0, -t387, 0, 0, -t304, -t355, 0, t278, t256, t273, t275, t271, t290, t223, t224, t217, pkin(5) * t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t387, 0, qJDD(3), 0, t304, 0, -t371, 0, t313, -t302, -t367, -t313, -t319, -qJDD(4), t219, t220, 0, t383; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), t355, t371, 0, 0, t266, t255, t269, -t265, t267, 0, t362, t363, t350, t372; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t293, t294, t305, -t318, t309, t318, 0, t258, t235, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t361, t292, t307, -t344, t306, -t361, -t258, 0, t236, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t313, t302, t367, t313, t319, qJDD(4), -t235, -t236, 0, 0;];
m_new_reg = t1;
