% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PPRRR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,alpha3,d3,d4,d5,theta1,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:20
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PPRRR4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRRR4_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRRR4_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRRR4_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRRR4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S5PPRRR4_invdynm_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:20:14
% EndTime: 2019-12-05 15:20:35
% DurationCPUTime: 21.99s
% Computational Cost: add. (141659->715), mult. (259696->1143), div. (0->0), fcn. (214169->14), ass. (0->510)
t1113 = cos(pkin(6));
t1122 = cos(qJ(3));
t1123 = qJD(3) ^ 2;
t1119 = sin(qJ(3));
t1210 = t1119 * qJDD(3);
t1152 = t1122 * t1123 + t1210;
t1060 = t1152 * t1113;
t1077 = qJDD(3) * t1122 - t1119 * t1123;
t1107 = sin(pkin(11));
t1111 = cos(pkin(11));
t1025 = t1060 * t1107 - t1077 * t1111;
t1108 = sin(pkin(10));
t1112 = cos(pkin(10));
t1109 = sin(pkin(6));
t1058 = t1152 * t1109;
t1110 = sin(pkin(5));
t1114 = cos(pkin(5));
t1157 = t1060 * t1111 + t1077 * t1107;
t996 = -t1058 * t1110 + t1114 * t1157;
t1252 = t1025 * t1112 + t1108 * t996;
t1251 = -t1025 * t1108 + t1112 * t996;
t1082 = g(1) * t1112 + g(2) * t1108;
t1081 = g(1) * t1108 - t1112 * g(2);
t1104 = g(3) - qJDD(1);
t1153 = t1081 * t1114 - t1104 * t1110;
t1012 = -t1082 * t1107 - t1111 * t1153;
t1048 = t1081 * t1110 + t1114 * t1104 - qJDD(2);
t1248 = t1012 * t1113 + t1048 * t1109;
t1117 = sin(qJ(5));
t1118 = sin(qJ(4));
t1233 = qJD(3) * t1118;
t1095 = qJD(4) * t1233;
t1121 = cos(qJ(4));
t1209 = t1121 * qJDD(3);
t1074 = -t1095 + t1209;
t1065 = -qJDD(5) + t1074;
t1120 = cos(qJ(5));
t1068 = -t1120 * qJD(4) + t1117 * t1233;
t1070 = qJD(4) * t1117 + t1120 * t1233;
t1225 = t1070 * t1068;
t1126 = -t1065 - t1225;
t1247 = t1117 * t1126;
t1246 = t1120 * t1126;
t993 = t1058 * t1114 + t1110 * t1157;
t1245 = qJD(4) ^ 2;
t1063 = t1068 ^ 2;
t1064 = t1070 ^ 2;
t1232 = qJD(3) * t1121;
t1091 = -qJD(5) + t1232;
t1089 = t1091 ^ 2;
t1013 = -t1082 * t1111 + t1107 * t1153;
t931 = t1013 * t1119 + t1248 * t1122;
t932 = t1013 * t1122 - t1248 * t1119;
t868 = t1119 * t931 + t1122 * t932;
t1244 = pkin(7) * t868;
t1243 = pkin(4) * t1118;
t1242 = pkin(4) * t1121;
t956 = t1012 * t1107 + t1013 * t1111;
t1241 = qJ(2) * t956;
t927 = -t1123 * pkin(3) + qJDD(3) * pkin(8) + t932;
t973 = -t1012 * t1109 + t1048 * t1113;
t891 = -t1118 * t973 + t1121 * t927;
t1200 = -pkin(9) * t1118 - t1242;
t1071 = t1200 * qJD(3);
t968 = t1121 * t973;
t878 = -qJDD(4) * pkin(4) - t1245 * pkin(9) + t968 + (qJD(3) * t1071 + t927) * t1118;
t1240 = t1117 * t878;
t926 = -qJDD(3) * pkin(3) - t1123 * pkin(8) + t931;
t1239 = t1118 * t926;
t1238 = t1119 * t973;
t1237 = t1120 * t878;
t1236 = t1121 * t926;
t1235 = t1122 * t973;
t1234 = qJD(3) * qJD(4);
t1015 = t1065 - t1225;
t1230 = t1015 * t1117;
t1229 = t1015 * t1120;
t1090 = t1118 * t1123 * t1121;
t1083 = qJDD(4) + t1090;
t1224 = t1083 * t1118;
t1084 = qJDD(4) - t1090;
t1223 = t1084 * t1118;
t1222 = t1084 * t1121;
t1221 = t1091 * t1117;
t1220 = t1091 * t1120;
t1102 = t1118 ^ 2;
t1219 = t1102 * t1123;
t1218 = t1107 * t1048;
t1217 = t1108 * t1104;
t1216 = t1111 * t1048;
t1215 = t1111 * t1114;
t1214 = t1112 * t1104;
t1103 = t1121 ^ 2;
t1213 = t1102 + t1103;
t1212 = t1109 * qJDD(3);
t1211 = t1118 * qJDD(3);
t1208 = t1118 * t1225;
t1207 = t1121 * t1225;
t1096 = qJD(4) * t1232;
t1206 = t1107 * t1212;
t879 = -t1245 * pkin(4) + qJDD(4) * pkin(9) + t1071 * t1232 + t891;
t1195 = -t1074 + t1095;
t1073 = t1096 + t1211;
t1196 = t1073 + t1096;
t905 = pkin(4) * t1195 - pkin(9) * t1196 + t926;
t843 = t1117 * t879 - t1120 * t905;
t844 = t1117 * t905 + t1120 * t879;
t793 = t1117 * t843 + t1120 * t844;
t890 = t1118 * t927 + t968;
t841 = t1118 * t890 + t1121 * t891;
t1205 = -t1081 * t1108 - t1112 * t1082;
t1204 = t1120 * qJDD(4) - t1073 * t1117;
t1203 = t1119 * t1090;
t1202 = t1122 * t1090;
t1201 = -pkin(4) * t878 + pkin(9) * t793;
t1076 = t1213 * qJDD(3);
t1100 = t1103 * t1123;
t1079 = t1100 + t1219;
t1034 = t1076 * t1122 - t1119 * t1079;
t839 = t1118 * t891 - t1121 * t890;
t1199 = pkin(7) * t1034 - t1119 * t839;
t1198 = -pkin(7) * t1077 - t1238;
t1197 = -pkin(7) * t1152 + t1235;
t772 = t1118 * t878 + t1121 * t793;
t792 = t1117 * t844 - t1120 * t843;
t1181 = t1119 * t772 - t1122 * t792;
t771 = t1118 * t793 - t1121 * t878;
t745 = -t1109 * t771 + t1113 * t1181;
t759 = t1119 * t792 + t1122 * t772;
t1194 = t1107 * t759 + t1111 * t745;
t1180 = t1119 * t841 - t1122 * t926;
t780 = -t1109 * t839 + t1113 * t1180;
t820 = t1119 * t926 + t1122 * t841;
t1193 = t1107 * t820 + t1111 * t780;
t1014 = t1063 + t1064;
t1002 = (-qJD(5) - t1091) * t1070 + t1204;
t1150 = -qJDD(4) * t1117 - t1073 * t1120;
t1023 = -qJD(5) * t1068 - t1150;
t1055 = t1068 * t1091;
t1004 = t1023 - t1055;
t936 = t1002 * t1120 + t1004 * t1117;
t907 = -t1014 * t1118 + t1121 * t936;
t934 = t1002 * t1117 - t1004 * t1120;
t1179 = t1119 * t907 - t1122 * t934;
t906 = t1014 * t1121 + t1118 * t936;
t833 = -t1109 * t906 + t1113 * t1179;
t858 = t1119 * t934 + t1122 * t907;
t1192 = t1107 * t858 + t1111 * t833;
t1037 = t1064 - t1063;
t1022 = -qJD(5) * t1070 + t1204;
t1054 = t1070 * t1091;
t1001 = t1022 + t1054;
t1003 = t1023 + t1055;
t935 = t1001 * t1120 - t1003 * t1117;
t913 = t1037 * t1118 + t1121 * t935;
t933 = t1001 * t1117 + t1003 * t1120;
t1178 = t1119 * t913 - t1122 * t933;
t912 = -t1037 * t1121 + t1118 * t935;
t835 = -t1109 * t912 + t1113 * t1178;
t859 = t1119 * t933 + t1122 * t913;
t1191 = t1107 * t859 + t1111 * t835;
t1027 = -t1089 - t1063;
t960 = t1027 * t1120 - t1247;
t916 = -t1001 * t1118 + t1121 * t960;
t959 = t1027 * t1117 + t1246;
t1177 = t1119 * t916 - t1122 * t959;
t915 = t1001 * t1121 + t1118 * t960;
t846 = -t1109 * t915 + t1113 * t1177;
t875 = t1119 * t959 + t1122 * t916;
t1190 = t1107 * t875 + t1111 * t846;
t1005 = (qJD(5) - t1091) * t1068 + t1150;
t1033 = -t1064 - t1089;
t966 = -t1033 * t1117 + t1229;
t918 = -t1005 * t1118 + t1121 * t966;
t965 = t1033 * t1120 + t1230;
t1176 = t1119 * t918 - t1122 * t965;
t917 = t1005 * t1121 + t1118 * t966;
t848 = -t1109 * t917 + t1113 * t1176;
t880 = t1119 * t965 + t1122 * t918;
t1189 = t1107 * t880 + t1111 * t848;
t1053 = -t1064 + t1089;
t985 = -t1053 * t1117 + t1246;
t921 = t1004 * t1118 + t1121 * t985;
t983 = t1053 * t1120 + t1247;
t1175 = t1119 * t921 - t1122 * t983;
t919 = -t1004 * t1121 + t1118 * t985;
t851 = -t1109 * t919 + t1113 * t1175;
t888 = t1119 * t983 + t1122 * t921;
t1188 = t1107 * t888 + t1111 * t851;
t1000 = -t1022 + t1054;
t1052 = t1063 - t1089;
t986 = t1052 * t1120 + t1230;
t922 = -t1000 * t1118 + t1121 * t986;
t984 = t1052 * t1117 - t1229;
t1174 = t1119 * t922 - t1122 * t984;
t920 = t1000 * t1121 + t1118 * t986;
t852 = -t1109 * t920 + t1113 * t1174;
t889 = t1119 * t984 + t1122 * t922;
t1187 = t1107 * t889 + t1111 * t852;
t1173 = t1119 * t932 - t1122 * t931;
t854 = t1109 * t973 + t1113 * t1173;
t1186 = t1107 * t868 + t1111 * t854;
t990 = -t1022 * t1117 - t1068 * t1220;
t949 = t1121 * t990 - t1208;
t989 = -t1022 * t1120 + t1068 * t1221;
t1172 = t1119 * t949 + t1122 * t989;
t947 = t1118 * t990 + t1207;
t862 = -t1109 * t947 + t1113 * t1172;
t908 = -t1119 * t989 + t1122 * t949;
t1185 = t1107 * t908 + t1111 * t862;
t992 = t1023 * t1120 + t1070 * t1221;
t950 = t1121 * t992 + t1208;
t991 = t1023 * t1117 - t1070 * t1220;
t1171 = t1119 * t950 - t1122 * t991;
t948 = t1118 * t992 - t1207;
t863 = -t1109 * t948 + t1113 * t1171;
t909 = t1119 * t991 + t1122 * t950;
t1184 = t1107 * t909 + t1111 * t863;
t865 = t868 * t1113;
t1183 = -t1107 * t1173 + t1111 * t865;
t1008 = (t1068 * t1117 + t1070 * t1120) * t1091;
t1009 = (t1068 * t1120 - t1070 * t1117) * t1091;
t988 = t1009 * t1121 - t1065 * t1118;
t1169 = -t1008 * t1122 + t1119 * t988;
t987 = t1009 * t1118 + t1065 * t1121;
t893 = -t1109 * t987 + t1113 * t1169;
t930 = t1119 * t1008 + t1122 * t988;
t1182 = t1107 * t930 + t1111 * t893;
t1072 = 0.2e1 * t1096 + t1211;
t1075 = -0.2e1 * t1095 + t1209;
t1031 = -t1072 * t1118 + t1075 * t1121;
t1080 = -t1100 + t1219;
t1006 = t1031 * t1122 + t1119 * t1080;
t1030 = t1072 * t1121 + t1075 * t1118;
t1161 = t1031 * t1119 - t1080 * t1122;
t958 = -t1109 * t1030 + t1113 * t1161;
t1170 = t1006 * t1107 + t1111 * t958;
t1088 = -t1100 - t1245;
t1045 = t1088 * t1121 - t1224;
t1010 = t1045 * t1122 - t1119 * t1075;
t1067 = t1121 * t1083;
t1041 = t1088 * t1118 + t1067;
t1159 = t1045 * t1119 + t1075 * t1122;
t963 = -t1109 * t1041 + t1113 * t1159;
t1168 = t1010 * t1107 + t1111 * t963;
t1086 = -t1219 - t1245;
t1047 = -t1086 * t1118 - t1222;
t1011 = t1047 * t1122 + t1119 * t1072;
t1043 = t1086 * t1121 - t1223;
t1158 = t1047 * t1119 - t1072 * t1122;
t964 = -t1109 * t1043 + t1113 * t1158;
t1167 = t1011 * t1107 + t1111 * t964;
t1087 = t1100 - t1245;
t1044 = t1087 * t1121 - t1223;
t1018 = t1044 * t1122 + t1119 * t1209;
t1040 = t1087 * t1118 + t1222;
t1149 = t1044 * t1119 - t1122 * t1209;
t976 = -t1109 * t1040 + t1113 * t1149;
t1166 = t1018 * t1107 + t1111 * t976;
t1085 = -t1219 + t1245;
t1046 = -t1085 * t1118 + t1067;
t1019 = t1046 * t1122 + t1118 * t1210;
t1042 = t1085 * t1121 + t1224;
t1148 = t1046 * t1119 - t1122 * t1211;
t977 = -t1109 * t1042 + t1113 * t1148;
t1165 = t1019 * t1107 + t1111 * t977;
t1049 = -t1074 * t1118 - t1103 * t1234;
t1020 = t1049 * t1122 + t1203;
t1038 = t1195 * t1121;
t1139 = t1049 * t1119 - t1202;
t980 = t1109 * t1038 + t1113 * t1139;
t1164 = t1020 * t1107 + t1111 * t980;
t1050 = t1073 * t1121 - t1102 * t1234;
t1021 = t1050 * t1122 - t1203;
t1039 = t1196 * t1118;
t1138 = t1050 * t1119 + t1202;
t981 = -t1109 * t1039 + t1113 * t1138;
t1163 = t1021 * t1107 + t1111 * t981;
t955 = t1012 * t1111 - t1013 * t1107;
t1155 = t1076 * t1119 + t1079 * t1122;
t1029 = t1155 * t1113;
t1162 = t1029 * t1111 + t1034 * t1107;
t1066 = t1213 * t1234;
t1151 = -qJDD(4) * t1122 + t1066 * t1119;
t1036 = t1151 * t1113;
t1051 = t1119 * qJDD(4) + t1066 * t1122;
t1160 = t1036 * t1111 + t1051 * t1107;
t1061 = t1077 * t1113;
t1156 = t1061 * t1111 - t1107 * t1152;
t1154 = t1081 * t1112 - t1082 * t1108;
t1147 = pkin(4) * t1001 + pkin(9) * t960 - t1237;
t1146 = pkin(4) * t1005 + pkin(9) * t966 + t1240;
t747 = -pkin(8) * t771 + (-pkin(9) * t1121 + t1243) * t792;
t758 = -pkin(3) * t771 - t1201;
t1145 = pkin(7) * t759 + t1119 * t747 + t1122 * t758;
t785 = -pkin(9) * t934 - t792;
t767 = -pkin(8) * t906 + t1121 * t785 + t934 * t1243;
t1125 = pkin(4) * t1014 + pkin(9) * t936 + t793;
t770 = -pkin(3) * t906 - t1125;
t1144 = pkin(7) * t858 + t1119 * t767 + t1122 * t770;
t830 = -pkin(4) * t959 + t843;
t856 = -pkin(9) * t959 + t1240;
t781 = -pkin(8) * t915 - t1118 * t830 + t1121 * t856;
t824 = -pkin(3) * t915 - t1147;
t1143 = pkin(7) * t875 + t1119 * t781 + t1122 * t824;
t831 = -pkin(4) * t965 + t844;
t857 = -pkin(9) * t965 + t1237;
t784 = -pkin(8) * t917 - t1118 * t831 + t1121 * t857;
t826 = -pkin(3) * t917 - t1146;
t1142 = pkin(7) * t880 + t1119 * t784 + t1122 * t826;
t876 = -pkin(3) * t1041 + t890;
t910 = -pkin(8) * t1041 + t1239;
t1141 = pkin(7) * t1010 + t1119 * t910 + t1122 * t876;
t877 = -pkin(3) * t1043 + t891;
t911 = -pkin(8) * t1043 + t1236;
t1140 = pkin(7) * t1011 + t1119 * t911 + t1122 * t877;
t733 = pkin(8) * t772 + (-pkin(3) + t1200) * t792;
t744 = t1109 * t1181 + t1113 * t771;
t716 = -pkin(2) * t744 - t1109 * t733 + t1113 * t1145;
t720 = -t1119 * t758 + t1122 * t747 + (-t1109 * t744 - t1113 * t745) * pkin(7);
t730 = -t1107 * t745 + t1111 * t759;
t1137 = qJ(2) * t730 + t1107 * t720 + t1111 * t716;
t764 = pkin(8) * t907 + t1118 * t785 + (-pkin(3) - t1242) * t934;
t832 = t1109 * t1179 + t1113 * t906;
t732 = -pkin(2) * t832 - t1109 * t764 + t1113 * t1144;
t736 = -t1119 * t770 + t1122 * t767 + (-t1109 * t832 - t1113 * t833) * pkin(7);
t796 = -t1107 * t833 + t1111 * t858;
t1136 = qJ(2) * t796 + t1107 * t736 + t1111 * t732;
t773 = -pkin(3) * t959 + pkin(8) * t916 + t1118 * t856 + t1121 * t830;
t845 = t1109 * t1177 + t1113 * t915;
t738 = -pkin(2) * t845 - t1109 * t773 + t1113 * t1143;
t756 = -t1119 * t824 + t1122 * t781 + (-t1109 * t845 - t1113 * t846) * pkin(7);
t811 = -t1107 * t846 + t1111 * t875;
t1135 = qJ(2) * t811 + t1107 * t756 + t1111 * t738;
t776 = -pkin(3) * t965 + pkin(8) * t918 + t1118 * t857 + t1121 * t831;
t847 = t1109 * t1176 + t1113 * t917;
t741 = -pkin(2) * t847 - t1109 * t776 + t1113 * t1142;
t757 = -t1119 * t826 + t1122 * t784 + (-t1109 * t847 - t1113 * t848) * pkin(7);
t812 = -t1107 * t848 + t1111 * t880;
t1134 = qJ(2) * t812 + t1107 * t757 + t1111 * t741;
t1124 = pkin(7) * t820 + (-pkin(3) * t1122 - pkin(8) * t1119) * t839;
t779 = t1109 * t1180 + t1113 * t839;
t821 = -pkin(3) * t926 + pkin(8) * t841;
t743 = -pkin(2) * t779 - t1109 * t821 + t1113 * t1124;
t746 = (pkin(3) * t1119 - pkin(8) * t1122) * t839 + (-t1109 * t779 - t1113 * t780) * pkin(7);
t763 = -t1107 * t780 + t1111 * t820;
t1133 = qJ(2) * t763 + t1107 * t746 + t1111 * t743;
t1028 = t1155 * t1109;
t838 = pkin(3) * t1079 + pkin(8) * t1076 + t841;
t783 = -pkin(2) * t1028 - t1109 * t838 + t1113 * t1199;
t827 = -t1122 * t839 + (-t1028 * t1109 - t1029 * t1113) * pkin(7);
t982 = -t1029 * t1107 + t1034 * t1111;
t1132 = qJ(2) * t982 + t1107 * t827 + t1111 * t783;
t904 = pkin(3) * t1075 + pkin(8) * t1045 - t1236;
t961 = t1113 * t1041 + t1109 * t1159;
t808 = -pkin(2) * t961 - t1109 * t904 + t1113 * t1141;
t818 = -t1119 * t876 + t1122 * t910 + (-t1109 * t961 - t1113 * t963) * pkin(7);
t924 = t1010 * t1111 - t1107 * t963;
t1131 = qJ(2) * t924 + t1107 * t818 + t1111 * t808;
t903 = -pkin(3) * t1072 + pkin(8) * t1047 + t1239;
t962 = t1113 * t1043 + t1109 * t1158;
t809 = -pkin(2) * t962 - t1109 * t903 + t1113 * t1140;
t819 = -t1119 * t877 + t1122 * t911 + (-t1109 * t962 - t1113 * t964) * pkin(7);
t925 = t1011 * t1111 - t1107 * t964;
t1130 = qJ(2) * t925 + t1107 * t819 + t1111 * t809;
t853 = t1109 * t1173 - t1113 * t973;
t810 = (-t1109 * t853 - t1113 * t854) * pkin(7);
t813 = -t1107 * t854 + t1111 * t868;
t814 = -pkin(2) * t853 + t1113 * t1244;
t1129 = qJ(2) * t813 + t1107 * t810 + t1111 * t814;
t873 = pkin(2) * t1058 + t1109 * t932 + t1113 * t1198;
t938 = -t1235 + (t1058 * t1109 + t1060 * t1113) * pkin(7);
t1128 = qJ(2) * t1025 + t1107 * t938 + t1111 * t873;
t1026 = -t1061 * t1107 - t1111 * t1152;
t1059 = t1077 * t1109;
t874 = -pkin(2) * t1059 + t1109 * t931 + t1113 * t1197;
t937 = -t1238 + (-t1059 * t1109 - t1061 * t1113) * pkin(7);
t1127 = qJ(2) * t1026 + t1107 * t937 + t1111 * t874;
t1057 = (-t1109 * t1215 - t1110 * t1113) * qJDD(3);
t1056 = (-t1109 * t1110 * t1111 + t1113 * t1114) * qJDD(3);
t1035 = t1151 * t1109;
t999 = -t1036 * t1107 + t1051 * t1111;
t998 = -t1059 * t1110 + t1114 * t1156;
t995 = t1059 * t1114 + t1110 * t1156;
t979 = t1113 * t1039 + t1109 * t1138;
t978 = -t1113 * t1038 + t1109 * t1139;
t975 = t1113 * t1042 + t1109 * t1148;
t974 = t1113 * t1040 + t1109 * t1149;
t972 = t1012 * t1110 + t1048 * t1215;
t971 = t1013 * t1110 - t1114 * t1218;
t970 = -t1012 * t1114 + t1110 * t1216;
t969 = -t1013 * t1114 - t1110 * t1218;
t957 = t1113 * t1030 + t1109 * t1161;
t954 = t956 * t1114;
t953 = t956 * t1110;
t952 = -t1035 * t1110 + t1114 * t1160;
t951 = t1035 * t1114 + t1110 * t1160;
t946 = t1026 * t1112 - t1108 * t998;
t945 = t1026 * t1108 + t1112 * t998;
t944 = -t1028 * t1110 + t1114 * t1162;
t943 = t1028 * t1114 + t1110 * t1162;
t942 = t1021 * t1111 - t1107 * t981;
t941 = t1020 * t1111 - t1107 * t980;
t940 = t1019 * t1111 - t1107 * t977;
t939 = t1018 * t1111 - t1107 * t976;
t929 = t1048 * t1110 - t1114 * t955;
t928 = -t1048 * t1114 - t1110 * t955;
t914 = t1006 * t1111 - t1107 * t958;
t901 = -t1110 * t979 + t1114 * t1163;
t900 = -t1110 * t978 + t1114 * t1164;
t899 = t1110 * t1163 + t1114 * t979;
t898 = t1110 * t1164 + t1114 * t978;
t897 = -t1110 * t975 + t1114 * t1165;
t896 = -t1110 * t974 + t1114 * t1166;
t895 = t1110 * t1165 + t1114 * t975;
t894 = t1110 * t1166 + t1114 * t974;
t892 = t1109 * t1169 + t1113 * t987;
t886 = -t1110 * t962 + t1114 * t1167;
t885 = -t1110 * t961 + t1114 * t1168;
t884 = t1110 * t1167 + t1114 * t962;
t883 = t1110 * t1168 + t1114 * t961;
t882 = pkin(1) * t929 + t1110 * t1241;
t881 = -pkin(1) * t928 + t1114 * t1241;
t872 = pkin(2) * t1061 + t1109 * t1197 - t1113 * t931;
t871 = -pkin(2) * t1060 + t1109 * t1198 - t1113 * t932;
t870 = -t1110 * t957 + t1114 * t1170;
t869 = t1110 * t1170 + t1114 * t957;
t866 = (-t1110 * t928 - t1114 * t929) * qJ(2);
t864 = t868 * t1109;
t861 = t1109 * t1171 + t1113 * t948;
t860 = t1109 * t1172 + t1113 * t947;
t855 = -t1107 * t893 + t1111 * t930;
t850 = t1109 * t1174 + t1113 * t920;
t849 = t1109 * t1175 + t1113 * t919;
t837 = -t1107 * t863 + t1111 * t909;
t836 = -t1107 * t862 + t1111 * t908;
t834 = t1109 * t1178 + t1113 * t912;
t829 = -t1107 * t873 + t1111 * t938 + (t1110 * t993 + t1114 * t996) * qJ(2);
t828 = -t1107 * t874 + t1111 * t937 + (-t1110 * t995 - t1114 * t998) * qJ(2);
t825 = -t1107 * t865 - t1111 * t1173;
t823 = -t1110 * t892 + t1114 * t1182;
t822 = t1110 * t1182 + t1114 * t892;
t817 = -t1107 * t852 + t1111 * t889;
t816 = -t1107 * t851 + t1111 * t888;
t815 = pkin(2) * t854 + t1109 * t1244;
t807 = pkin(2) * t964 + t1109 * t1140 + t1113 * t903;
t806 = pkin(2) * t963 + t1109 * t1141 + t1113 * t904;
t805 = pkin(1) * t993 - t1110 * t871 + t1114 * t1128;
t804 = -pkin(1) * t995 - t1110 * t872 + t1114 * t1127;
t803 = -pkin(1) * t996 + t1110 * t1128 + t1114 * t871;
t802 = pkin(1) * t998 + t1110 * t1127 + t1114 * t872;
t801 = -t1110 * t861 + t1114 * t1184;
t800 = -t1110 * t860 + t1114 * t1185;
t799 = t1110 * t1184 + t1114 * t861;
t798 = t1110 * t1185 + t1114 * t860;
t797 = -t1107 * t835 + t1111 * t859;
t795 = -t1110 * t864 + t1114 * t1183;
t794 = t1110 * t1183 + t1114 * t864;
t791 = -t1110 * t853 + t1114 * t1186;
t790 = t1110 * t1186 + t1114 * t853;
t789 = -t1110 * t850 + t1114 * t1187;
t788 = -t1110 * t849 + t1114 * t1188;
t787 = t1110 * t1187 + t1114 * t850;
t786 = t1110 * t1188 + t1114 * t849;
t782 = pkin(2) * t1029 + t1109 * t1199 + t1113 * t838;
t778 = -t1110 * t847 + t1114 * t1189;
t777 = t1110 * t1189 + t1114 * t847;
t775 = -t1110 * t845 + t1114 * t1190;
t774 = t1110 * t1190 + t1114 * t845;
t769 = -t1110 * t834 + t1114 * t1191;
t768 = t1110 * t1191 + t1114 * t834;
t766 = -t1110 * t832 + t1114 * t1192;
t765 = t1110 * t1192 + t1114 * t832;
t762 = -t1107 * t783 + t1111 * t827 + (-t1110 * t943 - t1114 * t944) * qJ(2);
t761 = -t1107 * t809 + t1111 * t819 + (-t1110 * t884 - t1114 * t886) * qJ(2);
t760 = -t1107 * t808 + t1111 * t818 + (-t1110 * t883 - t1114 * t885) * qJ(2);
t755 = -pkin(1) * t884 - t1110 * t807 + t1114 * t1130;
t754 = -pkin(1) * t883 - t1110 * t806 + t1114 * t1131;
t753 = pkin(1) * t886 + t1110 * t1130 + t1114 * t807;
t752 = pkin(1) * t885 + t1110 * t1131 + t1114 * t806;
t751 = -t1110 * t779 + t1114 * t1193;
t750 = t1110 * t1193 + t1114 * t779;
t749 = -pkin(1) * t943 - t1110 * t782 + t1114 * t1132;
t748 = pkin(1) * t944 + t1110 * t1132 + t1114 * t782;
t742 = pkin(2) * t780 + t1109 * t1124 + t1113 * t821;
t740 = pkin(2) * t848 + t1109 * t1142 + t1113 * t776;
t739 = -t1107 * t814 + t1111 * t810 + (-t1110 * t790 - t1114 * t791) * qJ(2);
t737 = pkin(2) * t846 + t1109 * t1143 + t1113 * t773;
t735 = -pkin(1) * t790 - t1110 * t815 + t1114 * t1129;
t734 = pkin(1) * t791 + t1110 * t1129 + t1114 * t815;
t731 = pkin(2) * t833 + t1109 * t1144 + t1113 * t764;
t729 = -t1107 * t741 + t1111 * t757 + (-t1110 * t777 - t1114 * t778) * qJ(2);
t728 = -t1107 * t738 + t1111 * t756 + (-t1110 * t774 - t1114 * t775) * qJ(2);
t727 = -t1110 * t744 + t1114 * t1194;
t726 = t1110 * t1194 + t1114 * t744;
t725 = -pkin(1) * t777 - t1110 * t740 + t1114 * t1134;
t724 = pkin(1) * t778 + t1110 * t1134 + t1114 * t740;
t723 = -pkin(1) * t774 - t1110 * t737 + t1114 * t1135;
t722 = pkin(1) * t775 + t1110 * t1135 + t1114 * t737;
t721 = -t1107 * t732 + t1111 * t736 + (-t1110 * t765 - t1114 * t766) * qJ(2);
t719 = -t1107 * t743 + t1111 * t746 + (-t1110 * t750 - t1114 * t751) * qJ(2);
t718 = -pkin(1) * t750 - t1110 * t742 + t1114 * t1133;
t717 = pkin(1) * t751 + t1110 * t1133 + t1114 * t742;
t715 = pkin(2) * t745 + t1109 * t1145 + t1113 * t733;
t714 = -pkin(1) * t765 - t1110 * t731 + t1114 * t1136;
t713 = pkin(1) * t766 + t1110 * t1136 + t1114 * t731;
t712 = -t1107 * t716 + t1111 * t720 + (-t1110 * t726 - t1114 * t727) * qJ(2);
t711 = -pkin(1) * t726 - t1110 * t715 + t1114 * t1137;
t710 = pkin(1) * t727 + t1110 * t1137 + t1114 * t715;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1217, -t1214, -t1154, -qJ(1) * t1154, 0, 0, 0, 0, 0, 0, -t1108 * t972 - t1112 * t1218, -t1108 * t971 - t1112 * t1216, -t1108 * t954 + t1112 * t955, t1112 * t866 - t1108 * t881 - qJ(1) * (t1108 * t956 + t1112 * t929), 0, 0, -t1252, 0, t946, -t1057 * t1108 + t1112 * t1206, -qJ(1) * t945 - t1108 * t804 + t1112 * t828, qJ(1) * t1251 - t1108 * t805 + t1112 * t829, -t1108 * t795 + t1112 * t825, t1112 * t739 - t1108 * t735 - qJ(1) * (t1108 * t813 + t1112 * t791), -t1108 * t901 + t1112 * t942, -t1108 * t870 + t1112 * t914, -t1108 * t897 + t1112 * t940, -t1108 * t900 + t1112 * t941, -t1108 * t896 + t1112 * t939, -t1108 * t952 + t1112 * t999, t1112 * t760 - t1108 * t754 - qJ(1) * (t1108 * t924 + t1112 * t885), t1112 * t761 - t1108 * t755 - qJ(1) * (t1108 * t925 + t1112 * t886), t1112 * t762 - t1108 * t749 - qJ(1) * (t1108 * t982 + t1112 * t944), t1112 * t719 - t1108 * t718 - qJ(1) * (t1108 * t763 + t1112 * t751), -t1108 * t801 + t1112 * t837, -t1108 * t769 + t1112 * t797, -t1108 * t788 + t1112 * t816, -t1108 * t800 + t1112 * t836, -t1108 * t789 + t1112 * t817, -t1108 * t823 + t1112 * t855, t1112 * t728 - t1108 * t723 - qJ(1) * (t1108 * t811 + t1112 * t775), t1112 * t729 - t1108 * t725 - qJ(1) * (t1108 * t812 + t1112 * t778), t1112 * t721 - t1108 * t714 - qJ(1) * (t1108 * t796 + t1112 * t766), t1112 * t712 - t1108 * t711 - qJ(1) * (t1108 * t730 + t1112 * t727); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1214, -t1217, t1205, qJ(1) * t1205, 0, 0, 0, 0, 0, 0, -t1108 * t1218 + t1112 * t972, -t1108 * t1216 + t1112 * t971, t1108 * t955 + t1112 * t954, t1108 * t866 + t1112 * t881 + qJ(1) * (-t1108 * t929 + t1112 * t956), 0, 0, t1251, 0, t945, t1057 * t1112 + t1108 * t1206, qJ(1) * t946 + t1108 * t828 + t1112 * t804, qJ(1) * t1252 + t1108 * t829 + t1112 * t805, t1108 * t825 + t1112 * t795, t1108 * t739 + t1112 * t735 + qJ(1) * (-t1108 * t791 + t1112 * t813), t1108 * t942 + t1112 * t901, t1108 * t914 + t1112 * t870, t1108 * t940 + t1112 * t897, t1108 * t941 + t1112 * t900, t1108 * t939 + t1112 * t896, t1108 * t999 + t1112 * t952, t1108 * t760 + t1112 * t754 + qJ(1) * (-t1108 * t885 + t1112 * t924), t1108 * t761 + t1112 * t755 + qJ(1) * (-t1108 * t886 + t1112 * t925), t1108 * t762 + t1112 * t749 + qJ(1) * (-t1108 * t944 + t1112 * t982), t1108 * t719 + t1112 * t718 + qJ(1) * (-t1108 * t751 + t1112 * t763), t1108 * t837 + t1112 * t801, t1108 * t797 + t1112 * t769, t1108 * t816 + t1112 * t788, t1108 * t836 + t1112 * t800, t1108 * t817 + t1112 * t789, t1108 * t855 + t1112 * t823, t1108 * t728 + t1112 * t723 + qJ(1) * (-t1108 * t775 + t1112 * t811), t1108 * t729 + t1112 * t725 + qJ(1) * (-t1108 * t778 + t1112 * t812), t1108 * t721 + t1112 * t714 + qJ(1) * (-t1108 * t766 + t1112 * t796), t1108 * t712 + t1112 * t711 + qJ(1) * (-t1108 * t727 + t1112 * t730); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1081, t1082, 0, 0, 0, 0, 0, 0, 0, 0, t970, t969, t953, t882, 0, 0, t993, 0, t995, t1056, t802, t803, t794, t734, t899, t869, t895, t898, t894, t951, t752, t753, t748, t717, t799, t768, t786, t798, t787, t822, t722, t724, t713, t710; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1104, -t1081, 0, 0, 0, 0, 0, 0, 0, -t1218, -t1216, t955, t866, 0, 0, -t1025, 0, t1026, t1206, t828, t829, t825, t739, t942, t914, t940, t941, t939, t999, t760, t761, t762, t719, t837, t797, t816, t836, t817, t855, t728, t729, t721, t712; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1104, 0, -t1082, 0, 0, 0, 0, 0, 0, 0, t972, t971, t954, t881, 0, 0, t996, 0, t998, t1057, t804, t805, t795, t735, t901, t870, t897, t900, t896, t952, t754, t755, t749, t718, t801, t769, t788, t800, t789, t823, t723, t725, t714, t711; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1081, t1082, 0, 0, 0, 0, 0, 0, 0, 0, t970, t969, t953, t882, 0, 0, t993, 0, t995, t1056, t802, t803, t794, t734, t899, t869, t895, t898, t894, t951, t752, t753, t748, t717, t799, t768, t786, t798, t787, t822, t722, t724, t713, t710; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1048, t1012, 0, 0, 0, t1077, 0, -t1152, 0, t937, t938, -t1173, t810, t1021, t1006, t1019, t1020, t1018, t1051, t818, t819, t827, t746, t909, t859, t888, t908, t889, t930, t756, t757, t736, t720; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1048, 0, t1013, 0, 0, 0, t1060, 0, t1061, -t1212, t874, t873, t865, t814, t981, t958, t977, t980, t976, t1036, t808, t809, t783, t743, t863, t835, t851, t862, t852, t893, t738, t741, t732, t716; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1012, -t1013, 0, 0, 0, 0, t1058, 0, t1059, t1113 * qJDD(3), t872, t871, t864, t815, t979, t957, t975, t978, t974, t1035, t806, t807, t782, t742, t861, t834, t849, t860, t850, t892, t737, t740, t731, t715; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), 0, -t1123, 0, 0, -t973, t931, 0, t1050, t1031, t1046, t1049, t1044, t1066, t910, t911, -t839, -pkin(8) * t839, t950, t913, t921, t949, t922, t988, t781, t784, t767, t747; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1123, 0, qJDD(3), 0, t973, 0, t932, 0, t1090, -t1080, -t1211, -t1090, -t1209, -qJDD(4), t876, t877, 0, -pkin(3) * t839, -t991, -t933, -t983, t989, -t984, -t1008, t824, t826, t770, t758; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t931, -t932, 0, 0, t1039, t1030, t1042, -t1038, t1040, 0, t904, t903, t838, t821, t948, t912, t919, t947, t920, t987, t773, t776, t764, t733; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1073, t1075, t1083, -t1096, t1087, t1096, 0, t926, t890, 0, t992, t935, t985, t990, t986, t1009, t856, t857, t785, -pkin(9) * t792; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1095, t1072, t1085, t1074, t1084, -t1095, -t926, 0, t891, 0, -t1225, -t1037, -t1004, t1225, t1000, t1065, t830, t831, -pkin(4) * t934, -pkin(4) * t792; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1090, t1080, t1211, t1090, t1209, qJDD(4), -t890, -t891, 0, 0, t991, t933, t983, -t989, t984, t1008, t1147, t1146, t1125, t1201; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1023, t1001, t1126, -t1055, t1052, t1055, 0, t878, t843, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1054, t1003, t1053, t1022, -t1015, t1054, -t878, 0, t844, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1225, t1037, t1004, -t1225, -t1000, -t1065, -t843, -t844, 0, 0;];
m_new_reg = t1;
