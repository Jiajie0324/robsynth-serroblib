% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PPRRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,alpha3,d3,d4,d5,theta1,theta2]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:20
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PPRRR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRRR4_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRRR4_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRRR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRRR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S5PPRRR4_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:19:51
% EndTime: 2019-12-05 15:20:14
% DurationCPUTime: 19.90s
% Computational Cost: add. (88569->667), mult. (162548->1135), div. (0->0), fcn. (134409->14), ass. (0->495)
t570 = sin(pkin(6));
t583 = cos(qJ(3));
t585 = qJD(3) ^ 2;
t580 = sin(qJ(3));
t666 = t580 * qJDD(3);
t610 = t583 * t585 + t666;
t517 = t610 * t570;
t571 = sin(pkin(5));
t575 = cos(pkin(5));
t574 = cos(pkin(6));
t519 = t610 * t574;
t665 = t583 * qJDD(3);
t538 = -t580 * t585 + t665;
t568 = sin(pkin(11));
t572 = cos(pkin(11));
t614 = t519 * t572 + t538 * t568;
t454 = -t571 * t517 + t575 * t614;
t483 = t568 * t519 - t572 * t538;
t569 = sin(pkin(10));
t573 = cos(pkin(10));
t408 = t454 * t569 + t573 * t483;
t709 = t454 * t573 - t569 * t483;
t543 = t573 * g(1) + t569 * g(2);
t542 = t569 * g(1) - t573 * g(2);
t565 = g(3) - qJDD(1);
t611 = t542 * t575 - t565 * t571;
t470 = -t568 * t543 - t572 * t611;
t509 = t571 * t542 + t575 * t565 - qJDD(2);
t706 = t470 * t574 + t509 * t570;
t578 = sin(qJ(5));
t579 = sin(qJ(4));
t668 = qJD(3) * qJD(4);
t555 = t579 * t668;
t582 = cos(qJ(4));
t558 = t582 * qJDD(3);
t535 = t558 - t555;
t526 = -qJDD(5) + t535;
t581 = cos(qJ(5));
t671 = qJD(3) * t579;
t529 = -t581 * qJD(4) + t578 * t671;
t531 = t578 * qJD(4) + t581 * t671;
t692 = t531 * t529;
t608 = -t526 - t692;
t705 = t578 * t608;
t704 = t581 * t608;
t670 = t582 * qJD(3);
t552 = -qJD(5) + t670;
t515 = t529 * t552;
t660 = t582 * t668;
t667 = t579 * qJDD(3);
t534 = t660 + t667;
t662 = t529 * qJD(5) - t578 * qJDD(4) - t581 * t534;
t462 = t662 - t515;
t659 = -t581 * qJDD(4) + t578 * t534;
t458 = (qJD(5) + t552) * t531 + t659;
t703 = t575 * t517 + t571 * t614;
t524 = t529 ^ 2;
t525 = t531 ^ 2;
t550 = t552 ^ 2;
t702 = pkin(4) * t579;
t701 = pkin(4) * t582;
t471 = -t572 * t543 + t568 * t611;
t392 = t580 * t471 + t706 * t583;
t393 = t583 * t471 - t706 * t580;
t329 = t580 * t392 + t583 * t393;
t700 = pkin(7) * t329;
t417 = t568 * t470 + t572 * t471;
t699 = qJ(2) * t417;
t388 = -t585 * pkin(3) + qJDD(3) * pkin(8) + t393;
t432 = -t570 * t470 + t574 * t509;
t429 = t582 * t432;
t656 = -pkin(9) * t579 - t701;
t532 = t656 * qJD(3);
t584 = qJD(4) ^ 2;
t339 = t429 - qJDD(4) * pkin(4) - t584 * pkin(9) + (qJD(3) * t532 + t388) * t579;
t698 = t339 * t578;
t697 = t339 * t581;
t695 = t509 * t569;
t693 = t509 * t573;
t691 = t552 * t578;
t690 = t552 * t581;
t563 = t579 ^ 2;
t689 = t563 * t585;
t688 = t569 * t565;
t687 = t571 * t509;
t685 = t571 * t572;
t684 = t573 * t565;
t683 = t575 * t509;
t473 = t526 - t692;
t681 = t578 * t473;
t387 = -qJDD(3) * pkin(3) - t585 * pkin(8) + t392;
t680 = t579 * t387;
t551 = t579 * t585 * t582;
t544 = qJDD(4) + t551;
t679 = t579 * t544;
t545 = qJDD(4) - t551;
t678 = t579 * t545;
t677 = t580 * t432;
t676 = t581 * t473;
t675 = t582 * t387;
t674 = t582 * t545;
t673 = t583 * t432;
t353 = t582 * t388 - t579 * t432;
t340 = -t584 * pkin(4) + qJDD(4) * pkin(9) + t532 * t670 + t353;
t651 = -t535 + t555;
t652 = t534 + t660;
t366 = t651 * pkin(4) - t652 * pkin(9) + t387;
t301 = t581 * t340 + t578 * t366;
t564 = t582 ^ 2;
t672 = t563 + t564;
t664 = t579 * t692;
t663 = t582 * t692;
t661 = qJDD(3) * t568 * t570;
t300 = t340 * t578 - t581 * t366;
t352 = t579 * t388 + t429;
t299 = t352 * t579 + t582 * t353;
t496 = -t569 * t542 - t573 * t543;
t658 = t583 * t551;
t657 = t580 * t551;
t298 = t352 * t582 - t353 * t579;
t537 = t672 * qJDD(3);
t561 = t564 * t585;
t540 = t561 + t689;
t492 = t583 * t537 - t580 * t540;
t655 = pkin(7) * t492 + t298 * t580;
t654 = -pkin(7) * t538 - t677;
t653 = -pkin(7) * t610 + t673;
t257 = t300 * t578 + t301 * t581;
t237 = t257 * t579 - t339 * t582;
t238 = t257 * t582 + t339 * t579;
t256 = -t300 * t581 + t301 * t578;
t649 = t238 * t580 - t256 * t583;
t207 = -t570 * t237 + t649 * t574;
t220 = t238 * t583 + t256 * t580;
t650 = t207 * t572 + t220 * t568;
t645 = t299 * t580 - t387 * t583;
t246 = t298 * t570 + t645 * t574;
t279 = t299 * t583 + t387 * t580;
t648 = t246 * t572 + t279 * t568;
t463 = t515 + t662;
t397 = -t458 * t581 - t578 * t463;
t472 = t524 + t525;
t367 = t579 * t397 + t582 * t472;
t368 = t582 * t397 - t579 * t472;
t395 = -t458 * t578 + t581 * t463;
t635 = t368 * t580 - t395 * t583;
t291 = -t570 * t367 + t574 * t635;
t319 = t368 * t583 + t395 * t580;
t647 = t291 * t572 + t319 * t568;
t459 = (-qJD(5) + t552) * t531 - t659;
t396 = t581 * t459 + t462 * t578;
t497 = -t525 + t524;
t373 = t579 * t396 + t582 * t497;
t374 = t582 * t396 - t579 * t497;
t394 = -t578 * t459 + t462 * t581;
t634 = t374 * t580 + t394 * t583;
t293 = -t570 * t373 + t574 * t634;
t320 = t374 * t583 - t394 * t580;
t646 = t293 * t572 + t320 * t568;
t485 = -t550 - t524;
t421 = t581 * t485 - t705;
t376 = t579 * t421 + t582 * t459;
t377 = t582 * t421 - t579 * t459;
t420 = t578 * t485 + t704;
t633 = t377 * t580 - t420 * t583;
t303 = -t570 * t376 + t574 * t633;
t335 = t583 * t377 + t580 * t420;
t644 = t303 * t572 + t335 * t568;
t491 = -t525 - t550;
t427 = -t578 * t491 + t676;
t378 = t579 * t427 + t582 * t462;
t379 = t582 * t427 - t579 * t462;
t426 = t581 * t491 + t681;
t632 = t379 * t580 - t426 * t583;
t305 = -t570 * t378 + t574 * t632;
t341 = t583 * t379 + t580 * t426;
t643 = t305 * t572 + t341 * t568;
t514 = -t525 + t550;
t444 = -t578 * t514 + t704;
t380 = t579 * t444 + t582 * t463;
t382 = t582 * t444 - t579 * t463;
t442 = -t581 * t514 - t705;
t631 = t382 * t580 + t442 * t583;
t312 = -t570 * t380 + t574 * t631;
t350 = t583 * t382 - t580 * t442;
t642 = t312 * t572 + t350 * t568;
t513 = t524 - t550;
t445 = t581 * t513 + t681;
t381 = t579 * t445 + t582 * t458;
t383 = t582 * t445 - t579 * t458;
t443 = -t578 * t513 + t676;
t630 = t383 * t580 + t443 * t583;
t313 = -t570 * t381 + t574 * t630;
t351 = t583 * t383 - t580 * t443;
t641 = t313 * t572 + t351 * t568;
t328 = t583 * t392 - t580 * t393;
t315 = -t328 * t574 + t570 * t432;
t640 = t315 * t572 + t329 * t568;
t480 = -t531 * qJD(5) - t659;
t449 = -t578 * t480 - t529 * t690;
t410 = t579 * t449 + t663;
t412 = t582 * t449 - t664;
t448 = -t581 * t480 + t529 * t691;
t629 = t412 * t580 + t448 * t583;
t323 = -t570 * t410 + t574 * t629;
t369 = t583 * t412 - t580 * t448;
t639 = t323 * t572 + t369 * t568;
t451 = t531 * t691 - t581 * t662;
t411 = t579 * t451 - t663;
t413 = t582 * t451 + t664;
t450 = t531 * t690 + t578 * t662;
t628 = t413 * t580 + t450 * t583;
t324 = -t570 * t411 + t574 * t628;
t370 = t583 * t413 - t580 * t450;
t638 = t324 * t572 + t370 * t568;
t326 = t329 * t574;
t637 = t326 * t572 + t328 * t568;
t467 = (t529 * t581 - t531 * t578) * t552;
t446 = t579 * t467 + t582 * t526;
t447 = t582 * t467 - t579 * t526;
t466 = (-t529 * t578 - t531 * t581) * t552;
t620 = t447 * t580 + t466 * t583;
t355 = -t570 * t446 + t574 * t620;
t391 = t583 * t447 - t580 * t466;
t636 = t355 * t572 + t391 * t568;
t533 = 0.2e1 * t660 + t667;
t536 = t558 - 0.2e1 * t555;
t488 = t582 * t533 + t579 * t536;
t489 = -t579 * t533 + t582 * t536;
t541 = t561 - t689;
t618 = t489 * t580 + t541 * t583;
t419 = -t570 * t488 + t574 * t618;
t464 = t583 * t489 - t580 * t541;
t627 = t419 * t572 + t464 * t568;
t528 = t582 * t544;
t549 = -t561 - t584;
t502 = t579 * t549 + t528;
t506 = t582 * t549 - t679;
t616 = t506 * t580 + t536 * t583;
t424 = -t570 * t502 + t574 * t616;
t468 = t583 * t506 - t580 * t536;
t626 = t424 * t572 + t468 * t568;
t547 = -t584 - t689;
t504 = t582 * t547 - t678;
t508 = -t579 * t547 - t674;
t615 = t508 * t580 - t533 * t583;
t425 = -t570 * t504 + t574 * t615;
t469 = t583 * t508 + t580 * t533;
t625 = t425 * t572 + t469 * t568;
t548 = t561 - t584;
t501 = t579 * t548 + t674;
t505 = t582 * t548 - t678;
t607 = t505 * t580 - t582 * t665;
t435 = -t570 * t501 + t574 * t607;
t476 = t583 * t505 + t580 * t558;
t624 = t435 * t572 + t476 * t568;
t546 = t584 - t689;
t503 = t582 * t546 + t679;
t507 = -t579 * t546 + t528;
t606 = t507 * t580 - t579 * t665;
t436 = -t570 * t503 + t574 * t606;
t477 = t583 * t507 + t579 * t666;
t623 = t436 * t572 + t477 * t568;
t499 = t651 * t582;
t510 = -t579 * t535 - t564 * t668;
t605 = t510 * t580 - t658;
t439 = t570 * t499 + t574 * t605;
t478 = t583 * t510 + t657;
t622 = t439 * t572 + t478 * t568;
t500 = t652 * t579;
t511 = t582 * t534 - t563 * t668;
t604 = t511 * t580 + t658;
t440 = -t570 * t500 + t574 * t604;
t479 = t583 * t511 - t657;
t621 = t440 * t572 + t479 * t568;
t416 = t572 * t470 - t568 * t471;
t612 = t537 * t580 + t540 * t583;
t487 = t612 * t574;
t619 = t487 * t572 + t492 * t568;
t527 = t672 * t668;
t609 = -qJDD(4) * t583 + t527 * t580;
t494 = t609 * t574;
t512 = t580 * qJDD(4) + t583 * t527;
t617 = t494 * t572 + t512 * t568;
t520 = t538 * t574;
t613 = t520 * t572 - t568 * t610;
t495 = t573 * t542 - t569 * t543;
t209 = -pkin(8) * t237 + (-pkin(9) * t582 + t702) * t256;
t217 = -pkin(3) * t237 + pkin(4) * t339 - pkin(9) * t257;
t603 = pkin(7) * t220 + t209 * t580 + t217 * t583;
t251 = -pkin(9) * t395 - t256;
t234 = -pkin(8) * t367 + t251 * t582 + t395 * t702;
t236 = -pkin(3) * t367 - pkin(4) * t472 - pkin(9) * t397 - t257;
t602 = pkin(7) * t319 + t234 * t580 + t236 * t583;
t288 = -pkin(4) * t420 + t300;
t317 = -pkin(9) * t420 + t698;
t247 = -pkin(8) * t376 - t288 * t579 + t317 * t582;
t282 = -pkin(3) * t376 - pkin(4) * t459 - pkin(9) * t421 + t697;
t601 = pkin(7) * t335 + t247 * t580 + t282 * t583;
t289 = -pkin(4) * t426 + t301;
t318 = -pkin(9) * t426 + t697;
t250 = -pkin(8) * t378 - t289 * t579 + t318 * t582;
t284 = -pkin(3) * t378 - pkin(4) * t462 - pkin(9) * t427 - t698;
t600 = pkin(7) * t341 + t250 * t580 + t284 * t583;
t336 = -pkin(3) * t502 + t352;
t371 = -pkin(8) * t502 + t680;
t599 = pkin(7) * t468 + t336 * t583 + t371 * t580;
t337 = -pkin(3) * t504 + t353;
t372 = -pkin(8) * t504 + t675;
t598 = pkin(7) * t469 + t337 * t583 + t372 * t580;
t196 = pkin(8) * t238 + (-pkin(3) + t656) * t256;
t206 = t574 * t237 + t649 * t570;
t178 = -pkin(2) * t206 - t570 * t196 + t574 * t603;
t183 = t583 * t209 - t580 * t217 + (-t206 * t570 - t207 * t574) * pkin(7);
t191 = -t207 * t568 + t220 * t572;
t597 = qJ(2) * t191 + t178 * t572 + t183 * t568;
t231 = pkin(8) * t368 + t579 * t251 + (-pkin(3) - t701) * t395;
t290 = t574 * t367 + t570 * t635;
t193 = -pkin(2) * t290 - t570 * t231 + t574 * t602;
t198 = t583 * t234 - t580 * t236 + (-t290 * t570 - t291 * t574) * pkin(7);
t259 = -t291 * t568 + t319 * t572;
t596 = qJ(2) * t259 + t193 * t572 + t198 * t568;
t239 = -pkin(3) * t420 + pkin(8) * t377 + t288 * t582 + t317 * t579;
t302 = t574 * t376 + t570 * t633;
t200 = -pkin(2) * t302 - t570 * t239 + t574 * t601;
t215 = t583 * t247 - t580 * t282 + (-t302 * t570 - t303 * t574) * pkin(7);
t270 = -t303 * t568 + t335 * t572;
t595 = qJ(2) * t270 + t200 * t572 + t215 * t568;
t242 = -pkin(3) * t426 + pkin(8) * t379 + t289 * t582 + t318 * t579;
t304 = t574 * t378 + t570 * t632;
t203 = -pkin(2) * t304 - t570 * t242 + t574 * t600;
t216 = t583 * t250 - t580 * t284 + (-t304 * t570 - t305 * t574) * pkin(7);
t271 = -t305 * t568 + t341 * t572;
t594 = qJ(2) * t271 + t203 * t572 + t216 * t568;
t245 = -t298 * t574 + t645 * t570;
t280 = -pkin(3) * t387 + pkin(8) * t299;
t586 = pkin(7) * t279 - (-pkin(3) * t583 - pkin(8) * t580) * t298;
t205 = -pkin(2) * t245 - t570 * t280 + t574 * t586;
t208 = -(pkin(3) * t580 - pkin(8) * t583) * t298 + (-t245 * t570 - t246 * t574) * pkin(7);
t228 = -t246 * t568 + t279 * t572;
t593 = qJ(2) * t228 + t205 * t572 + t208 * t568;
t296 = pkin(3) * t540 + pkin(8) * t537 + t299;
t486 = t612 * t570;
t249 = -pkin(2) * t486 - t570 * t296 + t655 * t574;
t285 = t583 * t298 + (-t486 * t570 - t487 * t574) * pkin(7);
t441 = -t568 * t487 + t572 * t492;
t592 = qJ(2) * t441 + t249 * t572 + t285 * t568;
t365 = pkin(3) * t536 + pkin(8) * t506 - t675;
t422 = t574 * t502 + t570 * t616;
t267 = -pkin(2) * t422 - t570 * t365 + t574 * t599;
t277 = -t580 * t336 + t583 * t371 + (-t422 * t570 - t424 * t574) * pkin(7);
t385 = -t568 * t424 + t572 * t468;
t591 = qJ(2) * t385 + t267 * t572 + t277 * t568;
t364 = -pkin(3) * t533 + pkin(8) * t508 + t680;
t423 = t574 * t504 + t570 * t615;
t268 = -pkin(2) * t423 - t570 * t364 + t574 * t598;
t278 = -t580 * t337 + t583 * t372 + (-t423 * t570 - t425 * t574) * pkin(7);
t386 = -t568 * t425 + t572 * t469;
t590 = qJ(2) * t386 + t268 * t572 + t278 * t568;
t314 = -t328 * t570 - t574 * t432;
t269 = (-t314 * t570 - t315 * t574) * pkin(7);
t272 = -t315 * t568 + t329 * t572;
t273 = -pkin(2) * t314 + t574 * t700;
t589 = qJ(2) * t272 + t269 * t568 + t273 * t572;
t333 = pkin(2) * t517 + t570 * t393 + t654 * t574;
t399 = -t673 + (t517 * t570 + t519 * t574) * pkin(7);
t588 = qJ(2) * t483 + t333 * t572 + t399 * t568;
t518 = t538 * t570;
t334 = -pkin(2) * t518 + t570 * t392 + t653 * t574;
t398 = -t677 + (-t518 * t570 - t520 * t574) * pkin(7);
t484 = -t568 * t520 - t572 * t610;
t587 = qJ(2) * t484 + t334 * t572 + t398 * t568;
t516 = (-t570 * t572 * t575 - t571 * t574) * qJDD(3);
t493 = t609 * t570;
t457 = -t568 * t494 + t572 * t512;
t456 = -t571 * t518 + t575 * t613;
t453 = t575 * t518 + t571 * t613;
t438 = t574 * t500 + t570 * t604;
t437 = -t574 * t499 + t570 * t605;
t434 = t574 * t503 + t570 * t606;
t433 = t574 * t501 + t570 * t607;
t431 = t571 * t470 + t572 * t683;
t430 = t571 * t471 - t568 * t683;
t418 = t574 * t488 + t570 * t618;
t415 = t417 * t575;
t414 = -t571 * t493 + t575 * t617;
t409 = -t569 * t456 + t573 * t484;
t407 = t573 * t456 + t569 * t484;
t405 = -t571 * t486 + t575 * t619;
t404 = t575 * t486 + t571 * t619;
t403 = -t568 * t440 + t572 * t479;
t402 = -t568 * t439 + t572 * t478;
t401 = -t568 * t436 + t572 * t477;
t400 = -t568 * t435 + t572 * t476;
t390 = -t416 * t575 + t687;
t389 = -t416 * t571 - t683;
t375 = -t568 * t419 + t572 * t464;
t361 = -t569 * t405 + t573 * t441;
t360 = t573 * t405 + t569 * t441;
t359 = -t571 * t438 + t575 * t621;
t358 = -t571 * t437 + t575 * t622;
t357 = -t571 * t434 + t575 * t623;
t356 = -t571 * t433 + t575 * t624;
t354 = t574 * t446 + t570 * t620;
t348 = -t571 * t423 + t575 * t625;
t347 = -t571 * t422 + t575 * t626;
t346 = t575 * t423 + t571 * t625;
t345 = t575 * t422 + t571 * t626;
t344 = -pkin(1) * t389 + t575 * t699;
t343 = -t569 * t390 + t573 * t417;
t342 = t573 * t390 + t569 * t417;
t332 = pkin(2) * t520 - t574 * t392 + t653 * t570;
t331 = -pkin(2) * t519 - t574 * t393 + t654 * t570;
t330 = -t571 * t418 + t575 * t627;
t327 = (-t389 * t571 - t390 * t575) * qJ(2);
t325 = t329 * t570;
t322 = t574 * t411 + t570 * t628;
t321 = t574 * t410 + t570 * t629;
t316 = -t355 * t568 + t391 * t572;
t311 = t574 * t381 + t570 * t630;
t310 = t574 * t380 + t570 * t631;
t309 = -t348 * t569 + t386 * t573;
t308 = -t347 * t569 + t385 * t573;
t307 = t348 * t573 + t386 * t569;
t306 = t347 * t573 + t385 * t569;
t295 = -t324 * t568 + t370 * t572;
t294 = -t323 * t568 + t369 * t572;
t292 = t574 * t373 + t570 * t634;
t287 = -t568 * t333 + t572 * t399 + (t454 * t575 + t571 * t703) * qJ(2);
t286 = -t568 * t334 + t572 * t398 + (-t453 * t571 - t456 * t575) * qJ(2);
t283 = -t326 * t568 + t328 * t572;
t281 = -t571 * t354 + t575 * t636;
t276 = -t313 * t568 + t351 * t572;
t275 = -t312 * t568 + t350 * t572;
t274 = pkin(2) * t315 + t570 * t700;
t266 = pkin(2) * t425 + t574 * t364 + t570 * t598;
t265 = pkin(2) * t424 + t574 * t365 + t570 * t599;
t264 = pkin(1) * t703 - t571 * t331 + t575 * t588;
t263 = -pkin(1) * t453 - t571 * t332 + t575 * t587;
t262 = -t571 * t322 + t575 * t638;
t261 = -t571 * t321 + t575 * t639;
t260 = -t293 * t568 + t320 * t572;
t258 = -t571 * t325 + t575 * t637;
t255 = -t571 * t314 + t575 * t640;
t254 = t575 * t314 + t571 * t640;
t253 = -t571 * t311 + t575 * t641;
t252 = -t571 * t310 + t575 * t642;
t248 = pkin(2) * t487 + t574 * t296 + t655 * t570;
t244 = -t571 * t304 + t575 * t643;
t243 = t575 * t304 + t571 * t643;
t241 = -t571 * t302 + t575 * t644;
t240 = t575 * t302 + t571 * t644;
t235 = -t571 * t292 + t646 * t575;
t233 = -t571 * t290 + t647 * t575;
t232 = t575 * t290 + t647 * t571;
t230 = -t255 * t569 + t272 * t573;
t229 = t255 * t573 + t272 * t569;
t227 = -t244 * t569 + t271 * t573;
t226 = t244 * t573 + t271 * t569;
t225 = -t241 * t569 + t270 * t573;
t224 = t241 * t573 + t270 * t569;
t223 = -t568 * t249 + t572 * t285 + (-t404 * t571 - t405 * t575) * qJ(2);
t222 = -t568 * t268 + t572 * t278 + (-t346 * t571 - t348 * t575) * qJ(2);
t221 = -t568 * t267 + t572 * t277 + (-t345 * t571 - t347 * t575) * qJ(2);
t219 = -t233 * t569 + t259 * t573;
t218 = t233 * t573 + t259 * t569;
t214 = -pkin(1) * t346 - t571 * t266 + t575 * t590;
t213 = -pkin(1) * t345 - t571 * t265 + t575 * t591;
t212 = -t571 * t245 + t648 * t575;
t211 = t575 * t245 + t648 * t571;
t210 = -pkin(1) * t404 - t571 * t248 + t575 * t592;
t204 = pkin(2) * t246 + t574 * t280 + t570 * t586;
t202 = pkin(2) * t305 + t574 * t242 + t570 * t600;
t201 = t572 * t269 - t568 * t273 + (-t254 * t571 - t255 * t575) * qJ(2);
t199 = pkin(2) * t303 + t574 * t239 + t570 * t601;
t197 = -pkin(1) * t254 - t571 * t274 + t575 * t589;
t195 = -t212 * t569 + t228 * t573;
t194 = t212 * t573 + t228 * t569;
t192 = pkin(2) * t291 + t574 * t231 + t570 * t602;
t190 = -t568 * t203 + t572 * t216 + (-t243 * t571 - t244 * t575) * qJ(2);
t189 = -t568 * t200 + t572 * t215 + (-t240 * t571 - t241 * t575) * qJ(2);
t188 = -t571 * t206 + t650 * t575;
t187 = t575 * t206 + t650 * t571;
t186 = -pkin(1) * t243 - t571 * t202 + t575 * t594;
t185 = -pkin(1) * t240 - t571 * t199 + t575 * t595;
t184 = -t568 * t193 + t572 * t198 + (-t232 * t571 - t233 * t575) * qJ(2);
t182 = -t568 * t205 + t572 * t208 + (-t211 * t571 - t212 * t575) * qJ(2);
t181 = -t188 * t569 + t191 * t573;
t180 = t188 * t573 + t191 * t569;
t179 = -pkin(1) * t211 - t571 * t204 + t575 * t593;
t177 = pkin(2) * t207 + t574 * t196 + t570 * t603;
t176 = -pkin(1) * t232 - t571 * t192 + t575 * t596;
t175 = -t568 * t178 + t572 * t183 + (-t187 * t571 - t188 * t575) * qJ(2);
t174 = -pkin(1) * t187 - t571 * t177 + t575 * t597;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t496, 0, 0, 0, 0, 0, 0, 0, 0, 0, t343, 0, 0, 0, 0, 0, 0, t409, t408, 0, t230, 0, 0, 0, 0, 0, 0, t308, t309, t361, t195, 0, 0, 0, 0, 0, 0, t225, t227, t219, t181; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t495, 0, 0, 0, 0, 0, 0, 0, 0, 0, t342, 0, 0, 0, 0, 0, 0, t407, -t709, 0, t229, 0, 0, 0, 0, 0, 0, t306, t307, t360, t194, 0, 0, 0, 0, 0, 0, t224, t226, t218, t180; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t565, 0, 0, 0, 0, 0, 0, 0, 0, 0, t389, 0, 0, 0, 0, 0, 0, t453, -t703, 0, t254, 0, 0, 0, 0, 0, 0, t345, t346, t404, t211, 0, 0, 0, 0, 0, 0, t240, t243, t232, t187; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t688, -t684, -t495, -qJ(1) * t495, 0, 0, 0, 0, 0, 0, -t431 * t569 - t568 * t693, -t430 * t569 - t572 * t693, -t415 * t569 + t416 * t573, -qJ(1) * t342 + t327 * t573 - t344 * t569, 0, 0, -t408, 0, t409, -t516 * t569 + t573 * t661, -qJ(1) * t407 - t263 * t569 + t286 * t573, qJ(1) * t709 - t264 * t569 + t287 * t573, -t258 * t569 + t283 * t573, -qJ(1) * t229 - t197 * t569 + t201 * t573, -t359 * t569 + t403 * t573, -t330 * t569 + t375 * t573, -t357 * t569 + t401 * t573, -t358 * t569 + t402 * t573, -t356 * t569 + t400 * t573, -t414 * t569 + t457 * t573, -qJ(1) * t306 - t213 * t569 + t221 * t573, -qJ(1) * t307 - t214 * t569 + t222 * t573, -qJ(1) * t360 - t210 * t569 + t223 * t573, -qJ(1) * t194 - t179 * t569 + t182 * t573, -t262 * t569 + t295 * t573, -t235 * t569 + t260 * t573, -t252 * t569 + t275 * t573, -t261 * t569 + t294 * t573, -t253 * t569 + t276 * t573, -t281 * t569 + t316 * t573, -qJ(1) * t224 - t185 * t569 + t189 * t573, -qJ(1) * t226 - t186 * t569 + t190 * t573, -qJ(1) * t218 - t176 * t569 + t184 * t573, -qJ(1) * t180 - t174 * t569 + t175 * t573; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t684, -t688, t496, qJ(1) * t496, 0, 0, 0, 0, 0, 0, t431 * t573 - t568 * t695, t430 * t573 - t572 * t695, t415 * t573 + t416 * t569, qJ(1) * t343 + t327 * t569 + t344 * t573, 0, 0, t709, 0, t407, t516 * t573 + t569 * t661, qJ(1) * t409 + t263 * t573 + t286 * t569, qJ(1) * t408 + t264 * t573 + t287 * t569, t258 * t573 + t283 * t569, qJ(1) * t230 + t197 * t573 + t201 * t569, t359 * t573 + t403 * t569, t330 * t573 + t375 * t569, t357 * t573 + t401 * t569, t358 * t573 + t402 * t569, t356 * t573 + t400 * t569, t414 * t573 + t457 * t569, qJ(1) * t308 + t213 * t573 + t221 * t569, qJ(1) * t309 + t214 * t573 + t222 * t569, qJ(1) * t361 + t210 * t573 + t223 * t569, qJ(1) * t195 + t179 * t573 + t182 * t569, t262 * t573 + t295 * t569, t235 * t573 + t260 * t569, t252 * t573 + t275 * t569, t261 * t573 + t294 * t569, t253 * t573 + t276 * t569, t281 * t573 + t316 * t569, qJ(1) * t225 + t185 * t573 + t189 * t569, qJ(1) * t227 + t186 * t573 + t190 * t569, qJ(1) * t219 + t176 * t573 + t184 * t569, qJ(1) * t181 + t174 * t573 + t175 * t569; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t542, t543, 0, 0, 0, 0, 0, 0, 0, 0, -t470 * t575 + t509 * t685, -t471 * t575 - t568 * t687, t417 * t571, pkin(1) * t390 + t571 * t699, 0, 0, t703, 0, t453, (-t570 * t685 + t574 * t575) * qJDD(3), pkin(1) * t456 + t575 * t332 + t571 * t587, -pkin(1) * t454 + t575 * t331 + t571 * t588, t575 * t325 + t571 * t637, pkin(1) * t255 + t575 * t274 + t571 * t589, t575 * t438 + t571 * t621, t575 * t418 + t571 * t627, t575 * t434 + t571 * t623, t575 * t437 + t571 * t622, t575 * t433 + t571 * t624, t575 * t493 + t571 * t617, pkin(1) * t347 + t575 * t265 + t571 * t591, pkin(1) * t348 + t575 * t266 + t571 * t590, pkin(1) * t405 + t575 * t248 + t571 * t592, pkin(1) * t212 + t575 * t204 + t571 * t593, t575 * t322 + t571 * t638, t575 * t292 + t571 * t646, t575 * t310 + t571 * t642, t575 * t321 + t571 * t639, t575 * t311 + t571 * t641, t575 * t354 + t571 * t636, pkin(1) * t241 + t575 * t199 + t571 * t595, pkin(1) * t244 + t575 * t202 + t571 * t594, pkin(1) * t233 + t575 * t192 + t571 * t596, pkin(1) * t188 + t575 * t177 + t571 * t597;];
tauB_reg = t1;
