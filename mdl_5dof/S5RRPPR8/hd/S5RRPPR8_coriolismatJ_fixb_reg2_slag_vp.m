% Calculate inertial parameters regressor of coriolis matrix for
% S5RRPPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta4]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:39
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RRPPR8_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR8_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR8_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPPR8_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:39:20
% EndTime: 2019-12-31 19:39:27
% DurationCPUTime: 4.20s
% Computational Cost: add. (4451->209), mult. (8002->289), div. (0->0), fcn. (8838->6), ass. (0->180)
t247 = qJD(2) - qJD(5);
t191 = sin(qJ(5));
t193 = cos(qJ(2));
t303 = sin(pkin(8));
t217 = t193 * t303;
t192 = sin(qJ(2));
t314 = pkin(6) - qJ(4);
t219 = t314 * t192;
t304 = cos(pkin(8));
t129 = -t314 * t217 + t304 * t219;
t162 = t192 * t304 - t217;
t199 = -t162 * pkin(7) + t129;
t318 = cos(qJ(5));
t218 = t193 * t304;
t131 = t314 * t218 + t303 * t219;
t160 = t192 * t303 + t218;
t338 = -t160 * pkin(7) + t131;
t22 = -t191 * t338 + t318 * t199;
t350 = t247 * t22;
t348 = t191 * t199 + t318 * t338;
t349 = t247 * t348;
t148 = t318 * t160;
t299 = t191 * t162;
t331 = t148 + t299;
t336 = t331 ^ 2;
t238 = t318 * t162;
t300 = t191 * t160;
t113 = t238 - t300;
t337 = t113 ^ 2;
t28 = -t336 + t337;
t341 = t28 * qJD(1);
t334 = qJD(1) * t113;
t339 = t331 * t334;
t164 = t191 * t304 + t318 * t303;
t320 = t164 / 0.2e1;
t265 = t113 * qJD(5);
t136 = t300 / 0.2e1;
t222 = -t300 / 0.2e1;
t330 = t222 + t136;
t333 = t330 * qJD(2);
t248 = t193 * qJD(3);
t278 = -t193 * pkin(2) - t192 * qJ(3);
t332 = t278 * qJD(2) + t248;
t220 = t299 / 0.2e1;
t221 = -t299 / 0.2e1;
t104 = t221 + t220;
t255 = t164 * qJD(2);
t329 = -t164 * qJD(5) + t255;
t159 = t191 * t303 - t318 * t304;
t261 = t159 * qJD(2);
t328 = -t159 * qJD(5) + t261;
t327 = t160 ^ 2;
t326 = t162 ^ 2;
t325 = -pkin(2) - pkin(3);
t324 = t148 / 0.2e1;
t323 = t159 / 0.2e1;
t322 = t162 / 0.2e1;
t321 = -t164 / 0.2e1;
t319 = t192 / 0.2e1;
t316 = t162 * pkin(4);
t171 = -pkin(1) + t278;
t156 = t193 * pkin(3) - t171;
t121 = t160 * pkin(4) + t156;
t186 = t193 * qJ(3);
t157 = t325 * t192 + t186;
t123 = t157 - t316;
t6 = t121 * t123;
t307 = t6 * qJD(1);
t13 = -t113 * t22 - t331 * t348;
t302 = t13 * qJD(1);
t205 = (-pkin(2) / 0.2e1 - pkin(3) / 0.2e1) * t192 + t186 / 0.2e1;
t201 = -t316 / 0.2e1 + t205;
t170 = t304 * qJ(3) + t303 * t325;
t169 = -t303 * qJ(3) + t304 * t325;
t200 = -pkin(4) + t169;
t118 = t191 * t170 - t318 * t200;
t119 = t318 * t170 + t191 * t200;
t208 = -t113 * t118 / 0.2e1 + t331 * t119 / 0.2e1;
t24 = t201 + t208;
t296 = t24 * qJD(1);
t27 = t156 * t157;
t294 = t27 * qJD(1);
t29 = t336 + t337;
t292 = t29 * qJD(1);
t31 = -t113 * t121 + t123 * t331;
t291 = t31 * qJD(1);
t32 = t123 * t113 + t121 * t331;
t290 = t32 * qJD(1);
t207 = -t113 * t323 - t321 * t331;
t46 = t319 + t207;
t288 = t46 * qJD(1);
t53 = -t129 * t162 - t131 * t160;
t287 = t53 * qJD(1);
t54 = 0.2e1 * t136 - t238;
t286 = t54 * qJD(1);
t210 = 0.2e1 * t324;
t56 = 0.2e1 * t220 + t210;
t285 = t56 * qJD(1);
t206 = t169 * t322 + t170 * t160 / 0.2e1;
t58 = t205 + t206;
t284 = t58 * qJD(1);
t67 = -t156 * t162 + t157 * t160;
t283 = t67 * qJD(1);
t68 = t156 * t160 + t157 * t162;
t282 = t68 * qJD(1);
t72 = 0.2e1 * t221 - t148;
t280 = t72 * qJD(1);
t97 = t326 - t327;
t279 = t97 * qJD(1);
t276 = qJD(1) * t121;
t275 = qJD(1) * t192;
t274 = qJD(1) * t193;
t273 = qJD(2) * qJ(3);
t272 = qJD(3) * t192;
t239 = t303 / 0.2e1;
t202 = t160 * t239 + t304 * t322;
t100 = t319 + t202;
t271 = t100 * qJD(1);
t270 = t330 * qJD(1);
t105 = t324 - t148 / 0.2e1;
t269 = t105 * qJD(1);
t268 = t113 * qJD(2);
t267 = t331 * qJD(5);
t266 = t331 * qJD(2);
t122 = t326 + t327;
t264 = t122 * qJD(1);
t172 = t192 * pkin(2) - t186;
t124 = t171 * t193 + t172 * t192;
t263 = t124 * qJD(1);
t125 = -t171 * t192 + t172 * t193;
t262 = t125 * qJD(1);
t260 = t159 * qJD(3);
t258 = t160 * qJD(1);
t257 = t160 * qJD(2);
t256 = t162 * qJD(1);
t153 = t162 * qJD(2);
t254 = t164 * qJD(3);
t190 = t192 ^ 2;
t175 = t193 ^ 2 - t190;
t252 = t175 * qJD(1);
t251 = t175 * qJD(2);
t250 = t190 * qJD(1);
t249 = t192 * qJD(2);
t183 = t193 * qJD(2);
t246 = pkin(1) * t275;
t245 = pkin(1) * t274;
t244 = pkin(6) * t249;
t243 = pkin(6) * t183;
t234 = t331 * t276;
t233 = t113 * t276;
t232 = t121 * t275;
t231 = t156 * t275;
t230 = t160 * t256;
t229 = t160 * t153;
t228 = t171 * t172 * qJD(1);
t227 = t171 * t275;
t226 = t331 * t275;
t225 = t113 * t275;
t224 = t192 * t258;
t223 = t192 * t256;
t216 = t304 * qJD(2);
t215 = t303 * qJD(2);
t48 = t118 * t164 - t119 * t159;
t211 = t48 * qJD(2);
t120 = -t169 * t303 + t170 * t304;
t209 = t120 * qJD(2);
t177 = t192 * t183;
t176 = t192 * t274;
t101 = t319 - t202;
t74 = t238 + 0.2e1 * t222;
t73 = t210 + t299;
t70 = -t304 * t160 + t303 * t162;
t59 = t205 - t206;
t57 = t105 + t104;
t47 = t319 - t207;
t34 = -0.2e1 * t129 * t239 + t131 * t304;
t25 = t201 - t208;
t16 = 0.2e1 * t331 * t323 + (t320 - t321) * t113;
t9 = -0.2e1 * t22 * t320 + (-t323 - t159 / 0.2e1) * t348;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t177, t251, 0, -t177, 0, 0, -pkin(1) * t249, -pkin(1) * t183, 0, 0, t177, 0, -t251, 0, 0, -t177, -t125 * qJD(2) + t192 * t248, 0, -t124 * qJD(2) + t190 * qJD(3), (qJD(2) * t172 - t272) * t171, t229, t97 * qJD(2), 0, -t229, 0, 0, t67 * qJD(2) + t160 * t272, t68 * qJD(2) + t162 * t272, t122 * qJD(4), t27 * qJD(2) + t53 * qJD(4) + t156 * t272, (t266 - t267) * t113, t247 * t28, 0, (t265 - t268) * t331, 0, 0, t31 * qJD(2) + t121 * t265 + t272 * t331, t32 * qJD(2) + t113 * t272 - t121 * t267, t29 * qJD(4), t6 * qJD(2) + t13 * qJD(4) + t121 * t272; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t176, t252, t183, -t176, -t249, 0, -t243 - t246, t244 - t245, 0, 0, t176, t183, -t252, 0, t249, -t176, -t243 - t262, t332, -t244 - t263, t332 * pkin(6) + t228, t230, t279, -t257, -t230, -t153, 0, -qJD(2) * t131 + t283, -qJD(2) * t129 + t282, (-t169 * t160 + t170 * t162) * qJD(2) + t70 * qJD(3), t294 + (-t129 * t170 + t131 * t169) * qJD(2) + t34 * qJD(3) + t59 * qJD(4), t339, t341, t73 * qJD(5) - t266, -t339, t74 * qJD(5) - t268, 0, qJD(4) * t330 + t291 - t349, t57 * qJD(4) + t290 - t350, (t113 * t119 + t118 * t331) * qJD(2) + t16 * qJD(3), t307 + (-t118 * t348 - t119 * t22) * qJD(2) + t9 * qJD(3) + t25 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t176, t183, t250, -t227 + t243, 0, 0, 0, 0, 0, 0, t224, t223, t70 * qJD(2), t34 * qJD(2) + t101 * qJD(4) + t231, 0, 0, 0, 0, 0, 0, t226, t225, t16 * qJD(2), t9 * qJD(2) + t47 * qJD(4) + t232; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t264, t59 * qJD(2) + t101 * qJD(3) + t287, 0, 0, 0, 0, 0, 0, t333, t57 * qJD(2) + t104 * qJD(5), t292, t25 * qJD(2) + t47 * qJD(3) + t302; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t339, -t341, t73 * qJD(2) - t267, t339, t74 * qJD(2) - t265, 0, t233 + t349, t104 * qJD(4) - t234 + t350, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t176, -t252, 0, t176, 0, 0, t246, t245, 0, 0, -t176, 0, t252, 0, 0, t176, t262, 0, t263, -t228, -t230, -t279, 0, t230, 0, 0, t162 * qJD(4) - t283, -t160 * qJD(4) - t282, 0, -t58 * qJD(4) - t294, -t339, -t341, -t105 * qJD(5), t339, -t330 * qJD(5), 0, -t54 * qJD(4) - t291, -t56 * qJD(4) - t290, 0, -t24 * qJD(4) - t307; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3), qJ(3) * qJD(3), 0, 0, 0, 0, 0, 0, t303 * qJD(3), t304 * qJD(3), 0, t120 * qJD(3), 0, 0, 0, 0, 0, 0, t119 * qJD(5) + t254, -t118 * qJD(5) - t260, 0, t48 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), t273, 0, 0, 0, 0, 0, 0, t215, t216, 0, t209, 0, 0, 0, 0, 0, 0, t255, -t261, 0, t211; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t256, -t258, 0, -t284, 0, 0, 0, 0, 0, 0, -t286, -t285, 0, -t296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t269, 0, -t270, 0, t119 * t247, -t118 * t247, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t176, 0, -t250, t227, 0, 0, 0, 0, 0, 0, -t224, -t223, 0, -t100 * qJD(4) - t231, 0, 0, 0, 0, 0, 0, -t226, -t225, 0, -t46 * qJD(4) - t232; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(2), -t273, 0, 0, 0, 0, 0, 0, -t215, -t216, 0, -t209, 0, 0, 0, 0, 0, 0, -t329, t328, 0, -t211; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t271, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t288; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t329, -t328, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t153, t257, -t264, t58 * qJD(2) + t100 * qJD(3) - t287, 0, 0, 0, 0, 0, 0, t54 * qJD(2) + t265, t56 * qJD(2) + t72 * qJD(5), -t292, t24 * qJD(2) + t46 * qJD(3) - t302; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t256, t258, 0, t284, 0, 0, 0, 0, 0, 0, t286, t285, 0, t296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t271, 0, 0, 0, 0, 0, 0, 0, 0, 0, t288; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t334, t280, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t339, t341, t105 * qJD(2), -t339, t333, 0, -qJD(4) * t113 - t233, -t72 * qJD(4) + t234, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t269, 0, t270, 0, -t119 * qJD(2) - t254, t118 * qJD(2) + t260, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t255, t261, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t334, -t280, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t1;
