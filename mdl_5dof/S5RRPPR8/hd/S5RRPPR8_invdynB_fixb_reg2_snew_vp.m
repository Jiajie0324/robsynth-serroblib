% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:39
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPPR8_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR8_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR8_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR8_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR8_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPPR8_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:39:23
% EndTime: 2019-12-31 19:39:34
% DurationCPUTime: 9.75s
% Computational Cost: add. (29519->532), mult. (68059->755), div. (0->0), fcn. (42403->8), ass. (0->373)
t587 = qJD(2) ^ 2;
t582 = sin(qJ(2));
t578 = t582 ^ 2;
t588 = qJD(1) ^ 2;
t650 = t578 * t588;
t557 = t587 + t650;
t585 = cos(qJ(2));
t561 = t585 * t588 * t582;
t553 = qJDD(2) - t561;
t640 = t585 * t553;
t502 = -t557 * t582 + t640;
t626 = qJD(1) * qJD(2);
t612 = t585 * t626;
t624 = t582 * qJDD(1);
t542 = 0.2e1 * t612 + t624;
t583 = sin(qJ(1));
t586 = cos(qJ(1));
t457 = t502 * t583 + t542 * t586;
t692 = pkin(5) * t457;
t460 = t502 * t586 - t542 * t583;
t691 = pkin(5) * t460;
t690 = pkin(6) * t502;
t673 = 2 * qJD(3);
t644 = t582 * t553;
t496 = t557 * t585 + t644;
t689 = pkin(1) * t496;
t688 = pkin(6) * t496;
t543 = t612 + t624;
t579 = sin(pkin(8));
t580 = cos(pkin(8));
t568 = t585 * qJDD(1);
t613 = t582 * t626;
t599 = -t568 + t613;
t482 = t543 * t580 + t579 * t599;
t526 = (-t579 * t582 - t580 * t585) * qJD(1);
t631 = qJD(2) * t526;
t443 = t482 + t631;
t544 = t568 - 0.2e1 * t613;
t492 = t585 * t544;
t646 = t582 * t542;
t484 = -t492 + t646;
t674 = t585 ^ 2;
t550 = (t578 - t674) * t588;
t687 = t484 * t583 + t550 * t586;
t686 = t484 * t586 - t550 * t583;
t639 = t674 * t588;
t559 = -t587 + t639;
t500 = -t559 * t585 + t644;
t622 = t586 * qJDD(1);
t685 = t500 * t583 + t585 * t622;
t684 = t500 * t586 - t568 * t583;
t632 = qJD(1) * t585;
t633 = qJD(1) * t582;
t528 = -t579 * t632 + t580 * t633;
t657 = t528 * t526;
t607 = -qJDD(2) + t657;
t683 = t579 * t607;
t682 = t580 * t607;
t581 = sin(qJ(5));
t574 = -qJDD(2) + qJDD(5);
t584 = cos(qJ(5));
t466 = -t526 * t584 + t528 * t581;
t468 = t526 * t581 + t528 * t584;
t660 = t466 * t468;
t597 = t574 - t660;
t681 = t581 * t597;
t680 = t584 * t597;
t608 = t543 * t579 - t580 * t599;
t393 = -qJD(5) * t466 + t482 * t584 - t581 * t608;
t575 = qJD(2) - qJD(5);
t455 = t466 * t575;
t679 = t455 + t393;
t520 = qJD(2) * t528;
t678 = -t520 - t608;
t671 = pkin(2) * t585;
t602 = -qJ(3) * t582 - t671;
t540 = t602 * qJD(1);
t555 = g(1) * t586 + g(2) * t583;
t531 = -pkin(1) * t588 + qJDD(1) * pkin(6) - t555;
t611 = t582 * g(3) - t531 * t585;
t594 = qJDD(2) * qJ(3) + qJD(2) * t673 + t540 * t632 - t611;
t438 = -t587 * pkin(2) + t594;
t551 = -qJD(2) * pkin(3) - qJ(4) * t633;
t413 = -pkin(3) * t639 + qJ(4) * t599 + qJD(2) * t551 + t438;
t504 = g(3) * t585 + t531 * t582;
t676 = t540 * t633 + qJDD(3);
t593 = -qJDD(2) * pkin(2) + t504 + t676;
t448 = t587 * qJ(3) - t593;
t552 = qJDD(2) + t561;
t415 = (-t543 + t612) * qJ(4) - t552 * pkin(3) - t448;
t603 = -0.2e1 * qJD(4) * t528 - t579 * t413 + t415 * t580;
t358 = 0.2e1 * qJD(4) * t526 + t413 * t580 + t415 * t579;
t677 = t559 * t582 + t640;
t464 = t466 ^ 2;
t465 = t468 ^ 2;
t675 = t526 ^ 2;
t525 = t528 ^ 2;
t573 = t575 ^ 2;
t672 = pkin(2) + pkin(3);
t560 = -t587 - t639;
t645 = t582 * t552;
t499 = t560 * t585 - t645;
t456 = t499 * t583 + t544 * t586;
t670 = pkin(5) * t456;
t620 = t578 + t674;
t546 = t620 * qJDD(1);
t549 = t620 * t588;
t486 = t546 * t583 + t549 * t586;
t669 = pkin(5) * t486;
t535 = t585 * t552;
t494 = t560 * t582 + t535;
t668 = pkin(6) * t494;
t667 = qJ(3) * t585;
t341 = pkin(4) * t607 - pkin(7) * t443 + t603;
t510 = -qJD(2) * pkin(4) - pkin(7) * t528;
t343 = -pkin(4) * t675 - pkin(7) * t608 + qJD(2) * t510 + t358;
t309 = -t341 * t584 + t581 * t343;
t310 = t581 * t341 + t584 * t343;
t280 = -t309 * t584 + t310 * t581;
t666 = t280 * t579;
t665 = t280 * t580;
t554 = t583 * g(1) - g(2) * t586;
t530 = qJDD(1) * pkin(1) + t588 * pkin(6) + t554;
t591 = -pkin(2) * t613 + t530;
t400 = t568 * pkin(2) + t543 * qJ(3) + qJDD(4) - t599 * pkin(3) - qJ(4) * t639 + (qJD(2) * t667 + (-pkin(2) * qJD(2) + t551 + t673) * t582) * qJD(1) + t591;
t359 = pkin(4) * t608 - pkin(7) * t675 + t528 * t510 + t400;
t664 = t359 * t581;
t663 = t359 * t584;
t410 = -t574 - t660;
t662 = t410 * t581;
t661 = t410 * t584;
t476 = qJDD(2) + t657;
t659 = t476 * t579;
t658 = t476 * t580;
t656 = t544 * t582;
t652 = t575 * t581;
t651 = t575 * t584;
t649 = t579 * t400;
t648 = t580 * t400;
t647 = t582 * t530;
t641 = t585 * t530;
t636 = pkin(1) * t544 + pkin(6) * t499;
t635 = pkin(1) * t549 + pkin(6) * t546;
t634 = t549 - t587;
t630 = qJD(2) * t579;
t629 = qJD(2) * t580;
t623 = t583 * qJDD(1);
t621 = t586 * qJDD(2);
t619 = t583 * t660;
t618 = t586 * t660;
t617 = t583 * t657;
t616 = t586 * t657;
t281 = t309 * t581 + t310 * t584;
t609 = t581 * t482 + t584 * t608;
t437 = t504 * t582 - t585 * t611;
t491 = -t554 * t583 - t555 * t586;
t606 = t583 * t561;
t605 = t586 * t561;
t445 = -pkin(1) * t494 + t504;
t548 = -t583 * t588 + t622;
t604 = -pkin(5) * t548 - g(3) * t583;
t601 = pkin(2) * t582 - t667;
t600 = t543 + t612;
t317 = t358 * t579 + t580 * t603;
t318 = t580 * t358 - t579 * t603;
t436 = t504 * t585 + t582 * t611;
t598 = t542 * t585 + t656;
t490 = t554 * t586 - t555 * t583;
t595 = t599 * pkin(2);
t592 = (-qJD(5) - t575) * t468 - t609;
t590 = t633 * t673 + t591;
t589 = qJ(3) * t600 + t590;
t567 = t583 * qJDD(2);
t558 = t587 - t650;
t547 = t586 * t588 + t623;
t538 = t601 * qJDD(1);
t534 = t620 * t626;
t524 = -pkin(5) * t547 + g(3) * t586;
t513 = -t525 - t587;
t512 = -t525 + t587;
t511 = -t587 + t675;
t509 = t534 * t586 + t567;
t508 = t543 * t585 - t578 * t626;
t507 = t534 * t583 - t621;
t506 = t582 * t599 - t626 * t674;
t501 = -t558 * t582 + t535;
t495 = t558 * t585 + t645;
t493 = t600 * t582;
t487 = t546 * t586 - t549 * t583;
t485 = pkin(5) * t487;
t480 = t525 - t675;
t475 = -t587 - t675;
t474 = t508 * t586 - t606;
t473 = t506 * t586 + t606;
t472 = t508 * t583 + t605;
t471 = t506 * t583 - t605;
t470 = t501 * t586 + t582 * t623;
t469 = t501 * t583 - t582 * t622;
t463 = (-t526 * t580 - t528 * t579) * qJD(2);
t462 = (t526 * t579 - t528 * t580) * qJD(2);
t459 = t499 * t586 - t544 * t583;
t453 = pkin(5) * t459;
t452 = -t465 + t573;
t451 = t464 - t573;
t450 = -t641 + t688;
t449 = -t647 - t668;
t447 = -t465 - t573;
t446 = -t611 + t689;
t444 = -t631 + t482;
t440 = -t520 + t608;
t439 = -t525 - t675;
t434 = t482 * t580 + t528 * t630;
t433 = -t482 * t579 + t528 * t629;
t432 = t526 * t629 + t579 * t608;
t431 = -t526 * t630 + t580 * t608;
t430 = qJ(3) * t634 + t593;
t429 = pkin(2) * t634 + t594;
t428 = -t595 + t589;
t427 = -t512 * t579 + t682;
t426 = -t513 * t579 + t658;
t425 = t511 * t580 + t659;
t424 = -t512 * t580 - t683;
t423 = t513 * t580 + t659;
t422 = -t511 * t579 + t658;
t421 = (t544 - t599) * pkin(2) + t589;
t420 = -t595 + (t542 + t600) * qJ(3) + t590;
t419 = t437 * t586 - t530 * t583;
t418 = t437 * t583 + t530 * t586;
t417 = t475 * t580 - t683;
t416 = t475 * t579 + t682;
t414 = t465 - t464;
t407 = -t573 - t464;
t405 = -t462 * t582 + t463 * t585;
t404 = (t466 * t584 - t468 * t581) * t575;
t403 = (t466 * t581 + t468 * t584) * t575;
t402 = (-t560 - t587) * qJ(3) + (-qJDD(2) - t552) * pkin(2) + t445 + t676;
t401 = -t689 - qJ(3) * t553 + (-t557 + t587) * pkin(2) - t594;
t399 = t438 * t585 - t448 * t582;
t398 = t438 * t582 + t448 * t585;
t397 = t443 * t579 + t580 * t678;
t396 = -t440 * t580 - t444 * t579;
t395 = -t443 * t580 + t579 * t678;
t394 = t440 * t579 - t444 * t580;
t392 = -qJD(5) * t468 - t609;
t391 = -t464 - t465;
t390 = -t433 * t582 + t434 * t585;
t389 = -t431 * t582 + t432 * t585;
t388 = -pkin(2) * t646 + t420 * t585 - t688;
t387 = qJ(3) * t492 - t421 * t582 - t668;
t386 = -t429 * t582 + t430 * t585;
t385 = -t424 * t582 + t427 * t585;
t384 = t423 * t582 + t426 * t585;
t383 = -t422 * t582 + t425 * t585;
t382 = -t423 * t585 + t426 * t582;
t381 = t451 * t584 + t662;
t380 = -t452 * t581 + t680;
t379 = t451 * t581 - t661;
t378 = t452 * t584 + t681;
t377 = -t447 * t581 + t661;
t376 = t447 * t584 + t662;
t375 = -t455 + t393;
t370 = (qJD(5) - t575) * t468 + t609;
t369 = t393 * t584 + t468 * t652;
t368 = t393 * t581 - t468 * t651;
t367 = -t392 * t581 - t466 * t651;
t366 = t392 * t584 - t466 * t652;
t365 = t416 * t582 + t417 * t585;
t364 = -t416 * t585 + t417 * t582;
t363 = t407 * t584 - t681;
t362 = t407 * t581 + t680;
t361 = t399 * t586 - t428 * t583;
t360 = t399 * t583 + t428 * t586;
t356 = t384 * t586 - t444 * t583;
t355 = t384 * t583 + t444 * t586;
t354 = -t403 * t579 + t404 * t580;
t353 = -t403 * t580 - t404 * t579;
t352 = -pkin(1) * t398 - pkin(2) * t448 - qJ(3) * t438;
t351 = qJ(3) * t444 - qJ(4) * t423 + t648;
t350 = t365 * t586 - t440 * t583;
t349 = t395 * t582 + t397 * t585;
t348 = -t394 * t582 + t396 * t585;
t347 = t365 * t583 + t440 * t586;
t346 = -t395 * t585 + t397 * t582;
t345 = qJ(3) * t440 - qJ(4) * t416 + t649;
t344 = -pkin(6) * t398 - t428 * t601;
t342 = -qJ(4) * t426 + t444 * t672 - t649;
t340 = t349 * t586 - t439 * t583;
t339 = t349 * t583 + t439 * t586;
t338 = -t379 * t579 + t381 * t580;
t337 = -t378 * t579 + t380 * t580;
t336 = -t379 * t580 - t381 * t579;
t335 = -t378 * t580 - t380 * t579;
t333 = -qJ(4) * t417 + t440 * t672 + t648;
t332 = -t376 * t579 + t377 * t580;
t331 = t376 * t580 + t377 * t579;
t330 = t375 * t581 + t584 * t592;
t329 = -t370 * t584 - t581 * t679;
t328 = -t375 * t584 + t581 * t592;
t327 = -t370 * t581 + t584 * t679;
t326 = -pkin(7) * t376 + t663;
t325 = -t368 * t579 + t369 * t580;
t324 = -t366 * t579 + t367 * t580;
t323 = -t368 * t580 - t369 * t579;
t322 = -t366 * t580 - t367 * t579;
t321 = -t362 * t579 + t363 * t580;
t320 = t362 * t580 + t363 * t579;
t319 = -pkin(7) * t362 + t664;
t316 = -t353 * t582 + t354 * t585;
t315 = qJ(3) * t400 - qJ(4) * t317;
t314 = -pkin(4) * t679 + pkin(7) * t377 + t664;
t313 = -pkin(1) * t382 - qJ(3) * t426 + t423 * t672 - t358;
t312 = -pkin(4) * t370 + pkin(7) * t363 - t663;
t311 = qJ(3) * t439 - qJ(4) * t395 - t317;
t307 = -pkin(1) * t346 - qJ(3) * t397 + t395 * t672;
t306 = -t336 * t582 + t338 * t585;
t305 = -t335 * t582 + t337 * t585;
t304 = t331 * t582 + t332 * t585;
t303 = -t331 * t585 + t332 * t582;
t302 = -qJ(4) * t318 + t400 * t672;
t301 = -pkin(1) * t364 - qJ(3) * t417 + t416 * t672 + t603;
t300 = -qJ(4) * t397 + t439 * t672 - t318;
t299 = -pkin(6) * t382 - t342 * t582 + t351 * t585;
t298 = -t328 * t579 + t330 * t580;
t297 = -t327 * t579 + t329 * t580;
t296 = t328 * t580 + t330 * t579;
t295 = -t327 * t580 - t329 * t579;
t294 = -t323 * t582 + t325 * t585;
t293 = -t322 * t582 + t324 * t585;
t292 = -pkin(6) * t364 - t333 * t582 + t345 * t585;
t291 = t320 * t582 + t321 * t585;
t290 = -t320 * t585 + t321 * t582;
t289 = t304 * t586 - t583 * t679;
t288 = t304 * t583 + t586 * t679;
t287 = t317 * t582 + t318 * t585;
t286 = -t317 * t585 + t318 * t582;
t285 = t287 * t586 - t400 * t583;
t284 = t287 * t583 + t400 * t586;
t283 = t291 * t586 - t370 * t583;
t282 = t291 * t583 + t370 * t586;
t279 = qJ(3) * t679 - qJ(4) * t331 - t314 * t579 + t326 * t580;
t278 = -pkin(4) * t359 + pkin(7) * t281;
t277 = t296 * t582 + t298 * t585;
t276 = -t295 * t582 + t297 * t585;
t275 = -t296 * t585 + t298 * t582;
t274 = -pkin(6) * t346 - t300 * t582 + t311 * t585;
t273 = qJ(3) * t370 - qJ(4) * t320 - t312 * t579 + t319 * t580;
t272 = -pkin(7) * t328 - t280;
t271 = t277 * t586 - t391 * t583;
t270 = t277 * t583 + t391 * t586;
t269 = -qJ(4) * t332 - t580 * t314 - t579 * t326 + t672 * t679;
t268 = -pkin(4) * t391 + pkin(7) * t330 + t281;
t267 = -qJ(4) * t321 - t580 * t312 - t579 * t319 + t370 * t672;
t266 = -pkin(6) * t286 - t302 * t582 + t315 * t585;
t265 = -pkin(1) * t286 - qJ(3) * t318 + t317 * t672;
t264 = -pkin(1) * t303 + pkin(4) * t376 - qJ(3) * t332 + t331 * t672 - t310;
t263 = t281 * t580 - t666;
t262 = t281 * t579 + t665;
t261 = -pkin(1) * t290 + pkin(4) * t362 - qJ(3) * t321 + t320 * t672 - t309;
t260 = -pkin(6) * t303 - t269 * t582 + t279 * t585;
t259 = -pkin(1) * t275 + pkin(4) * t328 - qJ(3) * t298 + t296 * t672;
t258 = -pkin(6) * t290 - t267 * t582 + t273 * t585;
t257 = qJ(3) * t391 - qJ(4) * t296 - t268 * t579 + t272 * t580;
t256 = -qJ(4) * t298 - t580 * t268 - t579 * t272 + t391 * t672;
t255 = t262 * t582 + t263 * t585;
t254 = -t262 * t585 + t263 * t582;
t253 = t255 * t586 - t359 * t583;
t252 = t255 * t583 + t359 * t586;
t251 = -pkin(7) * t665 + qJ(3) * t359 - qJ(4) * t262 - t278 * t579;
t250 = pkin(7) * t666 - qJ(4) * t263 - t580 * t278 + t359 * t672;
t249 = -pkin(6) * t275 - t256 * t582 + t257 * t585;
t248 = -pkin(1) * t254 + pkin(4) * t280 - qJ(3) * t263 + t262 * t672;
t247 = -pkin(6) * t254 - t250 * t582 + t251 * t585;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t547, -t548, 0, t491, 0, 0, 0, 0, 0, 0, t459, -t460, t487, t419, 0, 0, 0, 0, 0, 0, t459, t487, t460, t361, 0, 0, 0, 0, 0, 0, t350, t356, t340, t285, 0, 0, 0, 0, 0, 0, t283, t289, t271, t253; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t548, -t547, 0, t490, 0, 0, 0, 0, 0, 0, t456, -t457, t486, t418, 0, 0, 0, 0, 0, 0, t456, t486, t457, t360, 0, 0, 0, 0, 0, 0, t347, t355, t339, t284, 0, 0, 0, 0, 0, 0, t282, t288, t270, t252; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t494, -t496, 0, -t436, 0, 0, 0, 0, 0, 0, t494, 0, t496, t398, 0, 0, 0, 0, 0, 0, t364, t382, t346, t286, 0, 0, 0, 0, 0, 0, t290, t303, t275, t254; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t548, 0, -t547, 0, t604, -t524, -t490, -pkin(5) * t490, t474, -t686, t470, t473, -t684, t509, -t445 * t583 + t449 * t586 - t670, -t446 * t583 + t450 * t586 + t692, t436 * t586 - t669, -pkin(5) * t418 - (pkin(1) * t583 - pkin(6) * t586) * t436, t474, t470, t686, t509, t684, t473, t387 * t586 - t402 * t583 - t670, t386 * t586 - t538 * t583 - t669, t388 * t586 - t401 * t583 - t692, -pkin(5) * t360 + t344 * t586 - t352 * t583, t390 * t586 + t617, t348 * t586 - t480 * t583, t385 * t586 - t443 * t583, t389 * t586 - t617, t383 * t586 - t583 * t678, t405 * t586 + t567, -pkin(5) * t347 + t292 * t586 - t301 * t583, -pkin(5) * t355 + t299 * t586 - t313 * t583, -pkin(5) * t339 + t274 * t586 - t307 * t583, -pkin(5) * t284 - t265 * t583 + t266 * t586, t294 * t586 - t619, t276 * t586 - t414 * t583, t305 * t586 - t375 * t583, t293 * t586 + t619, t306 * t586 - t583 * t592, t316 * t586 - t574 * t583, -pkin(5) * t282 + t258 * t586 - t261 * t583, -pkin(5) * t288 + t260 * t586 - t264 * t583, -pkin(5) * t270 + t249 * t586 - t259 * t583, -pkin(5) * t252 + t247 * t586 - t248 * t583; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t547, 0, t548, 0, t524, t604, t491, pkin(5) * t491, t472, -t687, t469, t471, -t685, t507, t445 * t586 + t449 * t583 + t453, t446 * t586 + t450 * t583 - t691, t436 * t583 + t485, pkin(5) * t419 - (-pkin(1) * t586 - pkin(6) * t583) * t436, t472, t469, t687, t507, t685, t471, t387 * t583 + t402 * t586 + t453, t386 * t583 + t538 * t586 + t485, t388 * t583 + t401 * t586 + t691, pkin(5) * t361 + t344 * t583 + t352 * t586, t390 * t583 - t616, t348 * t583 + t480 * t586, t385 * t583 + t443 * t586, t389 * t583 + t616, t383 * t583 + t586 * t678, t405 * t583 - t621, pkin(5) * t350 + t292 * t583 + t301 * t586, pkin(5) * t356 + t299 * t583 + t313 * t586, pkin(5) * t340 + t274 * t583 + t307 * t586, pkin(5) * t285 + t265 * t586 + t266 * t583, t294 * t583 + t618, t276 * t583 + t414 * t586, t305 * t583 + t375 * t586, t293 * t583 - t618, t306 * t583 + t586 * t592, t316 * t583 + t574 * t586, pkin(5) * t283 + t258 * t583 + t261 * t586, pkin(5) * t289 + t260 * t583 + t264 * t586, pkin(5) * t271 + t249 * t583 + t259 * t586, pkin(5) * t253 + t247 * t583 + t248 * t586; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t554, t555, 0, 0, t493, t598, t495, t492, t677, 0, t636 + t641, -pkin(1) * t542 - t647 - t690, t437 + t635, pkin(1) * t530 + pkin(6) * t437, t493, t495, -t598, 0, -t677, t492, qJ(3) * t656 + t421 * t585 + t636, t429 * t585 + t430 * t582 + t635, t690 + t582 * t420 + (pkin(1) + t671) * t542, pkin(6) * t399 + (pkin(1) - t602) * t428, t433 * t585 + t434 * t582, t394 * t585 + t396 * t582, t424 * t585 + t427 * t582, t431 * t585 + t432 * t582, t422 * t585 + t425 * t582, t462 * t585 + t463 * t582, pkin(1) * t440 + pkin(6) * t365 + t333 * t585 + t345 * t582, pkin(1) * t444 + pkin(6) * t384 + t342 * t585 + t351 * t582, pkin(1) * t439 + pkin(6) * t349 + t300 * t585 + t311 * t582, pkin(1) * t400 + pkin(6) * t287 + t302 * t585 + t315 * t582, t323 * t585 + t325 * t582, t295 * t585 + t297 * t582, t335 * t585 + t337 * t582, t322 * t585 + t324 * t582, t336 * t585 + t338 * t582, t353 * t585 + t354 * t582, pkin(1) * t370 + pkin(6) * t291 + t267 * t585 + t273 * t582, pkin(1) * t679 + pkin(6) * t304 + t269 * t585 + t279 * t582, pkin(1) * t391 + pkin(6) * t277 + t256 * t585 + t257 * t582, pkin(1) * t359 + pkin(6) * t255 + t250 * t585 + t251 * t582;];
tauB_reg = t1;
