% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRPPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d5,theta1,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:37
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRPPR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPPR4_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPPR4_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPPR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPPR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRPPR4_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:36:58
% EndTime: 2019-12-31 17:37:04
% DurationCPUTime: 4.75s
% Computational Cost: add. (10335->409), mult. (23577->586), div. (0->0), fcn. (15634->8), ass. (0->282)
t391 = sin(pkin(8));
t386 = t391 ^ 2;
t393 = cos(pkin(8));
t387 = t393 ^ 2;
t400 = qJD(2) ^ 2;
t364 = (t386 + t387) * t400;
t352 = t391 * t364;
t396 = sin(qJ(2));
t398 = cos(qJ(2));
t424 = t398 * qJDD(2);
t322 = -t396 * t352 + t391 * t424;
t425 = t396 * qJDD(2);
t325 = t398 * t352 + t391 * t425;
t392 = sin(pkin(7));
t394 = cos(pkin(7));
t267 = t394 * t322 - t392 * t325;
t480 = qJ(1) * t267;
t270 = t392 * t322 + t394 * t325;
t479 = qJ(1) * t270;
t395 = sin(qJ(5));
t397 = cos(qJ(5));
t406 = t391 * t395 + t393 * t397;
t346 = t406 * qJD(2);
t431 = qJD(2) * t393;
t432 = qJD(2) * t391;
t348 = -t395 * t431 + t397 * t432;
t451 = t348 * t346;
t475 = qJDD(5) - t451;
t478 = t395 * t475;
t477 = t397 * t475;
t369 = t394 * g(1) + t392 * g(2);
t414 = t392 * g(1) - t394 * g(2);
t411 = t396 * t369 + t398 * t414;
t433 = t398 * t369 - t396 * t414;
t413 = -t396 * t411 - t398 * t433;
t262 = t396 * t433 - t398 * t411;
t449 = t392 * t262;
t218 = t394 * t413 + t449;
t444 = t394 * t262;
t476 = -t392 * t413 + t444;
t367 = t398 * t400 + t425;
t439 = t396 * t400;
t368 = t424 - t439;
t312 = -t392 * t367 + t394 * t368;
t389 = g(3) - qJDD(1);
t337 = pkin(5) * t367 - t398 * t389;
t407 = -pkin(5) * t368 - t396 * t389;
t474 = -qJ(1) * t312 + t392 * t337 + t394 * t407;
t473 = pkin(5) * t322;
t472 = pkin(5) * t325;
t471 = -pkin(1) * t322 + qJ(3) * t352;
t462 = t394 * t367 + t392 * t368;
t469 = qJ(1) * t462 + t394 * t337 - t392 * t407;
t382 = t386 * qJDD(2);
t383 = t387 * qJDD(2);
t363 = t383 - t382;
t365 = (-t386 + t387) * t400;
t306 = t396 * t363 + t398 * t365;
t309 = t398 * t363 - t396 * t365;
t468 = t394 * t306 + t392 * t309;
t467 = t392 * t306 - t394 * t309;
t353 = t393 * t364;
t415 = t393 * t424;
t324 = -t396 * t353 + t415;
t327 = t398 * t353 + t393 * t425;
t268 = t394 * t324 - t392 * t327;
t466 = t392 * t324 + t394 * t327;
t404 = t406 * qJDD(2);
t316 = -t394 * t369 - t392 * t414;
t315 = -t392 * t369 + t394 * t414;
t342 = t346 ^ 2;
t343 = t348 ^ 2;
t460 = pkin(3) + pkin(4);
t459 = pkin(3) * t393;
t458 = pkin(4) * t400;
t362 = t383 + t382;
t305 = t396 * t362 + t398 * t364;
t457 = pkin(5) * t305;
t456 = pkin(5) * t324;
t308 = t398 * t362 - t396 * t364;
t249 = t394 * t305 + t392 * t308;
t455 = qJ(1) * t249;
t454 = qJ(1) * t268;
t452 = qJ(4) * t391;
t390 = qJDD(2) * pkin(2);
t450 = t391 * t393;
t445 = t392 * t389;
t443 = t394 * t389;
t427 = qJDD(2) * t391;
t378 = qJ(4) * t427;
t294 = -t400 * qJ(3) + qJDD(3) - t390 - t411;
t426 = qJDD(2) * t393;
t380 = pkin(3) * t426;
t403 = -t294 + t380;
t417 = qJD(4) * t432;
t275 = -t378 - t403 - 0.2e1 * t417;
t244 = -pkin(4) * t426 + pkin(6) * t364 + t275;
t442 = t395 * t244;
t292 = qJDD(5) + t451;
t441 = t395 * t292;
t440 = t396 * t294;
t438 = t397 * t244;
t437 = t397 * t292;
t436 = t398 * t294;
t300 = -t400 * pkin(2) + qJDD(2) * qJ(3) - t433;
t435 = t391 * t300 + t393 * t389;
t434 = t393 * t300 - t391 * t389;
t430 = t346 * qJD(5);
t429 = t348 * qJD(5);
t428 = qJD(2) * qJD(3);
t423 = t396 * t451;
t422 = t398 * t451;
t421 = pkin(1) * t305 + pkin(2) * t364 + qJ(3) * t362;
t420 = pkin(1) * t324 + pkin(2) * t426 - qJ(3) * t353;
t409 = -t452 - t459;
t360 = t409 * qJD(2);
t419 = -t360 * t431 - t434;
t418 = t391 * t428;
t416 = t391 * t426;
t373 = 0.2e1 * t418;
t410 = t360 * t432 + qJDD(4) + t435;
t405 = t373 + t410;
t233 = (-pkin(6) * qJDD(2) - t393 * t458) * t391 + t405;
t375 = 0.2e1 * t393 * t428;
t246 = t375 - t419;
t237 = -pkin(6) * t426 - t387 * t458 + t246;
t189 = -t397 * t233 + t395 * t237;
t283 = t373 + t435;
t284 = t375 + t434;
t227 = t391 * t283 + t393 * t284;
t408 = pkin(3) * t391 - qJ(4) * t393;
t345 = -t395 * t426 + t397 * t427;
t191 = t395 * t233 + t397 * t237;
t165 = -t397 * t189 + t395 * t191;
t166 = t395 * t189 + t397 * t191;
t226 = t393 * t283 - t391 * t284;
t329 = t367 * t450;
t330 = t391 * t415 - t439 * t450;
t279 = t394 * t329 + t392 * t330;
t282 = t392 * t329 - t394 * t330;
t399 = qJD(5) ^ 2;
t372 = 0.2e1 * t417;
t355 = t408 * qJDD(2);
t333 = -t343 - t399;
t332 = -t343 + t399;
t331 = t342 - t399;
t317 = pkin(5) * t327;
t302 = pkin(5) * t308;
t299 = t343 - t342;
t298 = t345 - t430;
t297 = t345 - 0.2e1 * t430;
t296 = -t404 - t429;
t295 = 0.2e1 * t429 + t404;
t290 = -t399 - t342;
t287 = (-t346 * t397 + t348 * t395) * qJD(5);
t286 = (t346 * t395 + t348 * t397) * qJD(5);
t285 = -t342 - t343;
t277 = -t294 + t372 + t378 + 0.2e1 * t380;
t276 = t372 + 0.2e1 * t378 + t403;
t273 = t397 * t298 - t395 * t429;
t269 = -t395 * t298 - t397 * t429;
t265 = -t395 * t296 + t397 * t430;
t264 = -t397 * t296 - t395 * t430;
t259 = qJ(1) * t466;
t258 = -t395 * t333 - t437;
t257 = -t395 * t332 + t477;
t256 = t397 * t331 - t441;
t255 = t397 * t333 - t441;
t254 = -t397 * t332 - t478;
t253 = -t395 * t331 - t437;
t252 = -pkin(3) * t382 + t393 * t276;
t251 = qJ(4) * t383 - t391 * t277;
t250 = -t392 * t305 + t394 * t308;
t248 = pkin(1) * t389 + pkin(5) * t413;
t247 = qJ(1) * t250;
t245 = -t410 - 0.2e1 * t418;
t243 = -t397 * t295 - t395 * t297;
t242 = t395 * t345 - t397 * t404;
t241 = t395 * t295 - t397 * t297;
t240 = -t397 * t345 - t395 * t404;
t239 = t397 * t290 - t478;
t238 = t395 * t290 + t477;
t236 = pkin(3) * t364 + t246;
t235 = qJ(4) * t364 + t405;
t234 = -pkin(3) * t386 * t400 + (t400 * t452 - 0.2e1 * t428) * t393 + t419;
t232 = (-pkin(3) * t450 + qJ(4) * t387) * t400 + t405;
t230 = -t391 * t286 + t393 * t287;
t229 = -t396 * qJDD(5) + t398 * t230;
t228 = t398 * qJDD(5) + t396 * t230;
t224 = -t396 * t284 + t393 * t436 + t473;
t223 = -t396 * t283 + t391 * t436 - t456;
t222 = t398 * t284 + t393 * t440 + t472;
t221 = t398 * t283 + t391 * t440 - t317;
t220 = -t391 * t269 + t393 * t273;
t219 = -t391 * t264 + t393 * t265;
t216 = t391 * t255 + t393 * t258;
t215 = -t391 * t254 + t393 * t257;
t214 = -t391 * t253 + t393 * t256;
t213 = -t393 * t255 + t391 * t258;
t212 = t398 * t226 - t457;
t211 = t396 * t226 + t302;
t210 = -t391 * t245 + t393 * t246;
t209 = t393 * t245 + t391 * t246;
t208 = t398 * t227 + t440;
t207 = t396 * t227 - t436;
t206 = t398 * t215 - t396 * t345;
t205 = t398 * t214 + t396 * t404;
t204 = t396 * t215 + t398 * t345;
t203 = t396 * t214 - t398 * t404;
t202 = -t391 * t241 + t393 * t243;
t201 = t391 * t240 + t393 * t242;
t200 = -t393 * t240 + t391 * t242;
t199 = t391 * t238 + t393 * t239;
t198 = -t393 * t238 + t391 * t239;
t197 = t398 * t220 - t423;
t196 = t398 * t219 + t423;
t195 = t396 * t220 + t422;
t194 = t396 * t219 - t422;
t193 = t393 * t235 - t391 * t236;
t192 = t398 * t216 - t396 * t297;
t190 = t396 * t216 + t398 * t297;
t188 = -pkin(6) * t255 + qJ(4) * t297 - t438;
t187 = -t396 * t234 + t398 * t252 - t473;
t186 = t398 * t234 + t396 * t252 - t472;
t185 = -t396 * t232 + t398 * t251 - t456;
t184 = t398 * t232 + t396 * t251 - t317;
t183 = -pkin(6) * t238 + qJ(4) * t295 - t442;
t182 = t398 * t202 - t396 * t299;
t181 = t396 * t202 + t398 * t299;
t180 = t398 * t199 - t396 * t295;
t179 = t396 * t199 + t398 * t295;
t178 = t398 * t210 + t396 * t275;
t177 = t396 * t210 - t398 * t275;
t176 = -pkin(6) * t258 + t460 * t297 + t442;
t175 = t398 * t201 - t396 * t285;
t174 = t396 * t201 + t398 * t285;
t173 = t398 * t193 - t396 * t355 - t457;
t172 = t396 * t193 + t398 * t355 + t302;
t171 = -pkin(6) * t239 + t460 * t295 - t438;
t170 = -qJ(3) * t209 + t408 * t275;
t169 = -pkin(2) * t209 - pkin(3) * t245 - qJ(4) * t246;
t168 = -t392 * t207 + t394 * t208;
t167 = t394 * t207 + t392 * t208;
t164 = -t392 * t190 + t394 * t192;
t163 = t394 * t190 + t392 * t192;
t162 = -pkin(5) * t207 - (pkin(2) * t396 - qJ(3) * t398) * t226;
t161 = -pkin(2) * t200 - qJ(4) * t242 + t460 * t240;
t160 = -t392 * t179 + t394 * t180;
t159 = t394 * t179 + t392 * t180;
t158 = -t392 * t177 + t394 * t178;
t157 = t394 * t177 + t392 * t178;
t156 = -pkin(6) * t165 - qJ(4) * t244;
t155 = -t392 * t174 + t394 * t175;
t154 = t394 * t174 + t392 * t175;
t153 = -pkin(6) * t240 + qJ(4) * t285 - t165;
t152 = pkin(5) * t208 - (-pkin(2) * t398 - qJ(3) * t396 - pkin(1)) * t226;
t151 = -pkin(2) * t213 - qJ(4) * t258 + t460 * t255 - t191;
t150 = -pkin(6) * t166 - t460 * t244;
t149 = -qJ(3) * t213 - t391 * t176 + t393 * t188;
t148 = -pkin(6) * t242 + t460 * t285 - t166;
t147 = -pkin(2) * t198 - qJ(4) * t239 + t460 * t238 - t189;
t146 = -qJ(3) * t198 - t391 * t171 + t393 * t183;
t145 = t391 * t165 + t393 * t166;
t144 = -t393 * t165 + t391 * t166;
t143 = -pkin(5) * t177 - t396 * t169 + t398 * t170;
t142 = t398 * t145 + t396 * t244;
t141 = t396 * t145 - t398 * t244;
t140 = -pkin(1) * t209 + pkin(5) * t178 + t398 * t169 + t396 * t170;
t139 = -qJ(3) * t200 - t391 * t148 + t393 * t153;
t138 = -pkin(5) * t190 + t398 * t149 - t396 * t151;
t137 = -pkin(1) * t213 + pkin(5) * t192 + t396 * t149 + t398 * t151;
t136 = -pkin(5) * t179 + t398 * t146 - t396 * t147;
t135 = -pkin(1) * t198 + pkin(5) * t180 + t396 * t146 + t398 * t147;
t134 = -t392 * t141 + t394 * t142;
t133 = t394 * t141 + t392 * t142;
t132 = -qJ(3) * t144 - t391 * t150 + t393 * t156;
t131 = -pkin(2) * t144 - qJ(4) * t166 + t460 * t165;
t130 = -pkin(5) * t174 + t398 * t139 - t396 * t161;
t129 = -pkin(1) * t200 + pkin(5) * t175 + t396 * t139 + t398 * t161;
t128 = -pkin(5) * t141 - t396 * t131 + t398 * t132;
t127 = -pkin(1) * t144 + pkin(5) * t142 + t398 * t131 + t396 * t132;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t316, 0, 0, 0, 0, 0, 0, -t462, -t312, 0, t218, 0, 0, 0, 0, 0, 0, -t466, t270, t250, t168, 0, 0, 0, 0, 0, 0, -t466, t250, -t270, t158, 0, 0, 0, 0, 0, 0, t160, t164, t155, t134; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t315, 0, 0, 0, 0, 0, 0, t312, -t462, 0, -t476, 0, 0, 0, 0, 0, 0, t268, -t267, t249, t167, 0, 0, 0, 0, 0, 0, t268, t249, t267, t157, 0, 0, 0, 0, 0, 0, t159, t163, t154, t133; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t389, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t389, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t226, 0, 0, 0, 0, 0, 0, 0, 0, 0, t209, 0, 0, 0, 0, 0, 0, t198, t213, t200, t144; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t445, -t443, -t315, -qJ(1) * t315, 0, 0, t312, 0, -t462, 0, t474, t469, t476, pkin(5) * t444 + qJ(1) * t476 - t392 * t248, -t282, -t467, t270, t282, t466, 0, -t392 * t221 + t394 * t223 - t454, -t392 * t222 + t394 * t224 + t480, -t392 * t211 + t394 * t212 - t455, -qJ(1) * t167 - t392 * t152 + t394 * t162, -t282, t270, t467, 0, -t466, t282, -t392 * t184 + t394 * t185 - t454, -t392 * t172 + t394 * t173 - t455, -t392 * t186 + t394 * t187 - t480, -qJ(1) * t157 - t392 * t140 + t394 * t143, -t392 * t195 + t394 * t197, -t392 * t181 + t394 * t182, -t392 * t204 + t394 * t206, -t392 * t194 + t394 * t196, -t392 * t203 + t394 * t205, -t392 * t228 + t394 * t229, -qJ(1) * t159 - t392 * t135 + t394 * t136, -qJ(1) * t163 - t392 * t137 + t394 * t138, -qJ(1) * t154 - t392 * t129 + t394 * t130, -qJ(1) * t133 - t392 * t127 + t394 * t128; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t443, -t445, t316, qJ(1) * t316, 0, 0, t462, 0, t312, 0, -t469, t474, t218, pkin(5) * t449 + qJ(1) * t218 + t394 * t248, t279, t468, -t267, -t279, -t268, 0, t394 * t221 + t392 * t223 - t259, t394 * t222 + t392 * t224 + t479, t394 * t211 + t392 * t212 + t247, qJ(1) * t168 + t394 * t152 + t392 * t162, t279, -t267, -t468, 0, t268, -t279, t394 * t184 + t392 * t185 - t259, t394 * t172 + t392 * t173 + t247, t394 * t186 + t392 * t187 - t479, qJ(1) * t158 + t394 * t140 + t392 * t143, t394 * t195 + t392 * t197, t394 * t181 + t392 * t182, t394 * t204 + t392 * t206, t394 * t194 + t392 * t196, t394 * t203 + t392 * t205, t394 * t228 + t392 * t229, qJ(1) * t160 + t394 * t135 + t392 * t136, qJ(1) * t164 + t394 * t137 + t392 * t138, qJ(1) * t155 + t394 * t129 + t392 * t130, qJ(1) * t134 + t394 * t127 + t392 * t128; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t414, t369, 0, 0, 0, 0, 0, 0, 0, qJDD(2), pkin(1) * t368 + t411, -pkin(1) * t367 + t433, 0, -pkin(1) * t262, t382, 0.2e1 * t416, 0, t383, 0, 0, -t393 * t294 + t420, (t294 - t390) * t391 + t471, t227 + t421, pkin(1) * t207 - pkin(2) * t294 + qJ(3) * t227, t382, 0, -0.2e1 * t416, 0, 0, t383, (t277 + t378) * t393 + t420, t391 * t235 + t393 * t236 + t421, (t276 + (pkin(2) + t459) * qJDD(2)) * t391 - t471, pkin(1) * t177 + qJ(3) * t210 + (-pkin(2) + t409) * t275, t393 * t269 + t391 * t273, t393 * t241 + t391 * t243, t393 * t254 + t391 * t257, t393 * t264 + t391 * t265, t393 * t253 + t391 * t256, t393 * t286 + t391 * t287, pkin(1) * t179 + pkin(2) * t295 + qJ(3) * t199 + t393 * t171 + t391 * t183, pkin(1) * t190 + pkin(2) * t297 + qJ(3) * t216 + t393 * t176 + t391 * t188, pkin(1) * t174 + pkin(2) * t285 + qJ(3) * t201 + t393 * t148 + t391 * t153, pkin(1) * t141 - pkin(2) * t244 + qJ(3) * t145 + t393 * t150 + t391 * t156;];
tauB_reg = t1;
