% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRPPR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d5,theta1,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:37
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRPPR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPPR4_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPPR4_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPPR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPPR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRPPR4_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:37:11
% EndTime: 2019-12-31 17:37:13
% DurationCPUTime: 1.54s
% Computational Cost: add. (2914->159), mult. (6728->202), div. (0->0), fcn. (4521->8), ass. (0->117)
t1014 = sin(pkin(7));
t1016 = cos(pkin(7));
t1013 = sin(pkin(8));
t1018 = sin(qJ(2));
t1020 = cos(qJ(2));
t1032 = t1020 * qJDD(2);
t1022 = qJD(2) ^ 2;
t1008 = t1013 ^ 2;
t1015 = cos(pkin(8));
t1009 = t1015 ^ 2;
t1034 = t1008 + t1009;
t990 = t1034 * t1022;
t983 = t1013 * t990;
t969 = t1013 * t1032 - t1018 * t983;
t1033 = t1018 * qJDD(2);
t971 = t1013 * t1033 + t1020 * t983;
t1046 = t1014 * t971 - t1016 * t969;
t1045 = t1014 * t969 + t1016 * t971;
t1017 = sin(qJ(5));
t1019 = cos(qJ(5));
t1025 = t1013 * t1017 + t1015 * t1019;
t952 = t1025 * qJDD(2);
t979 = t1025 * qJD(2);
t1044 = t979 ^ 2;
t1038 = qJD(2) * t1015;
t1039 = qJD(2) * t1013;
t981 = -t1017 * t1038 + t1019 * t1039;
t1043 = t981 ^ 2;
t1042 = 2 * qJD(3);
t1041 = 2 * qJD(5);
t1040 = t981 * t979;
t1028 = t1014 * g(1) - t1016 * g(2);
t993 = -t1016 * g(1) - t1014 * g(2);
t967 = t1018 * t1028 + t1020 * t993;
t1037 = t1008 * t1022;
t1036 = t1009 * t1022;
t1035 = t1015 * t1022;
t1005 = t1013 * qJDD(2);
t1006 = t1015 * qJDD(2);
t1011 = -g(3) + qJDD(1);
t1001 = t1015 * t1011;
t1031 = qJDD(4) - t1001;
t1030 = -0.2e1 * t1039;
t963 = -t1022 * pkin(2) + qJDD(2) * qJ(3) + t967;
t954 = t1013 * t1011 + t1015 * t963 + t1038 * t1042;
t991 = -t1018 * t1022 + t1032;
t992 = -t1020 * t1022 - t1033;
t1029 = -t1014 * t991 + t1016 * t992;
t966 = -t1018 * t993 + t1020 * t1028;
t988 = (-pkin(3) * t1015 - qJ(4) * t1013) * qJD(2);
t942 = t988 * t1038 + t954;
t978 = -t1005 * t1019 + t1017 * t1006;
t1027 = t963 + (t1042 + t988) * qJD(2);
t1026 = t1014 * t992 + t1016 * t991;
t960 = -qJDD(2) * pkin(2) - t1022 * qJ(3) + qJDD(3) - t966;
t951 = -pkin(3) * t1006 - qJ(4) * t1005 + qJD(4) * t1030 + t960;
t1021 = qJD(5) ^ 2;
t994 = t1013 * t1035;
t989 = t1034 * qJDD(2);
t984 = t1015 * t990;
t974 = -t1021 - t1043;
t973 = -t1015 * t1033 - t1020 * t984;
t970 = t1015 * t1032 - t1018 * t984;
t965 = -t1018 * t990 + t1020 * t989;
t964 = t1018 * t989 + t1020 * t990;
t962 = -t979 * t1041 - t978;
t961 = t981 * t1041 + t952;
t959 = -qJDD(5) - t1040;
t958 = qJDD(5) - t1040;
t957 = -t1021 - t1044;
t955 = -t1043 - t1044;
t953 = qJD(3) * t1030 - t1013 * t963 + t1001;
t950 = -t1014 * t970 + t1016 * t973;
t949 = t1014 * t973 + t1016 * t970;
t948 = -t1018 * t966 + t1020 * t967;
t947 = t1018 * t967 + t1020 * t966;
t946 = -t1017 * t974 + t1019 * t959;
t945 = t1017 * t959 + t1019 * t974;
t944 = -t1014 * t964 + t1016 * t965;
t943 = t1014 * t965 + t1016 * t964;
t941 = t1013 * t1027 + t1031;
t940 = -pkin(4) * t1006 + pkin(6) * t990 + t951;
t939 = -t1017 * t978 - t1019 * t952;
t938 = -t1017 * t952 + t1019 * t978;
t937 = -t1017 * t958 + t1019 * t957;
t936 = t1017 * t957 + t1019 * t958;
t935 = -pkin(4) * t1036 - pkin(6) * t1006 + t942;
t934 = (-pkin(4) * t1035 - pkin(6) * qJDD(2) + t1027) * t1013 + t1031;
t933 = -t1013 * t953 + t1015 * t954;
t932 = t1013 * t954 + t1015 * t953;
t931 = t1013 * t945 + t1015 * t946;
t930 = t1013 * t946 - t1015 * t945;
t929 = t1013 * t941 + t1015 * t942;
t928 = t1013 * t942 - t1015 * t941;
t927 = t1018 * t960 + t1020 * t933;
t926 = t1018 * t933 - t1020 * t960;
t925 = t1013 * t938 + t1015 * t939;
t924 = t1013 * t939 - t1015 * t938;
t923 = t1013 * t936 + t1015 * t937;
t922 = t1013 * t937 - t1015 * t936;
t921 = -t1018 * t962 + t1020 * t931;
t920 = t1017 * t934 + t1019 * t935;
t919 = t1018 * t931 + t1020 * t962;
t918 = -t1017 * t935 + t1019 * t934;
t917 = -t1018 * t961 + t1020 * t923;
t916 = t1018 * t923 + t1020 * t961;
t915 = t1018 * t951 + t1020 * t929;
t914 = t1018 * t929 - t1020 * t951;
t913 = -t1018 * t955 + t1020 * t925;
t912 = t1018 * t925 + t1020 * t955;
t911 = -t1017 * t918 + t1019 * t920;
t910 = t1017 * t920 + t1019 * t918;
t909 = t1013 * t910 + t1015 * t911;
t908 = t1013 * t911 - t1015 * t910;
t907 = t1018 * t940 + t1020 * t909;
t906 = t1018 * t909 - t1020 * t940;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1014 * t1028 + t1016 * t993, 0, 0, 0, 0, 0, 0, t1029, -t1026, 0, -t1014 * t947 + t1016 * t948, 0, 0, 0, 0, 0, 0, t950, t1045, t944, -t1014 * t926 + t1016 * t927, 0, 0, 0, 0, 0, 0, t950, t944, -t1045, -t1014 * t914 + t1016 * t915, 0, 0, 0, 0, 0, 0, -t1014 * t916 + t1016 * t917, -t1014 * t919 + t1016 * t921, -t1014 * t912 + t1016 * t913, -t1014 * t906 + t1016 * t907; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1014 * t993 + t1016 * t1028, 0, 0, 0, 0, 0, 0, t1026, t1029, 0, t1014 * t948 + t1016 * t947, 0, 0, 0, 0, 0, 0, t949, t1046, t943, t1014 * t927 + t1016 * t926, 0, 0, 0, 0, 0, 0, t949, t943, -t1046, t1014 * t915 + t1016 * t914, 0, 0, 0, 0, 0, 0, t1014 * t917 + t1016 * t916, t1014 * t921 + t1016 * t919, t1014 * t913 + t1016 * t912, t1014 * t907 + t1016 * t906; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1011, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1011, 0, 0, 0, 0, 0, 0, 0, 0, 0, t932, 0, 0, 0, 0, 0, 0, 0, 0, 0, t928, 0, 0, 0, 0, 0, 0, t922, t930, t924, t908; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t993, 0, 0, 0, 0, 0, 0, t992, -t991, 0, t948, 0, 0, 0, 0, 0, 0, t973, t971, t965, t927, 0, 0, 0, 0, 0, 0, t973, t965, -t971, t915, 0, 0, 0, 0, 0, 0, t917, t921, t913, t907; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1028, 0, 0, 0, 0, 0, 0, t991, t992, 0, t947, 0, 0, 0, 0, 0, 0, t970, -t969, t964, t926, 0, 0, 0, 0, 0, 0, t970, t964, t969, t914, 0, 0, 0, 0, 0, 0, t916, t919, t912, t906; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1011, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1011, 0, 0, 0, 0, 0, 0, 0, 0, 0, t932, 0, 0, 0, 0, 0, 0, 0, 0, 0, t928, 0, 0, 0, 0, 0, 0, t922, t930, t924, t908; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1022, -qJDD(2), 0, t967, 0, 0, 0, 0, 0, 0, -t984, t983, t989, t933, 0, 0, 0, 0, 0, 0, -t984, t989, -t983, t929, 0, 0, 0, 0, 0, 0, t923, t931, t925, t909; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1022, 0, t966, 0, 0, 0, 0, 0, 0, t1006, -t1005, t990, -t960, 0, 0, 0, 0, 0, 0, t1006, t990, t1005, -t951, 0, 0, 0, 0, 0, 0, t961, t962, t955, -t940; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1011, 0, 0, 0, 0, 0, 0, 0, 0, 0, t932, 0, 0, 0, 0, 0, 0, 0, 0, 0, t928, 0, 0, 0, 0, 0, 0, t922, t930, t924, t908; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1036, t994, t1006, t954, 0, 0, 0, 0, 0, 0, -t1036, t1006, -t994, t942, 0, 0, 0, 0, 0, 0, t937, t946, t939, t911; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t994, -t1037, -t1005, t953, 0, 0, 0, 0, 0, 0, t994, -t1005, t1037, -t941, 0, 0, 0, 0, 0, 0, -t936, -t945, -t938, -t910; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1006, t1005, -t990, t960, 0, 0, 0, 0, 0, 0, -t1006, -t990, -t1005, t951, 0, 0, 0, 0, 0, 0, -t961, -t962, -t955, t940; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1036, t1006, -t994, t942, 0, 0, 0, 0, 0, 0, t937, t946, t939, t911; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1006, -t990, -t1005, t951, 0, 0, 0, 0, 0, 0, -t961, -t962, -t955, t940; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t994, t1005, -t1037, t941, 0, 0, 0, 0, 0, 0, t936, t945, t938, t910; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t957, t959, -t952, t920; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t958, t974, t978, t918; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t961, t962, t955, -t940;];
f_new_reg = t1;
