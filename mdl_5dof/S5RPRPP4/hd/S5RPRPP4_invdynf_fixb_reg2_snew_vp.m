% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRPP4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:15
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRPP4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPP4_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPP4_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPP4_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPP4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPRPP4_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:15:17
% EndTime: 2019-12-31 18:15:19
% DurationCPUTime: 2.20s
% Computational Cost: add. (3664->197), mult. (8131->184), div. (0->0), fcn. (5069->6), ass. (0->108)
t1265 = sin(pkin(7));
t1266 = cos(pkin(7));
t1267 = sin(qJ(3));
t1269 = cos(qJ(3));
t1237 = (-t1265 * t1269 - t1266 * t1267) * qJD(1);
t1295 = qJD(1) * t1269;
t1296 = qJD(1) * t1267;
t1239 = -t1265 * t1296 + t1266 * t1295;
t1292 = t1239 * t1237;
t1215 = -qJDD(3) + t1292;
t1236 = t1239 ^ 2;
t1271 = qJD(3) ^ 2;
t1303 = -t1236 - t1271;
t1193 = t1265 * t1215 + t1266 * t1303;
t1195 = t1266 * t1215 - t1265 * t1303;
t1176 = t1269 * t1193 + t1267 * t1195;
t1268 = sin(qJ(1));
t1270 = cos(qJ(1));
t1281 = qJD(3) * t1295;
t1285 = t1267 * qJDD(1);
t1243 = -t1281 - t1285;
t1283 = qJD(3) * t1296;
t1284 = t1269 * qJDD(1);
t1244 = -t1283 + t1284;
t1278 = t1265 * t1243 + t1266 * t1244;
t1294 = qJD(3) * t1237;
t1309 = t1278 + t1294;
t1319 = t1268 * t1176 + t1270 * t1309;
t1318 = t1270 * t1176 - t1268 * t1309;
t1279 = t1266 * t1243 - t1265 * t1244;
t1293 = qJD(3) * t1239;
t1302 = t1279 - t1293;
t1214 = qJDD(3) + t1292;
t1216 = t1237 ^ 2;
t1304 = -t1216 - t1271;
t1307 = -t1265 * t1214 + t1266 * t1304;
t1308 = t1266 * t1214 + t1265 * t1304;
t1310 = t1267 * t1307 + t1269 * t1308;
t1317 = -t1268 * t1302 - t1270 * t1310;
t1316 = t1268 * t1310 - t1270 * t1302;
t1172 = t1267 * t1193 - t1269 * t1195;
t1202 = t1236 + t1216;
t1208 = -t1294 + t1278;
t1276 = t1279 + t1293;
t1300 = t1265 * t1208 + t1266 * t1276;
t1301 = -t1266 * t1208 + t1265 * t1276;
t1305 = t1267 * t1300 + t1269 * t1301;
t1313 = -t1270 * t1202 + t1268 * t1305;
t1312 = -t1268 * t1202 - t1270 * t1305;
t1311 = -t1267 * t1308 + t1269 * t1307;
t1306 = -t1267 * t1301 + t1269 * t1300;
t1299 = 2 * qJD(4);
t1298 = 2 * qJD(5);
t1297 = pkin(6) + pkin(1);
t1262 = t1267 ^ 2;
t1272 = qJD(1) ^ 2;
t1291 = t1262 * t1272;
t1252 = t1268 * g(1) - t1270 * g(2);
t1275 = -t1272 * qJ(2) + qJDD(2) - t1252;
t1225 = -t1297 * qJDD(1) + t1275;
t1288 = t1269 * t1225;
t1287 = t1269 * t1272;
t1263 = t1269 ^ 2;
t1286 = t1262 + t1263;
t1282 = t1267 * t1287;
t1218 = -t1269 * g(3) + t1267 * t1225;
t1277 = qJD(3) * pkin(3) - qJ(4) * t1295;
t1196 = -pkin(3) * t1291 + t1243 * qJ(4) - qJD(3) * t1277 + t1218;
t1273 = qJDD(3) * pkin(3) - t1244 * qJ(4) + t1288 + (-qJD(3) * qJ(4) * qJD(1) - pkin(3) * t1287 + g(3)) * t1267;
t1174 = t1266 * t1196 + t1237 * t1299 + t1265 * t1273;
t1280 = t1265 * t1196 - t1266 * t1273;
t1253 = -t1270 * g(1) - t1268 * g(2);
t1274 = -qJDD(1) * qJ(2) - 0.2e1 * qJD(2) * qJD(1) - t1253;
t1197 = t1243 * pkin(3) - qJDD(4) - t1277 * t1295 + (t1262 * qJ(4) + t1297) * t1272 + t1274;
t1256 = -t1263 * t1272 - t1271;
t1255 = -t1271 - t1291;
t1251 = -qJDD(3) - t1282;
t1250 = qJDD(3) - t1282;
t1249 = t1286 * t1272;
t1248 = t1268 * qJDD(1) + t1270 * t1272;
t1247 = t1270 * qJDD(1) - t1268 * t1272;
t1246 = t1286 * qJDD(1);
t1245 = -0.2e1 * t1283 + t1284;
t1242 = 0.2e1 * t1281 + t1285;
t1235 = qJDD(1) * pkin(1) - t1275;
t1228 = t1272 * pkin(1) + t1274;
t1224 = t1297 * t1272 + t1274;
t1222 = t1269 * t1251 - t1267 * t1256;
t1221 = -t1267 * t1250 + t1269 * t1255;
t1220 = t1267 * t1251 + t1269 * t1256;
t1219 = t1269 * t1250 + t1267 * t1255;
t1217 = t1267 * g(3) + t1288;
t1210 = -t1237 * pkin(4) - t1239 * qJ(5);
t1190 = -t1267 * t1217 + t1269 * t1218;
t1189 = t1269 * t1217 + t1267 * t1218;
t1173 = -0.2e1 * qJD(4) * t1239 - t1280;
t1168 = t1302 * pkin(4) + qJ(5) * t1309 + t1239 * t1298 + t1197;
t1167 = qJDD(5) - t1271 * qJ(5) - qJDD(3) * pkin(4) + (t1299 + t1210) * t1239 + t1280;
t1166 = -t1271 * pkin(4) + qJDD(3) * qJ(5) + qJD(3) * t1298 + t1237 * t1210 + t1174;
t1161 = -t1265 * t1173 + t1266 * t1174;
t1160 = t1266 * t1173 + t1265 * t1174;
t1159 = t1266 * t1166 + t1265 * t1167;
t1158 = t1265 * t1166 - t1266 * t1167;
t1157 = -t1267 * t1160 + t1269 * t1161;
t1156 = t1269 * t1160 + t1267 * t1161;
t1155 = -t1267 * t1158 + t1269 * t1159;
t1154 = t1269 * t1158 + t1267 * t1159;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1248, -t1247, 0, -t1268 * t1252 + t1270 * t1253, 0, 0, 0, 0, 0, 0, 0, t1248, t1247, -t1270 * t1228 - t1268 * t1235, 0, 0, 0, 0, 0, 0, t1268 * t1219 + t1270 * t1242, t1268 * t1220 + t1270 * t1245, -t1268 * t1246 - t1270 * t1249, t1268 * t1189 - t1270 * t1224, 0, 0, 0, 0, 0, 0, t1316, t1319, t1313, t1268 * t1156 - t1270 * t1197, 0, 0, 0, 0, 0, 0, t1316, t1313, -t1319, t1268 * t1154 - t1270 * t1168; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1247, -t1248, 0, t1270 * t1252 + t1268 * t1253, 0, 0, 0, 0, 0, 0, 0, -t1247, t1248, -t1268 * t1228 + t1270 * t1235, 0, 0, 0, 0, 0, 0, -t1270 * t1219 + t1268 * t1242, -t1270 * t1220 + t1268 * t1245, t1270 * t1246 - t1268 * t1249, -t1270 * t1189 - t1268 * t1224, 0, 0, 0, 0, 0, 0, t1317, -t1318, t1312, -t1270 * t1156 - t1268 * t1197, 0, 0, 0, 0, 0, 0, t1317, t1312, t1318, -t1270 * t1154 - t1268 * t1168; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1221, t1222, 0, t1190, 0, 0, 0, 0, 0, 0, t1311, -t1172, t1306, t1157, 0, 0, 0, 0, 0, 0, t1311, t1306, t1172, t1155; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1272, -qJDD(1), 0, t1253, 0, 0, 0, 0, 0, 0, 0, t1272, qJDD(1), -t1228, 0, 0, 0, 0, 0, 0, t1242, t1245, -t1249, -t1224, 0, 0, 0, 0, 0, 0, -t1302, t1309, -t1202, -t1197, 0, 0, 0, 0, 0, 0, -t1302, -t1202, -t1309, -t1168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1272, 0, t1252, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), t1272, t1235, 0, 0, 0, 0, 0, 0, -t1219, -t1220, t1246, -t1189, 0, 0, 0, 0, 0, 0, -t1310, -t1176, -t1305, -t1156, 0, 0, 0, 0, 0, 0, -t1310, -t1305, t1176, -t1154; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1221, t1222, 0, t1190, 0, 0, 0, 0, 0, 0, t1311, -t1172, t1306, t1157, 0, 0, 0, 0, 0, 0, t1311, t1306, t1172, t1155; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1221, t1222, 0, t1190, 0, 0, 0, 0, 0, 0, t1311, -t1172, t1306, t1157, 0, 0, 0, 0, 0, 0, t1311, t1306, t1172, t1155; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1272, -qJDD(1), t1228, 0, 0, 0, 0, 0, 0, -t1242, -t1245, t1249, t1224, 0, 0, 0, 0, 0, 0, t1302, -t1309, t1202, t1197, 0, 0, 0, 0, 0, 0, t1302, t1202, t1309, t1168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1272, -t1235, 0, 0, 0, 0, 0, 0, t1219, t1220, -t1246, t1189, 0, 0, 0, 0, 0, 0, t1310, t1176, t1305, t1156, 0, 0, 0, 0, 0, 0, t1310, t1305, -t1176, t1154; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1255, t1251, -t1285, t1218, 0, 0, 0, 0, 0, 0, t1307, t1195, t1300, t1161, 0, 0, 0, 0, 0, 0, t1307, t1300, -t1195, t1159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1250, t1256, -t1284, t1217, 0, 0, 0, 0, 0, 0, t1308, t1193, t1301, t1160, 0, 0, 0, 0, 0, 0, t1308, t1301, -t1193, t1158; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1242, t1245, -t1249, -t1224, 0, 0, 0, 0, 0, 0, -t1302, t1309, -t1202, -t1197, 0, 0, 0, 0, 0, 0, -t1302, -t1202, -t1309, -t1168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1304, t1215, t1276, t1174, 0, 0, 0, 0, 0, 0, t1304, t1276, -t1215, t1166; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1214, t1303, -t1208, t1173, 0, 0, 0, 0, 0, 0, t1214, -t1208, -t1303, -t1167; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1302, t1309, -t1202, -t1197, 0, 0, 0, 0, 0, 0, -t1302, -t1202, -t1309, -t1168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1304, t1276, -t1215, t1166; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1302, -t1202, -t1309, -t1168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1214, t1208, t1303, t1167;];
f_new_reg = t1;
