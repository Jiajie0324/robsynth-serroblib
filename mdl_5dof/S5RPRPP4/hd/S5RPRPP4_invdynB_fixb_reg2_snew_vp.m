% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRPP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:15
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRPP4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPP4_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPP4_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPP4_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPP4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPRPP4_invdynB_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:14:56
% EndTime: 2019-12-31 18:15:05
% DurationCPUTime: 9.15s
% Computational Cost: add. (10668->392), mult. (23603->510), div. (0->0), fcn. (14566->6), ass. (0->283)
t482 = sin(pkin(7));
t483 = cos(pkin(7));
t484 = sin(qJ(3));
t486 = cos(qJ(3));
t447 = (-t482 * t484 + t483 * t486) * qJD(1);
t444 = t447 ^ 2;
t488 = qJD(3) ^ 2;
t390 = t488 + t444;
t445 = (-t482 * t486 - t483 * t484) * qJD(1);
t559 = t447 * t445;
t393 = qJDD(3) - t559;
t620 = t482 * t393;
t333 = t483 * t390 + t620;
t619 = t483 * t393;
t335 = -t482 * t390 + t619;
t293 = t486 * t333 + t484 * t335;
t485 = sin(qJ(1));
t487 = cos(qJ(1));
t524 = qJD(1) * qJD(3);
t513 = t486 * t524;
t522 = t484 * qJDD(1);
t453 = -t513 - t522;
t514 = t484 * t524;
t520 = t486 * qJDD(1);
t454 = -t514 + t520;
t402 = t482 * t453 + t483 * t454;
t529 = qJD(3) * t445;
t579 = t402 + t529;
t282 = t485 * t293 - t487 * t579;
t650 = pkin(5) * t282;
t287 = t487 * t293 + t485 * t579;
t649 = pkin(5) * t287;
t564 = pkin(6) + pkin(1);
t648 = -qJ(2) * t579 - t564 * t293;
t566 = t445 ^ 2;
t424 = t566 - t488;
t342 = t482 * t424 + t619;
t349 = -t483 * t424 + t620;
t302 = t486 * t342 - t484 * t349;
t436 = qJD(3) * t447;
t510 = -t483 * t453 + t482 * t454;
t372 = -t510 + t436;
t647 = t485 * t302 + t487 * t372;
t646 = t487 * t302 - t485 * t372;
t308 = t484 * t333 - t486 * t335;
t645 = -pkin(2) * t579 + t564 * t308;
t644 = pkin(2) * t293 + pkin(3) * t333 + qJ(2) * t308;
t370 = t436 + t510;
t318 = -t482 * t370 + t483 * t579;
t548 = t483 * t370;
t554 = t482 * t579;
t320 = t548 + t554;
t275 = -t486 * t318 + t484 * t320;
t397 = t444 - t566;
t643 = t485 * t275 - t487 * t397;
t642 = t487 * t275 + t485 * t397;
t640 = qJ(4) * t333;
t639 = qJ(4) * t335;
t638 = t484 * t342 + t486 * t349;
t368 = -t566 - t444;
t580 = t402 - t529;
t586 = t483 * t372 + t482 * t580;
t587 = t482 * t372 - t483 * t580;
t610 = t484 * t586 + t486 * t587;
t627 = t485 * t368 - t487 * t610;
t637 = pkin(5) * t627;
t628 = t487 * t368 + t485 * t610;
t636 = pkin(5) * t628;
t635 = t484 * t318 + t486 * t320;
t425 = -t444 + t488;
t578 = qJDD(3) + t559;
t551 = t482 * t578;
t617 = t483 * t425 + t551;
t387 = t483 * t578;
t618 = -t482 * t425 + t387;
t624 = -t484 * t618 - t486 * t617;
t634 = -t485 * t624 + t487 * t580;
t633 = t485 * t580 + t487 * t624;
t571 = -t566 - t488;
t574 = t483 * t571 - t551;
t577 = t482 * t571 + t387;
t584 = t484 * t574 + t486 * t577;
t614 = t487 * t370 + t485 * t584;
t632 = pkin(5) * t614;
t615 = t485 * t370 - t487 * t584;
t631 = pkin(5) * t615;
t626 = qJ(2) * t368 - t564 * t610;
t611 = -t484 * t587 + t486 * t586;
t625 = pkin(2) * t368 - t564 * t611;
t623 = -t484 * t617 + t486 * t618;
t252 = pkin(2) * t610 + pkin(3) * t587 - qJ(2) * t611;
t621 = qJ(4) * t587;
t616 = -pkin(3) * t368 + qJ(4) * t586;
t613 = qJ(2) * t370 - t564 * t584;
t585 = -t484 * t577 + t486 * t574;
t612 = pkin(2) * t370 - t564 * t585;
t609 = pkin(2) * t584 + pkin(3) * t577 - qJ(2) * t585;
t602 = qJ(4) * t574;
t601 = qJ(4) * t577;
t588 = t579 * qJ(5);
t583 = 2 * qJD(4);
t470 = t485 * qJDD(3);
t495 = (t445 * t482 - t447 * t483) * qJD(3);
t528 = qJD(3) * t482;
t422 = t447 * t528;
t527 = qJD(3) * t483;
t515 = t445 * t527;
t501 = t422 + t515;
t570 = -t484 * t501 - t486 * t495;
t576 = t487 * t570 + t470;
t471 = t487 * qJDD(3);
t575 = -t485 * t570 + t471;
t516 = t487 * t559;
t496 = t482 * t510 - t515;
t502 = -t445 * t528 - t483 * t510;
t567 = -t484 * t496 - t486 * t502;
t573 = -t485 * t567 + t516;
t517 = t485 * t559;
t572 = t487 * t567 + t517;
t489 = qJD(1) ^ 2;
t535 = t486 * t489;
t463 = t485 * g(1) - t487 * g(2);
t503 = qJDD(2) - t463;
t493 = -t489 * qJ(2) + t503;
t423 = -t564 * qJDD(1) + t493;
t538 = t486 * t423;
t354 = qJDD(3) * pkin(3) - t454 * qJ(4) + t538 + (-pkin(3) * t535 - qJ(4) * t524 + g(3)) * t484;
t405 = -t486 * g(3) + t484 * t423;
t530 = qJD(1) * t486;
t498 = qJD(3) * pkin(3) - qJ(4) * t530;
t479 = t484 ^ 2;
t558 = t479 * t489;
t355 = -pkin(3) * t558 + t453 * qJ(4) - qJD(3) * t498 + t405;
t299 = t482 * t354 + t483 * t355 + t445 * t583;
t569 = -t484 * t495 + t486 * t501;
t568 = -t484 * t502 + t486 * t496;
t565 = 2 * qJD(5);
t562 = pkin(4) * t483;
t561 = t510 * pkin(4);
t560 = qJDD(1) * pkin(1);
t480 = t486 ^ 2;
t557 = t480 * t489;
t464 = t487 * g(1) + t485 * g(2);
t477 = qJDD(1) * qJ(2);
t500 = t464 - t477;
t523 = qJD(2) * qJD(1);
t492 = t500 - 0.2e1 * t523;
t356 = t453 * pkin(3) - qJDD(4) - t498 * t530 + (qJ(4) * t479 + t564) * t489 + t492;
t556 = t482 * t356;
t549 = t483 * t356;
t511 = -t483 * t354 + t482 * t355;
t525 = qJD(4) * t447;
t298 = t511 + 0.2e1 * t525;
t263 = -t483 * t298 + t482 * t299;
t546 = t484 * t263;
t419 = t564 * t489 + t492;
t545 = t484 * t419;
t518 = t484 * t535;
t461 = qJDD(3) + t518;
t544 = t484 * t461;
t462 = qJDD(3) - t518;
t543 = t484 * t462;
t531 = t479 + t480;
t456 = t531 * qJDD(1);
t541 = t485 * t456;
t540 = t486 * t263;
t539 = t486 * t419;
t537 = t486 * t461;
t536 = t486 * t462;
t533 = t487 * t456;
t521 = t485 * qJDD(1);
t519 = t487 * qJDD(1);
t512 = -qJ(5) * t482 - pkin(3);
t264 = t482 * t298 + t483 * t299;
t474 = 0.2e1 * t523;
t429 = -t489 * pkin(1) + t474 - t500;
t437 = -t493 + t560;
t380 = t487 * t429 - t485 * t437;
t409 = -t485 * t463 - t487 * t464;
t508 = t485 * t518;
t507 = t487 * t518;
t457 = -t485 * t489 + t519;
t506 = pkin(5) * t457 + t485 * g(3);
t458 = t487 * t489 + t521;
t505 = -pkin(5) * t458 + t487 * g(3);
t361 = t482 * t402 + t447 * t527;
t362 = t483 * t402 - t422;
t314 = -t486 * t361 - t484 * t362;
t504 = t487 * t314 - t517;
t404 = t484 * g(3) + t538;
t339 = t486 * t404 + t484 * t405;
t340 = -t484 * t404 + t486 * t405;
t377 = t485 * t429 + t487 * t437;
t408 = t487 * t463 - t485 * t464;
t388 = -t445 * pkin(4) - t447 * qJ(5);
t499 = qJDD(3) * qJ(5) + qJD(3) * t565 + t445 * t388 + t299;
t497 = -t485 * t314 - t516;
t494 = -qJDD(3) * pkin(4) - t488 * qJ(5) + qJDD(5) + t511;
t433 = -0.2e1 * t525;
t284 = -t447 * t388 + t433 - t494;
t491 = -pkin(4) * t436 + t447 * t565 + t356;
t490 = t491 + t588;
t468 = -t488 - t557;
t467 = t488 - t557;
t466 = -t488 - t558;
t465 = -t488 + t558;
t460 = (-t479 + t480) * t489;
t459 = t531 * t489;
t455 = -0.2e1 * t514 + t520;
t452 = 0.2e1 * t513 + t522;
t450 = t531 * t524;
t421 = -t484 * t454 - t480 * t524;
t420 = -t486 * t453 - t479 * t524;
t415 = -t484 * t468 - t537;
t414 = t486 * t466 - t543;
t413 = t486 * t468 - t544;
t412 = -t486 * t467 - t543;
t411 = t484 * t466 + t536;
t410 = -t484 * t465 - t537;
t407 = -t487 * t459 - t541;
t406 = -t485 * t459 + t533;
t403 = t484 * t452 - t486 * t455;
t382 = t485 * t413 + t487 * t455;
t381 = t485 * t411 + t487 * t452;
t379 = -t487 * t413 + t485 * t455;
t378 = -t487 * t411 + t485 * t452;
t336 = -pkin(2) * t459 - t340;
t331 = pkin(2) * t413 - qJ(2) * t415 - t405;
t330 = pkin(2) * t411 - qJ(2) * t414 + t404;
t329 = pkin(2) * t452 - t564 * t414 - t539;
t328 = pkin(2) * t455 - t564 * t415 + t545;
t325 = t485 * t339 - t487 * t419;
t324 = -t487 * t339 - t485 * t419;
t315 = -t484 * t361 + t486 * t362;
t310 = -t549 + t640;
t309 = pkin(2) * t339 - qJ(2) * t340;
t300 = -t556 - t601;
t296 = -pkin(2) * t419 - t564 * t340;
t291 = -pkin(3) * t579 - t556 - t639;
t290 = t490 - t561;
t285 = -pkin(3) * t370 + t549 + t602;
t283 = -t488 * pkin(4) + t499;
t272 = (-t370 - t510) * pkin(4) + t490;
t271 = t491 - t561 + 0.2e1 * t588;
t270 = -qJ(5) * t368 + (t583 + t388) * t447 + t494;
t269 = (-t368 - t488) * pkin(4) + t499;
t262 = -qJ(5) * t548 - t482 * t272 - t601;
t261 = pkin(3) * t356 + qJ(4) * t264;
t260 = -pkin(4) * t554 + t483 * t271 - t640;
t259 = t483 * t272 + t512 * t370 + t602;
t258 = -t263 - t621;
t257 = t639 + t482 * t271 + (pkin(3) + t562) * t579;
t256 = t483 * t283 - t482 * t284;
t255 = t482 * t283 + t483 * t284;
t254 = t264 + t616;
t253 = -t299 - t644;
t251 = t433 - t511 + t609;
t250 = pkin(4) * t578 + qJ(5) * t571 + t284 + t609;
t249 = t486 * t264 - t546;
t248 = t484 * t264 + t540;
t247 = -t486 * t291 - t484 * t310 - t645;
t246 = -t482 * t269 + t483 * t270 - t621;
t245 = -pkin(4) * t580 + qJ(5) * t372 + t252;
t244 = t485 * t248 - t487 * t356;
t243 = -t487 * t248 - t485 * t356;
t242 = t483 * t269 + t482 * t270 + t616;
t241 = qJ(5) * t393 + (t390 - t488) * pkin(4) + t499 + t644;
t240 = -t486 * t285 - t484 * t300 + t612;
t239 = -qJ(4) * t255 + (-pkin(4) * t482 + qJ(5) * t483) * t290;
t238 = -t484 * t255 + t486 * t256;
t237 = t486 * t255 + t484 * t256;
t236 = qJ(4) * t256 + (-t512 + t562) * t290;
t235 = t485 * t237 - t487 * t290;
t234 = -t487 * t237 - t485 * t290;
t233 = -t486 * t259 - t484 * t262 + t612;
t232 = -t486 * t257 - t484 * t260 + t645;
t231 = -t486 * t254 - t484 * t258 + t625;
t230 = pkin(2) * t248 + pkin(3) * t263 - qJ(2) * t249;
t229 = -t486 * t242 - t484 * t246 + t625;
t228 = -pkin(2) * t356 + qJ(4) * t546 - t564 * t249 - t486 * t261;
t227 = pkin(2) * t237 + pkin(3) * t255 + pkin(4) * t284 - qJ(2) * t238 + qJ(5) * t283;
t226 = -pkin(2) * t290 - t486 * t236 - t564 * t238 - t484 * t239;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t458, -t457, 0, t409, 0, 0, 0, 0, 0, 0, 0, t458, t457, t380, 0, 0, 0, 0, 0, 0, t381, t382, t407, t325, 0, 0, 0, 0, 0, 0, t614, -t282, t628, t244, 0, 0, 0, 0, 0, 0, t614, t628, t282, t235; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t457, -t458, 0, t408, 0, 0, 0, 0, 0, 0, 0, -t457, t458, t377, 0, 0, 0, 0, 0, 0, t378, t379, t406, t324, 0, 0, 0, 0, 0, 0, t615, t287, t627, t243, 0, 0, 0, 0, 0, 0, t615, t627, -t287, t234; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t414, t415, 0, t340, 0, 0, 0, 0, 0, 0, t585, t308, t611, t249, 0, 0, 0, 0, 0, 0, t585, t611, -t308, t238; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t457, 0, -t458, 0, -t506, -t505, -t408, -pkin(5) * t408, 0, -t457, t458, 0, 0, 0, -t377, t506, t505, -pkin(5) * t377 + (-pkin(1) * t485 + qJ(2) * t487) * g(3), -t485 * t421 + t507, -t485 * t403 + t487 * t460, -t485 * t412 + t486 * t519, -t485 * t420 - t507, -t485 * t410 - t484 * t519, -t485 * t450 + t471, -pkin(5) * t378 - t485 * t329 + t487 * t330, -pkin(5) * t379 - t485 * t328 + t487 * t331, -pkin(2) * t533 - pkin(5) * t406 - t485 * t336, -pkin(5) * t324 - t485 * t296 + t487 * t309, t497, -t643, t634, t573, t647, t575, -t485 * t240 + t487 * t251 - t631, -t485 * t247 + t487 * t253 - t649, -t485 * t231 + t487 * t252 - t637, -pkin(5) * t243 - t485 * t228 + t487 * t230, t497, t634, t643, t575, -t647, t573, -t485 * t233 + t487 * t250 - t631, -t485 * t229 + t487 * t245 - t637, -t485 * t232 + t487 * t241 + t649, -pkin(5) * t234 - t485 * t226 + t487 * t227; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t458, 0, t457, 0, t505, -t506, t409, pkin(5) * t409, 0, -t458, -t457, 0, 0, 0, t380, -t505, t506, pkin(5) * t380 + (pkin(1) * t487 + qJ(2) * t485) * g(3), t487 * t421 + t508, t487 * t403 + t485 * t460, t487 * t412 + t485 * t520, t487 * t420 - t508, t487 * t410 - t484 * t521, t487 * t450 + t470, pkin(5) * t381 + t487 * t329 + t485 * t330, pkin(5) * t382 + t487 * t328 + t485 * t331, -pkin(2) * t541 + pkin(5) * t407 + t487 * t336, pkin(5) * t325 + t487 * t296 + t485 * t309, t504, t642, t633, t572, -t646, t576, t487 * t240 + t485 * t251 + t632, t487 * t247 + t485 * t253 - t650, t487 * t231 + t485 * t252 + t636, pkin(5) * t244 + t487 * t228 + t485 * t230, t504, t633, -t642, t576, t646, t572, t487 * t233 + t485 * t250 + t632, t487 * t229 + t485 * t245 + t636, t487 * t232 + t485 * t241 + t650, pkin(5) * t235 + t487 * t226 + t485 * t227; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t463, t464, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t503 - 0.2e1 * t560, -t464 + t474 + 0.2e1 * t477, pkin(1) * t437 + qJ(2) * t429, (t454 - t514) * t486, -t486 * t452 - t484 * t455, -t484 * t467 + t536, (-t453 + t513) * t484, t486 * t465 - t544, 0, qJ(2) * t452 - t564 * t411 - t545, qJ(2) * t455 - t564 * t413 - t539, -qJ(2) * t459 + t564 * t456 - t339, -qJ(2) * t419 - t564 * t339, t315, -t635, t623, t568, -t638, t569, -t484 * t285 + t486 * t300 + t613, -t484 * t291 + t486 * t310 - t648, -t484 * t254 + t486 * t258 + t626, -qJ(2) * t356 - qJ(4) * t540 - t564 * t248 - t484 * t261, t315, t623, t635, t569, t638, t568, -t484 * t259 + t486 * t262 + t613, -t484 * t242 + t486 * t246 + t626, -t484 * t257 + t486 * t260 + t648, -qJ(2) * t290 - t484 * t236 - t564 * t237 + t486 * t239;];
tauB_reg = t1;
