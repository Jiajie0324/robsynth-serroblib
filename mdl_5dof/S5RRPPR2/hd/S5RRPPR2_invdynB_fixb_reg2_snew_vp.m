% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:58
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPPR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR2_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR2_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPPR2_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:57:40
% EndTime: 2020-01-03 11:57:49
% DurationCPUTime: 7.88s
% Computational Cost: add. (33754->443), mult. (47250->668), div. (0->0), fcn. (28279->10), ass. (0->307)
t488 = (qJD(1) + qJD(2));
t483 = t488 ^ 2;
t495 = cos(pkin(8));
t484 = qJDD(1) + qJDD(2);
t493 = sin(pkin(8));
t540 = t493 * t484;
t443 = t495 * t483 + t540;
t534 = t495 * t484;
t446 = t493 * t483 - t534;
t497 = sin(qJ(2));
t500 = cos(qJ(2));
t391 = t500 * t443 - t497 * t446;
t491 = g(1) - qJDD(3);
t419 = qJ(3) * t443 - t495 * t491;
t561 = qJ(3) * t446 - t493 * t491;
t328 = pkin(6) * t391 + t500 * t419 - t497 * t561;
t395 = t497 * t443 + t500 * t446;
t498 = sin(qJ(1));
t501 = cos(qJ(1));
t344 = t501 * t391 - t498 * t395;
t570 = pkin(6) * t395 + t497 * t419 + t500 * t561;
t579 = -pkin(5) * t344 - t501 * t328 + t498 * t570;
t560 = t498 * t391 + t501 * t395;
t578 = pkin(5) * t560 + t498 * t328 + t501 * t570;
t471 = t501 * g(2) + t498 * g(3);
t457 = qJDD(1) * pkin(1) - t471;
t470 = t498 * g(2) - t501 * g(3);
t550 = qJD(1) ^ 2;
t458 = -t550 * pkin(1) - t470;
t410 = t497 * t457 + t500 * t458;
t397 = -t483 * pkin(2) + t410;
t506 = t500 * t457 - t497 * t458;
t504 = t484 * pkin(2) + t506;
t345 = t493 * t397 - t495 * t504;
t346 = t495 * t397 + t493 * t504;
t514 = t493 * t345 + t495 * t346;
t287 = t495 * t345 - t493 * t346;
t524 = t500 * t287;
t246 = -t497 * t514 + t524;
t529 = t497 * t287;
t565 = t500 * t514 + t529;
t575 = t498 * t246 + t501 * t565;
t218 = -t501 * t246 + t498 * t565;
t492 = sin(pkin(9));
t486 = t492 ^ 2;
t494 = cos(pkin(9));
t487 = t494 ^ 2;
t436 = (t486 + t487) * t494 * t483;
t517 = t494 * t534;
t405 = -t493 * t436 + t517;
t537 = t494 * t484;
t407 = t495 * t436 + t493 * t537;
t350 = t500 * t405 - t497 * t407;
t352 = t497 * t405 + t500 * t407;
t296 = t501 * t350 - t498 * t352;
t298 = t498 * t350 + t501 * t352;
t450 = t500 * t483 + t497 * t484;
t453 = t497 * t483 - t500 * t484;
t401 = t501 * t450 - t498 * t453;
t427 = pkin(6) * t450 - t500 * g(1);
t562 = pkin(6) * t453 - t497 * g(1);
t572 = -pkin(5) * t401 - t501 * t427 + t498 * t562;
t507 = t498 * t450 + t501 * t453;
t571 = pkin(5) * t507 + t498 * t427 + t501 * t562;
t513 = t500 * t410 - t497 * t506;
t356 = -t497 * t410 - t500 * t506;
t523 = t501 * t356;
t299 = t498 * t513 - t523;
t528 = t498 * t356;
t564 = t501 * t513 + t528;
t331 = -t483 * pkin(3) + t484 * qJ(4) + t346;
t549 = 2 * qJD(4);
t563 = (t488 * t549) + t331;
t412 = t443 * t494 * t492;
t538 = t493 * t494;
t413 = (-t483 * t538 + t517) * t492;
t360 = t500 * t412 + t497 * t413;
t363 = t497 * t412 - t500 * t413;
t559 = t501 * t360 - t498 * t363;
t558 = t498 * t360 + t501 * t363;
t496 = sin(qJ(5));
t499 = cos(qJ(5));
t422 = (qJD(5) * t488 * t499 + t484 * t496) * t492;
t536 = t494 * t488;
t466 = -qJD(5) + t536;
t542 = t488 * t492;
t521 = t466 * t542;
t433 = t499 * t521;
t379 = t433 - t422;
t557 = t496 * t379;
t519 = t496 * t542;
t423 = t499 * t492 * t484 - qJD(5) * t519;
t510 = t466 * t519;
t380 = t423 + t510;
t375 = t499 * t380;
t463 = t466 ^ 2;
t548 = pkin(4) * t492;
t547 = pkin(4) * t494;
t477 = t484 * pkin(3);
t464 = -qJDD(5) + t537;
t544 = t464 * t492;
t543 = t486 * t483;
t330 = -t483 * qJ(4) + qJDD(4) + t345 - t477;
t541 = t493 * t330;
t535 = t495 * t330;
t509 = -pkin(7) * t492 - t547;
t438 = t509 * t488;
t476 = t494 * t491;
t302 = t476 + (t331 + (t549 + t438) * t488) * t492;
t532 = t496 * t302;
t520 = t483 * t496 * t499;
t455 = t486 * t520;
t420 = -t455 + t464;
t531 = t496 * t420;
t421 = -t455 - t464;
t530 = t496 * t421;
t527 = t499 * t302;
t526 = t499 * t420;
t525 = t499 * t421;
t317 = -t492 * t491 + t563 * t494;
t303 = t438 * t536 + t317;
t318 = t484 * t509 + t330;
t262 = t499 * t303 + t496 * t318;
t490 = t499 ^ 2;
t518 = t490 * t543;
t516 = -t330 + t477;
t460 = -t498 * qJDD(1) - t501 * t550;
t515 = pkin(5) * t460 + t501 * g(1);
t261 = t496 * t303 - t499 * t318;
t316 = t563 * t492 + t476;
t273 = t492 * t316 + t494 * t317;
t414 = -t498 * t470 - t501 * t471;
t485 = t492 * t486;
t511 = t485 * t520;
t508 = t494 * t455;
t235 = -t499 * t261 + t496 * t262;
t236 = t496 * t261 + t499 * t262;
t272 = t494 * t316 - t492 * t317;
t415 = t501 * t470 - t498 * t471;
t489 = t496 ^ 2;
t474 = t487 * t483;
t473 = t487 * t484;
t472 = t486 * t484;
t465 = t489 * t543;
t461 = t501 * qJDD(1) - t498 * t550;
t449 = t474 - t543;
t448 = t474 + t543;
t441 = t473 - t472;
t440 = t473 + t472;
t439 = pkin(5) * t461 + t498 * g(1);
t435 = (t487 * t492 + t485) * t483;
t432 = t465 - t518;
t431 = t465 + t518;
t430 = t463 - t518;
t429 = -t465 - t463;
t428 = t465 - t463;
t411 = -t518 - t463;
t406 = t495 * t435 + t492 * t540;
t403 = t493 * t435 - t492 * t534;
t390 = t495 * t441 - t493 * t449;
t389 = t495 * t440 - t493 * t448;
t388 = t493 * t441 + t495 * t449;
t387 = t493 * t440 + t495 * t448;
t386 = (-t489 - t490) * t521;
t382 = t510 - t423;
t378 = t433 + t422;
t377 = -t496 * t423 + t490 * t521;
t376 = t499 * t422 + t489 * t521;
t373 = t499 * t429 - t530;
t372 = t499 * t428 + t531;
t371 = -t496 * t430 + t525;
t370 = t496 * t429 + t525;
t369 = -t496 * t428 + t526;
t368 = -t499 * t430 - t530;
t367 = -t496 * t411 + t526;
t366 = t499 * t411 + t531;
t365 = -t493 * t386 - t495 * t544;
t364 = t495 * t386 - t493 * t544;
t359 = t494 * t375 + t511;
t358 = -t494 * t557 - t511;
t351 = -t497 * t403 + t500 * t406;
t348 = t500 * t403 + t497 * t406;
t347 = pkin(1) * g(1) + pkin(6) * t513;
t340 = -t497 * t388 + t500 * t390;
t339 = -t497 * t387 + t500 * t389;
t338 = t500 * t388 + t497 * t390;
t337 = t500 * t387 + t497 * t389;
t335 = t499 * t379 - t496 * t380;
t334 = -t499 * t378 - t496 * t382;
t333 = -t375 - t557;
t332 = -t496 * t378 + t499 * t382;
t324 = t494 * t373 - t492 * t379;
t323 = t494 * t372 - t492 * t378;
t322 = t494 * t371 - t492 * t382;
t321 = t492 * t373 + t494 * t379;
t320 = t494 * t367 + t380 * t492;
t319 = t492 * t367 - t380 * t494;
t312 = t495 * t359 - t493 * t377;
t311 = t495 * t358 - t493 * t376;
t310 = t493 * t359 + t495 * t377;
t309 = t493 * t358 + t495 * t376;
t308 = t494 * t335 - t492 * t432;
t307 = t494 * t334 - t492 * t431;
t306 = t492 * t334 + t494 * t431;
t305 = -t497 * t364 + t500 * t365;
t304 = t500 * t364 + t497 * t365;
t297 = t498 * t348 - t501 * t351;
t295 = t501 * t348 + t498 * t351;
t294 = t495 * t324 + t493 * t370;
t293 = t495 * t323 - t493 * t369;
t292 = t495 * t322 - t493 * t368;
t291 = t493 * t324 - t495 * t370;
t290 = t493 * t323 + t495 * t369;
t289 = t493 * t322 + t495 * t368;
t284 = t495 * t320 + t493 * t366;
t283 = t493 * t320 - t495 * t366;
t282 = t498 * t337 - t501 * t339;
t281 = t501 * t337 + t498 * t339;
t280 = pkin(2) * t491 + qJ(3) * t514;
t279 = -pkin(7) * t370 + t532;
t278 = -pkin(7) * t366 + t527;
t277 = t495 * t308 - t493 * t333;
t276 = t495 * t307 + t493 * t332;
t275 = t493 * t308 + t495 * t333;
t274 = t493 * t307 - t495 * t332;
t270 = -t497 * t310 + t500 * t312;
t269 = -t497 * t309 + t500 * t311;
t268 = t500 * t310 + t497 * t312;
t267 = t500 * t309 + t497 * t311;
t266 = -qJ(3) * t403 - t493 * t317 + t494 * t535;
t265 = -qJ(3) * t405 - t493 * t316 + t492 * t535;
t264 = qJ(3) * t406 + t495 * t317 + t330 * t538;
t263 = -qJ(3) * t407 + t495 * t316 + t492 * t541;
t260 = -qJ(3) * t387 + t495 * t272;
t259 = qJ(3) * t389 + t493 * t272;
t258 = -pkin(4) * t370 + t261;
t257 = -pkin(4) * t366 + t262;
t256 = -t497 * t291 + t500 * t294;
t255 = -t497 * t290 + t500 * t293;
t254 = -t497 * t289 + t500 * t292;
t253 = t500 * t291 + t497 * t294;
t252 = t500 * t290 + t497 * t293;
t251 = t500 * t289 + t497 * t292;
t250 = t495 * t273 + t541;
t249 = t493 * t273 - t535;
t248 = -pkin(3) * t321 - pkin(4) * t379 - pkin(7) * t373 + t527;
t243 = -pkin(3) * t319 + pkin(4) * t380 - pkin(7) * t367 - t532;
t242 = -t497 * t283 + t500 * t284;
t241 = t500 * t283 + t497 * t284;
t240 = -t497 * t275 + t500 * t277;
t239 = -t497 * t274 + t500 * t276;
t238 = t500 * t275 + t497 * t277;
t237 = t500 * t274 + t497 * t276;
t234 = -pkin(6) * t348 - t497 * t264 + t500 * t266;
t233 = -pkin(6) * t350 - t497 * t263 + t500 * t265;
t232 = pkin(6) * t351 + t500 * t264 + t497 * t266;
t231 = -pkin(6) * t352 + t500 * t263 + t497 * t265;
t230 = -qJ(4) * t321 - t492 * t258 + t494 * t279;
t229 = -pkin(7) * t332 - t235;
t228 = -qJ(4) * t319 - t492 * t257 + t494 * t278;
t227 = -pkin(6) * t337 - t497 * t259 + t500 * t260;
t226 = pkin(6) * t339 + t500 * t259 + t497 * t260;
t225 = t498 * t253 - t501 * t256;
t224 = t501 * t253 + t498 * t256;
t223 = t494 * t236 + t492 * t302;
t222 = t492 * t236 - t494 * t302;
t221 = -t497 * t249 + t500 * t250;
t220 = t500 * t249 + t497 * t250;
t217 = pkin(6) * t246 + qJ(3) * t524 - t497 * t280;
t216 = pkin(1) * t491 + pkin(6) * t565 + qJ(3) * t529 + t500 * t280;
t215 = t498 * t241 - t501 * t242;
t214 = t501 * t241 + t498 * t242;
t213 = -pkin(3) * t306 - pkin(4) * t431 - pkin(7) * t334 - t236;
t212 = -qJ(3) * t249 - (pkin(3) * t493 - qJ(4) * t495) * t272;
t211 = -qJ(4) * t306 + t494 * t229 + t332 * t548;
t210 = t498 * t237 - t501 * t239;
t209 = t501 * t237 + t498 * t239;
t208 = qJ(3) * t250 - (-pkin(3) * t495 - qJ(4) * t493 - pkin(2)) * t272;
t207 = -qJ(3) * t291 + t495 * t230 - t493 * t248;
t206 = -qJ(3) * t283 + t495 * t228 - t493 * t243;
t205 = t495 * t223 + t493 * t235;
t204 = t493 * t223 - t495 * t235;
t203 = -pkin(2) * t321 + qJ(3) * t294 + t493 * t230 + t495 * t248;
t202 = -pkin(2) * t319 + qJ(3) * t284 + t493 * t228 + t495 * t243;
t201 = -pkin(3) * t222 + pkin(4) * t302 - pkin(7) * t236;
t200 = t498 * t220 - t501 * t221;
t199 = t501 * t220 + t498 * t221;
t198 = -qJ(4) * t222 + (-pkin(7) * t494 + t548) * t235;
t197 = -qJ(3) * t274 + t495 * t211 - t493 * t213;
t196 = -pkin(2) * t306 + qJ(3) * t276 + t493 * t211 + t495 * t213;
t195 = -t497 * t204 + t500 * t205;
t194 = t500 * t204 + t497 * t205;
t193 = -pkin(6) * t220 - t497 * t208 + t500 * t212;
t192 = -pkin(6) * t253 - t497 * t203 + t500 * t207;
t191 = -pkin(1) * t321 + pkin(6) * t256 + t500 * t203 + t497 * t207;
t190 = pkin(1) * t272 + pkin(6) * t221 + t500 * t208 + t497 * t212;
t189 = -pkin(6) * t241 - t497 * t202 + t500 * t206;
t188 = -pkin(1) * t319 + pkin(6) * t242 + t500 * t202 + t497 * t206;
t187 = -pkin(6) * t237 - t497 * t196 + t500 * t197;
t186 = -qJ(3) * t204 + t495 * t198 - t493 * t201;
t185 = -pkin(1) * t306 + pkin(6) * t239 + t500 * t196 + t497 * t197;
t184 = t498 * t194 - t501 * t195;
t183 = t501 * t194 + t498 * t195;
t182 = -pkin(2) * t222 + qJ(3) * t205 + t493 * t198 + t495 * t201;
t181 = -pkin(6) * t194 - t497 * t182 + t500 * t186;
t180 = -pkin(1) * t222 + pkin(6) * t195 + t500 * t182 + t497 * t186;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t491, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t272, 0, 0, 0, 0, 0, 0, t321, t319, t306, t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t461, t460, 0, t414, 0, 0, 0, 0, 0, 0, -t507, -t401, 0, t299, 0, 0, 0, 0, 0, 0, -t560, -t344, 0, t218, 0, 0, 0, 0, 0, 0, t296, t295, t281, t199, 0, 0, 0, 0, 0, 0, t224, t214, t209, t183; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t460, t461, 0, t415, 0, 0, 0, 0, 0, 0, t401, -t507, 0, -t564, 0, 0, 0, 0, 0, 0, t344, -t560, 0, -t575, 0, 0, 0, 0, 0, 0, t298, t297, t282, t200, 0, 0, 0, 0, 0, 0, t225, t215, t210, t184; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t471, t470, 0, 0, 0, 0, 0, 0, 0, t484, -pkin(1) * t453 + t506, -pkin(1) * t450 - t410, 0, -pkin(1) * t356, 0, 0, 0, 0, 0, t484, -pkin(1) * t395 - pkin(2) * t446 - t345, -pkin(1) * t391 - pkin(2) * t443 - t346, 0, -pkin(1) * t246 - pkin(2) * t287, t472, 0.2e1 * t492 * t537, 0, t473, 0, 0, pkin(1) * t350 + pkin(2) * t405 - qJ(4) * t436 + t494 * t516, pkin(1) * t348 + pkin(2) * t403 + qJ(4) * t435 - t492 * t516, pkin(1) * t337 + pkin(2) * t387 + pkin(3) * t448 + qJ(4) * t440 + t273, pkin(1) * t220 + pkin(2) * t249 - pkin(3) * t330 + qJ(4) * t273, t492 * t375 - t508, t492 * t335 + t494 * t432, t492 * t371 + t494 * t382, -t492 * t557 + t508, t492 * t372 + t494 * t378, t494 * t464, pkin(1) * t253 + pkin(2) * t291 - pkin(3) * t370 + qJ(4) * t324 + t494 * t258 + t492 * t279, pkin(1) * t241 + pkin(2) * t283 - pkin(3) * t366 + qJ(4) * t320 + t494 * t257 + t492 * t278, pkin(1) * t237 + pkin(2) * t274 + qJ(4) * t307 + t492 * t229 + (-pkin(3) - t547) * t332, pkin(1) * t194 + pkin(2) * t204 + qJ(4) * t223 + (-pkin(3) + t509) * t235; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t460, 0, t461, 0, t515, -t439, -t415, -pkin(5) * t415, 0, 0, t401, 0, -t507, 0, t572, t571, t564, pkin(5) * t564 + pkin(6) * t528 + t501 * t347, 0, 0, t344, 0, -t560, 0, t579, t578, t575, pkin(5) * t575 + t501 * t216 + t498 * t217, t559, t501 * t338 + t498 * t340, t295, -t559, -t296, 0, -pkin(5) * t298 + t501 * t231 + t498 * t233, -pkin(5) * t297 + t501 * t232 + t498 * t234, -pkin(5) * t282 + t501 * t226 + t498 * t227, -pkin(5) * t200 + t501 * t190 + t498 * t193, t501 * t268 + t498 * t270, t501 * t238 + t498 * t240, t501 * t251 + t498 * t254, t501 * t267 + t498 * t269, t501 * t252 + t498 * t255, t501 * t304 + t498 * t305, -pkin(5) * t225 + t501 * t191 + t498 * t192, -pkin(5) * t215 + t501 * t188 + t498 * t189, -pkin(5) * t210 + t501 * t185 + t498 * t187, -pkin(5) * t184 + t501 * t180 + t498 * t181; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t461, 0, -t460, 0, t439, t515, t414, pkin(5) * t414, 0, 0, t507, 0, t401, 0, -t571, t572, t299, pkin(5) * t299 - pkin(6) * t523 + t498 * t347, 0, 0, t560, 0, t344, 0, -t578, t579, t218, pkin(5) * t218 + t498 * t216 - t501 * t217, t558, t498 * t338 - t501 * t340, t297, -t558, -t298, 0, pkin(5) * t296 + t498 * t231 - t501 * t233, pkin(5) * t295 + t498 * t232 - t501 * t234, pkin(5) * t281 + t498 * t226 - t501 * t227, pkin(5) * t199 + t498 * t190 - t501 * t193, t498 * t268 - t501 * t270, t498 * t238 - t501 * t240, t498 * t251 - t501 * t254, t498 * t267 - t501 * t269, t498 * t252 - t501 * t255, t498 * t304 - t501 * t305, pkin(5) * t224 + t498 * t191 - t501 * t192, pkin(5) * t214 + t498 * t188 - t501 * t189, pkin(5) * t209 + t498 * t185 - t501 * t187, pkin(5) * t183 + t498 * t180 - t501 * t181;];
tauB_reg = t1;
