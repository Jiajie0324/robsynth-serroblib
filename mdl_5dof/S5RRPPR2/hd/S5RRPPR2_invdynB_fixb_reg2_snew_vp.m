% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:20
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPPR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR2_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR2_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPPR2_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:20:28
% EndTime: 2019-12-05 18:20:41
% DurationCPUTime: 10.13s
% Computational Cost: add. (33754->443), mult. (47250->668), div. (0->0), fcn. (28279->10), ass. (0->307)
t484 = (qJD(1) + qJD(2));
t479 = t484 ^ 2;
t491 = cos(pkin(8));
t480 = qJDD(1) + qJDD(2);
t489 = sin(pkin(8));
t536 = t489 * t480;
t444 = t491 * t479 + t536;
t530 = t491 * t480;
t447 = t489 * t479 - t530;
t493 = sin(qJ(2));
t496 = cos(qJ(2));
t393 = t496 * t444 - t493 * t447;
t487 = g(1) - qJDD(3);
t421 = qJ(3) * t444 - t491 * t487;
t556 = qJ(3) * t447 - t489 * t487;
t330 = pkin(6) * t393 + t496 * t421 - t493 * t556;
t494 = sin(qJ(1));
t497 = cos(qJ(1));
t397 = t493 * t444 + t496 * t447;
t564 = pkin(6) * t397 + t493 * t421 + t496 * t556;
t566 = t494 * t393 + t497 * t397;
t575 = pkin(5) * t566 + t494 * t330 + t497 * t564;
t343 = t497 * t393 - t494 * t397;
t574 = pkin(5) * t343 + t497 * t330 - t494 * t564;
t471 = t497 * g(2) + t494 * g(3);
t457 = qJDD(1) * pkin(1) + t471;
t470 = t494 * g(2) - t497 * g(3);
t498 = qJD(1) ^ 2;
t458 = -t498 * pkin(1) + t470;
t412 = t493 * t457 + t496 * t458;
t399 = -t479 * pkin(2) + t412;
t503 = t496 * t457 - t493 * t458;
t501 = t480 * pkin(2) + t503;
t347 = t489 * t399 - t491 * t501;
t348 = t491 * t399 + t489 * t501;
t511 = t489 * t347 + t491 * t348;
t289 = t491 * t347 - t489 * t348;
t520 = t496 * t289;
t248 = -t493 * t511 + t520;
t525 = t493 * t289;
t560 = t496 * t511 + t525;
t221 = t494 * t248 + t497 * t560;
t220 = t497 * t248 - t494 * t560;
t451 = t496 * t479 + t493 * t480;
t429 = pkin(6) * t451 - t496 * g(1);
t454 = t493 * t479 - t496 * t480;
t553 = t494 * t451 + t497 * t454;
t557 = pkin(6) * t454 - t493 * g(1);
t569 = pkin(5) * t553 + t494 * t429 + t497 * t557;
t488 = sin(pkin(9));
t482 = t488 ^ 2;
t490 = cos(pkin(9));
t483 = t490 ^ 2;
t438 = (t482 + t483) * t490 * t479;
t513 = t490 * t530;
t407 = -t489 * t438 + t513;
t533 = t490 * t480;
t409 = t491 * t438 + t489 * t533;
t352 = t496 * t407 - t493 * t409;
t354 = t493 * t407 + t496 * t409;
t568 = t497 * t352 - t494 * t354;
t567 = t494 * t352 + t497 * t354;
t400 = t497 * t451 - t494 * t454;
t565 = pkin(5) * t400 + t497 * t429 - t494 * t557;
t510 = t496 * t412 - t493 * t503;
t358 = -t493 * t412 - t496 * t503;
t519 = t497 * t358;
t301 = -t494 * t510 + t519;
t524 = t494 * t358;
t302 = t497 * t510 + t524;
t333 = -t479 * pkin(3) + t480 * qJ(4) + t348;
t545 = 2 * qJD(4);
t558 = (t484 * t545) + t333;
t414 = t444 * t490 * t488;
t534 = t489 * t490;
t415 = (-t479 * t534 + t513) * t488;
t362 = t496 * t414 + t493 * t415;
t365 = t493 * t414 - t496 * t415;
t555 = t497 * t362 - t494 * t365;
t554 = t494 * t362 + t497 * t365;
t492 = sin(qJ(5));
t495 = cos(qJ(5));
t424 = (qJD(5) * t484 * t495 + t480 * t492) * t488;
t532 = t490 * t484;
t466 = -qJD(5) + t532;
t538 = t484 * t488;
t517 = t466 * t538;
t435 = t495 * t517;
t381 = t435 - t424;
t552 = t492 * t381;
t515 = t492 * t538;
t425 = t495 * t488 * t480 - qJD(5) * t515;
t507 = t466 * t515;
t382 = t425 + t507;
t377 = t495 * t382;
t463 = t466 ^ 2;
t544 = pkin(4) * t488;
t543 = pkin(4) * t490;
t477 = t480 * pkin(3);
t464 = -qJDD(5) + t533;
t540 = t464 * t488;
t539 = t482 * t479;
t332 = -t479 * qJ(4) + qJDD(4) + t347 - t477;
t537 = t489 * t332;
t531 = t491 * t332;
t506 = -pkin(7) * t488 - t543;
t439 = t506 * t484;
t476 = t490 * t487;
t304 = t476 + (t333 + (t545 + t439) * t484) * t488;
t528 = t492 * t304;
t516 = t479 * t492 * t495;
t456 = t482 * t516;
t422 = -t456 + t464;
t527 = t492 * t422;
t423 = -t456 - t464;
t526 = t492 * t423;
t523 = t495 * t304;
t522 = t495 * t422;
t521 = t495 * t423;
t319 = -t488 * t487 + t558 * t490;
t305 = t439 * t532 + t319;
t320 = t480 * t506 + t332;
t264 = t495 * t305 + t492 * t320;
t486 = t495 ^ 2;
t514 = t486 * t539;
t512 = -t332 + t477;
t263 = t492 * t305 - t495 * t320;
t318 = t558 * t488 + t476;
t275 = t488 * t318 + t490 * t319;
t481 = t488 * t482;
t508 = t481 * t516;
t460 = t494 * qJDD(1) + t497 * t498;
t505 = pkin(5) * t460 - t497 * g(1);
t504 = t490 * t456;
t237 = -t495 * t263 + t492 * t264;
t238 = t492 * t263 + t495 * t264;
t274 = t490 * t318 - t488 * t319;
t417 = t497 * t470 - t494 * t471;
t416 = -t494 * t470 - t497 * t471;
t485 = t492 ^ 2;
t474 = t483 * t479;
t473 = t483 * t480;
t472 = t482 * t480;
t465 = t485 * t539;
t461 = -t497 * qJDD(1) + t494 * t498;
t450 = t474 - t539;
t449 = t474 + t539;
t442 = t473 - t472;
t441 = t473 + t472;
t440 = -pkin(5) * t461 + t494 * g(1);
t437 = (t483 * t488 + t481) * t479;
t434 = t465 - t514;
t433 = t465 + t514;
t432 = t463 - t514;
t431 = -t465 - t463;
t430 = t465 - t463;
t413 = -t514 - t463;
t408 = t491 * t437 + t488 * t536;
t405 = t489 * t437 - t488 * t530;
t392 = t491 * t442 - t489 * t450;
t391 = t491 * t441 - t489 * t449;
t390 = t489 * t442 + t491 * t450;
t389 = t489 * t441 + t491 * t449;
t388 = (-t485 - t486) * t517;
t384 = t507 - t425;
t380 = t435 + t424;
t379 = -t492 * t425 + t486 * t517;
t378 = t495 * t424 + t485 * t517;
t375 = t495 * t431 - t526;
t374 = t495 * t430 + t527;
t373 = -t492 * t432 + t521;
t372 = t492 * t431 + t521;
t371 = -t492 * t430 + t522;
t370 = -t495 * t432 - t526;
t369 = -t492 * t413 + t522;
t368 = t495 * t413 + t527;
t367 = -t489 * t388 - t491 * t540;
t366 = t491 * t388 - t489 * t540;
t361 = t490 * t377 + t508;
t360 = -t490 * t552 - t508;
t353 = -t493 * t405 + t496 * t408;
t350 = t496 * t405 + t493 * t408;
t349 = pkin(1) * g(1) + pkin(6) * t510;
t342 = -t493 * t390 + t496 * t392;
t341 = -t493 * t389 + t496 * t391;
t340 = t496 * t390 + t493 * t392;
t339 = t496 * t389 + t493 * t391;
t337 = t495 * t381 - t492 * t382;
t336 = -t495 * t380 - t492 * t384;
t335 = -t377 - t552;
t334 = -t492 * t380 + t495 * t384;
t326 = t490 * t375 - t488 * t381;
t325 = t490 * t374 - t488 * t380;
t324 = t490 * t373 - t488 * t384;
t323 = t488 * t375 + t490 * t381;
t322 = t490 * t369 + t382 * t488;
t321 = t488 * t369 - t382 * t490;
t314 = t491 * t361 - t489 * t379;
t313 = t491 * t360 - t489 * t378;
t312 = t489 * t361 + t491 * t379;
t311 = t489 * t360 + t491 * t378;
t310 = t490 * t337 - t488 * t434;
t309 = t490 * t336 - t488 * t433;
t308 = t488 * t336 + t490 * t433;
t307 = -t493 * t366 + t496 * t367;
t306 = t496 * t366 + t493 * t367;
t299 = -t494 * t350 + t497 * t353;
t297 = -t497 * t350 - t494 * t353;
t296 = t491 * t326 + t489 * t372;
t295 = t491 * t325 - t489 * t371;
t294 = t491 * t324 - t489 * t370;
t293 = t489 * t326 - t491 * t372;
t292 = t489 * t325 + t491 * t371;
t291 = t489 * t324 + t491 * t370;
t286 = t491 * t322 + t489 * t368;
t285 = t489 * t322 - t491 * t368;
t284 = -t494 * t339 + t497 * t341;
t283 = -t497 * t339 - t494 * t341;
t282 = pkin(2) * t487 + qJ(3) * t511;
t281 = -pkin(7) * t372 + t528;
t280 = -pkin(7) * t368 + t523;
t279 = t491 * t310 - t489 * t335;
t278 = t491 * t309 + t489 * t334;
t277 = t489 * t310 + t491 * t335;
t276 = t489 * t309 - t491 * t334;
t272 = -t493 * t312 + t496 * t314;
t271 = -t493 * t311 + t496 * t313;
t270 = t496 * t312 + t493 * t314;
t269 = t496 * t311 + t493 * t313;
t268 = -qJ(3) * t405 - t489 * t319 + t490 * t531;
t267 = -qJ(3) * t407 - t489 * t318 + t488 * t531;
t266 = qJ(3) * t408 + t491 * t319 + t332 * t534;
t265 = -qJ(3) * t409 + t491 * t318 + t488 * t537;
t262 = -qJ(3) * t389 + t491 * t274;
t261 = qJ(3) * t391 + t489 * t274;
t260 = -pkin(4) * t372 + t263;
t259 = -pkin(4) * t368 + t264;
t258 = -t493 * t293 + t496 * t296;
t257 = -t493 * t292 + t496 * t295;
t256 = -t493 * t291 + t496 * t294;
t255 = t496 * t293 + t493 * t296;
t254 = t496 * t292 + t493 * t295;
t253 = t496 * t291 + t493 * t294;
t252 = t491 * t275 + t537;
t251 = t489 * t275 - t531;
t250 = -pkin(3) * t323 - pkin(4) * t381 - pkin(7) * t375 + t523;
t245 = -pkin(3) * t321 + pkin(4) * t382 - pkin(7) * t369 - t528;
t244 = -t493 * t285 + t496 * t286;
t243 = t496 * t285 + t493 * t286;
t242 = -t493 * t277 + t496 * t279;
t241 = -t493 * t276 + t496 * t278;
t240 = t496 * t277 + t493 * t279;
t239 = t496 * t276 + t493 * t278;
t236 = -pkin(6) * t350 - t493 * t266 + t496 * t268;
t235 = -pkin(6) * t352 - t493 * t265 + t496 * t267;
t234 = pkin(6) * t353 + t496 * t266 + t493 * t268;
t233 = -pkin(6) * t354 + t496 * t265 + t493 * t267;
t232 = -qJ(4) * t323 - t488 * t260 + t490 * t281;
t231 = -pkin(7) * t334 - t237;
t230 = -qJ(4) * t321 - t488 * t259 + t490 * t280;
t229 = -pkin(6) * t339 - t493 * t261 + t496 * t262;
t228 = pkin(6) * t341 + t496 * t261 + t493 * t262;
t227 = -t494 * t255 + t497 * t258;
t226 = -t497 * t255 - t494 * t258;
t225 = t490 * t238 + t488 * t304;
t224 = t488 * t238 - t490 * t304;
t223 = -t493 * t251 + t496 * t252;
t222 = t496 * t251 + t493 * t252;
t219 = pkin(6) * t248 + qJ(3) * t520 - t493 * t282;
t218 = pkin(1) * t487 + pkin(6) * t560 + qJ(3) * t525 + t496 * t282;
t217 = -t494 * t243 + t497 * t244;
t216 = -t497 * t243 - t494 * t244;
t215 = -pkin(3) * t308 - pkin(4) * t433 - pkin(7) * t336 - t238;
t214 = -qJ(3) * t251 - (pkin(3) * t489 - qJ(4) * t491) * t274;
t213 = -qJ(4) * t308 + t490 * t231 + t334 * t544;
t212 = -t494 * t239 + t497 * t241;
t211 = -t497 * t239 - t494 * t241;
t210 = qJ(3) * t252 - (-pkin(3) * t491 - qJ(4) * t489 - pkin(2)) * t274;
t209 = -qJ(3) * t293 + t491 * t232 - t489 * t250;
t208 = -qJ(3) * t285 + t491 * t230 - t489 * t245;
t207 = t491 * t225 + t489 * t237;
t206 = t489 * t225 - t491 * t237;
t205 = -pkin(2) * t323 + qJ(3) * t296 + t489 * t232 + t491 * t250;
t204 = -pkin(2) * t321 + qJ(3) * t286 + t489 * t230 + t491 * t245;
t203 = -pkin(3) * t224 + pkin(4) * t304 - pkin(7) * t238;
t202 = -t494 * t222 + t497 * t223;
t201 = -t497 * t222 - t494 * t223;
t200 = -qJ(4) * t224 + (-pkin(7) * t490 + t544) * t237;
t199 = -qJ(3) * t276 + t491 * t213 - t489 * t215;
t198 = -pkin(2) * t308 + qJ(3) * t278 + t489 * t213 + t491 * t215;
t197 = -t493 * t206 + t496 * t207;
t196 = t496 * t206 + t493 * t207;
t195 = -pkin(6) * t222 - t493 * t210 + t496 * t214;
t194 = -pkin(6) * t255 - t493 * t205 + t496 * t209;
t193 = -pkin(1) * t323 + pkin(6) * t258 + t496 * t205 + t493 * t209;
t192 = pkin(1) * t274 + pkin(6) * t223 + t496 * t210 + t493 * t214;
t191 = -pkin(6) * t243 - t493 * t204 + t496 * t208;
t190 = -pkin(1) * t321 + pkin(6) * t244 + t496 * t204 + t493 * t208;
t189 = -pkin(6) * t239 - t493 * t198 + t496 * t199;
t188 = -qJ(3) * t206 + t491 * t200 - t489 * t203;
t187 = -pkin(1) * t308 + pkin(6) * t241 + t496 * t198 + t493 * t199;
t186 = -t494 * t196 + t497 * t197;
t185 = -t497 * t196 - t494 * t197;
t184 = -pkin(2) * t224 + qJ(3) * t207 + t489 * t200 + t491 * t203;
t183 = -pkin(6) * t196 - t493 * t184 + t496 * t188;
t182 = -pkin(1) * t224 + pkin(6) * t197 + t496 * t184 + t493 * t188;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t487, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t274, 0, 0, 0, 0, 0, 0, t323, t321, t308, t224; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t461, t460, 0, t416, 0, 0, 0, 0, 0, 0, t553, t400, 0, t301, 0, 0, 0, 0, 0, 0, t566, t343, 0, t220, 0, 0, 0, 0, 0, 0, -t568, t297, t283, t201, 0, 0, 0, 0, 0, 0, t226, t216, t211, t185; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t460, t461, 0, t417, 0, 0, 0, 0, 0, 0, -t400, t553, 0, t302, 0, 0, 0, 0, 0, 0, -t343, t566, 0, t221, 0, 0, 0, 0, 0, 0, -t567, t299, t284, t202, 0, 0, 0, 0, 0, 0, t227, t217, t212, t186; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t471, -t470, 0, 0, 0, 0, 0, 0, 0, t480, -pkin(1) * t454 + t503, -pkin(1) * t451 - t412, 0, -pkin(1) * t358, 0, 0, 0, 0, 0, t480, -pkin(1) * t397 - pkin(2) * t447 - t347, -pkin(1) * t393 - pkin(2) * t444 - t348, 0, -pkin(1) * t248 - pkin(2) * t289, t472, 0.2e1 * t488 * t533, 0, t473, 0, 0, pkin(1) * t352 + pkin(2) * t407 - qJ(4) * t438 + t490 * t512, pkin(1) * t350 + pkin(2) * t405 + qJ(4) * t437 - t488 * t512, pkin(1) * t339 + pkin(2) * t389 + pkin(3) * t449 + qJ(4) * t441 + t275, pkin(1) * t222 + pkin(2) * t251 - pkin(3) * t332 + qJ(4) * t275, t488 * t377 - t504, t488 * t337 + t490 * t434, t488 * t373 + t490 * t384, -t488 * t552 + t504, t488 * t374 + t490 * t380, t490 * t464, pkin(1) * t255 + pkin(2) * t293 - pkin(3) * t372 + qJ(4) * t326 + t490 * t260 + t488 * t281, pkin(1) * t243 + pkin(2) * t285 - pkin(3) * t368 + qJ(4) * t322 + t490 * t259 + t488 * t280, pkin(1) * t239 + pkin(2) * t276 + qJ(4) * t309 + t488 * t231 + (-pkin(3) - t543) * t334, pkin(1) * t196 + pkin(2) * t206 + qJ(4) * t225 + (-pkin(3) + t506) * t237; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t460, 0, t461, 0, t505, t440, -t417, -pkin(5) * t417, 0, 0, -t400, 0, t553, 0, t565, -t569, -t302, -pkin(5) * t302 - pkin(6) * t524 - t497 * t349, 0, 0, -t343, 0, t566, 0, t574, -t575, -t221, -pkin(5) * t221 - t497 * t218 - t494 * t219, -t555, -t497 * t340 - t494 * t342, t297, t555, t568, 0, pkin(5) * t567 - t497 * t233 - t494 * t235, -pkin(5) * t299 - t497 * t234 - t494 * t236, -pkin(5) * t284 - t497 * t228 - t494 * t229, -pkin(5) * t202 - t497 * t192 - t494 * t195, -t497 * t270 - t494 * t272, -t497 * t240 - t494 * t242, -t497 * t253 - t494 * t256, -t497 * t269 - t494 * t271, -t497 * t254 - t494 * t257, -t497 * t306 - t494 * t307, -pkin(5) * t227 - t497 * t193 - t494 * t194, -pkin(5) * t217 - t497 * t190 - t494 * t191, -pkin(5) * t212 - t497 * t187 - t494 * t189, -pkin(5) * t186 - t497 * t182 - t494 * t183; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t461, 0, -t460, 0, -t440, t505, t416, pkin(5) * t416, 0, 0, -t553, 0, -t400, 0, t569, t565, t301, pkin(5) * t301 + pkin(6) * t519 - t494 * t349, 0, 0, -t566, 0, -t343, 0, t575, t574, t220, pkin(5) * t220 - t494 * t218 + t497 * t219, -t554, -t494 * t340 + t497 * t342, t299, t554, t567, 0, -pkin(5) * t568 - t494 * t233 + t497 * t235, pkin(5) * t297 - t494 * t234 + t497 * t236, pkin(5) * t283 - t494 * t228 + t497 * t229, pkin(5) * t201 - t494 * t192 + t497 * t195, -t494 * t270 + t497 * t272, -t494 * t240 + t497 * t242, -t494 * t253 + t497 * t256, -t494 * t269 + t497 * t271, -t494 * t254 + t497 * t257, -t494 * t306 + t497 * t307, pkin(5) * t226 - t494 * t193 + t497 * t194, pkin(5) * t216 - t494 * t190 + t497 * t191, pkin(5) * t211 - t494 * t187 + t497 * t189, pkin(5) * t185 - t494 * t182 + t497 * t183;];
tauB_reg = t1;
