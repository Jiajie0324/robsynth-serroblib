% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:58
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPPR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPPR2_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:58:00
% EndTime: 2020-01-03 11:58:02
% DurationCPUTime: 2.16s
% Computational Cost: add. (8661->175), mult. (12134->252), div. (0->0), fcn. (7317->10), ass. (0->142)
t1164 = qJD(1) + qJD(2);
t1160 = t1164 ^ 2;
t1169 = sin(pkin(8));
t1161 = qJDD(1) + qJDD(2);
t1171 = cos(pkin(8));
t1189 = t1171 * t1161;
t1134 = t1169 * t1160 - t1189;
t1173 = sin(qJ(2));
t1176 = cos(qJ(2));
t1191 = t1169 * t1161;
t1183 = -t1171 * t1160 - t1191;
t1112 = t1176 * t1134 - t1173 * t1183;
t1174 = sin(qJ(1));
t1177 = cos(qJ(1));
t1206 = t1173 * t1134 + t1176 * t1183;
t1210 = t1174 * t1112 + t1177 * t1206;
t1209 = -t1177 * t1112 + t1174 * t1206;
t1140 = t1173 * t1160 - t1176 * t1161;
t1182 = -t1176 * t1160 - t1173 * t1161;
t1205 = t1174 * t1140 + t1177 * t1182;
t1204 = -t1177 * t1140 + t1174 * t1182;
t1168 = sin(pkin(9));
t1162 = t1168 ^ 2;
t1170 = cos(pkin(9));
t1163 = t1170 ^ 2;
t1188 = t1162 + t1163;
t1137 = t1188 * t1160;
t1190 = t1170 * t1164;
t1148 = -qJD(5) + t1190;
t1199 = t1148 ^ 2;
t1198 = 2 * qJD(4);
t1172 = sin(qJ(5));
t1197 = t1161 * t1172;
t1175 = cos(qJ(5));
t1196 = t1161 * t1175;
t1195 = t1162 * t1160;
t1194 = t1164 * t1172;
t1193 = t1164 * t1175;
t1192 = t1168 * t1161;
t1154 = t1170 * t1161;
t1153 = -t1177 * g(2) - t1174 * g(3);
t1142 = qJDD(1) * pkin(1) + t1153;
t1152 = -t1174 * g(2) + t1177 * g(3);
t1178 = qJD(1) ^ 2;
t1143 = -t1178 * pkin(1) + t1152;
t1120 = t1173 * t1142 + t1176 * t1143;
t1114 = -t1160 * pkin(2) + t1120;
t1119 = t1176 * t1142 - t1173 * t1143;
t1181 = t1161 * pkin(2) + t1119;
t1090 = t1171 * t1114 + t1169 * t1181;
t1187 = t1154 - qJDD(5);
t1186 = t1148 * t1194;
t1084 = -t1160 * pkin(3) + t1161 * qJ(4) + t1090;
t1167 = -g(1) + qJDD(3);
t1076 = t1170 * t1084 + t1168 * t1167 + t1190 * t1198;
t1089 = -t1169 * t1114 + t1171 * t1181;
t1185 = t1172 * t1175 * t1195;
t1184 = -pkin(4) * t1170 - pkin(7) * t1168;
t1083 = -t1161 * pkin(3) - t1160 * qJ(4) + qJDD(4) - t1089;
t1166 = t1175 ^ 2;
t1165 = t1172 ^ 2;
t1156 = t1170 * t1167;
t1147 = t1170 * t1160 * t1168;
t1146 = t1177 * qJDD(1) - t1174 * t1178;
t1145 = -t1174 * qJDD(1) - t1177 * t1178;
t1144 = t1168 * qJD(5) * t1194;
t1129 = t1188 * t1161;
t1128 = t1184 * t1164;
t1127 = t1170 * t1137;
t1126 = t1168 * t1137;
t1125 = (t1165 + t1166) * t1195;
t1124 = -t1165 * t1195 - t1199;
t1123 = -t1185 - t1187;
t1122 = -t1185 + t1187;
t1121 = -t1166 * t1195 - t1199;
t1118 = -t1171 * t1127 - t1169 * t1154;
t1117 = t1171 * t1126 + t1168 * t1191;
t1116 = -t1169 * t1127 + t1170 * t1189;
t1115 = t1169 * t1126 - t1168 * t1189;
t1109 = t1171 * t1129 - t1169 * t1137;
t1108 = t1169 * t1129 + t1171 * t1137;
t1104 = t1144 + (t1186 - t1196) * t1168;
t1103 = -t1144 + (t1186 + t1196) * t1168;
t1102 = (-t1197 + (-qJD(5) - t1148) * t1193) * t1168;
t1101 = (t1197 + (qJD(5) - t1148) * t1193) * t1168;
t1100 = -t1172 * t1123 + t1175 * t1124;
t1099 = t1175 * t1123 + t1172 * t1124;
t1098 = -t1172 * t1121 + t1175 * t1122;
t1097 = t1175 * t1121 + t1172 * t1122;
t1096 = -t1173 * t1119 + t1176 * t1120;
t1095 = t1176 * t1119 + t1173 * t1120;
t1094 = -t1173 * t1116 + t1176 * t1118;
t1093 = -t1173 * t1115 + t1176 * t1117;
t1092 = t1176 * t1116 + t1173 * t1118;
t1091 = t1176 * t1115 + t1173 * t1117;
t1088 = -t1173 * t1108 + t1176 * t1109;
t1087 = t1176 * t1108 + t1173 * t1109;
t1086 = t1175 * t1102 - t1172 * t1104;
t1085 = t1172 * t1102 + t1175 * t1104;
t1081 = t1170 * t1100 + t1168 * t1101;
t1080 = t1168 * t1100 - t1170 * t1101;
t1079 = t1170 * t1098 + t1168 * t1103;
t1078 = t1168 * t1098 - t1170 * t1103;
t1077 = t1184 * t1161 + t1083;
t1075 = t1156 + (-0.2e1 * qJD(4) * t1164 - t1084) * t1168;
t1074 = t1170 * t1086 - t1168 * t1125;
t1073 = t1168 * t1086 + t1170 * t1125;
t1072 = t1128 * t1190 + t1076;
t1071 = -t1156 + (t1084 + (t1198 + t1128) * t1164) * t1168;
t1070 = t1171 * t1081 + t1169 * t1099;
t1069 = t1169 * t1081 - t1171 * t1099;
t1068 = -t1169 * t1089 + t1171 * t1090;
t1067 = t1171 * t1089 + t1169 * t1090;
t1066 = t1171 * t1079 + t1169 * t1097;
t1065 = t1169 * t1079 - t1171 * t1097;
t1064 = t1171 * t1074 + t1169 * t1085;
t1063 = t1169 * t1074 - t1171 * t1085;
t1062 = -t1168 * t1075 + t1170 * t1076;
t1061 = t1170 * t1075 + t1168 * t1076;
t1060 = t1175 * t1072 + t1172 * t1077;
t1059 = -t1172 * t1072 + t1175 * t1077;
t1058 = -t1173 * t1069 + t1176 * t1070;
t1057 = t1176 * t1069 + t1173 * t1070;
t1056 = t1171 * t1062 + t1169 * t1083;
t1055 = t1169 * t1062 - t1171 * t1083;
t1054 = -t1173 * t1067 + t1176 * t1068;
t1053 = t1176 * t1067 + t1173 * t1068;
t1052 = -t1173 * t1065 + t1176 * t1066;
t1051 = t1176 * t1065 + t1173 * t1066;
t1050 = -t1173 * t1063 + t1176 * t1064;
t1049 = t1176 * t1063 + t1173 * t1064;
t1048 = -t1172 * t1059 + t1175 * t1060;
t1047 = t1175 * t1059 + t1172 * t1060;
t1046 = t1170 * t1048 + t1168 * t1071;
t1045 = t1168 * t1048 - t1170 * t1071;
t1044 = -t1173 * t1055 + t1176 * t1056;
t1043 = t1176 * t1055 + t1173 * t1056;
t1042 = t1171 * t1046 + t1169 * t1047;
t1041 = t1169 * t1046 - t1171 * t1047;
t1040 = -t1173 * t1041 + t1176 * t1042;
t1039 = t1176 * t1041 + t1173 * t1042;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1167, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1061, 0, 0, 0, 0, 0, 0, t1080, t1078, t1073, t1045; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1146, t1145, 0, t1174 * t1152 + t1177 * t1153, 0, 0, 0, 0, 0, 0, t1204, t1205, 0, t1177 * t1095 + t1174 * t1096, 0, 0, 0, 0, 0, 0, t1209, t1210, 0, t1177 * t1053 + t1174 * t1054, 0, 0, 0, 0, 0, 0, t1177 * t1092 + t1174 * t1094, t1177 * t1091 + t1174 * t1093, t1177 * t1087 + t1174 * t1088, t1177 * t1043 + t1174 * t1044, 0, 0, 0, 0, 0, 0, t1177 * t1057 + t1174 * t1058, t1177 * t1051 + t1174 * t1052, t1177 * t1049 + t1174 * t1050, t1177 * t1039 + t1174 * t1040; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1145, t1146, 0, -t1177 * t1152 + t1174 * t1153, 0, 0, 0, 0, 0, 0, -t1205, t1204, 0, t1174 * t1095 - t1177 * t1096, 0, 0, 0, 0, 0, 0, -t1210, t1209, 0, t1174 * t1053 - t1177 * t1054, 0, 0, 0, 0, 0, 0, t1174 * t1092 - t1177 * t1094, t1174 * t1091 - t1177 * t1093, t1174 * t1087 - t1177 * t1088, t1174 * t1043 - t1177 * t1044, 0, 0, 0, 0, 0, 0, t1174 * t1057 - t1177 * t1058, t1174 * t1051 - t1177 * t1052, t1174 * t1049 - t1177 * t1050, t1174 * t1039 - t1177 * t1040; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1178, -qJDD(1), 0, t1152, 0, 0, 0, 0, 0, 0, t1182, t1140, 0, t1096, 0, 0, 0, 0, 0, 0, t1206, t1112, 0, t1054, 0, 0, 0, 0, 0, 0, t1094, t1093, t1088, t1044, 0, 0, 0, 0, 0, 0, t1058, t1052, t1050, t1040; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1178, 0, t1153, 0, 0, 0, 0, 0, 0, -t1140, t1182, 0, t1095, 0, 0, 0, 0, 0, 0, -t1112, t1206, 0, t1053, 0, 0, 0, 0, 0, 0, t1092, t1091, t1087, t1043, 0, 0, 0, 0, 0, 0, t1057, t1051, t1049, t1039; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1167, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1061, 0, 0, 0, 0, 0, 0, t1080, t1078, t1073, t1045; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1160, -t1161, 0, t1120, 0, 0, 0, 0, 0, 0, t1183, t1134, 0, t1068, 0, 0, 0, 0, 0, 0, t1118, t1117, t1109, t1056, 0, 0, 0, 0, 0, 0, t1070, t1066, t1064, t1042; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1161, -t1160, 0, t1119, 0, 0, 0, 0, 0, 0, -t1134, t1183, 0, t1067, 0, 0, 0, 0, 0, 0, t1116, t1115, t1108, t1055, 0, 0, 0, 0, 0, 0, t1069, t1065, t1063, t1041; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1167, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1061, 0, 0, 0, 0, 0, 0, t1080, t1078, t1073, t1045; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1160, -t1161, 0, t1090, 0, 0, 0, 0, 0, 0, -t1127, t1126, t1129, t1062, 0, 0, 0, 0, 0, 0, t1081, t1079, t1074, t1046; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1161, -t1160, 0, t1089, 0, 0, 0, 0, 0, 0, t1154, -t1192, t1137, -t1083, 0, 0, 0, 0, 0, 0, -t1099, -t1097, -t1085, -t1047; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1167, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1061, 0, 0, 0, 0, 0, 0, t1080, t1078, t1073, t1045; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1163 * t1160, t1147, t1154, t1076, 0, 0, 0, 0, 0, 0, t1100, t1098, t1086, t1048; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1147, -t1195, -t1192, t1075, 0, 0, 0, 0, 0, 0, -t1101, -t1103, t1125, -t1071; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1154, t1192, -t1137, t1083, 0, 0, 0, 0, 0, 0, t1099, t1097, t1085, t1047; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1124, t1122, t1102, t1060; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1123, t1121, t1104, t1059; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1101, t1103, -t1125, t1071;];
f_new_reg = t1;
