% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:20
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPPR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPPR2_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:20:54
% EndTime: 2019-12-05 18:20:56
% DurationCPUTime: 2.38s
% Computational Cost: add. (8661->175), mult. (12134->252), div. (0->0), fcn. (7317->10), ass. (0->142)
t1155 = qJD(1) + qJD(2);
t1151 = t1155 ^ 2;
t1160 = sin(pkin(8));
t1152 = qJDD(1) + qJDD(2);
t1162 = cos(pkin(8));
t1180 = t1162 * t1152;
t1123 = t1160 * t1151 - t1180;
t1164 = sin(qJ(2));
t1167 = cos(qJ(2));
t1182 = t1160 * t1152;
t1174 = -t1162 * t1151 - t1182;
t1101 = t1167 * t1123 - t1164 * t1174;
t1165 = sin(qJ(1));
t1168 = cos(qJ(1));
t1197 = t1164 * t1123 + t1167 * t1174;
t1201 = t1165 * t1101 + t1168 * t1197;
t1200 = t1168 * t1101 - t1165 * t1197;
t1129 = t1164 * t1151 - t1167 * t1152;
t1173 = -t1167 * t1151 - t1164 * t1152;
t1196 = t1165 * t1129 + t1168 * t1173;
t1195 = t1168 * t1129 - t1165 * t1173;
t1159 = sin(pkin(9));
t1153 = t1159 ^ 2;
t1161 = cos(pkin(9));
t1154 = t1161 ^ 2;
t1179 = t1153 + t1154;
t1126 = t1179 * t1151;
t1181 = t1161 * t1155;
t1137 = -qJD(5) + t1181;
t1190 = t1137 ^ 2;
t1189 = 2 * qJD(4);
t1163 = sin(qJ(5));
t1188 = t1152 * t1163;
t1166 = cos(qJ(5));
t1187 = t1152 * t1166;
t1186 = t1153 * t1151;
t1185 = t1155 * t1163;
t1184 = t1155 * t1166;
t1183 = t1159 * t1152;
t1143 = t1161 * t1152;
t1142 = t1168 * g(2) + t1165 * g(3);
t1131 = qJDD(1) * pkin(1) + t1142;
t1141 = t1165 * g(2) - t1168 * g(3);
t1169 = qJD(1) ^ 2;
t1132 = -t1169 * pkin(1) + t1141;
t1109 = t1164 * t1131 + t1167 * t1132;
t1103 = -t1151 * pkin(2) + t1109;
t1108 = t1167 * t1131 - t1164 * t1132;
t1172 = t1152 * pkin(2) + t1108;
t1079 = t1162 * t1103 + t1160 * t1172;
t1178 = t1143 - qJDD(5);
t1177 = t1137 * t1185;
t1073 = -t1151 * pkin(3) + t1152 * qJ(4) + t1079;
t1158 = -g(1) + qJDD(3);
t1065 = t1161 * t1073 + t1159 * t1158 + t1181 * t1189;
t1078 = -t1160 * t1103 + t1162 * t1172;
t1176 = t1163 * t1166 * t1186;
t1175 = -pkin(4) * t1161 - pkin(7) * t1159;
t1072 = -t1152 * pkin(3) - t1151 * qJ(4) + qJDD(4) - t1078;
t1157 = t1166 ^ 2;
t1156 = t1163 ^ 2;
t1145 = t1161 * t1158;
t1136 = t1161 * t1151 * t1159;
t1135 = -t1168 * qJDD(1) + t1165 * t1169;
t1134 = t1165 * qJDD(1) + t1168 * t1169;
t1133 = t1159 * qJD(5) * t1185;
t1118 = t1179 * t1152;
t1117 = t1175 * t1155;
t1116 = t1161 * t1126;
t1115 = t1159 * t1126;
t1114 = (t1156 + t1157) * t1186;
t1113 = -t1156 * t1186 - t1190;
t1112 = -t1176 - t1178;
t1111 = -t1176 + t1178;
t1110 = -t1157 * t1186 - t1190;
t1107 = -t1162 * t1116 - t1160 * t1143;
t1106 = t1162 * t1115 + t1159 * t1182;
t1105 = -t1160 * t1116 + t1161 * t1180;
t1104 = t1160 * t1115 - t1159 * t1180;
t1098 = t1162 * t1118 - t1160 * t1126;
t1097 = t1160 * t1118 + t1162 * t1126;
t1093 = t1133 + (t1177 - t1187) * t1159;
t1092 = -t1133 + (t1177 + t1187) * t1159;
t1091 = (-t1188 + (-qJD(5) - t1137) * t1184) * t1159;
t1090 = (t1188 + (qJD(5) - t1137) * t1184) * t1159;
t1089 = -t1163 * t1112 + t1166 * t1113;
t1088 = t1166 * t1112 + t1163 * t1113;
t1087 = -t1163 * t1110 + t1166 * t1111;
t1086 = t1166 * t1110 + t1163 * t1111;
t1085 = -t1164 * t1108 + t1167 * t1109;
t1084 = t1167 * t1108 + t1164 * t1109;
t1083 = -t1164 * t1105 + t1167 * t1107;
t1082 = -t1164 * t1104 + t1167 * t1106;
t1081 = t1167 * t1105 + t1164 * t1107;
t1080 = t1167 * t1104 + t1164 * t1106;
t1077 = -t1164 * t1097 + t1167 * t1098;
t1076 = t1167 * t1097 + t1164 * t1098;
t1075 = t1166 * t1091 - t1163 * t1093;
t1074 = t1163 * t1091 + t1166 * t1093;
t1070 = t1161 * t1089 + t1159 * t1090;
t1069 = t1159 * t1089 - t1161 * t1090;
t1068 = t1161 * t1087 + t1159 * t1092;
t1067 = t1159 * t1087 - t1161 * t1092;
t1066 = t1175 * t1152 + t1072;
t1064 = t1145 + (-0.2e1 * qJD(4) * t1155 - t1073) * t1159;
t1063 = t1161 * t1075 - t1159 * t1114;
t1062 = t1159 * t1075 + t1161 * t1114;
t1061 = t1117 * t1181 + t1065;
t1060 = -t1145 + (t1073 + (t1189 + t1117) * t1155) * t1159;
t1059 = t1162 * t1070 + t1160 * t1088;
t1058 = t1160 * t1070 - t1162 * t1088;
t1057 = -t1160 * t1078 + t1162 * t1079;
t1056 = t1162 * t1078 + t1160 * t1079;
t1055 = t1162 * t1068 + t1160 * t1086;
t1054 = t1160 * t1068 - t1162 * t1086;
t1053 = t1162 * t1063 + t1160 * t1074;
t1052 = t1160 * t1063 - t1162 * t1074;
t1051 = -t1159 * t1064 + t1161 * t1065;
t1050 = t1161 * t1064 + t1159 * t1065;
t1049 = t1166 * t1061 + t1163 * t1066;
t1048 = -t1163 * t1061 + t1166 * t1066;
t1047 = -t1164 * t1058 + t1167 * t1059;
t1046 = t1167 * t1058 + t1164 * t1059;
t1045 = t1162 * t1051 + t1160 * t1072;
t1044 = t1160 * t1051 - t1162 * t1072;
t1043 = -t1164 * t1056 + t1167 * t1057;
t1042 = t1167 * t1056 + t1164 * t1057;
t1041 = -t1164 * t1054 + t1167 * t1055;
t1040 = t1167 * t1054 + t1164 * t1055;
t1039 = -t1164 * t1052 + t1167 * t1053;
t1038 = t1167 * t1052 + t1164 * t1053;
t1037 = -t1163 * t1048 + t1166 * t1049;
t1036 = t1166 * t1048 + t1163 * t1049;
t1035 = t1161 * t1037 + t1159 * t1060;
t1034 = t1159 * t1037 - t1161 * t1060;
t1033 = -t1164 * t1044 + t1167 * t1045;
t1032 = t1167 * t1044 + t1164 * t1045;
t1031 = t1162 * t1035 + t1160 * t1036;
t1030 = t1160 * t1035 - t1162 * t1036;
t1029 = -t1164 * t1030 + t1167 * t1031;
t1028 = t1167 * t1030 + t1164 * t1031;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1158, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1050, 0, 0, 0, 0, 0, 0, t1069, t1067, t1062, t1034; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1135, t1134, 0, -t1165 * t1141 - t1168 * t1142, 0, 0, 0, 0, 0, 0, t1195, -t1196, 0, -t1168 * t1084 - t1165 * t1085, 0, 0, 0, 0, 0, 0, t1200, -t1201, 0, -t1168 * t1042 - t1165 * t1043, 0, 0, 0, 0, 0, 0, -t1168 * t1081 - t1165 * t1083, -t1168 * t1080 - t1165 * t1082, -t1168 * t1076 - t1165 * t1077, -t1168 * t1032 - t1165 * t1033, 0, 0, 0, 0, 0, 0, -t1168 * t1046 - t1165 * t1047, -t1168 * t1040 - t1165 * t1041, -t1168 * t1038 - t1165 * t1039, -t1168 * t1028 - t1165 * t1029; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1134, t1135, 0, t1168 * t1141 - t1165 * t1142, 0, 0, 0, 0, 0, 0, t1196, t1195, 0, -t1165 * t1084 + t1168 * t1085, 0, 0, 0, 0, 0, 0, t1201, t1200, 0, -t1165 * t1042 + t1168 * t1043, 0, 0, 0, 0, 0, 0, -t1165 * t1081 + t1168 * t1083, -t1165 * t1080 + t1168 * t1082, -t1165 * t1076 + t1168 * t1077, -t1165 * t1032 + t1168 * t1033, 0, 0, 0, 0, 0, 0, -t1165 * t1046 + t1168 * t1047, -t1165 * t1040 + t1168 * t1041, -t1165 * t1038 + t1168 * t1039, -t1165 * t1028 + t1168 * t1029; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1169, -qJDD(1), 0, t1141, 0, 0, 0, 0, 0, 0, t1173, t1129, 0, t1085, 0, 0, 0, 0, 0, 0, t1197, t1101, 0, t1043, 0, 0, 0, 0, 0, 0, t1083, t1082, t1077, t1033, 0, 0, 0, 0, 0, 0, t1047, t1041, t1039, t1029; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1169, 0, t1142, 0, 0, 0, 0, 0, 0, -t1129, t1173, 0, t1084, 0, 0, 0, 0, 0, 0, -t1101, t1197, 0, t1042, 0, 0, 0, 0, 0, 0, t1081, t1080, t1076, t1032, 0, 0, 0, 0, 0, 0, t1046, t1040, t1038, t1028; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1158, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1050, 0, 0, 0, 0, 0, 0, t1069, t1067, t1062, t1034; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1151, -t1152, 0, t1109, 0, 0, 0, 0, 0, 0, t1174, t1123, 0, t1057, 0, 0, 0, 0, 0, 0, t1107, t1106, t1098, t1045, 0, 0, 0, 0, 0, 0, t1059, t1055, t1053, t1031; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1152, -t1151, 0, t1108, 0, 0, 0, 0, 0, 0, -t1123, t1174, 0, t1056, 0, 0, 0, 0, 0, 0, t1105, t1104, t1097, t1044, 0, 0, 0, 0, 0, 0, t1058, t1054, t1052, t1030; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1158, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1050, 0, 0, 0, 0, 0, 0, t1069, t1067, t1062, t1034; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1151, -t1152, 0, t1079, 0, 0, 0, 0, 0, 0, -t1116, t1115, t1118, t1051, 0, 0, 0, 0, 0, 0, t1070, t1068, t1063, t1035; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1152, -t1151, 0, t1078, 0, 0, 0, 0, 0, 0, t1143, -t1183, t1126, -t1072, 0, 0, 0, 0, 0, 0, -t1088, -t1086, -t1074, -t1036; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1158, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1050, 0, 0, 0, 0, 0, 0, t1069, t1067, t1062, t1034; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1154 * t1151, t1136, t1143, t1065, 0, 0, 0, 0, 0, 0, t1089, t1087, t1075, t1037; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1136, -t1186, -t1183, t1064, 0, 0, 0, 0, 0, 0, -t1090, -t1092, t1114, -t1060; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1143, t1183, -t1126, t1072, 0, 0, 0, 0, 0, 0, t1088, t1086, t1074, t1036; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1113, t1111, t1091, t1049; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1112, t1110, t1093, t1048; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1090, t1092, -t1114, t1060;];
f_new_reg = t1;
