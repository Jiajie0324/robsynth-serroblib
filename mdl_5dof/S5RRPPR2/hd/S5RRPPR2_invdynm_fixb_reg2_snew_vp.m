% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:58
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPPR2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR2_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR2_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR2_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPPR2_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:57:49
% EndTime: 2020-01-03 11:58:00
% DurationCPUTime: 10.91s
% Computational Cost: add. (54668->498), mult. (76171->683), div. (0->0), fcn. (45228->10), ass. (0->345)
t911 = qJD(1) + qJD(2);
t907 = t911 ^ 2;
t916 = sin(pkin(8));
t908 = qJDD(1) + qJDD(2);
t918 = cos(pkin(8));
t986 = t918 * t908;
t869 = t916 * t907 - t986;
t914 = g(1) - qJDD(3);
t1013 = qJ(3) * t869 - t916 * t914;
t990 = t916 * t908;
t866 = t918 * t907 + t990;
t920 = sin(qJ(2));
t923 = cos(qJ(2));
t815 = t920 * t866 + t923 * t869;
t837 = qJ(3) * t866 - t918 * t914;
t1024 = pkin(6) * t815 + t1013 * t923 + t920 * t837;
t811 = t923 * t866 - t920 * t869;
t743 = pkin(6) * t811 - t1013 * t920 + t923 * t837;
t921 = sin(qJ(1));
t924 = cos(qJ(1));
t758 = t924 * t811 - t921 * t815;
t1038 = -pkin(5) * t758 + t1024 * t921 - t924 * t743;
t1012 = t921 * t811 + t924 * t815;
t1037 = pkin(5) * t1012 + t1024 * t924 + t921 * t743;
t894 = t924 * g(2) + t921 * g(3);
t880 = qJDD(1) * pkin(1) - t894;
t893 = t921 * g(2) - t924 * g(3);
t925 = qJD(1) ^ 2;
t881 = -t925 * pkin(1) - t893;
t830 = t920 * t880 + t923 * t881;
t817 = -t907 * pkin(2) + t830;
t944 = t923 * t880 - t920 * t881;
t933 = t908 * pkin(2) + t944;
t759 = t916 * t817 - t918 * t933;
t760 = t918 * t817 + t916 * t933;
t963 = t916 * t759 + t918 * t760;
t696 = t918 * t759 - t916 * t760;
t981 = t920 * t696;
t1019 = t923 * t963 + t981;
t976 = t923 * t696;
t645 = -t920 * t963 + t976;
t1036 = t1019 * t924 + t921 * t645;
t1035 = t1019 * t921 - t924 * t645;
t875 = t920 * t907 - t923 * t908;
t1014 = pkin(6) * t875 - t920 * g(1);
t872 = t923 * t907 + t920 * t908;
t819 = t924 * t872 - t921 * t875;
t845 = pkin(6) * t872 - t923 * g(1);
t1028 = -pkin(5) * t819 + t1014 * t921 - t924 * t845;
t945 = t921 * t872 + t924 * t875;
t1027 = pkin(5) * t945 + t1014 * t924 + t921 * t845;
t915 = sin(pkin(9));
t910 = t915 ^ 2;
t917 = cos(pkin(9));
t927 = t917 ^ 2;
t856 = (t910 + t927) * t917 * t907;
t967 = t917 * t986;
t825 = -t916 * t856 + t967;
t988 = t917 * t908;
t827 = t918 * t856 + t916 * t988;
t764 = t923 * t825 - t920 * t827;
t766 = t920 * t825 + t923 * t827;
t1026 = t924 * t764 - t921 * t766;
t1025 = t921 * t764 + t924 * t766;
t962 = t923 * t830 - t920 * t944;
t771 = -t920 * t830 - t923 * t944;
t975 = t924 * t771;
t1021 = t921 * t962 - t975;
t980 = t921 * t771;
t1020 = t924 * t962 + t980;
t992 = t915 * t917;
t832 = t866 * t992;
t886 = t907 * t992;
t833 = -t916 * t886 + t915 * t967;
t777 = t923 * t832 + t920 * t833;
t780 = t920 * t832 - t923 * t833;
t1011 = t924 * t777 - t921 * t780;
t1010 = t921 * t777 + t924 * t780;
t919 = sin(qJ(5));
t922 = cos(qJ(5));
t840 = (qJD(5) * t911 * t922 + t908 * t919) * t915;
t890 = t917 * t911 - qJD(5);
t973 = t890 * t911 * t915;
t853 = t922 * t973;
t800 = t853 - t840;
t1009 = t919 * t800;
t900 = t917 * t914;
t1002 = 2 * qJD(4);
t746 = -t907 * pkin(3) + t908 * qJ(4) + t760;
t959 = t911 * t1002 + t746;
t725 = t959 * t915 + t900;
t993 = t915 * t914;
t726 = t959 * t917 - t993;
t679 = t915 * t725 + t917 * t726;
t995 = t911 * t919;
t970 = t915 * t995;
t883 = qJD(5) * t970;
t972 = t890 * t995;
t997 = t908 * t922;
t802 = t915 * (t972 + t997) - t883;
t887 = t890 ^ 2;
t1001 = pkin(4) * t915;
t1000 = pkin(4) * t917;
t996 = t910 * t907;
t745 = -t908 * pkin(3) - t907 * qJ(4) + qJDD(4) + t759;
t738 = t915 * t745;
t888 = -qJDD(5) + t988;
t994 = t915 * t888;
t897 = t915 * t908;
t991 = t916 * t745;
t739 = t917 * t745;
t987 = t918 * t745;
t951 = -pkin(7) * t915 - t1000;
t942 = t746 + (t951 * t911 + t1002) * t911;
t709 = t915 * t942 + t900;
t984 = t919 * t709;
t971 = t907 * t919 * t922;
t878 = t910 * t971;
t838 = -t878 + t888;
t983 = t919 * t838;
t839 = -t878 - t888;
t982 = t919 * t839;
t979 = t922 * t709;
t978 = t922 * t838;
t977 = t922 * t839;
t974 = -pkin(3) * t745 + qJ(4) * t679;
t913 = t922 ^ 2;
t969 = t913 * t996;
t968 = t915 * t988;
t966 = pkin(3) * t988 - qJ(4) * t856 - t739;
t649 = t916 * t679 - t987;
t965 = pkin(2) * t649 + t974;
t884 = -t921 * qJDD(1) - t924 * t925;
t964 = pkin(5) * t884 + t924 * g(1);
t710 = t917 * t942 - t993;
t727 = t951 * t908 + t745;
t664 = t919 * t710 - t922 * t727;
t665 = t922 * t710 + t919 * t727;
t634 = t919 * t664 + t922 * t665;
t960 = -t921 * t893 - t924 * t894;
t909 = t915 * t910;
t958 = t909 * t971;
t957 = t890 * t970;
t831 = -t969 - t887;
t784 = t922 * t831 + t983;
t658 = -pkin(4) * t784 + t665;
t686 = -pkin(7) * t784 + t979;
t785 = -t919 * t831 + t978;
t730 = t917 * t785 + t802 * t915;
t956 = -pkin(3) * t784 + qJ(4) * t730 + t917 * t658 + t915 * t686;
t912 = t919 ^ 2;
t889 = t912 * t996;
t847 = -t889 - t887;
t789 = t919 * t847 + t977;
t660 = -pkin(4) * t789 + t664;
t688 = -pkin(7) * t789 + t984;
t792 = t922 * t847 - t982;
t737 = t917 * t792 - t915 * t800;
t955 = -pkin(3) * t789 + qJ(4) * t737 + t917 * t660 + t915 * t688;
t896 = t910 * t908;
t898 = t927 * t908;
t864 = t898 + t896;
t899 = t927 * t907;
t870 = t899 + t996;
t954 = pkin(3) * t870 + qJ(4) * t864 + t679;
t953 = pkin(2) * t825 + t966;
t952 = -pkin(4) * t709 + pkin(7) * t634;
t950 = -pkin(2) * t869 - t759;
t949 = t917 * t878;
t691 = t916 * t730 - t918 * t784;
t948 = pkin(2) * t691 + t956;
t701 = t916 * t737 - t918 * t789;
t947 = pkin(2) * t701 + t955;
t807 = t916 * t864 + t918 * t870;
t946 = pkin(2) * t807 + t954;
t633 = -t922 * t664 + t919 * t665;
t678 = t917 * t725 - t915 * t726;
t943 = t924 * t893 - t921 * t894;
t855 = (t915 * t927 + t909) * t907;
t941 = -pkin(3) * t897 + qJ(4) * t855 + t738;
t823 = t916 * t855 - t915 * t986;
t938 = pkin(2) * t823 + t941;
t799 = t853 + t840;
t801 = -t883 + (-t972 + t997) * t915;
t748 = -t919 * t799 - t922 * t801;
t625 = -pkin(7) * t748 - t633;
t750 = -t922 * t799 + t919 * t801;
t849 = t889 + t969;
t716 = t917 * t750 - t915 * t849;
t937 = qJ(4) * t716 + t915 * t625 + (-pkin(3) - t1000) * t748;
t936 = -pkin(4) * t802 + pkin(7) * t785 + t984;
t935 = pkin(4) * t800 + pkin(7) * t792 - t979;
t681 = t916 * t716 - t918 * t748;
t934 = pkin(2) * t681 + t937;
t932 = pkin(4) * t849 + pkin(7) * t750 + t634;
t620 = t917 * t634 + t915 * t709;
t931 = qJ(4) * t620 + (-pkin(3) + t951) * t633;
t605 = t916 * t620 - t918 * t633;
t930 = pkin(2) * t605 + t931;
t929 = -pkin(2) * t866 - t760;
t885 = t924 * qJDD(1) - t921 * t925;
t882 = 0.2e1 * t968;
t876 = t917 * t888;
t871 = -t899 + t996;
t865 = t898 - t896;
t862 = pkin(5) * t885 + t921 * g(1);
t850 = -t889 + t969;
t848 = t887 - t969;
t846 = t889 - t887;
t841 = t922 * t897 - t883;
t826 = t918 * t855 + t915 * t990;
t810 = t918 * t865 + t916 * t871;
t809 = t918 * t864 - t916 * t870;
t808 = t916 * t865 - t918 * t871;
t806 = (-t912 - t913) * t973;
t798 = t919 * t841 - t913 * t973;
t797 = -t922 * t840 - t912 * t973;
t796 = (t841 + t957) * t922;
t794 = -pkin(1) * t875 + t944;
t793 = -pkin(1) * t872 - t830;
t791 = t922 * t846 + t983;
t790 = -t919 * t848 + t977;
t788 = t919 * t846 - t978;
t787 = t922 * t848 + t982;
t783 = -t916 * t806 - t918 * t994;
t782 = t918 * t806 - t916 * t994;
t776 = t917 * t796 + t958;
t775 = -t1009 * t917 - t958;
t774 = t915 * t796 - t949;
t773 = -t1009 * t915 + t949;
t768 = pkin(1) * t771;
t765 = -t920 * t823 + t923 * t826;
t762 = t923 * t823 + t920 * t826;
t761 = pkin(1) * g(1) + pkin(6) * t962;
t756 = -t920 * t808 + t923 * t810;
t755 = -t920 * t807 + t923 * t809;
t754 = t923 * t808 + t920 * t810;
t753 = t923 * t807 + t920 * t809;
t751 = t922 * t800 - t919 * t802;
t749 = t922 * t802 + t1009;
t736 = t917 * t791 - t915 * t799;
t735 = t917 * t790 + t915 * t801;
t734 = t915 * t792 + t917 * t800;
t733 = t915 * t791 + t917 * t799;
t732 = t915 * t790 - t917 * t801;
t729 = t915 * t785 - t802 * t917;
t721 = t918 * t776 + t916 * t798;
t720 = t918 * t775 + t916 * t797;
t719 = t916 * t776 - t918 * t798;
t718 = t916 * t775 - t918 * t797;
t717 = t917 * t751 + t915 * t850;
t715 = t915 * t751 - t917 * t850;
t714 = t915 * t750 + t917 * t849;
t712 = -t920 * t782 + t923 * t783;
t711 = t923 * t782 + t920 * t783;
t708 = -pkin(1) * t815 + t950;
t707 = -pkin(1) * t811 + t929;
t706 = t921 * t762 - t924 * t765;
t705 = t924 * t762 + t921 * t765;
t704 = t918 * t737 + t916 * t789;
t703 = t918 * t736 + t916 * t788;
t702 = t918 * t735 + t916 * t787;
t700 = t916 * t736 - t918 * t788;
t699 = t916 * t735 - t918 * t787;
t693 = pkin(2) * t696;
t692 = t918 * t730 + t916 * t784;
t689 = pkin(2) * t914 + qJ(3) * t963;
t684 = t918 * t717 + t916 * t749;
t683 = t918 * t716 + t916 * t748;
t682 = t916 * t717 - t918 * t749;
t675 = pkin(1) * t764 + t953;
t674 = pkin(1) * t762 + t938;
t673 = -t920 * t719 + t923 * t721;
t672 = -t920 * t718 + t923 * t720;
t671 = t923 * t719 + t920 * t721;
t670 = t923 * t718 + t920 * t720;
t669 = -qJ(3) * t823 - t916 * t726 + t917 * t987;
t668 = -qJ(3) * t825 - t916 * t725 + t915 * t987;
t667 = qJ(3) * t826 + t918 * t726 + t916 * t739;
t666 = -qJ(3) * t827 + t918 * t725 + t915 * t991;
t662 = -qJ(3) * t807 + t918 * t678;
t661 = qJ(3) * t809 + t916 * t678;
t656 = -t920 * t701 + t923 * t704;
t655 = -t920 * t700 + t923 * t703;
t654 = -t920 * t699 + t923 * t702;
t653 = t923 * t701 + t920 * t704;
t652 = t923 * t700 + t920 * t703;
t651 = t923 * t699 + t920 * t702;
t650 = t918 * t679 + t991;
t648 = -pkin(3) * t734 - t935;
t642 = -pkin(3) * t729 - t936;
t641 = -t920 * t691 + t923 * t692;
t640 = t923 * t691 + t920 * t692;
t639 = pkin(1) * t753 + t946;
t638 = -t920 * t682 + t923 * t684;
t637 = -t920 * t681 + t923 * t683;
t636 = t923 * t682 + t920 * t684;
t635 = t923 * t681 + t920 * t683;
t631 = -pkin(1) * t645 - t693;
t630 = -pkin(6) * t762 - t920 * t667 + t923 * t669;
t629 = -pkin(6) * t764 - t920 * t666 + t923 * t668;
t628 = pkin(6) * t765 + t923 * t667 + t920 * t669;
t627 = -pkin(6) * t766 + t923 * t666 + t920 * t668;
t626 = -qJ(4) * t734 - t915 * t660 + t917 * t688;
t623 = -qJ(4) * t729 - t915 * t658 + t917 * t686;
t622 = -pkin(6) * t753 - t920 * t661 + t923 * t662;
t621 = pkin(6) * t755 + t923 * t661 + t920 * t662;
t619 = t915 * t634 - t917 * t709;
t617 = -t920 * t649 + t923 * t650;
t616 = t923 * t649 + t920 * t650;
t615 = pkin(6) * t645 + qJ(3) * t976 - t920 * t689;
t614 = pkin(1) * t914 + pkin(6) * t1019 + qJ(3) * t981 + t923 * t689;
t613 = -pkin(3) * t714 - t932;
t612 = -qJ(3) * t649 - (pkin(3) * t916 - qJ(4) * t918) * t678;
t611 = -qJ(4) * t714 + t748 * t1001 + t917 * t625;
t610 = qJ(3) * t650 - (-pkin(3) * t918 - qJ(4) * t916 - pkin(2)) * t678;
t609 = -qJ(3) * t701 + t918 * t626 - t916 * t648;
t608 = pkin(1) * t653 + t947;
t607 = -qJ(3) * t691 + t918 * t623 - t916 * t642;
t606 = t918 * t620 + t916 * t633;
t603 = -pkin(2) * t734 + qJ(3) * t704 + t916 * t626 + t918 * t648;
t602 = pkin(1) * t640 + t948;
t601 = -pkin(2) * t729 + qJ(3) * t692 + t916 * t623 + t918 * t642;
t600 = -pkin(3) * t619 - t952;
t599 = pkin(1) * t616 + t965;
t598 = pkin(1) * t635 + t934;
t597 = -qJ(4) * t619 + (-pkin(7) * t917 + t1001) * t633;
t596 = -qJ(3) * t681 + t918 * t611 - t916 * t613;
t595 = -pkin(2) * t714 + qJ(3) * t683 + t916 * t611 + t918 * t613;
t594 = -t920 * t605 + t923 * t606;
t593 = t923 * t605 + t920 * t606;
t592 = -pkin(6) * t616 - t920 * t610 + t923 * t612;
t591 = -pkin(6) * t653 - t920 * t603 + t923 * t609;
t590 = -pkin(1) * t734 + pkin(6) * t656 + t923 * t603 + t920 * t609;
t589 = pkin(1) * t678 + pkin(6) * t617 + t923 * t610 + t920 * t612;
t588 = -pkin(6) * t640 - t920 * t601 + t923 * t607;
t587 = -pkin(1) * t729 + pkin(6) * t641 + t923 * t601 + t920 * t607;
t586 = -pkin(6) * t635 - t920 * t595 + t923 * t596;
t585 = -qJ(3) * t605 + t918 * t597 - t916 * t600;
t584 = -pkin(1) * t714 + pkin(6) * t637 + t923 * t595 + t920 * t596;
t583 = -pkin(2) * t619 + qJ(3) * t606 + t916 * t597 + t918 * t600;
t582 = pkin(1) * t593 + t930;
t581 = -pkin(6) * t593 - t920 * t583 + t923 * t585;
t580 = -pkin(1) * t619 + pkin(6) * t594 + t923 * t583 + t920 * t585;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t894, t893, 0, 0, 0, 0, 0, 0, 0, t908, t794, t793, 0, -t768, 0, 0, 0, 0, 0, t908, t708, t707, 0, t631, t896, t882, 0, t898, 0, 0, t675, t674, t639, t599, t774, t715, t732, t773, t733, t876, t608, t602, t598, t582; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t884, 0, t885, 0, t964, -t862, -t943, -pkin(5) * t943, 0, 0, t819, 0, -t945, 0, t1028, t1027, t1020, pkin(5) * t1020 + pkin(6) * t980 + t924 * t761, 0, 0, t758, 0, -t1012, 0, t1038, t1037, t1036, pkin(5) * t1036 + t924 * t614 + t921 * t615, t1011, t924 * t754 + t921 * t756, t705, -t1011, -t1026, 0, -pkin(5) * t1025 + t924 * t627 + t921 * t629, -pkin(5) * t706 + t924 * t628 + t921 * t630, t921 * t622 + t924 * t621 - pkin(5) * (t921 * t753 - t924 * t755), t921 * t592 + t924 * t589 - pkin(5) * (t921 * t616 - t924 * t617), t924 * t671 + t921 * t673, t924 * t636 + t921 * t638, t924 * t651 + t921 * t654, t924 * t670 + t921 * t672, t924 * t652 + t921 * t655, t924 * t711 + t921 * t712, t921 * t591 + t924 * t590 - pkin(5) * (t921 * t653 - t924 * t656), t921 * t588 + t924 * t587 - pkin(5) * (t921 * t640 - t924 * t641), t921 * t586 + t924 * t584 - pkin(5) * (t921 * t635 - t924 * t637), t921 * t581 + t924 * t580 - pkin(5) * (t921 * t593 - t924 * t594); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t885, 0, -t884, 0, t862, t964, t960, pkin(5) * t960, 0, 0, t945, 0, t819, 0, -t1027, t1028, t1021, pkin(5) * t1021 - pkin(6) * t975 + t921 * t761, 0, 0, t1012, 0, t758, 0, -t1037, t1038, t1035, pkin(5) * t1035 + t921 * t614 - t924 * t615, t1010, t921 * t754 - t924 * t756, t706, -t1010, -t1025, 0, pkin(5) * t1026 + t921 * t627 - t924 * t629, pkin(5) * t705 + t921 * t628 - t924 * t630, -t924 * t622 + t921 * t621 + pkin(5) * (t924 * t753 + t921 * t755), -t924 * t592 + t921 * t589 + pkin(5) * (t924 * t616 + t921 * t617), t921 * t671 - t924 * t673, t921 * t636 - t924 * t638, t921 * t651 - t924 * t654, t921 * t670 - t924 * t672, t921 * t652 - t924 * t655, t921 * t711 - t924 * t712, -t924 * t591 + t921 * t590 + pkin(5) * (t924 * t653 + t921 * t656), -t924 * t588 + t921 * t587 + pkin(5) * (t924 * t640 + t921 * t641), -t924 * t586 + t921 * t584 + pkin(5) * (t924 * t635 + t921 * t637), -t924 * t581 + t921 * t580 + pkin(5) * (t924 * t593 + t921 * t594); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t925, 0, 0, -g(1), t894, 0, 0, 0, -t875, 0, -t872, 0, t1014, t845, t771, pkin(6) * t771, 0, 0, -t815, 0, -t811, 0, t1024, t743, t645, t615, -t780, t756, t765, t780, t766, 0, t629, t630, t622, t592, t673, t638, t654, t672, t655, t712, t591, t588, t586, t581; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t925, 0, qJDD(1), 0, g(1), 0, -t893, 0, 0, 0, t872, 0, -t875, 0, -t845, t1014, t962, t761, 0, 0, t811, 0, -t815, 0, -t743, t1024, t1019, t614, t777, t754, t762, -t777, -t764, 0, t627, t628, t621, t589, t671, t636, t651, t670, t652, t711, t590, t587, t584, t580; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t894, t893, 0, 0, 0, 0, 0, 0, 0, t908, t794, t793, 0, -t768, 0, 0, 0, 0, 0, t908, t708, t707, 0, t631, t896, t882, 0, t898, 0, 0, t675, t674, t639, t599, t774, t715, t732, t773, t733, t876, t608, t602, t598, t582; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t908, 0, -t907, 0, 0, -g(1), -t944, 0, 0, 0, -t869, 0, -t866, 0, t1013, t837, t696, qJ(3) * t696, t833, t810, t826, -t833, t827, 0, t668, t669, t662, t612, t721, t684, t702, t720, t703, t783, t609, t607, t596, t585; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t907, 0, t908, 0, g(1), 0, t830, 0, 0, 0, t866, 0, -t869, 0, -t837, t1013, t963, t689, t832, t808, t823, -t832, -t825, 0, t666, t667, t661, t610, t719, t682, t699, t718, t700, t782, t603, t601, t595, t583; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t908, t944, -t830, 0, 0, 0, 0, 0, 0, 0, t908, t950, t929, 0, -t693, t896, t882, 0, t898, 0, 0, t953, t938, t946, t965, t774, t715, t732, t773, t733, t876, t947, t948, t934, t930; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t908, 0, -t907, 0, 0, -t914, t759, 0, t968, t865, t855, -t968, t856, 0, t738, t739, t678, qJ(4) * t678, t776, t717, t735, t775, t736, -t994, t626, t623, t611, t597; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t907, 0, t908, 0, t914, 0, t760, 0, t886, -t871, -t897, -t886, -t988, 0, t725, t726, 0, pkin(3) * t678, -t798, -t749, -t787, -t797, -t788, t806, t648, t642, t613, t600; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t908, -t759, -t760, 0, 0, t896, t882, 0, t898, 0, 0, t966, t941, t954, t974, t774, t715, t732, t773, t733, t876, t955, t956, t937, t931; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t897, t988, t886, 0, t899, 0, 0, t745, t725, 0, t796, t751, t790, -t1009, t791, 0, t688, t686, t625, -pkin(7) * t633; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t897, -t996, t988, -t886, 0, -t745, 0, t726, 0, -t878, -t850, -t801, t878, t799, t888, t660, t658, -pkin(4) * t748, -pkin(4) * t633; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t886, t871, t897, t886, t988, 0, -t725, -t726, 0, 0, t798, t749, t787, t797, t788, -t806, t935, t936, t932, t952; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t841, t800, t839, -t957, t846, t957, 0, t709, t664, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t853, t802, t848, -t840, -t838, t853, -t709, 0, t665, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t878, t850, t801, -t878, -t799, -t888, -t664, -t665, 0, 0;];
m_new_reg = t1;
