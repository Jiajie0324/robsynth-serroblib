% Calculate minimal parameter regressor of coriolis matrix for
% S5RRPPR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta4]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x25]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:48
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RRPPR11_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR11_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR11_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPPR11_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:48:02
% EndTime: 2019-12-31 19:48:08
% DurationCPUTime: 2.29s
% Computational Cost: add. (1736->274), mult. (3681->385), div. (0->0), fcn. (3624->6), ass. (0->217)
t158 = cos(pkin(8));
t162 = cos(qJ(5));
t236 = t162 * t158;
t157 = sin(pkin(8));
t160 = sin(qJ(5));
t241 = t160 * t157;
t110 = t236 - t241;
t161 = sin(qJ(2));
t131 = t161 * t236;
t239 = t160 * t161;
t191 = t239 / 0.2e1;
t264 = t161 / 0.2e1;
t46 = t157 * t191 - t131 / 0.2e1 + t110 * t264;
t279 = t46 * qJD(5);
t101 = t110 * qJD(5);
t192 = -t241 / 0.2e1;
t267 = t110 / 0.2e1;
t168 = t131 / 0.2e1 + (t192 + t267) * t161;
t272 = t168 * qJD(1);
t278 = -t101 - t272;
t212 = t110 * qJD(2);
t237 = t162 * t157;
t240 = t160 * t158;
t107 = t237 + t240;
t163 = cos(qJ(2));
t86 = t107 * t163;
t219 = t86 * qJD(1);
t277 = t212 - t219;
t171 = -t237 / 0.2e1 - t240 / 0.2e1;
t269 = t107 / 0.2e1;
t51 = (t269 + t171) * t163;
t276 = t51 * qJD(1) + t212;
t214 = t107 * qJD(2);
t132 = t163 * t236;
t83 = t163 * t241 - t132;
t275 = -t83 * qJD(1) + t214;
t266 = t132 / 0.2e1;
t268 = -t110 / 0.2e1;
t50 = t266 + (t192 + t268) * t163;
t274 = t50 * qJD(1) + t214;
t273 = qJD(5) * t168;
t159 = -pkin(2) - qJ(4);
t238 = t161 * qJ(3);
t182 = -t159 * t163 + t238;
t202 = t163 * qJD(3);
t216 = qJD(4) * t161;
t271 = qJD(2) * t182 - t202 + t216;
t270 = pkin(3) + pkin(6);
t265 = -t161 / 0.2e1;
t263 = t163 / 0.2e1;
t262 = pkin(7) * t161;
t261 = -pkin(7) + t159;
t103 = -pkin(1) - t182;
t129 = t270 * t161;
t112 = t158 * t129;
t167 = t161 * pkin(4) + t112 + (pkin(7) * t163 - t103) * t157;
t242 = t158 * t163;
t111 = t157 * t129;
t70 = t158 * t103 + t111;
t42 = -pkin(7) * t242 + t70;
t15 = t160 * t42 - t162 * t167;
t128 = t161 * pkin(2) - t163 * qJ(3);
t104 = t161 * qJ(4) + t128;
t149 = t163 * pkin(6);
t150 = t163 * pkin(3);
t130 = t149 + t150;
t114 = t130 * t158;
t37 = t163 * pkin(4) + t114 + (-t104 - t262) * t157;
t257 = t162 * t37;
t74 = t158 * t104 + t130 * t157;
t43 = t158 * t262 + t74;
t258 = t160 * t43;
t82 = t157 * t239 - t131;
t94 = (-pkin(4) * t158 - t270) * t161;
t95 = pkin(4) * t242 + t130;
t1 = (t257 - t258) * t161 - t15 * t163 - t94 * t83 + t95 * t82;
t260 = t1 * qJD(1);
t259 = t160 * t37;
t256 = t162 * t43;
t16 = t160 * t167 + t162 * t42;
t85 = t107 * t161;
t2 = (t256 + t259) * t161 + t16 * t163 + t94 * t86 - t95 * t85;
t255 = t2 * qJD(1);
t137 = t157 * pkin(4) + qJ(3);
t115 = t261 * t157;
t116 = t261 * t158;
t76 = t162 * t115 + t160 * t116;
t165 = t137 * t86 / 0.2e1 + t76 * t264 + t95 * t268;
t176 = -t258 / 0.2e1 + t257 / 0.2e1;
t3 = t165 + t176;
t254 = t3 * qJD(1);
t75 = t160 * t115 - t162 * t116;
t166 = -t137 * t83 / 0.2e1 + t75 * t265 + t95 * t269;
t177 = -t259 / 0.2e1 - t256 / 0.2e1;
t4 = t166 + t177;
t253 = t4 * qJD(1);
t243 = t157 * t163;
t244 = t157 * t161;
t69 = -t157 * t103 + t112;
t73 = -t157 * t104 + t114;
t7 = t69 * t244 - t73 * t243 + (-t161 * t70 + t163 * t74) * t158;
t252 = t7 * qJD(1);
t251 = t73 * t158;
t250 = t74 * t157;
t8 = -t130 * t129 + t69 * t73 + t70 * t74;
t249 = t8 * qJD(1);
t9 = -t15 * t161 - t95 * t83;
t248 = t9 * qJD(1);
t10 = -t16 * t161 - t95 * t86;
t247 = t10 * qJD(1);
t12 = t73 * t161 + t69 * t163 + (-t129 * t163 - t130 * t161) * t158;
t246 = t12 * qJD(1);
t13 = t74 * t161 - t130 * t244 + (t70 - t111) * t163;
t245 = t13 * qJD(1);
t22 = (-t157 * t69 + t158 * t70) * t161;
t235 = t22 * qJD(1);
t23 = t70 * t242 - t69 * t243;
t234 = t23 * qJD(1);
t24 = t86 * t82 + t85 * t83;
t233 = t24 * qJD(1);
t33 = -t82 * t161 + t83 * t163;
t232 = t33 * qJD(1);
t34 = t85 * t161 - t86 * t163;
t231 = t34 * qJD(1);
t230 = t46 * qJD(1);
t53 = t107 * t265 + t158 * t191 + t237 * t264;
t225 = t53 * qJD(1);
t54 = (-t107 / 0.2e1 + t171) * t161;
t41 = t54 * qJD(1);
t184 = -t163 * pkin(2) - t238;
t119 = -pkin(1) + t184;
t77 = t119 * t163 + t128 * t161;
t224 = t77 * qJD(1);
t78 = -t119 * t161 + t128 * t163;
t223 = t78 * qJD(1);
t221 = t83 * qJD(4);
t151 = t157 ^ 2;
t152 = t158 ^ 2;
t133 = t151 + t152;
t84 = t133 * t163 * t161;
t220 = t84 * qJD(1);
t218 = t86 * qJD(4);
t217 = qJD(1) * t161;
t215 = qJD(5) * t161;
t98 = t107 * qJD(5);
t156 = t163 ^ 2;
t109 = t133 * t156;
t213 = t109 * qJD(1);
t189 = -t151 / 0.2e1 - t152 / 0.2e1;
t118 = -0.1e1 / 0.2e1 + t189;
t211 = t118 * qJD(2);
t210 = t133 * qJD(2);
t155 = t161 ^ 2;
t134 = t156 - t155;
t209 = t134 * qJD(1);
t208 = t155 * qJD(1);
t207 = t155 * qJD(3);
t206 = t157 * qJD(2);
t205 = t158 * qJD(2);
t204 = t161 * qJD(2);
t203 = t163 * qJD(1);
t147 = t163 * qJD(2);
t201 = pkin(1) * t217;
t200 = pkin(1) * t203;
t199 = pkin(6) * t204;
t198 = t82 * t217;
t197 = t85 * t217;
t196 = t119 * t128 * qJD(1);
t195 = t119 * t217;
t194 = t157 * t208;
t193 = t158 * t208;
t135 = t161 * t203;
t190 = t149 / 0.2e1 + t150 / 0.2e1;
t81 = t86 * t217;
t188 = qJD(2) * t168 - t81;
t153 = qJD(2) * qJ(3);
t174 = -t251 / 0.2e1 - t250 / 0.2e1;
t21 = t174 + t190;
t187 = t21 * qJD(1) + t153;
t186 = qJD(2) * t137 + qJD(4);
t185 = (-pkin(6) / 0.2e1 - pkin(3) / 0.2e1) * t161;
t183 = t250 + t251;
t14 = -t107 * t83 + t110 * t86;
t28 = t83 ^ 2 - t86 ^ 2;
t181 = t28 * qJD(1) + t14 * qJD(2);
t38 = t107 ^ 2 - t110 ^ 2;
t180 = t14 * qJD(1) + t38 * qJD(2);
t105 = t133 * t159;
t175 = -t69 * t158 / 0.2e1 - t70 * t157 / 0.2e1;
t18 = t185 - t175;
t179 = -t18 * qJD(1) - t105 * qJD(2);
t26 = t83 * t267 + t86 * t269;
t173 = -t26 * qJD(2) + t83 * t219;
t172 = t46 * qJD(2) - t86 * qJD(5) - t81;
t170 = -t26 * qJD(1) + t107 * t212;
t169 = t163 * t216 + t207;
t164 = qJD(2) * t184 + t202;
t154 = qJ(3) * qJD(3);
t144 = pkin(6) * t147;
t139 = t147 / 0.2e1;
t136 = t161 * t147;
t117 = 0.1e1 / 0.2e1 + t189;
t106 = qJD(5) * t263 + t135;
t52 = -t86 / 0.2e1 + t171 * t163;
t49 = t110 * t263 + t163 * t192 + t266;
t40 = t54 * qJD(5);
t39 = t53 * qJD(5);
t29 = -t98 + t41;
t27 = -t54 * qJD(2) - t83 * t217;
t25 = t26 * qJD(5);
t20 = -t174 + t190;
t19 = t185 + t175;
t17 = t53 * qJD(2) + (qJD(5) + t217) * t83;
t11 = t14 * qJD(5);
t6 = -t165 + t176;
t5 = -t166 + t177;
t30 = [0, 0, 0, t136, t134 * qJD(2), 0, 0, 0, -pkin(1) * t204, -pkin(1) * t147, 0, t78 * qJD(2) - t161 * t202, -t77 * qJD(2) + t207, (qJD(2) * t128 - qJD(3) * t161) * t119, t12 * qJD(2) + t157 * t169, -t13 * qJD(2) + t158 * t169, -t7 * qJD(2) + t84 * qJD(3) + t109 * qJD(4), t8 * qJD(2) - t22 * qJD(3) - t23 * qJD(4), (-qJD(2) * t85 - t83 * qJD(5)) * t86, t24 * qJD(2) + t28 * qJD(5), t34 * qJD(2) + t215 * t83, t33 * qJD(2) + t215 * t86, t136, t1 * qJD(2) + t10 * qJD(5) + (qJD(3) * t85 + t218) * t161, -t2 * qJD(2) - t9 * qJD(5) + (-qJD(3) * t82 - t221) * t161; 0, 0, 0, t135, t209, t147, -t204, 0, -t144 - t201, t199 - t200, t164, t144 + t223, -t199 - t224, pkin(6) * t164 + t196, -t129 * t206 - t158 * t271 + t246, -t129 * t205 + t157 * t271 - t245, -qJD(2) * t183 - t252, t249 + (-t129 * qJ(3) + t159 * t183) * qJD(2) + t20 * qJD(3) + t19 * qJD(4), t277 * t85 + t25, t233 + (-t85 * t107 - t110 * t82) * qJD(2) + t11, t110 * t147 + t231 + t39, -t107 * t147 + t232 - t279, t106, t260 + (t94 * t107 + t137 * t82 - t75 * t163) * qJD(2) + t49 * qJD(3) - t168 * qJD(4) + t6 * qJD(5), -t255 + (t94 * t110 + t137 * t85 - t76 * t163) * qJD(2) + t52 * qJD(3) - t54 * qJD(4) + t5 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t147, -t135, t208, t144 - t195, t158 * t147 + t194, -t157 * t147 + t193, t220, t20 * qJD(2) - t235, 0, 0, 0, 0, 0, t49 * qJD(2) + t197 + t39, t52 * qJD(2) - t198 - t279; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (t157 * t203 - t205) * t161, (t158 * t203 + t206) * t161, t213, t19 * qJD(2) - t234, 0, 0, 0, 0, 0, -t188, t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t173, t181, t17, -t172, t139, t6 * qJD(2) + t53 * qJD(3) - t16 * qJD(5) + t247, t5 * qJD(2) - qJD(3) * t46 + t15 * qJD(5) - t248; 0, 0, 0, -t135, -t209, 0, 0, 0, t201, t200, 0, -t223, t224, -t196, -t246, t245, t252, t21 * qJD(3) - t18 * qJD(4) - t249, t219 * t85 + t25, t11 - t233, t40 - t231, -t232 - t273, -t106, t50 * qJD(3) - t46 * qJD(4) - t3 * qJD(5) - t260, t51 * qJD(3) - t53 * qJD(4) - t4 * qJD(5) + t255; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3), t154, qJD(3) * t157, qJD(3) * t158, t133 * qJD(4), -t105 * qJD(4) + t154, -t107 * t101, t38 * qJD(5), 0, 0, 0, qJD(3) * t107 + t101 * t137, qJD(3) * t110 - t137 * t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), t153, t206, t205, 0, t117 * qJD(4) + t187, 0, 0, 0, 0, 0, t274, t276; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t210, t117 * qJD(3) + t179, 0, 0, 0, 0, 0, -t230, -t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t170, t180, t29, t278, -t203 / 0.2e1, -t76 * qJD(5) + t137 * t212 - t254, t75 * qJD(5) - t137 * t214 - t253; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t135, -t208, t195, -t194, -t193, -t220, -t21 * qJD(2) + t235, 0, 0, 0, 0, 0, -t50 * qJD(2) - t197 + t40, -t51 * qJD(2) + t198 - t273; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(2), -t153, -t206, -t205, 0, t118 * qJD(4) - t187, 0, 0, 0, 0, 0, -t274, -t276; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t211, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29, t278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t157 * t135, -t158 * t135, -t213, t18 * qJD(2) + t234, 0, 0, 0, 0, 0, t172, t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t210, -t118 * qJD(3) - t179, 0, 0, 0, 0, 0, t101 + t230, -t98 + t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t211, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t277, -t275; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t173, -t181, t27, t188, t139, t3 * qJD(2) - t54 * qJD(3) + t218 - t247, t4 * qJD(2) + qJD(3) * t168 - t221 + t248; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t170, -t180, -t41, t272, t203 / 0.2e1, -t110 * t186 + t254, t107 * t186 + t253; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t41, t272; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t277, t275; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t30;
