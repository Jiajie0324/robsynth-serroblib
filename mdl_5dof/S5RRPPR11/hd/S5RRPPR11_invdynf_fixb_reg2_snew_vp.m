% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPPR11
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:48
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPPR11_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR11_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR11_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR11_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR11_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPPR11_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:48:33
% EndTime: 2019-12-31 19:48:35
% DurationCPUTime: 2.54s
% Computational Cost: add. (8627->236), mult. (19305->264), div. (0->0), fcn. (11684->8), ass. (0->160)
t1396 = sin(qJ(2));
t1399 = cos(qJ(2));
t1402 = qJD(1) ^ 2;
t1429 = t1399 * t1402;
t1376 = t1396 * t1429;
t1368 = t1376 + qJDD(2);
t1401 = qJD(2) ^ 2;
t1390 = t1399 ^ 2;
t1433 = t1390 * t1402;
t1375 = -t1401 - t1433;
t1339 = t1396 * t1368 - t1399 * t1375;
t1432 = t1396 * qJD(1);
t1382 = qJD(2) * t1432;
t1422 = t1399 * qJDD(1);
t1363 = -0.2e1 * t1382 + t1422;
t1397 = sin(qJ(1));
t1400 = cos(qJ(1));
t1450 = t1397 * t1339 - t1400 * t1363;
t1449 = t1400 * t1339 + t1397 * t1363;
t1370 = qJDD(2) - t1376;
t1389 = t1396 ^ 2;
t1434 = t1389 * t1402;
t1374 = -t1401 - t1434;
t1340 = t1399 * t1370 + t1396 * t1374;
t1437 = qJD(1) * t1399;
t1383 = qJD(2) * t1437;
t1423 = t1396 * qJDD(1);
t1360 = 0.2e1 * t1383 + t1423;
t1448 = t1397 * t1340 + t1400 * t1360;
t1447 = t1400 * t1340 - t1397 * t1360;
t1361 = t1383 + t1423;
t1371 = t1397 * g(1) - t1400 * g(2);
t1407 = -qJDD(1) * pkin(1) - t1371;
t1441 = 2 * qJD(3);
t1446 = pkin(2) * t1382 - (t1361 + t1383) * qJ(3) - t1432 * t1441 + t1407;
t1392 = sin(pkin(8));
t1393 = cos(pkin(8));
t1355 = t1392 * qJD(2) + t1393 * t1437;
t1357 = t1393 * qJD(2) - t1392 * t1437;
t1395 = sin(qJ(5));
t1398 = cos(qJ(5));
t1327 = t1398 * t1355 + t1395 * t1357;
t1445 = t1327 ^ 2;
t1329 = -t1395 * t1355 + t1398 * t1357;
t1444 = t1329 ^ 2;
t1354 = t1355 ^ 2;
t1443 = t1357 ^ 2;
t1378 = qJD(5) + t1432;
t1442 = t1378 ^ 2;
t1440 = -2 * qJD(4);
t1439 = t1399 * g(3);
t1438 = t1402 * pkin(6);
t1436 = t1329 * t1327;
t1435 = t1357 * t1355;
t1426 = qJD(5) - t1378;
t1425 = qJD(5) + t1378;
t1424 = t1389 + t1390;
t1421 = t1355 * t1432;
t1420 = t1357 * t1432;
t1362 = -t1382 + t1422;
t1369 = pkin(3) * t1432 - qJD(2) * qJ(4);
t1300 = -t1369 * t1432 + (-pkin(3) * t1390 - pkin(6)) * t1402 + (-pkin(2) - qJ(4)) * t1362 + t1446;
t1408 = -qJDD(2) * pkin(2) - t1401 * qJ(3) + qJDD(3) + t1439;
t1372 = -t1400 * g(1) - t1397 * g(2);
t1353 = -t1402 * pkin(1) + qJDD(1) * pkin(6) + t1372;
t1419 = t1402 * (-pkin(2) * t1399 - qJ(3) * t1396) + t1353;
t1308 = -qJDD(2) * qJ(4) + (t1361 - t1383) * pkin(3) + (-qJ(4) * t1429 + t1419) * t1396 + t1408;
t1280 = t1393 * t1300 + t1392 * t1308 + t1355 * t1440;
t1345 = -t1392 * qJDD(2) - t1393 * t1362;
t1346 = t1393 * qJDD(2) - t1392 * t1362;
t1418 = t1398 * t1345 - t1395 * t1346;
t1406 = t1361 - t1435;
t1417 = -t1434 - t1443;
t1405 = -t1346 - t1421;
t1415 = -t1392 * t1300 + t1393 * t1308 + t1357 * t1440;
t1414 = -qJDD(5) - t1361;
t1275 = t1406 * pkin(4) + t1405 * pkin(7) + t1415;
t1347 = pkin(4) * t1432 - t1357 * pkin(7);
t1277 = -t1354 * pkin(4) + t1345 * pkin(7) - t1347 * t1432 + t1280;
t1259 = t1398 * t1275 - t1395 * t1277;
t1260 = t1395 * t1275 + t1398 * t1277;
t1413 = t1398 * t1259 + t1395 * t1260;
t1289 = -t1426 * t1329 + t1418;
t1409 = -t1395 * t1345 - t1398 * t1346;
t1291 = t1426 * t1327 + t1409;
t1412 = t1395 * t1289 + t1398 * t1291;
t1306 = -t1414 - t1436;
t1311 = -t1442 - t1445;
t1411 = t1398 * t1306 + t1395 * t1311;
t1307 = t1414 - t1436;
t1318 = -t1442 - t1444;
t1410 = t1395 * t1307 + t1398 * t1318;
t1334 = t1399 * t1368 + t1396 * t1375;
t1336 = t1396 * t1370 - t1399 * t1374;
t1386 = t1396 * g(3);
t1403 = -t1401 * pkin(2) + qJDD(2) * qJ(3) + t1419 * t1399 - t1386;
t1305 = qJDD(4) + t1362 * pkin(3) - qJ(4) * t1433 + (t1441 + t1369) * qJD(2) + t1403;
t1367 = t1424 * t1402;
t1366 = -t1397 * qJDD(1) - t1400 * t1402;
t1365 = t1400 * qJDD(1) - t1397 * t1402;
t1364 = t1424 * qJDD(1);
t1352 = -t1407 + t1438;
t1343 = t1399 * t1353 - t1386;
t1342 = -t1396 * t1353 - t1439;
t1332 = t1400 * t1364 - t1397 * t1367;
t1331 = t1397 * t1364 + t1400 * t1367;
t1330 = -t1434 - t1354;
t1326 = -t1361 - t1435;
t1325 = t1346 - t1421;
t1324 = t1345 + t1420;
t1323 = -t1345 + t1420;
t1322 = -t1354 - t1443;
t1319 = t1419 * t1396 + t1408;
t1317 = qJD(2) * t1441 + t1403;
t1316 = -t1396 * t1342 + t1399 * t1343;
t1315 = t1399 * t1342 + t1396 * t1343;
t1314 = t1362 * pkin(2) + t1438 - t1446;
t1313 = t1393 * t1326 - t1392 * t1417;
t1312 = t1392 * t1326 + t1393 * t1417;
t1310 = t1393 * t1330 - t1392 * t1406;
t1309 = t1392 * t1330 + t1393 * t1406;
t1302 = t1393 * t1324 - t1392 * t1405;
t1301 = t1392 * t1324 + t1393 * t1405;
t1298 = -t1444 - t1445;
t1297 = t1399 * t1317 + t1396 * t1319;
t1296 = t1396 * t1317 - t1399 * t1319;
t1295 = t1396 * t1312 + t1399 * t1325;
t1294 = -t1399 * t1312 + t1396 * t1325;
t1293 = t1396 * t1309 + t1399 * t1323;
t1292 = -t1399 * t1309 + t1396 * t1323;
t1290 = -t1425 * t1327 - t1409;
t1288 = t1425 * t1329 - t1418;
t1287 = t1396 * t1301 + t1399 * t1322;
t1286 = -t1399 * t1301 + t1396 * t1322;
t1285 = t1398 * t1307 - t1395 * t1318;
t1283 = -t1345 * pkin(4) - t1354 * pkin(7) + t1357 * t1347 + t1305;
t1282 = -t1395 * t1306 + t1398 * t1311;
t1278 = t1398 * t1289 - t1395 * t1291;
t1274 = t1393 * t1285 - t1392 * t1410;
t1273 = t1392 * t1285 + t1393 * t1410;
t1272 = t1393 * t1282 - t1392 * t1411;
t1271 = t1392 * t1282 + t1393 * t1411;
t1270 = t1393 * t1280 - t1392 * t1415;
t1269 = t1392 * t1280 + t1393 * t1415;
t1268 = t1396 * t1273 + t1399 * t1290;
t1267 = -t1399 * t1273 + t1396 * t1290;
t1266 = t1396 * t1271 + t1399 * t1288;
t1265 = -t1399 * t1271 + t1396 * t1288;
t1264 = t1396 * t1269 + t1399 * t1305;
t1263 = -t1399 * t1269 + t1396 * t1305;
t1262 = t1393 * t1278 - t1392 * t1412;
t1261 = t1392 * t1278 + t1393 * t1412;
t1258 = t1396 * t1261 + t1399 * t1298;
t1257 = -t1399 * t1261 + t1396 * t1298;
t1256 = -t1395 * t1259 + t1398 * t1260;
t1254 = t1393 * t1256 - t1392 * t1413;
t1253 = t1392 * t1256 + t1393 * t1413;
t1252 = t1396 * t1253 + t1399 * t1283;
t1251 = -t1399 * t1253 + t1396 * t1283;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1366, -t1365, 0, -t1397 * t1371 + t1400 * t1372, 0, 0, 0, 0, 0, 0, -t1449, -t1447, t1332, t1400 * t1316 - t1397 * t1352, 0, 0, 0, 0, 0, 0, t1332, t1449, t1447, t1400 * t1297 - t1397 * t1314, 0, 0, 0, 0, 0, 0, t1400 * t1293 + t1397 * t1310, t1400 * t1295 + t1397 * t1313, t1400 * t1287 + t1397 * t1302, t1400 * t1264 + t1397 * t1270, 0, 0, 0, 0, 0, 0, t1400 * t1266 + t1397 * t1272, t1400 * t1268 + t1397 * t1274, t1400 * t1258 + t1397 * t1262, t1400 * t1252 + t1397 * t1254; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1365, t1366, 0, t1400 * t1371 + t1397 * t1372, 0, 0, 0, 0, 0, 0, -t1450, -t1448, t1331, t1397 * t1316 + t1400 * t1352, 0, 0, 0, 0, 0, 0, t1331, t1450, t1448, t1397 * t1297 + t1400 * t1314, 0, 0, 0, 0, 0, 0, t1397 * t1293 - t1400 * t1310, t1397 * t1295 - t1400 * t1313, t1397 * t1287 - t1400 * t1302, t1397 * t1264 - t1400 * t1270, 0, 0, 0, 0, 0, 0, t1397 * t1266 - t1400 * t1272, t1397 * t1268 - t1400 * t1274, t1397 * t1258 - t1400 * t1262, t1397 * t1252 - t1400 * t1254; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1334, -t1336, 0, t1315, 0, 0, 0, 0, 0, 0, 0, -t1334, t1336, t1296, 0, 0, 0, 0, 0, 0, t1292, t1294, t1286, t1263, 0, 0, 0, 0, 0, 0, t1265, t1267, t1257, t1251; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1402, -qJDD(1), 0, t1372, 0, 0, 0, 0, 0, 0, -t1339, -t1340, t1364, t1316, 0, 0, 0, 0, 0, 0, t1364, t1339, t1340, t1297, 0, 0, 0, 0, 0, 0, t1293, t1295, t1287, t1264, 0, 0, 0, 0, 0, 0, t1266, t1268, t1258, t1252; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1402, 0, t1371, 0, 0, 0, 0, 0, 0, t1363, -t1360, t1367, t1352, 0, 0, 0, 0, 0, 0, t1367, -t1363, t1360, t1314, 0, 0, 0, 0, 0, 0, -t1310, -t1313, -t1302, -t1270, 0, 0, 0, 0, 0, 0, -t1272, -t1274, -t1262, -t1254; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1334, -t1336, 0, t1315, 0, 0, 0, 0, 0, 0, 0, -t1334, t1336, t1296, 0, 0, 0, 0, 0, 0, t1292, t1294, t1286, t1263, 0, 0, 0, 0, 0, 0, t1265, t1267, t1257, t1251; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1375, -t1370, t1422, t1343, 0, 0, 0, 0, 0, 0, t1422, -t1375, t1370, t1317, 0, 0, 0, 0, 0, 0, t1323, t1325, t1322, t1305, 0, 0, 0, 0, 0, 0, t1288, t1290, t1298, t1283; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1368, t1374, -t1423, t1342, 0, 0, 0, 0, 0, 0, -t1423, -t1368, -t1374, -t1319, 0, 0, 0, 0, 0, 0, -t1309, -t1312, -t1301, -t1269, 0, 0, 0, 0, 0, 0, -t1271, -t1273, -t1261, -t1253; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1363, t1360, -t1367, -t1352, 0, 0, 0, 0, 0, 0, -t1367, t1363, -t1360, -t1314, 0, 0, 0, 0, 0, 0, t1310, t1313, t1302, t1270, 0, 0, 0, 0, 0, 0, t1272, t1274, t1262, t1254; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1367, t1363, -t1360, -t1314, 0, 0, 0, 0, 0, 0, t1310, t1313, t1302, t1270, 0, 0, 0, 0, 0, 0, t1272, t1274, t1262, t1254; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1422, t1375, -t1370, -t1317, 0, 0, 0, 0, 0, 0, -t1323, -t1325, -t1322, -t1305, 0, 0, 0, 0, 0, 0, -t1288, -t1290, -t1298, -t1283; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1423, t1368, t1374, t1319, 0, 0, 0, 0, 0, 0, t1309, t1312, t1301, t1269, 0, 0, 0, 0, 0, 0, t1271, t1273, t1261, t1253; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1330, t1326, t1324, t1280, 0, 0, 0, 0, 0, 0, t1282, t1285, t1278, t1256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1406, t1417, t1405, t1415, 0, 0, 0, 0, 0, 0, t1411, t1410, t1412, t1413; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1323, t1325, t1322, t1305, 0, 0, 0, 0, 0, 0, t1288, t1290, t1298, t1283; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1311, t1307, t1289, t1260; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1306, t1318, t1291, t1259; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1288, t1290, t1298, t1283;];
f_new_reg = t1;
