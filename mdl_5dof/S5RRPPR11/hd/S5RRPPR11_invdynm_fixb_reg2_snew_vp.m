% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPPR11
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:48
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPPR11_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR11_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR11_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR11_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR11_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPPR11_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:48:19
% EndTime: 2019-12-31 19:48:33
% DurationCPUTime: 14.76s
% Computational Cost: add. (52815->650), mult. (117505->775), div. (0->0), fcn. (70619->8), ass. (0->420)
t1075 = cos(qJ(2));
t1180 = qJD(1) * t1075;
t1057 = qJD(2) * t1180;
t1072 = sin(qJ(2));
t1151 = t1072 * qJDD(1);
t1031 = 0.2e1 * t1057 + t1151;
t1073 = sin(qJ(1));
t1076 = cos(qJ(1));
t1066 = t1072 ^ 2;
t1077 = qJD(1) ^ 2;
t1060 = t1066 * t1077;
t1209 = qJD(2) ^ 2;
t1047 = -t1060 - t1209;
t1158 = t1075 * t1077;
t1051 = t1072 * t1158;
t1042 = qJDD(2) - t1051;
t1159 = t1075 * t1042;
t991 = t1072 * t1047 + t1159;
t1250 = pkin(5) * (-t1073 * t1031 + t1076 * t991);
t1249 = pkin(5) * (t1076 * t1031 + t1073 * t991);
t1207 = t1075 ^ 2;
t1061 = t1207 * t1077;
t1049 = -t1061 - t1209;
t1040 = t1051 + qJDD(2);
t1160 = t1075 * t1040;
t981 = t1072 * t1049 + t1160;
t1248 = pkin(1) * t981;
t1247 = pkin(6) * t981;
t1246 = pkin(6) * t991;
t1059 = t1075 * qJDD(1);
t1173 = t1072 * qJD(1);
t1141 = qJD(2) * t1173;
t1033 = t1059 - 0.2e1 * t1141;
t1169 = t1072 * t1040;
t990 = -t1075 * t1049 + t1169;
t1245 = pkin(5) * (t1073 * t1033 + t1076 * t990);
t1244 = pkin(5) * (-t1076 * t1033 + t1073 * t990);
t1068 = sin(pkin(8));
t1069 = cos(pkin(8));
t1019 = t1069 * qJD(2) - t1068 * t1180;
t1041 = pkin(3) * t1173 - qJD(2) * qJ(4);
t1043 = t1073 * g(1) - t1076 * g(2);
t1101 = -qJDD(1) * pkin(1) - t1043;
t1238 = 2 * qJD(3);
t1220 = -pkin(2) * t1141 + t1173 * t1238;
t1032 = t1057 + t1151;
t1111 = t1032 + t1057;
t1224 = qJ(3) * t1111;
t1079 = t1101 - t1220 - t1224;
t1110 = -t1059 + t1141;
t1096 = t1110 * pkin(2);
t878 = t1096 - t1041 * t1173 + t1110 * qJ(4) + (-t1207 * pkin(3) - pkin(6)) * t1077 + t1079;
t1197 = t1075 * g(3);
t1103 = -qJDD(2) * pkin(2) - t1209 * qJ(3) + qJDD(3) + t1197;
t1044 = t1076 * g(1) + t1073 * g(2);
t1012 = -t1077 * pkin(1) + qJDD(1) * pkin(6) - t1044;
t1192 = qJ(3) * t1072;
t1198 = pkin(2) * t1075;
t1113 = -t1192 - t1198;
t1125 = t1077 * t1113 + t1012;
t899 = -qJDD(2) * qJ(4) + (t1032 - t1057) * pkin(3) + (-qJ(4) * t1158 + t1125) * t1072 + t1103;
t1116 = -0.2e1 * qJD(4) * t1019 - t1068 * t878 + t1069 * t899;
t1017 = t1068 * qJD(2) + t1069 * t1180;
t972 = t1019 * t1017;
t1222 = t1032 - t972;
t1233 = t1069 * t1222;
t1208 = t1017 ^ 2;
t966 = -t1060 - t1208;
t900 = t1068 * t966 + t1233;
t1243 = -pkin(3) * t900 - t1116;
t1149 = t1076 * qJDD(1);
t1046 = -t1060 + t1209;
t985 = -t1072 * t1046 + t1160;
t1242 = -t1072 * t1149 + t1073 * t985;
t1150 = t1073 * qJDD(1);
t1240 = t1072 * t1150 + t1076 * t985;
t1168 = t1072 * t1042;
t983 = -t1075 * t1047 + t1168;
t1237 = pkin(1) * t983;
t1236 = pkin(6) * t983;
t1235 = pkin(6) * t990;
t1234 = t1068 * t1222;
t1071 = sin(qJ(5));
t1020 = qJDD(5) + t1032;
t1074 = cos(qJ(5));
t963 = t1074 * t1017 + t1071 * t1019;
t965 = -t1071 * t1017 + t1074 * t1019;
t908 = t965 * t963;
t1223 = t1020 - t908;
t1232 = t1071 * t1223;
t1231 = t1074 * t1223;
t1063 = t1072 * g(3);
t1083 = -t1209 * pkin(2) + t1125 * t1075 - t1063;
t1080 = qJD(2) * t1238 + t1083;
t1230 = t1080 + (qJDD(2) + t1042) * qJ(3) - pkin(2) * t1047;
t1048 = t1061 - t1209;
t988 = -t1075 * t1048 + t1168;
t1229 = t1073 * t988 + t1075 * t1149;
t1227 = -t1073 * t1059 + t1076 * t988;
t1002 = t1069 * qJDD(2) + t1068 * t1110;
t1123 = t1068 * qJDD(2) - t1069 * t1110;
t888 = -t963 * qJD(5) + t1074 * t1002 - t1071 * t1123;
t1053 = qJD(5) + t1173;
t948 = t1053 * t963;
t1225 = -t948 + t888;
t1178 = qJD(4) * t1017;
t1007 = -0.2e1 * t1178;
t1194 = t1068 * t899 + t1069 * t878;
t828 = t1007 + t1194;
t1221 = t1068 * t828 + t1069 * t1116;
t979 = t1072 * t1048 + t1159;
t929 = t1072 * t1125 + t1103;
t1219 = -pkin(2) * t1040 - qJ(3) * t1049 + t929;
t1171 = t1072 * t1017;
t1140 = qJD(1) * t1171;
t1109 = -t1002 - t1140;
t804 = pkin(4) * t1222 + pkin(7) * t1109 + t1116;
t1003 = pkin(4) * t1173 - t1019 * pkin(7);
t817 = -t1208 * pkin(4) - pkin(7) * t1123 - t1003 * t1173 + t828;
t765 = t1071 * t817 - t1074 * t804;
t766 = t1071 * t804 + t1074 * t817;
t748 = t1071 * t766 - t1074 * t765;
t1187 = t1069 * t748;
t749 = t1071 * t765 + t1074 * t766;
t1176 = qJDD(2) * qJ(3);
t891 = t1176 + qJDD(4) - t1110 * pkin(3) - qJ(4) * t1061 + (t1238 + t1041) * qJD(2) + t1083;
t836 = pkin(4) * t1123 - t1208 * pkin(7) + t1019 * t1003 + t891;
t744 = -pkin(4) * t836 + pkin(7) * t749;
t1102 = pkin(7) * t1187 + t1068 * t744;
t1201 = pkin(2) + qJ(4);
t731 = t1068 * t749 + t1187;
t1217 = qJ(3) * t836 - t1201 * t731 - t1102;
t1139 = t1019 * t1173;
t952 = -t1123 + t1139;
t883 = t1068 * t952 + t1069 * t1109;
t1016 = t1019 ^ 2;
t946 = -t1016 - t1208;
t1216 = qJ(3) * t946 - t1201 * t883 - t1221;
t1185 = t1071 * t836;
t893 = t1020 + t908;
t1182 = t1074 * t893;
t1050 = t1053 ^ 2;
t962 = t965 ^ 2;
t926 = -t962 - t1050;
t841 = -t1071 * t926 - t1182;
t776 = -pkin(4) * t1225 + pkin(7) * t841 + t1185;
t1183 = t1074 * t836;
t1184 = t1071 * t893;
t840 = t1074 * t926 - t1184;
t799 = -pkin(7) * t840 + t1183;
t1129 = t1068 * t776 - t1069 * t799;
t801 = t1068 * t841 + t1069 * t840;
t1215 = qJ(3) * t1225 - t1201 * t801 - t1129;
t961 = t963 ^ 2;
t903 = -t1050 - t961;
t835 = t1074 * t903 - t1232;
t1126 = -t1071 * t1002 - t1074 * t1123;
t1092 = t965 * qJD(5) - t1126;
t949 = t1053 * t965;
t855 = t1092 + t949;
t775 = -pkin(4) * t855 + pkin(7) * t835 - t1183;
t834 = t1071 * t903 + t1231;
t796 = -pkin(7) * t834 + t1185;
t1130 = t1068 * t775 - t1069 * t796;
t792 = t1068 * t835 + t1069 * t834;
t1214 = qJ(3) * t855 - t1201 * t792 - t1130;
t857 = (-qJD(5) + t1053) * t965 + t1126;
t860 = t948 + t888;
t820 = t1071 * t860 + t1074 * t857;
t875 = -t961 - t962;
t737 = -pkin(4) * t875 + pkin(7) * t820 + t749;
t818 = t1071 * t857 - t1074 * t860;
t742 = -pkin(7) * t818 - t748;
t1131 = t1068 * t737 - t1069 * t742;
t768 = t1068 * t820 + t1069 * t818;
t1213 = qJ(3) * t875 - t1201 * t768 - t1131;
t1189 = t1068 * t891;
t950 = t1123 + t1139;
t1212 = qJ(3) * t950 - t1201 * t900 + t1189;
t886 = t1069 * t891;
t1155 = -t1016 - t1060;
t956 = t1032 + t972;
t1188 = t1068 * t956;
t910 = t1069 * t1155 - t1188;
t953 = t1002 - t1140;
t1211 = qJ(3) * t953 - t1201 * t910 + t886;
t1210 = qJ(3) * t891 - t1201 * t1221;
t1206 = pkin(3) * t1221;
t1205 = pkin(3) * t883;
t1204 = pkin(3) * t891;
t1147 = t1066 + t1207;
t1035 = t1147 * qJDD(1);
t1038 = t1060 + t1061;
t1202 = pkin(5) * (t1073 * t1035 + t1076 * t1038);
t1196 = t1077 * pkin(6);
t1191 = t1068 * t748;
t1186 = t1069 * t956;
t1181 = qJD(1) * qJD(2);
t1175 = t1053 * t1071;
t1174 = t1053 * t1074;
t1011 = -t1101 + t1196;
t1172 = t1072 * t1011;
t1170 = t1072 * t1031;
t1161 = t1075 * t1011;
t975 = t1075 * t1033;
t1154 = -t1016 + t1060;
t1153 = pkin(1) * t1038 + pkin(6) * t1035;
t1146 = t1072 * t908;
t1145 = t1075 * t908;
t747 = pkin(4) * t748;
t1144 = -pkin(3) * t731 - t747;
t816 = pkin(4) * t818;
t1143 = -pkin(3) * t768 - t816;
t1138 = t1019 * t1171;
t1137 = t1075 * t972;
t993 = t1072 * t1012 + t1197;
t994 = t1075 * t1012 - t1063;
t924 = t1072 * t993 + t1075 * t994;
t1124 = -t1073 * t1043 - t1076 * t1044;
t1122 = -pkin(3) * t910 + t1194;
t1121 = t1073 * t1051;
t1120 = t1076 * t1051;
t1119 = pkin(4) * t834 - t765;
t925 = t1080 + t1176;
t1118 = -pkin(2) * t929 + qJ(3) * t925;
t1037 = -t1073 * t1077 + t1149;
t1117 = -pkin(5) * t1037 - t1073 * g(3);
t1115 = pkin(3) * t953 - t1189;
t1114 = pkin(3) * t950 + t886;
t1112 = pkin(2) * t1072 - qJ(3) * t1075;
t785 = -t1068 * t1116 + t1069 * t828;
t1107 = -t1071 * t855 + t1074 * t1225;
t939 = -t962 + t1050;
t1106 = t1074 * t939 + t1232;
t938 = t961 - t1050;
t1105 = t1071 * t938 + t1182;
t922 = t1072 * t994 - t1075 * t993;
t976 = t1075 * t1046 + t1169;
t1104 = t1076 * t1043 - t1073 * t1044;
t1095 = pkin(4) * t840 - t766;
t1094 = -t1074 * t1092 + t963 * t1175;
t1093 = t1071 * t888 + t965 * t1174;
t1090 = -pkin(3) * t792 - t1119;
t1089 = (-t1071 * t963 - t1074 * t965) * t1053;
t1088 = pkin(3) * t875 - t1068 * t742 - t1069 * t737;
t1087 = pkin(3) * t855 - t1068 * t796 - t1069 * t775;
t1086 = pkin(3) * t1225 - t1068 * t799 - t1069 * t776;
t1085 = pkin(3) * t946 - t785;
t1084 = pkin(3) * t836 + pkin(7) * t1191 - t1069 * t744;
t1081 = -pkin(3) * t801 - t1095;
t1078 = t1011 - t1096 + t1220;
t1039 = t1060 - t1061;
t1036 = t1076 * t1077 + t1150;
t1027 = t1112 * qJDD(1);
t1022 = t1147 * t1181;
t1014 = t1075 * t1032;
t1013 = t1072 * t1032;
t1005 = -pkin(5) * t1036 + t1076 * g(3);
t1004 = -t1060 + t1208;
t1001 = t1073 * qJDD(2) + t1076 * t1022;
t1000 = -t1066 * t1181 + t1014;
t999 = -t1076 * qJDD(2) + t1073 * t1022;
t998 = t1072 * t1110 - t1207 * t1181;
t978 = t1072 * t1057 + t1013;
t970 = t1016 - t1208;
t969 = pkin(5) * (t1076 * t1035 - t1073 * t1038);
t968 = t975 - t1170;
t967 = t1075 * t1031 + t1072 * t1033;
t960 = t1076 * t1000 - t1121;
t959 = t1076 * t998 + t1121;
t958 = t1073 * t1000 + t1120;
t957 = t1073 * t998 - t1120;
t943 = (-t1017 * t1069 + t1019 * t1068) * t1173;
t942 = (-t1017 * t1068 - t1019 * t1069) * t1173;
t937 = -t1161 + t1236;
t936 = -t1172 - t1247;
t935 = t1069 * t1002 - t1068 * t1139;
t934 = t1068 * t1002 + t1069 * t1139;
t933 = -t1068 * t1123 - t1069 * t1140;
t932 = -t1068 * t1140 + t1069 * t1123;
t931 = t1073 * t1039 + t1076 * t968;
t930 = -t1076 * t1039 + t1073 * t968;
t928 = t994 + t1237;
t927 = t993 - t1248;
t921 = pkin(1) * t1033 + t1161 - t1235;
t920 = -pkin(1) * t1031 - t1172 - t1246;
t919 = qJ(3) * t1038 + t929;
t918 = t1072 * t942 + t1014;
t917 = -t1075 * t942 + t1013;
t916 = pkin(2) * t1038 + t925;
t915 = t1078 + t1224;
t914 = t1069 * t1004 - t1188;
t913 = -t1068 * t1155 - t1186;
t912 = -t1068 * t1154 + t1233;
t911 = t1068 * t1004 + t1186;
t909 = t1069 * t1154 + t1234;
t907 = t962 - t961;
t906 = pkin(1) * t1011 + pkin(6) * t924;
t905 = -t1196 + (-t1033 + t1110) * pkin(2) + t1079;
t904 = (t1031 + t1111) * qJ(3) + t1078;
t902 = t924 + t1153;
t901 = t1069 * t966 - t1234;
t898 = t1072 * t934 + t1137;
t897 = -t1072 * t932 - t1137;
t896 = -t1075 * t934 + t1138;
t895 = t1075 * t932 - t1138;
t885 = -t1068 * t1109 + t1069 * t952;
t884 = -t1068 * t953 - t1069 * t950;
t882 = -t1068 * t950 + t1069 * t953;
t881 = (t1071 * t965 - t1074 * t963) * t1053;
t879 = -t1219 + t1248;
t877 = -t1230 - t1237;
t874 = t1072 * t929 + t1075 * t925;
t873 = t1072 * t925 - t1075 * t929;
t872 = t1072 * t909 - t1075 * t1109;
t871 = t1072 * t910 + t1075 * t953;
t870 = t1072 * t911 + t1075 * t952;
t869 = -t1072 * t1109 - t1075 * t909;
t868 = t1072 * t953 - t1075 * t910;
t867 = t1072 * t952 - t1075 * t911;
t866 = -pkin(2) * t1170 + t1075 * t904 - t1236;
t865 = -qJ(3) * t975 - t1072 * t905 + t1247;
t864 = t1072 * t882 + t1075 * t970;
t863 = t1072 * t970 - t1075 * t882;
t862 = t1072 * t900 + t1075 * t950;
t861 = t1072 * t950 - t1075 * t900;
t856 = t1092 - t949;
t854 = -t1072 * t916 + t1075 * t919;
t853 = t1074 * t938 - t1184;
t852 = -t1071 * t939 + t1231;
t851 = t1074 * t888 - t965 * t1175;
t850 = t1071 * t1092 + t963 * t1174;
t849 = t1246 + t1072 * t904 + (pkin(1) + t1198) * t1031;
t848 = t1235 + t1075 * t905 + (-pkin(1) - t1192) * t1033;
t845 = t1072 * t883 + t1075 * t946;
t844 = t1072 * t946 - t1075 * t883;
t837 = t1072 * t919 + t1075 * t916 + t1153;
t831 = -qJ(3) * t885 + t1205;
t830 = -t1068 * t1089 + t1069 * t881;
t829 = t1068 * t881 + t1069 * t1089;
t824 = t1075 * t1020 + t1072 * t829;
t823 = t1072 * t1020 - t1075 * t829;
t822 = -pkin(1) * t873 - t1118;
t821 = -pkin(6) * t873 - t1112 * t915;
t819 = -t1071 * t1225 - t1074 * t855;
t815 = -t1201 * t913 + t1115;
t812 = -t1068 * t1105 + t1069 * t853;
t811 = -t1068 * t1106 + t1069 * t852;
t810 = t1068 * t853 + t1069 * t1105;
t809 = t1068 * t852 + t1069 * t1106;
t808 = -t1068 * t1093 + t1069 * t851;
t807 = -t1068 * t1094 + t1069 * t850;
t806 = t1068 * t851 + t1069 * t1093;
t805 = t1068 * t850 + t1069 * t1094;
t802 = -t1068 * t840 + t1069 * t841;
t800 = -t1201 * t901 + t1114;
t797 = pkin(6) * t874 + (pkin(1) - t1113) * t915;
t794 = -qJ(3) * t913 - t1122 + 0.2e1 * t1178;
t793 = -t1068 * t834 + t1069 * t835;
t791 = t1072 * t806 + t1145;
t790 = t1072 * t805 - t1145;
t789 = -t1075 * t806 + t1146;
t788 = -t1075 * t805 - t1146;
t787 = -qJ(3) * t901 - t1243;
t786 = -pkin(1) * t868 - t1211;
t783 = t1072 * t809 + t1075 * t860;
t782 = t1072 * t810 - t1075 * t856;
t781 = t1072 * t860 - t1075 * t809;
t780 = -t1072 * t856 - t1075 * t810;
t779 = -pkin(1) * t861 - t1212;
t778 = t1072 * t801 + t1075 * t1225;
t777 = t1072 * t1225 - t1075 * t801;
t774 = t1072 * t792 + t1075 * t855;
t773 = t1072 * t855 - t1075 * t792;
t772 = t1072 * t1221 + t1075 * t891;
t771 = t1072 * t891 - t1075 * t1221;
t770 = -t1068 * t818 + t1069 * t820;
t769 = -t1068 * t1107 + t1069 * t819;
t767 = t1068 * t819 + t1069 * t1107;
t763 = t1072 * t767 + t1075 * t907;
t762 = t1072 * t907 - t1075 * t767;
t761 = -t1201 * t885 + t1085;
t760 = t1072 * t768 + t1075 * t875;
t759 = t1072 * t875 - t1075 * t768;
t758 = -pkin(6) * t868 - t1072 * t815 + t1075 * t794;
t757 = -pkin(1) * t844 - t1216;
t756 = -pkin(6) * t861 - t1072 * t800 + t1075 * t787;
t755 = -pkin(1) * t913 + pkin(6) * t871 + t1072 * t794 + t1075 * t815;
t754 = -qJ(3) * t785 + t1206;
t753 = -pkin(1) * t901 + pkin(6) * t862 + t1072 * t787 + t1075 * t800;
t752 = -t1201 * t785 + t1204;
t751 = -pkin(6) * t844 - t1072 * t761 + t1075 * t831;
t750 = -pkin(1) * t885 + pkin(6) * t845 + t1072 * t831 + t1075 * t761;
t745 = -qJ(3) * t802 - t1081;
t743 = -qJ(3) * t770 - t1143;
t740 = -pkin(1) * t771 - t1210;
t739 = -qJ(3) * t793 - t1090;
t738 = -t1201 * t802 + t1086;
t736 = -t1201 * t793 + t1087;
t735 = -pkin(1) * t777 - t1215;
t734 = -pkin(1) * t773 - t1214;
t733 = -pkin(6) * t771 - t1072 * t752 + t1075 * t754;
t732 = t1069 * t749 - t1191;
t730 = t1072 * t731 + t1075 * t836;
t729 = t1072 * t836 - t1075 * t731;
t728 = -pkin(1) * t785 + pkin(6) * t772 + t1072 * t754 + t1075 * t752;
t727 = -pkin(6) * t777 - t1072 * t738 + t1075 * t745;
t726 = -pkin(1) * t802 + pkin(6) * t778 + t1072 * t745 + t1075 * t738;
t725 = -pkin(6) * t773 - t1072 * t736 + t1075 * t739;
t724 = -pkin(1) * t793 + pkin(6) * t774 + t1072 * t739 + t1075 * t736;
t723 = -t1201 * t770 + t1088;
t722 = -pkin(1) * t759 - t1213;
t721 = -qJ(3) * t732 - t1144;
t720 = -pkin(6) * t759 - t1072 * t723 + t1075 * t743;
t719 = -pkin(1) * t770 + pkin(6) * t760 + t1072 * t743 + t1075 * t723;
t718 = -t1201 * t732 + t1084;
t717 = -pkin(1) * t729 - t1217;
t716 = -pkin(6) * t729 - t1072 * t718 + t1075 * t721;
t715 = -pkin(1) * t732 + pkin(6) * t730 + t1072 * t721 + t1075 * t718;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1037, 0, -t1036, 0, t1117, -t1005, -t1104, -pkin(5) * t1104, t960, t931, t1240, t959, -t1227, t1001, -t1073 * t927 + t1076 * t936 + t1244, -t1073 * t928 + t1076 * t937 + t1249, -t1076 * t922 - t1202, -pkin(5) * (t1076 * t1011 + t1073 * t924) + (t1073 * pkin(1) - t1076 * pkin(6)) * t922, t1001, -t1240, t1227, t960, t931, t959, -t1073 * t1027 + t1076 * t854 - t1202, -t1073 * t879 + t1076 * t865 - t1244, -t1073 * t877 + t1076 * t866 - t1249, t1076 * t821 - t1073 * t822 - pkin(5) * (t1073 * t874 + t1076 * t915), t1073 * t935 + t1076 * t898, t1073 * t884 + t1076 * t864, t1073 * t912 + t1076 * t872, -t1073 * t933 + t1076 * t897, t1073 * t914 + t1076 * t870, t1073 * t943 + t1076 * t918, t1076 * t756 - t1073 * t779 - pkin(5) * (t1073 * t862 - t1076 * t901), t1076 * t758 - t1073 * t786 - pkin(5) * (t1073 * t871 - t1076 * t913), t1076 * t751 - t1073 * t757 - pkin(5) * (t1073 * t845 - t1076 * t885), t1076 * t733 - t1073 * t740 - pkin(5) * (t1073 * t772 - t1076 * t785), t1073 * t808 + t1076 * t791, t1073 * t769 + t1076 * t763, t1073 * t811 + t1076 * t783, t1073 * t807 + t1076 * t790, t1073 * t812 + t1076 * t782, t1073 * t830 + t1076 * t824, t1076 * t725 - t1073 * t734 - pkin(5) * (t1073 * t774 - t1076 * t793), t1076 * t727 - t1073 * t735 - pkin(5) * (t1073 * t778 - t1076 * t802), t1076 * t720 - t1073 * t722 - pkin(5) * (t1073 * t760 - t1076 * t770), t1076 * t716 - t1073 * t717 - pkin(5) * (t1073 * t730 - t1076 * t732); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1036, 0, t1037, 0, t1005, t1117, t1124, pkin(5) * t1124, t958, t930, t1242, t957, -t1229, t999, t1073 * t936 + t1076 * t927 - t1245, t1073 * t937 + t1076 * t928 - t1250, -t1073 * t922 + t969, pkin(5) * (-t1073 * t1011 + t1076 * t924) + (-t1076 * pkin(1) - t1073 * pkin(6)) * t922, t999, -t1242, t1229, t958, t930, t957, t1076 * t1027 + t1073 * t854 + t969, t1073 * t865 + t1076 * t879 + t1245, t1073 * t866 + t1076 * t877 + t1250, t1073 * t821 + t1076 * t822 + pkin(5) * (-t1073 * t915 + t1076 * t874), t1073 * t898 - t1076 * t935, t1073 * t864 - t1076 * t884, t1073 * t872 - t1076 * t912, t1073 * t897 + t1076 * t933, t1073 * t870 - t1076 * t914, t1073 * t918 - t1076 * t943, t1073 * t756 + t1076 * t779 + pkin(5) * (t1073 * t901 + t1076 * t862), t1073 * t758 + t1076 * t786 + pkin(5) * (t1073 * t913 + t1076 * t871), t1073 * t751 + t1076 * t757 + pkin(5) * (t1073 * t885 + t1076 * t845), t1073 * t733 + t1076 * t740 + pkin(5) * (t1073 * t785 + t1076 * t772), t1073 * t791 - t1076 * t808, t1073 * t763 - t1076 * t769, t1073 * t783 - t1076 * t811, t1073 * t790 - t1076 * t807, t1073 * t782 - t1076 * t812, t1073 * t824 - t1076 * t830, t1073 * t725 + t1076 * t734 + pkin(5) * (t1073 * t793 + t1076 * t774), t1073 * t727 + t1076 * t735 + pkin(5) * (t1073 * t802 + t1076 * t778), t1073 * t720 + t1076 * t722 + pkin(5) * (t1073 * t770 + t1076 * t760), t1073 * t716 + t1076 * t717 + pkin(5) * (t1073 * t732 + t1076 * t730); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1043, t1044, 0, 0, t978, t967, t976, t975, t979, 0, t921, t920, t902, t906, 0, -t976, -t979, t978, t967, t975, t837, t848, t849, t797, t896, t863, t869, t895, t867, t917, t753, t755, t750, t728, t789, t762, t781, t788, t780, t823, t724, t726, t719, t715; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1077, 0, 0, -g(3), -t1043, 0, t1000, t968, t985, t998, -t988, t1022, t936, t937, -t922, -pkin(6) * t922, t1022, -t985, t988, t1000, t968, t998, t854, t865, t866, t821, t898, t864, t872, t897, t870, t918, t756, t758, t751, t733, t791, t763, t783, t790, t782, t824, t725, t727, t720, t716; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1077, 0, qJDD(1), 0, g(3), 0, -t1044, 0, t1051, -t1039, -t1151, -t1051, -t1059, -qJDD(2), t927, t928, 0, -pkin(1) * t922, -qJDD(2), t1151, t1059, t1051, -t1039, -t1051, t1027, t879, t877, t822, -t935, -t884, -t912, t933, -t914, -t943, t779, t786, t757, t740, -t808, -t769, -t811, -t807, -t812, -t830, t734, t735, t722, t717; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1043, t1044, 0, 0, t978, t967, t976, t975, t979, 0, t921, t920, t902, t906, 0, -t976, -t979, t978, t967, t975, t837, t848, t849, t797, t896, t863, t869, t895, t867, t917, t753, t755, t750, t728, t789, t762, t781, t788, t780, t823, t724, t726, t719, t715; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1032, t1033, t1040, -t1057, t1048, t1057, 0, -t1011, t993, 0, t1057, -t1040, -t1048, t1032, t1033, -t1057, t919, -qJ(3) * t1033, t904, qJ(3) * t915, t972, t970, -t1109, -t972, t952, t1032, t787, t794, t831, t754, t908, t907, t860, -t908, -t856, t1020, t739, t745, t743, t721; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1141, t1031, t1046, -t1110, t1042, -t1141, t1011, 0, t994, 0, -t1141, -t1046, -t1042, t1141, t1031, -t1110, t916, t905, pkin(2) * t1031, pkin(2) * t915, -t934, -t882, -t909, t932, -t911, -t942, t800, t815, t761, t752, -t806, -t767, -t809, -t805, -t810, -t829, t736, t738, t723, t718; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1051, t1039, t1151, t1051, t1059, qJDD(2), -t993, -t994, 0, 0, qJDD(2), -t1151, -t1059, -t1051, t1039, t1051, -t1027, t1219, t1230, t1118, t935, t884, t912, -t933, t914, t943, t1212, t1211, t1216, t1210, t808, t769, t811, t807, t812, t830, t1214, t1215, t1213, t1217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1151, -t1059, -t1051, t1039, t1051, 0, t929, t925, 0, t935, t884, t912, -t933, t914, t943, -qJ(4) * t900 + t1189, -qJ(4) * t910 + t886, -qJ(4) * t883 - t1221, -qJ(4) * t1221, t808, t769, t811, t807, t812, t830, -qJ(4) * t792 - t1130, -qJ(4) * t801 - t1129, -qJ(4) * t768 - t1131, -qJ(4) * t731 - t1102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1057, t1040, t1048, -t1032, -t1033, t1057, -t929, 0, -t915, 0, -t972, -t970, t1109, t972, -t952, -t1032, t1243, t1007 + t1122, -t1205, -t1206, -t908, -t907, -t860, t908, t856, -t1020, t1090, t1081, t1143, t1144; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1141, t1046, t1042, -t1141, -t1031, t1110, -t925, t915, 0, 0, t934, t882, t909, -t932, t911, t942, qJ(4) * t901 - t1114, qJ(4) * t913 - t1115, qJ(4) * t885 - t1085, qJ(4) * t785 - t1204, t806, t767, t809, t805, t810, t829, qJ(4) * t793 - t1087, qJ(4) * t802 - t1086, qJ(4) * t770 - t1088, qJ(4) * t732 - t1084; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1002, -t950, t1222, t1140, t1004, -t1140, 0, t891, -t1116, 0, t851, t819, t852, t850, t853, t881, t796, t799, t742, -pkin(7) * t748; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1139, t953, t1154, -t1123, t956, -t1139, -t891, 0, t828, 0, t1093, t1107, t1106, t1094, t1105, t1089, t775, t776, t737, t744; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t972, t970, -t1109, -t972, t952, t1032, t1116, -t828, 0, 0, t908, t907, t860, -t908, -t856, t1020, t1119, t1095, t816, t747; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t888, -t855, t1223, t948, t938, -t948, 0, t836, t765, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t949, t1225, t939, -t1092, t893, -t949, -t836, 0, t766, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t908, t907, t860, -t908, -t856, t1020, -t765, -t766, 0, 0;];
m_new_reg = t1;
