% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRRRP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d4,theta1]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:42
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRRRP2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRP2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRP2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRP2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRP2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRRRP2_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:42:23
% EndTime: 2019-12-05 16:42:25
% DurationCPUTime: 2.06s
% Computational Cost: add. (3733->142), mult. (5749->176), div. (0->0), fcn. (3809->8), ass. (0->100)
t1097 = qJD(2) + qJD(3);
t1095 = t1097 ^ 2;
t1105 = sin(qJ(4));
t1108 = cos(qJ(4));
t1086 = t1105 * t1095 * t1108;
t1078 = qJDD(4) - t1086;
t1099 = t1105 ^ 2;
t1111 = qJD(4) ^ 2;
t1083 = t1099 * t1095 + t1111;
t1059 = t1108 * t1078 - t1105 * t1083;
t1096 = qJDD(2) + qJDD(3);
t1123 = t1105 * t1096;
t1124 = t1097 * t1108;
t1129 = 2 * qJD(4);
t1066 = t1124 * t1129 + t1123;
t1106 = sin(qJ(3));
t1109 = cos(qJ(3));
t1040 = t1106 * t1059 + t1109 * t1066;
t1043 = t1109 * t1059 - t1106 * t1066;
t1107 = sin(qJ(2));
t1110 = cos(qJ(2));
t1023 = t1110 * t1040 + t1107 * t1043;
t1027 = t1107 * t1040 - t1110 * t1043;
t1103 = sin(pkin(8));
t1104 = cos(pkin(8));
t1135 = t1104 * t1023 - t1103 * t1027;
t1134 = t1103 * t1023 + t1104 * t1027;
t1071 = t1106 * t1095 - t1109 * t1096;
t1114 = -t1109 * t1095 - t1106 * t1096;
t1049 = t1110 * t1071 - t1107 * t1114;
t1128 = t1107 * t1071 + t1110 * t1114;
t1133 = t1103 * t1049 + t1104 * t1128;
t1132 = t1104 * t1049 - t1103 * t1128;
t1125 = t1097 * t1105;
t1121 = t1108 * t1096;
t1081 = t1103 * g(1) - t1104 * g(2);
t1082 = -t1104 * g(1) - t1103 * g(2);
t1062 = t1107 * t1081 + t1110 * t1082;
t1112 = qJD(2) ^ 2;
t1054 = -t1112 * pkin(2) + t1062;
t1061 = t1110 * t1081 - t1107 * t1082;
t1113 = qJDD(2) * pkin(2) + t1061;
t1036 = t1109 * t1054 + t1106 * t1113;
t1034 = -t1095 * pkin(3) + t1096 * pkin(7) + t1036;
t1101 = -g(3) + qJDD(1);
t1029 = t1108 * t1034 + t1105 * t1101;
t1100 = t1108 ^ 2;
t1119 = t1099 + t1100;
t1118 = qJD(4) * t1125;
t1035 = -t1106 * t1054 + t1109 * t1113;
t1079 = t1110 * qJDD(2) - t1107 * t1112;
t1080 = -t1107 * qJDD(2) - t1110 * t1112;
t1116 = -t1103 * t1079 + t1104 * t1080;
t1056 = t1105 * t1078 + t1108 * t1083;
t1115 = t1104 * t1079 + t1103 * t1080;
t1033 = -t1096 * pkin(3) - t1095 * pkin(7) - t1035;
t1091 = t1108 * t1101;
t1084 = -t1100 * t1095 - t1111;
t1077 = qJDD(4) + t1086;
t1073 = t1119 * t1095;
t1068 = t1119 * t1096;
t1067 = -0.2e1 * t1118 + t1121;
t1065 = (-pkin(4) * t1108 - qJ(5) * t1105) * t1097;
t1058 = -t1105 * t1077 + t1108 * t1084;
t1055 = t1108 * t1077 + t1105 * t1084;
t1048 = t1109 * t1068 - t1106 * t1073;
t1045 = t1106 * t1068 + t1109 * t1073;
t1042 = t1109 * t1058 - t1106 * t1067;
t1039 = t1106 * t1058 + t1109 * t1067;
t1038 = -t1107 * t1061 + t1110 * t1062;
t1037 = t1110 * t1061 + t1107 * t1062;
t1032 = -t1107 * t1045 + t1110 * t1048;
t1031 = t1110 * t1045 + t1107 * t1048;
t1028 = -t1105 * t1034 + t1091;
t1025 = -t1107 * t1039 + t1110 * t1042;
t1022 = t1110 * t1039 + t1107 * t1042;
t1021 = qJDD(5) - t1091 - t1111 * qJ(5) - qJDD(4) * pkin(4) + (t1065 * t1097 + t1034) * t1105;
t1020 = -t1111 * pkin(4) + qJDD(4) * qJ(5) + (qJD(5) * t1129) + t1065 * t1124 + t1029;
t1019 = -(-t1118 + t1121) * pkin(4) + (pkin(4) * qJD(4) - (2 * qJD(5))) * t1125 + t1033 - t1066 * qJ(5);
t1018 = -t1106 * t1035 + t1109 * t1036;
t1017 = t1109 * t1035 + t1106 * t1036;
t1016 = -t1103 * t1031 + t1104 * t1032;
t1015 = t1104 * t1031 + t1103 * t1032;
t1014 = -t1105 * t1028 + t1108 * t1029;
t1013 = t1108 * t1028 + t1105 * t1029;
t1012 = -t1103 * t1022 + t1104 * t1025;
t1011 = t1104 * t1022 + t1103 * t1025;
t1010 = t1108 * t1020 + t1105 * t1021;
t1009 = t1105 * t1020 - t1108 * t1021;
t1008 = t1109 * t1014 + t1106 * t1033;
t1007 = t1106 * t1014 - t1109 * t1033;
t1006 = -t1107 * t1017 + t1110 * t1018;
t1005 = t1110 * t1017 + t1107 * t1018;
t1004 = t1109 * t1010 + t1106 * t1019;
t1003 = t1106 * t1010 - t1109 * t1019;
t1002 = -t1107 * t1007 + t1110 * t1008;
t1001 = t1110 * t1007 + t1107 * t1008;
t1000 = -t1107 * t1003 + t1110 * t1004;
t999 = t1110 * t1003 + t1107 * t1004;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1103 * t1081 + t1104 * t1082, 0, 0, 0, 0, 0, 0, t1116, -t1115, 0, -t1103 * t1037 + t1104 * t1038, 0, 0, 0, 0, 0, 0, t1133, t1132, 0, -t1103 * t1005 + t1104 * t1006, 0, 0, 0, 0, 0, 0, t1012, t1134, t1016, -t1103 * t1001 + t1104 * t1002, 0, 0, 0, 0, 0, 0, t1012, t1016, -t1134, t1104 * t1000 - t1103 * t999; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1104 * t1081 + t1103 * t1082, 0, 0, 0, 0, 0, 0, t1115, t1116, 0, t1104 * t1037 + t1103 * t1038, 0, 0, 0, 0, 0, 0, -t1132, t1133, 0, t1104 * t1005 + t1103 * t1006, 0, 0, 0, 0, 0, 0, t1011, -t1135, t1015, t1104 * t1001 + t1103 * t1002, 0, 0, 0, 0, 0, 0, t1011, t1015, t1135, t1103 * t1000 + t1104 * t999; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1101, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1101, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1101, 0, 0, 0, 0, 0, 0, t1055, -t1056, 0, t1013, 0, 0, 0, 0, 0, 0, t1055, 0, t1056, t1009; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1082, 0, 0, 0, 0, 0, 0, t1080, -t1079, 0, t1038, 0, 0, 0, 0, 0, 0, t1128, t1049, 0, t1006, 0, 0, 0, 0, 0, 0, t1025, t1027, t1032, t1002, 0, 0, 0, 0, 0, 0, t1025, t1032, -t1027, t1000; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1081, 0, 0, 0, 0, 0, 0, t1079, t1080, 0, t1037, 0, 0, 0, 0, 0, 0, -t1049, t1128, 0, t1005, 0, 0, 0, 0, 0, 0, t1022, -t1023, t1031, t1001, 0, 0, 0, 0, 0, 0, t1022, t1031, t1023, t999; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1101, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1101, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1101, 0, 0, 0, 0, 0, 0, t1055, -t1056, 0, t1013, 0, 0, 0, 0, 0, 0, t1055, 0, t1056, t1009; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1112, -qJDD(2), 0, t1062, 0, 0, 0, 0, 0, 0, t1114, t1071, 0, t1018, 0, 0, 0, 0, 0, 0, t1042, -t1043, t1048, t1008, 0, 0, 0, 0, 0, 0, t1042, t1048, t1043, t1004; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1112, 0, t1061, 0, 0, 0, 0, 0, 0, -t1071, t1114, 0, t1017, 0, 0, 0, 0, 0, 0, t1039, -t1040, t1045, t1007, 0, 0, 0, 0, 0, 0, t1039, t1045, t1040, t1003; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1101, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1101, 0, 0, 0, 0, 0, 0, t1055, -t1056, 0, t1013, 0, 0, 0, 0, 0, 0, t1055, 0, t1056, t1009; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1095, -t1096, 0, t1036, 0, 0, 0, 0, 0, 0, t1058, -t1059, t1068, t1014, 0, 0, 0, 0, 0, 0, t1058, t1068, t1059, t1010; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1096, -t1095, 0, t1035, 0, 0, 0, 0, 0, 0, t1067, -t1066, t1073, -t1033, 0, 0, 0, 0, 0, 0, t1067, t1073, t1066, -t1019; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1101, 0, 0, 0, 0, 0, 0, t1055, -t1056, 0, t1013, 0, 0, 0, 0, 0, 0, t1055, 0, t1056, t1009; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1084, -t1078, t1121, t1029, 0, 0, 0, 0, 0, 0, t1084, t1121, t1078, t1020; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1077, -t1083, -t1123, t1028, 0, 0, 0, 0, 0, 0, t1077, -t1123, t1083, -t1021; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1067, t1066, -t1073, t1033, 0, 0, 0, 0, 0, 0, -t1067, -t1073, -t1066, t1019; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1084, t1121, t1078, t1020; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1067, -t1073, -t1066, t1019; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1077, t1123, -t1083, t1021;];
f_new_reg = t1;
