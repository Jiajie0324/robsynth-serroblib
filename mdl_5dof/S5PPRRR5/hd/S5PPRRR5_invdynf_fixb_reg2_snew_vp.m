% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PPRRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d4,d5,theta1]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:35
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PPRRR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRRR5_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRRR5_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRRR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRRR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PPRRR5_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:35:57
% EndTime: 2019-12-31 17:35:58
% DurationCPUTime: 1.23s
% Computational Cost: add. (2498->129), mult. (3650->145), div. (0->0), fcn. (2662->8), ass. (0->83)
t707 = qJD(3) + qJD(4);
t705 = t707 ^ 2;
t706 = qJDD(3) + qJDD(4);
t714 = sin(qJ(4));
t717 = cos(qJ(4));
t683 = t714 * t705 - t717 * t706;
t715 = sin(qJ(3));
t718 = cos(qJ(3));
t722 = -t717 * t705 - t714 * t706;
t666 = t718 * t683 - t715 * t722;
t711 = sin(pkin(8));
t712 = cos(pkin(8));
t731 = t715 * t683 + t718 * t722;
t735 = t711 * t666 - t712 * t731;
t734 = t712 * t666 + t711 * t731;
t713 = sin(qJ(5));
t728 = t713 * t706;
t716 = cos(qJ(5));
t727 = t716 * t706;
t696 = t711 * g(1) - t712 * g(2);
t693 = -qJDD(2) + t696;
t697 = -t712 * g(1) - t711 * g(2);
t677 = -t715 * t693 + t718 * t697;
t720 = qJD(3) ^ 2;
t671 = -t720 * pkin(3) + t677;
t676 = -t718 * t693 - t715 * t697;
t721 = qJDD(3) * pkin(3) + t676;
t655 = t717 * t671 + t714 * t721;
t708 = t713 ^ 2;
t709 = t716 ^ 2;
t726 = t708 + t709;
t725 = qJD(5) * t707;
t654 = -t714 * t671 + t717 * t721;
t694 = t715 * qJDD(3) + t718 * t720;
t695 = -t718 * qJDD(3) + t715 * t720;
t724 = -t711 * t694 + t712 * t695;
t723 = t712 * t694 + t711 * t695;
t719 = qJD(5) ^ 2;
t710 = g(3) - qJDD(1);
t700 = t713 * t705 * t716;
t699 = -t705 * t709 - t719;
t698 = -t705 * t708 - t719;
t692 = -qJDD(5) + t700;
t691 = qJDD(5) + t700;
t689 = t712 * t697;
t688 = t711 * t697;
t686 = t726 * t705;
t680 = t726 * t706;
t679 = -0.2e1 * t713 * t725 + t727;
t678 = 0.2e1 * t716 * t725 + t728;
t675 = t716 * t692 - t713 * t698;
t674 = -t713 * t691 + t716 * t699;
t673 = t713 * t692 + t716 * t698;
t672 = t716 * t691 + t713 * t699;
t665 = t717 * t680 - t714 * t686;
t662 = t714 * t680 + t717 * t686;
t661 = t717 * t675 + t714 * t678;
t660 = t717 * t674 - t714 * t679;
t659 = t714 * t675 - t717 * t678;
t658 = t714 * t674 + t717 * t679;
t657 = -t715 * t676 + t718 * t677;
t656 = t718 * t676 + t715 * t677;
t653 = -t715 * t662 + t718 * t665;
t652 = t718 * t662 + t715 * t665;
t651 = -pkin(4) * t705 + pkin(7) * t706 + t655;
t650 = -t706 * pkin(4) - t705 * pkin(7) - t654;
t649 = t716 * t651 + t713 * t710;
t648 = -t713 * t651 + t716 * t710;
t647 = -t715 * t659 + t718 * t661;
t646 = -t715 * t658 + t718 * t660;
t645 = t718 * t659 + t715 * t661;
t644 = t718 * t658 + t715 * t660;
t643 = -t714 * t654 + t717 * t655;
t642 = t717 * t654 + t714 * t655;
t641 = -t713 * t648 + t716 * t649;
t640 = t716 * t648 + t713 * t649;
t639 = t717 * t641 + t714 * t650;
t638 = t714 * t641 - t717 * t650;
t637 = -t715 * t642 + t718 * t643;
t636 = t718 * t642 + t715 * t643;
t635 = -t715 * t638 + t718 * t639;
t634 = t718 * t638 + t715 * t639;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t711 * t696 + t689, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t711 * t693 + t689, 0, 0, 0, 0, 0, 0, -t723, t724, 0, t711 * t656 + t712 * t657, 0, 0, 0, 0, 0, 0, -t735, t734, 0, t711 * t636 + t712 * t637, 0, 0, 0, 0, 0, 0, t711 * t644 + t712 * t646, t711 * t645 + t712 * t647, t711 * t652 + t712 * t653, t711 * t634 + t712 * t635; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t712 * t696 + t688, 0, 0, 0, 0, 0, 0, 0, 0, 0, t712 * t693 + t688, 0, 0, 0, 0, 0, 0, t724, t723, 0, -t712 * t656 + t711 * t657, 0, 0, 0, 0, 0, 0, t734, t735, 0, -t712 * t636 + t711 * t637, 0, 0, 0, 0, 0, 0, -t712 * t644 + t711 * t646, -t712 * t645 + t711 * t647, -t712 * t652 + t711 * t653, -t712 * t634 + t711 * t635; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t710, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t710, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t710, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t710, 0, 0, 0, 0, 0, 0, -t672, -t673, 0, -t640; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t697, 0, 0, 0, 0, 0, 0, 0, 0, 0, t697, 0, 0, 0, 0, 0, 0, -t694, t695, 0, t657, 0, 0, 0, 0, 0, 0, t731, t666, 0, t637, 0, 0, 0, 0, 0, 0, t646, t647, t653, t635; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t696, 0, 0, 0, 0, 0, 0, 0, 0, 0, t693, 0, 0, 0, 0, 0, 0, t695, t694, 0, -t656, 0, 0, 0, 0, 0, 0, t666, -t731, 0, -t636, 0, 0, 0, 0, 0, 0, -t644, -t645, -t652, -t634; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t710, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t710, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t710, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t710, 0, 0, 0, 0, 0, 0, -t672, -t673, 0, -t640; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t697, 0, 0, 0, 0, 0, 0, -t694, t695, 0, t657, 0, 0, 0, 0, 0, 0, t731, t666, 0, t637, 0, 0, 0, 0, 0, 0, t646, t647, t653, t635; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t710, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t710, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t710, 0, 0, 0, 0, 0, 0, -t672, -t673, 0, -t640; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t693, 0, 0, 0, 0, 0, 0, -t695, -t694, 0, t656, 0, 0, 0, 0, 0, 0, -t666, t731, 0, t636, 0, 0, 0, 0, 0, 0, t644, t645, t652, t634; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t720, -qJDD(3), 0, t677, 0, 0, 0, 0, 0, 0, t722, t683, 0, t643, 0, 0, 0, 0, 0, 0, t660, t661, t665, t639; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t720, 0, t676, 0, 0, 0, 0, 0, 0, -t683, t722, 0, t642, 0, 0, 0, 0, 0, 0, t658, t659, t662, t638; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t710, 0, 0, 0, 0, 0, 0, 0, 0, 0, t710, 0, 0, 0, 0, 0, 0, t672, t673, 0, t640; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t705, -t706, 0, t655, 0, 0, 0, 0, 0, 0, t674, t675, t680, t641; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t706, -t705, 0, t654, 0, 0, 0, 0, 0, 0, t679, -t678, t686, -t650; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t710, 0, 0, 0, 0, 0, 0, t672, t673, 0, t640; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t699, t692, t727, t649; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t691, t698, -t728, t648; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t679, t678, -t686, t650;];
f_new_reg = t1;
