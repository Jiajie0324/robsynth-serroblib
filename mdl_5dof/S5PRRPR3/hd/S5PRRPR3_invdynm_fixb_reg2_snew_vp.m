% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PRRPR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d5,theta1,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:20
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PRRPR3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPR3_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPR3_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRPR3_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRPR3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRRPR3_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:20:05
% EndTime: 2019-12-05 16:20:22
% DurationCPUTime: 17.65s
% Computational Cost: add. (86160->639), mult. (193895->914), div. (0->0), fcn. (136597->10), ass. (0->448)
t1117 = sin(pkin(9));
t1119 = cos(pkin(9));
t1123 = sin(qJ(3));
t1126 = cos(qJ(3));
t1071 = (t1117 * t1126 + t1119 * t1123) * qJD(2);
t1192 = qJD(2) * t1126;
t1105 = qJD(3) * t1192;
t1169 = t1123 * qJDD(2);
t1084 = t1105 + t1169;
t1215 = qJD(2) ^ 2;
t1101 = t1123 * t1215 * t1126;
t1094 = qJDD(3) + t1101;
t1118 = sin(pkin(8));
t1120 = cos(pkin(8));
t1092 = g(1) * t1120 + g(2) * t1118;
t1124 = sin(qJ(2));
t1127 = cos(qJ(2));
t1154 = g(1) * t1118 - g(2) * t1120;
t1130 = t1092 * t1127 - t1124 * t1154;
t1026 = -pkin(2) * t1215 + qJDD(2) * pkin(6) - t1130;
t1115 = g(3) - qJDD(1);
t992 = t1123 * t1026 + t1115 * t1126;
t950 = (-t1084 + t1105) * qJ(4) + t1094 * pkin(3) - t992;
t1193 = qJD(2) * t1123;
t1093 = qJD(3) * pkin(3) - qJ(4) * t1193;
t1213 = t1126 ^ 2;
t1109 = t1213 * t1215;
t1161 = qJD(3) * t1193;
t1167 = t1126 * qJDD(2);
t1132 = -t1161 + t1167;
t995 = t1026 * t1126 - t1115 * t1123;
t951 = -pkin(3) * t1109 + qJ(4) * t1132 - qJD(3) * t1093 + t995;
t1136 = -0.2e1 * qJD(4) * t1071 - t1117 * t951 + t1119 * t950;
t1128 = qJD(3) ^ 2;
t1070 = t1117 * t1193 - t1119 * t1192;
t1214 = t1070 ^ 2;
t1018 = -t1128 - t1214;
t1028 = t1071 * t1070;
t1219 = qJDD(3) - t1028;
t1231 = t1119 * t1219;
t947 = t1018 * t1117 + t1231;
t1235 = pkin(3) * t947 + t1136;
t1142 = t1092 * t1124 + t1127 * t1154;
t1144 = -t1124 * t1142 - t1127 * t1130;
t968 = t1124 * t1130 - t1127 * t1142;
t1202 = t1120 * t968;
t1234 = -t1118 * t1144 + t1202;
t1205 = t1118 * t968;
t1233 = t1120 * t1144 + t1205;
t1232 = t1117 * t1219;
t1122 = sin(qJ(5));
t1112 = qJDD(3) + qJDD(5);
t1125 = cos(qJ(5));
t1002 = t1070 * t1125 + t1071 * t1122;
t1004 = -t1070 * t1122 + t1071 * t1125;
t944 = t1004 * t1002;
t1224 = -t944 + t1112;
t1230 = t1122 * t1224;
t1229 = t1125 * t1224;
t1168 = t1124 * qJDD(2);
t1088 = t1127 * t1215 + t1168;
t1063 = pkin(5) * t1088 - t1115 * t1127;
t1166 = t1127 * qJDD(2);
t1089 = -t1124 * t1215 + t1166;
t1135 = -pkin(5) * t1089 - t1115 * t1124;
t1220 = t1088 * t1120 + t1089 * t1118;
t1228 = qJ(1) * t1220 + t1120 * t1063 - t1118 * t1135;
t1033 = -t1088 * t1118 + t1089 * t1120;
t1227 = -qJ(1) * t1033 + t1118 * t1063 + t1120 * t1135;
t934 = t1123 * t992 + t1126 * t995;
t1029 = t1084 * t1119 + t1117 * t1132;
t1143 = t1084 * t1117 - t1119 * t1132;
t924 = -qJD(5) * t1002 + t1029 * t1125 - t1122 * t1143;
t1113 = qJD(3) + qJD(5);
t991 = t1113 * t1002;
t1226 = -t991 + t924;
t1067 = qJD(3) * t1070;
t982 = t1067 + t1029;
t1145 = t1122 * t1029 + t1125 * t1143;
t888 = (qJD(5) - t1113) * t1004 + t1145;
t1218 = -t1092 * t1120 - t1118 * t1154;
t1216 = -t1118 * t1092 + t1120 * t1154;
t1000 = t1002 ^ 2;
t1001 = t1004 ^ 2;
t1069 = t1071 ^ 2;
t1111 = t1113 ^ 2;
t1190 = qJD(4) * t1070;
t1064 = -0.2e1 * t1190;
t1209 = t1117 * t950 + t1119 * t951;
t868 = t1064 + t1209;
t811 = t1117 * t868 + t1119 * t1136;
t1212 = pkin(3) * t811;
t1191 = qJD(3) * t1071;
t980 = -t1143 + t1191;
t926 = t1117 * t980 - t1119 * t982;
t1211 = pkin(3) * t926;
t838 = pkin(4) * t1219 - pkin(7) * t982 + t1136;
t1055 = qJD(3) * pkin(4) - pkin(7) * t1071;
t841 = -pkin(4) * t1214 - pkin(7) * t1143 - qJD(3) * t1055 + t868;
t794 = t1122 * t841 - t1125 * t838;
t795 = t1122 * t838 + t1125 * t841;
t751 = t1122 * t795 - t1125 * t794;
t1207 = t1117 * t751;
t1025 = -qJDD(2) * pkin(2) - pkin(6) * t1215 - t1142;
t955 = -pkin(3) * t1132 - qJ(4) * t1109 + t1093 * t1193 + qJDD(4) + t1025;
t1206 = t1117 * t955;
t1204 = t1119 * t751;
t1203 = t1119 * t955;
t885 = pkin(4) * t1143 - pkin(7) * t1214 + t1055 * t1071 + t955;
t1201 = t1122 * t885;
t941 = t944 + t1112;
t1200 = t1122 * t941;
t1199 = t1123 * t811;
t1198 = t1125 * t885;
t1197 = t1125 * t941;
t1196 = t1126 * t811;
t1195 = -pkin(2) * t1025 + pkin(6) * t934;
t1194 = qJD(2) * qJD(3);
t1188 = t1070 * t1117;
t1187 = t1070 * t1119;
t1186 = t1071 * t1117;
t1185 = t1071 * t1119;
t1184 = t1113 * t1004;
t1183 = t1113 * t1122;
t1182 = t1113 * t1125;
t1114 = t1123 ^ 2;
t1181 = t1114 * t1215;
t1020 = qJDD(3) + t1028;
t1180 = t1117 * t1020;
t1176 = t1118 * t1115;
t1175 = t1119 * t1020;
t1174 = t1120 * t1115;
t1007 = t1123 * t1025;
t1173 = t1123 * t1094;
t1095 = qJDD(3) - t1101;
t1172 = t1123 * t1095;
t1008 = t1126 * t1025;
t1085 = -0.2e1 * t1161 + t1167;
t1041 = t1126 * t1085;
t1171 = t1126 * t1095;
t1165 = t1127 * qJDD(3);
t1164 = t1114 + t1213;
t752 = t1122 * t794 + t1125 * t795;
t717 = t1117 * t752 + t1204;
t750 = pkin(4) * t751;
t1163 = pkin(3) * t717 + t750;
t892 = t991 + t924;
t824 = -t1122 * t888 - t1125 * t892;
t826 = t1122 * t892 - t1125 * t888;
t781 = t1117 * t826 + t1119 * t824;
t822 = pkin(4) * t824;
t1162 = pkin(3) * t781 + t822;
t1160 = t1124 * t944;
t1159 = t1124 * t1028;
t1158 = t1127 * t944;
t1157 = t1127 * t1028;
t1098 = -t1128 - t1181;
t1050 = -t1098 * t1123 - t1171;
t1083 = 0.2e1 * t1105 + t1169;
t1156 = -pkin(2) * t1083 + pkin(6) * t1050 + t1007;
t1100 = -t1109 - t1128;
t1048 = t1100 * t1126 - t1173;
t1155 = pkin(2) * t1085 + pkin(6) * t1048 - t1008;
t812 = -t1117 * t1136 + t1119 * t868;
t718 = t1119 * t752 - t1207;
t742 = -pkin(4) * t885 + pkin(7) * t752;
t697 = -pkin(3) * t885 - pkin(7) * t1207 + qJ(4) * t718 + t1119 * t742;
t701 = -pkin(7) * t1204 - qJ(4) * t717 - t1117 * t742;
t705 = -t1123 * t717 + t1126 * t718;
t1152 = -pkin(2) * t885 + pkin(6) * t705 + t1123 * t701 + t1126 * t697;
t922 = -t1000 - t1001;
t725 = -pkin(4) * t922 + pkin(7) * t826 + t752;
t730 = -pkin(7) * t824 - t751;
t783 = -t1117 * t824 + t1119 * t826;
t709 = -pkin(3) * t922 + qJ(4) * t783 + t1117 * t730 + t1119 * t725;
t711 = -qJ(4) * t781 - t1117 * t725 + t1119 * t730;
t738 = -t1123 * t781 + t1126 * t783;
t1151 = -pkin(2) * t922 + pkin(6) * t738 + t1123 * t711 + t1126 * t709;
t939 = -t1111 - t1000;
t870 = t1125 * t939 - t1230;
t887 = (qJD(5) + t1113) * t1004 + t1145;
t797 = -pkin(4) * t887 + pkin(7) * t870 - t1198;
t869 = t1122 * t939 + t1229;
t814 = -t1117 * t869 + t1119 * t870;
t815 = -pkin(7) * t869 + t1201;
t732 = -pkin(3) * t887 + qJ(4) * t814 + t1117 * t815 + t1119 * t797;
t813 = t1117 * t870 + t1119 * t869;
t744 = -qJ(4) * t813 - t1117 * t797 + t1119 * t815;
t774 = -t1123 * t813 + t1126 * t814;
t1150 = -pkin(2) * t887 + pkin(6) * t774 + t1123 * t744 + t1126 * t732;
t983 = -t1001 - t1111;
t898 = -t1122 * t983 - t1197;
t801 = -pkin(4) * t1226 + pkin(7) * t898 + t1201;
t897 = t1125 * t983 - t1200;
t827 = -pkin(7) * t897 + t1198;
t829 = -t1117 * t897 + t1119 * t898;
t741 = -pkin(3) * t1226 + qJ(4) * t829 + t1117 * t827 + t1119 * t801;
t828 = t1117 * t898 + t1119 * t897;
t749 = -qJ(4) * t828 - t1117 * t801 + t1119 * t827;
t786 = -t1123 * t828 + t1126 * t829;
t1149 = -pkin(2) * t1226 + pkin(6) * t786 + t1123 * t749 + t1126 * t741;
t928 = t1117 * t982 + t1119 * t980;
t977 = -t1069 - t1214;
t796 = -pkin(3) * t977 + qJ(4) * t928 + t812;
t799 = -qJ(4) * t926 - t811;
t847 = -t1123 * t926 + t1126 * t928;
t1148 = -pkin(2) * t977 + pkin(6) * t847 + t1123 * t799 + t1126 * t796;
t948 = t1018 * t1119 - t1232;
t978 = t1143 + t1191;
t852 = -pkin(3) * t978 + qJ(4) * t948 - t1203;
t873 = -t1123 * t947 + t1126 * t948;
t893 = -qJ(4) * t947 + t1206;
t1147 = -pkin(2) * t978 + pkin(6) * t873 + t1123 * t893 + t1126 * t852;
t1058 = -t1069 - t1128;
t964 = -t1058 * t1117 - t1175;
t981 = -t1067 + t1029;
t862 = -pkin(3) * t981 + qJ(4) * t964 + t1206;
t961 = t1058 * t1119 - t1180;
t899 = -qJ(4) * t961 + t1203;
t912 = -t1123 * t961 + t1126 * t964;
t1146 = -pkin(2) * t981 + pkin(6) * t912 + t1123 * t899 + t1126 * t862;
t1087 = t1164 * qJDD(2);
t1090 = t1109 + t1181;
t1141 = pkin(2) * t1090 + pkin(6) * t1087 + t934;
t1140 = pkin(3) * t961 - t1209;
t1139 = t1124 * t1101;
t1138 = t1127 * t1101;
t1137 = pkin(4) * t869 - t794;
t932 = t1123 * t995 - t1126 * t992;
t1134 = pkin(4) * t897 - t795;
t771 = t1126 * t812 - t1199;
t803 = -pkin(3) * t955 + qJ(4) * t812;
t1133 = -pkin(2) * t955 + pkin(6) * t771 - qJ(4) * t1199 + t1126 * t803;
t1131 = pkin(3) * t813 + t1137;
t1129 = pkin(3) * t828 + t1134;
t1107 = t1124 * qJDD(3);
t1099 = t1109 - t1128;
t1097 = t1128 - t1181;
t1091 = -t1109 + t1181;
t1081 = t1126 * t1094;
t1080 = t1164 * t1194;
t1057 = -t1069 + t1128;
t1056 = -t1128 + t1214;
t1054 = t1080 * t1127 + t1107;
t1053 = t1084 * t1126 - t1114 * t1194;
t1052 = t1080 * t1124 - t1165;
t1051 = -t1123 * t1132 - t1194 * t1213;
t1049 = -t1097 * t1123 + t1081;
t1047 = t1099 * t1126 - t1172;
t1046 = t1098 * t1126 - t1172;
t1045 = t1097 * t1126 + t1173;
t1044 = t1100 * t1123 + t1081;
t1043 = t1099 * t1123 + t1171;
t1042 = (t1084 + t1105) * t1123;
t1036 = t1087 * t1127 - t1090 * t1124;
t1035 = t1087 * t1124 + t1090 * t1127;
t1031 = -t1083 * t1123 + t1041;
t1030 = t1083 * t1126 + t1085 * t1123;
t1024 = t1069 - t1214;
t1017 = t1053 * t1127 - t1139;
t1016 = t1051 * t1127 + t1139;
t1015 = t1053 * t1124 + t1138;
t1014 = t1051 * t1124 - t1138;
t1013 = t1049 * t1127 + t1123 * t1168;
t1012 = t1047 * t1127 + t1124 * t1167;
t1011 = t1049 * t1124 - t1123 * t1166;
t1010 = t1047 * t1124 - t1126 * t1166;
t1006 = -pkin(1) * t1088 + t1130;
t1005 = pkin(1) * t1089 + t1142;
t999 = (t1186 - t1187) * qJD(3);
t998 = (-t1185 - t1188) * qJD(3);
t997 = t1050 * t1127 + t1083 * t1124;
t996 = t1048 * t1127 - t1085 * t1124;
t994 = t1050 * t1124 - t1083 * t1127;
t993 = t1048 * t1124 + t1085 * t1127;
t989 = -t1001 + t1111;
t988 = t1000 - t1111;
t985 = t1031 * t1127 + t1091 * t1124;
t984 = t1031 * t1124 - t1091 * t1127;
t973 = -qJD(3) * t1186 + t1029 * t1119;
t972 = qJD(3) * t1185 + t1029 * t1117;
t971 = qJD(3) * t1187 + t1117 * t1143;
t970 = qJD(3) * t1188 - t1119 * t1143;
t965 = pkin(1) * t968;
t963 = -t1057 * t1117 + t1231;
t962 = t1056 * t1119 - t1180;
t960 = t1057 * t1119 + t1232;
t959 = t1056 * t1117 + t1175;
t958 = -pkin(6) * t1046 + t1008;
t957 = -pkin(6) * t1044 + t1007;
t956 = pkin(1) * t1115 + pkin(5) * t1144;
t954 = -pkin(2) * t1046 + t995;
t953 = -pkin(2) * t1044 + t992;
t943 = t1001 - t1000;
t938 = -t1123 * t998 + t1126 * t999;
t937 = t1123 * t999 + t1126 * t998;
t936 = (-t1002 * t1125 + t1004 * t1122) * t1113;
t935 = (-t1002 * t1122 - t1004 * t1125) * t1113;
t930 = t1127 * t938 + t1107;
t929 = t1124 * t938 - t1165;
t927 = -t1117 * t981 - t1119 * t978;
t925 = -t1117 * t978 + t1119 * t981;
t923 = -qJD(5) * t1004 - t1145;
t921 = -t1123 * t972 + t1126 * t973;
t920 = -t1123 * t970 + t1126 * t971;
t919 = t1123 * t973 + t1126 * t972;
t918 = t1123 * t971 + t1126 * t970;
t917 = pkin(1) * t994 + t1156;
t916 = pkin(1) * t993 + t1155;
t914 = -pkin(5) * t1035 - t1127 * t932;
t913 = pkin(5) * t1036 - t1124 * t932;
t911 = -t1123 * t960 + t1126 * t963;
t910 = -t1123 * t959 + t1126 * t962;
t909 = t1123 * t964 + t1126 * t961;
t908 = t1123 * t963 + t1126 * t960;
t907 = t1123 * t962 + t1126 * t959;
t905 = t1025 * t1124 + t1127 * t934;
t904 = -t1025 * t1127 + t1124 * t934;
t903 = t1125 * t988 - t1200;
t902 = -t1122 * t989 + t1229;
t901 = t1122 * t988 + t1197;
t900 = t1125 * t989 + t1230;
t894 = pkin(1) * t1035 + t1141;
t881 = t1127 * t921 + t1159;
t880 = t1127 * t920 - t1159;
t879 = t1124 * t921 - t1157;
t878 = t1124 * t920 + t1157;
t877 = -t1004 * t1183 + t1125 * t924;
t876 = t1004 * t1182 + t1122 * t924;
t875 = t1002 * t1182 - t1122 * t923;
t874 = t1002 * t1183 + t1125 * t923;
t872 = t1123 * t948 + t1126 * t947;
t864 = -pkin(5) * t994 - t1124 * t954 + t1127 * t958;
t863 = -pkin(5) * t993 - t1124 * t953 + t1127 * t957;
t861 = t1124 * t981 + t1127 * t912;
t860 = t1124 * t982 + t1127 * t911;
t859 = t1124 * t980 + t1127 * t910;
t858 = t1124 * t912 - t1127 * t981;
t857 = t1124 * t911 - t1127 * t982;
t856 = t1124 * t910 - t1127 * t980;
t854 = -t1117 * t935 + t1119 * t936;
t853 = t1117 * t936 + t1119 * t935;
t850 = -pkin(1) * t1046 + pkin(5) * t997 + t1124 * t958 + t1127 * t954;
t849 = -pkin(1) * t1044 + pkin(5) * t996 + t1124 * t957 + t1127 * t953;
t848 = t1124 * t978 + t1127 * t873;
t846 = -t1123 * t925 + t1126 * t927;
t845 = t1124 * t873 - t1127 * t978;
t844 = t1123 * t928 + t1126 * t926;
t843 = t1123 * t927 + t1126 * t925;
t840 = t1024 * t1124 + t1127 * t846;
t839 = -t1024 * t1127 + t1124 * t846;
t837 = pkin(1) * t904 + t1195;
t835 = t1124 * t977 + t1127 * t847;
t834 = t1124 * t847 - t1127 * t977;
t833 = -t1117 * t901 + t1119 * t903;
t832 = -t1117 * t900 + t1119 * t902;
t831 = t1117 * t903 + t1119 * t901;
t830 = t1117 * t902 + t1119 * t900;
t825 = -t1122 * t1226 - t1125 * t887;
t823 = -t1122 * t887 + t1125 * t1226;
t821 = -t1117 * t876 + t1119 * t877;
t820 = -t1117 * t874 + t1119 * t875;
t819 = t1117 * t877 + t1119 * t876;
t818 = t1117 * t875 + t1119 * t874;
t817 = -pkin(2) * t844 - t1211;
t816 = -pkin(5) * t904 + (pkin(2) * t1124 - pkin(6) * t1127) * t932;
t810 = -pkin(2) * t909 + t1064 - t1140;
t809 = -t1123 * t853 + t1126 * t854;
t808 = t1123 * t854 + t1126 * t853;
t807 = t1112 * t1124 + t1127 * t809;
t806 = -t1112 * t1127 + t1124 * t809;
t805 = -pkin(2) * t872 - t1235;
t804 = pkin(5) * t905 + (-pkin(2) * t1127 - pkin(6) * t1124 - pkin(1)) * t932;
t800 = -pkin(6) * t909 - t1123 * t862 + t1126 * t899;
t791 = -pkin(6) * t872 - t1123 * t852 + t1126 * t893;
t790 = -t1123 * t831 + t1126 * t833;
t789 = -t1123 * t830 + t1126 * t832;
t788 = t1123 * t833 + t1126 * t831;
t787 = t1123 * t832 + t1126 * t830;
t785 = t1123 * t829 + t1126 * t828;
t782 = -t1117 * t823 + t1119 * t825;
t780 = t1117 * t825 + t1119 * t823;
t779 = -t1123 * t819 + t1126 * t821;
t778 = -t1123 * t818 + t1126 * t820;
t777 = t1123 * t821 + t1126 * t819;
t776 = t1123 * t820 + t1126 * t818;
t775 = pkin(1) * t858 + t1146;
t773 = t1123 * t814 + t1126 * t813;
t770 = t1123 * t812 + t1196;
t769 = -t1124 * t888 + t1127 * t790;
t768 = t1124 * t892 + t1127 * t789;
t767 = t1124 * t790 + t1127 * t888;
t766 = t1124 * t789 - t1127 * t892;
t764 = t1124 * t1226 + t1127 * t786;
t763 = t1124 * t786 - t1127 * t1226;
t762 = t1127 * t779 + t1160;
t761 = t1127 * t778 - t1160;
t760 = t1124 * t779 - t1158;
t759 = t1124 * t778 + t1158;
t758 = t1124 * t955 + t1127 * t771;
t757 = t1124 * t771 - t1127 * t955;
t756 = pkin(1) * t845 + t1147;
t755 = t1124 * t887 + t1127 * t774;
t754 = t1124 * t774 - t1127 * t887;
t753 = -pkin(5) * t858 - t1124 * t810 + t1127 * t800;
t747 = -pkin(2) * t770 - t1212;
t746 = -pkin(1) * t909 + pkin(5) * t861 + t1124 * t800 + t1127 * t810;
t745 = -pkin(5) * t845 - t1124 * t805 + t1127 * t791;
t739 = -pkin(6) * t844 - t1123 * t796 + t1126 * t799;
t737 = -t1123 * t780 + t1126 * t782;
t736 = t1123 * t783 + t1126 * t781;
t735 = t1123 * t782 + t1126 * t780;
t733 = -pkin(1) * t872 + pkin(5) * t848 + t1124 * t791 + t1127 * t805;
t729 = t1124 * t943 + t1127 * t737;
t728 = t1124 * t737 - t1127 * t943;
t727 = t1124 * t922 + t1127 * t738;
t726 = t1124 * t738 - t1127 * t922;
t724 = -pkin(6) * t770 - qJ(4) * t1196 - t1123 * t803;
t723 = -pkin(2) * t785 - t1129;
t722 = pkin(1) * t834 + t1148;
t721 = -pkin(2) * t773 - t1131;
t720 = -pkin(5) * t834 - t1124 * t817 + t1127 * t739;
t719 = -pkin(1) * t844 + pkin(5) * t835 + t1124 * t739 + t1127 * t817;
t716 = -pkin(2) * t736 - t1162;
t715 = pkin(1) * t757 + t1133;
t714 = -pkin(6) * t785 - t1123 * t741 + t1126 * t749;
t713 = -pkin(6) * t773 - t1123 * t732 + t1126 * t744;
t712 = -pkin(5) * t757 - t1124 * t747 + t1127 * t724;
t707 = pkin(1) * t763 + t1149;
t706 = -pkin(1) * t770 + pkin(5) * t758 + t1124 * t724 + t1127 * t747;
t704 = t1123 * t718 + t1126 * t717;
t702 = pkin(1) * t754 + t1150;
t699 = t1124 * t885 + t1127 * t705;
t698 = t1124 * t705 - t1127 * t885;
t695 = -pkin(5) * t763 - t1124 * t723 + t1127 * t714;
t694 = -pkin(1) * t785 + pkin(5) * t764 + t1124 * t714 + t1127 * t723;
t693 = -pkin(5) * t754 - t1124 * t721 + t1127 * t713;
t692 = -pkin(1) * t773 + pkin(5) * t755 + t1124 * t713 + t1127 * t721;
t691 = -pkin(2) * t704 - t1163;
t690 = -pkin(6) * t736 - t1123 * t709 + t1126 * t711;
t689 = pkin(1) * t726 + t1151;
t688 = -pkin(5) * t726 - t1124 * t716 + t1127 * t690;
t687 = -pkin(6) * t704 - t1123 * t697 + t1126 * t701;
t686 = -pkin(1) * t736 + pkin(5) * t727 + t1124 * t690 + t1127 * t716;
t685 = pkin(1) * t698 + t1152;
t684 = -pkin(5) * t698 - t1124 * t691 + t1127 * t687;
t683 = -pkin(1) * t704 + pkin(5) * t699 + t1124 * t687 + t1127 * t691;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1176, -t1174, -t1216, -qJ(1) * t1216, 0, 0, t1033, 0, -t1220, 0, t1227, t1228, t1234, pkin(5) * t1202 + qJ(1) * t1234 - t1118 * t956, -t1015 * t1118 + t1017 * t1120, -t1118 * t984 + t1120 * t985, -t1011 * t1118 + t1013 * t1120, -t1014 * t1118 + t1016 * t1120, -t1010 * t1118 + t1012 * t1120, -t1052 * t1118 + t1054 * t1120, t1120 * t863 - t1118 * t849 - qJ(1) * (t1118 * t996 + t1120 * t993), t1120 * t864 - t1118 * t850 - qJ(1) * (t1118 * t997 + t1120 * t994), t1120 * t914 - t1118 * t913 - qJ(1) * (t1035 * t1120 + t1036 * t1118), t1120 * t816 - t1118 * t804 - qJ(1) * (t1118 * t905 + t1120 * t904), -t1118 * t879 + t1120 * t881, -t1118 * t839 + t1120 * t840, -t1118 * t857 + t1120 * t860, -t1118 * t878 + t1120 * t880, -t1118 * t856 + t1120 * t859, -t1118 * t929 + t1120 * t930, t1120 * t745 - t1118 * t733 - qJ(1) * (t1118 * t848 + t1120 * t845), t1120 * t753 - t1118 * t746 - qJ(1) * (t1118 * t861 + t1120 * t858), t1120 * t720 - t1118 * t719 - qJ(1) * (t1118 * t835 + t1120 * t834), t1120 * t712 - t1118 * t706 - qJ(1) * (t1118 * t758 + t1120 * t757), -t1118 * t760 + t1120 * t762, -t1118 * t728 + t1120 * t729, -t1118 * t766 + t1120 * t768, -t1118 * t759 + t1120 * t761, -t1118 * t767 + t1120 * t769, -t1118 * t806 + t1120 * t807, t1120 * t693 - t1118 * t692 - qJ(1) * (t1118 * t755 + t1120 * t754), t1120 * t695 - t1118 * t694 - qJ(1) * (t1118 * t764 + t1120 * t763), t1120 * t688 - t1118 * t686 - qJ(1) * (t1118 * t727 + t1120 * t726), t1120 * t684 - t1118 * t683 - qJ(1) * (t1118 * t699 + t1120 * t698); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1174, -t1176, t1218, qJ(1) * t1218, 0, 0, t1220, 0, t1033, 0, -t1228, t1227, t1233, pkin(5) * t1205 + qJ(1) * t1233 + t1120 * t956, t1015 * t1120 + t1017 * t1118, t1118 * t985 + t1120 * t984, t1011 * t1120 + t1013 * t1118, t1014 * t1120 + t1016 * t1118, t1010 * t1120 + t1012 * t1118, t1052 * t1120 + t1054 * t1118, t1118 * t863 + t1120 * t849 + qJ(1) * (-t1118 * t993 + t1120 * t996), t1118 * t864 + t1120 * t850 + qJ(1) * (-t1118 * t994 + t1120 * t997), t1118 * t914 + t1120 * t913 + qJ(1) * (-t1035 * t1118 + t1036 * t1120), t1118 * t816 + t1120 * t804 + qJ(1) * (-t1118 * t904 + t1120 * t905), t1118 * t881 + t1120 * t879, t1118 * t840 + t1120 * t839, t1118 * t860 + t1120 * t857, t1118 * t880 + t1120 * t878, t1118 * t859 + t1120 * t856, t1118 * t930 + t1120 * t929, t1118 * t745 + t1120 * t733 + qJ(1) * (-t1118 * t845 + t1120 * t848), t1118 * t753 + t1120 * t746 + qJ(1) * (-t1118 * t858 + t1120 * t861), t1118 * t720 + t1120 * t719 + qJ(1) * (-t1118 * t834 + t1120 * t835), t1118 * t712 + t1120 * t706 + qJ(1) * (-t1118 * t757 + t1120 * t758), t1118 * t762 + t1120 * t760, t1118 * t729 + t1120 * t728, t1118 * t768 + t1120 * t766, t1118 * t761 + t1120 * t759, t1118 * t769 + t1120 * t767, t1118 * t807 + t1120 * t806, t1118 * t693 + t1120 * t692 + qJ(1) * (-t1118 * t754 + t1120 * t755), t1118 * t695 + t1120 * t694 + qJ(1) * (-t1118 * t763 + t1120 * t764), t1118 * t688 + t1120 * t686 + qJ(1) * (-t1118 * t726 + t1120 * t727), t1118 * t684 + t1120 * t683 + qJ(1) * (-t1118 * t698 + t1120 * t699); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1154, t1092, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t1005, t1006, 0, -t965, t1042, t1030, t1045, t1041, t1043, 0, t916, t917, t894, t837, t919, t843, t908, t918, t907, t937, t756, t775, t722, t715, t777, t735, t787, t776, t788, t808, t702, t707, t689, t685; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1115, -t1154, 0, 0, 0, t1089, 0, -t1088, 0, t1135, t1063, t968, pkin(5) * t968, t1017, t985, t1013, t1016, t1012, t1054, t863, t864, t914, t816, t881, t840, t860, t880, t859, t930, t745, t753, t720, t712, t762, t729, t768, t761, t769, t807, t693, t695, t688, t684; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1115, 0, -t1092, 0, 0, 0, t1088, 0, t1089, 0, -t1063, t1135, t1144, t956, t1015, t984, t1011, t1014, t1010, t1052, t849, t850, t913, t804, t879, t839, t857, t878, t856, t929, t733, t746, t719, t706, t760, t728, t766, t759, t767, t806, t692, t694, t686, t683; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1154, t1092, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t1005, t1006, 0, -t965, t1042, t1030, t1045, t1041, t1043, 0, t916, t917, t894, t837, t919, t843, t908, t918, t907, t937, t756, t775, t722, t715, t777, t735, t787, t776, t788, t808, t702, t707, t689, t685; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t1215, 0, 0, -t1115, -t1142, 0, t1053, t1031, t1049, t1051, t1047, t1080, t957, t958, -t932, -pkin(6) * t932, t921, t846, t911, t920, t910, t938, t791, t800, t739, t724, t779, t737, t789, t778, t790, t809, t713, t714, t690, t687; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1215, 0, qJDD(2), 0, t1115, 0, -t1130, 0, t1101, -t1091, -t1169, -t1101, -t1167, -qJDD(3), t953, t954, 0, -pkin(2) * t932, -t1028, -t1024, -t982, t1028, -t980, -qJDD(3), t805, t810, t817, t747, -t944, -t943, -t892, t944, t888, -t1112, t721, t723, t716, t691; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t1142, t1130, 0, 0, t1042, t1030, t1045, t1041, t1043, 0, t1155, t1156, t1141, t1195, t919, t843, t908, t918, t907, t937, t1147, t1146, t1148, t1133, t777, t735, t787, t776, t788, t808, t1150, t1149, t1151, t1152; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1084, t1085, t1094, -t1105, t1099, t1105, 0, t1025, t992, 0, t973, t927, t963, t971, t962, t999, t893, t899, t799, -qJ(4) * t811, t821, t782, t832, t820, t833, t854, t744, t749, t711, t701; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1161, t1083, t1097, t1132, t1095, -t1161, -t1025, 0, t995, 0, t972, t925, t960, t970, t959, t998, t852, t862, t796, t803, t819, t780, t830, t818, t831, t853, t732, t741, t709, t697; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1101, t1091, t1169, t1101, t1167, qJDD(3), -t992, -t995, 0, 0, t1028, t1024, t982, -t1028, t980, qJDD(3), t1235, t1140 + 0.2e1 * t1190, t1211, t1212, t944, t943, t892, -t944, -t888, t1112, t1131, t1129, t1162, t1163; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1029, -t978, t1219, t1067, t1056, -t1067, 0, t955, -t1136, 0, t877, t825, t902, t875, t903, t936, t815, t827, t730, -pkin(7) * t751; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1191, t981, t1057, -t1143, t1020, -t1191, -t955, 0, t868, 0, t876, t823, t900, t874, t901, t935, t797, t801, t725, t742; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1028, t1024, t982, -t1028, t980, qJDD(3), t1136, -t868, 0, 0, t944, t943, t892, -t944, -t888, t1112, t1137, t1134, t822, t750; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t924, -t887, t1224, t991, t988, -t991, 0, t885, t794, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1184, t1226, t989, t923, t941, -t1184, -t885, 0, t795, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t944, t943, t892, -t944, -t888, t1112, -t794, -t795, 0, 0;];
m_new_reg = t1;
