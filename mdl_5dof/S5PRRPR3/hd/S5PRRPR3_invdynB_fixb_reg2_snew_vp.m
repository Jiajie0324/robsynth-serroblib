% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRRPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d5,theta1,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:20
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRRPR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPR3_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPR3_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRPR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRPR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRRPR3_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:19:50
% EndTime: 2019-12-05 16:20:05
% DurationCPUTime: 13.18s
% Computational Cost: add. (50597->591), mult. (113735->909), div. (0->0), fcn. (80268->10), ass. (0->410)
t593 = sin(pkin(8));
t599 = sin(qJ(2));
t602 = cos(qJ(2));
t595 = cos(pkin(8));
t568 = g(1) * t595 + g(2) * t593;
t614 = g(1) * t593 - t595 * g(2);
t609 = t568 * t599 + t602 * t614;
t636 = t602 * t568 - t599 * t614;
t612 = -t599 * t609 - t602 * t636;
t458 = t599 * t636 - t602 * t609;
t652 = t458 * t595;
t682 = -t593 * t612 + t652;
t653 = t458 * t593;
t405 = t595 * t612 + t653;
t626 = qJDD(2) * t599;
t664 = qJD(2) ^ 2;
t564 = t664 * t602 + t626;
t624 = qJDD(2) * t602;
t565 = -t599 * t664 + t624;
t515 = -t564 * t593 + t595 * t565;
t590 = g(3) - qJDD(1);
t542 = pkin(5) * t564 - t590 * t602;
t606 = -pkin(5) * t565 - t590 * t599;
t681 = -qJ(1) * t515 + t542 * t593 + t595 * t606;
t592 = sin(pkin(9));
t594 = cos(pkin(9));
t601 = cos(qJ(3));
t598 = sin(qJ(3));
t635 = qJD(2) * t598;
t547 = -t594 * t601 * qJD(2) + t592 * t635;
t549 = (t592 * t601 + t594 * t598) * qJD(2);
t509 = t549 * t547;
t668 = qJDD(3) - t509;
t680 = t592 * t668;
t679 = t594 * t668;
t597 = sin(qJ(5));
t600 = cos(qJ(5));
t488 = t600 * t547 + t549 * t597;
t490 = -t547 * t597 + t549 * t600;
t434 = t490 * t488;
t622 = qJDD(3) + qJDD(5);
t671 = -t434 + t622;
t678 = t597 * t671;
t677 = t600 * t671;
t669 = t595 * t564 + t565 * t593;
t675 = qJ(1) * t669 + t542 * t595 - t593 * t606;
t588 = qJD(3) + qJD(5);
t477 = t588 * t488;
t628 = qJD(2) * qJD(3);
t615 = t601 * t628;
t627 = qJDD(2) * t598;
t561 = t615 + t627;
t616 = t598 * t628;
t625 = qJDD(2) * t601;
t605 = t616 - t625;
t511 = t594 * t561 - t592 * t605;
t611 = t561 * t592 + t594 * t605;
t604 = qJD(5) * t488 - t511 * t600 + t597 * t611;
t670 = -t477 - t604;
t613 = t597 * t511 + t600 * t611;
t385 = (qJD(5) - t588) * t490 + t613;
t521 = -t595 * t568 - t593 * t614;
t520 = -t593 * t568 + t595 * t614;
t486 = t488 ^ 2;
t487 = t490 ^ 2;
t666 = t547 ^ 2;
t546 = t549 ^ 2;
t586 = t588 ^ 2;
t665 = t601 ^ 2;
t507 = -t664 * pkin(2) + qJDD(2) * pkin(6) - t636;
t478 = t507 * t598 + t601 * t590;
t577 = t598 * t664 * t601;
t570 = qJDD(3) + t577;
t440 = (-t561 + t615) * qJ(4) + t570 * pkin(3) - t478;
t481 = t601 * t507 - t598 * t590;
t569 = qJD(3) * pkin(3) - qJ(4) * t635;
t584 = t665 * t664;
t441 = -pkin(3) * t584 - qJ(4) * t605 - qJD(3) * t569 + t481;
t369 = 0.2e1 * qJD(4) * t549 - t594 * t440 + t441 * t592;
t633 = qJD(3) * t547;
t469 = -t511 - t633;
t344 = pkin(4) * t668 + pkin(7) * t469 - t369;
t370 = -0.2e1 * qJD(4) * t547 + t592 * t440 + t594 * t441;
t534 = qJD(3) * pkin(4) - pkin(7) * t549;
t348 = -pkin(4) * t666 - pkin(7) * t611 - qJD(3) * t534 + t370;
t298 = -t600 * t344 + t348 * t597;
t299 = t597 * t344 + t600 * t348;
t263 = -t298 * t600 + t299 * t597;
t663 = t263 * t592;
t662 = t263 * t594;
t316 = -t369 * t594 + t370 * t592;
t661 = t316 * t598;
t660 = t316 * t601;
t506 = -qJDD(2) * pkin(2) - t664 * pkin(6) - t609;
t444 = t605 * pkin(3) - qJ(4) * t584 + t569 * t635 + qJDD(4) + t506;
t383 = pkin(4) * t611 - t666 * pkin(7) + t534 * t549 + t444;
t659 = t383 * t597;
t658 = t383 * t600;
t431 = t434 + t622;
t657 = t431 * t597;
t656 = t431 * t600;
t655 = t444 * t592;
t654 = t444 * t594;
t502 = qJDD(3) + t509;
t651 = t502 * t592;
t650 = t502 * t594;
t649 = t506 * t598;
t648 = t506 * t601;
t562 = -0.2e1 * t616 + t625;
t647 = t562 * t601;
t644 = t570 * t598;
t571 = qJDD(3) - t577;
t643 = t571 * t598;
t642 = t571 * t601;
t641 = t588 * t597;
t640 = t588 * t600;
t638 = t593 * t590;
t637 = t595 * t590;
t589 = t598 ^ 2;
t634 = t664 * t589;
t632 = qJD(3) * t549;
t631 = qJD(3) * t592;
t630 = qJD(3) * t594;
t623 = qJDD(3) * t602;
t621 = t589 + t665;
t620 = t599 * t434;
t619 = t602 * t434;
t618 = t599 * t509;
t617 = t602 * t509;
t264 = t298 * t597 + t600 * t299;
t317 = t369 * t592 + t594 * t370;
t425 = t478 * t598 + t601 * t481;
t608 = t599 * t577;
t607 = t602 * t577;
t424 = t478 * t601 - t481 * t598;
t467 = -t611 + t632;
t603 = qJD(3) ^ 2;
t582 = t599 * qJDD(3);
t576 = -t584 - t603;
t575 = t584 - t603;
t574 = -t603 - t634;
t573 = t603 - t634;
t567 = t584 - t634;
t566 = t584 + t634;
t563 = t621 * qJDD(2);
t560 = 0.2e1 * t615 + t627;
t559 = t601 * t570;
t558 = t621 * t628;
t537 = -t546 - t603;
t536 = -t546 + t603;
t535 = -t603 + t666;
t533 = t558 * t602 + t582;
t532 = t561 * t601 - t589 * t628;
t531 = t558 * t599 - t623;
t530 = t598 * t605 - t665 * t628;
t529 = -t574 * t598 - t642;
t528 = -t573 * t598 + t559;
t527 = t576 * t601 - t644;
t526 = t575 * t601 - t643;
t525 = t574 * t601 - t643;
t524 = t576 * t598 + t559;
t519 = t563 * t602 - t566 * t599;
t518 = t563 * t599 + t566 * t602;
t512 = -t560 * t598 + t647;
t505 = -t546 + t666;
t500 = -t603 - t666;
t499 = t532 * t602 - t608;
t498 = t530 * t602 + t608;
t497 = t532 * t599 + t607;
t496 = t530 * t599 - t607;
t495 = t528 * t602 + t598 * t626;
t494 = t526 * t602 + t599 * t625;
t493 = t528 * t599 - t598 * t624;
t492 = t526 * t599 - t601 * t624;
t485 = (-t547 * t594 + t549 * t592) * qJD(3);
t484 = (-t547 * t592 - t549 * t594) * qJD(3);
t483 = t529 * t602 + t560 * t599;
t482 = t527 * t602 - t562 * t599;
t480 = t529 * t599 - t560 * t602;
t479 = t527 * t599 + t562 * t602;
t475 = -t487 + t586;
t474 = t486 - t586;
t472 = t512 * t602 - t567 * t599;
t471 = t512 * t599 + t567 * t602;
t470 = -t487 - t586;
t468 = t511 - t633;
t465 = t611 + t632;
t464 = -t546 - t666;
t463 = t511 * t594 - t549 * t631;
t462 = t511 * t592 + t549 * t630;
t461 = t547 * t630 + t592 * t611;
t460 = t547 * t631 - t594 * t611;
t455 = -t537 * t592 - t650;
t454 = -t536 * t592 + t679;
t453 = t535 * t594 - t651;
t452 = t537 * t594 - t651;
t451 = t536 * t594 + t680;
t450 = t535 * t592 + t650;
t449 = -pkin(6) * t525 + t648;
t448 = -pkin(6) * t524 + t649;
t447 = -t518 * t593 + t519 * t595;
t446 = t518 * t595 + t519 * t593;
t445 = pkin(1) * t590 + pkin(5) * t612;
t443 = -pkin(2) * t525 + t481;
t442 = -pkin(2) * t524 + t478;
t438 = t500 * t594 - t680;
t437 = t500 * t592 + t679;
t433 = -t487 + t486;
t429 = -t586 - t486;
t428 = -t484 * t598 + t485 * t601;
t427 = (-t488 * t600 + t490 * t597) * t588;
t426 = (-t488 * t597 - t490 * t600) * t588;
t422 = -t480 * t593 + t483 * t595;
t421 = -t479 * t593 + t482 * t595;
t420 = t480 * t595 + t483 * t593;
t419 = t479 * t595 + t482 * t593;
t418 = t428 * t602 + t582;
t417 = t428 * t599 - t623;
t416 = t467 * t594 - t469 * t592;
t415 = -t465 * t594 - t468 * t592;
t414 = t467 * t592 + t469 * t594;
t413 = -t465 * t592 + t468 * t594;
t411 = -qJD(5) * t490 - t613;
t410 = -t486 - t487;
t409 = -t462 * t598 + t463 * t601;
t408 = -t460 * t598 + t461 * t601;
t407 = -pkin(5) * t518 + t424 * t602;
t406 = pkin(5) * t519 + t424 * t599;
t403 = -t452 * t598 + t455 * t601;
t402 = -t451 * t598 + t454 * t601;
t401 = -t450 * t598 + t453 * t601;
t400 = t452 * t601 + t455 * t598;
t399 = t425 * t602 + t506 * t599;
t398 = t425 * t599 - t506 * t602;
t397 = t474 * t600 - t657;
t396 = -t475 * t597 + t677;
t395 = t474 * t597 + t656;
t394 = t475 * t600 + t678;
t393 = -qJ(4) * t452 + t654;
t392 = -t470 * t597 - t656;
t391 = t470 * t600 - t657;
t390 = -qJ(4) * t437 + t655;
t389 = -t477 + t604;
t384 = (qJD(5) + t588) * t490 + t613;
t382 = t409 * t602 + t618;
t381 = t408 * t602 - t618;
t380 = t409 * t599 - t617;
t379 = t408 * t599 + t617;
t378 = -t490 * t641 - t600 * t604;
t377 = t490 * t640 - t597 * t604;
t376 = -t411 * t597 + t488 * t640;
t375 = t411 * t600 + t488 * t641;
t374 = -t437 * t598 + t438 * t601;
t373 = t437 * t601 + t438 * t598;
t372 = t429 * t600 - t678;
t371 = t429 * t597 + t677;
t367 = -pkin(5) * t480 - t443 * t599 + t449 * t602;
t366 = -pkin(5) * t479 - t442 * t599 + t448 * t602;
t365 = -pkin(3) * t468 + qJ(4) * t455 + t655;
t364 = t403 * t602 + t468 * t599;
t363 = t402 * t602 - t469 * t599;
t362 = t401 * t602 + t467 * t599;
t361 = t403 * t599 - t468 * t602;
t360 = t402 * t599 + t469 * t602;
t359 = t401 * t599 - t467 * t602;
t358 = -t426 * t592 + t427 * t594;
t357 = t426 * t594 + t427 * t592;
t356 = -pkin(3) * t465 + qJ(4) * t438 - t654;
t355 = -pkin(1) * t525 + pkin(5) * t483 + t443 * t602 + t449 * t599;
t354 = -pkin(1) * t524 + pkin(5) * t482 + t442 * t602 + t448 * t599;
t353 = t374 * t602 + t465 * t599;
t352 = -t414 * t598 + t416 * t601;
t351 = -t413 * t598 + t415 * t601;
t350 = t374 * t599 - t465 * t602;
t349 = t414 * t601 + t416 * t598;
t346 = t351 * t602 - t505 * t599;
t345 = t351 * t599 + t505 * t602;
t341 = -t398 * t593 + t399 * t595;
t340 = t398 * t595 + t399 * t593;
t339 = t352 * t602 + t464 * t599;
t338 = t352 * t599 - t464 * t602;
t337 = -t395 * t592 + t397 * t594;
t336 = -t394 * t592 + t396 * t594;
t335 = t395 * t594 + t397 * t592;
t334 = t394 * t594 + t396 * t592;
t333 = -t391 * t592 + t392 * t594;
t332 = t391 * t594 + t392 * t592;
t331 = -pkin(7) * t391 + t658;
t330 = -t385 * t600 - t389 * t597;
t329 = -t384 * t600 - t597 * t670;
t328 = -t385 * t597 + t389 * t600;
t327 = -t384 * t597 + t600 * t670;
t326 = -t377 * t592 + t378 * t594;
t325 = -t375 * t592 + t376 * t594;
t324 = t377 * t594 + t378 * t592;
t323 = t375 * t594 + t376 * t592;
t322 = -pkin(2) * t349 - pkin(3) * t414;
t321 = -pkin(5) * t398 - (pkin(2) * t599 - pkin(6) * t602) * t424;
t320 = -pkin(7) * t371 + t659;
t319 = -t371 * t592 + t372 * t594;
t318 = t371 * t594 + t372 * t592;
t315 = -pkin(2) * t400 - pkin(3) * t452 + t370;
t314 = -t361 * t593 + t364 * t595;
t313 = t361 * t595 + t364 * t593;
t312 = -t357 * t598 + t358 * t601;
t311 = t312 * t602 + t599 * t622;
t310 = t312 * t599 - t602 * t622;
t309 = -pkin(2) * t373 - pkin(3) * t437 + t369;
t308 = pkin(5) * t399 - (-pkin(2) * t602 - pkin(6) * t599 - pkin(1)) * t424;
t307 = -pkin(3) * t444 + qJ(4) * t317;
t306 = -t350 * t593 + t353 * t595;
t305 = t350 * t595 + t353 * t593;
t304 = -pkin(4) * t670 + pkin(7) * t392 + t659;
t303 = -pkin(6) * t400 - t365 * t598 + t393 * t601;
t302 = -qJ(4) * t414 - t316;
t301 = -pkin(4) * t384 + pkin(7) * t372 - t658;
t300 = -pkin(3) * t464 + qJ(4) * t416 + t317;
t296 = -pkin(6) * t373 - t356 * t598 + t390 * t601;
t295 = -t335 * t598 + t337 * t601;
t294 = -t334 * t598 + t336 * t601;
t293 = -t338 * t593 + t339 * t595;
t292 = t338 * t595 + t339 * t593;
t291 = -t332 * t598 + t333 * t601;
t290 = t332 * t601 + t333 * t598;
t289 = -t328 * t592 + t330 * t594;
t288 = -t327 * t592 + t329 * t594;
t287 = t328 * t594 + t330 * t592;
t286 = t327 * t594 + t329 * t592;
t285 = -t324 * t598 + t326 * t601;
t284 = -t323 * t598 + t325 * t601;
t283 = -t318 * t598 + t319 * t601;
t282 = t318 * t601 + t319 * t598;
t281 = t317 * t601 - t661;
t280 = t317 * t598 + t660;
t279 = t295 * t602 - t385 * t599;
t278 = t294 * t602 - t389 * t599;
t277 = t295 * t599 + t385 * t602;
t276 = t294 * t599 + t389 * t602;
t275 = t291 * t602 + t599 * t670;
t274 = t291 * t599 - t602 * t670;
t273 = t285 * t602 + t620;
t272 = t284 * t602 - t620;
t271 = t285 * t599 - t619;
t270 = t284 * t599 + t619;
t269 = t281 * t602 + t444 * t599;
t268 = t281 * t599 - t444 * t602;
t267 = t283 * t602 + t384 * t599;
t266 = t283 * t599 - t384 * t602;
t265 = -pkin(5) * t361 + t303 * t602 - t315 * t599;
t262 = -qJ(4) * t332 - t304 * t592 + t331 * t594;
t261 = -pkin(2) * t280 - pkin(3) * t316;
t260 = -pkin(1) * t400 + pkin(5) * t364 + t303 * t599 + t315 * t602;
t259 = -pkin(5) * t350 + t296 * t602 - t309 * t599;
t258 = -qJ(4) * t318 - t301 * t592 + t320 * t594;
t257 = -pkin(4) * t383 + pkin(7) * t264;
t256 = -pkin(3) * t670 + qJ(4) * t333 + t304 * t594 + t331 * t592;
t255 = -pkin(6) * t349 - t300 * t598 + t302 * t601;
t254 = -t287 * t598 + t289 * t601;
t253 = -t286 * t598 + t288 * t601;
t252 = t287 * t601 + t289 * t598;
t251 = -pkin(1) * t373 + pkin(5) * t353 + t296 * t599 + t309 * t602;
t250 = -pkin(3) * t384 + qJ(4) * t319 + t301 * t594 + t320 * t592;
t249 = -pkin(7) * t328 - t263;
t248 = t253 * t602 - t433 * t599;
t247 = t253 * t599 + t433 * t602;
t246 = t254 * t602 + t410 * t599;
t245 = t254 * t599 - t410 * t602;
t244 = -t274 * t593 + t275 * t595;
t243 = t274 * t595 + t275 * t593;
t242 = -pkin(4) * t410 + pkin(7) * t330 + t264;
t241 = -pkin(6) * t280 - qJ(4) * t660 - t307 * t598;
t240 = -pkin(2) * t290 - pkin(3) * t332 - pkin(4) * t391 + t299;
t239 = -t268 * t593 + t269 * t595;
t238 = t268 * t595 + t269 * t593;
t237 = -t266 * t593 + t267 * t595;
t236 = t266 * t595 + t267 * t593;
t235 = -pkin(2) * t282 - pkin(3) * t318 - pkin(4) * t371 + t298;
t234 = -pkin(5) * t338 + t255 * t602 - t322 * t599;
t233 = -pkin(1) * t349 + pkin(5) * t339 + t255 * t599 + t322 * t602;
t232 = t264 * t594 - t663;
t231 = t264 * t592 + t662;
t230 = -pkin(2) * t252 - pkin(3) * t287 - pkin(4) * t328;
t229 = -t245 * t593 + t246 * t595;
t228 = t245 * t595 + t246 * t593;
t227 = -pkin(6) * t290 - t256 * t598 + t262 * t601;
t226 = -pkin(6) * t282 - t250 * t598 + t258 * t601;
t225 = -pkin(5) * t268 + t241 * t602 - t261 * t599;
t224 = -qJ(4) * t287 - t242 * t592 + t249 * t594;
t223 = -pkin(3) * t410 + qJ(4) * t289 + t242 * t594 + t249 * t592;
t222 = -pkin(1) * t280 + pkin(5) * t269 + t241 * t599 + t261 * t602;
t221 = -t231 * t598 + t232 * t601;
t220 = t231 * t601 + t232 * t598;
t219 = -pkin(7) * t662 - qJ(4) * t231 - t257 * t592;
t218 = t221 * t602 + t383 * t599;
t217 = t221 * t599 - t383 * t602;
t216 = -pkin(3) * t383 - pkin(7) * t663 + qJ(4) * t232 + t257 * t594;
t215 = -pkin(5) * t274 + t227 * t602 - t240 * t599;
t214 = -pkin(1) * t290 + pkin(5) * t275 + t227 * t599 + t240 * t602;
t213 = -pkin(5) * t266 + t226 * t602 - t235 * t599;
t212 = -pkin(1) * t282 + pkin(5) * t267 + t226 * t599 + t235 * t602;
t211 = -pkin(2) * t220 - pkin(3) * t231 - pkin(4) * t263;
t210 = -pkin(6) * t252 - t223 * t598 + t224 * t601;
t209 = -t217 * t593 + t218 * t595;
t208 = t217 * t595 + t218 * t593;
t207 = -pkin(5) * t245 + t210 * t602 - t230 * t599;
t206 = -pkin(6) * t220 - t216 * t598 + t219 * t601;
t205 = -pkin(1) * t252 + pkin(5) * t246 + t210 * t599 + t230 * t602;
t204 = -pkin(5) * t217 + t206 * t602 - t211 * t599;
t203 = -pkin(1) * t220 + pkin(5) * t218 + t206 * t599 + t211 * t602;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t521, 0, 0, 0, 0, 0, 0, -t669, -t515, 0, t405, 0, 0, 0, 0, 0, 0, t421, t422, t447, t341, 0, 0, 0, 0, 0, 0, t306, t314, t293, t239, 0, 0, 0, 0, 0, 0, t237, t244, t229, t209; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t520, 0, 0, 0, 0, 0, 0, t515, -t669, 0, -t682, 0, 0, 0, 0, 0, 0, t419, t420, t446, t340, 0, 0, 0, 0, 0, 0, t305, t313, t292, t238, 0, 0, 0, 0, 0, 0, t236, t243, t228, t208; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t590, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t590, 0, 0, 0, 0, 0, 0, t524, t525, 0, -t424, 0, 0, 0, 0, 0, 0, t373, t400, t349, t280, 0, 0, 0, 0, 0, 0, t282, t290, t252, t220; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t638, -t637, -t520, -qJ(1) * t520, 0, 0, t515, 0, -t669, 0, t681, t675, t682, pkin(5) * t652 + qJ(1) * t682 - t445 * t593, -t497 * t593 + t499 * t595, -t471 * t593 + t472 * t595, -t493 * t593 + t495 * t595, -t496 * t593 + t498 * t595, -t492 * t593 + t494 * t595, -t531 * t593 + t533 * t595, -qJ(1) * t419 - t354 * t593 + t366 * t595, -qJ(1) * t420 - t355 * t593 + t367 * t595, -qJ(1) * t446 - t406 * t593 + t407 * t595, -qJ(1) * t340 - t308 * t593 + t321 * t595, -t380 * t593 + t382 * t595, -t345 * t593 + t346 * t595, -t360 * t593 + t363 * t595, -t379 * t593 + t381 * t595, -t359 * t593 + t362 * t595, -t417 * t593 + t418 * t595, -qJ(1) * t305 - t251 * t593 + t259 * t595, -qJ(1) * t313 - t260 * t593 + t265 * t595, -qJ(1) * t292 - t233 * t593 + t234 * t595, -qJ(1) * t238 - t222 * t593 + t225 * t595, -t271 * t593 + t273 * t595, -t247 * t593 + t248 * t595, -t276 * t593 + t278 * t595, -t270 * t593 + t272 * t595, -t277 * t593 + t279 * t595, -t310 * t593 + t311 * t595, -qJ(1) * t236 - t212 * t593 + t213 * t595, -qJ(1) * t243 - t214 * t593 + t215 * t595, -qJ(1) * t228 - t205 * t593 + t207 * t595, -qJ(1) * t208 - t203 * t593 + t204 * t595; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t637, -t638, t521, qJ(1) * t521, 0, 0, t669, 0, t515, 0, -t675, t681, t405, pkin(5) * t653 + qJ(1) * t405 + t445 * t595, t497 * t595 + t499 * t593, t471 * t595 + t472 * t593, t493 * t595 + t495 * t593, t496 * t595 + t498 * t593, t492 * t595 + t494 * t593, t531 * t595 + t533 * t593, qJ(1) * t421 + t354 * t595 + t366 * t593, qJ(1) * t422 + t355 * t595 + t367 * t593, qJ(1) * t447 + t406 * t595 + t407 * t593, qJ(1) * t341 + t308 * t595 + t321 * t593, t380 * t595 + t382 * t593, t345 * t595 + t346 * t593, t360 * t595 + t363 * t593, t379 * t595 + t381 * t593, t359 * t595 + t362 * t593, t417 * t595 + t418 * t593, qJ(1) * t306 + t251 * t595 + t259 * t593, qJ(1) * t314 + t260 * t595 + t265 * t593, qJ(1) * t293 + t233 * t595 + t234 * t593, qJ(1) * t239 + t222 * t595 + t225 * t593, t271 * t595 + t273 * t593, t247 * t595 + t248 * t593, t276 * t595 + t278 * t593, t270 * t595 + t272 * t593, t277 * t595 + t279 * t593, t310 * t595 + t311 * t593, qJ(1) * t237 + t212 * t595 + t213 * t593, qJ(1) * t244 + t214 * t595 + t215 * t593, qJ(1) * t229 + t205 * t595 + t207 * t593, qJ(1) * t209 + t203 * t595 + t204 * t593; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t614, t568, 0, 0, 0, 0, 0, 0, 0, qJDD(2), pkin(1) * t565 + t609, -pkin(1) * t564 + t636, 0, -pkin(1) * t458, (t561 + t615) * t598, t560 * t601 + t562 * t598, t573 * t601 + t644, t647, t575 * t598 + t642, 0, pkin(1) * t479 + pkin(2) * t562 + pkin(6) * t527 - t648, pkin(1) * t480 - pkin(2) * t560 + pkin(6) * t529 + t649, pkin(1) * t518 + pkin(2) * t566 + pkin(6) * t563 + t425, pkin(1) * t398 - pkin(2) * t506 + pkin(6) * t425, t462 * t601 + t463 * t598, t413 * t601 + t415 * t598, t451 * t601 + t454 * t598, t460 * t601 + t461 * t598, t450 * t601 + t453 * t598, t484 * t601 + t485 * t598, pkin(1) * t350 - pkin(2) * t465 + pkin(6) * t374 + t356 * t601 + t390 * t598, pkin(1) * t361 - pkin(2) * t468 + pkin(6) * t403 + t365 * t601 + t393 * t598, pkin(1) * t338 - pkin(2) * t464 + pkin(6) * t352 + t300 * t601 + t302 * t598, pkin(1) * t268 - pkin(2) * t444 + pkin(6) * t281 - qJ(4) * t661 + t307 * t601, t324 * t601 + t326 * t598, t286 * t601 + t288 * t598, t334 * t601 + t336 * t598, t323 * t601 + t325 * t598, t335 * t601 + t337 * t598, t357 * t601 + t358 * t598, pkin(1) * t266 - pkin(2) * t384 + pkin(6) * t283 + t250 * t601 + t258 * t598, pkin(1) * t274 - pkin(2) * t670 + pkin(6) * t291 + t256 * t601 + t262 * t598, pkin(1) * t245 - pkin(2) * t410 + pkin(6) * t254 + t223 * t601 + t224 * t598, pkin(1) * t217 - pkin(2) * t383 + pkin(6) * t221 + t216 * t601 + t219 * t598;];
tauB_reg = t1;
