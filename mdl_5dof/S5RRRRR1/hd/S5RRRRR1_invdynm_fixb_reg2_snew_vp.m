% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRRRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d5]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 19:27
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRRRR1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR1_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR1_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR1_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S5RRRRR1_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 19:27:15
% EndTime: 2019-05-04 19:27:33
% DurationCPUTime: 18.56s
% Computational Cost: add. (95773->630), mult. (212323->938), div. (0->0), fcn. (166344->10), ass. (0->477)
t1253 = sin(qJ(3));
t1247 = qJDD(2) + qJDD(3);
t1258 = cos(qJ(3));
t1259 = cos(qJ(2));
t1309 = t1258 * t1259;
t1254 = sin(qJ(2));
t1314 = t1253 * t1254;
t1206 = (-t1309 + t1314) * qJD(1);
t1313 = t1253 * t1259;
t1207 = (-t1254 * t1258 - t1313) * qJD(1);
t1329 = t1206 * t1207;
t1351 = t1247 + t1329;
t1361 = t1253 * t1351;
t1360 = t1258 * t1351;
t1255 = sin(qJ(1));
t1260 = cos(qJ(1));
t1229 = g(1) * t1260 + g(2) * t1255;
t1262 = qJD(1) ^ 2;
t1217 = -pkin(1) * t1262 - t1229;
t1198 = -t1259 * g(3) + t1254 * t1217;
t1237 = t1259 * t1262 * t1254;
t1226 = qJDD(2) + t1237;
t1178 = pkin(2) * t1226 - t1198;
t1199 = t1254 * g(3) + t1259 * t1217;
t1261 = qJD(2) ^ 2;
t1250 = t1259 ^ 2;
t1317 = t1250 * t1262;
t1235 = -t1261 - t1317;
t1184 = pkin(2) * t1235 + t1199;
t1132 = t1253 * t1178 + t1258 * t1184;
t1204 = t1206 ^ 2;
t1248 = qJD(2) + qJD(3);
t1246 = t1248 ^ 2;
t1171 = -t1204 - t1246;
t1107 = pkin(3) * t1171 + t1132;
t1252 = sin(qJ(4));
t1257 = cos(qJ(4));
t1131 = -t1258 * t1178 + t1253 * t1184;
t1265 = pkin(3) * t1351 - t1131;
t1037 = t1252 * t1107 - t1257 * t1265;
t1038 = t1257 * t1107 + t1252 * t1265;
t963 = t1037 * t1257 - t1038 * t1252;
t1359 = t1253 * t963;
t1358 = t1258 * t963;
t1076 = t1131 * t1258 - t1132 * t1253;
t1357 = t1076 * t1254;
t1356 = t1076 * t1259;
t1251 = sin(qJ(5));
t1170 = t1206 * t1252 + t1207 * t1257;
t1338 = qJD(1) * qJD(2);
t1291 = t1259 * t1338;
t1306 = t1254 * qJDD(1);
t1218 = -t1291 - t1306;
t1292 = t1254 * t1338;
t1305 = t1259 * qJDD(1);
t1268 = t1292 - t1305;
t1287 = t1253 * t1218 - t1258 * t1268;
t1150 = -qJD(3) * t1207 - t1287;
t1151 = t1206 * qJD(3) + t1258 * t1218 + t1253 * t1268;
t1288 = -t1257 * t1150 + t1252 * t1151;
t1069 = -qJD(4) * t1170 - t1288;
t1066 = qJDD(5) - t1069;
t1243 = qJD(4) + t1248;
t1256 = cos(qJ(5));
t1145 = t1170 * t1251 - t1256 * t1243;
t1147 = t1170 * t1256 + t1243 * t1251;
t1098 = t1147 * t1145;
t1350 = t1066 - t1098;
t1355 = t1251 * t1350;
t1168 = -t1257 * t1206 + t1207 * t1252;
t1117 = t1170 * t1168;
t1242 = qJDD(4) + t1247;
t1349 = -t1117 + t1242;
t1354 = t1252 * t1349;
t1353 = t1256 * t1350;
t1352 = t1257 * t1349;
t1228 = t1255 * g(1) - t1260 * g(2);
t1216 = qJDD(1) * pkin(1) + t1228;
t1177 = t1216 + (-t1268 - t1292) * pkin(2);
t1321 = t1248 * t1207;
t1096 = t1177 + (-t1150 + t1321) * pkin(3);
t1324 = t1243 * t1170;
t1070 = -t1168 * qJD(4) + t1252 * t1150 + t1257 * t1151;
t1162 = t1243 * t1168;
t1348 = -t1162 + t1070;
t953 = -t1348 * pkin(6) + (-t1069 + t1324) * pkin(4) + t1096;
t1113 = pkin(4) * t1168 - pkin(6) * t1170;
t1346 = t1243 ^ 2;
t999 = -pkin(4) * t1346 + t1242 * pkin(6) - t1168 * t1113 + t1038;
t908 = t1251 * t999 - t1256 * t953;
t909 = t1251 * t953 + t1256 * t999;
t868 = t1251 * t908 + t1256 * t909;
t1200 = t1248 * t1206;
t1347 = t1200 + t1151;
t1143 = t1145 ^ 2;
t1144 = t1147 ^ 2;
t1165 = qJD(5) + t1168;
t1164 = t1165 ^ 2;
t1166 = t1168 ^ 2;
t1167 = t1170 ^ 2;
t1205 = t1207 ^ 2;
t1273 = t1198 * t1259 - t1199 * t1254;
t1345 = pkin(1) * t1273;
t1344 = pkin(2) * t1177;
t1343 = pkin(3) * t1096;
t1342 = pkin(4) * t1252;
t964 = t1037 * t1252 + t1257 * t1038;
t904 = t1253 * t964 - t1358;
t961 = pkin(3) * t963;
t1341 = pkin(2) * t904 - t961;
t1050 = t1162 + t1070;
t1267 = (-qJD(4) + t1243) * t1170 - t1288;
t982 = -t1050 * t1257 + t1252 * t1267;
t984 = t1050 * t1252 + t1257 * t1267;
t916 = t1253 * t984 + t1258 * t982;
t980 = pkin(3) * t982;
t1340 = pkin(2) * t916 + t980;
t998 = -t1242 * pkin(4) - pkin(6) * t1346 + t1113 * t1170 + t1037;
t1339 = -pkin(4) * t998 + pkin(6) * t868;
t995 = t1251 * t998;
t996 = t1256 * t998;
t1029 = t1066 + t1098;
t1337 = t1029 * t1251;
t1336 = t1029 * t1256;
t1110 = t1117 + t1242;
t1335 = t1110 * t1252;
t1334 = t1110 * t1257;
t1333 = t1165 * t1251;
t1332 = t1165 * t1256;
t1173 = -t1329 + t1247;
t1331 = t1173 * t1253;
t1330 = t1173 * t1258;
t1220 = -0.2e1 * t1292 + t1305;
t1185 = t1220 * t1259;
t1328 = t1226 * t1254;
t1327 = t1226 * t1259;
t1227 = qJDD(2) - t1237;
t1326 = t1227 * t1254;
t1325 = t1227 * t1259;
t1323 = t1243 * t1252;
t1322 = t1243 * t1257;
t1320 = t1248 * t1253;
t1319 = t1248 * t1258;
t1249 = t1254 ^ 2;
t1318 = t1249 * t1262;
t1316 = t1252 * t1096;
t1315 = t1253 * t1177;
t1312 = t1254 * t1216;
t1311 = t1257 * t1096;
t1310 = t1258 * t1177;
t1308 = t1259 * t1216;
t1307 = -t1249 - t1250;
t1304 = t1253 * t1343;
t1303 = t1254 * t1344;
t857 = t1252 * t868 - t1257 * t998;
t1302 = pkin(3) * t857 + t1339;
t1274 = -t1256 * t1070 - t1251 * t1242;
t1013 = (qJD(5) + t1165) * t1145 + t1274;
t1091 = -t1144 - t1164;
t979 = -t1091 * t1251 - t1336;
t1301 = pkin(4) * t1013 + pkin(6) * t979 + t995;
t1289 = -t1251 * t1070 + t1256 * t1242;
t1034 = -qJD(5) * t1147 + t1289;
t1106 = t1165 * t1147;
t1009 = t1034 - t1106;
t1078 = -t1164 - t1143;
t969 = t1078 * t1256 - t1355;
t1300 = pkin(4) * t1009 + pkin(6) * t969 - t996;
t1299 = -pkin(4) * t1257 - pkin(3);
t1298 = t1252 * t1098;
t1297 = t1257 * t1098;
t1296 = t1255 * t1117;
t1295 = t1260 * t1117;
t1294 = t1255 * t1329;
t1293 = t1260 * t1329;
t858 = t1252 * t998 + t1257 * t868;
t835 = t1253 * t858 + t1258 * t857;
t1290 = pkin(2) * t835 + t1302;
t1077 = t1131 * t1253 + t1258 * t1132;
t1286 = -t1228 * t1255 - t1260 * t1229;
t1063 = t1143 + t1144;
t1010 = (-qJD(5) + t1165) * t1147 + t1289;
t1035 = -qJD(5) * t1145 - t1274;
t1105 = t1165 * t1145;
t1012 = t1035 + t1105;
t942 = t1010 * t1256 + t1012 * t1251;
t1285 = pkin(4) * t1063 + pkin(6) * t942 + t868;
t931 = t1013 * t1257 + t1252 * t979;
t1284 = pkin(3) * t931 + t1301;
t928 = t1009 * t1257 + t1252 * t969;
t1283 = pkin(3) * t928 + t1300;
t1282 = t1255 * t1237;
t1281 = t1260 * t1237;
t1223 = qJDD(1) * t1260 - t1255 * t1262;
t1280 = -pkin(5) * t1223 - g(3) * t1255;
t929 = -t1009 * t1252 + t1257 * t969;
t879 = t1253 * t929 + t1258 * t928;
t1279 = pkin(2) * t879 + t1283;
t932 = -t1013 * t1252 + t1257 * t979;
t882 = t1253 * t932 + t1258 * t931;
t1278 = pkin(2) * t882 + t1284;
t920 = t1063 * t1257 + t1252 * t942;
t1277 = pkin(3) * t920 + t1285;
t1108 = -t1346 - t1166;
t1055 = t1108 * t1252 + t1352;
t1276 = pkin(3) * t1055 - t1037;
t1114 = t1171 * t1253 + t1360;
t1275 = pkin(2) * t1114 - t1131;
t867 = t1251 * t909 - t1256 * t908;
t1155 = t1198 * t1254 + t1199 * t1259;
t1272 = t1228 * t1260 - t1229 * t1255;
t921 = -t1063 * t1252 + t1257 * t942;
t873 = t1253 * t921 + t1258 * t920;
t1271 = pkin(2) * t873 + t1277;
t1056 = t1108 * t1257 - t1354;
t986 = t1055 * t1258 + t1056 * t1253;
t1270 = pkin(2) * t986 + t1276;
t1193 = -t1205 - t1246;
t1133 = t1193 * t1258 - t1331;
t1269 = pkin(2) * t1133 - t1132;
t1266 = -(qJD(3) - t1248) * t1207 - t1287;
t1148 = -t1167 - t1346;
t1081 = t1148 * t1257 - t1335;
t1264 = pkin(3) * t1081 - t1038;
t1082 = -t1148 * t1252 - t1334;
t1021 = t1081 * t1258 + t1082 * t1253;
t1263 = pkin(2) * t1021 + t1264;
t1234 = -t1261 + t1317;
t1233 = -t1261 - t1318;
t1232 = t1261 - t1318;
t1225 = t1307 * t1262;
t1224 = (t1249 - t1250) * t1262;
t1222 = qJDD(1) * t1255 + t1260 * t1262;
t1221 = t1307 * qJDD(1);
t1219 = -0.2e1 * t1291 - t1306;
t1214 = t1307 * t1338;
t1212 = pkin(1) * t1216;
t1203 = -pkin(5) * t1222 + g(3) * t1260;
t1197 = -t1205 + t1246;
t1196 = t1204 - t1246;
t1195 = t1218 * t1259 + t1249 * t1338;
t1194 = t1250 * t1338 - t1254 * t1268;
t1192 = -t1233 * t1254 - t1325;
t1191 = -t1232 * t1254 + t1327;
t1190 = t1235 * t1259 - t1328;
t1189 = t1234 * t1259 - t1326;
t1188 = -t1232 * t1259 - t1328;
t1187 = -t1234 * t1254 - t1325;
t1186 = (-t1218 + t1291) * t1254;
t1183 = pkin(1) * t1220 + t1308;
t1182 = pkin(1) * t1219 - t1312;
t1181 = -t1219 * t1254 - t1185;
t1180 = -t1219 * t1259 + t1220 * t1254;
t1176 = t1205 - t1204;
t1161 = -t1167 + t1346;
t1160 = t1166 - t1346;
t1159 = (t1206 * t1258 + t1207 * t1253) * t1248;
t1158 = (t1206 * t1253 - t1207 * t1258) * t1248;
t1157 = -pkin(1) * (-t1233 * t1259 + t1326) - t1199;
t1156 = -pkin(1) * (-t1235 * t1254 - t1327) - t1198;
t1152 = -t1204 - t1205;
t1139 = pkin(1) * t1225 - t1155;
t1138 = t1196 * t1258 - t1331;
t1137 = -t1197 * t1253 + t1360;
t1136 = t1196 * t1253 + t1330;
t1135 = t1197 * t1258 + t1361;
t1134 = -t1193 * t1253 - t1330;
t1130 = -t1200 + t1151;
t1125 = -(-qJD(3) - t1248) * t1207 + t1287;
t1122 = (pkin(2) * t1259 + pkin(1)) * t1177;
t1121 = t1151 * t1258 - t1207 * t1320;
t1120 = t1151 * t1253 + t1207 * t1319;
t1119 = -t1150 * t1253 - t1206 * t1319;
t1118 = t1150 * t1258 - t1206 * t1320;
t1116 = t1167 - t1166;
t1115 = t1171 * t1258 - t1361;
t1104 = -t1144 + t1164;
t1103 = t1143 - t1164;
t1102 = (-t1168 * t1257 + t1170 * t1252) * t1243;
t1101 = (-t1168 * t1252 - t1170 * t1257) * t1243;
t1100 = -t1158 * t1254 + t1159 * t1259;
t1099 = -t1158 * t1259 - t1159 * t1254;
t1097 = t1144 - t1143;
t1095 = -pkin(2) * t1125 - t1310;
t1094 = -pkin(2) * t1347 + t1315;
t1092 = -t1166 - t1167;
t1090 = -t1136 * t1254 + t1138 * t1259;
t1089 = -t1135 * t1254 + t1137 * t1259;
t1088 = -t1136 * t1259 - t1138 * t1254;
t1087 = -t1135 * t1259 - t1137 * t1254;
t1086 = t1160 * t1257 - t1335;
t1085 = -t1161 * t1252 + t1352;
t1084 = t1160 * t1252 + t1334;
t1083 = t1161 * t1257 + t1354;
t1079 = -t1133 * t1254 + t1134 * t1259;
t1075 = -t1125 * t1258 - t1253 * t1347;
t1074 = t1130 * t1253 + t1258 * t1266;
t1072 = -t1125 * t1253 + t1258 * t1347;
t1071 = -t1130 * t1258 + t1253 * t1266;
t1068 = pkin(2) * t1076;
t1067 = pkin(2) * t1071;
t1065 = -t1094 * t1254 + t1177 * t1309;
t1064 = -t1095 * t1254 + t1177 * t1313;
t1061 = -t1120 * t1254 + t1121 * t1259;
t1060 = -t1118 * t1254 + t1119 * t1259;
t1059 = -t1120 * t1259 - t1121 * t1254;
t1058 = -t1118 * t1259 - t1119 * t1254;
t1057 = -t1114 * t1254 + t1115 * t1259;
t1053 = (-t1145 * t1251 - t1147 * t1256) * t1165;
t1052 = (-t1145 * t1256 + t1147 * t1251) * t1165;
t1046 = (qJD(4) + t1243) * t1170 + t1288;
t1045 = -pkin(2) * t1152 + t1077;
t1044 = -t1101 * t1253 + t1102 * t1258;
t1043 = t1101 * t1258 + t1102 * t1253;
t1042 = t1070 * t1257 - t1170 * t1323;
t1041 = t1070 * t1252 + t1170 * t1322;
t1040 = -t1069 * t1252 + t1168 * t1322;
t1039 = t1069 * t1257 + t1168 * t1323;
t1033 = (-pkin(3) * t1258 - pkin(2)) * t1096;
t1032 = pkin(1) * t1347 - t1094 * t1259 - t1254 * t1310;
t1031 = pkin(1) * t1125 - t1095 * t1259 - t1177 * t1314;
t1027 = -t1084 * t1253 + t1086 * t1258;
t1026 = -t1083 * t1253 + t1085 * t1258;
t1025 = t1084 * t1258 + t1086 * t1253;
t1024 = t1083 * t1258 + t1085 * t1253;
t1023 = -pkin(1) * (-t1133 * t1259 - t1134 * t1254) + t1269;
t1022 = -t1081 * t1253 + t1082 * t1258;
t1019 = t1077 * t1259 + t1357;
t1018 = -t1072 * t1254 + t1075 * t1259;
t1017 = -t1071 * t1254 + t1074 * t1259;
t1016 = -t1072 * t1259 - t1075 * t1254;
t1015 = -pkin(3) * t1046 - t1311;
t1014 = -pkin(3) * t1348 + t1316;
t1011 = t1035 - t1105;
t1008 = -t1034 - t1106;
t1005 = t1035 * t1256 - t1147 * t1333;
t1004 = t1034 * t1256 + t1145 * t1333;
t1003 = t1035 * t1251 + t1147 * t1332;
t1002 = -t1034 * t1251 + t1145 * t1332;
t1001 = -pkin(1) * (-t1114 * t1259 - t1115 * t1254) + t1275;
t1000 = -t1033 * t1254 + t1259 * t1304;
t994 = t1052 * t1257 + t1066 * t1252;
t993 = t1052 * t1252 - t1066 * t1257;
t992 = -t1045 * t1254 + t1356;
t991 = t1104 * t1256 + t1355;
t990 = t1103 * t1256 - t1337;
t989 = t1103 * t1251 + t1336;
t988 = -t1104 * t1251 + t1353;
t987 = -t1055 * t1253 + t1056 * t1258;
t983 = -t1046 * t1257 - t1252 * t1348;
t981 = -t1046 * t1252 + t1257 * t1348;
t978 = t1091 * t1256 - t1337;
t976 = pkin(1) * t1152 - t1045 * t1259 - t1357;
t975 = -t1043 * t1254 + t1044 * t1259;
t974 = -t1043 * t1259 - t1044 * t1254;
t973 = -t1041 * t1253 + t1042 * t1258;
t972 = -t1039 * t1253 + t1040 * t1258;
t971 = t1041 * t1258 + t1042 * t1253;
t970 = t1039 * t1258 + t1040 * t1253;
t968 = t1078 * t1251 + t1353;
t966 = -t1014 * t1253 + t1258 * t1311;
t965 = -t1015 * t1253 + t1258 * t1316;
t960 = t1005 * t1257 + t1298;
t959 = t1002 * t1257 - t1298;
t958 = t1005 * t1252 - t1297;
t957 = t1002 * t1252 + t1297;
t956 = -t1259 * t1033 + (-pkin(3) * t1314 + pkin(1)) * t1096;
t955 = -pkin(1) * (-t1077 * t1254 + t1356) - t1068;
t954 = -pkin(1) * (-t1071 * t1259 - t1074 * t1254) + t1067;
t951 = -pkin(3) * t1092 + t964;
t950 = -t1025 * t1254 + t1027 * t1259;
t949 = -t1024 * t1254 + t1026 * t1259;
t948 = -t1025 * t1259 - t1027 * t1254;
t947 = -t1024 * t1259 - t1026 * t1254;
t946 = -t1021 * t1254 + t1022 * t1259;
t945 = -pkin(2) * t1348 + t1014 * t1258 + t1253 * t1311;
t944 = -pkin(2) * t1046 + t1015 * t1258 + t1253 * t1316;
t943 = t1009 * t1251 + t1011 * t1256;
t941 = t1009 * t1256 - t1011 * t1251;
t940 = t1010 * t1251 - t1012 * t1256;
t938 = -t1008 * t1252 + t1257 * t990;
t937 = t1012 * t1252 + t1257 * t988;
t936 = t1008 * t1257 + t1252 * t990;
t935 = -t1012 * t1257 + t1252 * t988;
t934 = -t1253 * t993 + t1258 * t994;
t933 = t1253 * t994 + t1258 * t993;
t926 = -t1254 * t986 + t1259 * t987;
t925 = t1097 * t1252 + t1257 * t941;
t924 = -t1097 * t1257 + t1252 * t941;
t923 = -pkin(6) * t978 + t996;
t922 = -pkin(6) * t968 + t995;
t918 = -t1253 * t982 + t1258 * t984;
t917 = -t1253 * t981 + t1258 * t983;
t915 = t1253 * t983 + t1258 * t981;
t913 = -t1254 * t971 + t1259 * t973;
t912 = -t1254 * t970 + t1259 * t972;
t911 = -t1254 * t973 - t1259 * t971;
t910 = -t1254 * t972 - t1259 * t970;
t905 = t1258 * t964 + t1359;
t902 = -t1253 * t958 + t1258 * t960;
t901 = -t1253 * t957 + t1258 * t959;
t900 = t1253 * t960 + t1258 * t958;
t899 = t1253 * t959 + t1258 * t957;
t898 = -t1253 * t951 + t1358;
t897 = -t1254 * t945 + t1259 * t966;
t896 = -t1254 * t944 + t1259 * t965;
t895 = -pkin(2) * t1092 + t1258 * t951 + t1359;
t894 = pkin(1) * t1348 - t1254 * t966 - t1259 * t945;
t893 = pkin(1) * t1046 - t1254 * t965 - t1259 * t944;
t892 = -pkin(4) * t978 + t909;
t891 = -pkin(1) * (-t1021 * t1259 - t1022 * t1254) + t1263;
t890 = -pkin(4) * t968 + t908;
t889 = -t1253 * t936 + t1258 * t938;
t888 = -t1253 * t935 + t1258 * t937;
t887 = t1253 * t938 + t1258 * t936;
t886 = t1253 * t937 + t1258 * t935;
t885 = -t1254 * t933 + t1259 * t934;
t884 = -t1254 * t934 - t1259 * t933;
t883 = -t1253 * t931 + t1258 * t932;
t880 = -t1253 * t928 + t1258 * t929;
t877 = -t1253 * t924 + t1258 * t925;
t876 = t1253 * t925 + t1258 * t924;
t875 = -pkin(1) * (-t1254 * t987 - t1259 * t986) + t1270;
t874 = -t1253 * t920 + t1258 * t921;
t871 = -t1254 * t916 + t1259 * t918;
t870 = -t1254 * t915 + t1259 * t917;
t869 = -t1254 * t917 - t1259 * t915;
t865 = -t1254 * t904 + t1259 * t905;
t864 = -t1254 * t900 + t1259 * t902;
t863 = -t1254 * t899 + t1259 * t901;
t862 = -t1254 * t902 - t1259 * t900;
t861 = -t1254 * t901 - t1259 * t899;
t860 = -t1252 * t892 + t1257 * t923;
t859 = -t1252 * t890 + t1257 * t922;
t855 = -t1254 * t895 + t1259 * t898;
t854 = pkin(1) * t1092 - t1254 * t898 - t1259 * t895;
t853 = -pkin(6) * t940 - t867;
t852 = -pkin(3) * t978 + t1252 * t923 + t1257 * t892;
t851 = -pkin(3) * t968 + t1252 * t922 + t1257 * t890;
t850 = -t1254 * t887 + t1259 * t889;
t849 = -t1254 * t886 + t1259 * t888;
t848 = -t1254 * t889 - t1259 * t887;
t847 = -t1254 * t888 - t1259 * t886;
t846 = -pkin(1) * (-t1254 * t918 - t1259 * t916) + t1340;
t845 = -t1254 * t882 + t1259 * t883;
t844 = -t1254 * t879 + t1259 * t880;
t843 = t1257 * t853 + t1342 * t940;
t842 = -t1254 * t876 + t1259 * t877;
t841 = -t1254 * t877 - t1259 * t876;
t840 = -pkin(1) * (-t1254 * t905 - t1259 * t904) + t1341;
t839 = -t1254 * t873 + t1259 * t874;
t838 = (-pkin(6) * t1257 + t1342) * t867;
t837 = t1252 * t853 + t1299 * t940;
t836 = -t1253 * t857 + t1258 * t858;
t833 = -t1253 * t852 + t1258 * t860;
t832 = -t1253 * t851 + t1258 * t859;
t831 = -pkin(2) * t978 + t1253 * t860 + t1258 * t852;
t830 = -pkin(2) * t968 + t1253 * t859 + t1258 * t851;
t829 = (-pkin(6) * t1252 + t1299) * t867;
t828 = -pkin(1) * (-t1254 * t883 - t1259 * t882) + t1278;
t827 = -pkin(1) * (-t1254 * t880 - t1259 * t879) + t1279;
t826 = -t1253 * t837 + t1258 * t843;
t825 = -pkin(2) * t940 + t1253 * t843 + t1258 * t837;
t824 = -pkin(1) * (-t1254 * t874 - t1259 * t873) + t1271;
t823 = -t1254 * t835 + t1259 * t836;
t822 = -t1253 * t829 + t1258 * t838;
t821 = -t1254 * t831 + t1259 * t833;
t820 = -t1254 * t830 + t1259 * t832;
t819 = pkin(1) * t978 - t1254 * t833 - t1259 * t831;
t818 = pkin(1) * t968 - t1254 * t832 - t1259 * t830;
t817 = -pkin(2) * t867 + t1253 * t838 + t1258 * t829;
t816 = -t1254 * t825 + t1259 * t826;
t815 = pkin(1) * t940 - t1254 * t826 - t1259 * t825;
t814 = -pkin(1) * (-t1254 * t836 - t1259 * t835) + t1290;
t813 = -t1254 * t817 + t1259 * t822;
t812 = pkin(1) * t867 - t1254 * t822 - t1259 * t817;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1223, 0, -t1222, 0, t1280, -t1203, -t1272, -pkin(5) * t1272, t1195 * t1260 + t1282, t1181 * t1260 - t1224 * t1255, t1191 * t1260 + t1255 * t1306, t1194 * t1260 - t1282, t1189 * t1260 + t1255 * t1305, -qJDD(2) * t1255 + t1214 * t1260, t1260 * t1312 - t1255 * t1156 - pkin(5) * (t1190 * t1255 + t1220 * t1260), t1260 * t1308 - t1255 * t1157 - pkin(5) * (t1192 * t1255 + t1219 * t1260), t1260 * t1273 - pkin(5) * (t1221 * t1255 + t1225 * t1260), t1255 * t1345 - pkin(5) * (t1155 * t1255 + t1216 * t1260), t1061 * t1260 + t1294, t1018 * t1260 - t1176 * t1255, t1089 * t1260 - t1130 * t1255, t1060 * t1260 - t1294, t1090 * t1260 - t1255 * t1266, t1100 * t1260 - t1247 * t1255, t1260 * t1064 - t1255 * t1001 - pkin(5) * (t1057 * t1255 + t1125 * t1260), t1260 * t1065 - t1255 * t1023 - pkin(5) * (t1079 * t1255 + t1260 * t1347), t1260 * t992 - t1255 * t954 - pkin(5) * (t1017 * t1255 + t1152 * t1260), t1260 * t1303 - t1255 * t955 - pkin(5) * (t1019 * t1255 + t1177 * t1260), t1260 * t913 - t1296, -t1116 * t1255 + t1260 * t870, -t1050 * t1255 + t1260 * t949, t1260 * t912 + t1296, -t1255 * t1267 + t1260 * t950, -t1242 * t1255 + t1260 * t975, t1260 * t896 - t1255 * t875 - pkin(5) * (t1046 * t1260 + t1255 * t926), t1260 * t897 - t1255 * t891 - pkin(5) * (t1255 * t946 + t1260 * t1348), t1260 * t855 - t1255 * t846 - pkin(5) * (t1092 * t1260 + t1255 * t871), t1260 * t1000 - t1255 * t840 - pkin(5) * (t1096 * t1260 + t1255 * t865), -t1003 * t1255 + t1260 * t864, -t1255 * t943 + t1260 * t842, -t1255 * t991 + t1260 * t849, -t1004 * t1255 + t1260 * t863, -t1255 * t989 + t1260 * t850, -t1053 * t1255 + t1260 * t885, t1260 * t820 - t1255 * t827 - pkin(5) * (t1255 * t844 + t1260 * t968), t1260 * t821 - t1255 * t828 - pkin(5) * (t1255 * t845 + t1260 * t978), t1260 * t816 - t1255 * t824 - pkin(5) * (t1255 * t839 + t1260 * t940), t1260 * t813 - t1255 * t814 - pkin(5) * (t1255 * t823 + t1260 * t867); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1222, 0, t1223, 0, t1203, t1280, t1286, pkin(5) * t1286, t1195 * t1255 - t1281, t1181 * t1255 + t1224 * t1260, t1191 * t1255 - t1260 * t1306, t1194 * t1255 + t1281, t1189 * t1255 - t1260 * t1305, qJDD(2) * t1260 + t1214 * t1255, t1255 * t1312 + t1260 * t1156 + pkin(5) * (t1190 * t1260 - t1220 * t1255), t1255 * t1308 + t1260 * t1157 + pkin(5) * (t1192 * t1260 - t1219 * t1255), t1255 * t1273 + pkin(5) * (t1221 * t1260 - t1225 * t1255), -t1260 * t1345 + pkin(5) * (t1155 * t1260 - t1216 * t1255), t1061 * t1255 - t1293, t1018 * t1255 + t1176 * t1260, t1089 * t1255 + t1130 * t1260, t1060 * t1255 + t1293, t1090 * t1255 + t1260 * t1266, t1100 * t1255 + t1247 * t1260, t1255 * t1064 + t1260 * t1001 + pkin(5) * (t1057 * t1260 - t1125 * t1255), t1255 * t1065 + t1260 * t1023 + pkin(5) * (t1079 * t1260 - t1255 * t1347), t1255 * t992 + t1260 * t954 + pkin(5) * (t1017 * t1260 - t1152 * t1255), t1255 * t1303 + t1260 * t955 + pkin(5) * (t1019 * t1260 - t1177 * t1255), t1255 * t913 + t1295, t1116 * t1260 + t1255 * t870, t1050 * t1260 + t1255 * t949, t1255 * t912 - t1295, t1255 * t950 + t1260 * t1267, t1242 * t1260 + t1255 * t975, t1255 * t896 + t1260 * t875 + pkin(5) * (-t1046 * t1255 + t1260 * t926), t1255 * t897 + t1260 * t891 + pkin(5) * (-t1255 * t1348 + t1260 * t946), t1255 * t855 + t1260 * t846 + pkin(5) * (-t1092 * t1255 + t1260 * t871), t1255 * t1000 + t1260 * t840 + pkin(5) * (-t1096 * t1255 + t1260 * t865), t1003 * t1260 + t1255 * t864, t1255 * t842 + t1260 * t943, t1255 * t849 + t1260 * t991, t1004 * t1260 + t1255 * t863, t1255 * t850 + t1260 * t989, t1053 * t1260 + t1255 * t885, t1255 * t820 + t1260 * t827 + pkin(5) * (-t1255 * t968 + t1260 * t844), t1255 * t821 + t1260 * t828 + pkin(5) * (-t1255 * t978 + t1260 * t845), t1255 * t816 + t1260 * t824 + pkin(5) * (-t1255 * t940 + t1260 * t839), t1255 * t813 + t1260 * t814 + pkin(5) * (-t1255 * t867 + t1260 * t823); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1228, t1229, 0, 0, t1186, t1180, t1188, t1185, t1187, 0, t1183, t1182, t1139, t1212, t1059, t1016, t1087, t1058, t1088, t1099, t1031, t1032, t976, t1122, t911, t869, t947, t910, t948, t974, t893, t894, t854, t956, t862, t841, t847, t861, t848, t884, t818, t819, t815, t812; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1262, 0, 0, -g(3), -t1228, 0, t1195, t1181, t1191, t1194, t1189, t1214, t1312, t1308, t1273, 0, t1061, t1018, t1089, t1060, t1090, t1100, t1064, t1065, t992, t1303, t913, t870, t949, t912, t950, t975, t896, t897, t855, t1000, t864, t842, t849, t863, t850, t885, t820, t821, t816, t813; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1262, 0, qJDD(1), 0, g(3), 0, -t1229, 0, -t1237, t1224, -t1306, t1237, -t1305, qJDD(2), t1156, t1157, 0, -t1345, -t1329, t1176, t1130, t1329, t1266, t1247, t1001, t1023, t954, t955, t1117, t1116, t1050, -t1117, t1267, t1242, t875, t891, t846, t840, t1003, t943, t991, t1004, t989, t1053, t827, t828, t824, t814; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1228, t1229, 0, 0, t1186, t1180, t1188, t1185, t1187, 0, t1183, t1182, t1139, t1212, t1059, t1016, t1087, t1058, t1088, t1099, t1031, t1032, t976, t1122, t911, t869, t947, t910, t948, t974, t893, t894, t854, t956, t862, t841, t847, t861, t848, t884, t818, t819, t815, t812; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1218, -t1220, t1226, t1291, t1234, -t1291, 0, t1216, t1198, 0, t1121, t1075, t1137, t1119, t1138, t1159, t1315, t1310, t1076, 0, t973, t917, t1026, t972, t1027, t1044, t965, t966, t898, t1304, t902, t877, t888, t901, t889, t934, t832, t833, t826, t822; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1292, t1219, t1232, t1268, t1227, t1292, -t1216, 0, t1199, 0, t1120, t1072, t1135, t1118, t1136, t1158, t1095, t1094, t1045, -t1344, t971, t915, t1024, t970, t1025, t1043, t944, t945, t895, t1033, t900, t876, t886, t899, t887, t933, t830, t831, t825, t817; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1237, t1224, -t1306, t1237, -t1305, qJDD(2), -t1198, -t1199, 0, 0, -t1329, t1176, t1130, t1329, t1266, t1247, t1275, t1269, t1067, -t1068, t1117, t1116, t1050, -t1117, t1267, t1242, t1270, t1263, t1340, t1341, t1003, t943, t991, t1004, t989, t1053, t1279, t1278, t1271, t1290; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1151, -t1125, t1351, -t1200, t1196, t1200, 0, t1177, t1131, 0, t1042, t983, t1085, t1040, t1086, t1102, t1316, t1311, t963, 0, t960, t925, t937, t959, t938, t994, t859, t860, t843, t838; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1321, t1347, t1197, t1150, t1173, -t1321, -t1177, 0, t1132, 0, t1041, t981, t1083, t1039, t1084, t1101, t1015, t1014, t951, -t1343, t958, t924, t935, t957, t936, t993, t851, t852, t837, t829; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1329, t1176, t1130, t1329, t1266, t1247, -t1131, -t1132, 0, 0, t1117, t1116, t1050, -t1117, t1267, t1242, t1276, t1264, t980, -t961, t1003, t943, t991, t1004, t989, t1053, t1283, t1284, t1277, t1302; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1070, -t1046, t1349, t1162, t1160, -t1162, 0, t1096, t1037, 0, t1005, t941, t988, t1002, t990, t1052, t922, t923, t853, -pkin(6) * t867; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1324, t1348, t1161, t1069, t1110, -t1324, -t1096, 0, t1038, 0, -t1098, -t1097, -t1012, t1098, t1008, -t1066, t890, t892, -pkin(4) * t940, -pkin(4) * t867; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1117, t1116, t1050, -t1117, t1267, t1242, -t1037, -t1038, 0, 0, t1003, t943, t991, t1004, t989, t1053, t1300, t1301, t1285, t1339; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1035, t1009, t1350, t1105, t1103, -t1105, 0, t998, t908, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1106, t1011, t1104, t1034, t1029, -t1106, -t998, 0, t909, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1098, t1097, t1012, -t1098, -t1008, t1066, -t908, -t909, 0, 0;];
m_new_reg  = t1;
