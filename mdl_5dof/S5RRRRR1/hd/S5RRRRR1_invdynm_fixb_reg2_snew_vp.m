% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRRRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d5]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:52
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRRRR1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR1_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR1_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR1_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S5RRRRR1_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:51:38
% EndTime: 2019-12-05 18:51:56
% DurationCPUTime: 19.22s
% Computational Cost: add. (95773->630), mult. (212323->938), div. (0->0), fcn. (166344->10), ass. (0->479)
t1252 = sin(qJ(3));
t1246 = qJDD(2) + qJDD(3);
t1257 = cos(qJ(3));
t1258 = cos(qJ(2));
t1312 = t1257 * t1258;
t1253 = sin(qJ(2));
t1319 = t1252 * t1253;
t1205 = (-t1312 + t1319) * qJD(1);
t1318 = t1252 * t1258;
t1206 = (-t1253 * t1257 - t1318) * qJD(1);
t1330 = t1205 * t1206;
t1352 = t1246 + t1330;
t1362 = t1252 * t1352;
t1361 = t1257 * t1352;
t1254 = sin(qJ(1));
t1259 = cos(qJ(1));
t1228 = t1259 * g(1) + t1254 * g(2);
t1261 = qJD(1) ^ 2;
t1216 = -t1261 * pkin(1) - t1228;
t1197 = -t1258 * g(3) + t1253 * t1216;
t1236 = t1258 * t1261 * t1253;
t1225 = qJDD(2) + t1236;
t1177 = t1225 * pkin(2) - t1197;
t1198 = t1253 * g(3) + t1258 * t1216;
t1260 = qJD(2) ^ 2;
t1249 = t1258 ^ 2;
t1322 = t1249 * t1261;
t1234 = -t1260 - t1322;
t1183 = pkin(2) * t1234 + t1198;
t1131 = t1252 * t1177 + t1257 * t1183;
t1203 = t1205 ^ 2;
t1247 = qJD(2) + qJD(3);
t1245 = t1247 ^ 2;
t1170 = -t1203 - t1245;
t1106 = t1170 * pkin(3) + t1131;
t1251 = sin(qJ(4));
t1256 = cos(qJ(4));
t1130 = -t1257 * t1177 + t1252 * t1183;
t1264 = pkin(3) * t1352 - t1130;
t1036 = t1251 * t1106 - t1256 * t1264;
t1037 = t1256 * t1106 + t1251 * t1264;
t962 = t1036 * t1256 - t1037 * t1251;
t1360 = t1252 * t962;
t1359 = t1257 * t962;
t1075 = t1130 * t1257 - t1131 * t1252;
t1358 = t1075 * t1253;
t1357 = t1075 * t1258;
t1250 = sin(qJ(5));
t1169 = t1251 * t1205 + t1256 * t1206;
t1339 = qJD(1) * qJD(2);
t1290 = t1258 * t1339;
t1307 = t1253 * qJDD(1);
t1217 = -t1290 - t1307;
t1291 = t1253 * t1339;
t1305 = t1258 * qJDD(1);
t1267 = t1291 - t1305;
t1286 = t1252 * t1217 - t1257 * t1267;
t1149 = -t1206 * qJD(3) - t1286;
t1150 = t1205 * qJD(3) + t1257 * t1217 + t1252 * t1267;
t1287 = -t1256 * t1149 + t1251 * t1150;
t1068 = -qJD(4) * t1169 - t1287;
t1065 = qJDD(5) - t1068;
t1242 = qJD(4) + t1247;
t1255 = cos(qJ(5));
t1144 = t1169 * t1250 - t1255 * t1242;
t1146 = t1169 * t1255 + t1242 * t1250;
t1097 = t1146 * t1144;
t1351 = t1065 - t1097;
t1356 = t1250 * t1351;
t1167 = -t1256 * t1205 + t1251 * t1206;
t1116 = t1169 * t1167;
t1241 = qJDD(4) + t1246;
t1350 = -t1116 + t1241;
t1355 = t1251 * t1350;
t1354 = t1255 * t1351;
t1353 = t1256 * t1350;
t1227 = t1254 * g(1) - t1259 * g(2);
t1215 = qJDD(1) * pkin(1) + t1227;
t1176 = t1215 + (-t1267 - t1291) * pkin(2);
t1326 = t1247 * t1206;
t1095 = t1176 + (-t1149 + t1326) * pkin(3);
t1329 = t1242 * t1169;
t1069 = -t1167 * qJD(4) + t1251 * t1149 + t1256 * t1150;
t1161 = t1242 * t1167;
t1349 = -t1161 + t1069;
t952 = -t1349 * pkin(6) + (-t1068 + t1329) * pkin(4) + t1095;
t1112 = pkin(4) * t1167 - pkin(6) * t1169;
t1347 = t1242 ^ 2;
t998 = -t1347 * pkin(4) + t1241 * pkin(6) - t1167 * t1112 + t1037;
t907 = t1250 * t998 - t1255 * t952;
t908 = t1250 * t952 + t1255 * t998;
t867 = t1250 * t907 + t1255 * t908;
t1199 = t1247 * t1205;
t1348 = t1199 + t1150;
t1142 = t1144 ^ 2;
t1143 = t1146 ^ 2;
t1164 = qJD(5) + t1167;
t1163 = t1164 ^ 2;
t1165 = t1167 ^ 2;
t1166 = t1169 ^ 2;
t1204 = t1206 ^ 2;
t1272 = t1258 * t1197 - t1253 * t1198;
t1346 = pkin(1) * t1272;
t1345 = pkin(2) * t1176;
t1344 = pkin(3) * t1095;
t1343 = pkin(4) * t1251;
t963 = t1036 * t1251 + t1256 * t1037;
t903 = t1252 * t963 - t1359;
t960 = pkin(3) * t962;
t1342 = pkin(2) * t903 - t960;
t1049 = t1161 + t1069;
t1266 = (-qJD(4) + t1242) * t1169 - t1287;
t981 = -t1049 * t1256 + t1251 * t1266;
t983 = t1049 * t1251 + t1256 * t1266;
t915 = t1252 * t983 + t1257 * t981;
t979 = pkin(3) * t981;
t1341 = pkin(2) * t915 + t979;
t997 = -t1241 * pkin(4) - t1347 * pkin(6) + t1112 * t1169 + t1036;
t1340 = -pkin(4) * t997 + pkin(6) * t867;
t994 = t1250 * t997;
t995 = t1255 * t997;
t1028 = t1065 + t1097;
t1338 = t1028 * t1250;
t1337 = t1028 * t1255;
t1109 = t1116 + t1241;
t1336 = t1109 * t1251;
t1335 = t1109 * t1256;
t1334 = t1164 * t1250;
t1333 = t1164 * t1255;
t1172 = -t1330 + t1246;
t1332 = t1172 * t1252;
t1331 = t1172 * t1257;
t1328 = t1242 * t1251;
t1327 = t1242 * t1256;
t1325 = t1247 * t1252;
t1324 = t1247 * t1257;
t1248 = t1253 ^ 2;
t1323 = t1248 * t1261;
t1321 = t1251 * t1095;
t1320 = t1252 * t1176;
t1317 = t1253 * t1215;
t1316 = t1253 * t1225;
t1226 = qJDD(2) - t1236;
t1315 = t1253 * t1226;
t1314 = t1256 * t1095;
t1313 = t1257 * t1176;
t1311 = t1258 * t1215;
t1219 = -0.2e1 * t1291 + t1305;
t1184 = t1258 * t1219;
t1310 = t1258 * t1225;
t1309 = t1258 * t1226;
t1308 = -t1248 - t1249;
t1306 = t1254 * qJDD(1);
t1304 = t1259 * qJDD(1);
t1303 = t1252 * t1344;
t1302 = t1253 * t1345;
t856 = t1251 * t867 - t1256 * t997;
t1301 = pkin(3) * t856 + t1340;
t1273 = -t1255 * t1069 - t1250 * t1241;
t1012 = (qJD(5) + t1164) * t1144 + t1273;
t1090 = -t1143 - t1163;
t978 = -t1090 * t1250 - t1337;
t1300 = pkin(4) * t1012 + pkin(6) * t978 + t994;
t1288 = -t1250 * t1069 + t1255 * t1241;
t1033 = -qJD(5) * t1146 + t1288;
t1105 = t1164 * t1146;
t1008 = t1033 - t1105;
t1077 = -t1163 - t1142;
t968 = t1077 * t1255 - t1356;
t1299 = pkin(4) * t1008 + pkin(6) * t968 - t995;
t1298 = -pkin(4) * t1256 - pkin(3);
t1297 = t1251 * t1097;
t1296 = t1256 * t1097;
t1295 = t1254 * t1116;
t1294 = t1259 * t1116;
t1293 = t1254 * t1330;
t1292 = t1259 * t1330;
t857 = t1251 * t997 + t1256 * t867;
t834 = t1252 * t857 + t1257 * t856;
t1289 = pkin(2) * t834 + t1301;
t1076 = t1130 * t1252 + t1257 * t1131;
t1285 = -t1227 * t1254 - t1259 * t1228;
t1062 = t1142 + t1143;
t1009 = (-qJD(5) + t1164) * t1146 + t1288;
t1034 = -qJD(5) * t1144 - t1273;
t1104 = t1164 * t1144;
t1011 = t1034 + t1104;
t942 = t1009 * t1255 + t1011 * t1250;
t1284 = pkin(4) * t1062 + pkin(6) * t942 + t867;
t930 = t1012 * t1256 + t1251 * t978;
t1283 = pkin(3) * t930 + t1300;
t927 = t1008 * t1256 + t1251 * t968;
t1282 = pkin(3) * t927 + t1299;
t1281 = t1254 * t1236;
t1280 = t1259 * t1236;
t1222 = -t1254 * t1261 + t1304;
t1279 = -pkin(5) * t1222 - g(3) * t1254;
t928 = -t1008 * t1251 + t1256 * t968;
t878 = t1252 * t928 + t1257 * t927;
t1278 = pkin(2) * t878 + t1282;
t931 = -t1012 * t1251 + t1256 * t978;
t881 = t1252 * t931 + t1257 * t930;
t1277 = pkin(2) * t881 + t1283;
t919 = t1062 * t1256 + t1251 * t942;
t1276 = pkin(3) * t919 + t1284;
t1107 = -t1347 - t1165;
t1054 = t1107 * t1251 + t1353;
t1275 = pkin(3) * t1054 - t1036;
t1113 = t1170 * t1252 + t1361;
t1274 = pkin(2) * t1113 - t1130;
t866 = t1250 * t908 - t1255 * t907;
t1154 = t1253 * t1197 + t1258 * t1198;
t1271 = t1227 * t1259 - t1228 * t1254;
t920 = -t1062 * t1251 + t1256 * t942;
t872 = t1252 * t920 + t1257 * t919;
t1270 = pkin(2) * t872 + t1276;
t1055 = t1107 * t1256 - t1355;
t985 = t1054 * t1257 + t1055 * t1252;
t1269 = pkin(2) * t985 + t1275;
t1192 = -t1204 - t1245;
t1132 = t1192 * t1257 - t1332;
t1268 = pkin(2) * t1132 - t1131;
t1265 = -(qJD(3) - t1247) * t1206 - t1286;
t1147 = -t1166 - t1347;
t1080 = t1147 * t1256 - t1336;
t1263 = pkin(3) * t1080 - t1037;
t1081 = -t1147 * t1251 - t1335;
t1020 = t1080 * t1257 + t1081 * t1252;
t1262 = pkin(2) * t1020 + t1263;
t1233 = -t1260 + t1322;
t1232 = -t1260 - t1323;
t1231 = t1260 - t1323;
t1224 = t1308 * t1261;
t1223 = (t1248 - t1249) * t1261;
t1221 = t1259 * t1261 + t1306;
t1220 = t1308 * qJDD(1);
t1218 = -0.2e1 * t1290 - t1307;
t1213 = t1308 * t1339;
t1211 = pkin(1) * t1215;
t1202 = -pkin(5) * t1221 + t1259 * g(3);
t1196 = -t1204 + t1245;
t1195 = t1203 - t1245;
t1194 = t1258 * t1217 + t1248 * t1339;
t1193 = t1249 * t1339 - t1253 * t1267;
t1191 = -t1253 * t1232 - t1309;
t1190 = -t1253 * t1231 + t1310;
t1189 = t1258 * t1234 - t1316;
t1188 = t1258 * t1233 - t1315;
t1187 = -t1258 * t1231 - t1316;
t1186 = -t1253 * t1233 - t1309;
t1185 = (-t1217 + t1290) * t1253;
t1182 = pkin(1) * t1219 + t1311;
t1181 = pkin(1) * t1218 - t1317;
t1180 = -t1253 * t1218 - t1184;
t1179 = -t1258 * t1218 + t1253 * t1219;
t1175 = t1204 - t1203;
t1160 = -t1166 + t1347;
t1159 = t1165 - t1347;
t1158 = (t1205 * t1257 + t1206 * t1252) * t1247;
t1157 = (t1205 * t1252 - t1206 * t1257) * t1247;
t1156 = -pkin(1) * (-t1258 * t1232 + t1315) - t1198;
t1155 = -pkin(1) * (-t1253 * t1234 - t1310) - t1197;
t1151 = -t1203 - t1204;
t1138 = pkin(1) * t1224 - t1154;
t1137 = t1195 * t1257 - t1332;
t1136 = -t1196 * t1252 + t1361;
t1135 = t1195 * t1252 + t1331;
t1134 = t1196 * t1257 + t1362;
t1133 = -t1192 * t1252 - t1331;
t1129 = -t1199 + t1150;
t1124 = -(-qJD(3) - t1247) * t1206 + t1286;
t1121 = (pkin(2) * t1258 + pkin(1)) * t1176;
t1120 = t1150 * t1257 - t1206 * t1325;
t1119 = t1150 * t1252 + t1206 * t1324;
t1118 = -t1149 * t1252 - t1205 * t1324;
t1117 = t1149 * t1257 - t1205 * t1325;
t1115 = t1166 - t1165;
t1114 = t1170 * t1257 - t1362;
t1103 = -t1143 + t1163;
t1102 = t1142 - t1163;
t1101 = (-t1167 * t1256 + t1169 * t1251) * t1242;
t1100 = (-t1167 * t1251 - t1169 * t1256) * t1242;
t1099 = -t1157 * t1253 + t1158 * t1258;
t1098 = -t1157 * t1258 - t1158 * t1253;
t1096 = t1143 - t1142;
t1094 = -pkin(2) * t1124 - t1313;
t1093 = -pkin(2) * t1348 + t1320;
t1091 = -t1165 - t1166;
t1089 = -t1135 * t1253 + t1137 * t1258;
t1088 = -t1134 * t1253 + t1136 * t1258;
t1087 = -t1135 * t1258 - t1137 * t1253;
t1086 = -t1134 * t1258 - t1136 * t1253;
t1085 = t1159 * t1256 - t1336;
t1084 = -t1160 * t1251 + t1353;
t1083 = t1159 * t1251 + t1335;
t1082 = t1160 * t1256 + t1355;
t1078 = -t1132 * t1253 + t1133 * t1258;
t1074 = -t1124 * t1257 - t1252 * t1348;
t1073 = t1129 * t1252 + t1257 * t1265;
t1071 = -t1124 * t1252 + t1257 * t1348;
t1070 = -t1129 * t1257 + t1252 * t1265;
t1067 = pkin(2) * t1075;
t1066 = pkin(2) * t1070;
t1064 = -t1093 * t1253 + t1176 * t1312;
t1063 = -t1094 * t1253 + t1176 * t1318;
t1060 = -t1119 * t1253 + t1120 * t1258;
t1059 = -t1117 * t1253 + t1118 * t1258;
t1058 = -t1119 * t1258 - t1120 * t1253;
t1057 = -t1117 * t1258 - t1118 * t1253;
t1056 = -t1113 * t1253 + t1114 * t1258;
t1052 = (-t1144 * t1255 + t1146 * t1250) * t1164;
t1051 = (-t1144 * t1250 - t1146 * t1255) * t1164;
t1045 = (qJD(4) + t1242) * t1169 + t1287;
t1044 = -pkin(2) * t1151 + t1076;
t1043 = -t1100 * t1252 + t1101 * t1257;
t1042 = t1100 * t1257 + t1101 * t1252;
t1041 = t1069 * t1256 - t1169 * t1328;
t1040 = t1069 * t1251 + t1169 * t1327;
t1039 = -t1068 * t1251 + t1167 * t1327;
t1038 = t1068 * t1256 + t1167 * t1328;
t1032 = (-pkin(3) * t1257 - pkin(2)) * t1095;
t1031 = pkin(1) * t1348 - t1093 * t1258 - t1253 * t1313;
t1030 = pkin(1) * t1124 - t1094 * t1258 - t1176 * t1319;
t1026 = -t1083 * t1252 + t1085 * t1257;
t1025 = -t1082 * t1252 + t1084 * t1257;
t1024 = t1083 * t1257 + t1085 * t1252;
t1023 = t1082 * t1257 + t1084 * t1252;
t1022 = -pkin(1) * (-t1132 * t1258 - t1133 * t1253) + t1268;
t1021 = -t1080 * t1252 + t1081 * t1257;
t1018 = t1076 * t1258 + t1358;
t1017 = -t1071 * t1253 + t1074 * t1258;
t1016 = -t1070 * t1253 + t1073 * t1258;
t1015 = -t1071 * t1258 - t1074 * t1253;
t1014 = -pkin(3) * t1045 - t1314;
t1013 = -pkin(3) * t1349 + t1321;
t1010 = t1034 - t1104;
t1007 = -t1033 - t1105;
t1004 = t1034 * t1255 - t1146 * t1334;
t1003 = t1034 * t1250 + t1146 * t1333;
t1002 = -t1033 * t1250 + t1144 * t1333;
t1001 = t1033 * t1255 + t1144 * t1334;
t1000 = -pkin(1) * (-t1113 * t1258 - t1114 * t1253) + t1274;
t999 = -t1032 * t1253 + t1258 * t1303;
t993 = t1052 * t1256 + t1065 * t1251;
t992 = t1052 * t1251 - t1065 * t1256;
t991 = -t1044 * t1253 + t1357;
t990 = t1102 * t1255 - t1338;
t989 = -t1103 * t1250 + t1354;
t988 = t1102 * t1250 + t1337;
t987 = t1103 * t1255 + t1356;
t986 = -t1054 * t1252 + t1055 * t1257;
t982 = -t1045 * t1256 - t1251 * t1349;
t980 = -t1045 * t1251 + t1256 * t1349;
t977 = t1090 * t1255 - t1338;
t975 = pkin(1) * t1151 - t1044 * t1258 - t1358;
t974 = -t1042 * t1253 + t1043 * t1258;
t973 = -t1042 * t1258 - t1043 * t1253;
t972 = -t1040 * t1252 + t1041 * t1257;
t971 = -t1038 * t1252 + t1039 * t1257;
t970 = t1040 * t1257 + t1041 * t1252;
t969 = t1038 * t1257 + t1039 * t1252;
t967 = t1077 * t1250 + t1354;
t965 = -t1013 * t1252 + t1257 * t1314;
t964 = -t1014 * t1252 + t1257 * t1321;
t959 = t1004 * t1256 + t1297;
t958 = t1002 * t1256 - t1297;
t957 = t1004 * t1251 - t1296;
t956 = t1002 * t1251 + t1296;
t955 = -t1258 * t1032 + (-pkin(3) * t1319 + pkin(1)) * t1095;
t954 = -pkin(1) * (-t1076 * t1253 + t1357) - t1067;
t953 = -pkin(1) * (-t1070 * t1258 - t1073 * t1253) + t1066;
t950 = -pkin(3) * t1091 + t963;
t949 = -t1024 * t1253 + t1026 * t1258;
t948 = -t1023 * t1253 + t1025 * t1258;
t947 = -t1024 * t1258 - t1026 * t1253;
t946 = -t1023 * t1258 - t1025 * t1253;
t945 = -t1020 * t1253 + t1021 * t1258;
t944 = -pkin(2) * t1349 + t1013 * t1257 + t1252 * t1314;
t943 = -pkin(2) * t1045 + t1014 * t1257 + t1252 * t1321;
t941 = t1008 * t1255 - t1010 * t1250;
t940 = t1009 * t1250 - t1011 * t1255;
t939 = t1008 * t1250 + t1010 * t1255;
t937 = -t1007 * t1251 + t1256 * t990;
t936 = t1011 * t1251 + t1256 * t989;
t935 = t1007 * t1256 + t1251 * t990;
t934 = -t1011 * t1256 + t1251 * t989;
t933 = -t1252 * t992 + t1257 * t993;
t932 = t1252 * t993 + t1257 * t992;
t925 = -t1253 * t985 + t1258 * t986;
t924 = t1096 * t1251 + t1256 * t941;
t923 = -t1096 * t1256 + t1251 * t941;
t922 = -pkin(6) * t977 + t995;
t921 = -pkin(6) * t967 + t994;
t917 = -t1252 * t981 + t1257 * t983;
t916 = -t1252 * t980 + t1257 * t982;
t914 = t1252 * t982 + t1257 * t980;
t912 = -t1253 * t970 + t1258 * t972;
t911 = -t1253 * t969 + t1258 * t971;
t910 = -t1253 * t972 - t1258 * t970;
t909 = -t1253 * t971 - t1258 * t969;
t904 = t1257 * t963 + t1360;
t901 = -t1252 * t957 + t1257 * t959;
t900 = -t1252 * t956 + t1257 * t958;
t899 = t1252 * t959 + t1257 * t957;
t898 = t1252 * t958 + t1257 * t956;
t897 = -t1252 * t950 + t1359;
t896 = -t1253 * t944 + t1258 * t965;
t895 = -t1253 * t943 + t1258 * t964;
t894 = -pkin(2) * t1091 + t1257 * t950 + t1360;
t893 = pkin(1) * t1349 - t1253 * t965 - t1258 * t944;
t892 = pkin(1) * t1045 - t1253 * t964 - t1258 * t943;
t891 = -pkin(4) * t977 + t908;
t890 = -pkin(1) * (-t1020 * t1258 - t1021 * t1253) + t1262;
t889 = -pkin(4) * t967 + t907;
t888 = -t1252 * t935 + t1257 * t937;
t887 = -t1252 * t934 + t1257 * t936;
t886 = t1252 * t937 + t1257 * t935;
t885 = t1252 * t936 + t1257 * t934;
t884 = -t1253 * t932 + t1258 * t933;
t883 = -t1253 * t933 - t1258 * t932;
t882 = -t1252 * t930 + t1257 * t931;
t879 = -t1252 * t927 + t1257 * t928;
t876 = -t1252 * t923 + t1257 * t924;
t875 = t1252 * t924 + t1257 * t923;
t874 = -pkin(1) * (-t1253 * t986 - t1258 * t985) + t1269;
t873 = -t1252 * t919 + t1257 * t920;
t870 = -t1253 * t915 + t1258 * t917;
t869 = -t1253 * t914 + t1258 * t916;
t868 = -t1253 * t916 - t1258 * t914;
t864 = -t1253 * t903 + t1258 * t904;
t863 = -t1253 * t899 + t1258 * t901;
t862 = -t1253 * t898 + t1258 * t900;
t861 = -t1253 * t901 - t1258 * t899;
t860 = -t1253 * t900 - t1258 * t898;
t859 = -t1251 * t891 + t1256 * t922;
t858 = -t1251 * t889 + t1256 * t921;
t854 = -t1253 * t894 + t1258 * t897;
t853 = pkin(1) * t1091 - t1253 * t897 - t1258 * t894;
t852 = -pkin(6) * t940 - t866;
t851 = -pkin(3) * t977 + t1251 * t922 + t1256 * t891;
t850 = -pkin(3) * t967 + t1251 * t921 + t1256 * t889;
t849 = -t1253 * t886 + t1258 * t888;
t848 = -t1253 * t885 + t1258 * t887;
t847 = -t1253 * t888 - t1258 * t886;
t846 = -t1253 * t887 - t1258 * t885;
t845 = -pkin(1) * (-t1253 * t917 - t1258 * t915) + t1341;
t844 = -t1253 * t881 + t1258 * t882;
t843 = -t1253 * t878 + t1258 * t879;
t842 = t1256 * t852 + t940 * t1343;
t841 = -t1253 * t875 + t1258 * t876;
t840 = -t1253 * t876 - t1258 * t875;
t839 = -pkin(1) * (-t1253 * t904 - t1258 * t903) + t1342;
t838 = -t1253 * t872 + t1258 * t873;
t837 = (-pkin(6) * t1256 + t1343) * t866;
t836 = t1251 * t852 + t1298 * t940;
t835 = -t1252 * t856 + t1257 * t857;
t832 = -t1252 * t851 + t1257 * t859;
t831 = -t1252 * t850 + t1257 * t858;
t830 = -pkin(2) * t977 + t1252 * t859 + t1257 * t851;
t829 = -pkin(2) * t967 + t1252 * t858 + t1257 * t850;
t828 = (-pkin(6) * t1251 + t1298) * t866;
t827 = -pkin(1) * (-t1253 * t882 - t1258 * t881) + t1277;
t826 = -pkin(1) * (-t1253 * t879 - t1258 * t878) + t1278;
t825 = -t1252 * t836 + t1257 * t842;
t824 = -pkin(2) * t940 + t1252 * t842 + t1257 * t836;
t823 = -pkin(1) * (-t1253 * t873 - t1258 * t872) + t1270;
t822 = -t1253 * t834 + t1258 * t835;
t821 = -t1252 * t828 + t1257 * t837;
t820 = -t1253 * t830 + t1258 * t832;
t819 = -t1253 * t829 + t1258 * t831;
t818 = pkin(1) * t977 - t1253 * t832 - t1258 * t830;
t817 = pkin(1) * t967 - t1253 * t831 - t1258 * t829;
t816 = -pkin(2) * t866 + t1252 * t837 + t1257 * t828;
t815 = -t1253 * t824 + t1258 * t825;
t814 = pkin(1) * t940 - t1253 * t825 - t1258 * t824;
t813 = -pkin(1) * (-t1253 * t835 - t1258 * t834) + t1289;
t812 = -t1253 * t816 + t1258 * t821;
t811 = pkin(1) * t866 - t1253 * t821 - t1258 * t816;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1222, 0, -t1221, 0, t1279, -t1202, -t1271, -pkin(5) * t1271, t1194 * t1259 + t1281, t1180 * t1259 - t1223 * t1254, t1190 * t1259 + t1253 * t1306, t1193 * t1259 - t1281, t1188 * t1259 + t1254 * t1305, -qJDD(2) * t1254 + t1213 * t1259, t1259 * t1317 - t1254 * t1155 - pkin(5) * (t1189 * t1254 + t1219 * t1259), t1259 * t1311 - t1254 * t1156 - pkin(5) * (t1191 * t1254 + t1218 * t1259), t1259 * t1272 - pkin(5) * (t1220 * t1254 + t1224 * t1259), t1254 * t1346 - pkin(5) * (t1154 * t1254 + t1215 * t1259), t1060 * t1259 + t1293, t1017 * t1259 - t1175 * t1254, t1088 * t1259 - t1129 * t1254, t1059 * t1259 - t1293, t1089 * t1259 - t1254 * t1265, t1099 * t1259 - t1246 * t1254, t1259 * t1063 - t1254 * t1000 - pkin(5) * (t1056 * t1254 + t1124 * t1259), t1259 * t1064 - t1254 * t1022 - pkin(5) * (t1078 * t1254 + t1259 * t1348), t1259 * t991 - t1254 * t953 - pkin(5) * (t1016 * t1254 + t1151 * t1259), t1259 * t1302 - t1254 * t954 - pkin(5) * (t1018 * t1254 + t1176 * t1259), t1259 * t912 - t1295, -t1115 * t1254 + t1259 * t869, -t1049 * t1254 + t1259 * t948, t1259 * t911 + t1295, -t1254 * t1266 + t1259 * t949, -t1241 * t1254 + t1259 * t974, t1259 * t895 - t1254 * t874 - pkin(5) * (t1045 * t1259 + t1254 * t925), t1259 * t896 - t1254 * t890 - pkin(5) * (t1254 * t945 + t1259 * t1349), t1259 * t854 - t1254 * t845 - pkin(5) * (t1091 * t1259 + t1254 * t870), t1259 * t999 - t1254 * t839 - pkin(5) * (t1095 * t1259 + t1254 * t864), -t1003 * t1254 + t1259 * t863, -t1254 * t939 + t1259 * t841, -t1254 * t987 + t1259 * t848, -t1001 * t1254 + t1259 * t862, -t1254 * t988 + t1259 * t849, -t1051 * t1254 + t1259 * t884, t1259 * t819 - t1254 * t826 - pkin(5) * (t1254 * t843 + t1259 * t967), t1259 * t820 - t1254 * t827 - pkin(5) * (t1254 * t844 + t1259 * t977), t1259 * t815 - t1254 * t823 - pkin(5) * (t1254 * t838 + t1259 * t940), t1259 * t812 - t1254 * t813 - pkin(5) * (t1254 * t822 + t1259 * t866); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1221, 0, t1222, 0, t1202, t1279, t1285, pkin(5) * t1285, t1194 * t1254 - t1280, t1180 * t1254 + t1223 * t1259, t1190 * t1254 - t1253 * t1304, t1193 * t1254 + t1280, t1188 * t1254 - t1258 * t1304, qJDD(2) * t1259 + t1213 * t1254, t1254 * t1317 + t1259 * t1155 + pkin(5) * (t1189 * t1259 - t1219 * t1254), t1254 * t1311 + t1259 * t1156 + pkin(5) * (t1191 * t1259 - t1218 * t1254), t1254 * t1272 + pkin(5) * (t1220 * t1259 - t1224 * t1254), -t1259 * t1346 + pkin(5) * (t1154 * t1259 - t1215 * t1254), t1060 * t1254 - t1292, t1017 * t1254 + t1175 * t1259, t1088 * t1254 + t1129 * t1259, t1059 * t1254 + t1292, t1089 * t1254 + t1259 * t1265, t1099 * t1254 + t1246 * t1259, t1254 * t1063 + t1259 * t1000 + pkin(5) * (t1056 * t1259 - t1124 * t1254), t1254 * t1064 + t1259 * t1022 + pkin(5) * (t1078 * t1259 - t1254 * t1348), t1254 * t991 + t1259 * t953 + pkin(5) * (t1016 * t1259 - t1151 * t1254), t1254 * t1302 + t1259 * t954 + pkin(5) * (t1018 * t1259 - t1176 * t1254), t1254 * t912 + t1294, t1115 * t1259 + t1254 * t869, t1049 * t1259 + t1254 * t948, t1254 * t911 - t1294, t1254 * t949 + t1259 * t1266, t1241 * t1259 + t1254 * t974, t1254 * t895 + t1259 * t874 + pkin(5) * (-t1045 * t1254 + t1259 * t925), t1254 * t896 + t1259 * t890 + pkin(5) * (-t1254 * t1349 + t1259 * t945), t1254 * t854 + t1259 * t845 + pkin(5) * (-t1091 * t1254 + t1259 * t870), t1254 * t999 + t1259 * t839 + pkin(5) * (-t1095 * t1254 + t1259 * t864), t1003 * t1259 + t1254 * t863, t1254 * t841 + t1259 * t939, t1254 * t848 + t1259 * t987, t1001 * t1259 + t1254 * t862, t1254 * t849 + t1259 * t988, t1051 * t1259 + t1254 * t884, t1254 * t819 + t1259 * t826 + pkin(5) * (-t1254 * t967 + t1259 * t843), t1254 * t820 + t1259 * t827 + pkin(5) * (-t1254 * t977 + t1259 * t844), t1254 * t815 + t1259 * t823 + pkin(5) * (-t1254 * t940 + t1259 * t838), t1254 * t812 + t1259 * t813 + pkin(5) * (-t1254 * t866 + t1259 * t822); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1227, t1228, 0, 0, t1185, t1179, t1187, t1184, t1186, 0, t1182, t1181, t1138, t1211, t1058, t1015, t1086, t1057, t1087, t1098, t1030, t1031, t975, t1121, t910, t868, t946, t909, t947, t973, t892, t893, t853, t955, t861, t840, t846, t860, t847, t883, t817, t818, t814, t811; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1261, 0, 0, -g(3), -t1227, 0, t1194, t1180, t1190, t1193, t1188, t1213, t1317, t1311, t1272, 0, t1060, t1017, t1088, t1059, t1089, t1099, t1063, t1064, t991, t1302, t912, t869, t948, t911, t949, t974, t895, t896, t854, t999, t863, t841, t848, t862, t849, t884, t819, t820, t815, t812; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1261, 0, qJDD(1), 0, g(3), 0, -t1228, 0, -t1236, t1223, -t1307, t1236, -t1305, qJDD(2), t1155, t1156, 0, -t1346, -t1330, t1175, t1129, t1330, t1265, t1246, t1000, t1022, t953, t954, t1116, t1115, t1049, -t1116, t1266, t1241, t874, t890, t845, t839, t1003, t939, t987, t1001, t988, t1051, t826, t827, t823, t813; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1227, t1228, 0, 0, t1185, t1179, t1187, t1184, t1186, 0, t1182, t1181, t1138, t1211, t1058, t1015, t1086, t1057, t1087, t1098, t1030, t1031, t975, t1121, t910, t868, t946, t909, t947, t973, t892, t893, t853, t955, t861, t840, t846, t860, t847, t883, t817, t818, t814, t811; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1217, -t1219, t1225, t1290, t1233, -t1290, 0, t1215, t1197, 0, t1120, t1074, t1136, t1118, t1137, t1158, t1320, t1313, t1075, 0, t972, t916, t1025, t971, t1026, t1043, t964, t965, t897, t1303, t901, t876, t887, t900, t888, t933, t831, t832, t825, t821; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1291, t1218, t1231, t1267, t1226, t1291, -t1215, 0, t1198, 0, t1119, t1071, t1134, t1117, t1135, t1157, t1094, t1093, t1044, -t1345, t970, t914, t1023, t969, t1024, t1042, t943, t944, t894, t1032, t899, t875, t885, t898, t886, t932, t829, t830, t824, t816; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1236, t1223, -t1307, t1236, -t1305, qJDD(2), -t1197, -t1198, 0, 0, -t1330, t1175, t1129, t1330, t1265, t1246, t1274, t1268, t1066, -t1067, t1116, t1115, t1049, -t1116, t1266, t1241, t1269, t1262, t1341, t1342, t1003, t939, t987, t1001, t988, t1051, t1278, t1277, t1270, t1289; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1150, -t1124, t1352, -t1199, t1195, t1199, 0, t1176, t1130, 0, t1041, t982, t1084, t1039, t1085, t1101, t1321, t1314, t962, 0, t959, t924, t936, t958, t937, t993, t858, t859, t842, t837; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1326, t1348, t1196, t1149, t1172, -t1326, -t1176, 0, t1131, 0, t1040, t980, t1082, t1038, t1083, t1100, t1014, t1013, t950, -t1344, t957, t923, t934, t956, t935, t992, t850, t851, t836, t828; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1330, t1175, t1129, t1330, t1265, t1246, -t1130, -t1131, 0, 0, t1116, t1115, t1049, -t1116, t1266, t1241, t1275, t1263, t979, -t960, t1003, t939, t987, t1001, t988, t1051, t1282, t1283, t1276, t1301; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1069, -t1045, t1350, t1161, t1159, -t1161, 0, t1095, t1036, 0, t1004, t941, t989, t1002, t990, t1052, t921, t922, t852, -pkin(6) * t866; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1329, t1349, t1160, t1068, t1109, -t1329, -t1095, 0, t1037, 0, -t1097, -t1096, -t1011, t1097, t1007, -t1065, t889, t891, -pkin(4) * t940, -pkin(4) * t866; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1116, t1115, t1049, -t1116, t1266, t1241, -t1036, -t1037, 0, 0, t1003, t939, t987, t1001, t988, t1051, t1299, t1300, t1284, t1340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1034, t1008, t1351, t1104, t1102, -t1104, 0, t997, t907, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1105, t1010, t1103, t1033, t1028, -t1105, -t997, 0, t908, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1097, t1096, t1011, -t1097, -t1007, t1065, -t907, -t908, 0, 0;];
m_new_reg = t1;
