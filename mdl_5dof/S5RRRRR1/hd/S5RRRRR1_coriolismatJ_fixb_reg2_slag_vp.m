% Calculate inertial parameters regressor of coriolis matrix for
% S5RRRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d5]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:52
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RRRRR1_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR1_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR1_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S5RRRRR1_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:51:07
% EndTime: 2019-12-05 18:51:31
% DurationCPUTime: 11.38s
% Computational Cost: add. (7450->497), mult. (16249->687), div. (0->0), fcn. (18935->8), ass. (0->417)
t484 = qJD(2) + qJD(3);
t631 = qJD(4) + t484;
t357 = cos(qJ(5));
t355 = sin(qJ(3));
t356 = sin(qJ(2));
t358 = cos(qJ(2));
t581 = cos(qJ(3));
t321 = t355 * t358 + t581 * t356;
t580 = cos(qJ(4));
t316 = t580 * t321;
t320 = t355 * t356 - t581 * t358;
t354 = sin(qJ(4));
t547 = t354 * t320;
t611 = -t316 + t547;
t250 = t611 ^ 2;
t435 = t580 * t320 + t354 * t321;
t625 = -t435 ^ 2 + t250;
t629 = t625 * t357;
t633 = t629 * qJD(1);
t353 = sin(qJ(5));
t630 = t625 * t353;
t632 = t630 * qJD(1);
t628 = t625 * qJD(1);
t351 = t353 ^ 2;
t521 = qJD(1) * t611;
t620 = t435 * t521;
t627 = t351 * t620;
t352 = t357 ^ 2;
t626 = t352 * t620;
t576 = t611 * pkin(4);
t577 = pkin(6) * t435;
t128 = t576 - t577;
t623 = -t435 / 0.2e1;
t601 = t611 / 0.2e1;
t344 = t358 * pkin(2) + pkin(1);
t285 = -t320 * pkin(3) + t344;
t416 = -pkin(4) * t435 - pkin(6) * t611;
t88 = t285 + t416;
t567 = t611 * t88;
t612 = t484 * t357;
t622 = t353 * t612;
t621 = t357 * t611;
t523 = t351 + t352;
t438 = t523 * t88;
t420 = t435 * t438;
t432 = t484 * t435;
t495 = qJD(4) * t435;
t619 = t432 + t495;
t588 = -t352 / 0.2e1;
t589 = t351 / 0.2e1;
t444 = t589 + t588;
t109 = t444 * t611;
t483 = -qJD(3) - qJD(4);
t437 = qJD(2) - t483;
t548 = t353 * t357;
t613 = t437 * t548;
t79 = -t109 * qJD(1) + t613;
t421 = -t316 / 0.2e1;
t610 = t421 + t547 / 0.2e1;
t618 = qJD(5) * t610;
t617 = t610 * qJD(1);
t616 = -0.2e1 * t611;
t257 = t484 * t321;
t615 = t320 * t257;
t337 = t352 - t351;
t614 = t337 * t437;
t433 = t484 * t611;
t422 = t581 * t580;
t546 = t354 * t355;
t319 = (t422 - t546) * pkin(2);
t587 = t352 / 0.2e1;
t609 = (t587 + t589) * t319;
t510 = t109 * qJD(5);
t600 = t435 / 0.2e1;
t98 = (t600 + t623) * t548;
t608 = -t98 * qJD(4) + t510;
t582 = t357 / 0.2e1;
t448 = t435 * t582;
t111 = t353 * t435;
t452 = t111 / 0.2e1;
t97 = t353 * t448 + t357 * t452;
t607 = -t97 * qJD(4) + t510;
t349 = qJD(5) * t357;
t339 = t353 * t349;
t528 = t98 * qJD(1);
t85 = t528 - t339;
t84 = t528 + t339;
t606 = t484 * t97 - t510;
t605 = t484 * t98 + t510;
t467 = qJD(1) * t548;
t24 = t109 * t437 + t250 * t467;
t602 = pkin(4) / 0.2e1;
t597 = -t611 / 0.2e1;
t423 = t581 * pkin(2) + pkin(3);
t327 = t580 * t423;
t310 = pkin(2) * t546 - t327;
t302 = -pkin(4) + t310;
t596 = -t302 / 0.2e1;
t398 = t354 * t423;
t470 = t580 * t355;
t311 = pkin(2) * t470 + t398;
t303 = pkin(6) + t311;
t595 = -t303 / 0.2e1;
t594 = t311 / 0.2e1;
t307 = t316 / 0.2e1;
t593 = -t319 / 0.2e1;
t269 = t354 * pkin(3);
t342 = pkin(6) + t269;
t592 = t342 / 0.2e1;
t480 = t580 * pkin(3);
t343 = -t480 - pkin(4);
t591 = -t343 / 0.2e1;
t590 = -t351 / 0.2e1;
t586 = -t353 / 0.2e1;
t585 = t353 / 0.2e1;
t584 = t354 / 0.2e1;
t583 = -t357 / 0.2e1;
t579 = pkin(2) * t355;
t578 = pkin(4) * t353;
t474 = t581 * t354;
t317 = (t474 + t470) * pkin(2);
t575 = t317 * pkin(4);
t574 = t321 * pkin(3);
t573 = t356 * pkin(2);
t572 = pkin(2) * qJD(2);
t571 = pkin(3) * qJD(3);
t570 = pkin(3) * qJD(4);
t436 = t523 * t611;
t92 = -t574 + t128;
t91 = t92 - t573;
t1 = t436 * t91 + t420;
t569 = t1 * qJD(1);
t2 = t436 * t92 + t420;
t568 = t2 * qJD(1);
t3 = t128 * t436 + t420;
t566 = t3 * qJD(1);
t7 = t91 * t438;
t565 = t7 * qJD(1);
t8 = t92 * t438;
t564 = t8 * qJD(1);
t9 = t128 * t438;
t563 = t9 * qJD(1);
t390 = t317 * t601 - t435 * t593;
t361 = (t302 / 0.2e1 + t591) * t435 + (t595 + t592) * t611 + t390;
t12 = t361 * t353;
t562 = t12 * qJD(1);
t445 = t310 / 0.2e1 + t596;
t368 = (t595 + t594) * t611 - t445 * t435;
t397 = pkin(6) * t601 + t435 * t602;
t362 = t368 + t397;
t18 = t362 * t353;
t561 = t18 * qJD(1);
t551 = t311 * t611;
t552 = t310 * t435;
t365 = t552 / 0.2e1 - t551 / 0.2e1 + t390;
t473 = t580 * t435;
t558 = t611 * t354;
t374 = (-t558 / 0.2e1 - t473 / 0.2e1) * pkin(3);
t22 = t374 - t365;
t560 = t22 * qJD(1);
t559 = t611 * t303;
t557 = t435 * t302;
t410 = -t435 * t91 + t567;
t27 = t410 * t353;
t556 = t27 * qJD(1);
t28 = t410 * t357;
t555 = t28 * qJD(1);
t409 = -t435 * t92 + t567;
t29 = t409 * t353;
t554 = t29 * qJD(1);
t30 = t409 * t357;
t553 = t30 * qJD(1);
t408 = -t128 * t435 + t567;
t35 = t408 * t353;
t550 = t35 * qJD(1);
t549 = t353 * t611;
t118 = t357 * t435;
t36 = t408 * t357;
t543 = t36 * qJD(1);
t198 = t523 * t310;
t66 = -t198 * t303 + t302 * t311;
t538 = t66 * qJD(2);
t149 = t285 * t611;
t288 = -t573 - t574;
t68 = -t288 * t435 + t149;
t537 = t68 * qJD(1);
t150 = t285 * t435;
t69 = t288 * t611 + t150;
t536 = t69 * qJD(1);
t235 = t523 * t319;
t74 = t235 * t303 + t302 * t317;
t533 = t74 * qJD(2);
t75 = -t435 * t574 - t149;
t532 = t75 * qJD(1);
t76 = t574 * t611 - t150;
t531 = t76 * qJD(1);
t451 = t435 * t586;
t453 = -t549 / 0.2e1;
t526 = pkin(4) * t451 + pkin(6) * t453;
t348 = pkin(4) * t583;
t449 = -t621 / 0.2e1;
t525 = pkin(6) * t449 + t348 * t435;
t299 = t311 * qJD(4);
t312 = t317 * qJD(3);
t524 = -t312 - t299;
t522 = qJD(1) * t435;
t520 = qJD(1) * t285;
t519 = qJD(1) * t321;
t518 = qJD(1) * t344;
t517 = qJD(1) * t358;
t516 = qJD(2) * t302;
t515 = qJD(3) * t343;
t514 = qJD(3) * t344;
t513 = qJD(4) * t357;
t512 = qJD(5) * t353;
t447 = t601 + t597;
t110 = t447 * t353;
t509 = t110 * qJD(1);
t508 = t111 * qJD(1);
t446 = 0.2e1 * t623;
t113 = t446 * t353;
t103 = t113 * qJD(1);
t116 = t447 * t357;
t507 = t116 * qJD(1);
t506 = t118 * qJD(1);
t120 = t446 * t357;
t106 = t120 * qJD(1);
t125 = t337 * t250;
t505 = t125 * qJD(1);
t132 = t310 * t317 + t311 * t319;
t504 = t132 * qJD(2);
t503 = t198 * qJD(2);
t200 = t320 ^ 2 - t321 ^ 2;
t502 = t200 * qJD(1);
t233 = -t320 * t573 + t344 * t321;
t501 = t233 * qJD(1);
t234 = -t344 * t320 - t321 * t573;
t500 = t234 * qJD(1);
t499 = t235 * qJD(2);
t248 = t307 + t421;
t497 = t248 * qJD(1);
t494 = t611 * qJD(4);
t493 = t269 * qJD(2);
t427 = -t480 / 0.2e1;
t399 = -t327 / 0.2e1 + t427;
t400 = -t422 / 0.2e1;
t271 = pkin(2) * t400 - t399;
t492 = t271 * qJD(2);
t491 = t310 * qJD(2);
t490 = t311 * qJD(2);
t489 = t317 * qJD(2);
t488 = t319 * qJD(2);
t338 = -t356 ^ 2 + t358 ^ 2;
t487 = t338 * qJD(1);
t486 = t356 * qJD(2);
t485 = t358 * qJD(2);
t481 = t344 * t573;
t479 = pkin(1) * t356 * qJD(1);
t478 = pkin(1) * t517;
t477 = t354 * t570;
t476 = t354 * t571;
t475 = t88 * t522;
t472 = t580 * t351;
t471 = t580 * t352;
t469 = t351 * t521;
t468 = t352 * t521;
t466 = t435 * t512;
t465 = t435 * t349;
t130 = t611 * t522;
t463 = t435 * t520;
t462 = t611 * t520;
t461 = t288 * t520;
t460 = t320 * t519;
t459 = t320 * t518;
t458 = t321 * t518;
t457 = t353 * t513;
t456 = t356 * t485;
t324 = t343 * t585;
t443 = t588 + t590;
t442 = t581 * qJD(2);
t441 = t581 * qJD(3);
t440 = t580 * qJD(3);
t439 = t580 * qJD(4);
t430 = t285 * pkin(3) * t519;
t429 = qJD(1) * t481;
t428 = -qJD(5) + t522;
t426 = t250 * t339;
t424 = t611 * t467;
t419 = t269 / 0.2e1 + t594;
t418 = t602 + t445;
t417 = t483 * t269;
t414 = t443 * t310;
t413 = -0.2e1 * t424;
t412 = 0.2e1 * t424;
t411 = t593 + t591 + t596;
t407 = t435 * t424;
t393 = -t317 / 0.2e1 + t419;
t175 = t393 * t357;
t363 = t342 * t597 - t435 * t591 + (t580 * t600 + t584 * t611) * pkin(3);
t360 = t363 + t397;
t31 = t360 * t353;
t405 = t31 * qJD(1) - t175 * qJD(2);
t378 = t472 + t471;
t244 = (t342 * t378 + t343 * t354) * pkin(3);
t375 = t471 / 0.2e1 + t472 / 0.2e1;
t359 = (t302 * t584 + t375 * t303) * pkin(3) + t342 * t414 + t343 * t594;
t41 = t575 / 0.2e1 + t443 * t319 * pkin(6) + t359;
t404 = -t41 * qJD(2) - t244 * qJD(3);
t318 = t378 * pkin(3);
t81 = t523 * (t480 / 0.2e1 - t310 / 0.2e1 + t593);
t403 = -t81 * qJD(2) - t318 * qJD(3);
t402 = t428 * t353;
t401 = t428 * t357;
t396 = -t577 / 0.2e1 + t576 / 0.2e1;
t392 = qJD(4) * t416;
t391 = t303 * t623 + t596 * t611;
t389 = -t435 * t592 + t591 * t611;
t15 = t361 * t357;
t388 = -t15 * qJD(1) - t353 * t489;
t21 = t362 * t357;
t387 = -t21 * qJD(1) - t353 * t490;
t377 = t91 / 0.2e1 + t391;
t46 = t377 * t357;
t386 = t46 * qJD(1) - t353 * t516;
t43 = t377 * t353;
t385 = -t43 * qJD(1) - t357 * t516;
t72 = -t130 + t618;
t384 = -t620 + t618;
t383 = qJD(2) * (t557 - t559);
t382 = qJD(3) * (-t342 * t611 + t343 * t435);
t381 = t427 + t602 + t591;
t379 = t128 / 0.2e1 + t396;
t376 = t92 / 0.2e1 + t389;
t373 = t619 * t611;
t372 = (t433 + t494) * t435;
t161 = t411 * t353;
t50 = t376 * t357;
t371 = t50 * qJD(1) + t161 * qJD(2) - t353 * t515;
t162 = t411 * t357;
t47 = t376 * t353;
t370 = -t47 * qJD(1) + t162 * qJD(2) - t357 * t515;
t174 = t393 * t353;
t34 = t360 * t357;
t369 = -t34 * qJD(1) - t174 * qJD(2) - t353 * t476;
t169 = t418 * t353;
t268 = t381 * t353;
t56 = t379 * t357;
t367 = t56 * qJD(1) + t169 * qJD(2) + t268 * qJD(3) + qJD(4) * t578;
t170 = t418 * t357;
t270 = t381 * t357;
t53 = t379 * t353;
t366 = pkin(4) * t513 - t53 * qJD(1) + t170 * qJD(2) + t270 * qJD(3);
t364 = -t559 / 0.2e1 + t557 / 0.2e1 + t390;
t347 = -t578 / 0.2e1;
t340 = t356 * t517;
t336 = t353 * t477;
t326 = t337 * qJD(5);
t325 = t343 * t582;
t314 = t319 * qJD(3);
t313 = t318 * qJD(4);
t298 = t310 * qJD(4);
t295 = t353 * t312;
t284 = t353 * t299;
t277 = t302 * t582;
t276 = t302 * t585;
t273 = t357 * t427 + t325 + t348;
t272 = t353 * t427 + t324 + t347;
t259 = (t400 + t546) * pkin(2) + t399;
t258 = -t269 / 0.2e1 - t398 / 0.2e1 + (-t470 - t474 / 0.2e1) * pkin(2);
t256 = t484 * t320;
t242 = t248 * qJD(4);
t215 = t235 * qJD(3);
t199 = t339 * t616;
t191 = t198 * qJD(4);
t176 = t317 * t583 - t419 * t357;
t173 = t317 * t585 + t419 * t353;
t172 = t310 * t582 + t277 + t348;
t171 = t310 * t585 + t276 + t347;
t166 = -t547 + 0.2e1 * t307;
t164 = t319 * t583 + t277 + t325;
t163 = t319 * t586 + t276 + t324;
t127 = t413 + t614;
t126 = t412 - t614;
t119 = -t118 / 0.2e1 + t448;
t115 = t611 * t585 + t549 / 0.2e1;
t114 = t452 + t451;
t94 = t349 + t106;
t93 = -t103 - t512;
t80 = t375 * pkin(3) + t414 + t609;
t67 = t631 * t610;
t64 = t166 * qJD(4) - t433;
t58 = (-t444 + t587 + t590) * t435;
t55 = t128 * t582 - t396 * t357;
t54 = t128 * t586 + t396 * t353;
t49 = -t389 * t357 + t92 * t582;
t48 = t389 * t353 + t92 * t586;
t45 = -t391 * t357 + t91 * t582;
t44 = t391 * t353 + t91 * t586;
t40 = -t575 / 0.2e1 + t359 + t609 * pkin(6);
t38 = -t608 - t626;
t37 = t608 - t627;
t33 = t357 * t363 + t525;
t32 = t353 * t363 + t526;
t26 = t199 + 0.2e1 * t407;
t23 = t374 + t365;
t20 = t357 * t368 + t525;
t19 = t353 * t368 + t526;
t17 = -qJD(4) * t110 + qJD(5) * t120 - t633;
t16 = -qJD(4) * t116 - qJD(5) * t113 + t632;
t14 = t342 * t449 + t343 * t448 + t364 * t357;
t13 = t324 * t435 + t342 * t453 + t364 * t353;
t11 = (t468 + t622) * t435 - t607;
t10 = (t469 - t622) * t435 + t607;
t6 = t115 * qJD(4) + t119 * qJD(5) + t353 * t433 + t633;
t5 = qJD(4) * t621 + t114 * qJD(5) + t611 * t612 - t632;
t4 = t58 * qJD(4) + t337 * t432 + t199 - 0.2e1 * t407;
t25 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t456, t338 * qJD(2), 0, -t456, 0, 0, -pkin(1) * t486, -pkin(1) * t485, 0, 0, -t615, t484 * t200, 0, t615, 0, 0, -t233 * qJD(2) - t321 * t514, -t234 * qJD(2) + t320 * t514, 0, -qJD(2) * t481, t373, -t631 * t625, 0, -t372, 0, 0, t68 * qJD(2) - t75 * qJD(3) + t285 * t494, t69 * qJD(2) - t76 * qJD(3) + t285 * t495, 0, (qJD(2) * t288 - t321 * t571) * t285, t352 * t373 - t426, -0.2e1 * t353 * t619 * t621 - t125 * qJD(5), t466 * t611 + t631 * t629, t351 * t373 + t426, t465 * t611 - t631 * t630, -t372, t28 * qJD(2) + t30 * qJD(3) + t36 * qJD(4) + t466 * t88, -t27 * qJD(2) - t29 * qJD(3) - t35 * qJD(4) + t465 * t88, -qJD(2) * t1 - qJD(3) * t2 - qJD(4) * t3, qJD(2) * t7 + qJD(3) * t8 + qJD(4) * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t340, t487, -t485, -t340, t486, 0, -t479, -t478, 0, 0, -t460, t502, t256, t460, t257, 0, -t501, -t500, (-t581 * t320 + t321 * t355) * t572, -t429, t620, -t628, t619, -t130, t64, 0, t537, t536, (-t551 + t552) * qJD(2) + t23 * qJD(3), t461, t11, t4, t6, t10, t5, t72, t13 * qJD(3) + t19 * qJD(4) + t45 * qJD(5) + t353 * t383 + t555, t14 * qJD(3) + t20 * qJD(4) + t44 * qJD(5) + t357 * t383 - t556, -t569, t565; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t460, t502, t256, t460, t257, 0, -t458, t459, 0, 0, t620, -t628, t619, -t130, t64, 0, -t532, -t531, t23 * qJD(2) + (-t473 - t558) * t571, -t430, t11, t4, t6, t10, t5, t72, t13 * qJD(2) + t32 * qJD(4) + t49 * qJD(5) + t353 * t382 + t553, t14 * qJD(2) + t33 * qJD(4) + t48 * qJD(5) + t357 * t382 - t554, -t568, t564; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t620, -t628, t619, -t620, t166 * t484 - t494, 0, t462, t463, 0, 0, -(-t457 - t468) * t435 + t606, t199 + t484 * t58 - (-qJD(4) * t337 + t412) * t435, t115 * t484 + t353 * t494 + t633, -(t457 - t469) * t435 - t606, t357 * t494 + t484 * t621 - t632, t384, t19 * qJD(2) + t32 * qJD(3) + t55 * qJD(5) + t353 * t392 + t543, t20 * qJD(2) + t33 * qJD(3) + t54 * qJD(5) + t357 * t392 - t550, -t566, t563; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t24, t613 * t616 - t505, t119 * t484 + t402 * t611, t24, t114 * t484 + t401 * t611, t67, t45 * qJD(2) + t49 * qJD(3) + t55 * qJD(4) + t402 * t88, t44 * qJD(2) + t48 * qJD(3) + t54 * qJD(4) + t401 * t88, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t340, -t487, 0, t340, 0, 0, t479, t478, 0, 0, t460, -t502, 0, -t460, 0, 0, t501, t500, 0, t429, -t620, t628, 0, t130, -t242, 0, -t537, -t536, -qJD(3) * t22, -t461, t38, t26, t17, t37, t16, -t72, qJD(3) * t12 + qJD(4) * t18 - qJD(5) * t46 - t555, qJD(3) * t15 + qJD(4) * t21 + qJD(5) * t43 + t556, t569, -t565; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3) * t579, -pkin(2) * t441, 0, 0, 0, 0, 0, 0, 0, 0, t524, -t314 + t298, 0, qJD(3) * t132, t339, t326, 0, -t339, 0, 0, t302 * t512 + t357 * t524, t302 * t349 + t284 + t295, t215 - t191, qJD(3) * t74 + qJD(4) * t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t484 * t579, (-t442 - t441) * pkin(2), 0, 0, 0, 0, 0, 0, 0, 0, t258 * qJD(4) - t312 - t489, t259 * qJD(4) - t314 - t488, -t560, t504 + (-t580 * t317 + t319 * t354) * t571, t339, t326, 0, -t339, 0, 0, t176 * qJD(4) + t163 * qJD(5) - t317 * t612 + t562, t173 * qJD(4) + t164 * qJD(5) + t295 - t388, t80 * qJD(4) + t215 + t499, t533 + (t235 * t342 + t317 * t343) * qJD(3) + t40 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t497, 0, t258 * qJD(3) - t299 - t490, t259 * qJD(3) + t298 + t491, 0, 0, t84, t326, -t509, -t84, -t507, 0, t561 + t176 * qJD(3) + t171 * qJD(5) + (-qJD(2) - qJD(4)) * t357 * t311, t173 * qJD(3) + t172 * qJD(5) + t284 - t387, t80 * qJD(3) - t191 - t503, t538 + t40 * qJD(3) + (-t311 * pkin(4) - pkin(6) * t198) * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, t127, t94, -t79, t93, -t617, t163 * qJD(3) + t171 * qJD(4) - t303 * t349 - t386, t164 * qJD(3) + t172 * qJD(4) + t303 * t512 - t385, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t460, -t502, 0, -t460, 0, 0, t458, -t459, 0, 0, -t620, t628, 0, t130, -t242, 0, t532, t531, qJD(2) * t22, t430, t38, t26, t17, t37, t16, -t72, -qJD(2) * t12 + qJD(4) * t31 - qJD(5) * t50 - t553, -qJD(2) * t15 + qJD(4) * t34 + qJD(5) * t47 + t554, t568, -t564; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t355 * t572, pkin(2) * t442, 0, 0, 0, 0, 0, 0, 0, 0, -t269 * qJD(4) + t489, -t271 * qJD(4) + t488, t560, -t504, t339, t326, 0, -t339, 0, 0, -t175 * qJD(4) - t161 * qJD(5) + t357 * t489 - t562, t174 * qJD(4) - t162 * qJD(5) + t388, t81 * qJD(4) - t499, qJD(4) * t41 - t533; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t477, -pkin(3) * t439, 0, 0, t339, t326, 0, -t339, 0, 0, t343 * t512 - t357 * t477, t343 * t349 + t336, t313, t244 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t497, 0, t417 - t493, -t492 + (-t440 - t439) * pkin(3), 0, 0, t84, t326, -t509, -t84, -t507, 0, t272 * qJD(5) + t357 * t417 + t405, t273 * qJD(5) + t336 - t369, t313 - t403, (-pkin(4) * t354 + pkin(6) * t378) * t570 - t404; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, t127, t94, -t79, t93, -t617, t272 * qJD(4) - t342 * t349 - t371, t273 * qJD(4) + t342 * t512 - t370, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t620, t628, 0, t620, t484 * t248, 0, -t462, -t463, 0, 0, -t605 - t626, -t413 * t435 + t199, -qJD(5) * t118 + t110 * t484 - t633, t605 - t627, qJD(5) * t111 + t116 * t484 + t632, -t384, -qJD(2) * t18 - qJD(3) * t31 - qJD(5) * t56 - t543, -qJD(2) * t21 - qJD(3) * t34 + qJD(5) * t53 + t550, t566, -t563; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t497, 0, t269 * qJD(3) + t490, t271 * qJD(3) - t491, 0, 0, -t85, t326, t509, t85, t507, 0, t175 * qJD(3) - t169 * qJD(5) + t357 * t490 - t561, -t174 * qJD(3) - t170 * qJD(5) + t387, -t81 * qJD(3) + t503, -qJD(3) * t41 - t538; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t497, 0, t476 + t493, pkin(3) * t440 + t492, 0, 0, -t85, t326, t509, t85, t507, 0, -t268 * qJD(5) + t357 * t476 - t405, -t270 * qJD(5) + t369, t403, t404; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t339, t326, 0, -t339, 0, 0, -pkin(4) * t512, -pkin(4) * t349, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, t127, t349 - t506, -t79, t508 - t512, -t617, -pkin(6) * t349 - t367, pkin(6) * t512 - t366, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, 0.2e1 * t611 * t613 + t505, t118 * qJD(4) - t120 * t484 - t353 * t620, -t24, -t111 * qJD(4) + t113 * t484 - t357 * t620, t67, t46 * qJD(2) + t50 * qJD(3) + t56 * qJD(4) - t353 * t475, -t43 * qJD(2) - t47 * qJD(3) - t53 * qJD(4) - t357 * t475, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t79, t126, -t106, t79, t103, t617, t161 * qJD(3) + t169 * qJD(4) + t386, t162 * qJD(3) + t170 * qJD(4) + t385, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t79, t126, -t106, t79, t103, t617, t268 * qJD(4) + t371, t270 * qJD(4) + t370, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t79, t126, t506, t79, -t508, t617, t367, t366, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t25;
