% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d5]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:52
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRRR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S5RRRRR1_invdynf_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:51:56
% EndTime: 2019-12-05 18:52:00
% DurationCPUTime: 3.76s
% Computational Cost: add. (22497->219), mult. (49732->334), div. (0->0), fcn. (39089->10), ass. (0->198)
t1551 = sin(qJ(3));
t1556 = cos(qJ(3));
t1557 = cos(qJ(2));
t1581 = qJD(1) * t1557;
t1552 = sin(qJ(2));
t1582 = qJD(1) * t1552;
t1511 = t1551 * t1582 - t1556 * t1581;
t1512 = (-t1551 * t1557 - t1552 * t1556) * qJD(1);
t1550 = sin(qJ(4));
t1555 = cos(qJ(4));
t1489 = -t1555 * t1511 + t1550 * t1512;
t1488 = qJD(5) + t1489;
t1590 = qJD(5) + t1488;
t1568 = qJD(2) * t1581;
t1572 = t1552 * qJDD(1);
t1520 = -t1568 - t1572;
t1569 = qJD(2) * t1582;
t1571 = t1557 * qJDD(1);
t1523 = t1569 - t1571;
t1564 = t1551 * t1520 - t1556 * t1523;
t1481 = -t1512 * qJD(3) - t1564;
t1482 = t1511 * qJD(3) + t1556 * t1520 + t1551 * t1523;
t1441 = -t1489 * qJD(4) + t1550 * t1481 + t1555 * t1482;
t1545 = qJD(2) + qJD(3);
t1540 = qJD(4) + t1545;
t1577 = t1540 * t1489;
t1434 = t1441 - t1577;
t1510 = t1511 ^ 2;
t1544 = t1545 ^ 2;
t1492 = -t1510 - t1544;
t1491 = t1550 * t1511 + t1555 * t1512;
t1549 = sin(qJ(5));
t1554 = cos(qJ(5));
t1477 = t1549 * t1491 - t1554 * t1540;
t1589 = t1477 ^ 2;
t1479 = t1554 * t1491 + t1549 * t1540;
t1588 = t1479 ^ 2;
t1587 = t1488 ^ 2;
t1586 = t1489 ^ 2;
t1585 = t1491 ^ 2;
t1584 = t1512 ^ 2;
t1583 = t1540 ^ 2;
t1580 = t1479 * t1477;
t1579 = t1491 * t1489;
t1578 = t1511 * t1512;
t1576 = t1540 * t1491;
t1575 = t1545 * t1511;
t1574 = qJD(5) - t1488;
t1553 = sin(qJ(1));
t1558 = cos(qJ(1));
t1531 = -t1558 * g(1) - t1553 * g(2);
t1560 = qJD(1) ^ 2;
t1519 = -t1560 * pkin(1) + t1531;
t1506 = t1557 * g(3) - t1552 * t1519;
t1537 = t1557 * t1560 * t1552;
t1528 = qJDD(2) + t1537;
t1498 = pkin(2) * t1528 + t1506;
t1507 = t1552 * g(3) + t1557 * t1519;
t1547 = t1557 ^ 2;
t1559 = qJD(2) ^ 2;
t1535 = -t1547 * t1560 - t1559;
t1499 = pkin(2) * t1535 + t1507;
t1470 = t1551 * t1498 + t1556 * t1499;
t1458 = t1492 * pkin(3) + t1470;
t1469 = t1556 * t1498 - t1551 * t1499;
t1570 = qJDD(2) + qJDD(3);
t1493 = t1570 + t1578;
t1561 = pkin(3) * t1493 + t1469;
t1431 = t1555 * t1458 + t1550 * t1561;
t1546 = t1552 ^ 2;
t1573 = -t1546 - t1547;
t1567 = t1491 * qJD(4) - t1555 * t1481 + t1550 * t1482;
t1530 = t1553 * g(1) - t1558 * g(2);
t1566 = qJDD(4) + t1570;
t1565 = -t1549 * t1441 + t1554 * t1566;
t1430 = -t1550 * t1458 + t1555 * t1561;
t1563 = -qJDD(5) - t1567;
t1518 = qJDD(1) * pkin(1) + t1530;
t1432 = t1567 + t1576;
t1562 = -t1554 * t1441 - t1549 * t1566;
t1496 = (-t1523 - t1569) * pkin(2) + t1518;
t1455 = t1496 + (t1512 * t1545 - t1481) * pkin(3);
t1534 = -t1546 * t1560 - t1559;
t1529 = -qJDD(2) + t1537;
t1527 = t1573 * t1560;
t1526 = -t1553 * qJDD(1) - t1558 * t1560;
t1525 = t1558 * qJDD(1) - t1553 * t1560;
t1524 = t1573 * qJDD(1);
t1522 = -0.2e1 * t1569 + t1571;
t1521 = -0.2e1 * t1568 - t1572;
t1504 = -t1544 - t1584;
t1503 = t1557 * t1529 - t1552 * t1534;
t1502 = -t1552 * t1528 + t1557 * t1535;
t1501 = -t1552 * t1529 - t1557 * t1534;
t1500 = -t1557 * t1528 - t1552 * t1535;
t1494 = -t1570 + t1578;
t1485 = -t1552 * t1506 + t1557 * t1507;
t1484 = -t1557 * t1506 - t1552 * t1507;
t1483 = -t1510 - t1584;
t1480 = -t1583 - t1585;
t1472 = t1556 * t1494 - t1551 * t1504;
t1471 = t1551 * t1494 + t1556 * t1504;
t1468 = -t1482 + t1575;
t1467 = t1482 + t1575;
t1466 = -(qJD(3) - t1545) * t1512 - t1564;
t1465 = -(-qJD(3) - t1545) * t1512 + t1564;
t1464 = t1556 * t1492 - t1551 * t1493;
t1463 = t1551 * t1492 + t1556 * t1493;
t1462 = t1489 * pkin(4) - t1491 * pkin(6);
t1461 = -t1566 - t1579;
t1460 = t1566 - t1579;
t1459 = -t1583 - t1586;
t1452 = -t1585 - t1586;
t1451 = -t1587 - t1588;
t1450 = t1555 * t1461 - t1550 * t1480;
t1449 = t1550 * t1461 + t1555 * t1480;
t1448 = -t1552 * t1471 + t1557 * t1472;
t1447 = -t1557 * t1471 - t1552 * t1472;
t1446 = -t1587 - t1589;
t1445 = -t1551 * t1469 + t1556 * t1470;
t1444 = t1556 * t1466 - t1551 * t1468;
t1443 = t1556 * t1469 + t1551 * t1470;
t1442 = t1551 * t1466 + t1556 * t1468;
t1440 = -t1588 - t1589;
t1439 = -t1552 * t1463 + t1557 * t1464;
t1438 = -t1557 * t1463 - t1552 * t1464;
t1437 = t1555 * t1459 - t1550 * t1460;
t1436 = t1550 * t1459 + t1555 * t1460;
t1435 = -t1441 - t1577;
t1433 = -t1567 + t1576;
t1429 = t1563 - t1580;
t1428 = -t1563 - t1580;
t1427 = -t1551 * t1449 + t1556 * t1450;
t1426 = t1556 * t1449 + t1551 * t1450;
t1425 = -t1552 * t1443 + t1557 * t1445;
t1424 = -t1552 * t1442 + t1557 * t1444;
t1423 = -t1557 * t1443 - t1552 * t1445;
t1422 = -t1557 * t1442 - t1552 * t1444;
t1421 = t1574 * t1477 + t1562;
t1420 = -t1590 * t1477 - t1562;
t1419 = -t1574 * t1479 + t1565;
t1418 = t1590 * t1479 - t1565;
t1417 = -t1583 * pkin(4) + pkin(6) * t1566 - t1489 * t1462 + t1431;
t1416 = -pkin(4) * t1566 - t1583 * pkin(6) + t1491 * t1462 - t1430;
t1415 = -t1551 * t1436 + t1556 * t1437;
t1414 = t1556 * t1436 + t1551 * t1437;
t1413 = t1555 * t1433 - t1550 * t1435;
t1412 = t1550 * t1433 + t1555 * t1435;
t1411 = t1554 * t1429 - t1549 * t1451;
t1410 = t1549 * t1429 + t1554 * t1451;
t1409 = -t1549 * t1428 + t1554 * t1446;
t1408 = t1554 * t1428 + t1549 * t1446;
t1407 = -t1550 * t1430 + t1555 * t1431;
t1406 = t1555 * t1430 + t1550 * t1431;
t1405 = t1432 * pkin(4) - t1434 * pkin(6) + t1455;
t1404 = -t1552 * t1426 + t1557 * t1427;
t1403 = -t1557 * t1426 - t1552 * t1427;
t1402 = t1554 * t1419 - t1549 * t1421;
t1401 = t1549 * t1419 + t1554 * t1421;
t1400 = t1555 * t1411 + t1550 * t1420;
t1399 = t1550 * t1411 - t1555 * t1420;
t1398 = t1555 * t1409 + t1550 * t1418;
t1397 = t1550 * t1409 - t1555 * t1418;
t1396 = -t1552 * t1414 + t1557 * t1415;
t1395 = -t1557 * t1414 - t1552 * t1415;
t1394 = t1555 * t1402 + t1550 * t1440;
t1393 = t1550 * t1402 - t1555 * t1440;
t1392 = -t1551 * t1412 + t1556 * t1413;
t1391 = t1556 * t1412 + t1551 * t1413;
t1390 = t1549 * t1405 + t1554 * t1417;
t1389 = t1554 * t1405 - t1549 * t1417;
t1388 = -t1551 * t1406 + t1556 * t1407;
t1387 = t1556 * t1406 + t1551 * t1407;
t1386 = -t1551 * t1399 + t1556 * t1400;
t1385 = t1556 * t1399 + t1551 * t1400;
t1384 = -t1551 * t1397 + t1556 * t1398;
t1383 = t1556 * t1397 + t1551 * t1398;
t1382 = -t1551 * t1393 + t1556 * t1394;
t1381 = t1556 * t1393 + t1551 * t1394;
t1380 = -t1552 * t1391 + t1557 * t1392;
t1379 = -t1557 * t1391 - t1552 * t1392;
t1378 = -t1549 * t1389 + t1554 * t1390;
t1377 = t1554 * t1389 + t1549 * t1390;
t1376 = -t1552 * t1387 + t1557 * t1388;
t1375 = -t1557 * t1387 - t1552 * t1388;
t1374 = t1555 * t1378 + t1550 * t1416;
t1373 = t1550 * t1378 - t1555 * t1416;
t1372 = -t1552 * t1385 + t1557 * t1386;
t1371 = -t1557 * t1385 - t1552 * t1386;
t1370 = -t1552 * t1383 + t1557 * t1384;
t1369 = -t1557 * t1383 - t1552 * t1384;
t1368 = -t1552 * t1381 + t1557 * t1382;
t1367 = -t1557 * t1381 - t1552 * t1382;
t1366 = -t1551 * t1373 + t1556 * t1374;
t1365 = t1556 * t1373 + t1551 * t1374;
t1364 = -t1552 * t1365 + t1557 * t1366;
t1363 = -t1557 * t1365 - t1552 * t1366;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1526, -t1525, 0, -t1553 * t1530 + t1558 * t1531, 0, 0, 0, 0, 0, 0, t1558 * t1502 - t1553 * t1522, t1558 * t1503 - t1553 * t1521, t1558 * t1524 - t1553 * t1527, t1558 * t1485 - t1553 * t1518, 0, 0, 0, 0, 0, 0, t1558 * t1439 - t1553 * t1465, t1558 * t1448 - t1553 * t1467, t1558 * t1424 - t1553 * t1483, t1558 * t1425 - t1553 * t1496, 0, 0, 0, 0, 0, 0, t1558 * t1396 - t1553 * t1432, t1558 * t1404 - t1553 * t1434, t1558 * t1380 - t1553 * t1452, t1558 * t1376 - t1553 * t1455, 0, 0, 0, 0, 0, 0, t1558 * t1370 - t1553 * t1408, t1558 * t1372 - t1553 * t1410, t1558 * t1368 - t1553 * t1401, t1558 * t1364 - t1553 * t1377; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1525, t1526, 0, t1558 * t1530 + t1553 * t1531, 0, 0, 0, 0, 0, 0, t1553 * t1502 + t1558 * t1522, t1553 * t1503 + t1558 * t1521, t1553 * t1524 + t1558 * t1527, t1553 * t1485 + t1558 * t1518, 0, 0, 0, 0, 0, 0, t1553 * t1439 + t1558 * t1465, t1553 * t1448 + t1558 * t1467, t1553 * t1424 + t1558 * t1483, t1553 * t1425 + t1558 * t1496, 0, 0, 0, 0, 0, 0, t1553 * t1396 + t1558 * t1432, t1553 * t1404 + t1558 * t1434, t1553 * t1380 + t1558 * t1452, t1553 * t1376 + t1558 * t1455, 0, 0, 0, 0, 0, 0, t1553 * t1370 + t1558 * t1408, t1553 * t1372 + t1558 * t1410, t1553 * t1368 + t1558 * t1401, t1553 * t1364 + t1558 * t1377; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1500, t1501, 0, t1484, 0, 0, 0, 0, 0, 0, t1438, t1447, t1422, t1423, 0, 0, 0, 0, 0, 0, t1395, t1403, t1379, t1375, 0, 0, 0, 0, 0, 0, t1369, t1371, t1367, t1363; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1560, -qJDD(1), 0, t1531, 0, 0, 0, 0, 0, 0, t1502, t1503, t1524, t1485, 0, 0, 0, 0, 0, 0, t1439, t1448, t1424, t1425, 0, 0, 0, 0, 0, 0, t1396, t1404, t1380, t1376, 0, 0, 0, 0, 0, 0, t1370, t1372, t1368, t1364; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1560, 0, t1530, 0, 0, 0, 0, 0, 0, t1522, t1521, t1527, t1518, 0, 0, 0, 0, 0, 0, t1465, t1467, t1483, t1496, 0, 0, 0, 0, 0, 0, t1432, t1434, t1452, t1455, 0, 0, 0, 0, 0, 0, t1408, t1410, t1401, t1377; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1500, t1501, 0, t1484, 0, 0, 0, 0, 0, 0, t1438, t1447, t1422, t1423, 0, 0, 0, 0, 0, 0, t1395, t1403, t1379, t1375, 0, 0, 0, 0, 0, 0, t1369, t1371, t1367, t1363; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1535, t1529, -t1571, t1507, 0, 0, 0, 0, 0, 0, t1464, t1472, t1444, t1445, 0, 0, 0, 0, 0, 0, t1415, t1427, t1392, t1388, 0, 0, 0, 0, 0, 0, t1384, t1386, t1382, t1366; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1528, t1534, t1572, t1506, 0, 0, 0, 0, 0, 0, t1463, t1471, t1442, t1443, 0, 0, 0, 0, 0, 0, t1414, t1426, t1391, t1387, 0, 0, 0, 0, 0, 0, t1383, t1385, t1381, t1365; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1522, t1521, t1527, t1518, 0, 0, 0, 0, 0, 0, t1465, t1467, t1483, t1496, 0, 0, 0, 0, 0, 0, t1432, t1434, t1452, t1455, 0, 0, 0, 0, 0, 0, t1408, t1410, t1401, t1377; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1492, t1494, t1466, t1470, 0, 0, 0, 0, 0, 0, t1437, t1450, t1413, t1407, 0, 0, 0, 0, 0, 0, t1398, t1400, t1394, t1374; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1493, t1504, t1468, t1469, 0, 0, 0, 0, 0, 0, t1436, t1449, t1412, t1406, 0, 0, 0, 0, 0, 0, t1397, t1399, t1393, t1373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1465, t1467, t1483, t1496, 0, 0, 0, 0, 0, 0, t1432, t1434, t1452, t1455, 0, 0, 0, 0, 0, 0, t1408, t1410, t1401, t1377; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1459, t1461, t1433, t1431, 0, 0, 0, 0, 0, 0, t1409, t1411, t1402, t1378; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1460, t1480, t1435, t1430, 0, 0, 0, 0, 0, 0, -t1418, -t1420, -t1440, -t1416; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1432, t1434, t1452, t1455, 0, 0, 0, 0, 0, 0, t1408, t1410, t1401, t1377; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1446, t1429, t1419, t1390; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1428, t1451, t1421, t1389; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1418, t1420, t1440, t1416;];
f_new_reg = t1;
