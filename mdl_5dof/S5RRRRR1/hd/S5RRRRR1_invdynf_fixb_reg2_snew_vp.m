% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d5]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 19:27
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRRR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S5RRRRR1_invdynf_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 19:27:33
% EndTime: 2019-05-04 19:27:36
% DurationCPUTime: 3.77s
% Computational Cost: add. (22497->219), mult. (49732->334), div. (0->0), fcn. (39089->10), ass. (0->198)
t1550 = sin(qJ(3));
t1555 = cos(qJ(3));
t1556 = cos(qJ(2));
t1580 = qJD(1) * t1556;
t1551 = sin(qJ(2));
t1581 = qJD(1) * t1551;
t1510 = t1550 * t1581 - t1555 * t1580;
t1511 = (-t1550 * t1556 - t1551 * t1555) * qJD(1);
t1549 = sin(qJ(4));
t1554 = cos(qJ(4));
t1488 = -t1554 * t1510 + t1511 * t1549;
t1487 = qJD(5) + t1488;
t1589 = qJD(5) + t1487;
t1567 = qJD(2) * t1580;
t1571 = t1551 * qJDD(1);
t1519 = -t1567 - t1571;
t1568 = qJD(2) * t1581;
t1570 = t1556 * qJDD(1);
t1522 = t1568 - t1570;
t1563 = t1550 * t1519 - t1555 * t1522;
t1480 = -qJD(3) * t1511 - t1563;
t1481 = t1510 * qJD(3) + t1555 * t1519 + t1550 * t1522;
t1440 = -t1488 * qJD(4) + t1549 * t1480 + t1554 * t1481;
t1544 = qJD(2) + qJD(3);
t1539 = qJD(4) + t1544;
t1577 = t1488 * t1539;
t1433 = t1440 - t1577;
t1509 = t1510 ^ 2;
t1543 = t1544 ^ 2;
t1491 = -t1509 - t1543;
t1490 = t1510 * t1549 + t1511 * t1554;
t1548 = sin(qJ(5));
t1553 = cos(qJ(5));
t1476 = t1490 * t1548 - t1553 * t1539;
t1588 = t1476 ^ 2;
t1478 = t1490 * t1553 + t1539 * t1548;
t1587 = t1478 ^ 2;
t1586 = t1487 ^ 2;
t1585 = t1488 ^ 2;
t1584 = t1490 ^ 2;
t1583 = t1511 ^ 2;
t1582 = t1539 ^ 2;
t1579 = t1476 * t1478;
t1578 = t1488 * t1490;
t1576 = t1490 * t1539;
t1575 = t1510 * t1511;
t1574 = t1510 * t1544;
t1573 = qJD(5) - t1487;
t1552 = sin(qJ(1));
t1557 = cos(qJ(1));
t1530 = -g(1) * t1557 - g(2) * t1552;
t1559 = qJD(1) ^ 2;
t1518 = -pkin(1) * t1559 + t1530;
t1505 = t1556 * g(3) - t1551 * t1518;
t1536 = t1556 * t1559 * t1551;
t1527 = qJDD(2) + t1536;
t1497 = pkin(2) * t1527 + t1505;
t1506 = t1551 * g(3) + t1556 * t1518;
t1546 = t1556 ^ 2;
t1558 = qJD(2) ^ 2;
t1534 = -t1546 * t1559 - t1558;
t1498 = pkin(2) * t1534 + t1506;
t1469 = t1550 * t1497 + t1555 * t1498;
t1457 = pkin(3) * t1491 + t1469;
t1468 = t1555 * t1497 - t1550 * t1498;
t1569 = qJDD(2) + qJDD(3);
t1492 = t1569 + t1575;
t1560 = pkin(3) * t1492 + t1468;
t1430 = t1554 * t1457 + t1549 * t1560;
t1545 = t1551 ^ 2;
t1572 = -t1545 - t1546;
t1566 = t1490 * qJD(4) - t1554 * t1480 + t1549 * t1481;
t1529 = t1552 * g(1) - t1557 * g(2);
t1565 = qJDD(4) + t1569;
t1564 = -t1548 * t1440 + t1553 * t1565;
t1429 = -t1549 * t1457 + t1554 * t1560;
t1562 = -qJDD(5) - t1566;
t1517 = qJDD(1) * pkin(1) + t1529;
t1431 = t1566 + t1576;
t1561 = -t1553 * t1440 - t1548 * t1565;
t1495 = (-t1522 - t1568) * pkin(2) + t1517;
t1454 = t1495 + (t1511 * t1544 - t1480) * pkin(3);
t1533 = -t1545 * t1559 - t1558;
t1528 = -qJDD(2) + t1536;
t1526 = t1572 * t1559;
t1525 = -qJDD(1) * t1552 - t1557 * t1559;
t1524 = qJDD(1) * t1557 - t1552 * t1559;
t1523 = t1572 * qJDD(1);
t1521 = -0.2e1 * t1568 + t1570;
t1520 = -0.2e1 * t1567 - t1571;
t1503 = -t1543 - t1583;
t1502 = t1528 * t1556 - t1533 * t1551;
t1501 = -t1527 * t1551 + t1534 * t1556;
t1500 = -t1528 * t1551 - t1533 * t1556;
t1499 = -t1527 * t1556 - t1534 * t1551;
t1493 = -t1569 + t1575;
t1484 = -t1505 * t1551 + t1506 * t1556;
t1483 = -t1505 * t1556 - t1506 * t1551;
t1482 = -t1509 - t1583;
t1479 = -t1582 - t1584;
t1471 = t1493 * t1555 - t1503 * t1550;
t1470 = t1493 * t1550 + t1503 * t1555;
t1467 = -t1481 + t1574;
t1466 = t1481 + t1574;
t1465 = -(qJD(3) - t1544) * t1511 - t1563;
t1464 = -(-qJD(3) - t1544) * t1511 + t1563;
t1463 = t1491 * t1555 - t1492 * t1550;
t1462 = t1491 * t1550 + t1492 * t1555;
t1461 = pkin(4) * t1488 - pkin(6) * t1490;
t1460 = -t1565 - t1578;
t1459 = t1565 - t1578;
t1458 = -t1582 - t1585;
t1451 = -t1584 - t1585;
t1450 = -t1586 - t1587;
t1449 = t1460 * t1554 - t1479 * t1549;
t1448 = t1460 * t1549 + t1479 * t1554;
t1447 = -t1470 * t1551 + t1471 * t1556;
t1446 = -t1470 * t1556 - t1471 * t1551;
t1445 = -t1586 - t1588;
t1444 = -t1468 * t1550 + t1469 * t1555;
t1443 = t1465 * t1555 - t1467 * t1550;
t1442 = t1468 * t1555 + t1469 * t1550;
t1441 = t1465 * t1550 + t1467 * t1555;
t1439 = -t1587 - t1588;
t1438 = -t1462 * t1551 + t1463 * t1556;
t1437 = -t1462 * t1556 - t1463 * t1551;
t1436 = t1458 * t1554 - t1459 * t1549;
t1435 = t1458 * t1549 + t1459 * t1554;
t1434 = -t1440 - t1577;
t1432 = -t1566 + t1576;
t1428 = t1562 - t1579;
t1427 = -t1562 - t1579;
t1426 = -t1448 * t1550 + t1449 * t1555;
t1425 = t1448 * t1555 + t1449 * t1550;
t1424 = -t1442 * t1551 + t1444 * t1556;
t1423 = -t1441 * t1551 + t1443 * t1556;
t1422 = -t1442 * t1556 - t1444 * t1551;
t1421 = -t1441 * t1556 - t1443 * t1551;
t1420 = t1476 * t1573 + t1561;
t1419 = -t1476 * t1589 - t1561;
t1418 = -t1478 * t1573 + t1564;
t1417 = t1478 * t1589 - t1564;
t1416 = -pkin(4) * t1582 + pkin(6) * t1565 - t1488 * t1461 + t1430;
t1415 = -pkin(4) * t1565 - pkin(6) * t1582 + t1490 * t1461 - t1429;
t1414 = -t1435 * t1550 + t1436 * t1555;
t1413 = t1435 * t1555 + t1436 * t1550;
t1412 = t1432 * t1554 - t1434 * t1549;
t1411 = t1432 * t1549 + t1434 * t1554;
t1410 = t1428 * t1553 - t1450 * t1548;
t1409 = t1428 * t1548 + t1450 * t1553;
t1408 = -t1427 * t1548 + t1445 * t1553;
t1407 = t1427 * t1553 + t1445 * t1548;
t1406 = -t1429 * t1549 + t1430 * t1554;
t1405 = t1429 * t1554 + t1430 * t1549;
t1404 = t1431 * pkin(4) - pkin(6) * t1433 + t1454;
t1403 = -t1425 * t1551 + t1426 * t1556;
t1402 = -t1425 * t1556 - t1426 * t1551;
t1401 = t1418 * t1553 - t1420 * t1548;
t1400 = t1418 * t1548 + t1420 * t1553;
t1399 = t1410 * t1554 + t1419 * t1549;
t1398 = t1410 * t1549 - t1419 * t1554;
t1397 = t1408 * t1554 + t1417 * t1549;
t1396 = t1408 * t1549 - t1417 * t1554;
t1395 = -t1413 * t1551 + t1414 * t1556;
t1394 = -t1413 * t1556 - t1414 * t1551;
t1393 = t1401 * t1554 + t1439 * t1549;
t1392 = t1401 * t1549 - t1439 * t1554;
t1391 = -t1411 * t1550 + t1412 * t1555;
t1390 = t1411 * t1555 + t1412 * t1550;
t1389 = t1404 * t1548 + t1416 * t1553;
t1388 = t1404 * t1553 - t1416 * t1548;
t1387 = -t1405 * t1550 + t1406 * t1555;
t1386 = t1405 * t1555 + t1406 * t1550;
t1385 = -t1398 * t1550 + t1399 * t1555;
t1384 = t1398 * t1555 + t1399 * t1550;
t1383 = -t1396 * t1550 + t1397 * t1555;
t1382 = t1396 * t1555 + t1397 * t1550;
t1381 = -t1392 * t1550 + t1393 * t1555;
t1380 = t1392 * t1555 + t1393 * t1550;
t1379 = -t1390 * t1551 + t1391 * t1556;
t1378 = -t1390 * t1556 - t1391 * t1551;
t1377 = -t1388 * t1548 + t1389 * t1553;
t1376 = t1388 * t1553 + t1389 * t1548;
t1375 = -t1386 * t1551 + t1387 * t1556;
t1374 = -t1386 * t1556 - t1387 * t1551;
t1373 = t1377 * t1554 + t1415 * t1549;
t1372 = t1377 * t1549 - t1415 * t1554;
t1371 = -t1384 * t1551 + t1385 * t1556;
t1370 = -t1384 * t1556 - t1385 * t1551;
t1369 = -t1382 * t1551 + t1383 * t1556;
t1368 = -t1382 * t1556 - t1383 * t1551;
t1367 = -t1380 * t1551 + t1381 * t1556;
t1366 = -t1380 * t1556 - t1381 * t1551;
t1365 = -t1372 * t1550 + t1373 * t1555;
t1364 = t1372 * t1555 + t1373 * t1550;
t1363 = -t1364 * t1551 + t1365 * t1556;
t1362 = -t1364 * t1556 - t1365 * t1551;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1525, -t1524, 0, -t1529 * t1552 + t1530 * t1557, 0, 0, 0, 0, 0, 0, t1501 * t1557 - t1521 * t1552, t1502 * t1557 - t1520 * t1552, t1523 * t1557 - t1526 * t1552, t1484 * t1557 - t1517 * t1552, 0, 0, 0, 0, 0, 0, t1438 * t1557 - t1464 * t1552, t1447 * t1557 - t1466 * t1552, t1423 * t1557 - t1482 * t1552, t1424 * t1557 - t1495 * t1552, 0, 0, 0, 0, 0, 0, t1395 * t1557 - t1431 * t1552, t1403 * t1557 - t1433 * t1552, t1379 * t1557 - t1451 * t1552, t1375 * t1557 - t1454 * t1552, 0, 0, 0, 0, 0, 0, t1369 * t1557 - t1407 * t1552, t1371 * t1557 - t1409 * t1552, t1367 * t1557 - t1400 * t1552, t1363 * t1557 - t1376 * t1552; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1524, t1525, 0, t1529 * t1557 + t1530 * t1552, 0, 0, 0, 0, 0, 0, t1501 * t1552 + t1521 * t1557, t1502 * t1552 + t1520 * t1557, t1523 * t1552 + t1526 * t1557, t1484 * t1552 + t1517 * t1557, 0, 0, 0, 0, 0, 0, t1438 * t1552 + t1464 * t1557, t1447 * t1552 + t1466 * t1557, t1423 * t1552 + t1482 * t1557, t1424 * t1552 + t1495 * t1557, 0, 0, 0, 0, 0, 0, t1395 * t1552 + t1431 * t1557, t1403 * t1552 + t1433 * t1557, t1379 * t1552 + t1451 * t1557, t1375 * t1552 + t1454 * t1557, 0, 0, 0, 0, 0, 0, t1369 * t1552 + t1407 * t1557, t1371 * t1552 + t1409 * t1557, t1367 * t1552 + t1400 * t1557, t1363 * t1552 + t1376 * t1557; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1499, t1500, 0, t1483, 0, 0, 0, 0, 0, 0, t1437, t1446, t1421, t1422, 0, 0, 0, 0, 0, 0, t1394, t1402, t1378, t1374, 0, 0, 0, 0, 0, 0, t1368, t1370, t1366, t1362; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1559, -qJDD(1), 0, t1530, 0, 0, 0, 0, 0, 0, t1501, t1502, t1523, t1484, 0, 0, 0, 0, 0, 0, t1438, t1447, t1423, t1424, 0, 0, 0, 0, 0, 0, t1395, t1403, t1379, t1375, 0, 0, 0, 0, 0, 0, t1369, t1371, t1367, t1363; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1559, 0, t1529, 0, 0, 0, 0, 0, 0, t1521, t1520, t1526, t1517, 0, 0, 0, 0, 0, 0, t1464, t1466, t1482, t1495, 0, 0, 0, 0, 0, 0, t1431, t1433, t1451, t1454, 0, 0, 0, 0, 0, 0, t1407, t1409, t1400, t1376; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1499, t1500, 0, t1483, 0, 0, 0, 0, 0, 0, t1437, t1446, t1421, t1422, 0, 0, 0, 0, 0, 0, t1394, t1402, t1378, t1374, 0, 0, 0, 0, 0, 0, t1368, t1370, t1366, t1362; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1534, t1528, -t1570, t1506, 0, 0, 0, 0, 0, 0, t1463, t1471, t1443, t1444, 0, 0, 0, 0, 0, 0, t1414, t1426, t1391, t1387, 0, 0, 0, 0, 0, 0, t1383, t1385, t1381, t1365; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1527, t1533, t1571, t1505, 0, 0, 0, 0, 0, 0, t1462, t1470, t1441, t1442, 0, 0, 0, 0, 0, 0, t1413, t1425, t1390, t1386, 0, 0, 0, 0, 0, 0, t1382, t1384, t1380, t1364; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1521, t1520, t1526, t1517, 0, 0, 0, 0, 0, 0, t1464, t1466, t1482, t1495, 0, 0, 0, 0, 0, 0, t1431, t1433, t1451, t1454, 0, 0, 0, 0, 0, 0, t1407, t1409, t1400, t1376; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1491, t1493, t1465, t1469, 0, 0, 0, 0, 0, 0, t1436, t1449, t1412, t1406, 0, 0, 0, 0, 0, 0, t1397, t1399, t1393, t1373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1492, t1503, t1467, t1468, 0, 0, 0, 0, 0, 0, t1435, t1448, t1411, t1405, 0, 0, 0, 0, 0, 0, t1396, t1398, t1392, t1372; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1464, t1466, t1482, t1495, 0, 0, 0, 0, 0, 0, t1431, t1433, t1451, t1454, 0, 0, 0, 0, 0, 0, t1407, t1409, t1400, t1376; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1458, t1460, t1432, t1430, 0, 0, 0, 0, 0, 0, t1408, t1410, t1401, t1377; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1459, t1479, t1434, t1429, 0, 0, 0, 0, 0, 0, -t1417, -t1419, -t1439, -t1415; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1431, t1433, t1451, t1454, 0, 0, 0, 0, 0, 0, t1407, t1409, t1400, t1376; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1445, t1428, t1418, t1389; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1427, t1450, t1420, t1388; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1417, t1419, t1439, t1415;];
f_new_reg  = t1;
