% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:52
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRRR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S5RRRRR1_invdynB_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:51:17
% EndTime: 2019-12-05 18:51:38
% DurationCPUTime: 15.85s
% Computational Cost: add. (57101->581), mult. (126464->933), div. (0->0), fcn. (99175->10), ass. (0->454)
t722 = sin(qJ(3));
t754 = qJDD(2) + qJDD(3);
t727 = cos(qJ(3));
t728 = cos(qJ(2));
t766 = t727 * t728;
t723 = sin(qJ(2));
t777 = t722 * t723;
t672 = (-t766 + t777) * qJD(1);
t776 = t722 * t728;
t673 = (-t723 * t727 - t776) * qJD(1);
t789 = t672 * t673;
t799 = t754 + t789;
t810 = t722 * t799;
t809 = t727 * t799;
t720 = sin(qJ(5));
t721 = sin(qJ(4));
t726 = cos(qJ(4));
t636 = t672 * t721 + t673 * t726;
t717 = qJD(2) + qJD(3);
t711 = qJD(4) + t717;
t725 = cos(qJ(5));
t607 = t636 * t720 - t711 * t725;
t609 = t636 * t725 + t711 * t720;
t562 = t609 * t607;
t759 = qJD(1) * qJD(2);
t744 = t728 * t759;
t758 = t723 * qJDD(1);
t684 = -t744 - t758;
t745 = t723 * t759;
t756 = t728 * qJDD(1);
t687 = t745 - t756;
t741 = t722 * t684 - t687 * t727;
t612 = -qJD(3) * t673 - t741;
t613 = qJD(3) * t672 + t684 * t727 + t687 * t722;
t742 = -t612 * t726 + t721 * t613;
t534 = -qJD(4) * t636 - t742;
t735 = qJDD(5) - t534;
t798 = -t562 + t735;
t808 = t720 * t798;
t634 = -t672 * t726 + t673 * t721;
t579 = t636 * t634;
t710 = qJDD(4) + t754;
t797 = -t579 + t710;
t807 = t721 * t797;
t724 = sin(qJ(1));
t729 = cos(qJ(1));
t696 = g(1) * t729 + g(2) * t724;
t731 = qJD(1) ^ 2;
t683 = -pkin(1) * t731 - t696;
t664 = -g(3) * t728 + t723 * t683;
t705 = t728 * t731 * t723;
t693 = qJDD(2) + t705;
t645 = pkin(2) * t693 - t664;
t665 = g(3) * t723 + t683 * t728;
t730 = qJD(2) ^ 2;
t719 = t728 ^ 2;
t783 = t719 * t731;
t703 = -t730 - t783;
t648 = pkin(2) * t703 + t665;
t592 = t645 * t722 + t648 * t727;
t670 = t672 ^ 2;
t716 = t717 ^ 2;
t637 = -t670 - t716;
t570 = pkin(3) * t637 + t592;
t737 = t727 * t645 - t722 * t648;
t732 = pkin(3) * t799 + t737;
t506 = t570 * t721 - t726 * t732;
t507 = t570 * t726 + t721 * t732;
t436 = t506 * t726 - t507 * t721;
t806 = t722 * t436;
t541 = -t592 * t722 - t727 * t737;
t805 = t723 * t541;
t804 = t725 * t798;
t803 = t726 * t797;
t802 = t727 * t436;
t801 = t728 * t541;
t800 = -t687 - t745;
t535 = -qJD(4) * t634 + t612 * t721 + t613 * t726;
t504 = -qJD(5) * t607 + t535 * t725 + t710 * t720;
t631 = qJD(5) + t634;
t569 = t631 * t607;
t478 = -t569 + t504;
t624 = t711 * t634;
t796 = -t624 + t535;
t666 = t717 * t672;
t795 = t666 + t613;
t743 = t720 * t535 - t710 * t725;
t475 = (qJD(5) - t631) * t609 + t743;
t605 = t607 ^ 2;
t606 = t609 ^ 2;
t630 = t631 ^ 2;
t632 = t634 ^ 2;
t633 = t636 ^ 2;
t671 = t673 ^ 2;
t794 = t711 ^ 2;
t736 = t664 * t728 - t665 * t723;
t793 = pkin(1) * t736;
t792 = pkin(4) * t721;
t791 = t631 * t720;
t790 = t631 * t725;
t788 = t711 * t721;
t787 = t711 * t726;
t786 = t717 * t722;
t785 = t717 * t727;
t718 = t723 ^ 2;
t784 = t718 * t731;
t575 = pkin(4) * t634 - pkin(6) * t636;
t465 = -pkin(4) * t710 - pkin(6) * t794 + t575 * t636 + t506;
t782 = t720 * t465;
t496 = t562 + t735;
t781 = t720 * t496;
t695 = t724 * g(1) - g(2) * t729;
t682 = qJDD(1) * pkin(1) + t695;
t643 = pkin(2) * t800 + t682;
t560 = t643 + (t673 * t717 - t612) * pkin(3);
t780 = t721 * t560;
t573 = t579 + t710;
t779 = t721 * t573;
t639 = -t789 + t754;
t778 = t722 * t639;
t775 = t723 * t693;
t694 = qJDD(2) - t705;
t774 = t723 * t694;
t773 = t724 * t682;
t772 = t725 * t465;
t771 = t725 * t496;
t770 = t726 * t560;
t769 = t726 * t573;
t768 = t727 * t639;
t767 = t727 * t643;
t765 = t728 * t682;
t764 = t728 * t693;
t763 = t728 * t694;
t762 = t729 * t682;
t428 = -t796 * pkin(6) + (t636 * t711 - t534) * pkin(4) + t560;
t466 = -pkin(4) * t794 + pkin(6) * t710 - t575 * t634 + t507;
t388 = t428 * t720 + t466 * t725;
t761 = -t718 - t719;
t757 = t724 * qJDD(1);
t755 = t729 * qJDD(1);
t753 = pkin(2) * t643 * t723;
t752 = t721 * t562;
t751 = t724 * t579;
t750 = t724 * t789;
t749 = t726 * t562;
t748 = t729 * t579;
t747 = t729 * t789;
t746 = -pkin(4) * t726 - pkin(3);
t387 = -t428 * t725 + t466 * t720;
t353 = t387 * t720 + t388 * t725;
t437 = t506 * t721 + t507 * t726;
t542 = t592 * t727 - t722 * t737;
t652 = -t695 * t724 - t696 * t729;
t740 = t724 * t705;
t739 = t729 * t705;
t690 = -t724 * t731 + t755;
t738 = -pkin(5) * t690 - g(3) * t724;
t352 = -t387 * t725 + t388 * t720;
t617 = t664 * t723 + t665 * t728;
t651 = t695 * t729 - t696 * t724;
t734 = (-qJD(4) + t711) * t636 - t742;
t733 = -(qJD(3) - t717) * t673 - t741;
t702 = -t730 + t783;
t701 = -t730 - t784;
t700 = t730 - t784;
t692 = t761 * t731;
t691 = (t718 - t719) * t731;
t689 = t729 * t731 + t757;
t688 = t761 * qJDD(1);
t686 = -0.2e1 * t745 + t756;
t685 = -0.2e1 * t744 - t758;
t680 = t761 * t759;
t669 = -pkin(5) * t689 + g(3) * t729;
t663 = -t671 + t716;
t662 = t670 - t716;
t661 = t684 * t728 + t718 * t759;
t660 = -t687 * t723 + t719 * t759;
t659 = -t671 - t716;
t658 = -t701 * t723 - t763;
t657 = -t700 * t723 + t764;
t656 = t703 * t728 - t775;
t655 = t702 * t728 - t774;
t654 = -t701 * t728 + t774;
t653 = -t703 * t723 - t764;
t650 = t688 * t729 - t692 * t724;
t649 = t688 * t724 + t692 * t729;
t647 = -t685 * t723 - t686 * t728;
t642 = t671 - t670;
t628 = t658 * t729 - t685 * t724;
t627 = t656 * t729 - t686 * t724;
t626 = t658 * t724 + t685 * t729;
t625 = t656 * t724 + t686 * t729;
t623 = -t633 + t794;
t622 = t632 - t794;
t621 = (t672 * t727 + t673 * t722) * t717;
t620 = (t672 * t722 - t673 * t727) * t717;
t619 = -pkin(1) * t654 - t665;
t618 = -pkin(1) * t653 - t664;
t614 = -t670 - t671;
t610 = -t633 - t794;
t600 = t662 * t727 - t778;
t599 = -t663 * t722 + t809;
t598 = t662 * t722 + t768;
t597 = t663 * t727 + t810;
t596 = -t659 * t722 - t768;
t595 = t659 * t727 - t778;
t594 = t617 * t729 - t773;
t593 = t617 * t724 + t762;
t590 = -t666 + t613;
t585 = -(-qJD(3) - t717) * t673 + t741;
t583 = t613 * t727 - t673 * t786;
t582 = t613 * t722 + t673 * t785;
t581 = -t612 * t722 - t672 * t785;
t580 = t612 * t727 - t672 * t786;
t578 = t633 - t632;
t577 = t637 * t727 - t810;
t576 = t637 * t722 + t809;
t571 = -t794 - t632;
t568 = -t606 + t630;
t567 = t605 - t630;
t565 = (-t634 * t726 + t636 * t721) * t711;
t564 = (-t634 * t721 - t636 * t726) * t711;
t563 = -t620 * t723 + t621 * t728;
t561 = -t606 + t605;
t559 = -pkin(2) * t585 - t767;
t558 = -pkin(2) * t795 + t643 * t722;
t555 = -t632 - t633;
t554 = -t606 - t630;
t553 = -t598 * t723 + t600 * t728;
t552 = -t597 * t723 + t599 * t728;
t551 = t622 * t726 - t779;
t550 = -t623 * t721 + t803;
t549 = t622 * t721 + t769;
t548 = t623 * t726 + t807;
t547 = -t610 * t721 - t769;
t546 = t610 * t726 - t779;
t545 = -t595 * t723 + t596 * t728;
t544 = -t595 * t728 - t596 * t723;
t543 = -t630 - t605;
t540 = -t585 * t727 - t722 * t795;
t539 = t590 * t722 + t727 * t733;
t537 = -t585 * t722 + t727 * t795;
t536 = -t590 * t727 + t722 * t733;
t531 = -t558 * t723 + t643 * t766;
t530 = -t559 * t723 + t643 * t776;
t529 = t605 + t606;
t528 = -t582 * t723 + t583 * t728;
t527 = -t580 * t723 + t581 * t728;
t526 = -t576 * t723 + t577 * t728;
t525 = -t576 * t728 - t577 * t723;
t524 = t571 * t726 - t807;
t523 = t571 * t721 + t803;
t522 = (-t607 * t725 + t609 * t720) * t631;
t521 = (-t607 * t720 - t609 * t725) * t631;
t519 = t624 + t535;
t515 = (qJD(4) + t711) * t636 + t742;
t514 = -pkin(2) * t614 + t542;
t513 = -t564 * t722 + t565 * t727;
t512 = t564 * t727 + t565 * t722;
t511 = t535 * t726 - t636 * t788;
t510 = t535 * t721 + t636 * t787;
t509 = -t534 * t721 + t634 * t787;
t508 = t534 * t726 + t634 * t788;
t503 = -qJD(5) * t609 - t743;
t502 = (-pkin(3) * t727 - pkin(2)) * t560;
t501 = t545 * t729 - t724 * t795;
t500 = t545 * t724 + t729 * t795;
t499 = t526 * t729 - t585 * t724;
t498 = t526 * t724 + t585 * t729;
t494 = -t549 * t722 + t551 * t727;
t493 = -t548 * t722 + t550 * t727;
t492 = t549 * t727 + t551 * t722;
t491 = t548 * t727 + t550 * t722;
t490 = -pkin(1) * t544 + pkin(2) * t595 - t592;
t489 = -t546 * t722 + t547 * t727;
t488 = t546 * t727 + t547 * t722;
t487 = t542 * t728 + t805;
t486 = -t537 * t723 + t540 * t728;
t485 = -t536 * t723 + t539 * t728;
t484 = -t542 * t723 + t801;
t483 = -t536 * t728 - t539 * t723;
t482 = -pkin(3) * t515 - t770;
t481 = -pkin(3) * t796 + t780;
t479 = -t569 - t504;
t476 = (-qJD(5) - t631) * t609 - t743;
t474 = t504 * t725 - t609 * t791;
t473 = t504 * t720 + t609 * t790;
t472 = -t503 * t720 + t607 * t790;
t471 = t503 * t725 + t607 * t791;
t470 = -pkin(1) * t525 + pkin(2) * t576 + t737;
t469 = pkin(3) * t560 * t776 - t502 * t723;
t468 = t487 * t729 - t643 * t724;
t467 = t487 * t724 + t643 * t729;
t463 = t522 * t726 + t721 * t735;
t462 = t522 * t721 - t726 * t735;
t461 = -t514 * t723 + t801;
t460 = t567 * t725 - t781;
t459 = -t568 * t720 + t804;
t458 = t567 * t720 + t771;
t457 = t568 * t725 + t808;
t456 = t485 * t729 - t614 * t724;
t455 = t485 * t724 + t614 * t729;
t454 = -t523 * t722 + t524 * t727;
t453 = t523 * t727 + t524 * t722;
t452 = t519 * t721 + t726 * t734;
t451 = -t515 * t726 - t721 * t796;
t450 = -t519 * t726 + t721 * t734;
t449 = -t515 * t721 + t726 * t796;
t448 = -t554 * t720 - t771;
t447 = t554 * t725 - t781;
t446 = -t512 * t723 + t513 * t728;
t445 = -t510 * t722 + t511 * t727;
t444 = -t508 * t722 + t509 * t727;
t443 = t510 * t727 + t511 * t722;
t442 = t508 * t727 + t509 * t722;
t441 = t543 * t725 - t808;
t440 = t543 * t720 + t804;
t439 = -t481 * t722 + t727 * t770;
t438 = -t482 * t722 + t727 * t780;
t434 = t474 * t726 + t752;
t433 = t472 * t726 - t752;
t432 = t474 * t721 - t749;
t431 = t472 * t721 + t749;
t430 = -pkin(1) * t484 - pkin(2) * t541;
t429 = -pkin(1) * t483 + pkin(2) * t536;
t425 = -pkin(3) * t555 + t437;
t424 = -t492 * t723 + t494 * t728;
t423 = -t491 * t723 + t493 * t728;
t422 = -t488 * t723 + t489 * t728;
t421 = -t488 * t728 - t489 * t723;
t420 = -pkin(2) * t796 + t481 * t727 + t722 * t770;
t419 = -pkin(2) * t515 + t482 * t727 + t722 * t780;
t418 = -t475 * t725 - t479 * t720;
t417 = t476 * t725 - t478 * t720;
t416 = -t475 * t720 + t479 * t725;
t415 = t476 * t720 + t478 * t725;
t414 = t460 * t726 - t475 * t721;
t413 = t459 * t726 - t479 * t721;
t412 = t460 * t721 + t475 * t726;
t411 = t459 * t721 + t479 * t726;
t410 = -t462 * t722 + t463 * t727;
t409 = t462 * t727 + t463 * t722;
t408 = t448 * t726 + t478 * t721;
t407 = t448 * t721 - t478 * t726;
t406 = t441 * t726 - t476 * t721;
t405 = t441 * t721 + t476 * t726;
t404 = -t453 * t723 + t454 * t728;
t403 = -t453 * t728 - t454 * t723;
t402 = t417 * t726 - t561 * t721;
t401 = t417 * t721 + t561 * t726;
t400 = -pkin(6) * t447 + t772;
t399 = -pkin(6) * t440 + t782;
t398 = t418 * t726 - t529 * t721;
t397 = t418 * t721 + t529 * t726;
t396 = -t450 * t722 + t452 * t727;
t395 = -t449 * t722 + t451 * t727;
t394 = t450 * t727 + t452 * t722;
t393 = t449 * t727 + t451 * t722;
t392 = t422 * t729 - t724 * t796;
t391 = t422 * t724 + t729 * t796;
t390 = -t443 * t723 + t445 * t728;
t389 = -t442 * t723 + t444 * t728;
t385 = t437 * t727 + t806;
t384 = t437 * t722 - t802;
t383 = -t432 * t722 + t434 * t727;
t382 = -t431 * t722 + t433 * t727;
t381 = t432 * t727 + t434 * t722;
t380 = t431 * t727 + t433 * t722;
t379 = t404 * t729 - t515 * t724;
t378 = t404 * t724 + t515 * t729;
t377 = -t425 * t722 + t802;
t376 = -t420 * t723 + t439 * t728;
t375 = -t419 * t723 + t438 * t728;
t374 = -pkin(2) * t555 + t425 * t727 + t806;
t373 = -pkin(4) * t447 + t388;
t372 = -pkin(1) * t421 + pkin(2) * t488 + pkin(3) * t546 - t507;
t371 = -pkin(4) * t440 + t387;
t370 = -t412 * t722 + t414 * t727;
t369 = -t411 * t722 + t413 * t727;
t368 = t412 * t727 + t414 * t722;
t367 = t411 * t727 + t413 * t722;
t366 = -t409 * t723 + t410 * t728;
t365 = -t407 * t722 + t408 * t727;
t364 = t407 * t727 + t408 * t722;
t363 = -t405 * t722 + t406 * t727;
t362 = t405 * t727 + t406 * t722;
t361 = -t401 * t722 + t402 * t727;
t360 = t401 * t727 + t402 * t722;
t359 = -pkin(1) * t403 + pkin(2) * t453 + pkin(3) * t523 - t506;
t358 = -t397 * t722 + t398 * t727;
t357 = t397 * t727 + t398 * t722;
t356 = -t394 * t723 + t396 * t728;
t355 = -t393 * t723 + t395 * t728;
t354 = -t394 * t728 - t396 * t723;
t351 = -t384 * t723 + t385 * t728;
t350 = -t384 * t728 - t385 * t723;
t349 = t356 * t729 - t555 * t724;
t348 = t356 * t724 + t555 * t729;
t347 = -t381 * t723 + t383 * t728;
t346 = -t380 * t723 + t382 * t728;
t345 = t351 * t729 - t560 * t724;
t344 = t351 * t724 + t560 * t729;
t343 = -t373 * t721 + t400 * t726;
t342 = -t371 * t721 + t399 * t726;
t341 = t353 * t726 + t465 * t721;
t340 = t353 * t721 - t465 * t726;
t339 = -t374 * t723 + t377 * t728;
t338 = -pkin(6) * t416 - t352;
t337 = -pkin(3) * t447 + t373 * t726 + t400 * t721;
t336 = -pkin(3) * t440 + t371 * t726 + t399 * t721;
t335 = -t368 * t723 + t370 * t728;
t334 = -t367 * t723 + t369 * t728;
t333 = -pkin(1) * t354 + pkin(2) * t394 + pkin(3) * t450;
t332 = -t364 * t723 + t365 * t728;
t331 = -t364 * t728 - t365 * t723;
t330 = -t362 * t723 + t363 * t728;
t329 = -t362 * t728 - t363 * t723;
t328 = t338 * t726 + t416 * t792;
t327 = -t360 * t723 + t361 * t728;
t326 = -pkin(1) * t350 + pkin(2) * t384 - pkin(3) * t436;
t325 = -t357 * t723 + t358 * t728;
t324 = -t357 * t728 - t358 * t723;
t323 = t332 * t729 - t447 * t724;
t322 = t332 * t724 + t447 * t729;
t321 = t330 * t729 - t440 * t724;
t320 = t330 * t724 + t440 * t729;
t319 = (-pkin(6) * t726 + t792) * t352;
t318 = t721 * t338 + t416 * t746;
t317 = t325 * t729 - t416 * t724;
t316 = t325 * t724 + t416 * t729;
t315 = -t340 * t722 + t341 * t727;
t314 = t340 * t727 + t341 * t722;
t313 = -t337 * t722 + t343 * t727;
t312 = -t336 * t722 + t342 * t727;
t311 = -pkin(2) * t447 + t337 * t727 + t343 * t722;
t310 = -pkin(2) * t440 + t336 * t727 + t342 * t722;
t309 = (-pkin(6) * t721 + t746) * t352;
t308 = -pkin(1) * t331 + pkin(2) * t364 + pkin(3) * t407 - pkin(4) * t478 + pkin(6) * t448 + t782;
t307 = -pkin(1) * t329 + pkin(2) * t362 + pkin(3) * t405 + pkin(4) * t476 + pkin(6) * t441 - t772;
t306 = -t318 * t722 + t328 * t727;
t305 = -pkin(2) * t416 + t318 * t727 + t328 * t722;
t304 = -pkin(1) * t324 + pkin(2) * t357 + pkin(3) * t397 + pkin(4) * t529 + pkin(6) * t418 + t353;
t303 = -t314 * t723 + t315 * t728;
t302 = -t314 * t728 - t315 * t723;
t301 = -t309 * t722 + t319 * t727;
t300 = -t311 * t723 + t313 * t728;
t299 = -t310 * t723 + t312 * t728;
t298 = t303 * t729 - t352 * t724;
t297 = t303 * t724 + t352 * t729;
t296 = -pkin(2) * t352 + t309 * t727 + t319 * t722;
t295 = -t305 * t723 + t306 * t728;
t294 = -pkin(1) * t302 + pkin(2) * t314 + pkin(3) * t340 - pkin(4) * t465 + pkin(6) * t353;
t293 = -t296 * t723 + t301 * t728;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t689, -t690, 0, t652, 0, 0, 0, 0, 0, 0, t627, t628, t650, t594, 0, 0, 0, 0, 0, 0, t499, t501, t456, t468, 0, 0, 0, 0, 0, 0, t379, t392, t349, t345, 0, 0, 0, 0, 0, 0, t321, t323, t317, t298; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t690, -t689, 0, t651, 0, 0, 0, 0, 0, 0, t625, t626, t649, t593, 0, 0, 0, 0, 0, 0, t498, t500, t455, t467, 0, 0, 0, 0, 0, 0, t378, t391, t348, t344, 0, 0, 0, 0, 0, 0, t320, t322, t316, t297; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t653, t654, 0, t736, 0, 0, 0, 0, 0, 0, t525, t544, t483, t484, 0, 0, 0, 0, 0, 0, t403, t421, t354, t350, 0, 0, 0, 0, 0, 0, t329, t331, t324, t302; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t690, 0, -t689, 0, t738, -t669, -t651, -pkin(5) * t651, t661 * t729 + t740, t647 * t729 - t691 * t724, t657 * t729 + t723 * t757, t660 * t729 - t740, t655 * t729 + t724 * t756, -qJDD(2) * t724 + t680 * t729, -pkin(5) * t625 - t618 * t724 + t723 * t762, -pkin(5) * t626 - t619 * t724 + t728 * t762, -pkin(5) * t649 + t729 * t736, -pkin(5) * t593 + t724 * t793, t528 * t729 + t750, t486 * t729 - t642 * t724, t552 * t729 - t590 * t724, t527 * t729 - t750, t553 * t729 - t724 * t733, t563 * t729 - t724 * t754, -pkin(5) * t498 - t470 * t724 + t530 * t729, -pkin(5) * t500 - t490 * t724 + t531 * t729, -pkin(5) * t455 - t429 * t724 + t461 * t729, -pkin(5) * t467 - t430 * t724 + t729 * t753, t390 * t729 - t751, t355 * t729 - t578 * t724, t423 * t729 - t519 * t724, t389 * t729 + t751, t424 * t729 - t724 * t734, t446 * t729 - t710 * t724, -pkin(5) * t378 - t359 * t724 + t375 * t729, -pkin(5) * t391 - t372 * t724 + t376 * t729, -pkin(5) * t348 - t333 * t724 + t339 * t729, -pkin(5) * t344 - t326 * t724 + t469 * t729, t347 * t729 - t473 * t724, t327 * t729 - t415 * t724, t334 * t729 - t457 * t724, t346 * t729 - t471 * t724, t335 * t729 - t458 * t724, t366 * t729 - t521 * t724, -pkin(5) * t320 + t299 * t729 - t307 * t724, -pkin(5) * t322 + t300 * t729 - t308 * t724, -pkin(5) * t316 + t295 * t729 - t304 * t724, -pkin(5) * t297 + t293 * t729 - t294 * t724; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t689, 0, t690, 0, t669, t738, t652, pkin(5) * t652, t661 * t724 - t739, t647 * t724 + t691 * t729, t657 * t724 - t723 * t755, t660 * t724 + t739, t655 * t724 - t728 * t755, qJDD(2) * t729 + t680 * t724, pkin(5) * t627 + t618 * t729 + t723 * t773, pkin(5) * t628 + t619 * t729 + t724 * t765, pkin(5) * t650 + t724 * t736, pkin(5) * t594 - t729 * t793, t528 * t724 - t747, t486 * t724 + t642 * t729, t552 * t724 + t590 * t729, t527 * t724 + t747, t553 * t724 + t729 * t733, t563 * t724 + t729 * t754, pkin(5) * t499 + t470 * t729 + t530 * t724, pkin(5) * t501 + t490 * t729 + t531 * t724, pkin(5) * t456 + t429 * t729 + t461 * t724, pkin(5) * t468 + t430 * t729 + t724 * t753, t390 * t724 + t748, t355 * t724 + t578 * t729, t423 * t724 + t519 * t729, t389 * t724 - t748, t424 * t724 + t729 * t734, t446 * t724 + t710 * t729, pkin(5) * t379 + t359 * t729 + t375 * t724, pkin(5) * t392 + t372 * t729 + t376 * t724, pkin(5) * t349 + t333 * t729 + t339 * t724, pkin(5) * t345 + t326 * t729 + t469 * t724, t347 * t724 + t473 * t729, t327 * t724 + t415 * t729, t334 * t724 + t457 * t729, t346 * t724 + t471 * t729, t335 * t724 + t458 * t729, t366 * t724 + t521 * t729, pkin(5) * t321 + t299 * t724 + t307 * t729, pkin(5) * t323 + t300 * t724 + t308 * t729, pkin(5) * t317 + t295 * t724 + t304 * t729, pkin(5) * t298 + t293 * t724 + t294 * t729; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t695, t696, 0, 0, (-t684 + t744) * t723, -t685 * t728 + t686 * t723, -t700 * t728 - t775, t800 * t728, -t702 * t723 - t763, 0, pkin(1) * t686 + t765, pkin(1) * t685 - t682 * t723, pkin(1) * t692 - t617, pkin(1) * t682, -t582 * t728 - t583 * t723, -t537 * t728 - t540 * t723, -t597 * t728 - t599 * t723, -t580 * t728 - t581 * t723, -t598 * t728 - t600 * t723, -t620 * t728 - t621 * t723, pkin(1) * t585 - t559 * t728 - t643 * t777, pkin(1) * t795 - t558 * t728 - t723 * t767, pkin(1) * t614 - t514 * t728 - t805, (pkin(2) * t728 + pkin(1)) * t643, -t443 * t728 - t445 * t723, -t393 * t728 - t395 * t723, -t491 * t728 - t493 * t723, -t442 * t728 - t444 * t723, -t492 * t728 - t494 * t723, -t512 * t728 - t513 * t723, pkin(1) * t515 - t419 * t728 - t438 * t723, pkin(1) * t796 - t420 * t728 - t439 * t723, pkin(1) * t555 - t374 * t728 - t377 * t723, -t728 * t502 + (-pkin(3) * t777 + pkin(1)) * t560, -t381 * t728 - t383 * t723, -t360 * t728 - t361 * t723, -t367 * t728 - t369 * t723, -t380 * t728 - t382 * t723, -t368 * t728 - t370 * t723, -t409 * t728 - t410 * t723, pkin(1) * t440 - t310 * t728 - t312 * t723, pkin(1) * t447 - t311 * t728 - t313 * t723, pkin(1) * t416 - t305 * t728 - t306 * t723, pkin(1) * t352 - t296 * t728 - t301 * t723;];
tauB_reg = t1;
