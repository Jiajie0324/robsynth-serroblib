% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRPRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d4,theta1,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:31
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRPRP2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRP2_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRP2_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRP2_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRP2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRPRP2_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:31:09
% EndTime: 2019-12-05 15:31:19
% DurationCPUTime: 5.94s
% Computational Cost: add. (13523->428), mult. (30942->609), div. (0->0), fcn. (19831->8), ass. (0->326)
t544 = 2 * qJD(3);
t458 = qJD(2) ^ 2;
t451 = sin(pkin(7));
t453 = cos(pkin(7));
t422 = t451 * g(1) - t453 * g(2);
t423 = t453 * g(1) + t451 * g(2);
t455 = sin(qJ(2));
t457 = cos(qJ(2));
t507 = -t455 * t422 + t457 * t423;
t356 = -t458 * pkin(2) + qJDD(2) * qJ(3) - t507;
t553 = (qJD(2) * t544) + t356;
t477 = t457 * t422 + t455 * t423;
t480 = -t455 * t477 - t457 * t507;
t321 = t455 * t507 - t457 * t477;
t520 = t453 * t321;
t555 = -t451 * t480 + t520;
t524 = t451 * t321;
t272 = t453 * t480 + t524;
t498 = t455 * qJDD(2);
t419 = t457 * t458 + t498;
t497 = t457 * qJDD(2);
t513 = t455 * t458;
t420 = t497 - t513;
t369 = -t451 * t419 + t453 * t420;
t448 = g(3) - qJDD(1);
t391 = pkin(5) * t419 - t457 * t448;
t471 = -pkin(5) * t420 - t455 * t448;
t554 = -qJ(1) * t369 + t451 * t391 + t453 * t471;
t546 = t453 * t419 + t451 * t420;
t551 = qJ(1) * t546 + t453 * t391 - t451 * t471;
t450 = sin(pkin(8));
t443 = t450 ^ 2;
t452 = cos(pkin(8));
t444 = t452 ^ 2;
t406 = (t443 + t444) * t452 * t458;
t485 = t452 * t497;
t378 = -t455 * t406 + t485;
t380 = t457 * t406 + t452 * t498;
t324 = t453 * t378 - t451 * t380;
t550 = t451 * t378 + t453 * t380;
t503 = t452 * qJD(2);
t431 = -qJD(4) + t503;
t428 = t431 ^ 2;
t456 = cos(qJ(4));
t447 = t456 ^ 2;
t526 = t443 * t458;
t495 = t447 * t526;
t382 = -t495 - t428;
t454 = sin(qJ(4));
t494 = t454 * t456 * t458;
t421 = t443 * t494;
t499 = t452 * qJDD(2);
t430 = -qJDD(4) + t499;
t393 = -t421 + t430;
t516 = t454 * t393;
t338 = t456 * t382 + t516;
t543 = pkin(3) * t338;
t446 = t454 ^ 2;
t429 = t446 * t526;
t398 = -t429 - t428;
t394 = -t421 - t430;
t509 = t456 * t394;
t346 = t454 * t398 + t509;
t542 = pkin(3) * t346;
t541 = pkin(3) * t450;
t540 = pkin(3) * t452;
t501 = qJDD(2) * t454;
t504 = qJD(2) * t456;
t358 = (t501 + (qJD(4) + t431) * t504) * t450;
t505 = qJD(2) * t454;
t488 = t450 * t505;
t426 = qJD(4) * t488;
t489 = t431 * t505;
t500 = qJDD(2) * t456;
t361 = t426 + (t489 - t500) * t450;
t310 = -t456 * t358 - t454 * t361;
t400 = t429 + t495;
t295 = t452 * t310 - t450 * t400;
t308 = -t454 * t358 + t456 * t361;
t248 = t455 * t295 - t457 * t308;
t539 = pkin(5) * t248;
t510 = t456 * t393;
t339 = -t454 * t382 + t510;
t461 = -t426 + (t489 + t500) * t450;
t299 = t452 * t339 + t450 * t461;
t260 = t455 * t299 - t457 * t338;
t538 = pkin(5) * t260;
t515 = t454 * t394;
t349 = t456 * t398 - t515;
t357 = (t501 + (qJD(4) - t431) * t504) * t450;
t306 = t452 * t349 + t450 * t357;
t267 = t455 * t306 - t457 * t346;
t537 = pkin(5) * t267;
t536 = pkin(6) * t308;
t535 = pkin(6) * t338;
t534 = pkin(6) * t346;
t250 = t457 * t295 + t455 * t308;
t209 = t453 * t248 + t451 * t250;
t533 = qJ(1) * t209;
t262 = t457 * t299 + t455 * t338;
t220 = t453 * t260 + t451 * t262;
t532 = qJ(1) * t220;
t270 = t457 * t306 + t455 * t346;
t225 = t453 * t267 + t451 * t270;
t531 = qJ(1) * t225;
t293 = t450 * t310 + t452 * t400;
t530 = qJ(3) * t293;
t298 = t450 * t339 - t452 * t461;
t529 = qJ(3) * t298;
t303 = t450 * t349 - t452 * t357;
t528 = qJ(3) * t303;
t449 = qJDD(2) * pkin(2);
t527 = t430 * t450;
t525 = t450 * t452;
t521 = t451 * t448;
t519 = t453 * t448;
t334 = -t450 * t448 + t452 * t553;
t472 = -pkin(6) * t450 - t540;
t411 = t472 * qJD(2);
t315 = t411 * t503 + t334;
t355 = -t458 * qJ(3) + qJDD(3) - t449 - t477;
t342 = t472 * qJDD(2) + t355;
t278 = t454 * t315 - t456 * t342;
t396 = t450 * t500 - t426;
t475 = t431 * t488;
t469 = pkin(4) * t421 + t278 + (t396 - t475) * qJ(5);
t462 = -t430 * pkin(4) - t469;
t506 = qJD(2) * t450;
t486 = qJD(5) * t506;
t474 = t456 * t486;
t243 = t462 - 0.2e1 * t474;
t518 = t454 * t243;
t436 = t452 * t448;
t314 = t436 + (t356 + (t544 + t411) * qJD(2)) * t450;
t517 = t454 * t314;
t514 = t455 * t355;
t512 = t456 * t243;
t511 = t456 * t314;
t508 = t457 * t355;
t279 = t456 * t315 + t454 * t342;
t493 = pkin(1) * t248 - pkin(2) * t308 + qJ(3) * t295;
t492 = pkin(1) * t260 - pkin(2) * t338 + qJ(3) * t299;
t491 = pkin(1) * t267 - pkin(2) * t346 + qJ(3) * t306;
t490 = t431 * t506;
t487 = t450 * t504;
t484 = -pkin(1) * t293 + pkin(5) * t250;
t483 = -pkin(1) * t298 + pkin(5) * t262;
t482 = -pkin(1) * t303 + pkin(5) * t270;
t481 = -t355 + t449;
t333 = t450 * t553 + t436;
t284 = t450 * t333 + t452 * t334;
t392 = -t431 * pkin(4) - qJ(5) * t487;
t479 = -t392 * t456 - t411;
t373 = -t451 * t422 - t453 * t423;
t442 = t450 * t443;
t476 = t442 * t494;
t395 = (-qJD(4) * t504 - t501) * t450;
t473 = -t395 * pkin(4) - qJ(5) * t429 + qJDD(5) + t436;
t470 = t452 * t421;
t231 = -t456 * t278 + t454 * t279;
t232 = t454 * t278 + t456 * t279;
t283 = t452 * t333 - t450 * t334;
t383 = t419 * t525;
t384 = t450 * t485 - t513 * t525;
t468 = t453 * t383 + t451 * t384;
t467 = t451 * t383 - t453 * t384;
t372 = t453 * t422 - t451 * t423;
t466 = t395 * qJ(5) + t431 * t392 - 0.2e1 * t454 * t486 + t279;
t465 = -pkin(2) * t293 - pkin(3) * t400 - pkin(6) * t310;
t464 = -pkin(2) * t298 + pkin(3) * t461 - pkin(6) * t339;
t463 = -pkin(2) * t303 + pkin(3) * t357 - pkin(6) * t349;
t273 = (t356 + (t544 - t479) * qJD(2)) * t450 + t473;
t439 = t444 * t458;
t438 = t444 * qJDD(2);
t437 = t443 * qJDD(2);
t425 = 0.2e1 * t474;
t417 = t439 - t526;
t416 = t439 + t526;
t415 = t452 * t430;
t413 = t438 - t437;
t412 = t438 + t437;
t405 = (t444 * t450 + t442) * t458;
t401 = t429 - t495;
t399 = t428 - t495;
t397 = t429 - t428;
t379 = t457 * t405 + t450 * t498;
t376 = t455 * t405 - t450 * t497;
t367 = t457 * t413 - t455 * t417;
t366 = t457 * t412 - t455 * t416;
t365 = t455 * t413 + t457 * t417;
t364 = t455 * t412 + t457 * t416;
t362 = (-t446 - t447) * t490;
t354 = -t454 * t396 + t447 * t490;
t353 = -t456 * t395 + t446 * t490;
t351 = (t396 + t475) * t456;
t350 = (-t431 * t487 - t395) * t454;
t348 = t456 * t397 + t516;
t347 = -t454 * t399 + t509;
t345 = -t454 * t397 + t510;
t344 = -t456 * t399 - t515;
t341 = -t455 * t362 - t457 * t527;
t340 = t457 * t362 - t455 * t527;
t332 = t452 * t351 + t476;
t331 = t452 * t350 - t476;
t330 = -pkin(4) * t461 + qJ(5) * t393;
t328 = t450 * t351 - t470;
t327 = t450 * t350 + t470;
t325 = -t451 * t376 + t453 * t379;
t323 = t453 * t376 + t451 * t379;
t318 = -t451 * t364 + t453 * t366;
t317 = t453 * t364 + t451 * t366;
t316 = pkin(1) * t448 + pkin(5) * t480;
t311 = -t456 * t357 - t454 * t461;
t309 = t454 * t357 - t456 * t461;
t305 = t452 * t348 - t450 * t358;
t304 = t452 * t347 - t450 * t361;
t302 = t450 * t348 + t452 * t358;
t301 = t450 * t347 + t452 * t361;
t296 = t452 * t311 - t450 * t401;
t294 = t450 * t311 + t452 * t401;
t292 = t457 * t332 - t455 * t354;
t291 = t457 * t331 - t455 * t353;
t290 = t455 * t332 + t457 * t354;
t289 = t455 * t331 + t457 * t353;
t287 = -t451 * t340 + t453 * t341;
t286 = t453 * t340 + t451 * t341;
t285 = -pkin(3) * t308 - pkin(4) * t361;
t281 = t517 - t534;
t280 = t511 - t535;
t277 = -pkin(5) * t376 - t455 * t334 + t452 * t508;
t276 = -pkin(5) * t378 - t455 * t333 + t450 * t508;
t275 = pkin(5) * t379 + t457 * t334 + t452 * t514;
t274 = -pkin(5) * t380 + t457 * t333 + t450 * t514;
t269 = t457 * t305 - t455 * t345;
t268 = t457 * t304 - t455 * t344;
t266 = t455 * t305 + t457 * t345;
t265 = t455 * t304 + t457 * t344;
t261 = -pkin(5) * t364 + t457 * t283;
t259 = pkin(5) * t366 + t455 * t283;
t256 = -qJ(5) * t382 + t273;
t255 = t457 * t284 + t514;
t254 = t455 * t284 - t508;
t253 = t278 - t542;
t252 = t279 - t543;
t251 = t457 * t296 - t455 * t309;
t249 = t455 * t296 + t457 * t309;
t247 = -pkin(4) * t357 + qJ(5) * t398 - t473 + (t479 * qJD(2) - t553) * t450;
t244 = -pkin(4) * t429 + t466;
t242 = -t451 * t290 + t453 * t292;
t241 = -t451 * t289 + t453 * t291;
t240 = t453 * t290 + t451 * t292;
t239 = t453 * t289 + t451 * t291;
t238 = -qJ(5) * t361 + t425 - t462;
t237 = t463 + t511;
t236 = -qJ(5) * t358 + (t400 - t429) * pkin(4) + t466;
t235 = -qJ(5) * t509 - t454 * t247 - t534;
t234 = t464 - t517;
t233 = -t542 + t425 + (-t394 + t430) * pkin(4) + t469;
t230 = t456 * t256 - t454 * t330 - t535;
t229 = -t543 + (-t382 - t429) * pkin(4) + t466;
t228 = -t451 * t267 + t453 * t270;
t227 = -t451 * t266 + t453 * t269;
t226 = -t451 * t265 + t453 * t268;
t224 = t453 * t266 + t451 * t269;
t223 = t453 * t265 + t451 * t268;
t222 = qJ(1) * t228;
t221 = -t451 * t260 + t453 * t262;
t219 = qJ(1) * t221;
t218 = -t451 * t254 + t453 * t255;
t217 = t453 * t254 + t451 * t255;
t216 = -pkin(4) * t273 + qJ(5) * t244;
t215 = -t231 - t536;
t214 = t452 * t232 + t450 * t314;
t213 = t450 * t232 - t452 * t314;
t212 = -t451 * t249 + t453 * t251;
t211 = -t451 * t248 + t453 * t250;
t210 = t453 * t249 + t451 * t251;
t208 = qJ(1) * t211;
t207 = qJ(5) * t515 - t456 * t247 + t463;
t206 = -t450 * t253 + t452 * t281 - t528;
t205 = t456 * t244 - t518;
t204 = t454 * t244 + t512;
t203 = -pkin(5) * t254 - (pkin(2) * t455 - qJ(3) * t457) * t283;
t202 = -t454 * t256 - t456 * t330 + t464;
t201 = -t450 * t252 + t452 * t280 - t529;
t200 = -t232 + t465;
t199 = pkin(5) * t255 - (-pkin(2) * t457 - qJ(3) * t455 - pkin(1)) * t283;
t198 = t452 * t215 + t308 * t541 - t530;
t197 = t452 * t205 + t450 * t273;
t196 = t450 * t205 - t452 * t273;
t195 = -t454 * t236 + t456 * t238 - t536;
t194 = -pkin(3) * t204 - pkin(4) * t243;
t193 = -t450 * t233 + t452 * t235 - t528;
t192 = t457 * t214 + t455 * t231;
t191 = t455 * t214 - t457 * t231;
t190 = -t450 * t229 + t452 * t230 - t529;
t189 = -pkin(2) * t213 + pkin(3) * t314 - pkin(6) * t232;
t188 = -t456 * t236 - t454 * t238 + t465;
t187 = t457 * t206 - t455 * t237 - t537;
t186 = t452 * t195 - t450 * t285 - t530;
t185 = t457 * t201 - t455 * t234 - t538;
t184 = t455 * t206 + t457 * t237 + t482;
t183 = -qJ(3) * t213 + (-pkin(6) * t452 + t541) * t231;
t182 = t455 * t201 + t457 * t234 + t483;
t181 = -pkin(6) * t204 - qJ(5) * t512 - t454 * t216;
t180 = t457 * t197 + t455 * t204;
t179 = t455 * t197 - t457 * t204;
t178 = t457 * t193 - t455 * t207 - t537;
t177 = t457 * t198 - t455 * t200 - t539;
t176 = t457 * t190 - t455 * t202 - t538;
t175 = t455 * t193 + t457 * t207 + t482;
t174 = -t451 * t191 + t453 * t192;
t173 = t453 * t191 + t451 * t192;
t172 = t455 * t198 + t457 * t200 + t484;
t171 = t455 * t190 + t457 * t202 + t483;
t170 = -pkin(2) * t196 + pkin(3) * t273 - pkin(6) * t205 + qJ(5) * t518 - t456 * t216;
t169 = t457 * t186 - t455 * t188 - t539;
t168 = t455 * t186 + t457 * t188 + t484;
t167 = -t451 * t179 + t453 * t180;
t166 = t453 * t179 + t451 * t180;
t165 = -qJ(3) * t196 + t452 * t181 - t450 * t194;
t164 = -pkin(5) * t191 + t457 * t183 - t455 * t189;
t163 = -pkin(1) * t213 + pkin(5) * t192 + t455 * t183 + t457 * t189;
t162 = -pkin(5) * t179 + t457 * t165 - t455 * t170;
t161 = -pkin(1) * t196 + pkin(5) * t180 + t455 * t165 + t457 * t170;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t373, 0, 0, 0, 0, 0, 0, -t546, -t369, 0, t272, 0, 0, 0, 0, 0, 0, -t550, t325, t318, t218, 0, 0, 0, 0, 0, 0, t228, t221, t211, t174, 0, 0, 0, 0, 0, 0, t228, t221, t211, t167; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t372, 0, 0, 0, 0, 0, 0, t369, -t546, 0, -t555, 0, 0, 0, 0, 0, 0, t324, t323, t317, t217, 0, 0, 0, 0, 0, 0, t225, t220, t209, t173, 0, 0, 0, 0, 0, 0, t225, t220, t209, t166; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t448, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t448, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t283, 0, 0, 0, 0, 0, 0, t303, t298, t293, t213, 0, 0, 0, 0, 0, 0, t303, t298, t293, t196; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t521, -t519, -t372, -qJ(1) * t372, 0, 0, t369, 0, -t546, 0, t554, t551, t555, pkin(5) * t520 + qJ(1) * t555 - t451 * t316, -t467, -t451 * t365 + t453 * t367, t325, t467, t550, 0, -qJ(1) * t324 - t451 * t274 + t453 * t276, -qJ(1) * t323 - t451 * t275 + t453 * t277, -qJ(1) * t317 - t451 * t259 + t453 * t261, -qJ(1) * t217 - t451 * t199 + t453 * t203, t242, t212, t226, t241, t227, t287, -t451 * t184 + t453 * t187 - t531, -t451 * t182 + t453 * t185 - t532, -t451 * t172 + t453 * t177 - t533, -qJ(1) * t173 - t451 * t163 + t453 * t164, t242, t212, t226, t241, t227, t287, -t451 * t175 + t453 * t178 - t531, -t451 * t171 + t453 * t176 - t532, -t451 * t168 + t453 * t169 - t533, -qJ(1) * t166 - t451 * t161 + t453 * t162; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t519, -t521, t373, qJ(1) * t373, 0, 0, t546, 0, t369, 0, -t551, t554, t272, pkin(5) * t524 + qJ(1) * t272 + t453 * t316, t468, t453 * t365 + t451 * t367, t323, -t468, -t324, 0, -qJ(1) * t550 + t453 * t274 + t451 * t276, qJ(1) * t325 + t275 * t453 + t277 * t451, qJ(1) * t318 + t259 * t453 + t261 * t451, qJ(1) * t218 + t199 * t453 + t203 * t451, t240, t210, t223, t239, t224, t286, t184 * t453 + t187 * t451 + t222, t182 * t453 + t185 * t451 + t219, t172 * t453 + t177 * t451 + t208, qJ(1) * t174 + t163 * t453 + t164 * t451, t240, t210, t223, t239, t224, t286, t175 * t453 + t178 * t451 + t222, t171 * t453 + t176 * t451 + t219, t168 * t453 + t169 * t451 + t208, qJ(1) * t167 + t161 * t453 + t162 * t451; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t422, t423, 0, 0, 0, 0, 0, 0, 0, qJDD(2), pkin(1) * t420 + t477, -pkin(1) * t419 + t507, 0, -pkin(1) * t321, t437, 0.2e1 * t450 * t499, 0, t438, 0, 0, pkin(1) * t378 - qJ(3) * t406 + t452 * t481, pkin(1) * t376 + qJ(3) * t405 - t450 * t481, pkin(1) * t364 + pkin(2) * t416 + qJ(3) * t412 + t284, pkin(1) * t254 - pkin(2) * t355 + qJ(3) * t284, t328, t294, t301, t327, t302, t415, t253 * t452 + t281 * t450 + t491, t252 * t452 + t280 * t450 + t492, t215 * t450 - t308 * t540 + t493, pkin(1) * t191 + qJ(3) * t214 + (-pkin(2) + t472) * t231, t328, t294, t301, t327, t302, t415, t233 * t452 + t235 * t450 + t491, t229 * t452 + t230 * t450 + t492, t195 * t450 + t285 * t452 + t493, pkin(1) * t179 - pkin(2) * t204 + qJ(3) * t197 + t181 * t450 + t194 * t452;];
tauB_reg = t1;
