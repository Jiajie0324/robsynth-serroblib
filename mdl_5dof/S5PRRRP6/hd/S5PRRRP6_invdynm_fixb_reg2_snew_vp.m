% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PRRRP6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d4,theta1]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:53
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PRRRP6_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRP6_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRP6_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRP6_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRP6_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRRRP6_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:52:42
% EndTime: 2019-12-05 16:52:59
% DurationCPUTime: 17.76s
% Computational Cost: add. (34248->573), mult. (70335->700), div. (0->0), fcn. (47327->8), ass. (0->380)
t1152 = sin(pkin(8));
t1153 = cos(pkin(8));
t1157 = sin(qJ(2));
t1160 = cos(qJ(2));
t1155 = sin(qJ(4));
t1158 = cos(qJ(4));
t1159 = cos(qJ(3));
t1233 = qJD(2) * t1159;
t1156 = sin(qJ(3));
t1234 = qJD(2) * t1156;
t1101 = t1155 * t1234 - t1158 * t1233;
t1138 = qJD(3) * t1233;
t1211 = t1156 * qJDD(2);
t1113 = t1138 + t1211;
t1205 = qJD(3) * t1234;
t1210 = t1159 * qJDD(2);
t1181 = -t1205 + t1210;
t1008 = -qJD(4) * t1101 + t1113 * t1158 + t1155 * t1181;
t1149 = qJD(3) + qJD(4);
t1222 = t1101 * t1149;
t1268 = t1008 - t1222;
t1103 = (t1155 * t1159 + t1156 * t1158) * qJD(2);
t1100 = t1103 ^ 2;
t1253 = t1149 ^ 2;
t1033 = t1253 + t1100;
t1148 = qJDD(3) + qJDD(4);
t1221 = t1103 * t1101;
t1265 = t1148 + t1221;
t1228 = t1265 * t1155;
t958 = t1033 * t1158 + t1228;
t1227 = t1265 * t1158;
t989 = t1033 * t1155 - t1227;
t930 = t1156 * t958 + t1159 * t989;
t878 = t1157 * t1268 + t1160 * t930;
t928 = t1156 * t989 - t1159 * t958;
t1354 = qJ(1) * (t1152 * t928 + t1153 * t878);
t1353 = qJ(1) * (t1152 * t878 - t1153 * t928);
t876 = t1157 * t930 - t1160 * t1268;
t1352 = pkin(1) * t876;
t1351 = pkin(5) * t876;
t1350 = pkin(1) * t928 - pkin(5) * t878;
t1254 = t1101 ^ 2;
t1086 = t1254 - t1253;
t993 = t1086 * t1155 + t1227;
t997 = t1086 * t1158 - t1228;
t939 = t1156 * t993 - t1159 * t997;
t1199 = -t1155 * t1113 + t1158 * t1181;
t1007 = qJD(4) * t1103 - t1199;
t1094 = t1103 * t1149;
t979 = t1007 - t1094;
t888 = t1157 * t979 + t1160 * t939;
t934 = t1156 * t997 + t1159 * t993;
t1349 = t1152 * t888 + t1153 * t934;
t1267 = t1100 - t1254;
t1269 = t1007 + t1094;
t922 = -t1155 * t1269 + t1158 * t1268;
t1242 = t1155 * t1268;
t924 = t1158 * t1269 + t1242;
t858 = t1156 * t922 + t1159 * t924;
t849 = -t1157 * t1267 + t1160 * t858;
t854 = t1156 * t924 - t1159 * t922;
t1347 = t1152 * t849 - t1153 * t854;
t1346 = -t1152 * t934 + t1153 * t888;
t1344 = t1152 * t854 + t1153 * t849;
t1342 = pkin(2) * t928;
t1341 = pkin(6) * t928;
t1334 = pkin(2) * t1268 - pkin(6) * t930;
t884 = t1157 * t939 - t1160 * t979;
t847 = t1157 * t858 + t1160 * t1267;
t1087 = t1100 - t1253;
t1264 = -t1221 + t1148;
t1226 = t1264 * t1155;
t1299 = -t1087 * t1158 + t1226;
t1028 = t1158 * t1264;
t1300 = t1087 * t1155 + t1028;
t1309 = t1156 * t1300 + t1159 * t1299;
t1263 = t1222 + t1008;
t1308 = -t1156 * t1299 + t1159 * t1300;
t1322 = t1157 * t1263 + t1160 * t1308;
t1333 = t1152 * t1322 - t1153 * t1309;
t1332 = t1152 * t1309 + t1153 * t1322;
t1331 = pkin(3) * t958;
t1330 = pkin(7) * t958;
t1329 = pkin(7) * t989;
t1262 = -t1253 - t1254;
t1274 = t1158 * t1262 - t1226;
t1277 = t1155 * t1262 + t1028;
t1294 = -t1156 * t1277 + t1159 * t1274;
t1311 = t1157 * t1294 - t1160 * t1269;
t1328 = pkin(1) * t1311;
t1327 = pkin(5) * t1311;
t1293 = t1156 * t1274 + t1159 * t1277;
t1310 = t1157 * t1269 + t1160 * t1294;
t1324 = -pkin(1) * t1293 + pkin(5) * t1310;
t1323 = t1157 * t1308 - t1160 * t1263;
t1321 = qJ(1) * (t1152 * t1310 - t1153 * t1293);
t1320 = qJ(1) * (t1152 * t1293 + t1153 * t1310);
t1318 = pkin(2) * t1293;
t1317 = pkin(6) * t1293;
t1312 = -pkin(2) * t1269 + pkin(6) * t1294;
t1011 = -t1254 - t1100;
t1307 = pkin(2) * t1011;
t1306 = pkin(3) * t1011;
t1305 = pkin(3) * t1277;
t1304 = pkin(7) * t1274;
t1303 = pkin(7) * t1277;
t1302 = t1011 * t1157;
t1301 = t1011 * t1160;
t1179 = (-t1101 * t1155 - t1103 * t1158) * t1149;
t1213 = t1149 * t1155;
t1081 = t1103 * t1213;
t1212 = t1149 * t1158;
t1206 = t1101 * t1212;
t1187 = t1081 - t1206;
t1259 = t1156 * t1187 + t1159 * t1179;
t1258 = -t1156 * t1179 + t1159 * t1187;
t1272 = t1148 * t1157 + t1160 * t1258;
t1298 = t1152 * t1272 - t1153 * t1259;
t1182 = t1007 * t1155 + t1206;
t1188 = -t1007 * t1158 + t1101 * t1213;
t1256 = t1156 * t1182 + t1159 * t1188;
t1208 = t1157 * t1221;
t1257 = -t1156 * t1188 + t1159 * t1182;
t1273 = t1160 * t1257 - t1208;
t1297 = t1152 * t1273 - t1153 * t1256;
t1296 = t1152 * t1259 + t1153 * t1272;
t1295 = t1152 * t1256 + t1153 * t1273;
t1290 = qJ(5) * t1268;
t1180 = 0.2e1 * t1205 - t1210;
t1067 = t1180 * t1159;
t1276 = -t1148 * t1160 + t1157 * t1258;
t1207 = t1160 * t1221;
t1275 = t1157 * t1257 + t1207;
t1248 = g(3) - qJDD(1);
t1271 = t1152 * t1248;
t1270 = t1153 * t1248;
t1120 = g(1) * t1152 - g(2) * t1153;
t1105 = t1153 * t1120;
t1121 = g(1) * t1153 + g(2) * t1152;
t1266 = -t1121 * t1152 + t1105;
t970 = t1008 * t1155 + t1103 * t1212;
t971 = t1008 * t1158 - t1081;
t917 = -t1156 * t970 + t1159 * t971;
t1190 = t1160 * t917 + t1208;
t913 = t1156 * t971 + t1159 * t970;
t1261 = t1152 * t1190 - t1153 * t913;
t1260 = t1152 * t913 + t1153 * t1190;
t1255 = qJD(2) ^ 2;
t1252 = t1159 ^ 2;
t1091 = -t1121 * t1160 - t1157 * t1248;
t1061 = -pkin(2) * t1255 + qJDD(2) * pkin(6) + t1091;
t1022 = t1156 * t1061 + t1120 * t1159;
t1130 = t1156 * t1255 * t1159;
t1122 = qJDD(3) + t1130;
t965 = (-t1113 + t1138) * pkin(7) + t1122 * pkin(3) - t1022;
t1025 = t1061 * t1159 - t1120 * t1156;
t1124 = qJD(3) * pkin(3) - pkin(7) * t1234;
t1145 = t1252 * t1255;
t972 = -pkin(3) * t1145 + pkin(7) * t1181 - qJD(3) * t1124 + t1025;
t910 = t1155 * t972 - t1158 * t965;
t914 = t1155 * t965 + t1158 * t972;
t852 = t1155 * t914 - t1158 * t910;
t1251 = pkin(3) * t852;
t973 = t1158 * t1263;
t981 = (-qJD(4) + t1149) * t1103 + t1199;
t923 = t1155 * t981 - t973;
t1250 = pkin(3) * t923;
t1249 = pkin(4) * t1158;
t1231 = qJD(5) * t1149;
t1136 = 0.2e1 * t1231;
t1047 = pkin(4) * t1101 - qJ(5) * t1103;
t1185 = -pkin(4) * t1253 + qJ(5) * t1148 - t1047 * t1101 + t914;
t872 = t1136 + t1185;
t874 = -pkin(4) * t1148 - qJ(5) * t1253 + t1047 * t1103 + qJDD(5) + t910;
t1247 = -pkin(4) * t874 + qJ(5) * t872;
t1246 = -pkin(4) * t1263 - qJ(5) * t979;
t1245 = qJ(5) * t1158;
t1241 = t1155 * t1263;
t1240 = t1156 * t852;
t1237 = t1159 * t852;
t1235 = qJD(2) * qJD(3);
t1150 = t1156 ^ 2;
t1232 = t1255 * t1150;
t1197 = t1157 * t1121 - t1160 * t1248;
t1183 = qJDD(2) * pkin(2) + pkin(6) * t1255 + t1197;
t1000 = -pkin(3) * t1181 - pkin(7) * t1145 + t1124 * t1234 - t1183;
t1230 = t1000 * t1155;
t1229 = t1000 * t1158;
t1225 = t1183 * t1156;
t1224 = t1183 * t1159;
t1220 = t1120 * t1152;
t1218 = t1122 * t1156;
t1217 = t1122 * t1159;
t1123 = qJDD(3) - t1130;
t1216 = t1123 * t1156;
t1215 = t1123 * t1159;
t1209 = t1150 + t1252;
t1204 = -qJ(5) * t1155 - pkin(3);
t1115 = t1209 * qJDD(2);
t1118 = t1145 + t1232;
t1059 = t1115 * t1160 - t1118 * t1157;
t1058 = t1115 * t1157 + t1118 * t1160;
t957 = t1022 * t1156 + t1025 * t1159;
t1175 = pkin(2) * t1118 + pkin(6) * t1115 + t957;
t918 = -pkin(1) * t1058 - t1175;
t1203 = qJ(1) * t1059 + t918;
t853 = t1155 * t910 + t1158 * t914;
t1117 = qJDD(2) * t1160 - t1157 * t1255;
t1050 = -pkin(1) * t1117 - t1197;
t1116 = qJDD(2) * t1157 + t1160 * t1255;
t1202 = qJ(1) * t1116 - t1050;
t1051 = pkin(1) * t1116 + t1091;
t1201 = qJ(1) * t1117 - t1051;
t1200 = t1091 * t1160 - t1157 * t1197;
t1198 = -t1121 * t1153 - t1220;
t834 = t1155 * t872 - t1158 * t874;
t1196 = pkin(3) * t834 + t1247;
t921 = -t1155 * t979 - t973;
t1195 = pkin(3) * t921 + t1246;
t1194 = -t914 - t1331;
t1193 = t1157 * t1130;
t1192 = t1160 * t1130;
t1191 = pkin(2) * t1183 + pkin(6) * t957;
t1189 = t1157 * t917 - t1207;
t1066 = pkin(5) * t1116 - t1120 * t1160;
t1186 = -pkin(5) * t1117 - t1120 * t1157;
t956 = t1022 * t1159 - t1025 * t1156;
t1015 = -t1091 * t1157 - t1160 * t1197;
t1184 = -t910 + t1305;
t1178 = pkin(4) * t1033 + qJ(5) * t1265 + t1185;
t1161 = qJD(3) ^ 2;
t1129 = -t1145 - t1161;
t1074 = t1129 * t1159 - t1218;
t1177 = -pkin(2) * t1180 + pkin(6) * t1074 + t1224;
t1127 = -t1161 - t1232;
t1076 = -t1127 * t1156 - t1215;
t1112 = 0.2e1 * t1138 + t1211;
t1176 = -pkin(2) * t1112 + pkin(6) * t1076 - t1225;
t835 = t1155 * t874 + t1158 * t872;
t1163 = t1007 * pkin(4) + t1000 - t1290;
t875 = (pkin(4) * t1149 - 0.2e1 * qJD(5)) * t1103 + t1163;
t810 = pkin(7) * t835 + (t1204 - t1249) * t875;
t815 = -t1156 * t834 + t1159 * t835;
t816 = -pkin(7) * t834 + (pkin(4) * t1155 - t1245) * t875;
t1174 = -pkin(2) * t875 + pkin(6) * t815 + t1156 * t816 + t1159 * t810;
t1162 = 0.2e1 * qJD(5) * t1103 - t1163;
t862 = -pkin(4) * t1094 + t1162 + t1290;
t829 = -t1329 + t1155 * t862 + (pkin(3) + t1249) * t1268;
t836 = -pkin(4) * t1242 + t1158 * t862 - t1330;
t1173 = t1156 * t836 + t1159 * t829 + t1334;
t863 = (-t1269 - t1094) * pkin(4) + t1162;
t830 = t1158 * t863 + t1204 * t1269 + t1304;
t838 = -t1155 * t863 - t1245 * t1269 - t1303;
t1172 = t1156 * t838 + t1159 * t830 + t1312;
t880 = -pkin(3) * t1269 - t1229 + t1304;
t919 = t1230 - t1303;
t1171 = t1156 * t919 + t1159 * t880 + t1312;
t891 = -pkin(3) * t1268 + t1230 + t1329;
t940 = t1229 + t1330;
t1170 = t1156 * t940 + t1159 * t891 - t1334;
t1169 = t1178 + t1331;
t927 = t1158 * t981 + t1241;
t828 = pkin(7) * t927 - t1306 + t853;
t833 = -pkin(7) * t923 - t852;
t861 = -t1156 * t923 + t1159 * t927;
t1168 = pkin(6) * t861 + t1156 * t833 + t1159 * t828 - t1307;
t864 = -pkin(4) * t1011 + t872;
t865 = -qJ(5) * t1011 + t874;
t925 = -t1158 * t979 + t1241;
t819 = pkin(7) * t925 + t1155 * t865 + t1158 * t864 - t1306;
t822 = -pkin(7) * t921 - t1155 * t864 + t1158 * t865;
t859 = -t1156 * t921 + t1159 * t925;
t1167 = pkin(6) * t859 + t1156 * t822 + t1159 * t819 - t1307;
t824 = t1159 * t853 - t1240;
t841 = -pkin(3) * t1000 + pkin(7) * t853;
t1166 = -pkin(2) * t1000 + pkin(6) * t824 - pkin(7) * t1240 + t1159 * t841;
t1165 = pkin(4) * t1264 + qJ(5) * t1262 - t874;
t1164 = t1165 + t1305;
t1128 = t1145 - t1161;
t1126 = t1161 - t1232;
t1119 = -t1145 + t1232;
t1111 = t1209 * t1235;
t1085 = qJDD(3) * t1157 + t1111 * t1160;
t1084 = t1113 * t1159 - t1150 * t1235;
t1083 = -qJDD(3) * t1160 + t1111 * t1157;
t1082 = -t1156 * t1181 - t1235 * t1252;
t1075 = -t1126 * t1156 + t1217;
t1073 = t1128 * t1159 - t1216;
t1072 = t1127 * t1159 - t1216;
t1071 = t1126 * t1159 + t1218;
t1070 = t1129 * t1156 + t1217;
t1069 = t1128 * t1156 + t1215;
t1068 = (t1113 + t1138) * t1156;
t1056 = -t1112 * t1156 - t1067;
t1055 = t1112 * t1159 - t1156 * t1180;
t1041 = t1084 * t1160 - t1193;
t1040 = t1082 * t1160 + t1193;
t1039 = t1084 * t1157 + t1192;
t1038 = t1082 * t1157 - t1192;
t1037 = t1075 * t1160 + t1157 * t1211;
t1036 = t1073 * t1160 + t1157 * t1210;
t1035 = t1075 * t1157 - t1160 * t1211;
t1034 = t1073 * t1157 - t1160 * t1210;
t1027 = t1076 * t1160 + t1112 * t1157;
t1026 = t1074 * t1160 + t1157 * t1180;
t1024 = t1076 * t1157 - t1112 * t1160;
t1023 = t1074 * t1157 - t1160 * t1180;
t1010 = t1056 * t1160 + t1119 * t1157;
t1009 = t1056 * t1157 - t1119 * t1160;
t1002 = -pkin(6) * t1072 - t1224;
t1001 = -pkin(6) * t1070 - t1225;
t999 = pkin(1) * t1120 + pkin(5) * t1200;
t976 = -pkin(2) * t1072 + t1025;
t975 = -pkin(2) * t1070 + t1022;
t946 = -pkin(1) * t1023 - t1177;
t945 = -pkin(1) * t1024 - t1176;
t944 = -pkin(5) * t1058 + t1160 * t956;
t943 = pkin(5) * t1059 + t1157 * t956;
t942 = -t1157 * t1183 + t1160 * t957;
t941 = t1157 * t957 + t1160 * t1183;
t901 = -pkin(5) * t1024 + t1002 * t1160 - t1157 * t976;
t900 = -pkin(5) * t1023 + t1001 * t1160 - t1157 * t975;
t890 = -pkin(1) * t1072 + pkin(5) * t1027 + t1002 * t1157 + t1160 * t976;
t889 = -pkin(1) * t1070 + pkin(5) * t1026 + t1001 * t1157 + t1160 * t975;
t866 = -pkin(1) * t941 - t1191;
t857 = t1156 * t927 + t1159 * t923;
t855 = t1156 * t925 + t1159 * t921;
t851 = -pkin(5) * t941 - (pkin(2) * t1157 - pkin(6) * t1160) * t956;
t846 = t1160 * t861 + t1302;
t845 = t1160 * t859 + t1302;
t844 = t1157 * t861 - t1301;
t843 = t1157 * t859 - t1301;
t842 = -t1194 - t1342;
t840 = -t1184 - t1318;
t839 = pkin(5) * t942 - (-pkin(2) * t1160 - pkin(6) * t1157 - pkin(1)) * t956;
t837 = -pkin(2) * t857 - t1250;
t832 = -t1156 * t891 + t1159 * t940 - t1341;
t831 = -t1164 - t1318;
t827 = -t1156 * t880 + t1159 * t919 - t1317;
t826 = -t1169 - 0.2e1 * t1231 + t1342;
t825 = -pkin(2) * t855 - t1195;
t823 = t1156 * t853 + t1237;
t821 = t1000 * t1157 + t1160 * t824;
t820 = -t1000 * t1160 + t1157 * t824;
t818 = -t1170 - t1352;
t817 = -t1171 - t1328;
t814 = t1156 * t835 + t1159 * t834;
t813 = -pkin(2) * t823 - t1251;
t812 = -t1157 * t842 + t1160 * t832 - t1351;
t811 = -t1156 * t830 + t1159 * t838 - t1317;
t809 = -t1156 * t829 + t1159 * t836 + t1341;
t808 = t1157 * t875 + t1160 * t815;
t807 = t1157 * t815 - t1160 * t875;
t806 = -t1157 * t840 + t1160 * t827 - t1327;
t805 = t1157 * t832 + t1160 * t842 - t1350;
t804 = -pkin(6) * t857 - t1156 * t828 + t1159 * t833;
t803 = t1157 * t827 + t1160 * t840 + t1324;
t802 = -pkin(6) * t823 - pkin(7) * t1237 - t1156 * t841;
t801 = -t1172 - t1328;
t800 = -t1173 + t1352;
t799 = -pkin(1) * t844 - t1168;
t798 = -pkin(6) * t855 - t1156 * t819 + t1159 * t822;
t797 = -t1157 * t831 + t1160 * t811 - t1327;
t796 = -pkin(2) * t814 - t1196;
t795 = -t1157 * t826 + t1160 * t809 + t1351;
t794 = t1157 * t811 + t1160 * t831 + t1324;
t793 = -pkin(5) * t844 - t1157 * t837 + t1160 * t804;
t792 = t1157 * t809 + t1160 * t826 + t1350;
t791 = -pkin(1) * t820 - t1166;
t790 = -pkin(1) * t843 - t1167;
t789 = -pkin(1) * t857 + pkin(5) * t846 + t1157 * t804 + t1160 * t837;
t788 = -pkin(5) * t843 - t1157 * t825 + t1160 * t798;
t787 = -pkin(6) * t814 - t1156 * t810 + t1159 * t816;
t786 = -pkin(1) * t855 + pkin(5) * t845 + t1157 * t798 + t1160 * t825;
t785 = -pkin(5) * t820 - t1157 * t813 + t1160 * t802;
t784 = -pkin(1) * t823 + pkin(5) * t821 + t1157 * t802 + t1160 * t813;
t783 = -pkin(1) * t807 - t1174;
t782 = -pkin(5) * t807 - t1157 * t796 + t1160 * t787;
t781 = -pkin(1) * t814 + pkin(5) * t808 + t1157 * t787 + t1160 * t796;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1271, -t1270, -t1266, -qJ(1) * t1266, 0, 0, t1153 * t1117, 0, -t1153 * t1116, t1152 * qJDD(2), t1152 * t1202 + t1153 * t1186, t1153 * t1066 + t1152 * t1201, t1153 * t1015, -qJ(1) * (t1152 * t1200 + t1105) - (pkin(1) * t1152 - pkin(5) * t1153) * t1015, t1041 * t1153 + t1068 * t1152, t1010 * t1153 + t1055 * t1152, t1037 * t1153 + t1071 * t1152, t1040 * t1153 - t1067 * t1152, t1036 * t1153 + t1069 * t1152, t1153 * t1085, t1153 * t900 - t1152 * t946 - qJ(1) * (t1026 * t1152 - t1070 * t1153), t1153 * t901 - t1152 * t945 - qJ(1) * (t1027 * t1152 - t1072 * t1153), -t1152 * t1203 + t1153 * t944, t1153 * t851 - t1152 * t866 - qJ(1) * (t1152 * t942 + t1153 * t956), t1260, -t1344, t1332, t1295, -t1346, t1296, -t1152 * t817 + t1153 * t806 - t1321, -t1152 * t818 + t1153 * t812 - t1353, t1153 * t793 - t1152 * t799 - qJ(1) * (t1152 * t846 - t1153 * t857), t1153 * t785 - t1152 * t791 - qJ(1) * (t1152 * t821 - t1153 * t823), t1260, t1332, t1344, t1296, t1346, t1295, -t1152 * t801 + t1153 * t797 - t1321, t1153 * t788 - t1152 * t790 - qJ(1) * (t1152 * t845 - t1153 * t855), -t1152 * t800 + t1153 * t795 + t1353, t1153 * t782 - t1152 * t783 - qJ(1) * (t1152 * t808 - t1153 * t814); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1270, -t1271, t1198, qJ(1) * t1198, 0, 0, t1152 * t1117, 0, -t1152 * t1116, -t1153 * qJDD(2), t1152 * t1186 - t1153 * t1202, t1152 * t1066 - t1153 * t1201, t1152 * t1015, qJ(1) * (t1153 * t1200 - t1220) - (-pkin(1) * t1153 - pkin(5) * t1152) * t1015, t1041 * t1152 - t1068 * t1153, t1010 * t1152 - t1055 * t1153, t1037 * t1152 - t1071 * t1153, t1040 * t1152 + t1067 * t1153, t1036 * t1152 - t1069 * t1153, t1152 * t1085, t1152 * t900 + t1153 * t946 + qJ(1) * (t1026 * t1153 + t1070 * t1152), t1152 * t901 + t1153 * t945 + qJ(1) * (t1027 * t1153 + t1072 * t1152), t1152 * t944 + t1153 * t1203, t1152 * t851 + t1153 * t866 + qJ(1) * (-t1152 * t956 + t1153 * t942), t1261, -t1347, t1333, t1297, -t1349, t1298, t1152 * t806 + t1153 * t817 + t1320, t1152 * t812 + t1153 * t818 + t1354, t1152 * t793 + t1153 * t799 + qJ(1) * (t1152 * t857 + t1153 * t846), t1152 * t785 + t1153 * t791 + qJ(1) * (t1152 * t823 + t1153 * t821), t1261, t1333, t1347, t1298, t1349, t1297, t1152 * t797 + t1153 * t801 + t1320, t1152 * t788 + t1153 * t790 + qJ(1) * (t1152 * t855 + t1153 * t845), t1152 * t795 + t1153 * t800 - t1354, t1152 * t782 + t1153 * t783 + qJ(1) * (t1152 * t814 + t1153 * t808); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1120, t1121, 0, 0, 0, 0, t1116, 0, t1117, 0, -t1066, t1186, t1200, t999, t1039, t1009, t1035, t1038, t1034, t1083, t889, t890, t943, t839, t1189, -t847, t1323, t1275, -t884, t1276, t803, t805, t789, t784, t1189, t1323, t847, t1276, t884, t1275, t794, t786, t792, t781; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1248, -t1120, 0, 0, 0, t1117, 0, -t1116, 0, t1186, t1066, t1015, pkin(5) * t1015, t1041, t1010, t1037, t1040, t1036, t1085, t900, t901, t944, t851, t1190, -t849, t1322, t1273, -t888, t1272, t806, t812, t793, t785, t1190, t1322, t849, t1272, t888, t1273, t797, t788, t795, t782; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1248, 0, -t1121, 0, 0, 0, 0, 0, 0, -qJDD(2), t1050, t1051, 0, pkin(1) * t1015, -t1068, -t1055, -t1071, t1067, -t1069, 0, t946, t945, t918, t866, -t913, t854, -t1309, -t1256, -t934, -t1259, t817, t818, t799, t791, -t913, -t1309, -t854, -t1259, t934, -t1256, t801, t790, t800, t783; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1120, t1121, 0, 0, 0, 0, t1116, 0, t1117, 0, -t1066, t1186, t1200, t999, t1039, t1009, t1035, t1038, t1034, t1083, t889, t890, t943, t839, t1189, -t847, t1323, t1275, -t884, t1276, t803, t805, t789, t784, t1189, t1323, t847, t1276, t884, t1275, t794, t786, t792, t781; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t1255, 0, 0, -t1120, -t1197, 0, t1084, t1056, t1075, t1082, t1073, t1111, t1001, t1002, t956, pkin(6) * t956, t917, -t858, t1308, t1257, -t939, t1258, t827, t832, t804, t802, t917, t1308, t858, t1258, t939, t1257, t811, t798, t809, t787; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1255, 0, qJDD(2), 0, t1120, 0, t1091, 0, t1130, -t1119, -t1211, -t1130, -t1210, -qJDD(3), t975, t976, 0, pkin(2) * t956, -t1221, -t1267, -t1263, t1221, t979, -t1148, t840, t842, t837, t813, -t1221, -t1263, t1267, -t1148, -t979, t1221, t831, t825, t826, t796; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t1197, -t1091, 0, 0, t1068, t1055, t1071, -t1067, t1069, 0, t1177, t1176, t1175, t1191, t913, -t854, t1309, t1256, t934, t1259, t1171, t1170, t1168, t1166, t913, t1309, t854, t1259, -t934, t1256, t1172, t1167, t1173, t1174; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1113, -t1180, t1122, -t1138, t1128, t1138, 0, -t1183, t1022, 0, t971, -t924, t1300, t1182, t997, t1187, t919, t940, t833, -pkin(7) * t852, t971, t1300, t924, t1187, -t997, t1182, t838, t822, t836, t816; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1205, t1112, t1126, t1181, t1123, -t1205, t1183, 0, t1025, 0, t970, t922, t1299, t1188, t993, t1179, t880, t891, t828, t841, t970, t1299, -t922, t1179, -t993, t1188, t830, t819, t829, t810; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1130, t1119, t1211, t1130, t1210, qJDD(3), -t1022, -t1025, 0, 0, t1221, t1267, t1263, -t1221, -t979, t1148, t1184, t1194, t1250, t1251, t1221, t1263, -t1267, t1148, t979, -t1221, t1164, t1195, t1136 + t1169, t1196; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1008, -t1269, t1264, t1222, t1086, -t1222, 0, t1000, t910, 0, t1008, t1264, t1269, -t1222, -t1086, t1222, -qJ(5) * t1269, t865, t862, -qJ(5) * t875; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1094, t1268, -t1087, -t1007, t1265, -t1094, -t1000, 0, t914, 0, t1094, -t1087, -t1268, -t1094, -t1265, -t1007, t863, t864, pkin(4) * t1268, -pkin(4) * t875; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1221, t1267, t1263, -t1221, -t979, t1148, -t910, -t914, 0, 0, t1221, t1263, -t1267, t1148, t979, -t1221, t1165, t1246, t1136 + t1178, t1247; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1008, t1264, t1269, -t1222, -t1086, t1222, 0, t874, -t875, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1221, t1263, -t1267, t1148, t979, -t1221, -t874, 0, t872, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1094, t1087, t1268, t1094, t1265, t1007, t875, -t872, 0, 0;];
m_new_reg = t1;
