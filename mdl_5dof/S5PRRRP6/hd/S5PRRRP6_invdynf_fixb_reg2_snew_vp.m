% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRRRP6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d4,theta1]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:53
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRRRP6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRP6_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRP6_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRP6_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRP6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRRRP6_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:52:59
% EndTime: 2019-12-05 16:53:02
% DurationCPUTime: 3.04s
% Computational Cost: add. (5750->193), mult. (11747->229), div. (0->0), fcn. (8041->8), ass. (0->133)
t1521 = qJDD(3) + qJDD(4);
t1504 = sin(qJ(4));
t1505 = sin(qJ(3));
t1507 = cos(qJ(4));
t1508 = cos(qJ(3));
t1465 = (-t1504 * t1505 + t1507 * t1508) * qJD(2);
t1467 = (t1504 * t1508 + t1505 * t1507) * qJD(2);
t1529 = t1467 * t1465;
t1442 = -t1521 + t1529;
t1464 = t1467 ^ 2;
t1498 = qJD(3) + qJD(4);
t1534 = t1498 ^ 2;
t1539 = -t1464 - t1534;
t1420 = t1504 * t1442 + t1507 * t1539;
t1422 = t1507 * t1442 - t1504 * t1539;
t1388 = t1505 * t1420 - t1508 * t1422;
t1506 = sin(qJ(2));
t1509 = cos(qJ(2));
t1518 = t1508 * qJD(2) * qJD(3);
t1523 = t1505 * qJDD(2);
t1474 = t1518 + t1523;
t1531 = qJD(2) * t1505;
t1519 = qJD(3) * t1531;
t1522 = t1508 * qJDD(2);
t1515 = -t1519 + t1522;
t1513 = t1465 * qJD(4) + t1507 * t1474 + t1504 * t1515;
t1530 = t1465 * t1498;
t1512 = t1513 + t1530;
t1377 = t1509 * t1388 - t1506 * t1512;
t1396 = t1508 * t1420 + t1505 * t1422;
t1501 = sin(pkin(8));
t1502 = cos(pkin(8));
t1561 = t1501 * t1377 + t1502 * t1396;
t1560 = t1502 * t1377 - t1501 * t1396;
t1375 = t1506 * t1388 + t1509 * t1512;
t1441 = t1521 + t1529;
t1444 = t1465 ^ 2;
t1538 = -t1534 - t1444;
t1544 = -t1504 * t1441 + t1507 * t1538;
t1545 = t1507 * t1441 + t1504 * t1538;
t1546 = t1505 * t1544 + t1508 * t1545;
t1557 = t1501 * t1546;
t1556 = t1502 * t1546;
t1547 = -t1505 * t1545 + t1508 * t1544;
t1555 = t1506 * t1547;
t1554 = t1509 * t1547;
t1419 = t1513 - t1530;
t1517 = t1504 * t1474 - t1507 * t1515;
t1514 = (-qJD(4) + t1498) * t1467 - t1517;
t1536 = t1504 * t1419 + t1507 * t1514;
t1537 = -t1507 * t1419 + t1504 * t1514;
t1542 = t1505 * t1536 + t1508 * t1537;
t1428 = t1464 + t1444;
t1543 = -t1505 * t1537 + t1508 * t1536;
t1548 = -t1506 * t1428 + t1509 * t1543;
t1553 = t1501 * t1548 - t1502 * t1542;
t1552 = t1501 * t1542 + t1502 * t1548;
t1549 = t1509 * t1428 + t1506 * t1543;
t1535 = qJD(2) ^ 2;
t1533 = t1508 ^ 2;
t1532 = -g(3) + qJDD(1);
t1480 = t1501 * g(1) - t1502 * g(2);
t1528 = t1501 * t1480;
t1481 = -t1502 * g(1) - t1501 * g(2);
t1458 = t1509 * t1481 + t1506 * t1532;
t1449 = -t1535 * pkin(2) + qJDD(2) * pkin(6) + t1458;
t1525 = t1505 * t1449;
t1524 = t1533 * t1535;
t1434 = t1508 * t1449 - t1505 * t1480;
t1484 = qJD(3) * pkin(3) - pkin(7) * t1531;
t1411 = -pkin(3) * t1524 + t1515 * pkin(7) - qJD(3) * t1484 + t1434;
t1511 = qJDD(3) * pkin(3) - t1474 * pkin(7) - t1525 + (-t1480 + (pkin(3) * t1531 + pkin(7) * qJD(3)) * qJD(2)) * t1508;
t1391 = t1507 * t1411 + t1504 * t1511;
t1499 = t1505 ^ 2;
t1520 = t1499 + t1533;
t1390 = -t1504 * t1411 + t1507 * t1511;
t1457 = -t1506 * t1481 + t1509 * t1532;
t1448 = -qJDD(2) * pkin(2) - t1535 * pkin(6) - t1457;
t1516 = -t1467 * qJD(4) - t1517;
t1424 = -t1515 * pkin(3) - pkin(7) * t1524 + t1484 * t1531 + t1448;
t1510 = qJD(3) ^ 2;
t1488 = t1505 * t1535 * t1508;
t1487 = -t1510 - t1524;
t1486 = -t1499 * t1535 - t1510;
t1483 = -qJDD(3) + t1488;
t1482 = qJDD(3) + t1488;
t1479 = t1520 * t1535;
t1478 = t1509 * qJDD(2) - t1506 * t1535;
t1477 = -t1506 * qJDD(2) - t1509 * t1535;
t1476 = t1520 * qJDD(2);
t1475 = -0.2e1 * t1519 + t1522;
t1473 = 0.2e1 * t1518 + t1523;
t1469 = t1502 * t1480;
t1453 = t1508 * t1483 - t1505 * t1486;
t1452 = -t1505 * t1482 + t1508 * t1487;
t1451 = t1505 * t1483 + t1508 * t1486;
t1450 = t1508 * t1482 + t1505 * t1487;
t1447 = t1509 * t1476 - t1506 * t1479;
t1446 = t1506 * t1476 + t1509 * t1479;
t1443 = -t1465 * pkin(4) - t1467 * qJ(5);
t1436 = t1509 * t1453 + t1506 * t1473;
t1435 = t1509 * t1452 - t1506 * t1475;
t1433 = t1506 * t1453 - t1509 * t1473;
t1432 = t1506 * t1452 + t1509 * t1475;
t1431 = -t1508 * t1480 - t1525;
t1430 = -t1506 * t1457 + t1509 * t1458;
t1429 = t1509 * t1457 + t1506 * t1458;
t1414 = t1467 * t1498 - t1516;
t1413 = (qJD(4) + t1498) * t1467 + t1517;
t1403 = -t1505 * t1431 + t1508 * t1434;
t1402 = t1508 * t1431 + t1505 * t1434;
t1401 = t1509 * t1403 + t1506 * t1448;
t1400 = t1506 * t1403 - t1509 * t1448;
t1385 = t1506 * t1414 + t1554;
t1383 = -t1509 * t1414 + t1555;
t1381 = -t1516 * pkin(4) + (pkin(4) * t1498 - (2 * qJD(5))) * t1467 + t1424 - t1512 * qJ(5);
t1380 = -t1521 * pkin(4) - qJ(5) * t1534 + t1467 * t1443 + qJDD(5) - t1390;
t1379 = -pkin(4) * t1534 + t1521 * qJ(5) + 0.2e1 * qJD(5) * t1498 + t1465 * t1443 + t1391;
t1378 = t1506 * t1413 + t1554;
t1376 = -t1509 * t1413 + t1555;
t1370 = -t1504 * t1390 + t1507 * t1391;
t1369 = t1507 * t1390 + t1504 * t1391;
t1364 = t1507 * t1379 + t1504 * t1380;
t1363 = t1504 * t1379 - t1507 * t1380;
t1362 = -t1505 * t1369 + t1508 * t1370;
t1361 = t1508 * t1369 + t1505 * t1370;
t1360 = t1509 * t1362 + t1506 * t1424;
t1359 = t1506 * t1362 - t1509 * t1424;
t1358 = -t1505 * t1363 + t1508 * t1364;
t1357 = t1508 * t1363 + t1505 * t1364;
t1356 = t1509 * t1358 + t1506 * t1381;
t1355 = t1506 * t1358 - t1509 * t1381;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1502 * t1481 - t1528, 0, 0, 0, 0, 0, 0, t1502 * t1477, -t1502 * t1478, 0, t1502 * t1430 - t1528, 0, 0, 0, 0, 0, 0, t1502 * t1435 + t1501 * t1450, t1502 * t1436 + t1501 * t1451, t1502 * t1447, t1502 * t1401 + t1501 * t1402, 0, 0, 0, 0, 0, 0, t1502 * t1378 + t1557, -t1560, t1552, t1502 * t1360 + t1501 * t1361, 0, 0, 0, 0, 0, 0, t1502 * t1385 + t1557, t1552, t1560, t1502 * t1356 + t1501 * t1357; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1501 * t1481 + t1469, 0, 0, 0, 0, 0, 0, t1501 * t1477, -t1501 * t1478, 0, t1501 * t1430 + t1469, 0, 0, 0, 0, 0, 0, t1501 * t1435 - t1502 * t1450, t1501 * t1436 - t1502 * t1451, t1501 * t1447, t1501 * t1401 - t1502 * t1402, 0, 0, 0, 0, 0, 0, t1501 * t1378 - t1556, -t1561, t1553, t1501 * t1360 - t1502 * t1361, 0, 0, 0, 0, 0, 0, t1501 * t1385 - t1556, t1553, t1561, t1501 * t1356 - t1502 * t1357; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1532, 0, 0, 0, 0, 0, 0, t1478, t1477, 0, t1429, 0, 0, 0, 0, 0, 0, t1432, t1433, t1446, t1400, 0, 0, 0, 0, 0, 0, t1376, -t1375, t1549, t1359, 0, 0, 0, 0, 0, 0, t1383, t1549, t1375, t1355; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1481, 0, 0, 0, 0, 0, 0, t1477, -t1478, 0, t1430, 0, 0, 0, 0, 0, 0, t1435, t1436, t1447, t1401, 0, 0, 0, 0, 0, 0, t1378, -t1377, t1548, t1360, 0, 0, 0, 0, 0, 0, t1385, t1548, t1377, t1356; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1480, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1480, 0, 0, 0, 0, 0, 0, -t1450, -t1451, 0, -t1402, 0, 0, 0, 0, 0, 0, -t1546, -t1396, -t1542, -t1361, 0, 0, 0, 0, 0, 0, -t1546, -t1542, t1396, -t1357; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1532, 0, 0, 0, 0, 0, 0, t1478, t1477, 0, t1429, 0, 0, 0, 0, 0, 0, t1432, t1433, t1446, t1400, 0, 0, 0, 0, 0, 0, t1376, -t1375, t1549, t1359, 0, 0, 0, 0, 0, 0, t1383, t1549, t1375, t1355; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1535, -qJDD(2), 0, t1458, 0, 0, 0, 0, 0, 0, t1452, t1453, t1476, t1403, 0, 0, 0, 0, 0, 0, t1547, -t1388, t1543, t1362, 0, 0, 0, 0, 0, 0, t1547, t1543, t1388, t1358; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1535, 0, t1457, 0, 0, 0, 0, 0, 0, t1475, -t1473, t1479, -t1448, 0, 0, 0, 0, 0, 0, -t1413, -t1512, t1428, -t1424, 0, 0, 0, 0, 0, 0, -t1414, t1428, t1512, -t1381; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1480, 0, 0, 0, 0, 0, 0, t1450, t1451, 0, t1402, 0, 0, 0, 0, 0, 0, t1546, t1396, t1542, t1361, 0, 0, 0, 0, 0, 0, t1546, t1542, -t1396, t1357; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1487, t1483, t1522, t1434, 0, 0, 0, 0, 0, 0, t1544, t1422, t1536, t1370, 0, 0, 0, 0, 0, 0, t1544, t1536, -t1422, t1364; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1482, t1486, -t1523, t1431, 0, 0, 0, 0, 0, 0, t1545, t1420, t1537, t1369, 0, 0, 0, 0, 0, 0, t1545, t1537, -t1420, t1363; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1475, t1473, -t1479, t1448, 0, 0, 0, 0, 0, 0, t1413, t1512, -t1428, t1424, 0, 0, 0, 0, 0, 0, t1414, -t1428, -t1512, t1381; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1538, t1442, t1514, t1391, 0, 0, 0, 0, 0, 0, t1538, t1514, -t1442, t1379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1441, t1539, -t1419, t1390, 0, 0, 0, 0, 0, 0, t1441, -t1419, -t1539, -t1380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1413, t1512, -t1428, t1424, 0, 0, 0, 0, 0, 0, t1414, -t1428, -t1512, t1381; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1538, t1514, -t1442, t1379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1414, -t1428, -t1512, t1381; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1441, t1419, t1539, t1380;];
f_new_reg = t1;
