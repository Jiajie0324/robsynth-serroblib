% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PRRRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d4,d5,theta1]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:06
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PRRRR3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR3_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR3_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRR3_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRR3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRRRR3_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:06:32
% EndTime: 2019-12-05 17:06:42
% DurationCPUTime: 10.10s
% Computational Cost: add. (43285->409), mult. (61355->553), div. (0->0), fcn. (44102->10), ass. (0->282)
t785 = qJD(2) + qJD(3);
t780 = qJD(4) + t785;
t778 = t780 ^ 2;
t784 = qJDD(2) + qJDD(3);
t779 = qJDD(4) + t784;
t792 = sin(qJ(4));
t796 = cos(qJ(4));
t743 = t778 * t796 + t779 * t792;
t746 = t778 * t792 - t779 * t796;
t793 = sin(qJ(3));
t797 = cos(qJ(3));
t678 = t743 * t797 - t746 * t793;
t788 = g(3) - qJDD(1);
t720 = pkin(7) * t743 - t788 * t796;
t875 = pkin(7) * t746 - t788 * t792;
t623 = pkin(6) * t678 + t720 * t797 - t793 * t875;
t683 = t743 * t793 + t746 * t797;
t794 = sin(qJ(2));
t798 = cos(qJ(2));
t630 = t678 * t798 - t683 * t794;
t887 = pkin(6) * t683 + t720 * t793 + t797 * t875;
t557 = pkin(5) * t630 + t623 * t798 - t794 * t887;
t789 = sin(pkin(9));
t790 = cos(pkin(9));
t635 = t678 * t794 + t683 * t798;
t890 = t630 * t790 - t635 * t789;
t904 = pkin(5) * t635 + t623 * t794 + t798 * t887;
t915 = qJ(1) * t890 + t790 * t557 - t789 * t904;
t905 = t630 * t789 + t635 * t790;
t914 = qJ(1) * t905 + t789 * t557 + t790 * t904;
t770 = g(1) * t789 - t790 * g(2);
t771 = g(1) * t790 + g(2) * t789;
t820 = t798 * t770 + t771 * t794;
t709 = qJDD(2) * pkin(2) + t820;
t716 = t770 * t794 - t771 * t798;
t800 = qJD(2) ^ 2;
t710 = -pkin(2) * t800 + t716;
t650 = t709 * t793 + t710 * t797;
t783 = t785 ^ 2;
t644 = -pkin(3) * t783 + t650;
t649 = -t797 * t709 + t710 * t793;
t805 = pkin(3) * t784 - t649;
t596 = t644 * t792 - t796 * t805;
t597 = t796 * t644 + t792 * t805;
t826 = t596 * t792 + t796 * t597;
t552 = t596 * t796 - t597 * t792;
t852 = t552 * t797;
t530 = -t793 * t826 + t852;
t853 = t552 * t793;
t877 = t797 * t826 + t853;
t512 = t530 * t798 - t794 * t877;
t899 = t530 * t794 + t798 * t877;
t912 = t512 * t789 + t790 * t899;
t911 = t512 * t790 - t789 * t899;
t752 = t783 * t797 + t784 * t793;
t755 = t783 * t793 - t784 * t797;
t687 = t752 * t798 - t755 * t794;
t724 = pkin(6) * t752 - t788 * t797;
t876 = pkin(6) * t755 - t788 * t793;
t640 = pkin(5) * t687 + t724 * t798 - t794 * t876;
t691 = t752 * t794 + t755 * t798;
t873 = t687 * t790 - t691 * t789;
t888 = pkin(5) * t691 + t724 * t794 + t798 * t876;
t906 = qJ(1) * t873 + t790 * t640 - t789 * t888;
t889 = t687 * t789 + t691 * t790;
t903 = qJ(1) * t889 + t789 * t640 + t790 * t888;
t825 = t649 * t793 + t797 * t650;
t604 = t649 * t797 - t650 * t793;
t850 = t604 * t798;
t564 = -t794 * t825 + t850;
t851 = t604 * t794;
t878 = t798 * t825 + t851;
t898 = t564 * t789 + t790 * t878;
t897 = t564 * t790 - t789 * t878;
t824 = t798 * t716 - t794 * t820;
t656 = -t716 * t794 - t798 * t820;
t848 = t656 * t790;
t880 = -t789 * t824 + t848;
t849 = t656 * t789;
t879 = t790 * t824 + t849;
t767 = qJDD(2) * t794 + t798 * t800;
t739 = pkin(5) * t767 - t788 * t798;
t768 = qJDD(2) * t798 - t794 * t800;
t811 = -pkin(5) * t768 - t788 * t794;
t858 = t790 * t767 + t768 * t789;
t872 = qJ(1) * t858 + t790 * t739 - t789 * t811;
t713 = -t767 * t789 + t790 * t768;
t871 = -qJ(1) * t713 + t789 * t739 + t790 * t811;
t594 = -t778 * pkin(4) + t779 * pkin(8) + t597;
t791 = sin(qJ(5));
t795 = cos(qJ(5));
t588 = t594 * t791 + t795 * t788;
t589 = t594 * t795 - t788 * t791;
t547 = t791 * t588 + t795 * t589;
t856 = pkin(1) * t788;
t855 = pkin(2) * t788;
t766 = t791 * t778 * t795;
t759 = qJDD(5) + t766;
t847 = t759 * t791;
t760 = qJDD(5) - t766;
t846 = t760 * t791;
t845 = t760 * t795;
t786 = t791 ^ 2;
t842 = t778 * t786;
t837 = t789 * t788;
t836 = t790 * t788;
t593 = -t779 * pkin(4) - t778 * pkin(8) + t596;
t590 = t791 * t593;
t835 = t791 * t779;
t591 = t795 * t593;
t773 = t795 * t779;
t549 = pkin(3) * t552;
t834 = -pkin(2) * t530 - t549;
t833 = -pkin(4) * t593 + pkin(8) * t547;
t787 = t795 ^ 2;
t832 = t786 + t787;
t831 = qJD(5) * t780;
t799 = qJD(5) ^ 2;
t763 = -t799 - t842;
t707 = -t763 * t791 - t845;
t772 = t795 * t831;
t732 = 0.2e1 * t772 + t835;
t830 = -pkin(4) * t732 + pkin(8) * t707 + t590;
t774 = t787 * t778;
t765 = -t774 - t799;
t704 = t765 * t795 - t847;
t827 = t791 * t831;
t737 = t773 - 0.2e1 * t827;
t829 = pkin(4) * t737 + pkin(8) * t704 - t591;
t535 = t547 * t792 - t593 * t796;
t828 = pkin(3) * t535 + t833;
t821 = -t770 * t789 - t790 * t771;
t819 = t792 * t766;
t818 = t796 * t766;
t536 = t547 * t796 + t593 * t792;
t520 = t535 * t797 + t536 * t793;
t817 = pkin(2) * t520 + t828;
t741 = t832 * t779;
t747 = t774 + t842;
t816 = pkin(4) * t747 + pkin(8) * t741 + t547;
t661 = t707 * t792 - t732 * t796;
t815 = pkin(3) * t661 + t830;
t660 = t704 * t792 + t737 * t796;
t814 = pkin(3) * t660 + t829;
t813 = -pkin(3) * t746 - t596;
t812 = -pkin(2) * t755 - t649;
t677 = t741 * t792 + t747 * t796;
t810 = pkin(3) * t677 + t816;
t662 = t704 * t796 - t737 * t792;
t610 = t660 * t797 + t662 * t793;
t809 = pkin(2) * t610 + t814;
t663 = t707 * t796 + t732 * t792;
t611 = t661 * t797 + t663 * t793;
t808 = pkin(2) * t611 + t815;
t546 = t588 * t795 - t589 * t791;
t807 = t770 * t790 - t771 * t789;
t806 = -pkin(2) * t683 + t813;
t681 = t741 * t796 - t747 * t792;
t629 = t677 * t797 + t681 * t793;
t804 = pkin(2) * t629 + t810;
t803 = -pkin(2) * t752 - t650;
t802 = -pkin(3) * t743 - t597;
t801 = -pkin(2) * t678 + t802;
t764 = t774 - t799;
t762 = t799 - t842;
t749 = t795 * t759;
t748 = -t774 + t842;
t736 = t773 - t827;
t733 = t772 + t835;
t728 = t832 * t831;
t712 = qJDD(5) * t792 + t728 * t796;
t711 = -qJDD(5) * t796 + t728 * t792;
t706 = t764 * t791 + t845;
t705 = -t762 * t791 + t749;
t703 = t764 * t795 - t846;
t702 = t762 * t795 + t847;
t701 = t763 * t795 - t846;
t700 = t765 * t791 + t749;
t699 = t733 * t795 - t786 * t831;
t698 = -t736 * t791 - t787 * t831;
t694 = (t736 - t827) * t795;
t693 = (t733 + t772) * t791;
t686 = -pkin(1) * t767 - t716;
t685 = pkin(1) * t768 + t820;
t673 = -t732 * t791 + t737 * t795;
t672 = t732 * t795 + t737 * t791;
t671 = t705 * t796 + t792 * t835;
t670 = t703 * t796 + t792 * t773;
t669 = t705 * t792 - t796 * t835;
t668 = t703 * t792 - t796 * t773;
t667 = t699 * t796 - t819;
t666 = t698 * t796 + t819;
t665 = t699 * t792 + t818;
t664 = t698 * t792 - t818;
t653 = pkin(1) * t656;
t652 = -t711 * t793 + t712 * t797;
t651 = t711 * t797 + t712 * t793;
t648 = pkin(5) * t824 + t856;
t647 = t673 * t796 + t748 * t792;
t646 = t673 * t792 - t748 * t796;
t633 = -t677 * t793 + t681 * t797;
t627 = -t669 * t793 + t671 * t797;
t626 = -t668 * t793 + t670 * t797;
t625 = t669 * t797 + t671 * t793;
t624 = t668 * t797 + t670 * t793;
t619 = -t665 * t793 + t667 * t797;
t618 = -t664 * t793 + t666 * t797;
t617 = t665 * t797 + t667 * t793;
t616 = t664 * t797 + t666 * t793;
t615 = -pkin(1) * t691 + t812;
t614 = -pkin(1) * t687 + t803;
t613 = -t661 * t793 + t663 * t797;
t612 = -t660 * t793 + t662 * t797;
t607 = -t651 * t794 + t652 * t798;
t606 = t651 * t798 + t652 * t794;
t601 = pkin(2) * t604;
t600 = -t646 * t793 + t647 * t797;
t599 = t646 * t797 + t647 * t793;
t598 = pkin(6) * t825 + t855;
t585 = -t629 * t794 + t633 * t798;
t584 = t629 * t798 + t633 * t794;
t581 = -pkin(8) * t701 + t591;
t580 = -pkin(8) * t700 + t590;
t579 = -t625 * t794 + t627 * t798;
t578 = -t624 * t794 + t626 * t798;
t577 = t625 * t798 + t627 * t794;
t576 = t624 * t798 + t626 * t794;
t575 = -pkin(4) * t701 + t589;
t574 = -pkin(4) * t700 + t588;
t573 = -t617 * t794 + t619 * t798;
t572 = -t616 * t794 + t618 * t798;
t571 = t617 * t798 + t619 * t794;
t570 = t616 * t798 + t618 * t794;
t569 = -t611 * t794 + t613 * t798;
t568 = -t610 * t794 + t612 * t798;
t567 = t611 * t798 + t613 * t794;
t566 = t610 * t798 + t612 * t794;
t561 = -t599 * t794 + t600 * t798;
t560 = t599 * t798 + t600 * t794;
t559 = -pkin(1) * t635 + t806;
t558 = -pkin(1) * t630 + t801;
t548 = pkin(3) * t788 + pkin(7) * t826;
t543 = -pkin(7) * t677 + t546 * t796;
t542 = pkin(7) * t681 + t546 * t792;
t541 = -pkin(1) * t564 - t601;
t540 = -pkin(7) * t661 - t575 * t792 + t581 * t796;
t539 = -pkin(7) * t660 - t574 * t792 + t580 * t796;
t538 = -pkin(3) * t701 + pkin(7) * t663 + t575 * t796 + t581 * t792;
t537 = -pkin(3) * t700 + pkin(7) * t662 + t574 * t796 + t580 * t792;
t533 = pkin(5) * t564 + pkin(6) * t850 - t598 * t794;
t532 = pkin(5) * t878 + pkin(6) * t851 + t598 * t798 + t856;
t526 = pkin(1) * t567 + t808;
t525 = pkin(1) * t566 + t809;
t524 = pkin(1) * t584 + t804;
t523 = -pkin(6) * t629 - t542 * t793 + t543 * t797;
t522 = pkin(6) * t633 + t542 * t797 + t543 * t793;
t521 = -t535 * t793 + t536 * t797;
t518 = -pkin(6) * t611 - t538 * t793 + t540 * t797;
t517 = -pkin(6) * t610 - t537 * t793 + t539 * t797;
t516 = -pkin(2) * t701 + pkin(6) * t613 + t538 * t797 + t540 * t793;
t515 = -pkin(2) * t700 + pkin(6) * t612 + t537 * t797 + t539 * t793;
t514 = -pkin(7) * t535 - (pkin(4) * t792 - pkin(8) * t796) * t546;
t509 = pkin(6) * t530 + pkin(7) * t852 - t548 * t793;
t508 = pkin(6) * t877 + pkin(7) * t853 + t548 * t797 + t855;
t507 = pkin(7) * t536 - (-pkin(4) * t796 - pkin(8) * t792 - pkin(3)) * t546;
t506 = -pkin(5) * t584 - t522 * t794 + t523 * t798;
t505 = pkin(5) * t585 + t522 * t798 + t523 * t794;
t504 = -t520 * t794 + t521 * t798;
t503 = t520 * t798 + t521 * t794;
t502 = -pkin(1) * t512 + t834;
t501 = -pkin(5) * t567 - t516 * t794 + t518 * t798;
t500 = -pkin(5) * t566 - t515 * t794 + t517 * t798;
t499 = -pkin(1) * t701 + pkin(5) * t569 + t516 * t798 + t518 * t794;
t498 = -pkin(1) * t700 + pkin(5) * t568 + t515 * t798 + t517 * t794;
t497 = pkin(5) * t512 - t508 * t794 + t509 * t798;
t496 = pkin(5) * t899 + t508 * t798 + t509 * t794 + t856;
t495 = -pkin(6) * t520 - t507 * t793 + t514 * t797;
t494 = pkin(1) * t503 + t817;
t493 = pkin(2) * t546 + pkin(6) * t521 + t507 * t797 + t514 * t793;
t492 = -pkin(5) * t503 - t493 * t794 + t495 * t798;
t491 = pkin(1) * t546 + pkin(5) * t504 + t493 * t798 + t495 * t794;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t837, -t836, -t807, -qJ(1) * t807, 0, 0, t713, 0, -t858, 0, t871, t872, t880, pkin(5) * t848 + qJ(1) * t880 - t789 * t648, 0, 0, -t889, 0, -t873, 0, t903, t906, t897, qJ(1) * t897 - t789 * t532 + t790 * t533, 0, 0, -t905, 0, -t890, 0, t914, t915, t911, qJ(1) * t911 - t789 * t496 + t790 * t497, -t571 * t789 + t573 * t790, -t560 * t789 + t561 * t790, -t577 * t789 + t579 * t790, -t570 * t789 + t572 * t790, -t576 * t789 + t578 * t790, -t606 * t789 + t607 * t790, t790 * t500 - t789 * t498 - qJ(1) * (t566 * t790 + t568 * t789), t790 * t501 - t789 * t499 - qJ(1) * (t567 * t790 + t569 * t789), t790 * t506 - t789 * t505 - qJ(1) * (t584 * t790 + t585 * t789), t790 * t492 - t789 * t491 - qJ(1) * (t503 * t790 + t504 * t789); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t836, -t837, t821, qJ(1) * t821, 0, 0, t858, 0, t713, 0, -t872, t871, t879, pkin(5) * t849 + qJ(1) * t879 + t790 * t648, 0, 0, t873, 0, -t889, 0, -t906, t903, t898, qJ(1) * t898 + t790 * t532 + t789 * t533, 0, 0, t890, 0, -t905, 0, -t915, t914, t912, qJ(1) * t912 + t790 * t496 + t789 * t497, t571 * t790 + t573 * t789, t560 * t790 + t561 * t789, t577 * t790 + t579 * t789, t570 * t790 + t572 * t789, t576 * t790 + t578 * t789, t606 * t790 + t607 * t789, t789 * t500 + t790 * t498 + qJ(1) * (-t566 * t789 + t568 * t790), t789 * t501 + t790 * t499 + qJ(1) * (-t567 * t789 + t569 * t790), t789 * t506 + t790 * t505 + qJ(1) * (-t584 * t789 + t585 * t790), t789 * t492 + t790 * t491 + qJ(1) * (-t503 * t789 + t504 * t790); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t770, t771, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t685, t686, 0, -t653, 0, 0, 0, 0, 0, t784, t615, t614, 0, t541, 0, 0, 0, 0, 0, t779, t559, t558, 0, t502, t693, t672, t702, t694, t706, 0, t525, t526, t524, t494; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t788, -t770, 0, 0, 0, t768, 0, -t767, 0, t811, t739, t656, pkin(5) * t656, 0, 0, -t691, 0, -t687, 0, t888, t640, t564, t533, 0, 0, -t635, 0, -t630, 0, t904, t557, t512, t497, t573, t561, t579, t572, t578, t607, t500, t501, t506, t492; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t788, 0, -t771, 0, 0, 0, t767, 0, t768, 0, -t739, t811, t824, t648, 0, 0, t687, 0, -t691, 0, -t640, t888, t878, t532, 0, 0, t630, 0, -t635, 0, -t557, t904, t899, t496, t571, t560, t577, t570, t576, t606, t498, t499, t505, t491; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t770, t771, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t685, t686, 0, -t653, 0, 0, 0, 0, 0, t784, t615, t614, 0, t541, 0, 0, 0, 0, 0, t779, t559, t558, 0, t502, t693, t672, t702, t694, t706, 0, t525, t526, t524, t494; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t800, 0, 0, -t788, -t820, 0, 0, 0, -t755, 0, -t752, 0, t876, t724, t604, pkin(6) * t604, 0, 0, -t683, 0, -t678, 0, t887, t623, t530, t509, t619, t600, t627, t618, t626, t652, t517, t518, t523, t495; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t800, 0, qJDD(2), 0, t788, 0, t716, 0, 0, 0, t752, 0, -t755, 0, -t724, t876, t825, t598, 0, 0, t678, 0, -t683, 0, -t623, t887, t877, t508, t617, t599, t625, t616, t624, t651, t515, t516, t522, t493; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t820, -t716, 0, 0, 0, 0, 0, 0, 0, t784, t812, t803, 0, -t601, 0, 0, 0, 0, 0, t779, t806, t801, 0, t834, t693, t672, t702, t694, t706, 0, t809, t808, t804, t817; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t784, 0, -t783, 0, 0, -t788, t649, 0, 0, 0, -t746, 0, -t743, 0, t875, t720, t552, pkin(7) * t552, t667, t647, t671, t666, t670, t712, t539, t540, t543, t514; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t783, 0, t784, 0, t788, 0, t650, 0, 0, 0, t743, 0, -t746, 0, -t720, t875, t826, t548, t665, t646, t669, t664, t668, t711, t537, t538, t542, t507; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t784, -t649, -t650, 0, 0, 0, 0, 0, 0, 0, t779, t813, t802, 0, -t549, t693, t672, t702, t694, t706, 0, t814, t815, t810, t828; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t779, 0, -t778, 0, 0, -t788, t596, 0, t699, t673, t705, t698, t703, t728, t580, t581, t546, pkin(8) * t546; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t778, 0, t779, 0, t788, 0, t597, 0, t766, -t748, -t835, -t766, -t773, -qJDD(5), t574, t575, 0, pkin(4) * t546; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t779, -t596, -t597, 0, 0, t693, t672, t702, t694, t706, 0, t829, t830, t816, t833; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t733, t737, t759, -t772, t764, t772, 0, t593, t588, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t827, t732, t762, t736, t760, -t827, -t593, 0, t589, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t766, t748, t835, t766, t773, qJDD(5), -t588, -t589, 0, 0;];
m_new_reg = t1;
