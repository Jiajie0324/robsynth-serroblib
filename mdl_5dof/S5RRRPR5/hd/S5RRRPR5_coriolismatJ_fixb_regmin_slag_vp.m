% Calculate minimal parameter regressor of coriolis matrix for
% S5RRRPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5,theta4]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x26]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:15
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RRRPR5_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR5_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR5_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRPR5_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:14:20
% EndTime: 2019-12-31 21:14:29
% DurationCPUTime: 3.80s
% Computational Cost: add. (6296->287), mult. (12581->432), div. (0->0), fcn. (14523->8), ass. (0->261)
t222 = sin(pkin(9));
t224 = sin(qJ(3));
t348 = cos(pkin(9));
t266 = t348 * t224;
t368 = cos(qJ(3));
t193 = (t368 * t222 + t266) * pkin(2);
t413 = t193 / 0.2e1;
t225 = sin(qJ(2));
t227 = cos(qJ(2));
t202 = -t224 * t227 - t368 * t225;
t191 = t348 * t202;
t200 = t224 * t225 - t368 * t227;
t330 = t222 * t200;
t391 = -t191 - t330;
t382 = pkin(6) + pkin(7);
t207 = t382 * t225;
t208 = t382 * t227;
t146 = t224 * t207 - t368 * t208;
t143 = -t200 * qJ(4) - t146;
t248 = -t368 * t207 - t224 * t208;
t390 = t202 * qJ(4) + t248;
t399 = t348 * t143 + t222 * t390;
t363 = t391 * t399;
t223 = sin(qJ(5));
t403 = t399 * t223;
t226 = cos(qJ(5));
t402 = t399 * t226;
t171 = -t348 * t200 + t202 * t222;
t401 = qJD(1) * t171;
t409 = -qJD(5) + t401;
t293 = qJD(2) + qJD(3);
t218 = -pkin(2) * t227 - pkin(1);
t180 = t200 * pkin(3) + t218;
t232 = -pkin(4) * t171 - pkin(8) * t391 + t180;
t34 = -t226 * t232 + t403;
t408 = t223 * t363 - t34 * t391;
t35 = t223 * t232 + t402;
t407 = t226 * t363 - t35 * t391;
t406 = t391 ^ 2;
t393 = 0.2e1 * t391;
t405 = -t171 / 0.2e1;
t404 = t171 * t391;
t334 = t391 * t226;
t369 = t226 / 0.2e1;
t370 = -t226 / 0.2e1;
t385 = -t222 * t143 + t348 * t390;
t398 = (-t369 + t370) * t385;
t351 = t385 * t223;
t372 = -t223 / 0.2e1;
t397 = t372 * t385 - t351 / 0.2e1;
t395 = t293 * t248;
t392 = 0.2e1 * t223 * t334;
t329 = t222 * t224;
t194 = (t348 * t368 - t329) * pkin(2);
t376 = -t194 / 0.2e1;
t250 = -t171 * t376 + t391 * t413;
t217 = t368 * pkin(2) + pkin(3);
t188 = -pkin(2) * t329 + t348 * t217;
t184 = -pkin(4) - t188;
t335 = t171 * t184;
t212 = t222 * pkin(3) + pkin(8);
t338 = t391 * t212;
t189 = pkin(2) * t266 + t222 * t217;
t185 = pkin(8) + t189;
t339 = t391 * t185;
t389 = -t338 / 0.2e1 - t339 / 0.2e1 + t335 / 0.2e1 + t250;
t388 = t293 * t146;
t312 = qJD(1) * t226;
t279 = t223 * t312;
t221 = t226 ^ 2;
t384 = t223 ^ 2;
t91 = (t384 / 0.2e1 - t221 / 0.2e1) * t391;
t387 = t279 * t406 + t293 * t91;
t291 = -t221 + t384;
t104 = t279 * t393 + t291 * t293;
t379 = -t184 / 0.2e1;
t378 = t188 / 0.2e1;
t377 = -t189 / 0.2e1;
t375 = t212 / 0.2e1;
t213 = -t348 * pkin(3) - pkin(4);
t374 = -t213 / 0.2e1;
t373 = t222 / 0.2e1;
t371 = t223 / 0.2e1;
t367 = pkin(2) * t224;
t366 = t202 * pkin(3);
t220 = t225 * pkin(2);
t365 = pkin(3) * qJD(3);
t327 = t226 * t171;
t79 = pkin(4) * t391 - pkin(8) * t171 - t366;
t72 = t220 + t79;
t1 = -t72 * t327 + t408;
t364 = t1 * qJD(1);
t328 = t223 * t171;
t2 = t72 * t328 + t407;
t361 = t2 * qJD(1);
t3 = -t79 * t327 + t408;
t360 = t3 * qJD(1);
t4 = t79 * t328 + t407;
t357 = t4 * qJD(1);
t228 = (t184 / 0.2e1 + t374) * t171 + (-t185 / 0.2e1 + t375) * t391 + t250;
t9 = t228 * t223;
t349 = t9 * qJD(1);
t23 = -t171 * t34 + t351 * t391;
t347 = qJD(1) * t23;
t24 = t171 * t35 - t334 * t385;
t346 = qJD(1) * t24;
t30 = t171 * t399 - t385 * t391;
t345 = qJD(1) * t30;
t336 = t171 ^ 2;
t256 = -t336 + t406;
t37 = t256 * t223;
t344 = qJD(1) * t37;
t41 = t336 + t406;
t38 = t41 * t223;
t343 = qJD(1) * t38;
t13 = t180 * (t220 - t366);
t342 = t13 * qJD(1);
t14 = t180 * t366;
t341 = t14 * qJD(1);
t337 = t391 * t222;
t333 = t188 * t171;
t332 = t189 * t391;
t230 = -t333 / 0.2e1 - t332 / 0.2e1 + t250;
t267 = t348 * t171;
t235 = (-t337 / 0.2e1 - t267 / 0.2e1) * pkin(3);
t27 = t235 - t230;
t326 = t27 * qJD(1);
t39 = t256 * t226;
t325 = t39 * qJD(1);
t40 = t41 * t226;
t324 = t40 * qJD(1);
t323 = t41 * qJD(1);
t252 = t171 * t377 + t378 * t391;
t192 = -t366 / 0.2e1;
t292 = t192 + t220 / 0.2e1;
t42 = t252 + t292;
t322 = t42 * qJD(1);
t282 = -t348 / 0.2e1;
t240 = t171 * t373 + t282 * t391;
t68 = (t202 / 0.2e1 + t240) * pkin(3);
t321 = t68 * qJD(1);
t320 = t91 * qJD(1);
t93 = t223 * t391;
t319 = t93 * qJD(1);
t271 = 0.2e1 * t405;
t94 = t271 * t223;
t89 = t94 * qJD(1);
t97 = t271 * t226;
t90 = t97 * qJD(1);
t159 = t171 * t369;
t98 = t327 / 0.2e1 + t159;
t318 = t98 * qJD(1);
t306 = qJD(3) * t226;
t309 = qJD(2) * t226;
t317 = (t306 + t309) * t391;
t314 = qJD(1) * t391;
t313 = qJD(1) * t218;
t311 = qJD(1) * t227;
t310 = qJD(2) * t223;
t308 = qJD(3) * t218;
t307 = qJD(3) * t223;
t305 = qJD(5) * t223;
t304 = qJD(5) * t226;
t102 = t291 * t406;
t303 = t102 * qJD(1);
t144 = t200 ^ 2 - t202 ^ 2;
t302 = t144 * qJD(1);
t165 = t200 * t220 - t202 * t218;
t299 = t165 * qJD(1);
t166 = -t200 * t218 - t202 * t220;
t298 = t166 * qJD(1);
t167 = -t330 / 0.2e1 - t191 / 0.2e1;
t297 = t167 * qJD(1);
t210 = -t225 ^ 2 + t227 ^ 2;
t296 = t210 * qJD(1);
t295 = t225 * qJD(2);
t294 = t227 * qJD(2);
t290 = pkin(1) * t225 * qJD(1);
t289 = pkin(1) * t311;
t281 = t171 * t314;
t280 = t221 * t314;
t278 = qJD(4) * t334;
t277 = qJD(5) * t404;
t276 = t200 * t313;
t275 = t202 * t313;
t211 = t223 * t304;
t274 = t225 * t311;
t272 = t213 * t371;
t270 = t368 * qJD(2);
t269 = t368 * qJD(3);
t265 = t171 * t293;
t264 = t293 * t226;
t174 = t293 * t202;
t263 = t293 * t223;
t260 = t376 + t374 + t379;
t259 = t223 * t264;
t258 = t226 * t263;
t103 = -t188 * t193 + t189 * t194;
t231 = (t376 + t378) * t399 + (t377 + t413) * t385;
t237 = (t282 * t399 + t373 * t385) * pkin(3);
t5 = t237 + t231;
t257 = t5 * qJD(1) - t103 * qJD(2);
t255 = t335 - t339;
t254 = t171 * t213 - t338;
t253 = t391 * t409;
t251 = t185 * t405 + t379 * t391;
t249 = -t171 * t375 + t374 * t391;
t12 = t228 * t226;
t247 = -qJD(1) * t12 - t193 * t310;
t239 = t72 / 0.2e1 + t251;
t15 = t239 * t223;
t246 = -qJD(1) * t15 - t184 * t309;
t17 = t239 * t226;
t245 = qJD(1) * t17 - t184 * t310;
t47 = qJD(5) * t167 - t391 * t401;
t241 = t259 * t393;
t238 = t79 / 0.2e1 + t249;
t122 = t260 * t223;
t21 = t238 * t226;
t234 = qJD(1) * t21 + qJD(2) * t122 - t213 * t307;
t123 = t260 * t226;
t19 = t238 * t223;
t233 = -qJD(1) * t19 + qJD(2) * t123 - t213 * t306;
t206 = t291 * qJD(5);
t183 = t193 * t307;
t175 = t202 * t200 * qJD(1);
t173 = t293 * t200;
t162 = t391 * t312;
t125 = t194 * t370 + (t184 + t213) * t369;
t124 = t184 * t371 + t194 * t372 + t272;
t100 = t293 * t167;
t99 = (t171 / 0.2e1 + t405) * t226;
t96 = -t327 / 0.2e1 + t159;
t95 = t328 / 0.2e1 + t171 * t372;
t88 = t95 * qJD(5);
t87 = t94 * qJD(5);
t84 = t93 * qJD(4);
t82 = t91 * qJD(5);
t81 = t304 + t90;
t80 = -t305 - t89;
t69 = pkin(3) * t240 + t192;
t67 = t258 - t320;
t66 = -t259 + t320;
t44 = t409 * t392;
t43 = -t252 + t292;
t36 = -t171 * t280 - t82;
t33 = qJD(5) * t97 - t325;
t32 = -t87 + t344;
t31 = -t82 + (t258 + t280) * t171;
t29 = (-qJD(5) - t401) * t392 - t291 * t265;
t28 = t235 + t230;
t26 = t96 * qJD(5) + t263 * t391 + t325;
t25 = t317 + t88 - t344;
t22 = -t249 * t226 + t79 * t369 + t397;
t20 = t249 * t223 + t79 * t372 + t398;
t18 = -t251 * t226 + t72 * t369 + t397;
t16 = t251 * t223 + t72 * t372 + t398;
t11 = t213 * t159 + t389 * t226 + t403;
t10 = t171 * t272 + t389 * t223 - t402;
t6 = t237 - t231;
t7 = [0, 0, 0, t225 * t294, t210 * qJD(2), 0, 0, 0, -pkin(1) * t295, -pkin(1) * t294, t200 * t174, t293 * t144, 0, 0, 0, qJD(2) * t165 - t202 * t308, qJD(2) * t166 - t200 * t308, qJD(4) * t41, qJD(2) * t13 - qJD(3) * t14 + qJD(4) * t30, t221 * t265 * t391 - t211 * t406, t102 * qJD(5) - t171 * t241, t223 * t277 + t293 * t39, t226 * t277 - t293 * t37, -t293 * t404, qJD(2) * t1 + qJD(3) * t3 + qJD(4) * t38 + qJD(5) * t24, qJD(2) * t2 + qJD(3) * t4 + qJD(4) * t40 + qJD(5) * t23; 0, 0, 0, t274, t296, t294, -t295, 0, -pkin(6) * t294 - t290, pkin(6) * t295 - t289, t175, t302, -t173, t174, 0, t299 + t388, t298 - t395, (-t332 - t333) * qJD(2) + t28 * qJD(3), t342 + (-t188 * t399 + t189 * t385) * qJD(2) + t6 * qJD(3) + t43 * qJD(4), t31, t29, t26, t25, t47, t364 + (t223 * t255 - t402) * qJD(2) + t10 * qJD(3) + t18 * qJD(5), t361 + (t226 * t255 + t403) * qJD(2) + t11 * qJD(3) + t16 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t175, t302, -t173, t174, 0, -t275 + t388, -t276 - t395, t28 * qJD(2) + (-t267 - t337) * t365, -t341 + t6 * qJD(2) + (t222 * t385 - t348 * t399) * t365 + t69 * qJD(4), t31, t29, t26, t25, t47, t360 + t10 * qJD(2) + (t223 * t254 - t402) * qJD(3) + t22 * qJD(5), t357 + t11 * qJD(2) + (t226 * t254 + t403) * qJD(3) + t20 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t323, qJD(2) * t43 + qJD(3) * t69 + t345, 0, 0, 0, 0, 0, t88 + t343, t99 * qJD(5) + t324; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t387, -t241 + t303, t223 * t253 + t293 * t96, t226 * t253 + t293 * t95, t100, qJD(2) * t18 + qJD(3) * t22 + qJD(4) * t95 - qJD(5) * t35 + t346, qJD(2) * t16 + qJD(3) * t20 + qJD(4) * t99 + qJD(5) * t34 + t347; 0, 0, 0, -t274, -t296, 0, 0, 0, t290, t289, -t175, -t302, 0, 0, 0, -t299, -t298, -qJD(3) * t27, -qJD(3) * t5 - qJD(4) * t42 - t342, t36, t44, t33, t32, -t47, qJD(3) * t9 - qJD(5) * t17 - t278 - t364, qJD(3) * t12 + qJD(5) * t15 - t361 + t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3) * t367, -pkin(2) * t269, 0, t103 * qJD(3), t211, -t206, 0, 0, 0, t184 * t305 - t193 * t306, t184 * t304 + t183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t293 * t367, (-t270 - t269) * pkin(2), -t326, (-t348 * t193 + t194 * t222) * t365 - t257, t211, -t206, 0, 0, 0, t124 * qJD(5) - t193 * t264 + t349, qJD(5) * t125 + t183 - t247; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t322, 0, 0, 0, 0, 0, -t162, t319; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, -t104, t81, t80, -t297, qJD(3) * t124 - t185 * t304 - t245, qJD(3) * t125 + t185 * t305 - t246; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t175, -t302, 0, 0, 0, t275, t276, qJD(2) * t27, qJD(2) * t5 + qJD(4) * t68 + t341, t36, t44, t33, t32, -t47, -qJD(2) * t9 - qJD(5) * t21 - t278 - t360, -qJD(2) * t12 + qJD(5) * t19 - t357 + t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t367, pkin(2) * t270, t326, t257, t211, -t206, 0, 0, 0, -qJD(5) * t122 + t193 * t309 - t349, -qJD(5) * t123 + t247; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t211, -t206, 0, 0, 0, t213 * t305, t213 * t304; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t321, 0, 0, 0, 0, 0, -t162, t319; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67, -t104, t81, t80, -t297, -t212 * t304 - t234, t212 * t305 - t233; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t323, qJD(2) * t42 - qJD(3) * t68 - t345, 0, 0, 0, 0, 0, t317 - t87 - t343, t98 * qJD(5) - t293 * t93 - t324; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t322, 0, 0, 0, 0, 0, t162, -t319; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t321, 0, 0, 0, 0, 0, t162, -t319; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, -t304 + t318; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t387, t258 * t393 - t303, -t223 * t281 - t293 * t97, -t226 * t281 + t293 * t94, t100, qJD(2) * t17 + qJD(3) * t21 + qJD(4) * t94 - t346, -qJD(2) * t15 - qJD(3) * t19 - qJD(4) * t98 - t347; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, t104, -t90, t89, t297, qJD(3) * t122 + t245, qJD(3) * t123 + t246; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, t104, -t90, t89, t297, t234, t233; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, -t318; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t7;
