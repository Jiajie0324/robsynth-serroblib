% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRPR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:18
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRPR6_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR6_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR6_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR6_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR6_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRPR6_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:17:57
% EndTime: 2019-12-31 18:18:04
% DurationCPUTime: 6.60s
% Computational Cost: add. (18650->376), mult. (27279->460), div. (0->0), fcn. (15356->8), ass. (0->252)
t683 = (qJD(1) + qJD(3));
t681 = t683 ^ 2;
t690 = sin(qJ(3));
t682 = qJDD(1) + qJDD(3);
t693 = cos(qJ(3));
t741 = t693 * t682;
t646 = t681 * t690 - t741;
t686 = g(3) - qJDD(2);
t616 = pkin(6) * t646 - t686 * t690;
t687 = sin(pkin(8));
t688 = cos(pkin(8));
t749 = t690 * t682;
t643 = t681 * t693 + t749;
t725 = t643 * t687 + t646 * t688;
t731 = pkin(6) * t643 - t686 * t693;
t528 = qJ(2) * t725 + t616 * t688 + t687 * t731;
t582 = t643 * t688 - t646 * t687;
t691 = sin(qJ(1));
t694 = cos(qJ(1));
t539 = t582 * t694 - t691 * t725;
t794 = qJ(2) * t582 - t616 * t687 + t688 * t731;
t809 = pkin(5) * t539 - t528 * t691 + t694 * t794;
t791 = t582 * t691 + t694 * t725;
t798 = pkin(5) * t791 + t528 * t694 + t691 * t794;
t665 = g(1) * t691 - g(2) * t694;
t652 = qJDD(1) * pkin(1) + t665;
t666 = g(1) * t694 + g(2) * t691;
t696 = qJD(1) ^ 2;
t653 = -pkin(1) * t696 - t666;
t595 = -t652 * t688 + t653 * t687;
t593 = qJDD(1) * pkin(2) - t595;
t596 = t652 * t687 + t653 * t688;
t594 = -pkin(2) * t696 + t596;
t551 = -t593 * t693 + t594 * t690;
t552 = t593 * t690 + t594 * t693;
t728 = t551 * t690 + t552 * t693;
t498 = t551 * t693 - t552 * t690;
t758 = t688 * t498;
t472 = -t687 * t728 + t758;
t761 = t687 * t498;
t802 = t688 * t728 + t761;
t816 = t472 * t691 + t694 * t802;
t815 = t472 * t694 - t691 * t802;
t814 = pkin(1) * t582;
t813 = pkin(1) * t725;
t703 = (2 * qJD(4) * t683) + t552;
t764 = t682 * qJ(4);
t524 = -pkin(3) * t681 + t703 + t764;
t765 = t682 * pkin(3);
t709 = qJDD(4) + t551 - t765;
t538 = -qJ(4) * t681 + t709;
t487 = t524 * t690 - t538 * t693;
t729 = t524 * t693 + t538 * t690;
t464 = t487 * t688 + t687 * t729;
t793 = -t487 * t687 + t688 * t729;
t808 = -t464 * t691 + t694 * t793;
t807 = t464 * t694 + t691 * t793;
t727 = t595 * t687 + t596 * t688;
t556 = t595 * t688 - t596 * t687;
t739 = t694 * t556;
t804 = -t691 * t727 + t739;
t747 = t691 * t556;
t803 = t694 * t727 + t747;
t797 = pkin(2) * t643;
t796 = pkin(2) * t646;
t656 = qJDD(1) * t687 + t688 * t696;
t624 = qJ(2) * t656 - t686 * t688;
t657 = qJDD(1) * t688 - t687 * t696;
t715 = -qJ(2) * t657 - t686 * t687;
t776 = t656 * t694 + t657 * t691;
t790 = pkin(5) * t776 + t694 * t624 - t691 * t715;
t601 = -t656 * t691 + t657 * t694;
t789 = -pkin(5) * t601 + t691 * t624 + t694 * t715;
t523 = -pkin(7) * t682 + t538;
t689 = sin(qJ(5));
t692 = cos(qJ(5));
t511 = -t523 * t692 - t686 * t689;
t512 = t523 * t689 - t686 * t692;
t481 = -t511 * t692 + t512 * t689;
t772 = -pkin(3) - pkin(7);
t771 = pkin(1) * t686;
t770 = pkin(4) * t481;
t515 = -pkin(7) * t681 + t524;
t769 = pkin(4) * t515;
t684 = t689 ^ 2;
t685 = t692 ^ 2;
t737 = t684 + t685;
t642 = t737 * t682;
t768 = pkin(4) * t642;
t766 = pkin(7) * t481;
t763 = t684 * t681;
t762 = t685 * t681;
t754 = t689 * t515;
t664 = t689 * t681 * t692;
t654 = qJDD(5) + t664;
t753 = t689 * t654;
t655 = qJDD(5) - t664;
t752 = t689 * t655;
t751 = t689 * t682;
t750 = t690 * t642;
t513 = t692 * t515;
t744 = t692 * t654;
t743 = t692 * t655;
t669 = t692 * t682;
t742 = t693 * t642;
t738 = -pkin(3) * t538 + qJ(4) * t524;
t736 = qJD(5) * t683;
t735 = pkin(2) * t487 + t738;
t734 = t689 * t736;
t733 = t692 * t736;
t695 = qJD(5) ^ 2;
t663 = -t695 - t762;
t606 = t663 * t692 - t753;
t730 = -pkin(7) * t606 + t513;
t724 = -t665 * t691 - t666 * t694;
t723 = t690 * t664;
t722 = t693 * t664;
t721 = -pkin(3) * t481 + qJ(4) * t515 - t766;
t659 = qJDD(1) * t694 - t691 * t696;
t720 = -pkin(5) * t659 - g(3) * t691;
t719 = -t551 - t796;
t637 = 0.2e1 * t733 + t751;
t718 = pkin(4) * t637 + t513;
t640 = t669 - 0.2e1 * t734;
t717 = pkin(4) * t640 - t754;
t661 = -t695 - t763;
t604 = t661 * t689 + t743;
t716 = -pkin(7) * t604 + t754;
t482 = t511 * t689 + t512 * t692;
t714 = t665 * t694 - t666 * t691;
t475 = -t481 * t693 + t515 * t690;
t713 = pkin(2) * t475 + t721;
t712 = -pkin(3) * t606 + qJ(4) * t640 + t730;
t711 = -pkin(4) * t604 + t511;
t710 = pkin(7) * t642 - t481;
t708 = -t552 - t797;
t565 = -t606 * t693 + t640 * t690;
t707 = pkin(2) * t565 + t712;
t706 = -pkin(3) * t604 + qJ(4) * t637 + t716;
t705 = -t765 + t709;
t704 = -pkin(4) * t606 + t512;
t647 = t737 * t681;
t702 = pkin(3) * t642 - qJ(4) * t647 + t710;
t564 = -t604 * t693 + t637 * t690;
t701 = pkin(2) * t564 + t706;
t700 = t705 + t796;
t699 = 0.2e1 * t764 + t703;
t590 = -t647 * t690 + t742;
t698 = pkin(2) * t590 + t702;
t697 = t699 + t797;
t662 = t695 - t762;
t660 = -t695 + t763;
t658 = qJDD(1) * t691 + t694 * t696;
t648 = (-t684 + t685) * t681;
t639 = t669 - t734;
t638 = -t733 - t751;
t630 = -pkin(5) * t658 + g(3) * t694;
t629 = t737 * t736;
t614 = qJDD(5) * t693 - t629 * t690;
t613 = qJDD(5) * t690 + t629 * t693;
t612 = t639 * t689 + t685 * t736;
t611 = t638 * t692 + t684 * t736;
t610 = -t663 * t689 - t744;
t609 = -t662 * t689 + t743;
t608 = t661 * t692 - t752;
t607 = t660 * t692 - t753;
t605 = t662 * t692 + t752;
t603 = t660 * t689 + t744;
t598 = (t639 - t734) * t692;
t597 = (-t638 + t733) * t689;
t591 = -t647 * t693 - t750;
t579 = -t637 * t692 - t640 * t689;
t578 = -t637 * t689 + t640 * t692;
t577 = t605 * t690 + t692 * t741;
t576 = t603 * t690 - t689 * t741;
t575 = -t605 * t693 + t669 * t690;
t574 = -t603 * t693 - t689 * t749;
t573 = t611 * t690 - t722;
t572 = t612 * t690 + t722;
t571 = -t611 * t693 - t723;
t570 = -t612 * t693 + t723;
t569 = pkin(1) * t657 - t595;
t568 = -pkin(1) * t656 - t596;
t567 = t606 * t690 + t640 * t693;
t566 = t604 * t690 + t637 * t693;
t561 = -t613 * t687 + t614 * t688;
t560 = t613 * t688 + t614 * t687;
t559 = t578 * t690 + t648 * t693;
t558 = -t578 * t693 + t648 * t690;
t553 = pkin(1) * t556;
t550 = qJ(2) * t727 + t771;
t548 = -t590 * t687 + t591 * t688;
t547 = t590 * t688 + t591 * t687;
t536 = -t575 * t687 + t577 * t688;
t535 = -t574 * t687 + t576 * t688;
t534 = t575 * t688 + t577 * t687;
t533 = t574 * t688 + t576 * t687;
t521 = -t571 * t687 + t573 * t688;
t520 = -t570 * t687 + t572 * t688;
t519 = t571 * t688 + t573 * t687;
t518 = t570 * t688 + t572 * t687;
t509 = -t565 * t687 + t567 * t688;
t508 = -t564 * t687 + t566 * t688;
t507 = t565 * t688 + t567 * t687;
t506 = t564 * t688 + t566 * t687;
t505 = -t558 * t687 + t559 * t688;
t504 = t558 * t688 + t559 * t687;
t503 = t719 - t813;
t502 = t708 - t814;
t501 = t697 + t814;
t500 = t700 + t813;
t495 = pkin(2) * t498;
t494 = -qJ(4) * t610 - t704;
t493 = -qJ(4) * t608 - t711;
t492 = pkin(2) * t686 + pkin(6) * t728;
t491 = t608 * t772 + t718;
t490 = t610 * t772 + t717;
t484 = -pkin(6) * t487 + (-pkin(3) * t690 + qJ(4) * t693) * t686;
t483 = pkin(6) * t729 + (pkin(3) * t693 + qJ(4) * t690 + pkin(2)) * t686;
t479 = pkin(4) * t647 + t482;
t478 = -pkin(4) * t742 - pkin(6) * t590 + t479 * t690;
t477 = -pkin(4) * t750 + pkin(6) * t591 - t479 * t693;
t476 = t481 * t690 + t515 * t693;
t469 = pkin(1) * t507 + t707;
t468 = pkin(1) * t506 + t701;
t467 = pkin(1) * t547 + t698;
t462 = -pkin(6) * t565 - t490 * t690 + t494 * t693;
t461 = -pkin(6) * t564 - t491 * t690 + t493 * t693;
t460 = -pkin(2) * t610 + pkin(6) * t567 + t490 * t693 + t494 * t690;
t459 = -pkin(2) * t608 + pkin(6) * t566 + t491 * t693 + t493 * t690;
t458 = -qJ(4) * t482 + t770;
t457 = -pkin(1) * t472 - t495;
t456 = t482 * t772 + t769;
t455 = -t475 * t687 + t476 * t688;
t454 = t475 * t688 + t476 * t687;
t453 = pkin(6) * t758 + qJ(2) * t472 - t492 * t687;
t452 = pkin(6) * t761 + qJ(2) * t802 + t492 * t688 + t771;
t451 = -qJ(2) * t547 - t477 * t687 + t478 * t688;
t450 = qJ(2) * t548 + t477 * t688 + t478 * t687;
t449 = pkin(1) * t464 + t735;
t448 = -qJ(2) * t464 - t483 * t687 + t484 * t688;
t447 = qJ(2) * t793 + t483 * t688 + t484 * t687 + t771;
t446 = -qJ(2) * t507 - t460 * t687 + t462 * t688;
t445 = -qJ(2) * t506 - t459 * t687 + t461 * t688;
t444 = -pkin(1) * t610 + qJ(2) * t509 + t460 * t688 + t462 * t687;
t443 = -pkin(1) * t608 + qJ(2) * t508 + t459 * t688 + t461 * t687;
t442 = -pkin(6) * t475 - t456 * t690 + t458 * t693;
t441 = pkin(1) * t454 + t713;
t440 = -pkin(2) * t482 + pkin(6) * t476 + t456 * t693 + t458 * t690;
t439 = -qJ(2) * t454 - t440 * t687 + t442 * t688;
t438 = -pkin(1) * t482 + qJ(2) * t455 + t440 * t688 + t442 * t687;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t659, 0, -t658, 0, t720, -t630, -t714, -pkin(5) * t714, 0, 0, t601, 0, -t776, 0, t789, t790, t804, pkin(5) * t804 + qJ(2) * t739 - t691 * t550, 0, 0, -t791, 0, -t539, 0, t798, t809, t815, pkin(5) * t815 - t691 * t452 + t694 * t453, 0, t791, t539, 0, 0, 0, -t807, -t798, -t809, -pkin(5) * t807 - t691 * t447 + t694 * t448, -t518 * t691 + t520 * t694, -t504 * t691 + t505 * t694, -t534 * t691 + t536 * t694, -t519 * t691 + t521 * t694, -t533 * t691 + t535 * t694, -t560 * t691 + t561 * t694, t694 * t445 - t691 * t443 - pkin(5) * (t506 * t694 + t508 * t691), t694 * t446 - t691 * t444 - pkin(5) * (t507 * t694 + t509 * t691), t694 * t451 - t691 * t450 - pkin(5) * (t547 * t694 + t548 * t691), t694 * t439 - t691 * t438 - pkin(5) * (t454 * t694 + t455 * t691); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t658, 0, t659, 0, t630, t720, t724, pkin(5) * t724, 0, 0, t776, 0, t601, 0, -t790, t789, t803, pkin(5) * t803 + qJ(2) * t747 + t694 * t550, 0, 0, t539, 0, -t791, 0, -t809, t798, t816, pkin(5) * t816 + t694 * t452 + t691 * t453, 0, -t539, t791, 0, 0, 0, t808, t809, -t798, pkin(5) * t808 + t694 * t447 + t691 * t448, t518 * t694 + t520 * t691, t504 * t694 + t505 * t691, t534 * t694 + t536 * t691, t519 * t694 + t521 * t691, t533 * t694 + t535 * t691, t560 * t694 + t561 * t691, t691 * t445 + t694 * t443 + pkin(5) * (-t506 * t691 + t508 * t694), t691 * t446 + t694 * t444 + pkin(5) * (-t507 * t691 + t509 * t694), t691 * t451 + t694 * t450 + pkin(5) * (-t547 * t691 + t548 * t694), t691 * t439 + t694 * t438 + pkin(5) * (-t454 * t691 + t455 * t694); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t665, t666, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t569, t568, 0, -t553, 0, 0, 0, 0, 0, t682, t503, t502, 0, t457, t682, 0, 0, 0, 0, 0, 0, t500, t501, t449, t598, t579, t609, t597, t607, 0, t468, t469, t467, t441; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t696, 0, 0, -g(3), -t665, 0, 0, 0, t657, 0, -t656, 0, t715, t624, t556, qJ(2) * t556, 0, 0, -t725, 0, -t582, 0, t528, t794, t472, t453, 0, t725, t582, 0, 0, 0, -t464, -t528, -t794, t448, t520, t505, t536, t521, t535, t561, t445, t446, t451, t439; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t696, 0, qJDD(1), 0, g(3), 0, -t666, 0, 0, 0, t656, 0, t657, 0, -t624, t715, t727, t550, 0, 0, t582, 0, -t725, 0, -t794, t528, t802, t452, 0, -t582, t725, 0, 0, 0, t793, t794, -t528, t447, t518, t504, t534, t519, t533, t560, t443, t444, t450, t438; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t665, t666, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t569, t568, 0, -t553, 0, 0, 0, 0, 0, t682, t503, t502, 0, t457, t682, 0, 0, 0, 0, 0, 0, t500, t501, t449, t598, t579, t609, t597, t607, 0, t468, t469, t467, t441; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t696, 0, 0, -t686, t595, 0, 0, 0, -t646, 0, -t643, 0, t616, t731, t498, pkin(6) * t498, 0, t646, t643, 0, 0, 0, -t487, -t616, -t731, t484, t572, t559, t577, t573, t576, t614, t461, t462, t478, t442; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t696, 0, qJDD(1), 0, t686, 0, t596, 0, 0, 0, t643, 0, -t646, 0, -t731, t616, t728, t492, 0, -t643, t646, 0, 0, 0, t729, t731, -t616, t483, t570, t558, t575, t571, t574, t613, t459, t460, t477, t440; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t595, -t596, 0, 0, 0, 0, 0, 0, 0, t682, t719, t708, 0, -t495, t682, 0, 0, 0, 0, 0, 0, t700, t697, t735, t598, t579, t609, t597, t607, 0, t701, t707, t698, t713; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t682, 0, -t681, 0, 0, -t686, t551, 0, 0, -t682, t681, 0, 0, 0, t538, 0, t686, qJ(4) * t686, t664, t648, t669, -t664, -t751, qJDD(5), t493, t494, -t768, t458; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t681, 0, t682, 0, t686, 0, t552, 0, 0, -t681, -t682, 0, 0, 0, t524, -t686, 0, pkin(3) * t686, -t612, -t578, -t605, -t611, -t603, t629, t491, t490, -t479, t456; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t682, -t551, -t552, 0, 0, t682, 0, 0, 0, 0, 0, 0, t705, t699, t738, t598, t579, t609, t597, t607, 0, t706, t712, t702, t721; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t682, 0, 0, 0, 0, 0, 0, t538, t524, 0, t598, t579, t609, t597, t607, 0, t716, t730, t710, -t766; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t682, -t681, 0, 0, 0, -t538, 0, -t686, 0, -t664, -t648, -t669, t664, t751, -qJDD(5), t711, t704, t768, -t770; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t681, t682, 0, 0, 0, -t524, t686, 0, 0, t612, t578, t605, t611, t603, -t629, pkin(7) * t608 - t718, pkin(7) * t610 - t717, t479, pkin(7) * t482 - t769; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t639, -t637, t655, t734, t660, -t734, 0, t515, t511, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t733, t640, t662, t638, t654, -t733, -t515, 0, t512, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t664, t648, t669, -t664, -t751, qJDD(5), -t511, -t512, 0, 0;];
m_new_reg = t1;
