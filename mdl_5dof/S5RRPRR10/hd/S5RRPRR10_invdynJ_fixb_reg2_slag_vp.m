% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S5RRPRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% tau_reg [5x(5*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:28
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S5RRPRR10_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR10_invdynJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR10_invdynJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR10_invdynJ_fixb_reg2_slag_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR10_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5RRPRR10_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:26:46
% EndTime: 2019-12-31 20:27:04
% DurationCPUTime: 9.79s
% Computational Cost: add. (11796->644), mult. (33932->866), div. (0->0), fcn. (27370->12), ass. (0->318)
t221 = sin(pkin(5));
t229 = cos(qJ(2));
t378 = cos(pkin(10));
t310 = t229 * t378;
t289 = t221 * t310;
t191 = qJD(1) * t289;
t220 = sin(pkin(10));
t225 = sin(qJ(2));
t349 = qJD(1) * t225;
t329 = t221 * t349;
t159 = t220 * t329 - t191;
t258 = qJD(4) + t159;
t228 = cos(qJ(4));
t401 = qJD(4) * t258;
t416 = t159 * t258 + t401;
t423 = t416 * t228;
t183 = -t229 * t220 - t225 * t378;
t250 = qJD(1) * t183;
t163 = t221 * t250;
t224 = sin(qJ(4));
t222 = cos(pkin(5));
t350 = qJD(1) * t222;
t299 = qJD(2) + t350;
t304 = -t224 * t163 - t228 * t299;
t400 = qJD(5) + t304;
t133 = -t228 * t163 + t224 * t299;
t223 = sin(qJ(5));
t227 = cos(qJ(5));
t247 = t227 * t258;
t75 = t133 * t223 - t247;
t422 = t400 * t75;
t77 = t227 * t133 + t223 * t258;
t421 = t400 * t77;
t210 = t222 * t229 * pkin(1);
t204 = qJD(1) * t210;
t389 = pkin(7) + qJ(3);
t321 = t389 * t225;
t293 = t221 * t321;
t147 = -qJD(1) * t293 + t204;
t361 = t222 * t225;
t209 = pkin(1) * t361;
t363 = t221 * t229;
t148 = (t389 * t363 + t209) * qJD(1);
t309 = t378 * t148;
t86 = t147 * t220 + t309;
t420 = -t86 + t258 * (pkin(4) * t224 - pkin(9) * t228);
t214 = pkin(2) * t220 + pkin(8);
t343 = t224 * qJD(4);
t139 = t220 * t148;
t87 = t147 * t378 - t139;
t96 = pkin(2) * t329 - pkin(3) * t163 + pkin(8) * t159;
t46 = t224 * t96 + t228 * t87;
t419 = -pkin(9) * t163 + t214 * t343 + t46;
t354 = t227 * t228;
t102 = -t159 * t354 - t163 * t223;
t346 = qJD(4) * t228;
t418 = -t227 * t346 + t102;
t339 = qJDD(1) * t222;
t206 = qJDD(2) + t339;
t334 = pkin(1) * t339;
t203 = t229 * t334;
t340 = qJD(1) * qJD(2);
t319 = t222 * t340;
t296 = pkin(1) * t319;
t265 = -t225 * t296 + t203;
t311 = qJD(2) * t389;
t347 = qJD(3) * t225;
t67 = pkin(2) * t206 + (-qJDD(1) * t321 + (-t229 * t311 - t347) * qJD(1)) * t221 + t265;
t253 = qJD(3) * t229 - t225 * t311;
t337 = qJDD(1) * t229;
t315 = t221 * t337;
t330 = pkin(7) * t315 + t225 * t334 + t229 * t296;
t78 = (qJ(3) * t337 + qJD(1) * t253) * t221 + t330;
t34 = t220 * t67 + t378 * t78;
t31 = pkin(8) * t206 + t34;
t188 = qJDD(1) * t289;
t249 = qJD(2) * t183;
t338 = qJDD(1) * t225;
t316 = t220 * t338;
t235 = (-qJD(1) * t249 + t316) * t221;
t113 = -t188 + t235;
t288 = qJD(2) * t310;
t318 = t225 * t340;
t291 = t221 * t318;
t114 = -t220 * t291 + (qJD(1) * t288 - qJDD(1) * t183) * t221;
t216 = pkin(2) * t229 + pkin(1);
t280 = t216 * qJDD(1);
t336 = pkin(2) * t291 + qJDD(3);
t146 = -t221 * t280 + t336;
t50 = pkin(3) * t113 - pkin(8) * t114 + t146;
t256 = t222 * pkin(2) - t293;
t134 = qJD(2) * pkin(2) + qJD(1) * t256 + t204;
t71 = t220 * t134 + t309;
t63 = pkin(8) * t299 + t71;
t174 = -qJD(1) * t216 * t221 + qJD(3);
t81 = pkin(3) * t159 + pkin(8) * t163 + t174;
t270 = -t224 * t50 - t228 * t31 + t343 * t63 - t81 * t346;
t35 = -t224 * t63 + t228 * t81;
t417 = -t258 * t35 - t270;
t36 = t224 * t81 + t228 * t63;
t28 = pkin(9) * t258 + t36;
t70 = t134 * t378 - t139;
t62 = -pkin(3) * t299 - t70;
t32 = pkin(4) * t304 - t133 * pkin(9) + t62;
t12 = t223 * t32 + t227 * t28;
t33 = -t220 * t78 + t378 * t67;
t30 = -pkin(3) * t206 - t33;
t274 = -t228 * t114 - t224 * t206;
t55 = qJD(4) * t304 + t274;
t306 = t224 * t114 - t228 * t206;
t56 = qJD(4) * t133 + t306;
t10 = pkin(4) * t56 + pkin(9) * t55 + t30;
t335 = qJDD(4) - t188;
t402 = t335 + t235;
t5 = t402 * pkin(9) - t270;
t2 = -qJD(5) * t12 + t227 * t10 - t223 * t5;
t415 = t12 * t400 + t2;
t277 = t223 * t28 - t227 * t32;
t1 = -t277 * qJD(5) + t223 * t10 + t227 * t5;
t414 = t277 * t400 + t1;
t168 = t183 * t222;
t226 = sin(qJ(1));
t230 = cos(qJ(1));
t358 = t225 * t220;
t267 = t310 - t358;
t122 = -t168 * t230 + t226 * t267;
t362 = t221 * t230;
t104 = t122 * t228 - t224 * t362;
t251 = t222 * t267;
t121 = t226 * t183 + t230 * t251;
t413 = t104 * t223 + t121 * t227;
t412 = t104 * t227 - t121 * t223;
t217 = t221 ^ 2;
t411 = 0.2e1 * t217;
t409 = t258 * t75;
t360 = t223 * t228;
t101 = -t159 * t360 + t227 * t163;
t344 = qJD(5) * t227;
t282 = t224 * t344 - t101;
t408 = t282 * t77;
t301 = t258 * t224;
t407 = t133 * t301;
t406 = t159 * t299;
t405 = t223 * t400;
t345 = qJD(5) * t223;
t246 = -t224 * t345 - t418;
t404 = t246 * t400;
t322 = t389 * t221;
t403 = (-t229 * t322 - t209) * qJD(2) - t221 * t347;
t232 = qJDD(4) + t113;
t376 = qJD(5) * t77;
t25 = -t223 * t55 - t227 * t232 + t376;
t352 = pkin(7) * t363 + t209;
t172 = t352 * qJD(2);
t124 = t183 * t230 - t226 * t251;
t166 = t221 * t358 - t289;
t259 = g(1) * t124 + g(2) * t121 - g(3) * t166;
t313 = t224 * t31 - t228 * t50;
t8 = -qJD(4) * t36 - t313;
t167 = t183 * t221;
t207 = pkin(2) * t363;
t290 = -t166 * pkin(3) - pkin(8) * t167 + t207;
t397 = pkin(1) * t221;
t100 = -t290 - t397;
t145 = t210 + t256;
t155 = qJ(3) * t363 + t352;
t94 = t220 * t145 + t378 * t155;
t83 = pkin(8) * t222 + t94;
t388 = t224 * t100 + t228 * t83;
t205 = qJD(2) * t210;
t135 = t221 * t253 + t205;
t65 = t135 * t378 + t403 * t220;
t348 = qJD(2) * t225;
t328 = t221 * t348;
t161 = t220 * t328 - t221 * t288;
t162 = t221 * t249;
t300 = pkin(2) * t328;
t97 = -pkin(3) * t162 + pkin(8) * t161 + t300;
t20 = -qJD(4) * t388 - t224 * t65 + t228 * t97;
t399 = t30 + t259;
t398 = t163 ^ 2;
t231 = qJD(1) ^ 2;
t355 = t226 * t229;
t356 = t225 * t230;
t177 = -t222 * t355 - t356;
t395 = g(1) * t177;
t394 = g(1) * t226;
t391 = g(3) * t229;
t390 = t77 * t75;
t215 = -pkin(2) * t378 - pkin(3);
t287 = t228 * pkin(4) + t224 * pkin(9);
t181 = -t287 + t215;
t137 = t181 * t227 - t214 * t360;
t387 = qJD(5) * t137 + t420 * t223 - t419 * t227;
t138 = t181 * t223 + t214 * t354;
t386 = -qJD(5) * t138 + t419 * t223 + t420 * t227;
t385 = t159 * t36;
t384 = t159 * t77;
t54 = qJDD(5) + t56;
t383 = t223 * t54;
t382 = t227 * t54;
t381 = t228 * t25;
t380 = t62 * t159;
t379 = -t224 * t56 - t304 * t346;
t377 = qJD(5) * t75;
t373 = t304 * t159;
t372 = t133 * t304;
t371 = t133 * t163;
t370 = t163 * t304;
t369 = t163 * t159;
t368 = t214 * t224;
t367 = t214 * t228;
t366 = t217 * t231;
t365 = t221 * t225;
t364 = t221 * t226;
t359 = t224 * t227;
t357 = t225 * t226;
t353 = t229 * t230;
t218 = t225 ^ 2;
t219 = t229 ^ 2;
t351 = t218 - t219;
t342 = qJD(4) - t191;
t333 = t77 * t346;
t332 = t229 * t366;
t331 = t222 * t353;
t325 = t223 * t346;
t323 = t221 * t222 * t231;
t320 = pkin(1) * t411;
t317 = t229 * t340;
t314 = g(2) * t362 - g(3) * t222;
t24 = -qJD(5) * t247 + t133 * t345 - t223 * t232 + t227 * t55;
t312 = t228 * t24 + t77 * t343;
t308 = -t24 + t377;
t305 = -t122 * t224 - t228 * t362;
t64 = t135 * t220 - t378 * t403;
t173 = pkin(2) * t361 - t322;
t303 = -t173 * t226 + t230 * t216;
t302 = t227 * t400;
t298 = qJD(2) + 0.2e1 * t350;
t297 = t206 + t339;
t295 = t225 * t332;
t294 = -t25 * t359 + t418 * t75;
t292 = t225 * t317;
t123 = -t226 * t168 - t230 * t267;
t107 = -t123 * t224 - t228 * t364;
t285 = g(1) * t305 + g(2) * t107;
t284 = g(1) * t121 - g(2) * t124;
t283 = g(1) * t230 + g(2) * t226;
t279 = -t12 * t223 + t227 * t277;
t278 = -t12 * t227 - t223 * t277;
t42 = pkin(9) * t166 + t388;
t142 = -t167 * t224 - t222 * t228;
t143 = -t167 * t228 + t222 * t224;
t93 = t145 * t378 - t220 * t155;
t82 = -t222 * pkin(3) - t93;
t47 = t142 * pkin(4) - t143 * pkin(9) + t82;
t16 = t223 * t47 + t227 * t42;
t15 = -t223 * t42 + t227 * t47;
t45 = -t224 * t87 + t228 * t96;
t48 = t100 * t228 - t224 * t83;
t99 = t143 * t227 + t166 * t223;
t98 = t143 * t223 - t166 * t227;
t273 = -t173 * t230 - t216 * t226;
t272 = t163 * t299;
t271 = -t344 * t400 - t383;
t19 = t100 * t346 + t224 * t97 + t228 * t65 - t343 * t83;
t269 = (t101 - t325) * t400;
t27 = -pkin(4) * t258 - t35;
t268 = -pkin(9) * t54 + t27 * t400;
t264 = -g(1) * t364 + t314;
t263 = -t317 - t338;
t262 = g(1) * t107 - g(2) * t305 + g(3) * t142;
t108 = -t123 * t228 + t224 * t364;
t261 = -g(1) * t108 - g(2) * t104 - g(3) * t143;
t260 = g(1) * t123 - g(2) * t122 + g(3) * t167;
t257 = -pkin(3) * t123 - pkin(8) * t124 + t303;
t195 = pkin(2) * t331;
t255 = -pkin(2) * t357 + t121 * pkin(3) + pkin(8) * t122 + t195;
t6 = -t402 * pkin(4) - t8;
t254 = t262 - t6;
t252 = t263 * pkin(7);
t245 = -t122 * pkin(3) + pkin(8) * t121 + t273;
t240 = pkin(9) * qJD(5) * t400 - t254;
t239 = pkin(2) * t177 + t124 * pkin(3) - pkin(8) * t123;
t238 = qJD(5) * t279 + t1 * t227 - t2 * t223;
t237 = -t416 * t224 + t228 * t232;
t236 = (qJD(2) * t250 - t316) * t221;
t234 = t188 + t236;
t233 = -qJDD(4) + t234;
t187 = t206 * t222;
t184 = -t207 - t397;
t179 = -pkin(7) * t365 + t210;
t178 = -t222 * t357 + t353;
t176 = -t222 * t356 - t355;
t175 = -t331 + t357;
t171 = -pkin(7) * t328 + t205;
t170 = t352 * qJD(1);
t169 = -pkin(7) * t329 + t204;
t154 = t159 ^ 2;
t128 = t221 * t252 + t265;
t127 = -pkin(7) * t291 + t330;
t92 = -qJD(4) * t142 - t161 * t228;
t91 = qJD(4) * t143 - t161 * t224;
t66 = pkin(4) * t133 + pkin(9) * t304;
t58 = t108 * t227 - t124 * t223;
t57 = -t108 * t223 - t124 * t227;
t41 = -pkin(4) * t166 - t48;
t40 = -qJD(5) * t98 - t162 * t223 + t227 * t92;
t39 = qJD(5) * t99 + t162 * t227 + t223 * t92;
t37 = pkin(4) * t163 - t45;
t26 = pkin(4) * t91 - pkin(9) * t92 + t64;
t22 = t223 * t66 + t227 * t35;
t21 = -t223 * t35 + t227 * t66;
t14 = pkin(4) * t162 - t20;
t13 = -pkin(9) * t162 + t19;
t4 = -qJD(5) * t16 - t13 * t223 + t227 * t26;
t3 = qJD(5) * t15 + t13 * t227 + t223 * t26;
t7 = [0, 0, 0, 0, 0, qJDD(1), -g(2) * t230 + t394, t283, 0, 0, (qJDD(1) * t218 + 0.2e1 * t292) * t217, (t225 * t337 - t340 * t351) * t411, (qJD(2) * t229 * t298 + t225 * t297) * t221, (qJDD(1) * t219 - 0.2e1 * t292) * t217, (t229 * t297 - t298 * t348) * t221, t187, -t172 * t299 + t179 * t206 + t128 * t222 - g(1) * t176 - g(2) * t178 + (-t318 + t337) * t320, -g(1) * t175 - g(2) * t177 - t127 * t222 - t171 * t299 - t206 * t352 + t263 * t320, ((-t169 * qJD(2) + qJDD(1) * t352 + t127 + (-qJD(2) * t179 + t171) * qJD(1)) * t229 + (-t170 * qJD(2) - qJDD(1) * t179 - t128) * t225 - t283) * t221, t127 * t352 + t170 * t171 + t128 * t179 - t169 * t172 + t217 * qJDD(1) * pkin(1) ^ 2 - g(1) * (-pkin(1) * t226 + pkin(7) * t362) - g(2) * (pkin(1) * t230 + pkin(7) * t364), -t114 * t167 + t161 * t163, t113 * t167 - t114 * t166 + t159 * t161 - t162 * t163, t114 * t222 - t161 * t299 - t167 * t206, t113 * t166 - t159 * t162, -t113 * t222 + t162 * t299 - t166 * t206, t187, g(1) * t122 + g(2) * t123 + t184 * t113 + t146 * t166 + t159 * t300 - t174 * t162 + t93 * t206 + t33 * t222 - t299 * t64, t184 * t114 - t146 * t167 - t174 * t161 - t163 * t300 - t94 * t206 - t34 * t222 - t299 * t65 + t284, -t113 * t94 - t114 * t93 - t159 * t65 + t161 * t70 + t162 * t71 - t163 * t64 - t166 * t34 + t167 * t33 - t221 * t283, -g(1) * t273 - g(2) * t303 + t146 * t184 + t174 * t300 + t33 * t93 + t34 * t94 - t70 * t64 + t71 * t65, t133 * t92 - t143 * t55, -t133 * t91 + t142 * t55 - t143 * t56 - t304 * t92, t92 * t342 + t143 * t335 - t55 * t166 - t133 * t162 + (t143 * t316 + (-t143 * t249 + t358 * t92) * qJD(1)) * t221, t142 * t56 + t304 * t91, -t91 * t342 - t142 * t335 - t56 * t166 + t304 * t162 + (-t142 * t316 + (t142 * t249 - t358 * t91) * qJD(1)) * t221, t335 * t166 - t342 * t162 + (t166 * t316 + (-t162 * t358 - t166 * t249) * qJD(1)) * t221, g(1) * t104 - g(2) * t108 + t30 * t142 - t35 * t162 + t8 * t166 + t20 * t258 + t232 * t48 + t304 * t64 + t82 * t56 + t62 * t91, t64 * t133 + t30 * t143 + t36 * t162 + t166 * t270 - t19 * t258 + t233 * t388 - t82 * t55 + t62 * t92 + t285, -t133 * t20 + t142 * t270 - t143 * t8 - t19 * t304 - t35 * t92 - t36 * t91 - t388 * t56 + t48 * t55 - t284, -g(1) * t245 - g(2) * t257 + t36 * t19 + t35 * t20 - t270 * t388 + t30 * t82 + t8 * t48 + t62 * t64, -t24 * t99 + t40 * t77, t24 * t98 - t25 * t99 - t39 * t77 - t40 * t75, -t142 * t24 + t40 * t400 + t54 * t99 + t77 * t91, t25 * t98 + t39 * t75, -t142 * t25 - t39 * t400 - t54 * t98 - t75 * t91, t142 * t54 + t400 * t91, g(1) * t412 - g(2) * t58 + t14 * t75 + t2 * t142 + t15 * t54 + t41 * t25 + t27 * t39 - t277 * t91 + t4 * t400 + t6 * t98, -g(1) * t413 - g(2) * t57 - t1 * t142 - t12 * t91 + t14 * t77 - t16 * t54 - t41 * t24 + t27 * t40 - t3 * t400 + t6 * t99, -t1 * t98 - t12 * t39 + t15 * t24 - t16 * t25 - t2 * t99 + t277 * t40 - t3 * t75 - t4 * t77 - t285, t1 * t16 + t12 * t3 + t2 * t15 - t277 * t4 + t6 * t41 + t27 * t14 - g(1) * (-pkin(4) * t104 + pkin(9) * t305 + t245) - g(2) * (pkin(4) * t108 + pkin(9) * t107 + t257); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t295, t351 * t366, t221 * t338 - t229 * t323, t295, t225 * t323 + t315, t206, t203 + t170 * t299 - t395 + g(2) * t175 + (-t319 + t366) * t225 * pkin(1) + (t252 - t391) * t221, pkin(1) * t332 + t169 * t299 + g(1) * t178 - g(2) * t176 + (pkin(7) * t340 + g(3)) * t365 - t330, 0, 0, -t369, -t154 + t398, t114 + t406, t369, -t272 + t234, t206, t86 * t299 + t174 * t163 + (-t159 * t329 + t206 * t378) * pkin(2) - t259 + t33, t87 * t299 + t174 * t159 + (t163 * t329 - t206 * t220) * pkin(2) - t260 - t34, -(t71 - t86) * t163 + (-t70 + t87) * t159 + (-t113 * t220 - t114 * t378) * pkin(2), -g(2) * t195 + t70 * t86 - t71 * t87 + (t34 * t220 + t33 * t378 - t395 + g(2) * t357 + (-t174 * t349 - t391) * t221) * pkin(2), t133 * t228 * t258 - t224 * t55, (-t55 - t373) * t228 - t407 + t379, t402 * t224 + t371 + t423, -t228 * t56 + t301 * t304, t237 - t370, t258 * t163, t35 * t163 + t215 * t56 + t224 * t380 - t399 * t228 - t232 * t368 - t258 * t45 - t86 * t304 + t343 * t62 - t367 * t401, -t86 * t133 - t36 * t163 - t215 * t55 + t399 * t224 + t228 * t380 + t233 * t367 + t258 * t46 + t346 * t62 + t368 * t401, t304 * t46 + t133 * t45 + (-t159 * t35 - t214 * t56 - t270 + (t133 * t214 - t35) * qJD(4)) * t228 + (-t385 - t214 * t55 - t8 + (t214 * t304 - t36) * qJD(4)) * t224 + t260, t30 * t215 - t36 * t46 - t35 * t45 - t62 * t86 - g(1) * t239 - g(2) * t255 - g(3) * t290 + (-t8 * t224 - t270 * t228 + (-t224 * t36 - t228 * t35) * qJD(4)) * t214, -t24 * t359 + t246 * t77, -t408 + (-t333 + (t24 + t377) * t224) * t223 + t294, (t382 + t384) * t224 + t404 + t312, t223 * t224 * t25 + (t282 + t325) * t75, t381 + t269 + (t271 - t409) * t224, -t228 * t54 + t301 * t400, -t27 * t101 + t137 * t54 - t37 * t75 + t386 * t400 + t260 * t223 + (-t2 + (t214 * t75 + t223 * t27) * qJD(4) - t259 * t227) * t228 + (t214 * t25 + t6 * t223 - t258 * t277 + t27 * t344) * t224, -t27 * t102 - t138 * t54 - t37 * t77 - t387 * t400 + t260 * t227 + (t1 + (t214 * t77 + t227 * t27) * qJD(4) + t259 * t223) * t228 + (-t12 * t258 - t214 * t24 + t6 * t227 - t27 * t345) * t224, t101 * t12 - t102 * t277 + t137 * t24 - t138 * t25 - t386 * t77 - t387 * t75 + t279 * t346 + (qJD(5) * t278 - t1 * t223 - t2 * t227 - t259) * t224, t1 * t138 + t2 * t137 - t27 * t37 - g(1) * (t124 * t287 + t239) - g(2) * (t121 * t287 + t255) - g(3) * (-t166 * t287 + t290) + (t224 * t6 + t27 * t346) * t214 + t387 * t12 - t386 * t277; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t272 + t113, t114 - t406, -t154 - t398, t159 * t71 - t163 * t70 + (-t280 - t394) * t221 + t314 + t336, 0, 0, 0, 0, 0, 0, t237 + t370, t371 - t423 + (-t335 + t236) * t224, (t55 - t373) * t228 + t407 + t379, t163 * t62 + (t258 * t36 + t8) * t228 + t417 * t224 + t264, 0, 0, 0, 0, 0, 0, -t381 + t269 + (t271 + t409) * t224, (-t382 + t384) * t224 - t404 + t312, t408 + (t224 * t308 + t333) * t223 + t294, -t101 * t277 - t102 * t12 + (-qJD(4) * t278 - t6) * t228 + (t258 * t27 + t238) * t224 + t264; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t372, t133 ^ 2 - t304 ^ 2, t373 - t274, -t372, t133 * t159 - t306, t232, -t62 * t133 + t262 - t313 + t385, t304 * t62 - t261 - t417, 0, 0, -t223 * t24 + t302 * t77, (-t24 - t422) * t227 + (-t25 - t421) * t223, -t133 * t77 + t302 * t400 + t383, -t227 * t25 + t75 * t405, t133 * t75 - t400 * t405 + t382, -t400 * t133, -pkin(4) * t25 + t133 * t277 - t21 * t400 + t223 * t268 - t227 * t240 - t36 * t75, pkin(4) * t24 + t12 * t133 + t22 * t400 + t223 * t240 + t227 * t268 - t36 * t77, t21 * t77 + t22 * t75 + ((-t25 + t376) * pkin(9) + t414) * t227 + (pkin(9) * t308 - t415) * t223 + t261, t277 * t21 - t12 * t22 - t27 * t36 + t254 * pkin(4) + (t238 + t261) * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t390, -t75 ^ 2 + t77 ^ 2, -t24 + t422, -t390, -t25 + t421, t54, -g(1) * t57 + g(2) * t413 + g(3) * t98 - t27 * t77 + t415, g(1) * t58 + g(2) * t412 + g(3) * t99 + t27 * t75 - t414, 0, 0;];
tau_reg = t7;
