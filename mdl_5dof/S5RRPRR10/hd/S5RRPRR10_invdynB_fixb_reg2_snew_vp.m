% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:28
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPRR10_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR10_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR10_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR10_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR10_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5RRPRR10_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:27:00
% EndTime: 2019-12-31 20:27:26
% DurationCPUTime: 26.32s
% Computational Cost: add. (164894->802), mult. (436032->1310), div. (0->0), fcn. (342002->12), ass. (0->589)
t867 = sin(pkin(5));
t872 = sin(qJ(2));
t960 = qJDD(1) * t872;
t876 = cos(qJ(2));
t964 = qJD(1) * t876;
t829 = (qJD(2) * t964 + t960) * t867;
t965 = qJD(1) * t867;
t946 = t872 * t965;
t961 = qJDD(1) * t867;
t830 = -qJD(2) * t946 + t876 * t961;
t866 = sin(pkin(10));
t868 = cos(pkin(10));
t782 = t868 * t829 + t866 * t830;
t945 = t867 * t964;
t822 = t866 * t945 + t868 * t946;
t869 = cos(pkin(5));
t858 = t869 * qJD(1) + qJD(2);
t871 = sin(qJ(4));
t875 = cos(qJ(4));
t796 = t875 * t822 + t871 * t858;
t857 = t869 * qJDD(1) + qJDD(2);
t950 = t796 * qJD(4) + t871 * t782 - t875 * t857;
t820 = t866 * t946 - t868 * t945;
t816 = qJD(4) + t820;
t996 = t816 * t796;
t1021 = t950 + t996;
t781 = t822 * t820;
t1010 = -t781 + t857;
t1020 = t1010 * t866;
t1019 = t1010 * t868;
t794 = t871 * t822 - t875 * t858;
t743 = t796 * t794;
t941 = t866 * t829 - t868 * t830;
t780 = qJDD(4) + t941;
t1011 = -t743 + t780;
t1018 = t1011 * t871;
t1017 = t1011 * t875;
t870 = sin(qJ(5));
t874 = cos(qJ(5));
t756 = t870 * t796 - t874 * t816;
t758 = t874 * t796 + t870 * t816;
t696 = t758 * t756;
t940 = qJDD(5) + t950;
t1012 = -t696 + t940;
t1016 = t1012 * t870;
t1015 = t1012 * t874;
t863 = t867 ^ 2;
t878 = qJD(1) ^ 2;
t966 = qJD(1) * t858;
t1014 = t863 * (-t869 * t878 + t966);
t838 = t858 * t946;
t802 = t830 - t838;
t1013 = t869 * t802;
t724 = -t794 * qJD(4) + t875 * t782 + t871 * t857;
t651 = -t756 * qJD(5) + t874 * t724 + t870 * t780;
t790 = qJD(5) + t794;
t714 = t790 * t756;
t605 = -t714 + t651;
t763 = t816 * t794;
t681 = -t763 + t724;
t806 = t858 * t820;
t1009 = -t806 + t782;
t839 = t858 * t945;
t799 = t839 + t829;
t1000 = g(3) * t867;
t873 = sin(qJ(1));
t877 = cos(qJ(1));
t852 = t877 * g(1) + t873 * g(2);
t826 = -t878 * pkin(1) + pkin(7) * t961 - t852;
t1001 = pkin(7) * t867;
t851 = t873 * g(1) - t877 * g(2);
t883 = qJDD(1) * pkin(1) + t878 * t1001 + t851;
t882 = t869 * t883;
t767 = t876 * t826 + (-t1000 + t882) * t872;
t897 = t858 * pkin(2) - qJ(3) * t946;
t865 = t876 ^ 2;
t990 = t863 * t878;
t958 = t865 * t990;
t711 = -pkin(2) * t958 + t830 * qJ(3) - t858 * t897 + t767;
t942 = -t872 * t826 + t876 * t882;
t976 = t872 * t878;
t957 = t863 * t976;
t881 = t857 * pkin(2) - t829 * qJ(3) + (pkin(2) * t957 + (qJ(3) * t966 - g(3)) * t867) * t876 + t942;
t632 = -0.2e1 * qJD(3) * t820 + t868 * t711 + t866 * t881;
t943 = t870 * t724 - t874 * t780;
t602 = (qJD(5) - t790) * t758 + t943;
t754 = t756 ^ 2;
t755 = t758 ^ 2;
t788 = t790 ^ 2;
t791 = t794 ^ 2;
t792 = t796 ^ 2;
t1008 = t816 ^ 2;
t818 = t820 ^ 2;
t819 = t822 ^ 2;
t1007 = t858 ^ 2;
t1006 = 0.2e1 * qJD(3);
t1005 = pkin(2) * t867;
t1004 = pkin(2) * t869;
t1003 = pkin(3) * t866;
t1002 = pkin(4) * t871;
t944 = t866 * t711 - t868 * t881;
t631 = t822 * t1006 + t944;
t558 = -t868 * t631 + t866 * t632;
t999 = t558 * t876;
t998 = t790 * t870;
t997 = t790 * t874;
t995 = t816 * t871;
t994 = t816 * t875;
t993 = t858 * t822;
t992 = t858 * t866;
t991 = t858 * t868;
t807 = t869 * g(3) + t867 * t883;
t736 = t830 * pkin(2) + qJ(3) * t958 - t897 * t946 - qJDD(3) + t807;
t989 = t866 * t736;
t770 = t781 + t857;
t988 = t866 * t770;
t987 = t867 * t857;
t986 = t868 * t736;
t985 = t868 * t770;
t775 = t820 * pkin(3) - t822 * pkin(8);
t597 = -pkin(3) * t1007 + t857 * pkin(8) - t820 * t775 + t632;
t744 = t941 + t993;
t880 = t744 * pkin(3) - t1009 * pkin(8) - t736;
t550 = t871 * t597 - t875 * t880;
t741 = t794 * pkin(4) - t796 * pkin(9);
t522 = -t780 * pkin(4) - t1008 * pkin(9) + t796 * t741 + t550;
t984 = t870 * t522;
t642 = t696 + t940;
t983 = t870 * t642;
t596 = -t857 * pkin(3) - t1007 * pkin(8) + (t1006 + t775) * t822 + t944;
t982 = t871 * t596;
t702 = t743 + t780;
t981 = t871 * t702;
t980 = t872 * t558;
t979 = t872 * t807;
t850 = t876 * t957;
t827 = t850 + t857;
t978 = t872 * t827;
t828 = -t850 + t857;
t977 = t872 * t828;
t975 = t874 * t522;
t974 = t874 * t642;
t973 = t875 * t596;
t972 = t875 * t702;
t971 = t876 * t807;
t970 = t876 * t827;
t969 = t876 * t828;
t551 = t875 * t597 + t871 * t880;
t523 = -t1008 * pkin(4) + t780 * pkin(9) - t794 * t741 + t551;
t543 = t1021 * pkin(4) - t681 * pkin(9) + t596;
t476 = t874 * t523 + t870 * t543;
t864 = t872 ^ 2;
t967 = t864 + t865;
t959 = t864 * t990;
t956 = t866 * t743;
t955 = t867 * t781;
t954 = t868 * t743;
t953 = t869 * t781;
t952 = t871 * t696;
t951 = t875 * t696;
t949 = -pkin(3) * t868 - pkin(2);
t948 = -pkin(4) * t875 - pkin(3);
t947 = t858 * t965;
t475 = t870 * t523 - t874 * t543;
t485 = t871 * t550 + t875 * t551;
t559 = t866 * t631 + t868 * t632;
t811 = -t873 * t851 - t877 * t852;
t849 = t877 * qJDD(1) - t873 * t878;
t939 = -pkin(6) * t849 - t873 * g(3);
t817 = -t1007 - t959;
t772 = -t872 * t817 - t969;
t938 = pkin(7) * t772 - t979;
t834 = -t1007 - t958;
t785 = t876 * t834 - t978;
t937 = pkin(7) * t785 + t971;
t435 = t870 * t475 + t874 * t476;
t423 = t875 * t435 + t871 * t522;
t434 = -t874 * t475 + t870 * t476;
t400 = t866 * t423 - t868 * t434;
t401 = t868 * t423 + t866 * t434;
t936 = t400 * t876 + t401 * t872;
t606 = -t714 - t651;
t547 = -t602 * t874 - t870 * t606;
t658 = t754 + t755;
t510 = t875 * t547 - t871 * t658;
t545 = -t602 * t870 + t874 * t606;
t467 = t866 * t510 - t868 * t545;
t468 = t868 * t510 + t866 * t545;
t935 = t467 * t876 + t468 * t872;
t469 = t866 * t485 - t868 * t596;
t470 = t868 * t485 + t866 * t596;
t934 = t469 * t876 + t470 * t872;
t603 = (-qJD(5) - t790) * t758 - t943;
t546 = t874 * t603 - t870 * t605;
t695 = -t755 + t754;
t518 = t875 * t546 - t871 * t695;
t544 = -t870 * t603 - t874 * t605;
t472 = t866 * t518 + t868 * t544;
t473 = t868 * t518 - t866 * t544;
t933 = t472 * t876 + t473 * t872;
t671 = -t788 - t754;
t572 = t874 * t671 - t1016;
t526 = t875 * t572 - t871 * t603;
t571 = t870 * t671 + t1015;
t482 = t866 * t526 - t868 * t571;
t483 = t868 * t526 + t866 * t571;
t932 = t482 * t876 + t483 * t872;
t693 = -t755 - t788;
t580 = -t870 * t693 - t974;
t529 = t875 * t580 + t605 * t871;
t579 = t874 * t693 - t983;
t492 = t866 * t529 - t868 * t579;
t493 = t868 * t529 + t866 * t579;
t931 = t492 * t876 + t493 * t872;
t713 = -t755 + t788;
t593 = -t870 * t713 + t1015;
t536 = t875 * t593 - t871 * t606;
t591 = -t874 * t713 - t1016;
t497 = t866 * t536 + t868 * t591;
t499 = t868 * t536 - t866 * t591;
t930 = t497 * t876 + t499 * t872;
t712 = t754 - t788;
t594 = t874 * t712 - t983;
t537 = t875 * t594 - t871 * t602;
t592 = -t870 * t712 - t974;
t498 = t866 * t537 + t868 * t592;
t500 = t868 * t537 - t866 * t592;
t929 = t498 * t876 + t500 * t872;
t650 = -t758 * qJD(5) - t943;
t599 = -t870 * t650 + t756 * t997;
t567 = t875 * t599 - t952;
t598 = -t874 * t650 - t756 * t998;
t512 = t866 * t567 + t868 * t598;
t514 = t868 * t567 - t866 * t598;
t928 = t512 * t876 + t514 * t872;
t601 = t874 * t651 - t758 * t998;
t568 = t875 * t601 + t952;
t600 = -t870 * t651 - t758 * t997;
t513 = t866 * t568 + t868 * t600;
t515 = t868 * t568 - t866 * t600;
t927 = t513 * t876 + t515 * t872;
t484 = -t875 * t550 + t871 * t551;
t653 = (-t756 * t874 + t758 * t870) * t790;
t609 = t875 * t653 + t871 * t940;
t652 = (t756 * t870 + t758 * t874) * t790;
t556 = t866 * t609 + t868 * t652;
t557 = t868 * t609 - t866 * t652;
t926 = t556 * t876 + t557 * t872;
t925 = t559 * t872 + t999;
t680 = -t950 + t996;
t682 = -t763 - t724;
t613 = t875 * t680 - t871 * t682;
t710 = t791 + t792;
t569 = t866 * t613 + t868 * t710;
t570 = t868 * t613 - t866 * t710;
t924 = t569 * t876 + t570 * t872;
t612 = -t1021 * t875 - t871 * t681;
t742 = -t792 + t791;
t573 = t866 * t612 + t868 * t742;
t574 = t868 * t612 - t866 * t742;
t923 = t573 * t876 + t574 * t872;
t718 = -t1008 - t791;
t645 = t875 * t718 - t1018;
t577 = -t1021 * t868 + t866 * t645;
t578 = t1021 * t866 + t868 * t645;
t922 = t577 * t876 + t578 * t872;
t731 = -t792 - t1008;
t655 = -t871 * t731 - t972;
t581 = t866 * t655 - t681 * t868;
t582 = t868 * t655 + t681 * t866;
t921 = t581 * t876 + t582 * t872;
t762 = -t792 + t1008;
t664 = -t871 * t762 + t1017;
t586 = t866 * t664 + t868 * t682;
t588 = t868 * t664 - t866 * t682;
t920 = t586 * t876 + t588 * t872;
t761 = t791 - t1008;
t665 = t875 * t761 - t981;
t587 = t866 * t665 - t680 * t868;
t589 = t868 * t665 + t680 * t866;
t919 = t587 * t876 + t589 * t872;
t675 = t794 * t994 + t871 * t950;
t633 = t866 * t675 + t954;
t635 = t868 * t675 - t956;
t918 = t633 * t876 + t635 * t872;
t677 = t875 * t724 - t796 * t995;
t634 = t866 * t677 - t954;
t636 = t868 * t677 + t956;
t917 = t634 * t876 + t636 * t872;
t700 = (-t794 * t875 + t796 * t871) * t816;
t667 = t866 * t700 - t868 * t780;
t668 = t868 * t700 + t866 * t780;
t916 = t667 * t876 + t668 * t872;
t685 = t1009 * t868 - t866 * t744;
t687 = -t1009 * t866 - t868 * t744;
t915 = t685 * t876 + t687 * t872;
t749 = t806 + t782;
t898 = -t941 + t993;
t686 = -t868 * t749 + t866 * t898;
t688 = t866 * t749 + t868 * t898;
t914 = t686 * t876 + t688 * t872;
t768 = -t1007 - t818;
t705 = t866 * t768 + t1019;
t706 = t868 * t768 - t1020;
t913 = t705 * t876 + t706 * t872;
t789 = -t819 - t1007;
t716 = t868 * t789 - t988;
t717 = -t866 * t789 - t985;
t912 = t716 * t876 + t717 * t872;
t804 = -t819 + t1007;
t725 = t868 * t804 + t1020;
t727 = -t866 * t804 + t1019;
t911 = t725 * t876 + t727 * t872;
t803 = t818 - t1007;
t726 = t866 * t803 + t985;
t728 = t868 * t803 - t988;
t910 = t726 * t876 + t728 * t872;
t737 = t820 * t992 - t868 * t941;
t738 = t820 * t991 + t866 * t941;
t909 = t737 * t876 + t738 * t872;
t739 = t866 * t782 + t822 * t991;
t740 = t868 * t782 - t822 * t992;
t908 = t739 * t876 + t740 * t872;
t759 = (-t820 * t866 - t822 * t868) * t858;
t760 = (-t820 * t868 + t822 * t866) * t858;
t907 = t759 * t876 + t760 * t872;
t766 = t876 * t1000 - t942;
t906 = -t876 * t766 + t872 * t767;
t704 = t872 * t766 + t876 * t767;
t905 = t799 * t876 + t802 * t872;
t800 = -t839 + t829;
t801 = t830 + t838;
t904 = -t800 * t876 + t801 * t872;
t903 = t817 * t876 - t977;
t832 = t1007 - t959;
t902 = t832 * t876 + t978;
t901 = t834 * t872 + t970;
t833 = -t1007 + t958;
t900 = t833 * t872 + t969;
t810 = t877 * t851 - t873 * t852;
t422 = t871 * t435 - t875 * t522;
t385 = -pkin(8) * t422 + (-pkin(9) * t875 + t1002) * t434;
t390 = -pkin(3) * t422 + pkin(4) * t522 - pkin(9) * t435;
t371 = -pkin(2) * t422 + qJ(3) * t401 + t866 * t385 + t868 * t390;
t374 = -qJ(3) * t400 + t868 * t385 - t866 * t390;
t382 = -t872 * t400 + t876 * t401;
t896 = pkin(7) * t382 + t371 * t876 + t374 * t872;
t424 = -pkin(9) * t545 - t434;
t509 = t871 * t547 + t875 * t658;
t410 = -pkin(8) * t509 + t545 * t1002 + t875 * t424;
t412 = -pkin(3) * t509 - pkin(4) * t658 - pkin(9) * t547 - t435;
t383 = -pkin(2) * t509 + qJ(3) * t468 + t866 * t410 + t868 * t412;
t384 = -qJ(3) * t467 + t868 * t410 - t866 * t412;
t428 = -t872 * t467 + t876 * t468;
t895 = pkin(7) * t428 + t383 * t876 + t384 * t872;
t457 = -pkin(4) * t571 + t475;
t481 = -pkin(9) * t571 + t984;
t525 = t871 * t572 + t875 * t603;
t418 = -pkin(8) * t525 - t871 * t457 + t875 * t481;
t442 = -pkin(3) * t525 - pkin(4) * t603 - pkin(9) * t572 + t975;
t387 = -pkin(2) * t525 + qJ(3) * t483 + t866 * t418 + t868 * t442;
t394 = -qJ(3) * t482 + t868 * t418 - t866 * t442;
t439 = -t872 * t482 + t876 * t483;
t894 = pkin(7) * t439 + t387 * t876 + t394 * t872;
t458 = -pkin(4) * t579 + t476;
t486 = -pkin(9) * t579 + t975;
t528 = t871 * t580 - t605 * t875;
t421 = -pkin(8) * t528 - t871 * t458 + t875 * t486;
t445 = -pkin(3) * t528 + pkin(4) * t605 - pkin(9) * t580 - t984;
t388 = -pkin(2) * t528 + qJ(3) * t493 + t866 * t421 + t868 * t445;
t395 = -qJ(3) * t492 + t868 * t421 - t866 * t445;
t443 = -t872 * t492 + t876 * t493;
t893 = pkin(7) * t443 + t388 * t876 + t395 * t872;
t411 = qJ(3) * t470 + (-pkin(8) * t866 + t949) * t484;
t417 = -qJ(3) * t469 + (-pkin(8) * t868 + t1003) * t484;
t429 = -t872 * t469 + t876 * t470;
t892 = pkin(7) * t429 + t411 * t876 + t417 * t872;
t611 = t871 * t680 + t875 * t682;
t471 = -pkin(8) * t611 - t484;
t438 = qJ(3) * t570 + t866 * t471 + t611 * t949;
t441 = -qJ(3) * t569 + t611 * t1003 + t868 * t471;
t508 = -t872 * t569 + t876 * t570;
t891 = pkin(7) * t508 + t438 * t876 + t441 * t872;
t644 = t871 * t718 + t1017;
t516 = -pkin(3) * t644 + t550;
t552 = -pkin(8) * t644 + t982;
t455 = -pkin(2) * t644 + qJ(3) * t578 + t868 * t516 + t866 * t552;
t461 = -qJ(3) * t577 - t866 * t516 + t868 * t552;
t520 = -t872 * t577 + t876 * t578;
t890 = pkin(7) * t520 + t455 * t876 + t461 * t872;
t654 = t875 * t731 - t981;
t519 = -pkin(3) * t654 + t551;
t555 = -pkin(8) * t654 + t973;
t456 = -pkin(2) * t654 + qJ(3) * t582 + t868 * t519 + t866 * t555;
t464 = -qJ(3) * t581 - t866 * t519 + t868 * t555;
t524 = -t872 * t581 + t876 * t582;
t889 = pkin(7) * t524 + t456 * t876 + t464 * t872;
t753 = -t818 - t819;
t527 = -pkin(2) * t753 + qJ(3) * t688 + t559;
t540 = -qJ(3) * t686 - t558;
t618 = -t872 * t686 + t876 * t688;
t888 = pkin(7) * t618 + t527 * t876 + t540 * t872;
t623 = -pkin(2) * t744 + qJ(3) * t706 + t986;
t640 = -t872 * t705 + t876 * t706;
t659 = -qJ(3) * t705 - t989;
t887 = pkin(7) * t640 + t623 * t876 + t659 * t872;
t629 = -pkin(2) * t1009 + qJ(3) * t717 - t989;
t657 = -t872 * t716 + t876 * t717;
t666 = -qJ(3) * t716 - t986;
t886 = pkin(7) * t657 + t629 * t876 + t666 * t872;
t750 = t872 * t800 + t876 * t801;
t885 = pkin(7) * t750 + t704;
t501 = t876 * t559 - t980;
t548 = pkin(2) * t736 + qJ(3) * t559;
t884 = pkin(7) * t501 - qJ(3) * t980 + t548 * t876;
t862 = t867 * t863;
t848 = t873 * qJDD(1) + t877 * t878;
t841 = t869 * t857;
t836 = t967 * t990;
t835 = (t864 - t865) * t990;
t831 = -pkin(6) * t848 + t877 * g(3);
t805 = t967 * t947;
t798 = (t960 + (qJD(2) + t858) * t964) * t867;
t797 = t876 * t829 - t864 * t947;
t793 = -t872 * t830 - t865 * t947;
t784 = t876 * t833 - t977;
t783 = -t872 * t832 + t970;
t779 = t819 - t818;
t765 = (t862 * t876 * t878 + t799 * t869) * t872;
t764 = (-t862 * t976 + t1013) * t876;
t751 = -t872 * t799 + t876 * t802;
t735 = t867 * t802 + t869 * t901;
t734 = -t867 * t801 + t869 * t900;
t733 = -t867 * t800 + t869 * t902;
t732 = t867 * t901 - t1013;
t730 = -t867 * t798 + t869 * t903;
t729 = t869 * t798 + t867 * t903;
t722 = -t867 * t835 + t869 * t905;
t721 = t867 * t836 + t869 * t904;
t720 = -t869 * t836 + t867 * t904;
t699 = (-t794 * t871 - t796 * t875) * t816;
t698 = -t873 * t735 + t877 * t785;
t697 = t877 * t735 + t873 * t785;
t694 = -t872 * t759 + t876 * t760;
t692 = -t873 * t730 + t877 * t772;
t691 = t877 * t730 + t873 * t772;
t690 = t867 * t807 + t869 * t906;
t689 = -t869 * t807 + t867 * t906;
t684 = t869 * t907 - t987;
t676 = t871 * t724 + t796 * t994;
t674 = t794 * t995 - t875 * t950;
t673 = -t872 * t739 + t876 * t740;
t672 = -t872 * t737 + t876 * t738;
t670 = -t873 * t721 + t877 * t750;
t669 = t877 * t721 + t873 * t750;
t663 = t871 * t761 + t972;
t662 = t875 * t762 + t1018;
t661 = -t872 * t726 + t876 * t728;
t660 = -t872 * t725 + t876 * t727;
t656 = -t979 + (-t732 * t867 - t735 * t869) * pkin(7);
t649 = -t971 + (-t729 * t867 - t730 * t869) * pkin(7);
t648 = t869 * t908 - t955;
t647 = t869 * t909 + t955;
t646 = -pkin(1) * t732 + t867 * t766 + t869 * t937;
t639 = -pkin(1) * t729 + t867 * t767 + t869 * t938;
t628 = -t867 * t898 + t869 * t910;
t627 = -t867 * t749 + t869 * t911;
t626 = t869 * pkin(7) * t704 - pkin(1) * t689;
t625 = -t873 * t690 + t877 * t704;
t624 = t877 * t690 + t873 * t704;
t622 = -t1009 * t867 + t869 * t912;
t621 = t1009 * t869 + t867 * t912;
t620 = -pkin(1) * t720 + t869 * t885;
t619 = (-t689 * t867 - t690 * t869) * pkin(7);
t617 = -t872 * t685 + t876 * t687;
t616 = -t867 * t744 + t869 * t913;
t615 = t869 * t744 + t867 * t913;
t614 = (-t720 * t867 - t721 * t869) * pkin(7) - t906;
t610 = -t1021 * t871 + t875 * t681;
t608 = t871 * t653 - t875 * t940;
t590 = pkin(2) * t716 - t632;
t585 = pkin(2) * t705 - t631;
t584 = -t872 * t667 + t876 * t668;
t583 = -t867 * t779 + t869 * t915;
t576 = -t867 * t753 + t869 * t914;
t575 = t869 * t753 + t867 * t914;
t566 = t871 * t601 - t951;
t565 = t871 * t599 + t951;
t564 = -t872 * t634 + t876 * t636;
t563 = -t872 * t633 + t876 * t635;
t562 = -t873 * t622 + t877 * t657;
t561 = t877 * t622 + t873 * t657;
t560 = -t867 * t699 + t869 * t916;
t554 = -t873 * t616 + t877 * t640;
t553 = t877 * t616 + t873 * t640;
t539 = -t867 * t676 + t869 * t917;
t538 = -t867 * t674 + t869 * t918;
t535 = t871 * t594 + t875 * t602;
t534 = t871 * t593 + t875 * t606;
t533 = -t872 * t587 + t876 * t589;
t532 = -t872 * t586 + t876 * t588;
t531 = -t873 * t576 + t877 * t618;
t530 = t877 * t576 + t873 * t618;
t517 = t871 * t546 + t875 * t695;
t511 = -t872 * t573 + t876 * t574;
t507 = -t867 * t663 + t869 * t919;
t506 = -t867 * t662 + t869 * t920;
t505 = -t867 * t654 + t869 * t921;
t504 = t869 * t654 + t867 * t921;
t503 = -t867 * t644 + t869 * t922;
t502 = t869 * t644 + t867 * t922;
t496 = -t872 * t629 + t876 * t666 + (-t621 * t867 - t622 * t869) * pkin(7);
t495 = pkin(2) * t581 - pkin(3) * t681 + pkin(8) * t655 + t982;
t494 = -t872 * t556 + t876 * t557;
t491 = t867 * t736 + t869 * t925;
t490 = -t869 * t736 + t867 * t925;
t489 = pkin(2) * t577 - pkin(3) * t1021 + pkin(8) * t645 - t973;
t488 = -t872 * t623 + t876 * t659 + (-t615 * t867 - t616 * t869) * pkin(7);
t487 = -t867 * t610 + t869 * t923;
t480 = -t867 * t611 + t869 * t924;
t479 = t869 * t611 + t867 * t924;
t478 = -pkin(1) * t621 - t867 * t590 + t869 * t886;
t477 = -pkin(1) * t615 - t867 * t585 + t869 * t887;
t474 = -t867 * t608 + t869 * t926;
t466 = -t872 * t513 + t876 * t515;
t465 = -t872 * t512 + t876 * t514;
t463 = -t873 * t505 + t877 * t524;
t462 = t877 * t505 + t873 * t524;
t460 = -t873 * t503 + t877 * t520;
t459 = t877 * t503 + t873 * t520;
t454 = pkin(2) * t569 + pkin(3) * t710 + pkin(8) * t613 + t485;
t453 = -t872 * t498 + t876 * t500;
t452 = -t872 * t497 + t876 * t499;
t451 = -t867 * t566 + t869 * t927;
t450 = -t867 * t565 + t869 * t928;
t449 = -t873 * t480 + t877 * t508;
t448 = t877 * t480 + t873 * t508;
t447 = -t873 * t491 + t877 * t501;
t446 = t877 * t491 + t873 * t501;
t444 = -t872 * t527 + t876 * t540 + (-t575 * t867 - t576 * t869) * pkin(7);
t440 = -pkin(1) * t575 - t686 * t1005 + t869 * t888;
t437 = -t867 * t535 + t869 * t929;
t436 = -t867 * t534 + t869 * t930;
t433 = -t872 * t472 + t876 * t473;
t432 = -t867 * t528 + t869 * t931;
t431 = t869 * t528 + t867 * t931;
t430 = pkin(2) * t469 - pkin(3) * t596 + pkin(8) * t485;
t427 = -t867 * t525 + t869 * t932;
t426 = t869 * t525 + t867 * t932;
t425 = -qJ(3) * t999 - t872 * t548 + (-t490 * t867 - t491 * t869) * pkin(7);
t420 = -t867 * t517 + t869 * t933;
t419 = -pkin(1) * t490 - t558 * t1005 + t869 * t884;
t416 = -t867 * t509 + t869 * t935;
t415 = t869 * t509 + t867 * t935;
t414 = -t867 * t484 + t869 * t934;
t413 = t869 * t484 + t867 * t934;
t409 = -t873 * t432 + t877 * t443;
t408 = t877 * t432 + t873 * t443;
t407 = pkin(2) * t492 - pkin(3) * t579 + pkin(8) * t529 + t875 * t458 + t871 * t486;
t406 = pkin(2) * t482 - pkin(3) * t571 + pkin(8) * t526 + t875 * t457 + t871 * t481;
t405 = -t873 * t427 + t877 * t439;
t404 = t877 * t427 + t873 * t439;
t403 = -t872 * t456 + t876 * t464 + (-t504 * t867 - t505 * t869) * pkin(7);
t402 = -t872 * t455 + t876 * t461 + (-t502 * t867 - t503 * t869) * pkin(7);
t399 = -pkin(1) * t504 - t867 * t495 + t869 * t889;
t398 = -pkin(1) * t502 - t867 * t489 + t869 * t890;
t397 = -t873 * t416 + t877 * t428;
t396 = t877 * t416 + t873 * t428;
t393 = pkin(2) * t467 + pkin(8) * t510 + t871 * t424 + t545 * t948;
t392 = -t873 * t414 + t877 * t429;
t391 = t877 * t414 + t873 * t429;
t389 = -t872 * t438 + t876 * t441 + (-t479 * t867 - t480 * t869) * pkin(7);
t386 = -pkin(1) * t479 - t867 * t454 + t869 * t891;
t381 = -t867 * t422 + t869 * t936;
t380 = t869 * t422 + t867 * t936;
t379 = -t872 * t411 + t876 * t417 + (-t413 * t867 - t414 * t869) * pkin(7);
t378 = pkin(2) * t400 + pkin(8) * t423 + (-pkin(9) * t871 + t948) * t434;
t377 = -pkin(1) * t413 - t867 * t430 + t869 * t892;
t376 = -t872 * t388 + t876 * t395 + (-t431 * t867 - t432 * t869) * pkin(7);
t375 = -t872 * t387 + t876 * t394 + (-t426 * t867 - t427 * t869) * pkin(7);
t373 = -pkin(1) * t431 - t867 * t407 + t869 * t893;
t372 = -pkin(1) * t426 - t867 * t406 + t869 * t894;
t370 = -t873 * t381 + t877 * t382;
t369 = t877 * t381 + t873 * t382;
t368 = -t872 * t383 + t876 * t384 + (-t415 * t867 - t416 * t869) * pkin(7);
t367 = -pkin(1) * t415 - t867 * t393 + t869 * t895;
t366 = -t872 * t371 + t876 * t374 + (-t380 * t867 - t381 * t869) * pkin(7);
t365 = -pkin(1) * t380 - t867 * t378 + t869 * t896;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t848, -t849, 0, t811, 0, 0, 0, 0, 0, 0, t698, t692, t670, t625, 0, 0, 0, 0, 0, 0, t554, t562, t531, t447, 0, 0, 0, 0, 0, 0, t460, t463, t449, t392, 0, 0, 0, 0, 0, 0, t405, t409, t397, t370; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t849, -t848, 0, t810, 0, 0, 0, 0, 0, 0, t697, t691, t669, t624, 0, 0, 0, 0, 0, 0, t553, t561, t530, t446, 0, 0, 0, 0, 0, 0, t459, t462, t448, t391, 0, 0, 0, 0, 0, 0, t404, t408, t396, t369; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t732, t729, t720, t689, 0, 0, 0, 0, 0, 0, t615, t621, t575, t490, 0, 0, 0, 0, 0, 0, t502, t504, t479, t413, 0, 0, 0, 0, 0, 0, t426, t431, t415, t380; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t849, 0, -t848, 0, t939, -t831, -t810, -pkin(6) * t810, -t873 * t765 + t877 * t797, -t873 * t722 + t877 * t751, -t873 * t733 + t877 * t783, -t873 * t764 + t877 * t793, -t873 * t734 + t877 * t784, t877 * t805 + t873 * t987, -pkin(6) * t697 - t873 * t646 + t877 * t656, -pkin(6) * t691 - t873 * t639 + t877 * t649, -pkin(6) * t669 + t877 * t614 - t873 * t620, -pkin(6) * t624 + t877 * t619 - t873 * t626, -t873 * t648 + t877 * t673, -t873 * t583 + t877 * t617, -t873 * t627 + t877 * t660, -t873 * t647 + t877 * t672, -t873 * t628 + t877 * t661, -t873 * t684 + t877 * t694, -pkin(6) * t553 - t873 * t477 + t877 * t488, -pkin(6) * t561 - t873 * t478 + t877 * t496, -pkin(6) * t530 - t873 * t440 + t877 * t444, -pkin(6) * t446 - t873 * t419 + t877 * t425, -t873 * t539 + t877 * t564, -t873 * t487 + t877 * t511, -t873 * t506 + t877 * t532, -t873 * t538 + t877 * t563, -t873 * t507 + t877 * t533, -t873 * t560 + t877 * t584, -pkin(6) * t459 - t873 * t398 + t877 * t402, -pkin(6) * t462 - t873 * t399 + t877 * t403, -pkin(6) * t448 - t873 * t386 + t877 * t389, -pkin(6) * t391 - t873 * t377 + t877 * t379, -t873 * t451 + t877 * t466, -t873 * t420 + t877 * t433, -t873 * t436 + t877 * t452, -t873 * t450 + t877 * t465, -t873 * t437 + t877 * t453, -t873 * t474 + t877 * t494, -pkin(6) * t404 - t873 * t372 + t877 * t375, -pkin(6) * t408 - t873 * t373 + t877 * t376, -pkin(6) * t396 - t873 * t367 + t877 * t368, -pkin(6) * t369 - t873 * t365 + t877 * t366; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t848, 0, t849, 0, t831, t939, t811, pkin(6) * t811, t877 * t765 + t873 * t797, t877 * t722 + t873 * t751, t877 * t733 + t873 * t783, t877 * t764 + t873 * t793, t877 * t734 + t873 * t784, t873 * t805 - t877 * t987, pkin(6) * t698 + t877 * t646 + t873 * t656, pkin(6) * t692 + t877 * t639 + t873 * t649, pkin(6) * t670 + t873 * t614 + t877 * t620, pkin(6) * t625 + t873 * t619 + t877 * t626, t877 * t648 + t873 * t673, t877 * t583 + t873 * t617, t877 * t627 + t873 * t660, t877 * t647 + t873 * t672, t877 * t628 + t873 * t661, t877 * t684 + t873 * t694, pkin(6) * t554 + t877 * t477 + t873 * t488, pkin(6) * t562 + t877 * t478 + t873 * t496, pkin(6) * t531 + t877 * t440 + t873 * t444, pkin(6) * t447 + t877 * t419 + t873 * t425, t877 * t539 + t873 * t564, t877 * t487 + t873 * t511, t877 * t506 + t873 * t532, t877 * t538 + t873 * t563, t877 * t507 + t873 * t533, t877 * t560 + t873 * t584, pkin(6) * t460 + t877 * t398 + t873 * t402, pkin(6) * t463 + t877 * t399 + t873 * t403, pkin(6) * t449 + t877 * t386 + t873 * t389, pkin(6) * t392 + t877 * t377 + t873 * t379, t877 * t451 + t873 * t466, t877 * t420 + t873 * t433, t877 * t436 + t873 * t452, t877 * t450 + t873 * t465, t877 * t437 + t873 * t453, t877 * t474 + t873 * t494, pkin(6) * t405 + t877 * t372 + t873 * t375, pkin(6) * t409 + t877 * t373 + t873 * t376, pkin(6) * t397 + t877 * t367 + t873 * t368, pkin(6) * t370 + t877 * t365 + t873 * t366; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t851, t852, 0, 0, (t876 * t1014 + t829 * t867) * t872, t869 * t835 + t867 * t905, t869 * t800 + t867 * t902, (-t872 * t1014 + t830 * t867) * t876, t869 * t801 + t867 * t900, t841, pkin(1) * t735 - t869 * t766 + t867 * t937, pkin(1) * t730 - t869 * t767 + t867 * t938, pkin(1) * t721 + t867 * t885, pkin(1) * t690 + t704 * t1001, t867 * t908 + t953, t869 * t779 + t867 * t915, t869 * t749 + t867 * t911, t867 * t909 - t953, t867 * t910 + t869 * t898, t867 * t907 + t841, pkin(1) * t616 + t869 * t585 + t867 * t887, pkin(1) * t622 + t869 * t590 + t867 * t886, pkin(1) * t576 + t1004 * t686 + t867 * t888, pkin(1) * t491 + t1004 * t558 + t867 * t884, t869 * t676 + t867 * t917, t869 * t610 + t867 * t923, t869 * t662 + t867 * t920, t869 * t674 + t867 * t918, t869 * t663 + t867 * t919, t869 * t699 + t867 * t916, pkin(1) * t503 + t869 * t489 + t867 * t890, pkin(1) * t505 + t869 * t495 + t867 * t889, pkin(1) * t480 + t869 * t454 + t867 * t891, pkin(1) * t414 + t869 * t430 + t867 * t892, t869 * t566 + t867 * t927, t869 * t517 + t867 * t933, t869 * t534 + t867 * t930, t869 * t565 + t867 * t928, t869 * t535 + t867 * t929, t869 * t608 + t867 * t926, pkin(1) * t427 + t869 * t406 + t867 * t894, pkin(1) * t432 + t869 * t407 + t867 * t893, pkin(1) * t416 + t869 * t393 + t867 * t895, pkin(1) * t381 + t869 * t378 + t867 * t896;];
tauB_reg = t1;
