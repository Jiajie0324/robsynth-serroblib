% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S5RRPRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauJ_reg [5x(5*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:28
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S5RRPRR10_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR10_invdynJ_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR10_invdynJ_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR10_invdynJ_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR10_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5RRPRR10_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:26:45
% EndTime: 2019-12-31 20:27:00
% DurationCPUTime: 7.23s
% Computational Cost: add. (36715->519), mult. (97106->777), div. (0->0), fcn. (76082->12), ass. (0->308)
t261 = sin(pkin(10));
t263 = cos(pkin(10));
t270 = cos(qJ(2));
t262 = sin(pkin(5));
t313 = qJD(1) * t262;
t294 = t270 * t313;
t267 = sin(qJ(2));
t295 = t267 * t313;
t225 = t261 * t295 - t263 * t294;
t227 = t261 * t294 + t263 * t295;
t199 = t227 * t225;
t264 = cos(pkin(5));
t254 = t264 * qJDD(1) + qJDD(2);
t355 = -t199 + t254;
t364 = t261 * t355;
t363 = t263 * t355;
t265 = sin(qJ(5));
t255 = t264 * qJD(1) + qJD(2);
t266 = sin(qJ(4));
t269 = cos(qJ(4));
t208 = t269 * t227 + t266 * t255;
t221 = qJD(4) + t225;
t268 = cos(qJ(5));
t182 = t265 * t208 - t268 * t221;
t184 = t268 * t208 + t265 * t221;
t146 = t184 * t182;
t293 = qJD(2) * t313;
t307 = qJDD(1) * t262;
t234 = t267 * t307 + t270 * t293;
t235 = -t267 * t293 + t270 * t307;
t200 = t263 * t234 + t261 * t235;
t290 = t266 * t200 - t269 * t254;
t166 = -t208 * qJD(4) - t290;
t165 = qJDD(5) - t166;
t357 = -t146 + t165;
t362 = t265 * t357;
t206 = t266 * t227 - t269 * t255;
t172 = t208 * t206;
t288 = t261 * t234 - t263 * t235;
t198 = qJDD(4) + t288;
t356 = -t172 + t198;
t361 = t266 * t356;
t360 = t268 * t357;
t359 = t269 * t356;
t258 = t262 ^ 2;
t271 = qJD(1) ^ 2;
t314 = qJD(1) * t255;
t358 = t258 * (-t264 * t271 + t314);
t284 = -t269 * t200 - t266 * t254;
t167 = -t206 * qJD(4) - t284;
t187 = t221 * t206;
t139 = t167 - t187;
t214 = t255 * t225;
t354 = -t214 + t200;
t347 = sin(qJ(1));
t348 = cos(qJ(1));
t280 = t348 * g(1) + t347 * g(2);
t231 = -t271 * pkin(1) + pkin(7) * t307 - t280;
t279 = t347 * g(1) - t348 * g(2);
t327 = t262 * t271;
t275 = qJDD(1) * pkin(1) + pkin(7) * t327 + t279;
t274 = t264 * t275;
t328 = t262 * t267;
t189 = -g(3) * t328 + t270 * t231 + t267 * t274;
t277 = -t255 * pkin(2) + qJ(3) * t295;
t260 = t270 ^ 2;
t332 = t258 * t271;
t305 = t260 * t332;
t158 = -pkin(2) * t305 + t235 * qJ(3) + t255 * t277 + t189;
t289 = -t267 * t231 + t270 * t274;
t304 = t267 * t332;
t273 = t254 * pkin(2) - t234 * qJ(3) + (pkin(2) * t304 + (qJ(3) * t314 - g(3)) * t262) * t270 + t289;
t112 = -0.2e1 * qJD(3) * t225 + t263 * t158 + t261 * t273;
t188 = t262 * t270 * g(3) - t289;
t353 = t267 * t188 + t270 * t189;
t203 = qJD(5) + t206;
t291 = t265 * t167 - t268 * t198;
t98 = (qJD(5) - t203) * t184 + t291;
t136 = (qJD(4) - t221) * t208 + t290;
t180 = t182 ^ 2;
t181 = t184 ^ 2;
t201 = t203 ^ 2;
t204 = t206 ^ 2;
t205 = t208 ^ 2;
t352 = t221 ^ 2;
t223 = t225 ^ 2;
t224 = t227 ^ 2;
t351 = t255 ^ 2;
t350 = 0.2e1 * qJD(3);
t292 = t261 * t158 - t263 * t273;
t111 = t227 * t350 + t292;
t69 = -t263 * t111 + t261 * t112;
t349 = pkin(2) * t69;
t178 = t214 + t200;
t333 = t255 * t227;
t282 = -t288 + t333;
t142 = -t263 * t178 + t261 * t282;
t346 = pkin(2) * t142;
t345 = pkin(3) * t261;
t344 = pkin(4) * t266;
t343 = pkin(7) * t262;
t170 = t206 * pkin(4) - t208 * pkin(9);
t215 = t264 * g(3) + t262 * t275;
t169 = t235 * pkin(2) + qJ(3) * t305 + t277 * t295 - qJDD(3) + t215;
t173 = t288 + t333;
t272 = t173 * pkin(3) - t354 * pkin(8) - t169;
t195 = t225 * pkin(3) - t227 * pkin(8);
t93 = -pkin(3) * t351 + t254 * pkin(8) - t225 * t195 + t112;
t65 = t266 * t93 - t269 * t272;
t48 = -t198 * pkin(4) - t352 * pkin(9) + t208 * t170 + t65;
t342 = t265 * t48;
t92 = -t254 * pkin(3) - t351 * pkin(8) + (t350 + t195) * t227 + t292;
t341 = t266 * t92;
t340 = t267 * t69;
t339 = t268 * t48;
t338 = t269 * t92;
t66 = t266 * t272 + t269 * t93;
t337 = t203 * t265;
t336 = t203 * t268;
t335 = t221 * t266;
t334 = t221 * t269;
t331 = t261 * t169;
t192 = t199 + t254;
t330 = t261 * t192;
t329 = t261 * t225;
t326 = t263 * t169;
t325 = t263 * t192;
t324 = t263 * t225;
t116 = t146 + t165;
t323 = t265 * t116;
t150 = t172 + t198;
t322 = t266 * t150;
t247 = t270 * t304;
t232 = t247 + t254;
t320 = t267 * t232;
t319 = t268 * t116;
t318 = t269 * t150;
t233 = -t247 + t254;
t316 = t270 * t233;
t310 = qJD(4) + t221;
t308 = qJD(5) + t203;
t259 = t267 ^ 2;
t306 = t259 * t332;
t303 = t261 * t172;
t302 = t263 * t172;
t301 = t264 * t199;
t300 = t266 * t146;
t299 = t269 * t146;
t240 = t255 * t294;
t298 = t240 + t234;
t297 = -pkin(3) * t263 - pkin(2);
t296 = -pkin(4) * t269 - pkin(3);
t49 = -t352 * pkin(4) + t198 * pkin(9) - t206 * t170 + t66;
t59 = -t139 * pkin(9) + (t221 * t208 - t166) * pkin(4) + t92;
t30 = t265 * t49 - t268 * t59;
t31 = t265 * t59 + t268 * t49;
t18 = t265 * t30 + t268 * t31;
t36 = t266 * t65 + t269 * t66;
t70 = t261 * t111 + t263 * t112;
t287 = -pkin(4) * t48 + pkin(9) * t18;
t17 = t265 * t31 - t268 * t30;
t35 = t266 * t66 - t269 * t65;
t285 = -t268 * t167 - t265 * t198;
t131 = -t201 - t180;
t78 = t268 * t131 - t362;
t99 = -t308 * t184 - t291;
t281 = pkin(4) * t99 + pkin(9) * t78 - t339;
t103 = t308 * t182 + t285;
t144 = -t181 - t201;
t82 = -t265 * t144 - t319;
t278 = pkin(4) * t103 + pkin(9) * t82 + t342;
t126 = t180 + t181;
t121 = -t182 * qJD(5) - t285;
t161 = t203 * t182;
t102 = t121 + t161;
t63 = t265 * t102 - t268 * t98;
t276 = pkin(4) * t126 + pkin(9) * t63 + t18;
t241 = t264 * t254;
t239 = t255 * t295;
t237 = (t259 - t260) * t332;
t236 = -t351 - t305;
t222 = -t351 - t306;
t213 = -t224 + t351;
t212 = t223 - t351;
t211 = t235 - t239;
t210 = t235 + t239;
t209 = -t240 + t234;
t202 = -t224 - t351;
t197 = t224 - t223;
t190 = -t351 - t223;
t186 = -t205 + t352;
t185 = t204 - t352;
t179 = -t223 - t224;
t171 = t205 - t204;
t168 = -t205 - t352;
t164 = -t352 - t204;
t163 = -t261 * t202 - t325;
t162 = t263 * t202 - t330;
t160 = -t181 + t201;
t159 = t180 - t201;
t157 = t204 + t205;
t153 = t263 * t190 - t364;
t152 = t261 * t190 + t363;
t148 = (-t206 * t269 + t208 * t266) * t221;
t147 = (-t206 * t266 - t208 * t269) * t221;
t145 = t181 - t180;
t143 = t261 * t178 + t263 * t282;
t141 = t310 * t206 + t284;
t140 = t167 + t187;
t137 = -t310 * t208 - t290;
t135 = t269 * t167 - t208 * t335;
t134 = t266 * t167 + t208 * t334;
t133 = -t266 * t166 + t206 * t334;
t132 = t269 * t166 + t206 * t335;
t130 = t269 * t185 - t322;
t129 = -t266 * t186 + t359;
t128 = t266 * t185 + t318;
t127 = t269 * t186 + t361;
t125 = -t266 * t168 - t318;
t124 = t269 * t168 - t322;
t123 = (-t182 * t268 + t184 * t265) * t203;
t122 = (-t182 * t265 - t184 * t268) * t203;
t120 = -t184 * qJD(5) - t291;
t119 = t269 * t164 - t361;
t118 = t266 * t164 + t359;
t109 = -t136 * t269 + t266 * t140;
t108 = t269 * t137 - t266 * t139;
t107 = -t136 * t266 - t269 * t140;
t106 = t266 * t137 + t269 * t139;
t105 = t269 * t123 + t266 * t165;
t104 = t266 * t123 - t269 * t165;
t101 = t121 - t161;
t97 = t268 * t121 - t184 * t337;
t96 = t265 * t121 + t184 * t336;
t95 = -t265 * t120 + t182 * t336;
t94 = -t268 * t120 - t182 * t337;
t90 = t268 * t159 - t323;
t89 = -t265 * t160 + t360;
t88 = t265 * t159 + t319;
t87 = t268 * t160 + t362;
t86 = pkin(2) * t162 - t112;
t85 = pkin(2) * t152 - t111;
t84 = t263 * t125 - t261 * t141;
t83 = t261 * t125 + t263 * t141;
t81 = t268 * t144 - t323;
t80 = t263 * t119 - t261 * t137;
t79 = t261 * t119 + t263 * t137;
t77 = t265 * t131 + t360;
t76 = t263 * t109 - t261 * t157;
t75 = t261 * t109 + t263 * t157;
t74 = t269 * t97 + t300;
t73 = t269 * t95 - t300;
t72 = t266 * t97 - t299;
t71 = t266 * t95 + t299;
t68 = -pkin(8) * t124 + t338;
t67 = -pkin(8) * t118 + t341;
t62 = -t265 * t101 + t268 * t99;
t61 = -t268 * t102 - t265 * t98;
t60 = t268 * t101 + t265 * t99;
t57 = -t266 * t98 + t269 * t90;
t56 = t266 * t102 + t269 * t89;
t55 = t266 * t90 + t269 * t98;
t54 = -t269 * t102 + t266 * t89;
t53 = -t266 * t103 + t269 * t82;
t52 = t269 * t103 + t266 * t82;
t51 = -t266 * t99 + t269 * t78;
t50 = t266 * t78 + t269 * t99;
t47 = -pkin(3) * t124 + t66;
t46 = t266 * t145 + t269 * t62;
t45 = -t269 * t145 + t266 * t62;
t44 = -pkin(3) * t118 + t65;
t43 = -t266 * t126 + t269 * t63;
t42 = t269 * t126 + t266 * t63;
t41 = pkin(2) * t83 + pkin(3) * t141 + pkin(8) * t125 + t341;
t40 = t261 * t81 + t263 * t53;
t39 = t261 * t53 - t263 * t81;
t38 = pkin(2) * t79 + pkin(3) * t137 + pkin(8) * t119 - t338;
t37 = -pkin(9) * t81 + t339;
t34 = t261 * t77 + t263 * t51;
t33 = t261 * t51 - t263 * t77;
t32 = -pkin(9) * t77 + t342;
t28 = -pkin(8) * t107 - t35;
t27 = t261 * t92 + t263 * t36;
t26 = t261 * t36 - t263 * t92;
t25 = t261 * t61 + t263 * t43;
t24 = t261 * t43 - t263 * t61;
t23 = -pkin(4) * t81 + t31;
t22 = -pkin(4) * t77 + t30;
t21 = pkin(2) * t75 + pkin(3) * t157 + pkin(8) * t109 + t36;
t20 = -pkin(3) * t52 - t278;
t19 = -pkin(3) * t50 - t281;
t16 = pkin(2) * t26 - pkin(3) * t92 + pkin(8) * t36;
t15 = -pkin(9) * t61 - t17;
t14 = t269 * t18 + t266 * t48;
t13 = t266 * t18 - t269 * t48;
t12 = -pkin(8) * t52 - t266 * t23 + t269 * t37;
t11 = -pkin(8) * t50 - t266 * t22 + t269 * t32;
t10 = -pkin(3) * t42 - t276;
t9 = -pkin(8) * t42 + t269 * t15 + t61 * t344;
t8 = pkin(2) * t39 - pkin(3) * t81 + pkin(8) * t53 + t269 * t23 + t266 * t37;
t7 = pkin(2) * t33 - pkin(3) * t77 + pkin(8) * t51 + t269 * t22 + t266 * t32;
t6 = t263 * t14 + t261 * t17;
t5 = t261 * t14 - t263 * t17;
t4 = pkin(2) * t24 + pkin(8) * t43 + t266 * t15 + t296 * t61;
t3 = -pkin(3) * t13 - t287;
t2 = -pkin(8) * t13 + (-pkin(9) * t269 + t344) * t17;
t1 = pkin(2) * t5 + pkin(8) * t14 + (-pkin(9) * t266 + t296) * t17;
t29 = [0, 0, 0, 0, 0, qJDD(1), t279, t280, 0, 0, (t234 * t262 + t270 * t358) * t267, t264 * t237 + (t267 * t211 + t270 * t298) * t262, t264 * t209 + (t320 + t270 * (t351 - t306)) * t262, (t235 * t262 - t267 * t358) * t270, t264 * t210 + (t267 * (-t351 + t305) + t316) * t262, t241, (-t188 + pkin(1) * (t232 * t270 + t236 * t267)) * t264 + (t270 * t215 + pkin(1) * t211 + pkin(7) * (t270 * t236 - t320)) * t262, -t215 * t328 - t264 * t189 + pkin(1) * (-t262 * t298 + (t270 * t222 - t267 * t233) * t264) + (-t267 * t222 - t316) * t343, pkin(1) * ((-t270 * t209 + t267 * t210) * t264 - (-t259 - t260) * t258 * t327) + (t267 * t209 + t270 * t210) * t343 + t353 * t262, pkin(1) * (t262 * t215 + (-t188 * t270 + t189 * t267) * t264) + t353 * t343, t301 + (t267 * (t263 * t200 - t261 * t333) + t270 * (t261 * t200 + t263 * t333)) * t262, t264 * t197 + (t267 * (-t263 * t173 - t261 * t354) + t270 * (-t261 * t173 + t263 * t354)) * t262, t264 * t178 + (t267 * (-t261 * t213 + t363) + t270 * (t263 * t213 + t364)) * t262, -t301 + (t267 * (t255 * t324 + t261 * t288) + t270 * (t255 * t329 - t263 * t288)) * t262, t264 * t282 + (t267 * (t263 * t212 - t330) + t270 * (t261 * t212 + t325)) * t262, t241 + (t267 * (t227 * t261 - t324) + t270 * (-t227 * t263 - t329)) * t262 * t255, (t85 + pkin(1) * (t152 * t270 + t153 * t267)) * t264 + (t267 * (-qJ(3) * t152 - t331) + t270 * (-pkin(2) * t173 + qJ(3) * t153 + t326) - pkin(1) * t173 + pkin(7) * (-t267 * t152 + t270 * t153)) * t262, (t86 + pkin(1) * (t162 * t270 + t163 * t267)) * t264 + (t267 * (-qJ(3) * t162 - t326) + t270 * (-pkin(2) * t354 + qJ(3) * t163 - t331) - pkin(1) * t354 + pkin(7) * (-t267 * t162 + t270 * t163)) * t262, (t346 + pkin(1) * (t142 * t270 + t143 * t267)) * t264 + (t267 * (-qJ(3) * t142 - t69) + t270 * (-pkin(2) * t179 + qJ(3) * t143 + t70) - pkin(1) * t179 + pkin(7) * (-t267 * t142 + t270 * t143)) * t262, (t349 + pkin(1) * (t267 * t70 + t270 * t69)) * t264 + (-qJ(3) * t340 + t270 * (pkin(2) * t169 + qJ(3) * t70) + pkin(1) * t169 + pkin(7) * (t270 * t70 - t340)) * t262, t264 * t134 + (t267 * (t263 * t135 + t303) + t270 * (t261 * t135 - t302)) * t262, t264 * t106 + (t267 * (t263 * t108 + t261 * t171) + t270 * (t261 * t108 - t263 * t171)) * t262, t264 * t127 + (t267 * (t263 * t129 + t261 * t140) + t270 * (t261 * t129 - t263 * t140)) * t262, t264 * t132 + (t267 * (t263 * t133 - t303) + t270 * (t261 * t133 + t302)) * t262, t264 * t128 + (t267 * (t263 * t130 - t261 * t136) + t270 * (t261 * t130 + t263 * t136)) * t262, t264 * t147 + (t267 * (t263 * t148 + t261 * t198) + t270 * (t261 * t148 - t263 * t198)) * t262, (t38 + pkin(1) * (t267 * t80 + t270 * t79)) * t264 + (t267 * (-qJ(3) * t79 - t261 * t44 + t263 * t67) + t270 * (-pkin(2) * t118 + qJ(3) * t80 + t261 * t67 + t263 * t44) - pkin(1) * t118 + pkin(7) * (-t267 * t79 + t270 * t80)) * t262, (t41 + pkin(1) * (t267 * t84 + t270 * t83)) * t264 + (t267 * (-qJ(3) * t83 - t261 * t47 + t263 * t68) + t270 * (-pkin(2) * t124 + qJ(3) * t84 + t261 * t68 + t263 * t47) - pkin(1) * t124 + pkin(7) * (-t267 * t83 + t270 * t84)) * t262, (t21 + pkin(1) * (t267 * t76 + t270 * t75)) * t264 + (t267 * (-qJ(3) * t75 + t263 * t28) + t270 * (qJ(3) * t76 + t261 * t28) + pkin(7) * (-t267 * t75 + t270 * t76) + (t267 * t345 + t270 * t297 - pkin(1)) * t107) * t262, (t16 + pkin(1) * (t26 * t270 + t267 * t27)) * t264 + ((t267 * (-pkin(8) * t263 + t345) + t270 * (-pkin(8) * t261 + t297) - pkin(1)) * t35 + (pkin(7) + qJ(3)) * (-t267 * t26 + t270 * t27)) * t262, t264 * t72 + (t267 * (t261 * t96 + t263 * t74) + t270 * (t261 * t74 - t263 * t96)) * t262, t264 * t45 + (t267 * (t261 * t60 + t263 * t46) + t270 * (t261 * t46 - t263 * t60)) * t262, t264 * t54 + (t267 * (t261 * t87 + t263 * t56) + t270 * (t261 * t56 - t263 * t87)) * t262, t264 * t71 + (t267 * (-t261 * t94 + t263 * t73) + t270 * (t261 * t73 + t263 * t94)) * t262, t264 * t55 + (t267 * (t261 * t88 + t263 * t57) + t270 * (t261 * t57 - t263 * t88)) * t262, t264 * t104 + (t267 * (t263 * t105 + t261 * t122) + t270 * (t261 * t105 - t263 * t122)) * t262, (t7 + pkin(1) * (t267 * t34 + t270 * t33)) * t264 + (t267 * (-qJ(3) * t33 + t263 * t11 - t261 * t19) + t270 * (-pkin(2) * t50 + qJ(3) * t34 + t261 * t11 + t263 * t19) - pkin(1) * t50 + pkin(7) * (-t267 * t33 + t270 * t34)) * t262, (t8 + pkin(1) * (t267 * t40 + t270 * t39)) * t264 + (t267 * (-qJ(3) * t39 + t263 * t12 - t261 * t20) + t270 * (-pkin(2) * t52 + qJ(3) * t40 + t261 * t12 + t263 * t20) - pkin(1) * t52 + pkin(7) * (-t267 * t39 + t270 * t40)) * t262, (t4 + pkin(1) * (t24 * t270 + t25 * t267)) * t264 + (t267 * (-qJ(3) * t24 - t261 * t10 + t263 * t9) + t270 * (-pkin(2) * t42 + qJ(3) * t25 + t263 * t10 + t261 * t9) - pkin(1) * t42 + pkin(7) * (-t267 * t24 + t270 * t25)) * t262, (t1 + pkin(1) * (t267 * t6 + t270 * t5)) * t264 + (t267 * (-qJ(3) * t5 + t263 * t2 - t261 * t3) + t270 * (-pkin(2) * t13 + qJ(3) * t6 + t261 * t2 + t263 * t3) - pkin(1) * t13 + pkin(7) * (-t267 * t5 + t270 * t6)) * t262; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t247, t237, t209, t247, t210, t254, -t188, -t189, 0, 0, t199, t197, t178, -t199, t282, t254, t85, t86, t346, t349, t134, t106, t127, t132, t128, t147, t38, t41, t21, t16, t72, t45, t54, t71, t55, t104, t7, t8, t4, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t173, t354, t179, -t169, 0, 0, 0, 0, 0, 0, t118, t124, t107, t35, 0, 0, 0, 0, 0, 0, t50, t52, t42, t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t172, t171, t140, -t172, -t136, t198, -t65, -t66, 0, 0, t96, t60, t87, -t94, t88, t122, t281, t278, t276, t287; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t146, t145, t102, -t146, -t98, t165, -t30, -t31, 0, 0;];
tauJ_reg = t29;
