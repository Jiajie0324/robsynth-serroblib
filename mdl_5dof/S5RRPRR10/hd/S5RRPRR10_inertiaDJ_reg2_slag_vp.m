% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S5RRPRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% MMD_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:28
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S5RRPRR10_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR10_inertiaDJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR10_inertiaDJ_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5RRPRR10_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:26:40
% EndTime: 2019-12-31 20:26:49
% DurationCPUTime: 2.83s
% Computational Cost: add. (4681->279), mult. (13154->543), div. (0->0), fcn. (12785->10), ass. (0->162)
t78 = sin(qJ(4));
t195 = -0.4e1 * t78;
t168 = cos(pkin(10));
t76 = sin(pkin(5));
t165 = qJD(3) * t76;
t82 = cos(qJ(2));
t169 = cos(pkin(5));
t134 = pkin(1) * t169;
t123 = t82 * t134;
t174 = pkin(7) + qJ(3);
t133 = t76 * t174;
t79 = sin(qJ(2));
t97 = -t79 * t133 + t123;
t191 = t97 * qJD(2) + t82 * t165;
t75 = sin(pkin(10));
t124 = t79 * t134;
t89 = -t79 * t165 + (-t82 * t133 - t124) * qJD(2);
t19 = t168 * t191 + t75 * t89;
t181 = t76 * t82;
t122 = t168 * t181;
t182 = t76 * t79;
t48 = t75 * t182 - t122;
t49 = (t168 * t79 + t75 * t82) * t76;
t60 = (-pkin(2) * t82 - pkin(1)) * t76;
t96 = t48 * pkin(3) - t49 * pkin(8) + t60;
t194 = -qJD(4) * t96 - t19;
t47 = qJD(2) * t49;
t167 = qJD(2) * t79;
t139 = t76 * t167;
t129 = pkin(2) * t139;
t46 = -qJD(2) * t122 + t75 * t139;
t90 = t169 * pkin(2) + t97;
t98 = t174 * t181 + t124;
t30 = t168 * t98 + t75 * t90;
t87 = t169 * pkin(8) + t30;
t192 = t47 * pkin(3) + t46 * pkin(8) - qJD(4) * t87 + t129;
t81 = cos(qJ(4));
t7 = -t192 * t78 + t194 * t81;
t29 = t168 * t90 - t75 * t98;
t22 = -t169 * pkin(3) - t29;
t40 = -t169 * t81 + t78 * t49;
t41 = t169 * t78 + t49 * t81;
t85 = t40 * pkin(4) - t41 * pkin(9) + t22;
t193 = -t47 * pkin(9) - qJD(5) * t85 + t7;
t77 = sin(qJ(5));
t71 = t77 ^ 2;
t80 = cos(qJ(5));
t73 = t80 ^ 2;
t131 = qJD(5) * (t71 - t73);
t161 = qJD(4) * t81;
t135 = t80 * t161;
t159 = qJD(5) * t77;
t104 = -t78 * t159 + t135;
t177 = t78 * t80;
t27 = qJD(4) * t41 - t46 * t78;
t190 = -t104 * t40 - t27 * t177;
t189 = pkin(4) * t78;
t188 = pkin(9) * t81;
t163 = qJD(4) * t78;
t28 = -t49 * t163 + (t169 * qJD(4) - t46) * t81;
t33 = t41 * t80 + t48 * t77;
t11 = t33 * qJD(5) + t28 * t77 - t47 * t80;
t187 = t11 * t80;
t12 = t47 * t77 - t41 * t159 + (qJD(5) * t48 + t28) * t80;
t186 = t12 * t77;
t185 = t27 * t81;
t184 = t28 * t78;
t68 = pkin(2) * t75 + pkin(8);
t183 = t48 * t68;
t180 = t77 * t68;
t179 = t77 * t78;
t178 = t78 * t47;
t176 = t80 * t81;
t175 = t81 * t47;
t32 = t41 * t77 - t48 * t80;
t173 = -t11 * t177 - t32 * t135;
t17 = t78 * t96 + t81 * t87;
t172 = -t40 * t161 - t78 * t27;
t72 = t78 ^ 2;
t170 = -t81 ^ 2 + t72;
t166 = qJD(2) * t82;
t164 = qJD(4) * t32;
t162 = qJD(4) * t80;
t160 = qJD(5) * t32;
t158 = qJD(5) * t80;
t157 = qJD(5) * t81;
t156 = 0.2e1 * t40 * t27;
t155 = 0.2e1 * t48 * t47;
t154 = -0.2e1 * pkin(4) * qJD(5);
t153 = -0.2e1 * t169;
t151 = t81 * t180;
t150 = t68 * t176;
t69 = -t168 * pkin(2) - pkin(3);
t149 = 0.2e1 * qJD(4) * t69;
t70 = t76 ^ 2;
t148 = t70 * t166;
t147 = t33 * t161;
t146 = qJD(4) * t40 * t77;
t145 = t71 * t161;
t144 = t68 * t161;
t143 = qJD(5) * t68 * t72;
t142 = t77 * t157;
t141 = t78 * t158;
t140 = t80 * t157;
t137 = t77 * t158;
t136 = t78 * t161;
t132 = -t12 * t81 + t33 * t163;
t130 = t170 * qJD(4);
t128 = t77 * t135;
t127 = t33 * t141;
t126 = t72 * t137;
t125 = t79 * t148;
t121 = -t81 * pkin(4) - t78 * pkin(9);
t120 = -t188 + t189;
t14 = pkin(9) * t48 + t17;
t5 = -t77 * t14 + t80 * t85;
t6 = t80 * t14 + t77 * t85;
t119 = -t5 * t80 - t6 * t77;
t118 = t5 * t77 - t6 * t80;
t8 = t192 * t81 + t194 * t78;
t117 = -t7 * t81 - t78 * t8;
t116 = qJD(2) * t76 * t169;
t16 = -t78 * t87 + t81 * t96;
t115 = -t16 * t81 - t17 * t78;
t99 = -t121 - t69;
t95 = t80 * t99;
t38 = -t95 - t151;
t39 = -t77 * t99 + t150;
t114 = -t38 * t80 - t39 * t77;
t113 = t38 * t77 - t39 * t80;
t13 = -t48 * pkin(4) - t16;
t4 = -t47 * pkin(4) - t8;
t112 = t13 * t158 + t4 * t77;
t111 = t13 * t159 - t4 * t80;
t110 = t120 * t77;
t109 = t40 * t163 - t185;
t108 = -t41 * t163 + t28 * t81;
t107 = t48 * t161 + t178;
t106 = t40 * t158 + t27 * t77;
t105 = t40 * t159 - t27 * t80;
t54 = t78 * t162 + t142;
t103 = t77 * t161 + t141;
t102 = -pkin(7) * t181 - t124;
t101 = pkin(7) * t182 - t123;
t18 = -t168 * t89 + t191 * t75;
t88 = t27 * pkin(4) - t28 * pkin(9) + t18;
t1 = t14 * t159 + t193 * t80 - t77 * t88;
t2 = -t14 * t158 + t193 * t77 + t80 * t88;
t92 = t119 * qJD(5) - t1 * t80 - t2 * t77;
t23 = -qJD(4) * t110 + qJD(5) * t95 + t54 * t68;
t24 = -t39 * qJD(5) + (t80 * t120 + t68 * t179) * qJD(4);
t91 = t114 * qJD(5) - t23 * t80 - t24 * t77;
t66 = t73 * t161;
t65 = -0.2e1 * t136;
t63 = t73 * t136;
t62 = t71 * t136;
t56 = t77 * t163 - t140;
t52 = t102 * qJD(2);
t51 = t101 * qJD(2);
t42 = t78 * t131 - t128;
t34 = -t48 * t163 + t175;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t125, 0.2e1 * (-t79 ^ 2 + t82 ^ 2) * t70 * qJD(2), 0.2e1 * t82 * t116, -0.2e1 * t125, -0.2e1 * t79 * t116, 0, -0.2e1 * t70 * pkin(1) * t167 + 0.2e1 * t52 * t169, -0.2e1 * pkin(1) * t148 + 0.2e1 * t51 * t169, 0.2e1 * (-t51 * t82 - t52 * t79 + (t101 * t82 + t102 * t79) * qJD(2)) * t76, -0.2e1 * t101 * t52 + 0.2e1 * t102 * t51, -0.2e1 * t49 * t46, 0.2e1 * t46 * t48 - 0.2e1 * t47 * t49, t46 * t153, t155, t47 * t153, 0, 0.2e1 * t48 * t129 - 0.2e1 * t18 * t169 + 0.2e1 * t60 * t47, 0.2e1 * t49 * t129 - 0.2e1 * t19 * t169 - 0.2e1 * t60 * t46, 0.2e1 * t18 * t49 - 0.2e1 * t19 * t48 + 0.2e1 * t29 * t46 - 0.2e1 * t30 * t47, 0.2e1 * t60 * t129 - 0.2e1 * t18 * t29 + 0.2e1 * t19 * t30, 0.2e1 * t41 * t28, -0.2e1 * t27 * t41 - 0.2e1 * t28 * t40, 0.2e1 * t28 * t48 + 0.2e1 * t41 * t47, t156, -0.2e1 * t27 * t48 - 0.2e1 * t40 * t47, t155, 0.2e1 * t16 * t47 + 0.2e1 * t18 * t40 + 0.2e1 * t22 * t27 + 0.2e1 * t48 * t8, -0.2e1 * t17 * t47 + 0.2e1 * t18 * t41 + 0.2e1 * t22 * t28 + 0.2e1 * t48 * t7, -0.2e1 * t16 * t28 - 0.2e1 * t17 * t27 + 0.2e1 * t40 * t7 - 0.2e1 * t41 * t8, 0.2e1 * t16 * t8 - 0.2e1 * t17 * t7 + 0.2e1 * t18 * t22, 0.2e1 * t33 * t12, -0.2e1 * t11 * t33 - 0.2e1 * t12 * t32, 0.2e1 * t12 * t40 + 0.2e1 * t27 * t33, 0.2e1 * t32 * t11, -0.2e1 * t11 * t40 - 0.2e1 * t27 * t32, t156, 0.2e1 * t11 * t13 + 0.2e1 * t2 * t40 + 0.2e1 * t27 * t5 + 0.2e1 * t32 * t4, 0.2e1 * t1 * t40 + 0.2e1 * t12 * t13 - 0.2e1 * t27 * t6 + 0.2e1 * t33 * t4, 0.2e1 * t1 * t32 - 0.2e1 * t11 * t6 - 0.2e1 * t12 * t5 - 0.2e1 * t2 * t33, -0.2e1 * t1 * t6 + 0.2e1 * t13 * t4 + 0.2e1 * t2 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76 * t166, 0, -t139, 0, t52, t51, 0, 0, 0, 0, -t46, 0, -t47, 0, -t18, -t19, (t168 * t46 - t47 * t75) * pkin(2), (-t168 * t18 + t19 * t75) * pkin(2), t41 * t161 + t184, t108 + t172, t107, t109, t34, 0, -t68 * t178 - t18 * t81 + t27 * t69 + (-t81 * t183 + t22 * t78) * qJD(4), -t68 * t175 + t18 * t78 + t28 * t69 + (t78 * t183 + t22 * t81) * qJD(4), (t184 - t185) * t68 + ((t40 * t78 + t41 * t81) * t68 + t115) * qJD(4) + t117, t18 * t69 + (t115 * qJD(4) + t117) * t68, t104 * t33 + t12 * t177, -t127 + (-t147 + (-t12 + t160) * t78) * t77 + t173, t132 - t190, t103 * t32 + t11 * t179, (t11 - t146) * t81 + (-t106 - t164) * t78, t109, t24 * t40 + t27 * t38 + (-t2 + (t13 * t77 + t32 * t68) * qJD(4)) * t81 + (qJD(4) * t5 + t11 * t68 + t112) * t78, t23 * t40 - t27 * t39 + (-t1 + (t13 * t80 + t33 * t68) * qJD(4)) * t81 + (-qJD(4) * t6 + t12 * t68 - t111) * t78, -t11 * t39 - t12 * t38 + t23 * t32 - t24 * t33 + t119 * t161 + (qJD(5) * t118 + t1 * t77 - t2 * t80) * t78, -t1 * t39 + t2 * t38 - t23 * t6 + t24 * t5 + (t13 * t161 + t4 * t78) * t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t136, -0.2e1 * t130, 0, t65, 0, 0, t78 * t149, t81 * t149, 0, 0, 0.2e1 * t63 - 0.2e1 * t126, t128 * t195 + 0.2e1 * t131 * t72, 0.2e1 * t142 * t78 + 0.2e1 * t162 * t170, 0.2e1 * t62 + 0.2e1 * t126, -0.2e1 * t130 * t77 + 0.2e1 * t140 * t78, t65, 0.2e1 * t80 * t143 - 0.2e1 * t24 * t81 + 0.2e1 * (t38 + 0.2e1 * t151) * t163, -0.2e1 * t77 * t143 - 0.2e1 * t23 * t81 + 0.2e1 * (-t39 + 0.2e1 * t150) * t163, 0.2e1 * t114 * t161 + 0.2e1 * (qJD(5) * t113 + t23 * t77 - t24 * t80) * t78, 0.2e1 * t136 * t68 ^ 2 - 0.2e1 * t23 * t39 + 0.2e1 * t24 * t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, -t46, 0, t129, 0, 0, 0, 0, 0, 0, t34, -t107, -t108 + t172, -t7 * t78 + t8 * t81 + (-t16 * t78 + t17 * t81) * qJD(4), 0, 0, 0, 0, 0, 0, (-t11 - t146) * t81 + (-t106 + t164) * t78, t132 + t190, t127 + (t147 + (t12 + t160) * t78) * t77 + t173, (-qJD(4) * t118 - t4) * t81 + (qJD(4) * t13 + t92) * t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t91 * t78 + (-t113 * t81 + t170 * t68) * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t62 + 0.2e1 * t63 - 0.2e1 * t136; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, 0, -t27, t47, t8, t7, 0, 0, t33 * t158 + t186, -t11 * t77 + t12 * t80 + (-t32 * t80 - t33 * t77) * qJD(5), t106, t159 * t32 - t187, -t105, 0, -pkin(4) * t11 - pkin(9) * t106 + t111, -pkin(4) * t12 + pkin(9) * t105 + t112, (-t187 + t186 + (t32 * t77 + t33 * t80) * qJD(5)) * pkin(9) + t92, -pkin(4) * t4 + pkin(9) * t92; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t161, 0, -t163, 0, -t144, t68 * t163, 0, 0, -t42, t137 * t195 - t145 + t66, t56, t42, t54, 0, (pkin(9) * t176 + (-t80 * pkin(4) + t180) * t78) * qJD(5) + (t121 * t77 - t150) * qJD(4), (t177 * t68 + t110) * qJD(5) + (t121 * t80 + t151) * qJD(4), t91, -pkin(4) * t144 + pkin(9) * t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t163, -t161, 0, 0, 0, 0, 0, 0, 0, 0, -t54, t56, t66 + t145, (-t189 + (t71 + t73) * t188) * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t137, -0.2e1 * t131, 0, -0.2e1 * t137, 0, 0, t77 * t154, t80 * t154, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12, 0, -t11, t27, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104, 0, -t103, t163, t24, t23, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t103, -t104, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t158, 0, -t159, 0, -pkin(9) * t158, pkin(9) * t159, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t3;
