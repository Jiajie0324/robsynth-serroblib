% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:26
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRRR8_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR8_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR8_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR8_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR8_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRR8_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:26:04
% EndTime: 2019-12-31 22:26:25
% DurationCPUTime: 16.68s
% Computational Cost: add. (100992->674), mult. (204209->1033), div. (0->0), fcn. (147734->10), ass. (0->466)
t793 = sin(qJ(5));
t795 = sin(qJ(3));
t796 = sin(qJ(2));
t800 = cos(qJ(3));
t801 = cos(qJ(2));
t754 = (t795 * t801 + t796 * t800) * qJD(1);
t790 = qJD(2) + qJD(3);
t794 = sin(qJ(4));
t799 = cos(qJ(4));
t724 = t794 * t754 - t799 * t790;
t726 = t799 * t754 + t794 * t790;
t798 = cos(qJ(5));
t676 = t798 * t724 + t793 * t726;
t678 = -t793 * t724 + t798 * t726;
t632 = t678 * t676;
t834 = qJD(1) * qJD(2);
t820 = t801 * t834;
t833 = t796 * qJDD(1);
t762 = t820 + t833;
t786 = t801 * qJDD(1);
t821 = t796 * t834;
t763 = t786 - t821;
t817 = t795 * t762 - t800 * t763;
t693 = -t754 * qJD(3) - t817;
t690 = qJDD(4) - t693;
t809 = qJDD(5) + t690;
t876 = -t632 + t809;
t883 = t793 * t876;
t687 = t726 * t724;
t874 = -t687 + t690;
t882 = t794 * t874;
t838 = qJD(1) * t796;
t752 = -t800 * t801 * qJD(1) + t795 * t838;
t715 = t754 * t752;
t830 = qJDD(2) + qJDD(3);
t873 = -t715 + t830;
t881 = t795 * t873;
t880 = t798 * t876;
t879 = t799 * t874;
t878 = t800 * t873;
t743 = t790 * t752;
t811 = t752 * qJD(3) - t800 * t762 - t795 * t763;
t877 = t743 + t811;
t748 = qJD(4) + t752;
t746 = qJD(5) + t748;
t652 = t746 * t676;
t818 = -t794 * t811 - t799 * t830;
t645 = -t726 * qJD(4) - t818;
t646 = -t724 * qJD(4) + t794 * t830 - t799 * t811;
t810 = t676 * qJD(5) - t793 * t645 - t798 * t646;
t875 = -t652 - t810;
t704 = t748 * t724;
t628 = -t704 - t646;
t627 = -t704 + t646;
t819 = -t798 * t645 + t793 * t646;
t540 = (qJD(5) - t746) * t678 + t819;
t624 = (qJD(4) - t748) * t726 + t818;
t662 = (qJD(3) - t790) * t754 + t817;
t792 = t801 ^ 2;
t804 = qJD(1) ^ 2;
t797 = sin(qJ(1));
t802 = cos(qJ(1));
t772 = t797 * g(1) - t802 * g(2);
t812 = qJDD(1) * pkin(1) + t772;
t813 = qJD(2) * pkin(2) - pkin(7) * t838;
t696 = t763 * pkin(2) + (pkin(7) * t792 + pkin(6)) * t804 - t813 * t838 + t812;
t674 = t676 ^ 2;
t675 = t678 ^ 2;
t871 = t724 ^ 2;
t722 = t726 ^ 2;
t744 = t746 ^ 2;
t747 = t748 ^ 2;
t750 = t752 ^ 2;
t751 = t754 ^ 2;
t870 = t790 ^ 2;
t869 = pkin(3) * t795;
t868 = t746 * t793;
t867 = t746 * t798;
t866 = t748 * t794;
t865 = t748 * t799;
t864 = t790 * t795;
t863 = t790 * t800;
t791 = t796 ^ 2;
t862 = t791 * t804;
t788 = t792 * t804;
t773 = t802 * g(1) + t797 * g(2);
t807 = -t804 * pkin(1) + qJDD(1) * pkin(6) - t773;
t737 = -t796 * g(3) + t801 * t807;
t686 = -pkin(2) * t788 + t763 * pkin(7) - qJD(2) * t813 + t737;
t806 = t796 * t807;
t850 = t796 * t804;
t805 = -t806 - t762 * pkin(7) + qJDD(2) * pkin(2) + (pkin(2) * t850 + pkin(7) * t834 - g(3)) * t801;
t634 = t795 * t686 - t800 * t805;
t713 = t752 * pkin(3) - t754 * pkin(8);
t591 = -t830 * pkin(3) - t870 * pkin(8) + t754 * t713 + t634;
t697 = t748 * pkin(4) - t726 * pkin(9);
t522 = -t645 * pkin(4) - t871 * pkin(9) + t726 * t697 + t591;
t861 = t793 * t522;
t596 = t632 + t809;
t860 = t793 * t596;
t586 = t877 * pkin(8) + (t790 * t754 - t693) * pkin(3) - t696;
t635 = t800 * t686 + t795 * t805;
t592 = -t870 * pkin(3) + pkin(8) * t830 - t752 * t713 + t635;
t520 = -t799 * t586 + t794 * t592;
t494 = pkin(4) * t874 + t628 * pkin(9) - t520;
t521 = t794 * t586 + t799 * t592;
t501 = -t871 * pkin(4) + t645 * pkin(9) - t748 * t697 + t521;
t442 = -t798 * t494 + t793 * t501;
t443 = t793 * t494 + t798 * t501;
t408 = -t798 * t442 + t793 * t443;
t859 = t794 * t408;
t858 = t794 * t591;
t637 = t687 + t690;
t857 = t794 * t637;
t856 = t795 * t696;
t711 = t715 + t830;
t855 = t795 * t711;
t574 = -t800 * t634 + t795 * t635;
t854 = t796 * t574;
t755 = t804 * pkin(6) + t812;
t853 = t796 * t755;
t779 = t801 * t850;
t770 = qJDD(2) + t779;
t852 = t796 * t770;
t771 = qJDD(2) - t779;
t851 = t796 * t771;
t849 = t798 * t522;
t848 = t798 * t596;
t847 = t799 * t408;
t846 = t799 * t591;
t845 = t799 * t637;
t844 = t800 * t696;
t843 = t800 * t711;
t842 = t801 * t574;
t841 = t801 * t755;
t840 = t801 * t771;
t839 = t791 + t792;
t832 = t797 * qJDD(1);
t831 = t802 * qJDD(1);
t829 = t795 * t632;
t828 = t795 * t687;
t827 = t797 * t715;
t826 = t800 * t632;
t825 = t800 * t687;
t824 = t802 * t715;
t823 = -pkin(3) * t800 - pkin(2);
t409 = t793 * t442 + t798 * t443;
t575 = t795 * t634 + t800 * t635;
t736 = t801 * g(3) + t806;
t685 = t796 * t736 + t801 * t737;
t728 = -t797 * t772 - t802 * t773;
t816 = t797 * t779;
t815 = t802 * t779;
t767 = -t797 * t804 + t831;
t814 = -pkin(5) * t767 - t797 * g(3);
t470 = -t799 * t520 + t794 * t521;
t471 = t794 * t520 + t799 * t521;
t684 = t801 * t736 - t796 * t737;
t727 = t802 * t772 - t797 * t773;
t803 = qJD(2) ^ 2;
t777 = -t788 - t803;
t776 = t788 - t803;
t775 = -t803 - t862;
t774 = t803 - t862;
t769 = t788 - t862;
t768 = t788 + t862;
t766 = t802 * t804 + t832;
t765 = t839 * qJDD(1);
t764 = t786 - 0.2e1 * t821;
t761 = 0.2e1 * t820 + t833;
t759 = t801 * t770;
t758 = t839 * t834;
t749 = -pkin(5) * t766 + t802 * g(3);
t741 = -t751 + t870;
t740 = t750 - t870;
t739 = t801 * t762 - t791 * t834;
t738 = -t796 * t763 - t792 * t834;
t735 = -t751 - t870;
t734 = -t796 * t775 - t840;
t733 = -t796 * t774 + t759;
t732 = t801 * t777 - t852;
t731 = t801 * t776 - t851;
t730 = t801 * t775 - t851;
t729 = t796 * t777 + t759;
t720 = t802 * t765 - t797 * t768;
t719 = t797 * t765 + t802 * t768;
t716 = -t796 * t761 + t801 * t764;
t714 = -t751 + t750;
t709 = -t870 - t750;
t708 = t802 * t734 + t797 * t761;
t707 = t802 * t732 - t797 * t764;
t706 = t797 * t734 - t802 * t761;
t705 = t797 * t732 + t802 * t764;
t703 = -t722 + t747;
t702 = -t747 + t871;
t701 = (-t752 * t800 + t754 * t795) * t790;
t700 = (-t752 * t795 - t754 * t800) * t790;
t699 = -pkin(6) * t730 - t841;
t698 = -pkin(6) * t729 - t853;
t695 = -t750 - t751;
t692 = -pkin(1) * t730 + t737;
t691 = -pkin(1) * t729 + t736;
t682 = -t722 + t871;
t673 = -t722 - t747;
t672 = t800 * t740 - t855;
t671 = -t795 * t741 + t878;
t670 = t795 * t740 + t843;
t669 = t800 * t741 + t881;
t668 = -t795 * t735 - t843;
t667 = t800 * t735 - t855;
t666 = -t743 + t811;
t661 = (qJD(3) + t790) * t754 + t817;
t660 = -t747 - t871;
t659 = -t754 * t864 - t800 * t811;
t658 = t754 * t863 - t795 * t811;
t657 = -t795 * t693 + t752 * t863;
t656 = t800 * t693 + t752 * t864;
t655 = t802 * t685 - t797 * t755;
t654 = t797 * t685 + t802 * t755;
t651 = t800 * t709 - t881;
t650 = t795 * t709 + t878;
t649 = -t675 + t744;
t648 = t674 - t744;
t647 = t722 + t871;
t642 = (-t724 * t799 + t726 * t794) * t748;
t641 = (t724 * t794 + t726 * t799) * t748;
t640 = -t796 * t700 + t801 * t701;
t639 = -t675 - t744;
t631 = -pkin(7) * t667 - t844;
t630 = -t675 + t674;
t625 = (-qJD(4) - t748) * t726 - t818;
t623 = -pkin(7) * t650 - t856;
t622 = -t796 * t670 + t801 * t672;
t621 = -t796 * t669 + t801 * t671;
t620 = t799 * t646 - t726 * t866;
t619 = -t794 * t646 - t726 * t865;
t618 = -t794 * t645 + t724 * t865;
t617 = -t799 * t645 - t724 * t866;
t616 = -t744 - t674;
t615 = -t796 * t667 + t801 * t668;
t614 = t801 * t667 + t796 * t668;
t613 = -t662 * t800 - t795 * t666;
t612 = -t800 * t661 + t795 * t877;
t611 = -t662 * t795 + t800 * t666;
t610 = -t795 * t661 - t800 * t877;
t609 = t800 * t642 + t795 * t690;
t608 = t795 * t642 - t800 * t690;
t607 = t799 * t702 - t857;
t606 = -t794 * t703 + t879;
t605 = -t794 * t702 - t845;
t604 = -t799 * t703 - t882;
t603 = -t796 * t658 + t801 * t659;
t602 = -t796 * t656 + t801 * t657;
t601 = (-t676 * t798 + t678 * t793) * t746;
t600 = (-t676 * t793 - t678 * t798) * t746;
t599 = -t796 * t650 + t801 * t651;
t598 = t801 * t650 + t796 * t651;
t594 = -t794 * t673 - t845;
t593 = t799 * t673 - t857;
t589 = -t674 - t675;
t588 = t799 * t660 - t882;
t587 = t794 * t660 + t879;
t585 = pkin(2) * t877 + pkin(7) * t668 - t856;
t582 = t800 * t620 + t828;
t581 = t800 * t618 - t828;
t580 = t795 * t620 - t825;
t579 = t795 * t618 + t825;
t578 = -pkin(2) * t661 + pkin(7) * t651 + t844;
t577 = t802 * t615 - t797 * t877;
t576 = t797 * t615 + t802 * t877;
t573 = t802 * t599 + t797 * t661;
t572 = t797 * t599 - t802 * t661;
t570 = -t678 * qJD(5) - t819;
t569 = t798 * t648 - t860;
t568 = -t793 * t649 + t880;
t567 = t793 * t648 + t848;
t566 = t798 * t649 + t883;
t565 = -t624 * t799 - t794 * t628;
t564 = t799 * t625 - t794 * t627;
t563 = -t624 * t794 + t799 * t628;
t562 = -t794 * t625 - t799 * t627;
t561 = -t793 * t639 - t848;
t560 = t798 * t639 - t860;
t559 = pkin(2) * t696 + pkin(7) * t575;
t558 = -t796 * t611 + t801 * t613;
t557 = -t796 * t610 + t801 * t612;
t556 = t801 * t611 + t796 * t613;
t555 = t800 * t607 - t795 * t624;
t554 = t800 * t606 - t795 * t628;
t553 = t795 * t607 + t800 * t624;
t552 = t795 * t606 + t800 * t628;
t551 = -t796 * t608 + t801 * t609;
t550 = t800 * t594 + t627 * t795;
t549 = t795 * t594 - t627 * t800;
t548 = t798 * t616 - t883;
t547 = t793 * t616 + t880;
t546 = t800 * t588 - t795 * t625;
t545 = t795 * t588 + t800 * t625;
t544 = -t652 + t810;
t539 = (qJD(5) + t746) * t678 + t819;
t538 = -pkin(1) * t614 - pkin(2) * t667 + t635;
t537 = -t678 * t868 - t798 * t810;
t536 = t678 * t867 - t793 * t810;
t535 = -t793 * t570 + t676 * t867;
t534 = t798 * t570 + t676 * t868;
t533 = t800 * t564 - t795 * t682;
t532 = t795 * t564 + t800 * t682;
t531 = -t794 * t600 + t799 * t601;
t530 = -t799 * t600 - t794 * t601;
t529 = t802 * t558 + t797 * t695;
t528 = t797 * t558 - t802 * t695;
t527 = -pkin(8) * t593 + t846;
t526 = t800 * t565 - t795 * t647;
t525 = t795 * t565 + t800 * t647;
t524 = -pkin(1) * t598 - pkin(2) * t650 + t634;
t523 = -pkin(8) * t587 + t858;
t519 = -pkin(7) * t611 - t574;
t518 = t800 * t531 + t795 * t809;
t517 = t795 * t531 - t800 * t809;
t516 = -t796 * t580 + t801 * t582;
t515 = -t796 * t579 + t801 * t581;
t514 = -pkin(2) * t695 + pkin(7) * t613 + t575;
t513 = -pkin(1) * t556 - pkin(2) * t611;
t512 = -pkin(6) * t614 - t796 * t585 + t801 * t631;
t511 = t801 * t575 - t854;
t510 = t796 * t575 + t842;
t509 = -pkin(6) * t598 - t796 * t578 + t801 * t623;
t508 = -t794 * t567 + t799 * t569;
t507 = -t794 * t566 + t799 * t568;
t506 = -t799 * t567 - t794 * t569;
t505 = -t799 * t566 - t794 * t568;
t504 = t802 * t511 - t797 * t696;
t503 = t797 * t511 + t802 * t696;
t502 = -pkin(3) * t593 + t521;
t500 = -pkin(3) * t587 + t520;
t498 = -t794 * t560 + t799 * t561;
t497 = t799 * t560 + t794 * t561;
t496 = -t796 * t553 + t801 * t555;
t495 = -t796 * t552 + t801 * t554;
t491 = -t796 * t549 + t801 * t550;
t490 = t801 * t549 + t796 * t550;
t489 = -t794 * t547 + t799 * t548;
t488 = t799 * t547 + t794 * t548;
t487 = -t796 * t545 + t801 * t546;
t486 = t801 * t545 + t796 * t546;
t485 = -pkin(9) * t560 + t849;
t484 = -t540 * t798 - t793 * t544;
t483 = -t798 * t539 - t793 * t875;
t482 = -t540 * t793 + t798 * t544;
t481 = -t793 * t539 + t798 * t875;
t480 = -t794 * t536 + t799 * t537;
t479 = -t794 * t534 + t799 * t535;
t478 = -t799 * t536 - t794 * t537;
t477 = -t799 * t534 - t794 * t535;
t476 = -t796 * t532 + t801 * t533;
t475 = -pkin(9) * t547 + t861;
t474 = -t796 * t525 + t801 * t526;
t473 = t801 * t525 + t796 * t526;
t472 = -pkin(1) * t510 - pkin(2) * t574;
t469 = -t796 * t517 + t801 * t518;
t468 = t800 * t480 + t829;
t467 = t800 * t479 - t829;
t466 = t795 * t480 - t826;
t465 = t795 * t479 + t826;
t464 = t802 * t491 + t797 * t593;
t463 = t797 * t491 - t802 * t593;
t462 = t802 * t487 + t797 * t587;
t461 = t797 * t487 - t802 * t587;
t460 = t800 * t508 - t795 * t540;
t459 = t800 * t507 - t795 * t544;
t458 = t795 * t508 + t800 * t540;
t457 = t795 * t507 + t800 * t544;
t456 = t800 * t498 + t795 * t875;
t455 = t795 * t498 - t800 * t875;
t454 = t800 * t471 + t795 * t591;
t453 = t795 * t471 - t800 * t591;
t452 = t800 * t489 + t795 * t539;
t451 = t795 * t489 - t800 * t539;
t450 = -pkin(4) * t875 + pkin(9) * t561 + t861;
t449 = t802 * t474 + t797 * t563;
t448 = t797 * t474 - t802 * t563;
t447 = -pkin(4) * t539 + pkin(9) * t548 - t849;
t446 = -pkin(8) * t563 - t470;
t445 = -pkin(6) * t510 - pkin(7) * t842 - t796 * t559;
t444 = -pkin(6) * t556 - t796 * t514 + t801 * t519;
t440 = -pkin(7) * t549 - t795 * t502 + t800 * t527;
t439 = -pkin(7) * t545 - t795 * t500 + t800 * t523;
t438 = -t794 * t482 + t799 * t484;
t437 = -t794 * t481 + t799 * t483;
t436 = t799 * t482 + t794 * t484;
t435 = -t799 * t481 - t794 * t483;
t434 = -pkin(2) * t593 + pkin(7) * t550 + t800 * t502 + t795 * t527;
t433 = -pkin(1) * t490 - pkin(2) * t549 + pkin(3) * t627 - pkin(8) * t594 - t858;
t432 = -pkin(2) * t587 + pkin(7) * t546 + t800 * t500 + t795 * t523;
t431 = t800 * t437 - t795 * t630;
t430 = t795 * t437 + t800 * t630;
t429 = -pkin(1) * t486 - pkin(2) * t545 - pkin(3) * t625 - pkin(8) * t588 + t846;
t428 = t800 * t438 + t795 * t589;
t427 = t795 * t438 - t800 * t589;
t426 = -t796 * t466 + t801 * t468;
t425 = -t796 * t465 + t801 * t467;
t424 = -pkin(7) * t525 + t800 * t446 + t563 * t869;
t423 = -t796 * t458 + t801 * t460;
t422 = -t796 * t457 + t801 * t459;
t421 = -t796 * t455 + t801 * t456;
t420 = t801 * t455 + t796 * t456;
t419 = -t796 * t453 + t801 * t454;
t418 = t801 * t453 + t796 * t454;
t417 = pkin(7) * t526 + t795 * t446 + t563 * t823;
t416 = -t796 * t451 + t801 * t452;
t415 = t801 * t451 + t796 * t452;
t414 = -pkin(3) * t436 - pkin(4) * t482;
t413 = -pkin(3) * t497 - pkin(4) * t560 + t443;
t412 = -pkin(3) * t488 - pkin(4) * t547 + t442;
t411 = -pkin(1) * t473 - pkin(2) * t525 - pkin(3) * t647 - pkin(8) * t565 - t471;
t410 = -pkin(8) * t497 - t794 * t450 + t799 * t485;
t407 = t802 * t421 + t797 * t497;
t406 = t797 * t421 - t802 * t497;
t405 = -pkin(8) * t488 - t794 * t447 + t799 * t475;
t404 = -pkin(7) * t453 + (-pkin(8) * t800 + t869) * t470;
t403 = t802 * t416 + t797 * t488;
t402 = t797 * t416 - t802 * t488;
t401 = t802 * t419 + t797 * t470;
t400 = t797 * t419 - t802 * t470;
t399 = -pkin(4) * t522 + pkin(9) * t409;
t398 = -t796 * t430 + t801 * t431;
t397 = -pkin(9) * t482 - t408;
t396 = -t796 * t427 + t801 * t428;
t395 = t801 * t427 + t796 * t428;
t394 = -pkin(4) * t589 + pkin(9) * t484 + t409;
t393 = pkin(7) * t454 + (-pkin(8) * t795 + t823) * t470;
t392 = -pkin(6) * t490 - t796 * t434 + t801 * t440;
t391 = -pkin(6) * t486 - t796 * t432 + t801 * t439;
t390 = -pkin(1) * t418 - pkin(2) * t453 + pkin(3) * t591 - pkin(8) * t471;
t389 = -pkin(6) * t473 - t796 * t417 + t801 * t424;
t388 = t802 * t396 + t797 * t436;
t387 = t797 * t396 - t802 * t436;
t386 = t799 * t409 - t859;
t385 = t794 * t409 + t847;
t384 = t800 * t386 + t795 * t522;
t383 = t795 * t386 - t800 * t522;
t382 = -pkin(7) * t455 + t800 * t410 - t795 * t413;
t381 = -pkin(1) * t420 - pkin(2) * t455 + pkin(3) * t875 - pkin(8) * t498 - t799 * t450 - t794 * t485;
t380 = -pkin(7) * t451 + t800 * t405 - t795 * t412;
t379 = -pkin(1) * t415 - pkin(2) * t451 + pkin(3) * t539 - pkin(8) * t489 - t799 * t447 - t794 * t475;
t378 = -pkin(2) * t497 + pkin(7) * t456 + t795 * t410 + t800 * t413;
t377 = -pkin(2) * t488 + pkin(7) * t452 + t795 * t405 + t800 * t412;
t376 = -pkin(3) * t385 - pkin(4) * t408;
t375 = -pkin(8) * t436 - t794 * t394 + t799 * t397;
t374 = -pkin(6) * t418 - t796 * t393 + t801 * t404;
t373 = -pkin(8) * t385 - pkin(9) * t847 - t794 * t399;
t372 = -t796 * t383 + t801 * t384;
t371 = t801 * t383 + t796 * t384;
t370 = -pkin(7) * t427 + t800 * t375 - t795 * t414;
t369 = -pkin(1) * t395 - pkin(2) * t427 + pkin(3) * t589 - pkin(8) * t438 - t799 * t394 - t794 * t397;
t368 = -pkin(2) * t436 + pkin(7) * t428 + t795 * t375 + t800 * t414;
t367 = -pkin(6) * t420 - t796 * t378 + t801 * t382;
t366 = -pkin(6) * t415 - t796 * t377 + t801 * t380;
t365 = t802 * t372 + t797 * t385;
t364 = t797 * t372 - t802 * t385;
t363 = -pkin(7) * t383 + t800 * t373 - t795 * t376;
t362 = -pkin(1) * t371 - pkin(2) * t383 + pkin(3) * t522 - pkin(8) * t386 + pkin(9) * t859 - t799 * t399;
t361 = -pkin(6) * t395 - t796 * t368 + t801 * t370;
t360 = -pkin(2) * t385 + pkin(7) * t384 + t795 * t373 + t800 * t376;
t359 = -pkin(6) * t371 - t796 * t360 + t801 * t363;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t766, -t767, 0, t728, 0, 0, 0, 0, 0, 0, t707, t708, t720, t655, 0, 0, 0, 0, 0, 0, t573, t577, t529, t504, 0, 0, 0, 0, 0, 0, t462, t464, t449, t401, 0, 0, 0, 0, 0, 0, t403, t407, t388, t365; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t767, -t766, 0, t727, 0, 0, 0, 0, 0, 0, t705, t706, t719, t654, 0, 0, 0, 0, 0, 0, t572, t576, t528, t503, 0, 0, 0, 0, 0, 0, t461, t463, t448, t400, 0, 0, 0, 0, 0, 0, t402, t406, t387, t364; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t729, t730, 0, -t684, 0, 0, 0, 0, 0, 0, t598, t614, t556, t510, 0, 0, 0, 0, 0, 0, t486, t490, t473, t418, 0, 0, 0, 0, 0, 0, t415, t420, t395, t371; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t767, 0, -t766, 0, t814, -t749, -t727, -pkin(5) * t727, t802 * t739 - t816, t802 * t716 - t797 * t769, t802 * t733 + t796 * t832, t802 * t738 + t816, t802 * t731 + t786 * t797, t797 * qJDD(2) + t802 * t758, -pkin(5) * t705 - t797 * t691 + t802 * t698, -pkin(5) * t706 - t797 * t692 + t802 * t699, -pkin(5) * t719 + t802 * t684, -pkin(5) * t654 - (pkin(1) * t797 - pkin(6) * t802) * t684, t802 * t603 + t827, t802 * t557 - t797 * t714, t802 * t621 - t797 * t666, t802 * t602 - t827, t802 * t622 - t797 * t662, t802 * t640 + t797 * t830, -pkin(5) * t572 + t802 * t509 - t797 * t524, -pkin(5) * t576 + t802 * t512 - t797 * t538, -pkin(5) * t528 + t802 * t444 - t797 * t513, -pkin(5) * t503 + t802 * t445 - t797 * t472, t802 * t516 - t797 * t619, t802 * t476 - t797 * t562, t802 * t495 - t797 * t604, t802 * t515 - t797 * t617, t802 * t496 - t797 * t605, t802 * t551 - t797 * t641, -pkin(5) * t461 + t802 * t391 - t797 * t429, -pkin(5) * t463 + t802 * t392 - t797 * t433, -pkin(5) * t448 + t802 * t389 - t797 * t411, -pkin(5) * t400 + t802 * t374 - t797 * t390, t802 * t426 - t797 * t478, t802 * t398 - t797 * t435, t802 * t422 - t797 * t505, t802 * t425 - t797 * t477, t802 * t423 - t797 * t506, t802 * t469 - t797 * t530, -pkin(5) * t402 + t802 * t366 - t797 * t379, -pkin(5) * t406 + t802 * t367 - t797 * t381, -pkin(5) * t387 + t802 * t361 - t797 * t369, -pkin(5) * t364 + t802 * t359 - t797 * t362; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t766, 0, t767, 0, t749, t814, t728, pkin(5) * t728, t797 * t739 + t815, t797 * t716 + t802 * t769, t797 * t733 - t796 * t831, t797 * t738 - t815, t797 * t731 - t801 * t831, -t802 * qJDD(2) + t797 * t758, pkin(5) * t707 + t802 * t691 + t797 * t698, pkin(5) * t708 + t802 * t692 + t797 * t699, pkin(5) * t720 + t797 * t684, pkin(5) * t655 - (-pkin(1) * t802 - pkin(6) * t797) * t684, t797 * t603 - t824, t797 * t557 + t802 * t714, t797 * t621 + t802 * t666, t797 * t602 + t824, t797 * t622 + t802 * t662, t797 * t640 - t802 * t830, pkin(5) * t573 + t797 * t509 + t802 * t524, pkin(5) * t577 + t797 * t512 + t802 * t538, pkin(5) * t529 + t797 * t444 + t802 * t513, pkin(5) * t504 + t797 * t445 + t802 * t472, t797 * t516 + t802 * t619, t797 * t476 + t802 * t562, t797 * t495 + t802 * t604, t797 * t515 + t802 * t617, t797 * t496 + t802 * t605, t797 * t551 + t802 * t641, pkin(5) * t462 + t797 * t391 + t802 * t429, pkin(5) * t464 + t797 * t392 + t802 * t433, pkin(5) * t449 + t797 * t389 + t802 * t411, pkin(5) * t401 + t797 * t374 + t802 * t390, t797 * t426 + t802 * t478, t797 * t398 + t802 * t435, t797 * t422 + t802 * t505, t797 * t425 + t802 * t477, t797 * t423 + t802 * t506, t797 * t469 + t802 * t530, pkin(5) * t403 + t797 * t366 + t802 * t379, pkin(5) * t407 + t797 * t367 + t802 * t381, pkin(5) * t388 + t797 * t361 + t802 * t369, pkin(5) * t365 + t797 * t359 + t802 * t362; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t772, t773, 0, 0, (t762 + t820) * t796, t801 * t761 + t796 * t764, t801 * t774 + t852, (t763 - t821) * t801, t796 * t776 + t840, 0, pkin(1) * t764 + pkin(6) * t732 + t841, -pkin(1) * t761 + pkin(6) * t734 - t853, pkin(1) * t768 + pkin(6) * t765 + t685, pkin(1) * t755 + pkin(6) * t685, t801 * t658 + t796 * t659, t801 * t610 + t796 * t612, t801 * t669 + t796 * t671, t801 * t656 + t796 * t657, t801 * t670 + t796 * t672, t801 * t700 + t796 * t701, -pkin(1) * t661 + pkin(6) * t599 + t801 * t578 + t796 * t623, pkin(1) * t877 + pkin(6) * t615 + t801 * t585 + t796 * t631, -pkin(1) * t695 + pkin(6) * t558 + t801 * t514 + t796 * t519, pkin(1) * t696 + pkin(6) * t511 - pkin(7) * t854 + t801 * t559, t801 * t580 + t796 * t582, t801 * t532 + t796 * t533, t801 * t552 + t796 * t554, t801 * t579 + t796 * t581, t801 * t553 + t796 * t555, t801 * t608 + t796 * t609, -pkin(1) * t587 + pkin(6) * t487 + t801 * t432 + t796 * t439, -pkin(1) * t593 + pkin(6) * t491 + t801 * t434 + t796 * t440, -pkin(1) * t563 + pkin(6) * t474 + t801 * t417 + t796 * t424, -pkin(1) * t470 + pkin(6) * t419 + t801 * t393 + t796 * t404, t801 * t466 + t796 * t468, t801 * t430 + t796 * t431, t801 * t457 + t796 * t459, t801 * t465 + t796 * t467, t801 * t458 + t796 * t460, t801 * t517 + t796 * t518, -pkin(1) * t488 + pkin(6) * t416 + t801 * t377 + t796 * t380, -pkin(1) * t497 + pkin(6) * t421 + t801 * t378 + t796 * t382, -pkin(1) * t436 + pkin(6) * t396 + t801 * t368 + t796 * t370, -pkin(1) * t385 + pkin(6) * t372 + t801 * t360 + t796 * t363;];
tauB_reg = t1;
