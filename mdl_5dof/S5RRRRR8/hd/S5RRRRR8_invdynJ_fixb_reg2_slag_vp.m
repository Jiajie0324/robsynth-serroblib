% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S5RRRRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4,d5]';
% 
% Output:
% tau_reg [5x(5*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:26
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S5RRRRR8_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR8_invdynJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR8_invdynJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR8_invdynJ_fixb_reg2_slag_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR8_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRR8_invdynJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:25:53
% EndTime: 2019-12-31 22:26:06
% DurationCPUTime: 6.99s
% Computational Cost: add. (12474->592), mult. (27987->766), div. (0->0), fcn. (20131->14), ass. (0->294)
t260 = sin(qJ(4));
t425 = cos(qJ(3));
t334 = t425 * qJD(3);
t323 = pkin(2) * t334;
t266 = cos(qJ(2));
t340 = t425 * t266;
t232 = qJD(1) * t340;
t261 = sin(qJ(3));
t262 = sin(qJ(2));
t362 = qJD(1) * t262;
t339 = t261 * t362;
t183 = -t232 + t339;
t373 = t261 * t266;
t197 = t425 * t262 + t373;
t185 = t197 * qJD(1);
t132 = pkin(3) * t185 + pkin(8) * t183;
t118 = pkin(2) * t362 + t132;
t269 = -pkin(7) - pkin(6);
t216 = t269 * t266;
t201 = qJD(1) * t216;
t186 = t261 * t201;
t214 = t269 * t262;
t199 = qJD(1) * t214;
t140 = t425 * t199 + t186;
t265 = cos(qJ(4));
t78 = t265 * t118 - t140 * t260;
t446 = -t260 * t323 - t78;
t79 = t260 * t118 + t265 * t140;
t445 = -t265 * t323 + t79;
t254 = qJD(2) + qJD(3);
t153 = t185 * t260 - t265 * t254;
t155 = t185 * t265 + t254 * t260;
t259 = sin(qJ(5));
t264 = cos(qJ(5));
t305 = t153 * t259 - t264 * t155;
t92 = t264 * t153 + t155 * t259;
t411 = t92 * t305;
t424 = pkin(2) * t261;
t244 = pkin(8) + t424;
t410 = -pkin(9) - t244;
t328 = qJD(4) * t410;
t390 = t183 * t260;
t351 = pkin(9) * t390;
t444 = t260 * t328 - t351 - t445;
t389 = t183 * t265;
t318 = t185 * pkin(4) + pkin(9) * t389;
t443 = t265 * t328 - t318 + t446;
t268 = -pkin(9) - pkin(8);
t341 = qJD(4) * t268;
t405 = qJD(2) * pkin(2);
t189 = t199 + t405;
t135 = t425 * t189 + t186;
t81 = t260 * t132 + t265 * t135;
t442 = t260 * t341 - t351 - t81;
t80 = t265 * t132 - t135 * t260;
t441 = t265 * t341 - t318 - t80;
t196 = t259 * t265 + t260 * t264;
t352 = qJD(4) + qJD(5);
t143 = t352 * t196;
t440 = t196 * t183 + t143;
t380 = t259 * t260;
t194 = -t264 * t265 + t380;
t357 = qJD(5) * t264;
t359 = qJD(4) * t265;
t367 = t194 * t183 - t264 * t359 - t265 * t357 + t352 * t380;
t258 = qJ(2) + qJ(3);
t249 = sin(t258);
t267 = cos(qJ(1));
t384 = t249 * t267;
t263 = sin(qJ(1));
t385 = t249 * t263;
t439 = g(1) * t384 + g(2) * t385;
t251 = cos(t258);
t417 = g(3) * t251;
t438 = -t417 + t439;
t437 = t305 ^ 2 - t92 ^ 2;
t179 = qJD(4) + t183;
t173 = qJD(5) + t179;
t253 = qJDD(2) + qJDD(3);
t327 = qJDD(1) * t425;
t335 = t425 * qJD(2);
t356 = qJD(1) * qJD(2);
t333 = t262 * t356;
t365 = qJD(3) * t339 + t261 * t333;
t273 = t262 * t327 + (qJD(1) * (t335 + t334) + qJDD(1) * t261) * t266 - t365;
t360 = qJD(4) * t260;
t344 = t185 * t359 + t254 * t360 + t260 * t273;
t299 = t265 * t253 - t344;
t358 = qJD(5) * t259;
t74 = t185 * t360 - t260 * t253 - t254 * t359 - t265 * t273;
t25 = t153 * t357 + t155 * t358 - t259 * t299 + t264 * t74;
t436 = t173 * t92 - t25;
t257 = qJ(4) + qJ(5);
t248 = sin(t257);
t250 = cos(t257);
t382 = t251 * t263;
t164 = t248 * t267 - t250 * t382;
t381 = t251 * t267;
t166 = t248 * t263 + t250 * t381;
t241 = g(3) * t249;
t412 = t266 * pkin(2);
t247 = pkin(1) + t412;
t212 = t247 * qJD(1);
t116 = pkin(3) * t183 - pkin(8) * t185 - t212;
t187 = t425 * t201;
t136 = t261 * t189 - t187;
t120 = t254 * pkin(8) + t136;
t145 = t254 * t197;
t354 = t262 * qJDD(1);
t310 = t261 * t354 - t266 * t327;
t105 = qJD(1) * t145 + t310;
t237 = pkin(2) * t333;
t429 = -pkin(8) * t197 - t247;
t50 = t237 - (t232 * t254 - t365) * pkin(8) + t105 * pkin(3) + t429 * qJDD(1);
t332 = t266 * t356;
t150 = qJDD(2) * pkin(2) - t269 * (-t332 - t354);
t353 = t266 * qJDD(1);
t152 = t269 * (-t333 + t353);
t361 = qJD(3) * t261;
t322 = -t261 * t150 + t425 * t152 - t189 * t334 - t201 * t361;
t60 = pkin(8) * t253 - t322;
t15 = t116 * t359 - t120 * t360 + t260 * t50 + t265 * t60;
t12 = pkin(9) * t299 + t15;
t75 = t265 * t116 - t120 * t260;
t51 = -pkin(9) * t155 + t75;
t46 = pkin(4) * t179 + t51;
t76 = t116 * t260 + t120 * t265;
t52 = -pkin(9) * t153 + t76;
t104 = qJDD(4) + t105;
t48 = t265 * t50;
t16 = -qJD(4) * t76 - t260 * t60 + t48;
t9 = pkin(4) * t104 + pkin(9) * t74 + t16;
t3 = (qJD(5) * t46 + t12) * t264 + t259 * t9 - t52 * t358;
t119 = -t254 * pkin(3) - t135;
t87 = t153 * pkin(4) + t119;
t435 = g(1) * t166 - g(2) * t164 + t250 * t241 + t87 * t92 - t3;
t163 = t248 * t382 + t250 * t267;
t165 = -t248 * t381 + t250 * t263;
t402 = t264 * t52;
t21 = t259 * t46 + t402;
t4 = -qJD(5) * t21 - t12 * t259 + t264 * t9;
t434 = -g(1) * t165 + g(2) * t163 + t248 * t241 + t87 * t305 + t4;
t284 = qJD(5) * t305 + t259 * t74 + t264 * t299;
t433 = -t173 * t305 + t284;
t139 = t199 * t261 - t187;
t316 = pkin(2) * t361 - t139;
t374 = t261 * t262;
t195 = -t340 + t374;
t134 = pkin(3) * t195 + t429;
t159 = t261 * t214 - t425 * t216;
t151 = t265 * t159;
t89 = t260 * t134 + t151;
t432 = (t360 + t390) * pkin(4);
t431 = t425 * t214 + t261 * t216;
t413 = t265 * pkin(4);
t245 = pkin(3) + t413;
t430 = t251 * t245 - t249 * t268;
t314 = t251 * pkin(3) + t249 * pkin(8);
t320 = t266 * t335;
t144 = t254 * t374 - t266 * t334 - t320;
t370 = t265 * t144;
t295 = -t197 * t360 - t370;
t428 = -t260 * t75 + t265 * t76;
t313 = g(1) * t267 + g(2) * t263;
t369 = t265 * t267;
t377 = t260 * t263;
t174 = t251 * t377 + t369;
t372 = t263 * t265;
t376 = t260 * t267;
t176 = -t251 * t376 + t372;
t427 = -g(1) * t176 + g(2) * t174;
t217 = t267 * t247;
t419 = g(2) * t217;
t416 = g(3) * t260;
t415 = g(3) * t266;
t414 = t253 * pkin(3);
t190 = t410 * t260;
t252 = t265 * pkin(9);
t191 = t244 * t265 + t252;
t130 = t190 * t264 - t191 * t259;
t409 = qJD(5) * t130 + t259 * t443 + t444 * t264;
t131 = t190 * t259 + t191 * t264;
t408 = -qJD(5) * t131 - t259 * t444 + t443 * t264;
t213 = t268 * t260;
t215 = pkin(8) * t265 + t252;
t156 = t213 * t264 - t215 * t259;
t407 = qJD(5) * t156 + t259 * t441 + t442 * t264;
t158 = t213 * t259 + t215 * t264;
t406 = -qJD(5) * t158 - t259 * t442 + t441 * t264;
t14 = t15 * t265;
t404 = t259 * t52;
t400 = t74 * t260;
t399 = pkin(6) * qJDD(1);
t398 = t119 * t183;
t397 = t153 * t179;
t396 = t153 * t260;
t395 = t155 * t153;
t394 = t155 * t179;
t393 = t155 * t265;
t392 = t173 * t185;
t391 = t179 * t185;
t388 = t185 * t183;
t387 = t197 * t260;
t386 = t197 * t265;
t379 = t260 * t104;
t378 = t260 * t144;
t366 = t432 + t316;
t255 = t262 ^ 2;
t256 = t266 ^ 2;
t364 = t255 - t256;
t363 = t255 + t256;
t350 = t425 * pkin(2);
t349 = t262 * t405;
t347 = qJD(4) * pkin(8) * t179;
t271 = qJD(1) ^ 2;
t345 = t262 * t271 * t266;
t343 = g(1) * t381 + g(2) * t382 + t241;
t342 = qJD(2) * t269;
t321 = -t425 * t150 - t261 * t152 + t189 * t361 - t201 * t334;
t61 = t321 - t414;
t337 = -t61 - t417;
t331 = pkin(4) * t260 - t269;
t86 = pkin(3) * t145 + pkin(8) * t144 + t349;
t200 = t262 * t342;
t98 = t431 * qJD(3) + t425 * t200 + t342 * t373;
t329 = -t260 * t98 + t265 * t86;
t88 = t265 * t134 - t159 * t260;
t324 = t179 * t265;
t246 = -t350 - pkin(3);
t319 = t262 * t332;
t317 = -g(1) * t385 + g(2) * t384;
t315 = -t136 + t432;
t312 = g(1) * t263 - g(2) * t267;
t311 = -pkin(8) * t104 + t398;
t65 = pkin(4) * t195 - pkin(9) * t386 + t88;
t77 = -pkin(9) * t387 + t89;
t38 = -t259 * t77 + t264 * t65;
t39 = t259 * t65 + t264 * t77;
t309 = t260 * t76 + t265 * t75;
t306 = -t244 * t104 + t398;
t303 = t245 * t249 + t251 * t268;
t302 = t119 * t359 + t76 * t185 + t251 * t416 + t61 * t260;
t301 = t119 * t360 - t75 * t185 + t265 * t439;
t300 = -t75 * t389 - t76 * t390 + t14 - t343;
t298 = t313 * t249;
t297 = -0.2e1 * pkin(1) * t356 - pkin(6) * qJDD(2);
t296 = t197 * t359 - t378;
t35 = t134 * t359 - t159 * t360 + t260 * t86 + t265 * t98;
t291 = t299 * t265;
t270 = qJD(2) ^ 2;
t288 = 0.2e1 * qJDD(1) * pkin(1) - pkin(6) * t270 + t312;
t287 = pkin(1) * t271 + t313 - t399;
t286 = -qJD(4) * t309 - t16 * t260;
t285 = -t212 * t183 + t322 + t343;
t283 = t212 * t185 - t321 + t438;
t20 = t264 * t46 - t404;
t282 = -t3 * t194 - t4 * t196 + t20 * t367 - t21 * t440 - t343;
t37 = -pkin(4) * t299 + t61;
t281 = -t185 * t20 + t37 * t194 + t250 * t438 + t440 * t87;
t280 = t286 + t14;
t99 = qJD(3) * t159 + t261 * t200 - t269 * t320;
t277 = t185 * t21 + t37 * t196 - t367 * t87 + (-t298 + t417) * t248;
t275 = -g(1) * (-pkin(3) * t384 + pkin(8) * t381) - g(2) * (-pkin(3) * t385 + pkin(8) * t382) - g(3) * t314;
t211 = t246 - t413;
t180 = -qJDD(1) * t247 + t237;
t177 = t251 * t369 + t377;
t175 = -t251 * t372 + t376;
t125 = t194 * t197;
t124 = t196 * t197;
t117 = pkin(4) * t387 - t431;
t107 = -t183 ^ 2 + t185 ^ 2;
t102 = qJDD(5) + t104;
t84 = t183 * t254 + t273;
t55 = pkin(4) * t296 + t99;
t45 = -t358 * t387 + (t352 * t386 - t378) * t264 + t295 * t259;
t44 = t143 * t197 - t259 * t378 + t264 * t370;
t43 = -t155 * t185 + t179 * t324 + t379;
t42 = -t179 ^ 2 * t260 + t104 * t265 + t153 * t185;
t41 = t179 * t396 + t291;
t40 = t155 * t324 - t400;
t36 = -t89 * qJD(4) + t329;
t28 = t264 * t51 - t404;
t27 = -t259 * t51 - t402;
t24 = -t102 * t194 - t173 * t440 + t185 * t92;
t23 = t102 * t196 - t367 * t173 + t185 * t305;
t22 = -pkin(9) * t296 + t35;
t19 = pkin(9) * t370 + pkin(4) * t145 + (-t151 + (pkin(9) * t197 - t134) * t260) * qJD(4) + t329;
t13 = (-t74 - t397) * t265 + (t299 - t394) * t260;
t11 = -t194 * t284 + t440 * t92;
t10 = -t196 * t25 + t305 * t367;
t7 = -qJD(5) * t39 + t19 * t264 - t22 * t259;
t6 = qJD(5) * t38 + t19 * t259 + t22 * t264;
t5 = t194 * t25 + t196 * t284 + t305 * t440 + t367 * t92;
t1 = [0, 0, 0, 0, 0, qJDD(1), t312, t313, 0, 0, qJDD(1) * t255 + 0.2e1 * t319, 0.2e1 * t262 * t353 - 0.2e1 * t356 * t364, qJDD(2) * t262 + t266 * t270, qJDD(1) * t256 - 0.2e1 * t319, qJDD(2) * t266 - t262 * t270, 0, t262 * t297 + t266 * t288, -t262 * t288 + t266 * t297, 0.2e1 * t363 * t399 - t313, -g(1) * (-pkin(1) * t263 + pkin(6) * t267) - g(2) * (pkin(1) * t267 + pkin(6) * t263) + (pkin(6) ^ 2 * t363 + pkin(1) ^ 2) * qJDD(1), -t185 * t144 + t273 * t197, -t197 * t105 + t144 * t183 - t185 * t145 - t273 * t195, -t144 * t254 + t197 * t253, t105 * t195 + t145 * t183, -t145 * t254 - t195 * t253, 0, -t105 * t247 - t145 * t212 + t180 * t195 + t183 * t349 + t251 * t312 + t253 * t431 - t254 * t99, t212 * t144 - t159 * t253 + t180 * t197 + t185 * t349 - t247 * t273 - t98 * t254 + t317, -t159 * t105 + t135 * t144 - t136 * t145 - t98 * t183 + t99 * t185 + t195 * t322 + t197 * t321 - t273 * t431 - t313, -t322 * t159 + t136 * t98 - t321 * t431 - t135 * t99 - t180 * t247 - t212 * t349 - g(1) * (-t247 * t263 - t267 * t269) - g(2) * (-t263 * t269 + t217), t155 * t295 - t386 * t74, (t153 * t265 + t155 * t260) * t144 + (t291 + t400 + (-t393 + t396) * qJD(4)) * t197, t104 * t386 + t145 * t155 + t179 * t295 - t195 * t74, t153 * t296 - t299 * t387, -t153 * t145 - t179 * t296 + t195 * t299 - t197 * t379, t104 * t195 + t145 * t179, -g(1) * t175 - g(2) * t177 + t88 * t104 + t119 * t296 + t75 * t145 + t99 * t153 + t16 * t195 + t36 * t179 + t299 * t431 + t387 * t61, -g(1) * t174 - g(2) * t176 - t104 * t89 + t119 * t295 - t145 * t76 - t15 * t195 + t155 * t99 - t179 * t35 + t386 * t61 + t431 * t74, -t35 * t153 + t89 * t299 - t36 * t155 + t88 * t74 + t309 * t144 + (-qJD(4) * t428 - t15 * t260 - t16 * t265) * t197 - t317, -t419 + t119 * t99 + t15 * t89 - t61 * t431 + t16 * t88 + t76 * t35 + t75 * t36 + (g(1) * t269 - g(2) * t314) * t267 + (-g(1) * (-t247 - t314) + g(2) * t269) * t263, t125 * t25 + t305 * t44, t124 * t25 - t125 * t284 + t305 * t45 + t44 * t92, -t102 * t125 - t145 * t305 - t173 * t44 - t195 * t25, -t124 * t284 + t45 * t92, -t102 * t124 - t145 * t92 - t173 * t45 + t195 * t284, t102 * t195 + t145 * t173, -g(1) * t164 - g(2) * t166 + t102 * t38 - t117 * t284 + t124 * t37 + t145 * t20 + t173 * t7 + t195 * t4 + t45 * t87 + t55 * t92, -g(1) * t163 - g(2) * t165 - t102 * t39 - t117 * t25 - t125 * t37 - t145 * t21 - t173 * t6 - t195 * t3 - t305 * t55 - t44 * t87, -t124 * t3 + t125 * t4 + t20 * t44 - t21 * t45 + t25 * t38 + t284 * t39 + t305 * t7 - t6 * t92 - t317, -t419 + t37 * t117 + t20 * t7 + t21 * t6 + t3 * t39 + t4 * t38 + t87 * t55 + (-g(1) * t331 - g(2) * t430) * t267 + (-g(1) * (-t247 - t430) - g(2) * t331) * t263; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t345, t364 * t271, t354, t345, t353, qJDD(2), t262 * t287 - t415, g(3) * t262 + t266 * t287, 0, 0, t388, t107, t84, -t388, -t310, t253, t139 * t254 + (-t183 * t362 + t425 * t253 - t254 * t361) * pkin(2) + t283, t140 * t254 + (-t185 * t362 - t253 * t261 - t254 * t334) * pkin(2) + t285, -t105 * t424 - t273 * t350 + (t136 + t316) * t185 + (-t135 + t140 - t323) * t183, t135 * t139 - t136 * t140 + (-t425 * t321 - t415 - t261 * t322 + (-t135 * t261 + t425 * t136) * qJD(3) + (qJD(1) * t212 + t313) * t262) * pkin(2), t40, t13, t43, t41, t42, -t391, t246 * t344 + (-t246 * t253 + t337) * t265 + t306 * t260 + t316 * t153 + (-t244 * t359 + t446) * t179 + t301, -t246 * t74 + t306 * t265 - t260 * t298 + t316 * t155 + (t244 * t360 + t445) * t179 + t302, t79 * t153 + t78 * t155 + (-t153 * t323 - qJD(4) * t75 + (t155 * qJD(4) + t299) * t244) * t265 + (t155 * t323 - t244 * t74 - t16 + (t153 * t244 - t76) * qJD(4)) * t260 + t300, t61 * t246 - t76 * t79 - t75 * t78 - t119 * t139 + (-t415 + t313 * t262 + (t119 * t261 + t425 * t428) * qJD(3)) * pkin(2) + t280 * t244 + t275, t10, t5, t23, t11, t24, -t392, t102 * t130 + t173 * t408 - t211 * t284 + t366 * t92 + t281, -t102 * t131 - t173 * t409 - t211 * t25 - t305 * t366 + t277, t130 * t25 + t131 * t284 + t305 * t408 - t409 * t92 + t282, t3 * t131 + t4 * t130 + t37 * t211 - g(3) * (t430 + t412) + t366 * t87 + t409 * t21 + t408 * t20 + t313 * (pkin(2) * t262 + t303); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t388, t107, t84, -t388, -t310, t253, t136 * t254 + t283, t135 * t254 + t285, 0, 0, t40, t13, t43, t41, t42, -t391, -pkin(3) * t344 - t136 * t153 - t80 * t179 + t311 * t260 + (t337 - t347 + t414) * t265 + t301, pkin(3) * t74 - t136 * t155 + t179 * t81 + t311 * t265 + (-t298 + t347) * t260 + t302, t81 * t153 + t80 * t155 + (t291 - t400 + (t393 + t396) * qJD(4)) * pkin(8) + t286 + t300, -t61 * pkin(3) + pkin(8) * t280 - t119 * t136 - t75 * t80 - t76 * t81 + t275, t10, t5, t23, t11, t24, -t392, t102 * t156 + t173 * t406 + t245 * t284 + t315 * t92 + t281, -t102 * t158 - t173 * t407 + t245 * t25 - t305 * t315 + t277, t156 * t25 + t158 * t284 + t305 * t406 - t407 * t92 + t282, -g(3) * t430 + t4 * t156 + t3 * t158 + t20 * t406 + t21 * t407 - t37 * t245 + t303 * t313 + t315 * t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t395, -t153 ^ 2 + t155 ^ 2, -t74 + t397, -t395, t299 + t394, t104, -t120 * t359 - t119 * t155 + t179 * t76 + t48 + (-qJD(4) * t116 + t241 - t60) * t260 + t427, g(1) * t177 - g(2) * t175 + t119 * t153 + t179 * t75 + t241 * t265 - t15, 0, 0, -t411, t437, t436, t411, t433, t102, -t173 * t27 + (t102 * t264 - t155 * t92 - t173 * t358) * pkin(4) + t434, t173 * t28 + (-t102 * t259 + t155 * t305 - t173 * t357) * pkin(4) + t435, -t20 * t92 - t21 * t305 - t27 * t305 + t28 * t92 + (t25 * t264 + t259 * t284 + (-t259 * t305 - t264 * t92) * qJD(5)) * pkin(4), -t20 * t27 - t21 * t28 + (t3 * t259 + t4 * t264 - t87 * t155 + t249 * t416 + (-t20 * t259 + t21 * t264) * qJD(5) + t427) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t411, t437, t436, t411, t433, t102, t173 * t21 + t434, t173 * t20 + t435, 0, 0;];
tau_reg = t1;
