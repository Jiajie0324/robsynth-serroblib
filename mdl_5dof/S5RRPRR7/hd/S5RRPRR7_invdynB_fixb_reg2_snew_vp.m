% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:16
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPRR7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR7_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR7_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR7_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPRR7_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:15:44
% EndTime: 2019-12-31 20:15:53
% DurationCPUTime: 6.29s
% Computational Cost: add. (21186->423), mult. (26689->611), div. (0->0), fcn. (16385->8), ass. (0->288)
t458 = qJD(1) + qJD(2);
t454 = t458 ^ 2;
t467 = cos(qJ(2));
t456 = qJDD(1) + qJDD(2);
t463 = sin(qJ(2));
t512 = t463 * t456;
t422 = t467 * t454 + t512;
t499 = t467 * t456;
t424 = t463 * t454 - t499;
t464 = sin(qJ(1));
t468 = cos(qJ(1));
t371 = t468 * t422 - t464 * t424;
t485 = pkin(6) * t422 - t467 * g(3);
t540 = -pkin(6) * t424 + t463 * g(3);
t542 = pkin(5) * t371 + t464 * t540 + t468 * t485;
t480 = t464 * t422 + t468 * t424;
t532 = pkin(5) * t480 + t464 * t485 - t468 * t540;
t461 = sin(qJ(5));
t455 = qJDD(4) + qJDD(5);
t462 = sin(qJ(4));
t465 = cos(qJ(5));
t466 = cos(qJ(4));
t406 = (-t461 * t466 - t462 * t465) * t458;
t523 = t458 * t466;
t408 = -t461 * t462 * t458 + t465 * t523;
t528 = t408 * t406;
t544 = t455 + t528;
t550 = t461 * t544;
t548 = t465 * t544;
t441 = t464 * g(1) - t468 * g(2);
t429 = qJDD(1) * pkin(1) + t441;
t442 = t468 * g(1) + t464 * g(2);
t471 = qJD(1) ^ 2;
t430 = -t471 * pkin(1) - t442;
t380 = -t467 * t429 + t463 * t430;
t381 = t463 * t429 + t467 * t430;
t482 = t463 * t380 + t467 * t381;
t333 = t467 * t380 - t463 * t381;
t498 = t468 * t333;
t546 = -t464 * t482 + t498;
t511 = t464 * t333;
t285 = t468 * t482 + t511;
t545 = pkin(1) * t424;
t543 = -pkin(1) * t422 - t381;
t526 = t456 * qJ(3);
t472 = -t454 * pkin(2) + t381 + t526;
t531 = 2 * qJD(3);
t492 = t458 * t531;
t352 = t472 + t492;
t446 = t456 * pkin(2);
t474 = qJDD(3) + t380 - t446;
t358 = -t454 * qJ(3) + t474;
t304 = t463 * t352 - t467 * t358;
t483 = t467 * t352 + t463 * t358;
t262 = -t464 * t304 + t468 * t483;
t261 = t468 * t304 + t464 * t483;
t404 = t406 ^ 2;
t405 = t408 ^ 2;
t457 = qJD(4) + qJD(5);
t453 = t457 ^ 2;
t530 = pkin(2) + pkin(7);
t527 = t454 * t466;
t525 = t457 * t461;
t524 = t457 * t465;
t459 = t462 ^ 2;
t522 = t459 * t454;
t460 = t466 ^ 2;
t521 = t460 * t454;
t494 = qJD(4) * t458;
t487 = t466 * t494;
t514 = t462 * t456;
t417 = -t487 - t514;
t433 = qJD(4) * pkin(4) - pkin(8) * t523;
t448 = t454 * pkin(7);
t308 = -t417 * pkin(4) - pkin(8) * t522 - t448 + (t433 * t466 + t531) * t458 + t472;
t520 = t461 * t308;
t360 = -t528 + t455;
t519 = t461 * t360;
t488 = t462 * t494;
t501 = t466 * t456;
t418 = -t488 + t501;
t351 = -t456 * pkin(7) + t358;
t504 = t466 * t351;
t307 = qJDD(4) * pkin(4) - t418 * pkin(8) + t504 + (-pkin(4) * t527 - pkin(8) * t494 + g(3)) * t462;
t484 = t466 * g(3) - t462 * t351;
t309 = -pkin(4) * t522 + t417 * pkin(8) - qJD(4) * t433 - t484;
t264 = -t465 * t307 + t461 * t309;
t265 = t461 * t307 + t465 * t309;
t232 = -t465 * t264 + t461 * t265;
t518 = t462 * t232;
t344 = t352 - t448;
t517 = t462 * t344;
t491 = t462 * t527;
t431 = qJDD(4) + t491;
t516 = t462 * t431;
t432 = qJDD(4) - t491;
t515 = t462 * t432;
t495 = t459 + t460;
t421 = t495 * t456;
t513 = t463 * t421;
t508 = t465 * t308;
t507 = t465 * t360;
t506 = t466 * t232;
t505 = t466 * t344;
t503 = t466 * t431;
t502 = t466 * t432;
t500 = t467 * t421;
t493 = qJD(5) + t457;
t490 = t463 * t528;
t489 = t467 * t528;
t233 = t461 * t264 + t465 * t265;
t481 = -t465 * t417 + t461 * t418;
t394 = -t464 * t441 - t468 * t442;
t478 = t463 * t491;
t477 = t467 * t491;
t435 = t468 * qJDD(1) - t464 * t471;
t476 = -pkin(5) * t435 - t464 * g(3);
t340 = t462 * g(3) + t504;
t291 = t466 * t340 - t462 * t484;
t292 = -t462 * t340 - t466 * t484;
t475 = t461 * t417 + t465 * t418;
t393 = t468 * t441 - t464 * t442;
t473 = (-qJD(5) + t457) * t408 - t481;
t336 = t406 * qJD(5) + t475;
t470 = qJD(4) ^ 2;
t469 = pkin(1) * g(3);
t439 = -t470 - t521;
t438 = t470 - t521;
t437 = -t470 - t522;
t436 = -t470 + t522;
t434 = t464 * qJDD(1) + t468 * t471;
t427 = (-t459 + t460) * t454;
t426 = t495 * t454;
t419 = -0.2e1 * t488 + t501;
t416 = 0.2e1 * t487 + t514;
t414 = -pkin(5) * t434 + t468 * g(3);
t413 = t495 * t494;
t397 = t457 * t406;
t396 = -t405 + t453;
t395 = t404 - t453;
t392 = t467 * qJDD(4) - t463 * t413;
t391 = t463 * qJDD(4) + t467 * t413;
t390 = -t462 * t418 - t460 * t494;
t389 = -t466 * t417 - t459 * t494;
t388 = -t405 - t453;
t387 = -t462 * t439 - t503;
t386 = t466 * t437 - t515;
t385 = t466 * t439 - t516;
t384 = -t466 * t438 - t515;
t383 = t462 * t437 + t502;
t382 = -t462 * t436 - t503;
t374 = -t467 * t426 - t513;
t369 = -t463 * t426 + t500;
t368 = t462 * t416 - t466 * t419;
t366 = t405 - t404;
t365 = -t463 * t384 + t466 * t499;
t364 = -t463 * t382 - t462 * t499;
t363 = t467 * t384 + t463 * t501;
t362 = t467 * t382 - t462 * t512;
t357 = -t463 * t389 - t477;
t356 = -t463 * t390 + t477;
t355 = t467 * t389 - t478;
t354 = t467 * t390 + t478;
t353 = -t453 - t404;
t349 = t463 * t385 + t467 * t419;
t348 = t463 * t383 + t467 * t416;
t347 = -t467 * t385 + t463 * t419;
t346 = -t467 * t383 + t463 * t416;
t343 = (t406 * t465 + t408 * t461) * t457;
t342 = (t406 * t461 - t408 * t465) * t457;
t339 = -t404 - t405;
t338 = -t463 * t368 + t467 * t427;
t337 = t467 * t368 + t463 * t427;
t335 = -t408 * qJD(5) - t481;
t330 = pkin(6) * t482 + t469;
t329 = t465 * t395 - t519;
t328 = -t461 * t396 + t548;
t327 = t461 * t395 + t507;
t326 = t465 * t396 + t550;
t325 = -t461 * t388 - t507;
t324 = t465 * t388 - t519;
t323 = -t464 * t369 + t468 * t374;
t322 = t468 * t369 + t464 * t374;
t321 = t336 - t397;
t320 = t336 + t397;
t319 = t406 * t493 + t475;
t316 = t408 * t493 + t481;
t315 = t465 * t336 - t408 * t525;
t314 = t461 * t336 + t408 * t524;
t313 = -t461 * t335 - t406 * t524;
t312 = t465 * t335 - t406 * t525;
t311 = t465 * t353 - t550;
t310 = t461 * t353 + t548;
t301 = -t464 * t347 + t468 * t349;
t300 = -t464 * t346 + t468 * t348;
t299 = t468 * t347 + t464 * t349;
t298 = t468 * t346 + t464 * t348;
t297 = -pkin(6) * t304 + (-pkin(2) * t463 + qJ(3) * t467) * g(3);
t296 = -t466 * t342 - t462 * t343;
t295 = pkin(6) * t483 + t469 + (pkin(2) * t467 + qJ(3) * t463) * g(3);
t294 = pkin(3) * t385 - qJ(3) * t387 + t484;
t293 = pkin(3) * t383 - qJ(3) * t386 + t340;
t290 = -t463 * t296 + t467 * t455;
t289 = t467 * t296 + t463 * t455;
t288 = pkin(3) * t416 - t386 * t530 + t505;
t287 = pkin(3) * t419 - t387 * t530 - t517;
t286 = -pkin(3) * t426 - t292;
t283 = -t466 * t327 - t462 * t329;
t282 = -t466 * t326 - t462 * t328;
t281 = -t462 * t324 + t466 * t325;
t280 = t466 * t324 + t462 * t325;
t279 = t461 * t321 + t465 * t473;
t278 = -t465 * t316 - t461 * t320;
t277 = -t465 * t321 + t461 * t473;
t276 = -t461 * t316 + t465 * t320;
t275 = -pkin(8) * t324 + t508;
t274 = t463 * t291 + t467 * t344;
t273 = -t467 * t291 + t463 * t344;
t272 = -t466 * t314 - t462 * t315;
t271 = -t466 * t312 - t462 * t313;
t270 = -pkin(8) * t310 + t520;
t269 = -t462 * t310 + t466 * t311;
t268 = t466 * t310 + t462 * t311;
t267 = -pkin(3) * t500 - pkin(6) * t369 - t463 * t286;
t266 = -pkin(3) * t513 + pkin(6) * t374 + t467 * t286;
t260 = -t463 * t272 - t489;
t259 = -t463 * t271 + t489;
t258 = t467 * t272 - t490;
t257 = t467 * t271 + t490;
t256 = pkin(3) * t291 - qJ(3) * t292;
t255 = -t463 * t282 + t467 * t321;
t254 = -t463 * t283 + t467 * t473;
t253 = t467 * t282 + t463 * t321;
t252 = t467 * t283 + t463 * t473;
t251 = t463 * t280 + t467 * t319;
t250 = -t467 * t280 + t463 * t319;
t249 = -pkin(4) * t319 + pkin(8) * t325 + t520;
t248 = -pkin(4) * t316 + pkin(8) * t311 - t508;
t247 = t463 * t268 + t467 * t316;
t246 = -t467 * t268 + t463 * t316;
t245 = pkin(3) * t344 - t292 * t530;
t244 = -pkin(6) * t347 - t463 * t287 + t467 * t294;
t243 = -pkin(6) * t346 - t463 * t288 + t467 * t293;
t242 = -pkin(1) * t387 + pkin(6) * t349 + t467 * t287 + t463 * t294;
t241 = -pkin(1) * t386 + pkin(6) * t348 + t467 * t288 + t463 * t293;
t240 = -t462 * t277 + t466 * t279;
t239 = t466 * t277 + t462 * t279;
t238 = -t466 * t276 - t462 * t278;
t237 = -t464 * t273 + t468 * t274;
t236 = t468 * t273 + t464 * t274;
t235 = -t463 * t238 + t467 * t366;
t234 = t467 * t238 + t463 * t366;
t231 = t463 * t239 + t467 * t339;
t230 = -t467 * t239 + t463 * t339;
t229 = -pkin(4) * t308 + pkin(8) * t233;
t228 = -t464 * t250 + t468 * t251;
t227 = t468 * t250 + t464 * t251;
t226 = -pkin(8) * t277 - t232;
t225 = -t464 * t246 + t468 * t247;
t224 = t468 * t246 + t464 * t247;
t223 = pkin(3) * t280 + pkin(4) * t324 - qJ(3) * t281 - t265;
t222 = -pkin(4) * t339 + pkin(8) * t279 + t233;
t221 = pkin(3) * t268 + pkin(4) * t310 - qJ(3) * t269 - t264;
t220 = -pkin(6) * t273 - t463 * t245 + t467 * t256;
t219 = t466 * t233 - t518;
t218 = t462 * t233 + t506;
t217 = -t464 * t230 + t468 * t231;
t216 = t468 * t230 + t464 * t231;
t215 = -pkin(1) * t292 + pkin(6) * t274 + t467 * t245 + t463 * t256;
t214 = pkin(3) * t319 - t466 * t249 - t462 * t275 - t281 * t530;
t213 = pkin(3) * t239 + pkin(4) * t277 - qJ(3) * t240;
t212 = t463 * t218 + t467 * t308;
t211 = -t467 * t218 + t463 * t308;
t210 = pkin(3) * t316 - t466 * t248 - t269 * t530 - t462 * t270;
t209 = -pkin(6) * t250 - t463 * t214 + t467 * t223;
t208 = -t464 * t211 + t468 * t212;
t207 = t468 * t211 + t464 * t212;
t206 = -pkin(1) * t281 + pkin(6) * t251 + t467 * t214 + t463 * t223;
t205 = -pkin(6) * t246 - t463 * t210 + t467 * t221;
t204 = pkin(3) * t339 - t466 * t222 - t462 * t226 - t240 * t530;
t203 = pkin(3) * t218 + pkin(4) * t232 - qJ(3) * t219;
t202 = -pkin(1) * t269 + pkin(6) * t247 + t467 * t210 + t463 * t221;
t201 = pkin(3) * t308 + pkin(8) * t518 - t219 * t530 - t466 * t229;
t200 = -pkin(6) * t230 - t463 * t204 + t467 * t213;
t199 = -pkin(1) * t240 + pkin(6) * t231 + t467 * t204 + t463 * t213;
t198 = -pkin(6) * t211 - t463 * t201 + t467 * t203;
t197 = -pkin(1) * t219 + pkin(6) * t212 + t467 * t201 + t463 * t203;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t434, -t435, 0, t394, 0, 0, 0, 0, 0, 0, -t371, t480, 0, t285, 0, 0, 0, 0, 0, 0, 0, t371, -t480, t262, 0, 0, 0, 0, 0, 0, t300, t301, t323, t237, 0, 0, 0, 0, 0, 0, t225, t228, t217, t208; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t435, -t434, 0, t393, 0, 0, 0, 0, 0, 0, -t480, -t371, 0, -t546, 0, 0, 0, 0, 0, 0, 0, t480, t371, t261, 0, 0, 0, 0, 0, 0, t298, t299, t322, t236, 0, 0, 0, 0, 0, 0, t224, t227, t216, t207; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t386, t387, 0, t292, 0, 0, 0, 0, 0, 0, t269, t281, t240, t219; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t435, 0, -t434, 0, t476, -t414, -t393, -pkin(5) * t393, 0, 0, -t480, 0, -t371, 0, t532, t542, t546, pkin(5) * t546 + pkin(6) * t498 - t464 * t330, 0, t480, t371, 0, 0, 0, -t261, -t532, -t542, -pkin(5) * t261 - t464 * t295 + t468 * t297, -t464 * t354 + t468 * t356, -t464 * t337 + t468 * t338, -t464 * t363 + t468 * t365, -t464 * t355 + t468 * t357, -t464 * t362 + t468 * t364, -t464 * t391 + t468 * t392, -pkin(5) * t298 - t464 * t241 + t468 * t243, -pkin(5) * t299 - t464 * t242 + t468 * t244, -pkin(5) * t322 - t464 * t266 + t468 * t267, -pkin(5) * t236 - t464 * t215 + t468 * t220, -t464 * t258 + t468 * t260, -t464 * t234 + t468 * t235, -t464 * t253 + t468 * t255, -t464 * t257 + t468 * t259, -t464 * t252 + t468 * t254, -t464 * t289 + t468 * t290, -pkin(5) * t224 - t464 * t202 + t468 * t205, -pkin(5) * t227 - t464 * t206 + t468 * t209, -pkin(5) * t216 - t464 * t199 + t468 * t200, -pkin(5) * t207 - t464 * t197 + t468 * t198; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t434, 0, t435, 0, t414, t476, t394, pkin(5) * t394, 0, 0, t371, 0, -t480, 0, -t542, t532, t285, pkin(5) * t285 + pkin(6) * t511 + t468 * t330, 0, -t371, t480, 0, 0, 0, t262, t542, -t532, pkin(5) * t262 + t468 * t295 + t464 * t297, t468 * t354 + t464 * t356, t468 * t337 + t464 * t338, t468 * t363 + t464 * t365, t468 * t355 + t464 * t357, t468 * t362 + t464 * t364, t468 * t391 + t464 * t392, pkin(5) * t300 + t468 * t241 + t464 * t243, pkin(5) * t301 + t468 * t242 + t464 * t244, pkin(5) * t323 + t468 * t266 + t464 * t267, pkin(5) * t237 + t468 * t215 + t464 * t220, t468 * t258 + t464 * t260, t468 * t234 + t464 * t235, t468 * t253 + t464 * t255, t468 * t257 + t464 * t259, t468 * t252 + t464 * t254, t468 * t289 + t464 * t290, pkin(5) * t225 + t468 * t202 + t464 * t205, pkin(5) * t228 + t468 * t206 + t464 * t209, pkin(5) * t217 + t468 * t199 + t464 * t200, pkin(5) * t208 + t468 * t197 + t464 * t198; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t441, t442, 0, 0, 0, 0, 0, 0, 0, t456, -t380 - t545, t543, 0, -pkin(1) * t333, t456, 0, 0, 0, 0, 0, 0, -t446 + t474 + t545, t492 + 0.2e1 * t526 - t543, pkin(1) * t304 - pkin(2) * t358 + qJ(3) * t352, (t418 - t488) * t466, -t466 * t416 - t462 * t419, -t462 * t438 + t502, (-t417 + t487) * t462, t466 * t436 - t516, 0, pkin(1) * t346 + qJ(3) * t416 - t383 * t530 + t517, pkin(1) * t347 + qJ(3) * t419 - t385 * t530 + t505, pkin(1) * t369 - qJ(3) * t426 + t421 * t530 - t291, pkin(1) * t273 + qJ(3) * t344 - t291 * t530, -t462 * t314 + t466 * t315, -t462 * t276 + t466 * t278, -t462 * t326 + t466 * t328, -t462 * t312 + t466 * t313, -t462 * t327 + t466 * t329, -t462 * t342 + t466 * t343, pkin(1) * t246 + qJ(3) * t316 - t462 * t248 - t268 * t530 + t466 * t270, pkin(1) * t250 + qJ(3) * t319 - t462 * t249 + t466 * t275 - t280 * t530, pkin(1) * t230 + qJ(3) * t339 - t462 * t222 + t466 * t226 - t239 * t530, pkin(1) * t211 - pkin(8) * t506 + qJ(3) * t308 - t218 * t530 - t462 * t229;];
tauB_reg = t1;
