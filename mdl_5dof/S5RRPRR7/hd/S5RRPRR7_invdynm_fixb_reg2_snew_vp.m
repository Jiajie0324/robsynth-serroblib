% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPRR7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:16
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPRR7_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR7_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR7_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR7_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR7_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPRR7_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:15:53
% EndTime: 2019-12-31 20:16:02
% DurationCPUTime: 9.18s
% Computational Cost: add. (38158->497), mult. (47787->629), div. (0->0), fcn. (29054->8), ass. (0->334)
t846 = qJD(1) + qJD(2);
t842 = t846 ^ 2;
t855 = cos(qJ(2));
t844 = qJDD(1) + qJDD(2);
t851 = sin(qJ(2));
t930 = t851 * t844;
t806 = t855 * t842 + t930;
t920 = t855 * t844;
t808 = t851 * t842 - t920;
t852 = sin(qJ(1));
t856 = cos(qJ(1));
t746 = t856 * t806 - t852 * t808;
t905 = pkin(6) * t806 - t855 * g(3);
t967 = -pkin(6) * t808 + t851 * g(3);
t969 = pkin(5) * t746 + t852 * t967 + t856 * t905;
t900 = t852 * t806 + t856 * t808;
t957 = pkin(5) * t900 + t852 * t905 - t856 * t967;
t849 = sin(qJ(5));
t843 = qJDD(4) + qJDD(5);
t850 = sin(qJ(4));
t853 = cos(qJ(5));
t854 = cos(qJ(4));
t787 = (-t849 * t854 - t850 * t853) * t846;
t942 = t846 * t854;
t789 = -t849 * t850 * t846 + t853 * t942;
t948 = t789 * t787;
t970 = t843 + t948;
t979 = t849 * t970;
t977 = t853 * t970;
t826 = t852 * g(1) - t856 * g(2);
t813 = qJDD(1) * pkin(1) + t826;
t827 = t856 * g(1) + t852 * g(2);
t859 = qJD(1) ^ 2;
t814 = -t859 * pkin(1) - t827;
t755 = -t855 * t813 + t851 * t814;
t756 = t851 * t813 + t855 * t814;
t902 = t851 * t755 + t855 * t756;
t698 = t855 * t755 - t851 * t756;
t919 = t856 * t698;
t975 = -t852 * t902 + t919;
t929 = t852 * t698;
t974 = t856 * t902 + t929;
t973 = pkin(1) * t806;
t972 = pkin(1) * t808;
t831 = t854 * t844;
t914 = qJD(4) * t846;
t910 = t850 * t914;
t802 = t831 - t910;
t909 = t854 * t914;
t932 = t850 * t844;
t880 = -t909 - t932;
t702 = t787 * qJD(5) + t853 * t802 + t849 * t880;
t845 = qJD(4) + qJD(5);
t945 = t845 * t787;
t971 = t702 + t945;
t946 = t844 * qJ(3);
t865 = -t842 * pkin(2) + t756 + t946;
t956 = 2 * qJD(3);
t913 = t846 * t956;
t723 = t865 + t913;
t950 = t844 * pkin(2);
t882 = qJDD(3) + t755 - t950;
t732 = -t842 * qJ(3) + t882;
t665 = t851 * t723 - t855 * t732;
t903 = t855 * t723 + t851 * t732;
t966 = -t852 * t665 + t856 * t903;
t965 = t856 * t665 + t852 * t903;
t863 = -t844 * pkin(7) + t732;
t861 = t854 * t863;
t709 = t850 * g(3) + t861;
t710 = t854 * g(3) - t850 * t863;
t655 = t854 * t709 - t850 * t710;
t785 = t787 ^ 2;
t786 = t789 ^ 2;
t841 = t845 ^ 2;
t955 = -pkin(2) - pkin(7);
t954 = pkin(3) * t655;
t837 = t842 * pkin(7);
t715 = t723 - t837;
t953 = pkin(3) * t715;
t847 = t850 ^ 2;
t848 = t854 ^ 2;
t915 = t847 + t848;
t805 = t915 * t844;
t952 = pkin(3) * t805;
t951 = pkin(7) * t655;
t947 = t842 * t854;
t944 = t845 * t849;
t943 = t845 * t853;
t941 = t847 * t842;
t940 = t848 * t842;
t817 = qJD(4) * pkin(4) - pkin(8) * t942;
t671 = -t880 * pkin(4) - pkin(8) * t941 - t837 + (t817 * t854 + t956) * t846 + t865;
t939 = t849 * t671;
t734 = -t948 + t843;
t938 = t849 * t734;
t669 = t861 - t802 * pkin(8) + qJDD(4) * pkin(4) + (-pkin(4) * t947 - pkin(8) * t914 + g(3)) * t850;
t672 = -pkin(4) * t941 + t880 * pkin(8) - qJD(4) * t817 - t710;
t617 = -t853 * t669 + t849 * t672;
t618 = t849 * t669 + t853 * t672;
t586 = -t853 * t617 + t849 * t618;
t937 = t850 * t586;
t935 = t850 * t715;
t801 = 0.2e1 * t909 + t932;
t757 = t850 * t801;
t825 = t850 * t947;
t815 = qJDD(4) + t825;
t934 = t850 * t815;
t816 = qJDD(4) - t825;
t933 = t850 * t816;
t931 = t851 * t805;
t926 = t853 * t671;
t925 = t853 * t734;
t924 = t854 * t586;
t711 = t854 * t715;
t923 = t854 * t815;
t922 = t854 * t816;
t921 = t855 * t805;
t916 = -pkin(2) * t732 + qJ(3) * t723;
t912 = t851 * t948;
t911 = t855 * t948;
t587 = t849 * t617 + t853 * t618;
t573 = t850 * t587 + t924;
t585 = pkin(4) * t586;
t908 = -pkin(3) * t573 - t585;
t901 = -t849 * t802 + t853 * t880;
t683 = (-qJD(5) + t845) * t789 + t901;
t686 = -t945 + t702;
t639 = t849 * t683 - t853 * t686;
t641 = t853 * t683 + t849 * t686;
t592 = t854 * t639 + t850 * t641;
t637 = pkin(4) * t639;
t907 = -pkin(3) * t592 - t637;
t858 = qJD(4) ^ 2;
t823 = -t858 - t940;
t764 = t854 * t823 - t934;
t904 = -pkin(7) * t764 + t711;
t898 = -t852 * t826 - t856 * t827;
t897 = t851 * t825;
t896 = t855 * t825;
t895 = -pkin(2) * t655 + qJ(3) * t715 - t951;
t819 = t856 * qJDD(1) - t852 * t859;
t894 = -pkin(5) * t819 - t852 * g(3);
t727 = -t841 - t785;
t673 = t849 * t727 + t977;
t893 = pkin(4) * t673 - t617;
t892 = pkin(3) * t801 + t711;
t803 = t831 - 0.2e1 * t910;
t891 = pkin(3) * t803 - t935;
t821 = -t858 - t941;
t762 = t850 * t821 + t922;
t890 = -pkin(7) * t762 + t935;
t656 = -t850 * t709 - t854 * t710;
t889 = t856 * t826 - t852 * t827;
t888 = -pkin(2) * t764 + qJ(3) * t803 + t904;
t887 = -pkin(3) * t764 - t710;
t706 = -t785 - t786;
t577 = -pkin(4) * t706 + pkin(8) * t641 + t587;
t580 = -pkin(8) * t639 - t586;
t886 = -pkin(7) * t592 - t850 * t577 + t854 * t580;
t674 = t853 * t727 - t979;
t778 = t845 * t789;
t879 = t789 * qJD(5) - t901;
t681 = t778 + t879;
t602 = -pkin(4) * t681 + pkin(8) * t674 - t926;
t623 = t854 * t673 + t850 * t674;
t625 = -pkin(8) * t673 + t939;
t885 = -pkin(7) * t623 - t850 * t602 + t854 * t625;
t769 = -t786 - t841;
t689 = -t849 * t769 - t925;
t603 = -pkin(4) * t971 + pkin(8) * t689 + t939;
t688 = t853 * t769 - t938;
t636 = -pkin(8) * t688 + t926;
t643 = t854 * t688 + t850 * t689;
t884 = -pkin(7) * t643 - t850 * t603 + t854 * t636;
t883 = pkin(7) * t805 - t655;
t881 = pkin(4) * t688 - t618;
t878 = -pkin(3) * t623 - t893;
t877 = -pkin(2) * t762 + qJ(3) * t801 + t890;
t876 = -t950 + t882;
t875 = pkin(3) * t706 - t854 * t577 - t850 * t580;
t874 = pkin(3) * t681 - t854 * t602 - t850 * t625;
t873 = pkin(3) * t971 - t854 * t603 - t850 * t636;
t872 = -pkin(2) * t592 + qJ(3) * t706 + t886;
t871 = -pkin(2) * t623 + qJ(3) * t681 + t885;
t870 = -pkin(2) * t643 + qJ(3) * t971 + t884;
t810 = t915 * t842;
t869 = pkin(2) * t805 - qJ(3) * t810 + t883;
t581 = -pkin(4) * t671 + pkin(8) * t587;
t868 = pkin(3) * t671 + pkin(8) * t937 - t854 * t581;
t867 = -pkin(7) * t573 - pkin(8) * t924 - t850 * t581;
t866 = -pkin(3) * t643 - t881;
t864 = t756 + 0.2e1 * t946 + t913;
t862 = -pkin(2) * t573 + qJ(3) * t671 + t867;
t860 = -pkin(3) * t762 - t709;
t857 = pkin(1) * g(3);
t822 = t858 - t940;
t820 = -t858 + t941;
t818 = t852 * qJDD(1) + t856 * t859;
t811 = (-t847 + t848) * t842;
t797 = -pkin(5) * t818 + t856 * g(3);
t796 = t915 * t914;
t775 = -t786 + t841;
t774 = t785 - t841;
t773 = t855 * qJDD(4) - t851 * t796;
t772 = t851 * qJDD(4) + t855 * t796;
t771 = t850 * t802 + t848 * t914;
t770 = t847 * t914 + t854 * t880;
t768 = -t850 * t823 - t923;
t767 = -t850 * t822 + t922;
t766 = t854 * t821 - t933;
t765 = t854 * t820 - t934;
t763 = t854 * t822 + t933;
t761 = t850 * t820 + t923;
t758 = (t802 - t910) * t854;
t749 = -t855 * t810 - t931;
t744 = -t851 * t810 + t921;
t743 = -t854 * t801 - t850 * t803;
t742 = t854 * t803 - t757;
t740 = t786 - t785;
t739 = t851 * t763 + t854 * t920;
t738 = t851 * t761 - t850 * t920;
t737 = -t855 * t763 + t851 * t831;
t736 = -t855 * t761 - t850 * t930;
t731 = t851 * t770 - t896;
t730 = t851 * t771 + t896;
t729 = -t855 * t770 - t897;
t728 = -t855 * t771 + t897;
t725 = -t755 - t972;
t724 = -t756 - t973;
t720 = t851 * t764 + t855 * t803;
t719 = t851 * t762 + t855 * t801;
t718 = -t855 * t764 + t851 * t803;
t717 = -t855 * t762 + t851 * t801;
t714 = (t787 * t853 + t789 * t849) * t845;
t713 = (t787 * t849 - t789 * t853) * t845;
t708 = t864 + t973;
t707 = t876 + t972;
t704 = t851 * t742 + t855 * t811;
t703 = -t855 * t742 + t851 * t811;
t695 = pkin(1) * t698;
t694 = pkin(6) * t902 + t857;
t693 = t853 * t774 - t938;
t692 = -t849 * t775 + t977;
t691 = t849 * t774 + t925;
t690 = t853 * t775 + t979;
t682 = -t778 + t879;
t678 = t853 * t702 - t789 * t944;
t677 = t849 * t702 + t789 * t943;
t676 = -t787 * t943 + t849 * t879;
t675 = -t787 * t944 - t853 * t879;
t662 = -pkin(6) * t665 + (-pkin(2) * t851 + qJ(3) * t855) * g(3);
t661 = -t850 * t713 + t854 * t714;
t660 = t854 * t713 + t850 * t714;
t659 = pkin(6) * t903 + t857 + (pkin(2) * t855 + qJ(3) * t851) * g(3);
t658 = -qJ(3) * t768 - t887;
t657 = -qJ(3) * t766 - t860;
t653 = t851 * t660 + t855 * t843;
t652 = -t855 * t660 + t851 * t843;
t651 = t955 * t766 + t892;
t650 = t955 * t768 + t891;
t649 = pkin(3) * t810 + t656;
t648 = -t850 * t691 + t854 * t693;
t647 = -t850 * t690 + t854 * t692;
t646 = t854 * t691 + t850 * t693;
t645 = t854 * t690 + t850 * t692;
t644 = -t850 * t688 + t854 * t689;
t640 = -t853 * t681 - t849 * t971;
t638 = -t849 * t681 + t853 * t971;
t635 = t851 * t655 + t855 * t715;
t634 = -t855 * t655 + t851 * t715;
t632 = pkin(1) * t718 + t888;
t631 = pkin(1) * t717 + t877;
t630 = -t850 * t677 + t854 * t678;
t629 = -t850 * t675 + t854 * t676;
t628 = t854 * t677 + t850 * t678;
t627 = t854 * t675 + t850 * t676;
t626 = pkin(1) * t665 + t916;
t624 = -t850 * t673 + t854 * t674;
t622 = -pkin(3) * t921 - pkin(6) * t744 + t851 * t649;
t621 = -pkin(3) * t931 + pkin(6) * t749 - t855 * t649;
t615 = pkin(1) * t744 + t869;
t614 = t851 * t628 - t911;
t613 = t851 * t627 + t911;
t612 = -t855 * t628 - t912;
t611 = -t855 * t627 + t912;
t610 = -qJ(3) * t656 + t954;
t609 = t851 * t645 + t855 * t686;
t608 = t851 * t646 - t855 * t682;
t607 = -t855 * t645 + t851 * t686;
t606 = -t855 * t646 - t851 * t682;
t605 = t851 * t643 + t855 * t971;
t604 = -t855 * t643 + t851 * t971;
t601 = t851 * t623 + t855 * t681;
t600 = -t855 * t623 + t851 * t681;
t599 = t955 * t656 + t953;
t598 = -pkin(6) * t718 - t851 * t650 + t855 * t658;
t597 = -pkin(6) * t717 - t851 * t651 + t855 * t657;
t596 = -pkin(1) * t768 + pkin(6) * t720 + t855 * t650 + t851 * t658;
t595 = -pkin(1) * t766 + pkin(6) * t719 + t855 * t651 + t851 * t657;
t594 = -t850 * t639 + t854 * t641;
t593 = -t850 * t638 + t854 * t640;
t591 = t854 * t638 + t850 * t640;
t589 = t851 * t591 + t855 * t740;
t588 = -t855 * t591 + t851 * t740;
t584 = t851 * t592 + t855 * t706;
t583 = -t855 * t592 + t851 * t706;
t582 = pkin(1) * t634 + t895;
t578 = -qJ(3) * t644 - t866;
t576 = -qJ(3) * t624 - t878;
t575 = -pkin(6) * t634 - t851 * t599 + t855 * t610;
t574 = t854 * t587 - t937;
t571 = -pkin(1) * t656 + pkin(6) * t635 + t855 * t599 + t851 * t610;
t570 = t955 * t644 + t873;
t569 = -qJ(3) * t594 - t907;
t568 = t851 * t573 + t855 * t671;
t567 = -t855 * t573 + t851 * t671;
t566 = t955 * t624 + t874;
t565 = pkin(1) * t604 + t870;
t564 = pkin(1) * t600 + t871;
t563 = -pkin(6) * t604 - t851 * t570 + t855 * t578;
t562 = -pkin(1) * t644 + pkin(6) * t605 + t855 * t570 + t851 * t578;
t561 = -pkin(6) * t600 - t851 * t566 + t855 * t576;
t560 = t955 * t594 + t875;
t559 = -qJ(3) * t574 - t908;
t558 = -pkin(1) * t624 + pkin(6) * t601 + t855 * t566 + t851 * t576;
t557 = pkin(1) * t583 + t872;
t556 = t955 * t574 + t868;
t555 = -pkin(6) * t583 - t851 * t560 + t855 * t569;
t554 = pkin(1) * t567 + t862;
t553 = -pkin(1) * t594 + pkin(6) * t584 + t855 * t560 + t851 * t569;
t552 = -pkin(6) * t567 - t851 * t556 + t855 * t559;
t551 = -pkin(1) * t574 + pkin(6) * t568 + t855 * t556 + t851 * t559;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t819, 0, -t818, 0, t894, -t797, -t889, -pkin(5) * t889, 0, 0, -t900, 0, -t746, 0, t957, t969, t975, pkin(5) * t975 + pkin(6) * t919 - t852 * t694, 0, t900, t746, 0, 0, 0, -t965, -t957, -t969, -pkin(5) * t965 - t852 * t659 + t856 * t662, -t852 * t728 + t856 * t730, -t852 * t703 + t856 * t704, -t852 * t737 + t856 * t739, -t852 * t729 + t856 * t731, -t852 * t736 + t856 * t738, -t852 * t772 + t856 * t773, t856 * t597 - t852 * t595 - pkin(5) * (t856 * t717 + t852 * t719), t856 * t598 - t852 * t596 - pkin(5) * (t856 * t718 + t852 * t720), t856 * t622 - t852 * t621 - pkin(5) * (t856 * t744 + t852 * t749), t856 * t575 - t852 * t571 - pkin(5) * (t856 * t634 + t852 * t635), -t852 * t612 + t856 * t614, -t852 * t588 + t856 * t589, -t852 * t607 + t856 * t609, -t852 * t611 + t856 * t613, -t852 * t606 + t856 * t608, -t852 * t652 + t856 * t653, t856 * t561 - t852 * t558 - pkin(5) * (t856 * t600 + t852 * t601), t856 * t563 - t852 * t562 - pkin(5) * (t856 * t604 + t852 * t605), t856 * t555 - t852 * t553 - pkin(5) * (t856 * t583 + t852 * t584), t856 * t552 - t852 * t551 - pkin(5) * (t856 * t567 + t852 * t568); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t818, 0, t819, 0, t797, t894, t898, pkin(5) * t898, 0, 0, t746, 0, -t900, 0, -t969, t957, t974, pkin(5) * t974 + pkin(6) * t929 + t856 * t694, 0, -t746, t900, 0, 0, 0, t966, t969, -t957, pkin(5) * t966 + t856 * t659 + t852 * t662, t856 * t728 + t852 * t730, t856 * t703 + t852 * t704, t856 * t737 + t852 * t739, t856 * t729 + t852 * t731, t856 * t736 + t852 * t738, t856 * t772 + t852 * t773, t852 * t597 + t856 * t595 + pkin(5) * (-t852 * t717 + t856 * t719), t852 * t598 + t856 * t596 + pkin(5) * (-t852 * t718 + t856 * t720), t852 * t622 + t856 * t621 + pkin(5) * (-t852 * t744 + t856 * t749), t852 * t575 + t856 * t571 + pkin(5) * (-t852 * t634 + t856 * t635), t856 * t612 + t852 * t614, t856 * t588 + t852 * t589, t856 * t607 + t852 * t609, t856 * t611 + t852 * t613, t856 * t606 + t852 * t608, t856 * t652 + t852 * t653, t852 * t561 + t856 * t558 + pkin(5) * (-t852 * t600 + t856 * t601), t852 * t563 + t856 * t562 + pkin(5) * (-t852 * t604 + t856 * t605), t852 * t555 + t856 * t553 + pkin(5) * (-t852 * t583 + t856 * t584), t852 * t552 + t856 * t551 + pkin(5) * (-t852 * t567 + t856 * t568); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t826, t827, 0, 0, 0, 0, 0, 0, 0, t844, t725, t724, 0, -t695, t844, 0, 0, 0, 0, 0, 0, t707, t708, t626, t758, t743, t767, t757, t765, 0, t631, t632, t615, t582, t630, t593, t647, t629, t648, t661, t564, t565, t557, t554; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t859, 0, 0, -g(3), -t826, 0, 0, 0, -t808, 0, -t806, 0, -t967, t905, t698, pkin(6) * t698, 0, t808, t806, 0, 0, 0, -t665, t967, -t905, t662, t730, t704, t739, t731, t738, t773, t597, t598, t622, t575, t614, t589, t609, t613, t608, t653, t561, t563, t555, t552; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t859, 0, qJDD(1), 0, g(3), 0, -t827, 0, 0, 0, t806, 0, -t808, 0, -t905, -t967, t902, t694, 0, -t806, t808, 0, 0, 0, t903, t905, t967, t659, t728, t703, t737, t729, t736, t772, t595, t596, t621, t571, t612, t588, t607, t611, t606, t652, t558, t562, t553, t551; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t826, t827, 0, 0, 0, 0, 0, 0, 0, t844, t725, t724, 0, -t695, t844, 0, 0, 0, 0, 0, 0, t707, t708, t626, t758, t743, t767, t757, t765, 0, t631, t632, t615, t582, t630, t593, t647, t629, t648, t661, t564, t565, t557, t554; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t844, 0, -t842, 0, 0, -g(3), t755, 0, 0, -t844, t842, 0, 0, 0, t732, 0, g(3), qJ(3) * g(3), t825, t811, t831, -t825, -t932, qJDD(4), t657, t658, -t952, t610, -t948, t740, t686, t948, -t682, t843, t576, t578, t569, t559; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t842, 0, t844, 0, g(3), 0, t756, 0, 0, -t842, -t844, 0, 0, 0, t723, -g(3), 0, pkin(2) * g(3), -t771, -t742, -t763, -t770, -t761, t796, t651, t650, -t649, t599, -t628, -t591, -t645, -t627, -t646, -t660, t566, t570, t560, t556; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t844, -t755, -t756, 0, 0, t844, 0, 0, 0, 0, 0, 0, t876, t864, t916, t758, t743, t767, t757, t765, 0, t877, t888, t869, t895, t630, t593, t647, t629, t648, t661, t871, t870, t872, t862; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t844, 0, 0, 0, 0, 0, 0, t732, t723, 0, t758, t743, t767, t757, t765, 0, t890, t904, t883, -t951, t630, t593, t647, t629, t648, t661, t885, t884, t886, t867; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t844, -t842, 0, 0, 0, -t732, 0, -g(3), 0, -t825, -t811, -t831, t825, t932, -qJDD(4), t860, t887, t952, -t954, t948, -t740, -t686, -t948, t682, -t843, t878, t866, t907, t908; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t842, t844, 0, 0, 0, -t723, g(3), 0, 0, t771, t742, t763, t770, t761, -t796, pkin(7) * t766 - t892, pkin(7) * t768 - t891, t649, pkin(7) * t656 - t953, t628, t591, t645, t627, t646, t660, pkin(7) * t624 - t874, pkin(7) * t644 - t873, pkin(7) * t594 - t875, pkin(7) * t574 - t868; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t802, -t801, t816, t910, t820, -t910, 0, t715, -t709, 0, t678, t640, t692, t676, t693, t714, t625, t636, t580, -pkin(8) * t586; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t909, t803, t822, t880, t815, -t909, -t715, 0, -t710, 0, t677, t638, t690, t675, t691, t713, t602, t603, t577, t581; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t825, t811, t831, -t825, -t932, qJDD(4), t709, t710, 0, 0, -t948, t740, t686, t948, -t682, t843, t893, t881, t637, t585; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t702, -t681, t970, -t945, t774, t945, 0, t671, t617, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t778, t971, t775, -t879, t734, -t778, -t671, 0, t618, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t948, t740, t686, t948, -t682, t843, -t617, -t618, 0, 0;];
m_new_reg = t1;
