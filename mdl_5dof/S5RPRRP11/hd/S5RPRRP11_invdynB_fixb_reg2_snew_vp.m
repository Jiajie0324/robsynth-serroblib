% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRRP11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:55
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRRP11_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP11_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP11_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP11_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP11_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP11_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:54:44
% EndTime: 2019-12-31 18:55:00
% DurationCPUTime: 15.45s
% Computational Cost: add. (32068->542), mult. (76606->764), div. (0->0), fcn. (56086->8), ass. (0->398)
t717 = sin(pkin(8));
t718 = cos(pkin(8));
t721 = sin(qJ(3));
t724 = cos(qJ(3));
t740 = t717 * t724 + t718 * t721;
t692 = t740 * qJD(1);
t720 = sin(qJ(4));
t723 = cos(qJ(4));
t672 = t720 * qJD(3) + t723 * t692;
t786 = t717 * t721;
t690 = (-t718 * t724 + t786) * qJD(1);
t769 = t690 * qJD(3);
t823 = t740 * qJDD(1);
t652 = t823 - t769;
t750 = -t723 * qJDD(3) + t720 * t652;
t683 = qJD(4) + t690;
t766 = qJD(4) + t683;
t562 = t672 * t766 + t750;
t670 = -t723 * qJD(3) + t720 * t692;
t739 = -t720 * qJDD(3) - t723 * t652;
t733 = t670 * qJD(4) + t739;
t792 = t670 * t683;
t826 = -t792 - t733;
t795 = t826 * t720;
t492 = t562 * t723 + t795;
t669 = t672 ^ 2;
t812 = t670 ^ 2;
t619 = t669 - t812;
t463 = t492 * t721 + t619 * t724;
t465 = t492 * t724 - t619 * t721;
t419 = t463 * t717 - t465 * t718;
t488 = -t562 * t720 + t723 * t826;
t722 = sin(qJ(1));
t725 = cos(qJ(1));
t917 = t419 * t722 - t488 * t725;
t916 = t419 * t725 + t488 * t722;
t811 = t683 ^ 2;
t630 = t812 - t811;
t623 = t672 * t670;
t764 = qJDD(1) * t718;
t688 = qJDD(1) * t786 - t724 * t764;
t768 = t692 * qJD(3);
t650 = -t688 - t768;
t641 = qJDD(4) - t650;
t828 = t623 + t641;
t785 = t720 * t828;
t541 = t723 * t630 - t785;
t563 = (qJD(4) - t683) * t672 + t750;
t481 = t541 * t721 + t563 * t724;
t485 = t541 * t724 - t563 * t721;
t433 = t481 * t717 - t485 * t718;
t778 = t723 * t828;
t536 = t720 * t630 + t778;
t915 = t433 * t722 + t536 * t725;
t914 = t433 * t725 - t536 * t722;
t825 = -t792 + t733;
t857 = -t563 * t720 + t825 * t723;
t827 = t669 + t812;
t856 = -t563 * t723 - t825 * t720;
t873 = -t721 * t827 + t724 * t856;
t875 = t721 * t856 + t724 * t827;
t886 = -t717 * t875 + t718 * t873;
t903 = t722 * t857 + t725 * t886;
t913 = pkin(5) * t903;
t905 = t722 * t886 - t725 * t857;
t912 = pkin(5) * t905;
t911 = t463 * t718 + t465 * t717;
t910 = t481 * t718 + t485 * t717;
t885 = t717 * t873 + t718 * t875;
t909 = qJ(2) * t885;
t908 = -pkin(1) * t885 - pkin(2) * t875 - pkin(3) * t827 - pkin(7) * t856;
t907 = -pkin(1) * t857 + qJ(2) * t886;
t631 = -t669 + t811;
t829 = -t623 + t641;
t784 = t720 * t829;
t859 = -t723 * t631 - t784;
t777 = t723 * t829;
t858 = -t720 * t631 + t777;
t872 = -t721 * t825 + t724 * t858;
t874 = t721 * t858 + t724 * t825;
t888 = -t717 * t874 + t718 * t872;
t906 = t722 * t888 + t725 * t859;
t904 = -t722 * t859 + t725 * t888;
t604 = t811 + t669;
t514 = t604 * t723 + t785;
t902 = pkin(1) * t514;
t901 = pkin(2) * t514;
t900 = pkin(3) * t514;
t899 = pkin(6) * t873;
t898 = pkin(6) * t875;
t897 = pkin(7) * t514;
t525 = t604 * t720 - t778;
t896 = pkin(7) * t525;
t895 = t514 * t722;
t894 = t514 * t725;
t893 = t525 * t721;
t892 = t525 * t724;
t887 = t717 * t872 + t718 * t874;
t883 = pkin(7) * t857;
t824 = -t811 - t812;
t840 = t720 * t824 + t777;
t871 = pkin(1) * t840;
t870 = pkin(2) * t840;
t869 = pkin(3) * t840;
t839 = t723 * t824 - t784;
t868 = pkin(7) * t839;
t867 = pkin(7) * t840;
t864 = t721 * t839;
t863 = t722 * t840;
t862 = t724 * t839;
t861 = t725 * t840;
t703 = t725 * g(1) + t722 * g(2);
t860 = -0.2e1 * qJD(2) * qJD(1) + t703;
t789 = t683 * t723;
t628 = t672 * t789;
t790 = t683 * t720;
t756 = t670 * t790;
t743 = t628 + t756;
t627 = t672 * t790;
t755 = t670 * t789;
t744 = t627 - t755;
t816 = t721 * t641 + t724 * t744;
t819 = -t724 * t641 + t721 * t744;
t837 = -t717 * t819 + t718 * t816;
t855 = t722 * t837 + t725 * t743;
t599 = -t672 * qJD(4) - t750;
t737 = -t723 * t599 - t756;
t738 = -t720 * t599 + t755;
t760 = t721 * t623;
t817 = t724 * t738 - t760;
t759 = t724 * t623;
t818 = t721 * t738 + t759;
t835 = -t717 * t818 + t718 * t817;
t854 = t722 * t835 + t725 * t737;
t853 = -t722 * t743 + t725 * t837;
t852 = -t722 * t737 + t725 * t835;
t851 = 2 * qJD(5);
t849 = qJ(5) * t826;
t655 = t692 * t690;
t822 = qJDD(3) - t655;
t848 = t721 * t822;
t845 = t724 * t822;
t726 = qJD(1) ^ 2;
t842 = -t726 * pkin(1) + qJDD(1) * qJ(2) - t860;
t559 = t720 * t733 - t628;
t560 = -t723 * t733 - t627;
t745 = t724 * t560 + t760;
t746 = t721 * t560 - t759;
t814 = -t717 * t746 + t718 * t745;
t841 = t725 * t559 + t722 * t814;
t838 = -t559 * t722 + t725 * t814;
t702 = t722 * g(1) - t725 * g(2);
t742 = -qJDD(2) + t702;
t754 = pkin(2) * t718 + pkin(1);
t714 = t717 ^ 2;
t715 = t718 ^ 2;
t771 = t714 + t715;
t645 = t754 * qJDD(1) + (t771 * pkin(6) + qJ(2)) * t726 + t742;
t836 = t717 * t816 + t718 * t819;
t834 = t717 * t817 + t718 * t818;
t657 = -t717 * g(3) + t842 * t718;
t709 = t715 * t726;
t633 = -pkin(2) * t709 + pkin(6) * t764 + t657;
t807 = t718 * g(3);
t729 = -t807 + (t754 * t726 + (-pkin(6) - qJ(2)) * qJDD(1) + t860) * t717;
t574 = t724 * t633 + t721 * t729;
t642 = t690 * pkin(3) - t692 * pkin(7);
t810 = qJD(3) ^ 2;
t528 = -t810 * pkin(3) + qJDD(3) * pkin(7) - t690 * t642 + t574;
t532 = (-t652 + t769) * pkin(7) + (-t650 + t768) * pkin(3) - t645;
t461 = t723 * t528 + t720 * t532;
t617 = t670 * pkin(4) - t672 * qJ(5);
t741 = t641 * qJ(5) - t670 * t617 + t683 * t851 + t461;
t820 = t726 * t771;
t813 = t717 * t745 + t718 * t746;
t686 = t690 ^ 2;
t687 = t692 ^ 2;
t809 = pkin(3) * t721;
t808 = pkin(4) * t723;
t806 = qJ(5) * t723;
t805 = qJDD(1) * pkin(1);
t573 = t721 * t633 - t724 * t729;
t500 = -t573 * t724 + t574 * t721;
t804 = t500 * t717;
t803 = t500 * t718;
t527 = -qJDD(3) * pkin(3) - t810 * pkin(7) + t692 * t642 + t573;
t802 = t527 * t720;
t801 = t527 * t723;
t791 = t683 * t672;
t788 = t714 * t726;
t787 = t717 * t718;
t781 = t721 * t645;
t647 = qJDD(3) + t655;
t780 = t721 * t647;
t684 = t726 * qJ(2) + t742 + t805;
t779 = t722 * t684;
t775 = t724 * t645;
t774 = t724 * t647;
t773 = t725 * t684;
t460 = t720 * t528 - t723 * t532;
t772 = t827 - t811;
t763 = t722 * qJDD(1);
t762 = t725 * qJDD(1);
t758 = t722 * t655;
t757 = t725 * t655;
t753 = -pkin(3) * t724 - pkin(2);
t752 = qJ(5) * t720 + pkin(3);
t751 = t684 + t805;
t501 = t573 * t721 + t724 * t574;
t656 = t842 * t717 + t807;
t602 = t717 * t656 + t718 * t657;
t666 = -t722 * t702 - t725 * t703;
t748 = t672 * t617 + qJDD(5) + t460;
t701 = -t722 * t726 + t762;
t747 = -pkin(5) * t701 - g(3) * t722;
t415 = -t460 * t723 + t461 * t720;
t416 = t460 * t720 + t461 * t723;
t601 = t718 * t656 - t717 * t657;
t665 = t725 * t702 - t722 * t703;
t700 = t725 * t726 + t763;
t694 = t718 * t820;
t662 = -t722 * t694 + t718 * t762;
t736 = t725 * t694 + t718 * t763;
t735 = -t641 * pkin(4) + t748;
t731 = -t599 * pkin(4) + t527 - t849;
t730 = t672 * t851 - t731;
t708 = t715 * qJDD(1);
t707 = t714 * qJDD(1);
t699 = t709 - t788;
t698 = t709 + t788;
t697 = t708 - t707;
t696 = t708 + t707;
t693 = t717 * t820;
t685 = -pkin(5) * t700 + t725 * g(3);
t678 = -t687 - t810;
t677 = -t687 + t810;
t676 = t686 - t810;
t674 = t701 * t787;
t673 = t700 * t787;
t663 = t725 * t693 + t717 * t763;
t661 = t722 * t693 - t717 * t762;
t659 = t725 * t696 - t722 * t698;
t658 = t722 * t696 + t725 * t698;
t654 = -t687 + t686;
t651 = t823 - 0.2e1 * t769;
t649 = t688 + 0.2e1 * t768;
t643 = -t810 - t686;
t638 = (-t690 * t724 + t692 * t721) * qJD(3);
t637 = (-t690 * t721 - t692 * t724) * qJD(3);
t621 = -t686 - t687;
t616 = t724 * t652 - t721 * t768;
t615 = t721 * t652 + t724 * t768;
t614 = -t721 * t650 + t724 * t769;
t613 = t724 * t650 + t721 * t769;
t610 = -t721 * t678 - t774;
t609 = -t721 * t677 + t845;
t608 = t724 * t676 - t780;
t607 = t724 * t678 - t780;
t606 = t724 * t677 + t848;
t605 = t721 * t676 + t774;
t594 = -t724 * t649 - t721 * t651;
t593 = -t688 * t724 + t721 * t823;
t592 = -t721 * t649 + t724 * t651;
t591 = -t688 * t721 - t724 * t823;
t590 = t724 * t643 - t848;
t589 = t721 * t643 + t845;
t577 = -t717 * t637 + t718 * t638;
t576 = t725 * t602 - t779;
t575 = t722 * t602 + t773;
t571 = -pkin(6) * t607 - t775;
t570 = t670 * t766 + t739;
t564 = -t599 + t791;
t561 = -pkin(6) * t589 - t781;
t551 = -t717 * t615 + t718 * t616;
t550 = -t717 * t613 + t718 * t614;
t549 = -t717 * t607 + t718 * t610;
t548 = -t717 * t606 + t718 * t609;
t547 = -t717 * t605 + t718 * t608;
t546 = t718 * t607 + t717 * t610;
t533 = -pkin(2) * t651 + pkin(6) * t610 - t781;
t529 = -pkin(2) * t649 + pkin(6) * t590 + t775;
t520 = -t592 * t717 + t594 * t718;
t519 = -t591 * t717 + t593 * t718;
t518 = t591 * t718 + t593 * t717;
t513 = -t589 * t717 + t590 * t718;
t512 = t589 * t718 + t590 * t717;
t511 = t549 * t725 + t651 * t722;
t510 = t549 * t722 - t651 * t725;
t499 = t513 * t725 + t649 * t722;
t498 = t513 * t722 - t649 * t725;
t497 = t519 * t725 + t621 * t722;
t496 = t519 * t722 - t621 * t725;
t487 = pkin(2) * t645 + pkin(6) * t501;
t486 = -pkin(1) * t518 - pkin(2) * t591;
t477 = t564 * t721 + t862;
t476 = -t570 * t721 + t892;
t475 = -t564 * t724 + t864;
t474 = t570 * t724 + t893;
t473 = -pkin(6) * t591 - t500;
t470 = t562 * t721 + t862;
t469 = -t721 * t826 - t892;
t468 = -t562 * t724 + t864;
t467 = t724 * t826 - t893;
t462 = -pkin(1) * t546 - pkin(2) * t607 + t574;
t459 = t801 + t897;
t454 = t802 - t867;
t453 = -pkin(2) * t621 + pkin(6) * t593 + t501;
t452 = -pkin(1) * t512 - pkin(2) * t589 + t573;
t447 = -qJ(2) * t546 - t533 * t717 + t571 * t718;
t446 = t501 * t718 - t804;
t445 = t501 * t717 + t803;
t444 = (pkin(4) * t683 - (2 * qJD(5))) * t672 + t731;
t443 = qJ(5) * t811 - t735;
t442 = -qJ(2) * t512 - t529 * t717 + t561 * t718;
t441 = t446 * t725 - t645 * t722;
t440 = t446 * t722 + t645 * t725;
t439 = -pkin(4) * t811 + t741;
t438 = t461 + t900;
t437 = -pkin(3) * t857 - pkin(4) * t825 + qJ(5) * t563;
t436 = t460 - t869;
t435 = t772 * qJ(5) + t735;
t430 = (-t564 - t791) * pkin(4) + t730;
t429 = -pkin(4) * t791 + t730 + t849;
t428 = t772 * pkin(4) + t741;
t427 = -t475 * t717 + t477 * t718;
t426 = -t474 * t717 + t476 * t718;
t425 = t475 * t718 + t477 * t717;
t424 = t474 * t718 + t476 * t717;
t423 = -t468 * t717 + t470 * t718;
t422 = -t467 * t717 + t469 * t718;
t421 = t468 * t718 + t470 * t717;
t420 = t467 * t718 + t469 * t717;
t417 = -pkin(1) * t445 - pkin(2) * t500;
t410 = t427 * t725 + t863;
t409 = t426 * t725 - t895;
t408 = t427 * t722 - t861;
t407 = t426 * t722 + t894;
t406 = t423 * t725 + t863;
t405 = t422 * t725 + t895;
t404 = t423 * t722 - t861;
t403 = t422 * t722 - t894;
t402 = -t869 + (-t824 - t811) * qJ(5) + (-t829 - t641) * pkin(4) + t748;
t401 = -qJ(2) * t518 - t453 * t717 + t473 * t718;
t400 = t416 * t724 + t527 * t721;
t399 = t416 * t721 - t527 * t724;
t398 = -t900 - qJ(5) * t828 + (-t604 + t811) * pkin(4) - t741;
t397 = -t430 * t720 - t564 * t806 - t867;
t396 = -pkin(4) * t795 + t429 * t723 - t897;
t395 = -pkin(6) * t803 - qJ(2) * t445 - t487 * t717;
t394 = -t415 - t883;
t389 = t439 * t723 - t443 * t720;
t388 = t439 * t720 + t443 * t723;
t387 = -pkin(6) * t474 - t438 * t721 + t459 * t724;
t386 = -pkin(6) * t468 - t436 * t721 + t454 * t724;
t385 = pkin(6) * t476 + t438 * t724 + t459 * t721 + t901;
t384 = pkin(6) * t470 + t436 * t724 + t454 * t721 - t870;
t383 = -pkin(1) * t424 - pkin(2) * t474 - pkin(3) * t570 - t802 - t896;
t382 = -pkin(1) * t421 - pkin(2) * t468 + pkin(3) * t562 + t801 - t868;
t381 = -t428 * t720 + t435 * t723 - t883;
t380 = t389 * t724 + t444 * t721;
t379 = t389 * t721 - t444 * t724;
t378 = t394 * t724 + t809 * t857 - t898;
t377 = -t399 * t717 + t400 * t718;
t376 = t399 * t718 + t400 * t717;
t375 = t721 * t394 + t753 * t857 + t899;
t374 = -pkin(7) * t388 + (pkin(4) * t720 - t806) * t444;
t373 = -pkin(1) * t425 - pkin(2) * t475 - t723 * t430 + t564 * t752 - t868;
t372 = -pkin(1) * t420 - pkin(2) * t467 + t896 - t720 * t429 + (-pkin(3) - t808) * t826;
t371 = -pkin(3) * t388 - pkin(4) * t443 - qJ(5) * t439;
t370 = -pkin(6) * t475 + t397 * t724 - t402 * t721;
t369 = -pkin(6) * t467 + t396 * t724 - t398 * t721;
t368 = -t416 + t908;
t367 = pkin(6) * t477 + t397 * t721 + t402 * t724 - t870;
t366 = -pkin(6) * t399 + (-pkin(7) * t724 + t809) * t415;
t365 = pkin(6) * t469 + t396 * t721 + t398 * t724 - t901;
t364 = t381 * t724 - t437 * t721 - t898;
t363 = t377 * t725 + t415 * t722;
t362 = t377 * t722 - t415 * t725;
t361 = -pkin(2) * t857 + t381 * t721 + t437 * t724 + t899;
t360 = -t428 * t723 - t435 * t720 + t908;
t359 = pkin(6) * t400 + (-pkin(7) * t721 + t753) * t415;
t358 = -t379 * t717 + t380 * t718;
t357 = t379 * t718 + t380 * t717;
t356 = -qJ(2) * t424 - t385 * t717 + t387 * t718;
t355 = -qJ(2) * t421 - t384 * t717 + t386 * t718;
t354 = -pkin(1) * t376 - pkin(2) * t399 + pkin(3) * t527 - pkin(7) * t416;
t353 = t358 * t725 + t388 * t722;
t352 = t358 * t722 - t388 * t725;
t351 = -t375 * t717 + t378 * t718 - t909;
t350 = -qJ(2) * t425 - t367 * t717 + t370 * t718;
t349 = -qJ(2) * t420 - t365 * t717 + t369 * t718;
t348 = -pkin(6) * t379 - t371 * t721 + t374 * t724;
t347 = -t361 * t717 + t364 * t718 - t909;
t346 = -pkin(2) * t388 + pkin(6) * t380 + t371 * t724 + t374 * t721;
t345 = -pkin(1) * t357 - pkin(2) * t379 - pkin(7) * t389 + (t752 + t808) * t444;
t344 = -qJ(2) * t376 - t359 * t717 + t366 * t718;
t343 = -qJ(2) * t357 - t346 * t717 + t348 * t718;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t700, -t701, 0, t666, 0, 0, 0, 0, 0, 0, -t736, t663, t659, t576, 0, 0, 0, 0, 0, 0, t499, t511, t497, t441, 0, 0, 0, 0, 0, 0, t406, t409, t903, t363, 0, 0, 0, 0, 0, 0, t410, t903, t405, t353; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t701, -t700, 0, t665, 0, 0, 0, 0, 0, 0, t662, t661, t658, t575, 0, 0, 0, 0, 0, 0, t498, t510, t496, t440, 0, 0, 0, 0, 0, 0, t404, t407, t905, t362, 0, 0, 0, 0, 0, 0, t408, t905, t403, t352; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t601, 0, 0, 0, 0, 0, 0, t512, t546, t518, t445, 0, 0, 0, 0, 0, 0, t421, t424, t885, t376, 0, 0, 0, 0, 0, 0, t425, t885, t420, t357; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t701, 0, -t700, 0, t747, -t685, -t665, -pkin(5) * t665, t674, t697 * t725 - t699 * t722, t663, -t674, t736, 0, -pkin(5) * t662 - t656 * t722 - t717 * t773, -pkin(5) * t661 - t657 * t722 - t718 * t773, -pkin(5) * t658 + t601 * t725, -pkin(5) * t575 - (pkin(1) * t722 - qJ(2) * t725) * t601, t551 * t725 + t758, t520 * t725 - t654 * t722, t548 * t725 + t722 * t823, t550 * t725 - t758, t547 * t725 - t688 * t722, qJDD(3) * t722 + t577 * t725, -pkin(5) * t498 + t442 * t725 - t452 * t722, -pkin(5) * t510 + t447 * t725 - t462 * t722, -pkin(5) * t496 + t401 * t725 - t486 * t722, -pkin(5) * t440 + t395 * t725 - t417 * t722, t838, t916, t904, t852, -t914, t853, -pkin(5) * t404 + t355 * t725 - t382 * t722, -pkin(5) * t407 + t356 * t725 - t383 * t722, t351 * t725 - t368 * t722 - t912, -pkin(5) * t362 + t344 * t725 - t354 * t722, t838, t904, -t916, t853, t914, t852, -pkin(5) * t408 + t350 * t725 - t373 * t722, t347 * t725 - t360 * t722 - t912, -pkin(5) * t403 + t349 * t725 - t372 * t722, -pkin(5) * t352 + t343 * t725 - t345 * t722; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t700, 0, t701, 0, t685, t747, t666, pkin(5) * t666, t673, t697 * t722 + t699 * t725, t661, -t673, -t662, 0, -pkin(5) * t736 + t656 * t725 - t717 * t779, pkin(5) * t663 + t657 * t725 - t718 * t779, pkin(5) * t659 + t601 * t722, pkin(5) * t576 - (-pkin(1) * t725 - qJ(2) * t722) * t601, t551 * t722 - t757, t520 * t722 + t654 * t725, t548 * t722 - t725 * t823, t550 * t722 + t757, t547 * t722 + t688 * t725, -qJDD(3) * t725 + t577 * t722, pkin(5) * t499 + t442 * t722 + t452 * t725, pkin(5) * t511 + t447 * t722 + t462 * t725, pkin(5) * t497 + t401 * t722 + t486 * t725, pkin(5) * t441 + t395 * t722 + t417 * t725, t841, t917, t906, t854, -t915, t855, pkin(5) * t406 + t355 * t722 + t382 * t725, pkin(5) * t409 + t356 * t722 + t383 * t725, t351 * t722 + t368 * t725 + t913, pkin(5) * t363 + t344 * t722 + t354 * t725, t841, t906, -t917, t855, t915, t854, pkin(5) * t410 + t350 * t722 + t373 * t725, t347 * t722 + t360 * t725 + t913, pkin(5) * t405 + t349 * t722 + t372 * t725, pkin(5) * t353 + t343 * t722 + t345 * t725; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t702, t703, 0, 0, t707, 0.2e1 * t717 * t764, 0, t708, 0, 0, -qJ(2) * t694 + t718 * t751, qJ(2) * t693 - t717 * t751, pkin(1) * t698 + qJ(2) * t696 + t602, pkin(1) * t684 + qJ(2) * t602, t615 * t718 + t616 * t717, t592 * t718 + t594 * t717, t606 * t718 + t609 * t717, t613 * t718 + t614 * t717, t605 * t718 + t608 * t717, t637 * t718 + t638 * t717, -pkin(1) * t649 + qJ(2) * t513 + t529 * t718 + t561 * t717, -pkin(1) * t651 + qJ(2) * t549 + t533 * t718 + t571 * t717, -pkin(1) * t621 + qJ(2) * t519 + t453 * t718 + t473 * t717, pkin(1) * t645 - pkin(6) * t804 + qJ(2) * t446 + t487 * t718, t813, -t911, t887, t834, t910, t836, qJ(2) * t423 + t384 * t718 + t386 * t717 - t871, qJ(2) * t426 + t385 * t718 + t387 * t717 + t902, t375 * t718 + t378 * t717 + t907, -pkin(1) * t415 + qJ(2) * t377 + t359 * t718 + t366 * t717, t813, t887, t911, t836, -t910, t834, qJ(2) * t427 + t367 * t718 + t370 * t717 - t871, t361 * t718 + t364 * t717 + t907, qJ(2) * t422 + t365 * t718 + t369 * t717 - t902, -pkin(1) * t388 + qJ(2) * t358 + t346 * t718 + t348 * t717;];
tauB_reg = t1;
