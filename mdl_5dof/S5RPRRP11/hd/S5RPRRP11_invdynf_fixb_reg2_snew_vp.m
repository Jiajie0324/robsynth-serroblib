% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRRP11
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:55
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRRP11_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP11_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP11_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP11_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP11_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP11_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:55:20
% EndTime: 2019-12-31 18:55:24
% DurationCPUTime: 3.79s
% Computational Cost: add. (9347->223), mult. (22453->268), div. (0->0), fcn. (16548->8), ass. (0->152)
t1697 = cos(pkin(8));
t1690 = t1697 * qJDD(1);
t1700 = sin(qJ(3));
t1703 = cos(qJ(3));
t1696 = sin(pkin(8));
t1726 = t1696 * qJDD(1);
t1718 = -t1703 * t1690 + t1700 * t1726;
t1717 = t1696 * t1703 + t1697 * t1700;
t1677 = t1717 * qJD(1);
t1734 = t1677 * qJD(3);
t1712 = qJDD(4) + t1718 + t1734;
t1699 = sin(qJ(4));
t1702 = cos(qJ(4));
t1663 = -t1702 * qJD(3) + t1699 * t1677;
t1665 = t1699 * qJD(3) + t1702 * t1677;
t1736 = t1665 * t1663;
t1617 = t1712 + t1736;
t1662 = t1665 ^ 2;
t1675 = (t1696 * t1700 - t1697 * t1703) * qJD(1);
t1672 = qJD(4) + t1675;
t1742 = t1672 ^ 2;
t1750 = -t1662 - t1742;
t1593 = t1702 * t1617 + t1699 * t1750;
t1735 = t1675 * qJD(3);
t1748 = t1717 * qJDD(1);
t1658 = t1748 - t1735;
t1713 = -t1663 * qJD(4) + t1699 * qJDD(3) + t1702 * t1658;
t1737 = t1663 * t1672;
t1710 = t1713 - t1737;
t1575 = t1700 * t1593 + t1703 * t1710;
t1577 = t1703 * t1593 - t1700 * t1710;
t1562 = t1696 * t1575 - t1697 * t1577;
t1591 = t1699 * t1617 - t1702 * t1750;
t1701 = sin(qJ(1));
t1704 = cos(qJ(1));
t1772 = t1701 * t1562 + t1704 * t1591;
t1771 = t1704 * t1562 - t1701 * t1591;
t1556 = t1697 * t1575 + t1696 * t1577;
t1612 = t1713 + t1737;
t1721 = -t1702 * qJDD(3) + t1699 * t1658;
t1714 = (-qJD(4) + t1672) * t1665 - t1721;
t1746 = -t1702 * t1612 + t1699 * t1714;
t1639 = t1663 ^ 2;
t1625 = t1662 + t1639;
t1745 = t1699 * t1612 + t1702 * t1714;
t1759 = t1703 * t1625 + t1700 * t1745;
t1760 = -t1700 * t1625 + t1703 * t1745;
t1765 = -t1696 * t1759 + t1697 * t1760;
t1770 = t1701 * t1765 - t1704 * t1746;
t1769 = t1701 * t1746 + t1704 * t1765;
t1766 = t1696 * t1760 + t1697 * t1759;
t1618 = t1712 - t1736;
t1749 = -t1742 - t1639;
t1753 = -t1699 * t1618 + t1702 * t1749;
t1764 = t1700 * t1753;
t1754 = t1702 * t1618 + t1699 * t1749;
t1763 = t1701 * t1754;
t1762 = t1703 * t1753;
t1761 = t1704 * t1754;
t1705 = qJD(1) ^ 2;
t1684 = t1701 * g(1) - t1704 * g(2);
t1719 = -qJDD(2) + t1684;
t1722 = pkin(2) * t1697 + pkin(1);
t1693 = t1696 ^ 2;
t1694 = t1697 ^ 2;
t1727 = t1693 + t1694;
t1653 = t1722 * qJDD(1) + (t1727 * pkin(6) + qJ(2)) * t1705 + t1719;
t1681 = t1727 * t1705;
t1743 = qJD(3) ^ 2;
t1741 = t1675 ^ 2;
t1740 = t1677 ^ 2;
t1739 = t1697 * g(3);
t1738 = qJD(2) * qJD(1);
t1733 = t1677 * t1675;
t1732 = t1694 * t1705;
t1720 = t1704 * g(1) + t1701 * g(2);
t1711 = -t1705 * pkin(1) + qJDD(1) * qJ(2) - t1720;
t1660 = -t1696 * g(3) + (t1711 + 0.2e1 * t1738) * t1697;
t1644 = -pkin(2) * t1732 + pkin(6) * t1690 + t1660;
t1723 = -0.2e1 * t1738;
t1709 = -t1739 + (t1723 + t1722 * t1705 + (-pkin(6) - qJ(2)) * qJDD(1) + t1720) * t1696;
t1616 = t1703 * t1644 + t1700 * t1709;
t1650 = t1675 * pkin(3) - t1677 * pkin(7);
t1603 = -t1743 * pkin(3) + qJDD(3) * pkin(7) - t1675 * t1650 + t1616;
t1656 = t1718 + 0.2e1 * t1734;
t1708 = (-t1658 + t1735) * pkin(7) + t1656 * pkin(3) - t1653;
t1574 = t1702 * t1603 + t1699 * t1708;
t1725 = t1701 * qJDD(1);
t1724 = t1704 * qJDD(1);
t1573 = -t1699 * t1603 + t1702 * t1708;
t1615 = -t1700 * t1644 + t1703 * t1709;
t1716 = -t1665 * qJD(4) - t1721;
t1602 = -qJDD(3) * pkin(3) - t1743 * pkin(7) + t1677 * t1650 - t1615;
t1686 = t1697 * t1705 * t1696;
t1683 = -t1704 * t1705 - t1725;
t1682 = -t1701 * t1705 + t1724;
t1680 = t1727 * qJDD(1);
t1679 = t1697 * t1681;
t1678 = t1696 * t1681;
t1673 = qJDD(1) * pkin(1) + t1705 * qJ(2) + t1719;
t1666 = -t1740 - t1743;
t1659 = -t1739 + (-t1711 + t1723) * t1696;
t1657 = t1748 - 0.2e1 * t1735;
t1655 = -qJDD(3) - t1733;
t1654 = qJDD(3) - t1733;
t1651 = -t1741 - t1743;
t1638 = -t1740 - t1741;
t1636 = t1663 * pkin(4) - t1665 * qJ(5);
t1633 = t1703 * t1655 - t1700 * t1666;
t1632 = t1700 * t1655 + t1703 * t1666;
t1629 = -t1696 * t1659 + t1697 * t1660;
t1628 = t1697 * t1659 + t1696 * t1660;
t1623 = t1700 * t1748 - t1703 * t1718;
t1622 = -t1700 * t1718 - t1703 * t1748;
t1621 = t1703 * t1651 - t1700 * t1654;
t1620 = t1700 * t1651 + t1703 * t1654;
t1609 = t1672 * t1665 - t1716;
t1608 = (qJD(4) + t1672) * t1665 + t1721;
t1607 = -t1696 * t1632 + t1697 * t1633;
t1606 = t1697 * t1632 + t1696 * t1633;
t1596 = -t1696 * t1622 + t1697 * t1623;
t1595 = t1697 * t1622 + t1696 * t1623;
t1590 = -t1696 * t1620 + t1697 * t1621;
t1589 = t1697 * t1620 + t1696 * t1621;
t1588 = -t1700 * t1615 + t1703 * t1616;
t1587 = t1703 * t1615 + t1700 * t1616;
t1582 = t1700 * t1609 + t1762;
t1580 = -t1703 * t1609 + t1764;
t1578 = t1700 * t1608 + t1762;
t1576 = -t1703 * t1608 + t1764;
t1568 = -t1696 * t1587 + t1697 * t1588;
t1567 = t1697 * t1587 + t1696 * t1588;
t1566 = -t1716 * pkin(4) + (pkin(4) * t1672 - (2 * qJD(5))) * t1665 + t1602 - t1710 * qJ(5);
t1565 = -t1712 * pkin(4) - qJ(5) * t1742 + t1665 * t1636 + qJDD(5) - t1573;
t1564 = -pkin(4) * t1742 + t1712 * qJ(5) + 0.2e1 * qJD(5) * t1672 - t1663 * t1636 + t1574;
t1563 = -t1696 * t1580 + t1697 * t1582;
t1561 = t1697 * t1580 + t1696 * t1582;
t1559 = -t1696 * t1576 + t1697 * t1578;
t1557 = t1697 * t1576 + t1696 * t1578;
t1555 = -t1699 * t1573 + t1702 * t1574;
t1554 = t1702 * t1573 + t1699 * t1574;
t1549 = t1703 * t1555 + t1700 * t1602;
t1548 = t1700 * t1555 - t1703 * t1602;
t1547 = t1702 * t1564 + t1699 * t1565;
t1546 = t1699 * t1564 - t1702 * t1565;
t1545 = t1703 * t1547 + t1700 * t1566;
t1544 = t1700 * t1547 - t1703 * t1566;
t1543 = -t1696 * t1548 + t1697 * t1549;
t1542 = t1697 * t1548 + t1696 * t1549;
t1541 = -t1696 * t1544 + t1697 * t1545;
t1540 = t1697 * t1544 + t1696 * t1545;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1683, -t1682, 0, -t1701 * t1684 - t1704 * t1720, 0, 0, 0, 0, 0, 0, -t1704 * t1679 - t1697 * t1725, t1704 * t1678 + t1696 * t1725, t1704 * t1680 - t1701 * t1681, t1704 * t1629 - t1701 * t1673, 0, 0, 0, 0, 0, 0, t1704 * t1590 + t1701 * t1656, t1704 * t1607 + t1701 * t1657, t1704 * t1596 + t1701 * t1638, t1704 * t1568 - t1701 * t1653, 0, 0, 0, 0, 0, 0, t1704 * t1559 + t1763, t1771, t1769, t1704 * t1543 + t1701 * t1554, 0, 0, 0, 0, 0, 0, t1704 * t1563 + t1763, t1769, -t1771, t1704 * t1541 + t1701 * t1546; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1682, t1683, 0, t1704 * t1684 - t1701 * t1720, 0, 0, 0, 0, 0, 0, -t1701 * t1679 + t1697 * t1724, t1701 * t1678 - t1696 * t1724, t1701 * t1680 + t1704 * t1681, t1701 * t1629 + t1704 * t1673, 0, 0, 0, 0, 0, 0, t1701 * t1590 - t1704 * t1656, t1701 * t1607 - t1704 * t1657, t1701 * t1596 - t1704 * t1638, t1701 * t1568 + t1704 * t1653, 0, 0, 0, 0, 0, 0, t1701 * t1559 - t1761, t1772, t1770, t1701 * t1543 - t1704 * t1554, 0, 0, 0, 0, 0, 0, t1701 * t1563 - t1761, t1770, -t1772, t1701 * t1541 - t1704 * t1546; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1628, 0, 0, 0, 0, 0, 0, t1589, t1606, t1595, t1567, 0, 0, 0, 0, 0, 0, t1557, -t1556, t1766, t1542, 0, 0, 0, 0, 0, 0, t1561, t1766, t1556, t1540; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1705, -qJDD(1), 0, -t1720, 0, 0, 0, 0, 0, 0, -t1679, t1678, t1680, t1629, 0, 0, 0, 0, 0, 0, t1590, t1607, t1596, t1568, 0, 0, 0, 0, 0, 0, t1559, t1562, t1765, t1543, 0, 0, 0, 0, 0, 0, t1563, t1765, -t1562, t1541; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1705, 0, t1684, 0, 0, 0, 0, 0, 0, t1690, -t1726, t1681, t1673, 0, 0, 0, 0, 0, 0, -t1656, -t1657, -t1638, t1653, 0, 0, 0, 0, 0, 0, -t1754, t1591, -t1746, -t1554, 0, 0, 0, 0, 0, 0, -t1754, -t1746, -t1591, -t1546; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1628, 0, 0, 0, 0, 0, 0, t1589, t1606, t1595, t1567, 0, 0, 0, 0, 0, 0, t1557, -t1556, t1766, t1542, 0, 0, 0, 0, 0, 0, t1561, t1766, t1556, t1540; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1732, t1686, t1690, t1660, 0, 0, 0, 0, 0, 0, t1621, t1633, t1623, t1588, 0, 0, 0, 0, 0, 0, t1578, -t1577, t1760, t1549, 0, 0, 0, 0, 0, 0, t1582, t1760, t1577, t1545; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1686, -t1693 * t1705, -t1726, t1659, 0, 0, 0, 0, 0, 0, t1620, t1632, t1622, t1587, 0, 0, 0, 0, 0, 0, t1576, -t1575, t1759, t1548, 0, 0, 0, 0, 0, 0, t1580, t1759, t1575, t1544; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1690, t1726, -t1681, -t1673, 0, 0, 0, 0, 0, 0, t1656, t1657, t1638, -t1653, 0, 0, 0, 0, 0, 0, t1754, -t1591, t1746, t1554, 0, 0, 0, 0, 0, 0, t1754, t1746, t1591, t1546; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1651, t1655, -t1718, t1616, 0, 0, 0, 0, 0, 0, t1753, -t1593, t1745, t1555, 0, 0, 0, 0, 0, 0, t1753, t1745, t1593, t1547; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1654, t1666, -t1748, t1615, 0, 0, 0, 0, 0, 0, -t1608, -t1710, t1625, -t1602, 0, 0, 0, 0, 0, 0, -t1609, t1625, t1710, -t1566; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1656, t1657, t1638, -t1653, 0, 0, 0, 0, 0, 0, t1754, -t1591, t1746, t1554, 0, 0, 0, 0, 0, 0, t1754, t1746, t1591, t1546; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1749, -t1617, t1714, t1574, 0, 0, 0, 0, 0, 0, t1749, t1714, t1617, t1564; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1618, t1750, -t1612, t1573, 0, 0, 0, 0, 0, 0, t1618, -t1612, -t1750, -t1565; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1608, t1710, -t1625, t1602, 0, 0, 0, 0, 0, 0, t1609, -t1625, -t1710, t1566; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1749, t1714, t1617, t1564; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1609, -t1625, -t1710, t1566; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1618, t1612, t1750, t1565;];
f_new_reg = t1;
