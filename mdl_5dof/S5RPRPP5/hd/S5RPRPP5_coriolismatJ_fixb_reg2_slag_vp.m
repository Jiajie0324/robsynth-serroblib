% Calculate inertial parameters regressor of coriolis matrix for
% S5RPRPP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:16
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RPRPP5_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPP5_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPP5_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S5RPRPP5_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:16:47
% EndTime: 2019-12-31 18:16:48
% DurationCPUTime: 0.95s
% Computational Cost: add. (371->115), mult. (606->100), div. (0->0), fcn. (442->2), ass. (0->74)
t53 = cos(qJ(3));
t45 = t53 * qJ(4);
t52 = sin(qJ(3));
t88 = pkin(3) + pkin(4);
t90 = -t88 * t52 + t45;
t24 = -t52 * pkin(3) + t45;
t37 = t52 * qJD(4);
t58 = t24 * qJD(3) + t37;
t89 = t88 / 0.2e1;
t86 = t53 * pkin(3);
t85 = t90 * qJD(3) + t37;
t14 = qJ(2) - t90;
t81 = t52 * qJ(4);
t16 = -t88 * t53 - t81;
t1 = t14 * t16;
t84 = t1 * qJD(1);
t2 = -t14 * t53 + t16 * t52;
t83 = t2 * qJD(1);
t3 = t14 * t52 + t16 * t53;
t82 = t3 * qJD(1);
t55 = -pkin(1) - pkin(6);
t77 = qJ(5) + t55;
t18 = t77 * t52;
t19 = t77 * t53;
t6 = t18 * t52 + t19 * t53;
t80 = t6 * qJD(1);
t20 = qJ(2) - t24;
t23 = t81 + t86;
t8 = t20 * t53 + t23 * t52;
t79 = t8 * qJD(1);
t9 = -t20 * t52 + t23 * t53;
t78 = t9 * qJD(1);
t76 = qJD(2) * t53;
t10 = t81 + (t89 + pkin(3) / 0.2e1 + pkin(4) / 0.2e1) * t53;
t75 = t10 * qJD(1);
t74 = t14 * qJD(1);
t73 = t18 * qJD(3);
t72 = t20 * qJD(1);
t50 = t52 ^ 2;
t51 = t53 ^ 2;
t62 = t50 / 0.2e1 + t51 / 0.2e1;
t21 = 0.1e1 / 0.2e1 + t62;
t71 = t21 * qJD(1);
t28 = t50 + t51;
t70 = t28 * qJD(1);
t29 = t50 - t51;
t69 = t29 * qJD(1);
t26 = t29 * qJD(3);
t38 = t52 * qJD(3);
t43 = t53 * qJD(1);
t42 = t53 * qJD(3);
t68 = t53 * qJD(4);
t67 = qJ(2) * qJD(3);
t47 = qJD(1) * qJ(2);
t66 = t23 * t72;
t65 = t20 * t43;
t64 = t55 * t38;
t63 = t55 * t42;
t61 = t52 * t47;
t60 = t53 * t47;
t59 = t51 * qJD(4) - t76;
t57 = qJD(2) - t68;
t44 = qJD(2) * t52;
t56 = -t52 * t68 + t44;
t49 = qJ(2) * qJD(2);
t48 = qJ(4) * qJD(4);
t46 = qJD(3) * qJ(4);
t41 = t51 * qJD(1);
t39 = t52 * qJD(1);
t31 = t52 * t43;
t30 = t52 * t42;
t22 = -0.1e1 / 0.2e1 + t62;
t11 = -t86 / 0.2e1 + (t89 - pkin(4) / 0.2e1) * t53;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), t49, -t30, t26, 0, t30, 0, 0, t53 * t67 + t44, -t52 * t67 + t76, 0, t49, -t30, 0, -t26, 0, 0, t30, t8 * qJD(3) + t56, 0, -t9 * qJD(3) + t59, (qJD(3) * t23 + t57) * t20, -t30, -t26, 0, t30, 0, 0, -t2 * qJD(3) + t56, t3 * qJD(3) + t59, t28 * qJD(5), -t1 * qJD(3) + t6 * qJD(5) + t57 * t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(1), t47, 0, 0, 0, 0, 0, 0, t39, t43, 0, t47, 0, 0, 0, 0, 0, 0, t39, 0, -t43, t72, 0, 0, 0, 0, 0, 0, t39, -t43, 0, t22 * qJD(5) + t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, t69, -t38, t31, -t42, 0, t60 - t64, -t61 - t63, 0, 0, -t31, -t38, -t69, 0, t42, t31, -t64 + t79, -t58, t63 - t78, t58 * t55 + t66, -t31, -t69, t38, t31, -t42, 0, -t73 - t83, t19 * qJD(3) + t82, t85, -t84 + (t19 * qJ(4) - t18 * t88) * qJD(3) + t18 * qJD(4) + t11 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, -t38, t41, t64 - t65, 0, 0, 0, 0, 0, 0, -t31, t41, t38, -t14 * t43 + t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, t22 * qJD(2) + t11 * qJD(3) + t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(1), -t47, 0, 0, 0, 0, 0, 0, -t39, -t43, 0, -t47, 0, 0, 0, 0, 0, 0, -t39, 0, t43, -t72, 0, 0, 0, 0, 0, 0, -t39, t43, 0, t21 * qJD(5) - t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t38, -t42, 0, 0, 0, 0, 0, 0, 0, 0, -t38, 0, t42, t58, 0, 0, 0, 0, 0, 0, -t38, t42, 0, t85; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, -t69, 0, -t31, 0, 0, -t60, t61, 0, 0, t31, 0, t69, 0, 0, -t31, -t79, 0, t78, -t66, t31, t69, 0, -t31, 0, 0, t53 * qJD(5) + t83, t52 * qJD(5) - t82, 0, t10 * qJD(5) + t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(4), t48, 0, 0, 0, 0, 0, 0, 0, qJD(4), 0, t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3), t46, 0, 0, 0, 0, 0, 0, 0, qJD(3), 0, t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, t39, 0, t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, 0, -t41, t65, 0, 0, 0, 0, 0, 0, t31, -t41, 0, (-qJD(5) + t74) * t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3), -t46, 0, 0, 0, 0, 0, 0, 0, -qJD(3), 0, -t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t42, -t38, -t70, -t21 * qJD(2) - t10 * qJD(3) + t68 - t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t43, -t39, 0, -t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t4;
