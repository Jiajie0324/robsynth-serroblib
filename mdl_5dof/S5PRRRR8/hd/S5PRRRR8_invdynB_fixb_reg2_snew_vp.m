% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRRRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d3,d4,d5,theta1]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:17
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRRRR8_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR8_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR8_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRR8_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRR8_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5PRRRR8_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:16:54
% EndTime: 2019-12-05 17:17:20
% DurationCPUTime: 19.22s
% Computational Cost: add. (80250->707), mult. (160151->1154), div. (0->0), fcn. (117973->12), ass. (0->509)
t678 = sin(qJ(5));
t679 = sin(qJ(4));
t680 = sin(qJ(3));
t683 = cos(qJ(4));
t684 = cos(qJ(3));
t630 = (t679 * t684 + t680 * t683) * qJD(2);
t669 = qJD(3) + qJD(4);
t682 = cos(qJ(5));
t596 = t678 * t630 - t682 * t669;
t598 = t682 * t630 + t678 * t669;
t552 = t598 * t596;
t757 = qJD(2) * qJD(3);
t745 = t684 * t757;
t755 = t680 * qJDD(2);
t637 = t745 + t755;
t664 = t684 * qJDD(2);
t746 = t680 * t757;
t638 = t664 - t746;
t741 = t679 * t637 - t683 * t638;
t556 = -t630 * qJD(4) - t741;
t692 = qJDD(5) - t556;
t791 = -t552 + t692;
t799 = t678 * t791;
t760 = qJD(2) * t680;
t628 = -t683 * t684 * qJD(2) + t679 * t760;
t586 = t630 * t628;
t668 = qJDD(3) + qJDD(4);
t790 = -t586 + t668;
t798 = t679 * t790;
t797 = t682 * t791;
t796 = t683 * t790;
t618 = t669 * t628;
t691 = t628 * qJD(4) - t683 * t637 - t679 * t638;
t795 = t691 + t618;
t674 = sin(pkin(5));
t676 = cos(pkin(5));
t673 = sin(pkin(10));
t675 = cos(pkin(10));
t744 = t673 * g(1) - t675 * g(2);
t762 = g(3) - qJDD(1);
t794 = -t674 * t762 + t676 * t744;
t793 = t673 * t762;
t792 = t675 * t762;
t620 = qJD(5) + t628;
t565 = t620 * t596;
t748 = t596 * qJD(5) - t678 * t668 + t682 * t691;
t481 = t748 + t565;
t687 = qJD(2) ^ 2;
t654 = t680 * t687 * t684;
t646 = qJDD(3) + t654;
t742 = -t682 * t668 - t678 * t691;
t476 = (qJD(5) - t620) * t598 + t742;
t537 = (qJD(4) - t669) * t630 + t741;
t645 = t675 * g(1) + t673 * g(2);
t593 = -t675 * t645 - t673 * t744;
t592 = -t673 * t645 + t675 * t744;
t594 = t596 ^ 2;
t595 = t598 ^ 2;
t619 = t620 ^ 2;
t626 = t628 ^ 2;
t627 = t630 ^ 2;
t788 = t669 ^ 2;
t787 = pkin(4) * t679;
t681 = sin(qJ(2));
t685 = cos(qJ(2));
t568 = -t681 * t645 - t794 * t685;
t569 = -t685 * t645 + t794 * t681;
t511 = t681 * t568 + t685 * t569;
t786 = pkin(6) * t511;
t785 = t620 * t678;
t784 = t620 * t682;
t783 = t669 * t679;
t782 = t669 * t683;
t670 = t680 ^ 2;
t781 = t670 * t687;
t671 = t684 ^ 2;
t666 = t671 * t687;
t614 = t674 * t744 + t676 * t762;
t689 = -t687 * pkin(2) + qJDD(2) * pkin(7) + t569;
t528 = -t680 * t614 + t684 * t689;
t649 = qJD(3) * pkin(3) - pkin(8) * t760;
t492 = -pkin(3) * t666 + t638 * pkin(8) - qJD(3) * t649 + t528;
t527 = t684 * t614 + t680 * t689;
t688 = -t527 + (-t637 + t745) * pkin(8) + t646 * pkin(3);
t423 = t679 * t492 - t683 * t688;
t582 = t628 * pkin(4) - t630 * pkin(9);
t408 = -t668 * pkin(4) - t788 * pkin(9) + t630 * t582 + t423;
t779 = t678 * t408;
t496 = t552 + t692;
t778 = t678 * t496;
t560 = -qJDD(2) * pkin(2) - t687 * pkin(7) + t568;
t515 = -t638 * pkin(3) - pkin(8) * t666 + t649 * t760 + t560;
t777 = t679 * t515;
t576 = t586 + t668;
t776 = t679 * t576;
t424 = t683 * t492 + t679 * t688;
t363 = -t683 * t423 + t679 * t424;
t775 = t680 * t363;
t774 = t680 * t560;
t773 = t680 * t646;
t647 = qJDD(3) - t654;
t772 = t680 * t647;
t771 = t681 * t614;
t770 = t682 * t408;
t769 = t682 * t496;
t768 = t683 * t515;
t767 = t683 * t576;
t766 = t684 * t363;
t765 = t684 * t560;
t764 = t684 * t647;
t763 = t685 * t614;
t409 = -t788 * pkin(4) + t668 * pkin(9) - t628 * t582 + t424;
t422 = t795 * pkin(9) + (t630 * t669 - t556) * pkin(4) + t515;
t359 = t682 * t409 + t678 * t422;
t761 = t670 + t671;
t756 = qJDD(2) * t674;
t754 = t681 * qJDD(2);
t753 = t685 * qJDD(2);
t752 = t685 * t586;
t751 = t679 * t552;
t750 = t681 * t586;
t749 = t683 * t552;
t747 = -pkin(4) * t683 - pkin(3);
t358 = t678 * t409 - t682 * t422;
t364 = t679 * t423 + t683 * t424;
t458 = t680 * t527 + t684 * t528;
t740 = t685 * t654;
t739 = t681 * t654;
t457 = t684 * t527 - t680 * t528;
t640 = t761 * qJDD(2);
t643 = t666 + t781;
t590 = t685 * t640 - t681 * t643;
t737 = pkin(6) * t590 + t457 * t681;
t641 = -t681 * t687 + t753;
t736 = -pkin(6) * t641 - t771;
t710 = t685 * t687 + t754;
t735 = -pkin(6) * t710 + t763;
t311 = t678 * t358 + t682 * t359;
t305 = t679 * t311 - t683 * t408;
t306 = t683 * t311 + t679 * t408;
t271 = -t680 * t305 + t684 * t306;
t310 = -t682 * t358 + t678 * t359;
t734 = t271 * t681 - t310 * t685;
t320 = t684 * t364 - t775;
t733 = t320 * t681 - t515 * t685;
t480 = -t565 + t748;
t412 = -t476 * t682 - t678 * t480;
t512 = t594 + t595;
t383 = t679 * t412 + t683 * t512;
t384 = t683 * t412 - t679 * t512;
t327 = -t680 * t383 + t684 * t384;
t410 = -t476 * t678 + t682 * t480;
t732 = t327 * t681 - t410 * t685;
t478 = (-qJD(5) - t620) * t598 - t742;
t413 = t682 * t478 + t481 * t678;
t551 = -t595 + t594;
t391 = t679 * t413 + t683 * t551;
t392 = t683 * t413 - t679 * t551;
t331 = -t680 * t391 + t684 * t392;
t411 = -t678 * t478 + t481 * t682;
t731 = t331 * t681 + t411 * t685;
t529 = -t619 - t594;
t441 = t682 * t529 - t799;
t393 = t679 * t441 + t683 * t478;
t394 = t683 * t441 - t679 * t478;
t337 = -t680 * t393 + t684 * t394;
t440 = t678 * t529 + t797;
t730 = t337 * t681 - t440 * t685;
t550 = -t595 - t619;
t444 = -t678 * t550 - t769;
t395 = t679 * t444 + t683 * t481;
t396 = t683 * t444 - t679 * t481;
t342 = -t680 * t395 + t684 * t396;
t443 = t682 * t550 - t778;
t729 = t342 * t681 - t443 * t685;
t564 = -t595 + t619;
t454 = -t678 * t564 + t797;
t399 = t679 * t454 + t683 * t480;
t401 = t683 * t454 - t679 * t480;
t345 = -t680 * t399 + t684 * t401;
t452 = -t682 * t564 - t799;
t728 = t345 * t681 + t452 * t685;
t563 = t594 - t619;
t455 = t682 * t563 - t778;
t400 = t679 * t455 + t683 * t476;
t402 = t683 * t455 - t679 * t476;
t346 = -t680 * t400 + t684 * t402;
t453 = -t678 * t563 - t769;
t727 = t346 * t681 + t453 * t685;
t508 = -t598 * qJD(5) - t742;
t469 = -t678 * t508 + t596 * t784;
t434 = t679 * t469 + t749;
t436 = t683 * t469 - t751;
t375 = -t680 * t434 + t684 * t436;
t468 = -t682 * t508 - t596 * t785;
t726 = t375 * t681 + t468 * t685;
t471 = -t598 * t785 - t682 * t748;
t435 = t679 * t471 - t749;
t437 = t683 * t471 + t751;
t376 = -t680 * t435 + t684 * t437;
t470 = -t598 * t784 + t678 * t748;
t725 = t376 * t681 + t470 * t685;
t503 = (-t596 * t682 + t598 * t678) * t620;
t460 = t679 * t503 - t683 * t692;
t461 = t683 * t503 + t679 * t692;
t398 = -t680 * t460 + t684 * t461;
t502 = (t596 * t678 + t598 * t682) * t620;
t724 = t398 * t681 + t502 * t685;
t536 = (qJD(4) + t669) * t630 + t741;
t462 = -t679 * t536 - t683 * t795;
t464 = -t683 * t536 + t679 * t795;
t405 = -t680 * t462 + t684 * t464;
t585 = -t627 + t626;
t723 = t405 * t681 + t585 * t685;
t541 = -t618 + t691;
t463 = -t537 * t679 + t683 * t541;
t465 = -t537 * t683 - t679 * t541;
t406 = -t680 * t463 + t684 * t465;
t559 = -t626 - t627;
t722 = t406 * t681 - t559 * t685;
t570 = -t788 - t626;
t513 = t679 * t570 + t796;
t514 = t683 * t570 - t798;
t446 = -t680 * t513 + t684 * t514;
t721 = t446 * t681 - t536 * t685;
t720 = t458 * t681 - t560 * t685;
t609 = -t627 - t788;
t542 = t683 * t609 - t776;
t543 = -t679 * t609 - t767;
t467 = -t680 * t542 + t684 * t543;
t719 = t467 * t681 + t685 * t795;
t616 = -t627 + t788;
t546 = t683 * t616 + t798;
t548 = -t679 * t616 + t796;
t474 = -t680 * t546 + t684 * t548;
t718 = t474 * t681 + t541 * t685;
t615 = t626 - t788;
t547 = t679 * t615 + t767;
t549 = t683 * t615 - t776;
t475 = -t680 * t547 + t684 * t549;
t717 = t475 * t681 + t537 * t685;
t561 = (-t628 * t679 - t630 * t683) * t669;
t562 = (-t628 * t683 + t630 * t679) * t669;
t501 = -t680 * t561 + t684 * t562;
t716 = t501 * t681 - t668 * t685;
t510 = t685 * t568 - t681 * t569;
t636 = 0.2e1 * t745 + t755;
t639 = t664 - 0.2e1 * t746;
t588 = -t680 * t636 + t684 * t639;
t644 = t666 - t781;
t715 = t588 * t681 + t644 * t685;
t686 = qJD(3) ^ 2;
t653 = -t666 - t686;
t606 = t684 * t653 - t773;
t714 = t606 * t681 + t639 * t685;
t651 = -t686 - t781;
t608 = -t680 * t651 - t764;
t713 = t608 * t681 - t636 * t685;
t623 = t710 * t676;
t712 = t675 * t623 + t673 * t641;
t580 = t673 * t623 - t675 * t641;
t711 = t640 * t681 + t643 * t685;
t634 = t761 * t757;
t709 = -qJDD(3) * t685 + t634 * t681;
t523 = t683 * t556 + t628 * t783;
t524 = -t679 * t556 + t628 * t782;
t450 = -t680 * t523 + t684 * t524;
t708 = t450 * t681 + t752;
t525 = t630 * t782 - t679 * t691;
t526 = -t630 * t783 - t683 * t691;
t451 = -t680 * t525 + t684 * t526;
t707 = t451 * t681 - t752;
t652 = t666 - t686;
t605 = t684 * t652 - t772;
t706 = t605 * t681 - t684 * t753;
t635 = t684 * t646;
t650 = t686 - t781;
t607 = -t680 * t650 + t635;
t705 = t607 * t681 - t680 * t753;
t611 = -t680 * t638 - t671 * t757;
t704 = t611 * t681 - t740;
t612 = t684 * t637 - t670 * t757;
t703 = t612 * t681 + t740;
t258 = pkin(8) * t306 + (-pkin(9) * t679 + t747) * t310;
t264 = -pkin(8) * t305 + (-pkin(9) * t683 + t787) * t310;
t270 = t684 * t305 + t680 * t306;
t245 = -pkin(7) * t270 - t680 * t258 + t684 * t264;
t254 = -pkin(2) * t270 - pkin(3) * t305 + pkin(4) * t408 - pkin(9) * t311;
t263 = t685 * t271 + t681 * t310;
t702 = pkin(6) * t263 + t245 * t681 + t254 * t685;
t307 = -pkin(9) * t410 - t310;
t278 = pkin(8) * t384 + t679 * t307 + t410 * t747;
t281 = -pkin(8) * t383 + t683 * t307 + t410 * t787;
t326 = t684 * t383 + t680 * t384;
t256 = -pkin(7) * t326 - t680 * t278 + t684 * t281;
t272 = -pkin(2) * t326 - pkin(3) * t383 - pkin(4) * t512 - pkin(9) * t412 - t311;
t314 = t685 * t327 + t681 * t410;
t701 = pkin(6) * t314 + t256 * t681 + t272 * t685;
t328 = -pkin(4) * t440 + t358;
t360 = -pkin(9) * t440 + t779;
t289 = -pkin(3) * t440 + pkin(8) * t394 + t683 * t328 + t679 * t360;
t298 = -pkin(8) * t393 - t679 * t328 + t683 * t360;
t336 = t684 * t393 + t680 * t394;
t261 = -pkin(7) * t336 - t680 * t289 + t684 * t298;
t293 = -pkin(2) * t336 - pkin(3) * t393 - pkin(4) * t478 - pkin(9) * t441 + t770;
t321 = t685 * t337 + t681 * t440;
t700 = pkin(6) * t321 + t261 * t681 + t293 * t685;
t329 = -pkin(4) * t443 + t359;
t362 = -pkin(9) * t443 + t770;
t291 = -pkin(3) * t443 + pkin(8) * t396 + t683 * t329 + t679 * t362;
t299 = -pkin(8) * t395 - t679 * t329 + t683 * t362;
t341 = t684 * t395 + t680 * t396;
t262 = -pkin(7) * t341 - t680 * t291 + t684 * t299;
t294 = -pkin(2) * t341 - pkin(3) * t395 - pkin(4) * t481 - pkin(9) * t444 - t779;
t322 = t685 * t342 + t681 * t443;
t699 = pkin(6) * t322 + t262 * t681 + t294 * t685;
t319 = t680 * t364 + t766;
t356 = -pkin(3) * t515 + pkin(8) * t364;
t285 = -pkin(7) * t319 - pkin(8) * t766 - t680 * t356;
t304 = -pkin(2) * t319 - pkin(3) * t363;
t315 = t685 * t320 + t681 * t515;
t698 = pkin(6) * t315 + t285 * t681 + t304 * t685;
t340 = -pkin(3) * t559 + pkin(8) * t465 + t364;
t352 = -pkin(8) * t463 - t363;
t404 = t684 * t463 + t680 * t465;
t295 = -pkin(7) * t404 - t680 * t340 + t684 * t352;
t365 = -pkin(2) * t404 - pkin(3) * t463;
t387 = t685 * t406 + t681 * t559;
t697 = pkin(6) * t387 + t295 * t681 + t365 * t685;
t417 = -pkin(3) * t536 + pkin(8) * t514 - t768;
t445 = t684 * t513 + t680 * t514;
t447 = -pkin(8) * t513 + t777;
t353 = -pkin(7) * t445 - t680 * t417 + t684 * t447;
t361 = -pkin(2) * t445 - pkin(3) * t513 + t423;
t415 = t685 * t446 + t681 * t536;
t696 = pkin(6) * t415 + t353 * t681 + t361 * t685;
t420 = pkin(3) * t795 + pkin(8) * t543 + t777;
t459 = -pkin(8) * t542 + t768;
t466 = t684 * t542 + t680 * t543;
t357 = -pkin(7) * t466 - t680 * t420 + t684 * t459;
t366 = -pkin(2) * t466 - pkin(3) * t542 + t424;
t425 = t685 * t467 - t681 * t795;
t695 = pkin(6) * t425 + t357 * t681 + t366 * t685;
t602 = t680 * t653 + t635;
t498 = -pkin(2) * t602 + t527;
t521 = -pkin(7) * t602 + t774;
t566 = t685 * t606 - t681 * t639;
t694 = pkin(6) * t566 + t498 * t685 + t521 * t681;
t604 = t684 * t651 - t772;
t499 = -pkin(2) * t604 + t528;
t522 = -pkin(7) * t604 + t765;
t567 = t685 * t608 + t681 * t636;
t693 = pkin(6) * t567 + t499 * t685 + t522 * t681;
t432 = t685 * t458 + t681 * t560;
t690 = pkin(6) * t432 - (-pkin(2) * t685 - pkin(7) * t681) * t457;
t624 = t641 * t676;
t622 = t641 * t674;
t621 = t710 * t674;
t613 = t681 * qJDD(3) + t685 * t634;
t603 = t684 * t650 + t773;
t601 = t680 * t652 + t764;
t600 = (t637 + t745) * t680;
t599 = (t638 - t746) * t684;
t591 = t709 * t676;
t587 = t684 * t636 + t680 * t639;
t584 = t711 * t676;
t583 = t711 * t674;
t581 = -t673 * t624 - t675 * t710;
t579 = t675 * t624 - t673 * t710;
t574 = t685 * t612 - t739;
t573 = t685 * t611 + t739;
t572 = t685 * t607 + t680 * t754;
t571 = t685 * t605 + t681 * t664;
t558 = t685 * t588 - t681 * t644;
t545 = -t763 + (t621 * t674 + t623 * t676) * pkin(6);
t544 = -t771 + (-t622 * t674 - t624 * t676) * pkin(6);
t535 = -t673 * t584 + t675 * t590;
t534 = t675 * t584 + t673 * t590;
t533 = -t674 * t600 + t676 * t703;
t532 = -t674 * t599 + t676 * t704;
t531 = -t674 * t603 + t676 * t705;
t530 = -t674 * t601 + t676 * t706;
t519 = -t674 * t604 + t676 * t713;
t518 = -t674 * t602 + t676 * t714;
t517 = t676 * t604 + t674 * t713;
t516 = t676 * t602 + t674 * t714;
t507 = -t674 * t587 + t676 * t715;
t506 = pkin(2) * t639 + pkin(7) * t606 - t765;
t505 = -pkin(2) * t636 + pkin(7) * t608 + t774;
t504 = t511 * t676;
t500 = t684 * t561 + t680 * t562;
t494 = -pkin(1) * t622 + t674 * t568 + t676 * t735;
t493 = pkin(1) * t621 + t674 * t569 + t676 * t736;
t488 = t685 * t501 + t681 * t668;
t487 = -t510 * t676 + t674 * t614;
t486 = -t510 * t674 - t676 * t614;
t485 = -t673 * t519 + t675 * t567;
t484 = -t673 * t518 + t675 * t566;
t483 = t675 * t519 + t673 * t567;
t482 = t675 * t518 + t673 * t566;
t473 = t684 * t547 + t680 * t549;
t472 = t684 * t546 + t680 * t548;
t449 = t684 * t525 + t680 * t526;
t448 = t684 * t523 + t680 * t524;
t442 = pkin(2) * t643 + pkin(7) * t640 + t458;
t439 = t685 * t451 + t750;
t438 = t685 * t450 - t750;
t433 = -pkin(2) * t560 + pkin(7) * t458;
t431 = -pkin(1) * t486 + t676 * t786;
t430 = t685 * t475 - t681 * t537;
t429 = t685 * t474 - t681 * t541;
t428 = -t673 * t487 + t675 * t511;
t427 = t675 * t487 + t673 * t511;
t426 = -t674 * t500 + t676 * t716;
t416 = t685 * t457 + (-t583 * t674 - t584 * t676) * pkin(6);
t414 = (-t486 * t674 - t487 * t676) * pkin(6);
t403 = t684 * t462 + t680 * t464;
t397 = t684 * t460 + t680 * t461;
t390 = t685 * t405 - t681 * t585;
t389 = -t681 * t499 + t685 * t522 + (-t517 * t674 - t519 * t676) * pkin(6);
t388 = -t681 * t498 + t685 * t521 + (-t516 * t674 - t518 * t676) * pkin(6);
t386 = -t674 * t473 + t676 * t717;
t385 = -t674 * t472 + t676 * t718;
t382 = -t674 * t449 + t676 * t707;
t381 = -t674 * t448 + t676 * t708;
t380 = -t674 * t466 + t676 * t719;
t379 = t676 * t466 + t674 * t719;
t378 = t457 * t674 + t676 * t720;
t377 = -t457 * t676 + t674 * t720;
t374 = t684 * t435 + t680 * t437;
t373 = t684 * t434 + t680 * t436;
t372 = -pkin(1) * t517 - t674 * t505 + t676 * t693;
t371 = -pkin(1) * t516 - t674 * t506 + t676 * t694;
t370 = t685 * t398 - t681 * t502;
t369 = -pkin(1) * t583 - t674 * t442 + t676 * t737;
t368 = -t674 * t445 + t676 * t721;
t367 = t676 * t445 + t674 * t721;
t355 = t685 * t376 - t681 * t470;
t354 = t685 * t375 - t681 * t468;
t351 = -t673 * t378 + t675 * t432;
t350 = t675 * t378 + t673 * t432;
t349 = pkin(2) * t795 + pkin(7) * t467 + t684 * t420 + t680 * t459;
t348 = -t673 * t380 + t675 * t425;
t347 = t675 * t380 + t673 * t425;
t344 = t684 * t400 + t680 * t402;
t343 = t684 * t399 + t680 * t401;
t339 = -t674 * t403 + t676 * t723;
t338 = -pkin(2) * t536 + pkin(7) * t446 + t684 * t417 + t680 * t447;
t335 = -t674 * t404 + t676 * t722;
t334 = t676 * t404 + t674 * t722;
t333 = -t673 * t368 + t675 * t415;
t332 = t675 * t368 + t673 * t415;
t330 = t684 * t391 + t680 * t392;
t325 = -t674 * t397 + t676 * t724;
t324 = t685 * t346 - t681 * t453;
t323 = t685 * t345 - t681 * t452;
t318 = t685 * t331 - t681 * t411;
t317 = -t674 * t374 + t676 * t725;
t316 = -t674 * t373 + t676 * t726;
t313 = -t673 * t335 + t675 * t387;
t312 = t675 * t335 + t673 * t387;
t309 = -(pkin(2) * t681 - pkin(7) * t685) * t457 + (-t377 * t674 - t378 * t676) * pkin(6);
t308 = -pkin(1) * t377 - t674 * t433 + t676 * t690;
t303 = -t674 * t344 + t676 * t727;
t302 = -t674 * t343 + t676 * t728;
t301 = -t674 * t341 + t676 * t729;
t300 = t676 * t341 + t674 * t729;
t297 = -t674 * t336 + t676 * t730;
t296 = t676 * t336 + t674 * t730;
t292 = -pkin(2) * t559 + pkin(7) * t406 + t684 * t340 + t680 * t352;
t290 = -t674 * t330 + t676 * t731;
t288 = t685 * t357 - t681 * t366 + (-t379 * t674 - t380 * t676) * pkin(6);
t287 = -t674 * t326 + t676 * t732;
t286 = t676 * t326 + t674 * t732;
t284 = -t674 * t319 + t676 * t733;
t283 = t676 * t319 + t674 * t733;
t282 = t685 * t353 - t681 * t361 + (-t367 * t674 - t368 * t676) * pkin(6);
t280 = -pkin(2) * t515 + pkin(7) * t320 - pkin(8) * t775 + t684 * t356;
t279 = -pkin(1) * t379 - t674 * t349 + t676 * t695;
t277 = -t673 * t301 + t675 * t322;
t276 = t675 * t301 + t673 * t322;
t275 = -t673 * t297 + t675 * t321;
t274 = t675 * t297 + t673 * t321;
t273 = -pkin(1) * t367 - t674 * t338 + t676 * t696;
t269 = -t673 * t287 + t675 * t314;
t268 = t675 * t287 + t673 * t314;
t267 = -t673 * t284 + t675 * t315;
t266 = t675 * t284 + t673 * t315;
t265 = t685 * t295 - t681 * t365 + (-t334 * t674 - t335 * t676) * pkin(6);
t260 = -pkin(2) * t443 + pkin(7) * t342 + t684 * t291 + t680 * t299;
t259 = -pkin(2) * t440 + pkin(7) * t337 + t684 * t289 + t680 * t298;
t257 = -pkin(1) * t334 - t674 * t292 + t676 * t697;
t255 = -pkin(2) * t410 + pkin(7) * t327 + t684 * t278 + t680 * t281;
t253 = -t674 * t270 + t676 * t734;
t252 = t676 * t270 + t674 * t734;
t251 = t685 * t285 - t681 * t304 + (-t283 * t674 - t284 * t676) * pkin(6);
t250 = -pkin(1) * t283 - t674 * t280 + t676 * t698;
t249 = t685 * t262 - t681 * t294 + (-t300 * t674 - t301 * t676) * pkin(6);
t248 = t685 * t261 - t681 * t293 + (-t296 * t674 - t297 * t676) * pkin(6);
t247 = -t673 * t253 + t675 * t263;
t246 = t675 * t253 + t673 * t263;
t244 = t685 * t256 - t681 * t272 + (-t286 * t674 - t287 * t676) * pkin(6);
t243 = -pkin(2) * t310 + pkin(7) * t271 + t684 * t258 + t680 * t264;
t242 = -pkin(1) * t300 - t674 * t260 + t676 * t699;
t241 = -pkin(1) * t296 - t674 * t259 + t676 * t700;
t240 = -pkin(1) * t286 - t674 * t255 + t676 * t701;
t239 = t685 * t245 - t681 * t254 + (-t252 * t674 - t253 * t676) * pkin(6);
t238 = -pkin(1) * t252 - t674 * t243 + t676 * t702;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t593, 0, 0, 0, 0, 0, 0, t581, t580, 0, t428, 0, 0, 0, 0, 0, 0, t484, t485, t535, t351, 0, 0, 0, 0, 0, 0, t333, t348, t313, t267, 0, 0, 0, 0, 0, 0, t275, t277, t269, t247; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t592, 0, 0, 0, 0, 0, 0, t579, -t712, 0, t427, 0, 0, 0, 0, 0, 0, t482, t483, t534, t350, 0, 0, 0, 0, 0, 0, t332, t347, t312, t266, 0, 0, 0, 0, 0, 0, t274, t276, t268, t246; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t762, 0, 0, 0, 0, 0, 0, t622, -t621, 0, t486, 0, 0, 0, 0, 0, 0, t516, t517, t583, t377, 0, 0, 0, 0, 0, 0, t367, t379, t334, t283, 0, 0, 0, 0, 0, 0, t296, t300, t286, t252; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t793, -t792, -t592, -qJ(1) * t592, 0, 0, -t580, 0, t581, t673 * t756, -qJ(1) * t579 - t673 * t494 + t675 * t544, qJ(1) * t712 - t673 * t493 + t675 * t545, -t673 * t504 + t675 * t510, -qJ(1) * t427 + t675 * t414 - t673 * t431, -t673 * t533 + t675 * t574, -t673 * t507 + t675 * t558, -t673 * t531 + t675 * t572, -t673 * t532 + t675 * t573, -t673 * t530 + t675 * t571, -t673 * t591 + t675 * t613, -qJ(1) * t482 - t673 * t371 + t675 * t388, -qJ(1) * t483 - t673 * t372 + t675 * t389, -qJ(1) * t534 - t673 * t369 + t675 * t416, -qJ(1) * t350 - t673 * t308 + t675 * t309, -t673 * t382 + t675 * t439, -t673 * t339 + t675 * t390, -t673 * t385 + t675 * t429, -t673 * t381 + t675 * t438, -t673 * t386 + t675 * t430, -t673 * t426 + t675 * t488, -qJ(1) * t332 - t673 * t273 + t675 * t282, -qJ(1) * t347 - t673 * t279 + t675 * t288, -qJ(1) * t312 - t673 * t257 + t675 * t265, -qJ(1) * t266 - t673 * t250 + t675 * t251, -t673 * t317 + t675 * t355, -t673 * t290 + t675 * t318, -t673 * t302 + t675 * t323, -t673 * t316 + t675 * t354, -t673 * t303 + t675 * t324, -t673 * t325 + t675 * t370, -qJ(1) * t274 - t673 * t241 + t675 * t248, -qJ(1) * t276 - t673 * t242 + t675 * t249, -qJ(1) * t268 - t673 * t240 + t675 * t244, -qJ(1) * t246 - t673 * t238 + t675 * t239; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t792, -t793, t593, qJ(1) * t593, 0, 0, t712, 0, t579, -t675 * t756, qJ(1) * t581 + t675 * t494 + t673 * t544, qJ(1) * t580 + t675 * t493 + t673 * t545, t675 * t504 + t673 * t510, qJ(1) * t428 + t673 * t414 + t675 * t431, t675 * t533 + t673 * t574, t675 * t507 + t673 * t558, t675 * t531 + t673 * t572, t675 * t532 + t673 * t573, t675 * t530 + t673 * t571, t675 * t591 + t673 * t613, qJ(1) * t484 + t675 * t371 + t673 * t388, qJ(1) * t485 + t675 * t372 + t673 * t389, qJ(1) * t535 + t675 * t369 + t673 * t416, qJ(1) * t351 + t675 * t308 + t673 * t309, t675 * t382 + t673 * t439, t675 * t339 + t673 * t390, t675 * t385 + t673 * t429, t675 * t381 + t673 * t438, t675 * t386 + t673 * t430, t675 * t426 + t673 * t488, qJ(1) * t333 + t675 * t273 + t673 * t282, qJ(1) * t348 + t675 * t279 + t673 * t288, qJ(1) * t313 + t675 * t257 + t673 * t265, qJ(1) * t267 + t675 * t250 + t673 * t251, t675 * t317 + t673 * t355, t675 * t290 + t673 * t318, t675 * t302 + t673 * t323, t675 * t316 + t673 * t354, t675 * t303 + t673 * t324, t675 * t325 + t673 * t370, qJ(1) * t275 + t675 * t241 + t673 * t248, qJ(1) * t277 + t675 * t242 + t673 * t249, qJ(1) * t269 + t675 * t240 + t673 * t244, qJ(1) * t247 + t675 * t238 + t673 * t239; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t744, t645, 0, 0, 0, 0, t621, 0, t622, t676 * qJDD(2), pkin(1) * t624 - t676 * t568 + t674 * t735, -pkin(1) * t623 - t676 * t569 + t674 * t736, t511 * t674, pkin(1) * t487 + t674 * t786, t676 * t600 + t674 * t703, t676 * t587 + t674 * t715, t676 * t603 + t674 * t705, t676 * t599 + t674 * t704, t676 * t601 + t674 * t706, t709 * t674, pkin(1) * t518 + t676 * t506 + t674 * t694, pkin(1) * t519 + t676 * t505 + t674 * t693, pkin(1) * t584 + t676 * t442 + t674 * t737, pkin(1) * t378 + t676 * t433 + t674 * t690, t676 * t449 + t674 * t707, t676 * t403 + t674 * t723, t676 * t472 + t674 * t718, t676 * t448 + t674 * t708, t676 * t473 + t674 * t717, t676 * t500 + t674 * t716, pkin(1) * t368 + t676 * t338 + t674 * t696, pkin(1) * t380 + t676 * t349 + t674 * t695, pkin(1) * t335 + t676 * t292 + t674 * t697, pkin(1) * t284 + t676 * t280 + t674 * t698, t676 * t374 + t674 * t725, t676 * t330 + t674 * t731, t676 * t343 + t674 * t728, t676 * t373 + t674 * t726, t676 * t344 + t674 * t727, t676 * t397 + t674 * t724, pkin(1) * t297 + t676 * t259 + t674 * t700, pkin(1) * t301 + t676 * t260 + t674 * t699, pkin(1) * t287 + t676 * t255 + t674 * t701, pkin(1) * t253 + t676 * t243 + t674 * t702;];
tauB_reg = t1;
