% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRRRR8
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d3,d4,d5,theta1]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:17
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRRRR8_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR8_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR8_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRR8_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRR8_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5PRRRR8_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:17:40
% EndTime: 2019-12-05 17:17:44
% DurationCPUTime: 3.74s
% Computational Cost: add. (18002->239), mult. (35963->371), div. (0->0), fcn. (26698->12), ass. (0->207)
t1562 = sin(pkin(5));
t1564 = cos(pkin(5));
t1561 = sin(pkin(10));
t1563 = cos(pkin(10));
t1596 = t1561 * g(1) - t1563 * g(2);
t1615 = -g(3) + qJDD(1);
t1623 = t1562 * t1615 + t1564 * t1596;
t1567 = sin(qJ(4));
t1571 = cos(qJ(4));
t1572 = cos(qJ(3));
t1613 = qJD(2) * t1572;
t1568 = sin(qJ(3));
t1614 = qJD(2) * t1568;
t1526 = t1567 * t1614 - t1571 * t1613;
t1519 = qJD(5) + t1526;
t1622 = qJD(5) + t1519;
t1528 = (t1567 * t1572 + t1568 * t1571) * qJD(2);
t1557 = qJD(3) + qJD(4);
t1566 = sin(qJ(5));
t1570 = cos(qJ(5));
t1508 = t1566 * t1528 - t1570 * t1557;
t1621 = t1508 ^ 2;
t1510 = t1570 * t1528 + t1566 * t1557;
t1620 = t1510 ^ 2;
t1619 = t1519 ^ 2;
t1618 = t1526 ^ 2;
t1617 = t1528 ^ 2;
t1616 = t1557 ^ 2;
t1612 = t1510 * t1508;
t1611 = t1528 * t1526;
t1559 = t1572 ^ 2;
t1575 = qJD(2) ^ 2;
t1610 = t1559 * t1575;
t1540 = -t1563 * g(1) - t1561 * g(2);
t1569 = sin(qJ(2));
t1573 = cos(qJ(2));
t1500 = t1573 * t1540 + t1569 * t1623;
t1495 = -t1575 * pkin(2) + qJDD(2) * pkin(7) + t1500;
t1609 = t1568 * t1495;
t1608 = t1568 * t1575;
t1607 = qJD(4) - t1557;
t1606 = qJD(5) - t1519;
t1517 = -t1562 * t1596 + t1564 * t1615;
t1482 = t1572 * t1495 + t1568 * t1517;
t1556 = t1572 * qJDD(2);
t1602 = qJD(3) * t1614;
t1534 = t1556 - t1602;
t1545 = qJD(3) * pkin(3) - pkin(8) * t1614;
t1469 = -pkin(3) * t1610 + t1534 * pkin(8) - qJD(3) * t1545 + t1482;
t1601 = qJD(3) * t1613;
t1604 = t1568 * qJDD(2);
t1533 = t1601 + t1604;
t1576 = qJDD(3) * pkin(3) - t1533 * pkin(8) - t1609 + (pkin(8) * qJD(2) * qJD(3) + pkin(3) * t1608 + t1517) * t1572;
t1445 = t1571 * t1469 + t1567 * t1576;
t1558 = t1568 ^ 2;
t1605 = t1558 + t1559;
t1603 = qJDD(3) + qJDD(4);
t1444 = -t1567 * t1469 + t1571 * t1576;
t1582 = -t1571 * t1533 - t1567 * t1534;
t1492 = -t1526 * qJD(4) - t1582;
t1599 = t1557 * t1526 - t1492;
t1598 = -t1566 * t1492 + t1570 * t1603;
t1597 = t1567 * t1533 - t1571 * t1534;
t1595 = t1569 * t1540 - t1573 * t1623;
t1504 = t1526 * pkin(4) - t1528 * pkin(9);
t1439 = -t1616 * pkin(4) + t1603 * pkin(9) - t1526 * t1504 + t1445;
t1494 = -qJDD(2) * pkin(2) - t1575 * pkin(7) + t1595;
t1476 = -t1534 * pkin(3) - pkin(8) * t1610 + t1545 * t1614 + t1494;
t1484 = (qJD(4) + t1557) * t1528 + t1597;
t1443 = t1484 * pkin(4) + t1599 * pkin(9) + t1476;
t1419 = -t1566 * t1439 + t1570 * t1443;
t1420 = t1570 * t1439 + t1566 * t1443;
t1404 = -t1566 * t1419 + t1570 * t1420;
t1438 = -t1603 * pkin(4) - t1616 * pkin(9) + t1528 * t1504 - t1444;
t1401 = t1567 * t1404 - t1571 * t1438;
t1402 = t1571 * t1404 + t1567 * t1438;
t1392 = -t1568 * t1401 + t1572 * t1402;
t1403 = t1570 * t1419 + t1566 * t1420;
t1594 = t1392 * t1569 - t1403 * t1573;
t1421 = t1571 * t1444 + t1567 * t1445;
t1422 = -t1567 * t1444 + t1571 * t1445;
t1408 = -t1568 * t1421 + t1572 * t1422;
t1593 = t1408 * t1569 - t1476 * t1573;
t1461 = -t1606 * t1510 + t1598;
t1578 = -t1570 * t1492 - t1566 * t1603;
t1463 = t1606 * t1508 + t1578;
t1441 = t1570 * t1461 - t1566 * t1463;
t1473 = -t1620 - t1621;
t1429 = t1567 * t1441 - t1571 * t1473;
t1430 = t1571 * t1441 + t1567 * t1473;
t1412 = -t1568 * t1429 + t1572 * t1430;
t1440 = t1566 * t1461 + t1570 * t1463;
t1592 = t1412 * t1569 - t1440 * t1573;
t1577 = -t1528 * qJD(4) - qJDD(5) - t1597;
t1470 = -t1577 - t1612;
t1483 = -t1619 - t1621;
t1449 = -t1566 * t1470 + t1570 * t1483;
t1460 = t1622 * t1510 - t1598;
t1432 = t1567 * t1449 - t1571 * t1460;
t1433 = t1571 * t1449 + t1567 * t1460;
t1416 = -t1568 * t1432 + t1572 * t1433;
t1448 = t1570 * t1470 + t1566 * t1483;
t1591 = t1416 * t1569 - t1448 * t1573;
t1471 = t1577 - t1612;
t1490 = -t1619 - t1620;
t1451 = t1570 * t1471 - t1566 * t1490;
t1462 = -t1622 * t1508 - t1578;
t1434 = t1567 * t1451 - t1571 * t1462;
t1435 = t1571 * t1451 + t1567 * t1462;
t1418 = -t1568 * t1434 + t1572 * t1435;
t1450 = t1566 * t1471 + t1570 * t1490;
t1590 = t1418 * t1569 - t1450 * t1573;
t1485 = -t1607 * t1528 - t1597;
t1487 = t1607 * t1526 + t1582;
t1456 = t1567 * t1485 + t1571 * t1487;
t1457 = t1571 * t1485 - t1567 * t1487;
t1437 = -t1568 * t1456 + t1572 * t1457;
t1493 = -t1617 - t1618;
t1589 = t1437 * t1569 - t1493 * t1573;
t1501 = -t1616 - t1618;
t1502 = t1603 - t1611;
t1474 = t1567 * t1501 + t1571 * t1502;
t1475 = t1571 * t1501 - t1567 * t1502;
t1453 = -t1568 * t1474 + t1572 * t1475;
t1588 = t1453 * t1569 - t1484 * t1573;
t1481 = t1572 * t1517 - t1609;
t1455 = -t1568 * t1481 + t1572 * t1482;
t1587 = t1455 * t1569 - t1494 * t1573;
t1503 = -t1603 - t1611;
t1515 = -t1616 - t1617;
t1488 = t1567 * t1503 + t1571 * t1515;
t1489 = t1571 * t1503 - t1567 * t1515;
t1459 = -t1568 * t1488 + t1572 * t1489;
t1586 = t1459 * t1569 + t1573 * t1599;
t1585 = t1500 * t1569 - t1573 * t1595;
t1548 = t1572 * t1608;
t1541 = qJDD(3) + t1548;
t1574 = qJD(3) ^ 2;
t1547 = -t1574 - t1610;
t1513 = -t1568 * t1541 + t1572 * t1547;
t1535 = t1556 - 0.2e1 * t1602;
t1584 = t1513 * t1569 + t1535 * t1573;
t1542 = -qJDD(3) + t1548;
t1546 = -t1558 * t1575 - t1574;
t1514 = t1572 * t1542 - t1568 * t1546;
t1532 = 0.2e1 * t1601 + t1604;
t1583 = t1514 * t1569 - t1532 * t1573;
t1536 = t1605 * qJDD(2);
t1539 = t1605 * t1575;
t1581 = t1536 * t1569 + t1539 * t1573;
t1580 = t1573 * qJDD(2) - t1569 * t1575;
t1538 = -t1569 * qJDD(2) - t1573 * t1575;
t1523 = t1580 * t1564;
t1522 = t1538 * t1564;
t1521 = t1580 * t1562;
t1520 = t1538 * t1562;
t1512 = t1568 * t1542 + t1572 * t1546;
t1511 = t1572 * t1541 + t1568 * t1547;
t1507 = t1573 * t1536 - t1569 * t1539;
t1506 = t1581 * t1564;
t1505 = t1581 * t1562;
t1498 = t1573 * t1514 + t1569 * t1532;
t1497 = t1573 * t1513 - t1569 * t1535;
t1480 = -t1562 * t1512 + t1564 * t1583;
t1479 = -t1562 * t1511 + t1564 * t1584;
t1478 = t1564 * t1512 + t1562 * t1583;
t1477 = t1564 * t1511 + t1562 * t1584;
t1472 = t1573 * t1500 + t1569 * t1595;
t1465 = -t1562 * t1517 + t1564 * t1585;
t1464 = t1564 * t1517 + t1562 * t1585;
t1458 = t1572 * t1488 + t1568 * t1489;
t1454 = t1572 * t1481 + t1568 * t1482;
t1452 = t1572 * t1474 + t1568 * t1475;
t1447 = t1573 * t1455 + t1569 * t1494;
t1446 = t1573 * t1459 - t1569 * t1599;
t1442 = t1573 * t1453 + t1569 * t1484;
t1436 = t1572 * t1456 + t1568 * t1457;
t1431 = t1573 * t1437 + t1569 * t1493;
t1428 = -t1562 * t1458 + t1564 * t1586;
t1427 = t1564 * t1458 + t1562 * t1586;
t1426 = -t1562 * t1454 + t1564 * t1587;
t1425 = t1564 * t1454 + t1562 * t1587;
t1424 = -t1562 * t1452 + t1564 * t1588;
t1423 = t1564 * t1452 + t1562 * t1588;
t1417 = t1572 * t1434 + t1568 * t1435;
t1415 = t1572 * t1432 + t1568 * t1433;
t1414 = -t1562 * t1436 + t1564 * t1589;
t1413 = t1564 * t1436 + t1562 * t1589;
t1411 = t1572 * t1429 + t1568 * t1430;
t1410 = t1573 * t1418 + t1569 * t1450;
t1409 = t1573 * t1416 + t1569 * t1448;
t1407 = t1572 * t1421 + t1568 * t1422;
t1406 = t1573 * t1408 + t1569 * t1476;
t1405 = t1573 * t1412 + t1569 * t1440;
t1400 = -t1562 * t1417 + t1564 * t1590;
t1399 = t1564 * t1417 + t1562 * t1590;
t1398 = -t1562 * t1415 + t1564 * t1591;
t1397 = t1564 * t1415 + t1562 * t1591;
t1396 = -t1562 * t1411 + t1592 * t1564;
t1395 = t1564 * t1411 + t1592 * t1562;
t1394 = -t1562 * t1407 + t1593 * t1564;
t1393 = t1564 * t1407 + t1593 * t1562;
t1391 = t1572 * t1401 + t1568 * t1402;
t1390 = t1573 * t1392 + t1569 * t1403;
t1389 = -t1562 * t1391 + t1594 * t1564;
t1388 = t1564 * t1391 + t1594 * t1562;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1563 * t1540 - t1561 * t1596, 0, 0, 0, 0, 0, 0, -t1561 * t1523 + t1563 * t1538, -t1561 * t1522 - t1563 * t1580, 0, -t1561 * t1465 + t1563 * t1472, 0, 0, 0, 0, 0, 0, -t1561 * t1479 + t1563 * t1497, -t1561 * t1480 + t1563 * t1498, -t1561 * t1506 + t1563 * t1507, -t1561 * t1426 + t1563 * t1447, 0, 0, 0, 0, 0, 0, -t1561 * t1424 + t1563 * t1442, -t1561 * t1428 + t1563 * t1446, -t1561 * t1414 + t1563 * t1431, -t1561 * t1394 + t1563 * t1406, 0, 0, 0, 0, 0, 0, -t1561 * t1398 + t1563 * t1409, -t1561 * t1400 + t1563 * t1410, -t1561 * t1396 + t1563 * t1405, -t1561 * t1389 + t1563 * t1390; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1561 * t1540 + t1563 * t1596, 0, 0, 0, 0, 0, 0, t1563 * t1523 + t1561 * t1538, t1563 * t1522 - t1561 * t1580, 0, t1563 * t1465 + t1561 * t1472, 0, 0, 0, 0, 0, 0, t1563 * t1479 + t1561 * t1497, t1563 * t1480 + t1561 * t1498, t1563 * t1506 + t1561 * t1507, t1563 * t1426 + t1561 * t1447, 0, 0, 0, 0, 0, 0, t1563 * t1424 + t1561 * t1442, t1563 * t1428 + t1561 * t1446, t1563 * t1414 + t1561 * t1431, t1563 * t1394 + t1561 * t1406, 0, 0, 0, 0, 0, 0, t1563 * t1398 + t1561 * t1409, t1563 * t1400 + t1561 * t1410, t1563 * t1396 + t1561 * t1405, t1563 * t1389 + t1561 * t1390; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1615, 0, 0, 0, 0, 0, 0, t1521, t1520, 0, t1464, 0, 0, 0, 0, 0, 0, t1477, t1478, t1505, t1425, 0, 0, 0, 0, 0, 0, t1423, t1427, t1413, t1393, 0, 0, 0, 0, 0, 0, t1397, t1399, t1395, t1388; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1540, 0, 0, 0, 0, 0, 0, t1538, -t1580, 0, t1472, 0, 0, 0, 0, 0, 0, t1497, t1498, t1507, t1447, 0, 0, 0, 0, 0, 0, t1442, t1446, t1431, t1406, 0, 0, 0, 0, 0, 0, t1409, t1410, t1405, t1390; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1596, 0, 0, 0, 0, 0, 0, t1523, t1522, 0, t1465, 0, 0, 0, 0, 0, 0, t1479, t1480, t1506, t1426, 0, 0, 0, 0, 0, 0, t1424, t1428, t1414, t1394, 0, 0, 0, 0, 0, 0, t1398, t1400, t1396, t1389; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1615, 0, 0, 0, 0, 0, 0, t1521, t1520, 0, t1464, 0, 0, 0, 0, 0, 0, t1477, t1478, t1505, t1425, 0, 0, 0, 0, 0, 0, t1423, t1427, t1413, t1393, 0, 0, 0, 0, 0, 0, t1397, t1399, t1395, t1388; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1575, -qJDD(2), 0, t1500, 0, 0, 0, 0, 0, 0, t1513, t1514, t1536, t1455, 0, 0, 0, 0, 0, 0, t1453, t1459, t1437, t1408, 0, 0, 0, 0, 0, 0, t1416, t1418, t1412, t1392; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1575, 0, -t1595, 0, 0, 0, 0, 0, 0, t1535, -t1532, t1539, -t1494, 0, 0, 0, 0, 0, 0, -t1484, t1599, -t1493, -t1476, 0, 0, 0, 0, 0, 0, -t1448, -t1450, -t1440, -t1403; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1517, 0, 0, 0, 0, 0, 0, t1511, t1512, 0, t1454, 0, 0, 0, 0, 0, 0, t1452, t1458, t1436, t1407, 0, 0, 0, 0, 0, 0, t1415, t1417, t1411, t1391; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1547, t1542, t1556, t1482, 0, 0, 0, 0, 0, 0, t1475, t1489, t1457, t1422, 0, 0, 0, 0, 0, 0, t1433, t1435, t1430, t1402; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1541, t1546, -t1604, t1481, 0, 0, 0, 0, 0, 0, t1474, t1488, t1456, t1421, 0, 0, 0, 0, 0, 0, t1432, t1434, t1429, t1401; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1535, t1532, -t1539, t1494, 0, 0, 0, 0, 0, 0, t1484, -t1599, t1493, t1476, 0, 0, 0, 0, 0, 0, t1448, t1450, t1440, t1403; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1501, t1503, t1485, t1445, 0, 0, 0, 0, 0, 0, t1449, t1451, t1441, t1404; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1502, t1515, t1487, t1444, 0, 0, 0, 0, 0, 0, -t1460, -t1462, -t1473, -t1438; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1484, -t1599, t1493, t1476, 0, 0, 0, 0, 0, 0, t1448, t1450, t1440, t1403; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1483, t1471, t1461, t1420; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1470, t1490, t1463, t1419; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1460, t1462, t1473, t1438;];
f_new_reg = t1;
