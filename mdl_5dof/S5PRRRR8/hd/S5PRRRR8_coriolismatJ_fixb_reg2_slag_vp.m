% Calculate inertial parameters regressor of coriolis matrix for
% S5PRRRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d3,d4,d5,theta1]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:17
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PRRRR8_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR8_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR8_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5PRRRR8_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:16:50
% EndTime: 2019-12-05 17:17:11
% DurationCPUTime: 10.95s
% Computational Cost: add. (8519->485), mult. (20253->713), div. (0->0), fcn. (22626->10), ass. (0->395)
t563 = qJD(3) + qJD(4);
t429 = sin(qJ(3));
t659 = cos(qJ(4));
t552 = t659 * t429;
t428 = sin(qJ(4));
t432 = cos(qJ(3));
t603 = t428 * t432;
t394 = t552 + t603;
t426 = sin(pkin(5));
t433 = cos(qJ(2));
t612 = t426 * t433;
t331 = t394 * t612;
t716 = -t331 / 0.2e1;
t560 = t659 * pkin(3);
t416 = -t560 - pkin(4);
t668 = -t416 / 0.2e1;
t431 = cos(qJ(5));
t427 = sin(qJ(5));
t430 = sin(qJ(2));
t613 = t426 * t430;
t643 = cos(pkin(5));
t380 = t643 * t429 + t432 * t613;
t360 = t659 * t380;
t457 = t429 * t613 - t643 * t432;
t447 = t428 * t457;
t688 = -t447 + t360;
t611 = t427 * t688;
t204 = t431 * t612 + t611;
t703 = t688 * t431;
t503 = t427 * t612 - t703;
t477 = t503 * t431;
t517 = t428 * t380 + t659 * t457;
t714 = (-t204 * t427 + t477 + t688) * t517;
t715 = t714 * qJD(1);
t551 = t659 * t432;
t604 = t428 * t429;
t467 = t551 - t604;
t332 = t467 * t612;
t606 = t427 * t332;
t276 = t431 * t613 - t606;
t554 = t427 * t613;
t598 = t431 * t332;
t277 = t554 + t598;
t660 = t431 / 0.2e1;
t664 = -t427 / 0.2e1;
t686 = t276 * t664 + t277 * t660;
t713 = pkin(4) * t716 + t686 * pkin(9);
t651 = t428 * pkin(3);
t415 = pkin(9) + t651;
t712 = t331 * t668 - t686 * t415;
t674 = -t703 / 0.2e1;
t417 = -pkin(3) * t432 - pkin(2);
t654 = t467 * pkin(4);
t504 = -t394 * pkin(9) - t654;
t456 = t417 + t504;
t694 = pkin(8) + pkin(7);
t403 = t694 * t432;
t396 = t659 * t403;
t513 = t694 * t604;
t689 = t396 - t513;
t701 = t689 * t427;
t145 = -t431 * t456 + t701;
t711 = (-t145 + t701) * t394;
t700 = t689 * t431;
t146 = t427 * t456 + t700;
t710 = (-t146 + t700) * t394;
t709 = -0.2e1 * t394;
t671 = t689 / 0.2e1;
t657 = t688 * pkin(4);
t656 = t689 * pkin(4);
t691 = t563 * t394;
t708 = t467 * t691;
t516 = t428 * t403 + t552 * t694;
t707 = t516 * t427;
t706 = t516 * t431;
t422 = t427 ^ 2;
t424 = t431 ^ 2;
t665 = -t424 / 0.2e1;
t705 = (t665 - t422 / 0.2e1) * t517;
t593 = t422 + t424;
t704 = t593 * t517;
t672 = t516 / 0.2e1;
t702 = t688 * t672;
t628 = t689 * t516;
t652 = t394 * pkin(4);
t653 = t467 * pkin(9);
t316 = t652 - t653;
t601 = t431 * t316;
t173 = t601 + t707;
t609 = t427 * t316;
t174 = t609 - t706;
t465 = (t145 * t431 - t146 * t427) * t467;
t14 = (t173 * t431 + t174 * t427) * t394 - t465;
t661 = -t431 / 0.2e1;
t443 = (t204 * t661 + t503 * t664) * t467;
t44 = -t443 - t686;
t597 = t44 * qJD(1);
t699 = t14 * qJD(2) - t597;
t658 = pkin(3) * t429;
t294 = t316 + t658;
t602 = t431 * t294;
t167 = t602 + t707;
t610 = t427 * t294;
t168 = -t706 + t610;
t13 = (t167 * t431 + t168 * t427) * t394 - t465;
t698 = t13 * qJD(2) - t597;
t458 = -t551 / 0.2e1 + t604 / 0.2e1;
t223 = (t467 / 0.2e1 + t458) * t612;
t571 = t223 * qJD(1);
t697 = t563 * t516 - t571;
t532 = t612 / 0.2e1;
t224 = t458 * t612 - t467 * t532;
t696 = t224 * qJD(2) + t563 * t517;
t695 = 0.2e1 * t394;
t693 = t688 / 0.2e1;
t692 = -t415 / 0.2e1;
t408 = t424 - t422;
t690 = t563 * t408;
t387 = t394 ^ 2;
t562 = -t467 ^ 2 + t387;
t666 = t422 / 0.2e1;
t687 = (t665 - t666) * t517;
t553 = t659 * t467;
t615 = t394 * t428;
t617 = t394 * t415;
t618 = t467 * t416;
t685 = -t654 / 0.2e1 - t617 / 0.2e1 + t618 / 0.2e1 + (t553 / 0.2e1 + t615 / 0.2e1) * pkin(3);
t382 = t552 / 0.2e1 + t603 / 0.2e1;
t669 = t394 / 0.2e1;
t222 = (t669 - t382) * t612;
t572 = t222 * qJD(1);
t584 = qJD(2) * t417;
t684 = -t394 * t584 + t572;
t278 = t394 * t417 - t467 * t658;
t683 = -qJD(2) * t278 + t572;
t286 = (t666 + t665) * t394;
t605 = t427 * t431;
t548 = qJD(2) * t605;
t109 = t563 * t286 + t387 * t548;
t265 = t548 * t709 + t690;
t679 = -pkin(9) / 0.2e1;
t678 = pkin(9) / 0.2e1;
t676 = -t168 / 0.2e1;
t675 = -t204 / 0.2e1;
t673 = t517 / 0.2e1;
t507 = -t360 / 0.2e1;
t670 = -t394 / 0.2e1;
t506 = -t396 / 0.2e1;
t667 = t416 / 0.2e1;
t663 = t427 / 0.2e1;
t662 = t428 / 0.2e1;
t43 = -t443 + t686;
t650 = t43 * qJD(2);
t527 = t673 - t517 / 0.2e1;
t502 = t527 * t467;
t526 = t693 - t688 / 0.2e1;
t48 = -t526 * t394 - t502;
t648 = t48 * qJD(3);
t646 = t44 * qJD(2);
t645 = pkin(3) * qJD(4);
t644 = qJD(3) * pkin(3);
t640 = t167 * t427;
t639 = t168 * t431;
t638 = t173 * t427;
t637 = t174 * t431;
t635 = t204 * t467;
t631 = t517 * t331;
t625 = t516 * t331;
t621 = t331 * t427;
t620 = t331 * t431;
t34 = -t204 * t276 - t503 * t277 + t631;
t619 = t34 * qJD(1);
t616 = t394 * t427;
t614 = t394 * t431;
t596 = t48 * qJD(2);
t404 = t426 ^ 2 * t430 * t433;
t77 = t332 * t688 - t404 + t631;
t594 = t77 * qJD(1);
t220 = t562 * t427;
t592 = qJD(2) * t220;
t221 = t562 * t431;
t591 = qJD(2) * t221;
t279 = t394 * t658 + t417 * t467;
t589 = qJD(2) * t279;
t588 = qJD(2) * t286;
t297 = t408 * t387;
t587 = qJD(2) * t297;
t586 = qJD(2) * t467;
t585 = qJD(2) * t394;
t583 = qJD(2) * t426;
t582 = qJD(2) * t430;
t581 = qJD(2) * t432;
t580 = qJD(3) * t427;
t579 = qJD(3) * t431;
t578 = qJD(4) * t417;
t577 = qJD(4) * t427;
t576 = qJD(4) * t431;
t575 = qJD(5) * t427;
t574 = qJD(5) * t431;
t180 = -t404 + (t380 * t432 + t429 * t457) * t612;
t573 = t180 * qJD(1);
t570 = t562 * qJD(2);
t569 = t286 * qJD(5);
t287 = t427 * t467;
t568 = t287 * qJD(2);
t290 = t431 * t467;
t283 = t290 * qJD(2);
t567 = t382 * qJD(2);
t423 = t429 ^ 2;
t425 = t432 ^ 2;
t409 = t425 - t423;
t566 = t409 * qJD(2);
t565 = t429 * qJD(3);
t564 = t432 * qJD(3);
t561 = t659 / 0.2e1;
t559 = pkin(2) * t429 * qJD(2);
t558 = pkin(2) * t581;
t557 = t428 * t644;
t556 = t428 * t645;
t550 = t467 * t584;
t547 = qJD(5) * t467 * t394;
t546 = t467 * t585;
t545 = t426 * t582;
t544 = t433 * t583;
t412 = t427 * t574;
t543 = t429 * t564;
t246 = t517 * t663;
t247 = t517 * t660;
t540 = -t621 / 0.2e1;
t539 = t620 / 0.2e1;
t538 = -t616 / 0.2e1;
t537 = t614 / 0.2e1;
t534 = t613 / 0.2e1;
t533 = -t612 / 0.2e1;
t531 = t611 / 0.2e1;
t530 = -t606 / 0.2e1;
t529 = t146 * t660;
t528 = -t598 / 0.2e1;
t525 = t672 - t516 / 0.2e1;
t524 = t671 - t689 / 0.2e1;
t522 = t659 * qJD(3);
t521 = t659 * qJD(4);
t518 = (t423 + t425) * t433;
t514 = t563 * t431;
t512 = -t560 / 0.2e1;
t509 = t387 * t412;
t508 = t427 * t561;
t505 = t563 * t651;
t498 = t563 * t605;
t496 = t427 * t514;
t15 = -t145 * t167 + t146 * t168 + t628;
t468 = t145 * t663 + t529;
t472 = t517 * t671 + t702;
t436 = t167 * t675 - t468 * t517 + t503 * t676 + t472;
t2 = t436 + t712;
t495 = t2 * qJD(1) + t15 * qJD(2);
t16 = -t145 * t173 + t146 * t174 + t628;
t437 = (t671 - t468) * t517 + t173 * t675 + t702 - t503 * t174 / 0.2e1;
t4 = t437 - t713;
t494 = t4 * qJD(1) + t16 * qJD(2);
t475 = (t675 + t531) * t394;
t24 = t539 + t475;
t37 = t711 - (t173 - t707) * t467;
t493 = t24 * qJD(1) + t37 * qJD(2);
t452 = t669 * t688 - t502;
t441 = t204 * t670 + t452 * t427;
t26 = t539 + t441;
t35 = t711 - (t167 - t707) * t467;
t492 = t26 * qJD(1) + t35 * qJD(2);
t463 = t503 * t669;
t444 = t537 * t688 + t463;
t29 = t540 + t444;
t38 = t710 - (-t174 - t706) * t467;
t491 = t29 * qJD(1) + t38 * qJD(2);
t438 = t431 * t452 + t463;
t31 = t540 + t438;
t36 = t710 - (-t168 - t706) * t467;
t490 = t31 * qJD(1) + t36 * qJD(2);
t489 = t48 * qJD(1);
t469 = t517 * t670 + t534;
t476 = t503 * t467;
t57 = t530 + t476 / 0.2e1 + t469 * t431;
t86 = t146 * t467 + t516 * t614;
t488 = qJD(1) * t57 - qJD(2) * t86;
t58 = t528 + t635 / 0.2e1 - t469 * t427;
t85 = -t145 * t467 - t516 * t616;
t487 = qJD(1) * t58 - qJD(2) * t85;
t486 = t639 - t640;
t485 = t637 - t638;
t484 = -t617 + t618;
t100 = t417 * t658;
t442 = t516 * t693 + t673 * t689 - t472;
t460 = t332 * t662 + t659 * t716;
t11 = (t429 * t532 + t460) * pkin(3) + t442;
t483 = -t11 * qJD(1) + t100 * qJD(2);
t119 = t674 + t703 / 0.2e1;
t479 = t668 + t512;
t439 = (t692 + t651 / 0.2e1 + t678) * t394 - (-pkin(4) / 0.2e1 + t479) * t467;
t50 = t439 * t427 - t524 * t431;
t482 = qJD(1) * t119 + qJD(2) * t50;
t481 = t394 * (-qJD(5) + t586);
t261 = t507 + t360 / 0.2e1;
t325 = t506 + t396 / 0.2e1;
t480 = qJD(1) * t261 + qJD(2) * t325;
t478 = -t653 / 0.2e1 + t652 / 0.2e1;
t474 = -t639 / 0.2e1 + t640 / 0.2e1;
t473 = t637 / 0.2e1 - t638 / 0.2e1;
t470 = t394 * t668 + t467 * t692;
t466 = t431 * t481;
t232 = qJD(5) * t382 - t546;
t464 = pkin(4) / 0.2e1 + t479;
t462 = t316 / 0.2e1 + t478;
t461 = t496 * t695;
t459 = t593 * t659;
t434 = (t204 * t508 - t477 * t561 + t517 * t662) * pkin(3) + t415 * t705 + t688 * t667;
t10 = t657 / 0.2e1 - pkin(9) * t705 + t434;
t284 = (t415 * t459 + t416 * t428) * pkin(3);
t435 = t473 * t415 + (t145 * t508 + t516 * t662 + t659 * t529) * pkin(3) + t689 * t667;
t6 = t656 / 0.2e1 + t474 * pkin(9) + t435;
t455 = t10 * qJD(1) + t6 * qJD(2) + t284 * qJD(3);
t454 = t294 / 0.2e1 + t470;
t18 = (t174 / 0.2e1 + t676) * t431 + (-t173 / 0.2e1 + t167 / 0.2e1) * t427;
t381 = t459 * pkin(3);
t453 = -qJD(2) * t18 - qJD(3) * t381;
t341 = t464 * t427;
t80 = t462 * t431;
t451 = pkin(4) * t577 + qJD(2) * t80 + qJD(3) * t341;
t342 = t464 * t431;
t78 = t462 * t427;
t450 = pkin(4) * t576 - qJD(2) * t78 + qJD(3) * t342;
t114 = t527 * t427;
t73 = t525 * t427 - t454 * t431;
t449 = qJD(1) * t114 - qJD(2) * t73 - t416 * t580;
t118 = t527 * t431;
t71 = t454 * t427 + t525 * t431;
t448 = qJD(1) * t118 - qJD(2) * t71 - t416 * t579;
t116 = t526 * t427;
t53 = t524 * t427 + t439 * t431;
t445 = -qJD(1) * t116 - qJD(2) * t53 - t427 * t557;
t413 = t429 * t581;
t407 = t427 * t556;
t402 = t408 * qJD(5);
t377 = t381 * qJD(4);
t344 = pkin(4) * t661 + t416 * t660 + t431 * t512;
t343 = pkin(4) * t664 + t416 * t663 + t427 * t512;
t320 = -t620 / 0.2e1;
t319 = t621 / 0.2e1;
t312 = t563 * t467;
t295 = t563 * t382;
t267 = 0.2e1 * t506 + t513;
t257 = -t283 + t574;
t256 = t568 - t575;
t225 = -t382 * t612 + t394 * t533;
t219 = t225 * qJD(2);
t214 = t223 * qJD(2);
t212 = t222 * qJD(2);
t206 = t496 - t588;
t205 = -t498 + t588;
t197 = 0.2e1 * t427 * t466;
t179 = 0.2e1 * t507 + t447;
t164 = -t424 * t546 - t569;
t163 = -t422 * t546 + t569;
t126 = -qJD(5) * t290 - t591;
t125 = qJD(5) * t287 + t592;
t124 = -t517 * t661 + t247;
t123 = 0.2e1 * t247;
t122 = -t517 * t664 + t246;
t121 = 0.2e1 * t246;
t120 = 0.2e1 * t674;
t115 = t663 * t688 + t531;
t107 = -t569 - (-t424 * t585 - t498) * t467;
t106 = t569 - (-t422 * t585 + t496) * t467;
t94 = t427 * t691 + t591;
t93 = t394 * t514 - t592;
t84 = (-qJD(5) - t586) * t605 * t695 + t467 * t690;
t81 = t707 + t601 / 0.2e1 - t478 * t431;
t79 = t706 - t609 / 0.2e1 + t478 * t427;
t74 = t707 + t602 / 0.2e1 - t470 * t431;
t72 = t706 - t610 / 0.2e1 + t470 * t427;
t60 = -t476 / 0.2e1 + t517 * t537 + t530 + t431 * t534;
t59 = -t635 / 0.2e1 + t517 * t538 + t528 - t554 / 0.2e1;
t54 = t705 + t687;
t52 = t685 * t431 + t614 * t679 + t701;
t51 = pkin(9) * t538 + t685 * t427 - t700;
t30 = t319 + t438;
t28 = t319 + t444;
t27 = t320 + t441;
t25 = t320 + t475;
t17 = t473 - t474;
t12 = t460 * pkin(3) + t533 * t658 - t442;
t9 = -t657 / 0.2e1 + t434 + t687 * pkin(9);
t5 = t639 * t678 + t640 * t679 - t656 / 0.2e1 + t435;
t3 = t437 + t713;
t1 = t436 - t712;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t180, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t77, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t34 + t563 * t714; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t545, -t544, 0, 0, 0, 0, 0, 0, 0, 0, (-t430 * t581 - t433 * t565) * t426, (t429 * t582 - t433 * t564) * t426, t518 * t583, t573 + (-pkin(2) * t430 + pkin(7) * t518) * t583, 0, 0, 0, 0, 0, 0, t225 * t563 - t467 * t545, t224 * t563 + t394 * t545, (t331 * t394 + t332 * t467) * qJD(2) + t648, t594 + (t332 * t689 + t417 * t613 + t625) * qJD(2) + t12 * qJD(3), 0, 0, 0, 0, 0, 0, (-t276 * t467 + t331 * t616) * qJD(2) + t27 * qJD(3) + t25 * qJD(4) + t60 * qJD(5), (t277 * t467 + t331 * t614) * qJD(2) + t30 * qJD(3) + t28 * qJD(4) + t59 * qJD(5), t563 * t43 + (-t276 * t431 - t277 * t427) * t585, t619 + (-t145 * t276 + t146 * t277 + t625) * qJD(2) + t1 * qJD(3) + t3 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t380 * qJD(3) - t429 * t544, qJD(3) * t457 - t432 * t544, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3) * t688 + qJD(4) * t179 + t219, t696, t596, t12 * qJD(2) + (-t428 * t517 - t659 * t688) * t644, 0, 0, 0, 0, 0, 0, qJD(2) * t27 + qJD(4) * t120 + qJD(5) * t122 - t579 * t688, qJD(2) * t30 + qJD(4) * t115 + qJD(5) * t124 + t580 * t688, -qJD(3) * t704 + t54 * qJD(4) + t650, t715 + t1 * qJD(2) + (-t415 * t704 + t416 * t688) * qJD(3) + t9 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t179 - qJD(4) * t688 + t219, t696, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t25 + qJD(3) * t120 + qJD(5) * t121 - t576 * t688, qJD(2) * t28 + qJD(3) * t115 + qJD(5) * t123 + t577 * t688, t54 * qJD(3) - qJD(4) * t704 + t650, t715 + t3 * qJD(2) + t9 * qJD(3) + (-pkin(9) * t704 - t657) * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60 * qJD(2) + t122 * qJD(3) + t121 * qJD(4) + qJD(5) * t503, qJD(2) * t59 + qJD(3) * t124 + qJD(4) * t123 + qJD(5) * t204, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t573, 0, 0, 0, 0, 0, 0, -t563 * t222, -t563 * t223, t648, -qJD(3) * t11 - t594, 0, 0, 0, 0, 0, 0, qJD(3) * t26 + qJD(4) * t24 - qJD(5) * t57, qJD(3) * t31 + qJD(4) * t29 - qJD(5) * t58, t44 * t563, qJD(3) * t2 + qJD(4) * t4 - t619; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t543, t409 * qJD(3), 0, -t543, 0, 0, -pkin(2) * t565, -pkin(2) * t564, 0, 0, t708, -t563 * t562, 0, -t708, 0, 0, qJD(3) * t278 + t394 * t578, qJD(3) * t279 + t467 * t578, 0, qJD(3) * t100, t424 * t708 - t509, -qJD(5) * t297 - t461 * t467, t221 * t563 + t427 * t547, t422 * t708 + t509, -t220 * t563 + t431 * t547, -t708, qJD(3) * t35 + qJD(4) * t37 + qJD(5) * t86, qJD(3) * t36 + qJD(4) * t38 + qJD(5) * t85, -qJD(3) * t13 - qJD(4) * t14, qJD(3) * t15 + qJD(4) * t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t413, t566, t564, -t413, -t565, 0, -pkin(7) * t564 - t559, pkin(7) * t565 - t558, 0, 0, t546, -t570, t312, -t546, -t691, 0, -qJD(3) * t689 + qJD(4) * t267 - t683, t589 + t697, (-t553 - t615) * t644 + t489, (-t428 * t516 - t659 * t689) * t644 + t483, t107, t84, t94, t106, t93, t232, (t427 * t484 - t700) * qJD(3) + t51 * qJD(4) + t74 * qJD(5) + t492, (t431 * t484 + t701) * qJD(3) + t52 * qJD(4) + t72 * qJD(5) + t490, qJD(3) * t486 + t17 * qJD(4) - t698, (t415 * t486 + t416 * t689) * qJD(3) + t5 * qJD(4) + t495; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t546, -t570, t312, -t546, -t691, 0, qJD(3) * t267 - qJD(4) * t689 - t684, t550 + t697, 0, 0, t107, t84, t94, t106, t93, t232, t51 * qJD(3) + (t427 * t504 - t700) * qJD(4) + t81 * qJD(5) + t493, t52 * qJD(3) + (t431 * t504 + t701) * qJD(4) + t79 * qJD(5) + t491, t17 * qJD(3) + qJD(4) * t485 - t699, t5 * qJD(3) + (pkin(9) * t485 - t656) * qJD(4) + t494; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t109, t498 * t709 - t587, t427 * t481, t109, t466, t295, qJD(3) * t74 + qJD(4) * t81 - qJD(5) * t146 - t488, qJD(3) * t72 + qJD(4) * t79 + qJD(5) * t145 - t487, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(4) * t261 + t212, t214, -t596, qJD(2) * t11, 0, 0, 0, 0, 0, 0, -qJD(2) * t26 + qJD(4) * t119 - qJD(5) * t114, -qJD(2) * t31 + qJD(4) * t116 - qJD(5) * t118, -t646, -qJD(2) * t2 + qJD(4) * t10 - t715; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t413, -t566, 0, t413, 0, 0, t559, t558, 0, 0, -t546, t570, 0, t546, 0, 0, qJD(4) * t325 + t683, t571 - t589, -t489, -t483, t164, t197, t126, t163, t125, -t232, qJD(4) * t50 + qJD(5) * t73 - t492, qJD(4) * t53 + qJD(5) * t71 - t490, qJD(4) * t18 + t698, qJD(4) * t6 - t495; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t556, -pkin(3) * t521, 0, 0, t412, t402, 0, -t412, 0, 0, t416 * t575 - t431 * t556, t416 * t574 + t407, t377, t284 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t505 + t480, (-t522 - t521) * pkin(3), 0, 0, t412, t402, 0, -t412, 0, 0, qJD(5) * t343 - t431 * t505 + t482, qJD(5) * t344 + t407 - t445, t377 - t453, (-pkin(4) * t428 + pkin(9) * t459) * t645 + t455; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t206, t265, t257, t205, t256, -t567, qJD(4) * t343 - t415 * t574 - t449, qJD(4) * t344 + t415 * t575 - t448, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3) * t261 + t212, t214, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(2) * t24 - qJD(3) * t119, -qJD(2) * t29 - qJD(3) * t116, -t646, -qJD(2) * t4 - qJD(3) * t10 - t715; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t546, t570, 0, t546, 0, 0, -qJD(3) * t325 + t684, t571 - t550, 0, 0, t164, t197, t126, t163, t125, -t232, -qJD(3) * t50 - qJD(5) * t80 - t493, -qJD(3) * t53 + qJD(5) * t78 - t491, -qJD(3) * t18 + t699, -qJD(3) * t6 - t494; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t480 + t557, pkin(3) * t522, 0, 0, t412, t402, 0, -t412, 0, 0, -qJD(5) * t341 + t431 * t557 - t482, -qJD(5) * t342 + t445, t453, -t455; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t412, t402, 0, -t412, 0, 0, -pkin(4) * t575, -pkin(4) * t574, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t206, t265, t257, t205, t256, -t567, -pkin(9) * t574 - t451, pkin(9) * t575 - t450, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t57 + qJD(3) * t114, qJD(2) * t58 + qJD(3) * t118, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t109, t461 + t587, t290 * t563 - t427 * t546, -t109, -t287 * t563 - t431 * t546, t295, -qJD(3) * t73 + qJD(4) * t80 + t488, -qJD(3) * t71 - qJD(4) * t78 + t487, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t205, -t265, t283, t206, -t568, t567, qJD(4) * t341 + t449, qJD(4) * t342 + t448, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t205, -t265, t283, t206, -t568, t567, t451, t450, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t7;
