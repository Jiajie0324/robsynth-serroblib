% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:51
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRRP4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP4_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP4_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP4_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRRP4_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:51:22
% EndTime: 2019-12-31 21:51:37
% DurationCPUTime: 14.25s
% Computational Cost: add. (35921->499), mult. (46609->691), div. (0->0), fcn. (29934->8), ass. (0->365)
t673 = qJD(1) + qJD(2);
t675 = sin(qJ(4));
t676 = sin(qJ(3));
t679 = cos(qJ(4));
t680 = cos(qJ(3));
t623 = (t675 * t680 + t676 * t679) * t673;
t620 = t623 ^ 2;
t672 = qJD(3) + qJD(4);
t759 = t672 ^ 2;
t558 = t759 + t620;
t735 = t676 * t673;
t621 = -t679 * t680 * t673 + t675 * t735;
t578 = t623 * t621;
t671 = qJDD(3) + qJDD(4);
t771 = t578 + t671;
t743 = t675 * t771;
t484 = t679 * t558 + t743;
t728 = t679 * t771;
t517 = t675 * t558 - t728;
t459 = t676 * t484 + t680 * t517;
t677 = sin(qJ(2));
t681 = cos(qJ(2));
t716 = qJDD(1) + qJDD(2);
t704 = t676 * t716;
t718 = t673 * qJD(3);
t711 = t680 * t718;
t630 = t704 + t711;
t702 = t680 * t716;
t712 = t676 * t718;
t688 = t702 - t712;
t685 = -t621 * qJD(4) + t679 * t630 + t675 * t688;
t752 = t672 * t621;
t769 = t685 - t752;
t409 = t677 * t459 - t681 * t769;
t411 = t681 * t459 + t677 * t769;
t678 = sin(qJ(1));
t682 = cos(qJ(1));
t361 = t678 * t409 - t682 * t411;
t861 = pkin(5) * t361;
t370 = t682 * t409 + t678 * t411;
t860 = pkin(5) * t370;
t859 = pkin(6) * t409;
t858 = -pkin(1) * t409 + pkin(2) * t769 - pkin(7) * t459;
t434 = t680 * t484 - t676 * t517;
t857 = -pkin(1) * t434 - pkin(6) * t411;
t708 = t675 * t630 - t679 * t688;
t503 = (qJD(4) + t672) * t623 + t708;
t450 = -t675 * t503 + t679 * t769;
t745 = t675 * t769;
t452 = t679 * t503 + t745;
t393 = t676 * t450 + t680 * t452;
t760 = t621 ^ 2;
t575 = t620 - t760;
t382 = t677 * t393 + t681 * t575;
t384 = t681 * t393 - t677 * t575;
t856 = t682 * t382 + t678 * t384;
t855 = t678 * t382 - t682 * t384;
t605 = t760 - t759;
t523 = t675 * t605 + t728;
t527 = t679 * t605 - t743;
t464 = t676 * t523 - t680 * t527;
t504 = (qJD(4) - t672) * t623 + t708;
t417 = t677 * t464 - t681 * t504;
t421 = t681 * t464 + t677 * t504;
t854 = t682 * t417 + t678 * t421;
t853 = t678 * t417 - t682 * t421;
t542 = -t760 - t620;
t768 = -t752 - t685;
t794 = -t679 * t504 - t675 * t768;
t795 = -t675 * t504 + t679 * t768;
t811 = -t676 * t795 + t680 * t794;
t825 = t677 * t542 + t681 * t811;
t827 = -t681 * t542 + t677 * t811;
t842 = t678 * t825 + t682 * t827;
t851 = pkin(5) * t842;
t843 = -t678 * t827 + t682 * t825;
t850 = pkin(5) * t843;
t849 = pkin(7) * t434;
t848 = -pkin(2) * t434 - pkin(3) * t484;
t846 = pkin(6) * t827;
t845 = pkin(1) * t827 - pkin(2) * t542 + pkin(7) * t811;
t810 = t676 * t794 + t680 * t795;
t844 = -pkin(1) * t810 + pkin(6) * t825;
t606 = -t620 + t759;
t772 = -t578 + t671;
t742 = t675 * t772;
t797 = t679 * t606 + t742;
t555 = t679 * t772;
t798 = -t675 * t606 + t555;
t808 = -t676 * t797 + t680 * t798;
t826 = -t677 * t768 + t681 * t808;
t828 = t677 * t808 + t681 * t768;
t841 = -t678 * t828 + t682 * t826;
t840 = t678 * t826 + t682 * t828;
t670 = t673 ^ 2;
t703 = t677 * t716;
t638 = -t681 * t670 - t703;
t701 = t681 * t716;
t639 = -t677 * t670 + t701;
t581 = t682 * t638 - t678 * t639;
t616 = pkin(6) * t638 + t681 * g(3);
t813 = -pkin(6) * t639 - t677 * g(3);
t839 = pkin(5) * t581 + t682 * t616 + t678 * t813;
t582 = t678 * t638 + t682 * t639;
t838 = -pkin(5) * t582 - t678 * t616 + t682 * t813;
t835 = pkin(7) * t810;
t834 = pkin(8) * t484;
t833 = pkin(8) * t517;
t367 = -pkin(2) * t810 - pkin(3) * t795;
t829 = -t680 * t450 + t676 * t452;
t824 = t680 * t523 + t676 * t527;
t767 = -t759 - t760;
t777 = t679 * t767 - t742;
t780 = t675 * t767 + t555;
t792 = t676 * t777 + t680 * t780;
t823 = pkin(1) * t792;
t821 = pkin(7) * t792;
t793 = -t676 * t780 + t680 * t777;
t820 = pkin(7) * t793;
t819 = pkin(8) * t795;
t817 = t677 * t793;
t815 = t681 * t793;
t814 = -pkin(2) * t792 - pkin(3) * t780;
t812 = -pkin(3) * t542 + pkin(8) * t794;
t809 = t676 * t798 + t680 * t797;
t804 = pkin(8) * t777;
t803 = pkin(8) * t780;
t657 = t682 * g(1) + t678 * g(2);
t684 = qJD(1) ^ 2;
t644 = -t684 * pkin(1) - t657;
t656 = t678 * g(1) - t682 * g(2);
t692 = qJDD(1) * pkin(1) + t656;
t587 = t677 * t644 - t681 * t692;
t588 = t681 * t644 + t677 * t692;
t709 = t677 * t587 + t681 * t588;
t532 = t681 * t587 - t677 * t588;
t721 = t682 * t532;
t796 = -t678 * t709 + t721;
t731 = t678 * t532;
t470 = t682 * t709 + t731;
t689 = (-t621 * t675 - t623 * t679) * t672;
t750 = t672 * t675;
t600 = t623 * t750;
t749 = t672 * t679;
t714 = t621 * t749;
t695 = t600 - t714;
t765 = -t676 * t689 + t680 * t695;
t775 = t677 * t671 + t681 * t765;
t779 = -t681 * t671 + t677 * t765;
t791 = -t678 * t779 + t682 * t775;
t790 = t678 * t775 + t682 * t779;
t715 = t677 * t578;
t539 = -t623 * qJD(4) - t708;
t691 = -t675 * t539 + t714;
t696 = t679 * t539 + t621 * t750;
t764 = -t676 * t696 + t680 * t691;
t776 = t681 * t764 - t715;
t713 = t681 * t578;
t778 = t677 * t764 + t713;
t789 = -t678 * t778 + t682 * t776;
t788 = t678 * t776 + t682 * t778;
t787 = 2 * qJD(5);
t785 = qJ(5) * t769;
t674 = t676 ^ 2;
t758 = t680 ^ 2;
t770 = t674 + t758;
t574 = -t670 * pkin(2) + pkin(7) * t716 + t588;
t738 = t676 * t574;
t753 = t670 * t676;
t498 = qJDD(3) * pkin(3) - t630 * pkin(8) - t738 + (pkin(3) * t753 + pkin(8) * t718 - g(3)) * t680;
t554 = -t676 * g(3) + t680 * t574;
t647 = qJD(3) * pkin(3) - pkin(8) * t735;
t662 = t758 * t670;
t499 = -pkin(3) * t662 + pkin(8) * t688 - qJD(3) * t647 + t554;
t447 = t675 * t498 + t679 * t499;
t568 = t621 * pkin(4) - t623 * qJ(5);
t694 = t671 * qJ(5) - t621 * t568 + t672 * t787 + t447;
t766 = t676 * t695 + t680 * t689;
t763 = t676 * t691 + t680 * t696;
t496 = t623 * t749 + t675 * t685;
t497 = t679 * t685 - t600;
t443 = -t676 * t496 + t680 * t497;
t697 = t681 * t443 + t715;
t698 = t677 * t443 - t713;
t762 = -t678 * t698 + t682 * t697;
t761 = t678 * t697 + t682 * t698;
t757 = pkin(4) * t679;
t754 = qJ(5) * t679;
t751 = t672 * t623;
t748 = t674 * t670;
t573 = -t716 * pkin(2) - t670 * pkin(7) + t587;
t501 = -t688 * pkin(3) - pkin(8) * t662 + t647 * t735 + t573;
t747 = t675 * t501;
t446 = -t679 * t498 + t675 * t499;
t387 = -t679 * t446 + t675 * t447;
t740 = t676 * t387;
t739 = t676 * t573;
t655 = t680 * t753;
t645 = qJDD(3) + t655;
t737 = t676 * t645;
t646 = qJDD(3) - t655;
t736 = t676 * t646;
t730 = t679 * t501;
t727 = t680 * t387;
t726 = t680 * t573;
t631 = t702 - 0.2e1 * t712;
t725 = t680 * t631;
t724 = t680 * t646;
t720 = -t542 - t759;
t710 = -qJ(5) * t675 - pkin(3);
t388 = t675 * t446 + t679 * t447;
t553 = t680 * g(3) + t738;
t483 = t676 * t553 + t680 * t554;
t604 = -t678 * t656 - t682 * t657;
t707 = t677 * t655;
t706 = t681 * t655;
t700 = t623 * t568 + qJDD(5) + t446;
t649 = t682 * qJDD(1) - t678 * t684;
t699 = -pkin(5) * t649 - t678 * g(3);
t482 = t680 * t553 - t676 * t554;
t603 = t682 * t656 - t678 * t657;
t690 = -t671 * pkin(4) + t700;
t687 = -t539 * pkin(4) + t501 - t785;
t686 = t623 * t787 - t687;
t683 = qJD(3) ^ 2;
t653 = -t662 - t683;
t652 = t662 - t683;
t651 = -t683 - t748;
t650 = t683 - t748;
t648 = t678 * qJDD(1) + t682 * t684;
t642 = t662 - t748;
t641 = t662 + t748;
t636 = t680 * t645;
t635 = t770 * t716;
t629 = t704 + 0.2e1 * t711;
t628 = -pkin(5) * t648 + t682 * g(3);
t627 = t770 * t718;
t602 = t677 * qJDD(3) + t681 * t627;
t601 = -t681 * qJDD(3) + t677 * t627;
t599 = t680 * t630 - t674 * t718;
t598 = -t676 * t688 - t758 * t718;
t594 = -t676 * t651 - t724;
t593 = -t676 * t650 + t636;
t592 = t680 * t653 - t737;
t591 = t680 * t652 - t736;
t590 = t680 * t651 - t736;
t589 = t676 * t653 + t636;
t583 = t681 * t635 - t677 * t641;
t580 = t677 * t635 + t681 * t641;
t579 = -t676 * t629 + t725;
t572 = t681 * t593 + t676 * t703;
t571 = t681 * t591 + t677 * t702;
t570 = t677 * t593 - t676 * t701;
t569 = t677 * t591 - t680 * t701;
t562 = t681 * t599 - t707;
t561 = t681 * t598 + t707;
t560 = t677 * t599 + t706;
t559 = t677 * t598 - t706;
t552 = t681 * t594 + t677 * t629;
t551 = t681 * t592 - t677 * t631;
t550 = t677 * t594 - t681 * t629;
t549 = t677 * t592 + t681 * t631;
t541 = t681 * t579 - t677 * t642;
t540 = t677 * t579 + t681 * t642;
t529 = pkin(1) * g(3) + pkin(6) * t709;
t520 = -pkin(7) * t590 + t726;
t519 = -pkin(7) * t589 + t739;
t514 = -pkin(2) * t590 + t554;
t513 = -pkin(2) * t589 + t553;
t512 = -t678 * t580 + t682 * t583;
t511 = t682 * t580 + t678 * t583;
t502 = -t539 + t751;
t480 = -t678 * t550 + t682 * t552;
t479 = -t678 * t549 + t682 * t551;
t478 = t682 * t550 + t678 * t552;
t477 = t682 * t549 + t678 * t551;
t468 = -pkin(6) * t580 + t681 * t482;
t467 = pkin(6) * t583 + t677 * t482;
t466 = t681 * t483 + t677 * t573;
t465 = t677 * t483 - t681 * t573;
t456 = t730 + t834;
t445 = t747 - t803;
t440 = t680 * t496 + t676 * t497;
t433 = -pkin(6) * t550 - t677 * t514 + t681 * t520;
t432 = -pkin(6) * t549 - t677 * t513 + t681 * t519;
t423 = -pkin(1) * t590 + pkin(6) * t552 + t681 * t514 + t677 * t520;
t422 = -pkin(1) * t589 + pkin(6) * t551 + t681 * t513 + t677 * t519;
t413 = -pkin(3) * t769 + t747 + t833;
t412 = t677 * t502 + t815;
t410 = -t681 * t502 + t817;
t408 = qJ(5) * t759 - t690;
t407 = -pkin(4) * t759 + t694;
t406 = -pkin(3) * t503 - t730 + t804;
t405 = (pkin(4) * t672 - (2 * qJD(5))) * t623 + t687;
t404 = t677 * t503 + t815;
t402 = -t681 * t503 + t817;
t400 = -t678 * t465 + t682 * t466;
t399 = t682 * t465 + t678 * t466;
t398 = qJ(5) * t720 + t690;
t397 = pkin(4) * t720 + t694;
t390 = (-t502 - t751) * pkin(4) + t686;
t389 = -pkin(4) * t751 + t686 + t785;
t386 = -pkin(6) * t465 - (pkin(2) * t677 - pkin(7) * t681) * t482;
t377 = t447 - t848;
t376 = -pkin(3) * t501 + pkin(8) * t388;
t375 = t446 + t814;
t374 = pkin(6) * t466 - (-pkin(2) * t681 - pkin(7) * t677 - pkin(1)) * t482;
t373 = -t678 * t410 + t682 * t412;
t371 = t682 * t410 + t678 * t412;
t369 = t679 * t407 - t675 * t408;
t368 = t675 * t407 + t679 * t408;
t366 = -t675 * t390 - t502 * t754 - t803;
t365 = -t387 - t819;
t364 = -pkin(4) * t745 + t679 * t389 - t834;
t363 = (-t767 - t759) * qJ(5) + (-t772 - t671) * pkin(4) + t700 + t814;
t362 = -t678 * t402 + t682 * t404;
t360 = t682 * t402 + t678 * t404;
t358 = -t676 * t413 + t680 * t456 + t849;
t357 = t388 + t812;
t356 = t679 * t390 + t502 * t710 + t804;
t355 = -t833 + t675 * t389 + (pkin(3) + t757) * t769;
t354 = -qJ(5) * t771 + (-t558 + t759) * pkin(4) - t694 + t848;
t353 = -t676 * t406 + t680 * t445 - t821;
t352 = -pkin(4) * t768 + qJ(5) * t504 + t367;
t351 = t680 * t388 - t740;
t350 = t676 * t388 + t727;
t349 = -t675 * t397 + t679 * t398 - t819;
t348 = t681 * t351 + t677 * t501;
t347 = t677 * t351 - t681 * t501;
t342 = t679 * t397 + t675 * t398 + t812;
t341 = -t676 * t368 + t680 * t369;
t340 = t680 * t368 + t676 * t369;
t339 = -pkin(8) * t368 + (pkin(4) * t675 - t754) * t405;
t338 = -pkin(2) * t350 - pkin(3) * t387;
t337 = t681 * t358 - t677 * t377 - t859;
t336 = -t676 * t356 + t680 * t366 - t821;
t335 = t681 * t341 + t677 * t405;
t334 = t677 * t341 - t681 * t405;
t333 = pkin(8) * t369 + (t710 - t757) * t405;
t332 = -t676 * t355 + t680 * t364 - t849;
t331 = -pkin(6) * t402 + t681 * t353 - t677 * t375;
t330 = t677 * t358 + t681 * t377 - t857;
t329 = -t676 * t357 + t680 * t365 - t835;
t328 = -pkin(7) * t350 - pkin(8) * t727 - t676 * t376;
t327 = pkin(6) * t404 + t677 * t353 + t681 * t375 - t823;
t326 = -t678 * t347 + t682 * t348;
t325 = t682 * t347 + t678 * t348;
t324 = -t676 * t342 + t680 * t349 - t835;
t323 = -pkin(2) * t340 - pkin(3) * t368 - pkin(4) * t408 - qJ(5) * t407;
t322 = -pkin(6) * t410 + t681 * t336 - t677 * t363;
t321 = t681 * t332 - t677 * t354 + t859;
t320 = pkin(6) * t412 + t677 * t336 + t681 * t363 - t823;
t319 = t681 * t329 - t677 * t367 - t846;
t318 = t677 * t332 + t681 * t354 + t857;
t317 = -t678 * t334 + t682 * t335;
t316 = t682 * t334 + t678 * t335;
t315 = t677 * t329 + t681 * t367 + t844;
t314 = t681 * t324 - t677 * t352 - t846;
t313 = -pkin(7) * t340 - t676 * t333 + t680 * t339;
t312 = t677 * t324 + t681 * t352 + t844;
t311 = -pkin(6) * t347 + t681 * t328 - t677 * t338;
t310 = -pkin(1) * t350 + pkin(6) * t348 + t677 * t328 + t681 * t338;
t309 = -pkin(6) * t334 + t681 * t313 - t677 * t323;
t308 = -pkin(1) * t340 + pkin(6) * t335 + t677 * t313 + t681 * t323;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t648, -t649, 0, t604, 0, 0, 0, 0, 0, 0, t581, -t582, 0, t470, 0, 0, 0, 0, 0, 0, t479, t480, t512, t400, 0, 0, 0, 0, 0, 0, t362, -t361, t843, t326, 0, 0, 0, 0, 0, 0, t373, t843, t361, t317; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t649, -t648, 0, t603, 0, 0, 0, 0, 0, 0, t582, t581, 0, -t796, 0, 0, 0, 0, 0, 0, t477, t478, t511, t399, 0, 0, 0, 0, 0, 0, t360, t370, t842, t325, 0, 0, 0, 0, 0, 0, t371, t842, -t370, t316; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t589, t590, 0, -t482, 0, 0, 0, 0, 0, 0, t792, -t434, t810, t350, 0, 0, 0, 0, 0, 0, t792, t810, t434, t340; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t649, 0, -t648, 0, t699, -t628, -t603, -pkin(5) * t603, 0, 0, t582, 0, t581, 0, t838, -t839, t796, pkin(5) * t796 + pkin(6) * t721 - t678 * t529, -t678 * t560 + t682 * t562, -t678 * t540 + t682 * t541, -t678 * t570 + t682 * t572, -t678 * t559 + t682 * t561, -t678 * t569 + t682 * t571, -t678 * t601 + t682 * t602, -pkin(5) * t477 - t678 * t422 + t682 * t432, -pkin(5) * t478 - t678 * t423 + t682 * t433, -pkin(5) * t511 - t678 * t467 + t682 * t468, -pkin(5) * t399 - t678 * t374 + t682 * t386, t762, t855, t841, t789, t853, t791, -pkin(5) * t360 - t678 * t327 + t682 * t331, -t678 * t330 + t682 * t337 - t860, -t678 * t315 + t682 * t319 - t851, -pkin(5) * t325 - t678 * t310 + t682 * t311, t762, t841, -t855, t791, -t853, t789, -pkin(5) * t371 - t678 * t320 + t682 * t322, -t678 * t312 + t682 * t314 - t851, -t678 * t318 + t682 * t321 + t860, -pkin(5) * t316 - t678 * t308 + t682 * t309; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t648, 0, t649, 0, t628, t699, t604, pkin(5) * t604, 0, 0, -t581, 0, t582, 0, t839, t838, t470, pkin(5) * t470 + pkin(6) * t731 + t682 * t529, t682 * t560 + t678 * t562, t682 * t540 + t678 * t541, t682 * t570 + t678 * t572, t682 * t559 + t678 * t561, t682 * t569 + t678 * t571, t682 * t601 + t678 * t602, pkin(5) * t479 + t682 * t422 + t678 * t432, pkin(5) * t480 + t682 * t423 + t678 * t433, pkin(5) * t512 + t682 * t467 + t678 * t468, pkin(5) * t400 + t682 * t374 + t678 * t386, t761, -t856, t840, t788, -t854, t790, pkin(5) * t362 + t682 * t327 + t678 * t331, t682 * t330 + t678 * t337 - t861, t682 * t315 + t678 * t319 + t850, pkin(5) * t326 + t682 * t310 + t678 * t311, t761, t840, t856, t790, t854, t788, pkin(5) * t373 + t682 * t320 + t678 * t322, t682 * t312 + t678 * t314 + t850, t682 * t318 + t678 * t321 + t861, pkin(5) * t317 + t682 * t308 + t678 * t309; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t656, t657, 0, 0, 0, 0, 0, 0, 0, t716, pkin(1) * t639 - t587, pkin(1) * t638 - t588, 0, -pkin(1) * t532, (t630 + t711) * t676, t680 * t629 + t676 * t631, t680 * t650 + t737, t725, t676 * t652 + t724, 0, pkin(1) * t549 + pkin(2) * t631 + pkin(7) * t592 - t726, pkin(1) * t550 - pkin(2) * t629 + pkin(7) * t594 + t739, pkin(1) * t580 + pkin(2) * t641 + pkin(7) * t635 + t483, pkin(1) * t465 - pkin(2) * t573 + pkin(7) * t483, t440, -t829, t809, t763, t824, t766, pkin(1) * t402 - pkin(2) * t503 + t680 * t406 + t676 * t445 + t820, t680 * t413 + t676 * t456 - t858, t680 * t357 + t676 * t365 + t845, pkin(1) * t347 - pkin(2) * t501 + pkin(7) * t351 - pkin(8) * t740 + t680 * t376, t440, t809, t829, t766, -t824, t763, pkin(1) * t410 - pkin(2) * t502 + t680 * t356 + t676 * t366 + t820, t680 * t342 + t676 * t349 + t845, t680 * t355 + t676 * t364 + t858, pkin(1) * t334 - pkin(2) * t405 + pkin(7) * t341 + t680 * t333 + t676 * t339;];
tauB_reg = t1;
