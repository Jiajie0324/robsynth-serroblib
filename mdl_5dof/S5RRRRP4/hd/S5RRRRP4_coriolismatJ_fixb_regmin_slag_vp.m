% Calculate minimal parameter regressor of coriolis matrix for
% S5RRRRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x24]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:51
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RRRRP4_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP4_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP4_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRRP4_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:51:16
% EndTime: 2019-12-31 21:51:23
% DurationCPUTime: 3.16s
% Computational Cost: add. (4789->319), mult. (9133->377), div. (0->0), fcn. (8891->6), ass. (0->245)
t240 = qJD(3) + qJD(4);
t245 = cos(qJ(3));
t385 = -pkin(8) - pkin(7);
t221 = t385 * t245;
t242 = sin(qJ(4));
t243 = sin(qJ(3));
t371 = cos(qJ(4));
t305 = t371 * t243;
t294 = -t242 * t221 - t385 * t305;
t378 = t294 / 0.2e1;
t400 = t378 - t294 / 0.2e1;
t246 = cos(qJ(2));
t366 = t246 * pkin(1);
t233 = -pkin(2) - t366;
t395 = t233 / 0.2e1 - pkin(2) / 0.2e1;
t266 = t240 * t294;
t244 = sin(qJ(2));
t370 = pkin(1) * t244;
t231 = pkin(7) + t370;
t365 = pkin(8) + t231;
t198 = t365 * t245;
t297 = t365 * t243;
t295 = t242 * t198 + t371 * t297;
t268 = t240 * t295;
t315 = t371 / 0.2e1;
t316 = qJD(1) + qJD(2);
t206 = t242 * t245 + t305;
t314 = t371 * pkin(3);
t232 = -t314 - pkin(4);
t336 = t242 * t243;
t258 = t371 * t245 - t336;
t367 = t242 * pkin(3);
t229 = qJ(5) + t367;
t375 = -t229 / 0.2e1;
t386 = -pkin(4) / 0.2e1;
t37 = (t375 + t367 / 0.2e1 + qJ(5) / 0.2e1) * t206 - (-t314 / 0.2e1 - t232 / 0.2e1 + t386) * t258;
t399 = t316 * t37;
t234 = -t245 * pkin(3) - pkin(2);
t343 = t206 * qJ(5);
t368 = t258 * pkin(4);
t282 = -t343 - t368;
t133 = t234 + t282;
t120 = t133 - t366;
t299 = t133 / 0.2e1 + t120 / 0.2e1;
t398 = t299 * t206;
t203 = t206 ^ 2;
t111 = t258 ^ 2 - t203;
t397 = t316 * t111;
t227 = -t243 ^ 2 + t245 ^ 2;
t396 = t316 * t227;
t250 = t371 * t198 - t242 * t297;
t392 = t250 * qJD(5);
t251 = -t371 * t221 + t385 * t336;
t391 = t251 * qJD(5);
t345 = t133 * t206;
t347 = t120 * t206;
t390 = -t345 / 0.2e1 - t347 / 0.2e1;
t389 = t240 * t250;
t388 = t240 * t251;
t377 = -t251 / 0.2e1;
t380 = t251 / 0.2e1;
t381 = t295 / 0.2e1;
t382 = -t295 / 0.2e1;
t383 = t250 / 0.2e1;
t8 = (t377 - t250 / 0.2e1 + t380 + t383) * t206 - (t381 + t382 + t400) * t258;
t384 = t8 * qJD(3);
t177 = t258 * t366;
t376 = t177 / 0.2e1;
t374 = t232 / 0.2e1;
t372 = t242 / 0.2e1;
t369 = pkin(3) * t243;
t364 = pkin(1) * qJD(1);
t363 = pkin(1) * qJD(2);
t362 = pkin(2) * qJD(2);
t361 = pkin(3) * qJD(4);
t143 = pkin(4) * t206 - qJ(5) * t258;
t135 = t143 + t369;
t92 = t135 * t258;
t38 = -t92 + t347;
t356 = qJD(1) * t38;
t348 = t120 * t258;
t93 = t135 * t206;
t39 = -t93 - t348;
t355 = qJD(1) * t39;
t96 = t143 * t258;
t42 = -t96 + t347;
t354 = qJD(1) * t42;
t97 = t143 * t206;
t43 = -t97 - t348;
t353 = qJD(1) * t43;
t176 = t206 * t366;
t59 = t176 * t206 + t177 * t258;
t352 = qJD(1) * t59;
t349 = t120 * t135;
t351 = t349 * qJD(1);
t12 = t120 * t143;
t350 = t12 * qJD(1);
t346 = t133 * t258;
t344 = t135 * t133;
t22 = t143 * t133;
t219 = t234 - t366;
t342 = t219 * t258;
t341 = t219 * t206;
t340 = t229 * t206;
t339 = t232 * t258;
t338 = t234 * t258;
t337 = t234 * t206;
t29 = t120 * t370 + t176 * t295 + t177 * t250;
t335 = t29 * qJD(1);
t313 = t244 * t363;
t186 = t258 * t313;
t311 = t244 * t364;
t187 = t258 * t311;
t332 = -t186 - t187;
t197 = t203 * qJD(5);
t288 = t206 * t313;
t331 = t197 - t288;
t291 = t371 * t366;
t280 = t291 / 0.2e1;
t310 = -t366 / 0.2e1;
t286 = t243 * t310;
t330 = t242 * t286 + t245 * t280;
t287 = t366 * t372;
t329 = t243 * t280 + t245 * t287;
t281 = -t291 / 0.2e1;
t285 = t245 * t310;
t328 = t242 * t285 + t243 * t281;
t327 = t243 * t287 + t245 * t281;
t191 = t258 * t369;
t103 = -t191 + t341;
t326 = qJD(1) * t103;
t192 = t206 * t369;
t104 = t192 + t342;
t325 = qJD(1) * t104;
t324 = qJD(1) * t219;
t323 = qJD(1) * t233;
t322 = qJD(2) * t234;
t321 = qJD(4) * t219;
t320 = qJD(4) * t234;
t319 = qJD(5) * t206;
t196 = t258 * qJD(5);
t318 = t243 * qJD(3);
t239 = t245 * qJD(3);
t238 = qJD(4) * t314;
t317 = t238 + qJD(5);
t312 = t242 * t361;
t36 = -t340 / 0.2e1 + t339 / 0.2e1 - t343 / 0.2e1 - t368 / 0.2e1 + (t206 * t372 + t258 * t315) * pkin(3);
t309 = t36 * qJD(4) + (t339 - t340) * qJD(3) + t196;
t308 = t36 * qJD(3) + t282 * qJD(4) + t196;
t304 = qJD(1) * t347;
t303 = t258 * t324;
t302 = t206 * t324;
t301 = t243 * t323;
t300 = t245 * t323;
t298 = t234 / 0.2e1 + t219 / 0.2e1;
t296 = pkin(1) * t316;
t293 = -t348 / 0.2e1 - t346 / 0.2e1 + t330;
t292 = t328 - t390;
t142 = t240 * t206;
t290 = t206 * t311;
t289 = t243 * t311;
t63 = t338 / 0.2e1 + t342 / 0.2e1 + t327;
t64 = t337 / 0.2e1 + t341 / 0.2e1 + t328;
t284 = t244 * t296;
t283 = t316 * t206 * t258;
t249 = t400 * t250 + t251 * t382 - t295 * t377;
t259 = t176 * t374 + t229 * t376;
t1 = -t135 * t299 + t249 + t259;
t279 = -t1 * qJD(1) + qJD(2) * t344;
t278 = qJD(2) * t8;
t262 = qJ(5) * t376 + t176 * t386;
t3 = -t143 * t299 + t262;
t277 = -t3 * qJD(1) + t22 * qJD(2);
t276 = qJD(1) * t8;
t253 = t328 - t398;
t18 = t92 + t253;
t40 = -t92 + t345;
t275 = qJD(1) * t18 - qJD(2) * t40;
t254 = t258 * t299 + t330;
t19 = t93 + t254;
t41 = -t93 - t346;
t274 = qJD(1) * t19 - qJD(2) * t41;
t23 = t96 + t253;
t44 = -t96 + t345;
t273 = qJD(1) * t23 - qJD(2) * t44;
t24 = t97 + t254;
t45 = -t97 - t346;
t272 = qJD(1) * t24 - qJD(2) * t45;
t127 = -t191 + t337;
t61 = -t206 * t298 + t328;
t49 = t191 + t61;
t271 = qJD(1) * t49 - qJD(2) * t127;
t128 = t192 + t338;
t62 = -t258 * t298 + t327;
t50 = -t192 + t62;
t270 = qJD(1) * t50 - qJD(2) * t128;
t265 = t310 - t395;
t264 = pkin(4) * t383 + qJ(5) * t381;
t263 = pkin(4) * t380 + qJ(5) * t378;
t165 = t265 * t243;
t261 = qJD(1) * t165 + t243 * t362;
t166 = t265 * t245;
t260 = qJD(1) * t166 + t245 * t362;
t30 = t329 + t398;
t257 = qJD(1) * t30 + qJD(2) * t345;
t256 = qJD(1) * t62 - t258 * t322;
t255 = qJD(1) * t61 - t206 * t322;
t248 = (t250 * t315 + t295 * t372) * pkin(3) + t295 * t375 + t250 * t374;
t10 = t248 + t264;
t247 = (t251 * t315 + t294 * t372) * pkin(3) + t294 * t375 + t251 * t374;
t16 = t247 + t263;
t171 = (t371 * t229 + t232 * t242) * pkin(3);
t252 = t10 * qJD(1) + t16 * qJD(2) + t171 * qJD(3);
t241 = qJ(5) * qJD(5);
t237 = qJD(3) * t314;
t228 = t243 * t239;
t226 = t240 * qJ(5);
t225 = t229 * qJD(5);
t224 = t243 * t313;
t220 = t227 * qJD(3);
t195 = t316 * t245 * t243;
t168 = t395 * t245 + t285;
t167 = t395 * t243 + t286;
t156 = t206 * t196;
t141 = t316 * t203;
t140 = t240 * t258;
t75 = t258 * t142;
t58 = t59 * qJD(2);
t55 = qJD(3) * t367;
t53 = t240 * t367;
t52 = t192 + t63;
t51 = -t191 + t64;
t46 = t240 * t111;
t35 = t37 * qJD(3);
t34 = t37 * qJD(4);
t31 = t329 + t390;
t26 = -t97 + t293;
t25 = -t96 + t292;
t21 = -t93 + t293;
t20 = -t92 + t292;
t15 = t247 - t263;
t9 = t248 - t264;
t4 = t22 / 0.2e1 + t12 / 0.2e1 + t262;
t2 = t344 / 0.2e1 + t349 / 0.2e1 - t249 + t259;
t5 = [0, 0, 0, 0, -t313, -t246 * t363, t228, t220, 0, 0, 0, t233 * t318 - t245 * t313, t233 * t239 + t224, t75, t46, 0, 0, 0, qJD(3) * t103 + t206 * t321 - t186, qJD(3) * t104 + t258 * t321 + t288, qJD(3) * t38 + qJD(4) * t42 + t156 - t186, t58, qJD(3) * t39 + qJD(4) * t43 + t331, qJD(2) * t29 + qJD(3) * t349 + qJD(4) * t12 - t120 * t319; 0, 0, 0, 0, -t284, -t246 * t296, t228, t220, 0, 0, 0, qJD(3) * t167 - t245 * t284, qJD(3) * t168 + t224 + t289, t75, t46, 0, 0, 0, qJD(3) * t51 + qJD(4) * t64 + t332, qJD(3) * t52 + qJD(4) * t63 + t288 + t290, qJD(3) * t20 + qJD(4) * t25 + t156 + t332, t58 + t352 + t384, qJD(3) * t21 + qJD(4) * t26 - t290 + t331, t335 + (t133 * t370 + t176 * t294 + t177 * t251) * qJD(2) + t2 * qJD(3) + t4 * qJD(4) + t31 * qJD(5); 0, 0, 0, 0, 0, 0, t195, t396, t239, -t318, 0, qJD(2) * t167 - t231 * t239 + t301, qJD(2) * t168 + t231 * t318 + t300, t283, t397, t140, -t142, 0, qJD(2) * t51 + t326 - t389, qJD(2) * t52 + t268 + t325, qJD(2) * t20 + t356 - t389, t278 + t309, qJD(2) * t21 - t268 + t355, t351 + t2 * qJD(2) + (-t229 * t295 + t232 * t250) * qJD(3) + t9 * qJD(4) + t392; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t283, t397, t140, -t142, 0, qJD(2) * t64 + t302 - t389, qJD(2) * t63 + t268 + t303, qJD(2) * t25 + t354 - t389, t308, qJD(2) * t26 - t268 + t353, t350 + t4 * qJD(2) + t9 * qJD(3) + (-pkin(4) * t250 - qJ(5) * t295) * qJD(4) + t392; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t283, t140, t141, qJD(2) * t31 - t304 + t389; 0, 0, 0, 0, t311, t246 * t364, t228, t220, 0, 0, 0, -qJD(3) * t165 + t245 * t311, -qJD(3) * t166 - t289, t75, t46, 0, 0, 0, -qJD(3) * t49 - qJD(4) * t61 + t187, -qJD(3) * t50 - qJD(4) * t62 - t290, -qJD(3) * t18 - qJD(4) * t23 + t156 + t187, -t352 + t384, -qJD(3) * t19 - qJD(4) * t24 + t197 + t290, -qJD(3) * t1 - qJD(4) * t3 - qJD(5) * t30 - t335; 0, 0, 0, 0, 0, 0, t228, t220, 0, 0, 0, -pkin(2) * t318, -pkin(2) * t239, t75, t46, 0, 0, 0, qJD(3) * t127 + t206 * t320, qJD(3) * t128 + t258 * t320, qJD(3) * t40 + qJD(4) * t44 + t156, 0, qJD(3) * t41 + qJD(4) * t45 + t197, qJD(3) * t344 + qJD(4) * t22 - t133 * t319; 0, 0, 0, 0, 0, 0, t195, t396, t239, -t318, 0, -pkin(7) * t239 - t261, pkin(7) * t318 - t260, t283, t397, t140, -t142, 0, -t271 - t388, t266 - t270, -t275 - t388, t276 + t309, -t266 - t274, (-t229 * t294 + t232 * t251) * qJD(3) + t15 * qJD(4) + t391 + t279; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t283, t397, t140, -t142, 0, -t255 - t388, -t256 + t266, -t273 - t388, t308, -t266 - t272, t15 * qJD(3) + (-pkin(4) * t251 - qJ(5) * t294) * qJD(4) + t391 + t277; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t283, t140, t141, -t257 + t388; 0, 0, 0, 0, 0, 0, -t195, -t396, 0, 0, 0, qJD(2) * t165 - t301, qJD(2) * t166 - t300, -t283, -t397, 0, 0, 0, qJD(2) * t49 - t326, qJD(2) * t50 - t325, qJD(2) * t18 - t356, -t278 + t34, qJD(2) * t19 - t355, qJD(2) * t1 + qJD(4) * t10 - t351; 0, 0, 0, 0, 0, 0, -t195, -t396, 0, 0, 0, t261, t260, -t283, -t397, 0, 0, 0, t271, t270, t275, -t276 + t34, t274, qJD(4) * t16 - t279; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t312, -t238, -t312, 0, t317, qJD(4) * t171 + t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t53, -t238 - t237, -t53, t399, t237 + t317, (-pkin(4) * t242 + qJ(5) * t371) * t361 + t225 + t252; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t240, t229 * t240; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t283, -t397, 0, 0, 0, qJD(2) * t61 - t302, qJD(2) * t62 - t303, qJD(2) * t23 - t354, -t35, qJD(2) * t24 - t353, qJD(2) * t3 - qJD(3) * t10 - t350; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t283, -t397, 0, 0, 0, t255, t256, t273, -t35, t272, -qJD(3) * t16 - t277; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, t237, t55, -t399, qJD(5) - t237, t241 - t252; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(5), t241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t240, t226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t283, 0, -t141, qJD(2) * t30 + t304; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t283, 0, -t141, t257; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t240, -qJ(5) * qJD(4) - qJD(3) * t229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t240, -t226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t5;
