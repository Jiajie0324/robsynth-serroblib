% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRRPP3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:54
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRRPP3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPP3_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPP3_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPP3_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPP3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RRRPP3_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:53:53
% EndTime: 2019-12-31 20:54:00
% DurationCPUTime: 7.58s
% Computational Cost: add. (17317->493), mult. (24375->480), div. (0->0), fcn. (11765->6), ass. (0->303)
t858 = qJD(3) ^ 2;
t844 = qJD(1) + qJD(2);
t842 = t844 ^ 2;
t852 = sin(qJ(3));
t848 = t852 ^ 2;
t941 = t848 * t842;
t817 = -t858 - t941;
t855 = cos(qJ(3));
t821 = t855 * t842 * t852;
t811 = qJDD(3) - t821;
t923 = t855 * t811;
t761 = t852 * t817 + t923;
t910 = qJD(3) * t844;
t831 = t855 * t910;
t843 = qJDD(1) + qJDD(2);
t932 = t852 * t843;
t789 = 0.2e1 * t831 + t932;
t853 = sin(qJ(2));
t856 = cos(qJ(2));
t698 = t853 * t761 + t856 * t789;
t702 = t856 * t761 - t853 * t789;
t854 = sin(qJ(1));
t857 = cos(qJ(1));
t648 = pkin(5) * (t854 * t698 - t857 * t702);
t959 = pkin(5) * (t857 * t698 + t854 * t702);
t694 = pkin(1) * t698;
t849 = t855 ^ 2;
t834 = t849 * t842;
t819 = -t834 - t858;
t810 = qJDD(3) + t821;
t938 = t852 * t810;
t758 = -t855 * t819 + t938;
t830 = t852 * t910;
t922 = t855 * t843;
t792 = -0.2e1 * t830 + t922;
t697 = t853 * t758 - t856 * t792;
t701 = t856 * t758 + t853 * t792;
t647 = pkin(5) * (t854 * t697 - t857 * t701);
t960 = pkin(5) * (t857 * t697 + t854 * t701);
t956 = pkin(6) * t698;
t937 = t852 * t811;
t753 = -t855 * t817 + t937;
t898 = -pkin(1) * t753 + pkin(6) * t702;
t816 = t858 - t941;
t924 = t855 * t810;
t760 = -t852 * t816 + t924;
t918 = t856 * t843;
t719 = t853 * t760 - t852 * t918;
t928 = t853 * t843;
t723 = t856 * t760 + t852 * t928;
t666 = t857 * t719 + t854 * t723;
t1003 = t854 * t719 - t857 * t723;
t693 = pkin(1) * t697;
t957 = pkin(6) * t697;
t951 = t855 * g(3);
t877 = -qJDD(3) * pkin(3) - t858 * qJ(4) + qJDD(4) + t951;
t823 = t857 * g(1) + t854 * g(2);
t859 = qJD(1) ^ 2;
t808 = -t859 * pkin(1) - t823;
t822 = t854 * g(1) - t857 * g(2);
t876 = qJDD(1) * pkin(1) + t822;
t741 = t856 * t808 + t853 * t876;
t726 = -t842 * pkin(2) + t843 * pkin(7) + t741;
t883 = -pkin(3) * t855 - qJ(4) * t852;
t944 = t883 * t842;
t897 = t726 + t944;
t880 = t897 * t852;
t671 = t880 + t877;
t945 = qJ(4) * t819;
t1002 = -pkin(3) * t810 + t671 - t945;
t749 = t852 * t819 + t924;
t899 = -pkin(1) * t749 - pkin(6) * t701;
t800 = t856 * t842 + t928;
t773 = pkin(6) * t800 - t856 * g(3);
t803 = t853 * t842 - t918;
t879 = t857 * t800 - t854 * t803;
t985 = pkin(6) * t803 - t853 * g(3);
t1001 = pkin(5) * t879 + t857 * t773 - t854 * t985;
t925 = t855 * t792;
t940 = t852 * t789;
t730 = -t925 + t940;
t805 = -t834 + t941;
t684 = t853 * t730 + t856 * t805;
t686 = t856 * t730 - t853 * t805;
t1000 = t857 * t684 + t854 * t686;
t640 = t854 * t684 - t857 * t686;
t818 = t834 - t858;
t759 = -t855 * t818 + t937;
t718 = t853 * t759 + t855 * t918;
t722 = t856 * t759 - t853 * t922;
t665 = t857 * t718 + t854 * t722;
t997 = t854 * t718 - t857 * t722;
t984 = t854 * t800 + t857 * t803;
t996 = pkin(5) * t984 + t854 * t773 + t857 * t985;
t971 = pkin(2) * t749;
t954 = pkin(7) * t749;
t994 = qJ(5) * t810;
t740 = t853 * t808 - t856 * t876;
t896 = t853 * t740 + t856 * t741;
t681 = t856 * t740 - t853 * t741;
t927 = t854 * t681;
t992 = t857 * t896 + t927;
t917 = t857 * t681;
t991 = -t854 * t896 + t917;
t914 = pkin(2) * t789 + pkin(7) * t761;
t988 = pkin(2) * t753;
t953 = pkin(7) * t753;
t790 = t831 + t932;
t986 = t790 + t831;
t915 = pkin(2) * t792 - pkin(7) * t758;
t983 = pkin(3) * (-t792 + t830);
t982 = t852 * (pkin(4) * t843 + t897);
t704 = t852 * t726 + t951;
t705 = -t852 * g(3) + t855 * t726;
t654 = t852 * t704 + t855 * t705;
t942 = t844 * t852;
t809 = pkin(4) * t942 - qJD(3) * qJ(5);
t979 = -pkin(4) * t834 - t809 * t942;
t978 = -pkin(3) * t817 + qJ(4) * t811;
t908 = qJD(4) * qJD(3);
t839 = -0.2e1 * t908;
t977 = t839 - t988;
t748 = t852 * t818 + t923;
t791 = -t830 + t922;
t975 = -(t791 + t792) * qJ(5) - pkin(4) * t819;
t972 = -t994 + (t790 - t831) * pkin(4);
t869 = t877 + t972;
t907 = qJD(5) * qJD(3);
t865 = t869 - 0.2e1 * t907;
t641 = t880 + t865;
t838 = 0.2e1 * t908;
t882 = t858 * pkin(3) - qJDD(3) * qJ(4) - t855 * t944 - t705;
t867 = t791 * pkin(4) - qJ(5) * t834 + qJD(3) * t809 + qJDD(5) - t882;
t644 = t838 + t867;
t949 = pkin(3) + qJ(5);
t974 = qJ(4) * t644 - t949 * t641;
t973 = t949 * t810 + t945;
t966 = pkin(4) * t641;
t965 = pkin(4) * t644;
t964 = pkin(4) * t810;
t963 = pkin(4) * t811;
t962 = pkin(4) * t817;
t911 = t848 + t849;
t795 = t911 * t843;
t804 = t834 + t941;
t733 = t853 * t795 + t856 * t804;
t735 = t856 * t795 - t853 * t804;
t958 = pkin(5) * (t857 * t733 + t854 * t735);
t955 = pkin(6) * t733;
t947 = qJ(4) * t792;
t946 = qJ(4) * t804;
t943 = t791 * qJ(5);
t725 = -t843 * pkin(2) - t842 * pkin(7) + t740;
t709 = t852 * t725;
t939 = t852 * t792;
t710 = t855 * t725;
t926 = t855 * t789;
t916 = -pkin(2) * t725 + pkin(7) * t654;
t913 = pkin(2) * t804 + pkin(7) * t795;
t909 = qJD(5) * t855;
t902 = t709 - t914;
t901 = -t710 + t915;
t900 = qJD(4) * t942;
t895 = -t854 * t822 - t857 * t823;
t894 = t853 * t821;
t893 = t856 * t821;
t871 = -t791 * pkin(3) - t986 * qJ(4) + t725;
t868 = t871 + t979;
t881 = (pkin(3) * qJD(3) - 0.2e1 * qJD(4)) * t852;
t860 = (t881 - 0.2e1 * t909) * t844 + t868;
t630 = t860 - t943;
t577 = -t949 * t630 + t965;
t595 = -qJ(4) * t630 + t966;
t605 = t852 * t641 + t855 * t644;
t892 = -pkin(2) * t630 + pkin(7) * t605 + t855 * t577 + t852 * t595;
t828 = 0.2e1 * t900;
t645 = -pkin(3) * t830 + qJ(4) * t789 + t828 - t871;
t827 = 0.2e1 * t844 * t909;
t618 = t645 + t827 + t943 + t962 - t979;
t706 = t949 * t789 + t963;
t891 = t852 * t618 + t855 * t706 + t914;
t863 = pkin(4) * t922 + t867;
t626 = t949 * t804 + t838 + t863;
t632 = t865 + t946 + t982;
t890 = t855 * t626 + t852 * t632 + t913;
t669 = t838 - t882;
t659 = pkin(3) * t804 + t669;
t660 = t671 + t946;
t889 = t855 * t659 + t852 * t660 + t913;
t888 = t913 + t654;
t614 = t827 + t828 - t868 - t975 - t983;
t739 = t947 - t964;
t887 = t855 * t614 + t852 * t739 + t915;
t815 = t857 * qJDD(1) - t854 * t859;
t886 = -pkin(5) * t815 - t854 * g(3);
t884 = -pkin(3) * t671 + qJ(4) * t669;
t653 = t855 * t704 - t852 * t705;
t727 = t926 + t939;
t752 = t855 * t816 + t938;
t878 = t857 * t822 - t854 * t823;
t874 = pkin(3) * t926 + t852 * t645 + t914;
t646 = t871 - 0.2e1 * t900 + t983;
t873 = -qJ(4) * t939 + t855 * t646 - t915;
t872 = t882 - t978;
t624 = t855 * t669 + t852 * t671;
t656 = t844 * t881 + t871;
t870 = pkin(7) * t624 + (-pkin(2) + t883) * t656;
t864 = -qJ(5) * t817 + t867;
t862 = t864 + t978;
t837 = 0.2e1 * t907;
t861 = t837 - t671 - t972;
t829 = qJ(4) * t922;
t814 = t854 * qJDD(1) + t857 * t859;
t786 = -pkin(5) * t814 + t857 * g(3);
t785 = pkin(3) * t932 - t829;
t784 = t911 * t910;
t768 = t949 * t932 - t829;
t767 = t853 * qJDD(3) + t856 * t784;
t766 = -t856 * qJDD(3) + t853 * t784;
t765 = t855 * t790 - t848 * t910;
t764 = -t852 * t791 - t849 * t910;
t743 = t986 * t852;
t742 = (t791 - t830) * t855;
t732 = pkin(1) * t733;
t731 = pkin(6) * t735;
t715 = t856 * t765 - t894;
t714 = t856 * t764 + t894;
t713 = t853 * t765 + t893;
t712 = t853 * t764 - t893;
t708 = -pkin(1) * t800 - t741;
t707 = -pkin(1) * t803 - t740;
t688 = -t854 * t766 + t857 * t767;
t687 = t857 * t766 + t854 * t767;
t678 = pkin(1) * t681;
t677 = pkin(1) * g(3) + pkin(6) * t896;
t676 = t710 + t953;
t675 = t709 - t954;
t674 = t705 + t988;
t673 = t704 - t971;
t670 = pkin(5) * (-t854 * t733 + t857 * t735);
t664 = -t854 * t713 + t857 * t715;
t663 = -t854 * t712 + t857 * t714;
t662 = t857 * t713 + t854 * t715;
t661 = t857 * t712 + t854 * t714;
t638 = t971 - t1002;
t637 = t872 + t977;
t636 = -t693 + t901;
t635 = t902 - t694;
t634 = t856 * t653 - t955;
t633 = t853 * t653 + t731;
t629 = t856 * t654 + t853 * t725;
t628 = t853 * t654 - t856 * t725;
t623 = t852 * t669 - t855 * t671;
t621 = -pkin(3) * t940 + t855 * t645 - t953;
t620 = -qJ(4) * t925 - t852 * t646 + t954;
t619 = t732 + t888;
t616 = -t862 + t977;
t615 = t641 - t971 - t973;
t613 = -t852 * t659 + t855 * t660;
t611 = -t853 * t674 + t856 * t676 + t956;
t610 = -t853 * t673 + t856 * t675 + t957;
t609 = t856 * t674 + t853 * t676 - t898;
t608 = t856 * t673 + t853 * t675 + t899;
t607 = t694 + t874;
t606 = t873 + t693;
t604 = -t855 * t641 + t852 * t644;
t602 = t856 * t613 - t853 * t785 - t955;
t601 = t853 * t613 + t856 * t785 + t731;
t600 = -t852 * t614 + t855 * t739 - t954;
t599 = t855 * t618 - t852 * t706 - t953;
t598 = t732 + t889;
t597 = t856 * t624 + t853 * t656;
t596 = t853 * t624 - t856 * t656;
t593 = pkin(1) * t628 + t916;
t592 = -t852 * t626 + t855 * t632;
t591 = -pkin(2) * t623 - t884;
t590 = -t693 + t887;
t589 = t694 + t891;
t588 = t856 * t620 - t853 * t638 - t957;
t587 = t856 * t621 - t853 * t637 - t956;
t586 = -pkin(6) * t628 - (pkin(2) * t853 - pkin(7) * t856) * t653;
t585 = -pkin(7) * t623 + (pkin(3) * t852 - qJ(4) * t855) * t656;
t584 = t732 + t890;
t583 = t856 * t592 - t853 * t768 - t955;
t582 = t853 * t592 + t856 * t768 + t731;
t581 = t853 * t620 + t856 * t638 - t899;
t580 = t853 * t621 + t856 * t637 + t898;
t579 = t856 * t605 + t853 * t630;
t578 = t853 * t605 - t856 * t630;
t575 = pkin(6) * t629 - (-pkin(2) * t856 - pkin(7) * t853 - pkin(1)) * t653;
t574 = t856 * t599 - t853 * t616 - t956;
t573 = t856 * t600 - t853 * t615 + t957;
t572 = t853 * t599 + t856 * t616 + t898;
t571 = t853 * t600 + t856 * t615 + t899;
t570 = -pkin(2) * t604 - t974;
t569 = pkin(1) * t596 + t870;
t568 = -pkin(7) * t604 - t852 * t577 + t855 * t595;
t567 = -pkin(6) * t596 + t856 * t585 - t853 * t591;
t566 = -pkin(1) * t623 + pkin(6) * t597 + t853 * t585 + t856 * t591;
t565 = pkin(1) * t578 + t892;
t564 = -pkin(6) * t578 + t856 * t568 - t853 * t570;
t563 = -pkin(1) * t604 + pkin(6) * t579 + t853 * t568 + t856 * t570;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t815, 0, -t814, 0, t886, -t786, -t878, -pkin(5) * t878, 0, 0, -t984, 0, -t879, 0, t996, t1001, t991, pkin(5) * t991 + pkin(6) * t917 - t854 * t677, t664, t640, -t1003, t663, t997, t688, -t854 * t608 + t857 * t610 + t960, -t854 * t609 + t857 * t611 + t959, -t854 * t633 + t857 * t634 - t958, t857 * t586 - t854 * t575 - pkin(5) * (t857 * t628 + t854 * t629), t688, t1003, -t997, t664, t640, t663, -t854 * t601 + t857 * t602 - t958, -t854 * t581 + t857 * t588 - t960, -t854 * t580 + t857 * t587 - t959, t857 * t567 - t854 * t566 - pkin(5) * (t857 * t596 + t854 * t597), t688, -t997, -t1003, t663, -t640, t664, -t854 * t582 + t857 * t583 - t958, -t854 * t572 + t857 * t574 - t959, -t854 * t571 + t857 * t573 + t960, t857 * t564 - t854 * t563 - pkin(5) * (t857 * t578 + t854 * t579); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t814, 0, t815, 0, t786, t886, t895, pkin(5) * t895, 0, 0, t879, 0, -t984, 0, -t1001, t996, t992, pkin(5) * t992 + pkin(6) * t927 + t857 * t677, t662, -t1000, t666, t661, -t665, t687, t857 * t608 + t854 * t610 + t647, t857 * t609 + t854 * t611 + t648, t857 * t633 + t854 * t634 + t670, t854 * t586 + t857 * t575 + pkin(5) * (-t854 * t628 + t857 * t629), t687, -t666, t665, t662, -t1000, t661, t857 * t601 + t854 * t602 + t670, t857 * t581 + t854 * t588 - t647, t857 * t580 + t854 * t587 - t648, t854 * t567 + t857 * t566 + pkin(5) * (-t854 * t596 + t857 * t597), t687, t665, t666, t661, t1000, t662, t857 * t582 + t854 * t583 + t670, t857 * t572 + t854 * t574 - t648, t857 * t571 + t854 * t573 + t647, t854 * t564 + t857 * t563 + pkin(5) * (-t854 * t578 + t857 * t579); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t822, t823, 0, 0, 0, 0, 0, 0, 0, t843, t707, t708, 0, -t678, t743, t727, t752, t742, t748, 0, t636, t635, t619, t593, 0, -t752, -t748, t743, t727, t742, t598, t606, t607, t569, 0, -t748, t752, t742, -t727, t743, t584, t589, t590, t565; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t859, 0, 0, -g(3), -t822, 0, 0, 0, -t803, 0, -t800, 0, t985, t773, t681, pkin(6) * t681, t715, -t686, t723, t714, -t722, t767, t610, t611, t634, t586, t767, -t723, t722, t715, -t686, t714, t602, t588, t587, t567, t767, t722, t723, t714, t686, t715, t583, t574, t573, t564; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t859, 0, qJDD(1), 0, g(3), 0, -t823, 0, 0, 0, t800, 0, -t803, 0, -t773, t985, t896, t677, t713, -t684, t719, t712, -t718, t766, t608, t609, t633, t575, t766, -t719, t718, t713, -t684, t712, t601, t581, t580, t566, t766, t718, t719, t712, t684, t713, t582, t572, t571, t563; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t822, t823, 0, 0, 0, 0, 0, 0, 0, t843, t707, t708, 0, -t678, t743, t727, t752, t742, t748, 0, t636, t635, t619, t593, 0, -t752, -t748, t743, t727, t742, t598, t606, t607, t569, 0, -t748, t752, t742, -t727, t743, t584, t589, t590, t565; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t843, 0, -t842, 0, 0, -g(3), t740, 0, t765, -t730, t760, t764, -t759, t784, t675, t676, t653, pkin(7) * t653, t784, -t760, t759, t765, -t730, t764, t613, t620, t621, t585, t784, t759, t760, t764, t730, t765, t592, t599, t600, t568; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t842, 0, t843, 0, g(3), 0, t741, 0, t821, -t805, -t932, -t821, -t922, -qJDD(3), t673, t674, 0, pkin(2) * t653, -qJDD(3), t932, t922, t821, -t805, -t821, t785, t638, t637, t591, -qJDD(3), t922, -t932, -t821, t805, t821, t768, t616, t615, t570; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t843, -t740, -t741, 0, 0, t743, t727, t752, t742, t748, 0, t901, t902, t888, t916, 0, -t752, -t748, t743, t727, t742, t889, t873, t874, t870, 0, -t748, t752, t742, -t727, t743, t890, t891, t887, t892; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t790, t792, t810, -t831, t818, t831, 0, t725, t704, 0, t831, -t810, -t818, t790, t792, -t831, t660, -t947, t645, -qJ(4) * t656, t831, -t818, t810, -t831, -t792, t790, t632, t618, t739, t595; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t830, t789, t816, t791, t811, -t830, -t725, 0, t705, 0, -t830, -t816, -t811, t830, t789, t791, t659, t646, pkin(3) * t789, -pkin(3) * t656, -t830, -t811, t816, t791, -t789, t830, t626, t706, t614, t577; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t821, t805, t932, t821, t922, qJDD(3), -t704, -t705, 0, 0, qJDD(3), -t932, -t922, -t821, t805, t821, -t785, t1002, t838 - t872, t884, qJDD(3), -t922, t932, t821, -t805, -t821, -t768, t838 + t862, t861 + t973, t974; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t932, -t922, -t821, t805, t821, 0, t671, t669, 0, qJDD(3), -t922, t932, t821, -t805, -t821, -qJ(5) * t932, t838 + t864, t861 + t994, -qJ(5) * t641; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t831, t810, t818, -t790, -t792, t831, -t671, 0, t656, 0, -t831, t818, -t810, t831, t792, -t790, t837 - t869 - t982, t630 - t962, t964, -t966; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t830, t816, t811, -t830, -t789, -t791, -t669, -t656, 0, 0, t830, t811, -t816, -t791, t789, -t830, -qJ(5) * t804 + t839 - t863, -qJ(5) * t789 - t963, t860 + t975, qJ(5) * t630 - t965; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t922, t932, t821, -t805, -t821, 0, t644, -t641, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t830, t811, -t816, -t791, t789, -t830, -t644, 0, t630, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t831, -t818, t810, -t831, -t792, t790, t641, -t630, 0, 0;];
m_new_reg = t1;
