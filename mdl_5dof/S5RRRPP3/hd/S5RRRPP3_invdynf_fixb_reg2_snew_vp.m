% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRPP3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:54
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRPP3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPP3_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPP3_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPP3_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPP3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RRRPP3_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:54:00
% EndTime: 2019-12-31 20:54:02
% DurationCPUTime: 1.74s
% Computational Cost: add. (2953->178), mult. (4221->160), div. (0->0), fcn. (2158->6), ass. (0->93)
t1097 = qJD(1) + qJD(2);
t1095 = t1097 ^ 2;
t1104 = sin(qJ(3));
t1107 = cos(qJ(3));
t1121 = t1107 * t1095 * t1104;
t1073 = qJDD(3) + t1121;
t1101 = t1107 ^ 2;
t1129 = t1101 * t1095;
t1134 = qJD(3) ^ 2;
t1079 = -t1129 - t1134;
t1053 = t1073 * t1104 - t1079 * t1107;
t1130 = t1097 * t1104;
t1088 = qJD(3) * t1130;
t1096 = qJDD(1) + qJDD(2);
t1125 = t1107 * t1096;
t1062 = -0.2e1 * t1088 + t1125;
t1105 = sin(qJ(2));
t1108 = cos(qJ(2));
t1033 = t1053 * t1105 - t1108 * t1062;
t1037 = t1053 * t1108 + t1105 * t1062;
t1106 = sin(qJ(1));
t1109 = cos(qJ(1));
t1140 = t1033 * t1109 + t1037 * t1106;
t1021 = t1033 * t1106 - t1037 * t1109;
t1074 = qJDD(3) - t1121;
t1100 = t1104 ^ 2;
t1078 = -t1095 * t1100 - t1134;
t1054 = t1074 * t1107 + t1078 * t1104;
t1120 = t1107 * t1097 * qJD(3);
t1128 = t1104 * t1096;
t1061 = 0.2e1 * t1120 + t1128;
t1034 = t1054 * t1105 + t1108 * t1061;
t1038 = t1054 * t1108 - t1105 * t1061;
t1020 = t1034 * t1109 + t1038 * t1106;
t1139 = t1034 * t1106 - t1038 * t1109;
t1069 = t1095 * t1105 - t1096 * t1108;
t1115 = -t1095 * t1108 - t1096 * t1105;
t1138 = t1069 * t1106 + t1109 * t1115;
t1137 = t1069 * t1109 - t1106 * t1115;
t1133 = 2 * qJD(4);
t1132 = -2 * qJD(5);
t1131 = t1107 * g(3);
t1082 = -g(1) * t1109 - g(2) * t1106;
t1110 = qJD(1) ^ 2;
t1072 = -pkin(1) * t1110 + t1082;
t1081 = g(1) * t1106 - g(2) * t1109;
t1112 = qJDD(1) * pkin(1) + t1081;
t1047 = t1072 * t1108 + t1105 * t1112;
t1122 = t1100 + t1101;
t1043 = -pkin(2) * t1095 + pkin(7) * t1096 + t1047;
t1119 = t1095 * (-pkin(3) * t1107 - qJ(4) * t1104) + t1043;
t1046 = -t1105 * t1072 + t1108 * t1112;
t1118 = -t1088 + t1125;
t1094 = t1104 * g(3);
t1117 = -pkin(3) * t1134 + qJDD(3) * qJ(4) - t1094;
t1116 = (pkin(3) * qJD(3) - (2 * qJD(4))) * t1104;
t1048 = t1073 * t1107 + t1079 * t1104;
t1050 = t1074 * t1104 - t1078 * t1107;
t1114 = pkin(4) * t1130 - qJD(3) * qJ(5);
t1042 = -pkin(2) * t1096 - pkin(7) * t1095 - t1046;
t1113 = t1120 + t1128;
t1111 = -t1118 * pkin(3) + t1042 + (-t1113 - t1120) * qJ(4);
t1027 = -qJDD(3) * pkin(3) - qJ(4) * t1134 + t1104 * t1119 + qJDD(4) + t1131;
t1077 = -qJDD(1) * t1106 - t1109 * t1110;
t1076 = qJDD(1) * t1109 - t1106 * t1110;
t1071 = t1122 * t1095;
t1066 = t1122 * t1096;
t1045 = t1066 * t1108 - t1071 * t1105;
t1044 = t1066 * t1105 + t1071 * t1108;
t1041 = t1107 * t1043 - t1094;
t1040 = -t1043 * t1104 - t1131;
t1031 = -t1046 * t1105 + t1047 * t1108;
t1030 = t1046 * t1108 + t1047 * t1105;
t1029 = -t1044 * t1106 + t1045 * t1109;
t1028 = t1044 * t1109 + t1045 * t1106;
t1026 = qJD(3) * t1133 + t1119 * t1107 + t1117;
t1025 = t1097 * t1116 + t1111;
t1024 = -t1040 * t1104 + t1041 * t1107;
t1023 = t1040 * t1107 + t1041 * t1104;
t1018 = -qJ(5) * t1129 - t1088 * pkin(4) + qJDD(5) + (pkin(4) * t1096 + t1119) * t1107 + (t1133 + t1114) * qJD(3) + t1117;
t1017 = qJD(3) * t1132 + t1027 - t1073 * qJ(5) + (t1113 - t1120) * pkin(4);
t1016 = -t1114 * t1130 - pkin(4) * t1129 - t1118 * qJ(5) + (t1107 * t1132 + t1116) * t1097 + t1111;
t1015 = t1024 * t1108 + t1042 * t1105;
t1014 = t1024 * t1105 - t1042 * t1108;
t1013 = t1026 * t1107 + t1027 * t1104;
t1012 = t1026 * t1104 - t1027 * t1107;
t1011 = t1017 * t1104 + t1018 * t1107;
t1010 = -t1017 * t1107 + t1018 * t1104;
t1009 = t1013 * t1108 + t1025 * t1105;
t1008 = t1013 * t1105 - t1025 * t1108;
t1007 = t1011 * t1108 + t1016 * t1105;
t1006 = t1011 * t1105 - t1016 * t1108;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1077, -t1076, 0, -t1081 * t1106 + t1082 * t1109, 0, 0, 0, 0, 0, 0, t1138, t1137, 0, -t1030 * t1106 + t1031 * t1109, 0, 0, 0, 0, 0, 0, t1021, t1139, t1029, -t1014 * t1106 + t1015 * t1109, 0, 0, 0, 0, 0, 0, t1029, -t1021, -t1139, -t1008 * t1106 + t1009 * t1109, 0, 0, 0, 0, 0, 0, t1029, -t1139, t1021, -t1006 * t1106 + t1007 * t1109; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1076, t1077, 0, t1081 * t1109 + t1082 * t1106, 0, 0, 0, 0, 0, 0, -t1137, t1138, 0, t1030 * t1109 + t1031 * t1106, 0, 0, 0, 0, 0, 0, -t1140, -t1020, t1028, t1014 * t1109 + t1015 * t1106, 0, 0, 0, 0, 0, 0, t1028, t1140, t1020, t1008 * t1109 + t1009 * t1106, 0, 0, 0, 0, 0, 0, t1028, t1020, -t1140, t1006 * t1109 + t1007 * t1106; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1048, -t1050, 0, t1023, 0, 0, 0, 0, 0, 0, 0, -t1048, t1050, t1012, 0, 0, 0, 0, 0, 0, 0, t1050, t1048, t1010; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1110, -qJDD(1), 0, t1082, 0, 0, 0, 0, 0, 0, t1115, t1069, 0, t1031, 0, 0, 0, 0, 0, 0, -t1037, -t1038, t1045, t1015, 0, 0, 0, 0, 0, 0, t1045, t1037, t1038, t1009, 0, 0, 0, 0, 0, 0, t1045, t1038, -t1037, t1007; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1110, 0, t1081, 0, 0, 0, 0, 0, 0, -t1069, t1115, 0, t1030, 0, 0, 0, 0, 0, 0, -t1033, -t1034, t1044, t1014, 0, 0, 0, 0, 0, 0, t1044, t1033, t1034, t1008, 0, 0, 0, 0, 0, 0, t1044, t1034, -t1033, t1006; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1048, -t1050, 0, t1023, 0, 0, 0, 0, 0, 0, 0, -t1048, t1050, t1012, 0, 0, 0, 0, 0, 0, 0, t1050, t1048, t1010; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1095, -t1096, 0, t1047, 0, 0, 0, 0, 0, 0, -t1053, -t1054, t1066, t1024, 0, 0, 0, 0, 0, 0, t1066, t1053, t1054, t1013, 0, 0, 0, 0, 0, 0, t1066, t1054, -t1053, t1011; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1096, -t1095, 0, t1046, 0, 0, 0, 0, 0, 0, t1062, -t1061, t1071, -t1042, 0, 0, 0, 0, 0, 0, t1071, -t1062, t1061, -t1025, 0, 0, 0, 0, 0, 0, t1071, t1061, t1062, -t1016; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1048, -t1050, 0, t1023, 0, 0, 0, 0, 0, 0, 0, -t1048, t1050, t1012, 0, 0, 0, 0, 0, 0, 0, t1050, t1048, t1010; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1079, -t1074, t1125, t1041, 0, 0, 0, 0, 0, 0, t1125, -t1079, t1074, t1026, 0, 0, 0, 0, 0, 0, t1125, t1074, t1079, t1018; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1073, t1078, -t1128, t1040, 0, 0, 0, 0, 0, 0, -t1128, -t1073, -t1078, -t1027, 0, 0, 0, 0, 0, 0, -t1128, -t1078, t1073, -t1017; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1062, t1061, -t1071, t1042, 0, 0, 0, 0, 0, 0, -t1071, t1062, -t1061, t1025, 0, 0, 0, 0, 0, 0, -t1071, -t1061, -t1062, t1016; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1071, t1062, -t1061, t1025, 0, 0, 0, 0, 0, 0, -t1071, -t1061, -t1062, t1016; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1125, t1079, -t1074, -t1026, 0, 0, 0, 0, 0, 0, -t1125, -t1074, -t1079, -t1018; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1128, t1073, t1078, t1027, 0, 0, 0, 0, 0, 0, t1128, t1078, -t1073, t1017; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1071, -t1061, -t1062, t1016; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1128, t1078, -t1073, t1017; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1125, t1074, t1079, t1018;];
f_new_reg = t1;
