% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S5RRRPR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d5,theta4]';
% 
% Output:
% tau_reg [5x(5*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:31
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S5RRRPR10_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR10_invdynJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR10_invdynJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR10_invdynJ_fixb_reg2_slag_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR10_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5RRRPR10_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:29:58
% EndTime: 2019-12-31 21:30:26
% DurationCPUTime: 14.58s
% Computational Cost: add. (13833->677), mult. (34911->932), div. (0->0), fcn. (27666->14), ass. (0->308)
t269 = cos(qJ(2));
t260 = sin(pkin(5));
t370 = qJD(1) * t260;
t338 = t269 * t370;
t454 = qJD(3) - t338;
t265 = sin(qJ(2));
t342 = t265 * t370;
t261 = cos(pkin(5));
t369 = qJD(1) * t261;
t356 = pkin(1) * t369;
t184 = -pkin(7) * t342 + t269 * t356;
t311 = pkin(2) * t265 - pkin(8) * t269;
t185 = t311 * t370;
t264 = sin(qJ(3));
t268 = cos(qJ(3));
t118 = t268 * t184 + t264 * t185;
t319 = t264 * t338;
t425 = qJ(4) + pkin(8);
t332 = qJD(3) * t425;
t453 = qJ(4) * t319 + t268 * qJD(4) - t264 * t332 - t118;
t117 = -t264 * t184 + t268 * t185;
t378 = t268 * t269;
t452 = -t264 * qJD(4) - t268 * t332 - (pkin(3) * t265 - qJ(4) * t378) * t370 - t117;
t259 = sin(pkin(10));
t389 = t259 * t264;
t407 = cos(pkin(10));
t290 = t268 * t407 - t389;
t144 = t290 * t338;
t192 = t290 * qJD(3);
t377 = t144 - t192;
t331 = t407 * t264;
t203 = t259 * t268 + t331;
t374 = t454 * t203;
t408 = t452 * t259 + t453 * t407;
t385 = t260 * t269;
t242 = pkin(7) * t385;
t431 = pkin(1) * t265;
t373 = t261 * t431 + t242;
t187 = t373 * qJD(1);
t366 = qJD(3) * t264;
t312 = -t187 + (-t319 + t366) * pkin(3);
t263 = sin(qJ(5));
t267 = cos(qJ(5));
t324 = qJD(2) + t369;
t165 = t264 * t324 + t268 * t342;
t149 = qJD(2) * pkin(8) + (t242 + (pkin(8) + t431) * t261) * qJD(1);
t300 = -pkin(2) * t269 - pkin(8) * t265 - pkin(1);
t177 = t300 * t260;
t153 = qJD(1) * t177;
t92 = -t149 * t264 + t268 * t153;
t73 = -qJ(4) * t165 + t92;
t67 = pkin(3) * t454 + t73;
t320 = t264 * t342;
t163 = -t268 * t324 + t320;
t93 = t149 * t268 + t153 * t264;
t74 = -qJ(4) * t163 + t93;
t71 = t407 * t74;
t35 = t259 * t67 + t71;
t32 = pkin(9) * t454 + t35;
t148 = -pkin(2) * t324 - t184;
t102 = t163 * pkin(3) + qJD(4) + t148;
t104 = t407 * t163 + t165 * t259;
t291 = -t259 * t163 + t165 * t407;
t42 = t104 * pkin(4) - pkin(9) * t291 + t102;
t11 = t263 * t42 + t267 * t32;
t298 = qJD(3) * t324;
t360 = qJDD(1) * t261;
t317 = qJDD(2) + t360;
t359 = qJDD(1) * t265;
t335 = t260 * t359;
t361 = qJD(1) * qJD(2);
t336 = t260 * t361;
t445 = t269 * t336 + t335;
t94 = qJD(3) * t320 - t264 * t317 + (-t298 - t445) * t268;
t367 = qJD(2) * t269;
t340 = t264 * t367;
t365 = qJD(3) * t268;
t95 = (qJD(1) * (t265 * t365 + t340) + t264 * t359) * t260 + t264 * t298 - t268 * t317;
t61 = -t259 * t94 + t407 * t95;
t62 = -t259 * t95 - t407 * t94;
t323 = qJD(2) * t356;
t354 = pkin(1) * t360;
t321 = t445 * pkin(7) + t265 * t323 - t269 * t354;
t112 = -pkin(2) * t317 + t321;
t64 = t95 * pkin(3) + qJDD(4) + t112;
t12 = t61 * pkin(4) - t62 * pkin(9) + t64;
t358 = qJDD(1) * t269;
t238 = t260 * t358;
t315 = t265 * t336;
t179 = qJDD(3) - t238 + t315;
t348 = pkin(7) * t238 + t265 * t354 + t269 * t323;
t126 = -pkin(7) * t315 + t348;
t111 = pkin(8) * t317 + t126;
t294 = t311 * qJD(2);
t115 = (qJD(1) * t294 + qJDD(1) * t300) * t260;
t41 = -qJD(3) * t93 - t264 * t111 + t268 * t115;
t23 = t179 * pkin(3) + t94 * qJ(4) - t165 * qJD(4) + t41;
t287 = -t268 * t111 - t264 * t115 + t149 * t366 - t153 * t365;
t25 = -qJ(4) * t95 - qJD(4) * t163 - t287;
t8 = t259 * t23 + t407 * t25;
t6 = pkin(9) * t179 + t8;
t2 = -qJD(5) * t11 + t267 * t12 - t263 * t6;
t442 = qJD(5) + t104;
t451 = t11 * t442 + t2;
t304 = t263 * t32 - t267 * t42;
t1 = -t304 * qJD(5) + t263 * t12 + t267 * t6;
t450 = t304 * t442 + t1;
t388 = t260 * t265;
t193 = -t261 * t268 + t264 * t388;
t449 = t193 * pkin(3);
t448 = -pkin(9) * t342 + t408;
t447 = t374 * pkin(4) + t377 * pkin(9) + t312;
t446 = t104 * t291;
t433 = cos(qJ(1));
t344 = t433 * t269;
t266 = sin(qJ(1));
t381 = t265 * t266;
t198 = -t261 * t381 + t344;
t386 = t260 * t268;
t140 = -t198 * t264 + t266 * t386;
t444 = -t454 * t92 - t287;
t325 = t442 * t267;
t60 = qJDD(5) + t61;
t443 = -t263 * t60 - t325 * t442;
t240 = pkin(7) * t388;
t430 = pkin(1) * t269;
t199 = t261 * t430 - t240;
t188 = qJD(2) * t199;
t345 = t433 * t265;
t380 = t266 * t269;
t196 = t261 * t345 + t380;
t256 = qJ(3) + pkin(10);
t252 = sin(t256);
t253 = cos(t256);
t347 = t260 * t433;
t131 = t196 * t253 - t252 * t347;
t195 = -t261 * t344 + t381;
t441 = t131 * t263 - t195 * t267;
t440 = t131 * t267 + t195 * t263;
t409 = t453 * t259 - t452 * t407;
t439 = -t454 * t93 - t41;
t197 = t261 * t380 + t345;
t436 = -g(1) * t197 - g(2) * t195 + g(3) * t385;
t437 = t436 * t252;
t176 = pkin(8) * t261 + t373;
t114 = t268 * t176 + t264 * t177;
t189 = t373 * qJD(2);
t270 = qJD(1) ^ 2;
t434 = qJD(2) ^ 2;
t255 = t260 ^ 2;
t432 = pkin(1) * t255;
t429 = pkin(3) * t165;
t428 = pkin(3) * t259;
t427 = g(3) * t260;
t81 = t263 * t291 - t267 * t454;
t83 = t263 * t454 + t267 * t291;
t426 = t83 * t81;
t330 = -t267 * t179 + t263 * t62;
t30 = qJD(5) * t83 + t330;
t363 = qJD(5) * t267;
t424 = -t263 * t30 - t81 * t363;
t251 = pkin(3) * t268 + pkin(2);
t129 = -pkin(4) * t290 - pkin(9) * t203 - t251;
t228 = t425 * t268;
t147 = t407 * t228 - t389 * t425;
t78 = t129 * t267 - t147 * t263;
t423 = qJD(5) * t78 + t447 * t263 + t448 * t267;
t79 = t129 * t263 + t147 * t267;
t422 = -qJD(5) * t79 - t448 * t263 + t447 * t267;
t138 = -qJD(3) * t193 + t367 * t386;
t194 = t261 * t264 + t265 * t386;
t368 = qJD(2) * t265;
t341 = t260 * t368;
t186 = t260 * t294;
t69 = -t114 * qJD(3) + t268 * t186 - t264 * t188;
t46 = pkin(3) * t341 - qJ(4) * t138 - qJD(4) * t194 + t69;
t137 = qJD(3) * t194 + t260 * t340;
t68 = -t176 * t366 + t177 * t365 + t264 * t186 + t268 * t188;
t50 = -qJ(4) * t137 - qJD(4) * t193 + t68;
t18 = t259 * t46 + t407 * t50;
t113 = -t176 * t264 + t268 * t177;
t77 = -pkin(3) * t385 - qJ(4) * t194 + t113;
t88 = -qJ(4) * t193 + t114;
t49 = t259 * t77 + t407 * t88;
t421 = t291 * t81;
t420 = t259 * t74;
t418 = t263 * t81;
t417 = t263 * t83;
t416 = t267 * t81;
t364 = qJD(5) * t263;
t29 = -t263 * t179 - t267 * t62 + t291 * t364 - t363 * t454;
t415 = t29 * t263;
t414 = t30 * t267;
t413 = t83 * t291;
t410 = pkin(4) * t342 + t409;
t406 = t291 ^ 2;
t405 = t291 * t454;
t404 = t104 ^ 2;
t403 = t104 * t454;
t402 = t163 * t454;
t401 = t165 * t163;
t400 = t165 * t454;
t397 = t196 * t264;
t395 = t203 * t263;
t394 = t203 * t267;
t393 = t454 * t264;
t392 = t253 * t263;
t391 = t253 * t267;
t390 = t255 * t270;
t387 = t260 * t266;
t383 = t425 * t265;
t382 = t263 * t269;
t379 = t267 * t269;
t376 = -t195 * t251 + t196 * t425;
t375 = -t197 * t251 + t198 * t425;
t372 = t433 * pkin(1) + pkin(7) * t387;
t257 = t265 ^ 2;
t258 = t269 ^ 2;
t371 = t257 - t258;
t353 = t269 * t390;
t351 = t264 * t387;
t349 = t260 * t379;
t230 = t260 * t382;
t346 = t268 * t433;
t343 = t407 * pkin(3);
t339 = t260 * t261 * t270;
t337 = t269 * t361;
t333 = -pkin(1) * t266 + pkin(7) * t347;
t7 = t407 * t23 - t259 * t25;
t122 = t144 * t263 - t267 * t342;
t329 = -t192 * t263 + t122;
t123 = t144 * t267 + t263 * t342;
t328 = -t192 * t267 + t123;
t327 = -t196 * t252 - t253 * t347;
t231 = t264 * t347;
t326 = t196 * t268 - t231;
t322 = t265 * t353;
t318 = t454 * t342;
t316 = t265 * t337;
t313 = t140 * pkin(3);
t310 = pkin(4) * t253 + pkin(9) * t252;
t134 = t198 * t252 - t253 * t387;
t309 = g(1) * t327 + g(2) * t134;
t307 = g(1) * t195 - g(2) * t197;
t306 = g(1) * t198 + g(2) * t196;
t45 = -pkin(9) * t385 + t49;
t124 = t193 * t407 + t194 * t259;
t125 = -t259 * t193 + t194 * t407;
t175 = t240 + (-pkin(2) - t430) * t261;
t128 = t175 + t449;
t63 = t124 * pkin(4) - t125 * pkin(9) + t128;
t20 = t263 * t63 + t267 * t45;
t19 = -t263 * t45 + t267 * t63;
t303 = t416 + t417;
t302 = pkin(3) * t351 + t197 * t425 + t198 * t251 + t372;
t299 = t267 * t60 + (-t104 * t263 - t364) * t442;
t296 = g(1) * t433 + g(2) * t266;
t295 = -t267 * t29 - t364 * t83;
t99 = t125 * t263 + t349;
t17 = -t259 * t50 + t407 * t46;
t34 = t407 * t67 - t420;
t48 = -t259 * t88 + t407 * t77;
t293 = pkin(3) * t231 - t195 * t425 - t196 * t251 + t333;
t249 = pkin(9) + t428;
t31 = -pkin(4) * t454 - t34;
t292 = -t249 * t60 + t31 * t442;
t288 = t337 + t359;
t173 = -t252 * t388 + t253 * t261;
t286 = g(1) * t134 - g(2) * t327 - g(3) * t173;
t135 = t198 * t253 + t252 * t387;
t174 = t252 * t261 + t253 * t388;
t285 = -g(1) * t135 - g(2) * t131 - g(3) * t174;
t284 = -t260 * t346 - t397;
t283 = t203 * t363 - t329;
t282 = -t203 * t364 - t328;
t278 = -g(3) * t388 - t306;
t276 = t284 * pkin(3);
t275 = -0.2e1 * t265 * t361 + 0.2e1 * t358;
t274 = -t112 - t436;
t273 = -pkin(8) * t179 + t148 * t454;
t108 = t137 * pkin(3) + t189;
t5 = -pkin(4) * t179 - t7;
t272 = qJD(5) * t249 * t442 - t286 + t5;
t271 = -pkin(8) * qJD(3) * t454 + t274;
t250 = -t343 - pkin(4);
t206 = t251 * t385;
t146 = t228 * t259 + t331 * t425;
t141 = t198 * t268 + t351;
t116 = (-t179 * t269 + t368 * t454) * t260;
t100 = t125 * t267 - t230;
t97 = t135 * t267 + t197 * t263;
t96 = -t135 * t263 + t197 * t267;
t87 = -t259 * t137 + t138 * t407;
t86 = t137 * t407 + t138 * t259;
t55 = pkin(4) * t291 + pkin(9) * t104 + t429;
t52 = -qJD(5) * t230 + t125 * t363 + t263 * t87 - t267 * t341;
t51 = qJD(5) * t99 - t263 * t341 - t267 * t87;
t44 = pkin(4) * t385 - t48;
t37 = t407 * t73 - t420;
t36 = t259 * t73 + t71;
t33 = t86 * pkin(4) - t87 * pkin(9) + t108;
t16 = pkin(9) * t341 + t18;
t15 = -pkin(4) * t341 - t17;
t14 = t263 * t55 + t267 * t37;
t13 = -t263 * t37 + t267 * t55;
t4 = -qJD(5) * t20 - t263 * t16 + t267 * t33;
t3 = qJD(5) * t19 + t267 * t16 + t263 * t33;
t9 = [0, 0, 0, 0, 0, qJDD(1), g(1) * t266 - g(2) * t433, t296, 0, 0, (qJDD(1) * t257 + 0.2e1 * t316) * t255, 0.2e1 * (t265 * t358 - t361 * t371) * t255, (t265 * qJDD(2) + 0.2e1 * t261 * t288 + t434 * t269) * t260, (qJDD(1) * t258 - 0.2e1 * t316) * t255, (t269 * qJDD(2) + t261 * t275 - t434 * t265) * t260, t317 * t261, g(1) * t196 - g(2) * t198 - t189 * t324 + t199 * t317 - t261 * t321 + t275 * t432, -t126 * t261 - t188 * t324 - 0.2e1 * t288 * t432 - t317 * t373 - t307, ((-t184 * qJD(2) + t373 * qJDD(1) + t126) * t269 + (-qJD(2) * t187 - t199 * qJDD(1) + t321) * t265 - t296) * t260, t255 * qJDD(1) * pkin(1) ^ 2 - g(1) * t333 - g(2) * t372 + t126 * t373 - t184 * t189 + t187 * t188 - t199 * t321, t138 * t165 - t194 * t94, -t137 * t165 - t138 * t163 + t193 * t94 - t194 * t95, t138 * t454 + t194 * t179 + (t165 * t368 + t269 * t94) * t260, t137 * t163 + t193 * t95, -t137 * t454 - t193 * t179 + (-t163 * t368 + t269 * t95) * t260, t116, t69 * t454 + t113 * t179 + t189 * t163 + t175 * t95 + t112 * t193 + t148 * t137 + g(1) * t326 - g(2) * t141 + (-t269 * t41 + t368 * t92) * t260, -g(1) * t397 - g(2) * t140 + t112 * t194 - t114 * t179 + t148 * t138 + t189 * t165 - t175 * t94 - t68 * t454 + (-g(1) * t346 - t269 * t287 - t368 * t93) * t260, t113 * t94 - t114 * t95 - t137 * t93 - t138 * t92 - t163 * t68 - t165 * t69 + t193 * t287 - t194 * t41 + t307, -t287 * t114 + t93 * t68 + t41 * t113 + t92 * t69 + t112 * t175 + t148 * t189 - g(1) * (-pkin(2) * t196 - pkin(8) * t195 + t333) - g(2) * (pkin(2) * t198 + pkin(8) * t197 + t372), t125 * t62 + t291 * t87, -t104 * t87 - t124 * t62 - t125 * t61 - t291 * t86, t125 * t179 + t87 * t454 + (-t269 * t62 + t291 * t368) * t260, t104 * t86 + t124 * t61, -t124 * t179 - t86 * t454 + (-t104 * t368 + t269 * t61) * t260, t116, g(1) * t131 - g(2) * t135 + t102 * t86 + t104 * t108 + t124 * t64 + t128 * t61 + t17 * t454 + t179 * t48 + (-t269 * t7 + t34 * t368) * t260, t102 * t87 + t291 * t108 + t125 * t64 + t128 * t62 - t179 * t49 - t18 * t454 + (t269 * t8 - t35 * t368) * t260 + t309, -t104 * t18 - t124 * t8 - t125 * t7 - t17 * t291 - t34 * t87 - t35 * t86 - t48 * t62 - t49 * t61 + t307, -g(1) * t293 - g(2) * t302 + t102 * t108 + t64 * t128 + t34 * t17 + t35 * t18 + t7 * t48 + t8 * t49, -t100 * t29 - t51 * t83, -t100 * t30 + t29 * t99 + t51 * t81 - t52 * t83, t100 * t60 - t124 * t29 - t442 * t51 + t83 * t86, t30 * t99 + t52 * t81, -t124 * t30 - t442 * t52 - t60 * t99 - t81 * t86, t124 * t60 + t442 * t86, g(1) * t440 - g(2) * t97 + t2 * t124 + t15 * t81 + t19 * t60 + t44 * t30 - t304 * t86 + t31 * t52 + t4 * t442 + t5 * t99, -g(1) * t441 - g(2) * t96 - t1 * t124 + t5 * t100 - t11 * t86 + t15 * t83 - t20 * t60 - t44 * t29 - t3 * t442 - t31 * t51, -t1 * t99 - t100 * t2 - t11 * t52 + t19 * t29 - t20 * t30 - t3 * t81 - t304 * t51 - t4 * t83 - t309, t1 * t20 + t11 * t3 + t2 * t19 - t304 * t4 + t5 * t44 + t31 * t15 - g(1) * (-pkin(4) * t131 + pkin(9) * t327 + t293) - g(2) * (pkin(4) * t135 + pkin(9) * t134 + t302); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t322, t371 * t390, -t269 * t339 + t335, t322, t265 * t339 + t238, t317, t187 * t324 + t390 * t431 - t321 - t436, pkin(1) * t353 + t184 * t324 + (pkin(7) * t361 + g(3)) * t388 + t306 - t348, 0, 0, -t94 * t264 + t268 * t400, (-t94 - t402) * t268 + (-t400 - t95) * t264, t454 * t365 + t264 * t179 + (-t165 * t265 - t378 * t454) * t370, t163 * t393 - t95 * t268, -t454 * t366 + t268 * t179 + (t163 * t265 + t269 * t393) * t370, -t318, -pkin(2) * t95 - t117 * t454 - t163 * t187 + t264 * t273 + t268 * t271 - t342 * t92, pkin(2) * t94 + t118 * t454 - t165 * t187 - t264 * t271 + t268 * t273 + t342 * t93, t117 * t165 + t118 * t163 + ((qJD(3) * t165 - t95) * pkin(8) + t444) * t268 + ((qJD(3) * t163 - t94) * pkin(8) + t439) * t264 + t278, -t92 * t117 - t93 * t118 - t148 * t187 + t274 * pkin(2) + (-t41 * t264 - t287 * t268 + (-t264 * t93 - t268 * t92) * qJD(3) + t278) * pkin(8), t62 * t203 - t291 * t377, t104 * t377 - t203 * t61 + t290 * t62 - t291 * t374, t203 * t179 - t291 * t342 - t377 * t454, t104 * t374 - t290 * t61, t104 * t342 + t179 * t290 - t374 * t454, -t318, t102 * t374 + t104 * t312 - t146 * t179 - t251 * t61 - t253 * t436 - t290 * t64 - t34 * t342 - t409 * t454, -t102 * t377 - t147 * t179 + t203 * t64 - t251 * t62 + t291 * t312 + t342 * t35 - t408 * t454 + t437, -t104 * t408 + t146 * t62 - t147 * t61 - t203 * t7 + t290 * t8 + t291 * t409 + t34 * t377 - t35 * t374 + t278, t8 * t147 - t7 * t146 - t64 * t251 - g(1) * t375 - g(2) * t376 - g(3) * (t260 * t383 + t206) + t408 * t35 - t409 * t34 + t312 * t102, t282 * t83 - t29 * t394, t122 * t83 + t123 * t81 - t303 * t192 + (t415 - t414 + (-t267 * t83 + t418) * qJD(5)) * t203, t282 * t442 + t29 * t290 + t374 * t83 + t394 * t60, t283 * t81 + t30 * t395, -t283 * t442 + t290 * t30 - t374 * t81 - t395 * t60, -t290 * t60 + t374 * t442, t78 * t60 - t2 * t290 + t146 * t30 + t5 * t395 - g(1) * (-t197 * t391 + t198 * t263) - g(2) * (-t195 * t391 + t196 * t263) + t410 * t81 - (t253 * t379 + t263 * t265) * t427 + t422 * t442 - t374 * t304 + t283 * t31, -t79 * t60 + t1 * t290 - t146 * t29 + t5 * t394 - g(1) * (t197 * t392 + t198 * t267) - g(2) * (t195 * t392 + t196 * t267) + t410 * t83 - (-t253 * t382 + t265 * t267) * t427 - t374 * t11 - t423 * t442 + t282 * t31, t29 * t78 - t30 * t79 - t422 * t83 - t423 * t81 + t329 * t11 - t328 * t304 - t437 + (-t1 * t263 - t2 * t267 + (-t11 * t267 - t263 * t304) * qJD(5)) * t203, t1 * t79 + t2 * t78 + t5 * t146 - g(1) * (-t197 * t310 + t375) - g(2) * (-t195 * t310 + t376) - g(3) * t206 + t410 * t31 - (t269 * t310 + t383) * t427 + t423 * t11 - t422 * t304; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t401, -t163 ^ 2 + t165 ^ 2, -t94 + t402, -t401, -t95 + t400, t179, -g(1) * t140 - g(2) * t284 + g(3) * t193 - t148 * t165 - t439, g(1) * t141 + g(2) * t326 + g(3) * t194 + t148 * t163 - t444, 0, 0, t446, -t404 + t406, t62 + t403, -t446, -t61 + t405, t179, -t102 * t291 + t36 * t454 + (-t104 * t165 + t179 * t407) * pkin(3) + t286 + t7, t102 * t104 + t454 * t37 + (-t165 * t291 - t179 * t259) * pkin(3) - t285 - t8, (-t259 * t61 - t407 * t62) * pkin(3) + (t35 - t36) * t291 + (t37 - t34) * t104, -g(1) * t313 - g(2) * t276 + g(3) * t449 - t102 * t429 + t34 * t36 + t343 * t7 - t35 * t37 + t8 * t428, t325 * t83 - t415, -t104 * t303 + t295 + t424, -t413 - t443, t418 * t442 - t414, t299 + t421, -t442 * t291, -t13 * t442 + t250 * t30 + t263 * t292 - t267 * t272 + t291 * t304 - t36 * t81, t11 * t291 + t14 * t442 - t250 * t29 + t263 * t272 + t267 * t292 - t36 * t83, t13 * t83 + t14 * t81 + (t304 * t104 - t249 * t30 + t1 + (t249 * t83 + t304) * qJD(5)) * t267 + (-t104 * t11 - t249 * t29 - t2 + (t249 * t81 - t11) * qJD(5)) * t263 + t285, t5 * t250 - t11 * t14 + t304 * t13 - t31 * t36 - g(1) * (-pkin(4) * t134 + pkin(9) * t135 + t313) - g(2) * (pkin(4) * t327 + t131 * pkin(9) + t276) - g(3) * (pkin(4) * t173 + pkin(9) * t174 - t449) + (t1 * t267 - t11 * t364 - t2 * t263 + t304 * t363) * t249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t61 + t405, t62 - t403, -t404 - t406, t104 * t35 + t291 * t34 + t436 + t64, 0, 0, 0, 0, 0, 0, t299 - t421, -t413 + t443, -(t416 - t417) * t104 - t295 + t424, t450 * t263 + t451 * t267 - t291 * t31 + t436; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t426, -t81 ^ 2 + t83 ^ 2, t442 * t81 - t29, -t426, -t330 + (-qJD(5) + t442) * t83, t60, -t31 * t83 - g(1) * t96 + g(2) * t441 - g(3) * (-t174 * t263 - t349) + t451, t31 * t81 + g(1) * t97 + g(2) * t440 - g(3) * (-t174 * t267 + t230) - t450, 0, 0;];
tau_reg = t9;
