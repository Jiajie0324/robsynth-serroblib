% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S5RRRPR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d5,theta4]';
% 
% Output:
% MMD_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:31
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S5RRRPR10_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR10_inertiaDJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR10_inertiaDJ_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5RRRPR10_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:29:51
% EndTime: 2019-12-31 21:30:03
% DurationCPUTime: 3.81s
% Computational Cost: add. (5508->328), mult. (14743->643), div. (0->0), fcn. (14180->10), ass. (0->165)
t100 = cos(qJ(2));
t170 = qJD(2) * t100;
t94 = sin(pkin(5));
t157 = t94 * t170;
t179 = cos(pkin(5));
t208 = t179 * qJD(3) + t157;
t97 = sin(qJ(2));
t176 = qJD(2) * t97;
t82 = t94 * t176;
t148 = pkin(3) * t82;
t189 = t94 * t97;
t161 = qJD(3) * t189;
t96 = sin(qJ(3));
t99 = cos(qJ(3));
t48 = -t96 * t161 + t208 * t99;
t65 = t179 * t96 + t99 * t189;
t206 = -t48 * qJ(4) - t65 * qJD(4);
t127 = (-pkin(2) * t100 - pkin(8) * t97 - pkin(1)) * t94;
t119 = qJD(3) * t127;
t174 = qJD(3) * t99;
t156 = pkin(1) * t179;
t181 = t100 * t94;
t67 = pkin(7) * t181 + t97 * t156;
t59 = t179 * pkin(8) + t67;
t111 = -t96 * t119 - t59 * t174;
t144 = t100 * t156;
t118 = pkin(7) * t189 - t144;
t114 = t118 * qJD(2);
t177 = qJD(2) * t94;
t201 = pkin(8) * t100;
t126 = (pkin(2) * t97 - t201) * t177;
t23 = t96 * t114 + t99 * t126 + t111;
t103 = t148 + t23 + t206;
t154 = t179 * t99;
t125 = t96 * t189 - t154;
t164 = t99 * t161 + t208 * t96;
t175 = qJD(3) * t96;
t22 = -t96 * t126 + t59 * t175 + (t114 - t119) * t99;
t109 = t164 * qJ(4) + t125 * qJD(4) + t22;
t178 = cos(pkin(10));
t107 = t178 * t109;
t93 = sin(pkin(10));
t102 = t93 * t103 - t107;
t43 = t178 * t125 + t93 * t65;
t44 = -t93 * t125 + t178 * t65;
t58 = -t179 * pkin(2) + t118;
t46 = t125 * pkin(3) + t58;
t106 = t43 * pkin(4) - t44 * pkin(9) + t46;
t207 = -pkin(9) * t82 - qJD(5) * t106 - t102;
t95 = sin(qJ(5));
t91 = t95 ^ 2;
t98 = cos(qJ(5));
t92 = t98 ^ 2;
t182 = t91 - t92;
t150 = qJD(5) * t182;
t184 = -qJ(4) - pkin(8);
t151 = qJD(3) * t184;
t121 = qJD(4) * t96 - t99 * t151;
t62 = qJD(4) * t99 + t96 * t151;
t110 = -t93 * t121 + t178 * t62;
t152 = t178 * t99;
t190 = t93 * t96;
t69 = -t152 + t190;
t153 = t178 * t96;
t70 = t93 * t99 + t153;
t89 = -pkin(3) * t99 - pkin(2);
t122 = -pkin(4) * t69 + pkin(9) * t70 - t89;
t115 = t98 * t122;
t163 = pkin(3) * t175;
t63 = t70 * qJD(3);
t64 = qJD(3) * t152 - t93 * t175;
t120 = pkin(4) * t63 - pkin(9) * t64 + t163;
t173 = qJD(5) * t95;
t79 = t184 * t99;
t50 = -t178 * t79 + t184 * t190;
t10 = qJD(5) * t115 - t98 * t110 - t95 * t120 + t50 * t173;
t27 = -t95 * t122 + t98 * t50;
t11 = -t27 * qJD(5) - t95 * t110 + t98 * t120;
t26 = -t95 * t50 - t115;
t205 = t10 * t95 - t11 * t98 + (t26 * t95 - t27 * t98) * qJD(5);
t116 = -t93 * t164 + t178 * t48;
t30 = t178 * t164 + t93 * t48;
t61 = qJD(2) * t67;
t36 = t164 * pkin(3) + t61;
t104 = t30 * pkin(4) - t116 * pkin(9) + t36;
t37 = t99 * t127 - t96 * t59;
t25 = -pkin(3) * t181 - t65 * qJ(4) + t37;
t38 = t96 * t127 + t99 * t59;
t31 = -t125 * qJ(4) + t38;
t16 = t178 * t31 + t93 * t25;
t14 = -pkin(9) * t181 + t16;
t1 = -t95 * t104 + t14 * t173 + t207 * t98;
t172 = qJD(5) * t98;
t2 = t98 * t104 - t14 * t172 + t207 * t95;
t7 = t98 * t106 - t95 * t14;
t8 = t95 * t106 + t98 * t14;
t204 = t1 * t95 - t2 * t98 + (t7 * t95 - t8 * t98) * qJD(5);
t203 = 0.2e1 * t94;
t202 = pkin(8) * t94;
t34 = t98 * t181 + t95 * t44;
t18 = qJD(5) * t34 - t98 * t116 - t95 * t82;
t200 = t18 * t95;
t162 = t95 * t181;
t19 = -qJD(5) * t162 + t95 * t116 + t44 * t172 - t98 * t82;
t199 = t19 * t98;
t198 = t34 * t95;
t35 = t44 * t98 - t162;
t197 = t35 * t98;
t41 = t178 * t121 + t62 * t93;
t49 = -t184 * t153 - t79 * t93;
t196 = t49 * t41;
t195 = t61 * t96;
t194 = t70 * t64;
t193 = t70 * t95;
t192 = t70 * t98;
t87 = pkin(3) * t93 + pkin(9);
t191 = t87 * t95;
t17 = t95 * t19;
t188 = t96 * t48;
t187 = t98 * t30;
t186 = t98 * t63;
t185 = t98 * t64;
t183 = -t34 * t172 - t17;
t169 = qJD(3) * t100;
t168 = 0.2e1 * t43 * t30;
t167 = 0.2e1 * t69 * t63;
t166 = -0.2e1 * pkin(2) * qJD(3);
t88 = -t178 * pkin(3) - pkin(4);
t165 = 0.2e1 * qJD(5) * t88;
t160 = t95 * t172;
t159 = t96 * t174;
t90 = t94 ^ 2;
t158 = t90 * t170;
t155 = -0.4e1 * t95 * t192;
t68 = t70 ^ 2;
t147 = t68 * t160;
t146 = t97 * t158;
t145 = t164 * t99;
t143 = -t1 * t98 - t2 * t95;
t141 = -t7 * t98 - t8 * t95;
t139 = t179 * t177;
t137 = -t26 * t98 - t27 * t95;
t135 = t30 * t69 + t43 * t63;
t134 = -t63 * t87 + t64 * t88;
t133 = t69 * t87 - t70 * t88;
t132 = -t35 * t173 - t18 * t98;
t131 = t43 * t172 + t30 * t95;
t130 = t69 * t172 + t63 * t95;
t129 = t70 * t172 + t64 * t95;
t128 = -t70 * t173 + t185;
t15 = t178 * t25 - t93 * t31;
t124 = t96 * t169 + t99 * t176;
t123 = -t99 * t169 + t96 * t176;
t117 = t125 * t96;
t113 = t137 * qJD(5) - t10 * t98 - t11 * t95;
t112 = -t22 * t99 - t23 * t96 + (-t37 * t99 - t38 * t96) * qJD(3);
t108 = -t178 * t103 - t93 * t109;
t72 = -0.2e1 * t146;
t45 = -t69 * t173 + t186;
t32 = t70 * t150 - t95 * t185;
t21 = -t43 * t173 + t187;
t13 = pkin(4) * t181 - t15;
t6 = -t107 + (t111 + (-t96 * t144 + (-t99 * t201 + (t99 * pkin(2) + t96 * pkin(7) + pkin(3)) * t97) * t94) * qJD(2) + t206) * t93;
t4 = -pkin(4) * t82 + t108;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t146, 0.2e1 * (t100 ^ 2 - t97 ^ 2) * t90 * qJD(2), 0.2e1 * t100 * t139, t72, -0.2e1 * t97 * t139, 0, -0.2e1 * t90 * pkin(1) * t176 - 0.2e1 * t61 * t179, -0.2e1 * pkin(1) * t158 + 0.2e1 * t179 * t114, -0.2e1 * t114 * t181 + 0.2e1 * t118 * t157 + 0.2e1 * t61 * t189 - 0.2e1 * t67 * t82, -0.2e1 * t67 * t114 + 0.2e1 * t118 * t61, 0.2e1 * t65 * t48, -0.2e1 * t48 * t125 - 0.2e1 * t65 * t164, (-t100 * t48 + t65 * t176) * t203, 0.2e1 * t125 * t164, -0.2e1 * t125 * t82 + 0.2e1 * t164 * t181, t72, -0.2e1 * t61 * t154 + 0.2e1 * t58 * t164 + 0.2e1 * (-t23 * t100 + (qJD(2) * t37 + t195) * t97) * t94, 0.2e1 * t58 * t48 + 0.2e1 * t61 * t65 + 0.2e1 * (-t100 * t22 - t38 * t176) * t94, 0.2e1 * t125 * t22 - 0.2e1 * t164 * t38 - 0.2e1 * t23 * t65 - 0.2e1 * t37 * t48, -0.2e1 * t22 * t38 + 0.2e1 * t23 * t37 + 0.2e1 * t58 * t61, 0.2e1 * t44 * t116, -0.2e1 * t116 * t43 - 0.2e1 * t44 * t30, (-t100 * t116 + t44 * t176) * t203, t168, (t100 * t30 - t43 * t176) * t203, t72, 0.2e1 * t46 * t30 + 0.2e1 * t36 * t43 + 0.2e1 * (t100 * t108 + t15 * t176) * t94, 0.2e1 * t36 * t44 + 0.2e1 * t46 * t116 + 0.2e1 * (t6 * t100 - t16 * t176) * t94, 0.2e1 * t108 * t44 - 0.2e1 * t116 * t15 - 0.2e1 * t16 * t30 - 0.2e1 * t6 * t43, -0.2e1 * t108 * t15 + 0.2e1 * t16 * t6 + 0.2e1 * t36 * t46, -0.2e1 * t35 * t18, 0.2e1 * t18 * t34 - 0.2e1 * t19 * t35, -0.2e1 * t18 * t43 + 0.2e1 * t30 * t35, 0.2e1 * t34 * t19, -0.2e1 * t19 * t43 - 0.2e1 * t30 * t34, t168, 0.2e1 * t13 * t19 + 0.2e1 * t2 * t43 + 0.2e1 * t30 * t7 + 0.2e1 * t34 * t4, 0.2e1 * t1 * t43 - 0.2e1 * t13 * t18 - 0.2e1 * t30 * t8 + 0.2e1 * t35 * t4, 0.2e1 * t1 * t34 + 0.2e1 * t18 * t7 - 0.2e1 * t19 * t8 - 0.2e1 * t2 * t35, -0.2e1 * t1 * t8 + 0.2e1 * t13 * t4 + 0.2e1 * t2 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t157, 0, -t82, 0, -t61, t114, 0, 0, t65 * t174 + t188, -t96 * t164 + t48 * t99 + (-t125 * t99 - t65 * t96) * qJD(3), t123 * t94, qJD(3) * t117 - t145, t124 * t94, 0, -pkin(2) * t164 - t123 * t202 + t175 * t58 - t61 * t99, -pkin(2) * t48 - t124 * t202 + t174 * t58 + t195, (-t145 + t188 + (t99 * t65 + t117) * qJD(3)) * pkin(8) + t112, -pkin(2) * t61 + pkin(8) * t112, t116 * t70 + t44 * t64, -t116 * t69 - t70 * t30 - t64 * t43 - t44 * t63, (-t100 * t64 + t70 * t176) * t94, t135, (t100 * t63 - t69 * t176) * t94, 0, t43 * t163 + t89 * t30 + t36 * t69 + t46 * t63 + (t100 * t41 - t49 * t176) * t94, t44 * t163 + t89 * t116 + t36 * t70 + t46 * t64 + (t100 * t110 - t50 * t176) * t94, t108 * t70 - t110 * t43 + t116 * t49 - t15 * t64 - t16 * t63 - t50 * t30 + t41 * t44 - t6 * t69, t108 * t49 + t110 * t16 - t15 * t41 + t163 * t46 + t36 * t89 + t6 * t50, t128 * t35 - t18 * t192, (-t34 * t98 - t35 * t95) * t64 + (t200 - t199 + (-t197 + t198) * qJD(5)) * t70, t128 * t43 - t18 * t69 + t187 * t70 + t35 * t63, t129 * t34 + t17 * t70, -t129 * t43 - t19 * t69 - t30 * t193 - t34 * t63, t135, t11 * t43 + t129 * t13 + t19 * t49 + t4 * t193 + t2 * t69 + t26 * t30 + t34 * t41 + t63 * t7, t1 * t69 + t10 * t43 + t128 * t13 - t18 * t49 + t4 * t192 - t27 * t30 + t35 * t41 - t63 * t8, t10 * t34 - t11 * t35 + t141 * t64 + t18 * t26 - t19 * t27 + t204 * t70, -t1 * t27 - t10 * t8 + t11 * t7 + t13 * t41 + t2 * t26 + t4 * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t159, 0.2e1 * (-t96 ^ 2 + t99 ^ 2) * qJD(3), 0, -0.2e1 * t159, 0, 0, t96 * t166, t99 * t166, 0, 0, 0.2e1 * t194, -0.2e1 * t63 * t70 - 0.2e1 * t64 * t69, 0, t167, 0, 0, 0.2e1 * t163 * t69 + 0.2e1 * t63 * t89, 0.2e1 * t163 * t70 + 0.2e1 * t64 * t89, -0.2e1 * t110 * t69 + 0.2e1 * t41 * t70 + 0.2e1 * t49 * t64 - 0.2e1 * t50 * t63, 0.2e1 * t110 * t50 + 0.2e1 * t163 * t89 + 0.2e1 * t196, 0.2e1 * t92 * t194 - 0.2e1 * t147, 0.2e1 * t150 * t68 + t155 * t64, 0.2e1 * t128 * t69 + 0.2e1 * t186 * t70, 0.2e1 * t91 * t194 + 0.2e1 * t147, -0.2e1 * t129 * t69 - 0.2e1 * t63 * t193, t167, 0.2e1 * t11 * t69 + 0.2e1 * t129 * t49 + 0.2e1 * t41 * t193 + 0.2e1 * t26 * t63, 0.2e1 * t10 * t69 + 0.2e1 * t128 * t49 + 0.2e1 * t41 * t192 - 0.2e1 * t27 * t63, 0.2e1 * t137 * t64 + 0.2e1 * t205 * t70, -0.2e1 * t10 * t27 + 0.2e1 * t11 * t26 + 0.2e1 * t196; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, 0, -t164, t82, t23, t22, 0, 0, 0, 0, t116, 0, -t30, t82, t178 * t148 - t108, -t148 * t93 - t102, (-t116 * t178 - t93 * t30) * pkin(3), (-t108 * t178 + t6 * t93) * pkin(3), t172 * t35 - t200, t132 + t183, t131, t173 * t34 - t199, t21, 0, -t30 * t191 + t19 * t88 - t4 * t98 + (-t43 * t87 * t98 + t13 * t95) * qJD(5), -t87 * t187 - t18 * t88 + t4 * t95 + (t13 * t98 + t191 * t43) * qJD(5), (-t199 - t200) * t87 + ((t197 + t198) * t87 + t141) * qJD(5) + t143, t4 * t88 + (qJD(5) * t141 + t143) * t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t174, 0, -t175, 0, -pkin(8) * t174, pkin(8) * t175, 0, 0, 0, 0, t64, 0, -t63, 0, -t41, -t110, (-t178 * t64 - t63 * t93) * pkin(3), (t110 * t93 - t178 * t41) * pkin(3), -t32, qJD(5) * t155 - t182 * t64, t130, t32, t45, 0, -t41 * t98 + t134 * t95 + (-t133 * t98 + t49 * t95) * qJD(5), t41 * t95 + t134 * t98 + (t133 * t95 + t49 * t98) * qJD(5), t113, t113 * t87 + t41 * t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t160, -0.2e1 * t150, 0, -0.2e1 * t160, 0, 0, t95 * t165, t98 * t165, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, t116, 0, t36, 0, 0, 0, 0, 0, 0, t21, -t131, -t132 + t183, -t204; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, t64, 0, t163, 0, 0, 0, 0, 0, 0, t45, -t130, (-t91 - t92) * t64, -t205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t18, 0, -t19, t30, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t128, 0, -t129, t63, t11, t10, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t172, 0, -t173, 0, -t87 * t172, t87 * t173, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t173, -t172, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t3;
