% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S5RRRPR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d5,theta4]';
% 
% Output:
% tauJ_reg [5x(5*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:31
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S5RRRPR10_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR10_invdynJ_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR10_invdynJ_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR10_invdynJ_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR10_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5RRRPR10_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:29:58
% EndTime: 2019-12-31 21:30:16
% DurationCPUTime: 8.87s
% Computational Cost: add. (52903->530), mult. (117863->789), div. (0->0), fcn. (94044->12), ass. (0->340)
t284 = sin(qJ(5));
t283 = cos(pkin(5));
t275 = qJD(1) * t283 + qJD(2);
t285 = sin(qJ(3));
t288 = cos(qJ(3));
t281 = sin(pkin(5));
t286 = sin(qJ(2));
t338 = qJD(1) * t286;
t323 = t281 * t338;
t247 = t275 * t288 - t285 * t323;
t248 = t275 * t285 + t288 * t323;
t280 = sin(pkin(10));
t282 = cos(pkin(10));
t226 = t280 * t247 + t282 * t248;
t289 = cos(qJ(2));
t339 = qJD(1) * t281;
t322 = t289 * t339;
t267 = -qJD(3) + t322;
t287 = cos(qJ(5));
t200 = t226 * t284 + t287 * t267;
t202 = t226 * t287 - t267 * t284;
t164 = t202 * t200;
t320 = qJD(2) * t339;
t332 = qJDD(1) * t281;
t255 = t286 * t332 + t289 * t320;
t274 = qJDD(1) * t283 + qJDD(2);
t314 = t255 * t285 - t288 * t274;
t213 = -qJD(3) * t248 - t314;
t310 = -t255 * t288 - t285 * t274;
t214 = qJD(3) * t247 - t310;
t316 = -t282 * t213 + t214 * t280;
t174 = qJDD(5) + t316;
t386 = -t164 + t174;
t393 = t284 * t386;
t392 = t287 * t386;
t355 = t226 * t267;
t155 = t316 - t355;
t277 = t281 ^ 2;
t290 = qJD(1) ^ 2;
t340 = qJD(1) * t275;
t391 = t277 * (-t283 * t290 + t340);
t256 = -t286 * t320 + t289 * t332;
t307 = -qJDD(3) + t256;
t224 = -t282 * t247 + t248 * t280;
t356 = t226 * t224;
t302 = -t307 - t356;
t390 = t280 * t302;
t389 = t282 * t302;
t354 = t247 * t248;
t301 = -t307 + t354;
t388 = t285 * t301;
t387 = t288 * t301;
t177 = t213 * t280 + t214 * t282;
t209 = t224 * t267;
t158 = t177 + t209;
t235 = t247 * t267;
t194 = t214 + t235;
t259 = t275 * t323;
t234 = t256 - t259;
t379 = sin(qJ(1));
t380 = cos(qJ(1));
t305 = t380 * g(1) + t379 * g(2);
t251 = -t290 * pkin(1) + pkin(7) * t332 - t305;
t304 = t379 * g(1) - t380 * g(2);
t346 = t281 * t290;
t296 = qJDD(1) * pkin(1) + pkin(7) * t346 + t304;
t295 = t283 * t296;
t315 = t251 * t286 - t289 * t295;
t347 = t281 * t289;
t216 = g(3) * t347 + t315;
t348 = t281 * t286;
t294 = -g(3) * t348 + t286 * t295;
t217 = t289 * t251 + t294;
t385 = t286 * t216 + t289 * t217;
t221 = qJD(5) + t224;
t317 = t177 * t284 + t287 * t307;
t116 = (qJD(5) - t221) * t202 + t317;
t190 = (qJD(3) + t267) * t248 + t314;
t198 = t200 ^ 2;
t199 = t202 ^ 2;
t220 = t221 ^ 2;
t222 = t224 ^ 2;
t223 = t226 ^ 2;
t245 = t247 ^ 2;
t246 = t248 ^ 2;
t384 = t267 ^ 2;
t383 = t275 ^ 2;
t382 = 2 * qJD(4);
t373 = t283 * g(3);
t375 = t255 * pkin(8);
t292 = -t256 * pkin(2) - t375 - t373 + ((pkin(2) * t286 - pkin(8) * t289) * t340 - t296) * t281;
t312 = -pkin(2) * t289 - pkin(8) * t286;
t254 = t312 * t339;
t321 = t254 * t339;
t374 = t274 * pkin(8);
t293 = t374 - t383 * pkin(2) + (t251 + t321) * t289 + t294;
t142 = t285 * t292 + t288 * t293;
t229 = -pkin(3) * t267 - qJ(4) * t248;
t123 = -pkin(3) * t245 + qJ(4) * t213 + t229 * t267 + t142;
t141 = t285 * t293 - t288 * t292;
t291 = pkin(3) * t301 - qJ(4) * t194 - t141;
t319 = t123 * t280 - t282 * t291;
t64 = t226 * t382 + t319;
t337 = qJD(4) * t224;
t218 = -0.2e1 * t337;
t341 = t282 * t123 + t280 * t291;
t65 = t218 + t341;
t41 = t280 * t65 - t282 * t64;
t381 = pkin(3) * t41;
t156 = t316 + t355;
t159 = t177 - t209;
t107 = -t156 * t280 - t159 * t282;
t378 = pkin(3) * t107;
t377 = pkin(4) * t280;
t376 = pkin(7) * t281;
t181 = pkin(4) * t224 - pkin(9) * t226;
t49 = t307 * pkin(4) - t384 * pkin(9) + (t382 + t181) * t226 + t319;
t372 = t284 * t49;
t371 = t285 * t41;
t370 = t287 * t49;
t369 = t288 * t41;
t128 = t164 + t174;
t368 = t128 * t284;
t367 = t128 * t287;
t187 = -t274 * pkin(2) - t383 * pkin(8) + (g(3) * t289 + t254 * t338) * t281 + t315;
t134 = -t213 * pkin(3) - t245 * qJ(4) + t229 * t248 + qJDD(4) + t187;
t366 = t134 * t280;
t365 = t134 * t282;
t171 = t307 - t356;
t364 = t171 * t280;
t363 = t171 * t282;
t362 = t187 * t285;
t361 = t187 * t288;
t204 = t307 + t354;
t360 = t204 * t285;
t359 = t204 * t288;
t358 = t221 * t284;
t357 = t221 * t287;
t353 = t267 * t280;
t352 = t267 * t282;
t351 = t267 * t285;
t350 = t267 * t288;
t349 = t277 * t290;
t266 = t289 * t286 * t349;
t253 = t266 + t274;
t344 = t286 * t253;
t252 = -t266 + t274;
t342 = t289 * t252;
t336 = -qJD(3) + t267;
t333 = qJD(5) + t221;
t331 = t280 * t164;
t330 = t282 * t164;
t278 = t286 ^ 2;
t329 = t278 * t349;
t279 = t289 ^ 2;
t328 = t279 * t349;
t327 = t289 * t356;
t326 = t289 * t354;
t260 = t275 * t322;
t325 = t260 + t255;
t324 = -pkin(4) * t282 - pkin(3);
t42 = t280 * t64 + t282 * t65;
t50 = -pkin(4) * t384 - pkin(9) * t307 - t224 * t181 + t65;
t78 = pkin(4) * t155 - pkin(9) * t158 + t134;
t39 = t284 * t50 - t287 * t78;
t40 = t284 * t78 + t287 * t50;
t21 = t284 * t39 + t287 * t40;
t95 = t141 * t285 + t288 * t142;
t196 = -t223 - t384;
t139 = t196 * t282 + t364;
t313 = pkin(3) * t139 - t341;
t20 = t284 * t40 - t287 * t39;
t311 = t141 * t288 - t142 * t285;
t308 = -pkin(1) + t312;
t17 = t21 * t280 - t282 * t49;
t306 = pkin(3) * t17 - pkin(4) * t49 + pkin(9) * t21;
t178 = -t384 - t222;
t132 = t178 * t280 + t389;
t303 = pkin(3) * t132 - t64;
t117 = -t333 * t202 - t317;
t147 = -t220 - t198;
t88 = t147 * t287 - t393;
t55 = t117 * t282 + t280 * t88;
t300 = pkin(3) * t55 + pkin(4) * t117 + pkin(9) * t88 - t370;
t297 = -t287 * t177 + t284 * t307;
t121 = t333 * t200 + t297;
t161 = -t199 - t220;
t91 = -t161 * t284 - t367;
t57 = t121 * t282 + t280 * t91;
t299 = pkin(3) * t57 + pkin(4) * t121 + pkin(9) * t91 + t372;
t137 = t198 + t199;
t136 = -t200 * qJD(5) - t297;
t175 = t221 * t200;
t120 = t175 + t136;
t73 = -t116 * t287 + t120 * t284;
t51 = t137 * t282 + t280 * t73;
t298 = pkin(3) * t51 + pkin(4) * t137 + pkin(9) * t73 + t21;
t236 = t281 * t296 + t373;
t258 = (t278 - t279) * t349;
t257 = -t328 - t383;
t242 = -t329 - t383;
t237 = t307 * t347;
t233 = t256 + t259;
t232 = -t260 + t255;
t231 = -t246 + t384;
t230 = t245 - t384;
t228 = -t246 - t384;
t227 = t246 - t245;
t215 = -t384 - t245;
t208 = -t223 + t384;
t207 = t222 - t384;
t203 = t245 + t246;
t197 = (-t247 * t285 + t248 * t288) * t267;
t195 = t336 * t247 + t310;
t193 = t214 - t235;
t191 = t336 * t248 - t314;
t189 = t214 * t285 - t248 * t350;
t188 = t213 * t288 + t247 * t351;
t184 = t230 * t285 - t359;
t183 = t231 * t288 + t388;
t182 = t223 - t222;
t180 = -t228 * t285 + t359;
t179 = t228 * t288 + t360;
t170 = -t199 + t220;
t169 = t198 - t220;
t168 = t215 * t288 - t388;
t167 = t215 * t285 + t387;
t166 = (t224 * t282 - t226 * t280) * t267;
t165 = (t224 * t280 + t226 * t282) * t267;
t163 = t199 - t198;
t162 = -t222 - t223;
t154 = -t190 * t288 + t194 * t285;
t152 = t191 * t285 + t193 * t288;
t151 = t177 * t282 + t226 * t353;
t150 = t177 * t280 - t226 * t352;
t149 = -t224 * t352 + t280 * t316;
t148 = -t224 * t353 - t282 * t316;
t146 = t207 * t282 + t364;
t145 = -t208 * t280 + t389;
t144 = t207 * t280 - t363;
t143 = t208 * t282 + t390;
t140 = -t196 * t280 + t363;
t135 = -qJD(5) * t202 - t317;
t133 = t178 * t282 - t390;
t131 = (-t200 * t287 + t202 * t284) * t221;
t130 = (-t200 * t284 - t202 * t287) * t221;
t126 = t165 * t288 + t166 * t285;
t125 = pkin(2) * t195 + pkin(8) * t180 + t362;
t124 = pkin(2) * t191 + pkin(8) * t168 - t361;
t119 = -t175 + t136;
t115 = t136 * t287 - t202 * t358;
t114 = t136 * t284 + t202 * t357;
t113 = -t135 * t284 + t200 * t357;
t112 = -t135 * t287 - t200 * t358;
t109 = -t156 * t282 + t159 * t280;
t108 = -t155 * t282 - t158 * t280;
t106 = -t155 * t280 + t158 * t282;
t105 = t131 * t282 + t174 * t280;
t104 = t131 * t280 - t174 * t282;
t103 = t150 * t288 + t151 * t285;
t102 = t148 * t288 + t149 * t285;
t101 = t169 * t287 - t368;
t100 = -t170 * t284 + t392;
t99 = t169 * t284 + t367;
t98 = t170 * t287 + t393;
t97 = t144 * t288 + t146 * t285;
t96 = t143 * t288 + t145 * t285;
t93 = -t139 * t285 + t140 * t288;
t92 = t139 * t288 + t140 * t285;
t90 = t161 * t287 - t368;
t89 = -qJ(4) * t139 + t365;
t87 = t147 * t284 + t392;
t86 = -qJ(4) * t132 + t366;
t85 = t115 * t282 + t331;
t84 = t113 * t282 - t331;
t83 = t115 * t280 - t330;
t82 = t113 * t280 + t330;
t81 = -t132 * t285 + t133 * t288;
t80 = t132 * t288 + t133 * t285;
t79 = -pkin(2) * t187 + pkin(8) * t95;
t76 = -pkin(3) * t158 + qJ(4) * t140 + t366;
t75 = pkin(2) * t203 + pkin(8) * t154 + t95;
t74 = -pkin(3) * t155 + qJ(4) * t133 - t365;
t72 = t117 * t287 - t119 * t284;
t71 = -t116 * t284 - t120 * t287;
t70 = t117 * t284 + t119 * t287;
t69 = t101 * t282 - t116 * t280;
t68 = t100 * t282 + t120 * t280;
t67 = t101 * t280 + t116 * t282;
t66 = t100 * t280 - t120 * t282;
t63 = -t107 * t285 + t109 * t288;
t62 = t107 * t288 + t109 * t285;
t61 = t106 * t288 + t108 * t285;
t59 = t104 * t288 + t105 * t285;
t58 = -t121 * t280 + t282 * t91;
t56 = -t117 * t280 + t282 * t88;
t54 = t163 * t280 + t282 * t72;
t53 = -t163 * t282 + t280 * t72;
t52 = -t137 * t280 + t282 * t73;
t48 = t285 * t85 + t288 * t83;
t47 = t285 * t84 + t288 * t82;
t46 = -pkin(9) * t90 + t370;
t45 = -pkin(9) * t87 + t372;
t44 = t285 * t69 + t288 * t67;
t43 = t285 * t68 + t288 * t66;
t37 = -t285 * t57 + t288 * t58;
t36 = t285 * t58 + t288 * t57;
t35 = -t285 * t55 + t288 * t56;
t34 = t285 * t56 + t288 * t55;
t33 = t285 * t54 + t288 * t53;
t32 = -pkin(2) * t158 + pkin(8) * t93 + t285 * t89 + t288 * t76;
t31 = -pkin(3) * t134 + qJ(4) * t42;
t30 = -t285 * t51 + t288 * t52;
t29 = t285 * t52 + t288 * t51;
t28 = -pkin(2) * t155 + pkin(8) * t81 + t285 * t86 + t288 * t74;
t27 = -qJ(4) * t107 - t41;
t26 = -pkin(4) * t90 + t40;
t25 = -pkin(4) * t87 + t39;
t24 = -pkin(3) * t162 + qJ(4) * t109 + t42;
t23 = t288 * t42 - t371;
t22 = t285 * t42 + t369;
t19 = -pkin(9) * t71 - t20;
t18 = t21 * t282 + t280 * t49;
t16 = -qJ(4) * t57 - t26 * t280 + t282 * t46;
t15 = -qJ(4) * t55 - t25 * t280 + t282 * t45;
t14 = -pkin(3) * t90 + qJ(4) * t58 + t26 * t282 + t280 * t46;
t13 = -pkin(3) * t87 + qJ(4) * t56 + t25 * t282 + t280 * t45;
t12 = -pkin(2) * t162 + pkin(8) * t63 + t24 * t288 + t27 * t285;
t11 = -qJ(4) * t51 + t19 * t282 + t71 * t377;
t10 = qJ(4) * t52 + t19 * t280 + t324 * t71;
t9 = -pkin(2) * t134 + pkin(8) * t23 - qJ(4) * t371 + t288 * t31;
t8 = -t17 * t285 + t18 * t288;
t7 = t17 * t288 + t18 * t285;
t6 = -qJ(4) * t17 + (-pkin(9) * t282 + t377) * t20;
t5 = -pkin(2) * t90 + pkin(8) * t37 + t14 * t288 + t16 * t285;
t4 = -pkin(2) * t87 + pkin(8) * t35 + t13 * t288 + t15 * t285;
t3 = qJ(4) * t18 + (-pkin(9) * t280 + t324) * t20;
t2 = -pkin(2) * t71 + pkin(8) * t30 + t10 * t288 + t11 * t285;
t1 = -pkin(2) * t20 + pkin(8) * t8 + t285 * t6 + t288 * t3;
t38 = [0, 0, 0, 0, 0, qJDD(1), t304, t305, 0, 0, (t255 * t281 + t289 * t391) * t286, t283 * t258 + (t286 * t234 + t289 * t325) * t281, t283 * t232 + (t344 + t289 * (-t329 + t383)) * t281, (t256 * t281 - t286 * t391) * t289, t283 * t233 + (t286 * (t328 - t383) + t342) * t281, t283 * t274, (-t216 + pkin(1) * (t253 * t289 + t257 * t286)) * t283 + (t289 * t236 + pkin(1) * t234 + pkin(7) * (t257 * t289 - t344)) * t281, -t236 * t348 - t283 * t217 + pkin(1) * (-t281 * t325 + (t242 * t289 - t252 * t286) * t283) + (-t242 * t286 - t342) * t376, pkin(1) * ((-t232 * t289 + t233 * t286) * t283 - (-t278 - t279) * t277 * t346) + (t232 * t286 + t233 * t289) * t376 + t385 * t281, pkin(1) * (t236 * t281 + (-t216 * t289 + t217 * t286) * t283) + t385 * t376, t283 * t189 + (t286 * (t214 * t288 + t248 * t351) + t326) * t281, t283 * t152 + (t286 * (t191 * t288 - t193 * t285) - t289 * t227) * t281, t283 * t183 + (t286 * (-t231 * t285 + t387) - t289 * t194) * t281, t283 * t188 + (t286 * (-t213 * t285 + t247 * t350) - t326) * t281, t283 * t184 + (t286 * (t230 * t288 + t360) + t289 * t190) * t281, t283 * t197 + t237 + (-t247 * t288 - t248 * t285) * t267 * t348, (-pkin(8) * t167 + t362) * t348 + (t285 * (t289 * t321 + t217 + t374) - t288 * (-pkin(8) * t260 - t236 - t375) + (t234 * t288 - t285 * t383 - t167) * pkin(2)) * t347 + t283 * t124 + pkin(1) * (-t281 * t167 + (t168 * t286 + t191 * t289) * t283) + (t168 * t289 - t191 * t286) * t376, (t125 + pkin(1) * (t180 * t286 + t195 * t289)) * t283 + (t286 * (-pkin(8) * t179 + t361) + t289 * (-pkin(2) * t179 + t142) - pkin(1) * t179 + pkin(7) * (t180 * t289 - t195 * t286)) * t281, (t75 + pkin(1) * (t154 * t286 + t203 * t289)) * t283 + (t286 * t311 + pkin(7) * (t154 * t289 - t203 * t286) + t308 * (-t190 * t285 - t194 * t288)) * t281, (t79 + pkin(1) * (-t187 * t289 + t286 * t95)) * t283 + (pkin(7) * (t187 * t286 + t289 * t95) - t308 * t311) * t281, t283 * t103 + (t286 * (-t150 * t285 + t151 * t288) - t327) * t281, t283 * t61 + (t286 * (-t106 * t285 + t108 * t288) - t289 * t182) * t281, t283 * t96 + (t286 * (-t143 * t285 + t145 * t288) - t289 * t159) * t281, t283 * t102 + (t286 * (-t148 * t285 + t149 * t288) + t327) * t281, t283 * t97 + (t286 * (-t144 * t285 + t146 * t288) + t289 * t156) * t281, (-t165 * t285 + t166 * t288) * t348 + t237 + t283 * t126, (t28 + pkin(1) * (-t155 * t289 + t286 * t81)) * t283 + (t286 * (-pkin(8) * t80 - t285 * t74 + t288 * t86) + t289 * (-pkin(2) * t80 - t303) - pkin(1) * t80 + pkin(7) * (t155 * t286 + t289 * t81)) * t281, (t32 + pkin(1) * (-t158 * t289 + t286 * t93)) * t283 + (t286 * (-pkin(8) * t92 - t285 * t76 + t288 * t89) + t289 * (-pkin(2) * t92 + t218 - t313) - pkin(1) * t92 + pkin(7) * (t158 * t286 + t289 * t93)) * t281, (t12 + pkin(1) * (-t162 * t289 + t286 * t63)) * t283 + (t286 * (-pkin(8) * t62 - t24 * t285 + t27 * t288) + t289 * (-pkin(2) * t62 - t378) - pkin(1) * t62 + pkin(7) * (t162 * t286 + t289 * t63)) * t281, (t9 + pkin(1) * (-t134 * t289 + t23 * t286)) * t283 + (t286 * (-pkin(8) * t22 - qJ(4) * t369 - t285 * t31) + t289 * (-pkin(2) * t22 - t381) - pkin(1) * t22 + pkin(7) * (t134 * t286 + t23 * t289)) * t281, t283 * t48 + (t286 * (-t285 * t83 + t288 * t85) - t289 * t114) * t281, t283 * t33 + (t286 * (-t285 * t53 + t288 * t54) - t289 * t70) * t281, t283 * t43 + (t286 * (-t285 * t66 + t288 * t68) - t289 * t98) * t281, t283 * t47 + (t286 * (-t285 * t82 + t288 * t84) + t289 * t112) * t281, t283 * t44 + (t286 * (-t285 * t67 + t288 * t69) - t289 * t99) * t281, t283 * t59 + (t286 * (-t104 * t285 + t105 * t288) - t289 * t130) * t281, (t4 + pkin(1) * (t286 * t35 - t289 * t87)) * t283 + (t286 * (-pkin(8) * t34 - t13 * t285 + t15 * t288) + t289 * (-pkin(2) * t34 - t300) - pkin(1) * t34 + pkin(7) * (t286 * t87 + t289 * t35)) * t281, (t5 + pkin(1) * (t286 * t37 - t289 * t90)) * t283 + (t286 * (-pkin(8) * t36 - t14 * t285 + t16 * t288) + t289 * (-pkin(2) * t36 - t299) - pkin(1) * t36 + pkin(7) * (t286 * t90 + t289 * t37)) * t281, (t2 + pkin(1) * (t286 * t30 - t289 * t71)) * t283 + (t286 * (-pkin(8) * t29 - t10 * t285 + t11 * t288) + t289 * (-pkin(2) * t29 - t298) - pkin(1) * t29 + pkin(7) * (t286 * t71 + t289 * t30)) * t281, (t1 + pkin(1) * (-t20 * t289 + t286 * t8)) * t283 + (t286 * (-pkin(8) * t7 - t285 * t3 + t288 * t6) + t289 * (-pkin(2) * t7 - t306) - pkin(1) * t7 + pkin(7) * (t20 * t286 + t289 * t8)) * t281; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t266, t258, t232, t266, t233, t274, -t216, -t217, 0, 0, t189, t152, t183, t188, t184, t197, t124, t125, t75, t79, t103, t61, t96, t102, t97, t126, t28, t32, t12, t9, t48, t33, t43, t47, t44, t59, t4, t5, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t354, t227, t194, t354, -t190, -t307, -t141, -t142, 0, 0, t356, t182, t159, -t356, -t156, -t307, t303, t313 + 0.2e1 * t337, t378, t381, t114, t70, t98, -t112, t99, t130, t300, t299, t298, t306; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t155, t158, t162, t134, 0, 0, 0, 0, 0, 0, t87, t90, t71, t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t164, t163, t120, -t164, -t116, t174, -t39, -t40, 0, 0;];
tauJ_reg = t38;
