% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPPPR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d5,theta2,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:44
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPPPR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPPR3_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPPR3_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPPR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPPR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPPR3_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:44:18
% EndTime: 2019-12-31 17:44:19
% DurationCPUTime: 1.59s
% Computational Cost: add. (3295->169), mult. (7303->208), div. (0->0), fcn. (4529->8), ass. (0->121)
t1037 = sin(qJ(1));
t1039 = cos(qJ(1));
t1041 = qJD(1) ^ 2;
t1032 = sin(pkin(8));
t1027 = t1032 ^ 2;
t1034 = cos(pkin(8));
t1028 = t1034 ^ 2;
t1053 = t1027 + t1028;
t1008 = t1053 * t1041;
t1001 = t1032 * t1008;
t1033 = sin(pkin(7));
t1035 = cos(pkin(7));
t1051 = t1035 * qJDD(1);
t984 = -t1033 * t1001 + t1032 * t1051;
t1052 = t1033 * qJDD(1);
t986 = t1035 * t1001 + t1032 * t1052;
t1065 = t1037 * t986 - t1039 * t984;
t1064 = t1037 * t984 + t1039 * t986;
t1036 = sin(qJ(5));
t1038 = cos(qJ(5));
t1045 = t1032 * t1036 + t1034 * t1038;
t969 = t1045 * qJDD(1);
t994 = t1045 * qJD(1);
t1063 = t994 ^ 2;
t1057 = qJD(1) * t1034;
t1058 = qJD(1) * t1032;
t996 = -t1036 * t1057 + t1038 * t1058;
t1062 = t996 ^ 2;
t1061 = 2 * qJD(3);
t1060 = 2 * qJD(5);
t1059 = t996 * t994;
t1012 = -t1039 * g(1) - t1037 * g(2);
t1004 = -t1041 * pkin(1) + t1012;
t1011 = t1037 * g(1) - t1039 * g(2);
t1044 = qJDD(1) * pkin(1) + t1011;
t980 = t1035 * t1004 + t1033 * t1044;
t1056 = t1027 * t1041;
t1055 = t1028 * t1041;
t1054 = t1034 * t1041;
t1024 = t1032 * qJDD(1);
t1025 = t1034 * qJDD(1);
t1030 = -g(3) + qJDD(2);
t1020 = t1034 * t1030;
t1050 = qJDD(4) - t1020;
t1049 = -0.2e1 * t1058;
t973 = -t1041 * pkin(2) + qJDD(1) * qJ(3) + t980;
t968 = t1032 * t1030 + t1034 * t973 + t1057 * t1061;
t979 = -t1033 * t1004 + t1035 * t1044;
t1006 = -t1035 * t1041 - t1052;
t1007 = -t1033 * t1041 + t1051;
t1048 = t1039 * t1006 - t1037 * t1007;
t1003 = (-pkin(3) * t1034 - qJ(4) * t1032) * qJD(1);
t957 = t1003 * t1057 + t968;
t993 = -t1038 * t1024 + t1036 * t1025;
t1047 = t973 + (t1061 + t1003) * qJD(1);
t1046 = t1037 * t1006 + t1039 * t1007;
t972 = -qJDD(1) * pkin(2) - t1041 * qJ(3) + qJDD(3) - t979;
t966 = -pkin(3) * t1025 - qJ(4) * t1024 + qJD(4) * t1049 + t972;
t1040 = qJD(5) ^ 2;
t1013 = t1032 * t1054;
t1010 = -t1037 * qJDD(1) - t1039 * t1041;
t1009 = t1039 * qJDD(1) - t1037 * t1041;
t1005 = t1053 * qJDD(1);
t1002 = t1034 * t1008;
t989 = -t1040 - t1062;
t988 = -t1035 * t1002 - t1033 * t1025;
t985 = -t1033 * t1002 + t1034 * t1051;
t982 = t1035 * t1005 - t1033 * t1008;
t981 = t1033 * t1005 + t1035 * t1008;
t978 = -t994 * t1060 - t993;
t977 = t996 * t1060 + t969;
t976 = -qJDD(5) - t1059;
t975 = qJDD(5) - t1059;
t974 = -t1040 - t1063;
t970 = -t1062 - t1063;
t967 = qJD(3) * t1049 - t1032 * t973 + t1020;
t965 = -t1037 * t985 + t1039 * t988;
t964 = t1037 * t988 + t1039 * t985;
t963 = -t1036 * t989 + t1038 * t976;
t962 = t1036 * t976 + t1038 * t989;
t961 = -t1037 * t981 + t1039 * t982;
t960 = t1037 * t982 + t1039 * t981;
t959 = -t1033 * t979 + t1035 * t980;
t958 = t1033 * t980 + t1035 * t979;
t956 = t1047 * t1032 + t1050;
t955 = -t1036 * t993 - t1038 * t969;
t954 = -t1036 * t969 + t1038 * t993;
t953 = -pkin(4) * t1025 + pkin(6) * t1008 + t966;
t952 = -t1036 * t975 + t1038 * t974;
t951 = t1036 * t974 + t1038 * t975;
t950 = -pkin(4) * t1055 - pkin(6) * t1025 + t957;
t949 = (-pkin(4) * t1054 - pkin(6) * qJDD(1) + t1047) * t1032 + t1050;
t948 = -t1032 * t967 + t1034 * t968;
t947 = t1032 * t968 + t1034 * t967;
t946 = t1032 * t962 + t1034 * t963;
t945 = t1032 * t963 - t1034 * t962;
t944 = t1032 * t956 + t1034 * t957;
t943 = t1032 * t957 - t1034 * t956;
t942 = t1032 * t954 + t1034 * t955;
t941 = t1032 * t955 - t1034 * t954;
t940 = t1032 * t951 + t1034 * t952;
t939 = t1032 * t952 - t1034 * t951;
t938 = t1033 * t972 + t1035 * t948;
t937 = t1033 * t948 - t1035 * t972;
t936 = -t1033 * t978 + t1035 * t946;
t935 = t1033 * t946 + t1035 * t978;
t934 = t1036 * t949 + t1038 * t950;
t933 = -t1036 * t950 + t1038 * t949;
t932 = -t1033 * t977 + t1035 * t940;
t931 = t1033 * t940 + t1035 * t977;
t930 = -t1033 * t970 + t1035 * t942;
t929 = t1033 * t942 + t1035 * t970;
t928 = t1033 * t966 + t1035 * t944;
t927 = t1033 * t944 - t1035 * t966;
t926 = -t1036 * t933 + t1038 * t934;
t925 = t1036 * t934 + t1038 * t933;
t924 = t1032 * t925 + t1034 * t926;
t923 = t1032 * t926 - t1034 * t925;
t922 = t1033 * t953 + t1035 * t924;
t921 = t1033 * t924 - t1035 * t953;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1010, -t1009, 0, -t1037 * t1011 + t1039 * t1012, 0, 0, 0, 0, 0, 0, t1048, -t1046, 0, -t1037 * t958 + t1039 * t959, 0, 0, 0, 0, 0, 0, t965, t1064, t961, -t1037 * t937 + t1039 * t938, 0, 0, 0, 0, 0, 0, t965, t961, -t1064, -t1037 * t927 + t1039 * t928, 0, 0, 0, 0, 0, 0, -t1037 * t931 + t1039 * t932, -t1037 * t935 + t1039 * t936, -t1037 * t929 + t1039 * t930, -t1037 * t921 + t1039 * t922; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1009, t1010, 0, t1039 * t1011 + t1037 * t1012, 0, 0, 0, 0, 0, 0, t1046, t1048, 0, t1037 * t959 + t1039 * t958, 0, 0, 0, 0, 0, 0, t964, t1065, t960, t1037 * t938 + t1039 * t937, 0, 0, 0, 0, 0, 0, t964, t960, -t1065, t1037 * t928 + t1039 * t927, 0, 0, 0, 0, 0, 0, t1037 * t932 + t1039 * t931, t1037 * t936 + t1039 * t935, t1037 * t930 + t1039 * t929, t1037 * t922 + t1039 * t921; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1030, 0, 0, 0, 0, 0, 0, 0, 0, 0, t947, 0, 0, 0, 0, 0, 0, 0, 0, 0, t943, 0, 0, 0, 0, 0, 0, t939, t945, t941, t923; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1041, -qJDD(1), 0, t1012, 0, 0, 0, 0, 0, 0, t1006, -t1007, 0, t959, 0, 0, 0, 0, 0, 0, t988, t986, t982, t938, 0, 0, 0, 0, 0, 0, t988, t982, -t986, t928, 0, 0, 0, 0, 0, 0, t932, t936, t930, t922; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1041, 0, t1011, 0, 0, 0, 0, 0, 0, t1007, t1006, 0, t958, 0, 0, 0, 0, 0, 0, t985, -t984, t981, t937, 0, 0, 0, 0, 0, 0, t985, t981, t984, t927, 0, 0, 0, 0, 0, 0, t931, t935, t929, t921; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1030, 0, 0, 0, 0, 0, 0, 0, 0, 0, t947, 0, 0, 0, 0, 0, 0, 0, 0, 0, t943, 0, 0, 0, 0, 0, 0, t939, t945, t941, t923; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1041, -qJDD(1), 0, t980, 0, 0, 0, 0, 0, 0, -t1002, t1001, t1005, t948, 0, 0, 0, 0, 0, 0, -t1002, t1005, -t1001, t944, 0, 0, 0, 0, 0, 0, t940, t946, t942, t924; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1041, 0, t979, 0, 0, 0, 0, 0, 0, t1025, -t1024, t1008, -t972, 0, 0, 0, 0, 0, 0, t1025, t1008, t1024, -t966, 0, 0, 0, 0, 0, 0, t977, t978, t970, -t953; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1030, 0, 0, 0, 0, 0, 0, 0, 0, 0, t947, 0, 0, 0, 0, 0, 0, 0, 0, 0, t943, 0, 0, 0, 0, 0, 0, t939, t945, t941, t923; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1055, t1013, t1025, t968, 0, 0, 0, 0, 0, 0, -t1055, t1025, -t1013, t957, 0, 0, 0, 0, 0, 0, t952, t963, t955, t926; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1013, -t1056, -t1024, t967, 0, 0, 0, 0, 0, 0, t1013, -t1024, t1056, -t956, 0, 0, 0, 0, 0, 0, -t951, -t962, -t954, -t925; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1025, t1024, -t1008, t972, 0, 0, 0, 0, 0, 0, -t1025, -t1008, -t1024, t966, 0, 0, 0, 0, 0, 0, -t977, -t978, -t970, t953; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1055, t1025, -t1013, t957, 0, 0, 0, 0, 0, 0, t952, t963, t955, t926; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1025, -t1008, -t1024, t966, 0, 0, 0, 0, 0, 0, -t977, -t978, -t970, t953; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1013, t1024, -t1056, t956, 0, 0, 0, 0, 0, 0, t951, t962, t954, t925; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t974, t976, -t969, t934; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t975, t989, t993, t933; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t977, t978, t970, -t953;];
f_new_reg = t1;
