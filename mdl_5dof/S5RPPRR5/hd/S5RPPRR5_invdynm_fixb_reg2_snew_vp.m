% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPPRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:56
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPPRR5_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR5_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR5_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR5_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR5_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRR5_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:56:45
% EndTime: 2019-12-31 17:56:51
% DurationCPUTime: 5.99s
% Computational Cost: add. (18036->388), mult. (27594->455), div. (0->0), fcn. (13572->8), ass. (0->247)
t638 = -qJD(1) + qJD(4);
t635 = t638 ^ 2;
t650 = cos(qJ(4));
t636 = qJDD(1) - qJDD(4);
t647 = sin(qJ(4));
t715 = t647 * t636;
t593 = t650 * t635 - t715;
t644 = sin(pkin(8));
t645 = cos(pkin(8));
t706 = t650 * t636;
t677 = t647 * t635 + t706;
t542 = t644 * t593 - t645 * t677;
t642 = g(3) - qJDD(2);
t570 = pkin(6) * t593 + t650 * t642;
t734 = pkin(6) * t677 + t647 * t642;
t480 = qJ(2) * t542 - t644 * t570 + t645 * t734;
t648 = sin(qJ(1));
t651 = cos(qJ(1));
t540 = t645 * t593 + t644 * t677;
t745 = t648 * t540 + t651 * t542;
t757 = -qJ(2) * t540 + t645 * t570 + t644 * t734;
t765 = pkin(5) * t745 + t651 * t480 - t648 * t757;
t758 = t651 * t540 - t648 * t542;
t764 = -pkin(5) * t758 + t648 * t480 + t651 * t757;
t653 = qJD(1) ^ 2;
t607 = t644 * qJDD(1) + t645 * t653;
t608 = t645 * qJDD(1) - t644 * t653;
t553 = t651 * t607 + t648 * t608;
t572 = qJ(2) * t608 + t644 * t642;
t693 = -qJ(2) * t607 + t645 * t642;
t495 = -pkin(5) * t553 - t648 * t572 + t651 * t693;
t620 = t651 * g(1) + t648 * g(2);
t604 = -t653 * pkin(1) - t620;
t619 = t648 * g(1) - t651 * g(2);
t675 = qJDD(1) * pkin(1) + t619;
t549 = t645 * t604 + t644 * t675;
t633 = 2 * qJD(3) * qJD(1);
t696 = t633 + t549;
t697 = qJDD(1) * qJ(3);
t671 = t696 + t697;
t731 = pkin(2) + pkin(3);
t520 = -t731 * t653 + t671;
t643 = qJDD(1) * pkin(2);
t548 = t644 * t604 - t645 * t675;
t680 = -qJDD(3) - t548;
t534 = -t653 * qJ(3) - t643 - t680;
t658 = -qJDD(1) * pkin(3) + t534;
t476 = t647 * t520 - t650 * t658;
t477 = t650 * t520 + t647 * t658;
t448 = t650 * t476 - t647 * t477;
t679 = t647 * t476 + t650 * t477;
t426 = t644 * t448 - t645 * t679;
t748 = t645 * t448 + t644 * t679;
t760 = -t648 * t426 + t651 * t748;
t759 = t651 * t426 + t648 * t748;
t691 = t644 * t548 + t645 * t549;
t500 = t645 * t548 - t644 * t549;
t704 = t651 * t500;
t754 = -t648 * t691 + t704;
t713 = t648 * t500;
t753 = t651 * t691 + t713;
t689 = -t648 * t607 + t651 * t608;
t732 = pkin(5) * t689 + t651 * t572 + t648 * t693;
t532 = -t653 * pkin(2) + t671;
t487 = t644 * t532 - t645 * t534;
t692 = t645 * t532 + t644 * t534;
t747 = -t648 * t487 + t651 * t692;
t746 = t651 * t487 + t648 * t692;
t730 = pkin(1) * t642;
t729 = pkin(3) * t448;
t471 = -t635 * pkin(4) - t636 * pkin(7) + t477;
t646 = sin(qJ(5));
t649 = cos(qJ(5));
t462 = t646 * t471 - t649 * t642;
t463 = t649 * t471 + t646 * t642;
t440 = t649 * t462 - t646 * t463;
t728 = pkin(4) * t440;
t441 = t646 * t462 + t649 * t463;
t470 = t636 * pkin(4) - t635 * pkin(7) + t476;
t435 = t650 * t441 + t647 * t470;
t726 = pkin(6) * t435;
t725 = pkin(6) * t448;
t724 = pkin(6) * t679;
t723 = pkin(7) * t650;
t721 = qJ(3) * t642;
t640 = t646 ^ 2;
t720 = t640 * t635;
t719 = t646 * t470;
t618 = t649 * t635 * t646;
t605 = qJDD(5) + t618;
t718 = t646 * t605;
t606 = qJDD(5) - t618;
t717 = t646 * t606;
t716 = t646 * t636;
t709 = t649 * t470;
t708 = t649 * t605;
t707 = t649 * t606;
t623 = t649 * t636;
t700 = -pkin(2) * t534 + qJ(3) * t532;
t641 = t649 ^ 2;
t699 = t640 + t641;
t698 = qJD(5) * t638;
t695 = t646 * t698;
t622 = t649 * t698;
t434 = t647 * t441 - t650 * t470;
t694 = -pkin(6) * t434 - t647 * t728;
t687 = -t648 * t619 - t651 * t620;
t686 = t647 * t618;
t685 = t650 * t618;
t521 = -pkin(1) * t607 - t549;
t684 = pkin(2) * t448 + qJ(3) * t679 + t729;
t683 = pkin(3) * t593 + t477;
t682 = -pkin(4) * t470 + pkin(7) * t441;
t611 = t651 * qJDD(1) - t648 * t653;
t681 = -pkin(5) * t611 - t648 * g(3);
t678 = t651 * t619 - t648 * t620;
t676 = -pkin(4) * t650 - pkin(7) * t647 - pkin(3);
t674 = pkin(3) * t677 + t476;
t626 = t641 * t635;
t652 = qJD(5) ^ 2;
t617 = -t626 - t652;
t557 = t646 * t617 + t708;
t453 = -pkin(4) * t557 + t462;
t457 = -pkin(7) * t557 + t719;
t561 = t649 * t617 - t718;
t587 = -t623 - 0.2e1 * t695;
t510 = t647 * t561 + t650 * t587;
t673 = -pkin(6) * t510 - t647 * t453 + t650 * t457;
t615 = -t652 - t720;
t559 = t649 * t615 - t717;
t454 = -pkin(4) * t559 + t463;
t458 = -pkin(7) * t559 + t709;
t563 = -t646 * t615 - t707;
t584 = 0.2e1 * t622 - t716;
t511 = t647 * t563 - t650 * t584;
t672 = -pkin(6) * t511 - t647 * t454 + t650 * t458;
t670 = 0.2e1 * t643 + t680;
t669 = pkin(2) * t593 + qJ(3) * t677 + t683;
t668 = -pkin(3) * t434 - t682;
t667 = pkin(4) * t587 + pkin(7) * t561 - t709;
t666 = -pkin(4) * t584 + pkin(7) * t563 + t719;
t512 = t650 * t561 - t647 * t587;
t665 = -pkin(6) * t512 - t650 * t453 - t647 * t457;
t513 = t650 * t563 + t647 * t584;
t664 = -pkin(6) * t513 - t650 * t454 - t647 * t458;
t663 = pkin(2) * t677 - qJ(3) * t593 + t674;
t591 = t699 * t636;
t596 = t626 + t720;
t662 = pkin(4) * t596 - pkin(7) * t591 + t441;
t661 = -pkin(2) * t434 + qJ(3) * t435 + t668;
t660 = -pkin(3) * t510 - t667;
t659 = -pkin(3) * t511 - t666;
t545 = -t647 * t591 + t650 * t596;
t657 = -pkin(3) * t545 - t662;
t656 = -pkin(2) * t510 + qJ(3) * t512 + t660;
t655 = -pkin(2) * t511 + qJ(3) * t513 + t659;
t546 = -t650 * t591 - t647 * t596;
t654 = -pkin(2) * t545 + qJ(3) * t546 + t657;
t632 = 0.2e1 * t697;
t616 = t626 - t652;
t614 = t652 - t720;
t610 = t648 * qJDD(1) + t651 * t653;
t609 = t646 * t622;
t602 = pkin(1) * t608;
t597 = -t626 + t720;
t586 = -t623 - t695;
t585 = t622 - t716;
t579 = -pkin(5) * t610 + t651 * g(3);
t578 = t699 * t698;
t567 = t647 * qJDD(5) + t650 * t578;
t566 = -t650 * qJDD(5) + t647 * t578;
t565 = t649 * t585 - t640 * t698;
t564 = -t646 * t586 - t641 * t698;
t562 = -t646 * t614 + t708;
t560 = t649 * t616 - t717;
t558 = t649 * t614 + t718;
t556 = t646 * t616 + t707;
t551 = t649 * t586 - t609;
t550 = -t646 * t585 - t609;
t536 = -t646 * t584 + t649 * t587;
t535 = t649 * t584 + t646 * t587;
t531 = t650 * t562 - t646 * t715;
t530 = t650 * t560 - t647 * t623;
t529 = t647 * t562 + t646 * t706;
t528 = t647 * t560 + t649 * t706;
t526 = t650 * t565 - t686;
t525 = t650 * t564 + t686;
t524 = t647 * t565 + t685;
t523 = t647 * t564 - t685;
t522 = -t548 + t602;
t515 = t602 + t670;
t514 = -t521 + t632 + t633;
t505 = t644 * t566 + t645 * t567;
t504 = -t645 * t566 + t644 * t567;
t503 = t650 * t536 + t647 * t597;
t502 = t647 * t536 - t650 * t597;
t497 = pkin(1) * t500;
t494 = qJ(2) * t691 + t730;
t493 = t644 * t545 + t645 * t546;
t492 = -t645 * t545 + t644 * t546;
t485 = t644 * t529 + t645 * t531;
t484 = t644 * t528 + t645 * t530;
t483 = -t645 * t529 + t644 * t531;
t482 = -t645 * t528 + t644 * t530;
t475 = t644 * t524 + t645 * t526;
t474 = t644 * t523 + t645 * t525;
t473 = -t645 * t524 + t644 * t526;
t472 = -t645 * t523 + t644 * t525;
t469 = -qJ(2) * t487 + (-pkin(2) * t644 + qJ(3) * t645) * t642;
t468 = t644 * t511 + t645 * t513;
t467 = t644 * t510 + t645 * t512;
t466 = -t645 * t511 + t644 * t513;
t465 = -t645 * t510 + t644 * t512;
t464 = qJ(2) * t692 + (pkin(2) * t645 + qJ(3) * t644 + pkin(1)) * t642;
t460 = t644 * t502 + t645 * t503;
t459 = -t645 * t502 + t644 * t503;
t452 = pkin(1) * t487 + t700;
t451 = -pkin(1) * t542 + t663;
t450 = pkin(1) * t540 + t669;
t443 = t721 + t725;
t442 = t731 * t642 - t724;
t437 = -pkin(6) * t545 + t650 * t440;
t436 = pkin(6) * t546 + t647 * t440;
t431 = qJ(3) * t559 + t672;
t430 = qJ(3) * t557 + t673;
t425 = t731 * t559 + t664;
t424 = t731 * t557 + t665;
t423 = pkin(1) * t466 + t655;
t422 = pkin(1) * t465 + t656;
t421 = pkin(1) * t492 + t654;
t420 = -qJ(2) * t492 + t644 * t436 + t645 * t437;
t419 = qJ(2) * t493 - t645 * t436 + t644 * t437;
t418 = t644 * t434 + t645 * t435;
t417 = -t645 * t434 + t644 * t435;
t416 = -qJ(2) * t748 - t644 * t442 + t645 * t443;
t415 = -qJ(2) * t426 + t645 * t442 + t644 * t443 + t730;
t414 = -qJ(2) * t466 - t644 * t425 + t645 * t431;
t413 = -qJ(2) * t465 - t644 * t424 + t645 * t430;
t412 = pkin(1) * t559 + qJ(2) * t468 + t645 * t425 + t644 * t431;
t411 = pkin(1) * t557 + qJ(2) * t467 + t645 * t424 + t644 * t430;
t410 = pkin(1) * t748 + t684;
t409 = -(qJ(3) - t723) * t440 + t694;
t408 = -t726 - (pkin(2) - t676) * t440;
t407 = pkin(1) * t417 + t661;
t406 = -qJ(2) * t417 - t644 * t408 + t645 * t409;
t405 = -pkin(1) * t440 + qJ(2) * t418 + t645 * t408 + t644 * t409;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t611, 0, -t610, 0, t681, -t579, -t678, -pkin(5) * t678, 0, 0, t689, 0, -t553, 0, -t732, -t495, t754, pkin(5) * t754 + qJ(2) * t704 - t648 * t494, 0, t689, 0, 0, t553, 0, -t732, -t746, t495, -pkin(5) * t746 - t648 * t464 + t651 * t469, 0, 0, t745, 0, -t758, 0, t765, t764, t760, -pkin(5) * t760 - t648 * t415 + t651 * t416, -t648 * t473 + t651 * t475, -t648 * t459 + t651 * t460, -t648 * t483 + t651 * t485, -t648 * t472 + t651 * t474, -t648 * t482 + t651 * t484, -t648 * t504 + t651 * t505, t651 * t413 - t648 * t411 - pkin(5) * (t651 * t465 + t648 * t467), t651 * t414 - t648 * t412 - pkin(5) * (t651 * t466 + t648 * t468), t651 * t420 - t648 * t419 - pkin(5) * (t651 * t492 + t648 * t493), t651 * t406 - t648 * t405 - pkin(5) * (t651 * t417 + t648 * t418); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t610, 0, t611, 0, t579, t681, t687, pkin(5) * t687, 0, 0, t553, 0, t689, 0, t495, -t732, t753, pkin(5) * t753 + qJ(2) * t713 + t651 * t494, 0, t553, 0, 0, -t689, 0, t495, t747, t732, pkin(5) * t747 + t651 * t464 + t648 * t469, 0, 0, -t758, 0, -t745, 0, t764, -t765, t759, -pkin(5) * t759 + t651 * t415 + t648 * t416, t651 * t473 + t648 * t475, t651 * t459 + t648 * t460, t651 * t483 + t648 * t485, t651 * t472 + t648 * t474, t651 * t482 + t648 * t484, t651 * t504 + t648 * t505, t648 * t413 + t651 * t411 + pkin(5) * (-t648 * t465 + t651 * t467), t648 * t414 + t651 * t412 + pkin(5) * (-t648 * t466 + t651 * t468), t648 * t420 + t651 * t419 + pkin(5) * (-t648 * t492 + t651 * t493), t648 * t406 + t651 * t405 + pkin(5) * (-t648 * t417 + t651 * t418); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t619, t620, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t522, t521, 0, -t497, 0, 0, 0, qJDD(1), 0, 0, t515, 0, t514, t452, 0, 0, 0, 0, 0, t636, t451, t450, 0, t410, t550, -t535, -t558, -t551, -t556, 0, t422, t423, t421, t407; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t653, 0, 0, -g(3), -t619, 0, 0, 0, t608, 0, -t607, 0, -t572, -t693, t500, qJ(2) * t500, 0, t608, 0, 0, t607, 0, -t572, -t487, t693, t469, 0, 0, t542, 0, -t540, 0, t480, t757, t748, t416, t475, t460, t485, t474, t484, t505, t413, t414, t420, t406; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t653, 0, qJDD(1), 0, g(3), 0, -t620, 0, 0, 0, t607, 0, t608, 0, t693, -t572, t691, t494, 0, t607, 0, 0, -t608, 0, t693, t692, t572, t464, 0, 0, -t540, 0, -t542, 0, t757, -t480, t426, t415, t473, t459, t483, t472, t482, t504, t411, t412, t419, t405; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t619, t620, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t522, t521, 0, -t497, 0, 0, 0, qJDD(1), 0, 0, t515, 0, t514, t452, 0, 0, 0, 0, 0, t636, t451, t450, 0, t410, t550, -t535, -t558, -t551, -t556, 0, t422, t423, t421, t407; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t653, 0, 0, -t642, t548, 0, 0, qJDD(1), 0, 0, t653, 0, 0, t534, t642, t721, 0, 0, -t677, 0, -t593, 0, t734, t570, t448, t443, t526, t503, t531, t525, t530, t567, t430, t431, t437, t409; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t653, 0, qJDD(1), 0, t642, 0, t549, 0, 0, t653, 0, 0, -qJDD(1), 0, t642, t532, 0, pkin(2) * t642, 0, 0, -t593, 0, t677, 0, t570, -t734, -t679, t442, -t524, -t502, -t529, -t523, -t528, -t566, t424, t425, -t436, t408; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t548, -t549, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t670, 0, t632 + t696, t700, 0, 0, 0, 0, 0, t636, t663, t669, 0, t684, t550, -t535, -t558, -t551, -t556, 0, t656, t655, t654, t661; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t653, 0, 0, t534, t642, 0, 0, 0, -t677, 0, -t593, 0, t734, t570, t448, t725, t526, t503, t531, t525, t530, t567, t673, t672, t437, t440 * t723 + t694; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, -t534, 0, t532, 0, 0, 0, 0, 0, 0, t636, t674, t683, 0, t729, t550, -t535, -t558, -t551, -t556, 0, t660, t659, t657, t668; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t653, 0, 0, qJDD(1), 0, -t642, -t532, 0, 0, 0, 0, t593, 0, -t677, 0, -t570, t734, t679, -pkin(3) * t642 + t724, t524, t502, t529, t523, t528, t566, -pkin(3) * t557 - t665, -pkin(3) * t559 - t664, t436, -t440 * t676 + t726; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t636, 0, -t635, 0, 0, t642, t476, 0, t565, t536, t562, t564, t560, t578, t457, t458, t440, pkin(7) * t440; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t635, 0, -t636, 0, -t642, 0, t477, 0, t618, -t597, t716, -t618, t623, -qJDD(5), t453, t454, 0, t728; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t636, -t476, -t477, 0, 0, -t550, t535, t558, t551, t556, 0, t667, t666, t662, t682; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t585, t587, t605, -t622, t616, t622, 0, t470, t462, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t695, t584, t614, t586, t606, -t695, -t470, 0, t463, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t618, t597, -t716, t618, -t623, qJDD(5), -t462, -t463, 0, 0;];
m_new_reg = t1;
