% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPPRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:56
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPPRR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR5_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR5_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRR5_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:56:51
% EndTime: 2019-12-31 17:56:53
% DurationCPUTime: 1.34s
% Computational Cost: add. (3199->157), mult. (4958->163), div. (0->0), fcn. (2514->8), ass. (0->89)
t856 = sin(pkin(8));
t857 = cos(pkin(8));
t849 = -qJD(1) + qJD(4);
t847 = t849 ^ 2;
t848 = qJDD(1) - qJDD(4);
t859 = sin(qJ(4));
t862 = cos(qJ(4));
t868 = t859 * t847 + t862 * t848;
t870 = -t862 * t847 + t859 * t848;
t802 = t856 * t868 - t857 * t870;
t860 = sin(qJ(1));
t863 = cos(qJ(1));
t877 = t856 * t870 + t857 * t868;
t882 = -t860 * t802 + t863 * t877;
t881 = t863 * t802 + t860 * t877;
t865 = qJD(1) ^ 2;
t832 = t856 * qJDD(1) + t857 * t865;
t833 = t857 * qJDD(1) - t856 * t865;
t878 = t863 * t832 + t860 * t833;
t810 = -t860 * t832 + t863 * t833;
t858 = sin(qJ(5));
t876 = t858 * t848;
t861 = cos(qJ(5));
t873 = t861 * t848;
t840 = -t863 * g(1) - t860 * g(2);
t829 = -t865 * pkin(1) + t840;
t839 = t860 * g(1) - t863 * g(2);
t867 = qJDD(1) * pkin(1) + t839;
t809 = t857 * t829 + t856 * t867;
t869 = qJDD(1) * qJ(3) + (2 * qJD(3) * qJD(1)) + t809;
t799 = (-pkin(2) - pkin(3)) * t865 + t869;
t808 = -t856 * t829 + t857 * t867;
t801 = -qJDD(1) * pkin(2) - t865 * qJ(3) + qJDD(3) - t808;
t866 = -qJDD(1) * pkin(3) + t801;
t785 = t862 * t799 + t859 * t866;
t852 = t858 ^ 2;
t853 = t861 ^ 2;
t872 = t852 + t853;
t871 = qJD(5) * t849;
t784 = -t859 * t799 + t862 * t866;
t864 = qJD(5) ^ 2;
t854 = g(3) - qJDD(2);
t838 = t861 * t847 * t858;
t837 = -t853 * t847 - t864;
t836 = -t852 * t847 - t864;
t835 = -t860 * qJDD(1) - t863 * t865;
t834 = t863 * qJDD(1) - t860 * t865;
t831 = -qJDD(5) + t838;
t830 = qJDD(5) + t838;
t826 = t872 * t847;
t821 = t872 * t848;
t817 = -0.2e1 * t858 * t871 - t873;
t816 = 0.2e1 * t861 * t871 - t876;
t815 = t861 * t831 - t858 * t836;
t814 = -t858 * t830 + t861 * t837;
t813 = t858 * t831 + t861 * t836;
t812 = t861 * t830 + t858 * t837;
t807 = -t862 * t821 - t859 * t826;
t806 = -t859 * t821 + t862 * t826;
t800 = -t865 * pkin(2) + t869;
t795 = t862 * t815 + t859 * t816;
t794 = t862 * t814 - t859 * t817;
t793 = t859 * t815 - t862 * t816;
t792 = t859 * t814 + t862 * t817;
t791 = -t856 * t808 + t857 * t809;
t790 = t857 * t808 + t856 * t809;
t789 = t856 * t806 + t857 * t807;
t788 = -t857 * t806 + t856 * t807;
t787 = t857 * t800 + t856 * t801;
t786 = t856 * t800 - t857 * t801;
t783 = -t847 * pkin(4) - t848 * pkin(7) + t785;
t782 = t848 * pkin(4) - t847 * pkin(7) - t784;
t781 = t856 * t793 + t857 * t795;
t780 = t856 * t792 + t857 * t794;
t779 = -t857 * t793 + t856 * t795;
t778 = -t857 * t792 + t856 * t794;
t777 = t861 * t783 + t858 * t854;
t776 = -t858 * t783 + t861 * t854;
t775 = -t859 * t784 + t862 * t785;
t774 = t862 * t784 + t859 * t785;
t773 = -t858 * t776 + t861 * t777;
t772 = t861 * t776 + t858 * t777;
t771 = t862 * t773 + t859 * t782;
t770 = t859 * t773 - t862 * t782;
t769 = t856 * t774 + t857 * t775;
t768 = -t857 * t774 + t856 * t775;
t767 = t856 * t770 + t857 * t771;
t766 = -t857 * t770 + t856 * t771;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t835, -t834, 0, -t860 * t839 + t863 * t840, 0, 0, 0, 0, 0, 0, -t878, -t810, 0, -t860 * t790 + t863 * t791, 0, 0, 0, 0, 0, 0, -t878, 0, t810, -t860 * t786 + t863 * t787, 0, 0, 0, 0, 0, 0, -t881, t882, 0, -t860 * t768 + t863 * t769, 0, 0, 0, 0, 0, 0, -t860 * t778 + t863 * t780, -t860 * t779 + t863 * t781, -t860 * t788 + t863 * t789, -t860 * t766 + t863 * t767; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t834, t835, 0, t863 * t839 + t860 * t840, 0, 0, 0, 0, 0, 0, t810, -t878, 0, t863 * t790 + t860 * t791, 0, 0, 0, 0, 0, 0, t810, 0, t878, t863 * t786 + t860 * t787, 0, 0, 0, 0, 0, 0, t882, t881, 0, t863 * t768 + t860 * t769, 0, 0, 0, 0, 0, 0, t863 * t778 + t860 * t780, t863 * t779 + t860 * t781, t863 * t788 + t860 * t789, t863 * t766 + t860 * t767; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t854, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t854, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t854, 0, 0, 0, 0, 0, 0, -t812, -t813, 0, -t772; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t865, -qJDD(1), 0, t840, 0, 0, 0, 0, 0, 0, -t832, -t833, 0, t791, 0, 0, 0, 0, 0, 0, -t832, 0, t833, t787, 0, 0, 0, 0, 0, 0, -t802, t877, 0, t769, 0, 0, 0, 0, 0, 0, t780, t781, t789, t767; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t865, 0, t839, 0, 0, 0, 0, 0, 0, t833, -t832, 0, t790, 0, 0, 0, 0, 0, 0, t833, 0, t832, t786, 0, 0, 0, 0, 0, 0, t877, t802, 0, t768, 0, 0, 0, 0, 0, 0, t778, t779, t788, t766; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t854, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t854, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t854, 0, 0, 0, 0, 0, 0, -t812, -t813, 0, -t772; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t865, -qJDD(1), 0, t809, 0, 0, 0, 0, 0, 0, -t865, 0, qJDD(1), t800, 0, 0, 0, 0, 0, 0, t870, t868, 0, t775, 0, 0, 0, 0, 0, 0, t794, t795, t807, t771; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t865, 0, t808, 0, 0, 0, 0, 0, 0, qJDD(1), 0, t865, -t801, 0, 0, 0, 0, 0, 0, t868, -t870, 0, -t774, 0, 0, 0, 0, 0, 0, -t792, -t793, -t806, -t770; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t854, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t854, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t854, 0, 0, 0, 0, 0, 0, -t812, -t813, 0, -t772; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t865, 0, qJDD(1), t800, 0, 0, 0, 0, 0, 0, t870, t868, 0, t775, 0, 0, 0, 0, 0, 0, t794, t795, t807, t771; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t854, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t854, 0, 0, 0, 0, 0, 0, -t812, -t813, 0, -t772; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), 0, -t865, t801, 0, 0, 0, 0, 0, 0, -t868, t870, 0, t774, 0, 0, 0, 0, 0, 0, t792, t793, t806, t770; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t847, t848, 0, t785, 0, 0, 0, 0, 0, 0, t814, t815, -t821, t773; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t848, -t847, 0, t784, 0, 0, 0, 0, 0, 0, t817, -t816, t826, -t782; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t854, 0, 0, 0, 0, 0, 0, t812, t813, 0, t772; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t837, t831, -t873, t777; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t830, t836, t876, t776; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t817, t816, -t826, t782;];
f_new_reg = t1;
