% Calculate inertial parameters regressor of coriolis matrix for
% S5RPPRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:56
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RPPRR5_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR5_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR5_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRR5_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:56:43
% EndTime: 2019-12-31 17:56:44
% DurationCPUTime: 0.89s
% Computational Cost: add. (894->102), mult. (1310->136), div. (0->0), fcn. (1033->6), ass. (0->73)
t57 = sin(qJ(5));
t55 = t57 ^ 2;
t59 = cos(qJ(5));
t56 = t59 ^ 2;
t93 = t55 + t56;
t49 = sin(pkin(8)) * pkin(1) + qJ(3);
t58 = sin(qJ(4));
t60 = cos(qJ(4));
t66 = -cos(pkin(8)) * pkin(1) - pkin(2) - pkin(3);
t32 = t60 * t49 + t58 * t66;
t76 = qJD(1) - qJD(4);
t106 = t76 * t32;
t46 = t56 - t55;
t105 = t76 * t46;
t30 = -pkin(7) + t32;
t31 = t58 * t49 - t60 * t66;
t70 = t56 / 0.2e1 + t55 / 0.2e1;
t68 = t70 * pkin(7);
t29 = pkin(4) + t31;
t75 = -pkin(4) / 0.2e1 - t29 / 0.2e1;
t1 = (t70 * t31 + t75) * t58 + (t32 / 0.2e1 - t70 * t30 + t68) * t60;
t26 = (-0.1e1 + t93) * t60 * t58;
t21 = t26 * qJD(3);
t104 = t1 * qJD(1) - t21;
t103 = t29 + t31;
t38 = t93 * t60;
t85 = t38 * qJD(1);
t101 = -t38 * qJD(4) + t85;
t98 = pkin(4) * t57;
t97 = t58 * pkin(4);
t96 = t29 * t58;
t95 = t31 * t58;
t94 = t32 * t60;
t12 = t93 * t31;
t3 = -t30 * t12 + t29 * t32;
t91 = t3 * qJD(1);
t5 = t30 * t38 + t96;
t90 = t5 * qJD(1);
t89 = qJD(1) * t29;
t88 = qJD(1) * t59;
t87 = qJD(4) * t59;
t13 = t94 + t95;
t86 = t13 * qJD(1);
t84 = t38 * qJD(3);
t82 = t46 * qJD(5);
t81 = t49 * qJD(1);
t53 = t57 * qJD(5);
t80 = t58 * qJD(1);
t79 = t58 * qJD(3);
t54 = t59 * qJD(5);
t78 = t60 * qJD(1);
t77 = t60 * qJD(3);
t74 = t57 * t80;
t73 = t59 * t80;
t40 = t76 * t58;
t69 = t76 * t59;
t41 = t76 * t60;
t67 = t31 / 0.2e1 + t75;
t65 = -t77 + t89;
t64 = t32 * qJD(1) + t79;
t63 = t32 * qJD(4) + t79;
t6 = t67 * t57;
t62 = t6 * qJD(1) + qJD(4) * t98;
t7 = t67 * t59;
t61 = pkin(4) * t87 + t7 * qJD(1);
t48 = t57 * t54;
t35 = (-t87 + t88) * t57;
t28 = -t60 * t53 + t58 * t69;
t27 = t57 * t40 + t60 * t54;
t9 = (pkin(4) + t103) * t59 / 0.2e1;
t8 = t98 / 0.2e1 + t103 * t57 / 0.2e1;
t2 = -t94 / 0.2e1 + t96 / 0.2e1 - t97 / 0.2e1 + t60 * t68 + t93 * (-t95 / 0.2e1 + t30 * t60 / 0.2e1);
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3), t49 * qJD(3), 0, 0, 0, 0, 0, 0, t63, -t31 * qJD(4) + t77, 0, t13 * qJD(3), t48, t82, 0, -t48, 0, 0, -t29 * t53 + t59 * t63, -t29 * t54 - t57 * t63, t12 * qJD(4) - t84, t5 * qJD(3) + t3 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(1), t81, 0, 0, 0, 0, 0, 0, t80, t78, 0, t86, 0, 0, 0, 0, 0, 0, t73, -t74, -t85, t2 * qJD(4) + t21 + t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t106, -t76 * t31, 0, 0, -t48, -t82, 0, t48, 0, 0, t8 * qJD(5) + t32 * t69, t9 * qJD(5) - t57 * t106, t76 * t12, t91 + t2 * qJD(3) + (-t32 * pkin(4) - pkin(7) * t12) * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35, t105, -t54, -t35, t53, 0, t8 * qJD(4) - t30 * t54 - t57 * t89, t9 * qJD(4) - t29 * t88 + t30 * t53, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53, t54, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(1), -t81, 0, 0, 0, 0, 0, 0, -t40, -t41, 0, -t86, 0, 0, 0, 0, 0, 0, -t28, t27, t101, -t1 * qJD(4) - t90; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, t41, 0, 0, 0, 0, 0, 0, 0, 0, t28, -t27, -t101, (pkin(7) * t38 - t97) * qJD(4) - t104; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41 * t57 - t58 * t54, t41 * t59 + t58 * t53, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t64, t31 * qJD(1) - t77, 0, 0, -t48, -t82, 0, t48, 0, 0, -t6 * qJD(5) - t59 * t64, -t7 * qJD(5) + t57 * t64, -t12 * qJD(1) + t84, t1 * qJD(3) - t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t80, -t78, 0, 0, 0, 0, 0, 0, 0, 0, -t73, t74, t85, t104; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, t82, 0, -t48, 0, 0, -pkin(4) * t53, -pkin(4) * t54, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t35, -t105, t54, t35, -t53, 0, -pkin(7) * t54 - t62, pkin(7) * t53 - t61, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t35, -t105, 0, t35, 0, 0, t6 * qJD(4) + t57 * t65, t7 * qJD(4) + t59 * t65, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t57 * t78, -t59 * t78, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35, t105, 0, -t35, 0, 0, t62, t61, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t4;
