% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRPR11
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:28
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRPR11_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR11_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR11_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR11_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR11_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRPR11_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:28:32
% EndTime: 2019-12-31 18:28:35
% DurationCPUTime: 3.17s
% Computational Cost: add. (8324->221), mult. (20581->255), div. (0->0), fcn. (14646->8), ass. (0->146)
t1509 = sin(qJ(3));
t1512 = cos(qJ(3));
t1507 = cos(pkin(8));
t1543 = qJD(1) * t1507;
t1506 = sin(pkin(8));
t1544 = qJD(1) * t1506;
t1479 = t1509 * t1544 - t1512 * t1543;
t1521 = t1506 * t1512 + t1507 * t1509;
t1481 = t1521 * qJD(1);
t1539 = t1481 * t1479;
t1453 = qJDD(3) + t1539;
t1476 = t1481 ^ 2;
t1514 = qJD(3) ^ 2;
t1549 = -t1476 - t1514;
t1418 = t1509 * t1453 - t1512 * t1549;
t1420 = t1512 * t1453 + t1509 * t1549;
t1408 = t1506 * t1418 - t1507 * t1420;
t1510 = sin(qJ(1));
t1513 = cos(qJ(1));
t1478 = t1521 * qJDD(1);
t1542 = qJD(3) * t1479;
t1520 = t1478 - 0.2e1 * t1542;
t1569 = t1510 * t1408 - t1513 * t1520;
t1568 = t1513 * t1408 + t1510 * t1520;
t1496 = t1507 * qJDD(1);
t1531 = t1506 * qJDD(1);
t1523 = -t1512 * t1496 + t1509 * t1531;
t1540 = t1481 * qJD(3);
t1456 = t1523 + 0.2e1 * t1540;
t1525 = -qJDD(3) + t1539;
t1460 = t1479 ^ 2;
t1550 = -t1460 - t1514;
t1554 = t1509 * t1525 + t1512 * t1550;
t1557 = t1509 * t1550 - t1512 * t1525;
t1561 = -t1506 * t1557 + t1507 * t1554;
t1567 = -t1513 * t1456 + t1510 * t1561;
t1433 = t1476 + t1460;
t1555 = t1509 * t1478 - t1512 * t1523;
t1556 = -t1512 * t1478 - t1509 * t1523;
t1559 = -t1506 * t1556 + t1507 * t1555;
t1566 = t1513 * t1433 + t1510 * t1559;
t1565 = t1510 * t1456 + t1513 * t1561;
t1564 = -t1510 * t1433 + t1513 * t1559;
t1392 = t1507 * t1418 + t1506 * t1420;
t1560 = t1506 * t1554 + t1507 * t1557;
t1558 = t1506 * t1555 + t1507 * t1556;
t1515 = qJD(1) ^ 2;
t1499 = t1506 ^ 2;
t1500 = t1507 ^ 2;
t1532 = t1499 + t1500;
t1486 = t1532 * t1515;
t1501 = qJD(3) - qJD(5);
t1551 = qJD(5) - t1501;
t1508 = sin(qJ(5));
t1511 = cos(qJ(5));
t1442 = -t1511 * t1479 + t1508 * t1481;
t1548 = t1442 ^ 2;
t1444 = t1508 * t1479 + t1511 * t1481;
t1547 = t1444 ^ 2;
t1546 = t1501 ^ 2;
t1545 = 2 * qJD(4);
t1541 = t1444 * t1442;
t1538 = t1500 * t1515;
t1537 = t1507 * t1515;
t1533 = qJD(5) + t1501;
t1490 = -t1513 * g(1) - t1510 * g(2);
t1482 = -t1515 * pkin(1) + qJDD(1) * qJ(2) + t1490;
t1462 = -t1506 * g(3) + 0.2e1 * qJD(2) * t1543 + t1507 * t1482;
t1439 = -pkin(2) * t1538 + pkin(6) * t1496 + t1462;
t1527 = -t1507 * g(3) - 0.2e1 * qJD(2) * t1544;
t1519 = (pkin(2) * t1537 - pkin(6) * qJDD(1) - t1482) * t1506 + t1527;
t1411 = t1512 * t1439 + t1509 * t1519;
t1530 = t1510 * qJDD(1);
t1529 = t1513 * qJDD(1);
t1528 = -qJDD(3) + qJDD(5);
t1489 = t1510 * g(1) - t1513 * g(2);
t1410 = -t1509 * t1439 + t1512 * t1519;
t1457 = t1523 + t1540;
t1459 = t1478 - t1542;
t1526 = t1511 * t1457 - t1508 * t1459;
t1524 = -qJDD(2) + t1489;
t1522 = -t1508 * t1457 - t1511 * t1459;
t1448 = t1479 * pkin(3) - t1481 * qJ(4);
t1401 = -t1514 * pkin(3) + qJDD(3) * qJ(4) + qJD(3) * t1545 - t1479 * t1448 + t1411;
t1402 = -qJDD(3) * pkin(3) - t1514 * qJ(4) + t1481 * t1448 + qJDD(4) - t1410;
t1452 = (pkin(2) * t1507 + pkin(1)) * qJDD(1) + (t1532 * pkin(6) + qJ(2)) * t1515 + t1524;
t1518 = (t1459 - t1542) * qJ(4) + t1452 + (-t1540 - t1457) * pkin(3);
t1491 = t1506 * t1537;
t1488 = -t1513 * t1515 - t1530;
t1487 = -t1510 * t1515 + t1529;
t1485 = t1532 * qJDD(1);
t1484 = t1507 * t1486;
t1483 = t1506 * t1486;
t1475 = qJDD(1) * pkin(1) + t1515 * qJ(2) + t1524;
t1463 = -qJD(3) * pkin(4) - t1481 * pkin(7);
t1461 = -t1506 * t1482 + t1527;
t1436 = -t1546 - t1547;
t1424 = -t1506 * t1461 + t1507 * t1462;
t1423 = t1507 * t1461 + t1506 * t1462;
t1416 = t1528 - t1541;
t1415 = -t1528 - t1541;
t1414 = -t1546 - t1548;
t1409 = -t1547 - t1548;
t1404 = t1511 * t1415 - t1508 * t1436;
t1403 = t1508 * t1415 + t1511 * t1436;
t1398 = t1533 * t1442 + t1522;
t1397 = -t1551 * t1442 - t1522;
t1396 = -t1533 * t1444 + t1526;
t1395 = t1551 * t1444 - t1526;
t1390 = t1481 * t1545 + t1518;
t1389 = t1511 * t1414 - t1508 * t1416;
t1388 = t1508 * t1414 + t1511 * t1416;
t1387 = -t1509 * t1410 + t1512 * t1411;
t1386 = t1512 * t1410 + t1509 * t1411;
t1385 = -t1460 * pkin(4) + t1457 * pkin(7) + qJD(3) * t1463 + t1401;
t1384 = (-t1459 - t1542) * pkin(7) + t1525 * pkin(4) + t1402;
t1383 = -t1457 * pkin(4) - t1460 * pkin(7) + (t1545 + t1463) * t1481 + t1518;
t1382 = t1509 * t1403 + t1512 * t1404;
t1381 = -t1512 * t1403 + t1509 * t1404;
t1380 = t1512 * t1401 + t1509 * t1402;
t1379 = t1509 * t1401 - t1512 * t1402;
t1378 = t1511 * t1396 - t1508 * t1398;
t1377 = t1508 * t1396 + t1511 * t1398;
t1376 = t1509 * t1388 + t1512 * t1389;
t1375 = -t1512 * t1388 + t1509 * t1389;
t1374 = -t1506 * t1386 + t1507 * t1387;
t1373 = t1507 * t1386 + t1506 * t1387;
t1372 = t1508 * t1384 + t1511 * t1385;
t1371 = t1511 * t1384 - t1508 * t1385;
t1370 = -t1506 * t1381 + t1507 * t1382;
t1369 = t1507 * t1381 + t1506 * t1382;
t1368 = -t1506 * t1379 + t1507 * t1380;
t1367 = t1507 * t1379 + t1506 * t1380;
t1366 = t1509 * t1377 + t1512 * t1378;
t1365 = -t1512 * t1377 + t1509 * t1378;
t1364 = -t1506 * t1375 + t1507 * t1376;
t1363 = t1507 * t1375 + t1506 * t1376;
t1362 = -t1508 * t1371 + t1511 * t1372;
t1361 = t1511 * t1371 + t1508 * t1372;
t1360 = -t1506 * t1365 + t1507 * t1366;
t1359 = t1507 * t1365 + t1506 * t1366;
t1358 = t1509 * t1361 + t1512 * t1362;
t1357 = -t1512 * t1361 + t1509 * t1362;
t1356 = -t1506 * t1357 + t1507 * t1358;
t1355 = t1507 * t1357 + t1506 * t1358;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1488, -t1487, 0, -t1510 * t1489 + t1513 * t1490, 0, 0, 0, 0, 0, 0, -t1513 * t1484 - t1507 * t1530, t1513 * t1483 + t1506 * t1530, t1513 * t1485 - t1510 * t1486, t1513 * t1424 - t1510 * t1475, 0, 0, 0, 0, 0, 0, t1565, t1568, t1564, t1513 * t1374 - t1510 * t1452, 0, 0, 0, 0, 0, 0, t1565, t1564, -t1568, t1513 * t1368 - t1510 * t1390, 0, 0, 0, 0, 0, 0, t1513 * t1364 - t1510 * t1395, t1513 * t1370 - t1510 * t1397, t1513 * t1360 - t1510 * t1409, t1513 * t1356 - t1510 * t1383; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1487, t1488, 0, t1513 * t1489 + t1510 * t1490, 0, 0, 0, 0, 0, 0, -t1510 * t1484 + t1507 * t1529, t1510 * t1483 - t1506 * t1529, t1510 * t1485 + t1513 * t1486, t1510 * t1424 + t1513 * t1475, 0, 0, 0, 0, 0, 0, t1567, t1569, t1566, t1510 * t1374 + t1513 * t1452, 0, 0, 0, 0, 0, 0, t1567, t1566, -t1569, t1510 * t1368 + t1513 * t1390, 0, 0, 0, 0, 0, 0, t1510 * t1364 + t1513 * t1395, t1510 * t1370 + t1513 * t1397, t1510 * t1360 + t1513 * t1409, t1510 * t1356 + t1513 * t1383; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1423, 0, 0, 0, 0, 0, 0, t1560, -t1392, t1558, t1373, 0, 0, 0, 0, 0, 0, t1560, t1558, t1392, t1367, 0, 0, 0, 0, 0, 0, t1363, t1369, t1359, t1355; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1515, -qJDD(1), 0, t1490, 0, 0, 0, 0, 0, 0, -t1484, t1483, t1485, t1424, 0, 0, 0, 0, 0, 0, t1561, t1408, t1559, t1374, 0, 0, 0, 0, 0, 0, t1561, t1559, -t1408, t1368, 0, 0, 0, 0, 0, 0, t1364, t1370, t1360, t1356; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1515, 0, t1489, 0, 0, 0, 0, 0, 0, t1496, -t1531, t1486, t1475, 0, 0, 0, 0, 0, 0, -t1456, -t1520, t1433, t1452, 0, 0, 0, 0, 0, 0, -t1456, t1433, t1520, t1390, 0, 0, 0, 0, 0, 0, t1395, t1397, t1409, t1383; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1423, 0, 0, 0, 0, 0, 0, t1560, -t1392, t1558, t1373, 0, 0, 0, 0, 0, 0, t1560, t1558, t1392, t1367, 0, 0, 0, 0, 0, 0, t1363, t1369, t1359, t1355; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1538, t1491, t1496, t1462, 0, 0, 0, 0, 0, 0, t1554, -t1420, t1555, t1387, 0, 0, 0, 0, 0, 0, t1554, t1555, t1420, t1380, 0, 0, 0, 0, 0, 0, t1376, t1382, t1366, t1358; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1491, -t1499 * t1515, -t1531, t1461, 0, 0, 0, 0, 0, 0, t1557, -t1418, t1556, t1386, 0, 0, 0, 0, 0, 0, t1557, t1556, t1418, t1379, 0, 0, 0, 0, 0, 0, t1375, t1381, t1365, t1357; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1496, t1531, -t1486, -t1475, 0, 0, 0, 0, 0, 0, t1456, t1520, -t1433, -t1452, 0, 0, 0, 0, 0, 0, t1456, -t1433, -t1520, -t1390, 0, 0, 0, 0, 0, 0, -t1395, -t1397, -t1409, -t1383; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1550, -t1453, -t1523, t1411, 0, 0, 0, 0, 0, 0, t1550, -t1523, t1453, t1401, 0, 0, 0, 0, 0, 0, t1389, t1404, t1378, t1362; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1525, t1549, -t1478, t1410, 0, 0, 0, 0, 0, 0, -t1525, -t1478, -t1549, -t1402, 0, 0, 0, 0, 0, 0, -t1388, -t1403, -t1377, -t1361; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1456, t1520, -t1433, -t1452, 0, 0, 0, 0, 0, 0, t1456, -t1433, -t1520, -t1390, 0, 0, 0, 0, 0, 0, -t1395, -t1397, -t1409, -t1383; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1550, -t1523, t1453, t1401, 0, 0, 0, 0, 0, 0, t1389, t1404, t1378, t1362; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1456, -t1433, -t1520, -t1390, 0, 0, 0, 0, 0, 0, -t1395, -t1397, -t1409, -t1383; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1525, t1478, t1549, t1402, 0, 0, 0, 0, 0, 0, t1388, t1403, t1377, t1361; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1414, t1415, t1396, t1372; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1416, t1436, t1398, t1371; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1395, t1397, t1409, t1383;];
f_new_reg = t1;
