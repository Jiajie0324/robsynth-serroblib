% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRPR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:28
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRPR11_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR11_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR11_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR11_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR11_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRPR11_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:28:04
% EndTime: 2019-12-31 18:28:15
% DurationCPUTime: 11.61s
% Computational Cost: add. (27200->518), mult. (67142->732), div. (0->0), fcn. (47824->8), ass. (0->373)
t631 = sin(pkin(8));
t632 = cos(pkin(8));
t637 = cos(qJ(3));
t681 = qJD(1) * t637;
t634 = sin(qJ(3));
t682 = qJD(1) * t634;
t598 = t631 * t681 + t632 * t682;
t593 = t598 ^ 2;
t639 = qJD(3) ^ 2;
t545 = t639 + t593;
t596 = t631 * t682 - t632 * t681;
t560 = t598 * t596;
t723 = qJDD(3) + t560;
t698 = t634 * t723;
t480 = t637 * t545 + t698;
t687 = t637 * t723;
t501 = t634 * t545 - t687;
t418 = t632 * t480 - t631 * t501;
t788 = qJ(2) * t418;
t449 = t631 * t480 + t632 * t501;
t787 = qJ(2) * t449;
t635 = sin(qJ(1));
t786 = t635 * t449;
t638 = cos(qJ(1));
t785 = t638 * t449;
t784 = -pkin(1) * t418 - pkin(2) * t480;
t717 = t596 ^ 2;
t577 = t717 - t639;
t490 = t634 * t577 + t687;
t496 = t637 * t577 - t698;
t445 = t631 * t490 - t632 * t496;
t677 = qJDD(1) * t632;
t594 = t634 * t631 * qJDD(1) - t637 * t677;
t783 = t635 * t445 - t638 * t594;
t782 = t638 * t445 + t635 * t594;
t724 = (t631 * t637 + t632 * t634) * qJDD(1);
t578 = -t593 + t639;
t548 = qJDD(3) - t560;
t697 = t634 * t548;
t766 = t637 * t578 + t697;
t537 = t637 * t548;
t767 = -t634 * t578 + t537;
t770 = -t631 * t766 + t632 * t767;
t781 = t635 * t770 - t638 * t724;
t780 = t635 * t724 + t638 * t770;
t513 = -t717 - t593;
t739 = -t637 * t594 + t634 * t724;
t740 = -t634 * t594 - t637 * t724;
t745 = -t631 * t740 + t632 * t739;
t759 = t635 * t513 + t638 * t745;
t778 = pkin(5) * t759;
t680 = t598 * qJD(3);
t552 = t594 + 0.2e1 * t680;
t725 = -t639 - t717;
t735 = t637 * t725 - t697;
t741 = t634 * t725 + t537;
t747 = -t631 * t741 + t632 * t735;
t760 = t635 * t552 + t638 * t747;
t777 = pkin(5) * t760;
t761 = -t638 * t513 + t635 * t745;
t776 = pkin(5) * t761;
t762 = -t638 * t552 + t635 * t747;
t775 = pkin(5) * t762;
t774 = pkin(6) * t480;
t773 = pkin(6) * t501;
t772 = t632 * t490 + t631 * t496;
t771 = t631 * t767 + t632 * t766;
t744 = t631 * t739 + t632 * t740;
t769 = qJ(2) * t744;
t746 = t631 * t735 + t632 * t741;
t768 = qJ(2) * t746;
t387 = -pkin(1) * t744 - pkin(2) * t740;
t765 = -pkin(1) * t746 - pkin(2) * t741;
t764 = -pkin(1) * t552 + qJ(2) * t747;
t763 = -pkin(1) * t513 + qJ(2) * t745;
t755 = pkin(6) * t735;
t754 = pkin(6) * t740;
t753 = pkin(6) * t741;
t557 = t593 - t717;
t751 = t635 * t557;
t749 = t638 * t557;
t610 = t638 * g(1) + t635 * g(2);
t640 = qJD(1) ^ 2;
t742 = -t640 * pkin(1) + qJDD(1) * qJ(2) + 0.2e1 * qJD(1) * qJD(2) - t610;
t748 = -pkin(2) * t513 + pkin(6) * t739;
t716 = 2 * qJD(4);
t588 = qJD(3) * t596;
t555 = t724 - t588;
t727 = -t588 + t555;
t743 = t727 * qJ(4);
t648 = (-t596 * t634 - t598 * t637) * qJD(3);
t575 = t634 * t680;
t667 = t637 * t588;
t654 = t575 - t667;
t720 = -t631 * t648 + t632 * t654;
t738 = t635 * qJDD(3) + t638 * t720;
t668 = t638 * t560;
t553 = t594 + t680;
t650 = t634 * t553 + t667;
t655 = -t637 * t553 + t634 * t588;
t719 = -t631 * t655 + t632 * t650;
t737 = t635 * t719 + t668;
t736 = -t638 * qJDD(3) + t635 * t720;
t670 = t635 * t560;
t734 = t638 * t719 - t670;
t633 = sin(qJ(5));
t625 = -qJDD(3) + qJDD(5);
t636 = cos(qJ(5));
t534 = -t636 * t596 + t633 * t598;
t536 = t633 * t596 + t636 * t598;
t709 = t536 * t534;
t651 = t625 - t709;
t733 = t633 * t651;
t731 = t636 * t651;
t459 = -t534 * qJD(5) + t633 * t553 + t636 * t555;
t628 = qJD(3) - qJD(5);
t524 = t534 * t628;
t729 = t459 + t524;
t609 = t635 * g(1) - t638 * g(2);
t656 = -qJDD(2) + t609;
t714 = pkin(2) * t632;
t626 = t631 ^ 2;
t627 = t632 ^ 2;
t726 = t626 + t627;
t546 = (pkin(1) + t714) * qJDD(1) + (t726 * pkin(6) + qJ(2)) * t640 + t656;
t728 = -pkin(3) * t680 + t546;
t711 = t632 * g(3);
t520 = -t711 + (-pkin(6) * qJDD(1) + t640 * t714 - t742) * t631;
t562 = -t631 * g(3) + t742 * t632;
t619 = t627 * t640;
t525 = -pkin(2) * t619 + pkin(6) * t677 + t562;
t463 = t634 * t520 + t637 * t525;
t541 = t596 * pkin(3) - t598 * qJ(4);
t653 = qJDD(3) * qJ(4) + qJD(3) * t716 - t596 * t541 + t463;
t722 = t640 * t726;
t721 = t631 * t654 + t632 * t648;
t718 = t631 * t650 + t632 * t655;
t532 = t534 ^ 2;
t533 = t536 ^ 2;
t624 = t628 ^ 2;
t715 = pkin(3) + pkin(4);
t713 = pkin(3) * t637;
t712 = t553 * pkin(3);
t710 = qJDD(1) * pkin(1);
t708 = t626 * t640;
t707 = t628 * t633;
t706 = t628 * t636;
t462 = -t637 * t520 + t634 * t525;
t400 = -t637 * t462 + t634 * t463;
t705 = t631 * t400;
t704 = t631 * t632;
t703 = t632 * t400;
t574 = -qJD(3) * pkin(4) - t598 * pkin(7);
t644 = t728 + t743;
t384 = -t712 - t553 * pkin(4) - t717 * pkin(7) + (t716 + t574) * t598 + t644;
t702 = t633 * t384;
t475 = -t625 - t709;
t701 = t633 * t475;
t700 = t634 * t727;
t699 = t634 * t546;
t696 = t634 * t552;
t590 = t640 * qJ(2) + t656 + t710;
t692 = t635 * t590;
t690 = t636 * t384;
t689 = t636 * t475;
t688 = t637 * t546;
t686 = t637 * t552;
t685 = t638 * t590;
t683 = -t513 - t639;
t676 = t635 * qJDD(1);
t675 = t638 * qJDD(1);
t673 = t598 * t716;
t671 = t635 * t709;
t669 = t638 * t709;
t666 = -qJ(4) * t634 - pkin(2);
t665 = t590 + t710;
t660 = t598 * t541 + qJDD(4) + t462;
t647 = -qJDD(3) * pkin(3) + t660;
t431 = t639 * qJ(4) - t647;
t386 = (-t555 - t588) * pkin(7) - t548 * pkin(4) - t431;
t430 = -t639 * pkin(3) + t653;
t389 = -t717 * pkin(4) + t553 * pkin(7) + qJD(3) * t574 + t430;
t346 = -t636 * t386 + t633 * t389;
t401 = t634 * t462 + t637 * t463;
t664 = -t636 * t553 + t633 * t555;
t561 = t742 * t631 + t711;
t489 = t631 * t561 + t632 * t562;
t570 = -t635 * t609 - t638 * t610;
t608 = -t635 * t640 + t675;
t659 = -pkin(5) * t608 - t635 * g(3);
t506 = t634 * t555 + t637 * t680;
t507 = t637 * t555 - t575;
t455 = -t631 * t506 + t632 * t507;
t658 = t635 * t455 - t668;
t657 = t638 * t455 + t670;
t347 = t633 * t386 + t636 * t389;
t312 = -t636 * t346 + t633 * t347;
t313 = t633 * t346 + t636 * t347;
t488 = t632 * t561 - t631 * t562;
t569 = t638 * t609 - t635 * t610;
t607 = t638 * t640 + t676;
t601 = t632 * t722;
t566 = -t635 * t601 + t632 * t675;
t649 = t638 * t601 + t632 * t676;
t645 = (-qJD(5) - t628) * t536 - t664;
t643 = t644 + t673;
t618 = t627 * qJDD(1);
t617 = t626 * qJDD(1);
t606 = t619 - t708;
t605 = t619 + t708;
t604 = t618 - t617;
t603 = t618 + t617;
t600 = t631 * t722;
t591 = -pkin(5) * t607 + t638 * g(3);
t573 = t608 * t704;
t572 = t607 * t704;
t567 = t638 * t600 + t631 * t676;
t565 = t635 * t600 - t631 * t675;
t564 = t638 * t603 - t635 * t605;
t563 = t635 * t603 + t638 * t605;
t554 = t724 - 0.2e1 * t588;
t522 = -t533 + t624;
t521 = t532 - t624;
t517 = -t533 - t624;
t486 = -t634 * t554 - t686;
t484 = t637 * t554 - t696;
t478 = t533 - t532;
t474 = -t624 - t532;
t469 = (t534 * t636 - t536 * t633) * t628;
t468 = (-t534 * t633 - t536 * t636) * t628;
t467 = t638 * t489 - t692;
t466 = t635 * t489 + t685;
t465 = t686 + t700;
t464 = -t637 * t727 + t696;
t460 = -t688 + t774;
t458 = -t536 * qJD(5) - t664;
t457 = -t699 - t753;
t456 = -t532 - t533;
t452 = t632 * t506 + t631 * t507;
t441 = t636 * t521 + t701;
t440 = -t633 * t522 + t731;
t439 = -t633 * t521 + t689;
t438 = -t636 * t522 - t733;
t437 = -pkin(2) * t554 - t699 + t773;
t436 = -t633 * t517 + t689;
t435 = t636 * t517 + t701;
t432 = -pkin(2) * t552 + t688 + t755;
t429 = -t631 * t484 + t632 * t486;
t426 = t459 - t524;
t421 = (qJD(5) - t628) * t536 + t664;
t416 = t643 - t712;
t415 = t636 * t459 + t536 * t707;
t414 = -t633 * t459 + t536 * t706;
t413 = -t633 * t458 - t534 * t706;
t412 = -t636 * t458 + t534 * t707;
t411 = pkin(3) * t724 + qJ(4) * t594 + t387;
t410 = t635 * t554 + t785;
t408 = -t638 * t554 + t786;
t406 = t636 * t474 - t733;
t405 = t633 * t474 + t731;
t404 = -t634 * t468 + t637 * t469;
t403 = t637 * t468 + t634 * t469;
t402 = -t631 * t464 + t632 * t465;
t399 = (-t552 - t553) * pkin(3) + t643;
t396 = t683 * qJ(4) + t647;
t395 = t683 * pkin(3) + t653;
t392 = t673 - t712 + t728 + 0.2e1 * t743;
t391 = -t635 * t727 - t785;
t390 = t638 * t727 - t786;
t388 = pkin(2) * t546 + pkin(6) * t401;
t383 = -t400 - t754;
t382 = -t634 * t439 + t637 * t441;
t381 = -t634 * t438 + t637 * t440;
t380 = t637 * t439 + t634 * t441;
t379 = t637 * t438 + t634 * t440;
t378 = t634 * t435 + t637 * t436;
t377 = -t637 * t435 + t634 * t436;
t376 = t463 - t784;
t375 = -qJ(4) * t686 - t634 * t399 - t753;
t374 = t637 * t430 - t634 * t431;
t373 = t634 * t430 + t637 * t431;
t372 = t401 + t748;
t371 = t633 * t426 + t636 * t645;
t370 = -t636 * t421 - t633 * t729;
t369 = -t636 * t426 + t633 * t645;
t368 = t633 * t421 - t636 * t729;
t367 = t462 + t765;
t366 = t637 * t399 + t666 * t552 + t755;
t365 = -t634 * t414 + t637 * t415;
t364 = -t634 * t412 + t637 * t413;
t363 = t637 * t414 + t634 * t415;
t362 = t637 * t412 + t634 * t413;
t361 = t634 * t405 + t637 * t406;
t360 = -t637 * t405 + t634 * t406;
t359 = -pkin(3) * t700 + t637 * t392 - t774;
t358 = -t631 * t437 + t632 * t460 + t788;
t357 = -t631 * t403 + t632 * t404;
t356 = t632 * t401 - t705;
t355 = t631 * t401 + t703;
t354 = (-t725 - t639) * qJ(4) + (-qJDD(3) - t548) * pkin(3) + t660 + t765;
t353 = -t773 + t634 * t392 + (pkin(2) + t713) * t727;
t352 = -t631 * t432 + t632 * t457 - t768;
t351 = t638 * t356 - t635 * t546;
t350 = t635 * t356 + t638 * t546;
t349 = -t634 * t395 + t637 * t396 - t754;
t348 = -qJ(4) * t723 + (-t545 + t639) * pkin(3) - t653 + t784;
t345 = t637 * t395 + t634 * t396 + t748;
t344 = -pkin(7) * t435 + qJ(4) * t729 + t690;
t343 = -t631 * t380 + t632 * t382;
t342 = -t631 * t379 + t632 * t381;
t341 = -t631 * t377 + t632 * t378;
t340 = t632 * t377 + t631 * t378;
t339 = -pkin(7) * t405 + qJ(4) * t421 + t702;
t338 = -pkin(1) * t355 - pkin(2) * t400;
t337 = -t631 * t373 + t632 * t374;
t336 = t632 * t373 + t631 * t374;
t335 = -pkin(6) * t373 + (-pkin(3) * t634 + qJ(4) * t637) * t416;
t334 = t634 * t369 + t637 * t371;
t333 = -t634 * t368 + t637 * t370;
t332 = -t637 * t369 + t634 * t371;
t331 = t637 * t368 + t634 * t370;
t330 = -t631 * t363 + t632 * t365;
t329 = -t631 * t362 + t632 * t364;
t328 = -t631 * t360 + t632 * t361;
t327 = t632 * t360 + t631 * t361;
t326 = -pkin(7) * t436 + t715 * t729 - t702;
t325 = t638 * t341 - t635 * t729;
t324 = t635 * t341 + t638 * t729;
t323 = -pkin(7) * t406 + t715 * t421 + t690;
t322 = -t631 * t372 + t632 * t383 - t769;
t321 = -t631 * t366 + t632 * t375 - t768;
t320 = t638 * t337 - t635 * t416;
t319 = t635 * t337 + t638 * t416;
t318 = pkin(6) * t374 + (-t666 + t713) * t416;
t317 = -pkin(6) * t703 - qJ(2) * t355 - t631 * t388;
t316 = t638 * t328 - t635 * t421;
t315 = t635 * t328 + t638 * t421;
t314 = -t631 * t353 + t632 * t359 - t788;
t311 = -t631 * t345 + t632 * t349 - t769;
t310 = -pkin(7) * t312 + qJ(4) * t384;
t309 = -pkin(1) * t336 - pkin(2) * t373 - pkin(3) * t431 - qJ(4) * t430;
t308 = -t631 * t332 + t632 * t334;
t307 = -t631 * t331 + t632 * t333;
t306 = t632 * t332 + t631 * t334;
t305 = -pkin(7) * t369 + qJ(4) * t456 - t312;
t304 = t638 * t308 - t635 * t456;
t303 = t635 * t308 + t638 * t456;
t302 = -pkin(7) * t313 + t715 * t384;
t301 = -pkin(7) * t371 + t715 * t456 - t313;
t300 = -pkin(6) * t377 - t634 * t326 + t637 * t344;
t299 = -pkin(6) * t360 - t634 * t323 + t637 * t339;
t298 = pkin(2) * t729 + pkin(6) * t378 + t637 * t326 + t634 * t344;
t297 = -pkin(1) * t340 - pkin(2) * t377 - qJ(4) * t436 + t715 * t435 - t347;
t296 = pkin(2) * t421 + pkin(6) * t361 + t637 * t323 + t634 * t339;
t295 = t634 * t312 + t637 * t313;
t294 = -t637 * t312 + t634 * t313;
t293 = -pkin(1) * t327 - pkin(2) * t360 - qJ(4) * t406 + t715 * t405 - t346;
t292 = -qJ(2) * t336 - t631 * t318 + t632 * t335;
t291 = -pkin(1) * t306 - pkin(2) * t332 - qJ(4) * t371 + t715 * t369;
t290 = -pkin(6) * t332 - t634 * t301 + t637 * t305;
t289 = pkin(2) * t456 + pkin(6) * t334 + t637 * t301 + t634 * t305;
t288 = -qJ(2) * t340 - t631 * t298 + t632 * t300;
t287 = -t631 * t294 + t632 * t295;
t286 = t632 * t294 + t631 * t295;
t285 = t638 * t287 - t635 * t384;
t284 = t635 * t287 + t638 * t384;
t283 = -qJ(2) * t327 - t631 * t296 + t632 * t299;
t282 = -pkin(6) * t294 - t634 * t302 + t637 * t310;
t281 = pkin(2) * t384 + pkin(6) * t295 + t637 * t302 + t634 * t310;
t280 = -qJ(2) * t306 - t631 * t289 + t632 * t290;
t279 = -pkin(1) * t286 - pkin(2) * t294 - qJ(4) * t313 + t715 * t312;
t278 = -qJ(2) * t286 - t631 * t281 + t632 * t282;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t607, -t608, 0, t570, 0, 0, 0, 0, 0, 0, -t649, t567, t564, t467, 0, 0, 0, 0, 0, 0, t760, t410, t759, t351, 0, 0, 0, 0, 0, 0, t760, t759, t391, t320, 0, 0, 0, 0, 0, 0, t316, t325, t304, t285; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t608, -t607, 0, t569, 0, 0, 0, 0, 0, 0, t566, t565, t563, t466, 0, 0, 0, 0, 0, 0, t762, t408, t761, t350, 0, 0, 0, 0, 0, 0, t762, t761, t390, t319, 0, 0, 0, 0, 0, 0, t315, t324, t303, t284; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t488, 0, 0, 0, 0, 0, 0, t746, -t418, t744, t355, 0, 0, 0, 0, 0, 0, t746, t744, t418, t336, 0, 0, 0, 0, 0, 0, t327, t340, t306, t286; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t608, 0, -t607, 0, t659, -t591, -t569, -pkin(5) * t569, t573, t638 * t604 - t635 * t606, t567, -t573, t649, 0, -pkin(5) * t566 - t635 * t561 - t631 * t685, -pkin(5) * t565 - t635 * t562 - t632 * t685, -pkin(5) * t563 + t638 * t488, -pkin(5) * t466 - (pkin(1) * t635 - qJ(2) * t638) * t488, t657, t638 * t429 + t751, t780, t734, -t782, t738, t638 * t352 - t635 * t367 - t775, -pkin(5) * t408 + t638 * t358 - t635 * t376, t638 * t322 - t635 * t387 - t776, -pkin(5) * t350 + t638 * t317 - t635 * t338, t657, t780, t638 * t402 - t751, t738, t782, t734, t638 * t321 - t635 * t354 - t775, t638 * t311 - t635 * t411 - t776, -pkin(5) * t390 + t638 * t314 - t635 * t348, -pkin(5) * t319 + t638 * t292 - t635 * t309, t638 * t330 - t671, t638 * t307 - t635 * t478, t638 * t342 - t635 * t426, t638 * t329 + t671, t638 * t343 - t635 * t645, t638 * t357 - t635 * t625, -pkin(5) * t315 + t638 * t283 - t635 * t293, -pkin(5) * t324 + t638 * t288 - t635 * t297, -pkin(5) * t303 + t638 * t280 - t635 * t291, -pkin(5) * t284 + t638 * t278 - t635 * t279; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t607, 0, t608, 0, t591, t659, t570, pkin(5) * t570, t572, t635 * t604 + t638 * t606, t565, -t572, -t566, 0, -pkin(5) * t649 + t638 * t561 - t631 * t692, pkin(5) * t567 + t638 * t562 - t632 * t692, pkin(5) * t564 + t635 * t488, pkin(5) * t467 - (-pkin(1) * t638 - qJ(2) * t635) * t488, t658, t635 * t429 - t749, t781, t737, -t783, t736, t635 * t352 + t638 * t367 + t777, pkin(5) * t410 + t635 * t358 + t638 * t376, t635 * t322 + t638 * t387 + t778, pkin(5) * t351 + t635 * t317 + t638 * t338, t658, t781, t635 * t402 + t749, t736, t783, t737, t635 * t321 + t638 * t354 + t777, t635 * t311 + t638 * t411 + t778, pkin(5) * t391 + t635 * t314 + t638 * t348, pkin(5) * t320 + t635 * t292 + t638 * t309, t635 * t330 + t669, t635 * t307 + t638 * t478, t635 * t342 + t638 * t426, t635 * t329 - t669, t635 * t343 + t638 * t645, t635 * t357 + t638 * t625, pkin(5) * t316 + t635 * t283 + t638 * t293, pkin(5) * t325 + t635 * t288 + t638 * t297, pkin(5) * t304 + t635 * t280 + t638 * t291, pkin(5) * t285 + t635 * t278 + t638 * t279; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t609, t610, 0, 0, t617, 0.2e1 * t631 * t677, 0, t618, 0, 0, -qJ(2) * t601 + t632 * t665, qJ(2) * t600 - t631 * t665, pkin(1) * t605 + qJ(2) * t603 + t489, pkin(1) * t590 + qJ(2) * t489, t452, t632 * t484 + t631 * t486, t771, t718, t772, t721, t632 * t432 + t631 * t457 + t764, -pkin(1) * t554 + t632 * t437 + t631 * t460 + t787, t632 * t372 + t631 * t383 + t763, pkin(1) * t546 - pkin(6) * t705 + qJ(2) * t356 + t632 * t388, t452, t771, t632 * t464 + t631 * t465, t721, -t772, t718, t632 * t366 + t631 * t375 + t764, t632 * t345 + t631 * t349 + t763, pkin(1) * t727 + t632 * t353 + t631 * t359 - t787, pkin(1) * t416 + qJ(2) * t337 + t632 * t318 + t631 * t335, t632 * t363 + t631 * t365, t632 * t331 + t631 * t333, t632 * t379 + t631 * t381, t632 * t362 + t631 * t364, t632 * t380 + t631 * t382, t632 * t403 + t631 * t404, pkin(1) * t421 + qJ(2) * t328 + t632 * t296 + t631 * t299, pkin(1) * t729 + qJ(2) * t341 + t632 * t298 + t631 * t300, pkin(1) * t456 + qJ(2) * t308 + t632 * t289 + t631 * t290, pkin(1) * t384 + qJ(2) * t287 + t632 * t281 + t631 * t282;];
tauB_reg = t1;
