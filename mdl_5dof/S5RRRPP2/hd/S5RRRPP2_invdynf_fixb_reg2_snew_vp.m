% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRPP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:52
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRPP2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPP2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPP2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPP2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPP2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RRRPP2_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:52:17
% EndTime: 2019-12-31 20:52:19
% DurationCPUTime: 1.73s
% Computational Cost: add. (2971->169), mult. (4243->162), div. (0->0), fcn. (2174->6), ass. (0->92)
t1082 = qJD(1) + qJD(2);
t1080 = t1082 ^ 2;
t1089 = sin(qJ(3));
t1092 = cos(qJ(3));
t1103 = t1092 * t1080 * t1089;
t1063 = qJDD(3) - t1103;
t1085 = t1089 ^ 2;
t1116 = qJD(3) ^ 2;
t1067 = t1080 * t1085 + t1116;
t1042 = t1063 * t1092 - t1067 * t1089;
t1112 = t1082 * t1092;
t1102 = qJD(3) * t1112;
t1081 = qJDD(1) + qJDD(2);
t1109 = t1089 * t1081;
t1050 = 0.2e1 * t1102 + t1109;
t1090 = sin(qJ(2));
t1093 = cos(qJ(2));
t1022 = t1042 * t1090 + t1093 * t1050;
t1025 = t1042 * t1093 - t1090 * t1050;
t1091 = sin(qJ(1));
t1094 = cos(qJ(1));
t1009 = t1022 * t1094 + t1025 * t1091;
t1123 = t1022 * t1091 - t1025 * t1094;
t1058 = t1080 * t1090 - t1081 * t1093;
t1100 = -t1080 * t1093 - t1081 * t1090;
t1122 = t1058 * t1091 + t1094 * t1100;
t1121 = t1058 * t1094 - t1091 * t1100;
t1086 = t1092 ^ 2;
t1105 = t1085 + t1086;
t1055 = t1105 * t1081;
t1060 = t1105 * t1080;
t1032 = t1055 * t1090 + t1060 * t1093;
t1034 = t1055 * t1093 - t1060 * t1090;
t1017 = t1032 * t1094 + t1034 * t1091;
t1120 = t1032 * t1091 - t1034 * t1094;
t1117 = -t1103 - qJDD(3);
t1115 = -2 * qJD(5);
t1114 = t1092 * g(3);
t1113 = t1082 * t1089;
t1111 = t1086 * t1080;
t1071 = -g(1) * t1094 - g(2) * t1091;
t1095 = qJD(1) ^ 2;
t1061 = -pkin(1) * t1095 + t1071;
t1070 = g(1) * t1091 - g(2) * t1094;
t1096 = qJDD(1) * pkin(1) + t1070;
t1037 = t1061 * t1093 + t1090 * t1096;
t1031 = -pkin(2) * t1080 + pkin(7) * t1081 + t1037;
t1110 = t1089 * t1031;
t1107 = t1092 * t1081;
t1104 = qJ(5) * t1113;
t1028 = -t1089 * g(3) + t1031 * t1092;
t1036 = -t1090 * t1061 + t1093 * t1096;
t1076 = qJD(3) * t1113;
t1101 = -t1076 + t1107;
t1039 = t1063 * t1089 + t1067 * t1092;
t1099 = -qJDD(3) * pkin(3) - qJ(4) * t1116 + qJDD(4) + t1114;
t1030 = -pkin(2) * t1081 - pkin(7) * t1080 - t1036;
t1098 = t1102 + t1109;
t1049 = (-pkin(3) * t1092 - qJ(4) * t1089) * t1082;
t1097 = qJDD(3) * qJ(4) + 0.2e1 * qJD(4) * qJD(3) + t1049 * t1112 + t1028;
t1014 = -t1101 * pkin(3) + (pkin(3) * qJD(3) - 0.2e1 * qJD(4)) * t1113 + t1030 + (-t1098 - t1102) * qJ(4);
t1068 = -t1111 - t1116;
t1065 = -qJDD(1) * t1091 - t1094 * t1095;
t1064 = qJDD(1) * t1094 - t1091 * t1095;
t1051 = -0.2e1 * t1076 + t1107;
t1041 = t1068 * t1092 + t1089 * t1117;
t1038 = t1068 * t1089 - t1092 * t1117;
t1027 = -t1110 - t1114;
t1024 = t1041 * t1093 - t1051 * t1090;
t1021 = t1041 * t1090 + t1051 * t1093;
t1020 = -t1036 * t1090 + t1037 * t1093;
t1019 = t1036 * t1093 + t1037 * t1090;
t1016 = (t1049 * t1082 + t1031) * t1089 + t1099;
t1015 = -pkin(3) * t1116 + t1097;
t1013 = -t1027 * t1089 + t1028 * t1092;
t1012 = t1027 * t1092 + t1028 * t1089;
t1010 = -t1021 * t1091 + t1024 * t1094;
t1008 = t1021 * t1094 + t1024 * t1091;
t1007 = t1110 - t1098 * qJ(5) + (qJ(5) * qJD(3) * t1092 + (t1115 + t1049) * t1089) * t1082 + t1099 + t1117 * pkin(4);
t1006 = -pkin(4) * t1111 - t1101 * qJ(5) + t1112 * t1115 + (-t1104 + (-pkin(3) - pkin(4)) * qJD(3)) * qJD(3) + t1097;
t1005 = -(-qJD(3) * pkin(4) - t1104) * t1113 + qJ(5) * t1111 - t1101 * pkin(4) - qJDD(5) + t1014;
t1004 = t1013 * t1093 + t1030 * t1090;
t1003 = t1013 * t1090 - t1030 * t1093;
t1002 = t1015 * t1092 + t1016 * t1089;
t1001 = t1015 * t1089 - t1016 * t1092;
t1000 = t1006 * t1092 + t1007 * t1089;
t999 = t1006 * t1089 - t1007 * t1092;
t998 = t1002 * t1093 + t1014 * t1090;
t997 = t1002 * t1090 - t1014 * t1093;
t996 = t1000 * t1093 + t1005 * t1090;
t995 = t1000 * t1090 - t1005 * t1093;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1065, -t1064, 0, -t1070 * t1091 + t1071 * t1094, 0, 0, 0, 0, 0, 0, t1122, t1121, 0, -t1019 * t1091 + t1020 * t1094, 0, 0, 0, 0, 0, 0, t1010, t1123, -t1120, -t1003 * t1091 + t1004 * t1094, 0, 0, 0, 0, 0, 0, t1010, -t1120, -t1123, -t1091 * t997 + t1094 * t998, 0, 0, 0, 0, 0, 0, t1010, -t1123, t1120, -t1091 * t995 + t1094 * t996; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1064, t1065, 0, t1070 * t1094 + t1071 * t1091, 0, 0, 0, 0, 0, 0, -t1121, t1122, 0, t1019 * t1094 + t1020 * t1091, 0, 0, 0, 0, 0, 0, t1008, -t1009, t1017, t1003 * t1094 + t1004 * t1091, 0, 0, 0, 0, 0, 0, t1008, t1017, t1009, t1091 * t998 + t1094 * t997, 0, 0, 0, 0, 0, 0, t1008, t1009, -t1017, t1091 * t996 + t1094 * t995; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1038, -t1039, 0, t1012, 0, 0, 0, 0, 0, 0, t1038, 0, t1039, t1001, 0, 0, 0, 0, 0, 0, t1038, t1039, 0, t999; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1095, -qJDD(1), 0, t1071, 0, 0, 0, 0, 0, 0, t1100, t1058, 0, t1020, 0, 0, 0, 0, 0, 0, t1024, -t1025, t1034, t1004, 0, 0, 0, 0, 0, 0, t1024, t1034, t1025, t998, 0, 0, 0, 0, 0, 0, t1024, t1025, -t1034, t996; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1095, 0, t1070, 0, 0, 0, 0, 0, 0, -t1058, t1100, 0, t1019, 0, 0, 0, 0, 0, 0, t1021, -t1022, t1032, t1003, 0, 0, 0, 0, 0, 0, t1021, t1032, t1022, t997, 0, 0, 0, 0, 0, 0, t1021, t1022, -t1032, t995; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1038, -t1039, 0, t1012, 0, 0, 0, 0, 0, 0, t1038, 0, t1039, t1001, 0, 0, 0, 0, 0, 0, t1038, t1039, 0, t999; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1080, -t1081, 0, t1037, 0, 0, 0, 0, 0, 0, t1041, -t1042, t1055, t1013, 0, 0, 0, 0, 0, 0, t1041, t1055, t1042, t1002, 0, 0, 0, 0, 0, 0, t1041, t1042, -t1055, t1000; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1081, -t1080, 0, t1036, 0, 0, 0, 0, 0, 0, t1051, -t1050, t1060, -t1030, 0, 0, 0, 0, 0, 0, t1051, t1060, t1050, -t1014, 0, 0, 0, 0, 0, 0, t1051, t1050, -t1060, -t1005; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1038, -t1039, 0, t1012, 0, 0, 0, 0, 0, 0, t1038, 0, t1039, t1001, 0, 0, 0, 0, 0, 0, t1038, t1039, 0, t999; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1068, -t1063, t1107, t1028, 0, 0, 0, 0, 0, 0, t1068, t1107, t1063, t1015, 0, 0, 0, 0, 0, 0, t1068, t1063, -t1107, t1006; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1117, -t1067, -t1109, t1027, 0, 0, 0, 0, 0, 0, -t1117, -t1109, t1067, -t1016, 0, 0, 0, 0, 0, 0, -t1117, t1067, t1109, -t1007; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1051, t1050, -t1060, t1030, 0, 0, 0, 0, 0, 0, -t1051, -t1060, -t1050, t1014, 0, 0, 0, 0, 0, 0, -t1051, -t1050, t1060, t1005; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1068, t1107, t1063, t1015, 0, 0, 0, 0, 0, 0, t1068, t1063, -t1107, t1006; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1051, -t1060, -t1050, t1014, 0, 0, 0, 0, 0, 0, -t1051, -t1050, t1060, t1005; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1117, t1109, -t1067, t1016, 0, 0, 0, 0, 0, 0, t1117, -t1067, -t1109, t1007; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1068, t1063, -t1107, t1006; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1117, -t1067, -t1109, t1007; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1051, t1050, -t1060, -t1005;];
f_new_reg = t1;
