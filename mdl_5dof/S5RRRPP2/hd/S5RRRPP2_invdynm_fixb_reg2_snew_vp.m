% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRRPP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:52
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRRPP2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPP2_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPP2_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPP2_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPP2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RRRPP2_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:52:10
% EndTime: 2019-12-31 20:52:17
% DurationCPUTime: 7.44s
% Computational Cost: add. (17400->495), mult. (24459->484), div. (0->0), fcn. (11849->6), ass. (0->301)
t854 = qJD(3) ^ 2;
t840 = qJD(1) + qJD(2);
t838 = t840 ^ 2;
t848 = sin(qJ(3));
t843 = t848 ^ 2;
t936 = t843 * t838;
t813 = t854 + t936;
t851 = cos(qJ(3));
t818 = t851 * t838 * t848;
t807 = qJDD(3) - t818;
t919 = t851 * t807;
t755 = -t848 * t813 + t919;
t905 = qJD(3) * t851;
t830 = t840 * t905;
t839 = qJDD(1) + qJDD(2);
t926 = t848 * t839;
t783 = 0.2e1 * t830 + t926;
t849 = sin(qJ(2));
t852 = cos(qJ(2));
t694 = t849 * t755 + t852 * t783;
t697 = t852 * t755 - t849 * t783;
t850 = sin(qJ(1));
t853 = cos(qJ(1));
t645 = pkin(5) * (t850 * t694 - t853 * t697);
t958 = pkin(5) * (t853 * t694 + t850 * t697);
t691 = pkin(1) * t694;
t955 = pkin(6) * t694;
t930 = t848 * t807;
t748 = t851 * t813 + t930;
t893 = -pkin(1) * t748 + pkin(6) * t697;
t806 = qJDD(3) + t818;
t791 = t851 * t806;
t814 = -t854 + t936;
t754 = t848 * t814 + t791;
t915 = t852 * t839;
t714 = t849 * t754 - t848 * t915;
t923 = t849 * t839;
t718 = t852 * t754 + t848 * t923;
t663 = t853 * t714 + t850 * t718;
t992 = t850 * t714 - t853 * t718;
t794 = t852 * t838 + t923;
t767 = pkin(6) * t794 - t852 * g(3);
t797 = t849 * t838 - t915;
t876 = t853 * t794 - t850 * t797;
t979 = pkin(6) * t797 - t849 * g(3);
t991 = pkin(5) * t876 + t853 * t767 - t850 * t979;
t906 = qJD(3) * t840;
t829 = t848 * t906;
t918 = t851 * t839;
t786 = -0.2e1 * t829 + t918;
t920 = t851 * t786;
t933 = t848 * t783;
t725 = -t920 + t933;
t844 = t851 ^ 2;
t799 = (t843 - t844) * t838;
t681 = t849 * t725 + t852 * t799;
t683 = t852 * t725 - t849 * t799;
t638 = t853 * t681 + t850 * t683;
t990 = t850 * t681 - t853 * t683;
t935 = t844 * t838;
t815 = -t854 + t935;
t753 = -t851 * t815 + t930;
t713 = t849 * t753 + t851 * t915;
t717 = t852 * t753 - t849 * t918;
t989 = t853 * t713 + t850 * t717;
t664 = t850 * t713 - t853 * t717;
t976 = t850 * t794 + t853 * t797;
t988 = pkin(5) * t976 + t850 * t767 + t853 * t979;
t907 = t843 + t844;
t790 = t907 * t839;
t798 = t907 * t838;
t728 = t849 * t790 + t852 * t798;
t731 = t852 * t790 - t849 * t798;
t667 = pkin(5) * (t850 * t728 - t853 * t731);
t957 = pkin(5) * (t853 * t728 + t850 * t731);
t820 = t853 * g(1) + t850 * g(2);
t855 = qJD(1) ^ 2;
t804 = -t855 * pkin(1) - t820;
t819 = t850 * g(1) - t853 * g(2);
t873 = qJDD(1) * pkin(1) + t819;
t737 = t849 * t804 - t852 * t873;
t738 = t852 * t804 + t849 * t873;
t891 = t849 * t737 + t852 * t738;
t678 = t852 * t737 - t849 * t738;
t914 = t853 * t678;
t986 = -t850 * t891 + t914;
t922 = t850 * t678;
t985 = t853 * t891 + t922;
t911 = pkin(2) * t783 + pkin(7) * t755;
t727 = pkin(1) * t728;
t982 = pkin(2) * t748;
t960 = pkin(4) * t806;
t954 = pkin(6) * t728;
t726 = pkin(6) * t731;
t952 = pkin(7) * t748;
t784 = t830 + t926;
t980 = t784 + t830;
t721 = -t838 * pkin(2) + t839 * pkin(7) + t738;
t934 = t848 * t721;
t948 = t851 * g(3);
t699 = t934 + t948;
t908 = t848 * g(3) - t851 * t721;
t651 = t848 * t699 - t851 * t908;
t973 = pkin(3) * t813 + qJ(4) * t807;
t816 = -t854 - t935;
t972 = pkin(3) * t806 + qJ(4) * t816;
t904 = qJD(4) * qJD(3);
t834 = 0.2e1 * t904;
t937 = t840 * t851;
t895 = qJD(5) * t937;
t971 = -0.2e1 * t895 + t834;
t835 = -0.2e1 * t904;
t970 = t835 - t982;
t744 = t848 * t815 + t919;
t910 = pkin(2) * t798 + pkin(7) * t790;
t938 = t840 * t848;
t805 = -qJD(3) * pkin(4) - qJ(5) * t938;
t969 = t805 * t938 + qJDD(5);
t745 = t848 * t816 + t791;
t964 = pkin(2) * t745;
t968 = -t964 - t972;
t785 = -t829 + t918;
t878 = -pkin(3) * t851 - qJ(4) * t848;
t782 = t878 * t840;
t877 = t854 * pkin(3) - qJDD(3) * qJ(4) - t782 * t937 + t908;
t869 = pkin(4) * t935 + t785 * qJ(5) - qJD(3) * t805 + t877;
t636 = -t869 + t971;
t874 = -qJDD(3) * pkin(3) - t854 * qJ(4) + qJDD(4) + t948;
t864 = -t784 * qJ(5) + t874 + t934 - t960;
t896 = qJ(5) * t905;
t637 = (t896 + (-0.2e1 * qJD(5) + t782) * t848) * t840 + t864;
t965 = pkin(3) + pkin(4);
t967 = qJ(4) * t636 - t965 * t637;
t668 = (t782 * t840 + t721) * t848 + t874;
t966 = -(t785 + t786) * pkin(4) + (t816 + t935) * qJ(5);
t931 = t848 * t806;
t752 = t851 * t816 - t931;
t693 = t849 * t752 + t852 * t786;
t696 = t852 * t752 - t849 * t786;
t959 = pkin(5) * (t853 * t693 + t850 * t696);
t956 = pkin(6) * t693;
t953 = pkin(7) * t745;
t950 = t785 * pkin(4);
t945 = qJ(4) * t783;
t944 = qJ(4) * t786;
t943 = qJ(4) * t798;
t942 = qJ(5) * t636;
t941 = qJ(5) * t637;
t940 = qJ(5) * t806;
t939 = qJ(5) * t807;
t720 = -t839 * pkin(2) - t838 * pkin(7) + t737;
t704 = t848 * t720;
t932 = t848 * t786;
t705 = t851 * t720;
t921 = t851 * t783;
t913 = -pkin(2) * t720 + pkin(7) * t651;
t912 = pkin(2) * t786 + pkin(7) * t752;
t903 = 0.2e1 * t938;
t898 = t704 - t911;
t897 = -t705 + t912;
t894 = -pkin(1) * t745 + pkin(6) * t696;
t890 = -t850 * t819 - t853 * t820;
t888 = t849 * t818;
t887 = t852 * t818;
t868 = -t785 * pkin(3) - t980 * qJ(4) + t720;
t653 = (pkin(3) * qJD(3) - 0.2e1 * qJD(4)) * t938 + t868;
t860 = t653 - t969;
t629 = qJ(5) * t935 + t860 - t950;
t574 = -t965 * t629 - t942;
t592 = -qJ(4) * t629 - t941;
t598 = t851 * t636 + t848 * t637;
t886 = -pkin(2) * t629 + pkin(7) * t598 + t851 * t574 + t848 * t592;
t866 = qJD(4) * t903 - t868;
t861 = -pkin(3) * t829 + t866;
t856 = t950 + (t813 - t935) * qJ(5) + t861 + t969;
t615 = t856 + t945;
t701 = t965 * t783 - t939;
t885 = t848 * t615 + t851 * t701 + t911;
t824 = 0.2e1 * t895;
t863 = qJ(5) * t918 + t869;
t623 = -t965 * t798 + t824 + t835 + t863;
t859 = qJD(5) * t903 + (-t782 * t848 - t896) * t840 - t864;
t858 = qJ(5) * t926 + t859;
t627 = t858 - t943;
t884 = t851 * t623 + t848 * t627 - t910;
t666 = t834 - t877;
t656 = pkin(3) * t798 + t666;
t657 = t668 + t943;
t883 = t851 * t656 + t848 * t657 + t910;
t882 = t910 + t651;
t643 = (t786 - t829) * pkin(3) + t866;
t613 = t643 - t966 + t969;
t736 = t940 + t944;
t881 = t851 * t613 + t848 * t736 + t912;
t811 = t853 * qJDD(1) - t850 * t855;
t880 = -pkin(5) * t811 - t850 * g(3);
t879 = -pkin(3) * t668 + qJ(4) * t666;
t650 = t851 * t699 + t848 * t908;
t722 = t921 + t932;
t747 = -t851 * t814 + t931;
t875 = t853 * t819 - t850 * t820;
t642 = t861 + t945;
t872 = pkin(3) * t921 + t848 * t642 + t911;
t871 = qJ(4) * t932 + t851 * t643 + t912;
t870 = t877 - t973;
t622 = t851 * t666 + t848 * t668;
t867 = pkin(7) * t622 + (-pkin(2) + t878) * t653;
t865 = pkin(4) * t813 - t869;
t862 = t865 + t971;
t857 = t859 + t960;
t828 = qJ(4) * t918;
t810 = t850 * qJDD(1) + t853 * t855;
t779 = -pkin(5) * t810 + t853 * g(3);
t778 = pkin(3) * t926 - t828;
t777 = t907 * t906;
t762 = t965 * t926 - t828;
t761 = t849 * qJDD(3) + t852 * t777;
t760 = -t852 * qJDD(3) + t849 * t777;
t759 = t851 * t784 - t843 * t906;
t758 = -t848 * t785 - t844 * t906;
t740 = t980 * t848;
t739 = (t785 - t829) * t851;
t710 = t852 * t759 - t888;
t709 = t852 * t758 + t888;
t708 = t849 * t759 + t887;
t707 = t849 * t758 - t887;
t703 = -pkin(1) * t794 - t738;
t702 = -pkin(1) * t797 - t737;
t690 = pkin(1) * t693;
t685 = -t850 * t760 + t853 * t761;
t684 = t853 * t760 + t850 * t761;
t675 = pkin(1) * t678;
t674 = pkin(1) * g(3) + pkin(6) * t891;
t673 = t705 + t952;
t672 = t704 - t953;
t671 = -t908 + t982;
t670 = t699 - t964;
t661 = -t850 * t708 + t853 * t710;
t660 = -t850 * t707 + t853 * t709;
t659 = t853 * t708 + t850 * t710;
t658 = t853 * t707 + t850 * t709;
t644 = pkin(5) * (-t850 * t693 + t853 * t696);
t635 = t668 + t968;
t634 = t870 + t970;
t633 = t690 + t897;
t632 = t898 - t691;
t631 = t852 * t650 - t954;
t630 = t849 * t650 + t726;
t626 = t852 * t651 + t849 * t720;
t625 = t849 * t651 - t852 * t720;
t621 = t848 * t666 - t851 * t668;
t618 = -pkin(3) * t933 + t851 * t642 - t952;
t617 = qJ(4) * t920 - t848 * t643 - t953;
t616 = t727 + t882;
t612 = t824 - t865 + t970 - t973;
t611 = t637 - t960 + t968;
t609 = -t848 * t656 + t851 * t657;
t608 = -t849 * t671 + t852 * t673 + t955;
t607 = -t849 * t670 + t852 * t672 - t956;
t606 = t852 * t671 + t849 * t673 - t893;
t605 = t852 * t670 + t849 * t672 + t894;
t604 = t691 + t872;
t603 = t690 + t871;
t602 = -t848 * t613 + t851 * t736 - t953;
t601 = t851 * t615 - t848 * t701 - t952;
t600 = t852 * t609 - t849 * t778 - t954;
t599 = t849 * t609 + t852 * t778 + t726;
t597 = t848 * t636 - t851 * t637;
t595 = t727 + t883;
t594 = t852 * t622 + t849 * t653;
t593 = t849 * t622 - t852 * t653;
t590 = pkin(1) * t625 + t913;
t589 = -t848 * t623 + t851 * t627;
t588 = t690 + t881;
t587 = t691 + t885;
t586 = -pkin(2) * t621 - t879;
t585 = t852 * t617 - t849 * t635 - t956;
t584 = t852 * t618 - t849 * t634 - t955;
t583 = -pkin(6) * t625 - (pkin(2) * t849 - pkin(7) * t852) * t650;
t582 = -pkin(7) * t621 + (pkin(3) * t848 - qJ(4) * t851) * t653;
t581 = t852 * t589 + t849 * t762 + t954;
t580 = t849 * t589 - t852 * t762 - t726;
t579 = t849 * t617 + t852 * t635 + t894;
t578 = t884 - t727;
t577 = t849 * t618 + t852 * t634 + t893;
t576 = t852 * t598 + t849 * t629;
t575 = t849 * t598 - t852 * t629;
t572 = pkin(6) * t626 - (-pkin(2) * t852 - pkin(7) * t849 - pkin(1)) * t650;
t571 = t852 * t601 - t849 * t612 - t955;
t570 = t852 * t602 - t849 * t611 - t956;
t569 = t849 * t601 + t852 * t612 + t893;
t568 = t849 * t602 + t852 * t611 + t894;
t567 = -pkin(2) * t597 - t967;
t566 = pkin(1) * t593 + t867;
t565 = -pkin(7) * t597 - t848 * t574 + t851 * t592;
t564 = -pkin(6) * t593 + t852 * t582 - t849 * t586;
t563 = -pkin(1) * t621 + pkin(6) * t594 + t849 * t582 + t852 * t586;
t562 = pkin(1) * t575 + t886;
t561 = -pkin(6) * t575 + t852 * t565 - t849 * t567;
t560 = -pkin(1) * t597 + pkin(6) * t576 + t849 * t565 + t852 * t567;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t811, 0, -t810, 0, t880, -t779, -t875, -pkin(5) * t875, 0, 0, -t976, 0, -t876, 0, t988, t991, t986, pkin(5) * t986 + pkin(6) * t914 - t850 * t674, t661, t990, -t992, t660, t664, t685, -t850 * t605 + t853 * t607 - t959, -t850 * t606 + t853 * t608 + t958, -t850 * t630 + t853 * t631 - t957, t853 * t583 - t850 * t572 - pkin(5) * (t853 * t625 + t850 * t626), t661, -t992, -t990, t685, -t664, t660, -t850 * t579 + t853 * t585 - t959, -t850 * t599 + t853 * t600 - t957, -t850 * t577 + t853 * t584 - t958, t853 * t564 - t850 * t563 - pkin(5) * (t853 * t593 + t850 * t594), t661, -t990, t992, t660, t664, t685, -t850 * t568 + t853 * t570 - t959, -t850 * t569 + t853 * t571 - t958, -t850 * t580 + t853 * t581 + t957, t853 * t561 - t850 * t560 - pkin(5) * (t853 * t575 + t850 * t576); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t810, 0, t811, 0, t779, t880, t890, pkin(5) * t890, 0, 0, t876, 0, -t976, 0, -t991, t988, t985, pkin(5) * t985 + pkin(6) * t922 + t853 * t674, t659, -t638, t663, t658, -t989, t684, t853 * t605 + t850 * t607 + t644, t853 * t606 + t850 * t608 + t645, t853 * t630 + t850 * t631 - t667, t850 * t583 + t853 * t572 + pkin(5) * (-t850 * t625 + t853 * t626), t659, t663, t638, t684, t989, t658, t853 * t579 + t850 * t585 + t644, t853 * t599 + t850 * t600 - t667, t853 * t577 + t850 * t584 - t645, t850 * t564 + t853 * t563 + pkin(5) * (-t850 * t593 + t853 * t594), t659, t638, -t663, t658, -t989, t684, t853 * t568 + t850 * t570 + t644, t853 * t569 + t850 * t571 - t645, t853 * t580 + t850 * t581 + t667, t850 * t561 + t853 * t560 + pkin(5) * (-t850 * t575 + t853 * t576); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t819, t820, 0, 0, 0, 0, 0, 0, 0, t839, t702, t703, 0, -t675, t740, t722, t747, t739, t744, 0, t633, t632, t616, t590, t740, t747, -t722, 0, -t744, t739, t603, t595, t604, t566, t740, -t722, -t747, t739, t744, 0, t588, t587, t578, t562; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t855, 0, 0, -g(3), -t819, 0, 0, 0, -t797, 0, -t794, 0, t979, t767, t678, pkin(6) * t678, t710, -t683, t718, t709, -t717, t761, t607, t608, t631, t583, t710, t718, t683, t761, t717, t709, t585, t600, t584, t564, t710, t683, -t718, t709, -t717, t761, t570, t571, t581, t561; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t855, 0, qJDD(1), 0, g(3), 0, -t820, 0, 0, 0, t794, 0, -t797, 0, -t767, t979, t891, t674, t708, -t681, t714, t707, -t713, t760, t605, t606, t630, t572, t708, t714, t681, t760, t713, t707, t579, t599, t577, t563, t708, t681, -t714, t707, -t713, t760, t568, t569, t580, t560; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t819, t820, 0, 0, 0, 0, 0, 0, 0, t839, t702, t703, 0, -t675, t740, t722, t747, t739, t744, 0, t633, t632, t616, t590, t740, t747, -t722, 0, -t744, t739, t603, t595, t604, t566, t740, -t722, -t747, t739, t744, 0, t588, t587, t578, t562; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t839, 0, -t838, 0, 0, -g(3), t737, 0, t759, -t725, t754, t758, -t753, t777, t672, t673, t650, pkin(7) * t650, t759, t754, t725, t777, t753, t758, t617, t609, t618, t582, t759, t725, -t754, t758, -t753, t777, t602, t601, t589, t565; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t838, 0, t839, 0, g(3), 0, t738, 0, t818, -t799, -t926, -t818, -t918, -qJDD(3), t670, t671, 0, pkin(2) * t650, t818, -t926, t799, -qJDD(3), t918, -t818, t635, t778, t634, t586, t818, t799, t926, -t818, -t918, -qJDD(3), t611, t612, -t762, t567; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t839, -t737, -t738, 0, 0, t740, t722, t747, t739, t744, 0, t897, t898, t882, t913, t740, t747, -t722, 0, -t744, t739, t871, t883, t872, t867, t740, -t722, -t747, t739, t744, 0, t881, t885, t884, t886; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t784, t786, t806, -t830, t815, t830, 0, t720, t699, 0, t784, t806, -t786, t830, -t815, -t830, t944, t657, t642, -qJ(4) * t653, t784, -t786, -t806, -t830, t815, t830, t736, t615, t627, t592; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t829, t783, -t814, t785, t807, -t829, -t720, 0, -t908, 0, t829, -t814, -t783, -t829, -t807, t785, t643, t656, pkin(3) * t783, -pkin(3) * t653, t829, -t783, t814, t785, t807, -t829, t613, t701, t623, t574; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t818, t799, t926, t818, t918, qJDD(3), -t699, t908, 0, 0, -t818, t926, -t799, qJDD(3), -t918, t818, -t668 + t972, -t778, t834 - t870, t879, -t818, -t799, -t926, t818, t918, qJDD(3), t857 + t972, t862 + t973, t762, t967; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t784, t806, -t786, t830, -t815, -t830, 0, t668, -t653, 0, t784, -t786, -t806, -t830, t815, t830, t940, t856, t858, -t941; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t818, t926, -t799, qJDD(3), -t918, t818, -t668, 0, t666, 0, -t818, -t799, -t926, t818, t918, qJDD(3), t857, t862, pkin(4) * t926, -pkin(4) * t637; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t829, t814, t783, t829, t807, -t785, t653, -t666, 0, 0, -t829, t783, -t814, -t785, -t807, t829, t860 + t966, -pkin(4) * t783 + t939, pkin(4) * t798 - t863 + t971, pkin(4) * t629 + t942; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t784, -t786, -t806, -t830, t815, t830, 0, -t629, -t637, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t829, t783, -t814, -t785, -t807, t829, t629, 0, t636, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t818, t799, t926, -t818, -t918, -qJDD(3), t637, -t636, 0, 0;];
m_new_reg = t1;
