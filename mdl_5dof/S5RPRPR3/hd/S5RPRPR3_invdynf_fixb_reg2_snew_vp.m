% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRPR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:37
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRPR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR3_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR3_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR3_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:36:57
% EndTime: 2020-01-03 11:37:00
% DurationCPUTime: 2.44s
% Computational Cost: add. (8124->172), mult. (12134->252), div. (0->0), fcn. (7317->10), ass. (0->142)
t1159 = qJD(1) + qJD(3);
t1155 = t1159 ^ 2;
t1168 = sin(qJ(3));
t1156 = qJDD(1) + qJDD(3);
t1171 = cos(qJ(3));
t1185 = t1171 * t1156;
t1131 = t1168 * t1155 - t1185;
t1164 = sin(pkin(8));
t1166 = cos(pkin(8));
t1186 = t1168 * t1156;
t1177 = -t1171 * t1155 - t1186;
t1107 = t1166 * t1131 - t1164 * t1177;
t1169 = sin(qJ(1));
t1172 = cos(qJ(1));
t1198 = t1164 * t1131 + t1166 * t1177;
t1202 = t1169 * t1107 + t1172 * t1198;
t1201 = -t1172 * t1107 + t1169 * t1198;
t1163 = sin(pkin(9));
t1157 = t1163 ^ 2;
t1165 = cos(pkin(9));
t1158 = t1165 ^ 2;
t1184 = t1157 + t1158;
t1128 = t1184 * t1155;
t1187 = t1165 * t1159;
t1142 = -qJD(5) + t1187;
t1195 = t1142 ^ 2;
t1194 = 2 * qJD(4);
t1167 = sin(qJ(5));
t1193 = t1156 * t1167;
t1170 = cos(qJ(5));
t1192 = t1156 * t1170;
t1191 = t1157 * t1155;
t1190 = t1159 * t1167;
t1189 = t1159 * t1170;
t1188 = t1163 * t1156;
t1147 = -t1172 * g(2) - t1169 * g(3);
t1134 = qJDD(1) * pkin(1) + t1147;
t1146 = -t1169 * g(2) + t1172 * g(3);
t1173 = qJD(1) ^ 2;
t1135 = -t1173 * pkin(1) + t1146;
t1111 = t1164 * t1134 + t1166 * t1135;
t1109 = -t1173 * pkin(2) + t1111;
t1110 = t1166 * t1134 - t1164 * t1135;
t1176 = qJDD(1) * pkin(2) + t1110;
t1085 = t1171 * t1109 + t1168 * t1176;
t1148 = t1165 * t1156;
t1183 = t1148 - qJDD(5);
t1182 = t1142 * t1190;
t1081 = -t1155 * pkin(3) + t1156 * qJ(4) + t1085;
t1162 = -g(1) + qJDD(2);
t1071 = t1165 * t1081 + t1163 * t1162 + t1187 * t1194;
t1084 = -t1168 * t1109 + t1171 * t1176;
t1137 = -t1164 * qJDD(1) - t1166 * t1173;
t1138 = t1166 * qJDD(1) - t1164 * t1173;
t1181 = t1169 * t1137 + t1172 * t1138;
t1180 = t1167 * t1170 * t1191;
t1179 = -pkin(4) * t1165 - pkin(7) * t1163;
t1178 = t1172 * t1137 - t1169 * t1138;
t1078 = -t1156 * pkin(3) - t1155 * qJ(4) + qJDD(4) - t1084;
t1161 = t1170 ^ 2;
t1160 = t1167 ^ 2;
t1150 = t1165 * t1162;
t1141 = t1165 * t1155 * t1163;
t1140 = t1172 * qJDD(1) - t1169 * t1173;
t1139 = -t1169 * qJDD(1) - t1172 * t1173;
t1136 = t1163 * qJD(5) * t1190;
t1126 = t1184 * t1156;
t1123 = t1179 * t1159;
t1122 = t1165 * t1128;
t1121 = t1163 * t1128;
t1120 = (t1160 + t1161) * t1191;
t1119 = -t1160 * t1191 - t1195;
t1118 = -t1180 - t1183;
t1117 = -t1180 + t1183;
t1116 = -t1161 * t1191 - t1195;
t1115 = -t1171 * t1122 - t1165 * t1186;
t1114 = t1171 * t1121 + t1163 * t1186;
t1113 = -t1168 * t1122 + t1165 * t1185;
t1112 = t1168 * t1121 - t1163 * t1185;
t1104 = t1171 * t1126 - t1168 * t1128;
t1103 = t1168 * t1126 + t1171 * t1128;
t1099 = t1136 + (t1182 - t1192) * t1163;
t1098 = -t1136 + (t1182 + t1192) * t1163;
t1097 = (-t1193 + (-qJD(5) - t1142) * t1189) * t1163;
t1096 = (t1193 + (qJD(5) - t1142) * t1189) * t1163;
t1095 = -t1167 * t1118 + t1170 * t1119;
t1094 = t1170 * t1118 + t1167 * t1119;
t1093 = -t1167 * t1116 + t1170 * t1117;
t1092 = t1170 * t1116 + t1167 * t1117;
t1091 = -t1164 * t1113 + t1166 * t1115;
t1090 = -t1164 * t1112 + t1166 * t1114;
t1089 = t1166 * t1113 + t1164 * t1115;
t1088 = t1166 * t1112 + t1164 * t1114;
t1087 = -t1164 * t1110 + t1166 * t1111;
t1086 = t1166 * t1110 + t1164 * t1111;
t1083 = -t1164 * t1103 + t1166 * t1104;
t1082 = t1166 * t1103 + t1164 * t1104;
t1080 = t1170 * t1097 - t1167 * t1099;
t1079 = t1167 * t1097 + t1170 * t1099;
t1076 = t1165 * t1095 + t1163 * t1096;
t1075 = t1163 * t1095 - t1165 * t1096;
t1074 = t1179 * t1156 + t1078;
t1073 = t1165 * t1093 + t1163 * t1098;
t1072 = t1163 * t1093 - t1165 * t1098;
t1070 = t1150 + (-0.2e1 * qJD(4) * t1159 - t1081) * t1163;
t1069 = t1165 * t1080 - t1163 * t1120;
t1068 = t1163 * t1080 + t1165 * t1120;
t1067 = t1123 * t1187 + t1071;
t1066 = -t1150 + (t1081 + (t1194 + t1123) * t1159) * t1163;
t1065 = t1171 * t1076 + t1168 * t1094;
t1064 = t1168 * t1076 - t1171 * t1094;
t1063 = -t1168 * t1084 + t1171 * t1085;
t1062 = t1171 * t1084 + t1168 * t1085;
t1061 = t1171 * t1073 + t1168 * t1092;
t1060 = t1168 * t1073 - t1171 * t1092;
t1059 = t1171 * t1069 + t1168 * t1079;
t1058 = t1168 * t1069 - t1171 * t1079;
t1057 = -t1163 * t1070 + t1165 * t1071;
t1056 = t1165 * t1070 + t1163 * t1071;
t1055 = t1170 * t1067 + t1167 * t1074;
t1054 = -t1167 * t1067 + t1170 * t1074;
t1053 = -t1164 * t1064 + t1166 * t1065;
t1052 = t1166 * t1064 + t1164 * t1065;
t1051 = t1171 * t1057 + t1168 * t1078;
t1050 = t1168 * t1057 - t1171 * t1078;
t1049 = -t1164 * t1062 + t1166 * t1063;
t1048 = t1166 * t1062 + t1164 * t1063;
t1047 = -t1164 * t1060 + t1166 * t1061;
t1046 = t1166 * t1060 + t1164 * t1061;
t1045 = -t1164 * t1058 + t1166 * t1059;
t1044 = t1166 * t1058 + t1164 * t1059;
t1043 = -t1167 * t1054 + t1170 * t1055;
t1042 = t1170 * t1054 + t1167 * t1055;
t1041 = t1165 * t1043 + t1163 * t1066;
t1040 = t1163 * t1043 - t1165 * t1066;
t1039 = -t1164 * t1050 + t1166 * t1051;
t1038 = t1166 * t1050 + t1164 * t1051;
t1037 = t1171 * t1041 + t1168 * t1042;
t1036 = t1168 * t1041 - t1171 * t1042;
t1035 = -t1164 * t1036 + t1166 * t1037;
t1034 = t1166 * t1036 + t1164 * t1037;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1162, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1162, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1056, 0, 0, 0, 0, 0, 0, t1075, t1072, t1068, t1040; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1140, t1139, 0, t1169 * t1146 + t1172 * t1147, 0, 0, 0, 0, 0, 0, t1181, t1178, 0, t1172 * t1086 + t1169 * t1087, 0, 0, 0, 0, 0, 0, t1201, t1202, 0, t1172 * t1048 + t1169 * t1049, 0, 0, 0, 0, 0, 0, t1172 * t1089 + t1169 * t1091, t1172 * t1088 + t1169 * t1090, t1172 * t1082 + t1169 * t1083, t1172 * t1038 + t1169 * t1039, 0, 0, 0, 0, 0, 0, t1172 * t1052 + t1169 * t1053, t1172 * t1046 + t1169 * t1047, t1172 * t1044 + t1169 * t1045, t1172 * t1034 + t1169 * t1035; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1139, t1140, 0, -t1172 * t1146 + t1169 * t1147, 0, 0, 0, 0, 0, 0, -t1178, t1181, 0, t1169 * t1086 - t1172 * t1087, 0, 0, 0, 0, 0, 0, -t1202, t1201, 0, t1169 * t1048 - t1172 * t1049, 0, 0, 0, 0, 0, 0, t1169 * t1089 - t1172 * t1091, t1169 * t1088 - t1172 * t1090, t1169 * t1082 - t1172 * t1083, t1169 * t1038 - t1172 * t1039, 0, 0, 0, 0, 0, 0, t1169 * t1052 - t1172 * t1053, t1169 * t1046 - t1172 * t1047, t1169 * t1044 - t1172 * t1045, t1169 * t1034 - t1172 * t1035; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1173, -qJDD(1), 0, t1146, 0, 0, 0, 0, 0, 0, t1137, -t1138, 0, t1087, 0, 0, 0, 0, 0, 0, t1198, t1107, 0, t1049, 0, 0, 0, 0, 0, 0, t1091, t1090, t1083, t1039, 0, 0, 0, 0, 0, 0, t1053, t1047, t1045, t1035; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1173, 0, t1147, 0, 0, 0, 0, 0, 0, t1138, t1137, 0, t1086, 0, 0, 0, 0, 0, 0, -t1107, t1198, 0, t1048, 0, 0, 0, 0, 0, 0, t1089, t1088, t1082, t1038, 0, 0, 0, 0, 0, 0, t1052, t1046, t1044, t1034; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1162, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1162, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1056, 0, 0, 0, 0, 0, 0, t1075, t1072, t1068, t1040; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1173, -qJDD(1), 0, t1111, 0, 0, 0, 0, 0, 0, t1177, t1131, 0, t1063, 0, 0, 0, 0, 0, 0, t1115, t1114, t1104, t1051, 0, 0, 0, 0, 0, 0, t1065, t1061, t1059, t1037; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1173, 0, t1110, 0, 0, 0, 0, 0, 0, -t1131, t1177, 0, t1062, 0, 0, 0, 0, 0, 0, t1113, t1112, t1103, t1050, 0, 0, 0, 0, 0, 0, t1064, t1060, t1058, t1036; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1162, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1162, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1056, 0, 0, 0, 0, 0, 0, t1075, t1072, t1068, t1040; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1155, -t1156, 0, t1085, 0, 0, 0, 0, 0, 0, -t1122, t1121, t1126, t1057, 0, 0, 0, 0, 0, 0, t1076, t1073, t1069, t1041; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1156, -t1155, 0, t1084, 0, 0, 0, 0, 0, 0, t1148, -t1188, t1128, -t1078, 0, 0, 0, 0, 0, 0, -t1094, -t1092, -t1079, -t1042; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1162, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1056, 0, 0, 0, 0, 0, 0, t1075, t1072, t1068, t1040; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1158 * t1155, t1141, t1148, t1071, 0, 0, 0, 0, 0, 0, t1095, t1093, t1080, t1043; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1141, -t1191, -t1188, t1070, 0, 0, 0, 0, 0, 0, -t1096, -t1098, t1120, -t1066; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1148, t1188, -t1128, t1078, 0, 0, 0, 0, 0, 0, t1094, t1092, t1079, t1042; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1119, t1117, t1097, t1055; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1118, t1116, t1099, t1054; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1096, t1098, -t1120, t1066;];
f_new_reg = t1;
