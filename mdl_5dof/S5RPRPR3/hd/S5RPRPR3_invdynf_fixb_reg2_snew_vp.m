% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRPR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:52
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRPR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR3_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR3_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR3_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:52:04
% EndTime: 2019-12-05 17:52:07
% DurationCPUTime: 2.45s
% Computational Cost: add. (8124->172), mult. (12134->252), div. (0->0), fcn. (7317->10), ass. (0->142)
t1141 = qJD(1) + qJD(3);
t1137 = t1141 ^ 2;
t1150 = sin(qJ(3));
t1138 = qJDD(1) + qJDD(3);
t1153 = cos(qJ(3));
t1167 = t1153 * t1138;
t1112 = t1150 * t1137 - t1167;
t1146 = sin(pkin(8));
t1148 = cos(pkin(8));
t1168 = t1150 * t1138;
t1159 = -t1153 * t1137 - t1168;
t1088 = t1148 * t1112 - t1146 * t1159;
t1151 = sin(qJ(1));
t1154 = cos(qJ(1));
t1180 = t1146 * t1112 + t1148 * t1159;
t1184 = t1151 * t1088 + t1154 * t1180;
t1183 = t1154 * t1088 - t1151 * t1180;
t1145 = sin(pkin(9));
t1139 = t1145 ^ 2;
t1147 = cos(pkin(9));
t1140 = t1147 ^ 2;
t1166 = t1139 + t1140;
t1109 = t1166 * t1137;
t1169 = t1147 * t1141;
t1122 = -qJD(5) + t1169;
t1177 = t1122 ^ 2;
t1176 = 2 * qJD(4);
t1149 = sin(qJ(5));
t1175 = t1138 * t1149;
t1152 = cos(qJ(5));
t1174 = t1138 * t1152;
t1173 = t1139 * t1137;
t1172 = t1141 * t1149;
t1171 = t1141 * t1152;
t1170 = t1145 * t1138;
t1127 = t1154 * g(2) + t1151 * g(3);
t1114 = qJDD(1) * pkin(1) + t1127;
t1126 = t1151 * g(2) - t1154 * g(3);
t1155 = qJD(1) ^ 2;
t1115 = -t1155 * pkin(1) + t1126;
t1092 = t1146 * t1114 + t1148 * t1115;
t1090 = -t1155 * pkin(2) + t1092;
t1091 = t1148 * t1114 - t1146 * t1115;
t1158 = qJDD(1) * pkin(2) + t1091;
t1066 = t1153 * t1090 + t1150 * t1158;
t1128 = t1147 * t1138;
t1165 = t1128 - qJDD(5);
t1164 = t1122 * t1172;
t1062 = -t1137 * pkin(3) + t1138 * qJ(4) + t1066;
t1144 = -g(1) + qJDD(2);
t1052 = t1147 * t1062 + t1145 * t1144 + t1169 * t1176;
t1065 = -t1150 * t1090 + t1153 * t1158;
t1163 = t1149 * t1152 * t1173;
t1162 = -pkin(4) * t1147 - pkin(7) * t1145;
t1117 = -t1146 * qJDD(1) - t1148 * t1155;
t1118 = t1148 * qJDD(1) - t1146 * t1155;
t1161 = t1154 * t1117 - t1151 * t1118;
t1160 = -t1151 * t1117 - t1154 * t1118;
t1059 = -t1138 * pkin(3) - t1137 * qJ(4) + qJDD(4) - t1065;
t1143 = t1152 ^ 2;
t1142 = t1149 ^ 2;
t1130 = t1147 * t1144;
t1121 = t1147 * t1137 * t1145;
t1120 = -t1154 * qJDD(1) + t1151 * t1155;
t1119 = t1151 * qJDD(1) + t1154 * t1155;
t1116 = t1145 * qJD(5) * t1172;
t1107 = t1166 * t1138;
t1104 = t1162 * t1141;
t1103 = t1147 * t1109;
t1102 = t1145 * t1109;
t1101 = (t1142 + t1143) * t1173;
t1100 = -t1142 * t1173 - t1177;
t1099 = -t1163 - t1165;
t1098 = -t1163 + t1165;
t1097 = -t1143 * t1173 - t1177;
t1096 = -t1153 * t1103 - t1147 * t1168;
t1095 = t1153 * t1102 + t1145 * t1168;
t1094 = -t1150 * t1103 + t1147 * t1167;
t1093 = t1150 * t1102 - t1145 * t1167;
t1085 = t1153 * t1107 - t1150 * t1109;
t1084 = t1150 * t1107 + t1153 * t1109;
t1080 = t1116 + (t1164 - t1174) * t1145;
t1079 = -t1116 + (t1164 + t1174) * t1145;
t1078 = (-t1175 + (-qJD(5) - t1122) * t1171) * t1145;
t1077 = (t1175 + (qJD(5) - t1122) * t1171) * t1145;
t1076 = -t1149 * t1099 + t1152 * t1100;
t1075 = t1152 * t1099 + t1149 * t1100;
t1074 = -t1149 * t1097 + t1152 * t1098;
t1073 = t1152 * t1097 + t1149 * t1098;
t1072 = -t1146 * t1094 + t1148 * t1096;
t1071 = -t1146 * t1093 + t1148 * t1095;
t1070 = t1148 * t1094 + t1146 * t1096;
t1069 = t1148 * t1093 + t1146 * t1095;
t1068 = -t1146 * t1091 + t1148 * t1092;
t1067 = t1148 * t1091 + t1146 * t1092;
t1064 = -t1146 * t1084 + t1148 * t1085;
t1063 = t1148 * t1084 + t1146 * t1085;
t1061 = t1152 * t1078 - t1149 * t1080;
t1060 = t1149 * t1078 + t1152 * t1080;
t1057 = t1147 * t1076 + t1145 * t1077;
t1056 = t1145 * t1076 - t1147 * t1077;
t1055 = t1162 * t1138 + t1059;
t1054 = t1147 * t1074 + t1145 * t1079;
t1053 = t1145 * t1074 - t1147 * t1079;
t1051 = t1130 + (-0.2e1 * qJD(4) * t1141 - t1062) * t1145;
t1050 = t1147 * t1061 - t1145 * t1101;
t1049 = t1145 * t1061 + t1147 * t1101;
t1048 = t1104 * t1169 + t1052;
t1047 = -t1130 + (t1062 + (t1176 + t1104) * t1141) * t1145;
t1046 = t1153 * t1057 + t1150 * t1075;
t1045 = t1150 * t1057 - t1153 * t1075;
t1044 = -t1150 * t1065 + t1153 * t1066;
t1043 = t1153 * t1065 + t1150 * t1066;
t1042 = t1153 * t1054 + t1150 * t1073;
t1041 = t1150 * t1054 - t1153 * t1073;
t1040 = t1153 * t1050 + t1150 * t1060;
t1039 = t1150 * t1050 - t1153 * t1060;
t1038 = -t1145 * t1051 + t1147 * t1052;
t1037 = t1147 * t1051 + t1145 * t1052;
t1036 = t1152 * t1048 + t1149 * t1055;
t1035 = -t1149 * t1048 + t1152 * t1055;
t1034 = -t1146 * t1045 + t1148 * t1046;
t1033 = t1148 * t1045 + t1146 * t1046;
t1032 = t1153 * t1038 + t1150 * t1059;
t1031 = t1150 * t1038 - t1153 * t1059;
t1030 = -t1146 * t1043 + t1148 * t1044;
t1029 = t1148 * t1043 + t1146 * t1044;
t1028 = -t1146 * t1041 + t1148 * t1042;
t1027 = t1148 * t1041 + t1146 * t1042;
t1026 = -t1146 * t1039 + t1148 * t1040;
t1025 = t1148 * t1039 + t1146 * t1040;
t1024 = -t1149 * t1035 + t1152 * t1036;
t1023 = t1152 * t1035 + t1149 * t1036;
t1022 = t1147 * t1024 + t1145 * t1047;
t1021 = t1145 * t1024 - t1147 * t1047;
t1020 = -t1146 * t1031 + t1148 * t1032;
t1019 = t1148 * t1031 + t1146 * t1032;
t1018 = t1153 * t1022 + t1150 * t1023;
t1017 = t1150 * t1022 - t1153 * t1023;
t1016 = -t1146 * t1017 + t1148 * t1018;
t1015 = t1148 * t1017 + t1146 * t1018;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1144, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1144, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1037, 0, 0, 0, 0, 0, 0, t1056, t1053, t1049, t1021; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1120, t1119, 0, -t1151 * t1126 - t1154 * t1127, 0, 0, 0, 0, 0, 0, t1160, -t1161, 0, -t1154 * t1067 - t1151 * t1068, 0, 0, 0, 0, 0, 0, t1183, -t1184, 0, -t1154 * t1029 - t1151 * t1030, 0, 0, 0, 0, 0, 0, -t1154 * t1070 - t1151 * t1072, -t1154 * t1069 - t1151 * t1071, -t1154 * t1063 - t1151 * t1064, -t1154 * t1019 - t1151 * t1020, 0, 0, 0, 0, 0, 0, -t1154 * t1033 - t1151 * t1034, -t1154 * t1027 - t1151 * t1028, -t1154 * t1025 - t1151 * t1026, -t1154 * t1015 - t1151 * t1016; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1119, t1120, 0, t1154 * t1126 - t1151 * t1127, 0, 0, 0, 0, 0, 0, t1161, t1160, 0, -t1151 * t1067 + t1154 * t1068, 0, 0, 0, 0, 0, 0, t1184, t1183, 0, -t1151 * t1029 + t1154 * t1030, 0, 0, 0, 0, 0, 0, -t1151 * t1070 + t1154 * t1072, -t1151 * t1069 + t1154 * t1071, -t1151 * t1063 + t1154 * t1064, -t1151 * t1019 + t1154 * t1020, 0, 0, 0, 0, 0, 0, -t1151 * t1033 + t1154 * t1034, -t1151 * t1027 + t1154 * t1028, -t1151 * t1025 + t1154 * t1026, -t1151 * t1015 + t1154 * t1016; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1155, -qJDD(1), 0, t1126, 0, 0, 0, 0, 0, 0, t1117, -t1118, 0, t1068, 0, 0, 0, 0, 0, 0, t1180, t1088, 0, t1030, 0, 0, 0, 0, 0, 0, t1072, t1071, t1064, t1020, 0, 0, 0, 0, 0, 0, t1034, t1028, t1026, t1016; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1155, 0, t1127, 0, 0, 0, 0, 0, 0, t1118, t1117, 0, t1067, 0, 0, 0, 0, 0, 0, -t1088, t1180, 0, t1029, 0, 0, 0, 0, 0, 0, t1070, t1069, t1063, t1019, 0, 0, 0, 0, 0, 0, t1033, t1027, t1025, t1015; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1144, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1144, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1037, 0, 0, 0, 0, 0, 0, t1056, t1053, t1049, t1021; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1155, -qJDD(1), 0, t1092, 0, 0, 0, 0, 0, 0, t1159, t1112, 0, t1044, 0, 0, 0, 0, 0, 0, t1096, t1095, t1085, t1032, 0, 0, 0, 0, 0, 0, t1046, t1042, t1040, t1018; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1155, 0, t1091, 0, 0, 0, 0, 0, 0, -t1112, t1159, 0, t1043, 0, 0, 0, 0, 0, 0, t1094, t1093, t1084, t1031, 0, 0, 0, 0, 0, 0, t1045, t1041, t1039, t1017; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1144, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1144, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1037, 0, 0, 0, 0, 0, 0, t1056, t1053, t1049, t1021; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1137, -t1138, 0, t1066, 0, 0, 0, 0, 0, 0, -t1103, t1102, t1107, t1038, 0, 0, 0, 0, 0, 0, t1057, t1054, t1050, t1022; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1138, -t1137, 0, t1065, 0, 0, 0, 0, 0, 0, t1128, -t1170, t1109, -t1059, 0, 0, 0, 0, 0, 0, -t1075, -t1073, -t1060, -t1023; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1144, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1037, 0, 0, 0, 0, 0, 0, t1056, t1053, t1049, t1021; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1140 * t1137, t1121, t1128, t1052, 0, 0, 0, 0, 0, 0, t1076, t1074, t1061, t1024; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1121, -t1173, -t1170, t1051, 0, 0, 0, 0, 0, 0, -t1077, -t1079, t1101, -t1047; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1128, t1170, -t1109, t1059, 0, 0, 0, 0, 0, 0, t1075, t1073, t1060, t1023; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1100, t1098, t1078, t1036; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1099, t1097, t1080, t1035; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1077, t1079, -t1101, t1047;];
f_new_reg = t1;
