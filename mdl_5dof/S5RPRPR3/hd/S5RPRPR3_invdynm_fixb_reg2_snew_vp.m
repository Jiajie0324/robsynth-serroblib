% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRPR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:52
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRPR3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR3_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR3_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR3_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR3_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:51:51
% EndTime: 2019-12-05 17:52:04
% DurationCPUTime: 13.95s
% Computational Cost: add. (51409->500), mult. (76171->682), div. (0->0), fcn. (45228->10), ass. (0->346)
t890 = qJD(1) + qJD(3);
t886 = t890 ^ 2;
t902 = cos(qJ(3));
t887 = qJDD(1) + qJDD(3);
t899 = sin(qJ(3));
t964 = t899 * t887;
t852 = t902 * t886 + t964;
t957 = t902 * t887;
t855 = t899 * t886 - t957;
t895 = sin(pkin(8));
t897 = cos(pkin(8));
t800 = t895 * t852 + t897 * t855;
t893 = g(1) - qJDD(2);
t822 = pkin(6) * t852 - t902 * t893;
t996 = pkin(6) * t855 - t899 * t893;
t1002 = qJ(2) * t800 + t895 * t822 + t897 * t996;
t796 = t897 * t852 - t895 * t855;
t726 = qJ(2) * t796 + t897 * t822 - t895 * t996;
t900 = sin(qJ(1));
t903 = cos(qJ(1));
t741 = t900 * t796 + t903 * t800;
t1014 = pkin(5) * t741 + t1002 * t903 + t900 * t726;
t1003 = t903 * t796 - t900 * t800;
t1013 = pkin(5) * t1003 - t1002 * t900 + t903 * t726;
t875 = t903 * g(2) + t900 * g(3);
t859 = qJDD(1) * pkin(1) + t875;
t874 = t900 * g(2) - t903 * g(3);
t904 = qJD(1) ^ 2;
t860 = -t904 * pkin(1) + t874;
t807 = t895 * t859 + t897 * t860;
t803 = -t904 * pkin(2) + t807;
t925 = t897 * t859 - t895 * t860;
t912 = qJDD(1) * pkin(2) + t925;
t745 = t899 * t803 - t902 * t912;
t746 = t902 * t803 + t899 * t912;
t944 = t899 * t745 + t902 * t746;
t681 = t902 * t745 - t899 * t746;
t969 = t897 * t681;
t630 = -t895 * t944 + t969;
t971 = t895 * t681;
t997 = t897 * t944 + t971;
t1011 = t900 * t630 + t903 * t997;
t1010 = t903 * t630 - t900 * t997;
t894 = sin(pkin(9));
t889 = t894 ^ 2;
t896 = cos(pkin(9));
t906 = t896 ^ 2;
t841 = (t889 + t906) * t896 * t886;
t947 = t896 * t957;
t810 = -t899 * t841 + t947;
t812 = t902 * t841 + t896 * t964;
t754 = t897 * t810 - t895 * t812;
t756 = t895 * t810 + t897 * t812;
t1005 = t903 * t754 - t900 * t756;
t1004 = t900 * t754 + t903 * t756;
t943 = t897 * t807 - t895 * t925;
t750 = -t895 * t807 - t897 * t925;
t955 = t903 * t750;
t999 = -t900 * t943 + t955;
t962 = t900 * t750;
t998 = t903 * t943 + t962;
t863 = t895 * qJDD(1) + t897 * t904;
t864 = t897 * qJDD(1) - t895 * t904;
t815 = t900 * t863 - t903 * t864;
t833 = qJ(2) * t863 - t897 * t893;
t926 = -qJ(2) * t864 - t895 * t893;
t995 = pkin(5) * t815 + t900 * t833 + t903 * t926;
t972 = t894 * t896;
t817 = t852 * t972;
t867 = t886 * t972;
t818 = -t899 * t867 + t894 * t947;
t762 = t897 * t817 + t895 * t818;
t765 = t895 * t817 - t897 * t818;
t994 = t903 * t762 - t900 * t765;
t993 = t900 * t762 + t903 * t765;
t924 = t903 * t863 + t900 * t864;
t992 = pkin(5) * t924 + t903 * t833 - t900 * t926;
t898 = sin(qJ(5));
t901 = cos(qJ(5));
t825 = (qJD(5) * t890 * t901 + t887 * t898) * t894;
t871 = t896 * t890 - qJD(5);
t953 = t871 * t890 * t894;
t838 = t901 * t953;
t785 = t838 - t825;
t989 = t898 * t785;
t881 = t896 * t893;
t736 = -t886 * pkin(3) + t887 * qJ(4) + t746;
t982 = 2 * qJD(4);
t941 = t890 * t982 + t736;
t711 = t894 * t941 + t881;
t973 = t894 * t893;
t712 = t896 * t941 - t973;
t664 = t894 * t711 + t896 * t712;
t975 = t890 * t898;
t950 = t894 * t975;
t862 = qJD(5) * t950;
t952 = t871 * t975;
t977 = t887 * t901;
t787 = t894 * (t952 + t977) - t862;
t868 = t871 ^ 2;
t981 = pkin(1) * t893;
t980 = pkin(4) * t894;
t979 = pkin(4) * t896;
t976 = t889 * t886;
t731 = -t887 * pkin(3) - t886 * qJ(4) + qJDD(4) + t745;
t727 = t894 * t731;
t970 = t896 * t887;
t869 = -qJDD(5) + t970;
t974 = t894 * t869;
t878 = t894 * t887;
t728 = t896 * t731;
t933 = -pkin(7) * t894 - t979;
t921 = t736 + (t933 * t890 + t982) * t890;
t694 = t894 * t921 + t881;
t968 = t898 * t694;
t951 = t886 * t898 * t901;
t858 = t889 * t951;
t823 = -t858 + t869;
t967 = t898 * t823;
t824 = -t858 - t869;
t966 = t898 * t824;
t965 = t899 * t731;
t961 = t901 * t694;
t960 = t901 * t823;
t959 = t901 * t824;
t958 = t902 * t731;
t954 = -pkin(3) * t731 + qJ(4) * t664;
t892 = t901 ^ 2;
t949 = t892 * t976;
t948 = t894 * t970;
t946 = pkin(3) * t970 - qJ(4) * t841 - t728;
t634 = t899 * t664 - t958;
t945 = pkin(2) * t634 + t954;
t695 = t896 * t921 - t973;
t715 = t887 * t933 + t731;
t649 = t898 * t695 - t901 * t715;
t650 = t901 * t695 + t898 * t715;
t619 = t898 * t649 + t901 * t650;
t888 = t894 * t889;
t940 = t888 * t951;
t939 = t871 * t950;
t814 = -t949 - t868;
t767 = t901 * t814 + t967;
t643 = -pkin(4) * t767 + t650;
t671 = -pkin(7) * t767 + t961;
t768 = -t898 * t814 + t960;
t714 = t896 * t768 + t787 * t894;
t938 = -pkin(3) * t767 + qJ(4) * t714 + t896 * t643 + t894 * t671;
t891 = t898 ^ 2;
t870 = t891 * t976;
t828 = -t870 - t868;
t774 = t898 * t828 + t959;
t645 = -pkin(4) * t774 + t649;
t673 = -pkin(7) * t774 + t968;
t777 = t901 * t828 - t966;
t722 = t896 * t777 - t894 * t785;
t937 = -pkin(3) * t774 + qJ(4) * t722 + t896 * t645 + t894 * t673;
t877 = t889 * t887;
t879 = t906 * t887;
t848 = t879 + t877;
t880 = t906 * t886;
t850 = t880 + t976;
t936 = pkin(3) * t850 + qJ(4) * t848 + t664;
t935 = pkin(2) * t810 + t946;
t934 = -pkin(4) * t694 + pkin(7) * t619;
t865 = t900 * qJDD(1) + t903 * t904;
t932 = pkin(5) * t865 - t903 * g(1);
t931 = -pkin(2) * t855 - t745;
t930 = t896 * t858;
t675 = t899 * t714 - t902 * t767;
t929 = pkin(2) * t675 + t938;
t686 = t899 * t722 - t902 * t774;
t928 = pkin(2) * t686 + t937;
t792 = t899 * t848 + t902 * t850;
t927 = pkin(2) * t792 + t936;
t618 = -t901 * t649 + t898 * t650;
t663 = t896 * t711 - t894 * t712;
t923 = t903 * t874 - t900 * t875;
t922 = -t900 * t874 - t903 * t875;
t840 = (t894 * t906 + t888) * t886;
t920 = -pkin(3) * t878 + qJ(4) * t840 + t727;
t808 = t899 * t840 - t894 * t957;
t917 = pkin(2) * t808 + t920;
t784 = t838 + t825;
t786 = -t862 + (-t952 + t977) * t894;
t732 = -t898 * t784 - t901 * t786;
t611 = -pkin(7) * t732 - t618;
t734 = -t901 * t784 + t898 * t786;
t834 = t870 + t949;
t701 = t896 * t734 - t894 * t834;
t916 = qJ(4) * t701 + t894 * t611 + (-pkin(3) - t979) * t732;
t915 = -pkin(4) * t787 + pkin(7) * t768 + t968;
t914 = pkin(4) * t785 + pkin(7) * t777 - t961;
t666 = t899 * t701 - t902 * t732;
t913 = pkin(2) * t666 + t916;
t911 = pkin(4) * t834 + pkin(7) * t734 + t619;
t605 = t896 * t619 + t894 * t694;
t910 = qJ(4) * t605 + (-pkin(3) + t933) * t618;
t591 = t899 * t605 - t902 * t618;
t909 = pkin(2) * t591 + t910;
t908 = -pkin(2) * t852 - t746;
t866 = -t903 * qJDD(1) + t900 * t904;
t861 = 0.2e1 * t948;
t856 = t896 * t869;
t851 = -t880 + t976;
t849 = t879 - t877;
t844 = -pkin(5) * t866 + t900 * g(1);
t835 = -t870 + t949;
t829 = t868 - t949;
t827 = t870 - t868;
t826 = t901 * t878 - t862;
t811 = t902 * t840 + t894 * t964;
t795 = t902 * t849 + t899 * t851;
t794 = t902 * t848 - t899 * t850;
t793 = t899 * t849 - t902 * t851;
t790 = (-t891 - t892) * t953;
t783 = pkin(1) * t864 + t925;
t782 = -pkin(1) * t863 - t807;
t781 = t898 * t826 - t892 * t953;
t780 = -t901 * t825 - t891 * t953;
t779 = (t826 + t939) * t901;
t776 = t901 * t827 + t967;
t775 = -t898 * t829 + t959;
t773 = t898 * t827 - t960;
t772 = t901 * t829 + t966;
t770 = -t899 * t790 - t902 * t974;
t769 = t902 * t790 - t899 * t974;
t761 = t896 * t779 + t940;
t760 = -t896 * t989 - t940;
t759 = t894 * t779 - t930;
t758 = -t894 * t989 + t930;
t755 = -t895 * t808 + t897 * t811;
t752 = t897 * t808 + t895 * t811;
t747 = pkin(1) * t750;
t744 = qJ(2) * t943 + t981;
t740 = -t895 * t793 + t897 * t795;
t739 = -t895 * t792 + t897 * t794;
t738 = t897 * t793 + t895 * t795;
t737 = t897 * t792 + t895 * t794;
t735 = t901 * t785 - t898 * t787;
t733 = t901 * t787 + t989;
t721 = t896 * t776 - t894 * t784;
t720 = t896 * t775 + t894 * t786;
t719 = t894 * t777 + t896 * t785;
t718 = t894 * t776 + t896 * t784;
t717 = t894 * t775 - t896 * t786;
t713 = t894 * t768 - t787 * t896;
t706 = t902 * t761 + t899 * t781;
t705 = t902 * t760 + t899 * t780;
t704 = t899 * t761 - t902 * t781;
t703 = t899 * t760 - t902 * t780;
t702 = t896 * t735 + t894 * t835;
t700 = t894 * t735 - t896 * t835;
t699 = t894 * t734 + t896 * t834;
t697 = -t895 * t769 + t897 * t770;
t696 = t897 * t769 + t895 * t770;
t693 = -pkin(1) * t800 + t931;
t692 = -pkin(1) * t796 + t908;
t691 = -t900 * t752 + t903 * t755;
t690 = -t903 * t752 - t900 * t755;
t689 = t902 * t722 + t899 * t774;
t688 = t902 * t721 + t899 * t773;
t687 = t902 * t720 + t899 * t772;
t685 = t899 * t721 - t902 * t773;
t684 = t899 * t720 - t902 * t772;
t678 = pkin(2) * t681;
t677 = pkin(2) * t893 + pkin(6) * t944;
t676 = t902 * t714 + t899 * t767;
t669 = t902 * t702 + t899 * t733;
t668 = t902 * t701 + t899 * t732;
t667 = t899 * t702 - t902 * t733;
t660 = pkin(1) * t754 + t935;
t659 = pkin(1) * t752 + t917;
t658 = -t895 * t704 + t897 * t706;
t657 = -t895 * t703 + t897 * t705;
t656 = t897 * t704 + t895 * t706;
t655 = t897 * t703 + t895 * t705;
t654 = -pkin(6) * t808 - t899 * t712 + t896 * t958;
t653 = -pkin(6) * t810 - t899 * t711 + t894 * t958;
t652 = pkin(6) * t811 + t902 * t712 + t896 * t965;
t651 = -pkin(6) * t812 + t902 * t711 + t894 * t965;
t647 = -pkin(6) * t792 + t902 * t663;
t646 = pkin(6) * t794 + t899 * t663;
t641 = -t895 * t686 + t897 * t689;
t640 = -t895 * t685 + t897 * t688;
t639 = -t895 * t684 + t897 * t687;
t638 = t897 * t686 + t895 * t689;
t637 = t897 * t685 + t895 * t688;
t636 = t897 * t684 + t895 * t687;
t635 = t902 * t664 + t965;
t632 = -pkin(3) * t719 - t914;
t627 = -pkin(3) * t713 - t915;
t626 = -t895 * t675 + t897 * t676;
t625 = t897 * t675 + t895 * t676;
t624 = pkin(1) * t737 + t927;
t623 = -t895 * t667 + t897 * t669;
t622 = -t895 * t666 + t897 * t668;
t621 = t897 * t667 + t895 * t669;
t620 = t897 * t666 + t895 * t668;
t617 = -pkin(1) * t630 - t678;
t615 = -qJ(2) * t752 - t895 * t652 + t897 * t654;
t614 = -qJ(2) * t754 - t895 * t651 + t897 * t653;
t613 = qJ(2) * t755 + t897 * t652 + t895 * t654;
t612 = -qJ(2) * t756 + t897 * t651 + t895 * t653;
t610 = -qJ(4) * t719 - t894 * t645 + t896 * t673;
t608 = -qJ(4) * t713 - t894 * t643 + t896 * t671;
t607 = -qJ(2) * t737 - t895 * t646 + t897 * t647;
t606 = qJ(2) * t739 + t897 * t646 + t895 * t647;
t604 = t894 * t619 - t896 * t694;
t602 = -t895 * t634 + t897 * t635;
t601 = t897 * t634 + t895 * t635;
t600 = pkin(6) * t969 + qJ(2) * t630 - t895 * t677;
t599 = pkin(6) * t971 + qJ(2) * t997 + t897 * t677 + t981;
t598 = -pkin(3) * t699 - t911;
t597 = -pkin(6) * t634 - (pkin(3) * t899 - qJ(4) * t902) * t663;
t596 = -qJ(4) * t699 + t896 * t611 + t732 * t980;
t595 = pkin(6) * t635 - (-pkin(3) * t902 - qJ(4) * t899 - pkin(2)) * t663;
t594 = -pkin(6) * t686 + t902 * t610 - t899 * t632;
t593 = pkin(1) * t638 + t928;
t592 = t902 * t605 + t899 * t618;
t589 = -pkin(6) * t675 + t902 * t608 - t899 * t627;
t588 = -pkin(2) * t719 + pkin(6) * t689 + t899 * t610 + t902 * t632;
t587 = pkin(1) * t625 + t929;
t586 = -pkin(2) * t713 + pkin(6) * t676 + t899 * t608 + t902 * t627;
t585 = -pkin(3) * t604 - t934;
t584 = pkin(1) * t601 + t945;
t583 = pkin(1) * t620 + t913;
t582 = -qJ(4) * t604 + (-pkin(7) * t896 + t980) * t618;
t581 = -pkin(6) * t666 + t902 * t596 - t899 * t598;
t580 = -pkin(2) * t699 + pkin(6) * t668 + t899 * t596 + t902 * t598;
t579 = -t895 * t591 + t897 * t592;
t578 = t897 * t591 + t895 * t592;
t577 = -qJ(2) * t601 - t895 * t595 + t897 * t597;
t576 = -qJ(2) * t638 - t895 * t588 + t897 * t594;
t575 = pkin(1) * t663 + qJ(2) * t602 + t897 * t595 + t895 * t597;
t574 = -pkin(1) * t719 + qJ(2) * t641 + t897 * t588 + t895 * t594;
t573 = -qJ(2) * t625 - t895 * t586 + t897 * t589;
t572 = -pkin(1) * t713 + qJ(2) * t626 + t897 * t586 + t895 * t589;
t571 = -pkin(6) * t591 + t902 * t582 - t899 * t585;
t570 = -qJ(2) * t620 - t895 * t580 + t897 * t581;
t569 = -pkin(1) * t699 + qJ(2) * t622 + t897 * t580 + t895 * t581;
t568 = -pkin(2) * t604 + pkin(6) * t592 + t899 * t582 + t902 * t585;
t567 = pkin(1) * t578 + t909;
t566 = -qJ(2) * t578 - t895 * t568 + t897 * t571;
t565 = -pkin(1) * t604 + qJ(2) * t579 + t897 * t568 + t895 * t571;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t875, -t874, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t783, t782, 0, -t747, 0, 0, 0, 0, 0, t887, t693, t692, 0, t617, t877, t861, 0, t879, 0, 0, t660, t659, t624, t584, t759, t700, t717, t758, t718, t856, t593, t587, t583, t567; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t865, 0, t866, 0, t932, t844, -t923, -pkin(5) * t923, 0, 0, -t924, 0, t815, 0, t992, -t995, -t998, -pkin(5) * t998 - qJ(2) * t962 - t903 * t744, 0, 0, -t1003, 0, t741, 0, t1013, -t1014, -t1011, -pkin(5) * t1011 - t903 * t599 - t900 * t600, -t994, -t903 * t738 - t900 * t740, t690, t994, t1005, 0, pkin(5) * t1004 - t903 * t612 - t900 * t614, -pkin(5) * t691 - t903 * t613 - t900 * t615, -t900 * t607 - t903 * t606 - pkin(5) * (-t900 * t737 + t903 * t739), -t900 * t577 - t903 * t575 - pkin(5) * (-t900 * t601 + t903 * t602), -t903 * t656 - t900 * t658, -t903 * t621 - t900 * t623, -t903 * t636 - t900 * t639, -t903 * t655 - t900 * t657, -t903 * t637 - t900 * t640, -t903 * t696 - t900 * t697, -t900 * t576 - t903 * t574 - pkin(5) * (-t900 * t638 + t903 * t641), -t900 * t573 - t903 * t572 - pkin(5) * (-t900 * t625 + t903 * t626), -t900 * t570 - t903 * t569 - pkin(5) * (-t900 * t620 + t903 * t622), -t900 * t566 - t903 * t565 - pkin(5) * (-t900 * t578 + t903 * t579); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t866, 0, -t865, 0, -t844, t932, t922, pkin(5) * t922, 0, 0, -t815, 0, -t924, 0, t995, t992, t999, pkin(5) * t999 + qJ(2) * t955 - t900 * t744, 0, 0, -t741, 0, -t1003, 0, t1014, t1013, t1010, pkin(5) * t1010 - t900 * t599 + t903 * t600, -t993, -t900 * t738 + t903 * t740, t691, t993, t1004, 0, -pkin(5) * t1005 - t900 * t612 + t903 * t614, pkin(5) * t690 - t900 * t613 + t903 * t615, t903 * t607 - t900 * t606 + pkin(5) * (-t903 * t737 - t900 * t739), t903 * t577 - t900 * t575 + pkin(5) * (-t903 * t601 - t900 * t602), -t900 * t656 + t903 * t658, -t900 * t621 + t903 * t623, -t900 * t636 + t903 * t639, -t900 * t655 + t903 * t657, -t900 * t637 + t903 * t640, -t900 * t696 + t903 * t697, t903 * t576 - t900 * t574 + pkin(5) * (-t903 * t638 - t900 * t641), t903 * t573 - t900 * t572 + pkin(5) * (-t903 * t625 - t900 * t626), t903 * t570 - t900 * t569 + pkin(5) * (-t903 * t620 - t900 * t622), t903 * t566 - t900 * t565 + pkin(5) * (-t903 * t578 - t900 * t579); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t904, 0, 0, -g(1), -t875, 0, 0, 0, t864, 0, -t863, 0, t926, t833, t750, qJ(2) * t750, 0, 0, -t800, 0, -t796, 0, t1002, t726, t630, t600, -t765, t740, t755, t765, t756, 0, t614, t615, t607, t577, t658, t623, t639, t657, t640, t697, t576, t573, t570, t566; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t904, 0, qJDD(1), 0, g(1), 0, t874, 0, 0, 0, t863, 0, t864, 0, -t833, t926, t943, t744, 0, 0, t796, 0, -t800, 0, -t726, t1002, t997, t599, t762, t738, t752, -t762, -t754, 0, t612, t613, t606, t575, t656, t621, t636, t655, t637, t696, t574, t572, t569, t565; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t875, -t874, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t783, t782, 0, -t747, 0, 0, 0, 0, 0, t887, t693, t692, 0, t617, t877, t861, 0, t879, 0, 0, t660, t659, t624, t584, t759, t700, t717, t758, t718, t856, t593, t587, t583, t567; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t904, 0, 0, -t893, -t925, 0, 0, 0, -t855, 0, -t852, 0, t996, t822, t681, pkin(6) * t681, t818, t795, t811, -t818, t812, 0, t653, t654, t647, t597, t706, t669, t687, t705, t688, t770, t594, t589, t581, t571; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t904, 0, qJDD(1), 0, t893, 0, t807, 0, 0, 0, t852, 0, -t855, 0, -t822, t996, t944, t677, t817, t793, t808, -t817, -t810, 0, t651, t652, t646, t595, t704, t667, t684, t703, t685, t769, t588, t586, t580, t568; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t925, -t807, 0, 0, 0, 0, 0, 0, 0, t887, t931, t908, 0, -t678, t877, t861, 0, t879, 0, 0, t935, t917, t927, t945, t759, t700, t717, t758, t718, t856, t928, t929, t913, t909; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t887, 0, -t886, 0, 0, -t893, t745, 0, t948, t849, t840, -t948, t841, 0, t727, t728, t663, qJ(4) * t663, t761, t702, t720, t760, t721, -t974, t610, t608, t596, t582; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t886, 0, t887, 0, t893, 0, t746, 0, t867, -t851, -t878, -t867, -t970, 0, t711, t712, 0, pkin(3) * t663, -t781, -t733, -t772, -t780, -t773, t790, t632, t627, t598, t585; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t887, -t745, -t746, 0, 0, t877, t861, 0, t879, 0, 0, t946, t920, t936, t954, t759, t700, t717, t758, t718, t856, t937, t938, t916, t910; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t878, t970, t867, 0, t880, 0, 0, t731, t711, 0, t779, t735, t775, -t989, t776, 0, t673, t671, t611, -pkin(7) * t618; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t878, -t976, t970, -t867, 0, -t731, 0, t712, 0, -t858, -t835, -t786, t858, t784, t869, t645, t643, -pkin(4) * t732, -pkin(4) * t618; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t867, t851, t878, t867, t970, 0, -t711, -t712, 0, 0, t781, t733, t772, t780, t773, -t790, t914, t915, t911, t934; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t826, t785, t824, -t939, t827, t939, 0, t694, t649, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t838, t787, t829, -t825, -t823, t838, -t694, 0, t650, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t858, t835, t786, -t858, -t784, -t869, -t649, -t650, 0, 0;];
m_new_reg = t1;
