% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPPRR7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:00
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPPRR7_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR7_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR7_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR7_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR7_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRR7_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:00:05
% EndTime: 2019-12-31 18:00:13
% DurationCPUTime: 9.30s
% Computational Cost: add. (22166->501), mult. (41406->626), div. (0->0), fcn. (24398->8), ass. (0->330)
t806 = sin(pkin(8));
t807 = cos(pkin(8));
t817 = qJD(1) ^ 2;
t770 = -t807 * qJDD(1) + t806 * t817;
t803 = g(3) - qJDD(2);
t738 = qJ(2) * t770 - t806 * t803;
t813 = sin(qJ(1));
t816 = cos(qJ(1));
t769 = t806 * qJDD(1) + t807 * t817;
t862 = t816 * t769 - t813 * t770;
t867 = -qJ(2) * t769 + t807 * t803;
t949 = -pkin(5) * t862 + t813 * t738 + t816 * t867;
t779 = t816 * g(1) + t813 * g(2);
t761 = -t817 * pkin(1) - t779;
t778 = t813 * g(1) - t816 * g(2);
t837 = qJDD(1) * pkin(1) + t778;
t702 = t806 * t761 - t807 * t837;
t703 = t807 * t761 + t806 * t837;
t863 = t806 * t702 + t807 * t703;
t640 = t807 * t702 - t806 * t703;
t898 = t813 * t640;
t946 = t816 * t863 + t898;
t890 = t816 * t640;
t945 = -t813 * t863 + t890;
t860 = t813 * t769 + t816 * t770;
t925 = pkin(5) * t860 + t816 * t738 - t813 * t867;
t811 = sin(qJ(5));
t814 = cos(qJ(5));
t815 = cos(qJ(4));
t881 = qJD(1) * t815;
t757 = -t814 * qJD(4) + t811 * t881;
t759 = t811 * qJD(4) + t814 * t881;
t718 = t759 * t757;
t879 = qJD(1) * qJD(4);
t869 = t815 * t879;
t812 = sin(qJ(4));
t877 = t812 * qJDD(1);
t766 = -t869 - t877;
t755 = qJDD(5) - t766;
t930 = -t718 + t755;
t944 = t811 * t930;
t942 = t814 * t930;
t916 = pkin(4) * t812;
t940 = -pkin(7) * t815 + t916;
t878 = qJDD(1) * qJ(3);
t819 = -t817 * pkin(2) + t703 + t878;
t923 = 2 * qJD(3);
t876 = qJD(1) * t923;
t682 = t819 + t876;
t805 = qJDD(1) * pkin(2);
t844 = qJDD(3) + t702;
t685 = -t817 * qJ(3) - t805 + t844;
t618 = t806 * t682 - t807 * t685;
t864 = t807 * t682 + t806 * t685;
t939 = -t813 * t618 + t816 * t864;
t938 = t816 * t618 + t813 * t864;
t794 = t815 * qJDD(1);
t870 = t812 * t879;
t767 = t794 - t870;
t809 = t817 * pkin(6);
t915 = pkin(4) * t815;
t849 = pkin(7) * t812 + t915;
t622 = -t809 - t767 * pkin(7) - t766 * pkin(4) + (t849 * qJD(4) + t923) * qJD(1) + t819;
t764 = t940 * qJD(1);
t880 = t812 * qJD(1);
t820 = -qJDD(1) * pkin(6) + t685;
t883 = t815 * t803 - t812 * t820;
t924 = qJD(4) ^ 2;
t634 = -t924 * pkin(4) + qJDD(4) * pkin(7) - t764 * t880 - t883;
t565 = -t814 * t622 + t811 * t634;
t566 = t811 * t622 + t814 * t634;
t537 = -t814 * t565 + t811 * t566;
t931 = (pkin(3) + t849) * t537;
t538 = t811 * t565 + t814 * t566;
t865 = t812 * t803 + t815 * t820;
t605 = -t812 * t883 + t815 * t865;
t786 = qJD(5) + t880;
t857 = t814 * qJDD(4) - t811 * t767;
t657 = (-qJD(5) + t786) * t759 + t857;
t838 = -t811 * qJDD(4) - t814 * t767;
t700 = -t757 * qJD(5) - t838;
t743 = t786 * t757;
t659 = t700 + t743;
t601 = t811 * t657 - t814 * t659;
t529 = -pkin(7) * t601 - t537;
t929 = -(pkin(3) + t915) * t601 + t812 * t529;
t753 = t757 ^ 2;
t754 = t759 ^ 2;
t784 = t786 ^ 2;
t922 = -pkin(2) - pkin(6);
t921 = pkin(1) * t769;
t920 = pkin(1) * t770;
t919 = pkin(3) * t605;
t674 = -t809 + t682;
t918 = pkin(3) * t674;
t801 = t812 ^ 2;
t802 = t815 ^ 2;
t882 = t801 + t802;
t771 = t882 * qJDD(1);
t917 = pkin(3) * t771;
t914 = pkin(6) * t605;
t911 = t786 * t811;
t910 = t786 * t814;
t909 = t801 * t817;
t908 = t802 * t817;
t907 = t806 * t771;
t906 = t807 * t771;
t633 = -qJDD(4) * pkin(4) - t924 * pkin(7) + t764 * t881 - t865;
t628 = t811 * t633;
t688 = t718 + t755;
t904 = t811 * t688;
t901 = t812 * t674;
t785 = t812 * t817 * t815;
t776 = qJDD(4) + t785;
t900 = t812 * t776;
t777 = qJDD(4) - t785;
t899 = t812 * t777;
t629 = t814 * t633;
t893 = t814 * t688;
t667 = t815 * t674;
t892 = t815 * t776;
t891 = t815 * t777;
t885 = -pkin(4) * t633 + pkin(7) * t538;
t884 = -pkin(2) * t685 + qJ(3) * t682;
t875 = t812 * t718;
t874 = t815 * t718;
t716 = -t754 - t784;
t636 = -t811 * t716 - t893;
t660 = (qJD(5) + t786) * t757 + t838;
t873 = pkin(4) * t660 + pkin(7) * t636 + t628;
t701 = -t784 - t753;
t626 = t814 * t701 - t944;
t744 = t786 * t759;
t831 = t759 * qJD(5) - t857;
t656 = -t744 - t831;
t872 = pkin(4) * t656 + pkin(7) * t626 - t629;
t783 = -t908 - t924;
t725 = t815 * t783 - t900;
t868 = -pkin(6) * t725 + t667;
t858 = -t813 * t778 - t816 * t779;
t856 = t806 * t785;
t855 = t807 * t785;
t603 = t814 * t657 + t811 * t659;
t686 = t753 + t754;
t854 = pkin(4) * t686 + pkin(7) * t603 + t538;
t532 = t812 * t538 - t815 * t633;
t853 = -pkin(3) * t532 - t885;
t852 = -pkin(3) * t725 - t883;
t571 = t812 * t603 + t815 * t686;
t851 = -pkin(6) * t571 + t815 * t529 + t601 * t916;
t850 = -pkin(2) * t605 + qJ(3) * t674 - t914;
t773 = t816 * qJDD(1) - t813 * t817;
t848 = -pkin(5) * t773 - t813 * g(3);
t765 = 0.2e1 * t869 + t877;
t847 = pkin(3) * t765 + t667;
t768 = t794 - 0.2e1 * t870;
t846 = pkin(3) * t768 - t901;
t781 = -t909 - t924;
t723 = t812 * t781 + t891;
t845 = -pkin(6) * t723 + t901;
t606 = -t812 * t865 - t815 * t883;
t843 = t816 * t778 - t813 * t779;
t585 = t812 * t626 + t815 * t656;
t841 = -pkin(3) * t585 - t872;
t588 = t812 * t636 + t815 * t660;
t840 = -pkin(3) * t588 - t873;
t839 = -pkin(2) * t725 + qJ(3) * t768 + t868;
t836 = -pkin(3) * t723 - t865;
t625 = t811 * t701 + t942;
t548 = -pkin(4) * t625 + t565;
t577 = -pkin(7) * t625 + t628;
t835 = -pkin(6) * t585 - t812 * t548 + t815 * t577;
t635 = t814 * t716 - t904;
t549 = -pkin(4) * t635 + t566;
t581 = -pkin(7) * t635 + t629;
t834 = -pkin(6) * t588 - t812 * t549 + t815 * t581;
t833 = pkin(6) * t771 - t605;
t832 = -0.2e1 * t805 + t844;
t830 = -pkin(3) * t571 - t854;
t829 = -pkin(2) * t571 + qJ(3) * t601 + t851;
t828 = -pkin(6) * t532 + t940 * t537;
t827 = -pkin(2) * t723 + qJ(3) * t765 + t845;
t826 = pkin(3) * t625 - t815 * t548 - t812 * t577;
t825 = pkin(3) * t635 - t815 * t549 - t812 * t581;
t824 = -pkin(2) * t585 + qJ(3) * t625 + t835;
t823 = -pkin(2) * t588 + qJ(3) * t635 + t834;
t774 = t882 * t817;
t822 = pkin(2) * t771 - qJ(3) * t774 + t833;
t821 = -pkin(2) * t532 + qJ(3) * t537 + t828;
t818 = t703 + 0.2e1 * t878 + t876;
t782 = -t908 + t924;
t780 = t909 - t924;
t775 = (-t801 + t802) * t817;
t772 = t813 * qJDD(1) + t816 * t817;
t756 = t882 * t879;
t745 = -pkin(5) * t772 + t816 * g(3);
t736 = -t754 + t784;
t735 = t753 - t784;
t734 = t812 * t767 + t802 * t879;
t733 = t815 * t766 + t801 * t879;
t732 = t807 * qJDD(4) - t806 * t756;
t731 = t806 * qJDD(4) + t807 * t756;
t730 = -t812 * t783 - t892;
t729 = -t812 * t782 + t891;
t728 = (t767 - t870) * t815;
t727 = t815 * t781 - t899;
t726 = t815 * t780 - t900;
t724 = t815 * t782 + t899;
t722 = t812 * t780 + t892;
t721 = (-t766 + t869) * t812;
t717 = t754 - t753;
t715 = -t807 * t774 - t907;
t714 = -t806 * t774 + t906;
t705 = -t815 * t765 - t812 * t768;
t704 = -t812 * t765 + t815 * t768;
t698 = t806 * t733 - t855;
t697 = t806 * t734 + t855;
t696 = -t807 * t733 - t856;
t695 = -t807 * t734 + t856;
t694 = t806 * t724 + t807 * t794;
t693 = t806 * t722 - t807 * t877;
t692 = -t807 * t724 + t806 * t794;
t691 = -t807 * t722 - t806 * t877;
t680 = t806 * t725 + t807 * t768;
t679 = t806 * t723 + t807 * t765;
t678 = -t807 * t725 + t806 * t768;
t677 = -t807 * t723 + t806 * t765;
t676 = -t702 - t920;
t675 = -t703 - t921;
t672 = (-t757 * t814 + t759 * t811) * t786;
t671 = (-t757 * t811 - t759 * t814) * t786;
t666 = t806 * t704 + t807 * t775;
t665 = -t807 * t704 + t806 * t775;
t664 = t832 + t920;
t663 = t818 + t921;
t658 = t700 - t743;
t655 = -t744 + t831;
t651 = t814 * t700 - t759 * t911;
t650 = t811 * t700 + t759 * t910;
t649 = t757 * t910 + t811 * t831;
t648 = -t757 * t911 + t814 * t831;
t647 = t815 * t672 + t812 * t755;
t646 = t812 * t672 - t815 * t755;
t645 = t814 * t735 - t904;
t644 = -t811 * t736 + t942;
t643 = t811 * t735 + t893;
t642 = t814 * t736 + t944;
t637 = pkin(1) * t640;
t627 = pkin(1) * t803 + qJ(2) * t863;
t616 = t815 * t651 + t875;
t615 = t815 * t649 - t875;
t614 = t812 * t651 - t874;
t613 = t812 * t649 + t874;
t612 = -qJ(3) * t730 - t852;
t611 = -qJ(3) * t727 - t836;
t610 = -qJ(2) * t618 + (-pkin(2) * t806 + qJ(3) * t807) * t803;
t609 = qJ(2) * t864 + (pkin(2) * t807 + qJ(3) * t806 + pkin(1)) * t803;
t608 = t922 * t727 + t847;
t607 = t922 * t730 + t846;
t602 = t814 * t656 - t811 * t658;
t600 = t811 * t656 + t814 * t658;
t597 = t806 * t646 + t807 * t671;
t596 = -t807 * t646 + t806 * t671;
t594 = pkin(3) * t774 + t606;
t593 = t815 * t645 - t812 * t655;
t592 = t815 * t644 + t812 * t659;
t591 = t812 * t645 + t815 * t655;
t590 = t812 * t644 - t815 * t659;
t589 = t815 * t636 - t812 * t660;
t586 = t815 * t626 - t812 * t656;
t583 = t815 * t602 + t812 * t717;
t582 = t812 * t602 - t815 * t717;
t580 = pkin(1) * t678 + t839;
t579 = pkin(1) * t677 + t827;
t576 = t806 * t614 + t807 * t650;
t575 = t806 * t613 - t807 * t648;
t574 = -t807 * t614 + t806 * t650;
t573 = -t807 * t613 - t806 * t648;
t572 = t815 * t603 - t812 * t686;
t568 = t806 * t605 + t807 * t674;
t567 = -t807 * t605 + t806 * t674;
t562 = -pkin(3) * t906 - qJ(2) * t714 + t806 * t594;
t561 = -pkin(3) * t907 + qJ(2) * t715 - t807 * t594;
t560 = pkin(1) * t618 + t884;
t559 = pkin(1) * t714 + t822;
t558 = t806 * t591 + t807 * t643;
t557 = t806 * t590 + t807 * t642;
t556 = -t807 * t591 + t806 * t643;
t555 = -t807 * t590 + t806 * t642;
t554 = t806 * t588 + t807 * t635;
t553 = -t807 * t588 + t806 * t635;
t552 = t806 * t585 + t807 * t625;
t551 = -t807 * t585 + t806 * t625;
t550 = -qJ(3) * t606 + t919;
t547 = -qJ(2) * t678 - t806 * t607 + t807 * t612;
t546 = -qJ(2) * t677 - t806 * t608 + t807 * t611;
t545 = t806 * t582 + t807 * t600;
t544 = -t807 * t582 + t806 * t600;
t543 = t922 * t606 + t918;
t542 = t806 * t571 + t807 * t601;
t541 = -t807 * t571 + t806 * t601;
t540 = -pkin(1) * t730 + qJ(2) * t680 + t807 * t607 + t806 * t612;
t539 = -pkin(1) * t727 + qJ(2) * t679 + t807 * t608 + t806 * t611;
t533 = t815 * t538 + t812 * t633;
t530 = pkin(1) * t567 + t850;
t527 = -qJ(3) * t589 - t840;
t526 = -qJ(3) * t586 - t841;
t525 = -qJ(2) * t567 - t806 * t543 + t807 * t550;
t524 = t922 * t589 + t825;
t523 = t806 * t532 + t807 * t537;
t522 = -t807 * t532 + t806 * t537;
t521 = t922 * t586 + t826;
t520 = -pkin(1) * t606 + qJ(2) * t568 + t807 * t543 + t806 * t550;
t519 = -qJ(3) * t572 - t830;
t518 = pkin(1) * t553 + t823;
t517 = pkin(1) * t551 + t824;
t516 = t922 * t572 - t929;
t515 = -qJ(3) * t533 - t853;
t514 = pkin(1) * t541 + t829;
t513 = -qJ(2) * t553 - t806 * t524 + t807 * t527;
t512 = -qJ(2) * t551 - t806 * t521 + t807 * t526;
t511 = -pkin(1) * t589 + qJ(2) * t554 + t807 * t524 + t806 * t527;
t510 = -pkin(1) * t586 + qJ(2) * t552 + t807 * t521 + t806 * t526;
t509 = t922 * t533 + t931;
t508 = -qJ(2) * t541 - t806 * t516 + t807 * t519;
t507 = -pkin(1) * t572 + qJ(2) * t542 + t807 * t516 + t806 * t519;
t506 = pkin(1) * t522 + t821;
t505 = -qJ(2) * t522 - t806 * t509 + t807 * t515;
t504 = -pkin(1) * t533 + qJ(2) * t523 + t807 * t509 + t806 * t515;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t773, 0, -t772, 0, t848, -t745, -t843, -pkin(5) * t843, 0, 0, -t860, 0, -t862, 0, t925, -t949, t945, pkin(5) * t945 + qJ(2) * t890 - t813 * t627, 0, t860, t862, 0, 0, 0, -t938, -t925, t949, -pkin(5) * t938 - t813 * t609 + t816 * t610, -t813 * t695 + t816 * t697, -t813 * t665 + t816 * t666, -t813 * t692 + t816 * t694, -t813 * t696 + t816 * t698, -t813 * t691 + t816 * t693, -t813 * t731 + t816 * t732, t816 * t546 - t813 * t539 - pkin(5) * (t816 * t677 + t813 * t679), t816 * t547 - t813 * t540 - pkin(5) * (t816 * t678 + t813 * t680), t816 * t562 - t813 * t561 - pkin(5) * (t816 * t714 + t813 * t715), t816 * t525 - t813 * t520 - pkin(5) * (t816 * t567 + t813 * t568), -t813 * t574 + t816 * t576, -t813 * t544 + t816 * t545, -t813 * t555 + t816 * t557, -t813 * t573 + t816 * t575, -t813 * t556 + t816 * t558, -t813 * t596 + t816 * t597, t816 * t512 - t813 * t510 - pkin(5) * (t816 * t551 + t813 * t552), t816 * t513 - t813 * t511 - pkin(5) * (t816 * t553 + t813 * t554), t816 * t508 - t813 * t507 - pkin(5) * (t816 * t541 + t813 * t542), t816 * t505 - t813 * t504 - pkin(5) * (t816 * t522 + t813 * t523); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t772, 0, t773, 0, t745, t848, t858, pkin(5) * t858, 0, 0, t862, 0, -t860, 0, t949, t925, t946, pkin(5) * t946 + qJ(2) * t898 + t816 * t627, 0, -t862, t860, 0, 0, 0, t939, -t949, -t925, pkin(5) * t939 + t816 * t609 + t813 * t610, t816 * t695 + t813 * t697, t816 * t665 + t813 * t666, t816 * t692 + t813 * t694, t816 * t696 + t813 * t698, t816 * t691 + t813 * t693, t816 * t731 + t813 * t732, t813 * t546 + t816 * t539 + pkin(5) * (-t813 * t677 + t816 * t679), t813 * t547 + t816 * t540 + pkin(5) * (-t813 * t678 + t816 * t680), t813 * t562 + t816 * t561 + pkin(5) * (-t813 * t714 + t816 * t715), t813 * t525 + t816 * t520 + pkin(5) * (-t813 * t567 + t816 * t568), t816 * t574 + t813 * t576, t816 * t544 + t813 * t545, t816 * t555 + t813 * t557, t816 * t573 + t813 * t575, t816 * t556 + t813 * t558, t816 * t596 + t813 * t597, t813 * t512 + t816 * t510 + pkin(5) * (-t813 * t551 + t816 * t552), t813 * t513 + t816 * t511 + pkin(5) * (-t813 * t553 + t816 * t554), t813 * t508 + t816 * t507 + pkin(5) * (-t813 * t541 + t816 * t542), t813 * t505 + t816 * t504 + pkin(5) * (-t813 * t522 + t816 * t523); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t778, t779, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t676, t675, 0, -t637, qJDD(1), 0, 0, 0, 0, 0, 0, t664, t663, t560, t728, t705, t729, t721, t726, 0, t579, t580, t559, t530, t616, t583, t592, t615, t593, t647, t517, t518, t514, t506; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t817, 0, 0, -g(3), -t778, 0, 0, 0, -t770, 0, -t769, 0, t738, -t867, t640, qJ(2) * t640, 0, t770, t769, 0, 0, 0, -t618, -t738, t867, t610, t697, t666, t694, t698, t693, t732, t546, t547, t562, t525, t576, t545, t557, t575, t558, t597, t512, t513, t508, t505; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t817, 0, qJDD(1), 0, g(3), 0, -t779, 0, 0, 0, t769, 0, -t770, 0, t867, t738, t863, t627, 0, -t769, t770, 0, 0, 0, t864, -t867, -t738, t609, t695, t665, t692, t696, t691, t731, t539, t540, t561, t520, t574, t544, t555, t573, t556, t596, t510, t511, t507, t504; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t778, t779, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t676, t675, 0, -t637, qJDD(1), 0, 0, 0, 0, 0, 0, t664, t663, t560, t728, t705, t729, t721, t726, 0, t579, t580, t559, t530, t616, t583, t592, t615, t593, t647, t517, t518, t514, t506; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t817, 0, 0, -t803, t702, 0, 0, -qJDD(1), t817, 0, 0, 0, t685, 0, t803, qJ(3) * t803, t785, t775, t794, -t785, -t877, qJDD(4), t611, t612, -t917, t550, t650, t600, t642, -t648, t643, t671, t526, t527, t519, t515; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t817, 0, qJDD(1), 0, t803, 0, t703, 0, 0, -t817, -qJDD(1), 0, 0, 0, t682, -t803, 0, pkin(2) * t803, -t734, -t704, -t724, -t733, -t722, t756, t608, t607, -t594, t543, -t614, -t582, -t590, -t613, -t591, -t646, t521, t524, t516, t509; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t702, -t703, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t832, t818, t884, t728, t705, t729, t721, t726, 0, t827, t839, t822, t850, t616, t583, t592, t615, t593, t647, t824, t823, t829, t821; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t685, t682, 0, t728, t705, t729, t721, t726, 0, t845, t868, t833, -t914, t616, t583, t592, t615, t593, t647, t835, t834, t851, t828; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t817, 0, 0, 0, -t685, 0, -t803, 0, -t785, -t775, -t794, t785, t877, -qJDD(4), t836, t852, t917, -t919, -t650, -t600, -t642, t648, -t643, -t671, t841, t840, t830, t853; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t817, qJDD(1), 0, 0, 0, -t682, t803, 0, 0, t734, t704, t724, t733, t722, -t756, pkin(6) * t727 - t847, pkin(6) * t730 - t846, t594, pkin(6) * t606 - t918, t614, t582, t590, t613, t591, t646, pkin(6) * t586 - t826, pkin(6) * t589 - t825, pkin(6) * t572 + t929, pkin(6) * t533 - t931; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t767, -t765, t777, t870, t780, -t870, 0, t674, -t865, 0, t651, t602, t644, t649, t645, t672, t577, t581, t529, -pkin(7) * t537; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t869, t768, t782, t766, t776, -t869, -t674, 0, -t883, 0, -t718, -t717, -t659, t718, t655, -t755, t548, t549, -pkin(4) * t601, -pkin(4) * t537; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t785, t775, t794, -t785, -t877, qJDD(4), t865, t883, 0, 0, t650, t600, t642, -t648, t643, t671, t872, t873, t854, t885; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t700, t656, t930, t743, t735, -t743, 0, t633, t565, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t744, t658, t736, -t831, t688, -t744, -t633, 0, t566, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t718, t717, t659, -t718, -t655, t755, -t565, -t566, 0, 0;];
m_new_reg = t1;
