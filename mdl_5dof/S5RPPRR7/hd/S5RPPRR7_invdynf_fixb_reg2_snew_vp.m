% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPPRR7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:00
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPPRR7_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR7_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR7_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR7_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR7_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRR7_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:00:13
% EndTime: 2019-12-31 18:00:15
% DurationCPUTime: 1.61s
% Computational Cost: add. (3596->177), mult. (6768->215), div. (0->0), fcn. (4072->8), ass. (0->122)
t1062 = sin(qJ(4));
t1089 = t1062 * qJD(1);
t1044 = qJD(5) + t1089;
t1098 = qJD(5) + t1044;
t1057 = sin(pkin(8));
t1058 = cos(pkin(8));
t1068 = qJD(1) ^ 2;
t1032 = t1057 * qJDD(1) + t1058 * t1068;
t1033 = -t1058 * qJDD(1) + t1057 * t1068;
t1063 = sin(qJ(1));
t1066 = cos(qJ(1));
t1074 = t1063 * t1032 + t1066 * t1033;
t1076 = t1066 * t1032 - t1063 * t1033;
t1061 = sin(qJ(5));
t1064 = cos(qJ(5));
t1065 = cos(qJ(4));
t1091 = qJD(1) * t1065;
t1023 = -t1064 * qJD(4) + t1061 * t1091;
t1097 = t1023 ^ 2;
t1025 = t1061 * qJD(4) + t1064 * t1091;
t1096 = t1025 ^ 2;
t1095 = t1044 ^ 2;
t1094 = 2 * qJD(3);
t1093 = t1062 * pkin(4);
t1092 = t1068 * pkin(6);
t1054 = -g(3) + qJDD(2);
t1040 = t1063 * g(1) - t1066 * g(2);
t1026 = qJDD(1) * pkin(1) + t1040;
t1041 = -t1066 * g(1) - t1063 * g(2);
t1027 = -t1068 * pkin(1) + t1041;
t1006 = t1058 * t1026 - t1057 * t1027;
t1001 = -qJDD(1) * pkin(2) - t1068 * qJ(3) + qJDD(3) - t1006;
t1069 = -qJDD(1) * pkin(6) + t1001;
t992 = t1065 * t1054 + t1062 * t1069;
t1090 = t1025 * t1023;
t1084 = qJD(5) - t1044;
t1007 = t1057 * t1026 + t1058 * t1027;
t1052 = t1062 ^ 2;
t1053 = t1065 ^ 2;
t1083 = t1052 + t1053;
t1082 = t1062 * qJDD(1);
t1081 = t1065 * qJDD(1);
t1080 = qJD(4) * t1089;
t1079 = t1062 * t1068 * t1065;
t1078 = qJD(4) * t1091;
t1077 = -t1068 * pkin(2) + t1007;
t991 = -t1062 * t1054 + t1065 * t1069;
t1030 = -t1080 + t1081;
t1072 = t1064 * qJDD(4) - t1061 * t1030;
t1071 = -t1061 * qJDD(4) - t1064 * t1030;
t1070 = -qJDD(5) - t1078 - t1082;
t1000 = qJDD(1) * qJ(3) + qJD(1) * t1094 + t1077;
t1067 = qJD(4) ^ 2;
t1043 = -t1053 * t1068 - t1067;
t1042 = -t1052 * t1068 - t1067;
t1039 = -qJDD(4) - t1079;
t1038 = qJDD(4) - t1079;
t1037 = t1083 * t1068;
t1036 = -t1063 * qJDD(1) - t1066 * t1068;
t1035 = t1066 * qJDD(1) - t1063 * t1068;
t1034 = t1083 * qJDD(1);
t1031 = -0.2e1 * t1080 + t1081;
t1029 = 0.2e1 * t1078 + t1082;
t1028 = (-pkin(7) * t1065 + t1093) * qJD(1);
t1014 = t1065 * t1039 - t1062 * t1043;
t1013 = -t1062 * t1038 + t1065 * t1042;
t1012 = t1062 * t1039 + t1065 * t1043;
t1011 = t1065 * t1038 + t1062 * t1042;
t1010 = -t1095 - t1096;
t1009 = -t1057 * t1034 - t1058 * t1037;
t1008 = t1058 * t1034 - t1057 * t1037;
t1005 = -t1095 - t1097;
t1004 = t1070 - t1090;
t1003 = -t1070 - t1090;
t1002 = -t1096 - t1097;
t999 = t1057 * t1012 + t1058 * t1031;
t998 = t1057 * t1011 + t1058 * t1029;
t997 = -t1058 * t1012 + t1057 * t1031;
t996 = -t1058 * t1011 + t1057 * t1029;
t995 = t1000 - t1092;
t990 = t1084 * t1023 + t1071;
t989 = -t1098 * t1023 - t1071;
t988 = -t1084 * t1025 + t1072;
t987 = t1098 * t1025 - t1072;
t986 = -t1057 * t1006 + t1058 * t1007;
t985 = t1058 * t1006 + t1057 * t1007;
t984 = t1064 * t1004 - t1061 * t1010;
t983 = t1061 * t1004 + t1064 * t1010;
t982 = -t1067 * pkin(4) + qJDD(4) * pkin(7) - t1028 * t1089 + t992;
t981 = -qJDD(4) * pkin(4) - t1067 * pkin(7) + t1028 * t1091 - t991;
t980 = -t1061 * t1003 + t1064 * t1005;
t979 = t1064 * t1003 + t1061 * t1005;
t978 = -t1092 - t1030 * pkin(7) + (qJ(3) + t1093) * qJDD(1) + (t1094 + (0.2e1 * pkin(4) * t1065 + pkin(7) * t1062) * qJD(4)) * qJD(1) + t1077;
t977 = t1058 * t1000 + t1057 * t1001;
t976 = t1057 * t1000 - t1058 * t1001;
t975 = -t1062 * t991 + t1065 * t992;
t974 = t1062 * t992 + t1065 * t991;
t973 = -t1061 * t990 + t1064 * t988;
t972 = t1061 * t988 + t1064 * t990;
t971 = t1062 * t989 + t1065 * t984;
t970 = t1062 * t984 - t1065 * t989;
t969 = t1062 * t987 + t1065 * t980;
t968 = t1062 * t980 - t1065 * t987;
t967 = t1062 * t1002 + t1065 * t973;
t966 = -t1065 * t1002 + t1062 * t973;
t965 = t1057 * t974 + t1058 * t995;
t964 = t1057 * t995 - t1058 * t974;
t963 = t1061 * t978 + t1064 * t982;
t962 = -t1061 * t982 + t1064 * t978;
t961 = t1057 * t970 + t1058 * t983;
t960 = t1057 * t983 - t1058 * t970;
t959 = t1057 * t968 + t1058 * t979;
t958 = t1057 * t979 - t1058 * t968;
t957 = t1057 * t966 + t1058 * t972;
t956 = t1057 * t972 - t1058 * t966;
t955 = -t1061 * t962 + t1064 * t963;
t954 = t1061 * t963 + t1064 * t962;
t953 = t1062 * t981 + t1065 * t955;
t952 = t1062 * t955 - t1065 * t981;
t951 = t1057 * t952 + t1058 * t954;
t950 = t1057 * t954 - t1058 * t952;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1036, -t1035, 0, -t1063 * t1040 + t1066 * t1041, 0, 0, 0, 0, 0, 0, -t1076, t1074, 0, -t1063 * t985 + t1066 * t986, 0, 0, 0, 0, 0, 0, 0, t1076, -t1074, -t1063 * t976 + t1066 * t977, 0, 0, 0, 0, 0, 0, -t1063 * t996 + t1066 * t998, -t1063 * t997 + t1066 * t999, -t1063 * t1008 + t1066 * t1009, -t1063 * t964 + t1066 * t965, 0, 0, 0, 0, 0, 0, -t1063 * t958 + t1066 * t959, -t1063 * t960 + t1066 * t961, -t1063 * t956 + t1066 * t957, -t1063 * t950 + t1066 * t951; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1035, t1036, 0, t1066 * t1040 + t1063 * t1041, 0, 0, 0, 0, 0, 0, -t1074, -t1076, 0, t1063 * t986 + t1066 * t985, 0, 0, 0, 0, 0, 0, 0, t1074, t1076, t1063 * t977 + t1066 * t976, 0, 0, 0, 0, 0, 0, t1063 * t998 + t1066 * t996, t1063 * t999 + t1066 * t997, t1066 * t1008 + t1063 * t1009, t1063 * t965 + t1066 * t964, 0, 0, 0, 0, 0, 0, t1063 * t959 + t1066 * t958, t1063 * t961 + t1066 * t960, t1063 * t957 + t1066 * t956, t1063 * t951 + t1066 * t950; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1054, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1054, 0, 0, 0, 0, 0, 0, t1013, t1014, 0, t975, 0, 0, 0, 0, 0, 0, t969, t971, t967, t953; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1068, -qJDD(1), 0, t1041, 0, 0, 0, 0, 0, 0, -t1032, t1033, 0, t986, 0, 0, 0, 0, 0, 0, 0, t1032, -t1033, t977, 0, 0, 0, 0, 0, 0, t998, t999, t1009, t965, 0, 0, 0, 0, 0, 0, t959, t961, t957, t951; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1068, 0, t1040, 0, 0, 0, 0, 0, 0, -t1033, -t1032, 0, t985, 0, 0, 0, 0, 0, 0, 0, t1033, t1032, t976, 0, 0, 0, 0, 0, 0, t996, t997, t1008, t964, 0, 0, 0, 0, 0, 0, t958, t960, t956, t950; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1054, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1054, 0, 0, 0, 0, 0, 0, t1013, t1014, 0, t975, 0, 0, 0, 0, 0, 0, t969, t971, t967, t953; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1068, -qJDD(1), 0, t1007, 0, 0, 0, 0, 0, 0, 0, t1068, qJDD(1), t1000, 0, 0, 0, 0, 0, 0, t1029, t1031, -t1037, t995, 0, 0, 0, 0, 0, 0, t979, t983, t972, t954; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1068, 0, t1006, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), t1068, -t1001, 0, 0, 0, 0, 0, 0, -t1011, -t1012, t1034, -t974, 0, 0, 0, 0, 0, 0, -t968, -t970, -t966, -t952; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1054, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1054, 0, 0, 0, 0, 0, 0, t1013, t1014, 0, t975, 0, 0, 0, 0, 0, 0, t969, t971, t967, t953; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1054, 0, 0, 0, 0, 0, 0, t1013, t1014, 0, t975, 0, 0, 0, 0, 0, 0, t969, t971, t967, t953; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1068, -qJDD(1), -t1000, 0, 0, 0, 0, 0, 0, -t1029, -t1031, t1037, -t995, 0, 0, 0, 0, 0, 0, -t979, -t983, -t972, -t954; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1068, t1001, 0, 0, 0, 0, 0, 0, t1011, t1012, -t1034, t974, 0, 0, 0, 0, 0, 0, t968, t970, t966, t952; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1042, t1039, -t1082, t992, 0, 0, 0, 0, 0, 0, t980, t984, t973, t955; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1038, t1043, -t1081, t991, 0, 0, 0, 0, 0, 0, -t987, -t989, -t1002, -t981; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1029, t1031, -t1037, t995, 0, 0, 0, 0, 0, 0, t979, t983, t972, t954; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1005, t1004, t988, t963; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1003, t1010, t990, t962; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t987, t989, t1002, t981;];
f_new_reg = t1;
