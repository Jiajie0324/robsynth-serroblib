% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPPRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:00
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPPRR7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR7_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR7_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR7_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRR7_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:59:56
% EndTime: 2019-12-31 18:00:05
% DurationCPUTime: 6.23s
% Computational Cost: add. (12515->419), mult. (23433->601), div. (0->0), fcn. (13972->8), ass. (0->278)
t404 = sin(pkin(8));
t405 = cos(pkin(8));
t416 = qJD(1) ^ 2;
t371 = -t405 * qJDD(1) + t404 * t416;
t401 = g(3) - qJDD(2);
t339 = qJ(2) * t371 - t404 * t401;
t411 = sin(qJ(1));
t414 = cos(qJ(1));
t370 = t404 * qJDD(1) + t405 * t416;
t431 = t414 * t370 - t411 * t371;
t436 = -qJ(2) * t370 + t405 * t401;
t503 = -pkin(5) * t431 + t411 * t339 + t414 * t436;
t379 = t411 * g(1) - t414 * g(2);
t363 = qJDD(1) * pkin(1) + t379;
t380 = t414 * g(1) + t411 * g(2);
t364 = -t416 * pkin(1) - t380;
t308 = -t405 * t363 + t404 * t364;
t309 = t404 * t363 + t405 * t364;
t432 = t404 * t308 + t405 * t309;
t257 = t405 * t308 - t404 * t309;
t457 = t414 * t257;
t500 = -t411 * t432 + t457;
t467 = t411 * t257;
t212 = t414 * t432 + t467;
t429 = t411 * t370 + t414 * t371;
t485 = pkin(5) * t429 + t414 * t339 - t411 * t436;
t409 = sin(qJ(5));
t412 = cos(qJ(5));
t413 = cos(qJ(4));
t450 = qJD(1) * t413;
t359 = -t412 * qJD(4) + t409 * t450;
t361 = t409 * qJD(4) + t412 * t450;
t323 = t361 * t359;
t447 = qJD(1) * qJD(4);
t437 = t413 * t447;
t410 = sin(qJ(4));
t445 = t410 * qJDD(1);
t367 = -t437 - t445;
t418 = qJDD(5) - t367;
t489 = -t323 + t418;
t499 = t409 * t489;
t497 = t412 * t489;
t446 = qJDD(1) * qJ(3);
t419 = -t416 * pkin(2) + t309 + t446;
t484 = 2 * qJD(3);
t443 = qJD(1) * t484;
t290 = t419 + t443;
t403 = qJDD(1) * pkin(2);
t291 = -t416 * qJ(3) + qJDD(3) + t308 - t403;
t241 = t404 * t290 - t405 * t291;
t433 = t405 * t290 + t404 * t291;
t194 = -t411 * t241 + t414 * t433;
t193 = t414 * t241 + t411 * t433;
t449 = t410 * qJD(1);
t386 = qJD(5) + t449;
t344 = t386 * t359;
t438 = t410 * t447;
t444 = t413 * qJDD(1);
t368 = -t438 + t444;
t439 = t359 * qJD(5) - t409 * qJDD(4) - t412 * t368;
t274 = t439 + t344;
t427 = -t412 * qJDD(4) + t409 * t368;
t270 = (qJD(5) - t386) * t361 + t427;
t355 = t359 ^ 2;
t356 = t361 ^ 2;
t385 = t386 ^ 2;
t483 = pkin(2) + pkin(6);
t482 = pkin(4) * t410;
t481 = pkin(4) * t413;
t479 = t386 * t409;
t478 = t386 * t412;
t399 = t410 ^ 2;
t477 = t399 * t416;
t400 = t413 ^ 2;
t476 = t400 * t416;
t451 = t399 + t400;
t372 = t451 * qJDD(1);
t475 = t404 * t372;
t474 = t405 * t372;
t422 = -pkin(7) * t413 + t482;
t365 = t422 * qJD(1);
t415 = qJD(4) ^ 2;
t417 = -qJDD(1) * pkin(6) + t291;
t434 = t410 * t401 + t413 * t417;
t251 = -qJDD(4) * pkin(4) - t415 * pkin(7) + t365 * t450 - t434;
t472 = t409 * t251;
t294 = t323 + t418;
t471 = t409 * t294;
t407 = t416 * pkin(6);
t285 = t290 - t407;
t470 = t410 * t285;
t441 = t410 * t416 * t413;
t377 = qJDD(4) + t441;
t469 = t410 * t377;
t378 = qJDD(4) - t441;
t468 = t410 * t378;
t462 = t412 * t251;
t461 = t412 * t294;
t460 = t413 * t285;
t459 = t413 * t377;
t458 = t413 * t378;
t423 = pkin(7) * t410 + t481;
t246 = -t367 * pkin(4) - t368 * pkin(7) - t407 + (qJD(4) * t423 + t484) * qJD(1) + t419;
t452 = t413 * t401 - t410 * t417;
t252 = -t415 * pkin(4) + qJDD(4) * pkin(7) - t365 * t449 - t452;
t199 = t409 * t246 + t412 * t252;
t442 = t410 * t323;
t440 = t413 * t323;
t198 = -t412 * t246 + t409 * t252;
t170 = t409 * t198 + t412 * t199;
t325 = -t411 * t379 - t414 * t380;
t426 = t404 * t441;
t425 = t405 * t441;
t424 = -pkin(1) * t370 - t309;
t374 = t414 * qJDD(1) - t411 * t416;
t421 = -pkin(5) * t374 - t411 * g(3);
t169 = -t412 * t198 + t409 * t199;
t226 = -t410 * t452 + t413 * t434;
t227 = -t410 * t434 - t413 * t452;
t324 = t414 * t379 - t411 * t380;
t420 = -pkin(1) * t371 - t308;
t384 = -t415 - t476;
t383 = t415 - t476;
t382 = -t415 - t477;
t381 = -t415 + t477;
t376 = (-t399 + t400) * t416;
t375 = t451 * t416;
t373 = t411 * qJDD(1) + t414 * t416;
t369 = -0.2e1 * t438 + t444;
t366 = 0.2e1 * t437 + t445;
t358 = t451 * t447;
t345 = -pkin(5) * t373 + t414 * g(3);
t337 = -t356 + t385;
t336 = t355 - t385;
t335 = -t410 * t368 - t400 * t447;
t334 = -t413 * t367 - t399 * t447;
t333 = t405 * qJDD(4) - t404 * t358;
t332 = t404 * qJDD(4) + t405 * t358;
t331 = -t410 * t384 - t459;
t330 = t413 * t382 - t468;
t329 = t413 * t384 - t469;
t328 = -t413 * t383 - t468;
t327 = t410 * t382 + t458;
t326 = -t410 * t381 - t459;
t322 = -t356 + t355;
t321 = -t356 - t385;
t320 = -t405 * t375 - t475;
t319 = -t404 * t375 + t474;
t310 = t410 * t366 - t413 * t369;
t307 = -t385 - t355;
t305 = -t361 * qJD(5) - t427;
t303 = -t404 * t334 - t425;
t302 = -t404 * t335 + t425;
t301 = t405 * t334 - t426;
t300 = t405 * t335 + t426;
t299 = -t404 * t328 + t405 * t444;
t298 = -t404 * t326 - t405 * t445;
t297 = t405 * t328 + t404 * t444;
t296 = t405 * t326 - t404 * t445;
t292 = t355 + t356;
t289 = t404 * t329 + t405 * t369;
t288 = t404 * t327 + t405 * t366;
t287 = -t405 * t329 + t404 * t369;
t286 = -t405 * t327 + t404 * t366;
t283 = (-t359 * t412 + t361 * t409) * t386;
t282 = (-t359 * t409 - t361 * t412) * t386;
t279 = -t404 * t310 + t405 * t376;
t278 = t405 * t310 + t404 * t376;
t275 = -t344 + t439;
t271 = (-qJD(5) - t386) * t361 - t427;
t269 = -t361 * t479 - t412 * t439;
t268 = t361 * t478 - t409 * t439;
t267 = -t409 * t305 + t359 * t478;
t266 = t412 * t305 + t359 * t479;
t265 = -t411 * t319 + t414 * t320;
t264 = t414 * t319 + t411 * t320;
t263 = -t410 * t283 + t413 * t418;
t262 = t412 * t336 - t471;
t261 = -t409 * t337 + t497;
t260 = t409 * t336 + t461;
t259 = t412 * t337 + t499;
t254 = -t409 * t321 - t461;
t253 = t412 * t321 - t471;
t249 = pkin(1) * t401 + qJ(2) * t432;
t248 = t412 * t307 - t499;
t247 = t409 * t307 + t497;
t239 = -t410 * t269 + t440;
t238 = -t410 * t267 - t440;
t237 = -t411 * t287 + t414 * t289;
t236 = -t411 * t286 + t414 * t288;
t235 = t414 * t287 + t411 * t289;
t234 = t414 * t286 + t411 * t288;
t233 = pkin(3) * t329 - qJ(3) * t331 + t452;
t232 = pkin(3) * t327 - qJ(3) * t330 + t434;
t231 = -qJ(2) * t241 + (-pkin(2) * t404 + qJ(3) * t405) * t401;
t230 = qJ(2) * t433 + (pkin(2) * t405 + qJ(3) * t404 + pkin(1)) * t401;
t229 = pkin(3) * t366 - t483 * t330 + t460;
t228 = pkin(3) * t369 - t483 * t331 - t470;
t225 = -t270 * t412 - t409 * t275;
t224 = t412 * t271 + t274 * t409;
t223 = -t270 * t409 + t412 * t275;
t222 = t409 * t271 - t274 * t412;
t221 = -t404 * t263 + t405 * t282;
t220 = t405 * t263 + t404 * t282;
t219 = -pkin(3) * t375 - t227;
t218 = -t410 * t262 - t413 * t270;
t217 = -t410 * t261 - t413 * t275;
t216 = t413 * t254 - t410 * t274;
t215 = t410 * t254 + t413 * t274;
t214 = t413 * t248 - t410 * t271;
t213 = t410 * t248 + t413 * t271;
t210 = -t410 * t224 - t413 * t322;
t209 = -pkin(7) * t253 + t462;
t208 = -pkin(7) * t247 + t472;
t207 = -t404 * t239 + t405 * t268;
t206 = -t404 * t238 + t405 * t266;
t205 = t405 * t239 + t404 * t268;
t204 = t405 * t238 + t404 * t266;
t203 = t413 * t225 - t410 * t292;
t202 = t410 * t225 + t413 * t292;
t201 = t404 * t226 + t405 * t285;
t200 = -t405 * t226 + t404 * t285;
t196 = -pkin(3) * t474 - qJ(2) * t319 - t404 * t219;
t195 = -pkin(3) * t475 + qJ(2) * t320 + t405 * t219;
t192 = -t404 * t218 + t405 * t260;
t191 = -t404 * t217 + t405 * t259;
t190 = t405 * t218 + t404 * t260;
t189 = t405 * t217 + t404 * t259;
t188 = t404 * t215 + t405 * t253;
t187 = -t405 * t215 + t404 * t253;
t186 = t404 * t213 + t405 * t247;
t185 = -t405 * t213 + t404 * t247;
t184 = pkin(3) * t226 - qJ(3) * t227;
t183 = -pkin(4) * t253 + t199;
t182 = -pkin(4) * t247 + t198;
t181 = -qJ(2) * t287 - t404 * t228 + t405 * t233;
t180 = -qJ(2) * t286 - t404 * t229 + t405 * t232;
t179 = -t404 * t210 + t405 * t222;
t178 = t405 * t210 + t404 * t222;
t177 = pkin(3) * t285 - t483 * t227;
t176 = t404 * t202 + t405 * t223;
t175 = -t405 * t202 + t404 * t223;
t174 = -pkin(1) * t331 + qJ(2) * t289 + t405 * t228 + t404 * t233;
t173 = -pkin(1) * t330 + qJ(2) * t288 + t405 * t229 + t404 * t232;
t172 = -t411 * t200 + t414 * t201;
t171 = t414 * t200 + t411 * t201;
t168 = t413 * t170 + t410 * t251;
t167 = t410 * t170 - t413 * t251;
t166 = -t411 * t187 + t414 * t188;
t165 = t414 * t187 + t411 * t188;
t164 = -pkin(7) * t223 - t169;
t163 = -t411 * t185 + t414 * t186;
t162 = t414 * t185 + t411 * t186;
t161 = pkin(3) * t215 + pkin(4) * t274 + pkin(7) * t254 - qJ(3) * t216 + t472;
t160 = pkin(3) * t213 + pkin(4) * t271 + pkin(7) * t248 - qJ(3) * t214 - t462;
t159 = -t411 * t175 + t414 * t176;
t158 = t414 * t175 + t411 * t176;
t157 = -qJ(2) * t200 - t404 * t177 + t405 * t184;
t156 = pkin(3) * t253 - t413 * t183 - t410 * t209 - t483 * t216;
t155 = t404 * t167 + t405 * t169;
t154 = -t405 * t167 + t404 * t169;
t153 = pkin(3) * t247 - t413 * t182 - t410 * t208 - t483 * t214;
t152 = -pkin(1) * t227 + qJ(2) * t201 + t405 * t177 + t404 * t184;
t151 = pkin(3) * t202 + pkin(4) * t292 + pkin(7) * t225 - qJ(3) * t203 + t170;
t150 = -t410 * t164 + (pkin(3) + t481) * t223 - t483 * t203;
t149 = pkin(3) * t167 - pkin(4) * t251 + pkin(7) * t170 - qJ(3) * t168;
t148 = -qJ(2) * t187 - t404 * t156 + t405 * t161;
t147 = -qJ(2) * t185 - t404 * t153 + t405 * t160;
t146 = -t411 * t154 + t414 * t155;
t145 = t414 * t154 + t411 * t155;
t144 = -pkin(1) * t216 + qJ(2) * t188 + t405 * t156 + t404 * t161;
t143 = -pkin(1) * t214 + qJ(2) * t186 + t405 * t153 + t404 * t160;
t142 = -t483 * t168 + (pkin(3) + t423) * t169;
t141 = -qJ(2) * t175 - t404 * t150 + t405 * t151;
t140 = -pkin(1) * t203 + qJ(2) * t176 + t405 * t150 + t404 * t151;
t139 = -qJ(2) * t154 - t404 * t142 + t405 * t149;
t138 = -pkin(1) * t168 + qJ(2) * t155 + t405 * t142 + t404 * t149;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t373, -t374, 0, t325, 0, 0, 0, 0, 0, 0, -t431, t429, 0, t212, 0, 0, 0, 0, 0, 0, 0, t431, -t429, t194, 0, 0, 0, 0, 0, 0, t236, t237, t265, t172, 0, 0, 0, 0, 0, 0, t163, t166, t159, t146; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t374, -t373, 0, t324, 0, 0, 0, 0, 0, 0, -t429, -t431, 0, -t500, 0, 0, 0, 0, 0, 0, 0, t429, t431, t193, 0, 0, 0, 0, 0, 0, t234, t235, t264, t171, 0, 0, 0, 0, 0, 0, t162, t165, t158, t145; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t401, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t401, 0, 0, 0, 0, 0, 0, t330, t331, 0, t227, 0, 0, 0, 0, 0, 0, t214, t216, t203, t168; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t374, 0, -t373, 0, t421, -t345, -t324, -pkin(5) * t324, 0, 0, -t429, 0, -t431, 0, t485, -t503, t500, pkin(5) * t500 + qJ(2) * t457 - t411 * t249, 0, t429, t431, 0, 0, 0, -t193, -t485, t503, -pkin(5) * t193 - t411 * t230 + t414 * t231, -t411 * t300 + t414 * t302, -t411 * t278 + t414 * t279, -t411 * t297 + t414 * t299, -t411 * t301 + t414 * t303, -t411 * t296 + t414 * t298, -t411 * t332 + t414 * t333, -pkin(5) * t234 - t411 * t173 + t414 * t180, -pkin(5) * t235 - t411 * t174 + t414 * t181, -pkin(5) * t264 - t411 * t195 + t414 * t196, -pkin(5) * t171 - t411 * t152 + t414 * t157, -t411 * t205 + t414 * t207, -t411 * t178 + t414 * t179, -t411 * t189 + t414 * t191, -t411 * t204 + t414 * t206, -t411 * t190 + t414 * t192, -t411 * t220 + t414 * t221, -pkin(5) * t162 - t411 * t143 + t414 * t147, -pkin(5) * t165 - t411 * t144 + t414 * t148, -pkin(5) * t158 - t411 * t140 + t414 * t141, -pkin(5) * t145 - t411 * t138 + t414 * t139; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t373, 0, t374, 0, t345, t421, t325, pkin(5) * t325, 0, 0, t431, 0, -t429, 0, t503, t485, t212, pkin(5) * t212 + qJ(2) * t467 + t414 * t249, 0, -t431, t429, 0, 0, 0, t194, -t503, -t485, pkin(5) * t194 + t414 * t230 + t411 * t231, t414 * t300 + t411 * t302, t414 * t278 + t411 * t279, t414 * t297 + t411 * t299, t414 * t301 + t411 * t303, t414 * t296 + t411 * t298, t414 * t332 + t411 * t333, pkin(5) * t236 + t414 * t173 + t411 * t180, pkin(5) * t237 + t414 * t174 + t411 * t181, pkin(5) * t265 + t414 * t195 + t411 * t196, pkin(5) * t172 + t414 * t152 + t411 * t157, t414 * t205 + t411 * t207, t414 * t178 + t411 * t179, t414 * t189 + t411 * t191, t414 * t204 + t411 * t206, t414 * t190 + t411 * t192, t414 * t220 + t411 * t221, pkin(5) * t163 + t414 * t143 + t411 * t147, pkin(5) * t166 + t414 * t144 + t411 * t148, pkin(5) * t159 + t414 * t140 + t411 * t141, pkin(5) * t146 + t414 * t138 + t411 * t139; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t379, t380, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t420, t424, 0, -pkin(1) * t257, qJDD(1), 0, 0, 0, 0, 0, 0, qJDD(3) - 0.2e1 * t403 - t420, -t424 + t443 + 0.2e1 * t446, pkin(1) * t241 - pkin(2) * t291 + qJ(3) * t290, (t368 - t438) * t413, -t413 * t366 - t410 * t369, -t410 * t383 + t458, (-t367 + t437) * t410, t413 * t381 - t469, 0, pkin(1) * t286 + qJ(3) * t366 - t483 * t327 + t470, pkin(1) * t287 + qJ(3) * t369 - t483 * t329 + t460, pkin(1) * t319 - qJ(3) * t375 + t483 * t372 - t226, pkin(1) * t200 + qJ(3) * t285 - t483 * t226, t413 * t269 + t442, t413 * t224 - t410 * t322, t413 * t261 - t410 * t275, t413 * t267 - t442, t413 * t262 - t410 * t270, t413 * t283 + t410 * t418, pkin(1) * t185 + qJ(3) * t247 - t410 * t182 + t413 * t208 - t483 * t213, pkin(1) * t187 + qJ(3) * t253 - t410 * t183 + t413 * t209 - t483 * t215, pkin(1) * t175 + t413 * t164 + (qJ(3) + t482) * t223 - t483 * t202, pkin(1) * t154 - t483 * t167 + (qJ(3) + t422) * t169;];
tauB_reg = t1;
