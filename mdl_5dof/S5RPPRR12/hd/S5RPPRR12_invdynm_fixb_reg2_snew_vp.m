% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPPRR12
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:07
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPPRR12_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR12_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR12_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR12_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR12_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRR12_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:07:36
% EndTime: 2019-12-31 18:07:46
% DurationCPUTime: 10.86s
% Computational Cost: add. (38751->557), mult. (88057->691), div. (0->0), fcn. (60519->8), ass. (0->354)
t856 = sin(qJ(4));
t852 = sin(pkin(8));
t853 = cos(pkin(8));
t859 = cos(qJ(4));
t889 = t852 * t859 + t853 * t856;
t817 = t889 * qJD(1);
t819 = (-t852 * t856 + t853 * t859) * qJD(1);
t940 = t819 * t817;
t967 = qJDD(4) - t940;
t969 = t856 * t967;
t968 = t859 * t967;
t855 = sin(qJ(5));
t858 = cos(qJ(5));
t790 = -t858 * qJD(4) + t819 * t855;
t792 = qJD(4) * t855 + t819 * t858;
t757 = t792 * t790;
t929 = t819 * qJD(4);
t961 = t889 * qJDD(1);
t778 = -t961 - t929;
t769 = qJDD(5) - t778;
t962 = -t757 + t769;
t966 = t855 * t962;
t965 = t858 * t962;
t861 = qJD(1) ^ 2;
t924 = t852 * qJDD(1);
t848 = t852 ^ 2;
t849 = t853 ^ 2;
t931 = t848 + t849;
t952 = pkin(1) + qJ(3);
t964 = pkin(3) * t924 - (t931 * pkin(6) + t952) * t861;
t963 = t931 * t861;
t857 = sin(qJ(1));
t860 = cos(qJ(1));
t830 = t857 * g(1) - t860 * g(2);
t894 = qJDD(2) - t830;
t878 = -t861 * qJ(2) + t894;
t865 = -t952 * qJDD(1) + t878;
t927 = qJD(3) * qJD(1);
t771 = g(3) * t853 + (-t865 + 0.2e1 * t927) * t852;
t937 = t848 * t861;
t758 = -pkin(3) * t937 - pkin(6) * t924 - t771;
t923 = -0.2e1 * t927;
t953 = t852 * g(3);
t864 = t953 + (t923 + (-pkin(3) * t852 - qJ(2)) * t861 + (-pkin(6) - t952) * qJDD(1) + t894) * t853;
t711 = t859 * t758 + t856 * t864;
t772 = pkin(4) * t817 - pkin(7) * t819;
t958 = qJD(4) ^ 2;
t658 = -t958 * pkin(4) + qJDD(4) * pkin(7) - t772 * t817 + t711;
t842 = t853 * qJDD(1);
t815 = t859 * t842 - t856 * t924;
t930 = t817 * qJD(4);
t780 = -t930 + t815;
t928 = qJD(2) * qJD(1);
t846 = 0.2e1 * t928;
t831 = t860 * g(1) + t857 * g(2);
t850 = qJDD(1) * qJ(2);
t885 = -t831 + t850;
t674 = qJDD(3) + t846 + (-t780 + t930) * pkin(7) + (-t778 + t929) * pkin(4) + t885 + t964;
t618 = t658 * t855 - t858 * t674;
t619 = t658 * t858 + t674 * t855;
t587 = t855 * t618 + t858 * t619;
t770 = t953 + (t865 + t923) * t853;
t720 = t853 * t770 - t852 * t771;
t788 = t790 ^ 2;
t789 = t792 ^ 2;
t806 = qJD(5) + t817;
t805 = t806 ^ 2;
t812 = t817 ^ 2;
t813 = t819 ^ 2;
t957 = pkin(2) * t720;
t867 = -t885 - 0.2e1 * t928;
t866 = -qJDD(3) + t867;
t794 = t952 * t861 + t866;
t956 = pkin(2) * t794;
t824 = t931 * qJDD(1);
t955 = pkin(2) * t824;
t954 = pkin(4) * t856;
t951 = qJDD(1) * pkin(1);
t710 = t758 * t856 - t859 * t864;
t646 = -t710 * t859 + t711 * t856;
t950 = t646 * t852;
t949 = t646 * t853;
t718 = t757 + t769;
t948 = t718 * t855;
t947 = t718 * t858;
t766 = t866 - t964;
t946 = t766 * t856;
t945 = t766 * t859;
t775 = qJDD(4) + t940;
t944 = t775 * t856;
t943 = t775 * t859;
t942 = t806 * t855;
t941 = t806 * t858;
t939 = t824 * t857;
t938 = t824 * t860;
t935 = t852 * t794;
t934 = t852 * t853;
t785 = t853 * t794;
t657 = -qJDD(4) * pkin(4) - t958 * pkin(7) + t772 * t819 + t710;
t654 = t855 * t657;
t655 = t858 * t657;
t933 = -pkin(4) * t657 + pkin(7) * t587;
t932 = t848 - t849;
t926 = t848 * qJDD(1);
t925 = t849 * qJDD(1);
t922 = t856 * t757;
t921 = t859 * t757;
t920 = t790 * t942;
t919 = t857 * t940;
t918 = t860 * t940;
t744 = -t789 - t805;
t672 = -t744 * t855 - t947;
t886 = -t855 * qJDD(4) - t858 * t780;
t706 = (qJD(5) + t806) * t790 + t886;
t917 = pkin(4) * t706 + pkin(7) * t672 + t654;
t734 = -t805 - t788;
t664 = t734 * t858 - t966;
t902 = t858 * qJDD(4) - t855 * t780;
t733 = -qJD(5) * t792 + t902;
t763 = t806 * t792;
t702 = t733 - t763;
t916 = pkin(4) * t702 + pkin(7) * t664 - t655;
t581 = t587 * t856 - t657 * t859;
t915 = pkin(3) * t581 + t933;
t800 = -t813 - t958;
t740 = t800 * t859 - t944;
t914 = pkin(3) * t740 - t711;
t913 = -pkin(4) * t859 - pkin(3);
t647 = t710 * t856 + t859 * t711;
t605 = t647 * t852 + t949;
t645 = pkin(3) * t646;
t912 = -pkin(2) * t605 - t645;
t727 = -t815 * t859 - t856 * t961;
t729 = t815 * t856 - t859 * t961;
t666 = t727 * t853 + t729 * t852;
t726 = pkin(3) * t727;
t911 = -pkin(2) * t666 - t726;
t582 = t587 * t859 + t657 * t856;
t586 = -t618 * t858 + t619 * t855;
t557 = pkin(6) * t582 + (-pkin(7) * t856 + t913) * t586;
t560 = -pkin(6) * t581 + (-pkin(7) * t859 + t954) * t586;
t910 = -t852 * t557 + t853 * t560;
t703 = (-qJD(5) + t806) * t792 + t902;
t762 = t806 * t790;
t869 = -qJD(5) * t790 - t886;
t705 = t762 + t869;
t642 = t703 * t855 - t705 * t858;
t579 = -pkin(7) * t642 - t586;
t644 = t703 * t858 + t705 * t855;
t731 = t788 + t789;
t622 = t644 * t859 - t731 * t856;
t563 = pkin(6) * t622 + t856 * t579 + t913 * t642;
t621 = t644 * t856 + t731 * t859;
t567 = -pkin(6) * t621 + t579 * t859 + t642 * t954;
t909 = -t852 * t563 + t853 * t567;
t663 = t734 * t855 + t965;
t603 = -pkin(4) * t663 + t618;
t614 = -pkin(7) * t663 + t654;
t629 = t664 * t859 - t702 * t856;
t570 = -pkin(3) * t663 + pkin(6) * t629 + t603 * t859 + t614 * t856;
t628 = t664 * t856 + t702 * t859;
t574 = -pkin(6) * t628 - t603 * t856 + t614 * t859;
t908 = -t852 * t570 + t853 * t574;
t671 = t744 * t858 - t948;
t604 = -pkin(4) * t671 + t619;
t617 = -pkin(7) * t671 + t655;
t634 = t672 * t859 - t706 * t856;
t571 = -pkin(3) * t671 + pkin(6) * t634 + t604 * t859 + t617 * t856;
t633 = t672 * t856 + t706 * t859;
t576 = -pkin(6) * t633 - t604 * t856 + t617 * t859;
t907 = -t852 * t571 + t853 * t576;
t756 = -t812 - t813;
t613 = -pkin(3) * t756 + pkin(6) * t729 + t647;
t624 = -pkin(6) * t727 - t646;
t906 = -t852 * t613 + t853 * t624;
t773 = -t958 - t812;
t724 = t773 * t859 - t969;
t777 = t961 + 0.2e1 * t929;
t665 = -pkin(3) * t777 + pkin(6) * t724 + t945;
t723 = t773 * t856 + t968;
t693 = -pkin(6) * t723 - t946;
t905 = -t852 * t665 + t853 * t693;
t743 = -t800 * t856 - t943;
t779 = -0.2e1 * t930 + t815;
t675 = -pkin(3) * t779 + pkin(6) * t743 - t946;
t709 = -pkin(6) * t740 - t945;
t904 = -t852 * t675 + t853 * t709;
t801 = t861 * pkin(1) + t867;
t807 = -t878 + t951;
t901 = -t860 * t801 - t807 * t857;
t900 = -t830 * t857 - t860 * t831;
t899 = pkin(4) * t731 + pkin(7) * t644 + t587;
t898 = pkin(3) * t633 + t917;
t897 = pkin(3) * t628 + t916;
t828 = qJDD(1) * t860 - t857 * t861;
t896 = pkin(5) * t828 + g(3) * t857;
t829 = qJDD(1) * t857 + t860 * t861;
t895 = -pkin(5) * t829 + g(3) * t860;
t893 = pkin(3) * t723 - t710;
t892 = pkin(3) * t621 + t899;
t721 = -t770 * t852 - t771 * t853;
t891 = t801 * t857 - t807 * t860;
t890 = t830 * t860 - t831 * t857;
t564 = t581 * t853 + t582 * t852;
t888 = -pkin(2) * t564 - t915;
t684 = t740 * t853 + t743 * t852;
t887 = -pkin(2) * t684 - t914;
t635 = pkin(3) * t766 + pkin(6) * t647;
t884 = -pkin(6) * t949 - t852 * t635;
t592 = t628 * t853 + t629 * t852;
t883 = -pkin(2) * t592 - t897;
t596 = t633 * t853 + t634 * t852;
t882 = -pkin(2) * t596 - t898;
t822 = t852 * t963;
t881 = -t822 * t857 + t860 * t924;
t880 = t822 * t860 + t857 * t924;
t660 = t723 * t853 + t724 * t852;
t879 = -pkin(2) * t660 - t893;
t588 = t621 * t853 + t622 * t852;
t877 = -pkin(2) * t588 - t892;
t876 = pkin(2) * t586 - t853 * t557 - t852 * t560;
t875 = pkin(2) * t642 - t853 * t563 - t852 * t567;
t874 = pkin(2) * t663 - t853 * t570 - t852 * t574;
t873 = pkin(2) * t671 - t853 * t571 - t852 * t576;
t872 = pkin(2) * t756 - t853 * t613 - t852 * t624;
t871 = pkin(2) * t777 - t853 * t665 - t852 * t693;
t870 = pkin(2) * t779 - t853 * t675 - t852 * t709;
t868 = -pkin(2) * t766 + pkin(6) * t950 - t853 * t635;
t834 = t861 * t934;
t833 = t852 * t842;
t832 = -0.2e1 * t833;
t827 = t932 * t861;
t825 = t932 * qJDD(1);
t821 = t853 * t963;
t820 = t894 - 0.2e1 * t951;
t816 = -t831 + t846 + 0.2e1 * t850;
t799 = -t813 + t958;
t798 = t812 - t958;
t797 = t829 * t934;
t796 = t828 * t934;
t787 = -t821 * t857 + t860 * t842;
t786 = t821 * t860 + t857 * t842;
t783 = t813 - t812;
t782 = -pkin(2) * t924 + t785;
t781 = -pkin(2) * t842 - t935;
t767 = pkin(1) * t807 - qJ(2) * t801;
t765 = (-t817 * t859 + t819 * t856) * qJD(4);
t764 = (-t817 * t856 - t819 * t859) * qJD(4);
t761 = -t789 + t805;
t760 = t788 - t805;
t759 = t792 * t941;
t754 = -pkin(2) * t822 + t770;
t753 = -pkin(2) * t821 + t771;
t752 = t789 - t788;
t748 = t780 * t859 - t856 * t929;
t747 = t780 * t856 + t859 * t929;
t746 = -t778 * t856 + t859 * t930;
t745 = t778 * t859 + t856 * t930;
t742 = -t799 * t856 + t968;
t741 = t798 * t859 - t944;
t739 = t799 * t859 + t969;
t738 = t798 * t856 + t943;
t736 = qJ(2) * t842 + t952 * t821 - t785;
t735 = (-t794 + t850) * t852 + t952 * t822;
t730 = -t777 * t859 - t779 * t856;
t728 = -t777 * t856 + t779 * t859;
t716 = (-t790 * t858 + t792 * t855) * t806;
t715 = -t759 - t920;
t714 = pkin(2) * t963 + t721;
t713 = -t764 * t852 + t765 * t853;
t712 = t764 * t853 + t765 * t852;
t704 = -t762 + t869;
t701 = -t733 - t763;
t698 = -qJ(2) * t963 + t952 * t824 - t720;
t697 = -t792 * t942 + t858 * t869;
t696 = -t855 * t869 - t759;
t695 = -t733 * t855 + t790 * t941;
t694 = t733 * t858 + t920;
t692 = -t747 * t852 + t748 * t853;
t691 = -t745 * t852 + t746 * t853;
t690 = t747 * t853 + t748 * t852;
t689 = t745 * t853 + t746 * t852;
t687 = -t740 * t852 + t743 * t853;
t686 = -t739 * t852 + t742 * t853;
t685 = -t738 * t852 + t741 * t853;
t683 = t739 * t853 + t742 * t852;
t682 = t738 * t853 + t741 * t852;
t681 = t716 * t859 + t769 * t856;
t680 = t716 * t856 - t769 * t859;
t679 = t760 * t858 - t948;
t678 = -t761 * t855 + t965;
t677 = t760 * t855 + t947;
t676 = t761 * t858 + t966;
t669 = -t728 * t852 + t730 * t853;
t668 = -t727 * t852 + t729 * t853;
t667 = t728 * t853 + t730 * t852;
t662 = -qJ(2) * t721 + t957;
t661 = -t723 * t852 + t724 * t853;
t653 = t697 * t859 + t922;
t652 = t695 * t859 - t922;
t651 = t697 * t856 - t921;
t650 = t695 * t856 + t921;
t649 = -t952 * t721 - t956;
t648 = -qJ(2) * t794 - t952 * t720;
t643 = t702 * t858 - t704 * t855;
t641 = t702 * t855 + t704 * t858;
t639 = t679 * t859 - t701 * t856;
t638 = t678 * t859 + t705 * t856;
t637 = t679 * t856 + t701 * t859;
t636 = t678 * t856 - t705 * t859;
t631 = -t680 * t852 + t681 * t853;
t630 = t680 * t853 + t681 * t852;
t626 = t643 * t859 + t752 * t856;
t625 = t643 * t856 - t752 * t859;
t612 = -t651 * t852 + t653 * t853;
t611 = -t650 * t852 + t652 * t853;
t610 = t651 * t853 + t653 * t852;
t609 = t650 * t853 + t652 * t852;
t608 = -qJ(2) * t668 - t911;
t607 = -qJ(2) * t687 - t887;
t606 = t647 * t853 - t950;
t602 = -qJ(2) * t661 - t879;
t601 = -t637 * t852 + t639 * t853;
t600 = -t636 * t852 + t638 * t853;
t599 = t637 * t853 + t639 * t852;
t598 = t636 * t853 + t638 * t852;
t597 = -t633 * t852 + t634 * t853;
t595 = -t952 * t687 + t870;
t594 = qJ(2) * t779 - t952 * t684 + t904;
t593 = -t628 * t852 + t629 * t853;
t591 = -t625 * t852 + t626 * t853;
t590 = t625 * t853 + t626 * t852;
t589 = -t621 * t852 + t622 * t853;
t584 = -t952 * t661 + t871;
t583 = qJ(2) * t777 - t952 * t660 + t905;
t578 = -t952 * t668 + t872;
t577 = qJ(2) * t756 - t952 * t666 + t906;
t572 = -qJ(2) * t606 - t912;
t569 = -t952 * t606 + t868;
t568 = -qJ(2) * t766 - t952 * t605 + t884;
t565 = -t581 * t852 + t582 * t853;
t562 = -qJ(2) * t597 - t882;
t561 = -qJ(2) * t593 - t883;
t558 = -qJ(2) * t589 - t877;
t556 = -t952 * t597 + t873;
t555 = qJ(2) * t671 - t952 * t596 + t907;
t554 = -t952 * t593 + t874;
t553 = qJ(2) * t663 - t952 * t592 + t908;
t552 = -t952 * t589 + t875;
t551 = qJ(2) * t642 - t952 * t588 + t909;
t550 = -qJ(2) * t565 - t888;
t549 = -t952 * t565 + t876;
t548 = qJ(2) * t586 - t952 * t564 + t910;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t828, 0, -t829, 0, -t896, -t895, -t890, -pkin(5) * t890, 0, -t828, t829, 0, 0, 0, t891, t896, t895, pkin(5) * t891 + (-pkin(1) * t857 + qJ(2) * t860) * g(3), t797, -t825 * t857 - t827 * t860, t787, -t797, -t881, 0, -pkin(5) * t880 + t860 * t754 + t857 * t782, -pkin(5) * t786 + t753 * t860 + t781 * t857, -pkin(2) * t938 + t857 * t714 - pkin(5) * (-t857 * t963 + t938), t860 * t662 - t857 * t649 - pkin(5) * (-t720 * t860 - t794 * t857), t690 * t857 + t918, t667 * t857 + t783 * t860, t683 * t857 + t815 * t860, t689 * t857 - t918, t682 * t857 - t860 * t961, qJDD(4) * t860 + t712 * t857, t860 * t602 - t857 * t584 - pkin(5) * (-t660 * t860 + t777 * t857), t860 * t607 - t857 * t595 - pkin(5) * (-t684 * t860 + t779 * t857), t860 * t608 - t857 * t578 - pkin(5) * (-t666 * t860 + t756 * t857), t860 * t572 - t857 * t569 - pkin(5) * (-t605 * t860 - t766 * t857), t610 * t857 - t696 * t860, t590 * t857 + t641 * t860, t598 * t857 + t676 * t860, t609 * t857 + t694 * t860, t599 * t857 + t677 * t860, t630 * t857 + t715 * t860, t860 * t561 - t857 * t554 - pkin(5) * (-t592 * t860 + t663 * t857), t860 * t562 - t857 * t556 - pkin(5) * (-t596 * t860 + t671 * t857), t860 * t558 - t857 * t552 - pkin(5) * (-t588 * t860 + t642 * t857), t860 * t550 - t857 * t549 - pkin(5) * (-t564 * t860 + t586 * t857); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t829, 0, t828, 0, t895, -t896, t900, pkin(5) * t900, 0, -t829, -t828, 0, 0, 0, t901, -t895, t896, pkin(5) * t901 + (pkin(1) * t860 + qJ(2) * t857) * g(3), -t796, t825 * t860 - t827 * t857, t786, t796, -t880, 0, pkin(5) * t881 + t857 * t754 - t860 * t782, pkin(5) * t787 + t753 * t857 - t781 * t860, -pkin(2) * t939 - t860 * t714 + pkin(5) * (-t860 * t963 - t939), t857 * t662 + t860 * t649 + pkin(5) * (t720 * t857 - t794 * t860), -t690 * t860 + t919, -t667 * t860 + t783 * t857, -t683 * t860 + t815 * t857, -t689 * t860 - t919, -t682 * t860 - t857 * t961, qJDD(4) * t857 - t712 * t860, t857 * t602 + t860 * t584 + pkin(5) * (t660 * t857 + t777 * t860), t857 * t607 + t860 * t595 + pkin(5) * (t684 * t857 + t779 * t860), t857 * t608 + t860 * t578 + pkin(5) * (t666 * t857 + t756 * t860), t857 * t572 + t860 * t569 + pkin(5) * (t605 * t857 - t766 * t860), -t610 * t860 - t696 * t857, -t590 * t860 + t641 * t857, -t598 * t860 + t676 * t857, -t609 * t860 + t694 * t857, -t599 * t860 + t677 * t857, -t630 * t860 + t715 * t857, t857 * t561 + t860 * t554 + pkin(5) * (t592 * t857 + t663 * t860), t857 * t562 + t860 * t556 + pkin(5) * (t596 * t857 + t671 * t860), t857 * t558 + t860 * t552 + pkin(5) * (t588 * t857 + t642 * t860), t857 * t550 + t860 * t549 + pkin(5) * (t564 * t857 + t586 * t860); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t830, t831, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t820, t816, t767, t925, t832, 0, t926, 0, 0, t735, t736, t698, t648, t692, t669, t686, t691, t685, t713, t583, t594, t577, t568, t612, t591, t600, t611, t601, t631, t553, t555, t551, t548; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t861, 0, 0, -g(3), -t830, 0, 0, -qJDD(1), t861, 0, 0, 0, -t807, 0, g(3), qJ(2) * g(3), t834, -t827, t842, -t834, -t924, 0, t754, t753, -t955, t662, t940, t783, t815, -t940, -t961, qJDD(4), t602, t607, t608, t572, -t696, t641, t676, t694, t677, t715, t561, t562, t558, t550; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t861, 0, qJDD(1), 0, g(3), 0, -t831, 0, 0, -t861, -qJDD(1), 0, 0, 0, -t801, -g(3), 0, pkin(1) * g(3), -t833, t825, t821, t833, -t822, 0, -t782, -t781, -t714, t649, -t690, -t667, -t683, -t689, -t682, -t712, t584, t595, t578, t569, -t610, -t590, -t598, -t609, -t599, -t630, t554, t556, t552, t549; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t830, t831, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t820, t816, t767, t925, t832, 0, t926, 0, 0, t735, t736, t698, t648, t692, t669, t686, t691, t685, t713, t583, t594, t577, t568, t612, t591, t600, t611, t601, t631, t553, t555, t551, t548; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t807, -t801, 0, t925, t832, 0, t926, 0, 0, qJ(3) * t822 - t935, qJ(3) * t821 - t785, qJ(3) * t824 - t720, -qJ(3) * t720, t692, t669, t686, t691, t685, t713, -qJ(3) * t660 + t905, -qJ(3) * t684 + t904, -qJ(3) * t666 + t906, -qJ(3) * t605 + t884, t612, t591, t600, t611, t601, t631, -qJ(3) * t592 + t908, -qJ(3) * t596 + t907, -qJ(3) * t588 + t909, -qJ(3) * t564 + t910; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t861, 0, 0, 0, t807, 0, -g(3), 0, -t834, t827, -t842, t834, t924, 0, -t754, -t753, t955, -t957, -t940, -t783, -t815, t940, t961, -qJDD(4), t879, t887, t911, t912, t696, -t641, -t676, -t694, -t677, -t715, t883, t882, t877, t888; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t861, qJDD(1), 0, 0, 0, t801, g(3), 0, 0, t833, -t825, -t821, -t833, t822, 0, t782, t781, t714, qJ(3) * t721 + t956, t690, t667, t683, t689, t682, t712, qJ(3) * t661 - t871, qJ(3) * t687 - t870, qJ(3) * t668 - t872, qJ(3) * t606 - t868, t610, t590, t598, t609, t599, t630, qJ(3) * t593 - t874, qJ(3) * t597 - t873, qJ(3) * t589 - t875, qJ(3) * t565 - t876; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t842, -t924, -t834, 0, t937, 0, 0, -t794, -t770, 0, t748, t730, t742, t746, t741, t765, t693, t709, t624, -pkin(6) * t646, t653, t626, t638, t652, t639, t681, t574, t576, t567, t560; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t842, -t849 * t861, -t924, t834, 0, t794, 0, -t771, 0, t747, t728, t739, t745, t738, t764, t665, t675, t613, t635, t651, t625, t636, t650, t637, t680, t570, t571, t563, t557; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t834, -t827, t842, -t834, -t924, 0, t770, t771, 0, 0, t940, t783, t815, -t940, -t961, qJDD(4), t893, t914, t726, t645, -t696, t641, t676, t694, t677, t715, t897, t898, t892, t915; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t780, -t777, t967, t930, t798, -t930, 0, -t766, t710, 0, t697, t643, t678, t695, t679, t716, t614, t617, t579, -pkin(7) * t586; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t929, t779, t799, t778, t775, -t929, t766, 0, t711, 0, -t757, -t752, -t705, t757, t701, -t769, t603, t604, -pkin(4) * t642, -pkin(4) * t586; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t940, t783, t815, -t940, -t961, qJDD(4), -t710, -t711, 0, 0, -t696, t641, t676, t694, t677, t715, t916, t917, t899, t933; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t869, t702, t962, t762, t760, -t762, 0, t657, t618, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t763, t704, t761, t733, t718, -t763, -t657, 0, t619, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t757, t752, t705, -t757, -t701, t769, -t618, -t619, 0, 0;];
m_new_reg = t1;
