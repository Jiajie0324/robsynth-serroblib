% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPPRR12
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:07
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPPRR12_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR12_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR12_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR12_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR12_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRR12_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:07:46
% EndTime: 2019-12-31 18:07:48
% DurationCPUTime: 2.03s
% Computational Cost: add. (6262->199), mult. (14269->233), div. (0->0), fcn. (9930->8), ass. (0->133)
t1087 = sin(qJ(1));
t1090 = cos(qJ(1));
t1065 = t1087 * g(1) - t1090 * g(2);
t1092 = qJD(1) ^ 2;
t1099 = -t1092 * qJ(2) + qJDD(2) - t1065;
t1120 = pkin(1) + qJ(3);
t1121 = -2 * qJD(1);
t1106 = (qJD(3) * t1121) - t1120 * qJDD(1) + t1099;
t1082 = sin(pkin(8));
t1083 = cos(pkin(8));
t1086 = sin(qJ(4));
t1089 = cos(qJ(4));
t1058 = (-t1082 * t1086 + t1083 * t1089) * qJD(1);
t1116 = t1058 * qJD(4);
t1102 = t1082 * t1089 + t1083 * t1086;
t1129 = t1102 * qJDD(1);
t1132 = -qJDD(5) - t1116 - t1129;
t1071 = t1082 * qJDD(1);
t1066 = -t1090 * g(1) - t1087 * g(2);
t1098 = -qJDD(1) * qJ(2) + (qJD(2) * t1121) - t1066;
t1097 = -qJDD(3) + t1098;
t1078 = t1082 ^ 2;
t1079 = t1083 ^ 2;
t1111 = t1078 + t1079;
t1035 = -pkin(3) * t1071 + (t1111 * pkin(6) + t1120) * t1092 + t1097;
t1056 = t1102 * qJD(1);
t1131 = t1111 * t1092;
t1053 = qJD(5) + t1056;
t1130 = qJD(5) + t1053;
t1085 = sin(qJ(5));
t1088 = cos(qJ(5));
t1045 = -t1088 * qJD(4) + t1085 * t1058;
t1126 = t1045 ^ 2;
t1047 = t1085 * qJD(4) + t1088 * t1058;
t1125 = t1047 ^ 2;
t1124 = t1053 ^ 2;
t1123 = t1056 ^ 2;
t1122 = t1058 ^ 2;
t1119 = t1082 * g(3);
t1118 = t1047 * t1045;
t1117 = t1056 * qJD(4);
t1115 = t1058 * t1056;
t1114 = t1078 * t1092;
t1113 = t1082 * t1092;
t1112 = qJD(5) - t1053;
t1037 = -t1083 * g(3) + t1106 * t1082;
t1033 = -pkin(3) * t1114 - pkin(6) * t1071 + t1037;
t1095 = t1119 + (-pkin(3) * t1113 - qJDD(1) * pkin(6) + t1106) * t1083;
t1014 = t1089 * t1033 + t1086 * t1095;
t1072 = t1083 * qJDD(1);
t1110 = t1087 * qJDD(1);
t1109 = t1090 * qJDD(1);
t1107 = t1083 * t1113;
t1013 = -t1086 * t1033 + t1089 * t1095;
t1103 = -t1086 * t1071 + t1089 * t1072;
t1044 = t1103 - t1117;
t1105 = t1088 * qJDD(4) - t1085 * t1044;
t1101 = -t1085 * qJDD(4) - t1088 * t1044;
t1042 = t1129 + 0.2e1 * t1116;
t1091 = qJD(4) ^ 2;
t1064 = t1090 * t1092 + t1110;
t1063 = -t1087 * t1092 + t1109;
t1061 = t1111 * qJDD(1);
t1060 = t1082 * t1131;
t1059 = t1083 * t1131;
t1054 = qJDD(1) * pkin(1) - t1099;
t1052 = t1092 * pkin(1) + t1098;
t1051 = -t1091 - t1122;
t1049 = t1120 * t1092 + t1097;
t1043 = t1103 - 0.2e1 * t1117;
t1041 = -qJDD(4) - t1115;
t1040 = qJDD(4) - t1115;
t1039 = -t1091 - t1123;
t1038 = t1056 * pkin(4) - t1058 * pkin(7);
t1036 = t1106 * t1083 + t1119;
t1032 = -t1122 - t1123;
t1027 = -t1124 - t1125;
t1026 = t1089 * t1041 - t1086 * t1051;
t1025 = t1086 * t1041 + t1089 * t1051;
t1024 = -t1124 - t1126;
t1023 = -t1125 - t1126;
t1022 = t1086 * t1103 - t1089 * t1129;
t1021 = -t1086 * t1129 - t1089 * t1103;
t1020 = t1089 * t1039 - t1086 * t1040;
t1019 = t1086 * t1039 + t1089 * t1040;
t1018 = -t1082 * t1036 + t1083 * t1037;
t1017 = t1083 * t1036 + t1082 * t1037;
t1016 = -t1118 + t1132;
t1015 = -t1118 - t1132;
t1012 = t1112 * t1045 + t1101;
t1011 = -t1130 * t1045 - t1101;
t1010 = -t1112 * t1047 + t1105;
t1009 = t1130 * t1047 - t1105;
t1008 = -t1082 * t1025 + t1083 * t1026;
t1007 = t1083 * t1025 + t1082 * t1026;
t1006 = (-t1044 + t1117) * pkin(7) + t1042 * pkin(4) - t1035;
t1005 = t1088 * t1016 - t1085 * t1027;
t1004 = t1085 * t1016 + t1088 * t1027;
t1003 = -t1082 * t1021 + t1083 * t1022;
t1002 = t1083 * t1021 + t1082 * t1022;
t1001 = -t1085 * t1015 + t1088 * t1024;
t1000 = t1088 * t1015 + t1085 * t1024;
t999 = -t1082 * t1019 + t1083 * t1020;
t998 = t1083 * t1019 + t1082 * t1020;
t997 = -t1091 * pkin(4) + qJDD(4) * pkin(7) - t1056 * t1038 + t1014;
t996 = -qJDD(4) * pkin(4) - t1091 * pkin(7) + t1058 * t1038 - t1013;
t995 = -t1086 * t1013 + t1089 * t1014;
t994 = t1089 * t1013 + t1086 * t1014;
t993 = t1088 * t1010 - t1085 * t1012;
t992 = t1085 * t1010 + t1088 * t1012;
t991 = t1089 * t1005 + t1086 * t1011;
t990 = t1086 * t1005 - t1089 * t1011;
t989 = t1089 * t1001 + t1086 * t1009;
t988 = t1086 * t1001 - t1089 * t1009;
t987 = t1086 * t1023 + t1089 * t993;
t986 = -t1089 * t1023 + t1086 * t993;
t985 = t1085 * t1006 + t1088 * t997;
t984 = t1088 * t1006 - t1085 * t997;
t983 = -t1082 * t994 + t1083 * t995;
t982 = t1082 * t995 + t1083 * t994;
t981 = -t1082 * t990 + t1083 * t991;
t980 = t1082 * t991 + t1083 * t990;
t979 = -t1082 * t988 + t1083 * t989;
t978 = t1082 * t989 + t1083 * t988;
t977 = -t1082 * t986 + t1083 * t987;
t976 = t1082 * t987 + t1083 * t986;
t975 = -t1085 * t984 + t1088 * t985;
t974 = t1085 * t985 + t1088 * t984;
t973 = t1086 * t996 + t1089 * t975;
t972 = t1086 * t975 - t1089 * t996;
t971 = -t1082 * t972 + t1083 * t973;
t970 = t1082 * t973 + t1083 * t972;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1064, -t1063, 0, -t1087 * t1065 + t1090 * t1066, 0, 0, 0, 0, 0, 0, 0, t1064, t1063, -t1090 * t1052 - t1087 * t1054, 0, 0, 0, 0, 0, 0, -t1087 * t1060 + t1082 * t1109, -t1087 * t1059 + t1083 * t1109, -t1087 * t1061 - t1090 * t1131, t1087 * t1017 - t1090 * t1049, 0, 0, 0, 0, 0, 0, t1090 * t1042 + t1087 * t998, t1087 * t1007 + t1090 * t1043, t1087 * t1002 + t1090 * t1032, -t1090 * t1035 + t1087 * t982, 0, 0, 0, 0, 0, 0, t1090 * t1000 + t1087 * t978, t1090 * t1004 + t1087 * t980, t1087 * t976 + t1090 * t992, t1087 * t970 + t1090 * t974; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1063, -t1064, 0, t1090 * t1065 + t1087 * t1066, 0, 0, 0, 0, 0, 0, 0, -t1063, t1064, -t1087 * t1052 + t1090 * t1054, 0, 0, 0, 0, 0, 0, t1090 * t1060 + t1082 * t1110, t1090 * t1059 + t1083 * t1110, t1090 * t1061 - t1087 * t1131, -t1090 * t1017 - t1087 * t1049, 0, 0, 0, 0, 0, 0, t1087 * t1042 - t1090 * t998, -t1090 * t1007 + t1087 * t1043, -t1090 * t1002 + t1087 * t1032, -t1087 * t1035 - t1090 * t982, 0, 0, 0, 0, 0, 0, t1087 * t1000 - t1090 * t978, t1087 * t1004 - t1090 * t980, t1087 * t992 - t1090 * t976, t1087 * t974 - t1090 * t970; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1018, 0, 0, 0, 0, 0, 0, t999, t1008, t1003, t983, 0, 0, 0, 0, 0, 0, t979, t981, t977, t971; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1092, -qJDD(1), 0, t1066, 0, 0, 0, 0, 0, 0, 0, t1092, qJDD(1), -t1052, 0, 0, 0, 0, 0, 0, t1071, t1072, -t1131, -t1049, 0, 0, 0, 0, 0, 0, t1042, t1043, t1032, -t1035, 0, 0, 0, 0, 0, 0, t1000, t1004, t992, t974; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1092, 0, t1065, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), t1092, t1054, 0, 0, 0, 0, 0, 0, t1060, t1059, t1061, -t1017, 0, 0, 0, 0, 0, 0, -t998, -t1007, -t1002, -t982, 0, 0, 0, 0, 0, 0, -t978, -t980, -t976, -t970; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1018, 0, 0, 0, 0, 0, 0, t999, t1008, t1003, t983, 0, 0, 0, 0, 0, 0, t979, t981, t977, t971; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1018, 0, 0, 0, 0, 0, 0, t999, t1008, t1003, t983, 0, 0, 0, 0, 0, 0, t979, t981, t977, t971; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1092, -qJDD(1), t1052, 0, 0, 0, 0, 0, 0, -t1071, -t1072, t1131, t1049, 0, 0, 0, 0, 0, 0, -t1042, -t1043, -t1032, t1035, 0, 0, 0, 0, 0, 0, -t1000, -t1004, -t992, -t974; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1092, -t1054, 0, 0, 0, 0, 0, 0, -t1060, -t1059, -t1061, t1017, 0, 0, 0, 0, 0, 0, t998, t1007, t1002, t982, 0, 0, 0, 0, 0, 0, t978, t980, t976, t970; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1114, -t1107, -t1071, t1037, 0, 0, 0, 0, 0, 0, t1020, t1026, t1022, t995, 0, 0, 0, 0, 0, 0, t989, t991, t987, t973; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1107, -t1079 * t1092, -t1072, t1036, 0, 0, 0, 0, 0, 0, t1019, t1025, t1021, t994, 0, 0, 0, 0, 0, 0, t988, t990, t986, t972; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1071, t1072, -t1131, -t1049, 0, 0, 0, 0, 0, 0, t1042, t1043, t1032, -t1035, 0, 0, 0, 0, 0, 0, t1000, t1004, t992, t974; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1039, t1041, -t1129, t1014, 0, 0, 0, 0, 0, 0, t1001, t1005, t993, t975; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1040, t1051, -t1103, t1013, 0, 0, 0, 0, 0, 0, -t1009, -t1011, -t1023, -t996; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1042, t1043, t1032, -t1035, 0, 0, 0, 0, 0, 0, t1000, t1004, t992, t974; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1024, t1016, t1010, t985; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1015, t1027, t1012, t984; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1009, t1011, t1023, t996;];
f_new_reg = t1;
