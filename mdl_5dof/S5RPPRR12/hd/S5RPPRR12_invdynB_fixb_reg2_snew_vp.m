% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPPRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:07
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPPRR12_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR12_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR12_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR12_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR12_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRR12_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:07:28
% EndTime: 2019-12-31 18:07:36
% DurationCPUTime: 7.04s
% Computational Cost: add. (19054->447), mult. (43256->661), div. (0->0), fcn. (29846->8), ass. (0->296)
t473 = sin(qJ(4));
t469 = sin(pkin(8));
t470 = cos(pkin(8));
t476 = cos(qJ(4));
t490 = t469 * t476 + t470 * t473;
t440 = t490 * qJD(1);
t442 = (-t469 * t473 + t470 * t476) * qJD(1);
t528 = t442 * t440;
t545 = qJDD(4) - t528;
t547 = t473 * t545;
t546 = t476 * t545;
t479 = qJD(1) ^ 2;
t474 = sin(qJ(1));
t477 = cos(qJ(1));
t452 = t474 * g(1) - t477 * g(2);
t491 = qJDD(2) - t452;
t485 = -t479 * qJ(2) + t491;
t532 = pkin(1) + qJ(3);
t494 = -0.2e1 * qJD(3) * qJD(1) - t532 * qJDD(1) + t485;
t511 = t442 * qJD(4);
t538 = t490 * qJDD(1);
t397 = -t538 - t511;
t483 = qJDD(5) - t397;
t472 = sin(qJ(5));
t475 = cos(qJ(5));
t415 = -t475 * qJD(4) + t472 * t442;
t417 = t472 * qJD(4) + t475 * t442;
t377 = t417 * t415;
t539 = -t377 + t483;
t543 = t472 * t539;
t542 = t475 * t539;
t507 = qJDD(1) * t469;
t465 = t469 ^ 2;
t466 = t470 ^ 2;
t513 = t465 + t466;
t541 = pkin(3) * t507 - (t513 * pkin(6) + t532) * t479;
t540 = t513 * t479;
t506 = qJDD(1) * t470;
t439 = -t473 * t507 + t476 * t506;
t512 = t440 * qJD(4);
t399 = t439 - t512;
t356 = -t415 * qJD(5) + t472 * qJDD(4) + t475 * t399;
t430 = qJD(5) + t440;
t383 = t430 * t415;
t330 = -t383 + t356;
t390 = -t470 * g(3) + t494 * t469;
t496 = -t475 * qJDD(4) + t472 * t399;
t327 = (qJD(5) - t430) * t417 + t496;
t413 = t415 ^ 2;
t414 = t417 ^ 2;
t429 = t430 ^ 2;
t436 = t440 ^ 2;
t437 = t442 ^ 2;
t535 = pkin(3) * t479;
t534 = pkin(4) * t473;
t533 = t469 * g(3);
t531 = qJDD(1) * pkin(1);
t530 = t430 * t472;
t529 = t430 * t475;
t378 = -pkin(6) * t507 - t465 * t535 + t390;
t482 = t533 + (-qJDD(1) * pkin(6) - t469 * t535 + t494) * t470;
t337 = t473 * t378 - t476 * t482;
t338 = t476 * t378 + t473 * t482;
t279 = -t476 * t337 + t473 * t338;
t527 = t469 * t279;
t526 = t469 * t470;
t525 = t470 * t279;
t391 = t440 * pkin(4) - t442 * pkin(7);
t478 = qJD(4) ^ 2;
t293 = -qJDD(4) * pkin(4) - t478 * pkin(7) + t442 * t391 + t337;
t524 = t472 * t293;
t344 = t377 + t483;
t523 = t472 * t344;
t453 = t477 * g(1) + t474 * g(2);
t467 = qJDD(1) * qJ(2);
t489 = t453 - t467;
t488 = -qJDD(3) + t489;
t509 = qJD(2) * qJD(1);
t484 = t488 - 0.2e1 * t509;
t386 = t484 - t541;
t522 = t473 * t386;
t394 = qJDD(4) + t528;
t521 = t473 * t394;
t446 = t513 * qJDD(1);
t520 = t474 * t446;
t519 = t475 * t293;
t518 = t475 * t344;
t517 = t476 * t386;
t516 = t476 * t394;
t515 = t477 * t446;
t294 = -t478 * pkin(4) + qJDD(4) * pkin(7) - t440 * t391 + t338;
t463 = 0.2e1 * t509;
t308 = t463 + (-t399 + t512) * pkin(7) + (-t397 + t511) * pkin(4) - t488 + t541;
t259 = t475 * t294 + t472 * t308;
t514 = t465 - t466;
t505 = t474 * qJDD(1);
t504 = t477 * qJDD(1);
t503 = t473 * t377;
t502 = t474 * t528;
t501 = t476 * t377;
t500 = t477 * t528;
t499 = -pkin(4) * t476 - pkin(3);
t258 = t472 * t294 - t475 * t308;
t232 = t472 * t258 + t475 * t259;
t280 = t473 * t337 + t476 * t338;
t427 = -t479 * pkin(1) + t463 - t489;
t431 = -t485 + t531;
t382 = t477 * t427 - t474 * t431;
t412 = -t474 * t452 - t477 * t453;
t419 = t532 * t479 + t484;
t495 = -t419 + t467;
t450 = -t474 * t479 + t504;
t493 = pkin(5) * t450 + t474 * g(3);
t451 = t477 * t479 + t505;
t492 = -pkin(5) * t451 + t477 * g(3);
t231 = -t475 * t258 + t472 * t259;
t389 = t494 * t470 + t533;
t346 = t470 * t389 + t469 * t390;
t347 = -t469 * t389 + t470 * t390;
t381 = t474 * t427 + t477 * t431;
t411 = t477 * t452 - t474 * t453;
t444 = t469 * t540;
t409 = -t474 * t444 + t469 * t504;
t407 = t477 * t444 + t469 * t505;
t449 = t514 * t479;
t447 = t514 * qJDD(1);
t443 = t470 * t540;
t426 = -t437 - t478;
t425 = -t437 + t478;
t424 = t436 - t478;
t422 = t451 * t526;
t421 = t450 * t526;
t410 = -t474 * t443 + t470 * t504;
t408 = t477 * t443 + t470 * t505;
t405 = -t477 * t540 - t520;
t404 = -t474 * t540 + t515;
t402 = t437 - t436;
t401 = pkin(2) * t507 - t470 * t419;
t400 = pkin(2) * t506 + t469 * t419;
t398 = t439 - 0.2e1 * t512;
t396 = t538 + 0.2e1 * t511;
t392 = -t478 - t436;
t385 = (-t440 * t476 + t442 * t473) * qJD(4);
t384 = (-t440 * t473 - t442 * t476) * qJD(4);
t380 = -t414 + t429;
t379 = t413 - t429;
t376 = -t436 - t437;
t374 = -pkin(2) * t444 + t389;
t373 = -pkin(2) * t443 - t390;
t372 = -t414 + t413;
t368 = t476 * t399 - t473 * t511;
t367 = t473 * t399 + t476 * t511;
t366 = -t473 * t397 + t476 * t512;
t365 = t476 * t397 + t473 * t512;
t364 = -t414 - t429;
t363 = -t473 * t426 - t516;
t362 = -t473 * t425 + t546;
t361 = t476 * t424 - t521;
t360 = t476 * t426 - t521;
t359 = t476 * t425 + t547;
t358 = t473 * t424 + t516;
t357 = -t429 - t413;
t355 = -t417 * qJD(5) - t496;
t354 = t413 + t414;
t353 = -t476 * t396 - t473 * t398;
t352 = t473 * t439 - t476 * t538;
t351 = -t473 * t396 + t476 * t398;
t350 = -t476 * t439 - t473 * t538;
t349 = t476 * t392 - t547;
t348 = t473 * t392 + t546;
t342 = (-t415 * t475 + t417 * t472) * t430;
t341 = (-t415 * t472 - t417 * t475) * t430;
t340 = -pkin(2) * t540 - t347;
t339 = -t470 * t384 - t469 * t385;
t336 = -pkin(6) * t360 - t517;
t334 = t474 * t346 - t477 * t419;
t333 = -t477 * t346 - t474 * t419;
t331 = -t383 - t356;
t328 = (-qJD(5) - t430) * t417 - t496;
t326 = t475 * t356 - t417 * t530;
t325 = t472 * t356 + t417 * t529;
t324 = -t472 * t355 + t415 * t529;
t323 = t475 * t355 + t415 * t530;
t322 = -pkin(6) * t348 - t522;
t321 = -t470 * t367 - t469 * t368;
t320 = -t470 * t365 - t469 * t366;
t319 = -t469 * t360 + t470 * t363;
t318 = t470 * t360 + t469 * t363;
t317 = -t470 * t359 - t469 * t362;
t316 = -t470 * t358 - t469 * t361;
t315 = t476 * t342 + t473 * t483;
t314 = t473 * t342 - t476 * t483;
t313 = t475 * t379 - t523;
t312 = -t472 * t380 + t542;
t311 = t472 * t379 + t518;
t310 = t475 * t380 + t543;
t309 = -pkin(3) * t398 + pkin(6) * t363 - t522;
t305 = -t472 * t364 - t518;
t304 = t475 * t364 - t523;
t303 = -t469 * t350 + t470 * t352;
t302 = -t470 * t351 - t469 * t353;
t301 = t470 * t350 + t469 * t352;
t300 = -pkin(3) * t396 + pkin(6) * t349 + t517;
t299 = t475 * t357 - t543;
t298 = t472 * t357 + t542;
t297 = pkin(2) * t346 - qJ(2) * t347;
t296 = -t469 * t348 + t470 * t349;
t295 = t470 * t348 + t469 * t349;
t291 = t474 * t318 + t477 * t398;
t290 = -t477 * t318 + t474 * t398;
t289 = t476 * t326 + t503;
t288 = t476 * t324 - t503;
t287 = t473 * t326 - t501;
t286 = t473 * t324 + t501;
t285 = -pkin(2) * t419 - t532 * t347;
t284 = t474 * t295 + t477 * t396;
t283 = -t477 * t295 + t474 * t396;
t282 = t474 * t301 + t477 * t376;
t281 = -t477 * t301 + t474 * t376;
t278 = -t327 * t475 - t472 * t331;
t277 = t475 * t328 - t472 * t330;
t276 = -t327 * t472 + t475 * t331;
t275 = t472 * t328 + t475 * t330;
t274 = t476 * t313 - t473 * t327;
t273 = t476 * t312 - t473 * t331;
t272 = t473 * t313 + t476 * t327;
t271 = t473 * t312 + t476 * t331;
t270 = pkin(3) * t386 + pkin(6) * t280;
t269 = t476 * t305 + t330 * t473;
t268 = t473 * t305 - t330 * t476;
t267 = -t470 * t314 - t469 * t315;
t266 = t476 * t299 - t473 * t328;
t265 = t473 * t299 + t476 * t328;
t264 = t476 * t277 - t473 * t372;
t263 = t473 * t277 + t476 * t372;
t262 = -pkin(6) * t350 - t279;
t261 = t476 * t278 - t473 * t354;
t260 = t473 * t278 + t476 * t354;
t257 = -pkin(7) * t304 + t519;
t255 = -pkin(7) * t298 + t524;
t254 = -pkin(3) * t376 + pkin(6) * t352 + t280;
t253 = -t470 * t287 - t469 * t289;
t252 = -t470 * t286 - t469 * t288;
t251 = pkin(2) * t301 + pkin(3) * t350 - qJ(2) * t303;
t250 = pkin(2) * t318 + pkin(3) * t360 - qJ(2) * t319 - t338;
t249 = t470 * t280 - t527;
t248 = t469 * t280 + t525;
t247 = -pkin(4) * t304 + t259;
t246 = -pkin(4) * t298 + t258;
t245 = t474 * t248 - t477 * t386;
t244 = -t477 * t248 - t474 * t386;
t243 = pkin(2) * t295 + pkin(3) * t348 - qJ(2) * t296 - t337;
t242 = -t470 * t272 - t469 * t274;
t241 = -t470 * t271 - t469 * t273;
t240 = -t469 * t268 + t470 * t269;
t239 = t470 * t268 + t469 * t269;
t238 = pkin(2) * t398 - t470 * t309 - t532 * t319 - t469 * t336;
t237 = -t469 * t265 + t470 * t266;
t236 = t470 * t265 + t469 * t266;
t235 = -t470 * t263 - t469 * t264;
t234 = -t469 * t260 + t470 * t261;
t233 = t470 * t260 + t469 * t261;
t230 = pkin(2) * t396 - t532 * t296 - t470 * t300 - t469 * t322;
t229 = t474 * t239 + t477 * t304;
t228 = -t477 * t239 + t474 * t304;
t227 = t474 * t236 + t477 * t298;
t226 = -t477 * t236 + t474 * t298;
t225 = t476 * t232 + t473 * t293;
t224 = t473 * t232 - t476 * t293;
t223 = t474 * t233 + t477 * t276;
t222 = -t477 * t233 + t474 * t276;
t221 = -pkin(7) * t276 - t231;
t220 = pkin(2) * t376 - t470 * t254 - t469 * t262 - t532 * t303;
t219 = -pkin(6) * t268 - t473 * t247 + t476 * t257;
t218 = -pkin(6) * t265 - t473 * t246 + t476 * t255;
t217 = pkin(2) * t248 + pkin(3) * t279 - qJ(2) * t249;
t216 = -pkin(3) * t304 + pkin(6) * t269 + t476 * t247 + t473 * t257;
t215 = -pkin(3) * t298 + pkin(6) * t266 + t476 * t246 + t473 * t255;
t214 = -pkin(2) * t386 + pkin(6) * t527 - t532 * t249 - t470 * t270;
t213 = -pkin(6) * t260 + t476 * t221 + t276 * t534;
t212 = -t469 * t224 + t470 * t225;
t211 = t470 * t224 + t469 * t225;
t210 = pkin(6) * t261 + t473 * t221 + t499 * t276;
t209 = pkin(2) * t239 + pkin(3) * t268 - pkin(4) * t330 + pkin(7) * t305 - qJ(2) * t240 + t524;
t208 = pkin(2) * t236 + pkin(3) * t265 + pkin(4) * t328 + pkin(7) * t299 - qJ(2) * t237 - t519;
t207 = -pkin(6) * t224 + (-pkin(7) * t476 + t534) * t231;
t206 = t474 * t211 + t477 * t231;
t205 = -t477 * t211 + t474 * t231;
t204 = pkin(2) * t233 + pkin(3) * t260 + pkin(4) * t354 + pkin(7) * t278 - qJ(2) * t234 + t232;
t203 = pkin(6) * t225 + (-pkin(7) * t473 + t499) * t231;
t202 = pkin(2) * t304 - t470 * t216 - t469 * t219 - t532 * t240;
t201 = pkin(2) * t298 - t470 * t215 - t469 * t218 - t532 * t237;
t200 = pkin(2) * t276 - t470 * t210 - t469 * t213 - t532 * t234;
t199 = pkin(2) * t211 + pkin(3) * t224 - pkin(4) * t293 + pkin(7) * t232 - qJ(2) * t212;
t198 = pkin(2) * t231 - t470 * t203 - t469 * t207 - t532 * t212;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t451, -t450, 0, t412, 0, 0, 0, 0, 0, 0, 0, t451, t450, t382, 0, 0, 0, 0, 0, 0, t409, t410, t405, t334, 0, 0, 0, 0, 0, 0, t284, t291, t282, t245, 0, 0, 0, 0, 0, 0, t227, t229, t223, t206; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t450, -t451, 0, t411, 0, 0, 0, 0, 0, 0, 0, -t450, t451, t381, 0, 0, 0, 0, 0, 0, t407, t408, t404, t333, 0, 0, 0, 0, 0, 0, t283, t290, t281, t244, 0, 0, 0, 0, 0, 0, t226, t228, t222, t205; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t347, 0, 0, 0, 0, 0, 0, t296, t319, t303, t249, 0, 0, 0, 0, 0, 0, t237, t240, t234, t212; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t450, 0, -t451, 0, -t493, -t492, -t411, -pkin(5) * t411, 0, -t450, t451, 0, 0, 0, -t381, t493, t492, -pkin(5) * t381 + (-pkin(1) * t474 + qJ(2) * t477) * g(3), t422, -t474 * t447 - t477 * t449, t410, -t422, -t409, 0, -pkin(5) * t407 + t477 * t374 - t474 * t401, -pkin(5) * t408 + t477 * t373 - t474 * t400, -pkin(2) * t515 - pkin(5) * t404 - t474 * t340, -pkin(5) * t333 - t474 * t285 + t477 * t297, -t474 * t321 + t500, -t474 * t302 + t477 * t402, -t474 * t317 + t477 * t439, -t474 * t320 - t500, -t474 * t316 - t477 * t538, t477 * qJDD(4) - t474 * t339, -pkin(5) * t283 - t474 * t230 + t477 * t243, -pkin(5) * t290 - t474 * t238 + t477 * t250, -pkin(5) * t281 - t474 * t220 + t477 * t251, -pkin(5) * t244 - t474 * t214 + t477 * t217, -t474 * t253 + t477 * t325, -t474 * t235 + t477 * t275, -t474 * t241 + t477 * t310, -t474 * t252 + t477 * t323, -t474 * t242 + t477 * t311, -t474 * t267 + t477 * t341, -pkin(5) * t226 - t474 * t201 + t477 * t208, -pkin(5) * t228 - t474 * t202 + t477 * t209, -pkin(5) * t222 - t474 * t200 + t477 * t204, -pkin(5) * t205 - t474 * t198 + t477 * t199; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t451, 0, t450, 0, t492, -t493, t412, pkin(5) * t412, 0, -t451, -t450, 0, 0, 0, t382, -t492, t493, pkin(5) * t382 + (pkin(1) * t477 + qJ(2) * t474) * g(3), -t421, t477 * t447 - t474 * t449, t408, t421, -t407, 0, pkin(5) * t409 + t474 * t374 + t477 * t401, pkin(5) * t410 + t474 * t373 + t477 * t400, -pkin(2) * t520 + pkin(5) * t405 + t477 * t340, pkin(5) * t334 + t477 * t285 + t474 * t297, t477 * t321 + t502, t477 * t302 + t474 * t402, t477 * t317 + t474 * t439, t477 * t320 - t502, t477 * t316 - t474 * t538, t474 * qJDD(4) + t477 * t339, pkin(5) * t284 + t477 * t230 + t474 * t243, pkin(5) * t291 + t477 * t238 + t474 * t250, pkin(5) * t282 + t477 * t220 + t474 * t251, pkin(5) * t245 + t477 * t214 + t474 * t217, t477 * t253 + t474 * t325, t477 * t235 + t474 * t275, t477 * t241 + t474 * t310, t477 * t252 + t474 * t323, t477 * t242 + t474 * t311, t477 * t267 + t474 * t341, pkin(5) * t227 + t477 * t201 + t474 * t208, pkin(5) * t229 + t477 * t202 + t474 * t209, pkin(5) * t223 + t477 * t200 + t474 * t204, pkin(5) * t206 + t477 * t198 + t474 * t199; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t452, t453, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t491 - 0.2e1 * t531, -t453 + t463 + 0.2e1 * t467, pkin(1) * t431 + qJ(2) * t427, t466 * qJDD(1), -0.2e1 * t469 * t506, 0, t465 * qJDD(1), 0, 0, t532 * t444 + t495 * t469, t532 * t443 + t495 * t470, -qJ(2) * t540 + t532 * t446 - t346, -qJ(2) * t419 - t532 * t346, -t469 * t367 + t470 * t368, -t469 * t351 + t470 * t353, -t469 * t359 + t470 * t362, -t469 * t365 + t470 * t366, -t469 * t358 + t470 * t361, -t469 * t384 + t470 * t385, qJ(2) * t396 - t532 * t295 - t469 * t300 + t470 * t322, qJ(2) * t398 - t469 * t309 - t532 * t318 + t470 * t336, qJ(2) * t376 - t469 * t254 + t470 * t262 - t532 * t301, -pkin(6) * t525 - qJ(2) * t386 - t532 * t248 - t469 * t270, -t469 * t287 + t470 * t289, -t469 * t263 + t470 * t264, -t469 * t271 + t470 * t273, -t469 * t286 + t470 * t288, -t469 * t272 + t470 * t274, -t469 * t314 + t470 * t315, qJ(2) * t298 - t469 * t215 + t470 * t218 - t236 * t532, qJ(2) * t304 - t469 * t216 + t470 * t219 - t239 * t532, qJ(2) * t276 - t469 * t210 + t470 * t213 - t233 * t532, qJ(2) * t231 - t469 * t203 + t470 * t207 - t211 * t532;];
tauB_reg = t1;
