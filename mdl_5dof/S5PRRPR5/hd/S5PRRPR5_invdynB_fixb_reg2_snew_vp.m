% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRRPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d3,d5,theta1,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:28
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRRPR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPR5_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPR5_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRPR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRPR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5PRRPR5_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:28:10
% EndTime: 2019-12-05 16:28:29
% DurationCPUTime: 16.58s
% Computational Cost: add. (70862->703), mult. (153653->1147), div. (0->0), fcn. (112101->12), ass. (0->509)
t650 = sin(pkin(10));
t653 = cos(pkin(10));
t662 = cos(qJ(3));
t742 = qJD(2) * t662;
t659 = sin(qJ(3));
t743 = qJD(2) * t659;
t605 = t650 * t743 - t653 * t742;
t607 = t650 * t742 + t653 * t743;
t562 = t607 * t605;
t770 = qJDD(3) - t562;
t778 = t650 * t770;
t777 = t653 * t770;
t658 = sin(qJ(5));
t661 = cos(qJ(5));
t574 = -qJD(3) * t661 + t607 * t658;
t576 = qJD(3) * t658 + t607 * t661;
t526 = t576 * t574;
t738 = qJD(2) * qJD(3);
t725 = t662 * t738;
t736 = qJDD(2) * t659;
t615 = t725 + t736;
t641 = t662 * qJDD(2);
t726 = t659 * t738;
t712 = -t641 + t726;
t720 = t615 * t650 + t653 * t712;
t711 = qJDD(5) + t720;
t771 = -t526 + t711;
t776 = t658 * t771;
t775 = t661 * t771;
t652 = sin(pkin(5));
t655 = cos(pkin(5));
t651 = sin(pkin(9));
t654 = cos(pkin(9));
t724 = g(1) * t651 - g(2) * t654;
t745 = g(3) - qJDD(1);
t774 = -t652 * t745 + t655 * t724;
t741 = qJD(3) * t607;
t527 = t720 + t741;
t773 = t651 * t745;
t772 = t654 * t745;
t598 = qJD(5) + t605;
t541 = t598 * t574;
t564 = t653 * t615 - t650 * t712;
t728 = qJD(5) * t574 - qJDD(3) * t658 - t564 * t661;
t462 = t728 + t541;
t665 = qJD(2) ^ 2;
t634 = t659 * t665 * t662;
t624 = qJDD(3) + t634;
t721 = -qJDD(3) * t661 + t564 * t658;
t457 = (qJD(5) - t598) * t576 + t721;
t622 = g(1) * t654 + g(2) * t651;
t570 = -t622 * t654 - t651 * t724;
t569 = -t651 * t622 + t654 * t724;
t572 = t574 ^ 2;
t573 = t576 ^ 2;
t597 = t598 ^ 2;
t599 = t605 ^ 2;
t600 = t607 ^ 2;
t769 = 2 * qJD(4);
t768 = pkin(4) * t650;
t660 = sin(qJ(2));
t663 = cos(qJ(2));
t542 = -t622 * t660 - t663 * t774;
t543 = -t663 * t622 + t660 * t774;
t485 = t542 * t660 + t543 * t663;
t767 = pkin(6) * t485;
t591 = t652 * t724 + t655 * t745;
t667 = -t665 * pkin(2) + qJDD(2) * pkin(7) + t543;
t501 = -t591 * t659 + t662 * t667;
t623 = qJD(3) * pkin(3) - qJ(4) * t743;
t647 = t662 ^ 2;
t644 = t647 * t665;
t470 = -pkin(3) * t644 - qJ(4) * t712 - qJD(3) * t623 + t501;
t500 = t662 * t591 + t659 * t667;
t666 = -t500 + (-t615 + t725) * qJ(4) + t624 * pkin(3);
t722 = t470 * t650 - t653 * t666;
t387 = t607 * t769 + t722;
t388 = -0.2e1 * qJD(4) * t605 + t470 * t653 + t650 * t666;
t338 = -t387 * t653 + t388 * t650;
t766 = t338 * t659;
t765 = t338 * t662;
t546 = pkin(4) * t605 - pkin(8) * t607;
t664 = qJD(3) ^ 2;
t367 = -qJDD(3) * pkin(4) - t664 * pkin(8) + (t769 + t546) * t607 + t722;
t764 = t367 * t658;
t763 = t367 * t661;
t487 = t526 + t711;
t762 = t487 * t658;
t761 = t487 * t661;
t534 = -qJDD(2) * pkin(2) - pkin(7) * t665 + t542;
t489 = pkin(3) * t712 - qJ(4) * t644 + t623 * t743 + qJDD(4) + t534;
t760 = t489 * t650;
t759 = t489 * t653;
t758 = t534 * t659;
t757 = t534 * t662;
t551 = qJDD(3) + t562;
t756 = t551 * t650;
t755 = t551 * t653;
t754 = t591 * t660;
t753 = t591 * t663;
t752 = t598 * t658;
t751 = t598 * t661;
t616 = t641 - 0.2e1 * t726;
t577 = t616 * t662;
t750 = t624 * t659;
t625 = qJDD(3) - t634;
t749 = t625 * t659;
t748 = t625 * t662;
t646 = t659 ^ 2;
t747 = t646 * t665;
t368 = -pkin(4) * t664 + qJDD(3) * pkin(8) - t546 * t605 + t388;
t740 = t605 * qJD(3);
t719 = -t564 + t740;
t412 = pkin(4) * t527 + pkin(8) * t719 + t489;
t336 = t368 * t661 + t412 * t658;
t744 = t646 + t647;
t737 = qJDD(2) * t652;
t735 = qJDD(2) * t660;
t734 = qJDD(2) * t663;
t733 = qJDD(3) * t663;
t732 = t650 * t526;
t731 = t653 * t526;
t730 = t660 * t562;
t729 = t663 * t562;
t727 = -pkin(4) * t653 - pkin(3);
t335 = t368 * t658 - t412 * t661;
t339 = t387 * t650 + t388 * t653;
t427 = t500 * t659 + t501 * t662;
t718 = t660 * t634;
t717 = t663 * t634;
t426 = t500 * t662 - t501 * t659;
t617 = t744 * qJDD(2);
t620 = t644 + t747;
t567 = t617 * t663 - t620 * t660;
t715 = pkin(6) * t567 + t426 * t660;
t618 = -t660 * t665 + t734;
t714 = -pkin(6) * t618 - t754;
t687 = t663 * t665 + t735;
t713 = -pkin(6) * t687 + t753;
t291 = t335 * t658 + t336 * t661;
t280 = t291 * t650 - t367 * t653;
t281 = t291 * t653 + t367 * t650;
t248 = -t280 * t659 + t281 * t662;
t290 = -t335 * t661 + t336 * t658;
t710 = t248 * t660 - t290 * t663;
t293 = t339 * t662 - t766;
t709 = t293 * t660 - t489 * t663;
t461 = -t541 + t728;
t391 = -t457 * t661 - t461 * t658;
t497 = t572 + t573;
t364 = t391 * t650 + t497 * t653;
t365 = t391 * t653 - t497 * t650;
t309 = -t364 * t659 + t365 * t662;
t390 = -t457 * t658 + t461 * t661;
t708 = t309 * t660 - t390 * t663;
t459 = (-qJD(5) - t598) * t576 - t721;
t392 = t459 * t661 + t462 * t658;
t524 = -t573 + t572;
t371 = t392 * t650 + t524 * t653;
t372 = t392 * t653 - t524 * t650;
t317 = -t371 * t659 + t372 * t662;
t393 = -t459 * t658 + t462 * t661;
t707 = t317 * t660 + t393 * t663;
t508 = -t597 - t572;
t424 = t508 * t661 - t776;
t374 = t424 * t650 + t459 * t653;
t375 = t424 * t653 - t459 * t650;
t320 = -t374 * t659 + t375 * t662;
t423 = t508 * t658 + t775;
t706 = t320 * t660 - t423 * t663;
t519 = -t573 - t597;
t429 = -t519 * t658 - t761;
t378 = t429 * t650 + t462 * t653;
t379 = t429 * t653 - t462 * t650;
t323 = -t378 * t659 + t379 * t662;
t428 = t519 * t661 - t762;
t705 = t323 * t660 - t428 * t663;
t536 = -t573 + t597;
t431 = -t536 * t658 + t775;
t381 = t431 * t650 + t461 * t653;
t383 = t431 * t653 - t461 * t650;
t329 = -t381 * t659 + t383 * t662;
t434 = -t536 * t661 - t776;
t704 = t329 * t660 + t434 * t663;
t535 = t572 - t597;
t433 = t535 * t661 - t762;
t382 = t433 * t650 + t457 * t653;
t384 = t433 * t653 - t457 * t650;
t330 = -t382 * t659 + t384 * t662;
t432 = -t535 * t658 - t761;
t703 = t330 * t660 + t432 * t663;
t509 = -qJD(5) * t576 - t721;
t451 = -t509 * t658 + t574 * t751;
t414 = t451 * t650 + t731;
t416 = t451 * t653 - t732;
t355 = -t414 * t659 + t416 * t662;
t453 = -t509 * t661 - t574 * t752;
t702 = t355 * t660 + t453 * t663;
t454 = -t576 * t752 - t661 * t728;
t415 = t454 * t650 - t731;
t417 = t454 * t653 + t732;
t356 = -t415 * t659 + t417 * t662;
t452 = -t576 * t751 + t658 * t728;
t701 = t356 * t660 + t452 * t663;
t478 = (-t574 * t661 + t576 * t658) * t598;
t435 = t478 * t650 - t653 * t711;
t436 = t478 * t653 + t650 * t711;
t377 = -t435 * t659 + t436 * t662;
t479 = (t574 * t658 + t576 * t661) * t598;
t700 = t377 * t660 + t479 * t663;
t466 = -t527 * t650 - t653 * t719;
t468 = -t527 * t653 + t650 * t719;
t396 = -t466 * t659 + t468 * t662;
t558 = -t600 + t599;
t699 = t396 * t660 + t558 * t663;
t529 = -t720 + t741;
t531 = -t564 - t740;
t467 = t529 * t650 + t531 * t653;
t469 = t529 * t653 - t531 * t650;
t397 = -t467 * t659 + t469 * t662;
t525 = -t599 - t600;
t698 = t397 * t660 - t525 * t663;
t549 = -t664 - t599;
t490 = t549 * t650 + t777;
t491 = t549 * t653 - t778;
t420 = -t490 * t659 + t491 * t662;
t697 = t420 * t660 - t527 * t663;
t696 = t427 * t660 - t534 * t663;
t592 = t599 - t664;
t513 = t592 * t650 + t755;
t516 = t592 * t653 - t756;
t440 = -t513 * t659 + t516 * t662;
t695 = t440 * t660 - t529 * t663;
t593 = -t600 + t664;
t514 = t593 * t653 + t778;
t517 = -t593 * t650 + t777;
t441 = -t514 * t659 + t517 * t662;
t694 = t441 * t660 + t531 * t663;
t594 = -t600 - t664;
t515 = t594 * t653 - t756;
t518 = -t594 * t650 - t755;
t442 = -t515 * t659 + t518 * t662;
t693 = t442 * t660 + t663 * t719;
t484 = t542 * t663 - t543 * t660;
t614 = 0.2e1 * t725 + t736;
t566 = -t614 * t659 + t577;
t621 = t644 - t747;
t692 = t566 * t660 + t621 * t663;
t633 = -t644 - t664;
t584 = t633 * t662 - t750;
t691 = t584 * t660 + t616 * t663;
t631 = -t664 - t747;
t586 = -t631 * t659 - t748;
t690 = t586 * t660 - t614 * t663;
t603 = t687 * t655;
t689 = t603 * t654 + t618 * t651;
t556 = t603 * t651 - t618 * t654;
t688 = t617 * t660 + t620 * t663;
t539 = (-t605 * t650 - t607 * t653) * qJD(3);
t540 = (-t605 * t653 + t607 * t650) * qJD(3);
t477 = -t539 * t659 + t540 * t662;
t686 = t477 * t660 - t733;
t612 = t744 * t738;
t685 = t612 * t660 - t733;
t520 = t650 * t740 - t653 * t720;
t521 = t650 * t720 + t653 * t740;
t449 = -t520 * t659 + t521 * t662;
t684 = t449 * t660 + t729;
t522 = t564 * t650 + t653 * t741;
t523 = t564 * t653 - t650 * t741;
t450 = -t522 * t659 + t523 * t662;
t683 = t450 * t660 - t729;
t632 = t644 - t664;
t583 = t632 * t662 - t749;
t682 = t583 * t660 - t641 * t663;
t613 = t662 * t624;
t630 = t664 - t747;
t585 = -t630 * t659 + t613;
t681 = t585 * t660 - t659 * t734;
t588 = -t647 * t738 + t659 * t712;
t680 = t588 * t660 - t717;
t589 = t615 * t662 - t646 * t738;
t679 = t589 * t660 + t717;
t236 = qJ(4) * t281 + (-pkin(8) * t650 + t727) * t290;
t243 = -qJ(4) * t280 + (-pkin(8) * t653 + t768) * t290;
t247 = t280 * t662 + t281 * t659;
t223 = -pkin(7) * t247 - t236 * t659 + t243 * t662;
t233 = -pkin(2) * t247 - pkin(3) * t280 + pkin(4) * t367 - pkin(8) * t291;
t240 = t248 * t663 + t290 * t660;
t678 = pkin(6) * t240 + t223 * t660 + t233 * t663;
t284 = -pkin(8) * t390 - t290;
t260 = qJ(4) * t365 + t284 * t650 + t390 * t727;
t264 = -qJ(4) * t364 + t284 * t653 + t390 * t768;
t308 = t364 * t662 + t365 * t659;
t235 = -pkin(7) * t308 - t260 * t659 + t264 * t662;
t252 = -pkin(2) * t308 - pkin(3) * t364 - pkin(4) * t497 - pkin(8) * t391 - t291;
t294 = t309 * t663 + t390 * t660;
t677 = pkin(6) * t294 + t235 * t660 + t252 * t663;
t305 = -pkin(4) * t423 + t335;
t342 = -pkin(8) * t423 + t764;
t266 = -pkin(3) * t423 + qJ(4) * t375 + t305 * t653 + t342 * t650;
t275 = -qJ(4) * t374 - t305 * t650 + t342 * t653;
t319 = t374 * t662 + t375 * t659;
t241 = -pkin(7) * t319 - t266 * t659 + t275 * t662;
t273 = -pkin(2) * t319 - pkin(3) * t374 - pkin(4) * t459 - pkin(8) * t424 + t763;
t300 = t320 * t663 + t423 * t660;
t676 = pkin(6) * t300 + t241 * t660 + t273 * t663;
t307 = -pkin(4) * t428 + t336;
t343 = -pkin(8) * t428 + t763;
t267 = -pkin(3) * t428 + qJ(4) * t379 + t307 * t653 + t343 * t650;
t277 = -qJ(4) * t378 - t307 * t650 + t343 * t653;
t322 = t378 * t662 + t379 * t659;
t242 = -pkin(7) * t322 - t267 * t659 + t277 * t662;
t276 = -pkin(2) * t322 - pkin(3) * t378 - pkin(4) * t462 - pkin(8) * t429 - t764;
t301 = t323 * t663 + t428 * t660;
t675 = pkin(6) * t301 + t242 * t660 + t276 * t663;
t292 = t339 * t659 + t765;
t318 = -pkin(3) * t489 + qJ(4) * t339;
t258 = -pkin(7) * t292 - qJ(4) * t765 - t318 * t659;
t272 = -pkin(2) * t292 - pkin(3) * t338;
t289 = t293 * t663 + t489 * t660;
t674 = pkin(6) * t289 + t258 * t660 + t272 * t663;
t306 = -pkin(3) * t525 + qJ(4) * t469 + t339;
t313 = -qJ(4) * t467 - t338;
t395 = t467 * t662 + t469 * t659;
t271 = -pkin(7) * t395 - t306 * t659 + t313 * t662;
t359 = -pkin(2) * t395 - pkin(3) * t467;
t373 = t397 * t663 + t525 * t660;
t673 = pkin(6) * t373 + t271 * t660 + t359 * t663;
t399 = -pkin(3) * t527 + qJ(4) * t491 - t759;
t418 = -qJ(4) * t490 + t760;
t419 = t490 * t662 + t491 * t659;
t321 = -pkin(7) * t419 - t399 * t659 + t418 * t662;
t337 = -pkin(2) * t419 - pkin(3) * t490 + t387;
t398 = t420 * t663 + t527 * t660;
t672 = pkin(6) * t398 + t321 * t660 + t337 * t663;
t406 = pkin(3) * t719 + qJ(4) * t518 + t760;
t430 = -qJ(4) * t515 + t759;
t439 = t515 * t662 + t518 * t659;
t334 = -pkin(7) * t439 - t406 * t659 + t430 * t662;
t344 = -pkin(2) * t439 - pkin(3) * t515 + t388;
t409 = t442 * t663 - t660 * t719;
t671 = pkin(6) * t409 + t334 * t660 + t344 * t663;
t580 = t633 * t659 + t613;
t474 = -pkin(2) * t580 + t500;
t498 = -pkin(7) * t580 + t758;
t537 = t584 * t663 - t616 * t660;
t670 = pkin(6) * t537 + t474 * t663 + t498 * t660;
t582 = t631 * t662 - t749;
t475 = -pkin(2) * t582 + t501;
t499 = -pkin(7) * t582 + t757;
t538 = t586 * t663 + t614 * t660;
t669 = pkin(6) * t538 + t475 * t663 + t499 * t660;
t403 = t427 * t663 + t534 * t660;
t668 = pkin(6) * t403 - (-pkin(2) * t663 - pkin(7) * t660) * t426;
t639 = t660 * qJDD(3);
t604 = t618 * t655;
t602 = t618 * t652;
t601 = t687 * t652;
t590 = t612 * t663 + t639;
t581 = t630 * t662 + t750;
t579 = t632 * t659 + t748;
t578 = (t615 + t725) * t659;
t568 = t685 * t655;
t565 = t614 * t662 + t616 * t659;
t560 = t688 * t655;
t559 = t688 * t652;
t557 = -t604 * t651 - t654 * t687;
t555 = t604 * t654 - t651 * t687;
t548 = t589 * t663 - t718;
t547 = t588 * t663 + t718;
t545 = t585 * t663 + t659 * t735;
t544 = t583 * t663 + t641 * t660;
t533 = t566 * t663 - t621 * t660;
t512 = -t753 + (t601 * t652 + t603 * t655) * pkin(6);
t511 = -t754 + (-t602 * t652 - t604 * t655) * pkin(6);
t507 = -t560 * t651 + t567 * t654;
t506 = t560 * t654 + t567 * t651;
t505 = -t578 * t652 + t655 * t679;
t504 = -t577 * t652 + t655 * t680;
t503 = -t581 * t652 + t655 * t681;
t502 = -t579 * t652 + t655 * t682;
t495 = -t582 * t652 + t655 * t690;
t494 = -t580 * t652 + t655 * t691;
t493 = t582 * t655 + t652 * t690;
t492 = t580 * t655 + t652 * t691;
t483 = -t565 * t652 + t655 * t692;
t482 = pkin(2) * t616 + pkin(7) * t584 - t757;
t481 = -pkin(2) * t614 + pkin(7) * t586 + t758;
t480 = t485 * t655;
t476 = t539 * t662 + t540 * t659;
t473 = t477 * t663 + t639;
t472 = -pkin(1) * t602 + t542 * t652 + t655 * t713;
t471 = pkin(1) * t601 + t543 * t652 + t655 * t714;
t456 = -t484 * t655 + t591 * t652;
t455 = -t484 * t652 - t591 * t655;
t448 = t522 * t662 + t523 * t659;
t447 = t520 * t662 + t521 * t659;
t446 = -t495 * t651 + t538 * t654;
t445 = -t494 * t651 + t537 * t654;
t444 = t495 * t654 + t538 * t651;
t443 = t494 * t654 + t537 * t651;
t438 = t514 * t662 + t517 * t659;
t437 = t513 * t662 + t516 * t659;
t422 = t450 * t663 + t730;
t421 = t449 * t663 - t730;
t413 = pkin(2) * t620 + pkin(7) * t617 + t427;
t408 = t441 * t663 - t531 * t660;
t407 = t440 * t663 + t529 * t660;
t405 = -pkin(2) * t534 + pkin(7) * t427;
t404 = -t476 * t652 + t655 * t686;
t402 = -pkin(1) * t455 + t655 * t767;
t401 = -t456 * t651 + t485 * t654;
t400 = t456 * t654 + t485 * t651;
t394 = t466 * t662 + t468 * t659;
t389 = t426 * t663 + (-t559 * t652 - t560 * t655) * pkin(6);
t385 = (-t455 * t652 - t456 * t655) * pkin(6);
t380 = t396 * t663 - t558 * t660;
t376 = t435 * t662 + t436 * t659;
t370 = -t448 * t652 + t655 * t683;
t369 = -t447 * t652 + t655 * t684;
t363 = -t439 * t652 + t655 * t693;
t362 = -t438 * t652 + t655 * t694;
t361 = -t437 * t652 + t655 * t695;
t360 = t439 * t655 + t652 * t693;
t358 = -t475 * t660 + t499 * t663 + (-t493 * t652 - t495 * t655) * pkin(6);
t357 = -t474 * t660 + t498 * t663 + (-t492 * t652 - t494 * t655) * pkin(6);
t354 = t415 * t662 + t417 * t659;
t353 = t414 * t662 + t416 * t659;
t352 = t426 * t652 + t655 * t696;
t351 = -t426 * t655 + t652 * t696;
t350 = t377 * t663 - t479 * t660;
t349 = -t419 * t652 + t655 * t697;
t348 = t419 * t655 + t652 * t697;
t347 = -pkin(1) * t493 - t481 * t652 + t655 * t669;
t346 = -pkin(1) * t492 - t482 * t652 + t655 * t670;
t345 = -pkin(1) * t559 - t413 * t652 + t655 * t715;
t341 = t356 * t663 - t452 * t660;
t340 = t355 * t663 - t453 * t660;
t333 = -t394 * t652 + t655 * t699;
t332 = -t395 * t652 + t655 * t698;
t331 = t395 * t655 + t652 * t698;
t328 = t382 * t662 + t384 * t659;
t327 = t381 * t662 + t383 * t659;
t326 = -t363 * t651 + t409 * t654;
t325 = t363 * t654 + t409 * t651;
t324 = pkin(2) * t719 + pkin(7) * t442 + t406 * t662 + t430 * t659;
t316 = t371 * t662 + t372 * t659;
t315 = -t352 * t651 + t403 * t654;
t314 = t352 * t654 + t403 * t651;
t312 = -pkin(2) * t527 + pkin(7) * t420 + t399 * t662 + t418 * t659;
t311 = -t349 * t651 + t398 * t654;
t310 = t349 * t654 + t398 * t651;
t304 = -t376 * t652 + t655 * t700;
t303 = t330 * t663 - t432 * t660;
t302 = t329 * t663 - t434 * t660;
t299 = -t332 * t651 + t373 * t654;
t298 = t332 * t654 + t373 * t651;
t297 = t317 * t663 - t393 * t660;
t296 = -t354 * t652 + t655 * t701;
t295 = -t353 * t652 + t655 * t702;
t288 = -(pkin(2) * t660 - pkin(7) * t663) * t426 + (-t351 * t652 - t352 * t655) * pkin(6);
t287 = -pkin(1) * t351 - t405 * t652 + t655 * t668;
t286 = -t328 * t652 + t655 * t703;
t285 = -t327 * t652 + t655 * t704;
t283 = -t322 * t652 + t655 * t705;
t282 = t322 * t655 + t652 * t705;
t279 = -t319 * t652 + t655 * t706;
t278 = t319 * t655 + t652 * t706;
t274 = -t316 * t652 + t655 * t707;
t270 = -t308 * t652 + t655 * t708;
t269 = t308 * t655 + t652 * t708;
t268 = -pkin(2) * t525 + pkin(7) * t397 + t306 * t662 + t313 * t659;
t265 = t334 * t663 - t344 * t660 + (-t360 * t652 - t363 * t655) * pkin(6);
t263 = t321 * t663 - t337 * t660 + (-t348 * t652 - t349 * t655) * pkin(6);
t262 = -t283 * t651 + t301 * t654;
t261 = t283 * t654 + t301 * t651;
t259 = -pkin(1) * t360 - t324 * t652 + t655 * t671;
t257 = -t292 * t652 + t655 * t709;
t256 = t292 * t655 + t652 * t709;
t255 = -t279 * t651 + t300 * t654;
t254 = t279 * t654 + t300 * t651;
t253 = -pkin(2) * t489 + pkin(7) * t293 - qJ(4) * t766 + t318 * t662;
t251 = -pkin(1) * t348 - t312 * t652 + t655 * t672;
t250 = -t270 * t651 + t294 * t654;
t249 = t270 * t654 + t294 * t651;
t246 = t271 * t663 - t359 * t660 + (-t331 * t652 - t332 * t655) * pkin(6);
t245 = -t257 * t651 + t289 * t654;
t244 = t257 * t654 + t289 * t651;
t239 = -pkin(2) * t428 + pkin(7) * t323 + t267 * t662 + t277 * t659;
t238 = -pkin(2) * t423 + pkin(7) * t320 + t266 * t662 + t275 * t659;
t237 = -pkin(1) * t331 - t268 * t652 + t655 * t673;
t234 = -pkin(2) * t390 + pkin(7) * t309 + t260 * t662 + t264 * t659;
t232 = -t247 * t652 + t655 * t710;
t231 = t247 * t655 + t652 * t710;
t230 = t242 * t663 - t276 * t660 + (-t282 * t652 - t283 * t655) * pkin(6);
t229 = t241 * t663 - t273 * t660 + (-t278 * t652 - t279 * t655) * pkin(6);
t228 = t258 * t663 - t272 * t660 + (-t256 * t652 - t257 * t655) * pkin(6);
t227 = -pkin(1) * t256 - t253 * t652 + t655 * t674;
t226 = t235 * t663 - t252 * t660 + (-t269 * t652 - t270 * t655) * pkin(6);
t225 = -t232 * t651 + t240 * t654;
t224 = t232 * t654 + t240 * t651;
t222 = -pkin(1) * t282 - t239 * t652 + t655 * t675;
t221 = -pkin(1) * t278 - t238 * t652 + t655 * t676;
t220 = -pkin(2) * t290 + pkin(7) * t248 + t236 * t662 + t243 * t659;
t219 = -pkin(1) * t269 - t234 * t652 + t655 * t677;
t218 = t223 * t663 - t233 * t660 + (-t231 * t652 - t232 * t655) * pkin(6);
t217 = -pkin(1) * t231 - t220 * t652 + t655 * t678;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t570, 0, 0, 0, 0, 0, 0, t557, t556, 0, t401, 0, 0, 0, 0, 0, 0, t445, t446, t507, t315, 0, 0, 0, 0, 0, 0, t311, t326, t299, t245, 0, 0, 0, 0, 0, 0, t255, t262, t250, t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t569, 0, 0, 0, 0, 0, 0, t555, -t689, 0, t400, 0, 0, 0, 0, 0, 0, t443, t444, t506, t314, 0, 0, 0, 0, 0, 0, t310, t325, t298, t244, 0, 0, 0, 0, 0, 0, t254, t261, t249, t224; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t745, 0, 0, 0, 0, 0, 0, t602, -t601, 0, t455, 0, 0, 0, 0, 0, 0, t492, t493, t559, t351, 0, 0, 0, 0, 0, 0, t348, t360, t331, t256, 0, 0, 0, 0, 0, 0, t278, t282, t269, t231; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t773, -t772, -t569, -qJ(1) * t569, 0, 0, -t556, 0, t557, t651 * t737, -qJ(1) * t555 - t472 * t651 + t511 * t654, qJ(1) * t689 - t471 * t651 + t512 * t654, -t480 * t651 + t484 * t654, -qJ(1) * t400 + t385 * t654 - t402 * t651, -t505 * t651 + t548 * t654, -t483 * t651 + t533 * t654, -t503 * t651 + t545 * t654, -t504 * t651 + t547 * t654, -t502 * t651 + t544 * t654, -t568 * t651 + t590 * t654, -qJ(1) * t443 - t346 * t651 + t357 * t654, -qJ(1) * t444 - t347 * t651 + t358 * t654, -qJ(1) * t506 - t345 * t651 + t389 * t654, -qJ(1) * t314 - t287 * t651 + t288 * t654, -t370 * t651 + t422 * t654, -t333 * t651 + t380 * t654, -t362 * t651 + t408 * t654, -t369 * t651 + t421 * t654, -t361 * t651 + t407 * t654, -t404 * t651 + t473 * t654, -qJ(1) * t310 - t251 * t651 + t263 * t654, -qJ(1) * t325 - t259 * t651 + t265 * t654, -qJ(1) * t298 - t237 * t651 + t246 * t654, -qJ(1) * t244 - t227 * t651 + t228 * t654, -t296 * t651 + t341 * t654, -t274 * t651 + t297 * t654, -t285 * t651 + t302 * t654, -t295 * t651 + t340 * t654, -t286 * t651 + t303 * t654, -t304 * t651 + t350 * t654, -qJ(1) * t254 - t221 * t651 + t229 * t654, -qJ(1) * t261 - t222 * t651 + t230 * t654, -qJ(1) * t249 - t219 * t651 + t226 * t654, -qJ(1) * t224 - t217 * t651 + t218 * t654; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t772, -t773, t570, qJ(1) * t570, 0, 0, t689, 0, t555, -t654 * t737, qJ(1) * t557 + t472 * t654 + t511 * t651, qJ(1) * t556 + t471 * t654 + t512 * t651, t480 * t654 + t484 * t651, qJ(1) * t401 + t385 * t651 + t402 * t654, t505 * t654 + t548 * t651, t483 * t654 + t533 * t651, t503 * t654 + t545 * t651, t504 * t654 + t547 * t651, t502 * t654 + t544 * t651, t568 * t654 + t590 * t651, qJ(1) * t445 + t346 * t654 + t357 * t651, qJ(1) * t446 + t347 * t654 + t358 * t651, qJ(1) * t507 + t345 * t654 + t389 * t651, qJ(1) * t315 + t287 * t654 + t288 * t651, t370 * t654 + t422 * t651, t333 * t654 + t380 * t651, t362 * t654 + t408 * t651, t369 * t654 + t421 * t651, t361 * t654 + t407 * t651, t404 * t654 + t473 * t651, qJ(1) * t311 + t251 * t654 + t263 * t651, qJ(1) * t326 + t259 * t654 + t265 * t651, qJ(1) * t299 + t237 * t654 + t246 * t651, qJ(1) * t245 + t227 * t654 + t228 * t651, t296 * t654 + t341 * t651, t274 * t654 + t297 * t651, t285 * t654 + t302 * t651, t295 * t654 + t340 * t651, t286 * t654 + t303 * t651, t304 * t654 + t350 * t651, qJ(1) * t255 + t221 * t654 + t229 * t651, qJ(1) * t262 + t222 * t654 + t230 * t651, qJ(1) * t250 + t219 * t654 + t226 * t651, qJ(1) * t225 + t217 * t654 + t218 * t651; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t724, t622, 0, 0, 0, 0, t601, 0, t602, t655 * qJDD(2), pkin(1) * t604 - t542 * t655 + t652 * t713, -pkin(1) * t603 - t543 * t655 + t652 * t714, t485 * t652, pkin(1) * t456 + t652 * t767, t578 * t655 + t652 * t679, t565 * t655 + t652 * t692, t581 * t655 + t652 * t681, t577 * t655 + t652 * t680, t579 * t655 + t652 * t682, t685 * t652, pkin(1) * t494 + t482 * t655 + t652 * t670, pkin(1) * t495 + t481 * t655 + t652 * t669, pkin(1) * t560 + t413 * t655 + t652 * t715, pkin(1) * t352 + t405 * t655 + t652 * t668, t448 * t655 + t652 * t683, t394 * t655 + t652 * t699, t438 * t655 + t652 * t694, t447 * t655 + t652 * t684, t437 * t655 + t652 * t695, t476 * t655 + t652 * t686, pkin(1) * t349 + t312 * t655 + t652 * t672, pkin(1) * t363 + t324 * t655 + t652 * t671, pkin(1) * t332 + t268 * t655 + t652 * t673, pkin(1) * t257 + t253 * t655 + t652 * t674, t354 * t655 + t652 * t701, t316 * t655 + t652 * t707, t327 * t655 + t652 * t704, t353 * t655 + t652 * t702, t328 * t655 + t652 * t703, t376 * t655 + t652 * t700, pkin(1) * t279 + t238 * t655 + t652 * t676, pkin(1) * t283 + t239 * t655 + t652 * t675, pkin(1) * t270 + t234 * t655 + t652 * t677, pkin(1) * t232 + t220 * t655 + t652 * t678;];
tauB_reg = t1;
