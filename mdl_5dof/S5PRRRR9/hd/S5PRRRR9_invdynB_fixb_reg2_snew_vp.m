% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRRRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d3,d4,d5,theta1]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:22
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRRRR9_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR9_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR9_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRR9_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRR9_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5PRRRR9_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:21:22
% EndTime: 2019-12-05 17:21:45
% DurationCPUTime: 17.42s
% Computational Cost: add. (84461->706), mult. (165313->1152), div. (0->0), fcn. (120736->12), ass. (0->514)
t679 = sin(qJ(4));
t683 = cos(qJ(4));
t680 = sin(qJ(3));
t761 = qJD(2) * t680;
t632 = -t683 * qJD(3) + t679 * t761;
t684 = cos(qJ(3));
t760 = qJD(2) * t684;
t658 = -qJD(4) + t760;
t615 = t632 * t658;
t757 = qJD(2) * qJD(3);
t746 = t684 * t757;
t755 = qJDD(2) * t680;
t637 = t746 + t755;
t747 = t632 * qJD(4) - t679 * qJDD(3) - t683 * t637;
t548 = t615 + t747;
t673 = sin(pkin(5));
t675 = cos(pkin(5));
t672 = sin(pkin(10));
t674 = cos(pkin(10));
t745 = g(1) * t672 - t674 * g(2);
t763 = g(3) - qJDD(1);
t801 = -t673 * t763 + t675 * t745;
t800 = t672 * t763;
t799 = t674 * t763;
t678 = sin(qJ(5));
t661 = t680 * t757;
t753 = qJDD(2) * t684;
t638 = -t661 + t753;
t629 = -qJDD(4) + t638;
t623 = -qJDD(5) + t629;
t634 = qJD(3) * t679 + t683 * t761;
t682 = cos(qJ(5));
t585 = t682 * t632 + t634 * t678;
t587 = -t632 * t678 + t634 * t682;
t776 = t585 * t587;
t687 = -t623 - t776;
t798 = t678 * t687;
t773 = t632 * t634;
t690 = -t629 - t773;
t797 = t679 * t690;
t796 = t682 * t687;
t795 = t683 * t690;
t650 = -qJD(5) + t658;
t560 = t585 * t650;
t742 = -t683 * qJDD(3) + t637 * t679;
t574 = -qJD(4) * t634 - t742;
t689 = qJD(5) * t585 - t574 * t678 + t682 * t747;
t794 = t560 - t689;
t547 = t747 - t615;
t743 = -t682 * t574 - t678 * t747;
t447 = (qJD(5) + t650) * t587 + t743;
t645 = g(1) * t674 + g(2) * t672;
t594 = -t674 * t645 - t672 * t745;
t543 = (qJD(4) + t658) * t634 + t742;
t593 = -t672 * t645 + t674 * t745;
t583 = t585 ^ 2;
t584 = t587 ^ 2;
t793 = t632 ^ 2;
t628 = t634 ^ 2;
t649 = t650 ^ 2;
t656 = t658 ^ 2;
t792 = qJD(3) ^ 2;
t791 = pkin(3) * t680;
t790 = pkin(3) * t684;
t681 = sin(qJ(2));
t685 = cos(qJ(2));
t566 = -t645 * t681 - t801 * t685;
t567 = -t685 * t645 + t801 * t681;
t506 = t566 * t681 + t567 * t685;
t789 = pkin(6) * t506;
t686 = qJD(2) ^ 2;
t555 = -t686 * pkin(2) + qJDD(2) * pkin(7) + t567;
t614 = t673 * t745 + t675 * t763;
t523 = t684 * t555 - t680 * t614;
t739 = -pkin(8) * t680 - t790;
t635 = t739 * qJD(2);
t491 = -t792 * pkin(3) + qJDD(3) * pkin(8) + t635 * t760 + t523;
t554 = -qJDD(2) * pkin(2) - t686 * pkin(7) + t566;
t733 = -t638 + t661;
t734 = t637 + t746;
t504 = pkin(3) * t733 - pkin(8) * t734 + t554;
t428 = t491 * t679 - t683 * t504;
t400 = t690 * pkin(4) + t548 * pkin(9) - t428;
t429 = t683 * t491 + t679 * t504;
t608 = -pkin(4) * t658 - pkin(9) * t634;
t406 = -pkin(4) * t793 + pkin(9) * t574 + t608 * t658 + t429;
t345 = -t682 * t400 + t406 * t678;
t346 = t678 * t400 + t682 * t406;
t304 = -t345 * t682 + t346 * t678;
t788 = t304 * t679;
t787 = t304 * t683;
t607 = t684 * t614;
t490 = t607 - qJDD(3) * pkin(3) - t792 * pkin(8) + (qJD(2) * t635 + t555) * t680;
t432 = -t574 * pkin(4) - t793 * pkin(9) + t608 * t634 + t490;
t786 = t432 * t678;
t785 = t432 * t682;
t784 = t490 * t679;
t783 = t490 * t683;
t507 = t623 - t776;
t782 = t507 * t678;
t781 = t507 * t682;
t780 = t554 * t680;
t779 = t554 * t684;
t563 = t629 - t773;
t778 = t563 * t679;
t777 = t563 * t683;
t775 = t614 * t681;
t774 = t614 * t685;
t657 = t680 * t686 * t684;
t646 = qJDD(3) + t657;
t772 = t646 * t680;
t647 = qJDD(3) - t657;
t771 = t647 * t680;
t770 = t647 * t684;
t769 = t650 * t678;
t768 = t650 * t682;
t767 = t658 * t679;
t766 = t658 * t683;
t668 = t680 ^ 2;
t765 = t668 * t686;
t669 = t684 ^ 2;
t762 = t668 + t669;
t756 = qJDD(2) * t673;
t754 = qJDD(2) * t681;
t752 = qJDD(2) * t685;
t751 = t680 * t776;
t750 = t684 * t776;
t749 = t680 * t773;
t748 = t684 * t773;
t305 = t345 * t678 + t682 * t346;
t522 = t555 * t680 + t607;
t454 = t522 * t680 + t684 * t523;
t741 = t681 * t657;
t740 = t685 * t657;
t453 = t522 * t684 - t523 * t680;
t640 = t762 * qJDD(2);
t666 = t669 * t686;
t643 = t666 + t765;
t591 = t640 * t685 - t643 * t681;
t737 = pkin(6) * t591 + t453 * t681;
t641 = -t681 * t686 + t752;
t736 = -pkin(6) * t641 - t775;
t706 = t685 * t686 + t754;
t735 = -pkin(6) * t706 + t774;
t271 = t305 * t683 - t788;
t267 = t271 * t684 + t432 * t680;
t270 = t305 * t679 + t787;
t732 = t267 * t681 - t270 * t685;
t451 = t560 + t689;
t393 = -t447 * t678 + t451 * t682;
t395 = -t447 * t682 - t451 * t678;
t333 = -t393 * t679 + t395 * t683;
t486 = -t583 - t584;
t320 = t333 * t684 + t486 * t680;
t331 = t393 * t683 + t395 * t679;
t731 = t320 * t681 - t331 * t685;
t446 = (qJD(5) - t650) * t587 + t743;
t394 = -t446 * t678 + t682 * t794;
t396 = -t446 * t682 - t678 * t794;
t334 = -t394 * t679 + t396 * t683;
t534 = -t584 + t583;
t326 = t334 * t684 - t534 * t680;
t332 = -t394 * t683 - t396 * t679;
t730 = t326 * t681 + t332 * t685;
t517 = -t649 - t583;
t440 = t517 * t678 + t796;
t441 = t517 * t682 - t798;
t387 = -t440 * t679 + t441 * t683;
t350 = t387 * t684 + t446 * t680;
t386 = t440 * t683 + t441 * t679;
t729 = t350 * t681 - t386 * t685;
t374 = t428 * t679 + t429 * t683;
t352 = t374 * t684 + t490 * t680;
t373 = -t428 * t683 + t429 * t679;
t728 = t352 * t681 - t373 * t685;
t549 = -t584 - t649;
t459 = t549 * t682 + t782;
t460 = -t549 * t678 + t781;
t402 = -t459 * t679 + t460 * t683;
t357 = t402 * t684 + t680 * t794;
t401 = t459 * t683 + t460 * t679;
t727 = t357 * t681 - t401 * t685;
t559 = -t584 + t649;
t463 = t559 * t682 + t798;
t465 = -t559 * t678 + t796;
t409 = -t463 * t679 + t465 * t683;
t361 = t409 * t684 - t451 * t680;
t407 = -t463 * t683 - t465 * t679;
t726 = t361 * t681 + t407 * t685;
t558 = t583 - t649;
t464 = t558 * t678 - t781;
t466 = t558 * t682 + t782;
t410 = -t464 * t679 + t466 * t683;
t362 = t410 * t684 - t447 * t680;
t408 = -t464 * t683 - t466 * t679;
t725 = t362 * t681 + t408 * t685;
t482 = -qJD(5) * t587 - t743;
t442 = t482 * t682 - t585 * t769;
t443 = -t482 * t678 - t585 * t768;
t390 = -t442 * t679 + t443 * t683;
t368 = t390 * t684 - t751;
t388 = -t442 * t683 - t443 * t679;
t724 = t368 * t681 + t388 * t685;
t444 = -t587 * t768 - t678 * t689;
t445 = t587 * t769 - t682 * t689;
t391 = -t444 * t679 + t445 * t683;
t369 = t391 * t684 + t751;
t389 = -t444 * t683 - t445 * t679;
t723 = t369 * t681 + t389 * t685;
t497 = (t585 * t678 + t587 * t682) * t650;
t498 = (t585 * t682 - t587 * t678) * t650;
t431 = -t497 * t679 + t498 * t683;
t422 = t431 * t684 - t623 * t680;
t430 = -t497 * t683 - t498 * t679;
t722 = t422 * t681 + t430 * t685;
t479 = -t543 * t683 - t548 * t679;
t562 = t628 + t793;
t437 = t479 * t684 - t562 * t680;
t477 = -t543 * t679 + t548 * t683;
t721 = t437 * t681 - t477 * t685;
t720 = t454 * t681 - t554 * t685;
t544 = (-qJD(4) + t658) * t634 - t742;
t478 = t544 * t683 + t547 * t679;
t595 = -t628 + t793;
t456 = t478 * t684 - t595 * t680;
t476 = -t544 * t679 + t547 * t683;
t719 = t456 * t681 + t476 * t685;
t580 = -t656 - t793;
t511 = t580 * t683 - t797;
t458 = t511 * t684 - t544 * t680;
t510 = t580 * t679 + t795;
t718 = t458 * t681 - t510 * t685;
t590 = -t628 - t656;
t521 = -t590 * t679 + t777;
t462 = t521 * t684 - t547 * t680;
t520 = t590 * t683 + t778;
t717 = t462 * t681 - t520 * t685;
t613 = -t628 + t656;
t532 = -t613 * t679 + t795;
t469 = t532 * t684 - t548 * t680;
t530 = -t613 * t683 - t797;
t716 = t469 * t681 + t530 * t685;
t612 = -t656 + t793;
t533 = t612 * t683 + t778;
t470 = t533 * t684 - t543 * t680;
t531 = -t612 * t679 + t777;
t715 = t470 * t681 + t531 * t685;
t540 = -t574 * t679 - t632 * t766;
t494 = t540 * t684 - t749;
t539 = -t574 * t683 + t632 * t767;
t714 = t494 * t681 + t539 * t685;
t542 = t634 * t767 - t683 * t747;
t495 = t542 * t684 + t749;
t541 = t634 * t766 + t679 * t747;
t713 = t495 * t681 + t541 * t685;
t553 = (t632 * t683 - t634 * t679) * t658;
t536 = t553 * t684 - t629 * t680;
t552 = (-t632 * t679 - t634 * t683) * t658;
t712 = t536 * t681 + t552 * t685;
t505 = t566 * t685 - t567 * t681;
t636 = 0.2e1 * t746 + t755;
t639 = -0.2e1 * t661 + t753;
t589 = -t636 * t680 + t639 * t684;
t644 = t666 - t765;
t711 = t589 * t681 + t644 * t685;
t655 = -t666 - t792;
t603 = t655 * t684 - t772;
t710 = t603 * t681 + t639 * t685;
t653 = -t765 - t792;
t605 = -t653 * t680 - t770;
t709 = t605 * t681 - t636 * t685;
t618 = t706 * t675;
t708 = t618 * t674 + t641 * t672;
t578 = t618 * t672 - t641 * t674;
t707 = t640 * t681 + t643 * t685;
t630 = t762 * t757;
t705 = -qJDD(3) * t685 + t630 * t681;
t654 = t666 - t792;
t602 = t654 * t684 - t771;
t704 = t602 * t681 - t684 * t752;
t631 = t684 * t646;
t652 = -t765 + t792;
t604 = -t652 * t680 + t631;
t703 = t604 * t681 - t680 * t752;
t609 = -t638 * t680 - t669 * t757;
t702 = t609 * t681 - t740;
t610 = t637 * t684 - t668 * t757;
t701 = t610 * t681 + t740;
t295 = -pkin(4) * t432 + pkin(9) * t305;
t255 = -pkin(8) * t270 - pkin(9) * t787 - t295 * t679;
t260 = -pkin(3) * t270 - pkin(4) * t304;
t266 = t271 * t680 - t432 * t684;
t242 = -pkin(7) * t266 + t255 * t684 - t260 * t680;
t245 = -pkin(2) * t266 + pkin(3) * t432 - pkin(8) * t271 + pkin(9) * t788 - t295 * t683;
t254 = t267 * t685 + t270 * t681;
t700 = pkin(6) * t254 + t242 * t681 + t245 * t685;
t287 = -pkin(4) * t486 + pkin(9) * t395 + t305;
t288 = -pkin(9) * t393 - t304;
t257 = -pkin(8) * t331 - t287 * t679 + t288 * t683;
t312 = -pkin(3) * t331 - pkin(4) * t393;
t319 = t333 * t680 - t486 * t684;
t252 = -pkin(7) * t319 + t257 * t684 - t312 * t680;
t256 = -pkin(2) * t319 + pkin(3) * t486 - pkin(8) * t333 - t287 * t683 - t288 * t679;
t289 = t320 * t685 + t331 * t681;
t699 = pkin(6) * t289 + t252 * t681 + t256 * t685;
t347 = -pkin(4) * t446 + pkin(9) * t441 - t785;
t381 = -pkin(9) * t440 + t786;
t297 = -pkin(8) * t386 - t347 * t679 + t381 * t683;
t308 = -pkin(3) * t386 - pkin(4) * t440 + t345;
t349 = t387 * t680 - t446 * t684;
t264 = -pkin(7) * t349 + t297 * t684 - t308 * t680;
t282 = -pkin(2) * t349 + pkin(3) * t446 - pkin(8) * t387 - t347 * t683 - t381 * t679;
t315 = t350 * t685 + t386 * t681;
t698 = pkin(6) * t315 + t264 * t681 + t282 * t685;
t353 = -pkin(4) * t794 + pkin(9) * t460 + t786;
t392 = -pkin(9) * t459 + t785;
t307 = -pkin(8) * t401 - t353 * t679 + t392 * t683;
t310 = -pkin(3) * t401 - pkin(4) * t459 + t346;
t356 = t402 * t680 - t684 * t794;
t265 = -pkin(7) * t356 + t307 * t684 - t310 * t680;
t284 = -pkin(2) * t356 + pkin(3) * t794 - pkin(8) * t402 - t353 * t683 - t392 * t679;
t321 = t357 * t685 + t401 * t681;
t697 = pkin(6) * t321 + t265 * t681 + t284 * t685;
t351 = t374 * t680 - t490 * t684;
t296 = -pkin(7) * t351 + (-pkin(8) * t684 + t791) * t373;
t311 = -pkin(2) * t351 + pkin(3) * t490 - pkin(8) * t374;
t314 = t352 * t685 + t373 * t681;
t696 = pkin(6) * t314 + t296 * t681 + t311 * t685;
t348 = -pkin(8) * t477 - t373;
t436 = t479 * t680 + t562 * t684;
t316 = -pkin(7) * t436 + t348 * t684 + t477 * t791;
t324 = -pkin(2) * t436 - pkin(3) * t562 - pkin(8) * t479 - t374;
t399 = t437 * t685 + t477 * t681;
t695 = pkin(6) * t399 + t316 * t681 + t324 * t685;
t405 = -pkin(3) * t510 + t428;
t433 = -pkin(8) * t510 + t784;
t457 = t511 * t680 + t544 * t684;
t338 = -pkin(7) * t457 - t405 * t680 + t433 * t684;
t375 = -pkin(2) * t457 - pkin(3) * t544 - pkin(8) * t511 + t783;
t416 = t458 * t685 + t510 * t681;
t694 = pkin(6) * t416 + t338 * t681 + t375 * t685;
t413 = -pkin(3) * t520 + t429;
t435 = -pkin(8) * t520 + t783;
t461 = t521 * t680 + t547 * t684;
t341 = -pkin(7) * t461 - t413 * t680 + t435 * t684;
t376 = -pkin(2) * t461 - pkin(3) * t547 - pkin(8) * t521 - t784;
t417 = t462 * t685 + t520 * t681;
t693 = pkin(6) * t417 + t341 * t681 + t376 * t685;
t599 = t655 * t680 + t631;
t487 = -pkin(2) * t599 + t522;
t518 = -pkin(7) * t599 + t780;
t556 = t603 * t685 - t639 * t681;
t692 = pkin(6) * t556 + t487 * t685 + t518 * t681;
t601 = t653 * t684 - t771;
t488 = -pkin(2) * t601 + t523;
t519 = -pkin(7) * t601 + t779;
t557 = t605 * t685 + t636 * t681;
t691 = pkin(6) * t557 + t488 * t685 + t519 * t681;
t423 = t454 * t685 + t554 * t681;
t688 = pkin(6) * t423 - (-pkin(2) * t685 - pkin(7) * t681) * t453;
t619 = t641 * t675;
t617 = t641 * t673;
t616 = t706 * t673;
t611 = qJDD(3) * t681 + t630 * t685;
t600 = t652 * t684 + t772;
t598 = t654 * t680 + t770;
t597 = t734 * t680;
t596 = t733 * t684;
t592 = t705 * t675;
t588 = t636 * t684 + t639 * t680;
t582 = t707 * t675;
t581 = t707 * t673;
t579 = -t619 * t672 - t674 * t706;
t577 = t619 * t674 - t672 * t706;
t573 = t610 * t685 - t741;
t572 = t609 * t685 + t741;
t571 = t604 * t685 + t680 * t754;
t570 = t602 * t685 + t681 * t753;
t551 = t589 * t685 - t644 * t681;
t538 = -t774 + (t616 * t673 + t618 * t675) * pkin(6);
t537 = -t775 + (-t617 * t673 - t619 * t675) * pkin(6);
t535 = t553 * t680 + t629 * t684;
t529 = -t582 * t672 + t591 * t674;
t528 = t582 * t674 + t591 * t672;
t527 = -t597 * t673 + t675 * t701;
t526 = t596 * t673 + t675 * t702;
t525 = -t600 * t673 + t675 * t703;
t524 = -t598 * t673 + t675 * t704;
t515 = -t601 * t673 + t675 * t709;
t514 = -t599 * t673 + t675 * t710;
t513 = t601 * t675 + t673 * t709;
t512 = t599 * t675 + t673 * t710;
t503 = -t588 * t673 + t675 * t711;
t502 = pkin(2) * t639 + pkin(7) * t603 - t779;
t501 = -pkin(2) * t636 + pkin(7) * t605 + t780;
t496 = t506 * t675;
t493 = t542 * t680 - t748;
t492 = t540 * t680 + t748;
t485 = -pkin(1) * t617 + t566 * t673 + t675 * t735;
t484 = pkin(1) * t616 + t567 * t673 + t675 * t736;
t481 = -t505 * t675 + t614 * t673;
t480 = -t505 * t673 - t614 * t675;
t475 = t536 * t685 - t552 * t681;
t474 = -t515 * t672 + t557 * t674;
t473 = -t514 * t672 + t556 * t674;
t472 = t515 * t674 + t557 * t672;
t471 = t514 * t674 + t556 * t672;
t468 = t533 * t680 + t543 * t684;
t467 = t532 * t680 + t548 * t684;
t455 = t478 * t680 + t595 * t684;
t439 = t495 * t685 - t541 * t681;
t438 = t494 * t685 - t539 * t681;
t434 = pkin(2) * t643 + pkin(7) * t640 + t454;
t427 = -t535 * t673 + t675 * t712;
t426 = -pkin(2) * t554 + pkin(7) * t454;
t425 = t470 * t685 - t531 * t681;
t424 = t469 * t685 - t530 * t681;
t421 = t431 * t680 + t623 * t684;
t420 = -pkin(1) * t480 + t675 * t789;
t419 = -t481 * t672 + t506 * t674;
t418 = t481 * t674 + t506 * t672;
t415 = t453 * t685 + (-t581 * t673 - t582 * t675) * pkin(6);
t414 = (-t480 * t673 - t481 * t675) * pkin(6);
t412 = -t493 * t673 + t675 * t713;
t411 = -t492 * t673 + t675 * t714;
t403 = t456 * t685 - t476 * t681;
t385 = -t488 * t681 + t519 * t685 + (-t513 * t673 - t515 * t675) * pkin(6);
t384 = -t487 * t681 + t518 * t685 + (-t512 * t673 - t514 * t675) * pkin(6);
t383 = -t468 * t673 + t675 * t715;
t382 = -t467 * t673 + t675 * t716;
t380 = -t461 * t673 + t675 * t717;
t379 = t461 * t675 + t673 * t717;
t378 = t453 * t673 + t675 * t720;
t377 = -t453 * t675 + t673 * t720;
t372 = -t457 * t673 + t675 * t718;
t371 = t457 * t675 + t673 * t718;
t370 = t422 * t685 - t430 * t681;
t367 = t391 * t680 - t750;
t366 = t390 * t680 + t750;
t365 = -pkin(1) * t513 - t501 * t673 + t675 * t691;
t364 = -pkin(1) * t512 - t502 * t673 + t675 * t692;
t363 = -pkin(1) * t581 - t434 * t673 + t675 * t737;
t360 = t410 * t680 + t447 * t684;
t359 = t409 * t680 + t451 * t684;
t358 = -t455 * t673 + t675 * t719;
t355 = -t436 * t673 + t675 * t721;
t354 = t436 * t675 + t673 * t721;
t343 = -t378 * t672 + t423 * t674;
t342 = t378 * t674 + t423 * t672;
t340 = -t380 * t672 + t417 * t674;
t339 = t380 * t674 + t417 * t672;
t337 = -t421 * t673 + t675 * t722;
t336 = -t372 * t672 + t416 * t674;
t335 = t372 * t674 + t416 * t672;
t330 = -pkin(2) * t520 + pkin(7) * t462 + t413 * t684 + t435 * t680;
t329 = -pkin(2) * t510 + pkin(7) * t458 + t405 * t684 + t433 * t680;
t328 = t362 * t685 - t408 * t681;
t327 = t361 * t685 - t407 * t681;
t325 = t334 * t680 + t534 * t684;
t323 = t369 * t685 - t389 * t681;
t322 = t368 * t685 - t388 * t681;
t318 = -t355 * t672 + t399 * t674;
t317 = t355 * t674 + t399 * t672;
t313 = pkin(7) * t437 + t348 * t680 + (-pkin(2) - t790) * t477;
t309 = -(pkin(2) * t681 - pkin(7) * t685) * t453 + (-t377 * t673 - t378 * t675) * pkin(6);
t306 = -pkin(1) * t377 - t426 * t673 + t675 * t688;
t303 = -t360 * t673 + t675 * t725;
t302 = -t359 * t673 + t675 * t726;
t301 = -t367 * t673 + t675 * t723;
t300 = -t366 * t673 + t675 * t724;
t299 = -t356 * t673 + t675 * t727;
t298 = t356 * t675 + t673 * t727;
t294 = -t349 * t673 + t675 * t729;
t293 = t349 * t675 + t673 * t729;
t292 = t326 * t685 - t332 * t681;
t291 = -t351 * t673 + t675 * t728;
t290 = t351 * t675 + t673 * t728;
t286 = pkin(7) * t352 + (-pkin(2) + t739) * t373;
t285 = t341 * t685 - t376 * t681 + (-t379 * t673 - t380 * t675) * pkin(6);
t283 = t338 * t685 - t375 * t681 + (-t371 * t673 - t372 * t675) * pkin(6);
t281 = -t299 * t672 + t321 * t674;
t280 = t299 * t674 + t321 * t672;
t279 = -t325 * t673 + t675 * t730;
t278 = -t319 * t673 + t675 * t731;
t277 = t319 * t675 + t673 * t731;
t276 = -t294 * t672 + t315 * t674;
t275 = t294 * t674 + t315 * t672;
t274 = -pkin(1) * t379 - t330 * t673 + t675 * t693;
t273 = -t291 * t672 + t314 * t674;
t272 = t291 * t674 + t314 * t672;
t269 = -pkin(1) * t371 - t329 * t673 + t675 * t694;
t268 = t316 * t685 - t324 * t681 + (-t354 * t673 - t355 * t675) * pkin(6);
t263 = -pkin(2) * t401 + pkin(7) * t357 + t307 * t680 + t310 * t684;
t262 = -pkin(2) * t386 + pkin(7) * t350 + t297 * t680 + t308 * t684;
t261 = -pkin(1) * t354 - t313 * t673 + t675 * t695;
t259 = -t278 * t672 + t289 * t674;
t258 = t278 * t674 + t289 * t672;
t253 = t296 * t685 - t311 * t681 + (-t290 * t673 - t291 * t675) * pkin(6);
t251 = -pkin(2) * t331 + pkin(7) * t320 + t257 * t680 + t312 * t684;
t250 = -pkin(1) * t290 - t286 * t673 + t675 * t696;
t249 = t265 * t685 - t284 * t681 + (-t298 * t673 - t299 * t675) * pkin(6);
t248 = -t266 * t673 + t675 * t732;
t247 = t266 * t675 + t673 * t732;
t246 = t264 * t685 - t282 * t681 + (-t293 * t673 - t294 * t675) * pkin(6);
t244 = -pkin(1) * t298 - t263 * t673 + t675 * t697;
t243 = -pkin(1) * t293 - t262 * t673 + t675 * t698;
t241 = -t248 * t672 + t254 * t674;
t240 = t248 * t674 + t254 * t672;
t239 = -pkin(2) * t270 + pkin(7) * t267 + t255 * t680 + t260 * t684;
t238 = t252 * t685 - t256 * t681 + (-t277 * t673 - t278 * t675) * pkin(6);
t237 = -pkin(1) * t277 - t251 * t673 + t675 * t699;
t236 = t242 * t685 - t245 * t681 + (-t247 * t673 - t248 * t675) * pkin(6);
t235 = -pkin(1) * t247 - t239 * t673 + t675 * t700;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t594, 0, 0, 0, 0, 0, 0, t579, t578, 0, t419, 0, 0, 0, 0, 0, 0, t473, t474, t529, t343, 0, 0, 0, 0, 0, 0, t336, t340, t318, t273, 0, 0, 0, 0, 0, 0, t276, t281, t259, t241; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t593, 0, 0, 0, 0, 0, 0, t577, -t708, 0, t418, 0, 0, 0, 0, 0, 0, t471, t472, t528, t342, 0, 0, 0, 0, 0, 0, t335, t339, t317, t272, 0, 0, 0, 0, 0, 0, t275, t280, t258, t240; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t763, 0, 0, 0, 0, 0, 0, t617, -t616, 0, t480, 0, 0, 0, 0, 0, 0, t512, t513, t581, t377, 0, 0, 0, 0, 0, 0, t371, t379, t354, t290, 0, 0, 0, 0, 0, 0, t293, t298, t277, t247; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t800, -t799, -t593, -qJ(1) * t593, 0, 0, -t578, 0, t579, t672 * t756, -qJ(1) * t577 - t485 * t672 + t537 * t674, qJ(1) * t708 - t484 * t672 + t538 * t674, -t496 * t672 + t505 * t674, -qJ(1) * t418 + t414 * t674 - t420 * t672, -t527 * t672 + t573 * t674, -t503 * t672 + t551 * t674, -t525 * t672 + t571 * t674, -t526 * t672 + t572 * t674, -t524 * t672 + t570 * t674, -t592 * t672 + t611 * t674, -qJ(1) * t471 - t364 * t672 + t384 * t674, -qJ(1) * t472 - t365 * t672 + t385 * t674, -qJ(1) * t528 - t363 * t672 + t415 * t674, -qJ(1) * t342 - t306 * t672 + t309 * t674, -t412 * t672 + t439 * t674, -t358 * t672 + t403 * t674, -t382 * t672 + t424 * t674, -t411 * t672 + t438 * t674, -t383 * t672 + t425 * t674, -t427 * t672 + t475 * t674, -qJ(1) * t335 - t269 * t672 + t283 * t674, -qJ(1) * t339 - t274 * t672 + t285 * t674, -qJ(1) * t317 - t261 * t672 + t268 * t674, -qJ(1) * t272 - t250 * t672 + t253 * t674, -t301 * t672 + t323 * t674, -t279 * t672 + t292 * t674, -t302 * t672 + t327 * t674, -t300 * t672 + t322 * t674, -t303 * t672 + t328 * t674, -t337 * t672 + t370 * t674, -qJ(1) * t275 - t243 * t672 + t246 * t674, -qJ(1) * t280 - t244 * t672 + t249 * t674, -qJ(1) * t258 - t237 * t672 + t238 * t674, -qJ(1) * t240 - t235 * t672 + t236 * t674; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t799, -t800, t594, qJ(1) * t594, 0, 0, t708, 0, t577, -t674 * t756, qJ(1) * t579 + t485 * t674 + t537 * t672, qJ(1) * t578 + t484 * t674 + t538 * t672, t496 * t674 + t505 * t672, qJ(1) * t419 + t414 * t672 + t420 * t674, t527 * t674 + t573 * t672, t503 * t674 + t551 * t672, t525 * t674 + t571 * t672, t526 * t674 + t572 * t672, t524 * t674 + t570 * t672, t592 * t674 + t611 * t672, qJ(1) * t473 + t364 * t674 + t384 * t672, qJ(1) * t474 + t365 * t674 + t385 * t672, qJ(1) * t529 + t363 * t674 + t415 * t672, qJ(1) * t343 + t306 * t674 + t309 * t672, t412 * t674 + t439 * t672, t358 * t674 + t403 * t672, t382 * t674 + t424 * t672, t411 * t674 + t438 * t672, t383 * t674 + t425 * t672, t427 * t674 + t475 * t672, qJ(1) * t336 + t269 * t674 + t283 * t672, qJ(1) * t340 + t274 * t674 + t285 * t672, qJ(1) * t318 + t261 * t674 + t268 * t672, qJ(1) * t273 + t250 * t674 + t253 * t672, t301 * t674 + t323 * t672, t279 * t674 + t292 * t672, t302 * t674 + t327 * t672, t300 * t674 + t322 * t672, t303 * t674 + t328 * t672, t337 * t674 + t370 * t672, qJ(1) * t276 + t243 * t674 + t246 * t672, qJ(1) * t281 + t244 * t674 + t249 * t672, qJ(1) * t259 + t237 * t674 + t238 * t672, qJ(1) * t241 + t235 * t674 + t236 * t672; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t745, t645, 0, 0, 0, 0, t616, 0, t617, t675 * qJDD(2), pkin(1) * t619 - t566 * t675 + t673 * t735, -pkin(1) * t618 - t567 * t675 + t673 * t736, t506 * t673, pkin(1) * t481 + t673 * t789, t597 * t675 + t673 * t701, t588 * t675 + t673 * t711, t600 * t675 + t673 * t703, -t596 * t675 + t673 * t702, t598 * t675 + t673 * t704, t705 * t673, pkin(1) * t514 + t502 * t675 + t673 * t692, pkin(1) * t515 + t501 * t675 + t673 * t691, pkin(1) * t582 + t434 * t675 + t673 * t737, pkin(1) * t378 + t426 * t675 + t673 * t688, t493 * t675 + t673 * t713, t455 * t675 + t673 * t719, t467 * t675 + t673 * t716, t492 * t675 + t673 * t714, t468 * t675 + t673 * t715, t535 * t675 + t673 * t712, pkin(1) * t372 + t329 * t675 + t673 * t694, pkin(1) * t380 + t330 * t675 + t673 * t693, pkin(1) * t355 + t313 * t675 + t673 * t695, pkin(1) * t291 + t286 * t675 + t673 * t696, t367 * t675 + t673 * t723, t325 * t675 + t673 * t730, t359 * t675 + t673 * t726, t366 * t675 + t673 * t724, t360 * t675 + t673 * t725, t421 * t675 + t673 * t722, pkin(1) * t294 + t262 * t675 + t673 * t698, pkin(1) * t299 + t263 * t675 + t673 * t697, pkin(1) * t278 + t251 * t675 + t673 * t699, pkin(1) * t248 + t239 * t675 + t673 * t700;];
tauB_reg = t1;
