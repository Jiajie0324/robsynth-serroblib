% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S5PRRRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d3,d4,d5,theta1]';
% 
% Output:
% MMD_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:22
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S5PRRRR9_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR9_inertiaDJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR9_inertiaDJ_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5PRRRR9_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:21:11
% EndTime: 2019-12-05 17:21:19
% DurationCPUTime: 2.21s
% Computational Cost: add. (2039->251), mult. (5539->480), div. (0->0), fcn. (5069->10), ass. (0->131)
t154 = -pkin(9) - pkin(8);
t74 = cos(qJ(4));
t158 = t154 * t74;
t70 = sin(qJ(5));
t150 = cos(qJ(5));
t100 = t154 * t150;
t71 = sin(qJ(4));
t94 = t71 * t100;
t32 = t158 * t70 + t94;
t108 = t150 * qJD(5);
t157 = t150 * qJD(4) + t108;
t64 = t71 ^ 2;
t66 = t74 ^ 2;
t142 = t64 - t66;
t107 = qJD(4) * t142;
t156 = qJD(4) + qJD(5);
t75 = cos(qJ(3));
t134 = qJD(4) * t75;
t120 = t71 * t134;
t72 = sin(qJ(3));
t63 = t72 * qJD(3);
t87 = t74 * t63 + t120;
t151 = t75 * pkin(3);
t98 = -pkin(8) * t72 - t151;
t93 = -pkin(2) + t98;
t88 = t74 * t93;
t97 = pkin(3) * t72 - pkin(8) * t75;
t91 = t97 * t71;
t20 = t87 * pkin(7) - qJD(3) * t91 - qJD(4) * t88;
t155 = t154 * t72 - pkin(2) - t151;
t153 = t71 * pkin(7);
t152 = t74 * pkin(3);
t76 = cos(qJ(2));
t139 = qJD(2) * t76;
t68 = sin(pkin(5));
t117 = t68 * t139;
t73 = sin(qJ(2));
t148 = t68 * t73;
t69 = cos(pkin(5));
t41 = t75 * t148 + t69 * t72;
t28 = t41 * qJD(3) + t72 * t117;
t149 = t28 * t72;
t40 = t72 * t148 - t69 * t75;
t22 = t40 * t28;
t147 = t68 * t76;
t146 = t70 * t71;
t145 = t71 * t72;
t144 = t74 * t75;
t59 = pkin(7) * t144;
t37 = t71 * t93 + t59;
t65 = t72 ^ 2;
t141 = -t75 ^ 2 + t65;
t140 = qJD(2) * t73;
t138 = qJD(3) * t40;
t137 = qJD(3) * t74;
t136 = qJD(4) * t71;
t135 = qJD(4) * t74;
t133 = qJD(5) * t70;
t132 = t75 * qJD(3);
t131 = t75 * t153;
t130 = -0.2e1 * pkin(2) * qJD(3);
t129 = -0.2e1 * pkin(3) * qJD(4);
t128 = t70 * t145;
t127 = pkin(4) * t136;
t126 = pkin(4) * t133;
t125 = pkin(7) * t132;
t123 = t71 * t132;
t122 = t40 * t136;
t121 = t72 * t136;
t119 = t74 * t134;
t118 = t68 * t140;
t116 = t71 * t135;
t115 = t72 * t132;
t114 = t74 * t132;
t112 = -pkin(4) - t153;
t111 = t150 * t74;
t110 = qJD(3) * t150;
t106 = t141 * qJD(3);
t105 = 0.2e1 * t115;
t104 = t154 * t146;
t103 = t72 * t114;
t102 = t65 * t116;
t101 = pkin(4) * t108;
t99 = t75 * t110;
t29 = -t74 * t147 - t41 * t71;
t92 = t71 * t147 - t41 * t74;
t96 = -t29 * t74 + t71 * t92;
t36 = t88 - t131;
t95 = -t36 * t74 - t37 * t71;
t90 = t40 * t135 + t28 * t71;
t89 = -t28 * t74 + t122;
t15 = -t150 * t92 + t70 * t29;
t49 = t150 * t71 + t70 * t74;
t31 = -pkin(9) * t145 + t37;
t77 = (-t155 * t71 - t59) * qJD(4) + (t75 * t158 + (-t112 + t152) * t72) * qJD(3);
t86 = t72 * t135 + t123;
t79 = -t86 * pkin(9) - t20;
t82 = t112 * t75 + t155 * t74;
t80 = t150 * t82;
t3 = -qJD(5) * t80 + t31 * t133 - t150 * t79 - t70 * t77;
t33 = -t150 * t158 + t104;
t27 = t75 * t117 - t138;
t7 = t92 * qJD(4) + t74 * t118 - t27 * t71;
t8 = t29 * qJD(4) + t71 * t118 + t27 * t74;
t85 = t96 * qJD(4) - t7 * t71 + t74 * t8;
t21 = -t37 * qJD(4) + (pkin(7) * t145 + t74 * t97) * qJD(3);
t84 = t95 * qJD(4) - t20 * t74 - t21 * t71;
t83 = t27 * t75 + t149 + (t40 * t75 - t41 * t72) * qJD(3);
t81 = t70 * t82;
t26 = t156 * t49;
t12 = t150 * t31 + t81;
t78 = t150 * t77 - t70 * t79;
t62 = -pkin(4) * t74 - pkin(3);
t56 = -0.2e1 * t115;
t50 = (pkin(4) * t71 + pkin(7)) * t72;
t48 = -t111 + t146;
t39 = t72 * t111 - t128;
t38 = t49 * t72;
t35 = t86 * pkin(4) + t125;
t34 = t72 * t107 - t71 * t114;
t25 = t156 * t146 - t157 * t74;
t19 = -t33 * qJD(5) + (t74 * t100 - t104) * qJD(4);
t18 = -t32 * qJD(4) - qJD(5) * t94 - t158 * t133;
t17 = t71 * t99 - t70 * t121 - qJD(5) * t128 + (t70 * t132 + t157 * t72) * t74;
t16 = t70 * t123 + t26 * t72 - t74 * t99;
t14 = t150 * t29 + t70 * t92;
t11 = -t70 * t31 + t80;
t4 = -t12 * qJD(5) + t78;
t2 = -t15 * qJD(5) + t150 * t7 - t70 * t8;
t1 = -t29 * t108 - t133 * t92 - t150 * t8 - t70 * t7;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t68 ^ 2 * t73 * t139 + 0.2e1 * t41 * t27 + 0.2e1 * t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t29 * t7 - 0.2e1 * t8 * t92 + 0.2e1 * t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t1 * t15 + 0.2e1 * t14 * t2 + 0.2e1 * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t118, -t117, 0, 0, 0, 0, 0, 0, 0, 0, (-t75 * t140 - t76 * t63) * t68, (-t76 * t132 + t72 * t140) * t68, t83, -pkin(2) * t118 + t83 * pkin(7), 0, 0, 0, 0, 0, 0, (t71 * t138 - t7) * t75 + (qJD(3) * t29 + t90) * t72, (t40 * t137 + t8) * t75 + (qJD(3) * t92 - t89) * t72, t96 * t132 + (-t7 * t74 - t71 * t8 + (t29 * t71 + t74 * t92) * qJD(4)) * t72, t20 * t92 + t21 * t29 + t36 * t7 + t37 * t8 + (t40 * t132 + t149) * pkin(7), 0, 0, 0, 0, 0, 0, t14 * t63 + t17 * t40 - t2 * t75 + t28 * t38, -t1 * t75 - t15 * t63 - t16 * t40 + t28 * t39, t1 * t38 + t14 * t16 - t15 * t17 - t2 * t39, -t1 * t12 + t11 * t2 + t14 * t4 - t15 * t3 + t28 * t50 + t35 * t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105, -0.2e1 * t106, 0, t56, 0, 0, t72 * t130, t75 * t130, 0, 0, 0.2e1 * t66 * t115 - 0.2e1 * t102, -0.4e1 * t71 * t103 + 0.2e1 * t65 * t107, 0.2e1 * t72 * t120 + 0.2e1 * t141 * t137, 0.2e1 * t64 * t115 + 0.2e1 * t102, -0.2e1 * t71 * t106 + 0.2e1 * t72 * t119, t56, 0.2e1 * t36 * t63 - 0.2e1 * t21 * t75 + 0.2e1 * (t71 * t105 + t65 * t135) * pkin(7), -0.2e1 * t37 * t63 - 0.2e1 * t20 * t75 + 0.2e1 * (-t65 * t136 + 0.2e1 * t103) * pkin(7), 0.2e1 * t95 * t132 + 0.2e1 * (t20 * t71 - t21 * t74 + (t36 * t71 - t37 * t74) * qJD(4)) * t72, 0.2e1 * pkin(7) ^ 2 * t115 - 0.2e1 * t20 * t37 + 0.2e1 * t21 * t36, -0.2e1 * t39 * t16, 0.2e1 * t16 * t38 - 0.2e1 * t17 * t39, 0.2e1 * t16 * t75 + 0.2e1 * t39 * t63, 0.2e1 * t38 * t17, 0.2e1 * t17 * t75 - 0.2e1 * t38 * t63, t56, 0.2e1 * t11 * t63 + 0.2e1 * t17 * t50 + 0.2e1 * t35 * t38 - 0.2e1 * t4 * t75, -0.2e1 * t12 * t63 - 0.2e1 * t16 * t50 - 0.2e1 * t3 * t75 + 0.2e1 * t35 * t39, 0.2e1 * t11 * t16 - 0.2e1 * t12 * t17 + 0.2e1 * t3 * t38 - 0.2e1 * t39 * t4, 0.2e1 * t11 * t4 - 0.2e1 * t12 * t3 + 0.2e1 * t35 * t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t28, -t27, 0, 0, 0, 0, 0, 0, 0, 0, t89, t90, t85, -pkin(3) * t28 + pkin(8) * t85, 0, 0, 0, 0, 0, 0, t26 * t40 + t28 * t48, -t25 * t40 + t28 * t49, t1 * t48 + t14 * t25 - t15 * t26 - t2 * t49, pkin(4) * t122 - t1 * t33 + t14 * t19 - t15 * t18 + t2 * t32 + t28 * t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t132, 0, -t63, 0, -t125, pkin(7) * t63, 0, 0, -t34, -0.4e1 * t72 * t116 - t142 * t132, t71 * t63 - t119, t34, t87, 0, (pkin(8) * t144 + (-t152 + t153) * t72) * qJD(4) + (t71 * t98 - t59) * qJD(3), (pkin(7) * t72 * t74 + t91) * qJD(4) + (t74 * t98 + t131) * qJD(3), t84, -pkin(3) * t125 + pkin(8) * t84, -t16 * t49 - t25 * t39, t16 * t48 - t17 * t49 + t25 * t38 - t26 * t39, t25 * t75 + t49 * t63, t17 * t48 + t26 * t38, t26 * t75 - t48 * t63, 0, t127 * t38 + t17 * t62 - t19 * t75 + t26 * t50 + t32 * t63 + t35 * t48, t127 * t39 - t16 * t62 - t18 * t75 - t25 * t50 - t33 * t63 + t35 * t49, t11 * t25 - t12 * t26 + t16 * t32 - t17 * t33 + t18 * t38 - t19 * t39 + t3 * t48 - t4 * t49, t11 * t19 - t12 * t18 + t127 * t50 - t3 * t33 + t32 * t4 + t35 * t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t116, -0.2e1 * t107, 0, -0.2e1 * t116, 0, 0, t71 * t129, t74 * t129, 0, 0, -0.2e1 * t49 * t25, 0.2e1 * t25 * t48 - 0.2e1 * t26 * t49, 0, 0.2e1 * t48 * t26, 0, 0, 0.2e1 * t127 * t48 + 0.2e1 * t26 * t62, 0.2e1 * t127 * t49 - 0.2e1 * t25 * t62, 0.2e1 * t18 * t48 - 0.2e1 * t19 * t49 + 0.2e1 * t25 * t32 - 0.2e1 * t26 * t33, 0.2e1 * t127 * t62 - 0.2e1 * t18 * t33 + 0.2e1 * t19 * t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t7, -t8, 0, 0, 0, 0, 0, 0, 0, 0, t2, t1, 0, (t150 * t2 - t1 * t70 + (-t14 * t70 + t150 * t15) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t114 - t121, 0, -t86, t63, t21, t20, 0, 0, 0, 0, -t16, 0, -t17, t63, pkin(4) * t110 * t72 - qJD(5) * t81 - t108 * t31 + t126 * t75 + t78, (t108 * t75 - t70 * t63) * pkin(4) + t3, (t150 * t16 - t17 * t70 + (-t150 * t38 + t39 * t70) * qJD(5)) * pkin(4), (t150 * t4 - t3 * t70 + (-t11 * t70 + t150 * t12) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t135, 0, -t136, 0, -pkin(8) * t135, pkin(8) * t136, 0, 0, 0, 0, -t25, 0, -t26, 0, t19, t18, (t150 * t25 - t26 * t70 + (-t150 * t48 + t49 * t70) * qJD(5)) * pkin(4), (t150 * t19 - t18 * t70 + (t150 * t33 - t32 * t70) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t126, -0.2e1 * t101, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t16, 0, -t17, t63, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t25, 0, -t26, 0, t19, t18, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t126, -t101, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t5;
