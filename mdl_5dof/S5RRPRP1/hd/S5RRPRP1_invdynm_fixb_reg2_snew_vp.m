% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPRP1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:59
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPRP1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRP1_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRP1_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRP1_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRP1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPRP1_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:59:21
% EndTime: 2020-01-03 11:59:28
% DurationCPUTime: 7.49s
% Computational Cost: add. (28895->425), mult. (41233->529), div. (0->0), fcn. (22674->8), ass. (0->314)
t820 = qJD(1) + qJD(2);
t818 = t820 ^ 2;
t819 = qJDD(1) + qJDD(2);
t825 = sin(pkin(8));
t826 = cos(pkin(8));
t771 = t818 * t826 + t819 * t825;
t774 = t818 * t825 - t819 * t826;
t828 = sin(qJ(2));
t831 = cos(qJ(2));
t715 = t771 * t831 - t774 * t828;
t823 = g(1) - qJDD(3);
t750 = qJ(3) * t771 - t823 * t826;
t921 = qJ(3) * t774 - t823 * t825;
t662 = pkin(6) * t715 + t750 * t831 - t828 * t921;
t829 = sin(qJ(1));
t832 = cos(qJ(1));
t719 = t771 * t828 + t774 * t831;
t920 = t715 * t829 + t719 * t832;
t932 = pkin(6) * t719 + t750 * t828 + t831 * t921;
t944 = pkin(5) * t920 + t829 * t662 + t832 * t932;
t677 = t715 * t832 - t719 * t829;
t943 = -pkin(5) * t677 - t832 * t662 + t829 * t932;
t798 = g(2) * t832 + g(3) * t829;
t840 = qJDD(1) * pkin(1) - t798;
t797 = g(2) * t829 - g(3) * t832;
t834 = qJD(1) ^ 2;
t844 = pkin(1) * t834 + t797;
t730 = t828 * t840 - t831 * t844;
t723 = -t818 * pkin(2) + t730;
t729 = -t828 * t844 - t831 * t840;
t836 = t819 * pkin(2) - t729;
t680 = t723 * t825 - t826 * t836;
t681 = t826 * t723 + t825 * t836;
t863 = t680 * t825 + t681 * t826;
t620 = t680 * t826 - t681 * t825;
t884 = t831 * t620;
t574 = -t828 * t863 + t884;
t888 = t828 * t620;
t927 = t831 * t863 + t888;
t942 = t574 * t829 + t832 * t927;
t941 = -t574 * t832 + t829 * t927;
t777 = t818 * t831 + t819 * t828;
t754 = pkin(6) * t777 - g(1) * t831;
t780 = t818 * t828 - t819 * t831;
t846 = t777 * t829 + t780 * t832;
t922 = pkin(6) * t780 - g(1) * t828;
t934 = pkin(5) * t846 + t829 * t754 + t832 * t922;
t725 = t777 * t832 - t780 * t829;
t933 = -pkin(5) * t725 - t832 * t754 + t829 * t922;
t862 = t729 * t828 + t730 * t831;
t686 = t729 * t831 - t730 * t828;
t883 = t832 * t686;
t929 = t829 * t862 - t883;
t887 = t829 * t686;
t928 = t832 * t862 + t887;
t827 = sin(qJ(4));
t830 = cos(qJ(4));
t796 = t830 * t818 * t827;
t786 = qJDD(4) + t796;
t910 = pkin(4) * t786;
t811 = t830 * t823;
t672 = -t818 * pkin(3) + t819 * pkin(7) + t681;
t891 = t827 * t672;
t653 = t811 + t891;
t654 = t672 * t830 - t823 * t827;
t602 = t653 * t827 + t654 * t830;
t776 = t830 * t786;
t822 = t830 ^ 2;
t809 = t822 * t818;
t833 = qJD(4) ^ 2;
t794 = -t809 - t833;
t735 = t794 * t827 + t776;
t913 = pkin(3) * t735;
t821 = t827 ^ 2;
t895 = t821 * t818;
t792 = -t833 - t895;
t787 = qJDD(4) - t796;
t889 = t827 * t787;
t736 = t792 * t830 - t889;
t912 = pkin(3) * t736;
t877 = qJD(4) * t820;
t804 = t830 * t877;
t807 = t827 * t819;
t767 = t807 + t804;
t841 = t811 + (t767 - t804) * qJ(5) - t910;
t876 = (qJD(5) * t820);
t859 = t672 + (2 * t876);
t628 = t827 * t859 + t841;
t911 = pkin(4) * t628;
t890 = t827 * t786;
t739 = t794 * t830 - t890;
t803 = t827 * t877;
t808 = t830 * t819;
t769 = t808 - 0.2e1 * t803;
t696 = t739 * t825 + t769 * t826;
t698 = t739 * t826 - t769 * t825;
t647 = t696 * t831 + t698 * t828;
t649 = -t696 * t828 + t698 * t831;
t909 = pkin(5) * (t647 * t829 - t649 * t832);
t885 = t830 * t787;
t742 = -t792 * t827 - t885;
t766 = t807 + 0.2e1 * t804;
t697 = t742 * t825 - t766 * t826;
t699 = t742 * t826 + t766 * t825;
t648 = t697 * t831 + t699 * t828;
t650 = -t697 * t828 + t699 * t831;
t908 = pkin(5) * (t648 * t829 - t650 * t832);
t878 = t821 + t822;
t775 = t878 * t819;
t781 = t809 + t895;
t721 = t775 * t825 + t781 * t826;
t722 = t775 * t826 - t781 * t825;
t678 = t721 * t831 + t722 * t828;
t679 = -t721 * t828 + t722 * t831;
t907 = pkin(5) * (t678 * t829 - t679 * t832);
t906 = pkin(6) * t647;
t905 = pkin(6) * t648;
t904 = pkin(6) * t678;
t903 = pkin(7) * t735;
t902 = pkin(7) * t736;
t899 = qJ(3) * t696;
t898 = qJ(3) * t697;
t897 = qJ(3) * t721;
t896 = t820 * t827;
t892 = t827 * t628;
t671 = -pkin(3) * t819 - pkin(7) * t818 + t680;
t663 = t827 * t671;
t886 = t830 * t628;
t664 = t830 * t671;
t882 = -pkin(3) * t671 + pkin(7) * t602;
t881 = pkin(3) * t769 + pkin(7) * t739;
t880 = -pkin(3) * t766 + pkin(7) * t742;
t879 = pkin(3) * t781 + pkin(7) * t775;
t875 = pkin(4) * t807;
t874 = t825 * t807;
t873 = t826 * t807;
t872 = t663 + t880;
t871 = -t664 + t881;
t580 = t602 * t825 - t671 * t826;
t870 = pkin(2) * t580 + t882;
t869 = t830 * t876;
t868 = -pkin(1) * t735 + pkin(6) * t649;
t867 = -pkin(1) * t736 + pkin(6) * t650;
t866 = -pkin(2) * t735 + qJ(3) * t698;
t865 = -pkin(2) * t736 + qJ(3) * t699;
t788 = -qJDD(1) * t829 - t832 * t834;
t864 = pkin(5) * t788 + g(1) * t832;
t860 = -t797 * t829 - t798 * t832;
t858 = t825 * t796;
t857 = t826 * t796;
t801 = 0.2e1 * t869;
t768 = t808 - t803;
t785 = qJD(4) * pkin(4) - qJ(5) * t896;
t847 = pkin(4) * t809 - qJ(5) * t768 + qJD(4) * t785 - t654;
t629 = t801 - t847;
t615 = pkin(4) * t781 + qJ(5) * t808 + t629;
t626 = (qJ(5) * t819 + t859) * t827 + t841;
t856 = t615 * t830 + t626 * t827 + t879;
t634 = -pkin(4) * t768 - qJ(5) * t809 + t785 * t896 + qJDD(5) + t671;
t630 = -qJ(5) * t792 + t634;
t728 = -pkin(4) * t766 - qJ(5) * t787;
t855 = t630 * t827 + t728 * t830 + t880;
t854 = t879 + t602;
t695 = pkin(2) * t697;
t853 = t695 + t872;
t694 = pkin(2) * t696;
t852 = t694 + t871;
t851 = -pkin(2) * t774 - t680;
t714 = pkin(2) * t721;
t850 = t714 + t856;
t849 = t695 + t855;
t848 = t714 + t854;
t601 = t653 * t830 - t654 * t827;
t845 = t797 * t832 - t798 * t829;
t586 = t629 * t830 + t892;
t588 = -pkin(4) * t634 + qJ(5) * t629;
t843 = -pkin(3) * t634 + pkin(7) * t586 + qJ(5) * t892 + t588 * t830;
t624 = pkin(4) * t769 + qJ(5) * t794 - t634;
t842 = -qJ(5) * t890 + t624 * t830 + t881;
t839 = pkin(4) * t792 + t847;
t563 = t586 * t825 - t634 * t826;
t838 = pkin(2) * t563 + t843;
t837 = t694 + t842;
t835 = -pkin(2) * t771 - t681;
t793 = t809 - t833;
t791 = t833 - t895;
t789 = qJDD(1) * t832 - t829 * t834;
t782 = -t809 + t895;
t764 = pkin(5) * t789 + g(1) * t829;
t761 = t878 * t877;
t746 = qJDD(4) * t825 + t761 * t826;
t745 = -qJDD(4) * t826 + t761 * t825;
t744 = t767 * t830 - t821 * t877;
t743 = -t768 * t827 - t822 * t877;
t741 = t793 * t827 + t885;
t740 = -t791 * t827 + t776;
t738 = t793 * t830 - t889;
t737 = t791 * t830 + t890;
t732 = (t768 - t803) * t830;
t731 = (t767 + t804) * t827;
t713 = qJ(3) * t722;
t712 = -t766 * t827 + t769 * t830;
t711 = t766 * t830 + t769 * t827;
t709 = t740 * t826 + t874;
t708 = t738 * t826 + t808 * t825;
t707 = t740 * t825 - t873;
t706 = t738 * t825 - t808 * t826;
t705 = t744 * t826 - t858;
t704 = t743 * t826 + t858;
t703 = t744 * t825 + t857;
t702 = t743 * t825 - t857;
t701 = -pkin(1) * t780 - t729;
t700 = -pkin(1) * t777 - t730;
t691 = -t745 * t828 + t746 * t831;
t690 = t745 * t831 + t746 * t828;
t689 = t712 * t826 + t782 * t825;
t688 = t712 * t825 - t782 * t826;
t683 = pkin(1) * t686;
t682 = pkin(1) * g(1) + pkin(6) * t862;
t675 = pkin(1) * t678;
t674 = pkin(6) * t679;
t670 = -t707 * t828 + t709 * t831;
t669 = -t706 * t828 + t708 * t831;
t668 = t707 * t831 + t709 * t828;
t667 = t706 * t831 + t708 * t828;
t658 = -t703 * t828 + t705 * t831;
t657 = -t702 * t828 + t704 * t831;
t656 = t703 * t831 + t705 * t828;
t655 = t702 * t831 + t704 * t828;
t646 = pkin(1) * t648;
t645 = pkin(1) * t647;
t642 = t664 - t902;
t641 = t663 - t903;
t640 = t690 * t829 - t691 * t832;
t639 = t690 * t832 + t691 * t829;
t638 = -t688 * t828 + t689 * t831;
t637 = t688 * t831 + t689 * t828;
t636 = t654 - t912;
t635 = t653 - t913;
t633 = -pkin(1) * t719 + t851;
t632 = -pkin(1) * t715 + t835;
t617 = pkin(2) * t620;
t616 = pkin(5) * (t678 * t832 + t679 * t829);
t613 = pkin(2) * t823 + qJ(3) * t863;
t612 = t801 - t839 - t912;
t611 = t668 * t829 - t670 * t832;
t610 = t667 * t829 - t669 * t832;
t609 = t668 * t832 + t670 * t829;
t608 = t667 * t832 + t669 * t829;
t607 = t628 - t910 - t913;
t606 = t656 * t829 - t658 * t832;
t605 = t655 * t829 - t657 * t832;
t604 = t656 * t832 + t658 * t829;
t603 = t655 * t832 + t657 * t829;
t598 = -qJ(5) * t776 - t624 * t827 - t903;
t597 = t630 * t830 - t728 * t827 - t902;
t594 = pkin(5) * (t648 * t832 + t650 * t829);
t593 = pkin(5) * (t647 * t832 + t649 * t829);
t592 = t601 * t826 - t897;
t591 = t601 * t825 + t713;
t590 = t637 * t829 - t638 * t832;
t589 = t637 * t832 + t638 * t829;
t585 = t629 * t827 - t886;
t583 = t646 + t853;
t582 = t645 + t852;
t581 = t602 * t826 + t671 * t825;
t578 = -t636 * t825 + t642 * t826 - t898;
t577 = -t635 * t825 + t641 * t826 - t899;
t576 = -t615 * t827 + t626 * t830;
t571 = t636 * t826 + t642 * t825 + t865;
t570 = t635 * t826 + t641 * t825 + t866;
t569 = t675 + t848;
t568 = -pkin(4) * t874 + t576 * t826 - t897;
t567 = pkin(4) * t873 + t576 * t825 + t713;
t566 = t645 + t837;
t565 = t646 + t849;
t564 = t586 * t826 + t634 * t825;
t561 = -pkin(3) * t585 + t911;
t560 = t597 * t826 - t612 * t825 - t898;
t559 = t598 * t826 - t607 * t825 - t899;
t558 = t675 + t850;
t557 = t597 * t825 + t612 * t826 + t865;
t556 = t598 * t825 + t607 * t826 + t866;
t555 = -pkin(1) * t574 - t617;
t554 = -t591 * t828 + t592 * t831 - t904;
t553 = t591 * t831 + t592 * t828 + t674;
t552 = -t580 * t828 + t581 * t831;
t551 = t580 * t831 + t581 * t828;
t550 = pkin(6) * t574 + qJ(3) * t884 - t613 * t828;
t549 = pkin(1) * t823 + pkin(6) * t927 + qJ(3) * t888 + t613 * t831;
t548 = -qJ(3) * t580 - (pkin(3) * t825 - pkin(7) * t826) * t601;
t547 = -pkin(7) * t585 + qJ(5) * t886 - t588 * t827;
t546 = -t571 * t828 + t578 * t831 - t905;
t545 = -t570 * t828 + t577 * t831 - t906;
t544 = t571 * t831 + t578 * t828 + t867;
t543 = t570 * t831 + t577 * t828 + t868;
t542 = -t567 * t828 + t568 * t831 - t904;
t541 = t567 * t831 + t568 * t828 + t674;
t540 = -t563 * t828 + t564 * t831;
t539 = t563 * t831 + t564 * t828;
t538 = qJ(3) * t581 - (-pkin(3) * t826 - pkin(7) * t825 - pkin(2)) * t601;
t537 = -t557 * t828 + t560 * t831 - t905;
t536 = -t556 * t828 + t559 * t831 - t906;
t535 = t557 * t831 + t560 * t828 + t867;
t534 = t556 * t831 + t559 * t828 + t868;
t533 = pkin(1) * t551 + t870;
t532 = -qJ(3) * t563 + t547 * t826 - t561 * t825;
t531 = -pkin(2) * t585 + qJ(3) * t564 + t547 * t825 + t561 * t826;
t530 = pkin(1) * t539 + t838;
t529 = -pkin(6) * t551 - t538 * t828 + t548 * t831;
t528 = pkin(1) * t601 + pkin(6) * t552 + t538 * t831 + t548 * t828;
t527 = -pkin(6) * t539 - t531 * t828 + t532 * t831;
t526 = -pkin(1) * t585 + pkin(6) * t540 + t531 * t831 + t532 * t828;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t798, t797, 0, 0, 0, 0, 0, 0, 0, t819, t701, t700, 0, -t683, 0, 0, 0, 0, 0, t819, t633, t632, 0, t555, t731, t711, t737, t732, t741, 0, t582, t583, t569, t533, t731, t711, t737, t732, t741, 0, t566, t565, t558, t530; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t788, 0, t789, 0, t864, -t764, -t845, -pkin(5) * t845, 0, 0, t725, 0, -t846, 0, t933, t934, t928, pkin(5) * t928 + pkin(6) * t887 + t832 * t682, 0, 0, t677, 0, -t920, 0, t943, t944, t942, pkin(5) * t942 + t832 * t549 + t829 * t550, t604, t589, t609, t603, t608, t639, t543 * t832 + t545 * t829 - t909, t544 * t832 + t546 * t829 - t908, t553 * t832 + t554 * t829 - t907, t829 * t529 + t832 * t528 - pkin(5) * (t551 * t829 - t552 * t832), t604, t589, t609, t603, t608, t639, t534 * t832 + t536 * t829 - t909, t535 * t832 + t537 * t829 - t908, t541 * t832 + t542 * t829 - t907, t829 * t527 + t832 * t526 - pkin(5) * (t539 * t829 - t540 * t832); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t789, 0, -t788, 0, t764, t864, t860, pkin(5) * t860, 0, 0, t846, 0, t725, 0, -t934, t933, t929, pkin(5) * t929 - pkin(6) * t883 + t829 * t682, 0, 0, t920, 0, t677, 0, -t944, t943, t941, pkin(5) * t941 + t829 * t549 - t832 * t550, t606, t590, t611, t605, t610, t640, t543 * t829 - t545 * t832 + t593, t544 * t829 - t546 * t832 + t594, t553 * t829 - t554 * t832 + t616, -t832 * t529 + t829 * t528 + pkin(5) * (t551 * t832 + t552 * t829), t606, t590, t611, t605, t610, t640, t534 * t829 - t536 * t832 + t593, t535 * t829 - t537 * t832 + t594, t541 * t829 - t542 * t832 + t616, -t832 * t527 + t829 * t526 + pkin(5) * (t539 * t832 + t540 * t829); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t834, 0, 0, -g(1), t798, 0, 0, 0, -t780, 0, -t777, 0, t922, t754, t686, pkin(6) * t686, 0, 0, -t719, 0, -t715, 0, t932, t662, t574, t550, t658, t638, t670, t657, t669, t691, t545, t546, t554, t529, t658, t638, t670, t657, t669, t691, t536, t537, t542, t527; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t834, 0, qJDD(1), 0, g(1), 0, -t797, 0, 0, 0, t777, 0, -t780, 0, -t754, t922, t862, t682, 0, 0, t715, 0, -t719, 0, -t662, t932, t927, t549, t656, t637, t668, t655, t667, t690, t543, t544, t553, t528, t656, t637, t668, t655, t667, t690, t534, t535, t541, t526; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t798, t797, 0, 0, 0, 0, 0, 0, 0, t819, t701, t700, 0, -t683, 0, 0, 0, 0, 0, t819, t633, t632, 0, t555, t731, t711, t737, t732, t741, 0, t582, t583, t569, t533, t731, t711, t737, t732, t741, 0, t566, t565, t558, t530; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t819, 0, -t818, 0, 0, -g(1), t729, 0, 0, 0, -t774, 0, -t771, 0, t921, t750, t620, qJ(3) * t620, t705, t689, t709, t704, t708, t746, t577, t578, t592, t548, t705, t689, t709, t704, t708, t746, t559, t560, t568, t532; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t818, 0, t819, 0, g(1), 0, t730, 0, 0, 0, t771, 0, -t774, 0, -t750, t921, t863, t613, t703, t688, t707, t702, t706, t745, t570, t571, t591, t538, t703, t688, t707, t702, t706, t745, t556, t557, t567, t531; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t819, -t729, -t730, 0, 0, 0, 0, 0, 0, 0, t819, t851, t835, 0, -t617, t731, t711, t737, t732, t741, 0, t852, t853, t848, t870, t731, t711, t737, t732, t741, 0, t837, t849, t850, t838; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t819, 0, -t818, 0, 0, -t823, t680, 0, t744, t712, t740, t743, t738, t761, t641, t642, t601, pkin(7) * t601, t744, t712, t740, t743, t738, t761, t598, t597, t576, t547; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t818, 0, t819, 0, t823, 0, t681, 0, t796, -t782, -t807, -t796, -t808, -qJDD(4), t635, t636, 0, pkin(3) * t601, t796, -t782, -t807, -t796, -t808, -qJDD(4), t607, t612, t875, t561; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t819, -t680, -t681, 0, 0, t731, t711, t737, t732, t741, 0, t871, t872, t854, t882, t731, t711, t737, t732, t741, 0, t842, t855, t856, t843; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t767, t769, t786, -t804, t793, t804, 0, t671, t653, 0, t767, t769, t786, -t804, t793, t804, -qJ(5) * t786, t630, t626, qJ(5) * t628; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t803, t766, t791, t768, t787, -t803, -t671, 0, t654, 0, t803, t766, t791, t768, t787, -t803, t624, t728, t615, t588; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t796, t782, t807, t796, t808, qJDD(4), -t653, -t654, 0, 0, -t796, t782, t807, t796, t808, qJDD(4), -0.2e1 * t827 * t876 - t841 - t891 + t910, t839 - 0.2e1 * t869, -t875, -t911; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t767, t769, t786, -t804, t793, t804, 0, t634, t628, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t803, t766, t791, t768, t787, -t803, -t634, 0, t629, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t796, t782, t807, t796, t808, qJDD(4), -t628, -t629, 0, 0;];
m_new_reg = t1;
