% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:22
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPRP1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRP1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRP1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRP1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRP1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPRP1_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:22:27
% EndTime: 2019-12-05 18:22:37
% DurationCPUTime: 6.70s
% Computational Cost: add. (18067->381), mult. (25982->523), div. (0->0), fcn. (14576->8), ass. (0->279)
t420 = qJD(1) + qJD(2);
t418 = t420 ^ 2;
t419 = qJDD(1) + qJDD(2);
t424 = sin(pkin(8));
t425 = cos(pkin(8));
t384 = t425 * t418 + t424 * t419;
t387 = t424 * t418 - t425 * t419;
t427 = sin(qJ(2));
t430 = cos(qJ(2));
t326 = t430 * t384 - t427 * t387;
t423 = g(1) - qJDD(3);
t364 = qJ(3) * t384 - t425 * t423;
t503 = qJ(3) * t387 - t424 * t423;
t274 = pkin(6) * t326 + t430 * t364 - t427 * t503;
t428 = sin(qJ(1));
t431 = cos(qJ(1));
t330 = t427 * t384 + t430 * t387;
t510 = pkin(6) * t330 + t427 * t364 + t430 * t503;
t512 = t428 * t326 + t431 * t330;
t519 = pkin(5) * t512 + t428 * t274 + t431 * t510;
t286 = t431 * t326 - t428 * t330;
t518 = pkin(5) * t286 + t431 * t274 - t428 * t510;
t408 = t431 * g(2) + t428 * g(3);
t436 = qJDD(1) * pkin(1) + t408;
t407 = t428 * g(2) - t431 * g(3);
t433 = qJD(1) ^ 2;
t437 = -t433 * pkin(1) + t407;
t342 = t427 * t436 + t430 * t437;
t334 = -t418 * pkin(2) + t342;
t435 = -t427 * t437 + t430 * t436;
t434 = t419 * pkin(2) + t435;
t292 = t424 * t334 - t425 * t434;
t293 = t425 * t334 + t424 * t434;
t448 = t424 * t292 + t425 * t293;
t237 = t425 * t292 - t424 * t293;
t464 = t430 * t237;
t196 = -t427 * t448 + t464;
t470 = t427 * t237;
t506 = t430 * t448 + t470;
t178 = t428 * t196 + t431 * t506;
t177 = t431 * t196 - t428 * t506;
t391 = t430 * t418 + t427 * t419;
t368 = pkin(6) * t391 - t430 * g(1);
t394 = t427 * t418 - t430 * t419;
t502 = t428 * t391 + t431 * t394;
t504 = pkin(6) * t394 - t427 * g(1);
t513 = pkin(5) * t502 + t428 * t368 + t431 * t504;
t335 = t431 * t391 - t428 * t394;
t511 = pkin(5) * t335 + t431 * t368 - t428 * t504;
t447 = t430 * t342 - t427 * t435;
t297 = -t427 * t342 - t430 * t435;
t463 = t431 * t297;
t245 = -t428 * t447 + t463;
t469 = t428 * t297;
t246 = t431 * t447 + t469;
t426 = sin(qJ(4));
t429 = cos(qJ(4));
t406 = t429 * t418 * t426;
t459 = qJDD(4) + t406;
t501 = t459 * pkin(4);
t282 = -t418 * pkin(3) + t419 * pkin(7) + t293;
t265 = t426 * t282 + t429 * t423;
t460 = qJD(4) * t429;
t453 = t420 * t460;
t471 = t426 * t419;
t379 = t453 + t471;
t370 = t379 * qJ(5);
t494 = -t370 - t265 + t501;
t432 = qJD(4) ^ 2;
t421 = t426 ^ 2;
t478 = t421 * t418;
t403 = -t432 - t478;
t399 = qJDD(4) - t406;
t472 = t426 * t399;
t350 = t429 * t403 - t472;
t493 = pkin(3) * t350;
t422 = t429 ^ 2;
t413 = t422 * t418;
t405 = -t413 - t432;
t473 = t426 * t459;
t352 = t429 * t405 - t473;
t461 = qJD(4) * t420;
t454 = t426 * t461;
t465 = t429 * t419;
t381 = -0.2e1 * t454 + t465;
t307 = t424 * t352 + t425 * t381;
t309 = t425 * t352 - t424 * t381;
t260 = t430 * t307 + t427 * t309;
t262 = -t427 * t307 + t430 * t309;
t214 = -t428 * t260 + t431 * t262;
t492 = pkin(5) * t214;
t466 = t429 * t399;
t354 = -t426 * t403 - t466;
t378 = 0.2e1 * t453 + t471;
t308 = t424 * t354 - t425 * t378;
t310 = t425 * t354 + t424 * t378;
t261 = t430 * t308 + t427 * t310;
t263 = -t427 * t308 + t430 * t310;
t215 = -t428 * t261 + t431 * t263;
t491 = pkin(5) * t215;
t462 = t421 + t422;
t389 = t462 * t419;
t395 = t413 + t478;
t332 = t424 * t389 + t425 * t395;
t333 = t425 * t389 - t424 * t395;
t290 = t430 * t332 + t427 * t333;
t291 = -t427 * t332 + t430 * t333;
t239 = -t428 * t290 + t431 * t291;
t490 = pkin(5) * t239;
t489 = pkin(6) * t260;
t488 = pkin(6) * t261;
t487 = pkin(6) * t290;
t390 = t429 * t459;
t348 = t426 * t405 + t390;
t486 = pkin(7) * t348;
t485 = pkin(7) * t350;
t482 = qJ(3) * t307;
t481 = qJ(3) * t308;
t480 = qJ(3) * t332;
t479 = t420 * t426;
t242 = (qJ(5) * t460 - 0.2e1 * qJD(5) * t426) * t420 + t494;
t475 = t426 * t242;
t281 = -t419 * pkin(3) - t418 * pkin(7) + t292;
t474 = t426 * t281;
t468 = t429 * t242;
t467 = t429 * t281;
t266 = t429 * t282 - t426 * t423;
t458 = 0.2e1 * qJD(5) * t420;
t457 = t424 * t471;
t456 = t425 * t471;
t452 = -pkin(1) * t348 + pkin(6) * t262;
t451 = -pkin(1) * t350 + pkin(6) * t263;
t450 = -pkin(2) * t348 + qJ(3) * t309;
t449 = -pkin(2) * t350 + qJ(3) * t310;
t220 = t426 * t265 + t429 * t266;
t445 = t424 * t406;
t444 = t425 * t406;
t443 = pkin(1) * t260 + pkin(2) * t307 + pkin(3) * t381 + pkin(7) * t352;
t442 = pkin(1) * t261 + pkin(2) * t308 - pkin(3) * t378 + pkin(7) * t354;
t441 = pkin(1) * t290 + pkin(2) * t332 + pkin(3) * t395 + pkin(7) * t389;
t248 = -pkin(3) * t348 + t265;
t400 = t428 * qJDD(1) + t431 * t433;
t440 = pkin(5) * t400 - t431 * g(1);
t219 = t429 * t265 - t426 * t266;
t360 = t431 * t407 - t428 * t408;
t359 = -t428 * t407 - t431 * t408;
t380 = -t454 + t465;
t397 = qJD(4) * pkin(4) - qJ(5) * t479;
t438 = t380 * qJ(5) - qJD(4) * t397 + t429 * t458 + t266;
t247 = -t380 * pkin(4) - qJ(5) * t413 + t397 * t479 + qJDD(5) + t281;
t410 = t426 * t458;
t404 = t413 - t432;
t402 = t432 - t478;
t401 = -t431 * qJDD(1) + t428 * t433;
t396 = t413 - t478;
t376 = -pkin(5) * t401 + t428 * g(1);
t375 = t462 * t461;
t358 = t424 * qJDD(4) + t425 * t375;
t357 = -t425 * qJDD(4) + t424 * t375;
t356 = t429 * t379 - t421 * t461;
t355 = -t426 * t380 - t422 * t461;
t353 = -t426 * t402 + t390;
t351 = t429 * t404 - t472;
t349 = t429 * t402 + t473;
t347 = t426 * t404 + t466;
t344 = (t379 + t453) * t426;
t343 = (t380 - t454) * t429;
t340 = -pkin(4) * t378 - qJ(5) * t399;
t324 = qJ(3) * t333;
t323 = -t426 * t378 + t429 * t381;
t322 = t429 * t378 + t426 * t381;
t318 = t425 * t353 + t457;
t317 = t425 * t351 + t424 * t465;
t316 = t424 * t353 - t456;
t315 = t424 * t351 - t425 * t465;
t314 = t425 * t356 - t445;
t313 = t425 * t355 + t445;
t312 = t424 * t356 + t444;
t311 = t424 * t355 - t444;
t302 = -t427 * t357 + t430 * t358;
t301 = t430 * t357 + t427 * t358;
t300 = t425 * t323 - t424 * t396;
t299 = t424 * t323 + t425 * t396;
t294 = pkin(1) * g(1) + pkin(6) * t447;
t284 = pkin(6) * t291;
t280 = -t427 * t316 + t430 * t318;
t279 = -t427 * t315 + t430 * t317;
t278 = t430 * t316 + t427 * t318;
t277 = t430 * t315 + t427 * t317;
t270 = -t427 * t312 + t430 * t314;
t269 = -t427 * t311 + t430 * t313;
t268 = t430 * t312 + t427 * t314;
t267 = t430 * t311 + t427 * t313;
t255 = t467 - t485;
t254 = t474 - t486;
t253 = -t428 * t301 + t431 * t302;
t252 = -t431 * t301 - t428 * t302;
t251 = -t427 * t299 + t430 * t300;
t250 = t430 * t299 + t427 * t300;
t249 = t266 - t493;
t244 = -qJ(5) * t403 + t247;
t243 = -pkin(4) * t413 + t438;
t241 = t410 + (-t453 + t471) * qJ(5) - t494;
t240 = pkin(4) * t381 + qJ(5) * t405 - t247;
t236 = -t431 * t290 - t428 * t291;
t233 = pkin(5) * t236;
t232 = qJ(5) * t465 + (t395 - t413) * pkin(4) + t438;
t231 = pkin(2) * t423 + qJ(3) * t448;
t230 = -t493 + (-t403 - t413) * pkin(4) + t438;
t229 = -t428 * t278 + t431 * t280;
t228 = -t428 * t277 + t431 * t279;
t227 = -t431 * t278 - t428 * t280;
t226 = -t431 * t277 - t428 * t279;
t225 = -qJ(5) * t453 + t248 + t370 + t410 - 0.2e1 * t501;
t224 = -t428 * t268 + t431 * t270;
t223 = -t428 * t267 + t431 * t269;
t222 = -t431 * t268 - t428 * t270;
t221 = -t431 * t267 - t428 * t269;
t217 = -qJ(5) * t390 - t426 * t240 - t486;
t216 = t429 * t244 - t426 * t340 - t485;
t213 = -t431 * t261 - t428 * t263;
t212 = -t431 * t260 - t428 * t262;
t211 = pkin(5) * t213;
t210 = pkin(5) * t212;
t209 = t425 * t219 - t480;
t208 = t424 * t219 + t324;
t207 = -t428 * t250 + t431 * t251;
t206 = -t431 * t250 - t428 * t251;
t205 = -pkin(4) * t247 + qJ(5) * t243;
t204 = t429 * t243 - t475;
t203 = t426 * t243 + t468;
t202 = t425 * t220 + t424 * t281;
t201 = t424 * t220 - t425 * t281;
t200 = -t424 * t249 + t425 * t255 - t481;
t199 = -t424 * t248 + t425 * t254 - t482;
t198 = -t426 * t232 + t429 * t241;
t193 = t425 * t249 + t424 * t255 + t449;
t192 = t425 * t248 + t424 * t254 + t450;
t191 = -pkin(4) * t457 + t425 * t198 - t480;
t190 = pkin(4) * t456 + t424 * t198 + t324;
t189 = t425 * t204 + t424 * t247;
t188 = t424 * t204 - t425 * t247;
t187 = -pkin(3) * t203 - pkin(4) * t242;
t186 = t425 * t216 - t424 * t230 - t481;
t185 = t425 * t217 - t424 * t225 - t482;
t184 = t424 * t216 + t425 * t230 + t449;
t183 = t424 * t217 + t425 * t225 + t450;
t182 = -t427 * t208 + t430 * t209 - t487;
t181 = t430 * t208 + t427 * t209 + t284;
t180 = -t427 * t201 + t430 * t202;
t179 = t430 * t201 + t427 * t202;
t176 = pkin(6) * t196 + qJ(3) * t464 - t427 * t231;
t175 = pkin(1) * t423 + pkin(6) * t506 + qJ(3) * t470 + t430 * t231;
t174 = -qJ(3) * t201 - (pkin(3) * t424 - pkin(7) * t425) * t219;
t173 = -pkin(7) * t203 - qJ(5) * t468 - t426 * t205;
t172 = -t427 * t193 + t430 * t200 - t488;
t171 = -t427 * t192 + t430 * t199 - t489;
t170 = t430 * t193 + t427 * t200 + t451;
t169 = t430 * t192 + t427 * t199 + t452;
t168 = -t427 * t190 + t430 * t191 - t487;
t167 = t430 * t190 + t427 * t191 + t284;
t166 = -t427 * t188 + t430 * t189;
t165 = t430 * t188 + t427 * t189;
t164 = qJ(3) * t202 - (-pkin(3) * t425 - pkin(7) * t424 - pkin(2)) * t219;
t163 = -t427 * t184 + t430 * t186 - t488;
t162 = -t427 * t183 + t430 * t185 - t489;
t161 = t430 * t184 + t427 * t186 + t451;
t160 = t430 * t183 + t427 * t185 + t452;
t159 = -t428 * t179 + t431 * t180;
t158 = -t431 * t179 - t428 * t180;
t157 = -qJ(3) * t188 + t425 * t173 - t424 * t187;
t156 = -t428 * t165 + t431 * t166;
t155 = -t431 * t165 - t428 * t166;
t154 = -pkin(2) * t203 + qJ(3) * t189 + t424 * t173 + t425 * t187;
t153 = -pkin(6) * t179 - t427 * t164 + t430 * t174;
t152 = pkin(1) * t219 + pkin(6) * t180 + t430 * t164 + t427 * t174;
t151 = -pkin(6) * t165 - t427 * t154 + t430 * t157;
t150 = -pkin(1) * t203 + pkin(6) * t166 + t430 * t154 + t427 * t157;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t423, 0, 0, 0, 0, 0, 0, t348, t350, 0, -t219, 0, 0, 0, 0, 0, 0, t348, t350, 0, t203; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t401, t400, 0, t359, 0, 0, 0, 0, 0, 0, t502, t335, 0, t245, 0, 0, 0, 0, 0, 0, t512, t286, 0, t177, 0, 0, 0, 0, 0, 0, t212, t213, t236, t158, 0, 0, 0, 0, 0, 0, t212, t213, t236, t155; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t400, t401, 0, t360, 0, 0, 0, 0, 0, 0, -t335, t502, 0, t246, 0, 0, 0, 0, 0, 0, -t286, t512, 0, t178, 0, 0, 0, 0, 0, 0, t214, t215, t239, t159, 0, 0, 0, 0, 0, 0, t214, t215, t239, t156; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t408, -t407, 0, 0, 0, 0, 0, 0, 0, t419, -pkin(1) * t394 + t435, -pkin(1) * t391 - t342, 0, -pkin(1) * t297, 0, 0, 0, 0, 0, t419, -pkin(1) * t330 - pkin(2) * t387 - t292, -pkin(1) * t326 - pkin(2) * t384 - t293, 0, -pkin(1) * t196 - pkin(2) * t237, t344, t322, t349, t343, t347, 0, t443 - t467, t442 + t474, t220 + t441, pkin(1) * t179 + pkin(2) * t201 - pkin(3) * t281 + pkin(7) * t220, t344, t322, t349, t343, t347, 0, -qJ(5) * t473 + t429 * t240 + t443, t426 * t244 + t429 * t340 + t442, t429 * t232 + t426 * t241 + t441, pkin(1) * t165 + pkin(2) * t188 - pkin(3) * t247 + pkin(7) * t204 - qJ(5) * t475 + t429 * t205; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t400, 0, t401, 0, t440, t376, -t360, -pkin(5) * t360, 0, 0, -t335, 0, t502, 0, t511, -t513, -t246, -pkin(5) * t246 - pkin(6) * t469 - t431 * t294, 0, 0, -t286, 0, t512, 0, t518, -t519, -t178, -pkin(5) * t178 - t431 * t175 - t428 * t176, t222, t206, t227, t221, t226, t252, -t431 * t169 - t428 * t171 - t492, -t431 * t170 - t428 * t172 - t491, -t431 * t181 - t428 * t182 - t490, -pkin(5) * t159 - t431 * t152 - t428 * t153, t222, t206, t227, t221, t226, t252, -t431 * t160 - t428 * t162 - t492, -t431 * t161 - t428 * t163 - t491, -t431 * t167 - t428 * t168 - t490, -pkin(5) * t156 - t431 * t150 - t428 * t151; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t401, 0, -t400, 0, -t376, t440, t359, pkin(5) * t359, 0, 0, -t502, 0, -t335, 0, t513, t511, t245, pkin(5) * t245 + pkin(6) * t463 - t428 * t294, 0, 0, -t512, 0, -t286, 0, t519, t518, t177, pkin(5) * t177 - t428 * t175 + t431 * t176, t224, t207, t229, t223, t228, t253, -t428 * t169 + t431 * t171 + t210, -t428 * t170 + t431 * t172 + t211, -t428 * t181 + t431 * t182 + t233, pkin(5) * t158 - t428 * t152 + t431 * t153, t224, t207, t229, t223, t228, t253, -t428 * t160 + t431 * t162 + t210, -t428 * t161 + t431 * t163 + t211, -t428 * t167 + t431 * t168 + t233, pkin(5) * t155 - t428 * t150 + t431 * t151;];
tauB_reg = t1;
