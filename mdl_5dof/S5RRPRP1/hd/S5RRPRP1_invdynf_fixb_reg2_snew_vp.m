% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPRP1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:22
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPRP1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRP1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRP1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRP1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRP1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPRP1_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:22:46
% EndTime: 2019-12-05 18:22:48
% DurationCPUTime: 2.01s
% Computational Cost: add. (4741->139), mult. (6817->181), div. (0->0), fcn. (3888->8), ass. (0->106)
t1034 = sin(qJ(1));
t1037 = cos(qJ(1));
t1033 = sin(qJ(2));
t1036 = cos(qJ(2));
t1026 = qJD(1) + qJD(2);
t1024 = t1026 ^ 2;
t1025 = qJDD(1) + qJDD(2);
t1030 = sin(pkin(8));
t1031 = cos(pkin(8));
t1045 = -t1031 * t1024 - t1030 * t1025;
t998 = t1030 * t1024 - t1031 * t1025;
t1060 = t1033 * t998 + t1036 * t1045;
t981 = -t1033 * t1045 + t1036 * t998;
t1064 = t1034 * t981 + t1037 * t1060;
t1063 = -t1034 * t1060 + t1037 * t981;
t1004 = t1033 * t1024 - t1036 * t1025;
t1044 = -t1036 * t1024 - t1033 * t1025;
t1059 = t1034 * t1004 + t1037 * t1044;
t1058 = t1037 * t1004 - t1034 * t1044;
t1016 = t1037 * g(2) + t1034 * g(3);
t1041 = qJDD(1) * pkin(1) + t1016;
t1015 = t1034 * g(2) - t1037 * g(3);
t1039 = qJD(1) ^ 2;
t1042 = -t1039 * pkin(1) + t1015;
t986 = -t1033 * t1042 + t1036 * t1041;
t1040 = t1025 * pkin(2) + t986;
t987 = t1033 * t1041 + t1036 * t1042;
t985 = -t1024 * pkin(2) + t987;
t969 = t1030 * t1040 + t1031 * t985;
t1029 = -g(1) + qJDD(3);
t1032 = sin(qJ(4));
t1035 = cos(qJ(4));
t965 = -t1024 * pkin(3) + t1025 * pkin(7) + t969;
t962 = t1032 * t1029 + t1035 * t965;
t1053 = t1024 * t1035;
t1052 = t1026 * t1032;
t1028 = t1035 ^ 2;
t1051 = t1028 * t1024;
t1050 = t1032 * t1025;
t1049 = t1035 * t1025;
t1027 = t1032 ^ 2;
t1048 = t1027 + t1028;
t1047 = 0.2e1 * t1026 * t1035;
t1046 = qJD(4) * t1052;
t968 = -t1030 * t985 + t1031 * t1040;
t964 = -t1025 * pkin(3) - t1024 * pkin(7) - t968;
t1043 = -t1046 + t1049;
t1038 = qJD(4) ^ 2;
t1021 = t1035 * t1029;
t1014 = t1032 * t1053;
t1013 = -t1038 - t1051;
t1012 = -t1027 * t1024 - t1038;
t1011 = -t1037 * qJDD(1) + t1034 * t1039;
t1010 = t1034 * qJDD(1) + t1037 * t1039;
t1009 = -qJDD(4) + t1014;
t1008 = qJDD(4) + t1014;
t1007 = qJD(4) * pkin(4) - qJ(5) * t1052;
t1006 = t1048 * t1024;
t1001 = t1048 * t1025;
t994 = -0.2e1 * t1046 + t1049;
t993 = qJD(4) * t1047 + t1050;
t991 = t1035 * t1009 - t1032 * t1012;
t990 = -t1032 * t1008 + t1035 * t1013;
t989 = t1032 * t1009 + t1035 * t1012;
t988 = t1035 * t1008 + t1032 * t1013;
t984 = t1031 * t1001 - t1030 * t1006;
t983 = t1030 * t1001 + t1031 * t1006;
t975 = t1030 * t993 + t1031 * t991;
t974 = -t1030 * t994 + t1031 * t990;
t973 = t1030 * t991 - t1031 * t993;
t972 = t1030 * t990 + t1031 * t994;
t971 = -t1033 * t986 + t1036 * t987;
t970 = t1033 * t987 + t1036 * t986;
t967 = -t1033 * t983 + t1036 * t984;
t966 = t1033 * t984 + t1036 * t983;
t961 = -t1032 * t965 + t1021;
t960 = -t1033 * t973 + t1036 * t975;
t959 = -t1033 * t972 + t1036 * t974;
t958 = t1033 * t975 + t1036 * t973;
t957 = t1033 * t974 + t1036 * t972;
t956 = -t1043 * pkin(4) - qJ(5) * t1051 + t1007 * t1052 + qJDD(5) + t964;
t955 = -pkin(4) * t1051 + t1043 * qJ(5) - qJD(4) * t1007 + qJD(5) * t1047 + t962;
t954 = qJDD(4) * pkin(4) + t1021 + (pkin(4) * t1053 - t1025 * qJ(5) - 0.2e1 * qJD(5) * t1026 - t965) * t1032;
t953 = -t1034 * t966 + t1037 * t967;
t952 = -t1030 * t968 + t1031 * t969;
t951 = -t1034 * t967 - t1037 * t966;
t950 = t1030 * t969 + t1031 * t968;
t949 = -t1032 * t961 + t1035 * t962;
t948 = t1032 * t962 + t1035 * t961;
t947 = -t1034 * t958 + t1037 * t960;
t946 = -t1034 * t957 + t1037 * t959;
t945 = -t1034 * t960 - t1037 * t958;
t944 = -t1034 * t959 - t1037 * t957;
t943 = -t1032 * t954 + t1035 * t955;
t942 = t1032 * t955 + t1035 * t954;
t941 = t1030 * t964 + t1031 * t949;
t940 = t1030 * t949 - t1031 * t964;
t939 = -t1033 * t950 + t1036 * t952;
t938 = t1033 * t952 + t1036 * t950;
t937 = t1030 * t956 + t1031 * t943;
t936 = t1030 * t943 - t1031 * t956;
t935 = -t1033 * t940 + t1036 * t941;
t934 = t1033 * t941 + t1036 * t940;
t933 = -t1033 * t936 + t1036 * t937;
t932 = t1033 * t937 + t1036 * t936;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1029, 0, 0, 0, 0, 0, 0, t988, t989, 0, t948, 0, 0, 0, 0, 0, 0, t988, t989, 0, t942; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1011, t1010, 0, -t1034 * t1015 - t1037 * t1016, 0, 0, 0, 0, 0, 0, t1058, -t1059, 0, -t1034 * t971 - t1037 * t970, 0, 0, 0, 0, 0, 0, t1063, -t1064, 0, -t1034 * t939 - t1037 * t938, 0, 0, 0, 0, 0, 0, t944, t945, t951, -t1034 * t935 - t1037 * t934, 0, 0, 0, 0, 0, 0, t944, t945, t951, -t1034 * t933 - t1037 * t932; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1010, t1011, 0, t1037 * t1015 - t1034 * t1016, 0, 0, 0, 0, 0, 0, t1059, t1058, 0, -t1034 * t970 + t1037 * t971, 0, 0, 0, 0, 0, 0, t1064, t1063, 0, -t1034 * t938 + t1037 * t939, 0, 0, 0, 0, 0, 0, t946, t947, t953, -t1034 * t934 + t1037 * t935, 0, 0, 0, 0, 0, 0, t946, t947, t953, -t1034 * t932 + t1037 * t933; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1039, -qJDD(1), 0, t1015, 0, 0, 0, 0, 0, 0, t1044, t1004, 0, t971, 0, 0, 0, 0, 0, 0, t1060, t981, 0, t939, 0, 0, 0, 0, 0, 0, t959, t960, t967, t935, 0, 0, 0, 0, 0, 0, t959, t960, t967, t933; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1039, 0, t1016, 0, 0, 0, 0, 0, 0, -t1004, t1044, 0, t970, 0, 0, 0, 0, 0, 0, -t981, t1060, 0, t938, 0, 0, 0, 0, 0, 0, t957, t958, t966, t934, 0, 0, 0, 0, 0, 0, t957, t958, t966, t932; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1029, 0, 0, 0, 0, 0, 0, t988, t989, 0, t948, 0, 0, 0, 0, 0, 0, t988, t989, 0, t942; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1024, -t1025, 0, t987, 0, 0, 0, 0, 0, 0, t1045, t998, 0, t952, 0, 0, 0, 0, 0, 0, t974, t975, t984, t941, 0, 0, 0, 0, 0, 0, t974, t975, t984, t937; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1025, -t1024, 0, t986, 0, 0, 0, 0, 0, 0, -t998, t1045, 0, t950, 0, 0, 0, 0, 0, 0, t972, t973, t983, t940, 0, 0, 0, 0, 0, 0, t972, t973, t983, t936; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1029, 0, 0, 0, 0, 0, 0, t988, t989, 0, t948, 0, 0, 0, 0, 0, 0, t988, t989, 0, t942; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1024, -t1025, 0, t969, 0, 0, 0, 0, 0, 0, t990, t991, t1001, t949, 0, 0, 0, 0, 0, 0, t990, t991, t1001, t943; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1025, -t1024, 0, t968, 0, 0, 0, 0, 0, 0, t994, -t993, t1006, -t964, 0, 0, 0, 0, 0, 0, t994, -t993, t1006, -t956; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1029, 0, 0, 0, 0, 0, 0, t988, t989, 0, t948, 0, 0, 0, 0, 0, 0, t988, t989, 0, t942; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1013, t1009, t1049, t962, 0, 0, 0, 0, 0, 0, t1013, t1009, t1049, t955; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1008, t1012, -t1050, t961, 0, 0, 0, 0, 0, 0, t1008, t1012, -t1050, t954; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t994, t993, -t1006, t964, 0, 0, 0, 0, 0, 0, -t994, t993, -t1006, t956; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1013, t1009, t1049, t955; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1008, t1012, -t1050, t954; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t994, t993, -t1006, t956;];
f_new_reg = t1;
