% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRPRR7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d4,d5,theta1]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:01
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRPRR7_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRR7_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRR7_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRR7_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRR7_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRPRR7_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:01:08
% EndTime: 2019-12-05 16:01:09
% DurationCPUTime: 1.68s
% Computational Cost: add. (3518->172), mult. (6762->204), div. (0->0), fcn. (4493->8), ass. (0->125)
t987 = sin(qJ(5));
t988 = sin(qJ(4));
t990 = cos(qJ(5));
t991 = cos(qJ(4));
t951 = (-t987 * t991 - t988 * t990) * qJD(2);
t1027 = t951 ^ 2;
t1014 = qJD(2) * t991;
t953 = -t987 * t988 * qJD(2) + t990 * t1014;
t1026 = t953 ^ 2;
t977 = qJD(4) + qJD(5);
t1025 = t977 ^ 2;
t1024 = 2 * qJD(3);
t1023 = t953 * t951;
t979 = t988 ^ 2;
t994 = qJD(2) ^ 2;
t1022 = t979 * t994;
t989 = sin(qJ(2));
t992 = cos(qJ(2));
t964 = t989 * qJDD(2) + t992 * t994;
t983 = sin(pkin(8));
t1021 = t983 * t964;
t965 = -t992 * qJDD(2) + t989 * t994;
t1020 = t983 * t965;
t984 = cos(pkin(8));
t967 = t983 * g(1) - t984 * g(2);
t1019 = t983 * t967;
t1018 = t984 * t964;
t1017 = t984 * t965;
t1016 = t991 * t994;
t968 = -t984 * g(1) - t983 * g(2);
t981 = -g(3) + qJDD(1);
t949 = -t989 * t968 + t992 * t981;
t941 = -qJDD(2) * pkin(2) - t994 * qJ(3) + qJDD(3) - t949;
t939 = -qJDD(2) * pkin(6) + t941;
t925 = t988 * t939 - t991 * t967;
t980 = t991 ^ 2;
t1015 = t979 + t980;
t1013 = qJD(5) - t977;
t1012 = qJD(5) + t977;
t1011 = qJD(2) * qJD(4);
t1010 = t988 * qJDD(2);
t1009 = t991 * qJDD(2);
t1008 = -qJDD(4) - qJDD(5);
t1007 = t988 * t1016;
t1006 = t988 * t1011;
t1005 = t991 * t1011;
t937 = t991 * t939;
t1004 = t988 * t967 + t937;
t959 = -t1005 - t1010;
t960 = -t1006 + t1009;
t1003 = t990 * t959 - t987 * t960;
t993 = qJD(4) ^ 2;
t1002 = -t980 * t994 - t993;
t1001 = qJDD(4) - t1007;
t912 = qJDD(4) * pkin(4) - t960 * pkin(7) + t937 + (-pkin(4) * t1016 - pkin(7) * t1011 + t967) * t988;
t970 = qJD(4) * pkin(4) - pkin(7) * t1014;
t914 = -pkin(4) * t1022 + t959 * pkin(7) - qJD(4) * t970 + t925;
t899 = t990 * t912 - t987 * t914;
t900 = t987 * t912 + t990 * t914;
t1000 = t990 * t899 + t987 * t900;
t917 = -t1013 * t953 + t1003;
t996 = -t987 * t959 - t990 * t960;
t919 = -t1013 * t951 + t996;
t999 = t987 * t917 + t990 * t919;
t933 = -t1025 - t1027;
t934 = -t1008 + t1023;
t998 = t987 * t933 + t990 * t934;
t935 = t1008 + t1023;
t948 = -t1025 - t1026;
t997 = t987 * t935 + t990 * t948;
t950 = t992 * t968 + t989 * t981;
t995 = -t994 * pkin(2) + qJDD(2) * qJ(3) + t950;
t940 = qJD(2) * t1024 + t995;
t985 = t994 * pkin(6);
t971 = -t993 - t1022;
t969 = -qJDD(4) - t1007;
t966 = t1015 * t994;
t963 = t1015 * qJDD(2);
t961 = -0.2e1 * t1006 + t1009;
t958 = 0.2e1 * t1005 + t1010;
t955 = t984 * t967;
t947 = -t988 * t1002 + t991 * t969;
t946 = -t988 * t1001 + t991 * t971;
t945 = t991 * t1002 + t988 * t969;
t944 = t991 * t1001 + t988 * t971;
t943 = -t989 * t963 - t992 * t966;
t942 = t992 * t963 - t989 * t966;
t938 = t940 - t985;
t932 = t989 * t945 + t992 * t961;
t931 = t989 * t944 + t992 * t958;
t930 = -t992 * t945 + t989 * t961;
t929 = -t992 * t944 + t989 * t958;
t928 = -t989 * t949 + t992 * t950;
t927 = t992 * t949 + t989 * t950;
t926 = -t1026 - t1027;
t923 = t992 * t940 + t989 * t941;
t922 = t989 * t940 - t992 * t941;
t921 = -pkin(7) * t1022 - t959 * pkin(4) - t985 + (t970 * t991 + t1024) * qJD(2) + t995;
t920 = t990 * t935 - t987 * t948;
t918 = t1012 * t951 - t996;
t916 = t1012 * t953 - t1003;
t913 = t990 * t933 - t987 * t934;
t910 = -t988 * t1004 + t991 * t925;
t909 = t991 * t1004 + t988 * t925;
t908 = t991 * t920 - t988 * t997;
t907 = t988 * t920 + t991 * t997;
t906 = t990 * t917 - t987 * t919;
t905 = t989 * t909 + t992 * t938;
t904 = -t992 * t909 + t989 * t938;
t902 = t991 * t913 - t988 * t998;
t901 = t988 * t913 + t991 * t998;
t898 = t989 * t907 + t992 * t918;
t897 = -t992 * t907 + t989 * t918;
t896 = t989 * t901 + t992 * t916;
t895 = -t992 * t901 + t989 * t916;
t894 = t991 * t906 - t988 * t999;
t893 = t988 * t906 + t991 * t999;
t892 = -t987 * t899 + t990 * t900;
t890 = t989 * t893 + t992 * t926;
t889 = -t992 * t893 + t989 * t926;
t888 = -t988 * t1000 + t991 * t892;
t887 = t991 * t1000 + t988 * t892;
t886 = t989 * t887 + t992 * t921;
t885 = -t992 * t887 + t989 * t921;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t984 * t968 - t1019, 0, 0, 0, 0, 0, 0, -t1018, t1017, 0, t984 * t928 - t1019, 0, 0, 0, 0, 0, 0, 0, t1018, -t1017, t984 * t923 - t1019, 0, 0, 0, 0, 0, 0, t984 * t931 + t983 * t946, t984 * t932 + t983 * t947, t984 * t943, t984 * t905 + t983 * t910, 0, 0, 0, 0, 0, 0, t984 * t896 + t983 * t902, t984 * t898 + t983 * t908, t984 * t890 + t983 * t894, t984 * t886 + t983 * t888; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t983 * t968 + t955, 0, 0, 0, 0, 0, 0, -t1021, t1020, 0, t983 * t928 + t955, 0, 0, 0, 0, 0, 0, 0, t1021, -t1020, t983 * t923 + t955, 0, 0, 0, 0, 0, 0, t983 * t931 - t984 * t946, t983 * t932 - t984 * t947, t983 * t943, t983 * t905 - t984 * t910, 0, 0, 0, 0, 0, 0, t983 * t896 - t984 * t902, t983 * t898 - t984 * t908, t983 * t890 - t984 * t894, t983 * t886 - t984 * t888; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t981, 0, 0, 0, 0, 0, 0, -t965, -t964, 0, t927, 0, 0, 0, 0, 0, 0, 0, t965, t964, t922, 0, 0, 0, 0, 0, 0, t929, t930, t942, t904, 0, 0, 0, 0, 0, 0, t895, t897, t889, t885; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t968, 0, 0, 0, 0, 0, 0, -t964, t965, 0, t928, 0, 0, 0, 0, 0, 0, 0, t964, -t965, t923, 0, 0, 0, 0, 0, 0, t931, t932, t943, t905, 0, 0, 0, 0, 0, 0, t896, t898, t890, t886; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t967, 0, 0, 0, 0, 0, 0, 0, 0, 0, t967, 0, 0, 0, 0, 0, 0, 0, 0, 0, t967, 0, 0, 0, 0, 0, 0, -t946, -t947, 0, -t910, 0, 0, 0, 0, 0, 0, -t902, -t908, -t894, -t888; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t981, 0, 0, 0, 0, 0, 0, -t965, -t964, 0, t927, 0, 0, 0, 0, 0, 0, 0, t965, t964, t922, 0, 0, 0, 0, 0, 0, t929, t930, t942, t904, 0, 0, 0, 0, 0, 0, t895, t897, t889, t885; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t994, -qJDD(2), 0, t950, 0, 0, 0, 0, 0, 0, 0, t994, qJDD(2), t940, 0, 0, 0, 0, 0, 0, t958, t961, -t966, t938, 0, 0, 0, 0, 0, 0, t916, t918, t926, t921; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t994, 0, t949, 0, 0, 0, 0, 0, 0, 0, -qJDD(2), t994, -t941, 0, 0, 0, 0, 0, 0, -t944, -t945, t963, -t909, 0, 0, 0, 0, 0, 0, -t901, -t907, -t893, -t887; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t967, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t967, 0, 0, 0, 0, 0, 0, t946, t947, 0, t910, 0, 0, 0, 0, 0, 0, t902, t908, t894, t888; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t967, 0, 0, 0, 0, 0, 0, t946, t947, 0, t910, 0, 0, 0, 0, 0, 0, t902, t908, t894, t888; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t994, -qJDD(2), -t940, 0, 0, 0, 0, 0, 0, -t958, -t961, t966, -t938, 0, 0, 0, 0, 0, 0, -t916, -t918, -t926, -t921; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t994, t941, 0, 0, 0, 0, 0, 0, t944, t945, -t963, t909, 0, 0, 0, 0, 0, 0, t901, t907, t893, t887; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t971, t969, -t1010, t925, 0, 0, 0, 0, 0, 0, t913, t920, t906, t892; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1001, t1002, -t1009, t1004, 0, 0, 0, 0, 0, 0, t998, t997, t999, t1000; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t958, t961, -t966, t938, 0, 0, 0, 0, 0, 0, t916, t918, t926, t921; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t933, t935, t917, t900; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t934, t948, t919, t899; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t916, t918, t926, t921;];
f_new_reg = t1;
