% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRPRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d4,d5,theta1]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:01
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRPRR7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRR7_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRR7_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRR7_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRR7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRPRR7_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:00:49
% EndTime: 2019-12-05 16:01:00
% DurationCPUTime: 5.02s
% Computational Cost: add. (11680->416), mult. (22383->609), div. (0->0), fcn. (14670->8), ass. (0->285)
t403 = cos(qJ(2));
t405 = qJD(2) ^ 2;
t400 = sin(qJ(2));
t425 = t400 * qJDD(2);
t366 = t403 * t405 + t425;
t394 = sin(pkin(8));
t395 = cos(pkin(8));
t370 = t394 * g(1) - t395 * g(2);
t315 = -pkin(5) * t366 + t403 * t370;
t475 = t394 * t315;
t474 = t395 * t315;
t398 = sin(qJ(5));
t387 = qJDD(4) + qJDD(5);
t399 = sin(qJ(4));
t401 = cos(qJ(5));
t402 = cos(qJ(4));
t339 = (-t398 * t402 - t399 * t401) * qJD(2);
t432 = qJD(2) * t402;
t341 = -t398 * t399 * qJD(2) + t401 * t432;
t462 = t341 * t339;
t468 = t387 + t462;
t473 = t398 * t468;
t472 = t401 * t468;
t471 = 2 * qJD(3);
t423 = t403 * qJDD(2);
t367 = t400 * t405 - t423;
t314 = pkin(5) * t367 - t400 * t370;
t470 = t394 * t314;
t469 = t395 * t314;
t467 = qJD(2) * t471;
t371 = t395 * g(1) + t394 * g(2);
t392 = g(3) - qJDD(1);
t335 = -t403 * t371 - t400 * t392;
t414 = pkin(1) * t366 + qJ(1) * t367 + t335;
t334 = -t400 * t371 + t403 * t392;
t413 = -pkin(1) * t367 + qJ(1) * t366 - t334;
t351 = t395 * t370;
t311 = -t394 * t371 + t351;
t337 = t339 ^ 2;
t338 = t341 ^ 2;
t388 = qJD(4) + qJD(5);
t386 = t388 ^ 2;
t466 = -pkin(6) - pkin(2);
t461 = t388 * t398;
t460 = t388 * t401;
t390 = t399 ^ 2;
t459 = t390 * t405;
t391 = t402 ^ 2;
t458 = t391 * t405;
t457 = t394 * t366;
t456 = t394 * t367;
t455 = t394 * t370;
t453 = t394 * t392;
t452 = t395 * t366;
t451 = t395 * t367;
t450 = t395 * t392;
t430 = qJD(2) * qJD(4);
t418 = t402 * t430;
t426 = t399 * qJDD(2);
t360 = -t418 - t426;
t374 = qJD(4) * pkin(4) - pkin(7) * t432;
t396 = t405 * pkin(6);
t428 = qJDD(2) * qJ(3);
t406 = -t405 * pkin(2) + t335 + t428;
t260 = -t360 * pkin(4) - pkin(7) * t459 - t396 + (t374 * t402 + t471) * qJD(2) + t406;
t449 = t398 * t260;
t294 = -t462 + t387;
t448 = t398 * t294;
t393 = qJDD(2) * pkin(2);
t308 = -t405 * qJ(3) + qJDD(3) + t334 - t393;
t303 = -qJDD(2) * pkin(6) + t308;
t297 = t402 * t303;
t419 = t399 * t430;
t424 = t402 * qJDD(2);
t361 = -t419 + t424;
t437 = t402 * t405;
t239 = qJDD(4) * pkin(4) - t361 * pkin(7) + t297 + (-pkin(4) * t437 - pkin(7) * t430 + t370) * t399;
t434 = -t399 * t303 + t402 * t370;
t242 = -pkin(4) * t459 + t360 * pkin(7) - qJD(4) * t374 - t434;
t197 = -t401 * t239 + t398 * t242;
t198 = t398 * t239 + t401 * t242;
t172 = -t401 * t197 + t398 * t198;
t447 = t399 * t172;
t307 = t406 + t467;
t299 = t307 - t396;
t446 = t399 * t299;
t421 = t399 * t437;
t372 = qJDD(4) + t421;
t445 = t399 * t372;
t433 = t390 + t391;
t365 = t433 * qJDD(2);
t444 = t400 * t365;
t443 = t401 * t260;
t442 = t401 * t294;
t441 = t402 * t172;
t440 = t402 * t299;
t439 = t402 * t372;
t373 = qJDD(4) - t421;
t438 = t402 * t373;
t436 = t403 * t365;
t431 = qJD(5) + t388;
t427 = t395 * qJDD(2);
t422 = t400 * t462;
t420 = t403 * t462;
t271 = -t399 * t370 - t297;
t226 = -t402 * t271 - t399 * t434;
t368 = t433 * t405;
t309 = -t400 * t368 + t436;
t310 = -t403 * t368 - t444;
t417 = -pkin(1) * t309 + qJ(1) * t310 + qJ(3) * t368 + t466 * t365 + t226;
t416 = 0.2e1 * t428 + t467 + t414;
t415 = -qJDD(3) + 0.2e1 * t393 + t413;
t173 = t398 * t197 + t401 * t198;
t263 = t403 * t307 + t400 * t308;
t279 = t400 * t334 + t403 * t335;
t412 = -t401 * t360 + t398 * t361;
t312 = -t395 * t371 - t455;
t404 = qJD(4) ^ 2;
t411 = -t404 - t458;
t410 = t400 * t421;
t409 = t403 * t421;
t227 = t399 * t271 - t402 * t434;
t261 = t400 * t307 - t403 * t308;
t278 = t403 * t334 - t400 * t335;
t408 = t398 * t360 + t401 * t361;
t407 = (-qJD(5) + t388) * t341 - t412;
t274 = t339 * qJD(5) + t408;
t382 = t394 * qJDD(2);
t377 = t404 - t458;
t376 = -t404 - t459;
t375 = -t404 + t459;
t369 = (-t390 + t391) * t405;
t363 = pkin(1) * t370;
t362 = -0.2e1 * t419 + t424;
t359 = 0.2e1 * t418 + t426;
t358 = t399 * t373;
t357 = t433 * t430;
t336 = t388 * t339;
t333 = -t338 + t386;
t332 = t337 - t386;
t331 = t403 * qJDD(4) - t400 * t357;
t330 = -t399 * t361 - t391 * t430;
t329 = -t402 * t360 - t390 * t430;
t327 = -t338 - t386;
t326 = -t399 * t411 - t439;
t325 = t402 * t376 - t358;
t324 = t402 * t411 - t445;
t323 = -t402 * t377 - t358;
t322 = -t402 * t375 + t445;
t321 = t399 * t377 - t438;
t320 = (t360 - t418) * t399;
t319 = t399 * t376 + t438;
t318 = -t399 * t375 - t439;
t317 = (-t361 + t419) * t402;
t306 = t402 * t359 + t399 * t362;
t305 = t399 * t359 - t402 * t362;
t300 = t338 - t337;
t292 = -t400 * t329 - t409;
t291 = -t400 * t330 + t409;
t290 = -t400 * t323 + t402 * t423;
t289 = -t400 * t318 - t399 * t423;
t288 = -t386 - t337;
t285 = t400 * t324 + t403 * t362;
t284 = t400 * t319 + t403 * t359;
t283 = -t403 * t324 + t400 * t362;
t282 = -t403 * t319 + t400 * t359;
t281 = (t339 * t401 + t341 * t398) * t388;
t280 = (t339 * t398 - t341 * t401) * t388;
t276 = -t337 - t338;
t275 = -t400 * t305 + t403 * t369;
t273 = -t341 * qJD(5) - t412;
t269 = t401 * t332 - t448;
t268 = -t398 * t333 + t472;
t267 = t398 * t332 + t442;
t266 = t401 * t333 + t473;
t265 = t395 * t279 - t455;
t264 = t394 * t279 + t351;
t259 = -t398 * t327 - t442;
t258 = t401 * t327 - t448;
t257 = t274 - t336;
t256 = t274 + t336;
t255 = t431 * t339 + t408;
t252 = t431 * t341 + t412;
t250 = t401 * t274 - t341 * t461;
t249 = t398 * t274 + t341 * t460;
t248 = -t398 * t273 - t339 * t460;
t247 = t401 * t273 - t339 * t461;
t246 = t395 * t285 + t394 * t326;
t245 = t395 * t284 + t394 * t325;
t244 = t394 * t285 - t395 * t326;
t243 = t394 * t284 - t395 * t325;
t241 = t401 * t288 - t473;
t240 = t398 * t288 + t472;
t236 = t395 * t263 - t455;
t235 = t394 * t263 + t351;
t234 = -pkin(5) * t261 + (-pkin(2) * t400 + qJ(3) * t403) * t370;
t233 = -t402 * t280 - t399 * t281;
t232 = t399 * t280 - t402 * t281;
t231 = pkin(3) * t324 - qJ(3) * t326 + t434;
t230 = pkin(3) * t319 - qJ(3) * t325 - t271;
t229 = pkin(3) * t359 + t466 * t325 + t440;
t228 = pkin(3) * t362 + t466 * t326 - t446;
t225 = -t400 * t233 + t403 * t387;
t224 = -pkin(3) * t368 - t227;
t223 = -pkin(1) * t261 + pkin(2) * t308 - qJ(3) * t307;
t222 = -t402 * t267 - t399 * t269;
t221 = -t402 * t266 - t399 * t268;
t220 = t399 * t267 - t402 * t269;
t219 = t399 * t266 - t402 * t268;
t218 = -pkin(7) * t258 + t443;
t217 = -t399 * t258 + t402 * t259;
t216 = t402 * t258 + t399 * t259;
t215 = t398 * t257 + t401 * t407;
t214 = -t401 * t252 - t398 * t256;
t213 = -t401 * t257 + t398 * t407;
t212 = -t398 * t252 + t401 * t256;
t211 = t400 * t226 + t403 * t299;
t210 = -t403 * t226 + t400 * t299;
t208 = -pkin(1) * t283 - qJ(3) * t362 - t466 * t324 - t440;
t207 = -pkin(1) * t282 - qJ(3) * t359 - t466 * t319 - t446;
t206 = -pkin(7) * t240 + t449;
t205 = -t402 * t249 - t399 * t250;
t204 = t399 * t249 - t402 * t250;
t203 = -t402 * t247 - t399 * t248;
t202 = t399 * t247 - t402 * t248;
t201 = -pkin(3) * t436 - pkin(5) * t309 - t400 * t224;
t200 = -t399 * t240 + t402 * t241;
t199 = t402 * t240 + t399 * t241;
t194 = -t400 * t205 - t420;
t193 = -t400 * t203 + t420;
t192 = -pkin(4) * t255 + pkin(7) * t259 + t449;
t191 = -t400 * t221 + t403 * t257;
t190 = -t400 * t222 + t403 * t407;
t189 = pkin(3) * t226 - qJ(3) * t227;
t188 = t400 * t216 + t403 * t255;
t187 = -t403 * t216 + t400 * t255;
t186 = -pkin(4) * t252 + pkin(7) * t241 - t443;
t185 = t400 * t199 + t403 * t252;
t184 = -t403 * t199 + t400 * t252;
t183 = pkin(3) * t299 + t466 * t227;
t182 = -pkin(5) * t283 - t400 * t228 + t403 * t231;
t181 = -pkin(5) * t282 - t400 * t229 + t403 * t230;
t180 = t395 * t211 + t394 * t227;
t179 = t394 * t211 - t395 * t227;
t178 = -t399 * t213 + t402 * t215;
t177 = t402 * t213 + t399 * t215;
t176 = -t402 * t212 - t399 * t214;
t175 = t399 * t212 - t402 * t214;
t174 = -t400 * t176 + t403 * t300;
t170 = t400 * t177 + t403 * t276;
t169 = -t403 * t177 + t400 * t276;
t168 = t395 * t188 + t394 * t217;
t167 = t394 * t188 - t395 * t217;
t166 = -pkin(1) * t210 - qJ(3) * t299 - t466 * t226;
t165 = -pkin(4) * t260 + pkin(7) * t173;
t164 = t395 * t185 + t394 * t200;
t163 = t394 * t185 - t395 * t200;
t162 = -pkin(7) * t213 - t172;
t161 = pkin(3) * t216 + pkin(4) * t258 - qJ(3) * t217 - t198;
t160 = -pkin(4) * t276 + pkin(7) * t215 + t173;
t159 = pkin(3) * t199 + pkin(4) * t240 - qJ(3) * t200 - t197;
t158 = -pkin(5) * t210 - t400 * t183 + t403 * t189;
t157 = t395 * t170 + t394 * t178;
t156 = t394 * t170 - t395 * t178;
t155 = t402 * t173 - t447;
t154 = t399 * t173 + t441;
t153 = pkin(3) * t255 - t402 * t192 + t466 * t217 - t399 * t218;
t152 = pkin(3) * t177 + pkin(4) * t213 - qJ(3) * t178;
t151 = t400 * t154 + t403 * t260;
t150 = -t403 * t154 + t400 * t260;
t149 = pkin(3) * t252 - t402 * t186 + t466 * t200 - t399 * t206;
t148 = -pkin(1) * t187 - qJ(3) * t255 + t399 * t192 - t466 * t216 - t402 * t218;
t147 = -pkin(1) * t184 - qJ(3) * t252 + t399 * t186 - t466 * t199 - t402 * t206;
t146 = t395 * t151 + t394 * t155;
t145 = t394 * t151 - t395 * t155;
t144 = -pkin(5) * t187 - t400 * t153 + t403 * t161;
t143 = -pkin(5) * t184 - t400 * t149 + t403 * t159;
t142 = pkin(3) * t276 - t402 * t160 - t399 * t162 + t466 * t178;
t141 = pkin(3) * t154 + pkin(4) * t172 - qJ(3) * t155;
t140 = -pkin(1) * t169 - qJ(3) * t276 + t399 * t160 - t402 * t162 - t466 * t177;
t139 = pkin(3) * t260 + pkin(7) * t447 + t466 * t155 - t402 * t165;
t138 = -pkin(5) * t169 - t400 * t142 + t403 * t152;
t137 = -pkin(1) * t150 + pkin(7) * t441 - qJ(3) * t260 - t466 * t154 + t399 * t165;
t136 = -pkin(5) * t150 - t400 * t139 + t403 * t141;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t312, 0, 0, 0, 0, 0, 0, -t452, t451, 0, t265, 0, 0, 0, 0, 0, 0, 0, t452, -t451, t236, 0, 0, 0, 0, 0, 0, t245, t246, t395 * t310, t180, 0, 0, 0, 0, 0, 0, t164, t168, t157, t146; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t311, 0, 0, 0, 0, 0, 0, -t457, t456, 0, t264, 0, 0, 0, 0, 0, 0, 0, t457, -t456, t235, 0, 0, 0, 0, 0, 0, t243, t244, t394 * t310, t179, 0, 0, 0, 0, 0, 0, t163, t167, t156, t145; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t392, 0, 0, 0, 0, 0, 0, -t367, -t366, 0, -t278, 0, 0, 0, 0, 0, 0, 0, t367, t366, t261, 0, 0, 0, 0, 0, 0, t282, t283, t309, t210, 0, 0, 0, 0, 0, 0, t184, t187, t169, t150; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t453, -t450, -t311, -qJ(1) * t311, 0, 0, -t451, 0, -t452, t382, t394 * t413 + t469, -t394 * t414 - t474, t395 * t278, -qJ(1) * t264 - (pkin(1) * t394 - pkin(5) * t395) * t278, t382, t451, t452, 0, 0, 0, -t395 * t261, -t394 * t415 - t469, t394 * t416 + t474, -qJ(1) * t235 - t394 * t223 + t395 * t234, t395 * t291 - t394 * t317, t395 * t275 - t394 * t306, t395 * t290 - t394 * t321, t395 * t292 - t394 * t320, t395 * t289 - t394 * t322, t395 * t331, -qJ(1) * t243 + t395 * t181 - t394 * t207, -qJ(1) * t244 + t395 * t182 - t394 * t208, t395 * t201 - t394 * t417, -qJ(1) * t179 + t395 * t158 - t394 * t166, t395 * t194 - t394 * t204, t395 * t174 - t394 * t175, t395 * t191 - t394 * t219, t395 * t193 - t394 * t202, t395 * t190 - t394 * t220, t395 * t225 - t394 * t232, -qJ(1) * t163 + t395 * t143 - t394 * t147, -qJ(1) * t167 + t395 * t144 - t394 * t148, -qJ(1) * t156 + t395 * t138 - t394 * t140, -qJ(1) * t145 + t395 * t136 - t394 * t137; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t450, -t453, t312, qJ(1) * t312, 0, 0, -t456, 0, -t457, -t427, -t395 * t413 + t470, t395 * t414 - t475, t394 * t278, qJ(1) * t265 - (-pkin(1) * t395 - pkin(5) * t394) * t278, -t427, t456, t457, 0, 0, 0, -t394 * t261, t395 * t415 - t470, -t395 * t416 + t475, qJ(1) * t236 + t395 * t223 + t394 * t234, t394 * t291 + t395 * t317, t394 * t275 + t395 * t306, t394 * t290 + t395 * t321, t394 * t292 + t395 * t320, t394 * t289 + t395 * t322, t394 * t331, qJ(1) * t245 + t394 * t181 + t395 * t207, qJ(1) * t246 + t394 * t182 + t395 * t208, t394 * t201 + t395 * t417, qJ(1) * t180 + t394 * t158 + t395 * t166, t394 * t194 + t395 * t204, t394 * t174 + t395 * t175, t394 * t191 + t395 * t219, t394 * t193 + t395 * t202, t394 * t190 + t395 * t220, t394 * t225 + t395 * t232, qJ(1) * t164 + t394 * t143 + t395 * t147, qJ(1) * t168 + t394 * t144 + t395 * t148, qJ(1) * t157 + t394 * t138 + t395 * t140, qJ(1) * t146 + t394 * t136 + t395 * t137; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t370, t371, 0, 0, 0, 0, t366, 0, -t367, 0, t315, t314, t279, pkin(5) * t279 + t363, 0, -t366, t367, 0, 0, 0, t263, -t315, -t314, pkin(5) * t263 + t363 + (pkin(2) * t403 + qJ(3) * t400) * t370, t403 * t330 + t410, t403 * t305 + t400 * t369, t403 * t323 + t400 * t424, t403 * t329 - t410, t403 * t318 - t399 * t425, t400 * qJDD(4) + t403 * t357, -pkin(1) * t325 + pkin(5) * t284 + t403 * t229 + t400 * t230, -pkin(1) * t326 + pkin(5) * t285 + t403 * t228 + t400 * t231, -pkin(3) * t444 + pkin(5) * t310 + t403 * t224, -pkin(1) * t227 + pkin(5) * t211 + t403 * t183 + t400 * t189, t403 * t205 - t422, t403 * t176 + t400 * t300, t403 * t221 + t400 * t257, t403 * t203 + t422, t403 * t222 + t400 * t407, t403 * t233 + t400 * t387, -pkin(1) * t200 + pkin(5) * t185 + t403 * t149 + t400 * t159, -pkin(1) * t217 + pkin(5) * t188 + t403 * t153 + t400 * t161, -pkin(1) * t178 + pkin(5) * t170 + t403 * t142 + t400 * t152, -pkin(1) * t155 + pkin(5) * t151 + t403 * t139 + t400 * t141;];
tauB_reg = t1;
