% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S5RRRRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d4]';
% 
% Output:
% tau_reg [5x(5*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:13
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S5RRRRP10_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP10_invdynJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP10_invdynJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP10_invdynJ_fixb_reg2_slag_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP10_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRP10_invdynJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:12:27
% EndTime: 2019-12-31 22:12:47
% DurationCPUTime: 9.75s
% Computational Cost: add. (10603->690), mult. (26820->906), div. (0->0), fcn. (20880->10), ass. (0->313)
t257 = sin(qJ(2));
t404 = cos(pkin(5));
t334 = t257 * t404;
t245 = pkin(1) * t334;
t256 = sin(qJ(3));
t260 = cos(qJ(3));
t307 = pkin(3) * t256 - pkin(9) * t260;
t253 = sin(pkin(5));
t261 = cos(qJ(2));
t386 = t253 * t261;
t456 = -(t245 + (pkin(7) + t307) * t386) * qJD(1) + t307 * qJD(3);
t255 = sin(qJ(4));
t259 = cos(qJ(4));
t373 = qJD(1) * t253;
t237 = t261 * t373;
t319 = t260 * t237;
t348 = t257 * t373;
t155 = t255 * t319 - t259 * t348;
t369 = qJD(3) * t260;
t455 = -t255 * t369 + t155;
t366 = qJD(4) * t259;
t454 = t256 * t366 - t455;
t302 = t237 - qJD(3);
t331 = t404 * qJD(1);
t298 = t331 + qJD(2);
t281 = qJD(3) * t298;
t363 = qJD(1) * qJD(2);
t339 = t261 * t363;
t360 = t257 * qJDD(1);
t287 = t339 + t360;
t269 = t253 * t287 + t281;
t328 = t404 * qJDD(1);
t293 = t328 + qJDD(2);
t321 = t256 * t348;
t273 = qJD(3) * t321 - t256 * t293;
t441 = t269 * t260 - t273;
t453 = qJD(4) * t302 - t441;
t333 = t261 * t404;
t389 = t253 * t257;
t203 = pkin(1) * t333 - pkin(7) * t389;
t187 = qJD(2) * t203;
t258 = sin(qJ(1));
t432 = cos(qJ(1));
t311 = t404 * t432;
t198 = t257 * t311 + t258 * t261;
t350 = t253 * t432;
t141 = t198 * t256 + t260 * t350;
t200 = -t258 * t334 + t432 * t261;
t387 = t253 * t260;
t145 = t200 * t256 - t258 * t387;
t195 = t256 * t389 - t404 * t260;
t283 = g(1) * t145 + g(2) * t141 + g(3) * t195;
t142 = t198 * t260 - t256 * t350;
t197 = t257 * t258 - t261 * t311;
t452 = t142 * t255 - t197 * t259;
t451 = t142 * t259 + t197 * t255;
t364 = t256 * qJD(2);
t345 = t261 * t364;
t88 = t253 * (qJD(1) * (t257 * t369 + t345) + t256 * t360) + t256 * t281 - t260 * t293;
t250 = t253 ^ 2;
t450 = 0.2e1 * t250;
t340 = t257 * t363;
t316 = t253 * t340;
t362 = qJDD(1) * t261;
t236 = t253 * t362;
t359 = qJDD(3) - t236;
t280 = t316 + t359;
t449 = pkin(8) * t280;
t448 = g(3) * t253;
t371 = qJD(3) * t256;
t356 = pkin(8) * t371;
t318 = pkin(1) * t331;
t183 = -pkin(7) * t348 + t261 * t318;
t309 = pkin(2) * t257 - pkin(8) * t261;
t184 = t309 * t373;
t119 = t260 * t183 + t256 * t184;
t95 = pkin(9) * t348 + t119;
t447 = t456 * t259 + (t356 + t95) * t255;
t431 = pkin(3) * t260;
t308 = pkin(9) * t256 + t431;
t219 = -pkin(2) - t308;
t446 = t219 * t366 + t456 * t255 - t259 * t95;
t167 = t256 * t298 + t260 * t348;
t126 = t167 * t255 + t259 * t302;
t165 = -t260 * t298 + t321;
t158 = qJD(4) + t165;
t403 = t126 * t158;
t367 = qJD(4) * t255;
t48 = t167 * t367 - t255 * t280 + t453 * t259;
t445 = -t48 - t403;
t444 = t167 * t302;
t443 = t119 + t356;
t346 = qJD(2) * t386;
t138 = -qJD(3) * t195 + t260 * t346;
t442 = -qJD(4) * t386 + t138;
t381 = t259 * t260;
t246 = pkin(8) * t381;
t177 = t255 * t219 + t246;
t440 = (qJDD(2) + 0.2e1 * t328) * t253;
t439 = t319 - t369;
t320 = t256 * t237;
t438 = t320 - t371;
t376 = pkin(7) * t386 + t245;
t181 = t404 * pkin(8) + t376;
t188 = t376 * qJD(2);
t388 = t253 * t258;
t146 = t200 * t260 + t256 * t388;
t199 = t432 * t257 + t258 * t333;
t100 = -t146 * t255 + t199 * t259;
t196 = t404 * t256 + t257 * t387;
t139 = t196 * t255 + t259 * t386;
t437 = -g(1) * t100 + g(2) * t452 + g(3) * t139;
t128 = t259 * t167 - t255 * t302;
t435 = t128 ^ 2;
t262 = qJD(1) ^ 2;
t83 = qJDD(4) + t88;
t434 = pkin(4) * t83;
t425 = t126 * pkin(4);
t254 = -qJ(5) - pkin(9);
t150 = -pkin(2) * t298 - t183;
t76 = t165 * pkin(3) - t167 * pkin(9) + t150;
t151 = qJD(2) * pkin(8) + qJD(1) * t181;
t296 = -pkin(2) * t261 - pkin(8) * t257 - pkin(1);
t157 = t296 * t373;
t87 = t260 * t151 + t256 * t157;
t79 = -t302 * pkin(9) + t87;
t41 = -t255 * t79 + t259 * t76;
t26 = -qJ(5) * t128 + t41;
t23 = pkin(4) * t158 + t26;
t424 = -t26 + t23;
t380 = t260 * t261;
t384 = t255 * t257;
t169 = (t259 * t380 + t384) * t253;
t156 = qJD(1) * t169;
t365 = qJD(5) * t259;
t423 = -pkin(4) * t320 + qJ(5) * t156 - t256 * t365 + (pkin(4) * t256 - qJ(5) * t381) * qJD(3) + (-t246 + (qJ(5) * t256 - t219) * t255) * qJD(4) + t447;
t382 = t256 * t259;
t422 = qJ(5) * t155 + (-pkin(8) * qJD(3) - qJ(5) * qJD(4)) * t382 + (-qJD(5) * t256 + (-pkin(8) * qJD(4) - qJ(5) * qJD(3)) * t260) * t255 + t446;
t180 = -t404 * pkin(2) - t203;
t91 = t195 * pkin(3) - t196 * pkin(9) + t180;
t377 = pkin(2) * t386 + pkin(8) * t389;
t182 = -pkin(1) * t253 - t377;
t114 = t260 * t181 + t256 * t182;
t93 = -pkin(9) * t386 + t114;
t53 = t255 * t91 + t259 * t93;
t421 = qJ(5) * t48;
t164 = t259 * t280;
t368 = qJD(4) * t128;
t49 = t255 * t441 - t164 + t368;
t420 = qJ(5) * t49;
t294 = qJD(2) * t318;
t314 = pkin(1) * t328;
t352 = pkin(7) * t236 + t257 * t314 + t261 * t294;
t130 = -pkin(7) * t316 + t352;
t108 = pkin(8) * t293 + t130;
t291 = t309 * qJD(2);
t115 = (qJD(1) * t291 + qJDD(1) * t296) * t253;
t324 = t256 * t108 - t260 * t115 + t151 * t369 + t157 * t371;
t32 = -pkin(3) * t280 + t324;
t14 = t49 * pkin(4) + qJDD(5) + t32;
t419 = t14 * t255;
t42 = t255 * t76 + t259 * t79;
t27 = -qJ(5) * t126 + t42;
t418 = t158 * t27;
t417 = t158 * t41;
t416 = t158 * t42;
t415 = t255 * t32;
t414 = t255 * t48;
t413 = t255 * t83;
t412 = t259 * t49;
t411 = t259 * t83;
t410 = t260 * t88;
t370 = qJD(3) * t259;
t409 = (-t256 * t370 - t260 * t367) * pkin(8) + t446;
t408 = -t177 * qJD(4) + t447;
t357 = pkin(8) * t369;
t118 = -t256 * t183 + t184 * t260;
t94 = -pkin(3) * t348 - t118;
t407 = t454 * pkin(4) + t357 - t94;
t335 = qJD(4) * t254;
t397 = t165 * t255;
t112 = pkin(3) * t167 + pkin(9) * t165;
t86 = -t256 * t151 + t260 * t157;
t55 = t255 * t112 + t259 * t86;
t406 = -qJ(5) * t397 + t255 * t335 + t365 - t55;
t396 = t165 * t259;
t54 = t259 * t112 - t255 * t86;
t405 = -pkin(4) * t167 - qJ(5) * t396 - qJD(5) * t255 + t259 * t335 - t54;
t402 = t126 * t255;
t401 = t128 * t126;
t400 = t128 * t158;
t399 = t128 * t255;
t398 = t158 * t167;
t395 = t167 * t165;
t393 = t197 * t256;
t391 = t199 * t256;
t390 = t250 * t262;
t385 = t255 * t256;
t383 = t255 * t260;
t375 = t432 * pkin(1) + pkin(7) * t388;
t251 = t257 ^ 2;
t252 = t261 ^ 2;
t374 = t251 - t252;
t372 = qJD(2) * t257;
t358 = g(3) * t386;
t355 = t261 * t390;
t354 = t283 * t255;
t353 = t200 * pkin(2) + t375;
t351 = pkin(4) * t255 + pkin(8);
t347 = t253 * t372;
t342 = g(3) * t377;
t341 = pkin(1) * t450;
t338 = t253 * t360;
t336 = -pkin(1) * t258 + pkin(7) * t350;
t52 = -t255 * t93 + t259 * t91;
t286 = -t260 * t108 - t256 * t115 + t151 * t371 - t157 * t369;
t31 = pkin(9) * t280 - t286;
t323 = t257 * t294 - t261 * t314 + (t253 * t339 + t338) * pkin(7);
t109 = -pkin(2) * t293 + t323;
t36 = t88 * pkin(3) - pkin(9) * t441 + t109;
t5 = t255 * t36 + t259 * t31 + t76 * t366 - t79 * t367;
t332 = qJD(5) + t425;
t113 = -t256 * t181 + t182 * t260;
t330 = t261 * t302;
t329 = t158 * t259;
t327 = qJD(3) * t302;
t325 = t257 * t355;
t317 = t257 * t339;
t315 = -t198 * pkin(2) + t336;
t313 = -g(1) * t452 - g(2) * t100;
t101 = t146 * t259 + t199 * t255;
t312 = g(1) * t451 - g(2) * t101;
t310 = t253 * t262 * t404;
t306 = -g(1) * t141 + g(2) * t145;
t305 = -g(1) * t197 + g(2) * t199;
t304 = g(1) * t200 + g(2) * t198;
t92 = pkin(3) * t386 - t113;
t303 = t259 * t369 - t156;
t301 = -t255 * t42 - t259 * t41;
t248 = pkin(4) * t259 + pkin(3);
t300 = t248 * t260 - t254 * t256;
t297 = 0.2e1 * t331 + qJD(2);
t295 = pkin(8) * t199 + t353;
t185 = t253 * t291;
t63 = -t181 * t369 - t182 * t371 + t185 * t260 - t256 * t187;
t292 = g(1) * t432 + g(2) * t258;
t62 = -t181 * t371 + t182 * t369 + t256 * t185 + t260 * t187;
t58 = pkin(9) * t347 + t62;
t137 = qJD(3) * t196 + t253 * t345;
t68 = t137 * pkin(3) - t138 * pkin(9) + t188;
t15 = t255 * t68 + t259 * t58 + t91 * t366 - t93 * t367;
t78 = t302 * pkin(3) - t86;
t290 = -pkin(9) * t83 + t158 * t78;
t289 = t302 * t256;
t288 = -pkin(8) * t197 + t315;
t285 = -g(1) * (t199 * t383 + t200 * t259) - g(2) * (t197 * t383 + t198 * t259) - (-t255 * t380 + t257 * t259) * t448;
t284 = -g(1) * (-t199 * t381 + t200 * t255) - g(2) * (-t197 * t381 + t198 * t255) - g(3) * t169;
t282 = -g(1) * t146 - g(2) * t142 - g(3) * t196;
t277 = -t14 + t283;
t276 = t283 - t32;
t275 = g(1) * t199 + g(2) * t197 - t358;
t272 = t256 * t324 - t260 * t286 - t304;
t59 = -pkin(3) * t347 - t63;
t140 = t196 * t259 - t255 * t386;
t270 = g(1) * t101 + g(2) * t451 + g(3) * t140 - t5;
t6 = -qJD(4) * t42 - t255 * t31 + t259 * t36;
t16 = -t53 * qJD(4) - t255 * t58 + t259 * t68;
t268 = t6 + t437;
t263 = -t167 * t366 + t453 * t255 + t164;
t224 = t254 * t259;
t223 = t254 * t255;
t211 = t351 * t256;
t208 = t259 * t219;
t191 = t199 * pkin(2);
t189 = t197 * pkin(2);
t186 = t376 * qJD(1);
t176 = -pkin(8) * t383 + t208;
t149 = -qJ(5) * t385 + t177;
t134 = -qJ(5) * t382 + t208 + (-pkin(8) * t255 - pkin(4)) * t260;
t125 = t126 ^ 2;
t74 = -t196 * t367 + t255 * t347 + t259 * t442;
t73 = t196 * t366 + t255 * t442 - t259 * t347;
t65 = -pkin(4) * t397 + t87;
t64 = pkin(4) * t139 + t92;
t56 = t332 + t78;
t51 = -t125 + t435;
t50 = -t158 * t289 - t260 * t83;
t46 = t137 * t158 + t195 * t83;
t43 = -qJ(5) * t139 + t53;
t37 = pkin(4) * t195 - qJ(5) * t140 + t52;
t33 = pkin(4) * t73 + t59;
t29 = t263 + t400;
t28 = -t48 + t403;
t25 = -t128 * t167 + t158 * t329 + t413;
t24 = -t158 ^ 2 * t255 + t126 * t167 + t411;
t22 = t158 * t402 - t412;
t21 = t128 * t329 - t414;
t20 = t126 * t73 + t139 * t49;
t19 = t128 * t74 - t140 * t48;
t18 = t454 * t126 + t49 * t385;
t17 = -t48 * t382 + (-t256 * t367 + t303) * t128;
t13 = t260 * t49 + t455 * t158 + (t126 * t302 - t158 * t366 - t413) * t256;
t12 = t260 * t48 + t303 * t158 + (-t128 * t302 - t158 * t367 + t411) * t256;
t11 = t128 * t137 + t140 * t83 + t158 * t74 - t195 * t48;
t10 = -t126 * t137 - t139 * t83 - t158 * t73 - t195 * t49;
t9 = -qJ(5) * t73 - qJD(5) * t139 + t15;
t8 = pkin(4) * t137 - qJ(5) * t74 - qJD(5) * t140 + t16;
t7 = t445 * t259 + (-t49 - t400) * t255;
t4 = -t126 * t74 - t128 * t73 + t139 * t48 - t140 * t49;
t3 = t126 * t156 + t128 * t155 + (-t126 * t259 - t399) * t369 + (t414 - t412 + (-t128 * t259 + t402) * qJD(4)) * t256;
t2 = -qJD(5) * t126 - t420 + t5;
t1 = -qJD(5) * t128 + t421 + t434 + t6;
t30 = [0, 0, 0, 0, 0, qJDD(1), g(1) * t258 - g(2) * t432, t292, 0, 0, (qJDD(1) * t251 + 0.2e1 * t317) * t250, (t261 * t360 - t363 * t374) * t450, t257 * t440 + t297 * t346, (qJDD(1) * t252 - 0.2e1 * t317) * t250, t261 * t440 - t297 * t347, t293 * t404, -t188 * t298 + t203 * t293 - t323 * t404 + g(1) * t198 - g(2) * t200 + (-t340 + t362) * t341, -t130 * t404 - t187 * t298 - t287 * t341 - t293 * t376 + t305, ((-t183 * qJD(2) + qJDD(1) * t376 + t130) * t261 + (-qJD(2) * t186 - qJDD(1) * t203 + t323) * t257 - t292) * t253, t250 * qJDD(1) * pkin(1) ^ 2 - g(1) * t336 - g(2) * t375 + t130 * t376 - t183 * t188 + t186 * t187 - t203 * t323, t167 * t138 + t196 * t441, -t167 * t137 - t138 * t165 - t195 * t441 - t196 * t88, -t138 * t302 + t196 * t359 + ((qJD(1) * t196 + t167) * t372 - t441 * t261) * t253, t137 * t165 + t195 * t88, t137 * t302 - t195 * t359 + (t88 * t261 + (-qJD(1) * t195 - t165) * t372) * t253, (-t359 * t261 + (-t237 - t302) * t372) * t253, -t63 * t302 + t113 * t359 + t188 * t165 + t180 * t88 + t109 * t195 + t150 * t137 + g(1) * t142 - g(2) * t146 + (t324 * t261 + (qJD(1) * t113 + t86) * t372) * t253, t109 * t196 - t114 * t280 + t150 * t138 + t188 * t167 + t180 * t441 - t286 * t386 + t302 * t62 - t347 * t87 + t306, -t113 * t441 - t114 * t88 - t87 * t137 - t86 * t138 - t62 * t165 - t63 * t167 + t195 * t286 + t196 * t324 - t305, -g(1) * t288 - g(2) * t295 + t109 * t180 - t113 * t324 - t114 * t286 + t150 * t188 + t87 * t62 + t86 * t63, t19, t4, t11, t20, t10, t46, t126 * t59 + t137 * t41 + t139 * t32 + t158 * t16 + t195 * t6 + t49 * t92 + t52 * t83 + t73 * t78 + t312, t128 * t59 - t137 * t42 + t140 * t32 - t15 * t158 - t195 * t5 - t48 * t92 - t53 * t83 + t74 * t78 + t313, -t126 * t15 - t128 * t16 - t139 * t5 - t140 * t6 - t41 * t74 - t42 * t73 + t48 * t52 - t49 * t53 - t306, t5 * t53 + t42 * t15 + t6 * t52 + t41 * t16 + t32 * t92 + t78 * t59 - g(1) * (-pkin(3) * t142 - pkin(9) * t141 + t288) - g(2) * (pkin(3) * t146 + pkin(9) * t145 + t295), t19, t4, t11, t20, t10, t46, t1 * t195 + t126 * t33 + t137 * t23 + t139 * t14 + t158 * t8 + t37 * t83 + t49 * t64 + t56 * t73 + t312, t128 * t33 - t137 * t27 + t14 * t140 - t158 * t9 - t195 * t2 - t43 * t83 - t48 * t64 + t56 * t74 + t313, -t1 * t140 - t126 * t9 - t128 * t8 - t139 * t2 - t23 * t74 - t27 * t73 + t37 * t48 - t43 * t49 - t306, t2 * t43 + t27 * t9 + t1 * t37 + t23 * t8 + t14 * t64 + t56 * t33 - g(1) * (t141 * t254 - t142 * t248 - t197 * t351 + t315) - g(2) * (-t145 * t254 + t146 * t248 + t199 * t351 + t353); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t325, t374 * t390, -t261 * t310 + t338, t325, t257 * t310 + t236, t293, pkin(1) * t257 * t390 + t186 * t298 + t275 - t323, pkin(1) * t355 + t183 * t298 + (pkin(7) * t363 + g(3)) * t389 + t304 - t352, 0, 0, -t273 * t256 + (t256 * t269 - t444) * t260, t165 * t439 + t167 * t438 - t256 * t88 + t260 * t441, -t260 * t327 + t256 * t359 + (t260 * t330 + (-t167 + t364) * t257) * t373, -t165 * t289 - t410, t256 * t327 + t260 * t359 + (-t256 * t330 + (qJD(2) * t260 + t165) * t257) * t373, t302 * t348, -pkin(2) * t88 + t118 * t302 - t86 * t348 - t186 * t165 + (-t150 * t302 - t449) * t256 + (pkin(8) * t327 - t109 + t275) * t260, -t260 * t449 - pkin(2) * t441 - g(1) * t391 - g(2) * t393 - t186 * t167 + t348 * t87 - t443 * t302 + (t109 + t358) * t256 - t439 * t150, -g(3) * t389 + t272 + t438 * t87 + t439 * t86 + (t118 + t357) * t167 + t443 * t165 + (t256 * t441 - t410) * pkin(8), -t109 * pkin(2) - t87 * t119 - t86 * t118 - t150 * t186 + g(1) * t191 + g(2) * t189 - t342 + ((-t87 * t256 - t86 * t260) * qJD(3) + t272) * pkin(8), t17, t3, t12, t18, t13, t50, -t126 * t94 - t155 * t78 + t176 * t83 + t408 * t158 + (-t6 + (pkin(8) * t126 + t255 * t78) * qJD(3)) * t260 + (pkin(8) * t49 - t302 * t41 + t366 * t78 + t415) * t256 + t284, -t128 * t94 - t156 * t78 - t177 * t83 - t409 * t158 + (t5 + (pkin(8) * t128 + t259 * t78) * qJD(3)) * t260 + (-pkin(8) * t48 + t259 * t32 + t302 * t42 - t367 * t78) * t256 + t285, t155 * t42 + t156 * t41 + t176 * t48 - t177 * t49 - t408 * t128 - t409 * t126 + t301 * t369 + (-t255 * t5 - t259 * t6 + (t255 * t41 - t259 * t42) * qJD(4) + t275) * t256, t5 * t177 + t6 * t176 - t78 * t94 - g(1) * (-pkin(9) * t391 - t199 * t431 - t191) - g(2) * (-pkin(9) * t393 - t197 * t431 - t189) - g(3) * (t308 * t386 + t377) + t409 * t42 + t408 * t41 + (t32 * t256 + t369 * t78 - t304) * pkin(8), t17, t3, t12, t18, t13, t50, t134 * t83 - t155 * t56 + t211 * t49 + (qJD(3) * t255 * t56 - t1) * t260 + t423 * t158 + t407 * t126 + (-t23 * t302 + t366 * t56 + t419) * t256 + t284, -t149 * t83 - t156 * t56 - t211 * t48 + (t370 * t56 + t2) * t260 - t422 * t158 + t407 * t128 + (t14 * t259 + t27 * t302 - t367 * t56) * t256 + t285, t134 * t48 - t149 * t49 + t155 * t27 + t156 * t23 - t423 * t128 - t422 * t126 + (-t23 * t259 - t255 * t27) * t369 + (-t1 * t259 - t2 * t255 + (t23 * t255 - t259 * t27) * qJD(4) + t275) * t256, t2 * t149 + t1 * t134 + t14 * t211 - g(1) * (-t199 * t300 + t200 * t351 - t191) - g(2) * (-t197 * t300 + t198 * t351 - t189) - t342 + t407 * t56 + t422 * t27 - (pkin(4) * t384 + t261 * t300) * t448 + t423 * t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t395, -t165 ^ 2 + t167 ^ 2, -t165 * t302 + t441, -t395, -t444 - t88, t280, -t150 * t167 - t302 * t87 + t283 - t324, t150 * t165 - t302 * t86 - t282 + t286, 0, 0, t21, t7, t25, t22, t24, -t398, -pkin(3) * t49 - t126 * t87 - t158 * t54 - t167 * t41 + t290 * t255 + (-pkin(9) * qJD(4) * t158 + t276) * t259, pkin(3) * t48 - t128 * t87 + t167 * t42 + t415 + (pkin(9) * t367 + t55) * t158 + t290 * t259 - t354, t126 * t55 + t128 * t54 + (t5 - t417 + (-t49 + t368) * pkin(9)) * t259 + (-t6 - t416 + (qJD(4) * t126 - t48) * pkin(9)) * t255 + t282, -t41 * t54 - t42 * t55 - t78 * t87 + t276 * pkin(3) + (qJD(4) * t301 - t6 * t255 + t5 * t259 + t282) * pkin(9), t21, t7, t25, t22, t24, -t398, -t126 * t65 - t167 * t23 + t223 * t83 - t248 * t49 + t405 * t158 + (t165 * t56 + (t56 + t425) * qJD(4)) * t255 + t277 * t259, t56 * t396 - t128 * t65 + t419 + t167 * t27 + t224 * t83 + t248 * t48 - t406 * t158 + (pkin(4) * t399 + t259 * t56) * qJD(4) - t354, t223 * t48 + t224 * t49 - t405 * t128 - t406 * t126 + (-t158 * t23 + t2) * t259 + (-t1 - t418) * t255 + t282, -t2 * t224 + t1 * t223 - t14 * t248 - g(1) * (-t145 * t248 - t146 * t254) - g(2) * (-t141 * t248 - t142 * t254) - g(3) * (-t195 * t248 - t196 * t254) + (pkin(4) * t367 - t65) * t56 + t406 * t27 + t405 * t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t401, t51, t28, -t401, t29, t83, -t128 * t78 + t268 + t416, t126 * t78 + t270 + t417, 0, 0, t401, t51, t28, -t401, t29, t83, 0.2e1 * t434 + t421 + t418 + (-t332 - t56) * t128 + t268, -pkin(4) * t435 + t420 + t158 * t26 + (qJD(5) + t56) * t126 + t270, pkin(4) * t48 - t424 * t126, t424 * t27 + (-t56 * t128 + t1 + t437) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t263 + t400, t445, -t125 - t435, t27 * t126 + t23 * t128 - t277;];
tau_reg = t30;
