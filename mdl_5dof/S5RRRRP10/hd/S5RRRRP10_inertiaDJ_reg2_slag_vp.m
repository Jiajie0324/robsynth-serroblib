% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S5RRRRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d4]';
% 
% Output:
% MMD_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:13
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S5RRRRP10_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP10_inertiaDJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP10_inertiaDJ_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRP10_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:12:21
% EndTime: 2019-12-31 22:12:34
% DurationCPUTime: 4.42s
% Computational Cost: add. (4074->368), mult. (11442->677), div. (0->0), fcn. (10426->8), ass. (0->200)
t119 = sin(qJ(3));
t122 = cos(qJ(3));
t117 = sin(pkin(5));
t120 = sin(qJ(2));
t214 = t117 * t120;
t215 = cos(pkin(5));
t142 = t119 * t215 + t122 * t214;
t123 = cos(qJ(2));
t185 = pkin(1) * t215;
t139 = pkin(7) * t214 - t123 * t185;
t72 = -pkin(2) * t215 + t139;
t76 = t119 * t214 - t122 * t215;
t129 = t76 * pkin(3) - pkin(9) * t142 + t72;
t205 = qJD(2) * t120;
t174 = t117 * t205;
t213 = t117 * t123;
t84 = pkin(7) * t213 + t120 * t185;
t132 = pkin(8) * t215 + t84;
t130 = qJD(3) * t132;
t161 = pkin(2) * t120 - pkin(8) * t123;
t206 = qJD(2) * t117;
t144 = t161 * t206;
t136 = t139 * qJD(2);
t146 = (-pkin(2) * t123 - pkin(8) * t120 - pkin(1)) * t117;
t243 = -qJD(3) * t146 + t136;
t25 = t243 * t122 + (t130 - t144) * t119;
t244 = -pkin(9) * t174 - qJD(4) * t129 + t25;
t242 = -0.4e1 * t119;
t118 = sin(qJ(4));
t113 = t118 ^ 2;
t121 = cos(qJ(4));
t115 = t121 ^ 2;
t208 = t113 - t115;
t168 = t215 * qJD(3);
t204 = qJD(2) * t123;
t173 = t117 * t204;
t183 = qJD(3) * t214;
t91 = t119 * t183;
t239 = -t122 * (t168 + t173) + t91;
t241 = -qJD(4) * t213 - t239;
t240 = qJD(4) * t142 - t174;
t111 = qJD(3) * t119;
t137 = t142 * qJD(3);
t52 = t119 * t173 + t137;
t43 = t76 * t111 - t52 * t122;
t238 = t119 * qJD(5) + (pkin(8) * qJD(4) + qJ(5) * qJD(3)) * t122;
t116 = t122 ^ 2;
t237 = 0.2e1 * qJD(4);
t236 = t52 * pkin(4);
t53 = t118 * t142 + t121 * t213;
t235 = t53 * pkin(4);
t234 = pkin(4) * t121;
t233 = pkin(8) * t117;
t232 = pkin(8) * t118;
t231 = -qJ(5) - pkin(9);
t47 = t119 * t146 + t122 * t132;
t40 = -pkin(9) * t213 + t47;
t18 = t118 * t129 + t121 * t40;
t160 = -pkin(3) * t122 - pkin(9) * t119;
t151 = -pkin(2) + t160;
t145 = qJD(4) * t151;
t159 = pkin(3) * t119 - pkin(9) * t122;
t147 = t159 * qJD(3);
t230 = -t118 * t147 - t121 * t145;
t194 = t119 * t243 - t122 * t130;
t24 = (-t120 * pkin(3) - t122 * t161) * t206 - t194;
t32 = t118 * t241 + t121 * t240;
t10 = t32 * pkin(4) + t24;
t229 = t10 * t118;
t228 = t10 * t121;
t33 = -t118 * t240 + t121 * t241;
t227 = t118 * t33;
t226 = t118 * t53;
t54 = -t118 * t213 + t121 * t142;
t225 = t118 * t54;
t201 = qJD(3) * t122;
t190 = pkin(8) * t201;
t110 = qJD(4) * t121;
t176 = t119 * t110;
t79 = t118 * t201 + t176;
t67 = pkin(4) * t79 + t190;
t224 = t118 * t67;
t96 = t231 * t118;
t223 = t119 * t96;
t97 = t231 * t121;
t222 = t119 * t97;
t221 = t121 * t32;
t220 = t121 * t33;
t219 = t121 * t54;
t218 = t121 * t67;
t182 = t118 * t111;
t216 = pkin(8) * t182 + t121 * t147;
t209 = t121 * t122;
t106 = pkin(8) * t209;
t70 = t118 * t151 + t106;
t212 = t118 * t119;
t211 = t118 * t122;
t210 = t119 * t121;
t114 = t119 ^ 2;
t207 = t114 - t116;
t203 = qJD(3) * t118;
t202 = qJD(3) * t121;
t200 = qJD(3) * t123;
t199 = qJD(4) * t118;
t198 = qJD(4) * t119;
t197 = qJD(4) * t122;
t48 = 0.2e1 * t76 * t52;
t195 = -0.2e1 * pkin(2) * qJD(3);
t193 = pkin(8) * t211;
t192 = -0.2e1 * t199;
t191 = pkin(4) * t111;
t189 = pkin(4) * t199;
t46 = -t119 * t132 + t122 * t146;
t39 = pkin(3) * t213 - t46;
t27 = t39 + t235;
t188 = t27 * t199;
t89 = (pkin(4) * t118 + pkin(8)) * t119;
t187 = t89 * t199;
t112 = t117 ^ 2;
t184 = t112 * t204;
t181 = t119 * t200;
t180 = t121 * t201;
t178 = t118 * t198;
t177 = t118 * t197;
t175 = t121 * t197;
t172 = t118 * t110;
t171 = t119 * t201;
t108 = -pkin(3) - t234;
t170 = -t108 + t234;
t17 = -t118 * t40 + t121 * t129;
t169 = qJD(2) * t215;
t167 = t207 * qJD(3);
t166 = 0.2e1 * t171;
t165 = t114 * t172;
t164 = t120 * t184;
t163 = t118 * t180;
t162 = t120 * t169;
t158 = pkin(4) * t113 + t108 * t121;
t11 = pkin(4) * t76 - qJ(5) * t54 + t17;
t16 = -qJ(5) * t53 + t18;
t157 = -t11 * t121 - t118 * t16;
t156 = -t118 * t18 - t121 * t17;
t155 = -t121 * t53 - t225;
t87 = t121 * t151;
t69 = t87 - t193;
t154 = -t118 * t70 - t121 * t69;
t26 = t122 * t144 + t194;
t153 = -t26 * t119 - t25 * t122;
t150 = t110 * t39 + t118 * t24;
t149 = -t121 * t24 + t199 * t39;
t42 = t110 * t76 + t118 * t52;
t148 = -t121 * t52 + t199 * t76;
t126 = pkin(1) * t162 + t52 * pkin(3) + pkin(7) * t173 + pkin(9) * t239;
t4 = -t118 * t126 + t121 * t244 + t40 * t199;
t143 = t119 * t205 - t122 * t200;
t77 = -t178 + t180;
t78 = t119 * t202 + t177;
t5 = -t40 * t110 + t118 * t244 + t121 * t126;
t133 = qJD(4) * t156 - t118 * t5 - t121 * t4;
t44 = pkin(8) * t78 + t230;
t45 = -qJD(4) * t70 + t216;
t131 = qJD(4) * t154 - t118 * t45 - t121 * t44;
t128 = qJ(5) * t178 - t118 * t145 - t121 * t238 + t216;
t124 = -t33 * qJ(5) - t54 * qJD(5) + t5;
t103 = -0.2e1 * t171;
t102 = -0.2e1 * t172;
t101 = 0.2e1 * t172;
t90 = -0.2e1 * t164;
t88 = -0.2e1 * t208 * qJD(4);
t80 = -t175 + t182;
t75 = -t118 * qJD(5) + t110 * t231;
t74 = -qJD(5) * t121 - t199 * t231;
t73 = qJD(2) * t84;
t63 = 0.2e1 * t115 * t171 - 0.2e1 * t165;
t62 = 0.2e1 * t113 * t171 + 0.2e1 * t165;
t59 = t198 * t208 - t163;
t58 = t172 * t242 - t201 * t208;
t57 = -0.2e1 * t118 * t167 + 0.2e1 * t119 * t175;
t56 = 0.2e1 * t119 * t177 + 0.2e1 * t202 * t207;
t55 = -qJ(5) * t212 + t70;
t51 = t114 * t208 * t237 + t163 * t242;
t49 = -qJ(5) * t210 + t87 + (-pkin(4) - t232) * t122;
t34 = (pkin(8) * qJD(3) + qJ(5) * qJD(4)) * t210 + t238 * t118 + t230;
t30 = t128 + t191;
t22 = 0.2e1 * t54 * t33;
t21 = 0.2e1 * t53 * t32;
t20 = t110 * t54 + t227;
t19 = t199 * t53 - t221;
t15 = 0.2e1 * t33 * t76 + 0.2e1 * t52 * t54;
t14 = -0.2e1 * t32 * t76 - 0.2e1 * t52 * t53;
t13 = t54 * t180 + (-t199 * t54 + t220) * t119;
t12 = t53 * t176 + (t119 * t32 + t201 * t53) * t118;
t9 = (-t203 * t76 + t32) * t122 + (-qJD(3) * t53 - t42) * t119;
t8 = (t202 * t76 - t33) * t122 + (qJD(3) * t54 - t148) * t119;
t7 = -0.2e1 * t32 * t54 - 0.2e1 * t33 * t53;
t6 = qJD(4) * t155 - t118 * t32 + t220;
t3 = t155 * t201 + (-t227 - t221 + (-t219 + t226) * qJD(4)) * t119;
t2 = qJ(5) * t32 + qJD(5) * t53 + t4;
t1 = t124 + t236;
t23 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t164, 0.2e1 * (-t120 ^ 2 + t123 ^ 2) * t112 * qJD(2), 0.2e1 * t169 * t213, t90, -0.2e1 * t117 * t162, 0, -0.2e1 * pkin(1) * t112 * t205 - 0.2e1 * t215 * t73, -0.2e1 * pkin(1) * t184 + 0.2e1 * t136 * t215, -0.2e1 * t136 * t213 + 0.2e1 * t139 * t173 - 0.2e1 * t174 * t84 + 0.2e1 * t214 * t73, -0.2e1 * t136 * t84 + 0.2e1 * t139 * t73, -0.2e1 * t142 * t239, -0.2e1 * t142 * t52 + 0.2e1 * t239 * t76, 0.2e1 * t142 * t174 + 0.2e1 * t213 * t239, t48, 0.2e1 * (t123 * t52 - t205 * t76) * t117, t90, 0.2e1 * t72 * t52 + 0.2e1 * t73 * t76 + 0.2e1 * (-t123 * t26 + t205 * t46) * t117, 0.2e1 * t142 * t73 - 0.2e1 * t174 * t47 - 0.2e1 * t213 * t25 - 0.2e1 * t239 * t72, -0.2e1 * t142 * t26 + 0.2e1 * t239 * t46 + 0.2e1 * t25 * t76 - 0.2e1 * t47 * t52, -0.2e1 * t25 * t47 + 0.2e1 * t26 * t46 + 0.2e1 * t72 * t73, t22, t7, t15, t21, t14, t48, 0.2e1 * t17 * t52 + 0.2e1 * t24 * t53 + 0.2e1 * t32 * t39 + 0.2e1 * t5 * t76, -0.2e1 * t18 * t52 + 0.2e1 * t24 * t54 + 0.2e1 * t33 * t39 + 0.2e1 * t4 * t76, -0.2e1 * t17 * t33 - 0.2e1 * t18 * t32 + 0.2e1 * t4 * t53 - 0.2e1 * t5 * t54, 0.2e1 * t17 * t5 - 0.2e1 * t18 * t4 + 0.2e1 * t24 * t39, t22, t7, t15, t21, t14, t48, 0.2e1 * t1 * t76 + 0.2e1 * t10 * t53 + 0.2e1 * t11 * t52 + 0.2e1 * t27 * t32, 0.2e1 * t10 * t54 - 0.2e1 * t16 * t52 + 0.2e1 * t2 * t76 + 0.2e1 * t27 * t33, -0.2e1 * t1 * t54 - 0.2e1 * t11 * t33 - 0.2e1 * t16 * t32 + 0.2e1 * t2 * t53, 0.2e1 * t1 * t11 + 0.2e1 * t10 * t27 - 0.2e1 * t16 * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t173, 0, -t174, 0, -t73, t136, 0, 0, t116 * t183 + (-t91 + (0.2e1 * t168 + t173) * t122) * t119, -t122 * t239 - t76 * t201 + (-t137 - t52) * t119, t143 * t117, t43, (t122 * t205 + t181) * t117, 0, -pkin(2) * t52 + t111 * t72 - t73 * t122 - t143 * t233, -pkin(8) * t122 * t174 + pkin(2) * t239 + t73 * t119 - t181 * t233 + t201 * t72, -t47 * t111 + t142 * t190 - t46 * t201 + t153 + (-t119 * t239 + t43) * pkin(8), -pkin(2) * t73 + ((-t119 * t47 - t122 * t46) * qJD(3) + t153) * pkin(8), t13, t3, t8, t12, t9, t43, t45 * t76 + t52 * t69 + (-t5 + (pkin(8) * t53 + t118 * t39) * qJD(3)) * t122 + (pkin(8) * t32 + qJD(3) * t17 + t150) * t119, t44 * t76 - t52 * t70 + (-t4 + (pkin(8) * t54 + t121 * t39) * qJD(3)) * t122 + (pkin(8) * t33 - qJD(3) * t18 - t149) * t119, -t32 * t70 - t33 * t69 + t44 * t53 - t45 * t54 + t156 * t201 + (t118 * t4 - t121 * t5 + (t118 * t17 - t121 * t18) * qJD(4)) * t119, t17 * t45 - t18 * t44 - t4 * t70 + t5 * t69 + (t119 * t24 + t201 * t39) * pkin(8), t13, t3, t8, t12, t9, t43, t30 * t76 + t32 * t89 + t49 * t52 + t53 * t67 + (t203 * t27 - t1) * t122 + (qJD(3) * t11 + t110 * t27 + t229) * t119, t33 * t89 + t34 * t76 - t52 * t55 + t54 * t67 + (t202 * t27 - t2) * t122 + (-qJD(3) * t16 - t188 + t228) * t119, -t30 * t54 - t32 * t55 - t33 * t49 + t34 * t53 + t157 * t201 + (-t1 * t121 + t118 * t2 + (t11 * t118 - t121 * t16) * qJD(4)) * t119, t1 * t49 + t10 * t89 + t11 * t30 - t16 * t34 - t2 * t55 + t27 * t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t166, -0.2e1 * t167, 0, t103, 0, 0, t119 * t195, t122 * t195, 0, 0, t63, t51, t56, t62, t57, t103, 0.2e1 * t69 * t111 - 0.2e1 * t122 * t45 + 0.2e1 * (t110 * t114 + t118 * t166) * pkin(8), -0.2e1 * t70 * t111 - 0.2e1 * t122 * t44 + 0.2e1 * (-t114 * t199 + t121 * t166) * pkin(8), 0.2e1 * t154 * t201 + 0.2e1 * (t118 * t44 - t121 * t45 + (t118 * t69 - t121 * t70) * qJD(4)) * t119, 0.2e1 * pkin(8) ^ 2 * t171 - 0.2e1 * t44 * t70 + 0.2e1 * t45 * t69, t63, t51, t56, t62, t57, t103, 0.2e1 * (t203 * t89 - t30) * t122 + 0.2e1 * (qJD(3) * t49 + t110 * t89 + t224) * t119, 0.2e1 * (t202 * t89 - t34) * t122 + 0.2e1 * (-qJD(3) * t55 - t187 + t218) * t119, 0.2e1 * (-t118 * t55 - t121 * t49) * t201 + 0.2e1 * (t118 * t34 - t121 * t30 + (t118 * t49 - t121 * t55) * qJD(4)) * t119, 0.2e1 * t30 * t49 - 0.2e1 * t34 * t55 + 0.2e1 * t67 * t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t239, 0, -t52, t174, t26, t25, 0, 0, t20, t6, t42, t19, -t148, 0, -pkin(3) * t32 - pkin(9) * t42 + t149, -pkin(3) * t33 + pkin(9) * t148 + t150, (t227 - t221 + (t219 + t226) * qJD(4)) * pkin(9) + t133, -pkin(3) * t24 + pkin(9) * t133, t20, t6, t42, t19, -t148, 0, -t228 + t108 * t32 + t52 * t96 + t75 * t76 + (t27 + t235) * t199, t229 + t108 * t33 + t52 * t97 + t74 * t76 + (pkin(4) * t225 + t121 * t27) * qJD(4), qJD(4) * t157 - t1 * t118 - t121 * t2 + t32 * t97 - t33 * t96 + t53 * t74 - t54 * t75, pkin(4) * t188 + t1 * t96 + t10 * t108 + t11 * t75 - t16 * t74 + t2 * t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t201, 0, -t111, 0, -t190, pkin(8) * t111, 0, 0, -t59, t58, t80, t59, t78, 0, (pkin(9) * t209 + (-pkin(3) * t121 + t232) * t119) * qJD(4) + (t118 * t160 - t106) * qJD(3), (pkin(8) * t210 + t118 * t159) * qJD(4) + (t121 * t160 + t193) * qJD(3), t131, -pkin(3) * t190 + pkin(9) * t131, -t59, t58, t80, t59, t78, 0, -t218 - t122 * t75 + (t108 * t211 + t223) * qJD(3) + (t118 * t89 + t119 * t158) * qJD(4), t224 - t122 * t74 + (t108 * t209 + t222) * qJD(3) + (t121 * t89 + t170 * t212) * qJD(4), (-t96 * t201 - t119 * t75 - t34 + (-t49 + t222) * qJD(4)) * t121 + (t97 * t201 + t119 * t74 - t30 + (-t55 + t223) * qJD(4)) * t118, pkin(4) * t187 + t108 * t67 + t30 * t96 + t34 * t97 + t49 * t75 - t55 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101, t88, 0, t102, 0, 0, pkin(3) * t192, -0.2e1 * pkin(3) * t110, 0, 0, t101, t88, 0, t102, 0, 0, t170 * t192, t158 * t237, -0.2e1 * t118 * t75 - 0.2e1 * t121 * t74 + 0.2e1 * (t118 * t97 - t121 * t96) * qJD(4), 0.2e1 * t108 * t189 + 0.2e1 * t74 * t97 + 0.2e1 * t75 * t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, 0, -t32, t52, t5, t4, 0, 0, 0, 0, t33, 0, -t32, t52, t124 + 0.2e1 * t236, t2, -t33 * pkin(4), t1 * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, 0, -t79, t111, t45, t44, 0, 0, 0, 0, t77, 0, -t79, t111, t128 + 0.2e1 * t191, t34, -t77 * pkin(4), t30 * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t110, 0, -t199, 0, -pkin(9) * t110, pkin(9) * t199, 0, 0, 0, 0, t110, 0, -t199, 0, t75, t74, -pkin(4) * t110, t75 * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t32, t33, 0, t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, t77, 0, t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t199, t110, 0, t189; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t23;
