% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRRP10
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:13
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRRP10_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP10_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP10_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP10_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP10_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRP10_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:13:24
% EndTime: 2019-12-31 22:13:27
% DurationCPUTime: 3.93s
% Computational Cost: add. (23205->239), mult. (50407->350), div. (0->0), fcn. (39713->10), ass. (0->198)
t1713 = sin(pkin(5));
t1721 = cos(qJ(2));
t1756 = qJDD(1) * t1721;
t1717 = sin(qJ(2));
t1766 = qJD(1) * t1717;
t1776 = (qJD(2) * t1766 - t1756) * t1713;
t1728 = qJDD(3) + t1776;
t1760 = t1713 * t1721;
t1754 = qJD(1) * t1760;
t1749 = -qJD(3) + t1754;
t1748 = t1749 ^ 2;
t1714 = cos(pkin(5));
t1708 = t1714 * qJD(1) + qJD(2);
t1716 = sin(qJ(3));
t1720 = cos(qJ(3));
t1761 = t1713 * t1717;
t1755 = qJD(1) * t1761;
t1681 = -t1720 * t1708 + t1716 * t1755;
t1679 = qJD(4) + t1681;
t1775 = qJD(4) + t1679;
t1757 = qJDD(1) * t1713;
t1690 = qJD(2) * t1754 + t1717 * t1757;
t1707 = t1714 * qJDD(1) + qJDD(2);
t1734 = t1720 * t1690 + t1716 * t1707;
t1658 = -t1681 * qJD(3) + t1734;
t1647 = t1681 * t1749 + t1658;
t1683 = t1716 * t1708 + t1720 * t1755;
t1715 = sin(qJ(4));
t1719 = cos(qJ(4));
t1667 = t1715 * t1683 + t1719 * t1749;
t1774 = t1667 ^ 2;
t1669 = t1719 * t1683 - t1715 * t1749;
t1773 = t1669 ^ 2;
t1772 = t1679 ^ 2;
t1771 = t1681 ^ 2;
t1770 = t1683 ^ 2;
t1769 = t1708 ^ 2;
t1768 = -2 * qJD(5);
t1767 = t1714 * g(3);
t1765 = qJD(1) * t1721;
t1764 = t1669 * t1667;
t1763 = t1683 * t1681;
t1723 = qJD(1) ^ 2;
t1762 = t1713 ^ 2 * t1723;
t1759 = qJD(4) - t1679;
t1689 = (-t1721 * pkin(2) - pkin(8) * t1717) * t1713 * qJD(1);
t1718 = sin(qJ(1));
t1722 = cos(qJ(1));
t1702 = -t1722 * g(1) - t1718 * g(2);
t1686 = -t1723 * pkin(1) + pkin(7) * t1757 + t1702;
t1701 = t1718 * g(1) - t1722 * g(2);
t1727 = t1723 * t1713 * pkin(7) + qJDD(1) * pkin(1) + t1701;
t1726 = t1714 * t1727;
t1758 = t1721 * t1686 + t1717 * t1726;
t1642 = -t1769 * pkin(2) + t1707 * pkin(8) + (-g(3) * t1717 + t1689 * t1765) * t1713 + t1758;
t1724 = -t1690 * pkin(8) - t1767 + (-t1708 * pkin(8) * t1765 + (-t1756 + (qJD(2) + t1708) * t1766) * pkin(2) - t1727) * t1713;
t1617 = t1720 * t1642 + t1716 * t1724;
t1663 = t1681 * pkin(3) - t1683 * pkin(9);
t1605 = -t1748 * pkin(3) + t1728 * pkin(9) - t1681 * t1663 + t1617;
t1752 = t1717 * t1686 - t1721 * t1726;
t1641 = -t1707 * pkin(2) - t1769 * pkin(8) + (t1721 * g(3) + t1689 * t1766) * t1713 + t1752;
t1751 = t1716 * t1690 - t1720 * t1707;
t1645 = (0.2e1 * qJD(3) - t1754) * t1683 + t1751;
t1608 = t1645 * pkin(3) - t1647 * pkin(9) + t1641;
t1584 = t1719 * t1605 + t1715 * t1608;
t1583 = -t1715 * t1605 + t1719 * t1608;
t1616 = -t1716 * t1642 + t1720 * t1724;
t1753 = t1715 * t1658 - t1719 * t1728;
t1750 = t1708 * t1754;
t1725 = -t1719 * t1658 - t1715 * t1728;
t1621 = t1759 * t1667 + t1725;
t1731 = -t1683 * qJD(3) - qJDD(4) - t1751;
t1626 = -t1731 - t1764;
t1576 = t1626 * pkin(4) + t1621 * qJ(5) + t1669 * t1768 + t1583;
t1654 = t1679 * pkin(4) - t1669 * qJ(5);
t1733 = -t1669 * qJD(4) - t1753;
t1580 = -t1679 * t1654 + t1733 * qJ(5) + (-pkin(4) * t1667 + t1768) * t1667 + t1584;
t1561 = -t1715 * t1576 + t1719 * t1580;
t1604 = -t1728 * pkin(3) - t1748 * pkin(9) + t1683 * t1663 - t1616;
t1585 = -t1733 * pkin(4) - t1774 * qJ(5) + t1669 * t1654 + qJDD(5) + t1604;
t1557 = t1720 * t1561 + t1716 * t1585;
t1560 = t1719 * t1576 + t1715 * t1580;
t1747 = t1557 * t1717 - t1560 * t1721;
t1571 = -t1715 * t1583 + t1719 * t1584;
t1567 = t1720 * t1571 + t1716 * t1604;
t1570 = t1719 * t1583 + t1715 * t1584;
t1746 = t1567 * t1717 - t1570 * t1721;
t1619 = -t1759 * t1669 - t1753;
t1598 = t1719 * t1619 - t1715 * t1621;
t1631 = -t1773 - t1774;
t1588 = t1720 * t1598 + t1716 * t1631;
t1597 = t1715 * t1619 + t1719 * t1621;
t1745 = t1588 * t1717 - t1597 * t1721;
t1635 = -t1772 - t1774;
t1611 = -t1715 * t1626 + t1719 * t1635;
t1618 = t1775 * t1669 + t1753;
t1592 = t1720 * t1611 + t1716 * t1618;
t1610 = t1719 * t1626 + t1715 * t1635;
t1744 = t1592 * t1717 - t1610 * t1721;
t1627 = t1731 - t1764;
t1649 = -t1772 - t1773;
t1613 = t1719 * t1627 - t1715 * t1649;
t1620 = -t1775 * t1667 - t1725;
t1594 = t1720 * t1613 + t1716 * t1620;
t1612 = t1715 * t1627 + t1719 * t1649;
t1743 = t1594 * t1717 - t1612 * t1721;
t1596 = -t1716 * t1616 + t1720 * t1617;
t1742 = t1596 * t1717 - t1641 * t1721;
t1646 = -t1683 * t1754 - t1751;
t1648 = t1681 * t1754 - t1734;
t1623 = t1720 * t1646 - t1716 * t1648;
t1653 = -t1770 - t1771;
t1741 = t1623 * t1717 - t1653 * t1721;
t1656 = t1728 - t1763;
t1659 = -t1748 - t1771;
t1629 = -t1716 * t1656 + t1720 * t1659;
t1740 = t1629 * t1717 - t1645 * t1721;
t1655 = -t1763 - t1728;
t1664 = -t1770 - t1748;
t1634 = t1720 * t1655 - t1716 * t1664;
t1739 = t1634 * t1717 - t1647 * t1721;
t1660 = -g(3) * t1760 - t1752;
t1661 = -g(3) * t1761 + t1758;
t1738 = t1660 * t1721 + t1661 * t1717;
t1671 = t1750 - t1690;
t1693 = t1708 * t1755;
t1672 = t1693 - t1776;
t1737 = t1671 * t1721 + t1672 * t1717;
t1711 = t1717 ^ 2;
t1678 = -t1711 * t1762 - t1769;
t1700 = t1721 * t1717 * t1762;
t1688 = t1700 - t1707;
t1736 = t1678 * t1721 + t1688 * t1717;
t1687 = t1700 + t1707;
t1712 = t1721 ^ 2;
t1691 = -t1712 * t1762 - t1769;
t1735 = t1687 * t1721 + t1691 * t1717;
t1699 = -t1718 * qJDD(1) - t1722 * t1723;
t1698 = t1722 * qJDD(1) - t1718 * t1723;
t1692 = (-t1711 - t1712) * t1762;
t1675 = -t1713 * t1727 - t1767;
t1673 = t1693 + t1776;
t1670 = t1750 + t1690;
t1665 = -t1717 * t1687 + t1721 * t1691;
t1662 = -t1717 * t1678 + t1721 * t1688;
t1652 = -t1717 * t1671 + t1721 * t1672;
t1651 = -t1713 * t1673 + t1735 * t1714;
t1650 = t1714 * t1673 + t1735 * t1713;
t1644 = -t1713 * t1670 + t1736 * t1714;
t1643 = t1714 * t1670 + t1736 * t1713;
t1640 = -t1713 * t1692 + t1737 * t1714;
t1639 = t1714 * t1692 + t1737 * t1713;
t1633 = t1716 * t1655 + t1720 * t1664;
t1632 = -t1717 * t1660 + t1721 * t1661;
t1628 = t1720 * t1656 + t1716 * t1659;
t1625 = -t1713 * t1675 + t1738 * t1714;
t1624 = t1714 * t1675 + t1738 * t1713;
t1622 = t1716 * t1646 + t1720 * t1648;
t1615 = t1721 * t1634 + t1717 * t1647;
t1614 = t1721 * t1629 + t1717 * t1645;
t1609 = t1721 * t1623 + t1717 * t1653;
t1602 = -t1713 * t1633 + t1739 * t1714;
t1601 = t1714 * t1633 + t1739 * t1713;
t1600 = -t1713 * t1628 + t1740 * t1714;
t1599 = t1714 * t1628 + t1740 * t1713;
t1595 = t1720 * t1616 + t1716 * t1617;
t1593 = t1716 * t1613 - t1720 * t1620;
t1591 = t1716 * t1611 - t1720 * t1618;
t1590 = -t1713 * t1622 + t1741 * t1714;
t1589 = t1714 * t1622 + t1741 * t1713;
t1587 = t1716 * t1598 - t1720 * t1631;
t1586 = t1721 * t1596 + t1717 * t1641;
t1582 = t1721 * t1594 + t1717 * t1612;
t1581 = t1721 * t1592 + t1717 * t1610;
t1579 = t1721 * t1588 + t1717 * t1597;
t1578 = -t1713 * t1595 + t1742 * t1714;
t1577 = t1714 * t1595 + t1742 * t1713;
t1575 = -t1713 * t1593 + t1743 * t1714;
t1574 = t1714 * t1593 + t1743 * t1713;
t1573 = -t1713 * t1591 + t1744 * t1714;
t1572 = t1714 * t1591 + t1744 * t1713;
t1569 = -t1713 * t1587 + t1745 * t1714;
t1568 = t1714 * t1587 + t1745 * t1713;
t1566 = t1716 * t1571 - t1720 * t1604;
t1565 = -t1718 * t1575 + t1722 * t1582;
t1564 = t1722 * t1575 + t1718 * t1582;
t1563 = -t1718 * t1573 + t1722 * t1581;
t1562 = t1722 * t1573 + t1718 * t1581;
t1559 = -t1718 * t1569 + t1722 * t1579;
t1558 = t1722 * t1569 + t1718 * t1579;
t1556 = t1716 * t1561 - t1720 * t1585;
t1555 = t1721 * t1567 + t1717 * t1570;
t1554 = -t1713 * t1566 + t1746 * t1714;
t1553 = t1714 * t1566 + t1746 * t1713;
t1552 = t1721 * t1557 + t1717 * t1560;
t1551 = -t1713 * t1556 + t1747 * t1714;
t1550 = t1714 * t1556 + t1747 * t1713;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1699, -t1698, 0, -t1718 * t1701 + t1722 * t1702, 0, 0, 0, 0, 0, 0, -t1718 * t1651 + t1722 * t1665, -t1718 * t1644 + t1722 * t1662, -t1718 * t1640 + t1722 * t1652, -t1718 * t1625 + t1722 * t1632, 0, 0, 0, 0, 0, 0, -t1718 * t1600 + t1722 * t1614, -t1718 * t1602 + t1722 * t1615, -t1718 * t1590 + t1722 * t1609, -t1718 * t1578 + t1722 * t1586, 0, 0, 0, 0, 0, 0, t1563, t1565, t1559, -t1718 * t1554 + t1722 * t1555, 0, 0, 0, 0, 0, 0, t1563, t1565, t1559, -t1718 * t1551 + t1722 * t1552; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1698, t1699, 0, t1722 * t1701 + t1718 * t1702, 0, 0, 0, 0, 0, 0, t1722 * t1651 + t1718 * t1665, t1722 * t1644 + t1718 * t1662, t1722 * t1640 + t1718 * t1652, t1722 * t1625 + t1718 * t1632, 0, 0, 0, 0, 0, 0, t1722 * t1600 + t1718 * t1614, t1722 * t1602 + t1718 * t1615, t1722 * t1590 + t1718 * t1609, t1722 * t1578 + t1718 * t1586, 0, 0, 0, 0, 0, 0, t1562, t1564, t1558, t1722 * t1554 + t1718 * t1555, 0, 0, 0, 0, 0, 0, t1562, t1564, t1558, t1722 * t1551 + t1718 * t1552; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1650, t1643, t1639, t1624, 0, 0, 0, 0, 0, 0, t1599, t1601, t1589, t1577, 0, 0, 0, 0, 0, 0, t1572, t1574, t1568, t1553, 0, 0, 0, 0, 0, 0, t1572, t1574, t1568, t1550; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1723, -qJDD(1), 0, t1702, 0, 0, 0, 0, 0, 0, t1665, t1662, t1652, t1632, 0, 0, 0, 0, 0, 0, t1614, t1615, t1609, t1586, 0, 0, 0, 0, 0, 0, t1581, t1582, t1579, t1555, 0, 0, 0, 0, 0, 0, t1581, t1582, t1579, t1552; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1723, 0, t1701, 0, 0, 0, 0, 0, 0, t1651, t1644, t1640, t1625, 0, 0, 0, 0, 0, 0, t1600, t1602, t1590, t1578, 0, 0, 0, 0, 0, 0, t1573, t1575, t1569, t1554, 0, 0, 0, 0, 0, 0, t1573, t1575, t1569, t1551; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1650, t1643, t1639, t1624, 0, 0, 0, 0, 0, 0, t1599, t1601, t1589, t1577, 0, 0, 0, 0, 0, 0, t1572, t1574, t1568, t1553, 0, 0, 0, 0, 0, 0, t1572, t1574, t1568, t1550; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1691, t1688, t1672, t1661, 0, 0, 0, 0, 0, 0, t1629, t1634, t1623, t1596, 0, 0, 0, 0, 0, 0, t1592, t1594, t1588, t1567, 0, 0, 0, 0, 0, 0, t1592, t1594, t1588, t1557; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1687, t1678, t1671, t1660, 0, 0, 0, 0, 0, 0, -t1645, -t1647, -t1653, -t1641, 0, 0, 0, 0, 0, 0, -t1610, -t1612, -t1597, -t1570, 0, 0, 0, 0, 0, 0, -t1610, -t1612, -t1597, -t1560; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1673, t1670, t1692, t1675, 0, 0, 0, 0, 0, 0, t1628, t1633, t1622, t1595, 0, 0, 0, 0, 0, 0, t1591, t1593, t1587, t1566, 0, 0, 0, 0, 0, 0, t1591, t1593, t1587, t1556; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1659, t1655, t1646, t1617, 0, 0, 0, 0, 0, 0, t1611, t1613, t1598, t1571, 0, 0, 0, 0, 0, 0, t1611, t1613, t1598, t1561; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1656, t1664, t1648, t1616, 0, 0, 0, 0, 0, 0, -t1618, -t1620, -t1631, -t1604, 0, 0, 0, 0, 0, 0, -t1618, -t1620, -t1631, -t1585; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1645, t1647, t1653, t1641, 0, 0, 0, 0, 0, 0, t1610, t1612, t1597, t1570, 0, 0, 0, 0, 0, 0, t1610, t1612, t1597, t1560; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1635, t1627, t1619, t1584, 0, 0, 0, 0, 0, 0, t1635, t1627, t1619, t1580; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1626, t1649, t1621, t1583, 0, 0, 0, 0, 0, 0, t1626, t1649, t1621, t1576; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1618, t1620, t1631, t1604, 0, 0, 0, 0, 0, 0, t1618, t1620, t1631, t1585; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1635, t1627, t1619, t1580; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1626, t1649, t1621, t1576; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1618, t1620, t1631, t1585;];
f_new_reg = t1;
