% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRRPP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,theta1,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:07
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRRPP1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPP1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPP1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRPP1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRPP1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRRPP1_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:07:02
% EndTime: 2019-12-05 16:07:18
% DurationCPUTime: 13.74s
% Computational Cost: add. (19095->484), mult. (42921->665), div. (0->0), fcn. (28814->8), ass. (0->358)
t570 = sin(pkin(8));
t572 = cos(pkin(8));
t575 = sin(qJ(3));
t577 = cos(qJ(3));
t528 = (t570 * t577 + t572 * t575) * qJD(2);
t525 = t528 ^ 2;
t579 = qJD(3) ^ 2;
t468 = t579 + t525;
t623 = qJD(2) * t575;
t526 = -t572 * t577 * qJD(2) + t570 * t623;
t482 = t528 * t526;
t667 = qJDD(3) + t482;
t651 = t570 * t667;
t392 = t572 * t468 + t651;
t641 = t572 * t667;
t418 = t570 * t468 - t641;
t357 = t575 * t392 + t577 * t418;
t576 = sin(qJ(2));
t578 = cos(qJ(2));
t522 = qJD(3) * t526;
t616 = qJD(2) * qJD(3);
t604 = t577 * t616;
t614 = t575 * qJDD(2);
t540 = t604 + t614;
t605 = t575 * t616;
t612 = t577 * qJDD(2);
t585 = t605 - t612;
t582 = t572 * t540 - t570 * t585;
t687 = t522 - t582;
t321 = t576 * t357 + t578 * t687;
t327 = t578 * t357 - t576 * t687;
t571 = sin(pkin(7));
t573 = cos(pkin(7));
t268 = t571 * t321 - t573 * t327;
t768 = qJ(1) * t268;
t276 = t573 * t321 + t571 * t327;
t767 = qJ(1) * t276;
t766 = pkin(5) * t321;
t765 = -pkin(1) * t321 - pkin(2) * t687 - pkin(6) * t357;
t335 = t577 * t392 - t575 * t418;
t764 = -pkin(1) * t335 - pkin(5) * t327;
t600 = t570 * t540 + t572 * t585;
t622 = qJD(3) * t528;
t436 = t600 + t622;
t370 = -t570 * t436 - t572 * t687;
t642 = t572 * t436;
t653 = t570 * t687;
t372 = t642 - t653;
t306 = t575 * t370 + t577 * t372;
t659 = t526 ^ 2;
t475 = t525 - t659;
t294 = t576 * t306 + t578 * t475;
t296 = t578 * t306 - t576 * t475;
t763 = t294 * t573 + t296 * t571;
t762 = t294 * t571 - t296 * t573;
t508 = t659 - t579;
t407 = t570 * t508 + t641;
t413 = t572 * t508 - t651;
t353 = t575 * t407 - t577 * t413;
t438 = -t600 + t622;
t317 = t576 * t353 + t578 * t438;
t323 = t578 * t353 - t576 * t438;
t761 = t317 * t573 + t323 * t571;
t760 = t317 * t571 - t323 * t573;
t758 = pkin(6) * t335;
t757 = -pkin(2) * t335 - pkin(3) * t392;
t668 = qJDD(3) - t482;
t650 = t570 * t668;
t669 = -t659 - t579;
t680 = t572 * t669 - t650;
t456 = t572 * t668;
t684 = t570 * t669 + t456;
t697 = -t575 * t684 + t577 * t680;
t720 = t576 * t436 + t578 * t697;
t722 = -t578 * t436 + t576 * t697;
t733 = t571 * t720 + t573 * t722;
t755 = qJ(1) * t733;
t734 = -t571 * t722 + t573 * t720;
t754 = qJ(1) * t734;
t434 = -t659 - t525;
t673 = -t522 - t582;
t685 = t572 * t438 - t570 * t673;
t686 = t570 * t438 + t572 * t673;
t695 = -t575 * t686 + t577 * t685;
t719 = t576 * t434 + t578 * t695;
t721 = -t578 * t434 + t576 * t695;
t735 = t571 * t719 + t573 * t721;
t753 = qJ(1) * t735;
t736 = -t571 * t721 + t573 * t719;
t752 = qJ(1) * t736;
t509 = -t525 + t579;
t705 = t572 * t509 + t650;
t706 = -t570 * t509 + t456;
t717 = -t575 * t705 + t577 * t706;
t738 = -t576 * t673 + t578 * t717;
t739 = t576 * t717 + t578 * t673;
t751 = -t571 * t739 + t573 * t738;
t750 = t571 * t738 + t573 * t739;
t748 = pkin(5) * t721;
t747 = pkin(5) * t722;
t746 = qJ(4) * t392;
t745 = qJ(4) * t418;
t744 = pkin(1) * t721 - pkin(2) * t434 + pkin(6) * t695;
t743 = pkin(1) * t722 - pkin(2) * t436 + pkin(6) * t697;
t694 = t575 * t685 + t577 * t686;
t742 = -pkin(1) * t694 + pkin(5) * t719;
t696 = t575 * t680 + t577 * t684;
t741 = -pkin(1) * t696 + pkin(5) * t720;
t740 = -t370 * t577 + t372 * t575;
t737 = t407 * t577 + t413 * t575;
t730 = pkin(6) * t694;
t729 = pkin(6) * t696;
t726 = t687 * qJ(5);
t285 = -pkin(2) * t694 - pkin(3) * t686;
t725 = -pkin(2) * t696 - pkin(3) * t684;
t718 = t575 * t706 + t577 * t705;
t713 = qJ(4) * t680;
t712 = qJ(4) * t684;
t711 = qJ(4) * t686;
t547 = t573 * g(1) + t571 * g(2);
t602 = t571 * g(1) - t573 * g(2);
t598 = t576 * t547 + t578 * t602;
t624 = t578 * t547 - t576 * t602;
t601 = -t576 * t598 - t578 * t624;
t421 = t576 * t624 - t578 * t598;
t648 = t421 * t571;
t359 = t573 * t601 + t648;
t640 = t573 * t421;
t704 = -t571 * t601 + t640;
t613 = t576 * qJDD(2);
t657 = qJD(2) ^ 2;
t543 = t578 * t657 + t613;
t611 = t578 * qJDD(2);
t544 = -t576 * t657 + t611;
t487 = -t571 * t543 + t573 * t544;
t568 = g(3) - qJDD(1);
t517 = pkin(5) * t543 - t578 * t568;
t589 = -pkin(5) * t544 - t576 * t568;
t703 = -qJ(1) * t487 + t517 * t571 + t573 * t589;
t702 = -pkin(3) * t434 + qJ(4) * t685;
t608 = t576 * t482;
t620 = qJD(3) * t572;
t606 = t526 * t620;
t586 = t570 * t600 + t606;
t621 = qJD(3) * t570;
t591 = t526 * t621 - t572 * t600;
t661 = -t575 * t591 + t577 * t586;
t677 = t578 * t661 - t608;
t607 = t578 * t482;
t679 = t576 * t661 + t607;
t701 = -t571 * t679 + t573 * t677;
t700 = t571 * t677 + t573 * t679;
t610 = t578 * qJDD(3);
t584 = (-t526 * t570 - t572 * t528) * qJD(3);
t507 = t528 * t621;
t590 = t507 - t606;
t662 = -t575 * t584 + t577 * t590;
t678 = t576 * t662 - t610;
t561 = t576 * qJDD(3);
t681 = t578 * t662 + t561;
t699 = t571 * t681 + t573 * t678;
t698 = -t571 * t678 + t573 * t681;
t693 = 2 * qJD(5);
t671 = t573 * t543 + t571 * t544;
t682 = qJ(1) * t671 + t573 * t517 - t571 * t589;
t457 = t526 * pkin(4) - t528 * qJ(5);
t479 = -pkin(2) * t657 + qJDD(2) * pkin(6) - t624;
t446 = t575 * t479 + t577 * t568;
t556 = t575 * t657 * t577;
t549 = qJDD(3) + t556;
t397 = (-t540 + t604) * qJ(4) + t549 * pkin(3) - t446;
t449 = t577 * t479 - t575 * t568;
t548 = qJD(3) * pkin(3) - qJ(4) * t623;
t658 = t577 ^ 2;
t563 = t658 * t657;
t398 = -pkin(3) * t563 - qJ(4) * t585 - qJD(3) * t548 + t449;
t627 = t570 * t397 + t572 * t398;
t670 = qJDD(3) * qJ(5) + qJD(3) * t693 - t526 * t457 + t627;
t493 = -t573 * t547 - t571 * t602;
t492 = -t571 * t547 + t573 * t602;
t427 = t528 * t620 + t570 * t582;
t428 = t572 * t582 - t507;
t367 = -t575 * t427 + t577 * t428;
t592 = t578 * t367 + t608;
t593 = t576 * t367 - t607;
t665 = -t571 * t593 + t573 * t592;
t664 = t571 * t592 + t573 * t593;
t663 = t575 * t590 + t577 * t584;
t660 = t575 * t586 + t577 * t591;
t656 = pkin(4) * t572;
t588 = qJDD(2) * pkin(2) + t657 * pkin(6) + t598;
t401 = t585 * pkin(3) - qJ(4) * t563 + t548 * t623 + qJDD(4) - t588;
t655 = t570 * t401;
t644 = t571 * t568;
t643 = t572 * t401;
t639 = t573 * t568;
t618 = qJD(4) * t528;
t521 = 0.2e1 * t618;
t626 = -t572 * t397 + t570 * t398;
t332 = t521 + t626;
t619 = qJD(4) * t526;
t519 = -0.2e1 * t619;
t333 = t519 + t627;
t282 = -t572 * t332 + t570 * t333;
t638 = t575 * t282;
t637 = t575 * t588;
t636 = t575 * t549;
t550 = qJDD(3) - t556;
t635 = t575 * t550;
t632 = t577 * t282;
t631 = t577 * t588;
t541 = -0.2e1 * t605 + t612;
t630 = t577 * t541;
t629 = t577 * t550;
t625 = -t434 - t579;
t567 = t575 ^ 2;
t617 = t567 * t657;
t609 = t567 + t658;
t603 = -qJ(5) * t570 - pkin(3);
t283 = t570 * t332 + t572 * t333;
t386 = t575 * t446 + t577 * t449;
t596 = t576 * t556;
t595 = t578 * t556;
t594 = t528 * t457 + qJDD(5) + t626;
t385 = t577 * t446 - t575 * t449;
t587 = t519 + t670;
t583 = -qJDD(3) * pkin(4) + t594;
t581 = t600 * pkin(4) + t401 + t726;
t580 = t528 * t693 - t581;
t555 = -t563 - t579;
t554 = t563 - t579;
t553 = -t579 - t617;
t552 = t579 - t617;
t546 = t563 - t617;
t545 = t563 + t617;
t542 = t609 * qJDD(2);
t539 = 0.2e1 * t604 + t614;
t538 = t577 * t549;
t537 = t609 * t616;
t506 = t578 * t537 + t561;
t505 = t577 * t540 - t567 * t616;
t504 = t576 * t537 - t610;
t503 = t575 * t585 - t616 * t658;
t501 = -t575 * t553 - t629;
t500 = -t575 * t552 + t538;
t499 = t577 * t555 - t636;
t498 = t577 * t554 - t635;
t497 = t577 * t553 - t635;
t496 = t575 * t555 + t538;
t491 = t578 * t542 - t576 * t545;
t490 = t576 * t542 + t578 * t545;
t484 = -t575 * t539 + t630;
t466 = t578 * t505 - t596;
t465 = t578 * t503 + t596;
t464 = t576 * t505 + t595;
t463 = t576 * t503 - t595;
t462 = t578 * t500 + t575 * t613;
t461 = t578 * t498 + t576 * t612;
t460 = t576 * t500 - t575 * t611;
t459 = t576 * t498 - t577 * t611;
t451 = t578 * t501 + t576 * t539;
t450 = t578 * t499 - t576 * t541;
t448 = t576 * t501 - t578 * t539;
t447 = t576 * t499 + t578 * t541;
t444 = t578 * t484 - t576 * t546;
t443 = t576 * t484 + t578 * t546;
t406 = -pkin(6) * t497 - t631;
t405 = -pkin(6) * t496 - t637;
t404 = -t571 * t490 + t573 * t491;
t403 = t573 * t490 + t571 * t491;
t402 = pkin(1) * t568 + pkin(5) * t601;
t400 = -pkin(2) * t497 + t449;
t399 = -pkin(2) * t496 + t446;
t383 = -t571 * t448 + t573 * t451;
t382 = -t571 * t447 + t573 * t450;
t381 = t573 * t448 + t571 * t451;
t380 = t573 * t447 + t571 * t450;
t364 = t577 * t427 + t575 * t428;
t361 = -pkin(5) * t490 + t578 * t385;
t360 = pkin(5) * t491 + t576 * t385;
t349 = t578 * t386 - t576 * t588;
t348 = t576 * t386 + t578 * t588;
t347 = t643 + t746;
t346 = t655 - t712;
t330 = -pkin(5) * t448 - t576 * t400 + t578 * t406;
t329 = -pkin(5) * t447 - t576 * t399 + t578 * t405;
t328 = pkin(3) * t687 + t655 + t745;
t315 = (pkin(4) * qJD(3) - (2 * qJD(5))) * t528 + t581;
t314 = -pkin(3) * t436 - t643 + t713;
t313 = -pkin(1) * t497 + pkin(5) * t451 + t578 * t400 + t576 * t406;
t312 = -pkin(1) * t496 + pkin(5) * t450 + t578 * t399 + t576 * t405;
t301 = t579 * qJ(5) - t583 - 0.2e1 * t618;
t300 = -t579 * pkin(4) + t587;
t299 = (-t436 - t622) * pkin(4) + t580;
t298 = -pkin(4) * t622 + t580 - t726;
t293 = -t571 * t348 + t573 * t349;
t292 = t573 * t348 + t571 * t349;
t287 = qJ(5) * t625 + t521 + t583;
t286 = pkin(4) * t625 + t587;
t284 = -pkin(5) * t348 - (pkin(2) * t576 - pkin(6) * t578) * t385;
t281 = -qJ(5) * t642 - t570 * t299 - t712;
t280 = t333 - t757;
t279 = pkin(4) * t653 + t572 * t298 - t746;
t274 = t572 * t299 + t436 * t603 + t713;
t273 = t332 + t725;
t272 = pkin(5) * t349 - (-pkin(2) * t578 - pkin(6) * t576 - pkin(1)) * t385;
t271 = -t745 + t570 * t298 - (pkin(3) + t656) * t687;
t270 = -pkin(3) * t401 + qJ(4) * t283;
t269 = -pkin(4) * t673 - qJ(5) * t438 + t285;
t264 = -t575 * t328 + t577 * t347 + t758;
t263 = -t282 - t711;
t262 = t572 * t300 - t570 * t301;
t261 = t570 * t300 + t572 * t301;
t260 = t521 + (-t669 - t579) * qJ(5) + (-qJDD(3) - t668) * pkin(4) + t594 + t725;
t259 = t283 + t702;
t258 = -t575 * t314 + t577 * t346 - t729;
t257 = -qJ(5) * t667 + 0.2e1 * t619 + (-t468 + t579) * pkin(4) - t670 + t757;
t252 = -t570 * t286 + t572 * t287 - t711;
t251 = t577 * t283 - t638;
t250 = t575 * t283 + t632;
t249 = t572 * t286 + t570 * t287 + t702;
t248 = t578 * t251 + t576 * t401;
t247 = t576 * t251 - t578 * t401;
t246 = -qJ(4) * t261 + (pkin(4) * t570 - qJ(5) * t572) * t315;
t245 = -t575 * t274 + t577 * t281 - t729;
t244 = -t575 * t261 + t577 * t262;
t243 = t577 * t261 + t575 * t262;
t242 = -t575 * t271 + t577 * t279 - t758;
t241 = t578 * t264 - t576 * t280 - t766;
t240 = qJ(4) * t262 + (t603 - t656) * t315;
t239 = -pkin(2) * t250 - pkin(3) * t282;
t238 = t576 * t264 + t578 * t280 - t764;
t237 = t578 * t244 + t576 * t315;
t236 = t576 * t244 - t578 * t315;
t235 = t578 * t258 - t576 * t273 - t747;
t234 = -t575 * t259 + t577 * t263 - t730;
t233 = t576 * t258 + t578 * t273 + t741;
t232 = -pkin(6) * t250 - qJ(4) * t632 - t575 * t270;
t231 = -t571 * t247 + t573 * t248;
t230 = t573 * t247 + t571 * t248;
t229 = t578 * t245 - t576 * t260 - t747;
t228 = -t575 * t249 + t577 * t252 - t730;
t227 = t576 * t245 + t578 * t260 + t741;
t226 = t578 * t242 - t576 * t257 + t766;
t225 = t578 * t234 - t576 * t285 - t748;
t224 = t576 * t242 + t578 * t257 + t764;
t223 = -pkin(2) * t243 - pkin(3) * t261 - pkin(4) * t301 - qJ(5) * t300;
t222 = t576 * t234 + t578 * t285 + t742;
t221 = -t571 * t236 + t573 * t237;
t220 = t573 * t236 + t571 * t237;
t219 = t578 * t228 - t576 * t269 - t748;
t218 = t576 * t228 + t578 * t269 + t742;
t217 = -pkin(6) * t243 - t575 * t240 + t577 * t246;
t216 = -pkin(5) * t247 + t578 * t232 - t576 * t239;
t215 = -pkin(1) * t250 + pkin(5) * t248 + t576 * t232 + t578 * t239;
t214 = -pkin(5) * t236 + t578 * t217 - t576 * t223;
t213 = -pkin(1) * t243 + pkin(5) * t237 + t576 * t217 + t578 * t223;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t493, 0, 0, 0, 0, 0, 0, -t671, -t487, 0, t359, 0, 0, 0, 0, 0, 0, t382, t383, t404, t293, 0, 0, 0, 0, 0, 0, t734, -t268, t736, t231, 0, 0, 0, 0, 0, 0, t734, t736, t268, t221; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t492, 0, 0, 0, 0, 0, 0, t487, -t671, 0, -t704, 0, 0, 0, 0, 0, 0, t380, t381, t403, t292, 0, 0, 0, 0, 0, 0, t733, t276, t735, t230, 0, 0, 0, 0, 0, 0, t733, t735, -t276, t220; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t568, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t568, 0, 0, 0, 0, 0, 0, t496, t497, 0, -t385, 0, 0, 0, 0, 0, 0, t696, -t335, t694, t250, 0, 0, 0, 0, 0, 0, t696, t694, t335, t243; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t644, -t639, -t492, -qJ(1) * t492, 0, 0, t487, 0, -t671, 0, t703, t682, t704, pkin(5) * t640 + qJ(1) * t704 - t571 * t402, -t571 * t464 + t573 * t466, -t571 * t443 + t573 * t444, -t571 * t460 + t573 * t462, -t571 * t463 + t573 * t465, -t571 * t459 + t573 * t461, -t571 * t504 + t573 * t506, -qJ(1) * t380 - t571 * t312 + t573 * t329, -qJ(1) * t381 - t571 * t313 + t573 * t330, -qJ(1) * t403 - t360 * t571 + t361 * t573, -qJ(1) * t292 - t272 * t571 + t284 * t573, t665, t762, t751, t701, t760, t698, -t233 * t571 + t235 * t573 - t755, -t238 * t571 + t241 * t573 - t767, -t222 * t571 + t225 * t573 - t753, -qJ(1) * t230 - t215 * t571 + t216 * t573, t665, t751, -t762, t698, -t760, t701, -t227 * t571 + t229 * t573 - t755, -t218 * t571 + t219 * t573 - t753, -t224 * t571 + t226 * t573 + t767, -qJ(1) * t220 - t213 * t571 + t214 * t573; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t639, -t644, t493, qJ(1) * t493, 0, 0, t671, 0, t487, 0, -t682, t703, t359, pkin(5) * t648 + qJ(1) * t359 + t402 * t573, t464 * t573 + t466 * t571, t443 * t573 + t444 * t571, t460 * t573 + t462 * t571, t463 * t573 + t465 * t571, t459 * t573 + t461 * t571, t504 * t573 + t506 * t571, qJ(1) * t382 + t312 * t573 + t329 * t571, qJ(1) * t383 + t313 * t573 + t330 * t571, qJ(1) * t404 + t360 * t573 + t361 * t571, qJ(1) * t293 + t272 * t573 + t284 * t571, t664, -t763, t750, t700, -t761, t699, t233 * t573 + t235 * t571 + t754, t238 * t573 + t241 * t571 - t768, t222 * t573 + t225 * t571 + t752, qJ(1) * t231 + t215 * t573 + t216 * t571, t664, t750, t763, t699, t761, t700, t227 * t573 + t229 * t571 + t754, t218 * t573 + t219 * t571 + t752, t224 * t573 + t226 * t571 + t768, qJ(1) * t221 + t213 * t573 + t214 * t571; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t602, t547, 0, 0, 0, 0, 0, 0, 0, qJDD(2), pkin(1) * t544 + t598, -pkin(1) * t543 + t624, 0, -pkin(1) * t421, (t540 + t604) * t575, t539 * t577 + t541 * t575, t552 * t577 + t636, t630, t554 * t575 + t629, 0, pkin(1) * t447 + pkin(2) * t541 + pkin(6) * t499 + t631, pkin(1) * t448 - pkin(2) * t539 + pkin(6) * t501 - t637, pkin(1) * t490 + pkin(2) * t545 + pkin(6) * t542 + t386, pkin(1) * t348 + pkin(2) * t588 + pkin(6) * t386, t364, -t740, t718, t660, t737, t663, t314 * t577 + t346 * t575 + t743, t328 * t577 + t347 * t575 - t765, t259 * t577 + t263 * t575 + t744, pkin(1) * t247 - pkin(2) * t401 + pkin(6) * t251 - qJ(4) * t638 + t270 * t577, t364, t718, t740, t663, -t737, t660, t274 * t577 + t281 * t575 + t743, t249 * t577 + t252 * t575 + t744, t271 * t577 + t279 * t575 + t765, pkin(1) * t236 - pkin(2) * t315 + pkin(6) * t244 + t240 * t577 + t246 * t575;];
tauB_reg = t1;
