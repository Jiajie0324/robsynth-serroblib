% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PRRPP1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,theta1,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:07
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PRRPP1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPP1_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPP1_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRPP1_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRPP1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRRPP1_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:07:18
% EndTime: 2019-12-05 16:07:37
% DurationCPUTime: 19.34s
% Computational Cost: add. (31862->557), mult. (71773->675), div. (0->0), fcn. (47800->8), ass. (0->388)
t1179 = sin(pkin(7));
t1181 = cos(pkin(7));
t1185 = sin(qJ(2));
t1187 = cos(qJ(2));
t1186 = cos(qJ(3));
t1267 = qJD(2) * t1186;
t1164 = qJD(3) * t1267;
t1184 = sin(qJ(3));
t1236 = t1184 * qJDD(2);
t1143 = t1164 + t1236;
t1178 = sin(pkin(8));
t1180 = cos(pkin(8));
t1268 = qJD(2) * t1184;
t1229 = qJD(3) * t1268;
t1234 = t1186 * qJDD(2);
t1197 = -t1229 + t1234;
t1079 = t1180 * t1143 + t1178 * t1197;
t1128 = t1178 * t1268 - t1180 * t1267;
t1266 = qJD(3) * t1128;
t1299 = -t1266 + t1079;
t1130 = (t1178 * t1186 + t1180 * t1184) * qJD(2);
t1127 = t1130 ^ 2;
t1188 = qJD(3) ^ 2;
t1061 = t1188 + t1127;
t1261 = t1130 * t1128;
t1295 = qJDD(3) + t1261;
t1255 = t1178 * t1295;
t973 = t1180 * t1061 + t1255;
t1246 = t1180 * t1295;
t997 = t1178 * t1061 - t1246;
t937 = t1184 * t973 + t1186 * t997;
t890 = t1185 * t937 - t1187 * t1299;
t896 = t1185 * t1299 + t1187 * t937;
t1394 = qJ(1) * (t1179 * t890 - t1181 * t896);
t1393 = qJ(1) * (t1179 * t896 + t1181 * t890);
t1392 = pkin(1) * t890;
t1391 = pkin(5) * t890;
t931 = t1184 * t997 - t1186 * t973;
t1390 = pkin(1) * t931 - pkin(5) * t896;
t1284 = t1128 ^ 2;
t1301 = t1127 - t1284;
t1078 = t1178 * t1143 - t1180 * t1197;
t1124 = qJD(3) * t1130;
t1021 = t1078 + t1124;
t952 = -t1178 * t1021 + t1180 * t1299;
t1247 = t1180 * t1021;
t1257 = t1178 * t1299;
t954 = t1247 + t1257;
t872 = t1184 * t952 + t1186 * t954;
t854 = t1185 * t872 + t1187 * t1301;
t856 = -t1185 * t1301 + t1187 * t872;
t1389 = t1179 * t856 + t1181 * t854;
t1388 = t1179 * t854 - t1181 * t856;
t1022 = t1078 - t1124;
t1108 = t1284 - t1188;
t986 = t1178 * t1108 + t1246;
t992 = t1180 * t1108 - t1255;
t933 = t1184 * t986 - t1186 * t992;
t886 = -t1187 * t1022 + t1185 * t933;
t892 = t1185 * t1022 + t1187 * t933;
t1387 = t1179 * t892 + t1181 * t886;
t1386 = t1179 * t886 - t1181 * t892;
t1382 = pkin(2) * t931;
t1381 = pkin(6) * t931;
t1380 = pkin(2) * t1299 - pkin(6) * t937;
t1019 = -t1284 - t1127;
t1298 = t1266 + t1079;
t1330 = -t1180 * t1022 + t1178 * t1298;
t1331 = -t1178 * t1022 - t1180 * t1298;
t1346 = -t1184 * t1331 + t1186 * t1330;
t1361 = -t1187 * t1019 + t1185 * t1346;
t1379 = pkin(1) * t1361;
t1378 = pkin(5) * t1361;
t1345 = t1184 * t1330 + t1186 * t1331;
t1359 = t1185 * t1019 + t1187 * t1346;
t1377 = -pkin(1) * t1345 + pkin(5) * t1359;
t1109 = t1127 - t1188;
t1296 = qJDD(3) - t1261;
t1254 = t1178 * t1296;
t1334 = -t1180 * t1109 + t1254;
t1044 = t1180 * t1296;
t1335 = t1178 * t1109 + t1044;
t1343 = -t1184 * t1334 + t1186 * t1335;
t1360 = t1185 * t1298 + t1187 * t1343;
t1362 = t1185 * t1343 - t1187 * t1298;
t1376 = -t1179 * t1362 + t1181 * t1360;
t1375 = t1179 * t1360 + t1181 * t1362;
t1374 = qJ(1) * (-t1179 * t1361 + t1181 * t1359);
t1373 = qJ(1) * (t1179 * t1359 + t1181 * t1361);
t1372 = pkin(3) * t973;
t1297 = -t1284 - t1188;
t1312 = t1180 * t1297 - t1254;
t1315 = t1178 * t1297 + t1044;
t1325 = -t1184 * t1315 + t1186 * t1312;
t1348 = -t1187 * t1021 + t1185 * t1325;
t1370 = pkin(1) * t1348;
t1369 = pkin(2) * t1345;
t1368 = pkin(5) * t1348;
t1367 = pkin(6) * t1345;
t1366 = qJ(4) * t973;
t1365 = qJ(4) * t997;
t1324 = t1184 * t1312 + t1186 * t1315;
t1347 = t1185 * t1021 + t1187 * t1325;
t1364 = -pkin(1) * t1324 + pkin(5) * t1347;
t1363 = -pkin(2) * t1019 + pkin(6) * t1346;
t866 = t1184 * t954 - t1186 * t952;
t926 = t1184 * t992 + t1186 * t986;
t1358 = qJ(1) * (-t1179 * t1348 + t1181 * t1347);
t1357 = qJ(1) * (t1179 * t1347 + t1181 * t1348);
t1281 = pkin(3) * t1331;
t1355 = pkin(6) * t1324;
t1354 = qJ(4) * t1331;
t1340 = pkin(3) * t1315;
t1351 = -pkin(2) * t1324 - t1340;
t1350 = -pkin(2) * t1021 + pkin(6) * t1325;
t1349 = -pkin(3) * t1019 + qJ(4) * t1330;
t1344 = t1184 * t1335 + t1186 * t1334;
t1339 = qJ(4) * t1312;
t1338 = qJ(4) * t1315;
t1151 = t1181 * g(1) + t1179 * g(2);
t1223 = t1179 * g(1) - t1181 * g(2);
t1193 = t1187 * t1151 - t1185 * t1223;
t1219 = t1185 * t1151 + t1187 * t1223;
t1220 = -t1185 * t1219 - t1187 * t1193;
t1001 = t1185 * t1193 - t1187 * t1219;
t1252 = t1179 * t1001;
t1333 = t1181 * t1220 + t1252;
t1245 = t1181 * t1001;
t1332 = -t1179 * t1220 + t1245;
t1228 = t1185 * t1261;
t1230 = t1180 * t1266;
t1198 = t1178 * t1078 + t1230;
t1262 = t1128 * t1178;
t1204 = qJD(3) * t1262 - t1180 * t1078;
t1287 = -t1184 * t1204 + t1186 * t1198;
t1309 = t1187 * t1287 - t1228;
t1227 = t1187 * t1261;
t1311 = t1185 * t1287 + t1227;
t1329 = -t1179 * t1311 + t1181 * t1309;
t1328 = t1179 * t1309 + t1181 * t1311;
t1232 = t1187 * qJDD(3);
t1260 = t1130 * t1180;
t1195 = (-t1260 - t1262) * qJD(3);
t1107 = t1178 * t1124;
t1203 = t1107 - t1230;
t1288 = -t1184 * t1195 + t1186 * t1203;
t1310 = t1185 * t1288 - t1232;
t1166 = t1185 * qJDD(3);
t1313 = t1187 * t1288 + t1166;
t1327 = t1179 * t1313 + t1181 * t1310;
t1326 = -t1179 * t1310 + t1181 * t1313;
t1322 = qJ(5) * t1299;
t1235 = t1185 * qJDD(2);
t1285 = qJD(2) ^ 2;
t1147 = t1187 * t1285 + t1235;
t1175 = g(3) - qJDD(1);
t1117 = pkin(5) * t1147 - t1187 * t1175;
t1233 = t1187 * qJDD(2);
t1148 = -t1185 * t1285 + t1233;
t1202 = -pkin(5) * t1148 - t1185 * t1175;
t1300 = t1181 * t1147 + t1179 * t1148;
t1314 = qJ(1) * t1300 + t1181 * t1117 - t1179 * t1202;
t1083 = -t1179 * t1147 + t1181 * t1148;
t1308 = -qJ(1) * t1083 + t1179 * t1117 + t1181 * t1202;
t1073 = -t1285 * pkin(2) + qJDD(2) * pkin(6) - t1193;
t1032 = t1184 * t1073 + t1186 * t1175;
t1035 = t1186 * t1073 - t1184 * t1175;
t965 = t1184 * t1032 + t1186 * t1035;
t1303 = -pkin(4) * t1296 - qJ(5) * t1297;
t1265 = qJD(4) * t1128;
t1119 = -0.2e1 * t1265;
t1263 = qJD(5) * qJD(3);
t1302 = t1119 + 0.2e1 * t1263;
t1294 = -t1181 * t1151 - t1179 * t1223;
t1292 = -t1179 * t1151 + t1181 * t1223;
t1007 = qJD(3) * t1260 + t1178 * t1079;
t1008 = t1180 * t1079 - t1107;
t949 = -t1184 * t1007 + t1186 * t1008;
t1205 = t1185 * t949 - t1227;
t1206 = t1187 * t949 + t1228;
t1291 = t1179 * t1206 + t1181 * t1205;
t1290 = -t1179 * t1205 + t1181 * t1206;
t1289 = t1184 * t1203 + t1186 * t1195;
t1286 = t1184 * t1198 + t1186 * t1204;
t1283 = t1186 ^ 2;
t1160 = t1184 * t1285 * t1186;
t1153 = qJDD(3) + t1160;
t977 = (-t1143 + t1164) * qJ(4) + t1153 * pkin(3) - t1032;
t1152 = qJD(3) * pkin(3) - qJ(4) * t1268;
t1168 = t1283 * t1285;
t978 = -pkin(3) * t1168 + qJ(4) * t1197 - qJD(3) * t1152 + t1035;
t1222 = t1178 * t978 - t1180 * t977;
t1264 = qJD(4) * t1130;
t901 = t1222 + 0.2e1 * t1264;
t1276 = t1178 * t977 + t1180 * t978;
t902 = t1119 + t1276;
t843 = t1178 * t902 - t1180 * t901;
t1282 = pkin(3) * t843;
t1278 = pkin(4) * t1180;
t1048 = t1128 * pkin(4) - t1130 * qJ(5);
t1201 = -t1188 * pkin(4) + qJDD(3) * qJ(5) - t1128 * t1048 + t1276;
t861 = t1201 + t1302;
t1196 = -qJDD(3) * pkin(4) - t1188 * qJ(5) + qJDD(5) + t1222;
t863 = (0.2e1 * qJD(4) + t1048) * t1130 + t1196;
t1277 = -pkin(4) * t863 + qJ(5) * t861;
t1200 = qJDD(2) * pkin(2) + t1285 * pkin(6) + t1219;
t982 = -t1197 * pkin(3) - qJ(4) * t1168 + t1152 * t1268 + qJDD(4) - t1200;
t1274 = t1178 * t982;
t1273 = t1180 * t982;
t1272 = t1184 * t843;
t1271 = t1186 * t843;
t1270 = pkin(2) * t1200 + pkin(6) * t965;
t1269 = qJD(2) * qJD(3);
t1174 = t1184 ^ 2;
t1259 = t1174 * t1285;
t1248 = t1179 * t1175;
t1244 = t1181 * t1175;
t1049 = t1184 * t1200;
t1243 = t1184 * t1153;
t1154 = qJDD(3) - t1160;
t1242 = t1184 * t1154;
t1050 = t1186 * t1200;
t1144 = -0.2e1 * t1229 + t1234;
t1091 = t1186 * t1144;
t1239 = t1186 * t1154;
t1237 = -pkin(4) * t1298 - qJ(5) * t1022;
t1231 = t1174 + t1283;
t1157 = -t1188 - t1259;
t1100 = -t1184 * t1157 - t1239;
t1142 = 0.2e1 * t1164 + t1236;
t1226 = -pkin(2) * t1142 + pkin(6) * t1100 - t1049;
t1159 = -t1168 - t1188;
t1098 = t1186 * t1159 - t1243;
t1225 = pkin(2) * t1144 + pkin(6) * t1098 + t1050;
t1224 = -qJ(5) * t1178 - pkin(3);
t844 = t1178 * t901 + t1180 * t902;
t825 = t1178 * t863 + t1180 * t861;
t1190 = t1078 * pkin(4) - t1322 + t982;
t884 = (pkin(4) * qJD(3) - 0.2e1 * qJD(5)) * t1130 + t1190;
t799 = qJ(4) * t825 + (t1224 - t1278) * t884;
t824 = t1178 * t861 - t1180 * t863;
t804 = -t1184 * t824 + t1186 * t825;
t807 = -qJ(4) * t824 + (pkin(4) * t1178 - qJ(5) * t1180) * t884;
t1221 = -pkin(2) * t884 + pkin(6) * t804 + t1184 * t807 + t1186 * t799;
t847 = -pkin(4) * t1019 + t861;
t848 = -qJ(5) * t1019 + t863;
t812 = t1178 * t848 + t1180 * t847 + t1349;
t818 = -t1178 * t847 + t1180 * t848 - t1354;
t1218 = t1184 * t818 + t1186 * t812 + t1363;
t822 = t1349 + t844;
t827 = -t843 - t1354;
t1217 = t1184 * t827 + t1186 * t822 + t1363;
t1189 = 0.2e1 * qJD(5) * t1130 - t1190;
t858 = -pkin(4) * t1124 + t1189 + t1322;
t833 = -t1365 + t1178 * t858 + (pkin(3) + t1278) * t1299;
t839 = -pkin(4) * t1257 + t1180 * t858 - t1366;
t1216 = t1184 * t839 + t1186 * t833 + t1380;
t859 = t1189 + (-t1021 - t1124) * pkin(4);
t837 = t1224 * t1021 + t1180 * t859 + t1339;
t842 = -qJ(5) * t1247 - t1178 * t859 - t1338;
t1215 = t1184 * t842 + t1186 * t837 + t1350;
t881 = -pkin(3) * t1021 - t1273 + t1339;
t918 = t1274 - t1338;
t1214 = t1184 * t918 + t1186 * t881 + t1350;
t897 = -pkin(3) * t1299 + t1274 + t1365;
t921 = t1273 + t1366;
t1213 = t1184 * t921 + t1186 * t897 - t1380;
t1212 = pkin(3) * t824 + t1277;
t1211 = -t1276 - t1372;
t1210 = t1185 * t1160;
t1209 = t1187 * t1160;
t1146 = t1231 * qJDD(2);
t1149 = t1168 + t1259;
t1208 = pkin(2) * t1149 + pkin(6) * t1146 + t965;
t1207 = t1237 + t1281;
t964 = t1186 * t1032 - t1184 * t1035;
t815 = t1186 * t844 - t1272;
t832 = -pkin(3) * t982 + qJ(4) * t844;
t1199 = -pkin(2) * t982 + pkin(6) * t815 - qJ(4) * t1272 + t1186 * t832;
t1194 = pkin(4) * t1061 + qJ(5) * t1295 + t1201;
t1192 = t1194 + t1372;
t1121 = -0.2e1 * t1264;
t1191 = -t1130 * t1048 + t1121 - t1196 - t1303;
t1158 = t1168 - t1188;
t1156 = t1188 - t1259;
t1150 = -t1168 + t1259;
t1140 = t1186 * t1153;
t1139 = t1231 * t1269;
t1120 = 0.2e1 * t1265;
t1105 = t1187 * t1139 + t1166;
t1104 = t1186 * t1143 - t1174 * t1269;
t1103 = t1185 * t1139 - t1232;
t1102 = -t1184 * t1197 - t1283 * t1269;
t1099 = -t1184 * t1156 + t1140;
t1097 = t1186 * t1158 - t1242;
t1096 = t1186 * t1157 - t1242;
t1095 = t1186 * t1156 + t1243;
t1094 = t1184 * t1159 + t1140;
t1093 = t1184 * t1158 + t1239;
t1092 = (t1143 + t1164) * t1184;
t1086 = t1187 * t1146 - t1185 * t1149;
t1085 = t1185 * t1146 + t1187 * t1149;
t1081 = -t1184 * t1142 + t1091;
t1080 = t1186 * t1142 + t1184 * t1144;
t1059 = t1187 * t1104 - t1210;
t1058 = t1187 * t1102 + t1210;
t1057 = t1185 * t1104 + t1209;
t1056 = t1185 * t1102 - t1209;
t1055 = t1187 * t1099 + t1184 * t1235;
t1054 = t1187 * t1097 + t1185 * t1234;
t1053 = t1185 * t1099 - t1184 * t1233;
t1052 = t1185 * t1097 - t1186 * t1233;
t1043 = -pkin(1) * t1147 + t1193;
t1042 = pkin(1) * t1148 + t1219;
t1037 = t1187 * t1100 + t1185 * t1142;
t1036 = t1187 * t1098 - t1185 * t1144;
t1034 = t1185 * t1100 - t1187 * t1142;
t1033 = t1185 * t1098 + t1187 * t1144;
t1029 = t1187 * t1081 + t1185 * t1150;
t1028 = t1185 * t1081 - t1187 * t1150;
t998 = pkin(1) * t1001;
t985 = -pkin(6) * t1096 - t1050;
t984 = -pkin(6) * t1094 - t1049;
t983 = pkin(1) * t1175 + pkin(5) * t1220;
t981 = -pkin(2) * t1096 + t1035;
t980 = -pkin(2) * t1094 + t1032;
t946 = t1186 * t1007 + t1184 * t1008;
t943 = pkin(1) * t1034 + t1226;
t942 = pkin(1) * t1033 + t1225;
t939 = -pkin(5) * t1085 + t1187 * t964;
t938 = pkin(5) * t1086 + t1185 * t964;
t923 = -t1185 * t1200 + t1187 * t965;
t922 = t1185 * t965 + t1187 * t1200;
t919 = pkin(1) * t1085 + t1208;
t899 = -pkin(5) * t1034 - t1185 * t981 + t1187 * t985;
t898 = -pkin(5) * t1033 - t1185 * t980 + t1187 * t984;
t879 = -pkin(1) * t1096 + pkin(5) * t1037 + t1185 * t985 + t1187 * t981;
t878 = -pkin(1) * t1094 + pkin(5) * t1036 + t1185 * t984 + t1187 * t980;
t853 = pkin(1) * t922 + t1270;
t846 = -t1281 - t1369;
t845 = -pkin(5) * t922 - (pkin(2) * t1185 - pkin(6) * t1187) * t964;
t840 = t1119 - t1211 - t1382;
t835 = t1351 + t901;
t834 = pkin(5) * t923 - (-pkin(2) * t1187 - pkin(6) * t1185 - pkin(1)) * t964;
t831 = -t1207 - t1369;
t828 = -t1184 * t897 + t1186 * t921 - t1381;
t823 = t1303 + t1351 + t863;
t820 = -t1184 * t881 + t1186 * t918 - t1355;
t819 = t1120 - t1192 - 0.2e1 * t1263 + t1382;
t816 = t1213 + t1392;
t814 = t1184 * t844 + t1271;
t810 = t1185 * t982 + t1187 * t815;
t809 = t1185 * t815 - t1187 * t982;
t808 = t1214 + t1370;
t805 = -t1184 * t837 + t1186 * t842 - t1355;
t803 = t1184 * t825 + t1186 * t824;
t801 = -t1184 * t833 + t1186 * t839 + t1381;
t800 = -t1185 * t840 + t1187 * t828 - t1391;
t797 = -pkin(2) * t814 - t1282;
t796 = t1215 + t1370;
t795 = t1185 * t828 + t1187 * t840 - t1390;
t794 = t1185 * t884 + t1187 * t804;
t793 = t1185 * t804 - t1187 * t884;
t792 = -t1185 * t835 + t1187 * t820 - t1368;
t791 = -t1184 * t822 + t1186 * t827 - t1367;
t790 = t1216 - t1392;
t789 = t1185 * t820 + t1187 * t835 + t1364;
t788 = -pkin(6) * t814 - qJ(4) * t1271 - t1184 * t832;
t787 = t1217 + t1379;
t786 = -t1185 * t823 + t1187 * t805 - t1368;
t785 = -t1184 * t812 + t1186 * t818 - t1367;
t784 = t1185 * t805 + t1187 * t823 + t1364;
t783 = -t1185 * t819 + t1187 * t801 + t1391;
t782 = -t1185 * t846 + t1187 * t791 - t1378;
t781 = t1185 * t801 + t1187 * t819 + t1390;
t780 = -pkin(2) * t803 - t1212;
t779 = t1218 + t1379;
t778 = t1185 * t791 + t1187 * t846 + t1377;
t777 = -t1185 * t831 + t1187 * t785 - t1378;
t776 = pkin(1) * t809 + t1199;
t775 = t1185 * t785 + t1187 * t831 + t1377;
t774 = -pkin(6) * t803 - t1184 * t799 + t1186 * t807;
t773 = -pkin(5) * t809 - t1185 * t797 + t1187 * t788;
t772 = -pkin(1) * t814 + pkin(5) * t810 + t1185 * t788 + t1187 * t797;
t771 = pkin(1) * t793 + t1221;
t770 = -pkin(5) * t793 - t1185 * t780 + t1187 * t774;
t769 = -pkin(1) * t803 + pkin(5) * t794 + t1185 * t774 + t1187 * t780;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1248, -t1244, -t1292, -qJ(1) * t1292, 0, 0, t1083, 0, -t1300, 0, t1308, t1314, t1332, pkin(5) * t1245 + qJ(1) * t1332 - t1179 * t983, -t1179 * t1057 + t1181 * t1059, -t1179 * t1028 + t1181 * t1029, -t1179 * t1053 + t1181 * t1055, -t1179 * t1056 + t1181 * t1058, -t1179 * t1052 + t1181 * t1054, -t1179 * t1103 + t1181 * t1105, t1181 * t898 - t1179 * t878 - qJ(1) * (t1181 * t1033 + t1179 * t1036), t1181 * t899 - t1179 * t879 - qJ(1) * (t1181 * t1034 + t1179 * t1037), t1181 * t939 - t1179 * t938 - qJ(1) * (t1181 * t1085 + t1179 * t1086), t1181 * t845 - t1179 * t834 - qJ(1) * (t1179 * t923 + t1181 * t922), t1290, t1388, t1376, t1329, t1386, t1326, -t1179 * t789 + t1181 * t792 - t1357, -t1179 * t795 + t1181 * t800 - t1393, -t1179 * t778 + t1181 * t782 - t1373, t1181 * t773 - t1179 * t772 - qJ(1) * (t1179 * t810 + t1181 * t809), t1290, t1376, -t1388, t1326, -t1386, t1329, -t1179 * t784 + t1181 * t786 - t1357, -t1179 * t775 + t1181 * t777 - t1373, -t1179 * t781 + t1181 * t783 + t1393, t1181 * t770 - t1179 * t769 - qJ(1) * (t1179 * t794 + t1181 * t793); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1244, -t1248, t1294, qJ(1) * t1294, 0, 0, t1300, 0, t1083, 0, -t1314, t1308, t1333, pkin(5) * t1252 + qJ(1) * t1333 + t1181 * t983, t1181 * t1057 + t1179 * t1059, t1181 * t1028 + t1179 * t1029, t1181 * t1053 + t1179 * t1055, t1181 * t1056 + t1179 * t1058, t1181 * t1052 + t1179 * t1054, t1181 * t1103 + t1179 * t1105, t1179 * t898 + t1181 * t878 + qJ(1) * (-t1179 * t1033 + t1181 * t1036), t1179 * t899 + t1181 * t879 + qJ(1) * (-t1179 * t1034 + t1181 * t1037), t1179 * t939 + t1181 * t938 + qJ(1) * (-t1179 * t1085 + t1181 * t1086), t1179 * t845 + t1181 * t834 + qJ(1) * (-t1179 * t922 + t1181 * t923), t1291, -t1389, t1375, t1328, -t1387, t1327, t1179 * t792 + t1181 * t789 + t1358, t1179 * t800 + t1181 * t795 - t1394, t1179 * t782 + t1181 * t778 + t1374, t1179 * t773 + t1181 * t772 + qJ(1) * (-t1179 * t809 + t1181 * t810), t1291, t1375, t1389, t1327, t1387, t1328, t1179 * t786 + t1181 * t784 + t1358, t1179 * t777 + t1181 * t775 + t1374, t1179 * t783 + t1181 * t781 + t1394, t1179 * t770 + t1181 * t769 + qJ(1) * (-t1179 * t793 + t1181 * t794); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1223, t1151, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t1042, t1043, 0, -t998, t1092, t1080, t1095, t1091, t1093, 0, t942, t943, t919, t853, t946, -t866, t1344, t1286, t926, t1289, t808, t816, t787, t776, t946, t1344, t866, t1289, -t926, t1286, t796, t779, t790, t771; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1175, -t1223, 0, 0, 0, t1148, 0, -t1147, 0, t1202, t1117, t1001, pkin(5) * t1001, t1059, t1029, t1055, t1058, t1054, t1105, t898, t899, t939, t845, t1206, -t856, t1360, t1309, -t892, t1313, t792, t800, t782, t773, t1206, t1360, t856, t1313, t892, t1309, t786, t777, t783, t770; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1175, 0, -t1151, 0, 0, 0, t1147, 0, t1148, 0, -t1117, t1202, t1220, t983, t1057, t1028, t1053, t1056, t1052, t1103, t878, t879, t938, t834, t1205, -t854, t1362, t1311, -t886, t1310, t789, t795, t778, t772, t1205, t1362, t854, t1310, t886, t1311, t784, t775, t781, t769; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1223, t1151, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t1042, t1043, 0, -t998, t1092, t1080, t1095, t1091, t1093, 0, t942, t943, t919, t853, t946, -t866, t1344, t1286, t926, t1289, t808, t816, t787, t776, t946, t1344, t866, t1289, -t926, t1286, t796, t779, t790, t771; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t1285, 0, 0, -t1175, -t1219, 0, t1104, t1081, t1099, t1102, t1097, t1139, t984, t985, t964, pkin(6) * t964, t949, -t872, t1343, t1287, -t933, t1288, t820, t828, t791, t788, t949, t1343, t872, t1288, t933, t1287, t805, t785, t801, t774; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1285, 0, qJDD(2), 0, t1175, 0, -t1193, 0, t1160, -t1150, -t1236, -t1160, -t1234, -qJDD(3), t980, t981, 0, pkin(2) * t964, -t1261, -t1301, -t1298, t1261, t1022, -qJDD(3), t835, t840, t846, t797, -t1261, -t1298, t1301, -qJDD(3), -t1022, t1261, t823, t831, t819, t780; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t1219, t1193, 0, 0, t1092, t1080, t1095, t1091, t1093, 0, t1225, t1226, t1208, t1270, t946, -t866, t1344, t1286, t926, t1289, t1214, t1213, t1217, t1199, t946, t1344, t866, t1289, -t926, t1286, t1215, t1218, t1216, t1221; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1143, t1144, t1153, -t1164, t1158, t1164, 0, -t1200, t1032, 0, t1008, -t954, t1335, t1198, t992, t1203, t918, t921, t827, -qJ(4) * t843, t1008, t1335, t954, t1203, -t992, t1198, t842, t818, t839, t807; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1229, t1142, t1156, t1197, t1154, -t1229, t1200, 0, t1035, 0, t1007, t952, t1334, t1204, t986, t1195, t881, t897, t822, t832, t1007, t1334, -t952, t1195, -t986, t1204, t837, t812, t833, t799; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1160, t1150, t1236, t1160, t1234, qJDD(3), -t1032, -t1035, 0, 0, t1261, t1301, t1298, -t1261, -t1022, qJDD(3), t1121 - t1222 + t1340, t1120 + t1211, t1281, t1282, t1261, t1298, -t1301, qJDD(3), t1022, -t1261, t1191 + t1340, t1207, t1192 + t1302, t1212; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1079, -t1021, t1296, t1266, t1108, -t1266, 0, t982, t901, 0, t1079, t1296, t1021, -t1266, -t1108, t1266, -qJ(5) * t1021, t848, t858, -qJ(5) * t884; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1124, t1299, -t1109, -t1078, t1295, -t1124, -t982, 0, t902, 0, t1124, -t1109, -t1299, -t1124, -t1295, -t1078, t859, t847, pkin(4) * t1299, -pkin(4) * t884; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1261, t1301, t1298, -t1261, -t1022, qJDD(3), -t901, -t902, 0, 0, t1261, t1298, -t1301, qJDD(3), t1022, -t1261, t1191, t1237, t1194 + t1302, t1277; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1079, t1296, t1021, -t1266, -t1108, t1266, 0, t863, -t884, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1261, t1298, -t1301, qJDD(3), t1022, -t1261, -t863, 0, t861, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1124, t1109, t1299, t1124, t1295, t1078, t884, -t861, 0, 0;];
m_new_reg = t1;
