% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRRPP1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,theta1,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:07
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRRPP1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPP1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPP1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRPP1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRPP1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRRPP1_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:07:37
% EndTime: 2019-12-05 16:07:40
% DurationCPUTime: 3.31s
% Computational Cost: add. (5261->177), mult. (11882->228), div. (0->0), fcn. (8069->8), ass. (0->128)
t1538 = sin(pkin(8));
t1540 = cos(pkin(8));
t1545 = cos(qJ(3));
t1569 = qJD(2) * t1545;
t1543 = sin(qJ(3));
t1570 = qJD(2) * t1543;
t1505 = t1538 * t1570 - t1540 * t1569;
t1507 = (t1538 * t1545 + t1540 * t1543) * qJD(2);
t1567 = t1507 * t1505;
t1480 = qJDD(3) + t1567;
t1504 = t1507 ^ 2;
t1547 = qJD(3) ^ 2;
t1577 = -t1504 - t1547;
t1447 = t1538 * t1480 - t1540 * t1577;
t1449 = t1540 * t1480 + t1538 * t1577;
t1437 = t1543 * t1447 - t1545 * t1449;
t1544 = sin(qJ(2));
t1546 = cos(qJ(2));
t1503 = qJD(3) * t1505;
t1557 = qJD(3) * t1569;
t1561 = t1543 * qJDD(2);
t1515 = t1557 + t1561;
t1558 = qJD(3) * t1570;
t1560 = t1545 * qJDD(2);
t1550 = -t1558 + t1560;
t1549 = t1540 * t1515 + t1538 * t1550;
t1576 = -t1549 + t1503;
t1423 = t1544 * t1437 + t1546 * t1576;
t1425 = t1546 * t1437 - t1544 * t1576;
t1539 = sin(pkin(7));
t1541 = cos(pkin(7));
t1596 = t1541 * t1423 + t1539 * t1425;
t1595 = t1539 * t1423 - t1541 * t1425;
t1555 = -t1538 * t1515 + t1540 * t1550;
t1568 = qJD(3) * t1507;
t1463 = -t1555 + t1568;
t1481 = qJDD(3) - t1567;
t1487 = t1505 ^ 2;
t1578 = -t1487 - t1547;
t1581 = -t1538 * t1481 + t1540 * t1578;
t1582 = t1540 * t1481 + t1538 * t1578;
t1584 = -t1543 * t1582 + t1545 * t1581;
t1591 = t1544 * t1463 + t1546 * t1584;
t1592 = -t1546 * t1463 + t1544 * t1584;
t1594 = -t1539 * t1592 + t1541 * t1591;
t1593 = t1539 * t1591 + t1541 * t1592;
t1429 = t1545 * t1447 + t1543 * t1449;
t1462 = t1504 + t1487;
t1468 = t1503 + t1549;
t1551 = t1555 + t1568;
t1574 = t1538 * t1468 + t1540 * t1551;
t1575 = -t1540 * t1468 + t1538 * t1551;
t1580 = -t1543 * t1575 + t1545 * t1574;
t1585 = -t1544 * t1462 + t1546 * t1580;
t1586 = t1546 * t1462 + t1544 * t1580;
t1590 = -t1539 * t1586 + t1541 * t1585;
t1589 = t1539 * t1585 + t1541 * t1586;
t1583 = t1543 * t1581 + t1545 * t1582;
t1579 = t1543 * t1574 + t1545 * t1575;
t1573 = qJD(2) ^ 2;
t1572 = t1545 ^ 2;
t1571 = -2 * qJD(4);
t1521 = -t1541 * g(1) - t1539 * g(2);
t1553 = t1539 * g(1) - t1541 * g(2);
t1491 = t1546 * t1521 + t1544 * t1553;
t1485 = -t1573 * pkin(2) + qJDD(2) * pkin(6) + t1491;
t1564 = t1543 * t1485;
t1562 = t1572 * t1573;
t1535 = -g(3) + qJDD(1);
t1472 = t1545 * t1485 + t1543 * t1535;
t1534 = t1543 ^ 2;
t1559 = t1534 + t1572;
t1522 = qJD(3) * pkin(3) - qJ(4) * t1570;
t1451 = -pkin(3) * t1562 + t1550 * qJ(4) - qJD(3) * t1522 + t1472;
t1548 = qJDD(3) * pkin(3) - t1515 * qJ(4) - t1564 + (t1535 + (pkin(3) * t1570 + qJ(4) * qJD(3)) * qJD(2)) * t1545;
t1427 = t1540 * t1451 + t1505 * t1571 + t1538 * t1548;
t1556 = t1538 * t1451 - t1540 * t1548;
t1518 = t1546 * qJDD(2) - t1544 * t1573;
t1519 = -t1544 * qJDD(2) - t1546 * t1573;
t1554 = -t1539 * t1518 + t1541 * t1519;
t1490 = -t1544 * t1521 + t1546 * t1553;
t1552 = t1541 * t1518 + t1539 * t1519;
t1484 = -qJDD(2) * pkin(2) - t1573 * pkin(6) - t1490;
t1452 = -t1550 * pkin(3) - qJ(4) * t1562 + t1522 * t1570 + qJDD(4) + t1484;
t1528 = t1543 * t1573 * t1545;
t1527 = -t1547 - t1562;
t1526 = -t1534 * t1573 - t1547;
t1524 = -qJDD(3) + t1528;
t1523 = qJDD(3) + t1528;
t1520 = t1559 * t1573;
t1517 = t1559 * qJDD(2);
t1516 = -0.2e1 * t1558 + t1560;
t1514 = 0.2e1 * t1557 + t1561;
t1495 = t1545 * t1524 - t1543 * t1526;
t1494 = -t1543 * t1523 + t1545 * t1527;
t1493 = t1543 * t1524 + t1545 * t1526;
t1492 = t1545 * t1523 + t1543 * t1527;
t1489 = t1546 * t1517 - t1544 * t1520;
t1488 = t1544 * t1517 + t1546 * t1520;
t1476 = t1505 * pkin(4) - t1507 * qJ(5);
t1474 = t1546 * t1495 + t1544 * t1514;
t1473 = t1546 * t1494 - t1544 * t1516;
t1471 = t1544 * t1495 - t1546 * t1514;
t1470 = t1544 * t1494 + t1546 * t1516;
t1469 = t1545 * t1535 - t1564;
t1458 = -t1544 * t1490 + t1546 * t1491;
t1457 = t1546 * t1490 + t1544 * t1491;
t1443 = -t1543 * t1469 + t1545 * t1472;
t1442 = t1545 * t1469 + t1543 * t1472;
t1433 = t1546 * t1443 + t1544 * t1484;
t1432 = t1544 * t1443 - t1546 * t1484;
t1426 = t1507 * t1571 - t1556;
t1421 = -t1555 * pkin(4) + (pkin(4) * qJD(3) - (2 * qJD(5))) * t1507 + t1452 + t1576 * qJ(5);
t1412 = qJDD(5) - t1547 * qJ(5) - qJDD(3) * pkin(4) + ((2 * qJD(4)) + t1476) * t1507 + t1556;
t1411 = -t1547 * pkin(4) + qJDD(3) * qJ(5) + 0.2e1 * qJD(5) * qJD(3) - t1505 * t1476 + t1427;
t1406 = -t1538 * t1426 + t1540 * t1427;
t1405 = t1540 * t1426 + t1538 * t1427;
t1404 = t1540 * t1411 + t1538 * t1412;
t1403 = t1538 * t1411 - t1540 * t1412;
t1402 = -t1543 * t1405 + t1545 * t1406;
t1401 = t1545 * t1405 + t1543 * t1406;
t1400 = t1546 * t1402 + t1544 * t1452;
t1399 = t1544 * t1402 - t1546 * t1452;
t1398 = -t1543 * t1403 + t1545 * t1404;
t1397 = t1545 * t1403 + t1543 * t1404;
t1396 = t1546 * t1398 + t1544 * t1421;
t1395 = t1544 * t1398 - t1546 * t1421;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1541 * t1521 - t1539 * t1553, 0, 0, 0, 0, 0, 0, t1554, -t1552, 0, -t1539 * t1457 + t1541 * t1458, 0, 0, 0, 0, 0, 0, -t1539 * t1470 + t1541 * t1473, -t1539 * t1471 + t1541 * t1474, -t1539 * t1488 + t1541 * t1489, -t1539 * t1432 + t1541 * t1433, 0, 0, 0, 0, 0, 0, t1594, -t1595, t1590, -t1539 * t1399 + t1541 * t1400, 0, 0, 0, 0, 0, 0, t1594, t1590, t1595, -t1539 * t1395 + t1541 * t1396; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1539 * t1521 + t1541 * t1553, 0, 0, 0, 0, 0, 0, t1552, t1554, 0, t1541 * t1457 + t1539 * t1458, 0, 0, 0, 0, 0, 0, t1541 * t1470 + t1539 * t1473, t1541 * t1471 + t1539 * t1474, t1541 * t1488 + t1539 * t1489, t1541 * t1432 + t1539 * t1433, 0, 0, 0, 0, 0, 0, t1593, t1596, t1589, t1541 * t1399 + t1539 * t1400, 0, 0, 0, 0, 0, 0, t1593, t1589, -t1596, t1541 * t1395 + t1539 * t1396; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1535, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1535, 0, 0, 0, 0, 0, 0, t1492, t1493, 0, t1442, 0, 0, 0, 0, 0, 0, t1583, -t1429, t1579, t1401, 0, 0, 0, 0, 0, 0, t1583, t1579, t1429, t1397; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1521, 0, 0, 0, 0, 0, 0, t1519, -t1518, 0, t1458, 0, 0, 0, 0, 0, 0, t1473, t1474, t1489, t1433, 0, 0, 0, 0, 0, 0, t1591, t1425, t1585, t1400, 0, 0, 0, 0, 0, 0, t1591, t1585, -t1425, t1396; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1553, 0, 0, 0, 0, 0, 0, t1518, t1519, 0, t1457, 0, 0, 0, 0, 0, 0, t1470, t1471, t1488, t1432, 0, 0, 0, 0, 0, 0, t1592, t1423, t1586, t1399, 0, 0, 0, 0, 0, 0, t1592, t1586, -t1423, t1395; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1535, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1535, 0, 0, 0, 0, 0, 0, t1492, t1493, 0, t1442, 0, 0, 0, 0, 0, 0, t1583, -t1429, t1579, t1401, 0, 0, 0, 0, 0, 0, t1583, t1579, t1429, t1397; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1573, -qJDD(2), 0, t1491, 0, 0, 0, 0, 0, 0, t1494, t1495, t1517, t1443, 0, 0, 0, 0, 0, 0, t1584, t1437, t1580, t1402, 0, 0, 0, 0, 0, 0, t1584, t1580, -t1437, t1398; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1573, 0, t1490, 0, 0, 0, 0, 0, 0, t1516, -t1514, t1520, -t1484, 0, 0, 0, 0, 0, 0, -t1463, t1576, t1462, -t1452, 0, 0, 0, 0, 0, 0, -t1463, t1462, -t1576, -t1421; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1535, 0, 0, 0, 0, 0, 0, t1492, t1493, 0, t1442, 0, 0, 0, 0, 0, 0, t1583, -t1429, t1579, t1401, 0, 0, 0, 0, 0, 0, t1583, t1579, t1429, t1397; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1527, t1524, t1560, t1472, 0, 0, 0, 0, 0, 0, t1581, -t1449, t1574, t1406, 0, 0, 0, 0, 0, 0, t1581, t1574, t1449, t1404; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1523, t1526, -t1561, t1469, 0, 0, 0, 0, 0, 0, t1582, -t1447, t1575, t1405, 0, 0, 0, 0, 0, 0, t1582, t1575, t1447, t1403; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1516, t1514, -t1520, t1484, 0, 0, 0, 0, 0, 0, t1463, -t1576, -t1462, t1452, 0, 0, 0, 0, 0, 0, t1463, -t1462, t1576, t1421; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1578, -t1480, t1551, t1427, 0, 0, 0, 0, 0, 0, t1578, t1551, t1480, t1411; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1481, t1577, -t1468, t1426, 0, 0, 0, 0, 0, 0, t1481, -t1468, -t1577, -t1412; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1463, -t1576, -t1462, t1452, 0, 0, 0, 0, 0, 0, t1463, -t1462, t1576, t1421; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1578, t1551, t1480, t1411; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1463, -t1462, t1576, t1421; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1481, t1468, t1577, t1412;];
f_new_reg = t1;
