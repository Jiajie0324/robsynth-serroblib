% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRPR16
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:39
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRPR16_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR16_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR16_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR16_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR16_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPRPR16_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:39:50
% EndTime: 2019-12-31 18:39:51
% DurationCPUTime: 1.62s
% Computational Cost: add. (2663->207), mult. (5453->183), div. (0->0), fcn. (2920->6), ass. (0->114)
t1009 = sin(qJ(1));
t1012 = cos(qJ(1));
t1008 = sin(qJ(3));
t1011 = cos(qJ(3));
t1014 = qJD(1) ^ 2;
t1032 = t1011 * t1014;
t1027 = t1008 * t1032;
t986 = qJDD(3) + t1027;
t1006 = t1011 ^ 2;
t1013 = qJD(3) ^ 2;
t991 = -t1006 * t1014 - t1013;
t961 = t1008 * t986 - t1011 * t991;
t1029 = t1011 * qJDD(1);
t1036 = qJD(1) * t1008;
t999 = qJD(3) * t1036;
t980 = -0.2e1 * t999 + t1029;
t1054 = t1009 * t961 - t1012 * t980;
t987 = qJDD(3) - t1027;
t1005 = t1008 ^ 2;
t1034 = t1005 * t1014;
t990 = -t1013 - t1034;
t959 = t1008 * t990 + t1011 * t987;
t1033 = t1011 * qJD(1);
t1026 = qJD(3) * t1033;
t1030 = t1008 * qJDD(1);
t977 = 0.2e1 * t1026 + t1030;
t1053 = t1009 * t959 + t1012 * t977;
t1052 = t1009 * t980 + t1012 * t961;
t1051 = -t1009 * t977 + t1012 * t959;
t1007 = sin(qJ(5));
t1010 = cos(qJ(5));
t973 = qJD(3) * t1007 - t1010 * t1036;
t1050 = t973 ^ 2;
t975 = qJD(3) * t1010 + t1007 * t1036;
t1049 = t975 ^ 2;
t995 = qJD(5) + t1033;
t1048 = t995 ^ 2;
t1047 = -2 * qJD(4);
t1046 = pkin(3) + pkin(7);
t1045 = -pkin(6) - pkin(1);
t1044 = t1008 * g(3);
t1043 = t975 * t973;
t1038 = qJD(5) - t995;
t1037 = qJD(5) + t995;
t1035 = qJD(2) * qJD(1);
t1031 = t1005 + t1006;
t1028 = t1045 * t1014;
t988 = t1009 * g(1) - t1012 * g(2);
t1020 = -t1014 * qJ(2) + qJDD(2) - t988;
t1017 = qJDD(1) * t1045 + t1020;
t955 = -g(3) * t1011 + t1008 * t1017;
t979 = -t999 + t1029;
t978 = t1026 + t1030;
t1025 = -t1007 * qJDD(3) + t1010 * t978;
t989 = -t1012 * g(1) - t1009 * g(2);
t1024 = -qJDD(5) - t979;
t965 = t1008 * t991 + t1011 * t986;
t964 = t1008 * t987 - t1011 * t990;
t1023 = -t1010 * qJDD(3) - t1007 * t978;
t1022 = pkin(4) * t1033 - qJD(3) * pkin(7);
t1021 = -qJDD(1) * qJ(2) - t989;
t1019 = t1021 - 0.2e1 * t1035;
t1018 = -pkin(3) * t1026 + t1021 + (t979 - t999) * qJ(4);
t976 = (pkin(3) * t1008 - qJ(4) * t1011) * qJD(1);
t948 = pkin(3) * t1013 - qJDD(3) * qJ(4) + qJD(3) * t1047 + t1036 * t976 - t955;
t1016 = t1011 * t1017;
t1015 = t1013 * qJ(4) - t976 * t1033 - qJDD(4) + t1016;
t985 = t1031 * t1014;
t984 = qJDD(1) * t1009 + t1012 * t1014;
t983 = qJDD(1) * t1012 - t1009 * t1014;
t982 = t1031 * qJDD(1);
t970 = qJDD(1) * pkin(1) - t1020;
t969 = t1014 * pkin(1) + t1019;
t968 = -t1028 + t1019;
t958 = -t1009 * t982 - t1012 * t985;
t957 = -t1009 * t985 + t1012 * t982;
t956 = -t1048 - t1049;
t954 = t1016 + t1044;
t953 = -t1048 - t1050;
t952 = t1024 - t1043;
t951 = -t1024 - t1043;
t950 = -t1049 - t1050;
t949 = qJDD(3) * pkin(3) + t1015 + t1044;
t947 = t1038 * t973 + t1023;
t946 = -t1037 * t973 - t1023;
t945 = -t1038 * t975 + t1025;
t944 = t1037 * t975 - t1025;
t943 = -t1008 * t954 + t1011 * t955;
t942 = t1008 * t955 + t1011 * t954;
t941 = -t978 * pkin(3) - t1028 + 0.2e1 * (qJD(4) * t1011 - qJD(2)) * qJD(1) + t1018;
t940 = -t1007 * t956 + t1010 * t952;
t939 = t1007 * t952 + t1010 * t956;
t938 = -t1007 * t951 + t1010 * t953;
t937 = t1007 * t953 + t1010 * t951;
t936 = t979 * pkin(4) - t1046 * qJDD(3) + (pkin(4) * qJD(1) * qJD(3) + pkin(7) * t1032 - g(3)) * t1008 - t1015;
t935 = pkin(4) * t978 + pkin(7) * t1034 - qJD(3) * t1022 + t948;
t934 = 0.2e1 * t1035 + t1046 * t978 + (-pkin(4) * t1005 + t1045) * t1014 - t1018 + (t1047 - t1022) * t1033;
t933 = -t1008 * t949 - t1011 * t948;
t932 = -t1008 * t948 + t1011 * t949;
t931 = -t1007 * t947 + t1010 * t945;
t930 = t1007 * t945 + t1010 * t947;
t929 = t1008 * t939 + t1011 * t946;
t928 = t1008 * t946 - t1011 * t939;
t927 = t1008 * t937 + t1011 * t944;
t926 = t1008 * t944 - t1011 * t937;
t925 = t1008 * t930 + t1011 * t950;
t924 = t1008 * t950 - t1011 * t930;
t923 = t1007 * t936 + t1010 * t934;
t922 = -t1007 * t934 + t1010 * t936;
t921 = -t1007 * t922 + t1010 * t923;
t920 = t1007 * t923 + t1010 * t922;
t919 = t1008 * t920 - t1011 * t935;
t918 = -t1008 * t935 - t1011 * t920;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t984, -t983, 0, -t1009 * t988 + t1012 * t989, 0, 0, 0, 0, 0, 0, 0, t984, t983, -t1009 * t970 - t1012 * t969, 0, 0, 0, 0, 0, 0, t1053, -t1054, t958, t1009 * t942 - t1012 * t968, 0, 0, 0, 0, 0, 0, t958, -t1053, t1054, t1009 * t932 - t1012 * t941, 0, 0, 0, 0, 0, 0, t1009 * t926 + t1012 * t938, t1009 * t928 + t1012 * t940, t1009 * t924 + t1012 * t931, t1009 * t918 + t1012 * t921; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t983, -t984, 0, t1009 * t989 + t1012 * t988, 0, 0, 0, 0, 0, 0, 0, -t983, t984, -t1009 * t969 + t1012 * t970, 0, 0, 0, 0, 0, 0, -t1051, t1052, t957, -t1009 * t968 - t1012 * t942, 0, 0, 0, 0, 0, 0, t957, t1051, -t1052, -t1009 * t941 - t1012 * t932, 0, 0, 0, 0, 0, 0, t1009 * t938 - t1012 * t926, t1009 * t940 - t1012 * t928, t1009 * t931 - t1012 * t924, t1009 * t921 - t1012 * t918; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t964, -t965, 0, t943, 0, 0, 0, 0, 0, 0, 0, t964, t965, t933, 0, 0, 0, 0, 0, 0, t927, t929, t925, t919; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1014, -qJDD(1), 0, t989, 0, 0, 0, 0, 0, 0, 0, t1014, qJDD(1), -t969, 0, 0, 0, 0, 0, 0, t977, t980, -t985, -t968, 0, 0, 0, 0, 0, 0, -t985, -t977, -t980, -t941, 0, 0, 0, 0, 0, 0, t938, t940, t931, t921; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1014, 0, t988, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), t1014, t970, 0, 0, 0, 0, 0, 0, -t959, t961, t982, -t942, 0, 0, 0, 0, 0, 0, t982, t959, -t961, -t932, 0, 0, 0, 0, 0, 0, -t926, -t928, -t924, -t918; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t964, -t965, 0, t943, 0, 0, 0, 0, 0, 0, 0, t964, t965, t933, 0, 0, 0, 0, 0, 0, t927, t929, t925, t919; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t964, -t965, 0, t943, 0, 0, 0, 0, 0, 0, 0, t964, t965, t933, 0, 0, 0, 0, 0, 0, t927, t929, t925, t919; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1014, -qJDD(1), t969, 0, 0, 0, 0, 0, 0, -t977, -t980, t985, t968, 0, 0, 0, 0, 0, 0, t985, t977, t980, t941, 0, 0, 0, 0, 0, 0, -t938, -t940, -t931, -t921; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1014, -t970, 0, 0, 0, 0, 0, 0, t959, -t961, -t982, t942, 0, 0, 0, 0, 0, 0, -t982, -t959, t961, t932, 0, 0, 0, 0, 0, 0, t926, t928, t924, t918; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t990, -t986, -t1030, t955, 0, 0, 0, 0, 0, 0, -t1030, -t990, t986, -t948, 0, 0, 0, 0, 0, 0, t944, t946, t950, -t935; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t987, t991, -t1029, t954, 0, 0, 0, 0, 0, 0, -t1029, -t987, -t991, t949, 0, 0, 0, 0, 0, 0, -t937, -t939, -t930, -t920; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t977, t980, -t985, -t968, 0, 0, 0, 0, 0, 0, -t985, -t977, -t980, -t941, 0, 0, 0, 0, 0, 0, t938, t940, t931, t921; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t985, -t977, -t980, -t941, 0, 0, 0, 0, 0, 0, t938, t940, t931, t921; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1030, t990, -t986, t948, 0, 0, 0, 0, 0, 0, -t944, -t946, -t950, t935; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1029, t987, t991, -t949, 0, 0, 0, 0, 0, 0, t937, t939, t930, t920; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t953, t952, t945, t923; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t951, t956, t947, t922; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t944, t946, t950, -t935;];
f_new_reg = t1;
