% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRPR16
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:39
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRPR16_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR16_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR16_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR16_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR16_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPRPR16_invdynB_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:39:36
% EndTime: 2019-12-31 18:39:43
% DurationCPUTime: 4.50s
% Computational Cost: add. (7672->399), mult. (15618->500), div. (0->0), fcn. (8273->6), ass. (0->277)
t397 = qJD(3) ^ 2;
t392 = sin(qJ(3));
t389 = t392 ^ 2;
t398 = qJD(1) ^ 2;
t464 = t389 * t398;
t369 = -t397 - t464;
t395 = cos(qJ(3));
t449 = t395 * t398;
t374 = t392 * t449;
t365 = qJDD(3) - t374;
t450 = t395 * t365;
t312 = t392 * t369 + t450;
t439 = qJD(1) * qJD(3);
t428 = t395 * t439;
t436 = t392 * qJDD(1);
t354 = 0.2e1 * t428 + t436;
t393 = sin(qJ(1));
t396 = cos(qJ(1));
t278 = t396 * t312 - t393 * t354;
t496 = pkin(5) * t278;
t390 = t395 ^ 2;
t383 = t390 * t398;
t371 = -t383 - t397;
t364 = qJDD(3) + t374;
t460 = t392 * t364;
t315 = -t395 * t371 + t460;
t381 = t392 * t439;
t434 = t395 * qJDD(1);
t357 = -0.2e1 * t381 + t434;
t279 = t396 * t315 + t393 * t357;
t495 = pkin(5) * t279;
t282 = t393 * t312 + t396 * t354;
t494 = pkin(5) * t282;
t285 = t393 * t315 - t396 * t357;
t493 = pkin(5) * t285;
t476 = -pkin(6) - pkin(1);
t391 = sin(qJ(5));
t394 = cos(qJ(5));
t442 = qJD(1) * t392;
t347 = t391 * qJD(3) - t394 * t442;
t349 = t394 * qJD(3) + t391 * t442;
t306 = t349 * t347;
t356 = -t381 + t434;
t345 = qJDD(5) + t356;
t479 = -t306 + t345;
t492 = t391 * t479;
t491 = t394 * t479;
t490 = t476 * t312;
t489 = t476 * t315;
t459 = t392 * t365;
t321 = -t395 * t369 + t459;
t488 = t476 * t321;
t451 = t395 * t364;
t322 = t392 * t371 + t451;
t487 = t476 * t322;
t368 = -t397 + t464;
t314 = t392 * t368 + t451;
t433 = t396 * qJDD(1);
t486 = t393 * t314 - t392 * t433;
t435 = t393 * qJDD(1);
t485 = t396 * t314 + t392 * t435;
t370 = -t383 + t397;
t317 = t395 * t370 + t459;
t484 = t393 * t317 + t395 * t433;
t483 = t396 * t317 - t393 * t434;
t482 = -pkin(2) * t312 - qJ(2) * t321;
t481 = pkin(2) * t315 - qJ(2) * t322;
t480 = t476 * t398;
t478 = -pkin(3) * t428 - qJ(4) * t381;
t343 = t347 ^ 2;
t344 = t349 ^ 2;
t441 = t395 * qJD(1);
t377 = qJD(5) + t441;
t372 = t377 ^ 2;
t477 = pkin(3) + pkin(7);
t362 = t383 + t464;
t475 = pkin(2) * t362;
t474 = pkin(3) * t392;
t473 = pkin(3) * t395;
t443 = t389 + t390;
t359 = t443 * qJDD(1);
t446 = t396 * t359;
t303 = -t393 * t362 + t446;
t472 = pkin(5) * t303;
t471 = t392 * g(3);
t470 = qJ(4) * t392;
t469 = qJ(4) * t395;
t468 = qJDD(1) * pkin(1);
t467 = t356 * qJ(4);
t466 = t377 * t391;
t465 = t377 * t394;
t355 = t428 + t436;
t416 = -t469 + t474;
t351 = t416 * qJD(1);
t366 = t393 * g(1) - t396 * g(2);
t418 = qJDD(2) - t366;
t408 = -t398 * qJ(2) + t418;
t333 = t476 * qJDD(1) + t408;
t425 = t395 * g(3) - t392 * t333;
t406 = -qJDD(3) * qJ(4) + t351 * t442 + t425;
t401 = t397 * pkin(3) + t406;
t410 = pkin(4) * t441 - qJD(3) * pkin(7);
t437 = qJD(4) * qJD(3);
t239 = t355 * pkin(4) + pkin(7) * t464 - qJD(3) * t410 + t401 - 0.2e1 * t437;
t463 = t391 * t239;
t288 = t306 + t345;
t462 = t391 * t288;
t367 = t396 * g(1) + t393 * g(2);
t388 = qJDD(1) * qJ(2);
t411 = t367 - t388;
t403 = t411 - t480;
t438 = qJD(2) * qJD(1);
t326 = t403 - 0.2e1 * t438;
t461 = t392 * t326;
t456 = t393 * t359;
t455 = t394 * t239;
t454 = t394 * t288;
t453 = t395 * t326;
t452 = t395 * t333;
t445 = t397 * qJ(4);
t444 = t362 - t397;
t440 = qJD(5) + t377;
t432 = t392 * t306;
t431 = t395 * t306;
t385 = 0.2e1 * t438;
t409 = t385 - t411;
t400 = -0.2e1 * qJD(4) * t441 + t409 - t467 - t478;
t231 = -t410 * t441 + t477 * t355 + (-t389 * pkin(4) + t476) * t398 + t400;
t415 = t351 * t441 + qJDD(4) - t452;
t240 = t356 * pkin(4) - t445 - t477 * qJDD(3) + (pkin(4) * t439 + pkin(7) * t449 - g(3)) * t392 + t415;
t205 = t391 * t231 - t394 * t240;
t335 = -t398 * pkin(1) + t409;
t336 = -t408 + t468;
t281 = t396 * t335 - t393 * t336;
t308 = -t393 * t366 - t396 * t367;
t424 = t391 * qJDD(3) - t394 * t355;
t423 = t393 * t374;
t422 = t396 * t374;
t421 = -qJ(2) * t362 - t476 * t359;
t360 = -t393 * t398 + t433;
t420 = pkin(5) * t360 + t393 * g(3);
t361 = t396 * t398 + t435;
t419 = -pkin(5) * t361 + t396 * g(3);
t417 = -t470 - t473;
t300 = t452 + t471;
t206 = t394 * t231 + t391 * t240;
t191 = -t394 * t205 + t391 * t206;
t192 = t391 * t205 + t394 * t206;
t258 = t395 * t300 - t392 * t425;
t259 = -t392 * t300 - t395 * t425;
t276 = t393 * t335 + t396 * t336;
t414 = -t395 * t368 + t460;
t413 = -t392 * t370 + t450;
t307 = t396 * t366 - t393 * t367;
t412 = t394 * qJDD(3) + t391 * t355;
t407 = t415 - t471;
t405 = (-qJD(5) + t377) * t349 - t424;
t295 = -t347 * qJD(5) + t412;
t384 = 0.2e1 * t437;
t404 = t384 - t406;
t402 = -qJDD(3) * pkin(3) + t407;
t399 = 0.2e1 * (qJD(4) * t395 - qJD(2)) * qJD(1) - t355 * pkin(3) + t403 + t478;
t363 = t383 - t464;
t346 = t443 * t439;
t334 = t377 * t347;
t332 = -t344 + t372;
t331 = t343 - t372;
t330 = t396 * qJDD(3) - t393 * t346;
t329 = t393 * qJDD(3) + t396 * t346;
t328 = -t392 * t356 - t390 * t439;
t327 = t395 * t355 - t389 * t439;
t320 = (t356 - t381) * t395;
t310 = (t355 + t428) * t392;
t309 = -pkin(2) * t359 + qJDD(1) * t417;
t305 = t344 - t343;
t304 = -t396 * t362 - t456;
t302 = -t344 - t372;
t299 = pkin(5) * t304;
t298 = -t395 * t354 - t392 * t357;
t297 = t392 * t354 - t395 * t357;
t296 = -t372 - t343;
t294 = -t349 * qJD(5) - t424;
t293 = -t393 * t327 - t422;
t292 = -t393 * t328 + t422;
t291 = t396 * t327 - t423;
t290 = t396 * t328 + t423;
t286 = -t343 - t344;
t275 = (-t347 * t394 + t349 * t391) * t377;
t274 = (t347 * t391 + t349 * t394) * t377;
t273 = -t393 * t297 + t396 * t363;
t272 = t396 * t297 + t393 * t363;
t271 = -t402 + t445;
t270 = t384 - t401;
t269 = t295 + t334;
t268 = t295 - t334;
t267 = -t440 * t347 + t412;
t264 = t440 * t349 + t424;
t263 = t394 * t295 - t349 * t466;
t262 = -t391 * t295 - t349 * t465;
t261 = -t391 * t294 + t347 * t465;
t260 = -t394 * t294 - t347 * t466;
t257 = t444 * qJ(4) + t402;
t256 = -t395 * t274 - t392 * t345;
t255 = t444 * pkin(3) + t404;
t254 = t394 * t331 - t462;
t253 = -t391 * t332 + t491;
t252 = -t391 * t331 - t454;
t251 = -t394 * t332 - t492;
t250 = t399 + t467;
t249 = -t391 * t302 - t454;
t248 = t394 * t302 - t462;
t247 = -t259 - t475;
t246 = t425 - t481;
t245 = t300 - t482;
t244 = t394 * t296 - t492;
t243 = t391 * t296 + t491;
t242 = t480 + (t354 + t355) * pkin(3) + t400;
t241 = (t356 + t357) * qJ(4) + t399;
t237 = pkin(2) * t354 - t453 - t488;
t236 = pkin(2) * t357 + t461 - t487;
t235 = t393 * t258 - t396 * t326;
t234 = -t396 * t258 - t393 * t326;
t233 = -t395 * t260 + t432;
t232 = -t395 * t262 - t432;
t230 = t395 * t270 - t392 * t271;
t229 = t392 * t270 + t395 * t271;
t228 = t391 * t269 + t394 * t405;
t227 = -t394 * t264 - t391 * t268;
t226 = -t394 * t269 + t391 * t405;
t225 = t391 * t264 - t394 * t268;
t224 = (-t369 - t397) * qJ(4) + (-qJDD(3) - t365) * pkin(3) + t407 + t482;
t223 = qJ(4) * t364 + (-t371 - t397) * pkin(3) + t404 + t481;
t222 = -t395 * t251 - t392 * t269;
t221 = -t395 * t252 - t392 * t405;
t220 = pkin(2) * t258 - qJ(2) * t259;
t219 = t392 * t248 + t395 * t267;
t218 = -t395 * t248 + t392 * t267;
t217 = t392 * t243 + t395 * t264;
t216 = -t395 * t243 + t392 * t264;
t215 = -t395 * t255 - t392 * t257 - t475;
t214 = -t395 * t225 - t392 * t305;
t213 = -pkin(2) * t326 + t476 * t259;
t212 = t392 * t226 + t395 * t286;
t211 = -t395 * t226 + t392 * t286;
t210 = -t392 * t241 + (-pkin(2) - t473) * t357 + t487;
t209 = -t395 * t242 + (-pkin(2) - t470) * t354 + t488;
t208 = t393 * t229 - t396 * t250;
t207 = -t396 * t229 - t393 * t250;
t204 = t393 * t218 + t396 * t249;
t203 = -t396 * t218 + t393 * t249;
t202 = t393 * t216 + t396 * t244;
t201 = -t396 * t216 + t393 * t244;
t200 = pkin(4) * t226 - qJ(4) * t228;
t199 = t393 * t211 + t396 * t228;
t198 = -t396 * t211 + t393 * t228;
t197 = pkin(4) * t267 - t477 * t249 + t463;
t196 = pkin(4) * t264 - t477 * t244 - t455;
t195 = pkin(4) * t248 - qJ(4) * t249 - t206;
t194 = pkin(2) * t229 + pkin(3) * t271 - qJ(2) * t230 + qJ(4) * t270;
t193 = pkin(4) * t243 - qJ(4) * t244 - t205;
t190 = t476 * t230 + (-pkin(2) + t417) * t250;
t189 = t392 * t191 - t395 * t239;
t188 = -t395 * t191 - t392 * t239;
t187 = pkin(2) * t218 - qJ(2) * t219 + qJ(4) * t267 - t477 * t248 - t455;
t186 = pkin(2) * t216 - qJ(2) * t217 + qJ(4) * t264 - t477 * t243 - t463;
t185 = pkin(4) * t286 - t477 * t228 - t192;
t184 = pkin(4) * t191 - qJ(4) * t192;
t183 = -pkin(4) * t239 - t477 * t192;
t182 = t393 * t188 + t396 * t192;
t181 = -t396 * t188 + t393 * t192;
t180 = pkin(2) * t249 - t392 * t195 - t395 * t197 + t476 * t219;
t179 = pkin(2) * t211 - qJ(2) * t212 + qJ(4) * t286 - t477 * t226 - t191;
t178 = pkin(2) * t244 - t392 * t193 - t395 * t196 + t476 * t217;
t177 = pkin(2) * t228 - t395 * t185 - t392 * t200 + t476 * t212;
t176 = pkin(2) * t188 - qJ(2) * t189 - qJ(4) * t239 - t477 * t191;
t175 = pkin(2) * t192 - t395 * t183 - t392 * t184 + t476 * t189;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t361, -t360, 0, t308, 0, 0, 0, 0, 0, 0, 0, t361, t360, t281, 0, 0, 0, 0, 0, 0, t282, -t285, t304, t235, 0, 0, 0, 0, 0, 0, t304, -t282, t285, t208, 0, 0, 0, 0, 0, 0, t202, t204, t199, t182; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t360, -t361, 0, t307, 0, 0, 0, 0, 0, 0, 0, -t360, t361, t276, 0, 0, 0, 0, 0, 0, -t278, t279, t303, t234, 0, 0, 0, 0, 0, 0, t303, t278, -t279, t207, 0, 0, 0, 0, 0, 0, t201, t203, t198, t181; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t321, -t322, 0, t259, 0, 0, 0, 0, 0, 0, 0, t321, t322, t230, 0, 0, 0, 0, 0, 0, t217, t219, t212, t189; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t360, 0, -t361, 0, -t420, -t419, -t307, -pkin(5) * t307, 0, -t360, t361, 0, 0, 0, -t276, t420, t419, -pkin(5) * t276 + (-pkin(1) * t393 + qJ(2) * t396) * g(3), t292, t273, t484, t293, t486, t330, -t393 * t237 + t396 * t245 + t496, -t393 * t236 + t396 * t246 - t495, -pkin(2) * t446 - t393 * t247 - t472, -pkin(5) * t234 - t393 * t213 + t396 * t220, t330, -t484, -t486, t292, t273, t293, -t393 * t215 + t396 * t309 - t472, -t393 * t209 + t396 * t224 - t496, -t393 * t210 + t396 * t223 + t495, -pkin(5) * t207 - t393 * t190 + t396 * t194, -t393 * t232 + t396 * t263, -t393 * t214 + t396 * t227, -t393 * t222 + t396 * t253, -t393 * t233 + t396 * t261, -t393 * t221 + t396 * t254, -t393 * t256 + t396 * t275, -pkin(5) * t201 - t393 * t178 + t396 * t186, -pkin(5) * t203 - t393 * t180 + t396 * t187, -pkin(5) * t198 - t393 * t177 + t396 * t179, -pkin(5) * t181 - t393 * t175 + t396 * t176; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t361, 0, t360, 0, t419, -t420, t308, pkin(5) * t308, 0, -t361, -t360, 0, 0, 0, t281, -t419, t420, pkin(5) * t281 + (pkin(1) * t396 + qJ(2) * t393) * g(3), t290, t272, -t483, t291, -t485, t329, t396 * t237 + t393 * t245 + t494, t396 * t236 + t393 * t246 - t493, -pkin(2) * t456 + t396 * t247 + t299, pkin(5) * t235 + t396 * t213 + t393 * t220, t329, t483, t485, t290, t272, t291, t396 * t215 + t393 * t309 + t299, t396 * t209 + t393 * t224 - t494, t396 * t210 + t393 * t223 + t493, pkin(5) * t208 + t396 * t190 + t393 * t194, t396 * t232 + t393 * t263, t396 * t214 + t393 * t227, t396 * t222 + t393 * t253, t396 * t233 + t393 * t261, t396 * t221 + t393 * t254, t396 * t256 + t393 * t275, pkin(5) * t202 + t396 * t178 + t393 * t186, pkin(5) * t204 + t396 * t180 + t393 * t187, pkin(5) * t199 + t396 * t177 + t393 * t179, pkin(5) * t182 + t396 * t175 + t393 * t176; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t366, t367, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t418 - 0.2e1 * t468, -t367 + t385 + 0.2e1 * t388, pkin(1) * t336 + qJ(2) * t335, t320, t298, t413, t310, -t414, 0, qJ(2) * t354 - t461 + t490, qJ(2) * t357 - t453 - t489, -t258 + t421, -qJ(2) * t326 + t476 * t258, 0, -t413, t414, t320, t298, t310, -t392 * t255 + t395 * t257 + t421, -t392 * t242 + (-qJ(2) + t469) * t354 - t490, t395 * t241 + (-qJ(2) - t474) * t357 + t489, t476 * t229 + (-qJ(2) - t416) * t250, -t392 * t262 + t431, -t392 * t225 + t395 * t305, -t392 * t251 + t395 * t269, -t392 * t260 - t431, -t392 * t252 + t395 * t405, -t392 * t274 + t395 * t345, qJ(2) * t244 + t395 * t193 - t392 * t196 + t476 * t216, qJ(2) * t249 + t395 * t195 - t392 * t197 + t476 * t218, qJ(2) * t228 - t392 * t185 + t395 * t200 + t476 * t211, qJ(2) * t192 - t392 * t183 + t395 * t184 + t476 * t188;];
tauB_reg = t1;
