% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRPR16
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:39
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRPR16_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR16_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR16_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR16_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR16_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPRPR16_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:39:43
% EndTime: 2019-12-31 18:39:50
% DurationCPUTime: 7.27s
% Computational Cost: add. (15840->529), mult. (32254->534), div. (0->0), fcn. (16840->6), ass. (0->336)
t747 = qJD(1) ^ 2;
t744 = cos(qJ(3));
t883 = t744 ^ 2;
t733 = t883 * t747;
t746 = qJD(3) ^ 2;
t721 = -t733 - t746;
t741 = sin(qJ(3));
t840 = t744 * t747;
t724 = t741 * t840;
t712 = qJDD(3) + t724;
t850 = t741 * t712;
t654 = -t744 * t721 + t850;
t829 = qJD(1) * qJD(3);
t731 = t741 * t829;
t824 = t744 * qJDD(1);
t703 = -0.2e1 * t731 + t824;
t742 = sin(qJ(1));
t745 = cos(qJ(1));
t917 = pkin(5) * (t745 * t654 + t742 * t703);
t916 = pkin(5) * (t742 * t654 - t745 * t703);
t739 = t741 ^ 2;
t859 = t739 * t747;
t719 = -t746 - t859;
t713 = qJDD(3) - t724;
t841 = t744 * t713;
t651 = t741 * t719 + t841;
t813 = t744 * t829;
t826 = t741 * qJDD(1);
t700 = 0.2e1 * t813 + t826;
t915 = pkin(5) * (t745 * t651 - t742 * t700);
t914 = pkin(5) * (t742 * t651 + t745 * t700);
t913 = pkin(2) * t651;
t912 = pkin(2) * t654;
t911 = pkin(6) * t651;
t910 = pkin(6) * t654;
t849 = t741 * t713;
t661 = -t744 * t719 + t849;
t909 = pkin(6) * t661;
t842 = t744 * t712;
t663 = t741 * t721 + t842;
t908 = pkin(6) * t663;
t907 = qJ(2) * t661;
t906 = qJ(2) * t663;
t740 = sin(qJ(5));
t743 = cos(qJ(5));
t832 = qJD(1) * t741;
t693 = t740 * qJD(3) - t743 * t832;
t695 = t743 * qJD(3) + t740 * t832;
t646 = t695 * t693;
t702 = -t731 + t824;
t691 = qJDD(5) + t702;
t888 = -t646 + t691;
t905 = t740 * t888;
t904 = t743 * t888;
t881 = -pkin(6) - pkin(1);
t903 = t881 * t651;
t902 = t881 * t661;
t901 = t881 * t663;
t718 = -t746 + t859;
t650 = t741 * t718 + t842;
t823 = t745 * qJDD(1);
t900 = t742 * t650 - t741 * t823;
t825 = t742 * qJDD(1);
t899 = t745 * t650 + t741 * t825;
t894 = qJ(2) * t703 - t881 * t654;
t720 = -t733 + t746;
t655 = t744 * t720 + t849;
t893 = t742 * t655 + t744 * t823;
t892 = t745 * t655 - t742 * t824;
t701 = t813 + t826;
t716 = t745 * g(1) + t742 * g(2);
t738 = qJDD(1) * qJ(2);
t782 = t716 - t738;
t890 = t881 * t747;
t762 = t782 - t890;
t886 = -pkin(3) * t813 - qJ(4) * t731;
t750 = 0.2e1 * (qJD(4) * t744 - qJD(2)) * qJD(1) - t701 * pkin(3) + t762 + t886;
t863 = t702 * qJ(4);
t591 = t750 + t863;
t866 = qJ(4) * t741;
t875 = pkin(3) * t744;
t791 = -t866 - t875;
t891 = (pkin(2) - t791) * t591;
t828 = qJD(2) * qJD(1);
t735 = 0.2e1 * t828;
t831 = t744 * qJD(1);
t757 = -0.2e1 * qJD(4) * t831 + t735 - t782 - t863 - t886;
t781 = pkin(4) * t831 - qJD(3) * pkin(7);
t882 = pkin(3) + pkin(7);
t563 = -t781 * t831 + t882 * t701 + (-t739 * pkin(4) + t881) * t747 + t757;
t865 = qJ(4) * t744;
t876 = pkin(3) * t741;
t697 = (-t865 + t876) * qJD(1);
t715 = t742 * g(1) - t745 * g(2);
t794 = qJDD(2) - t715;
t773 = -t747 * qJ(2) + t794;
t758 = t881 * qJDD(1) + t773;
t755 = t744 * t758;
t753 = t697 * t831 + qJDD(4) - t755;
t836 = t746 * qJ(4);
t578 = -t836 + t702 * pkin(4) - t882 * qJDD(3) + (pkin(4) * t829 + pkin(7) * t840 - g(3)) * t741 + t753;
t531 = t740 * t563 - t743 * t578;
t532 = t743 * t563 + t740 * t578;
t518 = -t743 * t531 + t740 * t532;
t635 = -t693 * qJD(5) + t743 * qJDD(3) + t740 * t701;
t727 = qJD(5) + t831;
t677 = t727 * t693;
t889 = t635 - t677;
t868 = t741 * g(3);
t642 = t755 + t868;
t643 = t744 * g(3) - t741 * t758;
t601 = t744 * t642 - t741 * t643;
t821 = t739 + t883;
t707 = t821 * qJDD(1);
t711 = t733 + t859;
t887 = pkin(1) * t707 - qJ(2) * t711;
t801 = t740 * qJDD(3) - t743 * t701;
t612 = (qJD(5) - t727) * t695 + t801;
t581 = t890 + (t700 + t701) * pkin(3) + t757;
t885 = (pkin(2) + t866) * t700 + t744 * t581;
t579 = (t702 + t703) * qJ(4) + t750;
t884 = (pkin(2) + t875) * t703 + t741 * t579;
t689 = t693 ^ 2;
t690 = t695 ^ 2;
t722 = t727 ^ 2;
t880 = pkin(2) * t601;
t820 = -0.2e1 * t828;
t669 = t762 + t820;
t879 = pkin(2) * t669;
t878 = pkin(2) * t707;
t877 = pkin(2) * t711;
t874 = pkin(4) * t518;
t616 = t635 + t677;
t558 = -t612 * t740 - t743 * t616;
t873 = pkin(4) * t558;
t763 = qJDD(3) * qJ(4) - t697 * t832 - t643;
t759 = t746 * pkin(3) - t763;
t827 = qJD(4) * qJD(3);
t819 = -0.2e1 * t827;
t617 = t759 + t819;
t577 = t701 * pkin(4) + pkin(7) * t859 - qJD(3) * t781 + t617;
t872 = pkin(4) * t577;
t837 = t745 * t707;
t871 = pkin(5) * (-t742 * t711 + t837);
t870 = pkin(6) * t707;
t869 = pkin(7) * t518;
t864 = qJDD(1) * pkin(1);
t862 = t727 * t695;
t861 = t727 * t740;
t860 = t727 * t743;
t857 = t740 * t577;
t629 = t646 + t691;
t856 = t740 * t629;
t854 = t741 * t581;
t852 = t741 * t669;
t851 = t741 * t703;
t846 = t742 * t707;
t573 = t743 * t577;
t845 = t743 * t629;
t647 = t744 * t669;
t843 = t744 * t700;
t835 = -pkin(3) * t851 + t744 * t579;
t751 = -qJDD(3) * pkin(3) + t753 - t868;
t619 = -t751 + t836;
t834 = pkin(3) * t619 - qJ(4) * t617;
t833 = -t746 + t711;
t822 = -t690 - t722;
t818 = t741 * t646;
t817 = t744 * t646;
t588 = t743 * t822 - t856;
t809 = -pkin(7) * t588 - t573;
t808 = -qJ(2) + t865;
t519 = t740 * t531 + t743 * t532;
t507 = -t882 * t519 - t872;
t509 = -qJ(4) * t519 + t874;
t807 = -t741 * t507 + t744 * t509;
t560 = -t612 * t743 + t740 * t616;
t626 = -t689 - t690;
t768 = pkin(4) * t626 - t519;
t510 = -t882 * t560 + t768;
t528 = -qJ(4) * t560 + t873;
t806 = -t741 * t510 + t744 * t528;
t636 = -t722 - t689;
t583 = t743 * t636 - t905;
t582 = t740 * t636 + t904;
t780 = -pkin(4) * t582 + t531;
t521 = -qJ(4) * t583 - t780;
t611 = (qJD(5) + t727) * t695 + t801;
t790 = pkin(4) * t611 - t573;
t525 = -t882 * t583 + t790;
t805 = t744 * t521 - t741 * t525;
t589 = -t740 * t822 - t845;
t767 = -pkin(4) * t588 + t532;
t524 = -qJ(4) * t589 - t767;
t789 = pkin(4) * t889 + t857;
t526 = -t882 * t589 + t789;
t804 = t744 * t524 - t741 * t526;
t678 = t747 * pkin(1) + t782 + t820;
t679 = -t773 + t864;
t803 = -t745 * t678 - t742 * t679;
t802 = -t742 * t715 - t745 * t716;
t800 = t742 * t724;
t799 = t745 * t724;
t561 = -t741 * t617 + t744 * t619;
t798 = -pkin(2) * t561 - t834;
t797 = -pkin(3) * t518 - qJ(4) * t577 - t869;
t708 = -t742 * t747 + t823;
t796 = pkin(5) * t708 + t742 * g(3);
t709 = t745 * t747 + t825;
t795 = -pkin(5) * t709 + t745 * g(3);
t793 = pkin(2) * t700 - t647;
t792 = pkin(2) * t703 + t852;
t788 = -pkin(7) * t582 - t857;
t602 = -t741 * t642 - t744 * t643;
t787 = t742 * t678 - t745 * t679;
t662 = -t744 * t718 + t850;
t664 = -t741 * t720 + t841;
t786 = t745 * t715 - t742 * t716;
t785 = -pkin(3) * t588 + qJ(4) * t889 + t809;
t783 = -t643 + t912;
t734 = 0.2e1 * t827;
t597 = t833 * pkin(3) + t734 + t763;
t600 = t833 * qJ(4) + t751;
t779 = -t741 * t597 + t744 * t600 + t870;
t778 = t870 - t601;
t777 = -pkin(7) * t558 - t518;
t513 = -t744 * t518 - t741 * t577;
t776 = -pkin(2) * t513 - t797;
t775 = t791 * qJDD(1);
t774 = -pkin(3) * t582 + qJ(4) * t611 + t788;
t772 = pkin(2) * t519 - t744 * t507 - t741 * t509;
t771 = pkin(2) * t560 - t744 * t510 - t741 * t528;
t770 = pkin(2) * t583 - t741 * t521 - t744 * t525;
t769 = pkin(2) * t589 - t741 * t524 - t744 * t526;
t547 = -t744 * t588 + t741 * t889;
t766 = -pkin(2) * t547 - t785;
t764 = -pkin(3) * t558 + qJ(4) * t626 + t777;
t545 = -t744 * t582 + t741 * t611;
t761 = -pkin(2) * t545 - t774;
t538 = -t744 * t558 + t741 * t626;
t760 = -pkin(2) * t538 - t764;
t756 = -pkin(3) * t721 + qJ(4) * t712 - t759;
t754 = -t756 - t912;
t752 = -t642 - t913;
t749 = -pkin(3) * t713 - qJ(4) * t719 - t619;
t748 = -t749 + t913;
t710 = -t733 + t859;
t692 = t821 * t829;
t688 = t794 - 0.2e1 * t864;
t685 = -t716 + t735 + 0.2e1 * t738;
t675 = -t690 + t722;
t674 = t689 - t722;
t673 = t745 * qJDD(3) - t742 * t692;
t672 = t742 * qJDD(3) + t745 * t692;
t671 = t741 * t702 + t883 * t829;
t670 = -t744 * t701 + t739 * t829;
t660 = (t702 - t731) * t744;
t649 = (t701 + t813) * t741;
t648 = t775 - t878;
t645 = t690 - t689;
t641 = pkin(5) * (-t745 * t711 - t846);
t640 = -t843 - t851;
t639 = -t741 * t700 + t744 * t703;
t634 = -t695 * qJD(5) - t801;
t633 = t742 * t670 - t799;
t632 = t742 * t671 + t799;
t631 = -t745 * t670 - t800;
t630 = -t745 * t671 + t800;
t627 = pkin(1) * t679 - qJ(2) * t678;
t623 = (-t693 * t743 + t695 * t740) * t727;
t622 = (-t693 * t740 - t695 * t743) * t727;
t621 = t742 * t639 - t745 * t710;
t620 = -t745 * t639 - t742 * t710;
t606 = t743 * t635 - t695 * t861;
t605 = t740 * t635 + t695 * t860;
t604 = t740 * t634 - t693 * t860;
t603 = -t743 * t634 - t693 * t861;
t599 = t741 * t622 + t744 * t691;
t598 = -t744 * t622 + t741 * t691;
t596 = t743 * t674 - t856;
t595 = -t740 * t675 + t904;
t594 = t740 * t674 + t845;
t593 = t743 * t675 + t905;
t590 = t591 * t876;
t587 = t602 + t877;
t585 = -t783 + t906;
t584 = -t752 + t907;
t572 = t793 - t902;
t571 = t792 - t901;
t570 = -t647 + t894;
t569 = qJ(2) * t700 - t852 + t903;
t568 = t741 * t605 + t817;
t567 = -t741 * t603 - t817;
t566 = t744 * t605 - t818;
t565 = t744 * t603 - t818;
t564 = t778 + t887;
t562 = -t744 * t617 - t741 * t619;
t559 = -t743 * t611 - t740 * t889;
t557 = -t740 * t611 + t743 * t889;
t555 = -t748 - t907;
t554 = t734 - t754 - t906;
t553 = t741 * t593 + t744 * t616;
t552 = t741 * t594 - t744 * t612;
t551 = -t744 * t593 + t741 * t616;
t550 = -t744 * t594 - t741 * t612;
t549 = -qJ(2) * t602 + t880;
t548 = t741 * t588 + t744 * t889;
t546 = t741 * t582 + t744 * t611;
t544 = t744 * t597 + t741 * t600 + t877;
t543 = t741 * t557 + t744 * t645;
t542 = -t744 * t557 + t741 * t645;
t541 = t881 * t602 - t879;
t540 = -qJ(2) * t669 + t881 * t601;
t539 = t741 * t558 + t744 * t626;
t537 = -t884 + t901;
t536 = -t885 + t902;
t535 = t835 - t894;
t534 = t808 * t700 - t854 - t903;
t533 = t779 + t887;
t523 = -qJ(2) * t562 - t798;
t516 = t881 * t562 - t891;
t515 = t881 * t561 + t808 * t591 - t590;
t514 = t741 * t518 - t744 * t577;
t512 = -qJ(2) * t548 - t766;
t511 = -qJ(2) * t546 - t761;
t506 = t881 * t548 + t769;
t505 = qJ(2) * t589 + t881 * t547 + t804;
t504 = -qJ(2) * t539 - t760;
t503 = t881 * t546 + t770;
t502 = qJ(2) * t583 + t881 * t545 + t805;
t501 = t881 * t539 + t771;
t500 = qJ(2) * t560 + t881 * t538 + t806;
t499 = -qJ(2) * t514 - t776;
t498 = t881 * t514 + t772;
t497 = qJ(2) * t519 + t881 * t513 + t807;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t708, 0, -t709, 0, -t796, -t795, -t786, -pkin(5) * t786, 0, -t708, t709, 0, 0, 0, t787, t796, t795, pkin(5) * t787 + (-t742 * pkin(1) + t745 * qJ(2)) * g(3), t632, t621, t893, t633, t900, t673, -t742 * t572 + t745 * t584 + t915, -t742 * t571 + t745 * t585 - t917, -pkin(2) * t837 + t742 * t587 - t871, t745 * t549 - t742 * t541 - pkin(5) * (-t745 * t601 - t742 * t669), t673, -t893, -t900, t632, t621, t633, t742 * t544 + t745 * t648 - t871, -t742 * t536 + t745 * t555 - t915, -t742 * t537 + t745 * t554 + t917, t745 * t523 - t742 * t516 - pkin(5) * (-t745 * t561 - t742 * t591), -t742 * t566 + t745 * t606, t742 * t542 + t745 * t559, t742 * t551 + t745 * t595, t742 * t565 - t745 * t604, t742 * t550 + t745 * t596, t742 * t598 + t745 * t623, t745 * t511 - t742 * t503 - pkin(5) * (-t745 * t545 + t742 * t583), t745 * t512 - t742 * t506 - pkin(5) * (-t745 * t547 + t742 * t589), t745 * t504 - t742 * t501 - pkin(5) * (-t745 * t538 + t742 * t560), t745 * t499 - t742 * t498 - pkin(5) * (-t745 * t513 + t742 * t519); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t709, 0, t708, 0, t795, -t796, t802, pkin(5) * t802, 0, -t709, -t708, 0, 0, 0, t803, -t795, t796, pkin(5) * t803 + (t745 * pkin(1) + t742 * qJ(2)) * g(3), t630, t620, -t892, t631, -t899, t672, t745 * t572 + t742 * t584 + t914, t745 * t571 + t742 * t585 - t916, -pkin(2) * t846 - t745 * t587 + t641, t742 * t549 + t745 * t541 + pkin(5) * (t742 * t601 - t745 * t669), t672, t892, t899, t630, t620, t631, -t745 * t544 + t742 * t648 + t641, t745 * t536 + t742 * t555 - t914, t745 * t537 + t742 * t554 + t916, t742 * t523 + t745 * t516 + pkin(5) * (t742 * t561 - t745 * t591), t745 * t566 + t742 * t606, -t745 * t542 + t742 * t559, -t745 * t551 + t742 * t595, -t745 * t565 - t742 * t604, -t745 * t550 + t742 * t596, -t745 * t598 + t742 * t623, t742 * t511 + t745 * t503 + pkin(5) * (t742 * t545 + t745 * t583), t742 * t512 + t745 * t506 + pkin(5) * (t742 * t547 + t745 * t589), t742 * t504 + t745 * t501 + pkin(5) * (t742 * t538 + t745 * t560), t742 * t499 + t745 * t498 + pkin(5) * (t742 * t513 + t745 * t519); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t715, t716, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t688, t685, t627, t660, t640, t664, t649, -t662, 0, t569, t570, t564, t540, 0, -t664, t662, t660, t640, t649, t533, t534, t535, t515, t568, t543, t553, t567, t552, t599, t502, t505, t500, t497; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t747, 0, 0, -g(3), -t715, 0, 0, -qJDD(1), t747, 0, 0, 0, -t679, 0, g(3), qJ(2) * g(3), t724, -t710, t824, -t724, -t826, qJDD(3), t584, t585, -t878, t549, qJDD(3), -t824, t826, t724, -t710, -t724, t648, t555, t554, t523, t606, t559, t595, -t604, t596, t623, t511, t512, t504, t499; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t747, 0, qJDD(1), 0, g(3), 0, -t716, 0, 0, -t747, -qJDD(1), 0, 0, 0, -t678, -g(3), 0, pkin(1) * g(3), -t671, -t639, -t655, -t670, -t650, t692, t572, t571, -t587, t541, t692, t655, t650, -t671, -t639, -t670, -t544, t536, t537, t516, t566, -t542, -t551, -t565, -t550, -t598, t503, t506, t501, t498; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t715, t716, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t688, t685, t627, t660, t640, t664, t649, -t662, 0, t569, t570, t564, t540, 0, -t664, t662, t660, t640, t649, t533, t534, t535, t515, t568, t543, t553, t567, t552, t599, t502, t505, t500, t497; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t679, -t678, 0, t660, t640, t664, t649, -t662, 0, -t852 - t911, -t647 + t910, t778, -pkin(6) * t601, 0, -t664, t662, t660, t640, t649, t779, qJ(4) * t843 - t854 + t911, t835 - t910, -pkin(6) * t561 + t591 * t865 - t590, t568, t543, t553, t567, t552, t599, -pkin(6) * t545 + t805, -pkin(6) * t547 + t804, -pkin(6) * t538 + t806, -pkin(6) * t513 + t807; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t747, 0, 0, 0, t679, 0, -g(3), 0, -t724, t710, -t824, t724, t826, -qJDD(3), t752, t783, t878, -t880, -qJDD(3), t824, -t826, -t724, t710, t724, -t648, t748, t754 + t819, t798, -t606, -t559, -t595, t604, -t596, -t623, t761, t766, t760, t776; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t747, qJDD(1), 0, 0, 0, t678, g(3), 0, 0, t671, t639, t655, t670, t650, -t692, -t793 - t909, -t792 - t908, t587, pkin(6) * t602 + t879, -t692, -t655, -t650, t671, t639, t670, t544, t885 + t909, t884 + t908, pkin(6) * t562 + t891, -t566, t542, t551, t565, t550, t598, pkin(6) * t546 - t770, pkin(6) * t548 - t769, pkin(6) * t539 - t771, pkin(6) * t514 - t772; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t702, -t700, t713, t731, t718, -t731, 0, -t669, -t642, 0, -t731, -t713, -t718, t702, -t700, t731, t600, qJ(4) * t700, t579, qJ(4) * t591, t646, t645, t616, -t646, -t612, t691, t521, t524, t528, t509; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t813, t703, t720, -t701, t712, -t813, t669, 0, -t643, 0, -t813, -t720, -t712, t813, t703, -t701, t597, t581, pkin(3) * t703, pkin(3) * t591, -t605, -t557, -t593, t603, -t594, -t622, t525, t526, t510, t507; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t724, -t710, t824, -t724, -t826, qJDD(3), t642, t643, 0, 0, qJDD(3), -t824, t826, t724, -t710, -t724, t775, t749, t734 + t756, t834, t606, t559, t595, -t604, t596, t623, t774, t785, t764, t797; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t824, t826, t724, -t710, -t724, 0, -t619, -t617, 0, t606, t559, t595, -t604, t596, t623, t788, t809, t777, -t869; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t731, t713, t718, -t702, t700, -t731, t619, 0, -t591, 0, -t646, -t645, -t616, t646, t612, -t691, t780, t767, -t873, -t874; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t813, t720, t712, -t813, -t703, t701, t617, t591, 0, 0, t605, t557, t593, -t603, t594, t622, pkin(7) * t583 - t790, pkin(7) * t589 - t789, pkin(7) * t560 - t768, pkin(7) * t519 + t872; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t635, -t611, t888, t677, t674, -t677, 0, -t577, t531, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t862, t889, t675, t634, t629, -t862, t577, 0, t532, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t646, t645, t616, -t646, -t612, t691, -t531, -t532, 0, 0;];
m_new_reg = t1;
