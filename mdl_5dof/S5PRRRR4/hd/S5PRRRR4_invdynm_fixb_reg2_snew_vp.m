% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PRRRR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d4,d5,theta1]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:08
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PRRRR4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR4_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR4_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRR4_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRR4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRRRR4_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:08:15
% EndTime: 2019-12-05 17:08:28
% DurationCPUTime: 13.44s
% Computational Cost: add. (65007->535), mult. (89551->761), div. (0->0), fcn. (62055->10), ass. (0->375)
t976 = qJDD(2) + qJDD(3);
t985 = sin(qJ(3));
t1041 = t985 * t976;
t978 = qJD(2) + qJD(3);
t974 = t978 ^ 2;
t989 = cos(qJ(3));
t941 = t989 * t974 + t1041;
t1033 = t989 * t976;
t944 = t985 * t974 - t1033;
t986 = sin(qJ(2));
t990 = cos(qJ(2));
t878 = t990 * t941 - t986 * t944;
t883 = t986 * t941 + t990 * t944;
t981 = sin(pkin(9));
t982 = cos(pkin(9));
t1077 = t982 * t878 - t981 * t883;
t980 = g(3) - qJDD(1);
t1079 = pkin(6) * t944 - t985 * t980;
t916 = pkin(6) * t941 - t989 * t980;
t1087 = pkin(5) * t883 + t1079 * t990 + t986 * t916;
t796 = pkin(5) * t878 - t1079 * t986 + t990 * t916;
t1097 = qJ(1) * t1077 - t1087 * t981 + t982 * t796;
t1088 = t981 * t878 + t982 * t883;
t1096 = qJ(1) * t1088 + t1087 * t982 + t981 * t796;
t955 = t981 * g(1) - t982 * g(2);
t956 = t982 * g(1) + t981 * g(2);
t906 = t986 * t955 - t990 * t956;
t992 = qJD(2) ^ 2;
t891 = -t992 * pkin(2) + t906;
t1000 = t990 * t955 + t986 * t956;
t994 = qJDD(2) * pkin(2) + t1000;
t835 = t985 * t891 - t989 * t994;
t836 = t989 * t891 + t985 * t994;
t1020 = t985 * t835 + t989 * t836;
t764 = t989 * t835 - t985 * t836;
t1039 = t986 * t764;
t1084 = t1020 * t990 + t1039;
t1031 = t990 * t764;
t711 = -t1020 * t986 + t1031;
t1094 = t1084 * t982 + t981 * t711;
t1093 = -t1084 * t981 + t982 * t711;
t1019 = -t1000 * t986 + t990 * t906;
t845 = -t1000 * t990 - t986 * t906;
t1049 = t982 * t845;
t1083 = -t1019 * t981 + t1049;
t1053 = t981 * t845;
t1082 = t1019 * t982 + t1053;
t984 = sin(qJ(4));
t1055 = t978 * t984;
t983 = sin(qJ(5));
t987 = cos(qJ(5));
t988 = cos(qJ(4));
t919 = -t987 * t988 * t978 + t983 * t1055;
t921 = (t983 * t988 + t984 * t987) * t978;
t871 = t921 * t919;
t975 = qJDD(4) + qJDD(5);
t1074 = -t871 + t975;
t1081 = t1074 * t983;
t1080 = t1074 * t987;
t954 = t990 * qJDD(2) - t986 * t992;
t1006 = -pkin(5) * t954 - t986 * t980;
t953 = t986 * qJDD(2) + t990 * t992;
t1065 = t982 * t953 + t981 * t954;
t926 = pkin(5) * t953 - t990 * t980;
t1078 = qJ(1) * t1065 - t1006 * t981 + t982 * t926;
t892 = -t981 * t953 + t982 * t954;
t1076 = -qJ(1) * t892 + t982 * t1006 + t981 * t926;
t828 = -t974 * pkin(3) + t976 * pkin(7) + t836;
t807 = t984 * t828 + t988 * t980;
t808 = t988 * t828 - t984 * t980;
t748 = t984 * t807 + t988 * t808;
t1042 = t984 * t976;
t1029 = qJD(4) * t978;
t964 = t988 * t1029;
t936 = t964 + t1042;
t1021 = t984 * t1029;
t1034 = t988 * t976;
t998 = t1021 - t1034;
t840 = -t919 * qJD(5) + t987 * t936 - t983 * t998;
t977 = qJD(4) + qJD(5);
t912 = t977 * t919;
t1073 = -t912 + t840;
t1018 = t983 * t936 + t987 * t998;
t812 = (qJD(5) - t977) * t921 + t1018;
t917 = t919 ^ 2;
t918 = t921 ^ 2;
t973 = t977 ^ 2;
t1063 = t988 ^ 2;
t1062 = pkin(1) * t980;
t961 = t984 * t974 * t988;
t950 = qJDD(4) + t961;
t769 = (-t936 + t964) * pkin(8) + t950 * pkin(4) - t807;
t952 = qJD(4) * pkin(4) - pkin(8) * t1055;
t966 = t1063 * t974;
t770 = -pkin(4) * t966 - pkin(8) * t998 - qJD(4) * t952 + t808;
t717 = -t987 * t769 + t983 * t770;
t718 = t983 * t769 + t987 * t770;
t671 = -t987 * t717 + t983 * t718;
t1061 = pkin(4) * t671;
t816 = t912 + t840;
t750 = -t812 * t983 - t987 * t816;
t1060 = pkin(4) * t750;
t1058 = t977 * t921;
t1057 = t977 * t983;
t1056 = t977 * t987;
t979 = t984 ^ 2;
t1054 = t979 * t974;
t1050 = t981 * t980;
t1048 = t982 * t980;
t827 = -t976 * pkin(3) - t974 * pkin(7) + t835;
t776 = pkin(4) * t998 - pkin(8) * t966 + t952 * t1055 + t827;
t1047 = t983 * t776;
t864 = t871 + t975;
t1046 = t983 * t864;
t1045 = t984 * t671;
t819 = t984 * t827;
t1044 = t984 * t950;
t951 = qJDD(4) - t961;
t1043 = t984 * t951;
t1038 = t987 * t776;
t1037 = t987 * t864;
t1036 = t988 * t671;
t820 = t988 * t827;
t937 = -0.2e1 * t1021 + t1034;
t886 = t988 * t937;
t1035 = t988 * t951;
t1030 = -pkin(3) * t827 + pkin(7) * t748;
t1027 = t979 + t1063;
t1026 = t985 * t871;
t1025 = t989 * t871;
t991 = qJD(4) ^ 2;
t958 = -t991 - t1054;
t901 = -t984 * t958 - t1035;
t935 = 0.2e1 * t964 + t1042;
t1024 = -pkin(3) * t935 + pkin(7) * t901 + t819;
t960 = -t966 - t991;
t899 = t988 * t960 - t1044;
t1023 = pkin(3) * t937 + pkin(7) * t899 - t820;
t714 = t985 * t748 - t989 * t827;
t1022 = pkin(2) * t714 + t1030;
t672 = t983 * t717 + t987 * t718;
t1016 = -t981 * t955 - t982 * t956;
t1015 = t985 * t961;
t1014 = t989 * t961;
t752 = -t812 * t987 + t983 * t816;
t847 = -t917 - t918;
t649 = -pkin(4) * t847 + pkin(8) * t752 + t672;
t656 = -pkin(8) * t750 - t671;
t694 = -t984 * t750 + t988 * t752;
t1013 = -pkin(3) * t847 + pkin(7) * t694 + t988 * t649 + t984 * t656;
t858 = -t973 - t917;
t792 = t987 * t858 - t1081;
t811 = (qJD(5) + t977) * t921 + t1018;
t699 = -pkin(4) * t811 + pkin(8) * t792 - t1038;
t791 = t983 * t858 + t1080;
t735 = -pkin(8) * t791 + t1047;
t740 = -t984 * t791 + t988 * t792;
t1012 = -pkin(3) * t811 + pkin(7) * t740 + t988 * t699 + t984 * t735;
t902 = -t918 - t973;
t825 = -t983 * t902 - t1037;
t703 = -pkin(4) * t1073 + pkin(8) * t825 + t1047;
t824 = t987 * t902 - t1046;
t737 = -pkin(8) * t824 + t1038;
t755 = -t984 * t824 + t988 * t825;
t1011 = -pkin(3) * t1073 + pkin(7) * t755 + t988 * t703 + t984 * t737;
t939 = t1027 * t976;
t945 = t966 + t1054;
t1010 = pkin(3) * t945 + pkin(7) * t939 + t748;
t855 = t985 * t901 - t989 * t935;
t1009 = pkin(2) * t855 + t1024;
t854 = t985 * t899 + t989 * t937;
t1008 = pkin(2) * t854 + t1023;
t1007 = -pkin(2) * t944 - t835;
t686 = t985 * t694 - t989 * t847;
t1005 = pkin(2) * t686 + t1013;
t707 = t985 * t740 - t989 * t811;
t1004 = pkin(2) * t707 + t1012;
t720 = -t1073 * t989 + t985 * t755;
t1003 = pkin(2) * t720 + t1011;
t877 = t985 * t939 + t989 * t945;
t1002 = pkin(2) * t877 + t1010;
t747 = t988 * t807 - t984 * t808;
t1001 = t982 * t955 - t981 * t956;
t999 = pkin(4) * t791 - t717;
t642 = t988 * t672 - t1045;
t659 = -pkin(4) * t776 + pkin(8) * t672;
t997 = -pkin(3) * t776 + pkin(7) * t642 - pkin(8) * t1045 + t988 * t659;
t637 = t985 * t642 - t989 * t776;
t996 = pkin(2) * t637 + t997;
t995 = pkin(4) * t824 - t718;
t993 = -pkin(2) * t941 - t836;
t959 = t966 - t991;
t957 = t991 - t1054;
t946 = -t966 + t1054;
t940 = t988 * t950;
t931 = t1027 * t1029;
t910 = -t918 + t973;
t909 = t917 - t973;
t908 = t985 * qJDD(4) + t989 * t931;
t907 = -t989 * qJDD(4) + t985 * t931;
t904 = -t979 * t1029 + t988 * t936;
t903 = -t1063 * t1029 + t984 * t998;
t900 = -t984 * t957 + t940;
t898 = t988 * t959 - t1043;
t896 = t988 * t958 - t1043;
t895 = t988 * t957 + t1044;
t894 = t984 * t960 + t940;
t893 = t984 * t959 + t1035;
t887 = (t936 + t964) * t984;
t881 = t989 * t939 - t985 * t945;
t875 = -pkin(1) * t953 - t906;
t874 = pkin(1) * t954 + t1000;
t873 = -t984 * t935 + t886;
t872 = t988 * t935 + t984 * t937;
t870 = t918 - t917;
t869 = t984 * t1041 + t989 * t900;
t868 = t985 * t1034 + t989 * t898;
t867 = -t984 * t1033 + t985 * t900;
t866 = -t988 * t1033 + t985 * t898;
t862 = t989 * t904 - t1015;
t861 = t989 * t903 + t1015;
t860 = t985 * t904 + t1014;
t859 = t985 * t903 - t1014;
t857 = t989 * t901 + t985 * t935;
t856 = t989 * t899 - t985 * t937;
t853 = (-t919 * t987 + t921 * t983) * t977;
t852 = (-t919 * t983 - t921 * t987) * t977;
t849 = -t986 * t907 + t990 * t908;
t848 = t990 * t907 + t986 * t908;
t844 = t989 * t873 + t985 * t946;
t841 = t985 * t873 - t989 * t946;
t839 = -t921 * qJD(5) - t1018;
t837 = pkin(1) * t845;
t834 = pkin(5) * t1019 + t1062;
t832 = t987 * t909 - t1046;
t831 = -t983 * t910 + t1080;
t830 = t983 * t909 + t1037;
t829 = t987 * t910 + t1081;
t823 = -t986 * t877 + t990 * t881;
t822 = t990 * t877 + t986 * t881;
t804 = -t921 * t1057 + t987 * t840;
t803 = t921 * t1056 + t983 * t840;
t802 = t919 * t1056 - t983 * t839;
t801 = t919 * t1057 + t987 * t839;
t800 = -t986 * t867 + t990 * t869;
t799 = -t986 * t866 + t990 * t868;
t798 = t990 * t867 + t986 * t869;
t797 = t990 * t866 + t986 * t868;
t790 = -t986 * t860 + t990 * t862;
t789 = -t986 * t859 + t990 * t861;
t788 = t990 * t860 + t986 * t862;
t787 = t990 * t859 + t986 * t861;
t786 = -t986 * t855 + t990 * t857;
t785 = -t986 * t854 + t990 * t856;
t784 = t990 * t855 + t986 * t857;
t783 = t990 * t854 + t986 * t856;
t782 = -pkin(7) * t896 + t820;
t781 = -pkin(7) * t894 + t819;
t780 = -t984 * t852 + t988 * t853;
t779 = t988 * t852 + t984 * t853;
t778 = -pkin(3) * t896 + t808;
t777 = -pkin(3) * t894 + t807;
t775 = -pkin(1) * t883 + t1007;
t774 = -pkin(1) * t878 + t993;
t772 = t989 * t780 + t985 * t975;
t771 = t985 * t780 - t989 * t975;
t768 = -t986 * t841 + t990 * t844;
t767 = t990 * t841 + t986 * t844;
t761 = pkin(2) * t764;
t760 = pkin(2) * t980 + pkin(6) * t1020;
t759 = -t984 * t830 + t988 * t832;
t758 = -t984 * t829 + t988 * t831;
t757 = t988 * t830 + t984 * t832;
t756 = t988 * t829 + t984 * t831;
t754 = t988 * t824 + t984 * t825;
t751 = -t1073 * t983 - t987 * t811;
t749 = t1073 * t987 - t983 * t811;
t744 = -t984 * t803 + t988 * t804;
t743 = -t984 * t801 + t988 * t802;
t742 = t988 * t803 + t984 * t804;
t741 = t988 * t801 + t984 * t802;
t739 = t988 * t791 + t984 * t792;
t733 = -pkin(6) * t877 + t989 * t747;
t732 = pkin(6) * t881 + t985 * t747;
t731 = t989 * t744 + t1026;
t730 = t989 * t743 - t1026;
t729 = t985 * t744 - t1025;
t728 = t985 * t743 + t1025;
t727 = t989 * t759 - t985 * t812;
t726 = t989 * t758 + t985 * t816;
t725 = t985 * t759 + t989 * t812;
t724 = t985 * t758 - t989 * t816;
t723 = -t986 * t771 + t990 * t772;
t722 = t990 * t771 + t986 * t772;
t721 = t1073 * t985 + t989 * t755;
t715 = t989 * t748 + t985 * t827;
t710 = t989 * t740 + t985 * t811;
t706 = -pkin(6) * t855 - t985 * t778 + t989 * t782;
t705 = -pkin(6) * t854 - t985 * t777 + t989 * t781;
t701 = pkin(1) * t784 + t1009;
t700 = pkin(1) * t783 + t1008;
t697 = -pkin(2) * t896 + pkin(6) * t857 + t989 * t778 + t985 * t782;
t696 = -pkin(2) * t894 + pkin(6) * t856 + t989 * t777 + t985 * t781;
t695 = pkin(1) * t822 + t1002;
t693 = -t984 * t749 + t988 * t751;
t692 = t988 * t750 + t984 * t752;
t691 = t988 * t749 + t984 * t751;
t689 = t989 * t693 + t985 * t870;
t688 = t985 * t693 - t989 * t870;
t687 = t989 * t694 + t985 * t847;
t684 = -pkin(1) * t711 - t761;
t683 = -t986 * t729 + t990 * t731;
t682 = -t986 * t728 + t990 * t730;
t681 = t990 * t729 + t986 * t731;
t680 = t990 * t728 + t986 * t730;
t679 = -t986 * t725 + t990 * t727;
t678 = -t986 * t724 + t990 * t726;
t677 = t990 * t725 + t986 * t727;
t676 = t990 * t724 + t986 * t726;
t675 = -pkin(3) * t754 - t995;
t674 = -t986 * t720 + t990 * t721;
t673 = t990 * t720 + t986 * t721;
t670 = -pkin(5) * t822 - t986 * t732 + t990 * t733;
t669 = pkin(5) * t823 + t990 * t732 + t986 * t733;
t668 = -pkin(3) * t692 - t1060;
t667 = -t986 * t714 + t990 * t715;
t666 = t990 * t714 + t986 * t715;
t665 = -pkin(3) * t739 - t999;
t664 = -t986 * t707 + t990 * t710;
t663 = t990 * t707 + t986 * t710;
t662 = pkin(5) * t711 + pkin(6) * t1031 - t986 * t760;
t661 = pkin(5) * t1084 + pkin(6) * t1039 + t990 * t760 + t1062;
t660 = -pkin(6) * t714 - (pkin(3) * t985 - pkin(7) * t989) * t747;
t657 = -pkin(7) * t754 - t984 * t703 + t988 * t737;
t654 = -pkin(5) * t784 - t986 * t697 + t990 * t706;
t653 = -pkin(5) * t783 - t986 * t696 + t990 * t705;
t652 = -pkin(7) * t739 - t984 * t699 + t988 * t735;
t651 = -pkin(1) * t896 + pkin(5) * t786 + t990 * t697 + t986 * t706;
t650 = -pkin(1) * t894 + pkin(5) * t785 + t990 * t696 + t986 * t705;
t647 = -t986 * t688 + t990 * t689;
t646 = t990 * t688 + t986 * t689;
t645 = pkin(6) * t715 - (-pkin(3) * t989 - pkin(7) * t985 - pkin(2)) * t747;
t644 = -t986 * t686 + t990 * t687;
t643 = t990 * t686 + t986 * t687;
t641 = t984 * t672 + t1036;
t639 = pkin(1) * t666 + t1022;
t638 = t989 * t642 + t985 * t776;
t635 = -pkin(6) * t720 + t989 * t657 - t985 * t675;
t634 = pkin(1) * t673 + t1003;
t633 = -pkin(6) * t707 + t989 * t652 - t985 * t665;
t632 = -pkin(3) * t641 - t1061;
t631 = -pkin(2) * t754 + pkin(6) * t721 + t985 * t657 + t989 * t675;
t630 = pkin(1) * t663 + t1004;
t629 = -pkin(2) * t739 + pkin(6) * t710 + t985 * t652 + t989 * t665;
t628 = -pkin(7) * t692 - t984 * t649 + t988 * t656;
t627 = -pkin(5) * t666 - t986 * t645 + t990 * t660;
t626 = pkin(1) * t747 + pkin(5) * t667 + t990 * t645 + t986 * t660;
t625 = -pkin(7) * t641 - pkin(8) * t1036 - t984 * t659;
t624 = -t986 * t637 + t990 * t638;
t623 = t990 * t637 + t986 * t638;
t622 = -pkin(6) * t686 + t989 * t628 - t985 * t668;
t621 = -pkin(2) * t692 + pkin(6) * t687 + t985 * t628 + t989 * t668;
t620 = pkin(1) * t643 + t1005;
t619 = -pkin(5) * t673 - t986 * t631 + t990 * t635;
t618 = -pkin(1) * t754 + pkin(5) * t674 + t990 * t631 + t986 * t635;
t617 = -pkin(5) * t663 - t986 * t629 + t990 * t633;
t616 = -pkin(1) * t739 + pkin(5) * t664 + t990 * t629 + t986 * t633;
t615 = -pkin(6) * t637 + t989 * t625 - t985 * t632;
t614 = pkin(1) * t623 + t996;
t613 = -pkin(2) * t641 + pkin(6) * t638 + t985 * t625 + t989 * t632;
t612 = -pkin(5) * t643 - t986 * t621 + t990 * t622;
t611 = -pkin(1) * t692 + pkin(5) * t644 + t990 * t621 + t986 * t622;
t610 = -pkin(5) * t623 - t986 * t613 + t990 * t615;
t609 = -pkin(1) * t641 + pkin(5) * t624 + t990 * t613 + t986 * t615;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1050, -t1048, -t1001, -qJ(1) * t1001, 0, 0, t892, 0, -t1065, 0, t1076, t1078, t1083, pkin(5) * t1049 + qJ(1) * t1083 - t981 * t834, 0, 0, -t1088, 0, -t1077, 0, t1096, t1097, t1093, qJ(1) * t1093 - t981 * t661 + t982 * t662, -t981 * t788 + t982 * t790, -t981 * t767 + t982 * t768, -t981 * t798 + t982 * t800, -t981 * t787 + t982 * t789, -t981 * t797 + t982 * t799, -t981 * t848 + t982 * t849, t982 * t653 - t981 * t650 - qJ(1) * (t982 * t783 + t981 * t785), t982 * t654 - t981 * t651 - qJ(1) * (t982 * t784 + t981 * t786), t982 * t670 - t981 * t669 - qJ(1) * (t982 * t822 + t981 * t823), t982 * t627 - t981 * t626 - qJ(1) * (t982 * t666 + t981 * t667), -t981 * t681 + t982 * t683, -t981 * t646 + t982 * t647, -t981 * t676 + t982 * t678, -t981 * t680 + t982 * t682, -t981 * t677 + t982 * t679, -t981 * t722 + t982 * t723, t982 * t617 - t981 * t616 - qJ(1) * (t982 * t663 + t981 * t664), t982 * t619 - t981 * t618 - qJ(1) * (t982 * t673 + t981 * t674), t982 * t612 - t981 * t611 - qJ(1) * (t982 * t643 + t981 * t644), t982 * t610 - t981 * t609 - qJ(1) * (t982 * t623 + t981 * t624); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1048, -t1050, t1016, qJ(1) * t1016, 0, 0, t1065, 0, t892, 0, -t1078, t1076, t1082, pkin(5) * t1053 + qJ(1) * t1082 + t982 * t834, 0, 0, t1077, 0, -t1088, 0, -t1097, t1096, t1094, qJ(1) * t1094 + t982 * t661 + t981 * t662, t982 * t788 + t981 * t790, t982 * t767 + t981 * t768, t982 * t798 + t981 * t800, t982 * t787 + t981 * t789, t982 * t797 + t981 * t799, t982 * t848 + t981 * t849, t981 * t653 + t982 * t650 + qJ(1) * (-t981 * t783 + t982 * t785), t981 * t654 + t982 * t651 + qJ(1) * (-t981 * t784 + t982 * t786), t981 * t670 + t982 * t669 + qJ(1) * (-t981 * t822 + t982 * t823), t981 * t627 + t982 * t626 + qJ(1) * (-t981 * t666 + t982 * t667), t982 * t681 + t981 * t683, t982 * t646 + t981 * t647, t982 * t676 + t981 * t678, t982 * t680 + t981 * t682, t982 * t677 + t981 * t679, t982 * t722 + t981 * t723, t981 * t617 + t982 * t616 + qJ(1) * (-t981 * t663 + t982 * t664), t981 * t619 + t982 * t618 + qJ(1) * (-t981 * t673 + t982 * t674), t981 * t612 + t982 * t611 + qJ(1) * (-t981 * t643 + t982 * t644), t981 * t610 + t982 * t609 + qJ(1) * (-t981 * t623 + t982 * t624); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t955, t956, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t874, t875, 0, -t837, 0, 0, 0, 0, 0, t976, t775, t774, 0, t684, t887, t872, t895, t886, t893, 0, t700, t701, t695, t639, t742, t691, t756, t741, t757, t779, t630, t634, t620, t614; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t980, -t955, 0, 0, 0, t954, 0, -t953, 0, t1006, t926, t845, pkin(5) * t845, 0, 0, -t883, 0, -t878, 0, t1087, t796, t711, t662, t790, t768, t800, t789, t799, t849, t653, t654, t670, t627, t683, t647, t678, t682, t679, t723, t617, t619, t612, t610; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t980, 0, -t956, 0, 0, 0, t953, 0, t954, 0, -t926, t1006, t1019, t834, 0, 0, t878, 0, -t883, 0, -t796, t1087, t1084, t661, t788, t767, t798, t787, t797, t848, t650, t651, t669, t626, t681, t646, t676, t680, t677, t722, t616, t618, t611, t609; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t955, t956, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t874, t875, 0, -t837, 0, 0, 0, 0, 0, t976, t775, t774, 0, t684, t887, t872, t895, t886, t893, 0, t700, t701, t695, t639, t742, t691, t756, t741, t757, t779, t630, t634, t620, t614; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t992, 0, 0, -t980, -t1000, 0, 0, 0, -t944, 0, -t941, 0, t1079, t916, t764, pkin(6) * t764, t862, t844, t869, t861, t868, t908, t705, t706, t733, t660, t731, t689, t726, t730, t727, t772, t633, t635, t622, t615; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t992, 0, qJDD(2), 0, t980, 0, t906, 0, 0, 0, t941, 0, -t944, 0, -t916, t1079, t1020, t760, t860, t841, t867, t859, t866, t907, t696, t697, t732, t645, t729, t688, t724, t728, t725, t771, t629, t631, t621, t613; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t1000, -t906, 0, 0, 0, 0, 0, 0, 0, t976, t1007, t993, 0, -t761, t887, t872, t895, t886, t893, 0, t1008, t1009, t1002, t1022, t742, t691, t756, t741, t757, t779, t1004, t1003, t1005, t996; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t976, 0, -t974, 0, 0, -t980, t835, 0, t904, t873, t900, t903, t898, t931, t781, t782, t747, pkin(7) * t747, t744, t693, t758, t743, t759, t780, t652, t657, t628, t625; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t974, 0, t976, 0, t980, 0, t836, 0, t961, -t946, -t1042, -t961, -t1034, -qJDD(4), t777, t778, 0, pkin(3) * t747, -t871, -t870, -t816, t871, t812, -t975, t665, t675, t668, t632; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t976, -t835, -t836, 0, 0, t887, t872, t895, t886, t893, 0, t1023, t1024, t1010, t1030, t742, t691, t756, t741, t757, t779, t1012, t1011, t1013, t997; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t936, t937, t950, -t964, t959, t964, 0, t827, t807, 0, t804, t751, t831, t802, t832, t853, t735, t737, t656, -pkin(8) * t671; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1021, t935, t957, -t998, t951, -t1021, -t827, 0, t808, 0, t803, t749, t829, t801, t830, t852, t699, t703, t649, t659; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t961, t946, t1042, t961, t1034, qJDD(4), -t807, -t808, 0, 0, t871, t870, t816, -t871, -t812, t975, t999, t995, t1060, t1061; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t840, -t811, t1074, t912, t909, -t912, 0, t776, t717, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1058, t1073, t910, t839, t864, -t1058, -t776, 0, t718, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t871, t870, t816, -t871, -t812, t975, -t717, -t718, 0, 0;];
m_new_reg = t1;
