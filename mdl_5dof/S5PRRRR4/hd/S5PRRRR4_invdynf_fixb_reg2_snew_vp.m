% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRRRR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d4,d5,theta1]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:08
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRRRR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR4_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR4_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRRRR4_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:08:28
% EndTime: 2019-12-05 17:08:30
% DurationCPUTime: 2.35s
% Computational Cost: add. (9781->170), mult. (13559->255), div. (0->0), fcn. (9575->10), ass. (0->147)
t1229 = qJD(2) + qJD(3);
t1226 = t1229 ^ 2;
t1227 = qJDD(2) + qJDD(3);
t1237 = sin(qJ(3));
t1241 = cos(qJ(3));
t1201 = t1226 * t1237 - t1227 * t1241;
t1238 = sin(qJ(2));
t1242 = cos(qJ(2));
t1247 = -t1226 * t1241 - t1227 * t1237;
t1176 = t1201 * t1242 - t1238 * t1247;
t1233 = sin(pkin(9));
t1234 = cos(pkin(9));
t1268 = t1201 * t1238 + t1242 * t1247;
t1272 = t1176 * t1233 + t1234 * t1268;
t1271 = t1176 * t1234 - t1233 * t1268;
t1228 = qJD(4) + qJD(5);
t1265 = qJD(5) + t1228;
t1235 = sin(qJ(5));
t1239 = cos(qJ(5));
t1240 = cos(qJ(4));
t1259 = t1229 * t1240;
t1236 = sin(qJ(4));
t1260 = t1229 * t1236;
t1190 = t1235 * t1260 - t1239 * t1259;
t1264 = t1190 ^ 2;
t1192 = (t1235 * t1240 + t1236 * t1239) * t1229;
t1263 = t1192 ^ 2;
t1262 = t1228 ^ 2;
t1261 = t1192 * t1190;
t1231 = t1240 ^ 2;
t1258 = t1231 * t1226;
t1257 = t1236 * t1227;
t1256 = qJD(5) - t1228;
t1212 = g(1) * t1233 - g(2) * t1234;
t1213 = -g(1) * t1234 - g(2) * t1233;
t1188 = t1212 * t1238 + t1213 * t1242;
t1244 = qJD(2) ^ 2;
t1181 = -pkin(2) * t1244 + t1188;
t1187 = t1212 * t1242 - t1213 * t1238;
t1246 = qJDD(2) * pkin(2) + t1187;
t1161 = t1181 * t1241 + t1237 * t1246;
t1159 = -pkin(3) * t1226 + pkin(7) * t1227 + t1161;
t1232 = -g(3) + qJDD(1);
t1148 = t1159 * t1240 + t1236 * t1232;
t1230 = t1236 ^ 2;
t1255 = t1230 + t1231;
t1216 = t1236 * t1226 * t1240;
t1207 = qJDD(4) + t1216;
t1254 = -qJDD(4) - qJDD(5);
t1253 = qJD(4) * t1260;
t1252 = qJD(4) * t1259;
t1147 = -t1236 * t1159 + t1240 * t1232;
t1160 = -t1181 * t1237 + t1241 * t1246;
t1196 = t1252 + t1257;
t1220 = t1240 * t1227;
t1249 = -t1220 + t1253;
t1251 = -t1235 * t1196 - t1239 * t1249;
t1210 = qJDD(2) * t1242 - t1238 * t1244;
t1211 = -qJDD(2) * t1238 - t1242 * t1244;
t1250 = -t1210 * t1233 + t1211 * t1234;
t1248 = t1210 * t1234 + t1211 * t1233;
t1158 = -t1227 * pkin(3) - t1226 * pkin(7) - t1160;
t1245 = -t1239 * t1196 + t1235 * t1249;
t1243 = qJD(4) ^ 2;
t1215 = -t1243 - t1258;
t1214 = -t1226 * t1230 - t1243;
t1209 = qJD(4) * pkin(4) - pkin(8) * t1260;
t1208 = -qJDD(4) + t1216;
t1203 = t1255 * t1226;
t1198 = t1255 * t1227;
t1197 = t1220 - 0.2e1 * t1253;
t1195 = 0.2e1 * t1252 + t1257;
t1186 = -t1262 - t1263;
t1185 = t1208 * t1240 - t1214 * t1236;
t1184 = -t1207 * t1236 + t1215 * t1240;
t1183 = t1208 * t1236 + t1214 * t1240;
t1182 = t1207 * t1240 + t1215 * t1236;
t1175 = t1198 * t1241 - t1203 * t1237;
t1172 = t1198 * t1237 + t1203 * t1241;
t1171 = t1254 - t1261;
t1170 = -t1254 - t1261;
t1169 = -t1262 - t1264;
t1168 = t1185 * t1241 + t1195 * t1237;
t1167 = t1184 * t1241 - t1197 * t1237;
t1166 = t1185 * t1237 - t1195 * t1241;
t1165 = t1184 * t1237 + t1197 * t1241;
t1164 = -t1263 - t1264;
t1163 = -t1187 * t1238 + t1188 * t1242;
t1162 = t1187 * t1242 + t1188 * t1238;
t1157 = t1171 * t1239 - t1186 * t1235;
t1156 = t1171 * t1235 + t1186 * t1239;
t1155 = -t1172 * t1238 + t1175 * t1242;
t1154 = t1172 * t1242 + t1175 * t1238;
t1152 = t1190 * t1256 + t1245;
t1151 = -t1190 * t1265 - t1245;
t1150 = -t1192 * t1256 + t1251;
t1149 = t1192 * t1265 - t1251;
t1146 = t1169 * t1239 - t1170 * t1235;
t1145 = t1169 * t1235 + t1170 * t1239;
t1144 = -t1166 * t1238 + t1168 * t1242;
t1143 = -t1165 * t1238 + t1167 * t1242;
t1142 = t1166 * t1242 + t1168 * t1238;
t1141 = t1165 * t1242 + t1167 * t1238;
t1140 = pkin(4) * t1249 - pkin(8) * t1258 + t1209 * t1260 + t1158;
t1139 = -pkin(4) * t1258 - pkin(8) * t1249 - qJD(4) * t1209 + t1148;
t1138 = (-t1196 + t1252) * pkin(8) + t1207 * pkin(4) + t1147;
t1137 = -t1160 * t1237 + t1161 * t1241;
t1136 = t1160 * t1241 + t1161 * t1237;
t1135 = -t1156 * t1236 + t1157 * t1240;
t1134 = t1156 * t1240 + t1157 * t1236;
t1133 = t1150 * t1239 - t1152 * t1235;
t1132 = t1150 * t1235 + t1152 * t1239;
t1131 = -t1147 * t1236 + t1148 * t1240;
t1130 = t1147 * t1240 + t1148 * t1236;
t1129 = -t1145 * t1236 + t1146 * t1240;
t1128 = t1145 * t1240 + t1146 * t1236;
t1127 = t1135 * t1241 + t1151 * t1237;
t1126 = t1135 * t1237 - t1151 * t1241;
t1125 = t1138 * t1235 + t1139 * t1239;
t1124 = t1138 * t1239 - t1139 * t1235;
t1123 = t1131 * t1241 + t1158 * t1237;
t1122 = t1131 * t1237 - t1158 * t1241;
t1121 = -t1136 * t1238 + t1137 * t1242;
t1120 = t1129 * t1241 + t1149 * t1237;
t1119 = t1136 * t1242 + t1137 * t1238;
t1118 = t1129 * t1237 - t1149 * t1241;
t1117 = -t1132 * t1236 + t1133 * t1240;
t1116 = t1132 * t1240 + t1133 * t1236;
t1115 = t1117 * t1241 + t1164 * t1237;
t1114 = t1117 * t1237 - t1164 * t1241;
t1113 = -t1126 * t1238 + t1127 * t1242;
t1112 = t1126 * t1242 + t1127 * t1238;
t1111 = -t1124 * t1235 + t1125 * t1239;
t1110 = t1124 * t1239 + t1125 * t1235;
t1109 = -t1122 * t1238 + t1123 * t1242;
t1108 = t1122 * t1242 + t1123 * t1238;
t1107 = -t1118 * t1238 + t1120 * t1242;
t1106 = t1118 * t1242 + t1120 * t1238;
t1105 = -t1114 * t1238 + t1115 * t1242;
t1104 = t1114 * t1242 + t1115 * t1238;
t1103 = -t1110 * t1236 + t1111 * t1240;
t1102 = t1110 * t1240 + t1111 * t1236;
t1101 = t1103 * t1241 + t1140 * t1237;
t1100 = t1103 * t1237 - t1140 * t1241;
t1099 = -t1100 * t1238 + t1101 * t1242;
t1098 = t1100 * t1242 + t1101 * t1238;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1212 * t1233 + t1213 * t1234, 0, 0, 0, 0, 0, 0, t1250, -t1248, 0, -t1162 * t1233 + t1163 * t1234, 0, 0, 0, 0, 0, 0, t1272, t1271, 0, -t1119 * t1233 + t1121 * t1234, 0, 0, 0, 0, 0, 0, -t1141 * t1233 + t1143 * t1234, -t1142 * t1233 + t1144 * t1234, -t1154 * t1233 + t1155 * t1234, -t1108 * t1233 + t1109 * t1234, 0, 0, 0, 0, 0, 0, -t1106 * t1233 + t1107 * t1234, -t1112 * t1233 + t1113 * t1234, -t1104 * t1233 + t1105 * t1234, -t1098 * t1233 + t1099 * t1234; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1212 * t1234 + t1213 * t1233, 0, 0, 0, 0, 0, 0, t1248, t1250, 0, t1162 * t1234 + t1163 * t1233, 0, 0, 0, 0, 0, 0, -t1271, t1272, 0, t1119 * t1234 + t1121 * t1233, 0, 0, 0, 0, 0, 0, t1141 * t1234 + t1143 * t1233, t1142 * t1234 + t1144 * t1233, t1154 * t1234 + t1155 * t1233, t1108 * t1234 + t1109 * t1233, 0, 0, 0, 0, 0, 0, t1106 * t1234 + t1107 * t1233, t1112 * t1234 + t1113 * t1233, t1104 * t1234 + t1105 * t1233, t1098 * t1234 + t1099 * t1233; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1232, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1232, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1232, 0, 0, 0, 0, 0, 0, t1182, t1183, 0, t1130, 0, 0, 0, 0, 0, 0, t1128, t1134, t1116, t1102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1213, 0, 0, 0, 0, 0, 0, t1211, -t1210, 0, t1163, 0, 0, 0, 0, 0, 0, t1268, t1176, 0, t1121, 0, 0, 0, 0, 0, 0, t1143, t1144, t1155, t1109, 0, 0, 0, 0, 0, 0, t1107, t1113, t1105, t1099; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1212, 0, 0, 0, 0, 0, 0, t1210, t1211, 0, t1162, 0, 0, 0, 0, 0, 0, -t1176, t1268, 0, t1119, 0, 0, 0, 0, 0, 0, t1141, t1142, t1154, t1108, 0, 0, 0, 0, 0, 0, t1106, t1112, t1104, t1098; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1232, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1232, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1232, 0, 0, 0, 0, 0, 0, t1182, t1183, 0, t1130, 0, 0, 0, 0, 0, 0, t1128, t1134, t1116, t1102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1244, -qJDD(2), 0, t1188, 0, 0, 0, 0, 0, 0, t1247, t1201, 0, t1137, 0, 0, 0, 0, 0, 0, t1167, t1168, t1175, t1123, 0, 0, 0, 0, 0, 0, t1120, t1127, t1115, t1101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1244, 0, t1187, 0, 0, 0, 0, 0, 0, -t1201, t1247, 0, t1136, 0, 0, 0, 0, 0, 0, t1165, t1166, t1172, t1122, 0, 0, 0, 0, 0, 0, t1118, t1126, t1114, t1100; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1232, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1232, 0, 0, 0, 0, 0, 0, t1182, t1183, 0, t1130, 0, 0, 0, 0, 0, 0, t1128, t1134, t1116, t1102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1226, -t1227, 0, t1161, 0, 0, 0, 0, 0, 0, t1184, t1185, t1198, t1131, 0, 0, 0, 0, 0, 0, t1129, t1135, t1117, t1103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1227, -t1226, 0, t1160, 0, 0, 0, 0, 0, 0, t1197, -t1195, t1203, -t1158, 0, 0, 0, 0, 0, 0, -t1149, -t1151, -t1164, -t1140; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1232, 0, 0, 0, 0, 0, 0, t1182, t1183, 0, t1130, 0, 0, 0, 0, 0, 0, t1128, t1134, t1116, t1102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1215, t1208, t1220, t1148, 0, 0, 0, 0, 0, 0, t1146, t1157, t1133, t1111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1207, t1214, -t1257, t1147, 0, 0, 0, 0, 0, 0, t1145, t1156, t1132, t1110; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1197, t1195, -t1203, t1158, 0, 0, 0, 0, 0, 0, t1149, t1151, t1164, t1140; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1169, t1171, t1150, t1125; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1170, t1186, t1152, t1124; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1149, t1151, t1164, t1140;];
f_new_reg = t1;
