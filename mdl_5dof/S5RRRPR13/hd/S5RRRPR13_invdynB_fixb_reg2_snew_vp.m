% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRPR13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:48
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRPR13_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR13_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR13_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR13_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR13_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRPR13_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:46:54
% EndTime: 2019-12-31 21:47:31
% DurationCPUTime: 33.75s
% Computational Cost: add. (73411->699), mult. (160843->1069), div. (0->0), fcn. (123655->10), ass. (0->521)
t835 = cos(qJ(3));
t836 = cos(qJ(2));
t828 = sin(pkin(5));
t832 = sin(qJ(2));
t944 = qJD(1) * t832;
t931 = t828 * t944;
t939 = qJDD(1) * t828;
t795 = -qJD(2) * t931 + t836 * t939;
t789 = -qJDD(3) + t795;
t831 = sin(qJ(3));
t829 = cos(pkin(5));
t942 = t829 * qJD(1);
t924 = qJD(2) + t942;
t784 = t831 * t931 - t835 * t924;
t786 = t831 * t924 + t835 * t931;
t978 = t786 * t784;
t849 = t789 + t978;
t1004 = t835 * t849;
t941 = t836 * qJD(1);
t814 = t828 * t941 - qJD(3);
t810 = t814 ^ 2;
t991 = t784 ^ 2;
t733 = -t810 - t991;
t643 = t831 * t733 - t1004;
t1006 = t831 * t849;
t645 = t835 * t733 + t1006;
t938 = t832 * qJDD(1);
t794 = (qJD(2) * t941 + t938) * t828;
t923 = t829 * qJDD(1) + qJDD(2);
t729 = t786 * qJD(3) + t831 * t794 - t835 * t923;
t976 = t814 * t786;
t688 = t729 - t976;
t898 = t645 * t832 - t688 * t836;
t543 = -t828 * t643 + t829 * t898;
t587 = t836 * t645 + t832 * t688;
t833 = sin(qJ(1));
t837 = cos(qJ(1));
t493 = t837 * t543 + t833 * t587;
t1081 = pkin(6) * t493;
t496 = t833 * t543 - t837 * t587;
t1080 = pkin(6) * t496;
t850 = t789 - t978;
t1005 = t831 * t850;
t990 = t786 ^ 2;
t740 = t990 + t810;
t652 = t835 * t740 - t1005;
t1003 = t835 * t850;
t653 = t831 * t740 + t1003;
t848 = t835 * t794 + t831 * t923;
t695 = (qJD(3) - t814) * t784 - t848;
t896 = t653 * t832 + t695 * t836;
t548 = t828 * t652 + t829 * t896;
t590 = t836 * t653 - t832 * t695;
t498 = t837 * t548 + t833 * t590;
t1079 = pkin(6) * t498;
t501 = t833 * t548 - t837 * t590;
t1078 = pkin(6) * t501;
t546 = -t829 * t652 + t828 * t896;
t1077 = pkin(7) * (t546 * t828 + t548 * t829);
t541 = t829 * t643 + t828 * t898;
t1076 = pkin(7) * (t541 * t828 + t543 * t829);
t1075 = pkin(1) * t541;
t1074 = pkin(1) * t543;
t1073 = pkin(1) * t546;
t1072 = pkin(1) * t548;
t753 = t991 - t810;
t657 = t831 * t753 - t1003;
t661 = t835 * t753 + t1005;
t687 = t729 + t976;
t892 = t661 * t832 + t687 * t836;
t558 = -t828 * t657 + t829 * t892;
t602 = t836 * t661 - t832 * t687;
t1071 = t833 * t558 - t837 * t602;
t1070 = t837 * t558 + t833 * t602;
t1067 = pkin(7) * t587;
t1066 = pkin(7) * t590;
t1059 = t829 * t657 + t828 * t892;
t1058 = pkin(2) * t643;
t1057 = pkin(2) * t652;
t1056 = pkin(8) * t643;
t1055 = pkin(8) * t645;
t1054 = pkin(8) * t652;
t1053 = pkin(8) * t653;
t754 = -t990 + t810;
t659 = t831 * t754 + t1004;
t1052 = t659 * t832;
t656 = t835 * t754 - t1006;
t1049 = t828 * t656;
t1045 = t829 * t656;
t1043 = t836 * t659;
t989 = -2 * qJD(4);
t711 = t991 + t990;
t1042 = pkin(2) * t711;
t1038 = t711 * t836;
t1037 = t831 * t687;
t1036 = t831 * t688;
t1032 = t832 * t711;
t1031 = t835 * t687;
t954 = t835 * t688;
t730 = -t784 * qJD(3) + t848;
t763 = t784 * t814;
t694 = t763 + t730;
t986 = pkin(2) * t836;
t921 = -pkin(8) * t832 - t986;
t945 = qJD(1) * t828;
t793 = t921 * t945;
t922 = t924 ^ 2;
t817 = t837 * g(1) + t833 * g(2);
t838 = qJD(1) ^ 2;
t790 = -t838 * pkin(1) + pkin(7) * t939 - t817;
t816 = t833 * g(1) - t837 * g(2);
t983 = pkin(7) * t828;
t846 = qJDD(1) * pkin(1) + t838 * t983 + t816;
t845 = t829 * t846;
t925 = t832 * t790 - t836 * t845;
t671 = t828 * (g(3) * t836 + t793 * t944) - t923 * pkin(2) - t922 * pkin(8) + t925;
t840 = t729 * pkin(3) - t694 * qJ(4) + t671;
t1030 = t786 * t989 + t840;
t975 = t814 * t831;
t918 = -t835 * t729 - t784 * t975;
t974 = t814 * t835;
t872 = t831 * t729 - t784 * t974;
t937 = t836 * t978;
t999 = t832 * t872 + t937;
t1014 = -t828 * t918 + t829 * t999;
t933 = t832 * t978;
t996 = t836 * t872 - t933;
t1029 = -t1014 * t833 + t837 * t996;
t1028 = t1014 * t837 + t833 * t996;
t919 = t831 * t730 - t786 * t974;
t917 = t835 * t730 + t786 * t975;
t998 = t832 * t917 - t937;
t1015 = -t828 * t919 + t829 * t998;
t995 = t836 * t917 + t933;
t1027 = -t1015 * t833 + t837 * t995;
t1026 = t1015 * t837 + t833 * t995;
t1001 = -t990 + t991;
t1021 = t1001 * t832;
t1020 = t1001 * t836;
t830 = sin(qJ(5));
t834 = cos(qJ(5));
t747 = -t834 * t784 - t830 * t814;
t749 = t830 * t784 - t834 * t814;
t702 = t749 * t747;
t726 = qJDD(5) + t730;
t1002 = -t702 + t726;
t1019 = t1002 * t830;
t1018 = t1002 * t834;
t1017 = t828 * t998 + t829 * t919;
t1016 = t828 * t999 + t829 * t918;
t866 = (t784 * t831 + t786 * t835) * t814;
t867 = (t784 * t835 - t786 * t831) * t814;
t993 = -t828 * t866 + (t789 * t836 + t832 * t867) * t829;
t997 = -t832 * t789 + t836 * t867;
t1013 = t833 * t997 + t837 * t993;
t1012 = -t833 * t993 + t837 * t997;
t825 = t828 ^ 2;
t973 = t825 * t838;
t883 = t924 * qJD(1);
t1011 = t825 * (-t829 * t838 + t883);
t696 = t763 - t730;
t737 = t784 * pkin(3) - t786 * qJ(4);
t972 = t828 * t832;
t842 = -g(3) * t972 + t832 * t845;
t672 = t923 * pkin(8) - t922 * pkin(2) + (t793 * t945 + t790) * t836 + t842;
t868 = t832 * t883;
t869 = t836 * t883;
t982 = t829 * g(3);
t673 = -t795 * pkin(2) - t794 * pkin(8) - t982 + (pkin(2) * t868 - pkin(8) * t869 - t846) * t828;
t947 = -t831 * t672 + t835 * t673;
t871 = t789 * pkin(3) - t810 * qJ(4) + t786 * t737 + qJDD(4) - t947;
t512 = -pkin(4) * t696 + t849 * pkin(9) + t871;
t752 = t786 * pkin(4) + t814 * pkin(9);
t928 = -pkin(3) * t814 + t989;
t519 = -t991 * pkin(4) + t729 * pkin(9) + (-t752 + t928) * t786 + t840;
t471 = t830 * t512 + t834 * t519;
t927 = t834 * t512 - t830 * t519;
t434 = t834 * t471 - t830 * t927;
t433 = t830 * t471 + t834 * t927;
t971 = t828 * t836;
t994 = t789 * t971 + t829 * t866 + t867 * t972;
t746 = t747 ^ 2;
t992 = t749 ^ 2;
t778 = qJD(5) + t786;
t775 = t778 ^ 2;
t988 = pkin(3) + pkin(9);
t987 = pkin(2) * t832;
t985 = pkin(3) * t831;
t984 = pkin(3) * t835;
t981 = t778 * t747;
t980 = t778 * t830;
t979 = t778 * t834;
t977 = t789 * qJ(4);
t599 = t835 * t672 + t831 * t673;
t882 = t810 * pkin(3) + t784 * t737 - t599;
t518 = -t977 - t729 * pkin(4) - t991 * pkin(9) + (t989 - t752) * t814 - t882;
t968 = t830 * t518;
t638 = t702 + t726;
t967 = t830 * t638;
t966 = t831 * t671;
t767 = t828 * t846 + t982;
t962 = t832 * t767;
t813 = t836 * t832 * t973;
t791 = -t813 + t923;
t960 = t832 * t791;
t792 = t813 + t923;
t959 = t832 * t792;
t957 = t834 * t518;
t956 = t834 * t638;
t955 = t835 * t671;
t950 = t836 * t767;
t949 = t836 * t791;
t948 = t836 * t792;
t826 = t832 ^ 2;
t827 = t836 ^ 2;
t946 = t826 + t827;
t936 = t826 * t973;
t935 = t827 * t973;
t934 = t831 * t702;
t932 = t835 * t702;
t648 = -t747 * qJD(5) + t830 * t729 - t834 * t789;
t930 = -t775 - t992;
t929 = qJ(4) * t831 + pkin(2);
t527 = t835 * t599 - t831 * t947;
t926 = t834 * t729 + t830 * t789;
t769 = -t833 * t816 - t837 * t817;
t812 = t837 * qJDD(1) - t833 * t838;
t920 = -pkin(6) * t812 - t833 * g(3);
t776 = -t936 - t922;
t736 = -t832 * t776 - t949;
t916 = pkin(7) * t736 - t962;
t799 = -t922 - t935;
t744 = t836 * t799 - t959;
t915 = pkin(7) * t744 + t950;
t427 = t831 * t433 + t835 * t518;
t914 = t427 * t832 - t434 * t836;
t852 = 0.2e1 * qJD(4) * t814 + t882;
t554 = -t852 - t977;
t487 = t835 * t554 + t831 * t871;
t562 = t786 * t928 + t840;
t913 = t487 * t832 - t562 * t836;
t854 = (-qJD(5) + t778) * t749 + t926;
t880 = t648 + t981;
t536 = t830 * t854 - t834 * t880;
t649 = -t746 - t992;
t507 = t831 * t536 + t835 * t649;
t538 = t830 * t880 + t834 * t854;
t912 = t507 * t832 - t538 * t836;
t611 = (qJD(5) + t778) * t749 - t926;
t881 = t648 - t981;
t535 = t830 * t611 - t834 * t881;
t701 = -t746 + t992;
t511 = -t831 * t535 + t835 * t701;
t537 = t834 * t611 + t830 * t881;
t911 = t511 * t832 + t537 * t836;
t663 = -t775 - t746;
t577 = t830 * t663 + t1018;
t521 = t831 * t577 + t835 * t611;
t578 = t834 * t663 - t1019;
t910 = t521 * t832 - t578 * t836;
t582 = t834 * t930 - t967;
t525 = t831 * t582 + t835 * t881;
t583 = -t830 * t930 - t956;
t909 = t525 * t832 - t583 * t836;
t908 = t527 * t832 - t671 * t836;
t712 = t746 - t775;
t594 = -t830 * t712 - t956;
t530 = -t831 * t594 + t835 * t854;
t596 = -t834 * t712 + t967;
t907 = t530 * t832 + t596 * t836;
t713 = t775 - t992;
t593 = -t834 * t713 - t1019;
t531 = -t831 * t593 + t835 * t880;
t595 = t830 * t713 - t1018;
t906 = t531 * t832 + t595 * t836;
t647 = -t749 * qJD(5) + t926;
t606 = -t834 * t647 - t747 * t980;
t566 = -t831 * t606 - t932;
t607 = t830 * t647 - t747 * t979;
t905 = t566 * t832 + t607 * t836;
t608 = -t830 * t648 - t749 * t979;
t567 = -t831 * t608 + t932;
t609 = -t834 * t648 + t749 * t980;
t904 = t567 * t832 + t609 * t836;
t526 = t831 * t599 + t835 * t947;
t641 = (t747 * t830 + t749 * t834) * t778;
t605 = -t831 * t641 + t835 * t726;
t642 = (t747 * t834 - t749 * t830) * t778;
t903 = t605 * t832 + t642 * t836;
t692 = (-qJD(3) - t814) * t784 + t848;
t620 = t831 * t692 - t1031;
t902 = t620 * t832 + t1038;
t621 = -t831 * t694 - t954;
t901 = t621 * t832 + t1020;
t622 = t695 * t831 - t954;
t900 = t622 * t832 + t1020;
t623 = -t831 * t696 - t1031;
t899 = t623 * t832 + t1038;
t894 = t692 * t836 + t1052;
t893 = t696 * t836 - t1052;
t734 = g(3) * t971 + t925;
t735 = t836 * t790 + t842;
t890 = -t836 * t734 + t832 * t735;
t650 = t832 * t734 + t836 * t735;
t803 = t828 * t869;
t759 = t803 + t794;
t802 = t828 * t868;
t762 = t795 - t802;
t889 = t759 * t836 + t762 * t832;
t760 = -t803 + t794;
t761 = t795 + t802;
t888 = -t760 * t836 + t761 * t832;
t887 = t776 * t836 - t960;
t798 = -t922 + t935;
t886 = t798 * t832 + t949;
t797 = t922 - t936;
t885 = t797 * t836 + t959;
t884 = t799 * t832 + t948;
t768 = t837 * t816 - t833 * t817;
t878 = t828 * t923;
t870 = t828 * t883;
t408 = pkin(4) * t518 - t988 * t434;
t410 = pkin(4) * t433 - qJ(4) * t434;
t426 = -t835 * t433 + t831 * t518;
t395 = -pkin(8) * t426 - t831 * t408 + t835 * t410;
t404 = -pkin(2) * t426 - qJ(4) * t518 + t988 * t433;
t407 = t836 * t427 + t832 * t434;
t865 = pkin(7) * t407 + t395 * t832 + t404 * t836;
t419 = pkin(4) * t649 - t988 * t538 - t434;
t476 = pkin(4) * t536 - qJ(4) * t538;
t506 = -t835 * t536 + t831 * t649;
t409 = -pkin(8) * t506 - t831 * t419 + t835 * t476;
t412 = -pkin(2) * t506 - qJ(4) * t649 + t988 * t536 + t433;
t472 = t836 * t507 + t832 * t538;
t864 = pkin(7) * t472 + t409 * t832 + t412 * t836;
t449 = pkin(4) * t577 - qJ(4) * t578 + t927;
t459 = pkin(4) * t611 - t988 * t578 + t957;
t520 = -t835 * t577 + t831 * t611;
t415 = -pkin(8) * t520 + t835 * t449 - t831 * t459;
t441 = -pkin(2) * t520 - qJ(4) * t611 + t988 * t577 - t968;
t483 = t836 * t521 + t832 * t578;
t863 = pkin(7) * t483 + t415 * t832 + t441 * t836;
t451 = pkin(4) * t582 - qJ(4) * t583 - t471;
t460 = pkin(4) * t881 - t988 * t583 - t968;
t524 = -t835 * t582 + t831 * t881;
t416 = -pkin(8) * t524 + t835 * t451 - t831 * t460;
t443 = -pkin(2) * t524 - qJ(4) * t881 + t988 * t582 - t957;
t485 = t836 * t525 + t832 * t583;
t862 = pkin(7) * t485 + t416 * t832 + t443 * t836;
t486 = t831 * t554 - t835 * t871;
t454 = -pkin(2) * t486 + pkin(3) * t871 - qJ(4) * t554;
t455 = -pkin(8) * t486 + (-qJ(4) * t835 + t985) * t562;
t467 = t836 * t487 + t832 * t562;
t861 = pkin(7) * t467 + t454 * t836 + t455 * t832;
t534 = pkin(3) * t711 + t554;
t539 = qJ(4) * t711 + t871;
t616 = -t835 * t692 - t1037;
t466 = -pkin(8) * t616 - t831 * t534 + t835 * t539;
t540 = -pkin(2) * t616 + pkin(3) * t692 + qJ(4) * t687;
t571 = t836 * t620 - t1032;
t860 = pkin(7) * t571 + t466 * t832 + t540 * t836;
t533 = (t688 - t976) * pkin(3) + t1030;
t488 = qJ(4) * t954 - t831 * t533 + t1056;
t497 = -pkin(3) * t849 + qJ(4) * t733 + t1058 - t871;
t859 = t488 * t832 + t497 * t836 - t1067;
t532 = pkin(3) * t976 - qJ(4) * t695 - t1030;
t491 = t835 * t532 + t695 * t985 - t1054;
t502 = -t1057 - pkin(3) * t740 + (t850 + t789) * qJ(4) + t852;
t858 = t491 * t832 + t502 * t836 - t1066;
t550 = -t947 - t1058;
t584 = t966 - t1056;
t857 = t550 * t836 + t584 * t832 + t1067;
t553 = t599 + t1057;
t589 = t955 + t1054;
t856 = t553 * t836 + t589 * t832 + t1066;
t703 = t832 * t760 + t836 * t761;
t855 = pkin(7) * t703 + t650;
t619 = t835 * t696 - t1037;
t492 = -pkin(8) * t619 - t526;
t572 = t836 * t623 - t1032;
t853 = pkin(7) * t572 + t492 * t832 - t619 * t986;
t504 = t836 * t527 + t832 * t671;
t847 = pkin(7) * t504 + t526 * t921;
t844 = t828 * t973 + t829 * t870;
t811 = t833 * qJDD(1) + t837 * t838;
t801 = t946 * t973;
t800 = (t826 - t827) * t973;
t796 = -pkin(6) * t811 + t837 * g(3);
t766 = t924 * t946 * t945;
t758 = (t938 + (0.2e1 * qJD(2) + t942) * t941) * t828;
t751 = t836 * t794 - t826 * t870;
t750 = -t832 * t795 - t827 * t870;
t743 = t836 * t798 - t960;
t742 = -t832 * t797 + t948;
t732 = (t829 * t794 + t836 * t844) * t832;
t731 = (t829 * t795 - t832 * t844) * t836;
t704 = -t832 * t759 + t836 * t762;
t700 = t828 * t762 + t829 * t884;
t699 = -t828 * t761 + t829 * t886;
t698 = -t828 * t760 + t829 * t885;
t697 = -t829 * t762 + t828 * t884;
t685 = -t828 * t758 + t829 * t887;
t684 = t829 * t758 + t828 * t887;
t670 = -t828 * t800 + t829 * t889;
t669 = t828 * t801 + t829 * t888;
t668 = -t829 * t801 + t828 * t888;
t640 = -t833 * t700 + t837 * t744;
t639 = t837 * t700 + t833 * t744;
t631 = -t833 * t685 + t837 * t736;
t630 = t837 * t685 + t833 * t736;
t629 = t828 * t767 + t829 * t890;
t628 = -t829 * t767 + t828 * t890;
t625 = -t833 * t669 + t837 * t703;
t624 = t837 * t669 + t833 * t703;
t618 = -t695 * t835 - t1036;
t617 = t835 * t694 - t1036;
t604 = t835 * t641 + t831 * t726;
t601 = -t832 * t696 - t1043;
t600 = -t832 * t692 + t1043;
t592 = -t962 + (-t697 * t828 - t700 * t829) * pkin(7);
t586 = -t950 + (-t684 * t828 - t685 * t829) * pkin(7);
t585 = -pkin(1) * t697 + t828 * t734 + t829 * t915;
t581 = t836 * t622 - t1021;
t580 = t836 * t621 - t1021;
t579 = -pkin(1) * t684 + t828 * t735 + t829 * t916;
t570 = t829 * pkin(7) * t650 - pkin(1) * t628;
t569 = -t833 * t629 + t837 * t650;
t568 = t837 * t629 + t833 * t650;
t565 = t835 * t608 + t934;
t564 = t835 * t606 - t934;
t563 = -pkin(1) * t668 + t829 * t855;
t560 = pkin(2) * t695 + t1053 + t966;
t557 = t829 * t893 - t1049;
t556 = t829 * t894 + t1049;
t555 = (-t628 * t828 - t629 * t829) * pkin(7);
t552 = -pkin(2) * t688 + t1055 - t955;
t551 = (-t668 * t828 - t669 * t829) * pkin(7) - t890;
t545 = t836 * t605 - t832 * t642;
t529 = t835 * t593 + t831 * t880;
t528 = t835 * t594 + t831 * t854;
t523 = -t828 * t618 + t829 * t900;
t522 = -t828 * t617 + t829 * t901;
t516 = -t828 * t619 + t829 * t899;
t515 = -t828 * t616 + t829 * t902;
t514 = t829 * t619 + t828 * t899;
t513 = t829 * t616 + t828 * t902;
t510 = t835 * t535 + t831 * t701;
t509 = t836 * t567 - t832 * t609;
t508 = t836 * t566 - t832 * t607;
t505 = -pkin(2) * t671 + pkin(8) * t527;
t503 = -t828 * t604 + t829 * t903;
t490 = t836 * t531 - t832 * t595;
t489 = t836 * t530 - t832 * t596;
t484 = pkin(8) * t623 + t1042 + t527;
t482 = -t1053 + t831 * t532 - (pkin(2) + t984) * t695;
t481 = t835 * t533 + t688 * t929 - t1055;
t480 = -t833 * t516 + t837 * t572;
t479 = -t833 * t515 + t837 * t571;
t478 = t837 * t516 + t833 * t572;
t477 = t837 * t515 + t833 * t571;
t475 = -t828 * t565 + t829 * t904;
t474 = -t828 * t564 + t829 * t905;
t473 = t836 * t511 - t832 * t537;
t469 = -t828 * t526 + t829 * t908;
t468 = t829 * t526 + t828 * t908;
t465 = pkin(8) * t620 + t835 * t534 + t831 * t539 + t1042;
t464 = -t828 * t529 + t829 * t906;
t463 = -t828 * t528 + t829 * t907;
t462 = -t828 * t524 + t829 * t909;
t461 = t829 * t524 + t828 * t909;
t458 = -t828 * t520 + t829 * t910;
t457 = t829 * t520 + t828 * t910;
t456 = -t832 * t553 + t836 * t589 - t1077;
t453 = -t832 * t550 + t836 * t584 - t1076;
t452 = -t828 * t510 + t829 * t911;
t450 = -t828 * t560 + t829 * t856 - t1073;
t448 = -t828 * t506 + t829 * t912;
t447 = t829 * t506 + t828 * t912;
t446 = -t833 * t469 + t837 * t504;
t445 = t837 * t469 + t833 * t504;
t444 = -t828 * t552 + t829 * t857 - t1075;
t442 = pkin(8) * t487 + (-t929 - t984) * t562;
t440 = -t828 * t486 + t829 * t913;
t439 = t829 * t486 + t828 * t913;
t438 = t619 * t987 + t836 * t492 + (-t514 * t828 - t516 * t829) * pkin(7);
t437 = -t833 * t462 + t837 * t485;
t436 = t837 * t462 + t833 * t485;
t435 = t836 * t491 - t832 * t502 + t1077;
t432 = -t833 * t458 + t837 * t483;
t431 = t837 * t458 + t833 * t483;
t430 = t836 * t488 - t832 * t497 + t1076;
t429 = -pkin(1) * t514 - t828 * t484 + t829 * t853;
t428 = t836 * t466 - t832 * t540 + (-t513 * t828 - t515 * t829) * pkin(7);
t425 = -t833 * t448 + t837 * t472;
t424 = t837 * t448 + t833 * t472;
t423 = -t828 * t482 + t829 * t858 + t1073;
t422 = -t828 * t481 + t829 * t859 + t1075;
t421 = -t833 * t440 + t837 * t467;
t420 = t837 * t440 + t833 * t467;
t418 = (-pkin(8) * t836 + t987) * t526 + (-t468 * t828 - t469 * t829) * pkin(7);
t417 = -pkin(1) * t468 - t828 * t505 + t829 * t847;
t414 = -pkin(1) * t513 - t828 * t465 + t829 * t860;
t413 = -pkin(2) * t583 + pkin(8) * t525 + t831 * t451 + t835 * t460;
t411 = -pkin(2) * t578 + pkin(8) * t521 + t831 * t449 + t835 * t459;
t406 = -pkin(2) * t538 + pkin(8) * t507 + t835 * t419 + t831 * t476;
t405 = -t832 * t454 + t836 * t455 + (-t439 * t828 - t440 * t829) * pkin(7);
t403 = -t828 * t426 + t829 * t914;
t402 = t829 * t426 + t828 * t914;
t401 = -pkin(1) * t439 - t828 * t442 + t829 * t861;
t400 = t836 * t416 - t832 * t443 + (-t461 * t828 - t462 * t829) * pkin(7);
t399 = t836 * t415 - t832 * t441 + (-t457 * t828 - t458 * t829) * pkin(7);
t398 = -pkin(1) * t461 - t828 * t413 + t829 * t862;
t397 = -pkin(1) * t457 - t828 * t411 + t829 * t863;
t396 = t836 * t409 - t832 * t412 + (-t447 * t828 - t448 * t829) * pkin(7);
t394 = -t833 * t403 + t837 * t407;
t393 = t837 * t403 + t833 * t407;
t392 = -pkin(2) * t434 + pkin(8) * t427 + t835 * t408 + t831 * t410;
t391 = -pkin(1) * t447 - t828 * t406 + t829 * t864;
t390 = t836 * t395 - t832 * t404 + (-t402 * t828 - t403 * t829) * pkin(7);
t389 = -pkin(1) * t402 - t828 * t392 + t829 * t865;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t811, -t812, 0, t769, 0, 0, 0, 0, 0, 0, t640, t631, t625, t569, 0, 0, 0, 0, 0, 0, -t496, -t501, t480, t446, 0, 0, 0, 0, 0, 0, t479, t496, t501, t421, 0, 0, 0, 0, 0, 0, t432, t437, t425, t394; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t812, -t811, 0, t768, 0, 0, 0, 0, 0, 0, t639, t630, t624, t568, 0, 0, 0, 0, 0, 0, t493, t498, t478, t445, 0, 0, 0, 0, 0, 0, t477, -t493, -t498, t420, 0, 0, 0, 0, 0, 0, t431, t436, t424, t393; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t697, t684, t668, t628, 0, 0, 0, 0, 0, 0, t541, t546, t514, t468, 0, 0, 0, 0, 0, 0, t513, -t541, -t546, t439, 0, 0, 0, 0, 0, 0, t457, t461, t447, t402; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t812, 0, -t811, 0, t920, -t796, -t768, -pkin(6) * t768, -t833 * t732 + t837 * t751, -t833 * t670 + t837 * t704, -t833 * t698 + t837 * t742, -t833 * t731 + t837 * t750, -t833 * t699 + t837 * t743, t837 * t766 + t833 * t878, -pkin(6) * t639 - t833 * t585 + t837 * t592, -pkin(6) * t630 - t833 * t579 + t837 * t586, -pkin(6) * t624 + t837 * t551 - t833 * t563, -pkin(6) * t568 + t837 * t555 - t833 * t570, t1027, -t833 * t522 + t837 * t580, -t833 * t557 + t837 * t601, t1029, -t1071, t1012, -t833 * t444 + t837 * t453 - t1081, -t833 * t450 + t837 * t456 - t1079, -pkin(6) * t478 - t833 * t429 + t837 * t438, -pkin(6) * t445 - t833 * t417 + t837 * t418, t1012, -t833 * t556 + t837 * t600, t1071, t1027, -t833 * t523 + t837 * t581, t1029, -pkin(6) * t477 - t833 * t414 + t837 * t428, -t833 * t422 + t837 * t430 + t1081, -t833 * t423 + t837 * t435 + t1079, -pkin(6) * t420 - t833 * t401 + t837 * t405, -t833 * t475 + t837 * t509, -t833 * t452 + t837 * t473, -t833 * t464 + t837 * t490, -t833 * t474 + t837 * t508, -t833 * t463 + t837 * t489, -t833 * t503 + t837 * t545, -pkin(6) * t431 - t833 * t397 + t837 * t399, -pkin(6) * t436 - t833 * t398 + t837 * t400, -pkin(6) * t424 - t833 * t391 + t837 * t396, -pkin(6) * t393 - t833 * t389 + t837 * t390; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t811, 0, t812, 0, t796, t920, t769, pkin(6) * t769, t837 * t732 + t833 * t751, t837 * t670 + t833 * t704, t837 * t698 + t833 * t742, t837 * t731 + t833 * t750, t837 * t699 + t833 * t743, t833 * t766 - t837 * t878, pkin(6) * t640 + t837 * t585 + t833 * t592, pkin(6) * t631 + t837 * t579 + t833 * t586, pkin(6) * t625 + t833 * t551 + t837 * t563, pkin(6) * t569 + t833 * t555 + t837 * t570, t1026, t837 * t522 + t833 * t580, t837 * t557 + t833 * t601, t1028, t1070, t1013, t837 * t444 + t833 * t453 - t1080, t837 * t450 + t833 * t456 - t1078, pkin(6) * t480 + t837 * t429 + t833 * t438, pkin(6) * t446 + t837 * t417 + t833 * t418, t1013, t837 * t556 + t833 * t600, -t1070, t1026, t837 * t523 + t833 * t581, t1028, pkin(6) * t479 + t837 * t414 + t833 * t428, t837 * t422 + t833 * t430 + t1080, t837 * t423 + t833 * t435 + t1078, pkin(6) * t421 + t837 * t401 + t833 * t405, t837 * t475 + t833 * t509, t837 * t452 + t833 * t473, t837 * t464 + t833 * t490, t837 * t474 + t833 * t508, t837 * t463 + t833 * t489, t837 * t503 + t833 * t545, pkin(6) * t432 + t837 * t397 + t833 * t399, pkin(6) * t437 + t837 * t398 + t833 * t400, pkin(6) * t425 + t837 * t391 + t833 * t396, pkin(6) * t394 + t837 * t389 + t833 * t390; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t816, t817, 0, 0, (t836 * t1011 + t828 * t794) * t832, t829 * t800 + t828 * t889, t829 * t760 + t828 * t885, (-t832 * t1011 + t828 * t795) * t836, t829 * t761 + t828 * t886, t829 * t923, pkin(1) * t700 - t829 * t734 + t828 * t915, pkin(1) * t685 - t829 * t735 + t828 * t916, pkin(1) * t669 + t828 * t855, pkin(1) * t629 + t650 * t983, t1017, t829 * t617 + t828 * t901, t828 * t893 + t1045, t1016, t1059, t994, t829 * t552 + t828 * t857 + t1074, t829 * t560 + t828 * t856 + t1072, pkin(1) * t516 + t829 * t484 + t828 * t853, pkin(1) * t469 + t829 * t505 + t828 * t847, t994, t828 * t894 - t1045, -t1059, t1017, t829 * t618 + t828 * t900, t1016, pkin(1) * t515 + t829 * t465 + t828 * t860, t829 * t481 + t828 * t859 - t1074, t829 * t482 + t828 * t858 - t1072, pkin(1) * t440 + t829 * t442 + t828 * t861, t829 * t565 + t828 * t904, t829 * t510 + t828 * t911, t829 * t529 + t828 * t906, t829 * t564 + t828 * t905, t829 * t528 + t828 * t907, t829 * t604 + t828 * t903, pkin(1) * t458 + t829 * t411 + t828 * t863, pkin(1) * t462 + t829 * t413 + t828 * t862, pkin(1) * t448 + t829 * t406 + t828 * t864, pkin(1) * t403 + t829 * t392 + t828 * t865;];
tauB_reg = t1;
