% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRRR7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:04
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRRR7_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR7_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR7_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR7_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR7_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR7_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:04:48
% EndTime: 2019-12-31 19:04:51
% DurationCPUTime: 2.61s
% Computational Cost: add. (13726->223), mult. (26813->311), div. (0->0), fcn. (17925->10), ass. (0->178)
t1439 = cos(qJ(3));
t1457 = t1439 * qJD(1);
t1414 = -qJD(4) + t1457;
t1409 = -qJD(5) + t1414;
t1470 = qJD(5) - t1409;
t1469 = qJD(3) ^ 2;
t1434 = sin(qJ(4));
t1438 = cos(qJ(4));
t1435 = sin(qJ(3));
t1461 = qJD(1) * t1435;
t1391 = -t1438 * qJD(3) + t1434 * t1461;
t1393 = t1434 * qJD(3) + t1438 * t1461;
t1433 = sin(qJ(5));
t1437 = cos(qJ(5));
t1371 = t1437 * t1391 + t1433 * t1393;
t1468 = t1371 ^ 2;
t1373 = -t1433 * t1391 + t1437 * t1393;
t1467 = t1373 ^ 2;
t1466 = t1391 ^ 2;
t1465 = t1393 ^ 2;
t1464 = t1409 ^ 2;
t1463 = t1414 ^ 2;
t1462 = -g(3) + qJDD(2);
t1460 = t1373 * t1371;
t1459 = t1391 * t1414;
t1458 = t1393 * t1391;
t1456 = qJD(4) + t1414;
t1455 = qJD(5) + t1409;
t1436 = sin(qJ(1));
t1440 = cos(qJ(1));
t1408 = -t1440 * g(1) - t1436 * g(2);
t1441 = qJD(1) ^ 2;
t1394 = -t1441 * pkin(1) + t1408;
t1429 = sin(pkin(9));
t1430 = cos(pkin(9));
t1407 = t1436 * g(1) - t1440 * g(2);
t1444 = qJDD(1) * pkin(1) + t1407;
t1374 = -t1429 * t1394 + t1430 * t1444;
t1366 = -qJDD(1) * pkin(2) - t1441 * pkin(6) - t1374;
t1452 = qJD(3) * t1457;
t1453 = t1435 * qJDD(1);
t1397 = t1452 + t1453;
t1419 = qJD(3) * t1461;
t1422 = t1439 * qJDD(1);
t1398 = t1422 - 0.2e1 * t1419;
t1340 = (-t1397 - t1452) * pkin(7) - t1398 * pkin(3) + t1366;
t1375 = t1430 * t1394 + t1429 * t1444;
t1367 = -t1441 * pkin(2) + qJDD(1) * pkin(6) + t1375;
t1355 = t1439 * t1367 + t1435 * t1462;
t1395 = (-pkin(3) * t1439 - pkin(7) * t1435) * qJD(1);
t1348 = -t1469 * pkin(3) + qJDD(3) * pkin(7) + t1395 * t1457 + t1355;
t1316 = t1434 * t1340 + t1438 * t1348;
t1425 = t1435 ^ 2;
t1426 = t1439 ^ 2;
t1454 = t1425 + t1426;
t1451 = t1422 - qJDD(4) - t1419;
t1315 = t1438 * t1340 - t1434 * t1348;
t1445 = -t1434 * qJDD(3) - t1438 * t1397;
t1369 = -t1391 * qJD(4) - t1445;
t1448 = -t1438 * qJDD(3) + t1434 * t1397;
t1443 = t1393 * qJD(4) + t1448;
t1450 = -t1433 * t1369 - t1437 * t1443;
t1399 = -t1429 * qJDD(1) - t1430 * t1441;
t1400 = t1430 * qJDD(1) - t1429 * t1441;
t1449 = t1440 * t1399 - t1436 * t1400;
t1447 = -qJDD(5) + t1451;
t1446 = t1436 * t1399 + t1440 * t1400;
t1364 = -t1451 - t1458;
t1418 = t1439 * t1462;
t1347 = -t1418 - qJDD(3) * pkin(3) - t1469 * pkin(7) + (qJD(1) * t1395 + t1367) * t1435;
t1442 = -t1437 * t1369 + t1433 * t1443;
t1413 = t1439 * t1441 * t1435;
t1412 = -t1426 * t1441 - t1469;
t1411 = -t1425 * t1441 - t1469;
t1406 = -qJDD(3) + t1413;
t1405 = qJDD(3) + t1413;
t1404 = t1454 * t1441;
t1403 = -t1436 * qJDD(1) - t1440 * t1441;
t1402 = t1440 * qJDD(1) - t1436 * t1441;
t1401 = t1454 * qJDD(1);
t1396 = 0.2e1 * t1452 + t1453;
t1383 = -t1414 * pkin(4) - t1393 * pkin(8);
t1382 = t1439 * t1406 - t1435 * t1411;
t1381 = -t1435 * t1405 + t1439 * t1412;
t1380 = t1435 * t1406 + t1439 * t1411;
t1379 = t1439 * t1405 + t1435 * t1412;
t1378 = -t1463 - t1465;
t1377 = t1430 * t1401 - t1429 * t1404;
t1376 = t1429 * t1401 + t1430 * t1404;
t1370 = -t1463 - t1466;
t1363 = t1451 - t1458;
t1362 = -t1465 - t1466;
t1359 = t1430 * t1382 + t1429 * t1396;
t1358 = t1430 * t1381 - t1429 * t1398;
t1357 = t1429 * t1382 - t1430 * t1396;
t1356 = t1429 * t1381 + t1430 * t1398;
t1354 = -t1435 * t1367 + t1418;
t1353 = -t1464 - t1467;
t1352 = t1456 * t1391 + t1445;
t1351 = t1369 + t1459;
t1350 = -t1456 * t1393 - t1448;
t1349 = (qJD(4) - t1414) * t1393 + t1448;
t1346 = -t1429 * t1374 + t1430 * t1375;
t1345 = t1430 * t1374 + t1429 * t1375;
t1343 = t1438 * t1363 - t1434 * t1378;
t1342 = t1434 * t1363 + t1438 * t1378;
t1341 = -t1464 - t1468;
t1339 = -t1434 * t1364 + t1438 * t1370;
t1338 = t1438 * t1364 + t1434 * t1370;
t1337 = -t1447 - t1460;
t1336 = t1447 - t1460;
t1333 = -t1467 - t1468;
t1332 = -t1435 * t1354 + t1439 * t1355;
t1331 = t1439 * t1354 + t1435 * t1355;
t1330 = t1438 * t1350 - t1434 * t1352;
t1329 = t1434 * t1350 + t1438 * t1352;
t1328 = t1439 * t1343 + t1435 * t1351;
t1327 = t1435 * t1343 - t1439 * t1351;
t1326 = t1437 * t1336 - t1433 * t1353;
t1325 = t1433 * t1336 + t1437 * t1353;
t1324 = t1439 * t1339 + t1435 * t1349;
t1323 = t1435 * t1339 - t1439 * t1349;
t1322 = t1430 * t1332 + t1429 * t1366;
t1321 = t1429 * t1332 - t1430 * t1366;
t1320 = t1455 * t1371 + t1442;
t1319 = -t1470 * t1371 - t1442;
t1318 = -t1455 * t1373 + t1450;
t1317 = t1470 * t1373 - t1450;
t1314 = t1443 * pkin(4) - t1466 * pkin(8) + t1393 * t1383 + t1347;
t1313 = -t1433 * t1337 + t1437 * t1341;
t1312 = t1437 * t1337 + t1433 * t1341;
t1311 = t1439 * t1330 + t1435 * t1362;
t1310 = t1435 * t1330 - t1439 * t1362;
t1309 = t1430 * t1328 + t1429 * t1342;
t1308 = t1429 * t1328 - t1430 * t1342;
t1307 = t1430 * t1324 + t1429 * t1338;
t1306 = t1429 * t1324 - t1430 * t1338;
t1305 = -t1466 * pkin(4) - t1443 * pkin(8) + t1414 * t1383 + t1316;
t1304 = (-t1369 + t1459) * pkin(8) + t1364 * pkin(4) + t1315;
t1303 = -t1434 * t1325 + t1438 * t1326;
t1302 = t1438 * t1325 + t1434 * t1326;
t1301 = t1430 * t1311 + t1429 * t1329;
t1300 = t1429 * t1311 - t1430 * t1329;
t1299 = t1437 * t1318 - t1433 * t1320;
t1298 = t1433 * t1318 + t1437 * t1320;
t1297 = -t1434 * t1315 + t1438 * t1316;
t1296 = t1438 * t1315 + t1434 * t1316;
t1295 = -t1434 * t1312 + t1438 * t1313;
t1294 = t1438 * t1312 + t1434 * t1313;
t1293 = t1439 * t1297 + t1435 * t1347;
t1292 = t1435 * t1297 - t1439 * t1347;
t1291 = t1439 * t1303 + t1435 * t1319;
t1290 = t1435 * t1303 - t1439 * t1319;
t1289 = t1439 * t1295 + t1435 * t1317;
t1288 = t1435 * t1295 - t1439 * t1317;
t1287 = t1433 * t1304 + t1437 * t1305;
t1286 = t1437 * t1304 - t1433 * t1305;
t1285 = -t1434 * t1298 + t1438 * t1299;
t1284 = t1438 * t1298 + t1434 * t1299;
t1283 = t1430 * t1293 + t1429 * t1296;
t1282 = t1429 * t1293 - t1430 * t1296;
t1281 = t1430 * t1291 + t1429 * t1302;
t1280 = t1429 * t1291 - t1430 * t1302;
t1279 = t1439 * t1285 + t1435 * t1333;
t1278 = t1435 * t1285 - t1439 * t1333;
t1277 = t1430 * t1289 + t1429 * t1294;
t1276 = t1429 * t1289 - t1430 * t1294;
t1275 = -t1433 * t1286 + t1437 * t1287;
t1274 = t1437 * t1286 + t1433 * t1287;
t1273 = t1430 * t1279 + t1429 * t1284;
t1272 = t1429 * t1279 - t1430 * t1284;
t1271 = -t1434 * t1274 + t1438 * t1275;
t1270 = t1438 * t1274 + t1434 * t1275;
t1269 = t1439 * t1271 + t1435 * t1314;
t1268 = t1435 * t1271 - t1439 * t1314;
t1267 = t1430 * t1269 + t1429 * t1270;
t1266 = t1429 * t1269 - t1430 * t1270;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1403, -t1402, 0, -t1436 * t1407 + t1440 * t1408, 0, 0, 0, 0, 0, 0, t1449, -t1446, 0, -t1436 * t1345 + t1440 * t1346, 0, 0, 0, 0, 0, 0, -t1436 * t1356 + t1440 * t1358, -t1436 * t1357 + t1440 * t1359, -t1436 * t1376 + t1440 * t1377, -t1436 * t1321 + t1440 * t1322, 0, 0, 0, 0, 0, 0, -t1436 * t1306 + t1440 * t1307, -t1436 * t1308 + t1440 * t1309, -t1436 * t1300 + t1440 * t1301, -t1436 * t1282 + t1440 * t1283, 0, 0, 0, 0, 0, 0, -t1436 * t1276 + t1440 * t1277, -t1436 * t1280 + t1440 * t1281, -t1436 * t1272 + t1440 * t1273, -t1436 * t1266 + t1440 * t1267; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1402, t1403, 0, t1440 * t1407 + t1436 * t1408, 0, 0, 0, 0, 0, 0, t1446, t1449, 0, t1440 * t1345 + t1436 * t1346, 0, 0, 0, 0, 0, 0, t1440 * t1356 + t1436 * t1358, t1440 * t1357 + t1436 * t1359, t1440 * t1376 + t1436 * t1377, t1440 * t1321 + t1436 * t1322, 0, 0, 0, 0, 0, 0, t1440 * t1306 + t1436 * t1307, t1440 * t1308 + t1436 * t1309, t1440 * t1300 + t1436 * t1301, t1440 * t1282 + t1436 * t1283, 0, 0, 0, 0, 0, 0, t1440 * t1276 + t1436 * t1277, t1440 * t1280 + t1436 * t1281, t1440 * t1272 + t1436 * t1273, t1440 * t1266 + t1436 * t1267; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1462, 0, 0, 0, 0, 0, 0, t1379, t1380, 0, t1331, 0, 0, 0, 0, 0, 0, t1323, t1327, t1310, t1292, 0, 0, 0, 0, 0, 0, t1288, t1290, t1278, t1268; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1441, -qJDD(1), 0, t1408, 0, 0, 0, 0, 0, 0, t1399, -t1400, 0, t1346, 0, 0, 0, 0, 0, 0, t1358, t1359, t1377, t1322, 0, 0, 0, 0, 0, 0, t1307, t1309, t1301, t1283, 0, 0, 0, 0, 0, 0, t1277, t1281, t1273, t1267; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1441, 0, t1407, 0, 0, 0, 0, 0, 0, t1400, t1399, 0, t1345, 0, 0, 0, 0, 0, 0, t1356, t1357, t1376, t1321, 0, 0, 0, 0, 0, 0, t1306, t1308, t1300, t1282, 0, 0, 0, 0, 0, 0, t1276, t1280, t1272, t1266; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1462, 0, 0, 0, 0, 0, 0, t1379, t1380, 0, t1331, 0, 0, 0, 0, 0, 0, t1323, t1327, t1310, t1292, 0, 0, 0, 0, 0, 0, t1288, t1290, t1278, t1268; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1441, -qJDD(1), 0, t1375, 0, 0, 0, 0, 0, 0, t1381, t1382, t1401, t1332, 0, 0, 0, 0, 0, 0, t1324, t1328, t1311, t1293, 0, 0, 0, 0, 0, 0, t1289, t1291, t1279, t1269; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1441, 0, t1374, 0, 0, 0, 0, 0, 0, t1398, -t1396, t1404, -t1366, 0, 0, 0, 0, 0, 0, -t1338, -t1342, -t1329, -t1296, 0, 0, 0, 0, 0, 0, -t1294, -t1302, -t1284, -t1270; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1462, 0, 0, 0, 0, 0, 0, t1379, t1380, 0, t1331, 0, 0, 0, 0, 0, 0, t1323, t1327, t1310, t1292, 0, 0, 0, 0, 0, 0, t1288, t1290, t1278, t1268; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1412, t1406, t1422, t1355, 0, 0, 0, 0, 0, 0, t1339, t1343, t1330, t1297, 0, 0, 0, 0, 0, 0, t1295, t1303, t1285, t1271; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1405, t1411, -t1453, t1354, 0, 0, 0, 0, 0, 0, -t1349, -t1351, -t1362, -t1347, 0, 0, 0, 0, 0, 0, -t1317, -t1319, -t1333, -t1314; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1398, t1396, -t1404, t1366, 0, 0, 0, 0, 0, 0, t1338, t1342, t1329, t1296, 0, 0, 0, 0, 0, 0, t1294, t1302, t1284, t1270; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1370, t1363, t1350, t1316, 0, 0, 0, 0, 0, 0, t1313, t1326, t1299, t1275; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1364, t1378, t1352, t1315, 0, 0, 0, 0, 0, 0, t1312, t1325, t1298, t1274; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1349, t1351, t1362, t1347, 0, 0, 0, 0, 0, 0, t1317, t1319, t1333, t1314; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1341, t1336, t1318, t1287; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1337, t1353, t1320, t1286; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1317, t1319, t1333, t1314;];
f_new_reg = t1;
