% Calculate inertial parameters regressor of coriolis matrix for
% S5RPRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:04
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RPRRR7_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR7_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR7_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR7_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:04:15
% EndTime: 2019-12-31 19:04:28
% DurationCPUTime: 8.26s
% Computational Cost: add. (8686->421), mult. (17737->608), div. (0->0), fcn. (17435->8), ass. (0->324)
t379 = cos(qJ(3));
t603 = -t379 / 0.2e1;
t378 = cos(qJ(4));
t580 = -pkin(8) - pkin(7);
t340 = t580 * t378;
t375 = sin(qJ(5));
t376 = sin(qJ(4));
t566 = cos(qJ(5));
t456 = t566 * t376;
t430 = -t375 * t340 - t580 * t456;
t596 = -t430 / 0.2e1;
t469 = qJD(4) + qJD(5);
t516 = t375 * t376;
t264 = -t566 * t340 + t580 * t516;
t377 = sin(qJ(3));
t360 = sin(pkin(9)) * pkin(1) + pkin(6);
t565 = pkin(4) * t376;
t432 = t360 + t565;
t310 = t432 * t377;
t370 = -t378 * pkin(4) - pkin(3);
t515 = t375 * t378;
t328 = t456 + t515;
t572 = -t328 / 0.2e1;
t455 = t566 * t378;
t513 = t376 * t377;
t304 = -t375 * t513 + t377 * t455;
t597 = -t304 / 0.2e1;
t602 = t264 * t603 + t310 * t572 + t370 * t597;
t324 = -t455 + t516;
t573 = -t324 / 0.2e1;
t301 = t328 * t377;
t575 = -t301 / 0.2e1;
t598 = t310 * t573 + t370 * t575 + t379 * t596;
t571 = t328 / 0.2e1;
t141 = -t301 * t571 + t304 * t573;
t601 = t469 * t141;
t361 = -cos(pkin(9)) * pkin(1) - pkin(2);
t560 = t379 * pkin(3);
t401 = t361 - t560;
t385 = (t580 * t377 + t401) * t378;
t514 = t376 * t360;
t381 = (-pkin(4) - t514) * t379 + t385;
t169 = t566 * t381;
t561 = t377 * pkin(7);
t388 = t401 - t561;
t508 = t378 * t379;
t461 = t360 * t508;
t248 = t376 * t388 + t461;
t209 = -pkin(8) * t513 + t248;
t519 = t375 * t209;
t111 = -t169 + t519;
t512 = t376 * t379;
t463 = t360 * t512;
t208 = t385 - t463;
t460 = t566 * t208;
t115 = t460 - t519;
t600 = t111 + t115;
t380 = t375 * t381;
t459 = t566 * t209;
t112 = t459 + t380;
t520 = t375 * t208;
t114 = -t459 - t520;
t599 = t112 + t114;
t558 = t379 * pkin(7);
t563 = t377 * pkin(3);
t341 = -t558 + t563;
t330 = t376 * t341;
t510 = t377 * t378;
t462 = t360 * t510;
t266 = t330 - t462;
t241 = -pkin(8) * t512 + t266;
t457 = t566 * t241;
t421 = -t457 / 0.2e1;
t332 = t378 * t341;
t334 = t360 * t513;
t265 = t334 + t332;
t562 = t377 * pkin(4);
t214 = -pkin(8) * t508 + t265 + t562;
t518 = t375 * t214;
t396 = -t518 / 0.2e1 + t421;
t41 = t396 - t598;
t458 = t566 * t214;
t517 = t375 * t241;
t395 = -t517 / 0.2e1 + t458 / 0.2e1;
t40 = t395 + t602;
t43 = t395 - t602;
t577 = -t264 / 0.2e1;
t576 = t430 / 0.2e1;
t594 = t304 * t469;
t496 = qJD(3) * t328;
t592 = -t141 * qJD(1) + t324 * t496;
t498 = qJD(1) * t304;
t591 = t141 * qJD(3) - t301 * t498;
t343 = t375 * t512;
t220 = t343 / 0.2e1 + (-t455 / 0.2e1 + t573) * t379;
t478 = t220 * qJD(2);
t590 = t469 * t430 - t478;
t589 = t469 * t264;
t588 = 0.2e1 * t376;
t578 = t112 / 0.2e1;
t574 = t304 / 0.2e1;
t587 = t301 * t469;
t428 = t469 * t328;
t586 = t324 * t428;
t394 = -t515 / 0.2e1 - t456 / 0.2e1;
t217 = (t571 + t394) * t379;
t480 = t217 * qJD(2);
t495 = qJD(3) * t370;
t584 = t40 * qJD(1) - t328 * t495 + t480;
t212 = t324 * t565 + t370 * t328;
t466 = t566 / 0.2e1;
t567 = -t378 / 0.2e1;
t28 = (t376 * t575 + (t324 * t567 + t466) * t377) * pkin(4) + t40;
t583 = t28 * qJD(1) - t212 * qJD(3) + t480;
t579 = t111 / 0.2e1;
t570 = -t375 / 0.2e1;
t569 = t375 / 0.2e1;
t568 = -t376 / 0.2e1;
t564 = t375 * pkin(4);
t559 = t379 * pkin(4);
t100 = t301 * t324 - t328 * t304;
t556 = t469 * t100;
t555 = pkin(4) * qJD(4);
t225 = t310 * t304;
t468 = pkin(4) * t510;
t50 = t114 * t379 - t301 * t468 - t225;
t552 = qJD(1) * t50;
t528 = t310 * t301;
t51 = t115 * t379 + t304 * t468 - t528;
t551 = qJD(1) * t51;
t60 = -t111 * t379 - t528;
t550 = qJD(1) * t60;
t61 = -t112 * t379 - t225;
t549 = qJD(1) * t61;
t437 = t115 / 0.2e1 + t579;
t438 = t578 + t114 / 0.2e1;
t440 = -t510 / 0.2e1;
t11 = -t301 * t438 + t304 * t437 + t440 * t559;
t546 = t11 * qJD(1);
t14 = -t600 * t301 - t599 * t304;
t543 = t14 * qJD(1);
t122 = t458 - t517;
t123 = t457 + t518;
t303 = t328 * t379;
t305 = t379 * t455 - t343;
t15 = t111 * t305 - t112 * t303 - t122 * t304 - t123 * t301;
t542 = t15 * qJD(1);
t311 = t432 * t379;
t23 = -t112 * t377 + t123 * t379 + t311 * t304 + t310 * t305;
t541 = t23 * qJD(1);
t386 = t378 * t388;
t247 = -t386 + t463;
t540 = t247 * t379;
t539 = t248 * t379;
t531 = t265 * t377;
t530 = t266 * t377;
t525 = t328 * t303;
t439 = t510 / 0.2e1;
t441 = t512 / 0.2e1;
t36 = (t559 + t360 * t441 - t386 / 0.2e1 + pkin(8) * t439 + t208 / 0.2e1) * t375;
t524 = t36 * qJD(1);
t371 = t376 ^ 2;
t521 = t371 * t379;
t366 = t377 * t379;
t372 = t377 ^ 2;
t509 = t378 * t372;
t424 = pkin(4) * t466;
t402 = -t169 / 0.2e1 + t379 * t424;
t38 = t460 / 0.2e1 + t402;
t507 = t38 * qJD(1);
t54 = (t531 - t540) * t378 + (t530 + t539) * t376;
t506 = t54 * qJD(1);
t502 = t469 * t220;
t219 = -t343 / 0.2e1 + (t455 / 0.2e1 + t573) * t379;
t501 = t469 * t219;
t373 = t378 ^ 2;
t353 = t373 - t371;
t374 = t379 ^ 2;
t354 = t374 - t372;
t499 = qJD(1) * t301;
t497 = qJD(1) * t379;
t494 = qJD(3) * t376;
t493 = qJD(3) * t378;
t492 = qJD(4) * t376;
t491 = qJD(4) * t378;
t490 = qJD(4) * t379;
t489 = qJD(5) * t370;
t120 = t247 * t377 + (t265 - 0.2e1 * t334) * t379;
t487 = t120 * qJD(1);
t121 = t266 * t379 + (-t248 + 0.2e1 * t461) * t377;
t486 = t121 * qJD(1);
t130 = -t305 * t301 - t304 * t303;
t485 = t130 * qJD(1);
t149 = -t372 * t514 - t540;
t484 = t149 * qJD(1);
t150 = -t360 * t509 - t539;
t483 = t150 * qJD(1);
t171 = t377 * t301 - t379 * t303;
t482 = t171 * qJD(1);
t172 = -t304 * t377 + t305 * t379;
t481 = t172 * qJD(1);
t218 = (t572 + t394) * t379;
t191 = t218 * qJD(1);
t192 = t219 * qJD(1);
t479 = t219 * qJD(3);
t193 = t220 * qJD(3);
t315 = (t371 / 0.2e1 - t373 / 0.2e1) * t377;
t477 = t315 * qJD(4);
t327 = t354 * t376;
t476 = t327 * qJD(1);
t329 = t378 * t374 - t509;
t475 = t329 * qJD(1);
t474 = t354 * qJD(1);
t473 = t377 * qJD(1);
t472 = t377 * qJD(3);
t471 = t377 * qJD(4);
t470 = t379 * qJD(3);
t467 = -t566 / 0.2e1;
t465 = -t565 / 0.2e1;
t464 = t565 / 0.2e1;
t454 = t378 * t473;
t453 = t324 * t472;
t452 = t376 * t490;
t451 = t378 * t490;
t449 = t304 * t497;
t447 = t361 * t473;
t446 = t361 * t497;
t445 = t376 * t491;
t444 = t376 * t493;
t443 = t377 * t470;
t358 = t379 * t473;
t442 = t378 * t472;
t436 = t596 + t576;
t435 = t264 / 0.2e1 + t577;
t434 = t566 * qJD(4);
t433 = t566 * qJD(5);
t431 = (t371 + t373) * t379;
t427 = t469 * t379;
t426 = pkin(4) * t439;
t425 = -qJD(4) + t497;
t423 = t372 * t445;
t422 = t376 * t442;
t420 = -t560 - t561;
t390 = (t303 * t570 + t305 * t467) * pkin(4);
t4 = t301 * t436 + t304 * t435 + t324 * t437 + t328 * t438 + t390;
t419 = t4 * qJD(1);
t10 = t123 * t574 + t305 * t578 + t122 * t575 + t303 * t579 + t311 * t603 + t310 * t377 / 0.2e1;
t18 = -t111 * t122 + t112 * t123 + t310 * t311;
t418 = t18 * qJD(1) + t10 * qJD(2);
t17 = -t111 * t114 + t112 * t115 + t310 * t468;
t417 = t17 * qJD(1) + t11 * qJD(2);
t44 = (t530 / 0.2e1 + t539 / 0.2e1) * t378 + (-t531 / 0.2e1 + t540 / 0.2e1) * t376 + (t372 / 0.2e1 - t374 / 0.2e1) * t360;
t62 = t360 ^ 2 * t366 - t247 * t265 + t248 * t266;
t416 = t62 * qJD(1) + t44 * qJD(2);
t415 = -t265 * t376 + t266 * t378;
t118 = t301 * t303 + t304 * t305 - t366;
t414 = t10 * qJD(1) + t118 * qJD(2);
t22 = t111 * t377 + t122 * t379 - t311 * t301 - t310 * t303;
t413 = t22 * qJD(1);
t270 = t377 * t431 - t366;
t412 = -t44 * qJD(1) - t270 * qJD(2);
t213 = -t370 * t324 + t328 * t565;
t27 = (t304 * t568 + (t328 * t567 + t570) * t377) * pkin(4) + t41;
t410 = t27 * qJD(1) - t213 * qJD(3);
t409 = t425 * t377;
t146 = t301 ^ 2 - t304 ^ 2;
t47 = qJD(1) * t146 + qJD(3) * t100;
t183 = t324 ^ 2 - t328 ^ 2;
t52 = qJD(1) * t100 + qJD(3) * t183;
t408 = t558 / 0.2e1 - t563 / 0.2e1;
t400 = t408 * t376;
t253 = t330 / 0.2e1 - t400;
t407 = pkin(3) * t493 - t253 * qJD(1);
t399 = t408 * t378;
t254 = -t332 / 0.2e1 + t399;
t406 = pkin(3) * t494 - t254 * qJD(1);
t405 = t41 * qJD(1) + t324 * t495;
t403 = t378 * t409;
t269 = -t315 * qJD(1) + t444;
t398 = t122 * t466 + t123 * t569;
t397 = t303 * t467 + t305 * t569;
t257 = t376 * qJD(1) * t509 + t315 * qJD(3);
t326 = t353 * t372;
t393 = t326 * qJD(1) + 0.2e1 * t422;
t392 = -t353 * qJD(3) + t454 * t588;
t384 = t114 * t576 + t430 * t578 + t600 * t577;
t2 = (t310 * t568 + t370 * t440 + t398) * pkin(4) + t384;
t25 = -t436 * t304 + t435 * t301 + (t441 + t397) * pkin(4);
t67 = t370 * t565;
t391 = -t2 * qJD(1) - t25 * qJD(2) + t67 * qJD(3);
t389 = t394 * t379;
t368 = t373 * t379;
t365 = -t473 / 0.2e1;
t364 = t473 / 0.2e1;
t363 = t472 / 0.2e1;
t357 = t376 * t472;
t323 = t358 - t471 / 0.2e1;
t309 = t328 * t472;
t298 = t358 + (-qJD(4) / 0.2e1 - qJD(5) / 0.2e1) * t377;
t246 = t305 * t324;
t222 = t303 / 0.2e1 + t389;
t221 = -t303 / 0.2e1 + t389;
t180 = t334 + t332 / 0.2e1 + t399;
t179 = t462 - t330 / 0.2e1 - t400;
t145 = t218 * qJD(3) - t449;
t144 = -t301 * t497 + t479;
t135 = -t428 - t191;
t134 = -t324 * t469 - t192;
t119 = -t479 + t587;
t113 = t217 * qJD(3);
t91 = t222 * qJD(3) + t449 - t594;
t90 = -t193 + (-qJD(5) + t425) * t301;
t63 = t221 * qJD(3) - t594;
t42 = t396 + t598;
t39 = t519 - t460 / 0.2e1 + t402;
t37 = t559 * t569 - t459 - t380 / 0.2e1 - t520 / 0.2e1;
t30 = t304 * t464 + t328 * t426 + t421 + (-t562 / 0.2e1 - t214 / 0.2e1) * t375 + t598;
t29 = -t301 * t465 + t324 * t426 + t377 * t424 + t43;
t26 = t397 * pkin(4) + t304 * t576 + t379 * t465 - t430 * t574;
t24 = qJD(3) * t44;
t5 = t301 * t596 - t430 * t575 + t390 + t600 * t573 + t599 * t572 + (t574 + t597) * t264;
t3 = pkin(4) * t398 + t310 * t464 + t370 * t426 - t384;
t1 = qJD(3) * t10 + qJD(4) * t11;
t6 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t443, t354 * qJD(3), 0, -t443, 0, 0, t361 * t472, t361 * t470, 0, 0, t373 * t443 - t423, -t326 * qJD(4) - 0.2e1 * t379 * t422, -t329 * qJD(3) + t377 * t452, t371 * t443 + t423, t327 * qJD(3) + t377 * t451, -t443, -qJD(3) * t120 - qJD(4) * t150, qJD(3) * t121 + qJD(4) * t149, -qJD(3) * t54, qJD(3) * t62, (qJD(3) * t305 - t587) * t304, qJD(3) * t130 + t146 * t469, -t172 * qJD(3) + t301 * t427, (qJD(3) * t303 + t594) * t301, -t171 * qJD(3) + t304 * t427, -t443, -qJD(3) * t22 - qJD(4) * t50 - qJD(5) * t61, qJD(3) * t23 + qJD(4) * t51 + qJD(5) * t60, qJD(3) * t15 + qJD(4) * t14, qJD(3) * t18 + qJD(4) * t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t358, t474, t470, -t358, -t472, 0, -t360 * t470 + t447, t360 * t472 + t446, 0, 0, -t477 + (t373 * t473 + t444) * t379, (t368 - t521) * qJD(3) + (-qJD(4) - t497) * t510 * t588, t357 - t475, t477 + (t371 * t473 - t444) * t379, t442 + t476, -t323, -t487 + (t376 * t420 - t461) * qJD(3) + t180 * qJD(4), t486 + (t378 * t420 + t463) * qJD(3) + t179 * qJD(4), qJD(3) * t415 - t506, (pkin(7) * t415 - t360 * t560) * qJD(3) + t416, (t496 + t498) * t305 + t601, t485 + (-t246 - t525) * qJD(3) + t556, t309 - t481 - t502, (qJD(3) * t324 + t499) * t303 - t601, t222 * t469 - t453 - t482, -t298, (t370 * t303 + t311 * t324 - t377 * t430) * qJD(3) + t29 * qJD(4) + t43 * qJD(5) - t413, t541 + (-t264 * t377 + t370 * t305 + t311 * t328) * qJD(3) + t30 * qJD(4) + t42 * qJD(5), t542 + (-t122 * t328 - t123 * t324 - t264 * t303 + t305 * t430) * qJD(3) + t5 * qJD(4), (-t122 * t430 + t123 * t264 + t311 * t370) * qJD(3) + t3 * qJD(4) + t418; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t257, -t393, t376 * t409, t257, t403, t363, t180 * qJD(3) - t248 * qJD(4) - t483, t179 * qJD(3) + t247 * qJD(4) + t484, 0, 0, t591, t47, t90, -t591, t91, t363, qJD(3) * t29 + qJD(4) * t114 + qJD(5) * t37 - t552, qJD(3) * t30 - qJD(4) * t115 + qJD(5) * t39 + t551, t543 + t5 * qJD(3) + (t301 * t566 - t304 * t375) * t555, t3 * qJD(3) + (t114 * t566 + t115 * t375) * t555 + t417; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t591, t47, t90, -t591, t91, t363, qJD(3) * t43 + qJD(4) * t37 - qJD(5) * t112 - t549, qJD(3) * t42 + qJD(4) * t39 + qJD(5) * t111 + t550, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t270 * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t118; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t472, -t470, 0, 0, 0, 0, 0, 0, 0, 0, -t442 - t452, t357 - t451, (t368 + t521) * qJD(3), (pkin(7) * t431 - t563) * qJD(3) - t412, 0, 0, 0, 0, 0, 0, t221 * t469 + t453, t309 - t501, (-t246 + t525) * qJD(3), (t305 * t264 + t303 * t430 + t377 * t370) * qJD(3) + t26 * qJD(4) + t414; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t376 * t470 - t378 * t471, t376 * t471 - t378 * t470, 0, 0, 0, 0, 0, 0, 0, 0, t63, t119, 0, t546 + t26 * qJD(3) + (-t301 * t375 - t304 * t566) * t555; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, t119, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t358, -t474, 0, t358, 0, 0, -t447, -t446, 0, 0, -t358 * t373 - t477, t403 * t588, -t451 + t475, -t358 * t371 + t477, t452 - t476, t323, t254 * qJD(4) + t487, t253 * qJD(4) - t486, t506, -t416, -t305 * t498 + t601, -t485 + t556, t481 - t501, -t303 * t499 - t601, -t218 * t469 + t482, t298, -qJD(4) * t28 - qJD(5) * t40 + t413, -qJD(4) * t27 - qJD(5) * t41 - t541, -qJD(4) * t4 - t542, -qJD(4) * t2 - t418; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t412, 0, 0, 0, 0, 0, 0, -t217 * t469, -t502, 0, -qJD(4) * t25 - t414; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t445, t353 * qJD(4), 0, -t445, 0, 0, -pkin(3) * t492, -pkin(3) * t491, 0, 0, -t586, t469 * t183, 0, t586, 0, 0, t212 * qJD(4) + t328 * t489, t213 * qJD(4) - t324 * t489, 0, qJD(4) * t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t269, -t392, -t425 * t378, -t269, t425 * t376, t365, -pkin(7) * t491 - t406, pkin(7) * t492 - t407, 0, 0, -t592, t52, t134, t592, t135, t365, -t583 - t589, -t410 + t590, (t324 * t566 - t328 * t375) * t555 - t419, (-t264 * t566 - t375 * t430) * t555 + t391; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t592, t52, t134, t592, t135, t365, -t584 - t589, -t405 + t590, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t257, t393, (-t376 * t473 + t493) * t379, -t257, (-t454 - t494) * t379, t363, -t254 * qJD(3) + t483, -t253 * qJD(3) - t484, 0, 0, -t591, -t47, t144, t591, t145, t363, qJD(3) * t28 + qJD(5) * t36 + t552, qJD(3) * t27 + qJD(5) * t38 - t551, qJD(3) * t4 - t543, qJD(3) * t2 - t417; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, t193, 0, qJD(3) * t25 - t546; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t269, t392, t378 * t497, t269, -t376 * t497, t364, t406, t407, 0, 0, t592, -t52, t192, -t592, t191, t364, t583, t478 + t410, t419, -t391; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(5) * t564, -pkin(4) * t433, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t469 * t564 + t524, t507 + (-t434 - t433) * pkin(4), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t591, -t47, t144, t591, t145, t363, qJD(3) * t40 - qJD(4) * t36 + t549, qJD(3) * t41 - qJD(4) * t38 - t550, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, t193, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t592, -t52, t192, -t592, t191, t364, t584, t478 + t405, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t375 * t555 - t524, pkin(4) * t434 - t507, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t6;
