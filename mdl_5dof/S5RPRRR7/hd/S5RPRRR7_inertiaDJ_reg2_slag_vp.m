% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S5RPRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
% 
% Output:
% MMD_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:04
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S5RPRRR7_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR7_inertiaDJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR7_inertiaDJ_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR7_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:04:09
% EndTime: 2019-12-31 19:04:16
% DurationCPUTime: 1.73s
% Computational Cost: add. (1861->203), mult. (4332->375), div. (0->0), fcn. (3634->8), ass. (0->119)
t67 = sin(qJ(3));
t145 = -0.4e1 * t67;
t135 = cos(qJ(5));
t101 = t135 * qJD(5);
t144 = t135 * qJD(4) + t101;
t66 = sin(qJ(4));
t62 = t66 ^ 2;
t68 = cos(qJ(4));
t64 = t68 ^ 2;
t100 = qJD(4) * (t62 - t64);
t63 = t67 ^ 2;
t69 = cos(qJ(3));
t125 = -t69 ^ 2 + t63;
t99 = t125 * qJD(3);
t143 = qJD(4) + qJD(5);
t122 = qJD(4) * t69;
t113 = t66 * t122;
t61 = t67 * qJD(3);
t36 = t68 * t61 + t113;
t57 = sin(pkin(9)) * pkin(1) + pkin(6);
t137 = t67 * pkin(7);
t136 = t69 * pkin(3);
t58 = -cos(pkin(9)) * pkin(1) - pkin(2);
t80 = t58 - t136;
t78 = t80 - t137;
t77 = t68 * t78;
t138 = pkin(7) * t69;
t140 = pkin(3) * t67;
t88 = -t138 + t140;
t82 = t88 * t66;
t11 = -qJD(3) * t82 - qJD(4) * t77 + t36 * t57;
t141 = -pkin(8) - pkin(7);
t142 = t141 * t67 + t80;
t139 = pkin(3) * t68;
t134 = sin(qJ(5));
t104 = qJD(3) * t134;
t90 = t69 * t104;
t105 = qJD(3) * t135;
t91 = t69 * t105;
t107 = t134 * t66;
t96 = t67 * t107;
t14 = t66 * t91 + (t144 * t67 + t90) * t68 - t143 * t96;
t44 = t134 * t68 + t135 * t66;
t31 = t44 * t67;
t133 = t31 * t14;
t24 = t143 * t44;
t13 = t24 * t67 + t66 * t90 - t68 * t91;
t108 = t135 * t68;
t32 = t67 * t108 - t96;
t132 = t32 * t13;
t131 = t57 * t66;
t130 = t66 * t67;
t129 = t68 * t69;
t43 = t107 - t108;
t128 = t13 * t43 - t32 * t24;
t45 = t57 * t129;
t22 = t66 * t78 + t45;
t124 = qJD(4) * t66;
t123 = qJD(4) * t68;
t121 = t69 * qJD(3);
t120 = -0.2e1 * pkin(3) * qJD(4);
t119 = t69 * t131;
t118 = 0.2e1 * qJD(3) * t58;
t117 = pkin(4) * t124;
t116 = t62 * t121;
t115 = t68 * t121;
t114 = qJD(4) * t57 * t63;
t112 = t68 * t122;
t111 = t66 * t123;
t110 = t67 * t121;
t109 = t57 * t121;
t106 = -pkin(4) - t131;
t103 = qJD(5) * t134;
t98 = t63 * t111;
t97 = t66 * t115;
t95 = pkin(4) * t101;
t94 = pkin(4) * t103;
t93 = t141 * t135;
t92 = t141 * t134;
t89 = -t136 - t137;
t23 = (t134 * qJD(4) + t103) * t66 - t144 * t68;
t87 = -t14 * t44 + t23 * t31;
t21 = t77 - t119;
t86 = -t21 * t68 - t22 * t66;
t85 = t21 * t66 - t22 * t68;
t84 = t66 * t93;
t83 = t66 * t92;
t81 = -t24 * t69 + t43 * t61;
t79 = t66 * t121 + t67 * t123;
t20 = -pkin(8) * t130 + t22;
t70 = (-t142 * t66 - t45) * qJD(4) + (t141 * t129 + (-t106 + t139) * t67) * qJD(3);
t75 = t106 * t69 + t142 * t68;
t73 = t135 * t75;
t74 = -t79 * pkin(8) - t11;
t1 = -qJD(5) * t73 + t20 * t103 - t134 * t70 - t135 * t74;
t51 = t141 * t68;
t27 = -t135 * t51 + t83;
t12 = -t22 * qJD(4) + (t57 * t130 + t68 * t88) * qJD(3);
t76 = t86 * qJD(4) - t11 * t68 - t12 * t66;
t72 = t134 * t75;
t71 = -t134 * t74 + t135 * t70;
t6 = t135 * t20 + t72;
t60 = -pkin(4) * t68 - pkin(3);
t55 = t64 * t121;
t53 = -0.2e1 * t110;
t49 = t64 * t110;
t47 = t62 * t110;
t38 = t66 * t61 - t112;
t35 = t67 * t124 - t115;
t34 = (pkin(4) * t66 + t57) * t67;
t28 = t67 * t100 - t97;
t26 = t134 * t51 + t84;
t25 = t79 * pkin(4) + t109;
t17 = t23 * t69 + t44 * t61;
t16 = -t27 * qJD(5) + (t68 * t93 - t83) * qJD(4);
t15 = -t51 * t103 - t92 * t123 - t143 * t84;
t5 = -t134 * t20 + t73;
t2 = -t6 * qJD(5) + t71;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t110, -0.2e1 * t99, 0, t53, 0, 0, t67 * t118, t69 * t118, 0, 0, 0.2e1 * t49 - 0.2e1 * t98, 0.2e1 * t63 * t100 + t97 * t145, 0.2e1 * t67 * t113 + 0.2e1 * t68 * t99, 0.2e1 * t47 + 0.2e1 * t98, 0.2e1 * t67 * t112 - 0.2e1 * t66 * t99, t53, 0.2e1 * t68 * t114 - 0.2e1 * t12 * t69 + 0.2e1 * (t21 + 0.2e1 * t119) * t61, -0.2e1 * t66 * t114 - 0.2e1 * t11 * t69 + 0.2e1 * (-t22 + 0.2e1 * t45) * t61, 0.2e1 * t86 * t121 + 0.2e1 * (t85 * qJD(4) + t11 * t66 - t12 * t68) * t67, 0.2e1 * t57 ^ 2 * t110 - 0.2e1 * t22 * t11 + 0.2e1 * t21 * t12, -0.2e1 * t132, 0.2e1 * t31 * t13 - 0.2e1 * t32 * t14, 0.2e1 * t13 * t69 + 0.2e1 * t32 * t61, 0.2e1 * t133, 0.2e1 * t14 * t69 - 0.2e1 * t31 * t61, t53, 0.2e1 * t34 * t14 - 0.2e1 * t2 * t69 + 0.2e1 * t25 * t31 + 0.2e1 * t5 * t61, -0.2e1 * t1 * t69 - 0.2e1 * t34 * t13 + 0.2e1 * t25 * t32 - 0.2e1 * t6 * t61, 0.2e1 * t1 * t31 + 0.2e1 * t13 * t5 - 0.2e1 * t14 * t6 - 0.2e1 * t2 * t32, -0.2e1 * t1 * t6 + 0.2e1 * t2 * t5 + 0.2e1 * t25 * t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76 * t67 + (t125 * t57 - t85 * t69) * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1 * t32 - t6 * t13 - t5 * t14 - t2 * t31 - t25 * t69 + t34 * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t47 + 0.2e1 * t49 - 0.2e1 * t110, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t110 - 0.2e1 * t132 + 0.2e1 * t133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t121, 0, -t61, 0, -t109, t57 * t61, 0, 0, -t28, t111 * t145 - t116 + t55, t38, t28, t36, 0, (pkin(7) * t129 + (t131 - t139) * t67) * qJD(4) + (t89 * t66 - t45) * qJD(3), (t57 * t67 * t68 + t82) * qJD(4) + (t89 * t68 + t119) * qJD(3), t76, -pkin(3) * t109 + t76 * pkin(7), -t13 * t44 - t23 * t32, t87 + t128, t17, t14 * t43 + t24 * t31, -t81, 0, t31 * t117 + t60 * t14 - t16 * t69 + t34 * t24 + t25 * t43 + t26 * t61, t32 * t117 - t60 * t13 - t15 * t69 - t34 * t23 + t25 * t44 - t27 * t61, t1 * t43 + t13 * t26 - t14 * t27 + t15 * t31 - t16 * t32 - t2 * t44 + t23 * t5 - t24 * t6, -t1 * t27 + t117 * t34 - t15 * t6 + t16 * t5 + t2 * t26 + t25 * t60; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t61, -t121, 0, 0, 0, 0, 0, 0, 0, 0, -t36, t38, t55 + t116, (-t140 + (t62 + t64) * t138) * qJD(3), 0, 0, 0, 0, 0, 0, t81, t17, -t87 + t128, -pkin(4) * t113 - t13 * t27 - t14 * t26 - t32 * t15 - t31 * t16 + t60 * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t111, -0.2e1 * t100, 0, -0.2e1 * t111, 0, 0, t66 * t120, t68 * t120, 0, 0, -0.2e1 * t44 * t23, 0.2e1 * t23 * t43 - 0.2e1 * t24 * t44, 0, 0.2e1 * t43 * t24, 0, 0, 0.2e1 * t43 * t117 + 0.2e1 * t24 * t60, 0.2e1 * t44 * t117 - 0.2e1 * t23 * t60, 0.2e1 * t15 * t43 - 0.2e1 * t16 * t44 + 0.2e1 * t23 * t26 - 0.2e1 * t24 * t27, 0.2e1 * t117 * t60 - 0.2e1 * t15 * t27 + 0.2e1 * t16 * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t35, 0, -t79, t61, t12, t11, 0, 0, 0, 0, -t13, 0, -t14, t61, pkin(4) * t67 * t105 - qJD(5) * t72 - t20 * t101 + t69 * t94 + t71, (t69 * t101 - t67 * t104) * pkin(4) + t1, (t135 * t13 - t134 * t14 + (t134 * t32 - t135 * t31) * qJD(5)) * pkin(4), (t135 * t2 - t134 * t1 + (-t134 * t5 + t135 * t6) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t79, t35, 0, 0, 0, 0, 0, 0, 0, 0, -t14, t13, 0, (-t135 * t14 - t134 * t13 + (t134 * t31 + t135 * t32) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t123, 0, -t124, 0, -pkin(7) * t123, pkin(7) * t124, 0, 0, 0, 0, -t23, 0, -t24, 0, t16, t15, (t135 * t23 - t134 * t24 + (t134 * t44 - t135 * t43) * qJD(5)) * pkin(4), (t135 * t16 - t134 * t15 + (-t134 * t26 + t135 * t27) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t94, -0.2e1 * t95, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t13, 0, -t14, t61, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t14, t13, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t23, 0, -t24, 0, t16, t15, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t94, -t95, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t3;
