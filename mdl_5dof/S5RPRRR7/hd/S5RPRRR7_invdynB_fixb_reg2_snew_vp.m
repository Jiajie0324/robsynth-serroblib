% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:04
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRRR7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR7_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR7_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR7_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR7_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:04:17
% EndTime: 2019-12-31 19:04:33
% DurationCPUTime: 13.04s
% Computational Cost: add. (51087->603), mult. (99652->917), div. (0->0), fcn. (66419->10), ass. (0->415)
t639 = sin(qJ(1));
t643 = cos(qJ(1));
t605 = t643 * g(1) + t639 * g(2);
t644 = qJD(1) ^ 2;
t589 = -t644 * pkin(1) - t605;
t632 = sin(pkin(9));
t633 = cos(pkin(9));
t604 = t639 * g(1) - t643 * g(2);
t648 = qJDD(1) * pkin(1) + t604;
t539 = t632 * t589 - t633 * t648;
t540 = t633 * t589 + t632 * t648;
t657 = t632 * t539 + t633 * t540;
t473 = t633 * t539 - t632 * t540;
t674 = t643 * t473;
t720 = -t639 * t657 + t674;
t684 = t639 * t473;
t418 = t643 * t657 + t684;
t595 = t632 * qJDD(1) + t633 * t644;
t673 = g(3) - qJDD(2);
t567 = -qJ(2) * t595 + t633 * t673;
t596 = t633 * qJDD(1) - t632 * t644;
t706 = -qJ(2) * t596 - t632 * t673;
t707 = t643 * t595 + t639 * t596;
t719 = -pkin(5) * t707 + t643 * t567 + t639 * t706;
t542 = -t639 * t595 + t643 * t596;
t718 = -pkin(5) * t542 - t639 * t567 + t643 * t706;
t637 = sin(qJ(4));
t641 = cos(qJ(4));
t638 = sin(qJ(3));
t671 = qJD(1) * t638;
t585 = -t641 * qJD(3) + t637 * t671;
t642 = cos(qJ(3));
t670 = t642 * qJD(1);
t615 = -qJD(4) + t670;
t569 = t585 * t615;
t667 = qJD(1) * qJD(3);
t659 = t642 * t667;
t666 = t638 * qJDD(1);
t592 = t659 + t666;
t660 = t585 * qJD(4) - t637 * qJDD(3) - t641 * t592;
t496 = t569 + t660;
t636 = sin(qJ(5));
t620 = t638 * t667;
t665 = t642 * qJDD(1);
t593 = -t620 + t665;
t582 = -qJDD(4) + t593;
t576 = -qJDD(5) + t582;
t587 = t637 * qJD(3) + t641 * t671;
t640 = cos(qJ(5));
t536 = t640 * t585 + t636 * t587;
t538 = -t636 * t585 + t640 * t587;
t699 = t538 * t536;
t645 = -t576 - t699;
t714 = t636 * t645;
t698 = t587 * t585;
t647 = -t582 - t698;
t713 = t637 * t647;
t711 = t640 * t645;
t710 = t641 * t647;
t607 = -qJD(5) + t615;
t512 = t536 * t607;
t655 = -t641 * qJDD(3) + t637 * t592;
t531 = -t587 * qJD(4) - t655;
t646 = t536 * qJD(5) - t636 * t531 + t640 * t660;
t708 = t512 - t646;
t495 = t660 - t569;
t658 = -t640 * t531 - t636 * t660;
t411 = (qJD(5) + t607) * t538 + t658;
t491 = (qJD(4) + t615) * t587 + t655;
t534 = t536 ^ 2;
t535 = t538 ^ 2;
t705 = t585 ^ 2;
t581 = t587 ^ 2;
t606 = t607 ^ 2;
t613 = t615 ^ 2;
t704 = qJD(3) ^ 2;
t703 = pkin(3) * t638;
t702 = pkin(3) * t642;
t697 = t607 * t636;
t696 = t607 * t640;
t695 = t615 * t637;
t694 = t615 * t641;
t628 = t638 ^ 2;
t693 = t628 * t644;
t520 = -t644 * pkin(2) + qJDD(1) * pkin(6) + t540;
t652 = -pkin(7) * t638 - t702;
t590 = t652 * qJD(1);
t619 = t642 * t673;
t475 = t619 - qJDD(3) * pkin(3) - t704 * pkin(7) + (qJD(1) * t590 + t520) * t638;
t558 = -t615 * pkin(4) - t587 * pkin(8);
t406 = -t531 * pkin(4) - t705 * pkin(8) + t587 * t558 + t475;
t692 = t636 * t406;
t458 = t576 - t699;
t691 = t636 * t458;
t519 = -qJDD(1) * pkin(2) - t644 * pkin(6) + t539;
t649 = -t593 + t620;
t650 = t592 + t659;
t464 = pkin(3) * t649 - pkin(7) * t650 + t519;
t502 = t642 * t520 - t638 * t673;
t476 = -t704 * pkin(3) + qJDD(3) * pkin(7) + t590 * t670 + t502;
t408 = -t641 * t464 + t637 * t476;
t374 = t647 * pkin(4) + t496 * pkin(8) - t408;
t409 = t637 * t464 + t641 * t476;
t377 = -t705 * pkin(4) + t531 * pkin(8) + t615 * t558 + t409;
t321 = -t640 * t374 + t636 * t377;
t322 = t636 * t374 + t640 * t377;
t287 = -t640 * t321 + t636 * t322;
t690 = t637 * t287;
t689 = t637 * t475;
t515 = t582 - t698;
t688 = t637 * t515;
t687 = t638 * t519;
t614 = t642 * t644 * t638;
t602 = qJDD(3) + t614;
t686 = t638 * t602;
t603 = qJDD(3) - t614;
t685 = t638 * t603;
t681 = t640 * t406;
t680 = t640 * t458;
t679 = t641 * t287;
t678 = t641 * t475;
t677 = t641 * t515;
t676 = t642 * t519;
t675 = t642 * t603;
t629 = t642 ^ 2;
t672 = t628 + t629;
t664 = t638 * t699;
t663 = t638 * t698;
t662 = t642 * t699;
t661 = t642 * t698;
t288 = t636 * t321 + t640 * t322;
t500 = t638 * t520 + t619;
t446 = t638 * t500 + t642 * t502;
t551 = -t639 * t604 - t643 * t605;
t654 = t632 * t614;
t653 = t633 * t614;
t599 = t643 * qJDD(1) - t639 * t644;
t651 = -pkin(5) * t599 - t639 * g(3);
t353 = -t641 * t408 + t637 * t409;
t354 = t637 * t408 + t641 * t409;
t445 = t642 * t500 - t638 * t502;
t550 = t643 * t604 - t639 * t605;
t626 = t629 * t644;
t612 = -t626 - t704;
t611 = t626 - t704;
t610 = -t693 - t704;
t609 = -t693 + t704;
t601 = t626 - t693;
t600 = t626 + t693;
t598 = t639 * qJDD(1) + t643 * t644;
t597 = t672 * qJDD(1);
t594 = -0.2e1 * t620 + t665;
t591 = 0.2e1 * t659 + t666;
t584 = t642 * t602;
t583 = t672 * t667;
t570 = -pkin(5) * t598 + t643 * g(3);
t564 = -t581 + t613;
t563 = -t613 + t705;
t562 = t642 * t592 - t628 * t667;
t561 = -t638 * t593 - t629 * t667;
t560 = t632 * qJDD(3) + t633 * t583;
t559 = -t633 * qJDD(3) + t632 * t583;
t557 = -t638 * t610 - t675;
t556 = -t638 * t609 + t584;
t555 = t642 * t612 - t686;
t554 = t642 * t611 - t685;
t553 = t642 * t610 - t685;
t552 = t638 * t612 + t584;
t549 = -t581 + t705;
t548 = -t581 - t613;
t547 = t633 * t597 - t632 * t600;
t546 = t632 * t597 + t633 * t600;
t541 = -t638 * t591 + t642 * t594;
t533 = -t613 - t705;
t529 = t633 * t562 - t654;
t528 = t633 * t561 + t654;
t527 = t632 * t562 + t653;
t526 = t632 * t561 - t653;
t525 = t633 * t556 + t632 * t666;
t524 = t633 * t554 + t632 * t665;
t523 = t632 * t556 - t633 * t666;
t522 = t632 * t554 - t633 * t665;
t514 = t581 + t705;
t510 = -t535 + t606;
t509 = t534 - t606;
t508 = t633 * t557 + t632 * t591;
t507 = t633 * t555 - t632 * t594;
t506 = t632 * t557 - t633 * t591;
t505 = t632 * t555 + t633 * t594;
t504 = (t585 * t641 - t587 * t637) * t615;
t503 = (-t585 * t637 - t587 * t641) * t615;
t501 = t633 * t541 - t632 * t601;
t499 = t632 * t541 + t633 * t601;
t498 = -t535 - t606;
t492 = (-qJD(4) + t615) * t587 - t655;
t490 = t587 * t695 - t641 * t660;
t489 = t587 * t694 + t637 * t660;
t488 = -t637 * t531 - t585 * t694;
t487 = -t641 * t531 + t585 * t695;
t486 = -t639 * t546 + t643 * t547;
t485 = t643 * t546 + t639 * t547;
t484 = t642 * t504 - t638 * t582;
t483 = -t535 + t534;
t482 = -pkin(6) * t553 + t676;
t481 = t641 * t563 + t688;
t480 = -t637 * t564 + t710;
t479 = -pkin(6) * t552 + t687;
t478 = -t637 * t563 + t677;
t477 = -t641 * t564 - t713;
t469 = -pkin(2) * t553 + t502;
t468 = -pkin(2) * t552 + t500;
t467 = -t637 * t548 + t677;
t466 = t641 * t548 + t688;
t465 = -t606 - t534;
t463 = pkin(1) * t673 + qJ(2) * t657;
t462 = t641 * t533 - t713;
t461 = t637 * t533 + t710;
t455 = (t536 * t640 - t538 * t636) * t607;
t454 = (t536 * t636 + t538 * t640) * t607;
t453 = t642 * t490 + t663;
t452 = t642 * t488 - t663;
t451 = -t639 * t506 + t643 * t508;
t450 = -t639 * t505 + t643 * t507;
t449 = t643 * t506 + t639 * t508;
t448 = t643 * t505 + t639 * t507;
t447 = -t534 - t535;
t442 = -t538 * qJD(5) - t658;
t441 = -t491 * t641 - t637 * t496;
t440 = t641 * t492 + t495 * t637;
t439 = -t491 * t637 + t641 * t496;
t438 = -t637 * t492 + t495 * t641;
t437 = t633 * t484 - t632 * t503;
t436 = t632 * t484 + t633 * t503;
t435 = t642 * t481 - t638 * t491;
t434 = t642 * t480 - t638 * t496;
t433 = t640 * t509 + t691;
t432 = -t636 * t510 + t711;
t431 = t636 * t509 - t680;
t430 = t640 * t510 + t714;
t429 = t642 * t467 - t638 * t495;
t428 = t638 * t467 + t642 * t495;
t427 = -t636 * t498 + t680;
t426 = t640 * t498 + t691;
t425 = -qJ(2) * t546 + t633 * t445;
t424 = qJ(2) * t547 + t632 * t445;
t423 = t642 * t462 - t638 * t492;
t422 = t638 * t462 + t642 * t492;
t421 = t633 * t446 + t632 * t519;
t420 = t632 * t446 - t633 * t519;
t419 = -pkin(7) * t466 + t678;
t416 = t642 * t440 - t638 * t549;
t415 = t512 + t646;
t410 = (qJD(5) - t607) * t538 + t658;
t407 = -pkin(7) * t461 + t689;
t405 = t538 * t697 - t640 * t646;
t404 = -t538 * t696 - t636 * t646;
t403 = -t636 * t442 - t536 * t696;
t402 = t640 * t442 - t536 * t697;
t401 = t640 * t465 - t714;
t400 = t636 * t465 + t711;
t399 = t633 * t453 - t632 * t489;
t398 = t633 * t452 - t632 * t487;
t397 = t632 * t453 + t633 * t489;
t396 = t632 * t452 + t633 * t487;
t395 = t642 * t441 - t638 * t514;
t394 = t638 * t441 + t642 * t514;
t393 = -t637 * t454 + t641 * t455;
t392 = -t641 * t454 - t637 * t455;
t391 = -qJ(2) * t506 - t632 * t469 + t633 * t482;
t390 = -qJ(2) * t505 - t632 * t468 + t633 * t479;
t389 = t633 * t435 - t632 * t478;
t388 = t633 * t434 - t632 * t477;
t387 = t632 * t435 + t633 * t478;
t386 = t632 * t434 + t633 * t477;
t385 = t642 * t393 - t638 * t576;
t384 = t633 * t429 + t632 * t466;
t383 = t632 * t429 - t633 * t466;
t382 = -pkin(1) * t553 + qJ(2) * t508 + t633 * t469 + t632 * t482;
t381 = -pkin(1) * t552 + qJ(2) * t507 + t633 * t468 + t632 * t479;
t380 = t633 * t423 + t632 * t461;
t379 = t632 * t423 - t633 * t461;
t378 = -pkin(3) * t466 + t409;
t376 = -pkin(3) * t461 + t408;
t371 = -t637 * t431 + t641 * t433;
t370 = -t637 * t430 + t641 * t432;
t369 = -t641 * t431 - t637 * t433;
t368 = -t641 * t430 - t637 * t432;
t367 = t633 * t416 - t632 * t438;
t366 = t632 * t416 + t633 * t438;
t365 = -t637 * t426 + t641 * t427;
t364 = t641 * t426 + t637 * t427;
t363 = t633 * t395 + t632 * t439;
t362 = t632 * t395 - t633 * t439;
t361 = -pkin(8) * t426 + t681;
t360 = -t639 * t420 + t643 * t421;
t359 = t643 * t420 + t639 * t421;
t358 = -t411 * t640 - t636 * t415;
t357 = -t640 * t410 - t636 * t708;
t356 = -t411 * t636 + t640 * t415;
t355 = -t636 * t410 + t640 * t708;
t352 = -pkin(8) * t400 + t692;
t351 = -t637 * t404 + t641 * t405;
t350 = -t637 * t402 + t641 * t403;
t349 = -t641 * t404 - t637 * t405;
t348 = -t641 * t402 - t637 * t403;
t347 = -t637 * t400 + t641 * t401;
t346 = t641 * t400 + t637 * t401;
t345 = -pkin(2) * t428 - pkin(3) * t495 - pkin(7) * t467 - t689;
t344 = -pkin(2) * t422 - pkin(3) * t492 - pkin(7) * t462 + t678;
t343 = -qJ(2) * t420 - (pkin(2) * t632 - pkin(6) * t633) * t445;
t342 = t642 * t354 + t638 * t475;
t341 = t638 * t354 - t642 * t475;
t340 = t633 * t385 - t632 * t392;
t339 = t632 * t385 + t633 * t392;
t338 = t642 * t351 + t664;
t337 = t642 * t350 - t664;
t336 = t642 * t371 - t638 * t411;
t335 = t642 * t370 - t638 * t415;
t334 = -pkin(7) * t439 - t353;
t333 = t642 * t365 + t638 * t708;
t332 = t638 * t365 - t642 * t708;
t331 = -t639 * t383 + t643 * t384;
t330 = t643 * t383 + t639 * t384;
t329 = -pkin(4) * t708 + pkin(8) * t427 + t692;
t328 = -t639 * t379 + t643 * t380;
t327 = t643 * t379 + t639 * t380;
t326 = qJ(2) * t421 - (-pkin(2) * t633 - pkin(6) * t632 - pkin(1)) * t445;
t325 = -pkin(4) * t410 + pkin(8) * t401 - t681;
t324 = t642 * t347 + t638 * t410;
t323 = t638 * t347 - t642 * t410;
t319 = -pkin(6) * t428 - t638 * t378 + t642 * t419;
t318 = -pkin(6) * t422 - t638 * t376 + t642 * t407;
t317 = -t639 * t362 + t643 * t363;
t316 = t643 * t362 + t639 * t363;
t315 = -t637 * t356 + t641 * t358;
t314 = -t637 * t355 + t641 * t357;
t313 = t641 * t356 + t637 * t358;
t312 = -t641 * t355 - t637 * t357;
t311 = -pkin(2) * t394 - pkin(3) * t514 - pkin(7) * t441 - t354;
t310 = t633 * t336 - t632 * t369;
t309 = t633 * t335 - t632 * t368;
t308 = t632 * t336 + t633 * t369;
t307 = t632 * t335 + t633 * t368;
t306 = t642 * t314 - t638 * t483;
t305 = t633 * t342 + t632 * t353;
t304 = t632 * t342 - t633 * t353;
t303 = -pkin(6) * t394 + t642 * t334 + t439 * t703;
t302 = t633 * t338 - t632 * t349;
t301 = t633 * t337 - t632 * t348;
t300 = t632 * t338 + t633 * t349;
t299 = t632 * t337 + t633 * t348;
t298 = t633 * t333 + t632 * t364;
t297 = t632 * t333 - t633 * t364;
t296 = t642 * t315 + t638 * t447;
t295 = t638 * t315 - t642 * t447;
t294 = -pkin(2) * t341 + pkin(3) * t475 - pkin(7) * t354;
t293 = t633 * t324 + t632 * t346;
t292 = t632 * t324 - t633 * t346;
t291 = -pkin(3) * t364 - pkin(4) * t426 + t322;
t290 = -pkin(3) * t313 - pkin(4) * t356;
t289 = -pkin(3) * t346 - pkin(4) * t400 + t321;
t286 = -pkin(6) * t341 + (-pkin(7) * t642 + t703) * t353;
t285 = -pkin(7) * t364 - t637 * t329 + t641 * t361;
t284 = -qJ(2) * t383 + t633 * t319 - t632 * t345;
t283 = -qJ(2) * t379 + t633 * t318 - t632 * t344;
t282 = -pkin(7) * t346 - t637 * t325 + t641 * t352;
t281 = -pkin(4) * t406 + pkin(8) * t288;
t280 = -pkin(1) * t428 + qJ(2) * t384 + t632 * t319 + t633 * t345;
t279 = -pkin(1) * t422 + qJ(2) * t380 + t632 * t318 + t633 * t344;
t278 = -pkin(8) * t356 - t287;
t277 = t633 * t306 - t632 * t312;
t276 = t632 * t306 + t633 * t312;
t275 = t633 * t296 + t632 * t313;
t274 = t632 * t296 - t633 * t313;
t273 = -pkin(4) * t447 + pkin(8) * t358 + t288;
t272 = -t639 * t304 + t643 * t305;
t271 = t643 * t304 + t639 * t305;
t270 = -t639 * t297 + t643 * t298;
t269 = t643 * t297 + t639 * t298;
t268 = -pkin(2) * t332 + pkin(3) * t708 - pkin(7) * t365 - t641 * t329 - t637 * t361;
t267 = -t639 * t292 + t643 * t293;
t266 = t643 * t292 + t639 * t293;
t265 = -qJ(2) * t362 + t633 * t303 - t632 * t311;
t264 = -pkin(2) * t323 + pkin(3) * t410 - pkin(7) * t347 - t641 * t325 - t637 * t352;
t263 = -pkin(1) * t394 + qJ(2) * t363 + t632 * t303 + t633 * t311;
t262 = t641 * t288 - t690;
t261 = t637 * t288 + t679;
t260 = t642 * t262 + t638 * t406;
t259 = t638 * t262 - t642 * t406;
t258 = -pkin(6) * t332 + t642 * t285 - t638 * t291;
t257 = -qJ(2) * t304 + t633 * t286 - t632 * t294;
t256 = -pkin(6) * t323 + t642 * t282 - t638 * t289;
t255 = -t639 * t274 + t643 * t275;
t254 = t643 * t274 + t639 * t275;
t253 = -pkin(1) * t341 + qJ(2) * t305 + t632 * t286 + t633 * t294;
t252 = -pkin(3) * t261 - pkin(4) * t287;
t251 = -pkin(7) * t313 - t637 * t273 + t641 * t278;
t250 = -pkin(7) * t261 - pkin(8) * t679 - t637 * t281;
t249 = t633 * t260 + t632 * t261;
t248 = t632 * t260 - t633 * t261;
t247 = -pkin(2) * t295 + pkin(3) * t447 - pkin(7) * t315 - t641 * t273 - t637 * t278;
t246 = -qJ(2) * t297 + t633 * t258 - t632 * t268;
t245 = -pkin(6) * t295 + t642 * t251 - t638 * t290;
t244 = -pkin(1) * t332 + qJ(2) * t298 + t632 * t258 + t633 * t268;
t243 = -qJ(2) * t292 + t633 * t256 - t632 * t264;
t242 = -pkin(1) * t323 + qJ(2) * t293 + t632 * t256 + t633 * t264;
t241 = -pkin(2) * t259 + pkin(3) * t406 - pkin(7) * t262 + pkin(8) * t690 - t641 * t281;
t240 = -t639 * t248 + t643 * t249;
t239 = t643 * t248 + t639 * t249;
t238 = -pkin(6) * t259 + t642 * t250 - t638 * t252;
t237 = -qJ(2) * t274 + t633 * t245 - t632 * t247;
t236 = -pkin(1) * t295 + qJ(2) * t275 + t632 * t245 + t633 * t247;
t235 = -qJ(2) * t248 + t633 * t238 - t632 * t241;
t234 = -pkin(1) * t259 + qJ(2) * t249 + t632 * t238 + t633 * t241;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t598, -t599, 0, t551, 0, 0, 0, 0, 0, 0, -t707, -t542, 0, t418, 0, 0, 0, 0, 0, 0, t450, t451, t486, t360, 0, 0, 0, 0, 0, 0, t328, t331, t317, t272, 0, 0, 0, 0, 0, 0, t267, t270, t255, t240; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t599, -t598, 0, t550, 0, 0, 0, 0, 0, 0, t542, -t707, 0, -t720, 0, 0, 0, 0, 0, 0, t448, t449, t485, t359, 0, 0, 0, 0, 0, 0, t327, t330, t316, t271, 0, 0, 0, 0, 0, 0, t266, t269, t254, t239; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t673, 0, 0, 0, 0, 0, 0, t552, t553, 0, -t445, 0, 0, 0, 0, 0, 0, t422, t428, t394, t341, 0, 0, 0, 0, 0, 0, t323, t332, t295, t259; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t599, 0, -t598, 0, t651, -t570, -t550, -pkin(5) * t550, 0, 0, t542, 0, -t707, 0, t718, -t719, t720, pkin(5) * t720 + qJ(2) * t674 - t639 * t463, -t639 * t527 + t643 * t529, -t639 * t499 + t643 * t501, -t639 * t523 + t643 * t525, -t639 * t526 + t643 * t528, -t639 * t522 + t643 * t524, -t639 * t559 + t643 * t560, -pkin(5) * t448 - t639 * t381 + t643 * t390, -pkin(5) * t449 - t639 * t382 + t643 * t391, -pkin(5) * t485 - t639 * t424 + t643 * t425, -pkin(5) * t359 - t639 * t326 + t643 * t343, -t639 * t397 + t643 * t399, -t639 * t366 + t643 * t367, -t639 * t386 + t643 * t388, -t639 * t396 + t643 * t398, -t639 * t387 + t643 * t389, -t639 * t436 + t643 * t437, -pkin(5) * t327 - t639 * t279 + t643 * t283, -pkin(5) * t330 - t639 * t280 + t643 * t284, -pkin(5) * t316 - t639 * t263 + t643 * t265, -pkin(5) * t271 - t639 * t253 + t643 * t257, -t639 * t300 + t643 * t302, -t639 * t276 + t643 * t277, -t639 * t307 + t643 * t309, -t639 * t299 + t643 * t301, -t639 * t308 + t643 * t310, -t639 * t339 + t643 * t340, -pkin(5) * t266 - t639 * t242 + t643 * t243, -pkin(5) * t269 - t639 * t244 + t643 * t246, -pkin(5) * t254 - t639 * t236 + t643 * t237, -pkin(5) * t239 - t639 * t234 + t643 * t235; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t598, 0, t599, 0, t570, t651, t551, pkin(5) * t551, 0, 0, t707, 0, t542, 0, t719, t718, t418, pkin(5) * t418 + qJ(2) * t684 + t643 * t463, t643 * t527 + t639 * t529, t643 * t499 + t639 * t501, t643 * t523 + t639 * t525, t643 * t526 + t639 * t528, t643 * t522 + t639 * t524, t643 * t559 + t639 * t560, pkin(5) * t450 + t643 * t381 + t639 * t390, pkin(5) * t451 + t643 * t382 + t639 * t391, pkin(5) * t486 + t643 * t424 + t639 * t425, pkin(5) * t360 + t643 * t326 + t639 * t343, t643 * t397 + t639 * t399, t643 * t366 + t639 * t367, t643 * t386 + t639 * t388, t643 * t396 + t639 * t398, t643 * t387 + t639 * t389, t643 * t436 + t639 * t437, pkin(5) * t328 + t643 * t279 + t639 * t283, pkin(5) * t331 + t643 * t280 + t639 * t284, pkin(5) * t317 + t643 * t263 + t639 * t265, pkin(5) * t272 + t643 * t253 + t639 * t257, t643 * t300 + t639 * t302, t643 * t276 + t639 * t277, t643 * t307 + t639 * t309, t643 * t299 + t639 * t301, t643 * t308 + t639 * t310, t643 * t339 + t639 * t340, pkin(5) * t267 + t643 * t242 + t639 * t243, pkin(5) * t270 + t643 * t244 + t639 * t246, pkin(5) * t255 + t643 * t236 + t639 * t237, pkin(5) * t240 + t643 * t234 + t639 * t235; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t604, t605, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t596 - t539, -pkin(1) * t595 - t540, 0, -pkin(1) * t473, t650 * t638, t642 * t591 + t638 * t594, t642 * t609 + t686, -t649 * t642, t638 * t611 + t675, 0, pkin(1) * t505 + pkin(2) * t594 + pkin(6) * t555 - t676, pkin(1) * t506 - pkin(2) * t591 + pkin(6) * t557 + t687, pkin(1) * t546 + pkin(2) * t600 + pkin(6) * t597 + t446, pkin(1) * t420 - pkin(2) * t519 + pkin(6) * t446, t638 * t490 - t661, t638 * t440 + t642 * t549, t638 * t480 + t642 * t496, t638 * t488 + t661, t638 * t481 + t642 * t491, t638 * t504 + t642 * t582, pkin(1) * t379 - pkin(2) * t461 + pkin(6) * t423 + t642 * t376 + t638 * t407, pkin(1) * t383 - pkin(2) * t466 + pkin(6) * t429 + t642 * t378 + t638 * t419, pkin(1) * t362 + pkin(6) * t395 + t638 * t334 + (-pkin(2) - t702) * t439, pkin(1) * t304 + pkin(6) * t342 + (-pkin(2) + t652) * t353, t638 * t351 - t662, t638 * t314 + t642 * t483, t638 * t370 + t642 * t415, t638 * t350 + t662, t638 * t371 + t642 * t411, t638 * t393 + t642 * t576, pkin(1) * t292 - pkin(2) * t346 + pkin(6) * t324 + t638 * t282 + t642 * t289, pkin(1) * t297 - pkin(2) * t364 + pkin(6) * t333 + t638 * t285 + t642 * t291, pkin(1) * t274 - pkin(2) * t313 + pkin(6) * t296 + t638 * t251 + t642 * t290, pkin(1) * t248 - pkin(2) * t261 + pkin(6) * t260 + t638 * t250 + t642 * t252;];
tauB_reg = t1;
