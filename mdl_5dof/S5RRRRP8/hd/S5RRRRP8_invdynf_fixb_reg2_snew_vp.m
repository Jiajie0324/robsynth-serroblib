% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRRP8
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:02
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRRP8_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP8_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP8_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP8_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP8_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRRP8_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:02:51
% EndTime: 2019-12-31 22:02:53
% DurationCPUTime: 2.56s
% Computational Cost: add. (13901->210), mult. (28207->271), div. (0->0), fcn. (19782->8), ass. (0->159)
t1445 = cos(qJ(2));
t1461 = t1445 * qJD(1);
t1428 = -qJD(3) + t1461;
t1423 = -qJD(4) + t1428;
t1475 = qJD(4) - t1423;
t1474 = qJD(2) ^ 2;
t1440 = sin(qJ(3));
t1444 = cos(qJ(3));
t1441 = sin(qJ(2));
t1465 = qJD(1) * t1441;
t1409 = -t1444 * qJD(2) + t1440 * t1465;
t1410 = t1440 * qJD(2) + t1444 * t1465;
t1439 = sin(qJ(4));
t1443 = cos(qJ(4));
t1392 = t1443 * t1409 + t1439 * t1410;
t1473 = t1392 ^ 2;
t1394 = -t1439 * t1409 + t1443 * t1410;
t1472 = t1394 ^ 2;
t1471 = t1409 ^ 2;
t1470 = t1410 ^ 2;
t1469 = t1423 ^ 2;
t1468 = t1428 ^ 2;
t1467 = -2 * qJD(5);
t1466 = t1445 * g(3);
t1464 = t1394 * t1392;
t1463 = t1409 * t1428;
t1462 = t1410 * t1409;
t1460 = qJD(3) + t1428;
t1459 = qJD(4) + t1423;
t1442 = sin(qJ(1));
t1446 = cos(qJ(1));
t1421 = t1442 * g(1) - t1446 * g(2);
t1447 = qJD(1) ^ 2;
t1406 = qJDD(1) * pkin(1) + t1447 * pkin(6) + t1421;
t1456 = qJD(2) * t1461;
t1457 = t1441 * qJDD(1);
t1413 = t1456 + t1457;
t1431 = qJD(2) * t1465;
t1433 = t1445 * qJDD(1);
t1414 = t1433 - 0.2e1 * t1431;
t1371 = (-t1413 - t1456) * pkin(7) - t1414 * pkin(2) - t1406;
t1422 = -t1446 * g(1) - t1442 * g(2);
t1407 = -t1447 * pkin(1) + qJDD(1) * pkin(6) + t1422;
t1401 = -t1441 * g(3) + t1445 * t1407;
t1411 = (-pkin(2) * t1445 - pkin(7) * t1441) * qJD(1);
t1381 = -t1474 * pkin(2) + qJDD(2) * pkin(7) + t1411 * t1461 + t1401;
t1359 = t1444 * t1371 - t1440 * t1381;
t1455 = t1433 - qJDD(3) - t1431;
t1386 = -t1455 - t1462;
t1451 = -t1440 * qJDD(2) - t1444 * t1413;
t1389 = -t1409 * qJD(3) - t1451;
t1338 = (-t1389 + t1463) * pkin(8) + t1386 * pkin(3) + t1359;
t1360 = t1440 * t1371 + t1444 * t1381;
t1402 = -t1428 * pkin(3) - t1410 * pkin(8);
t1453 = -t1444 * qJDD(2) + t1440 * t1413;
t1450 = -t1410 * qJD(3) - t1453;
t1340 = -t1471 * pkin(3) + t1450 * pkin(8) + t1428 * t1402 + t1360;
t1324 = t1439 * t1338 + t1443 * t1340;
t1435 = t1441 ^ 2;
t1436 = t1445 ^ 2;
t1458 = t1435 + t1436;
t1323 = t1443 * t1338 - t1439 * t1340;
t1454 = t1439 * t1389 - t1443 * t1450;
t1452 = -qJDD(4) + t1455;
t1449 = -t1394 * qJD(4) - t1454;
t1363 = -t1452 - t1464;
t1380 = t1466 - qJDD(2) * pkin(2) - t1474 * pkin(7) + (qJD(1) * t1411 + t1407) * t1441;
t1448 = -t1443 * t1389 - t1439 * t1450;
t1355 = -t1450 * pkin(3) - t1471 * pkin(8) + t1410 * t1402 + t1380;
t1348 = t1459 * t1392 + t1448;
t1427 = t1445 * t1447 * t1441;
t1426 = -t1436 * t1447 - t1474;
t1425 = -t1435 * t1447 - t1474;
t1420 = -qJDD(2) + t1427;
t1419 = qJDD(2) + t1427;
t1418 = t1458 * t1447;
t1417 = -t1442 * qJDD(1) - t1446 * t1447;
t1416 = t1446 * qJDD(1) - t1442 * t1447;
t1415 = t1458 * qJDD(1);
t1412 = 0.2e1 * t1456 + t1457;
t1400 = -t1441 * t1407 - t1466;
t1399 = t1445 * t1420 - t1441 * t1425;
t1398 = -t1441 * t1419 + t1445 * t1426;
t1397 = t1441 * t1420 + t1445 * t1425;
t1396 = t1445 * t1419 + t1441 * t1426;
t1395 = -t1468 - t1470;
t1391 = -t1468 - t1471;
t1385 = t1455 - t1462;
t1384 = -t1470 - t1471;
t1382 = -t1423 * pkin(4) - t1394 * qJ(5);
t1378 = -t1469 - t1472;
t1377 = -t1441 * t1400 + t1445 * t1401;
t1376 = t1445 * t1400 + t1441 * t1401;
t1375 = t1460 * t1409 + t1451;
t1374 = t1389 + t1463;
t1373 = -t1460 * t1410 - t1453;
t1372 = (qJD(3) - t1428) * t1410 + t1453;
t1368 = t1444 * t1385 - t1440 * t1395;
t1367 = t1440 * t1385 + t1444 * t1395;
t1366 = -t1469 - t1473;
t1365 = -t1440 * t1386 + t1444 * t1391;
t1364 = t1444 * t1386 + t1440 * t1391;
t1362 = t1452 - t1464;
t1361 = -t1472 - t1473;
t1357 = t1444 * t1373 - t1440 * t1375;
t1356 = t1440 * t1373 + t1444 * t1375;
t1354 = t1445 * t1368 + t1441 * t1374;
t1353 = t1441 * t1368 - t1445 * t1374;
t1352 = t1443 * t1362 - t1439 * t1378;
t1351 = t1439 * t1362 + t1443 * t1378;
t1350 = t1445 * t1365 + t1441 * t1372;
t1349 = t1441 * t1365 - t1445 * t1372;
t1347 = -t1475 * t1392 - t1448;
t1346 = -t1459 * t1394 - t1454;
t1345 = t1475 * t1394 + t1454;
t1344 = -t1439 * t1363 + t1443 * t1366;
t1343 = t1443 * t1363 + t1439 * t1366;
t1342 = t1445 * t1357 + t1441 * t1384;
t1341 = t1441 * t1357 - t1445 * t1384;
t1335 = -t1440 * t1359 + t1444 * t1360;
t1334 = t1444 * t1359 + t1440 * t1360;
t1333 = t1445 * t1335 + t1441 * t1380;
t1332 = t1441 * t1335 - t1445 * t1380;
t1331 = -t1440 * t1351 + t1444 * t1352;
t1330 = t1444 * t1351 + t1440 * t1352;
t1329 = t1443 * t1346 - t1439 * t1348;
t1328 = t1439 * t1346 + t1443 * t1348;
t1327 = -t1440 * t1343 + t1444 * t1344;
t1326 = t1444 * t1343 + t1440 * t1344;
t1325 = -t1449 * pkin(4) - t1473 * qJ(5) + t1394 * t1382 + qJDD(5) + t1355;
t1322 = t1445 * t1331 + t1441 * t1347;
t1321 = t1441 * t1331 - t1445 * t1347;
t1320 = t1445 * t1327 + t1441 * t1345;
t1319 = t1441 * t1327 - t1445 * t1345;
t1318 = -t1440 * t1328 + t1444 * t1329;
t1317 = t1444 * t1328 + t1440 * t1329;
t1316 = t1423 * t1382 + t1449 * qJ(5) + (-pkin(4) * t1392 + t1467) * t1392 + t1324;
t1315 = t1363 * pkin(4) + t1348 * qJ(5) + t1394 * t1467 + t1323;
t1314 = t1446 * t1322 + t1442 * t1330;
t1313 = t1442 * t1322 - t1446 * t1330;
t1312 = t1445 * t1318 + t1441 * t1361;
t1311 = t1441 * t1318 - t1445 * t1361;
t1310 = -t1439 * t1323 + t1443 * t1324;
t1309 = t1443 * t1323 + t1439 * t1324;
t1308 = t1446 * t1320 + t1442 * t1326;
t1307 = t1442 * t1320 - t1446 * t1326;
t1306 = -t1439 * t1315 + t1443 * t1316;
t1305 = t1443 * t1315 + t1439 * t1316;
t1304 = t1446 * t1312 + t1442 * t1317;
t1303 = t1442 * t1312 - t1446 * t1317;
t1302 = -t1440 * t1309 + t1444 * t1310;
t1301 = t1444 * t1309 + t1440 * t1310;
t1300 = t1445 * t1302 + t1441 * t1355;
t1299 = t1441 * t1302 - t1445 * t1355;
t1298 = -t1440 * t1305 + t1444 * t1306;
t1297 = t1444 * t1305 + t1440 * t1306;
t1296 = t1445 * t1298 + t1441 * t1325;
t1295 = t1441 * t1298 - t1445 * t1325;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1417, -t1416, 0, -t1442 * t1421 + t1446 * t1422, 0, 0, 0, 0, 0, 0, t1446 * t1398 - t1442 * t1414, t1446 * t1399 + t1442 * t1412, t1446 * t1415 - t1442 * t1418, t1446 * t1377 - t1442 * t1406, 0, 0, 0, 0, 0, 0, t1446 * t1350 + t1442 * t1364, t1446 * t1354 + t1442 * t1367, t1446 * t1342 + t1442 * t1356, t1446 * t1333 + t1442 * t1334, 0, 0, 0, 0, 0, 0, t1308, t1314, t1304, t1446 * t1300 + t1442 * t1301, 0, 0, 0, 0, 0, 0, t1308, t1314, t1304, t1446 * t1296 + t1442 * t1297; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1416, t1417, 0, t1446 * t1421 + t1442 * t1422, 0, 0, 0, 0, 0, 0, t1442 * t1398 + t1446 * t1414, t1442 * t1399 - t1446 * t1412, t1442 * t1415 + t1446 * t1418, t1442 * t1377 + t1446 * t1406, 0, 0, 0, 0, 0, 0, t1442 * t1350 - t1446 * t1364, t1442 * t1354 - t1446 * t1367, t1442 * t1342 - t1446 * t1356, t1442 * t1333 - t1446 * t1334, 0, 0, 0, 0, 0, 0, t1307, t1313, t1303, t1442 * t1300 - t1446 * t1301, 0, 0, 0, 0, 0, 0, t1307, t1313, t1303, t1442 * t1296 - t1446 * t1297; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1396, t1397, 0, t1376, 0, 0, 0, 0, 0, 0, t1349, t1353, t1341, t1332, 0, 0, 0, 0, 0, 0, t1319, t1321, t1311, t1299, 0, 0, 0, 0, 0, 0, t1319, t1321, t1311, t1295; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1447, -qJDD(1), 0, t1422, 0, 0, 0, 0, 0, 0, t1398, t1399, t1415, t1377, 0, 0, 0, 0, 0, 0, t1350, t1354, t1342, t1333, 0, 0, 0, 0, 0, 0, t1320, t1322, t1312, t1300, 0, 0, 0, 0, 0, 0, t1320, t1322, t1312, t1296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1447, 0, t1421, 0, 0, 0, 0, 0, 0, t1414, -t1412, t1418, t1406, 0, 0, 0, 0, 0, 0, -t1364, -t1367, -t1356, -t1334, 0, 0, 0, 0, 0, 0, -t1326, -t1330, -t1317, -t1301, 0, 0, 0, 0, 0, 0, -t1326, -t1330, -t1317, -t1297; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1396, t1397, 0, t1376, 0, 0, 0, 0, 0, 0, t1349, t1353, t1341, t1332, 0, 0, 0, 0, 0, 0, t1319, t1321, t1311, t1299, 0, 0, 0, 0, 0, 0, t1319, t1321, t1311, t1295; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1426, t1420, t1433, t1401, 0, 0, 0, 0, 0, 0, t1365, t1368, t1357, t1335, 0, 0, 0, 0, 0, 0, t1327, t1331, t1318, t1302, 0, 0, 0, 0, 0, 0, t1327, t1331, t1318, t1298; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1419, t1425, -t1457, t1400, 0, 0, 0, 0, 0, 0, -t1372, -t1374, -t1384, -t1380, 0, 0, 0, 0, 0, 0, -t1345, -t1347, -t1361, -t1355, 0, 0, 0, 0, 0, 0, -t1345, -t1347, -t1361, -t1325; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1414, t1412, -t1418, -t1406, 0, 0, 0, 0, 0, 0, t1364, t1367, t1356, t1334, 0, 0, 0, 0, 0, 0, t1326, t1330, t1317, t1301, 0, 0, 0, 0, 0, 0, t1326, t1330, t1317, t1297; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1391, t1385, t1373, t1360, 0, 0, 0, 0, 0, 0, t1344, t1352, t1329, t1310, 0, 0, 0, 0, 0, 0, t1344, t1352, t1329, t1306; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1386, t1395, t1375, t1359, 0, 0, 0, 0, 0, 0, t1343, t1351, t1328, t1309, 0, 0, 0, 0, 0, 0, t1343, t1351, t1328, t1305; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1372, t1374, t1384, t1380, 0, 0, 0, 0, 0, 0, t1345, t1347, t1361, t1355, 0, 0, 0, 0, 0, 0, t1345, t1347, t1361, t1325; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1366, t1362, t1346, t1324, 0, 0, 0, 0, 0, 0, t1366, t1362, t1346, t1316; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1363, t1378, t1348, t1323, 0, 0, 0, 0, 0, 0, t1363, t1378, t1348, t1315; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1345, t1347, t1361, t1355, 0, 0, 0, 0, 0, 0, t1345, t1347, t1361, t1325; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1366, t1362, t1346, t1316; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1363, t1378, t1348, t1315; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1345, t1347, t1361, t1325;];
f_new_reg = t1;
