% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRRRP8
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:02
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRRRP8_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP8_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP8_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP8_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP8_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRRP8_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:02:36
% EndTime: 2019-12-31 22:02:51
% DurationCPUTime: 15.34s
% Computational Cost: add. (82533->638), mult. (167192->791), div. (0->0), fcn. (117002->8), ass. (0->434)
t1164 = sin(qJ(3));
t1168 = cos(qJ(3));
t1165 = sin(qJ(2));
t1248 = qJD(1) * t1165;
t1127 = -qJD(2) * t1168 + t1164 * t1248;
t1128 = qJD(2) * t1164 + t1168 * t1248;
t1163 = sin(qJ(4));
t1167 = cos(qJ(4));
t1086 = t1127 * t1167 + t1128 * t1163;
t1088 = -t1127 * t1163 + t1128 * t1167;
t1034 = t1088 * t1086;
t1155 = qJD(2) * t1248;
t1169 = cos(qJ(2));
t1219 = t1169 * qJDD(1);
t1132 = -t1155 + t1219;
t1124 = -qJDD(3) + t1132;
t1121 = -qJDD(4) + t1124;
t1291 = t1034 + t1121;
t1294 = t1291 * pkin(4);
t1226 = t1169 * qJD(1);
t1211 = qJD(2) * t1226;
t1221 = t1165 * qJDD(1);
t1193 = t1211 + t1221;
t1175 = -t1164 * qJDD(2) - t1168 * t1193;
t1080 = -t1127 * qJD(3) - t1175;
t1176 = t1168 * qJDD(2) - t1164 * t1193;
t1174 = t1128 * qJD(3) - t1176;
t1003 = -qJD(4) * t1086 + t1080 * t1167 - t1163 * t1174;
t1152 = -qJD(3) + t1226;
t1144 = -qJD(4) + t1152;
t1069 = t1086 * t1144;
t1166 = sin(qJ(1));
t1170 = cos(qJ(1));
t1141 = t1166 * g(1) - g(2) * t1170;
t1171 = qJD(1) ^ 2;
t1119 = qJDD(1) * pkin(1) + t1171 * pkin(6) + t1141;
t1131 = 0.2e1 * t1211 + t1221;
t1197 = -t1132 + t1155;
t1043 = pkin(2) * t1197 - pkin(7) * t1131 - t1119;
t1142 = g(1) * t1170 + g(2) * t1166;
t1120 = -pkin(1) * t1171 + qJDD(1) * pkin(6) - t1142;
t1105 = -g(3) * t1165 + t1120 * t1169;
t1264 = pkin(2) * t1169;
t1199 = -pkin(7) * t1165 - t1264;
t1130 = t1199 * qJD(1);
t1285 = qJD(2) ^ 2;
t1062 = -pkin(2) * t1285 + qJDD(2) * pkin(7) + t1130 * t1226 + t1105;
t1005 = -t1043 * t1168 + t1164 * t1062;
t1111 = t1127 * t1152;
t1048 = -t1111 + t1080;
t1244 = t1128 * t1127;
t1182 = -t1124 - t1244;
t1173 = pkin(3) * t1182 - pkin(8) * t1048 - t1005;
t1006 = t1043 * t1164 + t1062 * t1168;
t1106 = -pkin(3) * t1152 - pkin(8) * t1128;
t1284 = t1127 ^ 2;
t952 = -pkin(3) * t1284 - pkin(8) * t1174 + t1106 * t1152 + t1006;
t905 = t1163 * t952 - t1167 * t1173;
t1179 = -qJ(5) * t1069 + 0.2e1 * qJD(5) * t1088 + t1294 + t905;
t875 = qJ(5) * t1003 + t1179;
t1177 = -t875 - t1294;
t1084 = t1086 ^ 2;
t1143 = t1144 ^ 2;
t1022 = -t1143 - t1084;
t1229 = t1167 * t1291;
t960 = t1022 * t1163 - t1229;
t959 = pkin(3) * t960;
t1293 = t1177 + t959;
t1085 = t1088 ^ 2;
t1055 = -t1085 - t1143;
t1206 = t1163 * t1080 + t1167 * t1174;
t1002 = -qJD(4) * t1088 - t1206;
t1065 = -pkin(4) * t1144 - qJ(5) * t1088;
t906 = t1163 * t1173 + t1167 * t952;
t876 = -pkin(4) * t1084 + qJ(5) * t1002 - 0.2e1 * qJD(5) * t1086 + t1065 * t1144 + t906;
t1185 = pkin(4) * t1055 - t876;
t1016 = -t1034 + t1121;
t1237 = t1163 * t1016;
t981 = t1055 * t1167 + t1237;
t980 = pkin(3) * t981;
t1292 = t980 + t1185;
t1263 = t1169 * g(3);
t1061 = (qJD(1) * t1130 + t1120) * t1165 - qJDD(2) * pkin(2) - t1285 * pkin(7) + t1263;
t985 = pkin(3) * t1174 - pkin(8) * t1284 + t1128 * t1106 + t1061;
t1236 = t1163 * t1291;
t913 = -pkin(4) * t1002 - qJ(5) * t1084 + t1088 * t1065 + qJDD(5) + t985;
t1290 = t1164 * t1182;
t1289 = t1168 * t1182;
t1287 = t1069 + t1003;
t970 = (qJD(4) + t1144) * t1088 + t1206;
t1123 = t1128 ^ 2;
t1150 = t1152 ^ 2;
t1008 = -t1084 - t1085;
t973 = -t1069 + t1003;
t928 = -t1163 * t970 - t1167 * t973;
t930 = t1163 * t973 - t1167 * t970;
t882 = -t1164 * t928 + t1168 * t930;
t859 = -t1008 * t1169 + t1165 * t882;
t1283 = pkin(1) * t859;
t961 = t1022 * t1167 + t1236;
t918 = -t1164 * t960 + t1168 * t961;
t969 = (qJD(4) - t1144) * t1088 + t1206;
t890 = t1165 * t918 - t1169 * t969;
t1282 = pkin(1) * t890;
t1230 = t1167 * t1016;
t982 = -t1055 * t1163 + t1230;
t935 = -t1164 * t981 + t1168 * t982;
t896 = t1165 * t935 - t1169 * t1287;
t1281 = pkin(1) * t896;
t917 = t1164 * t961 + t1168 * t960;
t1280 = pkin(2) * t917;
t934 = t1164 * t982 + t1168 * t981;
t1279 = pkin(2) * t934;
t854 = t1163 * t906 - t1167 * t905;
t1278 = pkin(3) * t854;
t860 = t1008 * t1165 + t1169 * t882;
t880 = t1164 * t930 + t1168 * t928;
t1277 = pkin(5) * (t1166 * t860 - t1170 * t880);
t891 = t1165 * t969 + t1169 * t918;
t1276 = pkin(5) * (t1166 * t891 - t1170 * t917);
t897 = t1165 * t1287 + t1169 * t935;
t1275 = pkin(5) * (t1166 * t897 - t1170 * t934);
t1274 = pkin(6) * t859;
t1273 = pkin(6) * t890;
t1272 = pkin(6) * t896;
t1271 = pkin(7) * t880;
t1270 = pkin(7) * t917;
t1269 = pkin(7) * t934;
t1268 = pkin(8) * t928;
t1267 = pkin(8) * t960;
t1266 = pkin(8) * t981;
t1265 = pkin(2) * t1165;
t1262 = -pkin(1) * t880 + pkin(6) * t860;
t1261 = -pkin(1) * t917 + pkin(6) * t891;
t1260 = -pkin(1) * t934 + pkin(6) * t897;
t1259 = -pkin(2) * t969 + pkin(7) * t918;
t1258 = -pkin(2) * t1287 + pkin(7) * t935;
t1256 = t1163 * t875;
t1255 = t1163 * t985;
t1254 = t1164 * t854;
t1253 = t1167 * t875;
t1252 = t1167 * t985;
t1251 = t1168 * t854;
t1250 = -pkin(2) * t1008 + pkin(7) * t882;
t1249 = qJD(1) * qJD(2);
t1243 = t1144 * t1088;
t1242 = t1144 * t1163;
t1241 = t1144 * t1167;
t1240 = t1152 * t1164;
t1239 = t1152 * t1168;
t1159 = t1165 ^ 2;
t1238 = t1159 * t1171;
t1235 = t1164 * t1061;
t1072 = t1124 - t1244;
t1234 = t1164 * t1072;
t1233 = t1165 * t1119;
t1095 = t1165 * t1131;
t1151 = t1169 * t1171 * t1165;
t1139 = -t1151 + qJDD(2);
t1232 = t1165 * t1139;
t1140 = qJDD(2) + t1151;
t1231 = t1165 * t1140;
t1228 = t1168 * t1061;
t1227 = t1168 * t1072;
t1225 = t1169 * t1119;
t1224 = t1169 * t1139;
t1160 = t1169 ^ 2;
t1222 = t1159 + t1160;
t1220 = t1166 * qJDD(1);
t1218 = t1170 * qJDD(1);
t1217 = t980 - t906;
t926 = pkin(3) * t928;
t845 = -pkin(2) * t880 - t926;
t832 = t1163 * t876 - t1253;
t874 = pkin(4) * t875;
t1216 = pkin(3) * t832 - t874;
t1215 = -pkin(3) * t969 + pkin(8) * t961;
t1214 = -pkin(3) * t1287 + pkin(8) * t982;
t1213 = t1165 * t1034;
t1212 = t1165 * t1244;
t1210 = t1169 * t1034;
t1209 = t1169 * t1244;
t1208 = -pkin(3) * t1008 + pkin(8) * t930;
t855 = t1163 * t905 + t1167 * t906;
t945 = t1005 * t1164 + t1006 * t1168;
t1104 = t1120 * t1165 + t1263;
t1052 = t1104 * t1165 + t1105 * t1169;
t1205 = -t1141 * t1166 - t1142 * t1170;
t1204 = t1166 * t1151;
t1203 = t1170 * t1151;
t1202 = -pkin(2) * t1061 + pkin(7) * t945;
t1200 = t905 - t959;
t1136 = -t1166 * t1171 + t1218;
t1198 = -pkin(5) * t1136 - g(3) * t1166;
t944 = -t1005 * t1168 + t1006 * t1164;
t1051 = t1104 * t1169 - t1105 * t1165;
t1194 = t1141 * t1170 - t1142 * t1166;
t884 = -pkin(4) * t969 + qJ(5) * t1022 - t913;
t842 = qJ(5) * t1236 + t1167 * t884 + t1215;
t849 = qJ(5) * t1229 - t1163 * t884 - t1267;
t1191 = t1164 * t849 + t1168 * t842 + t1259;
t903 = -qJ(5) * t1055 + t913;
t943 = -pkin(4) * t1287 + qJ(5) * t1016;
t844 = t1163 * t903 + t1167 * t943 + t1214;
t856 = -t1163 * t943 + t1167 * t903 - t1266;
t1190 = t1164 * t856 + t1168 * t844 + t1258;
t893 = t1215 - t1252;
t931 = t1255 - t1267;
t1189 = t1164 * t931 + t1168 * t893 + t1259;
t898 = t1214 + t1255;
t936 = t1252 - t1266;
t1188 = t1164 * t936 + t1168 * t898 + t1258;
t848 = -pkin(4) * t1008 - qJ(5) * t970 + t876;
t852 = (t1003 + t973) * qJ(5) + t1179;
t819 = t1163 * t852 + t1167 * t848 + t1208;
t820 = -t1163 * t848 + t1167 * t852 - t1268;
t1187 = t1164 * t820 + t1168 * t819 + t1250;
t835 = t1208 + t855;
t836 = -t854 - t1268;
t1186 = t1164 * t836 + t1168 * t835 + t1250;
t1082 = -t1150 - t1284;
t1020 = t1082 * t1168 - t1290;
t1112 = t1152 * t1128;
t1045 = t1112 - t1174;
t1184 = pkin(2) * t1045 + pkin(7) * t1020 - t1228;
t1091 = -t1123 - t1150;
t1024 = -t1091 * t1164 + t1227;
t1049 = (qJD(3) - t1152) * t1127 + t1175;
t1183 = pkin(2) * t1049 + pkin(7) * t1024 + t1235;
t1071 = t1123 + t1284;
t1046 = (-qJD(3) - t1152) * t1128 + t1176;
t999 = t1046 * t1168 + t1048 * t1164;
t1181 = pkin(2) * t1071 + pkin(7) * t999 + t945;
t833 = t1167 * t876 + t1256;
t840 = -pkin(4) * t913 + qJ(5) * t876;
t804 = -pkin(3) * t913 + pkin(8) * t833 + qJ(5) * t1256 + t1167 * t840;
t807 = -pkin(8) * t832 + qJ(5) * t1253 - t1163 * t840;
t812 = -t1164 * t832 + t1168 * t833;
t1180 = -pkin(2) * t913 + pkin(7) * t812 + t1164 * t807 + t1168 * t804;
t826 = t1168 * t855 - t1254;
t846 = -pkin(3) * t985 + pkin(8) * t855;
t1178 = -pkin(2) * t985 + pkin(7) * t826 - pkin(8) * t1254 + t1168 * t846;
t1157 = t1160 * t1171;
t1149 = -t1157 - t1285;
t1148 = t1157 - t1285;
t1147 = -t1238 - t1285;
t1146 = -t1238 + t1285;
t1138 = -t1157 + t1238;
t1137 = t1157 + t1238;
t1135 = t1170 * t1171 + t1220;
t1134 = t1222 * qJDD(1);
t1133 = -0.2e1 * t1155 + t1219;
t1126 = t1169 * t1140;
t1125 = t1222 * t1249;
t1114 = -pkin(5) * t1135 + g(3) * t1170;
t1110 = -t1123 + t1150;
t1109 = -t1150 + t1284;
t1108 = -t1159 * t1249 + t1169 * t1193;
t1107 = -t1132 * t1165 - t1160 * t1249;
t1103 = -t1147 * t1165 - t1224;
t1102 = -t1146 * t1165 + t1126;
t1101 = t1149 * t1169 - t1231;
t1100 = t1148 * t1169 - t1232;
t1099 = t1147 * t1169 - t1232;
t1098 = t1146 * t1169 + t1231;
t1097 = t1149 * t1165 + t1126;
t1096 = t1148 * t1165 + t1224;
t1094 = t1197 * t1169;
t1092 = t1123 - t1284;
t1090 = t1133 * t1169 - t1095;
t1089 = t1131 * t1169 + t1133 * t1165;
t1067 = -t1085 + t1143;
t1066 = t1084 - t1143;
t1064 = -pkin(6) * t1099 - t1225;
t1063 = -pkin(6) * t1097 - t1233;
t1060 = (t1127 * t1168 - t1128 * t1164) * t1152;
t1059 = (t1127 * t1164 + t1128 * t1168) * t1152;
t1057 = -pkin(1) * t1099 + t1105;
t1056 = -pkin(1) * t1097 + t1104;
t1047 = t1111 + t1080;
t1044 = t1112 + t1174;
t1042 = pkin(1) * t1133 + pkin(6) * t1101 + t1225;
t1041 = -pkin(1) * t1131 + pkin(6) * t1103 - t1233;
t1038 = t1080 * t1168 + t1128 * t1240;
t1037 = t1080 * t1164 - t1128 * t1239;
t1036 = -t1127 * t1239 + t1164 * t1174;
t1035 = t1127 * t1240 + t1168 * t1174;
t1033 = t1060 * t1169 - t1124 * t1165;
t1032 = t1060 * t1165 + t1124 * t1169;
t1030 = t1085 - t1084;
t1029 = t1109 * t1168 + t1234;
t1028 = -t1110 * t1164 + t1289;
t1027 = t1109 * t1164 - t1227;
t1026 = t1110 * t1168 + t1290;
t1025 = pkin(1) * t1119 + pkin(6) * t1052;
t1023 = t1091 * t1168 + t1234;
t1021 = pkin(1) * t1137 + pkin(6) * t1134 + t1052;
t1019 = t1082 * t1164 + t1289;
t1014 = (t1086 * t1167 - t1088 * t1163) * t1144;
t1013 = (t1086 * t1163 + t1088 * t1167) * t1144;
t1012 = t1038 * t1169 + t1212;
t1011 = t1036 * t1169 - t1212;
t1010 = t1038 * t1165 - t1209;
t1009 = t1036 * t1165 + t1209;
t998 = t1045 * t1168 - t1047 * t1164;
t997 = t1046 * t1164 - t1048 * t1168;
t996 = t1045 * t1164 + t1047 * t1168;
t995 = -pkin(7) * t1023 + t1228;
t994 = t1029 * t1169 - t1044 * t1165;
t993 = t1028 * t1169 + t1048 * t1165;
t992 = t1029 * t1165 + t1044 * t1169;
t991 = t1028 * t1165 - t1048 * t1169;
t990 = t1066 * t1167 + t1237;
t989 = -t1067 * t1163 - t1229;
t988 = t1066 * t1163 - t1230;
t987 = t1067 * t1167 - t1236;
t986 = -pkin(7) * t1019 + t1235;
t984 = t1024 * t1169 - t1049 * t1165;
t983 = t1024 * t1165 + t1049 * t1169;
t978 = t1020 * t1169 - t1045 * t1165;
t977 = t1020 * t1165 + t1045 * t1169;
t976 = t1092 * t1165 + t1169 * t998;
t975 = -t1092 * t1169 + t1165 * t998;
t966 = pkin(4) * t973;
t965 = t1003 * t1167 + t1088 * t1242;
t964 = t1003 * t1163 - t1088 * t1241;
t963 = -t1002 * t1163 - t1086 * t1241;
t962 = t1002 * t1167 - t1086 * t1242;
t957 = -t1071 * t1165 + t1169 * t999;
t956 = t1071 * t1169 + t1165 * t999;
t955 = -pkin(2) * t1023 + t1006;
t954 = -t1013 * t1164 + t1014 * t1168;
t953 = t1013 * t1168 + t1014 * t1164;
t951 = -pkin(2) * t1019 + t1005;
t949 = -t1121 * t1165 + t1169 * t954;
t948 = t1121 * t1169 + t1165 * t954;
t942 = -t1164 * t988 + t1168 * t990;
t941 = -t1164 * t987 + t1168 * t989;
t940 = t1164 * t990 + t1168 * t988;
t939 = t1164 * t989 + t1168 * t987;
t938 = t1061 * t1165 + t1169 * t945;
t937 = -t1061 * t1169 + t1165 * t945;
t929 = -t1163 * t1287 - t1167 * t969;
t927 = -t1163 * t969 + t1167 * t1287;
t924 = -pkin(1) * t983 - t1183;
t923 = -t1164 * t964 + t1168 * t965;
t922 = -t1164 * t962 + t1168 * t963;
t921 = t1164 * t965 + t1168 * t964;
t920 = t1164 * t963 + t1168 * t962;
t919 = -pkin(1) * t977 - t1184;
t914 = -pkin(7) * t997 - t944;
t912 = t1166 * t953 + t1170 * t949;
t911 = t1166 * t949 - t1170 * t953;
t910 = t1169 * t923 + t1213;
t909 = t1169 * t922 - t1213;
t908 = t1165 * t923 - t1210;
t907 = t1165 * t922 + t1210;
t902 = -t1165 * t970 + t1169 * t942;
t901 = t1165 * t973 + t1169 * t941;
t900 = t1165 * t942 + t1169 * t970;
t899 = t1165 * t941 - t1169 * t973;
t894 = -pkin(6) * t983 - t1165 * t955 + t1169 * t995;
t892 = -pkin(6) * t977 - t1165 * t951 + t1169 * t986;
t888 = -pkin(1) * t1023 + pkin(6) * t984 + t1165 * t995 + t1169 * t955;
t887 = -pkin(1) * t956 - t1181;
t886 = -pkin(1) * t937 - t1202;
t885 = -pkin(1) * t1019 + pkin(6) * t978 + t1165 * t986 + t1169 * t951;
t883 = -pkin(6) * t956 + t1169 * t914 + t1265 * t997;
t881 = -t1164 * t927 + t1168 * t929;
t879 = t1164 * t929 + t1168 * t927;
t873 = t1166 * t940 + t1170 * t902;
t872 = t1166 * t939 + t1170 * t901;
t871 = t1166 * t902 - t1170 * t940;
t870 = t1166 * t901 - t1170 * t939;
t869 = t1030 * t1165 + t1169 * t881;
t868 = -t1030 * t1169 + t1165 * t881;
t867 = -pkin(6) * t937 + (-pkin(7) * t1169 + t1265) * t944;
t866 = t1166 * t921 + t1170 * t910;
t865 = t1166 * t920 + t1170 * t909;
t864 = t1166 * t910 - t1170 * t921;
t863 = t1166 * t909 - t1170 * t920;
t861 = pkin(5) * (t1166 * t934 + t1170 * t897);
t857 = pkin(6) * t957 + t1165 * t914 + (-pkin(1) - t1264) * t997;
t853 = -t1217 - t1279;
t850 = pkin(5) * (t1166 * t917 + t1170 * t891);
t847 = t1200 - t1280;
t843 = pkin(6) * t938 + (-pkin(1) + t1199) * t944;
t841 = -t1164 * t898 + t1168 * t936 - t1269;
t839 = -t1164 * t893 + t1168 * t931 - t1270;
t838 = t845 + t966;
t837 = -t1279 - t1292;
t834 = -t1280 - t1293;
t831 = t1166 * t879 + t1170 * t869;
t830 = t1166 * t869 - t1170 * t879;
t828 = pkin(5) * (t1166 * t880 + t1170 * t860);
t827 = -t1188 - t1281;
t825 = t1164 * t855 + t1251;
t824 = -t1189 - t1282;
t823 = t1165 * t985 + t1169 * t826;
t822 = t1165 * t826 - t1169 * t985;
t821 = -t1164 * t844 + t1168 * t856 - t1269;
t818 = -t1164 * t842 + t1168 * t849 - t1270;
t817 = -t1165 * t853 + t1169 * t841 - t1272;
t816 = -pkin(2) * t825 - t1278;
t815 = -t1165 * t847 + t1169 * t839 - t1273;
t814 = t1165 * t841 + t1169 * t853 + t1260;
t813 = -t1190 - t1281;
t811 = t1164 * t833 + t1168 * t832;
t810 = -t1191 - t1282;
t809 = t1165 * t839 + t1169 * t847 + t1261;
t808 = -t1164 * t835 + t1168 * t836 - t1271;
t806 = t1165 * t913 + t1169 * t812;
t805 = t1165 * t812 - t1169 * t913;
t803 = -pkin(7) * t825 - pkin(8) * t1251 - t1164 * t846;
t802 = -t1165 * t837 + t1169 * t821 - t1272;
t801 = -t1186 - t1283;
t800 = t1165 * t821 + t1169 * t837 + t1260;
t799 = -t1165 * t834 + t1169 * t818 - t1273;
t798 = t1165 * t818 + t1169 * t834 + t1261;
t797 = -pkin(2) * t811 - t1216;
t796 = -t1165 * t845 + t1169 * t808 - t1274;
t795 = -t1164 * t819 + t1168 * t820 - t1271;
t794 = -pkin(1) * t822 - t1178;
t793 = t1165 * t808 + t1169 * t845 + t1262;
t792 = -t1187 - t1283;
t791 = -t1165 * t838 + t1169 * t795 - t1274;
t790 = t1165 * t795 + t1169 * t838 + t1262;
t789 = -pkin(6) * t822 - t1165 * t816 + t1169 * t803;
t788 = -pkin(7) * t811 - t1164 * t804 + t1168 * t807;
t787 = -pkin(1) * t825 + pkin(6) * t823 + t1165 * t803 + t1169 * t816;
t786 = -pkin(1) * t805 - t1180;
t785 = -pkin(6) * t805 - t1165 * t797 + t1169 * t788;
t784 = -pkin(1) * t811 + pkin(6) * t806 + t1165 * t788 + t1169 * t797;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1136, 0, -t1135, 0, t1198, -t1114, -t1194, -pkin(5) * t1194, t1108 * t1170 - t1204, t1090 * t1170 + t1138 * t1166, t1102 * t1170 + t1165 * t1220, t1107 * t1170 + t1204, t1100 * t1170 + t1166 * t1219, qJDD(2) * t1166 + t1125 * t1170, t1170 * t1063 - t1166 * t1056 - pkin(5) * (t1101 * t1166 + t1133 * t1170), t1170 * t1064 - t1166 * t1057 - pkin(5) * (t1103 * t1166 - t1131 * t1170), t1170 * t1051 - pkin(5) * (t1134 * t1166 + t1137 * t1170), -pkin(5) * (t1052 * t1166 + t1119 * t1170) - (pkin(1) * t1166 - pkin(6) * t1170) * t1051, t1012 * t1170 + t1037 * t1166, t1166 * t996 + t1170 * t976, t1026 * t1166 + t1170 * t993, t1011 * t1170 - t1035 * t1166, t1027 * t1166 + t1170 * t994, t1033 * t1170 + t1059 * t1166, t1170 * t892 - t1166 * t919 - pkin(5) * (-t1019 * t1170 + t1166 * t978), t1170 * t894 - t1166 * t924 - pkin(5) * (-t1023 * t1170 + t1166 * t984), t1170 * t883 - t1166 * t887 - pkin(5) * (t1166 * t957 - t1170 * t997), t1170 * t867 - t1166 * t886 - pkin(5) * (t1166 * t938 - t1170 * t944), t866, t831, t872, t865, t873, t912, -t1166 * t824 + t1170 * t815 - t1276, -t1166 * t827 + t1170 * t817 - t1275, -t1166 * t801 + t1170 * t796 - t1277, t1170 * t789 - t1166 * t794 - pkin(5) * (t1166 * t823 - t1170 * t825), t866, t831, t872, t865, t873, t912, -t1166 * t810 + t1170 * t799 - t1276, -t1166 * t813 + t1170 * t802 - t1275, -t1166 * t792 + t1170 * t791 - t1277, t1170 * t785 - t1166 * t786 - pkin(5) * (t1166 * t806 - t1170 * t811); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1135, 0, t1136, 0, t1114, t1198, t1205, pkin(5) * t1205, t1108 * t1166 + t1203, t1090 * t1166 - t1138 * t1170, t1102 * t1166 - t1165 * t1218, t1107 * t1166 - t1203, t1100 * t1166 - t1169 * t1218, -qJDD(2) * t1170 + t1125 * t1166, t1166 * t1063 + t1170 * t1056 + pkin(5) * (t1101 * t1170 - t1133 * t1166), t1166 * t1064 + t1170 * t1057 + pkin(5) * (t1103 * t1170 + t1131 * t1166), t1166 * t1051 + pkin(5) * (t1134 * t1170 - t1137 * t1166), pkin(5) * (t1052 * t1170 - t1119 * t1166) - (-pkin(1) * t1170 - pkin(6) * t1166) * t1051, t1012 * t1166 - t1037 * t1170, t1166 * t976 - t1170 * t996, -t1026 * t1170 + t1166 * t993, t1011 * t1166 + t1035 * t1170, -t1027 * t1170 + t1166 * t994, t1033 * t1166 - t1059 * t1170, t1166 * t892 + t1170 * t919 + pkin(5) * (t1019 * t1166 + t1170 * t978), t1166 * t894 + t1170 * t924 + pkin(5) * (t1023 * t1166 + t1170 * t984), t1166 * t883 + t1170 * t887 + pkin(5) * (t1166 * t997 + t1170 * t957), t1166 * t867 + t1170 * t886 + pkin(5) * (t1166 * t944 + t1170 * t938), t864, t830, t870, t863, t871, t911, t1166 * t815 + t1170 * t824 + t850, t1166 * t817 + t1170 * t827 + t861, t1166 * t796 + t1170 * t801 + t828, t1166 * t789 + t1170 * t794 + pkin(5) * (t1166 * t825 + t1170 * t823), t864, t830, t870, t863, t871, t911, t1166 * t799 + t1170 * t810 + t850, t1166 * t802 + t1170 * t813 + t861, t1166 * t791 + t1170 * t792 + t828, t1166 * t785 + t1170 * t786 + pkin(5) * (t1166 * t811 + t1170 * t806); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1141, t1142, 0, 0, t1095, t1089, t1098, -t1094, t1096, 0, t1042, t1041, t1021, t1025, t1010, t975, t991, t1009, t992, t1032, t885, t888, t857, t843, t908, t868, t899, t907, t900, t948, t809, t814, t793, t787, t908, t868, t899, t907, t900, t948, t798, t800, t790, t784; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1171, 0, 0, -g(3), -t1141, 0, t1108, t1090, t1102, t1107, t1100, t1125, t1063, t1064, t1051, pkin(6) * t1051, t1012, t976, t993, t1011, t994, t1033, t892, t894, t883, t867, t910, t869, t901, t909, t902, t949, t815, t817, t796, t789, t910, t869, t901, t909, t902, t949, t799, t802, t791, t785; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1171, 0, qJDD(1), 0, g(3), 0, -t1142, 0, t1151, -t1138, -t1221, -t1151, -t1219, -qJDD(2), t1056, t1057, 0, pkin(1) * t1051, -t1037, -t996, -t1026, t1035, -t1027, -t1059, t919, t924, t887, t886, -t921, -t879, -t939, -t920, -t940, -t953, t824, t827, t801, t794, -t921, -t879, -t939, -t920, -t940, -t953, t810, t813, t792, t786; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1141, t1142, 0, 0, t1095, t1089, t1098, -t1094, t1096, 0, t1042, t1041, t1021, t1025, t1010, t975, t991, t1009, t992, t1032, t885, t888, t857, t843, t908, t868, t899, t907, t900, t948, t809, t814, t793, t787, t908, t868, t899, t907, t900, t948, t798, t800, t790, t784; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1193, t1133, t1140, -t1211, t1148, t1211, 0, -t1119, t1104, 0, t1038, t998, t1028, t1036, t1029, t1060, t986, t995, t914, -pkin(7) * t944, t923, t881, t941, t922, t942, t954, t839, t841, t808, t803, t923, t881, t941, t922, t942, t954, t818, t821, t795, t788; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1155, t1131, t1146, t1132, t1139, -t1155, t1119, 0, t1105, 0, -t1244, -t1092, -t1048, t1244, t1044, t1124, t951, t955, -pkin(2) * t997, -pkin(2) * t944, -t1034, -t1030, -t973, t1034, t970, t1121, t847, t853, t845, t816, -t1034, -t1030, -t973, t1034, t970, t1121, t834, t837, t838, t797; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1151, t1138, t1221, t1151, t1219, qJDD(2), -t1104, -t1105, 0, 0, t1037, t996, t1026, -t1035, t1027, t1059, t1184, t1183, t1181, t1202, t921, t879, t939, t920, t940, t953, t1189, t1188, t1186, t1178, t921, t879, t939, t920, t940, t953, t1191, t1190, t1187, t1180; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1080, t1045, t1182, -t1111, t1109, t1111, 0, t1061, t1005, 0, t965, t929, t989, t963, t990, t1014, t931, t936, t836, -pkin(8) * t854, t965, t929, t989, t963, t990, t1014, t849, t856, t820, t807; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1112, t1047, t1110, -t1174, -t1072, t1112, -t1061, 0, t1006, 0, t964, t927, t987, t962, t988, t1013, t893, t898, t835, t846, t964, t927, t987, t962, t988, t1013, t842, t844, t819, t804; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1244, t1092, t1048, -t1244, -t1044, -t1124, -t1005, -t1006, 0, 0, t1034, t1030, t973, -t1034, -t970, -t1121, -t1200, t1217, t926, t1278, t1034, t1030, t973, -t1034, -t970, -t1121, t1293, t1292, -t966 + t926, t1216; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1003, -t969, -t1291, -t1069, t1066, t1069, 0, t985, t905, 0, t1003, -t969, -t1291, -t1069, t1066, t1069, qJ(5) * t1291, t903, t852, qJ(5) * t875; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1243, t1287, t1067, t1002, -t1016, t1243, -t985, 0, t906, 0, -t1243, t1287, t1067, t1002, -t1016, t1243, t884, t943, t848, t840; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1034, t1030, t973, -t1034, -t970, -t1121, -t905, -t906, 0, 0, t1034, t1030, t973, -t1034, -t970, -t1121, t1177, t1185, -t966, -t874; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1003, -t969, -t1291, -t1069, t1066, t1069, 0, t913, t875, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1243, t1287, t1067, t1002, -t1016, t1243, -t913, 0, t876, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1034, t1030, t973, -t1034, -t970, -t1121, -t875, -t876, 0, 0;];
m_new_reg = t1;
