% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRPR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:12
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRPR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR4_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR4_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRPR4_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:12:07
% EndTime: 2019-12-31 21:12:09
% DurationCPUTime: 2.16s
% Computational Cost: add. (6807->195), mult. (9035->231), div. (0->0), fcn. (5249->8), ass. (0->136)
t1284 = sin(qJ(3));
t1277 = qJD(1) + qJD(2);
t1273 = t1277 ^ 2;
t1288 = cos(qJ(3));
t1313 = t1273 * t1288;
t1263 = t1284 * t1313;
t1256 = qJDD(3) - t1263;
t1280 = t1284 ^ 2;
t1291 = qJD(3) ^ 2;
t1259 = t1280 * t1273 + t1291;
t1230 = t1288 * t1256 - t1284 * t1259;
t1311 = t1277 * t1288;
t1302 = qJD(3) * t1311;
t1274 = qJDD(1) + qJDD(2);
t1309 = t1284 * t1274;
t1243 = 0.2e1 * t1302 + t1309;
t1285 = sin(qJ(2));
t1289 = cos(qJ(2));
t1209 = t1285 * t1230 + t1289 * t1243;
t1212 = t1289 * t1230 - t1285 * t1243;
t1286 = sin(qJ(1));
t1290 = cos(qJ(1));
t1325 = t1290 * t1209 + t1286 * t1212;
t1324 = t1286 * t1209 - t1290 * t1212;
t1251 = t1285 * t1273 - t1289 * t1274;
t1299 = -t1289 * t1273 - t1285 * t1274;
t1323 = t1286 * t1251 + t1290 * t1299;
t1322 = t1290 * t1251 - t1286 * t1299;
t1275 = qJD(3) - qJD(5);
t1319 = qJD(5) - t1275;
t1283 = sin(qJ(5));
t1287 = cos(qJ(5));
t1235 = (-t1283 * t1284 - t1287 * t1288) * t1277;
t1318 = t1235 ^ 2;
t1312 = t1277 * t1284;
t1237 = -t1283 * t1311 + t1287 * t1312;
t1317 = t1237 ^ 2;
t1316 = t1275 ^ 2;
t1315 = t1288 * g(3);
t1314 = t1237 * t1235;
t1281 = t1288 ^ 2;
t1310 = t1281 * t1273;
t1307 = t1288 * t1274;
t1305 = qJD(5) + t1275;
t1265 = -t1290 * g(1) - t1286 * g(2);
t1292 = qJD(1) ^ 2;
t1254 = -t1292 * pkin(1) + t1265;
t1264 = t1286 * g(1) - t1290 * g(2);
t1295 = qJDD(1) * pkin(1) + t1264;
t1225 = t1289 * t1254 + t1285 * t1295;
t1304 = t1280 + t1281;
t1303 = -qJDD(3) + qJDD(5);
t1221 = -t1273 * pkin(2) + t1274 * pkin(7) + t1225;
t1215 = -t1284 * g(3) + t1288 * t1221;
t1242 = (-pkin(3) * t1288 - qJ(4) * t1284) * t1277;
t1301 = t1277 * t1242 + t1221;
t1224 = -t1285 * t1254 + t1289 * t1295;
t1269 = qJD(3) * t1312;
t1300 = -t1269 + t1307;
t1227 = t1284 * t1256 + t1288 * t1259;
t1298 = -qJD(3) * pkin(4) - pkin(8) * t1312;
t1297 = -qJDD(3) * pkin(3) - t1291 * qJ(4) + qJDD(4) + t1315;
t1220 = -t1274 * pkin(2) - t1273 * pkin(7) - t1224;
t1296 = t1302 + t1309;
t1199 = -t1291 * pkin(3) + qJDD(3) * qJ(4) + 0.2e1 * qJD(4) * qJD(3) + t1242 * t1311 + t1215;
t1294 = -t1283 * t1296 - t1287 * t1300;
t1293 = t1283 * t1300 - t1287 * t1296;
t1192 = -t1300 * pkin(3) + (pkin(3) * qJD(3) - 0.2e1 * qJD(4)) * t1312 + t1220 + (-t1296 - t1302) * qJ(4);
t1260 = -t1291 - t1310;
t1258 = -t1286 * qJDD(1) - t1290 * t1292;
t1257 = t1290 * qJDD(1) - t1286 * t1292;
t1255 = qJDD(3) + t1263;
t1253 = t1304 * t1273;
t1248 = t1304 * t1274;
t1244 = -0.2e1 * t1269 + t1307;
t1232 = -t1316 - t1317;
t1229 = -t1284 * t1255 + t1288 * t1260;
t1226 = t1288 * t1255 + t1284 * t1260;
t1223 = t1289 * t1248 - t1285 * t1253;
t1222 = t1285 * t1248 + t1289 * t1253;
t1219 = t1303 + t1314;
t1218 = -t1303 + t1314;
t1217 = -t1316 - t1318;
t1214 = -t1284 * t1221 - t1315;
t1211 = t1289 * t1229 - t1285 * t1244;
t1208 = t1285 * t1229 + t1289 * t1244;
t1207 = -t1317 - t1318;
t1206 = -t1285 * t1224 + t1289 * t1225;
t1205 = t1289 * t1224 + t1285 * t1225;
t1204 = t1287 * t1218 - t1283 * t1232;
t1203 = t1283 * t1218 + t1287 * t1232;
t1202 = -t1286 * t1222 + t1290 * t1223;
t1201 = t1290 * t1222 + t1286 * t1223;
t1200 = t1301 * t1284 + t1297;
t1198 = -t1305 * t1235 + t1293;
t1197 = t1319 * t1235 - t1293;
t1196 = -t1305 * t1237 + t1294;
t1195 = t1319 * t1237 - t1294;
t1194 = t1287 * t1217 - t1283 * t1219;
t1193 = t1283 * t1217 + t1287 * t1219;
t1191 = -t1284 * t1214 + t1288 * t1215;
t1190 = t1288 * t1214 + t1284 * t1215;
t1189 = -t1286 * t1208 + t1290 * t1211;
t1188 = t1290 * t1208 + t1286 * t1211;
t1187 = -qJDD(3) * pkin(4) + (-pkin(4) * t1313 - t1274 * pkin(8) + t1301) * t1284 + t1297;
t1186 = -pkin(4) * t1310 - t1300 * pkin(8) + qJD(3) * t1298 + t1199;
t1185 = -t1300 * pkin(4) + pkin(8) * t1310 - t1298 * t1312 + t1192;
t1184 = t1289 * t1191 + t1285 * t1220;
t1183 = t1285 * t1191 - t1289 * t1220;
t1182 = t1284 * t1203 + t1288 * t1204;
t1181 = -t1288 * t1203 + t1284 * t1204;
t1180 = t1288 * t1199 + t1284 * t1200;
t1179 = t1284 * t1199 - t1288 * t1200;
t1178 = t1287 * t1196 - t1283 * t1198;
t1177 = t1283 * t1196 + t1287 * t1198;
t1176 = t1284 * t1193 + t1288 * t1194;
t1175 = -t1288 * t1193 + t1284 * t1194;
t1174 = t1287 * t1186 + t1283 * t1187;
t1173 = -t1283 * t1186 + t1287 * t1187;
t1172 = t1289 * t1182 - t1285 * t1197;
t1171 = t1285 * t1182 + t1289 * t1197;
t1170 = t1289 * t1180 + t1285 * t1192;
t1169 = t1285 * t1180 - t1289 * t1192;
t1168 = t1289 * t1176 - t1285 * t1195;
t1167 = t1285 * t1176 + t1289 * t1195;
t1166 = t1284 * t1177 + t1288 * t1178;
t1165 = -t1288 * t1177 + t1284 * t1178;
t1164 = t1289 * t1166 - t1285 * t1207;
t1163 = t1285 * t1166 + t1289 * t1207;
t1162 = -t1283 * t1173 + t1287 * t1174;
t1161 = t1287 * t1173 + t1283 * t1174;
t1160 = t1284 * t1161 + t1288 * t1162;
t1159 = -t1288 * t1161 + t1284 * t1162;
t1158 = t1289 * t1160 + t1285 * t1185;
t1157 = t1285 * t1160 - t1289 * t1185;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1258, -t1257, 0, -t1286 * t1264 + t1290 * t1265, 0, 0, 0, 0, 0, 0, t1323, t1322, 0, -t1286 * t1205 + t1290 * t1206, 0, 0, 0, 0, 0, 0, t1189, t1324, t1202, -t1286 * t1183 + t1290 * t1184, 0, 0, 0, 0, 0, 0, t1189, t1202, -t1324, -t1286 * t1169 + t1290 * t1170, 0, 0, 0, 0, 0, 0, -t1286 * t1167 + t1290 * t1168, -t1286 * t1171 + t1290 * t1172, -t1286 * t1163 + t1290 * t1164, -t1286 * t1157 + t1290 * t1158; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1257, t1258, 0, t1290 * t1264 + t1286 * t1265, 0, 0, 0, 0, 0, 0, -t1322, t1323, 0, t1290 * t1205 + t1286 * t1206, 0, 0, 0, 0, 0, 0, t1188, -t1325, t1201, t1290 * t1183 + t1286 * t1184, 0, 0, 0, 0, 0, 0, t1188, t1201, t1325, t1290 * t1169 + t1286 * t1170, 0, 0, 0, 0, 0, 0, t1290 * t1167 + t1286 * t1168, t1290 * t1171 + t1286 * t1172, t1290 * t1163 + t1286 * t1164, t1290 * t1157 + t1286 * t1158; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1226, -t1227, 0, t1190, 0, 0, 0, 0, 0, 0, t1226, 0, t1227, t1179, 0, 0, 0, 0, 0, 0, t1175, t1181, t1165, t1159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1292, -qJDD(1), 0, t1265, 0, 0, 0, 0, 0, 0, t1299, t1251, 0, t1206, 0, 0, 0, 0, 0, 0, t1211, -t1212, t1223, t1184, 0, 0, 0, 0, 0, 0, t1211, t1223, t1212, t1170, 0, 0, 0, 0, 0, 0, t1168, t1172, t1164, t1158; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1292, 0, t1264, 0, 0, 0, 0, 0, 0, -t1251, t1299, 0, t1205, 0, 0, 0, 0, 0, 0, t1208, -t1209, t1222, t1183, 0, 0, 0, 0, 0, 0, t1208, t1222, t1209, t1169, 0, 0, 0, 0, 0, 0, t1167, t1171, t1163, t1157; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1226, -t1227, 0, t1190, 0, 0, 0, 0, 0, 0, t1226, 0, t1227, t1179, 0, 0, 0, 0, 0, 0, t1175, t1181, t1165, t1159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1273, -t1274, 0, t1225, 0, 0, 0, 0, 0, 0, t1229, -t1230, t1248, t1191, 0, 0, 0, 0, 0, 0, t1229, t1248, t1230, t1180, 0, 0, 0, 0, 0, 0, t1176, t1182, t1166, t1160; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1274, -t1273, 0, t1224, 0, 0, 0, 0, 0, 0, t1244, -t1243, t1253, -t1220, 0, 0, 0, 0, 0, 0, t1244, t1253, t1243, -t1192, 0, 0, 0, 0, 0, 0, t1195, t1197, t1207, -t1185; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1226, -t1227, 0, t1190, 0, 0, 0, 0, 0, 0, t1226, 0, t1227, t1179, 0, 0, 0, 0, 0, 0, t1175, t1181, t1165, t1159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1260, -t1256, t1307, t1215, 0, 0, 0, 0, 0, 0, t1260, t1307, t1256, t1199, 0, 0, 0, 0, 0, 0, t1194, t1204, t1178, t1162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1255, -t1259, -t1309, t1214, 0, 0, 0, 0, 0, 0, t1255, -t1309, t1259, -t1200, 0, 0, 0, 0, 0, 0, -t1193, -t1203, -t1177, -t1161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1244, t1243, -t1253, t1220, 0, 0, 0, 0, 0, 0, -t1244, -t1253, -t1243, t1192, 0, 0, 0, 0, 0, 0, -t1195, -t1197, -t1207, t1185; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1260, t1307, t1256, t1199, 0, 0, 0, 0, 0, 0, t1194, t1204, t1178, t1162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1244, -t1253, -t1243, t1192, 0, 0, 0, 0, 0, 0, -t1195, -t1197, -t1207, t1185; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1255, t1309, -t1259, t1200, 0, 0, 0, 0, 0, 0, t1193, t1203, t1177, t1161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1217, t1218, t1196, t1174; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1219, t1232, t1198, t1173; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1195, t1197, t1207, -t1185;];
f_new_reg = t1;
