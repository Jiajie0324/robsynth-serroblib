% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:12
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRPR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR4_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR4_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRPR4_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:11:44
% EndTime: 2019-12-31 21:11:56
% DurationCPUTime: 8.73s
% Computational Cost: add. (24012->478), mult. (31903->664), div. (0->0), fcn. (18346->8), ass. (0->339)
t552 = qJD(3) ^ 2;
t540 = qJD(1) + qJD(2);
t535 = t540 ^ 2;
t545 = sin(qJ(3));
t542 = t545 ^ 2;
t611 = t542 * t535;
t515 = t552 + t611;
t549 = cos(qJ(3));
t521 = t549 * t535 * t545;
t512 = qJDD(3) - t521;
t591 = t549 * t512;
t457 = -t545 * t515 + t591;
t583 = qJD(3) * t540;
t575 = t549 * t583;
t537 = qJDD(1) + qJDD(2);
t600 = t545 * t537;
t492 = 0.2e1 * t575 + t600;
t546 = sin(qJ(2));
t550 = cos(qJ(2));
t407 = t546 * t457 + t550 * t492;
t410 = t550 * t457 - t546 * t492;
t547 = sin(qJ(1));
t551 = cos(qJ(1));
t343 = t551 * t407 + t547 * t410;
t654 = pkin(5) * t343;
t347 = t547 * t407 - t551 * t410;
t653 = pkin(5) * t347;
t652 = pkin(6) * t407;
t651 = pkin(1) * t407 + pkin(7) * t457;
t603 = t545 * t512;
t451 = t549 * t515 + t603;
t650 = -pkin(1) * t451 + pkin(6) * t410;
t527 = t545 * t583;
t590 = t549 * t537;
t494 = -0.2e1 * t527 + t590;
t592 = t549 * t494;
t606 = t545 * t492;
t434 = -t592 + t606;
t543 = t549 ^ 2;
t508 = (t542 - t543) * t535;
t395 = t546 * t434 + t550 * t508;
t397 = t550 * t434 - t546 * t508;
t649 = t551 * t395 + t547 * t397;
t648 = t547 * t395 - t551 * t397;
t610 = t543 * t535;
t517 = -t552 + t610;
t455 = -t549 * t517 + t603;
t587 = t550 * t537;
t425 = t546 * t455 + t549 * t587;
t428 = t550 * t455 - t546 * t590;
t647 = t551 * t425 + t547 * t428;
t646 = t547 * t425 - t551 * t428;
t597 = t546 * t537;
t503 = t550 * t535 + t597;
t506 = t546 * t535 - t587;
t441 = t547 * t503 + t551 * t506;
t475 = pkin(6) * t503 - t550 * g(3);
t633 = pkin(6) * t506 - t546 * g(3);
t645 = pkin(5) * t441 + t547 * t475 + t551 * t633;
t563 = t551 * t503 - t547 * t506;
t644 = pkin(5) * t563 + t551 * t475 - t547 * t633;
t523 = t551 * g(1) + t547 * g(2);
t553 = qJD(1) ^ 2;
t510 = -t553 * pkin(1) - t523;
t522 = t547 * g(1) - t551 * g(2);
t559 = qJDD(1) * pkin(1) + t522;
t444 = t546 * t510 - t550 * t559;
t445 = t550 * t510 + t546 * t559;
t572 = t546 * t444 + t550 * t445;
t390 = t550 * t444 - t546 * t445;
t586 = t551 * t390;
t640 = -t547 * t572 + t586;
t596 = t547 * t390;
t329 = t551 * t572 + t596;
t639 = 2 * qJD(4);
t637 = pkin(2) * t451;
t636 = pkin(7) * t451;
t544 = sin(qJ(5));
t548 = cos(qJ(5));
t478 = (-t544 * t545 - t548 * t549) * t540;
t493 = t575 + t600;
t570 = -t527 + t590;
t393 = t478 * qJD(5) + t548 * t493 - t544 * t570;
t538 = qJD(3) - qJD(5);
t617 = t478 * t538;
t635 = t393 - t617;
t634 = t493 + t575;
t536 = -qJDD(3) + qJDD(5);
t612 = t540 * t549;
t613 = t540 * t545;
t480 = -t544 * t612 + t548 * t613;
t616 = t480 * t478;
t562 = t536 + t616;
t632 = t544 * t562;
t630 = t548 * t562;
t625 = pkin(3) * t549;
t566 = -qJ(4) * t545 - t625;
t491 = t566 * t540;
t431 = -t535 * pkin(2) + t537 * pkin(7) + t445;
t573 = t545 * g(3) - t549 * t431;
t558 = qJDD(3) * qJ(4) + qJD(3) * t639 + t491 * t612 - t573;
t628 = t545 * t517 + t591;
t627 = t491 * t613 + qJDD(4);
t476 = t478 ^ 2;
t477 = t480 ^ 2;
t534 = t538 ^ 2;
t626 = pkin(3) + pkin(4);
t518 = -t552 - t610;
t511 = qJDD(3) + t521;
t604 = t545 * t511;
t454 = t549 * t518 - t604;
t406 = t546 * t454 + t550 * t494;
t409 = t550 * t454 - t546 * t494;
t342 = t551 * t406 + t547 * t409;
t624 = pkin(5) * t342;
t584 = t542 + t543;
t499 = t584 * t537;
t507 = t584 * t535;
t437 = t546 * t499 + t550 * t507;
t440 = t550 * t499 - t546 * t507;
t375 = t551 * t437 + t547 * t440;
t623 = pkin(5) * t375;
t622 = pkin(6) * t406;
t621 = pkin(6) * t437;
t500 = t549 * t511;
t449 = t545 * t518 + t500;
t620 = pkin(7) * t449;
t615 = t538 * t544;
t614 = t538 * t548;
t430 = -t537 * pkin(2) - t535 * pkin(7) + t444;
t555 = -t570 * pkin(3) - t634 * qJ(4) + t430;
t351 = (pkin(3) * qJD(3) - (2 * qJD(4))) * t613 + t555;
t560 = -qJD(3) * pkin(4) - pkin(8) * t613;
t330 = -t570 * pkin(4) + pkin(8) * t610 - t560 * t613 + t351;
t609 = t544 * t330;
t421 = -t536 + t616;
t608 = t544 * t421;
t607 = t545 * t430;
t605 = t545 * t494;
t595 = t548 * t330;
t594 = t548 * t421;
t593 = t549 * t430;
t412 = t549 * g(3) + t545 * t431;
t585 = t507 - t552;
t581 = t546 * t616;
t579 = t550 * t616;
t577 = pkin(1) * t406 + pkin(2) * t494 + pkin(7) * t454;
t576 = pkin(1) * t437 + pkin(2) * t507 + pkin(7) * t499;
t574 = -pkin(1) * t449 + pkin(6) * t409;
t372 = -t552 * pkin(3) + t558;
t337 = -pkin(4) * t610 - t570 * pkin(8) + qJD(3) * t560 + t372;
t557 = -qJDD(3) * pkin(3) + t412 + t627;
t374 = t552 * qJ(4) - t557;
t339 = (-t493 + t575) * pkin(8) - t511 * pkin(4) - t374;
t297 = t544 * t337 - t548 * t339;
t350 = t545 * t412 - t549 * t573;
t571 = t544 * t493 + t548 * t570;
t465 = -t547 * t522 - t551 * t523;
t569 = t546 * t521;
t568 = t550 * t521;
t377 = -pkin(2) * t449 + t412;
t514 = t551 * qJDD(1) - t547 * t553;
t567 = -pkin(5) * t514 - t547 * g(3);
t565 = pkin(3) * t545 - qJ(4) * t549;
t298 = t548 * t337 + t544 * t339;
t262 = -t548 * t297 + t544 * t298;
t263 = t544 * t297 + t548 * t298;
t349 = t549 * t412 + t545 * t573;
t564 = t549 * t492 + t605;
t464 = t551 * t522 - t547 * t523;
t556 = (-qJD(5) - t538) * t480 - t571;
t554 = t613 * t639 - t555;
t516 = t552 - t611;
t513 = t547 * qJDD(1) + t551 * t553;
t489 = -pkin(5) * t513 + t551 * g(3);
t488 = t565 * t537;
t487 = t584 * t583;
t467 = -t477 + t534;
t466 = t476 - t534;
t463 = t546 * qJDD(3) + t550 * t487;
t462 = -t550 * qJDD(3) + t546 * t487;
t461 = t549 * t493 - t542 * t583;
t460 = -t543 * t583 - t545 * t570;
t459 = -t477 - t534;
t456 = -t545 * t516 + t500;
t450 = t549 * t516 + t604;
t447 = t634 * t545;
t446 = (t570 - t527) * t549;
t435 = pkin(6) * t440;
t432 = t477 - t476;
t429 = t550 * t456 + t545 * t597;
t426 = t546 * t456 - t545 * t587;
t420 = t550 * t461 - t569;
t419 = t550 * t460 + t569;
t418 = t546 * t461 + t568;
t417 = t546 * t460 - t568;
t416 = -t534 - t476;
t405 = (-t478 * t548 - t480 * t544) * t538;
t404 = (t478 * t544 - t480 * t548) * t538;
t400 = -t547 * t462 + t551 * t463;
t399 = t551 * t462 + t547 * t463;
t398 = -t476 - t477;
t392 = -t480 * qJD(5) - t571;
t387 = pkin(1) * g(3) + pkin(6) * t572;
t386 = t548 * t466 + t608;
t385 = -t544 * t467 + t630;
t384 = -t544 * t466 + t594;
t383 = -t548 * t467 - t632;
t382 = t593 + t636;
t381 = t607 - t620;
t380 = -t544 * t459 + t594;
t379 = t548 * t459 + t608;
t378 = -t573 + t637;
t376 = -t547 * t437 + t551 * t440;
t373 = pkin(5) * t376;
t371 = t617 + t393;
t366 = (qJD(5) - t538) * t480 + t571;
t365 = t548 * t393 + t480 * t615;
t364 = -t544 * t393 + t480 * t614;
t363 = -t544 * t392 + t478 * t614;
t362 = -t548 * t392 - t478 * t615;
t361 = -t547 * t426 + t551 * t429;
t360 = t551 * t426 + t547 * t429;
t359 = t548 * t416 - t632;
t358 = t544 * t416 + t630;
t357 = -t547 * t418 + t551 * t420;
t356 = -t547 * t417 + t551 * t419;
t355 = t551 * t418 + t547 * t420;
t354 = t551 * t417 + t547 * t419;
t353 = t585 * qJ(4) + t557;
t352 = t585 * pkin(3) + t558;
t345 = -t547 * t406 + t551 * t409;
t341 = pkin(5) * t345;
t340 = -t545 * t404 + t549 * t405;
t338 = (t494 - t527) * pkin(3) + t554;
t336 = -pkin(3) * t527 + qJ(4) * t492 + t554;
t334 = t550 * t340 - t546 * t536;
t333 = t546 * t340 + t550 * t536;
t332 = (-t518 - t552) * qJ(4) + (-qJDD(3) - t511) * pkin(3) + t377 + t627;
t331 = -t637 - qJ(4) * t512 + (-t515 + t552) * pkin(3) - t558;
t327 = t550 * t349 - t621;
t326 = t546 * t349 + t435;
t325 = t550 * t350 + t546 * t430;
t324 = t546 * t350 - t550 * t430;
t323 = -t545 * t384 + t549 * t386;
t322 = -t545 * t383 + t549 * t385;
t321 = t545 * t379 + t549 * t380;
t320 = -t549 * t379 + t545 * t380;
t319 = t549 * t372 - t545 * t374;
t318 = t545 * t372 + t549 * t374;
t317 = -pkin(3) * t606 + t549 * t336 - t636;
t316 = qJ(4) * t592 - t545 * t338 - t620;
t315 = t544 * t371 + t548 * t556;
t314 = -t548 * t366 - t544 * t635;
t313 = -t548 * t371 + t544 * t556;
t312 = t544 * t366 - t548 * t635;
t311 = -t545 * t364 + t549 * t365;
t310 = -t545 * t362 + t549 * t363;
t309 = t545 * t358 + t549 * t359;
t308 = -t549 * t358 + t545 * t359;
t307 = -t545 * t352 + t549 * t353;
t306 = -t546 * t378 + t550 * t382 + t652;
t305 = -t546 * t377 + t550 * t381 - t622;
t304 = t550 * t311 + t581;
t303 = t550 * t310 - t581;
t302 = t546 * t311 - t579;
t301 = t546 * t310 + t579;
t300 = t550 * t378 + t546 * t382 - t650;
t299 = t550 * t377 + t546 * t381 + t574;
t296 = t550 * t323 - t546 * t556;
t295 = t550 * t322 - t546 * t371;
t294 = t546 * t323 + t550 * t556;
t293 = t546 * t322 + t550 * t371;
t292 = t550 * t321 - t546 * t635;
t291 = t546 * t321 + t550 * t635;
t290 = t550 * t307 - t546 * t488 - t621;
t289 = t546 * t307 + t550 * t488 + t435;
t288 = t550 * t319 + t546 * t351;
t287 = t546 * t319 - t550 * t351;
t286 = t550 * t309 - t546 * t366;
t285 = t546 * t309 + t550 * t366;
t284 = -pkin(8) * t379 + qJ(4) * t635 - t595;
t283 = -t547 * t324 + t551 * t325;
t282 = t551 * t324 + t547 * t325;
t281 = -pkin(8) * t358 + qJ(4) * t366 - t609;
t280 = -pkin(2) * t318 - pkin(3) * t374 - qJ(4) * t372;
t279 = t545 * t313 + t549 * t315;
t278 = -t545 * t312 + t549 * t314;
t277 = -t549 * t313 + t545 * t315;
t276 = t550 * t316 - t546 * t332 - t622;
t275 = t550 * t317 - t546 * t331 - t652;
t274 = -pkin(6) * t324 - (pkin(2) * t546 - pkin(7) * t550) * t349;
t273 = -pkin(7) * t318 + t351 * t565;
t272 = t546 * t316 + t550 * t332 + t574;
t271 = -pkin(8) * t380 + t626 * t635 + t609;
t270 = t546 * t317 + t550 * t331 + t650;
t269 = t550 * t278 - t546 * t432;
t268 = t546 * t278 + t550 * t432;
t267 = -pkin(8) * t359 + t626 * t366 - t595;
t266 = t550 * t279 - t546 * t398;
t265 = t546 * t279 + t550 * t398;
t264 = pkin(6) * t325 - (-pkin(2) * t550 - pkin(7) * t546 - pkin(1)) * t349;
t261 = -t547 * t291 + t551 * t292;
t260 = t551 * t291 + t547 * t292;
t259 = -t547 * t287 + t551 * t288;
t258 = t551 * t287 + t547 * t288;
t257 = -t547 * t285 + t551 * t286;
t256 = t551 * t285 + t547 * t286;
t255 = -pkin(8) * t262 - qJ(4) * t330;
t254 = -pkin(2) * t320 - qJ(4) * t380 + t626 * t379 - t298;
t253 = -pkin(2) * t308 - qJ(4) * t359 + t626 * t358 - t297;
t252 = -pkin(8) * t313 + qJ(4) * t398 - t262;
t251 = -pkin(8) * t263 - t626 * t330;
t250 = -pkin(8) * t315 + t626 * t398 - t263;
t249 = -t547 * t265 + t551 * t266;
t248 = t551 * t265 + t547 * t266;
t247 = -pkin(2) * t277 - qJ(4) * t315 + t626 * t313;
t246 = -pkin(7) * t320 - t545 * t271 + t549 * t284;
t245 = -pkin(7) * t308 - t545 * t267 + t549 * t281;
t244 = t545 * t262 + t549 * t263;
t243 = -t549 * t262 + t545 * t263;
t242 = -pkin(6) * t287 + t550 * t273 - t546 * t280;
t241 = t550 * t244 + t546 * t330;
t240 = t546 * t244 - t550 * t330;
t239 = -pkin(1) * t318 + pkin(6) * t288 + t546 * t273 + t550 * t280;
t238 = -pkin(6) * t291 + t550 * t246 - t546 * t254;
t237 = -pkin(7) * t277 - t545 * t250 + t549 * t252;
t236 = -pkin(1) * t320 + pkin(6) * t292 + t546 * t246 + t550 * t254;
t235 = -pkin(6) * t285 + t550 * t245 - t546 * t253;
t234 = -pkin(1) * t308 + pkin(6) * t286 + t546 * t245 + t550 * t253;
t233 = -t547 * t240 + t551 * t241;
t232 = t551 * t240 + t547 * t241;
t231 = -pkin(7) * t243 - t545 * t251 + t549 * t255;
t230 = -pkin(2) * t243 - qJ(4) * t263 + t626 * t262;
t229 = -pkin(6) * t265 + t550 * t237 - t546 * t247;
t228 = -pkin(1) * t277 + pkin(6) * t266 + t546 * t237 + t550 * t247;
t227 = -pkin(6) * t240 - t546 * t230 + t550 * t231;
t226 = -pkin(1) * t243 + pkin(6) * t241 + t550 * t230 + t546 * t231;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t513, -t514, 0, t465, 0, 0, 0, 0, 0, 0, -t563, t441, 0, t329, 0, 0, 0, 0, 0, 0, t345, t347, t376, t283, 0, 0, 0, 0, 0, 0, t345, t376, -t347, t259, 0, 0, 0, 0, 0, 0, t257, t261, t249, t233; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t514, -t513, 0, t464, 0, 0, 0, 0, 0, 0, -t441, -t563, 0, -t640, 0, 0, 0, 0, 0, 0, t342, -t343, t375, t282, 0, 0, 0, 0, 0, 0, t342, t375, t343, t258, 0, 0, 0, 0, 0, 0, t256, t260, t248, t232; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t449, -t451, 0, -t349, 0, 0, 0, 0, 0, 0, t449, 0, t451, t318, 0, 0, 0, 0, 0, 0, t308, t320, t277, t243; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t514, 0, -t513, 0, t567, -t489, -t464, -pkin(5) * t464, 0, 0, -t441, 0, -t563, 0, t645, t644, t640, pkin(5) * t640 + pkin(6) * t586 - t547 * t387, t357, t648, t361, t356, t646, t400, -t547 * t299 + t551 * t305 - t624, -t547 * t300 + t551 * t306 + t654, -t547 * t326 + t551 * t327 - t623, -pkin(5) * t282 - t547 * t264 + t551 * t274, t357, t361, -t648, t400, -t646, t356, -t547 * t272 + t551 * t276 - t624, -t547 * t289 + t551 * t290 - t623, -t547 * t270 + t551 * t275 - t654, -pkin(5) * t258 - t547 * t239 + t551 * t242, -t547 * t302 + t551 * t304, -t547 * t268 + t551 * t269, -t547 * t293 + t551 * t295, -t547 * t301 + t551 * t303, -t547 * t294 + t551 * t296, -t547 * t333 + t551 * t334, -pkin(5) * t256 - t547 * t234 + t551 * t235, -pkin(5) * t260 - t547 * t236 + t551 * t238, -pkin(5) * t248 - t547 * t228 + t551 * t229, -pkin(5) * t232 - t547 * t226 + t551 * t227; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t513, 0, t514, 0, t489, t567, t465, pkin(5) * t465, 0, 0, t563, 0, -t441, 0, -t644, t645, t329, pkin(5) * t329 + pkin(6) * t596 + t551 * t387, t355, -t649, t360, t354, -t647, t399, t551 * t299 + t547 * t305 + t341, t551 * t300 + t547 * t306 + t653, t551 * t326 + t547 * t327 + t373, pkin(5) * t283 + t551 * t264 + t547 * t274, t355, t360, t649, t399, t647, t354, t551 * t272 + t547 * t276 + t341, t551 * t289 + t547 * t290 + t373, t551 * t270 + t547 * t275 - t653, pkin(5) * t259 + t551 * t239 + t547 * t242, t551 * t302 + t547 * t304, t551 * t268 + t547 * t269, t551 * t293 + t547 * t295, t551 * t301 + t547 * t303, t551 * t294 + t547 * t296, t551 * t333 + t547 * t334, pkin(5) * t257 + t551 * t234 + t547 * t235, pkin(5) * t261 + t551 * t236 + t547 * t238, pkin(5) * t249 + t551 * t228 + t547 * t229, pkin(5) * t233 + t551 * t226 + t547 * t227; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t522, t523, 0, 0, 0, 0, 0, 0, 0, t537, -pkin(1) * t506 - t444, -pkin(1) * t503 - t445, 0, -pkin(1) * t390, t447, t564, t450, t446, t628, 0, t577 - t593, -pkin(2) * t492 + t607 - t651, t350 + t576, pkin(1) * t324 - pkin(2) * t430 + pkin(7) * t350, t447, t450, -t564, 0, -t628, t446, qJ(4) * t605 + t549 * t338 + t577, t549 * t352 + t545 * t353 + t576, t545 * t336 + (pkin(2) + t625) * t492 + t651, pkin(1) * t287 + pkin(7) * t319 + (-pkin(2) + t566) * t351, t549 * t364 + t545 * t365, t549 * t312 + t545 * t314, t549 * t383 + t545 * t385, t549 * t362 + t545 * t363, t549 * t384 + t545 * t386, t549 * t404 + t545 * t405, pkin(1) * t285 + pkin(2) * t366 + pkin(7) * t309 + t549 * t267 + t545 * t281, pkin(1) * t291 + pkin(2) * t635 + pkin(7) * t321 + t549 * t271 + t545 * t284, pkin(1) * t265 + pkin(2) * t398 + pkin(7) * t279 + t549 * t250 + t545 * t252, pkin(1) * t240 - pkin(2) * t330 + pkin(7) * t244 + t549 * t251 + t545 * t255;];
tauB_reg = t1;
