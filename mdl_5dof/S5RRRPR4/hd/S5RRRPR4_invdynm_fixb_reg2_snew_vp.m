% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRRPR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:12
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRRPR4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR4_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR4_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR4_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRPR4_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:11:56
% EndTime: 2019-12-31 21:12:07
% DurationCPUTime: 12.15s
% Computational Cost: add. (41093->561), mult. (54172->686), div. (0->0), fcn. (30795->8), ass. (0->374)
t1014 = sin(qJ(1));
t1018 = cos(qJ(1));
t1013 = sin(qJ(2));
t1017 = cos(qJ(2));
t1012 = sin(qJ(3));
t1016 = cos(qJ(3));
t1004 = qJD(1) + qJD(2);
t999 = t1004 ^ 2;
t1079 = t1016 * t999;
t984 = t1012 * t1079;
t975 = qJDD(3) - t984;
t1080 = t1016 * t975;
t1019 = qJD(3) ^ 2;
t1007 = t1012 ^ 2;
t1097 = t1007 * t999;
t978 = t1019 + t1097;
t923 = -t1012 * t978 + t1080;
t1001 = qJDD(1) + qJDD(2);
t1068 = t1012 * t1001;
t1069 = t1004 * t1016;
t991 = qJD(3) * t1069;
t957 = 0.2e1 * t991 + t1068;
t864 = t1013 * t923 + t1017 * t957;
t867 = -t1013 * t957 + t1017 * t923;
t1156 = pkin(5) * (t1014 * t864 - t1018 * t867);
t1155 = pkin(5) * (t1014 * t867 + t1018 * t864);
t1154 = pkin(1) * t864;
t1153 = pkin(6) * t864;
t1089 = t1012 * t975;
t917 = t1016 * t978 + t1089;
t1152 = -pkin(1) * t917 + pkin(6) * t867;
t966 = t1001 * t1013 + t1017 * t999;
t968 = t1001 * t1017 - t1013 * t999;
t1034 = t1014 * t968 + t1018 * t966;
t1128 = -pkin(6) * t968 - g(3) * t1013;
t938 = pkin(6) * t966 - g(3) * t1017;
t1149 = pkin(5) * t1034 - t1014 * t1128 + t1018 * t938;
t1067 = t1016 * t1001;
t1070 = t1004 * t1012;
t990 = qJD(3) * t1070;
t959 = -0.2e1 * t990 + t1067;
t1081 = t1016 * t959;
t1092 = t1012 * t957;
t898 = -t1081 + t1092;
t1008 = t1016 ^ 2;
t971 = (t1007 - t1008) * t999;
t851 = t1013 * t898 + t1017 * t971;
t853 = -t1013 * t971 + t1017 * t898;
t1148 = t1014 * t853 + t1018 * t851;
t1147 = t1014 * t851 - t1018 * t853;
t1096 = t1008 * t999;
t980 = -t1019 + t1096;
t921 = -t1016 * t980 + t1089;
t886 = t1013 * t921 + t1017 * t1067;
t889 = -t1013 * t1067 + t1017 * t921;
t1146 = t1014 * t889 + t1018 * t886;
t1145 = t1014 * t886 - t1018 * t889;
t1127 = t1014 * t966 - t1018 * t968;
t1144 = pkin(5) * t1127 + t1014 * t938 + t1018 * t1128;
t1011 = sin(qJ(5));
t1000 = qJDD(3) - qJDD(5);
t1015 = cos(qJ(5));
t941 = (-t1011 * t1012 - t1015 * t1016) * t1004;
t943 = -t1011 * t1069 + t1015 * t1070;
t1102 = t943 * t941;
t1129 = -t1000 + t1102;
t1143 = t1011 * t1129;
t1142 = t1015 * t1129;
t985 = g(1) * t1014 - t1018 * g(2);
t1031 = qJDD(1) * pkin(1) + t985;
t1020 = qJD(1) ^ 2;
t986 = g(1) * t1018 + g(2) * t1014;
t973 = -pkin(1) * t1020 - t986;
t906 = t1013 * t973 - t1017 * t1031;
t907 = t1013 * t1031 + t1017 * t973;
t1054 = t1013 * t906 + t1017 * t907;
t844 = t1013 * t907 - t1017 * t906;
t1076 = t1018 * t844;
t1140 = t1014 * t1054 + t1076;
t1084 = t1014 * t844;
t1139 = t1018 * t1054 - t1084;
t1138 = -pkin(2) * t957 - pkin(7) * t923;
t1135 = pkin(2) * t917;
t1134 = pkin(7) * t917;
t958 = t991 + t1068;
t1132 = t958 + t991;
t1107 = g(3) * t1016;
t1028 = -qJDD(3) * pkin(3) - t1019 * qJ(4) + qJDD(4) + t1107;
t892 = -t999 * pkin(2) + t1001 * pkin(7) + t907;
t1037 = -pkin(3) * t1016 - qJ(4) * t1012;
t956 = t1037 * t1004;
t1056 = t1004 * t956 + t892;
t829 = t1056 * t1012 + t1028;
t974 = qJDD(3) + t984;
t981 = -t1019 - t1096;
t1131 = pkin(3) * t974 + qJ(4) * t981 - t829;
t1002 = qJD(3) - qJD(5);
t1075 = t941 * t1002;
t1052 = -t990 + t1067;
t849 = t941 * qJD(5) - t1011 * t1052 + t1015 * t958;
t1130 = t849 - t1075;
t869 = t1012 * t892 + t1107;
t870 = -t1012 * g(3) + t1016 * t892;
t800 = t1012 * t869 + t1016 * t870;
t1032 = -qJD(3) * pkin(4) - pkin(8) * t1070;
t1035 = -t1019 * pkin(3) + qJDD(3) * qJ(4) + t956 * t1069 + t870;
t1073 = qJD(4) * qJD(3);
t994 = 0.2e1 * t1073;
t827 = t994 + t1035;
t790 = -pkin(4) * t1096 - pkin(8) * t1052 + qJD(3) * t1032 + t827;
t792 = -qJDD(3) * pkin(4) + (-t958 + t991) * pkin(8) + (-pkin(4) * t1079 + t1056) * t1012 + t1028;
t734 = t1011 * t790 - t1015 * t792;
t735 = t1011 * t792 + t1015 * t790;
t691 = t1011 * t735 - t1015 * t734;
t913 = t1012 * t980 + t1080;
t1119 = pkin(3) + pkin(4);
t939 = t941 ^ 2;
t998 = t1002 ^ 2;
t876 = -t998 - t939;
t811 = t1011 * t876 + t1142;
t812 = t1015 * t876 - t1143;
t1123 = qJ(4) * t812 - t1119 * t811 + t734;
t881 = t1102 + t1000;
t1093 = t1011 * t881;
t940 = t943 ^ 2;
t925 = -t940 - t998;
t833 = t1015 * t925 + t1093;
t1083 = t1015 * t881;
t834 = -t1011 * t925 + t1083;
t1122 = qJ(4) * t834 - t1119 * t833 + t735;
t1055 = t1011 * t958 + t1015 * t1052;
t822 = (qJD(5) + t1002) * t943 + t1055;
t826 = t1075 + t849;
t756 = -t1011 * t822 - t1015 * t826;
t758 = t1011 * t826 - t1015 * t822;
t1121 = qJ(4) * t758 - t1119 * t756;
t692 = t1011 * t734 + t1015 * t735;
t1120 = qJ(4) * t692 - t1119 * t691;
t963 = t1016 * t974;
t914 = t1012 * t981 + t963;
t1118 = pkin(2) * t914;
t1090 = t1012 * t974;
t920 = t1016 * t981 - t1090;
t863 = t1013 * t920 + t1017 * t959;
t866 = -t1013 * t959 + t1017 * t920;
t1115 = pkin(5) * (t1014 * t866 + t1018 * t863);
t1065 = t1007 + t1008;
t962 = t1065 * t1001;
t970 = t1065 * t999;
t901 = t1013 * t962 + t1017 * t970;
t903 = -t1013 * t970 + t1017 * t962;
t1114 = pkin(5) * (t1014 * t903 + t1018 * t901);
t1113 = pkin(6) * t863;
t1112 = pkin(6) * t901;
t1111 = pkin(7) * t914;
t1110 = pkin(8) * t691;
t1109 = pkin(8) * t692;
t891 = -t1001 * pkin(2) - t999 * pkin(7) + t906;
t1101 = -pkin(2) * t891 + pkin(7) * t800;
t1100 = pkin(2) * t959 + pkin(7) * t920;
t1099 = pkin(2) * t970 + pkin(7) * t962;
t1098 = t1002 * t943;
t1024 = -t1052 * pkin(3) - t1132 * qJ(4) + t891;
t802 = (pkin(3) * qJD(3) - 0.2e1 * qJD(4)) * t1070 + t1024;
t777 = -pkin(4) * t1052 + pkin(8) * t1096 - t1032 * t1070 + t802;
t1094 = t1011 * t777;
t873 = t1012 * t891;
t1091 = t1012 * t959;
t773 = t1015 * t777;
t874 = t1016 * t891;
t1082 = t1016 * t957;
t1074 = qJD(3) * t1004;
t1072 = t1002 * t1011;
t1071 = t1002 * t1015;
t1064 = t1138 + t873;
t1063 = -t874 + t1100;
t1062 = t1013 * t1102;
t1061 = t1017 * t1102;
t1060 = -pkin(1) * t914 + pkin(6) * t866;
t1059 = -pkin(8) * t833 - t773;
t1053 = -t1014 * t985 - t1018 * t986;
t1029 = -pkin(8) * t758 - t692;
t854 = -t939 - t940;
t682 = t1119 * t854 + t1029;
t1030 = -pkin(8) * t756 - t691;
t686 = qJ(4) * t854 + t1030;
t712 = t1012 * t756 + t1016 * t758;
t1051 = pkin(2) * t854 + pkin(7) * t712 + t1012 * t686 + t1016 * t682;
t676 = t1012 * t691 + t1016 * t692;
t683 = -t1119 * t777 - t1109;
t690 = -qJ(4) * t777 - t1110;
t1050 = -pkin(2) * t777 + pkin(7) * t676 + t1012 * t690 + t1016 * t683;
t1038 = -pkin(8) * t812 - t773;
t821 = (qJD(5) - t1002) * t943 + t1055;
t697 = t1119 * t821 + t1038;
t1040 = -pkin(8) * t811 - t1094;
t715 = qJ(4) * t821 + t1040;
t749 = t1012 * t811 + t1016 * t812;
t1049 = pkin(2) * t821 + pkin(7) * t749 + t1012 * t715 + t1016 * t697;
t1039 = -pkin(8) * t834 + t1094;
t702 = t1119 * t1130 + t1039;
t717 = qJ(4) * t1130 + t1059;
t766 = t1012 * t833 + t1016 * t834;
t1048 = pkin(2) * t1130 + pkin(7) * t766 + t1012 * t717 + t1016 * t702;
t805 = pkin(3) * t970 + t827;
t806 = qJ(4) * t970 + t829;
t1047 = t1012 * t806 + t1016 * t805 + t1099;
t1046 = t1099 + t800;
t1045 = t1013 * t984;
t1044 = t1017 * t984;
t977 = qJDD(1) * t1018 - t1014 * t1020;
t1042 = -pkin(5) * t977 - g(3) * t1014;
t1041 = -pkin(3) * t829 + qJ(4) * t827;
t1036 = pkin(3) * t1012 - qJ(4) * t1016;
t798 = t1012 * t870 - t1016 * t869;
t895 = t1082 + t1091;
t1033 = t1014 * t986 - t1018 * t985;
t1022 = 0.2e1 * qJD(4) * t1070 - t1024;
t789 = -pkin(3) * t990 + qJ(4) * t957 + t1022;
t1026 = pkin(3) * t1082 + t1012 * t789 - t1138;
t791 = (t959 - t990) * pkin(3) + t1022;
t1025 = qJ(4) * t1091 + t1016 * t791 + t1100;
t763 = t1012 * t829 + t1016 * t827;
t1023 = pkin(7) * t763 + (-pkin(2) + t1037) * t802;
t1021 = pkin(3) * t978 + qJ(4) * t975 + t1035;
t979 = -t1019 + t1097;
t976 = qJDD(1) * t1014 + t1018 * t1020;
t954 = -pkin(5) * t976 + g(3) * t1018;
t953 = t1036 * t1001;
t952 = t1065 * t1074;
t931 = -t940 + t998;
t930 = t939 - t998;
t929 = qJDD(3) * t1013 + t1017 * t952;
t928 = -qJDD(3) * t1017 + t1013 * t952;
t927 = -t1007 * t1074 + t1016 * t958;
t926 = -t1008 * t1074 - t1012 * t1052;
t922 = t1012 * t979 + t963;
t916 = -t1016 * t979 + t1090;
t909 = t1132 * t1012;
t908 = (t1052 - t990) * t1016;
t900 = pkin(1) * t901;
t899 = pkin(6) * t903;
t893 = t940 - t939;
t890 = t1013 * t1068 + t1017 * t922;
t887 = t1013 * t922 - t1017 * t1068;
t880 = t1017 * t927 - t1045;
t879 = t1017 * t926 + t1045;
t878 = t1013 * t927 + t1044;
t877 = t1013 * t926 - t1044;
t872 = -pkin(1) * t966 - t907;
t871 = pkin(1) * t968 - t906;
t862 = (-t1011 * t943 - t1015 * t941) * t1002;
t861 = (-t1011 * t941 + t1015 * t943) * t1002;
t860 = pkin(1) * t863;
t856 = -t1014 * t928 + t1018 * t929;
t855 = t1014 * t929 + t1018 * t928;
t848 = -qJD(5) * t943 - t1055;
t842 = pkin(1) * t844;
t841 = pkin(1) * g(3) + pkin(6) * t1054;
t840 = t1015 * t930 + t1093;
t839 = -t1011 * t931 + t1142;
t838 = t1011 * t930 - t1083;
t837 = t1015 * t931 + t1143;
t836 = t874 + t1134;
t835 = t873 - t1111;
t832 = t870 + t1135;
t831 = t869 - t1118;
t828 = pkin(5) * (-t1014 * t901 + t1018 * t903);
t818 = t1015 * t849 + t943 * t1072;
t817 = t1011 * t849 - t943 * t1071;
t816 = -t1011 * t848 + t941 * t1071;
t815 = -t1015 * t848 - t941 * t1072;
t814 = -t1014 * t887 + t1018 * t890;
t813 = t1014 * t890 + t1018 * t887;
t810 = -t1014 * t878 + t1018 * t880;
t809 = -t1014 * t877 + t1018 * t879;
t808 = t1014 * t880 + t1018 * t878;
t807 = t1014 * t879 + t1018 * t877;
t795 = pkin(5) * (-t1014 * t863 + t1018 * t866);
t794 = t1012 * t861 + t1016 * t862;
t793 = t1012 * t862 - t1016 * t861;
t785 = t1000 * t1013 + t1017 * t794;
t784 = -t1000 * t1017 + t1013 * t794;
t781 = -t1118 - t1131;
t780 = -t1021 - 0.2e1 * t1073 - t1135;
t779 = t860 + t1063;
t778 = t1064 - t1154;
t775 = -t1017 * t798 - t1112;
t774 = -t1013 * t798 + t899;
t772 = t1013 * t891 + t1017 * t800;
t771 = t1013 * t800 - t1017 * t891;
t770 = t1012 * t838 + t1016 * t840;
t769 = t1012 * t837 + t1016 * t839;
t768 = t1012 * t840 - t1016 * t838;
t767 = t1012 * t839 - t1016 * t837;
t765 = t1012 * t834 - t1016 * t833;
t762 = t1012 * t827 - t1016 * t829;
t760 = -pkin(3) * t1092 + t1016 * t789 - t1134;
t759 = qJ(4) * t1081 - t1012 * t791 - t1111;
t757 = -t1011 * t1130 - t1015 * t821;
t755 = -t1011 * t821 + t1015 * t1130;
t754 = t900 + t1046;
t753 = t1012 * t817 + t1016 * t818;
t752 = -t1012 * t815 + t1016 * t816;
t751 = t1012 * t818 - t1016 * t817;
t750 = t1012 * t816 + t1016 * t815;
t748 = t1012 * t812 - t1016 * t811;
t746 = -t1012 * t805 + t1016 * t806;
t745 = -t1013 * t832 + t1017 * t836 + t1153;
t744 = -t1013 * t831 + t1017 * t835 - t1113;
t743 = t1017 * t753 + t1062;
t742 = t1017 * t752 - t1062;
t741 = t1013 * t753 - t1061;
t740 = t1013 * t752 + t1061;
t739 = t1013 * t836 + t1017 * t832 - t1152;
t738 = t1013 * t835 + t1017 * t831 + t1060;
t737 = t1026 + t1154;
t736 = t1025 + t860;
t733 = t1013 * t822 + t1017 * t770;
t732 = -t1013 * t826 + t1017 * t769;
t731 = t1013 * t770 - t1017 * t822;
t730 = t1013 * t769 + t1017 * t826;
t727 = -t1013 * t1130 + t1017 * t766;
t726 = t1013 * t766 + t1017 * t1130;
t725 = -t1013 * t953 + t1017 * t746 - t1112;
t724 = t1013 * t746 + t1017 * t953 + t899;
t723 = t900 + t1047;
t722 = t1013 * t802 + t1017 * t763;
t721 = t1013 * t763 - t1017 * t802;
t720 = -t1013 * t821 + t1017 * t749;
t719 = t1013 * t749 + t1017 * t821;
t718 = pkin(1) * t771 + t1101;
t713 = -pkin(2) * t762 - t1041;
t711 = t1012 * t755 + t1016 * t757;
t710 = t1012 * t758 - t1016 * t756;
t709 = t1012 * t757 - t1016 * t755;
t707 = -t1013 * t781 + t1017 * t759 - t1113;
t706 = -t1013 * t780 + t1017 * t760 - t1153;
t705 = -pkin(6) * t771 + (pkin(2) * t1013 - pkin(7) * t1017) * t798;
t704 = -pkin(7) * t762 + t1036 * t802;
t703 = t1013 * t759 + t1017 * t781 + t1060;
t701 = t1013 * t760 + t1017 * t780 + t1152;
t699 = -t1013 * t893 + t1017 * t711;
t698 = t1013 * t711 + t1017 * t893;
t695 = -t1013 * t854 + t1017 * t712;
t694 = t1013 * t712 + t1017 * t854;
t693 = pkin(6) * t772 + (-pkin(2) * t1017 - pkin(7) * t1013 - pkin(1)) * t798;
t689 = -pkin(2) * t765 - t1122;
t687 = -pkin(2) * t748 - t1123;
t684 = pkin(1) * t721 + t1023;
t679 = -pkin(2) * t710 - t1121;
t678 = -pkin(7) * t765 - t1012 * t702 + t1016 * t717;
t677 = -pkin(7) * t748 - t1012 * t697 + t1016 * t715;
t675 = t1012 * t692 - t1016 * t691;
t674 = -pkin(6) * t721 - t1013 * t713 + t1017 * t704;
t672 = t1013 * t777 + t1017 * t676;
t671 = t1013 * t676 - t1017 * t777;
t670 = -pkin(1) * t762 + pkin(6) * t722 + t1013 * t704 + t1017 * t713;
t669 = pkin(1) * t726 + t1048;
t668 = pkin(1) * t719 + t1049;
t667 = -pkin(6) * t726 - t1013 * t689 + t1017 * t678;
t666 = -pkin(7) * t710 - t1012 * t682 + t1016 * t686;
t665 = -pkin(1) * t765 + pkin(6) * t727 + t1013 * t678 + t1017 * t689;
t664 = -pkin(6) * t719 - t1013 * t687 + t1017 * t677;
t663 = -pkin(1) * t748 + pkin(6) * t720 + t1013 * t677 + t1017 * t687;
t662 = pkin(1) * t694 + t1051;
t661 = -pkin(7) * t675 - t1012 * t683 + t1016 * t690;
t660 = -pkin(2) * t675 - t1120;
t659 = -pkin(6) * t694 - t1013 * t679 + t1017 * t666;
t658 = -pkin(1) * t710 + pkin(6) * t695 + t1013 * t666 + t1017 * t679;
t657 = pkin(1) * t671 + t1050;
t656 = -pkin(6) * t671 - t1013 * t660 + t1017 * t661;
t655 = -pkin(1) * t675 + pkin(6) * t672 + t1013 * t661 + t1017 * t660;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t977, 0, -t976, 0, t1042, -t954, t1033, pkin(5) * t1033, 0, 0, -t1127, 0, -t1034, 0, t1144, t1149, -t1140, -pkin(5) * t1140 - pkin(6) * t1076 - t1014 * t841, t810, t1147, t814, t809, t1145, t856, -t1014 * t738 + t1018 * t744 - t1115, -t1014 * t739 + t1018 * t745 + t1155, -t1014 * t774 + t1018 * t775 - t1114, t1018 * t705 - t1014 * t693 - pkin(5) * (t1014 * t772 + t1018 * t771), t810, t814, -t1147, t856, -t1145, t809, -t1014 * t703 + t1018 * t707 - t1115, -t1014 * t724 + t1018 * t725 - t1114, -t1014 * t701 + t1018 * t706 - t1155, t1018 * t674 - t1014 * t670 - pkin(5) * (t1014 * t722 + t1018 * t721), -t1014 * t741 + t1018 * t743, -t1014 * t698 + t1018 * t699, -t1014 * t730 + t1018 * t732, -t1014 * t740 + t1018 * t742, -t1014 * t731 + t1018 * t733, -t1014 * t784 + t1018 * t785, t1018 * t664 - t1014 * t663 - pkin(5) * (t1014 * t720 + t1018 * t719), t1018 * t667 - t1014 * t665 - pkin(5) * (t1014 * t727 + t1018 * t726), t1018 * t659 - t1014 * t658 - pkin(5) * (t1014 * t695 + t1018 * t694), t1018 * t656 - t1014 * t655 - pkin(5) * (t1014 * t672 + t1018 * t671); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t976, 0, t977, 0, t954, t1042, t1053, pkin(5) * t1053, 0, 0, t1034, 0, -t1127, 0, -t1149, t1144, t1139, pkin(5) * t1139 - pkin(6) * t1084 + t1018 * t841, t808, -t1148, t813, t807, -t1146, t855, t1014 * t744 + t1018 * t738 + t795, t1014 * t745 + t1018 * t739 + t1156, t1014 * t775 + t1018 * t774 + t828, t1014 * t705 + t1018 * t693 + pkin(5) * (-t1014 * t771 + t1018 * t772), t808, t813, t1148, t855, t1146, t807, t1014 * t707 + t1018 * t703 + t795, t1014 * t725 + t1018 * t724 + t828, t1014 * t706 + t1018 * t701 - t1156, t1014 * t674 + t1018 * t670 + pkin(5) * (-t1014 * t721 + t1018 * t722), t1014 * t743 + t1018 * t741, t1014 * t699 + t1018 * t698, t1014 * t732 + t1018 * t730, t1014 * t742 + t1018 * t740, t1014 * t733 + t1018 * t731, t1014 * t785 + t1018 * t784, t1014 * t664 + t1018 * t663 + pkin(5) * (-t1014 * t719 + t1018 * t720), t1014 * t667 + t1018 * t665 + pkin(5) * (-t1014 * t726 + t1018 * t727), t1014 * t659 + t1018 * t658 + pkin(5) * (-t1014 * t694 + t1018 * t695), t1014 * t656 + t1018 * t655 + pkin(5) * (-t1014 * t671 + t1018 * t672); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t985, t986, 0, 0, 0, 0, 0, 0, 0, t1001, t871, t872, 0, t842, t909, t895, t916, t908, t913, 0, t779, t778, t754, t718, t909, t916, -t895, 0, -t913, t908, t736, t723, t737, t684, t751, t709, t767, t750, t768, t793, t668, t669, t662, t657; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1020, 0, 0, -g(3), -t985, 0, 0, 0, t968, 0, -t966, 0, t1128, t938, -t844, -pkin(6) * t844, t880, -t853, t890, t879, -t889, t929, t744, t745, t775, t705, t880, t890, t853, t929, t889, t879, t707, t725, t706, t674, t743, t699, t732, t742, t733, t785, t664, t667, t659, t656; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1020, 0, qJDD(1), 0, g(3), 0, -t986, 0, 0, 0, t966, 0, t968, 0, -t938, t1128, t1054, t841, t878, -t851, t887, t877, -t886, t928, t738, t739, t774, t693, t878, t887, t851, t928, t886, t877, t703, t724, t701, t670, t741, t698, t730, t740, t731, t784, t663, t665, t658, t655; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t985, t986, 0, 0, 0, 0, 0, 0, 0, t1001, t871, t872, 0, t842, t909, t895, t916, t908, t913, 0, t779, t778, t754, t718, t909, t916, -t895, 0, -t913, t908, t736, t723, t737, t684, t751, t709, t767, t750, t768, t793, t668, t669, t662, t657; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1001, 0, -t999, 0, 0, -g(3), t906, 0, t927, -t898, t922, t926, -t921, t952, t835, t836, -t798, -pkin(7) * t798, t927, t922, t898, t952, t921, t926, t759, t746, t760, t704, t753, t711, t769, t752, t770, t794, t677, t678, t666, t661; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t999, 0, t1001, 0, g(3), 0, t907, 0, t984, -t971, -t1068, -t984, -t1067, -qJDD(3), t831, t832, 0, -pkin(2) * t798, t984, -t1068, t971, -qJDD(3), t1067, -t984, t781, t953, t780, t713, -t1102, t893, t826, t1102, -t822, -t1000, t687, t689, t679, t660; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1001, -t906, -t907, 0, 0, t909, t895, t916, t908, t913, 0, t1063, t1064, t1046, t1101, t909, t916, -t895, 0, -t913, t908, t1025, t1047, t1026, t1023, t751, t709, t767, t750, t768, t793, t1049, t1048, t1051, t1050; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t958, t959, t974, -t991, t980, t991, 0, t891, t869, 0, t958, t974, -t959, t991, -t980, -t991, qJ(4) * t959, t806, t789, -qJ(4) * t802, t818, t757, t839, t816, t840, t862, t715, t717, t686, t690; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t990, t957, -t979, t1052, t975, -t990, -t891, 0, t870, 0, t990, -t979, -t957, -t990, -t975, t1052, t791, t805, pkin(3) * t957, -pkin(3) * t802, -t817, -t755, -t837, t815, -t838, -t861, t697, t702, t682, t683; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t984, t971, t1068, t984, t1067, qJDD(3), -t869, -t870, 0, 0, -t984, t1068, -t971, qJDD(3), -t1067, t984, t1131, -t953, t1021 + t994, t1041, t1102, -t893, -t826, -t1102, t822, t1000, t1123, t1122, t1121, t1120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t958, t974, -t959, t991, -t980, -t991, 0, t829, -t802, 0, t818, t757, t839, t816, t840, t862, t1040, t1059, t1030, -t1110; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t984, t1068, -t971, qJDD(3), -t1067, t984, -t829, 0, t827, 0, t1102, -t893, -t826, -t1102, t822, t1000, -pkin(4) * t811 + t734, -pkin(4) * t833 + t735, -pkin(4) * t756, -pkin(4) * t691; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t990, t979, t957, t990, t975, -t1052, t802, -t827, 0, 0, t817, t755, t837, -t815, t838, t861, -pkin(4) * t821 - t1038, -pkin(4) * t1130 - t1039, -pkin(4) * t854 - t1029, pkin(4) * t777 + t1109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t849, -t821, t1129, t1075, t930, -t1075, 0, -t777, t734, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1098, t1130, t931, t848, -t881, t1098, t777, 0, t735, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1102, t893, t826, t1102, -t822, -t1000, -t734, -t735, 0, 0;];
m_new_reg = t1;
