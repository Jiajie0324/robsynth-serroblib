% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRRPR8
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d5,theta1,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:43
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRRPR8_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPR8_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPR8_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRPR8_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRPR8_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRRPR8_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:43:00
% EndTime: 2019-12-31 17:43:02
% DurationCPUTime: 1.75s
% Computational Cost: add. (5595->133), mult. (7682->191), div. (0->0), fcn. (5324->10), ass. (0->105)
t948 = qJD(2) + qJD(3);
t946 = t948 ^ 2;
t947 = qJDD(2) + qJDD(3);
t952 = sin(pkin(9));
t954 = cos(pkin(9));
t919 = t952 * t946 - t954 * t947;
t957 = sin(qJ(3));
t960 = cos(qJ(3));
t966 = -t954 * t946 - t952 * t947;
t897 = t960 * t919 - t957 * t966;
t958 = sin(qJ(2));
t961 = cos(qJ(2));
t977 = t957 * t919 + t960 * t966;
t980 = t958 * t897 + t961 * t977;
t879 = t961 * t897 - t958 * t977;
t924 = t957 * t946 - t960 * t947;
t965 = -t960 * t946 - t957 * t947;
t976 = t958 * t924 + t961 * t965;
t903 = t961 * t924 - t958 * t965;
t953 = sin(pkin(8));
t955 = cos(pkin(8));
t934 = t953 * g(1) - t955 * g(2);
t971 = t953 * t934;
t956 = sin(qJ(5));
t970 = t956 * t947;
t959 = cos(qJ(5));
t969 = t959 * t947;
t935 = -t955 * g(1) - t953 * g(2);
t951 = -g(3) + qJDD(1);
t913 = -t958 * t935 + t961 * t951;
t911 = qJDD(2) * pkin(2) + t913;
t914 = t961 * t935 + t958 * t951;
t963 = qJD(2) ^ 2;
t912 = -t963 * pkin(2) + t914;
t888 = t957 * t911 + t960 * t912;
t886 = -t946 * pkin(3) + t888;
t887 = t960 * t911 - t957 * t912;
t964 = t947 * pkin(3) + t887;
t870 = t954 * t886 + t952 * t964;
t949 = t956 ^ 2;
t950 = t959 ^ 2;
t968 = t949 + t950;
t967 = qJD(5) * t948;
t869 = -t952 * t886 + t954 * t964;
t962 = qJD(5) ^ 2;
t938 = t956 * t946 * t959;
t937 = -t950 * t946 - t962;
t936 = -t949 * t946 - t962;
t933 = t961 * qJDD(2) - t958 * t963;
t932 = -t958 * qJDD(2) - t961 * t963;
t931 = -qJDD(4) + t934;
t930 = -qJDD(5) + t938;
t929 = qJDD(5) + t938;
t927 = t955 * t934;
t926 = t968 * t946;
t921 = t968 * t947;
t916 = -0.2e1 * t956 * t967 + t969;
t915 = 0.2e1 * t959 * t967 + t970;
t908 = t959 * t930 - t956 * t936;
t907 = -t956 * t929 + t959 * t937;
t906 = t956 * t930 + t959 * t936;
t905 = t959 * t929 + t956 * t937;
t900 = t954 * t921 - t952 * t926;
t899 = t952 * t921 + t954 * t926;
t894 = -t958 * t913 + t961 * t914;
t893 = t961 * t913 + t958 * t914;
t892 = t954 * t908 + t952 * t915;
t891 = t954 * t907 - t952 * t916;
t890 = t952 * t908 - t954 * t915;
t889 = t952 * t907 + t954 * t916;
t882 = -t957 * t899 + t960 * t900;
t881 = t960 * t899 + t957 * t900;
t876 = -t957 * t890 + t960 * t892;
t875 = -t957 * t889 + t960 * t891;
t874 = t960 * t890 + t957 * t892;
t873 = t960 * t889 + t957 * t891;
t872 = -t957 * t887 + t960 * t888;
t871 = t960 * t887 + t957 * t888;
t868 = -t946 * pkin(4) + t947 * pkin(7) + t870;
t867 = -t947 * pkin(4) - t946 * pkin(7) - t869;
t866 = t959 * t868 - t956 * t931;
t865 = -t956 * t868 - t959 * t931;
t864 = -t958 * t881 + t961 * t882;
t863 = t961 * t881 + t958 * t882;
t862 = -t958 * t874 + t961 * t876;
t861 = -t958 * t873 + t961 * t875;
t860 = t961 * t874 + t958 * t876;
t859 = t961 * t873 + t958 * t875;
t858 = -t958 * t871 + t961 * t872;
t857 = t961 * t871 + t958 * t872;
t856 = -t952 * t869 + t954 * t870;
t855 = t954 * t869 + t952 * t870;
t854 = -t956 * t865 + t959 * t866;
t853 = t959 * t865 + t956 * t866;
t852 = t954 * t854 + t952 * t867;
t851 = t952 * t854 - t954 * t867;
t850 = -t957 * t855 + t960 * t856;
t849 = t960 * t855 + t957 * t856;
t848 = -t957 * t851 + t960 * t852;
t847 = t960 * t851 + t957 * t852;
t846 = -t958 * t849 + t961 * t850;
t845 = t961 * t849 + t958 * t850;
t844 = -t958 * t847 + t961 * t848;
t843 = t961 * t847 + t958 * t848;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t955 * t935 - t971, 0, 0, 0, 0, 0, 0, t955 * t932, -t955 * t933, 0, t955 * t894 - t971, 0, 0, 0, 0, 0, 0, t955 * t976, t955 * t903, 0, t955 * t858 - t971, 0, 0, 0, 0, 0, 0, t955 * t980, t955 * t879, 0, t955 * t846 - t953 * t931, 0, 0, 0, 0, 0, 0, t955 * t861 + t953 * t905, t955 * t862 + t953 * t906, t955 * t864, t955 * t844 + t953 * t853; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t953 * t935 + t927, 0, 0, 0, 0, 0, 0, t953 * t932, -t953 * t933, 0, t953 * t894 + t927, 0, 0, 0, 0, 0, 0, t953 * t976, t953 * t903, 0, t953 * t858 + t927, 0, 0, 0, 0, 0, 0, t953 * t980, t953 * t879, 0, t953 * t846 + t955 * t931, 0, 0, 0, 0, 0, 0, t953 * t861 - t955 * t905, t953 * t862 - t955 * t906, t953 * t864, t953 * t844 - t955 * t853; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t951, 0, 0, 0, 0, 0, 0, t933, t932, 0, t893, 0, 0, 0, 0, 0, 0, -t903, t976, 0, t857, 0, 0, 0, 0, 0, 0, -t879, t980, 0, t845, 0, 0, 0, 0, 0, 0, t859, t860, t863, t843; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t935, 0, 0, 0, 0, 0, 0, t932, -t933, 0, t894, 0, 0, 0, 0, 0, 0, t976, t903, 0, t858, 0, 0, 0, 0, 0, 0, t980, t879, 0, t846, 0, 0, 0, 0, 0, 0, t861, t862, t864, t844; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t934, 0, 0, 0, 0, 0, 0, 0, 0, 0, t934, 0, 0, 0, 0, 0, 0, 0, 0, 0, t934, 0, 0, 0, 0, 0, 0, 0, 0, 0, t931, 0, 0, 0, 0, 0, 0, -t905, -t906, 0, -t853; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t951, 0, 0, 0, 0, 0, 0, t933, t932, 0, t893, 0, 0, 0, 0, 0, 0, -t903, t976, 0, t857, 0, 0, 0, 0, 0, 0, -t879, t980, 0, t845, 0, 0, 0, 0, 0, 0, t859, t860, t863, t843; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t963, -qJDD(2), 0, t914, 0, 0, 0, 0, 0, 0, t965, t924, 0, t872, 0, 0, 0, 0, 0, 0, t977, t897, 0, t850, 0, 0, 0, 0, 0, 0, t875, t876, t882, t848; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t963, 0, t913, 0, 0, 0, 0, 0, 0, -t924, t965, 0, t871, 0, 0, 0, 0, 0, 0, -t897, t977, 0, t849, 0, 0, 0, 0, 0, 0, t873, t874, t881, t847; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t934, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t934, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t931, 0, 0, 0, 0, 0, 0, t905, t906, 0, t853; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t946, -t947, 0, t888, 0, 0, 0, 0, 0, 0, t966, t919, 0, t856, 0, 0, 0, 0, 0, 0, t891, t892, t900, t852; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t947, -t946, 0, t887, 0, 0, 0, 0, 0, 0, -t919, t966, 0, t855, 0, 0, 0, 0, 0, 0, t889, t890, t899, t851; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t934, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t931, 0, 0, 0, 0, 0, 0, t905, t906, 0, t853; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t946, -t947, 0, t870, 0, 0, 0, 0, 0, 0, t907, t908, t921, t854; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t947, -t946, 0, t869, 0, 0, 0, 0, 0, 0, t916, -t915, t926, -t867; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t931, 0, 0, 0, 0, 0, 0, t905, t906, 0, t853; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t937, t930, t969, t866; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t929, t936, -t970, t865; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t916, t915, -t926, t867;];
f_new_reg = t1;
