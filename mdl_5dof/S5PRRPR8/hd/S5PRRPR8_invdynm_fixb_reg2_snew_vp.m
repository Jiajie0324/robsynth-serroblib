% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PRRPR8
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d5,theta1,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:43
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PRRPR8_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPR8_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPR8_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRPR8_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRPR8_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRRPR8_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:42:52
% EndTime: 2019-12-31 17:43:00
% DurationCPUTime: 8.58s
% Computational Cost: add. (35188->420), mult. (48153->568), div. (0->0), fcn. (32648->10), ass. (0->269)
t742 = qJD(2) + qJD(3);
t740 = t742 ^ 2;
t741 = qJDD(2) + qJDD(3);
t746 = sin(pkin(9));
t748 = cos(pkin(9));
t701 = t748 * t740 + t746 * t741;
t704 = t746 * t740 - t748 * t741;
t751 = sin(qJ(3));
t754 = cos(qJ(3));
t637 = t754 * t701 - t751 * t704;
t747 = sin(pkin(8));
t749 = cos(pkin(8));
t722 = t747 * g(1) - t749 * g(2);
t718 = -qJDD(4) + t722;
t654 = qJ(4) * t701 - t748 * t718;
t827 = qJ(4) * t704 - t746 * t718;
t577 = pkin(6) * t637 + t754 * t654 - t751 * t827;
t641 = t751 * t701 + t754 * t704;
t752 = sin(qJ(2));
t755 = cos(qJ(2));
t596 = t755 * t637 - t752 * t641;
t835 = pkin(6) * t641 + t751 * t654 + t754 * t827;
t520 = pkin(5) * t596 + t755 * t577 - t752 * t835;
t600 = t752 * t637 + t755 * t641;
t842 = pkin(5) * t600 + t752 * t577 + t755 * t835;
t723 = t749 * g(1) + t747 * g(2);
t745 = g(3) - qJDD(1);
t686 = -t752 * t723 + t755 * t745;
t684 = qJDD(2) * pkin(2) - t686;
t687 = -t755 * t723 - t752 * t745;
t757 = qJD(2) ^ 2;
t685 = -t757 * pkin(2) + t687;
t617 = t751 * t684 + t754 * t685;
t612 = -t740 * pkin(3) + t617;
t766 = t754 * t684 - t751 * t685;
t758 = t741 * pkin(3) + t766;
t568 = t746 * t612 - t748 * t758;
t569 = t748 * t612 + t746 * t758;
t782 = t746 * t568 + t748 * t569;
t529 = t748 * t568 - t746 * t569;
t801 = t754 * t529;
t499 = -t751 * t782 + t801;
t806 = t751 * t529;
t829 = t754 * t782 + t806;
t839 = t752 * t499 + t755 * t829;
t484 = t755 * t499 - t752 * t829;
t706 = t754 * t740 + t751 * t741;
t709 = t751 * t740 - t754 * t741;
t645 = t755 * t706 - t752 * t709;
t664 = pkin(6) * t706 - t754 * t722;
t828 = pkin(6) * t709 - t751 * t722;
t587 = pkin(5) * t645 + t755 * t664 - t752 * t828;
t649 = t752 * t706 + t755 * t709;
t836 = pkin(5) * t649 + t752 * t664 + t755 * t828;
t781 = t754 * t617 - t751 * t766;
t572 = -t751 * t617 - t754 * t766;
t799 = t755 * t572;
t533 = -t752 * t781 + t799;
t804 = t752 * t572;
t830 = t755 * t781 + t804;
t561 = -t740 * pkin(4) + t741 * pkin(7) + t569;
t750 = sin(qJ(5));
t753 = cos(qJ(5));
t555 = t750 * t561 + t753 * t718;
t556 = t753 * t561 - t750 * t718;
t516 = t750 * t555 + t753 * t556;
t713 = t749 * t722;
t819 = -t747 * t723 + t713;
t818 = pkin(2) * t572;
t743 = t750 ^ 2;
t817 = t743 * t740;
t815 = t747 * t722;
t813 = t747 * t741;
t812 = t747 * t745;
t810 = t749 * t745;
t560 = -t741 * pkin(4) - t740 * pkin(7) + t568;
t557 = t750 * t560;
t728 = t750 * t740 * t753;
t716 = qJDD(5) + t728;
t809 = t750 * t716;
t717 = qJDD(5) - t728;
t808 = t750 * t717;
t807 = t750 * t741;
t558 = t753 * t560;
t803 = t753 * t716;
t802 = t753 * t717;
t732 = t753 * t741;
t798 = -pkin(4) * t560 + pkin(7) * t516;
t744 = t753 ^ 2;
t797 = t743 + t744;
t796 = qJD(5) * t742;
t756 = qJD(5) ^ 2;
t725 = -t756 - t817;
t672 = -t750 * t725 - t802;
t730 = t753 * t796;
t697 = 0.2e1 * t730 + t807;
t795 = -pkin(4) * t697 + pkin(7) * t672 + t557;
t733 = t744 * t740;
t727 = -t733 - t756;
t670 = t753 * t727 - t809;
t791 = t750 * t796;
t699 = t732 - 0.2e1 * t791;
t794 = pkin(4) * t699 + pkin(7) * t670 - t558;
t504 = t746 * t516 - t748 * t560;
t793 = pkin(3) * t504 + t798;
t792 = -pkin(3) * t701 - t569;
t526 = pkin(3) * t529;
t790 = -pkin(2) * t499 - t526;
t705 = t797 * t741;
t711 = t733 + t817;
t643 = t746 * t705 + t748 * t711;
t644 = t748 * t705 - t746 * t711;
t602 = t754 * t643 + t751 * t644;
t603 = -t751 * t643 + t754 * t644;
t549 = t755 * t602 + t752 * t603;
t774 = pkin(4) * t711 + pkin(7) * t705 + t516;
t767 = pkin(3) * t643 + t774;
t760 = pkin(2) * t602 + t767;
t494 = -pkin(1) * t549 - t760;
t550 = -t752 * t602 + t755 * t603;
t789 = qJ(1) * t550 + t494;
t764 = -pkin(2) * t637 + t792;
t524 = pkin(1) * t596 - t764;
t788 = qJ(1) * t600 + t524;
t770 = -pkin(3) * t704 - t568;
t761 = -pkin(2) * t641 + t770;
t525 = pkin(1) * t600 - t761;
t787 = -qJ(1) * t596 + t525;
t771 = -pkin(2) * t706 - t617;
t582 = pkin(1) * t645 - t771;
t786 = qJ(1) * t649 + t582;
t759 = -pkin(2) * t709 + t766;
t583 = pkin(1) * t649 - t759;
t785 = -qJ(1) * t645 + t583;
t720 = t752 * qJDD(2) + t755 * t757;
t655 = pkin(1) * t720 + t687;
t721 = t755 * qJDD(2) - t752 * t757;
t784 = qJ(1) * t721 - t655;
t656 = -pkin(1) * t721 + t686;
t783 = qJ(1) * t720 - t656;
t780 = t752 * t686 + t755 * t687;
t777 = -t749 * t723 - t815;
t776 = t746 * t728;
t775 = t748 * t728;
t619 = t746 * t672 - t748 * t697;
t773 = pkin(3) * t619 + t795;
t618 = t746 * t670 + t748 * t699;
t772 = pkin(3) * t618 + t794;
t769 = -t732 + t791;
t682 = pkin(5) * t720 - t755 * t722;
t768 = -pkin(5) * t721 - t752 * t722;
t515 = t753 * t555 - t750 * t556;
t624 = t755 * t686 - t752 * t687;
t505 = t748 * t516 + t746 * t560;
t490 = t754 * t504 + t751 * t505;
t765 = pkin(2) * t490 + t793;
t621 = t748 * t672 + t746 * t697;
t579 = t754 * t619 + t751 * t621;
t763 = pkin(2) * t579 + t773;
t620 = t748 * t670 - t746 * t699;
t578 = t754 * t618 + t751 * t620;
t762 = pkin(2) * t578 + t772;
t731 = t749 * t741;
t726 = t733 - t756;
t724 = t756 - t817;
t719 = pkin(1) * t722;
t712 = -t733 + t817;
t698 = t730 + t807;
t693 = t797 * t796;
t676 = t746 * qJDD(5) + t748 * t693;
t675 = -t748 * qJDD(5) + t746 * t693;
t674 = t753 * t698 - t743 * t796;
t673 = -t744 * t796 + t750 * t769;
t671 = -t750 * t724 + t803;
t669 = t753 * t726 - t808;
t668 = t753 * t725 - t808;
t667 = t753 * t724 + t809;
t666 = t750 * t727 + t803;
t665 = t750 * t726 + t802;
t658 = (t698 + t730) * t750;
t657 = t730 * t750 + t753 * t769;
t635 = -t750 * t697 + t753 * t699;
t634 = t753 * t697 + t750 * t699;
t633 = t748 * t671 + t746 * t807;
t632 = t748 * t669 + t746 * t732;
t631 = t746 * t671 - t748 * t807;
t630 = t746 * t669 - t748 * t732;
t629 = t748 * t674 - t776;
t628 = t748 * t673 + t776;
t627 = t746 * t674 + t775;
t626 = t746 * t673 - t775;
t611 = -t751 * t675 + t754 * t676;
t610 = t754 * t675 + t751 * t676;
t609 = pkin(5) * t780 + t719;
t608 = t748 * t635 + t746 * t712;
t607 = t746 * t635 - t748 * t712;
t595 = -t751 * t631 + t754 * t633;
t594 = -t751 * t630 + t754 * t632;
t593 = t754 * t631 + t751 * t633;
t592 = t754 * t630 + t751 * t632;
t591 = -t751 * t627 + t754 * t629;
t590 = -t751 * t626 + t754 * t628;
t589 = t754 * t627 + t751 * t629;
t588 = t754 * t626 + t751 * t628;
t581 = -t751 * t619 + t754 * t621;
t580 = -t751 * t618 + t754 * t620;
t567 = pkin(2) * t722 + pkin(6) * t781;
t566 = -t752 * t610 + t755 * t611;
t565 = t755 * t610 + t752 * t611;
t563 = -t751 * t607 + t754 * t608;
t562 = t754 * t607 + t751 * t608;
t552 = -pkin(7) * t668 + t558;
t551 = -pkin(7) * t666 + t557;
t548 = -pkin(4) * t668 + t556;
t547 = -pkin(4) * t666 + t555;
t546 = -t752 * t593 + t755 * t595;
t545 = -t752 * t592 + t755 * t594;
t544 = t755 * t593 + t752 * t595;
t543 = t755 * t592 + t752 * t594;
t542 = -t752 * t589 + t755 * t591;
t541 = -t752 * t588 + t755 * t590;
t540 = t755 * t589 + t752 * t591;
t539 = t755 * t588 + t752 * t590;
t538 = -t752 * t579 + t755 * t581;
t537 = -t752 * t578 + t755 * t580;
t536 = t755 * t579 + t752 * t581;
t535 = t755 * t578 + t752 * t580;
t523 = -t752 * t562 + t755 * t563;
t522 = t755 * t562 + t752 * t563;
t521 = pkin(3) * t718 + qJ(4) * t782;
t512 = pkin(1) * t533 + t818;
t511 = -qJ(4) * t643 + t748 * t515;
t510 = qJ(4) * t644 + t746 * t515;
t509 = -qJ(4) * t619 - t746 * t548 + t748 * t552;
t508 = -qJ(4) * t618 - t746 * t547 + t748 * t551;
t507 = -pkin(3) * t668 + qJ(4) * t621 + t748 * t548 + t746 * t552;
t506 = -pkin(3) * t666 + qJ(4) * t620 + t748 * t547 + t746 * t551;
t502 = pkin(5) * t533 + pkin(6) * t799 - t752 * t567;
t501 = pkin(5) * t830 + pkin(6) * t804 + t755 * t567 + t719;
t496 = -pkin(1) * t536 - t763;
t495 = -pkin(1) * t535 - t762;
t493 = -pkin(6) * t602 - t751 * t510 + t754 * t511;
t492 = pkin(6) * t603 + t754 * t510 + t751 * t511;
t491 = -t751 * t504 + t754 * t505;
t489 = -pkin(6) * t579 - t751 * t507 + t754 * t509;
t488 = -pkin(6) * t578 - t751 * t506 + t754 * t508;
t487 = -pkin(2) * t668 + pkin(6) * t581 + t754 * t507 + t751 * t509;
t486 = -pkin(2) * t666 + pkin(6) * t580 + t754 * t506 + t751 * t508;
t481 = pkin(6) * t499 + qJ(4) * t801 - t751 * t521;
t480 = pkin(2) * t718 + pkin(6) * t829 + qJ(4) * t806 + t754 * t521;
t479 = -qJ(4) * t504 - (pkin(4) * t746 - pkin(7) * t748) * t515;
t478 = qJ(4) * t505 - (-pkin(4) * t748 - pkin(7) * t746 - pkin(3)) * t515;
t477 = -pkin(5) * t549 - t752 * t492 + t755 * t493;
t476 = pkin(5) * t550 + t755 * t492 + t752 * t493;
t475 = pkin(1) * t484 - t790;
t474 = -t752 * t490 + t755 * t491;
t473 = t755 * t490 + t752 * t491;
t472 = -pkin(5) * t536 - t752 * t487 + t755 * t489;
t471 = -pkin(5) * t535 - t752 * t486 + t755 * t488;
t470 = -pkin(1) * t668 + pkin(5) * t538 + t755 * t487 + t752 * t489;
t469 = -pkin(1) * t666 + pkin(5) * t537 + t755 * t486 + t752 * t488;
t468 = pkin(5) * t484 - t752 * t480 + t755 * t481;
t467 = pkin(1) * t718 + pkin(5) * t839 + t755 * t480 + t752 * t481;
t466 = -pkin(6) * t490 - t751 * t478 + t754 * t479;
t465 = -pkin(1) * t473 - t765;
t464 = pkin(2) * t515 + pkin(6) * t491 + t754 * t478 + t751 * t479;
t463 = -pkin(5) * t473 - t752 * t464 + t755 * t466;
t462 = pkin(1) * t515 + pkin(5) * t474 + t755 * t464 + t752 * t466;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t812, -t810, -t819, -qJ(1) * t819, 0, 0, t749 * t721, 0, -t749 * t720, t747 * qJDD(2), t747 * t783 + t749 * t768, t749 * t682 + t747 * t784, t749 * t624, -qJ(1) * (t747 * t780 + t713) - (t747 * pkin(1) - t749 * pkin(5)) * t624, 0, 0, -t749 * t649, 0, -t749 * t645, t813, -t747 * t785 + t749 * t836, t749 * t587 - t747 * t786, t749 * t533, t749 * t502 - t747 * t512 - qJ(1) * (t747 * t830 + t713), 0, 0, -t749 * t600, 0, -t749 * t596, t813, -t747 * t787 + t749 * t842, t749 * t520 - t747 * t788, t749 * t484, t749 * t468 - t747 * t475 - qJ(1) * (t749 * t718 + t747 * t839), t749 * t542 + t747 * t658, t749 * t523 + t747 * t634, t749 * t546 + t747 * t667, t749 * t541 - t747 * t657, t749 * t545 + t747 * t665, t749 * t566, t749 * t471 - t747 * t495 - qJ(1) * (t747 * t537 - t749 * t666), t749 * t472 - t747 * t496 - qJ(1) * (t747 * t538 - t749 * t668), t749 * t477 - t747 * t789, t749 * t463 - t747 * t465 - qJ(1) * (t747 * t474 + t515 * t749); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t810, -t812, t777, qJ(1) * t777, 0, 0, t747 * t721, 0, -t747 * t720, -t749 * qJDD(2), t747 * t768 - t749 * t783, t747 * t682 - t749 * t784, t747 * t624, qJ(1) * (t749 * t780 - t815) - (-t749 * pkin(1) - t747 * pkin(5)) * t624, 0, 0, -t747 * t649, 0, -t747 * t645, -t731, t747 * t836 + t749 * t785, t747 * t587 + t749 * t786, t747 * t533, t747 * t502 + t749 * t512 + qJ(1) * (t749 * t830 - t815), 0, 0, -t747 * t600, 0, -t747 * t596, -t731, t747 * t842 + t749 * t787, t747 * t520 + t749 * t788, t747 * t484, t747 * t468 + t749 * t475 + qJ(1) * (-t747 * t718 + t749 * t839), t747 * t542 - t749 * t658, t747 * t523 - t749 * t634, t747 * t546 - t749 * t667, t747 * t541 + t749 * t657, t747 * t545 - t749 * t665, t747 * t566, t747 * t471 + t749 * t495 + qJ(1) * (t749 * t537 + t747 * t666), t747 * t472 + t749 * t496 + qJ(1) * (t749 * t538 + t747 * t668), t747 * t477 + t749 * t789, t747 * t463 + t749 * t465 + qJ(1) * (t749 * t474 - t515 * t747); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t722, t723, 0, 0, 0, 0, t720, 0, t721, 0, -t682, t768, t780, t609, 0, 0, t645, 0, -t649, 0, -t587, t836, t830, t501, 0, 0, t596, 0, -t600, 0, -t520, t842, t839, t467, t540, t522, t544, t539, t543, t565, t469, t470, t476, t462; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t745, -t722, 0, 0, 0, t721, 0, -t720, 0, t768, t682, t624, pkin(5) * t624, 0, 0, -t649, 0, -t645, 0, t836, t587, t533, t502, 0, 0, -t600, 0, -t596, 0, t842, t520, t484, t468, t542, t523, t546, t541, t545, t566, t471, t472, t477, t463; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t745, 0, -t723, 0, 0, 0, 0, 0, 0, -qJDD(2), t656, t655, 0, pkin(1) * t624, 0, 0, 0, 0, 0, -t741, t583, t582, 0, t512, 0, 0, 0, 0, 0, -t741, t525, t524, 0, t475, -t658, -t634, -t667, t657, -t665, 0, t495, t496, t494, t465; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t722, t723, 0, 0, 0, 0, t720, 0, t721, 0, -t682, t768, t780, t609, 0, 0, t645, 0, -t649, 0, -t587, t836, t830, t501, 0, 0, t596, 0, -t600, 0, -t520, t842, t839, t467, t540, t522, t544, t539, t543, t565, t469, t470, t476, t462; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t757, 0, 0, -t722, t686, 0, 0, 0, -t709, 0, -t706, 0, t828, t664, t572, pkin(6) * t572, 0, 0, -t641, 0, -t637, 0, t835, t577, t499, t481, t591, t563, t595, t590, t594, t611, t488, t489, t493, t466; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t757, 0, qJDD(2), 0, t722, 0, t687, 0, 0, 0, t706, 0, -t709, 0, -t664, t828, t781, t567, 0, 0, t637, 0, -t641, 0, -t577, t835, t829, t480, t589, t562, t593, t588, t592, t610, t486, t487, t492, t464; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t686, -t687, 0, 0, 0, 0, 0, 0, 0, t741, t759, t771, 0, -t818, 0, 0, 0, 0, 0, t741, t761, t764, 0, t790, t658, t634, t667, -t657, t665, 0, t762, t763, t760, t765; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t741, 0, -t740, 0, 0, -t722, -t766, 0, 0, 0, -t704, 0, -t701, 0, t827, t654, t529, qJ(4) * t529, t629, t608, t633, t628, t632, t676, t508, t509, t511, t479; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t740, 0, t741, 0, t722, 0, t617, 0, 0, 0, t701, 0, -t704, 0, -t654, t827, t782, t521, t627, t607, t631, t626, t630, t675, t506, t507, t510, t478; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t741, t766, -t617, 0, 0, 0, 0, 0, 0, 0, t741, t770, t792, 0, -t526, t658, t634, t667, -t657, t665, 0, t772, t773, t767, t793; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t741, 0, -t740, 0, 0, -t718, t568, 0, t674, t635, t671, t673, t669, t693, t551, t552, t515, pkin(7) * t515; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t740, 0, t741, 0, t718, 0, t569, 0, t728, -t712, -t807, -t728, -t732, -qJDD(5), t547, t548, 0, pkin(4) * t515; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t741, -t568, -t569, 0, 0, t658, t634, t667, -t657, t665, 0, t794, t795, t774, t798; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t698, t699, t716, -t730, t726, t730, 0, t560, t555, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t791, t697, t724, -t769, t717, -t791, -t560, 0, t556, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t728, t712, t807, t728, t732, qJDD(5), -t555, -t556, 0, 0;];
m_new_reg = t1;
