% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRRPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d5,theta1,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:18
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRRPR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPR2_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPR2_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRPR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRPR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRRPR2_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:17:38
% EndTime: 2019-12-05 16:17:50
% DurationCPUTime: 7.96s
% Computational Cost: add. (27714->436), mult. (41204->663), div. (0->0), fcn. (28255->10), ass. (0->302)
t450 = (qJD(2) + qJD(3));
t445 = t450 ^ 2;
t446 = qJDD(2) + qJDD(3);
t459 = sin(qJ(3));
t462 = cos(qJ(3));
t412 = t445 * t462 + t446 * t459;
t415 = t445 * t459 - t446 * t462;
t460 = sin(qJ(2));
t463 = cos(qJ(2));
t358 = t412 * t463 - t460 * t415;
t453 = g(3) - qJDD(1);
t389 = pkin(6) * t412 - t453 * t462;
t530 = pkin(6) * t415 - t453 * t459;
t298 = pkin(5) * t358 + t389 * t463 - t460 * t530;
t362 = t412 * t460 + t415 * t463;
t455 = sin(pkin(8));
t457 = cos(pkin(8));
t310 = t358 * t455 + t362 * t457;
t537 = pkin(5) * t362 + t460 * t389 + t463 * t530;
t545 = qJ(1) * t310 + t298 * t455 + t457 * t537;
t529 = t358 * t457 - t362 * t455;
t544 = qJ(1) * t529 + t298 * t457 - t455 * t537;
t428 = g(1) * t455 - t457 * g(2);
t430 = g(1) * t457 + g(2) * t455;
t485 = -t460 * t428 + t463 * t430;
t514 = qJD(2) ^ 2;
t374 = -t514 * pkin(2) - t485;
t468 = t428 * t463 + t460 * t430;
t466 = qJDD(2) * pkin(2) + t468;
t322 = t374 * t459 - t462 * t466;
t323 = t462 * t374 + t459 * t466;
t477 = t322 * t459 + t462 * t323;
t267 = t322 * t462 - t323 * t459;
t509 = t267 * t463;
t223 = -t460 * t477 + t509;
t486 = t460 * t267;
t534 = t463 * t477 + t486;
t192 = t223 * t455 + t457 * t534;
t541 = t223 * t457 - t455 * t534;
t454 = sin(pkin(9));
t448 = t454 ^ 2;
t456 = cos(pkin(9));
t449 = t456 ^ 2;
t405 = (t448 + t449) * t456 * t445;
t488 = t456 * t462;
t369 = -t405 * t459 + t446 * t488;
t489 = t456 * t459;
t371 = t405 * t462 + t446 * t489;
t316 = t369 * t463 - t460 * t371;
t318 = t460 * t369 + t371 * t463;
t261 = t316 * t457 - t318 * t455;
t538 = t316 * t455 + t318 * t457;
t476 = -t460 * t468 - t463 * t485;
t328 = t460 * t485 - t463 * t468;
t505 = t328 * t457;
t533 = -t455 * t476 + t505;
t506 = t328 * t455;
t270 = t457 * t476 + t506;
t424 = t460 * qJDD(2) + t514 * t463;
t425 = qJDD(2) * t463 - t460 * t514;
t377 = -t424 * t455 + t457 * t425;
t402 = pkin(5) * t424 - t453 * t463;
t470 = -pkin(5) * t425 - t453 * t460;
t532 = -qJ(1) * t377 + t402 * t455 + t457 * t470;
t313 = -pkin(3) * t445 + qJ(4) * t446 + t323;
t513 = 2 * qJD(4);
t531 = (t450 * t513) + t313;
t516 = t457 * t424 + t425 * t455;
t527 = qJ(1) * t516 + t402 * t457 - t455 * t470;
t493 = t454 * t456;
t384 = t412 * t493;
t479 = t446 * t493;
t385 = -t454 * t445 * t489 + t462 * t479;
t330 = t384 * t463 + t460 * t385;
t333 = t460 * t384 - t385 * t463;
t526 = t330 * t457 - t333 * t455;
t525 = t330 * t455 + t333 * t457;
t458 = sin(qJ(5));
t461 = cos(qJ(5));
t392 = (qJD(5) * t450 * t461 + t446 * t458) * t454;
t496 = t450 * t456;
t432 = -qJD(5) + t496;
t497 = t450 * t454;
t483 = t432 * t497;
t403 = t461 * t483;
t349 = t403 - t392;
t524 = t349 * t458;
t480 = t458 * t497;
t393 = t461 * t454 * t446 - qJD(5) * t480;
t473 = t432 * t480;
t350 = t393 + t473;
t345 = t350 * t461;
t427 = t432 ^ 2;
t512 = pkin(1) * t453;
t511 = pkin(4) * t454;
t510 = pkin(4) * t456;
t441 = t446 * pkin(3);
t471 = -pkin(7) * t454 - t510;
t407 = t471 * t450;
t440 = t456 * t453;
t274 = t440 + (t313 + (t513 + t407) * t450) * t454;
t508 = t274 * t458;
t507 = t274 * t461;
t481 = t445 * t458 * t461;
t422 = t448 * t481;
t429 = t446 * t456 - qJDD(5);
t390 = -t422 + t429;
t504 = t390 * t458;
t503 = t390 * t461;
t391 = -t422 - t429;
t502 = t391 * t458;
t501 = t391 * t461;
t498 = t445 * t448;
t492 = t454 * t459;
t491 = t454 * t462;
t490 = t455 * t453;
t487 = t457 * t453;
t293 = -t454 * t453 + t531 * t456;
t275 = t407 * t496 + t293;
t312 = -t445 * qJ(4) + qJDD(4) + t322 - t441;
t294 = t446 * t471 + t312;
t236 = t461 * t275 + t458 * t294;
t452 = t461 ^ 2;
t482 = t452 * t498;
t478 = -t312 + t441;
t235 = t275 * t458 - t461 * t294;
t292 = t531 * t454 + t440;
t247 = t292 * t454 + t456 * t293;
t381 = -t428 * t455 - t457 * t430;
t447 = t454 * t448;
t472 = t447 * t481;
t469 = t456 * t422;
t205 = -t235 * t461 + t236 * t458;
t206 = t235 * t458 + t236 * t461;
t246 = t292 * t456 - t293 * t454;
t380 = t428 * t457 - t430 * t455;
t451 = t458 ^ 2;
t438 = t449 * t445;
t437 = t449 * t446;
t436 = t448 * t446;
t431 = t451 * t498;
t411 = t438 - t498;
t410 = t438 + t498;
t409 = t437 - t436;
t408 = t437 + t436;
t404 = (t449 * t454 + t447) * t445;
t398 = t431 - t482;
t397 = t431 + t482;
t396 = t427 - t482;
t395 = -t431 - t427;
t394 = t431 - t427;
t375 = -t482 - t427;
t370 = t404 * t462 + t446 * t492;
t367 = t404 * t459 - t446 * t491;
t357 = t409 * t462 - t411 * t459;
t356 = t408 * t462 - t410 * t459;
t355 = t409 * t459 + t411 * t462;
t354 = t408 * t459 + t410 * t462;
t353 = (-t451 - t452) * t483;
t352 = t473 - t393;
t348 = t403 + t392;
t347 = -t393 * t458 + t452 * t483;
t346 = t392 * t461 + t451 * t483;
t343 = t395 * t461 - t502;
t342 = t394 * t461 + t504;
t341 = -t396 * t458 + t501;
t340 = t395 * t458 + t501;
t339 = -t394 * t458 + t503;
t338 = -t396 * t461 - t502;
t337 = -t353 * t459 - t429 * t491;
t336 = t353 * t462 - t429 * t492;
t335 = -t375 * t458 + t503;
t334 = t375 * t461 + t504;
t325 = t345 * t456 + t472;
t324 = -t456 * t524 - t472;
t321 = pkin(5) * t476 + t512;
t317 = -t460 * t367 + t370 * t463;
t314 = t367 * t463 + t460 * t370;
t306 = -t460 * t355 + t357 * t463;
t305 = -t460 * t354 + t356 * t463;
t304 = t355 * t463 + t460 * t357;
t303 = t354 * t463 + t460 * t356;
t302 = t349 * t461 - t350 * t458;
t301 = -t348 * t461 - t352 * t458;
t300 = -t345 - t524;
t299 = -t348 * t458 + t352 * t461;
t291 = t343 * t456 - t349 * t454;
t290 = t342 * t456 - t348 * t454;
t289 = t341 * t456 - t352 * t454;
t288 = t343 * t454 + t349 * t456;
t284 = t335 * t456 + t350 * t454;
t283 = t335 * t454 - t350 * t456;
t282 = t325 * t462 - t347 * t459;
t281 = t324 * t462 - t346 * t459;
t280 = t325 * t459 + t347 * t462;
t279 = t324 * t459 + t346 * t462;
t278 = t302 * t456 - t398 * t454;
t277 = t301 * t456 - t397 * t454;
t276 = t301 * t454 + t397 * t456;
t272 = -t460 * t336 + t337 * t463;
t271 = t336 * t463 + t460 * t337;
t264 = pkin(2) * t453 + pkin(6) * t477;
t262 = -t314 * t455 + t317 * t457;
t260 = t314 * t457 + t317 * t455;
t259 = t291 * t462 + t340 * t459;
t258 = t290 * t462 - t339 * t459;
t257 = t289 * t462 - t338 * t459;
t256 = t291 * t459 - t340 * t462;
t255 = t290 * t459 + t339 * t462;
t254 = t289 * t459 + t338 * t462;
t253 = t284 * t462 + t334 * t459;
t252 = t284 * t459 - t334 * t462;
t251 = -t303 * t455 + t305 * t457;
t250 = t303 * t457 + t305 * t455;
t249 = -pkin(7) * t340 + t508;
t248 = -pkin(7) * t334 + t507;
t244 = t278 * t462 - t300 * t459;
t243 = t277 * t462 + t299 * t459;
t242 = t278 * t459 + t300 * t462;
t241 = t277 * t459 - t299 * t462;
t240 = -pkin(6) * t367 - t293 * t459 + t312 * t488;
t239 = -pkin(6) * t369 - t292 * t459 + t312 * t491;
t238 = pkin(6) * t370 + t293 * t462 + t312 * t489;
t237 = -pkin(6) * t371 + t292 * t462 + t312 * t492;
t234 = -t460 * t280 + t282 * t463;
t233 = -t460 * t279 + t281 * t463;
t232 = t280 * t463 + t460 * t282;
t231 = t279 * t463 + t460 * t281;
t230 = -pkin(6) * t354 + t246 * t462;
t229 = pkin(6) * t356 + t246 * t459;
t228 = -pkin(4) * t340 + t235;
t227 = -pkin(4) * t334 + t236;
t226 = t247 * t462 + t312 * t459;
t225 = t247 * t459 - t312 * t462;
t220 = -t460 * t256 + t259 * t463;
t219 = -t460 * t255 + t258 * t463;
t218 = -t460 * t254 + t257 * t463;
t217 = t256 * t463 + t460 * t259;
t216 = t255 * t463 + t460 * t258;
t215 = t254 * t463 + t460 * t257;
t214 = -pkin(3) * t288 - pkin(4) * t349 - pkin(7) * t343 + t507;
t213 = -pkin(3) * t283 + pkin(4) * t350 - pkin(7) * t335 - t508;
t212 = -t460 * t252 + t253 * t463;
t211 = t252 * t463 + t460 * t253;
t210 = -t460 * t242 + t244 * t463;
t209 = -t460 * t241 + t243 * t463;
t208 = t242 * t463 + t460 * t244;
t207 = t241 * t463 + t460 * t243;
t204 = -pkin(5) * t314 - t460 * t238 + t240 * t463;
t203 = -pkin(5) * t316 - t460 * t237 + t239 * t463;
t202 = pkin(5) * t317 + t238 * t463 + t460 * t240;
t201 = -pkin(5) * t318 + t237 * t463 + t460 * t239;
t200 = -pkin(7) * t299 - t205;
t199 = -qJ(4) * t288 - t228 * t454 + t249 * t456;
t198 = -pkin(5) * t303 - t460 * t229 + t230 * t463;
t197 = pkin(5) * t305 + t229 * t463 + t460 * t230;
t196 = t206 * t456 + t274 * t454;
t195 = t206 * t454 - t274 * t456;
t194 = -t460 * t225 + t226 * t463;
t193 = t225 * t463 + t460 * t226;
t190 = -qJ(4) * t283 - t227 * t454 + t248 * t456;
t189 = pkin(5) * t223 + pkin(6) * t509 - t460 * t264;
t188 = pkin(5) * t534 + pkin(6) * t486 + t264 * t463 + t512;
t187 = -t217 * t455 + t220 * t457;
t186 = t217 * t457 + t220 * t455;
t185 = -pkin(3) * t276 - pkin(4) * t397 - pkin(7) * t301 - t206;
t184 = -pkin(6) * t225 - (pkin(3) * t459 - qJ(4) * t462) * t246;
t183 = -t211 * t455 + t212 * t457;
t182 = t211 * t457 + t212 * t455;
t181 = -qJ(4) * t276 + t200 * t456 + t299 * t511;
t180 = -t207 * t455 + t209 * t457;
t179 = t207 * t457 + t209 * t455;
t178 = pkin(6) * t226 - (-pkin(3) * t462 - qJ(4) * t459 - pkin(2)) * t246;
t177 = -pkin(6) * t256 + t199 * t462 - t214 * t459;
t176 = t196 * t462 + t205 * t459;
t175 = t196 * t459 - t205 * t462;
t174 = -pkin(6) * t252 + t190 * t462 - t213 * t459;
t173 = -pkin(2) * t288 + pkin(6) * t259 + t199 * t459 + t214 * t462;
t172 = -pkin(3) * t195 + pkin(4) * t274 - pkin(7) * t206;
t171 = -t193 * t455 + t194 * t457;
t170 = t193 * t457 + t194 * t455;
t169 = -pkin(2) * t283 + pkin(6) * t253 + t190 * t459 + t213 * t462;
t168 = -qJ(4) * t195 + (-pkin(7) * t456 + t511) * t205;
t167 = -pkin(6) * t241 + t181 * t462 - t185 * t459;
t166 = -pkin(2) * t276 + pkin(6) * t243 + t181 * t459 + t185 * t462;
t165 = -t460 * t175 + t176 * t463;
t164 = t175 * t463 + t460 * t176;
t163 = -pkin(5) * t193 - t460 * t178 + t184 * t463;
t162 = pkin(1) * t246 + pkin(5) * t194 + t178 * t463 + t460 * t184;
t161 = -pkin(5) * t217 - t460 * t173 + t177 * t463;
t160 = -pkin(1) * t288 + pkin(5) * t220 + t173 * t463 + t460 * t177;
t159 = -pkin(5) * t211 - t460 * t169 + t174 * t463;
t158 = -pkin(1) * t283 + pkin(5) * t212 + t169 * t463 + t460 * t174;
t157 = -pkin(6) * t175 + t168 * t462 - t172 * t459;
t156 = -pkin(5) * t207 - t460 * t166 + t167 * t463;
t155 = -pkin(1) * t276 + pkin(5) * t209 + t166 * t463 + t460 * t167;
t154 = -t164 * t455 + t165 * t457;
t153 = t164 * t457 + t165 * t455;
t152 = -pkin(2) * t195 + pkin(6) * t176 + t168 * t459 + t172 * t462;
t151 = -pkin(5) * t164 - t460 * t152 + t157 * t463;
t150 = -pkin(1) * t195 + pkin(5) * t165 + t152 * t463 + t460 * t157;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t381, 0, 0, 0, 0, 0, 0, -t516, -t377, 0, t270, 0, 0, 0, 0, 0, 0, -t529, t310, 0, t192, 0, 0, 0, 0, 0, 0, -t538, t262, t251, t171, 0, 0, 0, 0, 0, 0, t187, t183, t180, t154; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t380, 0, 0, 0, 0, 0, 0, t377, -t516, 0, -t533, 0, 0, 0, 0, 0, 0, -t310, -t529, 0, -t541, 0, 0, 0, 0, 0, 0, t261, t260, t250, t170, 0, 0, 0, 0, 0, 0, t186, t182, t179, t153; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t453, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t453, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t453, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t246, 0, 0, 0, 0, 0, 0, t288, t283, t276, t195; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t490, -t487, -t380, -qJ(1) * t380, 0, 0, t377, 0, -t516, 0, t532, t527, t533, pkin(5) * t505 + qJ(1) * t533 - t321 * t455, 0, 0, -t310, 0, -t529, 0, t545, t544, t541, qJ(1) * t541 - t188 * t455 + t189 * t457, -t525, -t304 * t455 + t306 * t457, t262, t525, t538, 0, -qJ(1) * t261 - t201 * t455 + t203 * t457, -qJ(1) * t260 - t202 * t455 + t204 * t457, -qJ(1) * t250 - t197 * t455 + t198 * t457, -qJ(1) * t170 - t162 * t455 + t163 * t457, -t232 * t455 + t234 * t457, -t208 * t455 + t210 * t457, -t215 * t455 + t218 * t457, -t231 * t455 + t233 * t457, -t216 * t455 + t219 * t457, -t271 * t455 + t272 * t457, -qJ(1) * t186 - t160 * t455 + t161 * t457, -qJ(1) * t182 - t158 * t455 + t159 * t457, -qJ(1) * t179 - t155 * t455 + t156 * t457, -qJ(1) * t153 - t150 * t455 + t151 * t457; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t487, -t490, t381, qJ(1) * t381, 0, 0, t516, 0, t377, 0, -t527, t532, t270, pkin(5) * t506 + qJ(1) * t270 + t321 * t457, 0, 0, t529, 0, -t310, 0, -t544, t545, t192, qJ(1) * t192 + t188 * t457 + t189 * t455, t526, t304 * t457 + t306 * t455, t260, -t526, -t261, 0, -qJ(1) * t538 + t201 * t457 + t203 * t455, qJ(1) * t262 + t202 * t457 + t204 * t455, qJ(1) * t251 + t197 * t457 + t198 * t455, qJ(1) * t171 + t162 * t457 + t163 * t455, t232 * t457 + t234 * t455, t208 * t457 + t210 * t455, t215 * t457 + t218 * t455, t231 * t457 + t233 * t455, t216 * t457 + t219 * t455, t271 * t457 + t272 * t455, qJ(1) * t187 + t160 * t457 + t161 * t455, qJ(1) * t183 + t158 * t457 + t159 * t455, qJ(1) * t180 + t155 * t457 + t156 * t455, qJ(1) * t154 + t150 * t457 + t151 * t455; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t428, t430, 0, 0, 0, 0, 0, 0, 0, qJDD(2), pkin(1) * t425 + t468, -pkin(1) * t424 + t485, 0, -pkin(1) * t328, 0, 0, 0, 0, 0, t446, -pkin(1) * t362 - pkin(2) * t415 - t322, -pkin(1) * t358 - pkin(2) * t412 - t323, 0, -pkin(1) * t223 - pkin(2) * t267, t436, 0.2e1 * t479, 0, t437, 0, 0, pkin(1) * t316 + pkin(2) * t369 - qJ(4) * t405 + t456 * t478, pkin(1) * t314 + pkin(2) * t367 + qJ(4) * t404 - t454 * t478, pkin(1) * t303 + pkin(2) * t354 + pkin(3) * t410 + qJ(4) * t408 + t247, pkin(1) * t193 + pkin(2) * t225 - pkin(3) * t312 + qJ(4) * t247, t345 * t454 - t469, t302 * t454 + t398 * t456, t341 * t454 + t352 * t456, -t454 * t524 + t469, t342 * t454 + t348 * t456, t456 * t429, pkin(1) * t217 + pkin(2) * t256 - pkin(3) * t340 + qJ(4) * t291 + t228 * t456 + t249 * t454, pkin(1) * t211 + pkin(2) * t252 - pkin(3) * t334 + qJ(4) * t284 + t227 * t456 + t248 * t454, pkin(1) * t207 + pkin(2) * t241 + qJ(4) * t277 + t200 * t454 + (-pkin(3) - t510) * t299, pkin(1) * t164 + pkin(2) * t175 + qJ(4) * t196 + (-pkin(3) + t471) * t205;];
tauB_reg = t1;
