% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRRPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d5,theta1,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:18
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRRPR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPR2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPR2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRPR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRPR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRRPR2_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:18:01
% EndTime: 2019-12-05 16:18:03
% DurationCPUTime: 2.24s
% Computational Cost: add. (7069->162), mult. (10548->246), div. (0->0), fcn. (7309->10), ass. (0->138)
t1119 = qJD(2) + qJD(3);
t1115 = t1119 ^ 2;
t1128 = sin(qJ(3));
t1116 = qJDD(2) + qJDD(3);
t1131 = cos(qJ(3));
t1145 = t1131 * t1116;
t1093 = t1128 * t1115 - t1145;
t1129 = sin(qJ(2));
t1132 = cos(qJ(2));
t1146 = t1128 * t1116;
t1137 = -t1131 * t1115 - t1146;
t1069 = t1132 * t1093 - t1129 * t1137;
t1124 = sin(pkin(8));
t1126 = cos(pkin(8));
t1158 = t1129 * t1093 + t1132 * t1137;
t1162 = t1124 * t1069 + t1126 * t1158;
t1161 = t1126 * t1069 - t1124 * t1158;
t1123 = sin(pkin(9));
t1117 = t1123 ^ 2;
t1125 = cos(pkin(9));
t1118 = t1125 ^ 2;
t1144 = t1117 + t1118;
t1090 = t1144 * t1115;
t1147 = t1125 * t1119;
t1105 = -qJD(5) + t1147;
t1155 = t1105 ^ 2;
t1154 = 2 * qJD(4);
t1127 = sin(qJ(5));
t1153 = t1116 * t1127;
t1130 = cos(qJ(5));
t1152 = t1116 * t1130;
t1151 = t1117 * t1115;
t1150 = t1119 * t1127;
t1149 = t1119 * t1130;
t1148 = t1123 * t1116;
t1103 = t1124 * g(1) - t1126 * g(2);
t1104 = -t1126 * g(1) - t1124 * g(2);
t1081 = t1129 * t1103 + t1132 * t1104;
t1133 = qJD(2) ^ 2;
t1078 = -t1133 * pkin(2) + t1081;
t1080 = t1132 * t1103 - t1129 * t1104;
t1136 = qJDD(2) * pkin(2) + t1080;
t1054 = t1131 * t1078 + t1128 * t1136;
t1109 = t1125 * t1116;
t1143 = t1109 - qJDD(5);
t1142 = t1105 * t1150;
t1048 = -t1115 * pkin(3) + t1116 * qJ(4) + t1054;
t1122 = -g(3) + qJDD(1);
t1040 = t1125 * t1048 + t1123 * t1122 + t1147 * t1154;
t1053 = -t1128 * t1078 + t1131 * t1136;
t1100 = t1132 * qJDD(2) - t1129 * t1133;
t1101 = -t1129 * qJDD(2) - t1132 * t1133;
t1141 = -t1124 * t1100 + t1126 * t1101;
t1140 = t1130 * t1127 * t1151;
t1139 = -pkin(4) * t1125 - pkin(7) * t1123;
t1138 = t1126 * t1100 + t1124 * t1101;
t1047 = -t1116 * pkin(3) - t1115 * qJ(4) + qJDD(4) - t1053;
t1121 = t1130 ^ 2;
t1120 = t1127 ^ 2;
t1111 = t1125 * t1122;
t1102 = t1123 * t1115 * t1125;
t1099 = t1123 * qJD(5) * t1150;
t1089 = t1144 * t1116;
t1088 = t1139 * t1119;
t1087 = t1125 * t1090;
t1086 = t1123 * t1090;
t1085 = (t1120 + t1121) * t1151;
t1084 = -t1120 * t1151 - t1155;
t1083 = -t1140 - t1143;
t1082 = -t1140 + t1143;
t1079 = -t1121 * t1151 - t1155;
t1077 = -t1131 * t1087 - t1125 * t1146;
t1076 = t1131 * t1086 + t1123 * t1146;
t1075 = -t1128 * t1087 + t1125 * t1145;
t1074 = t1128 * t1086 - t1123 * t1145;
t1066 = t1131 * t1089 - t1128 * t1090;
t1065 = t1128 * t1089 + t1131 * t1090;
t1064 = t1099 + (t1142 - t1152) * t1123;
t1063 = -t1099 + (t1142 + t1152) * t1123;
t1062 = (-t1153 + (-qJD(5) - t1105) * t1149) * t1123;
t1061 = (t1153 + (qJD(5) - t1105) * t1149) * t1123;
t1060 = -t1127 * t1083 + t1130 * t1084;
t1059 = t1130 * t1083 + t1127 * t1084;
t1058 = -t1127 * t1079 + t1130 * t1082;
t1057 = t1130 * t1079 + t1127 * t1082;
t1056 = -t1129 * t1080 + t1132 * t1081;
t1055 = t1132 * t1080 + t1129 * t1081;
t1052 = -t1129 * t1075 + t1132 * t1077;
t1051 = -t1129 * t1074 + t1132 * t1076;
t1050 = t1132 * t1075 + t1129 * t1077;
t1049 = t1132 * t1074 + t1129 * t1076;
t1045 = -t1129 * t1065 + t1132 * t1066;
t1044 = t1132 * t1065 + t1129 * t1066;
t1043 = t1130 * t1062 - t1127 * t1064;
t1042 = t1127 * t1062 + t1130 * t1064;
t1041 = t1139 * t1116 + t1047;
t1039 = t1111 + (-0.2e1 * qJD(4) * t1119 - t1048) * t1123;
t1038 = t1125 * t1060 + t1123 * t1061;
t1037 = t1123 * t1060 - t1125 * t1061;
t1036 = t1125 * t1058 + t1123 * t1063;
t1035 = t1123 * t1058 - t1125 * t1063;
t1034 = t1125 * t1043 - t1123 * t1085;
t1033 = t1123 * t1043 + t1125 * t1085;
t1032 = t1088 * t1147 + t1040;
t1031 = -t1111 + (t1048 + (t1154 + t1088) * t1119) * t1123;
t1030 = -t1128 * t1053 + t1131 * t1054;
t1029 = t1131 * t1053 + t1128 * t1054;
t1028 = t1131 * t1038 + t1128 * t1059;
t1027 = t1128 * t1038 - t1131 * t1059;
t1026 = t1131 * t1036 + t1128 * t1057;
t1025 = t1128 * t1036 - t1131 * t1057;
t1024 = -t1123 * t1039 + t1125 * t1040;
t1023 = t1125 * t1039 + t1123 * t1040;
t1022 = t1131 * t1034 + t1128 * t1042;
t1021 = t1128 * t1034 - t1131 * t1042;
t1020 = t1130 * t1032 + t1127 * t1041;
t1019 = -t1127 * t1032 + t1130 * t1041;
t1018 = t1131 * t1024 + t1128 * t1047;
t1017 = t1128 * t1024 - t1131 * t1047;
t1016 = -t1129 * t1029 + t1132 * t1030;
t1015 = t1132 * t1029 + t1129 * t1030;
t1014 = -t1129 * t1027 + t1132 * t1028;
t1013 = t1132 * t1027 + t1129 * t1028;
t1012 = -t1129 * t1025 + t1132 * t1026;
t1011 = t1132 * t1025 + t1129 * t1026;
t1010 = -t1129 * t1021 + t1132 * t1022;
t1009 = t1132 * t1021 + t1129 * t1022;
t1008 = -t1127 * t1019 + t1130 * t1020;
t1007 = t1130 * t1019 + t1127 * t1020;
t1006 = t1125 * t1008 + t1123 * t1031;
t1005 = t1123 * t1008 - t1125 * t1031;
t1004 = -t1129 * t1017 + t1132 * t1018;
t1003 = t1132 * t1017 + t1129 * t1018;
t1002 = t1131 * t1006 + t1128 * t1007;
t1001 = t1128 * t1006 - t1131 * t1007;
t1000 = -t1129 * t1001 + t1132 * t1002;
t999 = t1132 * t1001 + t1129 * t1002;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1124 * t1103 + t1126 * t1104, 0, 0, 0, 0, 0, 0, t1141, -t1138, 0, -t1124 * t1055 + t1126 * t1056, 0, 0, 0, 0, 0, 0, t1162, t1161, 0, -t1124 * t1015 + t1126 * t1016, 0, 0, 0, 0, 0, 0, -t1124 * t1050 + t1126 * t1052, -t1124 * t1049 + t1126 * t1051, -t1124 * t1044 + t1126 * t1045, -t1124 * t1003 + t1126 * t1004, 0, 0, 0, 0, 0, 0, -t1124 * t1013 + t1126 * t1014, -t1124 * t1011 + t1126 * t1012, -t1124 * t1009 + t1126 * t1010, t1126 * t1000 - t1124 * t999; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1126 * t1103 + t1124 * t1104, 0, 0, 0, 0, 0, 0, t1138, t1141, 0, t1126 * t1055 + t1124 * t1056, 0, 0, 0, 0, 0, 0, -t1161, t1162, 0, t1126 * t1015 + t1124 * t1016, 0, 0, 0, 0, 0, 0, t1126 * t1050 + t1124 * t1052, t1126 * t1049 + t1124 * t1051, t1126 * t1044 + t1124 * t1045, t1126 * t1003 + t1124 * t1004, 0, 0, 0, 0, 0, 0, t1126 * t1013 + t1124 * t1014, t1126 * t1011 + t1124 * t1012, t1126 * t1009 + t1124 * t1010, t1124 * t1000 + t1126 * t999; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1122, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1122, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1122, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1023, 0, 0, 0, 0, 0, 0, t1037, t1035, t1033, t1005; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1104, 0, 0, 0, 0, 0, 0, t1101, -t1100, 0, t1056, 0, 0, 0, 0, 0, 0, t1158, t1069, 0, t1016, 0, 0, 0, 0, 0, 0, t1052, t1051, t1045, t1004, 0, 0, 0, 0, 0, 0, t1014, t1012, t1010, t1000; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1103, 0, 0, 0, 0, 0, 0, t1100, t1101, 0, t1055, 0, 0, 0, 0, 0, 0, -t1069, t1158, 0, t1015, 0, 0, 0, 0, 0, 0, t1050, t1049, t1044, t1003, 0, 0, 0, 0, 0, 0, t1013, t1011, t1009, t999; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1122, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1122, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1122, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1023, 0, 0, 0, 0, 0, 0, t1037, t1035, t1033, t1005; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1133, -qJDD(2), 0, t1081, 0, 0, 0, 0, 0, 0, t1137, t1093, 0, t1030, 0, 0, 0, 0, 0, 0, t1077, t1076, t1066, t1018, 0, 0, 0, 0, 0, 0, t1028, t1026, t1022, t1002; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1133, 0, t1080, 0, 0, 0, 0, 0, 0, -t1093, t1137, 0, t1029, 0, 0, 0, 0, 0, 0, t1075, t1074, t1065, t1017, 0, 0, 0, 0, 0, 0, t1027, t1025, t1021, t1001; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1122, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1122, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1023, 0, 0, 0, 0, 0, 0, t1037, t1035, t1033, t1005; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1115, -t1116, 0, t1054, 0, 0, 0, 0, 0, 0, -t1087, t1086, t1089, t1024, 0, 0, 0, 0, 0, 0, t1038, t1036, t1034, t1006; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1116, -t1115, 0, t1053, 0, 0, 0, 0, 0, 0, t1109, -t1148, t1090, -t1047, 0, 0, 0, 0, 0, 0, -t1059, -t1057, -t1042, -t1007; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1122, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1023, 0, 0, 0, 0, 0, 0, t1037, t1035, t1033, t1005; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1118 * t1115, t1102, t1109, t1040, 0, 0, 0, 0, 0, 0, t1060, t1058, t1043, t1008; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1102, -t1151, -t1148, t1039, 0, 0, 0, 0, 0, 0, -t1061, -t1063, t1085, -t1031; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1109, t1148, -t1090, t1047, 0, 0, 0, 0, 0, 0, t1059, t1057, t1042, t1007; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1084, t1082, t1062, t1020; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1083, t1079, t1064, t1019; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1061, t1063, -t1085, t1031;];
f_new_reg = t1;
