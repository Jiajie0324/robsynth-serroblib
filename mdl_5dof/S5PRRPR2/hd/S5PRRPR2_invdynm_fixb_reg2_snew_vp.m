% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PRRPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d5,theta1,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:18
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PRRPR2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPR2_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPR2_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRPR2_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRPR2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRRPR2_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:17:50
% EndTime: 2019-12-05 16:18:01
% DurationCPUTime: 11.53s
% Computational Cost: add. (44922->488), mult. (66421->674), div. (0->0), fcn. (45212->10), ass. (0->342)
t869 = qJD(2) + qJD(3);
t865 = t869 ^ 2;
t881 = cos(qJ(3));
t866 = qJDD(2) + qJDD(3);
t878 = sin(qJ(3));
t941 = t878 * t866;
t832 = t881 * t865 + t941;
t934 = t881 * t866;
t835 = t878 * t865 - t934;
t879 = sin(qJ(2));
t882 = cos(qJ(2));
t776 = t882 * t832 - t879 * t835;
t872 = g(3) - qJDD(1);
t803 = pkin(6) * t832 - t881 * t872;
t980 = pkin(6) * t835 - t878 * t872;
t707 = pkin(5) * t776 + t882 * t803 - t879 * t980;
t874 = sin(pkin(8));
t876 = cos(pkin(8));
t780 = t879 * t832 + t882 * t835;
t979 = t876 * t776 - t874 * t780;
t986 = pkin(5) * t780 + t879 * t803 + t882 * t980;
t998 = qJ(1) * t979 + t876 * t707 - t874 * t986;
t987 = t874 * t776 + t876 * t780;
t997 = qJ(1) * t987 + t874 * t707 + t876 * t986;
t848 = t874 * g(1) - t876 * g(2);
t850 = t876 * g(1) + t874 * g(2);
t797 = t879 * t848 - t882 * t850;
t883 = qJD(2) ^ 2;
t792 = -t883 * pkin(2) + t797;
t901 = t882 * t848 + t879 * t850;
t891 = qJDD(2) * pkin(2) + t901;
t734 = t878 * t792 - t881 * t891;
t735 = t881 * t792 + t878 * t891;
t921 = t878 * t734 + t881 * t735;
t671 = t881 * t734 - t878 * t735;
t932 = t882 * t671;
t619 = -t879 * t921 + t932;
t939 = t879 * t671;
t983 = t882 * t921 + t939;
t995 = t874 * t619 + t876 * t983;
t994 = t876 * t619 - t874 * t983;
t873 = sin(pkin(9));
t868 = t873 ^ 2;
t875 = cos(pkin(9));
t885 = t875 ^ 2;
t821 = (t868 + t885) * t875 * t865;
t924 = t875 * t934;
t787 = -t878 * t821 + t924;
t789 = t881 * t821 + t875 * t941;
t726 = t882 * t787 - t879 * t789;
t728 = t879 * t787 + t882 * t789;
t989 = t876 * t726 - t874 * t728;
t988 = t874 * t726 + t876 * t728;
t920 = t882 * t797 - t879 * t901;
t741 = -t879 * t797 - t882 * t901;
t947 = t876 * t741;
t982 = -t874 * t920 + t947;
t952 = t874 * t741;
t981 = t876 * t920 + t952;
t844 = t879 * qJDD(2) + t882 * t883;
t818 = pkin(5) * t844 - t882 * t872;
t845 = t882 * qJDD(2) - t879 * t883;
t907 = -pkin(5) * t845 - t879 * t872;
t965 = t876 * t844 + t874 * t845;
t978 = qJ(1) * t965 + t876 * t818 - t874 * t907;
t794 = -t874 * t844 + t876 * t845;
t977 = -qJ(1) * t794 + t874 * t818 + t876 * t907;
t953 = t873 * t875;
t798 = t832 * t953;
t846 = t865 * t953;
t799 = -t878 * t846 + t873 * t924;
t744 = t882 * t798 + t879 * t799;
t747 = t879 * t798 - t882 * t799;
t976 = t876 * t744 - t874 * t747;
t975 = t874 * t744 + t876 * t747;
t877 = sin(qJ(5));
t880 = cos(qJ(5));
t806 = (qJD(5) * t869 * t880 + t866 * t877) * t873;
t852 = t875 * t869 - qJD(5);
t930 = t852 * t869 * t873;
t819 = t880 * t930;
t764 = t819 - t806;
t968 = t877 * t764;
t860 = t875 * t872;
t723 = -t865 * pkin(3) + t866 * qJ(4) + t735;
t963 = 2 * qJD(4);
t917 = t869 * t963 + t723;
t701 = t873 * t917 + t860;
t954 = t873 * t872;
t702 = t875 * t917 - t954;
t650 = t873 * t701 + t875 * t702;
t956 = t869 * t877;
t927 = t873 * t956;
t843 = qJD(5) * t927;
t929 = t852 * t956;
t958 = t866 * t880;
t766 = t873 * (t929 + t958) - t843;
t847 = t852 ^ 2;
t962 = pkin(1) * t872;
t961 = pkin(4) * t873;
t960 = pkin(4) * t875;
t957 = t868 * t865;
t722 = -t866 * pkin(3) - t865 * qJ(4) + qJDD(4) + t734;
t717 = t873 * t722;
t948 = t875 * t866;
t849 = -qJDD(5) + t948;
t955 = t873 * t849;
t857 = t873 * t866;
t949 = t874 * t872;
t718 = t875 * t722;
t946 = t876 * t872;
t909 = -pkin(7) * t873 - t960;
t900 = t723 + (t909 * t869 + t963) * t869;
t675 = t873 * t900 + t860;
t945 = t877 * t675;
t928 = t865 * t877 * t880;
t841 = t868 * t928;
t804 = -t841 + t849;
t944 = t877 * t804;
t805 = -t841 - t849;
t943 = t877 * t805;
t942 = t878 * t722;
t938 = t880 * t675;
t937 = t880 * t804;
t936 = t880 * t805;
t935 = t881 * t722;
t931 = -pkin(3) * t722 + qJ(4) * t650;
t871 = t880 ^ 2;
t926 = t871 * t957;
t925 = t873 * t948;
t923 = pkin(3) * t948 - qJ(4) * t821 - t718;
t621 = t878 * t650 - t935;
t922 = pkin(2) * t621 + t931;
t676 = t875 * t900 - t954;
t703 = t866 * t909 + t722;
t634 = t877 * t676 - t880 * t703;
t635 = t880 * t676 + t877 * t703;
t599 = t877 * t634 + t880 * t635;
t918 = -t874 * t848 - t876 * t850;
t867 = t873 * t868;
t916 = t867 * t928;
t915 = t852 * t927;
t793 = -t926 - t847;
t748 = t880 * t793 + t944;
t624 = -pkin(4) * t748 + t635;
t652 = -pkin(7) * t748 + t938;
t749 = -t877 * t793 + t937;
t690 = t875 * t749 + t766 * t873;
t914 = -pkin(3) * t748 + qJ(4) * t690 + t875 * t624 + t873 * t652;
t870 = t877 ^ 2;
t851 = t870 * t957;
t809 = -t851 - t847;
t755 = t877 * t809 + t936;
t626 = -pkin(4) * t755 + t634;
t654 = -pkin(7) * t755 + t945;
t758 = t880 * t809 - t943;
t700 = t875 * t758 - t873 * t764;
t913 = -pkin(3) * t755 + qJ(4) * t700 + t875 * t626 + t873 * t654;
t856 = t868 * t866;
t858 = t885 * t866;
t828 = t858 + t856;
t859 = t885 * t865;
t830 = t859 + t957;
t912 = pkin(3) * t830 + qJ(4) * t828 + t650;
t911 = pkin(2) * t787 + t923;
t910 = -pkin(4) * t675 + pkin(7) * t599;
t908 = -pkin(2) * t835 - t734;
t906 = t875 * t841;
t656 = t878 * t690 - t881 * t748;
t905 = pkin(2) * t656 + t914;
t661 = t878 * t700 - t881 * t755;
t904 = pkin(2) * t661 + t913;
t772 = t878 * t828 + t881 * t830;
t903 = pkin(2) * t772 + t912;
t598 = -t880 * t634 + t877 * t635;
t649 = t875 * t701 - t873 * t702;
t902 = t876 * t848 - t874 * t850;
t820 = (t873 * t885 + t867) * t865;
t899 = -pkin(3) * t857 + qJ(4) * t820 + t717;
t785 = t878 * t820 - t873 * t934;
t896 = pkin(2) * t785 + t899;
t763 = t819 + t806;
t765 = -t843 + (-t929 + t958) * t873;
t709 = -t877 * t763 - t880 * t765;
t592 = -pkin(7) * t709 - t598;
t711 = -t880 * t763 + t877 * t765;
t811 = t851 + t926;
t682 = t875 * t711 - t873 * t811;
t895 = qJ(4) * t682 + t873 * t592 + (-pkin(3) - t960) * t709;
t894 = -pkin(4) * t766 + pkin(7) * t749 + t945;
t893 = pkin(4) * t764 + pkin(7) * t758 - t938;
t643 = t878 * t682 - t881 * t709;
t892 = pkin(2) * t643 + t895;
t890 = pkin(4) * t811 + pkin(7) * t711 + t599;
t587 = t875 * t599 + t873 * t675;
t889 = qJ(4) * t587 + (-pkin(3) + t909) * t598;
t573 = t878 * t587 - t881 * t598;
t888 = pkin(2) * t573 + t889;
t887 = -pkin(2) * t832 - t735;
t842 = 0.2e1 * t925;
t838 = t875 * t849;
t831 = -t859 + t957;
t829 = t858 - t856;
t812 = -t851 + t926;
t810 = t847 - t926;
t808 = t851 - t847;
t807 = t880 * t857 - t843;
t788 = t881 * t820 + t873 * t941;
t775 = t881 * t829 + t878 * t831;
t774 = t881 * t828 - t878 * t830;
t773 = t878 * t829 - t881 * t831;
t771 = (-t870 - t871) * t930;
t770 = -pkin(1) * t844 - t797;
t769 = pkin(1) * t845 + t901;
t762 = t877 * t807 - t871 * t930;
t761 = -t880 * t806 - t870 * t930;
t760 = (t807 + t915) * t880;
t757 = t880 * t808 + t944;
t756 = -t877 * t810 + t936;
t754 = t877 * t808 - t937;
t753 = t880 * t810 + t943;
t751 = -t878 * t771 - t881 * t955;
t750 = t881 * t771 - t878 * t955;
t738 = pkin(1) * t741;
t737 = t875 * t760 + t916;
t736 = -t875 * t968 - t916;
t733 = t873 * t760 - t906;
t732 = -t873 * t968 + t906;
t731 = pkin(5) * t920 + t962;
t727 = -t879 * t785 + t882 * t788;
t724 = t882 * t785 + t879 * t788;
t716 = -t879 * t773 + t882 * t775;
t715 = -t879 * t772 + t882 * t774;
t714 = t882 * t773 + t879 * t775;
t713 = t882 * t772 + t879 * t774;
t712 = t880 * t764 - t877 * t766;
t710 = t880 * t766 + t968;
t699 = t875 * t757 - t873 * t763;
t698 = t875 * t756 + t873 * t765;
t697 = t873 * t758 + t875 * t764;
t696 = t873 * t757 + t875 * t763;
t695 = t873 * t756 - t875 * t765;
t689 = t873 * t749 - t766 * t875;
t687 = t881 * t737 + t878 * t762;
t686 = t881 * t736 + t878 * t761;
t685 = t878 * t737 - t881 * t762;
t684 = t878 * t736 - t881 * t761;
t683 = t875 * t712 + t873 * t812;
t681 = t873 * t712 - t875 * t812;
t680 = t873 * t711 + t875 * t811;
t678 = -pkin(1) * t780 + t908;
t677 = -pkin(1) * t776 + t887;
t674 = -t879 * t750 + t882 * t751;
t673 = t882 * t750 + t879 * t751;
t668 = pkin(2) * t671;
t667 = pkin(2) * t872 + pkin(6) * t921;
t666 = -t874 * t724 + t876 * t727;
t665 = t876 * t724 + t874 * t727;
t664 = t881 * t700 + t878 * t755;
t663 = t881 * t699 + t878 * t754;
t662 = t881 * t698 + t878 * t753;
t660 = t878 * t699 - t881 * t754;
t659 = t878 * t698 - t881 * t753;
t657 = t881 * t690 + t878 * t748;
t646 = t881 * t683 + t878 * t710;
t645 = t881 * t682 + t878 * t709;
t644 = t878 * t683 - t881 * t710;
t641 = pkin(1) * t726 + t911;
t640 = pkin(1) * t724 + t896;
t639 = -pkin(6) * t785 - t878 * t702 + t875 * t935;
t638 = -pkin(6) * t787 - t878 * t701 + t873 * t935;
t637 = pkin(6) * t788 + t881 * t702 + t875 * t942;
t636 = -pkin(6) * t789 + t881 * t701 + t873 * t942;
t632 = -t879 * t685 + t882 * t687;
t631 = -t879 * t684 + t882 * t686;
t630 = t882 * t685 + t879 * t687;
t629 = t882 * t684 + t879 * t686;
t628 = -pkin(6) * t772 + t881 * t649;
t627 = pkin(6) * t774 + t878 * t649;
t622 = t881 * t650 + t942;
t615 = -t879 * t661 + t882 * t664;
t614 = -t879 * t660 + t882 * t663;
t613 = -t879 * t659 + t882 * t662;
t612 = t882 * t661 + t879 * t664;
t611 = t882 * t660 + t879 * t663;
t610 = t882 * t659 + t879 * t662;
t609 = -pkin(3) * t697 - t893;
t608 = -pkin(3) * t689 - t894;
t607 = -t879 * t656 + t882 * t657;
t606 = t882 * t656 + t879 * t657;
t605 = pkin(1) * t713 + t903;
t604 = -t879 * t644 + t882 * t646;
t603 = -t879 * t643 + t882 * t645;
t602 = t882 * t644 + t879 * t646;
t601 = t882 * t643 + t879 * t645;
t600 = -pkin(1) * t619 - t668;
t596 = -pkin(5) * t724 - t879 * t637 + t882 * t639;
t595 = -pkin(5) * t726 - t879 * t636 + t882 * t638;
t594 = pkin(5) * t727 + t882 * t637 + t879 * t639;
t593 = -pkin(5) * t728 + t882 * t636 + t879 * t638;
t590 = -qJ(4) * t697 - t873 * t626 + t875 * t654;
t589 = -pkin(5) * t713 - t879 * t627 + t882 * t628;
t588 = pkin(5) * t715 + t882 * t627 + t879 * t628;
t586 = t873 * t599 - t875 * t675;
t585 = -t879 * t621 + t882 * t622;
t584 = t882 * t621 + t879 * t622;
t582 = -qJ(4) * t689 - t873 * t624 + t875 * t652;
t581 = pkin(5) * t619 + pkin(6) * t932 - t879 * t667;
t580 = pkin(5) * t983 + pkin(6) * t939 + t882 * t667 + t962;
t579 = -pkin(3) * t680 - t890;
t578 = -pkin(6) * t621 - (pkin(3) * t878 - qJ(4) * t881) * t649;
t577 = -qJ(4) * t680 + t875 * t592 + t709 * t961;
t576 = pkin(6) * t622 - (-pkin(3) * t881 - qJ(4) * t878 - pkin(2)) * t649;
t575 = -pkin(6) * t661 + t881 * t590 - t878 * t609;
t574 = t881 * t587 + t878 * t598;
t571 = pkin(1) * t612 + t904;
t570 = -pkin(6) * t656 + t881 * t582 - t878 * t608;
t569 = -pkin(2) * t697 + pkin(6) * t664 + t878 * t590 + t881 * t609;
t568 = pkin(1) * t584 + t922;
t567 = -pkin(3) * t586 - t910;
t566 = pkin(1) * t606 + t905;
t565 = -pkin(2) * t689 + pkin(6) * t657 + t878 * t582 + t881 * t608;
t564 = pkin(1) * t601 + t892;
t563 = -qJ(4) * t586 + (-pkin(7) * t875 + t961) * t598;
t562 = -pkin(6) * t643 + t881 * t577 - t878 * t579;
t561 = -pkin(2) * t680 + pkin(6) * t645 + t878 * t577 + t881 * t579;
t560 = -t879 * t573 + t882 * t574;
t559 = t882 * t573 + t879 * t574;
t558 = -pkin(5) * t584 - t879 * t576 + t882 * t578;
t557 = pkin(1) * t649 + pkin(5) * t585 + t882 * t576 + t879 * t578;
t556 = -pkin(5) * t612 - t879 * t569 + t882 * t575;
t555 = -pkin(1) * t697 + pkin(5) * t615 + t882 * t569 + t879 * t575;
t554 = -pkin(5) * t606 - t879 * t565 + t882 * t570;
t553 = -pkin(1) * t689 + pkin(5) * t607 + t882 * t565 + t879 * t570;
t552 = -pkin(6) * t573 + t881 * t563 - t878 * t567;
t551 = -pkin(5) * t601 - t879 * t561 + t882 * t562;
t550 = -pkin(1) * t680 + pkin(5) * t603 + t882 * t561 + t879 * t562;
t549 = -pkin(2) * t586 + pkin(6) * t574 + t878 * t563 + t881 * t567;
t548 = pkin(1) * t559 + t888;
t547 = -pkin(5) * t559 - t879 * t549 + t882 * t552;
t546 = -pkin(1) * t586 + pkin(5) * t560 + t882 * t549 + t879 * t552;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t949, -t946, -t902, -qJ(1) * t902, 0, 0, t794, 0, -t965, 0, t977, t978, t982, pkin(5) * t947 + qJ(1) * t982 - t874 * t731, 0, 0, -t987, 0, -t979, 0, t997, t998, t994, qJ(1) * t994 - t874 * t580 + t876 * t581, -t975, -t874 * t714 + t876 * t716, t666, t975, t988, 0, -qJ(1) * t989 - t874 * t593 + t876 * t595, -qJ(1) * t665 - t874 * t594 + t876 * t596, t876 * t589 - t874 * t588 - qJ(1) * (t876 * t713 + t874 * t715), t876 * t558 - t874 * t557 - qJ(1) * (t876 * t584 + t874 * t585), -t874 * t630 + t876 * t632, -t874 * t602 + t876 * t604, -t874 * t610 + t876 * t613, -t874 * t629 + t876 * t631, -t874 * t611 + t876 * t614, -t874 * t673 + t876 * t674, t876 * t556 - t874 * t555 - qJ(1) * (t876 * t612 + t874 * t615), t876 * t554 - t874 * t553 - qJ(1) * (t876 * t606 + t874 * t607), t876 * t551 - t874 * t550 - qJ(1) * (t876 * t601 + t874 * t603), t876 * t547 - t874 * t546 - qJ(1) * (t876 * t559 + t874 * t560); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t946, -t949, t918, qJ(1) * t918, 0, 0, t965, 0, t794, 0, -t978, t977, t981, pkin(5) * t952 + qJ(1) * t981 + t876 * t731, 0, 0, t979, 0, -t987, 0, -t998, t997, t995, qJ(1) * t995 + t876 * t580 + t874 * t581, t976, t876 * t714 + t874 * t716, t665, -t976, -t989, 0, -qJ(1) * t988 + t876 * t593 + t874 * t595, qJ(1) * t666 + t876 * t594 + t874 * t596, t874 * t589 + t876 * t588 + qJ(1) * (-t874 * t713 + t876 * t715), t874 * t558 + t876 * t557 + qJ(1) * (-t874 * t584 + t876 * t585), t876 * t630 + t874 * t632, t876 * t602 + t874 * t604, t876 * t610 + t874 * t613, t876 * t629 + t874 * t631, t876 * t611 + t874 * t614, t876 * t673 + t874 * t674, t874 * t556 + t876 * t555 + qJ(1) * (-t874 * t612 + t876 * t615), t874 * t554 + t876 * t553 + qJ(1) * (-t874 * t606 + t876 * t607), t874 * t551 + t876 * t550 + qJ(1) * (-t874 * t601 + t876 * t603), t874 * t547 + t876 * t546 + qJ(1) * (-t874 * t559 + t876 * t560); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t848, t850, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t769, t770, 0, -t738, 0, 0, 0, 0, 0, t866, t678, t677, 0, t600, t856, t842, 0, t858, 0, 0, t641, t640, t605, t568, t733, t681, t695, t732, t696, t838, t571, t566, t564, t548; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t872, -t848, 0, 0, 0, t845, 0, -t844, 0, t907, t818, t741, pkin(5) * t741, 0, 0, -t780, 0, -t776, 0, t986, t707, t619, t581, -t747, t716, t727, t747, t728, 0, t595, t596, t589, t558, t632, t604, t613, t631, t614, t674, t556, t554, t551, t547; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t872, 0, -t850, 0, 0, 0, t844, 0, t845, 0, -t818, t907, t920, t731, 0, 0, t776, 0, -t780, 0, -t707, t986, t983, t580, t744, t714, t724, -t744, -t726, 0, t593, t594, t588, t557, t630, t602, t610, t629, t611, t673, t555, t553, t550, t546; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t848, t850, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t769, t770, 0, -t738, 0, 0, 0, 0, 0, t866, t678, t677, 0, t600, t856, t842, 0, t858, 0, 0, t641, t640, t605, t568, t733, t681, t695, t732, t696, t838, t571, t566, t564, t548; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t883, 0, 0, -t872, -t901, 0, 0, 0, -t835, 0, -t832, 0, t980, t803, t671, pkin(6) * t671, t799, t775, t788, -t799, t789, 0, t638, t639, t628, t578, t687, t646, t662, t686, t663, t751, t575, t570, t562, t552; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t883, 0, qJDD(2), 0, t872, 0, t797, 0, 0, 0, t832, 0, -t835, 0, -t803, t980, t921, t667, t798, t773, t785, -t798, -t787, 0, t636, t637, t627, t576, t685, t644, t659, t684, t660, t750, t569, t565, t561, t549; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t901, -t797, 0, 0, 0, 0, 0, 0, 0, t866, t908, t887, 0, -t668, t856, t842, 0, t858, 0, 0, t911, t896, t903, t922, t733, t681, t695, t732, t696, t838, t904, t905, t892, t888; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t866, 0, -t865, 0, 0, -t872, t734, 0, t925, t829, t820, -t925, t821, 0, t717, t718, t649, qJ(4) * t649, t737, t683, t698, t736, t699, -t955, t590, t582, t577, t563; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t865, 0, t866, 0, t872, 0, t735, 0, t846, -t831, -t857, -t846, -t948, 0, t701, t702, 0, pkin(3) * t649, -t762, -t710, -t753, -t761, -t754, t771, t609, t608, t579, t567; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t866, -t734, -t735, 0, 0, t856, t842, 0, t858, 0, 0, t923, t899, t912, t931, t733, t681, t695, t732, t696, t838, t913, t914, t895, t889; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t857, t948, t846, 0, t859, 0, 0, t722, t701, 0, t760, t712, t756, -t968, t757, 0, t654, t652, t592, -pkin(7) * t598; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t857, -t957, t948, -t846, 0, -t722, 0, t702, 0, -t841, -t812, -t765, t841, t763, t849, t626, t624, -pkin(4) * t709, -pkin(4) * t598; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t846, t831, t857, t846, t948, 0, -t701, -t702, 0, 0, t762, t710, t753, t761, t754, -t771, t893, t894, t890, t910; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t807, t764, t805, -t915, t808, t915, 0, t675, t634, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t819, t766, t810, -t806, -t804, t819, -t675, 0, t635, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t841, t812, t765, -t841, -t763, -t849, -t634, -t635, 0, 0;];
m_new_reg = t1;
