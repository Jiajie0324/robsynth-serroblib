% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRPP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:59
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRPP5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPP5_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPP5_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPP5_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPP5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RRRPP5_invdynB_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:58:38
% EndTime: 2019-12-31 20:58:49
% DurationCPUTime: 11.62s
% Computational Cost: add. (17016->475), mult. (36587->596), div. (0->0), fcn. (23946->6), ass. (0->339)
t678 = sin(qJ(1));
t681 = cos(qJ(1));
t676 = sin(qJ(3));
t677 = sin(qJ(2));
t679 = cos(qJ(3));
t680 = cos(qJ(2));
t629 = (t676 * t680 + t677 * t679) * qJD(1);
t626 = t629 ^ 2;
t724 = qJD(1) * t677;
t627 = -t679 * t680 * qJD(1) + t676 * t724;
t770 = t627 ^ 2;
t780 = -t770 - t626;
t720 = qJD(1) * qJD(2);
t712 = t680 * t720;
t719 = qJDD(1) * t677;
t638 = t712 + t719;
t665 = t680 * qJDD(1);
t713 = t677 * t720;
t701 = -t665 + t713;
t549 = -t627 * qJD(3) + t679 * t638 - t676 * t701;
t672 = qJD(2) + qJD(3);
t733 = t672 * t627;
t510 = t733 + t549;
t709 = t638 * t676 + t679 * t701;
t693 = (qJD(3) - t672) * t629 + t709;
t447 = t510 * t679 + t676 * t693;
t453 = -t510 * t676 + t679 * t693;
t853 = t447 * t677 - t453 * t680;
t861 = t678 * t780 + t681 * t853;
t871 = pkin(5) * t861;
t862 = t678 * t853 - t681 * t780;
t870 = pkin(5) * t862;
t397 = t447 * t680 + t453 * t677;
t377 = pkin(1) * t397 + pkin(2) * t447;
t769 = t672 ^ 2;
t782 = t626 + t769;
t671 = qJDD(2) + qJDD(3);
t742 = t627 * t629;
t698 = t671 + t742;
t784 = t698 * t679;
t815 = -t782 * t676 + t784;
t785 = t698 * t676;
t816 = t782 * t679 + t785;
t461 = t677 * t816 - t680 * t815;
t513 = t733 - t549;
t420 = t461 * t678 + t681 * t513;
t873 = pkin(5) * t420;
t423 = t461 * t681 - t513 * t678;
t872 = pkin(5) * t423;
t869 = pkin(6) * t397;
t779 = t770 - t769;
t794 = t679 * t779 - t785;
t796 = t676 * t779 + t784;
t468 = t677 * t796 - t680 * t794;
t838 = t468 * t678;
t868 = t693 * t681 - t838;
t836 = t468 * t681;
t867 = t693 * t678 + t836;
t866 = qJ(4) * t693 + t377;
t863 = -pkin(1) * t780 + pkin(6) * t853;
t503 = (qJD(3) + t672) * t629 + t709;
t817 = t513 * t679;
t446 = t503 * t676 + t817;
t756 = t513 * t676;
t455 = -t503 * t679 + t756;
t404 = t446 * t677 + t455 * t680;
t581 = t626 - t770;
t572 = t681 * t581;
t865 = t404 * t678 - t572;
t746 = t581 * t678;
t864 = t404 * t681 + t746;
t607 = t626 - t769;
t699 = t671 - t742;
t783 = t699 * t676;
t522 = t607 * t679 - t783;
t787 = t679 * t699;
t800 = t607 * t676 + t787;
t809 = t522 * t677 + t680 * t800;
t829 = -t510 * t681 + t678 * t809;
t827 = t510 * t678 + t681 * t809;
t826 = t677 * t815 + t680 * t816;
t850 = pkin(6) * t826;
t859 = pkin(7) * t447;
t858 = pkin(1) * t826 + pkin(2) * t816;
t856 = -pkin(1) * t513 - pkin(6) * t461;
t855 = pkin(2) * t780 + pkin(7) * t453;
t854 = -t446 * t680 + t455 * t677;
t548 = qJD(3) * t629 + t709;
t613 = t672 * t629;
t502 = t548 + t613;
t781 = -t769 - t770;
t793 = t679 * t781 - t783;
t795 = t676 * t781 + t787;
t813 = -t677 * t795 + t680 * t793;
t835 = t681 * t813;
t828 = t502 * t678 + t835;
t852 = pkin(5) * t828;
t837 = t678 * t813;
t830 = -t681 * t502 + t837;
t851 = pkin(5) * t830;
t812 = t677 * t793 + t680 * t795;
t847 = -pkin(1) * t812 - pkin(2) * t795;
t723 = qJD(4) * t672;
t659 = -0.2e1 * t723;
t846 = -qJ(4) * t698 + t659 - t858;
t845 = t522 * t680 - t677 * t800;
t810 = t677 * t794 + t680 * t796;
t842 = pkin(6) * t812;
t841 = pkin(6) * t813;
t840 = pkin(7) * t815;
t839 = pkin(7) * t816;
t834 = -qJ(4) * t781 + t847;
t832 = -pkin(1) * t502 + t841;
t831 = pkin(2) * t513 - t840;
t823 = pkin(7) * t793;
t822 = pkin(7) * t795;
t821 = qJ(4) * t780;
t818 = t513 * qJ(4);
t804 = qJ(5) * t510;
t579 = t678 * t742;
t731 = t672 * t679;
t704 = t676 * t549 + t629 * t731;
t732 = t672 * t676;
t602 = t629 * t732;
t726 = t679 * t549 - t602;
t771 = -t677 * t704 + t680 * t726;
t727 = t681 * t771 + t579;
t715 = t627 * t731;
t696 = t548 * t676 + t715;
t703 = -t679 * t548 + t627 * t732;
t773 = -t677 * t703 + t680 * t696;
t799 = t681 * t773 - t579;
t580 = t681 * t742;
t728 = t678 * t771 - t580;
t798 = t678 * t773 + t580;
t578 = pkin(3) * t627 - qJ(4) * t629;
t683 = qJD(1) ^ 2;
t729 = t677 * t683;
t648 = g(1) * t681 + g(2) * t678;
t631 = -pkin(1) * t683 + qJDD(1) * pkin(6) - t648;
t739 = t631 * t677;
t535 = qJDD(2) * pkin(2) - pkin(7) * t638 - t739 + (pkin(2) * t729 + pkin(7) * t720 - g(3)) * t680;
t600 = -t677 * g(3) + t680 * t631;
t675 = t680 ^ 2;
t667 = t675 * t683;
t682 = qJD(2) ^ 2;
t653 = -t667 - t682;
t539 = t653 * pkin(2) + t665 * pkin(7) + t600;
t472 = -t679 * t535 + t539 * t676;
t694 = -t671 * pkin(3) - qJ(4) * t769 + qJDD(4) + t472;
t395 = -t671 * pkin(4) - (-pkin(4) * t627 + (2 * qJD(5)) - t578) * t629 + t694 - t804;
t656 = t681 * t671;
t702 = t602 - t715;
t695 = (-t627 * t676 - t629 * t679) * t672;
t789 = t677 * t695;
t774 = t680 * t702 - t789;
t797 = t678 * t774 - t656;
t734 = t671 * t678;
t792 = t681 * t774 + t734;
t786 = t680 * t695;
t601 = -pkin(4) * t672 - qJ(5) * t629;
t768 = 0.2e1 * qJD(4);
t776 = -t548 * pkin(4) - t770 * qJ(5) + qJDD(5) + (t768 + t601) * t629;
t775 = t677 * t702 + t786;
t772 = t677 * t696 + t680 * t703;
t439 = t677 * t726 + t680 * t704;
t767 = pkin(3) + pkin(4);
t766 = pkin(3) * t679;
t765 = t548 * pkin(3);
t473 = t676 * t535 + t679 * t539;
t415 = -t472 * t679 + t473 * t676;
t764 = t415 * t677;
t763 = t415 * t680;
t761 = t502 * t679;
t647 = t678 * g(1) - t681 * g(2);
t697 = qJDD(1) * pkin(1) + t647;
t553 = -t701 * pkin(2) - (qJD(2) * pkin(2) - pkin(7) * t724) * t724 + (t675 * pkin(7) + pkin(6)) * t683 + t697;
t753 = t553 * t676;
t752 = t553 * t679;
t630 = t683 * pkin(6) + t697;
t741 = t630 * t677;
t740 = t630 * t680;
t639 = t665 - 0.2e1 * t713;
t738 = t639 * t680;
t655 = t680 * t729;
t645 = qJDD(2) + t655;
t737 = t645 * t677;
t646 = qJDD(2) - t655;
t736 = t646 * t677;
t735 = t646 * t680;
t674 = t677 ^ 2;
t730 = t674 * t683;
t725 = t674 + t675;
t722 = qJD(5) * t627;
t718 = qJDD(1) * t678;
t717 = qJDD(1) * t681;
t716 = t629 * t768;
t714 = (-t548 - t502) * pkin(3);
t711 = -qJ(4) * t676 - pkin(2);
t416 = t472 * t676 + t679 * t473;
t599 = g(3) * t680 + t739;
t538 = t599 * t677 + t680 * t600;
t589 = -t647 * t678 - t681 * t648;
t707 = t678 * t655;
t706 = t681 * t655;
t642 = -t678 * t683 + t717;
t705 = -pkin(5) * t642 - g(3) * t678;
t700 = pkin(3) * t769 - t671 * qJ(4) + t627 * t578 - t473;
t537 = t599 * t680 - t600 * t677;
t588 = t647 * t681 - t648 * t678;
t658 = 0.2e1 * t723;
t428 = t658 - t700;
t692 = pkin(4) * t770 - t601 * t672 + t700;
t691 = t578 * t629 + t694;
t689 = -qJ(5) * t548 + t692;
t688 = -pkin(3) * t613 + t553;
t687 = t688 - t818;
t686 = t687 + t716;
t685 = t688 - t765 - 0.2e1 * t818;
t684 = t687 + t776;
t652 = t667 - t682;
t651 = -t682 - t730;
t650 = t682 - t730;
t644 = t667 - t730;
t643 = t667 + t730;
t641 = t681 * t683 + t718;
t640 = t725 * qJDD(1);
t637 = 0.2e1 * t712 + t719;
t635 = t680 * t645;
t634 = t725 * t720;
t623 = -pkin(5) * t641 + g(3) * t681;
t618 = -0.2e1 * t722;
t604 = t638 * t680 - t674 * t720;
t603 = -t675 * t720 + t677 * t701;
t595 = -t651 * t677 - t735;
t594 = -t650 * t677 + t635;
t593 = t653 * t680 - t737;
t592 = t652 * t680 - t736;
t591 = t651 * t680 - t736;
t590 = t653 * t677 + t635;
t586 = t640 * t681 - t643 * t678;
t585 = t640 * t678 + t643 * t681;
t584 = -t637 * t677 + t738;
t565 = t595 * t681 + t637 * t678;
t564 = t593 * t681 - t639 * t678;
t563 = t595 * t678 - t637 * t681;
t562 = t593 * t678 + t639 * t681;
t561 = (-t627 * t679 + t629 * t676) * t672;
t555 = -pkin(6) * t591 - t740;
t554 = -pkin(6) * t590 - t741;
t547 = -pkin(1) * t591 + t600;
t546 = -pkin(1) * t590 + t599;
t501 = t548 - t613;
t485 = t538 * t681 - t630 * t678;
t484 = t538 * t678 + t630 * t681;
t477 = t561 * t680 - t789;
t474 = -qJ(4) * t502 + qJ(5) * t699;
t470 = -t752 + t839;
t469 = -t753 - t822;
t451 = t761 - t756;
t445 = t502 * t676 + t817;
t430 = -qJ(5) * t698 - t513 * t767;
t427 = -t753 + t831;
t426 = -pkin(2) * t503 + t752 + t823;
t425 = t686 - t765;
t418 = t691 - t821;
t417 = -pkin(3) * t780 + t428;
t413 = t503 * t678 + t835;
t410 = -t503 * t681 + t837;
t408 = t714 + t686;
t407 = t685 + t716;
t406 = pkin(2) * t553 + pkin(7) * t416;
t400 = -t445 * t677 + t451 * t680;
t396 = t658 - t689 + 0.2e1 * t722;
t394 = t684 - t765;
t393 = t473 + t858;
t386 = t472 + t847;
t385 = t428 * t679 + t676 * t691;
t384 = t428 * t676 - t679 * t691;
t383 = -t415 + t859;
t382 = qJ(5) * t782 + t685 + t776;
t381 = -qJ(4) * t761 - t408 * t676 - t822;
t380 = -t395 + t804 + t821;
t379 = pkin(3) * t756 + t407 * t679 - t839;
t378 = t416 - t855;
t376 = -pkin(3) * t699 + t691 + t834;
t375 = -t427 * t677 + t470 * t680 + t850;
t374 = t618 + t659 + t767 * t780 + (-t693 - t548) * qJ(5) + t692;
t373 = t416 * t680 - t764;
t372 = t416 * t677 + t763;
t371 = t408 * t679 + t711 * t502 + t823;
t370 = -pkin(4) * t502 - qJ(5) * t781 + t684 + t714;
t369 = t840 + t407 * t676 - (pkin(2) + t766) * t513;
t368 = -pkin(3) * t782 + t700 + t846;
t367 = -t426 * t677 + t469 * t680 - t842;
t366 = t373 * t681 - t553 * t678;
t365 = t373 * t678 + t553 * t681;
t364 = pkin(3) * t510 + t866;
t363 = -t767 * t782 + t618 + t689 + t846;
t362 = t395 * t676 + t396 * t679;
t361 = -t395 * t679 + t396 * t676;
t360 = -t417 * t676 + t418 * t679 + t859;
t359 = qJ(4) * t394 - qJ(5) * t395;
t358 = -t767 * t510 - t866;
t357 = t382 * t679 - t430 * t676 - t839;
t356 = t417 * t679 + t418 * t676 - t855;
t355 = -t699 * t767 + t395 + t834;
t354 = -t370 * t676 + t474 * t679 - t822;
t353 = -pkin(1) * t372 - pkin(2) * t415;
t352 = t382 * t676 + t430 * t679 - t831;
t351 = -t384 * t677 + t385 * t680;
t350 = t384 * t680 + t385 * t677;
t349 = -pkin(2) * t502 + t370 * t679 + t474 * t676 + t823;
t348 = -pkin(7) * t384 + (-pkin(3) * t676 + qJ(4) * t679) * t425;
t347 = -qJ(5) * t396 + t767 * t394;
t346 = t351 * t681 - t425 * t678;
t345 = t351 * t678 + t425 * t681;
t344 = pkin(7) * t385 + (-t711 + t766) * t425;
t343 = -pkin(6) * t372 - pkin(7) * t763 - t406 * t677;
t342 = -t374 * t676 + t380 * t679 - t859;
t341 = -t371 * t677 + t381 * t680 - t842;
t340 = t374 * t679 + t380 * t676 + t855;
t339 = -t369 * t677 + t379 * t680 - t850;
t338 = -t378 * t677 + t383 * t680 + t869;
t337 = -t361 * t677 + t362 * t680;
t336 = t361 * t680 + t362 * t677;
t335 = -pkin(1) * t350 - pkin(2) * t384 + pkin(3) * t691 - qJ(4) * t428;
t334 = t337 * t681 - t394 * t678;
t333 = t337 * t678 + t394 * t681;
t332 = -t352 * t677 + t357 * t680 - t850;
t331 = -t356 * t677 + t360 * t680 + t869;
t330 = -t349 * t677 + t354 * t680 - t842;
t329 = -pkin(7) * t361 - t347 * t676 + t359 * t679;
t328 = -t340 * t677 + t342 * t680 - t869;
t327 = pkin(2) * t394 + pkin(7) * t362 + t347 * t679 + t359 * t676;
t326 = -pkin(6) * t350 - t344 * t677 + t348 * t680;
t325 = -pkin(1) * t336 - pkin(2) * t361 - qJ(4) * t396 + t767 * t395;
t324 = -pkin(6) * t336 - t327 * t677 + t329 * t680;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t641, -t642, 0, t589, 0, 0, 0, 0, 0, 0, t564, t565, t586, t485, 0, 0, 0, 0, 0, 0, t413, t423, t861, t366, 0, 0, 0, 0, 0, 0, t828, t861, -t423, t346, 0, 0, 0, 0, 0, 0, t828, -t423, -t861, t334; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t642, -t641, 0, t588, 0, 0, 0, 0, 0, 0, t562, t563, t585, t484, 0, 0, 0, 0, 0, 0, t410, t420, t862, t365, 0, 0, 0, 0, 0, 0, t830, t862, -t420, t345, 0, 0, 0, 0, 0, 0, t830, -t420, -t862, t333; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t590, t591, 0, -t537, 0, 0, 0, 0, 0, 0, t812, -t826, -t397, t372, 0, 0, 0, 0, 0, 0, t812, -t397, t826, t350, 0, 0, 0, 0, 0, 0, t812, t826, t397, t336; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t642, 0, -t641, 0, t705, -t623, -t588, -pkin(5) * t588, t604 * t681 - t707, t584 * t681 - t644 * t678, t594 * t681 + t677 * t718, t603 * t681 + t707, t592 * t681 + t665 * t678, qJDD(2) * t678 + t634 * t681, -pkin(5) * t562 - t546 * t678 + t554 * t681, -pkin(5) * t563 - t547 * t678 + t555 * t681, -pkin(5) * t585 + t537 * t681, -pkin(5) * t484 - (pkin(1) * t678 - pkin(6) * t681) * t537, t727, t864, t827, t799, -t867, t792, -pkin(5) * t410 + t367 * t681 - t386 * t678, t375 * t681 - t393 * t678 - t873, t338 * t681 - t377 * t678 - t870, -pkin(5) * t365 + t343 * t681 - t353 * t678, t727, t827, -t864, t792, t867, t799, t341 * t681 - t376 * t678 - t851, t331 * t681 - t364 * t678 - t870, t339 * t681 - t368 * t678 + t873, -pkin(5) * t345 + t326 * t681 - t335 * t678, t727, t400 * t681 - t746, -t827, t799, -t501 * t678 - t836, t477 * t681 + t734, t330 * t681 - t355 * t678 - t851, t332 * t681 - t363 * t678 + t873, t328 * t681 - t358 * t678 + t870, -pkin(5) * t333 + t324 * t681 - t325 * t678; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t641, 0, t642, 0, t623, t705, t589, pkin(5) * t589, t604 * t678 + t706, t584 * t678 + t644 * t681, t594 * t678 - t677 * t717, t603 * t678 - t706, t592 * t678 - t665 * t681, -qJDD(2) * t681 + t634 * t678, pkin(5) * t564 + t546 * t681 + t554 * t678, pkin(5) * t565 + t547 * t681 + t555 * t678, pkin(5) * t586 + t537 * t678, pkin(5) * t485 - (-pkin(1) * t681 - pkin(6) * t678) * t537, t728, t865, t829, t798, t868, t797, pkin(5) * t413 + t367 * t678 + t386 * t681, t375 * t678 + t393 * t681 + t872, t338 * t678 + t377 * t681 + t871, pkin(5) * t366 + t343 * t678 + t353 * t681, t728, t829, -t865, t797, -t868, t798, t341 * t678 + t376 * t681 + t852, t331 * t678 + t364 * t681 + t871, t339 * t678 + t368 * t681 - t872, pkin(5) * t346 + t326 * t678 + t335 * t681, t728, t400 * t678 + t572, -t829, t798, t501 * t681 - t838, t477 * t678 - t656, t330 * t678 + t355 * t681 + t852, t332 * t678 + t363 * t681 - t872, t328 * t678 + t358 * t681 - t871, pkin(5) * t334 + t324 * t678 + t325 * t681; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t647, t648, 0, 0, (t638 + t712) * t677, t637 * t680 + t639 * t677, t650 * t680 + t737, t738, t652 * t677 + t735, 0, pkin(1) * t639 + pkin(6) * t593 + t740, -pkin(1) * t637 + pkin(6) * t595 - t741, pkin(1) * t643 + pkin(6) * t640 + t538, pkin(1) * t630 + pkin(6) * t538, t439, t854, -t845, t772, t810, t775, -pkin(1) * t503 + t426 * t680 + t469 * t677 + t841, t427 * t680 + t470 * t677 - t856, t378 * t680 + t383 * t677 + t863, pkin(1) * t553 + pkin(6) * t373 - pkin(7) * t764 + t406 * t680, t439, -t845, -t854, t775, -t810, t772, t371 * t680 + t381 * t677 + t832, t356 * t680 + t360 * t677 + t863, t369 * t680 + t379 * t677 + t856, pkin(1) * t425 + pkin(6) * t351 + t344 * t680 + t348 * t677, t439, t445 * t680 + t451 * t677, t845, t772, t810, t561 * t677 + t786, t349 * t680 + t354 * t677 + t832, t352 * t680 + t357 * t677 + t856, t340 * t680 + t342 * t677 - t863, pkin(1) * t394 + pkin(6) * t337 + t327 * t680 + t329 * t677;];
tauB_reg = t1;
