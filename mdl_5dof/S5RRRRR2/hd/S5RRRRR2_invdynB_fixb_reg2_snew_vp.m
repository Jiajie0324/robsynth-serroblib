% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:54
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRRR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(2,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR2_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR2_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'S5RRRRR2_invdynB_fixb_reg2_snew_vp: pkin has to be [2x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:53:50
% EndTime: 2019-12-05 18:54:01
% DurationCPUTime: 6.68s
% Computational Cost: add. (19803->444), mult. (27706->734), div. (0->0), fcn. (20804->10), ass. (0->365)
t558 = sin(qJ(1));
t563 = cos(qJ(1));
t538 = t563 * g(1) + t558 * g(2);
t565 = qJD(1) ^ 2;
t526 = -t565 * pkin(1) - t538;
t557 = sin(qJ(2));
t562 = cos(qJ(2));
t537 = t558 * g(1) - t563 * g(2);
t569 = qJDD(1) * pkin(1) + t537;
t478 = t562 * t526 + t557 * t569;
t556 = sin(qJ(3));
t561 = cos(qJ(3));
t466 = -t556 * g(3) + t561 * t478;
t551 = qJD(1) + qJD(2);
t547 = t551 ^ 2;
t553 = t561 ^ 2;
t544 = t553 * t547;
t564 = qJD(3) ^ 2;
t534 = -t544 - t564;
t450 = t534 * pkin(2) + t466;
t555 = sin(qJ(4));
t560 = cos(qJ(4));
t465 = t561 * g(3) + t556 * t478;
t536 = t561 * t547 * t556;
t527 = qJDD(3) + t536;
t566 = t527 * pkin(2) - t465;
t391 = t555 * t450 - t560 * t566;
t386 = t560 * t391;
t392 = t560 * t450 + t555 * t566;
t337 = -t555 * t392 + t386;
t639 = t556 * t337;
t638 = t561 * t337;
t477 = t557 * t526 - t562 * t569;
t474 = t562 * t477;
t425 = -t557 * t478 + t474;
t602 = t557 * t477;
t578 = t562 * t478 + t602;
t637 = t558 * t425 + t563 * t578;
t636 = t563 * t425 - t558 * t578;
t554 = sin(qJ(5));
t605 = t556 * t560;
t609 = t555 * t561;
t505 = (t605 + t609) * t551;
t550 = qJD(3) + qJD(4);
t559 = cos(qJ(5));
t481 = t554 * t505 - t559 * t550;
t483 = t559 * t505 + t554 * t550;
t431 = t483 * t481;
t588 = qJD(3) * t551;
t580 = t561 * t588;
t549 = qJDD(1) + qJDD(2);
t606 = t556 * t549;
t511 = t580 + t606;
t542 = t561 * t549;
t581 = t556 * t588;
t512 = t542 - t581;
t577 = t555 * t511 - t560 * t512;
t432 = -t505 * qJD(4) - t577;
t568 = qJDD(5) - t432;
t628 = -t431 + t568;
t635 = t554 * t628;
t595 = t560 * t561;
t610 = t555 * t556;
t503 = (-t595 + t610) * t551;
t467 = t505 * t503;
t548 = qJDD(3) + qJDD(4);
t627 = -t467 + t548;
t634 = t555 * t627;
t633 = t559 * t628;
t632 = t560 * t627;
t600 = t557 * t549;
t517 = t562 * t547 + t600;
t590 = t562 * t549;
t520 = t557 * t547 - t590;
t573 = t563 * t517 - t558 * t520;
t631 = t558 * t517 + t563 * t520;
t567 = t503 * qJD(4) - t560 * t511 - t555 * t512;
t396 = -t481 * qJD(5) + t554 * t548 - t559 * t567;
t500 = qJD(5) + t503;
t449 = t500 * t481;
t374 = -t449 + t396;
t498 = t550 * t503;
t626 = -t498 - t567;
t625 = t512 - t581;
t579 = -t559 * t548 - t554 * t567;
t371 = (qJD(5) - t500) * t483 + t579;
t408 = (qJD(4) - t550) * t505 + t577;
t479 = t481 ^ 2;
t480 = t483 ^ 2;
t499 = t500 ^ 2;
t501 = t503 ^ 2;
t502 = t505 ^ 2;
t546 = t550 ^ 2;
t405 = t561 * t465 - t556 * t466;
t624 = pkin(1) * t405;
t412 = -t498 + t567;
t358 = -t408 * t555 + t560 * t412;
t623 = pkin(2) * t358;
t622 = pkin(2) * t561;
t621 = t558 * g(3);
t620 = t563 * g(3);
t619 = t500 * t554;
t618 = t500 * t559;
t617 = t550 * t555;
t616 = t550 * t560;
t552 = t556 ^ 2;
t615 = t552 * t547;
t384 = t431 + t568;
t614 = t554 * t384;
t613 = t555 * t391;
t457 = t467 + t548;
t611 = t555 * t457;
t608 = t556 * t527;
t528 = qJDD(3) - t536;
t607 = t556 * t528;
t437 = -t625 * pkin(2) + t477;
t361 = t554 * t392 - t559 * t437;
t362 = t559 * t392 + t554 * t437;
t306 = t559 * t361 - t554 * t362;
t604 = t557 * t306;
t603 = t557 * t437;
t599 = t559 * t384;
t598 = t559 * t391;
t597 = t560 * t437;
t596 = t560 * t457;
t594 = t561 * t477;
t593 = t561 * t528;
t592 = t562 * t306;
t591 = t562 * t437;
t589 = t552 + t553;
t585 = t555 * t431;
t584 = t557 * t467;
t583 = t560 * t431;
t582 = t562 * t467;
t338 = t560 * t392 + t613;
t406 = t556 * t465 + t561 * t466;
t576 = -t558 * t537 - t563 * t538;
t575 = t557 * t536;
t574 = t562 * t536;
t307 = t554 * t361 + t559 * t362;
t572 = t563 * t537 - t558 * t538;
t571 = t557 * t563 + t558 * t562;
t570 = -t557 * t558 + t562 * t563;
t533 = t544 - t564;
t532 = -t564 - t615;
t531 = t564 - t615;
t530 = t563 * qJDD(1) - t558 * t565;
t529 = t558 * qJDD(1) + t563 * t565;
t524 = t544 - t615;
t523 = t544 + t615;
t522 = t571 * g(3);
t521 = t570 * g(3);
t516 = t561 * t527;
t515 = t589 * t549;
t513 = t542 - 0.2e1 * t581;
t510 = 0.2e1 * t580 + t606;
t509 = t589 * t588;
t496 = -t502 + t546;
t495 = t501 - t546;
t494 = t557 * qJDD(3) + t562 * t509;
t493 = -t562 * qJDD(3) + t557 * t509;
t492 = t561 * t511 - t552 * t588;
t491 = -t556 * t512 - t553 * t588;
t490 = -t502 - t546;
t489 = -t556 * t532 - t593;
t488 = -t556 * t531 + t516;
t487 = t561 * t534 - t608;
t486 = t561 * t533 - t607;
t485 = t561 * t532 - t607;
t484 = t556 * t534 + t516;
t471 = t562 * t515 - t557 * t523;
t469 = t557 * t515 + t562 * t523;
t468 = -t556 * t510 + t561 * t513;
t464 = -t502 + t501;
t463 = t562 * t488 + t556 * t600;
t462 = t562 * t486 + t557 * t542;
t461 = t557 * t488 - t556 * t590;
t460 = t557 * t486 - t561 * t590;
t455 = t562 * t492 - t575;
t454 = t562 * t491 + t575;
t453 = t557 * t492 + t574;
t452 = t557 * t491 - t574;
t451 = -t546 - t501;
t448 = t562 * t489 + t557 * t510;
t447 = t562 * t487 - t557 * t513;
t446 = t557 * t489 - t562 * t510;
t445 = t557 * t487 + t562 * t513;
t444 = -t480 + t499;
t443 = t479 - t499;
t442 = (-t503 * t560 + t505 * t555) * t550;
t441 = (-t503 * t555 - t505 * t560) * t550;
t436 = -t501 - t502;
t435 = t562 * t468 - t557 * t524;
t434 = t557 * t468 + t562 * t524;
t428 = -t480 + t479;
t422 = -t480 - t499;
t421 = t560 * t495 - t611;
t420 = -t555 * t496 + t632;
t419 = t555 * t495 + t596;
t418 = t560 * t496 + t634;
t417 = -t555 * t490 - t596;
t416 = t560 * t490 - t611;
t415 = -t557 * t466 + t561 * t474;
t414 = -t557 * t465 + t556 * t474;
t413 = -t499 - t479;
t407 = (qJD(4) + t550) * t505 + t577;
t403 = -t505 * t617 - t560 * t567;
t402 = t505 * t616 - t555 * t567;
t401 = -t555 * t432 + t503 * t616;
t400 = t560 * t432 + t503 * t617;
t399 = t479 + t480;
t398 = t560 * t451 - t634;
t397 = t555 * t451 + t632;
t395 = -t483 * qJD(5) - t579;
t394 = (-t481 * t559 + t483 * t554) * t500;
t393 = (t481 * t554 + t483 * t559) * t500;
t390 = -pkin(1) * t485 + t562 * t466 + t557 * t594;
t389 = -pkin(1) * t484 + t562 * t465 + t556 * t602;
t388 = -t556 * t441 + t561 * t442;
t382 = t562 * t388 + t557 * t548;
t381 = t557 * t388 - t562 * t548;
t380 = t562 * t406 + t602;
t379 = t557 * t406 - t474;
t378 = -pkin(2) * t407 - t597;
t377 = -pkin(2) * t626 + t555 * t437;
t375 = -t449 - t396;
t372 = (-qJD(5) - t500) * t483 - t579;
t370 = -t556 * t419 + t561 * t421;
t369 = -t556 * t418 + t561 * t420;
t368 = t559 * t396 - t483 * t619;
t367 = -t554 * t396 - t483 * t618;
t366 = -t554 * t395 + t481 * t618;
t365 = -t559 * t395 - t481 * t619;
t364 = -t556 * t416 + t561 * t417;
t363 = t561 * t416 + t556 * t417;
t360 = -t408 * t560 - t555 * t412;
t359 = -t560 * t407 - t555 * t626;
t357 = -t555 * t407 + t560 * t626;
t356 = t560 * t394 + t555 * t568;
t355 = t555 * t394 - t560 * t568;
t354 = t559 * t443 - t614;
t353 = -t554 * t444 + t633;
t352 = -t554 * t443 - t599;
t351 = -t559 * t444 - t635;
t350 = -t556 * t402 + t561 * t403;
t349 = -t556 * t400 + t561 * t401;
t348 = -pkin(2) * t416 + t392;
t347 = -t556 * t397 + t561 * t398;
t346 = t561 * t397 + t556 * t398;
t345 = -t554 * t422 - t599;
t344 = t559 * t422 - t614;
t343 = -pkin(2) * t397 + t391;
t342 = t559 * t413 - t635;
t341 = t554 * t413 + t633;
t340 = -t556 * t377 + t437 * t595;
t339 = -t556 * t378 + t437 * t609;
t335 = t560 * t368 + t585;
t334 = t560 * t366 - t585;
t333 = t555 * t368 - t583;
t332 = t555 * t366 + t583;
t331 = t562 * t350 + t584;
t330 = t562 * t349 - t584;
t329 = t557 * t350 - t582;
t328 = t557 * t349 + t582;
t327 = t562 * t370 - t557 * t408;
t326 = t562 * t369 - t557 * t412;
t325 = t557 * t370 + t562 * t408;
t324 = t557 * t369 + t562 * t412;
t323 = t562 * t364 + t557 * t626;
t322 = t557 * t364 - t562 * t626;
t321 = t562 * t347 + t557 * t407;
t320 = t557 * t347 - t562 * t407;
t319 = -pkin(2) * t436 + t338;
t318 = -t555 * t362 + t559 * t386;
t317 = -t555 * t361 + t554 * t386;
t316 = (-t337 * t557 + t556 * t591) * pkin(2);
t315 = -t371 * t559 - t554 * t375;
t314 = t559 * t372 - t554 * t374;
t313 = -t371 * t554 + t559 * t375;
t312 = -t554 * t372 - t559 * t374;
t311 = t560 * t354 - t555 * t371;
t310 = t560 * t353 - t555 * t375;
t309 = t555 * t354 + t560 * t371;
t308 = t555 * t353 + t560 * t375;
t304 = -t556 * t358 + t561 * t360;
t303 = -t556 * t357 + t561 * t359;
t302 = t561 * t358 + t556 * t360;
t301 = -t556 * t355 + t561 * t356;
t300 = t560 * t345 + t374 * t555;
t299 = t555 * t345 - t374 * t560;
t298 = t560 * t342 - t555 * t372;
t297 = t555 * t342 + t560 * t372;
t296 = t560 * t314 - t555 * t428;
t295 = t555 * t314 + t560 * t428;
t294 = t562 * t303 - t557 * t464;
t293 = t557 * t303 + t562 * t464;
t292 = t562 * t340 - t557 * t348;
t291 = t560 * t315 - t555 * t399;
t290 = t555 * t315 + t560 * t399;
t289 = t562 * t304 + t557 * t436;
t288 = t557 * t304 - t562 * t436;
t287 = t562 * t339 - t557 * t343;
t286 = t561 * t338 + t639;
t285 = t556 * t338 - t638;
t284 = -t556 * t333 + t561 * t335;
t283 = -t556 * t332 + t561 * t334;
t282 = t560 * t307 + t613;
t281 = t555 * t307 - t386;
t280 = t562 * t301 - t557 * t393;
t279 = t557 * t301 + t562 * t393;
t278 = -pkin(2) * t299 - t554 * t391;
t277 = -pkin(2) * t297 + t598;
t276 = -pkin(2) * t344 + t560 * t362 + t555 * t598;
t275 = -pkin(2) * t341 + t560 * t361 + t554 * t613;
t274 = -t556 * t319 + t638;
t273 = t562 * t286 + t603;
t272 = t557 * t286 - t591;
t271 = -pkin(1) * t363 + t557 * t340 + t562 * t348;
t270 = -pkin(1) * t346 + t557 * t339 + t562 * t343;
t269 = t562 * t284 - t557 * t367;
t268 = t562 * t283 - t557 * t365;
t267 = t557 * t284 + t562 * t367;
t266 = t557 * t283 + t562 * t365;
t265 = -pkin(2) * t313 + t555 * t306;
t264 = -t556 * t309 + t561 * t311;
t263 = -t556 * t308 + t561 * t310;
t262 = t562 * t274 + t557 * t623;
t261 = -t556 * t299 + t561 * t300;
t260 = t561 * t299 + t556 * t300;
t259 = -t556 * t297 + t561 * t298;
t258 = t561 * t297 + t556 * t298;
t257 = -pkin(1) * t285 + (t337 * t562 + t556 * t603) * pkin(2);
t256 = -pkin(2) * t290 - t307;
t255 = -t556 * t295 + t561 * t296;
t254 = -t556 * t276 + t561 * t318;
t253 = -t556 * t275 + t561 * t317;
t252 = -t556 * t290 + t561 * t291;
t251 = t561 * t290 + t556 * t291;
t250 = (t281 * t557 - t556 * t592) * pkin(2);
t249 = t562 * t264 - t557 * t352;
t248 = t562 * t263 - t557 * t351;
t247 = t557 * t264 + t562 * t352;
t246 = t557 * t263 + t562 * t351;
t245 = t562 * t261 + t557 * t344;
t244 = t557 * t261 - t562 * t344;
t243 = -t556 * t281 + t561 * t282;
t242 = t561 * t281 + t556 * t282;
t241 = t562 * t259 + t557 * t341;
t240 = t557 * t259 - t562 * t341;
t239 = -t556 * t265 + t306 * t595;
t238 = -pkin(1) * t302 + t557 * t274 - t562 * t623;
t237 = t562 * t255 - t557 * t312;
t236 = t557 * t255 + t562 * t312;
t235 = t562 * t252 + t557 * t313;
t234 = t557 * t252 - t562 * t313;
t233 = t562 * t254 - t557 * t278;
t232 = t562 * t253 - t557 * t277;
t231 = t562 * t243 - t604;
t230 = t557 * t243 + t592;
t229 = -pkin(1) * t242 + (-t281 * t562 - t556 * t604) * pkin(2);
t228 = t562 * t239 - t557 * t256;
t227 = -pkin(1) * t260 + t557 * t254 + t562 * t278;
t226 = -pkin(1) * t258 + t557 * t253 + t562 * t277;
t225 = -pkin(1) * t251 + t557 * t239 + t562 * t256;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t529, -t530, 0, t576, 0, 0, 0, 0, 0, 0, -t573, t631, 0, t637, 0, 0, 0, 0, 0, 0, -t558 * t445 + t563 * t447, -t558 * t446 + t563 * t448, -t558 * t469 + t563 * t471, -t558 * t379 + t563 * t380, 0, 0, 0, 0, 0, 0, -t558 * t320 + t563 * t321, -t558 * t322 + t563 * t323, -t558 * t288 + t563 * t289, -t558 * t272 + t563 * t273, 0, 0, 0, 0, 0, 0, -t558 * t240 + t563 * t241, -t558 * t244 + t563 * t245, -t558 * t234 + t563 * t235, -t558 * t230 + t563 * t231; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t530, -t529, 0, t572, 0, 0, 0, 0, 0, 0, -t631, -t573, 0, -t636, 0, 0, 0, 0, 0, 0, t563 * t445 + t558 * t447, t563 * t446 + t558 * t448, t563 * t469 + t558 * t471, t563 * t379 + t558 * t380, 0, 0, 0, 0, 0, 0, t563 * t320 + t558 * t321, t563 * t322 + t558 * t323, t563 * t288 + t558 * t289, t563 * t272 + t558 * t273, 0, 0, 0, 0, 0, 0, t563 * t240 + t558 * t241, t563 * t244 + t558 * t245, t563 * t234 + t558 * t235, t563 * t230 + t558 * t231; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t484, t485, 0, -t405, 0, 0, 0, 0, 0, 0, t346, t363, t302, t285, 0, 0, 0, 0, 0, 0, t258, t260, t251, t242; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t530, 0, -t529, 0, -t621, -t620, -t572, 0, 0, 0, -t631, 0, -t573, 0, -t522, -t521, t636, -pkin(1) * t621, -t558 * t453 + t563 * t455, -t558 * t434 + t563 * t435, -t558 * t461 + t563 * t463, -t558 * t452 + t563 * t454, -t558 * t460 + t563 * t462, -t558 * t493 + t563 * t494, -t558 * t389 + t563 * t414, -t558 * t390 + t563 * t415, t570 * t405, -t558 * t624, -t558 * t329 + t563 * t331, -t558 * t293 + t563 * t294, -t558 * t324 + t563 * t326, -t558 * t328 + t563 * t330, -t558 * t325 + t563 * t327, -t558 * t381 + t563 * t382, -t558 * t270 + t563 * t287, -t558 * t271 + t563 * t292, -t558 * t238 + t563 * t262, -t558 * t257 + t563 * t316, -t558 * t267 + t563 * t269, -t558 * t236 + t563 * t237, -t558 * t246 + t563 * t248, -t558 * t266 + t563 * t268, -t558 * t247 + t563 * t249, -t558 * t279 + t563 * t280, -t558 * t226 + t563 * t232, -t558 * t227 + t563 * t233, -t558 * t225 + t563 * t228, -t558 * t229 + t563 * t250; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t529, 0, t530, 0, t620, -t621, t576, 0, 0, 0, t573, 0, -t631, 0, t521, -t522, t637, pkin(1) * t620, t563 * t453 + t558 * t455, t563 * t434 + t558 * t435, t563 * t461 + t558 * t463, t563 * t452 + t558 * t454, t563 * t460 + t558 * t462, t563 * t493 + t558 * t494, t563 * t389 + t558 * t414, t563 * t390 + t558 * t415, t571 * t405, t563 * t624, t563 * t329 + t558 * t331, t563 * t293 + t558 * t294, t563 * t324 + t558 * t326, t563 * t328 + t558 * t330, t563 * t325 + t558 * t327, t563 * t381 + t558 * t382, t563 * t270 + t558 * t287, t563 * t271 + t558 * t292, t563 * t238 + t558 * t262, t563 * t257 + t558 * t316, t563 * t267 + t558 * t269, t563 * t236 + t558 * t237, t563 * t246 + t558 * t248, t563 * t266 + t558 * t268, t563 * t247 + t558 * t249, t563 * t279 + t558 * t280, t563 * t226 + t558 * t232, t563 * t227 + t558 * t233, t563 * t225 + t558 * t228, t563 * t229 + t558 * t250; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t537, t538, 0, 0, 0, 0, 0, 0, 0, t549, -pkin(1) * t520 - t477, -pkin(1) * t517 - t478, 0, -pkin(1) * t425, (t511 + t580) * t556, t561 * t510 + t556 * t513, t561 * t531 + t608, t625 * t561, t556 * t533 + t593, 0, pkin(1) * t445 - t594, pkin(1) * t446 + t556 * t477, pkin(1) * t469 + t406, pkin(1) * t379, t561 * t402 + t556 * t403, t561 * t357 + t556 * t359, t561 * t418 + t556 * t420, t561 * t400 + t556 * t401, t561 * t419 + t556 * t421, t561 * t441 + t556 * t442, pkin(1) * t320 + t561 * t378 + t437 * t610, pkin(1) * t322 + t561 * t377 + t556 * t597, pkin(1) * t288 + t561 * t319 + t639, pkin(1) * t272 - t437 * t622, t561 * t333 + t556 * t335, t561 * t295 + t556 * t296, t561 * t308 + t556 * t310, t561 * t332 + t556 * t334, t561 * t309 + t556 * t311, t561 * t355 + t556 * t356, pkin(1) * t240 + t561 * t275 + t556 * t317, pkin(1) * t244 + t561 * t276 + t556 * t318, pkin(1) * t234 + t561 * t265 + t306 * t605, pkin(1) * t230 + t306 * t622;];
tauB_reg = t1;
