% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S5RRRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% 
% Output:
% MMD_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:54
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S5RRRRR2_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(2,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR2_inertiaDJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR2_inertiaDJ_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'S5RRRRR2_inertiaDJ_reg2_slag_vp: pkin has to be [2x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:53:43
% EndTime: 2019-12-05 18:53:50
% DurationCPUTime: 1.72s
% Computational Cost: add. (1169->132), mult. (4081->270), div. (0->0), fcn. (3464->8), ass. (0->133)
t97 = sin(qJ(2));
t182 = pkin(1) * t97;
t184 = qJD(3) + qJD(4);
t191 = t182 * t184;
t100 = cos(qJ(2));
t154 = qJD(2) * t100;
t144 = pkin(1) * t154;
t178 = cos(qJ(4));
t130 = t178 * qJD(4);
t187 = t178 * qJD(3) + t130;
t95 = sin(qJ(4));
t190 = -t178 * t144 + t95 * t191;
t96 = sin(qJ(3));
t99 = cos(qJ(3));
t22 = (t95 * t154 + t187 * t97) * t99 * pkin(1) - t190 * t96;
t135 = t178 * t96;
t72 = t95 * t99 + t135;
t55 = t72 * t182;
t98 = cos(qJ(5));
t89 = qJD(5) * t98;
t94 = sin(qJ(5));
t167 = t22 * t94 + t55 * t89;
t90 = t94 ^ 2;
t92 = t98 ^ 2;
t188 = t90 + t92;
t157 = qJD(5) * t94;
t133 = t55 * t157 - t22 * t98;
t179 = t99 * pkin(2);
t43 = t184 * t72;
t170 = t95 * t96;
t112 = t178 * t99 - t170;
t155 = t96 * qJD(3);
t146 = pkin(2) * t155;
t57 = t112 * t146;
t124 = -t43 * t179 - t57;
t163 = t90 - t92;
t185 = t163 * qJD(5);
t56 = t112 * t182;
t80 = -t100 * pkin(1) - t179;
t39 = -t94 * t56 + t98 * t80;
t40 = t98 * t56 + t94 * t80;
t186 = -t39 * t94 + t40 * t98;
t101 = pkin(2) ^ 2;
t183 = 0.2e1 * t101;
t181 = pkin(2) * t112;
t134 = t96 * t154;
t105 = t95 * pkin(1) * t134 + t135 * t191 + t190 * t99;
t161 = qJD(2) * t97;
t147 = pkin(1) * t161;
t111 = t146 + t147;
t7 = t98 * t105 - t94 * t111 + t56 * t157 - t80 * t89;
t180 = t7 * t94;
t174 = t55 * t22;
t42 = t184 * t170 - t187 * t99;
t173 = t72 * t42;
t172 = t94 * t42;
t171 = t94 * t43;
t169 = t98 * t42;
t168 = t98 * t43;
t150 = t42 * t179;
t166 = t188 * t150;
t165 = -t111 * t112 + t80 * t43;
t164 = t111 * t72 - t80 * t42;
t91 = t96 ^ 2;
t93 = t99 ^ 2;
t162 = t91 + t93;
t160 = qJD(4) * t95;
t159 = qJD(5) * t40;
t156 = qJD(5) * t99;
t88 = t99 * qJD(3);
t153 = qJD(3) * t100;
t152 = -0.2e1 * t112 * t43;
t148 = t94 * t169;
t145 = pkin(2) * t160;
t143 = t99 * t161;
t142 = t72 * t157;
t141 = t95 * t157;
t140 = t94 * t156;
t139 = t94 * t89;
t138 = t96 * t88;
t137 = t22 * t178;
t136 = t178 * t42;
t132 = qJD(5) * t178;
t84 = -0.2e1 * t138;
t127 = t72 * t145;
t68 = t72 ^ 2;
t126 = t68 * t139;
t125 = t72 * t146 + t150;
t123 = pkin(2) * t130;
t122 = t98 * t130;
t121 = t94 * t132;
t8 = t94 * t105 + t98 * t111 - t159;
t120 = -t8 * t112 + t167 * t72 - t55 * t172 + t39 * t43;
t118 = t188 * t155;
t116 = t39 * t98 + t40 * t94;
t115 = pkin(2) * t118;
t114 = t124 * t98 - t140 * t181;
t29 = -t72 * t89 + t172;
t27 = -t142 - t169;
t28 = -t112 * t89 + t171;
t113 = -t43 * t95 + t136;
t110 = t188 * t178;
t109 = t116 * t42 + t39 * t142;
t108 = t180 + (-t8 - t159) * t98;
t107 = -t7 * t112 - t133 * t72 - t55 * t169 - t40 * t43;
t106 = t28 * t179 + t94 * t57;
t1 = -t116 * qJD(5) - t7 * t98 - t8 * t94;
t104 = t122 * t181 + t98 * t127 + (-t112 * t141 + t72 * t121 + t98 * t136 - t95 * t168) * pkin(2);
t103 = t94 * t127 + ((t112 * t95 - t178 * t72) * t89 + (t112 * t130 + t113) * t94) * pkin(2);
t83 = 0.2e1 * t138;
t82 = -0.2e1 * t139;
t81 = 0.2e1 * t139;
t70 = 0.2e1 * (-t91 + t93) * qJD(3);
t69 = -0.2e1 * t185;
t65 = (-t96 * t153 - t143) * pkin(1);
t64 = (-t99 * t153 + t96 * t161) * pkin(1);
t63 = (-t98 * t160 - t121) * pkin(2);
t62 = (-t98 * t132 + t94 * t160) * pkin(2);
t61 = t162 * t144;
t60 = t110 * qJD(4) * pkin(2);
t32 = -0.2e1 * t173;
t26 = t112 * t157 + t168;
t17 = -0.2e1 * t92 * t173 - 0.2e1 * t126;
t16 = -0.2e1 * t90 * t173 + 0.2e1 * t126;
t15 = t72 * t185 + t148;
t12 = 0.4e1 * t72 * t148 + 0.2e1 * t68 * t185;
t11 = -0.4e1 * t72 * t139 + t163 * t42;
t10 = -0.2e1 * t112 * t42 - 0.2e1 * t72 * t43;
t9 = ((t112 * t178 + t72 * t95) * qJD(4) + t113) * pkin(2);
t6 = -0.2e1 * t112 * t29 - 0.2e1 * t72 * t171;
t5 = -0.2e1 * t112 * t27 + 0.2e1 * t72 * t168;
t2 = -t105 * t112 + t22 * t72 - t55 * t42 - t56 * t43;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t147, -0.2e1 * t144, 0, 0, t83, t70, 0, t84, 0, 0, 0.2e1 * t65, 0.2e1 * t64, 0.2e1 * t61, 0.2e1 * (-0.1e1 + t162) * t97 * pkin(1) ^ 2 * t154, t32, t10, 0, t152, 0, 0, 0.2e1 * t165, 0.2e1 * t164, 0.2e1 * t2, -0.2e1 * t105 * t56 + 0.2e1 * t111 * t80 + 0.2e1 * t174, t17, t12, t5, t16, t6, t152, 0.2e1 * t120, 0.2e1 * t107, 0.2e1 * t108 * t72 + 0.2e1 * t109, 0.2e1 * t39 * t8 - 0.2e1 * t40 * t7 + 0.2e1 * t174; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t147, -t144, 0, 0, t83, t70, 0, t84, 0, 0, t65, t64, t61, 0, t32, t10, 0, t152, 0, 0, t124 + t165, t125 + t164, t2, (-pkin(1) * t143 + (t80 - t179) * t155) * pkin(2), t17, t12, t5, t16, t6, t152, t114 + t120, t106 + t107, (-t115 + t108) * t72 + t109 - t166, (t116 * t155 + (-t186 * qJD(5) - t8 * t98 + t180) * t99) * pkin(2); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, t70, 0, t84, 0, 0, 0, 0, 0, 0, t32, t10, 0, t152, 0, 0, 0.2e1 * t124, 0.2e1 * t125, 0, t101 * t84, t17, t12, t5, t16, t6, t152, 0.2e1 * t114, 0.2e1 * t106, -0.2e1 * t115 * t72 - 0.2e1 * t166, -t99 * t118 * t183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88, 0, -t155, 0, (-t97 * t88 - t134) * pkin(1), (-t99 * t154 + t97 * t155) * pkin(1), 0, 0, 0, 0, -t42, 0, -t43, 0, -t22, t105, t9, (-t105 * t95 - t137 + (t56 * t178 + t55 * t95) * qJD(4)) * pkin(2), -t15, t11, t28, t15, t26, 0, t103 + t133, t104 + t167, t1, (-t137 + (t55 * qJD(4) + t1) * t95 + t186 * t130) * pkin(2); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88, 0, -t155, 0, 0, 0, 0, 0, 0, 0, -t42, 0, -t43, 0, 0, 0, t9, 0, -t15, t11, t28, t15, t26, 0, t103, t104, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t145, -0.2e1 * t123, 0, 0, t81, t69, 0, t82, 0, 0, 0.2e1 * t63, 0.2e1 * t62, 0.2e1 * t60, (-t178 + t110) * t160 * t183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t42, 0, -t43, 0, -t22, t105, 0, 0, -t15, t11, t28, t15, t26, 0, t133, t167, t1, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t42, 0, -t43, 0, 0, 0, 0, 0, -t15, t11, t28, t15, t26, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t145, -t123, 0, 0, t81, t69, 0, t82, 0, 0, t63, t62, t60, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81, t69, 0, t82, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, 0, t29, t43, t8, t7, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, 0, t29, t43, (t155 * t98 + t140) * pkin(2), (-t155 * t94 + t156 * t98) * pkin(2), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, -t157, 0, (-t130 * t94 - t89 * t95) * pkin(2), (-t122 + t141) * pkin(2), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, -t157, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t3;
