% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRRRR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 19:29
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRRRR2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(2,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR2_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR2_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR2_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'S5RRRRR2_invdynm_fixb_reg2_snew_vp: pkin has to be [2x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 19:29:33
% EndTime: 2019-05-04 19:29:41
% DurationCPUTime: 8.32s
% Computational Cost: add. (30925->467), mult. (43328->680), div. (0->0), fcn. (32315->10), ass. (0->368)
t953 = sin(qJ(1));
t958 = cos(qJ(1));
t934 = g(1) * t958 + g(2) * t953;
t960 = qJD(1) ^ 2;
t922 = -pkin(1) * t960 - t934;
t952 = sin(qJ(2));
t957 = cos(qJ(2));
t933 = g(1) * t953 - g(2) * t958;
t964 = qJDD(1) * pkin(1) + t933;
t881 = t957 * t922 + t952 * t964;
t951 = sin(qJ(3));
t956 = cos(qJ(3));
t873 = -t951 * g(3) + t956 * t881;
t946 = qJD(1) + qJD(2);
t942 = t946 ^ 2;
t948 = t956 ^ 2;
t939 = t948 * t942;
t959 = qJD(3) ^ 2;
t930 = -t939 - t959;
t854 = pkin(2) * t930 + t873;
t950 = sin(qJ(4));
t955 = cos(qJ(4));
t872 = t956 * g(3) + t951 * t881;
t932 = t956 * t942 * t951;
t983 = qJDD(3) + t932;
t961 = pkin(2) * t983 - t872;
t799 = t854 * t950 - t955 * t961;
t793 = t955 * t799;
t998 = t955 * t854;
t800 = t950 * t961 + t998;
t742 = -t800 * t950 + t793;
t1041 = t742 * t956;
t1040 = t951 * t742;
t1004 = t950 * t951;
t997 = t955 * t956;
t905 = (t1004 - t997) * t946;
t1003 = t950 * t956;
t907 = (t951 * t955 + t1003) * t946;
t874 = t907 * t905;
t943 = qJDD(3) + qJDD(4);
t1034 = -t874 + t943;
t1039 = t1034 * t950;
t1038 = t1034 * t955;
t986 = qJD(3) * t946;
t935 = t956 * t986;
t944 = qJDD(1) + qJDD(2);
t936 = t951 * t944;
t913 = t936 + t935;
t976 = t951 * t986;
t996 = t956 * t944;
t963 = t976 - t996;
t974 = t950 * t913 + t955 * t963;
t841 = -qJD(4) * t907 - t974;
t838 = qJDD(5) - t841;
t945 = qJD(3) + qJD(4);
t949 = sin(qJ(5));
t954 = cos(qJ(5));
t886 = t907 * t949 - t945 * t954;
t888 = t907 * t954 + t945 * t949;
t840 = t888 * t886;
t1035 = t838 - t840;
t1037 = t1035 * t949;
t1036 = t1035 * t954;
t988 = t872 * t951 + t873 * t956;
t880 = t922 * t952 - t957 * t964;
t879 = t957 * t880;
t835 = -t881 * t952 + t879;
t818 = (qJD(4) - t945) * t907 + t974;
t882 = t886 ^ 2;
t883 = t888 ^ 2;
t902 = qJD(5) + t905;
t901 = t902 ^ 2;
t903 = t905 ^ 2;
t904 = t907 ^ 2;
t941 = t945 ^ 2;
t816 = t872 * t956 - t873 * t951;
t1033 = pkin(1) * t816;
t846 = t880 + (t963 + t976) * pkin(2);
t766 = t800 * t949 - t846 * t954;
t767 = t800 * t954 + t846 * t949;
t712 = t766 * t949 + t767 * t954;
t686 = t712 * t950 - t793;
t1032 = pkin(2) * t686;
t1031 = pkin(2) * t742;
t962 = t955 * t913 - t950 * t963;
t842 = -t905 * qJD(4) + t962;
t900 = t945 * t905;
t822 = t900 + t842;
t763 = -t818 * t950 - t822 * t955;
t1030 = pkin(2) * t763;
t1029 = pkin(2) * t951;
t1028 = pkin(2) * t956;
t1027 = t952 * g(3);
t1026 = t953 * g(3);
t1025 = t957 * g(3);
t1024 = t958 * g(3);
t791 = t838 + t840;
t1023 = t791 * t949;
t1022 = t791 * t954;
t1021 = t799 * t950;
t863 = t874 + t943;
t1019 = t863 * t950;
t1018 = t863 * t955;
t1016 = t902 * t949;
t1015 = t902 * t954;
t914 = -0.2e1 * t976 + t996;
t884 = t914 * t956;
t1014 = t983 * t951;
t924 = qJDD(3) - t932;
t1013 = t924 * t951;
t1012 = t924 * t956;
t947 = t951 ^ 2;
t1011 = t942 * t947;
t1010 = t944 * t952;
t1009 = t945 * t907;
t1008 = t945 * t950;
t1007 = t945 * t955;
t1006 = t949 * t799;
t1005 = t950 * t846;
t877 = t951 * t880;
t1002 = t951 * t952;
t1001 = t954 * t799;
t711 = t766 * t954 - t767 * t949;
t1000 = t955 * t711;
t999 = t955 * t846;
t878 = t956 * t880;
t995 = t957 * t711;
t994 = t957 * t846;
t975 = -t949 * t842 + t943 * t954;
t778 = (-qJD(5) + t902) * t888 + t975;
t968 = -t954 * t842 - t949 * t943;
t805 = -qJD(5) * t886 - t968;
t852 = t902 * t886;
t780 = t805 + t852;
t718 = t778 * t949 - t780 * t954;
t668 = -pkin(2) * t718 + t711 * t950;
t993 = t1000 * t951 + t668 * t956;
t823 = -t901 - t882;
t746 = t823 * t949 + t1036;
t678 = -pkin(2) * t746 + t1006 * t950 + t766 * t955;
t724 = -t766 * t950 + t793 * t949;
t992 = t678 * t956 + t724 * t951;
t832 = -t883 - t901;
t749 = t832 * t954 - t1023;
t681 = -pkin(2) * t749 + t1001 * t950 + t767 * t955;
t725 = -t767 * t950 + t793 * t954;
t991 = t681 * t956 + t725 * t951;
t743 = t800 * t955 + t1021;
t845 = -t903 - t904;
t727 = -pkin(2) * t845 + t743;
t990 = t727 * t956 + t1040;
t984 = qJD(4) + t945;
t820 = -t905 * t984 + t962;
t784 = -pkin(2) * t820 + t1005;
t989 = t784 * t956 + t951 * t999;
t987 = t947 + t948;
t982 = t711 * t1028;
t981 = t846 * t1028;
t980 = t950 * t840;
t979 = t955 * t840;
t978 = t952 * t874;
t977 = t957 * t874;
t917 = t942 * t957 + t1010;
t918 = -t942 * t952 + t944 * t957;
t973 = -t917 * t953 + t918 * t958;
t972 = t952 * t932;
t971 = t957 * t932;
t817 = t907 * t984 + t974;
t785 = -pkin(2) * t817 - t999;
t970 = t1004 * t846 + t785 * t956;
t967 = t917 * t958 + t918 * t953;
t966 = t952 * t958 + t953 * t957;
t965 = -t952 * t953 + t957 * t958;
t804 = -qJD(5) * t888 + t975;
t929 = t939 - t959;
t928 = -t959 - t1011;
t927 = t959 - t1011;
t926 = qJDD(1) * t958 - t953 * t960;
t925 = qJDD(1) * t953 + t958 * t960;
t921 = -t939 + t1011;
t920 = t966 * g(3);
t919 = t965 * g(3);
t916 = t956 * t983;
t912 = t936 + 0.2e1 * t935;
t911 = t987 * t986;
t899 = -t904 + t941;
t898 = t903 - t941;
t897 = qJDD(3) * t952 + t911 * t957;
t896 = -qJDD(3) * t957 + t911 * t952;
t895 = t913 * t956 - t947 * t986;
t894 = -t948 * t986 + t951 * t963;
t893 = -t904 - t941;
t892 = -t927 * t951 + t916;
t891 = t929 * t956 - t1013;
t890 = t927 * t956 + t1014;
t889 = t929 * t951 + t1012;
t885 = (t913 + t935) * t951;
t876 = -t912 * t951 + t884;
t875 = t912 * t956 + t914 * t951;
t871 = t904 - t903;
t870 = t1002 * t944 + t892 * t957;
t869 = t891 * t957 + t952 * t996;
t868 = t892 * t952 - t936 * t957;
t867 = t891 * t952 - t957 * t996;
t861 = t895 * t957 - t972;
t860 = t894 * t957 + t972;
t859 = t895 * t952 + t971;
t858 = t894 * t952 - t971;
t857 = -t941 - t903;
t856 = -pkin(1) * t917 - t881;
t855 = pkin(1) * t918 - t880;
t853 = t902 * t888;
t851 = -t883 + t901;
t850 = t882 - t901;
t849 = (-t905 * t955 + t907 * t950) * t945;
t848 = (-t905 * t950 - t907 * t955) * t945;
t844 = t876 * t957 + t921 * t952;
t843 = t876 * t952 - t921 * t957;
t837 = t883 - t882;
t834 = t880 * t952 + t881 * t957;
t833 = pkin(1) * t835;
t831 = t898 * t955 - t1019;
t830 = -t899 * t950 + t1038;
t829 = t898 * t950 + t1018;
t828 = t899 * t955 + t1039;
t827 = -t893 * t950 - t1018;
t826 = t893 * t955 - t1019;
t825 = -t873 * t952 + t879 * t956;
t824 = -t872 * t952 + t879 * t951;
t821 = -t900 + t842;
t814 = -t878 + pkin(1) * (t952 * (t930 * t956 - t1014) + t957 * t914);
t813 = t877 + pkin(1) * (t952 * (-t928 * t951 - t1012) - t957 * t912);
t812 = -t1008 * t907 + t842 * t955;
t811 = t1007 * t907 + t842 * t950;
t810 = t1007 * t905 - t841 * t950;
t809 = t1008 * t905 + t841 * t955;
t808 = t882 + t883;
t807 = t857 * t955 - t1039;
t806 = t857 * t950 + t1038;
t802 = (-t886 * t954 + t888 * t949) * t902;
t801 = (-t886 * t949 - t888 * t954) * t902;
t798 = t952 * t878 + t957 * t873 - pkin(1) * (t928 * t956 - t1013);
t797 = t880 * t1002 + t957 * t872 - pkin(1) * (t930 * t951 + t916);
t796 = -t848 * t951 + t849 * t956;
t795 = t848 * t956 + t849 * t951;
t789 = pkin(1) * (t957 * (t939 + t1011) + t987 * t1010) + t988;
t788 = t796 * t957 + t943 * t952;
t787 = t796 * t952 - t943 * t957;
t786 = pkin(1) * (t952 * t988 - t879);
t781 = (qJD(5) + t902) * t886 + t968;
t779 = t805 - t852;
t777 = t804 - t853;
t776 = -t804 - t853;
t775 = -t829 * t951 + t831 * t956;
t774 = -t828 * t951 + t830 * t956;
t773 = t829 * t956 + t831 * t951;
t772 = t828 * t956 + t830 * t951;
t771 = -t1016 * t888 + t805 * t954;
t770 = t1015 * t888 + t805 * t949;
t769 = t1015 * t886 - t804 * t949;
t768 = -t1016 * t886 - t804 * t954;
t765 = -t818 * t955 + t822 * t950;
t764 = -t817 * t955 - t821 * t950;
t762 = -t817 * t950 + t821 * t955;
t761 = t802 * t955 + t838 * t950;
t760 = t802 * t950 - t838 * t955;
t759 = t850 * t954 - t1023;
t758 = -t851 * t949 + t1036;
t757 = t850 * t949 + t1022;
t756 = t851 * t954 + t1037;
t755 = -t811 * t951 + t812 * t956;
t754 = -t809 * t951 + t810 * t956;
t753 = t811 * t956 + t812 * t951;
t752 = t809 * t956 + t810 * t951;
t751 = t998 - t950 * t872 + (t950 * t983 - t826) * pkin(2);
t750 = -t832 * t949 - t1022;
t748 = -pkin(2) * t806 + t799;
t747 = t823 * t954 - t1037;
t745 = -t784 * t951 + t846 * t997;
t744 = t1003 * t846 - t785 * t951;
t740 = t771 * t955 + t980;
t739 = t769 * t955 - t980;
t738 = t771 * t950 - t979;
t737 = t769 * t950 + t979;
t735 = t755 * t957 + t978;
t734 = t754 * t957 - t978;
t733 = t755 * t952 - t977;
t732 = t754 * t952 + t977;
t731 = t775 * t957 - t818 * t952;
t730 = t774 * t957 + t822 * t952;
t729 = t775 * t952 + t818 * t957;
t728 = t774 * t952 - t822 * t957;
t723 = (-t742 * t952 + t951 * t994) * pkin(2);
t720 = t778 * t954 + t780 * t949;
t719 = t777 * t954 - t779 * t949;
t717 = t777 * t949 + t779 * t954;
t716 = t759 * t955 - t776 * t950;
t715 = t758 * t955 + t780 * t950;
t714 = t759 * t950 + t776 * t955;
t713 = t758 * t950 - t780 * t955;
t709 = -t762 * t951 + t764 * t956;
t708 = t762 * t956 + t764 * t951;
t706 = -t760 * t951 + t761 * t956;
t705 = t760 * t956 + t761 * t951;
t704 = t750 * t955 - t781 * t950;
t703 = t750 * t950 + t781 * t955;
t702 = t747 * t955 - t777 * t950;
t701 = t747 * t950 + t777 * t955;
t700 = t719 * t955 + t837 * t950;
t699 = t719 * t950 - t837 * t955;
t698 = t709 * t957 + t871 * t952;
t697 = t709 * t952 - t871 * t957;
t696 = t745 * t957 - t751 * t952;
t695 = t720 * t955 - t808 * t950;
t694 = t720 * t950 + t808 * t955;
t693 = t744 * t957 - t748 * t952;
t692 = -t738 * t951 + t740 * t956;
t691 = -t737 * t951 + t739 * t956;
t690 = t738 * t956 + t740 * t951;
t689 = t737 * t956 + t739 * t951;
t688 = pkin(1) * (t952 * (-t826 * t951 + t827 * t956) - t957 * t820) + t989;
t687 = t712 * t955 + t1021;
t685 = t706 * t957 + t801 * t952;
t684 = t706 * t952 - t801 * t957;
t683 = pkin(2) * t703 + t1006;
t682 = pkin(2) * t701 - t1001;
t679 = pkin(1) * (t952 * (-t806 * t951 + t807 * t956) - t957 * t817) + t970;
t676 = -t727 * t951 + t1041;
t675 = t952 * t745 + t957 * t751 - pkin(1) * (t826 * t956 + t827 * t951);
t674 = -t981 + pkin(1) * (t952 * (t743 * t956 + t1040) - t994);
t673 = t952 * t744 + t957 * t748 - pkin(1) * (t806 * t956 + t807 * t951);
t672 = t692 * t957 + t770 * t952;
t671 = t691 * t957 - t768 * t952;
t670 = t692 * t952 - t770 * t957;
t669 = t691 * t952 + t768 * t957;
t666 = -t714 * t951 + t716 * t956;
t665 = -t713 * t951 + t715 * t956;
t664 = t714 * t956 + t716 * t951;
t663 = t713 * t956 + t715 * t951;
t662 = t1030 * t952 + t676 * t957;
t661 = -pkin(1) * (t743 * t951 - t1041) + (t1002 * t846 + t742 * t957) * pkin(2);
t660 = pkin(2) * t694 + t712;
t659 = -t699 * t951 + t700 * t956;
t658 = t699 * t956 + t700 * t951;
t657 = -t681 * t951 + t725 * t956;
t656 = -t678 * t951 + t724 * t956;
t655 = (t686 * t952 - t951 * t995) * pkin(2);
t654 = t666 * t957 + t757 * t952;
t653 = t665 * t957 + t756 * t952;
t652 = t666 * t952 - t757 * t957;
t651 = t665 * t952 - t756 * t957;
t650 = pkin(1) * (t952 * (-t763 * t951 + t765 * t956) - t957 * t845) + t990;
t649 = -t668 * t951 + t711 * t997;
t648 = t952 * t676 - t957 * t1030 - pkin(1) * (t763 * t956 + t765 * t951);
t647 = t659 * t957 + t717 * t952;
t646 = t659 * t952 - t717 * t957;
t645 = t657 * t957 + t683 * t952;
t644 = t656 * t957 + t682 * t952;
t643 = t982 + pkin(1) * (t952 * (-t686 * t951 + t687 * t956) + t995);
t642 = pkin(1) * (t952 * (-t703 * t951 + t704 * t956) - t957 * t749) + t991;
t641 = pkin(1) * (t952 * (-t701 * t951 + t702 * t956) - t957 * t746) + t992;
t640 = -pkin(1) * (t686 * t956 + t687 * t951) + (-t1002 * t711 - t686 * t957) * pkin(2);
t639 = t649 * t957 + t660 * t952;
t638 = t952 * t657 - t957 * t683 - pkin(1) * (t703 * t956 + t704 * t951);
t637 = t952 * t656 - t957 * t682 - pkin(1) * (t701 * t956 + t702 * t951);
t636 = pkin(1) * (t952 * (-t694 * t951 + t695 * t956) - t957 * t718) + t993;
t635 = t952 * t649 - t957 * t660 - pkin(1) * (t694 * t956 + t695 * t951);
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t926, 0, -t925, 0, -t1026, -t1024, -t933 * t958 + t934 * t953, 0, 0, 0, t973, 0, -t967, 0, -t920, -t919, -t834 * t953 + t835 * t958, -pkin(1) * t1026, -t859 * t953 + t861 * t958, -t843 * t953 + t844 * t958, -t868 * t953 + t870 * t958, -t858 * t953 + t860 * t958, -t867 * t953 + t869 * t958, -t896 * t953 + t897 * t958, -t797 * t953 + t824 * t958, -t798 * t953 + t825 * t958, t965 * t816, -t953 * t1033, -t733 * t953 + t735 * t958, -t697 * t953 + t698 * t958, -t728 * t953 + t730 * t958, -t732 * t953 + t734 * t958, -t729 * t953 + t731 * t958, -t787 * t953 + t788 * t958, -t673 * t953 + t693 * t958, -t675 * t953 + t696 * t958, -t648 * t953 + t662 * t958, -t661 * t953 + t723 * t958, -t670 * t953 + t672 * t958, -t646 * t953 + t647 * t958, -t651 * t953 + t653 * t958, -t669 * t953 + t671 * t958, -t652 * t953 + t654 * t958, -t684 * t953 + t685 * t958, -t637 * t953 + t644 * t958, -t638 * t953 + t645 * t958, -t635 * t953 + t639 * t958, -t640 * t953 + t655 * t958; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t925, 0, t926, 0, t1024, -t1026, -t933 * t953 - t934 * t958, 0, 0, 0, t967, 0, t973, 0, t919, -t920, t834 * t958 + t835 * t953, pkin(1) * t1024, t859 * t958 + t861 * t953, t843 * t958 + t844 * t953, t868 * t958 + t870 * t953, t858 * t958 + t860 * t953, t867 * t958 + t869 * t953, t896 * t958 + t897 * t953, t797 * t958 + t824 * t953, t798 * t958 + t825 * t953, t966 * t816, t958 * t1033, t733 * t958 + t735 * t953, t697 * t958 + t698 * t953, t728 * t958 + t730 * t953, t732 * t958 + t734 * t953, t729 * t958 + t731 * t953, t787 * t958 + t788 * t953, t673 * t958 + t693 * t953, t675 * t958 + t696 * t953, t648 * t958 + t662 * t953, t661 * t958 + t723 * t953, t670 * t958 + t672 * t953, t646 * t958 + t647 * t953, t651 * t958 + t653 * t953, t669 * t958 + t671 * t953, t652 * t958 + t654 * t953, t684 * t958 + t685 * t953, t637 * t958 + t644 * t953, t638 * t958 + t645 * t953, t635 * t958 + t639 * t953, t640 * t958 + t655 * t953; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t933, t934, 0, 0, 0, 0, 0, 0, 0, t944, t855, t856, 0, -t833, t885, t875, t890, t884, t889, 0, t814, t813, t789, t786, t753, t708, t772, t752, t773, t795, t679, t688, t650, t674, t690, t658, t663, t689, t664, t705, t641, t642, t636, t643; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t960, 0, 0, -g(3), -t933, 0, 0, 0, t918, 0, -t917, 0, -t1027, -t1025, t835, 0, t861, t844, t870, t860, t869, t897, t824, t825, t957 * t816, 0, t735, t698, t730, t734, t731, t788, t693, t696, t662, t723, t672, t647, t653, t671, t654, t685, t644, t645, t639, t655; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t960, 0, qJDD(1), 0, g(3), 0, -t934, 0, 0, 0, t917, 0, t918, 0, t1025, -t1027, t834, pkin(1) * g(3), t859, t843, t868, t858, t867, t896, t797, t798, t952 * t816, t1033, t733, t697, t728, t732, t729, t787, t673, t675, t648, t661, t670, t646, t651, t669, t652, t684, t637, t638, t635, t640; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t933, t934, 0, 0, 0, 0, 0, 0, 0, t944, t855, t856, 0, -t833, t885, t875, t890, t884, t889, 0, t814, t813, t789, t786, t753, t708, t772, t752, t773, t795, t679, t688, t650, t674, t690, t658, t663, t689, t664, t705, t641, t642, t636, t643; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t944, 0, -t942, 0, 0, -g(3), t880, 0, t895, t876, t892, t894, t891, t911, t877, t878, t816, 0, t755, t709, t774, t754, t775, t796, t744, t745, t676, t846 * t1029, t692, t659, t665, t691, t666, t706, t656, t657, t649, -t711 * t1029; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t942, 0, t944, 0, g(3), 0, t881, 0, t932, -t921, -t936, -t932, -t996, -qJDD(3), t872, t873, 0, 0, -t874, -t871, -t822, t874, t818, -t943, t748, t751, -t1030, t1031, -t770, -t717, -t756, t768, -t757, -t801, -t682, -t683, -t660, -t1032; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t944, -t880, -t881, 0, 0, t885, t875, t890, t884, t889, 0, -t878, t877, t988, 0, t753, t708, t772, t752, t773, t795, t970, t989, t990, -t981, t690, t658, t663, t689, t664, t705, t992, t991, t993, t982; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t913, t914, t983, -t935, t929, t935, 0, t880, t872, 0, t812, t764, t830, t810, t831, t849, t1005, t999, t742, 0, t740, t700, t715, t739, t716, t761, t724, t725, t1000, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t976, t912, t927, -t963, t924, -t976, -t880, 0, t873, 0, t811, t762, t828, t809, t829, t848, t785, t784, t727, -pkin(2) * t846, t738, t699, t713, t737, t714, t760, t678, t681, t668, pkin(2) * t711; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t932, t921, t936, t932, t996, qJDD(3), -t872, -t873, 0, 0, t874, t871, t822, -t874, -t818, t943, -t748, -t751, t1030, -t1031, t770, t717, t756, -t768, t757, t801, t682, t683, t660, t1032; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t842, -t817, t1034, t900, t898, -t900, 0, t846, t799, 0, t771, t719, t758, t769, t759, t802, t1006, t1001, t711, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1009, t821, t899, t841, t863, -t1009, -t846, 0, t800, 0, -t840, -t837, -t780, t840, t776, -t838, t766, t767, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t874, t871, t822, -t874, -t818, t943, -t799, -t800, 0, 0, t770, t717, t756, -t768, t757, t801, -t1001, t1006, t712, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t805, t777, t1035, t852, t850, -t852, 0, t799, t766, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t853, t779, t851, t804, t791, -t853, -t799, 0, t767, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t840, t837, t780, -t840, -t776, t838, -t766, -t767, 0, 0;];
m_new_reg  = t1;
