% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRRR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-04 19:29
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRRR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(2,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'S5RRRRR2_invdynf_fixb_reg2_snew_vp: pkin has to be [2x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-04 19:29:41
% EndTime: 2019-05-04 19:29:43
% DurationCPUTime: 2.52s
% Computational Cost: add. (12457->205), mult. (17080->286), div. (0->0), fcn. (12907->10), ass. (0->175)
t1187 = qJD(1) + qJD(2);
t1184 = t1187 ^ 2;
t1185 = qJDD(1) + qJDD(2);
t1193 = sin(qJ(2));
t1198 = cos(qJ(2));
t1166 = t1184 * t1193 - t1185 * t1198;
t1194 = sin(qJ(1));
t1199 = cos(qJ(1));
t1206 = -t1184 * t1198 - t1185 * t1193;
t1233 = t1166 * t1194 + t1199 * t1206;
t1232 = t1166 * t1199 - t1194 * t1206;
t1191 = sin(qJ(4));
t1196 = cos(qJ(4));
t1197 = cos(qJ(3));
t1217 = t1187 * t1197;
t1192 = sin(qJ(3));
t1218 = t1187 * t1192;
t1153 = t1191 * t1218 - t1196 * t1217;
t1152 = qJD(5) + t1153;
t1229 = qJD(5) + t1152;
t1155 = (t1191 * t1197 + t1192 * t1196) * t1187;
t1186 = qJD(3) + qJD(4);
t1190 = sin(qJ(5));
t1195 = cos(qJ(5));
t1143 = t1155 * t1190 - t1195 * t1186;
t1228 = t1143 ^ 2;
t1145 = t1155 * t1195 + t1186 * t1190;
t1227 = t1145 ^ 2;
t1226 = t1152 ^ 2;
t1225 = t1153 ^ 2;
t1224 = t1155 ^ 2;
t1223 = t1186 ^ 2;
t1179 = -g(1) * t1199 - g(2) * t1194;
t1201 = qJD(1) ^ 2;
t1169 = -pkin(1) * t1201 + t1179;
t1178 = g(1) * t1194 - g(2) * t1199;
t1205 = qJDD(1) * pkin(1) + t1178;
t1142 = t1198 * t1169 + t1193 * t1205;
t1136 = -t1192 * g(3) + t1197 * t1142;
t1189 = t1197 ^ 2;
t1200 = qJD(3) ^ 2;
t1175 = -t1184 * t1189 - t1200;
t1131 = pkin(2) * t1175 + t1136;
t1135 = -t1197 * g(3) - t1192 * t1142;
t1177 = t1197 * t1184 * t1192;
t1170 = qJDD(3) + t1177;
t1202 = pkin(2) * t1170 + t1135;
t1105 = t1131 * t1191 - t1196 * t1202;
t1222 = t1105 * t1191;
t1141 = t1169 * t1193 - t1198 * t1205;
t1221 = t1141 * t1193;
t1220 = t1143 * t1145;
t1219 = t1153 * t1155;
t1216 = t1192 * t1185;
t1215 = qJD(4) - t1186;
t1214 = qJD(5) - t1152;
t1188 = t1192 ^ 2;
t1213 = t1188 + t1189;
t1212 = qJDD(3) + qJDD(4);
t1211 = qJD(3) * t1218;
t1210 = qJD(3) * t1217;
t1159 = t1210 + t1216;
t1182 = t1197 * t1185;
t1160 = t1182 - t1211;
t1207 = -t1196 * t1159 - t1191 * t1160;
t1122 = -qJD(4) * t1153 - t1207;
t1209 = -t1190 * t1122 + t1195 * t1212;
t1208 = t1191 * t1159 - t1196 * t1160;
t1204 = -t1195 * t1122 - t1190 * t1212;
t1203 = -qJD(4) * t1155 - qJDD(5) - t1208;
t1174 = -t1184 * t1188 - t1200;
t1173 = -qJDD(1) * t1194 - t1199 * t1201;
t1172 = qJDD(1) * t1199 - t1194 * t1201;
t1171 = -qJDD(3) + t1177;
t1168 = t1213 * t1184;
t1163 = t1213 * t1185;
t1161 = t1182 - 0.2e1 * t1211;
t1158 = 0.2e1 * t1210 + t1216;
t1150 = -t1223 - t1224;
t1149 = t1171 * t1197 - t1174 * t1192;
t1148 = -t1170 * t1192 + t1175 * t1197;
t1147 = t1171 * t1192 + t1174 * t1197;
t1146 = t1170 * t1197 + t1175 * t1192;
t1140 = t1198 * t1141;
t1138 = t1163 * t1198 - t1168 * t1193;
t1137 = t1163 * t1193 + t1168 * t1198;
t1134 = -t1212 - t1219;
t1133 = t1212 - t1219;
t1132 = -t1223 - t1225;
t1129 = t1149 * t1198 + t1158 * t1193;
t1128 = t1148 * t1198 - t1161 * t1193;
t1127 = t1149 * t1193 - t1158 * t1198;
t1126 = t1148 * t1193 + t1161 * t1198;
t1124 = t1141 + (-t1160 + t1211) * pkin(2);
t1123 = -t1224 - t1225;
t1121 = t1142 * t1198 + t1221;
t1120 = t1142 * t1193 - t1140;
t1119 = -t1226 - t1227;
t1118 = t1134 * t1196 - t1150 * t1191;
t1117 = t1134 * t1191 + t1150 * t1196;
t1116 = -t1226 - t1228;
t1115 = t1153 * t1215 + t1207;
t1114 = -t1186 * t1153 + t1122;
t1113 = -t1155 * t1215 - t1208;
t1112 = (qJD(4) + t1186) * t1155 + t1208;
t1111 = -t1135 * t1192 + t1136 * t1197;
t1110 = t1135 * t1197 + t1136 * t1192;
t1109 = -t1227 - t1228;
t1108 = t1132 * t1196 - t1133 * t1191;
t1107 = t1132 * t1191 + t1133 * t1196;
t1106 = t1196 * t1131 + t1191 * t1202;
t1104 = t1196 * t1105;
t1103 = t1203 - t1220;
t1102 = -t1203 - t1220;
t1101 = t1111 * t1198 + t1221;
t1100 = t1111 * t1193 - t1140;
t1099 = t1143 * t1214 + t1204;
t1098 = -t1143 * t1229 - t1204;
t1097 = -t1145 * t1214 + t1209;
t1096 = t1145 * t1229 - t1209;
t1095 = -t1117 * t1192 + t1118 * t1197;
t1094 = t1117 * t1197 + t1118 * t1192;
t1093 = t1106 * t1195 + t1124 * t1190;
t1092 = -t1106 * t1190 + t1124 * t1195;
t1091 = t1113 * t1196 - t1115 * t1191;
t1090 = t1113 * t1191 + t1115 * t1196;
t1089 = -t1107 * t1192 + t1108 * t1197;
t1088 = t1107 * t1197 + t1108 * t1192;
t1087 = t1103 * t1195 - t1119 * t1190;
t1086 = t1103 * t1190 + t1119 * t1195;
t1085 = -t1102 * t1190 + t1116 * t1195;
t1084 = t1102 * t1195 + t1116 * t1190;
t1083 = t1106 * t1196 + t1222;
t1082 = t1106 * t1191 - t1104;
t1081 = t1095 * t1198 + t1114 * t1193;
t1080 = t1095 * t1193 - t1114 * t1198;
t1079 = t1089 * t1198 + t1112 * t1193;
t1078 = t1089 * t1193 - t1112 * t1198;
t1077 = t1097 * t1195 - t1099 * t1190;
t1076 = t1097 * t1190 + t1099 * t1195;
t1075 = -t1092 * t1190 + t1093 * t1195;
t1074 = t1092 * t1195 + t1093 * t1190;
t1073 = -t1090 * t1192 + t1091 * t1197;
t1072 = t1090 * t1197 + t1091 * t1192;
t1071 = t1087 * t1196 + t1098 * t1191;
t1070 = t1087 * t1191 - t1098 * t1196;
t1069 = t1085 * t1196 + t1096 * t1191;
t1068 = t1085 * t1191 - t1096 * t1196;
t1067 = t1077 * t1196 + t1109 * t1191;
t1066 = t1077 * t1191 - t1109 * t1196;
t1065 = t1073 * t1198 + t1123 * t1193;
t1064 = t1073 * t1193 - t1123 * t1198;
t1063 = -t1082 * t1192 + t1083 * t1197;
t1062 = t1082 * t1197 + t1083 * t1192;
t1061 = t1075 * t1196 + t1222;
t1060 = t1075 * t1191 - t1104;
t1059 = t1063 * t1198 + t1124 * t1193;
t1058 = t1063 * t1193 - t1124 * t1198;
t1057 = -t1070 * t1192 + t1071 * t1197;
t1056 = t1070 * t1197 + t1071 * t1192;
t1055 = -t1068 * t1192 + t1069 * t1197;
t1054 = t1068 * t1197 + t1069 * t1192;
t1053 = -t1066 * t1192 + t1067 * t1197;
t1052 = t1066 * t1197 + t1067 * t1192;
t1051 = t1057 * t1198 + t1086 * t1193;
t1050 = t1057 * t1193 - t1086 * t1198;
t1049 = -t1060 * t1192 + t1061 * t1197;
t1048 = t1060 * t1197 + t1061 * t1192;
t1047 = t1055 * t1198 + t1084 * t1193;
t1046 = t1055 * t1193 - t1084 * t1198;
t1045 = t1053 * t1198 + t1076 * t1193;
t1044 = t1053 * t1193 - t1076 * t1198;
t1043 = t1049 * t1198 + t1074 * t1193;
t1042 = t1049 * t1193 - t1074 * t1198;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1173, -t1172, 0, -t1178 * t1194 + t1179 * t1199, 0, 0, 0, 0, 0, 0, t1233, t1232, 0, -t1120 * t1194 + t1121 * t1199, 0, 0, 0, 0, 0, 0, -t1126 * t1194 + t1128 * t1199, -t1127 * t1194 + t1129 * t1199, -t1137 * t1194 + t1138 * t1199, -t1100 * t1194 + t1101 * t1199, 0, 0, 0, 0, 0, 0, -t1078 * t1194 + t1079 * t1199, -t1080 * t1194 + t1081 * t1199, -t1064 * t1194 + t1065 * t1199, -t1058 * t1194 + t1059 * t1199, 0, 0, 0, 0, 0, 0, -t1046 * t1194 + t1047 * t1199, -t1050 * t1194 + t1051 * t1199, -t1044 * t1194 + t1045 * t1199, -t1042 * t1194 + t1043 * t1199; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1172, t1173, 0, t1178 * t1199 + t1179 * t1194, 0, 0, 0, 0, 0, 0, -t1232, t1233, 0, t1120 * t1199 + t1121 * t1194, 0, 0, 0, 0, 0, 0, t1126 * t1199 + t1128 * t1194, t1127 * t1199 + t1129 * t1194, t1137 * t1199 + t1138 * t1194, t1100 * t1199 + t1101 * t1194, 0, 0, 0, 0, 0, 0, t1078 * t1199 + t1079 * t1194, t1080 * t1199 + t1081 * t1194, t1064 * t1199 + t1065 * t1194, t1058 * t1199 + t1059 * t1194, 0, 0, 0, 0, 0, 0, t1046 * t1199 + t1047 * t1194, t1050 * t1199 + t1051 * t1194, t1044 * t1199 + t1045 * t1194, t1042 * t1199 + t1043 * t1194; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1146, t1147, 0, t1110, 0, 0, 0, 0, 0, 0, t1088, t1094, t1072, t1062, 0, 0, 0, 0, 0, 0, t1054, t1056, t1052, t1048; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1201, -qJDD(1), 0, t1179, 0, 0, 0, 0, 0, 0, t1206, t1166, 0, t1121, 0, 0, 0, 0, 0, 0, t1128, t1129, t1138, t1101, 0, 0, 0, 0, 0, 0, t1079, t1081, t1065, t1059, 0, 0, 0, 0, 0, 0, t1047, t1051, t1045, t1043; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1201, 0, t1178, 0, 0, 0, 0, 0, 0, -t1166, t1206, 0, t1120, 0, 0, 0, 0, 0, 0, t1126, t1127, t1137, t1100, 0, 0, 0, 0, 0, 0, t1078, t1080, t1064, t1058, 0, 0, 0, 0, 0, 0, t1046, t1050, t1044, t1042; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1146, t1147, 0, t1110, 0, 0, 0, 0, 0, 0, t1088, t1094, t1072, t1062, 0, 0, 0, 0, 0, 0, t1054, t1056, t1052, t1048; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1184, -t1185, 0, t1142, 0, 0, 0, 0, 0, 0, t1148, t1149, t1163, t1111, 0, 0, 0, 0, 0, 0, t1089, t1095, t1073, t1063, 0, 0, 0, 0, 0, 0, t1055, t1057, t1053, t1049; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1185, -t1184, 0, -t1141, 0, 0, 0, 0, 0, 0, t1161, -t1158, t1168, -t1141, 0, 0, 0, 0, 0, 0, -t1112, -t1114, -t1123, -t1124, 0, 0, 0, 0, 0, 0, -t1084, -t1086, -t1076, -t1074; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1146, t1147, 0, t1110, 0, 0, 0, 0, 0, 0, t1088, t1094, t1072, t1062, 0, 0, 0, 0, 0, 0, t1054, t1056, t1052, t1048; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1175, t1171, t1182, t1136, 0, 0, 0, 0, 0, 0, t1108, t1118, t1091, t1083, 0, 0, 0, 0, 0, 0, t1069, t1071, t1067, t1061; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1170, t1174, -t1216, t1135, 0, 0, 0, 0, 0, 0, t1107, t1117, t1090, t1082, 0, 0, 0, 0, 0, 0, t1068, t1070, t1066, t1060; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1161, t1158, -t1168, t1141, 0, 0, 0, 0, 0, 0, t1112, t1114, t1123, t1124, 0, 0, 0, 0, 0, 0, t1084, t1086, t1076, t1074; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1132, t1134, t1113, t1106, 0, 0, 0, 0, 0, 0, t1085, t1087, t1077, t1075; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1133, t1150, t1115, -t1105, 0, 0, 0, 0, 0, 0, -t1096, -t1098, -t1109, -t1105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1112, t1114, t1123, t1124, 0, 0, 0, 0, 0, 0, t1084, t1086, t1076, t1074; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1116, t1103, t1097, t1093; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1102, t1119, t1099, t1092; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1096, t1098, t1109, t1105;];
f_new_reg  = t1;
