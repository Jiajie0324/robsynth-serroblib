% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRRR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:54
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRRR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(2,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'S5RRRRR2_invdynf_fixb_reg2_snew_vp: pkin has to be [2x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:54:09
% EndTime: 2019-12-05 18:54:12
% DurationCPUTime: 2.44s
% Computational Cost: add. (12457->205), mult. (17080->286), div. (0->0), fcn. (12907->10), ass. (0->175)
t1193 = qJD(1) + qJD(2);
t1190 = t1193 ^ 2;
t1191 = qJDD(1) + qJDD(2);
t1199 = sin(qJ(2));
t1204 = cos(qJ(2));
t1172 = t1199 * t1190 - t1204 * t1191;
t1200 = sin(qJ(1));
t1205 = cos(qJ(1));
t1212 = -t1204 * t1190 - t1199 * t1191;
t1239 = t1200 * t1172 + t1205 * t1212;
t1238 = t1205 * t1172 - t1200 * t1212;
t1197 = sin(qJ(4));
t1202 = cos(qJ(4));
t1203 = cos(qJ(3));
t1225 = t1193 * t1203;
t1198 = sin(qJ(3));
t1226 = t1193 * t1198;
t1159 = t1197 * t1226 - t1202 * t1225;
t1158 = qJD(5) + t1159;
t1235 = qJD(5) + t1158;
t1161 = (t1197 * t1203 + t1198 * t1202) * t1193;
t1192 = qJD(3) + qJD(4);
t1196 = sin(qJ(5));
t1201 = cos(qJ(5));
t1149 = t1196 * t1161 - t1201 * t1192;
t1234 = t1149 ^ 2;
t1151 = t1201 * t1161 + t1196 * t1192;
t1233 = t1151 ^ 2;
t1232 = t1158 ^ 2;
t1231 = t1159 ^ 2;
t1230 = t1161 ^ 2;
t1229 = t1192 ^ 2;
t1228 = t1151 * t1149;
t1227 = t1161 * t1159;
t1185 = -t1205 * g(1) - t1200 * g(2);
t1207 = qJD(1) ^ 2;
t1175 = -t1207 * pkin(1) + t1185;
t1184 = t1200 * g(1) - t1205 * g(2);
t1211 = qJDD(1) * pkin(1) + t1184;
t1148 = t1204 * t1175 + t1199 * t1211;
t1142 = -t1198 * g(3) + t1203 * t1148;
t1195 = t1203 ^ 2;
t1206 = qJD(3) ^ 2;
t1181 = -t1195 * t1190 - t1206;
t1137 = t1181 * pkin(2) + t1142;
t1141 = -t1203 * g(3) - t1198 * t1148;
t1183 = t1203 * t1190 * t1198;
t1176 = qJDD(3) + t1183;
t1208 = t1176 * pkin(2) + t1141;
t1111 = t1197 * t1137 - t1202 * t1208;
t1224 = t1197 * t1111;
t1223 = t1198 * t1191;
t1147 = t1199 * t1175 - t1204 * t1211;
t1222 = t1199 * t1147;
t1221 = qJD(4) - t1192;
t1220 = qJD(5) - t1158;
t1194 = t1198 ^ 2;
t1219 = t1194 + t1195;
t1218 = qJDD(3) + qJDD(4);
t1217 = qJD(3) * t1226;
t1216 = qJD(3) * t1225;
t1165 = t1216 + t1223;
t1188 = t1203 * t1191;
t1166 = t1188 - t1217;
t1213 = -t1202 * t1165 - t1197 * t1166;
t1128 = -t1159 * qJD(4) - t1213;
t1215 = -t1196 * t1128 + t1201 * t1218;
t1214 = t1197 * t1165 - t1202 * t1166;
t1210 = -t1201 * t1128 - t1196 * t1218;
t1209 = -t1161 * qJD(4) - qJDD(5) - t1214;
t1180 = -t1194 * t1190 - t1206;
t1179 = -t1200 * qJDD(1) - t1205 * t1207;
t1178 = t1205 * qJDD(1) - t1200 * t1207;
t1177 = -qJDD(3) + t1183;
t1174 = t1219 * t1190;
t1169 = t1219 * t1191;
t1167 = t1188 - 0.2e1 * t1217;
t1164 = 0.2e1 * t1216 + t1223;
t1156 = -t1229 - t1230;
t1155 = t1203 * t1177 - t1198 * t1180;
t1154 = -t1198 * t1176 + t1203 * t1181;
t1153 = t1198 * t1177 + t1203 * t1180;
t1152 = t1203 * t1176 + t1198 * t1181;
t1146 = t1204 * t1147;
t1144 = t1204 * t1169 - t1199 * t1174;
t1143 = t1199 * t1169 + t1204 * t1174;
t1140 = -t1218 - t1227;
t1139 = t1218 - t1227;
t1138 = -t1229 - t1231;
t1135 = t1204 * t1155 + t1199 * t1164;
t1134 = t1204 * t1154 - t1199 * t1167;
t1133 = t1199 * t1155 - t1204 * t1164;
t1132 = t1199 * t1154 + t1204 * t1167;
t1130 = t1147 + (-t1166 + t1217) * pkin(2);
t1129 = -t1230 - t1231;
t1127 = t1204 * t1148 + t1222;
t1126 = t1199 * t1148 - t1146;
t1125 = -t1232 - t1233;
t1124 = t1202 * t1140 - t1197 * t1156;
t1123 = t1197 * t1140 + t1202 * t1156;
t1122 = -t1232 - t1234;
t1121 = t1221 * t1159 + t1213;
t1120 = -t1192 * t1159 + t1128;
t1119 = -t1221 * t1161 - t1214;
t1118 = (qJD(4) + t1192) * t1161 + t1214;
t1117 = -t1198 * t1141 + t1203 * t1142;
t1116 = t1203 * t1141 + t1198 * t1142;
t1115 = -t1233 - t1234;
t1114 = t1202 * t1138 - t1197 * t1139;
t1113 = t1197 * t1138 + t1202 * t1139;
t1112 = t1202 * t1137 + t1197 * t1208;
t1110 = t1202 * t1111;
t1109 = t1209 - t1228;
t1108 = -t1209 - t1228;
t1107 = t1204 * t1117 + t1222;
t1106 = t1199 * t1117 - t1146;
t1105 = t1220 * t1149 + t1210;
t1104 = -t1235 * t1149 - t1210;
t1103 = -t1220 * t1151 + t1215;
t1102 = t1235 * t1151 - t1215;
t1101 = -t1198 * t1123 + t1203 * t1124;
t1100 = t1203 * t1123 + t1198 * t1124;
t1099 = t1201 * t1112 + t1196 * t1130;
t1098 = -t1196 * t1112 + t1201 * t1130;
t1097 = t1202 * t1119 - t1197 * t1121;
t1096 = t1197 * t1119 + t1202 * t1121;
t1095 = -t1198 * t1113 + t1203 * t1114;
t1094 = t1203 * t1113 + t1198 * t1114;
t1093 = t1201 * t1109 - t1196 * t1125;
t1092 = t1196 * t1109 + t1201 * t1125;
t1091 = -t1196 * t1108 + t1201 * t1122;
t1090 = t1201 * t1108 + t1196 * t1122;
t1089 = t1202 * t1112 + t1224;
t1088 = t1197 * t1112 - t1110;
t1087 = t1204 * t1101 + t1199 * t1120;
t1086 = t1199 * t1101 - t1204 * t1120;
t1085 = t1204 * t1095 + t1199 * t1118;
t1084 = t1199 * t1095 - t1204 * t1118;
t1083 = t1201 * t1103 - t1196 * t1105;
t1082 = t1196 * t1103 + t1201 * t1105;
t1081 = -t1196 * t1098 + t1201 * t1099;
t1080 = t1201 * t1098 + t1196 * t1099;
t1079 = -t1198 * t1096 + t1203 * t1097;
t1078 = t1203 * t1096 + t1198 * t1097;
t1077 = t1202 * t1093 + t1197 * t1104;
t1076 = t1197 * t1093 - t1202 * t1104;
t1075 = t1202 * t1091 + t1197 * t1102;
t1074 = t1197 * t1091 - t1202 * t1102;
t1073 = t1202 * t1083 + t1197 * t1115;
t1072 = t1197 * t1083 - t1202 * t1115;
t1071 = t1204 * t1079 + t1199 * t1129;
t1070 = t1199 * t1079 - t1204 * t1129;
t1069 = -t1198 * t1088 + t1203 * t1089;
t1068 = t1203 * t1088 + t1198 * t1089;
t1067 = t1202 * t1081 + t1224;
t1066 = t1197 * t1081 - t1110;
t1065 = t1204 * t1069 + t1199 * t1130;
t1064 = t1199 * t1069 - t1204 * t1130;
t1063 = -t1198 * t1076 + t1203 * t1077;
t1062 = t1203 * t1076 + t1198 * t1077;
t1061 = -t1198 * t1074 + t1203 * t1075;
t1060 = t1203 * t1074 + t1198 * t1075;
t1059 = -t1198 * t1072 + t1203 * t1073;
t1058 = t1203 * t1072 + t1198 * t1073;
t1057 = t1204 * t1063 + t1199 * t1092;
t1056 = t1199 * t1063 - t1204 * t1092;
t1055 = -t1198 * t1066 + t1203 * t1067;
t1054 = t1203 * t1066 + t1198 * t1067;
t1053 = t1204 * t1061 + t1199 * t1090;
t1052 = t1199 * t1061 - t1204 * t1090;
t1051 = t1204 * t1059 + t1199 * t1082;
t1050 = t1199 * t1059 - t1204 * t1082;
t1049 = t1204 * t1055 + t1199 * t1080;
t1048 = t1199 * t1055 - t1204 * t1080;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1179, -t1178, 0, -t1200 * t1184 + t1205 * t1185, 0, 0, 0, 0, 0, 0, t1239, t1238, 0, -t1200 * t1126 + t1205 * t1127, 0, 0, 0, 0, 0, 0, -t1200 * t1132 + t1205 * t1134, -t1200 * t1133 + t1205 * t1135, -t1200 * t1143 + t1205 * t1144, -t1200 * t1106 + t1205 * t1107, 0, 0, 0, 0, 0, 0, -t1200 * t1084 + t1205 * t1085, -t1200 * t1086 + t1205 * t1087, -t1200 * t1070 + t1205 * t1071, -t1200 * t1064 + t1205 * t1065, 0, 0, 0, 0, 0, 0, -t1200 * t1052 + t1205 * t1053, -t1200 * t1056 + t1205 * t1057, -t1200 * t1050 + t1205 * t1051, -t1200 * t1048 + t1205 * t1049; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1178, t1179, 0, t1205 * t1184 + t1200 * t1185, 0, 0, 0, 0, 0, 0, -t1238, t1239, 0, t1205 * t1126 + t1200 * t1127, 0, 0, 0, 0, 0, 0, t1205 * t1132 + t1200 * t1134, t1205 * t1133 + t1200 * t1135, t1205 * t1143 + t1200 * t1144, t1205 * t1106 + t1200 * t1107, 0, 0, 0, 0, 0, 0, t1205 * t1084 + t1200 * t1085, t1205 * t1086 + t1200 * t1087, t1205 * t1070 + t1200 * t1071, t1205 * t1064 + t1200 * t1065, 0, 0, 0, 0, 0, 0, t1205 * t1052 + t1200 * t1053, t1205 * t1056 + t1200 * t1057, t1205 * t1050 + t1200 * t1051, t1205 * t1048 + t1200 * t1049; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1152, t1153, 0, t1116, 0, 0, 0, 0, 0, 0, t1094, t1100, t1078, t1068, 0, 0, 0, 0, 0, 0, t1060, t1062, t1058, t1054; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1207, -qJDD(1), 0, t1185, 0, 0, 0, 0, 0, 0, t1212, t1172, 0, t1127, 0, 0, 0, 0, 0, 0, t1134, t1135, t1144, t1107, 0, 0, 0, 0, 0, 0, t1085, t1087, t1071, t1065, 0, 0, 0, 0, 0, 0, t1053, t1057, t1051, t1049; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1207, 0, t1184, 0, 0, 0, 0, 0, 0, -t1172, t1212, 0, t1126, 0, 0, 0, 0, 0, 0, t1132, t1133, t1143, t1106, 0, 0, 0, 0, 0, 0, t1084, t1086, t1070, t1064, 0, 0, 0, 0, 0, 0, t1052, t1056, t1050, t1048; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1152, t1153, 0, t1116, 0, 0, 0, 0, 0, 0, t1094, t1100, t1078, t1068, 0, 0, 0, 0, 0, 0, t1060, t1062, t1058, t1054; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1190, -t1191, 0, t1148, 0, 0, 0, 0, 0, 0, t1154, t1155, t1169, t1117, 0, 0, 0, 0, 0, 0, t1095, t1101, t1079, t1069, 0, 0, 0, 0, 0, 0, t1061, t1063, t1059, t1055; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1191, -t1190, 0, -t1147, 0, 0, 0, 0, 0, 0, t1167, -t1164, t1174, -t1147, 0, 0, 0, 0, 0, 0, -t1118, -t1120, -t1129, -t1130, 0, 0, 0, 0, 0, 0, -t1090, -t1092, -t1082, -t1080; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1152, t1153, 0, t1116, 0, 0, 0, 0, 0, 0, t1094, t1100, t1078, t1068, 0, 0, 0, 0, 0, 0, t1060, t1062, t1058, t1054; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1181, t1177, t1188, t1142, 0, 0, 0, 0, 0, 0, t1114, t1124, t1097, t1089, 0, 0, 0, 0, 0, 0, t1075, t1077, t1073, t1067; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1176, t1180, -t1223, t1141, 0, 0, 0, 0, 0, 0, t1113, t1123, t1096, t1088, 0, 0, 0, 0, 0, 0, t1074, t1076, t1072, t1066; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1167, t1164, -t1174, t1147, 0, 0, 0, 0, 0, 0, t1118, t1120, t1129, t1130, 0, 0, 0, 0, 0, 0, t1090, t1092, t1082, t1080; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1138, t1140, t1119, t1112, 0, 0, 0, 0, 0, 0, t1091, t1093, t1083, t1081; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1139, t1156, t1121, -t1111, 0, 0, 0, 0, 0, 0, -t1102, -t1104, -t1115, -t1111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1118, t1120, t1129, t1130, 0, 0, 0, 0, 0, 0, t1090, t1092, t1082, t1080; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1122, t1109, t1103, t1099; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1108, t1125, t1105, t1098; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1102, t1104, t1115, t1111;];
f_new_reg = t1;
