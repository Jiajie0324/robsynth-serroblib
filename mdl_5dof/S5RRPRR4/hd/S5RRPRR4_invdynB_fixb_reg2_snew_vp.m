% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:32
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPRR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR4_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR4_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR4_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:32:13
% EndTime: 2019-12-05 18:32:26
% DurationCPUTime: 12.34s
% Computational Cost: add. (45949->508), mult. (61110->765), div. (0->0), fcn. (38139->10), ass. (0->343)
t546 = qJD(1) + qJD(2);
t542 = t546 ^ 2;
t544 = qJDD(1) + qJDD(2);
t550 = sin(pkin(9));
t551 = cos(pkin(9));
t507 = t551 * t542 + t550 * t544;
t510 = t550 * t542 - t551 * t544;
t554 = sin(qJ(2));
t558 = cos(qJ(2));
t451 = t558 * t507 - t554 * t510;
t549 = g(1) - qJDD(3);
t485 = qJ(3) * t507 - t551 * t549;
t615 = qJ(3) * t510 - t550 * t549;
t380 = pkin(6) * t451 + t558 * t485 - t554 * t615;
t555 = sin(qJ(1));
t559 = cos(qJ(1));
t455 = t554 * t507 + t558 * t510;
t624 = pkin(6) * t455 + t554 * t485 + t558 * t615;
t626 = t451 * t555 + t559 * t455;
t633 = pkin(5) * t626 + t380 * t555 + t559 * t624;
t401 = t451 * t559 - t555 * t455;
t632 = pkin(5) * t401 + t380 * t559 - t555 * t624;
t532 = t559 * g(2) + t555 * g(3);
t564 = qJDD(1) * pkin(1) + t532;
t531 = t555 * g(2) - t559 * g(3);
t605 = qJD(1) ^ 2;
t565 = -t605 * pkin(1) + t531;
t466 = t554 * t564 + t558 * t565;
t459 = -t542 * pkin(2) + t466;
t562 = -t554 * t565 + t558 * t564;
t561 = t544 * pkin(2) + t562;
t407 = t550 * t459 - t551 * t561;
t408 = t551 * t459 + t550 * t561;
t572 = t550 * t407 + t551 * t408;
t342 = t551 * t407 - t550 * t408;
t599 = t342 * t558;
t294 = -t554 * t572 + t599;
t600 = t342 * t554;
t620 = t558 * t572 + t600;
t260 = t294 * t555 + t559 * t620;
t259 = t294 * t559 - t555 * t620;
t514 = t558 * t542 + t554 * t544;
t491 = pkin(6) * t514 - t558 * g(1);
t517 = t554 * t542 - t558 * t544;
t614 = t555 * t514 + t559 * t517;
t616 = pkin(6) * t517 - t554 * g(1);
t627 = pkin(5) * t614 + t491 * t555 + t559 * t616;
t460 = t559 * t514 - t555 * t517;
t625 = pkin(5) * t460 + t491 * t559 - t555 * t616;
t571 = t558 * t466 - t554 * t562;
t418 = -t554 * t466 - t558 * t562;
t581 = t418 * t559;
t349 = -t555 * t571 + t581;
t586 = t418 * t555;
t350 = t559 * t571 + t586;
t552 = sin(qJ(5));
t556 = cos(qJ(5));
t557 = cos(qJ(4));
t553 = sin(qJ(4));
t596 = t546 * t553;
t494 = -t556 * t557 * t546 + t552 * t596;
t496 = (t552 * t557 + t553 * t556) * t546;
t449 = t496 * t494;
t577 = qJDD(4) + qJDD(5);
t607 = -t449 + t577;
t618 = t552 * t607;
t617 = t556 * t607;
t545 = qJD(4) + qJD(5);
t487 = t545 * t494;
t579 = qJD(4) * t546;
t573 = t557 * t579;
t587 = t553 * t544;
t503 = t573 + t587;
t535 = t557 * t544;
t574 = t553 * t579;
t504 = t535 - t574;
t563 = t494 * qJD(5) - t556 * t503 - t552 * t504;
t606 = -t487 - t563;
t570 = t552 * t503 - t556 * t504;
t396 = (qJD(5) - t545) * t496 + t570;
t492 = t494 ^ 2;
t493 = t496 ^ 2;
t541 = t545 ^ 2;
t389 = -t542 * pkin(3) + t544 * pkin(7) + t408;
t371 = t553 * t389 + t557 * t549;
t530 = t557 * t542 * t553;
t520 = qJDD(4) + t530;
t354 = (-t503 + t573) * pkin(8) + t520 * pkin(4) - t371;
t372 = t557 * t389 - t553 * t549;
t522 = qJD(4) * pkin(4) - pkin(8) * t596;
t548 = t557 ^ 2;
t536 = t548 * t542;
t355 = -pkin(4) * t536 + t504 * pkin(8) - qJD(4) * t522 + t372;
t304 = -t556 * t354 + t355 * t552;
t306 = t552 * t354 + t556 * t355;
t266 = -t304 * t556 + t306 * t552;
t602 = t266 * t553;
t601 = t266 * t557;
t598 = t545 * t552;
t597 = t545 * t556;
t547 = t553 ^ 2;
t595 = t547 * t542;
t388 = -t544 * pkin(3) - t542 * pkin(7) + t407;
t356 = -t504 * pkin(4) - pkin(8) * t536 + t522 * t596 + t388;
t592 = t552 * t356;
t439 = t449 + t577;
t591 = t552 * t439;
t590 = t553 * t388;
t589 = t553 * t520;
t521 = qJDD(4) - t530;
t588 = t553 * t521;
t585 = t556 * t356;
t584 = t556 * t439;
t583 = t557 * t388;
t582 = t557 * t521;
t580 = t547 + t548;
t576 = t550 * t449;
t575 = t551 * t449;
t268 = t304 * t552 + t556 * t306;
t329 = t553 * t371 + t557 * t372;
t568 = t550 * t530;
t567 = t551 * t530;
t523 = t555 * qJDD(1) + t559 * t605;
t566 = pkin(5) * t523 - g(1) * t559;
t328 = t557 * t371 - t553 * t372;
t479 = t559 * t531 - t555 * t532;
t478 = -t555 * t531 - t559 * t532;
t560 = qJD(4) ^ 2;
t528 = -t536 - t560;
t527 = t536 - t560;
t526 = -t560 - t595;
t525 = t560 - t595;
t524 = -t559 * qJDD(1) + t555 * t605;
t519 = t536 - t595;
t518 = t536 + t595;
t513 = t557 * t520;
t512 = t580 * t544;
t505 = t535 - 0.2e1 * t574;
t502 = 0.2e1 * t573 + t587;
t501 = -pkin(5) * t524 + t555 * g(1);
t500 = t580 * t579;
t481 = -t493 + t541;
t480 = t492 - t541;
t477 = t550 * qJDD(4) + t551 * t500;
t476 = -t551 * qJDD(4) + t550 * t500;
t475 = t557 * t503 - t547 * t579;
t474 = -t553 * t504 - t548 * t579;
t473 = -t493 - t541;
t472 = -t553 * t526 - t582;
t471 = -t553 * t525 + t513;
t470 = t557 * t528 - t589;
t469 = t557 * t527 - t588;
t468 = t557 * t526 - t588;
t467 = t553 * t528 + t513;
t458 = t551 * t512 - t550 * t518;
t457 = t550 * t512 + t551 * t518;
t450 = -t553 * t502 + t557 * t505;
t445 = -t493 + t492;
t444 = t551 * t471 + t550 * t587;
t443 = t551 * t469 + t550 * t535;
t442 = t550 * t471 - t551 * t587;
t441 = t550 * t469 - t551 * t535;
t437 = -t541 - t492;
t436 = t551 * t475 - t568;
t435 = t551 * t474 + t568;
t434 = t550 * t475 + t567;
t433 = t550 * t474 - t567;
t432 = t551 * t472 + t550 * t502;
t431 = t551 * t470 - t550 * t505;
t430 = t550 * t472 - t551 * t502;
t429 = t550 * t470 + t551 * t505;
t428 = (-t494 * t556 + t496 * t552) * t545;
t427 = (-t494 * t552 - t496 * t556) * t545;
t426 = -t492 - t493;
t425 = -t554 * t476 + t558 * t477;
t424 = t558 * t476 + t554 * t477;
t422 = -t496 * qJD(5) - t570;
t421 = t551 * t450 - t550 * t519;
t420 = t550 * t450 + t551 * t519;
t415 = pkin(1) * g(1) + pkin(6) * t571;
t414 = t556 * t480 - t591;
t413 = -t552 * t481 + t617;
t412 = t552 * t480 + t584;
t411 = t556 * t481 + t618;
t410 = -t552 * t473 - t584;
t409 = t556 * t473 - t591;
t406 = -t554 * t457 + t558 * t458;
t405 = t558 * t457 + t554 * t458;
t400 = -t487 + t563;
t395 = (qJD(5) + t545) * t496 + t570;
t393 = -t496 * t598 - t556 * t563;
t392 = t496 * t597 - t552 * t563;
t391 = -t552 * t422 + t494 * t597;
t390 = t556 * t422 + t494 * t598;
t387 = -t554 * t442 + t558 * t444;
t386 = -t554 * t441 + t558 * t443;
t385 = t558 * t442 + t554 * t444;
t384 = t558 * t441 + t554 * t443;
t382 = t556 * t437 - t618;
t381 = t552 * t437 + t617;
t376 = -t554 * t434 + t558 * t436;
t375 = -t554 * t433 + t558 * t435;
t374 = t558 * t434 + t554 * t436;
t373 = t558 * t433 + t554 * t435;
t369 = -t554 * t430 + t558 * t432;
t368 = -t554 * t429 + t558 * t431;
t367 = t558 * t430 + t554 * t432;
t366 = t558 * t429 + t554 * t431;
t365 = -t553 * t427 + t557 * t428;
t364 = t551 * t365 + t550 * t577;
t363 = t550 * t365 - t551 * t577;
t362 = -pkin(7) * t468 + t583;
t361 = -pkin(7) * t467 + t590;
t360 = -t554 * t420 + t558 * t421;
t359 = t558 * t420 + t554 * t421;
t358 = -pkin(3) * t468 + t372;
t357 = -pkin(3) * t467 + t371;
t348 = -t553 * t412 + t557 * t414;
t347 = -t553 * t411 + t557 * t413;
t346 = -t553 * t409 + t557 * t410;
t345 = t557 * t409 + t553 * t410;
t344 = -t555 * t405 + t559 * t406;
t341 = -t559 * t405 - t555 * t406;
t338 = -t396 * t556 - t552 * t400;
t337 = -t556 * t395 - t552 * t606;
t336 = -t396 * t552 + t556 * t400;
t335 = -t552 * t395 + t556 * t606;
t334 = pkin(2) * t549 + qJ(3) * t572;
t333 = -t553 * t392 + t557 * t393;
t332 = -t553 * t390 + t557 * t391;
t331 = -t553 * t381 + t557 * t382;
t330 = t557 * t381 + t553 * t382;
t326 = -pkin(8) * t409 + t585;
t325 = -t555 * t367 + t559 * t369;
t324 = -t555 * t366 + t559 * t368;
t323 = -t559 * t367 - t555 * t369;
t322 = -t559 * t366 - t555 * t368;
t321 = -pkin(8) * t381 + t592;
t320 = t551 * t333 + t576;
t319 = t551 * t332 - t576;
t318 = t550 * t333 - t575;
t317 = t550 * t332 + t575;
t316 = t551 * t348 - t550 * t396;
t315 = t551 * t347 - t550 * t400;
t314 = t550 * t348 + t551 * t396;
t313 = t550 * t347 + t551 * t400;
t312 = -qJ(3) * t457 + t551 * t328;
t311 = qJ(3) * t458 + t550 * t328;
t310 = -t554 * t363 + t558 * t364;
t309 = t551 * t346 + t550 * t606;
t308 = t558 * t363 + t554 * t364;
t307 = t550 * t346 - t551 * t606;
t305 = t331 * t551 + t395 * t550;
t303 = t331 * t550 - t395 * t551;
t301 = -pkin(4) * t606 + pkin(8) * t410 + t592;
t300 = t329 * t551 + t388 * t550;
t299 = t329 * t550 - t388 * t551;
t298 = -qJ(3) * t430 - t358 * t550 + t362 * t551;
t297 = -qJ(3) * t429 - t357 * t550 + t361 * t551;
t296 = -pkin(4) * t395 + pkin(8) * t382 - t585;
t291 = -pkin(2) * t468 + qJ(3) * t432 + t358 * t551 + t362 * t550;
t290 = -pkin(2) * t467 + qJ(3) * t431 + t357 * t551 + t361 * t550;
t289 = -t336 * t553 + t338 * t557;
t288 = -t335 * t553 + t337 * t557;
t287 = t336 * t557 + t338 * t553;
t286 = t288 * t551 - t445 * t550;
t285 = t288 * t550 + t445 * t551;
t284 = t289 * t551 + t426 * t550;
t283 = t289 * t550 - t426 * t551;
t282 = -t318 * t554 + t320 * t558;
t281 = -t317 * t554 + t319 * t558;
t280 = t318 * t558 + t320 * t554;
t279 = t317 * t558 + t319 * t554;
t278 = -t314 * t554 + t316 * t558;
t277 = -t313 * t554 + t315 * t558;
t276 = t314 * t558 + t316 * t554;
t275 = t313 * t558 + t315 * t554;
t274 = -t307 * t554 + t309 * t558;
t273 = t307 * t558 + t309 * t554;
t272 = -pkin(3) * t345 - pkin(4) * t409 + t306;
t271 = -pkin(3) * t287 - pkin(4) * t336;
t270 = -pkin(3) * t330 - pkin(4) * t381 + t304;
t269 = -t303 * t554 + t305 * t558;
t267 = t303 * t558 + t305 * t554;
t265 = -pkin(6) * t405 - t311 * t554 + t312 * t558;
t264 = pkin(6) * t406 + t311 * t558 + t312 * t554;
t263 = -t299 * t554 + t300 * t558;
t262 = t299 * t558 + t300 * t554;
t261 = -pkin(7) * t345 - t301 * t553 + t326 * t557;
t258 = pkin(6) * t294 + qJ(3) * t599 - t334 * t554;
t257 = pkin(1) * t549 + pkin(6) * t620 + qJ(3) * t600 + t334 * t558;
t256 = -pkin(4) * t356 + pkin(8) * t268;
t255 = -qJ(3) * t299 - (pkin(3) * t550 - pkin(7) * t551) * t328;
t254 = -pkin(7) * t330 - t296 * t553 + t321 * t557;
t253 = -pkin(8) * t336 - t266;
t252 = -pkin(6) * t367 - t291 * t554 + t298 * t558;
t251 = -pkin(6) * t366 - t290 * t554 + t297 * t558;
t250 = -pkin(1) * t468 + pkin(6) * t369 + t291 * t558 + t298 * t554;
t249 = -pkin(1) * t467 + pkin(6) * t368 + t290 * t558 + t297 * t554;
t248 = -t285 * t554 + t286 * t558;
t247 = t285 * t558 + t286 * t554;
t246 = -pkin(4) * t426 + pkin(8) * t338 + t268;
t245 = -t283 * t554 + t284 * t558;
t244 = t283 * t558 + t284 * t554;
t243 = qJ(3) * t300 - (-pkin(3) * t551 - pkin(7) * t550 - pkin(2)) * t328;
t242 = -t273 * t555 + t274 * t559;
t241 = -t273 * t559 - t274 * t555;
t240 = -t267 * t555 + t269 * t559;
t239 = t268 * t557 - t602;
t238 = -t267 * t559 - t269 * t555;
t237 = t268 * t553 + t601;
t236 = -t262 * t555 + t263 * t559;
t235 = -t262 * t559 - t263 * t555;
t234 = t239 * t551 + t356 * t550;
t233 = t239 * t550 - t356 * t551;
t232 = -qJ(3) * t307 + t261 * t551 - t272 * t550;
t231 = -qJ(3) * t303 + t254 * t551 - t270 * t550;
t230 = -pkin(2) * t345 + qJ(3) * t309 + t261 * t550 + t272 * t551;
t229 = -t244 * t555 + t245 * t559;
t228 = -t244 * t559 - t245 * t555;
t227 = -pkin(3) * t237 - pkin(4) * t266;
t226 = -pkin(2) * t330 + qJ(3) * t305 + t254 * t550 + t270 * t551;
t225 = -pkin(7) * t287 - t246 * t553 + t253 * t557;
t224 = -pkin(6) * t262 - t243 * t554 + t255 * t558;
t223 = -pkin(7) * t237 - pkin(8) * t601 - t256 * t553;
t222 = pkin(1) * t328 + pkin(6) * t263 + t243 * t558 + t255 * t554;
t221 = -t233 * t554 + t234 * t558;
t220 = t233 * t558 + t234 * t554;
t219 = -qJ(3) * t283 + t225 * t551 - t271 * t550;
t218 = -pkin(2) * t287 + qJ(3) * t284 + t225 * t550 + t271 * t551;
t217 = -pkin(6) * t273 - t230 * t554 + t232 * t558;
t216 = -pkin(1) * t345 + pkin(6) * t274 + t230 * t558 + t232 * t554;
t215 = -pkin(6) * t267 - t226 * t554 + t231 * t558;
t214 = -pkin(1) * t330 + pkin(6) * t269 + t226 * t558 + t231 * t554;
t213 = -t220 * t555 + t221 * t559;
t212 = -t220 * t559 - t221 * t555;
t211 = -qJ(3) * t233 + t223 * t551 - t227 * t550;
t210 = -pkin(2) * t237 + qJ(3) * t234 + t223 * t550 + t227 * t551;
t209 = -pkin(6) * t244 - t218 * t554 + t219 * t558;
t208 = -pkin(1) * t287 + pkin(6) * t245 + t218 * t558 + t219 * t554;
t207 = -pkin(6) * t220 - t210 * t554 + t211 * t558;
t206 = -pkin(1) * t237 + pkin(6) * t221 + t210 * t558 + t211 * t554;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t549, 0, 0, 0, 0, 0, 0, t467, t468, 0, -t328, 0, 0, 0, 0, 0, 0, t330, t345, t287, t237; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t524, t523, 0, t478, 0, 0, 0, 0, 0, 0, t614, t460, 0, t349, 0, 0, 0, 0, 0, 0, t626, t401, 0, t259, 0, 0, 0, 0, 0, 0, t322, t323, t341, t235, 0, 0, 0, 0, 0, 0, t238, t241, t228, t212; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t523, t524, 0, t479, 0, 0, 0, 0, 0, 0, -t460, t614, 0, t350, 0, 0, 0, 0, 0, 0, -t401, t626, 0, t260, 0, 0, 0, 0, 0, 0, t324, t325, t344, t236, 0, 0, 0, 0, 0, 0, t240, t242, t229, t213; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t532, -t531, 0, 0, 0, 0, 0, 0, 0, t544, -pkin(1) * t517 + t562, -pkin(1) * t514 - t466, 0, -pkin(1) * t418, 0, 0, 0, 0, 0, t544, -pkin(1) * t455 - pkin(2) * t510 - t407, -pkin(1) * t451 - pkin(2) * t507 - t408, 0, -pkin(1) * t294 - pkin(2) * t342, (t503 + t573) * t553, t502 * t557 + t505 * t553, t525 * t557 + t589, (t504 - t574) * t557, t527 * t553 + t582, 0, pkin(1) * t366 + pkin(2) * t429 + pkin(3) * t505 + pkin(7) * t470 - t583, pkin(1) * t367 + pkin(2) * t430 - pkin(3) * t502 + pkin(7) * t472 + t590, pkin(1) * t405 + pkin(2) * t457 + pkin(3) * t518 + pkin(7) * t512 + t329, pkin(1) * t262 + pkin(2) * t299 - pkin(3) * t388 + pkin(7) * t329, t392 * t557 + t393 * t553, t335 * t557 + t337 * t553, t411 * t557 + t413 * t553, t390 * t557 + t391 * t553, t412 * t557 + t414 * t553, t427 * t557 + t428 * t553, pkin(1) * t267 + pkin(2) * t303 - pkin(3) * t395 + pkin(7) * t331 + t296 * t557 + t321 * t553, pkin(1) * t273 + pkin(2) * t307 - pkin(3) * t606 + pkin(7) * t346 + t301 * t557 + t326 * t553, pkin(1) * t244 + pkin(2) * t283 - pkin(3) * t426 + pkin(7) * t289 + t246 * t557 + t253 * t553, pkin(1) * t220 + pkin(2) * t233 - pkin(3) * t356 + pkin(7) * t239 - pkin(8) * t602 + t256 * t557; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t523, 0, t524, 0, t566, t501, -t479, -pkin(5) * t479, 0, 0, -t460, 0, t614, 0, t625, -t627, -t350, -pkin(5) * t350 - pkin(6) * t586 - t415 * t559, 0, 0, -t401, 0, t626, 0, t632, -t633, -t260, -pkin(5) * t260 - t257 * t559 - t258 * t555, -t374 * t559 - t376 * t555, -t359 * t559 - t360 * t555, -t385 * t559 - t387 * t555, -t373 * t559 - t375 * t555, -t384 * t559 - t386 * t555, -t424 * t559 - t425 * t555, -pkin(5) * t324 - t249 * t559 - t251 * t555, -pkin(5) * t325 - t250 * t559 - t252 * t555, -pkin(5) * t344 - t264 * t559 - t265 * t555, -pkin(5) * t236 - t222 * t559 - t224 * t555, -t280 * t559 - t282 * t555, -t247 * t559 - t248 * t555, -t275 * t559 - t277 * t555, -t279 * t559 - t281 * t555, -t276 * t559 - t278 * t555, -t308 * t559 - t310 * t555, -pkin(5) * t240 - t214 * t559 - t215 * t555, -pkin(5) * t242 - t216 * t559 - t217 * t555, -pkin(5) * t229 - t208 * t559 - t209 * t555, -pkin(5) * t213 - t206 * t559 - t207 * t555; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t524, 0, -t523, 0, -t501, t566, t478, pkin(5) * t478, 0, 0, -t614, 0, -t460, 0, t627, t625, t349, pkin(5) * t349 + pkin(6) * t581 - t415 * t555, 0, 0, -t626, 0, -t401, 0, t633, t632, t259, pkin(5) * t259 - t257 * t555 + t258 * t559, -t374 * t555 + t376 * t559, -t359 * t555 + t360 * t559, -t385 * t555 + t387 * t559, -t373 * t555 + t375 * t559, -t384 * t555 + t386 * t559, -t424 * t555 + t425 * t559, pkin(5) * t322 - t249 * t555 + t251 * t559, pkin(5) * t323 - t250 * t555 + t252 * t559, pkin(5) * t341 - t264 * t555 + t265 * t559, pkin(5) * t235 - t222 * t555 + t224 * t559, -t280 * t555 + t282 * t559, -t247 * t555 + t248 * t559, -t275 * t555 + t277 * t559, -t279 * t555 + t281 * t559, -t276 * t555 + t278 * t559, -t308 * t555 + t310 * t559, pkin(5) * t238 - t214 * t555 + t215 * t559, pkin(5) * t241 - t216 * t555 + t217 * t559, pkin(5) * t228 - t208 * t555 + t209 * t559, pkin(5) * t212 - t206 * t555 + t207 * t559;];
tauB_reg = t1;
