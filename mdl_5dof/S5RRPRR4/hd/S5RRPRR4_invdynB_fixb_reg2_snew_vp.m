% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 12:02
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPRR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR4_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR4_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR4_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 12:02:11
% EndTime: 2020-01-03 12:02:22
% DurationCPUTime: 9.99s
% Computational Cost: add. (45949->508), mult. (61110->765), div. (0->0), fcn. (38139->10), ass. (0->343)
t549 = qJD(1) + qJD(2);
t545 = t549 ^ 2;
t547 = qJDD(1) + qJDD(2);
t553 = sin(pkin(9));
t554 = cos(pkin(9));
t506 = t554 * t545 + t553 * t547;
t509 = t553 * t545 - t554 * t547;
t557 = sin(qJ(2));
t561 = cos(qJ(2));
t449 = t561 * t506 - t557 * t509;
t552 = g(1) - qJDD(3);
t483 = qJ(3) * t506 - t554 * t552;
t619 = qJ(3) * t509 - t553 * t552;
t378 = pkin(6) * t449 + t561 * t483 - t557 * t619;
t453 = t557 * t506 + t561 * t509;
t558 = sin(qJ(1));
t562 = cos(qJ(1));
t402 = t562 * t449 - t558 * t453;
t629 = pkin(6) * t453 + t557 * t483 + t561 * t619;
t638 = -pkin(5) * t402 - t562 * t378 + t558 * t629;
t618 = t558 * t449 + t562 * t453;
t637 = pkin(5) * t618 + t558 * t378 + t562 * t629;
t532 = t562 * g(2) + t558 * g(3);
t567 = qJDD(1) * pkin(1) - t532;
t531 = t558 * g(2) - t562 * g(3);
t609 = qJD(1) ^ 2;
t568 = -t609 * pkin(1) - t531;
t464 = t557 * t567 + t561 * t568;
t457 = -t545 * pkin(2) + t464;
t565 = -t557 * t568 + t561 * t567;
t564 = t547 * pkin(2) + t565;
t405 = t553 * t457 - t554 * t564;
t406 = t554 * t457 + t553 * t564;
t575 = t553 * t405 + t554 * t406;
t340 = t554 * t405 - t553 * t406;
t586 = t561 * t340;
t292 = -t557 * t575 + t586;
t593 = t557 * t340;
t623 = t561 * t575 + t593;
t634 = t558 * t292 + t562 * t623;
t257 = -t562 * t292 + t558 * t623;
t513 = t561 * t545 + t557 * t547;
t516 = t557 * t545 - t561 * t547;
t461 = t562 * t513 - t558 * t516;
t489 = pkin(6) * t513 - t561 * g(1);
t620 = pkin(6) * t516 - t557 * g(1);
t631 = -pkin(5) * t461 - t562 * t489 + t558 * t620;
t569 = t558 * t513 + t562 * t516;
t630 = pkin(5) * t569 + t558 * t489 + t562 * t620;
t574 = t561 * t464 - t557 * t565;
t416 = -t557 * t464 - t561 * t565;
t585 = t562 * t416;
t347 = t558 * t574 - t585;
t592 = t558 * t416;
t624 = t562 * t574 + t592;
t555 = sin(qJ(5));
t559 = cos(qJ(5));
t560 = cos(qJ(4));
t556 = sin(qJ(4));
t604 = t549 * t556;
t492 = -t559 * t560 * t549 + t555 * t604;
t494 = (t555 * t560 + t556 * t559) * t549;
t447 = t494 * t492;
t581 = qJDD(4) + qJDD(5);
t611 = -t447 + t581;
t622 = t555 * t611;
t621 = t559 * t611;
t548 = qJD(4) + qJD(5);
t485 = t548 * t492;
t583 = qJD(4) * t549;
t577 = t560 * t583;
t594 = t556 * t547;
t502 = t577 + t594;
t535 = t560 * t547;
t578 = t556 * t583;
t503 = t535 - t578;
t566 = t492 * qJD(5) - t559 * t502 - t555 * t503;
t610 = -t485 - t566;
t573 = t555 * t502 - t559 * t503;
t394 = (qJD(5) - t548) * t494 + t573;
t490 = t492 ^ 2;
t491 = t494 ^ 2;
t544 = t548 ^ 2;
t606 = t548 * t555;
t605 = t548 * t559;
t550 = t556 ^ 2;
t603 = t550 * t545;
t551 = t560 ^ 2;
t536 = t551 * t545;
t386 = -t547 * pkin(3) - t545 * pkin(7) + t405;
t522 = qJD(4) * pkin(4) - pkin(8) * t604;
t354 = -t503 * pkin(4) - pkin(8) * t536 + t522 * t604 + t386;
t600 = t555 * t354;
t437 = t447 + t581;
t599 = t555 * t437;
t387 = -t545 * pkin(3) + t547 * pkin(7) + t406;
t369 = t556 * t387 + t560 * t552;
t530 = t560 * t545 * t556;
t520 = qJDD(4) + t530;
t352 = (-t502 + t577) * pkin(8) + t520 * pkin(4) - t369;
t370 = t560 * t387 - t556 * t552;
t353 = -pkin(4) * t536 + t503 * pkin(8) - qJD(4) * t522 + t370;
t302 = -t559 * t352 + t555 * t353;
t304 = t555 * t352 + t559 * t353;
t264 = -t559 * t302 + t555 * t304;
t598 = t556 * t264;
t597 = t556 * t386;
t596 = t556 * t520;
t521 = qJDD(4) - t530;
t595 = t556 * t521;
t591 = t559 * t354;
t590 = t559 * t437;
t589 = t560 * t264;
t588 = t560 * t386;
t587 = t560 * t521;
t584 = t550 + t551;
t580 = t553 * t447;
t579 = t554 * t447;
t523 = -t558 * qJDD(1) - t562 * t609;
t576 = pkin(5) * t523 + t562 * g(1);
t266 = t555 * t302 + t559 * t304;
t327 = t556 * t369 + t560 * t370;
t476 = -t558 * t531 - t562 * t532;
t571 = t553 * t530;
t570 = t554 * t530;
t326 = t560 * t369 - t556 * t370;
t477 = t562 * t531 - t558 * t532;
t563 = qJD(4) ^ 2;
t528 = -t536 - t563;
t527 = t536 - t563;
t526 = -t563 - t603;
t525 = t563 - t603;
t524 = t562 * qJDD(1) - t558 * t609;
t518 = t536 - t603;
t517 = t536 + t603;
t512 = t560 * t520;
t511 = t584 * t547;
t504 = t535 - 0.2e1 * t578;
t501 = 0.2e1 * t577 + t594;
t500 = pkin(5) * t524 + t558 * g(1);
t499 = t584 * t583;
t479 = -t491 + t544;
t478 = t490 - t544;
t475 = t553 * qJDD(4) + t554 * t499;
t474 = -t554 * qJDD(4) + t553 * t499;
t473 = t560 * t502 - t550 * t583;
t472 = -t556 * t503 - t551 * t583;
t471 = -t491 - t544;
t470 = -t556 * t526 - t587;
t469 = -t556 * t525 + t512;
t468 = t560 * t528 - t596;
t467 = t560 * t527 - t595;
t466 = t560 * t526 - t595;
t465 = t556 * t528 + t512;
t456 = t554 * t511 - t553 * t517;
t455 = t553 * t511 + t554 * t517;
t448 = -t556 * t501 + t560 * t504;
t443 = -t491 + t490;
t442 = t554 * t469 + t553 * t594;
t441 = t554 * t467 + t553 * t535;
t440 = t553 * t469 - t554 * t594;
t439 = t553 * t467 - t554 * t535;
t435 = -t544 - t490;
t434 = t554 * t473 - t571;
t433 = t554 * t472 + t571;
t432 = t553 * t473 + t570;
t431 = t553 * t472 - t570;
t430 = t554 * t470 + t553 * t501;
t429 = t554 * t468 - t553 * t504;
t428 = t553 * t470 - t554 * t501;
t427 = t553 * t468 + t554 * t504;
t426 = (-t492 * t559 + t494 * t555) * t548;
t425 = (-t492 * t555 - t494 * t559) * t548;
t424 = -t490 - t491;
t423 = -t557 * t474 + t561 * t475;
t422 = t561 * t474 + t557 * t475;
t420 = -t494 * qJD(5) - t573;
t419 = t554 * t448 - t553 * t518;
t418 = t553 * t448 + t554 * t518;
t413 = pkin(1) * g(1) + pkin(6) * t574;
t412 = t559 * t478 - t599;
t411 = -t555 * t479 + t621;
t410 = t555 * t478 + t590;
t409 = t559 * t479 + t622;
t408 = -t555 * t471 - t590;
t407 = t559 * t471 - t599;
t404 = -t557 * t455 + t561 * t456;
t403 = t561 * t455 + t557 * t456;
t398 = -t485 + t566;
t393 = (qJD(5) + t548) * t494 + t573;
t391 = -t494 * t606 - t559 * t566;
t390 = t494 * t605 - t555 * t566;
t389 = -t555 * t420 + t492 * t605;
t388 = t559 * t420 + t492 * t606;
t385 = -t557 * t440 + t561 * t442;
t384 = -t557 * t439 + t561 * t441;
t383 = t561 * t440 + t557 * t442;
t382 = t561 * t439 + t557 * t441;
t380 = t559 * t435 - t622;
t379 = t555 * t435 + t621;
t374 = -t557 * t432 + t561 * t434;
t373 = -t557 * t431 + t561 * t433;
t372 = t561 * t432 + t557 * t434;
t371 = t561 * t431 + t557 * t433;
t367 = -t557 * t428 + t561 * t430;
t366 = -t557 * t427 + t561 * t429;
t365 = t561 * t428 + t557 * t430;
t364 = t561 * t427 + t557 * t429;
t363 = -t556 * t425 + t560 * t426;
t362 = t554 * t363 + t553 * t581;
t361 = t553 * t363 - t554 * t581;
t360 = -pkin(7) * t466 + t588;
t359 = -pkin(7) * t465 + t597;
t358 = -t557 * t418 + t561 * t419;
t357 = t561 * t418 + t557 * t419;
t356 = -pkin(3) * t466 + t370;
t355 = -pkin(3) * t465 + t369;
t346 = -t556 * t410 + t560 * t412;
t345 = -t556 * t409 + t560 * t411;
t344 = -t556 * t407 + t560 * t408;
t343 = t560 * t407 + t556 * t408;
t342 = t558 * t403 - t562 * t404;
t339 = t562 * t403 + t558 * t404;
t336 = -t394 * t559 - t555 * t398;
t335 = -t559 * t393 - t555 * t610;
t334 = -t394 * t555 + t559 * t398;
t333 = -t555 * t393 + t559 * t610;
t332 = pkin(2) * t552 + qJ(3) * t575;
t331 = -t556 * t390 + t560 * t391;
t330 = -t556 * t388 + t560 * t389;
t329 = -t556 * t379 + t560 * t380;
t328 = t560 * t379 + t556 * t380;
t324 = -pkin(8) * t407 + t591;
t323 = t558 * t365 - t562 * t367;
t322 = t558 * t364 - t562 * t366;
t321 = t562 * t365 + t558 * t367;
t320 = t562 * t364 + t558 * t366;
t319 = -pkin(8) * t379 + t600;
t318 = t554 * t331 + t580;
t317 = t554 * t330 - t580;
t316 = t553 * t331 - t579;
t315 = t553 * t330 + t579;
t314 = t554 * t346 - t553 * t394;
t313 = t554 * t345 - t553 * t398;
t312 = t553 * t346 + t554 * t394;
t311 = t553 * t345 + t554 * t398;
t310 = -qJ(3) * t455 + t554 * t326;
t309 = qJ(3) * t456 + t553 * t326;
t308 = -t557 * t361 + t561 * t362;
t307 = t554 * t344 + t553 * t610;
t306 = t561 * t361 + t557 * t362;
t305 = t553 * t344 - t554 * t610;
t303 = t554 * t329 + t553 * t393;
t301 = t553 * t329 - t554 * t393;
t299 = -pkin(4) * t610 + pkin(8) * t408 + t600;
t298 = t554 * t327 + t553 * t386;
t297 = t553 * t327 - t554 * t386;
t296 = -qJ(3) * t428 - t553 * t356 + t554 * t360;
t295 = -qJ(3) * t427 - t553 * t355 + t554 * t359;
t294 = -pkin(4) * t393 + pkin(8) * t380 - t591;
t289 = -pkin(2) * t466 + qJ(3) * t430 + t554 * t356 + t553 * t360;
t288 = -pkin(2) * t465 + qJ(3) * t429 + t554 * t355 + t553 * t359;
t287 = -t556 * t334 + t560 * t336;
t286 = -t556 * t333 + t560 * t335;
t285 = t560 * t334 + t556 * t336;
t284 = t554 * t286 - t553 * t443;
t283 = t553 * t286 + t554 * t443;
t282 = t554 * t287 + t553 * t424;
t281 = t553 * t287 - t554 * t424;
t280 = -t557 * t316 + t561 * t318;
t279 = -t557 * t315 + t561 * t317;
t278 = t561 * t316 + t557 * t318;
t277 = t561 * t315 + t557 * t317;
t276 = -t557 * t312 + t561 * t314;
t275 = -t557 * t311 + t561 * t313;
t274 = t561 * t312 + t557 * t314;
t273 = t561 * t311 + t557 * t313;
t272 = -t557 * t305 + t561 * t307;
t271 = t561 * t305 + t557 * t307;
t270 = -pkin(3) * t343 - pkin(4) * t407 + t304;
t269 = -pkin(3) * t285 - pkin(4) * t334;
t268 = -pkin(3) * t328 - pkin(4) * t379 + t302;
t267 = -t557 * t301 + t561 * t303;
t265 = t561 * t301 + t557 * t303;
t263 = -pkin(6) * t403 - t557 * t309 + t561 * t310;
t262 = pkin(6) * t404 + t561 * t309 + t557 * t310;
t261 = -t557 * t297 + t561 * t298;
t260 = t561 * t297 + t557 * t298;
t259 = -pkin(7) * t343 - t556 * t299 + t560 * t324;
t256 = pkin(6) * t292 + qJ(3) * t586 - t557 * t332;
t255 = pkin(1) * t552 + pkin(6) * t623 + qJ(3) * t593 + t561 * t332;
t254 = -pkin(4) * t354 + pkin(8) * t266;
t253 = -qJ(3) * t297 - (pkin(3) * t553 - pkin(7) * t554) * t326;
t252 = -pkin(7) * t328 - t556 * t294 + t560 * t319;
t251 = -pkin(8) * t334 - t264;
t250 = -pkin(6) * t365 - t557 * t289 + t561 * t296;
t249 = -pkin(6) * t364 - t557 * t288 + t561 * t295;
t248 = -pkin(1) * t466 + pkin(6) * t367 + t561 * t289 + t557 * t296;
t247 = -pkin(1) * t465 + pkin(6) * t366 + t561 * t288 + t557 * t295;
t246 = -t557 * t283 + t561 * t284;
t245 = t561 * t283 + t557 * t284;
t244 = -pkin(4) * t424 + pkin(8) * t336 + t266;
t243 = -t557 * t281 + t561 * t282;
t242 = t561 * t281 + t557 * t282;
t241 = qJ(3) * t298 - (-pkin(3) * t554 - pkin(7) * t553 - pkin(2)) * t326;
t240 = t558 * t271 - t562 * t272;
t239 = t562 * t271 + t558 * t272;
t238 = t558 * t265 - t562 * t267;
t237 = t560 * t266 - t598;
t236 = t562 * t265 + t558 * t267;
t235 = t556 * t266 + t589;
t234 = t558 * t260 - t562 * t261;
t233 = t562 * t260 + t558 * t261;
t232 = t554 * t237 + t553 * t354;
t231 = t553 * t237 - t554 * t354;
t230 = -qJ(3) * t305 + t554 * t259 - t553 * t270;
t229 = -qJ(3) * t301 + t554 * t252 - t553 * t268;
t228 = -pkin(2) * t343 + qJ(3) * t307 + t553 * t259 + t554 * t270;
t227 = t558 * t242 - t562 * t243;
t226 = t562 * t242 + t558 * t243;
t225 = -pkin(3) * t235 - pkin(4) * t264;
t224 = -pkin(2) * t328 + qJ(3) * t303 + t553 * t252 + t554 * t268;
t223 = -pkin(7) * t285 - t556 * t244 + t560 * t251;
t222 = -pkin(6) * t260 - t557 * t241 + t561 * t253;
t221 = -pkin(7) * t235 - pkin(8) * t589 - t556 * t254;
t220 = pkin(1) * t326 + pkin(6) * t261 + t561 * t241 + t557 * t253;
t219 = -t557 * t231 + t561 * t232;
t218 = t561 * t231 + t557 * t232;
t217 = -qJ(3) * t281 + t554 * t223 - t553 * t269;
t216 = -pkin(2) * t285 + qJ(3) * t282 + t553 * t223 + t554 * t269;
t215 = -pkin(6) * t271 - t557 * t228 + t561 * t230;
t214 = -pkin(1) * t343 + pkin(6) * t272 + t561 * t228 + t557 * t230;
t213 = -pkin(6) * t265 - t557 * t224 + t561 * t229;
t212 = -pkin(1) * t328 + pkin(6) * t267 + t561 * t224 + t557 * t229;
t211 = t558 * t218 - t562 * t219;
t210 = t562 * t218 + t558 * t219;
t209 = -qJ(3) * t231 + t554 * t221 - t553 * t225;
t208 = -pkin(2) * t235 + qJ(3) * t232 + t553 * t221 + t554 * t225;
t207 = -pkin(6) * t242 - t557 * t216 + t561 * t217;
t206 = -pkin(1) * t285 + pkin(6) * t243 + t561 * t216 + t557 * t217;
t205 = -pkin(6) * t218 - t557 * t208 + t561 * t209;
t204 = -pkin(1) * t235 + pkin(6) * t219 + t561 * t208 + t557 * t209;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t552, 0, 0, 0, 0, 0, 0, t465, t466, 0, -t326, 0, 0, 0, 0, 0, 0, t328, t343, t285, t235; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t524, t523, 0, t476, 0, 0, 0, 0, 0, 0, -t569, -t461, 0, t347, 0, 0, 0, 0, 0, 0, -t618, -t402, 0, t257, 0, 0, 0, 0, 0, 0, t320, t321, t339, t233, 0, 0, 0, 0, 0, 0, t236, t239, t226, t210; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t523, t524, 0, t477, 0, 0, 0, 0, 0, 0, t461, -t569, 0, -t624, 0, 0, 0, 0, 0, 0, t402, -t618, 0, -t634, 0, 0, 0, 0, 0, 0, t322, t323, t342, t234, 0, 0, 0, 0, 0, 0, t238, t240, t227, t211; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t532, t531, 0, 0, 0, 0, 0, 0, 0, t547, -pkin(1) * t516 + t565, -pkin(1) * t513 - t464, 0, -pkin(1) * t416, 0, 0, 0, 0, 0, t547, -pkin(1) * t453 - pkin(2) * t509 - t405, -pkin(1) * t449 - pkin(2) * t506 - t406, 0, -pkin(1) * t292 - pkin(2) * t340, (t502 + t577) * t556, t560 * t501 + t556 * t504, t560 * t525 + t596, (t503 - t578) * t560, t556 * t527 + t587, 0, pkin(1) * t364 + pkin(2) * t427 + pkin(3) * t504 + pkin(7) * t468 - t588, pkin(1) * t365 + pkin(2) * t428 - pkin(3) * t501 + pkin(7) * t470 + t597, pkin(1) * t403 + pkin(2) * t455 + pkin(3) * t517 + pkin(7) * t511 + t327, pkin(1) * t260 + pkin(2) * t297 - pkin(3) * t386 + pkin(7) * t327, t560 * t390 + t556 * t391, t560 * t333 + t556 * t335, t560 * t409 + t556 * t411, t560 * t388 + t556 * t389, t560 * t410 + t556 * t412, t560 * t425 + t556 * t426, pkin(1) * t265 + pkin(2) * t301 - pkin(3) * t393 + pkin(7) * t329 + t560 * t294 + t556 * t319, pkin(1) * t271 + pkin(2) * t305 - pkin(3) * t610 + pkin(7) * t344 + t560 * t299 + t556 * t324, pkin(1) * t242 + pkin(2) * t281 - pkin(3) * t424 + pkin(7) * t287 + t560 * t244 + t556 * t251, pkin(1) * t218 + pkin(2) * t231 - pkin(3) * t354 + pkin(7) * t237 - pkin(8) * t598 + t560 * t254; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t523, 0, t524, 0, t576, -t500, -t477, -pkin(5) * t477, 0, 0, t461, 0, -t569, 0, t631, t630, t624, pkin(5) * t624 + pkin(6) * t592 + t562 * t413, 0, 0, t402, 0, -t618, 0, t638, t637, t634, pkin(5) * t634 + t562 * t255 + t558 * t256, t562 * t372 + t558 * t374, t562 * t357 + t558 * t358, t562 * t383 + t558 * t385, t562 * t371 + t558 * t373, t562 * t382 + t558 * t384, t562 * t422 + t558 * t423, -pkin(5) * t322 + t562 * t247 + t558 * t249, -pkin(5) * t323 + t562 * t248 + t558 * t250, -pkin(5) * t342 + t562 * t262 + t558 * t263, -pkin(5) * t234 + t562 * t220 + t558 * t222, t562 * t278 + t558 * t280, t562 * t245 + t558 * t246, t562 * t273 + t558 * t275, t562 * t277 + t558 * t279, t562 * t274 + t558 * t276, t562 * t306 + t558 * t308, -pkin(5) * t238 + t562 * t212 + t558 * t213, -pkin(5) * t240 + t562 * t214 + t558 * t215, -pkin(5) * t227 + t562 * t206 + t558 * t207, -pkin(5) * t211 + t562 * t204 + t558 * t205; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t524, 0, -t523, 0, t500, t576, t476, pkin(5) * t476, 0, 0, t569, 0, t461, 0, -t630, t631, t347, pkin(5) * t347 - pkin(6) * t585 + t558 * t413, 0, 0, t618, 0, t402, 0, -t637, t638, t257, pkin(5) * t257 + t558 * t255 - t562 * t256, t558 * t372 - t562 * t374, t558 * t357 - t562 * t358, t558 * t383 - t562 * t385, t558 * t371 - t562 * t373, t558 * t382 - t562 * t384, t558 * t422 - t562 * t423, pkin(5) * t320 + t558 * t247 - t562 * t249, pkin(5) * t321 + t558 * t248 - t562 * t250, pkin(5) * t339 + t558 * t262 - t562 * t263, pkin(5) * t233 + t558 * t220 - t562 * t222, t558 * t278 - t562 * t280, t558 * t245 - t562 * t246, t558 * t273 - t562 * t275, t558 * t277 - t562 * t279, t558 * t274 - t562 * t276, t558 * t306 - t562 * t308, pkin(5) * t236 + t558 * t212 - t562 * t213, pkin(5) * t239 + t558 * t214 - t562 * t215, pkin(5) * t226 + t558 * t206 - t562 * t207, pkin(5) * t210 + t558 * t204 - t562 * t205;];
tauB_reg = t1;
