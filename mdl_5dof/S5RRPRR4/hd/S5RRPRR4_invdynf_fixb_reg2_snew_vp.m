% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPRR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:32
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPRR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR4_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR4_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR4_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:32:42
% EndTime: 2019-12-05 18:32:45
% DurationCPUTime: 2.60s
% Computational Cost: add. (11445->183), mult. (15217->261), div. (0->0), fcn. (9583->10), ass. (0->151)
t1253 = qJD(1) + qJD(2);
t1250 = t1253 ^ 2;
t1251 = qJDD(1) + qJDD(2);
t1257 = sin(pkin(9));
t1258 = cos(pkin(9));
t1223 = t1257 * t1250 - t1258 * t1251;
t1261 = sin(qJ(2));
t1265 = cos(qJ(2));
t1274 = -t1258 * t1250 - t1257 * t1251;
t1199 = t1265 * t1223 - t1261 * t1274;
t1262 = sin(qJ(1));
t1266 = cos(qJ(1));
t1297 = t1261 * t1223 + t1265 * t1274;
t1301 = t1262 * t1199 + t1266 * t1297;
t1300 = t1266 * t1199 - t1262 * t1297;
t1229 = t1261 * t1250 - t1265 * t1251;
t1273 = -t1265 * t1250 - t1261 * t1251;
t1296 = t1262 * t1229 + t1266 * t1273;
t1295 = t1266 * t1229 - t1262 * t1273;
t1252 = qJD(4) + qJD(5);
t1290 = qJD(5) + t1252;
t1259 = sin(qJ(5));
t1263 = cos(qJ(5));
t1264 = cos(qJ(4));
t1284 = t1253 * t1264;
t1260 = sin(qJ(4));
t1285 = t1253 * t1260;
t1212 = t1259 * t1285 - t1263 * t1284;
t1289 = t1212 ^ 2;
t1214 = (t1259 * t1264 + t1260 * t1263) * t1253;
t1288 = t1214 ^ 2;
t1287 = t1252 ^ 2;
t1286 = t1214 * t1212;
t1255 = t1264 ^ 2;
t1283 = t1255 * t1250;
t1282 = t1260 * t1251;
t1281 = qJD(5) - t1252;
t1242 = t1266 * g(2) + t1262 * g(3);
t1271 = qJDD(1) * pkin(1) + t1242;
t1241 = t1262 * g(2) - t1266 * g(3);
t1268 = qJD(1) ^ 2;
t1272 = -t1268 * pkin(1) + t1241;
t1205 = t1261 * t1271 + t1265 * t1272;
t1203 = -t1250 * pkin(2) + t1205;
t1204 = -t1261 * t1272 + t1265 * t1271;
t1269 = t1251 * pkin(2) + t1204;
t1181 = t1258 * t1203 + t1257 * t1269;
t1173 = -t1250 * pkin(3) + t1251 * pkin(7) + t1181;
t1256 = -g(1) + qJDD(3);
t1168 = t1264 * t1173 + t1260 * t1256;
t1254 = t1260 ^ 2;
t1280 = t1254 + t1255;
t1240 = t1264 * t1250 * t1260;
t1232 = qJDD(4) + t1240;
t1279 = -qJDD(4) - qJDD(5);
t1278 = qJD(4) * t1285;
t1277 = qJD(4) * t1284;
t1167 = -t1260 * t1173 + t1264 * t1256;
t1180 = -t1257 * t1203 + t1258 * t1269;
t1218 = t1277 + t1282;
t1245 = t1264 * t1251;
t1275 = -t1245 + t1278;
t1276 = -t1259 * t1218 - t1263 * t1275;
t1172 = -t1251 * pkin(3) - t1250 * pkin(7) - t1180;
t1270 = -t1263 * t1218 + t1259 * t1275;
t1267 = qJD(4) ^ 2;
t1238 = -t1267 - t1283;
t1237 = -t1254 * t1250 - t1267;
t1236 = -t1266 * qJDD(1) + t1262 * t1268;
t1235 = t1262 * qJDD(1) + t1266 * t1268;
t1234 = qJD(4) * pkin(4) - pkin(8) * t1285;
t1233 = -qJDD(4) + t1240;
t1231 = t1280 * t1250;
t1226 = t1280 * t1251;
t1219 = t1245 - 0.2e1 * t1278;
t1217 = 0.2e1 * t1277 + t1282;
t1210 = -t1287 - t1288;
t1209 = t1264 * t1233 - t1260 * t1237;
t1208 = -t1260 * t1232 + t1264 * t1238;
t1207 = t1260 * t1233 + t1264 * t1237;
t1206 = t1264 * t1232 + t1260 * t1238;
t1202 = t1258 * t1226 - t1257 * t1231;
t1201 = t1257 * t1226 + t1258 * t1231;
t1193 = t1279 - t1286;
t1192 = -t1279 - t1286;
t1191 = -t1287 - t1289;
t1190 = t1258 * t1209 + t1257 * t1217;
t1189 = t1258 * t1208 - t1257 * t1219;
t1188 = t1257 * t1209 - t1258 * t1217;
t1187 = t1257 * t1208 + t1258 * t1219;
t1186 = -t1288 - t1289;
t1185 = -t1261 * t1204 + t1265 * t1205;
t1184 = t1265 * t1204 + t1261 * t1205;
t1183 = t1263 * t1193 - t1259 * t1210;
t1182 = t1259 * t1193 + t1263 * t1210;
t1179 = -t1261 * t1201 + t1265 * t1202;
t1178 = t1265 * t1201 + t1261 * t1202;
t1177 = t1281 * t1212 + t1270;
t1176 = -t1290 * t1212 - t1270;
t1175 = -t1281 * t1214 + t1276;
t1174 = t1290 * t1214 - t1276;
t1170 = t1263 * t1191 - t1259 * t1192;
t1169 = t1259 * t1191 + t1263 * t1192;
t1166 = -t1261 * t1188 + t1265 * t1190;
t1165 = -t1261 * t1187 + t1265 * t1189;
t1164 = t1265 * t1188 + t1261 * t1190;
t1163 = t1265 * t1187 + t1261 * t1189;
t1162 = t1275 * pkin(4) - pkin(8) * t1283 + t1234 * t1285 + t1172;
t1161 = -pkin(4) * t1283 - t1275 * pkin(8) - qJD(4) * t1234 + t1168;
t1160 = (-t1218 + t1277) * pkin(8) + t1232 * pkin(4) + t1167;
t1159 = -t1260 * t1182 + t1264 * t1183;
t1158 = t1264 * t1182 + t1260 * t1183;
t1157 = -t1257 * t1180 + t1258 * t1181;
t1156 = t1258 * t1180 + t1257 * t1181;
t1155 = t1263 * t1175 - t1259 * t1177;
t1154 = t1259 * t1175 + t1263 * t1177;
t1153 = -t1260 * t1169 + t1264 * t1170;
t1152 = t1264 * t1169 + t1260 * t1170;
t1151 = -t1260 * t1167 + t1264 * t1168;
t1150 = t1264 * t1167 + t1260 * t1168;
t1149 = t1258 * t1159 + t1257 * t1176;
t1148 = t1257 * t1159 - t1258 * t1176;
t1147 = t1259 * t1160 + t1263 * t1161;
t1146 = t1258 * t1153 + t1257 * t1174;
t1145 = t1263 * t1160 - t1259 * t1161;
t1144 = t1257 * t1153 - t1258 * t1174;
t1143 = t1258 * t1151 + t1257 * t1172;
t1142 = t1257 * t1151 - t1258 * t1172;
t1141 = -t1261 * t1156 + t1265 * t1157;
t1140 = t1265 * t1156 + t1261 * t1157;
t1139 = -t1260 * t1154 + t1264 * t1155;
t1138 = t1264 * t1154 + t1260 * t1155;
t1137 = t1258 * t1139 + t1257 * t1186;
t1136 = t1257 * t1139 - t1258 * t1186;
t1135 = -t1261 * t1148 + t1265 * t1149;
t1134 = t1265 * t1148 + t1261 * t1149;
t1133 = -t1261 * t1144 + t1265 * t1146;
t1132 = -t1259 * t1145 + t1263 * t1147;
t1131 = t1265 * t1144 + t1261 * t1146;
t1130 = t1263 * t1145 + t1259 * t1147;
t1129 = -t1261 * t1142 + t1265 * t1143;
t1128 = t1265 * t1142 + t1261 * t1143;
t1127 = -t1261 * t1136 + t1265 * t1137;
t1126 = t1265 * t1136 + t1261 * t1137;
t1125 = -t1260 * t1130 + t1264 * t1132;
t1124 = t1264 * t1130 + t1260 * t1132;
t1123 = t1258 * t1125 + t1257 * t1162;
t1122 = t1257 * t1125 - t1258 * t1162;
t1121 = -t1261 * t1122 + t1265 * t1123;
t1120 = t1265 * t1122 + t1261 * t1123;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1256, 0, 0, 0, 0, 0, 0, t1206, t1207, 0, t1150, 0, 0, 0, 0, 0, 0, t1152, t1158, t1138, t1124; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1236, t1235, 0, -t1262 * t1241 - t1266 * t1242, 0, 0, 0, 0, 0, 0, t1295, -t1296, 0, -t1266 * t1184 - t1262 * t1185, 0, 0, 0, 0, 0, 0, t1300, -t1301, 0, -t1266 * t1140 - t1262 * t1141, 0, 0, 0, 0, 0, 0, -t1266 * t1163 - t1262 * t1165, -t1266 * t1164 - t1262 * t1166, -t1266 * t1178 - t1262 * t1179, -t1266 * t1128 - t1262 * t1129, 0, 0, 0, 0, 0, 0, -t1266 * t1131 - t1262 * t1133, -t1266 * t1134 - t1262 * t1135, -t1266 * t1126 - t1262 * t1127, -t1266 * t1120 - t1262 * t1121; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1235, t1236, 0, t1266 * t1241 - t1262 * t1242, 0, 0, 0, 0, 0, 0, t1296, t1295, 0, -t1262 * t1184 + t1266 * t1185, 0, 0, 0, 0, 0, 0, t1301, t1300, 0, -t1262 * t1140 + t1266 * t1141, 0, 0, 0, 0, 0, 0, -t1262 * t1163 + t1266 * t1165, -t1262 * t1164 + t1266 * t1166, -t1262 * t1178 + t1266 * t1179, -t1262 * t1128 + t1266 * t1129, 0, 0, 0, 0, 0, 0, -t1262 * t1131 + t1266 * t1133, -t1262 * t1134 + t1266 * t1135, -t1262 * t1126 + t1266 * t1127, -t1262 * t1120 + t1266 * t1121; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1268, -qJDD(1), 0, t1241, 0, 0, 0, 0, 0, 0, t1273, t1229, 0, t1185, 0, 0, 0, 0, 0, 0, t1297, t1199, 0, t1141, 0, 0, 0, 0, 0, 0, t1165, t1166, t1179, t1129, 0, 0, 0, 0, 0, 0, t1133, t1135, t1127, t1121; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1268, 0, t1242, 0, 0, 0, 0, 0, 0, -t1229, t1273, 0, t1184, 0, 0, 0, 0, 0, 0, -t1199, t1297, 0, t1140, 0, 0, 0, 0, 0, 0, t1163, t1164, t1178, t1128, 0, 0, 0, 0, 0, 0, t1131, t1134, t1126, t1120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1256, 0, 0, 0, 0, 0, 0, t1206, t1207, 0, t1150, 0, 0, 0, 0, 0, 0, t1152, t1158, t1138, t1124; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1250, -t1251, 0, t1205, 0, 0, 0, 0, 0, 0, t1274, t1223, 0, t1157, 0, 0, 0, 0, 0, 0, t1189, t1190, t1202, t1143, 0, 0, 0, 0, 0, 0, t1146, t1149, t1137, t1123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1251, -t1250, 0, t1204, 0, 0, 0, 0, 0, 0, -t1223, t1274, 0, t1156, 0, 0, 0, 0, 0, 0, t1187, t1188, t1201, t1142, 0, 0, 0, 0, 0, 0, t1144, t1148, t1136, t1122; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1256, 0, 0, 0, 0, 0, 0, t1206, t1207, 0, t1150, 0, 0, 0, 0, 0, 0, t1152, t1158, t1138, t1124; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1250, -t1251, 0, t1181, 0, 0, 0, 0, 0, 0, t1208, t1209, t1226, t1151, 0, 0, 0, 0, 0, 0, t1153, t1159, t1139, t1125; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1251, -t1250, 0, t1180, 0, 0, 0, 0, 0, 0, t1219, -t1217, t1231, -t1172, 0, 0, 0, 0, 0, 0, -t1174, -t1176, -t1186, -t1162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1256, 0, 0, 0, 0, 0, 0, t1206, t1207, 0, t1150, 0, 0, 0, 0, 0, 0, t1152, t1158, t1138, t1124; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1238, t1233, t1245, t1168, 0, 0, 0, 0, 0, 0, t1170, t1183, t1155, t1132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1232, t1237, -t1282, t1167, 0, 0, 0, 0, 0, 0, t1169, t1182, t1154, t1130; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1219, t1217, -t1231, t1172, 0, 0, 0, 0, 0, 0, t1174, t1176, t1186, t1162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1191, t1193, t1175, t1147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1192, t1210, t1177, t1145; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1174, t1176, t1186, t1162;];
f_new_reg = t1;
