% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPRR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:32
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPRR4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR4_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR4_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR4_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR4_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:32:26
% EndTime: 2019-12-05 18:32:42
% DurationCPUTime: 16.70s
% Computational Cost: add. (75545->547), mult. (100093->770), div. (0->0), fcn. (62071->10), ass. (0->377)
t1012 = sin(qJ(1));
t1016 = cos(qJ(1));
t1011 = sin(qJ(2));
t1015 = cos(qJ(2));
t1006 = g(1) - qJDD(3);
t1007 = sin(pkin(9));
t1004 = qJD(1) + qJD(2);
t1000 = t1004 ^ 2;
t1002 = qJDD(1) + qJDD(2);
t1008 = cos(pkin(9));
t968 = t1007 * t1000 - t1008 * t1002;
t1094 = qJ(3) * t968 - t1007 * t1006;
t965 = t1008 * t1000 + t1007 * t1002;
t907 = t1011 * t965 + t1015 * t968;
t939 = qJ(3) * t965 - t1008 * t1006;
t1107 = pkin(6) * t907 + t1011 * t939 + t1015 * t1094;
t904 = t1011 * t968 - t1015 * t965;
t820 = pkin(6) * t904 + t1011 * t1094 - t1015 * t939;
t849 = -t1012 * t904 + t1016 * t907;
t1119 = -pkin(5) * t849 + t1012 * t820 - t1016 * t1107;
t850 = t1012 * t907 + t1016 * t904;
t1118 = -pkin(5) * t850 - t1012 * t1107 - t1016 * t820;
t989 = t1016 * g(2) + t1012 * g(3);
t1023 = qJDD(1) * pkin(1) + t989;
t1018 = qJD(1) ^ 2;
t988 = t1012 * g(2) - t1016 * g(3);
t1027 = t1018 * pkin(1) - t988;
t915 = -t1011 * t1027 - t1015 * t1023;
t1020 = t1002 * pkin(2) - t915;
t916 = t1011 * t1023 - t1015 * t1027;
t911 = -t1000 * pkin(2) + t916;
t853 = t1007 * t911 - t1008 * t1020;
t854 = t1007 * t1020 + t1008 * t911;
t1047 = t1007 * t853 + t1008 * t854;
t781 = t1007 * t854 - t1008 * t853;
t1073 = t1011 * t781;
t1103 = t1015 * t1047 - t1073;
t1067 = t1015 * t781;
t725 = -t1011 * t1047 - t1067;
t1117 = t1012 * t725 + t1016 * t1103;
t1116 = -t1012 * t1103 + t1016 * t725;
t974 = t1011 * t1000 - t1015 * t1002;
t1095 = pkin(6) * t974 - t1011 * g(1);
t971 = t1015 * t1000 + t1011 * t1002;
t912 = t1012 * t971 + t1016 * t974;
t945 = pkin(6) * t971 - t1015 * g(1);
t1109 = pkin(5) * t912 + t1012 * t945 + t1016 * t1095;
t913 = t1012 * t974 - t1016 * t971;
t1108 = -pkin(5) * t913 - t1012 * t1095 + t1016 * t945;
t1045 = t1011 * t915 + t1015 * t916;
t864 = t1011 * t916 - t1015 * t915;
t1066 = t1016 * t864;
t1104 = -t1012 * t1045 - t1066;
t1072 = t1012 * t864;
t1102 = -t1016 * t1045 + t1072;
t1009 = sin(qJ(5));
t1001 = qJDD(4) + qJDD(5);
t1013 = cos(qJ(5));
t1014 = cos(qJ(4));
t1061 = t1004 * t1014;
t1010 = sin(qJ(4));
t1062 = t1004 * t1010;
t948 = t1009 * t1062 - t1013 * t1061;
t950 = (t1009 * t1014 + t1010 * t1013) * t1004;
t899 = t950 * t948;
t1092 = -t899 + t1001;
t1097 = t1009 * t1092;
t1096 = t1013 * t1092;
t835 = -t1000 * pkin(3) + t1002 * pkin(7) + t854;
t814 = t1014 * t1006 + t1010 * t835;
t815 = -t1010 * t1006 + t1014 * t835;
t766 = t1010 * t814 + t1014 * t815;
t1048 = qJD(4) * t1062;
t1056 = t1014 * t1002;
t1024 = t1048 - t1056;
t1057 = t1010 * t1002;
t991 = qJD(4) * t1061;
t962 = t991 + t1057;
t871 = -t948 * qJD(5) - t1009 * t1024 + t1013 * t962;
t1003 = qJD(4) + qJD(5);
t941 = t1003 * t948;
t1093 = -t941 + t871;
t1046 = t1009 * t962 + t1013 * t1024;
t844 = (qJD(5) - t1003) * t950 + t1046;
t946 = t948 ^ 2;
t947 = t950 ^ 2;
t999 = t1003 ^ 2;
t1085 = t1014 ^ 2;
t987 = t1014 * t1000 * t1010;
t977 = qJDD(4) + t987;
t792 = (-t962 + t991) * pkin(8) + t977 * pkin(4) - t814;
t979 = qJD(4) * pkin(4) - pkin(8) * t1062;
t993 = t1085 * t1000;
t793 = -pkin(4) * t993 - pkin(8) * t1024 - qJD(4) * t979 + t815;
t741 = t1009 * t793 - t1013 * t792;
t743 = t1009 * t792 + t1013 * t793;
t692 = t1009 * t743 - t1013 * t741;
t1084 = pkin(4) * t692;
t848 = t941 + t871;
t776 = -t1009 * t844 - t1013 * t848;
t1083 = pkin(4) * t776;
t834 = -t1002 * pkin(3) - t1000 * pkin(7) + t853;
t1080 = -pkin(3) * t834 + pkin(7) * t766;
t1079 = t1003 * t950;
t797 = pkin(4) * t1024 - pkin(8) * t993 + t979 * t1062 + t834;
t1078 = t1009 * t797;
t891 = t899 + t1001;
t1077 = t1009 * t891;
t1076 = t1010 * t692;
t826 = t1010 * t834;
t1075 = t1010 * t977;
t978 = qJDD(4) - t987;
t1074 = t1010 * t978;
t1071 = t1013 * t797;
t1070 = t1013 * t891;
t1069 = t1014 * t692;
t827 = t1014 * t834;
t963 = -0.2e1 * t1048 + t1056;
t917 = t1014 * t963;
t1068 = t1014 * t978;
t1065 = qJD(4) * t1004;
t1064 = t1003 * t1009;
t1063 = t1003 * t1013;
t1005 = t1010 ^ 2;
t1060 = t1005 * t1000;
t1054 = t1005 + t1085;
t1017 = qJD(4) ^ 2;
t983 = -t1017 - t1060;
t928 = -t1010 * t983 - t1068;
t961 = 0.2e1 * t991 + t1057;
t1053 = -pkin(3) * t961 + pkin(7) * t928 + t826;
t985 = -t993 - t1017;
t926 = t1014 * t985 - t1075;
t1052 = pkin(3) * t963 + pkin(7) * t926 - t827;
t732 = t1007 * t766 - t1008 * t834;
t1051 = pkin(2) * t732 + t1080;
t1050 = t1007 * t899;
t1049 = t1008 * t899;
t694 = t1009 * t741 + t1013 * t743;
t778 = t1009 * t848 - t1013 * t844;
t874 = -t946 - t947;
t672 = -pkin(4) * t874 + pkin(8) * t778 + t694;
t680 = -pkin(8) * t776 - t692;
t720 = -t1010 * t776 + t1014 * t778;
t1043 = -pkin(3) * t874 + pkin(7) * t720 + t1010 * t680 + t1014 * t672;
t889 = -t999 - t946;
t825 = t1013 * t889 - t1097;
t843 = (qJD(5) + t1003) * t950 + t1046;
t728 = -pkin(4) * t843 + pkin(8) * t825 - t1071;
t824 = t1009 * t889 + t1096;
t760 = -pkin(8) * t824 + t1078;
t769 = -t1010 * t824 + t1014 * t825;
t1042 = -pkin(3) * t843 + pkin(7) * t769 + t1010 * t760 + t1014 * t728;
t929 = -t947 - t999;
t856 = -t1009 * t929 - t1070;
t737 = -pkin(4) * t1093 + pkin(8) * t856 + t1078;
t855 = t1013 * t929 - t1077;
t762 = -pkin(8) * t855 + t1071;
t786 = -t1010 * t855 + t1014 * t856;
t1041 = -pkin(3) * t1093 + pkin(7) * t786 + t1010 * t762 + t1014 * t737;
t969 = t1054 * t1002;
t975 = t993 + t1060;
t1040 = pkin(3) * t975 + pkin(7) * t969 + t766;
t880 = t1007 * t928 - t1008 * t961;
t1039 = pkin(2) * t880 + t1053;
t879 = t1007 * t926 + t1008 * t963;
t1038 = pkin(2) * t879 + t1052;
t1037 = t1007 * t987;
t1036 = t1008 * t987;
t980 = t1012 * qJDD(1) + t1016 * t1018;
t1035 = pkin(5) * t980 - t1016 * g(1);
t1034 = -pkin(2) * t968 - t853;
t711 = t1007 * t720 - t1008 * t874;
t1033 = pkin(2) * t711 + t1043;
t740 = t1007 * t769 - t1008 * t843;
t1032 = pkin(2) * t740 + t1042;
t745 = t1007 * t786 - t1008 * t1093;
t1031 = pkin(2) * t745 + t1041;
t909 = t1007 * t969 + t1008 * t975;
t1030 = pkin(2) * t909 + t1040;
t764 = t1010 * t815 - t1014 * t814;
t1029 = t1012 * t989 - t1016 * t988;
t1028 = -t1012 * t988 - t1016 * t989;
t1026 = pkin(4) * t824 - t741;
t667 = t1014 * t694 - t1076;
t684 = -pkin(4) * t797 + pkin(8) * t694;
t1025 = -pkin(3) * t797 + pkin(7) * t667 - pkin(8) * t1076 + t1014 * t684;
t662 = t1007 * t667 - t1008 * t797;
t1022 = pkin(2) * t662 + t1025;
t1021 = pkin(4) * t855 - t743;
t1019 = -pkin(2) * t965 - t854;
t984 = t993 - t1017;
t982 = t1017 - t1060;
t981 = -t1016 * qJDD(1) + t1012 * t1018;
t976 = -t993 + t1060;
t970 = t1014 * t977;
t959 = -pkin(5) * t981 + t1012 * g(1);
t956 = t1054 * t1065;
t935 = -t947 + t999;
t934 = t946 - t999;
t933 = t1007 * qJDD(4) + t1008 * t956;
t932 = -t1008 * qJDD(4) + t1007 * t956;
t931 = -t1005 * t1065 + t1014 * t962;
t930 = t1010 * t1024 - t1085 * t1065;
t927 = -t1010 * t982 + t970;
t925 = t1014 * t984 - t1074;
t924 = t1014 * t983 - t1074;
t923 = t1014 * t982 + t1075;
t922 = t1010 * t985 + t970;
t921 = t1010 * t984 + t1068;
t918 = (t962 + t991) * t1010;
t910 = -t1007 * t975 + t1008 * t969;
t901 = -t1010 * t961 + t917;
t900 = t1010 * t963 + t1014 * t961;
t897 = t947 - t946;
t896 = t1007 * t1057 + t1008 * t927;
t895 = t1007 * t1056 + t1008 * t925;
t894 = t1007 * t927 - t1008 * t1057;
t893 = t1007 * t925 - t1008 * t1056;
t888 = t1008 * t931 - t1037;
t887 = t1008 * t930 + t1037;
t886 = t1007 * t931 + t1036;
t885 = t1007 * t930 - t1036;
t884 = -pkin(1) * t974 - t915;
t883 = -pkin(1) * t971 - t916;
t882 = t1007 * t961 + t1008 * t928;
t881 = -t1007 * t963 + t1008 * t926;
t878 = (t1009 * t950 - t1013 * t948) * t1003;
t877 = (-t1009 * t948 - t1013 * t950) * t1003;
t873 = -t1011 * t932 + t1015 * t933;
t872 = t1011 * t933 + t1015 * t932;
t870 = -t950 * qJD(5) - t1046;
t869 = t1007 * t976 + t1008 * t901;
t868 = t1007 * t901 - t1008 * t976;
t862 = pkin(1) * t864;
t861 = pkin(1) * g(1) + pkin(6) * t1045;
t860 = t1013 * t934 - t1077;
t859 = -t1009 * t935 + t1096;
t858 = t1009 * t934 + t1070;
t857 = t1013 * t935 + t1097;
t852 = -t1011 * t909 + t1015 * t910;
t851 = t1011 * t910 + t1015 * t909;
t839 = t1013 * t871 - t950 * t1064;
t838 = t1009 * t871 + t950 * t1063;
t837 = -t1009 * t870 + t948 * t1063;
t836 = t1013 * t870 + t948 * t1064;
t833 = -t1011 * t894 + t1015 * t896;
t832 = -t1011 * t893 + t1015 * t895;
t831 = t1011 * t896 + t1015 * t894;
t830 = t1011 * t895 + t1015 * t893;
t819 = -t1011 * t886 + t1015 * t888;
t818 = -t1011 * t885 + t1015 * t887;
t817 = t1011 * t888 + t1015 * t886;
t816 = t1011 * t887 + t1015 * t885;
t811 = -t1011 * t880 + t1015 * t882;
t810 = -t1011 * t879 + t1015 * t881;
t809 = t1011 * t882 + t1015 * t880;
t808 = t1011 * t881 + t1015 * t879;
t807 = -t1010 * t877 + t1014 * t878;
t806 = t1010 * t878 + t1014 * t877;
t805 = t1007 * t1001 + t1008 * t807;
t804 = -t1008 * t1001 + t1007 * t807;
t803 = -pkin(7) * t924 + t827;
t802 = -pkin(7) * t922 + t826;
t801 = -t1011 * t868 + t1015 * t869;
t800 = t1011 * t869 + t1015 * t868;
t799 = -pkin(3) * t924 + t815;
t798 = -pkin(3) * t922 + t814;
t795 = -pkin(1) * t907 + t1034;
t794 = pkin(1) * t904 + t1019;
t790 = -t1010 * t858 + t1014 * t860;
t789 = -t1010 * t857 + t1014 * t859;
t788 = t1010 * t860 + t1014 * t858;
t787 = t1010 * t859 + t1014 * t857;
t785 = t1010 * t856 + t1014 * t855;
t779 = pkin(2) * t781;
t777 = -t1009 * t1093 - t1013 * t843;
t775 = -t1009 * t843 + t1013 * t1093;
t774 = pkin(2) * t1006 + qJ(3) * t1047;
t773 = -t1010 * t838 + t1014 * t839;
t772 = -t1010 * t836 + t1014 * t837;
t771 = t1010 * t839 + t1014 * t838;
t770 = t1010 * t837 + t1014 * t836;
t768 = t1010 * t825 + t1014 * t824;
t759 = t1008 * t773 + t1050;
t758 = t1008 * t772 - t1050;
t757 = t1007 * t773 - t1049;
t756 = t1007 * t772 + t1049;
t754 = -t1007 * t844 + t1008 * t790;
t753 = t1007 * t848 + t1008 * t789;
t752 = t1007 * t790 + t1008 * t844;
t751 = t1007 * t789 - t1008 * t848;
t750 = -qJ(3) * t909 - t1008 * t764;
t749 = qJ(3) * t910 - t1007 * t764;
t748 = -t1011 * t804 + t1015 * t805;
t747 = t1007 * t1093 + t1008 * t786;
t746 = t1011 * t805 + t1015 * t804;
t742 = t1007 * t843 + t1008 * t769;
t735 = pkin(1) * t809 + t1039;
t734 = pkin(1) * t808 + t1038;
t733 = t1007 * t834 + t1008 * t766;
t730 = -qJ(3) * t880 - t1007 * t799 + t1008 * t803;
t729 = -qJ(3) * t879 - t1007 * t798 + t1008 * t802;
t722 = -pkin(2) * t924 + qJ(3) * t882 + t1007 * t803 + t1008 * t799;
t721 = -pkin(2) * t922 + qJ(3) * t881 + t1007 * t802 + t1008 * t798;
t719 = -t1010 * t775 + t1014 * t777;
t718 = t1010 * t778 + t1014 * t776;
t717 = t1010 * t777 + t1014 * t775;
t715 = pkin(1) * t851 + t1030;
t714 = t1007 * t897 + t1008 * t719;
t713 = t1007 * t719 - t1008 * t897;
t712 = t1007 * t874 + t1008 * t720;
t709 = -t1011 * t757 + t1015 * t759;
t708 = -t1011 * t756 + t1015 * t758;
t707 = t1011 * t759 + t1015 * t757;
t706 = t1011 * t758 + t1015 * t756;
t705 = -t1011 * t752 + t1015 * t754;
t704 = -t1011 * t751 + t1015 * t753;
t703 = t1011 * t754 + t1015 * t752;
t702 = t1011 * t753 + t1015 * t751;
t701 = -pkin(1) * t725 + t779;
t700 = -t1011 * t745 + t1015 * t747;
t699 = t1011 * t747 + t1015 * t745;
t698 = -pkin(3) * t785 - t1021;
t697 = -pkin(3) * t718 - t1083;
t696 = -pkin(3) * t768 - t1026;
t695 = -t1011 * t740 + t1015 * t742;
t693 = t1011 * t742 + t1015 * t740;
t691 = -pkin(6) * t851 - t1011 * t749 + t1015 * t750;
t690 = pkin(6) * t852 + t1011 * t750 + t1015 * t749;
t689 = -t1011 * t732 + t1015 * t733;
t688 = t1011 * t733 + t1015 * t732;
t687 = -pkin(7) * t785 - t1010 * t737 + t1014 * t762;
t686 = pkin(6) * t725 - qJ(3) * t1067 - t1011 * t774;
t685 = pkin(1) * t1006 + pkin(6) * t1103 - qJ(3) * t1073 + t1015 * t774;
t682 = -qJ(3) * t732 + (pkin(3) * t1007 - pkin(7) * t1008) * t764;
t681 = -pkin(7) * t768 - t1010 * t728 + t1014 * t760;
t678 = -pkin(6) * t809 - t1011 * t722 + t1015 * t730;
t677 = -pkin(6) * t808 - t1011 * t721 + t1015 * t729;
t676 = -pkin(1) * t924 + pkin(6) * t811 + t1011 * t730 + t1015 * t722;
t675 = -pkin(1) * t922 + pkin(6) * t810 + t1011 * t729 + t1015 * t721;
t674 = -t1011 * t713 + t1015 * t714;
t673 = t1011 * t714 + t1015 * t713;
t670 = -t1011 * t711 + t1015 * t712;
t669 = t1011 * t712 + t1015 * t711;
t668 = qJ(3) * t733 + (-pkin(3) * t1008 - pkin(7) * t1007 - pkin(2)) * t764;
t666 = t1010 * t694 + t1069;
t664 = pkin(1) * t688 + t1051;
t663 = t1007 * t797 + t1008 * t667;
t660 = -qJ(3) * t745 - t1007 * t698 + t1008 * t687;
t659 = pkin(1) * t699 + t1031;
t658 = -qJ(3) * t740 - t1007 * t696 + t1008 * t681;
t657 = -pkin(2) * t785 + qJ(3) * t747 + t1007 * t687 + t1008 * t698;
t656 = pkin(1) * t693 + t1032;
t655 = -pkin(3) * t666 - t1084;
t654 = -pkin(2) * t768 + qJ(3) * t742 + t1007 * t681 + t1008 * t696;
t653 = -pkin(7) * t718 - t1010 * t672 + t1014 * t680;
t652 = -pkin(6) * t688 - t1011 * t668 + t1015 * t682;
t651 = -pkin(7) * t666 - pkin(8) * t1069 - t1010 * t684;
t650 = -pkin(1) * t764 + pkin(6) * t689 + t1011 * t682 + t1015 * t668;
t649 = -t1011 * t662 + t1015 * t663;
t648 = t1011 * t663 + t1015 * t662;
t647 = -qJ(3) * t711 - t1007 * t697 + t1008 * t653;
t646 = -pkin(2) * t718 + qJ(3) * t712 + t1007 * t653 + t1008 * t697;
t645 = pkin(1) * t669 + t1033;
t644 = -pkin(6) * t699 - t1011 * t657 + t1015 * t660;
t643 = -pkin(1) * t785 + pkin(6) * t700 + t1011 * t660 + t1015 * t657;
t642 = -pkin(6) * t693 - t1011 * t654 + t1015 * t658;
t641 = -pkin(1) * t768 + pkin(6) * t695 + t1011 * t658 + t1015 * t654;
t640 = -qJ(3) * t662 - t1007 * t655 + t1008 * t651;
t639 = pkin(1) * t648 + t1022;
t638 = -pkin(2) * t666 + qJ(3) * t663 + t1007 * t651 + t1008 * t655;
t637 = -pkin(6) * t669 - t1011 * t646 + t1015 * t647;
t636 = -pkin(1) * t718 + pkin(6) * t670 + t1011 * t647 + t1015 * t646;
t635 = -pkin(6) * t648 - t1011 * t638 + t1015 * t640;
t634 = -pkin(1) * t666 + pkin(6) * t649 + t1011 * t640 + t1015 * t638;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t989, -t988, 0, 0, 0, 0, 0, 0, 0, t1002, t884, t883, 0, t862, 0, 0, 0, 0, 0, t1002, t795, t794, 0, t701, t918, t900, t923, t917, t921, 0, t734, t735, t715, t664, t771, t717, t787, t770, t788, t806, t656, t659, t645, t639; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t980, 0, t981, 0, t1035, t959, t1029, pkin(5) * t1029, 0, 0, t913, 0, t912, 0, t1108, -t1109, t1102, pkin(5) * t1102 + pkin(6) * t1072 - t1016 * t861, 0, 0, t850, 0, t849, 0, t1118, t1119, -t1117, -pkin(5) * t1117 - t1012 * t686 - t1016 * t685, -t1012 * t819 - t1016 * t817, -t1012 * t801 - t1016 * t800, -t1012 * t833 - t1016 * t831, -t1012 * t818 - t1016 * t816, -t1012 * t832 - t1016 * t830, -t1012 * t873 - t1016 * t872, -t1012 * t677 - t1016 * t675 - pkin(5) * (-t1012 * t808 + t1016 * t810), -t1012 * t678 - t1016 * t676 - pkin(5) * (-t1012 * t809 + t1016 * t811), -t1012 * t691 - t1016 * t690 - pkin(5) * (-t1012 * t851 + t1016 * t852), -t1012 * t652 - t1016 * t650 - pkin(5) * (-t1012 * t688 + t1016 * t689), -t1012 * t709 - t1016 * t707, -t1012 * t674 - t1016 * t673, -t1012 * t704 - t1016 * t702, -t1012 * t708 - t1016 * t706, -t1012 * t705 - t1016 * t703, -t1012 * t748 - t1016 * t746, -t1012 * t642 - t1016 * t641 - pkin(5) * (-t1012 * t693 + t1016 * t695), -t1012 * t644 - t1016 * t643 - pkin(5) * (-t1012 * t699 + t1016 * t700), -t1012 * t637 - t1016 * t636 - pkin(5) * (-t1012 * t669 + t1016 * t670), -t1012 * t635 - t1016 * t634 - pkin(5) * (-t1012 * t648 + t1016 * t649); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t981, 0, -t980, 0, -t959, t1035, t1028, pkin(5) * t1028, 0, 0, -t912, 0, t913, 0, t1109, t1108, t1104, pkin(5) * t1104 - pkin(6) * t1066 - t1012 * t861, 0, 0, -t849, 0, t850, 0, -t1119, t1118, t1116, pkin(5) * t1116 - t1012 * t685 + t1016 * t686, -t1012 * t817 + t1016 * t819, -t1012 * t800 + t1016 * t801, -t1012 * t831 + t1016 * t833, -t1012 * t816 + t1016 * t818, -t1012 * t830 + t1016 * t832, -t1012 * t872 + t1016 * t873, t1016 * t677 - t1012 * t675 + pkin(5) * (-t1012 * t810 - t1016 * t808), t1016 * t678 - t1012 * t676 + pkin(5) * (-t1012 * t811 - t1016 * t809), t1016 * t691 - t1012 * t690 + pkin(5) * (-t1012 * t852 - t1016 * t851), t1016 * t652 - t1012 * t650 + pkin(5) * (-t1012 * t689 - t1016 * t688), -t1012 * t707 + t1016 * t709, -t1012 * t673 + t1016 * t674, -t1012 * t702 + t1016 * t704, -t1012 * t706 + t1016 * t708, -t1012 * t703 + t1016 * t705, -t1012 * t746 + t1016 * t748, t1016 * t642 - t1012 * t641 + pkin(5) * (-t1012 * t695 - t1016 * t693), t1016 * t644 - t1012 * t643 + pkin(5) * (-t1012 * t700 - t1016 * t699), t1016 * t637 - t1012 * t636 + pkin(5) * (-t1012 * t670 - t1016 * t669), t1016 * t635 - t1012 * t634 + pkin(5) * (-t1012 * t649 - t1016 * t648); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1018, 0, 0, -g(1), -t989, 0, 0, 0, -t974, 0, -t971, 0, t1095, t945, -t864, -pkin(6) * t864, 0, 0, -t907, 0, t904, 0, t1107, -t820, t725, t686, t819, t801, t833, t818, t832, t873, t677, t678, t691, t652, t709, t674, t704, t708, t705, t748, t642, t644, t637, t635; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1018, 0, qJDD(1), 0, g(1), 0, t988, 0, 0, 0, t971, 0, -t974, 0, -t945, t1095, t1045, t861, 0, 0, -t904, 0, -t907, 0, t820, t1107, t1103, t685, t817, t800, t831, t816, t830, t872, t675, t676, t690, t650, t707, t673, t702, t706, t703, t746, t641, t643, t636, t634; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t989, -t988, 0, 0, 0, 0, 0, 0, 0, t1002, t884, t883, 0, t862, 0, 0, 0, 0, 0, t1002, t795, t794, 0, t701, t918, t900, t923, t917, t921, 0, t734, t735, t715, t664, t771, t717, t787, t770, t788, t806, t656, t659, t645, t639; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1002, 0, -t1000, 0, 0, -g(1), t915, 0, 0, 0, -t968, 0, -t965, 0, t1094, t939, -t781, -qJ(3) * t781, t888, t869, t896, t887, t895, t933, t729, t730, t750, t682, t759, t714, t753, t758, t754, t805, t658, t660, t647, t640; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1000, 0, t1002, 0, g(1), 0, t916, 0, 0, 0, t965, 0, -t968, 0, -t939, t1094, t1047, t774, t886, t868, t894, t885, t893, t932, t721, t722, t749, t668, t757, t713, t751, t756, t752, t804, t654, t657, t646, t638; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1002, -t915, -t916, 0, 0, 0, 0, 0, 0, 0, t1002, t1034, t1019, 0, t779, t918, t900, t923, t917, t921, 0, t1038, t1039, t1030, t1051, t771, t717, t787, t770, t788, t806, t1032, t1031, t1033, t1022; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1002, 0, -t1000, 0, 0, -t1006, t853, 0, t931, t901, t927, t930, t925, t956, t802, t803, -t764, -pkin(7) * t764, t773, t719, t789, t772, t790, t807, t681, t687, t653, t651; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1000, 0, t1002, 0, t1006, 0, t854, 0, t987, -t976, -t1057, -t987, -t1056, -qJDD(4), t798, t799, 0, -pkin(3) * t764, -t899, -t897, -t848, t899, t844, -t1001, t696, t698, t697, t655; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1002, -t853, -t854, 0, 0, t918, t900, t923, t917, t921, 0, t1052, t1053, t1040, t1080, t771, t717, t787, t770, t788, t806, t1042, t1041, t1043, t1025; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t962, t963, t977, -t991, t984, t991, 0, t834, t814, 0, t839, t777, t859, t837, t860, t878, t760, t762, t680, -pkin(8) * t692; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1048, t961, t982, -t1024, t978, -t1048, -t834, 0, t815, 0, t838, t775, t857, t836, t858, t877, t728, t737, t672, t684; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t987, t976, t1057, t987, t1056, qJDD(4), -t814, -t815, 0, 0, t899, t897, t848, -t899, -t844, t1001, t1026, t1021, t1083, t1084; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t871, -t843, t1092, t941, t934, -t941, 0, t797, t741, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1079, t1093, t935, t870, t891, -t1079, -t797, 0, t743, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t899, t897, t848, -t899, -t844, t1001, -t741, -t743, 0, 0;];
m_new_reg = t1;
