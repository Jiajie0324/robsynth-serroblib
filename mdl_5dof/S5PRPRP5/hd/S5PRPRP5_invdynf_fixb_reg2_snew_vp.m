% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRPRP5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d4,theta1,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:39
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRPRP5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRP5_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRP5_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRP5_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRP5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRPRP5_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:39:15
% EndTime: 2019-12-05 15:39:18
% DurationCPUTime: 2.65s
% Computational Cost: add. (4193->163), mult. (9672->201), div. (0->0), fcn. (6799->8), ass. (0->114)
t1378 = sin(pkin(8));
t1380 = cos(pkin(8));
t1382 = sin(qJ(4));
t1384 = cos(qJ(4));
t1348 = (-t1378 * t1382 + t1380 * t1384) * qJD(2);
t1393 = t1378 * t1384 + t1380 * t1382;
t1350 = t1393 * qJD(2);
t1406 = t1348 * t1350;
t1322 = -qJDD(4) + t1406;
t1345 = t1350 ^ 2;
t1386 = qJD(4) ^ 2;
t1415 = -t1345 - t1386;
t1299 = t1322 * t1382 + t1384 * t1415;
t1301 = t1322 * t1384 - t1382 * t1415;
t1271 = t1299 * t1378 - t1301 * t1380;
t1383 = sin(qJ(2));
t1385 = cos(qJ(2));
t1347 = t1393 * qJDD(2);
t1424 = 2 * qJD(4);
t1392 = t1348 * t1424 + t1347;
t1256 = t1271 * t1385 - t1383 * t1392;
t1281 = t1299 * t1380 + t1301 * t1378;
t1379 = sin(pkin(7));
t1381 = cos(pkin(7));
t1442 = t1256 * t1379 + t1281 * t1381;
t1441 = t1256 * t1381 - t1281 * t1379;
t1255 = t1271 * t1383 + t1385 * t1392;
t1321 = qJDD(4) + t1406;
t1325 = t1348 ^ 2;
t1416 = -t1325 - t1386;
t1421 = -t1321 * t1382 + t1384 * t1416;
t1422 = t1384 * t1321 + t1382 * t1416;
t1425 = t1378 * t1421 + t1380 * t1422;
t1370 = t1380 * qJDD(2);
t1398 = t1378 * qJDD(2);
t1394 = t1384 * t1370 - t1382 * t1398;
t1405 = t1350 * qJD(4);
t1323 = -t1394 + 0.2e1 * t1405;
t1426 = -t1378 * t1422 + t1380 * t1421;
t1431 = t1323 * t1383 + t1385 * t1426;
t1438 = t1379 * t1431 - t1381 * t1425;
t1437 = t1379 * t1425 + t1381 * t1431;
t1434 = -t1385 * t1323 + t1383 * t1426;
t1413 = t1347 * t1382 + t1384 * t1394;
t1414 = -t1384 * t1347 + t1382 * t1394;
t1419 = t1378 * t1413 + t1380 * t1414;
t1307 = t1345 + t1325;
t1420 = -t1378 * t1414 + t1380 * t1413;
t1427 = -t1307 * t1383 + t1385 * t1420;
t1433 = t1379 * t1427 - t1381 * t1419;
t1432 = t1379 * t1419 + t1381 * t1427;
t1428 = t1307 * t1385 + t1383 * t1420;
t1361 = -t1381 * g(1) - t1379 * g(2);
t1412 = -g(3) + qJDD(1);
t1336 = t1385 * t1361 + t1383 * t1412;
t1387 = qJD(2) ^ 2;
t1423 = -pkin(2) * t1387 + qJDD(2) * qJ(3) + 0.2e1 * qJD(2) * qJD(3) + t1336;
t1373 = t1380 ^ 2;
t1388 = t1378 ^ 2;
t1399 = t1373 + t1388;
t1357 = t1399 * t1387;
t1360 = t1379 * g(1) - t1381 * g(2);
t1404 = t1360 * t1379;
t1403 = t1373 * t1387;
t1402 = t1380 * t1360;
t1401 = t1380 * t1387;
t1400 = t1388 * t1387;
t1305 = -t1378 * t1360 + t1423 * t1380;
t1297 = -pkin(3) * t1403 + pkin(6) * t1370 + t1305;
t1391 = -t1402 + (pkin(3) * t1401 - pkin(6) * qJDD(2) - t1423) * t1378;
t1279 = t1384 * t1297 + t1382 * t1391;
t1397 = t1383 * qJDD(2);
t1396 = t1385 * qJDD(2);
t1278 = -t1297 * t1382 + t1384 * t1391;
t1335 = -t1383 * t1361 + t1385 * t1412;
t1329 = -qJDD(2) * pkin(2) - t1387 * qJ(3) + qJDD(3) - t1335;
t1310 = -pkin(3) * t1370 + t1329 + (-t1400 - t1403) * pkin(6);
t1362 = t1378 * t1401;
t1359 = -t1383 * t1387 + t1396;
t1358 = -t1385 * t1387 - t1397;
t1356 = t1399 * qJDD(2);
t1354 = t1381 * t1360;
t1352 = t1380 * t1357;
t1351 = t1378 * t1357;
t1334 = -t1352 * t1385 - t1380 * t1397;
t1333 = t1351 * t1385 + t1378 * t1397;
t1332 = -t1352 * t1383 + t1380 * t1396;
t1331 = t1351 * t1383 - t1378 * t1396;
t1328 = t1356 * t1385 - t1357 * t1383;
t1327 = t1356 * t1383 + t1357 * t1385;
t1316 = -pkin(4) * t1348 - qJ(5) * t1350;
t1309 = -t1335 * t1383 + t1336 * t1385;
t1308 = t1335 * t1385 + t1336 * t1383;
t1304 = -t1378 * t1423 - t1402;
t1285 = -t1304 * t1378 + t1305 * t1380;
t1284 = t1304 * t1380 + t1305 * t1378;
t1277 = t1285 * t1385 + t1329 * t1383;
t1276 = t1285 * t1383 - t1329 * t1385;
t1263 = -(t1394 - t1405) * pkin(4) + (pkin(4) * qJD(4) - (2 * qJD(5))) * t1350 + t1310 - t1392 * qJ(5);
t1262 = -qJDD(4) * pkin(4) - t1386 * qJ(5) + t1316 * t1350 + qJDD(5) - t1278;
t1261 = -pkin(4) * t1386 + qJDD(4) * qJ(5) + (qJD(5) * t1424) + t1316 * t1348 + t1279;
t1254 = -t1278 * t1382 + t1279 * t1384;
t1253 = t1278 * t1384 + t1279 * t1382;
t1252 = t1261 * t1384 + t1262 * t1382;
t1251 = t1261 * t1382 - t1262 * t1384;
t1250 = -t1253 * t1378 + t1254 * t1380;
t1249 = t1253 * t1380 + t1254 * t1378;
t1248 = t1250 * t1385 + t1310 * t1383;
t1247 = t1250 * t1383 - t1310 * t1385;
t1246 = -t1251 * t1378 + t1252 * t1380;
t1245 = t1251 * t1380 + t1252 * t1378;
t1244 = t1246 * t1385 + t1263 * t1383;
t1243 = t1246 * t1383 - t1263 * t1385;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1361 * t1381 - t1404, 0, 0, 0, 0, 0, 0, t1381 * t1358, -t1381 * t1359, 0, t1309 * t1381 - t1404, 0, 0, 0, 0, 0, 0, t1381 * t1334, t1381 * t1333, t1381 * t1328, t1277 * t1381 + t1284 * t1379, 0, 0, 0, 0, 0, 0, t1437, -t1441, t1432, t1248 * t1381 + t1249 * t1379, 0, 0, 0, 0, 0, 0, t1437, t1432, t1441, t1244 * t1381 + t1245 * t1379; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1361 * t1379 + t1354, 0, 0, 0, 0, 0, 0, t1379 * t1358, -t1379 * t1359, 0, t1309 * t1379 + t1354, 0, 0, 0, 0, 0, 0, t1379 * t1334, t1379 * t1333, t1379 * t1328, t1277 * t1379 - t1284 * t1381, 0, 0, 0, 0, 0, 0, t1438, -t1442, t1433, t1248 * t1379 - t1249 * t1381, 0, 0, 0, 0, 0, 0, t1438, t1433, t1442, t1244 * t1379 - t1245 * t1381; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1412, 0, 0, 0, 0, 0, 0, t1359, t1358, 0, t1308, 0, 0, 0, 0, 0, 0, t1332, t1331, t1327, t1276, 0, 0, 0, 0, 0, 0, t1434, -t1255, t1428, t1247, 0, 0, 0, 0, 0, 0, t1434, t1428, t1255, t1243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1361, 0, 0, 0, 0, 0, 0, t1358, -t1359, 0, t1309, 0, 0, 0, 0, 0, 0, t1334, t1333, t1328, t1277, 0, 0, 0, 0, 0, 0, t1431, -t1256, t1427, t1248, 0, 0, 0, 0, 0, 0, t1431, t1427, t1256, t1244; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1360, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1360, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1284, 0, 0, 0, 0, 0, 0, -t1425, -t1281, -t1419, -t1249, 0, 0, 0, 0, 0, 0, -t1425, -t1419, t1281, -t1245; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1412, 0, 0, 0, 0, 0, 0, t1359, t1358, 0, t1308, 0, 0, 0, 0, 0, 0, t1332, t1331, t1327, t1276, 0, 0, 0, 0, 0, 0, t1434, -t1255, t1428, t1247, 0, 0, 0, 0, 0, 0, t1434, t1428, t1255, t1243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1387, -qJDD(2), 0, t1336, 0, 0, 0, 0, 0, 0, -t1352, t1351, t1356, t1285, 0, 0, 0, 0, 0, 0, t1426, -t1271, t1420, t1250, 0, 0, 0, 0, 0, 0, t1426, t1420, t1271, t1246; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1387, 0, t1335, 0, 0, 0, 0, 0, 0, t1370, -t1398, t1357, -t1329, 0, 0, 0, 0, 0, 0, -t1323, -t1392, t1307, -t1310, 0, 0, 0, 0, 0, 0, -t1323, t1307, t1392, -t1263; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1360, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1284, 0, 0, 0, 0, 0, 0, t1425, t1281, t1419, t1249, 0, 0, 0, 0, 0, 0, t1425, t1419, -t1281, t1245; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1403, t1362, t1370, t1305, 0, 0, 0, 0, 0, 0, t1421, t1301, t1413, t1254, 0, 0, 0, 0, 0, 0, t1421, t1413, -t1301, t1252; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1362, -t1400, -t1398, t1304, 0, 0, 0, 0, 0, 0, t1422, t1299, t1414, t1253, 0, 0, 0, 0, 0, 0, t1422, t1414, -t1299, t1251; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1370, t1398, -t1357, t1329, 0, 0, 0, 0, 0, 0, t1323, t1392, -t1307, t1310, 0, 0, 0, 0, 0, 0, t1323, -t1307, -t1392, t1263; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1416, t1322, t1394, t1279, 0, 0, 0, 0, 0, 0, t1416, t1394, -t1322, t1261; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1321, t1415, -t1347, t1278, 0, 0, 0, 0, 0, 0, t1321, -t1347, -t1415, -t1262; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1323, t1392, -t1307, t1310, 0, 0, 0, 0, 0, 0, t1323, -t1307, -t1392, t1263; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1416, t1394, -t1322, t1261; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1323, -t1307, -t1392, t1263; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1321, t1347, t1415, t1262;];
f_new_reg = t1;
