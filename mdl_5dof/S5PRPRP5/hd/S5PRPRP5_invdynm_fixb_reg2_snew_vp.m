% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PRPRP5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d4,theta1,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:39
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PRPRP5_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRP5_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRP5_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRP5_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRP5_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRPRP5_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:39:01
% EndTime: 2019-12-05 15:39:15
% DurationCPUTime: 15.03s
% Computational Cost: add. (25283->545), mult. (58361->664), div. (0->0), fcn. (40323->8), ass. (0->366)
t1058 = sin(pkin(7));
t1060 = cos(pkin(7));
t1057 = sin(pkin(8));
t1043 = t1057 * qJDD(2);
t1059 = cos(pkin(8));
t1045 = t1059 * qJDD(2);
t1062 = sin(qJ(4));
t1064 = cos(qJ(4));
t1013 = t1062 * t1043 - t1064 * t1045;
t1063 = sin(qJ(2));
t1065 = cos(qJ(2));
t1136 = qJD(2) * t1057;
t1015 = -t1064 * t1059 * qJD(2) + t1062 * t1136;
t1091 = t1057 * t1064 + t1059 * t1062;
t1017 = t1091 * qJD(2);
t1133 = t1017 * t1015;
t1173 = qJDD(4) + t1133;
t1139 = t1064 * t1173;
t1066 = qJD(4) ^ 2;
t1162 = t1015 ^ 2;
t997 = t1162 - t1066;
t905 = t1062 * t997 + t1139;
t1146 = t1062 * t1173;
t911 = t1064 * t997 - t1146;
t855 = t1057 * t905 - t1059 * t911;
t836 = t1063 * t1013 + t1065 * t855;
t848 = t1057 * t911 + t1059 * t905;
t1242 = t1058 * t836 + t1060 * t848;
t1241 = -t1058 * t848 + t1060 * t836;
t1012 = t1017 ^ 2;
t955 = t1066 + t1012;
t893 = t1064 * t955 + t1146;
t916 = t1062 * t955 - t1139;
t853 = t1057 * t916 - t1059 * t893;
t1240 = pkin(1) * t853;
t1239 = pkin(2) * t853;
t1238 = qJ(3) * t853;
t859 = t1057 * t893 + t1059 * t916;
t1237 = qJ(3) * t859;
t1235 = t1058 * t853;
t1233 = t1060 * t853;
t1232 = t1063 * t859;
t1231 = t1065 * t859;
t833 = -t1065 * t1013 + t1063 * t855;
t1230 = pkin(3) * t893;
t1229 = pkin(6) * t893;
t1228 = pkin(6) * t916;
t1174 = qJDD(4) - t1133;
t1145 = t1062 * t1174;
t1175 = -t1162 - t1066;
t1181 = t1064 * t1175 - t1145;
t944 = t1064 * t1174;
t1185 = t1062 * t1175 + t944;
t1198 = -t1057 * t1185 + t1059 * t1181;
t1008 = t1017 * qJD(4);
t961 = 0.2e1 * t1008 + t1013;
t1211 = t1063 * t1198 - t1065 * t961;
t1227 = pkin(1) * t1211;
t1226 = pkin(5) * t1211;
t1197 = t1057 * t1181 + t1059 * t1185;
t1210 = t1063 * t961 + t1065 * t1198;
t1225 = -pkin(1) * t1197 + pkin(5) * t1210;
t1224 = qJ(1) * (t1058 * t1210 - t1060 * t1197);
t1223 = qJ(1) * (t1058 * t1197 + t1060 * t1210);
t1221 = pkin(2) * t1197;
t1220 = qJ(3) * t1197;
t1007 = t1015 * qJD(4);
t1014 = t1091 * qJDD(2);
t964 = t1014 - t1007;
t1194 = t1007 - t964;
t1219 = t1194 * qJ(5);
t998 = t1012 - t1066;
t1192 = -t1064 * t998 + t1145;
t1193 = t1062 * t998 + t944;
t1196 = t1057 * t1193 + t1059 * t1192;
t1218 = t1058 * t1196;
t1216 = t1060 * t1196;
t1195 = -t1057 * t1192 + t1059 * t1193;
t1214 = t1063 * t1195;
t1213 = t1065 * t1195;
t1212 = -pkin(2) * t961 + qJ(3) * t1198;
t931 = -t1162 - t1012;
t1209 = pkin(2) * t931;
t1208 = pkin(3) * t931;
t1207 = pkin(3) * t1185;
t1206 = pkin(6) * t1181;
t1205 = pkin(6) * t1185;
t1204 = t1063 * t931;
t1203 = t1065 * t931;
t1118 = t1064 * t1007;
t962 = t1008 + t1013;
t1089 = t1062 * t962 + t1118;
t1134 = t1015 * t1062;
t1097 = qJD(4) * t1134 - t1064 * t962;
t1164 = t1057 * t1089 + t1059 * t1097;
t1119 = t1063 * t1133;
t1165 = -t1057 * t1097 + t1059 * t1089;
t1180 = t1065 * t1165 - t1119;
t1202 = t1058 * t1180 - t1060 * t1164;
t1132 = t1017 * t1064;
t1087 = (-t1132 - t1134) * qJD(4);
t993 = t1062 * t1008;
t1096 = t993 - t1118;
t1167 = t1057 * t1096 + t1059 * t1087;
t1166 = -t1057 * t1087 + t1059 * t1096;
t1184 = t1063 * qJDD(4) + t1065 * t1166;
t1201 = t1058 * t1184 - t1060 * t1167;
t1200 = t1058 * t1164 + t1060 * t1180;
t1199 = t1058 * t1167 + t1060 * t1184;
t1177 = t1012 - t1162;
t1187 = t1063 * t1177;
t1186 = t1065 * t1177;
t1069 = t1059 ^ 2;
t1163 = qJD(2) ^ 2;
t1046 = t1069 * t1163;
t1067 = t1057 ^ 2;
t1124 = t1067 * t1163;
t1026 = t1046 + t1124;
t1117 = t1065 * t1133;
t1183 = t1063 * t1165 + t1117;
t1182 = -t1065 * qJDD(4) + t1063 * t1166;
t1157 = g(3) - qJDD(1);
t1179 = t1058 * t1157;
t1178 = t1060 * t1157;
t1031 = t1058 * g(1) - t1060 * g(2);
t1021 = t1060 * t1031;
t1032 = t1060 * g(1) + t1058 * g(2);
t1176 = -t1058 * t1032 + t1021;
t922 = qJD(4) * t1132 + t1062 * t964;
t923 = t1064 * t964 - t993;
t869 = -t1057 * t922 + t1059 * t923;
t1095 = t1065 * t869 + t1119;
t866 = t1057 * t923 + t1059 * t922;
t1172 = t1058 * t1095 - t1060 * t866;
t1171 = t1163 * (t1067 + t1069);
t1018 = t1057 * t1171;
t1056 = qJDD(2) * pkin(2);
t1104 = t1063 * t1032 - t1065 * t1157;
t1086 = t1163 * qJ(3) - qJDD(3) + t1056 + t1104;
t1113 = t1086 + t1056;
t1170 = qJ(3) * t1018 - t1113 * t1057;
t1019 = t1059 * t1171;
t1169 = -qJ(3) * t1019 + t1113 * t1059;
t1168 = t1058 * t866 + t1060 * t1095;
t1020 = t1059 * t1031;
t1128 = t1059 * t1163;
t1158 = pkin(6) * qJDD(2);
t995 = -t1065 * t1032 - t1063 * t1157;
t977 = -t1163 * pkin(2) + qJDD(2) * qJ(3) + t995;
t903 = -t1020 - 0.2e1 * qJD(3) * t1136 + (pkin(3) * t1128 - t1158 - t977) * t1057;
t1106 = 0.2e1 * qJD(2) * qJD(3) + t977;
t1131 = t1057 * t1031;
t904 = -pkin(3) * t1046 - t1131 + (t1106 + t1158) * t1059;
t846 = t1062 * t904 - t1064 * t903;
t847 = t1062 * t903 + t1064 * t904;
t783 = t1062 * t847 - t1064 * t846;
t1161 = pkin(3) * t783;
t926 = -t962 + t1008;
t996 = t1064 * t1014;
t896 = t1062 * t926 - t996;
t1160 = pkin(3) * t896;
t1159 = pkin(4) * t1064;
t1135 = qJD(5) * qJD(4);
t1050 = 0.2e1 * t1135;
t951 = t1015 * pkin(4) - t1017 * qJ(5);
t1093 = -t1066 * pkin(4) + qJDD(4) * qJ(5) - t1015 * t951 + t847;
t801 = t1050 + t1093;
t803 = -qJDD(4) * pkin(4) - t1066 * qJ(5) + t1017 * t951 + qJDD(5) + t846;
t1156 = -pkin(4) * t803 + qJ(5) * t801;
t1153 = t1057 * t783;
t1033 = t1057 * t1128;
t1121 = t1065 * qJDD(2);
t1114 = t1059 * t1121;
t991 = -t1063 * t1033 + t1057 * t1114;
t1151 = t1058 * t991;
t1150 = t1059 * t783;
t1149 = t1060 * t991;
t1148 = t1062 * t1194;
t1075 = pkin(3) * t1045 + t1026 * pkin(6) + t1086;
t1147 = t1062 * t1075;
t1144 = t1062 * t961;
t1141 = t1063 * t1086;
t1140 = t1064 * t1075;
t1138 = t1064 * t961;
t1137 = t1065 * t1086;
t1130 = t1058 * t1031;
t1127 = t1062 * t1014;
t1123 = -pkin(4) * t1014 - qJ(5) * t1013;
t1122 = t1063 * qJDD(2);
t1042 = t1067 * qJDD(2);
t1044 = t1069 * qJDD(2);
t1116 = -qJ(5) * t1062 - pkin(3);
t1115 = t1057 * t1045;
t1024 = t1044 + t1042;
t929 = t1057 * t1106 + t1020;
t930 = t1059 * t1106 - t1131;
t877 = t1057 * t929 + t1059 * t930;
t1085 = pkin(2) * t1026 + qJ(3) * t1024 + t877;
t972 = t1063 * t1024 + t1065 * t1026;
t814 = -pkin(1) * t972 - t1085;
t974 = t1065 * t1024 - t1063 * t1026;
t1112 = qJ(1) * t974 + t814;
t978 = t1063 * t1018 - t1057 * t1121;
t890 = -pkin(1) * t978 - t1170;
t983 = t1065 * t1018 + t1057 * t1122;
t1111 = qJ(1) * t983 + t890;
t982 = -t1063 * t1019 + t1114;
t891 = -pkin(1) * t982 - t1169;
t986 = t1065 * t1019 + t1059 * t1122;
t1110 = -qJ(1) * t986 + t891;
t1029 = t1065 * t1163 + t1122;
t1030 = -t1063 * t1163 + t1121;
t970 = -pkin(1) * t1030 - t1104;
t1109 = qJ(1) * t1029 - t970;
t971 = pkin(1) * t1029 + t995;
t1108 = qJ(1) * t1030 - t971;
t784 = t1062 * t846 + t1064 * t847;
t1107 = -t1063 * t1104 + t1065 * t995;
t1105 = -t1060 * t1032 - t1130;
t1103 = -0.2e1 * t1115;
t1102 = 0.2e1 * t1115;
t772 = t1062 * t801 - t1064 * t803;
t1101 = pkin(3) * t772 + t1156;
t1100 = -t847 - t1230;
t942 = -t1062 * t1013 - t996;
t1099 = pkin(3) * t942 + t1123;
t1098 = pkin(2) * t1086 + qJ(3) * t877;
t1094 = t1063 * t869 - t1117;
t985 = pkin(5) * t1029 - t1065 * t1031;
t1092 = -pkin(5) * t1030 - t1063 * t1031;
t875 = t1057 * t930 - t1059 * t929;
t934 = t1063 * t995 + t1065 * t1104;
t1090 = -t846 + t1207;
t1088 = pkin(4) * t955 + qJ(5) * t1173 + t1093;
t1073 = t962 * pkin(4) - t1075 + t1219;
t1071 = 0.2e1 * qJD(5) * t1017 - t1073;
t795 = t1071 + (-t961 - t1008) * pkin(4);
t778 = t1064 * t795 + t1116 * t961 + t1206;
t781 = -qJ(5) * t1138 - t1062 * t795 - t1205;
t1084 = t1057 * t781 + t1059 * t778 + t1212;
t823 = -pkin(3) * t961 + t1140 + t1206;
t863 = -t1147 - t1205;
t1083 = t1057 * t863 + t1059 * t823 + t1212;
t1082 = t1088 + t1230;
t773 = t1062 * t803 + t1064 * t801;
t808 = (pkin(4) * qJD(4) - 0.2e1 * qJD(5)) * t1017 + t1073;
t749 = pkin(6) * t773 + (t1116 - t1159) * t808;
t754 = -t1057 * t772 + t1059 * t773;
t756 = -pkin(6) * t772 + (pkin(4) * t1062 - qJ(5) * t1064) * t808;
t1081 = -pkin(2) * t808 + qJ(3) * t754 + t1057 * t756 + t1059 * t749;
t785 = -pkin(4) * t931 + t801;
t786 = -qJ(5) * t931 + t803;
t943 = -t1064 * t1013 + t1127;
t761 = pkin(6) * t943 + t1062 * t786 + t1064 * t785 - t1208;
t764 = -pkin(6) * t942 - t1062 * t785 + t1064 * t786;
t889 = -t1057 * t942 + t1059 * t943;
t1080 = qJ(3) * t889 + t1057 * t764 + t1059 * t761 - t1209;
t790 = -pkin(4) * t1008 + t1071 - t1219;
t769 = -t1228 + t1062 * t790 - (pkin(3) + t1159) * t1194;
t776 = pkin(4) * t1148 + t1064 * t790 - t1229;
t1079 = -pkin(2) * t1194 + t1057 * t776 + t1059 * t769 - t1237;
t898 = t1064 * t926 + t1127;
t770 = pkin(6) * t898 - t1208 + t784;
t777 = -pkin(6) * t896 - t783;
t830 = -t1057 * t896 + t1059 * t898;
t1078 = qJ(3) * t830 + t1057 * t777 + t1059 * t770 - t1209;
t963 = t1014 - 0.2e1 * t1007;
t838 = -pkin(3) * t963 - t1147 + t1228;
t874 = -t1140 + t1229;
t1077 = -pkin(2) * t963 + t1057 * t874 + t1059 * t838 + t1237;
t763 = t1059 * t784 - t1153;
t780 = pkin(3) * t1075 + pkin(6) * t784;
t1076 = pkin(2) * t1075 - pkin(6) * t1153 + qJ(3) * t763 + t1059 * t780;
t1074 = pkin(4) * t1174 + qJ(5) * t1175 - t803;
t1072 = t1074 + t1207;
t1027 = -t1046 + t1124;
t1025 = t1044 - t1042;
t990 = t1029 * t1059 * t1057;
t975 = t1065 * t1025 + t1063 * t1027;
t973 = t1063 * t1025 - t1065 * t1027;
t927 = t1007 + t964;
t917 = pkin(1) * t1031 + pkin(5) * t1107;
t899 = -t1062 * t963 - t1138;
t897 = t1064 * t963 - t1144;
t888 = t1057 * t943 + t1059 * t942;
t883 = t1138 - t1148;
t882 = t1064 * t1194 + t1144;
t873 = -pkin(5) * t978 - t1059 * t1137 - t1063 * t930;
t872 = -pkin(5) * t982 - t1057 * t1137 - t1063 * t929;
t871 = pkin(5) * t983 - t1059 * t1141 + t1065 * t930;
t870 = -pkin(5) * t986 - t1057 * t1141 + t1065 * t929;
t844 = -pkin(5) * t972 - t1065 * t875;
t843 = pkin(5) * t974 - t1063 * t875;
t842 = t1065 * t877 - t1141;
t841 = t1063 * t877 + t1137;
t840 = t1065 * t889 + t1204;
t839 = t1063 * t889 - t1203;
t837 = t1063 * t1014 + t1213;
t834 = -t1065 * t1014 + t1214;
t831 = -t1057 * t897 + t1059 * t899;
t829 = t1057 * t899 + t1059 * t897;
t828 = t1057 * t898 + t1059 * t896;
t813 = -pkin(2) * t888 - t1099;
t812 = t1063 * t963 + t1231;
t810 = -t1065 * t963 + t1232;
t807 = t1063 * t927 + t1213;
t806 = -t1065 * t927 + t1214;
t805 = -t1057 * t882 + t1059 * t883;
t804 = t1057 * t883 + t1059 * t882;
t799 = t1065 * t831 + t1187;
t798 = t1063 * t831 - t1186;
t794 = t1065 * t830 + t1204;
t793 = t1063 * t830 - t1203;
t792 = t1063 * t1194 - t1231;
t791 = -t1065 * t1194 - t1232;
t789 = t1065 * t805 - t1187;
t788 = t1063 * t805 + t1186;
t787 = -pkin(2) * t828 - t1160;
t782 = -pkin(1) * t841 - t1098;
t779 = -t1100 - t1239;
t775 = -pkin(5) * t841 + (pkin(2) * t1063 - qJ(3) * t1065) * t875;
t774 = -t1090 - t1221;
t771 = -t1057 * t838 + t1059 * t874 - t1238;
t768 = -t1072 - t1221;
t767 = -t1057 * t823 + t1059 * t863 - t1220;
t766 = pkin(5) * t842 + (-pkin(2) * t1065 - qJ(3) * t1063 - pkin(1)) * t875;
t765 = -t1082 - 0.2e1 * t1135 + t1239;
t762 = t1057 * t784 + t1150;
t760 = -pkin(1) * t810 - t1077;
t759 = -t1063 * t1075 + t1065 * t763;
t758 = t1063 * t763 + t1065 * t1075;
t757 = -t1083 - t1227;
t755 = -t1057 * t778 + t1059 * t781 - t1220;
t753 = t1057 * t773 + t1059 * t772;
t752 = -pkin(2) * t762 - t1161;
t751 = -pkin(5) * t810 - t1063 * t779 + t1065 * t771;
t750 = -qJ(3) * t828 - t1057 * t770 + t1059 * t777;
t748 = -t1057 * t769 + t1059 * t776 + t1238;
t747 = t1063 * t808 + t1065 * t754;
t746 = t1063 * t754 - t1065 * t808;
t745 = -t1084 - t1227;
t744 = pkin(5) * t812 + t1063 * t771 + t1065 * t779 - t1240;
t743 = -t1063 * t774 + t1065 * t767 - t1226;
t742 = -pkin(6) * t1150 - qJ(3) * t762 - t1057 * t780;
t741 = -pkin(1) * t793 - t1078;
t740 = t1063 * t767 + t1065 * t774 + t1225;
t739 = -pkin(1) * t791 - t1079;
t738 = -qJ(3) * t888 - t1057 * t761 + t1059 * t764;
t737 = -pkin(5) * t793 - t1063 * t787 + t1065 * t750;
t736 = -pkin(1) * t839 - t1080;
t735 = -t1063 * t768 + t1065 * t755 - t1226;
t734 = -pkin(1) * t828 + pkin(5) * t794 + t1063 * t750 + t1065 * t787;
t733 = -pkin(5) * t839 - t1063 * t813 + t1065 * t738;
t732 = t1063 * t755 + t1065 * t768 + t1225;
t731 = -pkin(2) * t753 - t1101;
t730 = -pkin(1) * t888 + pkin(5) * t840 + t1063 * t738 + t1065 * t813;
t729 = -pkin(5) * t791 - t1063 * t765 + t1065 * t748;
t728 = -pkin(1) * t758 - t1076;
t727 = pkin(5) * t792 + t1063 * t748 + t1065 * t765 + t1240;
t726 = -qJ(3) * t753 - t1057 * t749 + t1059 * t756;
t725 = -pkin(5) * t758 - t1063 * t752 + t1065 * t742;
t724 = -pkin(1) * t762 + pkin(5) * t759 + t1063 * t742 + t1065 * t752;
t723 = -pkin(1) * t746 - t1081;
t722 = -pkin(5) * t746 - t1063 * t731 + t1065 * t726;
t721 = -pkin(1) * t753 + pkin(5) * t747 + t1063 * t726 + t1065 * t731;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1179, -t1178, -t1176, -qJ(1) * t1176, 0, 0, t1060 * t1030, 0, -t1060 * t1029, t1058 * qJDD(2), t1058 * t1109 + t1060 * t1092, t1058 * t1108 + t1060 * t985, -t1060 * t934, -qJ(1) * (t1058 * t1107 + t1021) + (t1058 * pkin(1) - t1060 * pkin(5)) * t934, t1058 * t1042 + t1149, t1058 * t1102 + t1060 * t975, t1060 * t983, t1058 * t1044 - t1149, t1060 * t986, 0, -t1058 * t1110 + t1060 * t872, -t1058 * t1111 + t1060 * t873, -t1058 * t1112 + t1060 * t844, t1060 * t775 - t1058 * t782 - qJ(1) * (t1058 * t842 - t1060 * t875), t1168, t1058 * t829 + t1060 * t799, t1060 * t837 + t1218, t1200, -t1241, t1199, -t1058 * t757 + t1060 * t743 - t1224, t1060 * t751 - t1058 * t760 - qJ(1) * (t1058 * t812 - t1233), t1060 * t737 - t1058 * t741 - qJ(1) * (t1058 * t794 - t1060 * t828), t1060 * t725 - t1058 * t728 - qJ(1) * (t1058 * t759 - t1060 * t762), t1168, t1060 * t807 + t1218, t1058 * t804 + t1060 * t789, t1199, t1241, t1200, -t1058 * t745 + t1060 * t735 - t1224, t1060 * t733 - t1058 * t736 - qJ(1) * (t1058 * t840 - t1060 * t888), t1060 * t729 - t1058 * t739 - qJ(1) * (t1058 * t792 + t1233), t1060 * t722 - t1058 * t723 - qJ(1) * (t1058 * t747 - t1060 * t753); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1178, -t1179, t1105, qJ(1) * t1105, 0, 0, t1058 * t1030, 0, -t1058 * t1029, -t1060 * qJDD(2), t1058 * t1092 - t1060 * t1109, t1058 * t985 - t1060 * t1108, -t1058 * t934, qJ(1) * (t1060 * t1107 - t1130) + (-t1060 * pkin(1) - t1058 * pkin(5)) * t934, -t1060 * t1042 + t1151, t1058 * t975 + t1060 * t1103, t1058 * t983, -t1060 * t1044 - t1151, t1058 * t986, 0, t1058 * t872 + t1060 * t1110, t1058 * t873 + t1060 * t1111, t1058 * t844 + t1060 * t1112, t1058 * t775 + t1060 * t782 + qJ(1) * (t1058 * t875 + t1060 * t842), t1172, t1058 * t799 - t1060 * t829, t1058 * t837 - t1216, t1202, -t1242, t1201, t1058 * t743 + t1060 * t757 + t1223, t1058 * t751 + t1060 * t760 + qJ(1) * (t1060 * t812 + t1235), t1058 * t737 + t1060 * t741 + qJ(1) * (t1058 * t828 + t1060 * t794), t1058 * t725 + t1060 * t728 + qJ(1) * (t1058 * t762 + t1060 * t759), t1172, t1058 * t807 - t1216, t1058 * t789 - t1060 * t804, t1201, t1242, t1202, t1058 * t735 + t1060 * t745 + t1223, t1058 * t733 + t1060 * t736 + qJ(1) * (t1058 * t888 + t1060 * t840), t1058 * t729 + t1060 * t739 + qJ(1) * (t1060 * t792 - t1235), t1058 * t722 + t1060 * t723 + qJ(1) * (t1058 * t753 + t1060 * t747); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1031, t1032, 0, 0, 0, 0, t1029, 0, t1030, 0, -t985, t1092, t1107, t917, t990, t973, t978, -t990, -t982, 0, t870, t871, t843, t766, t1094, t798, t834, t1183, -t833, t1182, t740, t744, t734, t724, t1094, t806, t788, t1182, t833, t1183, t732, t730, t727, t721; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1157, -t1031, 0, 0, 0, t1030, 0, -t1029, 0, t1092, t985, -t934, -pkin(5) * t934, t991, t975, t983, -t991, t986, 0, t872, t873, t844, t775, t1095, t799, t837, t1180, -t836, t1184, t743, t751, t737, t725, t1095, t807, t789, t1184, t836, t1180, t735, t733, t729, t722; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1157, 0, -t1032, 0, 0, 0, 0, 0, 0, -qJDD(2), t970, t971, 0, -pkin(1) * t934, -t1042, t1103, 0, -t1044, 0, 0, t891, t890, t814, t782, -t866, -t829, -t1196, -t1164, -t848, -t1167, t757, t760, t741, t728, -t866, -t1196, -t804, -t1167, t848, -t1164, t745, t736, t739, t723; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1031, t1032, 0, 0, 0, 0, t1029, 0, t1030, 0, -t985, t1092, t1107, t917, t990, t973, t978, -t990, -t982, 0, t870, t871, t843, t766, t1094, t798, t834, t1183, -t833, t1182, t740, t744, t734, t724, t1094, t806, t788, t1182, t833, t1183, t732, t730, t727, t721; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t1163, 0, 0, -t1031, -t1104, 0, t1115, t1025, t1018, -t1115, t1019, 0, -t1057 * t1086, -t1059 * t1086, -t875, -qJ(3) * t875, t869, t831, t1195, t1165, -t855, t1166, t767, t771, t750, t742, t869, t1195, t805, t1166, t855, t1165, t755, t738, t748, t726; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1163, 0, qJDD(2), 0, t1031, 0, t995, 0, t1033, -t1027, -t1043, -t1033, -t1045, 0, t929, t930, 0, -pkin(2) * t875, -t1133, -t1177, -t1014, t1133, t1013, -qJDD(4), t774, t779, t787, t752, -t1133, -t927, t1177, -qJDD(4), -t1013, t1133, t768, t813, t765, t731; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t1104, -t995, 0, 0, t1042, t1102, 0, t1044, 0, 0, t1169, t1170, t1085, t1098, t866, t829, t1196, t1164, t848, t1167, t1083, t1077, t1078, t1076, t866, t1196, t804, t1167, -t848, t1164, t1084, t1080, t1079, t1081; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1043, t1045, t1033, 0, t1046, 0, 0, -t1086, t929, 0, t923, t899, t1193, t1089, t911, t1096, t863, t874, t777, -pkin(6) * t783, t923, t1193, t883, t1096, -t911, t1089, t781, t764, t776, t756; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1043, -t1124, t1045, -t1033, 0, t1086, 0, t930, 0, t922, t897, t1192, t1097, t905, t1087, t823, t838, t770, t780, t922, t1192, t882, t1087, -t905, t1097, t778, t761, t769, t749; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1033, t1027, t1043, t1033, t1045, 0, -t929, -t930, 0, 0, t1133, t1177, t1014, -t1133, -t1013, qJDD(4), t1090, t1100, t1160, t1161, t1133, t927, -t1177, qJDD(4), t1013, -t1133, t1072, t1099, t1050 + t1082, t1101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t964, -t961, t1174, t1007, t997, -t1007, 0, -t1075, t846, 0, t964, t1174, t961, -t1007, -t997, t1007, -qJ(5) * t961, t786, t790, -qJ(5) * t808; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1008, t963, -t998, -t962, t1173, -t1008, t1075, 0, t847, 0, t1008, -t998, t1194, -t1008, -t1173, -t962, t795, t785, -pkin(4) * t1194, -pkin(4) * t808; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1133, t1177, t1014, -t1133, -t1013, qJDD(4), -t846, -t847, 0, 0, t1133, t927, -t1177, qJDD(4), t1013, -t1133, t1074, t1123, t1050 + t1088, t1156; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t964, t1174, t961, -t1007, -t997, t1007, 0, t803, -t808, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1133, t927, -t1177, qJDD(4), t1013, -t1133, -t803, 0, t801, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1008, t998, -t1194, t1008, t1173, t962, t808, -t801, 0, 0;];
m_new_reg = t1;
