% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPPR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:26
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPPR3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR3_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR3_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR3_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPPR3_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:26:44
% EndTime: 2019-12-31 19:26:50
% DurationCPUTime: 6.75s
% Computational Cost: add. (20071->380), mult. (27279->461), div. (0->0), fcn. (15356->8), ass. (0->250)
t689 = (qJD(1) + qJD(2));
t687 = t689 ^ 2;
t688 = qJDD(1) + qJDD(2);
t693 = sin(pkin(8));
t694 = cos(pkin(8));
t652 = t693 * t687 - t694 * t688;
t692 = g(3) - qJDD(3);
t622 = qJ(3) * t652 - t693 * t692;
t696 = sin(qJ(2));
t699 = cos(qJ(2));
t649 = t694 * t687 + t693 * t688;
t731 = t696 * t649 + t699 * t652;
t736 = qJ(3) * t649 - t694 * t692;
t534 = pkin(6) * t731 + t699 * t622 + t696 * t736;
t588 = t699 * t649 - t696 * t652;
t697 = sin(qJ(1));
t700 = cos(qJ(1));
t546 = t700 * t588 - t697 * t731;
t793 = pkin(6) * t588 - t696 * t622 + t699 * t736;
t813 = pkin(5) * t546 - t697 * t534 + t700 * t793;
t789 = t697 * t588 + t700 * t731;
t798 = pkin(5) * t789 + t700 * t534 + t697 * t793;
t672 = t697 * g(1) - t700 * g(2);
t661 = qJDD(1) * pkin(1) + t672;
t673 = t700 * g(1) + t697 * g(2);
t702 = qJD(1) ^ 2;
t662 = -t702 * pkin(1) - t673;
t603 = -t699 * t661 + t696 * t662;
t598 = t688 * pkin(2) - t603;
t604 = t696 * t661 + t699 * t662;
t599 = -t687 * pkin(2) + t604;
t556 = -t694 * t598 + t693 * t599;
t557 = t693 * t598 + t694 * t599;
t734 = t693 * t556 + t694 * t557;
t502 = t694 * t556 - t693 * t557;
t748 = t699 * t502;
t478 = -t696 * t734 + t748;
t754 = t696 * t502;
t803 = t699 * t734 + t754;
t820 = t697 * t478 + t700 * t803;
t819 = t700 * t478 - t697 * t803;
t818 = pkin(1) * t588;
t817 = pkin(1) * t731;
t709 = (2 * qJD(4) * t689) + t557;
t766 = t688 * qJ(4);
t526 = -t687 * pkin(3) + t709 + t766;
t769 = t688 * pkin(3);
t715 = qJDD(4) + t556 - t769;
t540 = -t687 * qJ(4) + t715;
t493 = t693 * t526 - t694 * t540;
t735 = t694 * t526 + t693 * t540;
t470 = t699 * t493 + t696 * t735;
t791 = -t696 * t493 + t699 * t735;
t812 = -t470 * t697 + t700 * t791;
t811 = t700 * t470 + t697 * t791;
t654 = t699 * t687 + t696 * t688;
t630 = pkin(6) * t654 - t699 * g(3);
t657 = t696 * t687 - t699 * t688;
t721 = t700 * t654 - t697 * t657;
t792 = pkin(6) * t657 - t696 * g(3);
t810 = pkin(5) * t721 + t700 * t630 - t697 * t792;
t788 = t697 * t654 + t700 * t657;
t809 = pkin(5) * t788 + t697 * t630 + t700 * t792;
t733 = t696 * t603 + t699 * t604;
t562 = t699 * t603 - t696 * t604;
t745 = t700 * t562;
t805 = -t697 * t733 + t745;
t751 = t697 * t562;
t804 = t700 * t733 + t751;
t797 = pkin(2) * t649;
t796 = pkin(2) * t652;
t525 = -t688 * pkin(7) + t540;
t695 = sin(qJ(5));
t698 = cos(qJ(5));
t517 = -t698 * t525 - t695 * t692;
t518 = t695 * t525 - t698 * t692;
t487 = -t698 * t517 + t695 * t518;
t775 = -pkin(3) - pkin(7);
t774 = pkin(1) * t692;
t773 = pkin(4) * t487;
t521 = -t687 * pkin(7) + t526;
t772 = pkin(4) * t521;
t690 = t695 ^ 2;
t691 = t698 ^ 2;
t743 = t690 + t691;
t653 = t743 * t688;
t771 = pkin(4) * t653;
t770 = pkin(7) * t487;
t765 = t690 * t687;
t764 = t691 * t687;
t763 = t693 * t653;
t761 = t694 * t653;
t758 = t695 * t521;
t671 = t695 * t687 * t698;
t663 = qJDD(5) + t671;
t757 = t695 * t663;
t664 = qJDD(5) - t671;
t756 = t695 * t664;
t755 = t695 * t688;
t519 = t698 * t521;
t750 = t698 * t663;
t749 = t698 * t664;
t676 = t698 * t688;
t744 = -pkin(3) * t540 + qJ(4) * t526;
t742 = qJD(5) * t689;
t741 = pkin(2) * t493 + t744;
t740 = t695 * t742;
t739 = t698 * t742;
t701 = qJD(5) ^ 2;
t670 = -t701 - t764;
t612 = t698 * t670 - t757;
t738 = -pkin(7) * t612 + t519;
t730 = -t697 * t672 - t700 * t673;
t729 = t693 * t671;
t728 = t694 * t671;
t727 = -pkin(3) * t487 + qJ(4) * t521 - t770;
t666 = t700 * qJDD(1) - t697 * t702;
t726 = -pkin(5) * t666 - t697 * g(3);
t725 = -t556 - t796;
t644 = 0.2e1 * t739 + t755;
t724 = pkin(4) * t644 + t519;
t647 = t676 - 0.2e1 * t740;
t723 = pkin(4) * t647 - t758;
t668 = -t701 - t765;
t610 = t695 * t668 + t749;
t722 = -pkin(7) * t610 + t758;
t488 = t695 * t517 + t698 * t518;
t720 = t700 * t672 - t697 * t673;
t481 = -t694 * t487 + t693 * t521;
t719 = pkin(2) * t481 + t727;
t718 = -pkin(3) * t612 + qJ(4) * t647 + t738;
t717 = -pkin(4) * t610 + t517;
t716 = pkin(7) * t653 - t487;
t714 = -t557 - t797;
t571 = -t694 * t612 + t693 * t647;
t713 = pkin(2) * t571 + t718;
t712 = -pkin(3) * t610 + qJ(4) * t644 + t722;
t711 = -t769 + t715;
t710 = -pkin(4) * t612 + t518;
t658 = t743 * t687;
t708 = pkin(3) * t653 - qJ(4) * t658 + t716;
t570 = -t694 * t610 + t693 * t644;
t707 = pkin(2) * t570 + t712;
t706 = t711 + t796;
t705 = 0.2e1 * t766 + t709;
t596 = -t693 * t658 + t761;
t704 = pkin(2) * t596 + t708;
t703 = t705 + t797;
t669 = t701 - t764;
t667 = -t701 + t765;
t665 = t697 * qJDD(1) + t700 * t702;
t659 = (-t690 + t691) * t687;
t646 = t676 - t740;
t645 = -t739 - t755;
t641 = -pkin(5) * t665 + t700 * g(3);
t636 = t743 * t742;
t620 = t694 * qJDD(5) - t693 * t636;
t619 = t693 * qJDD(5) + t694 * t636;
t618 = t695 * t646 + t691 * t742;
t617 = t698 * t645 + t690 * t742;
t616 = -t695 * t670 - t750;
t615 = -t695 * t669 + t749;
t614 = t698 * t668 - t756;
t613 = t698 * t667 - t757;
t611 = t698 * t669 + t756;
t609 = t695 * t667 + t750;
t606 = (t646 - t740) * t698;
t605 = (-t645 + t739) * t695;
t597 = -t694 * t658 - t763;
t586 = -t698 * t644 - t695 * t647;
t585 = -t695 * t644 + t698 * t647;
t583 = t693 * t611 + t676 * t694;
t582 = t693 * t609 - t694 * t755;
t581 = -t694 * t611 + t676 * t693;
t580 = -t694 * t609 - t693 * t755;
t579 = t693 * t617 - t728;
t578 = t693 * t618 + t728;
t577 = -t694 * t617 - t729;
t576 = -t694 * t618 + t729;
t575 = -pkin(1) * t657 - t603;
t574 = -pkin(1) * t654 - t604;
t573 = t693 * t612 + t694 * t647;
t572 = t693 * t610 + t694 * t644;
t567 = -t696 * t619 + t699 * t620;
t566 = t699 * t619 + t696 * t620;
t565 = t693 * t585 + t694 * t659;
t564 = -t694 * t585 + t693 * t659;
t559 = pkin(1) * t562;
t558 = pkin(1) * g(3) + pkin(6) * t733;
t555 = -t696 * t596 + t699 * t597;
t554 = t699 * t596 + t696 * t597;
t544 = -t696 * t581 + t699 * t583;
t543 = -t696 * t580 + t699 * t582;
t542 = t699 * t581 + t696 * t583;
t541 = t699 * t580 + t696 * t582;
t530 = -t696 * t577 + t699 * t579;
t529 = -t696 * t576 + t699 * t578;
t528 = t699 * t577 + t696 * t579;
t527 = t699 * t576 + t696 * t578;
t516 = -t696 * t571 + t699 * t573;
t515 = -t696 * t570 + t699 * t572;
t514 = t699 * t571 + t696 * t573;
t513 = t699 * t570 + t696 * t572;
t511 = -t696 * t564 + t699 * t565;
t510 = t699 * t564 + t696 * t565;
t509 = t725 - t817;
t508 = t714 - t818;
t507 = t703 + t818;
t506 = t706 + t817;
t505 = -qJ(4) * t616 - t710;
t504 = -qJ(4) * t614 - t717;
t499 = pkin(2) * t502;
t498 = pkin(2) * t692 + qJ(3) * t734;
t497 = t614 * t775 + t724;
t496 = t616 * t775 + t723;
t490 = -qJ(3) * t493 + (-pkin(3) * t693 + qJ(4) * t694) * t692;
t489 = qJ(3) * t735 + (pkin(3) * t694 + qJ(4) * t693 + pkin(2)) * t692;
t485 = pkin(4) * t658 + t488;
t484 = -pkin(4) * t761 - qJ(3) * t596 + t693 * t485;
t483 = -pkin(4) * t763 + qJ(3) * t597 - t694 * t485;
t482 = t693 * t487 + t694 * t521;
t475 = pkin(1) * t514 + t713;
t474 = pkin(1) * t513 + t707;
t473 = pkin(1) * t554 + t704;
t468 = -qJ(3) * t571 - t693 * t496 + t694 * t505;
t467 = -qJ(3) * t570 - t693 * t497 + t694 * t504;
t466 = -pkin(2) * t616 + qJ(3) * t573 + t694 * t496 + t693 * t505;
t465 = -pkin(2) * t614 + qJ(3) * t572 + t694 * t497 + t693 * t504;
t464 = -qJ(4) * t488 + t773;
t463 = -pkin(1) * t478 - t499;
t462 = t488 * t775 + t772;
t461 = -t696 * t481 + t699 * t482;
t460 = t699 * t481 + t696 * t482;
t459 = -pkin(6) * t554 - t696 * t483 + t699 * t484;
t458 = pkin(6) * t555 + t699 * t483 + t696 * t484;
t457 = pkin(6) * t478 + qJ(3) * t748 - t696 * t498;
t456 = pkin(6) * t803 + qJ(3) * t754 + t699 * t498 + t774;
t455 = pkin(1) * t470 + t741;
t454 = -pkin(6) * t470 - t696 * t489 + t699 * t490;
t453 = pkin(6) * t791 + t699 * t489 + t696 * t490 + t774;
t452 = -pkin(6) * t514 - t696 * t466 + t699 * t468;
t451 = -pkin(6) * t513 - t696 * t465 + t699 * t467;
t450 = -pkin(1) * t616 + pkin(6) * t516 + t699 * t466 + t696 * t468;
t449 = -pkin(1) * t614 + pkin(6) * t515 + t699 * t465 + t696 * t467;
t448 = -qJ(3) * t481 - t693 * t462 + t694 * t464;
t447 = pkin(1) * t460 + t719;
t446 = -pkin(2) * t488 + qJ(3) * t482 + t694 * t462 + t693 * t464;
t445 = -pkin(6) * t460 - t696 * t446 + t699 * t448;
t444 = -pkin(1) * t488 + pkin(6) * t461 + t699 * t446 + t696 * t448;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t666, 0, -t665, 0, t726, -t641, -t720, -pkin(5) * t720, 0, 0, -t788, 0, -t721, 0, t809, t810, t805, pkin(5) * t805 + pkin(6) * t745 - t697 * t558, 0, 0, -t789, 0, -t546, 0, t798, t813, t819, pkin(5) * t819 - t697 * t456 + t700 * t457, 0, t789, t546, 0, 0, 0, -t811, -t798, -t813, -pkin(5) * t811 - t697 * t453 + t700 * t454, -t697 * t527 + t700 * t529, -t697 * t510 + t700 * t511, -t697 * t542 + t700 * t544, -t697 * t528 + t700 * t530, -t697 * t541 + t700 * t543, -t697 * t566 + t700 * t567, t700 * t451 - t697 * t449 - pkin(5) * (t700 * t513 + t697 * t515), t700 * t452 - t697 * t450 - pkin(5) * (t700 * t514 + t697 * t516), t700 * t459 - t697 * t458 - pkin(5) * (t700 * t554 + t697 * t555), t700 * t445 - t697 * t444 - pkin(5) * (t700 * t460 + t697 * t461); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t665, 0, t666, 0, t641, t726, t730, pkin(5) * t730, 0, 0, t721, 0, -t788, 0, -t810, t809, t804, pkin(5) * t804 + pkin(6) * t751 + t700 * t558, 0, 0, t546, 0, -t789, 0, -t813, t798, t820, pkin(5) * t820 + t700 * t456 + t697 * t457, 0, -t546, t789, 0, 0, 0, t812, t813, -t798, pkin(5) * t812 + t700 * t453 + t697 * t454, t527 * t700 + t529 * t697, t510 * t700 + t511 * t697, t542 * t700 + t544 * t697, t528 * t700 + t530 * t697, t541 * t700 + t543 * t697, t566 * t700 + t567 * t697, t697 * t451 + t700 * t449 + pkin(5) * (-t513 * t697 + t515 * t700), t697 * t452 + t700 * t450 + pkin(5) * (-t514 * t697 + t516 * t700), t697 * t459 + t700 * t458 + pkin(5) * (-t554 * t697 + t555 * t700), t697 * t445 + t700 * t444 + pkin(5) * (-t697 * t460 + t700 * t461); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t672, t673, 0, 0, 0, 0, 0, 0, 0, t688, t575, t574, 0, -t559, 0, 0, 0, 0, 0, t688, t509, t508, 0, t463, t688, 0, 0, 0, 0, 0, 0, t506, t507, t455, t606, t586, t615, t605, t613, 0, t474, t475, t473, t447; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t702, 0, 0, -g(3), -t672, 0, 0, 0, -t657, 0, -t654, 0, t792, t630, t562, pkin(6) * t562, 0, 0, -t731, 0, -t588, 0, t534, t793, t478, t457, 0, t731, t588, 0, 0, 0, -t470, -t534, -t793, t454, t529, t511, t544, t530, t543, t567, t451, t452, t459, t445; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t702, 0, qJDD(1), 0, g(3), 0, -t673, 0, 0, 0, t654, 0, -t657, 0, -t630, t792, t733, t558, 0, 0, t588, 0, -t731, 0, -t793, t534, t803, t456, 0, -t588, t731, 0, 0, 0, t791, t793, -t534, t453, t527, t510, t542, t528, t541, t566, t449, t450, t458, t444; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t672, t673, 0, 0, 0, 0, 0, 0, 0, t688, t575, t574, 0, -t559, 0, 0, 0, 0, 0, t688, t509, t508, 0, t463, t688, 0, 0, 0, 0, 0, 0, t506, t507, t455, t606, t586, t615, t605, t613, 0, t474, t475, t473, t447; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t688, 0, -t687, 0, 0, -g(3), t603, 0, 0, 0, -t652, 0, -t649, 0, t622, t736, t502, qJ(3) * t502, 0, t652, t649, 0, 0, 0, -t493, -t622, -t736, t490, t578, t565, t583, t579, t582, t620, t467, t468, t484, t448; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t687, 0, t688, 0, g(3), 0, t604, 0, 0, 0, t649, 0, -t652, 0, -t736, t622, t734, t498, 0, -t649, t652, 0, 0, 0, t735, t736, -t622, t489, t576, t564, t581, t577, t580, t619, t465, t466, t483, t446; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t688, -t603, -t604, 0, 0, 0, 0, 0, 0, 0, t688, t725, t714, 0, -t499, t688, 0, 0, 0, 0, 0, 0, t706, t703, t741, t606, t586, t615, t605, t613, 0, t707, t713, t704, t719; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t688, 0, -t687, 0, 0, -t692, t556, 0, 0, -t688, t687, 0, 0, 0, t540, 0, t692, qJ(4) * t692, t671, t659, t676, -t671, -t755, qJDD(5), t504, t505, -t771, t464; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t687, 0, t688, 0, t692, 0, t557, 0, 0, -t687, -t688, 0, 0, 0, t526, -t692, 0, pkin(3) * t692, -t618, -t585, -t611, -t617, -t609, t636, t497, t496, -t485, t462; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t688, -t556, -t557, 0, 0, t688, 0, 0, 0, 0, 0, 0, t711, t705, t744, t606, t586, t615, t605, t613, 0, t712, t718, t708, t727; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t688, 0, 0, 0, 0, 0, 0, t540, t526, 0, t606, t586, t615, t605, t613, 0, t722, t738, t716, -t770; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t688, -t687, 0, 0, 0, -t540, 0, -t692, 0, -t671, -t659, -t676, t671, t755, -qJDD(5), t717, t710, t771, -t773; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t687, t688, 0, 0, 0, -t526, t692, 0, 0, t618, t585, t611, t617, t609, -t636, pkin(7) * t614 - t724, pkin(7) * t616 - t723, t485, pkin(7) * t488 - t772; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t646, -t644, t664, t740, t667, -t740, 0, t521, t517, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t739, t647, t669, t645, t663, -t739, -t521, 0, t518, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t671, t659, t676, -t671, -t755, qJDD(5), -t517, -t518, 0, 0;];
m_new_reg = t1;
