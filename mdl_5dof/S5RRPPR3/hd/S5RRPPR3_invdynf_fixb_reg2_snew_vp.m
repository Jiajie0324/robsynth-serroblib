% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPPR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:26
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPPR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR3_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR3_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPPR3_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:26:50
% EndTime: 2019-12-31 19:26:52
% DurationCPUTime: 1.53s
% Computational Cost: add. (3501->139), mult. (4798->165), div. (0->0), fcn. (2800->8), ass. (0->90)
t908 = (qJD(1) + qJD(2));
t906 = t908 ^ 2;
t907 = qJDD(1) + qJDD(2);
t912 = sin(pkin(8));
t913 = cos(pkin(8));
t880 = t913 * t906 + t912 * t907;
t883 = t912 * t906 - t913 * t907;
t915 = sin(qJ(2));
t918 = cos(qJ(2));
t856 = t918 * t880 - t915 * t883;
t916 = sin(qJ(1));
t919 = cos(qJ(1));
t923 = t915 * t880 + t918 * t883;
t940 = t919 * t856 - t916 * t923;
t939 = t916 * t856 + t919 * t923;
t888 = t915 * t906 - t918 * t907;
t922 = -t918 * t906 - t915 * t907;
t937 = t916 * t888 + t919 * t922;
t936 = t919 * t888 - t916 * t922;
t914 = sin(qJ(5));
t929 = t914 * t907;
t917 = cos(qJ(5));
t928 = t917 * t907;
t899 = t916 * g(1) - t919 * g(2);
t891 = qJDD(1) * pkin(1) + t899;
t900 = -t919 * g(1) - t916 * g(2);
t921 = qJD(1) ^ 2;
t892 = -t921 * pkin(1) + t900;
t869 = t915 * t891 + t918 * t892;
t909 = t914 ^ 2;
t910 = t917 ^ 2;
t927 = t909 + t910;
t926 = qJD(5) * t908;
t925 = t914 * t906 * t917;
t868 = t918 * t891 - t915 * t892;
t866 = t907 * pkin(2) + t868;
t867 = -t906 * pkin(2) + t869;
t847 = t913 * t866 - t912 * t867;
t848 = t912 * t866 + t913 * t867;
t844 = -t907 * pkin(3) - t906 * qJ(4) + qJDD(4) - t847;
t843 = -t906 * pkin(3) + t907 * qJ(4) + (2 * qJD(4) * t908) + t848;
t920 = qJD(5) ^ 2;
t911 = -g(3) + qJDD(3);
t898 = -t910 * t906 - t920;
t897 = -t909 * t906 - t920;
t896 = -t916 * qJDD(1) - t919 * t921;
t895 = t919 * qJDD(1) - t916 * t921;
t894 = -qJDD(5) - t925;
t893 = qJDD(5) - t925;
t890 = t927 * t906;
t885 = t927 * t907;
t877 = -0.2e1 * t914 * t926 + t928;
t876 = 0.2e1 * t917 * t926 + t929;
t873 = t917 * t894 - t914 * t898;
t872 = -t914 * t893 + t917 * t897;
t871 = t914 * t894 + t917 * t898;
t870 = t917 * t893 + t914 * t897;
t865 = -t912 * t885 - t913 * t890;
t864 = t913 * t885 - t912 * t890;
t854 = t912 * t871 + t913 * t877;
t853 = t912 * t870 + t913 * t876;
t852 = -t913 * t871 + t912 * t877;
t851 = -t913 * t870 + t912 * t876;
t850 = -t915 * t868 + t918 * t869;
t849 = t918 * t868 + t915 * t869;
t846 = -t915 * t864 + t918 * t865;
t845 = t918 * t864 + t915 * t865;
t842 = -t907 * pkin(7) + t844;
t841 = -t906 * pkin(7) + t843;
t840 = t914 * t842 + t917 * t911;
t839 = t917 * t842 - t914 * t911;
t838 = -t915 * t852 + t918 * t854;
t837 = -t915 * t851 + t918 * t853;
t836 = t918 * t852 + t915 * t854;
t835 = t918 * t851 + t915 * t853;
t834 = -t912 * t847 + t913 * t848;
t833 = t913 * t847 + t912 * t848;
t832 = t913 * t843 + t912 * t844;
t831 = t912 * t843 - t913 * t844;
t830 = -t914 * t839 + t917 * t840;
t829 = t917 * t839 + t914 * t840;
t828 = t912 * t829 + t913 * t841;
t827 = -t913 * t829 + t912 * t841;
t826 = -t915 * t833 + t918 * t834;
t825 = t918 * t833 + t915 * t834;
t824 = -t915 * t831 + t918 * t832;
t823 = t918 * t831 + t915 * t832;
t822 = -t915 * t827 + t918 * t828;
t821 = t918 * t827 + t915 * t828;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t896, -t895, 0, -t916 * t899 + t919 * t900, 0, 0, 0, 0, 0, 0, t937, t936, 0, -t916 * t849 + t919 * t850, 0, 0, 0, 0, 0, 0, -t940, t939, 0, -t916 * t825 + t919 * t826, 0, 0, 0, 0, 0, 0, 0, t940, -t939, -t916 * t823 + t919 * t824, 0, 0, 0, 0, 0, 0, -t916 * t835 + t919 * t837, -t916 * t836 + t919 * t838, -t916 * t845 + t919 * t846, -t916 * t821 + t919 * t822; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t895, t896, 0, t919 * t899 + t916 * t900, 0, 0, 0, 0, 0, 0, -t936, t937, 0, t919 * t849 + t916 * t850, 0, 0, 0, 0, 0, 0, -t939, -t940, 0, t919 * t825 + t916 * t826, 0, 0, 0, 0, 0, 0, 0, t939, t940, t919 * t823 + t916 * t824, 0, 0, 0, 0, 0, 0, t919 * t835 + t916 * t837, t919 * t836 + t916 * t838, t919 * t845 + t916 * t846, t919 * t821 + t916 * t822; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t911, 0, 0, 0, 0, 0, 0, 0, 0, 0, t911, 0, 0, 0, 0, 0, 0, t872, t873, 0, t830; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t921, -qJDD(1), 0, t900, 0, 0, 0, 0, 0, 0, t922, t888, 0, t850, 0, 0, 0, 0, 0, 0, -t856, t923, 0, t826, 0, 0, 0, 0, 0, 0, 0, t856, -t923, t824, 0, 0, 0, 0, 0, 0, t837, t838, t846, t822; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t921, 0, t899, 0, 0, 0, 0, 0, 0, -t888, t922, 0, t849, 0, 0, 0, 0, 0, 0, -t923, -t856, 0, t825, 0, 0, 0, 0, 0, 0, 0, t923, t856, t823, 0, 0, 0, 0, 0, 0, t835, t836, t845, t821; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t911, 0, 0, 0, 0, 0, 0, 0, 0, 0, t911, 0, 0, 0, 0, 0, 0, t872, t873, 0, t830; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t906, -t907, 0, t869, 0, 0, 0, 0, 0, 0, -t880, t883, 0, t834, 0, 0, 0, 0, 0, 0, 0, t880, -t883, t832, 0, 0, 0, 0, 0, 0, t853, t854, t865, t828; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t907, -t906, 0, t868, 0, 0, 0, 0, 0, 0, -t883, -t880, 0, t833, 0, 0, 0, 0, 0, 0, 0, t883, t880, t831, 0, 0, 0, 0, 0, 0, t851, t852, t864, t827; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t911, 0, 0, 0, 0, 0, 0, 0, 0, 0, t911, 0, 0, 0, 0, 0, 0, t872, t873, 0, t830; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t906, -t907, 0, t848, 0, 0, 0, 0, 0, 0, 0, t906, t907, t843, 0, 0, 0, 0, 0, 0, t876, t877, -t890, t841; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t907, -t906, 0, t847, 0, 0, 0, 0, 0, 0, 0, -t907, t906, -t844, 0, 0, 0, 0, 0, 0, -t870, -t871, t885, -t829; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t911, 0, 0, 0, 0, 0, 0, 0, 0, 0, t911, 0, 0, 0, 0, 0, 0, t872, t873, 0, t830; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t911, 0, 0, 0, 0, 0, 0, t872, t873, 0, t830; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t906, -t907, -t843, 0, 0, 0, 0, 0, 0, -t876, -t877, t890, -t841; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t907, -t906, t844, 0, 0, 0, 0, 0, 0, t870, t871, -t885, t829; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t897, t894, -t929, t840; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t893, t898, -t928, t839; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t876, t877, -t890, t841;];
f_new_reg = t1;
