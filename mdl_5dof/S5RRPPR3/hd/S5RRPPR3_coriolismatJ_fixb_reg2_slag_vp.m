% Calculate inertial parameters regressor of coriolis matrix for
% S5RRPPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:26
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RRPPR3_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR3_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR3_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPPR3_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:26:40
% EndTime: 2019-12-31 19:26:41
% DurationCPUTime: 0.87s
% Computational Cost: add. (472->114), mult. (1073->123), div. (0->0), fcn. (821->6), ass. (0->91)
t65 = sin(qJ(5));
t61 = t65 ^ 2;
t67 = cos(qJ(5));
t62 = t67 ^ 2;
t51 = t61 - t62;
t60 = qJD(1) + qJD(2);
t122 = t60 * t51;
t121 = t61 + t62;
t68 = cos(qJ(2));
t112 = t68 * pkin(1);
t57 = pkin(2) + t112;
t63 = sin(pkin(8));
t13 = -qJ(4) + (t112 / 0.2e1 - pkin(2) / 0.2e1 - t57 / 0.2e1) * t63;
t113 = t63 * pkin(2);
t55 = qJ(4) + t113;
t91 = t55 * qJD(2);
t120 = -t13 * qJD(1) + t91;
t64 = cos(pkin(8));
t66 = sin(qJ(2));
t107 = t64 * t66;
t108 = t63 * t68;
t38 = (t107 + t108) * pkin(1);
t109 = t63 * t57;
t82 = t113 / 0.2e1 + qJ(4) + t109 / 0.2e1;
t83 = pkin(1) * t107;
t69 = t83 / 0.2e1 + t82;
t5 = (-t61 / 0.2e1 - t62 / 0.2e1) * t38 + t69;
t119 = t5 * qJD(1) + t91;
t94 = t38 * qJD(2);
t95 = t38 * qJD(1);
t118 = t95 + t94;
t72 = t83 + t109;
t28 = qJ(4) + t72;
t117 = t28 + t38 + t55;
t116 = t38 / 0.2e1;
t53 = t63 * t66 * pkin(1);
t39 = t64 * t112 - t53;
t111 = t28 * t39;
t110 = t39 * t55;
t58 = qJD(4) * t65;
t89 = t65 * qJD(2);
t106 = t39 * t89 + t58;
t59 = qJD(4) * t67;
t86 = t67 * qJD(2);
t105 = t39 * t86 + t59;
t104 = pkin(1) * qJD(1);
t103 = pkin(1) * qJD(2);
t11 = t121 * t38;
t76 = t64 * t57 - t53;
t74 = -pkin(3) - t76;
t27 = -pkin(7) + t74;
t1 = t27 * t11 + t111;
t102 = t1 * qJD(1);
t2 = t74 * t38 + t111;
t101 = t2 * qJD(1);
t3 = -t76 * t38 + t72 * t39;
t100 = t3 * qJD(1);
t98 = t11 * qJD(1);
t96 = t28 * qJD(1);
t93 = t39 * qJD(1);
t92 = t39 * qJD(2);
t90 = t65 * qJD(1);
t88 = t65 * qJD(5);
t87 = t67 * qJD(1);
t85 = t67 * qJD(5);
t84 = t92 + qJD(4);
t81 = t28 * t90;
t80 = t28 * t87;
t79 = t39 * t90;
t78 = t39 * t87;
t77 = -t64 * pkin(2) - pkin(3);
t75 = pkin(1) * t60;
t44 = t60 * t67;
t73 = t116 - t55 / 0.2e1 - t28 / 0.2e1;
t6 = t73 * t65;
t71 = -t6 * qJD(1) + t55 * t89;
t7 = t73 * t67;
t70 = t7 * qJD(1) - t55 * t86;
t54 = -pkin(7) + t77;
t52 = t65 * t85;
t48 = t55 * qJD(4);
t45 = t51 * qJD(5);
t43 = t60 * t65;
t37 = t65 * t44;
t16 = t28 * qJD(4);
t12 = (t107 + t108 / 0.2e1) * pkin(1) + t82;
t10 = t11 * qJD(2);
t9 = t117 * t67 / 0.2e1;
t8 = -t117 * t65 / 0.2e1;
t4 = t121 * t116 + t69;
t14 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t66 * t103, -t68 * t103, 0, 0, 0, 0, 0, 0, 0, 0, -t94, -t92, 0, t3 * qJD(2), 0, 0, 0, 0, 0, 0, 0, t94, t84, t2 * qJD(2) + t16, -t52, t45, 0, t52, 0, 0, t28 * t85 + t106, -t28 * t88 + t105, -t10, t1 * qJD(2) + t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t66 * t75, -t68 * t75, 0, 0, 0, 0, 0, 0, 0, 0, -t118, -t93 - t92, 0, t100 + (-t38 * t64 + t39 * t63) * qJD(2) * pkin(2), 0, 0, 0, 0, 0, 0, 0, t118, t93 + t84, t101 + (t38 * t77 + t110) * qJD(2) + t12 * qJD(4), -t52, t45, 0, t52, 0, 0, t9 * qJD(5) + t106 + t79, t8 * qJD(5) + t105 + t78, -t10 - t98, t102 + (t11 * t54 + t110) * qJD(2) + t4 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, t12 * qJD(2) + t96, 0, 0, 0, 0, 0, 0, t43, t44, 0, t4 * qJD(2) + t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t37, t122, -t88, t37, -t85, 0, t9 * qJD(2) - t27 * t88 + t80, t8 * qJD(2) - t27 * t85 - t81, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66 * t104, t68 * t104, 0, 0, 0, 0, 0, 0, 0, 0, t95, t93, 0, -t100, 0, 0, 0, 0, 0, 0, 0, -t95, -t93 + qJD(4), -t13 * qJD(4) - t101, -t52, t45, 0, t52, 0, 0, -t7 * qJD(5) + t58 - t79, t6 * qJD(5) + t59 - t78, t98, t5 * qJD(4) - t102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(4), t48, -t52, t45, 0, t52, 0, 0, t55 * t85 + t58, -t55 * t88 + t59, 0, t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, t120, 0, 0, 0, 0, 0, 0, t43, t44, 0, t119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t37, t122, -t88, t37, -t85, 0, -t54 * t88 - t70, -t54 * t85 - t71, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t85, t88, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t60, t13 * qJD(2) - t96, 0, 0, 0, 0, 0, 0, -t43, -t44, 0, -t5 * qJD(2) - t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t60, -t120, 0, 0, 0, 0, 0, 0, -t43, -t44, 0, -t119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t88, -t85, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, -t122, 0, -t37, 0, 0, t7 * qJD(2) - t80, -t6 * qJD(2) + t81, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, -t122, 0, -t37, 0, 0, t70, t71, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t14;
