% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPRP11
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:14
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPRP11_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRP11_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRP11_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRP11_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRP11_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RRPRP11_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:14:22
% EndTime: 2019-12-31 20:14:35
% DurationCPUTime: 14.12s
% Computational Cost: add. (23170->584), mult. (48294->593), div. (0->0), fcn. (27325->6), ass. (0->379)
t1106 = sin(qJ(1));
t1109 = cos(qJ(1));
t1105 = sin(qJ(2));
t1108 = cos(qJ(2));
t1104 = sin(qJ(4));
t1107 = cos(qJ(4));
t1202 = qJD(1) * t1108;
t1055 = t1104 * qJD(2) + t1107 * t1202;
t1194 = t1105 * qJD(1);
t1088 = qJD(4) + t1194;
t1198 = t1055 * t1088;
t1094 = t1108 * qJDD(1);
t1166 = qJD(2) * t1194;
t1136 = -t1094 + t1166;
t984 = -t1055 * qJD(4) + t1107 * qJDD(2) + t1104 * t1136;
t1263 = t984 - t1198;
t1092 = qJD(2) * t1202;
t1174 = t1105 * qJDD(1);
t1063 = t1092 + t1174;
t1048 = qJDD(4) + t1063;
t1057 = t1107 * qJD(2) - t1104 * t1202;
t1197 = t1057 * t1055;
t1259 = t1048 + t1197;
t1212 = t1104 * t1259;
t1047 = t1057 ^ 2;
t1084 = t1088 ^ 2;
t986 = t1084 + t1047;
t893 = t1107 * t986 + t1212;
t850 = t1105 * t893 - t1108 * t1263;
t1206 = t1107 * t1259;
t904 = t1104 * t986 - t1206;
t1362 = pkin(5) * (-t1106 * t904 + t1109 * t850);
t1361 = pkin(5) * (t1106 * t850 + t1109 * t904);
t852 = t1105 * t1263 + t1108 * t893;
t1360 = pkin(1) * t852;
t1359 = pkin(6) * t852;
t1358 = pkin(1) * t904 + pkin(6) * t850;
t1239 = t1055 ^ 2;
t1027 = t1239 - t1084;
t909 = t1104 * t1027 + t1206;
t1034 = t1088 * t1057;
t1151 = -t1104 * qJDD(2) + t1107 * t1136;
t983 = t1057 * qJD(4) - t1151;
t939 = -t1034 + t983;
t862 = t1105 * t909 - t1108 * t939;
t913 = t1107 * t1027 - t1212;
t1357 = t1106 * t862 - t1109 * t913;
t1355 = t1106 * t913 + t1109 * t862;
t1261 = t1047 - t1239;
t1266 = t1034 + t983;
t870 = -t1104 * t1266 + t1107 * t1263;
t844 = t1105 * t870 + t1108 * t1261;
t1213 = t1104 * t1263;
t872 = t1107 * t1266 + t1213;
t1353 = t1106 * t844 + t1109 * t872;
t1352 = -t1106 * t872 + t1109 * t844;
t1350 = pkin(3) * t893;
t1349 = pkin(7) * t893;
t1348 = pkin(7) * t904;
t1347 = qJ(3) * t904;
t1237 = pkin(2) + pkin(7);
t1340 = t1237 * t904;
t857 = t1105 * t939 + t1108 * t909;
t1339 = -qJ(3) * t1263 - t1237 * t893;
t1260 = t1048 - t1197;
t1205 = t1107 * t1260;
t1257 = -t1239 - t1084;
t1269 = t1104 * t1257 + t1205;
t1300 = t1105 * t1266 - t1108 * t1269;
t1338 = pkin(1) * t1300;
t1101 = t1105 ^ 2;
t1110 = qJD(1) ^ 2;
t1095 = t1101 * t1110;
t1240 = qJD(2) ^ 2;
t1081 = -t1095 - t1240;
t1179 = t1108 * t1110;
t1086 = t1105 * t1179;
t1072 = qJDD(2) - t1086;
t1180 = t1108 * t1072;
t1018 = t1105 * t1081 + t1180;
t1062 = 0.2e1 * t1092 + t1174;
t1337 = pkin(5) * (t1109 * t1018 - t1106 * t1062);
t1336 = pkin(5) * (t1106 * t1018 + t1109 * t1062);
t1335 = pkin(6) * t1300;
t963 = t1104 * t1260;
t1277 = t1107 * t1257 - t963;
t1304 = t1105 * t1269 + t1108 * t1266;
t1334 = -pkin(1) * t1277 + pkin(6) * t1304;
t843 = -t1105 * t1261 + t1108 * t870;
t1333 = pkin(5) * (t1106 * t1304 - t1109 * t1277);
t1332 = pkin(5) * (t1106 * t1277 + t1109 * t1304);
t1265 = t1198 + t984;
t1029 = t1047 - t1084;
t1287 = -t1107 * t1029 + t963;
t1303 = t1105 * t1287 + t1108 * t1265;
t1310 = t1104 * t1029 + t1205;
t1331 = t1106 * t1310 + t1109 * t1303;
t1330 = t1106 * t1303 - t1109 * t1310;
t967 = -t1239 - t1047;
t1329 = pkin(3) * t967;
t1238 = t1108 ^ 2;
t1096 = t1238 * t1110;
t1083 = -t1096 - t1240;
t1071 = t1086 + qJDD(2);
t1181 = t1108 * t1071;
t1008 = t1105 * t1083 + t1181;
t1328 = pkin(1) * t1008;
t1326 = pkin(3) * t1269;
t1191 = t1105 * t1071;
t1017 = -t1108 * t1083 + t1191;
t1064 = t1094 - 0.2e1 * t1166;
t1325 = pkin(5) * (t1109 * t1017 + t1106 * t1064);
t1324 = pkin(5) * (t1106 * t1017 - t1109 * t1064);
t1323 = pkin(6) * t1008;
t1322 = pkin(6) * t1018;
t1321 = pkin(7) * t1269;
t1320 = pkin(7) * t1277;
t1319 = qJ(3) * t967;
t1318 = qJ(3) * t1277;
t1317 = qJ(5) * t1263;
t1316 = t1105 * t967;
t1315 = t1108 * t967;
t1312 = t1237 * t1269;
t1311 = t1237 * t1277;
t1098 = t1105 * g(3);
t1077 = t1109 * g(1) + t1106 * g(2);
t1041 = -t1110 * pkin(1) + qJDD(1) * pkin(6) - t1077;
t1220 = qJ(3) * t1105;
t1229 = pkin(2) * t1108;
t1139 = -t1220 - t1229;
t1153 = t1110 * t1139 + t1041;
t1120 = -t1240 * pkin(2) + t1108 * t1153 - t1098;
t1296 = 2 * qJD(3);
t1117 = qJD(2) * t1296 + t1120;
t1309 = t1117 + (qJDD(2) + t1072) * qJ(3) - pkin(2) * t1081;
t1080 = -t1095 + t1240;
t1012 = -t1105 * t1080 + t1181;
t1172 = t1109 * qJDD(1);
t1308 = t1106 * t1012 - t1105 * t1172;
t1173 = t1106 * qJDD(1);
t1307 = t1109 * t1012 + t1105 * t1173;
t1262 = (t1055 * t1104 + t1057 * t1107) * t1088;
t1270 = t1108 * t1048 - t1105 * t1262;
t1196 = t1088 * t1104;
t1022 = t1057 * t1196;
t1195 = t1088 * t1107;
t1164 = t1055 * t1195;
t957 = -t1022 + t1164;
t1302 = t1106 * t1270 + t1109 * t957;
t1163 = t1108 * t1197;
t922 = t1055 * t1196 - t1107 * t983;
t1278 = t1105 * t922 - t1163;
t924 = t1104 * t983 + t1164;
t1301 = t1106 * t1278 - t1109 * t924;
t1299 = t1105 * t1265 - t1108 * t1287;
t1298 = -t1106 * t957 + t1109 * t1270;
t1297 = t1106 * t924 + t1109 * t1278;
t1190 = t1105 * t1072;
t1010 = -t1108 * t1081 + t1190;
t1295 = pkin(1) * t1010;
t1294 = pkin(6) * t1010;
t1293 = pkin(6) * t1017;
t1165 = t1105 * t1197;
t1276 = -t1108 * t922 - t1165;
t1082 = t1096 - t1240;
t1015 = -t1108 * t1082 + t1190;
t1275 = t1106 * t1015 + t1108 * t1172;
t1274 = t1109 * t1015 - t1106 * t1094;
t1271 = t1105 * t1048 + t1108 * t1262;
t1137 = t1063 + t1092;
t1268 = qJ(3) * t1137;
t1162 = qJ(5) * t1104 + pkin(3);
t1228 = pkin(4) * t1107;
t1256 = t983 * pkin(4) - t1317;
t1075 = pkin(3) * t1194 - qJD(2) * pkin(7);
t1199 = qJDD(2) * qJ(3);
t1254 = -t1136 * pkin(3) - pkin(7) * t1096 + t1199;
t897 = (t1296 + t1075) * qJD(2) + t1120 + t1254;
t832 = (pkin(4) * t1088 - (2 * qJD(5))) * t1057 + t897 + t1256;
t1267 = (t1162 + t1228) * t832;
t1076 = t1106 * g(1) - t1109 * g(2);
t1128 = -qJDD(1) * pkin(1) - t1076;
t1258 = -pkin(2) * t1166 + t1194 * t1296;
t1113 = t1128 - t1258 - t1268;
t1125 = t1136 * pkin(2);
t880 = t1125 + t1136 * pkin(7) - t1075 * t1194 + (-t1238 * pkin(3) - pkin(6)) * t1110 + t1113;
t1227 = t1108 * g(3);
t1129 = -qJDD(2) * pkin(2) - t1240 * qJ(3) + qJDD(3) + t1227;
t898 = -qJDD(2) * pkin(7) + (t1063 - t1092) * pkin(3) + (-pkin(7) * t1179 + t1153) * t1105 + t1129;
t836 = t1104 * t880 - t1107 * t898;
t837 = t1104 * t898 + t1107 * t880;
t1264 = t1104 * t837 - t1107 * t836;
t1006 = t1105 * t1082 + t1180;
t952 = t1105 * t1153 + t1129;
t1255 = -pkin(2) * t1071 - qJ(3) * t1083 + t952;
t926 = t1057 * t1195 + t1104 * t984;
t1124 = t1105 * t926 + t1163;
t927 = t1107 * t984 - t1022;
t1252 = t1106 * t1124 - t1109 * t927;
t1207 = t1107 * t1265;
t941 = (-qJD(4) + t1088) * t1057 + t1151;
t871 = t1104 * t941 - t1207;
t1251 = -t1237 * t871 - t1264 + t1319;
t1200 = qJD(5) * t1088;
t1073 = 0.2e1 * t1200;
t991 = t1055 * pkin(4) - t1057 * qJ(5);
t1135 = -t1084 * pkin(4) + t1048 * qJ(5) - t1055 * t991 + t837;
t825 = t1073 + t1135;
t817 = -pkin(4) * t967 + t825;
t828 = -t1048 * pkin(4) - t1084 * qJ(5) + t1057 * t991 + qJDD(5) + t836;
t820 = -qJ(5) * t967 + t828;
t1155 = t1104 * t817 - t1107 * t820;
t869 = -t1104 * t939 - t1207;
t1250 = -t1237 * t869 - t1155 + t1319;
t1215 = t1104 * t897;
t1249 = qJ(3) * t1266 + t1215 - t1312;
t1111 = -qJD(2) * t1075 + 0.2e1 * qJD(5) * t1057 - t1117 - t1254 - t1256;
t822 = -pkin(4) * t1034 + t1111 + t1317;
t1223 = pkin(4) * t1213 - t1107 * t822;
t1248 = -t1223 + t1339;
t890 = t1107 * t897;
t1247 = -t1339 + t890;
t823 = (-t1266 - t1034) * pkin(4) + t1111;
t1246 = t1107 * t823 - t1162 * t1266;
t1245 = (pkin(3) + t1228) * t1263 + t1104 * t822;
t1244 = qJ(3) * t897 - t1237 * t1264;
t1243 = t1106 * t927 + t1109 * t1124;
t1219 = qJ(5) * t1107;
t1156 = -qJ(3) + t1219;
t802 = t1104 * t825 - t1107 * t828;
t1233 = pkin(4) * t832;
t831 = t1104 * t1233;
t1242 = -t1156 * t832 - t1237 * t802 + t831;
t1217 = t1104 * t823;
t1241 = -t1156 * t1266 - t1217 - t1312;
t1236 = pkin(3) * t1264;
t1235 = pkin(3) * t871;
t1234 = pkin(3) * t897;
t1169 = t1101 + t1238;
t1066 = t1169 * qJDD(1);
t1069 = t1095 + t1096;
t1232 = pkin(5) * (t1106 * t1066 + t1109 * t1069);
t1226 = t1110 * pkin(6);
t1224 = -pkin(4) * t828 + qJ(5) * t825;
t1222 = -pkin(4) * t1265 - qJ(5) * t939;
t1203 = qJD(1) * qJD(2);
t1040 = -t1128 + t1226;
t1193 = t1105 * t1040;
t1192 = t1105 * t1062;
t1182 = t1108 * t1040;
t1002 = t1108 * t1064;
t1176 = pkin(1) * t1069 + pkin(6) * t1066;
t1020 = t1105 * t1041 + t1227;
t1021 = t1108 * t1041 - t1098;
t948 = t1105 * t1020 + t1108 * t1021;
t1152 = -t1106 * t1076 - t1109 * t1077;
t1150 = -pkin(3) * t802 - t1224;
t1149 = -pkin(3) * t869 - t1222;
t1148 = t837 + t1350;
t1147 = t1106 * t1086;
t1146 = t1109 * t1086;
t949 = t1117 + t1199;
t1144 = -pkin(2) * t952 + qJ(3) * t949;
t1068 = -t1106 * t1110 + t1172;
t1143 = -pkin(5) * t1068 - t1106 * g(3);
t1142 = pkin(3) * t1263 - t1215;
t1141 = pkin(3) * t1266 + t890;
t1140 = -t1108 * t926 + t1165;
t1138 = pkin(2) * t1105 - qJ(3) * t1108;
t811 = t1104 * t836 + t1107 * t837;
t947 = t1108 * t1020 - t1105 * t1021;
t1003 = t1108 * t1080 + t1191;
t1132 = t1109 * t1076 - t1106 * t1077;
t1130 = t836 - t1326;
t1123 = pkin(4) * t986 + qJ(5) * t1259 + t1135;
t1122 = -t1104 * t820 - t1107 * t817 + t1329;
t1121 = -t811 + t1329;
t1119 = -t1123 - t1350;
t1116 = pkin(4) * t1260 + qJ(5) * t1257 - t828;
t1115 = -t1116 - t1326;
t1112 = t1040 - t1125 + t1258;
t1070 = t1095 - t1096;
t1067 = t1109 * t1110 + t1173;
t1058 = t1138 * qJDD(1);
t1050 = t1169 * t1203;
t1036 = -pkin(5) * t1067 + t1109 * g(3);
t1026 = t1106 * qJDD(2) + t1109 * t1050;
t1025 = t1108 * t1063 - t1101 * t1203;
t1024 = -t1109 * qJDD(2) + t1106 * t1050;
t1023 = t1105 * t1136 - t1238 * t1203;
t1005 = t1137 * t1105;
t992 = pkin(5) * (t1109 * t1066 - t1106 * t1069);
t989 = t1002 - t1192;
t988 = t1108 * t1062 + t1105 * t1064;
t982 = t1109 * t1025 - t1147;
t981 = t1109 * t1023 + t1147;
t980 = t1106 * t1025 + t1146;
t979 = t1106 * t1023 - t1146;
t960 = -t1182 + t1294;
t959 = -t1193 - t1323;
t954 = t1106 * t1070 + t1109 * t989;
t953 = -t1109 * t1070 + t1106 * t989;
t951 = t1021 + t1295;
t950 = t1020 - t1328;
t935 = pkin(1) * t1064 + t1182 - t1293;
t934 = -pkin(1) * t1062 - t1193 - t1322;
t933 = t1104 * t1265;
t929 = qJ(3) * t1069 + t952;
t928 = pkin(2) * t1069 + t949;
t921 = t1112 + t1268;
t906 = pkin(1) * t1040 + pkin(6) * t948;
t901 = -t1226 + (-t1064 + t1136) * pkin(2) + t1113;
t900 = (t1062 + t1137) * qJ(3) + t1112;
t899 = t948 + t1176;
t889 = -t1255 + t1328;
t879 = -t1295 - t1309;
t877 = t1105 * t952 + t1108 * t949;
t876 = t1105 * t949 - t1108 * t952;
t875 = t1107 * t941 + t933;
t873 = -t1107 * t939 + t933;
t867 = -pkin(2) * t1192 + t1108 * t900 - t1294;
t866 = -qJ(3) * t1002 - t1105 * t901 + t1323;
t865 = -t1105 * t928 + t1108 * t929;
t856 = t1322 + t1105 * t900 + (pkin(1) + t1229) * t1062;
t855 = t1293 + t1108 * t901 + (-pkin(1) - t1220) * t1064;
t846 = t1105 * t929 + t1108 * t928 + t1176;
t841 = t1105 * t869 + t1315;
t840 = t1105 * t871 + t1315;
t839 = -t1108 * t869 + t1316;
t838 = -t1108 * t871 + t1316;
t833 = -pkin(1) * t876 - t1144;
t830 = -qJ(3) * t875 + t1235;
t829 = -pkin(6) * t876 - t1138 * t921;
t819 = t1142 - t1340;
t816 = pkin(6) * t877 + (pkin(1) - t1139) * t921;
t815 = t1141 - t1311;
t814 = -t1148 - t1347;
t813 = -t1130 - t1318;
t812 = -qJ(3) * t873 - t1149;
t809 = -t1247 - t1360;
t808 = -t1249 - t1338;
t807 = t1105 * t1264 + t1108 * t897;
t806 = t1105 * t897 - t1108 * t1264;
t805 = -t1115 - t1318;
t804 = t1073 - t1119 + t1347;
t803 = t1104 * t828 + t1107 * t825;
t801 = -t1246 - t1311;
t800 = -t1245 + t1340;
t799 = -t1237 * t875 + t1121;
t798 = -t1241 - t1338;
t797 = -t1248 + t1360;
t796 = t1105 * t802 + t1108 * t832;
t795 = t1105 * t832 - t1108 * t802;
t794 = -qJ(3) * t811 + t1236;
t793 = -t1105 * t819 + t1108 * t814 - t1359;
t792 = -t1105 * t815 + t1108 * t813 - t1335;
t791 = -pkin(1) * t838 - t1251;
t790 = -t1237 * t811 + t1234;
t789 = t1105 * t814 + t1108 * t819 - t1358;
t788 = -t1237 * t873 + t1122;
t787 = t1105 * t813 + t1108 * t815 + t1334;
t786 = -pkin(1) * t839 - t1250;
t785 = -pkin(6) * t838 - t1105 * t799 + t1108 * t830;
t784 = -t1105 * t801 + t1108 * t805 - t1335;
t783 = -pkin(1) * t875 + pkin(6) * t840 + t1105 * t830 + t1108 * t799;
t782 = -t1105 * t800 + t1108 * t804 + t1359;
t781 = t1105 * t805 + t1108 * t801 + t1334;
t780 = -pkin(1) * t806 - t1244;
t779 = t1105 * t804 + t1108 * t800 + t1358;
t778 = -pkin(6) * t839 - t1105 * t788 + t1108 * t812;
t777 = -pkin(1) * t873 + pkin(6) * t841 + t1105 * t812 + t1108 * t788;
t776 = -qJ(3) * t803 - t1150;
t775 = -t1237 * t803 + t1267;
t774 = -pkin(6) * t806 - t1105 * t790 + t1108 * t794;
t773 = -pkin(1) * t795 - t1242;
t772 = -pkin(1) * t811 + pkin(6) * t807 + t1105 * t794 + t1108 * t790;
t771 = -pkin(6) * t795 - t1105 * t775 + t1108 * t776;
t770 = -pkin(1) * t803 + pkin(6) * t796 + t1105 * t776 + t1108 * t775;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1068, 0, -t1067, 0, t1143, -t1036, -t1132, -pkin(5) * t1132, t982, t954, t1307, t981, -t1274, t1026, -t1106 * t950 + t1109 * t959 + t1324, -t1106 * t951 + t1109 * t960 + t1336, t1109 * t947 - t1232, -pkin(5) * (t1109 * t1040 + t1106 * t948) - (t1106 * pkin(1) - t1109 * pkin(6)) * t947, t1026, -t1307, t1274, t982, t954, t981, -t1106 * t1058 + t1109 * t865 - t1232, -t1106 * t889 + t1109 * t866 - t1324, -t1106 * t879 + t1109 * t867 - t1336, t1109 * t829 - t1106 * t833 - pkin(5) * (t1106 * t877 + t1109 * t921), t1243, t1352, t1331, t1297, t1355, t1298, -t1106 * t808 + t1109 * t792 - t1333, -t1106 * t809 + t1109 * t793 + t1361, t1109 * t785 - t1106 * t791 - pkin(5) * (t1106 * t840 - t1109 * t875), t1109 * t774 - t1106 * t780 - pkin(5) * (t1106 * t807 - t1109 * t811), t1243, t1331, -t1352, t1298, -t1355, t1297, -t1106 * t798 + t1109 * t784 - t1333, t1109 * t778 - t1106 * t786 - pkin(5) * (t1106 * t841 - t1109 * t873), -t1106 * t797 + t1109 * t782 - t1361, t1109 * t771 - t1106 * t773 - pkin(5) * (t1106 * t796 - t1109 * t803); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1067, 0, t1068, 0, t1036, t1143, t1152, pkin(5) * t1152, t980, t953, t1308, t979, -t1275, t1024, t1106 * t959 + t1109 * t950 - t1325, t1106 * t960 + t1109 * t951 - t1337, t1106 * t947 + t992, pkin(5) * (-t1106 * t1040 + t1109 * t948) - (-t1109 * pkin(1) - t1106 * pkin(6)) * t947, t1024, -t1308, t1275, t980, t953, t979, t1109 * t1058 + t1106 * t865 + t992, t1106 * t866 + t1109 * t889 + t1325, t1106 * t867 + t1109 * t879 + t1337, t1106 * t829 + t1109 * t833 + pkin(5) * (-t1106 * t921 + t1109 * t877), t1252, t1353, t1330, t1301, t1357, t1302, t1106 * t792 + t1109 * t808 + t1332, t1106 * t793 + t1109 * t809 - t1362, t1106 * t785 + t1109 * t791 + pkin(5) * (t1106 * t875 + t1109 * t840), t1106 * t774 + t1109 * t780 + pkin(5) * (t1106 * t811 + t1109 * t807), t1252, t1330, -t1353, t1302, -t1357, t1301, t1106 * t784 + t1109 * t798 + t1332, t1106 * t778 + t1109 * t786 + pkin(5) * (t1106 * t873 + t1109 * t841), t1106 * t782 + t1109 * t797 + t1362, t1106 * t771 + t1109 * t773 + pkin(5) * (t1106 * t803 + t1109 * t796); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1076, t1077, 0, 0, t1005, t988, t1003, t1002, t1006, 0, t935, t934, t899, t906, 0, -t1003, -t1006, t1005, t988, t1002, t846, t855, t856, t816, t1140, -t843, t1299, t1276, -t857, t1271, t787, t789, t783, t772, t1140, t1299, t843, t1271, t857, t1276, t781, t777, t779, t770; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1110, 0, 0, -g(3), -t1076, 0, t1025, t989, t1012, t1023, -t1015, t1050, t959, t960, t947, pkin(6) * t947, t1050, -t1012, t1015, t1025, t989, t1023, t865, t866, t867, t829, t1124, t844, t1303, t1278, t862, t1270, t792, t793, t785, t774, t1124, t1303, -t844, t1270, -t862, t1278, t784, t778, t782, t771; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1110, 0, qJDD(1), 0, g(3), 0, -t1077, 0, t1086, -t1070, -t1174, -t1086, -t1094, -qJDD(2), t950, t951, 0, pkin(1) * t947, -qJDD(2), t1174, t1094, t1086, -t1070, -t1086, t1058, t889, t879, t833, -t927, t872, -t1310, -t924, -t913, t957, t808, t809, t791, t780, -t927, -t1310, -t872, t957, t913, -t924, t798, t786, t797, t773; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1076, t1077, 0, 0, t1005, t988, t1003, t1002, t1006, 0, t935, t934, t899, t906, 0, -t1003, -t1006, t1005, t988, t1002, t846, t855, t856, t816, t1140, -t843, t1299, t1276, -t857, t1271, t787, t789, t783, t772, t1140, t1299, t843, t1271, t857, t1276, t781, t777, t779, t770; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1063, t1064, t1071, -t1092, t1082, t1092, 0, -t1040, t1020, 0, t1092, -t1071, -t1082, t1063, t1064, -t1092, t929, -qJ(3) * t1064, t900, qJ(3) * t921, t1197, t1261, t1265, -t1197, -t939, t1048, t813, t814, t830, t794, t1197, t1265, -t1261, t1048, t939, -t1197, t805, t812, t804, t776; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1166, t1062, t1080, -t1136, t1072, -t1166, t1040, 0, t1021, 0, -t1166, -t1080, -t1072, t1166, t1062, -t1136, t928, t901, pkin(2) * t1062, pkin(2) * t921, -t926, -t870, -t1287, -t922, -t909, t1262, t815, t819, t799, t790, -t926, -t1287, t870, t1262, t909, -t922, t801, t788, t800, t775; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1086, t1070, t1174, t1086, t1094, qJDD(2), -t1020, -t1021, 0, 0, qJDD(2), -t1174, -t1094, -t1086, t1070, t1086, -t1058, t1255, t1309, t1144, t927, -t872, t1310, t924, t913, -t957, t1249, t1247, t1251, t1244, t927, t1310, t872, -t957, -t913, t924, t1241, t1250, t1248, t1242; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1174, -t1094, -t1086, t1070, t1086, 0, t952, t949, 0, t927, -t872, t1310, t924, t913, -t957, t1215 - t1321, t890 + t1349, -pkin(7) * t871 - t1264, -pkin(7) * t1264, t927, t1310, t872, -t957, -t913, t924, -t1219 * t1266 - t1217 - t1321, -pkin(7) * t869 - t1155, -t1223 - t1349, -pkin(7) * t802 - t1219 * t832 + t831; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1092, t1071, t1082, -t1063, -t1064, t1092, -t952, 0, -t921, 0, -t1197, -t1261, -t1265, t1197, t939, -t1048, t1130, t1148, -t1235, -t1236, -t1197, -t1265, t1261, -t1048, -t939, t1197, t1115, t1149, t1119 - 0.2e1 * t1200, t1150; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1166, t1080, t1072, -t1166, -t1062, t1136, -t949, t921, 0, 0, t926, t870, t1287, t922, t909, -t1262, -t1141 + t1320, -t1142 + t1348, pkin(7) * t875 - t1121, pkin(7) * t811 - t1234, t926, t1287, -t870, -t1262, -t909, t922, t1246 + t1320, pkin(7) * t873 - t1122, t1245 - t1348, pkin(7) * t803 - t1267; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t984, -t1266, t1260, t1198, t1027, -t1198, 0, t897, t836, 0, t984, t1260, t1266, -t1198, -t1027, t1198, -qJ(5) * t1266, t820, t822, -qJ(5) * t832; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1034, t1263, -t1029, -t983, t1259, -t1034, -t897, 0, t837, 0, t1034, -t1029, -t1263, -t1034, -t1259, -t983, t823, t817, pkin(4) * t1263, -t1233; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1197, t1261, t1265, -t1197, -t939, t1048, -t836, -t837, 0, 0, t1197, t1265, -t1261, t1048, t939, -t1197, t1116, t1222, t1073 + t1123, t1224; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t984, t1260, t1266, -t1198, -t1027, t1198, 0, t828, -t832, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1197, t1265, -t1261, t1048, t939, -t1197, -t828, 0, t825, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1034, t1029, t1263, t1034, t1259, t983, t832, -t825, 0, 0;];
m_new_reg = t1;
