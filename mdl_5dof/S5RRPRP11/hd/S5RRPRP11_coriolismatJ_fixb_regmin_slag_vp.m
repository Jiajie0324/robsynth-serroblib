% Calculate minimal parameter regressor of coriolis matrix for
% S5RRPRP11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x25]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:14
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RRPRP11_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRP11_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRP11_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RRPRP11_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:14:07
% EndTime: 2019-12-31 20:14:14
% DurationCPUTime: 2.66s
% Computational Cost: add. (2228->316), mult. (4137->398), div. (0->0), fcn. (3459->4), ass. (0->245)
t159 = sin(qJ(4));
t161 = cos(qJ(4));
t259 = t161 * qJ(5);
t114 = -t159 * pkin(4) + t259;
t104 = qJ(3) - t114;
t160 = sin(qJ(2));
t163 = -pkin(2) - pkin(7);
t260 = t160 * t163;
t162 = cos(qJ(2));
t286 = t162 / 0.2e1;
t295 = t260 / 0.2e1 + t104 * t286;
t256 = t162 * t163;
t263 = t160 * qJ(3);
t294 = -t256 + t263;
t181 = t114 * qJD(4) + t159 * qJD(5);
t285 = t160 * pkin(4);
t288 = pkin(3) + pkin(6);
t116 = t288 * t160;
t101 = t161 * t116;
t88 = -pkin(1) - t294;
t52 = t159 * t88 - t101;
t47 = t52 - t285;
t217 = -t52 / 0.2e1 + t47 / 0.2e1;
t262 = t160 * qJ(5);
t266 = t159 * t116;
t53 = t161 * t88 + t266;
t44 = t53 + t262;
t218 = t44 / 0.2e1 - t53 / 0.2e1;
t7 = (t262 / 0.2e1 + t218) * t161 + (-t285 / 0.2e1 + t217) * t159;
t274 = t7 * qJD(1);
t293 = t181 + t274;
t155 = t159 ^ 2;
t157 = t161 ^ 2;
t125 = t155 - t157;
t225 = t162 * qJD(1);
t216 = t161 * t225;
t190 = t159 * t216;
t169 = t125 * qJD(2) + 0.2e1 * t190;
t292 = pkin(4) / 0.2e1;
t151 = t162 * pkin(6);
t153 = t162 * pkin(3);
t117 = t151 + t153;
t149 = t162 * qJ(5);
t136 = t159 * t149;
t258 = t161 * t162;
t138 = pkin(4) * t258;
t242 = t136 + t138;
t63 = t117 + t242;
t291 = t63 / 0.2e1;
t87 = t114 * t162;
t290 = t87 / 0.2e1;
t257 = t162 * qJ(3);
t115 = t160 * pkin(2) - t257;
t94 = t160 * pkin(7) + t115;
t289 = t94 / 0.2e1;
t287 = -t162 / 0.2e1;
t103 = t117 * t161;
t283 = t159 * t94;
t66 = -t283 / 0.2e1;
t284 = t66 + t103 / 0.2e1;
t102 = t117 * t159;
t77 = t161 * t94;
t270 = t77 + t102;
t48 = t149 + t270;
t152 = t162 * pkin(4);
t195 = -t103 + t283;
t50 = -t152 + t195;
t113 = pkin(4) * t161 + t159 * qJ(5);
t62 = (-t113 - t288) * t160;
t3 = t44 * t48 + t47 * t50 + t63 * t62;
t282 = t3 * qJD(1);
t4 = -t44 * t52 + t47 * t53 + t63 * t87;
t281 = t4 * qJD(1);
t280 = t44 * t160;
t279 = t48 * t159;
t278 = t50 * t161;
t277 = t52 * t160;
t276 = t53 * t160;
t275 = t63 * t161;
t167 = t217 * t159 + t218 * t161;
t265 = t159 * t160;
t8 = -t160 * t259 / 0.2e1 + t265 * t292 + t167;
t273 = t8 * qJD(4);
t272 = t87 * t159;
t9 = (t162 * t48 - t280) * t161 + (-t160 * t47 + t162 * t50) * t159;
t271 = t9 * qJD(1);
t264 = t159 * t162;
t10 = -t44 * t264 + (t159 * t53 + (t47 - t52) * t161) * t162;
t269 = t10 * qJD(1);
t11 = t48 * t160 + t44 * t162 + (-t160 * t63 + t162 * t62) * t159;
t268 = t11 * qJD(1);
t12 = (t62 * t161 - t47) * t162 + (-t50 - t275) * t160;
t267 = t12 * qJD(1);
t261 = t160 * t161;
t19 = (-t52 - t101) * t162 + (-t195 - t103) * t160;
t255 = t19 * qJD(1);
t20 = t270 * t160 - t117 * t265 + (t53 - t266) * t162;
t254 = t20 * qJD(1);
t23 = -t276 + (-t63 * t159 + t87 * t161) * t162;
t253 = t23 * qJD(1);
t24 = -t277 + (t272 + t275) * t162;
t252 = t24 * qJD(1);
t25 = (t47 * t159 + t44 * t161) * t160;
t251 = t25 * qJD(1);
t26 = t63 * t264 + t280;
t250 = t26 * qJD(1);
t27 = t117 * t258 - t277;
t249 = t27 * qJD(1);
t28 = -t117 * t264 - t276;
t248 = t28 * qJD(1);
t247 = t52 * qJD(4);
t188 = -t162 * pkin(2) - t263;
t105 = -pkin(1) + t188;
t60 = t105 * t162 + t115 * t160;
t246 = t60 * qJD(1);
t61 = -t105 * t160 + t115 * t162;
t245 = t61 * qJD(1);
t74 = (t155 + t157) * t162 * t160;
t244 = t74 * qJD(1);
t156 = t160 ^ 2;
t158 = t162 ^ 2;
t126 = t158 - t156;
t98 = t126 * t159;
t243 = t98 * qJD(1);
t241 = qJD(2) * qJ(3);
t240 = qJD(3) * t160;
t239 = qJD(3) * t161;
t238 = qJD(4) * t161;
t237 = qJD(4) * t163;
t100 = t126 * t161;
t236 = t100 * qJD(1);
t235 = t104 * qJD(2);
t233 = t126 * qJD(1);
t232 = t156 * qJD(1);
t231 = t156 * qJD(3);
t144 = t159 * qJD(2);
t229 = t160 * qJD(1);
t228 = t160 * qJD(2);
t227 = t160 * qJD(4);
t145 = t160 * qJD(5);
t146 = t161 * qJD(2);
t226 = t161 * qJD(5);
t147 = t162 * qJD(2);
t224 = t162 * qJD(3);
t223 = -t102 / 0.2e1 - t149;
t222 = -t275 / 0.2e1 + t295 * t159;
t221 = pkin(1) * t229;
t220 = pkin(1) * t225;
t219 = pkin(6) * t228;
t215 = t159 * t227;
t214 = t159 * t237;
t213 = t161 * t227;
t212 = t161 * t237;
t211 = t105 * t115 * qJD(1);
t210 = t105 * t229;
t209 = t159 * t147;
t208 = t159 * t229;
t132 = t160 * t147;
t131 = t160 * t225;
t207 = t159 * t238;
t206 = t161 * t231;
t133 = t159 * t146;
t205 = t159 * t226;
t204 = t161 * t229;
t203 = t160 * t239;
t202 = t162 * t226;
t200 = t113 * t286;
t199 = -t260 / 0.2e1;
t197 = -t257 / 0.2e1;
t196 = t157 / 0.2e1 - t155 / 0.2e1;
t75 = (-0.1e1 / 0.2e1 + t196) * t162;
t194 = t75 * qJD(1) + t133;
t89 = t196 * t162;
t193 = t89 * qJD(1) + t133;
t108 = t159 * t158 * t161 * qJD(1);
t192 = t89 * qJD(2) - t108;
t137 = qJD(4) + t229;
t191 = qJD(3) - t226;
t189 = t162 * t133;
t187 = -t278 + t279;
t186 = (t197 + t199) * t161;
t165 = (t200 + t291) * t159 + (-t87 / 0.2e1 + t295) * t161;
t68 = -t77 / 0.2e1;
t14 = t68 + t165 + t223;
t58 = -t104 * t159 + t113 * t161;
t185 = -t14 * qJD(1) + t58 * qJD(2);
t110 = t159 * t199;
t171 = t161 * t200 + t110 + t275 / 0.2e1 - t104 * t264 / 0.2e1;
t93 = -t103 / 0.2e1;
t16 = -t152 + t93 + (t290 + t289) * t159 + t171;
t57 = t104 * t161 + t113 * t159;
t184 = -t16 * qJD(1) - t57 * qJD(2);
t176 = t136 / 0.2e1 + t138 / 0.2e1 + t151 / 0.2e1 + t153 / 0.2e1;
t179 = -t279 / 0.2e1 + t278 / 0.2e1;
t18 = t176 + t179;
t183 = t18 * qJD(1) + t235;
t96 = t137 * t159;
t182 = t227 + t232;
t180 = -t48 * qJ(5) / 0.2e1 + t50 * t292;
t164 = t104 * t290 + t113 * t291 + t167 * t163;
t2 = t164 + t180;
t178 = -t2 * qJD(1) - t113 * t235;
t177 = -t7 * qJD(4) - t159 * t145;
t67 = t77 / 0.2e1;
t46 = t67 + t186;
t175 = qJ(3) * t144 - t46 * qJD(1);
t45 = t110 + (t197 + t289) * t159;
t174 = -qJ(3) * t146 - t45 * qJD(1);
t22 = t152 / 0.2e1 + t222 + t284;
t173 = -t22 * qJD(1) + t104 * t146;
t172 = t162 * t96;
t99 = t125 * t158;
t170 = -t99 * qJD(1) + 0.2e1 * t189;
t168 = qJD(2) * t188 + t224;
t107 = t155 * t158 + t156;
t166 = -t107 * qJD(1) + t189 - t227;
t148 = qJD(3) * t159;
t143 = pkin(6) * t147;
t139 = t147 / 0.2e1;
t135 = t161 * t224;
t134 = t161 * t147;
t130 = t159 * t240;
t129 = t159 * t231;
t122 = t161 * t256;
t106 = t137 * qJ(5);
t97 = t137 * t161;
t95 = qJD(4) * t286 + t131;
t85 = t182 * t161;
t84 = t161 * t232 - t209;
t83 = t182 * t159;
t82 = t159 * t232 + t134;
t81 = -t157 * qJD(2) + t190;
t80 = t89 * qJD(4);
t76 = t155 * t286 + t157 * t287 + t287;
t70 = t137 * t258;
t69 = (t216 + t144) * t160;
t51 = t53 * qJD(4);
t30 = -t102 + t68 + t186;
t29 = t159 * t197 + t103 + t110 + t66;
t21 = t283 / 0.2e1 + t93 - t152 / 0.2e1 + t222;
t17 = t176 - t179;
t15 = t272 / 0.2e1 + t152 + t171 + t284;
t13 = t67 + t165 - t223;
t1 = t164 - t180;
t5 = [0, 0, 0, t132, t126 * qJD(2), 0, 0, 0, -pkin(1) * t228, -pkin(1) * t147, 0, t61 * qJD(2) - t160 * t224, -t60 * qJD(2) + t231, (qJD(2) * t115 - t240) * t105, -t155 * t132 + t158 * t207, -t99 * qJD(4) - 0.2e1 * t160 * t189, -t98 * qJD(2) - t162 * t213, -t100 * qJD(2) + t162 * t215, t132, t19 * qJD(2) + t28 * qJD(4) + t129, -t20 * qJD(2) - t27 * qJD(4) + t206, t12 * qJD(2) + t23 * qJD(4) + t158 * t205 + t129, -t9 * qJD(2) + t74 * qJD(3) - t10 * qJD(4) - t160 * t202, t11 * qJD(2) + t24 * qJD(4) + t107 * qJD(5) - t206, t3 * qJD(2) - t25 * qJD(3) + t4 * qJD(4) + t26 * qJD(5); 0, 0, 0, t131, t233, t147, -t228, 0, -t143 - t221, t219 - t220, t168, t143 + t245, -t219 - t246, pkin(6) * t168 + t211, -t80 + (-t155 * t225 + t133) * t160, -t169 * t160 + 0.2e1 * t162 * t207, t134 - t243, -t209 - t236, t95, t255 + (-qJ(3) * t261 + t122 - t266) * qJD(2) + t135 + t29 * qJD(4), -t116 * t146 - t254 + t30 * qJD(4) + (t294 * qJD(2) - t224) * t159, t267 + (-t104 * t261 + t62 * t159 + t122) * qJD(2) + t135 + t15 * qJD(4) + t76 * qJD(5), -qJD(2) * t187 - t271 - t273, -t62 * t146 + t268 + t13 * qJD(4) + (-t104 * t228 + (t163 * qJD(2) + t191) * t162) * t159, t282 + (t62 * t104 + t163 * t187) * qJD(2) + t17 * qJD(3) + t1 * qJD(4) + t21 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t147, -t131, t232, t143 - t210, 0, 0, 0, 0, 0, t82, t84, t82, t244, -t84, t17 * qJD(2) - t251 + t273; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t192, t170, -t70, t172, t139, t29 * qJD(2) + t248 - t51, t30 * qJD(2) + t247 - t249, t15 * qJD(2) + t253 - t51, -t8 * qJD(2) + qJD(4) * t242 - t202 - t269, t13 * qJD(2) + t145 - t247 + t252, t281 + t1 * qJD(2) + t8 * qJD(3) + (-t53 * pkin(4) - t52 * qJ(5)) * qJD(4) + t44 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76 * qJD(2) + t108, -t70, -t166, t21 * qJD(2) + t44 * qJD(4) + t250; 0, 0, 0, -t131, -t233, 0, 0, 0, t221, t220, 0, -t245, t246, -t211, t155 * t131 - t80, 0.2e1 * t161 * t172, -t215 + t243, -t213 + t236, -t95, t45 * qJD(4) - t255, t46 * qJD(4) + t254, t16 * qJD(4) - t75 * qJD(5) - t267, t177 + t271, t14 * qJD(4) - t159 * t202 - t268, t18 * qJD(3) + t2 * qJD(4) + t22 * qJD(5) - t282; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3), qJ(3) * qJD(3), -t207, t125 * qJD(4), 0, 0, 0, qJ(3) * t238 + t148, -qJ(3) * qJD(4) * t159 + t239, t57 * qJD(4) + t148 - t205, 0, -t58 * qJD(4) + t157 * qJD(5) - t239, (qJD(4) * t113 + t191) * t104; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), t241, 0, 0, 0, 0, 0, t144, t146, t144, 0, -t146, t183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t193, t169, -t96, -t97, -t225 / 0.2e1, -t174 - t214, -t175 - t212, -t184 - t214, -t293, -t185 + t212, t181 * t163 - t178; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t194, -t96, -t81, -t173 + t214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t131, -t232, t210, 0, 0, 0, 0, 0, -t83, -t85, -t83, -t244, t85, -t18 * qJD(2) - t177 + t251; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(2), -t241, 0, 0, 0, 0, 0, -t144, -t146, -t144, 0, t146, -t183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t96, -t97, -t96, 0, t97, t293; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t192, -t170, t69, (-t159 * t225 + t146) * t160, t139, -t45 * qJD(2) + t130 - t248, -t46 * qJD(2) + t203 + t249, -t16 * qJD(2) + t130 - t253, t7 * qJD(2) + t269, -t14 * qJD(2) + t145 - t203 - t252, qJ(5) * t145 - t2 * qJD(2) - t7 * qJD(3) - t281; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t193, -t169, t208, t204, t225 / 0.2e1, t174, t175, t184, t274, t185, t178; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t208, t204, t208, 0, -t204, -t274; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(5), qJ(5) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t137, t106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75 * qJD(2) - t108, t69, t166, -qJ(5) * t227 - t22 * qJD(2) - t130 - t250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t194, t208, t81, t173; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t208; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t137, -t106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t5;
