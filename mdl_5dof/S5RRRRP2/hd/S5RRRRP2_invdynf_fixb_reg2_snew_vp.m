% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRRP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 12:12
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRRP2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRRP2_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 12:12:11
% EndTime: 2020-01-03 12:12:13
% DurationCPUTime: 2.01s
% Computational Cost: add. (10372->171), mult. (13463->234), div. (0->0), fcn. (8785->8), ass. (0->138)
t1277 = qJD(1) + qJD(2);
t1274 = t1277 ^ 2;
t1275 = qJDD(1) + qJDD(2);
t1281 = sin(qJ(2));
t1285 = cos(qJ(2));
t1254 = t1281 * t1274 - t1285 * t1275;
t1282 = sin(qJ(1));
t1286 = cos(qJ(1));
t1293 = -t1285 * t1274 - t1281 * t1275;
t1317 = t1282 * t1254 + t1286 * t1293;
t1316 = -t1286 * t1254 + t1282 * t1293;
t1276 = qJD(3) + qJD(4);
t1313 = qJD(4) + t1276;
t1279 = sin(qJ(4));
t1283 = cos(qJ(4));
t1284 = cos(qJ(3));
t1304 = t1277 * t1284;
t1280 = sin(qJ(3));
t1305 = t1277 * t1280;
t1240 = t1279 * t1305 - t1283 * t1304;
t1312 = t1240 ^ 2;
t1242 = (t1279 * t1284 + t1280 * t1283) * t1277;
t1311 = t1242 ^ 2;
t1310 = t1276 ^ 2;
t1309 = t1284 ^ 2;
t1308 = -2 * qJD(5);
t1307 = t1242 * t1240;
t1306 = t1274 * t1280;
t1267 = -t1282 * g(2) + t1286 * g(3);
t1288 = qJD(1) ^ 2;
t1257 = -t1288 * pkin(1) + t1267;
t1268 = -t1286 * g(2) - t1282 * g(3);
t1290 = qJDD(1) * pkin(1) + t1268;
t1231 = t1285 * t1257 + t1281 * t1290;
t1227 = -t1274 * pkin(2) + t1275 * pkin(7) + t1231;
t1303 = t1280 * t1227;
t1302 = t1280 * t1275;
t1301 = t1284 * t1275;
t1300 = t1309 * t1274;
t1299 = qJD(4) - t1276;
t1295 = qJD(3) * t1304;
t1246 = t1295 + t1302;
t1203 = qJDD(3) * pkin(3) - t1246 * pkin(8) - t1303 + (qJD(3) * t1277 * pkin(8) + pkin(3) * t1306 - g(1)) * t1284;
t1221 = -t1280 * g(1) + t1284 * t1227;
t1260 = qJD(3) * pkin(3) - pkin(8) * t1305;
t1296 = qJD(3) * t1305;
t1292 = -t1296 + t1301;
t1204 = -pkin(3) * t1300 + t1292 * pkin(8) - qJD(3) * t1260 + t1221;
t1189 = t1279 * t1203 + t1283 * t1204;
t1298 = -qJDD(3) - qJDD(4);
t1278 = t1280 ^ 2;
t1297 = t1278 + t1309;
t1188 = t1283 * t1203 - t1279 * t1204;
t1294 = t1279 * t1246 - t1283 * t1292;
t1230 = -t1281 * t1257 + t1285 * t1290;
t1224 = -t1298 - t1307;
t1226 = -t1275 * pkin(2) - t1274 * pkin(7) - t1230;
t1291 = -t1242 * qJD(4) - t1294;
t1289 = -t1283 * t1246 - t1279 * t1292;
t1205 = -t1292 * pkin(3) - pkin(8) * t1300 + t1260 * t1305 + t1226;
t1209 = t1299 * t1240 + t1289;
t1287 = qJD(3) ^ 2;
t1266 = t1284 * t1306;
t1264 = -t1287 - t1300;
t1263 = -t1278 * t1274 - t1287;
t1262 = t1286 * qJDD(1) - t1282 * t1288;
t1261 = -t1282 * qJDD(1) - t1286 * t1288;
t1259 = -qJDD(3) + t1266;
t1258 = qJDD(3) + t1266;
t1256 = t1297 * t1274;
t1251 = t1297 * t1275;
t1247 = -0.2e1 * t1296 + t1301;
t1245 = 0.2e1 * t1295 + t1302;
t1237 = t1276 * pkin(4) - t1242 * qJ(5);
t1236 = -t1310 - t1311;
t1235 = t1284 * t1259 - t1280 * t1263;
t1234 = -t1280 * t1258 + t1284 * t1264;
t1233 = t1280 * t1259 + t1284 * t1263;
t1232 = t1284 * t1258 + t1280 * t1264;
t1229 = t1285 * t1251 - t1281 * t1256;
t1228 = t1281 * t1251 + t1285 * t1256;
t1225 = t1298 - t1307;
t1223 = -t1310 - t1312;
t1220 = -t1284 * g(1) - t1303;
t1219 = t1285 * t1235 + t1281 * t1245;
t1218 = t1285 * t1234 - t1281 * t1247;
t1217 = t1281 * t1235 - t1285 * t1245;
t1216 = t1281 * t1234 + t1285 * t1247;
t1215 = -t1311 - t1312;
t1213 = -t1281 * t1230 + t1285 * t1231;
t1212 = t1285 * t1230 + t1281 * t1231;
t1211 = t1283 * t1225 - t1279 * t1236;
t1210 = t1279 * t1225 + t1283 * t1236;
t1208 = -t1313 * t1240 - t1289;
t1207 = -t1299 * t1242 - t1294;
t1206 = t1313 * t1242 + t1294;
t1199 = t1283 * t1223 - t1279 * t1224;
t1198 = t1279 * t1223 + t1283 * t1224;
t1197 = -t1280 * t1220 + t1284 * t1221;
t1196 = t1284 * t1220 + t1280 * t1221;
t1195 = t1285 * t1197 + t1281 * t1226;
t1194 = t1281 * t1197 - t1285 * t1226;
t1193 = -t1280 * t1210 + t1284 * t1211;
t1192 = t1284 * t1210 + t1280 * t1211;
t1191 = t1283 * t1207 - t1279 * t1209;
t1190 = t1279 * t1207 + t1283 * t1209;
t1187 = -t1280 * t1198 + t1284 * t1199;
t1186 = t1284 * t1198 + t1280 * t1199;
t1185 = -t1291 * pkin(4) - t1312 * qJ(5) + t1242 * t1237 + qJDD(5) + t1205;
t1184 = t1285 * t1193 + t1281 * t1208;
t1183 = t1281 * t1193 - t1285 * t1208;
t1182 = t1285 * t1187 + t1281 * t1206;
t1181 = t1281 * t1187 - t1285 * t1206;
t1180 = -t1276 * t1237 + t1291 * qJ(5) + (-pkin(4) * t1240 + t1308) * t1240 + t1189;
t1179 = t1224 * pkin(4) + t1209 * qJ(5) + t1242 * t1308 + t1188;
t1178 = -t1280 * t1190 + t1284 * t1191;
t1177 = t1284 * t1190 + t1280 * t1191;
t1176 = -t1279 * t1188 + t1283 * t1189;
t1175 = t1283 * t1188 + t1279 * t1189;
t1174 = t1285 * t1178 + t1281 * t1215;
t1173 = t1281 * t1178 - t1285 * t1215;
t1172 = t1282 * t1183 - t1286 * t1184;
t1171 = t1286 * t1183 + t1282 * t1184;
t1170 = t1282 * t1181 - t1286 * t1182;
t1169 = t1286 * t1181 + t1282 * t1182;
t1168 = -t1279 * t1179 + t1283 * t1180;
t1167 = t1283 * t1179 + t1279 * t1180;
t1166 = -t1280 * t1175 + t1284 * t1176;
t1165 = t1284 * t1175 + t1280 * t1176;
t1164 = t1285 * t1166 + t1281 * t1205;
t1163 = t1281 * t1166 - t1285 * t1205;
t1162 = t1282 * t1173 - t1286 * t1174;
t1161 = t1286 * t1173 + t1282 * t1174;
t1160 = -t1280 * t1167 + t1284 * t1168;
t1159 = t1284 * t1167 + t1280 * t1168;
t1158 = t1285 * t1160 + t1281 * t1185;
t1157 = t1281 * t1160 - t1285 * t1185;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1232, t1233, 0, t1196, 0, 0, 0, 0, 0, 0, t1186, t1192, t1177, t1165, 0, 0, 0, 0, 0, 0, t1186, t1192, t1177, t1159; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1262, t1261, 0, t1282 * t1267 + t1286 * t1268, 0, 0, 0, 0, 0, 0, t1316, t1317, 0, t1286 * t1212 + t1282 * t1213, 0, 0, 0, 0, 0, 0, t1286 * t1216 + t1282 * t1218, t1286 * t1217 + t1282 * t1219, t1286 * t1228 + t1282 * t1229, t1286 * t1194 + t1282 * t1195, 0, 0, 0, 0, 0, 0, t1169, t1171, t1161, t1286 * t1163 + t1282 * t1164, 0, 0, 0, 0, 0, 0, t1169, t1171, t1161, t1286 * t1157 + t1282 * t1158; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1261, t1262, 0, -t1286 * t1267 + t1282 * t1268, 0, 0, 0, 0, 0, 0, -t1317, t1316, 0, t1282 * t1212 - t1286 * t1213, 0, 0, 0, 0, 0, 0, t1282 * t1216 - t1286 * t1218, t1282 * t1217 - t1286 * t1219, t1282 * t1228 - t1286 * t1229, t1282 * t1194 - t1286 * t1195, 0, 0, 0, 0, 0, 0, t1170, t1172, t1162, t1282 * t1163 - t1286 * t1164, 0, 0, 0, 0, 0, 0, t1170, t1172, t1162, t1282 * t1157 - t1286 * t1158; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1288, -qJDD(1), 0, t1267, 0, 0, 0, 0, 0, 0, t1293, t1254, 0, t1213, 0, 0, 0, 0, 0, 0, t1218, t1219, t1229, t1195, 0, 0, 0, 0, 0, 0, t1182, t1184, t1174, t1164, 0, 0, 0, 0, 0, 0, t1182, t1184, t1174, t1158; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1288, 0, t1268, 0, 0, 0, 0, 0, 0, -t1254, t1293, 0, t1212, 0, 0, 0, 0, 0, 0, t1216, t1217, t1228, t1194, 0, 0, 0, 0, 0, 0, t1181, t1183, t1173, t1163, 0, 0, 0, 0, 0, 0, t1181, t1183, t1173, t1157; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1232, t1233, 0, t1196, 0, 0, 0, 0, 0, 0, t1186, t1192, t1177, t1165, 0, 0, 0, 0, 0, 0, t1186, t1192, t1177, t1159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1274, -t1275, 0, t1231, 0, 0, 0, 0, 0, 0, t1234, t1235, t1251, t1197, 0, 0, 0, 0, 0, 0, t1187, t1193, t1178, t1166, 0, 0, 0, 0, 0, 0, t1187, t1193, t1178, t1160; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1275, -t1274, 0, t1230, 0, 0, 0, 0, 0, 0, t1247, -t1245, t1256, -t1226, 0, 0, 0, 0, 0, 0, -t1206, -t1208, -t1215, -t1205, 0, 0, 0, 0, 0, 0, -t1206, -t1208, -t1215, -t1185; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1232, t1233, 0, t1196, 0, 0, 0, 0, 0, 0, t1186, t1192, t1177, t1165, 0, 0, 0, 0, 0, 0, t1186, t1192, t1177, t1159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1264, t1259, t1301, t1221, 0, 0, 0, 0, 0, 0, t1199, t1211, t1191, t1176, 0, 0, 0, 0, 0, 0, t1199, t1211, t1191, t1168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1258, t1263, -t1302, t1220, 0, 0, 0, 0, 0, 0, t1198, t1210, t1190, t1175, 0, 0, 0, 0, 0, 0, t1198, t1210, t1190, t1167; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1247, t1245, -t1256, t1226, 0, 0, 0, 0, 0, 0, t1206, t1208, t1215, t1205, 0, 0, 0, 0, 0, 0, t1206, t1208, t1215, t1185; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1223, t1225, t1207, t1189, 0, 0, 0, 0, 0, 0, t1223, t1225, t1207, t1180; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1224, t1236, t1209, t1188, 0, 0, 0, 0, 0, 0, t1224, t1236, t1209, t1179; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1206, t1208, t1215, t1205, 0, 0, 0, 0, 0, 0, t1206, t1208, t1215, t1185; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1223, t1225, t1207, t1180; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1224, t1236, t1209, t1179; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1206, t1208, t1215, t1185;];
f_new_reg = t1;
