% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRRRP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:48
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRRRP2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP2_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP2_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP2_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRRP2_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:48:35
% EndTime: 2019-12-05 18:48:47
% DurationCPUTime: 13.38s
% Computational Cost: add. (64133->542), mult. (82998->687), div. (0->0), fcn. (53268->8), ass. (0->387)
t1022 = qJDD(3) + qJDD(4);
t1027 = sin(qJ(4));
t1031 = cos(qJ(4));
t1025 = qJD(1) + qJD(2);
t1032 = cos(qJ(3));
t1083 = t1025 * t1032;
t1028 = sin(qJ(3));
t1084 = t1025 * t1028;
t973 = t1027 * t1084 - t1031 * t1083;
t975 = t1027 * t1083 + t1031 * t1084;
t927 = t975 * t973;
t1136 = t927 - t1022;
t1146 = t1136 * pkin(4);
t1030 = sin(qJ(1));
t1034 = cos(qJ(1));
t1029 = sin(qJ(2));
t1021 = t1025 ^ 2;
t1023 = qJDD(1) + qJDD(2);
t1033 = cos(qJ(2));
t1078 = t1033 * t1023;
t993 = t1029 * t1021 - t1078;
t1135 = pkin(6) * t993 - t1029 * g(1);
t1080 = t1029 * t1023;
t990 = t1033 * t1021 + t1080;
t931 = t1030 * t990 + t1034 * t993;
t969 = pkin(6) * t990 - t1033 * g(1);
t1145 = pkin(5) * t931 + t1030 * t969 + t1034 * t1135;
t933 = t1030 * t993 - t1034 * t990;
t1144 = -pkin(5) * t933 - t1030 * t1135 + t1034 * t969;
t1087 = t1021 * t1028;
t1088 = qJD(3) * t1025;
t1011 = t1034 * g(2) + t1030 * g(3);
t1040 = qJDD(1) * pkin(1) + t1011;
t1010 = t1030 * g(2) - t1034 * g(3);
t1036 = qJD(1) ^ 2;
t996 = -t1036 * pkin(1) + t1010;
t936 = t1029 * t1040 + t1033 * t996;
t924 = -t1021 * pkin(2) + t1023 * pkin(7) + t936;
t1099 = t1028 * t924;
t1013 = qJD(3) * t1083;
t1081 = t1028 * t1023;
t984 = t1013 + t1081;
t1037 = qJDD(3) * pkin(3) - t984 * pkin(8) - t1099 + (pkin(3) * t1087 + pkin(8) * t1088 - g(1)) * t1032;
t1130 = t1032 ^ 2;
t1015 = t1130 * t1021;
t1063 = qJD(3) * t1084;
t1079 = t1032 * t1023;
t1043 = -t1063 + t1079;
t903 = -t1028 * g(1) + t1032 * t924;
t999 = qJD(3) * pkin(3) - pkin(8) * t1084;
t856 = -pkin(3) * t1015 + pkin(8) * t1043 - qJD(3) * t999 + t903;
t812 = t1027 * t856 - t1031 * t1037;
t1024 = qJD(3) + qJD(4);
t961 = t1024 * t973;
t1039 = qJ(5) * t961 + 0.2e1 * qJD(5) * t975 + t1146 + t812;
t890 = -t973 * qJD(4) + t1027 * t1043 + t1031 * t984;
t770 = t890 * qJ(5) + t1039;
t1038 = -t770 - t1146;
t1092 = t1031 * t1136;
t1020 = t1024 ^ 2;
t971 = t973 ^ 2;
t910 = -t1020 - t971;
t847 = t1027 * t910 - t1092;
t846 = pkin(3) * t847;
t1143 = t1038 + t846;
t935 = t1029 * t996 - t1033 * t1040;
t1061 = t1029 * t935 + t1033 * t936;
t883 = t1029 * t936 - t1033 * t935;
t1089 = t1034 * t883;
t1142 = -t1030 * t1061 - t1089;
t1096 = t1030 * t883;
t1141 = -t1034 * t1061 + t1096;
t1101 = t1027 * t1136;
t902 = t1032 * g(1) + t1099;
t844 = t1028 * t902 + t1032 * t903;
t1134 = -t961 + t890;
t1062 = t1027 * t984 - t1031 * t1043;
t863 = (qJD(4) - t1024) * t975 + t1062;
t972 = t975 ^ 2;
t848 = t1031 * t910 + t1101;
t803 = t1028 * t848 + t1032 * t847;
t1129 = pkin(2) * t803;
t916 = t927 + t1022;
t1102 = t1027 * t916;
t951 = -t972 - t1020;
t872 = t1031 * t951 - t1102;
t1093 = t1031 * t916;
t873 = -t1027 * t951 - t1093;
t824 = t1028 * t873 + t1032 * t872;
t1128 = pkin(2) * t824;
t813 = t1027 * t1037 + t1031 * t856;
t761 = t1027 * t813 - t1031 * t812;
t1127 = pkin(3) * t761;
t867 = t961 + t890;
t818 = -t1027 * t863 - t1031 * t867;
t820 = t1027 * t867 - t1031 * t863;
t767 = -t1028 * t818 + t1032 * t820;
t893 = -t971 - t972;
t755 = t1029 * t767 - t1033 * t893;
t756 = t1029 * t893 + t1033 * t767;
t1126 = pkin(5) * (-t1030 * t755 + t1034 * t756);
t804 = -t1028 * t847 + t1032 * t848;
t862 = (qJD(4) + t1024) * t975 + t1062;
t775 = t1029 * t804 - t1033 * t862;
t776 = t1029 * t862 + t1033 * t804;
t1125 = pkin(5) * (-t1030 * t775 + t1034 * t776);
t825 = -t1028 * t872 + t1032 * t873;
t782 = t1029 * t825 - t1033 * t1134;
t783 = t1029 * t1134 + t1033 * t825;
t1124 = pkin(5) * (-t1030 * t782 + t1034 * t783);
t1123 = pkin(6) * t755;
t1122 = pkin(6) * t775;
t1121 = pkin(6) * t782;
t765 = t1028 * t820 + t1032 * t818;
t1120 = pkin(7) * t765;
t1119 = pkin(7) * t803;
t1118 = pkin(7) * t824;
t1117 = pkin(8) * t818;
t1116 = pkin(8) * t847;
t1115 = pkin(8) * t872;
t1111 = -pkin(2) * t893 + pkin(7) * t767;
t1110 = -pkin(2) * t862 + pkin(7) * t804;
t1109 = -pkin(2) * t1134 + pkin(7) * t825;
t923 = -t1023 * pkin(2) - t1021 * pkin(7) + t935;
t1108 = -pkin(2) * t923 + pkin(7) * t844;
t1107 = qJD(5) * t973;
t1105 = t1024 * t975;
t1104 = t1027 * t770;
t861 = -t1043 * pkin(3) - pkin(8) * t1015 + t999 * t1084 + t923;
t1103 = t1027 * t861;
t1100 = t1028 * t761;
t906 = t1028 * t923;
t1009 = t1032 * t1087;
t997 = qJDD(3) + t1009;
t1098 = t1028 * t997;
t998 = qJDD(3) - t1009;
t1097 = t1028 * t998;
t1095 = t1031 * t770;
t1094 = t1031 * t861;
t1091 = t1032 * t761;
t907 = t1032 * t923;
t985 = -0.2e1 * t1063 + t1079;
t938 = t1032 * t985;
t1090 = t1032 * t998;
t1086 = t1024 * t1027;
t1085 = t1024 * t1031;
t1026 = t1028 ^ 2;
t1082 = t1026 * t1021;
t1076 = t1026 + t1130;
t869 = pkin(3) * t872;
t1075 = t869 - t813;
t1035 = qJD(3) ^ 2;
t1003 = -t1035 - t1082;
t950 = -t1028 * t1003 - t1090;
t983 = 0.2e1 * t1013 + t1081;
t1074 = -pkin(2) * t983 + pkin(7) * t950 + t906;
t1005 = -t1015 - t1035;
t948 = t1032 * t1005 - t1098;
t1073 = pkin(2) * t985 + pkin(7) * t948 - t907;
t1072 = t1029 * t927;
t1071 = t1033 * t927;
t1070 = -pkin(1) * t765 + pkin(6) * t756;
t1069 = -pkin(1) * t803 + pkin(6) * t776;
t1068 = -pkin(1) * t824 + pkin(6) * t783;
t816 = pkin(3) * t818;
t732 = -pkin(2) * t765 - t816;
t889 = -t975 * qJD(4) - t1062;
t954 = t1024 * pkin(4) - t975 * qJ(5);
t1048 = t971 * pkin(4) - t889 * qJ(5) + t1024 * t954 - t813;
t962 = -0.2e1 * t1107;
t771 = t962 - t1048;
t715 = t1027 * t771 - t1095;
t769 = pkin(4) * t770;
t1067 = pkin(3) * t715 - t769;
t1066 = -pkin(3) * t893 + pkin(8) * t820;
t1065 = -pkin(3) * t862 + pkin(8) * t848;
t1064 = -pkin(3) * t1134 + pkin(8) * t873;
t762 = t1027 * t812 + t1031 * t813;
t716 = t1031 * t771 + t1104;
t799 = -t889 * pkin(4) - t971 * qJ(5) + t975 * t954 + qJDD(5) + t861;
t731 = -pkin(4) * t799 + qJ(5) * t771;
t680 = -pkin(3) * t799 + pkin(8) * t716 + qJ(5) * t1104 + t1031 * t731;
t687 = -pkin(8) * t715 + qJ(5) * t1095 - t1027 * t731;
t694 = -t1028 * t715 + t1032 * t716;
t1060 = -pkin(2) * t799 + pkin(7) * t694 + t1028 * t687 + t1032 * t680;
t749 = -pkin(4) * t893 - qJ(5) * t863 + t771;
t757 = (t867 + t890) * qJ(5) + t1039;
t700 = t1027 * t757 + t1031 * t749 + t1066;
t702 = -t1027 * t749 + t1031 * t757 - t1117;
t1059 = t1028 * t702 + t1032 * t700 + t1111;
t720 = t1066 + t762;
t729 = -t761 - t1117;
t1058 = t1028 * t729 + t1032 * t720 + t1111;
t768 = -pkin(4) * t862 + qJ(5) * t910 - t799;
t726 = qJ(5) * t1101 + t1031 * t768 + t1065;
t740 = qJ(5) * t1092 - t1027 * t768 - t1116;
t1057 = t1028 * t740 + t1032 * t726 + t1110;
t791 = -qJ(5) * t951 + t799;
t836 = -pkin(4) * t1134 - qJ(5) * t916;
t730 = t1027 * t791 + t1031 * t836 + t1064;
t750 = -t1027 * t836 + t1031 * t791 - t1115;
t1056 = t1028 * t750 + t1032 * t730 + t1109;
t778 = t1065 - t1094;
t811 = t1103 - t1116;
t1055 = t1028 * t811 + t1032 * t778 + t1110;
t786 = t1064 + t1103;
t822 = t1094 - t1115;
t1054 = t1028 * t822 + t1032 * t786 + t1109;
t988 = t1076 * t1023;
t994 = t1015 + t1082;
t1053 = pkin(2) * t994 + pkin(7) * t988 + t844;
t1052 = t1029 * t1009;
t1051 = t1033 * t1009;
t1050 = t812 - t846;
t1000 = t1030 * qJDD(1) + t1034 * t1036;
t1049 = pkin(5) * t1000 - t1034 * g(1);
t842 = t1028 * t903 - t1032 * t902;
t1047 = t1034 * t1010 - t1030 * t1011;
t1046 = -t1030 * t1010 - t1034 * t1011;
t1045 = pkin(4) * t951 + t1048;
t713 = t1032 * t762 - t1100;
t751 = -pkin(3) * t861 + pkin(8) * t762;
t1044 = -pkin(2) * t861 + pkin(7) * t713 - pkin(8) * t1100 + t1032 * t751;
t1041 = t869 + t1045;
t1004 = t1015 - t1035;
t1002 = t1035 - t1082;
t1001 = -t1034 * qJDD(1) + t1030 * t1036;
t995 = -t1015 + t1082;
t989 = t1032 * t997;
t981 = -pkin(5) * t1001 + t1030 * g(1);
t980 = t1076 * t1088;
t963 = 0.2e1 * t1107;
t958 = -t972 + t1020;
t957 = t971 - t1020;
t956 = t1029 * qJDD(3) + t1033 * t980;
t955 = -t1033 * qJDD(3) + t1029 * t980;
t953 = -t1026 * t1088 + t1032 * t984;
t952 = -t1028 * t1043 - t1130 * t1088;
t949 = -t1028 * t1002 + t989;
t947 = t1032 * t1004 - t1097;
t946 = t1032 * t1003 - t1097;
t945 = t1032 * t1002 + t1098;
t944 = t1028 * t1005 + t989;
t943 = t1028 * t1004 + t1090;
t939 = (t984 + t1013) * t1028;
t932 = -t1029 * t994 + t1033 * t988;
t930 = t1029 * t988 + t1033 * t994;
t929 = -t1028 * t983 + t938;
t928 = t1028 * t985 + t1032 * t983;
t925 = t972 - t971;
t922 = t1028 * t1080 + t1033 * t949;
t921 = t1029 * t1079 + t1033 * t947;
t920 = -t1028 * t1078 + t1029 * t949;
t919 = t1029 * t947 - t1032 * t1078;
t914 = t1033 * t953 - t1052;
t913 = t1033 * t952 + t1052;
t912 = t1029 * t953 + t1051;
t911 = t1029 * t952 - t1051;
t905 = -pkin(1) * t990 - t936;
t904 = -pkin(1) * t993 - t935;
t901 = t1029 * t983 + t1033 * t950;
t900 = -t1029 * t985 + t1033 * t948;
t899 = t1029 * t950 - t1033 * t983;
t898 = t1029 * t948 + t1033 * t985;
t897 = (t1027 * t975 - t1031 * t973) * t1024;
t896 = (-t1027 * t973 - t1031 * t975) * t1024;
t892 = t1029 * t995 + t1033 * t929;
t891 = t1029 * t929 - t1033 * t995;
t881 = pkin(1) * t883;
t880 = pkin(1) * g(1) + pkin(6) * t1061;
t879 = t1031 * t957 - t1102;
t878 = -t1027 * t958 - t1092;
t877 = t1027 * t957 + t1093;
t876 = t1031 * t958 - t1101;
t875 = -pkin(7) * t946 + t907;
t874 = -pkin(7) * t944 + t906;
t871 = -pkin(2) * t946 + t903;
t870 = -pkin(2) * t944 + t902;
t858 = pkin(4) * t867;
t855 = t1031 * t890 - t975 * t1086;
t854 = t1027 * t890 + t975 * t1085;
t853 = -t1027 * t889 + t973 * t1085;
t852 = t1031 * t889 + t973 * t1086;
t840 = -t1028 * t896 + t1032 * t897;
t839 = t1028 * t897 + t1032 * t896;
t838 = t1029 * t1022 + t1033 * t840;
t837 = -t1033 * t1022 + t1029 * t840;
t835 = pkin(1) * t898 + t1073;
t834 = pkin(1) * t899 + t1074;
t833 = -pkin(6) * t930 - t1033 * t842;
t832 = pkin(6) * t932 - t1029 * t842;
t831 = t1029 * t923 + t1033 * t844;
t830 = t1029 * t844 - t1033 * t923;
t829 = -t1028 * t877 + t1032 * t879;
t828 = -t1028 * t876 + t1032 * t878;
t827 = t1028 * t879 + t1032 * t877;
t826 = t1028 * t878 + t1032 * t876;
t819 = -t1027 * t1134 - t1031 * t862;
t817 = -t1027 * t862 + t1031 * t1134;
t814 = pkin(1) * t930 + t1053;
t808 = -t1028 * t854 + t1032 * t855;
t807 = -t1028 * t852 + t1032 * t853;
t806 = t1028 * t855 + t1032 * t854;
t805 = t1028 * t853 + t1032 * t852;
t801 = -pkin(6) * t899 - t1029 * t871 + t1033 * t875;
t800 = -pkin(6) * t898 - t1029 * t870 + t1033 * t874;
t797 = t1033 * t808 + t1072;
t796 = t1033 * t807 - t1072;
t795 = t1029 * t808 - t1071;
t794 = t1029 * t807 + t1071;
t793 = -pkin(1) * t946 + pkin(6) * t901 + t1029 * t875 + t1033 * t871;
t792 = -pkin(1) * t944 + pkin(6) * t900 + t1029 * t874 + t1033 * t870;
t790 = -t1029 * t863 + t1033 * t829;
t789 = t1029 * t867 + t1033 * t828;
t788 = t1029 * t829 + t1033 * t863;
t787 = t1029 * t828 - t1033 * t867;
t785 = -t1030 * t837 + t1034 * t838;
t784 = -t1030 * t838 - t1034 * t837;
t781 = pkin(1) * t782;
t774 = pkin(1) * t775;
t772 = pkin(1) * t830 + t1108;
t766 = -t1028 * t817 + t1032 * t819;
t764 = t1028 * t819 + t1032 * t817;
t760 = -pkin(6) * t830 + (pkin(2) * t1029 - pkin(7) * t1033) * t842;
t759 = t1029 * t925 + t1033 * t766;
t758 = t1029 * t766 - t1033 * t925;
t754 = pkin(1) * t755;
t752 = -t1075 - t1128;
t746 = -t1030 * t795 + t1034 * t797;
t745 = -t1030 * t794 + t1034 * t796;
t744 = -t1030 * t797 - t1034 * t795;
t743 = -t1030 * t796 - t1034 * t794;
t742 = t1050 - t1129;
t741 = pkin(6) * t831 + (-pkin(2) * t1033 - pkin(7) * t1029 - pkin(1)) * t842;
t738 = -t1030 * t788 + t1034 * t790;
t737 = -t1030 * t787 + t1034 * t789;
t736 = -t1030 * t790 - t1034 * t788;
t735 = -t1030 * t789 - t1034 * t787;
t733 = pkin(5) * (-t1030 * t783 - t1034 * t782);
t724 = pkin(5) * (-t1030 * t776 - t1034 * t775);
t722 = -t1028 * t786 + t1032 * t822 - t1118;
t721 = -t1041 + t962 - t1128;
t718 = t732 + t858;
t717 = -t1028 * t778 + t1032 * t811 - t1119;
t714 = -t1129 - t1143;
t712 = t1028 * t762 + t1091;
t710 = -t1030 * t758 + t1034 * t759;
t709 = -t1030 * t759 - t1034 * t758;
t708 = t1029 * t861 + t1033 * t713;
t707 = t1029 * t713 - t1033 * t861;
t705 = pkin(5) * (-t1030 * t756 - t1034 * t755);
t704 = t781 + t1054;
t703 = t774 + t1055;
t698 = -pkin(2) * t712 - t1127;
t697 = -t1028 * t730 + t1032 * t750 - t1118;
t696 = -t1028 * t726 + t1032 * t740 - t1119;
t695 = -t1029 * t752 + t1033 * t722 - t1121;
t693 = t1028 * t716 + t1032 * t715;
t691 = -t1029 * t742 + t1033 * t717 - t1122;
t690 = t1029 * t722 + t1033 * t752 + t1068;
t689 = t781 + t1056;
t688 = -t1028 * t720 + t1032 * t729 - t1120;
t685 = t1029 * t799 + t1033 * t694;
t684 = t1029 * t694 - t1033 * t799;
t683 = -pkin(7) * t712 - pkin(8) * t1091 - t1028 * t751;
t682 = t1029 * t717 + t1033 * t742 + t1069;
t681 = t774 + t1057;
t678 = t754 + t1058;
t677 = -t1029 * t721 + t1033 * t697 - t1121;
t676 = t1029 * t697 + t1033 * t721 + t1068;
t675 = -t1029 * t714 + t1033 * t696 - t1122;
t674 = -pkin(2) * t693 - t1067;
t673 = t1029 * t696 + t1033 * t714 + t1069;
t672 = -t1029 * t732 + t1033 * t688 - t1123;
t671 = pkin(1) * t707 + t1044;
t670 = -t1028 * t700 + t1032 * t702 - t1120;
t669 = t1029 * t688 + t1033 * t732 + t1070;
t668 = t754 + t1059;
t667 = -pkin(6) * t707 - t1029 * t698 + t1033 * t683;
t666 = -t1029 * t718 + t1033 * t670 - t1123;
t665 = t1029 * t670 + t1033 * t718 + t1070;
t664 = -pkin(1) * t712 + pkin(6) * t708 + t1029 * t683 + t1033 * t698;
t663 = -pkin(7) * t693 - t1028 * t680 + t1032 * t687;
t662 = pkin(1) * t684 + t1060;
t661 = -pkin(6) * t684 - t1029 * t674 + t1033 * t663;
t660 = -pkin(1) * t693 + pkin(6) * t685 + t1029 * t663 + t1033 * t674;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t1011, -t1010, 0, 0, 0, 0, 0, 0, 0, t1023, t904, t905, 0, t881, t939, t928, t945, t938, t943, 0, t835, t834, t814, t772, t806, t764, t826, t805, t827, t839, t703, t704, t678, t671, t806, t764, t826, t805, t827, t839, t681, t689, t668, t662; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t1000, 0, t1001, 0, t1049, t981, -t1047, -pkin(5) * t1047, 0, 0, t933, 0, t931, 0, t1144, -t1145, t1141, pkin(5) * t1141 + pkin(6) * t1096 - t1034 * t880, -t1030 * t914 - t1034 * t912, -t1030 * t892 - t1034 * t891, -t1030 * t922 - t1034 * t920, -t1030 * t913 - t1034 * t911, -t1030 * t921 - t1034 * t919, -t1030 * t956 - t1034 * t955, -t1030 * t800 - t1034 * t792 - pkin(5) * (-t1030 * t898 + t1034 * t900), -t1030 * t801 - t1034 * t793 - pkin(5) * (-t1030 * t899 + t1034 * t901), -t1030 * t833 - t1034 * t832 - pkin(5) * (-t1030 * t930 + t1034 * t932), -t1030 * t760 - t1034 * t741 - pkin(5) * (-t1030 * t830 + t1034 * t831), t744, t709, t735, t743, t736, t784, -t1030 * t691 - t1034 * t682 - t1125, -t1030 * t695 - t1034 * t690 - t1124, -t1030 * t672 - t1034 * t669 - t1126, -t1030 * t667 - t1034 * t664 - pkin(5) * (-t1030 * t707 + t1034 * t708), t744, t709, t735, t743, t736, t784, -t1030 * t675 - t1034 * t673 - t1125, -t1030 * t677 - t1034 * t676 - t1124, -t1030 * t666 - t1034 * t665 - t1126, -t1030 * t661 - t1034 * t660 - pkin(5) * (-t1030 * t684 + t1034 * t685); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t1001, 0, -t1000, 0, -t981, t1049, t1046, pkin(5) * t1046, 0, 0, -t931, 0, t933, 0, t1145, t1144, t1142, pkin(5) * t1142 - pkin(6) * t1089 - t1030 * t880, -t1030 * t912 + t1034 * t914, -t1030 * t891 + t1034 * t892, -t1030 * t920 + t1034 * t922, -t1030 * t911 + t1034 * t913, -t1030 * t919 + t1034 * t921, -t1030 * t955 + t1034 * t956, t1034 * t800 - t1030 * t792 + pkin(5) * (-t1030 * t900 - t1034 * t898), t1034 * t801 - t1030 * t793 + pkin(5) * (-t1030 * t901 - t1034 * t899), t1034 * t833 - t1030 * t832 + pkin(5) * (-t1030 * t932 - t1034 * t930), t1034 * t760 - t1030 * t741 + pkin(5) * (-t1030 * t831 - t1034 * t830), t746, t710, t737, t745, t738, t785, -t1030 * t682 + t1034 * t691 + t724, -t1030 * t690 + t1034 * t695 + t733, -t1030 * t669 + t1034 * t672 + t705, t1034 * t667 - t1030 * t664 + pkin(5) * (-t1030 * t708 - t1034 * t707), t746, t710, t737, t745, t738, t785, -t1030 * t673 + t1034 * t675 + t724, -t1030 * t676 + t1034 * t677 + t733, -t1030 * t665 + t1034 * t666 + t705, t1034 * t661 - t1030 * t660 + pkin(5) * (-t1030 * t685 - t1034 * t684); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1036, 0, 0, -g(1), -t1011, 0, 0, 0, -t993, 0, -t990, 0, t1135, t969, -t883, -pkin(6) * t883, t914, t892, t922, t913, t921, t956, t800, t801, t833, t760, t797, t759, t789, t796, t790, t838, t691, t695, t672, t667, t797, t759, t789, t796, t790, t838, t675, t677, t666, t661; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1036, 0, qJDD(1), 0, g(1), 0, t1010, 0, 0, 0, t990, 0, -t993, 0, -t969, t1135, t1061, t880, t912, t891, t920, t911, t919, t955, t792, t793, t832, t741, t795, t758, t787, t794, t788, t837, t682, t690, t669, t664, t795, t758, t787, t794, t788, t837, t673, t676, t665, t660; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1011, -t1010, 0, 0, 0, 0, 0, 0, 0, t1023, t904, t905, 0, t881, t939, t928, t945, t938, t943, 0, t835, t834, t814, t772, t806, t764, t826, t805, t827, t839, t703, t704, t678, t671, t806, t764, t826, t805, t827, t839, t681, t689, t668, t662; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1023, 0, -t1021, 0, 0, -g(1), t935, 0, t953, t929, t949, t952, t947, t980, t874, t875, -t842, -pkin(7) * t842, t808, t766, t828, t807, t829, t840, t717, t722, t688, t683, t808, t766, t828, t807, t829, t840, t696, t697, t670, t663; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1021, 0, t1023, 0, g(1), 0, t936, 0, t1009, -t995, -t1081, -t1009, -t1079, -qJDD(3), t870, t871, 0, -pkin(2) * t842, -t927, -t925, -t867, t927, t863, -t1022, t742, t752, t732, t698, -t927, -t925, -t867, t927, t863, -t1022, t714, t721, t718, t674; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1023, -t935, -t936, 0, 0, t939, t928, t945, t938, t943, 0, t1073, t1074, t1053, t1108, t806, t764, t826, t805, t827, t839, t1055, t1054, t1058, t1044, t806, t764, t826, t805, t827, t839, t1057, t1056, t1059, t1060; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t984, t985, t997, -t1013, t1004, t1013, 0, t923, t902, 0, t855, t819, t878, t853, t879, t897, t811, t822, t729, -pkin(8) * t761, t855, t819, t878, t853, t879, t897, t740, t750, t702, t687; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1063, t983, t1002, t1043, t998, -t1063, -t923, 0, t903, 0, t854, t817, t876, t852, t877, t896, t778, t786, t720, t751, t854, t817, t876, t852, t877, t896, t726, t730, t700, t680; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1009, t995, t1081, t1009, t1079, qJDD(3), -t902, -t903, 0, 0, t927, t925, t867, -t927, -t863, t1022, -t1050, t1075, t816, t1127, t927, t925, t867, -t927, -t863, t1022, t1143, t963 + t1041, -t858 + t816, t1067; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t890, -t862, -t1136, t961, t957, -t961, 0, t861, t812, 0, t890, -t862, -t1136, t961, t957, -t961, qJ(5) * t1136, t791, t757, qJ(5) * t770; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1105, t1134, t958, t889, t916, -t1105, -t861, 0, t813, 0, t1105, t1134, t958, t889, t916, -t1105, t768, t836, t749, t731; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t927, t925, t867, -t927, -t863, t1022, -t812, -t813, 0, 0, t927, t925, t867, -t927, -t863, t1022, t1038, t963 + t1045, -t858, -t769; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t890, -t862, -t1136, t961, t957, -t961, 0, t799, t770, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1105, t1134, t958, t889, t916, -t1105, -t799, 0, t771, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t927, t925, t867, -t927, -t863, t1022, -t770, -t771, 0, 0;];
m_new_reg = t1;
