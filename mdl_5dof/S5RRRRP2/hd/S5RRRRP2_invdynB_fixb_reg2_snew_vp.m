% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:48
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRRP2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP2_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP2_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP2_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRRP2_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:48:21
% EndTime: 2019-12-05 18:48:35
% DurationCPUTime: 9.57s
% Computational Cost: add. (37913->483), mult. (49296->682), div. (0->0), fcn. (31846->8), ass. (0->356)
t562 = qJD(1) + qJD(2);
t558 = t562 ^ 2;
t571 = cos(qJ(2));
t560 = qJDD(1) + qJDD(2);
t567 = sin(qJ(2));
t614 = t567 * t560;
t531 = t571 * t558 + t614;
t513 = pkin(6) * t531 - t571 * g(1);
t568 = sin(qJ(1));
t572 = cos(qJ(1));
t604 = t571 * t560;
t534 = t567 * t558 - t604;
t654 = t568 * t531 + t572 * t534;
t655 = pkin(6) * t534 - t567 * g(1);
t659 = pkin(5) * t654 + t568 * t513 + t572 * t655;
t481 = t572 * t531 - t568 * t534;
t658 = pkin(5) * t481 + t572 * t513 - t568 * t655;
t565 = sin(qJ(4));
t569 = cos(qJ(4));
t570 = cos(qJ(3));
t566 = sin(qJ(3));
t626 = t562 * t566;
t516 = -t569 * t570 * t562 + t565 * t626;
t518 = (t565 * t570 + t566 * t569) * t562;
t478 = t518 * t516;
t559 = qJDD(3) + qJDD(4);
t583 = -t559 + t478;
t653 = t583 * pkin(4);
t621 = t565 * t583;
t609 = t569 * t583;
t549 = t568 * g(2) - t572 * g(3);
t574 = qJD(1) ^ 2;
t537 = -t574 * pkin(1) + t549;
t550 = t572 * g(2) + t568 * g(3);
t575 = qJDD(1) * pkin(1) + t550;
t487 = t567 * t537 - t571 * t575;
t488 = t571 * t537 + t567 * t575;
t584 = t567 * t487 + t571 * t488;
t442 = t571 * t487 - t567 * t488;
t603 = t572 * t442;
t390 = -t568 * t584 + t603;
t613 = t568 * t442;
t391 = t572 * t584 + t613;
t601 = qJD(3) * t562;
t591 = t570 * t601;
t615 = t566 * t560;
t524 = t591 + t615;
t553 = t570 * t560;
t592 = t566 * t601;
t578 = -t553 + t592;
t449 = -t516 * qJD(4) + t569 * t524 - t565 * t578;
t561 = qJD(3) + qJD(4);
t506 = t561 * t516;
t650 = -t506 + t449;
t515 = t518 ^ 2;
t557 = t561 ^ 2;
t495 = -t515 - t557;
t469 = t478 + t559;
t622 = t565 * t469;
t431 = t569 * t495 - t622;
t610 = t569 * t469;
t432 = -t565 * t495 - t610;
t380 = t570 * t431 + t566 * t432;
t649 = -pkin(2) * t380 - pkin(3) * t431;
t514 = t516 ^ 2;
t463 = -t557 - t514;
t405 = t565 * t463 - t609;
t406 = t569 * t463 + t621;
t363 = t570 * t405 + t566 * t406;
t648 = -pkin(2) * t363 - pkin(3) * t405;
t582 = t565 * t524 + t569 * t578;
t421 = (qJD(4) - t561) * t518 + t582;
t425 = -t506 - t449;
t375 = -t421 * t565 + t569 * t425;
t377 = -t421 * t569 - t565 * t425;
t330 = -t566 * t375 + t570 * t377;
t452 = -t514 - t515;
t318 = t567 * t330 - t571 * t452;
t319 = t571 * t330 + t567 * t452;
t275 = -t568 * t318 + t572 * t319;
t643 = pkin(5) * t275;
t364 = -t566 * t405 + t570 * t406;
t420 = (qJD(4) + t561) * t518 + t582;
t338 = t567 * t364 - t571 * t420;
t339 = t571 * t364 + t567 * t420;
t292 = -t568 * t338 + t572 * t339;
t642 = pkin(5) * t292;
t381 = -t566 * t431 + t570 * t432;
t343 = t567 * t381 - t571 * t650;
t344 = t571 * t381 + t567 * t650;
t300 = -t568 * t343 + t572 * t344;
t641 = pkin(5) * t300;
t640 = pkin(6) * t318;
t639 = pkin(6) * t338;
t638 = pkin(6) * t343;
t328 = t570 * t375 + t566 * t377;
t637 = pkin(7) * t328;
t636 = pkin(7) * t363;
t635 = pkin(7) * t380;
t634 = pkin(8) * t375;
t633 = pkin(8) * t405;
t632 = pkin(8) * t431;
t629 = t558 * t566;
t628 = t561 * t565;
t627 = t561 * t569;
t563 = t566 ^ 2;
t625 = t563 * t558;
t564 = t570 ^ 2;
t554 = t564 * t558;
t476 = -t558 * pkin(2) + t560 * pkin(7) + t488;
t618 = t566 * t476;
t415 = qJDD(3) * pkin(3) - t524 * pkin(8) - t618 + (pkin(3) * t629 + pkin(8) * t601 - g(1)) * t570;
t461 = -t566 * g(1) + t570 * t476;
t540 = qJD(3) * pkin(3) - pkin(8) * t626;
t416 = -pkin(3) * t554 - pkin(8) * t578 - qJD(3) * t540 + t461;
t371 = -t569 * t415 + t565 * t416;
t593 = t449 * qJ(5) + t371;
t577 = -qJ(5) * t506 - t593;
t600 = qJD(5) * t518;
t332 = t577 - 0.2e1 * t600 - t653;
t624 = t565 * t332;
t475 = -t560 * pkin(2) - t558 * pkin(7) + t487;
t419 = t578 * pkin(3) - pkin(8) * t554 + t540 * t626 + t475;
t623 = t565 * t419;
t372 = t565 * t415 + t569 * t416;
t324 = -t569 * t371 + t565 * t372;
t620 = t566 * t324;
t619 = t566 * t475;
t548 = t570 * t629;
t538 = qJDD(3) + t548;
t617 = t566 * t538;
t539 = qJDD(3) - t548;
t616 = t566 * t539;
t612 = t569 * t332;
t611 = t569 * t419;
t608 = t570 * t324;
t607 = t570 * t475;
t525 = t553 - 0.2e1 * t592;
t606 = t570 * t525;
t605 = t570 * t539;
t602 = t563 + t564;
t598 = t567 * t478;
t597 = t571 * t478;
t596 = pkin(1) * t318 - pkin(2) * t452 + pkin(7) * t330;
t595 = pkin(1) * t338 - pkin(2) * t420 + pkin(7) * t364;
t594 = pkin(1) * t343 - pkin(2) * t650 + pkin(7) * t381;
t590 = -pkin(1) * t328 + pkin(6) * t319;
t589 = -pkin(1) * t363 + pkin(6) * t339;
t588 = -pkin(1) * t380 + pkin(6) * t344;
t587 = -pkin(3) * t452 + pkin(8) * t377;
t586 = -pkin(3) * t420 + pkin(8) * t406;
t585 = -pkin(3) * t650 + pkin(8) * t432;
t325 = t565 * t371 + t569 * t372;
t460 = t570 * g(1) + t618;
t403 = t566 * t460 + t570 * t461;
t581 = t567 * t548;
t580 = t571 * t548;
t297 = -pkin(2) * t328 - pkin(3) * t375;
t541 = t568 * qJDD(1) + t572 * t574;
t579 = pkin(5) * t541 - t572 * g(1);
t402 = t570 * t460 - t566 * t461;
t502 = t572 * t549 - t568 * t550;
t501 = -t568 * t549 - t572 * t550;
t448 = -t518 * qJD(4) - t582;
t498 = t561 * pkin(4) - t518 * qJ(5);
t576 = t448 * qJ(5) - 0.2e1 * qJD(5) * t516 - t561 * t498 + t372;
t359 = -t448 * pkin(4) - t514 * qJ(5) + t518 * t498 + qJDD(5) + t419;
t573 = qJD(3) ^ 2;
t546 = -t554 - t573;
t545 = t554 - t573;
t544 = -t573 - t625;
t543 = t573 - t625;
t542 = -t572 * qJDD(1) + t568 * t574;
t536 = t554 - t625;
t535 = t554 + t625;
t530 = t570 * t538;
t529 = t602 * t560;
t523 = 0.2e1 * t591 + t615;
t522 = -pkin(5) * t542 + t568 * g(1);
t521 = t602 * t601;
t508 = 0.2e1 * t600;
t504 = -t515 + t557;
t503 = t514 - t557;
t500 = t567 * qJDD(3) + t571 * t521;
t499 = -t571 * qJDD(3) + t567 * t521;
t497 = t570 * t524 - t563 * t601;
t496 = -t564 * t601 + t566 * t578;
t494 = -t566 * t544 - t605;
t493 = -t566 * t543 + t530;
t492 = t570 * t546 - t617;
t491 = t570 * t545 - t616;
t490 = t570 * t544 - t616;
t489 = t566 * t546 + t530;
t483 = t571 * t529 - t567 * t535;
t480 = t567 * t529 + t571 * t535;
t479 = -t566 * t523 + t606;
t477 = -t515 + t514;
t474 = t571 * t493 + t566 * t614;
t473 = t571 * t491 + t567 * t553;
t472 = t567 * t493 - t566 * t604;
t471 = t567 * t491 - t570 * t604;
t467 = t571 * t497 - t581;
t466 = t571 * t496 + t581;
t465 = t567 * t497 + t580;
t464 = t567 * t496 - t580;
t459 = t571 * t494 + t567 * t523;
t458 = t571 * t492 - t567 * t525;
t457 = t567 * t494 - t571 * t523;
t456 = t567 * t492 + t571 * t525;
t455 = (-t516 * t569 + t518 * t565) * t561;
t454 = (-t516 * t565 - t518 * t569) * t561;
t451 = t571 * t479 - t567 * t536;
t450 = t567 * t479 + t571 * t536;
t439 = pkin(1) * g(1) + pkin(6) * t584;
t438 = t569 * t503 - t622;
t437 = -t565 * t504 - t609;
t436 = t565 * t503 + t610;
t435 = t569 * t504 - t621;
t434 = -pkin(7) * t490 + t607;
t433 = -pkin(7) * t489 + t619;
t430 = -pkin(2) * t490 + t461;
t429 = -pkin(2) * t489 + t460;
t428 = -t568 * t480 + t572 * t483;
t427 = -t572 * t480 - t568 * t483;
t414 = t569 * t449 - t518 * t628;
t413 = t565 * t449 + t518 * t627;
t412 = -t565 * t448 + t516 * t627;
t411 = t569 * t448 + t516 * t628;
t400 = -t568 * t457 + t572 * t459;
t399 = -t568 * t456 + t572 * t458;
t398 = -t572 * t457 - t568 * t459;
t397 = -t572 * t456 - t568 * t458;
t396 = -t566 * t454 + t570 * t455;
t395 = t570 * t454 + t566 * t455;
t394 = t571 * t396 + t567 * t559;
t393 = t567 * t396 - t571 * t559;
t392 = -pkin(4) * t650 - qJ(5) * t469;
t389 = -pkin(6) * t480 + t571 * t402;
t388 = pkin(6) * t483 + t567 * t402;
t387 = t571 * t403 + t567 * t475;
t386 = t567 * t403 - t571 * t475;
t385 = -t566 * t436 + t570 * t438;
t384 = -t566 * t435 + t570 * t437;
t383 = t570 * t436 + t566 * t438;
t382 = t570 * t435 + t566 * t437;
t378 = t611 - t632;
t376 = -t569 * t420 - t565 * t650;
t374 = -t565 * t420 + t569 * t650;
t370 = t623 - t633;
t368 = -t566 * t413 + t570 * t414;
t367 = -t566 * t411 + t570 * t412;
t366 = t570 * t413 + t566 * t414;
t365 = t570 * t411 + t566 * t412;
t361 = -pkin(6) * t457 - t567 * t430 + t571 * t434;
t360 = -pkin(6) * t456 - t567 * t429 + t571 * t433;
t358 = t571 * t368 + t598;
t357 = t571 * t367 - t598;
t356 = t567 * t368 - t597;
t355 = t567 * t367 + t597;
t354 = -pkin(1) * t490 + pkin(6) * t459 + t571 * t430 + t567 * t434;
t353 = -pkin(1) * t489 + pkin(6) * t458 + t571 * t429 + t567 * t433;
t352 = -qJ(5) * t495 + t359;
t351 = t571 * t385 - t567 * t421;
t350 = t571 * t384 - t567 * t425;
t349 = t567 * t385 + t571 * t421;
t348 = t567 * t384 + t571 * t425;
t347 = t585 + t623;
t346 = -t568 * t393 + t572 * t394;
t345 = -t572 * t393 - t568 * t394;
t340 = t586 - t611;
t335 = -t568 * t386 + t572 * t387;
t334 = -t572 * t386 - t568 * t387;
t333 = -t514 * pkin(4) + t576;
t331 = -pkin(4) * t420 + qJ(5) * t463 - t359;
t329 = -t566 * t374 + t570 * t376;
t327 = t570 * t374 + t566 * t376;
t323 = -pkin(6) * t386 - (pkin(2) * t567 - pkin(7) * t571) * t402;
t322 = t571 * t329 - t567 * t477;
t321 = t567 * t329 + t571 * t477;
t320 = t508 + (-t425 + t506) * qJ(5) + t653 + t593;
t315 = t372 + t649;
t314 = -pkin(3) * t419 + pkin(8) * t325;
t313 = t569 * t352 - t565 * t392 - t632;
t312 = -qJ(5) * t421 + (-t452 - t514) * pkin(4) + t576;
t311 = -t568 * t356 + t572 * t358;
t310 = -t568 * t355 + t572 * t357;
t309 = -t572 * t356 - t568 * t358;
t308 = -t572 * t355 - t568 * t357;
t307 = t371 + t648;
t306 = pkin(6) * t387 - (-pkin(2) * t571 - pkin(7) * t567 - pkin(1)) * t402;
t305 = qJ(5) * t609 - t565 * t331 - t633;
t304 = -t568 * t349 + t572 * t351;
t303 = -t568 * t348 + t572 * t350;
t302 = -t572 * t349 - t568 * t351;
t301 = -t572 * t348 - t568 * t350;
t299 = -t572 * t343 - t568 * t344;
t298 = pkin(5) * t299;
t296 = -pkin(4) * t359 + qJ(5) * t333;
t295 = t565 * t352 + t569 * t392 + t585;
t294 = -t324 - t634;
t293 = qJ(5) * t621 + t569 * t331 + t586;
t291 = -t572 * t338 - t568 * t339;
t290 = pkin(5) * t291;
t289 = -t566 * t347 + t570 * t378 - t635;
t288 = (-t495 - t514) * pkin(4) + t576 + t649;
t287 = t325 + t587;
t286 = -pkin(4) * t425 + t297;
t285 = -t566 * t340 + t570 * t370 - t636;
t284 = t569 * t333 - t624;
t283 = t565 * t333 + t612;
t282 = t508 - t577 + t648 + 0.2e1 * t653;
t281 = t570 * t325 - t620;
t280 = t566 * t325 + t608;
t279 = -t568 * t321 + t572 * t322;
t278 = -t572 * t321 - t568 * t322;
t277 = t571 * t281 + t567 * t419;
t276 = t567 * t281 - t571 * t419;
t274 = -t572 * t318 - t568 * t319;
t273 = pkin(5) * t274;
t272 = -t565 * t312 + t569 * t320 - t634;
t271 = t569 * t312 + t565 * t320 + t587;
t270 = -pkin(2) * t280 - pkin(3) * t324;
t269 = -t566 * t295 + t570 * t313 - t635;
t268 = -t566 * t293 + t570 * t305 - t636;
t267 = t571 * t289 - t567 * t315 - t638;
t266 = -t566 * t283 + t570 * t284;
t265 = t570 * t283 + t566 * t284;
t264 = t571 * t285 - t567 * t307 - t639;
t263 = t567 * t289 + t571 * t315 + t588;
t262 = -t566 * t287 + t570 * t294 - t637;
t261 = -pkin(8) * t283 - qJ(5) * t612 - t565 * t296;
t260 = t571 * t266 + t567 * t359;
t259 = t567 * t266 - t571 * t359;
t258 = -pkin(7) * t280 - pkin(8) * t608 - t566 * t314;
t257 = t567 * t285 + t571 * t307 + t589;
t256 = -t568 * t276 + t572 * t277;
t255 = -t572 * t276 - t568 * t277;
t254 = -pkin(3) * t359 + pkin(8) * t284 - qJ(5) * t624 + t569 * t296;
t253 = t571 * t269 - t567 * t288 - t638;
t252 = t567 * t269 + t571 * t288 + t588;
t251 = t571 * t268 - t567 * t282 - t639;
t250 = -pkin(2) * t265 - pkin(3) * t283 - pkin(4) * t332;
t249 = t567 * t268 + t571 * t282 + t589;
t248 = t571 * t262 - t567 * t297 - t640;
t247 = -t566 * t271 + t570 * t272 - t637;
t246 = t567 * t262 + t571 * t297 + t590;
t245 = -t568 * t259 + t572 * t260;
t244 = -t572 * t259 - t568 * t260;
t243 = -pkin(6) * t276 + t571 * t258 - t567 * t270;
t242 = t571 * t247 - t567 * t286 - t640;
t241 = t567 * t247 + t571 * t286 + t590;
t240 = -pkin(1) * t280 + pkin(6) * t277 + t567 * t258 + t571 * t270;
t239 = -pkin(7) * t265 - t566 * t254 + t570 * t261;
t238 = -pkin(6) * t259 + t571 * t239 - t567 * t250;
t237 = -pkin(1) * t265 + pkin(6) * t260 + t567 * t239 + t571 * t250;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t489, t490, 0, -t402, 0, 0, 0, 0, 0, 0, t363, t380, t328, t280, 0, 0, 0, 0, 0, 0, t363, t380, t328, t265; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t542, t541, 0, t501, 0, 0, 0, 0, 0, 0, t654, t481, 0, t390, 0, 0, 0, 0, 0, 0, t397, t398, t427, t334, 0, 0, 0, 0, 0, 0, t291, t299, t274, t255, 0, 0, 0, 0, 0, 0, t291, t299, t274, t244; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t541, t542, 0, t502, 0, 0, 0, 0, 0, 0, -t481, t654, 0, t391, 0, 0, 0, 0, 0, 0, t399, t400, t428, t335, 0, 0, 0, 0, 0, 0, t292, t300, t275, t256, 0, 0, 0, 0, 0, 0, t292, t300, t275, t245; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t550, -t549, 0, 0, 0, 0, 0, 0, 0, t560, -pkin(1) * t534 - t487, -pkin(1) * t531 - t488, 0, -pkin(1) * t442, (t524 + t591) * t566, t570 * t523 + t566 * t525, t570 * t543 + t617, t606, t566 * t545 + t605, 0, pkin(1) * t456 + pkin(2) * t525 + pkin(7) * t492 - t607, pkin(1) * t457 - pkin(2) * t523 + pkin(7) * t494 + t619, pkin(1) * t480 + pkin(2) * t535 + pkin(7) * t529 + t403, pkin(1) * t386 - pkin(2) * t475 + pkin(7) * t403, t366, t327, t382, t365, t383, t395, t570 * t340 + t566 * t370 + t595, t570 * t347 + t566 * t378 + t594, t570 * t287 + t566 * t294 + t596, pkin(1) * t276 - pkin(2) * t419 + pkin(7) * t281 - pkin(8) * t620 + t570 * t314, t366, t327, t382, t365, t383, t395, t570 * t293 + t566 * t305 + t595, t570 * t295 + t566 * t313 + t594, t570 * t271 + t566 * t272 + t596, pkin(1) * t259 - pkin(2) * t359 + pkin(7) * t266 + t570 * t254 + t566 * t261; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t541, 0, t542, 0, t579, t522, -t502, -pkin(5) * t502, 0, 0, -t481, 0, t654, 0, t658, -t659, -t391, -pkin(5) * t391 - pkin(6) * t613 - t572 * t439, -t572 * t465 - t568 * t467, -t572 * t450 - t568 * t451, -t572 * t472 - t568 * t474, -t572 * t464 - t568 * t466, -t572 * t471 - t568 * t473, -t572 * t499 - t568 * t500, -pkin(5) * t399 - t572 * t353 - t568 * t360, -pkin(5) * t400 - t572 * t354 - t568 * t361, -pkin(5) * t428 - t572 * t388 - t568 * t389, -pkin(5) * t335 - t572 * t306 - t568 * t323, t309, t278, t301, t308, t302, t345, -t572 * t257 - t568 * t264 - t642, -t572 * t263 - t568 * t267 - t641, -t572 * t246 - t568 * t248 - t643, -pkin(5) * t256 - t572 * t240 - t568 * t243, t309, t278, t301, t308, t302, t345, -t572 * t249 - t568 * t251 - t642, -t572 * t252 - t568 * t253 - t641, -t572 * t241 - t568 * t242 - t643, -pkin(5) * t245 - t572 * t237 - t568 * t238; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t542, 0, -t541, 0, -t522, t579, t501, pkin(5) * t501, 0, 0, -t654, 0, -t481, 0, t659, t658, t390, pkin(5) * t390 + pkin(6) * t603 - t568 * t439, -t568 * t465 + t572 * t467, -t568 * t450 + t572 * t451, -t568 * t472 + t572 * t474, -t568 * t464 + t572 * t466, -t568 * t471 + t572 * t473, -t568 * t499 + t572 * t500, pkin(5) * t397 - t568 * t353 + t572 * t360, pkin(5) * t398 - t568 * t354 + t572 * t361, pkin(5) * t427 - t568 * t388 + t572 * t389, pkin(5) * t334 - t568 * t306 + t572 * t323, t311, t279, t303, t310, t304, t346, -t568 * t257 + t572 * t264 + t290, -t568 * t263 + t572 * t267 + t298, -t568 * t246 + t572 * t248 + t273, pkin(5) * t255 - t568 * t240 + t572 * t243, t311, t279, t303, t310, t304, t346, -t568 * t249 + t572 * t251 + t290, -t568 * t252 + t572 * t253 + t298, -t568 * t241 + t572 * t242 + t273, pkin(5) * t244 - t568 * t237 + t572 * t238;];
tauB_reg = t1;
