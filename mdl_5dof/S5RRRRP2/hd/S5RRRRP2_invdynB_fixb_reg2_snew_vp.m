% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 12:12
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRRP2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP2_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP2_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP2_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRRP2_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 12:11:52
% EndTime: 2020-01-03 12:12:01
% DurationCPUTime: 7.52s
% Computational Cost: add. (37913->483), mult. (49296->682), div. (0->0), fcn. (31846->8), ass. (0->356)
t568 = qJD(1) + qJD(2);
t564 = t568 ^ 2;
t577 = cos(qJ(2));
t566 = qJDD(1) + qJDD(2);
t573 = sin(qJ(2));
t620 = t573 * t566;
t532 = t577 * t564 + t620;
t610 = t577 * t566;
t535 = t573 * t564 - t610;
t574 = sin(qJ(1));
t578 = cos(qJ(1));
t485 = t578 * t532 - t574 * t535;
t513 = pkin(6) * t532 - t577 * g(1);
t661 = pkin(6) * t535 - t573 * g(1);
t666 = -pkin(5) * t485 - t578 * t513 + t574 * t661;
t583 = t574 * t532 + t578 * t535;
t665 = pkin(5) * t583 + t574 * t513 + t578 * t661;
t571 = sin(qJ(4));
t575 = cos(qJ(4));
t576 = cos(qJ(3));
t572 = sin(qJ(3));
t632 = t568 * t572;
t516 = -t575 * t576 * t568 + t571 * t632;
t518 = (t571 * t576 + t572 * t575) * t568;
t478 = t518 * t516;
t565 = qJDD(3) + qJDD(4);
t588 = -t565 + t478;
t660 = t588 * pkin(4);
t627 = t571 * t588;
t615 = t575 * t588;
t551 = t574 * g(2) - t578 * g(3);
t654 = qJD(1) ^ 2;
t539 = -t654 * pkin(1) - t551;
t552 = t578 * g(2) + t574 * g(3);
t580 = qJDD(1) * pkin(1) - t552;
t487 = t573 * t539 - t577 * t580;
t488 = t577 * t539 + t573 * t580;
t589 = t573 * t487 + t577 * t488;
t442 = t577 * t487 - t573 * t488;
t609 = t578 * t442;
t390 = t574 * t589 - t609;
t619 = t574 * t442;
t662 = t578 * t589 + t619;
t607 = qJD(3) * t568;
t597 = t576 * t607;
t621 = t572 * t566;
t525 = t597 + t621;
t555 = t576 * t566;
t598 = t572 * t607;
t584 = -t555 + t598;
t449 = -t516 * qJD(4) + t575 * t525 - t571 * t584;
t567 = qJD(3) + qJD(4);
t506 = t567 * t516;
t657 = -t506 + t449;
t515 = t518 ^ 2;
t563 = t567 ^ 2;
t495 = -t515 - t563;
t469 = t478 + t565;
t628 = t571 * t469;
t431 = t575 * t495 - t628;
t616 = t575 * t469;
t432 = -t571 * t495 - t616;
t380 = t576 * t431 + t572 * t432;
t656 = -pkin(2) * t380 - pkin(3) * t431;
t514 = t516 ^ 2;
t463 = -t563 - t514;
t405 = t571 * t463 - t615;
t406 = t575 * t463 + t627;
t363 = t576 * t405 + t572 * t406;
t655 = -pkin(2) * t363 - pkin(3) * t405;
t587 = t571 * t525 + t575 * t584;
t421 = (qJD(4) - t567) * t518 + t587;
t425 = -t506 - t449;
t375 = -t421 * t571 + t575 * t425;
t377 = -t421 * t575 - t571 * t425;
t330 = -t572 * t375 + t576 * t377;
t452 = -t514 - t515;
t318 = t573 * t330 - t577 * t452;
t319 = t577 * t330 + t573 * t452;
t275 = t574 * t318 - t578 * t319;
t649 = pkin(5) * t275;
t364 = -t572 * t405 + t576 * t406;
t420 = (qJD(4) + t567) * t518 + t587;
t338 = t573 * t364 - t577 * t420;
t339 = t577 * t364 + t573 * t420;
t292 = t574 * t338 - t578 * t339;
t648 = pkin(5) * t292;
t381 = -t572 * t431 + t576 * t432;
t343 = t573 * t381 - t577 * t657;
t344 = t577 * t381 + t573 * t657;
t300 = t574 * t343 - t578 * t344;
t647 = pkin(5) * t300;
t646 = pkin(6) * t318;
t645 = pkin(6) * t338;
t644 = pkin(6) * t343;
t328 = t576 * t375 + t572 * t377;
t643 = pkin(7) * t328;
t642 = pkin(7) * t363;
t641 = pkin(7) * t380;
t640 = pkin(8) * t375;
t639 = pkin(8) * t405;
t638 = pkin(8) * t431;
t635 = t564 * t572;
t634 = t567 * t571;
t633 = t567 * t575;
t569 = t572 ^ 2;
t631 = t569 * t564;
t570 = t576 ^ 2;
t556 = t570 * t564;
t476 = -t564 * pkin(2) + t566 * pkin(7) + t488;
t624 = t572 * t476;
t415 = qJDD(3) * pkin(3) - t525 * pkin(8) - t624 + (pkin(3) * t635 + pkin(8) * t607 - g(1)) * t576;
t461 = -t572 * g(1) + t576 * t476;
t542 = qJD(3) * pkin(3) - pkin(8) * t632;
t416 = -pkin(3) * t556 - pkin(8) * t584 - qJD(3) * t542 + t461;
t371 = -t575 * t415 + t571 * t416;
t599 = t449 * qJ(5) + t371;
t582 = -qJ(5) * t506 - t599;
t606 = qJD(5) * t518;
t332 = t582 - 0.2e1 * t606 - t660;
t630 = t571 * t332;
t475 = -t566 * pkin(2) - t564 * pkin(7) + t487;
t419 = t584 * pkin(3) - pkin(8) * t556 + t542 * t632 + t475;
t629 = t571 * t419;
t372 = t571 * t415 + t575 * t416;
t324 = -t575 * t371 + t571 * t372;
t626 = t572 * t324;
t625 = t572 * t475;
t550 = t576 * t635;
t540 = qJDD(3) + t550;
t623 = t572 * t540;
t541 = qJDD(3) - t550;
t622 = t572 * t541;
t618 = t575 * t332;
t617 = t575 * t419;
t614 = t576 * t324;
t613 = t576 * t475;
t526 = t555 - 0.2e1 * t598;
t612 = t576 * t526;
t611 = t576 * t541;
t608 = t569 + t570;
t604 = t573 * t478;
t603 = t577 * t478;
t602 = pkin(1) * t318 - pkin(2) * t452 + pkin(7) * t330;
t601 = pkin(1) * t338 - pkin(2) * t420 + pkin(7) * t364;
t600 = pkin(1) * t343 - pkin(2) * t657 + pkin(7) * t381;
t596 = -pkin(1) * t328 + pkin(6) * t319;
t595 = -pkin(1) * t363 + pkin(6) * t339;
t594 = -pkin(1) * t380 + pkin(6) * t344;
t593 = -pkin(3) * t452 + pkin(8) * t377;
t592 = -pkin(3) * t420 + pkin(8) * t406;
t591 = -pkin(3) * t657 + pkin(8) * t432;
t543 = -t574 * qJDD(1) - t578 * t654;
t590 = pkin(5) * t543 + t578 * g(1);
t325 = t571 * t371 + t575 * t372;
t460 = t576 * g(1) + t624;
t403 = t572 * t460 + t576 * t461;
t501 = -t574 * t551 - t578 * t552;
t586 = t573 * t550;
t585 = t577 * t550;
t297 = -pkin(2) * t328 - pkin(3) * t375;
t402 = t576 * t460 - t572 * t461;
t502 = t578 * t551 - t574 * t552;
t448 = -t518 * qJD(4) - t587;
t498 = t567 * pkin(4) - t518 * qJ(5);
t581 = t448 * qJ(5) - 0.2e1 * qJD(5) * t516 - t567 * t498 + t372;
t359 = -t448 * pkin(4) - t514 * qJ(5) + t518 * t498 + qJDD(5) + t419;
t579 = qJD(3) ^ 2;
t548 = -t556 - t579;
t547 = t556 - t579;
t546 = -t579 - t631;
t545 = t579 - t631;
t544 = t578 * qJDD(1) - t574 * t654;
t537 = t556 - t631;
t536 = t556 + t631;
t531 = t576 * t540;
t530 = t608 * t566;
t524 = 0.2e1 * t597 + t621;
t523 = pkin(5) * t544 + t574 * g(1);
t522 = t608 * t607;
t508 = 0.2e1 * t606;
t504 = -t515 + t563;
t503 = t514 - t563;
t500 = t573 * qJDD(3) + t577 * t522;
t499 = -t577 * qJDD(3) + t573 * t522;
t497 = t576 * t525 - t569 * t607;
t496 = -t570 * t607 + t572 * t584;
t494 = -t572 * t546 - t611;
t493 = -t572 * t545 + t531;
t492 = t576 * t548 - t623;
t491 = t576 * t547 - t622;
t490 = t576 * t546 - t622;
t489 = t572 * t548 + t531;
t483 = t577 * t530 - t573 * t536;
t480 = t573 * t530 + t577 * t536;
t479 = -t572 * t524 + t612;
t477 = -t515 + t514;
t474 = t577 * t493 + t572 * t620;
t473 = t577 * t491 + t573 * t555;
t472 = t573 * t493 - t572 * t610;
t471 = t573 * t491 - t576 * t610;
t467 = t577 * t497 - t586;
t466 = t577 * t496 + t586;
t465 = t573 * t497 + t585;
t464 = t573 * t496 - t585;
t459 = t577 * t494 + t573 * t524;
t458 = t577 * t492 - t573 * t526;
t457 = t573 * t494 - t577 * t524;
t456 = t573 * t492 + t577 * t526;
t455 = (-t516 * t575 + t518 * t571) * t567;
t454 = (-t516 * t571 - t518 * t575) * t567;
t451 = t577 * t479 - t573 * t537;
t450 = t573 * t479 + t577 * t537;
t439 = pkin(1) * g(1) + pkin(6) * t589;
t438 = t575 * t503 - t628;
t437 = -t571 * t504 - t615;
t436 = t571 * t503 + t616;
t435 = t575 * t504 - t627;
t434 = -pkin(7) * t490 + t613;
t433 = -pkin(7) * t489 + t625;
t430 = -pkin(2) * t490 + t461;
t429 = -pkin(2) * t489 + t460;
t428 = t574 * t480 - t578 * t483;
t427 = t578 * t480 + t574 * t483;
t414 = t575 * t449 - t518 * t634;
t413 = t571 * t449 + t518 * t633;
t412 = -t571 * t448 + t516 * t633;
t411 = t575 * t448 + t516 * t634;
t400 = t574 * t457 - t578 * t459;
t399 = t574 * t456 - t578 * t458;
t398 = t578 * t457 + t574 * t459;
t397 = t578 * t456 + t574 * t458;
t396 = -t572 * t454 + t576 * t455;
t395 = t576 * t454 + t572 * t455;
t394 = t577 * t396 + t573 * t565;
t393 = t573 * t396 - t577 * t565;
t392 = -pkin(4) * t657 - qJ(5) * t469;
t389 = -pkin(6) * t480 + t577 * t402;
t388 = pkin(6) * t483 + t573 * t402;
t387 = t577 * t403 + t573 * t475;
t386 = t573 * t403 - t577 * t475;
t385 = -t572 * t436 + t576 * t438;
t384 = -t572 * t435 + t576 * t437;
t383 = t576 * t436 + t572 * t438;
t382 = t576 * t435 + t572 * t437;
t378 = t617 - t638;
t376 = -t575 * t420 - t571 * t657;
t374 = -t571 * t420 + t575 * t657;
t370 = t629 - t639;
t368 = -t572 * t413 + t576 * t414;
t367 = -t572 * t411 + t576 * t412;
t366 = t576 * t413 + t572 * t414;
t365 = t576 * t411 + t572 * t412;
t361 = -pkin(6) * t457 - t573 * t430 + t577 * t434;
t360 = -pkin(6) * t456 - t573 * t429 + t577 * t433;
t358 = t577 * t368 + t604;
t357 = t577 * t367 - t604;
t356 = t573 * t368 - t603;
t355 = t573 * t367 + t603;
t354 = -pkin(1) * t490 + pkin(6) * t459 + t577 * t430 + t573 * t434;
t353 = -pkin(1) * t489 + pkin(6) * t458 + t577 * t429 + t573 * t433;
t352 = -qJ(5) * t495 + t359;
t351 = t577 * t385 - t573 * t421;
t350 = t577 * t384 - t573 * t425;
t349 = t573 * t385 + t577 * t421;
t348 = t573 * t384 + t577 * t425;
t347 = t591 + t629;
t346 = t574 * t393 - t578 * t394;
t345 = t578 * t393 + t574 * t394;
t340 = t592 - t617;
t335 = t574 * t386 - t578 * t387;
t334 = t578 * t386 + t574 * t387;
t333 = -t514 * pkin(4) + t581;
t331 = -pkin(4) * t420 + qJ(5) * t463 - t359;
t329 = -t572 * t374 + t576 * t376;
t327 = t576 * t374 + t572 * t376;
t323 = -pkin(6) * t386 - (pkin(2) * t573 - pkin(7) * t577) * t402;
t322 = t577 * t329 - t573 * t477;
t321 = t573 * t329 + t577 * t477;
t320 = t508 + (-t425 + t506) * qJ(5) + t660 + t599;
t315 = t372 + t656;
t314 = -pkin(3) * t419 + pkin(8) * t325;
t313 = t575 * t352 - t571 * t392 - t638;
t312 = -qJ(5) * t421 + (-t452 - t514) * pkin(4) + t581;
t311 = t574 * t356 - t578 * t358;
t310 = t574 * t355 - t578 * t357;
t309 = t578 * t356 + t574 * t358;
t308 = t578 * t355 + t574 * t357;
t307 = t371 + t655;
t306 = pkin(6) * t387 - (-pkin(2) * t577 - pkin(7) * t573 - pkin(1)) * t402;
t305 = qJ(5) * t615 - t571 * t331 - t639;
t304 = t574 * t349 - t578 * t351;
t303 = t574 * t348 - t578 * t350;
t302 = t578 * t349 + t574 * t351;
t301 = t578 * t348 + t574 * t350;
t299 = t578 * t343 + t574 * t344;
t298 = pkin(5) * t299;
t296 = -pkin(4) * t359 + qJ(5) * t333;
t295 = t571 * t352 + t575 * t392 + t591;
t294 = -t324 - t640;
t293 = qJ(5) * t627 + t575 * t331 + t592;
t291 = t578 * t338 + t574 * t339;
t290 = pkin(5) * t291;
t289 = -t572 * t347 + t576 * t378 - t641;
t288 = (-t495 - t514) * pkin(4) + t581 + t656;
t287 = t325 + t593;
t286 = -pkin(4) * t425 + t297;
t285 = -t572 * t340 + t576 * t370 - t642;
t284 = t575 * t333 - t630;
t283 = t571 * t333 + t618;
t282 = t508 - t582 + t655 + 0.2e1 * t660;
t281 = t576 * t325 - t626;
t280 = t572 * t325 + t614;
t279 = t574 * t321 - t578 * t322;
t278 = t578 * t321 + t574 * t322;
t277 = t577 * t281 + t573 * t419;
t276 = t573 * t281 - t577 * t419;
t274 = t578 * t318 + t574 * t319;
t273 = pkin(5) * t274;
t272 = -t571 * t312 + t575 * t320 - t640;
t271 = t575 * t312 + t571 * t320 + t593;
t270 = -pkin(2) * t280 - pkin(3) * t324;
t269 = -t572 * t295 + t576 * t313 - t641;
t268 = -t572 * t293 + t576 * t305 - t642;
t267 = t577 * t289 - t573 * t315 - t644;
t266 = -t572 * t283 + t576 * t284;
t265 = t576 * t283 + t572 * t284;
t264 = t577 * t285 - t573 * t307 - t645;
t263 = t573 * t289 + t577 * t315 + t594;
t262 = -t572 * t287 + t576 * t294 - t643;
t261 = -pkin(8) * t283 - qJ(5) * t618 - t571 * t296;
t260 = t577 * t266 + t573 * t359;
t259 = t573 * t266 - t577 * t359;
t258 = -pkin(7) * t280 - pkin(8) * t614 - t572 * t314;
t257 = t573 * t285 + t577 * t307 + t595;
t256 = t574 * t276 - t578 * t277;
t255 = t578 * t276 + t574 * t277;
t254 = -pkin(3) * t359 + pkin(8) * t284 - qJ(5) * t630 + t575 * t296;
t253 = t577 * t269 - t573 * t288 - t644;
t252 = t573 * t269 + t577 * t288 + t594;
t251 = t577 * t268 - t573 * t282 - t645;
t250 = -pkin(2) * t265 - pkin(3) * t283 - pkin(4) * t332;
t249 = t573 * t268 + t577 * t282 + t595;
t248 = t577 * t262 - t573 * t297 - t646;
t247 = -t572 * t271 + t576 * t272 - t643;
t246 = t573 * t262 + t577 * t297 + t596;
t245 = t574 * t259 - t578 * t260;
t244 = t578 * t259 + t574 * t260;
t243 = -pkin(6) * t276 + t577 * t258 - t573 * t270;
t242 = t577 * t247 - t573 * t286 - t646;
t241 = t573 * t247 + t577 * t286 + t596;
t240 = -pkin(1) * t280 + pkin(6) * t277 + t573 * t258 + t577 * t270;
t239 = -pkin(7) * t265 - t572 * t254 + t576 * t261;
t238 = -pkin(6) * t259 + t577 * t239 - t573 * t250;
t237 = -pkin(1) * t265 + pkin(6) * t260 + t573 * t239 + t577 * t250;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t489, t490, 0, -t402, 0, 0, 0, 0, 0, 0, t363, t380, t328, t280, 0, 0, 0, 0, 0, 0, t363, t380, t328, t265; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t544, t543, 0, t501, 0, 0, 0, 0, 0, 0, -t583, -t485, 0, t390, 0, 0, 0, 0, 0, 0, t397, t398, t427, t334, 0, 0, 0, 0, 0, 0, t291, t299, t274, t255, 0, 0, 0, 0, 0, 0, t291, t299, t274, t244; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t543, t544, 0, t502, 0, 0, 0, 0, 0, 0, t485, -t583, 0, -t662, 0, 0, 0, 0, 0, 0, t399, t400, t428, t335, 0, 0, 0, 0, 0, 0, t292, t300, t275, t256, 0, 0, 0, 0, 0, 0, t292, t300, t275, t245; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t552, t551, 0, 0, 0, 0, 0, 0, 0, t566, -pkin(1) * t535 - t487, -pkin(1) * t532 - t488, 0, -pkin(1) * t442, (t525 + t597) * t572, t576 * t524 + t572 * t526, t576 * t545 + t623, t612, t572 * t547 + t611, 0, pkin(1) * t456 + pkin(2) * t526 + pkin(7) * t492 - t613, pkin(1) * t457 - pkin(2) * t524 + pkin(7) * t494 + t625, pkin(1) * t480 + pkin(2) * t536 + pkin(7) * t530 + t403, pkin(1) * t386 - pkin(2) * t475 + pkin(7) * t403, t366, t327, t382, t365, t383, t395, t576 * t340 + t572 * t370 + t601, t576 * t347 + t572 * t378 + t600, t576 * t287 + t572 * t294 + t602, pkin(1) * t276 - pkin(2) * t419 + pkin(7) * t281 - pkin(8) * t626 + t576 * t314, t366, t327, t382, t365, t383, t395, t576 * t293 + t572 * t305 + t601, t576 * t295 + t572 * t313 + t600, t576 * t271 + t572 * t272 + t602, pkin(1) * t259 - pkin(2) * t359 + pkin(7) * t266 + t576 * t254 + t572 * t261; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t543, 0, t544, 0, t590, -t523, -t502, -pkin(5) * t502, 0, 0, t485, 0, -t583, 0, t666, t665, t662, pkin(5) * t662 + pkin(6) * t619 + t578 * t439, t578 * t465 + t574 * t467, t578 * t450 + t574 * t451, t578 * t472 + t574 * t474, t578 * t464 + t574 * t466, t578 * t471 + t574 * t473, t578 * t499 + t574 * t500, -pkin(5) * t399 + t578 * t353 + t574 * t360, -pkin(5) * t400 + t578 * t354 + t574 * t361, -pkin(5) * t428 + t578 * t388 + t574 * t389, -pkin(5) * t335 + t578 * t306 + t574 * t323, t309, t278, t301, t308, t302, t345, t578 * t257 + t574 * t264 - t648, t578 * t263 + t574 * t267 - t647, t578 * t246 + t574 * t248 - t649, -pkin(5) * t256 + t578 * t240 + t574 * t243, t309, t278, t301, t308, t302, t345, t578 * t249 + t574 * t251 - t648, t578 * t252 + t574 * t253 - t647, t578 * t241 + t574 * t242 - t649, -pkin(5) * t245 + t578 * t237 + t574 * t238; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t544, 0, -t543, 0, t523, t590, t501, pkin(5) * t501, 0, 0, t583, 0, t485, 0, -t665, t666, t390, pkin(5) * t390 - pkin(6) * t609 + t574 * t439, t574 * t465 - t578 * t467, t574 * t450 - t578 * t451, t574 * t472 - t578 * t474, t574 * t464 - t578 * t466, t574 * t471 - t578 * t473, t574 * t499 - t578 * t500, pkin(5) * t397 + t574 * t353 - t578 * t360, pkin(5) * t398 + t574 * t354 - t578 * t361, pkin(5) * t427 + t574 * t388 - t578 * t389, pkin(5) * t334 + t574 * t306 - t578 * t323, t311, t279, t303, t310, t304, t346, t574 * t257 - t578 * t264 + t290, t574 * t263 - t578 * t267 + t298, t574 * t246 - t578 * t248 + t273, pkin(5) * t255 + t574 * t240 - t578 * t243, t311, t279, t303, t310, t304, t346, t574 * t249 - t578 * t251 + t290, t574 * t252 - t578 * t253 + t298, t574 * t241 - t578 * t242 + t273, pkin(5) * t244 + t574 * t237 - t578 * t238;];
tauB_reg = t1;
