% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRPR14
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:35
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRPR14_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR14_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR14_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR14_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR14_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRPR14_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:35:44
% EndTime: 2019-12-31 18:35:46
% DurationCPUTime: 2.02s
% Computational Cost: add. (7083->215), mult. (15621->253), div. (0->0), fcn. (10314->8), ass. (0->146)
t1161 = sin(pkin(8));
t1162 = cos(pkin(8));
t1165 = sin(qJ(3));
t1168 = cos(qJ(3));
t1133 = (t1161 * t1168 + t1162 * t1165) * qJD(1);
t1131 = qJD(5) + t1133;
t1208 = qJD(5) + t1131;
t1199 = qJD(1) * t1168;
t1185 = qJD(3) * t1199;
t1189 = t1165 * qJDD(1);
t1139 = -t1185 - t1189;
t1158 = t1165 ^ 2;
t1171 = qJD(1) ^ 2;
t1166 = sin(qJ(1));
t1169 = cos(qJ(1));
t1149 = -t1169 * g(1) - t1166 * g(2);
t1174 = -qJDD(1) * qJ(2) - 0.2e1 * qJD(2) * qJD(1) - t1149;
t1176 = qJD(3) * pkin(3) - qJ(4) * t1199;
t1201 = pkin(6) + pkin(1);
t1103 = t1139 * pkin(3) + (t1158 * qJ(4) + t1201) * t1171 - t1176 * t1199 - qJDD(4) + t1174;
t1135 = (-t1161 * t1165 + t1162 * t1168) * qJD(1);
t1164 = sin(qJ(5));
t1167 = cos(qJ(5));
t1117 = -t1167 * qJD(3) + t1164 * t1135;
t1207 = t1117 ^ 2;
t1119 = t1164 * qJD(3) + t1167 * t1135;
t1206 = t1119 ^ 2;
t1205 = t1131 ^ 2;
t1204 = t1133 ^ 2;
t1203 = t1135 ^ 2;
t1202 = 2 * qJD(4);
t1200 = qJD(1) * qJD(3);
t1198 = qJD(3) * t1133;
t1197 = qJD(3) * t1135;
t1196 = t1119 * t1117;
t1195 = t1135 * t1133;
t1194 = t1158 * t1171;
t1148 = t1166 * g(1) - t1169 * g(2);
t1175 = -t1171 * qJ(2) + qJDD(2) - t1148;
t1126 = -t1201 * qJDD(1) + t1175;
t1193 = t1168 * t1126;
t1192 = t1168 * t1171;
t1191 = qJD(5) - t1131;
t1159 = t1168 ^ 2;
t1190 = t1158 + t1159;
t1188 = t1168 * qJDD(1);
t1187 = t1165 * t1200;
t1186 = t1165 * t1192;
t1116 = -t1168 * g(3) + t1165 * t1126;
t1102 = -pkin(3) * t1194 + t1139 * qJ(4) - qJD(3) * t1176 + t1116;
t1140 = -t1187 + t1188;
t1172 = qJDD(3) * pkin(3) - t1140 * qJ(4) + t1193 + (-pkin(3) * t1192 - qJ(4) * t1200 + g(3)) * t1165;
t1079 = t1162 * t1102 - t1133 * t1202 + t1161 * t1172;
t1114 = t1161 * t1139 + t1162 * t1140;
t1184 = -t1114 + t1198;
t1183 = t1161 * t1102 - t1162 * t1172;
t1182 = t1167 * qJDD(3) - t1164 * t1114;
t1181 = -t1162 * t1139 + t1161 * t1140;
t1179 = -qJDD(5) - t1181;
t1177 = -t1164 * qJDD(3) - t1167 * t1114;
t1105 = t1181 + t1197;
t1170 = qJD(3) ^ 2;
t1151 = -t1159 * t1171 - t1170;
t1150 = -t1170 - t1194;
t1147 = -qJDD(3) - t1186;
t1146 = qJDD(3) - t1186;
t1145 = t1190 * t1171;
t1144 = t1166 * qJDD(1) + t1169 * t1171;
t1143 = t1169 * qJDD(1) - t1166 * t1171;
t1142 = t1190 * qJDD(1);
t1141 = -0.2e1 * t1187 + t1188;
t1138 = 0.2e1 * t1185 + t1189;
t1132 = qJDD(1) * pkin(1) - t1175;
t1128 = t1171 * pkin(1) + t1174;
t1127 = -t1170 - t1203;
t1125 = t1201 * t1171 + t1174;
t1123 = t1168 * t1147 - t1165 * t1151;
t1122 = -t1165 * t1146 + t1168 * t1150;
t1121 = t1165 * t1147 + t1168 * t1151;
t1120 = t1168 * t1146 + t1165 * t1150;
t1115 = t1165 * g(3) + t1193;
t1113 = -qJDD(3) - t1195;
t1112 = qJDD(3) - t1195;
t1111 = -t1170 - t1204;
t1110 = t1133 * pkin(4) - t1135 * pkin(7);
t1108 = -t1114 - t1198;
t1106 = -t1181 + t1197;
t1104 = -t1203 - t1204;
t1101 = -t1205 - t1206;
t1100 = t1162 * t1113 - t1161 * t1127;
t1099 = t1161 * t1113 + t1162 * t1127;
t1097 = -t1165 * t1115 + t1168 * t1116;
t1096 = t1168 * t1115 + t1165 * t1116;
t1093 = -t1205 - t1207;
t1092 = -t1206 - t1207;
t1091 = t1162 * t1111 - t1161 * t1112;
t1090 = t1161 * t1111 + t1162 * t1112;
t1089 = t1179 - t1196;
t1088 = -t1179 - t1196;
t1087 = t1162 * t1106 - t1161 * t1108;
t1086 = t1161 * t1106 + t1162 * t1108;
t1085 = t1191 * t1117 + t1177;
t1084 = -t1208 * t1117 - t1177;
t1083 = -t1191 * t1119 + t1182;
t1082 = t1208 * t1119 - t1182;
t1081 = -t1165 * t1099 + t1168 * t1100;
t1080 = t1168 * t1099 + t1165 * t1100;
t1078 = -0.2e1 * qJD(4) * t1135 - t1183;
t1077 = t1167 * t1089 - t1164 * t1101;
t1076 = t1164 * t1089 + t1167 * t1101;
t1075 = -t1164 * t1088 + t1167 * t1093;
t1074 = t1167 * t1088 + t1164 * t1093;
t1073 = t1105 * pkin(4) + t1184 * pkin(7) - t1103;
t1072 = -t1165 * t1090 + t1168 * t1091;
t1071 = t1168 * t1090 + t1165 * t1091;
t1070 = -t1170 * pkin(4) + qJDD(3) * pkin(7) - t1133 * t1110 + t1079;
t1069 = -qJDD(3) * pkin(4) - t1170 * pkin(7) + (t1202 + t1110) * t1135 + t1183;
t1068 = -t1165 * t1086 + t1168 * t1087;
t1067 = t1168 * t1086 + t1165 * t1087;
t1066 = t1167 * t1083 - t1164 * t1085;
t1065 = t1164 * t1083 + t1167 * t1085;
t1064 = t1162 * t1077 + t1161 * t1084;
t1063 = t1161 * t1077 - t1162 * t1084;
t1062 = t1162 * t1075 + t1161 * t1082;
t1061 = t1161 * t1075 - t1162 * t1082;
t1060 = -t1161 * t1078 + t1162 * t1079;
t1059 = t1162 * t1078 + t1161 * t1079;
t1058 = t1162 * t1066 + t1161 * t1092;
t1057 = t1161 * t1066 - t1162 * t1092;
t1056 = t1167 * t1070 + t1164 * t1073;
t1055 = -t1164 * t1070 + t1167 * t1073;
t1054 = -t1165 * t1063 + t1168 * t1064;
t1053 = t1168 * t1063 + t1165 * t1064;
t1052 = -t1165 * t1061 + t1168 * t1062;
t1051 = t1168 * t1061 + t1165 * t1062;
t1050 = -t1165 * t1059 + t1168 * t1060;
t1049 = t1168 * t1059 + t1165 * t1060;
t1048 = -t1165 * t1057 + t1168 * t1058;
t1047 = t1168 * t1057 + t1165 * t1058;
t1046 = -t1164 * t1055 + t1167 * t1056;
t1045 = t1167 * t1055 + t1164 * t1056;
t1044 = t1162 * t1046 + t1161 * t1069;
t1043 = t1161 * t1046 - t1162 * t1069;
t1042 = -t1165 * t1043 + t1168 * t1044;
t1041 = t1168 * t1043 + t1165 * t1044;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1144, -t1143, 0, -t1166 * t1148 + t1169 * t1149, 0, 0, 0, 0, 0, 0, 0, t1144, t1143, -t1169 * t1128 - t1166 * t1132, 0, 0, 0, 0, 0, 0, t1166 * t1120 + t1169 * t1138, t1166 * t1121 + t1169 * t1141, -t1166 * t1142 - t1169 * t1145, t1166 * t1096 - t1169 * t1125, 0, 0, 0, 0, 0, 0, t1166 * t1071 + t1169 * t1105, t1166 * t1080 - t1169 * t1184, t1166 * t1067 + t1169 * t1104, t1166 * t1049 - t1169 * t1103, 0, 0, 0, 0, 0, 0, t1166 * t1051 + t1169 * t1074, t1166 * t1053 + t1169 * t1076, t1166 * t1047 + t1169 * t1065, t1166 * t1041 + t1169 * t1045; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1143, -t1144, 0, t1169 * t1148 + t1166 * t1149, 0, 0, 0, 0, 0, 0, 0, -t1143, t1144, -t1166 * t1128 + t1169 * t1132, 0, 0, 0, 0, 0, 0, -t1169 * t1120 + t1166 * t1138, -t1169 * t1121 + t1166 * t1141, t1169 * t1142 - t1166 * t1145, -t1169 * t1096 - t1166 * t1125, 0, 0, 0, 0, 0, 0, -t1169 * t1071 + t1166 * t1105, -t1169 * t1080 - t1166 * t1184, -t1169 * t1067 + t1166 * t1104, -t1169 * t1049 - t1166 * t1103, 0, 0, 0, 0, 0, 0, -t1169 * t1051 + t1166 * t1074, -t1169 * t1053 + t1166 * t1076, -t1169 * t1047 + t1166 * t1065, -t1169 * t1041 + t1166 * t1045; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1122, t1123, 0, t1097, 0, 0, 0, 0, 0, 0, t1072, t1081, t1068, t1050, 0, 0, 0, 0, 0, 0, t1052, t1054, t1048, t1042; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1171, -qJDD(1), 0, t1149, 0, 0, 0, 0, 0, 0, 0, t1171, qJDD(1), -t1128, 0, 0, 0, 0, 0, 0, t1138, t1141, -t1145, -t1125, 0, 0, 0, 0, 0, 0, t1105, -t1184, t1104, -t1103, 0, 0, 0, 0, 0, 0, t1074, t1076, t1065, t1045; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1171, 0, t1148, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), t1171, t1132, 0, 0, 0, 0, 0, 0, -t1120, -t1121, t1142, -t1096, 0, 0, 0, 0, 0, 0, -t1071, -t1080, -t1067, -t1049, 0, 0, 0, 0, 0, 0, -t1051, -t1053, -t1047, -t1041; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1122, t1123, 0, t1097, 0, 0, 0, 0, 0, 0, t1072, t1081, t1068, t1050, 0, 0, 0, 0, 0, 0, t1052, t1054, t1048, t1042; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1122, t1123, 0, t1097, 0, 0, 0, 0, 0, 0, t1072, t1081, t1068, t1050, 0, 0, 0, 0, 0, 0, t1052, t1054, t1048, t1042; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1171, -qJDD(1), t1128, 0, 0, 0, 0, 0, 0, -t1138, -t1141, t1145, t1125, 0, 0, 0, 0, 0, 0, -t1105, t1184, -t1104, t1103, 0, 0, 0, 0, 0, 0, -t1074, -t1076, -t1065, -t1045; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1171, -t1132, 0, 0, 0, 0, 0, 0, t1120, t1121, -t1142, t1096, 0, 0, 0, 0, 0, 0, t1071, t1080, t1067, t1049, 0, 0, 0, 0, 0, 0, t1051, t1053, t1047, t1041; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1150, t1147, -t1189, t1116, 0, 0, 0, 0, 0, 0, t1091, t1100, t1087, t1060, 0, 0, 0, 0, 0, 0, t1062, t1064, t1058, t1044; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1146, t1151, -t1188, t1115, 0, 0, 0, 0, 0, 0, t1090, t1099, t1086, t1059, 0, 0, 0, 0, 0, 0, t1061, t1063, t1057, t1043; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1138, t1141, -t1145, -t1125, 0, 0, 0, 0, 0, 0, t1105, -t1184, t1104, -t1103, 0, 0, 0, 0, 0, 0, t1074, t1076, t1065, t1045; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1111, t1113, t1106, t1079, 0, 0, 0, 0, 0, 0, t1075, t1077, t1066, t1046; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1112, t1127, t1108, t1078, 0, 0, 0, 0, 0, 0, -t1082, -t1084, -t1092, -t1069; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1105, -t1184, t1104, -t1103, 0, 0, 0, 0, 0, 0, t1074, t1076, t1065, t1045; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1093, t1089, t1083, t1056; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1088, t1101, t1085, t1055; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1082, t1084, t1092, t1069;];
f_new_reg = t1;
