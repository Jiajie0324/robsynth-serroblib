% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S5RRRRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d4,d5]';
% 
% Output:
% tauJ_reg [5x(5*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:37
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S5RRRRR10_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR10_invdynJ_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR10_invdynJ_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR10_invdynJ_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR10_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5RRRRR10_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:36:05
% EndTime: 2019-12-31 22:36:26
% DurationCPUTime: 9.28s
% Computational Cost: add. (58344->536), mult. (125780->784), div. (0->0), fcn. (101173->12), ass. (0->344)
t288 = sin(qJ(5));
t287 = cos(pkin(5));
t281 = qJD(1) * t287 + qJD(2);
t290 = sin(qJ(3));
t294 = cos(qJ(3));
t286 = sin(pkin(5));
t291 = sin(qJ(2));
t352 = qJD(1) * t291;
t336 = t286 * t352;
t254 = t281 * t294 - t290 * t336;
t255 = t281 * t290 + t294 * t336;
t289 = sin(qJ(4));
t293 = cos(qJ(4));
t235 = t254 * t289 + t255 * t293;
t295 = cos(qJ(2));
t353 = qJD(1) * t286;
t333 = qJD(2) * t353;
t347 = qJDD(1) * t286;
t261 = t291 * t347 + t295 * t333;
t280 = qJDD(1) * t287 + qJDD(2);
t320 = -t261 * t294 - t290 * t280;
t225 = qJD(3) * t254 - t320;
t328 = t261 * t290 - t294 * t280;
t313 = -qJD(3) * t255 - t328;
t330 = t289 * t225 - t293 * t313;
t174 = -t235 * qJD(4) - t330;
t173 = qJDD(5) - t174;
t292 = cos(qJ(5));
t335 = t295 * t353;
t273 = -qJD(3) + t335;
t315 = -qJD(4) + t273;
t212 = t235 * t288 + t292 * t315;
t214 = t292 * t235 - t288 * t315;
t178 = t214 * t212;
t393 = t173 - t178;
t401 = t288 * t393;
t233 = -t293 * t254 + t255 * t289;
t196 = t235 * t233;
t262 = -t291 * t333 + t295 * t347;
t314 = -qJDD(3) + t262;
t256 = -qJDD(4) + t314;
t392 = -t196 - t256;
t400 = t289 * t392;
t399 = t292 * t393;
t398 = t293 * t392;
t175 = -t233 * qJD(4) + t293 * t225 + t289 * t313;
t221 = t233 * t315;
t397 = t221 + t175;
t311 = t315 ^ 2;
t192 = pkin(4) * t233 - pkin(10) * t235;
t387 = sin(qJ(1));
t388 = cos(qJ(1));
t309 = t387 * g(1) - t388 * g(2);
t296 = qJD(1) ^ 2;
t359 = t286 * t296;
t302 = qJDD(1) * pkin(1) + pkin(7) * t359 + t309;
t354 = qJD(1) * t281;
t381 = t287 * g(3);
t383 = t261 * pkin(8);
t298 = -t262 * pkin(2) - t383 - t381 + ((pkin(2) * t291 - pkin(8) * t295) * t354 - t302) * t286;
t310 = t388 * g(1) + t387 * g(2);
t257 = -t296 * pkin(1) + pkin(7) * t347 - t310;
t301 = t287 * t302;
t361 = t286 * t291;
t300 = -g(3) * t361 + t291 * t301;
t325 = -pkin(2) * t295 - pkin(8) * t291;
t260 = t325 * t353;
t334 = t260 * t353;
t382 = t280 * pkin(8);
t390 = t281 ^ 2;
t299 = t382 - t390 * pkin(2) + (t257 + t334) * t295 + t300;
t163 = t290 * t298 + t294 * t299;
t238 = -pkin(3) * t273 - pkin(9) * t255;
t252 = t254 ^ 2;
t133 = -t252 * pkin(3) + pkin(9) * t313 + t273 * t238 + t163;
t162 = t290 * t299 - t294 * t298;
t244 = t254 * t273;
t206 = t225 + t244;
t365 = t254 * t255;
t303 = -t314 + t365;
t297 = t303 * pkin(3) - t206 * pkin(9) - t162;
t82 = t293 * t133 + t289 * t297;
t66 = -pkin(4) * t311 - t256 * pkin(10) - t233 * t192 + t82;
t329 = t291 * t257 - t295 * t301;
t199 = -t280 * pkin(2) - t390 * pkin(8) + (t295 * g(3) + t260 * t352) * t286 + t329;
t150 = -t313 * pkin(3) - t252 * pkin(9) + t255 * t238 + t199;
t308 = t315 * t235;
t79 = -t397 * pkin(10) + (-t174 - t308) * pkin(4) + t150;
t43 = t288 * t66 - t292 * t79;
t44 = t288 * t79 + t292 * t66;
t22 = t288 * t43 + t292 * t44;
t283 = t286 ^ 2;
t396 = t283 * (-t287 * t296 + t354);
t395 = t290 * t303;
t394 = t294 * t303;
t265 = t281 * t336;
t243 = t262 - t265;
t360 = t286 * t295;
t227 = g(3) * t360 + t329;
t228 = t295 * t257 + t300;
t391 = t291 * t227 + t295 * t228;
t230 = qJD(5) + t233;
t331 = t175 * t288 + t292 * t256;
t124 = (qJD(5) - t230) * t214 + t331;
t202 = (qJD(3) + t273) * t255 + t328;
t210 = t212 ^ 2;
t211 = t214 ^ 2;
t229 = t230 ^ 2;
t231 = t233 ^ 2;
t232 = t235 ^ 2;
t253 = t255 ^ 2;
t270 = t273 ^ 2;
t81 = t133 * t289 - t293 * t297;
t46 = t289 * t82 - t293 * t81;
t389 = pkin(3) * t46;
t152 = t273 * t235 + t330;
t155 = -t221 + t175;
t102 = -t152 * t289 - t155 * t293;
t386 = pkin(3) * t102;
t385 = pkin(4) * t289;
t384 = pkin(7) * t286;
t65 = t256 * pkin(4) - pkin(10) * t311 + t192 * t235 + t81;
t380 = -pkin(4) * t65 + pkin(10) * t22;
t62 = t288 * t65;
t379 = t290 * t46;
t63 = t292 * t65;
t378 = t294 * t46;
t136 = t173 + t178;
t377 = t136 * t288;
t376 = t136 * t292;
t375 = t150 * t289;
t374 = t150 * t293;
t185 = -t196 + t256;
t373 = t185 * t289;
t372 = t185 * t293;
t371 = t199 * t290;
t370 = t199 * t294;
t218 = t314 + t365;
t369 = t218 * t290;
t368 = t218 * t294;
t367 = t230 * t288;
t366 = t230 * t292;
t364 = t273 * t290;
t363 = t273 * t294;
t362 = t283 * t296;
t272 = t295 * t291 * t362;
t259 = t272 + t280;
t357 = t291 * t259;
t258 = -t272 + t280;
t355 = t295 * t258;
t351 = -qJD(3) + t273;
t348 = qJD(5) + t230;
t321 = -t175 * t292 + t256 * t288;
t129 = t348 * t212 + t321;
t172 = -t211 - t229;
t97 = -t172 * t288 - t376;
t346 = pkin(4) * t129 + pkin(10) * t97 + t62;
t125 = -t348 * t214 - t331;
t168 = -t229 - t210;
t92 = t168 * t292 - t401;
t345 = pkin(4) * t125 + pkin(10) * t92 - t63;
t344 = t289 * t178;
t343 = t293 * t178;
t284 = t291 ^ 2;
t342 = t284 * t362;
t285 = t295 ^ 2;
t341 = t285 * t362;
t340 = t295 * t196;
t339 = t295 * t365;
t266 = t281 * t335;
t338 = t266 + t261;
t337 = -pkin(4) * t293 - pkin(3);
t47 = t289 * t81 + t293 * t82;
t158 = t210 + t211;
t140 = -qJD(5) * t212 - t321;
t188 = t230 * t212;
t128 = t140 + t188;
t76 = -t124 * t292 + t128 * t288;
t332 = pkin(4) * t158 + pkin(10) * t76 + t22;
t115 = t162 * t290 + t294 * t163;
t17 = t22 * t289 - t293 * t65;
t327 = pkin(3) * t17 + t380;
t208 = -t232 - t311;
t160 = t208 * t293 + t373;
t326 = pkin(3) * t160 - t82;
t21 = t288 * t44 - t292 * t43;
t58 = t125 * t293 + t289 * t92;
t324 = pkin(3) * t58 + t345;
t60 = t129 * t293 + t289 * t97;
t323 = pkin(3) * t60 + t346;
t322 = t162 * t294 - t163 * t290;
t318 = -pkin(1) + t325;
t51 = t158 * t293 + t289 * t76;
t317 = pkin(3) * t51 + t332;
t189 = -t311 - t231;
t144 = t189 * t289 + t398;
t316 = pkin(3) * t144 - t81;
t312 = qJD(5) * t214 + t331;
t307 = t289 * t221;
t306 = t289 * t308;
t305 = t293 * t221;
t304 = t293 * t308;
t245 = t286 * t302 + t381;
t264 = (t284 - t285) * t362;
t263 = -t341 - t390;
t249 = -t342 - t390;
t242 = t262 + t265;
t241 = -t266 + t261;
t240 = -t253 + t270;
t239 = t252 - t270;
t237 = -t253 - t270;
t236 = t253 - t252;
t226 = -t270 - t252;
t217 = -t232 + t311;
t216 = t231 - t311;
t215 = t252 + t253;
t209 = (-t254 * t290 + t255 * t294) * t273;
t207 = t351 * t254 + t320;
t205 = t225 - t244;
t203 = t351 * t255 - t328;
t201 = t225 * t290 - t255 * t363;
t200 = t254 * t364 + t294 * t313;
t195 = t232 - t231;
t194 = t239 * t290 - t368;
t193 = t240 * t294 + t395;
t191 = -t237 * t290 + t368;
t190 = t237 * t294 + t369;
t184 = -t211 + t229;
t183 = t210 - t229;
t182 = t226 * t294 - t395;
t181 = t226 * t290 + t394;
t180 = t305 - t306;
t179 = t307 + t304;
t177 = t211 - t210;
t176 = -t231 - t232;
t171 = -t202 * t294 + t206 * t290;
t169 = t203 * t290 + t205 * t294;
t167 = t216 * t293 + t373;
t166 = -t217 * t289 + t398;
t165 = t216 * t289 - t372;
t164 = t217 * t293 + t400;
t161 = -t208 * t289 + t372;
t151 = (0.2e1 * qJD(4) - t273) * t235 + t330;
t149 = t293 * t175 + t306;
t148 = t289 * t175 - t304;
t147 = -t289 * t174 - t305;
t146 = t293 * t174 - t307;
t145 = t189 * t293 - t400;
t143 = (-t212 * t292 + t214 * t288) * t230;
t142 = (-t212 * t288 - t214 * t292) * t230;
t141 = t179 * t294 + t180 * t290;
t138 = pkin(2) * t207 + pkin(8) * t191 + t371;
t134 = pkin(2) * t203 + pkin(8) * t182 - t370;
t127 = t140 - t188;
t123 = t165 * t294 + t167 * t290;
t122 = t164 * t294 + t166 * t290;
t119 = t140 * t292 - t214 * t367;
t118 = t140 * t288 + t214 * t366;
t117 = t212 * t366 + t288 * t312;
t116 = -t212 * t367 + t292 * t312;
t113 = -t160 * t290 + t161 * t294;
t112 = t160 * t294 + t161 * t290;
t111 = t143 * t293 + t173 * t289;
t110 = t143 * t289 - t173 * t293;
t109 = t183 * t292 - t377;
t108 = -t184 * t288 + t399;
t107 = t183 * t288 + t376;
t106 = t184 * t292 + t401;
t105 = -pkin(9) * t160 + t374;
t104 = -t152 * t293 + t155 * t289;
t103 = -t151 * t293 - t289 * t397;
t101 = -t151 * t289 + t293 * t397;
t100 = -pkin(9) * t144 + t375;
t99 = t148 * t294 + t149 * t290;
t98 = t146 * t294 + t147 * t290;
t96 = t172 * t292 - t377;
t95 = -t144 * t290 + t145 * t294;
t94 = t144 * t294 + t145 * t290;
t91 = t168 * t288 + t399;
t90 = -pkin(2) * t199 + pkin(8) * t115;
t88 = t119 * t293 + t344;
t87 = t117 * t293 - t344;
t86 = t119 * t289 - t343;
t85 = t117 * t289 + t343;
t84 = pkin(2) * t215 + pkin(8) * t171 + t115;
t83 = -pkin(3) * t397 + pkin(9) * t161 + t375;
t77 = -pkin(3) * t151 + pkin(9) * t145 - t374;
t75 = t125 * t292 - t127 * t288;
t74 = -t124 * t288 - t128 * t292;
t73 = t125 * t288 + t127 * t292;
t71 = t109 * t293 - t124 * t289;
t70 = t108 * t293 + t128 * t289;
t69 = t109 * t289 + t124 * t293;
t68 = t108 * t289 - t128 * t293;
t67 = t110 * t294 + t111 * t290;
t61 = -t129 * t289 + t293 * t97;
t59 = -t125 * t289 + t293 * t92;
t57 = t177 * t289 + t293 * t75;
t56 = -t177 * t293 + t289 * t75;
t55 = -t102 * t290 + t104 * t294;
t54 = t102 * t294 + t104 * t290;
t53 = t101 * t294 + t103 * t290;
t52 = -t158 * t289 + t293 * t76;
t50 = t290 * t88 + t294 * t86;
t49 = t290 * t87 + t294 * t85;
t48 = -pkin(10) * t96 + t63;
t45 = -pkin(10) * t91 + t62;
t40 = -pkin(3) * t150 + pkin(9) * t47;
t39 = t290 * t71 + t294 * t69;
t38 = t290 * t70 + t294 * t68;
t37 = -pkin(2) * t397 + pkin(8) * t113 + t105 * t290 + t294 * t83;
t36 = -t290 * t60 + t294 * t61;
t35 = t290 * t61 + t294 * t60;
t34 = -t290 * t58 + t294 * t59;
t33 = t290 * t59 + t294 * t58;
t32 = -pkin(9) * t102 - t46;
t31 = t290 * t57 + t294 * t56;
t30 = -pkin(2) * t151 + pkin(8) * t95 + t100 * t290 + t294 * t77;
t29 = -t290 * t51 + t294 * t52;
t28 = t290 * t52 + t294 * t51;
t27 = -pkin(3) * t176 + pkin(9) * t104 + t47;
t26 = -pkin(4) * t96 + t44;
t25 = -pkin(4) * t91 + t43;
t24 = t294 * t47 - t379;
t23 = t290 * t47 + t378;
t19 = -pkin(10) * t74 - t21;
t18 = t22 * t293 + t289 * t65;
t16 = -pkin(9) * t60 - t26 * t289 + t293 * t48;
t15 = -pkin(9) * t58 - t25 * t289 + t293 * t45;
t14 = -pkin(3) * t96 + pkin(9) * t61 + t26 * t293 + t289 * t48;
t13 = -pkin(3) * t91 + pkin(9) * t59 + t25 * t293 + t289 * t45;
t12 = -pkin(2) * t176 + pkin(8) * t55 + t27 * t294 + t290 * t32;
t11 = -pkin(9) * t51 + t19 * t293 + t74 * t385;
t10 = -pkin(2) * t150 + pkin(8) * t24 - pkin(9) * t379 + t294 * t40;
t9 = pkin(9) * t52 + t19 * t289 + t337 * t74;
t8 = -t17 * t290 + t18 * t294;
t7 = t17 * t294 + t18 * t290;
t6 = -pkin(9) * t17 + (-pkin(10) * t293 + t385) * t21;
t5 = -pkin(2) * t96 + pkin(8) * t36 + t14 * t294 + t16 * t290;
t4 = -pkin(2) * t91 + pkin(8) * t34 + t13 * t294 + t15 * t290;
t3 = pkin(9) * t18 + (-pkin(10) * t289 + t337) * t21;
t2 = -pkin(2) * t74 + pkin(8) * t29 + t11 * t290 + t294 * t9;
t1 = -pkin(2) * t21 + pkin(8) * t8 + t290 * t6 + t294 * t3;
t20 = [0, 0, 0, 0, 0, qJDD(1), t309, t310, 0, 0, (t261 * t286 + t295 * t396) * t291, t287 * t264 + (t291 * t243 + t295 * t338) * t286, t287 * t241 + (t357 + t295 * (-t342 + t390)) * t286, (t262 * t286 - t291 * t396) * t295, t287 * t242 + (t291 * (t341 - t390) + t355) * t286, t287 * t280, (-t227 + pkin(1) * (t259 * t295 + t263 * t291)) * t287 + (t295 * t245 + pkin(1) * t243 + pkin(7) * (t263 * t295 - t357)) * t286, -t245 * t361 - t287 * t228 + pkin(1) * (-t286 * t338 + (t249 * t295 - t258 * t291) * t287) + (-t249 * t291 - t355) * t384, pkin(1) * ((-t241 * t295 + t242 * t291) * t287 - (-t284 - t285) * t283 * t359) + (t241 * t291 + t242 * t295) * t384 + t391 * t286, pkin(1) * (t245 * t286 + (-t227 * t295 + t228 * t291) * t287) + t391 * t384, t287 * t201 + (t291 * (t225 * t294 + t255 * t364) + t339) * t286, t287 * t169 + (t291 * (t203 * t294 - t205 * t290) - t295 * t236) * t286, t287 * t193 + (t291 * (-t240 * t290 + t394) - t295 * t206) * t286, t287 * t200 + (t291 * (t254 * t363 - t290 * t313) - t339) * t286, t287 * t194 + (t291 * (t239 * t294 + t369) + t295 * t202) * t286, t314 * t360 + t287 * t209 + (-t254 * t294 - t255 * t290) * t273 * t361, (-pkin(8) * t181 + t371) * t361 + (t290 * (t295 * t334 + t228 + t382) - t294 * (-pkin(8) * t266 - t245 - t383) + (t294 * t243 - t290 * t390 - t181) * pkin(2)) * t360 + t287 * t134 + pkin(1) * (-t181 * t286 + (t182 * t291 + t203 * t295) * t287) + (t182 * t295 - t203 * t291) * t384, (t138 + pkin(1) * (t191 * t291 + t207 * t295)) * t287 + (t291 * (-pkin(8) * t190 + t370) + t295 * (-pkin(2) * t190 + t163) - pkin(1) * t190 + pkin(7) * (t191 * t295 - t207 * t291)) * t286, (t84 + pkin(1) * (t171 * t291 + t215 * t295)) * t287 + (t291 * t322 + pkin(7) * (t171 * t295 - t215 * t291) + t318 * (-t202 * t290 - t206 * t294)) * t286, (t90 + pkin(1) * (t115 * t291 - t199 * t295)) * t287 + (pkin(7) * (t115 * t295 + t199 * t291) - t318 * t322) * t286, t287 * t99 + (t291 * (-t148 * t290 + t149 * t294) - t340) * t286, t287 * t53 + (t291 * (-t101 * t290 + t103 * t294) - t295 * t195) * t286, t287 * t122 + (t291 * (-t164 * t290 + t166 * t294) - t295 * t155) * t286, t287 * t98 + (t291 * (-t146 * t290 + t147 * t294) + t340) * t286, t287 * t123 + (t291 * (-t165 * t290 + t167 * t294) + t295 * t152) * t286, t287 * t141 + (t291 * (-t179 * t290 + t180 * t294) + t295 * t256) * t286, (t30 + pkin(1) * (-t151 * t295 + t291 * t95)) * t287 + (t291 * (-pkin(8) * t94 + t100 * t294 - t290 * t77) + t295 * (-pkin(2) * t94 - t316) - pkin(1) * t94 + pkin(7) * (t151 * t291 + t295 * t95)) * t286, (t37 + pkin(1) * (t113 * t291 - t295 * t397)) * t287 + (t291 * (-pkin(8) * t112 + t105 * t294 - t290 * t83) + t295 * (-pkin(2) * t112 - t326) - pkin(1) * t112 + pkin(7) * (t113 * t295 + t291 * t397)) * t286, (t12 + pkin(1) * (-t176 * t295 + t291 * t55)) * t287 + (t291 * (-pkin(8) * t54 - t27 * t290 + t294 * t32) + t295 * (-pkin(2) * t54 - t386) - pkin(1) * t54 + pkin(7) * (t176 * t291 + t295 * t55)) * t286, (t10 + pkin(1) * (-t150 * t295 + t24 * t291)) * t287 + (t291 * (-pkin(8) * t23 - pkin(9) * t378 - t290 * t40) + t295 * (-pkin(2) * t23 - t389) - pkin(1) * t23 + pkin(7) * (t150 * t291 + t24 * t295)) * t286, t287 * t50 + (t291 * (-t290 * t86 + t294 * t88) - t295 * t118) * t286, t287 * t31 + (t291 * (-t290 * t56 + t294 * t57) - t295 * t73) * t286, t287 * t38 + (t291 * (-t290 * t68 + t294 * t70) - t295 * t106) * t286, t287 * t49 + (t291 * (-t290 * t85 + t294 * t87) + t295 * t116) * t286, t287 * t39 + (t291 * (-t290 * t69 + t294 * t71) - t295 * t107) * t286, t287 * t67 + (t291 * (-t110 * t290 + t111 * t294) - t295 * t142) * t286, (t4 + pkin(1) * (t291 * t34 - t295 * t91)) * t287 + (t291 * (-pkin(8) * t33 - t13 * t290 + t15 * t294) + t295 * (-pkin(2) * t33 - t324) - pkin(1) * t33 + pkin(7) * (t291 * t91 + t295 * t34)) * t286, (t5 + pkin(1) * (t291 * t36 - t295 * t96)) * t287 + (t291 * (-pkin(8) * t35 - t14 * t290 + t16 * t294) + t295 * (-pkin(2) * t35 - t323) - pkin(1) * t35 + pkin(7) * (t291 * t96 + t295 * t36)) * t286, (t2 + pkin(1) * (t29 * t291 - t295 * t74)) * t287 + (t291 * (-pkin(8) * t28 + t11 * t294 - t290 * t9) + t295 * (-pkin(2) * t28 - t317) - pkin(1) * t28 + pkin(7) * (t29 * t295 + t291 * t74)) * t286, (t1 + pkin(1) * (-t21 * t295 + t291 * t8)) * t287 + (t291 * (-pkin(8) * t7 - t290 * t3 + t294 * t6) + t295 * (-pkin(2) * t7 - t327) - pkin(1) * t7 + pkin(7) * (t21 * t291 + t295 * t8)) * t286; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t272, t264, t241, t272, t242, t280, -t227, -t228, 0, 0, t201, t169, t193, t200, t194, t209, t134, t138, t84, t90, t99, t53, t122, t98, t123, t141, t30, t37, t12, t10, t50, t31, t38, t49, t39, t67, t4, t5, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t365, t236, t206, t365, -t202, -t314, -t162, -t163, 0, 0, t196, t195, t155, -t196, -t152, -t256, t316, t326, t386, t389, t118, t73, t106, -t116, t107, t142, t324, t323, t317, t327; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t196, t195, t155, -t196, -t152, -t256, -t81, -t82, 0, 0, t118, t73, t106, -t116, t107, t142, t345, t346, t332, t380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t178, t177, t128, -t178, -t124, t173, -t43, -t44, 0, 0;];
tauJ_reg = t20;
