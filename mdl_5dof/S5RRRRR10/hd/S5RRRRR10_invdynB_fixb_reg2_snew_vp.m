% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d4,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:37
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRRR10_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR10_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR10_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR10_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR10_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5RRRRR10_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:36:26
% EndTime: 2019-12-31 22:37:06
% DurationCPUTime: 30.82s
% Computational Cost: add. (218223->815), mult. (470876->1323), div. (0->0), fcn. (378940->12), ass. (0->597)
t905 = cos(qJ(2));
t900 = sin(qJ(2));
t1003 = qJD(1) * t900;
t895 = sin(pkin(5));
t985 = t895 * t1003;
t998 = qJDD(1) * t895;
t859 = -qJD(2) * t985 + t905 * t998;
t896 = cos(pkin(5));
t887 = qJD(1) * t896 + qJD(2);
t866 = t887 * t985;
t835 = t859 - t866;
t1060 = t896 * t835;
t899 = sin(qJ(3));
t904 = cos(qJ(3));
t850 = t887 * t904 - t899 * t985;
t851 = t887 * t899 + t904 * t985;
t898 = sin(qJ(4));
t903 = cos(qJ(4));
t817 = -t903 * t850 + t851 * t898;
t1002 = qJD(1) * t905;
t984 = t895 * t1002;
t880 = -qJD(3) + t984;
t871 = -qJD(4) + t880;
t802 = t817 * t871;
t997 = qJDD(1) * t900;
t858 = (qJD(2) * t1002 + t997) * t895;
t979 = qJDD(1) * t896 + qJDD(2);
t980 = t899 * t858 - t904 * t979;
t806 = -qJD(3) * t851 - t980;
t807 = t850 * qJD(3) + t904 * t858 + t899 * t979;
t920 = qJD(4) * t817 - t806 * t898 - t807 * t903;
t1059 = t920 - t802;
t819 = t850 * t898 + t851 * t903;
t897 = sin(qJ(5));
t902 = cos(qJ(5));
t793 = t819 * t897 + t902 * t871;
t795 = t819 * t902 - t871 * t897;
t739 = t795 * t793;
t982 = -t903 * t806 + t898 * t807;
t729 = -qJD(4) * t819 - t982;
t922 = qJDD(5) - t729;
t1052 = -t739 + t922;
t1058 = t1052 * t897;
t1057 = t1052 * t902;
t1023 = t817 * t819;
t934 = -qJDD(3) + t859;
t853 = -qJDD(4) + t934;
t915 = -t853 - t1023;
t1056 = t898 * t915;
t1022 = t850 * t851;
t918 = -t934 + t1022;
t1055 = t899 * t918;
t1054 = t903 * t915;
t1053 = t904 * t918;
t836 = t850 * t880;
t780 = -t836 - t807;
t778 = -t836 + t807;
t867 = t887 * t984;
t832 = t867 + t858;
t814 = qJD(5) + t817;
t751 = t814 * t793;
t988 = t793 * qJD(5) + t897 * t853 + t902 * t920;
t650 = t988 + t751;
t790 = (-t850 * t904 - t851 * t899) * t880;
t1050 = t900 * t790 + t905 * t934;
t983 = t902 * t853 - t897 * t920;
t645 = (qJD(5) - t814) * t795 + t983;
t694 = (qJD(4) + t871) * t819 + t982;
t775 = (qJD(3) + t880) * t851 + t980;
t791 = t793 ^ 2;
t792 = t795 ^ 2;
t813 = t814 ^ 2;
t815 = t817 ^ 2;
t816 = t819 ^ 2;
t1049 = t850 ^ 2;
t849 = t851 ^ 2;
t1048 = t871 ^ 2;
t875 = t880 ^ 2;
t1047 = t887 ^ 2;
t1046 = pkin(2) * t900;
t1045 = pkin(2) * t905;
t1044 = pkin(4) * t898;
t1043 = pkin(7) * t895;
t1042 = g(3) * t905;
t1041 = t858 * pkin(8);
t1040 = t896 * g(3);
t1004 = qJD(1) * t895;
t901 = sin(qJ(1));
t906 = cos(qJ(1));
t883 = g(1) * t906 + g(2) * t901;
t907 = qJD(1) ^ 2;
t854 = -pkin(1) * t907 + pkin(7) * t998 - t883;
t978 = -pkin(8) * t900 - t1045;
t857 = t978 * t1004;
t882 = t901 * g(1) - t906 * g(2);
t916 = qJDD(1) * pkin(1) + t907 * t1043 + t882;
t914 = t896 * t916;
t913 = (-g(3) * t895 + t914) * t900;
t912 = pkin(8) * t979 + t913;
t910 = -t1047 * pkin(2) + (t1004 * t857 + t854) * t905 + t912;
t1005 = qJD(1) * t887;
t977 = -pkin(8) * t905 + t1046;
t911 = -t859 * pkin(2) - t1041 - t1040 + (t1005 * t977 - t916) * t895;
t711 = t899 * t911 + t904 * t910;
t828 = -pkin(3) * t880 - pkin(9) * t851;
t659 = -pkin(3) * t1049 + pkin(9) * t806 + t828 * t880 + t711;
t710 = t899 * t910 - t904 * t911;
t909 = t918 * pkin(3) + t780 * pkin(9) - t710;
t587 = t659 * t898 - t903 * t909;
t588 = t903 * t659 + t898 * t909;
t531 = -t587 * t903 + t588 * t898;
t1039 = t531 * t899;
t1038 = t531 * t904;
t756 = pkin(4) * t817 - pkin(10) * t819;
t567 = t853 * pkin(4) - t1048 * pkin(10) + t756 * t819 + t587;
t1037 = t567 * t897;
t1036 = t567 * t902;
t667 = t739 + t922;
t1035 = t667 * t897;
t1034 = t667 * t902;
t981 = t900 * t854 - t905 * t914;
t767 = -t979 * pkin(2) - t1047 * pkin(8) + (t1003 * t857 + t1042) * t895 + t981;
t692 = -t806 * pkin(3) - t1049 * pkin(9) + t851 * t828 + t767;
t1033 = t692 * t898;
t1032 = t692 * t903;
t748 = t853 - t1023;
t1031 = t748 * t898;
t1030 = t748 * t903;
t1029 = t767 * t899;
t1028 = t767 * t904;
t799 = t934 + t1022;
t1027 = t799 * t899;
t1026 = t799 * t904;
t1025 = t814 * t897;
t1024 = t814 * t902;
t1007 = t905 * t907;
t892 = t895 ^ 2;
t1013 = t892 * t900;
t879 = t1007 * t1013;
t855 = -t879 + t979;
t1021 = t855 * t900;
t1020 = t855 * t905;
t856 = t879 + t979;
t1019 = t856 * t900;
t1018 = t856 * t905;
t1017 = t871 * t898;
t1016 = t871 * t903;
t1015 = t880 * t899;
t1014 = t880 * t904;
t1012 = t892 * t907;
t838 = t895 * t916 + t1040;
t1010 = t900 * t838;
t1009 = t905 * t838;
t1008 = t905 * t854;
t568 = -pkin(4) * t1048 - pkin(10) * t853 - t756 * t817 + t588;
t585 = t1059 * pkin(10) + (-t819 * t871 - t729) * pkin(4) + t692;
t520 = t902 * t568 + t897 * t585;
t893 = t900 ^ 2;
t894 = t905 ^ 2;
t1006 = t893 + t894;
t996 = t898 * t739;
t995 = t903 * t739;
t994 = t900 * t1023;
t993 = t905 * t1023;
t992 = t900 * t1022;
t991 = t905 * t1022;
t990 = t893 * t1012;
t989 = t894 * t1012;
t987 = -pkin(4) * t903 - pkin(3);
t986 = t887 * t1004;
t519 = t568 * t897 - t902 * t585;
t532 = t587 * t898 + t903 * t588;
t636 = t710 * t899 + t904 * t711;
t840 = -t882 * t901 - t906 * t883;
t877 = qJDD(1) * t906 - t901 * t907;
t976 = -pkin(6) * t877 - g(3) * t901;
t846 = -t990 - t1047;
t820 = -t846 * t900 - t1020;
t975 = pkin(7) * t820 - t1010;
t863 = -t989 - t1047;
t825 = t863 * t905 - t1019;
t974 = pkin(7) * t825 + t1009;
t475 = t519 * t897 + t520 * t902;
t467 = t475 * t898 - t567 * t903;
t468 = t475 * t903 + t567 * t898;
t433 = -t467 * t899 + t468 * t904;
t474 = -t519 * t902 + t520 * t897;
t973 = t433 * t900 - t474 * t905;
t480 = t532 * t904 - t1039;
t972 = t480 * t900 - t692 * t905;
t649 = -t751 + t988;
t578 = -t645 * t902 - t649 * t897;
t705 = t791 + t792;
t552 = t578 * t898 + t705 * t903;
t553 = t578 * t903 - t705 * t898;
t497 = -t552 * t899 + t553 * t904;
t576 = -t645 * t897 + t649 * t902;
t971 = t497 * t900 - t576 * t905;
t646 = (-qJD(5) - t814) * t795 - t983;
t577 = t646 * t902 + t650 * t897;
t738 = -t792 + t791;
t558 = t577 * t898 + t738 * t903;
t559 = t577 * t903 - t738 * t898;
t503 = -t558 * t899 + t559 * t904;
t575 = -t646 * t897 + t650 * t902;
t970 = t503 * t900 + t575 * t905;
t718 = -t813 - t791;
t609 = t718 * t902 - t1058;
t562 = t609 * t898 + t646 * t903;
t563 = t609 * t903 - t646 * t898;
t506 = -t562 * t899 + t563 * t904;
t608 = t718 * t897 + t1057;
t969 = t506 * t900 - t608 * t905;
t727 = -t792 - t813;
t613 = -t727 * t897 - t1034;
t564 = t613 * t898 + t650 * t903;
t565 = t613 * t903 - t650 * t898;
t508 = -t564 * t899 + t565 * t904;
t612 = t727 * t902 - t1035;
t968 = t508 * t900 - t612 * t905;
t747 = -t792 + t813;
t628 = -t747 * t897 + t1057;
t571 = t628 * t898 + t649 * t903;
t573 = t628 * t903 - t649 * t898;
t516 = -t571 * t899 + t573 * t904;
t626 = -t747 * t902 - t1058;
t967 = t516 * t900 + t626 * t905;
t746 = t791 - t813;
t629 = t746 * t902 - t1035;
t572 = t629 * t898 + t645 * t903;
t574 = t629 * t903 - t645 * t898;
t517 = -t572 * t899 + t574 * t904;
t627 = -t746 * t897 - t1034;
t966 = t517 * t900 + t627 * t905;
t675 = -qJD(5) * t795 - t983;
t638 = t793 * t1024 - t675 * t897;
t602 = t638 * t898 + t995;
t604 = t638 * t903 - t996;
t545 = -t602 * t899 + t604 * t904;
t637 = -t793 * t1025 - t675 * t902;
t965 = t545 * t900 + t637 * t905;
t640 = -t795 * t1025 - t902 * t988;
t603 = t640 * t898 - t995;
t605 = t640 * t903 + t996;
t546 = -t603 * t899 + t605 * t904;
t639 = -t795 * t1024 + t897 * t988;
t964 = t546 * t900 + t639 * t905;
t693 = (qJD(4) - t871) * t819 + t982;
t619 = -t1059 * t903 - t693 * t898;
t621 = t1059 * t898 - t693 * t903;
t556 = -t619 * t899 + t621 * t904;
t761 = -t816 + t815;
t963 = t556 * t900 + t761 * t905;
t698 = t802 + t920;
t620 = -t694 * t898 + t698 * t903;
t622 = -t694 * t903 - t698 * t898;
t557 = -t620 * t899 + t622 * t904;
t731 = -t815 - t816;
t962 = t557 * t900 - t731 * t905;
t683 = (-t793 * t902 + t795 * t897) * t814;
t630 = t683 * t898 - t903 * t922;
t631 = t683 * t903 + t898 * t922;
t570 = -t630 * t899 + t631 * t904;
t682 = (t793 * t897 + t795 * t902) * t814;
t961 = t570 * t900 + t682 * t905;
t753 = -t1048 - t815;
t684 = t753 * t898 + t1054;
t685 = t753 * t903 - t1056;
t611 = -t684 * t899 + t685 * t904;
t960 = t611 * t900 - t693 * t905;
t785 = -t816 - t1048;
t708 = t785 * t903 + t1031;
t709 = -t785 * t898 + t1030;
t634 = -t708 * t899 + t709 * t904;
t959 = t1059 * t905 + t634 * t900;
t958 = t636 * t900 - t767 * t905;
t798 = -t816 + t1048;
t714 = t798 * t903 + t1056;
t716 = -t798 * t898 + t1054;
t643 = -t714 * t899 + t716 * t904;
t957 = t643 * t900 + t698 * t905;
t797 = t815 - t1048;
t715 = t797 * t898 - t1030;
t717 = t797 * t903 + t1031;
t644 = -t715 * t899 + t717 * t904;
t956 = t644 * t900 + t694 * t905;
t742 = (t817 * t898 + t819 * t903) * t871;
t743 = (t817 * t903 - t819 * t898) * t871;
t678 = -t742 * t899 + t743 * t904;
t955 = t678 * t900 + t853 * t905;
t635 = -t710 * t904 + t711 * t899;
t776 = (-qJD(3) + t880) * t851 - t980;
t721 = t776 * t904 - t778 * t899;
t821 = -t849 + t1049;
t954 = t721 * t900 + t821 * t905;
t722 = -t775 * t904 - t780 * t899;
t796 = t849 + t1049;
t953 = t722 * t900 + t796 * t905;
t810 = -t875 - t1049;
t745 = t810 * t904 - t1055;
t952 = t745 * t900 + t776 * t905;
t822 = -t849 - t875;
t755 = -t822 * t899 + t1026;
t951 = t755 * t900 - t778 * t905;
t830 = -t849 + t875;
t759 = -t830 * t899 + t1053;
t950 = t759 * t900 + t780 * t905;
t829 = -t875 + t1049;
t760 = t829 * t904 + t1027;
t949 = t760 * t900 + t775 * t905;
t811 = t895 * t1042 + t981;
t812 = t913 + t1008;
t948 = -t905 * t811 + t900 * t812;
t752 = t811 * t900 + t812 * t905;
t947 = t832 * t905 + t835 * t900;
t833 = -t867 + t858;
t834 = t859 + t866;
t946 = -t833 * t905 + t834 * t900;
t945 = t846 * t905 - t1021;
t862 = t989 - t1047;
t944 = t862 * t900 + t1020;
t861 = -t990 + t1047;
t943 = t861 * t905 + t1019;
t942 = t863 * t900 + t1018;
t839 = t882 * t906 - t883 * t901;
t941 = -t896 * t907 + t1005;
t940 = t895 * t979;
t686 = -t1017 * t817 + t729 * t903;
t687 = -t1016 * t817 - t729 * t898;
t616 = -t686 * t899 + t687 * t904;
t938 = t616 * t900 + t993;
t688 = -t1016 * t819 - t898 * t920;
t689 = t1017 * t819 - t903 * t920;
t617 = -t688 * t899 + t689 * t904;
t937 = t617 * t900 - t993;
t770 = t1014 * t850 - t806 * t899;
t936 = t770 * t900 - t991;
t772 = t1015 * t851 + t807 * t904;
t935 = t772 * t900 + t991;
t422 = pkin(9) * t468 + (-pkin(10) * t898 + t987) * t474;
t428 = -pkin(9) * t467 + (-pkin(10) * t903 + t1044) * t474;
t432 = t467 * t904 + t468 * t899;
t408 = -pkin(8) * t432 - t422 * t899 + t428 * t904;
t418 = -pkin(2) * t432 - pkin(3) * t467 + pkin(4) * t567 - pkin(10) * t475;
t425 = t433 * t905 + t474 * t900;
t933 = pkin(7) * t425 + t408 * t900 + t418 * t905;
t469 = -pkin(10) * t576 - t474;
t438 = pkin(9) * t553 + t898 * t469 + t576 * t987;
t448 = -pkin(9) * t552 + t576 * t1044 + t469 * t903;
t496 = t552 * t904 + t553 * t899;
t421 = -pkin(8) * t496 - t438 * t899 + t448 * t904;
t436 = -pkin(2) * t496 - pkin(3) * t552 - pkin(4) * t705 - pkin(10) * t578 - t475;
t477 = t497 * t905 + t576 * t900;
t932 = pkin(7) * t477 + t421 * t900 + t436 * t905;
t490 = -pkin(4) * t608 + t519;
t530 = -pkin(10) * t608 + t1037;
t452 = -pkin(3) * t608 + pkin(9) * t563 + t490 * t903 + t530 * t898;
t460 = -pkin(9) * t562 - t490 * t898 + t530 * t903;
t505 = t562 * t904 + t563 * t899;
t426 = -pkin(8) * t505 - t452 * t899 + t460 * t904;
t458 = -pkin(2) * t505 - pkin(3) * t562 - pkin(4) * t646 - pkin(10) * t609 + t1036;
t485 = t506 * t905 + t608 * t900;
t931 = pkin(7) * t485 + t426 * t900 + t458 * t905;
t491 = -pkin(4) * t612 + t520;
t533 = -pkin(10) * t612 + t1036;
t453 = -pkin(3) * t612 + pkin(9) * t565 + t491 * t903 + t533 * t898;
t461 = -pkin(9) * t564 - t491 * t898 + t533 * t903;
t507 = t564 * t904 + t565 * t899;
t427 = -pkin(8) * t507 - t453 * t899 + t461 * t904;
t459 = -pkin(2) * t507 - pkin(3) * t564 - pkin(4) * t650 - pkin(10) * t613 - t1037;
t486 = t508 * t905 + t612 * t900;
t930 = pkin(7) * t486 + t427 * t900 + t459 * t905;
t479 = t532 * t899 + t1038;
t518 = -pkin(3) * t692 + pkin(9) * t532;
t447 = -pkin(8) * t479 - pkin(9) * t1038 - t518 * t899;
t462 = -pkin(2) * t479 - pkin(3) * t531;
t476 = t480 * t905 + t692 * t900;
t929 = pkin(7) * t476 + t447 * t900 + t462 * t905;
t495 = -pkin(3) * t731 + pkin(9) * t622 + t532;
t504 = -pkin(9) * t620 - t531;
t555 = t620 * t904 + t622 * t899;
t454 = -pkin(8) * t555 - t495 * t899 + t504 * t904;
t527 = -pkin(2) * t555 - pkin(3) * t620;
t540 = t557 * t905 + t731 * t900;
t928 = pkin(7) * t540 + t454 * t900 + t527 * t905;
t580 = -pkin(3) * t693 + pkin(9) * t685 - t1032;
t610 = t684 * t904 + t685 * t899;
t618 = -pkin(9) * t684 + t1033;
t512 = -pkin(8) * t610 - t580 * t899 + t618 * t904;
t528 = -pkin(2) * t610 - pkin(3) * t684 + t587;
t579 = t611 * t905 + t693 * t900;
t927 = pkin(7) * t579 + t512 * t900 + t528 * t905;
t589 = pkin(3) * t1059 + pkin(9) * t709 + t1033;
t625 = -pkin(9) * t708 + t1032;
t633 = t708 * t904 + t709 * t899;
t521 = -pkin(8) * t633 - t589 * t899 + t625 * t904;
t534 = -pkin(2) * t633 - pkin(3) * t708 + t588;
t591 = -t1059 * t900 + t634 * t905;
t926 = pkin(7) * t591 + t521 * t900 + t534 * t905;
t744 = t810 * t899 + t1053;
t658 = t899 * (t857 * t984 + t1008 + t912) - t904 * (-pkin(8) * t867 - t1041 - t838) + (-t899 * t1047 + t835 * t904 - t744) * pkin(2);
t699 = -pkin(8) * t744 + t1029;
t702 = t745 * t905 - t776 * t900;
t925 = pkin(7) * t702 + t658 * t905 + t699 * t900;
t754 = t822 * t904 + t1027;
t662 = -pkin(2) * t754 + t711;
t703 = -pkin(8) * t754 + t1028;
t704 = t755 * t905 + t778 * t900;
t924 = pkin(7) * t704 + t662 * t905 + t703 * t900;
t786 = t833 * t900 + t834 * t905;
t923 = pkin(7) * t786 + t752;
t720 = -t775 * t899 + t780 * t904;
t596 = -pkin(8) * t720 - t635;
t679 = t722 * t905 - t796 * t900;
t919 = pkin(7) * t679 - t720 * t1045 + t596 * t900;
t606 = t636 * t905 + t767 * t900;
t917 = pkin(7) * t606 + t635 * t978;
t891 = t895 * t892;
t876 = qJDD(1) * t901 + t906 * t907;
t865 = t1006 * t1012;
t864 = (t893 - t894) * t1012;
t860 = -pkin(6) * t876 + g(3) * t906;
t837 = t1006 * t986;
t831 = (t997 + (qJD(2) + t887) * t1002) * t895;
t827 = t858 * t905 - t893 * t986;
t826 = -t859 * t900 - t894 * t986;
t824 = t862 * t905 - t1021;
t823 = -t861 * t900 + t1018;
t809 = (t891 * t1007 + t832 * t896) * t900;
t808 = (-t891 * t900 * t907 + t1060) * t905;
t789 = (-t850 * t899 + t851 * t904) * t880;
t787 = -t832 * t900 + t835 * t905;
t784 = t895 * t835 + t896 * t942;
t783 = -t895 * t834 + t896 * t944;
t782 = -t895 * t833 + t896 * t943;
t781 = t895 * t942 - t1060;
t774 = -t895 * t831 + t896 * t945;
t773 = t896 * t831 + t895 * t945;
t771 = -t1014 * t851 + t807 * t899;
t769 = t1015 * t850 + t806 * t904;
t768 = t905 * t790 - t900 * t934;
t766 = -t895 * t864 + t896 * t947;
t765 = t895 * t865 + t896 * t946;
t764 = -t896 * t865 + t895 * t946;
t758 = t829 * t899 - t1026;
t757 = t830 * t904 + t1055;
t741 = -t784 * t901 + t825 * t906;
t740 = t784 * t906 + t825 * t901;
t737 = t772 * t905 - t992;
t736 = t770 * t905 + t992;
t735 = -t774 * t901 + t820 * t906;
t734 = t774 * t906 + t820 * t901;
t733 = t895 * t838 + t896 * t948;
t732 = -t896 * t838 + t895 * t948;
t725 = t1050 * t896 - t895 * t789;
t724 = -t765 * t901 + t786 * t906;
t723 = t765 * t906 + t786 * t901;
t719 = t776 * t899 + t778 * t904;
t713 = t760 * t905 - t775 * t900;
t712 = t759 * t905 - t780 * t900;
t706 = -t1010 + (-t781 * t895 - t784 * t896) * pkin(7);
t701 = -t1009 + (-t773 * t895 - t774 * t896) * pkin(7);
t700 = -pkin(1) * t781 + t895 * t811 + t896 * t974;
t691 = t721 * t905 - t821 * t900;
t690 = -pkin(1) * t773 + t895 * t812 + t896 * t975;
t681 = -t895 * t771 + t896 * t935;
t680 = -t895 * t769 + t896 * t936;
t677 = t742 * t904 + t743 * t899;
t674 = pkin(7) * t752 * t896 - pkin(1) * t732;
t673 = -t733 * t901 + t752 * t906;
t672 = t733 * t906 + t752 * t901;
t671 = t678 * t905 - t853 * t900;
t670 = -pkin(1) * t764 + t896 * t923;
t669 = -pkin(2) * t778 + pkin(8) * t755 + t1029;
t665 = -t895 * t758 + t896 * t949;
t664 = -t895 * t757 + t896 * t950;
t663 = (-t732 * t895 - t733 * t896) * pkin(7);
t661 = pkin(2) * t776 + pkin(8) * t745 - t1028;
t660 = (-t764 * t895 - t765 * t896) * pkin(7) - t948;
t656 = -t895 * t754 + t896 * t951;
t655 = t896 * t754 + t895 * t951;
t654 = -t895 * t744 + t896 * t952;
t653 = t896 * t744 + t895 * t952;
t642 = t715 * t904 + t717 * t899;
t641 = t714 * t904 + t716 * t899;
t632 = -t895 * t719 + t896 * t954;
t624 = -t895 * t720 + t896 * t953;
t623 = t896 * t720 + t895 * t953;
t615 = t688 * t904 + t689 * t899;
t614 = t686 * t904 + t687 * t899;
t607 = -pkin(2) * t767 + pkin(8) * t636;
t601 = -t656 * t901 + t704 * t906;
t600 = t656 * t906 + t704 * t901;
t599 = -t895 * t677 + t896 * t955;
t598 = -t654 * t901 + t702 * t906;
t597 = t654 * t906 + t702 * t901;
t595 = t617 * t905 + t994;
t594 = t616 * t905 - t994;
t593 = t644 * t905 - t694 * t900;
t592 = t643 * t905 - t698 * t900;
t590 = pkin(2) * t796 + pkin(8) * t722 + t636;
t582 = -t624 * t901 + t679 * t906;
t581 = t624 * t906 + t679 * t901;
t569 = t630 * t904 + t631 * t899;
t561 = -t895 * t635 + t896 * t958;
t560 = t896 * t635 + t895 * t958;
t554 = t619 * t904 + t621 * t899;
t551 = -t895 * t642 + t896 * t956;
t550 = -t895 * t641 + t896 * t957;
t549 = t556 * t905 - t761 * t900;
t548 = -t895 * t633 + t896 * t959;
t547 = t896 * t633 + t895 * t959;
t544 = t603 * t904 + t605 * t899;
t543 = t602 * t904 + t604 * t899;
t542 = -t895 * t615 + t896 * t937;
t541 = -t895 * t614 + t896 * t938;
t539 = t570 * t905 - t682 * t900;
t538 = -t900 * t662 + t905 * t703 + (-t655 * t895 - t656 * t896) * pkin(7);
t537 = -t895 * t610 + t896 * t960;
t536 = t896 * t610 + t895 * t960;
t535 = -t900 * t658 + t905 * t699 + (-t653 * t895 - t654 * t896) * pkin(7);
t529 = -pkin(1) * t655 - t895 * t669 + t896 * t924;
t526 = -t561 * t901 + t606 * t906;
t525 = t561 * t906 + t606 * t901;
t524 = -pkin(1) * t653 - t895 * t661 + t896 * t925;
t523 = t546 * t905 - t639 * t900;
t522 = t545 * t905 - t637 * t900;
t515 = t572 * t904 + t574 * t899;
t514 = t571 * t904 + t573 * t899;
t513 = t720 * t1046 + t905 * t596 + (-t623 * t895 - t624 * t896) * pkin(7);
t511 = -t548 * t901 + t591 * t906;
t510 = t548 * t906 + t591 * t901;
t509 = pkin(2) * t1059 + pkin(8) * t634 + t589 * t904 + t625 * t899;
t502 = t558 * t904 + t559 * t899;
t501 = -pkin(2) * t693 + pkin(8) * t611 + t580 * t904 + t618 * t899;
t500 = -t537 * t901 + t579 * t906;
t499 = t537 * t906 + t579 * t901;
t498 = -t895 * t569 + t896 * t961;
t494 = -t895 * t554 + t896 * t963;
t493 = -t895 * t555 + t896 * t962;
t492 = t896 * t555 + t895 * t962;
t489 = t517 * t905 - t627 * t900;
t488 = t516 * t905 - t626 * t900;
t487 = -pkin(1) * t623 - t895 * t590 + t896 * t919;
t484 = -t895 * t544 + t896 * t964;
t483 = -t895 * t543 + t896 * t965;
t482 = t503 * t905 - t575 * t900;
t481 = t977 * t635 + (-t560 * t895 - t561 * t896) * pkin(7);
t478 = -pkin(1) * t560 - t895 * t607 + t896 * t917;
t473 = -t493 * t901 + t540 * t906;
t472 = t493 * t906 + t540 * t901;
t471 = -t895 * t515 + t896 * t966;
t470 = -t895 * t514 + t896 * t967;
t466 = -t895 * t507 + t896 * t968;
t465 = t896 * t507 + t895 * t968;
t464 = -t895 * t505 + t896 * t969;
t463 = t896 * t505 + t895 * t969;
t457 = -t895 * t502 + t896 * t970;
t456 = -t895 * t496 + t896 * t971;
t455 = t896 * t496 + t895 * t971;
t451 = -pkin(2) * t731 + pkin(8) * t557 + t495 * t904 + t504 * t899;
t450 = t905 * t521 - t900 * t534 + (-t547 * t895 - t548 * t896) * pkin(7);
t449 = t905 * t512 - t900 * t528 + (-t536 * t895 - t537 * t896) * pkin(7);
t446 = -t895 * t479 + t896 * t972;
t445 = t896 * t479 + t895 * t972;
t444 = -pkin(2) * t692 + pkin(8) * t480 - pkin(9) * t1039 + t518 * t904;
t443 = -t466 * t901 + t486 * t906;
t442 = t466 * t906 + t486 * t901;
t441 = -pkin(1) * t547 - t895 * t509 + t896 * t926;
t440 = -t464 * t901 + t485 * t906;
t439 = t464 * t906 + t485 * t901;
t437 = -pkin(1) * t536 - t895 * t501 + t896 * t927;
t435 = -t456 * t901 + t477 * t906;
t434 = t456 * t906 + t477 * t901;
t431 = -t446 * t901 + t476 * t906;
t430 = t446 * t906 + t476 * t901;
t429 = t905 * t454 - t900 * t527 + (-t492 * t895 - t493 * t896) * pkin(7);
t424 = -pkin(2) * t612 + pkin(8) * t508 + t453 * t904 + t461 * t899;
t423 = -pkin(2) * t608 + pkin(8) * t506 + t452 * t904 + t460 * t899;
t420 = -pkin(1) * t492 - t895 * t451 + t896 * t928;
t419 = -pkin(2) * t576 + pkin(8) * t497 + t438 * t904 + t448 * t899;
t417 = -t895 * t432 + t896 * t973;
t416 = t896 * t432 + t895 * t973;
t415 = t905 * t447 - t900 * t462 + (-t445 * t895 - t446 * t896) * pkin(7);
t414 = t905 * t427 - t900 * t459 + (-t465 * t895 - t466 * t896) * pkin(7);
t413 = t905 * t426 - t900 * t458 + (-t463 * t895 - t464 * t896) * pkin(7);
t412 = -pkin(1) * t445 - t895 * t444 + t896 * t929;
t411 = -t417 * t901 + t425 * t906;
t410 = t417 * t906 + t425 * t901;
t409 = t905 * t421 - t900 * t436 + (-t455 * t895 - t456 * t896) * pkin(7);
t407 = -pkin(1) * t465 - t895 * t424 + t896 * t930;
t406 = -pkin(1) * t463 - t895 * t423 + t896 * t931;
t405 = -pkin(2) * t474 + pkin(8) * t433 + t422 * t904 + t428 * t899;
t404 = -pkin(1) * t455 - t895 * t419 + t896 * t932;
t403 = t905 * t408 - t900 * t418 + (-t416 * t895 - t417 * t896) * pkin(7);
t402 = -pkin(1) * t416 - t895 * t405 + t896 * t933;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t876, -t877, 0, t840, 0, 0, 0, 0, 0, 0, t741, t735, t724, t673, 0, 0, 0, 0, 0, 0, t598, t601, t582, t526, 0, 0, 0, 0, 0, 0, t500, t511, t473, t431, 0, 0, 0, 0, 0, 0, t440, t443, t435, t411; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t877, -t876, 0, t839, 0, 0, 0, 0, 0, 0, t740, t734, t723, t672, 0, 0, 0, 0, 0, 0, t597, t600, t581, t525, 0, 0, 0, 0, 0, 0, t499, t510, t472, t430, 0, 0, 0, 0, 0, 0, t439, t442, t434, t410; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t781, t773, t764, t732, 0, 0, 0, 0, 0, 0, t653, t655, t623, t560, 0, 0, 0, 0, 0, 0, t536, t547, t492, t445, 0, 0, 0, 0, 0, 0, t463, t465, t455, t416; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t877, 0, -t876, 0, t976, -t860, -t839, -pkin(6) * t839, -t809 * t901 + t827 * t906, -t766 * t901 + t787 * t906, -t782 * t901 + t823 * t906, -t808 * t901 + t826 * t906, -t783 * t901 + t824 * t906, t906 * t837 + t901 * t940, -pkin(6) * t740 - t700 * t901 + t706 * t906, -pkin(6) * t734 - t690 * t901 + t701 * t906, -pkin(6) * t723 + t660 * t906 - t670 * t901, -pkin(6) * t672 + t663 * t906 - t674 * t901, -t681 * t901 + t737 * t906, -t632 * t901 + t691 * t906, -t664 * t901 + t712 * t906, -t680 * t901 + t736 * t906, -t665 * t901 + t713 * t906, -t725 * t901 + t768 * t906, -pkin(6) * t597 - t524 * t901 + t535 * t906, -pkin(6) * t600 - t529 * t901 + t538 * t906, -pkin(6) * t581 - t487 * t901 + t513 * t906, -pkin(6) * t525 - t478 * t901 + t481 * t906, -t542 * t901 + t595 * t906, -t494 * t901 + t549 * t906, -t550 * t901 + t592 * t906, -t541 * t901 + t594 * t906, -t551 * t901 + t593 * t906, -t599 * t901 + t671 * t906, -pkin(6) * t499 - t437 * t901 + t449 * t906, -pkin(6) * t510 - t441 * t901 + t450 * t906, -pkin(6) * t472 - t420 * t901 + t429 * t906, -pkin(6) * t430 - t412 * t901 + t415 * t906, -t484 * t901 + t523 * t906, -t457 * t901 + t482 * t906, -t470 * t901 + t488 * t906, -t483 * t901 + t522 * t906, -t471 * t901 + t489 * t906, -t498 * t901 + t539 * t906, -pkin(6) * t439 - t406 * t901 + t413 * t906, -pkin(6) * t442 - t407 * t901 + t414 * t906, -pkin(6) * t434 - t404 * t901 + t409 * t906, -pkin(6) * t410 - t402 * t901 + t403 * t906; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t876, 0, t877, 0, t860, t976, t840, pkin(6) * t840, t809 * t906 + t827 * t901, t766 * t906 + t787 * t901, t782 * t906 + t823 * t901, t808 * t906 + t826 * t901, t783 * t906 + t824 * t901, t901 * t837 - t906 * t940, pkin(6) * t741 + t700 * t906 + t706 * t901, pkin(6) * t735 + t690 * t906 + t701 * t901, pkin(6) * t724 + t660 * t901 + t670 * t906, pkin(6) * t673 + t663 * t901 + t674 * t906, t681 * t906 + t737 * t901, t632 * t906 + t691 * t901, t664 * t906 + t712 * t901, t680 * t906 + t736 * t901, t665 * t906 + t713 * t901, t725 * t906 + t768 * t901, pkin(6) * t598 + t524 * t906 + t535 * t901, pkin(6) * t601 + t529 * t906 + t538 * t901, pkin(6) * t582 + t487 * t906 + t513 * t901, pkin(6) * t526 + t478 * t906 + t481 * t901, t542 * t906 + t595 * t901, t494 * t906 + t549 * t901, t550 * t906 + t592 * t901, t541 * t906 + t594 * t901, t551 * t906 + t593 * t901, t599 * t906 + t671 * t901, pkin(6) * t500 + t437 * t906 + t449 * t901, pkin(6) * t511 + t441 * t906 + t450 * t901, pkin(6) * t473 + t420 * t906 + t429 * t901, pkin(6) * t431 + t412 * t906 + t415 * t901, t484 * t906 + t523 * t901, t457 * t906 + t482 * t901, t470 * t906 + t488 * t901, t483 * t906 + t522 * t901, t471 * t906 + t489 * t901, t498 * t906 + t539 * t901, pkin(6) * t440 + t406 * t906 + t413 * t901, pkin(6) * t443 + t407 * t906 + t414 * t901, pkin(6) * t435 + t404 * t906 + t409 * t901, pkin(6) * t411 + t402 * t906 + t403 * t901; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t882, t883, 0, 0, (t892 * t905 * t941 + t858 * t895) * t900, t896 * t864 + t895 * t947, t896 * t833 + t895 * t943, (-t1013 * t941 + t859 * t895) * t905, t896 * t834 + t895 * t944, t896 * t979, pkin(1) * t784 - t896 * t811 + t895 * t974, pkin(1) * t774 - t896 * t812 + t895 * t975, pkin(1) * t765 + t895 * t923, pkin(1) * t733 + t752 * t1043, t896 * t771 + t895 * t935, t896 * t719 + t895 * t954, t896 * t757 + t895 * t950, t896 * t769 + t895 * t936, t896 * t758 + t895 * t949, t1050 * t895 + t896 * t789, pkin(1) * t654 + t896 * t661 + t895 * t925, pkin(1) * t656 + t896 * t669 + t895 * t924, pkin(1) * t624 + t896 * t590 + t895 * t919, pkin(1) * t561 + t896 * t607 + t895 * t917, t896 * t615 + t895 * t937, t896 * t554 + t895 * t963, t896 * t641 + t895 * t957, t896 * t614 + t895 * t938, t896 * t642 + t895 * t956, t896 * t677 + t895 * t955, pkin(1) * t537 + t896 * t501 + t895 * t927, pkin(1) * t548 + t896 * t509 + t895 * t926, pkin(1) * t493 + t896 * t451 + t895 * t928, pkin(1) * t446 + t896 * t444 + t895 * t929, t896 * t544 + t895 * t964, t896 * t502 + t895 * t970, t896 * t514 + t895 * t967, t896 * t543 + t895 * t965, t896 * t515 + t895 * t966, t896 * t569 + t895 * t961, pkin(1) * t464 + t896 * t423 + t895 * t931, pkin(1) * t466 + t896 * t424 + t895 * t930, pkin(1) * t456 + t896 * t419 + t895 * t932, pkin(1) * t417 + t896 * t405 + t895 * t933;];
tauB_reg = t1;
