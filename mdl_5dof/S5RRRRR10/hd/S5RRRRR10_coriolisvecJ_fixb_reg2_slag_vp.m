% Calculate inertial parameters regressor of coriolis joint torque vector for
% S5RRRRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d4,d5]';
% 
% Output:
% tauc_reg [5x(5*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:37
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S5RRRRR10_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR10_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR10_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5RRRRR10_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:35:58
% EndTime: 2019-12-31 22:36:22
% DurationCPUTime: 9.68s
% Computational Cost: add. (14989->571), mult. (39423->812), div. (0->0), fcn. (30640->10), ass. (0->244)
t223 = sin(pkin(5));
t228 = sin(qJ(2));
t298 = qJD(1) * t228;
t279 = t223 * t298;
t224 = cos(pkin(5));
t231 = cos(qJ(2));
t342 = pkin(1) * t231;
t285 = t224 * t342;
t177 = -pkin(7) * t279 + qJD(1) * t285;
t245 = t223 * (pkin(2) * t228 - pkin(8) * t231);
t178 = qJD(1) * t245;
t227 = sin(qJ(3));
t230 = cos(qJ(3));
t122 = t230 * t177 + t227 * t178;
t297 = qJD(1) * t231;
t278 = t223 * t297;
t261 = t227 * t278;
t345 = -pkin(9) - pkin(8);
t281 = qJD(3) * t345;
t371 = pkin(9) * t261 + t227 * t281 - t122;
t343 = cos(qJ(4));
t280 = t343 * t230;
t259 = qJD(3) * t280;
t271 = qJD(4) * t343;
t286 = qJD(3) + qJD(4);
t226 = sin(qJ(4));
t307 = t226 * t227;
t137 = -t230 * t271 + t286 * t307 - t259;
t241 = t280 - t307;
t147 = t241 * t278;
t304 = t137 + t147;
t306 = t226 * t230;
t191 = t343 * t227 + t306;
t303 = (-t278 + t286) * t191;
t121 = -t227 * t177 + t230 * t178;
t300 = qJD(1) * t223;
t305 = t230 * t231;
t100 = (pkin(3) * t228 - pkin(9) * t305) * t300 + t121;
t205 = t345 * t227;
t206 = t345 * t230;
t242 = t343 * t205 + t226 * t206;
t328 = t242 * qJD(4) - t226 * t100 + t281 * t306 + t343 * t371;
t308 = t223 * t231;
t302 = t224 * t228 * pkin(1) + pkin(7) * t308;
t180 = t302 * qJD(1);
t293 = qJD(3) * t227;
t256 = -t180 + (-t261 + t293) * pkin(3);
t229 = cos(qJ(5));
t289 = qJD(5) * t229;
t225 = sin(qJ(5));
t296 = qJD(2) * t228;
t277 = t223 * t296;
t207 = qJD(1) * t277;
t204 = -qJD(3) + t278;
t246 = -qJD(4) + t204;
t236 = t229 * t246;
t299 = qJD(1) * t224;
t211 = qJD(2) + t299;
t260 = t227 * t279;
t161 = t211 * t230 - t260;
t162 = t211 * t227 + t230 * t279;
t243 = t226 * t161 + t343 * t162;
t290 = qJD(5) * t225;
t287 = qJD(1) * qJD(2);
t269 = t231 * t287;
t258 = t223 * t269;
t292 = qJD(3) * t230;
t131 = qJD(3) * t260 - t211 * t292 - t230 * t258;
t294 = qJD(2) * t231;
t275 = t227 * t294;
t132 = (t228 * t292 + t275) * t300 + t211 * t293;
t291 = qJD(4) * t226;
t62 = t343 * t131 + t226 * t132 - t161 * t271 + t162 * t291;
t32 = qJD(5) * t236 - t225 * t207 + t229 * t62 + t243 * t290;
t29 = t32 * t225;
t113 = -t343 * t161 + t162 * t226;
t365 = t113 * t229;
t94 = -t225 * t246 + t229 * t243;
t370 = -t29 + (t289 + t365) * t94;
t364 = qJD(5) + t113;
t265 = t226 * t131 - t343 * t132;
t63 = qJD(4) * t243 - t265;
t325 = t225 * t63 + t289 * t364;
t369 = -t243 * t94 + t364 * t365 + t325;
t368 = -t303 * pkin(4) - t304 * pkin(10) - t256;
t145 = t211 * pkin(8) + t180;
t175 = (-pkin(2) * t231 - pkin(8) * t228 - pkin(1)) * t223;
t157 = qJD(1) * t175;
t105 = t145 * t230 + t157 * t227;
t85 = pkin(9) * t161 + t105;
t330 = t226 * t85;
t104 = -t145 * t227 + t230 * t157;
t84 = -pkin(9) * t162 + t104;
t78 = -pkin(3) * t204 + t84;
t40 = t343 * t78 - t330;
t38 = pkin(4) * t246 - t40;
t367 = t113 * t38;
t366 = -pkin(10) * t279 + t328;
t318 = t113 * t243;
t363 = -t113 ^ 2 + t243 ^ 2;
t76 = pkin(4) * t243 + pkin(10) * t113;
t362 = -t113 * t246 - t62;
t144 = -pkin(2) * t211 - t177;
t117 = -pkin(3) * t161 + t144;
t179 = qJD(2) * t245;
t169 = qJD(1) * t179;
t309 = t223 * t228;
t212 = pkin(7) * t309;
t187 = -t212 + t285;
t181 = t187 * qJD(2);
t170 = qJD(1) * t181;
t73 = -qJD(3) * t105 + t230 * t169 - t227 * t170;
t48 = pkin(3) * t207 + t131 * pkin(9) + t73;
t72 = -t145 * t293 + t157 * t292 + t227 * t169 + t230 * t170;
t53 = -pkin(9) * t132 + t72;
t267 = -t226 * t48 - t78 * t271 + t85 * t291 - t343 * t53;
t361 = t117 * t113 + t267;
t92 = t225 * t243 + t236;
t250 = t225 * t94 + t229 * t92;
t324 = qJD(5) * t94;
t33 = -t229 * t207 - t225 * t62 + t324;
t360 = -t113 * t250 - t225 * t33 - t32 * t229 - t92 * t289 - t94 * t290;
t220 = t223 ^ 2;
t358 = -0.2e1 * t220 * t287;
t283 = t343 * t85;
t41 = t226 * t78 + t283;
t39 = -pkin(10) * t246 + t41;
t49 = pkin(4) * t113 - pkin(10) * t243 + t117;
t16 = t225 * t49 + t229 * t39;
t182 = t302 * qJD(2);
t171 = qJD(1) * t182;
t103 = t132 * pkin(3) + t171;
t18 = t63 * pkin(4) + t62 * pkin(10) + t103;
t7 = pkin(10) * t207 - t267;
t3 = -qJD(5) * t16 + t229 * t18 - t225 * t7;
t356 = -t16 * t364 - t3;
t150 = t226 * t205 - t343 * t206;
t326 = t150 * qJD(4) + t343 * t100 + t226 * t371 - t345 * t259;
t355 = t104 * t204 + t72;
t354 = t105 * t204 - t73;
t353 = t364 * t243;
t174 = pkin(8) * t224 + t302;
t120 = t230 * t174 + t227 * t175;
t251 = t225 * t39 - t229 * t49;
t352 = t16 * t229 + t225 * t251;
t58 = t229 * t63;
t351 = t243 * t92 + t58;
t268 = t226 * t53 - t343 * t48;
t10 = -qJD(4) * t41 - t268;
t8 = -pkin(4) * t207 - t10;
t350 = -t8 * t229 + t243 * t251 + t38 * t290;
t349 = t16 * t243 + t8 * t225 + t38 * t289;
t347 = -t117 * t243 - t268;
t346 = -t243 * t204 + t265;
t119 = -t174 * t227 + t230 * t175;
t184 = t224 * t227 + t230 * t309;
t90 = -pkin(3) * t308 - pkin(9) * t184 + t119;
t183 = -t224 * t230 + t227 * t309;
t99 = -pkin(9) * t183 + t120;
t337 = t226 * t90 + t343 * t99;
t276 = t223 * t294;
t140 = -qJD(3) * t183 + t230 * t276;
t80 = -qJD(3) * t120 + t230 * t179 - t227 * t181;
t64 = pkin(3) * t277 - t140 * pkin(9) + t80;
t139 = qJD(3) * t184 + t223 * t275;
t79 = -t174 * t293 + t175 * t292 + t227 * t179 + t230 * t181;
t69 = -pkin(9) * t139 + t79;
t14 = -qJD(4) * t337 - t226 * t69 + t343 * t64;
t2 = -qJD(5) * t251 + t225 * t18 + t229 * t7;
t1 = t2 * t229;
t341 = t94 * t92;
t219 = -pkin(3) * t230 - pkin(2);
t133 = -pkin(4) * t241 - pkin(10) * t191 + t219;
t97 = t133 * t225 + t150 * t229;
t340 = qJD(5) * t97 + t366 * t225 + t368 * t229;
t96 = t133 * t229 - t150 * t225;
t339 = -qJD(5) * t96 + t368 * t225 - t366 * t229;
t128 = t343 * t183 + t184 * t226;
t336 = t128 * t63;
t335 = t251 * t364;
t331 = t225 * t92;
t31 = t33 * t229;
t329 = t63 * t241;
t327 = pkin(4) * t279 + t326;
t321 = t364 * t225;
t317 = t161 * t204;
t316 = t162 * t161;
t315 = t162 * t204;
t314 = t191 * t225;
t313 = t191 * t229;
t312 = t204 * t227;
t311 = t204 * t230;
t310 = t220 * qJD(1) ^ 2;
t301 = t228 ^ 2 - t231 ^ 2;
t295 = qJD(2) * t230;
t282 = t225 * t308;
t273 = t220 * t297;
t264 = t211 + t299;
t263 = pkin(3) * t271;
t262 = t228 * t231 * t310;
t44 = t226 * t84 + t283;
t257 = pkin(3) * t291 - t44;
t255 = pkin(1) * t358;
t217 = pkin(3) * t226 + pkin(10);
t253 = -t217 * t63 + t367;
t252 = t16 * t225 - t229 * t251;
t51 = -pkin(10) * t308 + t337;
t129 = -t226 * t183 + t343 * t184;
t173 = t212 + (-pkin(2) - t342) * t224;
t130 = t183 * pkin(3) + t173;
t70 = t128 * pkin(4) - t129 * pkin(10) + t130;
t24 = t225 * t70 + t229 * t51;
t23 = -t225 * t51 + t229 * t70;
t249 = t220 * t228 * t269;
t54 = -t226 * t99 + t343 * t90;
t109 = t129 * t225 + t229 * t308;
t13 = t226 * t64 + t90 * t271 - t99 * t291 + t343 * t69;
t123 = t147 * t225 - t229 * t279;
t239 = -t137 * t225 + t191 * t289 - t123;
t124 = t147 * t229 + t225 * t279;
t238 = -t137 * t229 - t191 * t290 - t124;
t235 = t246 * t223;
t234 = pkin(1) * (-t224 * t287 + t310);
t118 = t139 * pkin(3) + t182;
t233 = -qJD(5) * t252 - t3 * t225 + t1;
t218 = -t343 * pkin(3) - pkin(4);
t110 = t129 * t229 - t282;
t75 = t129 * qJD(4) + t343 * t139 + t226 * t140;
t74 = t226 * t139 - t343 * t140 + t183 * t271 + t184 * t291;
t65 = pkin(3) * t162 + t76;
t50 = pkin(4) * t308 - t54;
t45 = t343 * t84 - t330;
t43 = -qJD(5) * t282 + t129 * t289 - t225 * t74 - t229 * t277;
t42 = qJD(5) * t109 - t225 * t277 + t229 * t74;
t25 = t75 * pkin(4) + t74 * pkin(10) + t118;
t22 = t225 * t76 + t229 * t40;
t21 = -t225 * t40 + t229 * t76;
t20 = t225 * t65 + t229 * t45;
t19 = -t225 * t45 + t229 * t65;
t12 = -pkin(4) * t277 - t14;
t11 = pkin(10) * t277 + t13;
t5 = -qJD(5) * t24 - t225 * t11 + t229 * t25;
t4 = qJD(5) * t23 + t229 * t11 + t225 * t25;
t6 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t249, t301 * t358, t264 * t276, -0.2e1 * t249, -t264 * t277, 0, -t171 * t224 - t182 * t211 + t228 * t255, -t170 * t224 - t181 * t211 + t231 * t255, (t170 * t231 + t171 * t228 + (-t177 * t231 - t180 * t228) * qJD(2) + (t181 * t231 + t182 * t228 + (-t187 * t231 - t228 * t302) * qJD(2)) * qJD(1)) * t223, t170 * t302 - t171 * t187 - t177 * t182 + t180 * t181, -t131 * t184 + t140 * t162, t131 * t183 - t132 * t184 - t139 * t162 + t140 * t161, -t140 * t204 + (t131 * t231 + (qJD(1) * t184 + t162) * t296) * t223, t132 * t183 - t139 * t161, t139 * t204 + (t132 * t231 + (-qJD(1) * t183 + t161) * t296) * t223, (-t204 * t223 - t273) * t296, t173 * t132 + t144 * t139 - t182 * t161 + t171 * t183 - t80 * t204 + (-t231 * t73 + (qJD(1) * t119 + t104) * t296) * t223, -t173 * t131 + t144 * t140 + t182 * t162 + t171 * t184 + t79 * t204 + (t231 * t72 + (-qJD(1) * t120 - t105) * t296) * t223, -t104 * t140 - t105 * t139 + t119 * t131 - t120 * t132 + t161 * t79 - t162 * t80 - t183 * t72 - t184 * t73, t104 * t80 + t105 * t79 + t119 * t73 + t120 * t72 + t144 * t182 + t171 * t173, -t129 * t62 - t243 * t74, t113 * t74 + t128 * t62 - t129 * t63 - t243 * t75, -t74 * t286 + (t243 * t296 + t62 * t231 + (t129 * t296 + t231 * t74) * qJD(1)) * t223, t113 * t75 + t336, -t75 * t286 + (-t113 * t296 + t63 * t231 + (-t128 * t296 + t231 * t75) * qJD(1)) * t223, (-t235 - t273) * t296, t14 * t286 + t118 * t113 + t130 * t63 + t103 * t128 + t117 * t75 + (t40 * t296 - t10 * t231 + (-t14 * t231 + t296 * t54) * qJD(1)) * t223, -t13 * t286 + t118 * t243 - t130 * t62 + t103 * t129 - t117 * t74 + (-t41 * t296 - t267 * t231 + (t13 * t231 - t296 * t337) * qJD(1)) * t223, -t10 * t129 - t113 * t13 + t128 * t267 - t14 * t243 - t337 * t63 + t40 * t74 - t41 * t75 + t54 * t62, t10 * t54 + t103 * t130 + t117 * t118 + t13 * t41 + t14 * t40 - t267 * t337, -t110 * t32 - t42 * t94, t109 * t32 - t110 * t33 + t42 * t92 - t43 * t94, t110 * t63 - t128 * t32 - t364 * t42 + t75 * t94, t109 * t33 + t43 * t92, -t109 * t63 - t128 * t33 - t364 * t43 - t75 * t92, t364 * t75 + t336, t109 * t8 + t12 * t92 + t128 * t3 + t23 * t63 - t251 * t75 + t33 * t50 + t364 * t5 + t38 * t43, t110 * t8 + t12 * t94 - t128 * t2 - t16 * t75 - t24 * t63 - t32 * t50 - t364 * t4 - t38 * t42, -t109 * t2 - t110 * t3 - t16 * t43 + t23 * t32 - t24 * t33 - t251 * t42 - t4 * t92 - t5 * t94, t12 * t38 + t16 * t4 + t2 * t24 + t23 * t3 - t251 * t5 + t50 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t262, t301 * t310, (qJD(2) - t211) * t278, t262, t211 * t279 - t207, 0, -pkin(7) * t258 + t180 * t211 + t228 * t234, pkin(7) * t207 + t177 * t211 + t231 * t234, 0, 0, -t131 * t227 - t162 * t311, (-t131 - t317) * t230 + (-t132 + t315) * t227, -t204 * t292 + (t204 * t305 + (qJD(2) * t227 - t162) * t228) * t300, -t132 * t230 + t161 * t312, t204 * t293 + (-t231 * t312 + (-t161 + t295) * t228) * t300, t204 * t279, -pkin(2) * t132 + t121 * t204 + t180 * t161 - t171 * t230 + (pkin(8) * t311 + t144 * t227) * qJD(3) + (-t104 * t228 + (-pkin(8) * t296 - t144 * t231) * t227) * t300, pkin(2) * t131 - t122 * t204 - t180 * t162 + t171 * t227 + (-pkin(8) * t312 + t144 * t230) * qJD(3) + (-t144 * t305 + (-pkin(8) * t295 + t105) * t228) * t300, t121 * t162 - t122 * t161 + ((qJD(3) * t162 - t132) * pkin(8) + t355) * t230 + ((-qJD(3) * t161 - t131) * pkin(8) + t354) * t227, -t171 * pkin(2) - t104 * t121 - t105 * t122 - t144 * t180 + (-t73 * t227 + t72 * t230 + (-t104 * t230 - t105 * t227) * qJD(3)) * pkin(8), -t62 * t191 - t243 * t304, t304 * t113 - t191 * t63 - t241 * t62 - t243 * t303, (t304 * t231 + (qJD(2) * t191 - t243) * t228) * t300 - t304 * t286, t303 * t113 - t329, (t303 * t231 + (qJD(2) * t241 + t113) * t228) * t300 - t303 * t286, t235 * t298, t219 * t63 - t103 * t241 + t303 * t117 + t256 * t113 + (t326 * t231 + (qJD(2) * t242 - t40) * t228) * t300 - t326 * t286, -t219 * t62 + t103 * t191 - t304 * t117 + t256 * t243 + (t328 * t231 + (-qJD(2) * t150 + t41) * t228) * t300 - t328 * t286, -t10 * t191 - t328 * t113 - t150 * t63 - t241 * t267 + t242 * t62 + t243 * t326 - t303 * t41 + t304 * t40, t10 * t242 + t103 * t219 + t256 * t117 - t150 * t267 - t326 * t40 + t328 * t41, t238 * t94 - t313 * t32, t94 * t123 + t124 * t92 + t250 * t137 + (t29 - t31 + (-t229 * t94 + t331) * qJD(5)) * t191, t238 * t364 + t241 * t32 + t303 * t94 + t313 * t63, t239 * t92 + t314 * t33, -t239 * t364 + t241 * t33 - t303 * t92 - t314 * t63, t303 * t364 - t329, t239 * t38 - t241 * t3 - t242 * t33 - t251 * t303 + t8 * t314 + t327 * t92 - t340 * t364 + t63 * t96, -t16 * t303 + t2 * t241 + t238 * t38 + t242 * t32 + t313 * t8 + t327 * t94 + t339 * t364 - t63 * t97, t123 * t16 - t124 * t251 + t32 * t96 - t33 * t97 + t340 * t94 + t339 * t92 + t252 * t137 + (-qJD(5) * t352 - t2 * t225 - t229 * t3) * t191, -t339 * t16 + t2 * t97 - t242 * t8 + t251 * t340 + t3 * t96 + t327 * t38; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t316, -t161 ^ 2 + t162 ^ 2, -t131 + t317, t316, -t132 - t315, t207, -t144 * t162 - t354, -t144 * t161 - t355, 0, 0, t318, t363, t362, -t318, t346, t207, -t44 * t204 + (t44 - t41) * qJD(4) + (-t162 * t113 + t343 * t207 + t246 * t291) * pkin(3) + t347, -t45 * t246 + (-t162 * t243 - t207 * t226 + t246 * t271) * pkin(3) + t361, t41 * t243 + t45 * t113 - t40 * t113 - t44 * t243 + (t343 * t62 - t226 * t63 + (-t343 * t113 + t226 * t243) * qJD(4)) * pkin(3), t40 * t44 - t41 * t45 + (t343 * t10 - t117 * t162 - t226 * t267 + (-t226 * t40 + t343 * t41) * qJD(4)) * pkin(3), t370, t360, t369, t331 * t364 - t31, -t321 * t364 + t351, -t353, t218 * t33 + t257 * t92 + t253 * t225 + (-t217 * t289 - t225 * t263 - t19) * t364 + t350, -t218 * t32 + t257 * t94 + t253 * t229 + (t217 * t290 - t229 * t263 + t20) * t364 + t349, t19 * t94 + t20 * t92 + t1 + (-t92 * t263 + t113 * t251 - t217 * t33 + (t217 * t94 + t251) * qJD(5)) * t229 + (t94 * t263 - t113 * t16 - t217 * t32 - t3 + (t217 * t92 - t16) * qJD(5)) * t225, t251 * t19 - t16 * t20 + t8 * t218 - t38 * t44 + (t226 * t38 + t343 * t352) * qJD(4) * pkin(3) + t233 * t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t318, t363, t362, -t318, t346, t207, -t204 * t41 + t347, -t246 * t40 + t361, 0, 0, t370, t360, t369, t321 * t92 - t31, -t225 * t364 ^ 2 + t351, -t353, -pkin(4) * t33 - pkin(10) * t325 - t21 * t364 + t225 * t367 - t41 * t92 + t350, t38 * t365 + pkin(4) * t32 + t22 * t364 - t41 * t94 + (t290 * t364 - t58) * pkin(10) + t349, t21 * t94 + t22 * t92 + t1 + (t335 + (-t33 + t324) * pkin(10)) * t229 + ((qJD(5) * t92 - t32) * pkin(10) + t356) * t225, -t8 * pkin(4) + pkin(10) * t233 - t16 * t22 + t21 * t251 - t38 * t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t341, -t92 ^ 2 + t94 ^ 2, t364 * t92 - t32, -t341, t364 * t94 - t33, t63, -t38 * t94 - t356, t38 * t92 - t2 - t335, 0, 0;];
tauc_reg = t6;
