% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRPRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d4,d5,theta1,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:52
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRPRR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRR4_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRR4_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5PRPRR4_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:51:40
% EndTime: 2019-12-05 15:51:56
% DurationCPUTime: 12.87s
% Computational Cost: add. (44961->599), mult. (84358->977), div. (0->0), fcn. (62596->12), ass. (0->433)
t549 = cos(qJ(2));
t537 = sin(pkin(9));
t540 = cos(pkin(9));
t507 = t540 * g(1) + t537 * g(2);
t546 = sin(qJ(2));
t506 = t537 * g(1) - t540 * g(2);
t538 = sin(pkin(5));
t541 = cos(pkin(5));
t613 = g(3) - qJDD(1);
t647 = -t541 * t506 + t538 * t613;
t425 = -t549 * t507 - t647 * t546;
t551 = qJD(2) ^ 2;
t415 = -t551 * pkin(2) + t425;
t536 = sin(pkin(10));
t539 = cos(pkin(10));
t424 = -t546 * t507 + t647 * t549;
t563 = qJDD(2) * pkin(2) - t424;
t364 = t536 * t415 - t539 * t563;
t365 = t539 * t415 + t536 * t563;
t599 = t536 * t364 + t539 * t365;
t295 = t539 * t364 - t536 * t365;
t620 = t295 * t546;
t648 = t549 * t599 + t620;
t631 = t549 * t295;
t246 = -t546 * t599 + t631;
t476 = t538 * t506 + t541 * t613;
t469 = -qJDD(3) + t476;
t499 = t536 * qJDD(2) + t539 * t551;
t420 = qJ(3) * t499 - t539 * t469;
t500 = t539 * qJDD(2) - t536 * t551;
t590 = -qJ(3) * t500 - t536 * t469;
t646 = t420 * t546 + t549 * t590;
t645 = t549 * t420 - t546 * t590;
t449 = t546 * t499 - t549 * t500;
t566 = t549 * t499 + t546 * t500;
t636 = t566 * t541;
t379 = t540 * t449 + t537 * t636;
t377 = t537 * t449 - t540 * t636;
t644 = t537 * t613;
t643 = t540 * t613;
t544 = sin(qJ(5));
t545 = sin(qJ(4));
t608 = qJD(2) * qJD(4);
t522 = t545 * t608;
t548 = cos(qJ(4));
t527 = t548 * qJDD(2);
t497 = t527 - t522;
t488 = -qJDD(5) + t497;
t547 = cos(qJ(5));
t611 = qJD(2) * t545;
t491 = -t547 * qJD(4) + t544 * t611;
t493 = t544 * qJD(4) + t547 * t611;
t630 = t493 * t491;
t564 = -t488 - t630;
t642 = t544 * t564;
t639 = t547 * t564;
t436 = t566 * t538;
t610 = t548 * qJD(2);
t518 = -qJD(5) + t610;
t477 = t491 * t518;
t601 = t548 * t608;
t606 = t545 * qJDD(2);
t496 = t601 + t606;
t603 = t491 * qJD(5) - t544 * qJDD(4) - t547 * t496;
t401 = t603 - t477;
t598 = -t547 * qJDD(4) + t544 * t496;
t397 = (qJD(5) + t518) * t493 + t598;
t486 = t491 ^ 2;
t487 = t493 ^ 2;
t516 = t518 ^ 2;
t635 = pkin(2) * t295;
t634 = pkin(4) * t545;
t633 = pkin(4) * t548;
t368 = t546 * t424 + t549 * t425;
t632 = pkin(6) * t368;
t629 = t518 * t544;
t628 = t518 * t547;
t532 = t545 ^ 2;
t627 = t532 * t551;
t356 = -t551 * pkin(3) + qJDD(2) * pkin(7) + t365;
t458 = t548 * t469;
t595 = -pkin(8) * t545 - t633;
t494 = t595 * qJD(2);
t550 = qJD(4) ^ 2;
t312 = t458 - qJDD(4) * pkin(4) - t550 * pkin(8) + (qJD(2) * t494 + t356) * t545;
t625 = t544 * t312;
t421 = t488 - t630;
t624 = t544 * t421;
t355 = -qJDD(2) * pkin(3) - t551 * pkin(7) + t364;
t623 = t545 * t355;
t517 = t545 * t551 * t548;
t508 = qJDD(4) + t517;
t622 = t545 * t508;
t509 = qJDD(4) - t517;
t621 = t545 * t509;
t619 = t546 * t476;
t618 = t547 * t312;
t617 = t547 * t421;
t616 = t548 * t355;
t615 = t548 * t509;
t614 = t549 * t476;
t336 = t548 * t356 - t545 * t469;
t313 = -t550 * pkin(4) + qJDD(4) * pkin(8) + t494 * t610 + t336;
t591 = -t497 + t522;
t592 = t496 + t601;
t321 = pkin(4) * t591 - pkin(8) * t592 + t355;
t263 = t547 * t313 + t544 * t321;
t533 = t548 ^ 2;
t612 = t532 + t533;
t607 = qJDD(2) * t538;
t605 = t545 * t630;
t604 = t548 * t630;
t602 = t540 * t607;
t262 = t544 * t313 - t547 * t321;
t335 = t545 * t356 + t458;
t272 = t545 * t335 + t548 * t336;
t455 = -t537 * t506 - t540 * t507;
t597 = t536 * t517;
t596 = t539 * t517;
t502 = t549 * qJDD(2) - t546 * t551;
t594 = -pkin(6) * t502 - t619;
t565 = t546 * qJDD(2) + t549 * t551;
t593 = -pkin(6) * t565 + t614;
t228 = t544 * t262 + t547 * t263;
t218 = t548 * t228 + t545 * t312;
t227 = -t547 * t262 + t544 * t263;
t190 = t536 * t218 - t539 * t227;
t191 = t539 * t218 + t536 * t227;
t589 = t190 * t549 + t191 * t546;
t250 = t536 * t272 - t539 * t355;
t251 = t539 * t272 + t536 * t355;
t588 = t250 * t549 + t251 * t546;
t402 = t477 + t603;
t342 = -t397 * t547 - t544 * t402;
t416 = t486 + t487;
t302 = t548 * t342 - t545 * t416;
t340 = -t397 * t544 + t547 * t402;
t264 = t536 * t302 - t539 * t340;
t265 = t539 * t302 + t536 * t340;
t587 = t264 * t549 + t265 * t546;
t398 = (-qJD(5) + t518) * t493 - t598;
t341 = t547 * t398 + t401 * t544;
t456 = -t487 + t486;
t311 = t548 * t341 - t545 * t456;
t339 = -t544 * t398 + t401 * t547;
t266 = t536 * t311 + t539 * t339;
t267 = t539 * t311 - t536 * t339;
t586 = t266 * t549 + t267 * t546;
t445 = -t516 - t486;
t370 = t547 * t445 - t642;
t316 = t548 * t370 - t545 * t398;
t369 = t544 * t445 + t639;
t276 = t536 * t316 - t539 * t369;
t279 = t539 * t316 + t536 * t369;
t585 = t276 * t549 + t279 * t546;
t453 = -t487 - t516;
t376 = -t544 * t453 + t617;
t323 = t548 * t376 - t545 * t401;
t375 = t547 * t453 + t624;
t283 = t536 * t323 - t539 * t375;
t284 = t539 * t323 + t536 * t375;
t584 = t283 * t549 + t284 * t546;
t475 = -t487 + t516;
t385 = -t544 * t475 + t639;
t327 = t548 * t385 - t545 * t402;
t383 = -t547 * t475 - t642;
t289 = t536 * t327 + t539 * t383;
t291 = t539 * t327 - t536 * t383;
t583 = t289 * t549 + t291 * t546;
t474 = t486 - t516;
t386 = t547 * t474 + t624;
t328 = t548 * t386 - t545 * t397;
t384 = -t544 * t474 + t617;
t290 = t536 * t328 + t539 * t384;
t292 = t539 * t328 - t536 * t384;
t582 = t290 * t549 + t292 * t546;
t434 = -t493 * qJD(5) - t598;
t393 = -t544 * t434 - t491 * t628;
t362 = t548 * t393 - t605;
t392 = -t547 * t434 + t491 * t629;
t303 = t536 * t362 + t539 * t392;
t305 = t539 * t362 - t536 * t392;
t579 = t303 * t549 + t305 * t546;
t395 = t493 * t629 - t547 * t603;
t363 = t548 * t395 + t605;
t394 = t493 * t628 + t544 * t603;
t304 = t536 * t363 + t539 * t394;
t306 = t539 * t363 - t536 * t394;
t578 = t304 * t549 + t306 * t546;
t271 = t548 * t335 - t545 * t336;
t407 = (t491 * t547 - t493 * t544) * t518;
t388 = t548 * t407 - t545 * t488;
t406 = (-t491 * t544 - t493 * t547) * t518;
t337 = t536 * t388 + t539 * t406;
t338 = t539 * t388 - t536 * t406;
t577 = t337 * t549 + t338 * t546;
t495 = 0.2e1 * t601 + t606;
t498 = t527 - 0.2e1 * t522;
t447 = -t545 * t495 + t548 * t498;
t530 = t533 * t551;
t505 = t530 - t627;
t404 = t536 * t447 + t539 * t505;
t405 = t539 * t447 - t536 * t505;
t576 = t404 * t549 + t405 * t546;
t515 = -t530 - t550;
t466 = t548 * t515 - t622;
t411 = t536 * t466 + t539 * t498;
t413 = t539 * t466 - t536 * t498;
t575 = t411 * t549 + t413 * t546;
t513 = -t550 - t627;
t468 = -t545 * t513 - t615;
t412 = t536 * t468 - t539 * t495;
t414 = t539 * t468 + t536 * t495;
t574 = t412 * t549 + t414 * t546;
t367 = t549 * t424 - t546 * t425;
t514 = t530 - t550;
t465 = t548 * t514 - t621;
t426 = t536 * t465 - t539 * t527;
t428 = t539 * t465 + t527 * t536;
t573 = t426 * t549 + t428 * t546;
t490 = t548 * t508;
t512 = t550 - t627;
t467 = -t545 * t512 + t490;
t427 = t536 * t467 - t539 * t606;
t429 = t539 * t467 + t536 * t606;
t572 = t427 * t549 + t429 * t546;
t472 = -t545 * t497 - t533 * t608;
t430 = t536 * t472 - t596;
t432 = t539 * t472 + t597;
t571 = t430 * t549 + t432 * t546;
t473 = t548 * t496 - t532 * t608;
t431 = t536 * t473 + t596;
t433 = t539 * t473 - t597;
t570 = t431 * t549 + t433 * t546;
t501 = t612 * qJDD(2);
t504 = t530 + t627;
t451 = t536 * t501 + t539 * t504;
t452 = t539 * t501 - t536 * t504;
t569 = t451 * t549 + t452 * t546;
t489 = t612 * t608;
t470 = -t539 * qJDD(4) + t536 * t489;
t471 = t536 * qJDD(4) + t539 * t489;
t568 = t470 * t549 + t471 * t546;
t480 = t565 * t541;
t567 = t540 * t480 + t537 * t502;
t443 = t537 * t480 - t540 * t502;
t454 = t540 * t506 - t537 * t507;
t217 = t545 * t228 - t548 * t312;
t180 = -pkin(7) * t217 + (-pkin(8) * t548 + t634) * t227;
t185 = -pkin(3) * t217 + pkin(4) * t312 - pkin(8) * t228;
t166 = -pkin(2) * t217 + qJ(3) * t191 + t536 * t180 + t539 * t185;
t169 = -qJ(3) * t190 + t539 * t180 - t536 * t185;
t177 = -t546 * t190 + t549 * t191;
t562 = pkin(6) * t177 + t166 * t549 + t169 * t546;
t224 = -pkin(8) * t340 - t227;
t301 = t545 * t342 + t548 * t416;
t207 = -pkin(7) * t301 + t548 * t224 + t340 * t634;
t210 = -pkin(3) * t301 - pkin(4) * t416 - pkin(8) * t342 - t228;
t178 = -pkin(2) * t301 + qJ(3) * t265 + t536 * t207 + t539 * t210;
t179 = -qJ(3) * t264 + t539 * t207 - t536 * t210;
t231 = -t546 * t264 + t549 * t265;
t561 = pkin(6) * t231 + t178 * t549 + t179 * t546;
t248 = -pkin(4) * t369 + t262;
t275 = -pkin(8) * t369 + t625;
t315 = t545 * t370 + t548 * t398;
t214 = -pkin(7) * t315 - t545 * t248 + t548 * t275;
t239 = -pkin(3) * t315 - pkin(4) * t398 - pkin(8) * t370 + t618;
t183 = -pkin(2) * t315 + qJ(3) * t279 + t536 * t214 + t539 * t239;
t186 = -qJ(3) * t276 + t539 * t214 - t536 * t239;
t235 = -t546 * t276 + t549 * t279;
t560 = pkin(6) * t235 + t183 * t549 + t186 * t546;
t249 = -pkin(4) * t375 + t263;
t282 = -pkin(8) * t375 + t618;
t322 = t545 * t376 + t548 * t401;
t220 = -pkin(7) * t322 - t545 * t249 + t548 * t282;
t240 = -pkin(3) * t322 - pkin(4) * t401 - pkin(8) * t376 - t625;
t184 = -pkin(2) * t322 + qJ(3) * t284 + t536 * t220 + t539 * t240;
t189 = -qJ(3) * t283 + t539 * t220 - t536 * t240;
t236 = -t546 * t283 + t549 * t284;
t559 = pkin(6) * t236 + t184 * t549 + t189 * t546;
t195 = qJ(3) * t251 - (-pkin(3) * t539 - pkin(7) * t536 - pkin(2)) * t271;
t211 = -qJ(3) * t250 - (pkin(3) * t536 - pkin(7) * t539) * t271;
t221 = -t546 * t250 + t549 * t251;
t558 = pkin(6) * t221 + t195 * t549 + t211 * t546;
t462 = t545 * t515 + t490;
t307 = -pkin(3) * t462 + t335;
t333 = -pkin(7) * t462 + t623;
t252 = -pkin(2) * t462 + qJ(3) * t413 + t539 * t307 + t536 * t333;
t256 = -qJ(3) * t411 - t536 * t307 + t539 * t333;
t358 = -t546 * t411 + t549 * t413;
t557 = pkin(6) * t358 + t252 * t549 + t256 * t546;
t464 = t548 * t513 - t621;
t308 = -pkin(3) * t464 + t336;
t334 = -pkin(7) * t464 + t616;
t253 = -pkin(2) * t464 + qJ(3) * t414 + t539 * t308 + t536 * t334;
t257 = -qJ(3) * t412 - t536 * t308 + t539 * t334;
t359 = -t546 * t412 + t549 * t414;
t556 = pkin(6) * t359 + t253 * t549 + t257 * t546;
t260 = qJ(3) * t452 + t536 * t271;
t261 = -qJ(3) * t451 + t539 * t271;
t391 = -t546 * t451 + t549 * t452;
t555 = pkin(6) * t391 + t260 * t549 + t261 * t546;
t554 = -pkin(6) * t566 - t645;
t553 = pkin(6) * t449 + t646;
t285 = pkin(2) * t469 + qJ(3) * t599;
t552 = pkin(6) * t648 + qJ(3) * t620 + t285 * t549;
t523 = t541 * qJDD(2);
t511 = t537 * t607;
t481 = t502 * t541;
t479 = t502 * t538;
t478 = t565 * t538;
t463 = t548 * t512 + t622;
t461 = t545 * t514 + t615;
t460 = t592 * t545;
t459 = t591 * t548;
t446 = t548 * t495 + t545 * t498;
t444 = -t537 * t481 - t540 * t565;
t442 = t540 * t481 - t537 * t565;
t440 = t449 * t541;
t437 = t449 * t538;
t403 = -t546 * t470 + t549 * t471;
t396 = t568 * t541;
t390 = -t614 + (t478 * t538 + t480 * t541) * pkin(6);
t389 = -t619 + (-t479 * t538 - t481 * t541) * pkin(6);
t387 = t545 * t407 + t548 * t488;
t382 = t569 * t541;
t381 = t569 * t538;
t380 = t537 * t440 - t540 * t566;
t378 = -t540 * t440 - t537 * t566;
t374 = -t546 * t431 + t549 * t433;
t373 = -t546 * t430 + t549 * t432;
t372 = -t546 * t427 + t549 * t429;
t371 = -t546 * t426 + t549 * t428;
t366 = t368 * t541;
t361 = t545 * t395 - t604;
t360 = t545 * t393 + t604;
t353 = -pkin(1) * t479 + t538 * t424 + t541 * t593;
t352 = pkin(1) * t478 + t538 * t425 + t541 * t594;
t351 = -t546 * t404 + t549 * t405;
t350 = -pkin(2) * t499 - t365;
t349 = pkin(2) * t500 - t364;
t348 = -t538 * t460 + t541 * t570;
t347 = t538 * t459 + t541 * t571;
t346 = -t538 * t463 + t541 * t572;
t345 = -t538 * t461 + t541 * t573;
t344 = -t367 * t541 + t538 * t476;
t343 = -t367 * t538 - t541 * t476;
t332 = -t538 * t464 + t541 * t574;
t331 = -t538 * t462 + t541 * t575;
t330 = t541 * t464 + t538 * t574;
t329 = t541 * t462 + t538 * t575;
t326 = t545 * t386 + t548 * t397;
t325 = t545 * t385 + t548 * t402;
t318 = -t537 * t382 + t540 * t391;
t317 = t540 * t382 + t537 * t391;
t314 = -t538 * t446 + t541 * t576;
t310 = t545 * t341 + t548 * t456;
t300 = (t436 * t538 + t541 * t636) * pkin(6) + t645;
t299 = (t437 * t538 + t440 * t541) * pkin(6) + t646;
t298 = pkin(2) * t411 + pkin(3) * t498 + pkin(7) * t466 - t616;
t297 = pkin(2) * t412 - pkin(3) * t495 + pkin(7) * t468 + t623;
t288 = -pkin(1) * t343 + t541 * t632;
t287 = -t537 * t344 + t540 * t368;
t286 = t540 * t344 + t537 * t368;
t281 = -t537 * t332 + t540 * t359;
t280 = -t537 * t331 + t540 * t358;
t278 = t540 * t332 + t537 * t359;
t277 = t540 * t331 + t537 * t358;
t274 = (-t343 * t538 - t344 * t541) * pkin(6);
t273 = -t546 * t337 + t549 * t338;
t269 = pkin(1) * t436 - t538 * t350 + t541 * t553;
t268 = pkin(1) * t437 - t538 * t349 + t541 * t554;
t259 = pkin(2) * t451 + pkin(3) * t504 + pkin(7) * t501 + t272;
t258 = -t538 * t387 + t541 * t577;
t255 = -t546 * t304 + t549 * t306;
t254 = -t546 * t303 + t549 * t305;
t245 = t648 * t541;
t244 = -t546 * t290 + t549 * t292;
t243 = -t546 * t289 + t549 * t291;
t242 = -t246 * t541 + t538 * t469;
t241 = -t246 * t538 - t541 * t469;
t238 = -t538 * t361 + t541 * t578;
t237 = -t538 * t360 + t541 * t579;
t234 = -t538 * t326 + t541 * t582;
t233 = -t538 * t325 + t541 * t583;
t232 = -t546 * t266 + t549 * t267;
t230 = -t538 * t322 + t541 * t584;
t229 = t541 * t322 + t538 * t584;
t226 = -t538 * t315 + t541 * t585;
t225 = t541 * t315 + t538 * t585;
t223 = -t538 * t310 + t541 * t586;
t222 = pkin(2) * t250 - pkin(3) * t355 + pkin(7) * t272;
t219 = -t546 * t260 + t549 * t261 + (-t381 * t538 - t382 * t541) * pkin(6);
t216 = -t538 * t301 + t541 * t587;
t215 = t541 * t301 + t538 * t587;
t213 = -t537 * t242 + t540 * t648;
t212 = t540 * t242 + t537 * t648;
t209 = -t546 * t253 + t549 * t257 + (-t330 * t538 - t332 * t541) * pkin(6);
t208 = -t546 * t252 + t549 * t256 + (-t329 * t538 - t331 * t541) * pkin(6);
t206 = t271 * t538 + t541 * t588;
t205 = -t271 * t541 + t538 * t588;
t204 = pkin(2) * t283 - pkin(3) * t375 + pkin(7) * t323 + t548 * t249 + t545 * t282;
t203 = -t537 * t230 + t540 * t236;
t202 = t540 * t230 + t537 * t236;
t201 = -pkin(1) * t381 - t538 * t259 + t541 * t555;
t200 = pkin(2) * t276 - pkin(3) * t369 + pkin(7) * t316 + t548 * t248 + t545 * t275;
t199 = -t537 * t226 + t540 * t235;
t198 = t540 * t226 + t537 * t235;
t197 = -pkin(1) * t330 - t538 * t297 + t541 * t556;
t196 = -pkin(1) * t329 - t538 * t298 + t541 * t557;
t194 = qJ(3) * t631 - t546 * t285 + (-t241 * t538 - t242 * t541) * pkin(6);
t193 = -t537 * t216 + t540 * t231;
t192 = t540 * t216 + t537 * t231;
t188 = pkin(2) * t264 + pkin(7) * t302 + t545 * t224 + (-pkin(3) - t633) * t340;
t187 = -pkin(1) * t241 + t538 * t635 + t541 * t552;
t182 = -t537 * t206 + t540 * t221;
t181 = t540 * t206 + t537 * t221;
t176 = -t538 * t217 + t541 * t589;
t175 = t541 * t217 + t538 * t589;
t174 = pkin(2) * t190 + pkin(7) * t218 + (-pkin(3) + t595) * t227;
t173 = -t546 * t195 + t549 * t211 + (-t205 * t538 - t206 * t541) * pkin(6);
t172 = -t546 * t184 + t549 * t189 + (-t229 * t538 - t230 * t541) * pkin(6);
t171 = -t546 * t183 + t549 * t186 + (-t225 * t538 - t226 * t541) * pkin(6);
t170 = -pkin(1) * t205 - t538 * t222 + t541 * t558;
t168 = -pkin(1) * t229 - t538 * t204 + t541 * t559;
t167 = -pkin(1) * t225 - t538 * t200 + t541 * t560;
t165 = -t546 * t178 + t549 * t179 + (-t215 * t538 - t216 * t541) * pkin(6);
t164 = -t537 * t176 + t540 * t177;
t163 = t540 * t176 + t537 * t177;
t162 = -pkin(1) * t215 - t538 * t188 + t541 * t561;
t161 = -t546 * t166 + t549 * t169 + (-t175 * t538 - t176 * t541) * pkin(6);
t160 = -pkin(1) * t175 - t538 * t174 + t541 * t562;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t455, 0, 0, 0, 0, 0, 0, t444, t443, 0, t287, 0, 0, 0, 0, 0, 0, t380, t379, 0, t213, 0, 0, 0, 0, 0, 0, t280, t281, t318, t182, 0, 0, 0, 0, 0, 0, t199, t203, t193, t164; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t454, 0, 0, 0, 0, 0, 0, t442, -t567, 0, t286, 0, 0, 0, 0, 0, 0, t378, t377, 0, t212, 0, 0, 0, 0, 0, 0, t277, t278, t317, t181, 0, 0, 0, 0, 0, 0, t198, t202, t192, t163; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t613, 0, 0, 0, 0, 0, 0, t479, -t478, 0, t343, 0, 0, 0, 0, 0, 0, -t437, -t436, 0, t241, 0, 0, 0, 0, 0, 0, t329, t330, t381, t205, 0, 0, 0, 0, 0, 0, t225, t229, t215, t175; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t644, -t643, -t454, -qJ(1) * t454, 0, 0, -t443, 0, t444, t511, -qJ(1) * t442 - t537 * t353 + t540 * t389, qJ(1) * t567 - t537 * t352 + t540 * t390, -t537 * t366 + t540 * t367, -qJ(1) * t286 + t540 * t274 - t537 * t288, 0, 0, -t379, 0, t380, t511, -qJ(1) * t378 - t537 * t268 + t540 * t299, -qJ(1) * t377 - t537 * t269 + t540 * t300, -t537 * t245 + t540 * t246, -qJ(1) * t212 - t537 * t187 + t540 * t194, -t537 * t348 + t540 * t374, -t537 * t314 + t540 * t351, -t537 * t346 + t540 * t372, -t537 * t347 + t540 * t373, -t537 * t345 + t540 * t371, -t537 * t396 + t540 * t403, -qJ(1) * t277 - t537 * t196 + t540 * t208, -qJ(1) * t278 - t537 * t197 + t540 * t209, -qJ(1) * t317 - t537 * t201 + t540 * t219, -qJ(1) * t181 - t537 * t170 + t540 * t173, -t537 * t238 + t540 * t255, -t537 * t223 + t540 * t232, -t537 * t233 + t540 * t243, -t537 * t237 + t540 * t254, -t537 * t234 + t540 * t244, -t537 * t258 + t540 * t273, -qJ(1) * t198 - t537 * t167 + t540 * t171, -qJ(1) * t202 - t537 * t168 + t540 * t172, -qJ(1) * t192 - t537 * t162 + t540 * t165, -qJ(1) * t163 - t537 * t160 + t540 * t161; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t643, -t644, t455, qJ(1) * t455, 0, 0, t567, 0, t442, -t602, qJ(1) * t444 + t540 * t353 + t537 * t389, qJ(1) * t443 + t540 * t352 + t537 * t390, t540 * t366 + t537 * t367, qJ(1) * t287 + t537 * t274 + t540 * t288, 0, 0, -t377, 0, t378, -t602, qJ(1) * t380 + t540 * t268 + t537 * t299, qJ(1) * t379 + t540 * t269 + t537 * t300, t540 * t245 + t537 * t246, qJ(1) * t213 + t540 * t187 + t537 * t194, t540 * t348 + t537 * t374, t540 * t314 + t537 * t351, t540 * t346 + t537 * t372, t540 * t347 + t537 * t373, t540 * t345 + t537 * t371, t540 * t396 + t537 * t403, qJ(1) * t280 + t540 * t196 + t537 * t208, qJ(1) * t281 + t540 * t197 + t537 * t209, qJ(1) * t318 + t540 * t201 + t537 * t219, qJ(1) * t182 + t540 * t170 + t537 * t173, t540 * t238 + t537 * t255, t540 * t223 + t537 * t232, t540 * t233 + t537 * t243, t540 * t237 + t537 * t254, t540 * t234 + t537 * t244, t540 * t258 + t537 * t273, qJ(1) * t199 + t540 * t167 + t537 * t171, qJ(1) * t203 + t540 * t168 + t537 * t172, qJ(1) * t193 + t540 * t162 + t537 * t165, qJ(1) * t164 + t540 * t160 + t537 * t161; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t506, t507, 0, 0, 0, 0, t478, 0, t479, t523, pkin(1) * t481 - t541 * t424 + t538 * t593, -pkin(1) * t480 - t541 * t425 + t538 * t594, t368 * t538, pkin(1) * t344 + t538 * t632, 0, 0, t436, 0, -t437, t523, -pkin(1) * t440 + t541 * t349 + t538 * t554, -pkin(1) * t636 + t541 * t350 + t538 * t553, t648 * t538, pkin(1) * t242 + t538 * t552 - t541 * t635, t541 * t460 + t538 * t570, t541 * t446 + t538 * t576, t541 * t463 + t538 * t572, -t541 * t459 + t538 * t571, t541 * t461 + t538 * t573, t568 * t538, pkin(1) * t331 + t541 * t298 + t538 * t557, pkin(1) * t332 + t541 * t297 + t538 * t556, pkin(1) * t382 + t541 * t259 + t538 * t555, pkin(1) * t206 + t541 * t222 + t538 * t558, t541 * t361 + t538 * t578, t541 * t310 + t538 * t586, t541 * t325 + t538 * t583, t541 * t360 + t538 * t579, t541 * t326 + t538 * t582, t541 * t387 + t538 * t577, pkin(1) * t226 + t541 * t200 + t538 * t560, pkin(1) * t230 + t541 * t204 + t538 * t559, pkin(1) * t216 + t541 * t188 + t538 * t561, pkin(1) * t176 + t541 * t174 + t538 * t562;];
tauB_reg = t1;
