% Calculate inertial parameters regressor of coriolis matrix for
% S5PRPRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d4,d5,theta1,theta3]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:52
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PRPRR4_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRR4_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRR4_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5PRPRR4_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:51:40
% EndTime: 2019-12-05 15:51:46
% DurationCPUTime: 2.56s
% Computational Cost: add. (2827->229), mult. (7569->376), div. (0->0), fcn. (8304->10), ass. (0->180)
t195 = sin(qJ(5));
t303 = -t195 / 0.2e1;
t307 = 0.2e1 * t195;
t198 = cos(qJ(5));
t294 = cos(pkin(10));
t186 = -t294 * pkin(2) - pkin(3);
t196 = sin(qJ(4));
t199 = cos(qJ(4));
t226 = -t199 * pkin(4) - t196 * pkin(8);
t202 = t226 + t186;
t194 = sin(pkin(10));
t185 = t194 * pkin(2) + pkin(7);
t271 = t199 * t185;
t248 = t195 * t271;
t128 = -t198 * t202 + t248;
t306 = t128 * t303 + t271 / 0.2e1;
t293 = sin(pkin(5));
t224 = t294 * t293;
t197 = sin(qJ(2));
t233 = t197 * t293;
t300 = cos(qJ(2));
t155 = t194 * t233 - t300 * t224;
t283 = t155 * t198;
t228 = t293 * t300;
t156 = t194 * t228 + t197 * t224;
t295 = cos(pkin(5));
t131 = t156 * t199 + t295 * t196;
t288 = t131 * t195;
t79 = -t283 + t288;
t305 = t79 / 0.2e1;
t192 = t198 ^ 2;
t304 = -t192 / 0.2e1;
t302 = -t196 / 0.2e1;
t301 = t198 / 0.2e1;
t299 = t196 * pkin(4);
t298 = t199 * pkin(8);
t191 = t196 ^ 2;
t193 = t199 ^ 2;
t272 = t198 * t196;
t247 = t185 * t272;
t173 = -t298 + t299;
t277 = t195 * t173;
t143 = -t247 + t277;
t285 = t143 * t196;
t276 = t195 * t196;
t169 = t185 * t276;
t274 = t198 * t173;
t142 = t169 + t274;
t286 = t142 * t196;
t246 = t198 * t271;
t129 = t195 * t202 + t246;
t291 = t129 * t199;
t292 = t128 * t199;
t17 = (t285 / 0.2e1 + t291 / 0.2e1) * t198 + (-t286 / 0.2e1 + t292 / 0.2e1) * t195 + (t191 / 0.2e1 - t193 / 0.2e1) * t185;
t297 = t17 * qJD(4);
t296 = t195 * t79;
t130 = t156 * t196 - t295 * t199;
t290 = t130 * t196;
t58 = t130 * t198;
t289 = t131 * t185;
t287 = t131 * t199;
t284 = t155 * t185;
t89 = t155 * t196;
t91 = t155 * t199;
t282 = t156 * t195;
t281 = t156 * t198;
t190 = t195 ^ 2;
t280 = t190 * t199;
t279 = t191 * t195;
t275 = t196 * t199;
t273 = t198 * t191;
t22 = (t156 - t287 - t290) * t155;
t270 = t22 * qJD(1);
t86 = t195 * t91 + t281;
t87 = -t198 * t91 + t282;
t213 = t87 * t301 + t86 * t303;
t236 = t91 / 0.2e1;
t23 = (t236 + t213) * t196;
t269 = t23 * qJD(1);
t45 = t143 * t199 + (-t129 + 0.2e1 * t246) * t196;
t268 = t45 * qJD(2);
t267 = t190 + t192;
t178 = t192 - t190;
t179 = t193 - t191;
t266 = qJD(2) * t199;
t265 = qJD(4) * t195;
t264 = qJD(4) * t198;
t263 = qJD(5) * t195;
t262 = qJD(5) * t198;
t261 = qJD(5) * t199;
t260 = t131 * qJD(4);
t259 = t155 * qJD(2);
t258 = t156 * qJD(2);
t161 = (t190 / 0.2e1 + t304) * t196;
t257 = t161 * qJD(5);
t166 = t179 * t195;
t256 = t166 * qJD(2);
t167 = t198 * t193 - t273;
t255 = t167 * qJD(2);
t254 = t179 * qJD(2);
t253 = t196 * qJD(2);
t252 = t196 * qJD(4);
t251 = t196 * qJD(5);
t250 = t199 * qJD(4);
t249 = t155 * pkin(4) / 0.2e1;
t245 = t198 * t253;
t244 = t195 * t261;
t243 = t198 * t261;
t242 = t186 * t253;
t241 = t186 * t266;
t240 = t195 * t262;
t239 = t195 * t264;
t238 = t196 * t250;
t183 = t199 * t253;
t237 = t198 * t252;
t235 = -t276 / 0.2e1;
t234 = t272 / 0.2e1;
t232 = t267 * t130;
t231 = -qJD(5) + t266;
t230 = t191 * t240;
t229 = t195 * t237;
t227 = t283 / 0.2e1 + t305;
t225 = -t156 / 0.2e1 + t290 / 0.2e1;
t217 = t131 * t198 + t155 * t195;
t209 = t217 * t198;
t6 = (t209 / 0.2e1 + t296 / 0.2e1 - t131 / 0.2e1) * t199 + (t304 - t190 / 0.2e1 + 0.1e1 / 0.2e1) * t290;
t8 = (t131 - t209 - t296) * t130;
t223 = t8 * qJD(1) + t6 * qJD(3);
t7 = -t130 * t89 + t217 * t87 - t79 * t86;
t222 = t7 * qJD(1) + t23 * qJD(3);
t200 = (t217 * t303 + t79 * t301) * t199;
t10 = t200 - t213;
t24 = (t286 - t292) * t198 + (t285 + t291) * t195;
t221 = t10 * qJD(1) - t24 * qJD(2);
t13 = (-t288 / 0.2e1 + t227) * t196;
t44 = t128 * t196 + (t142 - 0.2e1 * t169) * t199;
t220 = -t13 * qJD(1) - t44 * qJD(2);
t18 = (-t287 / 0.2e1 - t225) * t198;
t93 = -t185 * t273 - t291;
t219 = t18 * qJD(1) + t93 * qJD(2);
t19 = t225 * t195 + t227 * t199;
t92 = -t185 * t279 - t292;
t218 = t19 * qJD(1) - t92 * qJD(2);
t216 = -t142 * t195 + t143 * t198;
t215 = t231 * t196;
t214 = t298 / 0.2e1 - t299 / 0.2e1;
t207 = -t173 / 0.2e1 + t214;
t132 = t207 * t195;
t212 = pkin(4) * t264 + t132 * qJD(2);
t133 = t207 * t198;
t211 = pkin(4) * t265 - t133 * qJD(2);
t210 = t198 * t215;
t146 = -t161 * qJD(2) + t239;
t208 = t213 * pkin(8);
t135 = t195 * qJD(2) * t273 + t161 * qJD(4);
t165 = t178 * t191;
t206 = t165 * qJD(2) + 0.2e1 * t229;
t205 = -t178 * qJD(4) + t245 * t307;
t201 = t142 * t305 - t217 * t143 / 0.2e1;
t2 = t196 * t249 + t289 * t302 + t208 + (t129 * t301 - t306) * t130 + t201;
t28 = t185 ^ 2 * t275 - t128 * t142 + t129 * t143;
t204 = -t2 * qJD(1) + t28 * qJD(2) + t17 * qJD(3);
t153 = (-0.1e1 + t267) * t275;
t203 = t6 * qJD(1) + t17 * qJD(2) + t153 * qJD(3);
t188 = t192 * t199;
t187 = t252 / 0.2e1;
t182 = t195 * t252;
t164 = t183 - t251 / 0.2e1;
t134 = t191 * t284;
t95 = t169 + t274 / 0.2e1 + t214 * t198;
t94 = t247 - t277 / 0.2e1 - t214 * t195;
t56 = t130 * t195;
t21 = t217 * t199 / 0.2e1 + t130 * t234 + t195 * t236 + t281 / 0.2e1;
t20 = -t79 * t199 / 0.2e1 + t130 * t235 + t198 * t236 - t282 / 0.2e1;
t15 = t131 * t234 + t155 * t235 + t217 * t302;
t14 = t79 * t302 + t131 * t276 / 0.2e1 + t155 * t234;
t9 = t200 + t213;
t3 = -t129 * t58 / 0.2e1 + (t289 / 0.2e1 + t249) * t196 + t208 - t201 + t306 * t130;
t1 = t23 * qJD(2) + t6 * qJD(4);
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t7 * qJD(2) + t8 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(2) * t233, -qJD(2) * t228, 0, 0, 0, 0, 0, 0, 0, 0, -t258, t259, 0, (-t155 * t194 - t294 * t156) * qJD(2) * pkin(2), 0, 0, 0, 0, 0, 0, t89 * qJD(4) - t199 * t258, t91 * qJD(4) + t156 * t253, (-t191 - t193) * t259, t270 + (t156 * t186 - t193 * t284 - t134) * qJD(2), 0, 0, 0, 0, 0, 0, (-t155 * t279 - t86 * t199) * qJD(2) + t14 * qJD(4) + t21 * qJD(5), (-t155 * t273 + t87 * t199) * qJD(2) + t15 * qJD(4) + t20 * qJD(5), t9 * qJD(4) + (-t195 * t87 - t198 * t86) * t253, (-t86 * t128 + t87 * t129 - t134) * qJD(2) + t3 * qJD(4) + t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89 * qJD(2) - t260, t91 * qJD(2) + t130 * qJD(4), 0, 0, 0, 0, 0, 0, 0, 0, t14 * qJD(2) + t56 * qJD(5) - t198 * t260, t15 * qJD(2) + t58 * qJD(5) + t195 * t260, t9 * qJD(2) - qJD(4) * t232, t3 * qJD(2) + (-t131 * pkin(4) - pkin(8) * t232) * qJD(4) + t223; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21 * qJD(2) + t56 * qJD(4) - qJD(5) * t217, t20 * qJD(2) + t58 * qJD(4) + t79 * qJD(5), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t270, 0, 0, 0, 0, 0, 0, -t13 * qJD(4) - t18 * qJD(5), -t19 * qJD(5), t10 * qJD(4), -t2 * qJD(4) - t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t238, t179 * qJD(4), 0, -t238, 0, 0, t186 * t252, t186 * t250, 0, 0, t192 * t238 - t230, -t165 * qJD(5) - 0.2e1 * t199 * t229, -t167 * qJD(4) + t196 * t244, t190 * t238 + t230, t166 * qJD(4) + t196 * t243, -t238, -t44 * qJD(4) - t93 * qJD(5), t45 * qJD(4) + t92 * qJD(5), -t24 * qJD(4), t28 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t269 + t297; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t183, t254, t250, -t183, -t252, 0, -t185 * t250 + t242, t185 * t252 + t241, 0, 0, -t257 + (t192 * t253 + t239) * t199, (t188 - t280) * qJD(4) + (-qJD(5) - t266) * t272 * t307, t182 - t255, t257 + (t190 * t253 - t239) * t199, t237 + t256, -t164, (t195 * t226 - t246) * qJD(4) + t95 * qJD(5) + t220, t268 + (t198 * t226 + t248) * qJD(4) + t94 * qJD(5), qJD(4) * t216 + t221, (-pkin(4) * t271 + pkin(8) * t216) * qJD(4) + t204; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t135, -t206, t195 * t215, t135, t210, t187, t95 * qJD(4) - t129 * qJD(5) - t219, t94 * qJD(4) + t128 * qJD(5) - t218, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t269 + t297; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t153 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t252, -t250, 0, 0, 0, 0, 0, 0, 0, 0, -t237 - t244, t182 - t243, (t188 + t280) * qJD(4), (t267 * t298 - t299) * qJD(4) + t203; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t195 * t250 - t198 * t251, t195 * t251 - t198 * t250, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t13 * qJD(2), 0, -t10 * qJD(2), t2 * qJD(2) - t223; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t183, -t254, 0, t183, 0, 0, -t242, -t241, 0, 0, -t183 * t192 - t257, t210 * t307, -t243 + t255, -t183 * t190 + t257, t244 - t256, t164, t133 * qJD(5) - t220, -t132 * qJD(5) - t268, -t221, -t204; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t203; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t240, t178 * qJD(5), 0, -t240, 0, 0, -pkin(4) * t263, -pkin(4) * t262, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t146, -t205, -t231 * t198, -t146, t231 * t195, -t253 / 0.2e1, -pkin(8) * t262 - t211, pkin(8) * t263 - t212, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18 * qJD(2), t19 * qJD(2), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t135, t206, (-t195 * t253 + t264) * t199, -t135, (-t245 - t265) * t199, t187, -t133 * qJD(4) + t219, t132 * qJD(4) + t218, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t146, t205, t198 * t266, t146, -t195 * t266, t253 / 0.2e1, t211, t212, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t4;
