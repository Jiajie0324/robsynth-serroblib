% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S5RRPRR13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
% 
% Output:
% MMD_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:34
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S5RRPRR13_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR13_inertiaDJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR13_inertiaDJ_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR13_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:33:52
% EndTime: 2019-12-31 20:34:01
% DurationCPUTime: 3.02s
% Computational Cost: add. (3583->247), mult. (8558->468), div. (0->0), fcn. (7909->8), ass. (0->128)
t164 = cos(qJ(4));
t135 = qJD(4) * t164;
t88 = cos(pkin(9));
t125 = t88 * t135;
t162 = sin(qJ(4));
t134 = qJD(4) * t162;
t87 = sin(pkin(9));
t74 = t87 * t134;
t116 = t74 - t125;
t175 = -0.2e1 * t116;
t174 = t162 * t88 + t164 * t87;
t113 = t162 * t87 - t164 * t88;
t91 = cos(qJ(2));
t154 = t91 * qJD(2);
t90 = sin(qJ(2));
t170 = t174 * t90;
t35 = qJD(4) * t170 + t113 * t154;
t173 = t174 * t35;
t160 = pkin(7) + qJ(3);
t172 = t174 * t160;
t159 = t88 * t134 + t87 * t135;
t171 = 0.2e1 * t159;
t169 = (t90 ^ 2 - t91 ^ 2) * qJD(2);
t168 = pkin(2) * t90;
t82 = t90 * pkin(6);
t167 = t91 * pkin(2);
t166 = t91 * pkin(4);
t165 = t91 * pkin(6);
t163 = cos(qJ(5));
t161 = t87 * t90;
t142 = t87 * pkin(6) + pkin(3);
t102 = -t142 * t91 + (-t160 * t90 - pkin(1) - t167) * t88;
t38 = t162 * t102;
t122 = -t90 * qJ(3) - t167;
t117 = -pkin(1) + t122;
t78 = t88 * t165;
t51 = t87 * t117 + t78;
t46 = -pkin(7) * t161 + t51;
t21 = t164 * t46 + t38;
t123 = t164 * t160;
t124 = t160 * t162;
t48 = t88 * t123 - t87 * t124;
t147 = t87 * t154;
t80 = pkin(6) * t154;
t60 = pkin(3) * t147 + t80;
t66 = pkin(3) * t161 + t82;
t157 = qJD(3) * t91;
t89 = sin(qJ(5));
t156 = qJD(5) * t89;
t81 = t90 * qJD(2);
t155 = t90 * qJD(3);
t153 = t87 * t165;
t152 = t88 * t82;
t151 = -0.2e1 * pkin(1) * qJD(2);
t150 = -t90 * t125 - t154 * t174;
t149 = pkin(4) * t81;
t148 = pkin(4) * t156;
t146 = t87 * t155;
t145 = t88 * t154;
t144 = t88 * t155;
t143 = t90 * t154;
t79 = -t88 * pkin(3) - pkin(2);
t141 = t159 * pkin(4);
t17 = -pkin(8) * t170 + t21;
t138 = t163 * t17;
t133 = qJD(5) * t163;
t132 = t164 * qJD(3);
t131 = t162 * qJD(3);
t130 = 0.2e1 * t143;
t129 = t87 * t145;
t128 = pkin(4) * t133;
t83 = t87 ^ 2;
t84 = t88 ^ 2;
t127 = 0.2e1 * (t83 + t84) * qJD(3);
t126 = -0.2e1 * t169;
t39 = t164 * t102;
t20 = -t162 * t46 + t39;
t121 = -qJ(3) * t91 + t168;
t44 = -t144 + (pkin(6) * t161 + t121 * t88) * qJD(2);
t45 = -t146 + (t121 * t87 - t152) * qJD(2);
t120 = -t44 * t87 + t45 * t88;
t57 = t113 * t90;
t114 = t57 * pkin(8) + t20;
t108 = t114 - t166;
t103 = t163 * t108;
t115 = -t160 * t91 + t168;
t95 = -t144 + (t115 * t88 + t142 * t90) * qJD(2);
t98 = -t146 + (t115 * t87 - t152) * qJD(2);
t11 = -qJD(4) * t38 - t46 * t135 - t162 * t98 + t164 * t95;
t92 = t35 * pkin(8) + t11 + t149;
t10 = -qJD(4) * t39 + t134 * t46 - t162 * t95 - t164 * t98;
t111 = -t74 * t90 - t150;
t96 = -pkin(8) * t111 - t10;
t1 = -qJD(5) * t103 + t156 * t17 - t163 * t96 - t89 * t92;
t107 = t89 * t170;
t106 = t163 * t113;
t105 = t163 * t170;
t104 = (qJD(4) * t124 - t132) * t87;
t41 = -t89 * t113 + t163 * t174;
t27 = t172 * qJD(4) + t131 * t87 - t88 * t132;
t101 = -pkin(8) * t174 - t172;
t9 = t89 * t108 + t138;
t100 = t89 * t101;
t99 = t163 * t101;
t97 = -t159 * pkin(8) - t27;
t94 = t163 * t92 - t89 * t96;
t93 = t74 * pkin(8) + (-t131 + (-t164 * pkin(8) - t123) * qJD(4)) * t88 + t104;
t72 = -0.2e1 * t143;
t53 = pkin(4) * t113 + t79;
t50 = t117 * t88 - t153;
t43 = pkin(4) * t170 + t66;
t40 = t174 * t89 + t106;
t34 = -pkin(8) * t113 + t48;
t33 = -t163 * t57 - t107;
t32 = -t89 * t57 + t105;
t28 = (-qJD(4) * t123 - t131) * t88 + t104;
t24 = pkin(4) * t111 + t60;
t19 = t41 * qJD(5) - t89 * t116 + t163 * t159;
t18 = qJD(5) * t106 + t163 * t116 + t156 * t174 + t89 * t159;
t16 = t163 * t34 + t100;
t15 = -t89 * t34 + t99;
t13 = -qJD(5) * t107 + t163 * t111 - t57 * t133 - t89 * t35;
t12 = qJD(5) * t105 + t89 * t111 - t57 * t156 + t163 * t35;
t8 = -t89 * t17 + t103;
t4 = -qJD(5) * t100 - t34 * t133 + t163 * t93 - t89 * t97;
t3 = -qJD(5) * t99 + t34 * t156 - t163 * t97 - t89 * t93;
t2 = -qJD(5) * t9 + t94;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t130, t126, 0, t72, 0, 0, t90 * t151, t91 * t151, 0, 0, t84 * t130, -0.4e1 * t90 * t129, 0.2e1 * t88 * t169, t83 * t130, t87 * t126, t72, -0.2e1 * t44 * t91 + 0.2e1 * (t50 + 0.2e1 * t153) * t81, 0.2e1 * t45 * t91 + 0.2e1 * (-t51 + 0.2e1 * t78) * t81, 0.2e1 * (-t44 * t88 - t45 * t87) * t90 + 0.2e1 * (-t50 * t88 - t51 * t87) * t154, 0.2e1 * pkin(6) ^ 2 * t143 + 0.2e1 * t50 * t44 + 0.2e1 * t51 * t45, 0.2e1 * t57 * t35, -0.2e1 * t57 * t150 + 0.2e1 * (-t57 * t74 + t173) * t90, 0.2e1 * t35 * t91 - 0.2e1 * t57 * t81, 0.2e1 * t111 * t170, -0.2e1 * t150 * t91 + 0.2e1 * (-qJD(2) * t170 - t74 * t91) * t90, t72, -0.2e1 * t11 * t91 + 0.2e1 * t111 * t66 + 0.2e1 * t170 * t60 + 0.2e1 * t20 * t81, -0.2e1 * t10 * t91 - 0.2e1 * t21 * t81 - 0.2e1 * t66 * t35 - 0.2e1 * t60 * t57, 0.2e1 * t10 * t170 + 0.2e1 * t11 * t57 - 0.2e1 * t111 * t21 + 0.2e1 * t20 * t35, -0.2e1 * t21 * t10 + 0.2e1 * t20 * t11 + 0.2e1 * t66 * t60, -0.2e1 * t33 * t12, 0.2e1 * t12 * t32 - 0.2e1 * t33 * t13, 0.2e1 * t12 * t91 + 0.2e1 * t33 * t81, 0.2e1 * t32 * t13, 0.2e1 * t13 * t91 - 0.2e1 * t32 * t81, t72, 0.2e1 * t43 * t13 - 0.2e1 * t2 * t91 + 0.2e1 * t24 * t32 + 0.2e1 * t8 * t81, -0.2e1 * t1 * t91 - 0.2e1 * t43 * t12 + 0.2e1 * t24 * t33 - 0.2e1 * t9 * t81, 0.2e1 * t1 * t32 + 0.2e1 * t8 * t12 - 0.2e1 * t9 * t13 - 0.2e1 * t2 * t33, -0.2e1 * t9 * t1 + 0.2e1 * t8 * t2 + 0.2e1 * t43 * t24; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t154, 0, -t81, 0, -t80, pkin(6) * t81, 0, 0, t129, (-t83 + t84) * t154, t87 * t81, -t129, t88 * t81, 0, t87 * t157 + (t122 * t87 - t78) * qJD(2), t88 * t157 + (t122 * t88 + t153) * qJD(2), t120, -pkin(2) * t80 + (-t50 * t87 + t51 * t88) * qJD(3) + t120 * qJ(3), t116 * t57 - t173, -t111 * t174 + t35 * t113 + t116 * t170 + t57 * t159, t116 * t91 + t174 * t81, t111 * t113 + t159 * t170, -t113 * t81 + t159 * t91, 0, t79 * t111 + t60 * t113 + t66 * t159 - t172 * t81 - t28 * t91, -t116 * t66 + t174 * t60 - t27 * t91 - t79 * t35 - t48 * t81, t10 * t113 - t11 * t174 - t48 * t111 + t20 * t116 - t21 * t159 + t170 * t27 - t172 * t35 + t28 * t57, -t10 * t48 - t11 * t172 + t20 * t28 - t21 * t27 + t60 * t79, -t12 * t41 - t33 * t18, t12 * t40 - t41 * t13 + t18 * t32 - t33 * t19, t18 * t91 + t41 * t81, t13 * t40 + t32 * t19, t19 * t91 - t40 * t81, 0, t53 * t13 + t141 * t32 + t15 * t81 + t43 * t19 + t24 * t40 - t4 * t91, -t53 * t12 + t141 * t33 - t16 * t81 - t43 * t18 + t24 * t41 - t3 * t91, t1 * t40 + t15 * t12 - t16 * t13 + t8 * t18 - t9 * t19 - t2 * t41 + t3 * t32 - t4 * t33, -t1 * t16 + t141 * t43 + t2 * t15 + t24 * t53 - t9 * t3 + t8 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t127, qJ(3) * t127, t174 * t175, 0.2e1 * t116 * t113 - 0.2e1 * t159 * t174, 0, t113 * t171, 0, 0, t79 * t171, t79 * t175, 0.2e1 * t27 * t113 - 0.2e1 * t116 * t172 - 0.2e1 * t48 * t159 - 0.2e1 * t174 * t28, -0.2e1 * t172 * t28 - 0.2e1 * t48 * t27, -0.2e1 * t41 * t18, 0.2e1 * t18 * t40 - 0.2e1 * t41 * t19, 0, 0.2e1 * t40 * t19, 0, 0, 0.2e1 * t141 * t40 + 0.2e1 * t53 * t19, 0.2e1 * t141 * t41 - 0.2e1 * t53 * t18, 0.2e1 * t15 * t18 - 0.2e1 * t16 * t19 + 0.2e1 * t3 * t40 - 0.2e1 * t4 * t41, 0.2e1 * t141 * t53 + 0.2e1 * t15 * t4 - 0.2e1 * t16 * t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t147, t145, 0, t80, 0, 0, 0, 0, 0, 0, t111, -t35, 0, t60, 0, 0, 0, 0, 0, 0, t13, -t12, 0, t24; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t159, -t116, 0, 0, 0, 0, 0, 0, 0, 0, t19, -t18, 0, t141; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t35, 0, -t111, t81, t11, t10, 0, 0, 0, 0, -t12, 0, -t13, t81, t163 * t149 + (-t138 + (-t114 + 0.2e1 * t166) * t89) * qJD(5) + t94, (t133 * t91 - t81 * t89) * pkin(4) + t1, (t163 * t12 - t13 * t89 + (-t163 * t32 + t33 * t89) * qJD(5)) * pkin(4), (t163 * t2 - t1 * t89 + (t163 * t9 - t8 * t89) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t116, 0, -t159, 0, t28, t27, 0, 0, 0, 0, -t18, 0, -t19, 0, t4, t3, (t163 * t18 - t19 * t89 + (-t163 * t40 + t41 * t89) * qJD(5)) * pkin(4), (t163 * t4 - t3 * t89 + (-t15 * t89 + t163 * t16) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t148, -0.2e1 * t128, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t12, 0, -t13, t81, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t18, 0, -t19, 0, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t148, -t128, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t5;
