% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPRR13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:34
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPRR13_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR13_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR13_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR13_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR13_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR13_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:34:08
% EndTime: 2019-12-31 20:34:27
% DurationCPUTime: 15.47s
% Computational Cost: add. (103370->668), mult. (226569->1023), div. (0->0), fcn. (161738->10), ass. (0->464)
t752 = sin(pkin(9));
t756 = sin(qJ(2));
t786 = qJD(1) * qJD(2);
t743 = t756 * t786;
t760 = cos(qJ(2));
t783 = t760 * qJDD(1);
t720 = -t743 + t783;
t753 = cos(pkin(9));
t790 = qJD(1) * t756;
t711 = -t753 * qJD(2) + t752 * t790;
t712 = t752 * qJD(2) + t753 * t790;
t819 = t712 * t711;
t766 = -t720 - t819;
t835 = t752 * t766;
t834 = t753 * t766;
t754 = sin(qJ(5));
t713 = -qJDD(4) + t720;
t709 = -qJDD(5) + t713;
t755 = sin(qJ(4));
t759 = cos(qJ(4));
t670 = t759 * t711 + t755 * t712;
t672 = -t755 * t711 + t759 * t712;
t758 = cos(qJ(5));
t618 = t758 * t670 + t754 * t672;
t620 = -t754 * t670 + t758 * t672;
t821 = t620 * t618;
t763 = -t709 - t821;
t833 = t754 * t763;
t820 = t672 * t670;
t765 = -t713 - t820;
t832 = t755 * t765;
t831 = t758 * t763;
t830 = t759 * t765;
t789 = t760 * qJD(1);
t740 = -qJD(4) + t789;
t732 = -qJD(5) + t740;
t604 = t618 * t732;
t775 = t760 * t786;
t785 = t756 * qJDD(1);
t719 = t775 + t785;
t693 = t752 * qJDD(2) + t753 * t719;
t767 = t753 * qJDD(2) - t752 * t719;
t773 = t755 * t693 - t759 * t767;
t600 = -t672 * qJD(4) - t773;
t601 = -t670 * qJD(4) + t759 * t693 + t755 * t767;
t764 = t618 * qJD(5) - t754 * t600 - t758 * t601;
t829 = t604 - t764;
t658 = t670 * t740;
t578 = t658 - t601;
t828 = t658 + t601;
t699 = t711 * t789;
t663 = -t693 + t699;
t700 = t712 * t789;
t661 = t767 - t700;
t774 = -t758 * t600 + t754 * t601;
t494 = (qJD(5) + t732) * t620 + t774;
t574 = (qJD(4) + t740) * t672 + t773;
t616 = t618 ^ 2;
t617 = t620 ^ 2;
t827 = t670 ^ 2;
t669 = t672 ^ 2;
t826 = t711 ^ 2;
t710 = t712 ^ 2;
t731 = t732 ^ 2;
t738 = t740 ^ 2;
t825 = qJD(2) ^ 2;
t824 = pkin(2) * t756;
t823 = pkin(2) * t760;
t822 = t760 * g(3);
t818 = t732 * t754;
t817 = t732 * t758;
t816 = t740 * t755;
t815 = t740 * t759;
t749 = t756 ^ 2;
t762 = qJD(1) ^ 2;
t814 = t749 * t762;
t757 = sin(qJ(1));
t761 = cos(qJ(1));
t729 = t757 * g(1) - t761 * g(2);
t705 = qJDD(1) * pkin(1) + t762 * pkin(6) + t729;
t768 = t719 + t775;
t631 = -t768 * qJ(3) + (-t720 + t743) * pkin(2) - t705;
t730 = t761 * g(1) + t757 * g(2);
t706 = -t762 * pkin(1) + qJDD(1) * pkin(6) - t730;
t689 = -t756 * g(3) + t760 * t706;
t769 = -qJ(3) * t756 - t823;
t717 = t769 * qJD(1);
t640 = -t825 * pkin(2) + qJDD(2) * qJ(3) + t717 * t789 + t689;
t581 = 0.2e1 * qJD(3) * t712 - t753 * t631 + t752 * t640;
t541 = t766 * pkin(3) + pkin(7) * t663 - t581;
t582 = -0.2e1 * qJD(3) * t711 + t752 * t631 + t753 * t640;
t694 = -pkin(3) * t789 - t712 * pkin(7);
t546 = -t826 * pkin(3) + pkin(7) * t767 + t694 * t789 + t582;
t481 = -t759 * t541 + t755 * t546;
t482 = t755 * t541 + t759 * t546;
t428 = -t759 * t481 + t755 * t482;
t813 = t752 * t428;
t639 = t822 + qJDD(3) - t825 * qJ(3) - qJDD(2) * pkin(2) + (qJD(1) * t717 + t706) * t756;
t812 = t752 * t639;
t664 = t720 - t819;
t811 = t752 * t664;
t810 = t753 * t428;
t809 = t753 * t639;
t808 = t753 * t664;
t584 = -t767 * pkin(3) - t826 * pkin(7) + t712 * t694 + t639;
t647 = -t740 * pkin(4) - t672 * pkin(8);
t503 = -t600 * pkin(4) - t827 * pkin(8) + t672 * t647 + t584;
t807 = t754 * t503;
t553 = t709 - t821;
t806 = t754 * t553;
t452 = t765 * pkin(4) + pkin(8) * t578 - t481;
t458 = -t827 * pkin(4) + t600 * pkin(8) + t740 * t647 + t482;
t406 = -t758 * t452 + t754 * t458;
t407 = t754 * t452 + t758 * t458;
t376 = -t758 * t406 + t754 * t407;
t805 = t755 * t376;
t804 = t755 * t584;
t606 = t713 - t820;
t803 = t755 * t606;
t802 = t756 * t705;
t801 = t756 * t720;
t739 = t760 * t762 * t756;
t727 = -t739 + qJDD(2);
t800 = t756 * t727;
t728 = qJDD(2) + t739;
t799 = t756 * t728;
t798 = t758 * t503;
t797 = t758 * t553;
t796 = t759 * t376;
t795 = t759 * t584;
t794 = t759 * t606;
t793 = t760 * t705;
t792 = t760 * t727;
t750 = t760 ^ 2;
t791 = t749 + t750;
t784 = t757 * qJDD(1);
t782 = t761 * qJDD(1);
t781 = t756 * t821;
t780 = t756 * t820;
t779 = t756 * t819;
t778 = t760 * t821;
t777 = t760 * t820;
t776 = t760 * t819;
t377 = t754 * t406 + t758 * t407;
t429 = t755 * t481 + t759 * t482;
t688 = t756 * t706 + t822;
t634 = t756 * t688 + t760 * t689;
t680 = -t757 * t729 - t761 * t730;
t772 = t757 * t739;
t771 = t761 * t739;
t724 = -t757 * t762 + t782;
t770 = -pkin(5) * t724 - t757 * g(3);
t526 = -t753 * t581 + t752 * t582;
t527 = t752 * t581 + t753 * t582;
t633 = t760 * t688 - t756 * t689;
t679 = t761 * t729 - t757 * t730;
t746 = t750 * t762;
t737 = -t746 - t825;
t736 = t746 - t825;
t735 = -t814 - t825;
t734 = -t814 + t825;
t726 = t746 - t814;
t725 = t746 + t814;
t723 = t761 * t762 + t784;
t722 = t791 * qJDD(1);
t721 = -0.2e1 * t743 + t783;
t718 = 0.2e1 * t775 + t785;
t715 = t760 * t728;
t714 = t791 * t786;
t707 = t760 * t720;
t701 = -pkin(5) * t723 + t761 * g(3);
t697 = -t710 - t746;
t696 = -t710 + t746;
t695 = -t746 + t826;
t692 = t760 * t719 - t749 * t786;
t691 = -t750 * t786 - t801;
t687 = -t756 * t735 - t792;
t686 = -t756 * t734 + t715;
t685 = t760 * t737 - t799;
t684 = t760 * t736 - t800;
t683 = t760 * t735 - t800;
t682 = t756 * t737 + t715;
t677 = t761 * t722 - t757 * t725;
t676 = t757 * t722 + t761 * t725;
t675 = -t710 + t826;
t674 = -t756 * t718 + t760 * t721;
t673 = -t746 - t826;
t662 = t693 + t699;
t660 = t700 + t767;
t656 = t710 + t826;
t655 = (t711 * t753 - t712 * t752) * t789;
t654 = (-t711 * t752 - t712 * t753) * t789;
t653 = -t669 + t738;
t652 = -t738 + t827;
t651 = t761 * t687 + t757 * t718;
t650 = t761 * t685 - t757 * t721;
t649 = t757 * t687 - t761 * t718;
t648 = t757 * t685 + t761 * t721;
t646 = -pkin(6) * t683 - t793;
t645 = -pkin(6) * t682 - t802;
t644 = t753 * t693 + t752 * t700;
t643 = -t752 * t693 + t753 * t700;
t642 = -t753 * t699 - t752 * t767;
t641 = t752 * t699 - t753 * t767;
t638 = -pkin(1) * t683 + t689;
t637 = -pkin(1) * t682 + t688;
t636 = -t669 - t738;
t628 = t760 * t655 - t801;
t627 = t753 * t695 + t811;
t626 = -t752 * t696 + t834;
t625 = -t752 * t697 + t808;
t624 = -t752 * t695 + t808;
t623 = -t753 * t696 - t835;
t622 = t753 * t697 + t811;
t621 = -t669 + t827;
t615 = t761 * t634 - t757 * t705;
t614 = t757 * t634 + t761 * t705;
t613 = -t738 - t827;
t612 = t753 * t673 - t835;
t611 = t752 * t673 + t834;
t610 = t760 * t644 + t779;
t609 = t760 * t642 - t779;
t603 = -t617 + t731;
t602 = t616 - t731;
t599 = t753 * t661 - t752 * t663;
t598 = t753 * t660 - t752 * t662;
t597 = t752 * t661 + t753 * t663;
t596 = -t752 * t660 - t753 * t662;
t594 = (t670 * t759 - t672 * t755) * t740;
t593 = (t670 * t755 + t672 * t759) * t740;
t591 = -t617 - t731;
t590 = -t669 - t827;
t589 = t760 * t627 + t661 * t756;
t588 = t760 * t626 - t756 * t663;
t587 = t760 * t625 + t756 * t662;
t586 = t756 * t625 - t760 * t662;
t585 = -qJ(3) * t622 + t809;
t583 = t760 * t598 - t756 * t675;
t580 = t760 * t612 - t756 * t660;
t579 = t756 * t612 + t760 * t660;
t573 = (qJD(4) - t740) * t672 + t773;
t572 = t759 * t652 + t803;
t571 = -t755 * t653 + t830;
t570 = t755 * t652 - t794;
t569 = t759 * t653 + t832;
t568 = t759 * t601 + t672 * t816;
t567 = t755 * t601 - t672 * t815;
t566 = -t755 * t600 - t670 * t815;
t565 = t759 * t600 - t670 * t816;
t564 = -qJ(3) * t611 + t812;
t563 = t760 * t599 - t756 * t656;
t562 = t756 * t599 + t760 * t656;
t561 = -t755 * t636 + t794;
t560 = t759 * t636 + t803;
t559 = -t617 + t616;
t558 = -t731 - t616;
t557 = t759 * t613 - t832;
t556 = t755 * t613 + t830;
t552 = (t618 * t758 - t620 * t754) * t732;
t551 = (t618 * t754 + t620 * t758) * t732;
t550 = -t752 * t593 + t753 * t594;
t549 = -t753 * t593 - t752 * t594;
t548 = t761 * t587 + t757 * t622;
t547 = t757 * t587 - t761 * t622;
t544 = -pkin(2) * t622 + t582;
t543 = t760 * t550 - t756 * t713;
t542 = -pkin(2) * t611 + t581;
t538 = t761 * t580 + t757 * t611;
t537 = t757 * t580 - t761 * t611;
t536 = -t616 - t617;
t535 = t761 * t563 + t757 * t597;
t534 = t757 * t563 - t761 * t597;
t532 = -t620 * qJD(5) - t774;
t531 = t758 * t602 + t806;
t530 = -t754 * t603 + t831;
t529 = t754 * t602 - t797;
t528 = t758 * t603 + t833;
t525 = -t574 * t759 - t755 * t578;
t524 = -t759 * t573 - t755 * t828;
t523 = -t574 * t755 + t759 * t578;
t522 = -t755 * t573 + t759 * t828;
t521 = -pkin(7) * t560 + t795;
t520 = -t754 * t591 + t797;
t519 = t758 * t591 + t806;
t518 = -t752 * t570 + t753 * t572;
t517 = -t752 * t569 + t753 * t571;
t516 = -t753 * t570 - t752 * t572;
t515 = -t753 * t569 - t752 * t571;
t514 = -t752 * t567 + t753 * t568;
t513 = -t752 * t565 + t753 * t566;
t512 = -t753 * t567 - t752 * t568;
t511 = -t753 * t565 - t752 * t566;
t510 = -pkin(1) * t586 + pkin(2) * t662 - qJ(3) * t625 - t812;
t509 = -t752 * t560 + t753 * t561;
t508 = t753 * t560 + t752 * t561;
t507 = -pkin(7) * t556 + t804;
t506 = -pkin(1) * t579 - pkin(2) * t660 - qJ(3) * t612 + t809;
t505 = t760 * t527 + t756 * t639;
t504 = t756 * t527 - t760 * t639;
t502 = t758 * t558 - t833;
t501 = t754 * t558 + t831;
t500 = -t752 * t556 + t753 * t557;
t499 = t753 * t556 + t752 * t557;
t498 = t604 + t764;
t493 = (qJD(5) - t732) * t620 + t774;
t492 = t620 * t818 - t758 * t764;
t491 = -t620 * t817 - t754 * t764;
t490 = -t754 * t532 - t618 * t817;
t489 = t758 * t532 - t618 * t818;
t488 = -qJ(3) * t597 - t526;
t487 = t760 * t514 + t780;
t486 = t760 * t513 - t780;
t485 = -t755 * t551 + t759 * t552;
t484 = t759 * t551 + t755 * t552;
t483 = -pkin(3) * t828 + pkin(7) * t561 + t804;
t480 = t760 * t518 - t756 * t574;
t479 = t760 * t517 - t756 * t578;
t477 = t760 * t509 + t756 * t828;
t476 = t756 * t509 - t760 * t828;
t475 = -pkin(3) * t573 + pkin(7) * t557 - t795;
t474 = -pkin(6) * t586 - t756 * t544 + t760 * t585;
t473 = t760 * t500 + t756 * t573;
t472 = t756 * t500 - t760 * t573;
t471 = -pkin(6) * t579 - t756 * t542 + t760 * t564;
t470 = -t755 * t529 + t759 * t531;
t469 = -t755 * t528 + t759 * t530;
t468 = t759 * t529 + t755 * t531;
t467 = t759 * t528 + t755 * t530;
t466 = -pkin(1) * t562 - pkin(2) * t656 - qJ(3) * t599 - t527;
t465 = -t752 * t523 + t753 * t525;
t464 = -t752 * t522 + t753 * t524;
t463 = t753 * t523 + t752 * t525;
t462 = -t753 * t522 - t752 * t524;
t461 = -t755 * t519 + t759 * t520;
t460 = t759 * t519 + t755 * t520;
t459 = -pkin(6) * t562 + t760 * t488 + t597 * t824;
t457 = t761 * t505 + t757 * t526;
t456 = t757 * t505 - t761 * t526;
t454 = -pkin(8) * t519 + t798;
t453 = t760 * t464 - t756 * t621;
t449 = -pkin(1) * t504 + pkin(2) * t639 - qJ(3) * t527;
t448 = t760 * t465 + t756 * t590;
t447 = t756 * t465 - t760 * t590;
t446 = -pkin(8) * t501 + t807;
t445 = -t755 * t501 + t759 * t502;
t444 = t759 * t501 + t755 * t502;
t443 = -t494 * t758 - t754 * t498;
t442 = -t758 * t493 - t754 * t829;
t441 = -t494 * t754 + t758 * t498;
t440 = -t754 * t493 + t758 * t829;
t439 = -t755 * t491 + t759 * t492;
t438 = -t755 * t489 + t759 * t490;
t437 = t759 * t491 + t755 * t492;
t436 = t759 * t489 + t755 * t490;
t435 = t761 * t477 + t757 * t508;
t434 = t757 * t477 - t761 * t508;
t433 = -t752 * t484 + t753 * t485;
t432 = -t753 * t484 - t752 * t485;
t431 = t760 * t433 - t756 * t709;
t430 = -pkin(2) * t463 - pkin(3) * t523;
t427 = t761 * t473 + t757 * t499;
t426 = t757 * t473 - t761 * t499;
t425 = -pkin(2) * t508 - pkin(3) * t560 + t482;
t424 = -pkin(6) * t504 + (-qJ(3) * t760 + t824) * t526;
t423 = -pkin(2) * t499 - pkin(3) * t556 + t481;
t422 = -pkin(4) * t829 + pkin(8) * t520 + t807;
t421 = -pkin(3) * t584 + pkin(7) * t429;
t420 = -qJ(3) * t508 - t752 * t483 + t753 * t521;
t419 = -pkin(4) * t493 + pkin(8) * t502 - t798;
t418 = -t752 * t468 + t753 * t470;
t417 = -t752 * t467 + t753 * t469;
t416 = -t753 * t468 - t752 * t470;
t415 = -t753 * t467 - t752 * t469;
t414 = -qJ(3) * t499 - t752 * t475 + t753 * t507;
t413 = -pkin(7) * t523 - t428;
t412 = -t752 * t460 + t753 * t461;
t411 = t753 * t460 + t752 * t461;
t410 = t761 * t448 + t757 * t463;
t409 = t757 * t448 - t761 * t463;
t408 = -pkin(3) * t590 + pkin(7) * t525 + t429;
t404 = -t752 * t444 + t753 * t445;
t403 = t753 * t444 + t752 * t445;
t402 = -t755 * t441 + t759 * t443;
t401 = -t755 * t440 + t759 * t442;
t400 = t759 * t441 + t755 * t443;
t399 = t759 * t440 + t755 * t442;
t398 = t760 * t418 - t756 * t494;
t397 = t760 * t417 - t756 * t498;
t396 = -t752 * t437 + t753 * t439;
t395 = -t752 * t436 + t753 * t438;
t394 = -t753 * t437 - t752 * t439;
t393 = -t753 * t436 - t752 * t438;
t392 = t760 * t412 + t756 * t829;
t391 = t756 * t412 - t760 * t829;
t390 = -pkin(1) * t476 + pkin(2) * t828 - qJ(3) * t509 - t753 * t483 - t752 * t521;
t389 = t760 * t396 + t781;
t388 = t760 * t395 - t781;
t387 = t753 * t429 - t813;
t386 = t752 * t429 + t810;
t385 = -pkin(1) * t472 + pkin(2) * t573 - qJ(3) * t500 - t753 * t475 - t752 * t507;
t384 = t760 * t404 + t756 * t493;
t383 = t756 * t404 - t760 * t493;
t382 = t760 * t387 + t756 * t584;
t381 = t756 * t387 - t760 * t584;
t380 = -pkin(7) * t460 - t755 * t422 + t759 * t454;
t379 = -pkin(6) * t476 + t760 * t420 - t756 * t425;
t378 = -pkin(7) * t444 - t755 * t419 + t759 * t446;
t375 = -pkin(3) * t829 + pkin(7) * t461 + t759 * t422 + t755 * t454;
t374 = -pkin(6) * t472 + t760 * t414 - t756 * t423;
t373 = -pkin(2) * t386 - pkin(3) * t428;
t372 = t761 * t392 + t757 * t411;
t371 = t757 * t392 - t761 * t411;
t370 = -pkin(3) * t493 + pkin(7) * t445 + t759 * t419 + t755 * t446;
t369 = -pkin(4) * t503 + pkin(8) * t377;
t368 = -t752 * t400 + t753 * t402;
t367 = -t752 * t399 + t753 * t401;
t366 = t753 * t400 + t752 * t402;
t365 = -t753 * t399 - t752 * t401;
t364 = -qJ(3) * t463 - t752 * t408 + t753 * t413;
t363 = t760 * t367 - t756 * t559;
t362 = t760 * t368 + t756 * t536;
t361 = t756 * t368 - t760 * t536;
t360 = t761 * t384 + t757 * t403;
t359 = t757 * t384 - t761 * t403;
t358 = -pkin(2) * t411 - pkin(3) * t460 - pkin(4) * t519 + t407;
t357 = -pkin(8) * t441 - t376;
t356 = -pkin(4) * t536 + pkin(8) * t443 + t377;
t355 = -pkin(7) * t810 - qJ(3) * t386 - t752 * t421;
t354 = t761 * t382 + t757 * t386;
t353 = t757 * t382 - t761 * t386;
t352 = -pkin(1) * t447 + pkin(2) * t590 - qJ(3) * t465 - t753 * t408 - t752 * t413;
t351 = -pkin(2) * t403 - pkin(3) * t444 - pkin(4) * t501 + t406;
t350 = -pkin(6) * t447 + t760 * t364 - t756 * t430;
t349 = -pkin(2) * t366 - pkin(3) * t400 - pkin(4) * t441;
t348 = t759 * t377 - t805;
t347 = t755 * t377 + t796;
t346 = -pkin(1) * t381 + pkin(2) * t584 + pkin(7) * t813 - qJ(3) * t387 - t753 * t421;
t345 = -qJ(3) * t411 - t752 * t375 + t753 * t380;
t344 = t761 * t362 + t757 * t366;
t343 = t757 * t362 - t761 * t366;
t342 = -qJ(3) * t403 - t752 * t370 + t753 * t378;
t341 = -pkin(1) * t391 + pkin(2) * t829 - qJ(3) * t412 - t753 * t375 - t752 * t380;
t340 = -pkin(6) * t381 + t760 * t355 - t756 * t373;
t339 = -pkin(7) * t400 - t755 * t356 + t759 * t357;
t338 = -pkin(3) * t536 + pkin(7) * t402 + t759 * t356 + t755 * t357;
t337 = -pkin(1) * t383 + pkin(2) * t493 - qJ(3) * t404 - t753 * t370 - t752 * t378;
t336 = -t752 * t347 + t753 * t348;
t335 = t753 * t347 + t752 * t348;
t334 = -pkin(7) * t347 - pkin(8) * t796 - t755 * t369;
t333 = t760 * t336 + t756 * t503;
t332 = t756 * t336 - t760 * t503;
t331 = -pkin(6) * t391 + t760 * t345 - t756 * t358;
t330 = -pkin(3) * t503 + pkin(7) * t348 - pkin(8) * t805 + t759 * t369;
t329 = -pkin(6) * t383 + t760 * t342 - t756 * t351;
t328 = -pkin(2) * t335 - pkin(3) * t347 - pkin(4) * t376;
t327 = -qJ(3) * t366 - t752 * t338 + t753 * t339;
t326 = t761 * t333 + t757 * t335;
t325 = t757 * t333 - t761 * t335;
t324 = -pkin(1) * t361 + pkin(2) * t536 - qJ(3) * t368 - t753 * t338 - t752 * t339;
t323 = -pkin(6) * t361 + t760 * t327 - t756 * t349;
t322 = -qJ(3) * t335 - t752 * t330 + t753 * t334;
t321 = -pkin(1) * t332 + pkin(2) * t503 - qJ(3) * t336 - t753 * t330 - t752 * t334;
t320 = -pkin(6) * t332 + t760 * t322 - t756 * t328;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t723, -t724, 0, t680, 0, 0, 0, 0, 0, 0, t650, t651, t677, t615, 0, 0, 0, 0, 0, 0, t538, t548, t535, t457, 0, 0, 0, 0, 0, 0, t427, t435, t410, t354, 0, 0, 0, 0, 0, 0, t360, t372, t344, t326; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t724, -t723, 0, t679, 0, 0, 0, 0, 0, 0, t648, t649, t676, t614, 0, 0, 0, 0, 0, 0, t537, t547, t534, t456, 0, 0, 0, 0, 0, 0, t426, t434, t409, t353, 0, 0, 0, 0, 0, 0, t359, t371, t343, t325; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t682, t683, 0, -t633, 0, 0, 0, 0, 0, 0, t579, t586, t562, t504, 0, 0, 0, 0, 0, 0, t472, t476, t447, t381, 0, 0, 0, 0, 0, 0, t383, t391, t361, t332; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t724, 0, -t723, 0, t770, -t701, -t679, -pkin(5) * t679, t761 * t692 - t772, t761 * t674 - t757 * t726, t761 * t686 + t756 * t784, t761 * t691 + t772, t761 * t684 + t757 * t783, t757 * qJDD(2) + t761 * t714, -pkin(5) * t648 - t757 * t637 + t761 * t645, -pkin(5) * t649 - t757 * t638 + t761 * t646, -pkin(5) * t676 + t761 * t633, -pkin(5) * t614 - (pkin(1) * t757 - pkin(6) * t761) * t633, t761 * t610 - t757 * t643, t761 * t583 - t757 * t596, t761 * t588 - t757 * t623, t761 * t609 - t757 * t641, t761 * t589 - t757 * t624, t761 * t628 - t757 * t654, -pkin(5) * t537 + t761 * t471 - t757 * t506, -pkin(5) * t547 + t761 * t474 - t757 * t510, -pkin(5) * t534 + t761 * t459 - t757 * t466, -pkin(5) * t456 + t761 * t424 - t757 * t449, t761 * t487 - t757 * t512, t761 * t453 - t757 * t462, t761 * t479 - t757 * t515, t761 * t486 - t757 * t511, t761 * t480 - t757 * t516, t761 * t543 - t757 * t549, -pkin(5) * t426 + t761 * t374 - t757 * t385, -pkin(5) * t434 + t761 * t379 - t757 * t390, -pkin(5) * t409 + t761 * t350 - t757 * t352, -pkin(5) * t353 + t761 * t340 - t757 * t346, t761 * t389 - t757 * t394, t761 * t363 - t757 * t365, t761 * t397 - t757 * t415, t761 * t388 - t757 * t393, t761 * t398 - t757 * t416, t761 * t431 - t757 * t432, -pkin(5) * t359 + t761 * t329 - t757 * t337, -pkin(5) * t371 + t761 * t331 - t757 * t341, -pkin(5) * t343 + t761 * t323 - t757 * t324, -pkin(5) * t325 + t761 * t320 - t757 * t321; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t723, 0, t724, 0, t701, t770, t680, pkin(5) * t680, t757 * t692 + t771, t757 * t674 + t761 * t726, t757 * t686 - t756 * t782, t757 * t691 - t771, t757 * t684 - t760 * t782, -t761 * qJDD(2) + t757 * t714, pkin(5) * t650 + t761 * t637 + t757 * t645, pkin(5) * t651 + t761 * t638 + t757 * t646, pkin(5) * t677 + t757 * t633, pkin(5) * t615 - (-pkin(1) * t761 - pkin(6) * t757) * t633, t757 * t610 + t761 * t643, t757 * t583 + t761 * t596, t757 * t588 + t761 * t623, t757 * t609 + t761 * t641, t757 * t589 + t761 * t624, t757 * t628 + t761 * t654, pkin(5) * t538 + t757 * t471 + t761 * t506, pkin(5) * t548 + t757 * t474 + t761 * t510, pkin(5) * t535 + t757 * t459 + t761 * t466, pkin(5) * t457 + t757 * t424 + t761 * t449, t757 * t487 + t761 * t512, t757 * t453 + t761 * t462, t757 * t479 + t761 * t515, t757 * t486 + t761 * t511, t757 * t480 + t761 * t516, t757 * t543 + t761 * t549, pkin(5) * t427 + t757 * t374 + t761 * t385, pkin(5) * t435 + t757 * t379 + t761 * t390, pkin(5) * t410 + t757 * t350 + t761 * t352, pkin(5) * t354 + t757 * t340 + t761 * t346, t757 * t389 + t761 * t394, t757 * t363 + t761 * t365, t757 * t397 + t761 * t415, t757 * t388 + t761 * t393, t757 * t398 + t761 * t416, t757 * t431 + t761 * t432, pkin(5) * t360 + t757 * t329 + t761 * t337, pkin(5) * t372 + t757 * t331 + t761 * t341, pkin(5) * t344 + t757 * t323 + t761 * t324, pkin(5) * t326 + t757 * t320 + t761 * t321; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t729, t730, 0, 0, t768 * t756, t760 * t718 + t756 * t721, t760 * t734 + t799, -t756 * t775 + t707, t756 * t736 + t792, 0, pkin(1) * t721 + pkin(6) * t685 + t793, -pkin(1) * t718 + pkin(6) * t687 - t802, pkin(1) * t725 + pkin(6) * t722 + t634, pkin(1) * t705 + pkin(6) * t634, t756 * t644 - t776, t756 * t598 + t760 * t675, t756 * t626 + t760 * t663, t756 * t642 + t776, t756 * t627 - t661 * t760, t756 * t655 + t707, -pkin(1) * t611 + pkin(6) * t580 + t760 * t542 + t756 * t564, -pkin(1) * t622 + pkin(6) * t587 + t760 * t544 + t756 * t585, pkin(6) * t563 + t756 * t488 + (-pkin(1) - t823) * t597, pkin(6) * t505 + (-pkin(1) + t769) * t526, t756 * t514 - t777, t756 * t464 + t760 * t621, t756 * t517 + t760 * t578, t756 * t513 + t777, t756 * t518 + t760 * t574, t756 * t550 + t760 * t713, -pkin(1) * t499 + pkin(6) * t473 + t756 * t414 + t760 * t423, -pkin(1) * t508 + pkin(6) * t477 + t756 * t420 + t760 * t425, -pkin(1) * t463 + pkin(6) * t448 + t756 * t364 + t760 * t430, -pkin(1) * t386 + pkin(6) * t382 + t756 * t355 + t760 * t373, t756 * t396 - t778, t756 * t367 + t760 * t559, t756 * t417 + t760 * t498, t756 * t395 + t778, t756 * t418 + t760 * t494, t756 * t433 + t760 * t709, -pkin(1) * t403 + pkin(6) * t384 + t756 * t342 + t760 * t351, -pkin(1) * t411 + pkin(6) * t392 + t756 * t345 + t760 * t358, -pkin(1) * t366 + pkin(6) * t362 + t756 * t327 + t760 * t349, -pkin(1) * t335 + pkin(6) * t333 + t756 * t322 + t760 * t328;];
tauB_reg = t1;
