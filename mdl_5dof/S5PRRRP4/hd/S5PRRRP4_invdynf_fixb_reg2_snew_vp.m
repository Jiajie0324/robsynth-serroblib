% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRRRP4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d4,theta1]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:46
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRRRP4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRP4_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRP4_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRP4_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRP4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRRRP4_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:46:40
% EndTime: 2019-12-05 16:46:42
% DurationCPUTime: 1.82s
% Computational Cost: add. (3411->144), mult. (4863->170), div. (0->0), fcn. (3079->8), ass. (0->98)
t1055 = qJD(2) + qJD(3);
t1053 = t1055 ^ 2;
t1063 = sin(qJ(4));
t1066 = cos(qJ(4));
t1044 = t1063 * t1053 * t1066;
t1036 = qJDD(4) - t1044;
t1057 = t1063 ^ 2;
t1069 = qJD(4) ^ 2;
t1041 = t1057 * t1053 + t1069;
t1009 = t1063 * t1036 + t1066 * t1041;
t1061 = sin(pkin(8));
t1062 = cos(pkin(8));
t1065 = sin(qJ(2));
t1068 = cos(qJ(2));
t1012 = t1066 * t1036 - t1063 * t1041;
t1054 = qJDD(2) + qJDD(3);
t1079 = t1063 * t1054;
t1081 = t1055 * t1066;
t1088 = 2 * qJD(4);
t1023 = t1081 * t1088 + t1079;
t1064 = sin(qJ(3));
t1067 = cos(qJ(3));
t995 = t1064 * t1012 + t1067 * t1023;
t998 = t1067 * t1012 - t1064 * t1023;
t982 = t1065 * t995 - t1068 * t998;
t1090 = t1062 * t1009 + t1061 * t982;
t1089 = -t1061 * t1009 + t1062 * t982;
t978 = t1065 * t998 + t1068 * t995;
t1028 = t1064 * t1053 - t1067 * t1054;
t1072 = -t1067 * t1053 - t1064 * t1054;
t1085 = t1065 * t1028 + t1068 * t1072;
t1006 = t1068 * t1028 - t1065 * t1072;
t1039 = t1061 * g(1) - t1062 * g(2);
t1040 = -t1062 * g(1) - t1061 * g(2);
t1059 = -g(3) + qJDD(1);
t1019 = t1068 * t1040 + t1065 * t1059;
t1070 = qJD(2) ^ 2;
t1017 = -t1070 * pkin(2) + t1019;
t1018 = -t1065 * t1040 + t1068 * t1059;
t1071 = qJDD(2) * pkin(2) + t1018;
t993 = t1067 * t1017 + t1064 * t1071;
t991 = -t1053 * pkin(3) + t1054 * pkin(7) + t993;
t986 = -t1063 * t1039 + t1066 * t991;
t1082 = t1055 * t1063;
t1080 = t1061 * t1039;
t1077 = t1066 * t1054;
t1058 = t1066 ^ 2;
t1075 = t1057 + t1058;
t1074 = qJD(4) * t1082;
t992 = -t1064 * t1017 + t1067 * t1071;
t990 = -t1054 * pkin(3) - t1053 * pkin(7) - t992;
t1042 = -t1058 * t1053 - t1069;
t1038 = t1068 * qJDD(2) - t1065 * t1070;
t1037 = -t1065 * qJDD(2) - t1068 * t1070;
t1035 = qJDD(4) + t1044;
t1033 = t1066 * t1039;
t1031 = t1062 * t1039;
t1030 = t1075 * t1053;
t1025 = t1075 * t1054;
t1024 = -0.2e1 * t1074 + t1077;
t1022 = (-pkin(4) * t1066 - qJ(5) * t1063) * t1055;
t1011 = -t1063 * t1035 + t1066 * t1042;
t1008 = t1066 * t1035 + t1063 * t1042;
t1005 = t1067 * t1025 - t1064 * t1030;
t1002 = t1064 * t1025 + t1067 * t1030;
t1001 = -t1065 * t1018 + t1068 * t1019;
t1000 = t1068 * t1018 + t1065 * t1019;
t997 = t1067 * t1011 - t1064 * t1024;
t994 = t1064 * t1011 + t1067 * t1024;
t988 = -t1065 * t1002 + t1068 * t1005;
t987 = t1068 * t1002 + t1065 * t1005;
t985 = -t1063 * t991 - t1033;
t984 = t1062 * t988;
t983 = t1061 * t988;
t980 = -t1065 * t994 + t1068 * t997;
t977 = t1065 * t997 + t1068 * t994;
t976 = qJDD(5) + t1033 - t1069 * qJ(5) - qJDD(4) * pkin(4) + (t1022 * t1055 + t991) * t1063;
t975 = -t1069 * pkin(4) + qJDD(4) * qJ(5) + (qJD(5) * t1088) + t1022 * t1081 + t986;
t974 = -t1064 * t992 + t1067 * t993;
t973 = t1064 * t993 + t1067 * t992;
t972 = -(-t1074 + t1077) * pkin(4) + (pkin(4) * qJD(4) - (2 * qJD(5))) * t1082 + t990 - t1023 * qJ(5);
t971 = t1061 * t1008 + t1062 * t980;
t970 = -t1062 * t1008 + t1061 * t980;
t969 = -t1063 * t985 + t1066 * t986;
t968 = t1063 * t986 + t1066 * t985;
t967 = t1063 * t976 + t1066 * t975;
t966 = t1063 * t975 - t1066 * t976;
t965 = -t1065 * t973 + t1068 * t974;
t964 = t1065 * t974 + t1068 * t973;
t963 = t1064 * t990 + t1067 * t969;
t962 = t1064 * t969 - t1067 * t990;
t961 = t1064 * t972 + t1067 * t967;
t960 = t1064 * t967 - t1067 * t972;
t959 = -t1065 * t962 + t1068 * t963;
t958 = t1065 * t963 + t1068 * t962;
t957 = -t1065 * t960 + t1068 * t961;
t956 = t1065 * t961 + t1068 * t960;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1062 * t1040 - t1080, 0, 0, 0, 0, 0, 0, t1062 * t1037, -t1062 * t1038, 0, t1062 * t1001 - t1080, 0, 0, 0, 0, 0, 0, t1062 * t1085, t1062 * t1006, 0, t1062 * t965 - t1080, 0, 0, 0, 0, 0, 0, t971, t1089, t984, t1061 * t968 + t1062 * t959, 0, 0, 0, 0, 0, 0, t971, t984, -t1089, t1061 * t966 + t1062 * t957; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1061 * t1040 + t1031, 0, 0, 0, 0, 0, 0, t1061 * t1037, -t1061 * t1038, 0, t1061 * t1001 + t1031, 0, 0, 0, 0, 0, 0, t1061 * t1085, t1061 * t1006, 0, t1061 * t965 + t1031, 0, 0, 0, 0, 0, 0, t970, t1090, t983, t1061 * t959 - t1062 * t968, 0, 0, 0, 0, 0, 0, t970, t983, -t1090, t1061 * t957 - t1062 * t966; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1059, 0, 0, 0, 0, 0, 0, t1038, t1037, 0, t1000, 0, 0, 0, 0, 0, 0, -t1006, t1085, 0, t964, 0, 0, 0, 0, 0, 0, t977, -t978, t987, t958, 0, 0, 0, 0, 0, 0, t977, t987, t978, t956; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1040, 0, 0, 0, 0, 0, 0, t1037, -t1038, 0, t1001, 0, 0, 0, 0, 0, 0, t1085, t1006, 0, t965, 0, 0, 0, 0, 0, 0, t980, t982, t988, t959, 0, 0, 0, 0, 0, 0, t980, t988, -t982, t957; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1039, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1039, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1039, 0, 0, 0, 0, 0, 0, -t1008, t1009, 0, -t968, 0, 0, 0, 0, 0, 0, -t1008, 0, -t1009, -t966; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1059, 0, 0, 0, 0, 0, 0, t1038, t1037, 0, t1000, 0, 0, 0, 0, 0, 0, -t1006, t1085, 0, t964, 0, 0, 0, 0, 0, 0, t977, -t978, t987, t958, 0, 0, 0, 0, 0, 0, t977, t987, t978, t956; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1070, -qJDD(2), 0, t1019, 0, 0, 0, 0, 0, 0, t1072, t1028, 0, t974, 0, 0, 0, 0, 0, 0, t997, -t998, t1005, t963, 0, 0, 0, 0, 0, 0, t997, t1005, t998, t961; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1070, 0, t1018, 0, 0, 0, 0, 0, 0, -t1028, t1072, 0, t973, 0, 0, 0, 0, 0, 0, t994, -t995, t1002, t962, 0, 0, 0, 0, 0, 0, t994, t1002, t995, t960; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1039, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1039, 0, 0, 0, 0, 0, 0, t1008, -t1009, 0, t968, 0, 0, 0, 0, 0, 0, t1008, 0, t1009, t966; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1053, -t1054, 0, t993, 0, 0, 0, 0, 0, 0, t1011, -t1012, t1025, t969, 0, 0, 0, 0, 0, 0, t1011, t1025, t1012, t967; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1054, -t1053, 0, t992, 0, 0, 0, 0, 0, 0, t1024, -t1023, t1030, -t990, 0, 0, 0, 0, 0, 0, t1024, t1030, t1023, -t972; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1039, 0, 0, 0, 0, 0, 0, t1008, -t1009, 0, t968, 0, 0, 0, 0, 0, 0, t1008, 0, t1009, t966; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1042, -t1036, t1077, t986, 0, 0, 0, 0, 0, 0, t1042, t1077, t1036, t975; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1035, -t1041, -t1079, t985, 0, 0, 0, 0, 0, 0, t1035, -t1079, t1041, -t976; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1024, t1023, -t1030, t990, 0, 0, 0, 0, 0, 0, -t1024, -t1030, -t1023, t972; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1042, t1077, t1036, t975; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1024, -t1030, -t1023, t972; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1035, t1079, -t1041, t976;];
f_new_reg = t1;
