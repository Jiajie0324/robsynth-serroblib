% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRRRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d4,theta1]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:46
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRRRP4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRP4_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRP4_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRP4_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRP4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRRRP4_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:46:23
% EndTime: 2019-12-05 16:46:33
% DurationCPUTime: 5.97s
% Computational Cost: add. (12077->383), mult. (17201->520), div. (0->0), fcn. (10626->8), ass. (0->280)
t421 = qJD(4) ^ 2;
t408 = qJD(2) + qJD(3);
t406 = t408 ^ 2;
t415 = sin(qJ(4));
t410 = t415 ^ 2;
t482 = t410 * t406;
t391 = t421 + t482;
t418 = cos(qJ(4));
t396 = t415 * t406 * t418;
t385 = qJDD(4) - t396;
t461 = t418 * t385;
t343 = -t415 * t391 + t461;
t450 = qJD(4) * t408;
t445 = t418 * t450;
t407 = qJDD(2) + qJDD(3);
t470 = t415 * t407;
t368 = 0.2e1 * t445 + t470;
t416 = sin(qJ(3));
t419 = cos(qJ(3));
t292 = t416 * t343 + t419 * t368;
t295 = t419 * t343 - t416 * t368;
t417 = sin(qJ(2));
t420 = cos(qJ(2));
t250 = t417 * t292 - t420 * t295;
t471 = t415 * t385;
t337 = t418 * t391 + t471;
t413 = sin(pkin(8));
t414 = cos(pkin(8));
t218 = t413 * t250 + t414 * t337;
t528 = qJ(1) * t218;
t221 = t414 * t250 - t413 * t337;
t527 = qJ(1) * t221;
t246 = t420 * t292 + t417 * t295;
t526 = pkin(5) * t246;
t525 = -pkin(1) * t246 - pkin(2) * t292 - pkin(7) * t343;
t524 = -pkin(1) * t337 - pkin(5) * t250;
t473 = t415 * t368;
t446 = t415 * t450;
t460 = t418 * t407;
t428 = 0.2e1 * t446 - t460;
t498 = t428 * t418;
t315 = t498 + t473;
t411 = t418 ^ 2;
t376 = (t410 - t411) * t406;
t282 = t416 * t315 + t419 * t376;
t284 = t419 * t315 - t416 * t376;
t229 = t417 * t282 - t420 * t284;
t313 = t418 * t368 - t415 * t428;
t523 = t413 * t229 - t414 * t313;
t522 = t414 * t229 + t413 * t313;
t481 = t411 * t406;
t393 = -t421 + t481;
t341 = -t418 * t393 + t471;
t456 = t419 * t407;
t305 = t416 * t341 + t418 * t456;
t308 = t419 * t341 - t416 * t460;
t262 = t417 * t305 - t420 * t308;
t335 = t415 * t393 + t461;
t521 = t413 * t262 - t414 * t335;
t520 = t414 * t262 + t413 * t335;
t519 = pkin(6) * t292;
t466 = t416 * t407;
t371 = t419 * t406 + t466;
t374 = t416 * t406 - t456;
t322 = t417 * t371 + t420 * t374;
t518 = t413 * t322;
t517 = t414 * t322;
t515 = -pkin(2) * t337 + pkin(6) * t295;
t514 = t420 * t282 + t417 * t284;
t513 = t420 * t305 + t417 * t308;
t389 = t413 * g(1) - t414 * g(2);
t332 = pkin(6) * t371 - t419 * t389;
t497 = pkin(6) * t374 - t416 * t389;
t253 = pkin(5) * t322 + t417 * t332 + t420 * t497;
t431 = t420 * t371 - t417 * t374;
t254 = pkin(5) * t431 + t420 * t332 - t417 * t497;
t390 = t414 * g(1) + t413 * g(2);
t412 = g(3) - qJDD(1);
t361 = -t420 * t390 - t417 * t412;
t493 = qJD(2) ^ 2;
t357 = -t493 * pkin(2) + t361;
t360 = -t417 * t390 + t420 * t412;
t425 = qJDD(2) * pkin(2) - t360;
t288 = t416 * t357 - t419 * t425;
t289 = t419 * t357 + t416 * t425;
t439 = t416 * t288 + t419 * t289;
t238 = t419 * t288 - t416 * t289;
t455 = t420 * t238;
t202 = -t417 * t439 + t455;
t465 = t417 * t238;
t203 = t420 * t439 + t465;
t510 = 2 * qJD(5);
t507 = pkin(3) * t337;
t506 = pkin(7) * t337;
t379 = t414 * t389;
t347 = -t413 * t390 + t379;
t484 = qJ(5) * t415;
t492 = pkin(4) * t418;
t434 = -t484 - t492;
t367 = t434 * t408;
t278 = -t406 * pkin(3) + t407 * pkin(7) + t289;
t452 = -t418 * t278 + t415 * t389;
t432 = t418 * t408 * t367 + qJDD(4) * qJ(5) + (qJD(4) * t510) - t452;
t483 = t408 * t415;
t494 = t367 * t483 + qJDD(5);
t394 = -t421 - t481;
t384 = qJDD(4) + t396;
t472 = t415 * t384;
t340 = t418 * t394 - t472;
t291 = t416 * t340 - t419 * t428;
t294 = t419 * t340 + t416 * t428;
t245 = t420 * t291 + t417 * t294;
t491 = pkin(5) * t245;
t451 = t410 + t411;
t370 = t451 * t407;
t375 = t451 * t406;
t317 = t416 * t370 + t419 * t375;
t320 = t419 * t370 - t416 * t375;
t271 = t420 * t317 + t417 * t320;
t490 = pkin(5) * t271;
t489 = pkin(6) * t291;
t488 = pkin(6) * t317;
t462 = t418 * t384;
t334 = t415 * t394 + t462;
t487 = pkin(7) * t334;
t248 = -t417 * t291 + t420 * t294;
t216 = t413 * t248 - t414 * t334;
t486 = qJ(1) * t216;
t272 = -t417 * t317 + t420 * t320;
t485 = qJ(1) * t272;
t388 = t420 * qJDD(2) - t417 * t493;
t480 = t413 * t388;
t479 = t413 * t389;
t477 = t413 * t412;
t267 = t414 * t272;
t476 = t414 * t388;
t475 = t414 * t412;
t277 = -t407 * pkin(3) - t406 * pkin(7) + t288;
t474 = t415 * t277;
t464 = t418 * t277;
t454 = -pkin(1) * t334 + pkin(5) * t248;
t269 = t415 * t278 + t418 * t389;
t453 = t375 - t421;
t444 = -pkin(2) * t334 + pkin(6) * t294;
t443 = pkin(1) * t431 + pkin(2) * t371 + qJ(1) * t322 + t289;
t442 = pkin(1) * t322 + pkin(2) * t374 - qJ(1) * t431 + t288;
t387 = t417 * qJDD(2) + t420 * t493;
t441 = -pkin(1) * t387 + qJ(1) * t388 - t361;
t440 = pkin(1) * t388 + qJ(1) * t387 - t360;
t299 = t417 * t360 + t420 * t361;
t348 = -t414 * t390 - t479;
t437 = t416 * t396;
t436 = t419 * t396;
t243 = -pkin(3) * t334 + t269;
t433 = pkin(4) * t415 - qJ(5) * t418;
t355 = pkin(5) * t387 - t420 * t389;
t354 = -pkin(5) * t388 - t417 * t389;
t211 = t418 * t269 + t415 * t452;
t212 = t415 * t269 - t418 * t452;
t298 = t420 * t360 - t417 * t361;
t430 = t445 + t470;
t429 = -t446 + t460;
t427 = -pkin(1) * t245 - pkin(2) * t291 - pkin(7) * t340;
t426 = -qJDD(4) * pkin(4) + t269 + t494;
t424 = -t429 * pkin(4) + t277 + (-t430 - t445) * qJ(5);
t423 = -pkin(1) * t271 - pkin(2) * t317 - pkin(3) * t375 - pkin(7) * t370;
t422 = t483 * t510 - t424;
t392 = t421 - t482;
t386 = pkin(1) * t389;
t378 = t414 * t387;
t377 = t413 * t387;
t366 = t433 * t407;
t365 = t451 * t450;
t353 = t416 * qJDD(4) + t419 * t365;
t352 = -t419 * qJDD(4) + t416 * t365;
t346 = -t410 * t450 + t418 * t430;
t345 = -t411 * t450 - t415 * t429;
t342 = -t415 * t392 + t462;
t336 = -t418 * t392 - t472;
t316 = pkin(6) * t320;
t311 = t414 * t431;
t310 = t413 * t431;
t309 = t419 * t342 + t415 * t466;
t306 = t416 * t342 - t415 * t456;
t303 = t419 * t346 - t437;
t302 = t419 * t345 + t437;
t301 = t416 * t346 + t436;
t300 = t416 * t345 - t436;
t286 = -t417 * t352 + t420 * t353;
t285 = t420 * t352 + t417 * t353;
t280 = t414 * t286;
t279 = t413 * t286;
t276 = t414 * t299 - t479;
t275 = t413 * t299 + t379;
t268 = pkin(5) * t272;
t266 = t413 * t272;
t265 = qJ(1) * t267;
t264 = -t417 * t306 + t420 * t309;
t261 = t420 * t306 + t417 * t309;
t260 = -t417 * t301 + t420 * t303;
t259 = -t417 * t300 + t420 * t302;
t258 = t420 * t301 + t417 * t303;
t257 = t420 * t300 + t417 * t302;
t256 = t464 + t506;
t255 = t474 - t487;
t244 = -t452 + t507;
t242 = t421 * qJ(5) - t426;
t240 = -t421 * pkin(4) + t432;
t235 = (pkin(4) * qJD(4) - (2 * qJD(5))) * t483 + t424;
t234 = pkin(2) * t389 + pkin(6) * t439;
t233 = t414 * t264 - t413 * t336;
t232 = t413 * t264 + t414 * t336;
t231 = t453 * qJ(5) + t426;
t228 = t453 * pkin(4) + t432;
t227 = t414 * t260 + t413 * t473;
t226 = t414 * t259 - t413 * t498;
t225 = t413 * t260 - t414 * t473;
t224 = t413 * t259 + t414 * t498;
t223 = (-t428 - t446) * pkin(4) + t422;
t222 = -pkin(4) * t446 + qJ(5) * t368 + t422;
t219 = t414 * t248 + t413 * t334;
t215 = qJ(1) * t219;
t214 = (-t394 - t421) * qJ(5) + (-qJDD(4) - t384) * pkin(4) + t243 + t494;
t213 = -t507 - qJ(5) * t385 + (-t391 + t421) * pkin(4) - t432;
t209 = -pkin(4) * t473 + t418 * t222 - t506;
t208 = -qJ(5) * t498 - t415 * t223 - t487;
t207 = t419 * t211 - t488;
t206 = t416 * t211 + t316;
t205 = t418 * t240 - t415 * t242;
t204 = t415 * t240 + t418 * t242;
t200 = t419 * t212 + t416 * t277;
t199 = t416 * t212 - t419 * t277;
t198 = t414 * t203 - t479;
t197 = t413 * t203 + t379;
t196 = -t415 * t228 + t418 * t231;
t195 = -t416 * t244 + t419 * t256 + t519;
t194 = -t416 * t243 + t419 * t255 - t489;
t193 = pkin(3) * t368 - t474 - t525;
t192 = pkin(3) * t428 + t427 + t464;
t191 = t419 * t244 + t416 * t256 - t515;
t190 = t419 * t243 + t416 * t255 + t444;
t189 = -t212 + t423;
t188 = t419 * t196 - t416 * t366 - t488;
t187 = t416 * t196 + t419 * t366 + t316;
t186 = pkin(1) * t202 + pkin(2) * t238;
t185 = t419 * t205 + t416 * t235;
t184 = t416 * t205 - t419 * t235;
t183 = -t415 * t222 + (-pkin(3) - t492) * t368 + t525;
t182 = -t418 * t223 - (-pkin(3) - t484) * t428 + t427;
t181 = -t418 * t228 - t415 * t231 + t423;
t180 = t419 * t208 - t416 * t214 - t489;
t179 = t419 * t209 - t416 * t213 - t519;
t178 = t416 * t208 + t419 * t214 + t444;
t177 = t416 * t209 + t419 * t213 + t515;
t176 = -pkin(3) * t204 - pkin(4) * t242 - qJ(5) * t240;
t175 = -t417 * t199 + t420 * t200;
t174 = t420 * t199 + t417 * t200;
t173 = pkin(5) * t202 + pkin(6) * t455 - t417 * t234;
t172 = -pkin(7) * t204 + t433 * t235;
t171 = -t417 * t206 + t420 * t207 - t490;
t170 = -pkin(6) * t199 - (pkin(3) * t416 - pkin(7) * t419) * t211;
t169 = t414 * t175 - t211 * t413;
t168 = t413 * t175 + t211 * t414;
t167 = -t417 * t191 + t420 * t195 + t526;
t166 = -t417 * t190 + t420 * t194 - t491;
t165 = -t417 * t184 + t420 * t185;
t164 = t420 * t184 + t417 * t185;
t163 = -t417 * t187 + t420 * t188 - t490;
t162 = pkin(6) * t200 - (-pkin(3) * t419 - pkin(7) * t416 - pkin(2)) * t211;
t161 = -pkin(1) * t174 - pkin(2) * t199 + pkin(3) * t277 - pkin(7) * t212;
t160 = t414 * t165 + t413 * t204;
t159 = t413 * t165 - t414 * t204;
t158 = -t417 * t178 + t420 * t180 - t491;
t157 = -t417 * t177 + t420 * t179 - t526;
t156 = -pkin(6) * t184 + t419 * t172 - t416 * t176;
t155 = -pkin(2) * t204 + pkin(6) * t185 + t416 * t172 + t419 * t176;
t154 = -pkin(1) * t164 - pkin(2) * t184 - pkin(7) * t205 + (pkin(3) - t434) * t235;
t153 = -pkin(5) * t174 - t417 * t162 + t420 * t170;
t152 = -pkin(5) * t164 - t417 * t155 + t420 * t156;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t348, 0, 0, 0, 0, 0, 0, -t378, -t476, 0, t276, 0, 0, 0, 0, 0, 0, -t311, t517, 0, t198, 0, 0, 0, 0, 0, 0, t219, t221, t267, t169, 0, 0, 0, 0, 0, 0, t219, t267, -t221, t160; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t347, 0, 0, 0, 0, 0, 0, -t377, -t480, 0, t275, 0, 0, 0, 0, 0, 0, -t310, t518, 0, t197, 0, 0, 0, 0, 0, 0, t216, t218, t266, t168, 0, 0, 0, 0, 0, 0, t216, t266, -t218, t159; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t412, 0, 0, 0, 0, 0, 0, t388, -t387, 0, -t298, 0, 0, 0, 0, 0, 0, -t322, -t431, 0, -t202, 0, 0, 0, 0, 0, 0, t245, -t246, t271, t174, 0, 0, 0, 0, 0, 0, t245, t271, t246, t164; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t477, -t475, -t347, -qJ(1) * t347, 0, 0, t476, 0, -t378, t413 * qJDD(2), t414 * t354 + t440 * t413, t414 * t355 + t441 * t413, t414 * t298, -qJ(1) * t275 - (pkin(1) * t413 - pkin(5) * t414) * t298, 0, 0, -t517, 0, -t311, t413 * t407, t414 * t253 - t413 * t442, t414 * t254 - t413 * t443, t414 * t202, -qJ(1) * t197 + t414 * t173 - t413 * t186, t227, t522, t233, t226, t520, t280, t414 * t166 - t413 * t192 - t486, t414 * t167 - t413 * t193 - t528, t414 * t171 + (-t189 - t485) * t413, -qJ(1) * t168 + t414 * t153 - t413 * t161, t227, t233, -t522, t280, -t520, t226, t414 * t158 - t413 * t182 - t486, t414 * t163 + (-t181 - t485) * t413, t414 * t157 - t413 * t183 + t528, -qJ(1) * t159 + t414 * t152 - t413 * t154; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t475, -t477, t348, qJ(1) * t348, 0, 0, t480, 0, -t377, -t414 * qJDD(2), t413 * t354 - t440 * t414, t413 * t355 - t441 * t414, t413 * t298, qJ(1) * t276 - (-pkin(1) * t414 - pkin(5) * t413) * t298, 0, 0, -t518, 0, -t310, -t414 * t407, t413 * t253 + t414 * t442, t413 * t254 + t414 * t443, t413 * t202, qJ(1) * t198 + t413 * t173 + t414 * t186, t225, t523, t232, t224, t521, t279, t413 * t166 + t414 * t192 + t215, t413 * t167 + t414 * t193 + t527, t413 * t171 + t414 * t189 + t265, qJ(1) * t169 + t413 * t153 + t414 * t161, t225, t232, -t523, t279, -t521, t224, t413 * t158 + t414 * t182 + t215, t413 * t163 + t414 * t181 + t265, t413 * t157 + t414 * t183 - t527, qJ(1) * t160 + t413 * t152 + t414 * t154; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t389, t390, 0, 0, 0, 0, t387, 0, t388, 0, -t355, t354, t299, pkin(5) * t299 + t386, 0, 0, t431, 0, -t322, 0, -t254, t253, t203, pkin(5) * t203 + pkin(6) * t465 + t420 * t234 + t386, t258, -t514, t261, t257, -t513, t285, t420 * t190 + t417 * t194 + t454, t420 * t191 + t417 * t195 - t524, t420 * t206 + t417 * t207 + t268, pkin(1) * t211 + pkin(5) * t175 + t420 * t162 + t417 * t170, t258, t261, t514, t285, t513, t257, t420 * t178 + t417 * t180 + t454, t420 * t187 + t417 * t188 + t268, t420 * t177 + t417 * t179 + t524, -pkin(1) * t204 + pkin(5) * t165 + t420 * t155 + t417 * t156;];
tauB_reg = t1;
