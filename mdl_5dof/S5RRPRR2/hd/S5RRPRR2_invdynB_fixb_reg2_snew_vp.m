% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:29
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPRR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR2_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR2_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR2_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:28:42
% EndTime: 2019-12-05 18:28:58
% DurationCPUTime: 15.98s
% Computational Cost: add. (125932->671), mult. (302267->1032), div. (0->0), fcn. (220590->10), ass. (0->467)
t749 = sin(pkin(9));
t750 = cos(pkin(9));
t757 = cos(qJ(2));
t753 = sin(qJ(2));
t793 = qJD(1) * t753;
t706 = -t750 * t757 * qJD(1) + t749 * t793;
t708 = (t749 * t757 + t750 * t753) * qJD(1);
t677 = t708 * t706;
t825 = qJDD(2) - t677;
t835 = t749 * t825;
t834 = t750 * t825;
t751 = sin(qJ(5));
t752 = sin(qJ(4));
t756 = cos(qJ(4));
t667 = t756 * t706 + t708 * t752;
t669 = -t706 * t752 + t708 * t756;
t755 = cos(qJ(5));
t611 = t755 * t667 + t669 * t751;
t613 = -t667 * t751 + t669 * t755;
t560 = t613 * t611;
t745 = qJDD(2) + qJDD(4);
t770 = qJDD(5) + t745;
t829 = -t560 + t770;
t833 = t751 * t829;
t619 = t669 * t667;
t827 = -t619 + t745;
t832 = t752 * t827;
t831 = t755 * t829;
t830 = t756 * t827;
t746 = qJD(2) + qJD(4);
t657 = t746 * t667;
t786 = qJD(1) * qJD(2);
t774 = t757 * t786;
t785 = qJDD(1) * t753;
t717 = t774 + t785;
t740 = t757 * qJDD(1);
t775 = t753 * t786;
t718 = t740 - t775;
t679 = t717 * t750 + t718 * t749;
t771 = t717 * t749 - t750 * t718;
t762 = qJD(4) * t667 - t679 * t756 + t752 * t771;
t573 = -t657 + t762;
t738 = qJD(5) + t746;
t606 = t738 * t611;
t772 = t679 * t752 + t756 * t771;
t594 = -qJD(4) * t669 - t772;
t761 = qJD(5) * t611 - t594 * t751 + t755 * t762;
t828 = -t606 - t761;
t826 = -t657 - t762;
t773 = -t755 * t594 - t751 * t762;
t489 = (qJD(5) - t738) * t613 + t773;
t569 = (qJD(4) - t746) * t669 + t772;
t609 = t611 ^ 2;
t610 = t613 ^ 2;
t665 = t667 ^ 2;
t666 = t669 ^ 2;
t704 = t706 ^ 2;
t705 = t708 ^ 2;
t736 = t738 ^ 2;
t744 = t746 ^ 2;
t760 = qJD(1) ^ 2;
t795 = t753 * t760;
t754 = sin(qJ(1));
t758 = cos(qJ(1));
t728 = g(1) * t758 + g(2) * t754;
t711 = -pkin(1) * t760 + qJDD(1) * pkin(6) - t728;
t804 = t711 * t753;
t637 = qJDD(2) * pkin(2) - qJ(3) * t717 - t804 + (pkin(2) * t795 + qJ(3) * t786 - g(3)) * t757;
t693 = -t753 * g(3) + t757 * t711;
t748 = t757 ^ 2;
t742 = t748 * t760;
t763 = qJD(2) * pkin(2) - qJ(3) * t793;
t638 = -pkin(2) * t742 + t718 * qJ(3) - qJD(2) * t763 + t693;
t578 = 0.2e1 * qJD(3) * t708 - t750 * t637 + t638 * t749;
t792 = qJD(2) * t706;
t648 = -t679 - t792;
t538 = pkin(3) * t825 + pkin(7) * t648 - t578;
t579 = -0.2e1 * qJD(3) * t706 + t749 * t637 + t750 * t638;
t765 = qJD(2) * pkin(3) - pkin(7) * t708;
t545 = -t704 * pkin(3) - pkin(7) * t771 - qJD(2) * t765 + t579;
t479 = -t756 * t538 + t545 * t752;
t452 = t827 * pkin(4) + t573 * pkin(8) - t479;
t480 = t752 * t538 + t756 * t545;
t767 = pkin(4) * t746 - pkin(8) * t669;
t457 = -t665 * pkin(4) + t594 * pkin(8) - t746 * t767 + t480;
t406 = -t755 * t452 + t457 * t751;
t407 = t751 * t452 + t755 * t457;
t379 = -t406 * t755 + t407 * t751;
t824 = t379 * t752;
t823 = t379 * t756;
t428 = -t479 * t756 + t480 * t752;
t822 = t428 * t749;
t821 = t428 * t750;
t727 = g(1) * t754 - t758 * g(2);
t764 = qJDD(1) * pkin(1) + t727;
t642 = pkin(2) * t718 - qJDD(3) - t763 * t793 + (qJ(3) * t748 + pkin(6)) * t760 + t764;
t577 = -pkin(3) * t771 + pkin(7) * t704 - t708 * t765 + t642;
t499 = pkin(4) * t594 + pkin(8) * t665 - t669 * t767 + t577;
t820 = t499 * t751;
t819 = t499 * t755;
t523 = -t578 * t750 + t579 * t749;
t818 = t523 * t753;
t817 = t523 * t757;
t555 = t560 + t770;
t816 = t555 * t751;
t815 = t555 * t755;
t814 = t577 * t752;
t813 = t577 * t756;
t616 = t619 + t745;
t812 = t616 * t752;
t811 = t616 * t756;
t810 = t642 * t749;
t809 = t642 * t750;
t673 = qJDD(2) + t677;
t808 = t673 * t749;
t807 = t673 * t750;
t710 = pkin(6) * t760 + t764;
t806 = t710 * t753;
t805 = t710 * t757;
t734 = t757 * t795;
t725 = qJDD(2) + t734;
t803 = t725 * t753;
t726 = qJDD(2) - t734;
t802 = t726 * t753;
t801 = t726 * t757;
t800 = t738 * t751;
t799 = t738 * t755;
t798 = t746 * t752;
t797 = t746 * t756;
t747 = t753 ^ 2;
t796 = t747 * t760;
t794 = t747 + t748;
t791 = qJD(2) * t708;
t790 = qJD(2) * t749;
t789 = qJD(2) * t750;
t784 = qJDD(1) * t754;
t783 = qJDD(1) * t758;
t782 = qJDD(2) * t758;
t781 = t754 * t560;
t780 = t758 * t560;
t779 = t754 * t619;
t778 = t758 * t619;
t777 = t754 * t677;
t776 = t758 * t677;
t380 = t406 * t751 + t755 * t407;
t429 = t479 * t752 + t756 * t480;
t524 = t578 * t749 + t750 * t579;
t692 = g(3) * t757 + t804;
t641 = t692 * t753 + t757 * t693;
t685 = -t727 * t754 - t758 * t728;
t769 = t754 * t734;
t768 = t758 * t734;
t722 = -t754 * t760 + t783;
t766 = -pkin(5) * t722 - g(3) * t754;
t640 = t692 * t757 - t693 * t753;
t684 = t727 * t758 - t728 * t754;
t646 = -t771 + t791;
t759 = qJD(2) ^ 2;
t739 = t754 * qJDD(2);
t733 = -t742 - t759;
t732 = t742 - t759;
t731 = -t759 - t796;
t730 = t759 - t796;
t724 = t742 - t796;
t723 = t742 + t796;
t721 = t758 * t760 + t784;
t720 = t794 * qJDD(1);
t719 = t740 - 0.2e1 * t775;
t716 = 0.2e1 * t774 + t785;
t714 = t757 * t725;
t713 = t794 * t786;
t703 = -pkin(5) * t721 + g(3) * t758;
t698 = -t705 - t759;
t697 = -t705 + t759;
t696 = t704 - t759;
t695 = t717 * t757 - t747 * t786;
t694 = -t718 * t753 - t748 * t786;
t691 = -t731 * t753 - t801;
t690 = -t730 * t753 + t714;
t689 = t733 * t757 - t803;
t688 = t732 * t757 - t802;
t687 = t731 * t757 - t802;
t686 = t733 * t753 + t714;
t682 = t720 * t758 - t723 * t754;
t681 = t720 * t754 + t723 * t758;
t680 = -t716 * t753 + t719 * t757;
t676 = -t705 + t704;
t671 = -t759 - t704;
t663 = (-t706 * t750 + t708 * t749) * qJD(2);
t662 = (-t706 * t749 - t708 * t750) * qJD(2);
t661 = t691 * t758 + t716 * t754;
t660 = t689 * t758 - t719 * t754;
t659 = t691 * t754 - t716 * t758;
t658 = t689 * t754 + t719 * t758;
t655 = -t666 + t744;
t654 = t665 - t744;
t653 = -pkin(6) * t687 - t805;
t652 = -pkin(6) * t686 - t806;
t651 = -t666 - t744;
t650 = -pkin(1) * t687 + t693;
t649 = -pkin(1) * t686 + t692;
t647 = t679 - t792;
t644 = t771 + t791;
t643 = -t704 - t705;
t636 = t679 * t750 - t708 * t790;
t635 = t679 * t749 + t708 * t789;
t634 = t706 * t789 + t749 * t771;
t633 = t706 * t790 - t750 * t771;
t629 = -t698 * t749 - t807;
t628 = -t697 * t749 + t834;
t627 = t696 * t750 - t808;
t626 = t698 * t750 - t808;
t625 = t697 * t750 + t835;
t624 = t696 * t749 + t807;
t623 = t641 * t758 - t710 * t754;
t622 = t641 * t754 + t710 * t758;
t621 = t671 * t750 - t835;
t620 = t671 * t749 + t834;
t618 = -t666 + t665;
t614 = -t744 - t665;
t605 = -t610 + t736;
t604 = t609 - t736;
t603 = -t662 * t753 + t663 * t757;
t602 = (-t667 * t756 + t669 * t752) * t746;
t601 = (-t667 * t752 - t669 * t756) * t746;
t600 = -t610 - t736;
t599 = t646 * t750 - t648 * t749;
t598 = -t644 * t750 - t647 * t749;
t597 = t646 * t749 + t648 * t750;
t596 = -t644 * t749 + t647 * t750;
t592 = -qJ(3) * t626 - t809;
t591 = -t665 - t666;
t590 = -t635 * t753 + t636 * t757;
t589 = -t633 * t753 + t634 * t757;
t588 = -t626 * t753 + t629 * t757;
t587 = -t625 * t753 + t628 * t757;
t586 = -t624 * t753 + t627 * t757;
t585 = t626 * t757 + t629 * t753;
t584 = -qJ(3) * t620 - t810;
t583 = t654 * t756 - t812;
t582 = -t655 * t752 + t830;
t581 = t654 * t752 + t811;
t580 = t655 * t756 + t832;
t576 = -t651 * t752 - t811;
t575 = t651 * t756 - t812;
t568 = (qJD(4) + t746) * t669 + t772;
t567 = -t669 * t798 - t756 * t762;
t566 = t669 * t797 - t752 * t762;
t565 = -t594 * t752 + t667 * t797;
t564 = t594 * t756 + t667 * t798;
t563 = -t620 * t753 + t621 * t757;
t562 = t620 * t757 + t621 * t753;
t561 = -pkin(2) * t647 + qJ(3) * t629 - t810;
t559 = -t610 + t609;
t558 = t614 * t756 - t832;
t557 = t614 * t752 + t830;
t553 = -t736 - t609;
t552 = -pkin(2) * t644 + qJ(3) * t621 + t809;
t551 = t588 * t758 + t647 * t754;
t550 = t588 * t754 - t647 * t758;
t549 = (-t611 * t755 + t613 * t751) * t738;
t548 = (-t611 * t751 - t613 * t755) * t738;
t547 = -t601 * t749 + t602 * t750;
t546 = t601 * t750 + t602 * t749;
t543 = t563 * t758 + t644 * t754;
t542 = -t597 * t753 + t599 * t757;
t541 = -t596 * t753 + t598 * t757;
t540 = t563 * t754 - t644 * t758;
t539 = t597 * t757 + t599 * t753;
t535 = -t609 - t610;
t534 = t604 * t755 - t816;
t533 = -t605 * t751 + t831;
t532 = t604 * t751 + t815;
t531 = t605 * t755 + t833;
t530 = t542 * t758 + t643 * t754;
t529 = t542 * t754 - t643 * t758;
t528 = -t581 * t749 + t583 * t750;
t527 = -t580 * t749 + t582 * t750;
t526 = t581 * t750 + t583 * t749;
t525 = t580 * t750 + t582 * t749;
t522 = -pkin(7) * t575 - t813;
t521 = -t600 * t751 - t815;
t520 = t600 * t755 - t816;
t519 = -t575 * t749 + t576 * t750;
t518 = t575 * t750 + t576 * t749;
t517 = -t569 * t756 - t573 * t752;
t516 = -t568 * t756 - t752 * t826;
t515 = -t569 * t752 + t573 * t756;
t514 = -t568 * t752 + t756 * t826;
t512 = -qJD(5) * t613 - t773;
t511 = -pkin(7) * t557 - t814;
t510 = -t566 * t749 + t567 * t750;
t509 = -t564 * t749 + t565 * t750;
t508 = t566 * t750 + t567 * t749;
t507 = t564 * t750 + t565 * t749;
t506 = -pkin(1) * t539 - pkin(2) * t597;
t505 = -pkin(1) * t585 - pkin(2) * t626 + t579;
t504 = pkin(2) * t642 + qJ(3) * t524;
t503 = -t557 * t749 + t558 * t750;
t502 = t557 * t750 + t558 * t749;
t501 = t553 * t755 - t833;
t500 = t553 * t751 + t831;
t498 = -pkin(1) * t562 - pkin(2) * t620 + t578;
t497 = -t548 * t752 + t549 * t756;
t496 = t548 * t756 + t549 * t752;
t495 = -qJ(3) * t597 - t523;
t494 = -t546 * t753 + t547 * t757;
t493 = -t606 + t761;
t488 = (qJD(5) + t738) * t613 + t773;
t487 = -t613 * t800 - t755 * t761;
t486 = t613 * t799 - t751 * t761;
t485 = -t512 * t751 + t611 * t799;
t484 = t512 * t755 + t611 * t800;
t483 = -pkin(6) * t585 - t561 * t753 + t592 * t757;
t482 = -pkin(3) * t826 + pkin(7) * t576 - t814;
t481 = -pkin(2) * t643 + qJ(3) * t599 + t524;
t477 = -pkin(3) * t568 + pkin(7) * t558 + t813;
t476 = -pkin(6) * t562 - t552 * t753 + t584 * t757;
t475 = -t532 * t752 + t534 * t756;
t474 = -t531 * t752 + t533 * t756;
t473 = t532 * t756 + t534 * t752;
t472 = t531 * t756 + t533 * t752;
t471 = -t526 * t753 + t528 * t757;
t470 = -t525 * t753 + t527 * t757;
t469 = t524 * t757 - t818;
t468 = t524 * t753 + t817;
t467 = -t520 * t752 + t521 * t756;
t466 = t520 * t756 + t521 * t752;
t465 = -t518 * t753 + t519 * t757;
t464 = t518 * t757 + t519 * t753;
t463 = t469 * t758 - t642 * t754;
t462 = t469 * t754 + t642 * t758;
t461 = -t515 * t749 + t517 * t750;
t460 = -t514 * t749 + t516 * t750;
t459 = t515 * t750 + t517 * t749;
t458 = t514 * t750 + t516 * t749;
t455 = -pkin(8) * t520 - t819;
t454 = -t508 * t753 + t510 * t757;
t453 = -t507 * t753 + t509 * t757;
t449 = -t502 * t753 + t503 * t757;
t448 = t502 * t757 + t503 * t753;
t447 = -t500 * t752 + t501 * t756;
t446 = t500 * t756 + t501 * t752;
t445 = t465 * t758 + t754 * t826;
t444 = t465 * t754 - t758 * t826;
t443 = -pkin(8) * t500 - t820;
t442 = -t496 * t749 + t497 * t750;
t441 = t496 * t750 + t497 * t749;
t440 = -t489 * t755 - t493 * t751;
t439 = -t488 * t755 - t751 * t828;
t438 = -t489 * t751 + t493 * t755;
t437 = -t488 * t751 + t755 * t828;
t436 = -t486 * t752 + t487 * t756;
t435 = -t484 * t752 + t485 * t756;
t434 = t486 * t756 + t487 * t752;
t433 = t484 * t756 + t485 * t752;
t432 = -pkin(1) * t468 - pkin(2) * t523;
t431 = t449 * t758 + t568 * t754;
t430 = t449 * t754 - t568 * t758;
t427 = -qJ(3) * t518 - t482 * t749 + t522 * t750;
t426 = pkin(3) * t577 + pkin(7) * t429;
t425 = -pkin(6) * t539 - t481 * t753 + t495 * t757;
t424 = -pkin(4) * t828 + pkin(8) * t521 - t820;
t423 = -t473 * t749 + t475 * t750;
t422 = -t472 * t749 + t474 * t750;
t421 = t473 * t750 + t475 * t749;
t420 = t472 * t750 + t474 * t749;
t419 = -t466 * t749 + t467 * t750;
t418 = t466 * t750 + t467 * t749;
t417 = -pkin(4) * t488 + pkin(8) * t501 + t819;
t416 = -qJ(3) * t502 - t477 * t749 + t511 * t750;
t415 = -pkin(2) * t826 + qJ(3) * t519 + t482 * t750 + t522 * t749;
t414 = -pkin(6) * t468 - qJ(3) * t817 - t504 * t753;
t413 = -pkin(7) * t515 - t428;
t412 = -t459 * t753 + t461 * t757;
t411 = -t458 * t753 + t460 * t757;
t410 = t459 * t757 + t461 * t753;
t409 = -pkin(2) * t568 + qJ(3) * t503 + t477 * t750 + t511 * t749;
t408 = -pkin(3) * t591 + pkin(7) * t517 + t429;
t404 = t412 * t758 + t591 * t754;
t403 = t412 * t754 - t591 * t758;
t402 = -pkin(1) * t464 - pkin(2) * t518 - pkin(3) * t575 + t480;
t401 = -t446 * t749 + t447 * t750;
t400 = t446 * t750 + t447 * t749;
t399 = -t441 * t753 + t442 * t757;
t398 = -t438 * t752 + t440 * t756;
t397 = -t437 * t752 + t439 * t756;
t396 = t438 * t756 + t440 * t752;
t395 = t437 * t756 + t439 * t752;
t394 = -t434 * t749 + t436 * t750;
t393 = -t433 * t749 + t435 * t750;
t392 = t434 * t750 + t436 * t749;
t391 = t433 * t750 + t435 * t749;
t390 = -pkin(1) * t448 - pkin(2) * t502 - pkin(3) * t557 + t479;
t389 = t429 * t750 - t822;
t388 = t429 * t749 + t821;
t387 = -pkin(1) * t410 - pkin(2) * t459 - pkin(3) * t515;
t386 = -t421 * t753 + t423 * t757;
t385 = -t420 * t753 + t422 * t757;
t384 = -t418 * t753 + t419 * t757;
t383 = t418 * t757 + t419 * t753;
t382 = -pkin(7) * t466 - t424 * t752 + t455 * t756;
t381 = -pkin(7) * t446 - t417 * t752 + t443 * t756;
t378 = t384 * t758 + t754 * t828;
t377 = t384 * t754 - t758 * t828;
t376 = -pkin(3) * t828 + pkin(7) * t467 + t424 * t756 + t455 * t752;
t375 = -pkin(6) * t464 - t415 * t753 + t427 * t757;
t374 = -t400 * t753 + t401 * t757;
t373 = t400 * t757 + t401 * t753;
t372 = pkin(4) * t499 + pkin(8) * t380;
t371 = -pkin(3) * t488 + pkin(7) * t447 + t417 * t756 + t443 * t752;
t370 = -qJ(3) * t459 - t408 * t749 + t413 * t750;
t369 = -pkin(6) * t448 - t409 * t753 + t416 * t757;
t368 = -pkin(2) * t591 + qJ(3) * t461 + t408 * t750 + t413 * t749;
t367 = -t396 * t749 + t398 * t750;
t366 = -t395 * t749 + t397 * t750;
t365 = t396 * t750 + t398 * t749;
t364 = t395 * t750 + t397 * t749;
t363 = -t392 * t753 + t394 * t757;
t362 = -t391 * t753 + t393 * t757;
t361 = t374 * t758 + t488 * t754;
t360 = t374 * t754 - t488 * t758;
t359 = -pkin(8) * t438 - t379;
t358 = -t388 * t753 + t389 * t757;
t357 = t388 * t757 + t389 * t753;
t356 = -pkin(7) * t821 - qJ(3) * t388 - t426 * t749;
t355 = t358 * t758 - t577 * t754;
t354 = t358 * t754 + t577 * t758;
t353 = -pkin(4) * t535 + pkin(8) * t440 + t380;
t352 = pkin(2) * t577 - pkin(7) * t822 + qJ(3) * t389 + t426 * t750;
t351 = t380 * t756 - t824;
t350 = t380 * t752 + t823;
t349 = -pkin(1) * t383 - pkin(2) * t418 - pkin(3) * t466 - pkin(4) * t520 + t407;
t348 = -qJ(3) * t418 - t376 * t749 + t382 * t750;
t347 = -pkin(1) * t357 - pkin(2) * t388 - pkin(3) * t428;
t346 = -pkin(2) * t828 + qJ(3) * t419 + t376 * t750 + t382 * t749;
t345 = -t365 * t753 + t367 * t757;
t344 = -t364 * t753 + t366 * t757;
t343 = t365 * t757 + t367 * t753;
t342 = -pkin(1) * t373 - pkin(2) * t400 - pkin(3) * t446 - pkin(4) * t500 + t406;
t341 = t345 * t758 + t535 * t754;
t340 = t345 * t754 - t535 * t758;
t339 = -qJ(3) * t400 - t371 * t749 + t381 * t750;
t338 = -pkin(2) * t488 + qJ(3) * t401 + t371 * t750 + t381 * t749;
t337 = -pkin(6) * t410 - t368 * t753 + t370 * t757;
t336 = -pkin(7) * t396 - t353 * t752 + t359 * t756;
t335 = -pkin(3) * t535 + pkin(7) * t398 + t353 * t756 + t359 * t752;
t334 = -t350 * t749 + t351 * t750;
t333 = t350 * t750 + t351 * t749;
t332 = -pkin(7) * t350 - pkin(8) * t823 - t372 * t752;
t331 = -pkin(6) * t357 - t352 * t753 + t356 * t757;
t330 = pkin(3) * t499 + pkin(7) * t351 - pkin(8) * t824 + t372 * t756;
t329 = -pkin(1) * t343 - pkin(2) * t365 - pkin(3) * t396 - pkin(4) * t438;
t328 = -pkin(6) * t383 - t346 * t753 + t348 * t757;
t327 = -pkin(6) * t373 - t338 * t753 + t339 * t757;
t326 = -qJ(3) * t365 - t335 * t749 + t336 * t750;
t325 = -t333 * t753 + t334 * t757;
t324 = t333 * t757 + t334 * t753;
t323 = -pkin(2) * t535 + qJ(3) * t367 + t335 * t750 + t336 * t749;
t322 = t325 * t758 - t499 * t754;
t321 = t325 * t754 + t499 * t758;
t320 = -qJ(3) * t333 - t330 * t749 + t332 * t750;
t319 = pkin(2) * t499 + qJ(3) * t334 + t330 * t750 + t332 * t749;
t318 = -pkin(1) * t324 - pkin(2) * t333 - pkin(3) * t350 - pkin(4) * t379;
t317 = -pkin(6) * t343 - t323 * t753 + t326 * t757;
t316 = -pkin(6) * t324 - t319 * t753 + t320 * t757;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t721, -t722, 0, t685, 0, 0, 0, 0, 0, 0, t660, t661, t682, t623, 0, 0, 0, 0, 0, 0, t543, t551, t530, t463, 0, 0, 0, 0, 0, 0, t431, t445, t404, t355, 0, 0, 0, 0, 0, 0, t361, t378, t341, t322; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t722, -t721, 0, t684, 0, 0, 0, 0, 0, 0, t658, t659, t681, t622, 0, 0, 0, 0, 0, 0, t540, t550, t529, t462, 0, 0, 0, 0, 0, 0, t430, t444, t403, t354, 0, 0, 0, 0, 0, 0, t360, t377, t340, t321; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t686, t687, 0, -t640, 0, 0, 0, 0, 0, 0, t562, t585, t539, t468, 0, 0, 0, 0, 0, 0, t448, t464, t410, t357, 0, 0, 0, 0, 0, 0, t373, t383, t343, t324; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t722, 0, -t721, 0, t766, -t703, -t684, -pkin(5) * t684, t695 * t758 - t769, t680 * t758 - t724 * t754, t690 * t758 + t753 * t784, t694 * t758 + t769, t688 * t758 + t754 * t740, t713 * t758 + t739, -pkin(5) * t658 - t649 * t754 + t652 * t758, -pkin(5) * t659 - t650 * t754 + t653 * t758, -pkin(5) * t681 + t640 * t758, -pkin(5) * t622 - (pkin(1) * t754 - pkin(6) * t758) * t640, t590 * t758 + t777, t541 * t758 - t676 * t754, t587 * t758 - t648 * t754, t589 * t758 - t777, t586 * t758 + t646 * t754, t603 * t758 + t739, -pkin(5) * t540 + t476 * t758 - t498 * t754, -pkin(5) * t550 + t483 * t758 - t505 * t754, -pkin(5) * t529 + t425 * t758 - t506 * t754, -pkin(5) * t462 + t414 * t758 - t432 * t754, t454 * t758 + t779, t411 * t758 - t618 * t754, t470 * t758 - t573 * t754, t453 * t758 - t779, t471 * t758 - t569 * t754, t494 * t758 + t745 * t754, -pkin(5) * t430 + t369 * t758 - t390 * t754, -pkin(5) * t444 + t375 * t758 - t402 * t754, -pkin(5) * t403 + t337 * t758 - t387 * t754, -pkin(5) * t354 + t331 * t758 - t347 * t754, t363 * t758 + t781, t344 * t758 - t559 * t754, t385 * t758 - t493 * t754, t362 * t758 - t781, t386 * t758 - t489 * t754, t399 * t758 + t754 * t770, -pkin(5) * t360 + t327 * t758 - t342 * t754, -pkin(5) * t377 + t328 * t758 - t349 * t754, -pkin(5) * t340 + t317 * t758 - t329 * t754, -pkin(5) * t321 + t316 * t758 - t318 * t754; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t721, 0, t722, 0, t703, t766, t685, pkin(5) * t685, t695 * t754 + t768, t680 * t754 + t724 * t758, t690 * t754 - t753 * t783, t694 * t754 - t768, t688 * t754 - t758 * t740, t713 * t754 - t782, pkin(5) * t660 + t649 * t758 + t652 * t754, pkin(5) * t661 + t650 * t758 + t653 * t754, pkin(5) * t682 + t640 * t754, pkin(5) * t623 - (-pkin(1) * t758 - pkin(6) * t754) * t640, t590 * t754 - t776, t541 * t754 + t676 * t758, t587 * t754 + t648 * t758, t589 * t754 + t776, t586 * t754 - t646 * t758, t603 * t754 - t782, pkin(5) * t543 + t476 * t754 + t498 * t758, pkin(5) * t551 + t483 * t754 + t505 * t758, pkin(5) * t530 + t425 * t754 + t506 * t758, pkin(5) * t463 + t414 * t754 + t432 * t758, t454 * t754 - t778, t411 * t754 + t618 * t758, t470 * t754 + t573 * t758, t453 * t754 + t778, t471 * t754 + t569 * t758, t494 * t754 - t745 * t758, pkin(5) * t431 + t369 * t754 + t390 * t758, pkin(5) * t445 + t375 * t754 + t402 * t758, pkin(5) * t404 + t337 * t754 + t387 * t758, pkin(5) * t355 + t331 * t754 + t347 * t758, t363 * t754 - t780, t344 * t754 + t559 * t758, t385 * t754 + t493 * t758, t362 * t754 + t780, t386 * t754 + t489 * t758, t399 * t754 - t758 * t770, pkin(5) * t361 + t327 * t754 + t342 * t758, pkin(5) * t378 + t328 * t754 + t349 * t758, pkin(5) * t341 + t317 * t754 + t329 * t758, pkin(5) * t322 + t316 * t754 + t318 * t758; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t727, t728, 0, 0, (t717 + t774) * t753, t716 * t757 + t719 * t753, t730 * t757 + t803, (t718 - t775) * t757, t732 * t753 + t801, 0, pkin(1) * t719 + pkin(6) * t689 + t805, -pkin(1) * t716 + pkin(6) * t691 - t806, pkin(1) * t723 + pkin(6) * t720 + t641, pkin(1) * t710 + pkin(6) * t641, t635 * t757 + t636 * t753, t596 * t757 + t598 * t753, t625 * t757 + t628 * t753, t633 * t757 + t634 * t753, t624 * t757 + t627 * t753, t662 * t757 + t663 * t753, -pkin(1) * t644 + pkin(6) * t563 + t552 * t757 + t584 * t753, -pkin(1) * t647 + pkin(6) * t588 + t561 * t757 + t592 * t753, -pkin(1) * t643 + pkin(6) * t542 + t481 * t757 + t495 * t753, pkin(1) * t642 + pkin(6) * t469 - qJ(3) * t818 + t504 * t757, t508 * t757 + t510 * t753, t458 * t757 + t460 * t753, t525 * t757 + t527 * t753, t507 * t757 + t509 * t753, t526 * t757 + t528 * t753, t546 * t757 + t547 * t753, -pkin(1) * t568 + pkin(6) * t449 + t409 * t757 + t416 * t753, -pkin(1) * t826 + pkin(6) * t465 + t415 * t757 + t427 * t753, -pkin(1) * t591 + pkin(6) * t412 + t368 * t757 + t370 * t753, pkin(1) * t577 + pkin(6) * t358 + t352 * t757 + t356 * t753, t392 * t757 + t394 * t753, t364 * t757 + t366 * t753, t420 * t757 + t422 * t753, t391 * t757 + t393 * t753, t421 * t757 + t423 * t753, t441 * t757 + t442 * t753, -pkin(1) * t488 + pkin(6) * t374 + t338 * t757 + t339 * t753, -pkin(1) * t828 + pkin(6) * t384 + t346 * t757 + t348 * t753, -pkin(1) * t535 + pkin(6) * t345 + t323 * t757 + t326 * t753, pkin(1) * t499 + pkin(6) * t325 + t319 * t757 + t320 * t753;];
tauB_reg = t1;
