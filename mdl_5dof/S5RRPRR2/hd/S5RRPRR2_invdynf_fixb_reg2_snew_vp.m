% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPRR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:29
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPRR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR2_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:29:22
% EndTime: 2019-12-05 18:29:27
% DurationCPUTime: 4.72s
% Computational Cost: add. (35268->253), mult. (84563->356), div. (0->0), fcn. (61440->10), ass. (0->204)
t1579 = qJD(2) + qJD(4);
t1576 = qJD(5) + t1579;
t1628 = qJD(5) + t1576;
t1582 = sin(pkin(9));
t1583 = cos(pkin(9));
t1590 = cos(qJ(2));
t1619 = qJD(1) * t1590;
t1586 = sin(qJ(2));
t1620 = qJD(1) * t1586;
t1552 = t1582 * t1620 - t1583 * t1619;
t1554 = (t1582 * t1590 + t1583 * t1586) * qJD(1);
t1585 = sin(qJ(4));
t1589 = cos(qJ(4));
t1530 = t1589 * t1552 + t1585 * t1554;
t1532 = -t1585 * t1552 + t1589 * t1554;
t1584 = sin(qJ(5));
t1588 = cos(qJ(5));
t1503 = t1588 * t1530 + t1584 * t1532;
t1627 = t1503 ^ 2;
t1505 = -t1584 * t1530 + t1588 * t1532;
t1626 = t1505 ^ 2;
t1529 = t1530 ^ 2;
t1625 = t1532 ^ 2;
t1551 = t1552 ^ 2;
t1624 = t1554 ^ 2;
t1623 = t1576 ^ 2;
t1622 = t1579 ^ 2;
t1621 = -2 * qJD(3);
t1618 = qJD(2) * t1552;
t1617 = qJD(2) * t1554;
t1616 = t1505 * t1503;
t1615 = t1532 * t1530;
t1614 = t1554 * t1552;
t1613 = t1579 * t1530;
t1581 = t1590 ^ 2;
t1593 = qJD(1) ^ 2;
t1612 = t1581 * t1593;
t1587 = sin(qJ(1));
t1591 = cos(qJ(1));
t1570 = -t1591 * g(1) - t1587 * g(2);
t1557 = -t1593 * pkin(1) + qJDD(1) * pkin(6) + t1570;
t1611 = t1586 * t1557;
t1610 = t1586 * t1593;
t1609 = qJD(4) - t1579;
t1608 = qJD(5) - t1576;
t1603 = qJD(2) * t1619;
t1606 = t1586 * qJDD(1);
t1560 = t1603 + t1606;
t1516 = qJDD(2) * pkin(2) - t1560 * qJ(3) - t1611 + (qJD(2) * qJ(3) * qJD(1) + pkin(2) * t1610 - g(3)) * t1590;
t1545 = -t1586 * g(3) + t1590 * t1557;
t1577 = t1590 * qJDD(1);
t1604 = qJD(2) * t1620;
t1561 = t1577 - t1604;
t1594 = qJD(2) * pkin(2) - qJ(3) * t1620;
t1517 = -pkin(2) * t1612 + t1561 * qJ(3) - qJD(2) * t1594 + t1545;
t1490 = t1583 * t1516 - t1582 * t1517 + t1554 * t1621;
t1539 = t1583 * t1560 + t1582 * t1561;
t1525 = -t1539 - t1618;
t1535 = qJDD(2) - t1614;
t1471 = t1535 * pkin(3) + t1525 * pkin(7) + t1490;
t1491 = t1582 * t1516 + t1583 * t1517 + t1552 * t1621;
t1538 = -t1582 * t1560 + t1583 * t1561;
t1599 = qJD(2) * pkin(3) - t1554 * pkin(7);
t1475 = -t1551 * pkin(3) + t1538 * pkin(7) - qJD(2) * t1599 + t1491;
t1450 = t1585 * t1471 + t1589 * t1475;
t1580 = t1586 ^ 2;
t1607 = t1580 + t1581;
t1605 = qJDD(2) + qJDD(4);
t1569 = t1587 * g(1) - t1591 * g(2);
t1602 = -qJDD(5) - t1605;
t1449 = t1589 * t1471 - t1585 * t1475;
t1600 = -t1589 * t1538 + t1585 * t1539;
t1496 = -t1532 * qJD(4) - t1600;
t1596 = -t1585 * t1538 - t1589 * t1539;
t1497 = -t1530 * qJD(4) - t1596;
t1601 = t1588 * t1496 - t1584 * t1497;
t1598 = t1579 * pkin(4) - t1532 * pkin(8);
t1507 = t1605 - t1615;
t1597 = -t1584 * t1496 - t1588 * t1497;
t1595 = qJDD(1) * pkin(1) + t1569;
t1520 = t1561 * pkin(2) - qJDD(3) - t1594 * t1620 + (qJ(3) * t1581 + pkin(6)) * t1593 + t1595;
t1489 = t1538 * pkin(3) + t1551 * pkin(7) - t1554 * t1599 + t1520;
t1592 = qJD(2) ^ 2;
t1574 = t1590 * t1610;
t1573 = -t1592 - t1612;
t1572 = -t1580 * t1593 - t1592;
t1568 = -qJDD(2) + t1574;
t1567 = qJDD(2) + t1574;
t1566 = t1607 * t1593;
t1565 = -t1587 * qJDD(1) - t1591 * t1593;
t1564 = t1591 * qJDD(1) - t1587 * t1593;
t1563 = t1607 * qJDD(1);
t1562 = t1577 - 0.2e1 * t1604;
t1559 = 0.2e1 * t1603 + t1606;
t1556 = t1593 * pkin(6) + t1595;
t1546 = -t1592 - t1624;
t1544 = -t1590 * g(3) - t1611;
t1543 = t1590 * t1568 - t1586 * t1572;
t1542 = -t1586 * t1567 + t1590 * t1573;
t1541 = t1586 * t1568 + t1590 * t1572;
t1540 = t1590 * t1567 + t1586 * t1573;
t1536 = -qJDD(2) - t1614;
t1534 = -t1592 - t1551;
t1526 = -t1622 - t1625;
t1524 = t1539 - t1618;
t1523 = t1538 + t1617;
t1522 = -t1538 + t1617;
t1521 = -t1551 - t1624;
t1519 = -t1586 * t1544 + t1590 * t1545;
t1518 = t1590 * t1544 + t1586 * t1545;
t1512 = t1583 * t1536 - t1582 * t1546;
t1511 = t1582 * t1536 + t1583 * t1546;
t1510 = t1583 * t1534 - t1582 * t1535;
t1509 = t1582 * t1534 + t1583 * t1535;
t1508 = -t1605 - t1615;
t1506 = -t1622 - t1529;
t1500 = -t1623 - t1626;
t1499 = t1583 * t1523 - t1582 * t1525;
t1498 = t1582 * t1523 + t1583 * t1525;
t1494 = -t1529 - t1625;
t1493 = -t1586 * t1511 + t1590 * t1512;
t1492 = t1590 * t1511 + t1586 * t1512;
t1488 = t1589 * t1508 - t1585 * t1526;
t1487 = t1585 * t1508 + t1589 * t1526;
t1486 = t1609 * t1530 + t1596;
t1485 = t1497 - t1613;
t1484 = -t1609 * t1532 - t1600;
t1483 = (qJD(4) + t1579) * t1532 + t1600;
t1482 = -t1586 * t1509 + t1590 * t1510;
t1481 = t1590 * t1509 + t1586 * t1510;
t1480 = t1589 * t1506 - t1585 * t1507;
t1479 = t1585 * t1506 + t1589 * t1507;
t1478 = t1602 - t1616;
t1477 = -t1602 - t1616;
t1476 = -t1623 - t1627;
t1473 = -t1586 * t1498 + t1590 * t1499;
t1472 = t1590 * t1498 + t1586 * t1499;
t1468 = -t1626 - t1627;
t1467 = -t1582 * t1490 + t1583 * t1491;
t1466 = t1583 * t1490 + t1582 * t1491;
t1465 = t1588 * t1478 - t1584 * t1500;
t1464 = t1584 * t1478 + t1588 * t1500;
t1463 = -t1582 * t1487 + t1583 * t1488;
t1462 = t1583 * t1487 + t1582 * t1488;
t1461 = t1589 * t1484 - t1585 * t1486;
t1460 = t1585 * t1484 + t1589 * t1486;
t1459 = -t1582 * t1479 + t1583 * t1480;
t1458 = t1583 * t1479 + t1582 * t1480;
t1457 = t1588 * t1476 - t1584 * t1477;
t1456 = t1584 * t1476 + t1588 * t1477;
t1455 = t1496 * pkin(4) + t1529 * pkin(8) - t1532 * t1598 + t1489;
t1454 = t1608 * t1503 + t1597;
t1453 = -t1628 * t1503 - t1597;
t1452 = -t1608 * t1505 + t1601;
t1451 = t1628 * t1505 - t1601;
t1448 = -t1586 * t1466 + t1590 * t1467;
t1447 = t1590 * t1466 + t1586 * t1467;
t1446 = -t1585 * t1464 + t1589 * t1465;
t1445 = t1589 * t1464 + t1585 * t1465;
t1444 = -t1586 * t1462 + t1590 * t1463;
t1443 = t1590 * t1462 + t1586 * t1463;
t1442 = -t1582 * t1460 + t1583 * t1461;
t1441 = t1583 * t1460 + t1582 * t1461;
t1440 = -t1529 * pkin(4) + t1496 * pkin(8) - t1579 * t1598 + t1450;
t1439 = (-t1497 - t1613) * pkin(8) + t1507 * pkin(4) + t1449;
t1438 = -t1586 * t1458 + t1590 * t1459;
t1437 = t1590 * t1458 + t1586 * t1459;
t1436 = -t1585 * t1456 + t1589 * t1457;
t1435 = t1589 * t1456 + t1585 * t1457;
t1434 = t1588 * t1452 - t1584 * t1454;
t1433 = t1584 * t1452 + t1588 * t1454;
t1432 = -t1585 * t1449 + t1589 * t1450;
t1431 = t1589 * t1449 + t1585 * t1450;
t1430 = -t1582 * t1445 + t1583 * t1446;
t1429 = t1583 * t1445 + t1582 * t1446;
t1428 = -t1586 * t1441 + t1590 * t1442;
t1427 = t1590 * t1441 + t1586 * t1442;
t1426 = t1584 * t1439 + t1588 * t1440;
t1425 = t1588 * t1439 - t1584 * t1440;
t1424 = -t1582 * t1435 + t1583 * t1436;
t1423 = t1583 * t1435 + t1582 * t1436;
t1422 = -t1585 * t1433 + t1589 * t1434;
t1421 = t1589 * t1433 + t1585 * t1434;
t1420 = -t1582 * t1431 + t1583 * t1432;
t1419 = t1583 * t1431 + t1582 * t1432;
t1418 = -t1586 * t1429 + t1590 * t1430;
t1417 = t1590 * t1429 + t1586 * t1430;
t1416 = -t1584 * t1425 + t1588 * t1426;
t1415 = t1588 * t1425 + t1584 * t1426;
t1414 = -t1586 * t1423 + t1590 * t1424;
t1413 = t1590 * t1423 + t1586 * t1424;
t1412 = -t1582 * t1421 + t1583 * t1422;
t1411 = t1583 * t1421 + t1582 * t1422;
t1410 = -t1586 * t1419 + t1590 * t1420;
t1409 = t1590 * t1419 + t1586 * t1420;
t1408 = -t1585 * t1415 + t1589 * t1416;
t1407 = t1589 * t1415 + t1585 * t1416;
t1406 = -t1586 * t1411 + t1590 * t1412;
t1405 = t1590 * t1411 + t1586 * t1412;
t1404 = -t1582 * t1407 + t1583 * t1408;
t1403 = t1583 * t1407 + t1582 * t1408;
t1402 = -t1586 * t1403 + t1590 * t1404;
t1401 = t1590 * t1403 + t1586 * t1404;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1565, -t1564, 0, -t1587 * t1569 + t1591 * t1570, 0, 0, 0, 0, 0, 0, t1591 * t1542 - t1587 * t1562, t1591 * t1543 + t1587 * t1559, t1591 * t1563 - t1587 * t1566, t1591 * t1519 - t1587 * t1556, 0, 0, 0, 0, 0, 0, t1591 * t1482 + t1587 * t1522, t1591 * t1493 + t1587 * t1524, t1591 * t1473 + t1587 * t1521, t1591 * t1448 - t1587 * t1520, 0, 0, 0, 0, 0, 0, t1591 * t1438 + t1587 * t1483, t1591 * t1444 + t1587 * t1485, t1591 * t1428 + t1587 * t1494, t1591 * t1410 - t1587 * t1489, 0, 0, 0, 0, 0, 0, t1591 * t1414 + t1587 * t1451, t1591 * t1418 + t1587 * t1453, t1591 * t1406 + t1587 * t1468, t1591 * t1402 - t1587 * t1455; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1564, t1565, 0, t1591 * t1569 + t1587 * t1570, 0, 0, 0, 0, 0, 0, t1587 * t1542 + t1591 * t1562, t1587 * t1543 - t1591 * t1559, t1587 * t1563 + t1591 * t1566, t1587 * t1519 + t1591 * t1556, 0, 0, 0, 0, 0, 0, t1587 * t1482 - t1591 * t1522, t1587 * t1493 - t1591 * t1524, t1587 * t1473 - t1591 * t1521, t1587 * t1448 + t1591 * t1520, 0, 0, 0, 0, 0, 0, t1587 * t1438 - t1591 * t1483, t1587 * t1444 - t1591 * t1485, t1587 * t1428 - t1591 * t1494, t1587 * t1410 + t1591 * t1489, 0, 0, 0, 0, 0, 0, t1587 * t1414 - t1591 * t1451, t1587 * t1418 - t1591 * t1453, t1587 * t1406 - t1591 * t1468, t1587 * t1402 + t1591 * t1455; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1540, t1541, 0, t1518, 0, 0, 0, 0, 0, 0, t1481, t1492, t1472, t1447, 0, 0, 0, 0, 0, 0, t1437, t1443, t1427, t1409, 0, 0, 0, 0, 0, 0, t1413, t1417, t1405, t1401; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1593, -qJDD(1), 0, t1570, 0, 0, 0, 0, 0, 0, t1542, t1543, t1563, t1519, 0, 0, 0, 0, 0, 0, t1482, t1493, t1473, t1448, 0, 0, 0, 0, 0, 0, t1438, t1444, t1428, t1410, 0, 0, 0, 0, 0, 0, t1414, t1418, t1406, t1402; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1593, 0, t1569, 0, 0, 0, 0, 0, 0, t1562, -t1559, t1566, t1556, 0, 0, 0, 0, 0, 0, -t1522, -t1524, -t1521, t1520, 0, 0, 0, 0, 0, 0, -t1483, -t1485, -t1494, t1489, 0, 0, 0, 0, 0, 0, -t1451, -t1453, -t1468, t1455; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1540, t1541, 0, t1518, 0, 0, 0, 0, 0, 0, t1481, t1492, t1472, t1447, 0, 0, 0, 0, 0, 0, t1437, t1443, t1427, t1409, 0, 0, 0, 0, 0, 0, t1413, t1417, t1405, t1401; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1573, t1568, t1577, t1545, 0, 0, 0, 0, 0, 0, t1510, t1512, t1499, t1467, 0, 0, 0, 0, 0, 0, t1459, t1463, t1442, t1420, 0, 0, 0, 0, 0, 0, t1424, t1430, t1412, t1404; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1567, t1572, -t1606, t1544, 0, 0, 0, 0, 0, 0, t1509, t1511, t1498, t1466, 0, 0, 0, 0, 0, 0, t1458, t1462, t1441, t1419, 0, 0, 0, 0, 0, 0, t1423, t1429, t1411, t1403; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1562, t1559, -t1566, -t1556, 0, 0, 0, 0, 0, 0, t1522, t1524, t1521, -t1520, 0, 0, 0, 0, 0, 0, t1483, t1485, t1494, -t1489, 0, 0, 0, 0, 0, 0, t1451, t1453, t1468, -t1455; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1534, t1536, t1523, t1491, 0, 0, 0, 0, 0, 0, t1480, t1488, t1461, t1432, 0, 0, 0, 0, 0, 0, t1436, t1446, t1422, t1408; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1535, t1546, t1525, t1490, 0, 0, 0, 0, 0, 0, t1479, t1487, t1460, t1431, 0, 0, 0, 0, 0, 0, t1435, t1445, t1421, t1407; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1522, t1524, t1521, -t1520, 0, 0, 0, 0, 0, 0, t1483, t1485, t1494, -t1489, 0, 0, 0, 0, 0, 0, t1451, t1453, t1468, -t1455; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1506, t1508, t1484, t1450, 0, 0, 0, 0, 0, 0, t1457, t1465, t1434, t1416; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1507, t1526, t1486, t1449, 0, 0, 0, 0, 0, 0, t1456, t1464, t1433, t1415; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1483, t1485, t1494, -t1489, 0, 0, 0, 0, 0, 0, t1451, t1453, t1468, -t1455; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1476, t1478, t1452, t1426; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1477, t1500, t1454, t1425; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1451, t1453, t1468, -t1455;];
f_new_reg = t1;
