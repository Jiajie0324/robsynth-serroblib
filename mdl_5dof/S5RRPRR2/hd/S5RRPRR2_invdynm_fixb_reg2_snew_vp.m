% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPRR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:29
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPRR2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR2_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR2_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR2_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR2_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:28:58
% EndTime: 2019-12-05 18:29:22
% DurationCPUTime: 25.08s
% Computational Cost: add. (216569->731), mult. (520530->1038), div. (0->0), fcn. (380639->10), ass. (0->506)
t1286 = sin(pkin(9));
t1287 = cos(pkin(9));
t1294 = cos(qJ(2));
t1377 = qJD(1) * t1294;
t1290 = sin(qJ(2));
t1378 = qJD(1) * t1290;
t1243 = t1286 * t1378 - t1287 * t1377;
t1241 = t1243 ^ 2;
t1296 = qJD(2) ^ 2;
t1205 = -t1296 - t1241;
t1245 = (t1286 * t1294 + t1287 * t1290) * qJD(1);
t1211 = t1245 * t1243;
t1389 = qJDD(2) - t1211;
t1398 = t1287 * t1389;
t1156 = t1286 * t1205 + t1398;
t1273 = qJD(2) * t1377;
t1337 = t1290 * qJDD(1);
t1254 = t1273 + t1337;
t1297 = qJD(1) ^ 2;
t1349 = t1290 * t1297;
t1291 = sin(qJ(1));
t1295 = cos(qJ(1));
t1265 = t1295 * g(1) + t1291 * g(2);
t1248 = -t1297 * pkin(1) + qJDD(1) * pkin(6) - t1265;
t1352 = t1290 * t1248;
t1379 = qJD(1) * qJD(2);
t1175 = qJDD(2) * pkin(2) - t1254 * qJ(3) - t1352 + (pkin(2) * t1349 + qJ(3) * t1379 - g(3)) * t1294;
t1228 = -t1290 * g(3) + t1294 * t1248;
t1278 = t1294 * qJDD(1);
t1332 = qJD(2) * t1378;
t1255 = t1278 - t1332;
t1285 = t1294 ^ 2;
t1279 = t1285 * t1297;
t1303 = qJD(2) * pkin(2) - qJ(3) * t1378;
t1176 = -pkin(2) * t1279 + t1255 * qJ(3) - qJD(2) * t1303 + t1228;
t1308 = -0.2e1 * qJD(3) * t1245 + t1287 * t1175 - t1286 * t1176;
t1400 = pkin(2) * t1156 + t1308;
t1399 = t1286 * t1389;
t1288 = sin(qJ(5));
t1289 = sin(qJ(4));
t1293 = cos(qJ(4));
t1201 = t1293 * t1243 + t1289 * t1245;
t1203 = -t1289 * t1243 + t1293 * t1245;
t1292 = cos(qJ(5));
t1147 = t1292 * t1201 + t1288 * t1203;
t1149 = -t1288 * t1201 + t1292 * t1203;
t1090 = t1149 * t1147;
t1282 = qJDD(2) + qJDD(4);
t1275 = qJDD(5) + t1282;
t1392 = -t1090 + t1275;
t1397 = t1288 * t1392;
t1155 = t1203 * t1201;
t1390 = -t1155 + t1282;
t1396 = t1289 * t1390;
t1395 = t1292 * t1392;
t1394 = t1293 * t1390;
t1213 = t1287 * t1254 + t1286 * t1255;
t1320 = t1286 * t1254 - t1287 * t1255;
t1321 = t1289 * t1213 + t1293 * t1320;
t1129 = -t1203 * qJD(4) - t1321;
t1130 = -t1201 * qJD(4) + t1293 * t1213 - t1289 * t1320;
t1046 = -t1147 * qJD(5) + t1288 * t1129 + t1292 * t1130;
t1283 = qJD(2) + qJD(4);
t1276 = qJD(5) + t1283;
t1142 = t1276 * t1147;
t1393 = t1046 - t1142;
t1195 = t1283 * t1201;
t1391 = t1130 - t1195;
t1103 = t1130 + t1195;
t1239 = qJD(2) * t1243;
t1186 = t1213 + t1239;
t1323 = -t1292 * t1129 + t1288 * t1130;
t1019 = (qJD(5) - t1276) * t1149 + t1323;
t1099 = (qJD(4) - t1283) * t1203 + t1321;
t1145 = t1147 ^ 2;
t1146 = t1149 ^ 2;
t1199 = t1201 ^ 2;
t1200 = t1203 ^ 2;
t1242 = t1245 ^ 2;
t1274 = t1276 ^ 2;
t1281 = t1283 ^ 2;
t1375 = qJD(3) * t1243;
t1235 = -0.2e1 * t1375;
t1339 = t1286 * t1175 + t1287 * t1176;
t1110 = t1235 + t1339;
t1057 = t1286 * t1110 + t1287 * t1308;
t1388 = pkin(2) * t1057;
t1376 = qJD(2) * t1245;
t1184 = -t1320 + t1376;
t1132 = t1286 * t1184 - t1287 * t1186;
t1387 = pkin(2) * t1132;
t1070 = pkin(3) * t1389 - t1186 * pkin(7) + t1308;
t1313 = qJD(2) * pkin(3) - t1245 * pkin(7);
t1076 = -t1241 * pkin(3) - pkin(7) * t1320 - qJD(2) * t1313 + t1110;
t1009 = -t1293 * t1070 + t1289 * t1076;
t978 = t1390 * pkin(4) - t1103 * pkin(8) - t1009;
t1010 = t1289 * t1070 + t1293 * t1076;
t1312 = t1283 * pkin(4) - t1203 * pkin(8);
t984 = -t1199 * pkin(4) + t1129 * pkin(8) - t1283 * t1312 + t1010;
t931 = t1288 * t984 - t1292 * t978;
t932 = t1288 * t978 + t1292 * t984;
t902 = t1288 * t932 - t1292 * t931;
t1380 = t1293 * t902;
t903 = t1288 * t931 + t1292 * t932;
t874 = t1289 * t903 + t1380;
t901 = pkin(4) * t902;
t1385 = pkin(3) * t874 + t901;
t1022 = t1046 + t1142;
t966 = -t1019 * t1288 - t1292 * t1022;
t968 = -t1019 * t1292 + t1288 * t1022;
t922 = t1289 * t968 + t1293 * t966;
t964 = pkin(4) * t966;
t1384 = pkin(3) * t922 + t964;
t957 = -t1293 * t1009 + t1289 * t1010;
t1383 = t1286 * t957;
t1382 = t1287 * t957;
t1381 = t1289 * t902;
t1373 = t1243 * t1286;
t1372 = t1243 * t1287;
t1371 = t1245 * t1286;
t1370 = t1245 * t1287;
t1369 = t1276 * t1149;
t1368 = t1276 * t1288;
t1367 = t1276 * t1292;
t1366 = t1283 * t1203;
t1365 = t1283 * t1289;
t1364 = t1283 * t1293;
t1284 = t1290 ^ 2;
t1363 = t1284 * t1297;
t1264 = t1291 * g(1) - t1295 * g(2);
t1304 = qJDD(1) * pkin(1) + t1264;
t1180 = t1255 * pkin(2) - qJDD(3) - t1303 * t1378 + (qJ(3) * t1285 + pkin(6)) * t1297 + t1304;
t1362 = t1286 * t1180;
t1207 = qJDD(2) + t1211;
t1361 = t1286 * t1207;
t1360 = t1287 * t1180;
t1359 = t1287 * t1207;
t1108 = -pkin(3) * t1320 + t1241 * pkin(7) - t1245 * t1313 + t1180;
t1030 = t1129 * pkin(4) + t1199 * pkin(8) - t1203 * t1312 + t1108;
t1358 = t1288 * t1030;
t1084 = t1090 + t1275;
t1357 = t1288 * t1084;
t1356 = t1289 * t1108;
t1152 = t1155 + t1282;
t1355 = t1289 * t1152;
t1354 = t1290 * t1057;
t1247 = t1297 * pkin(6) + t1304;
t1353 = t1290 * t1247;
t1271 = t1294 * t1349;
t1262 = qJDD(2) + t1271;
t1351 = t1290 * t1262;
t1263 = qJDD(2) - t1271;
t1350 = t1290 * t1263;
t1348 = t1292 * t1030;
t1347 = t1292 * t1084;
t1346 = t1293 * t1108;
t1345 = t1293 * t1152;
t1344 = t1294 * t1057;
t1343 = t1294 * t1247;
t1342 = t1294 * t1263;
t1338 = t1284 + t1285;
t1336 = t1291 * qJDD(1);
t1335 = t1295 * qJDD(1);
t1334 = t1295 * qJDD(2);
t958 = t1289 * t1009 + t1293 * t1010;
t913 = t1286 * t958 + t1382;
t956 = pkin(3) * t957;
t1333 = pkin(2) * t913 + t956;
t1331 = t1291 * t1090;
t1330 = t1291 * t1155;
t1329 = t1291 * t1211;
t1328 = t1295 * t1090;
t1327 = t1295 * t1155;
t1326 = t1295 * t1211;
t1189 = -t1200 - t1281;
t1106 = t1293 * t1189 - t1355;
t1325 = pkin(3) * t1106 - t1010;
t1048 = -t1099 * t1289 - t1293 * t1103;
t1044 = pkin(3) * t1048;
t1050 = -t1099 * t1293 + t1289 * t1103;
t986 = t1287 * t1048 + t1286 * t1050;
t1324 = pkin(2) * t986 + t1044;
t1058 = t1287 * t1110 - t1286 * t1308;
t1227 = t1294 * g(3) + t1352;
t1179 = t1290 * t1227 + t1294 * t1228;
t1319 = -t1291 * t1264 - t1295 * t1265;
t875 = t1293 * t903 - t1381;
t856 = t1286 * t875 + t1287 * t874;
t1318 = pkin(2) * t856 + t1385;
t924 = -t1289 * t966 + t1293 * t968;
t888 = t1286 * t924 + t1287 * t922;
t1317 = pkin(2) * t888 + t1384;
t1316 = t1291 * t1271;
t1315 = t1295 * t1271;
t1233 = -t1242 - t1296;
t1162 = t1287 * t1233 - t1361;
t1314 = pkin(2) * t1162 - t1339;
t1259 = -t1291 * t1297 + t1335;
t1311 = -pkin(5) * t1259 - t1291 * g(3);
t1082 = -t1274 - t1145;
t1032 = t1288 * t1082 + t1395;
t1310 = pkin(4) * t1032 - t931;
t1150 = -t1281 - t1199;
t1087 = t1289 * t1150 + t1394;
t1309 = pkin(3) * t1087 - t1009;
t1178 = t1294 * t1227 - t1290 * t1228;
t1307 = t1295 * t1264 - t1291 * t1265;
t1107 = -t1289 * t1189 - t1345;
t1051 = t1287 * t1106 + t1286 * t1107;
t1306 = pkin(2) * t1051 + t1325;
t1033 = t1292 * t1082 - t1397;
t973 = t1293 * t1032 + t1289 * t1033;
t1305 = pkin(3) * t973 + t1310;
t1135 = -t1146 - t1274;
t1054 = t1292 * t1135 - t1357;
t1302 = pkin(4) * t1054 - t932;
t1088 = t1293 * t1150 - t1396;
t1034 = t1287 * t1087 + t1286 * t1088;
t1301 = pkin(2) * t1034 + t1309;
t1055 = -t1288 * t1135 - t1347;
t992 = t1293 * t1054 + t1289 * t1055;
t1300 = pkin(3) * t992 + t1302;
t974 = -t1289 * t1032 + t1293 * t1033;
t927 = t1286 * t974 + t1287 * t973;
t1299 = pkin(2) * t927 + t1305;
t993 = -t1289 * t1054 + t1293 * t1055;
t945 = t1286 * t993 + t1287 * t992;
t1298 = pkin(2) * t945 + t1300;
t1277 = t1291 * qJDD(2);
t1270 = -t1279 - t1296;
t1269 = t1279 - t1296;
t1268 = -t1296 - t1363;
t1267 = t1296 - t1363;
t1261 = -t1279 + t1363;
t1260 = t1279 + t1363;
t1258 = t1295 * t1297 + t1336;
t1257 = t1338 * qJDD(1);
t1256 = t1278 - 0.2e1 * t1332;
t1253 = 0.2e1 * t1273 + t1337;
t1251 = t1294 * t1262;
t1250 = t1338 * t1379;
t1240 = -pkin(5) * t1258 + t1295 * g(3);
t1232 = -t1242 + t1296;
t1231 = t1241 - t1296;
t1230 = t1294 * t1254 - t1284 * t1379;
t1229 = -t1290 * t1255 - t1285 * t1379;
t1226 = -t1290 * t1268 - t1342;
t1225 = -t1290 * t1267 + t1251;
t1224 = t1294 * t1270 - t1351;
t1223 = t1294 * t1269 - t1350;
t1222 = t1294 * t1268 - t1350;
t1221 = t1294 * t1267 + t1351;
t1220 = t1290 * t1270 + t1251;
t1219 = t1290 * t1269 + t1342;
t1218 = (t1254 + t1273) * t1290;
t1217 = (t1255 - t1332) * t1294;
t1215 = -t1290 * t1253 + t1294 * t1256;
t1214 = t1294 * t1253 + t1290 * t1256;
t1210 = t1242 - t1241;
t1197 = (t1371 - t1372) * qJD(2);
t1196 = (-t1370 - t1373) * qJD(2);
t1193 = -t1200 + t1281;
t1192 = t1199 - t1281;
t1191 = -pkin(6) * t1222 - t1343;
t1190 = -pkin(6) * t1220 - t1353;
t1188 = -pkin(1) * t1222 + t1228;
t1187 = -pkin(1) * t1220 + t1227;
t1185 = t1213 - t1239;
t1182 = t1320 + t1376;
t1181 = -t1241 - t1242;
t1174 = -qJD(2) * t1371 + t1287 * t1213;
t1173 = qJD(2) * t1370 + t1286 * t1213;
t1172 = qJD(2) * t1372 + t1286 * t1320;
t1171 = qJD(2) * t1373 - t1287 * t1320;
t1169 = pkin(1) * t1256 + pkin(6) * t1224 + t1343;
t1168 = -pkin(1) * t1253 + pkin(6) * t1226 - t1353;
t1165 = -t1286 * t1233 - t1359;
t1164 = -t1286 * t1232 + t1398;
t1163 = t1287 * t1231 - t1361;
t1161 = t1287 * t1232 + t1399;
t1160 = t1286 * t1231 + t1359;
t1159 = pkin(1) * t1247 + pkin(6) * t1179;
t1158 = pkin(1) * t1260 + pkin(6) * t1257 + t1179;
t1157 = t1287 * t1205 - t1399;
t1154 = t1200 - t1199;
t1141 = -t1146 + t1274;
t1140 = t1145 - t1274;
t1139 = -t1290 * t1196 + t1294 * t1197;
t1138 = t1294 * t1196 + t1290 * t1197;
t1137 = (-t1201 * t1293 + t1203 * t1289) * t1283;
t1136 = (-t1201 * t1289 - t1203 * t1293) * t1283;
t1134 = t1287 * t1184 + t1286 * t1186;
t1133 = -t1287 * t1182 - t1286 * t1185;
t1131 = -t1286 * t1182 + t1287 * t1185;
t1127 = -qJ(3) * t1162 - t1360;
t1126 = -t1199 - t1200;
t1125 = -t1290 * t1173 + t1294 * t1174;
t1124 = -t1290 * t1171 + t1294 * t1172;
t1123 = t1294 * t1173 + t1290 * t1174;
t1122 = t1294 * t1171 + t1290 * t1172;
t1121 = -t1290 * t1162 + t1294 * t1165;
t1120 = -t1290 * t1161 + t1294 * t1164;
t1119 = -t1290 * t1160 + t1294 * t1163;
t1118 = t1294 * t1162 + t1290 * t1165;
t1117 = t1294 * t1161 + t1290 * t1164;
t1116 = t1294 * t1160 + t1290 * t1163;
t1115 = -qJ(3) * t1156 - t1362;
t1114 = t1293 * t1192 - t1355;
t1113 = -t1289 * t1193 + t1394;
t1112 = t1289 * t1192 + t1345;
t1111 = t1293 * t1193 + t1396;
t1098 = (qJD(4) + t1283) * t1203 + t1321;
t1097 = t1293 * t1130 - t1203 * t1365;
t1096 = t1289 * t1130 + t1203 * t1364;
t1095 = -t1289 * t1129 + t1201 * t1364;
t1094 = t1293 * t1129 + t1201 * t1365;
t1093 = -t1290 * t1156 + t1294 * t1157;
t1092 = t1294 * t1156 + t1290 * t1157;
t1091 = -pkin(2) * t1185 + qJ(3) * t1165 - t1362;
t1089 = t1146 - t1145;
t1081 = -pkin(2) * t1182 + qJ(3) * t1157 + t1360;
t1080 = (-t1147 * t1292 + t1149 * t1288) * t1276;
t1079 = (-t1147 * t1288 - t1149 * t1292) * t1276;
t1078 = -t1286 * t1136 + t1287 * t1137;
t1077 = t1287 * t1136 + t1286 * t1137;
t1074 = -t1290 * t1132 + t1294 * t1134;
t1073 = -t1290 * t1131 + t1294 * t1133;
t1072 = t1294 * t1132 + t1290 * t1134;
t1071 = t1294 * t1131 + t1290 * t1133;
t1067 = -t1145 - t1146;
t1066 = t1292 * t1140 - t1357;
t1065 = -t1288 * t1141 + t1395;
t1064 = t1288 * t1140 + t1347;
t1063 = t1292 * t1141 + t1397;
t1062 = -t1286 * t1112 + t1287 * t1114;
t1061 = -t1286 * t1111 + t1287 * t1113;
t1060 = t1287 * t1112 + t1286 * t1114;
t1059 = t1287 * t1111 + t1286 * t1113;
t1056 = -pkin(7) * t1106 - t1346;
t1052 = -t1286 * t1106 + t1287 * t1107;
t1049 = -t1293 * t1098 - t1289 * t1391;
t1047 = -t1289 * t1098 + t1293 * t1391;
t1045 = -t1149 * qJD(5) - t1323;
t1043 = -pkin(7) * t1087 - t1356;
t1042 = -t1286 * t1096 + t1287 * t1097;
t1041 = -t1286 * t1094 + t1287 * t1095;
t1040 = t1287 * t1096 + t1286 * t1097;
t1039 = t1287 * t1094 + t1286 * t1095;
t1038 = -pkin(1) * t1072 - t1387;
t1037 = -pkin(1) * t1118 + t1235 - t1314;
t1036 = pkin(2) * t1180 + qJ(3) * t1058;
t1035 = -t1286 * t1087 + t1287 * t1088;
t1029 = -pkin(1) * t1092 - t1400;
t1028 = -t1289 * t1079 + t1293 * t1080;
t1027 = t1293 * t1079 + t1289 * t1080;
t1026 = -qJ(3) * t1132 - t1057;
t1025 = -t1290 * t1077 + t1294 * t1078;
t1024 = t1294 * t1077 + t1290 * t1078;
t1018 = (qJD(5) + t1276) * t1149 + t1323;
t1017 = t1292 * t1046 - t1149 * t1368;
t1016 = t1288 * t1046 + t1149 * t1367;
t1015 = -t1288 * t1045 + t1147 * t1367;
t1014 = t1292 * t1045 + t1147 * t1368;
t1013 = -pkin(6) * t1118 - t1290 * t1091 + t1294 * t1127;
t1012 = -pkin(3) * t1391 + pkin(7) * t1107 - t1356;
t1011 = -pkin(2) * t1181 + qJ(3) * t1134 + t1058;
t1007 = -pkin(3) * t1098 + pkin(7) * t1088 + t1346;
t1006 = -pkin(1) * t1185 + pkin(6) * t1121 + t1294 * t1091 + t1290 * t1127;
t1005 = -pkin(6) * t1092 - t1290 * t1081 + t1294 * t1115;
t1004 = -pkin(1) * t1182 + pkin(6) * t1093 + t1294 * t1081 + t1290 * t1115;
t1003 = -t1289 * t1064 + t1293 * t1066;
t1002 = -t1289 * t1063 + t1293 * t1065;
t1001 = t1293 * t1064 + t1289 * t1066;
t1000 = t1293 * t1063 + t1289 * t1065;
t999 = -t1290 * t1060 + t1294 * t1062;
t998 = -t1290 * t1059 + t1294 * t1061;
t997 = t1294 * t1060 + t1290 * t1062;
t996 = t1294 * t1059 + t1290 * t1061;
t995 = t1294 * t1058 - t1354;
t994 = t1290 * t1058 + t1344;
t990 = -t1290 * t1051 + t1294 * t1052;
t989 = t1294 * t1051 + t1290 * t1052;
t988 = -t1286 * t1048 + t1287 * t1050;
t987 = -t1286 * t1047 + t1287 * t1049;
t985 = t1287 * t1047 + t1286 * t1049;
t983 = -pkin(8) * t1054 - t1348;
t982 = -t1290 * t1040 + t1294 * t1042;
t981 = -t1290 * t1039 + t1294 * t1041;
t980 = t1294 * t1040 + t1290 * t1042;
t979 = t1294 * t1039 + t1290 * t1041;
t976 = -t1290 * t1034 + t1294 * t1035;
t975 = t1294 * t1034 + t1290 * t1035;
t971 = -pkin(8) * t1032 - t1358;
t970 = -t1286 * t1027 + t1287 * t1028;
t969 = t1287 * t1027 + t1286 * t1028;
t967 = -t1292 * t1018 - t1288 * t1393;
t965 = -t1288 * t1018 + t1292 * t1393;
t963 = -t1289 * t1016 + t1293 * t1017;
t962 = -t1289 * t1014 + t1293 * t1015;
t961 = t1293 * t1016 + t1289 * t1017;
t960 = t1293 * t1014 + t1289 * t1015;
t959 = -pkin(1) * t994 - t1388;
t955 = -qJ(3) * t1051 - t1286 * t1012 + t1287 * t1056;
t954 = pkin(3) * t1108 + pkin(7) * t958;
t953 = -pkin(6) * t1072 - t1290 * t1011 + t1294 * t1026;
t952 = -pkin(4) * t1393 + pkin(8) * t1055 - t1358;
t951 = -pkin(1) * t1181 + pkin(6) * t1074 + t1294 * t1011 + t1290 * t1026;
t950 = -t1286 * t1001 + t1287 * t1003;
t949 = -t1286 * t1000 + t1287 * t1002;
t948 = t1287 * t1001 + t1286 * t1003;
t947 = t1287 * t1000 + t1286 * t1002;
t946 = -t1286 * t992 + t1287 * t993;
t944 = -pkin(4) * t1018 + pkin(8) * t1033 + t1348;
t943 = -qJ(3) * t1034 - t1286 * t1007 + t1287 * t1043;
t942 = -pkin(2) * t1391 + qJ(3) * t1052 + t1287 * t1012 + t1286 * t1056;
t941 = -pkin(6) * t994 - qJ(3) * t1344 - t1290 * t1036;
t940 = -pkin(7) * t1048 - t957;
t939 = pkin(1) * t1180 + pkin(6) * t995 - qJ(3) * t1354 + t1294 * t1036;
t938 = -t1290 * t986 + t1294 * t988;
t937 = -t1290 * t985 + t1294 * t987;
t936 = t1290 * t988 + t1294 * t986;
t935 = t1290 * t987 + t1294 * t985;
t934 = -pkin(2) * t1098 + qJ(3) * t1035 + t1287 * t1007 + t1286 * t1043;
t933 = -pkin(3) * t1126 + pkin(7) * t1050 + t958;
t929 = -pkin(1) * t989 - t1306;
t928 = -t1286 * t973 + t1287 * t974;
t926 = -t1290 * t969 + t1294 * t970;
t925 = t1290 * t970 + t1294 * t969;
t923 = -t1289 * t965 + t1293 * t967;
t921 = t1289 * t967 + t1293 * t965;
t919 = -t1286 * t961 + t1287 * t963;
t918 = -t1286 * t960 + t1287 * t962;
t917 = t1286 * t963 + t1287 * t961;
t916 = t1286 * t962 + t1287 * t960;
t915 = -pkin(1) * t975 - t1301;
t914 = t1287 * t958 - t1383;
t912 = -pkin(1) * t936 - t1324;
t911 = -t1290 * t948 + t1294 * t950;
t910 = -t1290 * t947 + t1294 * t949;
t909 = t1290 * t950 + t1294 * t948;
t908 = t1290 * t949 + t1294 * t947;
t907 = -t1290 * t945 + t1294 * t946;
t906 = t1290 * t946 + t1294 * t945;
t905 = -pkin(7) * t992 - t1289 * t952 + t1293 * t983;
t904 = -pkin(7) * t973 - t1289 * t944 + t1293 * t971;
t900 = -pkin(3) * t1393 + pkin(7) * t993 + t1289 * t983 + t1293 * t952;
t899 = -pkin(6) * t989 - t1290 * t942 + t1294 * t955;
t898 = -pkin(1) * t1391 + pkin(6) * t990 + t1290 * t955 + t1294 * t942;
t897 = -t1290 * t927 + t1294 * t928;
t896 = t1290 * t928 + t1294 * t927;
t895 = pkin(4) * t1030 + pkin(8) * t903;
t894 = -pkin(3) * t1018 + pkin(7) * t974 + t1289 * t971 + t1293 * t944;
t893 = -qJ(3) * t986 - t1286 * t933 + t1287 * t940;
t892 = -pkin(6) * t975 - t1290 * t934 + t1294 * t943;
t891 = -pkin(2) * t1126 + qJ(3) * t988 + t1286 * t940 + t1287 * t933;
t890 = -t1286 * t922 + t1287 * t924;
t889 = -t1286 * t921 + t1287 * t923;
t887 = t1286 * t923 + t1287 * t921;
t886 = -pkin(1) * t1098 + pkin(6) * t976 + t1290 * t943 + t1294 * t934;
t885 = -t1290 * t917 + t1294 * t919;
t884 = -t1290 * t916 + t1294 * t918;
t883 = t1290 * t919 + t1294 * t917;
t882 = t1290 * t918 + t1294 * t916;
t881 = -pkin(8) * t966 - t902;
t880 = -t1290 * t913 + t1294 * t914;
t879 = t1290 * t914 + t1294 * t913;
t878 = -pkin(7) * t1382 - qJ(3) * t913 - t1286 * t954;
t877 = -pkin(4) * t1067 + pkin(8) * t968 + t903;
t876 = pkin(2) * t1108 - pkin(7) * t1383 + qJ(3) * t914 + t1287 * t954;
t872 = -pkin(1) * t906 - t1298;
t871 = -qJ(3) * t945 - t1286 * t900 + t1287 * t905;
t870 = -pkin(1) * t879 - t1333;
t869 = -pkin(2) * t1393 + qJ(3) * t946 + t1286 * t905 + t1287 * t900;
t868 = -t1290 * t888 + t1294 * t890;
t867 = -t1290 * t887 + t1294 * t889;
t866 = t1290 * t890 + t1294 * t888;
t865 = t1290 * t889 + t1294 * t887;
t864 = -pkin(1) * t896 - t1299;
t863 = -qJ(3) * t927 - t1286 * t894 + t1287 * t904;
t862 = -pkin(2) * t1018 + qJ(3) * t928 + t1286 * t904 + t1287 * t894;
t861 = -pkin(6) * t936 - t1290 * t891 + t1294 * t893;
t860 = -pkin(1) * t1126 + pkin(6) * t938 + t1290 * t893 + t1294 * t891;
t859 = -pkin(7) * t922 - t1289 * t877 + t1293 * t881;
t858 = -pkin(3) * t1067 + pkin(7) * t924 + t1289 * t881 + t1293 * t877;
t857 = -t1286 * t874 + t1287 * t875;
t855 = -pkin(7) * t874 - pkin(8) * t1380 - t1289 * t895;
t854 = -pkin(6) * t879 - t1290 * t876 + t1294 * t878;
t853 = pkin(1) * t1108 + pkin(6) * t880 + t1290 * t878 + t1294 * t876;
t852 = pkin(3) * t1030 + pkin(7) * t875 - pkin(8) * t1381 + t1293 * t895;
t851 = -pkin(1) * t866 - t1317;
t850 = -pkin(6) * t906 - t1290 * t869 + t1294 * t871;
t849 = -pkin(1) * t1393 + pkin(6) * t907 + t1290 * t871 + t1294 * t869;
t848 = -pkin(6) * t896 - t1290 * t862 + t1294 * t863;
t847 = -pkin(1) * t1018 + pkin(6) * t897 + t1290 * t863 + t1294 * t862;
t846 = -qJ(3) * t888 - t1286 * t858 + t1287 * t859;
t845 = -t1290 * t856 + t1294 * t857;
t844 = t1290 * t857 + t1294 * t856;
t843 = -pkin(2) * t1067 + qJ(3) * t890 + t1286 * t859 + t1287 * t858;
t842 = -qJ(3) * t856 - t1286 * t852 + t1287 * t855;
t841 = pkin(2) * t1030 + qJ(3) * t857 + t1286 * t855 + t1287 * t852;
t840 = -pkin(1) * t844 - t1318;
t839 = -pkin(6) * t866 - t1290 * t843 + t1294 * t846;
t838 = -pkin(1) * t1067 + pkin(6) * t868 + t1290 * t846 + t1294 * t843;
t837 = -pkin(6) * t844 - t1290 * t841 + t1294 * t842;
t836 = pkin(1) * t1030 + pkin(6) * t845 + t1290 * t842 + t1294 * t841;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1259, 0, -t1258, 0, t1311, -t1240, -t1307, -pkin(5) * t1307, t1295 * t1230 - t1316, t1295 * t1215 + t1291 * t1261, t1295 * t1225 + t1290 * t1336, t1295 * t1229 + t1316, t1295 * t1223 + t1278 * t1291, t1295 * t1250 + t1277, t1295 * t1190 - t1291 * t1187 - pkin(5) * (t1291 * t1224 + t1295 * t1256), t1295 * t1191 - t1291 * t1188 - pkin(5) * (t1291 * t1226 - t1295 * t1253), t1295 * t1178 - pkin(5) * (t1291 * t1257 + t1295 * t1260), -pkin(5) * (t1291 * t1179 + t1295 * t1247) - (t1291 * pkin(1) - t1295 * pkin(6)) * t1178, t1295 * t1125 + t1329, t1295 * t1073 + t1291 * t1210, t1295 * t1120 + t1291 * t1186, t1295 * t1124 - t1329, t1295 * t1119 + t1184 * t1291, t1295 * t1139 + t1277, t1295 * t1005 - t1291 * t1029 - pkin(5) * (t1291 * t1093 - t1295 * t1182), t1295 * t1013 - t1291 * t1037 - pkin(5) * (t1291 * t1121 - t1295 * t1185), t1295 * t953 - t1291 * t1038 - pkin(5) * (t1291 * t1074 - t1295 * t1181), t1295 * t941 - t1291 * t959 - pkin(5) * (t1295 * t1180 + t1291 * t995), t1295 * t982 + t1330, t1291 * t1154 + t1295 * t937, t1291 * t1103 + t1295 * t998, t1295 * t981 - t1330, -t1291 * t1099 + t1295 * t999, t1295 * t1025 + t1291 * t1282, t1295 * t892 - t1291 * t915 - pkin(5) * (-t1295 * t1098 + t1291 * t976), t1295 * t899 - t1291 * t929 - pkin(5) * (t1291 * t990 - t1295 * t1391), t1295 * t861 - t1291 * t912 - pkin(5) * (-t1295 * t1126 + t1291 * t938), t1295 * t854 - t1291 * t870 - pkin(5) * (t1295 * t1108 + t1291 * t880), t1295 * t885 + t1331, t1291 * t1089 + t1295 * t867, t1291 * t1022 + t1295 * t910, t1295 * t884 - t1331, -t1291 * t1019 + t1295 * t911, t1291 * t1275 + t1295 * t926, t1295 * t848 - t1291 * t864 - pkin(5) * (-t1295 * t1018 + t1291 * t897), t1295 * t850 - t1291 * t872 - pkin(5) * (t1291 * t907 - t1295 * t1393), t1295 * t839 - t1291 * t851 - pkin(5) * (-t1295 * t1067 + t1291 * t868), t1295 * t837 - t1291 * t840 - pkin(5) * (t1295 * t1030 + t1291 * t845); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1258, 0, t1259, 0, t1240, t1311, t1319, pkin(5) * t1319, t1291 * t1230 + t1315, t1291 * t1215 - t1295 * t1261, t1291 * t1225 - t1290 * t1335, t1291 * t1229 - t1315, t1291 * t1223 - t1294 * t1335, t1291 * t1250 - t1334, t1291 * t1190 + t1295 * t1187 + pkin(5) * (t1295 * t1224 - t1291 * t1256), t1291 * t1191 + t1295 * t1188 + pkin(5) * (t1295 * t1226 + t1291 * t1253), t1291 * t1178 + pkin(5) * (t1295 * t1257 - t1291 * t1260), pkin(5) * (t1295 * t1179 - t1291 * t1247) - (-t1295 * pkin(1) - t1291 * pkin(6)) * t1178, t1291 * t1125 - t1326, t1291 * t1073 - t1295 * t1210, t1291 * t1120 - t1295 * t1186, t1291 * t1124 + t1326, t1291 * t1119 - t1184 * t1295, t1291 * t1139 - t1334, t1291 * t1005 + t1295 * t1029 + pkin(5) * (t1295 * t1093 + t1291 * t1182), t1291 * t1013 + t1295 * t1037 + pkin(5) * (t1295 * t1121 + t1291 * t1185), t1291 * t953 + t1295 * t1038 + pkin(5) * (t1295 * t1074 + t1291 * t1181), t1291 * t941 + t1295 * t959 + pkin(5) * (-t1291 * t1180 + t1295 * t995), t1291 * t982 - t1327, -t1295 * t1154 + t1291 * t937, -t1295 * t1103 + t1291 * t998, t1291 * t981 + t1327, t1295 * t1099 + t1291 * t999, t1291 * t1025 - t1295 * t1282, t1291 * t892 + t1295 * t915 + pkin(5) * (t1291 * t1098 + t1295 * t976), t1291 * t899 + t1295 * t929 + pkin(5) * (t1291 * t1391 + t1295 * t990), t1291 * t861 + t1295 * t912 + pkin(5) * (t1291 * t1126 + t1295 * t938), t1291 * t854 + t1295 * t870 + pkin(5) * (-t1291 * t1108 + t1295 * t880), t1291 * t885 - t1328, -t1295 * t1089 + t1291 * t867, -t1295 * t1022 + t1291 * t910, t1291 * t884 + t1328, t1295 * t1019 + t1291 * t911, -t1295 * t1275 + t1291 * t926, t1291 * t848 + t1295 * t864 + pkin(5) * (t1291 * t1018 + t1295 * t897), t1291 * t850 + t1295 * t872 + pkin(5) * (t1291 * t1393 + t1295 * t907), t1291 * t839 + t1295 * t851 + pkin(5) * (t1291 * t1067 + t1295 * t868), t1291 * t837 + t1295 * t840 + pkin(5) * (-t1291 * t1030 + t1295 * t845); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1264, t1265, 0, 0, t1218, t1214, t1221, t1217, t1219, 0, t1169, t1168, t1158, t1159, t1123, t1071, t1117, t1122, t1116, t1138, t1004, t1006, t951, t939, t980, t935, t996, t979, t997, t1024, t886, t898, t860, t853, t883, t865, t908, t882, t909, t925, t847, t849, t838, t836; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1297, 0, 0, -g(3), -t1264, 0, t1230, t1215, t1225, t1229, t1223, t1250, t1190, t1191, t1178, pkin(6) * t1178, t1125, t1073, t1120, t1124, t1119, t1139, t1005, t1013, t953, t941, t982, t937, t998, t981, t999, t1025, t892, t899, t861, t854, t885, t867, t910, t884, t911, t926, t848, t850, t839, t837; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1297, 0, qJDD(1), 0, g(3), 0, -t1265, 0, t1271, -t1261, -t1337, -t1271, -t1278, -qJDD(2), t1187, t1188, 0, pkin(1) * t1178, -t1211, -t1210, -t1186, t1211, -t1184, -qJDD(2), t1029, t1037, t1038, t959, -t1155, -t1154, -t1103, t1155, t1099, -t1282, t915, t929, t912, t870, -t1090, -t1089, -t1022, t1090, t1019, -t1275, t864, t872, t851, t840; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1264, t1265, 0, 0, t1218, t1214, t1221, t1217, t1219, 0, t1169, t1168, t1158, t1159, t1123, t1071, t1117, t1122, t1116, t1138, t1004, t1006, t951, t939, t980, t935, t996, t979, t997, t1024, t886, t898, t860, t853, t883, t865, t908, t882, t909, t925, t847, t849, t838, t836; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1254, t1256, t1262, -t1273, t1269, t1273, 0, -t1247, t1227, 0, t1174, t1133, t1164, t1172, t1163, t1197, t1115, t1127, t1026, -qJ(3) * t1057, t1042, t987, t1061, t1041, t1062, t1078, t943, t955, t893, t878, t919, t889, t949, t918, t950, t970, t863, t871, t846, t842; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1332, t1253, t1267, t1255, t1263, -t1332, t1247, 0, t1228, 0, t1173, t1131, t1161, t1171, t1160, t1196, t1081, t1091, t1011, t1036, t1040, t985, t1059, t1039, t1060, t1077, t934, t942, t891, t876, t917, t887, t947, t916, t948, t969, t862, t869, t843, t841; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1271, t1261, t1337, t1271, t1278, qJDD(2), -t1227, -t1228, 0, 0, t1211, t1210, t1186, -t1211, t1184, qJDD(2), t1400, t1314 + 0.2e1 * t1375, t1387, t1388, t1155, t1154, t1103, -t1155, -t1099, t1282, t1301, t1306, t1324, t1333, t1090, t1089, t1022, -t1090, -t1019, t1275, t1299, t1298, t1317, t1318; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1213, -t1182, t1389, t1239, t1231, -t1239, 0, -t1180, -t1308, 0, t1097, t1049, t1113, t1095, t1114, t1137, t1043, t1056, t940, -pkin(7) * t957, t963, t923, t1002, t962, t1003, t1028, t904, t905, t859, t855; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1376, t1185, t1232, -t1320, t1207, -t1376, t1180, 0, t1110, 0, t1096, t1047, t1111, t1094, t1112, t1136, t1007, t1012, t933, t954, t961, t921, t1000, t960, t1001, t1027, t894, t900, t858, t852; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1211, t1210, t1186, -t1211, t1184, qJDD(2), t1308, -t1110, 0, 0, t1155, t1154, t1103, -t1155, -t1099, t1282, t1309, t1325, t1044, t956, t1090, t1089, t1022, -t1090, -t1019, t1275, t1305, t1300, t1384, t1385; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1130, -t1098, t1390, t1195, t1192, -t1195, 0, -t1108, t1009, 0, t1017, t967, t1065, t1015, t1066, t1080, t971, t983, t881, -pkin(8) * t902; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1366, t1391, t1193, t1129, t1152, -t1366, t1108, 0, t1010, 0, t1016, t965, t1063, t1014, t1064, t1079, t944, t952, t877, t895; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1155, t1154, t1103, -t1155, -t1099, t1282, -t1009, -t1010, 0, 0, t1090, t1089, t1022, -t1090, -t1019, t1275, t1310, t1302, t964, t901; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1046, -t1018, t1392, t1142, t1140, -t1142, 0, -t1030, t931, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1369, t1393, t1141, t1045, t1084, -t1369, t1030, 0, t932, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1090, t1089, t1022, -t1090, -t1019, t1275, -t931, -t932, 0, 0;];
m_new_reg = t1;
