% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PPPRR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d4,d5,theta1,theta2,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 14:59
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PPPRR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPPRR2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPPRR2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPPRR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPPRR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PPPRR2_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 14:59:51
% EndTime: 2019-12-05 14:59:52
% DurationCPUTime: 1.08s
% Computational Cost: add. (2793->125), mult. (4510->179), div. (0->0), fcn. (3766->10), ass. (0->100)
t728 = sin(pkin(7));
t731 = cos(pkin(7));
t713 = -g(1) * t731 - g(2) * t728;
t724 = -g(3) + qJDD(1);
t727 = sin(pkin(8));
t730 = cos(pkin(8));
t704 = t713 * t730 + t724 * t727;
t726 = sin(pkin(9));
t729 = cos(pkin(9));
t712 = t728 * g(1) - g(2) * t731;
t739 = qJDD(2) - t712;
t688 = t704 * t726 - t729 * t739;
t754 = t688 * t726;
t753 = t688 * t729;
t733 = sin(qJ(5));
t722 = t733 ^ 2;
t735 = cos(qJ(5));
t723 = t735 ^ 2;
t743 = t722 + t723;
t708 = t743 * qJDD(4);
t738 = qJD(4) ^ 2;
t711 = t743 * t738;
t734 = sin(qJ(4));
t736 = cos(qJ(4));
t695 = t708 * t736 - t711 * t734;
t752 = t726 * t695;
t709 = qJDD(4) * t734 + t736 * t738;
t751 = t726 * t709;
t710 = -qJDD(4) * t736 + t734 * t738;
t750 = t726 * t710;
t749 = t726 * t728;
t748 = t726 * t731;
t747 = t729 * t695;
t746 = t729 * t709;
t745 = t729 * t710;
t744 = t729 * t730;
t689 = t729 * t704 + t726 * t739;
t703 = -t713 * t727 + t730 * t724;
t702 = qJDD(3) - t703;
t678 = t736 * t689 + t734 * t702;
t742 = qJD(4) * qJD(5);
t741 = t733 * qJDD(4);
t740 = t735 * qJDD(4);
t677 = -t689 * t734 + t736 * t702;
t737 = qJD(5) ^ 2;
t718 = t733 * t738 * t735;
t717 = -t723 * t738 - t737;
t716 = -t722 * t738 - t737;
t715 = -qJDD(5) + t718;
t714 = qJDD(5) + t718;
t707 = -0.2e1 * t733 * t742 + t740;
t706 = 0.2e1 * t735 * t742 + t741;
t701 = t715 * t735 - t716 * t733;
t700 = -t714 * t733 + t717 * t735;
t699 = t715 * t733 + t716 * t735;
t698 = t714 * t735 + t717 * t733;
t694 = t708 * t734 + t711 * t736;
t693 = -t709 * t744 - t710 * t727;
t692 = -t709 * t727 + t710 * t744;
t691 = t710 * t730 - t727 * t746;
t690 = t709 * t730 + t727 * t745;
t687 = t701 * t736 + t706 * t734;
t686 = t700 * t736 - t707 * t734;
t685 = t701 * t734 - t706 * t736;
t684 = t700 * t734 + t707 * t736;
t682 = -t703 * t727 + t704 * t730;
t681 = t703 * t730 + t704 * t727;
t680 = t694 * t727 + t695 * t744;
t679 = -t694 * t730 + t727 * t747;
t676 = t687 * t729 + t699 * t726;
t675 = t686 * t729 + t698 * t726;
t674 = t687 * t726 - t699 * t729;
t673 = t686 * t726 - t698 * t729;
t672 = -pkin(4) * t738 + qJDD(4) * pkin(6) + t678;
t671 = -qJDD(4) * pkin(4) - t738 * pkin(6) - t677;
t670 = t689 * t729 + t754;
t669 = t689 * t726 - t753;
t668 = t670 * t730 + t702 * t727;
t667 = t670 * t727 - t702 * t730;
t666 = t672 * t735 + t688 * t733;
t665 = -t672 * t733 + t688 * t735;
t664 = t676 * t730 + t685 * t727;
t663 = t675 * t730 + t684 * t727;
t662 = t676 * t727 - t685 * t730;
t661 = t675 * t727 - t684 * t730;
t660 = -t677 * t734 + t678 * t736;
t659 = t677 * t736 + t678 * t734;
t658 = t660 * t729 + t754;
t657 = t660 * t726 - t753;
t656 = -t665 * t733 + t666 * t735;
t655 = t665 * t735 + t666 * t733;
t654 = t656 * t736 + t671 * t734;
t653 = t656 * t734 - t671 * t736;
t652 = t658 * t730 + t659 * t727;
t651 = t658 * t727 - t659 * t730;
t650 = t654 * t729 + t655 * t726;
t649 = t654 * t726 - t655 * t729;
t648 = t650 * t730 + t653 * t727;
t647 = t650 * t727 - t653 * t730;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t712 * t728 + t713 * t731, 0, 0, 0, 0, 0, 0, 0, 0, 0, t731 * t682 + t728 * t739, 0, 0, 0, 0, 0, 0, 0, 0, 0, t668 * t731 + t669 * t728, 0, 0, 0, 0, 0, 0, t693 * t731 - t709 * t749, t692 * t731 + t710 * t749, 0, t652 * t731 + t657 * t728, 0, 0, 0, 0, 0, 0, t663 * t731 + t673 * t728, t664 * t731 + t674 * t728, t680 * t731 + t695 * t749, t648 * t731 + t649 * t728; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t712 * t731 + t713 * t728, 0, 0, 0, 0, 0, 0, 0, 0, 0, t728 * t682 - t731 * t739, 0, 0, 0, 0, 0, 0, 0, 0, 0, t668 * t728 - t669 * t731, 0, 0, 0, 0, 0, 0, t693 * t728 + t709 * t748, t692 * t728 - t710 * t748, 0, t652 * t728 - t657 * t731, 0, 0, 0, 0, 0, 0, t663 * t728 - t673 * t731, t664 * t728 - t674 * t731, t680 * t728 - t695 * t748, t648 * t728 - t649 * t731; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t724, 0, 0, 0, 0, 0, 0, 0, 0, 0, t681, 0, 0, 0, 0, 0, 0, 0, 0, 0, t667, 0, 0, 0, 0, 0, 0, t691, t690, 0, t651, 0, 0, 0, 0, 0, 0, t661, t662, t679, t647; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t713, 0, 0, 0, 0, 0, 0, 0, 0, 0, t682, 0, 0, 0, 0, 0, 0, 0, 0, 0, t668, 0, 0, 0, 0, 0, 0, t693, t692, 0, t652, 0, 0, 0, 0, 0, 0, t663, t664, t680, t648; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t712, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t739, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t669, 0, 0, 0, 0, 0, 0, t751, -t750, 0, -t657, 0, 0, 0, 0, 0, 0, -t673, -t674, -t752, -t649; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t724, 0, 0, 0, 0, 0, 0, 0, 0, 0, t681, 0, 0, 0, 0, 0, 0, 0, 0, 0, t667, 0, 0, 0, 0, 0, 0, t691, t690, 0, t651, 0, 0, 0, 0, 0, 0, t661, t662, t679, t647; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t704, 0, 0, 0, 0, 0, 0, 0, 0, 0, t670, 0, 0, 0, 0, 0, 0, -t746, t745, 0, t658, 0, 0, 0, 0, 0, 0, t675, t676, t747, t650; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t703, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t702, 0, 0, 0, 0, 0, 0, t710, t709, 0, -t659, 0, 0, 0, 0, 0, 0, -t684, -t685, -t694, -t653; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t739, 0, 0, 0, 0, 0, 0, 0, 0, 0, t669, 0, 0, 0, 0, 0, 0, -t751, t750, 0, t657, 0, 0, 0, 0, 0, 0, t673, t674, t752, t649; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t689, 0, 0, 0, 0, 0, 0, -t709, t710, 0, t660, 0, 0, 0, 0, 0, 0, t686, t687, t695, t654; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t688, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t688, 0, 0, 0, 0, 0, 0, -t698, -t699, 0, -t655; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t702, 0, 0, 0, 0, 0, 0, -t710, -t709, 0, t659, 0, 0, 0, 0, 0, 0, t684, t685, t694, t653; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t738, -qJDD(4), 0, t678, 0, 0, 0, 0, 0, 0, t700, t701, t708, t656; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(4), -t738, 0, t677, 0, 0, 0, 0, 0, 0, t707, -t706, t711, -t671; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t688, 0, 0, 0, 0, 0, 0, t698, t699, 0, t655; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t717, t715, t740, t666; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t714, t716, -t741, t665; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t707, t706, -t711, t671;];
f_new_reg = t1;
