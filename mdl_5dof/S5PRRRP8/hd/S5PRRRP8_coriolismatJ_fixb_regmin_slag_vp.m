% Calculate minimal parameter regressor of coriolis matrix for
% S5PRRRP8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d3,d4,theta1]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x22]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:01
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PRRRP8_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRP8_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRP8_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRRRP8_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:00:39
% EndTime: 2019-12-05 17:00:51
% DurationCPUTime: 3.98s
% Computational Cost: add. (2651->380), mult. (6818->559), div. (0->0), fcn. (6653->8), ass. (0->296)
t231 = sin(pkin(5));
t233 = sin(qJ(3));
t236 = cos(qJ(3));
t234 = sin(qJ(2));
t377 = t231 * t234;
t395 = cos(pkin(5));
t168 = t233 * t377 - t236 * t395;
t232 = sin(qJ(4));
t72 = t168 * t232;
t309 = -t72 / 0.2e1;
t235 = cos(qJ(4));
t237 = cos(qJ(2));
t376 = t231 * t237;
t321 = t235 * t376;
t169 = t233 * t395 + t236 * t377;
t383 = t169 * t232;
t107 = t321 + t383;
t393 = t107 * t236;
t254 = -t393 / 0.2e1 + t233 * t309;
t364 = t236 * t237;
t320 = t235 * t364;
t371 = t234 * t232;
t39 = (t320 / 0.2e1 + t371 / 0.2e1) * t231 + t254;
t360 = t39 * qJD(1);
t228 = t233 ^ 2;
t400 = t233 * pkin(8);
t285 = -pkin(3) * t236 - t400;
t267 = -pkin(2) + t285;
t178 = t235 * t267;
t373 = t232 * t236;
t330 = pkin(7) * t373;
t148 = -t178 + t330;
t388 = t148 * t236;
t403 = pkin(7) * t232;
t95 = -t228 * t403 - t388;
t434 = -t95 * qJD(2) - t360;
t372 = t233 * t235;
t322 = t232 * t376;
t382 = t169 * t235;
t108 = -t322 + t382;
t392 = t108 * t236;
t416 = t168 / 0.2e1;
t253 = t392 / 0.2e1 + t372 * t416;
t305 = t376 / 0.2e1;
t288 = t232 * t305;
t307 = -t377 / 0.2e1;
t41 = t235 * t307 + t236 * t288 + t253;
t358 = t41 * qJD(1);
t374 = t232 * t233;
t217 = pkin(4) * t374;
t369 = t235 * qJ(5);
t157 = t217 + (pkin(7) - t369) * t233;
t398 = t235 * pkin(7);
t402 = t232 * pkin(3);
t125 = t232 * (-pkin(2) - t400) + (-qJ(5) + t398 - t402) * t236;
t390 = t125 * t236;
t58 = t157 * t372 + t390;
t433 = t58 * qJD(2) + t358;
t283 = -t108 / 0.2e1 + t382 / 0.2e1;
t306 = -t376 / 0.2e1;
t289 = t232 * t306;
t26 = (t289 + t283) * t233;
t363 = t26 * qJD(1);
t365 = t235 * t236;
t329 = pkin(7) * t365;
t149 = t232 * t267 + t329;
t397 = t236 * pkin(8);
t401 = t233 * pkin(3);
t200 = -t397 + t401;
t188 = t232 * t200;
t53 = t188 * t236 + (-t149 + t329) * t233;
t432 = t53 * qJD(2) + t363;
t375 = t232 * qJ(5);
t399 = t235 * pkin(4);
t281 = t375 + t399;
t171 = t281 * t233;
t49 = -t157 * t374 + t171 * t372 - t388;
t431 = t49 * qJD(2) + t360;
t381 = t171 * t232;
t385 = t157 * t235;
t387 = t149 * t236;
t48 = t387 + (t381 + t385) * t233;
t430 = -t48 * qJD(2) - t358;
t370 = t234 * t235;
t350 = t231 * t370 / 0.2e1 + t236 * t289;
t245 = t253 + t350;
t429 = t245 * qJD(2) + qJD(3) * t72 - qJD(4) * t108;
t224 = t233 * qJ(5);
t128 = -pkin(7) * t372 + t188 + t224;
t404 = pkin(4) * t232;
t199 = -t369 + t404;
t158 = (pkin(7) + t199) * t236;
t271 = t157 * t236 + t158 * t233;
t32 = -t125 * t233 + t128 * t236 + t235 * t271;
t428 = -t32 * qJD(2) - t363;
t287 = t235 * t306;
t420 = t107 / 0.2e1;
t241 = (t287 - t383 / 0.2e1 + t420) * t233;
t427 = qJD(1) * t241;
t426 = qJD(2) * t241;
t425 = qJD(3) * t241;
t302 = t373 / 0.2e1;
t303 = -t373 / 0.2e1;
t304 = t374 / 0.2e1;
t408 = -t233 / 0.2e1;
t240 = t107 * t408 + t169 * t304 + t233 * t287 + (t302 + t303) * t168;
t343 = t169 * qJD(3);
t424 = qJD(2) * t240 + qJD(4) * t72 - t235 * t343;
t227 = t232 ^ 2;
t229 = t235 ^ 2;
t210 = t229 - t227;
t338 = t233 * qJD(2);
t319 = t235 * t338;
t291 = t232 * t319;
t423 = qJD(3) * t210 - 0.2e1 * t291;
t146 = (t232 * t364 - t370) * t231;
t422 = qJD(3) * t240 + qJD(4) * t245 + (t146 * t236 + t228 * t322) * qJD(2);
t421 = -t107 / 0.2e1;
t419 = -t128 / 0.2e1;
t418 = -t146 / 0.2e1;
t417 = -t148 / 0.2e1;
t415 = -t171 / 0.2e1;
t414 = -t199 / 0.2e1;
t413 = t199 / 0.2e1;
t412 = -t200 / 0.2e1;
t219 = pkin(7) * t374;
t411 = -t219 / 0.2e1;
t410 = -t232 / 0.2e1;
t409 = t232 / 0.2e1;
t407 = t233 / 0.2e1;
t406 = t235 / 0.2e1;
t405 = -t236 / 0.2e1;
t10 = (-t107 * t232 - t108 * t235 + t169) * t168;
t394 = t10 * qJD(1);
t147 = (t320 + t371) * t231;
t323 = t233 * t376;
t12 = t107 * t146 + t108 * t147 + t168 * t323;
t391 = t12 * qJD(1);
t126 = -t178 + (pkin(4) + t403) * t236;
t299 = t148 / 0.2e1 - t126 / 0.2e1;
t300 = t125 / 0.2e1 - t149 / 0.2e1;
t13 = (pkin(4) * t405 + t299) * t235 + (qJ(5) * t405 + t300) * t232;
t389 = t13 * qJD(2);
t386 = t157 * t232;
t384 = t168 * t171;
t368 = t235 * t125;
t19 = -t149 * t372 + (t368 + (t126 - t148) * t232) * t233;
t380 = t19 * qJD(2);
t190 = -pkin(3) - t281;
t379 = t190 * t232;
t378 = t190 * t233;
t367 = t235 * t200;
t366 = t235 * t228;
t362 = t26 * qJD(2);
t359 = t39 * qJD(2);
t357 = t41 * qJD(2);
t230 = t236 ^ 2;
t211 = t230 - t228;
t349 = qJD(2) * t231;
t348 = qJD(3) * t232;
t347 = qJD(3) * t235;
t346 = qJD(4) * t232;
t345 = qJD(4) * t235;
t344 = t148 * qJD(4);
t186 = t211 * t232;
t342 = t186 * qJD(2);
t187 = t230 * t235 - t366;
t341 = t187 * qJD(2);
t340 = t211 * qJD(2);
t339 = t232 * qJD(5);
t337 = t233 * qJD(3);
t336 = t235 * qJD(5);
t335 = t236 * qJD(2);
t334 = t236 * qJD(3);
t333 = t236 * qJD(4);
t332 = t236 * qJD(5);
t225 = t233 * pkin(4);
t331 = -t225 + t411;
t328 = pkin(2) * t338;
t327 = pkin(2) * t335;
t326 = pkin(8) * t346;
t325 = pkin(8) * t345;
t324 = t397 / 0.2e1;
t318 = t232 * t333;
t317 = t235 * t333;
t316 = t237 * t349;
t315 = t232 * t345;
t314 = t233 * t339;
t214 = t232 * t347;
t313 = t232 * t336;
t312 = t233 * t334;
t311 = t233 * t335;
t310 = t235 * t337;
t308 = t378 / 0.2e1;
t301 = -t372 / 0.2e1;
t298 = t411 - t225 / 0.2e1;
t297 = t227 / 0.2e1 - t229 / 0.2e1;
t296 = (-t227 - t229) * t168;
t295 = -t219 - t367;
t163 = (-0.1e1 / 0.2e1 + t297) * t233;
t294 = qJD(2) * t163 - t214;
t172 = t297 * t233;
t293 = qJD(2) * t172 - t214;
t197 = t232 * qJD(2) * t366;
t292 = qJD(3) * t172 + t197;
t216 = -qJD(4) + t335;
t290 = t232 * t310;
t282 = t199 * t407 + t157 / 0.2e1;
t280 = -t190 * t236 + t400;
t257 = t146 * t409 + t147 * t406;
t239 = pkin(8) * t257 + t305 * t378;
t130 = -t225 + t295;
t244 = t130 * t421 + t108 * t419 - t169 * t157 / 0.2e1;
t1 = (t368 / 0.2e1 - t158 / 0.2e1 + t126 * t409) * t168 + t239 + t244;
t7 = t125 * t128 + t126 * t130 + t157 * t158;
t279 = -t1 * qJD(1) + t7 * qJD(2);
t11 = -t125 * t148 + t126 * t149 + t157 * t171;
t263 = pkin(4) * t418 + t147 * qJ(5) / 0.2e1;
t3 = -t384 / 0.2e1 + t299 * t108 + t300 * t107 + t263;
t278 = -qJD(1) * t3 + qJD(2) * t11;
t15 = -t130 * t372 - t126 * t365 + (t128 * t233 + t390) * t232;
t17 = (t393 / 0.2e1 - t147 / 0.2e1) * t235 + (-t392 / 0.2e1 + t418) * t232;
t277 = qJD(1) * t17 - qJD(2) * t15;
t52 = t148 * t233 + (-t295 - 0.2e1 * t219) * t236;
t276 = -t52 * qJD(2) - t427;
t33 = -t126 * t233 + t130 * t236 + t232 * t271;
t275 = t33 * qJD(2) - t427;
t38 = -t253 + t350;
t96 = -pkin(7) * t366 - t387;
t274 = qJD(1) * t38 + qJD(2) * t96;
t273 = qJD(3) * t26 + qJD(4) * t39;
t272 = t128 * t235 + t130 * t232;
t112 = t190 * t235 + t199 * t232;
t174 = -t188 / 0.2e1;
t202 = pkin(8) * t302;
t29 = t202 - t381 / 0.2e1 - t385 / 0.2e1 - t224 + t174 + (t379 / 0.2e1 + (t414 + pkin(7) / 0.2e1) * t235) * t233;
t269 = -qJD(2) * t29 + qJD(3) * t112;
t113 = t199 * t235 - t379;
t262 = t308 + t324;
t250 = t415 + t262;
t258 = t282 * t232;
t31 = t258 + (t412 + t250) * t235 + t331;
t268 = -qJD(2) * t31 + qJD(3) * t113;
t266 = t216 * t233;
t265 = t324 - t401 / 0.2e1;
t264 = qJ(5) * t419 + t130 * pkin(4) / 0.2e1;
t261 = -t369 / 0.2e1 + t404 / 0.2e1;
t173 = t188 / 0.2e1;
t203 = pkin(8) * t303;
t105 = pkin(3) * t304 + t173 + t203;
t260 = pkin(3) * t347 - qJD(2) * t105;
t106 = (t412 + t265) * t235;
t259 = pkin(3) * t348 - qJD(2) * t106;
t45 = t386 / 0.2e1 + (t412 + t262) * t235 + t298;
t256 = qJD(2) * t45 + t190 * t348;
t255 = t235 * t266;
t185 = t210 * t228;
t252 = qJD(2) * t185 + 0.2e1 * t290;
t25 = (t283 + t288) * t233;
t40 = t232 * t307 + t236 * t287 + t254;
t249 = (t147 * t236 + t228 * t321) * qJD(2) + t25 * qJD(3) + t40 * qJD(4);
t74 = t168 * t235;
t248 = qJD(2) * t40 + qJD(3) * t74 + qJD(4) * t107;
t238 = (-t232 * t300 - t235 * t299) * pkin(8) + t157 * t413 + t171 * t190 / 0.2e1;
t6 = t238 + t264;
t8 = (t414 + t261) * t168;
t247 = t190 * t199 * qJD(3) - t8 * qJD(1) + t6 * qJD(2);
t246 = qJD(2) * t25 + qJD(4) * t74 + t232 * t343;
t243 = -qJD(4) * t281 + t336;
t196 = t228 * t229 + t230;
t242 = qJD(2) * t196 + t290 - t333;
t221 = t337 / 0.2e1;
t215 = t235 * t335;
t198 = t233 * t313;
t195 = t216 * qJ(5);
t184 = -t215 + t345;
t177 = (t335 - qJD(4) / 0.2e1) * t233;
t175 = t367 / 0.2e1;
t170 = qJD(3) * t227 + t291;
t167 = t172 * qJD(4);
t164 = t227 * t408 + t229 * t407 + t408;
t160 = (-t232 * t338 + t347) * t236;
t159 = t232 * t266;
t143 = t149 * qJD(4);
t83 = t235 * t265 + t175 + t219;
t82 = t203 + t174 + (t402 / 0.2e1 + t398) * t233;
t46 = -pkin(8) * t365 / 0.2e1 + t190 * t301 - t386 / 0.2e1 - t367 / 0.2e1 + t298;
t30 = t235 * t250 + t175 + t258 - t331;
t28 = t202 + t224 + pkin(7) * t301 + t173 - t282 * t235 + (t308 + t415) * t232;
t16 = (t107 * t406 + t108 * t410) * t236 + t257;
t14 = t235 * t417 + t125 * t410 + t149 * t409 + t126 * t406 + (-t375 / 0.2e1 - t399 / 0.2e1) * t236;
t9 = (t261 + t413) * t168;
t5 = t238 - t264;
t4 = t125 * t421 + t384 / 0.2e1 + t149 * t420 + t263 + (t417 + t126 / 0.2e1) * t108;
t2 = -t168 * t368 / 0.2e1 + t158 * t416 + t126 * t309 + t239 - t244;
t18 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t12 + qJD(3) * t10; 0, 0, -t234 * t349, -t316, 0, 0, 0, 0, 0, (-t234 * t335 - t237 * t337) * t231, (t234 * t338 - t237 * t334) * t231, 0, 0, 0, 0, 0, t422, t249, t422, t16 * qJD(3) + (t146 * t235 - t147 * t232) * t338, -t249, t391 + (t125 * t147 + t126 * t146 + t157 * t323) * qJD(2) + t2 * qJD(3) + t4 * qJD(4) - t245 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, -t233 * t316 - t343, qJD(3) * t168 - t236 * t316, 0, 0, 0, 0, 0, t424, t246, t424, t16 * qJD(2) + qJD(3) * t296, -t246, t394 + t2 * qJD(2) + (pkin(8) * t296 + t169 * t190) * qJD(3) + t9 * qJD(4) - t72 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t429, t248, t429, 0, -t248, t4 * qJD(2) + t9 * qJD(3) + (-pkin(4) * t108 - qJ(5) * t107) * qJD(4) + t108 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t429; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(4) * t38 - t425, t273, qJD(4) * t41 - t425, t17 * qJD(3), -t273, -qJD(3) * t1 - qJD(4) * t3 - qJD(5) * t41 - t391; 0, 0, 0, 0, t312, t211 * qJD(3), 0, 0, 0, -pkin(2) * t337, -pkin(2) * t334, -t228 * t315 + t229 * t312, -qJD(4) * t185 - 0.2e1 * t236 * t290, -qJD(3) * t187 + t233 * t318, qJD(3) * t186 + t233 * t317, -t312, -qJD(3) * t52 - qJD(4) * t96, qJD(3) * t53 + qJD(4) * t95, qJD(3) * t33 + qJD(4) * t48 - t228 * t313, -qJD(3) * t15 - qJD(4) * t19 + t236 * t314, -qJD(3) * t32 - qJD(4) * t49 + qJD(5) * t196, qJD(3) * t7 + qJD(4) * t11 - qJD(5) * t58; 0, 0, 0, 0, t311, t340, t334, -t337, 0, -pkin(7) * t334 - t328, pkin(7) * t337 - t327, -t167 + (t229 * t338 + t214) * t236, -0.2e1 * t233 * t315 + t236 * t423, t232 * t337 - t341, t310 + t342, -t177, (t232 * t285 - t329) * qJD(3) + t83 * qJD(4) + t276, (t235 * t285 + t330) * qJD(3) + t82 * qJD(4) + t432, (-t158 * t235 - t232 * t280) * qJD(3) + t30 * qJD(4) + t164 * qJD(5) + t275, qJD(3) * t272 + qJD(4) * t14 + t277, (-t158 * t232 + t235 * t280) * qJD(3) + t28 * qJD(4) + t198 + t428, (pkin(8) * t272 + t158 * t190) * qJD(3) + t5 * qJD(4) + t46 * qJD(5) + t279; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t292, -t252, t159, t255, t221, qJD(3) * t83 - t143 - t274, qJD(3) * t82 + t344 - t434, qJD(3) * t30 - t143 - t430, -t380 + t14 * qJD(3) + (-t233 * t369 + t217) * qJD(4) - t314, qJD(3) * t28 - t332 - t344 - t431, t5 * qJD(3) + (-pkin(4) * t149 - qJ(5) * t148) * qJD(4) + t125 * qJD(5) + t278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t164 - t197, t159, t242, qJD(3) * t46 + qJD(4) * t125 - t433; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t426, -t362, t426, -t17 * qJD(2), t362, qJD(2) * t1 - qJD(4) * t8 - t394; 0, 0, 0, 0, -t311, -t340, 0, 0, 0, t328, t327, -t229 * t311 - t167, 0.2e1 * t232 * t255, -t317 + t341, t318 - t342, t177, qJD(4) * t106 - t276, qJD(4) * t105 - t432, qJD(4) * t31 - qJD(5) * t163 - t275, -qJD(4) * t13 - t235 * t332 - t277, qJD(4) * t29 + t198 - t428, qJD(4) * t6 - qJD(5) * t45 - t279; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t315, t210 * qJD(4), 0, 0, 0, -pkin(3) * t346, -pkin(3) * t345, -qJD(4) * t113 + t313, 0, -qJD(4) * t112 + qJD(5) * t227, (qJD(4) * t199 - t339) * t190; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t293, t423, t184, t216 * t232, -t338 / 0.2e1, -t259 - t325, -t260 + t326, -t268 - t325, t243 - t389, -t269 - t326, pkin(8) * t243 + t247; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t294, t184, t170, -t256 + t325; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38 * qJD(2), -t359, -t357, 0, t359, qJD(2) * t3 + qJD(3) * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t292, t252, t160, (-t319 - t348) * t236, t221, -qJD(3) * t106 + t274, -qJD(3) * t105 + t434, -qJD(3) * t31 + t430, qJD(3) * t13 + t380, -qJD(3) * t29 - t332 + t431, -qJ(5) * t332 - qJD(3) * t6 - t278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t293, -t423, t215, -t232 * t335, t338 / 0.2e1, t259, t260, t268, t389, t269, -t247; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(5), qJ(5) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t216, -t195; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t357; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t163 + t197, t160, -t242, qJ(5) * t333 + qJD(3) * t45 + t433; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t294, t215, -t170, t256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t216, t195; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t18;
