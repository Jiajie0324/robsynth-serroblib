% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPPR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:30
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPPR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR5_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR5_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPPR5_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:30:40
% EndTime: 2019-12-31 19:30:43
% DurationCPUTime: 3.39s
% Computational Cost: add. (9592->231), mult. (22812->272), div. (0->0), fcn. (15384->8), ass. (0->160)
t1600 = sin(pkin(8));
t1601 = cos(pkin(8));
t1606 = cos(qJ(2));
t1635 = qJD(1) * t1606;
t1603 = sin(qJ(2));
t1636 = qJD(1) * t1603;
t1566 = t1600 * t1636 - t1601 * t1635;
t1568 = (t1600 * t1606 + t1601 * t1603) * qJD(1);
t1632 = t1568 * t1566;
t1539 = qJDD(2) + t1632;
t1565 = t1568 ^ 2;
t1608 = qJD(2) ^ 2;
t1644 = -t1565 - t1608;
t1505 = t1600 * t1539 - t1601 * t1644;
t1507 = t1601 * t1539 + t1600 * t1644;
t1495 = t1603 * t1505 - t1606 * t1507;
t1604 = sin(qJ(1));
t1607 = cos(qJ(1));
t1619 = qJD(2) * t1635;
t1622 = t1603 * qJDD(1);
t1574 = t1619 + t1622;
t1590 = t1606 * qJDD(1);
t1620 = qJD(2) * t1636;
t1575 = t1590 - t1620;
t1546 = t1601 * t1574 + t1600 * t1575;
t1563 = qJD(2) * t1566;
t1645 = t1546 - t1563;
t1661 = t1604 * t1495 - t1607 * t1645;
t1660 = t1607 * t1495 + t1604 * t1645;
t1545 = t1600 * t1574 - t1601 * t1575;
t1634 = qJD(2) * t1568;
t1524 = t1545 + t1634;
t1540 = qJDD(2) - t1632;
t1544 = t1566 ^ 2;
t1646 = -t1544 - t1608;
t1650 = -t1600 * t1540 + t1601 * t1646;
t1651 = t1601 * t1540 + t1600 * t1646;
t1655 = -t1603 * t1651 + t1606 * t1650;
t1659 = -t1607 * t1524 + t1604 * t1655;
t1658 = t1604 * t1524 + t1607 * t1655;
t1481 = t1606 * t1505 + t1603 * t1507;
t1523 = t1565 + t1544;
t1529 = t1546 + t1563;
t1613 = -t1545 + t1634;
t1642 = t1600 * t1529 + t1601 * t1613;
t1643 = -t1601 * t1529 + t1600 * t1613;
t1649 = -t1603 * t1643 + t1606 * t1642;
t1657 = t1607 * t1523 + t1604 * t1649;
t1656 = -t1604 * t1523 + t1607 * t1649;
t1654 = t1603 * t1650 + t1606 * t1651;
t1648 = t1603 * t1642 + t1606 * t1643;
t1593 = qJD(2) - qJD(5);
t1647 = qJD(5) - t1593;
t1602 = sin(qJ(5));
t1605 = cos(qJ(5));
t1532 = -t1605 * t1566 + t1602 * t1568;
t1641 = t1532 ^ 2;
t1534 = t1602 * t1566 + t1605 * t1568;
t1640 = t1534 ^ 2;
t1639 = t1593 ^ 2;
t1638 = -2 * qJD(3);
t1637 = 2 * qJD(4);
t1633 = t1534 * t1532;
t1598 = t1606 ^ 2;
t1609 = qJD(1) ^ 2;
t1631 = t1598 * t1609;
t1584 = -t1607 * g(1) - t1604 * g(2);
t1571 = -t1609 * pkin(1) + qJDD(1) * pkin(6) + t1584;
t1628 = t1603 * t1571;
t1627 = t1603 * t1609;
t1536 = t1566 * pkin(3) - t1568 * qJ(4);
t1625 = (2 * qJD(3)) + t1536;
t1624 = qJD(5) + t1593;
t1597 = t1603 ^ 2;
t1623 = t1597 + t1598;
t1621 = -qJDD(2) + qJDD(5);
t1552 = -t1603 * g(3) + t1606 * t1571;
t1614 = qJD(2) * pkin(2) - qJ(3) * t1636;
t1515 = -pkin(2) * t1631 + t1575 * qJ(3) - qJD(2) * t1614 + t1552;
t1611 = qJDD(2) * pkin(2) - t1574 * qJ(3) - t1628 + (qJD(2) * qJ(3) * qJD(1) + pkin(2) * t1627 - g(3)) * t1606;
t1491 = t1601 * t1515 + t1566 * t1638 + t1600 * t1611;
t1583 = t1604 * g(1) - t1607 * g(2);
t1618 = t1600 * t1515 - t1601 * t1611;
t1617 = t1605 * t1545 - t1602 * t1546;
t1616 = -t1602 * t1545 - t1605 * t1546;
t1615 = qJDD(1) * pkin(1) + t1583;
t1612 = -qJDD(2) * pkin(3) - t1608 * qJ(4) + qJDD(4) + t1618;
t1475 = -t1608 * pkin(3) + qJDD(2) * qJ(4) + qJD(2) * t1637 - t1566 * t1536 + t1491;
t1521 = t1575 * pkin(2) - qJDD(3) - t1614 * t1636 + (qJ(3) * t1598 + pkin(6)) * t1609 + t1615;
t1610 = -t1524 * pkin(3) + t1645 * qJ(4) + t1521;
t1588 = t1606 * t1627;
t1587 = -t1608 - t1631;
t1586 = -t1597 * t1609 - t1608;
t1582 = -qJDD(2) + t1588;
t1581 = qJDD(2) + t1588;
t1580 = t1623 * t1609;
t1579 = -t1604 * qJDD(1) - t1607 * t1609;
t1578 = t1607 * qJDD(1) - t1604 * t1609;
t1577 = t1623 * qJDD(1);
t1576 = t1590 - 0.2e1 * t1620;
t1573 = 0.2e1 * t1619 + t1622;
t1570 = t1609 * pkin(6) + t1615;
t1553 = -qJD(2) * pkin(4) - t1568 * pkin(7);
t1551 = -t1606 * g(3) - t1628;
t1550 = t1606 * t1582 - t1603 * t1586;
t1549 = -t1603 * t1581 + t1606 * t1587;
t1548 = t1603 * t1582 + t1606 * t1586;
t1547 = t1606 * t1581 + t1603 * t1587;
t1530 = -t1639 - t1640;
t1517 = -t1603 * t1551 + t1606 * t1552;
t1516 = t1606 * t1551 + t1603 * t1552;
t1503 = t1621 - t1633;
t1502 = -t1621 - t1633;
t1501 = -t1639 - t1641;
t1496 = -t1640 - t1641;
t1490 = t1568 * t1638 - t1618;
t1489 = t1605 * t1502 - t1602 * t1530;
t1488 = t1602 * t1502 + t1605 * t1530;
t1487 = t1624 * t1532 + t1616;
t1486 = -t1647 * t1532 - t1616;
t1485 = -t1624 * t1534 + t1617;
t1484 = t1647 * t1534 - t1617;
t1479 = t1568 * t1637 + t1610;
t1478 = t1605 * t1501 - t1602 * t1503;
t1477 = t1602 * t1501 + t1605 * t1503;
t1476 = t1625 * t1568 + t1612;
t1470 = -t1545 * pkin(4) - t1544 * pkin(7) + (t1637 + t1553) * t1568 + t1610;
t1469 = -t1544 * pkin(4) + t1545 * pkin(7) + qJD(2) * t1553 + t1475;
t1468 = -t1600 * t1490 + t1601 * t1491;
t1467 = t1601 * t1490 + t1600 * t1491;
t1466 = -qJDD(2) * pkin(4) - t1529 * pkin(7) + (pkin(4) * t1566 + t1625) * t1568 + t1612;
t1465 = t1600 * t1488 + t1601 * t1489;
t1464 = -t1601 * t1488 + t1600 * t1489;
t1463 = t1605 * t1485 - t1602 * t1487;
t1462 = t1602 * t1485 + t1605 * t1487;
t1461 = t1600 * t1477 + t1601 * t1478;
t1460 = -t1601 * t1477 + t1600 * t1478;
t1459 = t1601 * t1475 + t1600 * t1476;
t1458 = t1600 * t1475 - t1601 * t1476;
t1457 = t1602 * t1466 + t1605 * t1469;
t1456 = t1605 * t1466 - t1602 * t1469;
t1455 = -t1603 * t1467 + t1606 * t1468;
t1454 = t1606 * t1467 + t1603 * t1468;
t1453 = -t1603 * t1464 + t1606 * t1465;
t1452 = t1606 * t1464 + t1603 * t1465;
t1451 = t1600 * t1462 + t1601 * t1463;
t1450 = -t1601 * t1462 + t1600 * t1463;
t1449 = -t1603 * t1460 + t1606 * t1461;
t1448 = t1606 * t1460 + t1603 * t1461;
t1447 = -t1603 * t1458 + t1606 * t1459;
t1446 = t1606 * t1458 + t1603 * t1459;
t1445 = -t1602 * t1456 + t1605 * t1457;
t1444 = t1605 * t1456 + t1602 * t1457;
t1443 = -t1603 * t1450 + t1606 * t1451;
t1442 = t1606 * t1450 + t1603 * t1451;
t1441 = t1600 * t1444 + t1601 * t1445;
t1440 = -t1601 * t1444 + t1600 * t1445;
t1439 = -t1603 * t1440 + t1606 * t1441;
t1438 = t1606 * t1440 + t1603 * t1441;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1579, -t1578, 0, -t1604 * t1583 + t1607 * t1584, 0, 0, 0, 0, 0, 0, t1607 * t1549 - t1604 * t1576, t1607 * t1550 + t1604 * t1573, t1607 * t1577 - t1604 * t1580, t1607 * t1517 - t1604 * t1570, 0, 0, 0, 0, 0, 0, t1658, t1660, t1656, t1607 * t1455 - t1604 * t1521, 0, 0, 0, 0, 0, 0, t1658, t1656, -t1660, t1607 * t1447 - t1604 * t1479, 0, 0, 0, 0, 0, 0, t1607 * t1449 - t1604 * t1484, t1607 * t1453 - t1604 * t1486, t1607 * t1443 - t1604 * t1496, t1607 * t1439 - t1604 * t1470; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1578, t1579, 0, t1607 * t1583 + t1604 * t1584, 0, 0, 0, 0, 0, 0, t1604 * t1549 + t1607 * t1576, t1604 * t1550 - t1607 * t1573, t1604 * t1577 + t1607 * t1580, t1604 * t1517 + t1607 * t1570, 0, 0, 0, 0, 0, 0, t1659, t1661, t1657, t1604 * t1455 + t1607 * t1521, 0, 0, 0, 0, 0, 0, t1659, t1657, -t1661, t1604 * t1447 + t1607 * t1479, 0, 0, 0, 0, 0, 0, t1604 * t1449 + t1607 * t1484, t1604 * t1453 + t1607 * t1486, t1604 * t1443 + t1607 * t1496, t1604 * t1439 + t1607 * t1470; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1547, t1548, 0, t1516, 0, 0, 0, 0, 0, 0, t1654, -t1481, t1648, t1454, 0, 0, 0, 0, 0, 0, t1654, t1648, t1481, t1446, 0, 0, 0, 0, 0, 0, t1448, t1452, t1442, t1438; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1609, -qJDD(1), 0, t1584, 0, 0, 0, 0, 0, 0, t1549, t1550, t1577, t1517, 0, 0, 0, 0, 0, 0, t1655, t1495, t1649, t1455, 0, 0, 0, 0, 0, 0, t1655, t1649, -t1495, t1447, 0, 0, 0, 0, 0, 0, t1449, t1453, t1443, t1439; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1609, 0, t1583, 0, 0, 0, 0, 0, 0, t1576, -t1573, t1580, t1570, 0, 0, 0, 0, 0, 0, -t1524, -t1645, t1523, t1521, 0, 0, 0, 0, 0, 0, -t1524, t1523, t1645, t1479, 0, 0, 0, 0, 0, 0, t1484, t1486, t1496, t1470; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1547, t1548, 0, t1516, 0, 0, 0, 0, 0, 0, t1654, -t1481, t1648, t1454, 0, 0, 0, 0, 0, 0, t1654, t1648, t1481, t1446, 0, 0, 0, 0, 0, 0, t1448, t1452, t1442, t1438; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1587, t1582, t1590, t1552, 0, 0, 0, 0, 0, 0, t1650, -t1507, t1642, t1468, 0, 0, 0, 0, 0, 0, t1650, t1642, t1507, t1459, 0, 0, 0, 0, 0, 0, t1461, t1465, t1451, t1441; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1581, t1586, -t1622, t1551, 0, 0, 0, 0, 0, 0, t1651, -t1505, t1643, t1467, 0, 0, 0, 0, 0, 0, t1651, t1643, t1505, t1458, 0, 0, 0, 0, 0, 0, t1460, t1464, t1450, t1440; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1576, t1573, -t1580, -t1570, 0, 0, 0, 0, 0, 0, t1524, t1645, -t1523, -t1521, 0, 0, 0, 0, 0, 0, t1524, -t1523, -t1645, -t1479, 0, 0, 0, 0, 0, 0, -t1484, -t1486, -t1496, -t1470; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1646, -t1539, t1613, t1491, 0, 0, 0, 0, 0, 0, t1646, t1613, t1539, t1475, 0, 0, 0, 0, 0, 0, t1478, t1489, t1463, t1445; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1540, t1644, -t1529, t1490, 0, 0, 0, 0, 0, 0, t1540, -t1529, -t1644, -t1476, 0, 0, 0, 0, 0, 0, -t1477, -t1488, -t1462, -t1444; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1524, t1645, -t1523, -t1521, 0, 0, 0, 0, 0, 0, t1524, -t1523, -t1645, -t1479, 0, 0, 0, 0, 0, 0, -t1484, -t1486, -t1496, -t1470; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1646, t1613, t1539, t1475, 0, 0, 0, 0, 0, 0, t1478, t1489, t1463, t1445; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1524, -t1523, -t1645, -t1479, 0, 0, 0, 0, 0, 0, -t1484, -t1486, -t1496, -t1470; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1540, t1529, t1644, t1476, 0, 0, 0, 0, 0, 0, t1477, t1488, t1462, t1444; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1501, t1502, t1485, t1457; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1503, t1530, t1487, t1456; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1484, t1486, t1496, t1470;];
f_new_reg = t1;
