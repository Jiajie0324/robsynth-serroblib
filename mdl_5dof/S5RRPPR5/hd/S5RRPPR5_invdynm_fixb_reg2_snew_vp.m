% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPPR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:30
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPPR5_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR5_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR5_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR5_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR5_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPPR5_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:30:22
% EndTime: 2019-12-31 19:30:40
% DurationCPUTime: 19.27s
% Computational Cost: add. (53626->652), mult. (127444->788), div. (0->0), fcn. (85836->8), ass. (0->439)
t1236 = sin(pkin(8));
t1237 = cos(pkin(8));
t1243 = cos(qJ(2));
t1341 = qJD(1) * t1243;
t1240 = sin(qJ(2));
t1342 = qJD(1) * t1240;
t1191 = t1236 * t1341 + t1237 * t1342;
t1188 = t1191 ^ 2;
t1245 = qJD(2) ^ 2;
t1134 = t1245 + t1188;
t1189 = t1236 * t1342 - t1237 * t1341;
t1335 = t1191 * t1189;
t1365 = qJDD(2) + t1335;
t1326 = t1236 * t1365;
t1061 = t1237 * t1134 + t1326;
t1321 = t1237 * t1365;
t1077 = t1236 * t1134 - t1321;
t1027 = t1240 * t1061 + t1243 * t1077;
t1241 = sin(qJ(1));
t1244 = cos(qJ(1));
t1220 = qJD(2) * t1341;
t1303 = t1240 * qJDD(1);
t1200 = t1220 + t1303;
t1296 = qJD(2) * t1342;
t1301 = t1243 * qJDD(1);
t1258 = -t1296 + t1301;
t1148 = t1237 * t1200 + t1236 * t1258;
t1340 = qJD(2) * t1189;
t1370 = t1148 - t1340;
t1437 = pkin(5) * (t1244 * t1027 + t1241 * t1370);
t1436 = pkin(5) * (t1241 * t1027 - t1244 * t1370);
t991 = t1243 * t1061 - t1240 * t1077;
t1435 = pkin(1) * t991;
t1434 = pkin(6) * t991;
t1433 = -pkin(1) * t1370 + pkin(6) * t1027;
t1360 = t1189 ^ 2;
t1142 = t1360 - t1188;
t1184 = qJD(2) * t1191;
t1286 = t1236 * t1200 - t1237 * t1258;
t1103 = t1184 + t1286;
t1042 = -t1236 * t1103 + t1237 * t1370;
t1322 = t1237 * t1103;
t1328 = t1236 * t1370;
t1044 = t1322 + t1328;
t973 = t1240 * t1042 + t1243 * t1044;
t1432 = -t1244 * t1142 + t1241 * t973;
t1431 = t1241 * t1142 + t1244 * t973;
t1170 = t1360 - t1245;
t1066 = t1236 * t1170 + t1321;
t1072 = t1237 * t1170 - t1326;
t1023 = t1240 * t1066 - t1243 * t1072;
t1105 = -t1286 + t1184;
t1430 = t1241 * t1023 + t1244 * t1105;
t1429 = t1244 * t1023 - t1241 * t1105;
t1367 = t1340 + t1148;
t1391 = t1237 * t1105 + t1236 * t1367;
t1392 = t1236 * t1105 - t1237 * t1367;
t1406 = t1240 * t1391 + t1243 * t1392;
t1426 = pkin(1) * t1406;
t1425 = pkin(2) * t1061;
t1424 = pkin(6) * t1406;
t1423 = qJ(3) * t1061;
t1422 = qJ(3) * t1077;
t1101 = -t1360 - t1188;
t1407 = -t1240 * t1392 + t1243 * t1391;
t1421 = -pkin(1) * t1101 + pkin(6) * t1407;
t969 = -t1243 * t1042 + t1240 * t1044;
t1171 = t1188 - t1245;
t1366 = qJDD(2) - t1335;
t1325 = t1236 * t1366;
t1393 = -t1237 * t1171 + t1325;
t1128 = t1237 * t1366;
t1394 = t1236 * t1171 + t1128;
t1404 = -t1240 * t1393 + t1243 * t1394;
t1420 = t1241 * t1404 - t1244 * t1367;
t1419 = t1241 * t1367 + t1244 * t1404;
t1418 = pkin(5) * (-t1244 * t1101 + t1241 * t1407);
t1417 = pkin(5) * (t1241 * t1101 + t1244 * t1407);
t1016 = t1243 * t1066 + t1240 * t1072;
t1352 = pkin(2) * t1392;
t1368 = -t1245 - t1360;
t1378 = t1237 * t1368 - t1325;
t1380 = t1236 * t1368 + t1128;
t1389 = t1240 * t1378 + t1243 * t1380;
t1416 = pkin(6) * t1389;
t1415 = qJ(3) * t1392;
t1401 = pkin(2) * t1380;
t1412 = -pkin(1) * t1389 - t1401;
t1390 = -t1240 * t1380 + t1243 * t1378;
t1411 = -pkin(1) * t1103 + pkin(6) * t1390;
t1410 = -pkin(2) * t1101 + qJ(3) * t1391;
t1409 = pkin(5) * (-t1244 * t1103 + t1241 * t1390);
t1408 = pkin(5) * (t1241 * t1103 + t1244 * t1390);
t1405 = t1240 * t1394 + t1243 * t1393;
t1400 = qJ(3) * t1378;
t1399 = qJ(3) * t1380;
t1387 = t1370 * qJ(4);
t1239 = sin(qJ(5));
t1242 = cos(qJ(5));
t1125 = -t1242 * t1189 + t1239 * t1191;
t1127 = t1239 * t1189 + t1242 * t1191;
t1059 = t1127 * t1125;
t1228 = qJDD(2) - qJDD(5);
t1374 = -t1059 - t1228;
t1386 = t1239 * t1374;
t1383 = t1242 * t1374;
t1221 = t1241 * qJDD(2);
t1334 = t1191 * t1237;
t1336 = t1189 * t1236;
t1257 = (-t1334 - t1336) * qJD(2);
t1169 = t1236 * t1184;
t1297 = t1237 * t1340;
t1271 = t1169 - t1297;
t1361 = -t1240 * t1257 + t1243 * t1271;
t1379 = t1244 * t1361 + t1221;
t1292 = t1244 * t1335;
t1252 = t1236 * t1286 + t1297;
t1272 = qJD(2) * t1336 - t1237 * t1286;
t1364 = -t1240 * t1272 + t1243 * t1252;
t1377 = t1241 * t1364 + t1292;
t1299 = t1244 * qJDD(2);
t1376 = t1241 * t1361 - t1299;
t1294 = t1241 * t1335;
t1375 = t1244 * t1364 - t1294;
t1246 = qJD(1) ^ 2;
t1315 = t1240 * t1246;
t1210 = t1244 * g(1) + t1241 * g(2);
t1194 = -t1246 * pkin(1) + qJDD(1) * pkin(6) - t1210;
t1318 = t1240 * t1194;
t1343 = qJD(1) * qJD(2);
t1089 = qJDD(2) * pkin(2) - t1200 * qJ(3) - t1318 + (pkin(2) * t1315 + qJ(3) * t1343 - g(3)) * t1243;
t1163 = -t1240 * g(3) + t1243 * t1194;
t1234 = t1243 ^ 2;
t1223 = t1234 * t1246;
t1217 = -t1223 - t1245;
t1090 = pkin(2) * t1217 + qJ(3) * t1301 + t1163;
t1288 = -t1237 * t1089 + t1236 * t1090;
t1256 = -qJDD(2) * pkin(3) - t1245 * qJ(4) + qJDD(4) + t1288;
t1132 = t1189 * pkin(3) - t1191 * qJ(4);
t1308 = (2 * qJD(3)) + t1132;
t954 = -qJDD(2) * pkin(4) - t1367 * pkin(7) + (pkin(4) * t1189 + t1308) * t1191 + t1256;
t1168 = -qJD(2) * pkin(4) - t1191 * pkin(7);
t1306 = t1236 * t1089 + t1237 * t1090;
t1267 = -t1245 * pkin(3) + qJDD(2) * qJ(4) - t1189 * t1132 + t1306;
t1339 = qJD(3) * t1189;
t1178 = -0.2e1 * t1339;
t1337 = qJD(4) * qJD(2);
t1369 = t1178 + 0.2e1 * t1337;
t978 = t1267 + t1369;
t962 = -pkin(4) * t1360 + pkin(7) * t1286 + qJD(2) * t1168 + t978;
t910 = t1239 * t962 - t1242 * t954;
t913 = t1239 * t954 + t1242 * t962;
t876 = t1239 * t913 - t1242 * t910;
t1209 = t1241 * g(1) - t1244 * g(2);
t1262 = qJDD(1) * pkin(1) + t1209;
t1100 = -(qJD(2) * pkin(2) - qJ(3) * t1342) * t1342 + t1258 * pkin(2) - qJDD(3) + (t1234 * qJ(3) + pkin(6)) * t1246 + t1262;
t1373 = -pkin(3) * t1184 + t1100;
t1039 = -t1125 * qJD(5) + t1242 * t1148 + t1239 * t1286;
t1229 = qJD(2) - qJD(5);
t1118 = t1125 * t1229;
t1372 = t1118 + t1039;
t1371 = -pkin(3) * t1366 - qJ(4) * t1368;
t1287 = t1239 * t1148 - t1242 * t1286;
t999 = (qJD(5) + t1229) * t1127 + t1287;
t1363 = t1240 * t1252 + t1243 * t1272;
t1362 = t1240 * t1271 + t1243 * t1257;
t1123 = t1125 ^ 2;
t1124 = t1127 ^ 2;
t1227 = t1229 ^ 2;
t1359 = 0.2e1 * qJD(4);
t1358 = pkin(3) + pkin(4);
t1338 = qJD(3) * t1191;
t1009 = t1288 + 0.2e1 * t1338;
t1010 = t1178 + t1306;
t955 = -t1237 * t1009 + t1236 * t1010;
t1357 = pkin(2) * t955;
t1356 = pkin(4) * t876;
t1003 = -t1118 + t1039;
t947 = -t1242 * t1003 - t1239 * t999;
t1355 = pkin(4) * t947;
t1354 = pkin(7) * t876;
t877 = t1239 * t910 + t1242 * t913;
t1353 = pkin(7) * t877;
t1349 = pkin(3) * t1237;
t980 = t1308 * t1191 + t1256;
t1348 = -pkin(3) * t980 + qJ(4) * t978;
t1248 = t1373 + t1387;
t1268 = t1286 * pkin(3);
t1247 = -t1268 + t1248;
t964 = -t1286 * pkin(4) - t1360 * pkin(7) + (t1359 + t1168) * t1191 + t1247;
t1346 = t1239 * t964;
t1345 = t1240 * t955;
t963 = t1242 * t964;
t1344 = t1243 * t955;
t1333 = t1229 * t1127;
t1332 = t1229 * t1239;
t1331 = t1229 * t1242;
t1330 = t1236 * t1100;
t1323 = t1237 * t1100;
t1055 = -t1059 + t1228;
t1320 = t1239 * t1055;
t1193 = t1246 * pkin(6) + t1262;
t1319 = t1240 * t1193;
t1218 = t1243 * t1315;
t1207 = qJDD(2) + t1218;
t1317 = t1240 * t1207;
t1208 = qJDD(2) - t1218;
t1316 = t1240 * t1208;
t1312 = t1242 * t1055;
t1311 = t1243 * t1193;
t1201 = -0.2e1 * t1296 + t1301;
t1152 = t1243 * t1201;
t1310 = t1243 * t1208;
t1305 = -pkin(3) * t1367 + qJ(4) * t1105;
t1233 = t1240 ^ 2;
t1304 = t1233 + t1234;
t1302 = t1241 * qJDD(1);
t1300 = t1244 * qJDD(1);
t1298 = t1191 * t1359;
t1295 = t1241 * t1059;
t1293 = t1244 * t1059;
t1291 = -qJ(4) * t1236 - pkin(2);
t1112 = -t1124 - t1227;
t1007 = t1242 * t1112 + t1320;
t1290 = -pkin(7) * t1007 + t963;
t956 = t1236 * t1009 + t1237 * t1010;
t1162 = t1243 * g(3) + t1318;
t1093 = t1240 * t1162 + t1243 * t1163;
t1285 = -t1241 * t1209 - t1244 * t1210;
t926 = t1236 * t978 - t1237 * t980;
t1284 = pkin(2) * t926 + t1348;
t1283 = -pkin(3) * t876 + qJ(4) * t877 - t1356;
t949 = t1239 * t1003 - t1242 * t999;
t1282 = -pkin(3) * t947 + qJ(4) * t949 - t1355;
t1281 = -pkin(4) * t1007 + t913;
t1280 = t1241 * t1218;
t1279 = t1244 * t1218;
t1278 = t1305 + t1352;
t1277 = -t1306 - t1425;
t1204 = -t1241 * t1246 + t1300;
t1276 = -pkin(5) * t1204 - t1241 * g(3);
t1054 = -t1227 - t1123;
t986 = t1239 * t1054 + t1383;
t1275 = -pkin(7) * t986 + t1346;
t987 = t1242 * t1054 - t1386;
t1274 = -pkin(7) * t987 + t963;
t1008 = -t1239 * t1112 + t1312;
t1273 = -pkin(7) * t1008 - t1346;
t1087 = qJD(2) * t1334 + t1236 * t1148;
t1088 = t1237 * t1148 - t1169;
t1035 = -t1240 * t1087 + t1243 * t1088;
t1270 = t1241 * t1035 - t1292;
t1269 = t1244 * t1035 + t1294;
t1092 = t1243 * t1162 - t1240 * t1163;
t1266 = t1244 * t1209 - t1241 * t1210;
t1265 = -pkin(4) * t986 + t910;
t1264 = -pkin(7) * t947 - t876;
t1263 = -pkin(7) * t949 - t877;
t853 = t1236 * t877 - t1237 * t876;
t1261 = pkin(2) * t853 + t1283;
t899 = t1236 * t949 - t1237 * t947;
t1260 = pkin(2) * t899 + t1282;
t1259 = -pkin(3) * t1007 + qJ(4) * t1008 + t1281;
t1255 = pkin(3) * t1134 + qJ(4) * t1365 + t1267;
t1254 = -pkin(3) * t986 + qJ(4) * t987 + t1265;
t952 = -t1237 * t1007 + t1236 * t1008;
t1253 = pkin(2) * t952 + t1259;
t934 = t1236 * t987 - t1237 * t986;
t1251 = pkin(2) * t934 + t1254;
t1250 = t1255 + t1425;
t1180 = -0.2e1 * t1338;
t1249 = -t1191 * t1132 + t1180 - t1256 - t1371;
t1222 = t1233 * t1246;
t1216 = t1223 - t1245;
t1215 = -t1222 - t1245;
t1214 = -t1222 + t1245;
t1206 = t1223 - t1222;
t1205 = t1222 + t1223;
t1203 = t1244 * t1246 + t1302;
t1202 = t1304 * qJDD(1);
t1199 = 0.2e1 * t1220 + t1303;
t1197 = t1243 * t1207;
t1196 = t1304 * t1343;
t1186 = -pkin(5) * t1203 + t1244 * g(3);
t1179 = 0.2e1 * t1339;
t1166 = t1243 * t1200 - t1233 * t1343;
t1165 = -t1234 * t1343 - t1240 * t1258;
t1161 = -t1240 * t1215 - t1310;
t1160 = -t1240 * t1214 + t1197;
t1159 = t1243 * t1217 - t1317;
t1158 = t1243 * t1216 - t1316;
t1157 = t1243 * t1215 - t1316;
t1156 = t1243 * t1214 + t1317;
t1155 = t1240 * t1217 + t1197;
t1154 = t1240 * t1216 + t1310;
t1153 = (t1200 + t1220) * t1240;
t1150 = -t1240 * t1199 + t1152;
t1149 = t1243 * t1199 + t1240 * t1201;
t1116 = -t1124 + t1227;
t1115 = t1123 - t1227;
t1114 = -pkin(6) * t1157 - t1311;
t1113 = -pkin(6) * t1155 - t1319;
t1111 = -pkin(1) * t1157 + t1163;
t1110 = -pkin(1) * t1155 + t1162;
t1081 = pkin(1) * t1201 + pkin(6) * t1159 + t1311;
t1080 = -pkin(1) * t1199 + pkin(6) * t1161 - t1319;
t1065 = pkin(1) * t1193 + pkin(6) * t1093;
t1064 = pkin(1) * t1205 + pkin(6) * t1202 + t1093;
t1058 = t1124 - t1123;
t1049 = (t1125 * t1242 - t1127 * t1239) * t1229;
t1048 = (t1125 * t1239 + t1127 * t1242) * t1229;
t1038 = -t1127 * qJD(5) - t1287;
t1037 = -t1323 + t1423;
t1036 = -t1123 - t1124;
t1032 = t1243 * t1087 + t1240 * t1088;
t1015 = -t1330 - t1399;
t1014 = t1242 * t1115 + t1320;
t1013 = -t1239 * t1116 + t1383;
t1012 = t1239 * t1115 - t1312;
t1011 = t1242 * t1116 + t1386;
t998 = (qJD(5) - t1229) * t1127 + t1287;
t997 = t1242 * t1039 + t1127 * t1332;
t996 = t1239 * t1039 - t1127 * t1331;
t995 = -t1239 * t1038 - t1125 * t1331;
t994 = -t1242 * t1038 + t1125 * t1332;
t989 = -pkin(2) * t1370 - t1330 + t1422;
t988 = t1247 + t1298;
t983 = -pkin(2) * t1103 + t1323 + t1400;
t982 = t1236 * t1048 + t1237 * t1049;
t981 = -t1237 * t1048 + t1236 * t1049;
t968 = t1298 + (-t1103 - t1286) * pkin(3) + t1248;
t967 = -t1268 + t1298 + t1373 + 0.2e1 * t1387;
t966 = -qJ(4) * t1101 + t980;
t965 = -pkin(3) * t1101 + t978;
t960 = t1236 * t1012 + t1237 * t1014;
t959 = t1236 * t1011 + t1237 * t1013;
t958 = -t1237 * t1012 + t1236 * t1014;
t957 = -t1237 * t1011 + t1236 * t1013;
t953 = t1236 * t1007 + t1237 * t1008;
t948 = -t1239 * t1372 - t1242 * t998;
t946 = -t1239 * t998 + t1242 * t1372;
t943 = t1236 * t996 + t1237 * t997;
t942 = -t1236 * t994 + t1237 * t995;
t941 = t1236 * t997 - t1237 * t996;
t940 = t1236 * t995 + t1237 * t994;
t939 = -t1352 - t1426;
t938 = t1178 - t1277 + t1435;
t937 = pkin(2) * t1100 + qJ(3) * t956;
t936 = -qJ(4) * t1322 - t1236 * t968 - t1399;
t935 = t1236 * t986 + t1237 * t987;
t933 = -pkin(3) * t1328 + t1237 * t967 - t1423;
t932 = t1009 + t1412;
t931 = -t955 - t1415;
t930 = -t1240 * t981 + t1243 * t982;
t929 = t1240 * t982 + t1243 * t981;
t928 = t1291 * t1103 + t1237 * t968 + t1400;
t927 = t1236 * t980 + t1237 * t978;
t925 = -t1422 + t1236 * t967 + (pkin(2) + t1349) * t1370;
t924 = t1243 * t1037 - t1240 * t989 + t1434;
t923 = -t1278 - t1426;
t922 = t1410 + t956;
t921 = t1371 + t1412 + t980;
t920 = t1240 * t1037 + t1243 * t989 + t1433;
t919 = t1243 * t1015 - t1240 * t983 - t1416;
t918 = t1179 - t1250 - 0.2e1 * t1337 - t1435;
t917 = t1240 * t1015 + t1243 * t983 + t1411;
t916 = qJ(4) * t1372 + t1290;
t915 = -t1240 * t958 + t1243 * t960;
t914 = -t1240 * t957 + t1243 * t959;
t912 = t1240 * t960 + t1243 * t958;
t911 = t1240 * t959 + t1243 * t957;
t909 = t1243 * t956 - t1345;
t908 = t1240 * t956 + t1344;
t905 = -t1240 * t952 + t1243 * t953;
t904 = t1240 * t953 + t1243 * t952;
t903 = qJ(4) * t998 + t1275;
t902 = -t1236 * t965 + t1237 * t966 - t1415;
t901 = t1236 * t947 + t1237 * t949;
t900 = t1236 * t946 + t1237 * t948;
t898 = t1236 * t948 - t1237 * t946;
t897 = t1236 * t966 + t1237 * t965 + t1410;
t896 = -t1240 * t941 + t1243 * t943;
t895 = -t1240 * t940 + t1243 * t942;
t894 = t1240 * t943 + t1243 * t941;
t893 = t1240 * t942 + t1243 * t940;
t892 = t1358 * t1372 + t1273;
t891 = -t1240 * t934 + t1243 * t935;
t890 = t1240 * t935 + t1243 * t934;
t889 = t1358 * t998 + t1274;
t888 = -qJ(3) * t926 + (-pkin(3) * t1236 + qJ(4) * t1237) * t988;
t887 = -t1240 * t926 + t1243 * t927;
t886 = t1240 * t927 + t1243 * t926;
t885 = -pkin(1) * t908 - t1357;
t884 = -t1240 * t928 + t1243 * t936 - t1416;
t883 = qJ(3) * t927 + (-t1291 + t1349) * t988;
t882 = t1240 * t936 + t1243 * t928 + t1411;
t881 = -t1240 * t925 + t1243 * t933 - t1434;
t880 = t1240 * t933 + t1243 * t925 - t1433;
t879 = -t1240 * t922 + t1243 * t931 - t1424;
t878 = t1240 * t931 + t1243 * t922 + t1421;
t873 = -pkin(6) * t908 - qJ(3) * t1344 - t1240 * t937;
t872 = pkin(1) * t1100 + pkin(6) * t909 - qJ(3) * t1345 + t1243 * t937;
t871 = -t1240 * t899 + t1243 * t901;
t870 = -t1240 * t898 + t1243 * t900;
t869 = t1240 * t901 + t1243 * t899;
t868 = t1240 * t900 + t1243 * t898;
t867 = qJ(4) * t964 - t1354;
t866 = -t1240 * t897 + t1243 * t902 - t1424;
t865 = t1240 * t902 + t1243 * t897 + t1421;
t864 = -qJ(3) * t952 - t1236 * t892 + t1237 * t916;
t863 = qJ(4) * t1036 + t1264;
t862 = -pkin(1) * t886 - t1284;
t861 = t1358 * t964 - t1353;
t860 = t1358 * t1036 + t1263;
t859 = -qJ(3) * t934 - t1236 * t889 + t1237 * t903;
t858 = pkin(2) * t1372 + qJ(3) * t953 + t1236 * t916 + t1237 * t892;
t857 = -pkin(1) * t904 - t1253;
t856 = pkin(2) * t998 + qJ(3) * t935 + t1236 * t903 + t1237 * t889;
t855 = -pkin(1) * t890 - t1251;
t854 = t1236 * t876 + t1237 * t877;
t852 = -pkin(6) * t886 - t1240 * t883 + t1243 * t888;
t851 = pkin(1) * t988 + pkin(6) * t887 + t1240 * t888 + t1243 * t883;
t850 = -pkin(1) * t869 - t1260;
t849 = -pkin(6) * t904 - t1240 * t858 + t1243 * t864;
t848 = -qJ(3) * t899 - t1236 * t860 + t1237 * t863;
t847 = pkin(2) * t1036 + qJ(3) * t901 + t1236 * t863 + t1237 * t860;
t846 = pkin(1) * t1372 + pkin(6) * t905 + t1240 * t864 + t1243 * t858;
t845 = -pkin(6) * t890 - t1240 * t856 + t1243 * t859;
t844 = pkin(1) * t998 + pkin(6) * t891 + t1240 * t859 + t1243 * t856;
t843 = -t1240 * t853 + t1243 * t854;
t842 = t1240 * t854 + t1243 * t853;
t841 = -qJ(3) * t853 - t1236 * t861 + t1237 * t867;
t840 = pkin(2) * t964 + qJ(3) * t854 + t1236 * t867 + t1237 * t861;
t839 = -pkin(6) * t869 - t1240 * t847 + t1243 * t848;
t838 = pkin(1) * t1036 + pkin(6) * t871 + t1240 * t848 + t1243 * t847;
t837 = -pkin(1) * t842 - t1261;
t836 = -pkin(6) * t842 - t1240 * t840 + t1243 * t841;
t835 = pkin(1) * t964 + pkin(6) * t843 + t1240 * t841 + t1243 * t840;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1204, 0, -t1203, 0, t1276, -t1186, -t1266, -pkin(5) * t1266, t1244 * t1166 - t1280, t1244 * t1150 - t1241 * t1206, t1244 * t1160 + t1240 * t1302, t1244 * t1165 + t1280, t1244 * t1158 + t1241 * t1301, t1244 * t1196 + t1221, t1244 * t1113 - t1241 * t1110 - pkin(5) * (t1241 * t1159 + t1244 * t1201), t1244 * t1114 - t1241 * t1111 - pkin(5) * (t1241 * t1161 - t1244 * t1199), t1244 * t1092 - pkin(5) * (t1241 * t1202 + t1244 * t1205), -pkin(5) * (t1241 * t1093 + t1244 * t1193) - (t1241 * pkin(1) - t1244 * pkin(6)) * t1092, t1269, -t1431, t1419, t1375, -t1429, t1379, -t1241 * t932 + t1244 * t919 - t1409, -t1241 * t938 + t1244 * t924 - t1436, -t1241 * t939 + t1244 * t879 - t1418, t1244 * t873 - t1241 * t885 - pkin(5) * (t1244 * t1100 + t1241 * t909), t1269, t1419, t1431, t1379, t1429, t1375, -t1241 * t921 + t1244 * t884 - t1409, -t1241 * t923 + t1244 * t866 - t1418, -t1241 * t918 + t1244 * t881 + t1436, t1244 * t852 - t1241 * t862 - pkin(5) * (t1241 * t887 + t1244 * t988), t1244 * t896 - t1295, -t1241 * t1058 + t1244 * t870, -t1241 * t1003 + t1244 * t914, t1244 * t895 + t1295, t1241 * t999 + t1244 * t915, t1241 * t1228 + t1244 * t930, t1244 * t845 - t1241 * t855 - pkin(5) * (t1241 * t891 + t1244 * t998), t1244 * t849 - t1241 * t857 - pkin(5) * (t1241 * t905 + t1244 * t1372), t1244 * t839 - t1241 * t850 - pkin(5) * (t1244 * t1036 + t1241 * t871), t1244 * t836 - t1241 * t837 - pkin(5) * (t1241 * t843 + t1244 * t964); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1203, 0, t1204, 0, t1186, t1276, t1285, pkin(5) * t1285, t1241 * t1166 + t1279, t1241 * t1150 + t1244 * t1206, t1241 * t1160 - t1240 * t1300, t1241 * t1165 - t1279, t1241 * t1158 - t1243 * t1300, t1241 * t1196 - t1299, t1241 * t1113 + t1244 * t1110 + pkin(5) * (t1244 * t1159 - t1241 * t1201), t1241 * t1114 + t1244 * t1111 + pkin(5) * (t1244 * t1161 + t1241 * t1199), t1241 * t1092 + pkin(5) * (t1244 * t1202 - t1241 * t1205), pkin(5) * (t1244 * t1093 - t1241 * t1193) - (-t1244 * pkin(1) - t1241 * pkin(6)) * t1092, t1270, -t1432, t1420, t1377, -t1430, t1376, t1241 * t919 + t1244 * t932 + t1408, t1241 * t924 + t1244 * t938 + t1437, t1241 * t879 + t1244 * t939 + t1417, t1241 * t873 + t1244 * t885 + pkin(5) * (-t1241 * t1100 + t1244 * t909), t1270, t1420, t1432, t1376, t1430, t1377, t1241 * t884 + t1244 * t921 + t1408, t1241 * t866 + t1244 * t923 + t1417, t1241 * t881 + t1244 * t918 - t1437, t1241 * t852 + t1244 * t862 + pkin(5) * (-t1241 * t988 + t1244 * t887), t1241 * t896 + t1293, t1244 * t1058 + t1241 * t870, t1244 * t1003 + t1241 * t914, t1241 * t895 - t1293, t1241 * t915 - t1244 * t999, -t1244 * t1228 + t1241 * t930, t1241 * t845 + t1244 * t855 + pkin(5) * (-t1241 * t998 + t1244 * t891), t1241 * t849 + t1244 * t857 + pkin(5) * (-t1241 * t1372 + t1244 * t905), t1241 * t839 + t1244 * t850 + pkin(5) * (-t1241 * t1036 + t1244 * t871), t1241 * t836 + t1244 * t837 + pkin(5) * (-t1241 * t964 + t1244 * t843); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1209, t1210, 0, 0, t1153, t1149, t1156, t1152, t1154, 0, t1081, t1080, t1064, t1065, t1032, -t969, t1405, t1363, t1016, t1362, t917, t920, t878, t872, t1032, t1405, t969, t1362, -t1016, t1363, t882, t865, t880, t851, t894, t868, t911, t893, t912, t929, t844, t846, t838, t835; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1246, 0, 0, -g(3), -t1209, 0, t1166, t1150, t1160, t1165, t1158, t1196, t1113, t1114, t1092, pkin(6) * t1092, t1035, -t973, t1404, t1364, -t1023, t1361, t919, t924, t879, t873, t1035, t1404, t973, t1361, t1023, t1364, t884, t866, t881, t852, t896, t870, t914, t895, t915, t930, t845, t849, t839, t836; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1246, 0, qJDD(1), 0, g(3), 0, -t1210, 0, t1218, t1206, -t1303, -t1218, -t1301, -qJDD(2), t1110, t1111, 0, pkin(1) * t1092, -t1335, t1142, -t1367, t1335, -t1105, -qJDD(2), t932, t938, t939, t885, -t1335, -t1367, -t1142, -qJDD(2), t1105, t1335, t921, t923, t918, t862, t1059, t1058, t1003, -t1059, -t999, -t1228, t855, t857, t850, t837; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1209, t1210, 0, 0, t1153, t1149, t1156, t1152, t1154, 0, t1081, t1080, t1064, t1065, t1032, -t969, t1405, t1363, t1016, t1362, t917, t920, t878, t872, t1032, t1405, t969, t1362, -t1016, t1363, t882, t865, t880, t851, t894, t868, t911, t893, t912, t929, t844, t846, t838, t835; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1200, t1201, t1207, -t1220, t1216, t1220, 0, -t1193, t1162, 0, t1088, -t1044, t1394, t1252, t1072, t1271, t1015, t1037, t931, -qJ(3) * t955, t1088, t1394, t1044, t1271, -t1072, t1252, t936, t902, t933, t888, t943, t900, t959, t942, t960, t982, t859, t864, t848, t841; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1296, t1199, t1214, t1258, t1208, -t1296, t1193, 0, t1163, 0, t1087, t1042, t1393, t1272, t1066, t1257, t983, t989, t922, t937, t1087, t1393, -t1042, t1257, -t1066, t1272, t928, t897, t925, t883, t941, t898, t957, t940, t958, t981, t856, t858, t847, t840; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1218, -t1206, t1303, t1218, t1301, qJDD(2), -t1162, -t1163, 0, 0, t1335, -t1142, t1367, -t1335, t1105, qJDD(2), t1180 - t1288 + t1401, t1179 + t1277, t1352, t1357, t1335, t1367, t1142, qJDD(2), -t1105, -t1335, t1249 + t1401, t1278, t1250 + t1369, t1284, -t1059, -t1058, -t1003, t1059, t999, t1228, t1251, t1253, t1260, t1261; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1148, -t1103, t1366, t1340, t1170, -t1340, 0, -t1100, t1009, 0, t1148, t1366, t1103, -t1340, -t1170, t1340, -qJ(4) * t1103, t966, t967, qJ(4) * t988, t997, t948, t1013, t995, t1014, t1049, t903, t916, t863, t867; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1184, t1370, -t1171, -t1286, t1365, -t1184, t1100, 0, t1010, 0, t1184, -t1171, -t1370, -t1184, -t1365, -t1286, t968, t965, pkin(3) * t1370, pkin(3) * t988, -t996, -t946, -t1011, t994, -t1012, -t1048, t889, t892, t860, t861; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1335, -t1142, t1367, -t1335, t1105, qJDD(2), -t1009, -t1010, 0, 0, t1335, t1367, t1142, qJDD(2), -t1105, -t1335, t1249, t1305, t1255 + t1369, t1348, -t1059, -t1058, -t1003, t1059, t999, t1228, t1254, t1259, t1282, t1283; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1148, t1366, t1103, -t1340, -t1170, t1340, 0, t980, t988, 0, t997, t948, t1013, t995, t1014, t1049, t1275, t1290, t1264, -t1354; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1335, t1367, t1142, qJDD(2), -t1105, -t1335, -t980, 0, t978, 0, -t1059, -t1058, -t1003, t1059, t999, t1228, t1265, t1281, -t1355, -t1356; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1184, t1171, t1370, t1184, t1365, t1286, -t988, -t978, 0, 0, t996, t946, t1011, -t994, t1012, t1048, -pkin(4) * t998 - t1274, -pkin(4) * t1372 - t1273, -pkin(4) * t1036 - t1263, -pkin(4) * t964 + t1353; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1039, -t998, t1374, -t1118, t1115, t1118, 0, t964, t910, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1333, t1372, t1116, t1038, -t1055, t1333, -t964, 0, t913, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1059, t1058, t1003, -t1059, -t999, -t1228, -t910, -t913, 0, 0;];
m_new_reg = t1;
