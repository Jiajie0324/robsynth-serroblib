% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:30
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPPR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR5_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR5_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPPR5_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:30:08
% EndTime: 2019-12-31 19:30:22
% DurationCPUTime: 14.17s
% Computational Cost: add. (30952->554), mult. (73441->769), div. (0->0), fcn. (49504->8), ass. (0->403)
t664 = sin(pkin(8));
t665 = cos(pkin(8));
t667 = sin(qJ(2));
t670 = cos(qJ(2));
t625 = (t664 * t670 + t665 * t667) * qJD(1);
t622 = t625 ^ 2;
t672 = qJD(2) ^ 2;
t572 = t672 + t622;
t717 = qJD(1) * t667;
t623 = -t665 * t670 * qJD(1) + t664 * t717;
t584 = t625 * t623;
t762 = qJDD(2) + t584;
t744 = t664 * t762;
t500 = t665 * t572 + t744;
t739 = t665 * t762;
t516 = t664 * t572 - t739;
t471 = t667 * t500 + t670 * t516;
t668 = sin(qJ(1));
t671 = cos(qJ(1));
t711 = qJD(1) * qJD(2);
t697 = t670 * t711;
t709 = t667 * qJDD(1);
t634 = t697 + t709;
t698 = t667 * t711;
t707 = t670 * qJDD(1);
t680 = t698 - t707;
t586 = t665 * t634 - t664 * t680;
t618 = qJD(2) * t623;
t765 = -t618 + t586;
t432 = t668 * t471 - t671 * t765;
t834 = pkin(5) * t432;
t434 = t671 * t471 + t668 * t765;
t833 = pkin(5) * t434;
t441 = t670 * t500 - t667 * t516;
t832 = pkin(6) * t441;
t831 = -pkin(1) * t441 - pkin(2) * t500;
t830 = pkin(1) * t765 - pkin(6) * t471;
t585 = t664 * t634 + t665 * t680;
t716 = qJD(2) * t625;
t540 = t585 + t716;
t484 = -t664 * t540 + t665 * t765;
t740 = t665 * t540;
t746 = t664 * t765;
t486 = t740 + t746;
t421 = t667 * t484 + t670 * t486;
t757 = t623 ^ 2;
t580 = t757 - t622;
t829 = t668 * t421 - t671 * t580;
t828 = t671 * t421 + t668 * t580;
t606 = t757 - t672;
t505 = t664 * t606 + t739;
t511 = t665 * t606 - t744;
t467 = t667 * t505 - t670 * t511;
t542 = -t585 + t716;
t827 = t668 * t467 + t671 * t542;
t826 = t671 * t467 - t668 * t542;
t766 = -t618 - t586;
t607 = -t622 + t672;
t574 = qJDD(2) - t584;
t743 = t664 * t574;
t807 = t665 * t607 + t743;
t569 = t665 * t574;
t808 = -t664 * t607 + t569;
t813 = -t667 * t807 + t670 * t808;
t825 = t668 * t813 + t671 * t766;
t824 = -t668 * t766 + t671 * t813;
t538 = -t757 - t622;
t777 = t665 * t542 - t664 * t766;
t778 = t664 * t542 + t665 * t766;
t786 = -t667 * t778 + t670 * t777;
t800 = t668 * t538 + t671 * t786;
t822 = pkin(5) * t800;
t764 = -t672 - t757;
t774 = t665 * t764 - t743;
t776 = t664 * t764 + t569;
t788 = -t667 * t776 + t670 * t774;
t801 = t668 * t540 + t671 * t788;
t821 = pkin(5) * t801;
t802 = -t671 * t538 + t668 * t786;
t820 = pkin(5) * t802;
t803 = -t671 * t540 + t668 * t788;
t819 = pkin(5) * t803;
t818 = qJ(3) * t500;
t817 = qJ(3) * t516;
t816 = -t670 * t484 + t667 * t486;
t815 = t670 * t505 + t667 * t511;
t814 = t667 * t808 + t670 * t807;
t785 = t667 * t777 + t670 * t778;
t812 = pkin(6) * t785;
t787 = t667 * t774 + t670 * t776;
t811 = pkin(6) * t787;
t388 = -pkin(1) * t785 - pkin(2) * t778;
t806 = -pkin(1) * t787 - pkin(2) * t776;
t805 = -pkin(1) * t540 + pkin(6) * t788;
t804 = -pkin(1) * t538 + pkin(6) * t786;
t796 = qJ(3) * t774;
t795 = qJ(3) * t776;
t794 = qJ(3) * t778;
t789 = -pkin(2) * t538 + qJ(3) * t777;
t756 = 2 * qJD(4);
t779 = t765 * qJ(4);
t652 = t668 * qJDD(2);
t679 = (-t623 * t664 - t625 * t665) * qJD(2);
t715 = qJD(2) * t664;
t605 = t625 * t715;
t714 = qJD(2) * t665;
t699 = t623 * t714;
t685 = t605 - t699;
t760 = -t667 * t679 + t670 * t685;
t775 = t671 * t760 + t652;
t700 = t671 * t584;
t681 = t664 * t585 + t699;
t686 = -t665 * t585 + t623 * t715;
t759 = -t667 * t686 + t670 * t681;
t773 = t668 * t759 + t700;
t705 = t671 * qJDD(2);
t772 = t668 * t760 - t705;
t702 = t668 * t584;
t771 = t671 * t759 - t702;
t666 = sin(qJ(5));
t658 = -qJDD(2) + qJDD(5);
t669 = cos(qJ(5));
t566 = -t669 * t623 + t666 * t625;
t568 = t666 * t623 + t669 * t625;
t752 = t568 * t566;
t684 = t658 - t752;
t770 = t666 * t684;
t769 = t669 * t684;
t481 = -t566 * qJD(5) + t666 * t585 + t669 * t586;
t659 = qJD(2) - qJD(5);
t555 = t566 * t659;
t768 = t481 + t555;
t663 = t670 ^ 2;
t673 = qJD(1) ^ 2;
t643 = t668 * g(1) - t671 * g(2);
t683 = qJDD(1) * pkin(1) + t643;
t537 = -(qJD(2) * pkin(2) - qJ(3) * t717) * t717 - t680 * pkin(2) - qJDD(3) + (t663 * qJ(3) + pkin(6)) * t673 + t683;
t767 = -pkin(3) * t716 + t537;
t654 = t663 * t673;
t649 = -t654 - t672;
t570 = t623 * pkin(3) - t625 * qJ(4);
t731 = t667 * t673;
t644 = t671 * g(1) + t668 * g(2);
t628 = -t673 * pkin(1) + qJDD(1) * pkin(6) - t644;
t734 = t667 * t628;
t527 = qJDD(2) * pkin(2) - t634 * qJ(3) - t734 + (pkin(2) * t731 + qJ(3) * t711 - g(3)) * t670;
t600 = -t667 * g(3) + t670 * t628;
t528 = t649 * pkin(2) + qJ(3) * t707 + t600;
t721 = t664 * t527 + t665 * t528;
t763 = qJDD(2) * qJ(4) + qJD(2) * t756 - t623 * t570 + t721;
t761 = t667 * t685 + t670 * t679;
t758 = t667 * t681 + t670 * t686;
t564 = t566 ^ 2;
t565 = t568 ^ 2;
t657 = t659 ^ 2;
t755 = pkin(3) + pkin(4);
t754 = pkin(3) * t665;
t753 = t585 * pkin(3);
t751 = t659 * t666;
t750 = t659 * t669;
t662 = t667 ^ 2;
t749 = t662 * t673;
t748 = t664 * t537;
t741 = t665 * t537;
t604 = -qJD(2) * pkin(4) - t625 * pkin(7);
t675 = t767 + t779;
t412 = -t753 - t585 * pkin(4) - t757 * pkin(7) + (t756 + t604) * t625 + t675;
t738 = t666 * t412;
t495 = -t658 - t752;
t737 = t666 * t495;
t712 = qJD(3) * t625;
t616 = 0.2e1 * t712;
t720 = -t665 * t527 + t664 * t528;
t457 = t616 + t720;
t713 = qJD(3) * t623;
t614 = -0.2e1 * t713;
t458 = t614 + t721;
t401 = -t665 * t457 + t664 * t458;
t736 = t667 * t401;
t627 = t673 * pkin(6) + t683;
t735 = t667 * t627;
t650 = t670 * t731;
t641 = qJDD(2) + t650;
t733 = t667 * t641;
t642 = qJDD(2) - t650;
t732 = t667 * t642;
t728 = t669 * t412;
t727 = t669 * t495;
t726 = t670 * t401;
t725 = t670 * t627;
t635 = -0.2e1 * t698 + t707;
t724 = t670 * t635;
t723 = t670 * t642;
t719 = -t538 - t672;
t718 = t662 + t663;
t708 = t668 * qJDD(1);
t706 = t671 * qJDD(1);
t704 = t625 * t756;
t703 = t668 * t752;
t701 = t671 * t752;
t696 = -qJ(4) * t664 - pkin(2);
t690 = t625 * t570 + qJDD(4) + t720;
t678 = -qJDD(2) * pkin(3) + t690;
t676 = -t672 * qJ(4) + t678;
t400 = -pkin(4) * t574 + pkin(7) * t766 + t616 + t676;
t682 = t614 + t763;
t427 = -t672 * pkin(3) + t682;
t411 = -t757 * pkin(4) + t585 * pkin(7) + qJD(2) * t604 + t427;
t364 = -t669 * t400 + t666 * t411;
t402 = t664 * t457 + t665 * t458;
t695 = -t669 * t585 + t666 * t586;
t599 = t670 * g(3) + t734;
t531 = t667 * t599 + t670 * t600;
t592 = -t668 * t643 - t671 * t644;
t693 = t668 * t650;
t692 = t671 * t650;
t638 = -t668 * t673 + t706;
t689 = -pkin(5) * t638 - t668 * g(3);
t525 = t664 * t586 + t625 * t714;
t526 = t665 * t586 - t605;
t477 = -t667 * t525 + t670 * t526;
t688 = t668 * t477 - t700;
t687 = t671 * t477 + t702;
t365 = t666 * t400 + t669 * t411;
t329 = -t669 * t364 + t666 * t365;
t330 = t666 * t364 + t669 * t365;
t530 = t670 * t599 - t667 * t600;
t591 = t671 * t643 - t668 * t644;
t677 = (-qJD(5) - t659) * t568 - t695;
t674 = t675 + t704;
t648 = t654 - t672;
t647 = -t672 - t749;
t646 = t672 - t749;
t640 = t654 - t749;
t639 = t654 + t749;
t637 = t671 * t673 + t708;
t636 = t718 * qJDD(1);
t633 = 0.2e1 * t697 + t709;
t631 = t670 * t641;
t630 = t718 * t711;
t620 = -pkin(5) * t637 + t671 * g(3);
t603 = t670 * t634 - t662 * t711;
t602 = -t663 * t711 + t667 * t680;
t598 = -t667 * t647 - t723;
t597 = -t667 * t646 + t631;
t596 = t670 * t649 - t733;
t595 = t670 * t648 - t732;
t594 = t670 * t647 - t732;
t593 = t667 * t649 + t631;
t589 = t671 * t636 - t668 * t639;
t588 = t668 * t636 + t671 * t639;
t587 = -t667 * t633 + t724;
t559 = t671 * t598 + t668 * t633;
t558 = t671 * t596 - t668 * t635;
t557 = t668 * t598 - t671 * t633;
t556 = t668 * t596 + t671 * t635;
t553 = -t565 + t657;
t552 = t564 - t657;
t551 = -pkin(6) * t594 - t725;
t550 = -pkin(6) * t593 - t735;
t549 = -t565 - t657;
t548 = -pkin(1) * t594 + t600;
t547 = -pkin(1) * t593 + t599;
t504 = t671 * t531 - t668 * t627;
t503 = t668 * t531 + t671 * t627;
t498 = t565 - t564;
t494 = -t657 - t564;
t491 = (t566 * t669 - t568 * t666) * t659;
t490 = (-t566 * t666 - t568 * t669) * t659;
t480 = -t568 * qJD(5) - t695;
t479 = -t741 + t818;
t478 = -t564 - t565;
t474 = t670 * t525 + t667 * t526;
t463 = -t748 - t795;
t462 = t669 * t552 + t737;
t461 = -t666 * t553 + t769;
t460 = -t666 * t552 + t727;
t459 = -t669 * t553 - t770;
t456 = -t666 * t549 + t727;
t455 = t669 * t549 + t737;
t453 = t481 - t555;
t448 = (qJD(5) - t659) * t568 + t695;
t447 = t669 * t481 + t568 * t751;
t446 = -t666 * t481 + t568 * t750;
t445 = -t666 * t480 - t566 * t750;
t444 = -t669 * t480 + t566 * t751;
t439 = -pkin(2) * t765 - t748 + t817;
t438 = t674 - t753;
t437 = t669 * t494 - t770;
t436 = t666 * t494 + t769;
t435 = -pkin(2) * t540 + t741 + t796;
t430 = -t664 * t490 + t665 * t491;
t429 = t665 * t490 + t664 * t491;
t428 = -t676 - 0.2e1 * t712;
t416 = (-t585 - t540) * pkin(3) + t674;
t415 = t704 - t753 + t767 + 0.2e1 * t779;
t414 = t719 * qJ(4) + t616 + t678;
t413 = t719 * pkin(3) + t682;
t406 = -t664 * t460 + t665 * t462;
t405 = -t664 * t459 + t665 * t461;
t404 = t665 * t460 + t664 * t462;
t403 = t665 * t459 + t664 * t461;
t399 = t664 * t455 + t665 * t456;
t398 = -t665 * t455 + t664 * t456;
t396 = t666 * t453 + t669 * t677;
t395 = -t669 * t448 - t666 * t768;
t394 = -t669 * t453 + t666 * t677;
t393 = t666 * t448 - t669 * t768;
t392 = -t664 * t446 + t665 * t447;
t391 = -t664 * t444 + t665 * t445;
t390 = t665 * t446 + t664 * t447;
t389 = t665 * t444 + t664 * t445;
t387 = t458 - t831;
t386 = pkin(2) * t537 + qJ(3) * t402;
t385 = -qJ(4) * t740 - t664 * t416 - t795;
t384 = t664 * t436 + t665 * t437;
t383 = -t665 * t436 + t664 * t437;
t382 = -pkin(3) * t746 + t665 * t415 - t818;
t381 = t457 + t806;
t380 = -t401 - t794;
t379 = -t667 * t429 + t670 * t430;
t378 = t665 * t416 + t696 * t540 + t796;
t377 = t665 * t427 - t664 * t428;
t376 = t664 * t427 + t665 * t428;
t375 = -t817 + t664 * t415 + (pkin(2) + t754) * t765;
t374 = -t667 * t439 + t670 * t479 + t832;
t373 = -pkin(3) * t766 - qJ(4) * t542 + t388;
t372 = t402 + t789;
t371 = t616 + (-t764 - t672) * qJ(4) + (-qJDD(2) - t574) * pkin(3) + t690 + t806;
t370 = -t667 * t435 + t670 * t463 - t811;
t369 = -qJ(4) * t762 + 0.2e1 * t713 + (-t572 + t672) * pkin(3) - t763 + t831;
t368 = -pkin(7) * t455 + qJ(4) * t768 + t728;
t367 = -t667 * t404 + t670 * t406;
t366 = -t667 * t403 + t670 * t405;
t363 = t670 * t402 - t736;
t362 = t667 * t402 + t726;
t361 = -t667 * t398 + t670 * t399;
t360 = t670 * t398 + t667 * t399;
t359 = -pkin(7) * t436 + qJ(4) * t448 + t738;
t358 = -t664 * t413 + t665 * t414 - t794;
t357 = t671 * t363 - t668 * t537;
t356 = t668 * t363 + t671 * t537;
t355 = t664 * t394 + t665 * t396;
t354 = -t664 * t393 + t665 * t395;
t353 = -t665 * t394 + t664 * t396;
t352 = t665 * t393 + t664 * t395;
t351 = t665 * t413 + t664 * t414 + t789;
t350 = -t667 * t390 + t670 * t392;
t349 = -t667 * t389 + t670 * t391;
t348 = -pkin(7) * t456 + t755 * t768 - t738;
t347 = -t667 * t383 + t670 * t384;
t346 = t670 * t383 + t667 * t384;
t345 = t671 * t361 - t668 * t768;
t344 = t668 * t361 + t671 * t768;
t343 = -pkin(7) * t437 + t755 * t448 + t728;
t342 = -qJ(3) * t376 + (-pkin(3) * t664 + qJ(4) * t665) * t438;
t341 = -t667 * t376 + t670 * t377;
t340 = t670 * t376 + t667 * t377;
t339 = -pkin(1) * t362 - pkin(2) * t401;
t338 = t671 * t347 - t668 * t448;
t337 = t668 * t347 + t671 * t448;
t336 = -t667 * t378 + t670 * t385 - t811;
t335 = qJ(3) * t377 + (-t696 + t754) * t438;
t334 = -t667 * t375 + t670 * t382 - t832;
t333 = t671 * t341 - t668 * t438;
t332 = t668 * t341 + t671 * t438;
t331 = -t667 * t372 + t670 * t380 - t812;
t328 = -pkin(6) * t362 - qJ(3) * t726 - t667 * t386;
t327 = -t667 * t353 + t670 * t355;
t326 = -t667 * t352 + t670 * t354;
t325 = t670 * t353 + t667 * t355;
t324 = -pkin(7) * t329 + qJ(4) * t412;
t323 = t671 * t327 - t668 * t478;
t322 = t668 * t327 + t671 * t478;
t321 = -t667 * t351 + t670 * t358 - t812;
t320 = -qJ(3) * t398 - t664 * t348 + t665 * t368;
t319 = -pkin(7) * t394 + qJ(4) * t478 - t329;
t318 = -pkin(1) * t340 - pkin(2) * t376 - pkin(3) * t428 - qJ(4) * t427;
t317 = -pkin(7) * t330 + t755 * t412;
t316 = -pkin(7) * t396 + t755 * t478 - t330;
t315 = -qJ(3) * t383 - t664 * t343 + t665 * t359;
t314 = pkin(2) * t768 + qJ(3) * t399 + t665 * t348 + t664 * t368;
t313 = -pkin(1) * t360 - pkin(2) * t398 - qJ(4) * t456 + t755 * t455 - t365;
t312 = pkin(2) * t448 + qJ(3) * t384 + t665 * t343 + t664 * t359;
t311 = -pkin(1) * t346 - pkin(2) * t383 - qJ(4) * t437 + t755 * t436 - t364;
t310 = t664 * t329 + t665 * t330;
t309 = -t665 * t329 + t664 * t330;
t308 = -pkin(6) * t340 - t667 * t335 + t670 * t342;
t307 = -pkin(1) * t325 - pkin(2) * t353 - qJ(4) * t396 + t755 * t394;
t306 = -pkin(6) * t360 - t667 * t314 + t670 * t320;
t305 = -qJ(3) * t353 - t664 * t316 + t665 * t319;
t304 = pkin(2) * t478 + qJ(3) * t355 + t665 * t316 + t664 * t319;
t303 = -pkin(6) * t346 - t667 * t312 + t670 * t315;
t302 = -t667 * t309 + t670 * t310;
t301 = t670 * t309 + t667 * t310;
t300 = t671 * t302 - t668 * t412;
t299 = t668 * t302 + t671 * t412;
t298 = -qJ(3) * t309 - t664 * t317 + t665 * t324;
t297 = pkin(2) * t412 + qJ(3) * t310 + t665 * t317 + t664 * t324;
t296 = -pkin(6) * t325 - t667 * t304 + t670 * t305;
t295 = -pkin(1) * t301 - pkin(2) * t309 - qJ(4) * t330 + t755 * t329;
t294 = -pkin(6) * t301 - t667 * t297 + t670 * t298;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t637, -t638, 0, t592, 0, 0, 0, 0, 0, 0, t558, t559, t589, t504, 0, 0, 0, 0, 0, 0, t801, t434, t800, t357, 0, 0, 0, 0, 0, 0, t801, t800, -t434, t333, 0, 0, 0, 0, 0, 0, t338, t345, t323, t300; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t638, -t637, 0, t591, 0, 0, 0, 0, 0, 0, t556, t557, t588, t503, 0, 0, 0, 0, 0, 0, t803, t432, t802, t356, 0, 0, 0, 0, 0, 0, t803, t802, -t432, t332, 0, 0, 0, 0, 0, 0, t337, t344, t322, t299; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t593, t594, 0, -t530, 0, 0, 0, 0, 0, 0, t787, -t441, t785, t362, 0, 0, 0, 0, 0, 0, t787, t785, t441, t340, 0, 0, 0, 0, 0, 0, t346, t360, t325, t301; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t638, 0, -t637, 0, t689, -t620, -t591, -pkin(5) * t591, t671 * t603 - t693, t671 * t587 - t668 * t640, t671 * t597 + t667 * t708, t671 * t602 + t693, t671 * t595 + t668 * t707, t671 * t630 + t652, -pkin(5) * t556 - t668 * t547 + t671 * t550, -pkin(5) * t557 - t668 * t548 + t671 * t551, -pkin(5) * t588 + t671 * t530, -pkin(5) * t503 - (pkin(1) * t668 - pkin(6) * t671) * t530, t687, -t828, t824, t771, -t826, t775, t671 * t370 - t668 * t381 - t819, t671 * t374 - t668 * t387 - t834, t671 * t331 - t668 * t388 - t820, -pkin(5) * t356 + t671 * t328 - t668 * t339, t687, t824, t828, t775, t826, t771, t671 * t336 - t668 * t371 - t819, t671 * t321 - t668 * t373 - t820, t671 * t334 - t668 * t369 + t834, -pkin(5) * t332 + t671 * t308 - t668 * t318, t671 * t350 - t703, t671 * t326 - t668 * t498, t671 * t366 - t668 * t453, t671 * t349 + t703, t671 * t367 - t668 * t677, t671 * t379 - t668 * t658, -pkin(5) * t337 + t671 * t303 - t668 * t311, -pkin(5) * t344 + t671 * t306 - t668 * t313, -pkin(5) * t322 + t671 * t296 - t668 * t307, -pkin(5) * t299 + t671 * t294 - t668 * t295; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t637, 0, t638, 0, t620, t689, t592, pkin(5) * t592, t668 * t603 + t692, t668 * t587 + t671 * t640, t668 * t597 - t667 * t706, t668 * t602 - t692, t668 * t595 - t670 * t706, t668 * t630 - t705, pkin(5) * t558 + t671 * t547 + t668 * t550, pkin(5) * t559 + t671 * t548 + t668 * t551, pkin(5) * t589 + t668 * t530, pkin(5) * t504 - (-pkin(1) * t671 - pkin(6) * t668) * t530, t688, -t829, t825, t773, -t827, t772, t668 * t370 + t671 * t381 + t821, t668 * t374 + t671 * t387 + t833, t668 * t331 + t671 * t388 + t822, pkin(5) * t357 + t668 * t328 + t671 * t339, t688, t825, t829, t772, t827, t773, t668 * t336 + t671 * t371 + t821, t668 * t321 + t671 * t373 + t822, t668 * t334 + t671 * t369 - t833, pkin(5) * t333 + t668 * t308 + t671 * t318, t668 * t350 + t701, t668 * t326 + t671 * t498, t668 * t366 + t671 * t453, t668 * t349 - t701, t668 * t367 + t671 * t677, t668 * t379 + t671 * t658, pkin(5) * t338 + t668 * t303 + t671 * t311, pkin(5) * t345 + t668 * t306 + t671 * t313, pkin(5) * t323 + t668 * t296 + t671 * t307, pkin(5) * t300 + t668 * t294 + t671 * t295; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t643, t644, 0, 0, (t634 + t697) * t667, t670 * t633 + t667 * t635, t670 * t646 + t733, t724, t667 * t648 + t723, 0, pkin(1) * t635 + pkin(6) * t596 + t725, -pkin(1) * t633 + pkin(6) * t598 - t735, pkin(1) * t639 + pkin(6) * t636 + t531, pkin(1) * t627 + pkin(6) * t531, t474, -t816, t814, t758, t815, t761, t670 * t435 + t667 * t463 + t805, t670 * t439 + t667 * t479 - t830, t670 * t372 + t667 * t380 + t804, pkin(1) * t537 + pkin(6) * t363 - qJ(3) * t736 + t670 * t386, t474, t814, t816, t761, -t815, t758, t670 * t378 + t667 * t385 + t805, t670 * t351 + t667 * t358 + t804, t670 * t375 + t667 * t382 + t830, pkin(1) * t438 + pkin(6) * t341 + t670 * t335 + t667 * t342, t670 * t390 + t667 * t392, t670 * t352 + t667 * t354, t670 * t403 + t667 * t405, t670 * t389 + t667 * t391, t670 * t404 + t667 * t406, t670 * t429 + t667 * t430, pkin(1) * t448 + pkin(6) * t347 + t670 * t312 + t667 * t315, pkin(1) * t768 + pkin(6) * t361 + t670 * t314 + t667 * t320, pkin(1) * t478 + pkin(6) * t327 + t670 * t304 + t667 * t305, pkin(1) * t412 + pkin(6) * t302 + t670 * t297 + t667 * t298;];
tauB_reg = t1;
