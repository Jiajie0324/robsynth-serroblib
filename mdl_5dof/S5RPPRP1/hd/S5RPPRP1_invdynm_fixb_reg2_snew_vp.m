% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPPRP1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,theta2,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:26
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPPRP1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRP1_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRP1_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRP1_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRP1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRP1_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:26:05
% EndTime: 2020-01-03 11:26:14
% DurationCPUTime: 8.60s
% Computational Cost: add. (25157->513), mult. (55484->633), div. (0->0), fcn. (32584->8), ass. (0->369)
t903 = sin(qJ(1));
t905 = cos(qJ(1));
t866 = t903 * g(2) - t905 * g(3);
t906 = qJD(1) ^ 2;
t851 = -t906 * pkin(1) - t866;
t899 = sin(pkin(7));
t901 = cos(pkin(7));
t867 = t905 * g(2) + t903 * g(3);
t920 = qJDD(1) * pkin(1) - t867;
t803 = t899 * t851 - t901 * t920;
t804 = t901 * t851 + t899 * t920;
t951 = t899 * t803 + t901 * t804;
t751 = t901 * t803 - t899 * t804;
t985 = t905 * t751;
t1041 = t903 * t951 - t985;
t991 = t903 * t751;
t1040 = t905 * t951 + t991;
t967 = t901 * qJDD(1);
t856 = -t899 * t906 + t967;
t982 = g(1) - qJDD(2);
t1028 = -qJ(2) * t856 - t899 * t982;
t968 = t899 * qJDD(1);
t855 = t901 * t906 + t968;
t1030 = t903 * t855 - t905 * t856;
t824 = -qJ(2) * t855 + t901 * t982;
t1039 = -pkin(5) * t1030 - t1028 * t905 + t903 * t824;
t1029 = -t905 * t855 - t903 * t856;
t1038 = pkin(5) * t1029 + t1028 * t903 + t905 * t824;
t1027 = 2 * qJD(3);
t898 = sin(pkin(8));
t902 = sin(qJ(4));
t973 = qJD(1) * t902;
t961 = t898 * t973;
t868 = qJD(4) * t961;
t883 = t898 * qJDD(1);
t904 = cos(qJ(4));
t832 = t904 * t883 - t868;
t789 = -qJDD(1) * pkin(2) - t906 * qJ(3) + qJDD(3) + t803;
t900 = cos(pkin(8));
t1019 = pkin(3) * t900;
t934 = -pkin(6) * t898 - t1019;
t910 = t934 * qJDD(1) + t789;
t766 = t904 * t910;
t885 = t900 * qJDD(1);
t876 = t885 - qJDD(4);
t974 = qJD(1) * t898;
t959 = qJD(5) * t974;
t921 = t876 * pkin(4) + 0.2e1 * t904 * t959 - t766;
t792 = -t906 * pkin(2) + qJDD(1) * qJ(3) + t804;
t848 = t934 * qJD(1);
t925 = t792 + (t1027 + t848) * qJD(1);
t952 = t898 * t982;
t746 = t925 * t900 - t952;
t893 = t898 ^ 2;
t986 = t904 * t906;
t926 = pkin(4) * t893 * t986 + t746;
t877 = t900 * qJD(1) - qJD(4);
t963 = t877 * t974;
t670 = (-qJ(5) * t963 + t926) * t902 + t832 * qJ(5) + t921;
t965 = t902 * t986;
t862 = t893 * t965;
t830 = -t862 - t876;
t1036 = pkin(4) * t830 - t670;
t908 = t900 ^ 2;
t846 = (t893 + t908) * t900 * t906;
t957 = t900 * t967;
t814 = -t899 * t846 + t957;
t816 = t901 * t846 + t899 * t885;
t1034 = t905 * t814 - t903 * t816;
t1033 = t903 * t814 + t905 * t816;
t880 = t900 * t982;
t948 = qJD(1) * t1027 + t792;
t763 = t948 * t898 + t880;
t764 = t948 * t900 - t952;
t716 = t898 * t763 + t900 * t764;
t874 = t877 ^ 2;
t970 = qJDD(1) * t902;
t972 = qJD(1) * t904;
t799 = (t970 + (qJD(4) + t877) * t972) * t898;
t962 = t877 * t973;
t969 = qJDD(1) * t904;
t801 = -t868 + (-t962 + t969) * t898;
t755 = -t904 * t799 + t902 * t801;
t1000 = t893 * t906;
t895 = t902 ^ 2;
t875 = t895 * t1000;
t896 = t904 ^ 2;
t966 = t896 * t1000;
t838 = t875 + t966;
t726 = t898 * t755 + t900 * t838;
t1026 = pkin(2) * t726;
t819 = -t966 - t874;
t829 = -t862 + t876;
t988 = t904 * t829;
t775 = -t902 * t819 + t988;
t913 = -t868 + (t962 + t969) * t898;
t733 = t898 * t775 - t900 * t913;
t1025 = pkin(2) * t733;
t836 = -t875 - t874;
t992 = t902 * t830;
t788 = t904 * t836 - t992;
t798 = (t970 + (qJD(4) - t877) * t972) * t898;
t738 = t898 * t788 - t900 * t798;
t1024 = pkin(2) * t738;
t753 = -t902 * t799 - t904 * t801;
t1023 = pkin(3) * t753;
t993 = t902 * t829;
t774 = t904 * t819 + t993;
t1022 = pkin(3) * t774;
t987 = t904 * t830;
t785 = t902 * t836 + t987;
t1021 = pkin(3) * t785;
t1020 = pkin(3) * t898;
t1018 = pkin(4) * t670;
t1017 = pkin(4) * t801;
t728 = t900 * t755 - t898 * t838;
t680 = t899 * t728 - t901 * t753;
t682 = t901 * t728 + t899 * t753;
t1015 = pkin(5) * (t903 * t680 - t905 * t682);
t734 = t900 * t775 + t898 * t913;
t691 = t899 * t734 - t901 * t774;
t692 = t901 * t734 + t899 * t774;
t1014 = pkin(5) * (t903 * t691 - t905 * t692);
t741 = t900 * t788 + t898 * t798;
t705 = t899 * t741 - t901 * t785;
t708 = t901 * t741 + t899 * t785;
t1013 = pkin(5) * (t903 * t705 - t905 * t708);
t1011 = pkin(6) * t753;
t1010 = pkin(6) * t774;
t1009 = pkin(6) * t785;
t1008 = qJ(2) * t680;
t1007 = qJ(2) * t691;
t1006 = qJ(2) * t705;
t1003 = qJ(3) * t726;
t1002 = qJ(3) * t733;
t1001 = qJ(3) * t738;
t778 = t898 * t789;
t999 = t898 * t876;
t998 = t898 * t900;
t997 = t899 * t789;
t779 = t900 * t789;
t996 = t901 * t789;
t995 = t902 * t670;
t745 = t925 * t898 + t880;
t994 = t902 * t745;
t990 = t904 * t670;
t989 = t904 * t745;
t981 = -pkin(2) * t753 + qJ(3) * t728;
t980 = -pkin(2) * t774 + qJ(3) * t734;
t979 = -pkin(2) * t785 + qJ(3) * t741;
t699 = t904 * t746 + t902 * t910;
t978 = pkin(3) * t838 + pkin(6) * t755;
t977 = -pkin(2) * t789 + qJ(3) * t716;
t976 = pkin(3) * t798 - pkin(6) * t788;
t975 = pkin(3) * t913 - pkin(6) * t775;
t873 = t906 * t998;
t964 = pkin(2) * t885 - qJ(3) * t846 - t779;
t960 = t898 * t972;
t958 = t898 * t885;
t956 = -pkin(1) * t726 + qJ(2) * t682;
t955 = -pkin(1) * t733 + qJ(2) * t692;
t954 = -pkin(1) * t738 + qJ(2) * t708;
t860 = -t903 * qJDD(1) - t905 * t906;
t953 = pkin(5) * t860 + t905 * g(1);
t698 = t902 * t746 - t766;
t648 = t902 * t698 + t904 * t699;
t828 = -t877 * pkin(4) - qJ(5) * t960;
t950 = -t828 * t904 - t848;
t949 = -t903 * t866 - t905 * t867;
t892 = t898 * t893;
t947 = t892 * t965;
t937 = t902 * t959;
t864 = -0.2e1 * t937;
t831 = (-qJD(4) * t972 - t970) * t898;
t930 = pkin(4) * t875 - t831 * qJ(5) - t877 * t828 - t699;
t671 = t864 - t930;
t627 = t902 * t671 - t990;
t936 = -t831 * pkin(4) - qJ(5) * t875 + qJDD(5) + t880;
t709 = (t792 + (t1027 - t950) * qJD(1)) * t898 + t936;
t642 = -pkin(4) * t709 + qJ(5) * t671;
t596 = -pkin(6) * t627 + qJ(5) * t990 - t902 * t642;
t613 = -pkin(3) * t627 + t1018;
t628 = t904 * t671 + t995;
t621 = t900 * t628 + t898 * t709;
t946 = -pkin(2) * t627 + qJ(3) * t621 + t898 * t596 + t900 * t613;
t663 = pkin(4) * t838 - qJ(5) * t799 + t671;
t938 = t877 * t961;
t665 = t926 * t902 + (t801 + t832 - t938) * qJ(5) + t921;
t617 = -t902 * t663 + t904 * t665 - t1011;
t718 = t1017 - t1023;
t945 = t898 * t617 + t900 * t718 + t981;
t917 = pkin(4) * t819 + t930;
t649 = t864 - t917 - t1022;
t688 = -qJ(5) * t819 + t709;
t767 = -pkin(4) * t913 + qJ(5) * t829;
t657 = t904 * t688 - t902 * t767 - t1010;
t944 = t900 * t649 + t898 * t657 + t980;
t659 = -t1021 - t1036;
t674 = -pkin(4) * t798 + qJ(5) * t836 - t936 + (t950 * qJD(1) - t948) * t898;
t662 = -qJ(5) * t987 - t902 * t674 - t1009;
t943 = t900 * t659 + t898 * t662 + t979;
t673 = t699 - t1022;
t710 = t989 - t1010;
t942 = t900 * t673 + t898 * t710 + t980;
t679 = t698 - t1021;
t713 = t994 - t1009;
t941 = t900 * t679 + t898 * t713 + t979;
t882 = t893 * qJDD(1);
t884 = t908 * qJDD(1);
t852 = t884 + t882;
t887 = t908 * t906;
t858 = t887 + t1000;
t940 = pkin(2) * t858 + qJ(3) * t852 + t716;
t939 = t877 * t960;
t935 = -pkin(3) * t745 + pkin(6) * t648;
t933 = -t975 + t994;
t932 = -t976 - t989;
t931 = t900 * t862;
t647 = -t904 * t698 + t902 * t699;
t715 = t900 * t763 - t898 * t764;
t820 = t855 * t998;
t821 = -t899 * t873 + t898 * t957;
t929 = t905 * t820 + t903 * t821;
t928 = t903 * t820 - t905 * t821;
t927 = t905 * t866 - t903 * t867;
t845 = (t898 * t908 + t892) * t906;
t924 = -pkin(2) * t883 + qJ(3) * t845 + t778;
t923 = t648 + t978;
t640 = -t647 - t1011;
t922 = -t753 * t1019 + t898 * t640 + t981;
t919 = t904 * t663 + t902 * t665 + t978;
t918 = t902 * t688 + t904 * t767 - t975;
t916 = -qJ(5) * t992 + t904 * t674 - t976;
t638 = t900 * t648 + t898 * t745;
t915 = qJ(3) * t638 + (-pkin(2) + t934) * t647;
t911 = -pkin(3) * t709 + pkin(6) * t628 + qJ(5) * t995 + t904 * t642;
t870 = 0.2e1 * t958;
t861 = t905 * qJDD(1) - t903 * t906;
t859 = -t887 + t1000;
t854 = t900 * t876;
t853 = t884 - t882;
t839 = -t875 + t966;
t837 = t874 - t966;
t835 = t875 - t874;
t834 = pkin(5) * t861 + t903 * g(1);
t815 = t901 * t845 + t898 * t968;
t812 = t899 * t845 - t898 * t967;
t809 = t901 * t853 + t899 * t859;
t808 = t901 * t852 - t899 * t858;
t807 = t899 * t853 - t901 * t859;
t806 = t899 * t852 + t901 * t858;
t805 = (-t895 - t896) * t963;
t794 = t902 * t832 - t896 * t963;
t793 = t904 * t831 - t895 * t963;
t791 = (t832 + t938) * t904;
t790 = (-t831 - t939) * t902;
t787 = t904 * t835 + t993;
t786 = -t902 * t837 + t987;
t784 = t902 * t835 - t988;
t783 = t904 * t837 + t992;
t777 = -pkin(1) * t855 - t804;
t776 = pkin(1) * t856 - t803;
t773 = -t899 * t805 - t901 * t999;
t772 = t901 * t805 - t899 * t999;
t769 = t900 * t791 + t947;
t768 = t900 * t790 - t947;
t762 = t898 * t791 - t931;
t761 = t898 * t790 + t931;
t758 = t903 * t812 - t905 * t815;
t757 = t905 * t812 + t903 * t815;
t756 = -t904 * t798 - t902 * t913;
t754 = -t902 * t798 + t904 * t913;
t744 = pkin(1) * t751;
t742 = pkin(1) * t982 + qJ(2) * t951;
t740 = t900 * t787 - t898 * t799;
t739 = t900 * t786 + t898 * t801;
t737 = t898 * t787 + t900 * t799;
t736 = t898 * t786 - t900 * t801;
t731 = pkin(1) * t814 + t964;
t730 = pkin(1) * t812 + t924;
t729 = t900 * t756 + t898 * t839;
t727 = t898 * t756 - t900 * t839;
t724 = t901 * t769 + t899 * t794;
t723 = t901 * t768 + t899 * t793;
t722 = t899 * t769 - t901 * t794;
t721 = t899 * t768 - t901 * t793;
t720 = t903 * t772 - t905 * t773;
t719 = t905 * t772 + t903 * t773;
t707 = t901 * t740 + t899 * t784;
t706 = t901 * t739 + t899 * t783;
t704 = t899 * t740 - t901 * t784;
t703 = t899 * t739 - t901 * t783;
t701 = pkin(1) * t705;
t697 = -qJ(2) * t812 - t899 * t764 + t900 * t996;
t696 = -qJ(2) * t814 - t899 * t763 + t898 * t996;
t695 = qJ(2) * t815 + t901 * t764 + t899 * t779;
t694 = -qJ(2) * t816 + t901 * t763 + t898 * t997;
t690 = pkin(1) * t691;
t687 = -qJ(2) * t806 + t901 * t715;
t686 = qJ(2) * t808 + t899 * t715;
t685 = t901 * t716 + t997;
t684 = t899 * t716 - t996;
t683 = t901 * t729 + t899 * t754;
t681 = t899 * t729 - t901 * t754;
t678 = pkin(1) * t806 + t940;
t677 = pkin(1) * t680;
t669 = t903 * t722 - t905 * t724;
t668 = t903 * t721 - t905 * t723;
t667 = t905 * t722 + t903 * t724;
t666 = t905 * t721 + t903 * t723;
t664 = -t932 - t1024;
t661 = -t933 - t1025;
t655 = t903 * t704 - t905 * t707;
t654 = t903 * t703 - t905 * t706;
t653 = t905 * t704 + t903 * t707;
t652 = t905 * t703 + t903 * t706;
t650 = pkin(5) * (t905 * t705 + t903 * t708);
t643 = pkin(5) * (t905 * t691 + t903 * t692);
t641 = pkin(1) * t684 + t977;
t637 = t898 * t648 - t900 * t745;
t635 = t903 * t681 - t905 * t683;
t633 = t905 * t681 + t903 * t683;
t632 = pkin(5) * (t905 * t680 + t903 * t682);
t631 = -t916 - t1024;
t630 = -t898 * t679 + t900 * t713 - t1001;
t629 = -t918 - t1025;
t625 = -t898 * t673 + t900 * t710 - t1002;
t624 = -qJ(2) * t684 - (pkin(2) * t899 - qJ(3) * t901) * t715;
t623 = -t923 - t1026;
t622 = t753 * t1020 + t900 * t640 - t1003;
t620 = t898 * t628 - t900 * t709;
t618 = qJ(2) * t685 - (-pkin(2) * t901 - qJ(3) * t899 - pkin(1)) * t715;
t616 = t701 + t941;
t614 = -t898 * t659 + t900 * t662 - t1001;
t612 = t690 + t942;
t610 = -t898 * t649 + t900 * t657 - t1002;
t609 = t901 * t638 + t899 * t647;
t608 = t899 * t638 - t901 * t647;
t607 = -t919 - t1026;
t606 = -pkin(2) * t637 - t935;
t605 = t901 * t630 - t899 * t664 - t1006;
t604 = t900 * t617 - t898 * t718 - t1003;
t603 = t701 + t943;
t602 = t677 + t922;
t601 = t901 * t625 - t899 * t661 - t1007;
t600 = t690 + t944;
t599 = t899 * t630 + t901 * t664 + t954;
t598 = t899 * t625 + t901 * t661 + t955;
t597 = -qJ(3) * t637 + (-pkin(6) * t900 + t1020) * t647;
t594 = t901 * t621 + t899 * t627;
t593 = t899 * t621 - t901 * t627;
t592 = t677 + t945;
t591 = t901 * t614 - t899 * t631 - t1006;
t590 = t901 * t622 - t899 * t623 - t1008;
t589 = t901 * t610 - t899 * t629 - t1007;
t588 = t899 * t614 + t901 * t631 + t954;
t587 = t899 * t610 + t901 * t629 + t955;
t586 = t899 * t622 + t901 * t623 + t956;
t585 = -pkin(2) * t620 - t911;
t584 = t901 * t604 - t899 * t607 - t1008;
t583 = t899 * t604 + t901 * t607 + t956;
t582 = pkin(1) * t608 + t915;
t581 = -qJ(3) * t620 + t900 * t596 - t898 * t613;
t580 = -qJ(2) * t608 + t901 * t597 - t899 * t606;
t579 = -pkin(1) * t637 + qJ(2) * t609 + t899 * t597 + t901 * t606;
t578 = pkin(1) * t593 + t946;
t577 = -qJ(2) * t593 + t901 * t581 - t899 * t585;
t576 = -pkin(1) * t620 + qJ(2) * t594 + t899 * t581 + t901 * t585;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t867, t866, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t776, t777, 0, -t744, t882, t870, 0, t884, 0, 0, t731, t730, t678, t641, t762, t727, t736, t761, t737, t854, t616, t612, t602, t582, t762, t727, t736, t761, t737, t854, t603, t600, t592, t578; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t860, 0, t861, 0, t953, -t834, -t927, -pkin(5) * t927, 0, 0, -t1029, 0, -t1030, 0, t1038, -t1039, t1040, pkin(5) * t1040 + qJ(2) * t991 + t905 * t742, t929, t905 * t807 + t903 * t809, t757, -t929, -t1034, 0, -pkin(5) * t1033 + t905 * t694 + t903 * t696, -pkin(5) * t758 + t905 * t695 + t903 * t697, t903 * t687 + t905 * t686 - pkin(5) * (t903 * t806 - t905 * t808), t903 * t624 + t905 * t618 - pkin(5) * (t903 * t684 - t905 * t685), t667, t633, t652, t666, t653, t719, t905 * t599 + t903 * t605 - t1013, t905 * t598 + t903 * t601 - t1014, t905 * t586 + t903 * t590 - t1015, t903 * t580 + t905 * t579 - pkin(5) * (t903 * t608 - t905 * t609), t667, t633, t652, t666, t653, t719, t905 * t588 + t903 * t591 - t1013, t905 * t587 + t903 * t589 - t1014, t905 * t583 + t903 * t584 - t1015, t903 * t577 + t905 * t576 - pkin(5) * (t903 * t593 - t905 * t594); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t861, 0, -t860, 0, t834, t953, t949, pkin(5) * t949, 0, 0, t1030, 0, -t1029, 0, t1039, t1038, t1041, pkin(5) * t1041 - qJ(2) * t985 + t903 * t742, t928, t903 * t807 - t905 * t809, t758, -t928, -t1033, 0, pkin(5) * t1034 + t903 * t694 - t905 * t696, pkin(5) * t757 + t903 * t695 - t905 * t697, -t905 * t687 + t903 * t686 + pkin(5) * (t905 * t806 + t903 * t808), -t905 * t624 + t903 * t618 + pkin(5) * (t905 * t684 + t903 * t685), t669, t635, t654, t668, t655, t720, t903 * t599 - t905 * t605 + t650, t903 * t598 - t905 * t601 + t643, t903 * t586 - t905 * t590 + t632, -t905 * t580 + t903 * t579 + pkin(5) * (t905 * t608 + t903 * t609), t669, t635, t654, t668, t655, t720, t903 * t588 - t905 * t591 + t650, t903 * t587 - t905 * t589 + t643, t903 * t583 - t905 * t584 + t632, -t905 * t577 + t903 * t576 + pkin(5) * (t905 * t593 + t903 * t594); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t906, 0, 0, -g(1), t867, 0, 0, 0, t856, 0, -t855, 0, t1028, -t824, t751, qJ(2) * t751, t821, t809, t815, -t821, t816, 0, t696, t697, t687, t624, t724, t683, t706, t723, t707, t773, t605, t601, t590, t580, t724, t683, t706, t723, t707, t773, t591, t589, t584, t577; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t906, 0, qJDD(1), 0, g(1), 0, -t866, 0, 0, 0, t855, 0, t856, 0, t824, t1028, t951, t742, t820, t807, t812, -t820, -t814, 0, t694, t695, t686, t618, t722, t681, t703, t721, t704, t772, t599, t598, t586, t579, t722, t681, t703, t721, t704, t772, t588, t587, t583, t576; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t867, t866, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t776, t777, 0, -t744, t882, t870, 0, t884, 0, 0, t731, t730, t678, t641, t762, t727, t736, t761, t737, t854, t616, t612, t602, t582, t762, t727, t736, t761, t737, t854, t603, t600, t592, t578; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t906, 0, 0, -t982, t803, 0, t958, t853, t845, -t958, t846, 0, t778, t779, t715, qJ(3) * t715, t769, t729, t739, t768, t740, -t999, t630, t625, t622, t597, t769, t729, t739, t768, t740, -t999, t614, t610, t604, t581; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t906, 0, qJDD(1), 0, t982, 0, t804, 0, t873, -t859, -t883, -t873, -t885, 0, t763, t764, 0, pkin(2) * t715, -t794, -t754, -t783, -t793, -t784, t805, t664, t661, t623, t606, -t794, -t754, -t783, -t793, -t784, t805, t631, t629, t607, t585; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t803, -t804, 0, 0, t882, t870, 0, t884, 0, 0, t964, t924, t940, t977, t762, t727, t736, t761, t737, t854, t941, t942, t922, t915, t762, t727, t736, t761, t737, t854, t943, t944, t945, t946; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t883, t885, t873, 0, t887, 0, 0, t789, t763, 0, t791, t756, t786, t790, t787, 0, t713, t710, t640, -pkin(6) * t647, t791, t756, t786, t790, t787, 0, t662, t657, t617, t596; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t883, -t1000, t885, -t873, 0, -t789, 0, t764, 0, -t862, -t839, -t801, t862, t799, t876, t679, t673, -t1023, -pkin(3) * t647, -t862, -t839, -t801, t862, t799, t876, t659, t649, t718, t613; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t873, t859, t883, t873, t885, 0, -t763, -t764, 0, 0, t794, t754, t783, t793, t784, -t805, t932, t933, t923, t935, t794, t754, t783, t793, t784, -t805, t916, t918, t919, t911; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t832, -t798, t830, -t938, t835, t938, 0, t745, t698, 0, t832, -t798, t830, -t938, t835, t938, -qJ(5) * t830, t688, t665, qJ(5) * t670; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t939, t913, t837, t831, -t829, t939, -t745, 0, t699, 0, -t939, t913, t837, t831, -t829, t939, t674, t767, t663, t642; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t862, t839, t801, -t862, -t799, -t876, -t698, -t699, 0, 0, t862, t839, t801, -t862, -t799, -t876, t1036, t917 + 0.2e1 * t937, -t1017, -t1018; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t832, -t798, t830, -t938, t835, t938, 0, t709, t670, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t939, t913, t837, t831, -t829, t939, -t709, 0, t671, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t862, t839, t801, -t862, -t799, -t876, -t670, -t671, 0, 0;];
m_new_reg = t1;
