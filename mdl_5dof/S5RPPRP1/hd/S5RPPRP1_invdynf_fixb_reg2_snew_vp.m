% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPPRP1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,theta2,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:26
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPPRP1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRP1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRP1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRP1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRP1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRP1_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:26:14
% EndTime: 2020-01-03 11:26:16
% DurationCPUTime: 1.82s
% Computational Cost: add. (4179->168), mult. (9290->230), div. (0->0), fcn. (5585->8), ass. (0->131)
t1190 = -2 * qJD(5);
t1161 = qJD(1) ^ 2;
t1153 = sin(pkin(8));
t1147 = t1153 ^ 2;
t1155 = cos(pkin(8));
t1148 = t1155 ^ 2;
t1180 = t1147 + t1148;
t1130 = t1180 * t1161;
t1182 = t1155 * qJD(1);
t1138 = -qJD(4) + t1182;
t1189 = t1138 ^ 2;
t1188 = 2 * qJD(3);
t1187 = -g(1) + qJDD(2);
t1186 = qJD(1) * t1153;
t1157 = sin(qJ(4));
t1185 = qJD(1) * t1157;
t1159 = cos(qJ(4));
t1184 = qJD(1) * t1159;
t1183 = t1147 * t1161;
t1167 = -pkin(3) * t1155 - pkin(6) * t1153;
t1125 = t1167 * qJD(1);
t1181 = t1188 + t1125;
t1158 = sin(qJ(1));
t1160 = cos(qJ(1));
t1133 = -t1158 * g(2) + t1160 * g(3);
t1126 = -t1161 * pkin(1) + t1133;
t1154 = sin(pkin(7));
t1156 = cos(pkin(7));
t1134 = -t1160 * g(2) - t1158 * g(3);
t1164 = qJDD(1) * pkin(1) + t1134;
t1105 = t1156 * t1126 + t1154 * t1164;
t1099 = -t1161 * pkin(2) + qJDD(1) * qJ(3) + t1105;
t1089 = t1155 * t1099 + t1153 * t1187 + t1182 * t1188;
t1083 = t1125 * t1182 + t1089;
t1104 = -t1154 * t1126 + t1156 * t1164;
t1098 = -qJDD(1) * pkin(2) - t1161 * qJ(3) + qJDD(3) - t1104;
t1092 = t1167 * qJDD(1) + t1098;
t1069 = t1159 * t1083 + t1157 * t1092;
t1179 = qJDD(1) * t1157;
t1178 = qJDD(1) * t1159;
t1177 = t1153 * qJDD(1);
t1176 = t1154 * qJDD(1);
t1144 = t1155 * qJDD(1);
t1175 = t1156 * qJDD(1);
t1174 = -t1144 + qJDD(4);
t1173 = t1138 * t1185;
t1172 = t1153 * t1184;
t1171 = t1159 * t1183;
t1150 = t1157 ^ 2;
t1170 = t1150 * t1183;
t1128 = -t1156 * t1161 - t1176;
t1129 = -t1154 * t1161 + t1175;
t1169 = t1158 * t1128 + t1160 * t1129;
t1168 = t1157 * t1171;
t1166 = t1160 * t1128 - t1158 * t1129;
t1165 = -qJD(4) * t1184 - t1179;
t1151 = t1159 ^ 2;
t1143 = t1155 * t1187;
t1137 = t1155 * t1161 * t1153;
t1135 = t1153 * qJD(4) * t1185;
t1132 = t1160 * qJDD(1) - t1158 * t1161;
t1131 = -t1158 * qJDD(1) - t1160 * t1161;
t1127 = t1180 * qJDD(1);
t1124 = t1155 * t1130;
t1123 = t1153 * t1130;
t1118 = (t1150 + t1151) * t1183;
t1117 = -t1170 - t1189;
t1116 = -t1168 + t1174;
t1115 = -t1168 - t1174;
t1114 = -t1138 * pkin(4) - qJ(5) * t1172;
t1112 = -t1151 * t1183 - t1189;
t1111 = -t1156 * t1124 - t1154 * t1144;
t1110 = t1156 * t1123 + t1153 * t1176;
t1109 = -t1154 * t1124 + t1155 * t1175;
t1108 = t1154 * t1123 - t1153 * t1175;
t1107 = t1156 * t1127 - t1154 * t1130;
t1106 = t1154 * t1127 + t1156 * t1130;
t1103 = t1135 + (t1173 - t1178) * t1153;
t1102 = -t1135 + (t1173 + t1178) * t1153;
t1101 = (-t1179 + (-qJD(4) - t1138) * t1184) * t1153;
t1100 = (t1179 + (qJD(4) - t1138) * t1184) * t1153;
t1097 = -t1157 * t1116 + t1159 * t1117;
t1096 = t1159 * t1116 + t1157 * t1117;
t1094 = -t1157 * t1112 + t1159 * t1115;
t1093 = t1159 * t1112 + t1157 * t1115;
t1091 = t1159 * t1092;
t1088 = -0.2e1 * qJD(3) * t1186 - t1153 * t1099 + t1143;
t1087 = t1159 * t1101 - t1157 * t1103;
t1086 = t1157 * t1101 + t1159 * t1103;
t1085 = -t1154 * t1104 + t1156 * t1105;
t1084 = t1156 * t1104 + t1154 * t1105;
t1082 = -t1143 + (t1181 * qJD(1) + t1099) * t1153;
t1080 = t1155 * t1097 + t1153 * t1100;
t1079 = t1153 * t1097 - t1155 * t1100;
t1078 = t1155 * t1094 + t1153 * t1102;
t1077 = t1153 * t1094 - t1155 * t1102;
t1076 = t1155 * t1087 - t1153 * t1118;
t1075 = t1153 * t1087 + t1155 * t1118;
t1074 = -t1153 * t1088 + t1155 * t1089;
t1073 = t1155 * t1088 + t1153 * t1089;
t1072 = -qJ(5) * t1170 + qJDD(5) - t1143 + (-t1165 * pkin(4) + t1099 + (t1114 * t1159 + t1181) * qJD(1)) * t1153;
t1071 = t1156 * t1080 + t1154 * t1096;
t1070 = t1154 * t1080 - t1156 * t1096;
t1068 = -t1157 * t1083 + t1091;
t1067 = t1156 * t1078 + t1154 * t1093;
t1066 = t1154 * t1078 - t1156 * t1093;
t1065 = t1156 * t1074 + t1154 * t1098;
t1064 = t1154 * t1074 - t1156 * t1098;
t1063 = t1156 * t1076 + t1154 * t1086;
t1062 = t1154 * t1076 - t1156 * t1086;
t1061 = -pkin(4) * t1170 + t1138 * t1114 + (t1165 * qJ(5) + t1185 * t1190) * t1153 + t1069;
t1060 = t1091 - (t1159 * t1177 - t1135) * qJ(5) + t1174 * pkin(4) + t1172 * t1190 + (t1138 * qJ(5) * t1186 - pkin(4) * t1171 - t1083) * t1157;
t1059 = t1158 * t1070 - t1160 * t1071;
t1058 = t1160 * t1070 + t1158 * t1071;
t1057 = -t1157 * t1068 + t1159 * t1069;
t1056 = t1159 * t1068 + t1157 * t1069;
t1055 = t1158 * t1066 - t1160 * t1067;
t1054 = t1160 * t1066 + t1158 * t1067;
t1053 = t1155 * t1057 + t1153 * t1082;
t1052 = t1153 * t1057 - t1155 * t1082;
t1051 = t1158 * t1062 - t1160 * t1063;
t1050 = t1160 * t1062 + t1158 * t1063;
t1049 = -t1157 * t1060 + t1159 * t1061;
t1048 = t1159 * t1060 + t1157 * t1061;
t1047 = t1155 * t1049 + t1153 * t1072;
t1046 = t1153 * t1049 - t1155 * t1072;
t1045 = t1156 * t1053 + t1154 * t1056;
t1044 = t1154 * t1053 - t1156 * t1056;
t1043 = t1156 * t1047 + t1154 * t1048;
t1042 = t1154 * t1047 - t1156 * t1048;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1187, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1073, 0, 0, 0, 0, 0, 0, t1079, t1077, t1075, t1052, 0, 0, 0, 0, 0, 0, t1079, t1077, t1075, t1046; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1132, t1131, 0, t1158 * t1133 + t1160 * t1134, 0, 0, 0, 0, 0, 0, t1169, t1166, 0, t1160 * t1084 + t1158 * t1085, 0, 0, 0, 0, 0, 0, t1160 * t1109 + t1158 * t1111, t1160 * t1108 + t1158 * t1110, t1160 * t1106 + t1158 * t1107, t1160 * t1064 + t1158 * t1065, 0, 0, 0, 0, 0, 0, t1058, t1054, t1050, t1160 * t1044 + t1158 * t1045, 0, 0, 0, 0, 0, 0, t1058, t1054, t1050, t1160 * t1042 + t1158 * t1043; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1131, t1132, 0, -t1160 * t1133 + t1158 * t1134, 0, 0, 0, 0, 0, 0, -t1166, t1169, 0, t1158 * t1084 - t1160 * t1085, 0, 0, 0, 0, 0, 0, t1158 * t1109 - t1160 * t1111, t1158 * t1108 - t1160 * t1110, t1158 * t1106 - t1160 * t1107, t1158 * t1064 - t1160 * t1065, 0, 0, 0, 0, 0, 0, t1059, t1055, t1051, t1158 * t1044 - t1160 * t1045, 0, 0, 0, 0, 0, 0, t1059, t1055, t1051, t1158 * t1042 - t1160 * t1043; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1161, -qJDD(1), 0, t1133, 0, 0, 0, 0, 0, 0, t1128, -t1129, 0, t1085, 0, 0, 0, 0, 0, 0, t1111, t1110, t1107, t1065, 0, 0, 0, 0, 0, 0, t1071, t1067, t1063, t1045, 0, 0, 0, 0, 0, 0, t1071, t1067, t1063, t1043; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1161, 0, t1134, 0, 0, 0, 0, 0, 0, t1129, t1128, 0, t1084, 0, 0, 0, 0, 0, 0, t1109, t1108, t1106, t1064, 0, 0, 0, 0, 0, 0, t1070, t1066, t1062, t1044, 0, 0, 0, 0, 0, 0, t1070, t1066, t1062, t1042; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1187, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1073, 0, 0, 0, 0, 0, 0, t1079, t1077, t1075, t1052, 0, 0, 0, 0, 0, 0, t1079, t1077, t1075, t1046; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1161, -qJDD(1), 0, t1105, 0, 0, 0, 0, 0, 0, -t1124, t1123, t1127, t1074, 0, 0, 0, 0, 0, 0, t1080, t1078, t1076, t1053, 0, 0, 0, 0, 0, 0, t1080, t1078, t1076, t1047; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1161, 0, t1104, 0, 0, 0, 0, 0, 0, t1144, -t1177, t1130, -t1098, 0, 0, 0, 0, 0, 0, -t1096, -t1093, -t1086, -t1056, 0, 0, 0, 0, 0, 0, -t1096, -t1093, -t1086, -t1048; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1187, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1073, 0, 0, 0, 0, 0, 0, t1079, t1077, t1075, t1052, 0, 0, 0, 0, 0, 0, t1079, t1077, t1075, t1046; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1148 * t1161, t1137, t1144, t1089, 0, 0, 0, 0, 0, 0, t1097, t1094, t1087, t1057, 0, 0, 0, 0, 0, 0, t1097, t1094, t1087, t1049; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1137, -t1183, -t1177, t1088, 0, 0, 0, 0, 0, 0, -t1100, -t1102, t1118, -t1082, 0, 0, 0, 0, 0, 0, -t1100, -t1102, t1118, -t1072; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1144, t1177, -t1130, t1098, 0, 0, 0, 0, 0, 0, t1096, t1093, t1086, t1056, 0, 0, 0, 0, 0, 0, t1096, t1093, t1086, t1048; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1117, t1115, t1101, t1069, 0, 0, 0, 0, 0, 0, t1117, t1115, t1101, t1061; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1116, t1112, t1103, t1068, 0, 0, 0, 0, 0, 0, t1116, t1112, t1103, t1060; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1100, t1102, -t1118, t1082, 0, 0, 0, 0, 0, 0, t1100, t1102, -t1118, t1072; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1117, t1115, t1101, t1061; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1116, t1112, t1103, t1060; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1100, t1102, -t1118, t1072;];
f_new_reg = t1;
