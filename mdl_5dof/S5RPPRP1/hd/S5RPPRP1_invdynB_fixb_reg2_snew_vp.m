% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPPRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,theta2,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:26
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPPRP1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRP1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRP1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRP1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRP1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRP1_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:25:56
% EndTime: 2020-01-03 11:26:05
% DurationCPUTime: 6.02s
% Computational Cost: add. (15160->439), mult. (33421->617), div. (0->0), fcn. (19855->8), ass. (0->330)
t565 = 2 * qJD(3);
t478 = sin(qJ(1));
t480 = cos(qJ(1));
t444 = t478 * g(2) - t480 * g(3);
t481 = qJD(1) ^ 2;
t429 = -t481 * pkin(1) - t444;
t474 = sin(pkin(7));
t476 = cos(pkin(7));
t445 = t480 * g(2) + t478 * g(3);
t486 = qJDD(1) * pkin(1) - t445;
t380 = t476 * t429 + t474 * t486;
t370 = -t481 * pkin(2) + qJDD(1) * qJ(3) + t380;
t573 = (qJD(1) * t565) + t370;
t379 = t474 * t429 - t476 * t486;
t503 = t474 * t379 + t476 * t380;
t331 = t476 * t379 - t474 * t380;
t533 = t480 * t331;
t275 = t478 * t503 - t533;
t538 = t478 * t331;
t575 = t480 * t503 + t538;
t523 = t474 * qJDD(1);
t434 = t476 * t481 + t523;
t521 = t476 * qJDD(1);
t544 = t474 * t481;
t435 = t521 - t544;
t387 = -t480 * t434 - t478 * t435;
t471 = g(1) - qJDD(2);
t404 = qJ(2) * t434 - t476 * t471;
t493 = -qJ(2) * t435 - t474 * t471;
t574 = pkin(5) * t387 - t480 * t404 + t478 * t493;
t567 = t478 * t434 - t480 * t435;
t572 = pkin(5) * t567 + t478 * t404 + t480 * t493;
t473 = sin(pkin(8));
t466 = t473 ^ 2;
t475 = cos(pkin(8));
t467 = t475 ^ 2;
t426 = (t466 + t467) * t475 * t481;
t509 = t475 * t521;
t392 = -t474 * t426 + t509;
t522 = t475 * qJDD(1);
t394 = t476 * t426 + t474 * t522;
t340 = t480 * t392 - t478 * t394;
t342 = t478 * t392 + t480 * t394;
t527 = t475 * qJD(1);
t451 = -qJD(4) + t527;
t448 = t451 ^ 2;
t479 = cos(qJ(4));
t470 = t479 ^ 2;
t547 = t466 * t481;
t519 = t470 * t547;
t398 = -t519 - t448;
t477 = sin(qJ(4));
t518 = t477 * t479 * t481;
t441 = t466 * t518;
t450 = -qJDD(4) + t522;
t409 = -t441 + t450;
t540 = t477 * t409;
t357 = t479 * t398 + t540;
t564 = pkin(3) * t357;
t469 = t477 ^ 2;
t449 = t469 * t547;
t415 = -t449 - t448;
t410 = -t441 - t450;
t534 = t479 * t410;
t363 = t477 * t415 + t534;
t563 = pkin(3) * t363;
t562 = pkin(3) * t473;
t561 = pkin(3) * t475;
t525 = qJDD(1) * t477;
t528 = qJD(1) * t479;
t375 = (t525 + (qJD(4) + t451) * t528) * t473;
t529 = qJD(1) * t477;
t512 = t473 * t529;
t446 = qJD(4) * t512;
t513 = t451 * t529;
t524 = qJDD(1) * t479;
t378 = t446 + (t513 - t524) * t473;
t335 = -t479 * t375 - t477 * t378;
t417 = t449 + t519;
t311 = t475 * t335 - t473 * t417;
t333 = -t477 * t375 + t479 * t378;
t266 = t474 * t311 - t476 * t333;
t268 = t476 * t311 + t474 * t333;
t227 = t478 * t266 - t480 * t268;
t560 = pkin(5) * t227;
t535 = t479 * t409;
t358 = -t477 * t398 + t535;
t484 = -t446 + (t513 + t524) * t473;
t315 = t475 * t358 + t473 * t484;
t279 = t474 * t315 - t476 * t357;
t280 = t476 * t315 + t474 * t357;
t237 = t478 * t279 - t480 * t280;
t559 = pkin(5) * t237;
t539 = t477 * t410;
t366 = t479 * t415 - t539;
t374 = (t525 + (qJD(4) - t451) * t528) * t473;
t322 = t475 * t366 + t473 * t374;
t291 = t474 * t322 - t476 * t363;
t294 = t476 * t322 + t474 * t363;
t247 = t478 * t291 - t480 * t294;
t558 = pkin(5) * t247;
t557 = pkin(6) * t333;
t556 = pkin(6) * t357;
t555 = pkin(6) * t363;
t554 = qJ(2) * t266;
t553 = qJ(2) * t279;
t552 = qJ(2) * t291;
t309 = t473 * t335 + t475 * t417;
t551 = qJ(3) * t309;
t314 = t473 * t358 - t475 * t484;
t550 = qJ(3) * t314;
t319 = t473 * t366 - t475 * t374;
t549 = qJ(3) * t319;
t472 = qJDD(1) * pkin(2);
t548 = t450 * t473;
t546 = t473 * t475;
t367 = -t481 * qJ(3) + qJDD(3) + t379 - t472;
t545 = t474 * t367;
t543 = t476 * t367;
t347 = -t473 * t471 + t573 * t475;
t496 = -pkin(6) * t473 - t561;
t427 = t496 * qJD(1);
t327 = t427 * t527 + t347;
t353 = t496 * qJDD(1) + t367;
t285 = t477 * t327 - t479 * t353;
t412 = t473 * t524 - t446;
t499 = t451 * t512;
t494 = pkin(4) * t441 + t285 + (t412 - t499) * qJ(5);
t485 = -t450 * pkin(4) - t494;
t530 = qJD(1) * t473;
t510 = qJD(5) * t530;
t498 = t479 * t510;
t259 = t485 - 0.2e1 * t498;
t542 = t477 * t259;
t456 = t475 * t471;
t326 = t456 + (t370 + (t565 + t427) * qJD(1)) * t473;
t541 = t477 * t326;
t537 = t479 * t259;
t536 = t479 * t326;
t286 = t479 * t327 + t477 * t353;
t517 = pkin(1) * t266 - pkin(2) * t333 + qJ(3) * t311;
t516 = pkin(1) * t279 - pkin(2) * t357 + qJ(3) * t315;
t515 = pkin(1) * t291 - pkin(2) * t363 + qJ(3) * t322;
t514 = t451 * t530;
t511 = t473 * t528;
t508 = -pkin(1) * t309 + qJ(2) * t268;
t507 = -pkin(1) * t314 + qJ(2) * t280;
t506 = -pkin(1) * t319 + qJ(2) * t294;
t439 = -t478 * qJDD(1) - t480 * t481;
t505 = pkin(5) * t439 + t480 * g(1);
t504 = -t367 + t472;
t346 = t573 * t473 + t456;
t300 = t473 * t346 + t475 * t347;
t408 = -t451 * pkin(4) - qJ(5) * t511;
t502 = -t408 * t479 - t427;
t396 = -t478 * t444 - t480 * t445;
t465 = t473 * t466;
t500 = t465 * t518;
t411 = (-qJD(4) * t528 - t525) * t473;
t497 = -t411 * pkin(4) - qJ(5) * t449 + qJDD(5) + t456;
t495 = t475 * t441;
t238 = -t479 * t285 + t477 * t286;
t239 = t477 * t285 + t479 * t286;
t299 = t475 * t346 - t473 * t347;
t399 = t434 * t546;
t400 = t473 * t509 - t544 * t546;
t492 = t480 * t399 + t478 * t400;
t491 = t478 * t399 - t480 * t400;
t397 = t480 * t444 - t478 * t445;
t490 = t411 * qJ(5) + t451 * t408 - 0.2e1 * t477 * t510 + t286;
t489 = -pkin(2) * t309 - pkin(3) * t417 - pkin(6) * t335;
t488 = -pkin(2) * t314 + pkin(3) * t484 - pkin(6) * t358;
t487 = -pkin(2) * t319 + pkin(3) * t374 - pkin(6) * t366;
t295 = (t370 + (t565 - t502) * qJD(1)) * t473 + t497;
t460 = t467 * t481;
t458 = t467 * qJDD(1);
t457 = t466 * qJDD(1);
t443 = 0.2e1 * t498;
t440 = t480 * qJDD(1) - t478 * t481;
t438 = t460 - t547;
t437 = t460 + t547;
t433 = t475 * t450;
t431 = t458 - t457;
t430 = t458 + t457;
t425 = (t467 * t473 + t465) * t481;
t418 = t449 - t519;
t416 = t448 - t519;
t414 = t449 - t448;
t413 = pkin(5) * t440 + t478 * g(1);
t393 = t476 * t425 + t473 * t523;
t390 = t474 * t425 - t473 * t521;
t385 = t476 * t431 - t474 * t438;
t384 = t476 * t430 - t474 * t437;
t383 = t474 * t431 + t476 * t438;
t382 = t474 * t430 + t476 * t437;
t381 = (-t469 - t470) * t514;
t372 = -t477 * t412 + t470 * t514;
t371 = -t479 * t411 + t469 * t514;
t369 = (t412 + t499) * t479;
t368 = (-t451 * t511 - t411) * t477;
t365 = t479 * t414 + t540;
t364 = -t477 * t416 + t534;
t362 = -t477 * t414 + t535;
t361 = -t479 * t416 - t539;
t356 = -t474 * t381 - t476 * t548;
t355 = t476 * t381 - t474 * t548;
t352 = t475 * t369 + t500;
t351 = t475 * t368 - t500;
t350 = -pkin(4) * t484 + qJ(5) * t409;
t345 = t473 * t369 - t495;
t344 = t473 * t368 + t495;
t341 = t478 * t390 - t480 * t393;
t339 = t480 * t390 + t478 * t393;
t338 = t478 * t382 - t480 * t384;
t337 = t480 * t382 + t478 * t384;
t336 = -t479 * t374 - t477 * t484;
t334 = t477 * t374 - t479 * t484;
t323 = pkin(1) * t471 + qJ(2) * t503;
t321 = t475 * t365 - t473 * t375;
t320 = t475 * t364 - t473 * t378;
t318 = t473 * t365 + t475 * t375;
t317 = t473 * t364 + t475 * t378;
t312 = t475 * t336 - t473 * t418;
t310 = t473 * t336 + t475 * t418;
t307 = t476 * t352 - t474 * t372;
t306 = t476 * t351 - t474 * t371;
t305 = t474 * t352 + t476 * t372;
t304 = t474 * t351 + t476 * t371;
t303 = t478 * t355 - t480 * t356;
t302 = t480 * t355 + t478 * t356;
t301 = -pkin(3) * t333 - pkin(4) * t378;
t297 = t541 - t555;
t296 = t536 - t556;
t293 = t476 * t321 - t474 * t362;
t292 = t476 * t320 - t474 * t361;
t290 = t474 * t321 + t476 * t362;
t289 = t474 * t320 + t476 * t361;
t284 = -qJ(2) * t390 - t474 * t347 + t475 * t543;
t283 = -qJ(2) * t392 - t474 * t346 + t473 * t543;
t282 = qJ(2) * t393 + t476 * t347 + t475 * t545;
t281 = -qJ(2) * t394 + t476 * t346 + t473 * t545;
t274 = -qJ(5) * t398 + t295;
t273 = -qJ(2) * t382 + t476 * t299;
t272 = qJ(2) * t384 + t474 * t299;
t271 = t476 * t300 + t545;
t270 = t474 * t300 - t543;
t269 = t476 * t312 - t474 * t334;
t267 = t474 * t312 + t476 * t334;
t265 = t285 - t563;
t262 = -pkin(4) * t374 + qJ(5) * t415 - t497 + (t502 * qJD(1) - t573) * t473;
t261 = t286 - t564;
t260 = -pkin(4) * t449 + t490;
t258 = t478 * t305 - t480 * t307;
t257 = t478 * t304 - t480 * t306;
t256 = t480 * t305 + t478 * t307;
t255 = t480 * t304 + t478 * t306;
t254 = -qJ(5) * t378 + t443 - t485;
t253 = t487 + t536;
t252 = -qJ(5) * t375 + (t417 - t449) * pkin(4) + t490;
t251 = -qJ(5) * t534 - t477 * t262 - t555;
t250 = t488 - t541;
t249 = -t563 + t443 + (-t410 + t450) * pkin(4) + t494;
t248 = t479 * t274 - t477 * t350 - t556;
t246 = t478 * t290 - t480 * t293;
t245 = t478 * t289 - t480 * t292;
t244 = t480 * t291 + t478 * t294;
t243 = t480 * t290 + t478 * t293;
t242 = t480 * t289 + t478 * t292;
t241 = pkin(5) * t244;
t240 = -t564 + (-t398 - t449) * pkin(4) + t490;
t236 = t480 * t279 + t478 * t280;
t235 = pkin(5) * t236;
t234 = -pkin(4) * t295 + qJ(5) * t260;
t233 = t478 * t270 - t480 * t271;
t232 = t480 * t270 + t478 * t271;
t231 = -t238 - t557;
t230 = t475 * t239 + t473 * t326;
t229 = t473 * t239 - t475 * t326;
t228 = t478 * t267 - t480 * t269;
t226 = t480 * t267 + t478 * t269;
t225 = t480 * t266 + t478 * t268;
t224 = pkin(5) * t225;
t223 = qJ(5) * t539 - t479 * t262 + t487;
t222 = -t473 * t265 + t475 * t297 - t549;
t221 = -t477 * t274 - t479 * t350 + t488;
t220 = t479 * t260 - t542;
t219 = t477 * t260 + t537;
t218 = -t473 * t261 + t475 * t296 - t550;
t217 = -qJ(2) * t270 - (pkin(2) * t474 - qJ(3) * t476) * t299;
t216 = -t239 + t489;
t215 = t475 * t231 + t333 * t562 - t551;
t214 = t475 * t220 + t473 * t295;
t213 = t473 * t220 - t475 * t295;
t212 = qJ(2) * t271 - (-pkin(2) * t476 - qJ(3) * t474 - pkin(1)) * t299;
t211 = -t477 * t252 + t479 * t254 - t557;
t210 = -t473 * t249 + t475 * t251 - t549;
t209 = -pkin(3) * t219 - pkin(4) * t259;
t208 = -t473 * t240 + t475 * t248 - t550;
t207 = t476 * t230 + t474 * t238;
t206 = t474 * t230 - t476 * t238;
t205 = -t479 * t252 - t477 * t254 + t489;
t204 = -pkin(2) * t229 + pkin(3) * t326 - pkin(6) * t239;
t203 = t476 * t222 - t474 * t253 - t552;
t202 = t475 * t211 - t473 * t301 - t551;
t201 = t476 * t218 - t474 * t250 - t553;
t200 = t474 * t222 + t476 * t253 + t506;
t199 = t474 * t218 + t476 * t250 + t507;
t198 = -qJ(3) * t229 + (-pkin(6) * t475 + t562) * t238;
t197 = -pkin(6) * t219 - qJ(5) * t537 - t477 * t234;
t196 = t476 * t214 + t474 * t219;
t195 = t474 * t214 - t476 * t219;
t194 = t476 * t210 - t474 * t223 - t552;
t193 = t476 * t215 - t474 * t216 - t554;
t192 = t476 * t208 - t474 * t221 - t553;
t191 = t474 * t210 + t476 * t223 + t506;
t190 = t474 * t208 + t476 * t221 + t507;
t189 = t474 * t215 + t476 * t216 + t508;
t188 = t478 * t206 - t480 * t207;
t187 = t480 * t206 + t478 * t207;
t186 = -pkin(2) * t213 + pkin(3) * t295 - pkin(6) * t220 + qJ(5) * t542 - t479 * t234;
t185 = t476 * t202 - t474 * t205 - t554;
t184 = t474 * t202 + t476 * t205 + t508;
t183 = t478 * t195 - t480 * t196;
t182 = t480 * t195 + t478 * t196;
t181 = -qJ(3) * t213 + t475 * t197 - t473 * t209;
t180 = -qJ(2) * t206 + t476 * t198 - t474 * t204;
t179 = -pkin(1) * t229 + qJ(2) * t207 + t474 * t198 + t476 * t204;
t178 = -qJ(2) * t195 + t476 * t181 - t474 * t186;
t177 = -pkin(1) * t213 + qJ(2) * t196 + t474 * t181 + t476 * t186;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t471, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t299, 0, 0, 0, 0, 0, 0, t319, t314, t309, t229, 0, 0, 0, 0, 0, 0, t319, t314, t309, t213; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t440, t439, 0, t396, 0, 0, 0, 0, 0, 0, -t567, t387, 0, t275, 0, 0, 0, 0, 0, 0, t340, t339, t337, t232, 0, 0, 0, 0, 0, 0, t244, t236, t225, t187, 0, 0, 0, 0, 0, 0, t244, t236, t225, t182; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t439, t440, 0, t397, 0, 0, 0, 0, 0, 0, -t387, -t567, 0, -t575, 0, 0, 0, 0, 0, 0, t342, t341, t338, t233, 0, 0, 0, 0, 0, 0, t247, t237, t227, t188, 0, 0, 0, 0, 0, 0, t247, t237, t227, t183; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t445, t444, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t435 - t379, -pkin(1) * t434 - t380, 0, -pkin(1) * t331, t457, 0.2e1 * t473 * t522, 0, t458, 0, 0, pkin(1) * t392 - qJ(3) * t426 + t475 * t504, pkin(1) * t390 + qJ(3) * t425 - t473 * t504, pkin(1) * t382 + pkin(2) * t437 + qJ(3) * t430 + t300, pkin(1) * t270 - pkin(2) * t367 + qJ(3) * t300, t345, t310, t317, t344, t318, t433, t475 * t265 + t473 * t297 + t515, t475 * t261 + t473 * t296 + t516, t473 * t231 - t333 * t561 + t517, pkin(1) * t206 + qJ(3) * t230 + (-pkin(2) + t496) * t238, t345, t310, t317, t344, t318, t433, t475 * t249 + t473 * t251 + t515, t475 * t240 + t473 * t248 + t516, t473 * t211 + t475 * t301 + t517, pkin(1) * t195 - pkin(2) * t219 + qJ(3) * t214 + t473 * t197 + t475 * t209; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t439, 0, t440, 0, t505, -t413, -t397, -pkin(5) * t397, 0, 0, -t387, 0, -t567, 0, t574, t572, t575, pkin(5) * t575 + qJ(2) * t538 + t480 * t323, t492, t480 * t383 + t478 * t385, t339, -t492, -t340, 0, -pkin(5) * t342 + t480 * t281 + t478 * t283, -pkin(5) * t341 + t480 * t282 + t478 * t284, -pkin(5) * t338 + t480 * t272 + t478 * t273, -pkin(5) * t233 + t480 * t212 + t478 * t217, t256, t226, t242, t255, t243, t302, t480 * t200 + t478 * t203 - t558, t480 * t199 + t478 * t201 - t559, t480 * t189 + t478 * t193 - t560, -pkin(5) * t188 + t480 * t179 + t478 * t180, t256, t226, t242, t255, t243, t302, t480 * t191 + t478 * t194 - t558, t480 * t190 + t478 * t192 - t559, t480 * t184 + t478 * t185 - t560, -pkin(5) * t183 + t480 * t177 + t478 * t178; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t440, 0, -t439, 0, t413, t505, t396, pkin(5) * t396, 0, 0, t567, 0, -t387, 0, -t572, t574, t275, pkin(5) * t275 - qJ(2) * t533 + t478 * t323, t491, t478 * t383 - t480 * t385, t341, -t491, -t342, 0, pkin(5) * t340 + t478 * t281 - t480 * t283, pkin(5) * t339 + t478 * t282 - t480 * t284, pkin(5) * t337 + t478 * t272 - t480 * t273, pkin(5) * t232 + t478 * t212 - t480 * t217, t258, t228, t245, t257, t246, t303, t478 * t200 - t480 * t203 + t241, t478 * t199 - t480 * t201 + t235, t478 * t189 - t480 * t193 + t224, pkin(5) * t187 + t478 * t179 - t480 * t180, t258, t228, t245, t257, t246, t303, t478 * t191 - t480 * t194 + t241, t478 * t190 - t480 * t192 + t235, t478 * t184 - t480 * t185 + t224, pkin(5) * t182 + t478 * t177 - t480 * t178;];
tauB_reg = t1;
