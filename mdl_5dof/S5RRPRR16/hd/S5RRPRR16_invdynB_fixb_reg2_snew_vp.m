% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPRR16
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d4,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:48
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPRR16_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR16_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR16_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR16_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR16_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR16_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:47:39
% EndTime: 2019-12-31 20:48:02
% DurationCPUTime: 18.48s
% Computational Cost: add. (63202->664), mult. (145039->1008), div. (0->0), fcn. (105009->10), ass. (0->492)
t716 = sin(pkin(5));
t717 = cos(pkin(5));
t708 = t717 * qJD(1) + qJD(2);
t704 = t708 ^ 2;
t714 = t716 ^ 2;
t726 = qJD(1) ^ 2;
t811 = t714 * t726;
t720 = sin(qJ(2));
t852 = t720 ^ 2;
t705 = t852 * t811;
t657 = -t705 - t704;
t724 = cos(qJ(2));
t707 = qJDD(1) * t717 + qJDD(2);
t808 = t724 * t726;
t812 = t714 * t720;
t784 = t808 * t812;
t675 = t707 - t784;
t818 = t675 * t720;
t754 = t657 * t724 - t818;
t804 = qJD(1) * t724;
t676 = (qJD(2) * t804 + qJDD(1) * t720) * t716;
t792 = t716 * t804;
t686 = t708 * t792;
t856 = t686 + t676;
t577 = -t716 * t856 + t717 * t754;
t817 = t675 * t724;
t620 = t657 * t720 + t817;
t721 = sin(qJ(1));
t725 = cos(qJ(1));
t525 = t577 * t725 - t620 * t721;
t890 = pkin(6) * t525;
t526 = t577 * t721 + t620 * t725;
t889 = pkin(6) * t526;
t805 = qJD(1) * t720;
t793 = t716 * t805;
t701 = qJD(2) * t793;
t794 = t708 * t805;
t801 = qJDD(1) * t724;
t648 = -t701 + (-t794 + t801) * t716;
t715 = t724 ^ 2;
t706 = t715 * t811;
t681 = -t706 - t704;
t674 = t707 + t784;
t819 = t674 * t724;
t752 = t681 * t720 + t819;
t591 = t648 * t716 + t717 * t752;
t820 = t674 * t720;
t633 = -t681 * t724 + t820;
t536 = t591 * t725 - t633 * t721;
t888 = pkin(6) * t536;
t539 = t591 * t721 + t633 * t725;
t887 = pkin(6) * t539;
t585 = -t648 * t717 + t716 * t752;
t886 = pkin(7) * (t585 * t716 + t591 * t717);
t832 = t856 * t717;
t575 = t716 * t754 + t832;
t885 = pkin(7) * (t575 * t716 + t577 * t717);
t884 = pkin(1) * t575;
t883 = pkin(1) * t577;
t882 = pkin(1) * t585;
t881 = pkin(1) * t591;
t646 = -t686 + t676;
t679 = -t705 + t704;
t753 = t679 * t724 + t820;
t587 = -t646 * t716 + t717 * t753;
t628 = -t679 * t720 + t819;
t880 = t587 * t721 - t628 * t725;
t879 = t587 * t725 + t628 * t721;
t647 = -t701 + (t794 + t801) * t716;
t680 = t706 - t704;
t751 = t680 * t720 + t817;
t589 = -t647 * t716 + t717 * t751;
t631 = -t680 * t724 + t818;
t878 = t589 * t721 + t631 * t725;
t877 = t589 * t725 - t631 * t721;
t874 = pkin(7) * t620;
t873 = pkin(7) * t633;
t718 = sin(qJ(5));
t719 = sin(qJ(4));
t723 = cos(qJ(4));
t665 = t708 * t723 - t719 * t792;
t696 = qJD(4) + t793;
t722 = cos(qJ(5));
t637 = t665 * t718 - t722 * t696;
t639 = t665 * t722 + t696 * t718;
t594 = t639 * t637;
t677 = t716 * t801 - t701;
t785 = t723 * t677 + t707 * t719;
t611 = -qJD(4) * t665 - t785;
t736 = qJDD(5) - t611;
t858 = -t594 + t736;
t864 = t718 * t858;
t663 = t708 * t719 + t723 * t792;
t626 = t665 * t663;
t668 = qJDD(4) + t676;
t857 = -t626 + t668;
t863 = t719 * t857;
t862 = t722 * t858;
t861 = t723 * t857;
t860 = qJ(3) * t856;
t847 = pkin(2) * t724;
t781 = -qJ(3) * t720 - t847;
t806 = qJD(1) * t716;
t672 = t781 * t806;
t842 = g(3) * t724;
t859 = t716 * (t672 * t805 + t842);
t750 = -t677 * t719 + t707 * t723;
t612 = -qJD(4) * t663 + t750;
t546 = -t637 * qJD(5) + t722 * t612 + t718 * t668;
t658 = qJD(5) + t663;
t608 = t658 * t637;
t503 = -t608 + t546;
t649 = t696 * t663;
t581 = t612 - t649;
t787 = t612 * t718 - t722 * t668;
t500 = (qJD(5) - t658) * t639 + t787;
t855 = t647 * t717 + t716 * t751;
t854 = t646 * t717 + t716 * t753;
t635 = t637 ^ 2;
t636 = t639 ^ 2;
t656 = t658 ^ 2;
t661 = t663 ^ 2;
t662 = t665 ^ 2;
t853 = t696 ^ 2;
t851 = -pkin(2) - pkin(8);
t850 = pkin(2) * t677;
t849 = pkin(2) * t707;
t848 = pkin(2) * t720;
t683 = -t705 - t706;
t755 = -t646 * t724 + t647 * t720;
t567 = -t683 * t716 + t717 * t755;
t597 = t646 * t720 + t647 * t724;
t511 = t567 * t725 + t597 * t721;
t846 = pkin(6) * t511;
t845 = pkin(7) * t716;
t844 = pkin(7) * t717;
t843 = g(3) * t717;
t699 = g(1) * t721 - t725 * g(2);
t670 = qJDD(1) * pkin(1) + t726 * t845 + t699;
t673 = pkin(3) * t793 - pkin(8) * t708;
t791 = qJD(3) * t805;
t697 = -0.2e1 * t716 * t791;
t783 = t708 * t793;
t684 = pkin(2) * t783;
t788 = -t684 + t843;
t813 = t708 * t724;
t518 = -pkin(3) * t706 - qJ(3) * t676 + t697 + t851 * t677 + (-t670 + (-qJ(3) * t813 - t673 * t720) * qJD(1)) * t716 - t788;
t700 = g(1) * t725 + g(2) * t721;
t671 = -pkin(1) * t726 + qJDD(1) * t845 - t700;
t821 = t670 * t717;
t786 = t671 * t720 - t724 * t821;
t778 = qJDD(3) + t786;
t731 = qJ(3) * t704 - t778 + t849;
t728 = pkin(3) * t676 - t674 * pkin(8) + (t842 + (-pkin(3) * t813 + t672 * t720) * qJD(1)) * t716 - t731;
t458 = t518 * t719 - t723 * t728;
t624 = pkin(4) * t663 - pkin(9) * t665;
t433 = -t668 * pkin(4) - t853 * pkin(9) + t624 * t665 + t458;
t841 = t433 * t718;
t840 = t433 * t722;
t619 = t671 * t724 + (-g(3) * t716 + t821) * t720;
t552 = -t704 * pkin(2) + t707 * qJ(3) + 0.2e1 * qJD(3) * t708 + t672 * t792 + t619;
t517 = t677 * pkin(3) - pkin(8) * t706 + t673 * t708 + t552;
t839 = t517 * t719;
t838 = t517 * t723;
t534 = t594 + t736;
t837 = t534 * t718;
t836 = t534 * t722;
t606 = t626 + t668;
t835 = t606 * t719;
t834 = t606 * t723;
t825 = t648 * t720;
t824 = t648 * t724;
t823 = t658 * t718;
t822 = t658 * t722;
t816 = t696 * t719;
t815 = t696 * t723;
t814 = t707 * t716;
t651 = t670 * t716 + t843;
t810 = t720 * t651;
t809 = t724 * t651;
t459 = t723 * t518 + t719 * t728;
t434 = -pkin(4) * t853 + pkin(9) * t668 - t624 * t663 + t459;
t452 = -t581 * pkin(9) + (t665 * t696 - t611) * pkin(4) + t517;
t391 = t722 * t434 + t718 * t452;
t807 = pkin(1) * t567 + t597 * t845;
t803 = qJD(4) + t696;
t800 = t719 * t594;
t799 = t723 * t594;
t798 = t720 * t626;
t797 = t724 * t626;
t796 = pkin(4) * t723 + pkin(3);
t795 = t708 * t806;
t565 = t683 * t717 + t716 * t755;
t790 = -pkin(1) * t565 + t597 * t844;
t789 = pkin(4) * t719 + qJ(3);
t390 = t434 * t718 - t722 * t452;
t365 = t390 * t718 + t722 * t391;
t654 = -t699 * t721 - t725 * t700;
t692 = qJDD(1) * t725 - t721 * t726;
t782 = -pkin(6) * t692 - g(3) * t721;
t780 = -t810 - t874;
t779 = t809 - t873;
t353 = t365 * t719 - t433 * t723;
t364 = -t390 * t722 + t391 * t718;
t777 = -t353 * t724 + t364 * t720;
t400 = -t458 * t723 + t459 * t719;
t776 = -t400 * t724 + t517 * t720;
t504 = -t608 - t546;
t444 = -t500 * t722 - t504 * t718;
t547 = t635 + t636;
t416 = t444 * t719 + t547 * t723;
t442 = -t500 * t718 + t504 * t722;
t775 = -t416 * t724 + t442 * t720;
t501 = (-qJD(5) - t658) * t639 - t787;
t443 = t501 * t722 - t503 * t718;
t593 = -t636 + t635;
t423 = -t443 * t719 - t593 * t723;
t441 = t501 * t718 + t503 * t722;
t774 = t423 * t724 + t441 * t720;
t558 = -t656 - t635;
t476 = t558 * t722 - t864;
t429 = t476 * t719 + t501 * t723;
t475 = t558 * t718 + t862;
t773 = -t429 * t724 + t475 * t720;
t584 = -t636 - t656;
t480 = -t584 * t718 - t836;
t435 = t480 * t719 - t503 * t723;
t479 = t584 * t722 - t837;
t772 = -t435 * t724 + t479 * t720;
t604 = -t636 + t656;
t490 = -t604 * t718 + t862;
t437 = -t490 * t719 - t504 * t723;
t488 = t604 * t722 + t864;
t771 = t437 * t724 + t488 * t720;
t603 = t635 - t656;
t491 = t603 * t722 - t837;
t438 = -t491 * t719 - t500 * t723;
t489 = t603 * t718 + t836;
t770 = t438 * t724 + t489 * t720;
t401 = t458 * t719 + t459 * t723;
t545 = -qJD(5) * t639 - t787;
t497 = -t545 * t718 + t637 * t822;
t465 = -t497 * t719 - t799;
t496 = t545 * t722 + t637 * t823;
t769 = t465 * t724 + t496 * t720;
t499 = t546 * t722 - t639 * t823;
t466 = -t499 * t719 + t799;
t498 = t546 * t718 + t639 * t822;
t768 = t466 * t724 + t498 * t720;
t541 = (-t637 * t722 + t639 * t718) * t658;
t494 = -t541 * t719 + t723 * t736;
t540 = (-t637 * t718 - t639 * t722) * t658;
t767 = t494 * t724 + t540 * t720;
t578 = t803 * t665 + t785;
t506 = t578 * t719 - t581 * t723;
t625 = t662 - t661;
t766 = t506 * t724 + t625 * t720;
t582 = t612 + t649;
t735 = (-qJD(4) + t696) * t665 - t785;
t507 = -t582 * t723 + t719 * t735;
t602 = -t661 - t662;
t765 = -t507 * t724 + t602 * t720;
t617 = -t853 - t661;
t542 = t617 * t719 + t861;
t764 = -t542 * t724 + t578 * t720;
t544 = -pkin(2) * t683 + t552;
t730 = t778 + t859;
t548 = -t849 + (-t683 - t704) * qJ(3) + t730;
t763 = t544 * t724 + t548 * t720;
t627 = -t662 - t853;
t550 = t627 * t723 - t835;
t583 = -t803 * t663 + t750;
t762 = -t550 * t724 + t583 * t720;
t560 = t731 - t859;
t761 = t552 * t720 + t560 * t724;
t643 = -t662 + t853;
t554 = -t643 * t723 - t863;
t760 = t554 * t724 + t582 * t720;
t642 = t661 - t853;
t555 = -t642 * t719 - t834;
t759 = t555 * t724 + t720 * t735;
t599 = (t663 * t719 + t665 * t723) * t696;
t758 = t599 * t724 + t668 * t720;
t618 = t716 * t842 + t786;
t757 = -t618 * t724 + t619 * t720;
t549 = t618 * t720 + t619 * t724;
t756 = t724 * t856 + t825;
t653 = t699 * t725 - t700 * t721;
t749 = qJD(1) * t708 - t717 * t726;
t570 = -t611 * t723 - t663 * t816;
t747 = t570 * t724 - t798;
t572 = -t612 * t719 - t665 * t815;
t746 = t572 * t724 + t798;
t745 = (-t565 * t716 - t567 * t717) * pkin(7);
t354 = t365 * t723 + t433 * t719;
t329 = t851 * t354 + (pkin(9) * t719 + t796) * t364;
t333 = pkin(3) * t353 - pkin(4) * t433 + pkin(9) * t365 - qJ(3) * t354;
t339 = t353 * t720 + t364 * t724;
t744 = pkin(7) * t339 + t329 * t724 + t333 * t720;
t355 = -pkin(9) * t442 - t364;
t417 = t444 * t723 - t547 * t719;
t338 = -t355 * t719 + t851 * t417 + t796 * t442;
t341 = pkin(3) * t416 + pkin(4) * t547 + pkin(9) * t444 - qJ(3) * t417 + t365;
t386 = t416 * t720 + t442 * t724;
t743 = pkin(7) * t386 + t338 * t724 + t341 * t720;
t382 = -pkin(4) * t475 + t390;
t397 = -pkin(9) * t475 + t841;
t430 = t476 * t723 - t501 * t719;
t343 = pkin(3) * t475 - t382 * t723 - t397 * t719 + t851 * t430;
t361 = pkin(3) * t429 + pkin(4) * t501 + pkin(9) * t476 - qJ(3) * t430 - t840;
t396 = t429 * t720 + t475 * t724;
t742 = pkin(7) * t396 + t343 * t724 + t361 * t720;
t383 = -pkin(4) * t479 + t391;
t399 = -pkin(9) * t479 + t840;
t436 = t480 * t723 + t503 * t719;
t345 = pkin(3) * t479 - t383 * t723 - t399 * t719 + t851 * t436;
t363 = pkin(3) * t435 - pkin(4) * t503 + pkin(9) * t480 - qJ(3) * t436 + t841;
t398 = t435 * t720 + t479 * t724;
t741 = pkin(7) * t398 + t345 * t724 + t363 * t720;
t369 = pkin(3) * t517 + t851 * t401;
t373 = pkin(3) * t400 - qJ(3) * t401;
t388 = t400 * t720 + t517 * t724;
t740 = pkin(7) * t388 + t369 * t724 + t373 * t720;
t509 = t582 * t719 + t723 * t735;
t379 = pkin(3) * t602 + t851 * t509 - t401;
t446 = pkin(3) * t507 - qJ(3) * t509;
t472 = t507 * t720 + t602 * t724;
t739 = pkin(7) * t472 + t379 * t724 + t446 * t720;
t543 = t617 * t723 - t863;
t406 = pkin(3) * t542 - qJ(3) * t543 - t458;
t414 = pkin(3) * t578 + t851 * t543 + t838;
t483 = t542 * t720 + t578 * t724;
t738 = pkin(7) * t483 + t406 * t720 + t414 * t724;
t551 = -t627 * t719 - t834;
t407 = pkin(3) * t550 - qJ(3) * t551 - t459;
t420 = pkin(3) * t583 + t851 * t551 - t839;
t486 = t550 * t720 + t583 * t724;
t737 = pkin(7) * t486 + t407 * t720 + t420 * t724;
t530 = t850 + (t670 + 0.2e1 * t791) * t716 + 0.2e1 * t860 + t788;
t734 = t530 * t720 + t847 * t856 + t874;
t729 = -t651 + t684 + t697 - t860;
t531 = (-t648 - t677) * pkin(2) + t729;
t733 = -qJ(3) * t825 + t531 * t724 + t873;
t484 = t552 * t724 - t560 * t720;
t553 = t729 - t850;
t732 = pkin(7) * t484 + t781 * t553;
t713 = t716 * t714;
t691 = qJDD(1) * t721 + t725 * t726;
t690 = t717 * t707;
t682 = t705 - t706;
t678 = -pkin(6) * t691 + g(3) * t725;
t650 = (t715 + t852) * t795;
t641 = t676 * t724 - t852 * t795;
t640 = -t677 * t720 - t715 * t795;
t623 = t650 * t725 + t721 * t814;
t622 = t650 * t721 - t725 * t814;
t616 = (t713 * t808 + t832) * t720;
t615 = (t714 * t724 * t749 + t676 * t716) * t720;
t614 = (t677 * t716 - t749 * t812) * t724;
t613 = (-t713 * t720 * t726 + (t677 - t783) * t717) * t724;
t601 = -pkin(2) * t646 + qJ(3) * t647;
t600 = (-t663 * t723 + t665 * t719) * t696;
t598 = -t720 * t856 + t824;
t573 = t612 * t723 - t665 * t816;
t571 = -t611 * t719 + t663 * t815;
t569 = -t599 * t720 + t668 * t724;
t568 = -t682 * t716 + t717 * t756;
t566 = t682 * t717 + t716 * t756;
t564 = -t616 * t721 + t641 * t725;
t563 = -t613 * t721 + t640 * t725;
t562 = t616 * t725 + t641 * t721;
t561 = t613 * t725 + t640 * t721;
t557 = t642 * t723 - t835;
t556 = -t643 * t719 + t861;
t532 = (-t681 - t704) * qJ(3) + (-t674 - t707) * pkin(2) + t730;
t529 = -t572 * t720 + t797;
t528 = -t570 * t720 - t797;
t523 = t651 * t716 + t717 * t757;
t522 = -t651 * t717 + t716 * t757;
t521 = -pkin(2) * t657 + qJ(3) * t675 + t552;
t515 = -t600 * t716 + t717 * t758;
t514 = -t568 * t721 + t598 * t725;
t513 = -t567 * t721 + t597 * t725;
t512 = t568 * t725 + t598 * t721;
t510 = pkin(6) * t513;
t508 = -t578 * t723 - t581 * t719;
t495 = t541 * t723 + t719 * t736;
t493 = -t554 * t720 + t582 * t724;
t492 = -t555 * t720 + t724 * t735;
t487 = -t810 - t886;
t485 = pkin(2) * t560 + qJ(3) * t552;
t482 = -t809 - t885;
t481 = t618 * t716 + t779 * t717 - t882;
t478 = -t506 * t720 + t625 * t724;
t477 = t619 * t716 + t780 * t717 - t884;
t474 = -t573 * t716 + t717 * t746;
t473 = -t571 * t716 + t717 * t747;
t471 = -pkin(1) * t522 + t549 * t844;
t470 = -t523 * t721 + t549 * t725;
t469 = t523 * t725 + t549 * t721;
t468 = t499 * t723 + t800;
t467 = t497 * t723 - t800;
t464 = t549 * t717 + t790;
t463 = -t556 * t716 + t717 * t760;
t462 = -t557 * t716 + t717 * t759;
t461 = (-t522 * t716 - t523 * t717) * pkin(7);
t460 = t745 - t757;
t457 = -t553 * t716 + t717 * t761;
t456 = t553 * t717 + t716 * t761;
t455 = -t551 * t716 + t717 * t762;
t454 = t551 * t717 + t716 * t762;
t453 = -t494 * t720 + t540 * t724;
t449 = -t543 * t716 + t717 * t764;
t448 = t543 * t717 + t716 * t764;
t447 = -qJ(3) * t824 - t531 * t720 + t886;
t445 = t530 * t724 - t856 * t848 + t885;
t440 = t491 * t723 - t500 * t719;
t439 = t490 * t723 - t504 * t719;
t431 = -t508 * t716 + t717 * t766;
t428 = -t509 * t716 + t717 * t765;
t427 = t509 * t717 + t716 * t765;
t426 = -t544 * t720 + t548 * t724 + t745;
t425 = -t532 * t716 + t717 * t733 + t882;
t424 = t443 * t723 - t593 * t719;
t422 = -t466 * t720 + t498 * t724;
t421 = -t465 * t720 + t496 * t724;
t419 = qJ(3) * t583 + t851 * t550 + t838;
t418 = -t521 * t716 + t717 * t734 + t884;
t415 = -t601 * t716 + t717 * t763 + t790;
t413 = qJ(3) * t578 + t851 * t542 + t839;
t412 = -t716 * t495 + t717 * t767;
t411 = -t455 * t721 + t486 * t725;
t410 = t455 * t725 + t486 * t721;
t409 = -t457 * t721 + t484 * t725;
t408 = t457 * t725 + t484 * t721;
t405 = -t449 * t721 + t483 * t725;
t404 = t449 * t725 + t483 * t721;
t403 = -t438 * t720 + t489 * t724;
t402 = -t437 * t720 + t488 * t724;
t395 = -t428 * t721 + t472 * t725;
t394 = t428 * t725 + t472 * t721;
t393 = -t716 * t468 + t717 * t768;
t392 = -t716 * t467 + t717 * t769;
t387 = -t423 * t720 + t441 * t724;
t385 = (-qJ(3) * t724 + t848) * t553 + (-t456 * t716 - t457 * t717) * pkin(7);
t384 = -pkin(1) * t456 - t485 * t716 + t717 * t732;
t381 = -t716 * t440 + t770 * t717;
t380 = -t716 * t439 + t771 * t717;
t378 = qJ(3) * t602 + t851 * t507 - t400;
t377 = -t716 * t436 + t772 * t717;
t376 = t717 * t436 + t772 * t716;
t375 = -t716 * t430 + t773 * t717;
t374 = t717 * t430 + t773 * t716;
t372 = -t716 * t424 + t774 * t717;
t371 = -t716 * t417 + t775 * t717;
t370 = t717 * t417 + t775 * t716;
t368 = qJ(3) * t517 + t851 * t400;
t367 = -t716 * t401 + t776 * t717;
t366 = t717 * t401 + t776 * t716;
t362 = t407 * t724 - t420 * t720 + (-t454 * t716 - t455 * t717) * pkin(7);
t360 = -t377 * t721 + t398 * t725;
t359 = t377 * t725 + t398 * t721;
t358 = t406 * t724 - t414 * t720 + (-t448 * t716 - t449 * t717) * pkin(7);
t357 = -t375 * t721 + t396 * t725;
t356 = t375 * t725 + t396 * t721;
t352 = -pkin(1) * t454 - t419 * t716 + t717 * t737;
t351 = -pkin(1) * t448 - t413 * t716 + t717 * t738;
t350 = -t371 * t721 + t386 * t725;
t349 = t371 * t725 + t386 * t721;
t348 = -t367 * t721 + t388 * t725;
t347 = t367 * t725 + t388 * t721;
t346 = -t379 * t720 + t446 * t724 + (-t427 * t716 - t428 * t717) * pkin(7);
t344 = qJ(3) * t479 - t383 * t719 + t399 * t723 + t851 * t435;
t342 = qJ(3) * t475 - t382 * t719 + t397 * t723 + t851 * t429;
t340 = -pkin(1) * t427 - t378 * t716 + t717 * t739;
t337 = t355 * t723 + t851 * t416 + t789 * t442;
t336 = -t716 * t354 + t777 * t717;
t335 = t717 * t354 + t777 * t716;
t334 = -t369 * t720 + t373 * t724 + (-t366 * t716 - t367 * t717) * pkin(7);
t332 = -pkin(1) * t366 - t368 * t716 + t717 * t740;
t331 = -t345 * t720 + t363 * t724 + (-t376 * t716 - t377 * t717) * pkin(7);
t330 = -t343 * t720 + t361 * t724 + (-t374 * t716 - t375 * t717) * pkin(7);
t328 = t851 * t353 + (-pkin(9) * t723 + t789) * t364;
t327 = -pkin(1) * t376 - t344 * t716 + t717 * t741;
t326 = -t336 * t721 + t339 * t725;
t325 = t336 * t725 + t339 * t721;
t324 = -pkin(1) * t374 - t342 * t716 + t717 * t742;
t323 = -t338 * t720 + t341 * t724 + (-t370 * t716 - t371 * t717) * pkin(7);
t322 = -pkin(1) * t370 - t337 * t716 + t717 * t743;
t321 = -t329 * t720 + t333 * t724 + (-t335 * t716 - t336 * t717) * pkin(7);
t320 = -pkin(1) * t335 - t328 * t716 + t717 * t744;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t691, -t692, 0, t654, 0, 0, 0, 0, 0, 0, -t539, -t526, t513, t470, 0, 0, 0, 0, 0, 0, t513, t539, t526, t409, 0, 0, 0, 0, 0, 0, t405, t411, t395, t348, 0, 0, 0, 0, 0, 0, t357, t360, t350, t326; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t692, -t691, 0, t653, 0, 0, 0, 0, 0, 0, t536, t525, t511, t469, 0, 0, 0, 0, 0, 0, t511, -t536, -t525, t408, 0, 0, 0, 0, 0, 0, t404, t410, t394, t347, 0, 0, 0, 0, 0, 0, t356, t359, t349, t325; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t585, t575, t565, t522, 0, 0, 0, 0, 0, 0, t565, -t585, -t575, t456, 0, 0, 0, 0, 0, 0, t448, t454, t427, t366, 0, 0, 0, 0, 0, 0, t374, t376, t370, t335; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t692, 0, -t691, 0, t782, -t678, -t653, -pkin(6) * t653, t564, t514, -t880, t563, -t878, t623, -t481 * t721 + t487 * t725 - t888, -t477 * t721 + t482 * t725 - t890, t460 * t725 - t464 * t721 - t846, -pkin(6) * t469 + t461 * t725 - t471 * t721, t623, t880, t878, t564, t514, t563, -t415 * t721 + t426 * t725 - t846, -t425 * t721 + t447 * t725 + t888, -t418 * t721 + t445 * t725 + t890, -pkin(6) * t408 - t384 * t721 + t385 * t725, -t474 * t721 + t529 * t725, -t431 * t721 + t478 * t725, -t463 * t721 + t493 * t725, -t473 * t721 + t528 * t725, -t462 * t721 + t492 * t725, -t515 * t721 + t569 * t725, -pkin(6) * t404 - t351 * t721 + t358 * t725, -pkin(6) * t410 - t352 * t721 + t362 * t725, -pkin(6) * t394 - t340 * t721 + t346 * t725, -pkin(6) * t347 - t332 * t721 + t334 * t725, -t393 * t721 + t422 * t725, -t372 * t721 + t387 * t725, -t380 * t721 + t402 * t725, -t392 * t721 + t421 * t725, -t381 * t721 + t403 * t725, -t412 * t721 + t453 * t725, -pkin(6) * t356 - t324 * t721 + t330 * t725, -pkin(6) * t359 - t327 * t721 + t331 * t725, -pkin(6) * t349 - t322 * t721 + t323 * t725, -pkin(6) * t325 - t320 * t721 + t321 * t725; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t691, 0, t692, 0, t678, t782, t654, pkin(6) * t654, t562, t512, t879, t561, t877, t622, t481 * t725 + t487 * t721 - t887, t477 * t725 + t482 * t721 - t889, t460 * t721 + t464 * t725 + t510, pkin(6) * t470 + t461 * t721 + t471 * t725, t622, -t879, -t877, t562, t512, t561, t415 * t725 + t426 * t721 + t510, t425 * t725 + t447 * t721 + t887, t418 * t725 + t445 * t721 + t889, pkin(6) * t409 + t384 * t725 + t385 * t721, t474 * t725 + t529 * t721, t431 * t725 + t478 * t721, t463 * t725 + t493 * t721, t473 * t725 + t528 * t721, t462 * t725 + t492 * t721, t515 * t725 + t569 * t721, pkin(6) * t405 + t351 * t725 + t358 * t721, pkin(6) * t411 + t352 * t725 + t362 * t721, pkin(6) * t395 + t340 * t725 + t346 * t721, pkin(6) * t348 + t332 * t725 + t334 * t721, t393 * t725 + t422 * t721, t372 * t725 + t387 * t721, t380 * t725 + t402 * t721, t392 * t725 + t421 * t721, t381 * t725 + t403 * t721, t412 * t725 + t453 * t721, pkin(6) * t357 + t324 * t725 + t330 * t721, pkin(6) * t360 + t327 * t725 + t331 * t721, pkin(6) * t350 + t322 * t725 + t323 * t721, pkin(6) * t326 + t320 * t725 + t321 * t721; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t699, t700, 0, 0, t615, t566, t854, t614, t855, t690, -t618 * t717 + t779 * t716 + t881, -t619 * t717 + t780 * t716 + t883, t549 * t716 + t807, pkin(1) * t523 + t549 * t845, t690, -t854, -t855, t615, t566, t614, t601 * t717 + t716 * t763 + t807, t532 * t717 + t716 * t733 - t881, t521 * t717 + t716 * t734 - t883, pkin(1) * t457 + t485 * t717 + t716 * t732, t573 * t717 + t716 * t746, t508 * t717 + t716 * t766, t556 * t717 + t716 * t760, t571 * t717 + t716 * t747, t557 * t717 + t716 * t759, t600 * t717 + t716 * t758, pkin(1) * t449 + t413 * t717 + t716 * t738, pkin(1) * t455 + t419 * t717 + t716 * t737, pkin(1) * t428 + t378 * t717 + t716 * t739, pkin(1) * t367 + t368 * t717 + t716 * t740, t717 * t468 + t716 * t768, t717 * t424 + t716 * t774, t717 * t439 + t716 * t771, t717 * t467 + t716 * t769, t717 * t440 + t716 * t770, t495 * t717 + t716 * t767, pkin(1) * t375 + t342 * t717 + t716 * t742, pkin(1) * t377 + t344 * t717 + t716 * t741, pkin(1) * t371 + t337 * t717 + t716 * t743, pkin(1) * t336 + t328 * t717 + t716 * t744;];
tauB_reg = t1;
