% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S5RRPRR16
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d4,d5]';
% 
% Output:
% tau_reg [5x(5*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:48
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S5RRPRR16_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR16_invdynJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR16_invdynJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR16_invdynJ_fixb_reg2_slag_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR16_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR16_invdynJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:47:32
% EndTime: 2019-12-31 20:47:48
% DurationCPUTime: 7.72s
% Computational Cost: add. (7633->625), mult. (18869->817), div. (0->0), fcn. (13959->10), ass. (0->302)
t203 = sin(pkin(5));
t207 = sin(qJ(2));
t324 = qJD(1) * qJD(2);
t303 = t207 * t324;
t284 = t203 * t303;
t211 = cos(qJ(2));
t321 = qJDD(1) * t211;
t404 = -t203 * t321 + t284;
t204 = cos(pkin(5));
t385 = pkin(1) * t211;
t320 = t204 * t385;
t179 = qJD(1) * t320;
t392 = qJD(3) - t179;
t323 = qJDD(1) * t204;
t182 = qJDD(2) + t323;
t165 = t182 * qJ(3);
t338 = qJD(1) * t204;
t184 = qJD(2) + t338;
t166 = t184 * qJD(3);
t318 = pkin(1) * qJD(2) * t204;
t289 = qJD(1) * t318;
t317 = pkin(1) * t323;
t287 = t404 * pkin(7) - t207 * t317 - t211 * t289;
t52 = -t165 - t166 + t287;
t35 = -t404 * pkin(3) - t52;
t206 = sin(qJ(4));
t300 = t206 * t321;
t210 = cos(qJ(4));
t330 = qJD(4) * t211;
t306 = t210 * t330;
t335 = qJD(2) * t207;
t307 = t206 * t335;
t332 = qJD(4) * t206;
t345 = t210 * t182;
t50 = t184 * t332 - t345 + (t300 + (t306 - t307) * qJD(1)) * t203;
t336 = qJD(1) * t211;
t310 = t203 * t336;
t285 = t206 * t310;
t51 = -qJD(4) * t285 + t206 * t182 + (qJD(4) * t184 - t404) * t210;
t10 = pkin(4) * t51 + pkin(9) * t50 + t35;
t205 = sin(qJ(5));
t209 = cos(qJ(5));
t337 = qJD(1) * t207;
t311 = t203 * t337;
t269 = qJD(4) + t311;
t213 = -pkin(2) - pkin(8);
t387 = pkin(3) + pkin(7);
t64 = t213 * t184 + t387 * t311 + t392;
t299 = -qJ(3) * t207 - pkin(1);
t234 = t213 * t211 + t299;
t339 = qJD(1) * t203;
t75 = t234 * t339;
t29 = t206 * t64 + t210 * t75;
t26 = pkin(9) * t269 + t29;
t356 = t184 * t206;
t117 = t210 * t310 + t356;
t119 = t184 * t210 - t285;
t386 = pkin(1) * t207;
t195 = t204 * t386;
t352 = t203 * t211;
t342 = pkin(7) * t352 + t195;
t130 = t342 * qJD(1);
t102 = pkin(3) * t310 + t130;
t167 = t184 * qJ(3);
t72 = t167 + t102;
t30 = pkin(4) * t117 - pkin(9) * t119 + t72;
t266 = t205 * t26 - t209 * t30;
t302 = t211 * t324;
t322 = qJDD(1) * t207;
t235 = t302 + t322;
t227 = t235 * t203;
t221 = qJDD(4) + t227;
t354 = t203 * t207;
t186 = pkin(7) * t354;
t69 = -t203 * pkin(7) * t302 - qJDD(1) * t186 - t207 * t289 + t211 * t317;
t263 = qJDD(3) - t69;
t33 = pkin(3) * t227 + t213 * t182 + t263;
t331 = qJD(4) * t210;
t160 = pkin(2) * t284;
t361 = qJ(3) * t211;
t270 = pkin(8) * t207 - t361;
t333 = qJD(3) * t207;
t222 = qJD(2) * t270 - t333;
t40 = t160 + (qJD(1) * t222 + qJDD(1) * t234) * t203;
t251 = -t206 * t33 - t210 * t40 - t64 * t331 + t75 * t332;
t5 = pkin(9) * t221 - t251;
t1 = -t266 * qJD(5) + t205 * t10 + t209 * t5;
t111 = qJD(5) + t117;
t408 = t266 * t111 + t1;
t281 = pkin(4) * t210 + pkin(9) * t206;
t407 = qJD(4) * t281 - (-t281 - t387) * t311 + t392;
t181 = pkin(2) * t311;
t100 = t270 * t339 + t181;
t48 = t210 * t100 + t206 * t102;
t406 = -pkin(9) * t310 + t213 * t331 - t48;
t28 = -t206 * t75 + t210 * t64;
t405 = -t28 * t269 - t251;
t403 = t72 * qJD(4) + t213 * qJDD(4) + t203 * (t213 * t235 + t72 * t337);
t319 = g(3) * t354;
t208 = sin(qJ(1));
t346 = t208 * t211;
t212 = cos(qJ(1));
t347 = t207 * t212;
t141 = t204 * t347 + t346;
t344 = t211 * t212;
t349 = t207 * t208;
t143 = -t204 * t349 + t344;
t394 = -g(1) * t143 - g(2) * t141;
t228 = -t394 + t319;
t393 = qJD(4) * t269;
t402 = -t213 * t393 - t228 + t35;
t200 = t203 ^ 2;
t401 = 0.2e1 * t200;
t12 = t205 * t30 + t209 * t26;
t2 = -qJD(5) * t12 + t209 * t10 - t205 * t5;
t400 = -t12 * t111 - t2;
t246 = t209 * t269;
t65 = t119 * t205 - t246;
t399 = t269 * t65;
t396 = t119 * t269;
t398 = -t51 + t396;
t397 = t117 * t269;
t140 = -t204 * t344 + t349;
t142 = t204 * t346 + t347;
t395 = g(1) * t142 + g(2) * t140 - g(3) * t352;
t67 = t209 * t119 + t205 * t269;
t360 = qJD(5) * t67;
t24 = -t205 * t50 - t209 * t221 + t360;
t132 = t342 * qJD(2);
t259 = -pkin(2) * t211 + t299;
t105 = t259 * t339;
t391 = t105 * t311 + qJDD(3);
t297 = t206 * t40 - t210 * t33;
t8 = -qJD(4) * t29 - t297;
t351 = t203 * t212;
t253 = -t140 * t206 + t210 * t351;
t390 = t141 * t209 + t205 * t253;
t389 = -t141 * t205 + t209 * t253;
t103 = (t387 * t352 + t195) * qJD(2);
t312 = -pkin(2) - t385;
t81 = pkin(3) * t354 + t186 + (-pkin(8) + t312) * t204;
t343 = pkin(2) * t352 + qJ(3) * t354;
t123 = -pkin(1) * t203 - t343;
t189 = pkin(8) * t352;
t98 = t123 - t189;
t376 = t206 * t81 + t210 * t98;
t309 = t203 * t335;
t178 = pkin(2) * t309;
t74 = t203 * t222 + t178;
t20 = -qJD(4) * t376 + t103 * t210 - t206 * t74;
t384 = pkin(2) * t182;
t383 = pkin(8) * t140;
t382 = pkin(8) * t142;
t379 = t67 * t65;
t280 = pkin(4) * t206 - pkin(9) * t210;
t152 = qJ(3) + t280;
t350 = t206 * t213;
t112 = t152 * t209 - t205 * t350;
t378 = qJD(5) * t112 + t407 * t205 + t406 * t209;
t113 = t152 * t205 + t209 * t350;
t377 = -qJD(5) * t113 - t406 * t205 + t407 * t209;
t374 = t111 * t65;
t329 = qJD(5) * t205;
t23 = -qJD(5) * t246 + t119 * t329 - t205 * t221 + t209 * t50;
t372 = t205 * t23;
t49 = qJDD(5) + t51;
t371 = t205 * t49;
t370 = t205 * t65;
t369 = t205 * t67;
t368 = t209 * t24;
t367 = t209 * t49;
t366 = t209 * t65;
t365 = t209 * t67;
t364 = t210 * t23;
t363 = t210 * t24;
t362 = t67 * t111;
t359 = t119 * t117;
t355 = t200 * qJD(1) ^ 2;
t353 = t203 * t208;
t348 = t207 * t209;
t341 = t212 * pkin(1) + pkin(7) * t353;
t201 = t207 ^ 2;
t202 = t211 ^ 2;
t340 = t201 - t202;
t334 = qJD(2) * t211;
t328 = qJD(5) * t209;
t327 = qJD(5) * t210;
t290 = t387 * t354;
t326 = qJD(1) * t290 + t392;
t129 = pkin(7) * t311 - t179;
t325 = qJD(3) + t129;
t316 = t211 * t355;
t315 = t206 * t352;
t313 = t189 + t343;
t122 = -t204 * qJ(3) - t342;
t308 = t203 * t334;
t304 = pkin(1) * t401;
t298 = -pkin(1) * t208 + pkin(7) * t351;
t133 = t140 * pkin(2);
t295 = qJ(3) * t141 - t133;
t135 = t142 * pkin(2);
t294 = qJ(3) * t143 - t135;
t293 = t111 * t209;
t292 = qJD(1) * (qJD(2) - t184);
t291 = t182 + t323;
t288 = t29 * t311;
t97 = pkin(3) * t352 - t122;
t286 = t210 * t311;
t283 = t207 * t302;
t252 = t140 * t210 + t206 * t351;
t90 = -t142 * t210 + t206 * t353;
t282 = g(1) * t252 + g(2) * t90;
t278 = -g(1) * t140 + g(2) * t142;
t276 = g(1) * t141 - g(2) * t143;
t275 = g(1) * t212 + g(2) * t208;
t108 = t205 * t206 * t311 - t209 * t310;
t273 = t205 * t332 + t108;
t109 = (t205 * t211 + t206 * t348) * t339;
t272 = -t209 * t332 - t109;
t268 = t12 * t205 - t209 * t266;
t267 = -t12 * t209 - t205 * t266;
t39 = pkin(9) * t354 + t376;
t138 = t204 * t206 + t210 * t352;
t139 = t204 * t210 - t315;
t45 = pkin(4) * t138 - pkin(9) * t139 + t97;
t16 = t205 * t45 + t209 * t39;
t15 = -t205 * t39 + t209 * t45;
t43 = -t206 * t98 + t210 * t81;
t47 = -t100 * t206 + t102 * t210;
t262 = qJD(2) * (-qJD(1) * t123 - t105);
t261 = qJD(2) * (t184 + t338);
t180 = t211 * t318;
t131 = -pkin(7) * t309 + t180;
t257 = t143 * pkin(2) + qJ(3) * t142 + t341;
t256 = -t111 * t328 - t371;
t255 = -t111 * t329 + t367;
t254 = -t139 * t205 + t203 * t348;
t89 = t139 * t209 + t205 * t354;
t19 = t206 * t103 + t210 * t74 + t81 * t331 - t98 * t332;
t249 = t269 * t67;
t25 = -pkin(4) * t269 - t28;
t248 = -pkin(9) * t49 + t111 * t25;
t245 = t210 * t269;
t243 = -qJ(3) * t334 - t333;
t104 = t203 * t243 + t178;
t53 = t160 + (qJD(1) * t243 + qJDD(1) * t259) * t203;
t242 = qJD(1) * t104 + qJDD(1) * t123 + t53;
t237 = g(1) * t90 - g(2) * t252 + g(3) * t138;
t91 = t142 * t206 + t210 * t353;
t236 = -g(1) * t91 + g(2) * t253 - g(3) * t139;
t233 = -t141 * pkin(2) - qJ(3) * t140 + t298;
t232 = t132 * t184 - t276;
t6 = -pkin(4) * t221 - t8;
t231 = t237 - t6;
t230 = t269 * t339;
t197 = t204 * qJD(3);
t80 = -qJD(2) * t290 + t180 + t197;
t226 = t394 - t287;
t224 = pkin(3) * t353 + pkin(8) * t143 + t257;
t223 = t395 + t69;
t77 = (t211 * t292 + t322) * t203;
t220 = pkin(3) * t351 - pkin(8) * t141 + t233;
t219 = pkin(9) * qJD(5) * t111 - t231;
t218 = -qJD(5) * t268 + t1 * t209 - t2 * t205;
t217 = t130 * t184 + t223;
t216 = -t207 * t230 - t393;
t215 = t206 * t216 + t210 * t221;
t154 = t207 * t316;
t151 = t182 * t204;
t144 = -t186 + t320;
t137 = t340 * t355;
t128 = -qJ(3) * t310 + t181;
t124 = t312 * t204 + t186;
t121 = (qJDD(1) * t202 - 0.2e1 * t283) * t200;
t120 = (qJDD(1) * t201 + 0.2e1 * t283) * t200;
t110 = -t131 - t197;
t107 = t184 * t205 - t209 * t286;
t106 = t184 * t209 + t205 * t286;
t99 = -t167 - t130;
t96 = -pkin(2) * t184 + t325;
t87 = -qJD(4) * t315 + t204 * t331 - t210 * t309;
t86 = qJD(4) * t138 - t203 * t307;
t78 = (t207 * t321 - t340 * t324) * t401;
t76 = (t207 * t292 - t321) * t203;
t63 = pkin(4) * t119 + pkin(9) * t117;
t61 = t263 - t384;
t59 = t143 * t205 + t209 * t91;
t58 = t143 * t209 - t205 * t91;
t55 = (t207 * t291 + t211 * t261) * t203;
t54 = (t207 * t261 - t211 * t291) * t203;
t41 = -pkin(4) * t310 - t47;
t38 = -pkin(4) * t354 - t43;
t37 = qJD(5) * t254 + t205 * t308 - t209 * t86;
t36 = qJD(5) * t89 - t205 * t86 - t209 * t308;
t27 = pkin(4) * t87 + pkin(9) * t86 + t80;
t18 = t205 * t63 + t209 * t28;
t17 = -t205 * t28 + t209 * t63;
t14 = -pkin(4) * t308 - t20;
t13 = pkin(9) * t308 + t19;
t4 = -qJD(5) * t16 - t13 * t205 + t209 * t27;
t3 = qJD(5) * t15 + t13 * t209 + t205 * t27;
t7 = [0, 0, 0, 0, 0, qJDD(1), g(1) * t208 - g(2) * t212, t275, 0, 0, t120, t78, t55, t121, -t54, t151, t144 * t182 + t204 * t69 + (-t303 + t321) * t304 - t232, -t131 * t184 - t182 * t342 + t204 * t287 - t235 * t304 + t278, ((qJD(2) * t129 + qJDD(1) * t342 - t287 + (-qJD(2) * t144 + t131) * qJD(1)) * t211 + (-qJD(2) * t130 - qJDD(1) * t144 - t69) * t207 - t275) * t203, t200 * qJDD(1) * pkin(1) ^ 2 - g(1) * t298 - g(2) * t341 + t129 * t132 + t130 * t131 + t69 * t144 - t287 * t342, t151, -t55, t54, t120, t78, t121, ((qJD(2) * t96 - qJDD(1) * t122 - t52 + (qJD(2) * t124 - t110) * qJD(1)) * t211 + (qJD(2) * t99 + qJDD(1) * t124 + t61 + (qJD(2) * t122 + t132) * qJD(1)) * t207 - t275) * t203, t124 * t182 + t204 * t61 + (t207 * t262 + t211 * t242) * t203 + t232, -t110 * t184 - t122 * t182 - t204 * t52 + (-t207 * t242 + t211 * t262) * t203 - t278, -g(1) * t233 - g(2) * t257 + t105 * t104 + t99 * t110 + t52 * t122 + t53 * t123 + t61 * t124 + t96 * t132, -t119 * t86 - t139 * t50, t117 * t86 - t119 * t87 + t138 * t50 - t139 * t51, -t86 * qJD(4) + t139 * qJDD(4) + ((qJD(1) * t139 + t119) * t334 + (-qJD(1) * t86 + qJDD(1) * t139 - t50) * t207) * t203, t117 * t87 + t138 * t51, -t87 * qJD(4) - t138 * qJDD(4) + ((-qJD(1) * t138 - t117) * t334 + (-qJD(1) * t87 - qJDD(1) * t138 - t51) * t207) * t203, (qJD(2) * t330 + (qJDD(4) + (0.2e1 * t302 + t322) * t203) * t207) * t203, -g(1) * t253 - g(2) * t91 + t20 * qJD(4) + t43 * qJDD(4) + t80 * t117 + t35 * t138 + t97 * t51 + t72 * t87 + ((qJD(1) * t43 + t28) * t334 + (qJD(1) * t20 + qJDD(1) * t43 + t8) * t207) * t203, -t19 * qJD(4) - t376 * qJDD(4) + t80 * t119 + t35 * t139 - t97 * t50 - t72 * t86 + ((-qJD(1) * t376 - t29) * t334 + (-qJD(1) * t19 - qJDD(1) * t376 + t251) * t207) * t203 + t282, -t117 * t19 - t119 * t20 + t138 * t251 - t139 * t8 + t28 * t86 - t29 * t87 - t376 * t51 + t43 * t50 + t276, -g(1) * t220 - g(2) * t224 + t29 * t19 + t28 * t20 - t251 * t376 + t35 * t97 + t8 * t43 + t72 * t80, -t23 * t89 + t37 * t67, -t23 * t254 - t24 * t89 - t36 * t67 - t37 * t65, t111 * t37 - t138 * t23 + t49 * t89 + t67 * t87, -t24 * t254 + t36 * t65, -t111 * t36 - t138 * t24 + t254 * t49 - t65 * t87, t111 * t87 + t138 * t49, -g(1) * t389 - g(2) * t59 + t4 * t111 + t2 * t138 + t14 * t65 + t15 * t49 + t38 * t24 + t25 * t36 - t254 * t6 - t266 * t87, g(1) * t390 - g(2) * t58 - t1 * t138 - t3 * t111 - t12 * t87 + t14 * t67 - t16 * t49 - t38 * t23 + t25 * t37 + t6 * t89, t1 * t254 - t12 * t36 + t15 * t23 - t16 * t24 - t2 * t89 + t266 * t37 - t3 * t65 - t4 * t67 - t282, t1 * t16 + t12 * t3 + t2 * t15 - t266 * t4 + t6 * t38 + t25 * t14 - g(1) * (pkin(4) * t253 + pkin(9) * t252 + t220) - g(2) * (pkin(4) * t91 + pkin(9) * t90 + t224); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t154, t137, t77, t154, -t76, t182, t355 * t386 + t217, pkin(1) * t316 - t129 * t184 - t226 + t319, 0, 0, t182, -t77, t76, -t154, t137, t154, ((-pkin(2) * t207 + t361) * qJDD(1) + ((-qJ(3) * qJD(2) - t130 - t99) * t207 + (-pkin(2) * qJD(2) + t325 - t96) * t211) * qJD(1)) * t203, -t128 * t310 - t217 - 0.2e1 * t384 + t391, 0.2e1 * t165 + t166 + t325 * t184 + (-g(3) * t207 + (t105 * t211 + t128 * t207) * qJD(1)) * t203 + t226, -t61 * pkin(2) - g(1) * t294 - g(2) * t295 - g(3) * t343 - t52 * qJ(3) - t105 * t128 - t96 * t130 - t325 * t99, -t206 * t396 - t210 * t50, (-t51 - t396) * t210 + (t50 + t397) * t206, -t119 * t310 + t215, t117 * t245 + t206 * t51, -t206 * qJDD(4) + (t117 * t336 - t206 * t235) * t203 + t216 * t210, -t211 * t230, qJ(3) * t51 + t326 * t117 + t402 * t206 + t403 * t210 - t47 * t269 - t28 * t310, -qJ(3) * t50 + t326 * t119 - t403 * t206 + t402 * t210 + t48 * t269 + t29 * t310, t117 * t48 + t119 * t47 + (-t288 + t213 * t50 - t8 + (-t117 * t213 - t29) * qJD(4)) * t210 + (t28 * t311 - t213 * t51 + t251 + (t119 * t213 + t28) * qJD(4)) * t206 + t395, t35 * qJ(3) - t29 * t48 - t28 * t47 - g(1) * (t294 - t382) - g(2) * (t295 - t383) - g(3) * t313 + t326 * t72 + (-t251 * t206 + t8 * t210 + (-t206 * t28 + t210 * t29) * qJD(4)) * t213, -t209 * t364 + (-t205 * t327 + t272) * t67, t108 * t67 + t109 * t65 + (t366 + t369) * t332 + (t372 - t368 + (-t365 + t370) * qJD(5)) * t210, -t206 * t23 + t272 * t111 + (t249 + t255) * t210, t205 * t363 + (t209 * t327 - t273) * t65, -t206 * t24 + t273 * t111 + (t256 - t399) * t210, t111 * t245 + t206 * t49, -t25 * t108 + t112 * t49 - t41 * t65 + t377 * t111 + t395 * t205 + (t2 + (-t205 * t25 + t213 * t65) * qJD(4) - t228 * t209) * t206 + (t6 * t205 - t213 * t24 + t25 * t328 - t266 * t269) * t210, -t25 * t109 - t113 * t49 - t41 * t67 - t378 * t111 + t395 * t209 + (-t1 + (-t209 * t25 + t213 * t67) * qJD(4) + t228 * t205) * t206 + (-t12 * t269 + t209 * t6 + t213 * t23 - t25 * t329) * t210, t108 * t12 - t109 * t266 + t112 * t23 - t113 * t24 - t377 * t67 - t378 * t65 + t268 * t332 + (qJD(5) * t267 - t1 * t205 - t2 * t209 + t228) * t210, t1 * t113 + t2 * t112 - t25 * t41 - g(1) * (-t135 - t382) - g(2) * (-t133 - t383) - g(3) * (t280 * t354 + t313) + (-t6 * t210 + t25 * t332) * t213 + t378 * t12 - t377 * t266 + t394 * t152; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, t154 + t182, -t184 ^ 2 - t201 * t355, t184 * t99 - t223 - t384 + t391, 0, 0, 0, 0, 0, 0, -t184 * t117 + t215, -t206 * t221 - t184 * t119 + (-t269 * t311 - t393) * t210, (t50 - t397) * t210 + t398 * t206, -t184 * t72 + (t269 * t29 + t8) * t210 + t405 * t206 - t395, 0, 0, 0, 0, 0, 0, -t363 + (-t205 * t331 - t106) * t111 + (t256 + t399) * t206, t364 + (-t209 * t331 + t107) * t111 + (t249 - t255) * t206, t106 * t67 + t107 * t65 + (-t366 + t369) * t331 + (-t372 - t368 + (t365 + t370) * qJD(5)) * t206, t106 * t266 - t107 * t12 + (-qJD(4) * t267 - t6) * t210 + (t25 * t269 + t218) * t206 - t395; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t359, -t117 ^ 2 + t119 ^ 2, t345 + (t117 - t356) * qJD(4) + (-t300 + (-t306 + (qJD(2) * t206 + t117) * t207) * qJD(1)) * t203, -t359, t398, t221, -t72 * t119 + t237 + t288 - t297, t72 * t117 - t236 - t405, 0, 0, t293 * t67 - t372, (-t23 - t374) * t209 + (-t24 - t362) * t205, t111 * t293 - t119 * t67 + t371, t111 * t370 - t368, -t111 ^ 2 * t205 + t119 * t65 + t367, -t111 * t119, -pkin(4) * t24 - t111 * t17 + t119 * t266 + t205 * t248 - t209 * t219 - t29 * t65, pkin(4) * t23 + t111 * t18 + t119 * t12 + t205 * t219 + t209 * t248 - t29 * t67, t17 * t67 + t18 * t65 + ((-t24 + t360) * pkin(9) + t408) * t209 + ((qJD(5) * t65 - t23) * pkin(9) + t400) * t205 + t236, t266 * t17 - t12 * t18 - t25 * t29 + t231 * pkin(4) + (t218 + t236) * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t379, -t65 ^ 2 + t67 ^ 2, -t23 + t374, -t379, t362 - t24, t49, -g(1) * t58 - g(2) * t390 - g(3) * t254 - t25 * t67 - t400, g(1) * t59 - g(2) * t389 + g(3) * t89 + t25 * t65 - t408, 0, 0;];
tau_reg = t7;
