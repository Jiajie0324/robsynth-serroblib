% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRPRP6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d4,theta1]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:41
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRPRP6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRP6_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRP6_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRP6_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRP6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5PRPRP6_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:41:36
% EndTime: 2019-12-05 15:41:37
% DurationCPUTime: 1.41s
% Computational Cost: add. (1293->144), mult. (2494->132), div. (0->0), fcn. (1411->6), ass. (0->80)
t885 = sin(qJ(4));
t887 = cos(qJ(4));
t890 = qJD(2) ^ 2;
t894 = t885 * t887 * t890;
t866 = qJDD(4) + t894;
t878 = t887 ^ 2;
t889 = qJD(4) ^ 2;
t869 = t878 * t890 + t889;
t845 = t866 * t885 + t869 * t887;
t895 = t887 * qJDD(2);
t897 = qJD(2) * qJD(4);
t857 = -0.2e1 * t885 * t897 + t895;
t886 = sin(qJ(2));
t888 = cos(qJ(2));
t833 = t845 * t886 - t857 * t888;
t848 = t866 * t887 - t869 * t885;
t881 = sin(pkin(7));
t882 = cos(pkin(7));
t912 = t833 * t881 - t848 * t882;
t911 = t833 * t882 + t848 * t881;
t829 = t845 * t888 + t857 * t886;
t908 = 2 * qJD(4);
t907 = 2 * qJD(3);
t864 = g(1) * t881 - g(2) * t882;
t904 = t864 * t881;
t861 = qJDD(2) * t886 + t888 * t890;
t903 = t881 * t861;
t862 = -qJDD(2) * t888 + t886 * t890;
t902 = t881 * t862;
t901 = t882 * t861;
t900 = t882 * t862;
t865 = -g(1) * t882 - g(2) * t881;
t879 = -g(3) + qJDD(1);
t850 = -t865 * t886 + t879 * t888;
t841 = -qJDD(2) * pkin(2) - qJ(3) * t890 + qJDD(3) - t850;
t839 = -qJDD(2) * pkin(6) + t841;
t825 = t839 * t885 - t864 * t887;
t877 = t885 ^ 2;
t899 = t877 + t878;
t892 = pkin(4) * t885 - qJ(5) * t887;
t898 = t890 * t892;
t896 = t885 * qJDD(2);
t893 = t839 * t887 + t864 * t885;
t851 = t888 * t865 + t886 * t879;
t891 = -t890 * pkin(2) + t851;
t840 = qJDD(2) * qJ(3) + (qJD(2) * t907) + t891;
t883 = t890 * pkin(6);
t868 = -t877 * t890 - t889;
t867 = qJDD(4) - t894;
t863 = t899 * t890;
t860 = t899 * qJDD(2);
t856 = 0.2e1 * t887 * t897 + t896;
t852 = t882 * t864;
t847 = -t867 * t885 + t868 * t887;
t844 = t867 * t887 + t868 * t885;
t843 = -t860 * t886 - t863 * t888;
t842 = t860 * t888 - t863 * t886;
t838 = t882 * t843;
t837 = t881 * t843;
t836 = t840 - t883;
t831 = t844 * t886 + t856 * t888;
t828 = -t844 * t888 + t856 * t886;
t827 = -t850 * t886 + t851 * t888;
t826 = t850 * t888 + t851 * t886;
t823 = t840 * t888 + t841 * t886;
t822 = t840 * t886 - t841 * t888;
t821 = -qJDD(4) * pkin(4) - qJ(5) * t889 + t887 * t898 + qJDD(5) - t893;
t820 = -pkin(4) * t889 + qJDD(4) * qJ(5) + (qJD(5) * t908) - t885 * t898 + t825;
t819 = t831 * t882 + t847 * t881;
t818 = t831 * t881 - t847 * t882;
t816 = -t883 + (qJ(3) + t892) * qJDD(2) + (-0.2e1 * qJD(5) * t887 + t907 + (pkin(4) * t887 + qJ(5) * t885) * t908) * qJD(2) + t891;
t815 = t825 * t887 - t885 * t893;
t814 = t885 * t825 + t887 * t893;
t813 = t814 * t886 + t836 * t888;
t812 = -t814 * t888 + t836 * t886;
t811 = t820 * t887 + t821 * t885;
t810 = t820 * t885 - t821 * t887;
t809 = t810 * t886 + t816 * t888;
t808 = -t810 * t888 + t816 * t886;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t865 * t882 - t904, 0, 0, 0, 0, 0, 0, -t901, t900, 0, t827 * t882 - t904, 0, 0, 0, 0, 0, 0, 0, t901, -t900, t823 * t882 - t904, 0, 0, 0, 0, 0, 0, t819, -t911, t838, t813 * t882 + t815 * t881, 0, 0, 0, 0, 0, 0, t819, t838, t911, t809 * t882 + t811 * t881; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t865 * t881 + t852, 0, 0, 0, 0, 0, 0, -t903, t902, 0, t827 * t881 + t852, 0, 0, 0, 0, 0, 0, 0, t903, -t902, t823 * t881 + t852, 0, 0, 0, 0, 0, 0, t818, -t912, t837, t813 * t881 - t815 * t882, 0, 0, 0, 0, 0, 0, t818, t837, t912, t809 * t881 - t811 * t882; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t879, 0, 0, 0, 0, 0, 0, -t862, -t861, 0, t826, 0, 0, 0, 0, 0, 0, 0, t862, t861, t822, 0, 0, 0, 0, 0, 0, t828, t829, t842, t812, 0, 0, 0, 0, 0, 0, t828, t842, -t829, t808; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t865, 0, 0, 0, 0, 0, 0, -t861, t862, 0, t827, 0, 0, 0, 0, 0, 0, 0, t861, -t862, t823, 0, 0, 0, 0, 0, 0, t831, -t833, t843, t813, 0, 0, 0, 0, 0, 0, t831, t843, t833, t809; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t864, 0, 0, 0, 0, 0, 0, 0, 0, 0, t864, 0, 0, 0, 0, 0, 0, 0, 0, 0, t864, 0, 0, 0, 0, 0, 0, -t847, t848, 0, -t815, 0, 0, 0, 0, 0, 0, -t847, 0, -t848, -t811; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t879, 0, 0, 0, 0, 0, 0, -t862, -t861, 0, t826, 0, 0, 0, 0, 0, 0, 0, t862, t861, t822, 0, 0, 0, 0, 0, 0, t828, t829, t842, t812, 0, 0, 0, 0, 0, 0, t828, t842, -t829, t808; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t890, -qJDD(2), 0, t851, 0, 0, 0, 0, 0, 0, 0, t890, qJDD(2), t840, 0, 0, 0, 0, 0, 0, t856, t857, -t863, t836, 0, 0, 0, 0, 0, 0, t856, -t863, -t857, t816; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t890, 0, t850, 0, 0, 0, 0, 0, 0, 0, -qJDD(2), t890, -t841, 0, 0, 0, 0, 0, 0, -t844, t845, t860, -t814, 0, 0, 0, 0, 0, 0, -t844, t860, -t845, -t810; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t864, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t864, 0, 0, 0, 0, 0, 0, t847, -t848, 0, t815, 0, 0, 0, 0, 0, 0, t847, 0, t848, t811; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t864, 0, 0, 0, 0, 0, 0, t847, -t848, 0, t815, 0, 0, 0, 0, 0, 0, t847, 0, t848, t811; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t890, -qJDD(2), -t840, 0, 0, 0, 0, 0, 0, -t856, -t857, t863, -t836, 0, 0, 0, 0, 0, 0, -t856, t863, t857, -t816; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t890, t841, 0, 0, 0, 0, 0, 0, t844, -t845, -t860, t814, 0, 0, 0, 0, 0, 0, t844, -t860, t845, t810; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t868, -t866, -t896, t825, 0, 0, 0, 0, 0, 0, t868, -t896, t866, t820; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t867, -t869, -t895, t893, 0, 0, 0, 0, 0, 0, t867, -t895, t869, -t821; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t856, t857, -t863, t836, 0, 0, 0, 0, 0, 0, t856, -t863, -t857, t816; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t868, -t896, t866, t820; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t856, -t863, -t857, t816; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t867, t895, -t869, t821;];
f_new_reg = t1;
