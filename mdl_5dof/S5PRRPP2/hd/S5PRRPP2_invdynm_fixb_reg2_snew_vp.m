% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PRRPP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,theta1,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:10
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PRRPP2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPP2_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPP2_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRPP2_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRPP2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRRPP2_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:10:34
% EndTime: 2019-12-05 16:10:52
% DurationCPUTime: 18.51s
% Computational Cost: add. (30489->566), mult. (68215->675), div. (0->0), fcn. (45231->8), ass. (0->382)
t1146 = sin(pkin(7));
t1148 = cos(pkin(7));
t1152 = sin(qJ(2));
t1154 = cos(qJ(2));
t1153 = cos(qJ(3));
t1226 = qJD(2) * t1153;
t1132 = qJD(3) * t1226;
t1151 = sin(qJ(3));
t1203 = t1151 * qJDD(2);
t1109 = t1132 + t1203;
t1145 = sin(pkin(8));
t1147 = cos(pkin(8));
t1227 = qJD(2) * t1151;
t1197 = qJD(3) * t1227;
t1202 = t1153 * qJDD(2);
t1174 = -t1197 + t1202;
t1049 = t1147 * t1109 + t1145 * t1174;
t1097 = t1145 * t1227 - t1147 * t1226;
t1214 = t1097 * qJD(3);
t1263 = -t1214 + t1049;
t1099 = t1145 * t1226 + t1147 * t1227;
t1096 = t1099 ^ 2;
t1155 = qJD(3) ^ 2;
t1032 = t1155 + t1096;
t1212 = t1099 * t1097;
t1258 = qJDD(3) + t1212;
t1220 = t1258 * t1145;
t956 = t1032 * t1147 + t1220;
t1219 = t1258 * t1147;
t975 = t1032 * t1145 - t1219;
t917 = t1151 * t956 + t1153 * t975;
t884 = t1152 * t1263 + t1154 * t917;
t911 = t1151 * t975 - t1153 * t956;
t1368 = qJ(1) * (t1146 * t911 + t1148 * t884);
t1367 = qJ(1) * (t1146 * t884 - t1148 * t911);
t878 = t1152 * t917 - t1154 * t1263;
t1366 = pkin(1) * t878;
t1365 = pkin(5) * t878;
t1364 = pkin(1) * t911 - pkin(5) * t884;
t1250 = t1097 ^ 2;
t1081 = t1250 - t1155;
t964 = t1081 * t1145 + t1219;
t970 = t1081 * t1147 - t1220;
t913 = t1151 * t964 - t1153 * t970;
t1048 = t1109 * t1145 - t1147 * t1174;
t1093 = t1099 * qJD(3);
t995 = t1048 - t1093;
t880 = t1152 * t995 + t1154 * t913;
t906 = t1151 * t970 + t1153 * t964;
t1362 = t1146 * t880 + t1148 * t906;
t1261 = -t1250 + t1096;
t994 = t1048 + t1093;
t936 = -t1145 * t994 + t1147 * t1263;
t1234 = t1147 * t994;
t1237 = t1145 * t1263;
t938 = t1234 + t1237;
t864 = t1151 * t936 + t1153 * t938;
t849 = -t1152 * t1261 + t1154 * t864;
t858 = t1151 * t938 - t1153 * t936;
t1361 = t1146 * t849 - t1148 * t858;
t1359 = -t1146 * t906 + t1148 * t880;
t1358 = t1146 * t858 + t1148 * t849;
t1356 = pkin(2) * t911;
t1355 = pkin(6) * t911;
t1348 = pkin(2) * t1263 - pkin(6) * t917;
t874 = t1152 * t913 - t1154 * t995;
t847 = t1152 * t864 + t1154 * t1261;
t1262 = t1214 + t1049;
t1294 = t1262 * t1145 - t1147 * t995;
t1295 = -t1145 * t995 - t1147 * t1262;
t1308 = -t1151 * t1295 + t1153 * t1294;
t992 = -t1250 - t1096;
t1325 = t1152 * t1308 - t1154 * t992;
t1347 = pkin(1) * t1325;
t1346 = pkin(5) * t1325;
t1307 = t1151 * t1294 + t1153 * t1295;
t1323 = t1152 * t992 + t1154 * t1308;
t1345 = -pkin(1) * t1307 + pkin(5) * t1323;
t1082 = t1096 - t1155;
t1259 = qJDD(3) - t1212;
t1218 = t1259 * t1145;
t1296 = -t1147 * t1082 + t1218;
t1018 = t1147 * t1259;
t1297 = t1082 * t1145 + t1018;
t1306 = t1151 * t1297 + t1153 * t1296;
t1305 = -t1151 * t1296 + t1153 * t1297;
t1324 = t1152 * t1262 + t1154 * t1305;
t1344 = t1146 * t1324 - t1148 * t1306;
t1343 = t1146 * t1306 + t1148 * t1324;
t1342 = qJ(1) * (t1146 * t1323 - t1148 * t1307);
t1341 = qJ(1) * (t1146 * t1307 + t1148 * t1323);
t1340 = pkin(3) * t956;
t1260 = -t1250 - t1155;
t1273 = t1147 * t1260 - t1218;
t1275 = t1145 * t1260 + t1018;
t1289 = -t1151 * t1275 + t1153 * t1273;
t1310 = t1152 * t1289 - t1154 * t994;
t1338 = pkin(1) * t1310;
t1337 = pkin(2) * t1307;
t1336 = pkin(5) * t1310;
t1335 = pkin(6) * t1307;
t1334 = qJ(4) * t956;
t1333 = qJ(4) * t975;
t1288 = t1151 * t1273 + t1153 * t1275;
t1309 = t1152 * t994 + t1154 * t1289;
t1328 = -pkin(1) * t1288 + pkin(5) * t1309;
t1327 = -pkin(2) * t992 + pkin(6) * t1308;
t1326 = t1152 * t1305 - t1154 * t1262;
t1322 = qJ(1) * (t1146 * t1309 - t1148 * t1288);
t1321 = qJ(1) * (t1146 * t1288 + t1148 * t1309);
t1247 = pkin(3) * t1295;
t1319 = pkin(6) * t1288;
t1318 = qJ(4) * t1295;
t1313 = -pkin(2) * t994 + pkin(6) * t1289;
t1302 = pkin(3) * t1275;
t1312 = -pkin(2) * t1288 - t1302;
t1311 = -pkin(3) * t992 + qJ(4) * t1294;
t1301 = qJ(4) * t1273;
t1300 = qJ(4) * t1275;
t1200 = t1147 * t1214;
t1175 = t1048 * t1145 + t1200;
t1213 = t1097 * t1145;
t1180 = qJD(3) * t1213 - t1147 * t1048;
t1252 = t1151 * t1175 + t1153 * t1180;
t1199 = t1152 * t1212;
t1253 = -t1151 * t1180 + t1153 * t1175;
t1270 = t1154 * t1253 - t1199;
t1293 = t1146 * t1270 - t1148 * t1252;
t1211 = t1099 * t1147;
t1171 = (-t1211 - t1213) * qJD(3);
t1078 = t1145 * t1093;
t1179 = t1078 - t1200;
t1255 = t1151 * t1179 + t1153 * t1171;
t1134 = t1152 * qJDD(3);
t1254 = -t1151 * t1171 + t1153 * t1179;
t1274 = t1154 * t1254 + t1134;
t1292 = t1146 * t1274 - t1148 * t1255;
t1291 = t1146 * t1252 + t1148 * t1270;
t1290 = t1146 * t1255 + t1148 * t1274;
t1286 = qJ(5) * t1263;
t1173 = 0.2e1 * t1197 - t1202;
t1061 = t1173 * t1153;
t1198 = t1154 * t1212;
t1272 = t1152 * t1253 + t1198;
t1204 = qJDD(3) * t1154;
t1271 = t1152 * t1254 - t1204;
t1243 = g(3) - qJDD(1);
t1269 = t1146 * t1243;
t1268 = t1148 * t1243;
t1267 = pkin(4) * t1032 + qJ(5) * t1258;
t1266 = -pkin(4) * t1259 - qJ(5) * t1260;
t1224 = qJD(4) * t1097;
t1088 = -0.2e1 * t1224;
t1222 = qJD(5) * qJD(3);
t1265 = t1088 + 0.2e1 * t1222;
t1116 = g(1) * t1146 - t1148 * g(2);
t1101 = t1148 * t1116;
t1117 = g(1) * t1148 + g(2) * t1146;
t1264 = -t1117 * t1146 + t1101;
t982 = qJD(3) * t1211 + t1049 * t1145;
t983 = t1049 * t1147 - t1078;
t931 = -t1151 * t982 + t1153 * t983;
t1182 = t1154 * t931 + t1199;
t928 = t1151 * t983 + t1153 * t982;
t1257 = t1146 * t1182 - t1148 * t928;
t1256 = t1146 * t928 + t1148 * t1182;
t1251 = qJD(2) ^ 2;
t1249 = t1153 ^ 2;
t1080 = -t1154 * t1117 - t1152 * t1243;
t1056 = -t1251 * pkin(2) + qJDD(2) * pkin(6) + t1080;
t1008 = t1151 * t1056 + t1153 * t1116;
t1128 = t1151 * t1251 * t1153;
t1119 = qJDD(3) + t1128;
t960 = (-t1109 + t1132) * qJ(4) + t1119 * pkin(3) - t1008;
t1011 = t1153 * t1056 - t1151 * t1116;
t1118 = qJD(3) * pkin(3) - qJ(4) * t1227;
t1136 = t1249 * t1251;
t961 = -pkin(3) * t1136 + t1174 * qJ(4) - qJD(3) * t1118 + t1011;
t1194 = t1145 * t961 - t1147 * t960;
t1223 = qJD(4) * t1099;
t890 = t1194 + 0.2e1 * t1223;
t1241 = t1145 * t960 + t1147 * t961;
t891 = t1088 + t1241;
t836 = t1145 * t891 - t1147 * t890;
t1248 = pkin(3) * t836;
t1244 = pkin(4) * t1147;
t1022 = pkin(4) * t1097 - qJ(5) * t1099;
t1178 = -t1155 * pkin(4) + qJDD(3) * qJ(5) - t1097 * t1022 + t1241;
t853 = t1178 + t1265;
t1172 = -qJDD(3) * pkin(4) - t1155 * qJ(5) + qJDD(5) + t1194;
t855 = (0.2e1 * qJD(4) + t1022) * t1099 + t1172;
t1242 = -pkin(4) * t855 + qJ(5) * t853;
t1240 = -pkin(4) * t1262 - qJ(5) * t995;
t1189 = t1152 * t1117 - t1154 * t1243;
t1176 = qJDD(2) * pkin(2) + t1251 * pkin(6) + t1189;
t976 = -t1174 * pkin(3) - qJ(4) * t1136 + t1118 * t1227 + qJDD(4) - t1176;
t1239 = t1145 * t976;
t1235 = t1147 * t976;
t1233 = t1151 * t836;
t1230 = t1153 * t836;
t1228 = qJD(2) * qJD(3);
t1142 = t1151 ^ 2;
t1225 = t1251 * t1142;
t1217 = t1176 * t1151;
t1216 = t1176 * t1153;
t1210 = t1116 * t1146;
t1208 = t1119 * t1151;
t1207 = t1119 * t1153;
t1120 = qJDD(3) - t1128;
t1206 = t1120 * t1151;
t1205 = t1120 * t1153;
t1201 = t1142 + t1249;
t1196 = -qJ(5) * t1145 - pkin(3);
t1111 = t1201 * qJDD(2);
t1114 = t1136 + t1225;
t1054 = t1111 * t1154 - t1114 * t1152;
t1053 = t1111 * t1152 + t1114 * t1154;
t948 = t1008 * t1151 + t1153 * t1011;
t1166 = pkin(2) * t1114 + pkin(6) * t1111 + t948;
t904 = -pkin(1) * t1053 - t1166;
t1195 = qJ(1) * t1054 + t904;
t837 = t1145 * t890 + t1147 * t891;
t1113 = qJDD(2) * t1154 - t1152 * t1251;
t1046 = -pkin(1) * t1113 - t1189;
t1112 = qJDD(2) * t1152 + t1251 * t1154;
t1193 = qJ(1) * t1112 - t1046;
t1047 = pkin(1) * t1112 + t1080;
t1192 = qJ(1) * t1113 - t1047;
t1191 = t1154 * t1080 - t1152 * t1189;
t1190 = -t1148 * t1117 - t1210;
t824 = t1145 * t853 - t1147 * t855;
t1188 = pkin(3) * t824 + t1242;
t1187 = t1240 + t1247;
t1186 = -t1241 - t1340;
t1185 = t1152 * t1128;
t1184 = t1154 * t1128;
t1183 = pkin(2) * t1176 + pkin(6) * t948;
t1181 = t1152 * t931 - t1198;
t1060 = pkin(5) * t1112 - t1116 * t1154;
t1177 = -pkin(5) * t1113 - t1116 * t1152;
t947 = t1008 * t1153 - t1011 * t1151;
t1005 = -t1080 * t1152 - t1154 * t1189;
t1127 = -t1136 - t1155;
t1068 = t1127 * t1153 - t1208;
t1170 = -pkin(2) * t1173 + pkin(6) * t1068 + t1216;
t1125 = -t1155 - t1225;
t1070 = -t1125 * t1151 - t1205;
t1108 = 0.2e1 * t1132 + t1203;
t1169 = -pkin(2) * t1108 + pkin(6) * t1070 - t1217;
t1157 = t1048 * pkin(4) - t1286 + t976;
t1156 = 0.2e1 * qJD(5) * t1099 - t1157;
t857 = (-t994 - t1093) * pkin(4) + t1156;
t833 = t1147 * t857 + t1196 * t994 + t1301;
t838 = -qJ(5) * t1234 - t1145 * t857 - t1300;
t1168 = t1151 * t838 + t1153 * t833 + t1313;
t872 = -pkin(3) * t994 - t1235 + t1301;
t905 = t1239 - t1300;
t1167 = t1151 * t905 + t1153 * t872 + t1313;
t1165 = t1178 + t1267 + t1340;
t825 = t1145 * t855 + t1147 * t853;
t885 = (pkin(4) * qJD(3) - 0.2e1 * qJD(5)) * t1099 + t1157;
t805 = qJ(4) * t825 + (t1196 - t1244) * t885;
t808 = -t1151 * t824 + t1153 * t825;
t811 = -qJ(4) * t824 + (pkin(4) * t1145 - qJ(5) * t1147) * t885;
t1164 = -pkin(2) * t885 + pkin(6) * t808 + t1151 * t811 + t1153 * t805;
t841 = -pkin(4) * t992 + t853;
t842 = -qJ(5) * t992 + t855;
t815 = t1145 * t842 + t1147 * t841 + t1311;
t818 = -t1145 * t841 + t1147 * t842 - t1318;
t1163 = t1151 * t818 + t1153 * t815 + t1327;
t821 = t1311 + t837;
t826 = -t836 - t1318;
t1162 = t1151 * t826 + t1153 * t821 + t1327;
t856 = -pkin(4) * t1093 + t1156 + t1286;
t830 = -t1333 + t1145 * t856 + (pkin(3) + t1244) * t1263;
t834 = -pkin(4) * t1237 + t1147 * t856 - t1334;
t1161 = t1151 * t834 + t1153 * t830 + t1348;
t886 = -pkin(3) * t1263 + t1239 + t1333;
t918 = t1235 + t1334;
t1160 = t1151 * t918 + t1153 * t886 - t1348;
t817 = t1153 * t837 - t1233;
t829 = -pkin(3) * t976 + qJ(4) * t837;
t1159 = -pkin(2) * t976 + pkin(6) * t817 - qJ(4) * t1233 + t1153 * t829;
t1090 = -0.2e1 * t1223;
t1158 = -t1022 * t1099 + t1090 - t1172 - t1266;
t1126 = t1136 - t1155;
t1124 = t1155 - t1225;
t1115 = -t1136 + t1225;
t1107 = t1201 * t1228;
t1089 = 0.2e1 * t1224;
t1076 = t1107 * t1154 + t1134;
t1075 = t1109 * t1153 - t1142 * t1228;
t1074 = t1107 * t1152 - t1204;
t1073 = -t1151 * t1174 - t1249 * t1228;
t1069 = -t1124 * t1151 + t1207;
t1067 = t1126 * t1153 - t1206;
t1066 = t1125 * t1153 - t1206;
t1065 = t1124 * t1153 + t1208;
t1064 = t1127 * t1151 + t1207;
t1063 = t1126 * t1151 + t1205;
t1062 = (t1109 + t1132) * t1151;
t1051 = -t1108 * t1151 - t1061;
t1050 = t1108 * t1153 - t1151 * t1173;
t1030 = t1075 * t1154 - t1185;
t1029 = t1073 * t1154 + t1185;
t1028 = t1075 * t1152 + t1184;
t1027 = t1073 * t1152 - t1184;
t1026 = t1069 * t1154 + t1152 * t1203;
t1025 = t1067 * t1154 + t1152 * t1202;
t1024 = t1069 * t1152 - t1154 * t1203;
t1023 = t1067 * t1152 - t1154 * t1202;
t1013 = t1070 * t1154 + t1108 * t1152;
t1012 = t1068 * t1154 + t1152 * t1173;
t1010 = t1070 * t1152 - t1108 * t1154;
t1009 = t1068 * t1152 - t1154 * t1173;
t1002 = t1051 * t1154 + t1115 * t1152;
t1001 = t1051 * t1152 - t1115 * t1154;
t985 = -pkin(6) * t1066 - t1216;
t984 = -pkin(6) * t1064 - t1217;
t977 = pkin(1) * t1116 + pkin(5) * t1191;
t963 = -pkin(2) * t1066 + t1011;
t962 = -pkin(2) * t1064 + t1008;
t933 = -pkin(1) * t1009 - t1170;
t932 = -pkin(1) * t1010 - t1169;
t922 = -pkin(5) * t1053 + t1154 * t947;
t921 = pkin(5) * t1054 + t1152 * t947;
t920 = -t1152 * t1176 + t1154 * t948;
t919 = t1152 * t948 + t1154 * t1176;
t889 = -pkin(5) * t1010 - t1152 * t963 + t1154 * t985;
t888 = -pkin(5) * t1009 - t1152 * t962 + t1154 * t984;
t871 = -pkin(1) * t1066 + pkin(5) * t1013 + t1152 * t985 + t1154 * t963;
t870 = -pkin(1) * t1064 + pkin(5) * t1012 + t1152 * t984 + t1154 * t962;
t851 = -pkin(1) * t919 - t1183;
t840 = -pkin(5) * t919 - (pkin(2) * t1152 - pkin(6) * t1154) * t947;
t839 = -t1247 - t1337;
t835 = t1088 - t1186 - t1356;
t832 = pkin(5) * t920 - (-pkin(2) * t1154 - pkin(6) * t1152 - pkin(1)) * t947;
t831 = t1312 + t890;
t828 = -t1187 - t1337;
t827 = -t1151 * t886 + t1153 * t918 - t1355;
t823 = t1266 + t1312 + t855;
t822 = -t1151 * t872 + t1153 * t905 - t1319;
t820 = t1089 - t1165 - 0.2e1 * t1222 + t1356;
t819 = -t1160 - t1366;
t816 = t1151 * t837 + t1230;
t814 = -t1167 - t1338;
t813 = t1152 * t976 + t1154 * t817;
t812 = t1152 * t817 - t1154 * t976;
t810 = -t1151 * t833 + t1153 * t838 - t1319;
t809 = -t1151 * t830 + t1153 * t834 + t1355;
t807 = t1151 * t825 + t1153 * t824;
t806 = -t1152 * t835 + t1154 * t827 - t1365;
t804 = -pkin(2) * t816 - t1248;
t803 = -t1168 - t1338;
t802 = t1152 * t827 + t1154 * t835 - t1364;
t801 = t1152 * t885 + t1154 * t808;
t800 = t1152 * t808 - t1154 * t885;
t799 = -t1152 * t831 + t1154 * t822 - t1336;
t798 = -t1151 * t821 + t1153 * t826 - t1335;
t797 = -t1161 + t1366;
t796 = t1152 * t822 + t1154 * t831 + t1328;
t795 = -pkin(6) * t816 - qJ(4) * t1230 - t1151 * t829;
t794 = -t1162 - t1347;
t793 = -t1152 * t823 + t1154 * t810 - t1336;
t792 = -t1151 * t815 + t1153 * t818 - t1335;
t791 = t1152 * t810 + t1154 * t823 + t1328;
t790 = -t1152 * t820 + t1154 * t809 + t1365;
t789 = -t1152 * t839 + t1154 * t798 - t1346;
t788 = t1152 * t809 + t1154 * t820 + t1364;
t787 = -pkin(2) * t807 - t1188;
t786 = -t1163 - t1347;
t785 = t1152 * t798 + t1154 * t839 + t1345;
t784 = -pkin(1) * t812 - t1159;
t783 = -t1152 * t828 + t1154 * t792 - t1346;
t782 = t1152 * t792 + t1154 * t828 + t1345;
t781 = -pkin(6) * t807 - t1151 * t805 + t1153 * t811;
t780 = -pkin(5) * t812 - t1152 * t804 + t1154 * t795;
t779 = -pkin(1) * t816 + pkin(5) * t813 + t1152 * t795 + t1154 * t804;
t778 = -pkin(1) * t800 - t1164;
t777 = -pkin(5) * t800 - t1152 * t787 + t1154 * t781;
t776 = -pkin(1) * t807 + pkin(5) * t801 + t1152 * t781 + t1154 * t787;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1269, -t1268, -t1264, -qJ(1) * t1264, 0, 0, t1148 * t1113, 0, -t1148 * t1112, t1146 * qJDD(2), t1146 * t1193 + t1148 * t1177, t1148 * t1060 + t1146 * t1192, t1148 * t1005, -qJ(1) * (t1146 * t1191 + t1101) - (pkin(1) * t1146 - pkin(5) * t1148) * t1005, t1030 * t1148 + t1062 * t1146, t1002 * t1148 + t1050 * t1146, t1026 * t1148 + t1065 * t1146, t1029 * t1148 - t1061 * t1146, t1025 * t1148 + t1063 * t1146, t1148 * t1076, t1148 * t888 - t1146 * t933 - qJ(1) * (t1012 * t1146 - t1064 * t1148), t1148 * t889 - t1146 * t932 - qJ(1) * (t1013 * t1146 - t1066 * t1148), -t1146 * t1195 + t1148 * t922, t1148 * t840 - t1146 * t851 - qJ(1) * (t1146 * t920 + t1148 * t947), t1256, -t1358, t1343, t1291, -t1359, t1290, -t1146 * t814 + t1148 * t799 - t1322, -t1146 * t819 + t1148 * t806 - t1367, -t1146 * t794 + t1148 * t789 - t1342, t1148 * t780 - t1146 * t784 - qJ(1) * (t1146 * t813 - t1148 * t816), t1256, t1343, t1358, t1290, t1359, t1291, -t1146 * t803 + t1148 * t793 - t1322, -t1146 * t786 + t1148 * t783 - t1342, -t1146 * t797 + t1148 * t790 + t1367, t1148 * t777 - t1146 * t778 - qJ(1) * (t1146 * t801 - t1148 * t807); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1268, -t1269, t1190, qJ(1) * t1190, 0, 0, t1146 * t1113, 0, -t1146 * t1112, -t1148 * qJDD(2), t1146 * t1177 - t1148 * t1193, t1146 * t1060 - t1148 * t1192, t1146 * t1005, qJ(1) * (t1148 * t1191 - t1210) - (-pkin(1) * t1148 - pkin(5) * t1146) * t1005, t1030 * t1146 - t1062 * t1148, t1002 * t1146 - t1050 * t1148, t1026 * t1146 - t1065 * t1148, t1029 * t1146 + t1061 * t1148, t1025 * t1146 - t1063 * t1148, t1146 * t1076, t1146 * t888 + t1148 * t933 + qJ(1) * (t1012 * t1148 + t1064 * t1146), t1146 * t889 + t1148 * t932 + qJ(1) * (t1013 * t1148 + t1066 * t1146), t1146 * t922 + t1148 * t1195, t1146 * t840 + t1148 * t851 + qJ(1) * (-t1146 * t947 + t1148 * t920), t1257, -t1361, t1344, t1293, -t1362, t1292, t1146 * t799 + t1148 * t814 + t1321, t1146 * t806 + t1148 * t819 + t1368, t1146 * t789 + t1148 * t794 + t1341, t1146 * t780 + t1148 * t784 + qJ(1) * (t1146 * t816 + t1148 * t813), t1257, t1344, t1361, t1292, t1362, t1293, t1146 * t793 + t1148 * t803 + t1321, t1146 * t783 + t1148 * t786 + t1341, t1146 * t790 + t1148 * t797 - t1368, t1146 * t777 + t1148 * t778 + qJ(1) * (t1146 * t807 + t1148 * t801); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1116, t1117, 0, 0, 0, 0, t1112, 0, t1113, 0, -t1060, t1177, t1191, t977, t1028, t1001, t1024, t1027, t1023, t1074, t870, t871, t921, t832, t1181, -t847, t1326, t1272, -t874, t1271, t796, t802, t785, t779, t1181, t1326, t847, t1271, t874, t1272, t791, t782, t788, t776; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1243, -t1116, 0, 0, 0, t1113, 0, -t1112, 0, t1177, t1060, t1005, pkin(5) * t1005, t1030, t1002, t1026, t1029, t1025, t1076, t888, t889, t922, t840, t1182, -t849, t1324, t1270, -t880, t1274, t799, t806, t789, t780, t1182, t1324, t849, t1274, t880, t1270, t793, t783, t790, t777; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1243, 0, -t1117, 0, 0, 0, 0, 0, 0, -qJDD(2), t1046, t1047, 0, pkin(1) * t1005, -t1062, -t1050, -t1065, t1061, -t1063, 0, t933, t932, t904, t851, -t928, t858, -t1306, -t1252, -t906, -t1255, t814, t819, t794, t784, -t928, -t1306, -t858, -t1255, t906, -t1252, t803, t786, t797, t778; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1116, t1117, 0, 0, 0, 0, t1112, 0, t1113, 0, -t1060, t1177, t1191, t977, t1028, t1001, t1024, t1027, t1023, t1074, t870, t871, t921, t832, t1181, -t847, t1326, t1272, -t874, t1271, t796, t802, t785, t779, t1181, t1326, t847, t1271, t874, t1272, t791, t782, t788, t776; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t1251, 0, 0, -t1116, -t1189, 0, t1075, t1051, t1069, t1073, t1067, t1107, t984, t985, t947, pkin(6) * t947, t931, -t864, t1305, t1253, -t913, t1254, t822, t827, t798, t795, t931, t1305, t864, t1254, t913, t1253, t810, t792, t809, t781; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1251, 0, qJDD(2), 0, t1116, 0, t1080, 0, t1128, -t1115, -t1203, -t1128, -t1202, -qJDD(3), t962, t963, 0, pkin(2) * t947, -t1212, -t1261, -t1262, t1212, t995, -qJDD(3), t831, t835, t839, t804, -t1212, -t1262, t1261, -qJDD(3), -t995, t1212, t823, t828, t820, t787; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t1189, -t1080, 0, 0, t1062, t1050, t1065, -t1061, t1063, 0, t1170, t1169, t1166, t1183, t928, -t858, t1306, t1252, t906, t1255, t1167, t1160, t1162, t1159, t928, t1306, t858, t1255, -t906, t1252, t1168, t1163, t1161, t1164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1109, -t1173, t1119, -t1132, t1126, t1132, 0, -t1176, t1008, 0, t983, -t938, t1297, t1175, t970, t1179, t905, t918, t826, -qJ(4) * t836, t983, t1297, t938, t1179, -t970, t1175, t838, t818, t834, t811; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1197, t1108, t1124, t1174, t1120, -t1197, t1176, 0, t1011, 0, t982, t936, t1296, t1180, t964, t1171, t872, t886, t821, t829, t982, t1296, -t936, t1171, -t964, t1180, t833, t815, t830, t805; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1128, t1115, t1203, t1128, t1202, qJDD(3), -t1008, -t1011, 0, 0, t1212, t1261, t1262, -t1212, -t995, qJDD(3), t1090 - t1194 + t1302, t1089 + t1186, t1247, t1248, t1212, t1262, -t1261, qJDD(3), t995, -t1212, t1158 + t1302, t1187, t1165 + t1265, t1188; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1049, -t994, t1259, t1214, t1081, -t1214, 0, t976, t890, 0, t1049, t1259, t994, -t1214, -t1081, t1214, -qJ(5) * t994, t842, t856, -qJ(5) * t885; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1093, t1263, -t1082, -t1048, t1258, -t1093, -t976, 0, t891, 0, t1093, -t1082, -t1263, -t1093, -t1258, -t1048, t857, t841, pkin(4) * t1263, -pkin(4) * t885; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1212, t1261, t1262, -t1212, -t995, qJDD(3), -t890, -t891, 0, 0, t1212, t1262, -t1261, qJDD(3), t995, -t1212, t1158, t1240, t853 + t1267, t1242; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1049, t1259, t994, -t1214, -t1081, t1214, 0, t855, -t885, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1212, t1262, -t1261, qJDD(3), t995, -t1212, -t855, 0, t853, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1093, t1082, t1263, t1093, t1258, t1048, t885, -t853, 0, 0;];
m_new_reg = t1;
