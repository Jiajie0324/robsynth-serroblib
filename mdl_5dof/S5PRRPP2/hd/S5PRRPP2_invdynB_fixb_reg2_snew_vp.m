% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRRPP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,theta1,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:10
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRRPP2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPP2_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPP2_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRPP2_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRPP2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRRPP2_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:10:17
% EndTime: 2019-12-05 16:10:34
% DurationCPUTime: 14.97s
% Computational Cost: add. (17621->480), mult. (39356->665), div. (0->0), fcn. (26303->8), ass. (0->353)
t571 = sin(pkin(8));
t573 = cos(pkin(8));
t576 = sin(qJ(3));
t578 = cos(qJ(3));
t529 = (t571 * t578 + t573 * t576) * qJD(2);
t526 = t529 ^ 2;
t580 = qJD(3) ^ 2;
t468 = t580 + t526;
t622 = qJD(2) * t576;
t527 = -qJD(2) * t573 * t578 + t571 * t622;
t480 = t529 * t527;
t664 = qJDD(3) + t480;
t648 = t571 * t664;
t398 = t468 * t573 + t648;
t639 = t573 * t664;
t424 = t468 * t571 - t639;
t362 = t398 * t576 + t424 * t578;
t577 = sin(qJ(2));
t579 = cos(qJ(2));
t523 = t527 * qJD(3);
t617 = qJD(2) * qJD(3);
t605 = t578 * t617;
t615 = t576 * qJDD(2);
t541 = t605 + t615;
t606 = t576 * t617;
t613 = t578 * qJDD(2);
t587 = t606 - t613;
t583 = t573 * t541 - t571 * t587;
t680 = t523 - t583;
t333 = t362 * t579 - t577 * t680;
t342 = t398 * t578 - t424 * t576;
t572 = sin(pkin(7));
t574 = cos(pkin(7));
t294 = t333 * t572 + t574 * t342;
t775 = qJ(1) * t294;
t296 = t333 * t574 - t572 * t342;
t774 = qJ(1) * t296;
t327 = t362 * t577 + t579 * t680;
t773 = pkin(5) * t327;
t772 = pkin(1) * t327 + pkin(2) * t680 + pkin(6) * t362;
t771 = -pkin(1) * t342 - pkin(5) * t333;
t600 = t541 * t571 + t573 * t587;
t619 = t529 * qJD(3);
t440 = t600 + t619;
t380 = -t440 * t571 - t573 * t680;
t640 = t573 * t440;
t650 = t571 * t680;
t382 = t640 - t650;
t319 = t380 * t576 + t382 * t578;
t657 = t527 ^ 2;
t475 = -t657 + t526;
t304 = t319 * t579 - t475 * t577;
t315 = -t380 * t578 + t382 * t576;
t770 = t304 * t572 - t574 * t315;
t769 = t304 * t574 + t572 * t315;
t513 = t657 - t580;
t413 = t513 * t571 + t639;
t419 = t513 * t573 - t648;
t358 = t413 * t576 - t419 * t578;
t442 = -t600 + t619;
t329 = t358 * t579 - t442 * t577;
t352 = t413 * t578 + t419 * t576;
t768 = t329 * t572 + t574 * t352;
t767 = t329 * t574 - t572 * t352;
t765 = pkin(6) * t342;
t758 = -pkin(2) * t342 - pkin(3) * t398;
t756 = t319 * t577 + t475 * t579;
t755 = t358 * t577 + t442 * t579;
t665 = qJDD(3) - t480;
t647 = t571 * t665;
t666 = -t657 - t580;
t675 = t573 * t666 - t647;
t461 = t573 * t665;
t677 = t571 * t666 + t461;
t693 = t576 * t675 + t578 * t677;
t694 = -t576 * t677 + t578 * t675;
t715 = t440 * t577 + t579 * t694;
t734 = t572 * t693 + t574 * t715;
t754 = qJ(1) * t734;
t669 = -t523 - t583;
t678 = t442 * t573 - t571 * t669;
t679 = t442 * t571 + t573 * t669;
t691 = t576 * t678 + t578 * t679;
t438 = -t657 - t526;
t692 = -t576 * t679 + t578 * t678;
t714 = t438 * t577 + t579 * t692;
t735 = t572 * t691 + t574 * t714;
t753 = qJ(1) * t735;
t736 = t572 * t715 - t574 * t693;
t752 = qJ(1) * t736;
t737 = t572 * t714 - t574 * t691;
t751 = qJ(1) * t737;
t514 = -t526 + t580;
t700 = t514 * t573 + t647;
t701 = -t514 * t571 + t461;
t713 = -t576 * t701 - t578 * t700;
t712 = -t576 * t700 + t578 * t701;
t732 = -t577 * t669 + t579 * t712;
t750 = t572 * t732 + t574 * t713;
t749 = -t572 * t713 + t574 * t732;
t716 = -t438 * t579 + t577 * t692;
t747 = pkin(5) * t716;
t717 = -t440 * t579 + t577 * t694;
t746 = pkin(5) * t717;
t745 = qJ(4) * t398;
t744 = qJ(4) * t424;
t741 = -pkin(1) * t716 + pkin(2) * t438 - pkin(6) * t692;
t740 = -pkin(1) * t717 + pkin(2) * t440 - pkin(6) * t694;
t739 = -pkin(1) * t691 + pkin(5) * t714;
t738 = -pkin(1) * t693 + pkin(5) * t715;
t733 = t577 * t712 + t579 * t669;
t729 = pkin(6) * t691;
t728 = pkin(6) * t693;
t721 = t680 * qJ(5);
t292 = -pkin(2) * t691 - pkin(3) * t679;
t720 = -pkin(2) * t693 - pkin(3) * t677;
t708 = qJ(4) * t675;
t707 = qJ(4) * t677;
t706 = qJ(4) * t679;
t607 = t573 * t523;
t588 = t571 * t600 + t607;
t592 = t523 * t571 - t573 * t600;
t658 = -t576 * t588 - t578 * t592;
t609 = t577 * t480;
t659 = -t576 * t592 + t578 * t588;
t672 = t579 * t659 - t609;
t699 = t572 * t672 + t574 * t658;
t585 = (-t527 * t571 - t529 * t573) * qJD(3);
t510 = t571 * t619;
t591 = t510 - t607;
t661 = -t576 * t591 - t578 * t585;
t563 = t577 * qJDD(3);
t660 = -t576 * t585 + t578 * t591;
t676 = t579 * t660 + t563;
t698 = t572 * t676 + t574 * t661;
t697 = -t572 * t658 + t574 * t672;
t696 = -t572 * t661 + t574 * t676;
t695 = -pkin(3) * t438 + qJ(4) * t678;
t690 = 2 * qJD(5);
t586 = 0.2e1 * t606 - t613;
t495 = t586 * t578;
t608 = t579 * t480;
t674 = t577 * t659 + t608;
t611 = t579 * qJDD(3);
t673 = t577 * t660 - t611;
t626 = g(3) - qJDD(1);
t671 = t572 * t626;
t670 = t574 * t626;
t548 = g(1) * t572 - g(2) * t574;
t533 = t574 * t548;
t549 = g(1) * t574 + g(2) * t572;
t489 = -t549 * t572 + t533;
t462 = pkin(4) * t527 - qJ(5) * t529;
t512 = -t549 * t579 - t577 * t626;
t655 = qJD(2) ^ 2;
t492 = -pkin(2) * t655 + qJDD(2) * pkin(6) + t512;
t451 = t576 * t492 + t548 * t578;
t558 = t576 * t655 * t578;
t551 = qJDD(3) + t558;
t407 = (-t541 + t605) * qJ(4) + t551 * pkin(3) - t451;
t454 = t492 * t578 - t548 * t576;
t550 = qJD(3) * pkin(3) - qJ(4) * t622;
t656 = t578 ^ 2;
t565 = t656 * t655;
t408 = -pkin(3) * t565 - qJ(4) * t587 - qJD(3) * t550 + t454;
t625 = t407 * t571 + t408 * t573;
t667 = qJDD(3) * qJ(5) + qJD(3) * t690 - t462 * t527 + t625;
t430 = t571 * t583 + t573 * t619;
t431 = t573 * t583 - t510;
t372 = -t430 * t578 - t431 * t576;
t375 = -t430 * t576 + t431 * t578;
t593 = t375 * t579 + t609;
t663 = t372 * t574 + t572 * t593;
t662 = -t372 * t572 + t574 * t593;
t653 = pkin(4) * t573;
t599 = t577 * t549 - t579 * t626;
t590 = qJDD(2) * pkin(2) + pkin(6) * t655 + t599;
t425 = pkin(3) * t587 - qJ(4) * t565 + t550 * t622 + qJDD(4) - t590;
t652 = t571 * t425;
t612 = t579 * qJDD(2);
t545 = -t577 * t655 + t612;
t644 = t572 * t545;
t643 = t572 * t548;
t641 = t573 * t425;
t638 = t574 * t545;
t620 = qJD(4) * t529;
t522 = 0.2e1 * t620;
t624 = -t407 * t573 + t408 * t571;
t339 = t522 + t624;
t621 = qJD(4) * t527;
t520 = -0.2e1 * t621;
t340 = t520 + t625;
t289 = -t339 * t573 + t340 * t571;
t637 = t576 * t289;
t636 = t576 * t590;
t635 = t576 * t551;
t552 = qJDD(3) - t558;
t634 = t576 * t552;
t631 = t578 * t289;
t630 = t578 * t590;
t629 = t578 * t551;
t628 = t578 * t552;
t623 = -t438 - t580;
t569 = t576 ^ 2;
t618 = t569 * t655;
t614 = t577 * qJDD(2);
t610 = t569 + t656;
t604 = -qJ(5) * t571 - pkin(3);
t390 = t451 * t576 + t454 * t578;
t543 = t610 * qJDD(2);
t546 = t565 + t618;
t487 = t543 * t577 + t546 * t579;
t488 = t543 * t579 - t546 * t577;
t603 = -pkin(1) * t487 - pkin(2) * t546 - pkin(6) * t543 + qJ(1) * t488 - t390;
t544 = t579 * t655 + t614;
t602 = pkin(1) * t545 + qJ(1) * t544 + t599;
t601 = -pkin(1) * t544 + qJ(1) * t545 - t512;
t290 = t339 * t571 + t340 * t573;
t450 = t512 * t579 - t577 * t599;
t490 = -t549 * t574 - t643;
t597 = t577 * t558;
t596 = t579 * t558;
t595 = t462 * t529 + qJDD(5) + t624;
t594 = t375 * t577 - t608;
t494 = pkin(5) * t544 - t548 * t579;
t493 = -pkin(5) * t545 - t548 * t577;
t389 = t451 * t578 - t454 * t576;
t449 = -t512 * t577 - t579 * t599;
t589 = t520 + t667;
t584 = -qJDD(3) * pkin(4) + t595;
t582 = pkin(4) * t600 + t425 + t721;
t581 = t529 * t690 - t582;
t557 = -t565 - t580;
t556 = t565 - t580;
t555 = -t580 - t618;
t554 = t580 - t618;
t547 = t565 - t618;
t540 = 0.2e1 * t605 + t615;
t539 = t610 * t617;
t532 = t574 * t544;
t531 = t572 * t544;
t509 = t539 * t579 + t563;
t508 = t541 * t578 - t569 * t617;
t507 = t576 * t587 - t617 * t656;
t504 = -t555 * t576 - t628;
t503 = -t554 * t576 + t629;
t502 = t557 * t578 - t635;
t501 = t556 * t578 - t634;
t500 = t555 * t578 - t634;
t499 = -t554 * t578 - t635;
t498 = t557 * t576 + t629;
t497 = -t556 * t576 - t628;
t496 = (-t541 - t605) * t576;
t485 = -t540 * t576 - t495;
t484 = -t540 * t578 + t576 * t586;
t466 = t508 * t579 - t597;
t465 = t507 * t579 + t597;
t464 = t503 * t579 + t576 * t614;
t463 = t501 * t579 + t577 * t613;
t456 = t504 * t579 + t540 * t577;
t455 = t502 * t579 + t577 * t586;
t453 = t504 * t577 - t540 * t579;
t452 = t502 * t577 - t579 * t586;
t447 = t485 * t579 - t547 * t577;
t433 = -pkin(6) * t500 - t630;
t432 = -pkin(6) * t498 - t636;
t412 = t450 * t574 - t643;
t411 = t450 * t572 + t533;
t410 = -pkin(2) * t500 + t454;
t409 = -pkin(2) * t498 + t451;
t406 = t456 * t574 + t500 * t572;
t405 = t455 * t574 + t498 * t572;
t404 = t456 * t572 - t500 * t574;
t403 = t455 * t572 - t498 * t574;
t377 = -pkin(1) * t452 + pkin(2) * t586 - pkin(6) * t502 - t630;
t376 = -pkin(1) * t453 + pkin(2) * t540 - pkin(6) * t504 + t636;
t366 = -pkin(5) * t487 + t389 * t579;
t365 = t390 * t579 - t577 * t590;
t364 = t390 * t577 + t579 * t590;
t363 = t641 + t745;
t350 = t652 - t707;
t338 = -pkin(5) * t453 - t410 * t577 + t433 * t579;
t337 = -pkin(5) * t452 - t409 * t577 + t432 * t579;
t335 = pkin(3) * t680 + t652 + t744;
t334 = (pkin(4) * qJD(3) - (2 * qJD(5))) * t529 + t582;
t325 = -pkin(3) * t440 - t641 + t708;
t312 = t365 * t574 - t389 * t572;
t311 = t365 * t572 + t389 * t574;
t310 = t581 + (-t440 - t619) * pkin(4);
t309 = -pkin(4) * t619 + t581 - t721;
t308 = t580 * qJ(5) - t584 - 0.2e1 * t620;
t307 = -pkin(4) * t580 + t589;
t306 = -pkin(1) * t364 - pkin(2) * t590 - pkin(6) * t390;
t299 = qJ(5) * t623 + t522 + t584;
t298 = pkin(4) * t623 + t589;
t297 = -pkin(5) * t364 - (pkin(2) * t577 - pkin(6) * t579) * t389;
t291 = -qJ(5) * t640 - t310 * t571 - t707;
t288 = t340 - t758;
t287 = pkin(4) * t650 + t309 * t573 - t745;
t282 = t573 * t310 + t440 * t604 + t708;
t281 = t339 + t720;
t280 = -t744 + t571 * t309 - (pkin(3) + t653) * t680;
t279 = -pkin(3) * t425 + qJ(4) * t290;
t278 = -pkin(4) * t669 - qJ(5) * t442 + t292;
t277 = -t335 * t576 + t363 * t578 + t765;
t276 = -t289 - t706;
t275 = t307 * t573 - t308 * t571;
t274 = t307 * t571 + t308 * t573;
t273 = t522 + (-t666 - t580) * qJ(5) + (-qJDD(3) - t665) * pkin(4) + t595 + t720;
t268 = -t325 * t576 + t350 * t578 - t728;
t267 = t290 + t695;
t266 = -qJ(5) * t664 + 0.2e1 * t621 + (-t468 + t580) * pkin(4) - t667 + t758;
t265 = -t335 * t578 - t363 * t576 - t772;
t264 = -t298 * t571 + t299 * t573 - t706;
t263 = t290 * t578 - t637;
t262 = t290 * t576 + t631;
t261 = t298 * t573 + t299 * t571 + t695;
t260 = -t325 * t578 - t350 * t576 + t740;
t259 = t263 * t579 + t425 * t577;
t258 = t263 * t577 - t425 * t579;
t257 = -qJ(4) * t274 + (pkin(4) * t571 - qJ(5) * t573) * t334;
t256 = -t282 * t576 + t291 * t578 - t728;
t255 = -t280 * t576 + t287 * t578 - t765;
t254 = -t274 * t576 + t275 * t578;
t253 = t274 * t578 + t275 * t576;
t252 = t277 * t579 - t288 * t577 - t773;
t251 = qJ(4) * t275 + (t604 - t653) * t334;
t250 = -pkin(2) * t262 - pkin(3) * t289;
t249 = -t282 * t578 - t291 * t576 + t740;
t248 = t254 * t579 + t334 * t577;
t247 = t254 * t577 - t334 * t579;
t246 = t268 * t579 - t281 * t577 - t746;
t245 = -t267 * t576 + t276 * t578 - t729;
t244 = -t280 * t578 - t287 * t576 + t772;
t243 = -pkin(6) * t262 - qJ(4) * t631 - t279 * t576;
t242 = t259 * t574 + t262 * t572;
t241 = t259 * t572 - t262 * t574;
t240 = -t267 * t578 - t276 * t576 + t741;
t239 = t256 * t579 - t273 * t577 - t746;
t238 = -t261 * t576 + t264 * t578 - t729;
t237 = t255 * t579 - t266 * t577 + t773;
t236 = t245 * t579 - t292 * t577 - t747;
t235 = -pkin(2) * t253 - pkin(3) * t274 - pkin(4) * t308 - qJ(5) * t307;
t234 = -t261 * t578 - t264 * t576 + t741;
t233 = t248 * t574 + t253 * t572;
t232 = t248 * t572 - t253 * t574;
t231 = -pkin(1) * t258 + pkin(2) * t425 - pkin(6) * t263 + qJ(4) * t637 - t279 * t578;
t230 = t238 * t579 - t278 * t577 - t747;
t229 = -pkin(6) * t253 - t251 * t576 + t257 * t578;
t228 = -pkin(5) * t258 + t243 * t579 - t250 * t577;
t227 = -pkin(1) * t247 + pkin(2) * t334 - pkin(6) * t254 - t251 * t578 - t257 * t576;
t226 = -pkin(5) * t247 + t229 * t579 - t235 * t577;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t490, 0, 0, 0, 0, 0, 0, -t532, -t638, 0, t412, 0, 0, 0, 0, 0, 0, t405, t406, t574 * t488, t312, 0, 0, 0, 0, 0, 0, t734, t296, t735, t242, 0, 0, 0, 0, 0, 0, t734, t735, -t296, t233; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t489, 0, 0, 0, 0, 0, 0, -t531, -t644, 0, t411, 0, 0, 0, 0, 0, 0, t403, t404, t572 * t488, t311, 0, 0, 0, 0, 0, 0, t736, t294, t737, t241, 0, 0, 0, 0, 0, 0, t736, t737, -t294, t232; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t626, 0, 0, 0, 0, 0, 0, t545, -t544, 0, -t449, 0, 0, 0, 0, 0, 0, t452, t453, t487, t364, 0, 0, 0, 0, 0, 0, t717, t327, t716, t258, 0, 0, 0, 0, 0, 0, t717, t716, -t327, t247; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t671, -t670, -t489, -qJ(1) * t489, 0, 0, t638, 0, -t532, t572 * qJDD(2), t574 * t493 + t572 * t602, t574 * t494 + t572 * t601, t574 * t449, -qJ(1) * t411 - (pkin(1) * t572 - pkin(5) * t574) * t449, t466 * t574 - t496 * t572, t447 * t574 - t484 * t572, t464 * t574 - t499 * t572, t465 * t574 - t495 * t572, t463 * t574 - t497 * t572, t574 * t509, -qJ(1) * t403 + t337 * t574 - t377 * t572, -qJ(1) * t404 + t338 * t574 - t376 * t572, t574 * t366 - t572 * t603, -qJ(1) * t311 + t297 * t574 - t306 * t572, t662, -t769, t749, t697, -t767, t696, t246 * t574 - t260 * t572 - t752, t252 * t574 - t265 * t572 - t775, t236 * t574 - t240 * t572 - t751, -qJ(1) * t241 + t228 * t574 - t231 * t572, t662, t749, t769, t696, t767, t697, t239 * t574 - t249 * t572 - t752, t230 * t574 - t234 * t572 - t751, t237 * t574 - t244 * t572 + t775, -qJ(1) * t232 + t226 * t574 - t227 * t572; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t670, -t671, t490, qJ(1) * t490, 0, 0, t644, 0, -t531, -t574 * qJDD(2), t572 * t493 - t574 * t602, t572 * t494 - t574 * t601, t572 * t449, qJ(1) * t412 - (-pkin(1) * t574 - pkin(5) * t572) * t449, t466 * t572 + t496 * t574, t447 * t572 + t484 * t574, t464 * t572 + t499 * t574, t465 * t572 + t495 * t574, t463 * t572 + t497 * t574, t572 * t509, qJ(1) * t405 + t337 * t572 + t377 * t574, qJ(1) * t406 + t338 * t572 + t376 * t574, t572 * t366 + t574 * t603, qJ(1) * t312 + t297 * t572 + t306 * t574, t663, -t770, t750, t699, -t768, t698, t246 * t572 + t260 * t574 + t754, t252 * t572 + t265 * t574 + t774, t236 * t572 + t240 * t574 + t753, qJ(1) * t242 + t228 * t572 + t231 * t574, t663, t750, t770, t698, t768, t699, t239 * t572 + t249 * t574 + t754, t230 * t572 + t234 * t574 + t753, t237 * t572 + t244 * t574 - t774, qJ(1) * t233 + t226 * t572 + t227 * t574; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t548, t549, 0, 0, 0, 0, t544, 0, t545, 0, -t494, t493, t450, pkin(1) * t548 + pkin(5) * t450, t508 * t577 + t596, t485 * t577 + t547 * t579, t503 * t577 - t576 * t612, t507 * t577 - t596, t501 * t577 - t578 * t612, t539 * t577 - t611, -pkin(1) * t498 + pkin(5) * t455 + t409 * t579 + t432 * t577, -pkin(1) * t500 + pkin(5) * t456 + t410 * t579 + t433 * t577, pkin(5) * t488 + t389 * t577, pkin(5) * t365 - (-pkin(2) * t579 - pkin(6) * t577 - pkin(1)) * t389, t594, -t756, t733, t674, -t755, t673, t268 * t577 + t281 * t579 + t738, t277 * t577 + t288 * t579 - t771, t245 * t577 + t292 * t579 + t739, -pkin(1) * t262 + pkin(5) * t259 + t243 * t577 + t250 * t579, t594, t733, t756, t673, t755, t674, t256 * t577 + t273 * t579 + t738, t238 * t577 + t278 * t579 + t739, t255 * t577 + t266 * t579 + t771, -pkin(1) * t253 + pkin(5) * t248 + t229 * t577 + t235 * t579;];
tauB_reg = t1;
