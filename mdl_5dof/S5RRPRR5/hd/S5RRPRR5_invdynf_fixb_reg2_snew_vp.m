% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 12:04
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPRR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR5_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR5_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR5_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 12:04:33
% EndTime: 2020-01-03 12:04:36
% DurationCPUTime: 2.78s
% Computational Cost: add. (20656->204), mult. (28988->297), div. (0->0), fcn. (20569->10), ass. (0->169)
t1411 = sin(pkin(9));
t1412 = cos(pkin(9));
t1414 = sin(qJ(4));
t1418 = cos(qJ(4));
t1461 = -t1411 * t1414 + t1412 * t1418;
t1410 = qJD(1) + qJD(2);
t1406 = t1410 ^ 2;
t1415 = sin(qJ(2));
t1407 = qJDD(1) + qJDD(2);
t1419 = cos(qJ(2));
t1438 = t1419 * t1407;
t1387 = t1415 * t1406 - t1438;
t1416 = sin(qJ(1));
t1420 = cos(qJ(1));
t1439 = t1415 * t1407;
t1431 = -t1419 * t1406 - t1439;
t1460 = t1416 * t1387 + t1420 * t1431;
t1459 = -t1420 * t1387 + t1416 * t1431;
t1430 = t1411 * t1418 + t1412 * t1414;
t1456 = t1430 * t1407;
t1408 = t1412 ^ 2;
t1423 = t1411 ^ 2;
t1435 = t1408 + t1423;
t1384 = t1435 * t1406;
t1409 = qJD(4) + qJD(5);
t1455 = qJD(5) + t1409;
t1375 = t1461 * t1410;
t1377 = t1430 * t1410;
t1413 = sin(qJ(5));
t1417 = cos(qJ(5));
t1346 = -t1417 * t1375 + t1413 * t1377;
t1454 = t1346 ^ 2;
t1348 = t1413 * t1375 + t1417 * t1377;
t1453 = t1348 ^ 2;
t1452 = t1375 ^ 2;
t1451 = t1377 ^ 2;
t1450 = t1409 ^ 2;
t1449 = qJD(3) * t1410;
t1448 = t1348 * t1346;
t1447 = t1375 * qJD(4);
t1446 = t1377 * qJD(4);
t1445 = t1377 * t1375;
t1444 = t1406 * t1412;
t1443 = t1408 * t1406;
t1442 = t1411 * t1407;
t1402 = t1412 * t1407;
t1437 = t1423 * t1406;
t1436 = qJD(5) - t1409;
t1397 = -t1416 * g(2) + t1420 * g(3);
t1422 = qJD(1) ^ 2;
t1389 = -t1422 * pkin(1) + t1397;
t1398 = -t1420 * g(2) - t1416 * g(3);
t1428 = qJDD(1) * pkin(1) + t1398;
t1367 = t1419 * t1389 + t1415 * t1428;
t1359 = -t1406 * pkin(2) + t1407 * qJ(3) + t1367;
t1433 = -t1412 * g(1) - 0.2e1 * t1411 * t1449;
t1333 = (pkin(3) * t1444 - pkin(7) * t1407 - t1359) * t1411 + t1433;
t1343 = -t1411 * g(1) + (t1359 + 0.2e1 * t1449) * t1412;
t1334 = -pkin(3) * t1443 + pkin(7) * t1402 + t1343;
t1317 = t1414 * t1333 + t1418 * t1334;
t1434 = -qJDD(4) - qJDD(5);
t1316 = t1418 * t1333 - t1414 * t1334;
t1358 = t1456 + t1447;
t1340 = t1461 * t1407;
t1427 = -t1340 + t1446;
t1432 = -t1413 * t1358 - t1417 * t1427;
t1366 = -t1415 * t1389 + t1419 * t1428;
t1354 = qJDD(4) + t1445;
t1352 = -t1407 * pkin(2) - t1406 * qJ(3) + qJDD(3) - t1366;
t1339 = -pkin(3) * t1402 + t1352 + (-t1437 - t1443) * pkin(7);
t1426 = -t1417 * t1358 + t1413 * t1427;
t1421 = qJD(4) ^ 2;
t1392 = t1411 * t1444;
t1391 = t1420 * qJDD(1) - t1416 * t1422;
t1390 = -t1416 * qJDD(1) - t1420 * t1422;
t1380 = t1435 * t1407;
t1379 = t1412 * t1384;
t1378 = t1411 * t1384;
t1369 = -t1421 - t1451;
t1368 = qJD(4) * pkin(4) - t1377 * pkin(8);
t1365 = -t1419 * t1379 - t1412 * t1439;
t1364 = t1419 * t1378 + t1411 * t1439;
t1363 = -t1415 * t1379 + t1412 * t1438;
t1362 = t1415 * t1378 - t1411 * t1438;
t1361 = t1419 * t1380 - t1415 * t1384;
t1360 = t1415 * t1380 + t1419 * t1384;
t1357 = t1456 + 0.2e1 * t1447;
t1356 = -t1340 + 0.2e1 * t1446;
t1355 = -qJDD(4) + t1445;
t1353 = -t1421 - t1452;
t1344 = -t1450 - t1453;
t1342 = -t1411 * t1359 + t1433;
t1341 = -t1451 - t1452;
t1338 = -t1415 * t1366 + t1419 * t1367;
t1337 = t1419 * t1366 + t1415 * t1367;
t1336 = t1418 * t1355 - t1414 * t1369;
t1335 = t1414 * t1355 + t1418 * t1369;
t1329 = t1418 * t1340 + t1414 * t1456;
t1328 = t1414 * t1340 - t1418 * t1456;
t1327 = t1418 * t1353 - t1414 * t1354;
t1326 = t1414 * t1353 + t1418 * t1354;
t1325 = t1434 - t1448;
t1324 = -t1434 - t1448;
t1323 = -t1450 - t1454;
t1322 = -t1411 * t1342 + t1412 * t1343;
t1321 = t1412 * t1342 + t1411 * t1343;
t1320 = -t1453 - t1454;
t1319 = -t1411 * t1335 + t1412 * t1336;
t1318 = t1412 * t1335 + t1411 * t1336;
t1315 = t1417 * t1325 - t1413 * t1344;
t1314 = t1413 * t1325 + t1417 * t1344;
t1313 = t1419 * t1322 + t1415 * t1352;
t1312 = t1415 * t1322 - t1419 * t1352;
t1311 = pkin(4) * t1427 - t1452 * pkin(8) + t1377 * t1368 + t1339;
t1310 = -t1411 * t1328 + t1412 * t1329;
t1309 = t1412 * t1328 + t1411 * t1329;
t1308 = t1436 * t1346 + t1426;
t1307 = -t1455 * t1346 - t1426;
t1306 = -t1436 * t1348 + t1432;
t1305 = t1455 * t1348 - t1432;
t1304 = -t1411 * t1326 + t1412 * t1327;
t1303 = t1412 * t1326 + t1411 * t1327;
t1302 = t1419 * t1319 + t1415 * t1357;
t1301 = t1415 * t1319 - t1419 * t1357;
t1300 = t1417 * t1323 - t1413 * t1324;
t1299 = t1413 * t1323 + t1417 * t1324;
t1298 = t1419 * t1304 + t1415 * t1356;
t1297 = t1415 * t1304 - t1419 * t1356;
t1296 = -t1452 * pkin(4) - t1427 * pkin(8) - qJD(4) * t1368 + t1317;
t1295 = t1419 * t1310 + t1415 * t1341;
t1294 = t1415 * t1310 - t1419 * t1341;
t1293 = (-t1358 + t1447) * pkin(8) + t1354 * pkin(4) + t1316;
t1292 = -t1414 * t1316 + t1418 * t1317;
t1291 = t1418 * t1316 + t1414 * t1317;
t1290 = -t1414 * t1314 + t1418 * t1315;
t1289 = t1418 * t1314 + t1414 * t1315;
t1288 = t1417 * t1306 - t1413 * t1308;
t1287 = t1413 * t1306 + t1417 * t1308;
t1286 = -t1414 * t1299 + t1418 * t1300;
t1285 = t1418 * t1299 + t1414 * t1300;
t1284 = t1413 * t1293 + t1417 * t1296;
t1283 = t1417 * t1293 - t1413 * t1296;
t1282 = -t1411 * t1291 + t1412 * t1292;
t1281 = t1412 * t1291 + t1411 * t1292;
t1280 = -t1411 * t1289 + t1412 * t1290;
t1279 = t1412 * t1289 + t1411 * t1290;
t1278 = t1419 * t1282 + t1415 * t1339;
t1277 = t1415 * t1282 - t1419 * t1339;
t1276 = -t1414 * t1287 + t1418 * t1288;
t1275 = t1418 * t1287 + t1414 * t1288;
t1274 = -t1411 * t1285 + t1412 * t1286;
t1273 = t1412 * t1285 + t1411 * t1286;
t1272 = t1419 * t1280 + t1415 * t1307;
t1271 = t1415 * t1280 - t1419 * t1307;
t1270 = t1419 * t1274 + t1415 * t1305;
t1269 = t1415 * t1274 - t1419 * t1305;
t1268 = -t1413 * t1283 + t1417 * t1284;
t1267 = t1417 * t1283 + t1413 * t1284;
t1266 = -t1411 * t1275 + t1412 * t1276;
t1265 = t1412 * t1275 + t1411 * t1276;
t1264 = t1419 * t1266 + t1415 * t1320;
t1263 = t1415 * t1266 - t1419 * t1320;
t1262 = -t1414 * t1267 + t1418 * t1268;
t1261 = t1418 * t1267 + t1414 * t1268;
t1260 = -t1411 * t1261 + t1412 * t1262;
t1259 = t1412 * t1261 + t1411 * t1262;
t1258 = t1419 * t1260 + t1415 * t1311;
t1257 = t1415 * t1260 - t1419 * t1311;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1321, 0, 0, 0, 0, 0, 0, t1303, t1318, t1309, t1281, 0, 0, 0, 0, 0, 0, t1273, t1279, t1265, t1259; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1391, t1390, 0, t1416 * t1397 + t1420 * t1398, 0, 0, 0, 0, 0, 0, t1459, t1460, 0, t1420 * t1337 + t1416 * t1338, 0, 0, 0, 0, 0, 0, t1420 * t1363 + t1416 * t1365, t1420 * t1362 + t1416 * t1364, t1420 * t1360 + t1416 * t1361, t1420 * t1312 + t1416 * t1313, 0, 0, 0, 0, 0, 0, t1420 * t1297 + t1416 * t1298, t1420 * t1301 + t1416 * t1302, t1420 * t1294 + t1416 * t1295, t1420 * t1277 + t1416 * t1278, 0, 0, 0, 0, 0, 0, t1420 * t1269 + t1416 * t1270, t1420 * t1271 + t1416 * t1272, t1420 * t1263 + t1416 * t1264, t1420 * t1257 + t1416 * t1258; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1390, t1391, 0, -t1420 * t1397 + t1416 * t1398, 0, 0, 0, 0, 0, 0, -t1460, t1459, 0, t1416 * t1337 - t1420 * t1338, 0, 0, 0, 0, 0, 0, t1416 * t1363 - t1420 * t1365, t1416 * t1362 - t1420 * t1364, t1416 * t1360 - t1420 * t1361, t1416 * t1312 - t1420 * t1313, 0, 0, 0, 0, 0, 0, t1416 * t1297 - t1420 * t1298, t1416 * t1301 - t1420 * t1302, t1416 * t1294 - t1420 * t1295, t1416 * t1277 - t1420 * t1278, 0, 0, 0, 0, 0, 0, t1416 * t1269 - t1420 * t1270, t1416 * t1271 - t1420 * t1272, t1416 * t1263 - t1420 * t1264, t1416 * t1257 - t1420 * t1258; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1422, -qJDD(1), 0, t1397, 0, 0, 0, 0, 0, 0, t1431, t1387, 0, t1338, 0, 0, 0, 0, 0, 0, t1365, t1364, t1361, t1313, 0, 0, 0, 0, 0, 0, t1298, t1302, t1295, t1278, 0, 0, 0, 0, 0, 0, t1270, t1272, t1264, t1258; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1422, 0, t1398, 0, 0, 0, 0, 0, 0, -t1387, t1431, 0, t1337, 0, 0, 0, 0, 0, 0, t1363, t1362, t1360, t1312, 0, 0, 0, 0, 0, 0, t1297, t1301, t1294, t1277, 0, 0, 0, 0, 0, 0, t1269, t1271, t1263, t1257; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1321, 0, 0, 0, 0, 0, 0, t1303, t1318, t1309, t1281, 0, 0, 0, 0, 0, 0, t1273, t1279, t1265, t1259; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1406, -t1407, 0, t1367, 0, 0, 0, 0, 0, 0, -t1379, t1378, t1380, t1322, 0, 0, 0, 0, 0, 0, t1304, t1319, t1310, t1282, 0, 0, 0, 0, 0, 0, t1274, t1280, t1266, t1260; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1407, -t1406, 0, t1366, 0, 0, 0, 0, 0, 0, t1402, -t1442, t1384, -t1352, 0, 0, 0, 0, 0, 0, -t1356, -t1357, -t1341, -t1339, 0, 0, 0, 0, 0, 0, -t1305, -t1307, -t1320, -t1311; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1321, 0, 0, 0, 0, 0, 0, t1303, t1318, t1309, t1281, 0, 0, 0, 0, 0, 0, t1273, t1279, t1265, t1259; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1443, t1392, t1402, t1343, 0, 0, 0, 0, 0, 0, t1327, t1336, t1329, t1292, 0, 0, 0, 0, 0, 0, t1286, t1290, t1276, t1262; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1392, -t1437, -t1442, t1342, 0, 0, 0, 0, 0, 0, t1326, t1335, t1328, t1291, 0, 0, 0, 0, 0, 0, t1285, t1289, t1275, t1261; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1402, t1442, -t1384, t1352, 0, 0, 0, 0, 0, 0, t1356, t1357, t1341, t1339, 0, 0, 0, 0, 0, 0, t1305, t1307, t1320, t1311; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1353, t1355, t1340, t1317, 0, 0, 0, 0, 0, 0, t1300, t1315, t1288, t1268; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1354, t1369, -t1456, t1316, 0, 0, 0, 0, 0, 0, t1299, t1314, t1287, t1267; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1356, t1357, t1341, t1339, 0, 0, 0, 0, 0, 0, t1305, t1307, t1320, t1311; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1323, t1325, t1306, t1284; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1324, t1344, t1308, t1283; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1305, t1307, t1320, t1311;];
f_new_reg = t1;
