% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:34
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPRR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR5_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR5_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR5_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:34:45
% EndTime: 2019-12-05 18:34:48
% DurationCPUTime: 3.02s
% Computational Cost: add. (20656->204), mult. (28988->297), div. (0->0), fcn. (20569->10), ass. (0->169)
t1400 = sin(pkin(9));
t1401 = cos(pkin(9));
t1403 = sin(qJ(4));
t1407 = cos(qJ(4));
t1450 = -t1400 * t1403 + t1401 * t1407;
t1399 = qJD(1) + qJD(2);
t1395 = t1399 ^ 2;
t1404 = sin(qJ(2));
t1396 = qJDD(1) + qJDD(2);
t1408 = cos(qJ(2));
t1427 = t1408 * t1396;
t1376 = t1404 * t1395 - t1427;
t1405 = sin(qJ(1));
t1409 = cos(qJ(1));
t1428 = t1404 * t1396;
t1420 = -t1408 * t1395 - t1428;
t1449 = t1405 * t1376 + t1409 * t1420;
t1448 = t1409 * t1376 - t1405 * t1420;
t1419 = t1400 * t1407 + t1401 * t1403;
t1445 = t1419 * t1396;
t1397 = t1401 ^ 2;
t1412 = t1400 ^ 2;
t1424 = t1397 + t1412;
t1373 = t1424 * t1395;
t1398 = qJD(4) + qJD(5);
t1444 = qJD(5) + t1398;
t1364 = t1450 * t1399;
t1366 = t1419 * t1399;
t1402 = sin(qJ(5));
t1406 = cos(qJ(5));
t1335 = -t1406 * t1364 + t1402 * t1366;
t1443 = t1335 ^ 2;
t1337 = t1402 * t1364 + t1406 * t1366;
t1442 = t1337 ^ 2;
t1441 = t1364 ^ 2;
t1440 = t1366 ^ 2;
t1439 = t1398 ^ 2;
t1438 = qJD(3) * t1399;
t1437 = t1337 * t1335;
t1436 = t1364 * qJD(4);
t1435 = t1366 * qJD(4);
t1434 = t1366 * t1364;
t1433 = t1395 * t1401;
t1432 = t1397 * t1395;
t1431 = t1400 * t1396;
t1391 = t1401 * t1396;
t1426 = t1412 * t1395;
t1425 = qJD(5) - t1398;
t1386 = t1405 * g(2) - t1409 * g(3);
t1411 = qJD(1) ^ 2;
t1378 = -t1411 * pkin(1) + t1386;
t1387 = t1409 * g(2) + t1405 * g(3);
t1417 = qJDD(1) * pkin(1) + t1387;
t1356 = t1408 * t1378 + t1404 * t1417;
t1348 = -t1395 * pkin(2) + t1396 * qJ(3) + t1356;
t1422 = -t1401 * g(1) - 0.2e1 * t1400 * t1438;
t1322 = (pkin(3) * t1433 - pkin(7) * t1396 - t1348) * t1400 + t1422;
t1332 = -t1400 * g(1) + (t1348 + 0.2e1 * t1438) * t1401;
t1323 = -pkin(3) * t1432 + pkin(7) * t1391 + t1332;
t1306 = t1403 * t1322 + t1407 * t1323;
t1423 = -qJDD(4) - qJDD(5);
t1305 = t1407 * t1322 - t1403 * t1323;
t1347 = t1445 + t1436;
t1329 = t1450 * t1396;
t1416 = -t1329 + t1435;
t1421 = -t1402 * t1347 - t1406 * t1416;
t1355 = -t1404 * t1378 + t1408 * t1417;
t1343 = qJDD(4) + t1434;
t1341 = -t1396 * pkin(2) - t1395 * qJ(3) + qJDD(3) - t1355;
t1328 = -pkin(3) * t1391 + t1341 + (-t1426 - t1432) * pkin(7);
t1415 = -t1406 * t1347 + t1402 * t1416;
t1410 = qJD(4) ^ 2;
t1381 = t1400 * t1433;
t1380 = -t1409 * qJDD(1) + t1405 * t1411;
t1379 = t1405 * qJDD(1) + t1409 * t1411;
t1369 = t1424 * t1396;
t1368 = t1401 * t1373;
t1367 = t1400 * t1373;
t1358 = -t1410 - t1440;
t1357 = qJD(4) * pkin(4) - t1366 * pkin(8);
t1354 = -t1408 * t1368 - t1401 * t1428;
t1353 = t1408 * t1367 + t1400 * t1428;
t1352 = -t1404 * t1368 + t1401 * t1427;
t1351 = t1404 * t1367 - t1400 * t1427;
t1350 = t1408 * t1369 - t1404 * t1373;
t1349 = t1404 * t1369 + t1408 * t1373;
t1346 = t1445 + 0.2e1 * t1436;
t1345 = -t1329 + 0.2e1 * t1435;
t1344 = -qJDD(4) + t1434;
t1342 = -t1410 - t1441;
t1333 = -t1439 - t1442;
t1331 = -t1400 * t1348 + t1422;
t1330 = -t1440 - t1441;
t1327 = -t1404 * t1355 + t1408 * t1356;
t1326 = t1408 * t1355 + t1404 * t1356;
t1325 = t1407 * t1344 - t1403 * t1358;
t1324 = t1403 * t1344 + t1407 * t1358;
t1318 = t1407 * t1329 + t1403 * t1445;
t1317 = t1403 * t1329 - t1407 * t1445;
t1316 = t1407 * t1342 - t1403 * t1343;
t1315 = t1403 * t1342 + t1407 * t1343;
t1314 = t1423 - t1437;
t1313 = -t1423 - t1437;
t1312 = -t1439 - t1443;
t1311 = -t1400 * t1331 + t1401 * t1332;
t1310 = t1401 * t1331 + t1400 * t1332;
t1309 = -t1442 - t1443;
t1308 = -t1400 * t1324 + t1401 * t1325;
t1307 = t1401 * t1324 + t1400 * t1325;
t1304 = t1406 * t1314 - t1402 * t1333;
t1303 = t1402 * t1314 + t1406 * t1333;
t1302 = t1408 * t1311 + t1404 * t1341;
t1301 = t1404 * t1311 - t1408 * t1341;
t1300 = t1416 * pkin(4) - t1441 * pkin(8) + t1366 * t1357 + t1328;
t1299 = -t1400 * t1317 + t1401 * t1318;
t1298 = t1401 * t1317 + t1400 * t1318;
t1297 = t1425 * t1335 + t1415;
t1296 = -t1444 * t1335 - t1415;
t1295 = -t1425 * t1337 + t1421;
t1294 = t1444 * t1337 - t1421;
t1293 = -t1400 * t1315 + t1401 * t1316;
t1292 = t1401 * t1315 + t1400 * t1316;
t1291 = t1408 * t1308 + t1404 * t1346;
t1290 = t1404 * t1308 - t1408 * t1346;
t1289 = t1406 * t1312 - t1402 * t1313;
t1288 = t1402 * t1312 + t1406 * t1313;
t1287 = t1408 * t1293 + t1404 * t1345;
t1286 = t1404 * t1293 - t1408 * t1345;
t1285 = -t1441 * pkin(4) - t1416 * pkin(8) - qJD(4) * t1357 + t1306;
t1284 = t1408 * t1299 + t1404 * t1330;
t1283 = t1404 * t1299 - t1408 * t1330;
t1282 = (-t1347 + t1436) * pkin(8) + t1343 * pkin(4) + t1305;
t1281 = -t1403 * t1305 + t1407 * t1306;
t1280 = t1407 * t1305 + t1403 * t1306;
t1279 = -t1403 * t1303 + t1407 * t1304;
t1278 = t1407 * t1303 + t1403 * t1304;
t1277 = t1406 * t1295 - t1402 * t1297;
t1276 = t1402 * t1295 + t1406 * t1297;
t1275 = -t1403 * t1288 + t1407 * t1289;
t1274 = t1407 * t1288 + t1403 * t1289;
t1273 = t1402 * t1282 + t1406 * t1285;
t1272 = t1406 * t1282 - t1402 * t1285;
t1271 = -t1400 * t1280 + t1401 * t1281;
t1270 = t1401 * t1280 + t1400 * t1281;
t1269 = -t1400 * t1278 + t1401 * t1279;
t1268 = t1401 * t1278 + t1400 * t1279;
t1267 = t1408 * t1271 + t1404 * t1328;
t1266 = t1404 * t1271 - t1408 * t1328;
t1265 = -t1403 * t1276 + t1407 * t1277;
t1264 = t1407 * t1276 + t1403 * t1277;
t1263 = -t1400 * t1274 + t1401 * t1275;
t1262 = t1401 * t1274 + t1400 * t1275;
t1261 = t1408 * t1269 + t1404 * t1296;
t1260 = t1404 * t1269 - t1408 * t1296;
t1259 = t1408 * t1263 + t1404 * t1294;
t1258 = t1404 * t1263 - t1408 * t1294;
t1257 = -t1402 * t1272 + t1406 * t1273;
t1256 = t1406 * t1272 + t1402 * t1273;
t1255 = -t1400 * t1264 + t1401 * t1265;
t1254 = t1401 * t1264 + t1400 * t1265;
t1253 = t1408 * t1255 + t1404 * t1309;
t1252 = t1404 * t1255 - t1408 * t1309;
t1251 = -t1403 * t1256 + t1407 * t1257;
t1250 = t1407 * t1256 + t1403 * t1257;
t1249 = -t1400 * t1250 + t1401 * t1251;
t1248 = t1401 * t1250 + t1400 * t1251;
t1247 = t1408 * t1249 + t1404 * t1300;
t1246 = t1404 * t1249 - t1408 * t1300;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1310, 0, 0, 0, 0, 0, 0, t1292, t1307, t1298, t1270, 0, 0, 0, 0, 0, 0, t1262, t1268, t1254, t1248; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1380, t1379, 0, -t1405 * t1386 - t1409 * t1387, 0, 0, 0, 0, 0, 0, t1448, -t1449, 0, -t1409 * t1326 - t1405 * t1327, 0, 0, 0, 0, 0, 0, -t1409 * t1352 - t1405 * t1354, -t1409 * t1351 - t1405 * t1353, -t1409 * t1349 - t1405 * t1350, -t1409 * t1301 - t1405 * t1302, 0, 0, 0, 0, 0, 0, -t1409 * t1286 - t1405 * t1287, -t1409 * t1290 - t1405 * t1291, -t1409 * t1283 - t1405 * t1284, -t1409 * t1266 - t1405 * t1267, 0, 0, 0, 0, 0, 0, -t1409 * t1258 - t1405 * t1259, -t1409 * t1260 - t1405 * t1261, -t1409 * t1252 - t1405 * t1253, -t1409 * t1246 - t1405 * t1247; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1379, t1380, 0, t1409 * t1386 - t1405 * t1387, 0, 0, 0, 0, 0, 0, t1449, t1448, 0, -t1405 * t1326 + t1409 * t1327, 0, 0, 0, 0, 0, 0, -t1405 * t1352 + t1409 * t1354, -t1405 * t1351 + t1409 * t1353, -t1405 * t1349 + t1409 * t1350, -t1405 * t1301 + t1409 * t1302, 0, 0, 0, 0, 0, 0, -t1405 * t1286 + t1409 * t1287, -t1405 * t1290 + t1409 * t1291, -t1405 * t1283 + t1409 * t1284, -t1405 * t1266 + t1409 * t1267, 0, 0, 0, 0, 0, 0, -t1405 * t1258 + t1409 * t1259, -t1405 * t1260 + t1409 * t1261, -t1405 * t1252 + t1409 * t1253, -t1405 * t1246 + t1409 * t1247; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1411, -qJDD(1), 0, t1386, 0, 0, 0, 0, 0, 0, t1420, t1376, 0, t1327, 0, 0, 0, 0, 0, 0, t1354, t1353, t1350, t1302, 0, 0, 0, 0, 0, 0, t1287, t1291, t1284, t1267, 0, 0, 0, 0, 0, 0, t1259, t1261, t1253, t1247; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1411, 0, t1387, 0, 0, 0, 0, 0, 0, -t1376, t1420, 0, t1326, 0, 0, 0, 0, 0, 0, t1352, t1351, t1349, t1301, 0, 0, 0, 0, 0, 0, t1286, t1290, t1283, t1266, 0, 0, 0, 0, 0, 0, t1258, t1260, t1252, t1246; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1310, 0, 0, 0, 0, 0, 0, t1292, t1307, t1298, t1270, 0, 0, 0, 0, 0, 0, t1262, t1268, t1254, t1248; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1395, -t1396, 0, t1356, 0, 0, 0, 0, 0, 0, -t1368, t1367, t1369, t1311, 0, 0, 0, 0, 0, 0, t1293, t1308, t1299, t1271, 0, 0, 0, 0, 0, 0, t1263, t1269, t1255, t1249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1396, -t1395, 0, t1355, 0, 0, 0, 0, 0, 0, t1391, -t1431, t1373, -t1341, 0, 0, 0, 0, 0, 0, -t1345, -t1346, -t1330, -t1328, 0, 0, 0, 0, 0, 0, -t1294, -t1296, -t1309, -t1300; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1310, 0, 0, 0, 0, 0, 0, t1292, t1307, t1298, t1270, 0, 0, 0, 0, 0, 0, t1262, t1268, t1254, t1248; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1432, t1381, t1391, t1332, 0, 0, 0, 0, 0, 0, t1316, t1325, t1318, t1281, 0, 0, 0, 0, 0, 0, t1275, t1279, t1265, t1251; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1381, -t1426, -t1431, t1331, 0, 0, 0, 0, 0, 0, t1315, t1324, t1317, t1280, 0, 0, 0, 0, 0, 0, t1274, t1278, t1264, t1250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1391, t1431, -t1373, t1341, 0, 0, 0, 0, 0, 0, t1345, t1346, t1330, t1328, 0, 0, 0, 0, 0, 0, t1294, t1296, t1309, t1300; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1342, t1344, t1329, t1306, 0, 0, 0, 0, 0, 0, t1289, t1304, t1277, t1257; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1343, t1358, -t1445, t1305, 0, 0, 0, 0, 0, 0, t1288, t1303, t1276, t1256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1345, t1346, t1330, t1328, 0, 0, 0, 0, 0, 0, t1294, t1296, t1309, t1300; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1312, t1314, t1295, t1273; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1313, t1333, t1297, t1272; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1294, t1296, t1309, t1300;];
f_new_reg = t1;
