% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 12:04
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPRR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR5_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR5_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR5_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 12:04:07
% EndTime: 2020-01-03 12:04:19
% DurationCPUTime: 11.58s
% Computational Cost: add. (78125->556), mult. (109665->855), div. (0->0), fcn. (77666->10), ass. (0->380)
t651 = cos(qJ(2));
t682 = (qJD(1) + qJD(2));
t680 = t682 ^ 2;
t641 = qJDD(1) + qJDD(2);
t647 = sin(qJ(2));
t695 = t647 * t641;
t613 = t651 * t680 + t695;
t669 = t647 * t680;
t687 = t651 * t641;
t616 = t669 - t687;
t648 = sin(qJ(1));
t652 = cos(qJ(1));
t570 = t652 * t613 - t648 * t616;
t595 = pkin(6) * t613 - t651 * g(1);
t719 = pkin(6) * t616 - t647 * g(1);
t729 = -pkin(5) * t570 - t652 * t595 + t648 * t719;
t662 = t648 * t613 + t652 * t616;
t728 = pkin(5) * t662 + t648 * t595 + t652 * t719;
t625 = t648 * g(2) - t652 * g(3);
t711 = qJD(1) ^ 2;
t619 = -t711 * pkin(1) - t625;
t626 = t652 * g(2) + t648 * g(3);
t659 = qJDD(1) * pkin(1) - t626;
t579 = t651 * t619 + t647 * t659;
t720 = -pkin(2) * t680 + t641 * qJ(3) + (2 * qJD(3) * t682) + t579;
t578 = t647 * t619 - t651 * t659;
t671 = t647 * t578 + t651 * t579;
t528 = t651 * t578 - t647 * t579;
t686 = t652 * t528;
t475 = t648 * t671 - t686;
t694 = t648 * t528;
t725 = t652 * t671 + t694;
t645 = sin(qJ(5));
t643 = sin(pkin(9));
t644 = cos(pkin(9));
t650 = cos(qJ(4));
t668 = t650 * t682;
t646 = sin(qJ(4));
t670 = t646 * t682;
t599 = t643 * t670 - t644 * t668;
t601 = t643 * t668 + t644 * t670;
t649 = cos(qJ(5));
t545 = t649 * t599 + t645 * t601;
t547 = -t645 * t599 + t649 * t601;
t497 = t547 * t545;
t681 = qJDD(4) + qJDD(5);
t715 = -t497 + t681;
t724 = t645 * t715;
t562 = t601 * t599;
t713 = qJDD(4) - t562;
t723 = t646 * t713;
t722 = t649 * t715;
t721 = t650 * t713;
t656 = t644 ^ 2;
t632 = t656 * t680;
t654 = t643 ^ 2;
t667 = t654 * t680;
t611 = t667 + t632;
t603 = t611 * t644;
t675 = t644 * t687;
t574 = -t647 * t603 + t675;
t576 = t651 * t603 + t644 * t695;
t523 = t652 * t574 - t648 * t576;
t525 = t648 * t574 + t652 * t576;
t716 = (t650 * t643 + t646 * t644) * t641;
t642 = qJD(4) + qJD(5);
t540 = t642 * t545;
t707 = t641 * t644;
t596 = t646 * t643 * t641 - t650 * t707;
t684 = t601 * qJD(4);
t557 = -t596 - t684;
t685 = t599 * qJD(4);
t559 = t716 - t685;
t658 = t545 * qJD(5) - t645 * t557 - t649 * t559;
t714 = -t540 - t658;
t672 = -t649 * t557 + t645 * t559;
t440 = (qJD(5) - t642) * t547 + t672;
t543 = t545 ^ 2;
t544 = t547 ^ 2;
t712 = t599 ^ 2;
t598 = t601 ^ 2;
t639 = t642 ^ 2;
t633 = t641 * pkin(2);
t710 = t644 * g(1);
t706 = t642 * t645;
t705 = t642 * t649;
t509 = -t710 + (pkin(3) * t644 * t680 - t641 * pkin(7) - t720) * t643;
t535 = -t643 * g(1) + t720 * t644;
t510 = -pkin(3) * t632 + pkin(7) * t707 + t535;
t462 = -t650 * t509 + t646 * t510;
t463 = t646 * t509 + t650 * t510;
t404 = -t650 * t462 + t646 * t463;
t704 = t643 * t404;
t703 = t643 * t644;
t702 = t644 * t404;
t551 = -t680 * qJ(3) + qJDD(3) + t578 - t633;
t530 = -pkin(3) * t707 - t611 * pkin(7) + t551;
t584 = qJD(4) * pkin(4) - t601 * pkin(8);
t453 = -t557 * pkin(4) - t712 * pkin(8) + t601 * t584 + t530;
t701 = t645 * t453;
t494 = t497 + t681;
t700 = t645 * t494;
t413 = (-t559 - t685) * pkin(8) + t713 * pkin(4) - t462;
t417 = -t712 * pkin(4) + t557 * pkin(8) - qJD(4) * t584 + t463;
t370 = -t649 * t413 + t645 * t417;
t371 = t645 * t413 + t649 * t417;
t334 = -t649 * t370 + t645 * t371;
t699 = t646 * t334;
t698 = t646 * t530;
t554 = qJDD(4) + t562;
t697 = t646 * t554;
t696 = t647 * t551;
t693 = t649 * t453;
t692 = t649 * t494;
t691 = t650 * t334;
t690 = t650 * t530;
t689 = t650 * t554;
t688 = t651 * t551;
t679 = t647 * t497;
t678 = t647 * t562;
t677 = t651 * t497;
t676 = t651 * t562;
t674 = -t551 + t633;
t620 = -t648 * qJDD(1) - t652 * t711;
t673 = pkin(5) * t620 + t652 * g(1);
t335 = t645 * t370 + t649 * t371;
t405 = t646 * t462 + t650 * t463;
t534 = t720 * t643 + t710;
t486 = t643 * t534 + t644 * t535;
t582 = -t648 * t625 - t652 * t626;
t485 = t644 * t534 - t643 * t535;
t580 = t613 * t703;
t581 = t643 * t675 - t669 * t703;
t664 = t652 * t580 + t648 * t581;
t663 = t648 * t580 - t652 * t581;
t583 = t652 * t625 - t648 * t626;
t653 = qJD(4) ^ 2;
t631 = t656 * t641;
t630 = t654 * t641;
t621 = t652 * qJDD(1) - t648 * t711;
t612 = -t667 + t632;
t607 = t631 - t630;
t606 = t631 + t630;
t605 = pkin(5) * t621 + t648 * g(1);
t602 = t611 * t643;
t587 = -t598 - t653;
t586 = -t598 + t653;
t585 = -t653 + t712;
t575 = t651 * t602 + t643 * t695;
t572 = t647 * t602 - t643 * t687;
t566 = t651 * t607 - t647 * t612;
t565 = t651 * t606 - t647 * t611;
t564 = t647 * t607 + t651 * t612;
t563 = t647 * t606 + t651 * t611;
t560 = -t598 + t712;
t558 = t716 - 0.2e1 * t685;
t556 = t596 + 0.2e1 * t684;
t552 = -t653 - t712;
t542 = (-t599 * t650 + t601 * t646) * qJD(4);
t541 = (-t599 * t646 - t601 * t650) * qJD(4);
t538 = -t544 + t639;
t537 = t543 - t639;
t536 = -t544 - t639;
t533 = -t598 - t712;
t524 = t648 * t572 - t652 * t575;
t522 = t652 * t572 + t648 * t575;
t521 = t650 * t559 - t646 * t684;
t520 = t646 * t559 + t650 * t684;
t519 = -t646 * t557 + t650 * t685;
t518 = t650 * t557 + t646 * t685;
t517 = -t646 * t587 - t689;
t516 = -t646 * t586 + t721;
t515 = t650 * t585 - t697;
t514 = t650 * t587 - t697;
t513 = t650 * t586 + t723;
t512 = t646 * t585 + t689;
t511 = pkin(1) * g(1) + pkin(6) * t671;
t505 = t648 * t563 - t652 * t565;
t504 = t652 * t563 + t648 * t565;
t503 = -t650 * t556 - t646 * t558;
t502 = -t596 * t650 + t646 * t716;
t501 = -t646 * t556 + t650 * t558;
t500 = -t596 * t646 - t650 * t716;
t499 = t650 * t552 - t723;
t498 = t646 * t552 + t721;
t496 = -t544 + t543;
t492 = -t639 - t543;
t491 = -t643 * t541 + t644 * t542;
t490 = (-t545 * t649 + t547 * t645) * t642;
t489 = (-t545 * t645 - t547 * t649) * t642;
t488 = t647 * qJDD(4) + t651 * t491;
t487 = -t651 * qJDD(4) + t647 * t491;
t482 = -t547 * qJD(5) - t672;
t481 = -t543 - t544;
t480 = -pkin(6) * t572 - t647 * t535 + t644 * t688;
t479 = -pkin(6) * t574 - t647 * t534 + t643 * t688;
t478 = pkin(6) * t575 + t651 * t535 + t644 * t696;
t477 = -pkin(6) * t576 + t651 * t534 + t643 * t696;
t474 = -pkin(7) * t514 + t690;
t473 = -t643 * t520 + t644 * t521;
t472 = -t643 * t518 + t644 * t519;
t471 = -t643 * t514 + t644 * t517;
t470 = -t643 * t513 + t644 * t516;
t469 = -t643 * t512 + t644 * t515;
t468 = t644 * t514 + t643 * t517;
t467 = t649 * t537 - t700;
t466 = -t645 * t538 + t722;
t465 = t645 * t537 + t692;
t464 = t649 * t538 + t724;
t461 = -t645 * t536 - t692;
t460 = t649 * t536 - t700;
t458 = -pkin(7) * t498 + t698;
t457 = -pkin(6) * t563 + t651 * t485;
t456 = pkin(6) * t565 + t647 * t485;
t455 = t651 * t486 + t696;
t454 = t647 * t486 - t688;
t452 = t651 * t470 + t647 * t716;
t451 = t651 * t469 - t647 * t596;
t450 = t647 * t470 - t651 * t716;
t449 = t647 * t469 + t651 * t596;
t448 = -pkin(3) * t558 + pkin(7) * t517 + t698;
t447 = -t643 * t501 + t644 * t503;
t446 = -t643 * t500 + t644 * t502;
t445 = t644 * t500 + t643 * t502;
t444 = -t540 + t658;
t439 = (qJD(5) + t642) * t547 + t672;
t438 = -t643 * t498 + t644 * t499;
t437 = t644 * t498 + t643 * t499;
t436 = t651 * t473 + t678;
t435 = t651 * t472 - t678;
t434 = t647 * t473 - t676;
t433 = t647 * t472 + t676;
t432 = -t547 * t706 - t649 * t658;
t431 = t547 * t705 - t645 * t658;
t430 = -t645 * t482 + t545 * t705;
t429 = t649 * t482 + t545 * t706;
t428 = t651 * t471 + t647 * t558;
t427 = t647 * t471 - t651 * t558;
t426 = t649 * t492 - t724;
t425 = t645 * t492 + t722;
t424 = -pkin(3) * t556 + pkin(7) * t499 - t690;
t423 = -t646 * t489 + t650 * t490;
t422 = t650 * t489 + t646 * t490;
t421 = t651 * t447 - t647 * t560;
t420 = t647 * t447 + t651 * t560;
t419 = t651 * t438 + t647 * t556;
t418 = t647 * t438 - t651 * t556;
t415 = t651 * t446 + t647 * t533;
t414 = t647 * t446 - t651 * t533;
t410 = -pkin(2) * t445 - pkin(3) * t500;
t409 = -t646 * t465 + t650 * t467;
t408 = -t646 * t464 + t650 * t466;
t407 = t650 * t465 + t646 * t467;
t406 = t650 * t464 + t646 * t466;
t403 = -t646 * t460 + t650 * t461;
t402 = t650 * t460 + t646 * t461;
t401 = -pkin(8) * t460 + t693;
t400 = t648 * t454 - t652 * t455;
t399 = t652 * t454 + t648 * t455;
t398 = -pkin(8) * t425 + t701;
t397 = -pkin(2) * t468 - pkin(3) * t514 + t463;
t396 = -t440 * t649 - t645 * t444;
t395 = -t649 * t439 - t645 * t714;
t394 = -t440 * t645 + t649 * t444;
t393 = -t645 * t439 + t649 * t714;
t392 = -pkin(3) * t530 + pkin(7) * t405;
t391 = -t646 * t431 + t650 * t432;
t390 = -t646 * t429 + t650 * t430;
t389 = t650 * t431 + t646 * t432;
t388 = t650 * t429 + t646 * t430;
t387 = t648 * t427 - t652 * t428;
t386 = t652 * t427 + t648 * t428;
t385 = -t646 * t425 + t650 * t426;
t384 = t650 * t425 + t646 * t426;
t383 = -pkin(7) * t500 - t404;
t382 = -pkin(6) * t454 - (pkin(2) * t647 - qJ(3) * t651) * t485;
t381 = -pkin(2) * t437 - pkin(3) * t498 + t462;
t380 = -t643 * t422 + t644 * t423;
t379 = t651 * t380 + t647 * t681;
t378 = t647 * t380 - t651 * t681;
t377 = -pkin(3) * t533 + pkin(7) * t502 + t405;
t376 = t648 * t418 - t652 * t419;
t375 = t652 * t418 + t648 * t419;
t374 = -qJ(3) * t468 - t643 * t448 + t644 * t474;
t373 = t648 * t414 - t652 * t415;
t372 = t652 * t414 + t648 * t415;
t368 = -pkin(4) * t714 + pkin(8) * t461 + t701;
t367 = pkin(6) * t455 - (-pkin(2) * t651 - qJ(3) * t647 - pkin(1)) * t485;
t366 = -qJ(3) * t437 - t643 * t424 + t644 * t458;
t365 = -pkin(4) * t439 + pkin(8) * t426 - t693;
t364 = -t643 * t407 + t644 * t409;
t363 = -t643 * t406 + t644 * t408;
t362 = t644 * t405 - t704;
t361 = t643 * t405 + t702;
t360 = -t643 * t402 + t644 * t403;
t359 = t644 * t402 + t643 * t403;
t358 = t651 * t362 + t647 * t530;
t357 = t647 * t362 - t651 * t530;
t356 = -t646 * t394 + t650 * t396;
t355 = -t646 * t393 + t650 * t395;
t354 = t650 * t394 + t646 * t396;
t353 = t650 * t393 + t646 * t395;
t352 = -t643 * t389 + t644 * t391;
t351 = -t643 * t388 + t644 * t390;
t350 = -t643 * t384 + t644 * t385;
t349 = t644 * t384 + t643 * t385;
t348 = t651 * t364 - t647 * t440;
t347 = t651 * t363 - t647 * t444;
t346 = t647 * t364 + t651 * t440;
t345 = t647 * t363 + t651 * t444;
t344 = t651 * t360 + t647 * t714;
t343 = t647 * t360 - t651 * t714;
t342 = t651 * t352 + t679;
t341 = t651 * t351 - t679;
t340 = t647 * t352 - t677;
t339 = t647 * t351 + t677;
t338 = -pkin(2) * t361 - pkin(3) * t404;
t337 = t651 * t350 + t647 * t439;
t336 = t647 * t350 - t651 * t439;
t333 = -pkin(6) * t427 + t651 * t374 - t647 * t397;
t332 = -qJ(3) * t445 - t643 * t377 + t644 * t383;
t331 = -pkin(7) * t402 - t646 * t368 + t650 * t401;
t330 = -pkin(4) * t453 + pkin(8) * t335;
t329 = -pkin(1) * t468 + pkin(6) * t428 + t647 * t374 + t651 * t397;
t328 = -pkin(6) * t418 + t651 * t366 - t647 * t381;
t327 = -pkin(7) * t384 - t646 * t365 + t650 * t398;
t326 = -pkin(7) * t702 - qJ(3) * t361 - t643 * t392;
t325 = -pkin(3) * t714 + pkin(7) * t403 + t650 * t368 + t646 * t401;
t324 = -pkin(8) * t394 - t334;
t323 = -pkin(1) * t437 + pkin(6) * t419 + t647 * t366 + t651 * t381;
t322 = t648 * t357 - t652 * t358;
t321 = t652 * t357 + t648 * t358;
t320 = -t643 * t354 + t644 * t356;
t319 = -t643 * t353 + t644 * t355;
t318 = t644 * t354 + t643 * t356;
t317 = -pkin(3) * t439 + pkin(7) * t385 + t650 * t365 + t646 * t398;
t316 = -pkin(4) * t481 + pkin(8) * t396 + t335;
t315 = -pkin(6) * t414 + t651 * t332 - t647 * t410;
t314 = t651 * t319 - t647 * t496;
t313 = t647 * t319 + t651 * t496;
t312 = -pkin(2) * t359 - pkin(3) * t402 - pkin(4) * t460 + t371;
t311 = t651 * t320 + t647 * t481;
t310 = t647 * t320 - t651 * t481;
t309 = t648 * t343 - t652 * t344;
t308 = t652 * t343 + t648 * t344;
t307 = -pkin(1) * t445 + pkin(6) * t415 + t647 * t332 + t651 * t410;
t306 = -pkin(2) * t349 - pkin(3) * t384 - pkin(4) * t425 + t370;
t305 = t648 * t336 - t652 * t337;
t304 = t652 * t336 + t648 * t337;
t303 = t650 * t335 - t699;
t302 = t646 * t335 + t691;
t301 = -pkin(2) * t318 - pkin(3) * t354 - pkin(4) * t394;
t300 = -pkin(6) * t357 + t651 * t326 - t647 * t338;
t299 = -qJ(3) * t359 - t643 * t325 + t644 * t331;
t298 = t648 * t310 - t652 * t311;
t297 = t652 * t310 + t648 * t311;
t296 = -pkin(1) * t361 + pkin(6) * t358 + t647 * t326 + t651 * t338;
t295 = -qJ(3) * t349 - t643 * t317 + t644 * t327;
t294 = -pkin(7) * t354 - t646 * t316 + t650 * t324;
t293 = -pkin(3) * t481 + pkin(7) * t356 + t650 * t316 + t646 * t324;
t292 = -t643 * t302 + t644 * t303;
t291 = t644 * t302 + t643 * t303;
t290 = -pkin(7) * t302 - pkin(8) * t691 - t646 * t330;
t289 = t651 * t292 + t647 * t453;
t288 = t647 * t292 - t651 * t453;
t287 = -pkin(3) * t453 + pkin(7) * t303 - pkin(8) * t699 + t650 * t330;
t286 = -pkin(6) * t343 + t651 * t299 - t647 * t312;
t285 = -pkin(1) * t359 + pkin(6) * t344 + t647 * t299 + t651 * t312;
t284 = -pkin(6) * t336 + t651 * t295 - t647 * t306;
t283 = -pkin(2) * t291 - pkin(3) * t302 - pkin(4) * t334;
t282 = -pkin(1) * t349 + pkin(6) * t337 + t647 * t295 + t651 * t306;
t281 = t648 * t288 - t652 * t289;
t280 = t652 * t288 + t648 * t289;
t279 = -qJ(3) * t318 - t643 * t293 + t644 * t294;
t278 = -qJ(3) * t291 - t643 * t287 + t644 * t290;
t277 = -pkin(6) * t310 + t651 * t279 - t647 * t301;
t276 = -pkin(1) * t318 + pkin(6) * t311 + t647 * t279 + t651 * t301;
t275 = -pkin(6) * t288 + t651 * t278 - t647 * t283;
t274 = -pkin(1) * t291 + pkin(6) * t289 + t647 * t278 + t651 * t283;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t485, 0, 0, 0, 0, 0, 0, t437, t468, t445, t361, 0, 0, 0, 0, 0, 0, t349, t359, t318, t291; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t621, t620, 0, t582, 0, 0, 0, 0, 0, 0, -t662, -t570, 0, t475, 0, 0, 0, 0, 0, 0, t523, t522, t504, t399, 0, 0, 0, 0, 0, 0, t375, t386, t372, t321, 0, 0, 0, 0, 0, 0, t304, t308, t297, t280; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t620, t621, 0, t583, 0, 0, 0, 0, 0, 0, t570, -t662, 0, -t725, 0, 0, 0, 0, 0, 0, t525, t524, t505, t400, 0, 0, 0, 0, 0, 0, t376, t387, t373, t322, 0, 0, 0, 0, 0, 0, t305, t309, t298, t281; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t626, t625, 0, 0, 0, 0, 0, 0, 0, t641, -pkin(1) * t616 - t578, -pkin(1) * t613 - t579, 0, -pkin(1) * t528, t630, 0.2e1 * t641 * t703, 0, t631, 0, 0, pkin(1) * t574 - qJ(3) * t603 + t644 * t674, pkin(1) * t572 + qJ(3) * t602 - t643 * t674, pkin(1) * t563 + pkin(2) * t611 + qJ(3) * t606 + t486, pkin(1) * t454 - pkin(2) * t551 + qJ(3) * t486, t644 * t520 + t643 * t521, t644 * t501 + t643 * t503, t644 * t513 + t643 * t516, t644 * t518 + t643 * t519, t644 * t512 + t643 * t515, t644 * t541 + t643 * t542, pkin(1) * t418 - pkin(2) * t556 + qJ(3) * t438 + t644 * t424 + t643 * t458, pkin(1) * t427 - pkin(2) * t558 + qJ(3) * t471 + t644 * t448 + t643 * t474, pkin(1) * t414 - pkin(2) * t533 + qJ(3) * t446 + t644 * t377 + t643 * t383, pkin(1) * t357 - pkin(2) * t530 - pkin(7) * t704 + qJ(3) * t362 + t644 * t392, t644 * t389 + t643 * t391, t644 * t353 + t643 * t355, t644 * t406 + t643 * t408, t644 * t388 + t643 * t390, t644 * t407 + t643 * t409, t644 * t422 + t643 * t423, pkin(1) * t336 - pkin(2) * t439 + qJ(3) * t350 + t644 * t317 + t643 * t327, pkin(1) * t343 - pkin(2) * t714 + qJ(3) * t360 + t644 * t325 + t643 * t331, pkin(1) * t310 - pkin(2) * t481 + qJ(3) * t320 + t644 * t293 + t643 * t294, pkin(1) * t288 - pkin(2) * t453 + qJ(3) * t292 + t644 * t287 + t643 * t290; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t620, 0, t621, 0, t673, -t605, -t583, -pkin(5) * t583, 0, 0, t570, 0, -t662, 0, t729, t728, t725, pkin(5) * t725 + pkin(6) * t694 + t652 * t511, t664, t652 * t564 + t648 * t566, t522, -t664, -t523, 0, -pkin(5) * t525 + t652 * t477 + t648 * t479, -pkin(5) * t524 + t652 * t478 + t648 * t480, -pkin(5) * t505 + t652 * t456 + t648 * t457, -pkin(5) * t400 + t652 * t367 + t648 * t382, t652 * t434 + t648 * t436, t652 * t420 + t648 * t421, t652 * t450 + t648 * t452, t652 * t433 + t648 * t435, t652 * t449 + t648 * t451, t652 * t487 + t648 * t488, -pkin(5) * t376 + t652 * t323 + t648 * t328, -pkin(5) * t387 + t652 * t329 + t648 * t333, -pkin(5) * t373 + t652 * t307 + t648 * t315, -pkin(5) * t322 + t652 * t296 + t648 * t300, t652 * t340 + t648 * t342, t652 * t313 + t648 * t314, t652 * t345 + t648 * t347, t652 * t339 + t648 * t341, t652 * t346 + t648 * t348, t652 * t378 + t648 * t379, -pkin(5) * t305 + t652 * t282 + t648 * t284, -pkin(5) * t309 + t652 * t285 + t648 * t286, -pkin(5) * t298 + t652 * t276 + t648 * t277, -pkin(5) * t281 + t652 * t274 + t648 * t275; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t621, 0, -t620, 0, t605, t673, t582, pkin(5) * t582, 0, 0, t662, 0, t570, 0, -t728, t729, t475, pkin(5) * t475 - pkin(6) * t686 + t648 * t511, t663, t648 * t564 - t652 * t566, t524, -t663, -t525, 0, pkin(5) * t523 + t648 * t477 - t652 * t479, pkin(5) * t522 + t648 * t478 - t652 * t480, pkin(5) * t504 + t648 * t456 - t652 * t457, pkin(5) * t399 + t648 * t367 - t652 * t382, t648 * t434 - t652 * t436, t648 * t420 - t652 * t421, t648 * t450 - t652 * t452, t648 * t433 - t652 * t435, t648 * t449 - t652 * t451, t648 * t487 - t652 * t488, pkin(5) * t375 + t648 * t323 - t652 * t328, pkin(5) * t386 + t648 * t329 - t652 * t333, pkin(5) * t372 + t648 * t307 - t652 * t315, pkin(5) * t321 + t648 * t296 - t652 * t300, t648 * t340 - t652 * t342, t648 * t313 - t652 * t314, t648 * t345 - t652 * t347, t648 * t339 - t652 * t341, t648 * t346 - t652 * t348, t648 * t378 - t652 * t379, pkin(5) * t304 + t648 * t282 - t652 * t284, pkin(5) * t308 + t648 * t285 - t652 * t286, pkin(5) * t297 + t648 * t276 - t652 * t277, pkin(5) * t280 + t648 * t274 - t652 * t275;];
tauB_reg = t1;
