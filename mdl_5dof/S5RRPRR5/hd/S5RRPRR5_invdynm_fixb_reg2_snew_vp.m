% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:34
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPRR5_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR5_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR5_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR5_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR5_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR5_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:34:28
% EndTime: 2019-12-05 18:34:45
% DurationCPUTime: 18.19s
% Computational Cost: add. (133512->607), mult. (187064->863), div. (0->0), fcn. (132391->10), ass. (0->421)
t1139 = cos(qJ(2));
t1189 = qJD(1) + qJD(2);
t1187 = t1189 ^ 2;
t1129 = qJDD(1) + qJDD(2);
t1135 = sin(qJ(2));
t1198 = t1135 * t1129;
t1100 = t1139 * t1187 + t1198;
t1191 = t1139 * t1129;
t1103 = t1135 * t1187 - t1191;
t1136 = sin(qJ(1));
t1140 = cos(qJ(1));
t1057 = t1136 * t1100 + t1140 * t1103;
t1082 = pkin(6) * t1100 - t1139 * g(1);
t1233 = pkin(6) * t1103 - t1135 * g(1);
t1245 = pkin(5) * t1057 + t1136 * t1082 + t1140 * t1233;
t1230 = t1140 * t1100 - t1136 * t1103;
t1244 = pkin(5) * t1230 + t1140 * t1082 - t1136 * t1233;
t1113 = t1136 * g(2) - t1140 * g(3);
t1142 = qJD(1) ^ 2;
t1105 = -t1142 * pkin(1) + t1113;
t1114 = t1140 * g(2) + t1136 * g(3);
t1149 = qJDD(1) * pkin(1) + t1114;
t1066 = t1135 * t1105 - t1139 * t1149;
t1067 = t1139 * t1105 + t1135 * t1149;
t1167 = t1135 * t1066 + t1139 * t1067;
t1010 = t1139 * t1066 - t1135 * t1067;
t1190 = t1140 * t1010;
t1242 = -t1136 * t1167 + t1190;
t1197 = t1136 * t1010;
t1241 = t1140 * t1167 + t1197;
t1133 = sin(qJ(5));
t1128 = qJDD(4) + qJDD(5);
t1131 = sin(pkin(9));
t1132 = cos(pkin(9));
t1138 = cos(qJ(4));
t1174 = t1138 * t1189;
t1134 = sin(qJ(4));
t1175 = t1134 * t1189;
t1086 = t1131 * t1175 - t1132 * t1174;
t1087 = t1131 * t1174 + t1132 * t1175;
t1137 = cos(qJ(5));
t1032 = t1137 * t1086 + t1133 * t1087;
t1034 = -t1133 * t1086 + t1137 * t1087;
t982 = t1034 * t1032;
t1228 = -t982 + t1128;
t1238 = t1133 * t1228;
t1052 = t1087 * t1086;
t1225 = qJDD(4) - t1052;
t1237 = t1134 * t1225;
t1236 = t1137 * t1228;
t1235 = t1138 * t1225;
t1159 = -t1187 * pkin(2) + t1129 * qJ(3) + 0.2e1 * qJD(3) * t1189 + t1067;
t1234 = t1129 * pkin(7) + t1159;
t1145 = t1132 ^ 2;
t1123 = t1145 * t1187;
t1143 = t1131 ^ 2;
t1173 = t1143 * t1187;
t1098 = t1173 + t1123;
t1091 = t1098 * t1132;
t1179 = t1132 * t1191;
t1062 = -t1135 * t1091 + t1179;
t1064 = t1139 * t1091 + t1132 * t1198;
t1232 = t1140 * t1062 - t1136 * t1064;
t1231 = t1136 * t1062 + t1140 * t1064;
t1130 = qJD(4) + qJD(5);
t1025 = t1130 * t1032;
t1077 = t1086 * qJD(4);
t1084 = (t1138 * t1131 + t1134 * t1132) * t1129;
t1049 = -t1077 + t1084;
t1120 = t1131 * t1129;
t1122 = t1132 * t1129;
t1083 = t1134 * t1120 - t1138 * t1122;
t1207 = t1087 * qJD(4);
t1148 = t1083 + t1207;
t964 = -t1032 * qJD(5) + t1137 * t1049 - t1133 * t1148;
t1229 = -t1025 + t964;
t1219 = t1132 * g(1);
t1019 = t1159 * t1131 + t1219;
t1220 = t1131 * g(1);
t1020 = t1159 * t1132 - t1220;
t968 = t1131 * t1019 + t1132 * t1020;
t1168 = t1133 * t1049 + t1137 * t1148;
t912 = (qJD(5) - t1130) * t1034 + t1168;
t1028 = t1032 ^ 2;
t1029 = t1034 ^ 2;
t1224 = t1086 ^ 2;
t1085 = t1087 ^ 2;
t1127 = t1130 ^ 2;
t1176 = t1132 * t1187;
t992 = -t1219 + (pkin(3) * t1176 - t1234) * t1131;
t993 = -pkin(3) * t1123 + t1234 * t1132 - t1220;
t938 = t1134 * t993 - t1138 * t992;
t939 = t1134 * t992 + t1138 * t993;
t870 = t1134 * t939 - t1138 * t938;
t1223 = pkin(3) * t870;
t985 = -t1083 * t1134 - t1138 * t1084;
t1222 = pkin(3) * t985;
t1216 = t1131 * t870;
t1215 = t1132 * t870;
t1042 = -t1129 * pkin(2) - t1187 * qJ(3) + qJDD(3) + t1066;
t1013 = -pkin(3) * t1122 - t1098 * pkin(7) + t1042;
t1070 = qJD(4) * pkin(4) - t1087 * pkin(8);
t927 = pkin(4) * t1148 - t1224 * pkin(8) + t1087 * t1070 + t1013;
t1214 = t1133 * t927;
t979 = t982 + t1128;
t1213 = t1133 * t979;
t878 = (-t1049 - t1077) * pkin(8) + t1225 * pkin(4) - t938;
t881 = -t1224 * pkin(4) - pkin(8) * t1148 - qJD(4) * t1070 + t939;
t838 = t1133 * t881 - t1137 * t878;
t839 = t1133 * t878 + t1137 * t881;
t793 = t1133 * t839 - t1137 * t838;
t1212 = t1134 * t793;
t1211 = t1137 * t927;
t1210 = t1137 * t979;
t1209 = t1138 * t793;
t1208 = -pkin(2) * t1042 + qJ(3) * t968;
t1206 = t1130 * t1034;
t1205 = t1130 * t1133;
t1204 = t1130 * t1137;
t1035 = t1131 * t1042;
t1036 = t1132 * t1042;
t1203 = t1134 * t1013;
t1045 = qJDD(4) + t1052;
t1202 = t1134 * t1045;
t1201 = t1134 * t1086;
t1200 = t1134 * t1087;
t1199 = t1135 * t1042;
t1196 = t1138 * t1013;
t1195 = t1138 * t1045;
t1194 = t1138 * t1086;
t1193 = t1138 * t1087;
t1192 = t1139 * t1042;
t794 = t1133 * t838 + t1137 * t839;
t759 = t1134 * t794 + t1209;
t792 = pkin(4) * t793;
t1186 = pkin(3) * t759 + t792;
t916 = t1025 + t964;
t861 = -t1133 * t912 - t1137 * t916;
t863 = t1133 * t916 - t1137 * t912;
t817 = t1134 * t863 + t1138 * t861;
t859 = pkin(4) * t861;
t1185 = pkin(3) * t817 + t859;
t1184 = t1131 * t1122;
t1183 = t1135 * t982;
t1182 = t1135 * t1052;
t1181 = t1139 * t982;
t1180 = t1139 * t1052;
t1178 = pkin(2) * t1122 - qJ(3) * t1091 - t1036;
t871 = t1134 * t938 + t1138 * t939;
t760 = t1138 * t794 - t1212;
t787 = -pkin(4) * t927 + pkin(8) * t794;
t740 = -pkin(3) * t927 + pkin(7) * t760 - pkin(8) * t1212 + t1138 * t787;
t744 = -pkin(7) * t759 - pkin(8) * t1209 - t1134 * t787;
t748 = -t1131 * t759 + t1132 * t760;
t1172 = -pkin(2) * t927 + qJ(3) * t748 + t1131 * t744 + t1132 * t740;
t962 = -t1028 - t1029;
t769 = -pkin(4) * t962 + pkin(8) * t863 + t794;
t778 = -pkin(8) * t861 - t793;
t819 = -t1134 * t861 + t1138 * t863;
t750 = -pkin(3) * t962 + pkin(7) * t819 + t1134 * t778 + t1138 * t769;
t752 = -pkin(7) * t817 - t1134 * t769 + t1138 * t778;
t776 = -t1131 * t817 + t1132 * t819;
t1171 = -pkin(2) * t962 + qJ(3) * t776 + t1131 * t752 + t1132 * t750;
t977 = -t1127 - t1028;
t892 = t1137 * t977 - t1238;
t911 = (qJD(5) + t1130) * t1034 + t1168;
t833 = -pkin(4) * t911 + pkin(8) * t892 - t1211;
t891 = t1133 * t977 + t1236;
t852 = -t1134 * t891 + t1138 * t892;
t865 = -pkin(8) * t891 + t1214;
t772 = -pkin(3) * t911 + pkin(7) * t852 + t1134 * t865 + t1138 * t833;
t851 = t1134 * t892 + t1138 * t891;
t784 = -pkin(7) * t851 - t1134 * t833 + t1138 * t865;
t811 = -t1131 * t851 + t1132 * t852;
t1170 = -pkin(2) * t911 + qJ(3) * t811 + t1131 * t784 + t1132 * t772;
t1021 = -t1029 - t1127;
t937 = -t1133 * t1021 - t1210;
t836 = -pkin(4) * t1229 + pkin(8) * t937 + t1214;
t936 = t1137 * t1021 - t1213;
t867 = -pkin(8) * t936 + t1211;
t869 = -t1134 * t936 + t1138 * t937;
t781 = -pkin(3) * t1229 + pkin(7) * t869 + t1134 * t867 + t1138 * t836;
t868 = t1134 * t937 + t1138 * t936;
t789 = -pkin(7) * t868 - t1134 * t836 + t1138 * t867;
t825 = -t1131 * t868 + t1132 * t869;
t1169 = -pkin(2) * t1229 + qJ(3) * t825 + t1131 * t789 + t1132 * t781;
t1018 = -t1085 - t1224;
t987 = -t1083 * t1138 + t1134 * t1084;
t842 = -pkin(3) * t1018 + pkin(7) * t987 + t871;
t850 = -pkin(7) * t985 - t870;
t919 = -t1131 * t985 + t1132 * t987;
t1166 = -pkin(2) * t1018 + qJ(3) * t919 + t1131 * t850 + t1132 * t842;
t1047 = t1083 + 0.2e1 * t1207;
t1141 = qJD(4) ^ 2;
t1043 = -t1141 - t1224;
t984 = t1138 * t1043 - t1237;
t889 = -pkin(3) * t1047 + pkin(7) * t984 - t1196;
t983 = t1134 * t1043 + t1235;
t907 = -t1131 * t983 + t1132 * t984;
t933 = -pkin(7) * t983 + t1203;
t1165 = -pkin(2) * t1047 + qJ(3) * t907 + t1131 * t933 + t1132 * t889;
t1048 = -0.2e1 * t1077 + t1084;
t1073 = -t1085 - t1141;
t1000 = -t1134 * t1073 - t1195;
t921 = -pkin(3) * t1048 + pkin(7) * t1000 + t1203;
t997 = t1138 * t1073 - t1202;
t950 = t1132 * t1000 - t1131 * t997;
t956 = -pkin(7) * t997 + t1196;
t1164 = -pkin(2) * t1048 + qJ(3) * t950 + t1131 * t956 + t1132 * t921;
t1163 = pkin(3) * t997 - t939;
t1119 = t1143 * t1129;
t1121 = t1145 * t1129;
t1095 = t1121 + t1119;
t1162 = pkin(2) * t1098 + qJ(3) * t1095 + t968;
t1161 = pkin(4) * t891 - t838;
t1107 = t1136 * qJDD(1) + t1140 * t1142;
t1160 = pkin(5) * t1107 - t1140 * g(1);
t1109 = t1131 * t1176;
t967 = t1132 * t1019 - t1131 * t1020;
t1068 = t1100 * t1132 * t1131;
t1069 = -t1135 * t1109 + t1131 * t1179;
t1158 = t1140 * t1068 + t1136 * t1069;
t1157 = t1136 * t1068 - t1140 * t1069;
t1156 = t1140 * t1113 - t1136 * t1114;
t1155 = -t1136 * t1113 - t1140 * t1114;
t1090 = t1098 * t1131;
t1154 = -pkin(2) * t1120 + qJ(3) * t1090 + t1035;
t1153 = pkin(3) * t983 - t938;
t1152 = pkin(4) * t936 - t839;
t828 = t1132 * t871 - t1216;
t858 = -pkin(3) * t1013 + pkin(7) * t871;
t1151 = -pkin(2) * t1013 - pkin(7) * t1216 + qJ(3) * t828 + t1132 * t858;
t1150 = pkin(3) * t851 + t1161;
t1147 = pkin(3) * t868 + t1152;
t1108 = -t1140 * qJDD(1) + t1136 * t1142;
t1106 = 0.2e1 * t1184;
t1099 = t1173 - t1123;
t1096 = t1121 - t1119;
t1093 = -pkin(5) * t1108 + t1136 * g(1);
t1072 = -t1085 + t1141;
t1071 = -t1141 + t1224;
t1063 = t1139 * t1090 + t1131 * t1198;
t1060 = t1135 * t1090 - t1131 * t1191;
t1056 = t1139 * t1096 + t1135 * t1099;
t1055 = t1139 * t1095 - t1135 * t1098;
t1054 = t1135 * t1096 - t1139 * t1099;
t1053 = t1135 * t1095 + t1139 * t1098;
t1050 = t1085 - t1224;
t1031 = -pkin(1) * t1100 - t1067;
t1030 = -pkin(1) * t1103 - t1066;
t1027 = (-t1194 + t1200) * qJD(4);
t1026 = (-t1193 - t1201) * qJD(4);
t1023 = -t1029 + t1127;
t1022 = t1028 - t1127;
t1007 = -t1136 * t1060 + t1140 * t1063;
t1006 = -t1140 * t1060 - t1136 * t1063;
t1005 = pkin(1) * t1010;
t1004 = -qJD(4) * t1200 + t1138 * t1049;
t1003 = qJD(4) * t1193 + t1134 * t1049;
t1002 = qJD(4) * t1194 + t1134 * t1148;
t1001 = qJD(4) * t1201 - t1138 * t1148;
t999 = -t1134 * t1072 + t1235;
t998 = t1138 * t1071 - t1202;
t996 = t1138 * t1072 + t1237;
t995 = t1134 * t1071 + t1195;
t994 = pkin(1) * g(1) + pkin(6) * t1167;
t988 = -t1138 * t1047 - t1134 * t1048;
t986 = -t1134 * t1047 + t1138 * t1048;
t981 = t1029 - t1028;
t976 = -t1131 * t1026 + t1132 * t1027;
t975 = t1132 * t1026 + t1131 * t1027;
t974 = (-t1032 * t1137 + t1034 * t1133) * t1130;
t973 = (-t1032 * t1133 - t1034 * t1137) * t1130;
t972 = pkin(1) * t1062 + t1178;
t971 = pkin(1) * t1060 + t1154;
t970 = t1135 * qJDD(4) + t1139 * t976;
t969 = -t1139 * qJDD(4) + t1135 * t976;
t963 = -t1034 * qJD(5) - t1168;
t960 = -pkin(6) * t1060 - t1135 * t1020 + t1132 * t1192;
t959 = -pkin(6) * t1062 - t1135 * t1019 + t1131 * t1192;
t958 = pkin(6) * t1063 + t1139 * t1020 + t1132 * t1199;
t957 = -pkin(6) * t1064 + t1139 * t1019 + t1131 * t1199;
t954 = -t1131 * t1003 + t1132 * t1004;
t953 = -t1131 * t1001 + t1132 * t1002;
t952 = t1132 * t1003 + t1131 * t1004;
t951 = t1132 * t1001 + t1131 * t1002;
t949 = -t1131 * t996 + t1132 * t999;
t948 = -t1131 * t995 + t1132 * t998;
t947 = t1131 * t1000 + t1132 * t997;
t946 = t1131 * t999 + t1132 * t996;
t945 = t1131 * t998 + t1132 * t995;
t943 = t1137 * t1022 - t1213;
t942 = -t1133 * t1023 + t1236;
t941 = t1133 * t1022 + t1210;
t940 = t1137 * t1023 + t1238;
t932 = -pkin(6) * t1053 + t1139 * t967;
t931 = pkin(6) * t1055 + t1135 * t967;
t929 = t1139 * t968 + t1199;
t928 = t1135 * t968 - t1192;
t925 = t1135 * t1084 + t1139 * t949;
t924 = -t1135 * t1083 + t1139 * t948;
t923 = -t1139 * t1084 + t1135 * t949;
t922 = t1139 * t1083 + t1135 * t948;
t920 = -t1131 * t986 + t1132 * t988;
t918 = t1131 * t988 + t1132 * t986;
t917 = t1131 * t987 + t1132 * t985;
t906 = t1131 * t984 + t1132 * t983;
t903 = t1139 * t954 + t1182;
t902 = t1139 * t953 - t1182;
t901 = t1135 * t954 - t1180;
t900 = t1135 * t953 + t1180;
t899 = pkin(1) * t1053 + t1162;
t898 = -t1034 * t1205 + t1137 * t964;
t897 = t1034 * t1204 + t1133 * t964;
t896 = t1032 * t1204 - t1133 * t963;
t895 = t1032 * t1205 + t1137 * t963;
t894 = t1135 * t1048 + t1139 * t950;
t893 = -t1139 * t1048 + t1135 * t950;
t887 = -t1134 * t973 + t1138 * t974;
t886 = t1134 * t974 + t1138 * t973;
t885 = t1135 * t1050 + t1139 * t920;
t884 = -t1139 * t1050 + t1135 * t920;
t883 = t1135 * t1047 + t1139 * t907;
t882 = -t1139 * t1047 + t1135 * t907;
t880 = t1135 * t1018 + t1139 * t919;
t879 = -t1139 * t1018 + t1135 * t919;
t876 = -pkin(2) * t917 - t1222;
t875 = -t1134 * t941 + t1138 * t943;
t874 = -t1134 * t940 + t1138 * t942;
t873 = t1134 * t943 + t1138 * t941;
t872 = t1134 * t942 + t1138 * t940;
t866 = pkin(1) * t928 + t1208;
t864 = -pkin(2) * t947 - t1163;
t862 = -t1133 * t1229 - t1137 * t911;
t860 = -t1133 * t911 + t1137 * t1229;
t856 = -t1134 * t897 + t1138 * t898;
t855 = -t1134 * t895 + t1138 * t896;
t854 = t1134 * t898 + t1138 * t897;
t853 = t1134 * t896 + t1138 * t895;
t848 = -pkin(6) * t928 - (pkin(2) * t1135 - qJ(3) * t1139) * t967;
t847 = -pkin(2) * t906 - t1153;
t846 = -t1131 * t886 + t1132 * t887;
t845 = t1131 * t887 + t1132 * t886;
t844 = t1135 * t1128 + t1139 * t846;
t843 = -t1139 * t1128 + t1135 * t846;
t840 = -qJ(3) * t947 - t1131 * t921 + t1132 * t956;
t835 = pkin(6) * t929 - (-pkin(2) * t1139 - qJ(3) * t1135 - pkin(1)) * t967;
t834 = -qJ(3) * t906 - t1131 * t889 + t1132 * t933;
t832 = -t1131 * t873 + t1132 * t875;
t831 = -t1131 * t872 + t1132 * t874;
t830 = t1131 * t875 + t1132 * t873;
t829 = t1131 * t874 + t1132 * t872;
t827 = t1131 * t871 + t1215;
t824 = t1131 * t869 + t1132 * t868;
t822 = t1135 * t1013 + t1139 * t828;
t821 = -t1139 * t1013 + t1135 * t828;
t820 = pkin(1) * t893 + t1164;
t818 = -t1134 * t860 + t1138 * t862;
t816 = t1134 * t862 + t1138 * t860;
t815 = -t1131 * t854 + t1132 * t856;
t814 = -t1131 * t853 + t1132 * t855;
t813 = t1131 * t856 + t1132 * t854;
t812 = t1131 * t855 + t1132 * t853;
t810 = t1131 * t852 + t1132 * t851;
t808 = -t1135 * t912 + t1139 * t832;
t807 = t1135 * t916 + t1139 * t831;
t806 = t1135 * t832 + t1139 * t912;
t805 = t1135 * t831 - t1139 * t916;
t804 = t1135 * t1229 + t1139 * t825;
t803 = t1135 * t825 - t1139 * t1229;
t802 = pkin(1) * t882 + t1165;
t801 = t1139 * t815 + t1183;
t800 = t1139 * t814 - t1183;
t799 = t1135 * t815 - t1181;
t798 = t1135 * t814 + t1181;
t797 = -pkin(2) * t827 - t1223;
t796 = t1135 * t911 + t1139 * t811;
t795 = t1135 * t811 - t1139 * t911;
t791 = -pkin(6) * t893 - t1135 * t864 + t1139 * t840;
t790 = -qJ(3) * t917 - t1131 * t842 + t1132 * t850;
t786 = -pkin(1) * t947 + pkin(6) * t894 + t1135 * t840 + t1139 * t864;
t785 = -pkin(6) * t882 - t1135 * t847 + t1139 * t834;
t783 = -pkin(7) * t1215 - qJ(3) * t827 - t1131 * t858;
t779 = pkin(1) * t879 + t1166;
t777 = -pkin(1) * t906 + pkin(6) * t883 + t1135 * t834 + t1139 * t847;
t775 = -t1131 * t816 + t1132 * t818;
t774 = t1131 * t819 + t1132 * t817;
t773 = t1131 * t818 + t1132 * t816;
t768 = -pkin(6) * t879 - t1135 * t876 + t1139 * t790;
t767 = t1135 * t981 + t1139 * t775;
t766 = t1135 * t775 - t1139 * t981;
t765 = -pkin(2) * t824 - t1147;
t764 = t1135 * t962 + t1139 * t776;
t763 = t1135 * t776 - t1139 * t962;
t762 = -pkin(1) * t917 + pkin(6) * t880 + t1135 * t790 + t1139 * t876;
t761 = -pkin(2) * t810 - t1150;
t758 = pkin(1) * t821 + t1151;
t757 = -pkin(2) * t774 - t1185;
t756 = -pkin(6) * t821 - t1135 * t797 + t1139 * t783;
t755 = -qJ(3) * t824 - t1131 * t781 + t1132 * t789;
t754 = -pkin(1) * t827 + pkin(6) * t822 + t1135 * t783 + t1139 * t797;
t753 = -qJ(3) * t810 - t1131 * t772 + t1132 * t784;
t747 = t1131 * t760 + t1132 * t759;
t745 = pkin(1) * t803 + t1169;
t742 = t1135 * t927 + t1139 * t748;
t741 = t1135 * t748 - t1139 * t927;
t738 = pkin(1) * t795 + t1170;
t737 = -pkin(6) * t803 - t1135 * t765 + t1139 * t755;
t736 = -pkin(1) * t824 + pkin(6) * t804 + t1135 * t755 + t1139 * t765;
t735 = -pkin(6) * t795 - t1135 * t761 + t1139 * t753;
t734 = -pkin(2) * t747 - t1186;
t733 = -pkin(1) * t810 + pkin(6) * t796 + t1135 * t753 + t1139 * t761;
t732 = -qJ(3) * t774 - t1131 * t750 + t1132 * t752;
t731 = pkin(1) * t763 + t1171;
t730 = -qJ(3) * t747 - t1131 * t740 + t1132 * t744;
t729 = -pkin(6) * t763 - t1135 * t757 + t1139 * t732;
t728 = -pkin(1) * t774 + pkin(6) * t764 + t1135 * t732 + t1139 * t757;
t727 = pkin(1) * t741 + t1172;
t726 = -pkin(6) * t741 - t1135 * t734 + t1139 * t730;
t725 = -pkin(1) * t747 + pkin(6) * t742 + t1135 * t730 + t1139 * t734;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t1114, -t1113, 0, 0, 0, 0, 0, 0, 0, t1129, t1030, t1031, 0, -t1005, t1119, t1106, 0, t1121, 0, 0, t972, t971, t899, t866, t952, t918, t946, t951, t945, t975, t802, t820, t779, t758, t813, t773, t829, t812, t830, t845, t738, t745, t731, t727; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t1107, 0, t1108, 0, t1160, t1093, -t1156, -pkin(5) * t1156, 0, 0, -t1230, 0, t1057, 0, t1244, -t1245, -t1241, -pkin(5) * t1241 - pkin(6) * t1197 - t1140 * t994, -t1158, -t1140 * t1054 - t1136 * t1056, t1006, t1158, t1232, 0, pkin(5) * t1231 - t1136 * t959 - t1140 * t957, -pkin(5) * t1007 - t1136 * t960 - t1140 * t958, -t1136 * t932 - t1140 * t931 - pkin(5) * (-t1136 * t1053 + t1140 * t1055), -t1136 * t848 - t1140 * t835 - pkin(5) * (-t1136 * t928 + t1140 * t929), -t1136 * t903 - t1140 * t901, -t1136 * t885 - t1140 * t884, -t1136 * t925 - t1140 * t923, -t1136 * t902 - t1140 * t900, -t1136 * t924 - t1140 * t922, -t1136 * t970 - t1140 * t969, -t1136 * t785 - t1140 * t777 - pkin(5) * (-t1136 * t882 + t1140 * t883), -t1136 * t791 - t1140 * t786 - pkin(5) * (-t1136 * t893 + t1140 * t894), -t1136 * t768 - t1140 * t762 - pkin(5) * (-t1136 * t879 + t1140 * t880), -t1136 * t756 - t1140 * t754 - pkin(5) * (-t1136 * t821 + t1140 * t822), -t1136 * t801 - t1140 * t799, -t1136 * t767 - t1140 * t766, -t1136 * t807 - t1140 * t805, -t1136 * t800 - t1140 * t798, -t1136 * t808 - t1140 * t806, -t1136 * t844 - t1140 * t843, -t1136 * t735 - t1140 * t733 - pkin(5) * (-t1136 * t795 + t1140 * t796), -t1136 * t737 - t1140 * t736 - pkin(5) * (-t1136 * t803 + t1140 * t804), -t1136 * t729 - t1140 * t728 - pkin(5) * (-t1136 * t763 + t1140 * t764), -t1136 * t726 - t1140 * t725 - pkin(5) * (-t1136 * t741 + t1140 * t742); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t1108, 0, -t1107, 0, -t1093, t1160, t1155, pkin(5) * t1155, 0, 0, -t1057, 0, -t1230, 0, t1245, t1244, t1242, pkin(5) * t1242 + pkin(6) * t1190 - t1136 * t994, -t1157, -t1136 * t1054 + t1140 * t1056, t1007, t1157, t1231, 0, -pkin(5) * t1232 - t1136 * t957 + t1140 * t959, pkin(5) * t1006 - t1136 * t958 + t1140 * t960, t1140 * t932 - t1136 * t931 + pkin(5) * (-t1140 * t1053 - t1136 * t1055), t1140 * t848 - t1136 * t835 + pkin(5) * (-t1136 * t929 - t1140 * t928), -t1136 * t901 + t1140 * t903, -t1136 * t884 + t1140 * t885, -t1136 * t923 + t1140 * t925, -t1136 * t900 + t1140 * t902, -t1136 * t922 + t1140 * t924, -t1136 * t969 + t1140 * t970, t1140 * t785 - t1136 * t777 + pkin(5) * (-t1136 * t883 - t1140 * t882), t1140 * t791 - t1136 * t786 + pkin(5) * (-t1136 * t894 - t1140 * t893), t1140 * t768 - t1136 * t762 + pkin(5) * (-t1136 * t880 - t1140 * t879), t1140 * t756 - t1136 * t754 + pkin(5) * (-t1136 * t822 - t1140 * t821), -t1136 * t799 + t1140 * t801, -t1136 * t766 + t1140 * t767, -t1136 * t805 + t1140 * t807, -t1136 * t798 + t1140 * t800, -t1136 * t806 + t1140 * t808, -t1136 * t843 + t1140 * t844, t1140 * t735 - t1136 * t733 + pkin(5) * (-t1136 * t796 - t1140 * t795), t1140 * t737 - t1136 * t736 + pkin(5) * (-t1136 * t804 - t1140 * t803), t1140 * t729 - t1136 * t728 + pkin(5) * (-t1136 * t764 - t1140 * t763), t1140 * t726 - t1136 * t725 + pkin(5) * (-t1136 * t742 - t1140 * t741); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1142, 0, 0, -g(1), -t1114, 0, 0, 0, -t1103, 0, -t1100, 0, t1233, t1082, t1010, pkin(6) * t1010, t1069, t1056, t1063, -t1069, t1064, 0, t959, t960, t932, t848, t903, t885, t925, t902, t924, t970, t785, t791, t768, t756, t801, t767, t807, t800, t808, t844, t735, t737, t729, t726; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1142, 0, qJDD(1), 0, g(1), 0, t1113, 0, 0, 0, t1100, 0, -t1103, 0, -t1082, t1233, t1167, t994, t1068, t1054, t1060, -t1068, -t1062, 0, t957, t958, t931, t835, t901, t884, t923, t900, t922, t969, t777, t786, t762, t754, t799, t766, t805, t798, t806, t843, t733, t736, t728, t725; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1114, -t1113, 0, 0, 0, 0, 0, 0, 0, t1129, t1030, t1031, 0, -t1005, t1119, t1106, 0, t1121, 0, 0, t972, t971, t899, t866, t952, t918, t946, t951, t945, t975, t802, t820, t779, t758, t813, t773, t829, t812, t830, t845, t738, t745, t731, t727; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1129, 0, -t1187, 0, 0, -g(1), t1066, 0, t1184, t1096, t1090, -t1184, t1091, 0, t1035, t1036, t967, qJ(3) * t967, t954, t920, t949, t953, t948, t976, t834, t840, t790, t783, t815, t775, t831, t814, t832, t846, t753, t755, t732, t730; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1187, 0, t1129, 0, g(1), 0, t1067, 0, t1109, -t1099, -t1120, -t1109, -t1122, 0, t1019, t1020, 0, pkin(2) * t967, -t1052, -t1050, -t1084, t1052, t1083, -qJDD(4), t847, t864, t876, t797, -t982, -t981, -t916, t982, t912, -t1128, t761, t765, t757, t734; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1129, -t1066, -t1067, 0, 0, t1119, t1106, 0, t1121, 0, 0, t1178, t1154, t1162, t1208, t952, t918, t946, t951, t945, t975, t1165, t1164, t1166, t1151, t813, t773, t829, t812, t830, t845, t1170, t1169, t1171, t1172; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1120, t1122, t1109, 0, t1123, 0, 0, t1042, t1019, 0, t1004, t988, t999, t1002, t998, t1027, t933, t956, t850, -pkin(7) * t870, t856, t818, t874, t855, t875, t887, t784, t789, t752, t744; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1120, -t1173, t1122, -t1109, 0, -t1042, 0, t1020, 0, t1003, t986, t996, t1001, t995, t1026, t889, t921, t842, t858, t854, t816, t872, t853, t873, t886, t772, t781, t750, t740; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1109, t1099, t1120, t1109, t1122, 0, -t1019, -t1020, 0, 0, t1052, t1050, t1084, -t1052, -t1083, qJDD(4), t1153, t1163, t1222, t1223, t982, t981, t916, -t982, -t912, t1128, t1150, t1147, t1185, t1186; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1049, -t1047, t1225, t1077, t1071, -t1077, 0, t1013, t938, 0, t898, t862, t942, t896, t943, t974, t865, t867, t778, -pkin(8) * t793; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1207, t1048, t1072, -t1148, t1045, -t1207, -t1013, 0, t939, 0, t897, t860, t940, t895, t941, t973, t833, t836, t769, t787; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1052, t1050, t1084, -t1052, -t1083, qJDD(4), -t938, -t939, 0, 0, t982, t981, t916, -t982, -t912, t1128, t1161, t1152, t859, t792; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t964, -t911, t1228, t1025, t1022, -t1025, 0, t927, t838, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1206, t1229, t1023, t963, t979, -t1206, -t927, 0, t839, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t982, t981, t916, -t982, -t912, t1128, -t838, -t839, 0, 0;];
m_new_reg = t1;
