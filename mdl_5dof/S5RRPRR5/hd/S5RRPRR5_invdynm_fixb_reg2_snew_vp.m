% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 12:04
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPRR5_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR5_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR5_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR5_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR5_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR5_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 12:04:19
% EndTime: 2020-01-03 12:04:33
% DurationCPUTime: 14.98s
% Computational Cost: add. (133512->606), mult. (187064->863), div. (0->0), fcn. (132391->10), ass. (0->421)
t1149 = cos(qJ(2));
t1200 = qJD(1) + qJD(2);
t1198 = t1200 ^ 2;
t1139 = qJDD(1) + qJDD(2);
t1145 = sin(qJ(2));
t1209 = t1145 * t1139;
t1106 = t1149 * t1198 + t1209;
t1087 = pkin(6) * t1106 - g(1) * t1149;
t1146 = sin(qJ(1));
t1150 = cos(qJ(1));
t1202 = t1149 * t1139;
t1109 = t1145 * t1198 - t1202;
t1166 = t1106 * t1146 + t1109 * t1150;
t1243 = pkin(6) * t1109 - g(1) * t1145;
t1256 = pkin(5) * t1166 + t1146 * t1087 + t1150 * t1243;
t1063 = t1106 * t1150 - t1109 * t1146;
t1255 = -pkin(5) * t1063 - t1150 * t1087 + t1146 * t1243;
t1120 = g(2) * t1146 - g(3) * t1150;
t1152 = qJD(1) ^ 2;
t1112 = -pkin(1) * t1152 - t1120;
t1121 = g(2) * t1150 + g(3) * t1146;
t1159 = qJDD(1) * pkin(1) - t1121;
t1071 = t1112 * t1145 - t1149 * t1159;
t1072 = t1149 * t1112 + t1145 * t1159;
t1177 = t1071 * t1145 + t1072 * t1149;
t1015 = t1071 * t1149 - t1072 * t1145;
t1201 = t1150 * t1015;
t1254 = t1146 * t1177 - t1201;
t1208 = t1146 * t1015;
t1253 = t1150 * t1177 + t1208;
t1143 = sin(qJ(5));
t1138 = qJDD(4) + qJDD(5);
t1141 = sin(pkin(9));
t1142 = cos(pkin(9));
t1148 = cos(qJ(4));
t1184 = t1148 * t1200;
t1144 = sin(qJ(4));
t1185 = t1144 * t1200;
t1091 = t1141 * t1185 - t1142 * t1184;
t1092 = t1141 * t1184 + t1142 * t1185;
t1147 = cos(qJ(5));
t1037 = t1091 * t1147 + t1092 * t1143;
t1039 = -t1091 * t1143 + t1092 * t1147;
t987 = t1039 * t1037;
t1239 = -t987 + t1138;
t1248 = t1143 * t1239;
t1057 = t1092 * t1091;
t1236 = qJDD(4) - t1057;
t1247 = t1144 * t1236;
t1246 = t1147 * t1239;
t1245 = t1148 * t1236;
t1169 = -pkin(2) * t1198 + qJ(3) * t1139 + 0.2e1 * qJD(3) * t1200 + t1072;
t1244 = t1139 * pkin(7) + t1169;
t1155 = t1142 ^ 2;
t1130 = t1155 * t1198;
t1153 = t1141 ^ 2;
t1183 = t1153 * t1198;
t1104 = t1183 + t1130;
t1096 = t1104 * t1142;
t1190 = t1142 * t1202;
t1067 = -t1096 * t1145 + t1190;
t1069 = t1096 * t1149 + t1142 * t1209;
t1242 = t1067 * t1150 - t1069 * t1146;
t1241 = t1067 * t1146 + t1069 * t1150;
t1140 = qJD(4) + qJD(5);
t1030 = t1140 * t1037;
t1082 = t1091 * qJD(4);
t1089 = (t1141 * t1148 + t1142 * t1144) * t1139;
t1054 = -t1082 + t1089;
t1127 = t1141 * t1139;
t1129 = t1142 * t1139;
t1088 = t1127 * t1144 - t1129 * t1148;
t1218 = t1092 * qJD(4);
t1158 = t1088 + t1218;
t969 = -qJD(5) * t1037 + t1054 * t1147 - t1143 * t1158;
t1240 = -t1030 + t969;
t1230 = t1142 * g(1);
t1024 = t1141 * t1169 + t1230;
t1231 = t1141 * g(1);
t1025 = t1142 * t1169 - t1231;
t973 = t1024 * t1141 + t1025 * t1142;
t1178 = t1143 * t1054 + t1147 * t1158;
t917 = (qJD(5) - t1140) * t1039 + t1178;
t1033 = t1037 ^ 2;
t1034 = t1039 ^ 2;
t1235 = t1091 ^ 2;
t1090 = t1092 ^ 2;
t1137 = t1140 ^ 2;
t1186 = t1142 * t1198;
t997 = -t1230 + (pkin(3) * t1186 - t1244) * t1141;
t998 = -pkin(3) * t1130 + t1142 * t1244 - t1231;
t943 = t1144 * t998 - t1148 * t997;
t944 = t1144 * t997 + t1148 * t998;
t875 = t1144 * t944 - t1148 * t943;
t1234 = pkin(3) * t875;
t990 = -t1088 * t1144 - t1089 * t1148;
t1233 = pkin(3) * t990;
t1227 = t1141 * t875;
t1226 = t1142 * t875;
t1047 = -pkin(2) * t1139 - qJ(3) * t1198 + qJDD(3) + t1071;
t1018 = -pkin(3) * t1129 - pkin(7) * t1104 + t1047;
t1075 = qJD(4) * pkin(4) - pkin(8) * t1092;
t932 = pkin(4) * t1158 - pkin(8) * t1235 + t1075 * t1092 + t1018;
t1225 = t1143 * t932;
t984 = t987 + t1138;
t1224 = t1143 * t984;
t883 = (-t1054 - t1082) * pkin(8) + t1236 * pkin(4) - t943;
t886 = -pkin(4) * t1235 - pkin(8) * t1158 - qJD(4) * t1075 + t944;
t843 = t1143 * t886 - t1147 * t883;
t844 = t1143 * t883 + t1147 * t886;
t798 = t1143 * t844 - t1147 * t843;
t1223 = t1144 * t798;
t1222 = t1147 * t932;
t1221 = t1147 * t984;
t1220 = t1148 * t798;
t1219 = -pkin(2) * t1047 + qJ(3) * t973;
t1217 = t1140 * t1039;
t1216 = t1140 * t1143;
t1215 = t1140 * t1147;
t1040 = t1141 * t1047;
t1041 = t1142 * t1047;
t1214 = t1144 * t1018;
t1050 = qJDD(4) + t1057;
t1213 = t1144 * t1050;
t1212 = t1144 * t1091;
t1211 = t1144 * t1092;
t1210 = t1145 * t1047;
t1207 = t1148 * t1018;
t1206 = t1148 * t1050;
t1205 = t1148 * t1091;
t1204 = t1148 * t1092;
t1203 = t1149 * t1047;
t799 = t1143 * t843 + t1147 * t844;
t764 = t1144 * t799 + t1220;
t797 = pkin(4) * t798;
t1197 = pkin(3) * t764 + t797;
t921 = t1030 + t969;
t866 = -t1143 * t917 - t1147 * t921;
t868 = t1143 * t921 - t1147 * t917;
t822 = t1144 * t868 + t1148 * t866;
t864 = pkin(4) * t866;
t1196 = pkin(3) * t822 + t864;
t1195 = t1141 * t1129;
t1194 = t1145 * t987;
t1193 = t1145 * t1057;
t1192 = t1149 * t987;
t1191 = t1149 * t1057;
t1189 = pkin(2) * t1129 - qJ(3) * t1096 - t1041;
t1114 = -qJDD(1) * t1146 - t1150 * t1152;
t1188 = pkin(5) * t1114 + g(1) * t1150;
t876 = t1144 * t943 + t1148 * t944;
t765 = t1148 * t799 - t1223;
t792 = -pkin(4) * t932 + pkin(8) * t799;
t745 = -pkin(3) * t932 + pkin(7) * t765 - pkin(8) * t1223 + t1148 * t792;
t749 = -pkin(7) * t764 - pkin(8) * t1220 - t1144 * t792;
t753 = -t1141 * t764 + t1142 * t765;
t1182 = -pkin(2) * t932 + qJ(3) * t753 + t1141 * t749 + t1142 * t745;
t967 = -t1033 - t1034;
t774 = -pkin(4) * t967 + pkin(8) * t868 + t799;
t783 = -pkin(8) * t866 - t798;
t824 = -t1144 * t866 + t1148 * t868;
t755 = -pkin(3) * t967 + pkin(7) * t824 + t1144 * t783 + t1148 * t774;
t757 = -pkin(7) * t822 - t1144 * t774 + t1148 * t783;
t781 = -t1141 * t822 + t1142 * t824;
t1181 = -pkin(2) * t967 + qJ(3) * t781 + t1141 * t757 + t1142 * t755;
t982 = -t1137 - t1033;
t897 = t1147 * t982 - t1248;
t916 = (qJD(5) + t1140) * t1039 + t1178;
t838 = -pkin(4) * t916 + pkin(8) * t897 - t1222;
t896 = t1143 * t982 + t1246;
t857 = -t1144 * t896 + t1148 * t897;
t870 = -pkin(8) * t896 + t1225;
t777 = -pkin(3) * t916 + pkin(7) * t857 + t1144 * t870 + t1148 * t838;
t856 = t1144 * t897 + t1148 * t896;
t789 = -pkin(7) * t856 - t1144 * t838 + t1148 * t870;
t816 = -t1141 * t856 + t1142 * t857;
t1180 = -pkin(2) * t916 + qJ(3) * t816 + t1141 * t789 + t1142 * t777;
t1026 = -t1034 - t1137;
t942 = -t1026 * t1143 - t1221;
t841 = -pkin(4) * t1240 + pkin(8) * t942 + t1225;
t941 = t1026 * t1147 - t1224;
t872 = -pkin(8) * t941 + t1222;
t874 = -t1144 * t941 + t1148 * t942;
t786 = -pkin(3) * t1240 + pkin(7) * t874 + t1144 * t872 + t1148 * t841;
t873 = t1144 * t942 + t1148 * t941;
t794 = -pkin(7) * t873 - t1144 * t841 + t1148 * t872;
t830 = -t1141 * t873 + t1142 * t874;
t1179 = -pkin(2) * t1240 + qJ(3) * t830 + t1141 * t794 + t1142 * t786;
t1176 = -t1120 * t1146 - t1121 * t1150;
t1023 = -t1090 - t1235;
t992 = -t1088 * t1148 + t1089 * t1144;
t847 = -pkin(3) * t1023 + pkin(7) * t992 + t876;
t855 = -pkin(7) * t990 - t875;
t924 = -t1141 * t990 + t1142 * t992;
t1175 = -pkin(2) * t1023 + qJ(3) * t924 + t1141 * t855 + t1142 * t847;
t1052 = t1088 + 0.2e1 * t1218;
t1151 = qJD(4) ^ 2;
t1048 = -t1151 - t1235;
t989 = t1048 * t1148 - t1247;
t894 = -pkin(3) * t1052 + pkin(7) * t989 - t1207;
t988 = t1048 * t1144 + t1245;
t912 = -t1141 * t988 + t1142 * t989;
t938 = -pkin(7) * t988 + t1214;
t1174 = -pkin(2) * t1052 + qJ(3) * t912 + t1141 * t938 + t1142 * t894;
t1053 = -0.2e1 * t1082 + t1089;
t1078 = -t1090 - t1151;
t1005 = -t1078 * t1144 - t1206;
t926 = -pkin(3) * t1053 + pkin(7) * t1005 + t1214;
t1002 = t1078 * t1148 - t1213;
t955 = -t1002 * t1141 + t1005 * t1142;
t961 = -pkin(7) * t1002 + t1207;
t1173 = -pkin(2) * t1053 + qJ(3) * t955 + t1141 * t961 + t1142 * t926;
t1172 = pkin(3) * t1002 - t944;
t1126 = t1153 * t1139;
t1128 = t1155 * t1139;
t1101 = t1128 + t1126;
t1171 = pkin(2) * t1104 + qJ(3) * t1101 + t973;
t1170 = pkin(4) * t896 - t843;
t1116 = t1141 * t1186;
t972 = t1024 * t1142 - t1025 * t1141;
t1073 = t1106 * t1142 * t1141;
t1074 = -t1116 * t1145 + t1141 * t1190;
t1168 = t1073 * t1150 + t1074 * t1146;
t1167 = t1073 * t1146 - t1074 * t1150;
t1165 = t1120 * t1150 - t1121 * t1146;
t1095 = t1104 * t1141;
t1164 = -pkin(2) * t1127 + qJ(3) * t1095 + t1040;
t1163 = pkin(3) * t988 - t943;
t1162 = pkin(4) * t941 - t844;
t833 = t1142 * t876 - t1227;
t863 = -pkin(3) * t1018 + pkin(7) * t876;
t1161 = -pkin(2) * t1018 - pkin(7) * t1227 + qJ(3) * t833 + t1142 * t863;
t1160 = pkin(3) * t856 + t1170;
t1157 = pkin(3) * t873 + t1162;
t1115 = qJDD(1) * t1150 - t1146 * t1152;
t1113 = 0.2e1 * t1195;
t1105 = t1183 - t1130;
t1102 = t1128 - t1126;
t1099 = pkin(5) * t1115 + g(1) * t1146;
t1077 = -t1090 + t1151;
t1076 = -t1151 + t1235;
t1068 = t1095 * t1149 + t1141 * t1209;
t1065 = t1095 * t1145 - t1141 * t1202;
t1061 = t1102 * t1149 + t1105 * t1145;
t1060 = t1101 * t1149 - t1104 * t1145;
t1059 = t1102 * t1145 - t1105 * t1149;
t1058 = t1101 * t1145 + t1104 * t1149;
t1055 = t1090 - t1235;
t1036 = -pkin(1) * t1106 - t1072;
t1035 = -pkin(1) * t1109 - t1071;
t1032 = (-t1205 + t1211) * qJD(4);
t1031 = (-t1204 - t1212) * qJD(4);
t1028 = -t1034 + t1137;
t1027 = t1033 - t1137;
t1012 = t1065 * t1146 - t1068 * t1150;
t1011 = t1065 * t1150 + t1068 * t1146;
t1010 = pkin(1) * t1015;
t1009 = -qJD(4) * t1211 + t1054 * t1148;
t1008 = qJD(4) * t1204 + t1054 * t1144;
t1007 = qJD(4) * t1205 + t1144 * t1158;
t1006 = qJD(4) * t1212 - t1148 * t1158;
t1004 = -t1077 * t1144 + t1245;
t1003 = t1076 * t1148 - t1213;
t1001 = t1077 * t1148 + t1247;
t1000 = t1076 * t1144 + t1206;
t999 = pkin(1) * g(1) + pkin(6) * t1177;
t993 = -t1052 * t1148 - t1053 * t1144;
t991 = -t1052 * t1144 + t1053 * t1148;
t986 = t1034 - t1033;
t981 = -t1031 * t1141 + t1032 * t1142;
t980 = t1031 * t1142 + t1032 * t1141;
t979 = (-t1037 * t1147 + t1039 * t1143) * t1140;
t978 = (-t1037 * t1143 - t1039 * t1147) * t1140;
t977 = pkin(1) * t1067 + t1189;
t976 = pkin(1) * t1065 + t1164;
t975 = qJDD(4) * t1145 + t1149 * t981;
t974 = -qJDD(4) * t1149 + t1145 * t981;
t968 = -qJD(5) * t1039 - t1178;
t965 = -pkin(6) * t1065 - t1025 * t1145 + t1142 * t1203;
t964 = -pkin(6) * t1067 - t1024 * t1145 + t1141 * t1203;
t963 = pkin(6) * t1068 + t1025 * t1149 + t1142 * t1210;
t962 = -pkin(6) * t1069 + t1024 * t1149 + t1141 * t1210;
t959 = -t1008 * t1141 + t1009 * t1142;
t958 = -t1006 * t1141 + t1007 * t1142;
t957 = t1008 * t1142 + t1009 * t1141;
t956 = t1006 * t1142 + t1007 * t1141;
t954 = -t1001 * t1141 + t1004 * t1142;
t953 = -t1000 * t1141 + t1003 * t1142;
t952 = t1002 * t1142 + t1005 * t1141;
t951 = t1001 * t1142 + t1004 * t1141;
t950 = t1000 * t1142 + t1003 * t1141;
t948 = t1027 * t1147 - t1224;
t947 = -t1028 * t1143 + t1246;
t946 = t1027 * t1143 + t1221;
t945 = t1028 * t1147 + t1248;
t937 = -pkin(6) * t1058 + t1149 * t972;
t936 = pkin(6) * t1060 + t1145 * t972;
t934 = t1149 * t973 + t1210;
t933 = t1145 * t973 - t1203;
t930 = t1089 * t1145 + t1149 * t954;
t929 = -t1088 * t1145 + t1149 * t953;
t928 = -t1089 * t1149 + t1145 * t954;
t927 = t1088 * t1149 + t1145 * t953;
t925 = -t1141 * t991 + t1142 * t993;
t923 = t1141 * t993 + t1142 * t991;
t922 = t1141 * t992 + t1142 * t990;
t911 = t1141 * t989 + t1142 * t988;
t908 = t1149 * t959 + t1193;
t907 = t1149 * t958 - t1193;
t906 = t1145 * t959 - t1191;
t905 = t1145 * t958 + t1191;
t904 = pkin(1) * t1058 + t1171;
t903 = -t1039 * t1216 + t1147 * t969;
t902 = t1039 * t1215 + t1143 * t969;
t901 = t1037 * t1215 - t1143 * t968;
t900 = t1037 * t1216 + t1147 * t968;
t899 = t1053 * t1145 + t1149 * t955;
t898 = -t1053 * t1149 + t1145 * t955;
t892 = -t1144 * t978 + t1148 * t979;
t891 = t1144 * t979 + t1148 * t978;
t890 = t1055 * t1145 + t1149 * t925;
t889 = -t1055 * t1149 + t1145 * t925;
t888 = t1052 * t1145 + t1149 * t912;
t887 = -t1052 * t1149 + t1145 * t912;
t885 = t1023 * t1145 + t1149 * t924;
t884 = -t1023 * t1149 + t1145 * t924;
t881 = -pkin(2) * t922 - t1233;
t880 = -t1144 * t946 + t1148 * t948;
t879 = -t1144 * t945 + t1148 * t947;
t878 = t1144 * t948 + t1148 * t946;
t877 = t1144 * t947 + t1148 * t945;
t871 = pkin(1) * t933 + t1219;
t869 = -pkin(2) * t952 - t1172;
t867 = -t1143 * t1240 - t1147 * t916;
t865 = -t1143 * t916 + t1147 * t1240;
t861 = -t1144 * t902 + t1148 * t903;
t860 = -t1144 * t900 + t1148 * t901;
t859 = t1144 * t903 + t1148 * t902;
t858 = t1144 * t901 + t1148 * t900;
t853 = -pkin(6) * t933 - (pkin(2) * t1145 - qJ(3) * t1149) * t972;
t852 = -pkin(2) * t911 - t1163;
t851 = -t1141 * t891 + t1142 * t892;
t850 = t1141 * t892 + t1142 * t891;
t849 = t1138 * t1145 + t1149 * t851;
t848 = -t1138 * t1149 + t1145 * t851;
t845 = -qJ(3) * t952 - t1141 * t926 + t1142 * t961;
t840 = pkin(6) * t934 - (-pkin(2) * t1149 - qJ(3) * t1145 - pkin(1)) * t972;
t839 = -qJ(3) * t911 - t1141 * t894 + t1142 * t938;
t837 = -t1141 * t878 + t1142 * t880;
t836 = -t1141 * t877 + t1142 * t879;
t835 = t1141 * t880 + t1142 * t878;
t834 = t1141 * t879 + t1142 * t877;
t832 = t1141 * t876 + t1226;
t829 = t1141 * t874 + t1142 * t873;
t827 = t1018 * t1145 + t1149 * t833;
t826 = -t1018 * t1149 + t1145 * t833;
t825 = pkin(1) * t898 + t1173;
t823 = -t1144 * t865 + t1148 * t867;
t821 = t1144 * t867 + t1148 * t865;
t820 = -t1141 * t859 + t1142 * t861;
t819 = -t1141 * t858 + t1142 * t860;
t818 = t1141 * t861 + t1142 * t859;
t817 = t1141 * t860 + t1142 * t858;
t815 = t1141 * t857 + t1142 * t856;
t813 = -t1145 * t917 + t1149 * t837;
t812 = t1145 * t921 + t1149 * t836;
t811 = t1145 * t837 + t1149 * t917;
t810 = t1145 * t836 - t1149 * t921;
t809 = t1145 * t1240 + t1149 * t830;
t808 = t1145 * t830 - t1149 * t1240;
t807 = pkin(1) * t887 + t1174;
t806 = t1149 * t820 + t1194;
t805 = t1149 * t819 - t1194;
t804 = t1145 * t820 - t1192;
t803 = t1145 * t819 + t1192;
t802 = -pkin(2) * t832 - t1234;
t801 = t1145 * t916 + t1149 * t816;
t800 = t1145 * t816 - t1149 * t916;
t796 = -pkin(6) * t898 - t1145 * t869 + t1149 * t845;
t795 = -qJ(3) * t922 - t1141 * t847 + t1142 * t855;
t791 = -pkin(1) * t952 + pkin(6) * t899 + t1145 * t845 + t1149 * t869;
t790 = -pkin(6) * t887 - t1145 * t852 + t1149 * t839;
t788 = -pkin(7) * t1226 - qJ(3) * t832 - t1141 * t863;
t784 = pkin(1) * t884 + t1175;
t782 = -pkin(1) * t911 + pkin(6) * t888 + t1145 * t839 + t1149 * t852;
t780 = -t1141 * t821 + t1142 * t823;
t779 = t1141 * t824 + t1142 * t822;
t778 = t1141 * t823 + t1142 * t821;
t773 = -pkin(6) * t884 - t1145 * t881 + t1149 * t795;
t772 = t1145 * t986 + t1149 * t780;
t771 = t1145 * t780 - t1149 * t986;
t770 = -pkin(2) * t829 - t1157;
t769 = t1145 * t967 + t1149 * t781;
t768 = t1145 * t781 - t1149 * t967;
t767 = -pkin(1) * t922 + pkin(6) * t885 + t1145 * t795 + t1149 * t881;
t766 = -pkin(2) * t815 - t1160;
t763 = pkin(1) * t826 + t1161;
t762 = -pkin(2) * t779 - t1196;
t761 = -pkin(6) * t826 - t1145 * t802 + t1149 * t788;
t760 = -qJ(3) * t829 - t1141 * t786 + t1142 * t794;
t759 = -pkin(1) * t832 + pkin(6) * t827 + t1145 * t788 + t1149 * t802;
t758 = -qJ(3) * t815 - t1141 * t777 + t1142 * t789;
t752 = t1141 * t765 + t1142 * t764;
t750 = pkin(1) * t808 + t1179;
t747 = t1145 * t932 + t1149 * t753;
t746 = t1145 * t753 - t1149 * t932;
t743 = pkin(1) * t800 + t1180;
t742 = -pkin(6) * t808 - t1145 * t770 + t1149 * t760;
t741 = -pkin(1) * t829 + pkin(6) * t809 + t1145 * t760 + t1149 * t770;
t740 = -pkin(6) * t800 - t1145 * t766 + t1149 * t758;
t739 = -pkin(2) * t752 - t1197;
t738 = -pkin(1) * t815 + pkin(6) * t801 + t1145 * t758 + t1149 * t766;
t737 = -qJ(3) * t779 - t1141 * t755 + t1142 * t757;
t736 = pkin(1) * t768 + t1181;
t735 = -qJ(3) * t752 - t1141 * t745 + t1142 * t749;
t734 = -pkin(6) * t768 - t1145 * t762 + t1149 * t737;
t733 = -pkin(1) * t779 + pkin(6) * t769 + t1145 * t737 + t1149 * t762;
t732 = pkin(1) * t746 + t1182;
t731 = -pkin(6) * t746 - t1145 * t739 + t1149 * t735;
t730 = -pkin(1) * t752 + pkin(6) * t747 + t1145 * t735 + t1149 * t739;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t1121, t1120, 0, 0, 0, 0, 0, 0, 0, t1139, t1035, t1036, 0, -t1010, t1126, t1113, 0, t1128, 0, 0, t977, t976, t904, t871, t957, t923, t951, t956, t950, t980, t807, t825, t784, t763, t818, t778, t834, t817, t835, t850, t743, t750, t736, t732; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t1114, 0, t1115, 0, t1188, -t1099, -t1165, -pkin(5) * t1165, 0, 0, t1063, 0, -t1166, 0, t1255, t1256, t1253, pkin(5) * t1253 + pkin(6) * t1208 + t1150 * t999, t1168, t1059 * t1150 + t1061 * t1146, t1011, -t1168, -t1242, 0, -pkin(5) * t1241 + t1146 * t964 + t1150 * t962, -pkin(5) * t1012 + t1146 * t965 + t1150 * t963, t1146 * t937 + t1150 * t936 - pkin(5) * (t1058 * t1146 - t1060 * t1150), t1146 * t853 + t1150 * t840 - pkin(5) * (t1146 * t933 - t1150 * t934), t1146 * t908 + t1150 * t906, t1146 * t890 + t1150 * t889, t1146 * t930 + t1150 * t928, t1146 * t907 + t1150 * t905, t1146 * t929 + t1150 * t927, t1146 * t975 + t1150 * t974, t1146 * t790 + t1150 * t782 - pkin(5) * (t1146 * t887 - t1150 * t888), t1146 * t796 + t1150 * t791 - pkin(5) * (t1146 * t898 - t1150 * t899), t1146 * t773 + t1150 * t767 - pkin(5) * (t1146 * t884 - t1150 * t885), t1146 * t761 + t1150 * t759 - pkin(5) * (t1146 * t826 - t1150 * t827), t1146 * t806 + t1150 * t804, t1146 * t772 + t1150 * t771, t1146 * t812 + t1150 * t810, t1146 * t805 + t1150 * t803, t1146 * t813 + t1150 * t811, t1146 * t849 + t1150 * t848, t1146 * t740 + t1150 * t738 - pkin(5) * (t1146 * t800 - t1150 * t801), t1146 * t742 + t1150 * t741 - pkin(5) * (t1146 * t808 - t1150 * t809), t1146 * t734 + t1150 * t733 - pkin(5) * (t1146 * t768 - t1150 * t769), t1146 * t731 + t1150 * t730 - pkin(5) * (t1146 * t746 - t1150 * t747); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t1115, 0, -t1114, 0, t1099, t1188, t1176, pkin(5) * t1176, 0, 0, t1166, 0, t1063, 0, -t1256, t1255, t1254, pkin(5) * t1254 - pkin(6) * t1201 + t1146 * t999, t1167, t1059 * t1146 - t1061 * t1150, t1012, -t1167, -t1241, 0, pkin(5) * t1242 + t1146 * t962 - t1150 * t964, pkin(5) * t1011 + t1146 * t963 - t1150 * t965, -t1150 * t937 + t1146 * t936 + pkin(5) * (t1058 * t1150 + t1060 * t1146), -t1150 * t853 + t1146 * t840 + pkin(5) * (t1146 * t934 + t1150 * t933), t1146 * t906 - t1150 * t908, t1146 * t889 - t1150 * t890, t1146 * t928 - t1150 * t930, t1146 * t905 - t1150 * t907, t1146 * t927 - t1150 * t929, t1146 * t974 - t1150 * t975, -t1150 * t790 + t1146 * t782 + pkin(5) * (t1146 * t888 + t1150 * t887), -t1150 * t796 + t1146 * t791 + pkin(5) * (t1146 * t899 + t1150 * t898), -t1150 * t773 + t1146 * t767 + pkin(5) * (t1146 * t885 + t1150 * t884), -t1150 * t761 + t1146 * t759 + pkin(5) * (t1146 * t827 + t1150 * t826), t1146 * t804 - t1150 * t806, t1146 * t771 - t1150 * t772, t1146 * t810 - t1150 * t812, t1146 * t803 - t1150 * t805, t1146 * t811 - t1150 * t813, t1146 * t848 - t1150 * t849, -t1150 * t740 + t1146 * t738 + pkin(5) * (t1146 * t801 + t1150 * t800), -t1150 * t742 + t1146 * t741 + pkin(5) * (t1146 * t809 + t1150 * t808), -t1150 * t734 + t1146 * t733 + pkin(5) * (t1146 * t769 + t1150 * t768), -t1150 * t731 + t1146 * t730 + pkin(5) * (t1146 * t747 + t1150 * t746); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1152, 0, 0, -g(1), t1121, 0, 0, 0, -t1109, 0, -t1106, 0, t1243, t1087, t1015, pkin(6) * t1015, t1074, t1061, t1068, -t1074, t1069, 0, t964, t965, t937, t853, t908, t890, t930, t907, t929, t975, t790, t796, t773, t761, t806, t772, t812, t805, t813, t849, t740, t742, t734, t731; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1152, 0, qJDD(1), 0, g(1), 0, -t1120, 0, 0, 0, t1106, 0, -t1109, 0, -t1087, t1243, t1177, t999, t1073, t1059, t1065, -t1073, -t1067, 0, t962, t963, t936, t840, t906, t889, t928, t905, t927, t974, t782, t791, t767, t759, t804, t771, t810, t803, t811, t848, t738, t741, t733, t730; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1121, t1120, 0, 0, 0, 0, 0, 0, 0, t1139, t1035, t1036, 0, -t1010, t1126, t1113, 0, t1128, 0, 0, t977, t976, t904, t871, t957, t923, t951, t956, t950, t980, t807, t825, t784, t763, t818, t778, t834, t817, t835, t850, t743, t750, t736, t732; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1139, 0, -t1198, 0, 0, -g(1), t1071, 0, t1195, t1102, t1095, -t1195, t1096, 0, t1040, t1041, t972, qJ(3) * t972, t959, t925, t954, t958, t953, t981, t839, t845, t795, t788, t820, t780, t836, t819, t837, t851, t758, t760, t737, t735; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1198, 0, t1139, 0, g(1), 0, t1072, 0, t1116, -t1105, -t1127, -t1116, -t1129, 0, t1024, t1025, 0, pkin(2) * t972, -t1057, -t1055, -t1089, t1057, t1088, -qJDD(4), t852, t869, t881, t802, -t987, -t986, -t921, t987, t917, -t1138, t766, t770, t762, t739; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1139, -t1071, -t1072, 0, 0, t1126, t1113, 0, t1128, 0, 0, t1189, t1164, t1171, t1219, t957, t923, t951, t956, t950, t980, t1174, t1173, t1175, t1161, t818, t778, t834, t817, t835, t850, t1180, t1179, t1181, t1182; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1127, t1129, t1116, 0, t1130, 0, 0, t1047, t1024, 0, t1009, t993, t1004, t1007, t1003, t1032, t938, t961, t855, -pkin(7) * t875, t861, t823, t879, t860, t880, t892, t789, t794, t757, t749; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1127, -t1183, t1129, -t1116, 0, -t1047, 0, t1025, 0, t1008, t991, t1001, t1006, t1000, t1031, t894, t926, t847, t863, t859, t821, t877, t858, t878, t891, t777, t786, t755, t745; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1116, t1105, t1127, t1116, t1129, 0, -t1024, -t1025, 0, 0, t1057, t1055, t1089, -t1057, -t1088, qJDD(4), t1163, t1172, t1233, t1234, t987, t986, t921, -t987, -t917, t1138, t1160, t1157, t1196, t1197; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1054, -t1052, t1236, t1082, t1076, -t1082, 0, t1018, t943, 0, t903, t867, t947, t901, t948, t979, t870, t872, t783, -pkin(8) * t798; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1218, t1053, t1077, -t1158, t1050, -t1218, -t1018, 0, t944, 0, t902, t865, t945, t900, t946, t978, t838, t841, t774, t792; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1057, t1055, t1089, -t1057, -t1088, qJDD(4), -t943, -t944, 0, 0, t987, t986, t921, -t987, -t917, t1138, t1170, t1162, t864, t797; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t969, -t916, t1239, t1030, t1027, -t1030, 0, t932, t843, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1217, t1240, t1028, t968, t984, -t1217, -t932, 0, t844, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t987, t986, t921, -t987, -t917, t1138, -t843, -t844, 0, 0;];
m_new_reg = t1;
