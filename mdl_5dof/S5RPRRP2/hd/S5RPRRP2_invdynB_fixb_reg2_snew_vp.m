% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:02
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRRP2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP2_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP2_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP2_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP2_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:01:48
% EndTime: 2019-12-05 18:01:57
% DurationCPUTime: 6.28s
% Computational Cost: add. (16938->381), mult. (25982->522), div. (0->0), fcn. (14576->8), ass. (0->282)
t414 = qJD(1) + qJD(3);
t412 = t414 ^ 2;
t424 = cos(qJ(3));
t413 = qJDD(1) + qJDD(3);
t421 = sin(qJ(3));
t468 = t421 * t413;
t382 = t424 * t412 + t468;
t461 = t424 * t413;
t385 = t421 * t412 - t461;
t418 = sin(pkin(8));
t419 = cos(pkin(8));
t321 = t419 * t382 - t418 * t385;
t417 = g(1) - qJDD(2);
t359 = pkin(6) * t382 - t424 * t417;
t503 = pkin(6) * t385 - t421 * t417;
t269 = qJ(2) * t321 + t419 * t359 - t418 * t503;
t422 = sin(qJ(1));
t425 = cos(qJ(1));
t325 = t418 * t382 + t419 * t385;
t508 = qJ(2) * t325 + t418 * t359 + t419 * t503;
t509 = t422 * t321 + t425 * t325;
t515 = pkin(5) * t509 + t422 * t269 + t425 * t508;
t280 = t425 * t321 - t422 * t325;
t514 = pkin(5) * t280 + t425 * t269 - t422 * t508;
t401 = t425 * g(2) + t422 * g(3);
t430 = qJDD(1) * pkin(1) + t401;
t400 = t422 * g(2) - t425 * g(3);
t427 = qJD(1) ^ 2;
t431 = -t427 * pkin(1) + t400;
t332 = t418 * t430 + t419 * t431;
t330 = -t427 * pkin(2) + t332;
t429 = -t418 * t431 + t419 * t430;
t428 = qJDD(1) * pkin(2) + t429;
t288 = t421 * t330 - t424 * t428;
t289 = t424 * t330 + t421 * t428;
t444 = t421 * t288 + t424 * t289;
t234 = t424 * t288 - t421 * t289;
t474 = t419 * t234;
t191 = -t418 * t444 + t474;
t475 = t418 * t234;
t505 = t419 * t444 + t475;
t173 = t422 * t191 + t425 * t505;
t172 = t425 * t191 - t422 * t505;
t443 = t419 * t332 - t418 * t429;
t292 = -t418 * t332 - t419 * t429;
t459 = t425 * t292;
t237 = -t422 * t443 + t459;
t466 = t422 * t292;
t504 = -t425 * t443 - t466;
t391 = t418 * qJDD(1) + t419 * t427;
t363 = qJ(2) * t391 - t419 * t417;
t392 = t419 * qJDD(1) - t418 * t427;
t433 = t422 * t391 - t425 * t392;
t434 = -qJ(2) * t392 - t418 * t417;
t502 = pkin(5) * t433 + t422 * t363 + t425 * t434;
t339 = t425 * t391 + t422 * t392;
t501 = pkin(5) * t339 + t425 * t363 - t422 * t434;
t420 = sin(qJ(4));
t423 = cos(qJ(4));
t399 = t423 * t412 * t420;
t455 = qJDD(4) + t399;
t500 = t455 * pkin(4);
t277 = -t412 * pkin(3) + t413 * pkin(7) + t289;
t260 = t420 * t277 + t423 * t417;
t456 = qJD(4) * t423;
t449 = t414 * t456;
t469 = t420 * t413;
t374 = t449 + t469;
t365 = t374 * qJ(5);
t492 = -t365 - t260 + t500;
t490 = pkin(1) * t417;
t426 = qJD(4) ^ 2;
t415 = t420 ^ 2;
t476 = t415 * t412;
t396 = -t426 - t476;
t390 = qJDD(4) - t399;
t470 = t420 * t390;
t345 = t423 * t396 - t470;
t489 = pkin(3) * t345;
t416 = t423 ^ 2;
t406 = t416 * t412;
t398 = -t406 - t426;
t471 = t420 * t455;
t347 = t423 * t398 - t471;
t457 = qJD(4) * t414;
t450 = t420 * t457;
t462 = t423 * t413;
t376 = -0.2e1 * t450 + t462;
t302 = t421 * t347 + t424 * t376;
t304 = t424 * t347 - t421 * t376;
t255 = t419 * t302 + t418 * t304;
t257 = -t418 * t302 + t419 * t304;
t209 = -t422 * t255 + t425 * t257;
t488 = pkin(5) * t209;
t463 = t423 * t390;
t349 = -t420 * t396 - t463;
t373 = 0.2e1 * t449 + t469;
t303 = t421 * t349 - t424 * t373;
t305 = t424 * t349 + t421 * t373;
t256 = t419 * t303 + t418 * t305;
t258 = -t418 * t303 + t419 * t305;
t210 = -t422 * t256 + t425 * t258;
t487 = pkin(5) * t210;
t458 = t415 + t416;
t380 = t458 * t413;
t386 = t406 + t476;
t327 = t421 * t380 + t424 * t386;
t328 = t424 * t380 - t421 * t386;
t284 = t419 * t327 + t418 * t328;
t285 = -t418 * t327 + t419 * t328;
t230 = -t422 * t284 + t425 * t285;
t486 = pkin(5) * t230;
t485 = pkin(6) * t302;
t484 = pkin(6) * t303;
t483 = pkin(6) * t327;
t381 = t423 * t455;
t343 = t420 * t398 + t381;
t482 = pkin(7) * t343;
t481 = pkin(7) * t345;
t480 = qJ(2) * t255;
t479 = qJ(2) * t256;
t478 = qJ(2) * t284;
t477 = t414 * t420;
t239 = (qJ(5) * t456 - 0.2e1 * qJD(5) * t420) * t414 + t492;
t473 = t420 * t239;
t276 = -t413 * pkin(3) - t412 * pkin(7) + t288;
t472 = t420 * t276;
t465 = t423 * t239;
t464 = t423 * t276;
t261 = t423 * t277 - t420 * t417;
t454 = 0.2e1 * qJD(5) * t414;
t453 = t420 * t468;
t452 = t420 * t461;
t448 = -pkin(1) * t343 + qJ(2) * t257;
t447 = -pkin(1) * t345 + qJ(2) * t258;
t446 = -pkin(2) * t343 + pkin(6) * t304;
t445 = -pkin(2) * t345 + pkin(6) * t305;
t215 = t420 * t260 + t423 * t261;
t441 = t421 * t399;
t440 = t424 * t399;
t439 = pkin(1) * t255 + pkin(2) * t302 + pkin(3) * t376 + pkin(7) * t347;
t438 = pkin(1) * t256 + pkin(2) * t303 - pkin(3) * t373 + pkin(7) * t349;
t437 = pkin(1) * t284 + pkin(2) * t327 + pkin(3) * t386 + pkin(7) * t380;
t245 = -pkin(3) * t343 + t260;
t393 = t422 * qJDD(1) + t425 * t427;
t436 = pkin(5) * t393 - t425 * g(1);
t214 = t423 * t260 - t420 * t261;
t355 = t425 * t400 - t422 * t401;
t354 = -t422 * t400 - t425 * t401;
t375 = -t450 + t462;
t388 = qJD(4) * pkin(4) - qJ(5) * t477;
t432 = t375 * qJ(5) - qJD(4) * t388 + t423 * t454 + t261;
t242 = -t375 * pkin(4) - qJ(5) * t406 + t388 * t477 + qJDD(5) + t276;
t403 = t420 * t454;
t397 = t406 - t426;
t395 = t426 - t476;
t394 = -t425 * qJDD(1) + t422 * t427;
t387 = t406 - t476;
t371 = -pkin(5) * t394 + t422 * g(1);
t370 = t458 * t457;
t353 = t421 * qJDD(4) + t424 * t370;
t352 = -t424 * qJDD(4) + t421 * t370;
t351 = t423 * t374 - t415 * t457;
t350 = -t420 * t375 - t416 * t457;
t348 = -t420 * t395 + t381;
t346 = t423 * t397 - t470;
t344 = t423 * t395 + t471;
t342 = t420 * t397 + t463;
t335 = (t374 + t449) * t420;
t334 = (t375 - t450) * t423;
t333 = -pkin(4) * t373 - qJ(5) * t390;
t319 = pkin(6) * t328;
t315 = -t420 * t373 + t423 * t376;
t314 = t423 * t373 + t420 * t376;
t313 = t424 * t348 + t453;
t312 = t424 * t346 + t421 * t462;
t311 = t421 * t348 - t452;
t310 = t421 * t346 - t423 * t461;
t309 = t424 * t351 - t441;
t308 = t424 * t350 + t441;
t307 = t421 * t351 + t440;
t306 = t421 * t350 - t440;
t297 = -t418 * t352 + t419 * t353;
t296 = t419 * t352 + t418 * t353;
t295 = t424 * t315 - t421 * t387;
t294 = t421 * t315 + t424 * t387;
t287 = qJ(2) * t443 + t490;
t278 = qJ(2) * t285;
t273 = -t418 * t311 + t419 * t313;
t272 = -t418 * t310 + t419 * t312;
t271 = t419 * t311 + t418 * t313;
t270 = t419 * t310 + t418 * t312;
t265 = -t418 * t307 + t419 * t309;
t264 = -t418 * t306 + t419 * t308;
t263 = t419 * t307 + t418 * t309;
t262 = t419 * t306 + t418 * t308;
t250 = t464 - t481;
t249 = t472 - t482;
t248 = -t422 * t296 + t425 * t297;
t247 = -t425 * t296 - t422 * t297;
t246 = t261 - t489;
t244 = -t418 * t294 + t419 * t295;
t243 = t419 * t294 + t418 * t295;
t241 = -qJ(5) * t396 + t242;
t240 = -pkin(4) * t406 + t432;
t236 = t403 + (-t449 + t469) * qJ(5) - t492;
t231 = pkin(4) * t376 + qJ(5) * t398 - t242;
t229 = -t425 * t284 - t422 * t285;
t228 = pkin(2) * t417 + pkin(6) * t444;
t227 = qJ(5) * t462 + (t386 - t406) * pkin(4) + t432;
t226 = pkin(5) * t229;
t225 = -t489 + (-t396 - t406) * pkin(4) + t432;
t224 = -qJ(5) * t449 + t245 + t365 + t403 - 0.2e1 * t500;
t223 = -t422 * t271 + t425 * t273;
t222 = -t422 * t270 + t425 * t272;
t221 = -t425 * t271 - t422 * t273;
t220 = -t425 * t270 - t422 * t272;
t219 = -t422 * t263 + t425 * t265;
t218 = -t422 * t262 + t425 * t264;
t217 = -t425 * t263 - t422 * t265;
t216 = -t425 * t262 - t422 * t264;
t212 = -qJ(5) * t381 - t420 * t231 - t482;
t211 = t423 * t241 - t420 * t333 - t481;
t208 = -t425 * t256 - t422 * t258;
t207 = -t425 * t255 - t422 * t257;
t206 = pkin(5) * t208;
t205 = pkin(5) * t207;
t204 = t424 * t214 - t483;
t203 = t421 * t214 + t319;
t202 = -t422 * t243 + t425 * t244;
t201 = -t425 * t243 - t422 * t244;
t200 = -pkin(4) * t242 + qJ(5) * t240;
t199 = t424 * t215 + t421 * t276;
t198 = t421 * t215 - t424 * t276;
t197 = t423 * t240 - t473;
t196 = t420 * t240 + t465;
t195 = -t421 * t246 + t424 * t250 - t484;
t194 = -t421 * t245 + t424 * t249 - t485;
t193 = -t420 * t227 + t423 * t236;
t188 = t424 * t246 + t421 * t250 + t445;
t187 = t424 * t245 + t421 * t249 + t446;
t186 = -pkin(4) * t453 + t424 * t193 - t483;
t185 = pkin(4) * t452 + t421 * t193 + t319;
t184 = t424 * t197 + t421 * t242;
t183 = t421 * t197 - t424 * t242;
t182 = -pkin(3) * t196 - pkin(4) * t239;
t181 = t424 * t211 - t421 * t225 - t484;
t180 = t424 * t212 - t421 * t224 - t485;
t179 = t421 * t211 + t424 * t225 + t445;
t178 = t421 * t212 + t424 * t224 + t446;
t177 = -t418 * t203 + t419 * t204 - t478;
t176 = t419 * t203 + t418 * t204 + t278;
t175 = -t418 * t198 + t419 * t199;
t174 = t419 * t198 + t418 * t199;
t171 = pkin(6) * t474 + qJ(2) * t191 - t418 * t228;
t170 = pkin(6) * t475 + qJ(2) * t505 + t419 * t228 + t490;
t169 = -pkin(6) * t198 - (pkin(3) * t421 - pkin(7) * t424) * t214;
t168 = -pkin(7) * t196 - qJ(5) * t465 - t420 * t200;
t167 = -t418 * t188 + t419 * t195 - t479;
t166 = -t418 * t187 + t419 * t194 - t480;
t165 = t419 * t188 + t418 * t195 + t447;
t164 = t419 * t187 + t418 * t194 + t448;
t163 = -t418 * t185 + t419 * t186 - t478;
t162 = t419 * t185 + t418 * t186 + t278;
t161 = -t418 * t183 + t419 * t184;
t160 = t419 * t183 + t418 * t184;
t159 = pkin(6) * t199 - (-pkin(3) * t424 - pkin(7) * t421 - pkin(2)) * t214;
t158 = -t418 * t179 + t419 * t181 - t479;
t157 = -t418 * t178 + t419 * t180 - t480;
t156 = t419 * t179 + t418 * t181 + t447;
t155 = t419 * t178 + t418 * t180 + t448;
t154 = -t422 * t174 + t425 * t175;
t153 = -t425 * t174 - t422 * t175;
t152 = -pkin(6) * t183 + t424 * t168 - t421 * t182;
t151 = -t422 * t160 + t425 * t161;
t150 = -t425 * t160 - t422 * t161;
t149 = -pkin(2) * t196 + pkin(6) * t184 + t421 * t168 + t424 * t182;
t148 = -qJ(2) * t174 - t418 * t159 + t419 * t169;
t147 = pkin(1) * t214 + qJ(2) * t175 + t419 * t159 + t418 * t169;
t146 = -qJ(2) * t160 - t418 * t149 + t419 * t152;
t145 = -pkin(1) * t196 + qJ(2) * t161 + t419 * t149 + t418 * t152;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t417, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t417, 0, 0, 0, 0, 0, 0, t343, t345, 0, -t214, 0, 0, 0, 0, 0, 0, t343, t345, 0, t196; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t394, t393, 0, t354, 0, 0, 0, 0, 0, 0, t433, t339, 0, t237, 0, 0, 0, 0, 0, 0, t509, t280, 0, t172, 0, 0, 0, 0, 0, 0, t207, t208, t229, t153, 0, 0, 0, 0, 0, 0, t207, t208, t229, t150; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t393, t394, 0, t355, 0, 0, 0, 0, 0, 0, -t339, t433, 0, -t504, 0, 0, 0, 0, 0, 0, -t280, t509, 0, t173, 0, 0, 0, 0, 0, 0, t209, t210, t230, t154, 0, 0, 0, 0, 0, 0, t209, t210, t230, t151; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t401, -t400, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t392 + t429, -pkin(1) * t391 - t332, 0, -pkin(1) * t292, 0, 0, 0, 0, 0, t413, -pkin(1) * t325 - pkin(2) * t385 - t288, -pkin(1) * t321 - pkin(2) * t382 - t289, 0, -pkin(1) * t191 - pkin(2) * t234, t335, t314, t344, t334, t342, 0, t439 - t464, t438 + t472, t215 + t437, pkin(1) * t174 + pkin(2) * t198 - pkin(3) * t276 + pkin(7) * t215, t335, t314, t344, t334, t342, 0, -qJ(5) * t471 + t423 * t231 + t439, t420 * t241 + t423 * t333 + t438, t423 * t227 + t420 * t236 + t437, pkin(1) * t160 + pkin(2) * t183 - pkin(3) * t242 + pkin(7) * t197 - qJ(5) * t473 + t423 * t200; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t393, 0, t394, 0, t436, t371, -t355, -pkin(5) * t355, 0, 0, -t339, 0, t433, 0, t501, -t502, t504, pkin(5) * t504 - qJ(2) * t466 - t425 * t287, 0, 0, -t280, 0, t509, 0, t514, -t515, -t173, -pkin(5) * t173 - t425 * t170 - t422 * t171, t217, t201, t221, t216, t220, t247, -t425 * t164 - t422 * t166 - t488, -t425 * t165 - t422 * t167 - t487, -t425 * t176 - t422 * t177 - t486, -pkin(5) * t154 - t425 * t147 - t422 * t148, t217, t201, t221, t216, t220, t247, -t425 * t155 - t422 * t157 - t488, -t425 * t156 - t422 * t158 - t487, -t425 * t162 - t422 * t163 - t486, -pkin(5) * t151 - t425 * t145 - t422 * t146; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t394, 0, -t393, 0, -t371, t436, t354, pkin(5) * t354, 0, 0, -t433, 0, -t339, 0, t502, t501, t237, pkin(5) * t237 + qJ(2) * t459 - t422 * t287, 0, 0, -t509, 0, -t280, 0, t515, t514, t172, pkin(5) * t172 - t422 * t170 + t425 * t171, t219, t202, t223, t218, t222, t248, -t422 * t164 + t425 * t166 + t205, -t422 * t165 + t425 * t167 + t206, -t422 * t176 + t425 * t177 + t226, pkin(5) * t153 - t422 * t147 + t425 * t148, t219, t202, t223, t218, t222, t248, -t422 * t155 + t425 * t157 + t205, -t422 * t156 + t425 * t158 + t206, -t422 * t162 + t425 * t163 + t226, pkin(5) * t150 - t422 * t145 + t425 * t146;];
tauB_reg = t1;
