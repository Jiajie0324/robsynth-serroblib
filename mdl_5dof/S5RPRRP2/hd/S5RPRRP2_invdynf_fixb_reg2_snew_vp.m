% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRRP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:45
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRRP2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP2_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:45:50
% EndTime: 2020-01-03 11:45:52
% DurationCPUTime: 2.04s
% Computational Cost: add. (4424->136), mult. (6817->181), div. (0->0), fcn. (3888->8), ass. (0->106)
t1052 = sin(qJ(1));
t1055 = cos(qJ(1));
t1044 = qJD(1) + qJD(3);
t1042 = t1044 ^ 2;
t1043 = qJDD(1) + qJDD(3);
t1051 = sin(qJ(3));
t1054 = cos(qJ(3));
t1018 = t1042 * t1051 - t1043 * t1054;
t1048 = sin(pkin(8));
t1049 = cos(pkin(8));
t1062 = -t1042 * t1054 - t1043 * t1051;
t1075 = t1018 * t1048 + t1049 * t1062;
t999 = t1018 * t1049 - t1048 * t1062;
t1079 = t1052 * t999 + t1055 * t1075;
t1078 = t1052 * t1075 - t1055 * t999;
t1033 = -g(2) * t1055 - g(3) * t1052;
t1059 = qJDD(1) * pkin(1) + t1033;
t1032 = -g(2) * t1052 + g(3) * t1055;
t1057 = qJD(1) ^ 2;
t1060 = -pkin(1) * t1057 + t1032;
t1005 = t1048 * t1059 + t1049 * t1060;
t1003 = -pkin(2) * t1057 + t1005;
t1004 = -t1048 * t1060 + t1049 * t1059;
t1058 = qJDD(1) * pkin(2) + t1004;
t987 = t1003 * t1054 + t1051 * t1058;
t1047 = -g(1) + qJDD(2);
t1050 = sin(qJ(4));
t1053 = cos(qJ(4));
t983 = -pkin(3) * t1042 + pkin(7) * t1043 + t987;
t980 = t1047 * t1050 + t1053 * t983;
t1046 = t1053 ^ 2;
t1072 = t1042 * t1046;
t1071 = t1042 * t1053;
t1070 = t1044 * t1050;
t1069 = t1050 * t1043;
t1068 = t1053 * t1043;
t1045 = t1050 ^ 2;
t1067 = t1045 + t1046;
t1066 = 0.2e1 * t1044 * t1053;
t1065 = qJD(4) * t1070;
t986 = -t1003 * t1051 + t1054 * t1058;
t1025 = -qJDD(1) * t1048 - t1049 * t1057;
t1026 = qJDD(1) * t1049 - t1048 * t1057;
t1064 = t1025 * t1052 + t1026 * t1055;
t1063 = t1025 * t1055 - t1026 * t1052;
t982 = -pkin(3) * t1043 - t1042 * pkin(7) - t986;
t1061 = -t1065 + t1068;
t1056 = qJD(4) ^ 2;
t1038 = t1053 * t1047;
t1031 = t1050 * t1071;
t1030 = -t1056 - t1072;
t1029 = -t1042 * t1045 - t1056;
t1028 = qJDD(1) * t1055 - t1052 * t1057;
t1027 = -qJDD(1) * t1052 - t1055 * t1057;
t1024 = -qJDD(4) + t1031;
t1023 = qJDD(4) + t1031;
t1022 = qJD(4) * pkin(4) - qJ(5) * t1070;
t1020 = t1067 * t1042;
t1015 = t1067 * t1043;
t1012 = -0.2e1 * t1065 + t1068;
t1011 = qJD(4) * t1066 + t1069;
t1009 = t1024 * t1053 - t1029 * t1050;
t1008 = -t1023 * t1050 + t1030 * t1053;
t1007 = t1024 * t1050 + t1029 * t1053;
t1006 = t1023 * t1053 + t1030 * t1050;
t1002 = t1015 * t1054 - t1020 * t1051;
t1001 = t1015 * t1051 + t1020 * t1054;
t993 = t1009 * t1054 + t1011 * t1051;
t992 = t1008 * t1054 - t1012 * t1051;
t991 = t1009 * t1051 - t1011 * t1054;
t990 = t1008 * t1051 + t1012 * t1054;
t989 = -t1004 * t1048 + t1005 * t1049;
t988 = t1004 * t1049 + t1005 * t1048;
t985 = -t1001 * t1048 + t1002 * t1049;
t984 = t1001 * t1049 + t1002 * t1048;
t979 = -t1050 * t983 + t1038;
t978 = -t1048 * t991 + t1049 * t993;
t977 = -t1048 * t990 + t1049 * t992;
t976 = t1048 * t993 + t1049 * t991;
t975 = t1048 * t992 + t1049 * t990;
t974 = -pkin(4) * t1061 - qJ(5) * t1072 + t1022 * t1070 + qJDD(5) + t982;
t973 = -pkin(4) * t1072 + qJ(5) * t1061 - qJD(4) * t1022 + qJD(5) * t1066 + t980;
t972 = qJDD(4) * pkin(4) + t1038 + (pkin(4) * t1071 - qJ(5) * t1043 - 0.2e1 * qJD(5) * t1044 - t983) * t1050;
t971 = -t1051 * t986 + t1054 * t987;
t970 = t1051 * t987 + t1054 * t986;
t969 = t1052 * t984 - t1055 * t985;
t968 = t1052 * t985 + t1055 * t984;
t967 = -t1050 * t979 + t1053 * t980;
t966 = t1050 * t980 + t1053 * t979;
t965 = t1052 * t976 - t1055 * t978;
t964 = t1052 * t975 - t1055 * t977;
t963 = t1052 * t978 + t1055 * t976;
t962 = t1052 * t977 + t1055 * t975;
t961 = t1051 * t982 + t1054 * t967;
t960 = t1051 * t967 - t1054 * t982;
t959 = -t1050 * t972 + t1053 * t973;
t958 = t1050 * t973 + t1053 * t972;
t957 = -t1048 * t970 + t1049 * t971;
t956 = t1048 * t971 + t1049 * t970;
t955 = t1051 * t974 + t1054 * t959;
t954 = t1051 * t959 - t1054 * t974;
t953 = -t1048 * t960 + t1049 * t961;
t952 = t1048 * t961 + t1049 * t960;
t951 = -t1048 * t954 + t1049 * t955;
t950 = t1048 * t955 + t1049 * t954;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, t1006, t1007, 0, t966, 0, 0, 0, 0, 0, 0, t1006, t1007, 0, t958; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1028, t1027, 0, t1032 * t1052 + t1033 * t1055, 0, 0, 0, 0, 0, 0, t1064, t1063, 0, t1052 * t989 + t1055 * t988, 0, 0, 0, 0, 0, 0, t1078, t1079, 0, t1052 * t957 + t1055 * t956, 0, 0, 0, 0, 0, 0, t962, t963, t968, t1052 * t953 + t1055 * t952, 0, 0, 0, 0, 0, 0, t962, t963, t968, t1052 * t951 + t1055 * t950; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1027, t1028, 0, -t1032 * t1055 + t1033 * t1052, 0, 0, 0, 0, 0, 0, -t1063, t1064, 0, t1052 * t988 - t1055 * t989, 0, 0, 0, 0, 0, 0, -t1079, t1078, 0, t1052 * t956 - t1055 * t957, 0, 0, 0, 0, 0, 0, t964, t965, t969, t1052 * t952 - t1055 * t953, 0, 0, 0, 0, 0, 0, t964, t965, t969, t1052 * t950 - t1055 * t951; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1057, -qJDD(1), 0, t1032, 0, 0, 0, 0, 0, 0, t1025, -t1026, 0, t989, 0, 0, 0, 0, 0, 0, t1075, t999, 0, t957, 0, 0, 0, 0, 0, 0, t977, t978, t985, t953, 0, 0, 0, 0, 0, 0, t977, t978, t985, t951; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1057, 0, t1033, 0, 0, 0, 0, 0, 0, t1026, t1025, 0, t988, 0, 0, 0, 0, 0, 0, -t999, t1075, 0, t956, 0, 0, 0, 0, 0, 0, t975, t976, t984, t952, 0, 0, 0, 0, 0, 0, t975, t976, t984, t950; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, t1006, t1007, 0, t966, 0, 0, 0, 0, 0, 0, t1006, t1007, 0, t958; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1057, -qJDD(1), 0, t1005, 0, 0, 0, 0, 0, 0, t1062, t1018, 0, t971, 0, 0, 0, 0, 0, 0, t992, t993, t1002, t961, 0, 0, 0, 0, 0, 0, t992, t993, t1002, t955; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1057, 0, t1004, 0, 0, 0, 0, 0, 0, -t1018, t1062, 0, t970, 0, 0, 0, 0, 0, 0, t990, t991, t1001, t960, 0, 0, 0, 0, 0, 0, t990, t991, t1001, t954; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, t1006, t1007, 0, t966, 0, 0, 0, 0, 0, 0, t1006, t1007, 0, t958; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1042, -t1043, 0, t987, 0, 0, 0, 0, 0, 0, t1008, t1009, t1015, t967, 0, 0, 0, 0, 0, 0, t1008, t1009, t1015, t959; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1043, -t1042, 0, t986, 0, 0, 0, 0, 0, 0, t1012, -t1011, t1020, -t982, 0, 0, 0, 0, 0, 0, t1012, -t1011, t1020, -t974; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, t1006, t1007, 0, t966, 0, 0, 0, 0, 0, 0, t1006, t1007, 0, t958; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1030, t1024, t1068, t980, 0, 0, 0, 0, 0, 0, t1030, t1024, t1068, t973; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1023, t1029, -t1069, t979, 0, 0, 0, 0, 0, 0, t1023, t1029, -t1069, t972; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1012, t1011, -t1020, t982, 0, 0, 0, 0, 0, 0, -t1012, t1011, -t1020, t974; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1030, t1024, t1068, t973; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1023, t1029, -t1069, t972; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1012, t1011, -t1020, t974;];
f_new_reg = t1;
