% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRRP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:02
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRRP2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP2_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:02:06
% EndTime: 2019-12-05 18:02:08
% DurationCPUTime: 1.82s
% Computational Cost: add. (4424->136), mult. (6817->181), div. (0->0), fcn. (3888->8), ass. (0->106)
t1030 = sin(qJ(1));
t1033 = cos(qJ(1));
t1026 = sin(pkin(8));
t1027 = cos(pkin(8));
t1022 = qJD(1) + qJD(3);
t1020 = t1022 ^ 2;
t1021 = qJDD(1) + qJDD(3);
t1029 = sin(qJ(3));
t1032 = cos(qJ(3));
t1040 = -t1032 * t1020 - t1029 * t1021;
t997 = t1029 * t1020 - t1032 * t1021;
t1053 = t1026 * t997 + t1027 * t1040;
t978 = -t1026 * t1040 + t1027 * t997;
t1057 = t1030 * t978 + t1033 * t1053;
t1056 = -t1030 * t1053 + t1033 * t978;
t1011 = t1033 * g(2) + t1030 * g(3);
t1037 = qJDD(1) * pkin(1) + t1011;
t1010 = t1030 * g(2) - t1033 * g(3);
t1035 = qJD(1) ^ 2;
t1038 = -t1035 * pkin(1) + t1010;
t983 = -t1026 * t1038 + t1027 * t1037;
t1036 = qJDD(1) * pkin(2) + t983;
t984 = t1026 * t1037 + t1027 * t1038;
t982 = -t1035 * pkin(2) + t984;
t966 = t1029 * t1036 + t1032 * t982;
t1025 = -g(1) + qJDD(2);
t1028 = sin(qJ(4));
t1031 = cos(qJ(4));
t962 = -t1020 * pkin(3) + t1021 * pkin(7) + t966;
t959 = t1028 * t1025 + t1031 * t962;
t1050 = t1020 * t1031;
t1049 = t1022 * t1028;
t1024 = t1031 ^ 2;
t1048 = t1024 * t1020;
t1047 = t1028 * t1021;
t1046 = t1031 * t1021;
t1023 = t1028 ^ 2;
t1045 = t1023 + t1024;
t1044 = 0.2e1 * t1022 * t1031;
t1043 = qJD(4) * t1049;
t965 = -t1029 * t982 + t1032 * t1036;
t1003 = -t1026 * qJDD(1) - t1027 * t1035;
t1004 = t1027 * qJDD(1) - t1026 * t1035;
t1042 = t1033 * t1003 - t1030 * t1004;
t1041 = -t1030 * t1003 - t1033 * t1004;
t961 = -t1021 * pkin(3) - t1020 * pkin(7) - t965;
t1039 = -t1043 + t1046;
t1034 = qJD(4) ^ 2;
t1016 = t1031 * t1025;
t1009 = t1028 * t1050;
t1008 = -t1034 - t1048;
t1007 = -t1023 * t1020 - t1034;
t1006 = -t1033 * qJDD(1) + t1030 * t1035;
t1005 = t1030 * qJDD(1) + t1033 * t1035;
t1002 = -qJDD(4) + t1009;
t1001 = qJDD(4) + t1009;
t1000 = qJD(4) * pkin(4) - qJ(5) * t1049;
t999 = t1045 * t1020;
t994 = t1045 * t1021;
t991 = -0.2e1 * t1043 + t1046;
t990 = qJD(4) * t1044 + t1047;
t988 = t1031 * t1002 - t1028 * t1007;
t987 = -t1028 * t1001 + t1031 * t1008;
t986 = t1028 * t1002 + t1031 * t1007;
t985 = t1031 * t1001 + t1028 * t1008;
t981 = -t1029 * t999 + t1032 * t994;
t980 = t1029 * t994 + t1032 * t999;
t972 = t1029 * t990 + t1032 * t988;
t971 = -t1029 * t991 + t1032 * t987;
t970 = t1029 * t988 - t1032 * t990;
t969 = t1029 * t987 + t1032 * t991;
t968 = -t1026 * t983 + t1027 * t984;
t967 = t1026 * t984 + t1027 * t983;
t964 = -t1026 * t980 + t1027 * t981;
t963 = t1026 * t981 + t1027 * t980;
t958 = -t1028 * t962 + t1016;
t957 = -t1026 * t970 + t1027 * t972;
t956 = -t1026 * t969 + t1027 * t971;
t955 = t1026 * t972 + t1027 * t970;
t954 = t1026 * t971 + t1027 * t969;
t953 = -t1039 * pkin(4) - qJ(5) * t1048 + t1000 * t1049 + qJDD(5) + t961;
t952 = -pkin(4) * t1048 + t1039 * qJ(5) - qJD(4) * t1000 + qJD(5) * t1044 + t959;
t951 = qJDD(4) * pkin(4) + t1016 + (pkin(4) * t1050 - t1021 * qJ(5) - 0.2e1 * qJD(5) * t1022 - t962) * t1028;
t950 = -t1029 * t965 + t1032 * t966;
t949 = t1029 * t966 + t1032 * t965;
t948 = -t1030 * t963 + t1033 * t964;
t947 = -t1030 * t964 - t1033 * t963;
t946 = -t1028 * t958 + t1031 * t959;
t945 = t1028 * t959 + t1031 * t958;
t944 = -t1030 * t955 + t1033 * t957;
t943 = -t1030 * t954 + t1033 * t956;
t942 = -t1030 * t957 - t1033 * t955;
t941 = -t1030 * t956 - t1033 * t954;
t940 = t1029 * t961 + t1032 * t946;
t939 = t1029 * t946 - t1032 * t961;
t938 = -t1028 * t951 + t1031 * t952;
t937 = t1028 * t952 + t1031 * t951;
t936 = -t1026 * t949 + t1027 * t950;
t935 = t1026 * t950 + t1027 * t949;
t934 = t1029 * t953 + t1032 * t938;
t933 = t1029 * t938 - t1032 * t953;
t932 = -t1026 * t939 + t1027 * t940;
t931 = t1026 * t940 + t1027 * t939;
t930 = -t1026 * t933 + t1027 * t934;
t929 = t1026 * t934 + t1027 * t933;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1025, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1025, 0, 0, 0, 0, 0, 0, t985, t986, 0, t945, 0, 0, 0, 0, 0, 0, t985, t986, 0, t937; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1006, t1005, 0, -t1030 * t1010 - t1033 * t1011, 0, 0, 0, 0, 0, 0, t1041, -t1042, 0, -t1030 * t968 - t1033 * t967, 0, 0, 0, 0, 0, 0, t1056, -t1057, 0, -t1030 * t936 - t1033 * t935, 0, 0, 0, 0, 0, 0, t941, t942, t947, -t1030 * t932 - t1033 * t931, 0, 0, 0, 0, 0, 0, t941, t942, t947, -t1030 * t930 - t1033 * t929; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1005, t1006, 0, t1033 * t1010 - t1030 * t1011, 0, 0, 0, 0, 0, 0, t1042, t1041, 0, -t1030 * t967 + t1033 * t968, 0, 0, 0, 0, 0, 0, t1057, t1056, 0, -t1030 * t935 + t1033 * t936, 0, 0, 0, 0, 0, 0, t943, t944, t948, -t1030 * t931 + t1033 * t932, 0, 0, 0, 0, 0, 0, t943, t944, t948, -t1030 * t929 + t1033 * t930; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1035, -qJDD(1), 0, t1010, 0, 0, 0, 0, 0, 0, t1003, -t1004, 0, t968, 0, 0, 0, 0, 0, 0, t1053, t978, 0, t936, 0, 0, 0, 0, 0, 0, t956, t957, t964, t932, 0, 0, 0, 0, 0, 0, t956, t957, t964, t930; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1035, 0, t1011, 0, 0, 0, 0, 0, 0, t1004, t1003, 0, t967, 0, 0, 0, 0, 0, 0, -t978, t1053, 0, t935, 0, 0, 0, 0, 0, 0, t954, t955, t963, t931, 0, 0, 0, 0, 0, 0, t954, t955, t963, t929; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1025, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1025, 0, 0, 0, 0, 0, 0, t985, t986, 0, t945, 0, 0, 0, 0, 0, 0, t985, t986, 0, t937; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1035, -qJDD(1), 0, t984, 0, 0, 0, 0, 0, 0, t1040, t997, 0, t950, 0, 0, 0, 0, 0, 0, t971, t972, t981, t940, 0, 0, 0, 0, 0, 0, t971, t972, t981, t934; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1035, 0, t983, 0, 0, 0, 0, 0, 0, -t997, t1040, 0, t949, 0, 0, 0, 0, 0, 0, t969, t970, t980, t939, 0, 0, 0, 0, 0, 0, t969, t970, t980, t933; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1025, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1025, 0, 0, 0, 0, 0, 0, t985, t986, 0, t945, 0, 0, 0, 0, 0, 0, t985, t986, 0, t937; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1020, -t1021, 0, t966, 0, 0, 0, 0, 0, 0, t987, t988, t994, t946, 0, 0, 0, 0, 0, 0, t987, t988, t994, t938; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1021, -t1020, 0, t965, 0, 0, 0, 0, 0, 0, t991, -t990, t999, -t961, 0, 0, 0, 0, 0, 0, t991, -t990, t999, -t953; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1025, 0, 0, 0, 0, 0, 0, t985, t986, 0, t945, 0, 0, 0, 0, 0, 0, t985, t986, 0, t937; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1008, t1002, t1046, t959, 0, 0, 0, 0, 0, 0, t1008, t1002, t1046, t952; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1001, t1007, -t1047, t958, 0, 0, 0, 0, 0, 0, t1001, t1007, -t1047, t951; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t991, t990, -t999, t961, 0, 0, 0, 0, 0, 0, -t991, t990, -t999, t953; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1008, t1002, t1046, t952; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1001, t1007, -t1047, t951; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t991, t990, -t999, t953;];
f_new_reg = t1;
