% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRRP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:02
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRRP2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP2_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP2_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP2_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP2_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:01:57
% EndTime: 2019-12-05 18:02:06
% DurationCPUTime: 9.02s
% Computational Cost: add. (27120->429), mult. (41233->528), div. (0->0), fcn. (22674->8), ass. (0->317)
t804 = qJD(1) + qJD(3);
t802 = t804 ^ 2;
t815 = cos(qJ(3));
t803 = qJDD(1) + qJDD(3);
t812 = sin(qJ(3));
t876 = t812 * t803;
t762 = t815 * t802 + t876;
t871 = t815 * t803;
t765 = t812 * t802 - t871;
t809 = sin(pkin(8));
t810 = cos(pkin(8));
t705 = t810 * t762 - t809 * t765;
t807 = g(1) - qJDD(2);
t740 = pkin(6) * t762 - t815 * t807;
t912 = pkin(6) * t765 - t812 * t807;
t652 = qJ(2) * t705 + t810 * t740 - t809 * t912;
t709 = t809 * t762 + t810 * t765;
t813 = sin(qJ(1));
t816 = cos(qJ(1));
t665 = t813 * t705 + t816 * t709;
t918 = qJ(2) * t709 + t809 * t740 + t810 * t912;
t928 = pkin(5) * t665 + t813 * t652 + t816 * t918;
t919 = t816 * t705 - t813 * t709;
t927 = pkin(5) * t919 + t816 * t652 - t813 * t918;
t784 = t816 * g(2) + t813 * g(3);
t825 = qJDD(1) * pkin(1) + t784;
t783 = t813 * g(2) - t816 * g(3);
t818 = qJD(1) ^ 2;
t829 = t818 * pkin(1) - t783;
t717 = t809 * t825 - t810 * t829;
t714 = -t818 * pkin(2) + t717;
t821 = t809 * t829 + t810 * t825;
t820 = qJDD(1) * pkin(2) + t821;
t671 = t812 * t714 - t815 * t820;
t672 = t815 * t714 + t812 * t820;
t850 = t812 * t671 + t815 * t672;
t613 = t815 * t671 - t812 * t672;
t881 = t810 * t613;
t564 = -t809 * t850 + t881;
t882 = t809 * t613;
t913 = t810 * t850 + t882;
t925 = t813 * t564 + t816 * t913;
t924 = t816 * t564 - t813 * t913;
t849 = t810 * t717 - t809 * t821;
t676 = -t809 * t717 - t810 * t821;
t869 = t816 * t676;
t915 = -t813 * t849 + t869;
t874 = t813 * t676;
t914 = t816 * t849 + t874;
t811 = sin(qJ(4));
t814 = cos(qJ(4));
t782 = t814 * t802 * t811;
t770 = qJDD(4) + t782;
t897 = pkin(4) * t770;
t772 = t809 * qJDD(1) + t810 * t818;
t773 = t810 * qJDD(1) - t809 * t818;
t723 = t813 * t772 - t816 * t773;
t744 = qJ(2) * t772 - t810 * t807;
t833 = -qJ(2) * t773 - t809 * t807;
t911 = pkin(5) * t723 + t813 * t744 + t816 * t833;
t832 = t816 * t772 + t813 * t773;
t910 = pkin(5) * t832 + t816 * t744 - t813 * t833;
t797 = t814 * t807;
t662 = -t802 * pkin(3) + t803 * pkin(7) + t672;
t879 = t811 * t662;
t643 = t797 + t879;
t644 = t814 * t662 - t811 * t807;
t592 = t811 * t643 + t814 * t644;
t901 = pkin(1) * t807;
t761 = t814 * t770;
t806 = t814 ^ 2;
t795 = t806 * t802;
t817 = qJD(4) ^ 2;
t780 = -t795 - t817;
t726 = t811 * t780 + t761;
t900 = pkin(3) * t726;
t805 = t811 ^ 2;
t883 = t805 * t802;
t778 = -t817 - t883;
t771 = qJDD(4) - t782;
t877 = t811 * t771;
t728 = t814 * t778 - t877;
t899 = pkin(3) * t728;
t863 = qJD(4) * t804;
t790 = t814 * t863;
t793 = t811 * t803;
t756 = t793 + t790;
t826 = t797 + (t756 - t790) * qJ(5) - t897;
t862 = (qJD(5) * t804);
t847 = t662 + (2 * t862);
t618 = t811 * t847 + t826;
t898 = pkin(4) * t618;
t878 = t811 * t770;
t730 = t814 * t780 - t878;
t789 = t811 * t863;
t794 = t814 * t803;
t758 = t794 - 0.2e1 * t789;
t686 = t812 * t730 + t815 * t758;
t688 = t815 * t730 - t812 * t758;
t637 = t810 * t686 + t809 * t688;
t639 = -t809 * t686 + t810 * t688;
t896 = pkin(5) * (-t813 * t637 + t816 * t639);
t872 = t814 * t771;
t732 = -t811 * t778 - t872;
t755 = t793 + 0.2e1 * t790;
t687 = t812 * t732 - t815 * t755;
t689 = t815 * t732 + t812 * t755;
t638 = t810 * t687 + t809 * t689;
t640 = -t809 * t687 + t810 * t689;
t895 = pkin(5) * (-t813 * t638 + t816 * t640);
t864 = t805 + t806;
t760 = t864 * t803;
t766 = t795 + t883;
t711 = t812 * t760 + t815 * t766;
t712 = t815 * t760 - t812 * t766;
t667 = t810 * t711 + t809 * t712;
t668 = -t809 * t711 + t810 * t712;
t894 = pkin(5) * (-t813 * t667 + t816 * t668);
t892 = pkin(6) * t686;
t891 = pkin(6) * t687;
t890 = pkin(6) * t711;
t889 = pkin(7) * t726;
t888 = pkin(7) * t728;
t887 = qJ(2) * t637;
t886 = qJ(2) * t638;
t885 = qJ(2) * t667;
t884 = t804 * t811;
t880 = t811 * t618;
t661 = -t803 * pkin(3) - t802 * pkin(7) + t671;
t657 = t811 * t661;
t873 = t814 * t618;
t658 = t814 * t661;
t868 = -pkin(3) * t661 + pkin(7) * t592;
t867 = pkin(3) * t758 + pkin(7) * t730;
t866 = -pkin(3) * t755 + pkin(7) * t732;
t865 = pkin(3) * t766 + pkin(7) * t760;
t861 = pkin(4) * t793;
t860 = t811 * t876;
t859 = t811 * t871;
t858 = t657 + t866;
t857 = -t658 + t867;
t575 = t812 * t592 - t815 * t661;
t856 = pkin(2) * t575 + t868;
t855 = t814 * t862;
t854 = -pkin(1) * t726 + qJ(2) * t639;
t853 = -pkin(1) * t728 + qJ(2) * t640;
t852 = -pkin(2) * t726 + pkin(6) * t688;
t851 = -pkin(2) * t728 + pkin(6) * t689;
t846 = t812 * t782;
t845 = t815 * t782;
t787 = 0.2e1 * t855;
t757 = t794 - t789;
t769 = qJD(4) * pkin(4) - qJ(5) * t884;
t834 = pkin(4) * t795 - t757 * qJ(5) + qJD(4) * t769 - t644;
t619 = t787 - t834;
t605 = pkin(4) * t766 + qJ(5) * t794 + t619;
t616 = (qJ(5) * t803 + t847) * t811 + t826;
t844 = t814 * t605 + t811 * t616 + t865;
t622 = -t757 * pkin(4) - qJ(5) * t795 + t769 * t884 + qJDD(5) + t661;
t620 = -qJ(5) * t778 + t622;
t718 = -pkin(4) * t755 - qJ(5) * t771;
t843 = t811 * t620 + t814 * t718 + t866;
t842 = t865 + t592;
t685 = pkin(2) * t687;
t841 = t685 + t858;
t684 = pkin(2) * t686;
t840 = t684 + t857;
t774 = t813 * qJDD(1) + t816 * t818;
t839 = pkin(5) * t774 - t816 * g(1);
t838 = -pkin(2) * t765 - t671;
t704 = pkin(2) * t711;
t837 = t704 + t844;
t836 = t685 + t843;
t835 = t704 + t842;
t591 = t814 * t643 - t811 * t644;
t831 = t816 * t783 - t813 * t784;
t830 = -t813 * t783 - t816 * t784;
t574 = t814 * t619 + t880;
t578 = -pkin(4) * t622 + qJ(5) * t619;
t828 = -pkin(3) * t622 + pkin(7) * t574 + qJ(5) * t880 + t814 * t578;
t610 = pkin(4) * t758 + qJ(5) * t780 - t622;
t827 = -qJ(5) * t878 + t814 * t610 + t867;
t824 = pkin(4) * t778 + t834;
t553 = t812 * t574 - t815 * t622;
t823 = pkin(2) * t553 + t828;
t822 = t684 + t827;
t819 = -pkin(2) * t762 - t672;
t779 = t795 - t817;
t777 = t817 - t883;
t775 = -t816 * qJDD(1) + t813 * t818;
t767 = -t795 + t883;
t751 = -pkin(5) * t775 + t813 * g(1);
t750 = t864 * t863;
t736 = t812 * qJDD(4) + t815 * t750;
t735 = -t815 * qJDD(4) + t812 * t750;
t734 = t814 * t756 - t805 * t863;
t733 = -t811 * t757 - t806 * t863;
t731 = -t811 * t777 + t761;
t729 = t814 * t779 - t877;
t727 = t814 * t777 + t878;
t725 = t811 * t779 + t872;
t720 = (t756 + t790) * t811;
t719 = (t757 - t789) * t814;
t703 = pkin(6) * t712;
t701 = -t811 * t755 + t814 * t758;
t700 = t814 * t755 + t811 * t758;
t699 = t815 * t731 + t860;
t698 = t815 * t729 + t812 * t794;
t697 = t812 * t731 - t859;
t696 = t812 * t729 - t814 * t871;
t695 = t815 * t734 - t846;
t694 = t815 * t733 + t846;
t693 = t812 * t734 + t845;
t692 = t812 * t733 - t845;
t691 = pkin(1) * t773 + t821;
t690 = -pkin(1) * t772 - t717;
t681 = -t809 * t735 + t810 * t736;
t680 = t810 * t735 + t809 * t736;
t679 = t815 * t701 + t812 * t767;
t678 = t812 * t701 - t815 * t767;
t673 = pkin(1) * t676;
t670 = qJ(2) * t849 + t901;
t664 = pkin(1) * t667;
t663 = qJ(2) * t668;
t656 = -t809 * t697 + t810 * t699;
t655 = -t809 * t696 + t810 * t698;
t654 = t810 * t697 + t809 * t699;
t653 = t810 * t696 + t809 * t698;
t648 = -t809 * t693 + t810 * t695;
t647 = -t809 * t692 + t810 * t694;
t646 = t810 * t693 + t809 * t695;
t645 = t810 * t692 + t809 * t694;
t636 = pkin(1) * t638;
t635 = pkin(1) * t637;
t632 = t658 - t888;
t631 = t657 - t889;
t630 = -t813 * t680 + t816 * t681;
t629 = -t816 * t680 - t813 * t681;
t628 = t644 - t899;
t627 = t643 - t900;
t626 = -t809 * t678 + t810 * t679;
t625 = t810 * t678 + t809 * t679;
t624 = -pkin(1) * t709 + t838;
t623 = -pkin(1) * t705 + t819;
t609 = pkin(2) * t613;
t606 = pkin(2) * t807 + pkin(6) * t850;
t604 = pkin(5) * (-t816 * t667 - t813 * t668);
t602 = t787 - t824 - t899;
t601 = t618 - t897 - t900;
t600 = -t813 * t654 + t816 * t656;
t599 = -t813 * t653 + t816 * t655;
t598 = -t816 * t654 - t813 * t656;
t597 = -t816 * t653 - t813 * t655;
t596 = -t813 * t646 + t816 * t648;
t595 = -t813 * t645 + t816 * t647;
t594 = -t816 * t646 - t813 * t648;
t593 = -t816 * t645 - t813 * t647;
t588 = -qJ(5) * t761 - t811 * t610 - t889;
t587 = t814 * t620 - t811 * t718 - t888;
t584 = pkin(5) * (-t816 * t638 - t813 * t640);
t583 = pkin(5) * (-t816 * t637 - t813 * t639);
t582 = t815 * t591 - t890;
t581 = t812 * t591 + t703;
t580 = -t813 * t625 + t816 * t626;
t579 = -t816 * t625 - t813 * t626;
t576 = t815 * t592 + t812 * t661;
t573 = t811 * t619 - t873;
t570 = t636 + t841;
t569 = t635 + t840;
t568 = -t812 * t628 + t815 * t632 - t891;
t567 = -t812 * t627 + t815 * t631 - t892;
t566 = -t811 * t605 + t814 * t616;
t561 = t815 * t628 + t812 * t632 + t851;
t560 = t815 * t627 + t812 * t631 + t852;
t559 = t664 + t835;
t558 = -pkin(4) * t860 + t815 * t566 - t890;
t557 = pkin(4) * t859 + t812 * t566 + t703;
t556 = t635 + t822;
t555 = t636 + t836;
t554 = t815 * t574 + t812 * t622;
t551 = -pkin(3) * t573 + t898;
t550 = t815 * t587 - t812 * t602 - t891;
t549 = t815 * t588 - t812 * t601 - t892;
t548 = t664 + t837;
t547 = t812 * t587 + t815 * t602 + t851;
t546 = t812 * t588 + t815 * t601 + t852;
t545 = -pkin(1) * t564 - t609;
t544 = -t809 * t581 + t810 * t582 - t885;
t543 = t810 * t581 + t809 * t582 + t663;
t542 = -t809 * t575 + t810 * t576;
t541 = t810 * t575 + t809 * t576;
t540 = pkin(6) * t881 + qJ(2) * t564 - t809 * t606;
t539 = pkin(6) * t882 + qJ(2) * t913 + t810 * t606 + t901;
t538 = -pkin(6) * t575 - (pkin(3) * t812 - pkin(7) * t815) * t591;
t537 = -pkin(7) * t573 + qJ(5) * t873 - t811 * t578;
t536 = -t809 * t561 + t810 * t568 - t886;
t535 = -t809 * t560 + t810 * t567 - t887;
t534 = t810 * t561 + t809 * t568 + t853;
t533 = t810 * t560 + t809 * t567 + t854;
t532 = -t809 * t557 + t810 * t558 - t885;
t531 = t810 * t557 + t809 * t558 + t663;
t530 = -t809 * t553 + t810 * t554;
t529 = t810 * t553 + t809 * t554;
t528 = pkin(6) * t576 - (-pkin(3) * t815 - pkin(7) * t812 - pkin(2)) * t591;
t527 = -t809 * t547 + t810 * t550 - t886;
t526 = -t809 * t546 + t810 * t549 - t887;
t525 = t810 * t547 + t809 * t550 + t853;
t524 = t810 * t546 + t809 * t549 + t854;
t523 = pkin(1) * t541 + t856;
t522 = -pkin(6) * t553 + t815 * t537 - t812 * t551;
t521 = -pkin(2) * t573 + pkin(6) * t554 + t812 * t537 + t815 * t551;
t520 = pkin(1) * t529 + t823;
t519 = -qJ(2) * t541 - t809 * t528 + t810 * t538;
t518 = pkin(1) * t591 + qJ(2) * t542 + t810 * t528 + t809 * t538;
t517 = -qJ(2) * t529 - t809 * t521 + t810 * t522;
t516 = -pkin(1) * t573 + qJ(2) * t530 + t810 * t521 + t809 * t522;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t784, -t783, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t691, t690, 0, -t673, 0, 0, 0, 0, 0, t803, t624, t623, 0, t545, t720, t700, t727, t719, t725, 0, t569, t570, t559, t523, t720, t700, t727, t719, t725, 0, t556, t555, t548, t520; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t774, 0, t775, 0, t839, t751, -t831, -pkin(5) * t831, 0, 0, -t832, 0, t723, 0, t910, -t911, -t914, -pkin(5) * t914 - qJ(2) * t874 - t816 * t670, 0, 0, -t919, 0, t665, 0, t927, -t928, -t925, -pkin(5) * t925 - t816 * t539 - t813 * t540, t594, t579, t598, t593, t597, t629, -t816 * t533 - t813 * t535 - t896, -t816 * t534 - t813 * t536 - t895, -t816 * t543 - t813 * t544 - t894, -t813 * t519 - t816 * t518 - pkin(5) * (-t813 * t541 + t816 * t542), t594, t579, t598, t593, t597, t629, -t816 * t524 - t813 * t526 - t896, -t816 * t525 - t813 * t527 - t895, -t816 * t531 - t813 * t532 - t894, -t813 * t517 - t816 * t516 - pkin(5) * (-t813 * t529 + t816 * t530); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t775, 0, -t774, 0, -t751, t839, t830, pkin(5) * t830, 0, 0, -t723, 0, -t832, 0, t911, t910, t915, pkin(5) * t915 + qJ(2) * t869 - t813 * t670, 0, 0, -t665, 0, -t919, 0, t928, t927, t924, pkin(5) * t924 - t813 * t539 + t816 * t540, t596, t580, t600, t595, t599, t630, -t813 * t533 + t816 * t535 + t583, -t813 * t534 + t816 * t536 + t584, -t813 * t543 + t816 * t544 + t604, t816 * t519 - t813 * t518 + pkin(5) * (-t816 * t541 - t813 * t542), t596, t580, t600, t595, t599, t630, -t813 * t524 + t816 * t526 + t583, -t813 * t525 + t816 * t527 + t584, -t813 * t531 + t816 * t532 + t604, t816 * t517 - t813 * t516 + pkin(5) * (-t816 * t529 - t813 * t530); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t818, 0, 0, -g(1), -t784, 0, 0, 0, t773, 0, -t772, 0, t833, t744, t676, qJ(2) * t676, 0, 0, -t709, 0, -t705, 0, t918, t652, t564, t540, t648, t626, t656, t647, t655, t681, t535, t536, t544, t519, t648, t626, t656, t647, t655, t681, t526, t527, t532, t517; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t818, 0, qJDD(1), 0, g(1), 0, t783, 0, 0, 0, t772, 0, t773, 0, -t744, t833, t849, t670, 0, 0, t705, 0, -t709, 0, -t652, t918, t913, t539, t646, t625, t654, t645, t653, t680, t533, t534, t543, t518, t646, t625, t654, t645, t653, t680, t524, t525, t531, t516; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t784, -t783, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t691, t690, 0, -t673, 0, 0, 0, 0, 0, t803, t624, t623, 0, t545, t720, t700, t727, t719, t725, 0, t569, t570, t559, t523, t720, t700, t727, t719, t725, 0, t556, t555, t548, t520; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t818, 0, 0, -t807, -t821, 0, 0, 0, -t765, 0, -t762, 0, t912, t740, t613, pkin(6) * t613, t695, t679, t699, t694, t698, t736, t567, t568, t582, t538, t695, t679, t699, t694, t698, t736, t549, t550, t558, t522; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t818, 0, qJDD(1), 0, t807, 0, t717, 0, 0, 0, t762, 0, -t765, 0, -t740, t912, t850, t606, t693, t678, t697, t692, t696, t735, t560, t561, t581, t528, t693, t678, t697, t692, t696, t735, t546, t547, t557, t521; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t821, -t717, 0, 0, 0, 0, 0, 0, 0, t803, t838, t819, 0, -t609, t720, t700, t727, t719, t725, 0, t840, t841, t835, t856, t720, t700, t727, t719, t725, 0, t822, t836, t837, t823; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t803, 0, -t802, 0, 0, -t807, t671, 0, t734, t701, t731, t733, t729, t750, t631, t632, t591, pkin(7) * t591, t734, t701, t731, t733, t729, t750, t588, t587, t566, t537; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t802, 0, t803, 0, t807, 0, t672, 0, t782, -t767, -t793, -t782, -t794, -qJDD(4), t627, t628, 0, pkin(3) * t591, t782, -t767, -t793, -t782, -t794, -qJDD(4), t601, t602, t861, t551; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t803, -t671, -t672, 0, 0, t720, t700, t727, t719, t725, 0, t857, t858, t842, t868, t720, t700, t727, t719, t725, 0, t827, t843, t844, t828; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t756, t758, t770, -t790, t779, t790, 0, t661, t643, 0, t756, t758, t770, -t790, t779, t790, -qJ(5) * t770, t620, t616, qJ(5) * t618; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t789, t755, t777, t757, t771, -t789, -t661, 0, t644, 0, t789, t755, t777, t757, t771, -t789, t610, t718, t605, t578; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t782, t767, t793, t782, t794, qJDD(4), -t643, -t644, 0, 0, -t782, t767, t793, t782, t794, qJDD(4), -0.2e1 * t811 * t862 - t826 - t879 + t897, t824 - 0.2e1 * t855, -t861, -t898; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t756, t758, t770, -t790, t779, t790, 0, t622, t618, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t789, t755, t777, t757, t771, -t789, -t622, 0, t619, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t782, t767, t793, t782, t794, qJDD(4), -t618, -t619, 0, 0;];
m_new_reg = t1;
