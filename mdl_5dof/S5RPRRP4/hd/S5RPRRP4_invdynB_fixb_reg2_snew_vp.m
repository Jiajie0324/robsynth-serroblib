% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRRP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:07
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRRP4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP4_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP4_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP4_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP4_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:07:05
% EndTime: 2019-12-05 18:07:19
% DurationCPUTime: 11.27s
% Computational Cost: add. (29115->516), mult. (71637->741), div. (0->0), fcn. (49311->8), ass. (0->390)
t684 = 2 * qJD(2);
t583 = sin(qJ(1));
t586 = cos(qJ(1));
t558 = t583 * g(2) - t586 * g(3);
t587 = qJD(1) ^ 2;
t543 = -t587 * pkin(1) + qJDD(1) * qJ(2) + t558;
t690 = (qJD(1) * t684) + t543;
t581 = sin(qJ(4));
t582 = sin(qJ(3));
t584 = cos(qJ(4));
t585 = cos(qJ(3));
t579 = sin(pkin(8));
t633 = qJD(1) * t579;
t526 = (-t581 * t585 - t582 * t584) * t633;
t616 = t582 * t633;
t535 = t585 * t579 * qJDD(1) - qJD(3) * t616;
t627 = qJDD(1) * t582;
t632 = qJD(1) * t585;
t596 = qJD(3) * t632 + t627;
t591 = t596 * t579;
t468 = t526 * qJD(4) + t584 * t535 - t581 * t591;
t580 = cos(pkin(8));
t630 = t580 * qJD(1);
t568 = -qJD(3) + t630;
t561 = -qJD(4) + t568;
t663 = t526 * t561;
t691 = t468 - t663;
t626 = t580 * qJDD(1);
t567 = -qJDD(3) + t626;
t557 = -qJDD(4) + t567;
t615 = t579 * t632;
t528 = -t581 * t616 + t584 * t615;
t661 = t528 * t526;
t592 = -t557 + t661;
t689 = t592 * pkin(4);
t652 = t581 * t592;
t643 = t584 * t592;
t607 = t568 * t616;
t500 = t535 + t607;
t490 = t585 * t500;
t525 = t528 ^ 2;
t556 = t561 ^ 2;
t488 = -t525 - t556;
t473 = t557 + t661;
t653 = t581 * t473;
t429 = t584 * t488 + t653;
t644 = t584 * t473;
t430 = -t581 * t488 + t644;
t386 = t585 * t429 + t582 * t430;
t688 = -pkin(2) * t386 - pkin(3) * t429;
t524 = t526 ^ 2;
t472 = -t556 - t524;
t420 = t581 * t472 + t643;
t421 = t584 * t472 - t652;
t376 = t585 * t420 + t582 * t421;
t687 = -pkin(2) * t376 - pkin(3) * t420;
t610 = t581 * t535 + t584 * t591;
t432 = (qJD(4) + t561) * t528 + t610;
t467 = -t528 * qJD(4) - t610;
t494 = -t561 * pkin(4) - t528 * qJ(5);
t686 = -t467 * pkin(4) - t524 * qJ(5) + t528 * t494 + qJDD(5);
t565 = t568 ^ 2;
t685 = t582 ^ 2;
t681 = pkin(2) * t579;
t680 = pkin(2) * t580;
t436 = -t663 - t468;
t391 = -t432 * t581 + t584 * t436;
t393 = -t432 * t584 - t581 * t436;
t344 = -t582 * t391 + t585 * t393;
t469 = -t524 - t525;
t331 = t580 * t344 + t579 * t469;
t342 = t585 * t391 + t582 * t393;
t291 = t586 * t331 + t583 * t342;
t677 = pkin(5) * t291;
t377 = -t582 * t420 + t585 * t421;
t431 = (qJD(4) - t561) * t528 + t610;
t349 = t580 * t377 + t579 * t431;
t315 = t586 * t349 + t583 * t376;
t676 = pkin(5) * t315;
t388 = -t582 * t429 + t585 * t430;
t355 = t580 * t388 + t579 * t691;
t320 = t586 * t355 + t583 * t386;
t675 = pkin(5) * t320;
t674 = pkin(6) * t342;
t673 = pkin(6) * t376;
t672 = pkin(6) * t386;
t671 = pkin(7) * t391;
t670 = pkin(7) * t420;
t669 = pkin(7) * t429;
t668 = t580 * g(1);
t330 = t579 * t344 - t580 * t469;
t667 = qJ(2) * t330;
t348 = t579 * t377 - t580 * t431;
t666 = qJ(2) * t348;
t354 = t579 * t388 - t580 * t691;
t665 = qJ(2) * t354;
t664 = qJDD(1) * pkin(1);
t660 = t561 * t581;
t659 = t561 * t584;
t658 = t567 * t579;
t576 = t579 ^ 2;
t657 = t576 * t587;
t656 = t579 * t580;
t505 = -t579 * g(1) + t690 * t580;
t605 = -pkin(6) * t579 - t680;
t547 = t605 * qJD(1);
t478 = t547 * t630 + t505;
t559 = t586 * g(2) + t583 * g(3);
t590 = -t587 * qJ(2) + qJDD(2) - t559;
t602 = -pkin(1) + t605;
t509 = qJDD(1) * t602 + t590;
t496 = t585 * t509;
t617 = t568 * t633;
t638 = t585 * t587;
t413 = -t567 * pkin(3) - t535 * pkin(7) + t496 + (-pkin(3) * t576 * t638 + pkin(7) * t617 - t478) * t582;
t450 = t585 * t478 + t582 * t509;
t532 = -t568 * pkin(3) - pkin(7) * t615;
t566 = t685 * t657;
t414 = -pkin(3) * t566 - pkin(7) * t591 + t568 * t532 + t450;
t365 = -t584 * t413 + t581 * t414;
t618 = t468 * qJ(5) + t365;
t598 = -qJ(5) * t663 - t618;
t631 = qJD(5) * t528;
t333 = t598 - 0.2e1 * t631 + t689;
t655 = t581 * t333;
t606 = pkin(3) * t591 - pkin(7) * t566 + t668;
t609 = -t532 * t585 - t547;
t427 = (t543 + (t684 - t609) * qJD(1)) * t579 + t606;
t654 = t581 * t427;
t366 = t581 * t413 + t584 * t414;
t310 = -t584 * t365 + t581 * t366;
t651 = t582 * t310;
t477 = t668 + (t543 + (t684 + t547) * qJD(1)) * t579;
t650 = t582 * t477;
t619 = t582 * t638;
t555 = t576 * t619;
t533 = -t555 + t567;
t649 = t582 * t533;
t534 = -t555 - t567;
t648 = t582 * t534;
t536 = -t590 + t664;
t647 = t583 * t536;
t646 = t584 * t333;
t645 = t584 * t427;
t642 = t585 * t310;
t641 = t585 * t477;
t640 = t585 * t533;
t639 = t585 * t534;
t637 = t586 * t536;
t636 = -pkin(1) * t342 + qJ(2) * t331;
t635 = -pkin(1) * t376 + qJ(2) * t349;
t634 = -pkin(1) * t386 + qJ(2) * t355;
t625 = t583 * qJDD(1);
t624 = t586 * qJDD(1);
t578 = t585 ^ 2;
t622 = t578 * t657;
t621 = t579 * t661;
t620 = t580 * t661;
t614 = -pkin(3) * t469 + pkin(7) * t393;
t613 = -pkin(3) * t431 + pkin(7) * t421;
t612 = -pkin(3) * t691 + pkin(7) * t430;
t611 = t536 + t664;
t311 = t581 * t365 + t584 * t366;
t449 = t582 * t478 - t496;
t504 = t690 * t579 + t668;
t461 = t579 * t504 + t580 * t505;
t575 = t579 * t576;
t608 = t575 * t619;
t306 = -pkin(2) * t342 - pkin(3) * t391;
t552 = t586 * t587 + t625;
t604 = pkin(5) * t552 - t586 * g(1);
t603 = t580 * t555;
t398 = -t585 * t449 + t582 * t450;
t399 = t582 * t449 + t585 * t450;
t460 = t580 * t504 - t579 * t505;
t517 = t586 * t558 - t583 * t559;
t516 = -t583 * t558 - t586 * t559;
t601 = -t583 * t587 + t624;
t577 = t580 ^ 2;
t546 = (t576 + t577) * t580 * t587;
t600 = -t583 * t546 + t580 * t624;
t599 = t586 * t546 + t580 * t625;
t597 = t467 * qJ(5) + 0.2e1 * qJD(5) * t526 + t561 * t494 + t366;
t595 = -pkin(1) * t330 + pkin(2) * t469 - pkin(6) * t344;
t594 = -pkin(1) * t348 + pkin(2) * t431 - pkin(6) * t377;
t593 = -pkin(1) * t354 + pkin(2) * t691 - pkin(6) * t388;
t372 = t427 + t686;
t574 = t577 * t587;
t573 = t577 * qJDD(1);
t572 = t576 * qJDD(1);
t551 = t574 - t657;
t550 = t574 + t657;
t549 = t573 - t572;
t548 = t573 + t572;
t545 = (t577 * t579 + t575) * t587;
t544 = t568 * t615;
t542 = t566 - t622;
t541 = t566 + t622;
t540 = t565 - t622;
t539 = -t566 - t565;
t538 = t566 - t565;
t537 = pkin(5) * t601 + t583 * g(1);
t523 = t601 * t656;
t522 = t552 * t656;
t520 = -t622 - t565;
t519 = 0.2e1 * t631;
t514 = t586 * t545 + t579 * t625;
t512 = -t583 * t545 + t579 * t624;
t511 = t586 * t548 - t583 * t550;
t510 = -t583 * t548 - t586 * t550;
t508 = (-t578 - t685) * t617;
t503 = -t525 + t556;
t502 = t524 - t556;
t499 = t544 - t591;
t498 = t544 + t591;
t497 = t607 - t535;
t492 = -t582 * t535 + t578 * t617;
t491 = (t685 * t568 * qJD(1) + t585 * t596) * t579;
t489 = (t627 + (qJD(3) - t568) * t632) * t582 * t579;
t487 = t585 * t539 - t648;
t486 = t585 * t538 + t649;
t485 = -t582 * t540 + t639;
t484 = t582 * t539 + t639;
t483 = -t582 * t538 + t640;
t482 = -t585 * t540 - t648;
t481 = -t525 + t524;
t480 = -t582 * t520 + t640;
t479 = t585 * t520 + t649;
t471 = t580 * t490 + t608;
t470 = t580 * t489 - t608;
t466 = (-t526 * t584 - t528 * t581) * t561;
t465 = (-t526 * t581 + t528 * t584) * t561;
t458 = t585 * t499 - t582 * t500;
t457 = -t582 * t497 - t585 * t498;
t456 = -t582 * t499 - t490;
t455 = t585 * t497 - t582 * t498;
t454 = t580 * t487 - t579 * t499;
t453 = t580 * t486 - t579 * t498;
t452 = t580 * t485 - t579 * t497;
t451 = t579 * t487 + t580 * t499;
t448 = t580 * t480 + t500 * t579;
t447 = t579 * t480 - t500 * t580;
t446 = t584 * t502 + t653;
t445 = -t581 * t503 + t643;
t444 = t581 * t502 - t644;
t443 = t584 * t503 + t652;
t442 = t586 * t461 - t647;
t441 = -t583 * t461 - t637;
t440 = -pkin(6) * t484 + t650;
t439 = t580 * t458 - t579 * t542;
t438 = t580 * t457 - t579 * t541;
t437 = t579 * t457 + t580 * t541;
t426 = -pkin(6) * t479 + t641;
t425 = t584 * t468 + t528 * t660;
t424 = t581 * t468 - t528 * t659;
t423 = -t581 * t467 + t526 * t659;
t422 = t584 * t467 + t526 * t660;
t418 = -pkin(2) * t484 + t449;
t417 = t586 * t454 + t583 * t484;
t416 = -t583 * t454 + t586 * t484;
t415 = -pkin(2) * t479 + t450;
t412 = -t582 * t465 + t585 * t466;
t411 = -t585 * t465 - t582 * t466;
t406 = t586 * t448 + t583 * t479;
t405 = -t583 * t448 + t586 * t479;
t404 = -pkin(4) * t691 + qJ(5) * t473;
t403 = t580 * t412 - t579 * t557;
t402 = t579 * t412 + t580 * t557;
t401 = t586 * t438 + t583 * t455;
t400 = -t583 * t438 + t586 * t455;
t397 = -t582 * t444 + t585 * t446;
t396 = -t582 * t443 + t585 * t445;
t395 = -t585 * t444 - t582 * t446;
t394 = -t585 * t443 - t582 * t445;
t392 = -t584 * t431 - t581 * t691;
t390 = -t581 * t431 + t584 * t691;
t387 = t645 - t669;
t384 = -pkin(1) * t451 - pkin(2) * t499 - pkin(6) * t487 + t641;
t383 = -t582 * t424 + t585 * t425;
t382 = -t582 * t422 + t585 * t423;
t381 = -t585 * t424 - t582 * t425;
t380 = -t585 * t422 - t582 * t423;
t379 = t654 - t670;
t378 = -pkin(1) * t447 + pkin(2) * t500 - pkin(6) * t480 - t650;
t375 = t580 * t399 + t579 * t477;
t374 = t579 * t399 - t580 * t477;
t371 = -pkin(6) * t455 - t398;
t370 = t580 * t383 - t621;
t369 = t580 * t382 + t621;
t368 = t579 * t383 + t620;
t367 = t579 * t382 - t620;
t363 = -qJ(5) * t488 + t372;
t362 = t580 * t397 - t579 * t432;
t361 = t580 * t396 - t579 * t436;
t360 = t579 * t397 + t580 * t432;
t359 = t579 * t396 + t580 * t436;
t358 = t612 + t654;
t357 = t586 * t403 - t583 * t411;
t356 = -t583 * t403 - t586 * t411;
t352 = -qJ(2) * t451 - t579 * t418 + t580 * t440;
t351 = t613 - t645;
t350 = -qJ(2) * t447 - t579 * t415 + t580 * t426;
t346 = -pkin(1) * t437 - pkin(2) * t541 - pkin(6) * t457 - t399;
t345 = -pkin(4) * t431 + qJ(5) * t472 - t606 + (t609 * qJD(1) - t690) * t579 - t686;
t343 = -t582 * t390 + t585 * t392;
t341 = -t585 * t390 - t582 * t392;
t339 = t586 * t375 + t583 * t398;
t338 = -t583 * t375 + t586 * t398;
t337 = -qJ(2) * t437 + t580 * t371 + t455 * t681;
t336 = -t524 * pkin(4) + t597;
t335 = t580 * t343 - t579 * t481;
t334 = t579 * t343 + t580 * t481;
t332 = -pkin(1) * t374 + pkin(2) * t477 - pkin(6) * t399;
t328 = t586 * t370 - t583 * t381;
t327 = t586 * t369 - t583 * t380;
t326 = -t583 * t370 - t586 * t381;
t325 = -t583 * t369 - t586 * t380;
t324 = t586 * t362 - t583 * t395;
t323 = t586 * t361 - t583 * t394;
t322 = -t583 * t362 - t586 * t395;
t321 = -t583 * t361 - t586 * t394;
t319 = -t583 * t355 + t586 * t386;
t318 = pkin(5) * t319;
t317 = t584 * t363 - t581 * t404 - t669;
t316 = t519 + (-t436 + t663) * qJ(5) - t689 + t618;
t314 = -t583 * t349 + t586 * t376;
t313 = -qJ(5) * t643 - t581 * t345 - t670;
t312 = pkin(5) * t314;
t309 = t366 + t688;
t308 = -qJ(2) * t374 + (-pkin(6) * t580 + t681) * t398;
t307 = -qJ(5) * t432 + (-t469 - t524) * pkin(4) + t597;
t305 = t365 + t687;
t304 = t581 * t363 + t584 * t404 + t612;
t303 = -qJ(5) * t652 + t584 * t345 + t613;
t302 = -pkin(3) * t427 + pkin(7) * t311;
t301 = -pkin(4) * t372 + qJ(5) * t336;
t300 = -pkin(4) * t436 + t306;
t299 = -t582 * t358 + t585 * t387 - t672;
t298 = -t582 * t351 + t585 * t379 - t673;
t297 = -t310 - t671;
t296 = (-t488 - t524) * pkin(4) + t597 + t688;
t295 = t311 + t614;
t294 = t519 - t598 + t687 - 0.2e1 * t689;
t293 = t586 * t335 - t583 * t341;
t292 = -t583 * t335 - t586 * t341;
t290 = -t583 * t331 + t586 * t342;
t289 = pkin(5) * t290;
t288 = t584 * t336 - t655;
t287 = t581 * t336 + t646;
t286 = -t585 * t358 - t582 * t387 + t593;
t285 = t585 * t311 - t651;
t284 = t582 * t311 + t642;
t283 = -t585 * t351 - t582 * t379 + t594;
t282 = t580 * t285 + t579 * t427;
t281 = t579 * t285 - t580 * t427;
t280 = -t581 * t307 + t584 * t316 - t671;
t279 = -t582 * t304 + t585 * t317 - t672;
t278 = t584 * t307 + t581 * t316 + t614;
t277 = -t582 * t303 + t585 * t313 - t673;
t276 = t580 * t299 - t579 * t309 - t665;
t275 = -pkin(2) * t284 - pkin(3) * t310;
t274 = t580 * t298 - t579 * t305 - t666;
t273 = -t585 * t304 - t582 * t317 + t593;
t272 = -t582 * t287 + t585 * t288;
t271 = t585 * t287 + t582 * t288;
t270 = -t585 * t303 - t582 * t313 + t594;
t269 = -t582 * t295 + t585 * t297 - t674;
t268 = -pkin(7) * t287 - qJ(5) * t646 - t581 * t301;
t267 = t580 * t272 + t579 * t372;
t266 = t579 * t272 - t580 * t372;
t265 = -pkin(3) * t372 + pkin(7) * t288 - qJ(5) * t655 + t584 * t301;
t264 = -pkin(6) * t284 - pkin(7) * t642 - t582 * t302;
t263 = t586 * t282 + t583 * t284;
t262 = -t583 * t282 + t586 * t284;
t261 = t580 * t279 - t579 * t296 - t665;
t260 = -t585 * t295 - t582 * t297 + t595;
t259 = t580 * t277 - t579 * t294 - t666;
t258 = t580 * t269 - t579 * t306 - t667;
t257 = -pkin(2) * t271 - pkin(3) * t287 - pkin(4) * t333;
t256 = -t582 * t278 + t585 * t280 - t674;
t255 = -t585 * t278 - t582 * t280 + t595;
t254 = -pkin(1) * t281 + pkin(2) * t427 - pkin(6) * t285 + pkin(7) * t651 - t585 * t302;
t253 = t586 * t267 + t583 * t271;
t252 = -t583 * t267 + t586 * t271;
t251 = t580 * t256 - t579 * t300 - t667;
t250 = -qJ(2) * t281 + t580 * t264 - t579 * t275;
t249 = -pkin(6) * t271 - t582 * t265 + t585 * t268;
t248 = -pkin(1) * t266 + pkin(2) * t372 - pkin(6) * t272 - t585 * t265 - t582 * t268;
t247 = -qJ(2) * t266 + t580 * t249 - t579 * t257;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t460, 0, 0, 0, 0, 0, 0, t451, t447, t437, t374, 0, 0, 0, 0, 0, 0, t348, t354, t330, t281, 0, 0, 0, 0, 0, 0, t348, t354, t330, t266; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, -t601, t552, 0, t516, 0, 0, 0, 0, 0, 0, -t600, t512, t510, t441, 0, 0, 0, 0, 0, 0, t416, t405, t400, t338, 0, 0, 0, 0, 0, 0, t314, t319, t290, t262, 0, 0, 0, 0, 0, 0, t314, t319, t290, t252; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t552, -t601, 0, t517, 0, 0, 0, 0, 0, 0, -t599, t514, t511, t442, 0, 0, 0, 0, 0, 0, t417, t406, t401, t339, 0, 0, 0, 0, 0, 0, t315, t320, t291, t263, 0, 0, 0, 0, 0, 0, t315, t320, t291, t253; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t559, -t558, 0, 0, t572, 0.2e1 * t579 * t626, 0, t573, 0, 0, -qJ(2) * t546 + t580 * t611, qJ(2) * t545 - t579 * t611, pkin(1) * t550 + qJ(2) * t548 + t461, pkin(1) * t536 + qJ(2) * t461, t579 * t490 - t603, t579 * t458 + t580 * t542, t579 * t485 + t580 * t497, t579 * t489 + t603, t579 * t486 + t580 * t498, t580 * t567, -pkin(1) * t484 + qJ(2) * t454 + t580 * t418 + t579 * t440, -pkin(1) * t479 + qJ(2) * t448 + t580 * t415 + t579 * t426, qJ(2) * t438 + t579 * t371 + (-pkin(1) - t680) * t455, qJ(2) * t375 + t398 * t602, t368, t334, t359, t367, t360, t402, t579 * t298 + t580 * t305 + t635, t579 * t299 + t580 * t309 + t634, t579 * t269 + t580 * t306 + t636, -pkin(1) * t284 + qJ(2) * t282 + t579 * t264 + t580 * t275, t368, t334, t359, t367, t360, t402, t579 * t277 + t580 * t294 + t635, t579 * t279 + t580 * t296 + t634, t579 * t256 + t580 * t300 + t636, -pkin(1) * t271 + qJ(2) * t267 + t579 * t249 + t580 * t257; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t552, 0, -t601, 0, t604, t537, -t517, -pkin(5) * t517, -t522, -t583 * t549 - t586 * t551, t512, t522, t600, 0, pkin(5) * t599 - t586 * t504 + t579 * t647, -pkin(5) * t514 - t586 * t505 + t580 * t647, -pkin(5) * t511 - t583 * t460, -pkin(5) * t442 - (pkin(1) * t586 + qJ(2) * t583) * t460, -t583 * t471 - t586 * t492, -t583 * t439 - t586 * t456, -t583 * t452 - t586 * t482, -t583 * t470 - t586 * t491, -t583 * t453 - t586 * t483, -t586 * t508 + t583 * t658, -pkin(5) * t417 - t583 * t352 - t586 * t384, -pkin(5) * t406 - t583 * t350 - t586 * t378, -pkin(5) * t401 - t583 * t337 - t586 * t346, -pkin(5) * t339 - t583 * t308 - t586 * t332, t326, t292, t321, t325, t322, t356, -t583 * t274 - t586 * t283 - t676, -t583 * t276 - t586 * t286 - t675, -t583 * t258 - t586 * t260 - t677, -pkin(5) * t263 - t583 * t250 - t586 * t254, t326, t292, t321, t325, t322, t356, -t583 * t259 - t586 * t270 - t676, -t583 * t261 - t586 * t273 - t675, -t583 * t251 - t586 * t255 - t677, -pkin(5) * t253 - t583 * t247 - t586 * t248; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, t601, 0, -t552, 0, -t537, t604, t516, pkin(5) * t516, t523, t586 * t549 - t583 * t551, t514, -t523, t599, 0, -pkin(5) * t600 - t583 * t504 - t579 * t637, pkin(5) * t512 - t583 * t505 - t580 * t637, pkin(5) * t510 + t586 * t460, pkin(5) * t441 - (pkin(1) * t583 - qJ(2) * t586) * t460, t586 * t471 - t583 * t492, t586 * t439 - t583 * t456, t586 * t452 - t583 * t482, t586 * t470 - t583 * t491, t586 * t453 - t583 * t483, -t583 * t508 - t586 * t658, pkin(5) * t416 + t586 * t352 - t583 * t384, pkin(5) * t405 + t586 * t350 - t583 * t378, pkin(5) * t400 + t586 * t337 - t583 * t346, pkin(5) * t338 + t586 * t308 - t583 * t332, t328, t293, t323, t327, t324, t357, t586 * t274 - t583 * t283 + t312, t586 * t276 - t583 * t286 + t318, t586 * t258 - t583 * t260 + t289, pkin(5) * t262 + t586 * t250 - t583 * t254, t328, t293, t323, t327, t324, t357, t586 * t259 - t583 * t270 + t312, t586 * t261 - t583 * t273 + t318, t586 * t251 - t583 * t255 + t289, pkin(5) * t252 + t586 * t247 - t583 * t248;];
tauB_reg = t1;
