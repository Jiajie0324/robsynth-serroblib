% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRRP4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:51
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRRP4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP4_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP4_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP4_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP4_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:51:01
% EndTime: 2020-01-03 11:51:04
% DurationCPUTime: 2.67s
% Computational Cost: add. (8523->204), mult. (20990->274), div. (0->0), fcn. (14498->8), ass. (0->159)
t1330 = qJD(1) ^ 2;
t1322 = sin(pkin(8));
t1317 = t1322 ^ 2;
t1323 = cos(pkin(8));
t1318 = t1323 ^ 2;
t1352 = t1317 + t1318;
t1300 = t1352 * t1330;
t1315 = t1323 * qJDD(1);
t1346 = -t1315 + qJDD(3);
t1340 = -qJDD(4) - t1346;
t1324 = sin(qJ(4));
t1325 = sin(qJ(3));
t1327 = cos(qJ(4));
t1328 = cos(qJ(3));
t1361 = qJD(1) * t1322;
t1282 = (-t1324 * t1328 - t1325 * t1327) * t1361;
t1359 = qJD(1) * t1328;
t1343 = t1322 * t1359;
t1360 = qJD(1) * t1325;
t1344 = t1322 * t1360;
t1284 = -t1324 * t1344 + t1327 * t1343;
t1357 = t1284 * t1282;
t1260 = -t1340 + t1357;
t1369 = t1282 ^ 2;
t1368 = t1284 ^ 2;
t1355 = t1323 * qJD(1);
t1311 = -qJD(3) + t1355;
t1307 = -qJD(4) + t1311;
t1367 = t1307 ^ 2;
t1366 = t1311 ^ 2;
t1365 = t1325 ^ 2;
t1364 = 2 * qJD(2);
t1363 = -2 * qJD(5);
t1362 = t1323 * g(1);
t1358 = t1282 * t1307;
t1356 = t1317 * t1330;
t1337 = -pkin(2) * t1323 - pkin(6) * t1322;
t1298 = t1337 * qJD(1);
t1354 = t1364 + t1298;
t1353 = qJD(4) + t1307;
t1326 = sin(qJ(1));
t1329 = cos(qJ(1));
t1304 = -t1326 * g(2) + t1329 * g(3);
t1295 = -t1330 * pkin(1) + qJDD(1) * qJ(2) + t1304;
t1277 = -t1322 * g(1) + t1323 * t1295 + t1355 * t1364;
t1263 = t1298 * t1355 + t1277;
t1305 = -t1329 * g(2) - t1326 * g(3);
t1292 = -qJDD(1) * pkin(1) - t1330 * qJ(2) + qJDD(2) - t1305;
t1279 = t1337 * qJDD(1) + t1292;
t1271 = t1328 * t1279;
t1306 = qJD(3) * t1344;
t1349 = t1322 * qJDD(1);
t1291 = t1328 * t1349 - t1306;
t1342 = t1328 * t1356;
t1233 = t1271 - t1291 * pkin(7) + t1346 * pkin(3) + (t1311 * pkin(7) * t1361 - pkin(3) * t1342 - t1263) * t1325;
t1249 = t1328 * t1263 + t1325 * t1279;
t1288 = -t1311 * pkin(3) - pkin(7) * t1343;
t1351 = qJDD(1) * t1325;
t1335 = (-qJD(3) * t1359 - t1351) * t1322;
t1341 = t1365 * t1356;
t1234 = -pkin(3) * t1341 + pkin(7) * t1335 + t1311 * t1288 + t1249;
t1218 = t1324 * t1233 + t1327 * t1234;
t1350 = qJDD(1) * t1328;
t1348 = t1326 * qJDD(1);
t1347 = t1329 * qJDD(1);
t1345 = t1311 * t1360;
t1217 = t1327 * t1233 - t1324 * t1234;
t1339 = t1324 * t1291 - t1327 * t1335;
t1338 = t1325 * t1342;
t1336 = -t1284 * qJD(4) - t1339;
t1334 = t1327 * t1291 + t1324 * t1335;
t1237 = t1362 - pkin(3) * t1335 - pkin(7) * t1341 + (t1295 + (t1288 * t1328 + t1354) * qJD(1)) * t1322;
t1333 = t1282 * qJD(4) + t1334;
t1320 = t1328 ^ 2;
t1310 = t1323 * t1330 * t1322;
t1302 = -t1326 * t1330 + t1347;
t1301 = -t1329 * t1330 - t1348;
t1299 = t1352 * qJDD(1);
t1297 = t1323 * t1300;
t1296 = t1322 * t1300;
t1294 = (t1320 + t1365) * t1356;
t1293 = -t1341 - t1366;
t1290 = -t1338 + t1346;
t1289 = -t1338 - t1346;
t1280 = -t1320 * t1356 - t1366;
t1276 = -0.2e1 * qJD(2) * t1361 - t1322 * t1295 - t1362;
t1275 = -t1306 + (t1345 + t1350) * t1322;
t1274 = (-t1351 + (-qJD(3) - t1311) * t1359) * t1322;
t1273 = (t1351 + (qJD(3) - t1311) * t1359) * t1322;
t1272 = t1306 + (t1345 - t1350) * t1322;
t1269 = -t1307 * pkin(4) - t1284 * qJ(5);
t1268 = -t1367 - t1368;
t1267 = -t1325 * t1290 + t1328 * t1293;
t1266 = t1328 * t1290 + t1325 * t1293;
t1265 = -t1325 * t1280 + t1328 * t1289;
t1264 = t1328 * t1280 + t1325 * t1289;
t1262 = t1362 + (t1354 * qJD(1) + t1295) * t1322;
t1259 = t1340 + t1357;
t1258 = -t1367 - t1369;
t1257 = -t1368 - t1369;
t1255 = -t1322 * t1276 + t1323 * t1277;
t1254 = t1323 * t1276 + t1322 * t1277;
t1253 = -t1325 * t1272 + t1328 * t1274;
t1252 = t1328 * t1272 + t1325 * t1274;
t1251 = t1323 * t1267 + t1322 * t1273;
t1250 = t1322 * t1267 - t1323 * t1273;
t1248 = -t1325 * t1263 + t1271;
t1247 = t1323 * t1265 + t1322 * t1275;
t1246 = t1322 * t1265 - t1323 * t1275;
t1245 = t1323 * t1253 - t1322 * t1294;
t1244 = t1322 * t1253 + t1323 * t1294;
t1243 = -t1353 * t1282 - t1334;
t1242 = t1333 - t1358;
t1241 = -t1353 * t1284 - t1339;
t1240 = (qJD(4) - t1307) * t1284 + t1339;
t1239 = t1327 * t1259 - t1324 * t1268;
t1238 = t1324 * t1259 + t1327 * t1268;
t1236 = t1327 * t1258 - t1324 * t1260;
t1235 = t1324 * t1258 + t1327 * t1260;
t1229 = -t1325 * t1248 + t1328 * t1249;
t1228 = t1328 * t1248 + t1325 * t1249;
t1227 = t1327 * t1241 - t1324 * t1243;
t1226 = t1324 * t1241 + t1327 * t1243;
t1225 = -t1325 * t1238 + t1328 * t1239;
t1224 = t1328 * t1238 + t1325 * t1239;
t1223 = -t1325 * t1235 + t1328 * t1236;
t1222 = t1328 * t1235 + t1325 * t1236;
t1221 = t1323 * t1229 + t1322 * t1262;
t1220 = t1322 * t1229 - t1323 * t1262;
t1219 = -t1336 * pkin(4) - t1369 * qJ(5) + t1284 * t1269 + qJDD(5) + t1237;
t1216 = t1323 * t1225 + t1322 * t1242;
t1215 = t1322 * t1225 - t1323 * t1242;
t1214 = t1323 * t1223 + t1322 * t1240;
t1213 = t1322 * t1223 - t1323 * t1240;
t1212 = -t1325 * t1226 + t1328 * t1227;
t1211 = t1328 * t1226 + t1325 * t1227;
t1210 = t1307 * t1269 + t1336 * qJ(5) - (pkin(4) * t1282 + t1363) * t1282 + t1218;
t1209 = t1284 * t1363 + t1217 + (-t1333 - t1358) * qJ(5) + t1260 * pkin(4);
t1208 = t1323 * t1212 + t1322 * t1257;
t1207 = t1322 * t1212 - t1323 * t1257;
t1206 = -t1329 * t1216 - t1326 * t1224;
t1205 = t1326 * t1216 - t1329 * t1224;
t1204 = -t1329 * t1214 - t1326 * t1222;
t1203 = t1326 * t1214 - t1329 * t1222;
t1202 = -t1324 * t1217 + t1327 * t1218;
t1201 = t1327 * t1217 + t1324 * t1218;
t1200 = -t1329 * t1208 - t1326 * t1211;
t1199 = t1326 * t1208 - t1329 * t1211;
t1198 = -t1324 * t1209 + t1327 * t1210;
t1197 = t1327 * t1209 + t1324 * t1210;
t1196 = -t1325 * t1201 + t1328 * t1202;
t1195 = t1328 * t1201 + t1325 * t1202;
t1194 = t1323 * t1196 + t1322 * t1237;
t1193 = t1322 * t1196 - t1323 * t1237;
t1192 = -t1325 * t1197 + t1328 * t1198;
t1191 = t1328 * t1197 + t1325 * t1198;
t1190 = t1323 * t1192 + t1322 * t1219;
t1189 = t1322 * t1192 - t1323 * t1219;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1254, 0, 0, 0, 0, 0, 0, t1250, t1246, t1244, t1220, 0, 0, 0, 0, 0, 0, t1213, t1215, t1207, t1193, 0, 0, 0, 0, 0, 0, t1213, t1215, t1207, t1189; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1302, t1301, 0, t1326 * t1304 + t1329 * t1305, 0, 0, 0, 0, 0, 0, -t1326 * t1297 + t1323 * t1347, t1326 * t1296 - t1322 * t1347, t1326 * t1299 + t1329 * t1300, t1326 * t1255 - t1329 * t1292, 0, 0, 0, 0, 0, 0, t1326 * t1251 - t1329 * t1266, t1326 * t1247 - t1329 * t1264, t1326 * t1245 - t1329 * t1252, t1326 * t1221 - t1329 * t1228, 0, 0, 0, 0, 0, 0, t1203, t1205, t1199, t1326 * t1194 - t1329 * t1195, 0, 0, 0, 0, 0, 0, t1203, t1205, t1199, t1326 * t1190 - t1329 * t1191; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1301, t1302, 0, -t1329 * t1304 + t1326 * t1305, 0, 0, 0, 0, 0, 0, t1329 * t1297 + t1323 * t1348, -t1329 * t1296 - t1322 * t1348, -t1329 * t1299 + t1326 * t1300, -t1329 * t1255 - t1326 * t1292, 0, 0, 0, 0, 0, 0, -t1329 * t1251 - t1326 * t1266, -t1329 * t1247 - t1326 * t1264, -t1329 * t1245 - t1326 * t1252, -t1329 * t1221 - t1326 * t1228, 0, 0, 0, 0, 0, 0, t1204, t1206, t1200, -t1329 * t1194 - t1326 * t1195, 0, 0, 0, 0, 0, 0, t1204, t1206, t1200, -t1329 * t1190 - t1326 * t1191; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1330, -qJDD(1), 0, t1304, 0, 0, 0, 0, 0, 0, -t1297, t1296, t1299, t1255, 0, 0, 0, 0, 0, 0, t1251, t1247, t1245, t1221, 0, 0, 0, 0, 0, 0, t1214, t1216, t1208, t1194, 0, 0, 0, 0, 0, 0, t1214, t1216, t1208, t1190; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1330, 0, t1305, 0, 0, 0, 0, 0, 0, t1315, -t1349, t1300, -t1292, 0, 0, 0, 0, 0, 0, -t1266, -t1264, -t1252, -t1228, 0, 0, 0, 0, 0, 0, -t1222, -t1224, -t1211, -t1195, 0, 0, 0, 0, 0, 0, -t1222, -t1224, -t1211, -t1191; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1254, 0, 0, 0, 0, 0, 0, t1250, t1246, t1244, t1220, 0, 0, 0, 0, 0, 0, t1213, t1215, t1207, t1193, 0, 0, 0, 0, 0, 0, t1213, t1215, t1207, t1189; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1318 * t1330, t1310, t1315, t1277, 0, 0, 0, 0, 0, 0, t1267, t1265, t1253, t1229, 0, 0, 0, 0, 0, 0, t1223, t1225, t1212, t1196, 0, 0, 0, 0, 0, 0, t1223, t1225, t1212, t1192; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1310, -t1356, -t1349, t1276, 0, 0, 0, 0, 0, 0, -t1273, -t1275, t1294, -t1262, 0, 0, 0, 0, 0, 0, -t1240, -t1242, -t1257, -t1237, 0, 0, 0, 0, 0, 0, -t1240, -t1242, -t1257, -t1219; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1315, t1349, -t1300, t1292, 0, 0, 0, 0, 0, 0, t1266, t1264, t1252, t1228, 0, 0, 0, 0, 0, 0, t1222, t1224, t1211, t1195, 0, 0, 0, 0, 0, 0, t1222, t1224, t1211, t1191; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1293, t1289, t1274, t1249, 0, 0, 0, 0, 0, 0, t1236, t1239, t1227, t1202, 0, 0, 0, 0, 0, 0, t1236, t1239, t1227, t1198; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1290, t1280, t1272, t1248, 0, 0, 0, 0, 0, 0, t1235, t1238, t1226, t1201, 0, 0, 0, 0, 0, 0, t1235, t1238, t1226, t1197; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1273, t1275, -t1294, t1262, 0, 0, 0, 0, 0, 0, t1240, t1242, t1257, t1237, 0, 0, 0, 0, 0, 0, t1240, t1242, t1257, t1219; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1258, t1259, t1241, t1218, 0, 0, 0, 0, 0, 0, t1258, t1259, t1241, t1210; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1260, t1268, t1243, t1217, 0, 0, 0, 0, 0, 0, t1260, t1268, t1243, t1209; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1240, t1242, t1257, t1237, 0, 0, 0, 0, 0, 0, t1240, t1242, t1257, t1219; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1258, t1259, t1241, t1210; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1260, t1268, t1243, t1209; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1240, t1242, t1257, t1219;];
f_new_reg = t1;
