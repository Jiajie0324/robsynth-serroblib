% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRPR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d5,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:42
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRPR12_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR12_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR12_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR12_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR12_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5RRRPR12_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:41:02
% EndTime: 2019-12-31 21:41:38
% DurationCPUTime: 27.87s
% Computational Cost: add. (211352->808), mult. (466223->1320), div. (0->0), fcn. (369662->12), ass. (0->592)
t890 = cos(pkin(5));
t879 = t890 * qJD(1) + qJD(2);
t892 = sin(qJ(3));
t896 = cos(qJ(3));
t888 = sin(pkin(5));
t893 = sin(qJ(2));
t985 = qJD(1) * t893;
t969 = t888 * t985;
t846 = t892 * t879 + t896 * t969;
t897 = cos(qJ(2));
t984 = qJD(1) * t897;
t968 = t888 * t984;
t872 = -qJD(3) + t968;
t887 = sin(pkin(10));
t889 = cos(pkin(10));
t817 = t887 * t846 + t889 * t872;
t844 = -t896 * t879 + t892 * t969;
t793 = t844 * t817;
t981 = qJDD(1) * t893;
t854 = (qJD(2) * t984 + t981) * t888;
t878 = t890 * qJDD(1) + qJDD(2);
t798 = -t844 * qJD(3) + t896 * t854 + t892 * t878;
t875 = qJD(2) * t969;
t980 = qJDD(1) * t897;
t960 = t888 * t980 - t875;
t849 = -qJDD(3) + t960;
t988 = -t889 * t798 + t887 * t849;
t720 = -t793 + t988;
t819 = t889 * t846 - t887 * t872;
t781 = t819 * t817;
t965 = t892 * t854 - t896 * t878;
t797 = t846 * qJD(3) + t965;
t1032 = -t781 + t797;
t1040 = t1032 * t887;
t1039 = t1032 * t889;
t891 = sin(qJ(5));
t895 = cos(qJ(5));
t769 = t895 * t817 + t891 * t819;
t771 = -t891 * t817 + t895 * t819;
t705 = t771 * t769;
t909 = qJDD(5) + t797;
t1034 = -t705 + t909;
t1038 = t1034 * t891;
t1037 = t1034 * t895;
t1014 = t846 * t844;
t906 = -t849 - t1014;
t1036 = t892 * t906;
t1035 = t896 * t906;
t838 = qJD(5) + t844;
t738 = t838 * t769;
t778 = -t887 * t798 - t889 * t849;
t908 = t769 * qJD(5) - t891 * t778 + t895 * t988;
t1033 = -t738 - t908;
t829 = t844 * t872;
t763 = t829 + t798;
t862 = t879 * t968;
t825 = t862 + t854;
t721 = t988 + t793;
t967 = -t895 * t778 - t891 * t988;
t615 = (qJD(5) - t838) * t771 + t967;
t760 = (qJD(3) + t872) * t846 + t965;
t767 = t769 ^ 2;
t768 = t771 ^ 2;
t1031 = t817 ^ 2;
t816 = t819 ^ 2;
t836 = t838 ^ 2;
t1030 = t844 ^ 2;
t843 = t846 ^ 2;
t1029 = t872 ^ 2;
t1028 = t879 ^ 2;
t1027 = pkin(2) * t893;
t1026 = pkin(2) * t897;
t1025 = pkin(3) * t892;
t1024 = pkin(7) * t888;
t1023 = g(3) * t897;
t1022 = t890 * g(3);
t894 = sin(qJ(1));
t898 = cos(qJ(1));
t874 = t898 * g(1) + t894 * g(2);
t899 = qJD(1) ^ 2;
t850 = -t899 * pkin(1) + qJDD(1) * t1024 - t874;
t964 = -pkin(8) * t893 - t1026;
t986 = qJD(1) * t888;
t853 = t964 * t986;
t873 = t894 * g(1) - t898 * g(2);
t904 = qJDD(1) * pkin(1) + t899 * t1024 + t873;
t903 = t890 * t904;
t902 = (-g(3) * t888 + t903) * t893;
t752 = t878 * pkin(8) - t1028 * pkin(2) + (t853 * t986 + t850) * t897 + t902;
t921 = t879 * t985 - t980;
t901 = t875 * pkin(2) - t854 * pkin(8) - t1022 + (-t879 * pkin(8) * t984 + pkin(2) * t921 - t904) * t888;
t691 = t896 * t752 + t892 * t901;
t805 = t844 * pkin(3) - t846 * qJ(4);
t645 = -t1029 * pkin(3) - t849 * qJ(4) - t844 * t805 + t691;
t966 = t893 * t850 - t897 * t903;
t751 = -t878 * pkin(2) - t1028 * pkin(8) + (t853 * t985 + t1023) * t888 + t966;
t653 = -t763 * qJ(4) + (-t872 * t846 + t797) * pkin(3) + t751;
t573 = 0.2e1 * qJD(4) * t819 + t887 * t645 - t889 * t653;
t543 = t1032 * pkin(4) + pkin(9) * t720 - t573;
t574 = -0.2e1 * qJD(4) * t817 + t889 * t645 + t887 * t653;
t787 = t844 * pkin(4) - t819 * pkin(9);
t550 = -t1031 * pkin(4) + t778 * pkin(9) - t844 * t787 + t574;
t485 = -t895 * t543 + t550 * t891;
t486 = t891 * t543 + t895 * t550;
t447 = -t485 * t895 + t486 * t891;
t1021 = t447 * t887;
t1020 = t447 * t889;
t1019 = t838 * t891;
t1018 = t838 * t895;
t1017 = t844 * t819;
t1016 = t844 * t887;
t1015 = t844 * t889;
t1013 = t872 * t892;
t1012 = t872 * t896;
t1011 = t878 * t888;
t884 = t888 ^ 2;
t1010 = t884 * t893;
t1009 = t884 * t899;
t690 = t892 * t752 - t896 * t901;
t644 = t849 * pkin(3) - t1029 * qJ(4) + t846 * t805 + qJDD(4) + t690;
t1008 = t887 * t644;
t723 = t781 + t797;
t1007 = t887 * t723;
t1006 = t889 * t644;
t1005 = t889 * t723;
t585 = -t778 * pkin(4) - t1031 * pkin(9) + t819 * t787 + t644;
t1004 = t891 * t585;
t672 = t705 + t909;
t1003 = t891 * t672;
t1002 = t892 * t751;
t788 = t849 - t1014;
t1001 = t892 * t788;
t1000 = t892 * t797;
t831 = t888 * t904 + t1022;
t999 = t893 * t831;
t989 = t897 * t899;
t871 = t989 * t1010;
t851 = t871 + t878;
t998 = t893 * t851;
t852 = -t871 + t878;
t997 = t893 * t852;
t996 = t895 * t585;
t995 = t895 * t672;
t994 = t896 * t751;
t993 = t896 * t788;
t992 = t897 * t831;
t991 = t897 * t851;
t990 = t897 * t852;
t885 = t893 ^ 2;
t886 = t897 ^ 2;
t987 = t885 + t886;
t979 = t897 * t1014;
t978 = t885 * t1009;
t977 = t886 * t1009;
t976 = t892 * t705;
t975 = t892 * t781;
t974 = t893 * t1014;
t973 = t896 * t705;
t972 = t896 * t781;
t971 = -pkin(3) * t896 - pkin(2);
t970 = t879 * t986;
t448 = t485 * t891 + t895 * t486;
t601 = t892 * t690 + t896 * t691;
t833 = -t894 * t873 - t898 * t874;
t870 = t898 * qJDD(1) - t894 * t899;
t963 = -pkin(6) * t870 - g(3) * t894;
t837 = -t978 - t1028;
t804 = -t893 * t837 - t990;
t962 = pkin(7) * t804 - t999;
t858 = -t977 - t1028;
t814 = t897 * t858 - t998;
t961 = pkin(7) * t814 + t992;
t424 = t448 * t889 - t1021;
t419 = t424 * t896 + t585 * t892;
t423 = t448 * t887 + t1020;
t959 = t419 * t893 - t423 * t897;
t619 = -t738 + t908;
t558 = -t615 * t891 + t895 * t619;
t560 = -t615 * t895 - t891 * t619;
t503 = -t558 * t887 + t560 * t889;
t659 = -t767 - t768;
t483 = t503 * t896 + t659 * t892;
t501 = t558 * t889 + t560 * t887;
t958 = t483 * t893 - t501 * t897;
t614 = (qJD(5) + t838) * t771 + t967;
t557 = t1033 * t895 - t891 * t614;
t559 = -t1033 * t891 - t895 * t614;
t502 = -t557 * t887 + t559 * t889;
t704 = -t768 + t767;
t493 = t502 * t896 - t704 * t892;
t500 = -t557 * t889 - t559 * t887;
t957 = t493 * t893 + t500 * t897;
t512 = t887 * t573 + t889 * t574;
t497 = t512 * t896 + t644 * t892;
t511 = -t889 * t573 + t887 * t574;
t956 = t497 * t893 - t511 * t897;
t694 = -t836 - t767;
t595 = t891 * t694 + t1037;
t596 = t895 * t694 - t1038;
t547 = -t887 * t595 + t889 * t596;
t514 = t896 * t547 + t892 * t614;
t546 = t889 * t595 + t887 * t596;
t955 = t514 * t893 - t546 * t897;
t725 = -t768 - t836;
t620 = t895 * t725 - t1003;
t621 = -t891 * t725 - t995;
t556 = -t887 * t620 + t889 * t621;
t519 = t1033 * t892 + t896 * t556;
t555 = t889 * t620 + t887 * t621;
t954 = t519 * t893 - t555 * t897;
t737 = -t768 + t836;
t628 = t895 * t737 + t1038;
t630 = -t891 * t737 + t1037;
t566 = -t887 * t628 + t889 * t630;
t524 = t896 * t566 - t892 * t619;
t564 = -t889 * t628 - t887 * t630;
t953 = t524 * t893 + t564 * t897;
t736 = t767 - t836;
t629 = t891 * t736 + t995;
t631 = t895 * t736 - t1003;
t567 = -t887 * t629 + t889 * t631;
t525 = t896 * t567 - t892 * t615;
t565 = -t889 * t629 - t887 * t631;
t952 = t525 * t893 + t565 * t897;
t657 = -t771 * qJD(5) - t967;
t610 = t769 * t1019 + t895 * t657;
t611 = t769 * t1018 - t891 * t657;
t553 = -t887 * t610 + t889 * t611;
t535 = t896 * t553 - t976;
t551 = -t889 * t610 - t887 * t611;
t951 = t535 * t893 + t551 * t897;
t612 = t771 * t1018 - t891 * t908;
t613 = -t771 * t1019 - t895 * t908;
t554 = -t887 * t612 + t889 * t613;
t536 = t896 * t554 + t976;
t552 = -t889 * t612 - t887 * t613;
t950 = t536 * t893 + t552 * t897;
t677 = (-t769 * t891 - t771 * t895) * t838;
t678 = (-t769 * t895 + t771 * t891) * t838;
t592 = -t887 * t677 + t889 * t678;
t588 = t896 * t592 + t892 * t909;
t591 = -t889 * t677 - t887 * t678;
t949 = t588 * t893 + t591 * t897;
t716 = -t778 - t1017;
t649 = -t716 * t889 - t887 * t720;
t732 = t816 + t1031;
t599 = t896 * t649 - t892 * t732;
t647 = -t716 * t887 + t889 * t720;
t948 = t599 * t893 - t647 * t897;
t947 = t601 * t893 - t751 * t897;
t744 = -t1030 - t1031;
t664 = t889 * t744 - t1040;
t717 = t778 - t1017;
t603 = t896 * t664 - t892 * t717;
t663 = t887 * t744 + t1039;
t946 = t603 * t893 - t663 * t897;
t648 = t889 * t717 + t721 * t887;
t780 = -t816 + t1031;
t607 = t896 * t648 - t892 * t780;
t646 = -t887 * t717 + t721 * t889;
t945 = t607 * t893 + t646 * t897;
t773 = -t816 - t1030;
t676 = -t887 * t773 - t1005;
t609 = t896 * t676 - t892 * t721;
t674 = t889 * t773 - t1007;
t944 = t609 * t893 - t674 * t897;
t792 = -t816 + t1030;
t687 = -t887 * t792 + t1039;
t624 = t896 * t687 - t892 * t720;
t685 = -t889 * t792 - t1040;
t943 = t624 * t893 + t685 * t897;
t791 = -t1030 + t1031;
t688 = t889 * t791 - t1007;
t625 = t896 * t688 - t892 * t716;
t686 = -t887 * t791 - t1005;
t942 = t625 * t893 + t686 * t897;
t707 = t817 * t1015 - t887 * t778;
t667 = t896 * t707 - t975;
t706 = -t817 * t1016 - t889 * t778;
t941 = t667 * t893 + t706 * t897;
t709 = -t819 * t1016 - t889 * t988;
t668 = t896 * t709 + t975;
t708 = -t819 * t1015 + t887 * t988;
t940 = t668 * t893 + t708 * t897;
t600 = -t896 * t690 + t892 * t691;
t729 = (-t817 * t889 + t819 * t887) * t844;
t696 = t896 * t729 + t1000;
t728 = (t817 * t887 + t819 * t889) * t844;
t939 = t696 * t893 + t728 * t897;
t761 = (-qJD(3) + t872) * t846 - t965;
t699 = t896 * t761 - t892 * t763;
t806 = -t843 + t1030;
t938 = t699 * t893 + t806 * t897;
t765 = t829 - t798;
t700 = -t760 * t896 - t892 * t765;
t786 = t1030 + t843;
t937 = t700 * t893 + t786 * t897;
t801 = -t1030 - t1029;
t731 = t896 * t801 - t1036;
t936 = t731 * t893 + t761 * t897;
t808 = -t843 - t1029;
t735 = -t892 * t808 + t993;
t935 = t735 * t893 - t763 * t897;
t823 = -t843 + t1029;
t742 = -t892 * t823 + t1035;
t934 = t742 * t893 + t765 * t897;
t822 = t1030 - t1029;
t743 = t896 * t822 + t1001;
t933 = t743 * t893 + t760 * t897;
t785 = (t844 * t896 - t846 * t892) * t872;
t932 = t785 * t893 + t849 * t897;
t802 = t888 * t1023 + t966;
t803 = t897 * t850 + t902;
t931 = -t897 * t802 + t893 * t803;
t733 = t893 * t802 + t897 * t803;
t861 = t879 * t969;
t828 = -t861 + t960;
t930 = t825 * t897 + t828 * t893;
t826 = -t862 + t854;
t827 = t861 + t960;
t929 = -t826 * t897 + t827 * t893;
t928 = t837 * t897 - t997;
t856 = -t978 + t1028;
t927 = t856 * t897 + t998;
t926 = t858 * t893 + t991;
t857 = t977 - t1028;
t925 = t857 * t893 + t990;
t832 = t898 * t873 - t894 * t874;
t924 = qJD(1) * t879 - t890 * t899;
t755 = -t844 * t1012 + t1000;
t923 = t755 * t893 + t979;
t757 = t846 * t1013 + t896 * t798;
t922 = t757 * t893 - t979;
t446 = -pkin(4) * t585 + pkin(9) * t448;
t408 = -pkin(9) * t1020 - qJ(4) * t423 - t446 * t887;
t411 = -pkin(3) * t423 - pkin(4) * t447;
t418 = t424 * t892 - t585 * t896;
t396 = -pkin(8) * t418 + t408 * t896 - t411 * t892;
t399 = -pkin(2) * t418 + pkin(3) * t585 + pkin(9) * t1021 - qJ(4) * t424 - t446 * t889;
t407 = t419 * t897 + t423 * t893;
t920 = pkin(7) * t407 + t396 * t893 + t399 * t897;
t440 = -pkin(4) * t659 + pkin(9) * t560 + t448;
t444 = -pkin(9) * t558 - t447;
t412 = -qJ(4) * t501 - t440 * t887 + t444 * t889;
t469 = -pkin(3) * t501 - pkin(4) * t558;
t482 = t503 * t892 - t659 * t896;
t409 = -pkin(8) * t482 + t412 * t896 - t469 * t892;
t410 = -pkin(2) * t482 + pkin(3) * t659 - qJ(4) * t503 - t440 * t889 - t444 * t887;
t451 = t483 * t897 + t501 * t893;
t919 = pkin(7) * t451 + t409 * t893 + t410 * t897;
t508 = -pkin(4) * t614 + pkin(9) * t596 - t996;
t532 = -pkin(9) * t595 + t1004;
t452 = -qJ(4) * t546 - t508 * t887 + t532 * t889;
t455 = -pkin(3) * t546 - pkin(4) * t595 + t485;
t513 = t892 * t547 - t896 * t614;
t420 = -pkin(8) * t513 + t452 * t896 - t455 * t892;
t439 = -pkin(2) * t513 + pkin(3) * t614 - qJ(4) * t547 - t508 * t889 - t532 * t887;
t471 = t514 * t897 + t546 * t893;
t918 = pkin(7) * t471 + t420 * t893 + t439 * t897;
t509 = -pkin(4) * t1033 + pkin(9) * t621 + t1004;
t544 = -pkin(9) * t620 + t996;
t458 = -qJ(4) * t555 - t509 * t887 + t544 * t889;
t459 = -pkin(3) * t555 - pkin(4) * t620 + t486;
t518 = -t1033 * t896 + t892 * t556;
t425 = -pkin(8) * t518 + t458 * t896 - t459 * t892;
t441 = -pkin(2) * t518 + pkin(3) * t1033 - qJ(4) * t556 - t509 * t889 - t544 * t887;
t477 = t519 * t897 + t555 * t893;
t917 = pkin(7) * t477 + t425 * t893 + t441 * t897;
t496 = t512 * t892 - t644 * t896;
t445 = -pkin(8) * t496 + (-qJ(4) * t896 + t1025) * t511;
t454 = -pkin(2) * t496 + pkin(3) * t644 - qJ(4) * t512;
t462 = t497 * t897 + t511 * t893;
t916 = pkin(7) * t462 + t445 * t893 + t454 * t897;
t498 = -qJ(4) * t647 - t511;
t598 = t892 * t649 + t896 * t732;
t468 = -pkin(8) * t598 + t647 * t1025 + t498 * t896;
t472 = -pkin(2) * t598 - pkin(3) * t732 - qJ(4) * t649 - t512;
t561 = t897 * t599 + t893 * t647;
t915 = pkin(7) * t561 + t468 * t893 + t472 * t897;
t545 = -pkin(3) * t663 + t573;
t581 = -qJ(4) * t663 + t1008;
t602 = t892 * t664 + t896 * t717;
t478 = -pkin(8) * t602 - t545 * t892 + t581 * t896;
t520 = -pkin(2) * t602 - pkin(3) * t717 - qJ(4) * t664 + t1006;
t570 = t897 * t603 + t893 * t663;
t914 = pkin(7) * t570 + t478 * t893 + t520 * t897;
t548 = -pkin(3) * t674 + t574;
t584 = -qJ(4) * t674 + t1006;
t608 = t892 * t676 + t896 * t721;
t481 = -pkin(8) * t608 - t548 * t892 + t584 * t896;
t526 = -pkin(2) * t608 - pkin(3) * t721 - qJ(4) * t676 - t1008;
t575 = t897 * t609 + t893 * t674;
t913 = pkin(7) * t575 + t481 * t893 + t526 * t897;
t730 = t892 * t801 + t1035;
t635 = -pkin(2) * t730 + t690;
t675 = -pkin(8) * t730 + t1002;
t681 = t897 * t731 - t893 * t761;
t912 = pkin(7) * t681 + t635 * t897 + t675 * t893;
t734 = t896 * t808 + t1001;
t638 = -pkin(2) * t734 + t691;
t682 = -pkin(8) * t734 + t994;
t683 = t897 * t735 + t763 * t893;
t911 = pkin(7) * t683 + t638 * t897 + t682 * t893;
t782 = t893 * t826 + t897 * t827;
t910 = pkin(7) * t782 + t733;
t698 = -t760 * t892 + t896 * t765;
t576 = -pkin(8) * t698 - t600;
t660 = t897 * t700 - t893 * t786;
t907 = pkin(7) * t660 - t698 * t1026 + t576 * t893;
t589 = t897 * t601 + t893 * t751;
t905 = pkin(7) * t589 + t600 * t964;
t883 = t888 * t884;
t869 = t894 * qJDD(1) + t898 * t899;
t860 = t987 * t1009;
t859 = (t885 - t886) * t1009;
t855 = -pkin(6) * t869 + t898 * g(3);
t830 = t987 * t970;
t824 = (t981 + (qJD(2) + t879) * t984) * t888;
t821 = t897 * t854 - t885 * t970;
t820 = -t886 * t970 - t893 * t960;
t813 = t897 * t857 - t997;
t812 = -t893 * t856 + t991;
t800 = (t825 * t890 + t883 * t989) * t893;
t799 = (-t883 * t899 * t893 + (-t888 * t921 - t875) * t890) * t897;
t795 = t896 * t797;
t784 = (t844 * t892 + t846 * t896) * t872;
t783 = -t893 * t825 + t897 * t828;
t777 = t888 * t828 + t890 * t926;
t776 = -t888 * t827 + t890 * t925;
t775 = -t888 * t826 + t890 * t927;
t774 = -t890 * t828 + t888 * t926;
t759 = -t888 * t824 + t890 * t928;
t758 = t890 * t824 + t888 * t928;
t756 = -t846 * t1012 + t892 * t798;
t754 = -t844 * t1013 - t795;
t753 = t897 * t785 - t893 * t849;
t750 = -t888 * t859 + t890 * t930;
t749 = t888 * t860 + t890 * t929;
t748 = -t890 * t860 + t888 * t929;
t741 = t892 * t822 - t993;
t740 = t896 * t823 + t1036;
t727 = -t894 * t777 + t898 * t814;
t726 = t898 * t777 + t894 * t814;
t715 = t897 * t757 + t974;
t714 = t897 * t755 - t974;
t713 = -t894 * t759 + t898 * t804;
t712 = t898 * t759 + t894 * t804;
t711 = t888 * t831 + t890 * t931;
t710 = -t890 * t831 + t888 * t931;
t703 = -t888 * t784 + t890 * t932;
t702 = -t894 * t749 + t898 * t782;
t701 = t898 * t749 + t894 * t782;
t697 = t892 * t761 + t896 * t763;
t695 = t892 * t729 - t795;
t693 = t897 * t743 - t893 * t760;
t692 = t897 * t742 - t893 * t765;
t684 = -t999 + (-t774 * t888 - t777 * t890) * pkin(7);
t680 = -t992 + (-t758 * t888 - t759 * t890) * pkin(7);
t679 = -pkin(1) * t774 + t888 * t802 + t890 * t961;
t670 = t897 * t699 - t893 * t806;
t669 = -pkin(1) * t758 + t888 * t803 + t890 * t962;
t666 = t892 * t709 - t972;
t665 = t892 * t707 + t972;
t662 = -t888 * t756 + t890 * t922;
t661 = -t888 * t754 + t890 * t923;
t656 = t890 * pkin(7) * t733 - pkin(1) * t710;
t655 = -t894 * t711 + t898 * t733;
t654 = t898 * t711 + t894 * t733;
t650 = -pkin(1) * t748 + t890 * t910;
t643 = -pkin(2) * t763 + pkin(8) * t735 + t1002;
t641 = -t888 * t741 + t890 * t933;
t640 = -t888 * t740 + t890 * t934;
t639 = (-t710 * t888 - t711 * t890) * pkin(7);
t637 = pkin(2) * t761 + pkin(8) * t731 - t994;
t636 = (-t748 * t888 - t749 * t890) * pkin(7) - t931;
t634 = t897 * t696 - t893 * t728;
t633 = -t888 * t734 + t890 * t935;
t632 = t890 * t734 + t888 * t935;
t627 = -t888 * t730 + t890 * t936;
t626 = t890 * t730 + t888 * t936;
t623 = t892 * t688 + t896 * t716;
t622 = t892 * t687 + t896 * t720;
t606 = t892 * t648 + t896 * t780;
t605 = t897 * t668 - t893 * t708;
t604 = t897 * t667 - t893 * t706;
t597 = -t888 * t697 + t890 * t938;
t594 = -t888 * t698 + t890 * t937;
t593 = t890 * t698 + t888 * t937;
t590 = -pkin(2) * t751 + pkin(8) * t601;
t587 = t892 * t592 - t896 * t909;
t586 = -t888 * t695 + t890 * t939;
t583 = -t894 * t633 + t898 * t683;
t582 = t898 * t633 + t894 * t683;
t580 = t897 * t625 - t893 * t686;
t579 = t897 * t624 - t893 * t685;
t578 = -t894 * t627 + t898 * t681;
t577 = t898 * t627 + t894 * t681;
t572 = -t888 * t666 + t890 * t940;
t571 = -t888 * t665 + t890 * t941;
t569 = pkin(2) * t786 + pkin(8) * t700 + t601;
t568 = t897 * t607 - t893 * t646;
t563 = -t894 * t594 + t898 * t660;
t562 = t898 * t594 + t894 * t660;
t540 = -t888 * t600 + t890 * t947;
t539 = t890 * t600 + t888 * t947;
t538 = -t888 * t623 + t890 * t942;
t537 = -t888 * t622 + t890 * t943;
t534 = t892 * t554 - t973;
t533 = t892 * t553 + t973;
t531 = t897 * t588 - t893 * t591;
t530 = -t888 * t608 + t890 * t944;
t529 = t890 * t608 + t888 * t944;
t528 = -t888 * t602 + t890 * t946;
t527 = t890 * t602 + t888 * t946;
t523 = t892 * t567 + t896 * t615;
t522 = t892 * t566 + t896 * t619;
t521 = -t888 * t606 + t890 * t945;
t517 = -t888 * t598 + t890 * t948;
t516 = t890 * t598 + t888 * t948;
t515 = -t893 * t638 + t897 * t682 + (-t632 * t888 - t633 * t890) * pkin(7);
t510 = -t893 * t635 + t897 * t675 + (-t626 * t888 - t627 * t890) * pkin(7);
t507 = -pkin(1) * t632 - t888 * t643 + t890 * t911;
t506 = -t894 * t540 + t898 * t589;
t505 = t898 * t540 + t894 * t589;
t504 = -pkin(1) * t626 - t888 * t637 + t890 * t912;
t499 = -t888 * t587 + t890 * t949;
t495 = -t530 * t894 + t575 * t898;
t494 = t530 * t898 + t575 * t894;
t492 = t502 * t892 + t704 * t896;
t491 = t698 * t1027 + t897 * t576 + (-t593 * t888 - t594 * t890) * pkin(7);
t490 = t536 * t897 - t552 * t893;
t489 = t535 * t897 - t551 * t893;
t488 = -t528 * t894 + t570 * t898;
t487 = t528 * t898 + t570 * t894;
t480 = t525 * t897 - t565 * t893;
t479 = t524 * t897 - t564 * t893;
t476 = -t517 * t894 + t561 * t898;
t475 = t517 * t898 + t561 * t894;
t474 = -pkin(2) * t674 + pkin(8) * t609 + t548 * t896 + t584 * t892;
t473 = -pkin(2) * t663 + pkin(8) * t603 + t545 * t896 + t581 * t892;
t470 = -pkin(1) * t593 - t888 * t569 + t890 * t907;
t467 = pkin(8) * t599 + t892 * t498 + t647 * t971;
t466 = -t888 * t534 + t890 * t950;
t465 = -t888 * t533 + t890 * t951;
t464 = (-pkin(8) * t897 + t1027) * t600 + (-t539 * t888 - t540 * t890) * pkin(7);
t463 = -pkin(1) * t539 - t888 * t590 + t890 * t905;
t461 = -t888 * t523 + t890 * t952;
t460 = -t888 * t522 + t890 * t953;
t457 = -t888 * t518 + t890 * t954;
t456 = t890 * t518 + t888 * t954;
t453 = t493 * t897 - t500 * t893;
t450 = -t888 * t513 + t890 * t955;
t449 = t890 * t513 + t888 * t955;
t443 = -t888 * t496 + t890 * t956;
t442 = t890 * t496 + t888 * t956;
t438 = t897 * t481 - t893 * t526 + (-t529 * t888 - t530 * t890) * pkin(7);
t437 = -t888 * t492 + t890 * t957;
t436 = -t457 * t894 + t477 * t898;
t435 = t457 * t898 + t477 * t894;
t434 = t897 * t478 - t893 * t520 + (-t527 * t888 - t528 * t890) * pkin(7);
t433 = -t888 * t482 + t890 * t958;
t432 = t890 * t482 + t888 * t958;
t431 = pkin(8) * t497 + (-qJ(4) * t892 + t971) * t511;
t430 = -t450 * t894 + t471 * t898;
t429 = t450 * t898 + t471 * t894;
t428 = -pkin(1) * t529 - t888 * t474 + t890 * t913;
t427 = -pkin(1) * t527 - t888 * t473 + t890 * t914;
t426 = t897 * t468 - t893 * t472 + (-t516 * t888 - t517 * t890) * pkin(7);
t422 = -t443 * t894 + t462 * t898;
t421 = t443 * t898 + t462 * t894;
t417 = -pkin(2) * t555 + pkin(8) * t519 + t458 * t892 + t459 * t896;
t416 = -t433 * t894 + t451 * t898;
t415 = t433 * t898 + t451 * t894;
t414 = -pkin(2) * t546 + pkin(8) * t514 + t452 * t892 + t455 * t896;
t413 = -pkin(1) * t516 - t888 * t467 + t890 * t915;
t406 = -pkin(2) * t501 + pkin(8) * t483 + t412 * t892 + t469 * t896;
t405 = t897 * t445 - t893 * t454 + (-t442 * t888 - t443 * t890) * pkin(7);
t404 = t897 * t425 - t893 * t441 + (-t456 * t888 - t457 * t890) * pkin(7);
t403 = t897 * t420 - t893 * t439 + (-t449 * t888 - t450 * t890) * pkin(7);
t402 = -pkin(1) * t442 - t888 * t431 + t890 * t916;
t401 = -t888 * t418 + t890 * t959;
t400 = t890 * t418 + t888 * t959;
t398 = -pkin(1) * t456 - t888 * t417 + t890 * t917;
t397 = -pkin(1) * t449 - t888 * t414 + t890 * t918;
t395 = t897 * t409 - t893 * t410 + (-t432 * t888 - t433 * t890) * pkin(7);
t394 = -t401 * t894 + t407 * t898;
t393 = t401 * t898 + t407 * t894;
t392 = -pkin(2) * t423 + pkin(8) * t419 + t408 * t892 + t411 * t896;
t391 = -pkin(1) * t432 - t888 * t406 + t890 * t919;
t390 = t897 * t396 - t893 * t399 + (-t400 * t888 - t401 * t890) * pkin(7);
t389 = -pkin(1) * t400 - t888 * t392 + t890 * t920;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t869, -t870, 0, t833, 0, 0, 0, 0, 0, 0, t727, t713, t702, t655, 0, 0, 0, 0, 0, 0, t578, t583, t563, t506, 0, 0, 0, 0, 0, 0, t488, t495, t476, t422, 0, 0, 0, 0, 0, 0, t430, t436, t416, t394; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t870, -t869, 0, t832, 0, 0, 0, 0, 0, 0, t726, t712, t701, t654, 0, 0, 0, 0, 0, 0, t577, t582, t562, t505, 0, 0, 0, 0, 0, 0, t487, t494, t475, t421, 0, 0, 0, 0, 0, 0, t429, t435, t415, t393; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t774, t758, t748, t710, 0, 0, 0, 0, 0, 0, t626, t632, t593, t539, 0, 0, 0, 0, 0, 0, t527, t529, t516, t442, 0, 0, 0, 0, 0, 0, t449, t456, t432, t400; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t870, 0, -t869, 0, t963, -t855, -t832, -pkin(6) * t832, -t800 * t894 + t821 * t898, -t750 * t894 + t783 * t898, -t775 * t894 + t812 * t898, -t799 * t894 + t820 * t898, -t776 * t894 + t813 * t898, t1011 * t894 + t830 * t898, -pkin(6) * t726 - t679 * t894 + t684 * t898, -pkin(6) * t712 - t669 * t894 + t680 * t898, -pkin(6) * t701 + t636 * t898 - t650 * t894, -pkin(6) * t654 + t639 * t898 - t656 * t894, -t662 * t894 + t715 * t898, -t597 * t894 + t670 * t898, -t640 * t894 + t692 * t898, -t661 * t894 + t714 * t898, -t641 * t894 + t693 * t898, -t703 * t894 + t753 * t898, -pkin(6) * t577 - t504 * t894 + t510 * t898, -pkin(6) * t582 - t507 * t894 + t515 * t898, -pkin(6) * t562 - t470 * t894 + t491 * t898, -pkin(6) * t505 - t463 * t894 + t464 * t898, -t572 * t894 + t605 * t898, -t521 * t894 + t568 * t898, -t537 * t894 + t579 * t898, -t571 * t894 + t604 * t898, -t538 * t894 + t580 * t898, -t586 * t894 + t634 * t898, -pkin(6) * t487 - t427 * t894 + t434 * t898, -pkin(6) * t494 - t428 * t894 + t438 * t898, -pkin(6) * t475 - t413 * t894 + t426 * t898, -pkin(6) * t421 - t402 * t894 + t405 * t898, -t466 * t894 + t490 * t898, -t437 * t894 + t453 * t898, -t460 * t894 + t479 * t898, -t465 * t894 + t489 * t898, -t461 * t894 + t480 * t898, -t499 * t894 + t531 * t898, -pkin(6) * t429 - t397 * t894 + t403 * t898, -pkin(6) * t435 - t398 * t894 + t404 * t898, -pkin(6) * t415 - t391 * t894 + t395 * t898, -pkin(6) * t393 - t389 * t894 + t390 * t898; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t869, 0, t870, 0, t855, t963, t833, pkin(6) * t833, t800 * t898 + t821 * t894, t750 * t898 + t783 * t894, t775 * t898 + t812 * t894, t799 * t898 + t820 * t894, t776 * t898 + t813 * t894, -t1011 * t898 + t830 * t894, pkin(6) * t727 + t679 * t898 + t684 * t894, pkin(6) * t713 + t669 * t898 + t680 * t894, pkin(6) * t702 + t636 * t894 + t650 * t898, pkin(6) * t655 + t639 * t894 + t656 * t898, t662 * t898 + t715 * t894, t597 * t898 + t670 * t894, t640 * t898 + t692 * t894, t661 * t898 + t714 * t894, t641 * t898 + t693 * t894, t703 * t898 + t753 * t894, pkin(6) * t578 + t504 * t898 + t510 * t894, pkin(6) * t583 + t507 * t898 + t515 * t894, pkin(6) * t563 + t470 * t898 + t491 * t894, pkin(6) * t506 + t463 * t898 + t464 * t894, t572 * t898 + t605 * t894, t521 * t898 + t568 * t894, t537 * t898 + t579 * t894, t571 * t898 + t604 * t894, t538 * t898 + t580 * t894, t586 * t898 + t634 * t894, pkin(6) * t488 + t427 * t898 + t434 * t894, pkin(6) * t495 + t428 * t898 + t438 * t894, pkin(6) * t476 + t413 * t898 + t426 * t894, pkin(6) * t422 + t402 * t898 + t405 * t894, t466 * t898 + t490 * t894, t437 * t898 + t453 * t894, t460 * t898 + t479 * t894, t465 * t898 + t489 * t894, t461 * t898 + t480 * t894, t499 * t898 + t531 * t894, pkin(6) * t430 + t397 * t898 + t403 * t894, pkin(6) * t436 + t398 * t898 + t404 * t894, pkin(6) * t416 + t391 * t898 + t395 * t894, pkin(6) * t394 + t389 * t898 + t390 * t894; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t873, t874, 0, 0, (t884 * t897 * t924 + t854 * t888) * t893, t890 * t859 + t888 * t930, t890 * t826 + t888 * t927, (-t1010 * t924 + t888 * t960) * t897, t890 * t827 + t888 * t925, t890 * t878, pkin(1) * t777 - t890 * t802 + t888 * t961, pkin(1) * t759 - t890 * t803 + t888 * t962, pkin(1) * t749 + t888 * t910, pkin(1) * t711 + t733 * t1024, t890 * t756 + t888 * t922, t890 * t697 + t888 * t938, t890 * t740 + t888 * t934, t890 * t754 + t888 * t923, t890 * t741 + t888 * t933, t890 * t784 + t888 * t932, pkin(1) * t627 + t890 * t637 + t888 * t912, pkin(1) * t633 + t890 * t643 + t888 * t911, pkin(1) * t594 + t890 * t569 + t888 * t907, pkin(1) * t540 + t890 * t590 + t888 * t905, t890 * t666 + t888 * t940, t890 * t606 + t888 * t945, t890 * t622 + t888 * t943, t890 * t665 + t888 * t941, t890 * t623 + t888 * t942, t890 * t695 + t888 * t939, pkin(1) * t528 + t890 * t473 + t888 * t914, pkin(1) * t530 + t890 * t474 + t888 * t913, pkin(1) * t517 + t890 * t467 + t888 * t915, pkin(1) * t443 + t890 * t431 + t888 * t916, t890 * t534 + t888 * t950, t890 * t492 + t888 * t957, t890 * t522 + t888 * t953, t890 * t533 + t888 * t951, t890 * t523 + t888 * t952, t890 * t587 + t888 * t949, pkin(1) * t450 + t890 * t414 + t888 * t918, pkin(1) * t457 + t890 * t417 + t888 * t917, pkin(1) * t433 + t890 * t406 + t888 * t919, pkin(1) * t401 + t890 * t392 + t888 * t920;];
tauB_reg = t1;
