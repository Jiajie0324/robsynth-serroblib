% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S5RRRPR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d5,theta4]';
% 
% Output:
% tauJ_reg [5x(5*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:42
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S5RRRPR12_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR12_invdynJ_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR12_invdynJ_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR12_invdynJ_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR12_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5RRRPR12_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:40:42
% EndTime: 2019-12-31 21:41:02
% DurationCPUTime: 9.60s
% Computational Cost: add. (55890->520), mult. (123206->783), div. (0->0), fcn. (97630->12), ass. (0->333)
t279 = sin(pkin(10));
t282 = cos(pkin(5));
t337 = qJD(1) * t282;
t274 = qJD(2) + t337;
t284 = sin(qJ(3));
t287 = cos(qJ(3));
t280 = sin(pkin(5));
t285 = sin(qJ(2));
t336 = qJD(1) * t285;
t320 = t280 * t336;
t251 = t274 * t284 + t287 * t320;
t288 = cos(qJ(2));
t335 = qJD(1) * t288;
t319 = t280 * t335;
t267 = -qJD(3) + t319;
t281 = cos(pkin(10));
t232 = t251 * t279 + t281 * t267;
t233 = t251 * t281 - t267 * t279;
t205 = t233 * t232;
t329 = qJDD(1) * t280;
t257 = qJD(2) * t319 + t285 * t329;
t273 = qJDD(1) * t282 + qJDD(2);
t313 = t257 * t284 - t287 * t273;
t218 = qJD(3) * t251 + t313;
t380 = -t205 + t218;
t388 = t279 * t380;
t387 = t281 * t380;
t283 = sin(qJ(5));
t286 = cos(qJ(5));
t198 = t286 * t232 + t233 * t283;
t200 = -t232 * t283 + t233 * t286;
t153 = t200 * t198;
t217 = qJDD(5) + t218;
t382 = -t153 + t217;
t386 = t283 * t382;
t385 = t286 * t382;
t328 = qJDD(1) * t288;
t300 = (qJD(2) * t336 - t328) * t280;
t295 = qJDD(3) + t300;
t249 = -t287 * t274 + t284 * t320;
t347 = t251 * t249;
t293 = t295 - t347;
t384 = t284 * t293;
t383 = t287 * t293;
t308 = -t257 * t287 - t273 * t284;
t219 = -qJD(3) * t249 - t308;
t203 = t281 * t219 + t279 * t295;
t315 = t219 * t279 - t281 * t295;
t127 = -t198 * qJD(5) + t286 * t203 - t283 * t315;
t244 = qJD(5) + t249;
t177 = t244 * t198;
t381 = -t177 + t127;
t214 = t249 * t232;
t163 = -t214 - t203;
t379 = -t214 + t203;
t239 = t249 * t267;
t192 = t219 + t239;
t372 = sin(qJ(1));
t373 = cos(qJ(1));
t305 = t373 * g(1) + t372 * g(2);
t374 = qJD(1) ^ 2;
t253 = -t374 * pkin(1) + pkin(7) * t329 - t305;
t304 = t372 * g(1) - t373 * g(2);
t333 = t280 * t374;
t292 = qJDD(1) * pkin(1) + pkin(7) * t333 + t304;
t291 = t282 * t292;
t314 = t285 * t253 - t288 * t291;
t343 = t280 * t288;
t221 = g(3) * t343 + t314;
t344 = t280 * t285;
t290 = -g(3) * t344 + t285 * t291;
t222 = t288 * t253 + t290;
t378 = t285 * t221 + t288 * t222;
t316 = t203 * t283 + t286 * t315;
t101 = (qJD(5) - t244) * t200 + t316;
t189 = (qJD(3) + t267) * t251 + t313;
t196 = t198 ^ 2;
t197 = t200 ^ 2;
t377 = t232 ^ 2;
t231 = t233 ^ 2;
t242 = t244 ^ 2;
t376 = t249 ^ 2;
t248 = t251 ^ 2;
t375 = t267 ^ 2;
t272 = t274 ^ 2;
t276 = t280 ^ 2;
t371 = pkin(3) * t284;
t370 = t280 * pkin(7);
t369 = t282 * g(3);
t368 = t288 * pkin(2);
t311 = -t285 * pkin(8) - t368;
t338 = qJD(1) * t280;
t256 = t311 * t338;
t186 = t273 * pkin(8) - t272 * pkin(2) + (t256 * t338 + t253) * t288 + t290;
t289 = -t257 * pkin(8) - t369 + ((-pkin(1) - t368) * qJDD(1) + (-pkin(7) * t338 - t288 * t274 * pkin(8) + (qJD(2) + t274) * t285 * pkin(2)) * qJD(1) - t304) * t280;
t146 = t287 * t186 + t284 * t289;
t223 = pkin(3) * t249 - qJ(4) * t251;
t118 = -t375 * pkin(3) + qJ(4) * t295 - t249 * t223 + t146;
t185 = -t273 * pkin(2) - t272 * pkin(8) + (g(3) * t288 + t256 * t336) * t280 + t314;
t125 = -t192 * qJ(4) + (-t251 * t267 + t218) * pkin(3) + t185;
t76 = 0.2e1 * qJD(4) * t233 + t118 * t279 - t281 * t125;
t53 = pkin(4) * t380 + t163 * pkin(9) - t76;
t208 = pkin(4) * t249 - pkin(9) * t233;
t77 = -0.2e1 * qJD(4) * t232 + t281 * t118 + t279 * t125;
t59 = -t377 * pkin(4) - pkin(9) * t315 - t249 * t208 + t77;
t29 = t283 * t59 - t286 * t53;
t30 = t283 * t53 + t286 * t59;
t16 = t283 * t30 - t286 * t29;
t367 = t16 * t279;
t366 = t16 * t281;
t145 = t186 * t284 - t287 * t289;
t117 = -t295 * pkin(3) - t375 * qJ(4) + t223 * t251 + qJDD(4) + t145;
t80 = pkin(4) * t315 - t377 * pkin(9) + t208 * t233 + t117;
t365 = t283 * t80;
t364 = t286 * t80;
t363 = t117 * t279;
t362 = t117 * t281;
t134 = t153 + t217;
t361 = t134 * t283;
t360 = t134 * t286;
t165 = t205 + t218;
t359 = t165 * t279;
t358 = t165 * t281;
t357 = t185 * t284;
t356 = t185 * t287;
t209 = -t295 - t347;
t355 = t209 * t284;
t354 = t209 * t287;
t353 = t218 * t284;
t352 = t233 * t249;
t351 = t244 * t283;
t350 = t244 * t286;
t349 = t249 * t279;
t348 = t249 * t281;
t346 = t267 * t284;
t345 = t267 * t287;
t334 = t276 * t374;
t266 = t288 * t285 * t334;
t254 = t266 + t273;
t341 = t285 * t254;
t255 = -t266 + t273;
t339 = t288 * t255;
t332 = qJD(3) - t267;
t327 = t284 * t153;
t326 = t287 * t153;
t325 = t284 * t205;
t324 = t287 * t205;
t323 = t288 * t347;
t261 = t274 * t319;
t322 = t261 + t257;
t321 = -pkin(3) * t287 - pkin(2);
t277 = t285 ^ 2;
t318 = t277 * t334;
t278 = t288 ^ 2;
t317 = t278 * t334;
t42 = t279 * t76 + t281 * t77;
t17 = t283 * t29 + t286 * t30;
t90 = t145 * t284 + t287 * t146;
t312 = -t274 + t337;
t310 = -pkin(3) * t117 + qJ(4) * t42;
t41 = t279 * t77 - t281 * t76;
t309 = t145 * t287 - t146 * t284;
t307 = -pkin(1) + t311;
t159 = t315 - t352;
t181 = -t376 - t377;
t130 = t181 * t281 - t388;
t158 = t315 + t352;
t303 = -pkin(3) * t158 + qJ(4) * t130 - t362;
t202 = -t231 - t376;
t137 = -t202 * t279 - t358;
t302 = -pkin(3) * t379 + qJ(4) * t137 + t363;
t122 = -t159 * t281 - t163 * t279;
t172 = -t231 - t377;
t301 = -pkin(3) * t172 + qJ(4) * t122 + t42;
t100 = (qJD(5) + t244) * t200 + t316;
t147 = -t242 - t196;
t86 = t147 * t286 - t386;
t39 = -pkin(4) * t100 + pkin(9) * t86 - t364;
t85 = t147 * t283 + t385;
t49 = -pkin(9) * t85 + t365;
t57 = -t279 * t85 + t281 * t86;
t299 = -pkin(3) * t100 + qJ(4) * t57 + t279 * t49 + t281 * t39;
t167 = -t197 - t242;
t107 = -t167 * t283 - t360;
t40 = -pkin(4) * t381 + pkin(9) * t107 + t365;
t106 = t167 * t286 - t361;
t54 = -pkin(9) * t106 + t364;
t65 = -t106 * t279 + t107 * t281;
t298 = -pkin(3) * t381 + qJ(4) * t65 + t279 * t54 + t281 * t40;
t128 = -t196 - t197;
t104 = t177 + t127;
t69 = -t101 * t286 + t104 * t283;
t13 = -pkin(4) * t128 + pkin(9) * t69 + t17;
t67 = -t101 * t283 - t104 * t286;
t14 = -pkin(9) * t67 - t16;
t38 = -t279 * t67 + t281 * t69;
t297 = -pkin(3) * t128 + qJ(4) * t38 + t13 * t281 + t14 * t279;
t11 = t17 * t281 - t367;
t15 = -pkin(4) * t80 + pkin(9) * t17;
t294 = -pkin(3) * t80 - pkin(9) * t367 + qJ(4) * t11 + t15 * t281;
t260 = t274 * t320;
t259 = (t277 - t278) * t334;
t258 = -t272 - t317;
t243 = -t318 - t272;
t240 = t280 * t292 + t369;
t238 = -t260 - t300;
t237 = t260 - t300;
t236 = -t261 + t257;
t235 = -t248 + t375;
t234 = t376 - t375;
t226 = -t248 - t375;
t224 = t248 - t376;
t220 = -t376 - t375;
t216 = t287 * t218;
t213 = -t231 + t376;
t212 = -t376 + t377;
t207 = t376 + t248;
t206 = (t249 * t284 + t251 * t287) * t267;
t204 = -t231 + t377;
t194 = t332 * t249 + t308;
t193 = t219 - t239;
t190 = -t332 * t251 - t313;
t188 = t219 * t284 - t251 * t345;
t187 = -t249 * t346 - t216;
t180 = t234 * t284 - t354;
t179 = t235 * t287 + t384;
t176 = -t197 + t242;
t175 = t196 - t242;
t174 = -t226 * t284 + t354;
t173 = t226 * t287 + t355;
t171 = t220 * t287 - t384;
t170 = t220 * t284 + t383;
t169 = (-t232 * t281 + t233 * t279) * t249;
t168 = (-t232 * t279 - t233 * t281) * t249;
t157 = t203 * t281 - t233 * t349;
t156 = t203 * t279 + t233 * t348;
t155 = t232 * t348 + t279 * t315;
t154 = -t232 * t349 + t281 * t315;
t152 = t197 - t196;
t151 = -t189 * t287 + t193 * t284;
t149 = t190 * t284 + t192 * t287;
t148 = t169 * t284 - t216;
t143 = t212 * t281 - t359;
t142 = -t213 * t279 + t387;
t141 = t212 * t279 + t358;
t140 = t213 * t281 + t388;
t139 = (-t198 * t286 + t200 * t283) * t244;
t138 = (-t198 * t283 - t200 * t286) * t244;
t136 = t202 * t281 - t359;
t132 = t157 * t284 - t324;
t131 = t155 * t284 + t324;
t129 = t181 * t279 + t387;
t126 = -qJD(5) * t200 - t316;
t121 = -t158 * t281 - t279 * t379;
t120 = -t159 * t279 + t163 * t281;
t119 = -t158 * t279 + t281 * t379;
t116 = pkin(2) * t194 + pkin(8) * t174 + t357;
t114 = pkin(2) * t190 + pkin(8) * t171 - t356;
t113 = t175 * t286 - t361;
t112 = -t176 * t283 + t385;
t111 = t175 * t283 + t360;
t110 = t176 * t286 + t386;
t109 = t143 * t284 + t159 * t287;
t108 = t142 * t284 + t163 * t287;
t99 = t127 * t286 - t200 * t351;
t98 = t127 * t283 + t200 * t350;
t97 = -t126 * t283 + t198 * t350;
t96 = t126 * t286 + t198 * t351;
t95 = t137 * t287 + t284 * t379;
t94 = t137 * t284 - t287 * t379;
t93 = t121 * t284 + t204 * t287;
t92 = t130 * t287 + t158 * t284;
t91 = t130 * t284 - t158 * t287;
t88 = t122 * t287 + t172 * t284;
t87 = t122 * t284 - t172 * t287;
t84 = -t138 * t279 + t139 * t281;
t83 = t138 * t281 + t139 * t279;
t82 = -pkin(2) * t185 + pkin(8) * t90;
t81 = -t217 * t287 + t284 * t84;
t79 = -qJ(4) * t136 + t362;
t78 = -qJ(4) * t129 + t363;
t74 = pkin(2) * t207 + pkin(8) * t151 + t90;
t73 = -t111 * t279 + t113 * t281;
t72 = -t110 * t279 + t112 * t281;
t71 = t111 * t281 + t113 * t279;
t70 = t110 * t281 + t112 * t279;
t68 = -t100 * t286 - t283 * t381;
t66 = -t100 * t283 + t286 * t381;
t64 = t106 * t281 + t107 * t279;
t63 = -t279 * t98 + t281 * t99;
t62 = -t279 * t96 + t281 * t97;
t61 = t279 * t99 + t281 * t98;
t60 = t279 * t97 + t281 * t96;
t58 = -pkin(3) * t136 + t77;
t56 = t279 * t86 + t281 * t85;
t55 = -pkin(3) * t129 + t76;
t51 = t284 * t63 - t326;
t50 = t284 * t62 + t326;
t48 = t101 * t287 + t284 * t73;
t47 = -t104 * t287 + t284 * t72;
t46 = t284 * t381 + t287 * t65;
t45 = t284 * t65 - t287 * t381;
t44 = t100 * t284 + t287 * t57;
t43 = -t100 * t287 + t284 * t57;
t37 = -t279 * t66 + t281 * t68;
t36 = t279 * t69 + t281 * t67;
t35 = t279 * t68 + t281 * t66;
t34 = -qJ(4) * t120 - t41;
t33 = t117 * t284 + t287 * t42;
t32 = -t117 * t287 + t284 * t42;
t31 = -t152 * t287 + t284 * t37;
t27 = t128 * t284 + t287 * t38;
t26 = -t128 * t287 + t284 * t38;
t25 = -pkin(2) * t136 + pkin(8) * t95 + t284 * t79 + t287 * t58;
t24 = -pkin(2) * t129 + pkin(8) * t92 + t284 * t78 + t287 * t55;
t23 = -pkin(3) * t36 - pkin(4) * t67;
t22 = pkin(8) * t88 + t321 * t120 + t284 * t34;
t21 = -pkin(3) * t64 - pkin(4) * t106 + t30;
t20 = -qJ(4) * t64 - t279 * t40 + t281 * t54;
t19 = -pkin(3) * t56 - pkin(4) * t85 + t29;
t18 = -qJ(4) * t56 - t279 * t39 + t281 * t49;
t12 = pkin(8) * t33 + (-qJ(4) * t284 + t321) * t41;
t10 = t17 * t279 + t366;
t9 = t11 * t287 + t284 * t80;
t8 = t11 * t284 - t287 * t80;
t7 = -pkin(2) * t64 + pkin(8) * t46 + t20 * t284 + t21 * t287;
t6 = -pkin(2) * t56 + pkin(8) * t44 + t18 * t284 + t19 * t287;
t5 = -qJ(4) * t36 - t13 * t279 + t14 * t281;
t4 = -pkin(3) * t10 - pkin(4) * t16;
t3 = -pkin(9) * t366 - qJ(4) * t10 - t15 * t279;
t2 = -pkin(2) * t36 + pkin(8) * t27 + t23 * t287 + t284 * t5;
t1 = -pkin(2) * t10 + pkin(8) * t9 + t284 * t3 + t287 * t4;
t28 = [0, 0, 0, 0, 0, qJDD(1), t304, t305, 0, 0, (-t276 * t312 * t335 + t257 * t280) * t285, t282 * t259 + (t285 * t238 + t288 * t322) * t280, t282 * t236 + (t341 + t288 * (t272 - t318)) * t280, (t328 + (-qJD(2) + t312) * t336) * t276 * t288, t282 * t237 + (t285 * (-t272 + t317) + t339) * t280, t282 * t273, (-t221 + pkin(1) * (t254 * t288 + t258 * t285)) * t282 + (t288 * t240 + pkin(1) * t238 + pkin(7) * (t258 * t288 - t341)) * t280, -t240 * t344 - t282 * t222 + pkin(1) * (-t280 * t322 + (t288 * t243 - t285 * t255) * t282) + (-t285 * t243 - t339) * t370, pkin(1) * ((-t288 * t236 + t285 * t237) * t282 - (-t277 - t278) * t276 * t333) + (t285 * t236 + t237 * t288) * t370 + t378 * t280, pkin(1) * (t280 * t240 + (-t221 * t288 + t222 * t285) * t282) + t378 * t370, t282 * t188 + (t285 * (t219 * t287 + t251 * t346) - t323) * t280, t282 * t149 + (t285 * (t190 * t287 - t192 * t284) - t288 * t224) * t280, t282 * t179 + (t285 * (-t235 * t284 + t383) - t288 * t193) * t280, t282 * t187 + (t285 * (-t249 * t345 + t353) + t323) * t280, t282 * t180 + (t285 * (t234 * t287 + t355) + t288 * t189) * t280, -t295 * t343 + t282 * t206 + (t249 * t287 - t251 * t284) * t267 * t344, (t114 + pkin(1) * (t171 * t285 + t190 * t288)) * t282 + (t285 * (-pkin(8) * t170 + t357) + t288 * (-pkin(2) * t170 + t145) - pkin(1) * t170 + pkin(7) * (t171 * t288 - t285 * t190)) * t280, (t116 + pkin(1) * (t174 * t285 + t194 * t288)) * t282 + (t285 * (-pkin(8) * t173 + t356) + t288 * (-pkin(2) * t173 + t146) - pkin(1) * t173 + pkin(7) * (t174 * t288 - t285 * t194)) * t280, (t74 + pkin(1) * (t151 * t285 + t207 * t288)) * t282 + (t285 * t309 + pkin(7) * (t151 * t288 - t285 * t207) + t307 * (-t189 * t284 - t193 * t287)) * t280, (t82 + pkin(1) * (-t185 * t288 + t285 * t90)) * t282 + (pkin(7) * (t285 * t185 + t288 * t90) - t307 * t309) * t280, t282 * t132 + (t285 * (t157 * t287 + t325) - t288 * t156) * t280, t282 * t93 + (t285 * (t121 * t287 - t204 * t284) - t288 * t119) * t280, t282 * t108 + (t285 * (t142 * t287 - t163 * t284) - t288 * t140) * t280, t282 * t131 + (t285 * (t155 * t287 - t325) + t288 * t154) * t280, t282 * t109 + (t285 * (t143 * t287 - t159 * t284) - t288 * t141) * t280, t282 * t148 + (t285 * (t169 * t287 + t353) - t288 * t168) * t280, (t24 + pkin(1) * (-t129 * t288 + t285 * t92)) * t282 + (t285 * (-pkin(8) * t91 - t284 * t55 + t287 * t78) + t288 * (-pkin(2) * t91 - t303) - pkin(1) * t91 + pkin(7) * (t285 * t129 + t288 * t92)) * t280, (t25 + pkin(1) * (-t136 * t288 + t285 * t95)) * t282 + (t285 * (-pkin(8) * t94 - t284 * t58 + t287 * t79) + t288 * (-pkin(2) * t94 - t302) - pkin(1) * t94 + pkin(7) * (t285 * t136 + t288 * t95)) * t280, (t22 + pkin(1) * (-t120 * t288 + t285 * t88)) * t282 + (t285 * (-pkin(8) * t87 + t120 * t371 + t287 * t34) + t288 * (-pkin(2) * t87 - t301) - pkin(1) * t87 + pkin(7) * (t285 * t120 + t288 * t88)) * t280, (t12 + pkin(1) * (t285 * t33 - t288 * t41)) * t282 + (t285 * (-pkin(8) * t32 + (-qJ(4) * t287 + t371) * t41) + t288 * (-pkin(2) * t32 - t310) - pkin(1) * t32 + pkin(7) * (t285 * t41 + t288 * t33)) * t280, t282 * t51 + (t285 * (t287 * t63 + t327) - t288 * t61) * t280, t282 * t31 + (t285 * (t152 * t284 + t287 * t37) - t288 * t35) * t280, t282 * t47 + (t285 * (t104 * t284 + t287 * t72) - t288 * t70) * t280, t282 * t50 + (t285 * (t287 * t62 - t327) - t288 * t60) * t280, t282 * t48 + (t285 * (-t101 * t284 + t287 * t73) - t288 * t71) * t280, t282 * t81 + (t285 * (t217 * t284 + t287 * t84) - t288 * t83) * t280, (t6 + pkin(1) * (t285 * t44 - t288 * t56)) * t282 + (t285 * (-pkin(8) * t43 + t18 * t287 - t19 * t284) + t288 * (-pkin(2) * t43 - t299) - pkin(1) * t43 + pkin(7) * (t285 * t56 + t288 * t44)) * t280, (t7 + pkin(1) * (t285 * t46 - t288 * t64)) * t282 + (t285 * (-pkin(8) * t45 + t20 * t287 - t21 * t284) + t288 * (-pkin(2) * t45 - t298) - pkin(1) * t45 + pkin(7) * (t285 * t64 + t288 * t46)) * t280, (t2 + pkin(1) * (t27 * t285 - t288 * t36)) * t282 + (t285 * (-pkin(8) * t26 - t23 * t284 + t287 * t5) + t288 * (-pkin(2) * t26 - t297) - pkin(1) * t26 + pkin(7) * (t27 * t288 + t285 * t36)) * t280, (t1 + pkin(1) * (-t10 * t288 + t285 * t9)) * t282 + (t285 * (-pkin(8) * t8 - t284 * t4 + t287 * t3) + t288 * (-pkin(2) * t8 - t294) - pkin(1) * t8 + pkin(7) * (t285 * t10 + t288 * t9)) * t280; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t266, t259, t236, t266, t237, t273, -t221, -t222, 0, 0, t188, t149, t179, t187, t180, t206, t114, t116, t74, t82, t132, t93, t108, t131, t109, t148, t24, t25, t22, t12, t51, t31, t47, t50, t48, t81, t6, t7, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t347, t224, t193, -t347, -t189, t295, -t145, -t146, 0, 0, t156, t119, t140, -t154, t141, t168, t303, t302, t301, t310, t61, t35, t70, t60, t71, t83, t299, t298, t297, t294; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t158, t379, t172, t117, 0, 0, 0, 0, 0, 0, t100, t381, t128, t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t153, t152, t104, -t153, -t101, t217, -t29, -t30, 0, 0;];
tauJ_reg = t28;
