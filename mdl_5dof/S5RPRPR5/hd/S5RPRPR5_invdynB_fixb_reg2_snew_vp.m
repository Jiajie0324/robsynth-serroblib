% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:44
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRPR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR5_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR5_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR5_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:43:21
% EndTime: 2020-01-03 11:43:38
% DurationCPUTime: 16.19s
% Computational Cost: add. (66054->628), mult. (172332->978), div. (0->0), fcn. (121642->10), ass. (0->448)
t686 = sin(pkin(8));
t693 = cos(qJ(3));
t690 = sin(qJ(3));
t730 = qJD(1) * t686;
t713 = t690 * t730;
t632 = t693 * t686 * qJDD(1) - qJD(3) * t713;
t685 = sin(pkin(9));
t687 = cos(pkin(9));
t725 = qJDD(1) * t690;
t729 = qJD(1) * t693;
t702 = qJD(3) * t729 + t725;
t698 = t702 * t686;
t578 = t687 * t632 - t685 * t698;
t623 = (-t685 * t693 - t687 * t690) * t730;
t688 = cos(pkin(8));
t728 = t688 * qJD(1);
t668 = -qJD(3) + t728;
t761 = t623 * t668;
t542 = -t578 - t761;
t777 = t578 - t761;
t691 = sin(qJ(1));
t694 = cos(qJ(1));
t658 = t691 * g(2) - t694 * g(3);
t695 = qJD(1) ^ 2;
t640 = -t695 * pkin(1) + qJDD(1) * qJ(2) - t658;
t767 = 2 * qJD(2);
t776 = qJD(1) * t767 + t640;
t724 = t688 * qJDD(1);
t667 = -qJDD(3) + t724;
t712 = t686 * t729;
t625 = -t685 * t713 + t687 * t712;
t760 = t625 * t623;
t701 = -t667 + t760;
t775 = t685 * t701;
t774 = t687 * t701;
t689 = sin(qJ(5));
t657 = -qJDD(5) + t667;
t692 = cos(qJ(5));
t567 = -t692 * t623 + t689 * t625;
t569 = t689 * t623 + t692 * t625;
t762 = t569 * t567;
t699 = -t657 - t762;
t773 = t689 * t699;
t772 = t692 * t699;
t706 = t668 * t713;
t597 = t632 + t706;
t586 = t693 * t597;
t662 = -qJD(5) + t668;
t556 = t567 * t662;
t708 = t685 * t632 + t687 * t698;
t700 = t567 * qJD(5) - t692 * t578 + t689 * t708;
t771 = t556 - t700;
t709 = t689 * t578 + t692 * t708;
t456 = (qJD(5) + t662) * t569 + t709;
t564 = t567 ^ 2;
t565 = t569 ^ 2;
t770 = t623 ^ 2;
t620 = t625 ^ 2;
t656 = t662 ^ 2;
t769 = t668 ^ 2;
t768 = t690 ^ 2;
t766 = 2 * qJD(4);
t765 = pkin(2) * t686;
t764 = pkin(2) * t688;
t763 = t688 * g(1);
t684 = qJDD(1) * pkin(1);
t759 = t662 * t689;
t758 = t662 * t692;
t757 = t668 * t625;
t756 = t668 * t685;
t755 = t668 * t687;
t680 = t686 ^ 2;
t754 = t680 * t695;
t602 = -t686 * g(1) + t776 * t688;
t705 = -pkin(6) * t686 - t764;
t645 = t705 * qJD(1);
t571 = t645 * t728 + t602;
t659 = t694 * g(2) + t691 * g(3);
t633 = -t695 * qJ(2) + qJDD(2) + t659 - t684;
t606 = qJDD(1) * t705 + t633;
t593 = t693 * t606;
t714 = t668 * t730;
t732 = t693 * t695;
t494 = -t667 * pkin(3) - t632 * qJ(4) + t593 + (-pkin(3) * t680 * t732 + qJ(4) * t714 - t571) * t690;
t528 = t693 * t571 + t690 * t606;
t629 = -t668 * pkin(3) - qJ(4) * t712;
t666 = t768 * t754;
t497 = -pkin(3) * t666 - qJ(4) * t698 + t668 * t629 + t528;
t427 = -t687 * t494 + t685 * t497 + t625 * t766;
t393 = t701 * pkin(4) + t542 * pkin(7) - t427;
t428 = t685 * t494 + t687 * t497 + t623 * t766;
t591 = -t668 * pkin(4) - t625 * pkin(7);
t405 = -t770 * pkin(4) - pkin(7) * t708 + t668 * t591 + t428;
t353 = -t692 * t393 + t689 * t405;
t354 = t689 * t393 + t692 * t405;
t322 = -t692 * t353 + t689 * t354;
t753 = t685 * t322;
t727 = t767 + t645;
t511 = t763 + qJDD(4) + pkin(3) * t698 - qJ(4) * t666 + (t640 + (t629 * t693 + t727) * qJD(1)) * t686;
t752 = t685 * t511;
t561 = t667 + t760;
t751 = t685 * t561;
t750 = t686 * t667;
t749 = t686 * t688;
t748 = t687 * t322;
t747 = t687 * t511;
t746 = t687 * t561;
t444 = pkin(4) * t708 - t770 * pkin(7) + t625 * t591 + t511;
t745 = t689 * t444;
t507 = t657 - t762;
t744 = t689 * t507;
t375 = -t687 * t427 + t685 * t428;
t743 = t690 * t375;
t570 = t763 + (t727 * qJD(1) + t640) * t686;
t742 = t690 * t570;
t715 = t690 * t732;
t655 = t680 * t715;
t630 = -t655 + t667;
t741 = t690 * t630;
t631 = -t655 - t667;
t740 = t690 * t631;
t739 = t691 * t633;
t738 = t692 * t444;
t737 = t692 * t507;
t736 = t693 * t375;
t735 = t693 * t570;
t734 = t693 * t630;
t733 = t693 * t631;
t731 = t694 * t633;
t723 = t691 * qJDD(1);
t722 = t694 * qJDD(1);
t683 = t693 ^ 2;
t720 = t683 * t754;
t719 = t686 * t762;
t718 = t686 * t760;
t717 = t688 * t762;
t716 = t688 * t760;
t703 = t694 * t695 + t723;
t711 = -pkin(5) * t703 + t694 * g(1);
t710 = -t633 + t684;
t323 = t689 * t353 + t692 * t354;
t376 = t685 * t427 + t687 * t428;
t527 = t690 * t571 - t593;
t601 = t776 * t686 + t763;
t550 = t686 * t601 + t688 * t602;
t613 = -t691 * t658 - t694 * t659;
t679 = t686 * t680;
t707 = t679 * t715;
t704 = t688 * t655;
t473 = -t693 * t527 + t690 * t528;
t474 = t690 * t527 + t693 * t528;
t549 = t688 * t601 - t686 * t602;
t614 = t694 * t658 - t691 * t659;
t654 = -t691 * t695 + t722;
t538 = t708 + t757;
t681 = t688 ^ 2;
t644 = (t680 + t681) * t688 * t695;
t610 = -t691 * t644 + t688 * t722;
t612 = t694 * t644 + t688 * t723;
t674 = t681 * t695;
t673 = t681 * qJDD(1);
t672 = t680 * qJDD(1);
t651 = t674 - t754;
t650 = t674 + t754;
t649 = t688 * t667;
t648 = t673 - t672;
t647 = t673 + t672;
t643 = (t681 * t686 + t679) * t695;
t642 = t668 * t712;
t639 = t666 - t720;
t638 = t666 + t720;
t637 = t769 - t720;
t636 = -t666 - t769;
t635 = t666 - t769;
t634 = pkin(5) * t654 + t691 * g(1);
t622 = t654 * t749;
t621 = t703 * t749;
t619 = -t769 - t720;
t611 = -t694 * t643 - t686 * t723;
t609 = t691 * t643 - t686 * t722;
t608 = -t694 * t647 + t691 * t650;
t607 = t691 * t647 + t694 * t650;
t603 = (-t683 - t768) * t714;
t600 = -t620 + t769;
t599 = -t769 + t770;
t596 = t642 - t698;
t595 = t642 + t698;
t594 = t706 - t632;
t589 = -t690 * t632 + t683 * t714;
t588 = (t768 * t668 * qJD(1) + t693 * t702) * t686;
t587 = -t620 - t769;
t585 = (t725 + (qJD(3) - t668) * t729) * t690 * t686;
t584 = t693 * t636 - t740;
t583 = t693 * t635 + t741;
t582 = -t690 * t637 + t733;
t581 = t690 * t636 + t733;
t580 = -t690 * t635 + t734;
t579 = -t693 * t637 - t740;
t575 = -t620 + t770;
t573 = -t690 * t619 + t734;
t572 = t693 * t619 + t741;
t560 = -t769 - t770;
t559 = t688 * t586 + t707;
t558 = t688 * t585 - t707;
t555 = -t565 + t656;
t554 = t564 - t656;
t553 = (-t623 * t687 - t625 * t685) * t668;
t552 = (-t623 * t685 + t625 * t687) * t668;
t551 = -t620 - t770;
t547 = -t565 - t656;
t546 = t693 * t596 - t690 * t597;
t545 = -t690 * t594 - t693 * t595;
t544 = -t690 * t596 - t586;
t543 = t693 * t594 - t690 * t595;
t537 = t708 - t757;
t536 = t687 * t578 + t625 * t756;
t535 = t685 * t578 - t625 * t755;
t534 = t623 * t755 + t685 * t708;
t533 = t623 * t756 - t687 * t708;
t532 = t688 * t584 - t686 * t596;
t531 = t688 * t583 - t686 * t595;
t530 = t688 * t582 - t686 * t594;
t529 = t686 * t584 + t688 * t596;
t526 = t688 * t573 + t597 * t686;
t525 = t686 * t573 - t597 * t688;
t524 = t687 * t599 + t751;
t523 = -t685 * t600 + t774;
t522 = t685 * t599 - t746;
t521 = t687 * t600 + t775;
t520 = -t694 * t550 - t739;
t519 = t691 * t550 - t731;
t518 = -pkin(6) * t581 + t742;
t517 = t688 * t546 - t686 * t639;
t516 = t688 * t545 - t686 * t638;
t515 = t686 * t545 + t688 * t638;
t514 = -t685 * t587 + t746;
t513 = t687 * t587 + t751;
t512 = -pkin(6) * t572 + t735;
t510 = -t565 + t564;
t506 = -t656 - t564;
t505 = t687 * t560 - t775;
t504 = t685 * t560 + t774;
t503 = (t567 * t692 - t569 * t689) * t662;
t502 = (t567 * t689 + t569 * t692) * t662;
t501 = -pkin(2) * t581 + t527;
t500 = -t694 * t532 - t691 * t581;
t499 = t691 * t532 - t694 * t581;
t498 = -pkin(2) * t572 + t528;
t496 = -t690 * t552 + t693 * t553;
t495 = -t693 * t552 - t690 * t553;
t490 = -t694 * t526 - t691 * t572;
t489 = t691 * t526 - t694 * t572;
t487 = -t569 * qJD(5) - t709;
t486 = -t538 * t687 - t685 * t542;
t485 = -t687 * t537 - t685 * t777;
t484 = -t538 * t685 + t687 * t542;
t483 = -t685 * t537 + t687 * t777;
t482 = t688 * t496 - t750;
t481 = -t564 - t565;
t480 = -t690 * t535 + t693 * t536;
t479 = -t690 * t533 + t693 * t534;
t478 = -t693 * t535 - t690 * t536;
t477 = -t693 * t533 - t690 * t534;
t476 = -t694 * t516 - t691 * t543;
t475 = t691 * t516 - t694 * t543;
t472 = t692 * t554 + t744;
t471 = -t689 * t555 + t772;
t470 = t689 * t554 - t737;
t469 = t692 * t555 + t773;
t468 = -t690 * t522 + t693 * t524;
t467 = -t690 * t521 + t693 * t523;
t466 = -t689 * t547 + t737;
t465 = -t693 * t522 - t690 * t524;
t464 = -t693 * t521 - t690 * t523;
t463 = t692 * t547 + t744;
t462 = -t690 * t513 + t693 * t514;
t461 = t693 * t513 + t690 * t514;
t460 = t556 + t700;
t455 = (qJD(5) - t662) * t569 + t709;
t454 = -qJ(4) * t513 + t747;
t453 = -pkin(1) * t529 - pkin(2) * t596 - pkin(6) * t584 + t735;
t452 = t569 * t759 - t692 * t700;
t451 = -t569 * t758 - t689 * t700;
t450 = -t689 * t487 - t567 * t758;
t449 = t692 * t487 - t567 * t759;
t448 = t688 * t480 - t718;
t447 = t688 * t479 + t718;
t446 = -qJ(4) * t504 + t752;
t445 = -pkin(1) * t525 + pkin(2) * t597 - pkin(6) * t573 - t742;
t443 = t692 * t506 - t773;
t442 = t689 * t506 + t772;
t441 = -t690 * t504 + t693 * t505;
t440 = t688 * t474 + t686 * t570;
t439 = t693 * t504 + t690 * t505;
t438 = t686 * t474 - t688 * t570;
t437 = -pkin(6) * t543 - t473;
t436 = -t685 * t502 + t687 * t503;
t435 = t687 * t502 + t685 * t503;
t434 = t688 * t468 - t686 * t538;
t433 = t688 * t467 - t686 * t542;
t432 = -pkin(3) * t777 + qJ(4) * t514 + t752;
t431 = t688 * t462 + t686 * t777;
t430 = t686 * t462 - t688 * t777;
t429 = -pkin(3) * t537 + qJ(4) * t505 - t747;
t426 = t688 * t441 + t686 * t537;
t425 = t686 * t441 - t688 * t537;
t424 = -qJ(2) * t529 - t686 * t501 + t688 * t518;
t423 = -t690 * t484 + t693 * t486;
t422 = -t690 * t483 + t693 * t485;
t421 = t693 * t484 + t690 * t486;
t420 = -t693 * t483 - t690 * t485;
t418 = -qJ(2) * t525 - t686 * t498 + t688 * t512;
t417 = -pkin(1) * t515 - pkin(2) * t638 - pkin(6) * t545 - t474;
t416 = t688 * t422 - t686 * t575;
t415 = -t685 * t470 + t687 * t472;
t414 = -t685 * t469 + t687 * t471;
t413 = t687 * t470 + t685 * t472;
t412 = t687 * t469 + t685 * t471;
t411 = -t685 * t463 + t687 * t466;
t410 = t687 * t463 + t685 * t466;
t409 = t688 * t423 + t686 * t551;
t408 = t686 * t423 - t688 * t551;
t407 = -t694 * t440 - t691 * t473;
t406 = t691 * t440 - t694 * t473;
t404 = -t456 * t692 - t689 * t460;
t403 = -t692 * t455 - t689 * t771;
t402 = -t456 * t689 + t692 * t460;
t401 = -t689 * t455 + t692 * t771;
t400 = -pkin(7) * t463 + t738;
t398 = -qJ(2) * t515 + t688 * t437 + t543 * t765;
t397 = -t685 * t451 + t687 * t452;
t396 = -t685 * t449 + t687 * t450;
t395 = t687 * t451 + t685 * t452;
t394 = t687 * t449 + t685 * t450;
t390 = -pkin(1) * t438 + pkin(2) * t570 - pkin(6) * t474;
t389 = -pkin(7) * t442 + t745;
t388 = -pkin(2) * t421 - pkin(3) * t484;
t387 = -t685 * t442 + t687 * t443;
t386 = t687 * t442 + t685 * t443;
t385 = -t694 * t431 - t691 * t461;
t384 = t691 * t431 - t694 * t461;
t383 = -t690 * t435 + t693 * t436;
t382 = -t693 * t435 - t690 * t436;
t381 = t688 * t383 - t686 * t657;
t380 = -t694 * t426 - t691 * t439;
t379 = t691 * t426 - t694 * t439;
t378 = -qJ(2) * t438 + (-pkin(6) * t688 + t765) * t473;
t377 = -pkin(2) * t461 - pkin(3) * t513 + t428;
t374 = -pkin(4) * t771 + pkin(7) * t466 + t745;
t373 = -pkin(2) * t439 - pkin(3) * t504 + t427;
t372 = -pkin(4) * t455 + pkin(7) * t443 - t738;
t371 = -pkin(6) * t461 - t690 * t432 + t693 * t454;
t370 = -t694 * t409 - t691 * t421;
t369 = t691 * t409 - t694 * t421;
t368 = -pkin(3) * t511 + qJ(4) * t376;
t367 = -t690 * t413 + t693 * t415;
t366 = -t690 * t412 + t693 * t414;
t365 = -t693 * t413 - t690 * t415;
t364 = -t693 * t412 - t690 * t414;
t363 = -pkin(6) * t439 - t690 * t429 + t693 * t446;
t362 = -t690 * t410 + t693 * t411;
t361 = t693 * t410 + t690 * t411;
t360 = -qJ(4) * t484 - t375;
t359 = -t685 * t402 + t687 * t404;
t358 = -t685 * t401 + t687 * t403;
t357 = t687 * t402 + t685 * t404;
t356 = t687 * t401 + t685 * t403;
t355 = -pkin(3) * t551 + qJ(4) * t486 + t376;
t351 = -t690 * t395 + t693 * t397;
t350 = -t690 * t394 + t693 * t396;
t349 = -t693 * t395 - t690 * t397;
t348 = -t693 * t394 - t690 * t396;
t347 = -t690 * t386 + t693 * t387;
t346 = t693 * t386 + t690 * t387;
t345 = t688 * t367 - t686 * t456;
t344 = t688 * t366 - t686 * t460;
t343 = t688 * t351 + t719;
t342 = t688 * t350 - t719;
t341 = t688 * t362 + t686 * t771;
t340 = t686 * t362 - t688 * t771;
t339 = -pkin(1) * t430 + pkin(2) * t777 - pkin(6) * t462 - t693 * t432 - t690 * t454;
t338 = -pkin(1) * t425 + pkin(2) * t537 - pkin(6) * t441 - t693 * t429 - t690 * t446;
t337 = t688 * t347 + t686 * t455;
t336 = t686 * t347 - t688 * t455;
t335 = t693 * t376 - t743;
t334 = t690 * t376 + t736;
t333 = t688 * t335 + t686 * t511;
t332 = t686 * t335 - t688 * t511;
t331 = -qJ(4) * t410 - t685 * t374 + t687 * t400;
t330 = -qJ(2) * t430 + t688 * t371 - t686 * t377;
t329 = -qJ(4) * t386 - t685 * t372 + t687 * t389;
t328 = -pkin(3) * t771 + qJ(4) * t411 + t687 * t374 + t685 * t400;
t327 = -t690 * t357 + t693 * t359;
t326 = -t690 * t356 + t693 * t358;
t325 = t693 * t357 + t690 * t359;
t324 = -t693 * t356 - t690 * t358;
t321 = -qJ(2) * t425 + t688 * t363 - t686 * t373;
t320 = -t694 * t341 - t691 * t361;
t319 = t691 * t341 - t694 * t361;
t318 = t688 * t326 - t686 * t510;
t317 = -pkin(3) * t455 + qJ(4) * t387 + t687 * t372 + t685 * t389;
t316 = t688 * t327 + t686 * t481;
t315 = t686 * t327 - t688 * t481;
t314 = -pkin(2) * t334 - pkin(3) * t375;
t313 = -pkin(6) * t421 - t690 * t355 + t693 * t360;
t312 = -pkin(4) * t444 + pkin(7) * t323;
t311 = -t694 * t337 - t691 * t346;
t310 = t691 * t337 - t694 * t346;
t309 = -pkin(7) * t402 - t322;
t308 = -pkin(2) * t361 - pkin(3) * t410 - pkin(4) * t463 + t354;
t307 = -pkin(4) * t481 + pkin(7) * t404 + t323;
t306 = -pkin(1) * t408 + pkin(2) * t551 - pkin(6) * t423 - t693 * t355 - t690 * t360;
t305 = -pkin(2) * t346 - pkin(3) * t386 - pkin(4) * t442 + t353;
t304 = -pkin(6) * t334 - qJ(4) * t736 - t690 * t368;
t303 = -t694 * t333 - t691 * t334;
t302 = t691 * t333 - t694 * t334;
t301 = -qJ(2) * t408 + t688 * t313 - t686 * t388;
t300 = -pkin(2) * t325 - pkin(3) * t357 - pkin(4) * t402;
t299 = t687 * t323 - t753;
t298 = t685 * t323 + t748;
t297 = -t694 * t316 - t691 * t325;
t296 = t691 * t316 - t694 * t325;
t295 = -pkin(6) * t361 - t690 * t328 + t693 * t331;
t294 = -pkin(1) * t332 + pkin(2) * t511 - pkin(6) * t335 + qJ(4) * t743 - t693 * t368;
t293 = -pkin(6) * t346 - t690 * t317 + t693 * t329;
t292 = -pkin(1) * t340 + pkin(2) * t771 - pkin(6) * t362 - t693 * t328 - t690 * t331;
t291 = -qJ(4) * t357 - t685 * t307 + t687 * t309;
t290 = -pkin(3) * t481 + qJ(4) * t359 + t687 * t307 + t685 * t309;
t289 = -pkin(1) * t336 + pkin(2) * t455 - pkin(6) * t347 - t693 * t317 - t690 * t329;
t288 = -qJ(2) * t332 + t688 * t304 - t686 * t314;
t287 = -t690 * t298 + t693 * t299;
t286 = t693 * t298 + t690 * t299;
t285 = -qJ(2) * t340 + t688 * t295 - t686 * t308;
t284 = -pkin(7) * t748 - qJ(4) * t298 - t685 * t312;
t283 = t688 * t287 + t686 * t444;
t282 = t686 * t287 - t688 * t444;
t281 = -pkin(3) * t444 - pkin(7) * t753 + qJ(4) * t299 + t687 * t312;
t280 = -qJ(2) * t336 + t688 * t293 - t686 * t305;
t279 = -pkin(2) * t286 - pkin(3) * t298 - pkin(4) * t322;
t278 = -pkin(6) * t325 - t690 * t290 + t693 * t291;
t277 = -t694 * t283 - t691 * t286;
t276 = t691 * t283 - t694 * t286;
t275 = -pkin(1) * t315 + pkin(2) * t481 - pkin(6) * t327 - t693 * t290 - t690 * t291;
t274 = -qJ(2) * t315 + t688 * t278 - t686 * t300;
t273 = -pkin(6) * t286 - t690 * t281 + t693 * t284;
t272 = -pkin(1) * t282 + pkin(2) * t444 - pkin(6) * t287 - t693 * t281 - t690 * t284;
t271 = -qJ(2) * t282 + t688 * t273 - t686 * t279;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t549, 0, 0, 0, 0, 0, 0, t529, t525, t515, t438, 0, 0, 0, 0, 0, 0, t425, t430, t408, t332, 0, 0, 0, 0, 0, 0, t336, t340, t315, t282; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t654, -t703, 0, t613, 0, 0, 0, 0, 0, 0, t610, t609, t607, t519, 0, 0, 0, 0, 0, 0, t499, t489, t475, t406, 0, 0, 0, 0, 0, 0, t379, t384, t369, t302, 0, 0, 0, 0, 0, 0, t310, t319, t296, t276; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t703, t654, 0, t614, 0, 0, 0, 0, 0, 0, t612, t611, t608, t520, 0, 0, 0, 0, 0, 0, t500, t490, t476, t407, 0, 0, 0, 0, 0, 0, t380, t385, t370, t303, 0, 0, 0, 0, 0, 0, t311, t320, t297, t277; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t659, t658, 0, 0, t672, 0.2e1 * t686 * t724, 0, t673, 0, 0, -qJ(2) * t644 + t688 * t710, qJ(2) * t643 - t686 * t710, pkin(1) * t650 + qJ(2) * t647 + t550, -pkin(1) * t633 + qJ(2) * t550, t686 * t586 - t704, t686 * t546 + t688 * t639, t686 * t582 + t688 * t594, t686 * t585 + t704, t686 * t583 + t688 * t595, t649, -pkin(1) * t581 + qJ(2) * t532 + t688 * t501 + t686 * t518, -pkin(1) * t572 + qJ(2) * t526 + t688 * t498 + t686 * t512, qJ(2) * t516 + t686 * t437 + (-pkin(1) - t764) * t543, qJ(2) * t440 + (-pkin(1) + t705) * t473, t686 * t480 + t716, t686 * t422 + t688 * t575, t686 * t467 + t688 * t542, t686 * t479 - t716, t686 * t468 + t688 * t538, t686 * t496 + t649, -pkin(1) * t439 + qJ(2) * t426 + t686 * t363 + t688 * t373, -pkin(1) * t461 + qJ(2) * t431 + t686 * t371 + t688 * t377, -pkin(1) * t421 + qJ(2) * t409 + t686 * t313 + t688 * t388, -pkin(1) * t334 + qJ(2) * t333 + t686 * t304 + t688 * t314, t686 * t351 - t717, t686 * t326 + t688 * t510, t686 * t366 + t688 * t460, t686 * t350 + t717, t686 * t367 + t688 * t456, t686 * t383 + t688 * t657, -pkin(1) * t346 + qJ(2) * t337 + t686 * t293 + t688 * t305, -pkin(1) * t361 + qJ(2) * t341 + t686 * t295 + t688 * t308, -pkin(1) * t325 + qJ(2) * t316 + t686 * t278 + t688 * t300, -pkin(1) * t286 + qJ(2) * t283 + t686 * t273 + t688 * t279; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t703, 0, t654, 0, t711, -t634, -t614, -pkin(5) * t614, t621, t691 * t648 + t694 * t651, t609, -t621, -t610, 0, -pkin(5) * t612 + t694 * t601 + t686 * t739, -pkin(5) * t611 + t694 * t602 + t688 * t739, -pkin(5) * t608 + t691 * t549, -pkin(5) * t520 - (-pkin(1) * t694 - qJ(2) * t691) * t549, t691 * t559 + t694 * t589, t691 * t517 + t694 * t544, t691 * t530 + t694 * t579, t691 * t558 + t694 * t588, t691 * t531 + t694 * t580, t694 * t603 - t691 * t750, -pkin(5) * t500 + t691 * t424 + t694 * t453, -pkin(5) * t490 + t691 * t418 + t694 * t445, -pkin(5) * t476 + t691 * t398 + t694 * t417, -pkin(5) * t407 + t691 * t378 + t694 * t390, t691 * t448 + t694 * t478, t691 * t416 + t694 * t420, t691 * t433 + t694 * t464, t691 * t447 + t694 * t477, t691 * t434 + t694 * t465, t691 * t482 + t694 * t495, -pkin(5) * t380 + t691 * t321 + t694 * t338, -pkin(5) * t385 + t691 * t330 + t694 * t339, -pkin(5) * t370 + t691 * t301 + t694 * t306, -pkin(5) * t303 + t691 * t288 + t694 * t294, t691 * t343 + t694 * t349, t691 * t318 + t694 * t324, t691 * t344 + t694 * t364, t691 * t342 + t694 * t348, t691 * t345 + t694 * t365, t691 * t381 + t694 * t382, -pkin(5) * t311 + t691 * t280 + t694 * t289, -pkin(5) * t320 + t691 * t285 + t694 * t292, -pkin(5) * t297 + t691 * t274 + t694 * t275, -pkin(5) * t277 + t691 * t271 + t694 * t272; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t654, 0, t703, 0, t634, t711, t613, pkin(5) * t613, -t622, -t694 * t648 + t691 * t651, t611, t622, -t612, 0, pkin(5) * t610 + t691 * t601 - t686 * t731, pkin(5) * t609 + t691 * t602 - t688 * t731, pkin(5) * t607 - t694 * t549, pkin(5) * t519 - (-pkin(1) * t691 + qJ(2) * t694) * t549, -t694 * t559 + t691 * t589, -t694 * t517 + t691 * t544, -t694 * t530 + t691 * t579, -t694 * t558 + t691 * t588, -t694 * t531 + t691 * t580, t691 * t603 + t694 * t750, pkin(5) * t499 - t694 * t424 + t691 * t453, pkin(5) * t489 - t694 * t418 + t691 * t445, pkin(5) * t475 - t694 * t398 + t691 * t417, pkin(5) * t406 - t694 * t378 + t691 * t390, -t694 * t448 + t691 * t478, -t694 * t416 + t691 * t420, -t694 * t433 + t691 * t464, -t694 * t447 + t691 * t477, -t694 * t434 + t691 * t465, -t694 * t482 + t691 * t495, pkin(5) * t379 - t694 * t321 + t691 * t338, pkin(5) * t384 - t694 * t330 + t691 * t339, pkin(5) * t369 - t694 * t301 + t691 * t306, pkin(5) * t302 - t694 * t288 + t691 * t294, -t694 * t343 + t691 * t349, -t694 * t318 + t691 * t324, -t694 * t344 + t691 * t364, -t694 * t342 + t691 * t348, -t694 * t345 + t691 * t365, -t694 * t381 + t691 * t382, pkin(5) * t310 - t694 * t280 + t691 * t289, pkin(5) * t319 - t694 * t285 + t691 * t292, pkin(5) * t296 - t694 * t274 + t691 * t275, pkin(5) * t276 - t694 * t271 + t691 * t272;];
tauB_reg = t1;
