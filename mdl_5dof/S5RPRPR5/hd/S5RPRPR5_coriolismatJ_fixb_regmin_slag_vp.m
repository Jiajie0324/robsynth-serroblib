% Calculate minimal parameter regressor of coriolis matrix for
% S5RPRPR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x23]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:44
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RPRPR5_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR5_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR5_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR5_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:43:07
% EndTime: 2020-01-03 11:43:17
% DurationCPUTime: 2.27s
% Computational Cost: add. (2787->211), mult. (6386->315), div. (0->0), fcn. (6890->8), ass. (0->193)
t281 = qJD(3) + qJD(5);
t155 = sin(pkin(9));
t157 = cos(pkin(9));
t156 = sin(pkin(8));
t162 = cos(qJ(3));
t231 = t162 * t156;
t160 = sin(qJ(3));
t240 = t156 * t160;
t123 = -t155 * t240 + t157 * t231;
t161 = cos(qJ(5));
t115 = t161 * t123;
t238 = t157 * t160;
t121 = -t155 * t231 - t156 * t238;
t159 = sin(qJ(5));
t237 = t159 * t121;
t276 = t115 + t237;
t73 = -t161 * t121 + t159 * t123;
t280 = -t276 ^ 2 + t73 ^ 2;
t288 = t280 * qJD(1);
t138 = pkin(3) * t240 + t156 * qJ(2);
t95 = -t121 * pkin(4) + t138;
t287 = t95 * t73;
t286 = t276 * t95;
t158 = cos(pkin(8));
t208 = qJD(1) * t158;
t26 = t73 * t208;
t285 = qJD(1) * t73;
t284 = qJD(3) * t73;
t68 = t276 * t208;
t283 = t73 * qJD(5);
t133 = -t155 * t160 + t157 * t162;
t134 = -t155 * t162 - t238;
t67 = -t159 * t133 + t161 * t134;
t168 = t67 * t158;
t122 = t134 * t158;
t233 = t161 * t122;
t125 = t133 * t158;
t235 = t159 * t125;
t170 = -t235 / 0.2e1 + t233 / 0.2e1;
t166 = t168 / 0.2e1 + t170;
t269 = t166 * qJD(1);
t282 = t281 * t67 - t269;
t214 = t276 * qJD(1);
t178 = t161 * t133 + t159 * t134;
t169 = t178 * t158;
t232 = t161 * t125;
t236 = t159 * t122;
t171 = -t236 / 0.2e1 - t232 / 0.2e1;
t165 = -t169 / 0.2e1 + t171;
t279 = qJD(2) * t165 + qJD(4) * t73;
t270 = t165 * qJD(1);
t278 = -t281 * t178 - t270;
t139 = -t158 * pkin(2) - t156 * pkin(6) - pkin(1);
t118 = -t162 * t158 * qJ(2) - t160 * t139;
t101 = -qJ(4) * t240 - t118;
t239 = t157 * t101;
t132 = t162 * t139;
t182 = -qJ(4) * t231 + t132;
t248 = qJ(2) * t160;
t92 = (-pkin(3) - t248) * t158 + t182;
t58 = t155 * t92 + t239;
t193 = t158 * t248;
t100 = t182 - t193;
t61 = -t155 * t100 - t239;
t277 = t58 + t61;
t163 = -t168 / 0.2e1 + t170;
t274 = qJD(2) * t163;
t164 = t169 / 0.2e1 + t171;
t273 = qJD(2) * t164;
t271 = qJD(2) * t166;
t188 = t115 / 0.2e1;
t268 = t133 / 0.2e1;
t267 = t134 / 0.2e1;
t266 = t155 / 0.2e1;
t265 = t156 / 0.2e1;
t264 = pkin(3) * t155;
t263 = t121 * pkin(7);
t262 = t123 * pkin(7);
t96 = t155 * t101;
t62 = t157 * t100 - t96;
t261 = pkin(3) * qJD(3);
t57 = t157 * t92 - t96;
t31 = -t158 * pkin(4) - t262 + t57;
t260 = t159 * t31;
t36 = t58 + t263;
t259 = t159 * t36;
t37 = t61 - t263;
t258 = t159 * t37;
t38 = t62 - t262;
t257 = t159 * t38;
t256 = t161 * t31;
t255 = t161 * t36;
t254 = t161 * t37;
t253 = t161 * t38;
t167 = (t125 * t266 + t122 * t157 / 0.2e1) * pkin(3);
t5 = (t62 / 0.2e1 - t57 / 0.2e1) * t134 + (-t58 / 0.2e1 - t61 / 0.2e1) * t133 + t167;
t252 = t5 * qJD(1);
t7 = -t277 * t123 + (-t57 + t62) * t121;
t251 = t7 * qJD(1);
t199 = pkin(3) * t231;
t175 = t123 * pkin(4) + t199;
t18 = t254 - t257;
t8 = t18 * t158 - t175 * t73 - t286;
t250 = t8 * qJD(1);
t19 = t253 + t258;
t9 = t19 * t158 + t175 * t276 - t287;
t249 = t9 * qJD(1);
t10 = t138 * t199 + t57 * t61 + t58 * t62;
t247 = t10 * qJD(1);
t14 = -t256 + t259;
t11 = -t14 * t158 - t287;
t246 = t11 * qJD(1);
t15 = -t255 - t260;
t12 = t15 * t158 - t286;
t245 = t12 * qJD(1);
t13 = t57 * t122 + t58 * t125 + t138 * t156;
t244 = t13 * qJD(1);
t150 = t157 * pkin(3) + pkin(4);
t130 = -t161 * t150 + t159 * t264;
t243 = t130 * t158;
t131 = t159 * t150 + t161 * t264;
t242 = t131 * t158;
t153 = t156 ^ 2;
t241 = t153 * t162;
t17 = t58 * t121 - t57 * t123;
t230 = t17 * qJD(1);
t27 = (t233 - t235) * t158 - t156 * t73;
t228 = t27 * qJD(1);
t28 = (t232 + t236) * t158 + t156 * t276;
t227 = t28 * qJD(1);
t53 = t125 * t121 - t122 * t123;
t222 = t53 * qJD(1);
t173 = t121 * t267 + t123 * t268;
t55 = t265 + t173;
t221 = t55 * qJD(1);
t60 = 0.2e1 * t188 + t237;
t219 = t60 * qJD(1);
t172 = t121 * t266 - t157 * t123 / 0.2e1;
t64 = (-t231 / 0.2e1 + t172) * pkin(3);
t218 = t64 * qJD(1);
t71 = t188 - t115 / 0.2e1;
t215 = t71 * qJD(1);
t213 = t276 * qJD(3);
t77 = t121 ^ 2 + t123 ^ 2;
t211 = t77 * qJD(1);
t183 = -t132 + t193;
t93 = t153 * t248 + t183 * t158;
t210 = t93 * qJD(1);
t94 = qJ(2) * t241 - t118 * t158;
t209 = t94 * qJD(1);
t145 = t158 ^ 2 + t153;
t207 = qJD(2) * t158;
t206 = qJD(3) * t158;
t205 = qJD(4) * t158;
t135 = t145 * t160;
t204 = t135 * qJD(1);
t136 = t145 * t162;
t203 = t136 * qJD(1);
t137 = (t160 ^ 2 - t162 ^ 2) * t153;
t202 = t137 * qJD(1);
t140 = t145 * qJ(2);
t201 = t140 * qJD(1);
t200 = t145 * qJD(1);
t198 = t73 * t214;
t197 = t276 * t285;
t196 = t37 / 0.2e1 + t36 / 0.2e1;
t195 = -t38 / 0.2e1 + t31 / 0.2e1;
t194 = t160 * t241;
t192 = t160 * t206;
t191 = t162 * t206;
t190 = t160 * t208;
t189 = t162 * t208;
t187 = t71 * qJD(5) + t68;
t186 = -qJD(3) + t208;
t185 = -qJD(5) + t208;
t184 = qJD(1) * t194;
t1 = -t242 / 0.2e1 + t196 * t161 + t195 * t159;
t181 = t1 * qJD(1) + t131 * qJD(3);
t2 = t243 / 0.2e1 + t195 * t161 - t196 * t159;
t180 = t2 * qJD(1) - t130 * qJD(3);
t179 = -t283 - t284;
t177 = t186 * t160;
t176 = t186 * t162;
t174 = t60 * qJD(5) + t213 - t68;
t120 = t131 * qJD(5);
t119 = t130 * qJD(5);
t63 = t199 / 0.2e1 + t172 * pkin(3);
t56 = t265 - t173;
t20 = t186 * t73 - t283;
t6 = -t62 * t134 / 0.2e1 + t57 * t267 + t167 + t277 * t268;
t4 = t242 / 0.2e1 - t255 / 0.2e1 - t260 / 0.2e1 - t257 / 0.2e1 + t254 / 0.2e1;
t3 = -t243 / 0.2e1 + t259 / 0.2e1 - t256 / 0.2e1 - t253 / 0.2e1 - t258 / 0.2e1;
t16 = [0, 0, 0, 0, 0, t145 * qJD(2), t140 * qJD(2), -qJD(3) * t194, t137 * qJD(3), t156 * t192, t156 * t191, 0, t135 * qJD(2) + t94 * qJD(3), t136 * qJD(2) - t93 * qJD(3), t53 * qJD(2) + t7 * qJD(3) + t77 * qJD(4), t13 * qJD(2) + t10 * qJD(3) + t17 * qJD(4), t179 * t276, t281 * t280, -t179 * t158, (qJD(5) * t276 + t213) * t158, 0, -t27 * qJD(2) - t8 * qJD(3) - t12 * qJD(5) + t205 * t276, t28 * qJD(2) + t9 * qJD(3) + t11 * qJD(5) - t205 * t73; 0, 0, 0, 0, 0, t200, t201, 0, 0, 0, 0, 0, t204, t203, t222, t244 + (t122 * t133 - t125 * t134) * qJD(2) + t6 * qJD(3) + t56 * qJD(4), 0, 0, 0, 0, 0, t163 * t281 - t228, t164 * t281 + t227; 0, 0, 0, 0, 0, 0, 0, -t184, t202, t156 * t177, t156 * t176, 0, t118 * qJD(3) + t209, qJD(3) * t183 - t210, t251 + (-t121 * t157 - t123 * t155) * t261, t247 + t6 * qJD(2) + t63 * qJD(4) + (t155 * t62 + t157 * t61) * t261, -t197, t288, t20, -t174, 0, t18 * qJD(3) + t4 * qJD(5) - t250 + t274, -t19 * qJD(3) + t3 * qJD(5) + t249 + t273; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t211, t56 * qJD(2) + t63 * qJD(3) + t230, 0, 0, 0, 0, 0, t187, -t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t198, t288, t185 * t73 - t284, -t60 * qJD(3) + t185 * t276, 0, t4 * qJD(3) + t71 * qJD(4) + t15 * qJD(5) - t245 + t274, t3 * qJD(3) + t14 * qJD(5) + t246 + t273; 0, 0, 0, 0, 0, -t200, -t201, 0, 0, 0, 0, 0, t192 - t204, t191 - t203, -t222, -t5 * qJD(3) - t55 * qJD(4) - t244, 0, 0, 0, 0, 0, -t166 * t281 + t228, -t165 * t281 - t227; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t177, t176, 0, -t252 + (t133 * t155 + t134 * t157) * t261, 0, 0, 0, 0, 0, t282, t278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t221, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t282, t278; 0, 0, 0, 0, 0, 0, 0, t184, -t202, -t156 * t190, -t156 * t189, 0, -t160 * t207 - t209, -t162 * t207 + t210, -t251, t5 * qJD(2) + t64 * qJD(4) - t247, t197, -t288, -t26, -t187, 0, -qJD(4) * t276 - t1 * qJD(5) + t250 + t271, -t2 * qJD(5) - t249 + t279; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t190, -t189, 0, t252, 0, 0, 0, 0, 0, t269, t270; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t120, t119; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t218, 0, 0, 0, 0, 0, -t214, t285; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t215, 0, -t120 - t181, t119 - t180; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t211, t55 * qJD(2) - t64 * qJD(3) - t230, 0, 0, 0, 0, 0, t174, t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t221, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t218, 0, 0, 0, 0, 0, t214, -t285; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t219, -t285; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t198, -t288, -t26, t71 * qJD(3) - t68, 0, t1 * qJD(3) - t60 * qJD(4) + t245 + t271, t2 * qJD(3) - t246 + t279; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t269, t270; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t215, 0, t181, t180; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t219, t285; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t16;
