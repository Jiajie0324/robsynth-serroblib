% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRPR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:58
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRPR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR5_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR5_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR5_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:58:06
% EndTime: 2019-12-05 17:58:09
% DurationCPUTime: 3.59s
% Computational Cost: add. (18796->249), mult. (48930->354), div. (0->0), fcn. (34499->10), ass. (0->199)
t1501 = qJD(1) ^ 2;
t1492 = sin(pkin(8));
t1488 = t1492 ^ 2;
t1494 = cos(pkin(8));
t1489 = t1494 ^ 2;
t1522 = t1488 + t1489;
t1469 = t1522 * t1501;
t1525 = t1494 * qJD(1);
t1482 = -qJD(3) + t1525;
t1477 = -qJD(5) + t1482;
t1543 = qJD(5) - t1477;
t1486 = t1494 * qJDD(1);
t1481 = -t1486 + qJDD(3);
t1491 = sin(pkin(9));
t1493 = cos(pkin(9));
t1496 = sin(qJ(3));
t1499 = cos(qJ(3));
t1533 = qJD(1) * t1492;
t1450 = (-t1491 * t1499 - t1493 * t1496) * t1533;
t1531 = qJD(1) * t1499;
t1514 = t1492 * t1531;
t1532 = qJD(1) * t1496;
t1515 = t1492 * t1532;
t1452 = -t1491 * t1515 + t1493 * t1514;
t1528 = t1452 * t1450;
t1419 = t1481 + t1528;
t1495 = sin(qJ(5));
t1498 = cos(qJ(5));
t1421 = -t1498 * t1450 + t1495 * t1452;
t1542 = t1421 ^ 2;
t1423 = t1495 * t1450 + t1498 * t1452;
t1541 = t1423 ^ 2;
t1540 = t1450 ^ 2;
t1539 = t1452 ^ 2;
t1538 = t1477 ^ 2;
t1537 = t1482 ^ 2;
t1536 = t1496 ^ 2;
t1535 = 2 * qJD(2);
t1534 = t1494 * g(1);
t1530 = t1423 * t1421;
t1529 = t1450 * t1482;
t1527 = t1482 * t1452;
t1526 = t1488 * t1501;
t1507 = -pkin(2) * t1494 - pkin(6) * t1492;
t1467 = t1507 * qJD(1);
t1524 = t1535 + t1467;
t1523 = qJD(5) + t1477;
t1497 = sin(qJ(1));
t1500 = cos(qJ(1));
t1473 = t1497 * g(2) - t1500 * g(3);
t1463 = -t1501 * pkin(1) + qJDD(1) * qJ(2) + t1473;
t1442 = -t1492 * g(1) + t1494 * t1463 + t1525 * t1535;
t1425 = t1467 * t1525 + t1442;
t1474 = t1500 * g(2) + t1497 * g(3);
t1505 = -t1501 * qJ(2) + qJDD(2) - t1474;
t1444 = (-pkin(1) + t1507) * qJDD(1) + t1505;
t1403 = t1499 * t1425 + t1496 * t1444;
t1521 = qJDD(1) * t1496;
t1520 = qJDD(1) * t1499;
t1519 = t1492 * qJDD(1);
t1518 = t1497 * qJDD(1);
t1517 = t1500 * qJDD(1);
t1516 = t1482 * t1532;
t1513 = t1499 * t1526;
t1512 = t1536 * t1526;
t1436 = t1499 * t1444;
t1475 = qJD(3) * t1515;
t1459 = t1499 * t1519 - t1475;
t1388 = t1481 * pkin(3) - t1459 * qJ(4) + t1436 + (qJ(4) * t1482 * t1533 - pkin(3) * t1513 - t1425) * t1496;
t1456 = -t1482 * pkin(3) - qJ(4) * t1514;
t1506 = (-qJD(3) * t1531 - t1521) * t1492;
t1389 = -pkin(3) * t1512 + qJ(4) * t1506 + t1482 * t1456 + t1403;
t1362 = 0.2e1 * qJD(4) * t1450 + t1491 * t1388 + t1493 * t1389;
t1511 = -qJDD(5) - t1481;
t1430 = t1493 * t1459 + t1491 * t1506;
t1509 = t1491 * t1459 - t1493 * t1506;
t1510 = -t1495 * t1430 - t1498 * t1509;
t1409 = -t1430 - t1529;
t1508 = t1496 * t1513;
t1361 = -0.2e1 * qJD(4) * t1452 + t1493 * t1388 - t1491 * t1389;
t1504 = -t1498 * t1430 + t1495 * t1509;
t1395 = t1534 + qJDD(4) - pkin(3) * t1506 - qJ(4) * t1512 + (t1463 + (t1456 * t1499 + t1524) * qJD(1)) * t1492;
t1490 = t1499 ^ 2;
t1479 = t1494 * t1501 * t1492;
t1472 = t1497 * t1501 - t1517;
t1471 = t1500 * t1501 + t1518;
t1468 = t1522 * qJDD(1);
t1466 = t1494 * t1469;
t1465 = t1492 * t1469;
t1462 = (t1490 + t1536) * t1526;
t1461 = -t1537 - t1512;
t1460 = qJDD(1) * pkin(1) - t1505;
t1458 = -t1508 + t1481;
t1457 = -t1508 - t1481;
t1449 = -t1490 * t1526 - t1537;
t1441 = -0.2e1 * qJD(2) * t1533 - t1492 * t1463 - t1534;
t1440 = -t1475 + (t1516 + t1520) * t1492;
t1439 = (-t1521 + (-qJD(3) - t1482) * t1531) * t1492;
t1438 = (t1521 + (qJD(3) - t1482) * t1531) * t1492;
t1437 = t1475 + (t1516 - t1520) * t1492;
t1434 = -t1482 * pkin(4) - t1452 * pkin(7);
t1433 = -t1537 - t1539;
t1432 = -t1496 * t1458 + t1499 * t1461;
t1431 = t1499 * t1458 + t1496 * t1461;
t1427 = -t1496 * t1449 + t1499 * t1457;
t1426 = t1499 * t1449 + t1496 * t1457;
t1424 = t1534 + (t1524 * qJD(1) + t1463) * t1492;
t1418 = -t1481 + t1528;
t1417 = -t1537 - t1540;
t1415 = -t1539 - t1540;
t1414 = -t1492 * t1441 + t1494 * t1442;
t1413 = t1494 * t1441 + t1492 * t1442;
t1412 = -t1538 - t1541;
t1411 = -t1496 * t1437 + t1499 * t1439;
t1410 = t1499 * t1437 + t1496 * t1439;
t1408 = t1430 - t1529;
t1407 = -t1509 - t1527;
t1406 = t1509 - t1527;
t1405 = t1494 * t1432 + t1492 * t1438;
t1404 = t1492 * t1432 - t1494 * t1438;
t1402 = -t1496 * t1425 + t1436;
t1401 = t1494 * t1427 + t1492 * t1440;
t1400 = t1492 * t1427 - t1494 * t1440;
t1399 = t1494 * t1411 - t1492 * t1462;
t1398 = t1492 * t1411 + t1494 * t1462;
t1397 = t1493 * t1418 - t1491 * t1433;
t1396 = t1491 * t1418 + t1493 * t1433;
t1394 = -t1511 - t1530;
t1393 = t1511 - t1530;
t1392 = -t1538 - t1542;
t1391 = t1493 * t1417 - t1491 * t1419;
t1390 = t1491 * t1417 + t1493 * t1419;
t1384 = t1493 * t1407 - t1491 * t1409;
t1383 = t1491 * t1407 + t1493 * t1409;
t1382 = -t1541 - t1542;
t1381 = -t1496 * t1402 + t1499 * t1403;
t1380 = t1499 * t1402 + t1496 * t1403;
t1379 = t1498 * t1393 - t1495 * t1412;
t1378 = t1495 * t1393 + t1498 * t1412;
t1377 = -t1496 * t1396 + t1499 * t1397;
t1376 = t1499 * t1396 + t1496 * t1397;
t1375 = t1523 * t1421 + t1504;
t1374 = -t1543 * t1421 - t1504;
t1373 = -t1523 * t1423 + t1510;
t1372 = t1543 * t1423 - t1510;
t1371 = pkin(4) * t1509 - t1540 * pkin(7) + t1452 * t1434 + t1395;
t1370 = t1498 * t1392 - t1495 * t1394;
t1369 = t1495 * t1392 + t1498 * t1394;
t1368 = -t1496 * t1390 + t1499 * t1391;
t1367 = t1494 * t1381 + t1492 * t1424;
t1366 = t1499 * t1390 + t1496 * t1391;
t1365 = t1492 * t1381 - t1494 * t1424;
t1364 = t1494 * t1377 + t1492 * t1408;
t1363 = t1492 * t1377 - t1494 * t1408;
t1360 = t1494 * t1368 + t1492 * t1406;
t1359 = t1492 * t1368 - t1494 * t1406;
t1358 = -t1496 * t1383 + t1499 * t1384;
t1357 = t1499 * t1383 + t1496 * t1384;
t1356 = -t1491 * t1378 + t1493 * t1379;
t1355 = t1493 * t1378 + t1491 * t1379;
t1354 = t1494 * t1358 + t1492 * t1415;
t1353 = t1492 * t1358 - t1494 * t1415;
t1352 = -t1540 * pkin(4) - pkin(7) * t1509 + t1482 * t1434 + t1362;
t1351 = t1498 * t1373 - t1495 * t1375;
t1350 = t1495 * t1373 + t1498 * t1375;
t1349 = t1419 * pkin(4) + t1409 * pkin(7) + t1361;
t1348 = -t1491 * t1369 + t1493 * t1370;
t1347 = t1493 * t1369 + t1491 * t1370;
t1346 = -t1491 * t1361 + t1493 * t1362;
t1345 = t1493 * t1361 + t1491 * t1362;
t1344 = -t1496 * t1355 + t1499 * t1356;
t1343 = t1499 * t1355 + t1496 * t1356;
t1342 = -t1491 * t1350 + t1493 * t1351;
t1341 = t1493 * t1350 + t1491 * t1351;
t1340 = t1495 * t1349 + t1498 * t1352;
t1339 = t1498 * t1349 - t1495 * t1352;
t1338 = -t1496 * t1347 + t1499 * t1348;
t1337 = t1499 * t1347 + t1496 * t1348;
t1336 = t1494 * t1344 + t1492 * t1374;
t1335 = t1492 * t1344 - t1494 * t1374;
t1334 = t1494 * t1338 + t1492 * t1372;
t1333 = t1492 * t1338 - t1494 * t1372;
t1332 = -t1496 * t1345 + t1499 * t1346;
t1331 = t1499 * t1345 + t1496 * t1346;
t1330 = t1494 * t1332 + t1492 * t1395;
t1329 = t1492 * t1332 - t1494 * t1395;
t1328 = -t1496 * t1341 + t1499 * t1342;
t1327 = t1499 * t1341 + t1496 * t1342;
t1326 = -t1495 * t1339 + t1498 * t1340;
t1325 = t1498 * t1339 + t1495 * t1340;
t1324 = t1494 * t1328 + t1492 * t1382;
t1323 = t1492 * t1328 - t1494 * t1382;
t1322 = -t1491 * t1325 + t1493 * t1326;
t1321 = t1493 * t1325 + t1491 * t1326;
t1320 = -t1496 * t1321 + t1499 * t1322;
t1319 = t1499 * t1321 + t1496 * t1322;
t1318 = t1494 * t1320 + t1492 * t1371;
t1317 = t1492 * t1320 - t1494 * t1371;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1413, 0, 0, 0, 0, 0, 0, t1404, t1400, t1398, t1365, 0, 0, 0, 0, 0, 0, t1359, t1363, t1353, t1329, 0, 0, 0, 0, 0, 0, t1333, t1335, t1323, t1317; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1472, t1471, 0, -t1497 * t1473 - t1500 * t1474, 0, 0, 0, 0, 0, 0, t1497 * t1466 - t1494 * t1517, -t1497 * t1465 + t1492 * t1517, -t1497 * t1468 - t1500 * t1469, -t1497 * t1414 - t1500 * t1460, 0, 0, 0, 0, 0, 0, -t1497 * t1405 + t1500 * t1431, -t1497 * t1401 + t1500 * t1426, -t1497 * t1399 + t1500 * t1410, -t1497 * t1367 + t1500 * t1380, 0, 0, 0, 0, 0, 0, -t1497 * t1360 + t1500 * t1366, -t1497 * t1364 + t1500 * t1376, -t1497 * t1354 + t1500 * t1357, -t1497 * t1330 + t1500 * t1331, 0, 0, 0, 0, 0, 0, -t1497 * t1334 + t1500 * t1337, -t1497 * t1336 + t1500 * t1343, -t1497 * t1324 + t1500 * t1327, -t1497 * t1318 + t1500 * t1319; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1471, t1472, 0, t1500 * t1473 - t1497 * t1474, 0, 0, 0, 0, 0, 0, -t1500 * t1466 - t1494 * t1518, t1500 * t1465 + t1492 * t1518, t1500 * t1468 - t1497 * t1469, t1500 * t1414 - t1497 * t1460, 0, 0, 0, 0, 0, 0, t1500 * t1405 + t1497 * t1431, t1500 * t1401 + t1497 * t1426, t1500 * t1399 + t1497 * t1410, t1500 * t1367 + t1497 * t1380, 0, 0, 0, 0, 0, 0, t1500 * t1360 + t1497 * t1366, t1500 * t1364 + t1497 * t1376, t1500 * t1354 + t1497 * t1357, t1500 * t1330 + t1497 * t1331, 0, 0, 0, 0, 0, 0, t1500 * t1334 + t1497 * t1337, t1500 * t1336 + t1497 * t1343, t1500 * t1324 + t1497 * t1327, t1500 * t1318 + t1497 * t1319; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1501, -qJDD(1), 0, t1473, 0, 0, 0, 0, 0, 0, -t1466, t1465, t1468, t1414, 0, 0, 0, 0, 0, 0, t1405, t1401, t1399, t1367, 0, 0, 0, 0, 0, 0, t1360, t1364, t1354, t1330, 0, 0, 0, 0, 0, 0, t1334, t1336, t1324, t1318; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1501, 0, t1474, 0, 0, 0, 0, 0, 0, t1486, -t1519, t1469, t1460, 0, 0, 0, 0, 0, 0, -t1431, -t1426, -t1410, -t1380, 0, 0, 0, 0, 0, 0, -t1366, -t1376, -t1357, -t1331, 0, 0, 0, 0, 0, 0, -t1337, -t1343, -t1327, -t1319; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1413, 0, 0, 0, 0, 0, 0, t1404, t1400, t1398, t1365, 0, 0, 0, 0, 0, 0, t1359, t1363, t1353, t1329, 0, 0, 0, 0, 0, 0, t1333, t1335, t1323, t1317; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1489 * t1501, t1479, t1486, t1442, 0, 0, 0, 0, 0, 0, t1432, t1427, t1411, t1381, 0, 0, 0, 0, 0, 0, t1368, t1377, t1358, t1332, 0, 0, 0, 0, 0, 0, t1338, t1344, t1328, t1320; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1479, -t1526, -t1519, t1441, 0, 0, 0, 0, 0, 0, -t1438, -t1440, t1462, -t1424, 0, 0, 0, 0, 0, 0, -t1406, -t1408, -t1415, -t1395, 0, 0, 0, 0, 0, 0, -t1372, -t1374, -t1382, -t1371; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1486, t1519, -t1469, -t1460, 0, 0, 0, 0, 0, 0, t1431, t1426, t1410, t1380, 0, 0, 0, 0, 0, 0, t1366, t1376, t1357, t1331, 0, 0, 0, 0, 0, 0, t1337, t1343, t1327, t1319; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1461, t1457, t1439, t1403, 0, 0, 0, 0, 0, 0, t1391, t1397, t1384, t1346, 0, 0, 0, 0, 0, 0, t1348, t1356, t1342, t1322; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1458, t1449, t1437, t1402, 0, 0, 0, 0, 0, 0, t1390, t1396, t1383, t1345, 0, 0, 0, 0, 0, 0, t1347, t1355, t1341, t1321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1438, t1440, -t1462, t1424, 0, 0, 0, 0, 0, 0, t1406, t1408, t1415, t1395, 0, 0, 0, 0, 0, 0, t1372, t1374, t1382, t1371; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1417, t1418, t1407, t1362, 0, 0, 0, 0, 0, 0, t1370, t1379, t1351, t1326; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1419, t1433, t1409, t1361, 0, 0, 0, 0, 0, 0, t1369, t1378, t1350, t1325; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1406, t1408, t1415, t1395, 0, 0, 0, 0, 0, 0, t1372, t1374, t1382, t1371; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1392, t1393, t1373, t1340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1394, t1412, t1375, t1339; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1372, t1374, t1382, t1371;];
f_new_reg = t1;
