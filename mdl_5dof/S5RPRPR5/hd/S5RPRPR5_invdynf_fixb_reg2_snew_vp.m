% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRPR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:44
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRPR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR5_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR5_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR5_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:44:00
% EndTime: 2020-01-03 11:44:04
% DurationCPUTime: 4.03s
% Computational Cost: add. (18796->248), mult. (48930->354), div. (0->0), fcn. (34499->10), ass. (0->198)
t1507 = qJD(1) ^ 2;
t1498 = sin(pkin(8));
t1492 = t1498 ^ 2;
t1500 = cos(pkin(8));
t1493 = t1500 ^ 2;
t1527 = t1492 + t1493;
t1473 = t1527 * t1507;
t1530 = t1500 * qJD(1);
t1486 = -qJD(3) + t1530;
t1481 = -qJD(5) + t1486;
t1548 = qJD(5) - t1481;
t1490 = t1500 * qJDD(1);
t1485 = -t1490 + qJDD(3);
t1497 = sin(pkin(9));
t1499 = cos(pkin(9));
t1502 = sin(qJ(3));
t1505 = cos(qJ(3));
t1538 = qJD(1) * t1498;
t1454 = (-t1497 * t1505 - t1499 * t1502) * t1538;
t1536 = qJD(1) * t1505;
t1519 = t1498 * t1536;
t1537 = qJD(1) * t1502;
t1520 = t1498 * t1537;
t1456 = -t1497 * t1520 + t1499 * t1519;
t1533 = t1456 * t1454;
t1423 = t1485 + t1533;
t1501 = sin(qJ(5));
t1504 = cos(qJ(5));
t1425 = -t1504 * t1454 + t1501 * t1456;
t1547 = t1425 ^ 2;
t1427 = t1501 * t1454 + t1504 * t1456;
t1546 = t1427 ^ 2;
t1545 = t1454 ^ 2;
t1544 = t1456 ^ 2;
t1543 = t1481 ^ 2;
t1542 = t1486 ^ 2;
t1541 = t1502 ^ 2;
t1540 = 2 * qJD(2);
t1539 = t1500 * g(1);
t1535 = t1427 * t1425;
t1534 = t1454 * t1486;
t1532 = t1486 * t1456;
t1531 = t1492 * t1507;
t1512 = -pkin(2) * t1500 - pkin(6) * t1498;
t1471 = t1512 * qJD(1);
t1529 = t1540 + t1471;
t1528 = qJD(5) + t1481;
t1503 = sin(qJ(1));
t1506 = cos(qJ(1));
t1477 = -t1503 * g(2) + t1506 * g(3);
t1467 = -t1507 * pkin(1) + qJDD(1) * qJ(2) + t1477;
t1446 = -t1498 * g(1) + t1500 * t1467 + t1530 * t1540;
t1429 = t1471 * t1530 + t1446;
t1478 = -t1506 * g(2) - t1503 * g(3);
t1464 = -qJDD(1) * pkin(1) - t1507 * qJ(2) + qJDD(2) - t1478;
t1448 = t1512 * qJDD(1) + t1464;
t1407 = t1505 * t1429 + t1502 * t1448;
t1526 = qJDD(1) * t1502;
t1525 = qJDD(1) * t1505;
t1524 = t1498 * qJDD(1);
t1523 = t1503 * qJDD(1);
t1522 = t1506 * qJDD(1);
t1521 = t1486 * t1537;
t1518 = t1505 * t1531;
t1517 = t1541 * t1531;
t1440 = t1505 * t1448;
t1479 = qJD(3) * t1520;
t1463 = t1505 * t1524 - t1479;
t1392 = t1485 * pkin(3) - t1463 * qJ(4) + t1440 + (qJ(4) * t1486 * t1538 - pkin(3) * t1518 - t1429) * t1502;
t1460 = -t1486 * pkin(3) - qJ(4) * t1519;
t1511 = (-qJD(3) * t1536 - t1526) * t1498;
t1393 = -pkin(3) * t1517 + qJ(4) * t1511 + t1486 * t1460 + t1407;
t1366 = 0.2e1 * qJD(4) * t1454 + t1497 * t1392 + t1499 * t1393;
t1516 = -qJDD(5) - t1485;
t1434 = t1499 * t1463 + t1497 * t1511;
t1514 = t1497 * t1463 - t1499 * t1511;
t1515 = -t1501 * t1434 - t1504 * t1514;
t1413 = -t1434 - t1534;
t1513 = t1502 * t1518;
t1365 = -0.2e1 * qJD(4) * t1456 + t1499 * t1392 - t1497 * t1393;
t1510 = -t1504 * t1434 + t1501 * t1514;
t1399 = t1539 + qJDD(4) - pkin(3) * t1511 - qJ(4) * t1517 + (t1467 + (t1460 * t1505 + t1529) * qJD(1)) * t1498;
t1495 = t1505 ^ 2;
t1483 = t1500 * t1507 * t1498;
t1476 = -t1503 * t1507 + t1522;
t1475 = -t1506 * t1507 - t1523;
t1472 = t1527 * qJDD(1);
t1470 = t1500 * t1473;
t1469 = t1498 * t1473;
t1466 = (t1495 + t1541) * t1531;
t1465 = -t1542 - t1517;
t1462 = -t1513 + t1485;
t1461 = -t1513 - t1485;
t1453 = -t1495 * t1531 - t1542;
t1445 = -0.2e1 * qJD(2) * t1538 - t1498 * t1467 - t1539;
t1444 = -t1479 + (t1521 + t1525) * t1498;
t1443 = (-t1526 + (-qJD(3) - t1486) * t1536) * t1498;
t1442 = (t1526 + (qJD(3) - t1486) * t1536) * t1498;
t1441 = t1479 + (t1521 - t1525) * t1498;
t1438 = -t1486 * pkin(4) - t1456 * pkin(7);
t1437 = -t1542 - t1544;
t1436 = -t1502 * t1462 + t1505 * t1465;
t1435 = t1505 * t1462 + t1502 * t1465;
t1431 = -t1502 * t1453 + t1505 * t1461;
t1430 = t1505 * t1453 + t1502 * t1461;
t1428 = t1539 + (t1529 * qJD(1) + t1467) * t1498;
t1422 = -t1485 + t1533;
t1421 = -t1542 - t1545;
t1419 = -t1544 - t1545;
t1418 = -t1498 * t1445 + t1500 * t1446;
t1417 = t1500 * t1445 + t1498 * t1446;
t1416 = -t1543 - t1546;
t1415 = -t1502 * t1441 + t1505 * t1443;
t1414 = t1505 * t1441 + t1502 * t1443;
t1412 = t1434 - t1534;
t1411 = -t1514 - t1532;
t1410 = t1514 - t1532;
t1409 = t1500 * t1436 + t1498 * t1442;
t1408 = t1498 * t1436 - t1500 * t1442;
t1406 = -t1502 * t1429 + t1440;
t1405 = t1500 * t1431 + t1498 * t1444;
t1404 = t1498 * t1431 - t1500 * t1444;
t1403 = t1500 * t1415 - t1498 * t1466;
t1402 = t1498 * t1415 + t1500 * t1466;
t1401 = t1499 * t1422 - t1497 * t1437;
t1400 = t1497 * t1422 + t1499 * t1437;
t1398 = -t1516 - t1535;
t1397 = t1516 - t1535;
t1396 = -t1543 - t1547;
t1395 = t1499 * t1421 - t1497 * t1423;
t1394 = t1497 * t1421 + t1499 * t1423;
t1388 = t1499 * t1411 - t1497 * t1413;
t1387 = t1497 * t1411 + t1499 * t1413;
t1386 = -t1546 - t1547;
t1385 = -t1502 * t1406 + t1505 * t1407;
t1384 = t1505 * t1406 + t1502 * t1407;
t1383 = t1504 * t1397 - t1501 * t1416;
t1382 = t1501 * t1397 + t1504 * t1416;
t1381 = -t1502 * t1400 + t1505 * t1401;
t1380 = t1505 * t1400 + t1502 * t1401;
t1379 = t1528 * t1425 + t1510;
t1378 = -t1548 * t1425 - t1510;
t1377 = -t1528 * t1427 + t1515;
t1376 = t1548 * t1427 - t1515;
t1375 = t1514 * pkin(4) - t1545 * pkin(7) + t1456 * t1438 + t1399;
t1374 = t1504 * t1396 - t1501 * t1398;
t1373 = t1501 * t1396 + t1504 * t1398;
t1372 = -t1502 * t1394 + t1505 * t1395;
t1371 = t1500 * t1385 + t1498 * t1428;
t1370 = t1505 * t1394 + t1502 * t1395;
t1369 = t1498 * t1385 - t1500 * t1428;
t1368 = t1500 * t1381 + t1498 * t1412;
t1367 = t1498 * t1381 - t1500 * t1412;
t1364 = t1500 * t1372 + t1498 * t1410;
t1363 = t1498 * t1372 - t1500 * t1410;
t1362 = -t1502 * t1387 + t1505 * t1388;
t1361 = t1505 * t1387 + t1502 * t1388;
t1360 = -t1497 * t1382 + t1499 * t1383;
t1359 = t1499 * t1382 + t1497 * t1383;
t1358 = t1500 * t1362 + t1498 * t1419;
t1357 = t1498 * t1362 - t1500 * t1419;
t1356 = -t1545 * pkin(4) - t1514 * pkin(7) + t1486 * t1438 + t1366;
t1355 = t1504 * t1377 - t1501 * t1379;
t1354 = t1501 * t1377 + t1504 * t1379;
t1353 = t1423 * pkin(4) + t1413 * pkin(7) + t1365;
t1352 = -t1497 * t1373 + t1499 * t1374;
t1351 = t1499 * t1373 + t1497 * t1374;
t1350 = -t1497 * t1365 + t1499 * t1366;
t1349 = t1499 * t1365 + t1497 * t1366;
t1348 = -t1502 * t1359 + t1505 * t1360;
t1347 = t1505 * t1359 + t1502 * t1360;
t1346 = -t1497 * t1354 + t1499 * t1355;
t1345 = t1499 * t1354 + t1497 * t1355;
t1344 = t1501 * t1353 + t1504 * t1356;
t1343 = t1504 * t1353 - t1501 * t1356;
t1342 = -t1502 * t1351 + t1505 * t1352;
t1341 = t1505 * t1351 + t1502 * t1352;
t1340 = t1500 * t1348 + t1498 * t1378;
t1339 = t1498 * t1348 - t1500 * t1378;
t1338 = t1500 * t1342 + t1498 * t1376;
t1337 = t1498 * t1342 - t1500 * t1376;
t1336 = -t1502 * t1349 + t1505 * t1350;
t1335 = t1505 * t1349 + t1502 * t1350;
t1334 = t1500 * t1336 + t1498 * t1399;
t1333 = t1498 * t1336 - t1500 * t1399;
t1332 = -t1502 * t1345 + t1505 * t1346;
t1331 = t1505 * t1345 + t1502 * t1346;
t1330 = -t1501 * t1343 + t1504 * t1344;
t1329 = t1504 * t1343 + t1501 * t1344;
t1328 = t1500 * t1332 + t1498 * t1386;
t1327 = t1498 * t1332 - t1500 * t1386;
t1326 = -t1497 * t1329 + t1499 * t1330;
t1325 = t1499 * t1329 + t1497 * t1330;
t1324 = -t1502 * t1325 + t1505 * t1326;
t1323 = t1505 * t1325 + t1502 * t1326;
t1322 = t1500 * t1324 + t1498 * t1375;
t1321 = t1498 * t1324 - t1500 * t1375;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1417, 0, 0, 0, 0, 0, 0, t1408, t1404, t1402, t1369, 0, 0, 0, 0, 0, 0, t1363, t1367, t1357, t1333, 0, 0, 0, 0, 0, 0, t1337, t1339, t1327, t1321; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1476, t1475, 0, t1503 * t1477 + t1506 * t1478, 0, 0, 0, 0, 0, 0, -t1503 * t1470 + t1500 * t1522, t1503 * t1469 - t1498 * t1522, t1503 * t1472 + t1506 * t1473, t1503 * t1418 - t1506 * t1464, 0, 0, 0, 0, 0, 0, t1503 * t1409 - t1506 * t1435, t1503 * t1405 - t1506 * t1430, t1503 * t1403 - t1506 * t1414, t1503 * t1371 - t1506 * t1384, 0, 0, 0, 0, 0, 0, t1503 * t1364 - t1506 * t1370, t1503 * t1368 - t1506 * t1380, t1503 * t1358 - t1506 * t1361, t1503 * t1334 - t1506 * t1335, 0, 0, 0, 0, 0, 0, t1503 * t1338 - t1506 * t1341, t1503 * t1340 - t1506 * t1347, t1503 * t1328 - t1506 * t1331, t1503 * t1322 - t1506 * t1323; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1475, t1476, 0, -t1506 * t1477 + t1503 * t1478, 0, 0, 0, 0, 0, 0, t1506 * t1470 + t1500 * t1523, -t1506 * t1469 - t1498 * t1523, -t1506 * t1472 + t1503 * t1473, -t1506 * t1418 - t1503 * t1464, 0, 0, 0, 0, 0, 0, -t1506 * t1409 - t1503 * t1435, -t1506 * t1405 - t1503 * t1430, -t1506 * t1403 - t1503 * t1414, -t1506 * t1371 - t1503 * t1384, 0, 0, 0, 0, 0, 0, -t1506 * t1364 - t1503 * t1370, -t1506 * t1368 - t1503 * t1380, -t1506 * t1358 - t1503 * t1361, -t1506 * t1334 - t1503 * t1335, 0, 0, 0, 0, 0, 0, -t1506 * t1338 - t1503 * t1341, -t1506 * t1340 - t1503 * t1347, -t1506 * t1328 - t1503 * t1331, -t1506 * t1322 - t1503 * t1323; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1507, -qJDD(1), 0, t1477, 0, 0, 0, 0, 0, 0, -t1470, t1469, t1472, t1418, 0, 0, 0, 0, 0, 0, t1409, t1405, t1403, t1371, 0, 0, 0, 0, 0, 0, t1364, t1368, t1358, t1334, 0, 0, 0, 0, 0, 0, t1338, t1340, t1328, t1322; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1507, 0, t1478, 0, 0, 0, 0, 0, 0, t1490, -t1524, t1473, -t1464, 0, 0, 0, 0, 0, 0, -t1435, -t1430, -t1414, -t1384, 0, 0, 0, 0, 0, 0, -t1370, -t1380, -t1361, -t1335, 0, 0, 0, 0, 0, 0, -t1341, -t1347, -t1331, -t1323; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1417, 0, 0, 0, 0, 0, 0, t1408, t1404, t1402, t1369, 0, 0, 0, 0, 0, 0, t1363, t1367, t1357, t1333, 0, 0, 0, 0, 0, 0, t1337, t1339, t1327, t1321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1493 * t1507, t1483, t1490, t1446, 0, 0, 0, 0, 0, 0, t1436, t1431, t1415, t1385, 0, 0, 0, 0, 0, 0, t1372, t1381, t1362, t1336, 0, 0, 0, 0, 0, 0, t1342, t1348, t1332, t1324; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1483, -t1531, -t1524, t1445, 0, 0, 0, 0, 0, 0, -t1442, -t1444, t1466, -t1428, 0, 0, 0, 0, 0, 0, -t1410, -t1412, -t1419, -t1399, 0, 0, 0, 0, 0, 0, -t1376, -t1378, -t1386, -t1375; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1490, t1524, -t1473, t1464, 0, 0, 0, 0, 0, 0, t1435, t1430, t1414, t1384, 0, 0, 0, 0, 0, 0, t1370, t1380, t1361, t1335, 0, 0, 0, 0, 0, 0, t1341, t1347, t1331, t1323; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1465, t1461, t1443, t1407, 0, 0, 0, 0, 0, 0, t1395, t1401, t1388, t1350, 0, 0, 0, 0, 0, 0, t1352, t1360, t1346, t1326; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1462, t1453, t1441, t1406, 0, 0, 0, 0, 0, 0, t1394, t1400, t1387, t1349, 0, 0, 0, 0, 0, 0, t1351, t1359, t1345, t1325; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1442, t1444, -t1466, t1428, 0, 0, 0, 0, 0, 0, t1410, t1412, t1419, t1399, 0, 0, 0, 0, 0, 0, t1376, t1378, t1386, t1375; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1421, t1422, t1411, t1366, 0, 0, 0, 0, 0, 0, t1374, t1383, t1355, t1330; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1423, t1437, t1413, t1365, 0, 0, 0, 0, 0, 0, t1373, t1382, t1354, t1329; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1410, t1412, t1419, t1399, 0, 0, 0, 0, 0, 0, t1376, t1378, t1386, t1375; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1396, t1397, t1377, t1344; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1398, t1416, t1379, t1343; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1376, t1378, t1386, t1375;];
f_new_reg = t1;
