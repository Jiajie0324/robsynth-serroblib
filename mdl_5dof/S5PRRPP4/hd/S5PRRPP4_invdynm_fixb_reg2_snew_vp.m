% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PRRPP4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,theta1]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:41
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PRRPP4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPP4_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPP4_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRPP4_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRPP4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5PRRPP4_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:41:21
% EndTime: 2019-12-31 17:41:28
% DurationCPUTime: 7.00s
% Computational Cost: add. (10441->484), mult. (22629->474), div. (0->0), fcn. (11833->6), ass. (0->294)
t792 = qJD(3) ^ 2;
t788 = sin(qJ(3));
t778 = t788 ^ 2;
t793 = qJD(2) ^ 2;
t880 = t778 * t793;
t753 = t792 + t880;
t790 = cos(qJ(3));
t758 = t788 * t793 * t790;
t749 = qJDD(3) - t758;
t859 = t790 * t749;
t699 = -t753 * t788 + t859;
t847 = qJD(2) * qJD(3);
t768 = t790 * t847;
t845 = t788 * qJDD(2);
t732 = 0.2e1 * t768 + t845;
t789 = sin(qJ(2));
t791 = cos(qJ(2));
t638 = t699 * t789 + t732 * t791;
t642 = t699 * t791 - t732 * t789;
t784 = sin(pkin(7));
t785 = cos(pkin(7));
t587 = qJ(1) * (t638 * t784 - t642 * t785);
t891 = qJ(1) * (t638 * t785 + t642 * t784);
t635 = pkin(1) * t638;
t898 = pkin(5) * t638;
t867 = t788 * t749;
t692 = t753 * t790 + t867;
t831 = -pkin(1) * t692 + pkin(5) * t642;
t748 = qJDD(3) + t758;
t725 = t790 * t748;
t754 = -t792 + t880;
t698 = t754 * t788 + t725;
t842 = t791 * qJDD(2);
t653 = t698 * t789 - t788 * t842;
t844 = t789 * qJDD(2);
t657 = t698 * t791 + t788 * t844;
t603 = t653 * t785 + t657 * t784;
t933 = t653 * t784 - t657 * t785;
t767 = t788 * t847;
t843 = t790 * qJDD(2);
t735 = -0.2e1 * t767 + t843;
t860 = t790 * t735;
t870 = t788 * t732;
t669 = -t860 + t870;
t779 = t790 ^ 2;
t745 = (t778 - t779) * t793;
t627 = t669 * t789 + t745 * t791;
t629 = t669 * t791 - t745 * t789;
t582 = t627 * t785 + t629 * t784;
t932 = t627 * t784 - t629 * t785;
t879 = t779 * t793;
t755 = -t792 + t879;
t697 = -t755 * t790 + t867;
t652 = t697 * t789 + t790 * t842;
t656 = t697 * t791 - t789 * t843;
t931 = t652 * t785 + t656 * t784;
t604 = t652 * t784 - t656 * t785;
t850 = t778 + t779;
t741 = t850 * qJDD(2);
t744 = t850 * t793;
t676 = t741 * t789 + t744 * t791;
t678 = t741 * t791 - t744 * t789;
t615 = qJ(1) * (t676 * t784 - t678 * t785);
t890 = qJ(1) * (t676 * t785 + t678 * t784);
t746 = g(1) * t785 + g(2) * t784;
t830 = g(1) * t784 - g(2) * t785;
t808 = t746 * t791 - t789 * t830;
t828 = t789 * t746 + t791 * t830;
t829 = -t789 * t828 - t791 * t808;
t622 = t789 * t808 - t791 * t828;
t878 = t784 * t622;
t930 = t785 * t829 + t878;
t873 = t785 * t622;
t929 = -t784 * t829 + t873;
t854 = pkin(2) * t732 + pkin(6) * t699;
t672 = pkin(1) * t676;
t927 = pkin(2) * t692;
t900 = pkin(4) * t748;
t897 = pkin(5) * t676;
t671 = pkin(5) * t678;
t895 = pkin(6) * t692;
t733 = t768 + t845;
t926 = t733 + t768;
t742 = t791 * t793 + t844;
t780 = g(3) - qJDD(1);
t709 = pkin(5) * t742 - t780 * t791;
t743 = -t789 * t793 + t842;
t814 = -pkin(5) * t743 - t780 * t789;
t917 = t742 * t785 + t743 * t784;
t925 = qJ(1) * t917 + t785 * t709 - t784 * t814;
t674 = -t742 * t784 + t743 * t785;
t924 = -qJ(1) * t674 + t784 * t709 + t785 * t814;
t766 = t790 * t780;
t665 = -pkin(2) * t793 + qJDD(2) * pkin(6) - t808;
t871 = t788 * t665;
t636 = t766 + t871;
t851 = -t665 * t790 + t780 * t788;
t593 = t636 * t788 - t790 * t851;
t916 = pkin(3) * t753 + qJ(4) * t749;
t756 = -t792 - t879;
t915 = pkin(3) * t748 + qJ(4) * t756;
t846 = (qJD(4) * qJD(3));
t774 = 2 * t846;
t848 = qJD(2) * t790;
t837 = qJD(5) * t848;
t914 = -0.2e1 * t837 + t774;
t775 = -2 * t846;
t913 = t775 - t927;
t688 = t755 * t788 + t859;
t853 = pkin(2) * t744 + pkin(6) * t741;
t849 = qJD(2) * t788;
t747 = -qJD(3) * pkin(4) - qJ(5) * t849;
t912 = t747 * t849 + qJDD(5);
t689 = t756 * t788 + t725;
t904 = pkin(2) * t689;
t911 = -t904 - t915;
t734 = -t767 + t843;
t815 = -pkin(3) * t790 - qJ(4) * t788;
t729 = t815 * qJD(2);
t813 = pkin(3) * t792 - qJDD(3) * qJ(4) - t729 * t848 + t851;
t807 = pkin(4) * t879 + qJ(5) * t734 - qJD(3) * t747 + t813;
t580 = -t807 + t914;
t817 = qJDD(3) * pkin(3) + qJ(4) * t792 - qJDD(4) - t766;
t803 = -t733 * qJ(5) - t817 + t871 - t900;
t838 = qJ(5) * qJD(3) * t790;
t581 = (t838 + (-0.2e1 * qJD(5) + t729) * t788) * qJD(2) + t803;
t905 = pkin(3) + pkin(4);
t910 = qJ(4) * t580 - t581 * t905;
t909 = -t746 * t785 - t784 * t830;
t907 = -t784 * t746 + t785 * t830;
t613 = (qJD(2) * t729 + t665) * t788 - t817;
t906 = -(t734 + t735) * pkin(4) + (t756 + t879) * qJ(5);
t868 = t788 * t748;
t696 = t756 * t790 - t868;
t637 = t696 * t789 + t735 * t791;
t899 = pkin(5) * t637;
t896 = pkin(6) * t689;
t893 = t734 * pkin(4);
t641 = t696 * t791 - t735 * t789;
t892 = qJ(1) * (t637 * t785 + t641 * t784);
t887 = qJ(4) * t732;
t886 = qJ(4) * t735;
t885 = qJ(4) * t744;
t884 = qJ(5) * t580;
t883 = qJ(5) * t581;
t882 = qJ(5) * t748;
t881 = qJ(5) * t749;
t874 = t784 * t780;
t872 = t785 * t780;
t812 = qJDD(2) * pkin(2) + pkin(6) * t793 + t828;
t648 = t788 * t812;
t869 = t788 * t735;
t649 = t790 * t812;
t861 = t790 * t732;
t856 = pkin(2) * t812 + pkin(6) * t593;
t855 = pkin(2) * t735 + pkin(6) * t696;
t841 = 0.2e1 * t849;
t840 = -t648 - t854;
t839 = t649 + t855;
t832 = -pkin(1) * t689 + pkin(5) * t641;
t825 = t789 * t758;
t824 = t791 * t758;
t806 = t734 * pkin(3) + qJ(4) * t926 + t812;
t601 = (pkin(3) * qJD(3) - (2 * qJD(4))) * t849 - t806;
t798 = t601 - t912;
t578 = qJ(5) * t879 + t798 - t893;
t520 = -t578 * t905 - t884;
t538 = -qJ(4) * t578 - t883;
t542 = t580 * t790 + t581 * t788;
t823 = -pkin(2) * t578 + pkin(6) * t542 + t520 * t790 + t538 * t788;
t804 = qJD(4) * t841 + t806;
t799 = -pkin(3) * t767 + t804;
t794 = t893 + (t753 - t879) * qJ(5) + t799 + t912;
t566 = t794 + t887;
t645 = t732 * t905 - t881;
t822 = t566 * t788 + t645 * t790 + t854;
t762 = 0.2e1 * t837;
t801 = qJ(5) * t843 + t807;
t567 = -t744 * t905 + t762 + t775 + t801;
t797 = qJD(5) * t841 + (-t729 * t788 - t838) * qJD(2) - t803;
t796 = qJ(5) * t845 + t797;
t573 = t796 - t885;
t821 = t567 * t790 + t573 * t788 - t853;
t610 = t774 - t813;
t598 = pkin(3) * t744 + t610;
t600 = t613 + t885;
t820 = t598 * t790 + t600 * t788 + t853;
t819 = t853 + t593;
t595 = (t735 - t767) * pkin(3) + t804;
t557 = t595 - t906 + t912;
t685 = t882 + t886;
t818 = t557 * t790 + t685 * t788 + t855;
t816 = -pkin(3) * t613 + qJ(4) * t610;
t592 = t636 * t790 + t788 * t851;
t666 = t861 + t869;
t691 = -t754 * t790 + t868;
t594 = t799 + t887;
t811 = pkin(3) * t861 + t594 * t788 + t854;
t810 = qJ(4) * t869 + t595 * t790 + t855;
t809 = t813 - t916;
t561 = t610 * t790 + t613 * t788;
t805 = pkin(6) * t561 + (-pkin(2) + t815) * t601;
t802 = pkin(4) * t753 - t807;
t800 = t802 + t914;
t795 = t797 + t900;
t770 = qJ(4) * t843;
t728 = pkin(3) * t845 - t770;
t724 = t850 * t847;
t710 = t845 * t905 - t770;
t705 = qJDD(3) * t789 + t724 * t791;
t704 = t733 * t790 - t778 * t847;
t703 = -qJDD(3) * t791 + t724 * t789;
t702 = -t734 * t788 - t779 * t847;
t687 = t926 * t788;
t686 = (t734 - t767) * t790;
t662 = t704 * t791 - t825;
t661 = t702 * t791 + t825;
t660 = t704 * t789 + t824;
t659 = t702 * t789 - t824;
t647 = -pkin(1) * t742 + t808;
t646 = pkin(1) * t743 + t828;
t634 = pkin(1) * t637;
t625 = -t703 * t784 + t705 * t785;
t624 = t703 * t785 + t705 * t784;
t619 = pkin(1) * t622;
t618 = -t649 + t895;
t617 = -t648 - t896;
t614 = pkin(1) * t780 + pkin(5) * t829;
t612 = -t851 + t927;
t611 = t636 - t904;
t609 = -t660 * t784 + t662 * t785;
t608 = -t659 * t784 + t661 * t785;
t607 = t660 * t785 + t662 * t784;
t606 = t659 * t785 + t661 * t784;
t586 = qJ(1) * (-t637 * t784 + t641 * t785);
t579 = t613 + t911;
t576 = t809 + t913;
t575 = t840 - t635;
t574 = t634 + t839;
t572 = t592 * t791 - t897;
t571 = t592 * t789 + t671;
t569 = t593 * t791 - t789 * t812;
t568 = t593 * t789 + t791 * t812;
t565 = -pkin(3) * t870 + t594 * t790 - t895;
t564 = qJ(4) * t860 - t595 * t788 - t896;
t560 = t610 * t788 - t613 * t790;
t559 = t672 + t819;
t555 = t762 - t802 + t913 - t916;
t554 = t581 - t900 + t911;
t553 = -t598 * t788 + t600 * t790;
t552 = -t612 * t789 + t618 * t791 + t898;
t551 = -t611 * t789 + t617 * t791 - t899;
t550 = t635 + t811;
t549 = t634 + t810;
t548 = -t557 * t788 + t685 * t790 - t896;
t547 = t566 * t790 - t645 * t788 - t895;
t546 = t612 * t791 + t618 * t789 - t831;
t545 = t611 * t791 + t617 * t789 + t832;
t544 = t553 * t791 - t728 * t789 - t897;
t543 = t553 * t789 + t728 * t791 + t671;
t541 = t580 * t788 - t581 * t790;
t539 = t672 + t820;
t536 = t561 * t791 + t601 * t789;
t535 = t561 * t789 - t601 * t791;
t534 = pkin(1) * t568 + t856;
t533 = t635 + t822;
t532 = t634 + t818;
t531 = -t567 * t788 + t573 * t790;
t530 = -pkin(2) * t560 - t816;
t529 = t564 * t791 - t579 * t789 - t899;
t528 = t565 * t791 - t576 * t789 - t898;
t527 = -pkin(6) * t560 + (pkin(3) * t788 - qJ(4) * t790) * t601;
t526 = t821 - t672;
t525 = t531 * t791 + t710 * t789 + t897;
t524 = t531 * t789 - t710 * t791 - t671;
t523 = t564 * t789 + t579 * t791 + t832;
t522 = -pkin(5) * t568 - (pkin(2) * t789 - pkin(6) * t791) * t592;
t521 = t565 * t789 + t576 * t791 + t831;
t519 = t542 * t791 + t578 * t789;
t518 = t542 * t789 - t578 * t791;
t516 = t547 * t791 - t555 * t789 - t898;
t515 = t548 * t791 - t554 * t789 - t899;
t514 = pkin(5) * t569 - (-pkin(2) * t791 - pkin(6) * t789 - pkin(1)) * t592;
t513 = t547 * t789 + t555 * t791 + t831;
t512 = t548 * t789 + t554 * t791 + t832;
t511 = -pkin(2) * t541 - t910;
t510 = pkin(1) * t535 + t805;
t509 = -pkin(6) * t541 - t520 * t788 + t538 * t790;
t508 = -pkin(5) * t535 + t527 * t791 - t530 * t789;
t507 = -pkin(1) * t560 + pkin(5) * t536 + t527 * t789 + t530 * t791;
t506 = pkin(1) * t518 + t823;
t505 = -pkin(5) * t518 + t509 * t791 - t511 * t789;
t504 = -pkin(1) * t541 + pkin(5) * t519 + t509 * t789 + t511 * t791;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t874, -t872, -t907, -qJ(1) * t907, 0, 0, t674, 0, -t917, 0, t924, t925, t929, pkin(5) * t873 + qJ(1) * t929 - t784 * t614, t609, t932, -t933, t608, t604, t625, -t545 * t784 + t551 * t785 - t892, -t784 * t546 + t785 * t552 + t891, -t571 * t784 + t572 * t785 - t890, t785 * t522 - t784 * t514 - qJ(1) * (t568 * t785 + t569 * t784), t609, -t933, -t932, t625, -t604, t608, -t523 * t784 + t529 * t785 - t892, -t543 * t784 + t544 * t785 - t890, -t521 * t784 + t528 * t785 - t891, t785 * t508 - t784 * t507 - qJ(1) * (t535 * t785 + t536 * t784), t609, -t932, t933, t608, t604, t625, -t512 * t784 + t515 * t785 - t892, -t513 * t784 + t516 * t785 - t891, -t784 * t524 + t785 * t525 + t890, t785 * t505 - t784 * t504 - qJ(1) * (t518 * t785 + t519 * t784); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t872, -t874, t909, qJ(1) * t909, 0, 0, t917, 0, t674, 0, -t925, t924, t930, pkin(5) * t878 + qJ(1) * t930 + t785 * t614, t607, -t582, t603, t606, -t931, t624, t545 * t785 + t551 * t784 + t586, t785 * t546 + t784 * t552 + t587, t571 * t785 + t572 * t784 - t615, t784 * t522 + t785 * t514 + qJ(1) * (-t568 * t784 + t569 * t785), t607, t603, t582, t624, t931, t606, t523 * t785 + t529 * t784 + t586, t543 * t785 + t544 * t784 - t615, t521 * t785 + t528 * t784 - t587, t784 * t508 + t785 * t507 + qJ(1) * (-t535 * t784 + t536 * t785), t607, t582, -t603, t606, -t931, t624, t512 * t785 + t515 * t784 + t586, t513 * t785 + t516 * t784 - t587, t785 * t524 + t784 * t525 + t615, t784 * t505 + t785 * t504 + qJ(1) * (-t518 * t784 + t519 * t785); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t830, t746, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t646, t647, 0, -t619, t687, t666, t691, t686, t688, 0, t574, t575, t559, t534, t687, t691, -t666, 0, -t688, t686, t549, t539, t550, t510, t687, -t666, -t691, t686, t688, 0, t532, t533, t526, t506; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t780, -t830, 0, 0, 0, t743, 0, -t742, 0, t814, t709, t622, pkin(5) * t622, t662, -t629, t657, t661, -t656, t705, t551, t552, t572, t522, t662, t657, t629, t705, t656, t661, t529, t544, t528, t508, t662, t629, -t657, t661, -t656, t705, t515, t516, t525, t505; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t780, 0, -t746, 0, 0, 0, t742, 0, t743, 0, -t709, t814, t829, t614, t660, -t627, t653, t659, -t652, t703, t545, t546, t571, t514, t660, t653, t627, t703, t652, t659, t523, t543, t521, t507, t660, t627, -t653, t659, -t652, t703, t512, t513, t524, t504; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t830, t746, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t646, t647, 0, -t619, t687, t666, t691, t686, t688, 0, t574, t575, t559, t534, t687, t691, -t666, 0, -t688, t686, t549, t539, t550, t510, t687, -t666, -t691, t686, t688, 0, t532, t533, t526, t506; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t793, 0, 0, -t780, -t828, 0, t704, -t669, t698, t702, -t697, t724, t617, t618, t592, pkin(6) * t592, t704, t698, t669, t724, t697, t702, t564, t553, t565, t527, t704, t669, -t698, t702, -t697, t724, t548, t547, t531, t509; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t793, 0, qJDD(2), 0, t780, 0, -t808, 0, t758, -t745, -t845, -t758, -t843, -qJDD(3), t611, t612, 0, pkin(2) * t592, t758, -t845, t745, -qJDD(3), t843, -t758, t579, t728, t576, t530, t758, t745, t845, -t758, -t843, -qJDD(3), t554, t555, -t710, t511; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t828, t808, 0, 0, t687, t666, t691, t686, t688, 0, t839, t840, t819, t856, t687, t691, -t666, 0, -t688, t686, t810, t820, t811, t805, t687, -t666, -t691, t686, t688, 0, t818, t822, t821, t823; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t733, t735, t748, -t768, t755, t768, 0, -t812, t636, 0, t733, t748, -t735, t768, -t755, -t768, t886, t600, t594, -qJ(4) * t601, t733, -t735, -t748, -t768, t755, t768, t685, t566, t573, t538; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t767, t732, -t754, t734, t749, -t767, t812, 0, -t851, 0, t767, -t754, -t732, -t767, -t749, t734, t595, t598, pkin(3) * t732, -pkin(3) * t601, t767, -t732, t754, t734, t749, -t767, t557, t645, t567, t520; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t758, t745, t845, t758, t843, qJDD(3), -t636, t851, 0, 0, -t758, t845, -t745, qJDD(3), -t843, t758, -t613 + t915, -t728, t774 - t809, t816, -t758, -t745, -t845, t758, t843, qJDD(3), t795 + t915, t800 + t916, t710, t910; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t733, t748, -t735, t768, -t755, -t768, 0, t613, -t601, 0, t733, -t735, -t748, -t768, t755, t768, t882, t794, t796, -t883; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t758, t845, -t745, qJDD(3), -t843, t758, -t613, 0, t610, 0, -t758, -t745, -t845, t758, t843, qJDD(3), t795, t800, pkin(4) * t845, -pkin(4) * t581; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t767, t754, t732, t767, t749, -t734, t601, -t610, 0, 0, -t767, t732, -t754, -t734, -t749, t767, t798 + t906, -pkin(4) * t732 + t881, pkin(4) * t744 - t801 + t914, pkin(4) * t578 + t884; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t733, -t735, -t748, -t768, t755, t768, 0, -t578, -t581, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t767, t732, -t754, -t734, -t749, t767, t578, 0, t580, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t758, t745, t845, -t758, -t843, -qJDD(3), t581, -t580, 0, 0;];
m_new_reg = t1;
