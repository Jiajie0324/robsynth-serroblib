% Calculate inertial parameters regressor of coriolis matrix for
% S5PRRPP4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,theta1]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:41
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PRRPP4_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPP4_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPP4_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5PRRPP4_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:41:17
% EndTime: 2019-12-31 17:41:18
% DurationCPUTime: 0.82s
% Computational Cost: add. (270->90), mult. (531->88), div. (0->0), fcn. (397->2), ass. (0->63)
t45 = sin(qJ(3));
t39 = t45 * qJ(4);
t46 = cos(qJ(3));
t72 = pkin(3) + pkin(4);
t77 = t72 * t46 + t39;
t48 = -t46 * pkin(3) - t39;
t55 = t46 * qJD(4);
t76 = t48 * qJD(3) + t55;
t75 = pkin(6) - qJ(5);
t40 = t45 * pkin(3);
t65 = t46 * qJ(4);
t19 = -t40 + t65;
t34 = t45 * qJD(4);
t74 = t19 * qJD(3) + t34;
t73 = -t40 / 0.2e1;
t71 = t45 * pkin(4);
t69 = t72 * t45;
t12 = pkin(2) + t77;
t15 = t19 - t71;
t1 = t12 * t15;
t68 = t1 * qJD(2);
t2 = t12 * t46 + t15 * t45;
t67 = t2 * qJD(2);
t3 = -t12 * t45 + t15 * t46;
t66 = t3 * qJD(2);
t17 = -pkin(2) + t48;
t6 = t17 * t46 - t19 * t45;
t64 = t6 * qJD(2);
t7 = -t17 * t45 - t19 * t46;
t63 = t7 * qJD(2);
t18 = t75 * t45;
t20 = t75 * t46;
t9 = t18 * t45 + t20 * t46;
t62 = t9 * qJD(2);
t10 = t65 + t73 + (-pkin(4) / 0.2e1 - t72 / 0.2e1) * t45;
t61 = t10 * qJD(2);
t59 = t20 * qJD(3);
t43 = t45 ^ 2;
t44 = t46 ^ 2;
t24 = t43 + t44;
t58 = t24 * qJD(2);
t25 = t44 - t43;
t57 = t25 * qJD(2);
t22 = t25 * qJD(3);
t36 = t45 * qJD(2);
t35 = t45 * qJD(3);
t56 = t46 * qJD(2);
t37 = t46 * qJD(3);
t54 = pkin(2) * t36;
t53 = pkin(2) * t56;
t52 = pkin(6) * t35;
t51 = pkin(6) * t37;
t50 = t17 * t19 * qJD(2);
t49 = t17 * t36;
t42 = qJ(4) * qJD(4);
t41 = qJD(3) * qJ(4);
t33 = t43 * qJD(2);
t32 = t43 * qJD(4);
t28 = t45 * t37;
t27 = t45 * t56;
t26 = t45 * t55;
t11 = t69 / 0.2e1 + t73 - t71 / 0.2e1;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t35, -t37, 0, 0, 0, 0, 0, 0, 0, 0, -t35, 0, t37, t74, 0, 0, 0, 0, 0, 0, -t35, t37, 0, (t65 - t69) * qJD(3) + t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, t22, 0, -t28, 0, 0, -pkin(2) * t35, -pkin(2) * t37, 0, 0, t28, 0, -t22, 0, 0, -t28, -t7 * qJD(3) + t26, 0, -t6 * qJD(3) + t32, -t74 * t17, t28, -t22, 0, -t28, 0, 0, t3 * qJD(3) + t26, t2 * qJD(3) + t32, t24 * qJD(5), t1 * qJD(3) - t9 * qJD(5) + t12 * t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, t57, t37, -t27, -t35, 0, -t51 - t54, t52 - t53, 0, 0, t27, t37, -t57, 0, t35, -t27, -t51 - t63, t76, -t52 - t64, pkin(6) * t76 - t50, t27, -t57, -t37, -t27, -t35, 0, -t59 + t66, -t18 * qJD(3) + t67, qJD(3) * t77 - t55, t68 + (-t18 * qJ(4) - t20 * t72) * qJD(3) + t20 * qJD(4) + t11 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, t37, t33, -t49 + t51, 0, 0, 0, 0, 0, 0, t27, t33, -t37, t12 * t36 + t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, t11 * qJD(3) - t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t27, -t57, 0, t27, 0, 0, t54, t53, 0, 0, -t27, 0, t57, 0, 0, t27, t63, 0, t64, t50, -t27, t57, 0, t27, 0, 0, t45 * qJD(5) - t66, -t46 * qJD(5) - t67, 0, -t10 * qJD(5) - t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(4), t42, 0, 0, 0, 0, 0, 0, 0, qJD(4), 0, t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3), t41, 0, 0, 0, 0, 0, 0, 0, qJD(3), 0, t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36, -t56, 0, -t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t27, 0, -t33, t49, 0, 0, 0, 0, 0, 0, -t27, -t33, 0, (-qJD(2) * t12 - qJD(5)) * t45; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3), -t41, 0, 0, 0, 0, 0, 0, 0, -qJD(3), 0, -t41; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t35, t37, -t58, t10 * qJD(3) + t34 + t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t36, t56, 0, t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t4;
