% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRRR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:52
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRRR4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR4_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR4_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR4_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR4_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:52:36
% EndTime: 2020-01-03 11:52:47
% DurationCPUTime: 11.23s
% Computational Cost: add. (52284->414), mult. (74873->561), div. (0->0), fcn. (44118->10), ass. (0->286)
t823 = qJD(1) + qJD(3);
t816 = qJD(4) + t823;
t813 = t816 ^ 2;
t822 = qJDD(1) + qJDD(3);
t814 = qJDD(4) + t822;
t830 = sin(qJ(4));
t834 = cos(qJ(4));
t773 = t813 * t834 + t814 * t830;
t776 = t813 * t830 - t814 * t834;
t831 = sin(qJ(3));
t835 = cos(qJ(3));
t710 = t773 * t835 - t776 * t831;
t826 = g(1) - qJDD(2);
t750 = pkin(7) * t773 - t826 * t834;
t911 = pkin(7) * t776 - t826 * t830;
t653 = pkin(6) * t710 + t750 * t835 - t831 * t911;
t715 = t773 * t831 + t776 * t835;
t827 = sin(pkin(9));
t828 = cos(pkin(9));
t663 = t710 * t828 - t715 * t827;
t924 = pkin(6) * t715 + t750 * t831 + t835 * t911;
t593 = qJ(2) * t663 + t653 * t828 - t827 * t924;
t832 = sin(qJ(1));
t836 = cos(qJ(1));
t667 = t710 * t827 + t715 * t828;
t925 = t663 * t832 + t667 * t836;
t939 = qJ(2) * t667 + t653 * t827 + t828 * t924;
t951 = pkin(5) * t925 + t832 * t593 + t836 * t939;
t617 = t663 * t836 - t667 * t832;
t950 = -pkin(5) * t617 - t836 * t593 + t832 * t939;
t807 = g(2) * t836 + g(3) * t832;
t793 = qJDD(1) * pkin(1) - t807;
t806 = g(2) * t832 - t836 * g(3);
t838 = qJD(1) ^ 2;
t794 = -pkin(1) * t838 - t806;
t733 = -t828 * t793 + t794 * t827;
t725 = qJDD(1) * pkin(2) - t733;
t734 = t793 * t827 + t794 * t828;
t726 = -pkin(2) * t838 + t734;
t678 = t725 * t831 + t726 * t835;
t821 = t823 ^ 2;
t672 = -pkin(3) * t821 + t678;
t677 = -t835 * t725 + t726 * t831;
t843 = pkin(3) * t822 - t677;
t626 = t672 * t830 - t834 * t843;
t627 = t834 * t672 + t830 * t843;
t863 = t626 * t830 + t834 * t627;
t582 = t626 * t834 - t627 * t830;
t888 = t582 * t835;
t558 = -t831 * t863 + t888;
t889 = t582 * t831;
t913 = t835 * t863 + t889;
t542 = t558 * t828 - t827 * t913;
t936 = t558 * t827 + t828 * t913;
t949 = t542 * t832 + t836 * t936;
t948 = -t542 * t836 + t832 * t936;
t784 = t821 * t835 + t822 * t831;
t787 = t821 * t831 - t822 * t835;
t718 = t784 * t828 - t787 * t827;
t754 = pkin(6) * t784 - t826 * t835;
t912 = pkin(6) * t787 - t826 * t831;
t661 = qJ(2) * t718 + t754 * t828 - t827 * t912;
t722 = t784 * t827 + t787 * t828;
t909 = t718 * t832 + t722 * t836;
t923 = qJ(2) * t722 + t754 * t827 + t828 * t912;
t941 = pkin(5) * t909 + t832 * t661 + t836 * t923;
t674 = t718 * t836 - t722 * t832;
t940 = -pkin(5) * t674 - t836 * t661 + t832 * t923;
t862 = t677 * t831 + t835 * t678;
t632 = t677 * t835 - t678 * t831;
t886 = t632 * t828;
t586 = -t827 * t862 + t886;
t887 = t632 * t827;
t914 = t828 * t862 + t887;
t935 = t586 * t832 + t836 * t914;
t934 = -t586 * t836 + t832 * t914;
t861 = t733 * t827 + t828 * t734;
t682 = t733 * t828 - t734 * t827;
t884 = t682 * t836;
t916 = t832 * t861 - t884;
t885 = t682 * t832;
t915 = t836 * t861 + t885;
t795 = qJDD(1) * t827 + t828 * t838;
t761 = qJ(2) * t795 - t826 * t828;
t796 = qJDD(1) * t828 - t827 * t838;
t846 = -qJ(2) * t796 - t826 * t827;
t894 = t832 * t795 - t796 * t836;
t908 = pkin(5) * t894 + t832 * t761 + t836 * t846;
t744 = t795 * t836 + t832 * t796;
t907 = -pkin(5) * t744 - t836 * t761 + t832 * t846;
t624 = -t813 * pkin(4) + t814 * pkin(8) + t627;
t829 = sin(qJ(5));
t833 = cos(qJ(5));
t614 = t624 * t829 + t833 * t826;
t615 = t624 * t833 - t826 * t829;
t577 = t829 * t614 + t833 * t615;
t892 = pkin(1) * t826;
t891 = pkin(2) * t826;
t801 = t833 * t813 * t829;
t790 = qJDD(5) + t801;
t883 = t790 * t829;
t791 = qJDD(5) - t801;
t882 = t791 * t829;
t881 = t791 * t833;
t824 = t829 ^ 2;
t878 = t813 * t824;
t623 = -t814 * pkin(4) - t813 * pkin(8) + t626;
t620 = t829 * t623;
t873 = t829 * t814;
t621 = t833 * t623;
t808 = t833 * t814;
t579 = pkin(3) * t582;
t872 = -pkin(2) * t558 - t579;
t871 = -pkin(4) * t623 + pkin(8) * t577;
t825 = t833 ^ 2;
t870 = t824 + t825;
t869 = qJD(5) * t816;
t837 = qJD(5) ^ 2;
t798 = -t837 - t878;
t742 = -t798 * t829 - t881;
t805 = t833 * t869;
t766 = 0.2e1 * t805 + t873;
t868 = -pkin(4) * t766 + pkin(8) * t742 + t620;
t809 = t825 * t813;
t800 = -t809 - t837;
t739 = t800 * t833 - t883;
t865 = t829 * t869;
t769 = t808 - 0.2e1 * t865;
t867 = pkin(4) * t769 + pkin(8) * t739 - t621;
t565 = t577 * t830 - t623 * t834;
t866 = pkin(3) * t565 + t871;
t802 = -t832 * qJDD(1) - t836 * t838;
t864 = pkin(5) * t802 + t836 * g(1);
t858 = -t832 * t806 - t807 * t836;
t857 = t830 * t801;
t856 = t834 * t801;
t566 = t577 * t834 + t623 * t830;
t550 = t565 * t835 + t566 * t831;
t855 = pkin(2) * t550 + t866;
t772 = t870 * t814;
t777 = t809 + t878;
t854 = pkin(4) * t777 + pkin(8) * t772 + t577;
t691 = t742 * t830 - t766 * t834;
t853 = pkin(3) * t691 + t868;
t690 = t739 * t830 + t769 * t834;
t852 = pkin(3) * t690 + t867;
t851 = -pkin(3) * t776 - t626;
t850 = -pkin(2) * t787 - t677;
t709 = t772 * t830 + t777 * t834;
t849 = pkin(3) * t709 + t854;
t692 = t739 * t834 - t769 * t830;
t642 = t690 * t835 + t692 * t831;
t848 = pkin(2) * t642 + t852;
t693 = t742 * t834 + t766 * t830;
t643 = t691 * t835 + t693 * t831;
t847 = pkin(2) * t643 + t853;
t576 = t614 * t833 - t615 * t829;
t845 = t806 * t836 - t807 * t832;
t844 = -pkin(2) * t715 + t851;
t713 = t772 * t834 - t777 * t830;
t669 = t709 * t835 + t713 * t831;
t842 = pkin(2) * t669 + t849;
t841 = -pkin(2) * t784 - t678;
t840 = -pkin(3) * t773 - t627;
t839 = -pkin(2) * t710 + t840;
t803 = qJDD(1) * t836 - t832 * t838;
t799 = t809 - t837;
t797 = t837 - t878;
t780 = t833 * t790;
t779 = pkin(5) * t803 + g(1) * t832;
t778 = -t809 + t878;
t768 = t808 - t865;
t767 = t805 + t873;
t762 = t870 * t869;
t746 = qJDD(5) * t830 + t762 * t834;
t745 = -qJDD(5) * t834 + t762 * t830;
t741 = t799 * t829 + t881;
t740 = -t797 * t829 + t780;
t738 = t799 * t833 - t882;
t737 = t797 * t833 + t883;
t736 = t798 * t833 - t882;
t735 = t800 * t829 + t780;
t732 = t767 * t833 - t824 * t869;
t731 = -t768 * t829 - t825 * t869;
t728 = (t768 - t865) * t833;
t727 = (t767 + t805) * t829;
t705 = pkin(1) * t796 - t733;
t704 = -pkin(1) * t795 - t734;
t703 = -t766 * t829 + t769 * t833;
t702 = t766 * t833 + t769 * t829;
t701 = t740 * t834 + t830 * t873;
t700 = t738 * t834 + t830 * t808;
t699 = t740 * t830 - t834 * t873;
t698 = t738 * t830 - t834 * t808;
t697 = t732 * t834 - t857;
t696 = t731 * t834 + t857;
t695 = t732 * t830 + t856;
t694 = t731 * t830 - t856;
t687 = -t745 * t831 + t746 * t835;
t686 = t745 * t835 + t746 * t831;
t685 = t703 * t834 + t778 * t830;
t684 = t703 * t830 - t778 * t834;
t679 = pkin(1) * t682;
t676 = qJ(2) * t861 + t892;
t670 = -t709 * t831 + t713 * t835;
t657 = -t699 * t831 + t701 * t835;
t656 = -t698 * t831 + t700 * t835;
t655 = t699 * t835 + t701 * t831;
t654 = t698 * t835 + t700 * t831;
t649 = -t695 * t831 + t697 * t835;
t648 = -t694 * t831 + t696 * t835;
t647 = t695 * t835 + t697 * t831;
t646 = t694 * t835 + t696 * t831;
t645 = -t691 * t831 + t693 * t835;
t644 = -t690 * t831 + t692 * t835;
t639 = -pkin(1) * t722 + t850;
t638 = -pkin(1) * t718 + t841;
t637 = -t686 * t827 + t687 * t828;
t636 = t686 * t828 + t687 * t827;
t635 = -t684 * t831 + t685 * t835;
t634 = t684 * t835 + t685 * t831;
t629 = pkin(2) * t632;
t628 = pkin(6) * t862 + t891;
t619 = -t669 * t827 + t670 * t828;
t618 = t669 * t828 + t670 * t827;
t611 = -t655 * t827 + t657 * t828;
t610 = -t654 * t827 + t656 * t828;
t609 = t655 * t828 + t657 * t827;
t608 = t654 * t828 + t656 * t827;
t607 = -t647 * t827 + t649 * t828;
t606 = -t646 * t827 + t648 * t828;
t605 = t647 * t828 + t649 * t827;
t604 = t646 * t828 + t648 * t827;
t603 = -pkin(8) * t736 + t621;
t602 = -pkin(8) * t735 + t620;
t601 = -pkin(4) * t736 + t615;
t600 = -pkin(4) * t735 + t614;
t599 = -t643 * t827 + t645 * t828;
t598 = -t642 * t827 + t644 * t828;
t597 = t643 * t828 + t645 * t827;
t596 = t642 * t828 + t644 * t827;
t595 = -t634 * t827 + t635 * t828;
t594 = t634 * t828 + t635 * t827;
t589 = -pkin(1) * t667 + t844;
t588 = -pkin(1) * t663 + t839;
t578 = pkin(3) * t826 + pkin(7) * t863;
t573 = -pkin(7) * t709 + t576 * t834;
t572 = pkin(7) * t713 + t576 * t830;
t571 = -pkin(1) * t586 - t629;
t570 = -pkin(7) * t691 - t601 * t830 + t603 * t834;
t569 = -pkin(7) * t690 - t600 * t830 + t602 * t834;
t568 = -pkin(3) * t736 + pkin(7) * t693 + t601 * t834 + t603 * t830;
t567 = -pkin(3) * t735 + pkin(7) * t692 + t600 * t834 + t602 * t830;
t563 = pkin(6) * t886 + qJ(2) * t586 - t628 * t827;
t562 = pkin(6) * t887 + qJ(2) * t914 + t628 * t828 + t892;
t561 = pkin(1) * t597 + t847;
t560 = pkin(1) * t596 + t848;
t554 = pkin(1) * t618 + t842;
t553 = -pkin(6) * t669 - t572 * t831 + t573 * t835;
t552 = pkin(6) * t670 + t572 * t835 + t573 * t831;
t551 = -t565 * t831 + t566 * t835;
t548 = -pkin(6) * t643 - t568 * t831 + t570 * t835;
t547 = -pkin(6) * t642 - t567 * t831 + t569 * t835;
t546 = -pkin(2) * t736 + pkin(6) * t645 + t568 * t835 + t570 * t831;
t545 = -pkin(2) * t735 + pkin(6) * t644 + t567 * t835 + t569 * t831;
t544 = -pkin(7) * t565 - (pkin(4) * t830 - pkin(8) * t834) * t576;
t539 = pkin(6) * t558 + pkin(7) * t888 - t578 * t831;
t538 = pkin(6) * t913 + pkin(7) * t889 + t578 * t835 + t891;
t537 = pkin(7) * t566 - (-pkin(4) * t834 - pkin(8) * t830 - pkin(3)) * t576;
t536 = -qJ(2) * t618 - t552 * t827 + t553 * t828;
t535 = qJ(2) * t619 + t552 * t828 + t553 * t827;
t534 = -t550 * t827 + t551 * t828;
t533 = t550 * t828 + t551 * t827;
t532 = -pkin(1) * t542 + t872;
t531 = -qJ(2) * t597 - t546 * t827 + t548 * t828;
t530 = -qJ(2) * t596 - t545 * t827 + t547 * t828;
t529 = -pkin(1) * t736 + qJ(2) * t599 + t546 * t828 + t548 * t827;
t528 = -pkin(1) * t735 + qJ(2) * t598 + t545 * t828 + t547 * t827;
t527 = qJ(2) * t542 - t538 * t827 + t539 * t828;
t526 = qJ(2) * t936 + t538 * t828 + t539 * t827 + t892;
t525 = -pkin(6) * t550 - t537 * t831 + t544 * t835;
t524 = pkin(1) * t533 + t855;
t523 = pkin(2) * t576 + pkin(6) * t551 + t537 * t835 + t544 * t831;
t522 = -qJ(2) * t533 - t523 * t827 + t525 * t828;
t521 = pkin(1) * t576 + qJ(2) * t534 + t523 * t828 + t525 * t827;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t807, t806, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t705, t704, 0, -t679, 0, 0, 0, 0, 0, t822, t639, t638, 0, t571, 0, 0, 0, 0, 0, t814, t589, t588, 0, t532, t727, t702, t737, t728, t741, 0, t560, t561, t554, t524; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t802, 0, t803, 0, t864, -t779, -t845, -pkin(5) * t845, 0, 0, t744, 0, -t894, 0, t907, t908, t915, pkin(5) * t915 + qJ(2) * t885 + t836 * t676, 0, 0, t674, 0, -t909, 0, t940, t941, t935, pkin(5) * t935 + t836 * t562 + t832 * t563, 0, 0, t617, 0, -t925, 0, t950, t951, t949, pkin(5) * t949 + t836 * t526 + t832 * t527, t605 * t836 + t607 * t832, t594 * t836 + t595 * t832, t609 * t836 + t611 * t832, t604 * t836 + t606 * t832, t608 * t836 + t610 * t832, t636 * t836 + t637 * t832, t832 * t530 + t836 * t528 - pkin(5) * (t596 * t832 - t836 * t598), t832 * t531 + t836 * t529 - pkin(5) * (t597 * t832 - t599 * t836), t832 * t536 + t836 * t535 - pkin(5) * (t618 * t832 - t619 * t836), t832 * t522 + t836 * t521 - pkin(5) * (t533 * t832 - t534 * t836); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t803, 0, -t802, 0, t779, t864, t858, pkin(5) * t858, 0, 0, t894, 0, t744, 0, -t908, t907, t916, pkin(5) * t916 - qJ(2) * t884 + t832 * t676, 0, 0, t909, 0, t674, 0, -t941, t940, t934, pkin(5) * t934 + t832 * t562 - t836 * t563, 0, 0, t925, 0, t617, 0, -t951, t950, t948, pkin(5) * t948 + t832 * t526 - t836 * t527, t605 * t832 - t607 * t836, t594 * t832 - t595 * t836, t609 * t832 - t611 * t836, t604 * t832 - t606 * t836, t608 * t832 - t610 * t836, t636 * t832 - t637 * t836, -t836 * t530 + t832 * t528 + pkin(5) * (t596 * t836 + t598 * t832), -t836 * t531 + t832 * t529 + pkin(5) * (t597 * t836 + t599 * t832), -t836 * t536 + t832 * t535 + pkin(5) * (t618 * t836 + t619 * t832), -t836 * t522 + t832 * t521 + pkin(5) * (t533 * t836 + t832 * t534); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t838, 0, 0, -g(1), t807, 0, 0, 0, t796, 0, -t795, 0, t846, t761, t682, qJ(2) * t682, 0, 0, -t722, 0, -t718, 0, t923, t661, t586, t563, 0, 0, -t667, 0, -t663, 0, t939, t593, t542, t527, t607, t595, t611, t606, t610, t637, t530, t531, t536, t522; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t838, 0, qJDD(1), 0, g(1), 0, -t806, 0, 0, 0, t795, 0, t796, 0, -t761, t846, t861, t676, 0, 0, t718, 0, -t722, 0, -t661, t923, t914, t562, 0, 0, t663, 0, -t667, 0, -t593, t939, t936, t526, t605, t594, t609, t604, t608, t636, t528, t529, t535, t521; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t807, t806, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t705, t704, 0, -t679, 0, 0, 0, 0, 0, t822, t639, t638, 0, t571, 0, 0, 0, 0, 0, t814, t589, t588, 0, t532, t727, t702, t737, t728, t741, 0, t560, t561, t554, t524; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t838, 0, 0, -t826, t733, 0, 0, 0, -t787, 0, -t784, 0, t912, t754, t632, pkin(6) * t632, 0, 0, -t715, 0, -t710, 0, t924, t653, t558, t539, t649, t635, t657, t648, t656, t687, t547, t548, t553, t525; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t838, 0, qJDD(1), 0, t826, 0, t734, 0, 0, 0, t784, 0, -t787, 0, -t754, t912, t862, t628, 0, 0, t710, 0, -t715, 0, -t653, t924, t913, t538, t647, t634, t655, t646, t654, t686, t545, t546, t552, t523; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t733, -t734, 0, 0, 0, 0, 0, 0, 0, t822, t850, t841, 0, -t629, 0, 0, 0, 0, 0, t814, t844, t839, 0, t872, t727, t702, t737, t728, t741, 0, t848, t847, t842, t855; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t822, 0, -t821, 0, 0, -t826, t677, 0, 0, 0, -t776, 0, -t773, 0, t911, t750, t582, pkin(7) * t582, t697, t685, t701, t696, t700, t746, t569, t570, t573, t544; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t821, 0, t822, 0, t826, 0, t678, 0, 0, 0, t773, 0, -t776, 0, -t750, t911, t863, t578, t695, t684, t699, t694, t698, t745, t567, t568, t572, t537; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t822, -t677, -t678, 0, 0, 0, 0, 0, 0, 0, t814, t851, t840, 0, -t579, t727, t702, t737, t728, t741, 0, t852, t853, t849, t866; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t814, 0, -t813, 0, 0, -t826, t626, 0, t732, t703, t740, t731, t738, t762, t602, t603, t576, pkin(8) * t576; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t813, 0, t814, 0, t826, 0, t627, 0, t801, -t778, -t873, -t801, -t808, -qJDD(5), t600, t601, 0, pkin(4) * t576; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t814, -t626, -t627, 0, 0, t727, t702, t737, t728, t741, 0, t867, t868, t854, t871; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t767, t769, t790, -t805, t799, t805, 0, t623, t614, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t865, t766, t797, t768, t791, -t865, -t623, 0, t615, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t801, t778, t873, t801, t808, qJDD(5), -t614, -t615, 0, 0;];
m_new_reg = t1;
