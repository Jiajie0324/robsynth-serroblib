% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRRR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:15
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRRR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR4_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR4_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR4_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:15:03
% EndTime: 2019-12-05 18:15:06
% DurationCPUTime: 2.43s
% Computational Cost: add. (8445->142), mult. (12202->204), div. (0->0), fcn. (7318->10), ass. (0->115)
t1053 = sin(qJ(1));
t1057 = cos(qJ(1));
t1048 = sin(pkin(9));
t1049 = cos(pkin(9));
t1044 = qJD(1) + qJD(3);
t1038 = qJD(4) + t1044;
t1035 = t1038 ^ 2;
t1043 = qJDD(1) + qJDD(3);
t1036 = qJDD(4) + t1043;
t1051 = sin(qJ(4));
t1055 = cos(qJ(4));
t1009 = t1051 * t1035 - t1055 * t1036;
t1052 = sin(qJ(3));
t1056 = cos(qJ(3));
t1062 = -t1055 * t1035 - t1051 * t1036;
t1074 = t1052 * t1009 + t1056 * t1062;
t988 = t1056 * t1009 - t1052 * t1062;
t1081 = t1048 * t988 + t1049 * t1074;
t968 = -t1048 * t1074 + t1049 * t988;
t1085 = t1053 * t968 + t1057 * t1081;
t1084 = -t1053 * t1081 + t1057 * t968;
t1042 = t1044 ^ 2;
t1017 = t1052 * t1042 - t1056 * t1043;
t1061 = -t1056 * t1042 - t1052 * t1043;
t1073 = t1048 * t1017 + t1049 * t1061;
t994 = t1049 * t1017 - t1048 * t1061;
t1080 = t1053 * t994 + t1057 * t1073;
t1079 = -t1053 * t1073 + t1057 * t994;
t1032 = t1057 * g(2) + t1053 * g(3);
t1021 = qJDD(1) * pkin(1) + t1032;
t1031 = t1053 * g(2) - t1057 * g(3);
t1059 = qJD(1) ^ 2;
t1022 = -t1059 * pkin(1) + t1031;
t998 = t1049 * t1021 - t1048 * t1022;
t996 = qJDD(1) * pkin(2) + t998;
t999 = t1048 * t1021 + t1049 * t1022;
t997 = -t1059 * pkin(2) + t999;
t976 = -t1052 * t997 + t1056 * t996;
t1060 = t1043 * pkin(3) + t976;
t977 = t1052 * t996 + t1056 * t997;
t975 = -t1042 * pkin(3) + t977;
t959 = t1051 * t1060 + t1055 * t975;
t1068 = qJD(5) * t1038;
t1050 = sin(qJ(5));
t1067 = t1050 * t1036;
t1054 = cos(qJ(5));
t1066 = t1054 * t1036;
t1045 = t1050 ^ 2;
t1046 = t1054 ^ 2;
t1065 = t1045 + t1046;
t958 = -t1051 * t975 + t1055 * t1060;
t1023 = -t1048 * qJDD(1) - t1049 * t1059;
t1024 = t1049 * qJDD(1) - t1048 * t1059;
t1064 = t1057 * t1023 - t1053 * t1024;
t1063 = -t1053 * t1023 - t1057 * t1024;
t1058 = qJD(5) ^ 2;
t1047 = -g(1) + qJDD(2);
t1029 = -t1057 * qJDD(1) + t1053 * t1059;
t1028 = t1053 * qJDD(1) + t1057 * t1059;
t1027 = t1054 * t1035 * t1050;
t1026 = -t1046 * t1035 - t1058;
t1025 = -t1045 * t1035 - t1058;
t1020 = -qJDD(5) + t1027;
t1019 = qJDD(5) + t1027;
t1011 = t1065 * t1035;
t1006 = t1065 * t1036;
t1005 = -0.2e1 * t1050 * t1068 + t1066;
t1004 = 0.2e1 * t1054 * t1068 + t1067;
t1003 = t1054 * t1020 - t1050 * t1025;
t1002 = -t1050 * t1019 + t1054 * t1026;
t1001 = t1050 * t1020 + t1054 * t1025;
t1000 = t1054 * t1019 + t1050 * t1026;
t987 = t1055 * t1006 - t1051 * t1011;
t984 = t1051 * t1006 + t1055 * t1011;
t983 = t1055 * t1003 + t1051 * t1004;
t982 = t1055 * t1002 - t1051 * t1005;
t981 = t1051 * t1003 - t1055 * t1004;
t980 = t1051 * t1002 + t1055 * t1005;
t979 = -t1048 * t998 + t1049 * t999;
t978 = t1048 * t999 + t1049 * t998;
t971 = -t1052 * t984 + t1056 * t987;
t970 = t1052 * t987 + t1056 * t984;
t965 = -t1052 * t981 + t1056 * t983;
t964 = -t1052 * t980 + t1056 * t982;
t963 = t1052 * t983 + t1056 * t981;
t962 = t1052 * t982 + t1056 * t980;
t961 = -t1052 * t976 + t1056 * t977;
t960 = t1052 * t977 + t1056 * t976;
t957 = -t1035 * pkin(4) + t1036 * pkin(8) + t959;
t956 = -t1036 * pkin(4) - t1035 * pkin(8) - t958;
t955 = -t1048 * t970 + t1049 * t971;
t954 = t1048 * t971 + t1049 * t970;
t953 = t1050 * t1047 + t1054 * t957;
t952 = t1054 * t1047 - t1050 * t957;
t951 = -t1048 * t963 + t1049 * t965;
t950 = -t1048 * t962 + t1049 * t964;
t949 = t1048 * t965 + t1049 * t963;
t948 = t1048 * t964 + t1049 * t962;
t947 = -t1048 * t960 + t1049 * t961;
t946 = t1048 * t961 + t1049 * t960;
t945 = -t1051 * t958 + t1055 * t959;
t944 = t1051 * t959 + t1055 * t958;
t943 = -t1050 * t952 + t1054 * t953;
t942 = t1050 * t953 + t1054 * t952;
t941 = t1051 * t956 + t1055 * t943;
t940 = t1051 * t943 - t1055 * t956;
t939 = -t1052 * t944 + t1056 * t945;
t938 = t1052 * t945 + t1056 * t944;
t937 = -t1052 * t940 + t1056 * t941;
t936 = t1052 * t941 + t1056 * t940;
t935 = -t1048 * t938 + t1049 * t939;
t934 = t1048 * t939 + t1049 * t938;
t933 = -t1048 * t936 + t1049 * t937;
t932 = t1048 * t937 + t1049 * t936;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, t1000, t1001, 0, t942; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1029, t1028, 0, -t1053 * t1031 - t1057 * t1032, 0, 0, 0, 0, 0, 0, t1063, -t1064, 0, -t1053 * t979 - t1057 * t978, 0, 0, 0, 0, 0, 0, t1079, -t1080, 0, -t1053 * t947 - t1057 * t946, 0, 0, 0, 0, 0, 0, t1084, -t1085, 0, -t1053 * t935 - t1057 * t934, 0, 0, 0, 0, 0, 0, -t1053 * t950 - t1057 * t948, -t1053 * t951 - t1057 * t949, -t1053 * t955 - t1057 * t954, -t1053 * t933 - t1057 * t932; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1028, t1029, 0, t1057 * t1031 - t1053 * t1032, 0, 0, 0, 0, 0, 0, t1064, t1063, 0, -t1053 * t978 + t1057 * t979, 0, 0, 0, 0, 0, 0, t1080, t1079, 0, -t1053 * t946 + t1057 * t947, 0, 0, 0, 0, 0, 0, t1085, t1084, 0, -t1053 * t934 + t1057 * t935, 0, 0, 0, 0, 0, 0, -t1053 * t948 + t1057 * t950, -t1053 * t949 + t1057 * t951, -t1053 * t954 + t1057 * t955, -t1053 * t932 + t1057 * t933; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1059, -qJDD(1), 0, t1031, 0, 0, 0, 0, 0, 0, t1023, -t1024, 0, t979, 0, 0, 0, 0, 0, 0, t1073, t994, 0, t947, 0, 0, 0, 0, 0, 0, t1081, t968, 0, t935, 0, 0, 0, 0, 0, 0, t950, t951, t955, t933; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1059, 0, t1032, 0, 0, 0, 0, 0, 0, t1024, t1023, 0, t978, 0, 0, 0, 0, 0, 0, -t994, t1073, 0, t946, 0, 0, 0, 0, 0, 0, -t968, t1081, 0, t934, 0, 0, 0, 0, 0, 0, t948, t949, t954, t932; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, t1000, t1001, 0, t942; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1059, -qJDD(1), 0, t999, 0, 0, 0, 0, 0, 0, t1061, t1017, 0, t961, 0, 0, 0, 0, 0, 0, t1074, t988, 0, t939, 0, 0, 0, 0, 0, 0, t964, t965, t971, t937; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1059, 0, t998, 0, 0, 0, 0, 0, 0, -t1017, t1061, 0, t960, 0, 0, 0, 0, 0, 0, -t988, t1074, 0, t938, 0, 0, 0, 0, 0, 0, t962, t963, t970, t936; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, t1000, t1001, 0, t942; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1042, -t1043, 0, t977, 0, 0, 0, 0, 0, 0, t1062, t1009, 0, t945, 0, 0, 0, 0, 0, 0, t982, t983, t987, t941; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1043, -t1042, 0, t976, 0, 0, 0, 0, 0, 0, -t1009, t1062, 0, t944, 0, 0, 0, 0, 0, 0, t980, t981, t984, t940; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, t1000, t1001, 0, t942; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1035, -t1036, 0, t959, 0, 0, 0, 0, 0, 0, t1002, t1003, t1006, t943; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1036, -t1035, 0, t958, 0, 0, 0, 0, 0, 0, t1005, -t1004, t1011, -t956; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, 0, 0, 0, 0, 0, 0, t1000, t1001, 0, t942; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1026, t1020, t1066, t953; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1019, t1025, -t1067, t952; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1005, t1004, -t1011, t956;];
f_new_reg = t1;
