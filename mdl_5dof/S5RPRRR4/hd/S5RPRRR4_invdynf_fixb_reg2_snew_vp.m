% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRRR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:52
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRRR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR4_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR4_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR4_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:52:47
% EndTime: 2020-01-03 11:52:50
% DurationCPUTime: 2.52s
% Computational Cost: add. (8445->142), mult. (12202->204), div. (0->0), fcn. (7318->10), ass. (0->115)
t1072 = sin(qJ(1));
t1076 = cos(qJ(1));
t1063 = qJD(1) + qJD(3);
t1059 = qJD(4) + t1063;
t1056 = t1059 ^ 2;
t1062 = qJDD(1) + qJDD(3);
t1057 = qJDD(4) + t1062;
t1070 = sin(qJ(4));
t1074 = cos(qJ(4));
t1029 = t1070 * t1056 - t1074 * t1057;
t1071 = sin(qJ(3));
t1075 = cos(qJ(3));
t1081 = -t1074 * t1056 - t1070 * t1057;
t1008 = t1075 * t1029 - t1071 * t1081;
t1067 = sin(pkin(9));
t1068 = cos(pkin(9));
t1093 = t1071 * t1029 + t1075 * t1081;
t1100 = t1067 * t1008 + t1068 * t1093;
t988 = t1068 * t1008 - t1067 * t1093;
t1104 = t1072 * t988 + t1076 * t1100;
t1103 = t1072 * t1100 - t1076 * t988;
t1061 = t1063 ^ 2;
t1037 = t1071 * t1061 - t1075 * t1062;
t1080 = -t1075 * t1061 - t1071 * t1062;
t1014 = t1068 * t1037 - t1067 * t1080;
t1092 = t1067 * t1037 + t1068 * t1080;
t1099 = t1072 * t1014 + t1076 * t1092;
t1098 = -t1076 * t1014 + t1072 * t1092;
t1053 = -t1076 * g(2) - t1072 * g(3);
t1042 = qJDD(1) * pkin(1) + t1053;
t1052 = -t1072 * g(2) + t1076 * g(3);
t1078 = qJD(1) ^ 2;
t1043 = -t1078 * pkin(1) + t1052;
t1018 = t1068 * t1042 - t1067 * t1043;
t1016 = qJDD(1) * pkin(2) + t1018;
t1019 = t1067 * t1042 + t1068 * t1043;
t1017 = -t1078 * pkin(2) + t1019;
t996 = t1075 * t1016 - t1071 * t1017;
t1079 = t1062 * pkin(3) + t996;
t997 = t1071 * t1016 + t1075 * t1017;
t995 = -t1061 * pkin(3) + t997;
t979 = t1070 * t1079 + t1074 * t995;
t1087 = qJD(5) * t1059;
t1069 = sin(qJ(5));
t1086 = t1069 * t1057;
t1073 = cos(qJ(5));
t1085 = t1073 * t1057;
t1064 = t1069 ^ 2;
t1065 = t1073 ^ 2;
t1084 = t1064 + t1065;
t978 = -t1070 * t995 + t1074 * t1079;
t1044 = -t1067 * qJDD(1) - t1068 * t1078;
t1045 = t1068 * qJDD(1) - t1067 * t1078;
t1083 = t1072 * t1044 + t1076 * t1045;
t1082 = t1076 * t1044 - t1072 * t1045;
t1077 = qJD(5) ^ 2;
t1066 = -g(1) + qJDD(2);
t1050 = t1076 * qJDD(1) - t1072 * t1078;
t1049 = -t1072 * qJDD(1) - t1076 * t1078;
t1048 = t1073 * t1056 * t1069;
t1047 = -t1065 * t1056 - t1077;
t1046 = -t1064 * t1056 - t1077;
t1041 = -qJDD(5) + t1048;
t1040 = qJDD(5) + t1048;
t1031 = t1084 * t1056;
t1026 = t1084 * t1057;
t1025 = -0.2e1 * t1069 * t1087 + t1085;
t1024 = 0.2e1 * t1073 * t1087 + t1086;
t1023 = t1073 * t1041 - t1069 * t1046;
t1022 = -t1069 * t1040 + t1073 * t1047;
t1021 = t1069 * t1041 + t1073 * t1046;
t1020 = t1073 * t1040 + t1069 * t1047;
t1007 = t1074 * t1026 - t1070 * t1031;
t1004 = t1070 * t1026 + t1074 * t1031;
t1003 = t1074 * t1023 + t1070 * t1024;
t1002 = t1074 * t1022 - t1070 * t1025;
t1001 = t1070 * t1023 - t1074 * t1024;
t1000 = t1070 * t1022 + t1074 * t1025;
t999 = -t1067 * t1018 + t1068 * t1019;
t998 = t1068 * t1018 + t1067 * t1019;
t991 = -t1071 * t1004 + t1075 * t1007;
t990 = t1075 * t1004 + t1071 * t1007;
t985 = -t1071 * t1001 + t1075 * t1003;
t984 = -t1071 * t1000 + t1075 * t1002;
t983 = t1075 * t1001 + t1071 * t1003;
t982 = t1075 * t1000 + t1071 * t1002;
t981 = -t1071 * t996 + t1075 * t997;
t980 = t1071 * t997 + t1075 * t996;
t977 = -t1056 * pkin(4) + t1057 * pkin(8) + t979;
t976 = -t1057 * pkin(4) - t1056 * pkin(8) - t978;
t975 = -t1067 * t990 + t1068 * t991;
t974 = t1067 * t991 + t1068 * t990;
t973 = t1069 * t1066 + t1073 * t977;
t972 = t1073 * t1066 - t1069 * t977;
t971 = -t1067 * t983 + t1068 * t985;
t970 = -t1067 * t982 + t1068 * t984;
t969 = t1067 * t985 + t1068 * t983;
t968 = t1067 * t984 + t1068 * t982;
t967 = -t1067 * t980 + t1068 * t981;
t966 = t1067 * t981 + t1068 * t980;
t965 = -t1070 * t978 + t1074 * t979;
t964 = t1070 * t979 + t1074 * t978;
t963 = -t1069 * t972 + t1073 * t973;
t962 = t1069 * t973 + t1073 * t972;
t961 = t1070 * t976 + t1074 * t963;
t960 = t1070 * t963 - t1074 * t976;
t959 = -t1071 * t964 + t1075 * t965;
t958 = t1071 * t965 + t1075 * t964;
t957 = -t1071 * t960 + t1075 * t961;
t956 = t1071 * t961 + t1075 * t960;
t955 = -t1067 * t958 + t1068 * t959;
t954 = t1067 * t959 + t1068 * t958;
t953 = -t1067 * t956 + t1068 * t957;
t952 = t1067 * t957 + t1068 * t956;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1066, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1066, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1066, 0, 0, 0, 0, 0, 0, t1020, t1021, 0, t962; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1050, t1049, 0, t1072 * t1052 + t1076 * t1053, 0, 0, 0, 0, 0, 0, t1083, t1082, 0, t1072 * t999 + t1076 * t998, 0, 0, 0, 0, 0, 0, t1098, t1099, 0, t1072 * t967 + t1076 * t966, 0, 0, 0, 0, 0, 0, t1103, t1104, 0, t1072 * t955 + t1076 * t954, 0, 0, 0, 0, 0, 0, t1072 * t970 + t1076 * t968, t1072 * t971 + t1076 * t969, t1072 * t975 + t1076 * t974, t1072 * t953 + t1076 * t952; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1049, t1050, 0, -t1076 * t1052 + t1072 * t1053, 0, 0, 0, 0, 0, 0, -t1082, t1083, 0, t1072 * t998 - t1076 * t999, 0, 0, 0, 0, 0, 0, -t1099, t1098, 0, t1072 * t966 - t1076 * t967, 0, 0, 0, 0, 0, 0, -t1104, t1103, 0, t1072 * t954 - t1076 * t955, 0, 0, 0, 0, 0, 0, t1072 * t968 - t1076 * t970, t1072 * t969 - t1076 * t971, t1072 * t974 - t1076 * t975, t1072 * t952 - t1076 * t953; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1078, -qJDD(1), 0, t1052, 0, 0, 0, 0, 0, 0, t1044, -t1045, 0, t999, 0, 0, 0, 0, 0, 0, t1092, t1014, 0, t967, 0, 0, 0, 0, 0, 0, t1100, t988, 0, t955, 0, 0, 0, 0, 0, 0, t970, t971, t975, t953; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1078, 0, t1053, 0, 0, 0, 0, 0, 0, t1045, t1044, 0, t998, 0, 0, 0, 0, 0, 0, -t1014, t1092, 0, t966, 0, 0, 0, 0, 0, 0, -t988, t1100, 0, t954, 0, 0, 0, 0, 0, 0, t968, t969, t974, t952; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1066, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1066, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1066, 0, 0, 0, 0, 0, 0, t1020, t1021, 0, t962; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1078, -qJDD(1), 0, t1019, 0, 0, 0, 0, 0, 0, t1080, t1037, 0, t981, 0, 0, 0, 0, 0, 0, t1093, t1008, 0, t959, 0, 0, 0, 0, 0, 0, t984, t985, t991, t957; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1078, 0, t1018, 0, 0, 0, 0, 0, 0, -t1037, t1080, 0, t980, 0, 0, 0, 0, 0, 0, -t1008, t1093, 0, t958, 0, 0, 0, 0, 0, 0, t982, t983, t990, t956; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1066, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1066, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1066, 0, 0, 0, 0, 0, 0, t1020, t1021, 0, t962; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1061, -t1062, 0, t997, 0, 0, 0, 0, 0, 0, t1081, t1029, 0, t965, 0, 0, 0, 0, 0, 0, t1002, t1003, t1007, t961; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1062, -t1061, 0, t996, 0, 0, 0, 0, 0, 0, -t1029, t1081, 0, t964, 0, 0, 0, 0, 0, 0, t1000, t1001, t1004, t960; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1066, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1066, 0, 0, 0, 0, 0, 0, t1020, t1021, 0, t962; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1056, -t1057, 0, t979, 0, 0, 0, 0, 0, 0, t1022, t1023, t1026, t963; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1057, -t1056, 0, t978, 0, 0, 0, 0, 0, 0, t1025, -t1024, t1031, -t976; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1066, 0, 0, 0, 0, 0, 0, t1020, t1021, 0, t962; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, t1041, t1085, t973; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1040, t1046, -t1086, t972; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1025, t1024, -t1031, t976;];
f_new_reg = t1;
