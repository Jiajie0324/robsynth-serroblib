% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S5RRRPR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5,theta4]';
% 
% Output:
% tau_reg [5x(5*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:25
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S5RRRPR9_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR9_invdynJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR9_invdynJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR9_invdynJ_fixb_reg2_slag_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR9_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRPR9_invdynJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:24:44
% EndTime: 2019-12-31 21:25:04
% DurationCPUTime: 10.69s
% Computational Cost: add. (9970->595), mult. (22890->791), div. (0->0), fcn. (16228->14), ass. (0->274)
t259 = sin(qJ(5));
t260 = sin(qJ(3));
t261 = sin(qJ(2));
t332 = qJD(1) * t261;
t316 = t260 * t332;
t263 = cos(qJ(3));
t324 = t263 * qJD(2);
t199 = t316 - t324;
t315 = t263 * t332;
t331 = qJD(2) * t260;
t201 = t315 + t331;
t256 = sin(pkin(9));
t257 = cos(pkin(9));
t304 = t199 * t257 + t256 * t201;
t390 = cos(qJ(5));
t281 = t390 * t304;
t290 = -t199 * t256 + t257 * t201;
t325 = qJD(5) * t259;
t264 = cos(qJ(2));
t321 = qJD(1) * qJD(2);
t308 = t264 * t321;
t320 = t261 * qJDD(1);
t327 = qJD(3) * t261;
t400 = qJD(1) * t327 - qJDD(2);
t110 = -qJD(3) * t324 + (-t308 - t320) * t263 + t400 * t260;
t322 = t264 * qJD(1);
t111 = t260 * (qJD(2) * (qJD(3) + t322) + t320) + t400 * t263;
t54 = -t110 * t256 + t257 * t111;
t55 = -t110 * t257 - t111 * t256;
t14 = qJD(5) * t281 + t259 * t54 + t290 * t325 - t390 * t55;
t225 = -qJD(3) + t322;
t217 = -qJD(5) + t225;
t65 = t259 * t290 + t281;
t368 = t217 * t65;
t415 = -t14 - t368;
t377 = t65 ^ 2;
t405 = -t259 * t304 + t290 * t390;
t378 = t405 ^ 2;
t414 = -t377 + t378;
t376 = t65 * t405;
t299 = t264 * pkin(2) + t261 * pkin(7);
t211 = -pkin(1) - t299;
t188 = t211 * qJD(1);
t238 = pkin(6) * t322;
t215 = qJD(2) * pkin(7) + t238;
t126 = t263 * t188 - t215 * t260;
t89 = -qJ(4) * t201 + t126;
t79 = -pkin(3) * t225 + t89;
t127 = t188 * t260 + t215 * t263;
t90 = -qJ(4) * t199 + t127;
t83 = t256 * t90;
t39 = t257 * t79 - t83;
t399 = pkin(8) * t290;
t29 = -pkin(4) * t225 + t39 - t399;
t310 = qJD(5) * t390;
t367 = t257 * t90;
t40 = t256 * t79 + t367;
t407 = pkin(8) * t304;
t32 = t40 - t407;
t244 = t264 * qJDD(1);
t395 = -t261 * t321 + t244;
t191 = qJDD(3) - t395;
t298 = pkin(2) * t261 - pkin(7) * t264;
t204 = t298 * qJD(2);
t128 = qJD(1) * t204 + qJDD(1) * t211;
t122 = t263 * t128;
t172 = pkin(6) * t395 + qJDD(2) * pkin(7);
t50 = -qJD(3) * t127 - t260 * t172 + t122;
t28 = t191 * pkin(3) + t110 * qJ(4) - t201 * qJD(4) + t50;
t326 = qJD(3) * t263;
t328 = qJD(3) * t260;
t49 = t260 * t128 + t263 * t172 + t188 * t326 - t215 * t328;
t33 = -qJ(4) * t111 - qJD(4) * t199 + t49;
t8 = -t256 * t33 + t257 * t28;
t6 = pkin(4) * t191 - pkin(8) * t55 + t8;
t9 = t256 * t28 + t257 * t33;
t7 = -pkin(8) * t54 + t9;
t1 = t259 * t6 + t29 * t310 - t32 * t325 + t390 * t7;
t253 = qJ(3) + pkin(9);
t245 = qJ(5) + t253;
t231 = sin(t245);
t232 = cos(t245);
t265 = cos(qJ(1));
t262 = sin(qJ(1));
t344 = t262 * t264;
t141 = t231 * t265 - t232 * t344;
t342 = t264 * t265;
t143 = t231 * t262 + t232 * t342;
t380 = g(3) * t261;
t214 = -qJD(2) * pkin(2) + pkin(6) * t332;
t133 = t199 * pkin(3) + qJD(4) + t214;
t73 = pkin(4) * t304 + t133;
t413 = g(1) * t143 - g(2) * t141 + t232 * t380 + t73 * t65 - t1;
t203 = t298 * qJD(1);
t135 = pkin(6) * t316 + t263 * t203;
t343 = t263 * t264;
t285 = pkin(3) * t261 - qJ(4) * t343;
t375 = qJ(4) + pkin(7);
t305 = qJD(3) * t375;
t412 = -qJD(1) * t285 - t260 * qJD(4) - t263 * t305 - t135;
t183 = t260 * t203;
t323 = t263 * qJD(4);
t346 = t261 * t263;
t348 = t260 * t264;
t411 = t183 + (-pkin(6) * t346 - qJ(4) * t348) * qJD(1) + t260 * t305 - t323;
t236 = pkin(6) * t320;
t173 = -qJDD(2) * pkin(2) + pkin(6) * t308 + t236;
t251 = g(3) * t264;
t297 = g(1) * t265 + g(2) * t262;
t275 = -t297 * t261 + t251;
t273 = -t173 - t275;
t410 = -pkin(7) * qJD(3) * t225 - t273;
t15 = qJD(5) * t405 + t259 * t55 + t390 * t54;
t366 = t405 * t217;
t409 = -t15 - t366;
t193 = t256 * t263 + t257 * t260;
t177 = t193 * qJD(3);
t339 = -t193 * t322 + t177;
t192 = t256 * t260 - t257 * t263;
t402 = t225 * t192;
t140 = t231 * t344 + t232 * t265;
t142 = -t231 * t342 + t232 * t262;
t11 = t259 * t29 + t390 * t32;
t2 = -qJD(5) * t11 - t259 * t7 + t390 * t6;
t408 = -g(1) * t142 + g(2) * t140 + t231 * t380 - t405 * t73 + t2;
t370 = t411 * t256 + t412 * t257;
t369 = t412 * t256 - t411 * t257;
t406 = t304 * t290;
t404 = -pkin(4) * t332 - pkin(8) * t402 + t370;
t403 = t339 * pkin(8) - t369;
t329 = qJD(2) * t264;
t314 = t260 * t329;
t401 = t261 * t326 + t314;
t398 = t126 * t225 + t49;
t388 = pkin(3) * t260;
t300 = pkin(3) * t328 - t322 * t388 - t238;
t227 = pkin(6) * t343;
t148 = t260 * t211 + t227;
t179 = t260 * t344 + t263 * t265;
t181 = -t260 * t342 + t262 * t263;
t394 = -g(1) * t181 + g(2) * t179;
t392 = -0.2e1 * pkin(1);
t391 = t54 * pkin(4);
t389 = pkin(3) * t256;
t387 = pkin(6) * t260;
t385 = g(1) * t262;
t381 = g(2) * t265;
t379 = t263 * pkin(3);
t212 = t375 * t260;
t213 = t375 * t263;
t131 = -t257 * t212 - t213 * t256;
t102 = -pkin(8) * t193 + t131;
t132 = -t256 * t212 + t257 * t213;
t103 = -pkin(8) * t192 + t132;
t46 = t390 * t102 - t259 * t103;
t374 = t46 * qJD(5) + t404 * t259 - t403 * t390;
t47 = t259 * t102 + t390 * t103;
t373 = -t47 * qJD(5) + t403 * t259 + t404 * t390;
t372 = t192 * t310 + t193 * t325 + t339 * t259 - t402 * t390;
t116 = -t259 * t192 + t390 * t193;
t371 = t116 * qJD(5) + t402 * t259 + t339 * t390;
t330 = qJD(2) * t261;
t336 = t263 * t204 + t330 * t387;
t60 = -t261 * t323 + t285 * qJD(2) + (-t227 + (qJ(4) * t261 - t211) * t260) * qJD(3) + t336;
t337 = t260 * t204 + t211 * t326;
t69 = (-pkin(6) * qJD(2) - qJ(4) * qJD(3)) * t346 + (-qJD(4) * t261 + (-pkin(6) * qJD(3) - qJ(4) * qJD(2)) * t264) * t260 + t337;
t27 = t256 * t60 + t257 * t69;
t44 = t257 * t89 - t83;
t233 = t257 * pkin(3) + pkin(4);
t168 = t390 * t233 - t259 * t389;
t43 = -t256 * t89 - t367;
t37 = t43 + t407;
t38 = t44 - t399;
t365 = t168 * qJD(5) - t259 * t37 - t390 * t38;
t169 = t259 * t233 + t390 * t389;
t364 = -t169 * qJD(5) + t259 * t38 - t390 * t37;
t363 = pkin(6) * qJDD(1);
t362 = t110 * t260;
t361 = t111 * t263;
t360 = t290 * t225;
t359 = t304 * t225;
t358 = t290 ^ 2;
t356 = t127 * t225;
t355 = t199 * t225;
t353 = t199 * t260;
t352 = t201 * t199;
t351 = t201 * t225;
t350 = t201 * t263;
t349 = t260 * t261;
t347 = t260 * t265;
t345 = t261 * t265;
t240 = sin(t253);
t206 = pkin(4) * t240 + t388;
t341 = t265 * t206;
t195 = t263 * t211;
t123 = -qJ(4) * t346 + t195 + (-pkin(3) - t387) * t264;
t130 = -qJ(4) * t349 + t148;
t71 = t256 * t123 + t257 * t130;
t340 = t339 * pkin(4) + t300;
t205 = pkin(3) * t349 + t261 * pkin(6);
t335 = t265 * pkin(1) + t262 * pkin(6);
t254 = t261 ^ 2;
t255 = t264 ^ 2;
t334 = t254 - t255;
t333 = t254 + t255;
t267 = qJD(1) ^ 2;
t317 = t261 * t267 * t264;
t139 = t401 * pkin(3) + pkin(6) * t329;
t235 = pkin(2) + t379;
t313 = t264 * t324;
t311 = t225 * t332;
t241 = cos(t253);
t207 = pkin(4) * t241 + t379;
t26 = -t256 * t69 + t257 * t60;
t70 = t257 * t123 - t130 * t256;
t302 = t261 * t308;
t228 = t261 * t385;
t301 = -g(2) * t345 + t228;
t296 = pkin(6) * t199 + t214 * t260;
t295 = pkin(6) * t201 + t214 * t263;
t294 = -pkin(7) * t191 + qJD(3) * t214;
t293 = t304 ^ 2;
t292 = t261 * t304;
t291 = -t126 * t263 - t127 * t260;
t202 = pkin(2) + t207;
t252 = -pkin(8) - t375;
t289 = t202 * t264 - t252 * t261;
t287 = t235 * t264 + t261 * t375;
t165 = t192 * t261;
t45 = -pkin(4) * t264 + pkin(8) * t165 + t70;
t164 = t193 * t261;
t48 = -pkin(8) * t164 + t71;
t22 = -t259 * t48 + t390 * t45;
t23 = t259 * t45 + t390 * t48;
t282 = -pkin(6) * qJDD(2) + t321 * t392;
t95 = -t259 * t164 - t390 * t165;
t280 = t260 * t191 - t225 * t326;
t279 = t263 * t191 + t225 * t328;
t278 = pkin(1) * t267 + t297;
t266 = qJD(2) ^ 2;
t277 = pkin(6) * t266 + qJDD(1) * t392 + t381;
t78 = t111 * pkin(3) + qJDD(4) + t173;
t274 = -t264 * t297 - t380;
t271 = t78 + t275;
t249 = t265 * pkin(6);
t187 = qJDD(5) + t191;
t182 = t260 * t262 + t263 * t342;
t180 = -t262 * t343 + t347;
t159 = t240 * t262 + t241 * t342;
t158 = -t240 * t342 + t241 * t262;
t157 = t240 * t265 - t241 * t344;
t156 = t240 * t344 + t241 * t265;
t149 = pkin(4) * t192 - t235;
t147 = -pkin(6) * t348 + t195;
t136 = -pkin(6) * t315 + t183;
t129 = -t191 * t264 - t225 * t330;
t124 = pkin(4) * t164 + t205;
t115 = t390 * t192 + t259 * t193;
t97 = t177 * t261 + t256 * t314 - t257 * t313;
t96 = t192 * t327 - t193 * t329;
t94 = t390 * t164 - t259 * t165;
t88 = -qJD(3) * t148 + t336;
t87 = (-t261 * t324 - t264 * t328) * pkin(6) + t337;
t80 = pkin(3) * t201 + pkin(4) * t290;
t72 = -pkin(4) * t96 + t139;
t36 = t95 * qJD(5) - t259 * t97 - t390 * t96;
t35 = t164 * t310 - t165 * t325 - t259 * t96 + t390 * t97;
t34 = t78 + t391;
t21 = pkin(8) * t96 + t27;
t20 = pkin(4) * t330 + pkin(8) * t97 + t26;
t10 = -t259 * t32 + t390 * t29;
t4 = -t23 * qJD(5) + t390 * t20 - t259 * t21;
t3 = t22 * qJD(5) + t259 * t20 + t390 * t21;
t5 = [0, 0, 0, 0, 0, qJDD(1), -t381 + t385, t297, 0, 0, qJDD(1) * t254 + 0.2e1 * t302, 0.2e1 * t261 * t244 - 0.2e1 * t334 * t321, qJDD(2) * t261 + t264 * t266, qJDD(1) * t255 - 0.2e1 * t302, qJDD(2) * t264 - t261 * t266, 0, t282 * t261 + (-t277 + t385) * t264, t261 * t277 + t264 * t282 - t228, 0.2e1 * t333 * t363 - t297, -g(1) * (-pkin(1) * t262 + t249) - g(2) * t335 + (pkin(6) ^ 2 * t333 + pkin(1) ^ 2) * qJDD(1), -t110 * t346 + (-t260 * t327 + t313) * t201, (-t199 * t263 - t201 * t260) * t329 + (t362 - t361 + (-t350 + t353) * qJD(3)) * t261, (-t225 * t324 + t110) * t264 + (qJD(2) * t201 + t279) * t261, t111 * t349 + t401 * t199, (t225 * t331 + t111) * t264 + (-qJD(2) * t199 - t280) * t261, t129, -g(1) * t180 - g(2) * t182 + t147 * t191 - t88 * t225 + (qJD(2) * t296 - t50) * t264 + (pkin(6) * t111 + qJD(2) * t126 + t173 * t260 + t214 * t326) * t261, -g(1) * t179 - g(2) * t181 - t148 * t191 + t87 * t225 + (qJD(2) * t295 + t49) * t264 + (-pkin(6) * t110 - qJD(2) * t127 + t173 * t263 - t214 * t328) * t261, t147 * t110 - t148 * t111 - t87 * t199 - t88 * t201 + t228 + t291 * t329 + (-t381 - t260 * t49 - t263 * t50 + (t126 * t260 - t127 * t263) * qJD(3)) * t261, t49 * t148 + t127 * t87 + t50 * t147 + t126 * t88 - g(1) * t249 - g(2) * (t265 * t299 + t335) - t211 * t385 + (t173 * t261 + t214 * t329) * pkin(6), -t165 * t55 - t290 * t97, -t55 * t164 + t165 * t54 + t290 * t96 + t304 * t97, -t165 * t191 + t225 * t97 - t264 * t55 + t290 * t330, t54 * t164 - t304 * t96, -qJD(2) * t292 - t191 * t164 - t225 * t96 + t264 * t54, t129, -g(1) * t157 - g(2) * t159 - t133 * t96 + t139 * t304 + t78 * t164 + t70 * t191 + t205 * t54 - t26 * t225 - t8 * t264 + t330 * t39, -g(1) * t156 - g(2) * t158 - t133 * t97 + t139 * t290 - t165 * t78 - t191 * t71 + t205 * t55 + t225 * t27 + t264 * t9 - t330 * t40, -t9 * t164 + t8 * t165 - t26 * t290 - t27 * t304 + t39 * t97 + t40 * t96 - t71 * t54 - t70 * t55 + t301, t9 * t71 + t40 * t27 + t8 * t70 + t39 * t26 + t78 * t205 + t133 * t139 - g(1) * (pkin(3) * t347 + t249) - g(2) * (t235 * t342 + t345 * t375 + t335) + (-g(1) * (-pkin(1) - t287) - g(2) * t388) * t262, -t14 * t95 - t35 * t405, t14 * t94 - t15 * t95 + t35 * t65 - t36 * t405, t14 * t264 + t187 * t95 + t217 * t35 + t330 * t405, t15 * t94 + t36 * t65, t15 * t264 - t187 * t94 + t217 * t36 - t330 * t65, -t187 * t264 - t217 * t330, -g(1) * t141 - g(2) * t143 + t10 * t330 + t124 * t15 + t187 * t22 - t2 * t264 - t217 * t4 + t34 * t94 + t36 * t73 + t65 * t72, -g(1) * t140 - g(2) * t142 + t1 * t264 - t11 * t330 - t124 * t14 - t187 * t23 + t217 * t3 + t34 * t95 - t35 * t73 + t405 * t72, -t1 * t94 + t10 * t35 - t11 * t36 + t14 * t22 - t15 * t23 - t2 * t95 - t3 * t65 - t4 * t405 + t301, t1 * t23 + t11 * t3 + t2 * t22 + t10 * t4 + t34 * t124 + t73 * t72 - g(1) * (t249 + t341) - g(2) * (t202 * t342 - t252 * t345 + t335) + (-g(1) * (-pkin(1) - t289) - g(2) * t206) * t262; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t317, t334 * t267, t320, t317, t244, qJDD(2), t261 * t278 - t236 - t251, t380 + (t278 - t363) * t264, 0, 0, -t225 * t350 - t362, (-t110 + t355) * t263 + (-t111 + t351) * t260, (-t201 * t261 + t225 * t343) * qJD(1) + t280, -t225 * t353 - t361, (t199 * t261 - t225 * t348) * qJD(1) + t279, t311, -pkin(2) * t111 + t135 * t225 + t294 * t260 + (-t126 * t261 - t264 * t296) * qJD(1) - t410 * t263, pkin(2) * t110 - t136 * t225 + t294 * t263 + (t127 * t261 - t264 * t295) * qJD(1) + t410 * t260, t135 * t201 + t136 * t199 + ((qJD(3) * t201 - t111) * pkin(7) + t398) * t263 + (-t50 + t356 + (qJD(3) * t199 - t110) * pkin(7)) * t260 + t274, -t214 * t238 - t126 * t135 - t127 * t136 + t273 * pkin(2) + (qJD(3) * t291 - t50 * t260 + t49 * t263 + t274) * pkin(7), t55 * t193 + t290 * t402, -t55 * t192 - t193 * t54 - t339 * t290 - t304 * t402, t191 * t193 - t225 * t402 - t290 * t332, t54 * t192 + t304 * t339, qJD(1) * t292 - t191 * t192 + t225 * t339, t311, t131 * t191 + t133 * t339 + t78 * t192 - t225 * t370 - t235 * t54 - t241 * t275 + t300 * t304 - t332 * t39, -t132 * t191 + t133 * t402 + t78 * t193 + t225 * t369 - t235 * t55 + t240 * t275 + t290 * t300 + t332 * t40, -t131 * t55 - t132 * t54 - t9 * t192 - t8 * t193 - t290 * t370 - t369 * t304 - t339 * t40 - t39 * t402 + t274, -g(3) * t287 + t8 * t131 + t9 * t132 + t133 * t300 - t78 * t235 + t369 * t40 + t370 * t39 + t297 * (t235 * t261 - t264 * t375), -t14 * t116 - t372 * t405, t14 * t115 - t116 * t15 - t371 * t405 + t372 * t65, t116 * t187 + t217 * t372 - t332 * t405, t15 * t115 + t371 * t65, -t115 * t187 + t217 * t371 + t332 * t65, t217 * t332, -t10 * t332 + t34 * t115 + t149 * t15 + t46 * t187 - t217 * t373 - t232 * t275 + t340 * t65 + t371 * t73, t11 * t332 + t34 * t116 - t149 * t14 - t47 * t187 + t217 * t374 + t231 * t275 + t340 * t405 - t372 * t73, -t1 * t115 + t10 * t372 - t11 * t371 - t2 * t116 + t46 * t14 - t47 * t15 - t373 * t405 - t374 * t65 + t274, -g(3) * t289 + t1 * t47 + t10 * t373 + t11 * t374 + t34 * t149 + t2 * t46 + t340 * t73 + t297 * (t202 * t261 + t252 * t264); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t352, -t199 ^ 2 + t201 ^ 2, -t110 - t355, -t352, -t111 - t351, t191, -t215 * t326 - t356 - t214 * t201 + t122 + (-qJD(3) * t188 - t172 + t380) * t260 + t394, g(1) * t182 - g(2) * t180 + g(3) * t346 + t199 * t214 - t398, 0, 0, t406, -t293 + t358, t55 - t359, -t406, -t54 - t360, t191, t240 * t380 - g(1) * t158 + g(2) * t156 - t133 * t290 + t43 * t225 + (t257 * t191 - t201 * t304) * pkin(3) + t8, t241 * t380 + g(1) * t159 - g(2) * t157 + t133 * t304 - t44 * t225 + (-t191 * t256 - t201 * t290) * pkin(3) - t9, (-t256 * t54 - t257 * t55) * pkin(3) + (t40 + t43) * t290 + (t44 - t39) * t304, -t39 * t43 - t40 * t44 + (g(3) * t349 - t133 * t201 + t9 * t256 + t8 * t257 + t394) * pkin(3), t376, t414, t415, -t376, t409, t187, t168 * t187 - t217 * t364 - t80 * t65 + t408, -t169 * t187 + t217 * t365 - t405 * t80 + t413, t168 * t14 - t169 * t15 + (t11 - t364) * t405 + (-t10 - t365) * t65, t1 * t169 + t2 * t168 - t73 * t80 - g(1) * (t207 * t262 - t264 * t341) - g(2) * (-t206 * t344 - t207 * t265) + t206 * t380 + t365 * t11 + t364 * t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54 - t360, t55 + t359, -t293 - t358, t290 * t39 + t304 * t40 + t271, 0, 0, 0, 0, 0, 0, t15 - t366, -t14 + t368, -t377 - t378, t10 * t405 + t11 * t65 + t271 + t391; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t376, t414, t415, -t376, t409, t187, -t11 * t217 + t408, -t10 * t217 + t413, 0, 0;];
tau_reg = t5;
