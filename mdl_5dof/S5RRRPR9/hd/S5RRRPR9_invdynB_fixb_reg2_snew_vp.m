% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRPR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:25
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRPR9_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR9_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR9_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR9_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR9_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRPR9_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:24:56
% EndTime: 2019-12-31 21:25:15
% DurationCPUTime: 16.19s
% Computational Cost: add. (110372->668), mult. (231661->1024), div. (0->0), fcn. (165045->10), ass. (0->467)
t779 = sin(qJ(3));
t783 = cos(qJ(3));
t780 = sin(qJ(2));
t817 = qJD(1) * t780;
t737 = -t783 * qJD(2) + t779 * t817;
t784 = cos(qJ(2));
t816 = t784 * qJD(1);
t763 = -qJD(3) + t816;
t721 = t737 * t763;
t813 = qJD(1) * qJD(2);
t801 = t784 * t813;
t812 = t780 * qJDD(1);
t742 = t801 + t812;
t802 = t737 * qJD(3) - t779 * qJDD(2) - t783 * t742;
t661 = t721 + t802;
t775 = sin(pkin(9));
t766 = t780 * t813;
t810 = t784 * qJDD(1);
t743 = -t766 + t810;
t734 = -qJDD(3) + t743;
t738 = t779 * qJD(2) + t783 * t817;
t776 = cos(pkin(9));
t697 = t776 * t737 + t775 * t738;
t699 = -t775 * t737 + t776 * t738;
t850 = t699 * t697;
t791 = -t734 - t850;
t866 = t775 * t791;
t865 = t776 * t791;
t778 = sin(qJ(5));
t729 = -qJDD(5) + t734;
t782 = cos(qJ(5));
t640 = t782 * t697 + t778 * t699;
t642 = -t778 * t697 + t782 * t699;
t851 = t642 * t640;
t787 = -t729 - t851;
t864 = t778 * t787;
t849 = t738 * t737;
t790 = -t734 - t849;
t863 = t779 * t790;
t862 = t782 * t787;
t861 = t783 * t790;
t755 = -qJD(5) + t763;
t622 = t640 * t755;
t792 = t783 * qJDD(2) - t779 * t742;
t788 = t738 * qJD(3) - t792;
t632 = -t775 * t788 - t776 * t802;
t799 = -t775 * t802 + t776 * t788;
t789 = t640 * qJD(5) - t782 * t632 + t778 * t799;
t860 = t622 - t789;
t683 = t697 * t763;
t607 = t683 - t632;
t859 = t683 + t632;
t660 = t802 - t721;
t800 = t778 * t632 + t782 * t799;
t520 = (qJD(5) + t755) * t642 + t800;
t656 = (qJD(3) + t763) * t738 - t792;
t638 = t640 ^ 2;
t639 = t642 ^ 2;
t858 = t697 ^ 2;
t696 = t699 ^ 2;
t857 = t737 ^ 2;
t733 = t738 ^ 2;
t754 = t755 ^ 2;
t856 = t763 ^ 2;
t855 = qJD(2) ^ 2;
t854 = pkin(2) * t780;
t853 = pkin(2) * t784;
t852 = t784 * g(3);
t848 = t755 * t778;
t847 = t755 * t782;
t846 = t763 * t699;
t845 = t763 * t775;
t844 = t763 * t776;
t843 = t763 * t779;
t842 = t763 * t783;
t772 = t780 ^ 2;
t786 = qJD(1) ^ 2;
t841 = t772 * t786;
t781 = sin(qJ(1));
t785 = cos(qJ(1));
t752 = t781 * g(1) - t785 * g(2);
t726 = qJDD(1) * pkin(1) + t786 * pkin(6) + t752;
t793 = -t743 + t766;
t794 = t742 + t801;
t655 = pkin(2) * t793 - pkin(7) * t794 - t726;
t753 = t785 * g(1) + t781 * g(2);
t727 = -t786 * pkin(1) + qJDD(1) * pkin(6) - t753;
t716 = -t780 * g(3) + t784 * t727;
t796 = -pkin(7) * t780 - t853;
t740 = t796 * qJD(1);
t672 = -t855 * pkin(2) + qJDD(2) * pkin(7) + t740 * t816 + t716;
t612 = -t783 * t655 + t779 * t672;
t563 = t790 * pkin(3) + t661 * qJ(4) - t612;
t613 = t779 * t655 + t783 * t672;
t714 = -t763 * pkin(3) - t738 * qJ(4);
t566 = -t857 * pkin(3) - qJ(4) * t788 + t763 * t714 + t613;
t496 = 0.2e1 * qJD(4) * t699 - t776 * t563 + t775 * t566;
t469 = t791 * pkin(4) + pkin(8) * t607 - t496;
t497 = -0.2e1 * qJD(4) * t697 + t775 * t563 + t776 * t566;
t675 = -t763 * pkin(4) - t699 * pkin(8);
t474 = -t858 * pkin(4) - pkin(8) * t799 + t763 * t675 + t497;
t426 = -t782 * t469 + t778 * t474;
t427 = t778 * t469 + t782 * t474;
t392 = -t782 * t426 + t778 * t427;
t840 = t775 * t392;
t671 = t852 - qJDD(2) * pkin(2) - t855 * pkin(7) + (qJD(1) * t740 + t727) * t780;
t589 = t788 * pkin(3) - t857 * qJ(4) + t738 * t714 + qJDD(4) + t671;
t839 = t775 * t589;
t627 = t734 - t850;
t838 = t775 * t627;
t837 = t776 * t392;
t836 = t776 * t589;
t835 = t776 * t627;
t518 = pkin(4) * t799 - t858 * pkin(8) + t699 * t675 + t589;
t834 = t778 * t518;
t577 = t729 - t851;
t833 = t778 * t577;
t444 = -t776 * t496 + t775 * t497;
t832 = t779 * t444;
t831 = t779 * t671;
t685 = t734 - t849;
t830 = t779 * t685;
t829 = t780 * t726;
t828 = t780 * t734;
t762 = t784 * t786 * t780;
t750 = -t762 + qJDD(2);
t827 = t780 * t750;
t751 = qJDD(2) + t762;
t826 = t780 * t751;
t825 = t782 * t518;
t824 = t782 * t577;
t823 = t783 * t444;
t822 = t783 * t671;
t821 = t783 * t685;
t820 = t784 * t726;
t819 = t784 * t750;
t773 = t784 ^ 2;
t818 = t772 + t773;
t811 = t781 * qJDD(1);
t809 = t785 * qJDD(1);
t808 = t780 * t851;
t807 = t780 * t850;
t806 = t780 * t849;
t805 = t784 * t851;
t804 = t784 * t850;
t803 = t784 * t849;
t393 = t778 * t426 + t782 * t427;
t445 = t775 * t496 + t776 * t497;
t715 = t780 * t727 + t852;
t664 = t780 * t715 + t784 * t716;
t707 = -t781 * t752 - t785 * t753;
t798 = t781 * t762;
t797 = t785 * t762;
t747 = -t781 * t786 + t809;
t795 = -pkin(5) * t747 - t781 * g(3);
t556 = -t783 * t612 + t779 * t613;
t557 = t779 * t612 + t783 * t613;
t663 = t784 * t715 - t780 * t716;
t706 = t785 * t752 - t781 * t753;
t603 = t799 + t846;
t770 = t773 * t786;
t760 = -t770 - t855;
t759 = t770 - t855;
t758 = -t841 - t855;
t757 = -t841 + t855;
t749 = t770 - t841;
t748 = t770 + t841;
t746 = t785 * t786 + t811;
t745 = t818 * qJDD(1);
t744 = -0.2e1 * t766 + t810;
t741 = 0.2e1 * t801 + t812;
t736 = t784 * t751;
t735 = t818 * t813;
t724 = t784 * t734;
t723 = -pkin(5) * t746 + t785 * g(3);
t720 = -t733 + t856;
t719 = -t856 + t857;
t718 = t784 * t742 - t772 * t813;
t717 = -t780 * t743 - t773 * t813;
t713 = -t780 * t758 - t819;
t712 = -t780 * t757 + t736;
t711 = t784 * t760 - t826;
t710 = t784 * t759 - t827;
t709 = t784 * t758 - t827;
t708 = t780 * t760 + t736;
t704 = -t733 + t857;
t703 = t785 * t745 - t781 * t748;
t702 = t781 * t745 + t785 * t748;
t701 = -t733 - t856;
t700 = -t780 * t741 + t784 * t744;
t695 = -t856 - t857;
t684 = t733 + t857;
t681 = -t696 + t856;
t680 = -t856 + t858;
t679 = t785 * t713 + t781 * t741;
t678 = t785 * t711 - t781 * t744;
t677 = t781 * t713 - t785 * t741;
t676 = t781 * t711 + t785 * t744;
t674 = -pkin(6) * t709 - t820;
t673 = -pkin(6) * t708 - t829;
t670 = (t737 * t783 - t738 * t779) * t763;
t669 = (-t737 * t779 - t738 * t783) * t763;
t668 = -t696 - t856;
t666 = -pkin(1) * t709 + t716;
t665 = -pkin(1) * t708 + t715;
t657 = (-qJD(3) + t763) * t738 + t792;
t652 = t738 * t843 - t783 * t802;
t651 = t738 * t842 + t779 * t802;
t650 = -t737 * t842 + t779 * t788;
t649 = t737 * t843 + t783 * t788;
t648 = t784 * t670 - t828;
t647 = t783 * t719 + t830;
t646 = -t779 * t720 + t861;
t645 = -t779 * t719 + t821;
t644 = -t783 * t720 - t863;
t643 = -t696 + t858;
t637 = -t779 * t701 + t821;
t636 = t783 * t701 + t830;
t635 = -t856 - t858;
t634 = t785 * t664 - t781 * t726;
t633 = t781 * t664 + t785 * t726;
t626 = t783 * t695 - t863;
t625 = t779 * t695 + t861;
t621 = -t639 + t754;
t620 = t638 - t754;
t619 = (t697 * t776 - t699 * t775) * t763;
t618 = (t697 * t775 + t699 * t776) * t763;
t617 = -t639 - t754;
t616 = t784 * t652 + t806;
t615 = t784 * t650 - t806;
t614 = -t696 - t858;
t611 = -t656 * t783 - t779 * t661;
t610 = t783 * t657 + t660 * t779;
t609 = -t656 * t779 + t783 * t661;
t608 = -t779 * t657 + t660 * t783;
t602 = t799 - t846;
t601 = -pkin(7) * t636 + t822;
t600 = t776 * t632 + t699 * t845;
t599 = t775 * t632 - t699 * t844;
t598 = -t697 * t844 + t775 * t799;
t597 = -t697 * t845 - t776 * t799;
t596 = t784 * t647 - t780 * t656;
t595 = t784 * t646 - t780 * t661;
t594 = t776 * t680 + t838;
t593 = -t775 * t681 + t865;
t592 = t775 * t680 - t835;
t591 = t776 * t681 + t866;
t590 = -pkin(7) * t625 + t831;
t588 = t784 * t637 - t780 * t660;
t587 = -t775 * t668 + t835;
t586 = t780 * t637 + t784 * t660;
t585 = t776 * t668 + t838;
t584 = t784 * t626 - t780 * t657;
t583 = t780 * t626 + t784 * t657;
t582 = -t639 + t638;
t581 = t784 * t610 - t780 * t704;
t580 = -t754 - t638;
t576 = t776 * t635 - t866;
t575 = t775 * t635 + t865;
t574 = t784 * t611 - t780 * t684;
t573 = t780 * t611 + t784 * t684;
t572 = (t640 * t782 - t642 * t778) * t755;
t571 = (t640 * t778 + t642 * t782) * t755;
t570 = -t779 * t618 + t783 * t619;
t569 = -t783 * t618 - t779 * t619;
t568 = -pkin(2) * t636 + t613;
t567 = -pkin(2) * t625 + t612;
t564 = t784 * t570 - t828;
t560 = t785 * t588 + t781 * t636;
t559 = t781 * t588 - t785 * t636;
t558 = -t638 - t639;
t555 = t785 * t584 + t781 * t625;
t554 = t781 * t584 - t785 * t625;
t552 = -t642 * qJD(5) - t800;
t551 = -t603 * t776 - t775 * t607;
t550 = -t776 * t602 - t775 * t859;
t549 = -t603 * t775 + t776 * t607;
t548 = -t775 * t602 + t776 * t859;
t547 = t782 * t620 + t833;
t546 = -t778 * t621 + t862;
t545 = t778 * t620 - t824;
t544 = t782 * t621 + t864;
t543 = -t779 * t599 + t783 * t600;
t542 = -t779 * t597 + t783 * t598;
t541 = -t783 * t599 - t779 * t600;
t540 = -t783 * t597 - t779 * t598;
t539 = -t778 * t617 + t824;
t538 = t782 * t617 + t833;
t537 = -t779 * t592 + t783 * t594;
t536 = -t779 * t591 + t783 * t593;
t535 = -t783 * t592 - t779 * t594;
t534 = -t783 * t591 - t779 * t593;
t533 = t784 * t557 + t780 * t671;
t532 = t780 * t557 - t784 * t671;
t531 = -qJ(4) * t585 + t836;
t530 = -t779 * t585 + t783 * t587;
t529 = t783 * t585 + t779 * t587;
t528 = t785 * t574 + t781 * t609;
t527 = t781 * t574 - t785 * t609;
t526 = -qJ(4) * t575 + t839;
t525 = -pkin(1) * t586 - pkin(2) * t660 - pkin(7) * t637 - t831;
t524 = t622 + t789;
t519 = (qJD(5) - t755) * t642 + t800;
t517 = t782 * t580 - t864;
t516 = t778 * t580 + t862;
t515 = t642 * t848 - t782 * t789;
t514 = -t642 * t847 - t778 * t789;
t513 = -t778 * t552 - t640 * t847;
t512 = t782 * t552 - t640 * t848;
t511 = -pkin(1) * t583 - pkin(2) * t657 - pkin(7) * t626 + t822;
t510 = t784 * t543 + t807;
t509 = t784 * t542 - t807;
t508 = -t779 * t575 + t783 * t576;
t507 = t783 * t575 + t779 * t576;
t506 = -pkin(7) * t609 - t556;
t505 = -t775 * t571 + t776 * t572;
t504 = t776 * t571 + t775 * t572;
t503 = t784 * t537 - t780 * t603;
t502 = t784 * t536 - t780 * t607;
t501 = -pkin(3) * t859 + qJ(4) * t587 + t839;
t500 = t784 * t530 + t780 * t859;
t499 = t780 * t530 - t784 * t859;
t498 = -pkin(3) * t602 + qJ(4) * t576 - t836;
t494 = -pkin(6) * t586 - t780 * t568 + t784 * t601;
t493 = t784 * t508 + t780 * t602;
t492 = t780 * t508 - t784 * t602;
t491 = -pkin(6) * t583 - t780 * t567 + t784 * t590;
t490 = -t779 * t549 + t783 * t551;
t489 = -t779 * t548 + t783 * t550;
t488 = t783 * t549 + t779 * t551;
t487 = -t783 * t548 - t779 * t550;
t486 = t785 * t533 + t781 * t556;
t485 = t781 * t533 - t785 * t556;
t484 = -t775 * t545 + t776 * t547;
t483 = -t775 * t544 + t776 * t546;
t482 = t776 * t545 + t775 * t547;
t481 = t776 * t544 + t775 * t546;
t480 = -t775 * t538 + t776 * t539;
t479 = t776 * t538 + t775 * t539;
t478 = -pkin(1) * t573 - pkin(2) * t684 - pkin(7) * t611 - t557;
t477 = -pkin(1) * t532 + pkin(2) * t671 - pkin(7) * t557;
t476 = t784 * t489 - t780 * t643;
t475 = -pkin(8) * t538 + t825;
t473 = t784 * t490 + t780 * t614;
t472 = t780 * t490 - t784 * t614;
t470 = -pkin(6) * t573 + t784 * t506 + t609 * t854;
t466 = -t520 * t782 - t778 * t524;
t465 = -t782 * t519 - t778 * t860;
t464 = -t520 * t778 + t782 * t524;
t463 = -t778 * t519 + t782 * t860;
t462 = -pkin(8) * t516 + t834;
t461 = -t775 * t516 + t776 * t517;
t460 = t776 * t516 + t775 * t517;
t459 = -t775 * t514 + t776 * t515;
t458 = -t775 * t512 + t776 * t513;
t457 = t776 * t514 + t775 * t515;
t456 = t776 * t512 + t775 * t513;
t455 = t785 * t500 + t781 * t529;
t454 = t781 * t500 - t785 * t529;
t453 = -t779 * t504 + t783 * t505;
t452 = -t783 * t504 - t779 * t505;
t451 = t784 * t453 - t780 * t729;
t450 = -pkin(6) * t532 + (-pkin(7) * t784 + t854) * t556;
t449 = -pkin(2) * t488 - pkin(3) * t549;
t448 = t785 * t493 + t781 * t507;
t447 = t781 * t493 - t785 * t507;
t446 = -pkin(2) * t529 - pkin(3) * t585 + t497;
t443 = -pkin(4) * t860 + pkin(8) * t539 + t834;
t442 = -pkin(2) * t507 - pkin(3) * t575 + t496;
t441 = -pkin(7) * t529 - t779 * t501 + t783 * t531;
t440 = -pkin(4) * t519 + pkin(8) * t517 - t825;
t439 = -pkin(3) * t589 + qJ(4) * t445;
t438 = -t779 * t482 + t783 * t484;
t437 = -t779 * t481 + t783 * t483;
t436 = -t783 * t482 - t779 * t484;
t435 = -t783 * t481 - t779 * t483;
t434 = -t779 * t479 + t783 * t480;
t433 = t783 * t479 + t779 * t480;
t432 = -pkin(7) * t507 - t779 * t498 + t783 * t526;
t431 = t785 * t473 + t781 * t488;
t430 = t781 * t473 - t785 * t488;
t429 = -qJ(4) * t549 - t444;
t428 = -pkin(3) * t614 + qJ(4) * t551 + t445;
t424 = -t775 * t464 + t776 * t466;
t423 = -t775 * t463 + t776 * t465;
t422 = t776 * t464 + t775 * t466;
t421 = t776 * t463 + t775 * t465;
t420 = -t779 * t460 + t783 * t461;
t419 = t783 * t460 + t779 * t461;
t418 = -t779 * t457 + t783 * t459;
t417 = -t779 * t456 + t783 * t458;
t416 = -t783 * t457 - t779 * t459;
t415 = -t783 * t456 - t779 * t458;
t414 = t784 * t438 - t780 * t520;
t413 = t784 * t437 - t780 * t524;
t412 = t784 * t434 + t780 * t860;
t411 = t780 * t434 - t784 * t860;
t410 = t784 * t418 + t808;
t409 = t784 * t417 - t808;
t408 = -pkin(1) * t499 + pkin(2) * t859 - pkin(7) * t530 - t783 * t501 - t779 * t531;
t407 = -pkin(1) * t492 + pkin(2) * t602 - pkin(7) * t508 - t783 * t498 - t779 * t526;
t406 = t784 * t420 + t780 * t519;
t405 = t780 * t420 - t784 * t519;
t404 = t783 * t445 - t832;
t403 = t779 * t445 + t823;
t402 = t784 * t404 + t780 * t589;
t401 = t780 * t404 - t784 * t589;
t400 = -qJ(4) * t479 - t775 * t443 + t776 * t475;
t399 = -pkin(6) * t499 + t784 * t441 - t780 * t446;
t398 = -qJ(4) * t460 - t775 * t440 + t776 * t462;
t397 = -pkin(3) * t860 + qJ(4) * t480 + t776 * t443 + t775 * t475;
t396 = t785 * t412 + t781 * t433;
t395 = t781 * t412 - t785 * t433;
t394 = -pkin(6) * t492 + t784 * t432 - t780 * t442;
t391 = -t779 * t422 + t783 * t424;
t390 = -t779 * t421 + t783 * t423;
t389 = t783 * t422 + t779 * t424;
t388 = -t783 * t421 - t779 * t423;
t387 = -pkin(3) * t519 + qJ(4) * t461 + t776 * t440 + t775 * t462;
t386 = -pkin(2) * t403 - pkin(3) * t444;
t385 = t784 * t390 - t780 * t582;
t384 = t784 * t391 + t780 * t558;
t383 = t780 * t391 - t784 * t558;
t382 = -pkin(4) * t518 + pkin(8) * t393;
t381 = -pkin(7) * t488 - t779 * t428 + t783 * t429;
t380 = t785 * t406 + t781 * t419;
t379 = t781 * t406 - t785 * t419;
t378 = -pkin(2) * t433 - pkin(3) * t479 - pkin(4) * t538 + t427;
t377 = -pkin(8) * t464 - t392;
t376 = -pkin(4) * t558 + pkin(8) * t466 + t393;
t375 = -pkin(2) * t419 - pkin(3) * t460 - pkin(4) * t516 + t426;
t374 = -pkin(1) * t472 + pkin(2) * t614 - pkin(7) * t490 - t783 * t428 - t779 * t429;
t373 = -pkin(7) * t403 - qJ(4) * t823 - t779 * t439;
t372 = t785 * t402 + t781 * t403;
t371 = t781 * t402 - t785 * t403;
t370 = -pkin(6) * t472 + t784 * t381 - t780 * t449;
t369 = -pkin(2) * t389 - pkin(3) * t422 - pkin(4) * t464;
t368 = t776 * t393 - t840;
t367 = t775 * t393 + t837;
t366 = t785 * t384 + t781 * t389;
t365 = t781 * t384 - t785 * t389;
t364 = -pkin(7) * t433 - t779 * t397 + t783 * t400;
t363 = -pkin(1) * t401 + pkin(2) * t589 - pkin(7) * t404 + qJ(4) * t832 - t783 * t439;
t362 = -pkin(7) * t419 - t779 * t387 + t783 * t398;
t361 = -pkin(1) * t411 + pkin(2) * t860 - pkin(7) * t434 - t783 * t397 - t779 * t400;
t360 = -qJ(4) * t422 - t775 * t376 + t776 * t377;
t359 = -pkin(3) * t558 + qJ(4) * t424 + t776 * t376 + t775 * t377;
t358 = -pkin(1) * t405 + pkin(2) * t519 - pkin(7) * t420 - t783 * t387 - t779 * t398;
t357 = -pkin(6) * t401 + t784 * t373 - t780 * t386;
t356 = -pkin(6) * t411 + t784 * t364 - t780 * t378;
t355 = -t779 * t367 + t783 * t368;
t354 = t783 * t367 + t779 * t368;
t353 = -pkin(8) * t837 - qJ(4) * t367 - t775 * t382;
t352 = t784 * t355 + t780 * t518;
t351 = t780 * t355 - t784 * t518;
t350 = -pkin(3) * t518 - pkin(8) * t840 + qJ(4) * t368 + t776 * t382;
t349 = -pkin(6) * t405 + t784 * t362 - t780 * t375;
t348 = -pkin(2) * t354 - pkin(3) * t367 - pkin(4) * t392;
t347 = -pkin(7) * t389 - t779 * t359 + t783 * t360;
t346 = t785 * t352 + t781 * t354;
t345 = t781 * t352 - t785 * t354;
t344 = -pkin(1) * t383 + pkin(2) * t558 - pkin(7) * t391 - t783 * t359 - t779 * t360;
t343 = -pkin(6) * t383 + t784 * t347 - t780 * t369;
t342 = -pkin(7) * t354 - t779 * t350 + t783 * t353;
t341 = -pkin(1) * t351 + pkin(2) * t518 - pkin(7) * t355 - t783 * t350 - t779 * t353;
t340 = -pkin(6) * t351 + t784 * t342 - t780 * t348;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t746, -t747, 0, t707, 0, 0, 0, 0, 0, 0, t678, t679, t703, t634, 0, 0, 0, 0, 0, 0, t555, t560, t528, t486, 0, 0, 0, 0, 0, 0, t448, t455, t431, t372, 0, 0, 0, 0, 0, 0, t380, t396, t366, t346; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t747, -t746, 0, t706, 0, 0, 0, 0, 0, 0, t676, t677, t702, t633, 0, 0, 0, 0, 0, 0, t554, t559, t527, t485, 0, 0, 0, 0, 0, 0, t447, t454, t430, t371, 0, 0, 0, 0, 0, 0, t379, t395, t365, t345; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t708, t709, 0, -t663, 0, 0, 0, 0, 0, 0, t583, t586, t573, t532, 0, 0, 0, 0, 0, 0, t492, t499, t472, t401, 0, 0, 0, 0, 0, 0, t405, t411, t383, t351; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t747, 0, -t746, 0, t795, -t723, -t706, -pkin(5) * t706, t785 * t718 - t798, t785 * t700 - t781 * t749, t785 * t712 + t780 * t811, t785 * t717 + t798, t785 * t710 + t781 * t810, t781 * qJDD(2) + t785 * t735, -pkin(5) * t676 - t781 * t665 + t785 * t673, -pkin(5) * t677 - t781 * t666 + t785 * t674, -pkin(5) * t702 + t785 * t663, -pkin(5) * t633 - (pkin(1) * t781 - pkin(6) * t785) * t663, t785 * t616 - t781 * t651, t785 * t581 - t781 * t608, t785 * t595 - t781 * t644, t785 * t615 - t781 * t649, t785 * t596 - t781 * t645, t785 * t648 - t781 * t669, -pkin(5) * t554 + t785 * t491 - t781 * t511, -pkin(5) * t559 + t785 * t494 - t781 * t525, -pkin(5) * t527 + t785 * t470 - t781 * t478, -pkin(5) * t485 + t785 * t450 - t781 * t477, t785 * t510 - t781 * t541, t785 * t476 - t781 * t487, t785 * t502 - t781 * t534, t785 * t509 - t781 * t540, t785 * t503 - t781 * t535, t785 * t564 - t781 * t569, -pkin(5) * t447 + t785 * t394 - t781 * t407, -pkin(5) * t454 + t785 * t399 - t781 * t408, -pkin(5) * t430 + t785 * t370 - t781 * t374, -pkin(5) * t371 + t785 * t357 - t781 * t363, t785 * t410 - t781 * t416, t785 * t385 - t781 * t388, t785 * t413 - t781 * t435, t785 * t409 - t781 * t415, t785 * t414 - t781 * t436, t785 * t451 - t781 * t452, -pkin(5) * t379 + t785 * t349 - t781 * t358, -pkin(5) * t395 + t785 * t356 - t781 * t361, -pkin(5) * t365 + t785 * t343 - t781 * t344, -pkin(5) * t345 + t785 * t340 - t781 * t341; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t746, 0, t747, 0, t723, t795, t707, pkin(5) * t707, t781 * t718 + t797, t781 * t700 + t785 * t749, t781 * t712 - t780 * t809, t781 * t717 - t797, t781 * t710 - t784 * t809, -t785 * qJDD(2) + t781 * t735, pkin(5) * t678 + t785 * t665 + t781 * t673, pkin(5) * t679 + t785 * t666 + t781 * t674, pkin(5) * t703 + t781 * t663, pkin(5) * t634 - (-pkin(1) * t785 - pkin(6) * t781) * t663, t781 * t616 + t785 * t651, t781 * t581 + t785 * t608, t781 * t595 + t785 * t644, t781 * t615 + t785 * t649, t781 * t596 + t785 * t645, t781 * t648 + t785 * t669, pkin(5) * t555 + t781 * t491 + t785 * t511, pkin(5) * t560 + t781 * t494 + t785 * t525, pkin(5) * t528 + t781 * t470 + t785 * t478, pkin(5) * t486 + t781 * t450 + t785 * t477, t781 * t510 + t785 * t541, t781 * t476 + t785 * t487, t781 * t502 + t785 * t534, t781 * t509 + t785 * t540, t781 * t503 + t785 * t535, t781 * t564 + t785 * t569, pkin(5) * t448 + t781 * t394 + t785 * t407, pkin(5) * t455 + t781 * t399 + t785 * t408, pkin(5) * t431 + t781 * t370 + t785 * t374, pkin(5) * t372 + t781 * t357 + t785 * t363, t781 * t410 + t785 * t416, t781 * t385 + t785 * t388, t781 * t413 + t785 * t435, t781 * t409 + t785 * t415, t781 * t414 + t785 * t436, t781 * t451 + t785 * t452, pkin(5) * t380 + t781 * t349 + t785 * t358, pkin(5) * t396 + t781 * t356 + t785 * t361, pkin(5) * t366 + t781 * t343 + t785 * t344, pkin(5) * t346 + t781 * t340 + t785 * t341; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t752, t753, 0, 0, t794 * t780, t784 * t741 + t780 * t744, t784 * t757 + t826, -t793 * t784, t780 * t759 + t819, 0, pkin(1) * t744 + pkin(6) * t711 + t820, -pkin(1) * t741 + pkin(6) * t713 - t829, pkin(1) * t748 + pkin(6) * t745 + t664, pkin(1) * t726 + pkin(6) * t664, t780 * t652 - t803, t780 * t610 + t784 * t704, t780 * t646 + t784 * t661, t780 * t650 + t803, t780 * t647 + t784 * t656, t780 * t670 + t724, -pkin(1) * t625 + pkin(6) * t584 + t784 * t567 + t780 * t590, -pkin(1) * t636 + pkin(6) * t588 + t784 * t568 + t780 * t601, pkin(6) * t574 + t780 * t506 + (-pkin(1) - t853) * t609, pkin(6) * t533 + (-pkin(1) + t796) * t556, t780 * t543 - t804, t780 * t489 + t784 * t643, t780 * t536 + t784 * t607, t780 * t542 + t804, t780 * t537 + t784 * t603, t780 * t570 + t724, -pkin(1) * t507 + pkin(6) * t493 + t780 * t432 + t784 * t442, -pkin(1) * t529 + pkin(6) * t500 + t780 * t441 + t784 * t446, -pkin(1) * t488 + pkin(6) * t473 + t780 * t381 + t784 * t449, -pkin(1) * t403 + pkin(6) * t402 + t780 * t373 + t784 * t386, t780 * t418 - t805, t780 * t390 + t784 * t582, t780 * t437 + t784 * t524, t780 * t417 + t805, t780 * t438 + t784 * t520, t780 * t453 + t784 * t729, -pkin(1) * t419 + pkin(6) * t406 + t780 * t362 + t784 * t375, -pkin(1) * t433 + pkin(6) * t412 + t780 * t364 + t784 * t378, -pkin(1) * t389 + pkin(6) * t384 + t780 * t347 + t784 * t369, -pkin(1) * t354 + pkin(6) * t352 + t780 * t342 + t784 * t348;];
tauB_reg = t1;
