% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PPRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d4,theta1,theta2]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:07
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PPRRP1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRRP1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRRP1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRRP1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRRP1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PPRRP1_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:07:16
% EndTime: 2019-12-05 15:07:23
% DurationCPUTime: 3.94s
% Computational Cost: add. (8505->353), mult. (16291->506), div. (0->0), fcn. (10856->8), ass. (0->268)
t344 = sin(pkin(7));
t351 = cos(qJ(3));
t353 = qJD(3) ^ 2;
t349 = sin(qJ(3));
t378 = qJDD(3) * t349;
t318 = t351 * t353 + t378;
t376 = qJDD(3) * t351;
t319 = -t349 * t353 + t376;
t343 = sin(pkin(8));
t345 = cos(pkin(8));
t363 = -t318 * t343 + t319 * t345;
t424 = t344 * t363;
t346 = cos(pkin(7));
t423 = t346 * t363;
t323 = g(1) * t346 + g(2) * t344;
t341 = g(3) - qJDD(1);
t298 = -t323 * t343 + t341 * t345;
t299 = -t323 * t345 - t341 * t343;
t241 = t298 * t351 + t299 * t349;
t242 = -t298 * t349 + t299 * t351;
t364 = t241 * t349 + t242 * t351;
t191 = t241 * t351 - t242 * t349;
t399 = t191 * t345;
t153 = -t343 * t364 + t399;
t400 = t191 * t343;
t154 = t345 * t364 + t400;
t322 = g(1) * t344 - g(2) * t346;
t316 = -qJDD(2) + t322;
t276 = pkin(5) * t318 - t316 * t351;
t359 = -pkin(5) * t319 - t316 * t349;
t204 = -qJ(2) * t363 + t276 * t343 + t345 * t359;
t417 = t318 * t345 + t319 * t343;
t205 = qJ(2) * t417 + t276 * t345 - t343 * t359;
t348 = sin(qJ(4));
t350 = cos(qJ(4));
t331 = t348 * t353 * t350;
t375 = qJDD(4) + t331;
t421 = t375 * pkin(4);
t232 = -pkin(3) * t353 + qJDD(3) * pkin(6) + t242;
t219 = t232 * t348 + t316 * t350;
t380 = qJD(3) * qJD(4);
t369 = t350 * t380;
t379 = qJDD(3) * t348;
t313 = t369 + t379;
t305 = t313 * qJ(5);
t416 = -t305 - t219 + t421;
t352 = qJD(4) ^ 2;
t339 = t348 ^ 2;
t389 = t339 * t353;
t328 = -t352 - t389;
t326 = qJDD(4) - t331;
t391 = t326 * t348;
t283 = t328 * t350 - t391;
t414 = pkin(3) * t283;
t340 = t350 ^ 2;
t337 = t340 * t353;
t330 = -t337 - t352;
t393 = t375 * t348;
t286 = t330 * t350 - t393;
t372 = t348 * t380;
t377 = qJDD(3) * t350;
t315 = -0.2e1 * t372 + t377;
t247 = t286 * t349 + t315 * t351;
t413 = pkin(5) * t247;
t390 = t326 * t350;
t290 = -t328 * t348 - t390;
t312 = 0.2e1 * t369 + t379;
t248 = t290 * t349 - t312 * t351;
t412 = pkin(5) * t248;
t382 = t339 + t340;
t317 = t382 * qJDD(3);
t320 = t337 + t389;
t269 = t317 * t349 + t320 * t351;
t411 = pkin(5) * t269;
t392 = t375 * t350;
t282 = t330 * t348 + t392;
t410 = pkin(6) * t282;
t409 = pkin(6) * t283;
t249 = t286 * t351 - t315 * t349;
t202 = -t247 * t343 + t249 * t345;
t172 = t202 * t344 - t282 * t346;
t408 = qJ(1) * t172;
t250 = t290 * t351 + t312 * t349;
t203 = -t248 * t343 + t250 * t345;
t173 = t203 * t344 - t283 * t346;
t407 = qJ(1) * t173;
t270 = t317 * t351 - t320 * t349;
t228 = -t269 * t343 + t270 * t345;
t406 = qJ(1) * t228;
t200 = t247 * t345 + t249 * t343;
t405 = qJ(2) * t200;
t201 = t248 * t345 + t250 * t343;
t404 = qJ(2) * t201;
t227 = t269 * t345 + t270 * t343;
t403 = qJ(2) * t227;
t179 = (qJ(5) * qJD(4) * t350 - 0.2e1 * qJD(5) * t348) * qJD(3) + t416;
t402 = t179 * t348;
t401 = t179 * t350;
t231 = -qJDD(3) * pkin(3) - pkin(6) * t353 + t241;
t398 = t231 * t348;
t397 = t231 * t350;
t396 = t316 * t344;
t388 = t343 * t316;
t387 = t344 * t341;
t386 = t345 * t316;
t225 = t346 * t228;
t300 = t346 * t316;
t385 = t346 * t341;
t384 = -pkin(1) * t282 + qJ(2) * t202;
t383 = -pkin(1) * t283 + qJ(2) * t203;
t220 = t232 * t350 - t316 * t348;
t381 = qJD(3) * t348;
t374 = 0.2e1 * qJD(3) * qJD(5);
t371 = t348 * t378;
t370 = t348 * t376;
t368 = -pkin(2) * t282 + pkin(5) * t249;
t367 = -pkin(2) * t283 + pkin(5) * t250;
t366 = pkin(1) * t417 + pkin(2) * t318 - qJ(1) * t363 + t242;
t365 = -pkin(1) * t363 - pkin(2) * t319 - qJ(1) * t417 + t241;
t240 = t298 * t343 + t299 * t345;
t272 = -t322 * t344 - t323 * t346;
t361 = t349 * t331;
t360 = t351 * t331;
t195 = -pkin(3) * t282 + t219;
t163 = t219 * t350 - t220 * t348;
t164 = t219 * t348 + t220 * t350;
t239 = t298 * t345 - t299 * t343;
t271 = t322 * t346 - t323 * t344;
t314 = -t372 + t377;
t324 = qJD(4) * pkin(4) - qJ(5) * t381;
t357 = qJ(5) * t314 - qJD(4) * t324 + t350 * t374 + t220;
t356 = -pkin(1) * t200 - pkin(2) * t247 - pkin(3) * t315 - pkin(6) * t286;
t355 = -pkin(1) * t201 - pkin(2) * t248 + pkin(3) * t312 - pkin(6) * t290;
t354 = -pkin(1) * t227 - pkin(2) * t269 - pkin(3) * t320 - pkin(6) * t317;
t208 = -pkin(4) * t314 - qJ(5) * t337 + t324 * t381 + qJDD(5) + t231;
t333 = t348 * t374;
t329 = t337 - t352;
t327 = t352 - t389;
t321 = t337 - t389;
t311 = pkin(1) * t316;
t310 = t382 * t380;
t297 = qJDD(4) * t349 + t310 * t351;
t296 = t313 * t350 - t339 * t380;
t295 = -qJDD(4) * t351 + t310 * t349;
t294 = -t314 * t348 - t340 * t380;
t289 = -t329 * t348 - t390;
t288 = -t327 * t348 + t392;
t287 = (-t314 + t372) * t350;
t285 = t329 * t350 - t391;
t284 = -t327 * t350 - t393;
t281 = (-t313 - t369) * t348;
t279 = -pkin(4) * t312 - qJ(5) * t326;
t263 = pkin(5) * t270;
t262 = -t312 * t348 + t315 * t350;
t261 = -t312 * t350 - t315 * t348;
t260 = t346 * t417;
t259 = t344 * t417;
t258 = t296 * t351 - t361;
t257 = t294 * t351 + t361;
t256 = t296 * t349 + t360;
t255 = t294 * t349 - t360;
t254 = t288 * t351 + t371;
t253 = t285 * t351 + t349 * t377;
t252 = t288 * t349 - t370;
t251 = t285 * t349 - t350 * t376;
t244 = t262 * t351 - t321 * t349;
t243 = t262 * t349 + t321 * t351;
t237 = -t295 * t343 + t297 * t345;
t236 = t295 * t345 + t297 * t343;
t234 = t346 * t237;
t233 = t344 * t237;
t226 = qJ(2) * t228;
t224 = t344 * t228;
t223 = qJ(1) * t225;
t222 = t240 * t346 - t396;
t221 = t240 * t344 + t300;
t218 = -t256 * t343 + t258 * t345;
t217 = -t255 * t343 + t257 * t345;
t216 = t256 * t345 + t258 * t343;
t215 = t255 * t345 + t257 * t343;
t214 = -t252 * t343 + t254 * t345;
t213 = -t251 * t343 + t253 * t345;
t212 = t252 * t345 + t254 * t343;
t211 = t251 * t345 + t253 * t343;
t210 = t397 - t409;
t209 = t398 - t410;
t197 = -qJ(5) * t328 + t208;
t196 = t220 - t414;
t194 = -t243 * t343 + t244 * t345;
t193 = t243 * t345 + t244 * t343;
t188 = -pkin(4) * t337 + t357;
t187 = t218 * t346 - t281 * t344;
t186 = t217 * t346 - t287 * t344;
t185 = t218 * t344 + t281 * t346;
t184 = t217 * t344 + t287 * t346;
t183 = t214 * t346 - t284 * t344;
t182 = t213 * t346 - t289 * t344;
t181 = t214 * t344 + t284 * t346;
t180 = t213 * t344 + t289 * t346;
t178 = pkin(4) * t315 + qJ(5) * t330 - t208;
t177 = t333 + (-t369 + t379) * qJ(5) - t416;
t176 = pkin(2) * t316 + pkin(5) * t364;
t175 = t203 * t346 + t283 * t344;
t174 = t202 * t346 + t282 * t344;
t171 = qJ(5) * t377 + (t320 - t337) * pkin(4) + t357;
t170 = qJ(1) * t175;
t169 = qJ(1) * t174;
t168 = t194 * t346 - t261 * t344;
t167 = t194 * t344 + t261 * t346;
t166 = -t414 + (-t328 - t337) * pkin(4) + t357;
t165 = -qJ(5) * t369 + t195 + t305 + t333 - 0.2e1 * t421;
t161 = -qJ(5) * t392 - t178 * t348 - t410;
t160 = t197 * t350 - t279 * t348 - t409;
t159 = t163 * t351 - t411;
t158 = t163 * t349 + t263;
t157 = -pkin(4) * t208 + qJ(5) * t188;
t156 = t164 * t351 + t231 * t349;
t155 = t164 * t349 - t231 * t351;
t151 = t188 * t350 - t402;
t150 = t188 * t348 + t401;
t149 = -t196 * t349 + t210 * t351 - t412;
t148 = -t195 * t349 + t209 * t351 - t413;
t147 = t154 * t346 - t396;
t146 = t154 * t344 + t300;
t145 = t355 - t398;
t144 = t356 + t397;
t143 = -t171 * t348 + t177 * t350;
t142 = t196 * t351 + t210 * t349 + t367;
t141 = t195 * t351 + t209 * t349 + t368;
t140 = -t164 + t354;
t139 = -pkin(4) * t371 + t143 * t351 - t411;
t138 = pkin(4) * t370 + t143 * t349 + t263;
t137 = qJ(5) * t393 - t178 * t350 + t356;
t136 = -t197 * t348 - t279 * t350 + t355;
t135 = t151 * t351 + t208 * t349;
t134 = t151 * t349 - t208 * t351;
t133 = pkin(1) * t153 + pkin(2) * t191;
t132 = -pkin(3) * t150 - pkin(4) * t179;
t131 = t160 * t351 - t166 * t349 - t412;
t130 = t161 * t351 - t165 * t349 - t413;
t129 = -t171 * t350 - t177 * t348 + t354;
t128 = t160 * t349 + t166 * t351 + t367;
t127 = t161 * t349 + t165 * t351 + t368;
t126 = -t155 * t343 + t156 * t345;
t125 = t155 * t345 + t156 * t343;
t124 = -t158 * t343 + t159 * t345 - t403;
t123 = pkin(5) * t399 + qJ(2) * t153 - t176 * t343;
t122 = -pkin(5) * t155 - (pkin(3) * t349 - pkin(6) * t351) * t163;
t121 = -pkin(6) * t150 - qJ(5) * t401 - t157 * t348;
t120 = -t142 * t343 + t149 * t345 - t404;
t119 = -t141 * t343 + t148 * t345 - t405;
t118 = t126 * t346 - t163 * t344;
t117 = t126 * t344 + t163 * t346;
t116 = -t134 * t343 + t135 * t345;
t115 = t134 * t345 + t135 * t343;
t114 = -t138 * t343 + t139 * t345 - t403;
t113 = pkin(5) * t156 - (-pkin(3) * t351 - pkin(6) * t349 - pkin(2)) * t163;
t112 = -t128 * t343 + t131 * t345 - t404;
t111 = -t127 * t343 + t130 * t345 - t405;
t110 = -pkin(1) * t125 - pkin(2) * t155 + pkin(3) * t231 - pkin(6) * t164;
t109 = t116 * t346 + t150 * t344;
t108 = t116 * t344 - t150 * t346;
t107 = -pkin(5) * t134 + t121 * t351 - t132 * t349;
t106 = -pkin(2) * t150 + pkin(5) * t135 + t121 * t349 + t132 * t351;
t105 = -pkin(1) * t115 - pkin(2) * t134 + pkin(3) * t208 - pkin(6) * t151 + qJ(5) * t402 - t157 * t350;
t104 = -qJ(2) * t125 - t113 * t343 + t122 * t345;
t103 = -qJ(2) * t115 - t106 * t343 + t107 * t345;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t272, 0, 0, 0, 0, 0, 0, 0, 0, 0, t222, 0, 0, 0, 0, 0, 0, -t260, -t423, 0, t147, 0, 0, 0, 0, 0, 0, t174, t175, t225, t118, 0, 0, 0, 0, 0, 0, t174, t175, t225, t109; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t271, 0, 0, 0, 0, 0, 0, 0, 0, 0, t221, 0, 0, 0, 0, 0, 0, -t259, -t424, 0, t146, 0, 0, 0, 0, 0, 0, t172, t173, t224, t117, 0, 0, 0, 0, 0, 0, t172, t173, t224, t108; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t341, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t239, 0, 0, 0, 0, 0, 0, t363, -t417, 0, -t153, 0, 0, 0, 0, 0, 0, t200, t201, t227, t125, 0, 0, 0, 0, 0, 0, t200, t201, t227, t115; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t387, -t385, -t271, -qJ(1) * t271, 0, 0, 0, 0, 0, 0, -t298 * t344 - t300 * t343, -t299 * t344 - t300 * t345, t346 * t239, -qJ(1) * t221 - (pkin(1) * t344 - qJ(2) * t346) * t239, 0, 0, t423, 0, -t260, t344 * qJDD(3), t204 * t346 - t344 * t365, t205 * t346 - t344 * t366, t346 * t153, -qJ(1) * t146 + t123 * t346 - t133 * t344, t187, t168, t183, t186, t182, t234, t119 * t346 - t144 * t344 - t408, t120 * t346 - t145 * t344 - t407, t124 * t346 + (-t140 - t406) * t344, -qJ(1) * t117 + t104 * t346 - t110 * t344, t187, t168, t183, t186, t182, t234, t111 * t346 - t137 * t344 - t408, t112 * t346 - t136 * t344 - t407, t114 * t346 + (-t129 - t406) * t344, -qJ(1) * t108 + t103 * t346 - t105 * t344; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t385, -t387, t272, qJ(1) * t272, 0, 0, 0, 0, 0, 0, t298 * t346 - t344 * t388, t299 * t346 - t344 * t386, t344 * t239, qJ(1) * t222 - (-pkin(1) * t346 - qJ(2) * t344) * t239, 0, 0, t424, 0, -t259, -t346 * qJDD(3), t204 * t344 + t346 * t365, t205 * t344 + t346 * t366, t344 * t153, qJ(1) * t147 + t123 * t344 + t133 * t346, t185, t167, t181, t184, t180, t233, t119 * t344 + t144 * t346 + t169, t120 * t344 + t145 * t346 + t170, t124 * t344 + t140 * t346 + t223, qJ(1) * t118 + t104 * t344 + t110 * t346, t185, t167, t181, t184, t180, t233, t111 * t344 + t137 * t346 + t169, t112 * t344 + t136 * t346 + t170, t114 * t344 + t129 * t346 + t223, qJ(1) * t109 + t103 * t344 + t105 * t346; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t322, t323, 0, 0, 0, 0, 0, 0, 0, 0, t386, -t388, t240, qJ(2) * t240 + t311, 0, 0, t417, 0, t363, 0, -t205, t204, t154, pkin(5) * t400 + qJ(2) * t154 + t176 * t345 + t311, t216, t193, t212, t215, t211, t236, t141 * t345 + t148 * t343 + t384, t142 * t345 + t149 * t343 + t383, t158 * t345 + t159 * t343 + t226, pkin(1) * t163 + qJ(2) * t126 + t113 * t345 + t122 * t343, t216, t193, t212, t215, t211, t236, t127 * t345 + t130 * t343 + t384, t128 * t345 + t131 * t343 + t383, t138 * t345 + t139 * t343 + t226, -pkin(1) * t150 + qJ(2) * t116 + t106 * t345 + t107 * t343;];
tauB_reg = t1;
