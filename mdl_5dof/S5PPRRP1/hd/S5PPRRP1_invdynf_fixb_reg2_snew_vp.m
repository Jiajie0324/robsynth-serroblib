% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PPRRP1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d4,theta1,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:07
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PPRRP1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRRP1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRRP1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRRP1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRRP1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PPRRP1_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:07:29
% EndTime: 2019-12-05 15:07:30
% DurationCPUTime: 1.28s
% Computational Cost: add. (2367->120), mult. (4568->160), div. (0->0), fcn. (3125->8), ass. (0->94)
t893 = cos(qJ(4));
t883 = t893 ^ 2;
t896 = qJD(3) ^ 2;
t908 = t883 * t896;
t887 = sin(pkin(7));
t889 = cos(pkin(7));
t869 = g(1) * t887 - t889 * g(2);
t864 = -qJDD(2) + t869;
t907 = t887 * t864;
t906 = t893 * t896;
t870 = -g(1) * t889 - g(2) * t887;
t884 = -g(3) + qJDD(1);
t886 = sin(pkin(8));
t888 = cos(pkin(8));
t856 = t870 * t888 + t884 * t886;
t892 = sin(qJ(3));
t894 = cos(qJ(3));
t898 = -t870 * t886 + t884 * t888;
t838 = t894 * t856 + t892 * t898;
t834 = -pkin(3) * t896 + qJDD(3) * pkin(6) + t838;
t891 = sin(qJ(4));
t827 = t893 * t834 - t891 * t864;
t882 = t891 ^ 2;
t905 = t882 + t883;
t904 = qJD(3) * t891;
t903 = t891 * qJDD(3);
t902 = t893 * qJDD(3);
t901 = 0.2e1 * qJD(3) * t893;
t900 = qJD(4) * t904;
t837 = -t892 * t856 + t894 * t898;
t866 = qJDD(3) * t894 - t892 * t896;
t867 = -qJDD(3) * t892 - t894 * t896;
t899 = -t866 * t886 + t888 * t867;
t844 = t866 * t888 + t867 * t886;
t833 = -qJDD(3) * pkin(3) - t896 * pkin(6) - t837;
t897 = -t900 + t902;
t895 = qJD(4) ^ 2;
t876 = t891 * t906;
t875 = -t895 - t908;
t874 = -t882 * t896 - t895;
t873 = -qJDD(4) + t876;
t872 = qJDD(4) + t876;
t871 = qJD(4) * pkin(4) - qJ(5) * t904;
t868 = t905 * t896;
t865 = t905 * qJDD(3);
t863 = -0.2e1 * t900 + t902;
t862 = qJD(4) * t901 + t903;
t859 = t893 * t864;
t857 = t889 * t864;
t852 = t873 * t893 - t874 * t891;
t851 = -t872 * t891 + t875 * t893;
t850 = t873 * t891 + t874 * t893;
t849 = t872 * t893 + t875 * t891;
t848 = t865 * t894 - t868 * t892;
t847 = t865 * t892 + t868 * t894;
t842 = t852 * t894 + t862 * t892;
t841 = t851 * t894 - t863 * t892;
t840 = t852 * t892 - t862 * t894;
t839 = t851 * t892 + t863 * t894;
t836 = t888 * t856 - t886 * t898;
t835 = t886 * t856 + t888 * t898;
t831 = -t847 * t886 + t848 * t888;
t830 = t847 * t888 + t848 * t886;
t829 = t889 * t831;
t828 = t887 * t831;
t826 = -t891 * t834 - t859;
t825 = -pkin(4) * t897 - qJ(5) * t908 + t871 * t904 + qJDD(5) + t833;
t824 = -t840 * t886 + t842 * t888;
t823 = -t839 * t886 + t841 * t888;
t822 = t840 * t888 + t842 * t886;
t821 = t839 * t888 + t841 * t886;
t820 = -t837 * t892 + t838 * t894;
t819 = t837 * t894 + t838 * t892;
t818 = -pkin(4) * t908 + qJ(5) * t897 - qJD(4) * t871 + qJD(5) * t901 + t827;
t817 = qJDD(4) * pkin(4) - t859 + (pkin(4) * t906 - qJ(5) * qJDD(3) - 0.2e1 * qJD(3) * qJD(5) - t834) * t891;
t816 = t824 * t889 + t850 * t887;
t815 = t823 * t889 + t849 * t887;
t814 = t824 * t887 - t850 * t889;
t813 = t823 * t887 - t849 * t889;
t812 = -t826 * t891 + t827 * t893;
t811 = t826 * t893 + t827 * t891;
t810 = t812 * t894 + t833 * t892;
t809 = t812 * t892 - t833 * t894;
t808 = -t819 * t886 + t820 * t888;
t807 = t819 * t888 + t820 * t886;
t806 = -t817 * t891 + t818 * t893;
t805 = t817 * t893 + t818 * t891;
t804 = t806 * t894 + t825 * t892;
t803 = t806 * t892 - t825 * t894;
t802 = -t809 * t886 + t810 * t888;
t801 = t809 * t888 + t810 * t886;
t800 = -t803 * t886 + t804 * t888;
t799 = t803 * t888 + t804 * t886;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t869 * t887 + t870 * t889, 0, 0, 0, 0, 0, 0, 0, 0, 0, t836 * t889 - t907, 0, 0, 0, 0, 0, 0, t889 * t899, -t889 * t844, 0, t808 * t889 - t907, 0, 0, 0, 0, 0, 0, t815, t816, t829, t802 * t889 + t811 * t887, 0, 0, 0, 0, 0, 0, t815, t816, t829, t800 * t889 + t805 * t887; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t869 * t889 + t870 * t887, 0, 0, 0, 0, 0, 0, 0, 0, 0, t836 * t887 + t857, 0, 0, 0, 0, 0, 0, t887 * t899, -t887 * t844, 0, t808 * t887 + t857, 0, 0, 0, 0, 0, 0, t813, t814, t828, t802 * t887 - t811 * t889, 0, 0, 0, 0, 0, 0, t813, t814, t828, t800 * t887 - t805 * t889; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t884, 0, 0, 0, 0, 0, 0, 0, 0, 0, t835, 0, 0, 0, 0, 0, 0, t844, t899, 0, t807, 0, 0, 0, 0, 0, 0, t821, t822, t830, t801, 0, 0, 0, 0, 0, 0, t821, t822, t830, t799; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t870, 0, 0, 0, 0, 0, 0, 0, 0, 0, t836, 0, 0, 0, 0, 0, 0, t899, -t844, 0, t808, 0, 0, 0, 0, 0, 0, t823, t824, t831, t802, 0, 0, 0, 0, 0, 0, t823, t824, t831, t800; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t869, 0, 0, 0, 0, 0, 0, 0, 0, 0, t864, 0, 0, 0, 0, 0, 0, 0, 0, 0, t864, 0, 0, 0, 0, 0, 0, -t849, -t850, 0, -t811, 0, 0, 0, 0, 0, 0, -t849, -t850, 0, -t805; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t884, 0, 0, 0, 0, 0, 0, 0, 0, 0, t835, 0, 0, 0, 0, 0, 0, t844, t899, 0, t807, 0, 0, 0, 0, 0, 0, t821, t822, t830, t801, 0, 0, 0, 0, 0, 0, t821, t822, t830, t799; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t856, 0, 0, 0, 0, 0, 0, t867, -t866, 0, t820, 0, 0, 0, 0, 0, 0, t841, t842, t848, t810, 0, 0, 0, 0, 0, 0, t841, t842, t848, t804; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t898, 0, 0, 0, 0, 0, 0, t866, t867, 0, t819, 0, 0, 0, 0, 0, 0, t839, t840, t847, t809, 0, 0, 0, 0, 0, 0, t839, t840, t847, t803; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t864, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t864, 0, 0, 0, 0, 0, 0, t849, t850, 0, t811, 0, 0, 0, 0, 0, 0, t849, t850, 0, t805; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t896, -qJDD(3), 0, t838, 0, 0, 0, 0, 0, 0, t851, t852, t865, t812, 0, 0, 0, 0, 0, 0, t851, t852, t865, t806; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t896, 0, t837, 0, 0, 0, 0, 0, 0, t863, -t862, t868, -t833, 0, 0, 0, 0, 0, 0, t863, -t862, t868, -t825; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t864, 0, 0, 0, 0, 0, 0, t849, t850, 0, t811, 0, 0, 0, 0, 0, 0, t849, t850, 0, t805; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t875, t873, t902, t827, 0, 0, 0, 0, 0, 0, t875, t873, t902, t818; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t872, t874, -t903, t826, 0, 0, 0, 0, 0, 0, t872, t874, -t903, t817; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t863, t862, -t868, t833, 0, 0, 0, 0, 0, 0, -t863, t862, -t868, t825; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t875, t873, t902, t818; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t872, t874, -t903, t817; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t863, t862, -t868, t825;];
f_new_reg = t1;
