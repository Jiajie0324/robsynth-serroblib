% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPRP10
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:11
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPRP10_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRP10_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRP10_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRP10_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRP10_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RRPRP10_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:11:28
% EndTime: 2019-12-31 20:11:30
% DurationCPUTime: 1.85s
% Computational Cost: add. (4107->196), mult. (8706->196), div. (0->0), fcn. (5058->6), ass. (0->124)
t1275 = sin(qJ(2));
t1278 = cos(qJ(2));
t1281 = qJD(1) ^ 2;
t1298 = t1278 * t1281;
t1257 = t1275 * t1298;
t1249 = t1257 + qJDD(2);
t1280 = qJD(2) ^ 2;
t1271 = t1278 ^ 2;
t1302 = t1271 * t1281;
t1255 = -t1280 - t1302;
t1225 = t1275 * t1249 - t1278 * t1255;
t1301 = t1275 * qJD(1);
t1263 = qJD(2) * t1301;
t1292 = t1278 * qJDD(1);
t1244 = -0.2e1 * t1263 + t1292;
t1276 = sin(qJ(1));
t1279 = cos(qJ(1));
t1316 = t1276 * t1225 - t1279 * t1244;
t1315 = t1279 * t1225 + t1276 * t1244;
t1250 = qJDD(2) - t1257;
t1270 = t1275 ^ 2;
t1254 = -t1270 * t1281 - t1280;
t1226 = t1278 * t1250 + t1275 * t1254;
t1304 = qJD(1) * t1278;
t1264 = qJD(2) * t1304;
t1293 = t1275 * qJDD(1);
t1241 = 0.2e1 * t1264 + t1293;
t1314 = t1276 * t1226 + t1279 * t1241;
t1313 = t1279 * t1226 - t1276 * t1241;
t1259 = qJD(4) + t1301;
t1312 = qJD(4) + t1259;
t1242 = t1264 + t1293;
t1252 = t1276 * g(1) - t1279 * g(2);
t1284 = -qJDD(1) * pkin(1) - t1252;
t1308 = 2 * qJD(3);
t1311 = pkin(2) * t1263 - (t1242 + t1264) * qJ(3) - t1301 * t1308 + t1284;
t1274 = sin(qJ(4));
t1277 = cos(qJ(4));
t1237 = t1274 * qJD(2) + t1277 * t1304;
t1235 = t1237 ^ 2;
t1239 = t1277 * qJD(2) - t1274 * t1304;
t1310 = t1239 ^ 2;
t1309 = t1259 ^ 2;
t1307 = -2 * qJD(5);
t1306 = t1278 * g(3);
t1305 = t1281 * pkin(6);
t1303 = t1239 * t1237;
t1295 = qJD(4) - t1259;
t1243 = -t1263 + t1292;
t1251 = pkin(3) * t1301 - qJD(2) * pkin(7);
t1191 = -t1251 * t1301 + (-pkin(3) * t1271 - pkin(6)) * t1281 + (-pkin(2) - pkin(7)) * t1243 + t1311;
t1285 = -qJDD(2) * pkin(2) - t1280 * qJ(3) + qJDD(3) + t1306;
t1253 = -t1279 * g(1) - t1276 * g(2);
t1233 = -t1281 * pkin(1) + qJDD(1) * pkin(6) + t1253;
t1291 = t1281 * (-pkin(2) * t1278 - qJ(3) * t1275) + t1233;
t1197 = -qJDD(2) * pkin(7) + (t1242 - t1264) * pkin(3) + (-pkin(7) * t1298 + t1291) * t1275 + t1285;
t1178 = t1277 * t1191 + t1274 * t1197;
t1294 = t1270 + t1271;
t1290 = -t1274 * t1191 + t1277 * t1197;
t1289 = t1274 * qJDD(2) + t1277 * t1243;
t1287 = -qJDD(4) - t1242;
t1220 = t1278 * t1249 + t1275 * t1255;
t1222 = t1275 * t1250 - t1278 * t1254;
t1286 = -t1277 * qJDD(2) + t1274 * t1243;
t1212 = -t1287 - t1303;
t1205 = t1295 * t1237 + t1286;
t1267 = t1275 * g(3);
t1282 = -t1280 * pkin(2) + qJDD(2) * qJ(3) + t1291 * t1278 - t1267;
t1196 = t1243 * pkin(3) - pkin(7) * t1302 + (t1308 + t1251) * qJD(2) + t1282;
t1248 = t1294 * t1281;
t1247 = -t1276 * qJDD(1) - t1279 * t1281;
t1246 = t1279 * qJDD(1) - t1276 * t1281;
t1245 = t1294 * qJDD(1);
t1232 = -t1284 + t1305;
t1230 = t1278 * t1233 - t1267;
t1229 = -t1275 * t1233 - t1306;
t1228 = t1259 * pkin(4) - t1239 * qJ(5);
t1219 = t1279 * t1245 - t1276 * t1248;
t1218 = t1276 * t1245 + t1279 * t1248;
t1217 = -t1309 - t1310;
t1215 = -t1309 - t1235;
t1214 = -t1239 * qJD(4) - t1289;
t1213 = t1287 - t1303;
t1211 = -t1235 - t1310;
t1209 = t1291 * t1275 + t1285;
t1208 = qJD(2) * t1308 + t1282;
t1207 = -t1275 * t1229 + t1278 * t1230;
t1206 = t1278 * t1229 + t1275 * t1230;
t1204 = -t1312 * t1237 - t1286;
t1203 = -t1295 * t1239 - t1289;
t1202 = t1312 * t1239 + t1289;
t1200 = t1243 * pkin(2) + t1305 - t1311;
t1199 = t1277 * t1213 - t1274 * t1217;
t1198 = t1274 * t1213 + t1277 * t1217;
t1195 = -t1274 * t1212 + t1277 * t1215;
t1194 = t1277 * t1212 + t1274 * t1215;
t1189 = t1278 * t1208 + t1275 * t1209;
t1188 = t1275 * t1208 - t1278 * t1209;
t1187 = t1277 * t1203 - t1274 * t1205;
t1186 = t1274 * t1203 + t1277 * t1205;
t1185 = t1275 * t1198 + t1278 * t1204;
t1184 = -t1278 * t1198 + t1275 * t1204;
t1183 = t1275 * t1194 + t1278 * t1202;
t1182 = -t1278 * t1194 + t1275 * t1202;
t1181 = t1275 * t1186 + t1278 * t1211;
t1180 = -t1278 * t1186 + t1275 * t1211;
t1179 = -t1214 * pkin(4) - t1235 * qJ(5) + t1239 * t1228 + qJDD(5) + t1196;
t1176 = t1279 * t1185 + t1276 * t1199;
t1175 = t1276 * t1185 - t1279 * t1199;
t1174 = t1279 * t1183 + t1276 * t1195;
t1173 = t1276 * t1183 - t1279 * t1195;
t1172 = -t1235 * pkin(4) + t1214 * qJ(5) - t1259 * t1228 + t1237 * t1307 + t1178;
t1171 = t1279 * t1181 + t1276 * t1187;
t1170 = t1276 * t1181 - t1279 * t1187;
t1169 = t1212 * pkin(4) + t1205 * qJ(5) + t1239 * t1307 + t1290;
t1167 = t1277 * t1178 - t1274 * t1290;
t1166 = t1274 * t1178 + t1277 * t1290;
t1165 = t1275 * t1166 + t1278 * t1196;
t1164 = -t1278 * t1166 + t1275 * t1196;
t1163 = -t1274 * t1169 + t1277 * t1172;
t1162 = t1277 * t1169 + t1274 * t1172;
t1161 = t1275 * t1162 + t1278 * t1179;
t1160 = -t1278 * t1162 + t1275 * t1179;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1247, -t1246, 0, -t1276 * t1252 + t1279 * t1253, 0, 0, 0, 0, 0, 0, -t1315, -t1313, t1219, t1279 * t1207 - t1276 * t1232, 0, 0, 0, 0, 0, 0, t1219, t1315, t1313, t1279 * t1189 - t1276 * t1200, 0, 0, 0, 0, 0, 0, t1174, t1176, t1171, t1279 * t1165 + t1276 * t1167, 0, 0, 0, 0, 0, 0, t1174, t1176, t1171, t1279 * t1161 + t1276 * t1163; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1246, t1247, 0, t1279 * t1252 + t1276 * t1253, 0, 0, 0, 0, 0, 0, -t1316, -t1314, t1218, t1276 * t1207 + t1279 * t1232, 0, 0, 0, 0, 0, 0, t1218, t1316, t1314, t1276 * t1189 + t1279 * t1200, 0, 0, 0, 0, 0, 0, t1173, t1175, t1170, t1276 * t1165 - t1279 * t1167, 0, 0, 0, 0, 0, 0, t1173, t1175, t1170, t1276 * t1161 - t1279 * t1163; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1220, -t1222, 0, t1206, 0, 0, 0, 0, 0, 0, 0, -t1220, t1222, t1188, 0, 0, 0, 0, 0, 0, t1182, t1184, t1180, t1164, 0, 0, 0, 0, 0, 0, t1182, t1184, t1180, t1160; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1281, -qJDD(1), 0, t1253, 0, 0, 0, 0, 0, 0, -t1225, -t1226, t1245, t1207, 0, 0, 0, 0, 0, 0, t1245, t1225, t1226, t1189, 0, 0, 0, 0, 0, 0, t1183, t1185, t1181, t1165, 0, 0, 0, 0, 0, 0, t1183, t1185, t1181, t1161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1281, 0, t1252, 0, 0, 0, 0, 0, 0, t1244, -t1241, t1248, t1232, 0, 0, 0, 0, 0, 0, t1248, -t1244, t1241, t1200, 0, 0, 0, 0, 0, 0, -t1195, -t1199, -t1187, -t1167, 0, 0, 0, 0, 0, 0, -t1195, -t1199, -t1187, -t1163; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1220, -t1222, 0, t1206, 0, 0, 0, 0, 0, 0, 0, -t1220, t1222, t1188, 0, 0, 0, 0, 0, 0, t1182, t1184, t1180, t1164, 0, 0, 0, 0, 0, 0, t1182, t1184, t1180, t1160; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1255, -t1250, t1292, t1230, 0, 0, 0, 0, 0, 0, t1292, -t1255, t1250, t1208, 0, 0, 0, 0, 0, 0, t1202, t1204, t1211, t1196, 0, 0, 0, 0, 0, 0, t1202, t1204, t1211, t1179; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1249, t1254, -t1293, t1229, 0, 0, 0, 0, 0, 0, -t1293, -t1249, -t1254, -t1209, 0, 0, 0, 0, 0, 0, -t1194, -t1198, -t1186, -t1166, 0, 0, 0, 0, 0, 0, -t1194, -t1198, -t1186, -t1162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1244, t1241, -t1248, -t1232, 0, 0, 0, 0, 0, 0, -t1248, t1244, -t1241, -t1200, 0, 0, 0, 0, 0, 0, t1195, t1199, t1187, t1167, 0, 0, 0, 0, 0, 0, t1195, t1199, t1187, t1163; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1248, t1244, -t1241, -t1200, 0, 0, 0, 0, 0, 0, t1195, t1199, t1187, t1167, 0, 0, 0, 0, 0, 0, t1195, t1199, t1187, t1163; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1292, t1255, -t1250, -t1208, 0, 0, 0, 0, 0, 0, -t1202, -t1204, -t1211, -t1196, 0, 0, 0, 0, 0, 0, -t1202, -t1204, -t1211, -t1179; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1293, t1249, t1254, t1209, 0, 0, 0, 0, 0, 0, t1194, t1198, t1186, t1166, 0, 0, 0, 0, 0, 0, t1194, t1198, t1186, t1162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1215, t1213, t1203, t1178, 0, 0, 0, 0, 0, 0, t1215, t1213, t1203, t1172; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1212, t1217, t1205, t1290, 0, 0, 0, 0, 0, 0, t1212, t1217, t1205, t1169; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1202, t1204, t1211, t1196, 0, 0, 0, 0, 0, 0, t1202, t1204, t1211, t1179; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1215, t1213, t1203, t1172; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1212, t1217, t1205, t1169; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1202, t1204, t1211, t1179;];
f_new_reg = t1;
