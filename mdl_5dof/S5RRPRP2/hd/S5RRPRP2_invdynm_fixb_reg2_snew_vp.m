% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPRP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:50
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPRP2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRP2_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRP2_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRP2_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRP2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPRP2_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:49:55
% EndTime: 2019-12-31 19:50:03
% DurationCPUTime: 9.30s
% Computational Cost: add. (28320->457), mult. (40171->531), div. (0->0), fcn. (22113->8), ass. (0->313)
t887 = qJD(4) ^ 2;
t871 = qJD(1) + qJD(2);
t869 = t871 ^ 2;
t881 = sin(qJ(4));
t874 = t881 ^ 2;
t959 = t874 * t869;
t849 = t887 + t959;
t884 = cos(qJ(4));
t854 = t884 * t869 * t881;
t846 = qJDD(4) - t854;
t940 = t884 * t846;
t796 = -t881 * t849 + t940;
t932 = qJD(4) * t871;
t861 = t884 * t932;
t870 = qJDD(1) + qJDD(2);
t945 = t881 * t870;
t825 = 0.2e1 * t861 + t945;
t878 = sin(pkin(8));
t879 = cos(pkin(8));
t743 = t878 * t796 + t879 * t825;
t746 = t879 * t796 - t878 * t825;
t882 = sin(qJ(2));
t885 = cos(qJ(2));
t688 = t885 * t743 + t882 * t746;
t692 = t882 * t743 - t885 * t746;
t883 = sin(qJ(1));
t886 = cos(qJ(1));
t1027 = pkin(5) * (t883 * t688 + t886 * t692);
t1026 = pkin(5) * (t886 * t688 - t883 * t692);
t1025 = pkin(1) * t688;
t1024 = pkin(6) * t688;
t948 = t881 * t846;
t790 = t884 * t849 + t948;
t1023 = -pkin(1) * t790 - pkin(6) * t692;
t830 = t879 * t869 + t878 * t870;
t833 = t878 * t869 - t879 * t870;
t771 = t882 * t830 + t885 * t833;
t876 = g(3) - qJDD(3);
t805 = qJ(3) * t830 - t879 * t876;
t984 = qJ(3) * t833 - t878 * t876;
t1001 = pkin(6) * t771 + t882 * t805 + t885 * t984;
t767 = t885 * t830 - t882 * t833;
t704 = pkin(6) * t767 + t885 * t805 - t882 * t984;
t983 = t886 * t767 - t883 * t771;
t1020 = pkin(5) * t983 - t1001 * t883 + t886 * t704;
t860 = t881 * t932;
t939 = t884 * t870;
t828 = -0.2e1 * t860 + t939;
t941 = t884 * t828;
t951 = t881 * t825;
t764 = -t941 + t951;
t875 = t884 ^ 2;
t843 = (t874 - t875) * t869;
t733 = t878 * t764 + t879 * t843;
t735 = t879 * t764 - t878 * t843;
t678 = t885 * t733 + t882 * t735;
t679 = t882 * t733 - t885 * t735;
t1019 = t886 * t678 - t883 * t679;
t1018 = t883 * t678 + t886 * t679;
t958 = t875 * t869;
t851 = -t887 + t958;
t794 = -t884 * t851 + t948;
t755 = t878 * t794 + t879 * t939;
t758 = t879 * t794 - t878 * t939;
t710 = t885 * t755 + t882 * t758;
t712 = t882 * t755 - t885 * t758;
t1017 = t886 * t710 - t883 * t712;
t1016 = t883 * t710 + t886 * t712;
t1003 = t883 * t767 + t886 * t771;
t1015 = pkin(5) * t1003 + t1001 * t886 + t883 * t704;
t1014 = pkin(2) * t743;
t1013 = qJ(3) * t743;
t1011 = -pkin(2) * t790 + qJ(3) * t746;
t856 = t886 * g(1) + t883 * g(2);
t888 = qJD(1) ^ 2;
t898 = t888 * pkin(1) + t856;
t855 = t883 * g(1) - t886 * g(2);
t901 = qJDD(1) * pkin(1) + t855;
t780 = t882 * t901 - t885 * t898;
t775 = -t869 * pkin(2) + t780;
t779 = -t882 * t898 - t885 * t901;
t890 = t870 * pkin(2) - t779;
t724 = t878 * t775 - t879 * t890;
t725 = t879 * t775 + t878 * t890;
t922 = t878 * t724 + t879 * t725;
t663 = t879 * t724 - t878 * t725;
t938 = t885 * t663;
t622 = -t882 * t922 + t938;
t944 = t882 * t663;
t995 = t885 * t922 + t944;
t1010 = t883 * t622 + t886 * t995;
t1009 = t886 * t622 - t883 * t995;
t838 = t885 * t869 + t882 * t870;
t810 = pkin(6) * t838 - t885 * g(3);
t841 = t882 * t869 - t885 * t870;
t903 = t886 * t838 - t883 * t841;
t985 = pkin(6) * t841 - t882 * g(3);
t1004 = pkin(5) * t903 + t886 * t810 - t883 * t985;
t982 = t883 * t838 + t886 * t841;
t1002 = pkin(5) * t982 + t883 * t810 + t886 * t985;
t921 = t882 * t779 + t885 * t780;
t730 = t885 * t779 - t882 * t780;
t937 = t886 * t730;
t997 = -t883 * t921 + t937;
t943 = t883 * t730;
t996 = t886 * t921 + t943;
t994 = -pkin(3) * t825 - pkin(7) * t796;
t990 = pkin(3) * t790;
t988 = pkin(7) * t790;
t716 = -t869 * pkin(3) + t870 * pkin(7) + t725;
t863 = t884 * t876;
t908 = -pkin(4) * t884 - qJ(5) * t881;
t961 = t908 * t869;
t674 = -qJDD(4) * pkin(4) - t887 * qJ(5) + (t716 + t961) * t881 + qJDD(5) + t863;
t845 = qJDD(4) + t854;
t852 = -t887 - t958;
t987 = pkin(4) * t845 + qJ(5) * t852 - t674;
t826 = t861 + t945;
t986 = t826 + t861;
t695 = t881 * t716 + t863;
t696 = t884 * t716 - t881 * t876;
t644 = t881 * t695 + t884 * t696;
t786 = t881 * t851 + t940;
t835 = t884 * t845;
t787 = t881 * t852 + t835;
t974 = pkin(3) * t787;
t949 = t881 * t845;
t793 = t884 * t852 - t949;
t742 = t878 * t793 + t879 * t828;
t745 = t879 * t793 - t878 * t828;
t687 = t885 * t742 + t882 * t745;
t690 = -t882 * t742 + t885 * t745;
t971 = pkin(5) * (t886 * t687 + t883 * t690);
t933 = t874 + t875;
t834 = t933 * t870;
t842 = t933 * t869;
t773 = t878 * t834 + t879 * t842;
t774 = t879 * t834 - t878 * t842;
t722 = t885 * t773 + t882 * t774;
t723 = -t882 * t773 + t885 * t774;
t970 = pkin(5) * (t886 * t722 + t883 * t723);
t969 = pkin(6) * t687;
t968 = pkin(6) * t722;
t967 = pkin(7) * t787;
t964 = qJ(3) * t742;
t963 = qJ(3) * t773;
t960 = t871 * t881;
t715 = -t870 * pkin(3) - t869 * pkin(7) + t724;
t705 = t881 * t715;
t950 = t881 * t828;
t706 = t884 * t715;
t942 = t884 * t825;
t936 = -pkin(3) * t715 + pkin(7) * t644;
t935 = pkin(3) * t828 + pkin(7) * t793;
t934 = pkin(3) * t842 + pkin(7) * t834;
t931 = (qJD(5) * qJD(4));
t928 = t705 + t994;
t927 = -t706 + t935;
t627 = t878 * t644 - t879 * t715;
t926 = pkin(2) * t627 + t936;
t925 = -pkin(1) * t787 + pkin(6) * t690;
t924 = -pkin(2) * t787 + qJ(3) * t745;
t919 = -t883 * t855 - t886 * t856;
t918 = t878 * t854;
t917 = t879 * t854;
t866 = 2 * t931;
t904 = -t887 * pkin(4) + qJDD(4) * qJ(5) + t884 * t961 + t696;
t673 = t866 + t904;
t669 = pkin(4) * t842 + t673;
t670 = qJ(5) * t842 + t674;
t916 = t884 * t669 + t881 * t670 + t934;
t915 = t934 + t644;
t914 = t928 - t1014;
t739 = pkin(2) * t742;
t913 = t739 + t927;
t848 = t886 * qJDD(1) - t883 * t888;
t911 = -pkin(5) * t848 - t883 * g(3);
t910 = -pkin(2) * t833 - t724;
t909 = -pkin(4) * t674 + qJ(5) * t673;
t907 = pkin(4) * t881 - qJ(5) * t884;
t766 = pkin(2) * t773;
t906 = t766 + t916;
t905 = t766 + t915;
t643 = t884 * t695 - t881 * t696;
t761 = t942 + t950;
t902 = t886 * t855 - t883 * t856;
t827 = -t860 + t939;
t895 = -t827 * pkin(4) - t986 * qJ(5) + t715;
t893 = 0.2e1 * qJD(5) * t960 - t895;
t658 = -pkin(4) * t860 + qJ(5) * t825 + t893;
t900 = pkin(4) * t942 + t881 * t658 - t994;
t659 = (t828 - t860) * pkin(4) + t893;
t899 = qJ(5) * t950 + t884 * t659 + t935;
t897 = t900 + t1014;
t896 = t739 + t899;
t634 = t884 * t673 + t881 * t674;
t667 = (pkin(4) * qJD(4) - 0.2e1 * qJD(5)) * t960 + t895;
t894 = pkin(7) * t634 + (-pkin(3) + t908) * t667;
t892 = pkin(4) * t849 + qJ(5) * t846 + t904;
t611 = t878 * t634 - t879 * t667;
t891 = pkin(2) * t611 + t894;
t889 = -pkin(2) * t830 - t725;
t850 = -t887 + t959;
t847 = t883 * qJDD(1) + t886 * t888;
t822 = -pkin(5) * t847 + t886 * g(3);
t819 = t907 * t870;
t818 = t933 * t932;
t801 = t878 * qJDD(4) + t879 * t818;
t800 = -t879 * qJDD(4) + t878 * t818;
t799 = t884 * t826 - t874 * t932;
t798 = -t881 * t827 - t875 * t932;
t795 = t881 * t850 + t835;
t789 = -t884 * t850 + t949;
t782 = t986 * t881;
t781 = (t827 - t860) * t884;
t765 = qJ(3) * t774;
t759 = t879 * t795 + t878 * t945;
t756 = t878 * t795 - t879 * t945;
t753 = t879 * t799 - t918;
t752 = t879 * t798 + t918;
t751 = t878 * t799 + t917;
t750 = t878 * t798 - t917;
t749 = -pkin(1) * t841 - t779;
t748 = -pkin(1) * t838 - t780;
t737 = -t882 * t800 + t885 * t801;
t736 = t885 * t800 + t882 * t801;
t727 = pkin(1) * t730;
t726 = pkin(1) * g(3) + pkin(6) * t921;
t719 = pkin(1) * t722;
t718 = pkin(6) * t723;
t714 = -t882 * t756 + t885 * t759;
t711 = t885 * t756 + t882 * t759;
t700 = -t882 * t751 + t885 * t753;
t699 = -t882 * t750 + t885 * t752;
t698 = t885 * t751 + t882 * t753;
t697 = t885 * t750 + t882 * t752;
t686 = pkin(1) * t687;
t684 = t706 + t988;
t683 = t705 - t967;
t682 = -t883 * t736 + t886 * t737;
t681 = t886 * t736 + t883 * t737;
t676 = t696 + t990;
t675 = t695 - t974;
t672 = -pkin(1) * t771 + t910;
t671 = -pkin(1) * t767 + t889;
t657 = pkin(2) * t663;
t656 = pkin(5) * (-t883 * t722 + t886 * t723);
t653 = pkin(2) * t876 + qJ(3) * t922;
t652 = -t974 - t987;
t651 = -t892 - (2 * t931) - t990;
t650 = -t883 * t711 + t886 * t714;
t649 = t886 * t711 + t883 * t714;
t648 = -t883 * t698 + t886 * t700;
t647 = -t883 * t697 + t886 * t699;
t646 = t886 * t698 + t883 * t700;
t645 = t886 * t697 + t883 * t699;
t640 = -pkin(4) * t951 + t884 * t658 - t988;
t639 = qJ(5) * t941 - t881 * t659 - t967;
t637 = pkin(5) * (-t883 * t687 + t886 * t690);
t636 = t879 * t643 - t963;
t635 = t878 * t643 + t765;
t633 = t881 * t673 - t884 * t674;
t631 = -t881 * t669 + t884 * t670;
t630 = t914 - t1025;
t629 = t686 + t913;
t628 = t879 * t644 + t878 * t715;
t625 = -t878 * t676 + t879 * t684 + t1013;
t624 = -t878 * t675 + t879 * t683 - t964;
t619 = t879 * t676 + t878 * t684 - t1011;
t618 = t879 * t675 + t878 * t683 + t924;
t617 = t719 + t905;
t616 = t879 * t631 - t878 * t819 - t963;
t615 = t878 * t631 + t879 * t819 + t765;
t614 = t897 + t1025;
t613 = t686 + t896;
t612 = t879 * t634 + t878 * t667;
t609 = t719 + t906;
t608 = t879 * t639 - t878 * t652 - t964;
t607 = t879 * t640 - t878 * t651 - t1013;
t606 = t878 * t639 + t879 * t652 + t924;
t605 = t878 * t640 + t879 * t651 + t1011;
t604 = -pkin(1) * t622 - t657;
t603 = -pkin(3) * t633 - t909;
t602 = -pkin(7) * t633 + t667 * t907;
t601 = -t882 * t635 + t885 * t636 - t968;
t600 = t885 * t635 + t882 * t636 + t718;
t599 = -t882 * t627 + t885 * t628;
t598 = t885 * t627 + t882 * t628;
t597 = pkin(6) * t622 + qJ(3) * t938 - t882 * t653;
t596 = pkin(1) * t876 + pkin(6) * t995 + qJ(3) * t944 + t885 * t653;
t595 = -qJ(3) * t627 - (pkin(3) * t878 - pkin(7) * t879) * t643;
t594 = -t882 * t619 + t885 * t625 + t1024;
t593 = -t882 * t618 + t885 * t624 - t969;
t592 = t885 * t619 + t882 * t625 - t1023;
t591 = t885 * t618 + t882 * t624 + t925;
t590 = -t882 * t615 + t885 * t616 - t968;
t589 = t885 * t615 + t882 * t616 + t718;
t588 = -t882 * t611 + t885 * t612;
t587 = t885 * t611 + t882 * t612;
t586 = qJ(3) * t628 - (-pkin(3) * t879 - pkin(7) * t878 - pkin(2)) * t643;
t585 = -t882 * t606 + t885 * t608 - t969;
t584 = -t882 * t605 + t885 * t607 - t1024;
t583 = t885 * t606 + t882 * t608 + t925;
t582 = t885 * t605 + t882 * t607 + t1023;
t581 = pkin(1) * t598 + t926;
t580 = -qJ(3) * t611 + t879 * t602 - t878 * t603;
t579 = -pkin(2) * t633 + qJ(3) * t612 + t878 * t602 + t879 * t603;
t578 = pkin(1) * t587 + t891;
t577 = -pkin(6) * t598 - t882 * t586 + t885 * t595;
t576 = pkin(1) * t643 + pkin(6) * t599 + t885 * t586 + t882 * t595;
t575 = -pkin(6) * t587 - t882 * t579 + t885 * t580;
t574 = -pkin(1) * t633 + pkin(6) * t588 + t885 * t579 + t882 * t580;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t848, 0, -t847, 0, t911, -t822, -t902, -pkin(5) * t902, 0, 0, -t982, 0, -t903, 0, t1002, t1004, t997, pkin(5) * t997 + pkin(6) * t937 - t883 * t726, 0, 0, -t1003, 0, -t983, 0, t1015, t1020, t1009, pkin(5) * t1009 - t883 * t596 + t886 * t597, t648, t1018, t650, t647, t1016, t682, -t883 * t591 + t886 * t593 - t971, -t883 * t592 + t886 * t594 + t1026, -t883 * t600 + t886 * t601 - t970, t886 * t577 - t883 * t576 - pkin(5) * (t886 * t598 + t883 * t599), t648, t650, -t1018, t682, -t1016, t647, -t883 * t583 + t886 * t585 - t971, -t883 * t589 + t886 * t590 - t970, -t883 * t582 + t886 * t584 - t1026, t886 * t575 - t883 * t574 - pkin(5) * (t886 * t587 + t883 * t588); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t847, 0, t848, 0, t822, t911, t919, pkin(5) * t919, 0, 0, t903, 0, -t982, 0, -t1004, t1002, t996, pkin(5) * t996 + pkin(6) * t943 + t886 * t726, 0, 0, t983, 0, -t1003, 0, -t1020, t1015, t1010, pkin(5) * t1010 + t886 * t596 + t883 * t597, t646, -t1019, t649, t645, -t1017, t681, t886 * t591 + t883 * t593 + t637, t886 * t592 + t883 * t594 + t1027, t886 * t600 + t883 * t601 + t656, t883 * t577 + t886 * t576 + pkin(5) * (-t883 * t598 + t886 * t599), t646, t649, t1019, t681, t1017, t645, t886 * t583 + t883 * t585 + t637, t886 * t589 + t883 * t590 + t656, t886 * t582 + t883 * t584 - t1027, t883 * t575 + t886 * t574 + pkin(5) * (-t883 * t587 + t886 * t588); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t855, t856, 0, 0, 0, 0, 0, 0, 0, t870, t749, t748, 0, -t727, 0, 0, 0, 0, 0, t870, t672, t671, 0, t604, t782, t761, t789, t781, t786, 0, t629, t630, t617, t581, t782, t789, -t761, 0, -t786, t781, t613, t609, t614, t578; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t888, 0, 0, -g(3), -t855, 0, 0, 0, -t841, 0, -t838, 0, t985, t810, t730, pkin(6) * t730, 0, 0, -t771, 0, -t767, 0, t1001, t704, t622, t597, t700, t679, t714, t699, t712, t737, t593, t594, t601, t577, t700, t714, -t679, t737, -t712, t699, t585, t590, t584, t575; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t888, 0, qJDD(1), 0, g(3), 0, -t856, 0, 0, 0, t838, 0, -t841, 0, -t810, t985, t921, t726, 0, 0, t767, 0, -t771, 0, -t704, t1001, t995, t596, t698, -t678, t711, t697, -t710, t736, t591, t592, t600, t576, t698, t711, t678, t736, t710, t697, t583, t589, t582, t574; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t855, t856, 0, 0, 0, 0, 0, 0, 0, t870, t749, t748, 0, -t727, 0, 0, 0, 0, 0, t870, t672, t671, 0, t604, t782, t761, t789, t781, t786, 0, t629, t630, t617, t581, t782, t789, -t761, 0, -t786, t781, t613, t609, t614, t578; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t870, 0, -t869, 0, 0, -g(3), t779, 0, 0, 0, -t833, 0, -t830, 0, t984, t805, t663, qJ(3) * t663, t753, -t735, t759, t752, -t758, t801, t624, t625, t636, t595, t753, t759, t735, t801, t758, t752, t608, t616, t607, t580; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t869, 0, t870, 0, g(3), 0, t780, 0, 0, 0, t830, 0, -t833, 0, -t805, t984, t922, t653, t751, -t733, t756, t750, -t755, t800, t618, t619, t635, t586, t751, t756, t733, t800, t755, t750, t606, t615, t605, t579; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t870, -t779, -t780, 0, 0, 0, 0, 0, 0, 0, t870, t910, t889, 0, -t657, t782, t761, t789, t781, t786, 0, t913, t914, t905, t926, t782, t789, -t761, 0, -t786, t781, t896, t906, t897, t891; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t870, 0, -t869, 0, 0, -t876, t724, 0, t799, -t764, t795, t798, -t794, t818, t683, t684, t643, pkin(7) * t643, t799, t795, t764, t818, t794, t798, t639, t631, t640, t602; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t869, 0, t870, 0, t876, 0, t725, 0, t854, -t843, -t945, -t854, -t939, -qJDD(4), t675, t676, 0, pkin(3) * t643, t854, -t945, t843, -qJDD(4), t939, -t854, t652, t819, t651, t603; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t870, -t724, -t725, 0, 0, t782, t761, t789, t781, t786, 0, t927, t928, t915, t936, t782, t789, -t761, 0, -t786, t781, t899, t916, t900, t894; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t826, t828, t845, -t861, t851, t861, 0, t715, t695, 0, t826, t845, -t828, t861, -t851, -t861, qJ(5) * t828, t670, t658, -qJ(5) * t667; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t860, t825, -t850, t827, t846, -t860, -t715, 0, t696, 0, t860, -t850, -t825, -t860, -t846, t827, t659, t669, pkin(4) * t825, -pkin(4) * t667; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t854, t843, t945, t854, t939, qJDD(4), -t695, -t696, 0, 0, -t854, t945, -t843, qJDD(4), -t939, t854, t987, -t819, t866 + t892, t909; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t826, t845, -t828, t861, -t851, -t861, 0, t674, -t667, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t854, t945, -t843, qJDD(4), -t939, t854, -t674, 0, t673, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t860, t850, t825, t860, t846, -t827, t667, -t673, 0, 0;];
m_new_reg = t1;
