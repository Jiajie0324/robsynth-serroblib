% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PRPRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d4,d5,theta1,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:43
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PRPRR1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRR1_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRR1_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRR1_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRR1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRPRR1_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:43:25
% EndTime: 2019-12-05 15:43:40
% DurationCPUTime: 15.53s
% Computational Cost: add. (76156->597), mult. (177128->856), div. (0->0), fcn. (132375->10), ass. (0->417)
t1055 = cos(pkin(8));
t1058 = sin(qJ(2));
t1061 = cos(qJ(2));
t1053 = sin(pkin(8));
t1028 = t1055 * g(1) + t1053 * g(2);
t1093 = t1053 * g(1) - t1055 * g(2);
t1068 = t1061 * t1028 - t1058 * t1093;
t1082 = t1058 * t1028 + t1061 * t1093;
t1091 = -t1058 * t1082 - t1061 * t1068;
t926 = -t1058 * t1068 + t1061 * t1082;
t1136 = t1053 * t926;
t1167 = t1055 * t1091 - t1136;
t1134 = t1055 * t926;
t1166 = -t1053 * t1091 - t1134;
t1056 = sin(qJ(5));
t1047 = qJDD(4) + qJDD(5);
t1054 = cos(pkin(9));
t1057 = sin(qJ(4));
t1060 = cos(qJ(4));
t1052 = sin(pkin(9));
t1121 = qJD(2) * t1052;
t1009 = -t1060 * t1054 * qJD(2) + t1057 * t1121;
t1075 = t1052 * t1060 + t1054 * t1057;
t1010 = t1075 * qJD(2);
t1059 = cos(qJ(5));
t953 = t1059 * t1009 + t1056 * t1010;
t955 = -t1056 * t1009 + t1059 * t1010;
t905 = t955 * t953;
t1155 = -t905 + t1047;
t1165 = t1056 * t1155;
t975 = t1010 * t1009;
t1151 = qJDD(4) - t975;
t1164 = t1057 * t1151;
t1163 = t1059 * t1155;
t1162 = t1060 * t1151;
t1065 = t1054 ^ 2;
t1145 = qJD(2) ^ 2;
t1043 = t1065 * t1145;
t1063 = t1052 ^ 2;
t1106 = t1063 * t1145;
t1023 = t1043 + t1106;
t1104 = t1058 * qJDD(2);
t1026 = t1061 * t1145 + t1104;
t1050 = g(3) - qJDD(1);
t1001 = pkin(5) * t1026 - t1061 * t1050;
t1103 = t1061 * qJDD(2);
t1027 = -t1058 * t1145 + t1103;
t1078 = -pkin(5) * t1027 - t1058 * t1050;
t1150 = t1055 * t1026 + t1053 * t1027;
t1161 = qJ(1) * t1150 + t1055 * t1001 - t1053 * t1078;
t981 = -t1053 * t1026 + t1055 * t1027;
t1160 = -qJ(1) * t981 + t1053 * t1001 + t1055 * t1078;
t1149 = t1145 * (t1063 + t1065);
t1016 = t1054 * t1149;
t1094 = t1054 * t1103;
t987 = -t1058 * t1016 + t1094;
t989 = t1061 * t1016 + t1054 * t1104;
t1159 = t1053 * t989 - t1055 * t987;
t1158 = t1053 * t987 + t1055 * t989;
t1034 = t1054 * t1050;
t974 = -t1145 * pkin(2) + qJDD(2) * qJ(3) - t1068;
t1090 = 0.2e1 * qJD(2) * qJD(3) + t974;
t941 = t1052 * t1090 + t1034;
t1117 = t1052 * t1050;
t942 = t1054 * t1090 - t1117;
t891 = t1052 * t941 + t1054 * t942;
t1040 = t1052 * qJDD(2);
t1042 = t1054 * qJDD(2);
t1007 = t1057 * t1040 - t1060 * t1042;
t1120 = t1010 * qJD(4);
t1069 = t1007 + t1120;
t1004 = t1009 * qJD(4);
t1008 = t1075 * qJDD(2);
t972 = -t1004 + t1008;
t887 = -t953 * qJD(5) - t1056 * t1069 + t1059 * t972;
t1048 = qJD(4) + qJD(5);
t948 = t1048 * t953;
t1156 = -t948 + t887;
t1092 = t1056 * t972 + t1059 * t1069;
t834 = (qJD(5) - t1048) * t955 + t1092;
t1148 = -t1055 * t1028 - t1053 * t1093;
t1146 = -t1053 * t1028 + t1055 * t1093;
t951 = t953 ^ 2;
t952 = t955 ^ 2;
t1144 = t1009 ^ 2;
t1006 = t1010 ^ 2;
t1046 = t1048 ^ 2;
t1112 = t1054 * t1145;
t1141 = pkin(6) * qJDD(2);
t916 = -0.2e1 * qJD(3) * t1121 - t1034 + (pkin(3) * t1112 - t1141 - t974) * t1052;
t917 = -pkin(3) * t1043 - t1117 + (t1090 + t1141) * t1054;
t861 = t1057 * t917 - t1060 * t916;
t862 = t1057 * t916 + t1060 * t917;
t793 = t1057 * t862 - t1060 * t861;
t1143 = pkin(3) * t793;
t908 = -t1007 * t1057 - t1060 * t1008;
t1142 = pkin(3) * t908;
t969 = -qJDD(2) * pkin(2) - t1145 * qJ(3) + qJDD(3) - t1082;
t1139 = -pkin(2) * t969 + qJ(3) * t891;
t1138 = t1048 * t955;
t1137 = t1052 * t793;
t958 = t1052 * t969;
t1135 = t1054 * t793;
t959 = t1054 * t969;
t938 = -pkin(3) * t1042 - t1023 * pkin(6) + t969;
t993 = qJD(4) * pkin(4) - t1010 * pkin(7);
t854 = pkin(4) * t1069 - t1144 * pkin(7) + t1010 * t993 + t938;
t1133 = t1056 * t854;
t902 = t905 + t1047;
t1132 = t1056 * t902;
t801 = (-t972 - t1004) * pkin(7) + t1151 * pkin(4) - t861;
t804 = -t1144 * pkin(4) - pkin(7) * t1069 - qJD(4) * t993 + t862;
t761 = t1056 * t804 - t1059 * t801;
t762 = t1056 * t801 + t1059 * t804;
t716 = t1056 * t762 - t1059 * t761;
t1131 = t1057 * t716;
t1130 = t1057 * t938;
t967 = qJDD(4) + t975;
t1129 = t1057 * t967;
t1128 = t1058 * t969;
t1127 = t1059 * t854;
t1126 = t1059 * t902;
t1125 = t1060 * t716;
t1124 = t1060 * t938;
t1123 = t1060 * t967;
t1122 = t1061 * t969;
t1119 = t1048 * t1056;
t1118 = t1048 * t1059;
t1113 = t1053 * t1050;
t1111 = t1055 * t1050;
t1110 = t1057 * t1009;
t1109 = t1057 * t1010;
t1108 = t1060 * t1009;
t1107 = t1060 * t1010;
t1102 = t1058 * t905;
t1101 = t1061 * t905;
t1100 = pkin(2) * t1042 - qJ(3) * t1016 - t959;
t717 = t1056 * t761 + t1059 * t762;
t682 = t1057 * t717 + t1125;
t715 = pkin(4) * t716;
t1099 = pkin(3) * t682 + t715;
t838 = t948 + t887;
t785 = -t1056 * t834 - t1059 * t838;
t787 = t1056 * t838 - t1059 * t834;
t740 = t1057 * t787 + t1060 * t785;
t783 = pkin(4) * t785;
t1098 = pkin(3) * t740 + t783;
t1030 = t1052 * t1112;
t1097 = t1058 * t975;
t1096 = t1061 * t975;
t1095 = t1052 * t1042;
t794 = t1057 * t861 + t1060 * t862;
t683 = t1060 * t717 - t1131;
t710 = -pkin(4) * t854 + pkin(7) * t717;
t663 = -pkin(3) * t854 + pkin(6) * t683 - pkin(7) * t1131 + t1060 * t710;
t667 = -pkin(6) * t682 - pkin(7) * t1125 - t1057 * t710;
t671 = -t1052 * t682 + t1054 * t683;
t1089 = -pkin(2) * t854 + qJ(3) * t671 + t1052 * t667 + t1054 * t663;
t885 = -t951 - t952;
t692 = -pkin(4) * t885 + pkin(7) * t787 + t717;
t701 = -pkin(7) * t785 - t716;
t742 = -t1057 * t785 + t1060 * t787;
t673 = -pkin(3) * t885 + pkin(6) * t742 + t1057 * t701 + t1060 * t692;
t675 = -pkin(6) * t740 - t1057 * t692 + t1060 * t701;
t698 = -t1052 * t740 + t1054 * t742;
t1088 = -pkin(2) * t885 + qJ(3) * t698 + t1052 * t675 + t1054 * t673;
t900 = -t1046 - t951;
t814 = t1059 * t900 - t1165;
t833 = (qJD(5) + t1048) * t955 + t1092;
t757 = -pkin(4) * t833 + pkin(7) * t814 - t1127;
t813 = t1056 * t900 + t1163;
t775 = -t1057 * t813 + t1060 * t814;
t788 = -pkin(7) * t813 + t1133;
t699 = -pkin(3) * t833 + pkin(6) * t775 + t1057 * t788 + t1060 * t757;
t774 = t1057 * t814 + t1060 * t813;
t707 = -pkin(6) * t774 - t1057 * t757 + t1060 * t788;
t734 = -t1052 * t774 + t1054 * t775;
t1087 = -pkin(2) * t833 + qJ(3) * t734 + t1052 * t707 + t1054 * t699;
t944 = -t952 - t1046;
t859 = -t1056 * t944 - t1126;
t759 = -pkin(4) * t1156 + pkin(7) * t859 + t1133;
t858 = t1059 * t944 - t1132;
t790 = -pkin(7) * t858 + t1127;
t792 = -t1057 * t858 + t1060 * t859;
t704 = -pkin(3) * t1156 + pkin(6) * t792 + t1057 * t790 + t1060 * t759;
t791 = t1057 * t859 + t1060 * t858;
t712 = -pkin(6) * t791 - t1057 * t759 + t1060 * t790;
t748 = -t1052 * t791 + t1054 * t792;
t1086 = -pkin(2) * t1156 + qJ(3) * t748 + t1052 * t712 + t1054 * t704;
t910 = -t1007 * t1060 + t1057 * t1008;
t943 = -t1006 - t1144;
t765 = -pkin(3) * t943 + pkin(6) * t910 + t794;
t773 = -pkin(6) * t908 - t793;
t841 = -t1052 * t908 + t1054 * t910;
t1085 = -pkin(2) * t943 + qJ(3) * t841 + t1052 * t773 + t1054 * t765;
t1062 = qJD(4) ^ 2;
t965 = -t1062 - t1144;
t907 = t1060 * t965 - t1164;
t970 = t1007 + 0.2e1 * t1120;
t817 = -pkin(3) * t970 + pkin(6) * t907 - t1124;
t906 = t1057 * t965 + t1162;
t829 = -t1052 * t906 + t1054 * t907;
t860 = -pkin(6) * t906 + t1130;
t1084 = -pkin(2) * t970 + qJ(3) * t829 + t1052 * t860 + t1054 * t817;
t996 = -t1006 - t1062;
t924 = -t1057 * t996 - t1123;
t971 = -0.2e1 * t1004 + t1008;
t844 = -pkin(3) * t971 + pkin(6) * t924 + t1130;
t921 = t1060 * t996 - t1129;
t873 = -t1052 * t921 + t1054 * t924;
t884 = -pkin(6) * t921 + t1124;
t1083 = -pkin(2) * t971 + qJ(3) * t873 + t1052 * t884 + t1054 * t844;
t1039 = t1063 * qJDD(2);
t1041 = t1065 * qJDD(2);
t1021 = t1041 + t1039;
t1081 = pkin(2) * t1023 + qJ(3) * t1021 + t891;
t1080 = pkin(3) * t921 - t862;
t1079 = pkin(4) * t813 - t761;
t889 = t1052 * t942 - t1054 * t941;
t991 = t1026 * t1054 * t1052;
t992 = -t1058 * t1030 + t1052 * t1094;
t1077 = t1053 * t992 + t1055 * t991;
t1076 = t1053 * t991 - t1055 * t992;
t1015 = t1052 * t1149;
t1074 = -pkin(2) * t1040 + qJ(3) * t1015 + t958;
t1073 = pkin(3) * t906 - t861;
t1072 = pkin(4) * t858 - t762;
t751 = t1054 * t794 - t1137;
t781 = -pkin(3) * t938 + pkin(6) * t794;
t1071 = -pkin(2) * t938 - pkin(6) * t1137 + qJ(3) * t751 + t1054 * t781;
t1070 = pkin(3) * t774 + t1079;
t1067 = pkin(3) * t791 + t1072;
t1029 = 0.2e1 * t1095;
t1024 = -t1043 + t1106;
t1022 = t1041 - t1039;
t995 = -t1006 + t1062;
t994 = -t1062 + t1144;
t988 = t1061 * t1015 + t1052 * t1104;
t985 = t1058 * t1015 - t1052 * t1103;
t980 = t1061 * t1022 + t1058 * t1024;
t979 = t1061 * t1021 - t1058 * t1023;
t978 = t1058 * t1022 - t1061 * t1024;
t977 = t1058 * t1021 + t1061 * t1023;
t973 = t1006 - t1144;
t957 = -pkin(1) * t1026 + t1068;
t956 = pkin(1) * t1027 + t1082;
t950 = (-t1108 + t1109) * qJD(4);
t949 = (-t1107 - t1110) * qJD(4);
t946 = -t952 + t1046;
t945 = t951 - t1046;
t934 = -qJD(4) * t1109 + t1060 * t972;
t933 = -t1053 * t985 + t1055 * t988;
t932 = qJD(4) * t1107 + t1057 * t972;
t931 = t1053 * t988 + t1055 * t985;
t930 = qJD(4) * t1108 + t1057 * t1069;
t929 = qJD(4) * t1110 - t1060 * t1069;
t923 = -t1057 * t995 + t1162;
t922 = t1060 * t994 - t1129;
t920 = t1060 * t995 + t1164;
t919 = t1057 * t994 + t1123;
t918 = pkin(1) * t926;
t914 = pkin(1) * t1050 + pkin(5) * t1091;
t911 = -t1057 * t971 - t1060 * t970;
t909 = -t1057 * t970 + t1060 * t971;
t904 = t952 - t951;
t899 = pkin(1) * t987 + t1100;
t898 = pkin(1) * t985 + t1074;
t897 = -t1052 * t949 + t1054 * t950;
t896 = t1052 * t950 + t1054 * t949;
t895 = (t1056 * t955 - t1059 * t953) * t1048;
t894 = (-t1056 * t953 - t1059 * t955) * t1048;
t893 = t1058 * qJDD(4) + t1061 * t897;
t892 = -t1061 * qJDD(4) + t1058 * t897;
t886 = -t955 * qJD(5) - t1092;
t882 = -pkin(5) * t985 + t1054 * t1122 - t1058 * t942;
t881 = -pkin(5) * t987 + t1052 * t1122 - t1058 * t941;
t880 = pkin(5) * t988 + t1054 * t1128 + t1061 * t942;
t879 = -pkin(5) * t989 + t1052 * t1128 + t1061 * t941;
t877 = -t1052 * t932 + t1054 * t934;
t876 = -t1052 * t929 + t1054 * t930;
t875 = t1052 * t934 + t1054 * t932;
t874 = t1052 * t930 + t1054 * t929;
t872 = -t1052 * t920 + t1054 * t923;
t871 = -t1052 * t919 + t1054 * t922;
t870 = t1052 * t924 + t1054 * t921;
t869 = t1052 * t923 + t1054 * t920;
t868 = t1052 * t922 + t1054 * t919;
t866 = t1059 * t945 - t1132;
t865 = -t1056 * t946 + t1163;
t864 = t1056 * t945 + t1126;
t863 = t1059 * t946 + t1165;
t853 = -pkin(5) * t977 - t1061 * t889;
t852 = pkin(5) * t979 - t1058 * t889;
t850 = t1061 * t891 + t1128;
t849 = t1058 * t891 - t1122;
t848 = t1058 * t1008 + t1061 * t872;
t847 = -t1058 * t1007 + t1061 * t871;
t846 = -t1061 * t1008 + t1058 * t872;
t845 = t1061 * t1007 + t1058 * t871;
t842 = -t1052 * t909 + t1054 * t911;
t840 = t1052 * t911 + t1054 * t909;
t839 = t1052 * t910 + t1054 * t908;
t828 = t1052 * t907 + t1054 * t906;
t826 = t1061 * t877 + t1097;
t825 = t1061 * t876 - t1097;
t824 = t1058 * t877 - t1096;
t823 = t1058 * t876 + t1096;
t822 = pkin(1) * t977 + t1081;
t821 = t1059 * t887 - t955 * t1119;
t820 = t1056 * t887 + t955 * t1118;
t819 = -t1056 * t886 + t953 * t1118;
t818 = t1059 * t886 + t953 * t1119;
t816 = t1058 * t971 + t1061 * t873;
t815 = t1058 * t873 - t1061 * t971;
t810 = -t1057 * t894 + t1060 * t895;
t809 = t1057 * t895 + t1060 * t894;
t808 = t1058 * t973 + t1061 * t842;
t807 = t1058 * t842 - t1061 * t973;
t806 = t1058 * t970 + t1061 * t829;
t805 = t1058 * t829 - t1061 * t970;
t803 = t1058 * t943 + t1061 * t841;
t802 = t1058 * t841 - t1061 * t943;
t799 = -pkin(2) * t839 - t1142;
t798 = -t1057 * t864 + t1060 * t866;
t797 = -t1057 * t863 + t1060 * t865;
t796 = t1057 * t866 + t1060 * t864;
t795 = t1057 * t865 + t1060 * t863;
t789 = pkin(1) * t849 + t1139;
t786 = -t1056 * t1156 - t1059 * t833;
t784 = -t1056 * t833 + t1059 * t1156;
t782 = -pkin(2) * t870 - t1080;
t779 = -t1057 * t820 + t1060 * t821;
t778 = -t1057 * t818 + t1060 * t819;
t777 = t1057 * t821 + t1060 * t820;
t776 = t1057 * t819 + t1060 * t818;
t771 = -pkin(2) * t828 - t1073;
t770 = -pkin(5) * t849 + (pkin(2) * t1058 - qJ(3) * t1061) * t889;
t769 = -t1052 * t809 + t1054 * t810;
t768 = t1052 * t810 + t1054 * t809;
t767 = t1058 * t1047 + t1061 * t769;
t766 = -t1061 * t1047 + t1058 * t769;
t763 = -qJ(3) * t870 - t1052 * t844 + t1054 * t884;
t758 = -qJ(3) * t828 - t1052 * t817 + t1054 * t860;
t756 = pkin(5) * t850 + (-pkin(2) * t1061 - qJ(3) * t1058 - pkin(1)) * t889;
t755 = -t1052 * t796 + t1054 * t798;
t754 = -t1052 * t795 + t1054 * t797;
t753 = t1052 * t798 + t1054 * t796;
t752 = t1052 * t797 + t1054 * t795;
t750 = t1052 * t794 + t1135;
t747 = t1052 * t792 + t1054 * t791;
t745 = t1058 * t938 + t1061 * t751;
t744 = t1058 * t751 - t1061 * t938;
t743 = pkin(1) * t815 + t1083;
t741 = -t1057 * t784 + t1060 * t786;
t739 = t1057 * t786 + t1060 * t784;
t738 = -t1052 * t777 + t1054 * t779;
t737 = -t1052 * t776 + t1054 * t778;
t736 = t1052 * t779 + t1054 * t777;
t735 = t1052 * t778 + t1054 * t776;
t733 = t1052 * t775 + t1054 * t774;
t731 = pkin(1) * t805 + t1084;
t730 = -t1058 * t834 + t1061 * t755;
t729 = t1058 * t838 + t1061 * t754;
t728 = t1058 * t755 + t1061 * t834;
t727 = t1058 * t754 - t1061 * t838;
t726 = t1058 * t1156 + t1061 * t748;
t725 = t1058 * t748 - t1061 * t1156;
t724 = t1061 * t738 + t1102;
t723 = t1061 * t737 - t1102;
t722 = t1058 * t738 - t1101;
t721 = t1058 * t737 + t1101;
t720 = -pkin(2) * t750 - t1143;
t719 = t1058 * t833 + t1061 * t734;
t718 = t1058 * t734 - t1061 * t833;
t714 = -pkin(5) * t815 - t1058 * t782 + t1061 * t763;
t713 = -qJ(3) * t839 - t1052 * t765 + t1054 * t773;
t709 = -pkin(1) * t870 + pkin(5) * t816 + t1058 * t763 + t1061 * t782;
t708 = -pkin(5) * t805 - t1058 * t771 + t1061 * t758;
t705 = -pkin(6) * t1135 - qJ(3) * t750 - t1052 * t781;
t702 = pkin(1) * t802 + t1085;
t700 = -pkin(1) * t828 + pkin(5) * t806 + t1058 * t758 + t1061 * t771;
t697 = -t1052 * t739 + t1054 * t741;
t696 = t1052 * t742 + t1054 * t740;
t695 = t1052 * t741 + t1054 * t739;
t691 = -pkin(5) * t802 - t1058 * t799 + t1061 * t713;
t690 = t1058 * t904 + t1061 * t697;
t689 = t1058 * t697 - t1061 * t904;
t688 = -pkin(2) * t747 - t1067;
t687 = t1058 * t885 + t1061 * t698;
t686 = t1058 * t698 - t1061 * t885;
t685 = -pkin(1) * t839 + pkin(5) * t803 + t1058 * t713 + t1061 * t799;
t684 = -pkin(2) * t733 - t1070;
t681 = pkin(1) * t744 + t1071;
t680 = -pkin(2) * t696 - t1098;
t679 = -pkin(5) * t744 - t1058 * t720 + t1061 * t705;
t678 = -qJ(3) * t747 - t1052 * t704 + t1054 * t712;
t677 = -pkin(1) * t750 + pkin(5) * t745 + t1058 * t705 + t1061 * t720;
t676 = -qJ(3) * t733 - t1052 * t699 + t1054 * t707;
t670 = t1052 * t683 + t1054 * t682;
t668 = pkin(1) * t725 + t1086;
t665 = t1058 * t854 + t1061 * t671;
t664 = t1058 * t671 - t1061 * t854;
t661 = pkin(1) * t718 + t1087;
t660 = -pkin(5) * t725 - t1058 * t688 + t1061 * t678;
t659 = -pkin(1) * t747 + pkin(5) * t726 + t1058 * t678 + t1061 * t688;
t658 = -pkin(5) * t718 - t1058 * t684 + t1061 * t676;
t657 = -pkin(2) * t670 - t1099;
t656 = -pkin(1) * t733 + pkin(5) * t719 + t1058 * t676 + t1061 * t684;
t655 = -qJ(3) * t696 - t1052 * t673 + t1054 * t675;
t654 = pkin(1) * t686 + t1088;
t653 = -qJ(3) * t670 - t1052 * t663 + t1054 * t667;
t652 = -pkin(5) * t686 - t1058 * t680 + t1061 * t655;
t651 = -pkin(1) * t696 + pkin(5) * t687 + t1058 * t655 + t1061 * t680;
t650 = pkin(1) * t664 + t1089;
t649 = -pkin(5) * t664 - t1058 * t657 + t1061 * t653;
t648 = -pkin(1) * t670 + pkin(5) * t665 + t1058 * t653 + t1061 * t657;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1113, -t1111, -t1146, -qJ(1) * t1146, 0, 0, t981, 0, -t1150, 0, t1160, t1161, t1166, -pkin(5) * t1134 + qJ(1) * t1166 - t1053 * t914, -t1076, -t1053 * t978 + t1055 * t980, t933, t1076, t1158, 0, qJ(1) * t1159 - t1053 * t879 + t1055 * t881, -qJ(1) * t931 - t1053 * t880 + t1055 * t882, t1055 * t853 - t1053 * t852 - qJ(1) * (t1053 * t979 + t1055 * t977), t1055 * t770 - t1053 * t756 - qJ(1) * (t1053 * t850 + t1055 * t849), -t1053 * t824 + t1055 * t826, -t1053 * t807 + t1055 * t808, -t1053 * t846 + t1055 * t848, -t1053 * t823 + t1055 * t825, -t1053 * t845 + t1055 * t847, -t1053 * t892 + t1055 * t893, t1055 * t708 - t1053 * t700 - qJ(1) * (t1053 * t806 + t1055 * t805), t1055 * t714 - t1053 * t709 - qJ(1) * (t1053 * t816 + t1055 * t815), t1055 * t691 - t1053 * t685 - qJ(1) * (t1053 * t803 + t1055 * t802), t1055 * t679 - t1053 * t677 - qJ(1) * (t1053 * t745 + t1055 * t744), -t1053 * t722 + t1055 * t724, -t1053 * t689 + t1055 * t690, -t1053 * t727 + t1055 * t729, -t1053 * t721 + t1055 * t723, -t1053 * t728 + t1055 * t730, -t1053 * t766 + t1055 * t767, t1055 * t658 - t1053 * t656 - qJ(1) * (t1053 * t719 + t1055 * t718), t1055 * t660 - t1053 * t659 - qJ(1) * (t1053 * t726 + t1055 * t725), t1055 * t652 - t1053 * t651 - qJ(1) * (t1053 * t687 + t1055 * t686), t1055 * t649 - t1053 * t648 - qJ(1) * (t1053 * t665 + t1055 * t664); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1111, -t1113, t1148, qJ(1) * t1148, 0, 0, t1150, 0, t981, 0, -t1161, t1160, t1167, -pkin(5) * t1136 + qJ(1) * t1167 + t1055 * t914, t1077, t1053 * t980 + t1055 * t978, t931, -t1077, t1159, 0, -qJ(1) * t1158 + t1053 * t881 + t1055 * t879, qJ(1) * t933 + t1053 * t882 + t1055 * t880, t1053 * t853 + t1055 * t852 + qJ(1) * (-t1053 * t977 + t1055 * t979), t1053 * t770 + t1055 * t756 + qJ(1) * (-t1053 * t849 + t1055 * t850), t1053 * t826 + t1055 * t824, t1053 * t808 + t1055 * t807, t1053 * t848 + t1055 * t846, t1053 * t825 + t1055 * t823, t1053 * t847 + t1055 * t845, t1053 * t893 + t1055 * t892, t1053 * t708 + t1055 * t700 + qJ(1) * (-t1053 * t805 + t1055 * t806), t1053 * t714 + t1055 * t709 + qJ(1) * (-t1053 * t815 + t1055 * t816), t1053 * t691 + t1055 * t685 + qJ(1) * (-t1053 * t802 + t1055 * t803), t1053 * t679 + t1055 * t677 + qJ(1) * (-t1053 * t744 + t1055 * t745), t1053 * t724 + t1055 * t722, t1053 * t690 + t1055 * t689, t1053 * t729 + t1055 * t727, t1053 * t723 + t1055 * t721, t1053 * t730 + t1055 * t728, t1053 * t767 + t1055 * t766, t1053 * t658 + t1055 * t656 + qJ(1) * (-t1053 * t718 + t1055 * t719), t1053 * t660 + t1055 * t659 + qJ(1) * (-t1053 * t725 + t1055 * t726), t1053 * t652 + t1055 * t651 + qJ(1) * (-t1053 * t686 + t1055 * t687), t1053 * t649 + t1055 * t648 + qJ(1) * (-t1053 * t664 + t1055 * t665); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1093, t1028, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t956, t957, 0, t918, t1039, t1029, 0, t1041, 0, 0, t899, t898, t822, t789, t875, t840, t869, t874, t868, t896, t731, t743, t702, t681, t736, t695, t752, t735, t753, t768, t661, t668, t654, t650; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1050, -t1093, 0, 0, 0, t1027, 0, -t1026, 0, t1078, t1001, -t926, -pkin(5) * t926, t992, t980, t988, -t992, t989, 0, t881, t882, t853, t770, t826, t808, t848, t825, t847, t893, t708, t714, t691, t679, t724, t690, t729, t723, t730, t767, t658, t660, t652, t649; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1050, 0, -t1028, 0, 0, 0, t1026, 0, t1027, 0, -t1001, t1078, t1091, t914, t991, t978, t985, -t991, -t987, 0, t879, t880, t852, t756, t824, t807, t846, t823, t845, t892, t700, t709, t685, t677, t722, t689, t727, t721, t728, t766, t656, t659, t651, t648; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1093, t1028, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t956, t957, 0, t918, t1039, t1029, 0, t1041, 0, 0, t899, t898, t822, t789, t875, t840, t869, t874, t868, t896, t731, t743, t702, t681, t736, t695, t752, t735, t753, t768, t661, t668, t654, t650; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t1145, 0, 0, -t1050, -t1082, 0, t1095, t1022, t1015, -t1095, t1016, 0, t958, t959, -t889, -qJ(3) * t889, t877, t842, t872, t876, t871, t897, t758, t763, t713, t705, t738, t697, t754, t737, t755, t769, t676, t678, t655, t653; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1145, 0, qJDD(2), 0, t1050, 0, -t1068, 0, t1030, -t1024, -t1040, -t1030, -t1042, 0, t941, t942, 0, -pkin(2) * t889, -t975, -t973, -t1008, t975, t1007, -qJDD(4), t771, t782, t799, t720, -t905, -t904, -t838, t905, t834, -t1047, t684, t688, t680, t657; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t1082, t1068, 0, 0, t1039, t1029, 0, t1041, 0, 0, t1100, t1074, t1081, t1139, t875, t840, t869, t874, t868, t896, t1084, t1083, t1085, t1071, t736, t695, t752, t735, t753, t768, t1087, t1086, t1088, t1089; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1040, t1042, t1030, 0, t1043, 0, 0, t969, t941, 0, t934, t911, t923, t930, t922, t950, t860, t884, t773, -pkin(6) * t793, t779, t741, t797, t778, t798, t810, t707, t712, t675, t667; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1040, -t1106, t1042, -t1030, 0, -t969, 0, t942, 0, t932, t909, t920, t929, t919, t949, t817, t844, t765, t781, t777, t739, t795, t776, t796, t809, t699, t704, t673, t663; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1030, t1024, t1040, t1030, t1042, 0, -t941, -t942, 0, 0, t975, t973, t1008, -t975, -t1007, qJDD(4), t1073, t1080, t1142, t1143, t905, t904, t838, -t905, -t834, t1047, t1070, t1067, t1098, t1099; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t972, -t970, t1151, t1004, t994, -t1004, 0, t938, t861, 0, t821, t786, t865, t819, t866, t895, t788, t790, t701, -pkin(7) * t716; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1120, t971, t995, -t1069, t967, -t1120, -t938, 0, t862, 0, t820, t784, t863, t818, t864, t894, t757, t759, t692, t710; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t975, t973, t1008, -t975, -t1007, qJDD(4), -t861, -t862, 0, 0, t905, t904, t838, -t905, -t834, t1047, t1079, t1072, t783, t715; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t887, -t833, t1155, t948, t945, -t948, 0, t854, t761, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1138, t1156, t946, t886, t902, -t1138, -t854, 0, t762, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t905, t904, t838, -t905, -t834, t1047, -t761, -t762, 0, 0;];
m_new_reg = t1;
