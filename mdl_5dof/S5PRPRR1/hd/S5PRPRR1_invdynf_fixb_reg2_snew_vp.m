% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRPRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d4,d5,theta1,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:43
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRPRR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRR1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRR1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRPRR1_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:43:40
% EndTime: 2019-12-05 15:43:43
% DurationCPUTime: 2.59s
% Computational Cost: add. (11769->191), mult. (27381->292), div. (0->0), fcn. (20561->10), ass. (0->163)
t1328 = qJD(2) ^ 2;
t1319 = cos(pkin(9));
t1312 = t1319 ^ 2;
t1317 = sin(pkin(9));
t1329 = t1317 ^ 2;
t1344 = t1312 + t1329;
t1296 = t1344 * t1328;
t1313 = qJD(4) + qJD(5);
t1362 = qJD(5) + t1313;
t1322 = sin(qJ(4));
t1325 = cos(qJ(4));
t1335 = t1317 * t1325 + t1319 * t1322;
t1361 = t1335 * qJDD(2);
t1354 = qJD(2) * t1319;
t1355 = qJD(2) * t1317;
t1286 = t1322 * t1355 - t1325 * t1354;
t1288 = t1335 * qJD(2);
t1321 = sin(qJ(5));
t1324 = cos(qJ(5));
t1257 = t1324 * t1286 + t1321 * t1288;
t1360 = t1257 ^ 2;
t1259 = -t1321 * t1286 + t1324 * t1288;
t1359 = t1259 ^ 2;
t1358 = t1286 ^ 2;
t1357 = t1288 ^ 2;
t1356 = t1313 ^ 2;
t1353 = t1259 * t1257;
t1352 = t1286 * qJD(4);
t1351 = t1288 * qJD(4);
t1350 = t1288 * t1286;
t1349 = t1312 * t1328;
t1348 = t1319 * t1328;
t1347 = t1329 * t1328;
t1346 = qJD(5) - t1313;
t1318 = sin(pkin(8));
t1320 = cos(pkin(8));
t1299 = -t1320 * g(1) - t1318 * g(2);
t1323 = sin(qJ(2));
t1326 = cos(qJ(2));
t1337 = t1318 * g(1) - t1320 * g(2);
t1274 = t1326 * t1299 + t1323 * t1337;
t1270 = -t1328 * pkin(2) + qJDD(2) * qJ(3) + t1274;
t1315 = -g(3) + qJDD(1);
t1345 = -0.2e1 * qJD(3) * t1355 + t1319 * t1315;
t1244 = (pkin(3) * t1348 - pkin(6) * qJDD(2) - t1270) * t1317 + t1345;
t1253 = 0.2e1 * qJD(3) * t1354 + t1319 * t1270 + t1317 * t1315;
t1310 = t1319 * qJDD(2);
t1245 = -pkin(3) * t1349 + pkin(6) * t1310 + t1253;
t1228 = t1322 * t1244 + t1325 * t1245;
t1343 = t1317 * qJDD(2);
t1342 = t1323 * qJDD(2);
t1341 = t1326 * qJDD(2);
t1340 = -qJDD(4) - qJDD(5);
t1227 = t1325 * t1244 - t1322 * t1245;
t1269 = t1361 - t1352;
t1251 = t1325 * t1310 - t1322 * t1343;
t1333 = -t1251 + t1351;
t1339 = -t1321 * t1269 - t1324 * t1333;
t1297 = -t1323 * t1328 + t1341;
t1298 = -t1326 * t1328 - t1342;
t1338 = -t1318 * t1297 + t1320 * t1298;
t1273 = -t1323 * t1299 + t1326 * t1337;
t1264 = qJDD(4) - t1350;
t1336 = t1320 * t1297 + t1318 * t1298;
t1266 = -qJDD(2) * pkin(2) - t1328 * qJ(3) + qJDD(3) - t1273;
t1250 = -pkin(3) * t1310 + t1266 + (-t1347 - t1349) * pkin(6);
t1332 = -t1324 * t1269 + t1321 * t1333;
t1327 = qJD(4) ^ 2;
t1300 = t1317 * t1348;
t1295 = t1344 * qJDD(2);
t1291 = t1319 * t1296;
t1290 = t1317 * t1296;
t1280 = -t1327 - t1357;
t1279 = qJD(4) * pkin(4) - t1288 * pkin(7);
t1278 = -t1326 * t1291 - t1319 * t1342;
t1277 = t1326 * t1290 + t1317 * t1342;
t1276 = -t1323 * t1291 + t1319 * t1341;
t1275 = t1323 * t1290 - t1317 * t1341;
t1272 = t1326 * t1295 - t1323 * t1296;
t1271 = t1323 * t1295 + t1326 * t1296;
t1268 = t1361 - 0.2e1 * t1352;
t1267 = -t1251 + 0.2e1 * t1351;
t1265 = -qJDD(4) - t1350;
t1263 = -t1327 - t1358;
t1255 = -t1356 - t1359;
t1254 = -t1357 - t1358;
t1252 = -t1317 * t1270 + t1345;
t1249 = -t1323 * t1273 + t1326 * t1274;
t1248 = t1326 * t1273 + t1323 * t1274;
t1247 = t1325 * t1265 - t1322 * t1280;
t1246 = t1322 * t1265 + t1325 * t1280;
t1240 = t1325 * t1251 + t1322 * t1361;
t1239 = t1322 * t1251 - t1325 * t1361;
t1238 = t1325 * t1263 - t1322 * t1264;
t1237 = t1322 * t1263 + t1325 * t1264;
t1236 = t1340 - t1353;
t1235 = -t1340 - t1353;
t1234 = -t1356 - t1360;
t1233 = -t1317 * t1252 + t1319 * t1253;
t1232 = t1319 * t1252 + t1317 * t1253;
t1231 = -t1359 - t1360;
t1230 = -t1317 * t1246 + t1319 * t1247;
t1229 = t1319 * t1246 + t1317 * t1247;
t1226 = t1324 * t1236 - t1321 * t1255;
t1225 = t1321 * t1236 + t1324 * t1255;
t1224 = t1333 * pkin(4) - t1358 * pkin(7) + t1288 * t1279 + t1250;
t1223 = t1326 * t1233 + t1323 * t1266;
t1222 = t1323 * t1233 - t1326 * t1266;
t1221 = -t1317 * t1239 + t1319 * t1240;
t1220 = t1319 * t1239 + t1317 * t1240;
t1219 = t1346 * t1257 + t1332;
t1218 = -t1362 * t1257 - t1332;
t1217 = -t1346 * t1259 + t1339;
t1216 = t1362 * t1259 - t1339;
t1215 = -t1317 * t1237 + t1319 * t1238;
t1214 = t1319 * t1237 + t1317 * t1238;
t1213 = t1326 * t1230 + t1323 * t1268;
t1212 = t1323 * t1230 - t1326 * t1268;
t1211 = t1324 * t1234 - t1321 * t1235;
t1210 = t1321 * t1234 + t1324 * t1235;
t1209 = t1326 * t1215 + t1323 * t1267;
t1208 = t1323 * t1215 - t1326 * t1267;
t1207 = -t1358 * pkin(4) - t1333 * pkin(7) - qJD(4) * t1279 + t1228;
t1206 = t1326 * t1221 + t1323 * t1254;
t1205 = t1323 * t1221 - t1326 * t1254;
t1204 = (-t1269 - t1352) * pkin(7) + t1264 * pkin(4) + t1227;
t1203 = -t1322 * t1227 + t1325 * t1228;
t1202 = t1325 * t1227 + t1322 * t1228;
t1201 = -t1322 * t1225 + t1325 * t1226;
t1200 = t1325 * t1225 + t1322 * t1226;
t1199 = t1324 * t1217 - t1321 * t1219;
t1198 = t1321 * t1217 + t1324 * t1219;
t1197 = -t1322 * t1210 + t1325 * t1211;
t1196 = t1325 * t1210 + t1322 * t1211;
t1195 = t1321 * t1204 + t1324 * t1207;
t1194 = t1324 * t1204 - t1321 * t1207;
t1193 = -t1317 * t1202 + t1319 * t1203;
t1192 = t1319 * t1202 + t1317 * t1203;
t1191 = -t1317 * t1200 + t1319 * t1201;
t1190 = t1319 * t1200 + t1317 * t1201;
t1189 = t1326 * t1193 + t1323 * t1250;
t1188 = t1323 * t1193 - t1326 * t1250;
t1187 = -t1322 * t1198 + t1325 * t1199;
t1186 = t1325 * t1198 + t1322 * t1199;
t1185 = -t1317 * t1196 + t1319 * t1197;
t1184 = t1319 * t1196 + t1317 * t1197;
t1183 = t1326 * t1191 + t1323 * t1218;
t1182 = t1323 * t1191 - t1326 * t1218;
t1181 = t1326 * t1185 + t1323 * t1216;
t1180 = t1323 * t1185 - t1326 * t1216;
t1179 = -t1321 * t1194 + t1324 * t1195;
t1178 = t1324 * t1194 + t1321 * t1195;
t1177 = -t1317 * t1186 + t1319 * t1187;
t1176 = t1319 * t1186 + t1317 * t1187;
t1175 = t1326 * t1177 + t1323 * t1231;
t1174 = t1323 * t1177 - t1326 * t1231;
t1173 = -t1322 * t1178 + t1325 * t1179;
t1172 = t1325 * t1178 + t1322 * t1179;
t1171 = -t1317 * t1172 + t1319 * t1173;
t1170 = t1319 * t1172 + t1317 * t1173;
t1169 = t1326 * t1171 + t1323 * t1224;
t1168 = t1323 * t1171 - t1326 * t1224;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1320 * t1299 - t1318 * t1337, 0, 0, 0, 0, 0, 0, t1338, -t1336, 0, -t1318 * t1248 + t1320 * t1249, 0, 0, 0, 0, 0, 0, -t1318 * t1276 + t1320 * t1278, -t1318 * t1275 + t1320 * t1277, -t1318 * t1271 + t1320 * t1272, -t1318 * t1222 + t1320 * t1223, 0, 0, 0, 0, 0, 0, -t1318 * t1208 + t1320 * t1209, -t1318 * t1212 + t1320 * t1213, -t1318 * t1205 + t1320 * t1206, -t1318 * t1188 + t1320 * t1189, 0, 0, 0, 0, 0, 0, -t1318 * t1180 + t1320 * t1181, -t1318 * t1182 + t1320 * t1183, -t1318 * t1174 + t1320 * t1175, -t1318 * t1168 + t1320 * t1169; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1318 * t1299 + t1320 * t1337, 0, 0, 0, 0, 0, 0, t1336, t1338, 0, t1320 * t1248 + t1318 * t1249, 0, 0, 0, 0, 0, 0, t1320 * t1276 + t1318 * t1278, t1320 * t1275 + t1318 * t1277, t1320 * t1271 + t1318 * t1272, t1320 * t1222 + t1318 * t1223, 0, 0, 0, 0, 0, 0, t1320 * t1208 + t1318 * t1209, t1320 * t1212 + t1318 * t1213, t1320 * t1205 + t1318 * t1206, t1320 * t1188 + t1318 * t1189, 0, 0, 0, 0, 0, 0, t1320 * t1180 + t1318 * t1181, t1320 * t1182 + t1318 * t1183, t1320 * t1174 + t1318 * t1175, t1320 * t1168 + t1318 * t1169; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1315, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1315, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1232, 0, 0, 0, 0, 0, 0, t1214, t1229, t1220, t1192, 0, 0, 0, 0, 0, 0, t1184, t1190, t1176, t1170; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1299, 0, 0, 0, 0, 0, 0, t1298, -t1297, 0, t1249, 0, 0, 0, 0, 0, 0, t1278, t1277, t1272, t1223, 0, 0, 0, 0, 0, 0, t1209, t1213, t1206, t1189, 0, 0, 0, 0, 0, 0, t1181, t1183, t1175, t1169; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1337, 0, 0, 0, 0, 0, 0, t1297, t1298, 0, t1248, 0, 0, 0, 0, 0, 0, t1276, t1275, t1271, t1222, 0, 0, 0, 0, 0, 0, t1208, t1212, t1205, t1188, 0, 0, 0, 0, 0, 0, t1180, t1182, t1174, t1168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1315, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1315, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1232, 0, 0, 0, 0, 0, 0, t1214, t1229, t1220, t1192, 0, 0, 0, 0, 0, 0, t1184, t1190, t1176, t1170; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1328, -qJDD(2), 0, t1274, 0, 0, 0, 0, 0, 0, -t1291, t1290, t1295, t1233, 0, 0, 0, 0, 0, 0, t1215, t1230, t1221, t1193, 0, 0, 0, 0, 0, 0, t1185, t1191, t1177, t1171; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1328, 0, t1273, 0, 0, 0, 0, 0, 0, t1310, -t1343, t1296, -t1266, 0, 0, 0, 0, 0, 0, -t1267, -t1268, -t1254, -t1250, 0, 0, 0, 0, 0, 0, -t1216, -t1218, -t1231, -t1224; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1315, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1232, 0, 0, 0, 0, 0, 0, t1214, t1229, t1220, t1192, 0, 0, 0, 0, 0, 0, t1184, t1190, t1176, t1170; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1349, t1300, t1310, t1253, 0, 0, 0, 0, 0, 0, t1238, t1247, t1240, t1203, 0, 0, 0, 0, 0, 0, t1197, t1201, t1187, t1173; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1300, -t1347, -t1343, t1252, 0, 0, 0, 0, 0, 0, t1237, t1246, t1239, t1202, 0, 0, 0, 0, 0, 0, t1196, t1200, t1186, t1172; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1310, t1343, -t1296, t1266, 0, 0, 0, 0, 0, 0, t1267, t1268, t1254, t1250, 0, 0, 0, 0, 0, 0, t1216, t1218, t1231, t1224; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1263, t1265, t1251, t1228, 0, 0, 0, 0, 0, 0, t1211, t1226, t1199, t1179; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1264, t1280, -t1361, t1227, 0, 0, 0, 0, 0, 0, t1210, t1225, t1198, t1178; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1267, t1268, t1254, t1250, 0, 0, 0, 0, 0, 0, t1216, t1218, t1231, t1224; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1234, t1236, t1217, t1195; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1235, t1255, t1219, t1194; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1216, t1218, t1231, t1224;];
f_new_reg = t1;
