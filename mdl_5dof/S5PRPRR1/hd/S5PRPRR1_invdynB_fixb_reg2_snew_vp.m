% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d4,d5,theta1,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:43
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRPRR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRR1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRR1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRPRR1_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:43:14
% EndTime: 2019-12-05 15:43:25
% DurationCPUTime: 11.21s
% Computational Cost: add. (44676->546), mult. (103757->844), div. (0->0), fcn. (77642->10), ass. (0->375)
t561 = sin(qJ(4));
t558 = cos(pkin(9));
t564 = cos(qJ(4));
t556 = sin(pkin(9));
t620 = t556 * t561;
t518 = (t558 * t564 - t620) * qJD(2);
t573 = t556 * t564 + t558 * t561;
t520 = t573 * qJD(2);
t625 = t520 * t518;
t640 = qJDD(4) + t625;
t647 = t561 * t640;
t646 = t564 * t640;
t557 = sin(pkin(8));
t559 = cos(pkin(8));
t536 = t559 * g(1) + t557 * g(2);
t562 = sin(qJ(2));
t565 = cos(qJ(2));
t582 = t557 * g(1) - t559 * g(2);
t599 = t565 * t536 - t562 * t582;
t626 = qJD(2) ^ 2;
t641 = -t626 * pkin(2) + qJDD(2) * qJ(3) + 0.2e1 * qJD(2) * qJD(3) - t599;
t577 = t562 * t536 + t565 * t582;
t579 = -t562 * t577 - t565 * t599;
t439 = t562 * t599 - t565 * t577;
t613 = t559 * t439;
t645 = -t557 * t579 + t613;
t619 = t557 * t439;
t392 = t559 * t579 + t619;
t591 = t562 * qJDD(2);
t534 = t565 * t626 + t591;
t590 = t565 * qJDD(2);
t596 = t562 * t626;
t535 = t590 - t596;
t488 = -t557 * t534 + t559 * t535;
t554 = g(3) - qJDD(1);
t511 = pkin(5) * t534 - t565 * t554;
t576 = -pkin(5) * t535 - t562 * t554;
t644 = -qJ(1) * t488 + t557 * t511 + t559 * t576;
t560 = sin(qJ(5));
t563 = cos(qJ(5));
t464 = -t563 * t518 + t560 * t520;
t466 = t560 * t518 + t563 * t520;
t416 = t466 * t464;
t589 = qJDD(4) + qJDD(5);
t633 = -t416 + t589;
t643 = t560 * t633;
t642 = t563 * t633;
t569 = t558 ^ 2;
t547 = t569 * t626;
t567 = t556 ^ 2;
t595 = t567 * t626;
t531 = t547 + t595;
t631 = t559 * t534 + t557 * t535;
t638 = qJ(1) * t631 + t559 * t511 - t557 * t576;
t629 = t626 * (t567 + t569);
t524 = t558 * t629;
t583 = t558 * t590;
t497 = -t562 * t524 + t583;
t499 = t565 * t524 + t558 * t591;
t444 = t559 * t497 - t557 * t499;
t637 = t557 * t497 + t559 * t499;
t552 = qJD(4) + qJD(5);
t459 = t552 * t464;
t592 = qJDD(2) * t558;
t516 = qJDD(2) * t620 - t564 * t592;
t597 = t520 * qJD(4);
t476 = -t516 - t597;
t598 = t518 * qJD(4);
t630 = t573 * qJDD(2);
t478 = t630 + t598;
t571 = t464 * qJD(5) - t560 * t476 - t563 * t478;
t632 = -t459 - t571;
t580 = -t563 * t476 + t560 * t478;
t359 = (qJD(5) - t552) * t466 + t580;
t492 = -t559 * t536 - t557 * t582;
t491 = -t557 * t536 + t559 * t582;
t462 = t464 ^ 2;
t463 = t466 ^ 2;
t627 = t518 ^ 2;
t515 = t520 ^ 2;
t550 = t552 ^ 2;
t555 = qJDD(2) * pkin(2);
t624 = t552 * t560;
t623 = t552 * t563;
t541 = t558 * t554;
t429 = -t541 + (pkin(3) * t626 * t558 - pkin(6) * qJDD(2) - t641) * t556;
t453 = -t556 * t554 + t641 * t558;
t430 = -pkin(3) * t547 + pkin(6) * t592 + t453;
t381 = -t564 * t429 + t561 * t430;
t382 = t561 * t429 + t564 * t430;
t323 = -t564 * t381 + t561 * t382;
t622 = t556 * t323;
t621 = t556 * t558;
t615 = t557 * t554;
t614 = t558 * t323;
t612 = t559 * t554;
t474 = -t626 * qJ(3) + qJDD(3) - t555 - t577;
t450 = -pkin(3) * t592 - t531 * pkin(6) + t474;
t503 = qJD(4) * pkin(4) - t520 * pkin(7);
t376 = -t476 * pkin(4) - t627 * pkin(7) + t520 * t503 + t450;
t611 = t560 * t376;
t413 = t416 + t589;
t610 = t560 * t413;
t332 = (-t478 + t598) * pkin(7) + t640 * pkin(4) - t381;
t336 = -t627 * pkin(4) + t476 * pkin(7) - qJD(4) * t503 + t382;
t289 = -t563 * t332 + t560 * t336;
t290 = t560 * t332 + t563 * t336;
t253 = -t563 * t289 + t560 * t290;
t609 = t561 * t253;
t608 = t561 * t450;
t472 = qJDD(4) - t625;
t607 = t561 * t472;
t606 = t562 * t474;
t605 = t563 * t376;
t604 = t563 * t413;
t603 = t564 * t253;
t602 = t564 * t450;
t601 = t564 * t472;
t600 = t565 * t474;
t587 = t562 * t416;
t586 = t562 * t625;
t585 = t565 * t416;
t584 = t565 * t625;
t581 = -t474 + t555;
t254 = t560 * t289 + t563 * t290;
t324 = t561 * t381 + t564 * t382;
t452 = t641 * t556 + t541;
t405 = t556 * t452 + t558 * t453;
t404 = t558 * t452 - t556 * t453;
t501 = t534 * t621;
t502 = t556 * t583 - t596 * t621;
t575 = t559 * t501 + t557 * t502;
t574 = t557 * t501 - t559 * t502;
t566 = qJD(4) ^ 2;
t546 = t569 * qJDD(2);
t545 = t567 * qJDD(2);
t532 = t547 - t595;
t530 = t546 - t545;
t529 = t546 + t545;
t523 = t556 * t629;
t506 = -t515 - t566;
t505 = -t515 + t566;
t504 = -t566 + t627;
t498 = t565 * t523 + t556 * t591;
t495 = t562 * t523 - t556 * t590;
t486 = t565 * t530 - t562 * t532;
t485 = t565 * t529 - t562 * t531;
t484 = t562 * t530 + t565 * t532;
t483 = t562 * t529 + t565 * t531;
t479 = -t515 + t627;
t477 = t630 + 0.2e1 * t598;
t475 = t516 + 0.2e1 * t597;
t470 = -t566 - t627;
t461 = (t518 * t564 + t520 * t561) * qJD(4);
t460 = (t518 * t561 - t520 * t564) * qJD(4);
t457 = -t463 + t550;
t456 = t462 - t550;
t455 = -t463 - t550;
t454 = -t515 - t627;
t448 = t564 * t478 - t561 * t597;
t446 = -t557 * t495 + t559 * t498;
t445 = t561 * t478 + t564 * t597;
t443 = t559 * t495 + t557 * t498;
t442 = -t561 * t476 - t564 * t598;
t441 = t564 * t476 - t561 * t598;
t436 = -t561 * t506 - t601;
t435 = -t561 * t505 + t646;
t434 = t564 * t504 - t607;
t433 = t564 * t506 - t607;
t432 = t564 * t505 + t647;
t431 = t561 * t504 + t601;
t427 = -t557 * t483 + t559 * t485;
t426 = t559 * t483 + t557 * t485;
t425 = pkin(1) * t554 + pkin(5) * t579;
t422 = -t564 * t475 - t561 * t477;
t421 = -t516 * t564 + t561 * t630;
t420 = -t561 * t475 + t564 * t477;
t419 = -t516 * t561 - t564 * t630;
t418 = t564 * t470 - t647;
t417 = t561 * t470 + t646;
t415 = -t463 + t462;
t411 = -t550 - t462;
t410 = -t556 * t460 + t558 * t461;
t409 = (-t464 * t563 + t466 * t560) * t552;
t408 = (-t464 * t560 - t466 * t563) * t552;
t407 = t562 * qJDD(4) + t565 * t410;
t406 = -t565 * qJDD(4) + t562 * t410;
t401 = -t466 * qJD(5) - t580;
t400 = -t462 - t463;
t399 = -pkin(6) * t433 + t602;
t398 = -pkin(5) * t495 - t562 * t453 + t558 * t600;
t397 = -pkin(5) * t497 - t562 * t452 + t556 * t600;
t396 = pkin(5) * t498 + t565 * t453 + t558 * t606;
t395 = -pkin(5) * t499 + t565 * t452 + t556 * t606;
t394 = -t556 * t445 + t558 * t448;
t393 = -t556 * t441 + t558 * t442;
t390 = -t556 * t433 + t558 * t436;
t389 = -t556 * t432 + t558 * t435;
t388 = -t556 * t431 + t558 * t434;
t387 = t558 * t433 + t556 * t436;
t386 = t563 * t456 - t610;
t385 = -t560 * t457 + t642;
t384 = t560 * t456 + t604;
t383 = t563 * t457 + t643;
t380 = -pkin(6) * t417 + t608;
t379 = -t560 * t455 - t604;
t378 = t563 * t455 - t610;
t375 = -pkin(5) * t483 + t565 * t404;
t374 = pkin(5) * t485 + t562 * t404;
t373 = t565 * t405 + t606;
t372 = t562 * t405 - t600;
t371 = t565 * t389 + t562 * t630;
t370 = t565 * t388 - t562 * t516;
t369 = t562 * t389 - t565 * t630;
t368 = t562 * t388 + t565 * t516;
t367 = -pkin(3) * t477 + pkin(6) * t436 + t608;
t366 = -t556 * t420 + t558 * t422;
t365 = -t556 * t419 + t558 * t421;
t364 = t558 * t419 + t556 * t421;
t363 = -t459 + t571;
t358 = (qJD(5) + t552) * t466 + t580;
t357 = -t556 * t417 + t558 * t418;
t356 = t558 * t417 + t556 * t418;
t355 = t565 * t394 - t586;
t354 = t565 * t393 + t586;
t353 = t562 * t394 + t584;
t352 = t562 * t393 - t584;
t351 = -t466 * t624 - t563 * t571;
t350 = t466 * t623 - t560 * t571;
t349 = -t560 * t401 + t464 * t623;
t348 = t563 * t401 + t464 * t624;
t347 = -pkin(3) * t475 + pkin(6) * t418 - t602;
t346 = t565 * t390 + t562 * t477;
t345 = t562 * t390 - t565 * t477;
t344 = t563 * t411 - t643;
t343 = t560 * t411 + t642;
t342 = -t561 * t408 + t564 * t409;
t341 = t564 * t408 + t561 * t409;
t340 = t565 * t366 - t562 * t479;
t339 = t562 * t366 + t565 * t479;
t338 = t565 * t357 + t562 * t475;
t337 = t562 * t357 - t565 * t475;
t334 = t565 * t365 + t562 * t454;
t333 = t562 * t365 - t565 * t454;
t329 = -pkin(2) * t364 - pkin(3) * t419;
t328 = -t561 * t384 + t564 * t386;
t327 = -t561 * t383 + t564 * t385;
t326 = t564 * t384 + t561 * t386;
t325 = t564 * t383 + t561 * t385;
t322 = -t561 * t378 + t564 * t379;
t321 = t564 * t378 + t561 * t379;
t320 = -pkin(7) * t378 + t605;
t319 = -t557 * t372 + t559 * t373;
t318 = t559 * t372 + t557 * t373;
t317 = -pkin(7) * t343 + t611;
t316 = -t359 * t563 - t560 * t363;
t315 = -t563 * t358 - t560 * t632;
t314 = -t359 * t560 + t563 * t363;
t313 = -t560 * t358 + t563 * t632;
t312 = -pkin(2) * t387 - pkin(3) * t433 + t382;
t311 = -pkin(3) * t450 + pkin(6) * t324;
t310 = -t561 * t350 + t564 * t351;
t309 = -t561 * t348 + t564 * t349;
t308 = t564 * t350 + t561 * t351;
t307 = t564 * t348 + t561 * t349;
t306 = -t557 * t345 + t559 * t346;
t305 = t559 * t345 + t557 * t346;
t304 = -t561 * t343 + t564 * t344;
t303 = t564 * t343 + t561 * t344;
t302 = -pkin(6) * t419 - t323;
t301 = -pkin(2) * t356 - pkin(3) * t417 + t381;
t300 = -pkin(5) * t372 - (pkin(2) * t562 - qJ(3) * t565) * t404;
t299 = -t556 * t341 + t558 * t342;
t298 = t565 * t299 + t562 * t589;
t297 = t562 * t299 - t565 * t589;
t296 = -pkin(3) * t454 + pkin(6) * t421 + t324;
t295 = -qJ(3) * t387 - t556 * t367 + t558 * t399;
t294 = -t557 * t337 + t559 * t338;
t293 = t559 * t337 + t557 * t338;
t292 = -t557 * t333 + t559 * t334;
t291 = t559 * t333 + t557 * t334;
t287 = -pkin(4) * t632 + pkin(7) * t379 + t611;
t286 = -qJ(3) * t356 - t556 * t347 + t558 * t380;
t285 = -pkin(4) * t358 + pkin(7) * t344 - t605;
t284 = pkin(5) * t373 - (-pkin(2) * t565 - qJ(3) * t562 - pkin(1)) * t404;
t283 = -t556 * t326 + t558 * t328;
t282 = -t556 * t325 + t558 * t327;
t281 = t558 * t324 - t622;
t280 = t556 * t324 + t614;
t279 = -t556 * t321 + t558 * t322;
t278 = t558 * t321 + t556 * t322;
t277 = t565 * t281 + t562 * t450;
t276 = t562 * t281 - t565 * t450;
t275 = -t561 * t314 + t564 * t316;
t274 = -t561 * t313 + t564 * t315;
t273 = t564 * t314 + t561 * t316;
t272 = t564 * t313 + t561 * t315;
t271 = -t556 * t308 + t558 * t310;
t270 = -t556 * t307 + t558 * t309;
t269 = -t556 * t303 + t558 * t304;
t268 = t558 * t303 + t556 * t304;
t267 = t565 * t283 - t562 * t359;
t266 = t565 * t282 - t562 * t363;
t265 = t562 * t283 + t565 * t359;
t264 = t562 * t282 + t565 * t363;
t263 = t565 * t279 + t562 * t632;
t262 = t562 * t279 - t565 * t632;
t261 = t565 * t271 + t587;
t260 = t565 * t270 - t587;
t259 = t562 * t271 - t585;
t258 = t562 * t270 + t585;
t257 = -pkin(2) * t280 - pkin(3) * t323;
t256 = t565 * t269 + t562 * t358;
t255 = t562 * t269 - t565 * t358;
t252 = -pkin(5) * t345 + t565 * t295 - t562 * t312;
t251 = -qJ(3) * t364 - t556 * t296 + t558 * t302;
t250 = -pkin(6) * t321 - t561 * t287 + t564 * t320;
t249 = -pkin(4) * t376 + pkin(7) * t254;
t248 = -pkin(1) * t387 + pkin(5) * t346 + t562 * t295 + t565 * t312;
t247 = -pkin(5) * t337 + t565 * t286 - t562 * t301;
t246 = -pkin(6) * t303 - t561 * t285 + t564 * t317;
t245 = -pkin(6) * t614 - qJ(3) * t280 - t556 * t311;
t244 = -pkin(3) * t632 + pkin(6) * t322 + t564 * t287 + t561 * t320;
t243 = -pkin(7) * t314 - t253;
t242 = -pkin(1) * t356 + pkin(5) * t338 + t562 * t286 + t565 * t301;
t241 = -t557 * t276 + t559 * t277;
t240 = t559 * t276 + t557 * t277;
t239 = -pkin(3) * t358 + pkin(6) * t304 + t564 * t285 + t561 * t317;
t238 = -t556 * t273 + t558 * t275;
t237 = -t556 * t272 + t558 * t274;
t236 = t558 * t273 + t556 * t275;
t235 = -pkin(4) * t400 + pkin(7) * t316 + t254;
t234 = -pkin(5) * t333 + t565 * t251 - t562 * t329;
t233 = t565 * t237 - t562 * t415;
t232 = t562 * t237 + t565 * t415;
t231 = -pkin(2) * t278 - pkin(3) * t321 - pkin(4) * t378 + t290;
t230 = t565 * t238 + t562 * t400;
t229 = t562 * t238 - t565 * t400;
t228 = -t557 * t262 + t559 * t263;
t227 = t559 * t262 + t557 * t263;
t226 = -pkin(1) * t364 + pkin(5) * t334 + t562 * t251 + t565 * t329;
t225 = -pkin(2) * t268 - pkin(3) * t303 - pkin(4) * t343 + t289;
t224 = -t557 * t255 + t559 * t256;
t223 = t559 * t255 + t557 * t256;
t222 = t564 * t254 - t609;
t221 = t561 * t254 + t603;
t220 = -pkin(2) * t236 - pkin(3) * t273 - pkin(4) * t314;
t219 = -pkin(5) * t276 + t565 * t245 - t562 * t257;
t218 = -qJ(3) * t278 - t556 * t244 + t558 * t250;
t217 = -t557 * t229 + t559 * t230;
t216 = t559 * t229 + t557 * t230;
t215 = -pkin(1) * t280 + pkin(5) * t277 + t562 * t245 + t565 * t257;
t214 = -qJ(3) * t268 - t556 * t239 + t558 * t246;
t213 = -pkin(6) * t273 - t561 * t235 + t564 * t243;
t212 = -pkin(3) * t400 + pkin(6) * t275 + t564 * t235 + t561 * t243;
t211 = -t556 * t221 + t558 * t222;
t210 = t558 * t221 + t556 * t222;
t209 = -pkin(6) * t221 - pkin(7) * t603 - t561 * t249;
t208 = t565 * t211 + t562 * t376;
t207 = t562 * t211 - t565 * t376;
t206 = -pkin(3) * t376 + pkin(6) * t222 - pkin(7) * t609 + t564 * t249;
t205 = -pkin(5) * t262 + t565 * t218 - t562 * t231;
t204 = -pkin(1) * t278 + pkin(5) * t263 + t562 * t218 + t565 * t231;
t203 = -pkin(5) * t255 + t565 * t214 - t562 * t225;
t202 = -pkin(2) * t210 - pkin(3) * t221 - pkin(4) * t253;
t201 = -pkin(1) * t268 + pkin(5) * t256 + t562 * t214 + t565 * t225;
t200 = -t557 * t207 + t559 * t208;
t199 = t559 * t207 + t557 * t208;
t198 = -qJ(3) * t236 - t556 * t212 + t558 * t213;
t197 = -qJ(3) * t210 - t556 * t206 + t558 * t209;
t196 = -pkin(5) * t229 + t565 * t198 - t562 * t220;
t195 = -pkin(1) * t236 + pkin(5) * t230 + t562 * t198 + t565 * t220;
t194 = -pkin(5) * t207 + t565 * t197 - t562 * t202;
t193 = -pkin(1) * t210 + pkin(5) * t208 + t562 * t197 + t565 * t202;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t492, 0, 0, 0, 0, 0, 0, -t631, -t488, 0, t392, 0, 0, 0, 0, 0, 0, -t637, t446, t427, t319, 0, 0, 0, 0, 0, 0, t294, t306, t292, t241, 0, 0, 0, 0, 0, 0, t224, t228, t217, t200; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t491, 0, 0, 0, 0, 0, 0, t488, -t631, 0, -t645, 0, 0, 0, 0, 0, 0, t444, t443, t426, t318, 0, 0, 0, 0, 0, 0, t293, t305, t291, t240, 0, 0, 0, 0, 0, 0, t223, t227, t216, t199; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t554, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t554, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t404, 0, 0, 0, 0, 0, 0, t356, t387, t364, t280, 0, 0, 0, 0, 0, 0, t268, t278, t236, t210; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t615, -t612, -t491, -qJ(1) * t491, 0, 0, t488, 0, -t631, 0, t644, t638, t645, pkin(5) * t613 + qJ(1) * t645 - t557 * t425, -t574, -t557 * t484 + t559 * t486, t446, t574, t637, 0, -qJ(1) * t444 - t557 * t395 + t559 * t397, -qJ(1) * t443 - t557 * t396 + t559 * t398, -qJ(1) * t426 - t557 * t374 + t559 * t375, -qJ(1) * t318 - t557 * t284 + t559 * t300, -t557 * t353 + t559 * t355, -t557 * t339 + t559 * t340, -t557 * t369 + t559 * t371, -t557 * t352 + t559 * t354, -t557 * t368 + t559 * t370, -t557 * t406 + t559 * t407, -qJ(1) * t293 - t557 * t242 + t559 * t247, -qJ(1) * t305 - t557 * t248 + t559 * t252, -qJ(1) * t291 - t557 * t226 + t559 * t234, -qJ(1) * t240 - t557 * t215 + t559 * t219, -t557 * t259 + t559 * t261, -t557 * t232 + t559 * t233, -t557 * t264 + t559 * t266, -t557 * t258 + t559 * t260, -t557 * t265 + t559 * t267, -t557 * t297 + t559 * t298, -qJ(1) * t223 - t557 * t201 + t559 * t203, -qJ(1) * t227 - t557 * t204 + t559 * t205, -qJ(1) * t216 - t557 * t195 + t559 * t196, -qJ(1) * t199 - t557 * t193 + t559 * t194; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t612, -t615, t492, qJ(1) * t492, 0, 0, t631, 0, t488, 0, -t638, t644, t392, pkin(5) * t619 + qJ(1) * t392 + t559 * t425, t575, t559 * t484 + t557 * t486, t443, -t575, -t444, 0, -qJ(1) * t637 + t559 * t395 + t557 * t397, qJ(1) * t446 + t559 * t396 + t557 * t398, qJ(1) * t427 + t559 * t374 + t557 * t375, qJ(1) * t319 + t559 * t284 + t557 * t300, t559 * t353 + t557 * t355, t559 * t339 + t557 * t340, t559 * t369 + t557 * t371, t559 * t352 + t557 * t354, t559 * t368 + t557 * t370, t559 * t406 + t557 * t407, qJ(1) * t294 + t559 * t242 + t557 * t247, qJ(1) * t306 + t559 * t248 + t557 * t252, qJ(1) * t292 + t559 * t226 + t557 * t234, qJ(1) * t241 + t559 * t215 + t557 * t219, t559 * t259 + t557 * t261, t559 * t232 + t557 * t233, t559 * t264 + t557 * t266, t559 * t258 + t557 * t260, t559 * t265 + t557 * t267, t559 * t297 + t557 * t298, qJ(1) * t224 + t559 * t201 + t557 * t203, qJ(1) * t228 + t559 * t204 + t557 * t205, qJ(1) * t217 + t559 * t195 + t557 * t196, qJ(1) * t200 + t559 * t193 + t557 * t194; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t582, t536, 0, 0, 0, 0, 0, 0, 0, qJDD(2), pkin(1) * t535 + t577, -pkin(1) * t534 + t599, 0, -pkin(1) * t439, t545, 0.2e1 * t556 * t592, 0, t546, 0, 0, pkin(1) * t497 - qJ(3) * t524 + t558 * t581, pkin(1) * t495 + qJ(3) * t523 - t556 * t581, pkin(1) * t483 + pkin(2) * t531 + qJ(3) * t529 + t405, pkin(1) * t372 - pkin(2) * t474 + qJ(3) * t405, t558 * t445 + t556 * t448, t558 * t420 + t556 * t422, t558 * t432 + t556 * t435, t558 * t441 + t556 * t442, t558 * t431 + t556 * t434, t558 * t460 + t556 * t461, pkin(1) * t337 - pkin(2) * t475 + qJ(3) * t357 + t558 * t347 + t556 * t380, pkin(1) * t345 - pkin(2) * t477 + qJ(3) * t390 + t558 * t367 + t556 * t399, pkin(1) * t333 - pkin(2) * t454 + qJ(3) * t365 + t558 * t296 + t556 * t302, pkin(1) * t276 - pkin(2) * t450 - pkin(6) * t622 + qJ(3) * t281 + t558 * t311, t558 * t308 + t556 * t310, t558 * t272 + t556 * t274, t558 * t325 + t556 * t327, t558 * t307 + t556 * t309, t558 * t326 + t556 * t328, t558 * t341 + t556 * t342, pkin(1) * t255 - pkin(2) * t358 + qJ(3) * t269 + t558 * t239 + t556 * t246, pkin(1) * t262 - pkin(2) * t632 + qJ(3) * t279 + t558 * t244 + t556 * t250, pkin(1) * t229 - pkin(2) * t400 + qJ(3) * t238 + t558 * t212 + t556 * t213, pkin(1) * t207 - pkin(2) * t376 + qJ(3) * t211 + t558 * t206 + t556 * t209;];
tauB_reg = t1;
