% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRRPR7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d3,d5,theta1,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:38
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRRPR7_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPR7_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPR7_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRPR7_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRPR7_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5PRRPR7_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:38:27
% EndTime: 2019-12-05 16:38:30
% DurationCPUTime: 3.59s
% Computational Cost: add. (14456->247), mult. (30418->371), div. (0->0), fcn. (22157->12), ass. (0->207)
t1544 = sin(pkin(9));
t1547 = cos(pkin(9));
t1521 = t1544 * g(1) - t1547 * g(2);
t1540 = -g(3) + qJDD(1);
t1545 = sin(pkin(5));
t1548 = cos(pkin(5));
t1601 = t1521 * t1548 + t1540 * t1545;
t1543 = sin(pkin(10));
t1546 = cos(pkin(10));
t1551 = sin(qJ(3));
t1593 = qJD(2) * t1551;
t1508 = -t1546 * qJD(3) + t1543 * t1593;
t1507 = qJD(5) + t1508;
t1600 = qJD(5) + t1507;
t1510 = t1543 * qJD(3) + t1546 * t1593;
t1550 = sin(qJ(5));
t1553 = cos(qJ(5));
t1554 = cos(qJ(3));
t1592 = qJD(2) * t1554;
t1484 = t1550 * t1510 + t1553 * t1592;
t1599 = t1484 ^ 2;
t1486 = t1553 * t1510 - t1550 * t1592;
t1598 = t1486 ^ 2;
t1597 = t1507 ^ 2;
t1596 = t1508 ^ 2;
t1595 = t1510 ^ 2;
t1594 = -2 * qJD(4);
t1591 = t1486 * t1484;
t1590 = t1510 * t1508;
t1539 = t1554 ^ 2;
t1557 = qJD(2) ^ 2;
t1588 = t1539 * t1557;
t1522 = -t1547 * g(1) - t1544 * g(2);
t1552 = sin(qJ(2));
t1555 = cos(qJ(2));
t1478 = t1555 * t1522 + t1601 * t1552;
t1466 = -t1557 * pkin(2) + qJDD(2) * pkin(7) + t1478;
t1586 = t1551 * t1466;
t1585 = qJD(5) - t1507;
t1494 = -t1545 * t1521 + t1548 * t1540;
t1457 = t1554 * t1466 + t1551 * t1494;
t1532 = qJD(3) * t1593;
t1536 = t1554 * qJDD(2);
t1516 = t1536 - 0.2e1 * t1532;
t1584 = t1536 - t1532;
t1538 = t1551 ^ 2;
t1583 = t1538 + t1539;
t1582 = t1551 * qJDD(2);
t1581 = t1510 * t1592;
t1580 = qJD(3) * t1592;
t1513 = (-pkin(3) * t1554 - qJ(4) * t1551) * qJD(2);
t1556 = qJD(3) ^ 2;
t1443 = -t1556 * pkin(3) + qJDD(3) * qJ(4) + t1513 * t1592 + t1457;
t1575 = t1552 * t1522 - t1601 * t1555;
t1465 = -qJDD(2) * pkin(2) - t1557 * pkin(7) + t1575;
t1515 = t1580 + t1582;
t1558 = (-t1515 - t1580) * qJ(4) - t1516 * pkin(3) + t1465;
t1420 = t1546 * t1443 + t1508 * t1594 + t1543 * t1558;
t1579 = t1543 * t1443 - t1546 * t1558;
t1493 = t1543 * qJDD(3) + t1546 * t1515;
t1578 = -t1550 * t1493 - t1553 * t1584;
t1577 = -t1546 * qJDD(3) + t1543 * t1515;
t1492 = t1554 * t1494;
t1576 = -qJDD(3) * pkin(3) - t1556 * qJ(4) + qJDD(4) - t1492;
t1574 = -qJDD(5) - t1577;
t1482 = t1508 * pkin(4) - t1510 * pkin(8);
t1409 = -pkin(4) * t1588 - t1584 * pkin(8) - t1508 * t1482 + t1420;
t1422 = t1586 - t1493 * pkin(8) + t1577 * pkin(4) + (t1551 * t1513 + (-pkin(4) * t1510 - pkin(8) * t1508) * t1554) * qJD(2) + t1576;
t1390 = -t1550 * t1409 + t1553 * t1422;
t1391 = t1553 * t1409 + t1550 * t1422;
t1382 = -t1550 * t1390 + t1553 * t1391;
t1408 = t1584 * pkin(4) - pkin(8) * t1588 + ((2 * qJD(4)) + t1482) * t1510 + t1579;
t1375 = t1546 * t1382 + t1543 * t1408;
t1381 = t1553 * t1390 + t1550 * t1391;
t1369 = t1554 * t1375 + t1551 * t1381;
t1374 = t1543 * t1382 - t1546 * t1408;
t1573 = t1369 * t1552 - t1374 * t1555;
t1438 = -t1585 * t1486 + t1578;
t1559 = -t1553 * t1493 + t1550 * t1584;
t1440 = t1585 * t1484 + t1559;
t1416 = t1553 * t1438 - t1550 * t1440;
t1455 = -t1598 - t1599;
t1407 = t1546 * t1416 + t1543 * t1455;
t1415 = t1550 * t1438 + t1553 * t1440;
t1387 = t1554 * t1407 + t1551 * t1415;
t1406 = t1543 * t1416 - t1546 * t1455;
t1572 = t1387 * t1552 - t1406 * t1555;
t1419 = t1510 * t1594 - t1579;
t1393 = -t1543 * t1419 + t1546 * t1420;
t1442 = (qJD(2) * t1513 + t1466) * t1551 + t1576;
t1389 = t1554 * t1393 + t1551 * t1442;
t1392 = t1546 * t1419 + t1543 * t1420;
t1571 = t1389 * t1552 - t1392 * t1555;
t1458 = -t1574 - t1591;
t1462 = -t1597 - t1599;
t1426 = -t1550 * t1458 + t1553 * t1462;
t1437 = t1600 * t1486 - t1578;
t1411 = t1546 * t1426 + t1543 * t1437;
t1425 = t1553 * t1458 + t1550 * t1462;
t1395 = t1554 * t1411 + t1551 * t1425;
t1410 = t1543 * t1426 - t1546 * t1437;
t1570 = t1395 * t1552 - t1410 * t1555;
t1459 = t1574 - t1591;
t1463 = -t1597 - t1598;
t1428 = t1553 * t1459 - t1550 * t1463;
t1439 = -t1600 * t1484 - t1559;
t1413 = t1546 * t1428 + t1543 * t1439;
t1427 = t1550 * t1459 + t1553 * t1463;
t1397 = t1554 * t1413 + t1551 * t1427;
t1412 = t1543 * t1428 - t1546 * t1439;
t1569 = t1397 * t1552 - t1412 * t1555;
t1456 = t1492 - t1586;
t1424 = -t1551 * t1456 + t1554 * t1457;
t1568 = t1424 * t1552 - t1465 * t1555;
t1472 = -t1577 - t1581;
t1496 = t1508 * t1592;
t1474 = -t1493 + t1496;
t1447 = t1546 * t1472 - t1543 * t1474;
t1469 = -t1595 - t1596;
t1430 = t1554 * t1447 + t1551 * t1469;
t1446 = t1543 * t1472 + t1546 * t1474;
t1567 = t1430 * t1552 - t1446 * t1555;
t1477 = -t1584 - t1590;
t1481 = -t1588 - t1596;
t1450 = -t1543 * t1477 + t1546 * t1481;
t1471 = t1577 - t1581;
t1432 = t1554 * t1450 + t1551 * t1471;
t1449 = t1546 * t1477 + t1543 * t1481;
t1566 = t1432 * t1552 - t1449 * t1555;
t1476 = t1584 - t1590;
t1495 = -t1588 - t1595;
t1461 = t1546 * t1476 - t1543 * t1495;
t1473 = t1493 + t1496;
t1436 = t1554 * t1461 + t1551 * t1473;
t1460 = t1543 * t1476 + t1546 * t1495;
t1565 = t1436 * t1552 - t1460 * t1555;
t1564 = t1478 * t1552 - t1555 * t1575;
t1530 = t1551 * t1557 * t1554;
t1523 = qJDD(3) + t1530;
t1528 = -t1556 - t1588;
t1489 = -t1551 * t1523 + t1554 * t1528;
t1563 = t1489 * t1552 + t1516 * t1555;
t1524 = -qJDD(3) + t1530;
t1527 = -t1538 * t1557 - t1556;
t1490 = t1554 * t1524 - t1551 * t1527;
t1514 = 0.2e1 * t1580 + t1582;
t1562 = t1490 * t1552 - t1514 * t1555;
t1517 = t1583 * qJDD(2);
t1520 = t1583 * t1557;
t1561 = t1517 * t1552 + t1520 * t1555;
t1560 = t1555 * qJDD(2) - t1552 * t1557;
t1519 = -t1552 * qJDD(2) - t1555 * t1557;
t1501 = t1560 * t1548;
t1500 = t1519 * t1548;
t1499 = t1560 * t1545;
t1498 = t1519 * t1545;
t1488 = t1551 * t1524 + t1554 * t1527;
t1487 = t1554 * t1523 + t1551 * t1528;
t1483 = t1555 * t1517 - t1552 * t1520;
t1480 = t1561 * t1548;
t1479 = t1561 * t1545;
t1468 = t1555 * t1490 + t1552 * t1514;
t1467 = t1555 * t1489 - t1552 * t1516;
t1454 = -t1545 * t1488 + t1562 * t1548;
t1453 = -t1545 * t1487 + t1563 * t1548;
t1452 = t1548 * t1488 + t1562 * t1545;
t1451 = t1548 * t1487 + t1563 * t1545;
t1448 = t1555 * t1478 + t1552 * t1575;
t1435 = t1551 * t1461 - t1554 * t1473;
t1434 = -t1545 * t1494 + t1564 * t1548;
t1433 = t1548 * t1494 + t1564 * t1545;
t1431 = t1551 * t1450 - t1554 * t1471;
t1429 = t1551 * t1447 - t1554 * t1469;
t1423 = t1554 * t1456 + t1551 * t1457;
t1421 = t1555 * t1436 + t1552 * t1460;
t1418 = t1555 * t1424 + t1552 * t1465;
t1417 = t1555 * t1432 + t1552 * t1449;
t1414 = t1555 * t1430 + t1552 * t1446;
t1405 = -t1545 * t1435 + t1565 * t1548;
t1404 = t1548 * t1435 + t1565 * t1545;
t1403 = -t1545 * t1431 + t1566 * t1548;
t1402 = t1548 * t1431 + t1566 * t1545;
t1401 = -t1545 * t1423 + t1568 * t1548;
t1400 = t1548 * t1423 + t1568 * t1545;
t1399 = -t1545 * t1429 + t1567 * t1548;
t1398 = t1548 * t1429 + t1567 * t1545;
t1396 = t1551 * t1413 - t1554 * t1427;
t1394 = t1551 * t1411 - t1554 * t1425;
t1388 = t1551 * t1393 - t1554 * t1442;
t1386 = t1551 * t1407 - t1554 * t1415;
t1385 = t1555 * t1397 + t1552 * t1412;
t1384 = t1555 * t1395 + t1552 * t1410;
t1383 = t1555 * t1387 + t1552 * t1406;
t1380 = t1555 * t1389 + t1552 * t1392;
t1379 = -t1545 * t1396 + t1569 * t1548;
t1378 = t1548 * t1396 + t1569 * t1545;
t1377 = -t1545 * t1394 + t1570 * t1548;
t1376 = t1548 * t1394 + t1570 * t1545;
t1373 = -t1545 * t1386 + t1572 * t1548;
t1372 = t1548 * t1386 + t1572 * t1545;
t1371 = -t1545 * t1388 + t1571 * t1548;
t1370 = t1548 * t1388 + t1571 * t1545;
t1368 = t1551 * t1375 - t1554 * t1381;
t1367 = t1555 * t1369 + t1552 * t1374;
t1366 = -t1545 * t1368 + t1573 * t1548;
t1365 = t1548 * t1368 + t1573 * t1545;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1544 * t1521 + t1547 * t1522, 0, 0, 0, 0, 0, 0, -t1544 * t1501 + t1547 * t1519, -t1544 * t1500 - t1547 * t1560, 0, -t1544 * t1434 + t1547 * t1448, 0, 0, 0, 0, 0, 0, -t1544 * t1453 + t1547 * t1467, -t1544 * t1454 + t1547 * t1468, -t1544 * t1480 + t1547 * t1483, -t1544 * t1401 + t1547 * t1418, 0, 0, 0, 0, 0, 0, -t1544 * t1403 + t1547 * t1417, -t1544 * t1405 + t1547 * t1421, -t1544 * t1399 + t1547 * t1414, -t1544 * t1371 + t1547 * t1380, 0, 0, 0, 0, 0, 0, -t1544 * t1377 + t1547 * t1384, -t1544 * t1379 + t1547 * t1385, -t1544 * t1373 + t1547 * t1383, -t1544 * t1366 + t1547 * t1367; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1547 * t1521 + t1544 * t1522, 0, 0, 0, 0, 0, 0, t1547 * t1501 + t1544 * t1519, t1547 * t1500 - t1544 * t1560, 0, t1547 * t1434 + t1544 * t1448, 0, 0, 0, 0, 0, 0, t1547 * t1453 + t1544 * t1467, t1547 * t1454 + t1544 * t1468, t1547 * t1480 + t1544 * t1483, t1547 * t1401 + t1544 * t1418, 0, 0, 0, 0, 0, 0, t1547 * t1403 + t1544 * t1417, t1547 * t1405 + t1544 * t1421, t1547 * t1399 + t1544 * t1414, t1547 * t1371 + t1544 * t1380, 0, 0, 0, 0, 0, 0, t1547 * t1377 + t1544 * t1384, t1547 * t1379 + t1544 * t1385, t1547 * t1373 + t1544 * t1383, t1547 * t1366 + t1544 * t1367; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1540, 0, 0, 0, 0, 0, 0, t1499, t1498, 0, t1433, 0, 0, 0, 0, 0, 0, t1451, t1452, t1479, t1400, 0, 0, 0, 0, 0, 0, t1402, t1404, t1398, t1370, 0, 0, 0, 0, 0, 0, t1376, t1378, t1372, t1365; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1522, 0, 0, 0, 0, 0, 0, t1519, -t1560, 0, t1448, 0, 0, 0, 0, 0, 0, t1467, t1468, t1483, t1418, 0, 0, 0, 0, 0, 0, t1417, t1421, t1414, t1380, 0, 0, 0, 0, 0, 0, t1384, t1385, t1383, t1367; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1521, 0, 0, 0, 0, 0, 0, t1501, t1500, 0, t1434, 0, 0, 0, 0, 0, 0, t1453, t1454, t1480, t1401, 0, 0, 0, 0, 0, 0, t1403, t1405, t1399, t1371, 0, 0, 0, 0, 0, 0, t1377, t1379, t1373, t1366; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1540, 0, 0, 0, 0, 0, 0, t1499, t1498, 0, t1433, 0, 0, 0, 0, 0, 0, t1451, t1452, t1479, t1400, 0, 0, 0, 0, 0, 0, t1402, t1404, t1398, t1370, 0, 0, 0, 0, 0, 0, t1376, t1378, t1372, t1365; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1557, -qJDD(2), 0, t1478, 0, 0, 0, 0, 0, 0, t1489, t1490, t1517, t1424, 0, 0, 0, 0, 0, 0, t1432, t1436, t1430, t1389, 0, 0, 0, 0, 0, 0, t1395, t1397, t1387, t1369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1557, 0, -t1575, 0, 0, 0, 0, 0, 0, t1516, -t1514, t1520, -t1465, 0, 0, 0, 0, 0, 0, -t1449, -t1460, -t1446, -t1392, 0, 0, 0, 0, 0, 0, -t1410, -t1412, -t1406, -t1374; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1494, 0, 0, 0, 0, 0, 0, t1487, t1488, 0, t1423, 0, 0, 0, 0, 0, 0, t1431, t1435, t1429, t1388, 0, 0, 0, 0, 0, 0, t1394, t1396, t1386, t1368; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1528, t1524, t1536, t1457, 0, 0, 0, 0, 0, 0, t1450, t1461, t1447, t1393, 0, 0, 0, 0, 0, 0, t1411, t1413, t1407, t1375; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1523, t1527, -t1582, t1456, 0, 0, 0, 0, 0, 0, -t1471, -t1473, -t1469, -t1442, 0, 0, 0, 0, 0, 0, -t1425, -t1427, -t1415, -t1381; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1516, t1514, -t1520, t1465, 0, 0, 0, 0, 0, 0, t1449, t1460, t1446, t1392, 0, 0, 0, 0, 0, 0, t1410, t1412, t1406, t1374; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1481, t1476, t1472, t1420, 0, 0, 0, 0, 0, 0, t1426, t1428, t1416, t1382; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1477, t1495, t1474, t1419, 0, 0, 0, 0, 0, 0, -t1437, -t1439, -t1455, -t1408; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1471, t1473, t1469, t1442, 0, 0, 0, 0, 0, 0, t1425, t1427, t1415, t1381; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1462, t1459, t1438, t1391; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1458, t1463, t1440, t1390; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1437, t1439, t1455, t1408;];
f_new_reg = t1;
