% Calculate minimal parameter regressor of coriolis matrix for
% S5PRRPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d3,d5,theta1,theta4]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x22]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:38
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PRRPR7_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPR7_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPR7_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5PRRPR7_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:37:38
% EndTime: 2019-12-05 16:37:51
% DurationCPUTime: 4.18s
% Computational Cost: add. (2251->363), mult. (6235->631), div. (0->0), fcn. (6656->10), ass. (0->280)
t213 = sin(pkin(10));
t381 = -t213 / 0.2e1;
t215 = cos(pkin(10));
t378 = t215 / 0.2e1;
t214 = sin(pkin(5));
t221 = cos(qJ(2));
t350 = t214 * t221;
t307 = t213 * t350;
t217 = sin(qJ(3));
t369 = cos(pkin(5));
t273 = t369 * t217;
t220 = cos(qJ(3));
t218 = sin(qJ(2));
t351 = t214 * t218;
t308 = t220 * t351;
t164 = t273 + t308;
t359 = t164 * t215;
t112 = -t307 + t359;
t353 = t213 * t217;
t313 = pkin(7) * t353;
t195 = t217 * pkin(3) - t220 * qJ(4);
t349 = t215 * t195;
t153 = t313 + t349;
t180 = t213 * t195;
t347 = t215 * t217;
t154 = -pkin(7) * t347 + t180;
t163 = t217 * t351 - t369 * t220;
t346 = t215 * t221;
t306 = t214 * t346;
t360 = t164 * t213;
t111 = t306 + t360;
t387 = t111 / 0.2e1;
t268 = -t220 * pkin(3) - t217 * qJ(4);
t186 = -pkin(2) + t268;
t352 = t213 * t220;
t204 = pkin(7) * t352;
t147 = t215 * t186 - t204;
t370 = t220 * pkin(7);
t205 = t215 * t370;
t148 = t213 * t186 + t205;
t243 = t147 * t381 + t148 * t378;
t310 = t370 / 0.2e1;
t46 = t310 - t243;
t389 = -t112 * t154 / 0.2e1 + t153 * t387 - t46 * t163;
t219 = cos(qJ(5));
t338 = t219 * t220;
t216 = sin(qJ(5));
t343 = t216 * t217;
t165 = t215 * t343 + t338;
t386 = -t165 / 0.2e1;
t385 = t165 / 0.2e1;
t208 = t219 * t217;
t342 = t216 * t220;
t168 = t215 * t208 - t342;
t384 = -t168 / 0.2e1;
t383 = t168 / 0.2e1;
t382 = t208 / 0.2e1;
t380 = t213 / 0.2e1;
t379 = -t215 / 0.2e1;
t377 = -t216 / 0.2e1;
t376 = -t217 / 0.2e1;
t375 = t217 / 0.2e1;
t374 = -t219 / 0.2e1;
t373 = t219 / 0.2e1;
t372 = -t220 / 0.2e1;
t371 = t164 * pkin(7);
t368 = t111 * t213;
t367 = t112 * t215;
t146 = (t213 * t218 + t220 * t346) * t214;
t366 = t146 * t216;
t365 = t146 * t219;
t362 = t163 * t216;
t361 = t163 * t219;
t358 = t164 * t216;
t357 = t164 * t219;
t21 = (t164 - t367 - t368) * t163;
t356 = t21 * qJD(1);
t210 = t213 ^ 2;
t355 = t210 * t216;
t354 = t210 * t219;
t348 = t215 * t216;
t126 = t180 + (-pkin(7) * t215 + pkin(8)) * t217;
t345 = t216 * t126;
t251 = pkin(4) * t213 - pkin(8) * t215 + pkin(7);
t161 = t251 * t220;
t344 = t216 * t161;
t341 = t219 * qJ(4);
t340 = t219 * t126;
t339 = t219 * t161;
t145 = -t215 * t351 + t220 * t307;
t305 = t217 * t350;
t22 = t111 * t145 + t112 * t146 + t163 * t305;
t337 = t22 * qJD(1);
t167 = t215 * t342 - t208;
t169 = t215 * t338 + t343;
t39 = -t169 * t165 - t168 * t167;
t336 = t39 * qJD(2);
t275 = -t338 / 0.2e1;
t70 = (-t210 / 0.2e1 - 0.1e1 / 0.2e1) * t343 + (t385 + t275) * t215;
t335 = t70 * qJD(2);
t277 = -t342 / 0.2e1;
t71 = t382 + t210 * t382 + (t277 + t384) * t215;
t334 = t71 * qJD(2);
t74 = (-t165 * t220 - t167 * t217) * t213;
t333 = t74 * qJD(2);
t75 = (t168 * t220 + t169 * t217) * t213;
t332 = t75 * qJD(2);
t198 = t215 ^ 2 + t210;
t331 = qJD(2) * t168;
t330 = qJD(2) * t217;
t329 = qJD(2) * t218;
t328 = qJD(2) * t220;
t327 = qJD(3) * t213;
t326 = qJD(3) * t215;
t325 = qJD(4) * t215;
t324 = qJD(4) * t220;
t323 = qJD(5) * t215;
t212 = t217 ^ 2;
t105 = t165 * t347 + t212 * t355;
t322 = t105 * qJD(2);
t106 = t168 * t347 + t212 * t354;
t321 = t106 * qJD(2);
t320 = t164 * qJD(3);
t172 = t198 * t212;
t319 = t172 * qJD(2);
t318 = t198 * qJD(3);
t201 = t220 ^ 2 - t212;
t317 = t201 * qJD(2);
t316 = t213 * qJD(5);
t315 = t217 * qJD(3);
t314 = t220 * qJD(3);
t312 = pkin(2) * t330;
t311 = pkin(2) * t328;
t309 = t216 * t354;
t304 = t213 * t330;
t303 = qJD(4) * t353;
t302 = t217 * t324;
t301 = t217 * t316;
t300 = t216 * t323;
t299 = t219 * t323;
t298 = t210 * t330;
t297 = t213 * t326;
t296 = qJD(2) * t350;
t295 = t217 * t314;
t294 = t217 * t328;
t293 = t111 * t386;
t292 = t167 * t387;
t291 = t111 * t383;
t290 = t169 * t387;
t289 = -t368 / 0.2e1;
t288 = t145 * t380;
t287 = t362 / 0.2e1;
t286 = t361 / 0.2e1;
t285 = -t353 / 0.2e1;
t284 = t353 / 0.2e1;
t283 = t213 * t373;
t282 = t352 / 0.2e1;
t281 = -t350 / 0.2e1;
t280 = t350 / 0.2e1;
t279 = t347 / 0.2e1;
t278 = -t343 / 0.2e1;
t276 = -t208 / 0.2e1;
t274 = t338 / 0.2e1;
t272 = t198 * t163;
t271 = t217 * t281;
t270 = t217 * t280;
t269 = t164 / 0.2e1 + t289;
t53 = t112 * t216 - t361;
t86 = t163 * t348 + t357;
t226 = t163 * t386 + t53 * t372 + t86 * t375;
t237 = t219 * t305 - t366;
t229 = t237 * t215;
t3 = t292 + t229 / 0.2e1 + (t145 * t377 + t226) * t213;
t123 = t220 * pkin(4) - t147;
t125 = -t349 + (-pkin(7) * t213 - pkin(4)) * t217;
t124 = -t220 * pkin(8) + t148;
t238 = t251 * t217;
t55 = t216 * t124 - t219 * t238;
t59 = t339 - t345;
t7 = t123 * t167 + t125 * t165 + (t217 * t59 - t220 * t55) * t213;
t267 = t3 * qJD(1) + t7 * qJD(2);
t54 = t112 * t219 + t362;
t87 = -t215 * t361 + t358;
t225 = t163 * t384 + t54 * t372 + t87 * t376;
t236 = t216 * t305 + t365;
t228 = t236 * t215;
t6 = t290 - t228 / 0.2e1 + (t145 * t374 + t225) * t213;
t56 = t219 * t124 + t216 * t238;
t60 = t340 + t344;
t8 = -t123 * t169 - t125 * t168 + (t217 * t60 + t220 * t56) * t213;
t266 = t6 * qJD(1) - t8 * qJD(2);
t265 = -qJD(5) - t304;
t244 = t146 * t378 + t288;
t232 = t244 * qJ(4);
t1 = (pkin(3) * t281 - t371 / 0.2e1) * t217 + t232 + t389;
t32 = t217 * pkin(7) ^ 2 * t220 + t147 * t153 + t148 * t154;
t264 = -t1 * qJD(1) + t32 * qJD(2);
t13 = t293 + t365 / 0.2e1 + (t216 * t280 + t53 * t380) * t217;
t30 = t123 * t165 - t55 * t353;
t263 = t13 * qJD(1) - t30 * qJD(2);
t15 = t291 + t366 / 0.2e1 + (t219 * t281 + t54 * t381) * t217;
t31 = t123 * t168 - t56 * t353;
t262 = t15 * qJD(1) + t31 * qJD(2);
t24 = (t220 * t387 - t146 / 0.2e1) * t215 + (t112 * t372 - t145 / 0.2e1) * t213;
t29 = (t147 * t220 + t153 * t217) * t215 + (t148 * t220 + t154 * t217) * t213;
t261 = -t24 * qJD(1) + t29 * qJD(2);
t25 = (t213 * t280 + t112 / 0.2e1 - t359 / 0.2e1) * t217;
t45 = t154 * t220 + (-t148 + 0.2e1 * t205) * t217;
t260 = t25 * qJD(1) - t45 * qJD(2);
t26 = (t215 * t281 + t387 - t360 / 0.2e1) * t217;
t44 = -t147 * t217 + (t153 - 0.2e1 * t313) * t220;
t259 = t26 * qJD(1) + t44 * qJD(2);
t245 = t111 * t378 + t112 * t381;
t35 = (t280 - t245) * t217;
t52 = (t147 * t215 + t148 * t213) * t217;
t258 = t35 * qJD(1) + t52 * qJD(2);
t38 = (-t165 * t216 + t168 * t219) * t213;
t63 = t165 ^ 2 - t168 ^ 2;
t257 = t63 * qJD(2) - t38 * qJD(3);
t256 = -t153 * t213 + t154 * t215;
t173 = (t216 ^ 2 - t219 ^ 2) * t210;
t255 = t38 * qJD(2) - t173 * qJD(3);
t174 = t198 * t216;
t249 = t215 * t278 + t385;
t77 = (t275 + t249) * t213;
t254 = t77 * qJD(2) + t174 * qJD(3);
t175 = t198 * t219;
t248 = t215 * t276 + t383;
t78 = (t342 / 0.2e1 + t248) * t213;
t253 = t78 * qJD(2) + t175 * qJD(3);
t252 = -t215 * pkin(4) - t213 * pkin(8) - pkin(3);
t250 = t213 * (-qJD(5) + t326);
t247 = t368 / 0.2e1 + t367 / 0.2e1;
t242 = -t345 / 0.2e1 + t339 / 0.2e1;
t241 = -t344 / 0.2e1 - t340 / 0.2e1;
t73 = (t165 * t374 + t168 * t377) * t213;
t240 = -t73 * qJD(3) + t165 * t331;
t239 = t304 - t326;
t235 = -t73 * qJD(2) + qJD(3) * t309;
t234 = -qJD(5) - t239;
t143 = qJ(4) * t348 - t219 * t252;
t101 = -qJ(4) * t355 - t143 * t215;
t18 = -t269 * t216 + (t286 + t53 / 0.2e1) * t215;
t223 = (qJ(4) * t386 + t123 * t377 + t143 * t375) * t213 + t55 * t379;
t9 = t223 - t241;
t233 = -t18 * qJD(1) + t9 * qJD(2) + t101 * qJD(3);
t144 = t215 * t341 + t216 * t252;
t102 = -t144 * t215 - t210 * t341;
t222 = (qJ(4) * t383 + t123 * t373 + t144 * t376) * t213 + t56 * t378;
t11 = t222 - t242;
t17 = t269 * t219 + (t287 - t54 / 0.2e1) * t215;
t231 = -t17 * qJD(1) + t11 * qJD(2) - t102 * qJD(3);
t184 = t198 * qJ(4);
t227 = t273 / 0.2e1 + t308 / 0.2e1;
t33 = t227 - t247;
t230 = t33 * qJD(1) + t46 * qJD(2) - t184 * qJD(3);
t224 = t268 * qJD(3) + t324;
t197 = qJD(3) * t282;
t79 = (t248 + t277) * t213;
t76 = (t249 + t274) * t213;
t72 = t168 * t378 + t210 * t276 + t215 * t277 + t382;
t69 = t210 * t278 + t165 * t378 + t215 * t274 + t343 / 0.2e1;
t64 = t73 * qJD(5);
t47 = t310 + t243;
t37 = t38 * qJD(5);
t36 = t111 * t279 + t112 * t285 + t270;
t34 = t227 + t247;
t28 = t112 * t376 + t164 * t279 + t213 * t270;
t27 = t111 * t376 + t164 * t284 + t215 * t271;
t23 = t245 * t220 + t244;
t20 = t54 * t378 + t111 * t283 + t215 * t287 + t357 / 0.2e1;
t19 = t53 * t379 + t216 * t289 + t215 * t286 - t358 / 0.2e1;
t16 = t54 * t285 + t291 - t366 / 0.2e1 + t219 * t270;
t14 = t53 * t284 + t293 - t365 / 0.2e1 + t216 * t271;
t12 = t222 + t242;
t10 = t223 + t241;
t5 = t290 + t228 / 0.2e1 + t145 * t283 + t225 * t213;
t4 = t292 - t229 / 0.2e1 + t216 * t288 + t226 * t213;
t2 = pkin(3) * t271 + t371 * t375 + t232 - t389;
t40 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22 * qJD(2) + t21 * qJD(3), 0, 0, 0, 0, 0, 0, 0; 0, 0, -t214 * t329, -t296, 0, 0, 0, 0, 0, (-t218 * t328 - t221 * t315) * t214, (t217 * t329 - t221 * t314) * t214, (t145 * t220 + t212 * t307) * qJD(2) + t27 * qJD(3), (t146 * t220 + t212 * t306) * qJD(2) + t28 * qJD(3), t23 * qJD(3) + (t145 * t215 - t146 * t213) * t330, t337 + (pkin(7) * t212 * t350 - t145 * t147 + t146 * t148) * qJD(2) + t2 * qJD(3) + t36 * qJD(4), 0, 0, 0, 0, 0, (t145 * t165 + t237 * t353) * qJD(2) + t4 * qJD(3) + t16 * qJD(5), (t145 * t168 - t236 * t353) * qJD(2) + t5 * qJD(3) + t14 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, -t217 * t296 - t320, t163 * qJD(3) - t220 * t296, t27 * qJD(2) - t215 * t320, t28 * qJD(2) + t213 * t320, t23 * qJD(2) - qJD(3) * t272, t356 + t2 * qJD(2) + (-t164 * pkin(3) - qJ(4) * t272) * qJD(3) + t34 * qJD(4), 0, 0, 0, 0, 0, t4 * qJD(2) + (-t163 * t355 - t86 * t215) * qJD(3) + t20 * qJD(5), t5 * qJD(2) + (-t163 * t354 + t87 * t215) * qJD(3) + t19 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36 * qJD(2) + t34 * qJD(3), 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16 * qJD(2) + t20 * qJD(3) - t54 * qJD(5), t14 * qJD(2) + t19 * qJD(3) + t53 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t26 * qJD(3), -t25 * qJD(3), t24 * qJD(3), -t1 * qJD(3) - t35 * qJD(4) - t337, 0, 0, 0, 0, 0, t3 * qJD(3) + t15 * qJD(5), t6 * qJD(3) + t13 * qJD(5); 0, 0, 0, 0, t295, t201 * qJD(3), 0, 0, 0, -pkin(2) * t315, -pkin(2) * t314, -t44 * qJD(3) + t215 * t302, t45 * qJD(3) - t213 * t302, -t29 * qJD(3) + t172 * qJD(4), t32 * qJD(3) - t52 * qJD(4), (qJD(3) * t169 - t165 * qJD(5)) * t168, t39 * qJD(3) + t63 * qJD(5), t75 * qJD(3) - t165 * t301, t74 * qJD(3) - t168 * t301, t210 * t295, t7 * qJD(3) + t105 * qJD(4) + t31 * qJD(5), -t8 * qJD(3) + t106 * qJD(4) - t30 * qJD(5); 0, 0, 0, 0, t294, t317, t314, -t315, 0, -pkin(7) * t314 - t312, pkin(7) * t315 - t311, -t205 * qJD(3) + t213 * t224 - t259, t204 * qJD(3) + t215 * t224 - t260, qJD(3) * t256 - t261, (-pkin(3) * t370 + qJ(4) * t256) * qJD(3) + t47 * qJD(4) + t264, t64 + (t219 * t327 + t331) * t169, t336 - t37 + (-t167 * t219 - t169 * t216) * t327, t332 + (-t169 * t215 + t210 * t338) * qJD(3) + t69 * qJD(5), t333 + (t167 * t215 - t210 * t342) * qJD(3) + t72 * qJD(5), (t298 + (-t326 + qJD(5) / 0.2e1) * t213) * t220, -t59 * t326 + t76 * qJD(4) + t12 * qJD(5) + (qJ(4) * t167 + t125 * t216 - t143 * t220) * t327 + t267, t60 * t326 + t79 * qJD(4) + t10 * qJD(5) + (qJ(4) * t169 + t125 * t219 - t144 * t220) * t327 + t266; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (t215 * t330 + t327) * t220, -t239 * t220, t319, t47 * qJD(3) - t258, 0, 0, 0, 0, 0, t76 * qJD(3) + t322, t79 * qJD(3) + t321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t240, t257, t69 * qJD(3) + t165 * t265, t72 * qJD(3) + t168 * t265, t197, t12 * qJD(3) - t56 * qJD(5) + t262, t10 * qJD(3) + t55 * qJD(5) + t263; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t26 * qJD(2), t25 * qJD(2), -t24 * qJD(2), t1 * qJD(2) - t33 * qJD(4) - t356, 0, 0, 0, 0, 0, -t3 * qJD(2) - t17 * qJD(5), -t6 * qJD(2) - t18 * qJD(5); 0, 0, 0, 0, -t294, -t317, 0, 0, 0, t312, t311, t259, t260, t261, -t46 * qJD(4) - t264, -t169 * t331 + t64, -t37 - t336, t70 * qJD(5) - t332, -t71 * qJD(5) - t333, (-t298 - t316 / 0.2e1) * t220, t77 * qJD(4) + t11 * qJD(5) - t267, t78 * qJD(4) + t9 * qJD(5) - t266; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t198 * qJD(4), t184 * qJD(4), -qJD(5) * t309, t173 * qJD(5), t213 * t300, t213 * t299, 0, t174 * qJD(4) - t102 * qJD(5), t175 * qJD(4) + t101 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t318, -t230, 0, 0, 0, 0, 0, t254, t253; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t235, -t255, t216 * t250 + t335, t219 * t250 - t334, t328 * t381, -t144 * qJD(5) + t231, t143 * qJD(5) + t233; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35 * qJD(2) + t33 * qJD(3), 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t215 * t294, t213 * t294, -t319, t46 * qJD(3) + t258, 0, 0, 0, 0, 0, -t77 * qJD(3) - t216 * t301 - t322, -t78 * qJD(3) - t219 * t301 - t321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t318, t230, 0, 0, 0, 0, 0, -t254 + t300, -t253 + t299; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t234 * t216, t234 * t219; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t15 * qJD(2) + t17 * qJD(3), -t13 * qJD(2) + t18 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t240, -t257, -t70 * qJD(3) + t165 * t304, t71 * qJD(3) + t168 * t304, t197, -t11 * qJD(3) + t216 * t303 - t262, -t9 * qJD(3) + t219 * t303 - t263; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t235, t255, -t216 * t297 - t335, -t219 * t297 + t334, qJD(2) * t282, -t216 * t325 - t231, -t219 * t325 - t233; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t239 * t216, t239 * t219; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t40;
