% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRRPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d3,d5,theta1,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:38
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRRPR7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPR7_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPR7_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRPR7_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRPR7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5PRRPR7_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:37:45
% EndTime: 2019-12-05 16:38:08
% DurationCPUTime: 16.36s
% Computational Cost: add. (63521->708), mult. (133247->1152), div. (0->0), fcn. (96301->12), ass. (0->512)
t663 = sin(qJ(5));
t656 = sin(pkin(10));
t659 = cos(pkin(10));
t664 = sin(qJ(3));
t743 = qJD(2) * t664;
t615 = t656 * qJD(3) + t659 * t743;
t666 = cos(qJ(5));
t667 = cos(qJ(3));
t742 = qJD(2) * t667;
t570 = t663 * t615 + t666 * t742;
t572 = t666 * t615 - t663 * t742;
t521 = t572 * t570;
t740 = qJD(2) * qJD(3);
t729 = t667 * t740;
t738 = t664 * qJDD(2);
t622 = t729 + t738;
t745 = -t659 * qJDD(3) + t656 * t622;
t586 = -qJDD(5) - t745;
t774 = -t521 - t586;
t781 = t663 * t774;
t780 = t666 * t774;
t658 = sin(pkin(5));
t661 = cos(pkin(5));
t657 = sin(pkin(9));
t660 = cos(pkin(9));
t728 = t657 * g(1) - t660 * g(2);
t746 = g(3) - qJDD(1);
t779 = -t658 * t746 + t661 * t728;
t643 = t664 * t740;
t736 = t667 * qJDD(2);
t623 = -t643 + t736;
t613 = -t659 * qJD(3) + t656 * t743;
t766 = t615 * t613;
t685 = -t623 - t766;
t778 = t656 * t685;
t777 = t657 * t746;
t776 = t659 * t685;
t775 = t660 * t746;
t591 = t656 * qJDD(3) + t659 * t622;
t507 = -t570 * qJD(5) + t666 * t591 - t663 * t623;
t610 = qJD(5) + t613;
t537 = t610 * t570;
t457 = -t537 + t507;
t725 = t663 * t591 + t666 * t623;
t454 = (qJD(5) - t610) * t572 + t725;
t630 = t660 * g(1) + t657 * g(2);
t566 = -t660 * t630 - t657 * t728;
t565 = -t657 * t630 + t660 * t728;
t568 = t570 ^ 2;
t569 = t572 ^ 2;
t605 = t610 ^ 2;
t611 = t613 ^ 2;
t612 = t615 ^ 2;
t773 = 2 * qJD(4);
t772 = pkin(3) * t664;
t771 = pkin(3) * t667;
t770 = pkin(4) * t656;
t665 = sin(qJ(2));
t668 = cos(qJ(2));
t543 = -t665 * t630 - t779 * t668;
t547 = -t668 * t630 + t779 * t665;
t480 = t665 * t543 + t668 * t547;
t769 = pkin(6) * t480;
t768 = t610 * t663;
t767 = t610 * t666;
t652 = t664 ^ 2;
t670 = qJD(2) ^ 2;
t765 = t652 * t670;
t653 = t667 ^ 2;
t649 = t653 * t670;
t529 = -t670 * pkin(2) + qJDD(2) * pkin(7) + t547;
t720 = -qJ(4) * t664 - t771;
t620 = t720 * qJD(2);
t592 = t658 * t728 + t661 * t746;
t585 = t667 * t592;
t669 = qJD(3) ^ 2;
t722 = -qJDD(3) * pkin(3) - t669 * qJ(4) + qJDD(4) + t585;
t465 = (qJD(2) * t620 + t529) * t664 + t722;
t764 = t656 * t465;
t544 = t623 - t766;
t763 = t656 * t544;
t761 = t659 * t465;
t760 = t659 * t544;
t561 = t613 * pkin(4) - t615 * pkin(8);
t496 = t667 * t529 - t664 * t592;
t466 = -t669 * pkin(3) + qJDD(3) * qJ(4) + t620 * t742 + t496;
t528 = -qJDD(2) * pkin(2) - t670 * pkin(7) + t543;
t716 = t622 + t729;
t671 = -t716 * qJ(4) + (-t623 + t643) * pkin(3) + t528;
t726 = t656 * t466 - t659 * t671;
t372 = t623 * pkin(4) - pkin(8) * t649 + (t773 + t561) * t615 + t726;
t759 = t663 * t372;
t498 = t521 - t586;
t758 = t663 * t498;
t757 = t664 * t528;
t756 = t664 * t529;
t755 = t664 * t623;
t640 = t664 * t670 * t667;
t631 = qJDD(3) + t640;
t754 = t664 * t631;
t632 = qJDD(3) - t640;
t753 = t664 * t632;
t752 = t665 * t592;
t751 = t666 * t372;
t750 = t666 * t498;
t749 = t667 * t528;
t748 = t667 * t632;
t747 = t668 * t592;
t400 = -0.2e1 * qJD(4) * t613 + t659 * t466 + t656 * t671;
t373 = -pkin(4) * t649 - t623 * pkin(8) - t613 * t561 + t400;
t409 = t745 * pkin(4) - t591 * pkin(8) + t756 + (t620 * t664 + (-pkin(4) * t615 - pkin(8) * t613) * t667) * qJD(2) + t722;
t329 = t666 * t373 + t663 * t409;
t744 = t652 + t653;
t739 = qJDD(2) * t658;
t737 = t665 * qJDD(2);
t735 = t668 * qJDD(2);
t734 = t656 * t521;
t733 = t659 * t521;
t732 = t664 * t766;
t731 = t667 * t766;
t597 = t615 * t742;
t538 = t597 + t745;
t730 = pkin(4) * t659 + pkin(3);
t596 = t613 * t742;
t328 = t663 * t373 - t666 * t409;
t495 = t585 + t756;
t418 = t664 * t495 + t667 * t496;
t724 = t668 * t640;
t723 = t665 * t640;
t417 = t667 * t495 - t664 * t496;
t625 = t744 * qJDD(2);
t628 = t649 + t765;
t563 = t668 * t625 - t665 * t628;
t719 = pkin(6) * t563 + t417 * t665;
t626 = -t665 * t670 + t735;
t718 = -pkin(6) * t626 - t752;
t689 = t668 * t670 + t737;
t717 = -pkin(6) * t689 + t747;
t290 = t663 * t328 + t666 * t329;
t277 = t659 * t290 + t656 * t372;
t289 = -t666 * t328 + t663 * t329;
t255 = t667 * t277 + t664 * t289;
t276 = t656 * t290 - t659 * t372;
t715 = t255 * t665 - t276 * t668;
t458 = -t537 - t507;
t389 = -t454 * t666 - t663 * t458;
t492 = t568 + t569;
t362 = t659 * t389 - t656 * t492;
t387 = -t454 * t663 + t666 * t458;
t318 = t667 * t362 + t664 * t387;
t361 = t656 * t389 + t659 * t492;
t714 = t318 * t665 - t361 * t668;
t399 = t615 * t773 + t726;
t332 = t656 * t399 + t659 * t400;
t320 = t667 * t332 + t664 * t465;
t331 = -t659 * t399 + t656 * t400;
t713 = t320 * t665 - t331 * t668;
t456 = (-qJD(5) - t610) * t572 - t725;
t390 = t666 * t456 - t663 * t457;
t520 = -t569 + t568;
t369 = t659 * t390 - t656 * t520;
t388 = -t663 * t456 - t666 * t457;
t322 = t667 * t369 - t664 * t388;
t368 = -t656 * t390 - t659 * t520;
t712 = t322 * t665 + t368 * t668;
t516 = -t605 - t568;
t420 = t666 * t516 - t781;
t375 = t659 * t420 - t656 * t456;
t419 = t663 * t516 + t780;
t334 = t667 * t375 + t664 * t419;
t374 = t656 * t420 + t659 * t456;
t711 = t334 * t665 - t374 * t668;
t519 = -t569 - t605;
t422 = -t663 * t519 - t750;
t377 = t659 * t422 + t457 * t656;
t421 = t666 * t519 - t758;
t340 = t667 * t377 + t664 * t421;
t376 = t656 * t422 - t457 * t659;
t710 = t340 * t665 - t376 * t668;
t536 = -t569 + t605;
t437 = -t663 * t536 + t780;
t381 = t659 * t437 - t656 * t458;
t435 = -t666 * t536 - t781;
t347 = t667 * t381 - t664 * t435;
t379 = -t656 * t437 - t659 * t458;
t709 = t347 * t665 + t379 * t668;
t535 = t568 - t605;
t438 = t666 * t535 - t758;
t382 = t659 * t438 - t656 * t454;
t436 = -t663 * t535 - t750;
t348 = t667 * t382 - t664 * t436;
t380 = -t656 * t438 - t659 * t454;
t708 = t348 * t665 + t380 * t668;
t506 = -t572 * qJD(5) - t725;
t444 = -t663 * t506 + t570 * t767;
t414 = t659 * t444 - t734;
t443 = -t666 * t506 - t570 * t768;
t365 = t667 * t414 - t664 * t443;
t411 = -t656 * t444 - t733;
t707 = t365 * t665 + t411 * t668;
t446 = t666 * t507 - t572 * t768;
t415 = t659 * t446 + t734;
t445 = -t663 * t507 - t572 * t767;
t366 = t667 * t415 - t664 * t445;
t412 = -t656 * t446 + t733;
t706 = t366 * t665 + t412 * t668;
t478 = (-t570 * t666 + t572 * t663) * t610;
t440 = t659 * t478 - t656 * t586;
t477 = (t570 * t663 + t572 * t666) * t610;
t394 = t667 * t440 - t664 * t477;
t439 = -t656 * t478 - t659 * t586;
t705 = t394 * t665 + t439 * t668;
t704 = t418 * t665 - t528 * t668;
t542 = -t591 + t596;
t475 = -t538 * t659 - t656 * t542;
t534 = t611 + t612;
t424 = t667 * t475 - t664 * t534;
t473 = -t538 * t656 + t659 * t542;
t703 = t424 * t665 - t473 * t668;
t558 = -t649 - t611;
t486 = t659 * t558 - t778;
t540 = t597 - t745;
t432 = t667 * t486 - t664 * t540;
t485 = t656 * t558 + t776;
t702 = t432 * t665 - t485 * t668;
t541 = t591 + t596;
t476 = t659 * t540 - t656 * t541;
t562 = -t612 + t611;
t434 = t667 * t476 - t664 * t562;
t474 = -t656 * t540 - t659 * t541;
t701 = t434 * t665 + t474 * t668;
t595 = -t612 - t649;
t511 = -t656 * t595 + t760;
t450 = t667 * t511 + t664 * t541;
t508 = t659 * t595 + t763;
t700 = t450 * t665 - t508 * t668;
t594 = -t612 + t649;
t512 = -t656 * t594 + t776;
t451 = t667 * t512 - t664 * t542;
t509 = -t659 * t594 - t778;
t699 = t451 * t665 + t509 * t668;
t593 = t611 - t649;
t513 = t659 * t593 + t763;
t452 = t667 * t513 - t664 * t538;
t510 = -t656 * t593 + t760;
t698 = t452 * t665 + t510 * t668;
t525 = -t659 * t596 + t656 * t745;
t483 = t667 * t525 - t732;
t524 = t656 * t596 + t659 * t745;
t697 = t483 * t665 + t524 * t668;
t527 = t659 * t591 + t656 * t597;
t484 = t667 * t527 + t732;
t526 = -t656 * t591 + t659 * t597;
t696 = t484 * t665 + t526 * t668;
t533 = (t613 * t659 - t615 * t656) * t742;
t518 = t667 * t533 - t755;
t532 = (-t613 * t656 - t615 * t659) * t742;
t695 = t518 * t665 + t532 * t668;
t479 = t668 * t543 - t665 * t547;
t621 = 0.2e1 * t729 + t738;
t624 = -0.2e1 * t643 + t736;
t560 = -t664 * t621 + t667 * t624;
t629 = t649 - t765;
t694 = t560 * t665 + t629 * t668;
t638 = -t649 - t669;
t581 = t667 * t638 - t754;
t693 = t581 * t665 + t624 * t668;
t636 = -t669 - t765;
t583 = -t664 * t636 - t748;
t692 = t583 * t665 - t621 * t668;
t600 = t689 * t661;
t691 = t660 * t600 + t657 * t626;
t554 = t657 * t600 - t660 * t626;
t690 = t625 * t665 + t628 * t668;
t618 = t744 * t740;
t688 = -qJDD(3) * t668 + t618 * t665;
t637 = t649 - t669;
t580 = t667 * t637 - t753;
t687 = t580 * t665 - t667 * t735;
t619 = t667 * t631;
t635 = t669 - t765;
t582 = -t664 * t635 + t619;
t686 = t582 * t665 - t664 * t735;
t587 = -t653 * t740 - t755;
t684 = t587 * t665 - t724;
t588 = t667 * t622 - t652 * t740;
t683 = t588 * t665 + t724;
t240 = -qJ(4) * t276 + (-pkin(8) * t659 + t770) * t289;
t249 = -pkin(3) * t276 + pkin(4) * t372 - pkin(8) * t290;
t254 = t664 * t277 - t667 * t289;
t229 = -pkin(7) * t254 + t667 * t240 - t664 * t249;
t233 = -pkin(2) * t254 - qJ(4) * t277 + (pkin(8) * t656 + t730) * t289;
t239 = t668 * t255 + t665 * t276;
t682 = pkin(6) * t239 + t229 * t665 + t233 * t668;
t278 = -pkin(8) * t387 - t289;
t264 = -qJ(4) * t361 + t659 * t278 + t387 * t770;
t266 = -pkin(3) * t361 - pkin(4) * t492 - pkin(8) * t389 - t290;
t317 = t664 * t362 - t667 * t387;
t238 = -pkin(7) * t317 + t667 * t264 - t664 * t266;
t248 = -pkin(2) * t317 - qJ(4) * t362 - t656 * t278 + t730 * t387;
t291 = t668 * t318 + t665 * t361;
t681 = pkin(6) * t291 + t238 * t665 + t248 * t668;
t309 = -pkin(4) * t419 + t328;
t330 = -pkin(8) * t419 + t759;
t274 = -qJ(4) * t374 - t656 * t309 + t659 * t330;
t294 = -pkin(3) * t374 - pkin(4) * t456 - pkin(8) * t420 + t751;
t333 = t664 * t375 - t667 * t419;
t244 = -pkin(7) * t333 + t667 * t274 - t664 * t294;
t257 = -pkin(2) * t333 + pkin(3) * t419 - qJ(4) * t375 - t659 * t309 - t656 * t330;
t301 = t668 * t334 + t665 * t374;
t680 = pkin(6) * t301 + t244 * t665 + t257 * t668;
t310 = -pkin(4) * t421 + t329;
t335 = -pkin(8) * t421 + t751;
t275 = -qJ(4) * t376 - t656 * t310 + t659 * t335;
t295 = -pkin(3) * t376 + pkin(4) * t457 - pkin(8) * t422 - t759;
t339 = t664 * t377 - t667 * t421;
t247 = -pkin(7) * t339 + t667 * t275 - t664 * t295;
t258 = -pkin(2) * t339 + pkin(3) * t421 - qJ(4) * t377 - t659 * t310 - t656 * t335;
t302 = t668 * t340 + t665 * t376;
t679 = pkin(6) * t302 + t247 * t665 + t258 * t668;
t319 = t664 * t332 - t667 * t465;
t272 = -pkin(7) * t319 + (-qJ(4) * t667 + t772) * t331;
t285 = -pkin(2) * t319 + pkin(3) * t465 - qJ(4) * t332;
t288 = t668 * t320 + t665 * t331;
t678 = pkin(6) * t288 + t272 * t665 + t285 * t668;
t323 = -qJ(4) * t473 - t331;
t423 = t664 * t475 + t667 * t534;
t298 = -pkin(7) * t423 + t667 * t323 + t473 * t772;
t299 = -pkin(2) * t423 - pkin(3) * t534 - qJ(4) * t475 - t332;
t384 = t668 * t424 + t665 * t473;
t677 = pkin(6) * t384 + t298 * t665 + t299 * t668;
t367 = -pkin(3) * t485 + t399;
t407 = -qJ(4) * t485 + t764;
t431 = t664 * t486 + t667 * t540;
t308 = -pkin(7) * t431 - t664 * t367 + t667 * t407;
t349 = -pkin(2) * t431 - pkin(3) * t540 - qJ(4) * t486 + t761;
t392 = t668 * t432 + t665 * t485;
t676 = pkin(6) * t392 + t308 * t665 + t349 * t668;
t370 = -pkin(3) * t508 + t400;
t413 = -qJ(4) * t508 + t761;
t447 = t664 * t511 - t667 * t541;
t315 = -pkin(7) * t447 - t664 * t370 + t667 * t413;
t356 = -pkin(2) * t447 + pkin(3) * t541 - qJ(4) * t511 - t764;
t402 = t668 * t450 + t665 * t508;
t675 = pkin(6) * t402 + t315 * t665 + t356 * t668;
t577 = t664 * t638 + t619;
t463 = -pkin(2) * t577 + t495;
t493 = -pkin(7) * t577 + t757;
t530 = t668 * t581 - t665 * t624;
t674 = pkin(6) * t530 + t463 * t668 + t493 * t665;
t579 = t667 * t636 - t753;
t464 = -pkin(2) * t579 + t496;
t494 = -pkin(7) * t579 + t749;
t531 = t668 * t583 + t665 * t621;
t673 = pkin(6) * t531 + t464 * t668 + t494 * t665;
t398 = t668 * t418 + t665 * t528;
t672 = pkin(6) * t398 - (-pkin(2) * t668 - pkin(7) * t665) * t417;
t609 = t667 * t623;
t601 = t626 * t661;
t599 = t626 * t658;
t598 = t689 * t658;
t589 = t665 * qJDD(3) + t668 * t618;
t578 = t667 * t635 + t754;
t576 = t664 * t637 + t748;
t575 = t716 * t664;
t574 = -t664 * t729 + t609;
t564 = t688 * t661;
t559 = t667 * t621 + t664 * t624;
t557 = t690 * t661;
t556 = t690 * t658;
t555 = -t657 * t601 - t660 * t689;
t553 = t660 * t601 - t657 * t689;
t551 = t668 * t588 - t723;
t550 = t668 * t587 + t723;
t549 = t668 * t582 + t664 * t737;
t548 = t668 * t580 + t665 * t736;
t523 = t668 * t560 - t665 * t629;
t517 = t664 * t533 + t609;
t515 = -t747 + (t598 * t658 + t600 * t661) * pkin(6);
t514 = -t752 + (-t599 * t658 - t601 * t661) * pkin(6);
t505 = -t657 * t557 + t660 * t563;
t504 = t660 * t557 + t657 * t563;
t503 = -t658 * t575 + t661 * t683;
t502 = -t658 * t574 + t661 * t684;
t501 = -t658 * t578 + t661 * t686;
t500 = -t658 * t576 + t661 * t687;
t490 = -t658 * t579 + t661 * t692;
t489 = -t658 * t577 + t661 * t693;
t488 = t661 * t579 + t658 * t692;
t487 = t661 * t577 + t658 * t693;
t482 = t664 * t527 - t731;
t481 = t664 * t525 + t731;
t472 = -t658 * t559 + t661 * t694;
t471 = pkin(2) * t624 + pkin(7) * t581 - t749;
t470 = -pkin(2) * t621 + pkin(7) * t583 + t757;
t467 = t480 * t661;
t461 = -pkin(1) * t599 + t658 * t543 + t661 * t717;
t460 = pkin(1) * t598 + t658 * t547 + t661 * t718;
t453 = t668 * t518 - t665 * t532;
t449 = t664 * t513 + t667 * t538;
t448 = t664 * t512 + t667 * t542;
t442 = -t479 * t661 + t658 * t592;
t441 = -t479 * t658 - t661 * t592;
t433 = t664 * t476 + t667 * t562;
t430 = -t657 * t490 + t660 * t531;
t429 = -t657 * t489 + t660 * t530;
t428 = t660 * t490 + t657 * t531;
t427 = t660 * t489 + t657 * t530;
t426 = t668 * t484 - t665 * t526;
t425 = t668 * t483 - t665 * t524;
t410 = pkin(2) * t628 + pkin(7) * t625 + t418;
t408 = -t658 * t517 + t661 * t695;
t404 = t668 * t452 - t665 * t510;
t403 = t668 * t451 - t665 * t509;
t401 = -pkin(2) * t528 + pkin(7) * t418;
t397 = -pkin(1) * t441 + t661 * t769;
t396 = -t657 * t442 + t660 * t480;
t395 = t660 * t442 + t657 * t480;
t393 = t664 * t440 + t667 * t477;
t391 = t668 * t434 - t665 * t474;
t386 = -t658 * t482 + t661 * t696;
t385 = -t658 * t481 + t661 * t697;
t383 = t668 * t417 + (-t556 * t658 - t557 * t661) * pkin(6);
t378 = (-t441 * t658 - t442 * t661) * pkin(6);
t364 = t664 * t415 + t667 * t445;
t363 = t664 * t414 + t667 * t443;
t360 = -t658 * t449 + t661 * t698;
t359 = -t658 * t448 + t661 * t699;
t358 = -t658 * t447 + t661 * t700;
t357 = t661 * t447 + t658 * t700;
t355 = t668 * t394 - t665 * t439;
t354 = -t665 * t464 + t668 * t494 + (-t488 * t658 - t490 * t661) * pkin(6);
t353 = -t665 * t463 + t668 * t493 + (-t487 * t658 - t489 * t661) * pkin(6);
t352 = -t658 * t433 + t661 * t701;
t351 = -t658 * t431 + t661 * t702;
t350 = t661 * t431 + t658 * t702;
t346 = t664 * t382 + t667 * t436;
t345 = t664 * t381 + t667 * t435;
t344 = t417 * t658 + t661 * t704;
t343 = -t417 * t661 + t658 * t704;
t342 = -t658 * t423 + t661 * t703;
t341 = t661 * t423 + t658 * t703;
t338 = -pkin(1) * t488 - t658 * t470 + t661 * t673;
t337 = -pkin(1) * t487 - t658 * t471 + t661 * t674;
t336 = -pkin(1) * t556 - t658 * t410 + t661 * t719;
t327 = t668 * t366 - t665 * t412;
t326 = t668 * t365 - t665 * t411;
t325 = -t657 * t358 + t660 * t402;
t324 = t660 * t358 + t657 * t402;
t321 = t664 * t369 + t667 * t388;
t316 = -t658 * t393 + t661 * t705;
t314 = -t657 * t351 + t660 * t392;
t313 = t660 * t351 + t657 * t392;
t312 = -t657 * t344 + t660 * t398;
t311 = t660 * t344 + t657 * t398;
t307 = t668 * t348 - t665 * t380;
t306 = t668 * t347 - t665 * t379;
t305 = -t657 * t342 + t660 * t384;
t304 = t660 * t342 + t657 * t384;
t303 = -pkin(2) * t508 + pkin(7) * t450 + t667 * t370 + t664 * t413;
t300 = -pkin(2) * t485 + pkin(7) * t432 + t667 * t367 + t664 * t407;
t297 = -t658 * t364 + t661 * t706;
t296 = -t658 * t363 + t661 * t707;
t293 = t668 * t322 - t665 * t368;
t292 = pkin(7) * t424 + t664 * t323 + (-pkin(2) - t771) * t473;
t287 = -t658 * t346 + t661 * t708;
t286 = -t658 * t345 + t661 * t709;
t284 = -t658 * t339 + t661 * t710;
t283 = t661 * t339 + t658 * t710;
t282 = -(pkin(2) * t665 - pkin(7) * t668) * t417 + (-t343 * t658 - t344 * t661) * pkin(6);
t281 = -t658 * t333 + t661 * t711;
t280 = t661 * t333 + t658 * t711;
t279 = -pkin(1) * t343 - t658 * t401 + t661 * t672;
t273 = -t658 * t321 + t661 * t712;
t271 = -t658 * t317 + t661 * t714;
t270 = t661 * t317 + t658 * t714;
t269 = -t658 * t319 + t661 * t713;
t268 = t661 * t319 + t658 * t713;
t267 = t668 * t315 - t665 * t356 + (-t357 * t658 - t358 * t661) * pkin(6);
t265 = t668 * t308 - t665 * t349 + (-t350 * t658 - t351 * t661) * pkin(6);
t263 = -t657 * t284 + t660 * t302;
t262 = t660 * t284 + t657 * t302;
t261 = -t657 * t281 + t660 * t301;
t260 = t660 * t281 + t657 * t301;
t259 = pkin(7) * t320 + (-pkin(2) + t720) * t331;
t256 = -pkin(1) * t357 - t658 * t303 + t661 * t675;
t253 = t668 * t298 - t665 * t299 + (-t341 * t658 - t342 * t661) * pkin(6);
t252 = -pkin(1) * t350 - t658 * t300 + t661 * t676;
t251 = -t657 * t271 + t660 * t291;
t250 = t660 * t271 + t657 * t291;
t246 = -t657 * t269 + t660 * t288;
t245 = t660 * t269 + t657 * t288;
t243 = -pkin(2) * t376 + pkin(7) * t340 + t664 * t275 + t667 * t295;
t242 = -pkin(2) * t374 + pkin(7) * t334 + t664 * t274 + t667 * t294;
t241 = -pkin(1) * t341 - t658 * t292 + t661 * t677;
t237 = -pkin(2) * t361 + pkin(7) * t318 + t664 * t264 + t667 * t266;
t236 = t668 * t272 - t665 * t285 + (-t268 * t658 - t269 * t661) * pkin(6);
t235 = -t658 * t254 + t661 * t715;
t234 = t661 * t254 + t658 * t715;
t232 = t668 * t247 - t665 * t258 + (-t283 * t658 - t284 * t661) * pkin(6);
t231 = t668 * t244 - t665 * t257 + (-t280 * t658 - t281 * t661) * pkin(6);
t230 = -pkin(1) * t268 - t658 * t259 + t661 * t678;
t228 = -pkin(1) * t283 - t658 * t243 + t661 * t679;
t227 = -pkin(2) * t276 + pkin(7) * t255 + t664 * t240 + t667 * t249;
t226 = -t657 * t235 + t660 * t239;
t225 = t660 * t235 + t657 * t239;
t224 = -pkin(1) * t280 - t658 * t242 + t661 * t680;
t223 = t668 * t238 - t665 * t248 + (-t270 * t658 - t271 * t661) * pkin(6);
t222 = -pkin(1) * t270 - t658 * t237 + t661 * t681;
t221 = t668 * t229 - t665 * t233 + (-t234 * t658 - t235 * t661) * pkin(6);
t220 = -pkin(1) * t234 - t658 * t227 + t661 * t682;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t566, 0, 0, 0, 0, 0, 0, t555, t554, 0, t396, 0, 0, 0, 0, 0, 0, t429, t430, t505, t312, 0, 0, 0, 0, 0, 0, t314, t325, t305, t246, 0, 0, 0, 0, 0, 0, t261, t263, t251, t226; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t565, 0, 0, 0, 0, 0, 0, t553, -t691, 0, t395, 0, 0, 0, 0, 0, 0, t427, t428, t504, t311, 0, 0, 0, 0, 0, 0, t313, t324, t304, t245, 0, 0, 0, 0, 0, 0, t260, t262, t250, t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t746, 0, 0, 0, 0, 0, 0, t599, -t598, 0, t441, 0, 0, 0, 0, 0, 0, t487, t488, t556, t343, 0, 0, 0, 0, 0, 0, t350, t357, t341, t268, 0, 0, 0, 0, 0, 0, t280, t283, t270, t234; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t777, -t775, -t565, -qJ(1) * t565, 0, 0, -t554, 0, t555, t657 * t739, -qJ(1) * t553 - t657 * t461 + t660 * t514, qJ(1) * t691 - t657 * t460 + t660 * t515, -t657 * t467 + t660 * t479, -qJ(1) * t395 + t660 * t378 - t657 * t397, -t657 * t503 + t660 * t551, -t657 * t472 + t660 * t523, -t657 * t501 + t660 * t549, -t657 * t502 + t660 * t550, -t657 * t500 + t660 * t548, -t657 * t564 + t660 * t589, -qJ(1) * t427 - t657 * t337 + t660 * t353, -qJ(1) * t428 - t657 * t338 + t660 * t354, -qJ(1) * t504 - t657 * t336 + t660 * t383, -qJ(1) * t311 - t657 * t279 + t660 * t282, -t657 * t386 + t660 * t426, -t657 * t352 + t660 * t391, -t657 * t359 + t660 * t403, -t657 * t385 + t660 * t425, -t657 * t360 + t660 * t404, -t657 * t408 + t660 * t453, -qJ(1) * t313 - t657 * t252 + t660 * t265, -qJ(1) * t324 - t657 * t256 + t660 * t267, -qJ(1) * t304 - t657 * t241 + t660 * t253, -qJ(1) * t245 - t657 * t230 + t660 * t236, -t657 * t297 + t660 * t327, -t657 * t273 + t660 * t293, -t657 * t286 + t660 * t306, -t657 * t296 + t660 * t326, -t657 * t287 + t660 * t307, -t657 * t316 + t660 * t355, -qJ(1) * t260 - t657 * t224 + t660 * t231, -qJ(1) * t262 - t657 * t228 + t660 * t232, -qJ(1) * t250 - t657 * t222 + t660 * t223, -qJ(1) * t225 - t657 * t220 + t660 * t221; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t775, -t777, t566, qJ(1) * t566, 0, 0, t691, 0, t553, -t660 * t739, qJ(1) * t555 + t660 * t461 + t657 * t514, qJ(1) * t554 + t660 * t460 + t657 * t515, t660 * t467 + t657 * t479, qJ(1) * t396 + t657 * t378 + t660 * t397, t660 * t503 + t657 * t551, t660 * t472 + t657 * t523, t660 * t501 + t657 * t549, t660 * t502 + t657 * t550, t660 * t500 + t657 * t548, t660 * t564 + t657 * t589, qJ(1) * t429 + t660 * t337 + t657 * t353, qJ(1) * t430 + t660 * t338 + t657 * t354, qJ(1) * t505 + t660 * t336 + t657 * t383, qJ(1) * t312 + t660 * t279 + t657 * t282, t660 * t386 + t657 * t426, t660 * t352 + t657 * t391, t660 * t359 + t657 * t403, t660 * t385 + t657 * t425, t660 * t360 + t657 * t404, t660 * t408 + t657 * t453, qJ(1) * t314 + t660 * t252 + t657 * t265, qJ(1) * t325 + t660 * t256 + t657 * t267, qJ(1) * t305 + t660 * t241 + t657 * t253, qJ(1) * t246 + t660 * t230 + t657 * t236, t660 * t297 + t657 * t327, t660 * t273 + t657 * t293, t660 * t286 + t657 * t306, t660 * t296 + t657 * t326, t660 * t287 + t657 * t307, t660 * t316 + t657 * t355, qJ(1) * t261 + t660 * t224 + t657 * t231, qJ(1) * t263 + t660 * t228 + t657 * t232, qJ(1) * t251 + t660 * t222 + t657 * t223, qJ(1) * t226 + t660 * t220 + t657 * t221; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t728, t630, 0, 0, 0, 0, t598, 0, t599, t661 * qJDD(2), pkin(1) * t601 - t661 * t543 + t658 * t717, -pkin(1) * t600 - t661 * t547 + t658 * t718, t480 * t658, pkin(1) * t442 + t658 * t769, t661 * t575 + t658 * t683, t661 * t559 + t658 * t694, t661 * t578 + t658 * t686, t661 * t574 + t658 * t684, t661 * t576 + t658 * t687, t688 * t658, pkin(1) * t489 + t661 * t471 + t658 * t674, pkin(1) * t490 + t661 * t470 + t658 * t673, pkin(1) * t557 + t661 * t410 + t658 * t719, pkin(1) * t344 + t661 * t401 + t658 * t672, t661 * t482 + t658 * t696, t661 * t433 + t658 * t701, t661 * t448 + t658 * t699, t661 * t481 + t658 * t697, t661 * t449 + t658 * t698, t661 * t517 + t658 * t695, pkin(1) * t351 + t661 * t300 + t658 * t676, pkin(1) * t358 + t661 * t303 + t658 * t675, pkin(1) * t342 + t661 * t292 + t658 * t677, pkin(1) * t269 + t661 * t259 + t658 * t678, t661 * t364 + t658 * t706, t661 * t321 + t658 * t712, t661 * t345 + t658 * t709, t661 * t363 + t658 * t707, t661 * t346 + t658 * t708, t661 * t393 + t658 * t705, pkin(1) * t281 + t661 * t242 + t658 * t680, pkin(1) * t284 + t661 * t243 + t658 * t679, pkin(1) * t271 + t661 * t237 + t658 * t681, pkin(1) * t235 + t661 * t227 + t658 * t682;];
tauB_reg = t1;
