% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S5PRRPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d3,d5,theta1,theta4]';
% 
% Output:
% MMD_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:38
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S5PRRPR7_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPR7_inertiaDJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPR7_inertiaDJ_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5PRRPR7_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:37:34
% EndTime: 2019-12-05 16:37:42
% DurationCPUTime: 1.68s
% Computational Cost: add. (1267->212), mult. (3569->424), div. (0->0), fcn. (3288->10), ass. (0->111)
t63 = cos(qJ(3));
t113 = qJ(4) * t63;
t55 = sin(pkin(10));
t57 = cos(pkin(10));
t60 = sin(qJ(3));
t73 = pkin(4) * t55 - pkin(8) * t57 + pkin(7);
t71 = t73 * t60;
t105 = t60 * qJD(4);
t98 = t55 * t105;
t134 = t98 - (-t55 * t113 + (t55 * pkin(3) - t57 * pkin(7) + pkin(8)) * t60) * qJD(3) - qJD(5) * t71;
t133 = (t60 ^ 2 - t63 ^ 2) * qJD(3);
t108 = t57 * qJD(4);
t62 = cos(qJ(5));
t74 = t57 * pkin(4) + t55 * pkin(8) + pkin(3);
t72 = t62 * t74;
t102 = qJ(4) * qJD(5);
t59 = sin(qJ(5));
t90 = t59 * t102;
t15 = qJD(5) * t72 - t62 * t108 + t57 * t90;
t107 = t59 * qJD(4);
t114 = qJ(4) * t57;
t28 = t62 * t114 - t59 * t74;
t16 = -t28 * qJD(5) - t57 * t107;
t27 = -t59 * t114 - t72;
t132 = t15 * t59 - t16 * t62 + (t27 * t59 - t28 * t62) * qJD(5);
t110 = qJD(5) * t59;
t79 = -t63 * pkin(3) - t60 * qJ(4);
t39 = -pkin(2) + t79;
t118 = t57 * t63;
t47 = pkin(7) * t118;
t30 = t55 * t39 + t47;
t25 = -t63 * pkin(8) + t30;
t104 = t63 * qJD(3);
t68 = t73 * t104;
t3 = t25 * t110 + t134 * t62 - t59 * t68;
t109 = qJD(5) * t62;
t4 = -t25 * t109 + t134 * t59 + t62 * t68;
t7 = -t59 * t25 + t62 * t71;
t8 = t62 * t25 + t59 * t71;
t131 = t3 * t59 - t4 * t62 + (t59 * t7 - t62 * t8) * qJD(5);
t56 = sin(pkin(5));
t61 = sin(qJ(2));
t122 = t56 * t61;
t58 = cos(pkin(5));
t31 = t60 * t122 - t58 * t63;
t64 = cos(qJ(2));
t111 = qJD(2) * t64;
t96 = t56 * t111;
t21 = -t31 * qJD(3) + t63 * t96;
t112 = qJD(2) * t61;
t97 = t56 * t112;
t10 = t21 * t57 + t55 * t97;
t32 = t63 * t122 + t58 * t60;
t22 = t32 * qJD(3) + t60 * t96;
t121 = t56 * t64;
t20 = -t55 * t121 + t32 * t57;
t6 = t20 * t62 + t31 * t59;
t1 = -t6 * qJD(5) - t10 * t59 + t22 * t62;
t5 = -t20 * t59 + t31 * t62;
t2 = t5 * qJD(5) + t10 * t62 + t22 * t59;
t130 = -t1 * t62 - t2 * t59 + (t5 * t59 - t6 * t62) * qJD(5);
t129 = 0.2e1 * t55;
t128 = 0.2e1 * qJD(5);
t19 = t57 * t121 + t32 * t55;
t9 = t21 * t55 - t57 * t97;
t127 = t19 * t9;
t126 = t22 * t60;
t125 = t31 * t22;
t124 = t55 * t60;
t123 = t55 * t63;
t120 = t57 * t39;
t119 = t57 * t60;
t106 = t60 * qJD(3);
t69 = t59 * t104 + t60 * t109;
t13 = -t62 * t106 - t63 * t110 + t69 * t57;
t117 = t59 * t13;
t33 = t59 * t119 + t62 * t63;
t92 = t62 * t104;
t12 = t33 * qJD(5) - t59 * t106 - t57 * t92;
t116 = t62 * t12;
t103 = qJ(4) * qJD(4);
t101 = pkin(7) * t123;
t100 = -0.2e1 * pkin(2) * qJD(3);
t99 = pkin(7) * t104;
t95 = t57 * t104;
t94 = t57 * t105;
t93 = t60 * t104;
t91 = t55 * pkin(7) + pkin(4);
t89 = t55 * t57 * t128;
t88 = 0.2e1 * t93;
t87 = t55 * t95;
t51 = t55 ^ 2;
t86 = t51 * t59 * t109;
t85 = -0.2e1 * t133;
t80 = t10 * t57 + t9 * t55;
t78 = pkin(3) * t60 - t113;
t17 = -t94 + (pkin(7) * t124 + t57 * t78) * qJD(3);
t18 = -t98 + (-pkin(7) * t119 + t55 * t78) * qJD(3);
t76 = -t17 * t55 + t18 * t57;
t70 = -t60 * t110 + t92;
t66 = t21 * t63 + t126 + (t31 * t63 - t32 * t60) * qJD(3);
t52 = t57 ^ 2;
t48 = t51 * t103;
t42 = t55 * t104;
t41 = -0.2e1 * t93;
t37 = t51 * t88;
t34 = t62 * t119 - t59 * t63;
t29 = -t101 + t120;
t24 = t91 * t63 - t120;
t14 = t94 + (t57 * t113 + (-t57 * pkin(3) - t91) * t60) * qJD(3);
t11 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t56 ^ 2 * t61 * t111 + 0.2e1 * t32 * t21 + 0.2e1 * t125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t20 * t10 + 0.2e1 * t125 + 0.2e1 * t127, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t5 * t1 + 0.2e1 * t6 * t2 + 0.2e1 * t127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t97, -t96, 0, 0, 0, 0, 0, 0, 0, 0, (-t64 * t106 - t63 * t112) * t56, (-t64 * t104 + t60 * t112) * t56, t66, -pkin(2) * t97 + t66 * pkin(7), 0, 0, 0, 0, 0, 0, t22 * t124 + t9 * t63 + (t31 * t123 - t19 * t60) * qJD(3), t22 * t119 + t10 * t63 + (t31 * t118 - t20 * t60) * qJD(3), (-t10 * t55 + t57 * t9) * t60 + (t19 * t57 - t20 * t55) * t104, t10 * t30 - t19 * t17 + t20 * t18 - t9 * t29 + (t31 * t104 + t126) * pkin(7), 0, 0, 0, 0, 0, 0, t19 * t13 + t9 * t33 + (t1 * t60 + t104 * t5) * t55, -t19 * t12 + t9 * t34 + (-t104 * t6 - t2 * t60) * t55, -t1 * t34 + t5 * t12 - t6 * t13 - t2 * t33, t1 * t7 + t19 * t14 + t2 * t8 + t9 * t24 - t6 * t3 + t5 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t88, t85, 0, t41, 0, 0, t60 * t100, t63 * t100, 0, 0, t52 * t88, -0.4e1 * t60 * t87, 0.2e1 * t57 * t133, t37, t55 * t85, t41, -0.2e1 * t17 * t63 + 0.2e1 * (t29 + 0.2e1 * t101) * t106, 0.2e1 * t18 * t63 + 0.2e1 * (-t30 + 0.2e1 * t47) * t106, 0.2e1 * (-t17 * t57 - t18 * t55) * t60 + 0.2e1 * (-t29 * t57 - t30 * t55) * t104, 0.2e1 * pkin(7) ^ 2 * t93 + 0.2e1 * t29 * t17 + 0.2e1 * t30 * t18, -0.2e1 * t34 * t12, 0.2e1 * t12 * t33 - 0.2e1 * t34 * t13, (t34 * t104 - t12 * t60) * t129, 0.2e1 * t33 * t13, (-t33 * t104 - t13 * t60) * t129, t37, 0.2e1 * t24 * t13 + 0.2e1 * t14 * t33 + 0.2e1 * (t104 * t7 + t4 * t60) * t55, -0.2e1 * t24 * t12 + 0.2e1 * t14 * t34 + 0.2e1 * (-t104 * t8 + t3 * t60) * t55, 0.2e1 * t7 * t12 - 0.2e1 * t8 * t13 + 0.2e1 * t3 * t33 - 0.2e1 * t4 * t34, 0.2e1 * t24 * t14 - 0.2e1 * t8 * t3 + 0.2e1 * t7 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t22, -t21, 0, 0, 0, 0, 0, 0, 0, 0, -t22 * t57, t22 * t55, t80, -t22 * pkin(3) + (t19 * t55 + t20 * t57) * qJD(4) + t80 * qJ(4), 0, 0, 0, 0, 0, 0, -t1 * t57 + (t109 * t19 + t59 * t9) * t55, t2 * t57 + (-t110 * t19 + t62 * t9) * t55, t130 * t55, t1 * t27 - t6 * t15 + t5 * t16 + t2 * t28 + (qJ(4) * t9 + qJD(4) * t19) * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104, 0, -t106, 0, -t99, pkin(7) * t106, 0, 0, t87, (-t51 + t52) * t104, t55 * t106, -t87, t57 * t106, 0, qJD(4) * t123 + (t79 * t55 - t47) * qJD(3), t63 * t108 + (t79 * t57 + t101) * qJD(3), t76, -pkin(3) * t99 + (-t29 * t55 + t30 * t57) * qJD(4) + t76 * qJ(4), (-t34 * t110 - t116) * t55, (t12 * t59 - t13 * t62 + (t33 * t59 - t34 * t62) * qJD(5)) * t55, t12 * t57 + t70 * t51, (t33 * t109 + t117) * t55, t13 * t57 - t69 * t51, -t87, -t4 * t57 + (qJ(4) * t13 + qJD(4) * t33 + t104 * t27 + t109 * t24 + t14 * t59 + t16 * t60) * t55, -t3 * t57 + (-qJ(4) * t12 + qJD(4) * t34 - t104 * t28 - t110 * t24 + t14 * t62 + t15 * t60) * t55, t27 * t12 - t28 * t13 + t131 * t55 + t15 * t33 - t16 * t34, -t8 * t15 + t7 * t16 + t4 * t27 - t3 * t28 + (qJ(4) * t14 + qJD(4) * t24) * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * (t51 + t52) * qJD(4), 0.2e1 * t52 * t103 + 0.2e1 * t48, -0.2e1 * t86, (t59 ^ 2 - t62 ^ 2) * t51 * t128, t59 * t89, 0.2e1 * t86, t62 * t89, 0, -0.2e1 * t16 * t57 + 0.2e1 * (t102 * t62 + t107) * t51, -0.2e1 * t15 * t57 + 0.2e1 * (qJD(4) * t62 - t90) * t51, t132 * t129, -0.2e1 * t28 * t15 + 0.2e1 * t27 * t16 + 0.2e1 * t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t130; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, t95, 0, t99, 0, 0, 0, 0, 0, 0, t70 * t55, -t69 * t55, t116 - t117 + (-t33 * t62 + t34 * t59) * qJD(5), -t131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t57 * t110, t57 * t109, 0, -t132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t12, 0, -t13, t42, t4, t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t55 * t110, 0, -t55 * t109, 0, t16, t15, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t110, -t109, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t11;
