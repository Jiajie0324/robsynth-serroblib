% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S5RPRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [1x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[dummy]';
% 
% Output:
% MMD_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:10
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S5RPRRR1_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(1,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR1_inertiaDJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR1_inertiaDJ_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [1 1]), ...
  'S5RPRRR1_inertiaDJ_reg2_slag_vp: pkin has to be [1x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:09:51
% EndTime: 2019-12-05 18:09:56
% DurationCPUTime: 1.31s
% Computational Cost: add. (436->154), mult. (1777->311), div. (0->0), fcn. (1458->6), ass. (0->121)
t51 = sin(qJ(3));
t142 = -0.4e1 * t51;
t50 = sin(qJ(4));
t44 = t50 ^ 2;
t49 = sin(qJ(5));
t116 = qJD(5) * t49;
t54 = cos(qJ(3));
t42 = t54 * qJD(3);
t52 = cos(qJ(5));
t62 = -t51 * t116 + t52 * t42;
t141 = t62 * t44;
t111 = qJ(2) * qJD(3);
t123 = qJD(2) * t51;
t140 = -t54 * t111 - t123;
t45 = t51 ^ 2;
t48 = t54 ^ 2;
t125 = t45 + t48;
t139 = qJ(2) * qJD(4) * t125;
t53 = cos(qJ(4));
t47 = t53 ^ 2;
t128 = t44 - t47;
t138 = qJD(4) * t128;
t43 = t49 ^ 2;
t46 = t52 ^ 2;
t84 = qJD(5) * (t43 - t46);
t137 = -0.4e1 * t50;
t133 = t50 * t52;
t130 = t54 * t52;
t132 = t51 * t53;
t20 = t49 * t132 + t130;
t115 = qJD(5) * t52;
t104 = t51 * t115;
t60 = t49 * t42 + t104;
t41 = t51 * qJD(3);
t113 = qJD(5) * t54;
t90 = t49 * t113;
t61 = t52 * t41 + t90;
t120 = qJD(4) * t50;
t108 = t51 * t120;
t77 = t49 * t108;
t4 = t60 * t53 - t61 - t77;
t119 = qJD(4) * t53;
t95 = t52 * t119;
t136 = -t4 * t133 - t20 * t95;
t135 = t49 * t4;
t134 = t50 * t51;
t131 = t54 * t49;
t127 = t44 + t47;
t126 = t45 - t48;
t124 = qJ(2) * t54;
t122 = qJD(2) * t54;
t121 = qJD(3) * t53;
t118 = qJD(4) * t54;
t117 = qJD(5) * t20;
t114 = qJD(5) * t53;
t112 = qJ(2) * qJD(2);
t21 = t52 * t132 - t131;
t109 = t21 * t119;
t107 = t52 * t120;
t106 = t50 * t118;
t105 = t53 * t118;
t103 = t50 * t115;
t102 = t21 * t115;
t101 = t43 * t119;
t100 = t44 * t122;
t99 = t49 * t115;
t98 = t50 * t119;
t97 = t50 * t122;
t96 = t51 * t42;
t94 = t53 * t42;
t93 = t49 * t114;
t92 = t52 * t114;
t91 = t53 * t122;
t89 = t52 * t113;
t88 = t48 * t112;
t86 = qJD(3) * t127;
t82 = t126 * qJD(3);
t81 = t125 * qJD(2);
t80 = 0.2e1 * t98;
t79 = t50 * t102;
t78 = t44 * t96;
t76 = t51 * t107;
t75 = t49 * t95;
t74 = t44 * t99;
t73 = t50 * t94;
t72 = t45 * t98;
t71 = t54 * t80;
t67 = -t53 * t131 + t51 * t52;
t11 = t67 * qJ(2);
t68 = t53 * t130 + t49 * t51;
t12 = t68 * qJ(2);
t70 = -t11 * t52 - t12 * t49;
t69 = t11 * t49 - t12 * t52;
t66 = -t20 * t120 + t53 * t4;
t65 = t51 * t111 - t122;
t64 = t94 - t108;
t17 = t53 * t41 + t106;
t18 = t51 * t119 + t50 * t42;
t63 = t50 * t41 - t105;
t59 = -t50 * t116 + t95;
t58 = t49 * t119 + t103;
t57 = -t60 * t44 - 0.2e1 * t53 * t77;
t1 = -t52 * t91 + t140 * t49 + (t17 * t52 + t53 * t90 - t104) * qJ(2);
t2 = t67 * qJD(2) + ((qJD(3) - t114) * t130 + (t106 + (-qJD(5) + t121) * t51) * t49) * qJ(2);
t56 = t70 * qJD(5) - t1 * t52 - t2 * t49;
t55 = qJ(2) ^ 2;
t39 = t45 * t112;
t35 = t46 * t119;
t33 = -0.2e1 * t96;
t32 = -0.2e1 * t98;
t30 = t44 * t88;
t27 = t46 * t98;
t23 = t43 * t98;
t16 = t93 + t107;
t15 = t49 * t120 - t92;
t10 = t21 * t120;
t8 = 0.2e1 * t72 + 0.2e1 * t78;
t7 = t138 * t51 - t73;
t6 = t50 * t84 - t75;
t5 = t68 * qJD(3) - t51 * t93 - t76 - t89;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * qJD(2), 0.2e1 * t112, 0.2e1 * t96, -0.2e1 * t82, 0, t33, 0, 0, 0, 0, 0.2e1 * t81, 0.2e1 * t39 + 0.2e1 * t88, 0.2e1 * t47 * t96 - 0.2e1 * t72, 0.2e1 * t138 * t45 + t73 * t142, 0.2e1 * t51 * t106 + 0.2e1 * t126 * t121, t8, 0.2e1 * t51 * t105 - 0.2e1 * t50 * t82, t33, 0.2e1 * t53 * t139 + 0.2e1 * t50 * t81, -0.2e1 * t50 * t139 + 0.2e1 * t53 * t81, 0, 0.2e1 * t47 * t88 + 0.2e1 * t30 + 0.2e1 * t39 + 0.2e1 * (0.1e1 - t127) * t55 * t96, 0.2e1 * t21 * t5, -0.2e1 * t5 * t20 - 0.2e1 * t21 * t4, 0.2e1 * t5 * t134 + 0.2e1 * t18 * t21, 0.2e1 * t20 * t4, -0.2e1 * t4 * t134 - 0.2e1 * t18 * t20, t8, 0.2e1 * (t11 * t51 + t20 * t124) * t119 + 0.2e1 * ((-t20 * t111 + t2) * t51 + (qJ(2) * t4 + qJD(2) * t20 + qJD(3) * t11) * t54) * t50, 0.2e1 * (-t12 * t51 + t21 * t124) * t119 + 0.2e1 * ((-t21 * t111 + t1) * t51 + (qJ(2) * t5 + qJD(2) * t21 - qJD(3) * t12) * t54) * t50, 0.2e1 * t1 * t20 - 0.2e1 * t11 * t5 - 0.2e1 * t12 * t4 - 0.2e1 * t2 * t21, -0.2e1 * t12 * t1 + 0.2e1 * t11 * t2 + 0.2e1 * t30 + 0.2e1 * (t48 * t98 - t78) * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, t42, 0, 0, 0, 0, 0, 0, 0, 0, t17, -t63, -t54 * t86, 0, 0, 0, 0, 0, 0, 0, t57 - t66, t10 + (-t5 - 0.2e1 * t76) * t53 - t141, t79 + (t109 + (t5 + t117) * t50) * t49 + t136, (t128 * t124 - t69 * t53) * qJD(4) + (t53 * t65 + t56) * t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t23 + 0.2e1 * t27 - 0.2e1 * t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, 0, -t41, 0, t140, t65, 0, 0, -t7, -t128 * t42 + t98 * t142, t63, t7, t17, 0, -qJ(2) * t64 - t53 * t123, qJ(2) * t18 + t50 * t123, -t51 * qJ(2) * t86 + t127 * t122, 0, t5 * t133 + t21 * t59, -t79 + (-t109 + (-t5 + t117) * t50) * t49 + t136, t10 + (-t5 + 0.2e1 * t76) * t53 + t141, t50 * t135 + t20 * t58, t57 + t66, t7, t49 * t100 + t11 * t120 - t2 * t53 + (t49 * t71 + (-t49 * t41 + t89) * t44) * qJ(2), t52 * t100 - t12 * t120 - t1 * t53 + (-t44 * t61 + t52 * t71) * qJ(2), t70 * t119 + (t69 * qJD(5) + t1 * t49 - t2 * t52) * t50, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, -0.2e1 * t138, 0, t32, 0, 0, 0, 0, 0, 0, 0.2e1 * t27 - 0.2e1 * t74, t75 * t137 + 0.2e1 * t44 * t84, 0.2e1 * t138 * t52 + 0.2e1 * t50 * t93, 0.2e1 * t23 + 0.2e1 * t74, -0.2e1 * t138 * t49 + 0.2e1 * t50 * t92, t32, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t64, 0, -t18, t41, qJ(2) * t63 - t97, qJ(2) * t17 - t91, 0, 0, t5 * t49 + t102, -t135 + t5 * t52 + (-t20 * t52 - t21 * t49) * qJD(5), t51 * t103 + t18 * t49, t20 * t116 - t4 * t52, t50 * t62 + t51 * t95, 0, -t52 * t97 + (t50 * t61 - t54 * t95) * qJ(2), t49 * t97 + (-t49 * t63 + t50 * t89) * qJ(2), t56, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t120, -t119, 0, 0, 0, 0, 0, 0, 0, 0, -t16, t15, t35 + t101, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t119, 0, -t120, 0, 0, 0, 0, 0, -t6, t99 * t137 - t101 + t35, t15, t6, t16, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t99, -0.2e1 * t84, 0, -0.2e1 * t99, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t5, 0, -t4, t18, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t58, -t59, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59, 0, -t58, t120, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t115, 0, -t116, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t3;
