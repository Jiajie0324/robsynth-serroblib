% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [1x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[dummy]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:10
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRRR1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(1,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR1_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR1_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR1_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [1 1]), ...
  'S5RPRRR1_invdynm_fixb_reg2_snew_vp: pkin has to be [1x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:10:08
% EndTime: 2019-12-05 18:10:15
% DurationCPUTime: 4.85s
% Computational Cost: add. (9053->370), mult. (17124->470), div. (0->0), fcn. (13428->8), ass. (0->270)
t701 = sin(qJ(5));
t702 = sin(qJ(4));
t706 = cos(qJ(4));
t703 = sin(qJ(3));
t735 = qJD(1) * t703;
t665 = qJD(3) * t702 + t706 * t735;
t707 = cos(qJ(3));
t685 = qJD(1) * t707 - qJD(4);
t705 = cos(qJ(5));
t630 = t665 * t701 + t685 * t705;
t632 = t665 * t705 - t685 * t701;
t593 = t632 * t630;
t734 = qJD(1) * qJD(3);
t688 = t707 * t734;
t689 = t703 * qJDD(1);
t667 = t689 + t688;
t723 = qJDD(3) * t706 - t702 * t667;
t712 = qJD(4) * t665 - t723;
t614 = qJDD(5) + t712;
t769 = -t593 + t614;
t771 = t701 * t769;
t770 = t705 * t769;
t697 = qJDD(1) * qJ(2);
t704 = sin(qJ(1));
t708 = cos(qJ(1));
t678 = g(1) * t708 + g(2) * t704;
t711 = 0.2e1 * qJD(2) * qJD(1) - t678;
t653 = -t697 - t711;
t639 = g(3) * t707 - t653 * t703;
t623 = t703 * t639;
t640 = -g(3) * t703 - t653 * t707;
t737 = t707 * t640 + t623;
t626 = t707 * t639;
t586 = -t703 * t640 + t626;
t628 = t630 ^ 2;
t629 = t632 ^ 2;
t663 = -qJD(3) * t706 + t702 * t735;
t656 = qJD(5) + t663;
t655 = t656 ^ 2;
t658 = t663 ^ 2;
t659 = t665 ^ 2;
t683 = t685 ^ 2;
t768 = t704 * g(3);
t767 = qJ(2) * t704;
t766 = qJ(2) * t708;
t765 = t656 * t701;
t764 = t656 * t705;
t763 = t663 * t702;
t762 = t665 * t663;
t646 = t685 * t665;
t699 = t703 ^ 2;
t710 = qJD(1) ^ 2;
t761 = t699 * t710;
t560 = t593 + t614;
t760 = t701 * t560;
t677 = t704 * g(1) - g(2) * t708;
t670 = -qJDD(2) + t677;
t657 = qJ(2) * t710 + t670;
t600 = t640 * t702 + t657 * t706;
t759 = t701 * t600;
t601 = t640 * t706 - t657 * t702;
t568 = t601 * t701 - t639 * t705;
t569 = t601 * t705 + t639 * t701;
t717 = t568 * t705 - t569 * t701;
t510 = t702 * t717;
t758 = t702 * t600;
t687 = t703 * t734;
t732 = t707 * qJDD(1);
t668 = -t687 + t732;
t660 = -qJDD(4) + t668;
t612 = -t660 - t762;
t757 = t702 * t612;
t622 = t702 * t639;
t756 = t702 * t665;
t755 = t703 * t600;
t648 = t703 * t657;
t684 = t707 * t710 * t703;
t675 = qJDD(3) + t684;
t753 = t703 * t675;
t676 = qJDD(3) - t684;
t752 = t703 * t676;
t751 = t704 * t639;
t750 = t705 * t560;
t749 = t705 * t600;
t748 = t706 * t717;
t747 = t706 * t600;
t611 = t660 - t762;
t746 = t706 * t611;
t625 = t706 * t639;
t745 = t706 * t663;
t596 = t707 * t600;
t744 = t707 * t657;
t743 = t707 * t676;
t742 = t708 * t639;
t512 = t568 * t701 + t569 * t705;
t741 = -t512 * t707 + t703 * t748;
t534 = -t568 * t702 + t701 * t747;
t740 = t534 * t707 - t703 * t749;
t535 = -t569 * t702 + t705 * t747;
t739 = t535 * t707 + t701 * t755;
t738 = t601 * t707 + t625 * t703;
t700 = t707 ^ 2;
t736 = t699 + t700;
t733 = t704 * qJDD(1);
t731 = t708 * qJDD(1);
t730 = t702 * t593;
t729 = t703 * t762;
t728 = t706 * t593;
t727 = t707 * t762;
t726 = t703 * t512 + t707 * t748;
t725 = -t703 * t601 + t626 * t706;
t714 = -t702 * qJDD(3) - t706 * t667;
t616 = -qJD(4) * t663 - t714;
t724 = -t701 * t616 - t660 * t705;
t722 = t704 * t684;
t721 = t708 * t684;
t720 = t534 * t703 + t596 * t705;
t719 = t535 * t703 - t596 * t701;
t718 = t623 * t702 + t596;
t716 = t601 * t706 + t758;
t715 = -t705 * t616 + t701 * t660;
t713 = t626 * t702 - t755;
t564 = -qJD(5) * t632 + t724;
t565 = -qJD(5) * t630 - t715;
t709 = qJD(3) ^ 2;
t696 = t708 * g(3);
t692 = t700 * t710;
t682 = -t692 - t709;
t681 = t692 - t709;
t680 = -t709 - t761;
t679 = t709 - t761;
t673 = -t692 + t761;
t672 = -t704 * t710 + t731;
t671 = t708 * t710 + t733;
t669 = -0.2e1 * t687 + t732;
t666 = t689 + 0.2e1 * t688;
t662 = t707 * t675;
t661 = t736 * t734;
t654 = 0.2e1 * t697 + t711;
t647 = qJ(2) * t653;
t645 = t663 * t685;
t644 = -t659 + t683;
t643 = t658 - t683;
t642 = t667 * t707 - t699 * t734;
t641 = -t668 * t703 - t700 * t734;
t638 = -t679 * t703 + t662;
t637 = t681 * t707 - t752;
t636 = t679 * t707 + t753;
t635 = t681 * t703 + t743;
t634 = (t667 + t688) * t703;
t633 = (t668 - t687) * t707;
t621 = t659 - t658;
t618 = -t666 * t703 + t669 * t707;
t617 = t666 * t707 + t669 * t703;
t610 = t658 + t659;
t609 = t656 * t632;
t608 = t656 * t630;
t607 = -t629 + t655;
t606 = t628 - t655;
t605 = -t744 - qJ(2) * (t680 * t707 - t752);
t604 = t744 + qJ(2) * (t682 * t707 - t753);
t603 = -t648 + qJ(2) * (-t680 * t703 - t743);
t602 = -t648 - qJ(2) * (t682 * t703 + t662);
t599 = (t745 - t756) * t685;
t598 = (t665 * t706 + t763) * t685;
t592 = (qJD(4) - t685) * t663 + t714;
t591 = t616 - t645;
t590 = t616 + t645;
t589 = t646 - t712;
t588 = t646 + t712;
t587 = t629 - t628;
t584 = -t629 - t655;
t583 = qJ(2) * t737;
t582 = t616 * t706 + t685 * t756;
t581 = t616 * t702 - t646 * t706;
t580 = -t685 * t745 + t702 * t712;
t579 = t685 * t763 + t706 * t712;
t578 = t599 * t707 - t660 * t703;
t577 = t599 * t703 + t660 * t707;
t576 = t697 * t736 + t737;
t575 = t611 * t702 + t643 * t706;
t574 = t612 * t706 - t644 * t702;
t573 = t643 * t702 - t746;
t572 = t644 * t706 + t757;
t571 = -t655 - t628;
t570 = t746 - t702 * (-t659 - t683);
t566 = t706 * (-t683 - t658) - t757;
t563 = (-t630 * t705 + t632 * t701) * t656;
t562 = (-t630 * t701 - t632 * t705) * t656;
t558 = t582 * t707 + t729;
t557 = t580 * t707 - t729;
t556 = t582 * t703 - t727;
t555 = t580 * t703 + t727;
t553 = -t601 * t702 + t747;
t551 = t707 * t553;
t550 = t703 * t553;
t549 = t706 * ((-qJD(4) - t685) * t665 + t723) + t702 * t591;
t548 = t589 * t706 - t590 * t702;
t547 = t589 * t702 + t590 * t706;
t546 = t565 + t608;
t545 = t565 - t608;
t544 = (-qJD(5) + t656) * t632 + t724;
t543 = t564 - t609;
t542 = -t564 - t609;
t541 = t703 * t716 - t626;
t540 = t575 * t707 - t588 * t703;
t539 = t574 * t707 + t591 * t703;
t538 = t575 * t703 + t588 * t707;
t537 = t574 * t703 - t591 * t707;
t536 = qJ(2) * (t707 * t716 + t623);
t533 = t569 * t706 + t702 * t749;
t532 = -t568 * t706 - t701 * t758;
t531 = t565 * t705 - t632 * t765;
t530 = t565 * t701 + t632 * t764;
t529 = -t564 * t701 + t630 * t764;
t528 = -t564 * t705 - t630 * t765;
t527 = t563 * t706 + t614 * t702;
t526 = t563 * t702 - t614 * t706;
t521 = t606 * t705 - t760;
t520 = -t607 * t701 + t770;
t519 = t606 * t701 + t750;
t518 = t607 * t705 + t771;
t517 = t548 * t707 + t621 * t703;
t516 = t548 * t703 - t621 * t707;
t515 = -t584 * t705 + t760;
t507 = -t571 * t701 - t770;
t506 = t531 * t706 + t730;
t505 = t529 * t706 - t730;
t504 = t531 * t702 - t728;
t503 = t529 * t702 + t728;
t502 = t512 * t706 + t758;
t501 = -qJ(2) * (t570 * t703 + t592 * t707) + t725;
t500 = qJ(2) * (t570 * t707 - t592 * t703) + t738;
t499 = -qJ(2) * (t566 * t703 + t589 * t707) + t713;
t498 = qJ(2) * (t566 * t707 - t589 * t703) + t718;
t497 = t527 * t707 + t562 * t703;
t496 = t527 * t703 - t562 * t707;
t495 = t543 * t705 - t545 * t701;
t494 = -t544 * t701 + t546 * t705;
t493 = t543 * t701 + t545 * t705;
t492 = t551 - qJ(2) * (t549 * t703 + t610 * t707);
t491 = t550 + qJ(2) * (t549 * t707 - t610 * t703);
t490 = t521 * t706 - t542 * t702;
t489 = t520 * t706 + t546 * t702;
t488 = t521 * t702 + t542 * t706;
t487 = t520 * t702 - t546 * t706;
t486 = t706 * (-t584 * t701 - t750) - t702 * ((qJD(5) + t656) * t630 + t715);
t485 = t706 * (t571 * t705 - t771) - t702 * t543;
t484 = t495 * t706 + t587 * t702;
t483 = t495 * t702 - t587 * t706;
t482 = t506 * t707 + t530 * t703;
t481 = t505 * t707 - t528 * t703;
t480 = t506 * t703 - t530 * t707;
t479 = t505 * t703 + t528 * t707;
t478 = t706 * (t544 * t705 + t546 * t701) - t702 * (t628 + t629);
t477 = t502 * t703 + t707 * t717;
t476 = qJ(2) * (t502 * t707 - t703 * t717);
t475 = t490 * t707 + t519 * t703;
t474 = t489 * t707 + t518 * t703;
t473 = t490 * t703 - t519 * t707;
t472 = t489 * t703 - t518 * t707;
t471 = t484 * t707 + t493 * t703;
t470 = t484 * t703 - t493 * t707;
t469 = -qJ(2) * (t486 * t703 + t515 * t707) + t739;
t468 = qJ(2) * (t486 * t707 - t515 * t703) + t719;
t467 = -qJ(2) * (t485 * t703 + t507 * t707) + t740;
t466 = qJ(2) * (t485 * t707 - t507 * t703) + t720;
t465 = -qJ(2) * (t478 * t703 + t494 * t707) + t726;
t464 = qJ(2) * (t478 * t707 - t494 * t703) + t741;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t672, 0, -t671, 0, -t768, -t696, -t677 * t708 + t678 * t704, 0, 0, t672, 0, 0, t671, 0, -t768, t653 * t704 - t657 * t708, t696, g(3) * t766, t642 * t708 - t722, t618 * t708 + t673 * t704, t638 * t708 + t703 * t733, t641 * t708 + t722, t637 * t708 + t704 * t732, qJDD(3) * t704 + t661 * t708, t602 * t708 - t751, t605 * t708 - t640 * t704, t708 * t586, t586 * t766, t558 * t708 + t581 * t704, t517 * t708 + t547 * t704, t539 * t708 + t572 * t704, t557 * t708 - t579 * t704, t540 * t708 + t573 * t704, t578 * t708 + t598 * t704, t499 * t708 - t625 * t704, t501 * t708 + t702 * t751, t492 * t708 + t704 * t716, -t541 * t766, t482 * t708 + t504 * t704, t471 * t708 + t483 * t704, t474 * t708 + t487 * t704, t481 * t708 + t503 * t704, t475 * t708 + t488 * t704, t497 * t708 + t526 * t704, t467 * t708 - t532 * t704, t469 * t708 + t533 * t704, t465 * t708 + t510 * t704, -t477 * t766; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t671, 0, t672, 0, t696, -t768, -t677 * t704 - t678 * t708, 0, 0, t671, 0, 0, -t672, 0, t696, -t653 * t708 - t657 * t704, t768, g(3) * t767, t642 * t704 + t721, t618 * t704 - t673 * t708, t638 * t704 - t703 * t731, t641 * t704 - t721, t637 * t704 - t707 * t731, -qJDD(3) * t708 + t661 * t704, t602 * t704 + t742, t605 * t704 + t640 * t708, t704 * t586, t586 * t767, t558 * t704 - t581 * t708, t517 * t704 - t547 * t708, t539 * t704 - t572 * t708, t557 * t704 + t579 * t708, t540 * t704 - t573 * t708, t578 * t704 - t598 * t708, t499 * t704 + t706 * t742, t501 * t704 - t702 * t742, t492 * t704 - t708 * t716, -t541 * t767, t482 * t704 - t504 * t708, t471 * t704 - t483 * t708, t474 * t704 - t487 * t708, t481 * t704 - t503 * t708, t475 * t704 - t488 * t708, t497 * t704 - t526 * t708, t467 * t704 + t532 * t708, t469 * t704 - t533 * t708, t465 * t704 - t510 * t708, -t477 * t767; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t677, t678, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t670, 0, t654, -t647, t634, t617, t636, t633, t635, 0, t604, t603, t576, t583, t556, t516, t537, t555, t538, t577, t498, t500, t491, t536, t480, t470, t472, t479, t473, t496, t466, t468, t464, t476; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t710, 0, 0, -g(3), -t677, 0, 0, qJDD(1), 0, 0, t710, 0, 0, -t657, g(3), qJ(2) * g(3), t642, t618, t638, t641, t637, t661, t602, t605, t586, qJ(2) * t586, t558, t517, t539, t557, t540, t578, t499, t501, t492, -qJ(2) * t541, t482, t471, t474, t481, t475, t497, t467, t469, t465, -qJ(2) * t477; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t710, 0, qJDD(1), 0, g(3), 0, -t678, 0, 0, t710, 0, 0, -qJDD(1), 0, g(3), -t653, 0, 0, t684, -t673, -t689, -t684, -t732, -qJDD(3), t639, t640, 0, 0, -t581, -t547, -t572, t579, -t573, -t598, t625, -t622, -t716, 0, -t504, -t483, -t487, -t503, -t488, -t526, t532, -t533, -t510, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t677, t678, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t670, 0, t654, -t647, t634, t617, t636, t633, t635, 0, t604, t603, t576, t583, t556, t516, t537, t555, t538, t577, t498, t500, t491, t536, t480, t470, t472, t479, t473, t496, t466, t468, t464, t476; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t710, 0, 0, -t657, g(3), 0, t642, t618, t638, t641, t637, t661, -t648, -t744, t586, 0, t558, t517, t539, t557, t540, t578, t713, t725, t551, 0, t482, t471, t474, t481, t475, t497, t740, t739, t726, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t657, 0, -t653, 0, t634, t617, t636, t633, t635, 0, t744, -t648, t737, 0, t556, t516, t537, t555, t538, t577, t718, t738, t550, 0, t480, t470, t472, t479, t473, t496, t720, t719, t741, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t710, 0, 0, qJDD(1), 0, -g(3), t653, 0, 0, -t684, t673, t689, t684, t732, qJDD(3), -t639, -t640, 0, 0, t581, t547, t572, -t579, t573, t598, -t625, t622, t716, 0, t504, t483, t487, t503, t488, t526, -t532, t533, t510, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t667, t669, t675, -t688, t681, t688, 0, -t657, t639, 0, t582, t548, t574, t580, t575, t599, t622, t625, t553, 0, t506, t484, t489, t505, t490, t527, t534, t535, t748, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t687, t666, t679, t668, t676, -t687, t657, 0, t640, 0, -t762, -t621, -t591, t762, t588, t660, t600, t601, 0, 0, -t530, -t493, -t518, t528, -t519, -t562, t749, -t759, -t512, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t684, t673, t689, t684, t732, qJDD(3), -t639, -t640, 0, 0, t581, t547, t572, -t579, t573, t598, -t625, t622, t716, 0, t504, t483, t487, t503, t488, t526, -t532, t533, t510, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t616, t589, t612, -t645, t643, t645, 0, t639, t600, 0, t531, t495, t520, t529, t521, t563, t759, t749, t717, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t646, t590, t644, -t712, -t611, t646, -t639, 0, t601, 0, -t593, -t587, -t546, t593, t542, -t614, t568, t569, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t762, t621, t591, -t762, -t588, -t660, -t600, -t601, 0, 0, t530, t493, t518, -t528, t519, t562, -t749, t759, t512, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t565, t543, t769, t608, t606, -t608, 0, t600, t568, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t609, t545, t607, t564, t560, -t609, -t600, 0, t569, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t593, t587, t546, -t593, -t542, t614, -t568, -t569, 0, 0;];
m_new_reg = t1;
