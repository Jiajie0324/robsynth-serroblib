% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [1x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[dummy]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:10
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRRR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(1,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [1 1]), ...
  'S5RPRRR1_invdynB_fixb_reg2_snew_vp: pkin has to be [1x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:09:58
% EndTime: 2019-12-05 18:10:08
% DurationCPUTime: 3.25s
% Computational Cost: add. (5209->322), mult. (9830->519), div. (0->0), fcn. (7751->8), ass. (0->258)
t388 = sin(qJ(5));
t389 = sin(qJ(4));
t393 = cos(qJ(4));
t390 = sin(qJ(3));
t424 = qJD(1) * t390;
t351 = t389 * qJD(3) + t393 * t424;
t394 = cos(qJ(3));
t373 = t394 * qJD(1) - qJD(4);
t392 = cos(qJ(5));
t315 = t388 * t351 + t392 * t373;
t317 = t392 * t351 - t388 * t373;
t287 = t317 * t315;
t422 = qJD(1) * qJD(3);
t410 = t394 * t422;
t420 = t390 * qJDD(1);
t354 = t410 + t420;
t411 = t351 * qJD(4) - t393 * qJDD(3) + t389 * t354;
t404 = qJDD(5) + t411;
t458 = -t287 + t404;
t463 = t388 * t458;
t462 = t392 * t458;
t376 = t390 * t422;
t418 = t394 * qJDD(1);
t355 = -t376 + t418;
t346 = -qJDD(4) + t355;
t349 = -t393 * qJD(3) + t389 * t424;
t450 = t351 * t349;
t398 = -t346 - t450;
t461 = t389 * t398;
t460 = t393 * t398;
t391 = sin(qJ(1));
t395 = cos(qJ(1));
t366 = t395 * g(1) + t391 * g(2);
t399 = 0.2e1 * qJD(2) * qJD(1) - t366;
t421 = qJDD(1) * qJ(2);
t336 = t399 + t421;
t325 = -t390 * g(3) + t394 * t336;
t397 = qJD(1) ^ 2;
t365 = t391 * g(1) - t395 * g(2);
t403 = -qJDD(2) + t365;
t343 = t397 * qJ(2) + t403;
t291 = t393 * t325 - t389 * t343;
t324 = t394 * g(3) + t390 * t336;
t262 = t388 * t291 - t392 * t324;
t263 = t392 * t291 + t388 * t324;
t402 = t392 * t262 - t388 * t263;
t459 = t394 * t402;
t311 = t394 * t324;
t278 = -t390 * t325 + t311;
t304 = -t349 * qJD(4) + t389 * qJDD(3) + t393 * t354;
t330 = t349 * t373;
t284 = t330 + t304;
t333 = t395 * t343;
t457 = t391 * t336 + t333;
t342 = qJD(5) + t349;
t296 = t342 * t315;
t412 = t315 * qJD(5) - t392 * t304 + t388 * t346;
t241 = t412 + t296;
t409 = t388 * t304 + t392 * t346;
t236 = (qJD(5) - t342) * t317 + t409;
t313 = t315 ^ 2;
t314 = t317 ^ 2;
t341 = t342 ^ 2;
t344 = t349 ^ 2;
t345 = t351 ^ 2;
t371 = t373 ^ 2;
t456 = t391 * g(3);
t455 = qJ(2) * t391;
t454 = qJ(2) * t395;
t453 = t402 * t389;
t452 = t342 * t388;
t451 = t342 * t392;
t449 = t373 * t351;
t448 = t373 * t389;
t447 = t373 * t393;
t386 = t390 ^ 2;
t446 = t386 * t397;
t253 = t287 + t404;
t445 = t388 * t253;
t290 = t389 * t325 + t393 * t343;
t444 = t389 * t290;
t298 = t346 - t450;
t443 = t389 * t298;
t442 = t390 * t290;
t441 = t390 * t324;
t439 = t390 * t343;
t372 = t394 * t397 * t390;
t363 = qJDD(3) + t372;
t438 = t390 * t363;
t364 = qJDD(3) - t372;
t437 = t390 * t364;
t436 = t390 * t393;
t435 = t391 * t324;
t433 = t391 * t343;
t432 = t392 * t253;
t431 = t393 * t290;
t430 = t393 * t298;
t429 = t394 * t290;
t428 = t394 * t343;
t427 = t394 * t364;
t426 = t395 * t324;
t387 = t394 ^ 2;
t425 = t386 + t387;
t419 = t391 * qJDD(1);
t417 = t395 * qJDD(1);
t416 = t389 * t287;
t415 = t390 * t450;
t414 = t393 * t287;
t413 = t394 * t450;
t279 = t394 * t325 + t441;
t408 = t395 * t336 - t433;
t407 = -t391 * t365 - t395 * t366;
t406 = t391 * t372;
t405 = t395 * t372;
t210 = t388 * t262 + t392 * t263;
t401 = -t389 * t291 + t431;
t249 = t393 * t291 + t444;
t400 = t395 * t365 - t391 * t366;
t281 = t411 + t449;
t396 = qJD(3) ^ 2;
t384 = t395 * g(3);
t381 = t387 * t397;
t370 = -t381 - t396;
t369 = t381 - t396;
t368 = -t396 - t446;
t367 = t396 - t446;
t361 = t381 - t446;
t360 = t381 + t446;
t359 = -t391 * t397 + t417;
t358 = t395 * t397 + t419;
t357 = t425 * qJDD(1);
t356 = -0.2e1 * t376 + t418;
t353 = 0.2e1 * t410 + t420;
t348 = t394 * t363;
t347 = t425 * t422;
t329 = -t345 + t371;
t328 = t344 - t371;
t327 = t394 * t354 - t386 * t422;
t326 = -t390 * t355 - t387 * t422;
t323 = -t390 * t368 - t427;
t322 = -t390 * t367 + t348;
t321 = t394 * t370 - t438;
t320 = t394 * t369 - t437;
t319 = t394 * t368 - t437;
t318 = t390 * t370 + t348;
t309 = -t345 + t344;
t308 = -t345 - t371;
t306 = -t390 * t353 + t394 * t356;
t305 = -t371 - t344;
t297 = t344 + t345;
t295 = -t314 + t341;
t294 = t313 - t341;
t293 = -qJ(2) * t319 - t428;
t292 = -qJ(2) * t318 - t439;
t289 = (t349 * t393 - t351 * t389) * t373;
t288 = (-t349 * t389 - t351 * t393) * t373;
t286 = t330 - t304;
t282 = -t411 + t449;
t280 = -t314 + t313;
t276 = -t314 - t341;
t275 = t393 * t304 + t351 * t448;
t274 = -t389 * t304 + t351 * t447;
t273 = -t349 * t447 + t389 * t411;
t272 = t349 * t448 + t393 * t411;
t271 = t394 * t289 - t390 * t346;
t270 = t393 * t328 + t443;
t269 = -t389 * t329 + t460;
t268 = -t389 * t328 + t430;
t267 = -t393 * t329 - t461;
t266 = -t341 - t313;
t265 = -t389 * t308 + t430;
t264 = -t393 * t308 - t443;
t261 = t393 * t305 - t461;
t260 = -t389 * t305 - t460;
t259 = t313 + t314;
t257 = -t317 * qJD(5) - t409;
t256 = (-t315 * t392 + t317 * t388) * t342;
t255 = (t315 * t388 + t317 * t392) * t342;
t251 = t394 * t275 + t415;
t250 = t394 * t273 - t415;
t245 = -t281 * t393 - t389 * t286;
t244 = t393 * t282 - t389 * t284;
t243 = t281 * t389 - t393 * t286;
t242 = -t389 * t282 - t393 * t284;
t240 = -t296 + t412;
t237 = (-qJD(5) - t342) * t317 - t409;
t235 = t394 * t249 + t441;
t234 = t390 * t249 - t311;
t233 = t394 * t270 - t390 * t281;
t232 = t394 * t269 - t390 * t286;
t231 = -t389 * t263 + t392 * t431;
t230 = -t389 * t262 + t388 * t431;
t229 = -t393 * t263 - t392 * t444;
t228 = -t393 * t262 - t388 * t444;
t227 = -t317 * t452 - t392 * t412;
t226 = -t317 * t451 + t388 * t412;
t225 = -t388 * t257 + t315 * t451;
t224 = -t392 * t257 - t315 * t452;
t223 = t393 * t256 + t389 * t404;
t222 = -t389 * t256 + t393 * t404;
t221 = t394 * t265 + t284 * t390;
t220 = t390 * t265 - t284 * t394;
t219 = t392 * t294 - t445;
t218 = -t388 * t295 + t462;
t217 = -t388 * t294 - t432;
t216 = -t392 * t295 - t463;
t215 = t394 * t261 - t390 * t282;
t214 = t390 * t261 + t394 * t282;
t213 = t394 * t244 - t390 * t309;
t212 = -t388 * t276 - t432;
t211 = -t392 * t276 + t445;
t206 = t394 * t245 - t390 * t297;
t205 = t390 * t245 + t394 * t297;
t204 = t392 * t266 - t463;
t203 = -t388 * t266 - t462;
t202 = t393 * t227 + t416;
t201 = t393 * t225 - t416;
t200 = -t389 * t227 + t414;
t199 = -t389 * t225 - t414;
t198 = t393 * t210 + t444;
t197 = -t389 * t210 + t431;
t196 = -qJ(2) * t220 - t390 * t291 + t393 * t311;
t195 = -qJ(2) * t214 + t389 * t311 - t442;
t194 = t394 * t223 - t390 * t255;
t193 = -t236 * t392 - t388 * t240;
t192 = t392 * t237 + t241 * t388;
t191 = t236 * t388 - t392 * t240;
t190 = -t388 * t237 + t241 * t392;
t189 = -qJ(2) * t205 + t394 * t401;
t188 = t393 * t219 - t389 * t236;
t187 = t393 * t218 - t389 * t240;
t186 = -t389 * t219 - t393 * t236;
t185 = -t389 * t218 - t393 * t240;
t184 = t393 * t212 - t389 * t241;
t183 = -t389 * t212 - t393 * t241;
t182 = t393 * t204 - t389 * t237;
t181 = -t389 * t204 - t393 * t237;
t180 = t393 * t192 - t389 * t280;
t179 = -t389 * t192 - t393 * t280;
t178 = t394 * t202 - t390 * t226;
t177 = t394 * t201 - t390 * t224;
t176 = t393 * t193 - t389 * t259;
t175 = -t389 * t193 - t393 * t259;
t174 = t394 * t198 - t390 * t402;
t173 = t390 * t198 + t459;
t172 = t394 * t188 - t390 * t217;
t171 = t394 * t187 - t390 * t216;
t170 = t394 * t184 - t390 * t211;
t169 = t390 * t184 + t394 * t211;
t168 = t394 * t182 - t390 * t203;
t167 = t390 * t182 + t394 * t203;
t166 = t394 * t180 - t390 * t190;
t165 = t394 * t176 - t390 * t191;
t164 = t390 * t176 + t394 * t191;
t163 = -qJ(2) * t169 + t394 * t231 + t388 * t442;
t162 = -qJ(2) * t167 + t394 * t230 - t392 * t442;
t161 = -qJ(2) * t164 + t210 * t390 + t393 * t459;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t358, -t359, 0, t407, 0, 0, 0, 0, 0, 0, -t358, 0, t359, t408, 0, 0, 0, 0, 0, 0, t395 * t321 - t391 * t356, t395 * t323 + t391 * t353, t395 * t357 - t391 * t360, t395 * t279 - t433, 0, 0, 0, 0, 0, 0, t395 * t215 - t391 * t260, t395 * t221 - t391 * t264, t395 * t206 - t391 * t243, t395 * t235 - t391 * t401, 0, 0, 0, 0, 0, 0, t395 * t168 - t391 * t181, t395 * t170 - t391 * t183, t395 * t165 - t391 * t175, t395 * t174 - t391 * t197; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t359, -t358, 0, t400, 0, 0, 0, 0, 0, 0, t359, 0, t358, t457, 0, 0, 0, 0, 0, 0, t391 * t321 + t395 * t356, t391 * t323 - t395 * t353, t391 * t357 + t395 * t360, t391 * t279 + t333, 0, 0, 0, 0, 0, 0, t391 * t215 + t395 * t260, t391 * t221 + t395 * t264, t391 * t206 + t395 * t243, t391 * t235 + t395 * t401, 0, 0, 0, 0, 0, 0, t391 * t168 + t395 * t181, t391 * t170 + t395 * t183, t391 * t165 + t395 * t175, t391 * t174 + t395 * t197; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t318, t319, 0, -t278, 0, 0, 0, 0, 0, 0, t214, t220, t205, t234, 0, 0, 0, 0, 0, 0, t167, t169, t164, t173; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t359, 0, -t358, 0, -t456, -t384, -t400, 0, 0, t359, 0, 0, t358, 0, -t456, -t457, t384, g(3) * t454, t395 * t327 - t406, t395 * t306 - t391 * t361, t395 * t322 + t390 * t419, t395 * t326 + t406, t395 * t320 + t391 * t418, t391 * qJDD(3) + t395 * t347, t395 * t292 - t435, t395 * t293 - t391 * t325, t395 * t278, t278 * t454, t395 * t251 - t391 * t274, t395 * t213 - t391 * t242, t395 * t232 - t391 * t267, t395 * t250 - t391 * t272, t395 * t233 - t391 * t268, t395 * t271 - t391 * t288, t395 * t195 - t393 * t435, t395 * t196 + t389 * t435, t395 * t189 + t249 * t391, -t234 * t454, t395 * t178 - t391 * t200, t395 * t166 - t391 * t179, t395 * t171 - t391 * t185, t395 * t177 - t391 * t199, t395 * t172 - t391 * t186, t395 * t194 - t391 * t222, t395 * t162 - t391 * t228, t395 * t163 - t391 * t229, t395 * t161 + t391 * t453, -t173 * t454; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t358, 0, t359, 0, t384, -t456, t407, 0, 0, t358, 0, 0, -t359, 0, t384, t408, t456, g(3) * t455, t391 * t327 + t405, t391 * t306 + t395 * t361, t391 * t322 - t390 * t417, t391 * t326 - t405, t391 * t320 - t394 * t417, -t395 * qJDD(3) + t391 * t347, t391 * t292 + t426, t391 * t293 + t395 * t325, t391 * t278, t278 * t455, t391 * t251 + t395 * t274, t391 * t213 + t395 * t242, t391 * t232 + t395 * t267, t391 * t250 + t395 * t272, t391 * t233 + t395 * t268, t391 * t271 + t395 * t288, t391 * t195 + t393 * t426, t391 * t196 - t389 * t426, t391 * t189 - t249 * t395, -t234 * t455, t391 * t178 + t395 * t200, t391 * t166 + t395 * t179, t391 * t171 + t395 * t185, t391 * t177 + t395 * t199, t391 * t172 + t395 * t186, t391 * t194 + t395 * t222, t391 * t162 + t395 * t228, t391 * t163 + t395 * t229, t391 * t161 - t395 * t453, -t173 * t455; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t365, t366, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t403, 0, t399 + 0.2e1 * t421, qJ(2) * t336, (t354 + t410) * t390, t394 * t353 + t390 * t356, t394 * t367 + t438, (t355 - t376) * t394, t390 * t369 + t427, 0, qJ(2) * t321 + t428, qJ(2) * t323 - t439, qJ(2) * t357 + t279, qJ(2) * t279, t390 * t275 - t413, t390 * t244 + t394 * t309, t390 * t269 + t394 * t286, t390 * t273 + t413, t390 * t270 + t394 * t281, t390 * t289 + t394 * t346, qJ(2) * t215 + t389 * t441 + t429, qJ(2) * t221 + t394 * t291 + t324 * t436, qJ(2) * t206 + t390 * t401, qJ(2) * t235, t390 * t202 + t394 * t226, t390 * t180 + t394 * t190, t390 * t187 + t394 * t216, t390 * t201 + t394 * t224, t390 * t188 + t394 * t217, t390 * t223 + t394 * t255, qJ(2) * t168 + t390 * t230 + t392 * t429, qJ(2) * t170 + t390 * t231 - t388 * t429, qJ(2) * t165 - t210 * t394 + t402 * t436, qJ(2) * t174;];
tauB_reg = t1;
