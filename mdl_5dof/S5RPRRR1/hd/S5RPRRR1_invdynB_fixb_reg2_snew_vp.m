% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [1x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[dummy]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-07-18 13:26
% Revision: 08c8d617a845f5dd194efdf9aca2774760f7818f (2019-07-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRRR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(1,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [1 1]), ...
  'S5RPRRR1_invdynB_fixb_reg2_snew_vp: pkin has to be [1x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-07-18 13:26:07
% EndTime: 2019-07-18 13:26:16
% DurationCPUTime: 3.26s
% Computational Cost: add. (5209->322), mult. (9830->521), div. (0->0), fcn. (7751->8), ass. (0->260)
t388 = sin(qJ(5));
t389 = sin(qJ(4));
t393 = cos(qJ(4));
t390 = sin(qJ(3));
t424 = qJD(1) * t390;
t351 = qJD(3) * t389 + t393 * t424;
t394 = cos(qJ(3));
t373 = qJD(1) * t394 - qJD(4);
t392 = cos(qJ(5));
t315 = t351 * t388 + t392 * t373;
t317 = t351 * t392 - t373 * t388;
t287 = t317 * t315;
t422 = qJD(1) * qJD(3);
t410 = t394 * t422;
t420 = qJDD(1) * t390;
t354 = t410 + t420;
t411 = t351 * qJD(4) - t393 * qJDD(3) + t389 * t354;
t404 = qJDD(5) + t411;
t460 = -t287 + t404;
t465 = t388 * t460;
t464 = t392 * t460;
t376 = t390 * t422;
t418 = qJDD(1) * t394;
t355 = -t376 + t418;
t346 = -qJDD(4) + t355;
t349 = -t393 * qJD(3) + t389 * t424;
t436 = t349 * t351;
t398 = -t346 - t436;
t463 = t389 * t398;
t462 = t393 * t398;
t391 = sin(qJ(1));
t395 = cos(qJ(1));
t366 = g(1) * t395 + g(2) * t391;
t399 = 0.2e1 * qJD(2) * qJD(1) - t366;
t421 = qJDD(1) * qJ(2);
t336 = t399 + t421;
t325 = -g(3) * t390 + t336 * t394;
t397 = qJD(1) ^ 2;
t365 = t391 * g(1) - g(2) * t395;
t403 = -qJDD(2) + t365;
t343 = t397 * qJ(2) + t403;
t291 = t325 * t393 - t343 * t389;
t324 = g(3) * t394 + t336 * t390;
t262 = t291 * t388 - t392 * t324;
t263 = t291 * t392 + t324 * t388;
t402 = t262 * t392 - t263 * t388;
t461 = t394 * t402;
t311 = t394 * t324;
t278 = -t325 * t390 + t311;
t304 = -t349 * qJD(4) + t389 * qJDD(3) + t393 * t354;
t330 = t349 * t373;
t284 = t330 + t304;
t333 = t395 * t343;
t459 = t336 * t391 + t333;
t342 = qJD(5) + t349;
t296 = t342 * t315;
t412 = t315 * qJD(5) - t392 * t304 + t388 * t346;
t241 = t412 + t296;
t409 = t304 * t388 + t392 * t346;
t236 = (qJD(5) - t342) * t317 + t409;
t313 = t315 ^ 2;
t314 = t317 ^ 2;
t341 = t342 ^ 2;
t344 = t349 ^ 2;
t345 = t351 ^ 2;
t371 = t373 ^ 2;
t458 = t391 * g(3);
t457 = qJ(2) * t391;
t456 = qJ(2) * t395;
t253 = t287 + t404;
t455 = t253 * t388;
t454 = t253 * t392;
t290 = t325 * t389 + t393 * t343;
t453 = t290 * t389;
t452 = t290 * t390;
t451 = t290 * t392;
t450 = t290 * t393;
t449 = t290 * t394;
t298 = t346 - t436;
t448 = t298 * t389;
t447 = t298 * t393;
t446 = t324 * t390;
t445 = t324 * t391;
t444 = t324 * t395;
t441 = t342 * t388;
t440 = t342 * t392;
t439 = t343 * t390;
t438 = t343 * t391;
t437 = t343 * t394;
t435 = t351 * t373;
t372 = t394 * t397 * t390;
t363 = qJDD(3) + t372;
t434 = t363 * t390;
t364 = qJDD(3) - t372;
t433 = t364 * t390;
t432 = t364 * t394;
t431 = t373 * t389;
t430 = t373 * t393;
t386 = t390 ^ 2;
t429 = t386 * t397;
t428 = t389 * t391;
t427 = t389 * t395;
t426 = t390 * t393;
t387 = t394 ^ 2;
t425 = t386 + t387;
t419 = qJDD(1) * t391;
t417 = qJDD(1) * t395;
t416 = t389 * t287;
t415 = t393 * t287;
t414 = t390 * t436;
t413 = t394 * t436;
t279 = t394 * t325 + t446;
t408 = t395 * t336 - t438;
t407 = -t365 * t391 - t395 * t366;
t406 = t391 * t372;
t405 = t395 * t372;
t210 = t262 * t388 + t263 * t392;
t401 = -t291 * t389 + t450;
t249 = t291 * t393 + t453;
t400 = t365 * t395 - t366 * t391;
t281 = t411 + t435;
t396 = qJD(3) ^ 2;
t384 = t395 * g(3);
t381 = t387 * t397;
t370 = -t381 - t396;
t369 = t381 - t396;
t368 = -t396 - t429;
t367 = t396 - t429;
t361 = t381 - t429;
t360 = t381 + t429;
t359 = -t391 * t397 + t417;
t358 = t395 * t397 + t419;
t357 = t425 * qJDD(1);
t356 = -0.2e1 * t376 + t418;
t353 = 0.2e1 * t410 + t420;
t348 = t394 * t363;
t347 = t425 * t422;
t329 = -t345 + t371;
t328 = t344 - t371;
t327 = t354 * t394 - t386 * t422;
t326 = -t355 * t390 - t387 * t422;
t323 = -t368 * t390 - t432;
t322 = -t367 * t390 + t348;
t321 = t370 * t394 - t434;
t320 = t369 * t394 - t433;
t319 = t368 * t394 - t433;
t318 = t370 * t390 + t348;
t309 = -t345 + t344;
t308 = -t345 - t371;
t306 = -t353 * t390 + t356 * t394;
t305 = -t371 - t344;
t297 = t344 + t345;
t295 = -t314 + t341;
t294 = t313 - t341;
t293 = -qJ(2) * t319 - t437;
t292 = -qJ(2) * t318 - t439;
t289 = (t349 * t393 - t351 * t389) * t373;
t288 = (-t349 * t389 - t351 * t393) * t373;
t286 = t330 - t304;
t282 = -t411 + t435;
t280 = -t314 + t313;
t276 = -t314 - t341;
t275 = t304 * t393 + t351 * t431;
t274 = -t304 * t389 + t351 * t430;
t273 = -t349 * t430 + t389 * t411;
t272 = t349 * t431 + t393 * t411;
t271 = t289 * t394 - t346 * t390;
t270 = t328 * t393 + t448;
t269 = -t329 * t389 + t462;
t268 = -t328 * t389 + t447;
t267 = -t329 * t393 - t463;
t266 = -t341 - t313;
t265 = -t308 * t389 + t447;
t264 = -t308 * t393 - t448;
t261 = t305 * t393 - t463;
t260 = -t305 * t389 - t462;
t259 = t313 + t314;
t257 = -qJD(5) * t317 - t409;
t256 = (-t315 * t392 + t317 * t388) * t342;
t255 = (t315 * t388 + t317 * t392) * t342;
t251 = t275 * t394 + t414;
t250 = t273 * t394 - t414;
t245 = -t281 * t393 - t286 * t389;
t244 = t282 * t393 - t284 * t389;
t243 = t281 * t389 - t286 * t393;
t242 = -t282 * t389 - t393 * t284;
t240 = -t296 + t412;
t237 = (-qJD(5) - t342) * t317 - t409;
t235 = t249 * t394 + t446;
t234 = t249 * t390 - t311;
t233 = t270 * t394 - t281 * t390;
t232 = t269 * t394 - t286 * t390;
t231 = -t263 * t389 + t392 * t450;
t230 = -t262 * t389 + t388 * t450;
t229 = -t263 * t393 - t389 * t451;
t228 = -t262 * t393 - t388 * t453;
t227 = -t317 * t441 - t392 * t412;
t226 = -t317 * t440 + t388 * t412;
t225 = -t257 * t388 + t315 * t440;
t224 = -t257 * t392 - t315 * t441;
t223 = t256 * t393 + t389 * t404;
t222 = -t256 * t389 + t393 * t404;
t221 = t265 * t394 + t284 * t390;
t220 = t265 * t390 - t284 * t394;
t219 = t294 * t392 - t455;
t218 = -t295 * t388 + t464;
t217 = -t294 * t388 - t454;
t216 = -t295 * t392 - t465;
t215 = t261 * t394 - t282 * t390;
t214 = t261 * t390 + t282 * t394;
t213 = t244 * t394 - t309 * t390;
t212 = -t276 * t388 - t454;
t211 = -t276 * t392 + t455;
t206 = t245 * t394 - t297 * t390;
t205 = t245 * t390 + t297 * t394;
t204 = t266 * t392 - t465;
t203 = -t266 * t388 - t464;
t202 = t227 * t393 + t416;
t201 = t225 * t393 - t416;
t200 = -t227 * t389 + t415;
t199 = -t225 * t389 - t415;
t198 = t210 * t393 + t453;
t197 = -t210 * t389 + t450;
t196 = -qJ(2) * t220 - t291 * t390 + t311 * t393;
t195 = -qJ(2) * t214 + t311 * t389 - t452;
t194 = t223 * t394 - t255 * t390;
t193 = -t236 * t392 - t240 * t388;
t192 = t237 * t392 + t241 * t388;
t191 = t236 * t388 - t240 * t392;
t190 = -t237 * t388 + t241 * t392;
t189 = -qJ(2) * t205 + t394 * t401;
t188 = t219 * t393 - t236 * t389;
t187 = t218 * t393 - t240 * t389;
t186 = -t219 * t389 - t236 * t393;
t185 = -t218 * t389 - t240 * t393;
t184 = t212 * t393 - t241 * t389;
t183 = -t212 * t389 - t241 * t393;
t182 = t204 * t393 - t237 * t389;
t181 = -t204 * t389 - t237 * t393;
t180 = t192 * t393 - t280 * t389;
t179 = -t192 * t389 - t280 * t393;
t178 = t202 * t394 - t226 * t390;
t177 = t201 * t394 - t224 * t390;
t176 = t193 * t393 - t259 * t389;
t175 = -t193 * t389 - t259 * t393;
t174 = t198 * t394 - t390 * t402;
t173 = t198 * t390 + t461;
t172 = t188 * t394 - t217 * t390;
t171 = t187 * t394 - t216 * t390;
t170 = t184 * t394 - t211 * t390;
t169 = t184 * t390 + t211 * t394;
t168 = t182 * t394 - t203 * t390;
t167 = t182 * t390 + t203 * t394;
t166 = t180 * t394 - t190 * t390;
t165 = t176 * t394 - t191 * t390;
t164 = t176 * t390 + t191 * t394;
t163 = -qJ(2) * t169 + t231 * t394 + t388 * t452;
t162 = -qJ(2) * t167 + t230 * t394 - t390 * t451;
t161 = -qJ(2) * t164 + t210 * t390 + t393 * t461;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t358, -t359, 0, t407, 0, 0, 0, 0, 0, 0, -t358, 0, t359, t408, 0, 0, 0, 0, 0, 0, t321 * t395 - t356 * t391, t323 * t395 + t353 * t391, t357 * t395 - t360 * t391, t279 * t395 - t438, 0, 0, 0, 0, 0, 0, t215 * t395 - t260 * t391, t221 * t395 - t264 * t391, t206 * t395 - t243 * t391, t235 * t395 - t391 * t401, 0, 0, 0, 0, 0, 0, t168 * t395 - t181 * t391, t170 * t395 - t183 * t391, t165 * t395 - t175 * t391, t174 * t395 - t391 * t197; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t359, -t358, 0, t400, 0, 0, 0, 0, 0, 0, t359, 0, t358, t459, 0, 0, 0, 0, 0, 0, t321 * t391 + t356 * t395, t323 * t391 - t353 * t395, t357 * t391 + t360 * t395, t279 * t391 + t333, 0, 0, 0, 0, 0, 0, t215 * t391 + t260 * t395, t221 * t391 + t264 * t395, t206 * t391 + t243 * t395, t235 * t391 + t395 * t401, 0, 0, 0, 0, 0, 0, t168 * t391 + t181 * t395, t170 * t391 + t183 * t395, t165 * t391 + t175 * t395, t174 * t391 + t197 * t395; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t318, t319, 0, -t278, 0, 0, 0, 0, 0, 0, t214, t220, t205, t234, 0, 0, 0, 0, 0, 0, t167, t169, t164, t173; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t359, 0, -t358, 0, -t458, -t384, -t400, 0, 0, t359, 0, 0, t358, 0, -t458, -t459, t384, g(3) * t456, t327 * t395 - t406, t306 * t395 - t361 * t391, t322 * t395 + t390 * t419, t326 * t395 + t406, t320 * t395 + t391 * t418, qJDD(3) * t391 + t347 * t395, t292 * t395 - t445, t293 * t395 - t325 * t391, t395 * t278, t278 * t456, t251 * t395 - t274 * t391, t213 * t395 - t242 * t391, t232 * t395 - t267 * t391, t250 * t395 - t272 * t391, t233 * t395 - t268 * t391, t271 * t395 - t288 * t391, t195 * t395 - t393 * t445, t196 * t395 + t324 * t428, t189 * t395 + t249 * t391, -t234 * t456, t178 * t395 - t200 * t391, t166 * t395 - t179 * t391, t171 * t395 - t185 * t391, t177 * t395 - t199 * t391, t172 * t395 - t186 * t391, t194 * t395 - t222 * t391, t162 * t395 - t228 * t391, t163 * t395 - t229 * t391, t161 * t395 + t402 * t428, -t173 * t456; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t358, 0, t359, 0, t384, -t458, t407, 0, 0, t358, 0, 0, -t359, 0, t384, t408, t458, g(3) * t457, t327 * t391 + t405, t306 * t391 + t361 * t395, t322 * t391 - t390 * t417, t326 * t391 - t405, t320 * t391 - t394 * t417, -qJDD(3) * t395 + t347 * t391, t292 * t391 + t444, t293 * t391 + t325 * t395, t391 * t278, t278 * t457, t251 * t391 + t274 * t395, t213 * t391 + t242 * t395, t232 * t391 + t267 * t395, t250 * t391 + t272 * t395, t233 * t391 + t268 * t395, t271 * t391 + t288 * t395, t195 * t391 + t393 * t444, t196 * t391 - t324 * t427, t189 * t391 - t249 * t395, -t234 * t457, t178 * t391 + t200 * t395, t166 * t391 + t179 * t395, t171 * t391 + t185 * t395, t177 * t391 + t199 * t395, t172 * t391 + t186 * t395, t194 * t391 + t222 * t395, t162 * t391 + t228 * t395, t163 * t391 + t229 * t395, t161 * t391 - t402 * t427, -t173 * t457; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t365, t366, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t403, 0, t399 + 0.2e1 * t421, qJ(2) * t336, (t354 + t410) * t390, t353 * t394 + t356 * t390, t367 * t394 + t434, (t355 - t376) * t394, t369 * t390 + t432, 0, qJ(2) * t321 + t437, qJ(2) * t323 - t439, qJ(2) * t357 + t279, qJ(2) * t279, t275 * t390 - t413, t244 * t390 + t309 * t394, t269 * t390 + t286 * t394, t273 * t390 + t413, t270 * t390 + t281 * t394, t289 * t390 + t346 * t394, qJ(2) * t215 + t389 * t446 + t449, qJ(2) * t221 + t291 * t394 + t324 * t426, qJ(2) * t206 + t390 * t401, qJ(2) * t235, t202 * t390 + t226 * t394, t180 * t390 + t190 * t394, t187 * t390 + t216 * t394, t201 * t390 + t224 * t394, t188 * t390 + t217 * t394, t223 * t390 + t255 * t394, qJ(2) * t168 + t230 * t390 + t392 * t449, qJ(2) * t170 + t231 * t390 - t388 * t449, qJ(2) * t165 - t210 * t394 + t402 * t426, qJ(2) * t174;];
tauB_reg  = t1;
