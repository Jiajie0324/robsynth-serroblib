% Calculate inertial parameters regressor of joint inertia matrix for
% S5RPRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% pkin [1x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[dummy]';
% 
% Output:
% MM_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:10
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S5RPRRR1_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(1,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR1_inertiaJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [1 1]), ...
  'S5RPRRR1_inertiaJ_reg2_slag_vp: pkin has to be [1x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
t20 = sin(qJ(5));
t23 = cos(qJ(5));
t25 = cos(qJ(3));
t43 = t25 * t23;
t22 = sin(qJ(3));
t24 = cos(qJ(4));
t47 = t24 * t22;
t4 = t20 * t47 + t43;
t63 = -0.2e1 * t4;
t21 = sin(qJ(4));
t62 = 0.2e1 * t21;
t61 = 2 * qJ(2);
t60 = t24 * t4;
t44 = t25 * t20;
t46 = t24 * t23;
t6 = t22 * t46 - t44;
t59 = t6 * t24;
t14 = t20 ^ 2;
t58 = t14 * t21;
t19 = t25 ^ 2;
t26 = qJ(2) ^ 2;
t57 = t19 * t26;
t56 = t20 * t21;
t55 = t20 * t22;
t54 = t20 * t23;
t53 = t21 * t22;
t52 = t21 * t24;
t51 = t21 * t25;
t50 = t22 * t23;
t49 = t23 * t21;
t48 = t24 * t20;
t45 = t24 * t25;
t15 = t21 ^ 2;
t18 = t24 ^ 2;
t42 = t15 + t18;
t41 = t22 * qJ(2);
t40 = t25 * qJ(2);
t39 = -0.2e1 * t52;
t38 = 0.2e1 * t52;
t37 = 0.2e1 * t22 * t25;
t36 = t6 * t56;
t35 = t15 * t55;
t34 = t15 * t50;
t33 = t20 * t49;
t32 = t21 * t47;
t31 = t15 * t40;
t30 = t21 * t40;
t29 = t24 * t40;
t16 = t22 ^ 2;
t28 = (t16 + t19) * t61;
t2 = (-t24 * t44 + t50) * qJ(2);
t3 = (t24 * t43 + t55) * qJ(2);
t27 = -t2 * t20 + t3 * t23;
t17 = t23 ^ 2;
t13 = t16 * t26;
t11 = t17 * t21;
t10 = t17 * t15;
t9 = t15 * t16;
t8 = t14 * t15;
t7 = t15 * t57;
t1 = t4 * t49;
t5 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t61, t26, t16, t37, 0, t19, 0, 0, 0, 0, t28, t13 + t57, t18 * t16, t16 * t39, -0.2e1 * t22 * t45, t9, t21 * t37, t19, t21 * t28, t24 * t28, 0, t18 * t57 + t13 + t7, t6 ^ 2, t6 * t63, 0.2e1 * t6 * t53, t4 ^ 2, t53 * t63, t9, (t2 * t22 + t4 * t40) * t62, (-t22 * t3 + t6 * t40) * t62, -0.2e1 * t2 * t6 - 0.2e1 * t3 * t4, t2 ^ 2 + t3 ^ 2 + t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t25, t22, 0, 0, 0, 0, 0, 0, 0, 0, -t45, t51, -t42 * t22, 0, 0, 0, 0, 0, 0, 0, -t35 - t60, -t34 - t59, -t1 + t36, (t27 - t29) * t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10 + t8 + t18; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22, 0, t25, 0, -t41, -t40, 0, 0, t32, (-t15 + t18) * t22, -t51, -t32, -t45, 0, -t24 * t41, t21 * t41, t42 * t40, 0, t6 * t49, -t1 - t36, t34 - t59, t4 * t56, -t35 + t60, -t32, -t2 * t24 + t20 * t31, t23 * t31 + t3 * t24, (-t2 * t23 - t20 * t3) * t21, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t15, t38, 0, t18, 0, 0, 0, 0, 0, 0, t10, -0.2e1 * t15 * t54, t23 * t39, t8, t20 * t38, t18, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, 0, -t53, -t25, -t30, -t29, 0, 0, t6 * t20, -t20 * t4 + t6 * t23, t20 * t53, -t4 * t23, t22 * t49, 0, -t23 * t30, t20 * t30, t27, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, -t21, 0, 0, 0, 0, 0, 0, 0, 0, t46, -t48, t11 + t58, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21, 0, t24, 0, 0, 0, 0, 0, t33, t11 - t58, -t48, -t33, -t46, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t14, 0.2e1 * t54, 0, t17, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6, 0, -t4, t53, t2, -t3, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t56, -t49, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, 0, -t56, -t24, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20, 0, t23, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg = t5;
