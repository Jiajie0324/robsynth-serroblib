% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [1x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[dummy]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:10
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRRR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(1,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [1 1]), ...
  'S5RPRRR1_invdynf_fixb_reg2_snew_vp: pkin has to be [1x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:10:15
% EndTime: 2019-12-05 18:10:17
% DurationCPUTime: 1.77s
% Computational Cost: add. (4559->182), mult. (8455->218), div. (0->0), fcn. (6697->8), ass. (0->136)
t884 = sin(qJ(4));
t888 = cos(qJ(4));
t885 = sin(qJ(3));
t905 = qJD(1) * t885;
t855 = -t888 * qJD(3) + t884 * t905;
t853 = qJD(5) + t855;
t919 = qJD(5) + t853;
t857 = t884 * qJD(3) + t888 * t905;
t889 = cos(qJ(3));
t873 = t889 * qJD(1) - qJD(4);
t883 = sin(qJ(5));
t887 = cos(qJ(5));
t839 = t883 * t857 + t887 * t873;
t918 = t839 ^ 2;
t841 = t887 * t857 - t883 * t873;
t917 = t841 ^ 2;
t916 = t853 ^ 2;
t915 = t855 ^ 2;
t914 = t857 ^ 2;
t913 = t873 ^ 2;
t912 = t841 * t839;
t911 = t857 * t855;
t886 = sin(qJ(1));
t890 = cos(qJ(1));
t869 = -t890 * g(1) - t886 * g(2);
t852 = qJDD(1) * qJ(2) + 0.2e1 * qJD(2) * qJD(1) + t869;
t847 = -t885 * g(3) + t889 * t852;
t868 = t886 * g(1) - t890 * g(2);
t892 = qJD(1) ^ 2;
t854 = t892 * qJ(2) - qJDD(2) + t868;
t829 = t884 * t847 + t888 * t854;
t910 = t884 * t829;
t846 = t889 * g(3) + t885 * t852;
t909 = t885 * t846;
t908 = t886 * t854;
t907 = t888 * t829;
t881 = t885 ^ 2;
t882 = t889 ^ 2;
t906 = t881 + t882;
t904 = qJD(4) + t873;
t903 = qJD(5) - t853;
t902 = qJD(1) * qJD(3);
t901 = t885 * qJDD(1);
t900 = t889 * qJDD(1);
t899 = t889 * t902;
t859 = t899 + t901;
t895 = -t884 * qJDD(3) - t888 * t859;
t835 = -t855 * qJD(4) - t895;
t877 = t885 * t902;
t896 = qJDD(4) + t877 - t900;
t898 = -t883 * t835 + t887 * t896;
t897 = -t888 * qJDD(3) + t884 * t859;
t894 = -t857 * qJD(4) - qJDD(5) - t897;
t893 = -t887 * t835 - t883 * t896;
t891 = qJD(3) ^ 2;
t872 = t889 * t892 * t885;
t871 = -t882 * t892 - t891;
t870 = -t881 * t892 - t891;
t867 = -qJDD(3) + t872;
t866 = qJDD(3) + t872;
t864 = t906 * t892;
t863 = t890 * qJDD(1) - t886 * t892;
t862 = t886 * qJDD(1) + t890 * t892;
t861 = t906 * qJDD(1);
t860 = -0.2e1 * t877 + t900;
t858 = 0.2e1 * t899 + t901;
t850 = t890 * t854;
t845 = t889 * t867 - t885 * t870;
t844 = -t885 * t866 + t889 * t871;
t843 = t885 * t867 + t889 * t870;
t842 = t889 * t866 + t885 * t871;
t838 = t889 * t846;
t837 = -t913 - t914;
t836 = -t913 - t915;
t834 = t896 - t911;
t833 = -t896 - t911;
t832 = -t914 - t915;
t830 = t888 * t847 - t884 * t854;
t828 = t904 * t855 + t895;
t827 = t855 * t873 + t835;
t826 = -t904 * t857 - t897;
t825 = (qJD(4) - t873) * t857 + t897;
t824 = t889 * t847 + t909;
t823 = t885 * t847 - t838;
t822 = -t916 - t917;
t821 = -t916 - t918;
t820 = t888 * t833 - t884 * t837;
t819 = t884 * t833 + t888 * t837;
t818 = t887 * t830 + t883 * t846;
t817 = -t883 * t830 + t887 * t846;
t816 = -t884 * t834 + t888 * t836;
t815 = t888 * t834 + t884 * t836;
t814 = -t917 - t918;
t813 = t894 - t912;
t812 = -t894 - t912;
t811 = t888 * t830 + t910;
t810 = t884 * t830 - t907;
t809 = t888 * t826 - t884 * t828;
t808 = t884 * t826 + t888 * t828;
t807 = t903 * t839 + t893;
t806 = -t919 * t839 - t893;
t805 = -t903 * t841 + t898;
t804 = t919 * t841 - t898;
t803 = t889 * t811 + t909;
t802 = t885 * t811 - t838;
t801 = t889 * t820 + t885 * t827;
t800 = t885 * t820 - t889 * t827;
t799 = t889 * t816 + t885 * t825;
t798 = t885 * t816 - t889 * t825;
t797 = t887 * t813 - t883 * t822;
t796 = t883 * t813 + t887 * t822;
t795 = -t883 * t817 + t887 * t818;
t794 = t887 * t817 + t883 * t818;
t793 = t889 * t809 + t885 * t832;
t792 = t885 * t809 - t889 * t832;
t791 = -t883 * t812 + t887 * t821;
t790 = t887 * t812 + t883 * t821;
t789 = t888 * t795 + t910;
t788 = t884 * t795 - t907;
t787 = t887 * t805 - t883 * t807;
t786 = t883 * t805 + t887 * t807;
t785 = t888 * t797 + t884 * t806;
t784 = t884 * t797 - t888 * t806;
t783 = t888 * t791 + t884 * t804;
t782 = t884 * t791 - t888 * t804;
t781 = t888 * t787 + t884 * t814;
t780 = t884 * t787 - t888 * t814;
t779 = t889 * t789 + t885 * t794;
t778 = t885 * t789 - t889 * t794;
t777 = t889 * t785 + t885 * t796;
t776 = t885 * t785 - t889 * t796;
t775 = t889 * t783 + t885 * t790;
t774 = t885 * t783 - t889 * t790;
t773 = t889 * t781 + t885 * t786;
t772 = t885 * t781 - t889 * t786;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t862, -t863, 0, -t886 * t868 + t890 * t869, 0, 0, 0, 0, 0, 0, -t862, 0, t863, t890 * t852 - t908, 0, 0, 0, 0, 0, 0, t890 * t844 - t886 * t860, t890 * t845 + t886 * t858, t890 * t861 - t886 * t864, t890 * t824 - t908, 0, 0, 0, 0, 0, 0, t890 * t799 + t886 * t815, t890 * t801 + t886 * t819, t890 * t793 + t886 * t808, t890 * t803 + t886 * t810, 0, 0, 0, 0, 0, 0, t890 * t775 + t886 * t782, t890 * t777 + t886 * t784, t890 * t773 + t886 * t780, t890 * t779 + t886 * t788; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t863, -t862, 0, t890 * t868 + t886 * t869, 0, 0, 0, 0, 0, 0, t863, 0, t862, t886 * t852 + t850, 0, 0, 0, 0, 0, 0, t886 * t844 + t890 * t860, t886 * t845 - t890 * t858, t886 * t861 + t890 * t864, t886 * t824 + t850, 0, 0, 0, 0, 0, 0, t886 * t799 - t890 * t815, t886 * t801 - t890 * t819, t886 * t793 - t890 * t808, t886 * t803 - t890 * t810, 0, 0, 0, 0, 0, 0, t886 * t775 - t890 * t782, t886 * t777 - t890 * t784, t886 * t773 - t890 * t780, t886 * t779 - t890 * t788; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t842, t843, 0, t823, 0, 0, 0, 0, 0, 0, t798, t800, t792, t802, 0, 0, 0, 0, 0, 0, t774, t776, t772, t778; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t892, -qJDD(1), 0, t869, 0, 0, 0, 0, 0, 0, -t892, 0, qJDD(1), t852, 0, 0, 0, 0, 0, 0, t844, t845, t861, t824, 0, 0, 0, 0, 0, 0, t799, t801, t793, t803, 0, 0, 0, 0, 0, 0, t775, t777, t773, t779; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t892, 0, t868, 0, 0, 0, 0, 0, 0, qJDD(1), 0, t892, t854, 0, 0, 0, 0, 0, 0, t860, -t858, t864, t854, 0, 0, 0, 0, 0, 0, -t815, -t819, -t808, -t810, 0, 0, 0, 0, 0, 0, -t782, -t784, -t780, -t788; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t842, t843, 0, t823, 0, 0, 0, 0, 0, 0, t798, t800, t792, t802, 0, 0, 0, 0, 0, 0, t774, t776, t772, t778; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t892, 0, qJDD(1), t852, 0, 0, 0, 0, 0, 0, t844, t845, t861, t824, 0, 0, 0, 0, 0, 0, t799, t801, t793, t803, 0, 0, 0, 0, 0, 0, t775, t777, t773, t779; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t842, t843, 0, t823, 0, 0, 0, 0, 0, 0, t798, t800, t792, t802, 0, 0, 0, 0, 0, 0, t774, t776, t772, t778; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), 0, -t892, -t854, 0, 0, 0, 0, 0, 0, -t860, t858, -t864, -t854, 0, 0, 0, 0, 0, 0, t815, t819, t808, t810, 0, 0, 0, 0, 0, 0, t782, t784, t780, t788; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t871, t867, t900, t847, 0, 0, 0, 0, 0, 0, t816, t820, t809, t811, 0, 0, 0, 0, 0, 0, t783, t785, t781, t789; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t866, t870, -t901, -t846, 0, 0, 0, 0, 0, 0, -t825, -t827, -t832, -t846, 0, 0, 0, 0, 0, 0, -t790, -t796, -t786, -t794; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t860, t858, -t864, -t854, 0, 0, 0, 0, 0, 0, t815, t819, t808, t810, 0, 0, 0, 0, 0, 0, t782, t784, t780, t788; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t836, t833, t826, t830, 0, 0, 0, 0, 0, 0, t791, t797, t787, t795; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t834, t837, t828, -t829, 0, 0, 0, 0, 0, 0, -t804, -t806, -t814, -t829; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t825, t827, t832, t846, 0, 0, 0, 0, 0, 0, t790, t796, t786, t794; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t821, t813, t805, t818; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t812, t822, t807, t817; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t804, t806, t814, t829;];
f_new_reg = t1;
