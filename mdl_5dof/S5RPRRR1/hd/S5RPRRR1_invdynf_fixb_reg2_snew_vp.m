% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [1x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[dummy]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-07-18 13:26
% Revision: 08c8d617a845f5dd194efdf9aca2774760f7818f (2019-07-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRRR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(1,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [1 1]), ...
  'S5RPRRR1_invdynf_fixb_reg2_snew_vp: pkin has to be [1x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-07-18 13:26:22
% EndTime: 2019-07-18 13:26:24
% DurationCPUTime: 1.92s
% Computational Cost: add. (4559->182), mult. (8455->218), div. (0->0), fcn. (6697->8), ass. (0->136)
t882 = sin(qJ(4));
t886 = cos(qJ(4));
t883 = sin(qJ(3));
t903 = qJD(1) * t883;
t853 = -t886 * qJD(3) + t882 * t903;
t851 = qJD(5) + t853;
t917 = qJD(5) + t851;
t855 = qJD(3) * t882 + t886 * t903;
t887 = cos(qJ(3));
t871 = qJD(1) * t887 - qJD(4);
t881 = sin(qJ(5));
t885 = cos(qJ(5));
t837 = t855 * t881 + t885 * t871;
t916 = t837 ^ 2;
t839 = t855 * t885 - t871 * t881;
t915 = t839 ^ 2;
t914 = t851 ^ 2;
t913 = t853 ^ 2;
t912 = t855 ^ 2;
t911 = t871 ^ 2;
t884 = sin(qJ(1));
t888 = cos(qJ(1));
t867 = -g(1) * t888 - g(2) * t884;
t850 = qJDD(1) * qJ(2) + 0.2e1 * qJD(2) * qJD(1) + t867;
t845 = -g(3) * t883 + t850 * t887;
t866 = t884 * g(1) - g(2) * t888;
t890 = qJD(1) ^ 2;
t852 = qJ(2) * t890 - qJDD(2) + t866;
t827 = t845 * t882 + t886 * t852;
t910 = t827 * t882;
t909 = t827 * t886;
t908 = t837 * t839;
t844 = g(3) * t887 + t850 * t883;
t907 = t844 * t883;
t906 = t852 * t884;
t905 = t853 * t855;
t879 = t883 ^ 2;
t880 = t887 ^ 2;
t904 = t879 + t880;
t902 = qJD(4) + t871;
t901 = qJD(5) - t851;
t900 = qJD(1) * qJD(3);
t899 = t883 * qJDD(1);
t898 = t887 * qJDD(1);
t897 = t887 * t900;
t857 = t897 + t899;
t893 = -t882 * qJDD(3) - t886 * t857;
t833 = -qJD(4) * t853 - t893;
t875 = t883 * t900;
t894 = qJDD(4) + t875 - t898;
t896 = -t881 * t833 + t885 * t894;
t895 = -t886 * qJDD(3) + t882 * t857;
t892 = -qJD(4) * t855 - qJDD(5) - t895;
t891 = -t885 * t833 - t881 * t894;
t889 = qJD(3) ^ 2;
t870 = t887 * t890 * t883;
t869 = -t880 * t890 - t889;
t868 = -t879 * t890 - t889;
t865 = -qJDD(3) + t870;
t864 = qJDD(3) + t870;
t862 = t904 * t890;
t861 = qJDD(1) * t888 - t884 * t890;
t860 = qJDD(1) * t884 + t888 * t890;
t859 = t904 * qJDD(1);
t858 = -0.2e1 * t875 + t898;
t856 = 0.2e1 * t897 + t899;
t848 = t888 * t852;
t843 = t865 * t887 - t868 * t883;
t842 = -t864 * t883 + t869 * t887;
t841 = t865 * t883 + t868 * t887;
t840 = t864 * t887 + t869 * t883;
t836 = t887 * t844;
t835 = -t911 - t912;
t834 = -t911 - t913;
t832 = t894 - t905;
t831 = -t894 - t905;
t830 = -t912 - t913;
t828 = t845 * t886 - t852 * t882;
t826 = t853 * t902 + t893;
t825 = t853 * t871 + t833;
t824 = -t855 * t902 - t895;
t823 = (qJD(4) - t871) * t855 + t895;
t822 = t845 * t887 + t907;
t821 = t845 * t883 - t836;
t820 = -t914 - t915;
t819 = -t914 - t916;
t818 = t831 * t886 - t835 * t882;
t817 = t831 * t882 + t835 * t886;
t816 = t828 * t885 + t844 * t881;
t815 = -t828 * t881 + t844 * t885;
t814 = -t832 * t882 + t834 * t886;
t813 = t832 * t886 + t834 * t882;
t812 = -t915 - t916;
t811 = t892 - t908;
t810 = -t892 - t908;
t809 = t828 * t886 + t910;
t808 = t828 * t882 - t909;
t807 = t824 * t886 - t826 * t882;
t806 = t824 * t882 + t826 * t886;
t805 = t837 * t901 + t891;
t804 = -t837 * t917 - t891;
t803 = -t839 * t901 + t896;
t802 = t839 * t917 - t896;
t801 = t809 * t887 + t907;
t800 = t809 * t883 - t836;
t799 = t818 * t887 + t825 * t883;
t798 = t818 * t883 - t825 * t887;
t797 = t814 * t887 + t823 * t883;
t796 = t814 * t883 - t823 * t887;
t795 = t811 * t885 - t820 * t881;
t794 = t811 * t881 + t820 * t885;
t793 = -t815 * t881 + t816 * t885;
t792 = t815 * t885 + t816 * t881;
t791 = t807 * t887 + t830 * t883;
t790 = t807 * t883 - t830 * t887;
t789 = -t810 * t881 + t819 * t885;
t788 = t810 * t885 + t819 * t881;
t787 = t793 * t886 + t910;
t786 = t793 * t882 - t909;
t785 = t803 * t885 - t805 * t881;
t784 = t803 * t881 + t805 * t885;
t783 = t795 * t886 + t804 * t882;
t782 = t795 * t882 - t804 * t886;
t781 = t789 * t886 + t802 * t882;
t780 = t789 * t882 - t802 * t886;
t779 = t785 * t886 + t812 * t882;
t778 = t785 * t882 - t812 * t886;
t777 = t787 * t887 + t792 * t883;
t776 = t787 * t883 - t792 * t887;
t775 = t783 * t887 + t794 * t883;
t774 = t783 * t883 - t794 * t887;
t773 = t781 * t887 + t788 * t883;
t772 = t781 * t883 - t788 * t887;
t771 = t779 * t887 + t784 * t883;
t770 = t779 * t883 - t784 * t887;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t860, -t861, 0, -t866 * t884 + t867 * t888, 0, 0, 0, 0, 0, 0, -t860, 0, t861, t850 * t888 - t906, 0, 0, 0, 0, 0, 0, t842 * t888 - t858 * t884, t843 * t888 + t856 * t884, t859 * t888 - t862 * t884, t822 * t888 - t906, 0, 0, 0, 0, 0, 0, t797 * t888 + t813 * t884, t799 * t888 + t817 * t884, t791 * t888 + t806 * t884, t801 * t888 + t808 * t884, 0, 0, 0, 0, 0, 0, t773 * t888 + t780 * t884, t775 * t888 + t782 * t884, t771 * t888 + t778 * t884, t777 * t888 + t786 * t884; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t861, -t860, 0, t866 * t888 + t867 * t884, 0, 0, 0, 0, 0, 0, t861, 0, t860, t850 * t884 + t848, 0, 0, 0, 0, 0, 0, t842 * t884 + t858 * t888, t843 * t884 - t856 * t888, t859 * t884 + t862 * t888, t822 * t884 + t848, 0, 0, 0, 0, 0, 0, t797 * t884 - t813 * t888, t799 * t884 - t817 * t888, t791 * t884 - t806 * t888, t801 * t884 - t808 * t888, 0, 0, 0, 0, 0, 0, t773 * t884 - t780 * t888, t775 * t884 - t782 * t888, t771 * t884 - t778 * t888, t777 * t884 - t786 * t888; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t840, t841, 0, t821, 0, 0, 0, 0, 0, 0, t796, t798, t790, t800, 0, 0, 0, 0, 0, 0, t772, t774, t770, t776; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t890, -qJDD(1), 0, t867, 0, 0, 0, 0, 0, 0, -t890, 0, qJDD(1), t850, 0, 0, 0, 0, 0, 0, t842, t843, t859, t822, 0, 0, 0, 0, 0, 0, t797, t799, t791, t801, 0, 0, 0, 0, 0, 0, t773, t775, t771, t777; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t890, 0, t866, 0, 0, 0, 0, 0, 0, qJDD(1), 0, t890, t852, 0, 0, 0, 0, 0, 0, t858, -t856, t862, t852, 0, 0, 0, 0, 0, 0, -t813, -t817, -t806, -t808, 0, 0, 0, 0, 0, 0, -t780, -t782, -t778, -t786; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t840, t841, 0, t821, 0, 0, 0, 0, 0, 0, t796, t798, t790, t800, 0, 0, 0, 0, 0, 0, t772, t774, t770, t776; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t890, 0, qJDD(1), t850, 0, 0, 0, 0, 0, 0, t842, t843, t859, t822, 0, 0, 0, 0, 0, 0, t797, t799, t791, t801, 0, 0, 0, 0, 0, 0, t773, t775, t771, t777; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t840, t841, 0, t821, 0, 0, 0, 0, 0, 0, t796, t798, t790, t800, 0, 0, 0, 0, 0, 0, t772, t774, t770, t776; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), 0, -t890, -t852, 0, 0, 0, 0, 0, 0, -t858, t856, -t862, -t852, 0, 0, 0, 0, 0, 0, t813, t817, t806, t808, 0, 0, 0, 0, 0, 0, t780, t782, t778, t786; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t869, t865, t898, t845, 0, 0, 0, 0, 0, 0, t814, t818, t807, t809, 0, 0, 0, 0, 0, 0, t781, t783, t779, t787; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t864, t868, -t899, -t844, 0, 0, 0, 0, 0, 0, -t823, -t825, -t830, -t844, 0, 0, 0, 0, 0, 0, -t788, -t794, -t784, -t792; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t858, t856, -t862, -t852, 0, 0, 0, 0, 0, 0, t813, t817, t806, t808, 0, 0, 0, 0, 0, 0, t780, t782, t778, t786; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t834, t831, t824, t828, 0, 0, 0, 0, 0, 0, t789, t795, t785, t793; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t832, t835, t826, -t827, 0, 0, 0, 0, 0, 0, -t802, -t804, -t812, -t827; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t823, t825, t830, t844, 0, 0, 0, 0, 0, 0, t788, t794, t784, t792; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t819, t811, t803, t816; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t810, t820, t805, t815; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t802, t804, t812, t827;];
f_new_reg  = t1;
