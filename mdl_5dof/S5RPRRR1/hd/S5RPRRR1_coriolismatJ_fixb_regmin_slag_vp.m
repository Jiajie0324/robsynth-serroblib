% Calculate minimal parameter regressor of coriolis matrix for
% S5RPRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [1x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[dummy]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x27]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-07-18 13:26
% Revision: 08c8d617a845f5dd194efdf9aca2774760f7818f (2019-07-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RPRRR1_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(1,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR1_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR1_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [1 1]), ...
  'S5RPRRR1_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [1x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-07-18 13:26:06
% EndTime: 2019-07-18 13:26:16
% DurationCPUTime: 4.12s
% Computational Cost: add. (968->339), mult. (3484->502), div. (0->0), fcn. (3309->6), ass. (0->288)
t179 = sin(qJ(3));
t180 = cos(qJ(5));
t181 = cos(qJ(4));
t321 = t180 * t181;
t262 = t179 * t321;
t177 = sin(qJ(5));
t182 = cos(qJ(3));
t317 = t182 * t177;
t102 = t262 - t317;
t334 = t102 * t181;
t178 = sin(qJ(4));
t361 = -0.2e1 * t178;
t172 = t178 ^ 2;
t175 = t181 ^ 2;
t109 = (t172 / 0.2e1 - t175 / 0.2e1) * t179;
t173 = t179 ^ 2;
t168 = t181 * t173;
t359 = t178 * qJD(1) * t168 + t109 * qJD(3);
t270 = t181 * qJD(3);
t159 = t178 * t270;
t356 = t109 * qJD(1) - t159;
t316 = t182 * t180;
t228 = t316 / 0.2e1;
t142 = t181 * t228;
t325 = t179 * t177;
t154 = t325 / 0.2e1;
t360 = t142 + t154;
t160 = t179 * t270;
t287 = qJD(4) * t182;
t162 = t178 * t287;
t358 = t160 + t162;
t324 = t179 * t181;
t235 = -t324 / 0.2e1;
t357 = -qJD(5) * t235 + t359;
t274 = t178 * qJD(5);
t355 = t274 / 0.2e1 + t356;
t171 = t177 ^ 2;
t174 = t180 ^ 2;
t149 = t174 - t171;
t354 = t149 * qJD(4);
t150 = t175 - t172;
t273 = t179 * qJD(1);
t240 = t181 * t273;
t353 = t150 * qJD(3) + t240 * t361;
t260 = t181 * t317;
t166 = t179 * t180;
t261 = qJ(2) * t166;
t89 = qJ(2) * t260 - t261;
t352 = -t89 / 0.2e1;
t104 = t181 * t316 + t325;
t91 = t104 * qJ(2);
t351 = -t91 / 0.2e1;
t350 = t102 / 0.2e1;
t236 = -t166 / 0.2e1;
t349 = -t174 / 0.2e1;
t103 = -t166 + t260;
t237 = -t334 / 0.2e1;
t322 = t180 * t172;
t198 = t179 * t322 + t237;
t263 = t177 * t324;
t100 = t263 + t316;
t339 = t100 * t181;
t2 = (-t339 / 0.2e1 - t104 / 0.2e1) * t180 + (t103 / 0.2e1 + t198) * t177;
t348 = t2 * qJD(1);
t88 = t100 * qJ(2);
t3 = (t179 * t88 - t182 * t89 + (-t100 * t179 + t103 * t182) * qJ(2)) * t178;
t347 = t3 * qJD(1);
t318 = t182 * qJ(2);
t266 = t178 * t318;
t4 = t91 * t178 * t182 - t104 * t266;
t346 = t4 * qJD(1);
t7 = -t104 * t100 - t102 * t103;
t345 = t7 * qJD(1);
t344 = t89 * t181;
t343 = t91 * t181;
t341 = qJ(2) * t172;
t234 = t324 / 0.2e1;
t218 = t177 * t234;
t268 = 0.1e1 / 0.2e1 - t172 / 0.2e1;
t10 = -t343 / 0.2e1 + (t268 * t316 + t218) * qJ(2);
t340 = t10 * qJD(1);
t338 = t100 * t182;
t337 = t102 * t177;
t336 = t102 * t178;
t335 = t102 * t180;
t333 = t103 * t179;
t332 = t104 * t177;
t232 = t321 / 0.2e1;
t217 = t179 * t232;
t11 = t344 / 0.2e1 + (-t268 * t317 + t217) * qJ(2);
t331 = t11 * qJD(1);
t188 = t179 * t172 * t349 + t102 * t232;
t15 = -t332 / 0.2e1 + t188;
t330 = t15 * qJD(1);
t264 = t178 * t166;
t16 = -t100 * t264 - t325 * t336;
t329 = t16 * qJD(1);
t147 = t172 * t317;
t320 = t181 * t103;
t17 = -t147 - t320;
t328 = t17 * qJD(1);
t327 = t177 * t100;
t326 = t178 * t179;
t323 = t180 * t100;
t176 = t182 ^ 2;
t319 = t181 * t176;
t19 = t100 * t266 - t89 * t326;
t315 = t19 * qJD(1);
t20 = (t100 * t318 - t179 * t89) * t181;
t314 = t20 * qJD(1);
t267 = t102 * t318;
t21 = -t181 * t267 + t91 * t324;
t313 = t21 * qJD(1);
t22 = (-t179 * t91 + t267) * t178;
t312 = t22 * qJD(1);
t230 = t317 / 0.2e1;
t215 = t181 * t230;
t25 = (t352 + (t215 + t236) * qJ(2)) * t178;
t311 = t25 * qJD(1);
t26 = (qJ(2) * t360 + t351) * t178;
t310 = t26 * qJD(1);
t134 = t172 * t154;
t238 = t339 / 0.2e1;
t211 = t238 + t360;
t28 = t134 + t211;
t309 = t28 * qJD(1);
t155 = -t325 / 0.2e1;
t135 = t172 * t155;
t229 = -t316 / 0.2e1;
t210 = t181 * t229 + t155 + t238;
t31 = t135 + t210;
t308 = t31 * qJD(1);
t216 = t172 * t236;
t202 = t216 + t236;
t32 = (-t102 / 0.2e1 + t230) * t181 + t202;
t307 = t32 * qJD(1);
t34 = (t350 + t230) * t181 + t202;
t306 = t34 * qJD(1);
t37 = (-t333 + t338) * t178;
t305 = t37 * qJD(1);
t38 = (-t333 - t338) * t178;
t304 = t38 * qJD(1);
t265 = t104 * t326;
t70 = t182 * t336;
t39 = t70 + t265;
t303 = t39 * qJD(1);
t40 = -t70 + t265;
t302 = t40 * qJD(1);
t137 = t178 * t228;
t196 = (t177 * t235 + t100 / 0.2e1) * t178;
t42 = t137 + t196;
t301 = t42 * qJD(1);
t233 = -t321 / 0.2e1;
t204 = t179 * t233 + t350;
t231 = -t317 / 0.2e1;
t49 = (t231 + t204) * t178;
t300 = t49 * qJD(1);
t52 = t173 * t172 * t177 - t100 * t324;
t299 = t52 * qJD(1);
t53 = -t102 * t324 + t173 * t322;
t298 = t53 * qJD(1);
t148 = t172 * t316;
t87 = t104 * t181;
t54 = -t148 - t87;
t297 = t54 * qJD(1);
t296 = t173 + t176;
t151 = t176 - t173;
t295 = qJ(2) * qJD(1);
t294 = qJD(1) * t102;
t293 = qJD(2) * t179;
t292 = qJD(2) * t182;
t291 = qJD(4) * t177;
t290 = qJD(4) * t178;
t289 = qJD(4) * t180;
t288 = qJD(4) * t181;
t286 = qJD(5) * t181;
t118 = t296 * t178;
t105 = qJ(2) * t118;
t285 = t105 * qJD(1);
t106 = t296 * t181 * qJ(2);
t284 = t106 * qJD(1);
t281 = t109 * qJD(4);
t280 = t118 * qJD(1);
t119 = t151 * t178;
t279 = t119 * qJD(1);
t121 = t168 + t319;
t278 = t121 * qJD(1);
t122 = -t168 + t319;
t277 = t122 * qJD(1);
t276 = t151 * qJD(1);
t275 = t178 * qJD(3);
t272 = t179 * qJD(3);
t271 = t179 * qJD(4);
t269 = t182 * qJD(1);
t170 = t182 * qJD(3);
t259 = t180 * t275;
t258 = t178 * t271;
t257 = t178 * t289;
t256 = t181 * t287;
t255 = t179 * t274;
t254 = t180 * t274;
t253 = t172 * t273;
t252 = t177 * t288;
t251 = t177 * qJD(5) * t180;
t250 = t177 * t289;
t249 = t178 * t272;
t248 = t178 * t288;
t247 = t178 * t273;
t246 = t178 * t269;
t245 = t179 * t170;
t244 = t179 * t269;
t243 = t180 * t288;
t242 = t177 * t286;
t241 = t180 * t286;
t239 = t181 * t269;
t227 = t275 / 0.2e1;
t226 = t273 / 0.2e1;
t225 = -qJD(4) + t269;
t224 = qJ(2) * t162;
t223 = t177 * t259;
t222 = t178 * t250;
t221 = t173 * t248;
t219 = t178 * t160;
t213 = 0.2e1 * t223;
t212 = -qJD(5) - t247;
t116 = t150 * t177;
t138 = t178 * t229;
t197 = (-0.3e1 / 0.2e1 * t263 - t100 / 0.2e1) * t178;
t45 = t138 + t197;
t208 = t45 * qJD(1) + t116 * qJD(3);
t120 = t180 * t175 - t322;
t203 = 0.3e1 / 0.2e1 * t262 + t350;
t47 = (t231 + t203) * t178;
t207 = t47 * qJD(1) - t120 * qJD(3);
t113 = t225 * t178;
t114 = t225 * t181;
t206 = (-qJD(5) + t270) * t178;
t205 = t291 + t294;
t201 = t181 * t231 + t166 / 0.2e1 + t216;
t200 = t179 * t114;
t199 = t247 - t270;
t117 = t150 * t173;
t195 = t117 * qJD(1) + 0.2e1 * t219;
t193 = t249 - t256;
t192 = t177 * t274 - t243;
t191 = t252 + t254;
t18 = t100 ^ 2 - t102 ^ 2;
t6 = (-t327 + t335) * t178;
t9 = -t323 - t337;
t190 = t18 * qJD(1) - t6 * qJD(3) + t9 * qJD(4);
t189 = qJD(5) + t199;
t36 = (-t323 / 0.2e1 - t337 / 0.2e1) * t178;
t50 = -t327 / 0.2e1 + t335 / 0.2e1;
t187 = -t36 * qJD(3) - t50 * qJD(4) + t100 * t294;
t108 = (t171 / 0.2e1 + t349) * t178;
t186 = t50 * qJD(1) - t108 * qJD(3) + t250;
t115 = t149 * t172;
t185 = t6 * qJD(1) + t115 * qJD(3) + 0.2e1 * t222;
t184 = -t9 * qJD(1) + t213 - t354;
t183 = t177 * qJD(3) * t322 - t36 * qJD(1) + t108 * qJD(4);
t165 = t290 / 0.2e1;
t164 = t272 / 0.2e1;
t161 = t177 * t290;
t136 = t178 * t230;
t133 = t251 * t361;
t112 = (t269 - qJD(4) / 0.2e1) * t179;
t107 = t181 * t226 + t227;
t93 = t108 * qJD(5);
t92 = qJD(4) * t234 + t182 * t227;
t48 = t178 * t204 + t136;
t46 = t178 * t203 + t136;
t44 = t137 + t197;
t43 = t138 + t196;
t41 = t50 * qJD(5);
t35 = t334 / 0.2e1 + t201;
t33 = t237 + t201;
t30 = t135 + t211;
t29 = t134 + t210;
t27 = (t351 + (t142 + t155) * qJ(2)) * t178;
t24 = (t261 / 0.2e1 + qJ(2) * t215 + t352) * t178;
t23 = t36 * qJD(5);
t14 = t332 / 0.2e1 + t188;
t13 = t343 / 0.2e1 + t228 * t341 + (t218 + t228) * qJ(2);
t12 = -t344 / 0.2e1 + t231 * t341 + (t217 + t231) * qJ(2);
t8 = t9 * qJD(5);
t5 = t6 * qJD(5);
t1 = t100 * t233 + t104 * t180 / 0.2e1 + (-t103 / 0.2e1 + t198) * t177;
t51 = [0, 0, 0, 0, qJD(2), qJ(2) * qJD(2), t245, t151 * qJD(3), 0, 0, 0, 0, 0, t175 * t245 - t221, -t117 * qJD(4) - 0.2e1 * t182 * t219, -t122 * qJD(3) + t162 * t179, t119 * qJD(3) + t179 * t256, -t245, t118 * qJD(2) + t106 * qJD(4), t121 * qJD(2) - t105 * qJD(4), (qJD(3) * t104 - t100 * qJD(5) - t179 * t257) * t102, t7 * qJD(3) - t16 * qJD(4) + t18 * qJD(5), t39 * qJD(3) - t53 * qJD(4) - t100 * t255, t38 * qJD(3) + t52 * qJD(4) - t102 * t255, t172 * t245 + t221, t37 * qJD(2) + t3 * qJD(3) + t20 * qJD(4) + t22 * qJD(5), -t40 * qJD(2) - t4 * qJD(3) - t21 * qJD(4) - t19 * qJD(5); 0, 0, 0, 0, qJD(1), t295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t280, t278, 0, 0, 0, 0, 0, t43 * qJD(4) + t33 * qJD(5) + t305, t48 * qJD(4) + t29 * qJD(5) - t302; 0, 0, 0, 0, 0, 0, t244, t276, t170, -t272, 0, -qJ(2) * t170, qJ(2) * t272, -t281 + (t175 * t273 + t159) * t182, -0.2e1 * t179 * t248 + t182 * t353, t249 - t277, t160 + t279, -t112, (-t170 * t181 + t258) * qJ(2), (t170 * t178 + t181 * t271) * qJ(2), t14 * qJD(4) + t23 + (t259 + t294) * t104, t345 + t1 * qJD(4) - t5 + (-t103 * t180 - t332) * t275, t303 + (t148 - t87) * qJD(3) + t46 * qJD(4) + t30 * qJD(5), t304 + (-t147 + t320) * qJD(3) + t44 * qJD(4) + t35 * qJD(5), t281 + (t253 + (-t270 + qJD(5) / 0.2e1) * t178) * t182, t347 + (-t88 * t181 - t325 * t341) * qJD(3) + t24 * qJD(4) + t13 * qJD(5), -t346 + (-qJ(2) * t334 - t172 * t261) * qJD(3) + t27 * qJD(4) + t12 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t359, -t195, t179 * t113, t200, t164, qJ(2) * t193 + t284, qJ(2) * t358 - t285, t14 * qJD(3) - t205 * t264 + t41, t1 * qJD(3) - t149 * t258 - t329 + t8, t46 * qJD(3) + t179 * t252 - t298, t44 * qJD(3) + t179 * t243 + t299, t357, t43 * qJD(2) + t24 * qJD(3) + t192 * t318 + t314, t48 * qJD(2) + t27 * qJD(3) + t191 * t318 - t313; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t187, t190, t30 * qJD(3) + t100 * t212, t35 * qJD(3) + t102 * t212, t92, t33 * qJD(2) + t13 * qJD(3) - t91 * qJD(5) + t177 * t224 + t312, t29 * qJD(2) + t12 * qJD(3) + t89 * qJD(5) + t180 * t224 - t315; 0, 0, 0, 0, -qJD(1), -t295, 0, 0, 0, 0, 0, t272, t170, 0, 0, 0, 0, 0, -t280 + t358, -t193 - t278, 0, 0, 0, 0, 0, t17 * qJD(3) + t42 * qJD(4) + t32 * qJD(5) - t305, t54 * qJD(3) + t49 * qJD(4) + t28 * qJD(5) + t302; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t273, t269, 0, 0, 0, 0, 0, t240, -t247, 0, 0, 0, 0, 0, t328, t297; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, t114, 0, 0, 0, 0, 0, -t242 - t257 + t301, t161 - t241 + t300; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t191 + t307, t192 + t309; 0, 0, 0, 0, 0, 0, -t244, -t276, 0, 0, 0, -t293, -t292, -t175 * t244 - t281, 0.2e1 * t178 * t200, -t256 + t277, t162 - t279, t112, -t181 * t293, t178 * t293, t15 * qJD(4) - t104 * t294 + t23, t2 * qJD(4) - t345 - t5, t47 * qJD(4) + t31 * qJD(5) - t303, t45 * qJD(4) + t34 * qJD(5) - t304, t281 + (-t253 - t274 / 0.2e1) * t182, -t17 * qJD(2) + t25 * qJD(4) - t10 * qJD(5) - t347, -t54 * qJD(2) + t26 * qJD(4) - t11 * qJD(5) + t346; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t273, -t269, 0, 0, 0, 0, 0, -t240, t247, 0, 0, 0, 0, 0, -t328, -t297; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t248, t150 * qJD(4), 0, 0, 0, 0, 0, -t172 * t251 + t174 * t248, -t115 * qJD(5) - 0.2e1 * t181 * t222, -t120 * qJD(4) + t178 * t242, t116 * qJD(4) + t178 * t241, -t248, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t356, t353, -t114, t113, -t273 / 0.2e1, 0, 0, t330 - t93 + (t174 * t275 + t250) * t181, t348 + t133 + (-0.2e1 * t223 + t354) * t181, t161 + t207, t208 + t257, t355, t311, t310; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t183, -t185, t177 * t206 + t308, t180 * t206 + t306, -t246 / 0.2e1 + t165, -t340, -t331; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t359, t195, -t199 * t182, (-t240 - t275) * t182, t164, -t178 * t292 - t284, -t181 * t292 + t285, -t15 * qJD(3) + t247 * t335 + t41, -t2 * qJD(3) + t329 + t8, -t47 * qJD(3) + t179 * t254 + t298, -t45 * qJD(3) - t177 * t255 - t299, -t357, -t42 * qJD(2) - t25 * qJD(3) - t314, -t49 * qJD(2) - t26 * qJD(3) + t313; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t246, -t239, 0, 0, 0, 0, 0, -t301, -t300; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t356, -t353, t239, -t246, t226, 0, 0, -t159 * t174 - t330 - t93, t181 * t213 + t133 - t348, -t207 - t241, -t208 + t242, -t355, -t311, -t310; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t251, t149 * qJD(5), 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t186, -t184, t189 * t180, -t189 * t177, -t107, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t187, -t190, -t31 * qJD(3) + (qJD(1) * t100 - t289) * t326, -t34 * qJD(3) + t205 * t326, t92, -t32 * qJD(2) + t10 * qJD(3) - t312, -t28 * qJD(2) + t11 * qJD(3) + t315; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t307, -t309; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t183, t185, -t308 + (-t177 * t275 + t289) * t181, -t306 + (-t259 - t291) * t181, t246 / 0.2e1 + t165, t340, t331; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t186, t184, -t199 * t180, t199 * t177, t107, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t51;
