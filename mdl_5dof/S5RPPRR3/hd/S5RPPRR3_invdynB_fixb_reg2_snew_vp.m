% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPPRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:42
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPPRR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR3_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR3_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPPRR3_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:42:15
% EndTime: 2019-12-05 17:42:29
% DurationCPUTime: 13.52s
% Computational Cost: add. (48599->555), mult. (109665->851), div. (0->0), fcn. (77666->10), ass. (0->378)
t580 = sin(qJ(4));
t577 = cos(pkin(9));
t583 = cos(qJ(4));
t575 = sin(pkin(9));
t633 = t575 * t580;
t537 = (t577 * t583 - t633) * qJD(1);
t593 = t575 * t583 + t577 * t580;
t539 = t593 * qJD(1);
t637 = t539 * t537;
t652 = qJDD(4) + t637;
t657 = t580 * t652;
t656 = t583 * t652;
t581 = sin(qJ(1));
t584 = cos(qJ(1));
t555 = t581 * g(2) - t584 * g(3);
t638 = qJD(1) ^ 2;
t545 = -t638 * pkin(1) + t555;
t576 = sin(pkin(8));
t578 = cos(pkin(8));
t556 = t584 * g(2) + t581 * g(3);
t591 = qJDD(1) * pkin(1) + t556;
t502 = t578 * t545 + t576 * t591;
t653 = -t638 * pkin(2) + qJDD(1) * qJ(3) + 0.2e1 * qJD(1) * qJD(3) + t502;
t501 = t576 * t545 - t578 * t591;
t599 = t576 * t501 + t578 * t502;
t446 = t578 * t501 - t576 * t502;
t618 = t584 * t446;
t394 = -t581 * t599 + t618;
t624 = t581 * t446;
t395 = t584 * t599 + t624;
t579 = sin(qJ(5));
t582 = cos(qJ(5));
t484 = -t582 * t537 + t579 * t539;
t486 = t579 * t537 + t582 * t539;
t435 = t486 * t484;
t608 = qJDD(4) + qJDD(5);
t644 = -t435 + t608;
t655 = t579 * t644;
t654 = t582 * t644;
t588 = t577 ^ 2;
t568 = t588 * t638;
t586 = t575 ^ 2;
t614 = t586 * t638;
t551 = t568 + t614;
t610 = t576 * qJDD(1);
t548 = t578 * t638 + t610;
t573 = g(1) - qJDD(2);
t525 = qJ(2) * t548 - t578 * t573;
t609 = t578 * qJDD(1);
t549 = -t576 * t638 + t609;
t594 = t581 * t548 - t584 * t549;
t597 = -qJ(2) * t549 - t576 * t573;
t651 = pkin(5) * t594 + t581 * t525 + t584 * t597;
t641 = t638 * (t586 + t588);
t544 = t577 * t641;
t602 = t577 * t609;
t513 = -t576 * t544 + t602;
t515 = t578 * t544 + t577 * t610;
t650 = t584 * t513 - t581 * t515;
t649 = t581 * t513 + t584 * t515;
t508 = t584 * t548 + t581 * t549;
t648 = pkin(5) * t508 + t584 * t525 - t581 * t597;
t571 = qJD(4) + qJD(5);
t477 = t571 * t484;
t611 = qJDD(1) * t577;
t535 = qJDD(1) * t633 - t583 * t611;
t616 = t539 * qJD(4);
t496 = -t535 - t616;
t617 = t537 * qJD(4);
t642 = t593 * qJDD(1);
t498 = t642 + t617;
t590 = t484 * qJD(5) - t579 * t496 - t582 * t498;
t643 = -t477 - t590;
t600 = -t582 * t496 + t579 * t498;
t380 = (qJD(5) - t571) * t486 + t600;
t482 = t484 ^ 2;
t483 = t486 ^ 2;
t639 = t537 ^ 2;
t534 = t539 ^ 2;
t569 = t571 ^ 2;
t574 = qJDD(1) * pkin(2);
t636 = t571 * t579;
t635 = t571 * t582;
t561 = t577 * t573;
t615 = t577 * t638;
t449 = -t561 + (pkin(3) * t615 - pkin(6) * qJDD(1) - t653) * t575;
t470 = -t575 * t573 + t653 * t577;
t450 = -pkin(3) * t568 + pkin(6) * t611 + t470;
t398 = -t583 * t449 + t580 * t450;
t399 = t580 * t449 + t583 * t450;
t338 = -t583 * t398 + t580 * t399;
t634 = t575 * t338;
t481 = -t638 * qJ(3) + qJDD(3) + t501 - t574;
t632 = t576 * t481;
t631 = t577 * t338;
t630 = t578 * t481;
t468 = -pkin(3) * t611 - t551 * pkin(6) + t481;
t521 = qJD(4) * pkin(4) - t539 * pkin(7);
t397 = -t496 * pkin(4) - t639 * pkin(7) + t539 * t521 + t468;
t629 = t579 * t397;
t431 = t435 + t608;
t628 = t579 * t431;
t350 = (-t498 + t617) * pkin(7) + t652 * pkin(4) - t398;
t352 = -t639 * pkin(4) + t496 * pkin(7) - qJD(4) * t521 + t399;
t306 = -t582 * t350 + t579 * t352;
t307 = t579 * t350 + t582 * t352;
t271 = -t582 * t306 + t579 * t307;
t627 = t580 * t271;
t626 = t580 * t468;
t493 = qJDD(4) - t637;
t625 = t580 * t493;
t623 = t582 * t397;
t622 = t582 * t431;
t621 = t583 * t271;
t620 = t583 * t468;
t619 = t583 * t493;
t606 = t576 * t435;
t605 = t576 * t637;
t604 = t578 * t435;
t603 = t578 * t637;
t601 = -t481 + t574;
t272 = t579 * t306 + t582 * t307;
t339 = t580 * t398 + t583 * t399;
t469 = t653 * t575 + t561;
t420 = t575 * t469 + t577 * t470;
t553 = t581 * qJDD(1) + t584 * t638;
t598 = pkin(5) * t553 - t584 * g(1);
t419 = t577 * t469 - t575 * t470;
t519 = t548 * t577 * t575;
t520 = (-t576 * t615 + t602) * t575;
t596 = t584 * t519 + t581 * t520;
t595 = t581 * t519 - t584 * t520;
t518 = t584 * t555 - t581 * t556;
t517 = -t581 * t555 - t584 * t556;
t585 = qJD(4) ^ 2;
t566 = t588 * qJDD(1);
t565 = t586 * qJDD(1);
t554 = -t584 * qJDD(1) + t581 * t638;
t552 = t568 - t614;
t547 = t566 - t565;
t546 = t566 + t565;
t543 = t575 * t641;
t533 = -pkin(5) * t554 + t581 * g(1);
t528 = -t534 - t585;
t527 = -t534 + t585;
t526 = -t585 + t639;
t514 = t578 * t543 + t575 * t610;
t511 = t576 * t543 - t575 * t609;
t506 = t578 * t547 - t576 * t552;
t505 = t578 * t546 - t576 * t551;
t504 = t576 * t547 + t578 * t552;
t503 = t576 * t546 + t578 * t551;
t499 = -t534 + t639;
t497 = t642 + 0.2e1 * t617;
t495 = t535 + 0.2e1 * t616;
t491 = -t585 - t639;
t480 = (t537 * t583 + t539 * t580) * qJD(4);
t479 = (t537 * t580 - t539 * t583) * qJD(4);
t475 = -t483 + t569;
t474 = t482 - t569;
t473 = -t483 - t569;
t472 = -t534 - t639;
t467 = t583 * t498 - t580 * t616;
t466 = t580 * t498 + t583 * t616;
t465 = -t580 * t496 - t583 * t617;
t464 = t583 * t496 - t580 * t617;
t461 = -t581 * t511 + t584 * t514;
t459 = -t584 * t511 - t581 * t514;
t458 = -t580 * t528 - t619;
t457 = -t580 * t527 + t656;
t456 = t583 * t526 - t625;
t455 = t583 * t528 - t625;
t454 = t583 * t527 + t657;
t453 = t580 * t526 + t619;
t452 = -t581 * t503 + t584 * t505;
t451 = -t584 * t503 - t581 * t505;
t441 = -t583 * t495 - t580 * t497;
t440 = -t535 * t583 + t580 * t642;
t439 = -t580 * t495 + t583 * t497;
t438 = -t535 * t580 - t583 * t642;
t437 = t583 * t491 - t657;
t436 = t580 * t491 + t656;
t434 = pkin(1) * t573 + qJ(2) * t599;
t433 = -t483 + t482;
t429 = -t569 - t482;
t428 = -t575 * t479 + t577 * t480;
t427 = (-t484 * t582 + t486 * t579) * t571;
t426 = (-t484 * t579 - t486 * t582) * t571;
t425 = t576 * qJDD(4) + t578 * t428;
t424 = -t578 * qJDD(4) + t576 * t428;
t422 = -t486 * qJD(5) - t600;
t421 = -t482 - t483;
t417 = -pkin(6) * t455 + t620;
t416 = -t575 * t466 + t577 * t467;
t415 = -t575 * t464 + t577 * t465;
t414 = -t575 * t455 + t577 * t458;
t413 = -t575 * t454 + t577 * t457;
t412 = -t575 * t453 + t577 * t456;
t411 = t577 * t455 + t575 * t458;
t410 = t582 * t474 - t628;
t409 = -t579 * t475 + t654;
t408 = t579 * t474 + t622;
t407 = t582 * t475 + t655;
t406 = -qJ(2) * t511 - t576 * t470 + t577 * t630;
t405 = -qJ(2) * t513 - t576 * t469 + t575 * t630;
t404 = qJ(2) * t514 + t578 * t470 + t577 * t632;
t403 = -qJ(2) * t515 + t578 * t469 + t575 * t632;
t402 = -t579 * t473 - t622;
t401 = t582 * t473 - t628;
t400 = -pkin(6) * t436 + t626;
t393 = t578 * t413 + t576 * t642;
t392 = t578 * t412 - t576 * t535;
t391 = t576 * t413 - t578 * t642;
t390 = t576 * t412 + t578 * t535;
t389 = -qJ(2) * t503 + t578 * t419;
t388 = qJ(2) * t505 + t576 * t419;
t387 = -t575 * t439 + t577 * t441;
t386 = -t575 * t438 + t577 * t440;
t385 = t577 * t438 + t575 * t440;
t384 = -t477 + t590;
t379 = (qJD(5) + t571) * t486 + t600;
t378 = -pkin(3) * t497 + pkin(6) * t458 + t626;
t377 = -t575 * t436 + t577 * t437;
t376 = t577 * t436 + t575 * t437;
t375 = t578 * t416 - t605;
t374 = t578 * t415 + t605;
t373 = t576 * t416 + t603;
t372 = t576 * t415 - t603;
t371 = -t486 * t636 - t582 * t590;
t370 = t486 * t635 - t579 * t590;
t369 = -t579 * t422 + t484 * t635;
t368 = t582 * t422 + t484 * t636;
t367 = t578 * t420 + t632;
t366 = t576 * t420 - t630;
t365 = t578 * t414 + t576 * t497;
t364 = t576 * t414 - t578 * t497;
t363 = t582 * t429 - t655;
t362 = t579 * t429 + t654;
t361 = -pkin(3) * t495 + pkin(6) * t437 - t620;
t360 = -t580 * t426 + t583 * t427;
t359 = t583 * t426 + t580 * t427;
t358 = t578 * t387 - t576 * t499;
t357 = t576 * t387 + t578 * t499;
t356 = t578 * t377 + t576 * t495;
t355 = t576 * t377 - t578 * t495;
t354 = t578 * t386 + t576 * t472;
t353 = t576 * t386 - t578 * t472;
t349 = -pkin(2) * t385 - pkin(3) * t438;
t346 = -t580 * t408 + t583 * t410;
t345 = -t580 * t407 + t583 * t409;
t344 = t583 * t408 + t580 * t410;
t343 = t583 * t407 + t580 * t409;
t342 = -t580 * t401 + t583 * t402;
t341 = t583 * t401 + t580 * t402;
t340 = -pkin(7) * t401 + t623;
t337 = -t380 * t582 - t579 * t384;
t336 = -t582 * t379 - t579 * t643;
t335 = -t380 * t579 + t582 * t384;
t334 = -t579 * t379 + t582 * t643;
t333 = -pkin(7) * t362 + t629;
t332 = -t580 * t370 + t583 * t371;
t331 = -t580 * t368 + t583 * t369;
t330 = t583 * t370 + t580 * t371;
t329 = t583 * t368 + t580 * t369;
t328 = -pkin(2) * t411 - pkin(3) * t455 + t399;
t327 = -t581 * t366 + t584 * t367;
t326 = -t584 * t366 - t581 * t367;
t325 = -t581 * t364 + t584 * t365;
t324 = -t584 * t364 - t581 * t365;
t323 = -t580 * t362 + t583 * t363;
t322 = t583 * t362 + t580 * t363;
t321 = -pkin(3) * t468 + pkin(6) * t339;
t320 = -pkin(6) * t438 - t338;
t319 = -pkin(2) * t376 - pkin(3) * t436 + t398;
t318 = -t575 * t359 + t577 * t360;
t317 = t578 * t318 + t576 * t608;
t316 = t576 * t318 - t578 * t608;
t315 = -t581 * t355 + t584 * t356;
t314 = -t584 * t355 - t581 * t356;
t313 = -qJ(2) * t366 - (pkin(2) * t576 - qJ(3) * t578) * t419;
t312 = -qJ(3) * t411 - t575 * t378 + t577 * t417;
t311 = -pkin(3) * t472 + pkin(6) * t440 + t339;
t310 = -t581 * t353 + t584 * t354;
t309 = -t584 * t353 - t581 * t354;
t308 = -pkin(4) * t643 + pkin(7) * t402 + t629;
t304 = -qJ(3) * t376 - t575 * t361 + t577 * t400;
t303 = -pkin(4) * t379 + pkin(7) * t363 - t623;
t302 = qJ(2) * t367 - (-pkin(2) * t578 - qJ(3) * t576 - pkin(1)) * t419;
t301 = -t575 * t344 + t577 * t346;
t300 = -t575 * t343 + t577 * t345;
t299 = -t575 * t341 + t577 * t342;
t298 = t577 * t341 + t575 * t342;
t297 = t577 * t339 - t634;
t296 = t575 * t339 + t631;
t295 = -t580 * t335 + t583 * t337;
t294 = -t580 * t334 + t583 * t336;
t293 = t583 * t335 + t580 * t337;
t292 = t583 * t334 + t580 * t336;
t291 = t578 * t297 + t576 * t468;
t290 = t576 * t297 - t578 * t468;
t289 = -t575 * t330 + t577 * t332;
t288 = -t575 * t329 + t577 * t331;
t287 = -t575 * t322 + t577 * t323;
t286 = t577 * t322 + t575 * t323;
t285 = t578 * t301 - t576 * t380;
t284 = t578 * t300 - t576 * t384;
t283 = t576 * t301 + t578 * t380;
t282 = t576 * t300 + t578 * t384;
t281 = t578 * t299 + t576 * t643;
t280 = t576 * t299 - t578 * t643;
t279 = t578 * t289 + t606;
t278 = t578 * t288 - t606;
t277 = t576 * t289 - t604;
t276 = t576 * t288 + t604;
t275 = t578 * t287 + t576 * t379;
t274 = t576 * t287 - t578 * t379;
t273 = -pkin(2) * t296 - pkin(3) * t338;
t270 = -qJ(2) * t364 + t578 * t312 - t576 * t328;
t269 = -qJ(3) * t385 - t575 * t311 + t577 * t320;
t268 = -pkin(6) * t341 - t580 * t308 + t583 * t340;
t267 = -pkin(1) * t411 + qJ(2) * t365 + t576 * t312 + t578 * t328;
t266 = -pkin(4) * t397 + pkin(7) * t272;
t265 = -qJ(2) * t355 + t578 * t304 - t576 * t319;
t264 = -pkin(6) * t322 - t580 * t303 + t583 * t333;
t263 = -pkin(3) * t643 + pkin(6) * t342 + t583 * t308 + t580 * t340;
t262 = -pkin(1) * t376 + qJ(2) * t356 + t576 * t304 + t578 * t319;
t261 = -pkin(7) * t335 - t271;
t260 = -pkin(6) * t631 - qJ(3) * t296 - t575 * t321;
t259 = -t575 * t293 + t577 * t295;
t258 = -t575 * t292 + t577 * t294;
t257 = t577 * t293 + t575 * t295;
t256 = -pkin(3) * t379 + pkin(6) * t323 + t583 * t303 + t580 * t333;
t255 = -t581 * t290 + t584 * t291;
t254 = -t584 * t290 - t581 * t291;
t253 = -pkin(4) * t421 + pkin(7) * t337 + t272;
t252 = t578 * t258 - t576 * t433;
t251 = t576 * t258 + t578 * t433;
t250 = -qJ(2) * t353 + t578 * t269 - t576 * t349;
t249 = t578 * t259 + t576 * t421;
t248 = t576 * t259 - t578 * t421;
t247 = -pkin(2) * t298 - pkin(3) * t341 - pkin(4) * t401 + t307;
t246 = -t581 * t280 + t584 * t281;
t245 = -t584 * t280 - t581 * t281;
t244 = -pkin(1) * t385 + qJ(2) * t354 + t576 * t269 + t578 * t349;
t243 = -pkin(2) * t286 - pkin(3) * t322 - pkin(4) * t362 + t306;
t242 = -t581 * t274 + t584 * t275;
t241 = -t584 * t274 - t581 * t275;
t240 = t583 * t272 - t627;
t239 = t580 * t272 + t621;
t238 = -pkin(2) * t257 - pkin(3) * t293 - pkin(4) * t335;
t237 = -qJ(3) * t298 - t575 * t263 + t577 * t268;
t236 = -qJ(2) * t290 + t578 * t260 - t576 * t273;
t235 = -t581 * t248 + t584 * t249;
t234 = -t584 * t248 - t581 * t249;
t233 = -qJ(3) * t286 - t575 * t256 + t577 * t264;
t232 = -pkin(6) * t293 - t580 * t253 + t583 * t261;
t231 = -pkin(3) * t421 + pkin(6) * t295 + t583 * t253 + t580 * t261;
t230 = -pkin(1) * t296 + qJ(2) * t291 + t576 * t260 + t578 * t273;
t229 = -t575 * t239 + t577 * t240;
t228 = t577 * t239 + t575 * t240;
t227 = -pkin(6) * t239 - pkin(7) * t621 - t580 * t266;
t226 = t578 * t229 + t576 * t397;
t225 = t576 * t229 - t578 * t397;
t224 = -pkin(3) * t397 + pkin(6) * t240 - pkin(7) * t627 + t583 * t266;
t223 = -qJ(2) * t280 + t578 * t237 - t576 * t247;
t222 = -pkin(1) * t298 + qJ(2) * t281 + t576 * t237 + t578 * t247;
t221 = -qJ(2) * t274 + t578 * t233 - t576 * t243;
t220 = -pkin(1) * t286 + qJ(2) * t275 + t576 * t233 + t578 * t243;
t219 = -pkin(2) * t228 - pkin(3) * t239 - pkin(4) * t271;
t218 = -t581 * t225 + t584 * t226;
t217 = -t584 * t225 - t581 * t226;
t216 = -qJ(3) * t257 - t575 * t231 + t577 * t232;
t215 = -qJ(3) * t228 - t575 * t224 + t577 * t227;
t214 = -qJ(2) * t248 + t578 * t216 - t576 * t238;
t213 = -pkin(1) * t257 + qJ(2) * t249 + t576 * t216 + t578 * t238;
t212 = -qJ(2) * t225 + t578 * t215 - t576 * t219;
t211 = -pkin(1) * t228 + qJ(2) * t226 + t576 * t215 + t578 * t219;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t573, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t419, 0, 0, 0, 0, 0, 0, t376, t411, t385, t296, 0, 0, 0, 0, 0, 0, t286, t298, t257, t228; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t554, t553, 0, t517, 0, 0, 0, 0, 0, 0, t594, t508, 0, t394, 0, 0, 0, 0, 0, 0, -t650, t459, t451, t326, 0, 0, 0, 0, 0, 0, t314, t324, t309, t254, 0, 0, 0, 0, 0, 0, t241, t245, t234, t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t553, t554, 0, t518, 0, 0, 0, 0, 0, 0, -t508, t594, 0, t395, 0, 0, 0, 0, 0, 0, -t649, t461, t452, t327, 0, 0, 0, 0, 0, 0, t315, t325, t310, t255, 0, 0, 0, 0, 0, 0, t242, t246, t235, t218; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t556, -t555, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t549 - t501, -pkin(1) * t548 - t502, 0, -pkin(1) * t446, t565, 0.2e1 * t575 * t611, 0, t566, 0, 0, pkin(1) * t513 - qJ(3) * t544 + t601 * t577, pkin(1) * t511 + qJ(3) * t543 - t601 * t575, pkin(1) * t503 + pkin(2) * t551 + qJ(3) * t546 + t420, pkin(1) * t366 - pkin(2) * t481 + qJ(3) * t420, t577 * t466 + t575 * t467, t577 * t439 + t575 * t441, t577 * t454 + t575 * t457, t577 * t464 + t575 * t465, t577 * t453 + t575 * t456, t577 * t479 + t575 * t480, pkin(1) * t355 - pkin(2) * t495 + qJ(3) * t377 + t577 * t361 + t575 * t400, pkin(1) * t364 - pkin(2) * t497 + qJ(3) * t414 + t577 * t378 + t575 * t417, pkin(1) * t353 - pkin(2) * t472 + qJ(3) * t386 + t577 * t311 + t575 * t320, pkin(1) * t290 - pkin(2) * t468 - pkin(6) * t634 + qJ(3) * t297 + t577 * t321, t577 * t330 + t575 * t332, t577 * t292 + t575 * t294, t577 * t343 + t575 * t345, t577 * t329 + t575 * t331, t577 * t344 + t575 * t346, t577 * t359 + t575 * t360, pkin(1) * t274 - pkin(2) * t379 + qJ(3) * t287 + t577 * t256 + t575 * t264, pkin(1) * t280 - pkin(2) * t643 + qJ(3) * t299 + t577 * t263 + t575 * t268, pkin(1) * t248 - pkin(2) * t421 + qJ(3) * t259 + t577 * t231 + t575 * t232, pkin(1) * t225 - pkin(2) * t397 + qJ(3) * t229 + t577 * t224 + t575 * t227; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t553, 0, t554, 0, t598, t533, -t518, -pkin(5) * t518, 0, 0, -t508, 0, t594, 0, t648, -t651, -t395, -pkin(5) * t395 - qJ(2) * t624 - t584 * t434, -t596, -t584 * t504 - t581 * t506, t459, t596, t650, 0, pkin(5) * t649 - t584 * t403 - t581 * t405, -pkin(5) * t461 - t584 * t404 - t581 * t406, -pkin(5) * t452 - t584 * t388 - t581 * t389, -pkin(5) * t327 - t584 * t302 - t581 * t313, -t584 * t373 - t581 * t375, -t584 * t357 - t581 * t358, -t584 * t391 - t581 * t393, -t584 * t372 - t581 * t374, -t584 * t390 - t581 * t392, -t584 * t424 - t581 * t425, -pkin(5) * t315 - t584 * t262 - t581 * t265, -pkin(5) * t325 - t584 * t267 - t581 * t270, -pkin(5) * t310 - t584 * t244 - t581 * t250, -pkin(5) * t255 - t584 * t230 - t581 * t236, -t584 * t277 - t581 * t279, -t584 * t251 - t581 * t252, -t584 * t282 - t581 * t284, -t584 * t276 - t581 * t278, -t584 * t283 - t581 * t285, -t584 * t316 - t581 * t317, -pkin(5) * t242 - t584 * t220 - t581 * t221, -pkin(5) * t246 - t584 * t222 - t581 * t223, -pkin(5) * t235 - t584 * t213 - t581 * t214, -pkin(5) * t218 - t584 * t211 - t581 * t212; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t554, 0, -t553, 0, -t533, t598, t517, pkin(5) * t517, 0, 0, -t594, 0, -t508, 0, t651, t648, t394, pkin(5) * t394 + qJ(2) * t618 - t581 * t434, -t595, -t581 * t504 + t584 * t506, t461, t595, t649, 0, -pkin(5) * t650 - t581 * t403 + t584 * t405, pkin(5) * t459 - t581 * t404 + t584 * t406, pkin(5) * t451 - t581 * t388 + t584 * t389, pkin(5) * t326 - t581 * t302 + t584 * t313, -t581 * t373 + t584 * t375, -t581 * t357 + t584 * t358, -t581 * t391 + t584 * t393, -t581 * t372 + t584 * t374, -t581 * t390 + t584 * t392, -t581 * t424 + t584 * t425, pkin(5) * t314 - t581 * t262 + t584 * t265, pkin(5) * t324 - t581 * t267 + t584 * t270, pkin(5) * t309 - t581 * t244 + t584 * t250, pkin(5) * t254 - t581 * t230 + t584 * t236, -t581 * t277 + t584 * t279, -t581 * t251 + t584 * t252, -t581 * t282 + t584 * t284, -t581 * t276 + t584 * t278, -t581 * t283 + t584 * t285, -t581 * t316 + t584 * t317, pkin(5) * t241 - t581 * t220 + t584 * t221, pkin(5) * t245 - t581 * t222 + t584 * t223, pkin(5) * t234 - t581 * t213 + t584 * t214, pkin(5) * t217 - t581 * t211 + t584 * t212;];
tauB_reg = t1;
