% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPPRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:29
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPPRR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR3_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR3_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPPRR3_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:28:34
% EndTime: 2020-01-03 11:28:52
% DurationCPUTime: 12.88s
% Computational Cost: add. (48599->557), mult. (109665->851), div. (0->0), fcn. (77666->10), ass. (0->378)
t587 = sin(qJ(4));
t584 = cos(pkin(9));
t590 = cos(qJ(4));
t582 = sin(pkin(9));
t642 = t582 * t587;
t537 = (t584 * t590 - t642) * qJD(1);
t600 = t582 * t590 + t584 * t587;
t539 = t600 * qJD(1);
t646 = t539 * t537;
t660 = qJDD(4) + t646;
t667 = t587 * t660;
t666 = t590 * t660;
t588 = sin(qJ(1));
t591 = cos(qJ(1));
t558 = t588 * g(2) - t591 * g(3);
t647 = qJD(1) ^ 2;
t548 = -t647 * pkin(1) - t558;
t583 = sin(pkin(8));
t585 = cos(pkin(8));
t559 = t591 * g(2) + t588 * g(3);
t598 = qJDD(1) * pkin(1) - t559;
t502 = t585 * t548 + t583 * t598;
t661 = -t647 * pkin(2) + qJDD(1) * qJ(3) + 0.2e1 * qJD(1) * qJD(3) + t502;
t501 = t583 * t548 - t585 * t598;
t605 = t583 * t501 + t585 * t502;
t446 = t585 * t501 - t583 * t502;
t627 = t591 * t446;
t394 = t588 * t605 - t627;
t633 = t588 * t446;
t665 = t591 * t605 + t633;
t617 = t583 * qJDD(1);
t551 = t585 * t647 + t617;
t616 = t585 * qJDD(1);
t552 = -t583 * t647 + t616;
t508 = -t591 * t551 - t588 * t552;
t580 = g(1) - qJDD(2);
t525 = qJ(2) * t551 - t585 * t580;
t603 = -qJ(2) * t552 - t583 * t580;
t664 = pkin(5) * t508 - t591 * t525 + t588 * t603;
t586 = sin(qJ(5));
t589 = cos(qJ(5));
t484 = -t589 * t537 + t586 * t539;
t486 = t586 * t537 + t589 * t539;
t435 = t486 * t484;
t615 = qJDD(4) + qJDD(5);
t654 = -t435 + t615;
t663 = t586 * t654;
t662 = t589 * t654;
t595 = t584 ^ 2;
t571 = t595 * t647;
t593 = t582 ^ 2;
t621 = t593 * t647;
t554 = t571 + t621;
t652 = t588 * t551 - t591 * t552;
t659 = pkin(5) * t652 + t588 * t525 + t591 * t603;
t650 = t647 * (t593 + t595);
t546 = t584 * t650;
t609 = t584 * t616;
t513 = -t583 * t546 + t609;
t515 = t585 * t546 + t584 * t617;
t460 = t591 * t513 - t588 * t515;
t462 = t588 * t513 + t591 * t515;
t578 = qJD(4) + qJD(5);
t477 = t578 * t484;
t618 = qJDD(1) * t584;
t535 = qJDD(1) * t642 - t590 * t618;
t623 = t539 * qJD(4);
t496 = -t535 - t623;
t624 = t537 * qJD(4);
t651 = t600 * qJDD(1);
t498 = t651 + t624;
t597 = t484 * qJD(5) - t586 * t496 - t589 * t498;
t653 = -t477 - t597;
t606 = -t589 * t496 + t586 * t498;
t380 = (qJD(5) - t578) * t486 + t606;
t482 = t484 ^ 2;
t483 = t486 ^ 2;
t648 = t537 ^ 2;
t534 = t539 ^ 2;
t576 = t578 ^ 2;
t581 = qJDD(1) * pkin(2);
t645 = t578 * t586;
t644 = t578 * t589;
t564 = t584 * t580;
t622 = t584 * t647;
t449 = -t564 + (pkin(3) * t622 - pkin(6) * qJDD(1) - t661) * t582;
t470 = -t582 * t580 + t661 * t584;
t450 = -pkin(3) * t571 + pkin(6) * t618 + t470;
t398 = -t590 * t449 + t587 * t450;
t399 = t587 * t449 + t590 * t450;
t338 = -t590 * t398 + t587 * t399;
t643 = t582 * t338;
t481 = -t647 * qJ(3) + qJDD(3) + t501 - t581;
t641 = t583 * t481;
t640 = t584 * t338;
t639 = t585 * t481;
t468 = -pkin(3) * t618 - t554 * pkin(6) + t481;
t521 = qJD(4) * pkin(4) - pkin(7) * t539;
t397 = -t496 * pkin(4) - t648 * pkin(7) + t539 * t521 + t468;
t638 = t586 * t397;
t431 = t435 + t615;
t637 = t586 * t431;
t350 = (-t498 + t624) * pkin(7) + t660 * pkin(4) - t398;
t352 = -pkin(4) * t648 + pkin(7) * t496 - qJD(4) * t521 + t399;
t306 = -t589 * t350 + t586 * t352;
t307 = t586 * t350 + t589 * t352;
t271 = -t589 * t306 + t586 * t307;
t636 = t587 * t271;
t635 = t587 * t468;
t493 = qJDD(4) - t646;
t634 = t587 * t493;
t632 = t589 * t397;
t631 = t589 * t431;
t630 = t590 * t271;
t629 = t590 * t468;
t628 = t590 * t493;
t613 = t583 * t435;
t612 = t583 * t646;
t611 = t585 * t435;
t610 = t585 * t646;
t556 = -t588 * qJDD(1) - t591 * t647;
t608 = pkin(5) * t556 + t591 * g(1);
t607 = -t481 + t581;
t272 = t586 * t306 + t589 * t307;
t339 = t587 * t398 + t590 * t399;
t469 = t661 * t582 + t564;
t420 = t582 * t469 + t584 * t470;
t517 = -t588 * t558 - t591 * t559;
t419 = t584 * t469 - t582 * t470;
t519 = t551 * t584 * t582;
t520 = (-t583 * t622 + t609) * t582;
t602 = t591 * t519 + t588 * t520;
t601 = t588 * t519 - t591 * t520;
t518 = t591 * t558 - t588 * t559;
t592 = qJD(4) ^ 2;
t569 = t595 * qJDD(1);
t568 = t593 * qJDD(1);
t557 = t591 * qJDD(1) - t588 * t647;
t555 = t571 - t621;
t550 = t569 - t568;
t549 = t569 + t568;
t545 = t582 * t650;
t533 = pkin(5) * t557 + t588 * g(1);
t528 = -t534 - t592;
t527 = -t534 + t592;
t526 = -t592 + t648;
t514 = t585 * t545 + t582 * t617;
t511 = t583 * t545 - t582 * t616;
t506 = t585 * t550 - t583 * t555;
t505 = t585 * t549 - t583 * t554;
t504 = t583 * t550 + t585 * t555;
t503 = t583 * t549 + t585 * t554;
t499 = -t534 + t648;
t497 = t651 + 0.2e1 * t624;
t495 = t535 + 0.2e1 * t623;
t491 = -t592 - t648;
t480 = (t537 * t590 + t539 * t587) * qJD(4);
t479 = (t537 * t587 - t539 * t590) * qJD(4);
t475 = -t483 + t576;
t474 = t482 - t576;
t473 = -t483 - t576;
t472 = -t534 - t648;
t467 = t590 * t498 - t587 * t623;
t466 = t587 * t498 + t590 * t623;
t465 = -t587 * t496 - t590 * t624;
t464 = t590 * t496 - t587 * t624;
t461 = t588 * t511 - t591 * t514;
t459 = t591 * t511 + t588 * t514;
t458 = -t587 * t528 - t628;
t457 = -t587 * t527 + t666;
t456 = t590 * t526 - t634;
t455 = t590 * t528 - t634;
t454 = t590 * t527 + t667;
t453 = t587 * t526 + t628;
t452 = t588 * t503 - t591 * t505;
t451 = t591 * t503 + t588 * t505;
t441 = -t590 * t495 - t587 * t497;
t440 = -t535 * t590 + t587 * t651;
t439 = -t587 * t495 + t590 * t497;
t438 = -t535 * t587 - t590 * t651;
t437 = t590 * t491 - t667;
t436 = t587 * t491 + t666;
t434 = pkin(1) * t580 + qJ(2) * t605;
t433 = -t483 + t482;
t429 = -t576 - t482;
t428 = -t582 * t479 + t584 * t480;
t427 = (-t484 * t589 + t486 * t586) * t578;
t426 = (-t484 * t586 - t486 * t589) * t578;
t425 = t583 * qJDD(4) + t585 * t428;
t424 = -t585 * qJDD(4) + t583 * t428;
t422 = -t486 * qJD(5) - t606;
t421 = -t482 - t483;
t417 = -pkin(6) * t455 + t629;
t416 = -t582 * t466 + t584 * t467;
t415 = -t582 * t464 + t584 * t465;
t414 = -t582 * t455 + t584 * t458;
t413 = -t582 * t454 + t584 * t457;
t412 = -t582 * t453 + t584 * t456;
t411 = t584 * t455 + t582 * t458;
t410 = t589 * t474 - t637;
t409 = -t586 * t475 + t662;
t408 = t586 * t474 + t631;
t407 = t589 * t475 + t663;
t406 = -qJ(2) * t511 - t583 * t470 + t584 * t639;
t405 = -qJ(2) * t513 - t583 * t469 + t582 * t639;
t404 = qJ(2) * t514 + t585 * t470 + t584 * t641;
t403 = -qJ(2) * t515 + t585 * t469 + t582 * t641;
t402 = -t586 * t473 - t631;
t401 = t589 * t473 - t637;
t400 = -pkin(6) * t436 + t635;
t393 = t585 * t413 + t583 * t651;
t392 = t585 * t412 - t583 * t535;
t391 = t583 * t413 - t585 * t651;
t390 = t583 * t412 + t585 * t535;
t389 = -qJ(2) * t503 + t585 * t419;
t388 = qJ(2) * t505 + t583 * t419;
t387 = -t582 * t439 + t584 * t441;
t386 = -t582 * t438 + t584 * t440;
t385 = t584 * t438 + t582 * t440;
t384 = -t477 + t597;
t379 = (qJD(5) + t578) * t486 + t606;
t378 = -pkin(3) * t497 + pkin(6) * t458 + t635;
t377 = -t582 * t436 + t584 * t437;
t376 = t584 * t436 + t582 * t437;
t375 = t585 * t416 - t612;
t374 = t585 * t415 + t612;
t373 = t583 * t416 + t610;
t372 = t583 * t415 - t610;
t371 = -t486 * t645 - t589 * t597;
t370 = t486 * t644 - t586 * t597;
t369 = -t586 * t422 + t484 * t644;
t368 = t589 * t422 + t484 * t645;
t367 = t585 * t420 + t641;
t366 = t583 * t420 - t639;
t365 = t585 * t414 + t583 * t497;
t364 = t583 * t414 - t585 * t497;
t363 = t589 * t429 - t663;
t362 = t586 * t429 + t662;
t361 = -pkin(3) * t495 + pkin(6) * t437 - t629;
t360 = -t587 * t426 + t590 * t427;
t359 = t590 * t426 + t587 * t427;
t358 = t585 * t387 - t583 * t499;
t357 = t583 * t387 + t585 * t499;
t356 = t585 * t377 + t583 * t495;
t355 = t583 * t377 - t585 * t495;
t354 = t585 * t386 + t583 * t472;
t353 = t583 * t386 - t585 * t472;
t349 = -pkin(2) * t385 - pkin(3) * t438;
t346 = -t587 * t408 + t590 * t410;
t345 = -t587 * t407 + t590 * t409;
t344 = t590 * t408 + t587 * t410;
t343 = t590 * t407 + t587 * t409;
t342 = -t587 * t401 + t590 * t402;
t341 = t590 * t401 + t587 * t402;
t340 = -pkin(7) * t401 + t632;
t337 = -t380 * t589 - t586 * t384;
t336 = -t589 * t379 - t586 * t653;
t335 = -t380 * t586 + t589 * t384;
t334 = -t586 * t379 + t589 * t653;
t333 = -pkin(7) * t362 + t638;
t332 = -t587 * t370 + t590 * t371;
t331 = -t587 * t368 + t590 * t369;
t330 = t590 * t370 + t587 * t371;
t329 = t590 * t368 + t587 * t369;
t328 = -pkin(2) * t411 - pkin(3) * t455 + t399;
t327 = t588 * t366 - t591 * t367;
t326 = t591 * t366 + t588 * t367;
t325 = t588 * t364 - t591 * t365;
t324 = t591 * t364 + t588 * t365;
t323 = -t587 * t362 + t590 * t363;
t322 = t590 * t362 + t587 * t363;
t321 = -pkin(3) * t468 + pkin(6) * t339;
t320 = -pkin(6) * t438 - t338;
t319 = -pkin(2) * t376 - pkin(3) * t436 + t398;
t318 = -t582 * t359 + t584 * t360;
t317 = t585 * t318 + t583 * t615;
t316 = t583 * t318 - t585 * t615;
t315 = t588 * t355 - t591 * t356;
t314 = t591 * t355 + t588 * t356;
t313 = -qJ(2) * t366 - (pkin(2) * t583 - qJ(3) * t585) * t419;
t312 = -qJ(3) * t411 - t582 * t378 + t584 * t417;
t311 = -pkin(3) * t472 + pkin(6) * t440 + t339;
t310 = t588 * t353 - t591 * t354;
t309 = t591 * t353 + t588 * t354;
t308 = -pkin(4) * t653 + pkin(7) * t402 + t638;
t304 = -qJ(3) * t376 - t582 * t361 + t584 * t400;
t303 = -pkin(4) * t379 + pkin(7) * t363 - t632;
t302 = qJ(2) * t367 - (-pkin(2) * t585 - qJ(3) * t583 - pkin(1)) * t419;
t301 = -t582 * t344 + t584 * t346;
t300 = -t582 * t343 + t584 * t345;
t299 = -t582 * t341 + t584 * t342;
t298 = t584 * t341 + t582 * t342;
t297 = t584 * t339 - t643;
t296 = t582 * t339 + t640;
t295 = -t587 * t335 + t590 * t337;
t294 = -t587 * t334 + t590 * t336;
t293 = t590 * t335 + t587 * t337;
t292 = t590 * t334 + t587 * t336;
t291 = t585 * t297 + t583 * t468;
t290 = t583 * t297 - t585 * t468;
t289 = -t582 * t330 + t584 * t332;
t288 = -t582 * t329 + t584 * t331;
t287 = -t582 * t322 + t584 * t323;
t286 = t584 * t322 + t582 * t323;
t285 = t585 * t301 - t583 * t380;
t284 = t585 * t300 - t583 * t384;
t283 = t583 * t301 + t585 * t380;
t282 = t583 * t300 + t585 * t384;
t281 = t585 * t299 + t583 * t653;
t280 = t583 * t299 - t585 * t653;
t279 = t585 * t289 + t613;
t278 = t585 * t288 - t613;
t277 = t583 * t289 - t611;
t276 = t583 * t288 + t611;
t275 = t585 * t287 + t583 * t379;
t274 = t583 * t287 - t585 * t379;
t273 = -pkin(2) * t296 - pkin(3) * t338;
t270 = -qJ(2) * t364 + t585 * t312 - t583 * t328;
t269 = -qJ(3) * t385 - t582 * t311 + t584 * t320;
t268 = -pkin(6) * t341 - t587 * t308 + t590 * t340;
t267 = -pkin(1) * t411 + qJ(2) * t365 + t583 * t312 + t585 * t328;
t266 = -pkin(4) * t397 + pkin(7) * t272;
t265 = -qJ(2) * t355 + t585 * t304 - t583 * t319;
t264 = -pkin(6) * t322 - t587 * t303 + t590 * t333;
t263 = -pkin(3) * t653 + pkin(6) * t342 + t590 * t308 + t587 * t340;
t262 = -pkin(1) * t376 + qJ(2) * t356 + t583 * t304 + t585 * t319;
t261 = -pkin(7) * t335 - t271;
t260 = -pkin(6) * t640 - qJ(3) * t296 - t582 * t321;
t259 = -t582 * t293 + t584 * t295;
t258 = -t582 * t292 + t584 * t294;
t257 = t584 * t293 + t582 * t295;
t256 = -pkin(3) * t379 + pkin(6) * t323 + t590 * t303 + t587 * t333;
t255 = t588 * t290 - t591 * t291;
t254 = t591 * t290 + t588 * t291;
t253 = -pkin(4) * t421 + pkin(7) * t337 + t272;
t252 = t585 * t258 - t583 * t433;
t251 = t583 * t258 + t585 * t433;
t250 = -qJ(2) * t353 + t585 * t269 - t583 * t349;
t249 = t585 * t259 + t583 * t421;
t248 = t583 * t259 - t585 * t421;
t247 = -pkin(2) * t298 - pkin(3) * t341 - pkin(4) * t401 + t307;
t246 = t588 * t280 - t591 * t281;
t245 = t591 * t280 + t588 * t281;
t244 = -pkin(1) * t385 + qJ(2) * t354 + t583 * t269 + t585 * t349;
t243 = -pkin(2) * t286 - pkin(3) * t322 - pkin(4) * t362 + t306;
t242 = t588 * t274 - t591 * t275;
t241 = t591 * t274 + t588 * t275;
t240 = t590 * t272 - t636;
t239 = t587 * t272 + t630;
t238 = -pkin(2) * t257 - pkin(3) * t293 - pkin(4) * t335;
t237 = -qJ(3) * t298 - t582 * t263 + t584 * t268;
t236 = -qJ(2) * t290 + t585 * t260 - t583 * t273;
t235 = t588 * t248 - t591 * t249;
t234 = t591 * t248 + t588 * t249;
t233 = -qJ(3) * t286 - t582 * t256 + t584 * t264;
t232 = -pkin(6) * t293 - t587 * t253 + t590 * t261;
t231 = -pkin(3) * t421 + pkin(6) * t295 + t590 * t253 + t587 * t261;
t230 = -pkin(1) * t296 + qJ(2) * t291 + t583 * t260 + t585 * t273;
t229 = -t582 * t239 + t584 * t240;
t228 = t584 * t239 + t582 * t240;
t227 = -pkin(6) * t239 - pkin(7) * t630 - t587 * t266;
t226 = t585 * t229 + t583 * t397;
t225 = t583 * t229 - t585 * t397;
t224 = -pkin(3) * t397 + pkin(6) * t240 - pkin(7) * t636 + t590 * t266;
t223 = -qJ(2) * t280 + t585 * t237 - t583 * t247;
t222 = -pkin(1) * t298 + qJ(2) * t281 + t583 * t237 + t585 * t247;
t221 = -qJ(2) * t274 + t585 * t233 - t583 * t243;
t220 = -pkin(1) * t286 + qJ(2) * t275 + t583 * t233 + t585 * t243;
t219 = -pkin(2) * t228 - pkin(3) * t239 - pkin(4) * t271;
t218 = t588 * t225 - t591 * t226;
t217 = t591 * t225 + t588 * t226;
t216 = -qJ(3) * t257 - t582 * t231 + t584 * t232;
t215 = -qJ(3) * t228 - t582 * t224 + t584 * t227;
t214 = -qJ(2) * t248 + t585 * t216 - t583 * t238;
t213 = -pkin(1) * t257 + qJ(2) * t249 + t583 * t216 + t585 * t238;
t212 = -qJ(2) * t225 + t585 * t215 - t583 * t219;
t211 = -pkin(1) * t228 + qJ(2) * t226 + t583 * t215 + t585 * t219;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t580, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t419, 0, 0, 0, 0, 0, 0, t376, t411, t385, t296, 0, 0, 0, 0, 0, 0, t286, t298, t257, t228; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t557, t556, 0, t517, 0, 0, 0, 0, 0, 0, -t652, t508, 0, t394, 0, 0, 0, 0, 0, 0, t460, t459, t451, t326, 0, 0, 0, 0, 0, 0, t314, t324, t309, t254, 0, 0, 0, 0, 0, 0, t241, t245, t234, t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t556, t557, 0, t518, 0, 0, 0, 0, 0, 0, -t508, -t652, 0, -t665, 0, 0, 0, 0, 0, 0, t462, t461, t452, t327, 0, 0, 0, 0, 0, 0, t315, t325, t310, t255, 0, 0, 0, 0, 0, 0, t242, t246, t235, t218; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t559, t558, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t552 - t501, -pkin(1) * t551 - t502, 0, -pkin(1) * t446, t568, 0.2e1 * t582 * t618, 0, t569, 0, 0, pkin(1) * t513 - qJ(3) * t546 + t584 * t607, pkin(1) * t511 + qJ(3) * t545 - t582 * t607, pkin(1) * t503 + pkin(2) * t554 + qJ(3) * t549 + t420, pkin(1) * t366 - pkin(2) * t481 + qJ(3) * t420, t584 * t466 + t582 * t467, t584 * t439 + t582 * t441, t584 * t454 + t582 * t457, t584 * t464 + t582 * t465, t584 * t453 + t582 * t456, t584 * t479 + t582 * t480, pkin(1) * t355 - pkin(2) * t495 + qJ(3) * t377 + t584 * t361 + t582 * t400, pkin(1) * t364 - pkin(2) * t497 + qJ(3) * t414 + t584 * t378 + t582 * t417, pkin(1) * t353 - pkin(2) * t472 + qJ(3) * t386 + t584 * t311 + t582 * t320, pkin(1) * t290 - pkin(2) * t468 - pkin(6) * t643 + qJ(3) * t297 + t584 * t321, t584 * t330 + t582 * t332, t584 * t292 + t582 * t294, t584 * t343 + t582 * t345, t584 * t329 + t582 * t331, t584 * t344 + t582 * t346, t584 * t359 + t582 * t360, pkin(1) * t274 - pkin(2) * t379 + qJ(3) * t287 + t584 * t256 + t582 * t264, pkin(1) * t280 - pkin(2) * t653 + qJ(3) * t299 + t584 * t263 + t582 * t268, pkin(1) * t248 - pkin(2) * t421 + qJ(3) * t259 + t584 * t231 + t582 * t232, pkin(1) * t225 - pkin(2) * t397 + qJ(3) * t229 + t584 * t224 + t582 * t227; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t556, 0, t557, 0, t608, -t533, -t518, -pkin(5) * t518, 0, 0, -t508, 0, -t652, 0, t664, t659, t665, pkin(5) * t665 + qJ(2) * t633 + t591 * t434, t602, t591 * t504 + t588 * t506, t459, -t602, -t460, 0, -pkin(5) * t462 + t591 * t403 + t588 * t405, -pkin(5) * t461 + t591 * t404 + t588 * t406, -pkin(5) * t452 + t591 * t388 + t588 * t389, -pkin(5) * t327 + t591 * t302 + t588 * t313, t591 * t373 + t588 * t375, t591 * t357 + t588 * t358, t591 * t391 + t588 * t393, t591 * t372 + t588 * t374, t591 * t390 + t588 * t392, t591 * t424 + t588 * t425, -pkin(5) * t315 + t591 * t262 + t588 * t265, -pkin(5) * t325 + t591 * t267 + t588 * t270, -pkin(5) * t310 + t591 * t244 + t588 * t250, -pkin(5) * t255 + t591 * t230 + t588 * t236, t591 * t277 + t588 * t279, t591 * t251 + t588 * t252, t591 * t282 + t588 * t284, t591 * t276 + t588 * t278, t591 * t283 + t588 * t285, t591 * t316 + t588 * t317, -pkin(5) * t242 + t591 * t220 + t588 * t221, -pkin(5) * t246 + t591 * t222 + t588 * t223, -pkin(5) * t235 + t591 * t213 + t588 * t214, -pkin(5) * t218 + t591 * t211 + t588 * t212; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t557, 0, -t556, 0, t533, t608, t517, pkin(5) * t517, 0, 0, t652, 0, -t508, 0, -t659, t664, t394, pkin(5) * t394 - qJ(2) * t627 + t588 * t434, t601, t588 * t504 - t591 * t506, t461, -t601, -t462, 0, pkin(5) * t460 + t588 * t403 - t591 * t405, pkin(5) * t459 + t588 * t404 - t591 * t406, pkin(5) * t451 + t588 * t388 - t591 * t389, pkin(5) * t326 + t588 * t302 - t591 * t313, t588 * t373 - t591 * t375, t588 * t357 - t591 * t358, t588 * t391 - t591 * t393, t588 * t372 - t591 * t374, t588 * t390 - t591 * t392, t588 * t424 - t591 * t425, pkin(5) * t314 + t588 * t262 - t591 * t265, pkin(5) * t324 + t588 * t267 - t591 * t270, pkin(5) * t309 + t588 * t244 - t591 * t250, pkin(5) * t254 + t588 * t230 - t591 * t236, t588 * t277 - t591 * t279, t588 * t251 - t591 * t252, t588 * t282 - t591 * t284, t588 * t276 - t591 * t278, t588 * t283 - t591 * t285, t588 * t316 - t591 * t317, pkin(5) * t241 + t588 * t220 - t591 * t221, pkin(5) * t245 + t588 * t222 - t591 * t223, pkin(5) * t234 + t588 * t213 - t591 * t214, pkin(5) * t217 + t588 * t211 - t591 * t212;];
tauB_reg = t1;
