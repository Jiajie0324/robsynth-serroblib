% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPPRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:42
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPPRR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR3_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR3_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPPRR3_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:42:47
% EndTime: 2019-12-05 17:42:50
% DurationCPUTime: 2.79s
% Computational Cost: add. (12838->201), mult. (28988->298), div. (0->0), fcn. (20569->10), ass. (0->167)
t1334 = qJD(1) ^ 2;
t1325 = cos(pkin(9));
t1318 = t1325 ^ 2;
t1323 = sin(pkin(9));
t1335 = t1323 ^ 2;
t1350 = t1318 + t1335;
t1300 = t1350 * t1334;
t1319 = qJD(4) + qJD(5);
t1368 = qJD(5) + t1319;
t1328 = sin(qJ(4));
t1331 = cos(qJ(4));
t1342 = t1323 * t1331 + t1325 * t1328;
t1367 = t1342 * qJDD(1);
t1360 = qJD(1) * t1325;
t1361 = qJD(1) * t1323;
t1288 = t1328 * t1361 - t1331 * t1360;
t1290 = t1342 * qJD(1);
t1327 = sin(qJ(5));
t1330 = cos(qJ(5));
t1261 = t1330 * t1288 + t1327 * t1290;
t1366 = t1261 ^ 2;
t1263 = -t1327 * t1288 + t1330 * t1290;
t1365 = t1263 ^ 2;
t1364 = t1288 ^ 2;
t1363 = t1290 ^ 2;
t1362 = t1319 ^ 2;
t1359 = t1263 * t1261;
t1358 = t1288 * qJD(4);
t1357 = t1290 * qJD(4);
t1356 = t1290 * t1288;
t1355 = t1318 * t1334;
t1354 = t1325 * t1334;
t1353 = t1335 * t1334;
t1352 = qJD(5) - t1319;
t1329 = sin(qJ(1));
t1332 = cos(qJ(1));
t1303 = t1329 * g(2) - t1332 * g(3);
t1296 = -t1334 * pkin(1) + t1303;
t1324 = sin(pkin(8));
t1326 = cos(pkin(8));
t1304 = t1332 * g(2) + t1329 * g(3);
t1341 = qJDD(1) * pkin(1) + t1304;
t1274 = t1326 * t1296 + t1324 * t1341;
t1264 = -t1334 * pkin(2) + qJDD(1) * qJ(3) + t1274;
t1321 = -g(1) + qJDD(2);
t1351 = -0.2e1 * qJD(3) * t1361 + t1325 * t1321;
t1248 = (pkin(3) * t1354 - pkin(6) * qJDD(1) - t1264) * t1323 + t1351;
t1254 = 0.2e1 * qJD(3) * t1360 + t1325 * t1264 + t1323 * t1321;
t1315 = t1325 * qJDD(1);
t1249 = -pkin(3) * t1355 + pkin(6) * t1315 + t1254;
t1228 = t1328 * t1248 + t1331 * t1249;
t1349 = t1323 * qJDD(1);
t1348 = t1324 * qJDD(1);
t1347 = t1326 * qJDD(1);
t1346 = -qJDD(4) - qJDD(5);
t1227 = t1331 * t1248 - t1328 * t1249;
t1272 = t1367 - t1358;
t1255 = t1331 * t1315 - t1328 * t1349;
t1339 = -t1255 + t1357;
t1345 = -t1327 * t1272 - t1330 * t1339;
t1273 = -t1324 * t1296 + t1326 * t1341;
t1268 = qJDD(4) - t1356;
t1298 = -t1326 * t1334 - t1348;
t1299 = -t1324 * t1334 + t1347;
t1344 = t1332 * t1298 - t1329 * t1299;
t1343 = -t1329 * t1298 - t1332 * t1299;
t1260 = -qJDD(1) * pkin(2) - t1334 * qJ(3) + qJDD(3) - t1273;
t1252 = -pkin(3) * t1315 + t1260 + (-t1353 - t1355) * pkin(6);
t1338 = -t1330 * t1272 + t1327 * t1339;
t1333 = qJD(4) ^ 2;
t1305 = t1323 * t1354;
t1302 = -t1332 * qJDD(1) + t1329 * t1334;
t1301 = t1329 * qJDD(1) + t1332 * t1334;
t1297 = t1350 * qJDD(1);
t1295 = t1325 * t1300;
t1294 = t1323 * t1300;
t1282 = -t1333 - t1363;
t1281 = qJD(4) * pkin(4) - t1290 * pkin(7);
t1280 = -t1326 * t1295 - t1324 * t1315;
t1279 = t1326 * t1294 + t1323 * t1348;
t1278 = -t1324 * t1295 + t1325 * t1347;
t1277 = t1324 * t1294 - t1323 * t1347;
t1276 = t1326 * t1297 - t1324 * t1300;
t1275 = t1324 * t1297 + t1326 * t1300;
t1271 = t1367 - 0.2e1 * t1358;
t1270 = -t1255 + 0.2e1 * t1357;
t1269 = -qJDD(4) - t1356;
t1267 = -t1333 - t1364;
t1257 = -t1362 - t1365;
t1256 = -t1363 - t1364;
t1253 = -t1323 * t1264 + t1351;
t1251 = t1331 * t1269 - t1328 * t1282;
t1250 = t1328 * t1269 + t1331 * t1282;
t1246 = -t1324 * t1273 + t1326 * t1274;
t1245 = t1326 * t1273 + t1324 * t1274;
t1242 = t1331 * t1255 + t1328 * t1367;
t1241 = t1328 * t1255 - t1331 * t1367;
t1240 = t1331 * t1267 - t1328 * t1268;
t1239 = t1328 * t1267 + t1331 * t1268;
t1238 = t1346 - t1359;
t1237 = -t1346 - t1359;
t1236 = -t1362 - t1366;
t1235 = -t1365 - t1366;
t1234 = -t1323 * t1253 + t1325 * t1254;
t1233 = t1325 * t1253 + t1323 * t1254;
t1232 = -t1323 * t1250 + t1325 * t1251;
t1231 = t1325 * t1250 + t1323 * t1251;
t1230 = t1330 * t1238 - t1327 * t1257;
t1229 = t1327 * t1238 + t1330 * t1257;
t1226 = t1339 * pkin(4) - t1364 * pkin(7) + t1290 * t1281 + t1252;
t1225 = -t1323 * t1241 + t1325 * t1242;
t1224 = t1325 * t1241 + t1323 * t1242;
t1223 = t1352 * t1261 + t1338;
t1222 = -t1368 * t1261 - t1338;
t1221 = -t1352 * t1263 + t1345;
t1220 = t1368 * t1263 - t1345;
t1219 = -t1323 * t1239 + t1325 * t1240;
t1218 = t1325 * t1239 + t1323 * t1240;
t1217 = t1326 * t1234 + t1324 * t1260;
t1216 = t1324 * t1234 - t1326 * t1260;
t1215 = t1326 * t1232 + t1324 * t1271;
t1214 = t1324 * t1232 - t1326 * t1271;
t1213 = t1330 * t1236 - t1327 * t1237;
t1212 = t1327 * t1236 + t1330 * t1237;
t1211 = t1326 * t1219 + t1324 * t1270;
t1210 = t1324 * t1219 - t1326 * t1270;
t1209 = t1326 * t1225 + t1324 * t1256;
t1208 = t1324 * t1225 - t1326 * t1256;
t1207 = -t1364 * pkin(4) - t1339 * pkin(7) - qJD(4) * t1281 + t1228;
t1206 = (-t1272 - t1358) * pkin(7) + t1268 * pkin(4) + t1227;
t1205 = -t1328 * t1229 + t1331 * t1230;
t1204 = t1331 * t1229 + t1328 * t1230;
t1203 = -t1328 * t1227 + t1331 * t1228;
t1202 = t1331 * t1227 + t1328 * t1228;
t1201 = t1330 * t1221 - t1327 * t1223;
t1200 = t1327 * t1221 + t1330 * t1223;
t1199 = -t1328 * t1212 + t1331 * t1213;
t1198 = t1331 * t1212 + t1328 * t1213;
t1197 = t1327 * t1206 + t1330 * t1207;
t1196 = t1330 * t1206 - t1327 * t1207;
t1195 = -t1323 * t1204 + t1325 * t1205;
t1194 = t1325 * t1204 + t1323 * t1205;
t1193 = -t1323 * t1202 + t1325 * t1203;
t1192 = t1325 * t1202 + t1323 * t1203;
t1191 = -t1328 * t1200 + t1331 * t1201;
t1190 = t1331 * t1200 + t1328 * t1201;
t1189 = t1326 * t1193 + t1324 * t1252;
t1188 = t1324 * t1193 - t1326 * t1252;
t1187 = -t1323 * t1198 + t1325 * t1199;
t1186 = t1325 * t1198 + t1323 * t1199;
t1185 = t1326 * t1195 + t1324 * t1222;
t1184 = t1324 * t1195 - t1326 * t1222;
t1183 = t1326 * t1187 + t1324 * t1220;
t1182 = t1324 * t1187 - t1326 * t1220;
t1181 = -t1327 * t1196 + t1330 * t1197;
t1180 = t1330 * t1196 + t1327 * t1197;
t1179 = -t1323 * t1190 + t1325 * t1191;
t1178 = t1325 * t1190 + t1323 * t1191;
t1177 = t1326 * t1179 + t1324 * t1235;
t1176 = t1324 * t1179 - t1326 * t1235;
t1175 = -t1328 * t1180 + t1331 * t1181;
t1174 = t1331 * t1180 + t1328 * t1181;
t1173 = -t1323 * t1174 + t1325 * t1175;
t1172 = t1325 * t1174 + t1323 * t1175;
t1171 = t1326 * t1173 + t1324 * t1226;
t1170 = t1324 * t1173 - t1326 * t1226;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1321, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1233, 0, 0, 0, 0, 0, 0, t1218, t1231, t1224, t1192, 0, 0, 0, 0, 0, 0, t1186, t1194, t1178, t1172; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1302, t1301, 0, -t1329 * t1303 - t1332 * t1304, 0, 0, 0, 0, 0, 0, t1343, -t1344, 0, -t1332 * t1245 - t1329 * t1246, 0, 0, 0, 0, 0, 0, -t1332 * t1278 - t1329 * t1280, -t1332 * t1277 - t1329 * t1279, -t1332 * t1275 - t1329 * t1276, -t1332 * t1216 - t1329 * t1217, 0, 0, 0, 0, 0, 0, -t1332 * t1210 - t1329 * t1211, -t1332 * t1214 - t1329 * t1215, -t1332 * t1208 - t1329 * t1209, -t1332 * t1188 - t1329 * t1189, 0, 0, 0, 0, 0, 0, -t1332 * t1182 - t1329 * t1183, -t1332 * t1184 - t1329 * t1185, -t1332 * t1176 - t1329 * t1177, -t1332 * t1170 - t1329 * t1171; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1301, t1302, 0, t1332 * t1303 - t1329 * t1304, 0, 0, 0, 0, 0, 0, t1344, t1343, 0, -t1329 * t1245 + t1332 * t1246, 0, 0, 0, 0, 0, 0, -t1329 * t1278 + t1332 * t1280, -t1329 * t1277 + t1332 * t1279, -t1329 * t1275 + t1332 * t1276, -t1329 * t1216 + t1332 * t1217, 0, 0, 0, 0, 0, 0, -t1329 * t1210 + t1332 * t1211, -t1329 * t1214 + t1332 * t1215, -t1329 * t1208 + t1332 * t1209, -t1329 * t1188 + t1332 * t1189, 0, 0, 0, 0, 0, 0, -t1329 * t1182 + t1332 * t1183, -t1329 * t1184 + t1332 * t1185, -t1329 * t1176 + t1332 * t1177, -t1329 * t1170 + t1332 * t1171; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1334, -qJDD(1), 0, t1303, 0, 0, 0, 0, 0, 0, t1298, -t1299, 0, t1246, 0, 0, 0, 0, 0, 0, t1280, t1279, t1276, t1217, 0, 0, 0, 0, 0, 0, t1211, t1215, t1209, t1189, 0, 0, 0, 0, 0, 0, t1183, t1185, t1177, t1171; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1334, 0, t1304, 0, 0, 0, 0, 0, 0, t1299, t1298, 0, t1245, 0, 0, 0, 0, 0, 0, t1278, t1277, t1275, t1216, 0, 0, 0, 0, 0, 0, t1210, t1214, t1208, t1188, 0, 0, 0, 0, 0, 0, t1182, t1184, t1176, t1170; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1321, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1233, 0, 0, 0, 0, 0, 0, t1218, t1231, t1224, t1192, 0, 0, 0, 0, 0, 0, t1186, t1194, t1178, t1172; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1334, -qJDD(1), 0, t1274, 0, 0, 0, 0, 0, 0, -t1295, t1294, t1297, t1234, 0, 0, 0, 0, 0, 0, t1219, t1232, t1225, t1193, 0, 0, 0, 0, 0, 0, t1187, t1195, t1179, t1173; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1334, 0, t1273, 0, 0, 0, 0, 0, 0, t1315, -t1349, t1300, -t1260, 0, 0, 0, 0, 0, 0, -t1270, -t1271, -t1256, -t1252, 0, 0, 0, 0, 0, 0, -t1220, -t1222, -t1235, -t1226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1321, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1233, 0, 0, 0, 0, 0, 0, t1218, t1231, t1224, t1192, 0, 0, 0, 0, 0, 0, t1186, t1194, t1178, t1172; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1355, t1305, t1315, t1254, 0, 0, 0, 0, 0, 0, t1240, t1251, t1242, t1203, 0, 0, 0, 0, 0, 0, t1199, t1205, t1191, t1175; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1305, -t1353, -t1349, t1253, 0, 0, 0, 0, 0, 0, t1239, t1250, t1241, t1202, 0, 0, 0, 0, 0, 0, t1198, t1204, t1190, t1174; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1315, t1349, -t1300, t1260, 0, 0, 0, 0, 0, 0, t1270, t1271, t1256, t1252, 0, 0, 0, 0, 0, 0, t1220, t1222, t1235, t1226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1267, t1269, t1255, t1228, 0, 0, 0, 0, 0, 0, t1213, t1230, t1201, t1181; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1268, t1282, -t1367, t1227, 0, 0, 0, 0, 0, 0, t1212, t1229, t1200, t1180; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1270, t1271, t1256, t1252, 0, 0, 0, 0, 0, 0, t1220, t1222, t1235, t1226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1236, t1238, t1221, t1197; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1237, t1257, t1223, t1196; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1220, t1222, t1235, t1226;];
f_new_reg = t1;
