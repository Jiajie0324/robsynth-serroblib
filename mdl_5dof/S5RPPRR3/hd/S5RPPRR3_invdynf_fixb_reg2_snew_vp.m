% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPPRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:29
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPPRR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR3_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR3_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPPRR3_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:29:09
% EndTime: 2020-01-03 11:29:13
% DurationCPUTime: 2.96s
% Computational Cost: add. (12838->201), mult. (28988->298), div. (0->0), fcn. (20569->10), ass. (0->167)
t1358 = qJD(1) ^ 2;
t1349 = cos(pkin(9));
t1342 = t1349 ^ 2;
t1347 = sin(pkin(9));
t1359 = t1347 ^ 2;
t1374 = t1342 + t1359;
t1324 = t1374 * t1358;
t1343 = qJD(4) + qJD(5);
t1392 = qJD(5) + t1343;
t1352 = sin(qJ(4));
t1355 = cos(qJ(4));
t1366 = t1347 * t1355 + t1349 * t1352;
t1391 = t1366 * qJDD(1);
t1384 = qJD(1) * t1349;
t1385 = qJD(1) * t1347;
t1311 = t1352 * t1385 - t1355 * t1384;
t1313 = t1366 * qJD(1);
t1351 = sin(qJ(5));
t1354 = cos(qJ(5));
t1284 = t1354 * t1311 + t1351 * t1313;
t1390 = t1284 ^ 2;
t1286 = -t1351 * t1311 + t1354 * t1313;
t1389 = t1286 ^ 2;
t1388 = t1311 ^ 2;
t1387 = t1313 ^ 2;
t1386 = t1343 ^ 2;
t1383 = t1286 * t1284;
t1382 = t1311 * qJD(4);
t1381 = t1313 * qJD(4);
t1380 = t1313 * t1311;
t1379 = t1342 * t1358;
t1378 = t1349 * t1358;
t1377 = t1359 * t1358;
t1376 = qJD(5) - t1343;
t1353 = sin(qJ(1));
t1356 = cos(qJ(1));
t1327 = -t1353 * g(2) + t1356 * g(3);
t1320 = -t1358 * pkin(1) + t1327;
t1348 = sin(pkin(8));
t1350 = cos(pkin(8));
t1328 = -t1356 * g(2) - t1353 * g(3);
t1365 = qJDD(1) * pkin(1) + t1328;
t1297 = t1350 * t1320 + t1348 * t1365;
t1287 = -t1358 * pkin(2) + qJDD(1) * qJ(3) + t1297;
t1345 = -g(1) + qJDD(2);
t1375 = -0.2e1 * qJD(3) * t1385 + t1349 * t1345;
t1271 = (pkin(3) * t1378 - pkin(6) * qJDD(1) - t1287) * t1347 + t1375;
t1277 = 0.2e1 * qJD(3) * t1384 + t1349 * t1287 + t1347 * t1345;
t1339 = t1349 * qJDD(1);
t1272 = -pkin(3) * t1379 + pkin(6) * t1339 + t1277;
t1251 = t1352 * t1271 + t1355 * t1272;
t1373 = t1347 * qJDD(1);
t1372 = t1348 * qJDD(1);
t1371 = t1350 * qJDD(1);
t1370 = -qJDD(4) - qJDD(5);
t1250 = t1355 * t1271 - t1352 * t1272;
t1295 = t1391 - t1382;
t1278 = t1355 * t1339 - t1352 * t1373;
t1363 = -t1278 + t1381;
t1369 = -t1351 * t1295 - t1354 * t1363;
t1296 = -t1348 * t1320 + t1350 * t1365;
t1322 = -t1350 * t1358 - t1372;
t1323 = -t1348 * t1358 + t1371;
t1368 = t1353 * t1322 + t1356 * t1323;
t1291 = qJDD(4) - t1380;
t1367 = t1356 * t1322 - t1353 * t1323;
t1283 = -qJDD(1) * pkin(2) - t1358 * qJ(3) + qJDD(3) - t1296;
t1275 = -pkin(3) * t1339 + t1283 + (-t1377 - t1379) * pkin(6);
t1362 = -t1354 * t1295 + t1351 * t1363;
t1357 = qJD(4) ^ 2;
t1329 = t1347 * t1378;
t1326 = t1356 * qJDD(1) - t1353 * t1358;
t1325 = -t1353 * qJDD(1) - t1356 * t1358;
t1321 = t1374 * qJDD(1);
t1319 = t1349 * t1324;
t1318 = t1347 * t1324;
t1305 = -t1357 - t1387;
t1304 = qJD(4) * pkin(4) - t1313 * pkin(7);
t1303 = -t1350 * t1319 - t1348 * t1339;
t1302 = t1350 * t1318 + t1347 * t1372;
t1301 = -t1348 * t1319 + t1349 * t1371;
t1300 = t1348 * t1318 - t1347 * t1371;
t1299 = t1350 * t1321 - t1348 * t1324;
t1298 = t1348 * t1321 + t1350 * t1324;
t1294 = t1391 - 0.2e1 * t1382;
t1293 = -t1278 + 0.2e1 * t1381;
t1292 = -qJDD(4) - t1380;
t1290 = -t1357 - t1388;
t1280 = -t1386 - t1389;
t1279 = -t1387 - t1388;
t1276 = -t1347 * t1287 + t1375;
t1274 = t1355 * t1292 - t1352 * t1305;
t1273 = t1352 * t1292 + t1355 * t1305;
t1269 = -t1348 * t1296 + t1350 * t1297;
t1268 = t1350 * t1296 + t1348 * t1297;
t1265 = t1355 * t1278 + t1352 * t1391;
t1264 = t1352 * t1278 - t1355 * t1391;
t1263 = t1355 * t1290 - t1352 * t1291;
t1262 = t1352 * t1290 + t1355 * t1291;
t1261 = t1370 - t1383;
t1260 = -t1370 - t1383;
t1259 = -t1386 - t1390;
t1258 = -t1389 - t1390;
t1257 = -t1347 * t1276 + t1349 * t1277;
t1256 = t1349 * t1276 + t1347 * t1277;
t1255 = -t1347 * t1273 + t1349 * t1274;
t1254 = t1349 * t1273 + t1347 * t1274;
t1253 = t1354 * t1261 - t1351 * t1280;
t1252 = t1351 * t1261 + t1354 * t1280;
t1249 = t1363 * pkin(4) - t1388 * pkin(7) + t1313 * t1304 + t1275;
t1248 = -t1347 * t1264 + t1349 * t1265;
t1247 = t1349 * t1264 + t1347 * t1265;
t1246 = t1376 * t1284 + t1362;
t1245 = -t1392 * t1284 - t1362;
t1244 = -t1376 * t1286 + t1369;
t1243 = t1392 * t1286 - t1369;
t1242 = -t1347 * t1262 + t1349 * t1263;
t1241 = t1349 * t1262 + t1347 * t1263;
t1240 = t1350 * t1257 + t1348 * t1283;
t1239 = t1348 * t1257 - t1350 * t1283;
t1238 = t1350 * t1255 + t1348 * t1294;
t1237 = t1348 * t1255 - t1350 * t1294;
t1236 = t1354 * t1259 - t1351 * t1260;
t1235 = t1351 * t1259 + t1354 * t1260;
t1234 = t1350 * t1242 + t1348 * t1293;
t1233 = t1348 * t1242 - t1350 * t1293;
t1232 = t1350 * t1248 + t1348 * t1279;
t1231 = t1348 * t1248 - t1350 * t1279;
t1230 = -t1388 * pkin(4) - t1363 * pkin(7) - qJD(4) * t1304 + t1251;
t1229 = (-t1295 - t1382) * pkin(7) + t1291 * pkin(4) + t1250;
t1228 = -t1352 * t1252 + t1355 * t1253;
t1227 = t1355 * t1252 + t1352 * t1253;
t1226 = -t1352 * t1250 + t1355 * t1251;
t1225 = t1355 * t1250 + t1352 * t1251;
t1224 = t1354 * t1244 - t1351 * t1246;
t1223 = t1351 * t1244 + t1354 * t1246;
t1222 = -t1352 * t1235 + t1355 * t1236;
t1221 = t1355 * t1235 + t1352 * t1236;
t1220 = t1351 * t1229 + t1354 * t1230;
t1219 = t1354 * t1229 - t1351 * t1230;
t1218 = -t1347 * t1227 + t1349 * t1228;
t1217 = t1349 * t1227 + t1347 * t1228;
t1216 = -t1347 * t1225 + t1349 * t1226;
t1215 = t1349 * t1225 + t1347 * t1226;
t1214 = -t1352 * t1223 + t1355 * t1224;
t1213 = t1355 * t1223 + t1352 * t1224;
t1212 = t1350 * t1216 + t1348 * t1275;
t1211 = t1348 * t1216 - t1350 * t1275;
t1210 = -t1347 * t1221 + t1349 * t1222;
t1209 = t1349 * t1221 + t1347 * t1222;
t1208 = t1350 * t1218 + t1348 * t1245;
t1207 = t1348 * t1218 - t1350 * t1245;
t1206 = t1350 * t1210 + t1348 * t1243;
t1205 = t1348 * t1210 - t1350 * t1243;
t1204 = -t1351 * t1219 + t1354 * t1220;
t1203 = t1354 * t1219 + t1351 * t1220;
t1202 = -t1347 * t1213 + t1349 * t1214;
t1201 = t1349 * t1213 + t1347 * t1214;
t1200 = t1350 * t1202 + t1348 * t1258;
t1199 = t1348 * t1202 - t1350 * t1258;
t1198 = -t1352 * t1203 + t1355 * t1204;
t1197 = t1355 * t1203 + t1352 * t1204;
t1196 = -t1347 * t1197 + t1349 * t1198;
t1195 = t1349 * t1197 + t1347 * t1198;
t1194 = t1350 * t1196 + t1348 * t1249;
t1193 = t1348 * t1196 - t1350 * t1249;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1345, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1256, 0, 0, 0, 0, 0, 0, t1241, t1254, t1247, t1215, 0, 0, 0, 0, 0, 0, t1209, t1217, t1201, t1195; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1326, t1325, 0, t1353 * t1327 + t1356 * t1328, 0, 0, 0, 0, 0, 0, t1368, t1367, 0, t1356 * t1268 + t1353 * t1269, 0, 0, 0, 0, 0, 0, t1356 * t1301 + t1353 * t1303, t1356 * t1300 + t1353 * t1302, t1356 * t1298 + t1353 * t1299, t1356 * t1239 + t1353 * t1240, 0, 0, 0, 0, 0, 0, t1356 * t1233 + t1353 * t1234, t1356 * t1237 + t1353 * t1238, t1356 * t1231 + t1353 * t1232, t1356 * t1211 + t1353 * t1212, 0, 0, 0, 0, 0, 0, t1356 * t1205 + t1353 * t1206, t1356 * t1207 + t1353 * t1208, t1356 * t1199 + t1353 * t1200, t1356 * t1193 + t1353 * t1194; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1325, t1326, 0, -t1356 * t1327 + t1353 * t1328, 0, 0, 0, 0, 0, 0, -t1367, t1368, 0, t1353 * t1268 - t1356 * t1269, 0, 0, 0, 0, 0, 0, t1353 * t1301 - t1356 * t1303, t1353 * t1300 - t1356 * t1302, t1353 * t1298 - t1356 * t1299, t1353 * t1239 - t1356 * t1240, 0, 0, 0, 0, 0, 0, t1353 * t1233 - t1356 * t1234, t1353 * t1237 - t1356 * t1238, t1353 * t1231 - t1356 * t1232, t1353 * t1211 - t1356 * t1212, 0, 0, 0, 0, 0, 0, t1353 * t1205 - t1356 * t1206, t1353 * t1207 - t1356 * t1208, t1353 * t1199 - t1356 * t1200, t1353 * t1193 - t1356 * t1194; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1358, -qJDD(1), 0, t1327, 0, 0, 0, 0, 0, 0, t1322, -t1323, 0, t1269, 0, 0, 0, 0, 0, 0, t1303, t1302, t1299, t1240, 0, 0, 0, 0, 0, 0, t1234, t1238, t1232, t1212, 0, 0, 0, 0, 0, 0, t1206, t1208, t1200, t1194; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1358, 0, t1328, 0, 0, 0, 0, 0, 0, t1323, t1322, 0, t1268, 0, 0, 0, 0, 0, 0, t1301, t1300, t1298, t1239, 0, 0, 0, 0, 0, 0, t1233, t1237, t1231, t1211, 0, 0, 0, 0, 0, 0, t1205, t1207, t1199, t1193; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1345, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1256, 0, 0, 0, 0, 0, 0, t1241, t1254, t1247, t1215, 0, 0, 0, 0, 0, 0, t1209, t1217, t1201, t1195; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1358, -qJDD(1), 0, t1297, 0, 0, 0, 0, 0, 0, -t1319, t1318, t1321, t1257, 0, 0, 0, 0, 0, 0, t1242, t1255, t1248, t1216, 0, 0, 0, 0, 0, 0, t1210, t1218, t1202, t1196; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1358, 0, t1296, 0, 0, 0, 0, 0, 0, t1339, -t1373, t1324, -t1283, 0, 0, 0, 0, 0, 0, -t1293, -t1294, -t1279, -t1275, 0, 0, 0, 0, 0, 0, -t1243, -t1245, -t1258, -t1249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1345, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1256, 0, 0, 0, 0, 0, 0, t1241, t1254, t1247, t1215, 0, 0, 0, 0, 0, 0, t1209, t1217, t1201, t1195; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1379, t1329, t1339, t1277, 0, 0, 0, 0, 0, 0, t1263, t1274, t1265, t1226, 0, 0, 0, 0, 0, 0, t1222, t1228, t1214, t1198; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1329, -t1377, -t1373, t1276, 0, 0, 0, 0, 0, 0, t1262, t1273, t1264, t1225, 0, 0, 0, 0, 0, 0, t1221, t1227, t1213, t1197; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1339, t1373, -t1324, t1283, 0, 0, 0, 0, 0, 0, t1293, t1294, t1279, t1275, 0, 0, 0, 0, 0, 0, t1243, t1245, t1258, t1249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1290, t1292, t1278, t1251, 0, 0, 0, 0, 0, 0, t1236, t1253, t1224, t1204; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1291, t1305, -t1391, t1250, 0, 0, 0, 0, 0, 0, t1235, t1252, t1223, t1203; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1293, t1294, t1279, t1275, 0, 0, 0, 0, 0, 0, t1243, t1245, t1258, t1249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1259, t1261, t1244, t1220; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1260, t1280, t1246, t1219; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1243, t1245, t1258, t1249;];
f_new_reg = t1;
