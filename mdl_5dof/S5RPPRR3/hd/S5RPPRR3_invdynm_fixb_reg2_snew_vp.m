% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPPRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:42
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPPRR3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR3_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR3_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR3_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPPRR3_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:42:29
% EndTime: 2019-12-05 17:42:47
% DurationCPUTime: 19.38s
% Computational Cost: add. (82767->609), mult. (187064->864), div. (0->0), fcn. (132391->10), ass. (0->418)
t1070 = sin(qJ(1));
t1065 = sin(pkin(8));
t1067 = cos(pkin(8));
t1073 = cos(qJ(1));
t1039 = g(2) * t1070 - t1073 * g(3);
t1151 = qJD(1) ^ 2;
t1029 = -t1151 * pkin(1) + t1039;
t1040 = g(2) * t1073 + g(3) * t1070;
t1081 = qJDD(1) * pkin(1) + t1040;
t987 = t1029 * t1065 - t1067 * t1081;
t988 = t1067 * t1029 + t1065 * t1081;
t1107 = t1065 * t987 + t1067 * t988;
t927 = t1065 * t988 - t1067 * t987;
t1128 = t1073 * t927;
t1169 = -t1070 * t1107 - t1128;
t1134 = t1070 * t927;
t1168 = -t1073 * t1107 + t1134;
t1068 = sin(qJ(5));
t1059 = qJDD(4) + qJDD(5);
t1066 = cos(pkin(9));
t1069 = sin(qJ(4));
t1072 = cos(qJ(4));
t1064 = sin(pkin(9));
t1127 = qJD(1) * t1064;
t1020 = -t1072 * t1066 * qJD(1) + t1069 * t1127;
t1087 = t1064 * t1072 + t1066 * t1069;
t1021 = t1087 * qJD(1);
t1071 = cos(qJ(5));
t969 = t1071 * t1020 + t1021 * t1068;
t971 = -t1020 * t1068 + t1021 * t1071;
t916 = t971 * t969;
t1158 = -t916 + t1059;
t1167 = t1068 * t1158;
t986 = t1021 * t1020;
t1154 = qJDD(4) - t986;
t1166 = t1069 * t1154;
t1165 = t1071 * t1158;
t1164 = t1072 * t1154;
t1077 = t1066 ^ 2;
t1056 = t1077 * t1151;
t1075 = t1064 ^ 2;
t1117 = t1075 * t1151;
t1035 = t1056 + t1117;
t1032 = qJDD(1) * t1065 + t1151 * t1067;
t1062 = g(1) - qJDD(2);
t1007 = qJ(2) * t1032 - t1062 * t1067;
t1033 = qJDD(1) * t1067 - t1065 * t1151;
t1093 = -qJ(2) * t1033 - t1062 * t1065;
t993 = t1032 * t1070 - t1033 * t1073;
t1163 = pkin(5) * t993 + t1070 * t1007 + t1073 * t1093;
t1153 = t1151 * (t1075 + t1077);
t1026 = t1066 * t1153;
t1054 = t1066 * qJDD(1);
t997 = -t1026 * t1065 + t1067 * t1054;
t999 = t1026 * t1067 + t1065 * t1054;
t1162 = t1070 * t999 - t1073 * t997;
t1161 = t1070 * t997 + t1073 * t999;
t1090 = t1032 * t1073 + t1033 * t1070;
t1160 = pkin(5) * t1090 + t1073 * t1007 - t1070 * t1093;
t1046 = t1066 * t1062;
t972 = -t1151 * pkin(2) + qJDD(1) * qJ(3) + t988;
t1105 = 0.2e1 * qJD(1) * qJD(3) + t972;
t949 = t1064 * t1105 + t1046;
t1119 = t1062 * t1064;
t950 = t1066 * t1105 - t1119;
t898 = t1064 * t949 + t1066 * t950;
t1052 = t1064 * qJDD(1);
t1018 = t1069 * t1052 - t1072 * t1054;
t1124 = t1021 * qJD(4);
t1080 = t1018 + t1124;
t1014 = t1020 * qJD(4);
t1019 = t1087 * qJDD(1);
t984 = -t1014 + t1019;
t901 = -t969 * qJD(5) - t1068 * t1080 + t1071 * t984;
t1060 = qJD(4) + qJD(5);
t962 = t1060 * t969;
t1159 = -t962 + t901;
t1106 = t1068 * t984 + t1071 * t1080;
t848 = (qJD(5) - t1060) * t971 + t1106;
t967 = t969 ^ 2;
t968 = t971 ^ 2;
t1150 = t1020 ^ 2;
t1017 = t1021 ^ 2;
t1058 = t1060 ^ 2;
t1118 = t1066 * t1151;
t1146 = pkin(6) * qJDD(1);
t931 = -0.2e1 * qJD(3) * t1127 - t1046 + (pkin(3) * t1118 - t1146 - t972) * t1064;
t932 = -pkin(3) * t1056 - t1119 + (t1105 + t1146) * t1066;
t866 = t1069 * t932 - t1072 * t931;
t867 = t1069 * t931 + t1072 * t932;
t800 = t1069 * t867 - t1072 * t866;
t1149 = pkin(3) * t800;
t919 = -t1018 * t1069 - t1019 * t1072;
t1148 = pkin(3) * t919;
t966 = -qJDD(1) * pkin(2) - t1151 * qJ(3) + qJDD(3) + t987;
t1145 = -pkin(2) * t966 + qJ(3) * t898;
t1144 = t1060 * t971;
t1143 = t1064 * t800;
t959 = t1064 * t966;
t1142 = t1065 * t966;
t1141 = t1066 * t800;
t960 = t1066 * t966;
t1140 = t1067 * t966;
t1003 = qJD(4) * pkin(4) - pkin(7) * t1021;
t948 = -pkin(3) * t1054 - t1035 * pkin(6) + t966;
t865 = pkin(4) * t1080 - t1150 * pkin(7) + t1003 * t1021 + t948;
t1139 = t1068 * t865;
t912 = t916 + t1059;
t1138 = t1068 * t912;
t811 = (-t984 - t1014) * pkin(7) + t1154 * pkin(4) - t866;
t812 = -t1150 * pkin(4) - pkin(7) * t1080 - qJD(4) * t1003 + t867;
t770 = t1068 * t812 - t1071 * t811;
t771 = t1068 * t811 + t1071 * t812;
t726 = t1068 * t771 - t1071 * t770;
t1137 = t1069 * t726;
t1136 = t1069 * t948;
t980 = qJDD(4) + t986;
t1135 = t1069 * t980;
t1133 = t1071 * t865;
t1132 = t1071 * t912;
t1131 = t1072 * t726;
t1130 = t1072 * t948;
t1129 = t1072 * t980;
t1126 = t1020 * t1069;
t1125 = t1020 * t1072;
t1123 = t1021 * t1069;
t1122 = t1021 * t1072;
t1121 = t1060 * t1068;
t1120 = t1060 * t1071;
t1115 = t1065 * t916;
t1114 = t1067 * t916;
t1113 = pkin(2) * t1054 - qJ(3) * t1026 - t960;
t727 = t1068 * t770 + t1071 * t771;
t692 = t1069 * t727 + t1131;
t725 = pkin(4) * t726;
t1112 = pkin(3) * t692 + t725;
t852 = t962 + t901;
t797 = -t1068 * t848 - t1071 * t852;
t799 = t1068 * t852 - t1071 * t848;
t752 = t1069 * t799 + t1072 * t797;
t794 = pkin(4) * t797;
t1111 = pkin(3) * t752 + t794;
t1110 = t1065 * t986;
t1109 = t1067 * t986;
t1042 = t1064 * t1118;
t1108 = t1064 * t1054;
t801 = t1069 * t866 + t1072 * t867;
t693 = t1072 * t727 - t1137;
t719 = -pkin(4) * t865 + pkin(7) * t727;
t673 = -pkin(3) * t865 + pkin(6) * t693 - pkin(7) * t1137 + t1072 * t719;
t677 = -pkin(6) * t692 - pkin(7) * t1131 - t1069 * t719;
t680 = -t1064 * t692 + t1066 * t693;
t1104 = -pkin(2) * t865 + qJ(3) * t680 + t1064 * t677 + t1066 * t673;
t899 = -t967 - t968;
t702 = -pkin(4) * t899 + pkin(7) * t799 + t727;
t711 = -pkin(7) * t797 - t726;
t754 = -t1069 * t797 + t1072 * t799;
t684 = -pkin(3) * t899 + pkin(6) * t754 + t1069 * t711 + t1072 * t702;
t686 = -pkin(6) * t752 - t1069 * t702 + t1072 * t711;
t709 = -t1064 * t752 + t1066 * t754;
t1103 = -pkin(2) * t899 + qJ(3) * t709 + t1064 * t686 + t1066 * t684;
t910 = -t1058 - t967;
t826 = t1071 * t910 - t1167;
t847 = (qJD(5) + t1060) * t971 + t1106;
t767 = -pkin(4) * t847 + pkin(7) * t826 - t1133;
t825 = t1068 * t910 + t1165;
t787 = -t1069 * t825 + t1072 * t826;
t795 = -pkin(7) * t825 + t1139;
t704 = -pkin(3) * t847 + pkin(6) * t787 + t1069 * t795 + t1072 * t767;
t786 = t1069 * t826 + t1072 * t825;
t717 = -pkin(6) * t786 - t1069 * t767 + t1072 * t795;
t744 = -t1064 * t786 + t1066 * t787;
t1102 = -pkin(2) * t847 + qJ(3) * t744 + t1064 * t717 + t1066 * t704;
t954 = -t968 - t1058;
t872 = -t1068 * t954 - t1132;
t772 = -pkin(4) * t1159 + pkin(7) * t872 + t1139;
t871 = t1071 * t954 - t1138;
t802 = -pkin(7) * t871 + t1133;
t804 = -t1069 * t871 + t1072 * t872;
t715 = -pkin(3) * t1159 + pkin(6) * t804 + t1069 * t802 + t1072 * t772;
t803 = t1069 * t872 + t1072 * t871;
t722 = -pkin(6) * t803 - t1069 * t772 + t1072 * t802;
t761 = -t1064 * t803 + t1066 * t804;
t1101 = -pkin(2) * t1159 + qJ(3) * t761 + t1064 * t722 + t1066 * t715;
t921 = -t1018 * t1072 + t1019 * t1069;
t953 = -t1017 - t1150;
t774 = -pkin(3) * t953 + pkin(6) * t921 + t801;
t783 = -pkin(6) * t919 - t800;
t855 = -t1064 * t919 + t1066 * t921;
t1100 = -pkin(2) * t953 + qJ(3) * t855 + t1064 * t783 + t1066 * t774;
t1074 = qJD(4) ^ 2;
t978 = -t1074 - t1150;
t918 = t1072 * t978 - t1166;
t982 = t1018 + 0.2e1 * t1124;
t822 = -pkin(3) * t982 + pkin(6) * t918 - t1130;
t917 = t1069 * t978 + t1164;
t842 = -t1064 * t917 + t1066 * t918;
t869 = -pkin(6) * t917 + t1136;
t1099 = -pkin(2) * t982 + qJ(3) * t842 + t1064 * t869 + t1066 * t822;
t1010 = -t1017 - t1074;
t938 = -t1010 * t1069 - t1129;
t983 = -0.2e1 * t1014 + t1019;
t846 = -pkin(3) * t983 + pkin(6) * t938 + t1136;
t935 = t1010 * t1072 - t1135;
t887 = -t1064 * t935 + t1066 * t938;
t893 = -pkin(6) * t935 + t1130;
t1098 = -pkin(2) * t983 + qJ(3) * t887 + t1064 * t893 + t1066 * t846;
t1051 = t1075 * qJDD(1);
t1053 = t1077 * qJDD(1);
t1030 = t1053 + t1051;
t1097 = pkin(2) * t1035 + qJ(3) * t1030 + t898;
t1096 = pkin(3) * t935 - t867;
t1095 = pkin(4) * t825 - t770;
t1037 = qJDD(1) * t1070 + t1151 * t1073;
t1094 = pkin(5) * t1037 - g(1) * t1073;
t896 = t1064 * t950 - t1066 * t949;
t1001 = t1032 * t1066 * t1064;
t1002 = -t1042 * t1065 + t1067 * t1108;
t1092 = t1001 * t1073 + t1002 * t1070;
t1091 = t1001 * t1070 - t1002 * t1073;
t1089 = t1039 * t1073 - t1040 * t1070;
t1088 = -t1039 * t1070 - t1040 * t1073;
t1025 = t1064 * t1153;
t1086 = -pkin(2) * t1052 + qJ(3) * t1025 + t959;
t1085 = pkin(3) * t917 - t866;
t1084 = pkin(4) * t871 - t771;
t758 = t1066 * t801 - t1143;
t785 = -pkin(3) * t948 + pkin(6) * t801;
t1083 = -pkin(2) * t948 - pkin(6) * t1143 + qJ(3) * t758 + t1066 * t785;
t1082 = pkin(3) * t786 + t1095;
t1079 = pkin(3) * t803 + t1084;
t1041 = 0.2e1 * t1108;
t1038 = -qJDD(1) * t1073 + t1151 * t1070;
t1036 = -t1056 + t1117;
t1031 = t1053 - t1051;
t1016 = -pkin(5) * t1038 + g(1) * t1070;
t1009 = -t1017 + t1074;
t1008 = -t1074 + t1150;
t998 = t1025 * t1067 + t1065 * t1052;
t995 = t1025 * t1065 - t1067 * t1052;
t992 = t1031 * t1067 + t1036 * t1065;
t991 = t1030 * t1067 - t1035 * t1065;
t990 = t1031 * t1065 - t1036 * t1067;
t989 = t1030 * t1065 + t1035 * t1067;
t985 = t1017 - t1150;
t964 = (t1123 - t1125) * qJD(4);
t963 = (-t1122 - t1126) * qJD(4);
t958 = -pkin(1) * t1032 - t988;
t957 = pkin(1) * t1033 - t987;
t956 = -t968 + t1058;
t955 = t967 - t1058;
t947 = -qJD(4) * t1123 + t1072 * t984;
t946 = qJD(4) * t1122 + t1069 * t984;
t945 = qJD(4) * t1125 + t1069 * t1080;
t944 = qJD(4) * t1126 - t1072 * t1080;
t940 = -t1070 * t995 + t1073 * t998;
t939 = -t1070 * t998 - t1073 * t995;
t937 = -t1009 * t1069 + t1164;
t936 = t1008 * t1072 - t1135;
t934 = t1009 * t1072 + t1166;
t933 = t1008 * t1069 + t1129;
t925 = pkin(1) * t927;
t922 = -t1069 * t983 - t1072 * t982;
t920 = -t1069 * t982 + t1072 * t983;
t915 = pkin(1) * t1062 + qJ(2) * t1107;
t914 = t968 - t967;
t909 = -t1064 * t963 + t1066 * t964;
t908 = t1064 * t964 + t1066 * t963;
t907 = (t1068 * t971 - t1071 * t969) * t1060;
t906 = (-t1068 * t969 - t1071 * t971) * t1060;
t905 = pkin(1) * t997 + t1113;
t904 = pkin(1) * t995 + t1086;
t903 = qJDD(4) * t1065 + t1067 * t909;
t902 = -qJDD(4) * t1067 + t1065 * t909;
t900 = -qJD(5) * t971 - t1106;
t892 = -t1064 * t946 + t1066 * t947;
t891 = -t1064 * t944 + t1066 * t945;
t890 = t1064 * t947 + t1066 * t946;
t889 = t1064 * t945 + t1066 * t944;
t886 = -t1064 * t934 + t1066 * t937;
t885 = -t1064 * t933 + t1066 * t936;
t884 = t1064 * t938 + t1066 * t935;
t883 = t1064 * t937 + t1066 * t934;
t882 = t1064 * t936 + t1066 * t933;
t880 = t1071 * t955 - t1138;
t879 = -t1068 * t956 + t1165;
t878 = t1068 * t955 + t1132;
t877 = t1071 * t956 + t1167;
t876 = -qJ(2) * t995 - t1065 * t950 + t1066 * t1140;
t875 = -qJ(2) * t997 + t1064 * t1140 - t1065 * t949;
t874 = qJ(2) * t998 + t1065 * t960 + t1067 * t950;
t873 = -qJ(2) * t999 + t1064 * t1142 + t1067 * t949;
t862 = t1019 * t1065 + t1067 * t886;
t861 = -t1018 * t1065 + t1067 * t885;
t860 = -t1019 * t1067 + t1065 * t886;
t859 = t1018 * t1067 + t1065 * t885;
t858 = -qJ(2) * t989 - t1067 * t896;
t857 = qJ(2) * t991 - t1065 * t896;
t856 = -t1064 * t920 + t1066 * t922;
t854 = t1064 * t922 + t1066 * t920;
t853 = t1064 * t921 + t1066 * t919;
t841 = t1064 * t918 + t1066 * t917;
t838 = t1067 * t892 + t1110;
t837 = t1067 * t891 - t1110;
t836 = t1065 * t892 - t1109;
t835 = t1065 * t891 + t1109;
t834 = t1071 * t901 - t971 * t1121;
t833 = t1068 * t901 + t971 * t1120;
t832 = -t1068 * t900 + t969 * t1120;
t831 = t1071 * t900 + t969 * t1121;
t830 = t1067 * t898 + t1142;
t829 = t1065 * t898 - t1140;
t828 = t1065 * t983 + t1067 * t887;
t827 = t1065 * t887 - t1067 * t983;
t823 = pkin(1) * t989 + t1097;
t820 = -t1069 * t906 + t1072 * t907;
t819 = t1069 * t907 + t1072 * t906;
t818 = t1065 * t985 + t1067 * t856;
t817 = t1065 * t856 - t1067 * t985;
t816 = t1065 * t982 + t1067 * t842;
t815 = t1065 * t842 - t1067 * t982;
t814 = t1065 * t953 + t1067 * t855;
t813 = t1065 * t855 - t1067 * t953;
t810 = -pkin(2) * t853 - t1148;
t808 = -t1069 * t878 + t1072 * t880;
t807 = -t1069 * t877 + t1072 * t879;
t806 = t1069 * t880 + t1072 * t878;
t805 = t1069 * t879 + t1072 * t877;
t798 = -t1068 * t1159 - t1071 * t847;
t796 = -t1068 * t847 + t1071 * t1159;
t793 = pkin(1) * t829 + t1145;
t792 = -t1069 * t833 + t1072 * t834;
t791 = -t1069 * t831 + t1072 * t832;
t790 = t1069 * t834 + t1072 * t833;
t789 = t1069 * t832 + t1072 * t831;
t788 = -pkin(2) * t884 - t1096;
t781 = -pkin(2) * t841 - t1085;
t780 = -t1064 * t819 + t1066 * t820;
t779 = t1064 * t820 + t1066 * t819;
t778 = t1059 * t1065 + t1067 * t780;
t777 = -t1059 * t1067 + t1065 * t780;
t776 = -qJ(2) * t829 + (pkin(2) * t1065 - qJ(3) * t1067) * t896;
t775 = -qJ(3) * t884 - t1064 * t846 + t1066 * t893;
t768 = -qJ(3) * t841 - t1064 * t822 + t1066 * t869;
t766 = qJ(2) * t830 + (-pkin(2) * t1067 - qJ(3) * t1065 - pkin(1)) * t896;
t765 = -t1064 * t806 + t1066 * t808;
t764 = -t1064 * t805 + t1066 * t807;
t763 = t1064 * t808 + t1066 * t806;
t762 = t1064 * t807 + t1066 * t805;
t760 = t1064 * t804 + t1066 * t803;
t757 = t1064 * t801 + t1141;
t755 = pkin(1) * t827 + t1098;
t753 = -t1069 * t796 + t1072 * t798;
t751 = t1069 * t798 + t1072 * t796;
t750 = t1065 * t948 + t1067 * t758;
t749 = t1065 * t758 - t1067 * t948;
t748 = -t1064 * t790 + t1066 * t792;
t747 = -t1064 * t789 + t1066 * t791;
t746 = t1064 * t792 + t1066 * t790;
t745 = t1064 * t791 + t1066 * t789;
t743 = t1064 * t787 + t1066 * t786;
t741 = -t1065 * t848 + t1067 * t765;
t740 = t1065 * t852 + t1067 * t764;
t739 = t1065 * t765 + t1067 * t848;
t738 = t1065 * t764 - t1067 * t852;
t737 = pkin(1) * t815 + t1099;
t736 = t1065 * t1159 + t1067 * t761;
t735 = t1065 * t761 - t1067 * t1159;
t734 = t1067 * t748 + t1115;
t733 = t1067 * t747 - t1115;
t732 = t1065 * t748 - t1114;
t731 = t1065 * t747 + t1114;
t730 = t1065 * t847 + t1067 * t744;
t729 = t1065 * t744 - t1067 * t847;
t728 = -pkin(2) * t757 - t1149;
t724 = -qJ(2) * t827 - t1065 * t788 + t1067 * t775;
t723 = -qJ(3) * t853 - t1064 * t774 + t1066 * t783;
t720 = -pkin(1) * t884 + qJ(2) * t828 + t1065 * t775 + t1067 * t788;
t718 = -qJ(2) * t815 - t1065 * t781 + t1067 * t768;
t713 = pkin(1) * t813 + t1100;
t712 = -pkin(1) * t841 + qJ(2) * t816 + t1065 * t768 + t1067 * t781;
t710 = -pkin(6) * t1141 - qJ(3) * t757 - t1064 * t785;
t708 = -t1064 * t751 + t1066 * t753;
t707 = t1064 * t754 + t1066 * t752;
t706 = t1064 * t753 + t1066 * t751;
t701 = t1065 * t914 + t1067 * t708;
t700 = t1065 * t708 - t1067 * t914;
t699 = -qJ(2) * t813 - t1065 * t810 + t1067 * t723;
t698 = t1065 * t899 + t1067 * t709;
t697 = t1065 * t709 - t1067 * t899;
t696 = -pkin(2) * t760 - t1079;
t695 = -pkin(1) * t853 + qJ(2) * t814 + t1065 * t723 + t1067 * t810;
t694 = -pkin(2) * t743 - t1082;
t691 = pkin(1) * t749 + t1083;
t690 = -pkin(2) * t707 - t1111;
t689 = -qJ(3) * t760 - t1064 * t715 + t1066 * t722;
t688 = -qJ(2) * t749 - t1065 * t728 + t1067 * t710;
t687 = -qJ(3) * t743 - t1064 * t704 + t1066 * t717;
t682 = -pkin(1) * t757 + qJ(2) * t750 + t1065 * t710 + t1067 * t728;
t681 = pkin(1) * t735 + t1101;
t679 = t1064 * t693 + t1066 * t692;
t675 = t1065 * t865 + t1067 * t680;
t674 = t1065 * t680 - t1067 * t865;
t671 = pkin(1) * t729 + t1102;
t670 = -qJ(2) * t735 - t1065 * t696 + t1067 * t689;
t669 = -pkin(1) * t760 + qJ(2) * t736 + t1065 * t689 + t1067 * t696;
t668 = -qJ(2) * t729 - t1065 * t694 + t1067 * t687;
t667 = -pkin(1) * t743 + qJ(2) * t730 + t1065 * t687 + t1067 * t694;
t666 = -pkin(2) * t679 - t1112;
t665 = -qJ(3) * t707 - t1064 * t684 + t1066 * t686;
t664 = pkin(1) * t697 + t1103;
t663 = -qJ(3) * t679 - t1064 * t673 + t1066 * t677;
t662 = -qJ(2) * t697 - t1065 * t690 + t1067 * t665;
t661 = -pkin(1) * t707 + qJ(2) * t698 + t1065 * t665 + t1067 * t690;
t660 = pkin(1) * t674 + t1104;
t659 = -qJ(2) * t674 - t1065 * t666 + t1067 * t663;
t658 = -pkin(1) * t679 + qJ(2) * t675 + t1065 * t663 + t1067 * t666;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t1040, -t1039, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t957, t958, 0, t925, t1051, t1041, 0, t1053, 0, 0, t905, t904, t823, t793, t890, t854, t883, t889, t882, t908, t737, t755, t713, t691, t746, t706, t762, t745, t763, t779, t671, t681, t664, t660; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t1037, 0, t1038, 0, t1094, t1016, -t1089, -pkin(5) * t1089, 0, 0, -t1090, 0, t993, 0, t1160, -t1163, t1168, pkin(5) * t1168 + qJ(2) * t1134 - t1073 * t915, -t1092, -t1070 * t992 - t1073 * t990, t939, t1092, -t1162, 0, pkin(5) * t1161 - t1070 * t875 - t1073 * t873, -pkin(5) * t940 - t1070 * t876 - t1073 * t874, -t1070 * t858 - t1073 * t857 - pkin(5) * (-t1070 * t989 + t1073 * t991), -t1070 * t776 - t1073 * t766 - pkin(5) * (-t1070 * t829 + t1073 * t830), -t1070 * t838 - t1073 * t836, -t1070 * t818 - t1073 * t817, -t1070 * t862 - t1073 * t860, -t1070 * t837 - t1073 * t835, -t1070 * t861 - t1073 * t859, -t1070 * t903 - t1073 * t902, -t1070 * t718 - t1073 * t712 - pkin(5) * (-t1070 * t815 + t1073 * t816), -t1070 * t724 - t1073 * t720 - pkin(5) * (-t1070 * t827 + t1073 * t828), -t1070 * t699 - t1073 * t695 - pkin(5) * (-t1070 * t813 + t1073 * t814), -t1070 * t688 - t1073 * t682 - pkin(5) * (-t1070 * t749 + t1073 * t750), -t1070 * t734 - t1073 * t732, -t1070 * t701 - t1073 * t700, -t1070 * t740 - t1073 * t738, -t1070 * t733 - t1073 * t731, -t1070 * t741 - t1073 * t739, -t1070 * t778 - t1073 * t777, -t1070 * t668 - t1073 * t667 - pkin(5) * (-t1070 * t729 + t1073 * t730), -t1070 * t670 - t1073 * t669 - pkin(5) * (-t1070 * t735 + t1073 * t736), -t1070 * t662 - t1073 * t661 - pkin(5) * (-t1070 * t697 + t1073 * t698), -t1070 * t659 - t1073 * t658 - pkin(5) * (-t1070 * t674 + t1073 * t675); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t1038, 0, -t1037, 0, -t1016, t1094, t1088, pkin(5) * t1088, 0, 0, -t993, 0, -t1090, 0, t1163, t1160, t1169, pkin(5) * t1169 - qJ(2) * t1128 - t1070 * t915, -t1091, -t1070 * t990 + t1073 * t992, t940, t1091, t1161, 0, pkin(5) * t1162 - t1070 * t873 + t1073 * t875, pkin(5) * t939 - t1070 * t874 + t1073 * t876, t1073 * t858 - t1070 * t857 + pkin(5) * (-t1070 * t991 - t1073 * t989), t1073 * t776 - t1070 * t766 + pkin(5) * (-t1070 * t830 - t1073 * t829), -t1070 * t836 + t1073 * t838, -t1070 * t817 + t1073 * t818, -t1070 * t860 + t1073 * t862, -t1070 * t835 + t1073 * t837, -t1070 * t859 + t1073 * t861, -t1070 * t902 + t1073 * t903, t1073 * t718 - t1070 * t712 + pkin(5) * (-t1070 * t816 - t1073 * t815), t1073 * t724 - t1070 * t720 + pkin(5) * (-t1070 * t828 - t1073 * t827), t1073 * t699 - t1070 * t695 + pkin(5) * (-t1070 * t814 - t1073 * t813), t1073 * t688 - t1070 * t682 + pkin(5) * (-t1070 * t750 - t1073 * t749), -t1070 * t732 + t1073 * t734, -t1070 * t700 + t1073 * t701, -t1070 * t738 + t1073 * t740, -t1070 * t731 + t1073 * t733, -t1070 * t739 + t1073 * t741, -t1070 * t777 + t1073 * t778, t1073 * t668 - t1070 * t667 + pkin(5) * (-t1070 * t730 - t1073 * t729), t1073 * t670 - t1070 * t669 + pkin(5) * (-t1070 * t736 - t1073 * t735), t1073 * t662 - t1070 * t661 + pkin(5) * (-t1070 * t698 - t1073 * t697), t1073 * t659 - t1070 * t658 + pkin(5) * (-t1070 * t675 - t1073 * t674); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1151, 0, 0, -g(1), -t1040, 0, 0, 0, t1033, 0, -t1032, 0, t1093, t1007, -t927, -qJ(2) * t927, t1002, t992, t998, -t1002, t999, 0, t875, t876, t858, t776, t838, t818, t862, t837, t861, t903, t718, t724, t699, t688, t734, t701, t740, t733, t741, t778, t668, t670, t662, t659; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1151, 0, qJDD(1), 0, g(1), 0, t1039, 0, 0, 0, t1032, 0, t1033, 0, -t1007, t1093, t1107, t915, t1001, t990, t995, -t1001, -t997, 0, t873, t874, t857, t766, t836, t817, t860, t835, t859, t902, t712, t720, t695, t682, t732, t700, t738, t731, t739, t777, t667, t669, t661, t658; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1040, -t1039, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t957, t958, 0, t925, t1051, t1041, 0, t1053, 0, 0, t905, t904, t823, t793, t890, t854, t883, t889, t882, t908, t737, t755, t713, t691, t746, t706, t762, t745, t763, t779, t671, t681, t664, t660; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1151, 0, 0, -t1062, t987, 0, t1108, t1031, t1025, -t1108, t1026, 0, t959, t960, -t896, -qJ(3) * t896, t892, t856, t886, t891, t885, t909, t768, t775, t723, t710, t748, t708, t764, t747, t765, t780, t687, t689, t665, t663; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1151, 0, qJDD(1), 0, t1062, 0, t988, 0, t1042, -t1036, -t1052, -t1042, -t1054, 0, t949, t950, 0, -pkin(2) * t896, -t986, -t985, -t1019, t986, t1018, -qJDD(4), t781, t788, t810, t728, -t916, -t914, -t852, t916, t848, -t1059, t694, t696, t690, t666; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t987, -t988, 0, 0, t1051, t1041, 0, t1053, 0, 0, t1113, t1086, t1097, t1145, t890, t854, t883, t889, t882, t908, t1099, t1098, t1100, t1083, t746, t706, t762, t745, t763, t779, t1102, t1101, t1103, t1104; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1052, t1054, t1042, 0, t1056, 0, 0, t966, t949, 0, t947, t922, t937, t945, t936, t964, t869, t893, t783, -pkin(6) * t800, t792, t753, t807, t791, t808, t820, t717, t722, t686, t677; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1052, -t1117, t1054, -t1042, 0, -t966, 0, t950, 0, t946, t920, t934, t944, t933, t963, t822, t846, t774, t785, t790, t751, t805, t789, t806, t819, t704, t715, t684, t673; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1042, t1036, t1052, t1042, t1054, 0, -t949, -t950, 0, 0, t986, t985, t1019, -t986, -t1018, qJDD(4), t1085, t1096, t1148, t1149, t916, t914, t852, -t916, -t848, t1059, t1082, t1079, t1111, t1112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t984, -t982, t1154, t1014, t1008, -t1014, 0, t948, t866, 0, t834, t798, t879, t832, t880, t907, t795, t802, t711, -pkin(7) * t726; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1124, t983, t1009, -t1080, t980, -t1124, -t948, 0, t867, 0, t833, t796, t877, t831, t878, t906, t767, t772, t702, t719; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t986, t985, t1019, -t986, -t1018, qJDD(4), -t866, -t867, 0, 0, t916, t914, t852, -t916, -t848, t1059, t1095, t1084, t794, t725; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t901, -t847, t1158, t962, t955, -t962, 0, t865, t770, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1144, t1159, t956, t900, t912, -t1144, -t865, 0, t771, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t916, t914, t852, -t916, -t848, t1059, -t770, -t771, 0, 0;];
m_new_reg = t1;
