% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPPRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:29
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPPRR3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR3_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR3_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR3_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPPRR3_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:28:52
% EndTime: 2020-01-03 11:29:09
% DurationCPUTime: 17.44s
% Computational Cost: add. (82767->611), mult. (187064->864), div. (0->0), fcn. (132391->10), ass. (0->421)
t1086 = sin(qJ(1));
t1081 = sin(pkin(8));
t1083 = cos(pkin(8));
t1089 = cos(qJ(1));
t1052 = g(2) * t1086 - g(3) * t1089;
t1171 = qJD(1) ^ 2;
t1042 = -pkin(1) * t1171 - t1052;
t1053 = g(2) * t1089 + g(3) * t1086;
t1097 = qJDD(1) * pkin(1) - t1053;
t997 = t1042 * t1081 - t1083 * t1097;
t998 = t1083 * t1042 + t1081 * t1097;
t1121 = t1081 * t997 + t1083 * t998;
t937 = t1081 * t998 - t1083 * t997;
t1148 = t1089 * t937;
t1192 = t1086 * t1121 + t1148;
t1154 = t1086 * t937;
t1191 = -t1089 * t1121 + t1154;
t1133 = t1081 * qJDD(1);
t1045 = t1083 * t1171 + t1133;
t1078 = g(1) - qJDD(2);
t1017 = qJ(2) * t1045 - t1078 * t1083;
t1132 = t1083 * qJDD(1);
t1046 = -t1081 * t1171 + t1132;
t1107 = -qJ(2) * t1046 - t1078 * t1081;
t1174 = -t1045 * t1089 - t1046 * t1086;
t1190 = pkin(5) * t1174 - t1089 * t1017 + t1086 * t1107;
t1084 = sin(qJ(5));
t1075 = qJDD(4) + qJDD(5);
t1082 = cos(pkin(9));
t1085 = sin(qJ(4));
t1088 = cos(qJ(4));
t1080 = sin(pkin(9));
t1147 = qJD(1) * t1080;
t1030 = -qJD(1) * t1082 * t1088 + t1085 * t1147;
t1103 = t1080 * t1088 + t1082 * t1085;
t1031 = t1103 * qJD(1);
t1087 = cos(qJ(5));
t979 = t1030 * t1087 + t1031 * t1084;
t981 = -t1030 * t1084 + t1031 * t1087;
t926 = t981 * t979;
t1180 = -t926 + t1075;
t1189 = t1084 * t1180;
t996 = t1031 * t1030;
t1176 = qJDD(4) - t996;
t1188 = t1085 * t1176;
t1187 = t1087 * t1180;
t1186 = t1088 * t1176;
t1093 = t1082 ^ 2;
t1069 = t1093 * t1171;
t1091 = t1080 ^ 2;
t1135 = t1091 * t1171;
t1048 = t1069 + t1135;
t1175 = t1045 * t1086 - t1046 * t1089;
t1185 = pkin(5) * t1175 + t1086 * t1017 + t1089 * t1107;
t1173 = t1171 * (t1091 + t1093);
t1038 = t1082 * t1173;
t1123 = t1082 * t1132;
t1007 = -t1038 * t1081 + t1123;
t1067 = t1082 * qJDD(1);
t1009 = t1038 * t1083 + t1067 * t1081;
t1183 = t1007 * t1089 - t1009 * t1086;
t1182 = t1007 * t1086 + t1009 * t1089;
t1059 = t1082 * t1078;
t982 = -pkin(2) * t1171 + qJDD(1) * qJ(3) + t998;
t1119 = 0.2e1 * qJD(1) * qJD(3) + t982;
t959 = t1080 * t1119 + t1059;
t1143 = t1080 * t1078;
t960 = t1082 * t1119 - t1143;
t908 = t1080 * t959 + t1082 * t960;
t1065 = t1080 * qJDD(1);
t1028 = t1065 * t1085 - t1067 * t1088;
t1146 = t1031 * qJD(4);
t1096 = t1028 + t1146;
t1024 = t1030 * qJD(4);
t1029 = t1103 * qJDD(1);
t994 = -t1024 + t1029;
t911 = -qJD(5) * t979 - t1084 * t1096 + t1087 * t994;
t1076 = qJD(4) + qJD(5);
t972 = t1076 * t979;
t1181 = -t972 + t911;
t1120 = t1084 * t994 + t1087 * t1096;
t858 = (qJD(5) - t1076) * t981 + t1120;
t977 = t979 ^ 2;
t978 = t981 ^ 2;
t1170 = t1030 ^ 2;
t1027 = t1031 ^ 2;
t1074 = t1076 ^ 2;
t1142 = t1082 * t1171;
t1166 = pkin(6) * qJDD(1);
t941 = -0.2e1 * qJD(3) * t1147 - t1059 + (pkin(3) * t1142 - t1166 - t982) * t1080;
t942 = -pkin(3) * t1069 - t1143 + (t1119 + t1166) * t1082;
t876 = t1085 * t942 - t1088 * t941;
t877 = t1085 * t941 + t1088 * t942;
t810 = t1085 * t877 - t1088 * t876;
t1169 = pkin(3) * t810;
t929 = -t1028 * t1085 - t1029 * t1088;
t1168 = pkin(3) * t929;
t976 = -qJDD(1) * pkin(2) - qJ(3) * t1171 + qJDD(3) + t997;
t1165 = -pkin(2) * t976 + qJ(3) * t908;
t1164 = t1076 * t981;
t1163 = t1080 * t810;
t969 = t1080 * t976;
t1162 = t1081 * t976;
t1161 = t1082 * t810;
t970 = t1082 * t976;
t1160 = t1083 * t976;
t1013 = qJD(4) * pkin(4) - pkin(7) * t1031;
t958 = -pkin(3) * t1067 - pkin(6) * t1048 + t976;
t875 = pkin(4) * t1096 - pkin(7) * t1170 + t1013 * t1031 + t958;
t1159 = t1084 * t875;
t922 = t926 + t1075;
t1158 = t1084 * t922;
t821 = (-t994 - t1024) * pkin(7) + t1176 * pkin(4) - t876;
t822 = -pkin(4) * t1170 - pkin(7) * t1096 - qJD(4) * t1013 + t877;
t780 = t1084 * t822 - t1087 * t821;
t781 = t1084 * t821 + t1087 * t822;
t736 = t1084 * t781 - t1087 * t780;
t1157 = t1085 * t736;
t1156 = t1085 * t958;
t990 = qJDD(4) + t996;
t1155 = t1085 * t990;
t1153 = t1087 * t875;
t1152 = t1087 * t922;
t1151 = t1088 * t736;
t1150 = t1088 * t958;
t1149 = t1088 * t990;
t1145 = t1076 * t1084;
t1144 = t1076 * t1087;
t1141 = t1085 * t1030;
t1140 = t1085 * t1031;
t1139 = t1088 * t1030;
t1138 = t1088 * t1031;
t1131 = t1081 * t926;
t1130 = t1083 * t926;
t1129 = pkin(2) * t1067 - qJ(3) * t1038 - t970;
t737 = t1084 * t780 + t1087 * t781;
t702 = t1085 * t737 + t1151;
t735 = pkin(4) * t736;
t1128 = pkin(3) * t702 + t735;
t862 = t972 + t911;
t807 = -t1084 * t858 - t1087 * t862;
t809 = t1084 * t862 - t1087 * t858;
t762 = t1085 * t809 + t1088 * t807;
t804 = pkin(4) * t807;
t1127 = pkin(3) * t762 + t804;
t1126 = t1081 * t996;
t1055 = t1080 * t1142;
t1125 = t1083 * t996;
t1124 = t1080 * t1067;
t1050 = -qJDD(1) * t1086 - t1089 * t1171;
t1122 = pkin(5) * t1050 + g(1) * t1089;
t811 = t1085 * t876 + t1088 * t877;
t703 = t1088 * t737 - t1157;
t729 = -pkin(4) * t875 + pkin(7) * t737;
t683 = -pkin(3) * t875 + pkin(6) * t703 - pkin(7) * t1157 + t1088 * t729;
t687 = -pkin(6) * t702 - pkin(7) * t1151 - t1085 * t729;
t690 = -t1080 * t702 + t1082 * t703;
t1118 = -pkin(2) * t875 + qJ(3) * t690 + t1080 * t687 + t1082 * t683;
t909 = -t977 - t978;
t712 = -pkin(4) * t909 + pkin(7) * t809 + t737;
t721 = -pkin(7) * t807 - t736;
t764 = -t1085 * t807 + t1088 * t809;
t694 = -pkin(3) * t909 + pkin(6) * t764 + t1085 * t721 + t1088 * t712;
t696 = -pkin(6) * t762 - t1085 * t712 + t1088 * t721;
t719 = -t1080 * t762 + t1082 * t764;
t1117 = -pkin(2) * t909 + qJ(3) * t719 + t1080 * t696 + t1082 * t694;
t920 = -t1074 - t977;
t836 = t1087 * t920 - t1189;
t857 = (qJD(5) + t1076) * t981 + t1120;
t777 = -pkin(4) * t857 + pkin(7) * t836 - t1153;
t835 = t1084 * t920 + t1187;
t797 = -t1085 * t835 + t1088 * t836;
t805 = -pkin(7) * t835 + t1159;
t714 = -pkin(3) * t857 + pkin(6) * t797 + t1085 * t805 + t1088 * t777;
t796 = t1085 * t836 + t1088 * t835;
t727 = -pkin(6) * t796 - t1085 * t777 + t1088 * t805;
t754 = -t1080 * t796 + t1082 * t797;
t1116 = -pkin(2) * t857 + qJ(3) * t754 + t1080 * t727 + t1082 * t714;
t964 = -t978 - t1074;
t882 = -t1084 * t964 - t1152;
t782 = -pkin(4) * t1181 + pkin(7) * t882 + t1159;
t881 = t1087 * t964 - t1158;
t812 = -pkin(7) * t881 + t1153;
t814 = -t1085 * t881 + t1088 * t882;
t725 = -pkin(3) * t1181 + pkin(6) * t814 + t1085 * t812 + t1088 * t782;
t813 = t1085 * t882 + t1088 * t881;
t732 = -pkin(6) * t813 - t1085 * t782 + t1088 * t812;
t771 = -t1080 * t813 + t1082 * t814;
t1115 = -pkin(2) * t1181 + qJ(3) * t771 + t1080 * t732 + t1082 * t725;
t931 = -t1028 * t1088 + t1029 * t1085;
t963 = -t1027 - t1170;
t784 = -pkin(3) * t963 + pkin(6) * t931 + t811;
t793 = -pkin(6) * t929 - t810;
t865 = -t1080 * t929 + t1082 * t931;
t1114 = -pkin(2) * t963 + qJ(3) * t865 + t1080 * t793 + t1082 * t784;
t1090 = qJD(4) ^ 2;
t988 = -t1090 - t1170;
t928 = t1088 * t988 - t1188;
t992 = t1028 + 0.2e1 * t1146;
t832 = -pkin(3) * t992 + pkin(6) * t928 - t1150;
t927 = t1085 * t988 + t1186;
t852 = -t1080 * t927 + t1082 * t928;
t879 = -pkin(6) * t927 + t1156;
t1113 = -pkin(2) * t992 + qJ(3) * t852 + t1080 * t879 + t1082 * t832;
t1020 = -t1027 - t1090;
t948 = -t1020 * t1085 - t1149;
t993 = -0.2e1 * t1024 + t1029;
t856 = -pkin(3) * t993 + pkin(6) * t948 + t1156;
t945 = t1020 * t1088 - t1155;
t897 = -t1080 * t945 + t1082 * t948;
t903 = -pkin(6) * t945 + t1150;
t1112 = -pkin(2) * t993 + qJ(3) * t897 + t1080 * t903 + t1082 * t856;
t1111 = -t1052 * t1086 - t1053 * t1089;
t1064 = t1091 * qJDD(1);
t1066 = t1093 * qJDD(1);
t1043 = t1066 + t1064;
t1110 = pkin(2) * t1048 + qJ(3) * t1043 + t908;
t1109 = pkin(3) * t945 - t877;
t1108 = pkin(4) * t835 - t780;
t906 = t1080 * t960 - t1082 * t959;
t1011 = t1045 * t1082 * t1080;
t1012 = -t1055 * t1081 + t1080 * t1123;
t1106 = t1011 * t1089 + t1012 * t1086;
t1105 = t1011 * t1086 - t1012 * t1089;
t1104 = t1052 * t1089 - t1053 * t1086;
t1037 = t1080 * t1173;
t1102 = -pkin(2) * t1065 + qJ(3) * t1037 + t969;
t1101 = pkin(3) * t927 - t876;
t1100 = pkin(4) * t881 - t781;
t768 = t1082 * t811 - t1163;
t795 = -pkin(3) * t958 + pkin(6) * t811;
t1099 = -pkin(2) * t958 - pkin(6) * t1163 + qJ(3) * t768 + t1082 * t795;
t1098 = pkin(3) * t796 + t1108;
t1095 = pkin(3) * t813 + t1100;
t1054 = 0.2e1 * t1124;
t1051 = qJDD(1) * t1089 - t1086 * t1171;
t1049 = -t1069 + t1135;
t1044 = t1066 - t1064;
t1026 = pkin(5) * t1051 + g(1) * t1086;
t1019 = -t1027 + t1090;
t1018 = -t1090 + t1170;
t1008 = t1037 * t1083 + t1080 * t1133;
t1005 = t1037 * t1081 - t1080 * t1132;
t1002 = t1044 * t1083 + t1049 * t1081;
t1001 = t1043 * t1083 - t1048 * t1081;
t1000 = t1044 * t1081 - t1049 * t1083;
t999 = t1043 * t1081 + t1048 * t1083;
t995 = t1027 - t1170;
t974 = (-t1139 + t1140) * qJD(4);
t973 = (-t1138 - t1141) * qJD(4);
t968 = -pkin(1) * t1045 - t998;
t967 = pkin(1) * t1046 - t997;
t966 = -t978 + t1074;
t965 = t977 - t1074;
t957 = -qJD(4) * t1140 + t1088 * t994;
t956 = qJD(4) * t1138 + t1085 * t994;
t955 = qJD(4) * t1139 + t1085 * t1096;
t954 = qJD(4) * t1141 - t1088 * t1096;
t950 = t1005 * t1086 - t1008 * t1089;
t949 = t1005 * t1089 + t1008 * t1086;
t947 = -t1019 * t1085 + t1186;
t946 = t1018 * t1088 - t1155;
t944 = t1019 * t1088 + t1188;
t943 = t1018 * t1085 + t1149;
t935 = pkin(1) * t937;
t932 = -t1085 * t993 - t1088 * t992;
t930 = -t1085 * t992 + t1088 * t993;
t925 = pkin(1) * t1078 + qJ(2) * t1121;
t924 = t978 - t977;
t919 = -t1080 * t973 + t1082 * t974;
t918 = t1080 * t974 + t1082 * t973;
t917 = (t1084 * t981 - t1087 * t979) * t1076;
t916 = (-t1084 * t979 - t1087 * t981) * t1076;
t915 = pkin(1) * t1007 + t1129;
t914 = pkin(1) * t1005 + t1102;
t913 = qJDD(4) * t1081 + t1083 * t919;
t912 = -qJDD(4) * t1083 + t1081 * t919;
t910 = -qJD(5) * t981 - t1120;
t902 = -t1080 * t956 + t1082 * t957;
t901 = -t1080 * t954 + t1082 * t955;
t900 = t1080 * t957 + t1082 * t956;
t899 = t1080 * t955 + t1082 * t954;
t896 = -t1080 * t944 + t1082 * t947;
t895 = -t1080 * t943 + t1082 * t946;
t894 = t1080 * t948 + t1082 * t945;
t893 = t1080 * t947 + t1082 * t944;
t892 = t1080 * t946 + t1082 * t943;
t890 = t1087 * t965 - t1158;
t889 = -t1084 * t966 + t1187;
t888 = t1084 * t965 + t1152;
t887 = t1087 * t966 + t1189;
t886 = -qJ(2) * t1005 - t1081 * t960 + t1082 * t1160;
t885 = -qJ(2) * t1007 + t1080 * t1160 - t1081 * t959;
t884 = qJ(2) * t1008 + t1081 * t970 + t1083 * t960;
t883 = -qJ(2) * t1009 + t1080 * t1162 + t1083 * t959;
t872 = t1029 * t1081 + t1083 * t896;
t871 = -t1028 * t1081 + t1083 * t895;
t870 = -t1029 * t1083 + t1081 * t896;
t869 = t1028 * t1083 + t1081 * t895;
t868 = -qJ(2) * t999 - t1083 * t906;
t867 = qJ(2) * t1001 - t1081 * t906;
t866 = -t1080 * t930 + t1082 * t932;
t864 = t1080 * t932 + t1082 * t930;
t863 = t1080 * t931 + t1082 * t929;
t851 = t1080 * t928 + t1082 * t927;
t848 = t1083 * t902 + t1126;
t847 = t1083 * t901 - t1126;
t846 = t1081 * t902 - t1125;
t845 = t1081 * t901 + t1125;
t844 = t1087 * t911 - t1145 * t981;
t843 = t1084 * t911 + t1144 * t981;
t842 = -t1084 * t910 + t1144 * t979;
t841 = t1087 * t910 + t1145 * t979;
t840 = t1083 * t908 + t1162;
t839 = t1081 * t908 - t1160;
t838 = t1081 * t993 + t1083 * t897;
t837 = t1081 * t897 - t1083 * t993;
t833 = pkin(1) * t999 + t1110;
t830 = -t1085 * t916 + t1088 * t917;
t829 = t1085 * t917 + t1088 * t916;
t828 = t1081 * t995 + t1083 * t866;
t827 = t1081 * t866 - t1083 * t995;
t826 = t1081 * t992 + t1083 * t852;
t825 = t1081 * t852 - t1083 * t992;
t824 = t1081 * t963 + t1083 * t865;
t823 = t1081 * t865 - t1083 * t963;
t820 = -pkin(2) * t863 - t1168;
t818 = -t1085 * t888 + t1088 * t890;
t817 = -t1085 * t887 + t1088 * t889;
t816 = t1085 * t890 + t1088 * t888;
t815 = t1085 * t889 + t1088 * t887;
t808 = -t1084 * t1181 - t1087 * t857;
t806 = -t1084 * t857 + t1087 * t1181;
t803 = pkin(1) * t839 + t1165;
t802 = -t1085 * t843 + t1088 * t844;
t801 = -t1085 * t841 + t1088 * t842;
t800 = t1085 * t844 + t1088 * t843;
t799 = t1085 * t842 + t1088 * t841;
t798 = -pkin(2) * t894 - t1109;
t791 = -pkin(2) * t851 - t1101;
t790 = -t1080 * t829 + t1082 * t830;
t789 = t1080 * t830 + t1082 * t829;
t788 = t1075 * t1081 + t1083 * t790;
t787 = -t1075 * t1083 + t1081 * t790;
t786 = -qJ(2) * t839 + (pkin(2) * t1081 - qJ(3) * t1083) * t906;
t785 = -qJ(3) * t894 - t1080 * t856 + t1082 * t903;
t778 = -qJ(3) * t851 - t1080 * t832 + t1082 * t879;
t776 = qJ(2) * t840 + (-pkin(2) * t1083 - qJ(3) * t1081 - pkin(1)) * t906;
t775 = -t1080 * t816 + t1082 * t818;
t774 = -t1080 * t815 + t1082 * t817;
t773 = t1080 * t818 + t1082 * t816;
t772 = t1080 * t817 + t1082 * t815;
t770 = t1080 * t814 + t1082 * t813;
t767 = t1080 * t811 + t1161;
t765 = pkin(1) * t837 + t1112;
t763 = -t1085 * t806 + t1088 * t808;
t761 = t1085 * t808 + t1088 * t806;
t760 = t1081 * t958 + t1083 * t768;
t759 = t1081 * t768 - t1083 * t958;
t758 = -t1080 * t800 + t1082 * t802;
t757 = -t1080 * t799 + t1082 * t801;
t756 = t1080 * t802 + t1082 * t800;
t755 = t1080 * t801 + t1082 * t799;
t753 = t1080 * t797 + t1082 * t796;
t751 = -t1081 * t858 + t1083 * t775;
t750 = t1081 * t862 + t1083 * t774;
t749 = t1081 * t775 + t1083 * t858;
t748 = t1081 * t774 - t1083 * t862;
t747 = pkin(1) * t825 + t1113;
t746 = t1081 * t1181 + t1083 * t771;
t745 = t1081 * t771 - t1083 * t1181;
t744 = t1083 * t758 + t1131;
t743 = t1083 * t757 - t1131;
t742 = t1081 * t758 - t1130;
t741 = t1081 * t757 + t1130;
t740 = t1081 * t857 + t1083 * t754;
t739 = t1081 * t754 - t1083 * t857;
t738 = -pkin(2) * t767 - t1169;
t734 = -qJ(2) * t837 - t1081 * t798 + t1083 * t785;
t733 = -qJ(3) * t863 - t1080 * t784 + t1082 * t793;
t730 = -pkin(1) * t894 + qJ(2) * t838 + t1081 * t785 + t1083 * t798;
t728 = -qJ(2) * t825 - t1081 * t791 + t1083 * t778;
t723 = pkin(1) * t823 + t1114;
t722 = -pkin(1) * t851 + qJ(2) * t826 + t1081 * t778 + t1083 * t791;
t720 = -pkin(6) * t1161 - qJ(3) * t767 - t1080 * t795;
t718 = -t1080 * t761 + t1082 * t763;
t717 = t1080 * t764 + t1082 * t762;
t716 = t1080 * t763 + t1082 * t761;
t711 = t1081 * t924 + t1083 * t718;
t710 = t1081 * t718 - t1083 * t924;
t709 = -qJ(2) * t823 - t1081 * t820 + t1083 * t733;
t708 = t1081 * t909 + t1083 * t719;
t707 = t1081 * t719 - t1083 * t909;
t706 = -pkin(2) * t770 - t1095;
t705 = -pkin(1) * t863 + qJ(2) * t824 + t1081 * t733 + t1083 * t820;
t704 = -pkin(2) * t753 - t1098;
t701 = pkin(1) * t759 + t1099;
t700 = -pkin(2) * t717 - t1127;
t699 = -qJ(3) * t770 - t1080 * t725 + t1082 * t732;
t698 = -qJ(2) * t759 - t1081 * t738 + t1083 * t720;
t697 = -qJ(3) * t753 - t1080 * t714 + t1082 * t727;
t692 = -pkin(1) * t767 + qJ(2) * t760 + t1081 * t720 + t1083 * t738;
t691 = pkin(1) * t745 + t1115;
t689 = t1080 * t703 + t1082 * t702;
t685 = t1081 * t875 + t1083 * t690;
t684 = t1081 * t690 - t1083 * t875;
t681 = pkin(1) * t739 + t1116;
t680 = -qJ(2) * t745 - t1081 * t706 + t1083 * t699;
t679 = -pkin(1) * t770 + qJ(2) * t746 + t1081 * t699 + t1083 * t706;
t678 = -qJ(2) * t739 - t1081 * t704 + t1083 * t697;
t677 = -pkin(1) * t753 + qJ(2) * t740 + t1081 * t697 + t1083 * t704;
t676 = -pkin(2) * t689 - t1128;
t675 = -qJ(3) * t717 - t1080 * t694 + t1082 * t696;
t674 = pkin(1) * t707 + t1117;
t673 = -qJ(3) * t689 - t1080 * t683 + t1082 * t687;
t672 = -qJ(2) * t707 - t1081 * t700 + t1083 * t675;
t671 = -pkin(1) * t717 + qJ(2) * t708 + t1081 * t675 + t1083 * t700;
t670 = pkin(1) * t684 + t1118;
t669 = -qJ(2) * t684 - t1081 * t676 + t1083 * t673;
t668 = -pkin(1) * t689 + qJ(2) * t685 + t1081 * t673 + t1083 * t676;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t1053, t1052, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t967, t968, 0, t935, t1064, t1054, 0, t1066, 0, 0, t915, t914, t833, t803, t900, t864, t893, t899, t892, t918, t747, t765, t723, t701, t756, t716, t772, t755, t773, t789, t681, t691, t674, t670; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t1050, 0, t1051, 0, t1122, -t1026, -t1104, -pkin(5) * t1104, 0, 0, -t1174, 0, -t1175, 0, t1190, t1185, -t1191, -pkin(5) * t1191 - qJ(2) * t1154 + t1089 * t925, t1106, t1000 * t1089 + t1002 * t1086, t949, -t1106, -t1183, 0, -pkin(5) * t1182 + t1086 * t885 + t1089 * t883, -pkin(5) * t950 + t1086 * t886 + t1089 * t884, t1086 * t868 + t1089 * t867 - pkin(5) * (-t1001 * t1089 + t1086 * t999), t1086 * t786 + t1089 * t776 - pkin(5) * (t1086 * t839 - t1089 * t840), t1086 * t848 + t1089 * t846, t1086 * t828 + t1089 * t827, t1086 * t872 + t1089 * t870, t1086 * t847 + t1089 * t845, t1086 * t871 + t1089 * t869, t1086 * t913 + t1089 * t912, t1086 * t728 + t1089 * t722 - pkin(5) * (t1086 * t825 - t1089 * t826), t1086 * t734 + t1089 * t730 - pkin(5) * (t1086 * t837 - t1089 * t838), t1086 * t709 + t1089 * t705 - pkin(5) * (t1086 * t823 - t1089 * t824), t1086 * t698 + t1089 * t692 - pkin(5) * (t1086 * t759 - t1089 * t760), t1086 * t744 + t1089 * t742, t1086 * t711 + t1089 * t710, t1086 * t750 + t1089 * t748, t1086 * t743 + t1089 * t741, t1086 * t751 + t1089 * t749, t1086 * t788 + t1089 * t787, t1086 * t678 + t1089 * t677 - pkin(5) * (t1086 * t739 - t1089 * t740), t1086 * t680 + t1089 * t679 - pkin(5) * (t1086 * t745 - t1089 * t746), t1086 * t672 + t1089 * t671 - pkin(5) * (t1086 * t707 - t1089 * t708), t1086 * t669 + t1089 * t668 - pkin(5) * (t1086 * t684 - t1089 * t685); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t1051, 0, -t1050, 0, t1026, t1122, t1111, pkin(5) * t1111, 0, 0, t1175, 0, -t1174, 0, -t1185, t1190, t1192, pkin(5) * t1192 + qJ(2) * t1148 + t1086 * t925, t1105, t1000 * t1086 - t1002 * t1089, t950, -t1105, -t1182, 0, pkin(5) * t1183 + t1086 * t883 - t1089 * t885, pkin(5) * t949 + t1086 * t884 - t1089 * t886, -t1089 * t868 + t1086 * t867 + pkin(5) * (t1001 * t1086 + t1089 * t999), -t1089 * t786 + t1086 * t776 + pkin(5) * (t1086 * t840 + t1089 * t839), t1086 * t846 - t1089 * t848, t1086 * t827 - t1089 * t828, t1086 * t870 - t1089 * t872, t1086 * t845 - t1089 * t847, t1086 * t869 - t1089 * t871, t1086 * t912 - t1089 * t913, -t1089 * t728 + t1086 * t722 + pkin(5) * (t1086 * t826 + t1089 * t825), -t1089 * t734 + t1086 * t730 + pkin(5) * (t1086 * t838 + t1089 * t837), -t1089 * t709 + t1086 * t705 + pkin(5) * (t1086 * t824 + t1089 * t823), -t1089 * t698 + t1086 * t692 + pkin(5) * (t1086 * t760 + t1089 * t759), t1086 * t742 - t1089 * t744, t1086 * t710 - t1089 * t711, t1086 * t748 - t1089 * t750, t1086 * t741 - t1089 * t743, t1086 * t749 - t1089 * t751, t1086 * t787 - t1089 * t788, -t1089 * t678 + t1086 * t677 + pkin(5) * (t1086 * t740 + t1089 * t739), -t1089 * t680 + t1086 * t679 + pkin(5) * (t1086 * t746 + t1089 * t745), -t1089 * t672 + t1086 * t671 + pkin(5) * (t1086 * t708 + t1089 * t707), -t1089 * t669 + t1086 * t668 + pkin(5) * (t1086 * t685 + t1089 * t684); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1171, 0, 0, -g(1), t1053, 0, 0, 0, t1046, 0, -t1045, 0, t1107, t1017, -t937, -qJ(2) * t937, t1012, t1002, t1008, -t1012, t1009, 0, t885, t886, t868, t786, t848, t828, t872, t847, t871, t913, t728, t734, t709, t698, t744, t711, t750, t743, t751, t788, t678, t680, t672, t669; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1171, 0, qJDD(1), 0, g(1), 0, -t1052, 0, 0, 0, t1045, 0, t1046, 0, -t1017, t1107, t1121, t925, t1011, t1000, t1005, -t1011, -t1007, 0, t883, t884, t867, t776, t846, t827, t870, t845, t869, t912, t722, t730, t705, t692, t742, t710, t748, t741, t749, t787, t677, t679, t671, t668; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1053, t1052, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t967, t968, 0, t935, t1064, t1054, 0, t1066, 0, 0, t915, t914, t833, t803, t900, t864, t893, t899, t892, t918, t747, t765, t723, t701, t756, t716, t772, t755, t773, t789, t681, t691, t674, t670; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1171, 0, 0, -t1078, t997, 0, t1124, t1044, t1037, -t1124, t1038, 0, t969, t970, -t906, -qJ(3) * t906, t902, t866, t896, t901, t895, t919, t778, t785, t733, t720, t758, t718, t774, t757, t775, t790, t697, t699, t675, t673; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1171, 0, qJDD(1), 0, t1078, 0, t998, 0, t1055, -t1049, -t1065, -t1055, -t1067, 0, t959, t960, 0, -pkin(2) * t906, -t996, -t995, -t1029, t996, t1028, -qJDD(4), t791, t798, t820, t738, -t926, -t924, -t862, t926, t858, -t1075, t704, t706, t700, t676; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t997, -t998, 0, 0, t1064, t1054, 0, t1066, 0, 0, t1129, t1102, t1110, t1165, t900, t864, t893, t899, t892, t918, t1113, t1112, t1114, t1099, t756, t716, t772, t755, t773, t789, t1116, t1115, t1117, t1118; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1065, t1067, t1055, 0, t1069, 0, 0, t976, t959, 0, t957, t932, t947, t955, t946, t974, t879, t903, t793, -pkin(6) * t810, t802, t763, t817, t801, t818, t830, t727, t732, t696, t687; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1065, -t1135, t1067, -t1055, 0, -t976, 0, t960, 0, t956, t930, t944, t954, t943, t973, t832, t856, t784, t795, t800, t761, t815, t799, t816, t829, t714, t725, t694, t683; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1055, t1049, t1065, t1055, t1067, 0, -t959, -t960, 0, 0, t996, t995, t1029, -t996, -t1028, qJDD(4), t1101, t1109, t1168, t1169, t926, t924, t862, -t926, -t858, t1075, t1098, t1095, t1127, t1128; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t994, -t992, t1176, t1024, t1018, -t1024, 0, t958, t876, 0, t844, t808, t889, t842, t890, t917, t805, t812, t721, -pkin(7) * t736; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1146, t993, t1019, -t1096, t990, -t1146, -t958, 0, t877, 0, t843, t806, t887, t841, t888, t916, t777, t782, t712, t729; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t996, t995, t1029, -t996, -t1028, qJDD(4), -t876, -t877, 0, 0, t926, t924, t862, -t926, -t858, t1075, t1108, t1100, t804, t735; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t911, -t857, t1180, t972, t965, -t972, 0, t875, t780, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1164, t1181, t966, t910, t922, -t1164, -t875, 0, t781, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t926, t924, t862, -t926, -t858, t1075, -t780, -t781, 0, 0;];
m_new_reg = t1;
