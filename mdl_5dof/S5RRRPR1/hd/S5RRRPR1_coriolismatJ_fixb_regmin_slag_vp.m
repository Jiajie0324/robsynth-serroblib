% Calculate minimal parameter regressor of coriolis matrix for
% S5RRRPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5,theta4]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x26]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:39
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RRRPR1_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR1_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR1_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRPR1_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:38:54
% EndTime: 2019-12-05 18:39:04
% DurationCPUTime: 4.40s
% Computational Cost: add. (6150->195), mult. (11953->275), div. (0->0), fcn. (13983->8), ass. (0->173)
t252 = qJD(2) + qJD(3);
t395 = qJD(5) + t252;
t202 = sin(qJ(5));
t205 = cos(qJ(5));
t203 = sin(qJ(3));
t204 = sin(qJ(2));
t206 = cos(qJ(3));
t207 = cos(qJ(2));
t179 = t203 * t204 - t206 * t207;
t181 = -t203 * t207 - t206 * t204;
t200 = sin(pkin(9));
t201 = cos(pkin(9));
t148 = -t201 * t179 + t200 * t181;
t333 = pkin(6) + pkin(7);
t188 = t333 * t207;
t183 = t206 * t188;
t187 = t333 * t204;
t286 = t203 * t187;
t340 = -t183 + t286;
t118 = t179 * qJ(4) + t340;
t126 = t206 * t187 + t203 * t188;
t341 = t181 * qJ(4) - t126;
t347 = t201 * t118 - t200 * t341;
t353 = -t148 * pkin(8) + t347;
t147 = t200 * t179 + t201 * t181;
t348 = t200 * t118 + t201 * t341;
t354 = t147 * pkin(8) + t348;
t392 = t395 * (-t202 * t353 - t205 * t354);
t391 = t395 * (-t202 * t354 + t205 * t353);
t355 = t202 * t147 + t205 * t148;
t267 = t355 * qJD(5);
t20 = t252 * t355 + t267;
t356 = -t205 * t147 + t202 * t148;
t265 = t356 * qJD(5);
t338 = t252 * t356 + t265;
t361 = t355 * qJD(1);
t86 = t355 * qJD(4);
t360 = t356 * qJD(1);
t83 = t356 * qJD(4);
t349 = t355 ^ 2 - t356 ^ 2;
t352 = t349 * qJD(1);
t339 = t252 * t126;
t196 = t206 * pkin(2) + pkin(3);
t292 = t200 * t203;
t167 = -pkin(2) * t292 + t201 * t196;
t332 = -t167 / 0.2e1;
t290 = t201 * t203;
t169 = pkin(2) * t290 + t200 * t196;
t331 = -t169 / 0.2e1;
t172 = (-t200 * t206 - t290) * pkin(2);
t330 = -t172 / 0.2e1;
t173 = (t201 * t206 - t292) * pkin(2);
t329 = -t173 / 0.2e1;
t240 = -t183 / 0.2e1;
t328 = t200 / 0.2e1;
t327 = t201 / 0.2e1;
t325 = t181 * pkin(3);
t324 = t200 * pkin(3);
t199 = t204 * pkin(2);
t197 = -t207 * pkin(2) - pkin(1);
t158 = t179 * pkin(3) + t197;
t94 = -t148 * pkin(4) + t158;
t323 = t94 * t356;
t322 = t94 * t355;
t317 = pkin(2) * qJD(3);
t316 = pkin(3) * qJD(3);
t315 = qJD(2) * pkin(2);
t302 = qJD(1) * t94;
t301 = t147 * t200;
t300 = t148 * t201;
t297 = t167 * t148;
t296 = t169 * t147;
t17 = t158 * (t199 - t325);
t295 = t17 * qJD(1);
t18 = t158 * t325;
t293 = t18 * qJD(1);
t288 = t202 * t172;
t287 = t202 * t173;
t285 = t205 * t173;
t208 = t148 * t329 - t296 / 0.2e1 + t147 * t330 + t297 / 0.2e1;
t214 = (t301 / 0.2e1 - t300 / 0.2e1) * pkin(3);
t24 = t214 + t208;
t283 = t24 * qJD(1);
t102 = -t147 * pkin(4) - t325;
t95 = t102 + t199;
t26 = -t355 * t95 + t323;
t282 = t26 * qJD(1);
t27 = t356 * t95 + t322;
t281 = t27 * qJD(1);
t28 = -t102 * t355 + t323;
t280 = t28 * qJD(1);
t29 = t102 * t356 + t322;
t279 = t29 * qJD(1);
t30 = t147 * t348 - t148 * t347;
t278 = t30 * qJD(1);
t43 = t147 ^ 2 + t148 ^ 2;
t271 = t43 * qJD(1);
t221 = t147 * t332 + t148 * t331;
t171 = -t325 / 0.2e1;
t251 = t171 + t199 / 0.2e1;
t56 = t221 + t251;
t270 = t56 * qJD(1);
t220 = t147 * t327 + t148 * t328;
t74 = (t181 / 0.2e1 + t220) * pkin(3);
t269 = t74 * qJD(1);
t264 = qJD(1) * t197;
t263 = qJD(1) * t207;
t262 = qJD(3) * t197;
t123 = t179 ^ 2 - t181 ^ 2;
t261 = t123 * qJD(1);
t142 = t179 * t199 - t197 * t181;
t258 = t142 * qJD(1);
t143 = -t197 * t179 - t181 * t199;
t257 = t143 * qJD(1);
t153 = t240 + t183 / 0.2e1;
t256 = t153 * qJD(1);
t191 = -t204 ^ 2 + t207 ^ 2;
t255 = t191 * qJD(1);
t254 = t204 * qJD(2);
t253 = t207 * qJD(2);
t250 = pkin(1) * t204 * qJD(1);
t249 = pkin(1) * t263;
t248 = t355 * t360;
t247 = t355 * t302;
t246 = t356 * t302;
t243 = t179 * t264;
t242 = t181 * t264;
t241 = t204 * t263;
t166 = pkin(4) + t167;
t192 = t201 * pkin(3) + pkin(4);
t239 = -t192 / 0.2e1 - t166 / 0.2e1;
t238 = pkin(2) * t252;
t150 = t252 * t181;
t235 = t324 / 0.2e1 + t169 / 0.2e1;
t232 = t173 / 0.2e1 + t239;
t210 = (t330 + t331) * t348 + (-t329 + t332) * t347;
t215 = (t327 * t347 + t328 * t348) * pkin(3);
t1 = t215 + t210;
t93 = t167 * t172 + t169 * t173;
t230 = t1 * qJD(1) - t93 * qJD(2);
t114 = -t205 * t166 + t202 * t169;
t229 = t114 * qJD(2);
t115 = t202 * t166 + t205 * t169;
t228 = t115 * qJD(2);
t165 = t205 * t172;
t140 = -t165 + t287;
t227 = t140 * qJD(2);
t141 = t285 + t288;
t225 = t141 * qJD(2);
t224 = t235 * t205;
t168 = -t205 * t192 + t202 * t324;
t68 = t232 * t205 + (t172 / 0.2e1 + t235) * t202;
t213 = -t68 * qJD(2) - t168 * qJD(3);
t170 = t202 * t192 + t205 * t324;
t70 = -t165 / 0.2e1 - t224 + t232 * t202;
t212 = -t70 * qJD(2) + t170 * qJD(3);
t164 = t170 * qJD(5);
t163 = t168 * qJD(5);
t151 = t181 * t179 * qJD(1);
t149 = t252 * t179;
t127 = 0.2e1 * t240 + t286;
t125 = t141 * qJD(3);
t124 = t140 * qJD(3);
t104 = t115 * qJD(5);
t103 = t114 * qJD(5);
t75 = pkin(3) * t220 + t171;
t71 = -t287 / 0.2e1 + t165 / 0.2e1 - t224 + t239 * t202;
t69 = -t285 / 0.2e1 - t288 / 0.2e1 + t239 * t205 + t235 * t202;
t57 = -t221 + t251;
t42 = t356 * t361;
t25 = t214 - t208;
t2 = t215 - t210;
t3 = [0, 0, 0, t204 * t253, t191 * qJD(2), 0, 0, 0, -pkin(1) * t254, -pkin(1) * t253, t179 * t150, t252 * t123, 0, 0, 0, t142 * qJD(2) - t181 * t262, t143 * qJD(2) - t179 * t262, t43 * qJD(4), t17 * qJD(2) - t18 * qJD(3) + t30 * qJD(4), t20 * t356, t395 * t349, 0, 0, 0, t26 * qJD(2) + t28 * qJD(3) + t265 * t94, t27 * qJD(2) + t29 * qJD(3) + t267 * t94; 0, 0, 0, t241, t255, t253, -t254, 0, -pkin(6) * t253 - t250, pkin(6) * t254 - t249, t151, t261, -t149, t150, 0, qJD(2) * t340 + t127 * qJD(3) + t258, t257 + t339, (t296 - t297) * qJD(2) + t25 * qJD(3), t295 + (t167 * t347 + t169 * t348) * qJD(2) + t2 * qJD(3) + t57 * qJD(4), t42, t352, t20, -t338, 0, t282 + t391, t281 + t392; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t151, t261, -t149, t150, 0, t127 * qJD(2) + qJD(3) * t340 - t242, -t243 + t339, t25 * qJD(2) + (-t300 + t301) * t316, -t293 + t2 * qJD(2) + t75 * qJD(4) + (t200 * t348 + t201 * t347) * t316, t42, t352, t20, -t338, 0, t280 + t391, t279 + t392; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t271, t57 * qJD(2) + t75 * qJD(3) + t278, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t248, t352, t20, -t338, 0, t246 + t391, t247 + t392; 0, 0, 0, -t241, -t255, 0, 0, 0, t250, t249, -t151, -t261, 0, 0, 0, t153 * qJD(3) - t258, -t257, -t24 * qJD(3), -t1 * qJD(3) - t56 * qJD(4) - t295, -t42, -t352, 0, 0, 0, -t282 - t83, -t281 - t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t203 * t317, -t206 * t317, 0, t93 * qJD(3), 0, 0, 0, 0, 0, -t124 - t104, -t125 + t103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t203 * t238 + t256, -t206 * t238, -t283, (t172 * t201 + t173 * t200) * t316 - t230, 0, 0, 0, 0, 0, t71 * qJD(5) - t124 - t227, t69 * qJD(5) - t125 - t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t270, 0, 0, 0, 0, 0, -t360, -t361; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71 * qJD(3) - t104 - t228, t69 * qJD(3) + t103 + t229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t151, -t261, 0, 0, 0, -t153 * qJD(2) + t242, t243, t24 * qJD(2), t1 * qJD(2) + t74 * qJD(4) + t293, -t42, -t352, 0, 0, 0, -t280 - t83, -t279 - t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t203 * t315 - t256, t206 * t315, t283, t230, 0, 0, 0, 0, 0, t70 * qJD(5) + t227, t68 * qJD(5) + t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t164, t163; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t269, 0, 0, 0, 0, 0, -t360, -t361; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t164 - t212, t163 - t213; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t271, t56 * qJD(2) - t74 * qJD(3) - t278, 0, 0, 0, 0, 0, t338, t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t270, 0, 0, 0, 0, 0, t360, t361; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t269, 0, 0, 0, 0, 0, t360, t361; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t360, t361; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t248, -t352, 0, 0, 0, -t246 - t83, -t247 - t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t70 * qJD(3) + t228, -t68 * qJD(3) - t229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t212, t213; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t360, -t361; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t3;
