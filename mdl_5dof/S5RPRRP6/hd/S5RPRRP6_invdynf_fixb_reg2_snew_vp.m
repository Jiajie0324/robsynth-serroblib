% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRRP6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:43
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRRP6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP6_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP6_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP6_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP6_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:43:40
% EndTime: 2019-12-31 18:43:42
% DurationCPUTime: 1.73s
% Computational Cost: add. (5908->173), mult. (11596->229), div. (0->0), fcn. (7437->8), ass. (0->133)
t1265 = cos(qJ(3));
t1279 = t1265 * qJD(1);
t1242 = -qJD(4) + t1279;
t1288 = qJD(4) - t1242;
t1287 = qJD(3) ^ 2;
t1261 = sin(qJ(4));
t1264 = cos(qJ(4));
t1262 = sin(qJ(3));
t1281 = qJD(1) * t1262;
t1221 = -t1264 * qJD(3) + t1261 * t1281;
t1286 = t1221 ^ 2;
t1223 = qJD(3) * t1261 + t1264 * t1281;
t1285 = t1223 ^ 2;
t1284 = t1242 ^ 2;
t1283 = -2 * qJD(5);
t1282 = -g(3) + qJDD(2);
t1280 = t1223 * t1221;
t1278 = qJD(4) + t1242;
t1263 = sin(qJ(1));
t1266 = cos(qJ(1));
t1238 = -g(1) * t1266 - g(2) * t1263;
t1267 = qJD(1) ^ 2;
t1224 = -pkin(1) * t1267 + t1238;
t1257 = sin(pkin(8));
t1258 = cos(pkin(8));
t1237 = t1263 * g(1) - g(2) * t1266;
t1269 = qJDD(1) * pkin(1) + t1237;
t1205 = -t1257 * t1224 + t1258 * t1269;
t1201 = -qJDD(1) * pkin(2) - t1267 * pkin(6) - t1205;
t1275 = qJD(3) * t1279;
t1276 = t1262 * qJDD(1);
t1227 = t1275 + t1276;
t1247 = qJD(3) * t1281;
t1250 = t1265 * qJDD(1);
t1228 = t1250 - 0.2e1 * t1247;
t1179 = (-t1227 - t1275) * pkin(7) - t1228 * pkin(3) + t1201;
t1206 = t1258 * t1224 + t1257 * t1269;
t1202 = -pkin(2) * t1267 + qJDD(1) * pkin(6) + t1206;
t1192 = t1265 * t1202 + t1262 * t1282;
t1225 = (-pkin(3) * t1265 - pkin(7) * t1262) * qJD(1);
t1186 = -pkin(3) * t1287 + qJDD(3) * pkin(7) + t1225 * t1279 + t1192;
t1164 = t1261 * t1179 + t1264 * t1186;
t1253 = t1262 ^ 2;
t1254 = t1265 ^ 2;
t1277 = t1253 + t1254;
t1274 = t1250 - qJDD(4) - t1247;
t1163 = t1264 * t1179 - t1261 * t1186;
t1229 = -qJDD(1) * t1257 - t1258 * t1267;
t1230 = qJDD(1) * t1258 - t1257 * t1267;
t1273 = t1266 * t1229 - t1230 * t1263;
t1272 = -t1264 * qJDD(3) + t1261 * t1227;
t1271 = t1229 * t1263 + t1230 * t1266;
t1270 = -t1261 * qJDD(3) - t1264 * t1227;
t1200 = -t1274 - t1280;
t1268 = -qJD(4) * t1223 - t1272;
t1246 = t1265 * t1282;
t1185 = -t1246 - qJDD(3) * pkin(3) - t1287 * pkin(7) + (qJD(1) * t1225 + t1202) * t1262;
t1190 = t1221 * t1278 + t1270;
t1241 = t1265 * t1267 * t1262;
t1240 = -t1254 * t1267 - t1287;
t1239 = -t1253 * t1267 - t1287;
t1236 = -qJDD(3) + t1241;
t1235 = qJDD(3) + t1241;
t1234 = t1277 * t1267;
t1233 = -qJDD(1) * t1263 - t1266 * t1267;
t1232 = qJDD(1) * t1266 - t1263 * t1267;
t1231 = t1277 * qJDD(1);
t1226 = 0.2e1 * t1275 + t1276;
t1214 = -pkin(4) * t1242 - qJ(5) * t1223;
t1213 = t1236 * t1265 - t1239 * t1262;
t1212 = -t1235 * t1262 + t1240 * t1265;
t1211 = t1236 * t1262 + t1239 * t1265;
t1210 = t1235 * t1265 + t1240 * t1262;
t1209 = -t1284 - t1285;
t1208 = t1231 * t1258 - t1234 * t1257;
t1207 = t1231 * t1257 + t1234 * t1258;
t1204 = -t1284 - t1286;
t1199 = t1274 - t1280;
t1198 = -t1285 - t1286;
t1196 = t1213 * t1258 + t1226 * t1257;
t1195 = t1212 * t1258 - t1228 * t1257;
t1194 = t1213 * t1257 - t1226 * t1258;
t1193 = t1212 * t1257 + t1228 * t1258;
t1191 = -t1202 * t1262 + t1246;
t1189 = -t1221 * t1288 - t1270;
t1188 = -t1223 * t1278 - t1272;
t1187 = t1223 * t1288 + t1272;
t1184 = -t1205 * t1257 + t1206 * t1258;
t1183 = t1205 * t1258 + t1206 * t1257;
t1181 = t1199 * t1264 - t1209 * t1261;
t1180 = t1199 * t1261 + t1209 * t1264;
t1178 = -t1200 * t1261 + t1204 * t1264;
t1177 = t1200 * t1264 + t1204 * t1261;
t1174 = -t1191 * t1262 + t1192 * t1265;
t1173 = t1191 * t1265 + t1192 * t1262;
t1172 = t1188 * t1264 - t1190 * t1261;
t1171 = t1188 * t1261 + t1190 * t1264;
t1170 = t1181 * t1265 + t1189 * t1262;
t1169 = t1181 * t1262 - t1189 * t1265;
t1168 = t1178 * t1265 + t1187 * t1262;
t1167 = t1178 * t1262 - t1187 * t1265;
t1166 = t1174 * t1258 + t1201 * t1257;
t1165 = t1174 * t1257 - t1201 * t1258;
t1162 = -pkin(4) * t1268 - qJ(5) * t1286 + t1223 * t1214 + qJDD(5) + t1185;
t1161 = t1172 * t1265 + t1198 * t1262;
t1160 = t1172 * t1262 - t1198 * t1265;
t1159 = t1170 * t1258 + t1180 * t1257;
t1158 = t1170 * t1257 - t1180 * t1258;
t1157 = t1168 * t1258 + t1177 * t1257;
t1156 = t1168 * t1257 - t1177 * t1258;
t1155 = t1242 * t1214 + t1268 * qJ(5) + (-pkin(4) * t1221 + t1283) * t1221 + t1164;
t1154 = pkin(4) * t1200 + qJ(5) * t1190 + t1223 * t1283 + t1163;
t1153 = t1161 * t1258 + t1171 * t1257;
t1152 = t1161 * t1257 - t1171 * t1258;
t1151 = -t1163 * t1261 + t1164 * t1264;
t1150 = t1163 * t1264 + t1164 * t1261;
t1149 = t1151 * t1265 + t1185 * t1262;
t1148 = t1151 * t1262 - t1185 * t1265;
t1147 = -t1158 * t1263 + t1159 * t1266;
t1146 = t1158 * t1266 + t1159 * t1263;
t1145 = -t1156 * t1263 + t1157 * t1266;
t1144 = t1156 * t1266 + t1157 * t1263;
t1143 = -t1154 * t1261 + t1155 * t1264;
t1142 = t1154 * t1264 + t1155 * t1261;
t1141 = -t1152 * t1263 + t1153 * t1266;
t1140 = t1152 * t1266 + t1153 * t1263;
t1139 = t1143 * t1265 + t1162 * t1262;
t1138 = t1143 * t1262 - t1162 * t1265;
t1137 = t1149 * t1258 + t1150 * t1257;
t1136 = t1149 * t1257 - t1150 * t1258;
t1135 = t1139 * t1258 + t1142 * t1257;
t1134 = t1139 * t1257 - t1142 * t1258;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1233, -t1232, 0, -t1237 * t1263 + t1238 * t1266, 0, 0, 0, 0, 0, 0, t1273, -t1271, 0, -t1183 * t1263 + t1184 * t1266, 0, 0, 0, 0, 0, 0, -t1193 * t1263 + t1195 * t1266, -t1194 * t1263 + t1196 * t1266, -t1207 * t1263 + t1208 * t1266, -t1165 * t1263 + t1166 * t1266, 0, 0, 0, 0, 0, 0, t1145, t1147, t1141, -t1136 * t1263 + t1137 * t1266, 0, 0, 0, 0, 0, 0, t1145, t1147, t1141, -t1134 * t1263 + t1135 * t1266; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1232, t1233, 0, t1237 * t1266 + t1238 * t1263, 0, 0, 0, 0, 0, 0, t1271, t1273, 0, t1183 * t1266 + t1184 * t1263, 0, 0, 0, 0, 0, 0, t1193 * t1266 + t1195 * t1263, t1194 * t1266 + t1196 * t1263, t1207 * t1266 + t1208 * t1263, t1165 * t1266 + t1166 * t1263, 0, 0, 0, 0, 0, 0, t1144, t1146, t1140, t1136 * t1266 + t1137 * t1263, 0, 0, 0, 0, 0, 0, t1144, t1146, t1140, t1134 * t1266 + t1135 * t1263; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1282, 0, 0, 0, 0, 0, 0, t1210, t1211, 0, t1173, 0, 0, 0, 0, 0, 0, t1167, t1169, t1160, t1148, 0, 0, 0, 0, 0, 0, t1167, t1169, t1160, t1138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1267, -qJDD(1), 0, t1238, 0, 0, 0, 0, 0, 0, t1229, -t1230, 0, t1184, 0, 0, 0, 0, 0, 0, t1195, t1196, t1208, t1166, 0, 0, 0, 0, 0, 0, t1157, t1159, t1153, t1137, 0, 0, 0, 0, 0, 0, t1157, t1159, t1153, t1135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1267, 0, t1237, 0, 0, 0, 0, 0, 0, t1230, t1229, 0, t1183, 0, 0, 0, 0, 0, 0, t1193, t1194, t1207, t1165, 0, 0, 0, 0, 0, 0, t1156, t1158, t1152, t1136, 0, 0, 0, 0, 0, 0, t1156, t1158, t1152, t1134; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1282, 0, 0, 0, 0, 0, 0, t1210, t1211, 0, t1173, 0, 0, 0, 0, 0, 0, t1167, t1169, t1160, t1148, 0, 0, 0, 0, 0, 0, t1167, t1169, t1160, t1138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1267, -qJDD(1), 0, t1206, 0, 0, 0, 0, 0, 0, t1212, t1213, t1231, t1174, 0, 0, 0, 0, 0, 0, t1168, t1170, t1161, t1149, 0, 0, 0, 0, 0, 0, t1168, t1170, t1161, t1139; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1267, 0, t1205, 0, 0, 0, 0, 0, 0, t1228, -t1226, t1234, -t1201, 0, 0, 0, 0, 0, 0, -t1177, -t1180, -t1171, -t1150, 0, 0, 0, 0, 0, 0, -t1177, -t1180, -t1171, -t1142; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1282, 0, 0, 0, 0, 0, 0, t1210, t1211, 0, t1173, 0, 0, 0, 0, 0, 0, t1167, t1169, t1160, t1148, 0, 0, 0, 0, 0, 0, t1167, t1169, t1160, t1138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1240, t1236, t1250, t1192, 0, 0, 0, 0, 0, 0, t1178, t1181, t1172, t1151, 0, 0, 0, 0, 0, 0, t1178, t1181, t1172, t1143; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1235, t1239, -t1276, t1191, 0, 0, 0, 0, 0, 0, -t1187, -t1189, -t1198, -t1185, 0, 0, 0, 0, 0, 0, -t1187, -t1189, -t1198, -t1162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1228, t1226, -t1234, t1201, 0, 0, 0, 0, 0, 0, t1177, t1180, t1171, t1150, 0, 0, 0, 0, 0, 0, t1177, t1180, t1171, t1142; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1204, t1199, t1188, t1164, 0, 0, 0, 0, 0, 0, t1204, t1199, t1188, t1155; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1200, t1209, t1190, t1163, 0, 0, 0, 0, 0, 0, t1200, t1209, t1190, t1154; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1187, t1189, t1198, t1185, 0, 0, 0, 0, 0, 0, t1187, t1189, t1198, t1162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1204, t1199, t1188, t1155; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1200, t1209, t1190, t1154; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1187, t1189, t1198, t1162;];
f_new_reg = t1;
