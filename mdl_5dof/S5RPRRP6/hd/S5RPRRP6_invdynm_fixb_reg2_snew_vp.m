% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRRP6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:43
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRRP6_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP6_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP6_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP6_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP6_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP6_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:43:30
% EndTime: 2019-12-31 18:43:40
% DurationCPUTime: 10.54s
% Computational Cost: add. (35746->543), mult. (69702->683), div. (0->0), fcn. (43832->8), ass. (0->384)
t1007 = sin(qJ(4));
t1010 = cos(qJ(4));
t1008 = sin(qJ(3));
t1058 = qJD(1) * t1008;
t956 = -t1010 * qJD(3) + t1007 * t1058;
t958 = t1007 * qJD(3) + t1010 * t1058;
t912 = t958 * t956;
t990 = qJD(3) * t1058;
t1011 = cos(qJ(3));
t994 = t1011 * qJDD(1);
t1081 = t994 - t990;
t951 = -qJDD(4) + t1081;
t1128 = t912 + t951;
t1133 = t1128 * pkin(4);
t1012 = cos(qJ(1));
t1003 = sin(pkin(8));
t1004 = cos(pkin(8));
t1009 = sin(qJ(1));
t976 = g(1) * t1009 - t1012 * g(2);
t1025 = qJDD(1) * pkin(1) + t976;
t1013 = qJD(1) ^ 2;
t977 = g(1) * t1012 + g(2) * t1009;
t960 = -pkin(1) * t1013 - t977;
t900 = t1003 * t960 - t1004 * t1025;
t901 = t1003 * t1025 + t1004 * t960;
t1046 = t1003 * t900 + t1004 * t901;
t835 = t1003 * t901 - t1004 * t900;
t1072 = t1009 * t835;
t1132 = t1012 * t1046 - t1072;
t1063 = t1012 * t835;
t1131 = -t1009 * t1046 - t1063;
t1089 = g(3) - qJDD(2);
t968 = qJDD(1) * t1004 - t1003 * t1013;
t1119 = -qJ(2) * t968 - t1003 * t1089;
t967 = qJDD(1) * t1003 + t1004 * t1013;
t905 = -t1009 * t967 + t1012 * t968;
t935 = -qJ(2) * t967 + t1004 * t1089;
t1130 = -pkin(5) * t905 - t1009 * t935 + t1012 * t1119;
t1122 = t1009 * t968 + t1012 * t967;
t1129 = -pkin(5) * t1122 + t1009 * t1119 + t1012 * t935;
t965 = t994 - 0.2e1 * t990;
t915 = t1011 * t965;
t1117 = qJD(3) ^ 2;
t885 = -t1013 * pkin(2) + qJDD(1) * pkin(6) + t901;
t1097 = pkin(3) * t1011;
t1030 = -pkin(7) * t1008 - t1097;
t962 = t1030 * qJD(1);
t989 = t1011 * t1089;
t838 = (qJD(1) * t962 + t885) * t1008 - qJDD(3) * pkin(3) - t1117 * pkin(7) + t989;
t1056 = t1008 * qJDD(1);
t1057 = qJD(1) * t1011;
t991 = qJD(3) * t1057;
t964 = t991 + t1056;
t1045 = -t1010 * qJDD(3) + t1007 * t964;
t897 = -qJD(4) * t958 - t1045;
t985 = -qJD(4) + t1057;
t925 = -pkin(4) * t985 - qJ(5) * t958;
t949 = t956 ^ 2;
t775 = -t897 * pkin(4) - t949 * qJ(5) + t925 * t958 + qJDD(5) + t838;
t1076 = t1007 * t1128;
t1066 = t1010 * t1128;
t863 = t1008 * t885 + t989;
t865 = -t1008 * t1089 + t1011 * t885;
t813 = t1008 * t863 + t1011 * t865;
t898 = -qJD(4) * t956 + qJDD(3) * t1007 + t1010 * t964;
t938 = t956 * t985;
t1124 = t898 + t938;
t855 = (qJD(4) + t985) * t958 + t1045;
t950 = t958 ^ 2;
t982 = t985 ^ 2;
t859 = t898 - t938;
t809 = t1007 * t859 - t1010 * t855;
t878 = -t949 - t950;
t769 = t1008 * t809 - t1011 * t878;
t1116 = pkin(2) * t769;
t899 = -t982 - t949;
t824 = t1010 * t899 + t1076;
t854 = (qJD(4) - t985) * t958 + t1045;
t789 = t1008 * t824 - t1011 * t854;
t1115 = pkin(2) * t789;
t880 = -t912 + t951;
t1067 = t1010 * t880;
t909 = -t950 - t982;
t829 = -t1007 * t909 + t1067;
t794 = t1008 * t829 - t1011 * t1124;
t1114 = pkin(2) * t794;
t807 = -t1007 * t855 - t1010 * t859;
t1113 = pkin(3) * t807;
t823 = t1007 * t899 - t1066;
t1112 = pkin(3) * t823;
t1077 = t1007 * t880;
t828 = t1010 * t909 + t1077;
t1111 = pkin(3) * t828;
t1028 = t964 + t991;
t884 = -qJDD(1) * pkin(2) - t1013 * pkin(6) + t900;
t1014 = -pkin(3) * t965 - pkin(7) * t1028 + t884;
t839 = -t1117 * pkin(3) + qJDD(3) * pkin(7) + t962 * t1057 + t865;
t780 = t1007 * t839 - t1010 * t1014;
t1017 = -qJ(5) * t938 + 0.2e1 * qJD(5) * t958 + t1133 + t780;
t740 = qJ(5) * t898 + t1017;
t1110 = pkin(4) * t740;
t1109 = pkin(4) * t859;
t770 = t1008 * t878 + t1011 * t809;
t736 = t1003 * t770 - t1004 * t807;
t737 = t1003 * t807 + t1004 * t770;
t1108 = pkin(5) * (t1009 * t737 + t1012 * t736);
t790 = t1008 * t854 + t1011 * t824;
t751 = t1003 * t790 - t1004 * t823;
t752 = t1003 * t823 + t1004 * t790;
t1107 = pkin(5) * (t1009 * t752 + t1012 * t751);
t795 = t1008 * t1124 + t1011 * t829;
t757 = t1003 * t795 - t1004 * t828;
t758 = t1003 * t828 + t1004 * t795;
t1106 = pkin(5) * (t1009 * t758 + t1012 * t757);
t1104 = pkin(6) * t769;
t1103 = pkin(6) * t789;
t1102 = pkin(6) * t794;
t1101 = pkin(7) * t807;
t1100 = pkin(7) * t823;
t1099 = pkin(7) * t828;
t1098 = pkin(3) * t1008;
t1096 = qJ(2) * t736;
t1095 = qJ(2) * t751;
t1094 = qJ(2) * t757;
t1090 = t985 * t958;
t1088 = -pkin(2) * t807 + pkin(6) * t770;
t1087 = -pkin(2) * t823 + pkin(6) * t790;
t1086 = -pkin(2) * t828 + pkin(6) * t795;
t1085 = -pkin(3) * t878 + pkin(7) * t809;
t781 = t1007 * t1014 + t1010 * t839;
t1084 = pkin(3) * t854 - pkin(7) * t824;
t1083 = pkin(3) * t1124 - pkin(7) * t829;
t1082 = -pkin(2) * t884 + pkin(6) * t813;
t1080 = qJD(5) * t956;
t1079 = t1007 * t740;
t1078 = t1007 * t838;
t1075 = t1007 * t985;
t875 = t1008 * t884;
t984 = t1011 * t1013 * t1008;
t974 = qJDD(3) + t984;
t1074 = t1008 * t974;
t975 = qJDD(3) - t984;
t1073 = t1008 * t975;
t1069 = t1010 * t740;
t1068 = t1010 * t838;
t1065 = t1010 * t985;
t876 = t1011 * t884;
t1064 = t1011 * t975;
t999 = t1008 ^ 2;
t1062 = t1013 * t999;
t1000 = t1011 ^ 2;
t1060 = t1000 + t999;
t1059 = qJD(1) * qJD(3);
t979 = -t1062 - t1117;
t924 = -t1008 * t979 - t1064;
t963 = 0.2e1 * t991 + t1056;
t1055 = -pkin(2) * t963 + pkin(6) * t924 + t875;
t997 = t1000 * t1013;
t981 = -t997 - t1117;
t922 = t1011 * t981 - t1074;
t1054 = pkin(2) * t965 + pkin(6) * t922 - t876;
t1053 = t1008 * t912;
t1052 = t1011 * t912;
t1050 = -pkin(1) * t769 + qJ(2) * t737;
t1049 = -pkin(1) * t789 + qJ(2) * t752;
t1048 = -pkin(1) * t794 + qJ(2) * t758;
t732 = t1007 * t780 + t1010 * t781;
t1044 = -t1009 * t976 - t1012 * t977;
t1029 = t949 * pkin(4) - t897 * qJ(5) - t985 * t925 - t781;
t941 = -0.2e1 * t1080;
t742 = t941 - t1029;
t695 = t1007 * t742 - t1069;
t709 = -pkin(4) * t775 + qJ(5) * t742;
t663 = -pkin(7) * t695 + qJ(5) * t1069 - t1007 * t709;
t678 = -pkin(3) * t695 + t1110;
t696 = t1010 * t742 + t1079;
t685 = t1008 * t775 + t1011 * t696;
t1043 = -pkin(2) * t695 + pkin(6) * t685 + t1008 * t663 + t1011 * t678;
t723 = -pkin(4) * t878 - qJ(5) * t855 + t742;
t729 = (t859 + t898) * qJ(5) + t1017;
t677 = -t1007 * t723 + t1010 * t729 - t1101;
t767 = t1109 - t1113;
t1042 = t1008 * t677 + t1011 * t767 + t1088;
t1015 = -t740 - t1133;
t714 = -t1015 - t1112;
t741 = -pkin(4) * t854 + qJ(5) * t899 - t775;
t716 = qJ(5) * t1066 - t1007 * t741 - t1100;
t1041 = t1008 * t716 + t1011 * t714 + t1087;
t765 = -qJ(5) * t909 + t775;
t814 = -pkin(4) * t1124 + qJ(5) * t880;
t718 = -t1007 * t814 + t1010 * t765 - t1099;
t1022 = pkin(4) * t909 + t1029;
t721 = -t1022 + t941 - t1111;
t1040 = t1008 * t718 + t1011 * t721 + t1086;
t746 = t780 - t1112;
t779 = t1078 - t1100;
t1039 = t1008 * t779 + t1011 * t746 + t1087;
t750 = t781 - t1111;
t785 = t1068 - t1099;
t1038 = t1008 * t785 + t1011 * t750 + t1086;
t969 = t1060 * qJDD(1);
t972 = t997 + t1062;
t1037 = pkin(2) * t972 + pkin(6) * t969 + t813;
t1036 = t1003 * t984;
t1035 = t1004 * t984;
t1034 = -pkin(3) * t838 + pkin(7) * t732;
t971 = qJDD(1) * t1012 - t1009 * t1013;
t1033 = -pkin(5) * t971 - g(3) * t1009;
t1032 = t1078 - t1083;
t1031 = -t1068 - t1084;
t731 = t1007 * t781 - t1010 * t780;
t811 = t1008 * t865 - t1011 * t863;
t1027 = t1009 * t977 - t1012 * t976;
t1026 = t732 + t1085;
t704 = -t731 - t1101;
t1023 = t1008 * t704 - t807 * t1097 + t1088;
t1021 = t1007 * t729 + t1010 * t723 + t1085;
t1020 = t1007 * t765 + t1010 * t814 - t1083;
t1019 = qJ(5) * t1076 + t1010 * t741 - t1084;
t712 = t1008 * t838 + t1011 * t732;
t1018 = pkin(6) * t712 + (-pkin(2) + t1030) * t731;
t1016 = -pkin(3) * t775 + pkin(7) * t696 + qJ(5) * t1079 + t1010 * t709;
t980 = t997 - t1117;
t978 = -t1062 + t1117;
t973 = -t997 + t1062;
t970 = qJDD(1) * t1009 + t1012 * t1013;
t955 = t1011 * t974;
t954 = t1060 * t1059;
t939 = -pkin(5) * t970 + g(3) * t1012;
t931 = -t950 + t982;
t930 = t949 - t982;
t929 = t1011 * t964 - t999 * t1059;
t928 = -t1000 * t1059 - t1008 * t1081;
t927 = qJDD(3) * t1003 + t1004 * t954;
t926 = -qJDD(3) * t1004 + t1003 * t954;
t923 = -t1008 * t978 + t955;
t921 = t1011 * t980 - t1073;
t920 = t1011 * t979 - t1073;
t919 = t1011 * t978 + t1074;
t918 = t1008 * t981 + t955;
t917 = t1008 * t980 + t1064;
t916 = t1028 * t1008;
t910 = t950 - t949;
t908 = -t1003 * t972 + t1004 * t969;
t907 = t1003 * t969 + t1004 * t972;
t904 = -t1008 * t963 + t915;
t903 = t1008 * t965 + t1011 * t963;
t895 = t1004 * t929 - t1036;
t894 = t1004 * t928 + t1036;
t893 = t1003 * t929 + t1035;
t892 = t1003 * t928 - t1035;
t891 = t1003 * t1056 + t1004 * t923;
t890 = t1003 * t994 + t1004 * t921;
t889 = t1003 * t923 - t1004 * t1056;
t888 = t1003 * t921 - t1004 * t994;
t873 = t1003 * t963 + t1004 * t924;
t872 = -t1003 * t965 + t1004 * t922;
t871 = t1003 * t924 - t1004 * t963;
t870 = t1003 * t922 + t1004 * t965;
t869 = -pkin(1) * t967 - t901;
t868 = pkin(1) * t968 - t900;
t867 = (-t1007 * t958 + t1010 * t956) * t985;
t866 = (t1007 * t956 + t1010 * t958) * t985;
t864 = t1003 * t973 + t1004 * t904;
t862 = t1003 * t904 - t1004 * t973;
t851 = t1010 * t898 + t958 * t1075;
t850 = t1007 * t898 - t958 * t1065;
t849 = -t1007 * t897 - t956 * t1065;
t848 = -t1010 * t897 + t956 * t1075;
t847 = -t1008 * t951 + t1011 * t867;
t846 = t1008 * t867 + t1011 * t951;
t845 = -pkin(6) * t920 + t876;
t844 = t1010 * t930 + t1077;
t843 = -t1007 * t931 - t1066;
t842 = -pkin(6) * t918 + t875;
t841 = t1007 * t930 - t1067;
t840 = t1010 * t931 - t1076;
t833 = pkin(1) * t835;
t831 = -pkin(2) * t920 + t865;
t830 = -pkin(2) * t918 + t863;
t825 = pkin(1) * t1089 + qJ(2) * t1046;
t818 = t1011 * t851 + t1053;
t817 = t1011 * t849 - t1053;
t816 = t1008 * t851 - t1052;
t815 = t1008 * t849 + t1052;
t808 = -t1007 * t1124 - t1010 * t854;
t806 = -t1007 * t854 + t1010 * t1124;
t803 = t1003 * t866 + t1004 * t847;
t802 = t1003 * t847 - t1004 * t866;
t801 = pkin(1) * t870 + t1054;
t800 = pkin(1) * t871 + t1055;
t799 = -t1008 * t855 + t1011 * t844;
t798 = t1008 * t859 + t1011 * t843;
t797 = t1008 * t844 + t1011 * t855;
t796 = t1008 * t843 - t1011 * t859;
t792 = -qJ(2) * t907 - t1004 * t811;
t791 = qJ(2) * t908 - t1003 * t811;
t787 = t1003 * t884 + t1004 * t813;
t786 = t1003 * t813 - t1004 * t884;
t784 = t1008 * t910 + t1011 * t808;
t783 = t1008 * t808 - t1011 * t910;
t778 = pkin(1) * t907 + t1037;
t774 = t1003 * t850 + t1004 * t818;
t773 = -t1003 * t848 + t1004 * t817;
t772 = t1003 * t818 - t1004 * t850;
t771 = t1003 * t817 + t1004 * t848;
t764 = -qJ(2) * t871 - t1003 * t831 + t1004 * t845;
t763 = -qJ(2) * t870 - t1003 * t830 + t1004 * t842;
t762 = t1003 * t841 + t1004 * t799;
t761 = t1003 * t840 + t1004 * t798;
t760 = t1003 * t799 - t1004 * t841;
t759 = t1003 * t798 - t1004 * t840;
t756 = pkin(1) * t757;
t754 = -pkin(1) * t920 + qJ(2) * t873 + t1003 * t845 + t1004 * t831;
t753 = -pkin(1) * t918 + qJ(2) * t872 + t1003 * t842 + t1004 * t830;
t749 = pkin(1) * t751;
t744 = -t1009 * t802 + t1012 * t803;
t743 = t1009 * t803 + t1012 * t802;
t739 = t1003 * t806 + t1004 * t784;
t738 = t1003 * t784 - t1004 * t806;
t735 = pkin(1) * t736;
t733 = pkin(1) * t786 + t1082;
t728 = -t1009 * t772 + t1012 * t774;
t727 = -t1009 * t771 + t1012 * t773;
t726 = t1009 * t774 + t1012 * t772;
t725 = t1009 * t773 + t1012 * t771;
t724 = -t1032 - t1114;
t722 = -t1031 - t1115;
t719 = -qJ(2) * t786 + (pkin(2) * t1003 - pkin(6) * t1004) * t811;
t711 = t1008 * t732 - t1011 * t838;
t708 = -t1009 * t760 + t1012 * t762;
t707 = -t1009 * t759 + t1012 * t761;
t706 = t1009 * t762 + t1012 * t760;
t705 = t1009 * t761 + t1012 * t759;
t701 = pkin(5) * (-t1009 * t757 + t1012 * t758);
t699 = pkin(5) * (-t1009 * t751 + t1012 * t752);
t698 = qJ(2) * t787 + (-pkin(2) * t1004 - pkin(6) * t1003 - pkin(1)) * t811;
t697 = -t1008 * t750 + t1011 * t785 - t1102;
t693 = -t1008 * t746 + t1011 * t779 - t1103;
t692 = -t1009 * t738 + t1012 * t739;
t691 = t1009 * t739 + t1012 * t738;
t690 = -t1020 - t1114;
t689 = -t1019 - t1115;
t687 = pkin(5) * (-t1009 * t736 + t1012 * t737);
t686 = -t1026 - t1116;
t684 = t1008 * t696 - t1011 * t775;
t682 = t1003 * t731 + t1004 * t712;
t681 = t1003 * t712 - t1004 * t731;
t680 = t1011 * t704 + t807 * t1098 - t1104;
t679 = -pkin(2) * t711 - t1034;
t674 = t756 + t1038;
t673 = t749 + t1039;
t672 = -t1008 * t721 + t1011 * t718 - t1102;
t671 = -t1008 * t714 + t1011 * t716 - t1103;
t670 = -t1021 - t1116;
t669 = -pkin(6) * t711 + (-pkin(7) * t1011 + t1098) * t731;
t668 = -t1003 * t724 + t1004 * t697 - t1094;
t667 = t1023 + t735;
t666 = -t1003 * t722 + t1004 * t693 - t1095;
t665 = -t1008 * t767 + t1011 * t677 - t1104;
t664 = t756 + t1040;
t661 = t1003 * t695 + t1004 * t685;
t660 = t1003 * t685 - t1004 * t695;
t659 = t749 + t1041;
t658 = t1003 * t697 + t1004 * t724 + t1048;
t657 = t1003 * t693 + t1004 * t722 + t1049;
t656 = t735 + t1042;
t655 = -t1003 * t690 + t1004 * t672 - t1094;
t654 = -t1003 * t686 + t1004 * t680 - t1096;
t653 = -t1003 * t689 + t1004 * t671 - t1095;
t652 = t1003 * t672 + t1004 * t690 + t1048;
t651 = t1003 * t680 + t1004 * t686 + t1050;
t650 = t1003 * t671 + t1004 * t689 + t1049;
t649 = -pkin(2) * t684 - t1016;
t648 = pkin(1) * t681 + t1018;
t647 = -t1003 * t670 + t1004 * t665 - t1096;
t646 = -qJ(2) * t681 - t1003 * t679 + t1004 * t669;
t645 = t1003 * t665 + t1004 * t670 + t1050;
t644 = -pkin(6) * t684 - t1008 * t678 + t1011 * t663;
t643 = -pkin(1) * t711 + qJ(2) * t682 + t1003 * t669 + t1004 * t679;
t642 = pkin(1) * t660 + t1043;
t641 = -qJ(2) * t660 - t1003 * t649 + t1004 * t644;
t640 = -pkin(1) * t684 + qJ(2) * t661 + t1003 * t644 + t1004 * t649;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t971, 0, -t970, 0, t1033, -t939, t1027, pkin(5) * t1027, 0, 0, t905, 0, -t1122, 0, t1130, -t1129, t1131, pkin(5) * t1131 - qJ(2) * t1063 - t1009 * t825, -t1009 * t893 + t1012 * t895, -t1009 * t862 + t1012 * t864, -t1009 * t889 + t1012 * t891, -t1009 * t892 + t1012 * t894, -t1009 * t888 + t1012 * t890, -t1009 * t926 + t1012 * t927, t1012 * t763 - t1009 * t753 - pkin(5) * (t1009 * t872 + t1012 * t870), t1012 * t764 - t1009 * t754 - pkin(5) * (t1009 * t873 + t1012 * t871), t1012 * t792 - t1009 * t791 - pkin(5) * (t1009 * t908 + t1012 * t907), t1012 * t719 - t1009 * t698 - pkin(5) * (t1009 * t787 + t1012 * t786), t728, t692, t707, t727, t708, t744, -t1009 * t657 + t1012 * t666 - t1107, -t1009 * t658 + t1012 * t668 - t1106, -t1009 * t651 + t1012 * t654 - t1108, t1012 * t646 - t1009 * t643 - pkin(5) * (t1009 * t682 + t1012 * t681), t728, t692, t707, t727, t708, t744, -t1009 * t650 + t1012 * t653 - t1107, -t1009 * t652 + t1012 * t655 - t1106, -t1009 * t645 + t1012 * t647 - t1108, t1012 * t641 - t1009 * t640 - pkin(5) * (t1009 * t661 + t1012 * t660); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t970, 0, t971, 0, t939, t1033, t1044, pkin(5) * t1044, 0, 0, t1122, 0, t905, 0, t1129, t1130, t1132, pkin(5) * t1132 - qJ(2) * t1072 + t1012 * t825, t1009 * t895 + t1012 * t893, t1009 * t864 + t1012 * t862, t1009 * t891 + t1012 * t889, t1009 * t894 + t1012 * t892, t1009 * t890 + t1012 * t888, t1009 * t927 + t1012 * t926, t1009 * t763 + t1012 * t753 + pkin(5) * (-t1009 * t870 + t1012 * t872), t1009 * t764 + t1012 * t754 + pkin(5) * (-t1009 * t871 + t1012 * t873), t1009 * t792 + t1012 * t791 + pkin(5) * (-t1009 * t907 + t1012 * t908), t1009 * t719 + t1012 * t698 + pkin(5) * (-t1009 * t786 + t1012 * t787), t726, t691, t705, t725, t706, t743, t1009 * t666 + t1012 * t657 + t699, t1009 * t668 + t1012 * t658 + t701, t1009 * t654 + t1012 * t651 + t687, t1009 * t646 + t1012 * t643 + pkin(5) * (-t1009 * t681 + t1012 * t682), t726, t691, t705, t725, t706, t743, t1009 * t653 + t1012 * t650 + t699, t1009 * t655 + t1012 * t652 + t701, t1009 * t647 + t1012 * t645 + t687, t1009 * t641 + t1012 * t640 + pkin(5) * (-t1009 * t660 + t1012 * t661); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t976, t977, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t868, t869, 0, t833, t916, t903, t919, t915, t917, 0, t801, t800, t778, t733, t816, t783, t796, t815, t797, t846, t673, t674, t667, t648, t816, t783, t796, t815, t797, t846, t659, t664, t656, t642; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1013, 0, 0, -g(3), -t976, 0, 0, 0, t968, 0, -t967, 0, t1119, -t935, -t835, -qJ(2) * t835, t895, t864, t891, t894, t890, t927, t763, t764, t792, t719, t774, t739, t761, t773, t762, t803, t666, t668, t654, t646, t774, t739, t761, t773, t762, t803, t653, t655, t647, t641; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1013, 0, qJDD(1), 0, g(3), 0, -t977, 0, 0, 0, t967, 0, t968, 0, t935, t1119, t1046, t825, t893, t862, t889, t892, t888, t926, t753, t754, t791, t698, t772, t738, t759, t771, t760, t802, t657, t658, t651, t643, t772, t738, t759, t771, t760, t802, t650, t652, t645, t640; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t976, t977, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t868, t869, 0, t833, t916, t903, t919, t915, t917, 0, t801, t800, t778, t733, t816, t783, t796, t815, t797, t846, t673, t674, t667, t648, t816, t783, t796, t815, t797, t846, t659, t664, t656, t642; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1013, 0, 0, -t1089, t900, 0, t929, t904, t923, t928, t921, t954, t842, t845, -t811, -pkin(6) * t811, t818, t784, t798, t817, t799, t847, t693, t697, t680, t669, t818, t784, t798, t817, t799, t847, t671, t672, t665, t644; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1013, 0, qJDD(1), 0, t1089, 0, t901, 0, t984, -t973, -t1056, -t984, -t994, -qJDD(3), t830, t831, 0, -pkin(2) * t811, -t850, -t806, -t840, t848, -t841, -t866, t722, t724, t686, t679, -t850, -t806, -t840, t848, -t841, -t866, t689, t690, t670, t649; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t900, -t901, 0, 0, t916, t903, t919, t915, t917, 0, t1054, t1055, t1037, t1082, t816, t783, t796, t815, t797, t846, t1039, t1038, t1023, t1018, t816, t783, t796, t815, t797, t846, t1041, t1040, t1042, t1043; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t964, t965, t974, -t991, t980, t991, 0, t884, t863, 0, t851, t808, t843, t849, t844, t867, t779, t785, t704, -pkin(7) * t731, t851, t808, t843, t849, t844, t867, t716, t718, t677, t663; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t990, t963, t978, t1081, t975, -t990, -t884, 0, t865, 0, -t912, -t910, -t859, t912, t855, t951, t746, t750, -t1113, -pkin(3) * t731, -t912, -t910, -t859, t912, t855, t951, t714, t721, t767, t678; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t984, t973, t1056, t984, t994, qJDD(3), -t863, -t865, 0, 0, t850, t806, t840, -t848, t841, t866, t1031, t1032, t1026, t1034, t850, t806, t840, -t848, t841, t866, t1019, t1020, t1021, t1016; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t898, -t854, -t1128, -t938, t930, t938, 0, t838, t780, 0, t898, -t854, -t1128, -t938, t930, t938, qJ(5) * t1128, t765, t729, qJ(5) * t740; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1090, t1124, t931, t897, -t880, t1090, -t838, 0, t781, 0, -t1090, t1124, t931, t897, -t880, t1090, t741, t814, t723, t709; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t912, t910, t859, -t912, -t855, -t951, -t780, -t781, 0, 0, t912, t910, t859, -t912, -t855, -t951, t1015, t1022 + 0.2e1 * t1080, -t1109, -t1110; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t898, -t854, -t1128, -t938, t930, t938, 0, t775, t740, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1090, t1124, t931, t897, -t880, t1090, -t775, 0, t742, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t912, t910, t859, -t912, -t855, -t951, -t740, -t742, 0, 0;];
m_new_reg = t1;
