% Calculate minimal parameter regressor of coriolis matrix for
% S5RPRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x25]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:02
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RPRRR6_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR6_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR6_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR6_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:01:43
% EndTime: 2019-12-31 19:01:48
% DurationCPUTime: 2.06s
% Computational Cost: add. (2416->206), mult. (5034->291), div. (0->0), fcn. (5142->8), ass. (0->184)
t177 = sin(qJ(3));
t286 = cos(qJ(4));
t220 = t286 * t177;
t176 = sin(qJ(4));
t179 = cos(qJ(3));
t256 = t176 * t179;
t153 = t220 + t256;
t301 = 0.2e1 * t153;
t175 = sin(qJ(5));
t178 = cos(qJ(5));
t230 = qJD(3) + qJD(4);
t296 = t230 * t178;
t306 = t175 * t296;
t186 = t306 * t301;
t150 = t153 ^ 2;
t173 = t178 ^ 2;
t291 = t175 ^ 2;
t228 = -t173 + t291;
t97 = t228 * t150;
t308 = -t97 * qJD(1) + t186;
t87 = (t291 / 0.2e1 - t173 / 0.2e1) * t153;
t40 = -t87 * qJD(1) + t306;
t307 = t153 * t296;
t166 = sin(pkin(9)) * pkin(1) + pkin(6);
t279 = pkin(7) + t166;
t147 = t279 * t177;
t148 = t279 * t179;
t193 = -t176 * t147 + t286 * t148;
t299 = t193 * t175;
t167 = -cos(pkin(9)) * pkin(1) - pkin(2);
t156 = -t179 * pkin(3) + t167;
t282 = t153 * pkin(8);
t151 = t176 * t177 - t286 * t179;
t285 = t151 * pkin(4);
t202 = -t282 + t285;
t182 = t156 + t202;
t31 = -t178 * t182 + t299;
t305 = (-t31 + t299) * t153;
t298 = t193 * t178;
t32 = t175 * t182 + t298;
t304 = (-t32 + t298) * t153;
t209 = t286 * t147 + t176 * t148;
t303 = t230 * t209;
t302 = t230 * t193;
t91 = t178 * t151;
t300 = t230 * t91;
t297 = t230 * t151;
t229 = -t151 ^ 2 + t150;
t281 = t176 * pkin(3);
t169 = pkin(8) + t281;
t260 = t153 * t169;
t227 = t286 * pkin(3);
t170 = -t227 - pkin(4);
t261 = t151 * t170;
t294 = -t282 / 0.2e1 + t285 / 0.2e1 - t260 / 0.2e1 - t261 / 0.2e1 + (-t286 * t151 / 0.2e1 + t176 * t153 / 0.2e1) * pkin(3);
t257 = t175 * t178;
t219 = qJD(1) * t257;
t293 = t150 * t219 + t230 * t87;
t63 = t219 * t301 + t228 * t230;
t283 = t153 * pkin(4);
t284 = t151 * pkin(8);
t105 = t283 + t284;
t290 = t105 / 0.2e1;
t289 = -t170 / 0.2e1;
t288 = -t175 / 0.2e1;
t287 = -t178 / 0.2e1;
t280 = t177 * pkin(3);
t89 = t175 * t151;
t277 = t230 * t89;
t275 = pkin(4) * qJD(4);
t94 = t105 + t280;
t270 = t178 * t94;
t1 = t270 * t151 + t305;
t274 = t1 * qJD(1);
t272 = t175 * t94;
t2 = -t272 * t151 + t304;
t269 = t2 * qJD(1);
t3 = t105 * t91 + t305;
t268 = t3 * qJD(1);
t4 = -t105 * t89 + t304;
t267 = t4 * qJD(1);
t206 = -t227 / 0.2e1;
t196 = t206 + t289;
t180 = (-t169 / 0.2e1 + t281 / 0.2e1 + pkin(8) / 0.2e1) * t153 + (-pkin(4) / 0.2e1 + t196) * t151;
t6 = t180 * t175;
t266 = t6 * qJD(1);
t263 = t209 * t175;
t262 = t209 * t178;
t259 = t156 * t151;
t258 = t170 * t178;
t19 = t31 * t151 - t153 * t263;
t255 = t19 * qJD(1);
t20 = -t32 * t151 + t153 * t262;
t254 = t20 * qJD(1);
t41 = t229 * t175;
t251 = t41 * qJD(1);
t42 = t229 * t178;
t250 = t42 * qJD(1);
t50 = t151 * t280 + t156 * t153;
t249 = t50 * qJD(1);
t51 = t153 * t280 - t259;
t248 = t51 * qJD(1);
t247 = t229 * qJD(1);
t78 = t89 * qJD(1);
t245 = t89 * qJD(5);
t85 = t91 * qJD(1);
t234 = t153 * qJD(4);
t238 = qJD(3) * t175;
t243 = t153 * t238 + t175 * t234;
t242 = qJD(1) * t151;
t241 = qJD(1) * t153;
t240 = qJD(1) * t156;
t239 = qJD(1) * t179;
t237 = qJD(5) * t175;
t236 = qJD(5) * t178;
t149 = t220 / 0.2e1 + t256 / 0.2e1;
t235 = t149 * qJD(1);
t162 = -t177 ^ 2 + t179 ^ 2;
t233 = t162 * qJD(1);
t232 = t177 * qJD(3);
t231 = t179 * qJD(3);
t226 = qJD(4) * t281;
t225 = qJD(3) * t281;
t218 = t153 * t237;
t217 = t153 * t236;
t106 = t151 * t241;
t216 = t151 * t240;
t215 = t153 * t240;
t214 = t167 * t177 * qJD(1);
t213 = t167 * t239;
t165 = t175 * t236;
t212 = t177 * t239;
t211 = t286 * qJD(3);
t210 = t286 * qJD(4);
t100 = t230 * t153;
t203 = t230 * t281;
t201 = t151 * t100;
t198 = -t260 - t261;
t197 = t153 * (-qJD(5) - t242);
t195 = t284 / 0.2e1 + t283 / 0.2e1;
t194 = t169 * t151 / 0.2e1 + t153 * t289;
t185 = t94 / 0.2e1 + t194;
t11 = t185 * t175;
t192 = -t11 * qJD(1) - qJD(3) * t258;
t13 = t185 * t178;
t191 = t13 * qJD(1) - t170 * t238;
t190 = t178 * t197;
t43 = t149 * qJD(5) + t106;
t189 = pkin(4) / 0.2e1 + t196;
t9 = t180 * t178;
t188 = -t9 * qJD(1) - t175 * t225;
t187 = t290 + t195;
t115 = t189 * t175;
t17 = t187 * t178;
t184 = t17 * qJD(1) + t115 * qJD(3) + t175 * t275;
t116 = t189 * t178;
t15 = t187 * t175;
t183 = -t15 * qJD(1) + t116 * qJD(3) + t178 * t275;
t160 = t175 * t226;
t157 = t228 * qJD(5);
t118 = pkin(4) * t287 + t258 / 0.2e1 + t178 * t206;
t117 = pkin(4) * t288 + (t170 / 0.2e1 + t206) * t175;
t95 = t230 * t149;
t84 = t91 * qJD(5);
t73 = t87 * qJD(5);
t49 = t236 + t85;
t48 = -t237 - t78;
t36 = 0.2e1 * t175 * t190;
t34 = t173 * t106 - t73;
t33 = t245 - t307;
t30 = t84 - t250;
t29 = -t245 + t251;
t25 = -t73 + (-t173 * t241 - t306) * t151;
t24 = t243 + t250;
t23 = -t251 + t307;
t22 = t228 * t297 + (-qJD(5) + t242) * t257 * t301;
t18 = t263 + (-t195 + t290) * t178;
t16 = t105 * t288 + t195 * t175 + t262;
t14 = t263 / 0.2e1 - t209 * t288 + t270 / 0.2e1 - t194 * t178;
t12 = t262 / 0.2e1 - t209 * t287 - t272 / 0.2e1 + t194 * t175;
t10 = t243 + t84;
t8 = t294 * t178 + t299;
t7 = t294 * t175 - t298;
t5 = [0, 0, 0, 0, t177 * t231, t162 * qJD(3), 0, 0, 0, t167 * t232, t167 * t231, -t201, -t230 * t229, 0, 0, 0, t50 * qJD(3) + t156 * t234, t51 * qJD(3) - qJD(4) * t259, -t150 * t165 - t173 * t201, t97 * qJD(5) + t151 * t186, -t151 * t218 + t230 * t42, -t151 * t217 - t230 * t41, t153 * t297, t1 * qJD(3) + t3 * qJD(4) + t20 * qJD(5), t2 * qJD(3) + t4 * qJD(4) + t19 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, t212, t233, t231, -t232, 0, -t166 * t231 + t214, t166 * t232 + t213, -t106, -t247, -t297, -t100, 0, t249 - t302, t248 + t303, t25, t22, t24, t23, t43, t274 + (t175 * t198 - t298) * qJD(3) + t7 * qJD(4) + t14 * qJD(5), t269 + (t178 * t198 + t299) * qJD(3) + t8 * qJD(4) + t12 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t106, -t247, -t297, -t100, 0, t215 - t302, -t216 + t303, t25, t22, t24, t23, t43, t268 + t7 * qJD(3) + (t175 * t202 - t298) * qJD(4) + t18 * qJD(5), t267 + t8 * qJD(3) + (t178 * t202 + t299) * qJD(4) + t16 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t293, -t308, t175 * t197, t190, t95, t14 * qJD(3) + t18 * qJD(4) - t32 * qJD(5) + t254, t12 * qJD(3) + t16 * qJD(4) + t31 * qJD(5) + t255; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, -t232, -t231, 0, 0, 0, 0, 0, -t100, t297, 0, 0, 0, 0, 0, t33, t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t100, t297, 0, 0, 0, 0, 0, t33, t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t217 + t277, t218 + t300; 0, 0, 0, 0, -t212, -t233, 0, 0, 0, -t214, -t213, t106, t247, 0, 0, 0, -t249, -t248, t34, t36, t30, t29, -t43, t6 * qJD(4) - t13 * qJD(5) - t274, t9 * qJD(4) + t11 * qJD(5) - t269; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t226, -pkin(3) * t210, t165, -t157, 0, 0, 0, t170 * t237 - t178 * t226, t170 * t236 + t160; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t203, (-t211 - t210) * pkin(3), t165, -t157, 0, 0, 0, t117 * qJD(5) - t178 * t203 + t266, t118 * qJD(5) + t160 - t188; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, -t63, t49, t48, -t235, t117 * qJD(4) - t169 * t236 - t191, t118 * qJD(4) + t169 * t237 - t192; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t106, t247, 0, 0, 0, -t215, t216, t34, t36, t30, t29, -t43, -t6 * qJD(3) - t17 * qJD(5) - t268, -t9 * qJD(3) + t15 * qJD(5) - t267; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t225, pkin(3) * t211, t165, -t157, 0, 0, 0, -t115 * qJD(5) + t178 * t225 - t266, -t116 * qJD(5) + t188; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t165, -t157, 0, 0, 0, -pkin(4) * t237, -pkin(4) * t236; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, -t63, t49, t48, -t235, -pkin(8) * t236 - t184, pkin(8) * t237 - t183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t293, t308, t175 * t106 - t300, t178 * t106 + t277, t95, t13 * qJD(3) + t17 * qJD(4) - t254, -t11 * qJD(3) - t15 * qJD(4) - t255; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t40, t63, -t85, t78, t235, t115 * qJD(4) + t191, t116 * qJD(4) + t192; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t40, t63, -t85, t78, t235, t184, t183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t5;
