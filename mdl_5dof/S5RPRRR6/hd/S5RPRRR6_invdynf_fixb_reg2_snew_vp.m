% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:02
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRRR6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR6_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR6_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR6_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR6_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:02:16
% EndTime: 2019-12-31 19:02:19
% DurationCPUTime: 2.52s
% Computational Cost: add. (12381->221), mult. (24689->315), div. (0->0), fcn. (16801->10), ass. (0->179)
t1437 = sin(qJ(4));
t1441 = cos(qJ(4));
t1442 = cos(qJ(3));
t1468 = qJD(1) * t1442;
t1438 = sin(qJ(3));
t1469 = qJD(1) * t1438;
t1393 = t1437 * t1469 - t1441 * t1468;
t1389 = qJD(5) + t1393;
t1476 = qJD(5) + t1389;
t1395 = (t1437 * t1442 + t1438 * t1441) * qJD(1);
t1428 = qJD(3) + qJD(4);
t1436 = sin(qJ(5));
t1440 = cos(qJ(5));
t1380 = t1436 * t1395 - t1440 * t1428;
t1475 = t1380 ^ 2;
t1382 = t1440 * t1395 + t1436 * t1428;
t1474 = t1382 ^ 2;
t1473 = t1389 ^ 2;
t1472 = t1393 ^ 2;
t1471 = t1395 ^ 2;
t1470 = t1428 ^ 2;
t1467 = t1382 * t1380;
t1466 = t1395 * t1393;
t1430 = t1442 ^ 2;
t1445 = qJD(1) ^ 2;
t1465 = t1430 * t1445;
t1439 = sin(qJ(1));
t1443 = cos(qJ(1));
t1414 = -t1443 * g(1) - t1439 * g(2);
t1399 = -t1445 * pkin(1) + t1414;
t1433 = sin(pkin(9));
t1434 = cos(pkin(9));
t1413 = t1439 * g(1) - t1443 * g(2);
t1449 = qJDD(1) * pkin(1) + t1413;
t1377 = t1434 * t1399 + t1433 * t1449;
t1371 = -t1445 * pkin(2) + qJDD(1) * pkin(6) + t1377;
t1464 = t1438 * t1371;
t1463 = t1438 * t1445;
t1462 = qJD(4) - t1428;
t1461 = qJD(5) - t1389;
t1431 = -g(3) + qJDD(2);
t1361 = t1442 * t1371 + t1438 * t1431;
t1427 = t1442 * qJDD(1);
t1457 = qJD(3) * t1469;
t1402 = t1427 - t1457;
t1412 = qJD(3) * pkin(3) - pkin(7) * t1469;
t1346 = -pkin(3) * t1465 + t1402 * pkin(7) - qJD(3) * t1412 + t1361;
t1456 = qJD(3) * t1468;
t1459 = t1438 * qJDD(1);
t1401 = t1456 + t1459;
t1446 = qJDD(3) * pkin(3) - t1401 * pkin(7) - t1464 + (pkin(7) * qJD(1) * qJD(3) + pkin(3) * t1463 + t1431) * t1442;
t1325 = t1441 * t1346 + t1437 * t1446;
t1429 = t1438 ^ 2;
t1460 = t1429 + t1430;
t1458 = qJDD(3) + qJDD(4);
t1324 = -t1437 * t1346 + t1441 * t1446;
t1451 = -t1441 * t1401 - t1437 * t1402;
t1362 = -t1393 * qJD(4) - t1451;
t1455 = t1428 * t1393 - t1362;
t1454 = -t1436 * t1362 + t1440 * t1458;
t1376 = -t1433 * t1399 + t1434 * t1449;
t1453 = t1437 * t1401 - t1441 * t1402;
t1404 = -t1433 * qJDD(1) - t1434 * t1445;
t1405 = t1434 * qJDD(1) - t1433 * t1445;
t1452 = t1443 * t1404 - t1439 * t1405;
t1450 = t1439 * t1404 + t1443 * t1405;
t1370 = -qJDD(1) * pkin(2) - t1445 * pkin(6) - t1376;
t1448 = -t1440 * t1362 - t1436 * t1458;
t1447 = -t1395 * qJD(4) - qJDD(5) - t1453;
t1353 = (qJD(4) + t1428) * t1395 + t1453;
t1351 = -t1402 * pkin(3) - pkin(7) * t1465 + t1412 * t1469 + t1370;
t1444 = qJD(3) ^ 2;
t1418 = t1442 * t1463;
t1416 = -t1444 - t1465;
t1415 = -t1429 * t1445 - t1444;
t1411 = -qJDD(3) + t1418;
t1410 = qJDD(3) + t1418;
t1409 = t1460 * t1445;
t1408 = -t1439 * qJDD(1) - t1443 * t1445;
t1407 = t1443 * qJDD(1) - t1439 * t1445;
t1406 = t1460 * qJDD(1);
t1403 = t1427 - 0.2e1 * t1457;
t1400 = 0.2e1 * t1456 + t1459;
t1387 = -t1470 - t1471;
t1386 = t1442 * t1411 - t1438 * t1415;
t1385 = -t1438 * t1410 + t1442 * t1416;
t1384 = t1438 * t1411 + t1442 * t1415;
t1383 = t1442 * t1410 + t1438 * t1416;
t1379 = t1434 * t1406 - t1433 * t1409;
t1378 = t1433 * t1406 + t1434 * t1409;
t1375 = t1393 * pkin(4) - t1395 * pkin(8);
t1374 = -t1458 - t1466;
t1373 = t1458 - t1466;
t1372 = -t1470 - t1472;
t1367 = t1434 * t1386 + t1433 * t1400;
t1366 = t1434 * t1385 - t1433 * t1403;
t1365 = t1433 * t1386 - t1434 * t1400;
t1364 = t1433 * t1385 + t1434 * t1403;
t1363 = -t1471 - t1472;
t1360 = t1442 * t1431 - t1464;
t1359 = -t1473 - t1474;
t1358 = t1441 * t1374 - t1437 * t1387;
t1357 = t1437 * t1374 + t1441 * t1387;
t1356 = t1462 * t1393 + t1451;
t1354 = -t1462 * t1395 - t1453;
t1352 = -t1473 - t1475;
t1350 = -t1433 * t1376 + t1434 * t1377;
t1349 = t1434 * t1376 + t1433 * t1377;
t1348 = t1441 * t1372 - t1437 * t1373;
t1347 = t1437 * t1372 + t1441 * t1373;
t1345 = -t1474 - t1475;
t1341 = t1447 - t1467;
t1340 = -t1447 - t1467;
t1339 = -t1438 * t1360 + t1442 * t1361;
t1338 = t1442 * t1360 + t1438 * t1361;
t1337 = t1461 * t1380 + t1448;
t1336 = -t1476 * t1380 - t1448;
t1335 = -t1461 * t1382 + t1454;
t1334 = t1476 * t1382 - t1454;
t1333 = -t1438 * t1357 + t1442 * t1358;
t1332 = t1442 * t1357 + t1438 * t1358;
t1331 = t1441 * t1354 - t1437 * t1356;
t1330 = t1437 * t1354 + t1441 * t1356;
t1329 = t1434 * t1339 + t1433 * t1370;
t1328 = t1433 * t1339 - t1434 * t1370;
t1327 = -t1438 * t1347 + t1442 * t1348;
t1326 = t1442 * t1347 + t1438 * t1348;
t1323 = t1440 * t1341 - t1436 * t1359;
t1322 = t1436 * t1341 + t1440 * t1359;
t1321 = -t1436 * t1340 + t1440 * t1352;
t1320 = t1440 * t1340 + t1436 * t1352;
t1319 = t1353 * pkin(4) + t1455 * pkin(8) + t1351;
t1318 = t1434 * t1333 - t1433 * t1455;
t1317 = t1433 * t1333 + t1434 * t1455;
t1316 = -t1470 * pkin(4) + t1458 * pkin(8) - t1393 * t1375 + t1325;
t1315 = -t1458 * pkin(4) - t1470 * pkin(8) + t1395 * t1375 - t1324;
t1314 = t1434 * t1327 + t1433 * t1353;
t1313 = t1433 * t1327 - t1434 * t1353;
t1312 = t1440 * t1335 - t1436 * t1337;
t1311 = t1436 * t1335 + t1440 * t1337;
t1310 = -t1438 * t1330 + t1442 * t1331;
t1309 = t1442 * t1330 + t1438 * t1331;
t1308 = t1441 * t1323 + t1437 * t1336;
t1307 = t1437 * t1323 - t1441 * t1336;
t1306 = t1441 * t1321 + t1437 * t1334;
t1305 = t1437 * t1321 - t1441 * t1334;
t1304 = -t1437 * t1324 + t1441 * t1325;
t1303 = t1441 * t1324 + t1437 * t1325;
t1302 = t1434 * t1310 + t1433 * t1363;
t1301 = t1433 * t1310 - t1434 * t1363;
t1300 = t1441 * t1312 + t1437 * t1345;
t1299 = t1437 * t1312 - t1441 * t1345;
t1298 = t1440 * t1316 + t1436 * t1319;
t1297 = -t1436 * t1316 + t1440 * t1319;
t1296 = -t1438 * t1307 + t1442 * t1308;
t1295 = t1442 * t1307 + t1438 * t1308;
t1294 = -t1438 * t1305 + t1442 * t1306;
t1293 = t1442 * t1305 + t1438 * t1306;
t1292 = -t1438 * t1303 + t1442 * t1304;
t1291 = t1442 * t1303 + t1438 * t1304;
t1290 = -t1438 * t1299 + t1442 * t1300;
t1289 = t1442 * t1299 + t1438 * t1300;
t1288 = t1434 * t1292 + t1433 * t1351;
t1287 = t1433 * t1292 - t1434 * t1351;
t1286 = t1434 * t1296 + t1433 * t1322;
t1285 = t1433 * t1296 - t1434 * t1322;
t1284 = t1434 * t1294 + t1433 * t1320;
t1283 = t1433 * t1294 - t1434 * t1320;
t1282 = -t1436 * t1297 + t1440 * t1298;
t1281 = t1440 * t1297 + t1436 * t1298;
t1280 = t1434 * t1290 + t1433 * t1311;
t1279 = t1433 * t1290 - t1434 * t1311;
t1278 = t1441 * t1282 + t1437 * t1315;
t1277 = t1437 * t1282 - t1441 * t1315;
t1276 = -t1438 * t1277 + t1442 * t1278;
t1275 = t1442 * t1277 + t1438 * t1278;
t1274 = t1434 * t1276 + t1433 * t1281;
t1273 = t1433 * t1276 - t1434 * t1281;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1408, -t1407, 0, -t1439 * t1413 + t1443 * t1414, 0, 0, 0, 0, 0, 0, t1452, -t1450, 0, -t1439 * t1349 + t1443 * t1350, 0, 0, 0, 0, 0, 0, -t1439 * t1364 + t1443 * t1366, -t1439 * t1365 + t1443 * t1367, -t1439 * t1378 + t1443 * t1379, -t1439 * t1328 + t1443 * t1329, 0, 0, 0, 0, 0, 0, -t1439 * t1313 + t1443 * t1314, -t1439 * t1317 + t1443 * t1318, -t1439 * t1301 + t1443 * t1302, -t1439 * t1287 + t1443 * t1288, 0, 0, 0, 0, 0, 0, -t1439 * t1283 + t1443 * t1284, -t1439 * t1285 + t1443 * t1286, -t1439 * t1279 + t1443 * t1280, -t1439 * t1273 + t1443 * t1274; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1407, t1408, 0, t1443 * t1413 + t1439 * t1414, 0, 0, 0, 0, 0, 0, t1450, t1452, 0, t1443 * t1349 + t1439 * t1350, 0, 0, 0, 0, 0, 0, t1443 * t1364 + t1439 * t1366, t1443 * t1365 + t1439 * t1367, t1443 * t1378 + t1439 * t1379, t1443 * t1328 + t1439 * t1329, 0, 0, 0, 0, 0, 0, t1443 * t1313 + t1439 * t1314, t1443 * t1317 + t1439 * t1318, t1443 * t1301 + t1439 * t1302, t1443 * t1287 + t1439 * t1288, 0, 0, 0, 0, 0, 0, t1443 * t1283 + t1439 * t1284, t1443 * t1285 + t1439 * t1286, t1443 * t1279 + t1439 * t1280, t1443 * t1273 + t1439 * t1274; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1431, 0, 0, 0, 0, 0, 0, t1383, t1384, 0, t1338, 0, 0, 0, 0, 0, 0, t1326, t1332, t1309, t1291, 0, 0, 0, 0, 0, 0, t1293, t1295, t1289, t1275; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1445, -qJDD(1), 0, t1414, 0, 0, 0, 0, 0, 0, t1404, -t1405, 0, t1350, 0, 0, 0, 0, 0, 0, t1366, t1367, t1379, t1329, 0, 0, 0, 0, 0, 0, t1314, t1318, t1302, t1288, 0, 0, 0, 0, 0, 0, t1284, t1286, t1280, t1274; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1445, 0, t1413, 0, 0, 0, 0, 0, 0, t1405, t1404, 0, t1349, 0, 0, 0, 0, 0, 0, t1364, t1365, t1378, t1328, 0, 0, 0, 0, 0, 0, t1313, t1317, t1301, t1287, 0, 0, 0, 0, 0, 0, t1283, t1285, t1279, t1273; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1431, 0, 0, 0, 0, 0, 0, t1383, t1384, 0, t1338, 0, 0, 0, 0, 0, 0, t1326, t1332, t1309, t1291, 0, 0, 0, 0, 0, 0, t1293, t1295, t1289, t1275; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1445, -qJDD(1), 0, t1377, 0, 0, 0, 0, 0, 0, t1385, t1386, t1406, t1339, 0, 0, 0, 0, 0, 0, t1327, t1333, t1310, t1292, 0, 0, 0, 0, 0, 0, t1294, t1296, t1290, t1276; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1445, 0, t1376, 0, 0, 0, 0, 0, 0, t1403, -t1400, t1409, -t1370, 0, 0, 0, 0, 0, 0, -t1353, t1455, -t1363, -t1351, 0, 0, 0, 0, 0, 0, -t1320, -t1322, -t1311, -t1281; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1431, 0, 0, 0, 0, 0, 0, t1383, t1384, 0, t1338, 0, 0, 0, 0, 0, 0, t1326, t1332, t1309, t1291, 0, 0, 0, 0, 0, 0, t1293, t1295, t1289, t1275; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1416, t1411, t1427, t1361, 0, 0, 0, 0, 0, 0, t1348, t1358, t1331, t1304, 0, 0, 0, 0, 0, 0, t1306, t1308, t1300, t1278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1410, t1415, -t1459, t1360, 0, 0, 0, 0, 0, 0, t1347, t1357, t1330, t1303, 0, 0, 0, 0, 0, 0, t1305, t1307, t1299, t1277; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1403, t1400, -t1409, t1370, 0, 0, 0, 0, 0, 0, t1353, -t1455, t1363, t1351, 0, 0, 0, 0, 0, 0, t1320, t1322, t1311, t1281; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1372, t1374, t1354, t1325, 0, 0, 0, 0, 0, 0, t1321, t1323, t1312, t1282; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1373, t1387, t1356, t1324, 0, 0, 0, 0, 0, 0, -t1334, -t1336, -t1345, -t1315; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1353, -t1455, t1363, t1351, 0, 0, 0, 0, 0, 0, t1320, t1322, t1311, t1281; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1352, t1341, t1335, t1298; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1340, t1359, t1337, t1297; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1334, t1336, t1345, t1315;];
f_new_reg = t1;
