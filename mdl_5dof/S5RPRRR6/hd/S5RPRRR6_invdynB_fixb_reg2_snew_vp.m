% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:02
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRRR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR6_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR6_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR6_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:01:49
% EndTime: 2019-12-31 19:02:02
% DurationCPUTime: 12.00s
% Computational Cost: add. (46865->605), mult. (93294->923), div. (0->0), fcn. (63035->10), ass. (0->412)
t641 = sin(qJ(1));
t645 = cos(qJ(1));
t609 = t645 * g(1) + t641 * g(2);
t647 = qJD(1) ^ 2;
t593 = -t647 * pkin(1) - t609;
t635 = sin(pkin(9));
t636 = cos(pkin(9));
t608 = t641 * g(1) - t645 * g(2);
t653 = qJDD(1) * pkin(1) + t608;
t538 = t635 * t593 - t636 * t653;
t539 = t636 * t593 + t635 * t653;
t660 = t635 * t538 + t636 * t539;
t479 = t636 * t538 - t635 * t539;
t675 = t645 * t479;
t718 = -t641 * t660 + t675;
t685 = t641 * t479;
t420 = t645 * t660 + t685;
t598 = t635 * qJDD(1) + t636 * t647;
t599 = t636 * qJDD(1) - t635 * t647;
t542 = -t641 * t598 + t645 * t599;
t633 = g(3) - qJDD(2);
t572 = qJ(2) * t598 - t636 * t633;
t654 = -qJ(2) * t599 - t635 * t633;
t717 = -pkin(5) * t542 + t641 * t572 + t645 * t654;
t638 = sin(qJ(5));
t639 = sin(qJ(4));
t640 = sin(qJ(3));
t643 = cos(qJ(4));
t644 = cos(qJ(3));
t585 = (t639 * t644 + t640 * t643) * qJD(1);
t630 = qJD(3) + qJD(4);
t642 = cos(qJ(5));
t551 = t638 * t585 - t642 * t630;
t553 = t642 * t585 + t638 * t630;
t501 = t553 * t551;
t670 = qJD(1) * qJD(3);
t662 = t644 * t670;
t669 = t640 * qJDD(1);
t595 = t662 + t669;
t625 = t644 * qJDD(1);
t663 = t640 * t670;
t596 = t625 - t663;
t659 = t639 * t595 - t643 * t596;
t509 = -t585 * qJD(4) - t659;
t651 = qJDD(5) - t509;
t706 = -t501 + t651;
t716 = t638 * t706;
t673 = qJD(1) * t640;
t583 = -t643 * t644 * qJD(1) + t639 * t673;
t540 = t585 * t583;
t629 = qJDD(3) + qJDD(4);
t705 = -t540 + t629;
t715 = t639 * t705;
t714 = t642 * t706;
t713 = t643 * t705;
t574 = t630 * t583;
t650 = t583 * qJD(4) - t643 * t595 - t639 * t596;
t712 = t650 + t574;
t703 = t645 * t598 + t641 * t599;
t710 = pkin(5) * t703 + t645 * t572 - t641 * t654;
t462 = -t551 * qJD(5) + t638 * t629 - t642 * t650;
t576 = qJD(5) + t583;
t520 = t576 * t551;
t443 = -t520 + t462;
t661 = -t642 * t629 - t638 * t650;
t440 = (qJD(5) - t576) * t553 + t661;
t486 = (qJD(4) - t630) * t585 + t659;
t549 = t551 ^ 2;
t550 = t553 ^ 2;
t575 = t576 ^ 2;
t578 = t583 ^ 2;
t579 = t585 ^ 2;
t701 = t630 ^ 2;
t700 = pkin(4) * t639;
t699 = t576 * t638;
t698 = t576 * t642;
t697 = t630 * t639;
t696 = t630 * t643;
t631 = t640 ^ 2;
t695 = t631 * t647;
t632 = t644 ^ 2;
t627 = t632 * t647;
t652 = -t647 * pkin(2) + qJDD(1) * pkin(6) + t539;
t508 = -t640 * t633 + t644 * t652;
t607 = qJD(3) * pkin(3) - pkin(7) * t673;
t468 = -pkin(3) * t627 + t596 * pkin(7) - qJD(3) * t607 + t508;
t649 = t640 * t652;
t686 = t640 * t647;
t648 = -t649 - t595 * pkin(7) + qJDD(3) * pkin(3) + (pkin(3) * t686 + pkin(7) * t670 - t633) * t644;
t408 = t639 * t468 - t643 * t648;
t536 = t583 * pkin(4) - t585 * pkin(8);
t378 = -t629 * pkin(4) - t701 * pkin(8) + t585 * t536 + t408;
t694 = t638 * t378;
t452 = t501 + t651;
t693 = t638 * t452;
t522 = -qJDD(1) * pkin(2) - t647 * pkin(6) + t538;
t481 = -t596 * pkin(3) - pkin(7) * t627 + t607 * t673 + t522;
t692 = t639 * t481;
t534 = t540 + t629;
t691 = t639 * t534;
t409 = t643 * t468 + t639 * t648;
t351 = -t643 * t408 + t639 * t409;
t690 = t640 * t351;
t689 = t640 * t522;
t615 = t644 * t686;
t605 = qJDD(3) + t615;
t688 = t640 * t605;
t606 = qJDD(3) - t615;
t687 = t640 * t606;
t682 = t642 * t378;
t681 = t642 * t452;
t680 = t643 * t481;
t679 = t643 * t534;
t678 = t644 * t351;
t677 = t644 * t522;
t676 = t644 * t606;
t379 = -t701 * pkin(4) + t629 * pkin(8) - t583 * t536 + t409;
t388 = t712 * pkin(8) + (t630 * t585 - t509) * pkin(4) + t481;
t333 = t642 * t379 + t638 * t388;
t674 = t631 + t632;
t668 = t635 * t540;
t667 = t636 * t540;
t666 = t639 * t501;
t665 = t643 * t501;
t664 = -pkin(4) * t643 - pkin(3);
t332 = t638 * t379 - t642 * t388;
t352 = t639 * t408 + t643 * t409;
t506 = t644 * t633 + t649;
t450 = t640 * t506 + t644 * t508;
t555 = -t641 * t608 - t645 * t609;
t657 = t635 * t615;
t656 = t636 * t615;
t602 = t645 * qJDD(1) - t641 * t647;
t655 = -pkin(5) * t602 - t641 * g(3);
t294 = -t642 * t332 + t638 * t333;
t295 = t638 * t332 + t642 * t333;
t449 = t644 * t506 - t640 * t508;
t554 = t645 * t608 - t641 * t609;
t646 = qJD(3) ^ 2;
t613 = -t627 - t646;
t612 = t627 - t646;
t611 = -t646 - t695;
t610 = t646 - t695;
t604 = t627 - t695;
t603 = t627 + t695;
t601 = t641 * qJDD(1) + t645 * t647;
t600 = t674 * qJDD(1);
t597 = t625 - 0.2e1 * t663;
t594 = 0.2e1 * t662 + t669;
t591 = t644 * t605;
t590 = t674 * t670;
t577 = -pkin(5) * t601 + t645 * g(3);
t568 = -t579 + t701;
t567 = t578 - t701;
t566 = t644 * t595 - t631 * t670;
t565 = -t640 * t596 - t632 * t670;
t564 = t635 * qJDD(3) + t636 * t590;
t563 = -t636 * qJDD(3) + t635 * t590;
t562 = -t579 - t701;
t561 = -t640 * t611 - t676;
t560 = -t640 * t610 + t591;
t559 = t644 * t613 - t688;
t558 = t644 * t612 - t687;
t557 = t644 * t611 - t687;
t556 = t640 * t613 + t591;
t547 = t636 * t600 - t635 * t603;
t546 = t635 * t600 + t636 * t603;
t541 = -t640 * t594 + t644 * t597;
t537 = -t579 + t578;
t531 = -t701 - t578;
t530 = t636 * t566 - t657;
t529 = t636 * t565 + t657;
t528 = t635 * t566 + t656;
t527 = t635 * t565 - t656;
t526 = t636 * t560 + t635 * t669;
t525 = t636 * t558 + t625 * t635;
t524 = t635 * t560 - t636 * t669;
t523 = t635 * t558 - t625 * t636;
t519 = t636 * t561 + t635 * t594;
t518 = t636 * t559 - t635 * t597;
t517 = t635 * t561 - t636 * t594;
t516 = t635 * t559 + t636 * t597;
t515 = -t550 + t575;
t514 = t549 - t575;
t513 = (-t583 * t643 + t585 * t639) * t630;
t512 = (-t583 * t639 - t585 * t643) * t630;
t511 = -t578 - t579;
t507 = t636 * t541 - t635 * t604;
t505 = t635 * t541 + t636 * t604;
t500 = -t550 + t549;
t499 = -t550 - t575;
t498 = t643 * t567 - t691;
t497 = -t639 * t568 + t713;
t496 = t639 * t567 + t679;
t495 = t643 * t568 + t715;
t494 = -t641 * t546 + t645 * t547;
t493 = t645 * t546 + t641 * t547;
t492 = -t639 * t562 - t679;
t491 = t643 * t562 - t691;
t490 = -t574 + t650;
t485 = (qJD(4) + t630) * t585 + t659;
t484 = -pkin(6) * t557 + t677;
t483 = -pkin(6) * t556 + t689;
t482 = -t575 - t549;
t476 = -t585 * t697 - t643 * t650;
t475 = t585 * t696 - t639 * t650;
t474 = -t639 * t509 + t583 * t696;
t473 = t643 * t509 + t583 * t697;
t472 = -pkin(2) * t557 + t508;
t471 = -pkin(2) * t556 + t506;
t470 = t643 * t531 - t715;
t469 = t639 * t531 + t713;
t467 = pkin(1) * t633 + qJ(2) * t660;
t466 = t549 + t550;
t461 = -t553 * qJD(5) - t661;
t460 = (-t551 * t642 + t553 * t638) * t576;
t459 = (t551 * t638 + t553 * t642) * t576;
t458 = -t641 * t517 + t645 * t519;
t457 = -t641 * t516 + t645 * t518;
t456 = t645 * t517 + t641 * t519;
t455 = t645 * t516 + t641 * t518;
t454 = -t640 * t512 + t644 * t513;
t447 = t636 * t454 + t635 * t629;
t446 = t635 * t454 - t636 * t629;
t444 = -t520 - t462;
t441 = (-qJD(5) - t576) * t553 - t661;
t439 = -t640 * t496 + t644 * t498;
t438 = -t640 * t495 + t644 * t497;
t437 = t642 * t462 - t553 * t699;
t436 = -t638 * t462 - t553 * t698;
t435 = -t638 * t461 + t551 * t698;
t434 = -t642 * t461 - t551 * t699;
t433 = -qJ(2) * t546 + t636 * t449;
t432 = qJ(2) * t547 + t635 * t449;
t431 = -t640 * t491 + t644 * t492;
t430 = t644 * t491 + t640 * t492;
t429 = -t486 * t643 - t639 * t490;
t428 = -t643 * t485 + t639 * t712;
t427 = -t486 * t639 + t643 * t490;
t426 = -t639 * t485 - t643 * t712;
t425 = -pkin(7) * t491 + t680;
t424 = t643 * t460 + t639 * t651;
t423 = t639 * t460 - t643 * t651;
t422 = t636 * t450 + t635 * t522;
t421 = t635 * t450 - t636 * t522;
t418 = t642 * t514 - t693;
t417 = -t638 * t515 + t714;
t416 = -t638 * t514 - t681;
t415 = -t642 * t515 - t716;
t414 = -pkin(7) * t469 + t692;
t413 = -t640 * t475 + t644 * t476;
t412 = -t640 * t473 + t644 * t474;
t411 = -t640 * t469 + t644 * t470;
t410 = t644 * t469 + t640 * t470;
t406 = -t638 * t499 - t681;
t405 = t642 * t499 - t693;
t404 = t642 * t482 - t716;
t403 = t638 * t482 + t714;
t402 = t636 * t413 + t668;
t401 = t636 * t412 - t668;
t400 = t635 * t413 - t667;
t399 = t635 * t412 + t667;
t398 = -qJ(2) * t517 - t635 * t472 + t636 * t484;
t397 = -qJ(2) * t516 - t635 * t471 + t636 * t483;
t396 = t643 * t437 + t666;
t395 = t643 * t435 - t666;
t394 = t639 * t437 - t665;
t393 = t639 * t435 + t665;
t392 = t636 * t439 - t635 * t486;
t391 = t636 * t438 - t635 * t490;
t390 = t635 * t439 + t636 * t486;
t389 = t635 * t438 + t636 * t490;
t387 = pkin(3) * t712 + pkin(7) * t492 + t692;
t384 = t636 * t431 - t635 * t712;
t383 = t635 * t431 + t636 * t712;
t382 = -pkin(1) * t557 + qJ(2) * t519 + t636 * t472 + t635 * t484;
t381 = -pkin(1) * t556 + qJ(2) * t518 + t636 * t471 + t635 * t483;
t380 = -pkin(3) * t485 + pkin(7) * t470 - t680;
t376 = t636 * t411 + t635 * t485;
t375 = t635 * t411 - t636 * t485;
t374 = -t440 * t642 - t638 * t444;
t373 = t642 * t441 - t638 * t443;
t372 = -t440 * t638 + t642 * t444;
t371 = -t638 * t441 - t642 * t443;
t370 = -t640 * t427 + t644 * t429;
t369 = -t640 * t426 + t644 * t428;
t368 = t644 * t427 + t640 * t429;
t367 = t643 * t418 - t639 * t440;
t366 = t643 * t417 - t639 * t444;
t365 = t639 * t418 + t643 * t440;
t364 = t639 * t417 + t643 * t444;
t363 = -t640 * t423 + t644 * t424;
t362 = -t641 * t421 + t645 * t422;
t361 = t645 * t421 + t641 * t422;
t360 = t643 * t406 + t443 * t639;
t359 = t639 * t406 - t443 * t643;
t358 = t643 * t404 - t639 * t441;
t357 = t639 * t404 + t643 * t441;
t356 = t643 * t373 - t639 * t500;
t355 = t639 * t373 + t643 * t500;
t354 = t636 * t369 - t635 * t537;
t353 = t635 * t369 + t636 * t537;
t350 = t636 * t370 + t635 * t511;
t349 = t635 * t370 - t636 * t511;
t348 = t643 * t374 - t639 * t466;
t347 = t639 * t374 + t643 * t466;
t346 = -qJ(2) * t421 - (pkin(2) * t635 - pkin(6) * t636) * t449;
t345 = -pkin(2) * t430 - pkin(3) * t491 + t409;
t344 = -t640 * t394 + t644 * t396;
t343 = -t640 * t393 + t644 * t395;
t342 = -pkin(8) * t405 + t682;
t341 = t636 * t363 - t635 * t459;
t340 = t635 * t363 + t636 * t459;
t339 = -pkin(2) * t410 - pkin(3) * t469 + t408;
t338 = -pkin(8) * t403 + t694;
t337 = -pkin(3) * t481 + pkin(7) * t352;
t336 = -pkin(2) * t368 - pkin(3) * t427;
t335 = -t641 * t383 + t645 * t384;
t334 = t645 * t383 + t641 * t384;
t331 = qJ(2) * t422 - (-pkin(2) * t636 - pkin(6) * t635 - pkin(1)) * t449;
t330 = -pkin(7) * t427 - t351;
t329 = -t641 * t375 + t645 * t376;
t328 = t645 * t375 + t641 * t376;
t327 = -pkin(6) * t430 - t640 * t387 + t644 * t425;
t326 = -pkin(3) * t511 + pkin(7) * t429 + t352;
t325 = t636 * t344 - t635 * t436;
t324 = t636 * t343 - t635 * t434;
t323 = t635 * t344 + t636 * t436;
t322 = t635 * t343 + t636 * t434;
t321 = -pkin(6) * t410 - t640 * t380 + t644 * t414;
t320 = -t640 * t365 + t644 * t367;
t319 = -t640 * t364 + t644 * t366;
t318 = -pkin(4) * t405 + t333;
t317 = -t640 * t359 + t644 * t360;
t316 = t644 * t359 + t640 * t360;
t315 = -pkin(4) * t403 + t332;
t314 = -t640 * t357 + t644 * t358;
t313 = t644 * t357 + t640 * t358;
t312 = -t640 * t355 + t644 * t356;
t311 = t644 * t352 - t690;
t310 = t640 * t352 + t678;
t309 = -t641 * t349 + t645 * t350;
t308 = t645 * t349 + t641 * t350;
t307 = -t640 * t347 + t644 * t348;
t306 = t644 * t347 + t640 * t348;
t305 = t636 * t320 - t635 * t416;
t304 = t636 * t319 - t635 * t415;
t303 = t635 * t320 + t636 * t416;
t302 = t635 * t319 + t636 * t415;
t301 = t636 * t311 + t635 * t481;
t300 = t635 * t311 - t636 * t481;
t299 = t636 * t317 + t635 * t405;
t298 = t635 * t317 - t636 * t405;
t297 = t636 * t314 + t635 * t403;
t296 = t635 * t314 - t636 * t403;
t293 = t636 * t312 - t635 * t371;
t292 = t635 * t312 + t636 * t371;
t291 = t636 * t307 + t635 * t372;
t290 = t635 * t307 - t636 * t372;
t289 = -pkin(2) * t310 - pkin(3) * t351;
t288 = -qJ(2) * t383 + t636 * t327 - t635 * t345;
t287 = t643 * t295 + t639 * t378;
t286 = t639 * t295 - t643 * t378;
t285 = -pkin(8) * t372 - t294;
t284 = -qJ(2) * t375 + t636 * t321 - t635 * t339;
t283 = -pkin(1) * t430 + qJ(2) * t384 + t635 * t327 + t636 * t345;
t282 = -pkin(6) * t368 - t640 * t326 + t644 * t330;
t281 = -pkin(7) * t359 - t639 * t318 + t643 * t342;
t280 = -pkin(7) * t357 - t639 * t315 + t643 * t338;
t279 = -pkin(1) * t410 + qJ(2) * t376 + t635 * t321 + t636 * t339;
t278 = -pkin(6) * t310 - pkin(7) * t678 - t640 * t337;
t277 = -pkin(2) * t316 - pkin(3) * t359 + pkin(4) * t443 - pkin(8) * t406 - t694;
t276 = -pkin(2) * t313 - pkin(3) * t357 - pkin(4) * t441 - pkin(8) * t404 + t682;
t275 = -pkin(3) * t405 + pkin(7) * t360 + t643 * t318 + t639 * t342;
t274 = -t641 * t300 + t645 * t301;
t273 = t645 * t300 + t641 * t301;
t272 = -pkin(3) * t403 + pkin(7) * t358 + t643 * t315 + t639 * t338;
t271 = -t641 * t298 + t645 * t299;
t270 = t645 * t298 + t641 * t299;
t269 = -t641 * t296 + t645 * t297;
t268 = t645 * t296 + t641 * t297;
t267 = -pkin(7) * t347 + t643 * t285 + t372 * t700;
t266 = -t641 * t290 + t645 * t291;
t265 = t645 * t290 + t641 * t291;
t264 = pkin(7) * t348 + t639 * t285 + t372 * t664;
t263 = -qJ(2) * t349 + t636 * t282 - t635 * t336;
t262 = -t640 * t286 + t644 * t287;
t261 = t644 * t286 + t640 * t287;
t260 = -pkin(2) * t306 - pkin(3) * t347 - pkin(4) * t466 - pkin(8) * t374 - t295;
t259 = -pkin(1) * t368 + qJ(2) * t350 + t635 * t282 + t636 * t336;
t258 = -pkin(7) * t286 + (-pkin(8) * t643 + t700) * t294;
t257 = t636 * t262 + t635 * t294;
t256 = t635 * t262 - t636 * t294;
t255 = -qJ(2) * t300 + t636 * t278 - t635 * t289;
t254 = -pkin(6) * t316 - t640 * t275 + t644 * t281;
t253 = -pkin(6) * t313 - t640 * t272 + t644 * t280;
t252 = pkin(7) * t287 + (-pkin(8) * t639 + t664) * t294;
t251 = -pkin(1) * t310 + qJ(2) * t301 + t635 * t278 + t636 * t289;
t250 = -pkin(2) * t261 - pkin(3) * t286 + pkin(4) * t378 - pkin(8) * t295;
t249 = -pkin(6) * t306 - t640 * t264 + t644 * t267;
t248 = -qJ(2) * t298 + t636 * t254 - t635 * t277;
t247 = -qJ(2) * t296 + t636 * t253 - t635 * t276;
t246 = -t641 * t256 + t645 * t257;
t245 = t645 * t256 + t641 * t257;
t244 = -pkin(1) * t316 + qJ(2) * t299 + t635 * t254 + t636 * t277;
t243 = -pkin(1) * t313 + qJ(2) * t297 + t635 * t253 + t636 * t276;
t242 = -qJ(2) * t290 + t636 * t249 - t635 * t260;
t241 = -pkin(1) * t306 + qJ(2) * t291 + t635 * t249 + t636 * t260;
t240 = -pkin(6) * t261 - t640 * t252 + t644 * t258;
t239 = -qJ(2) * t256 + t636 * t240 - t635 * t250;
t238 = -pkin(1) * t261 + qJ(2) * t257 + t635 * t240 + t636 * t250;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t601, -t602, 0, t555, 0, 0, 0, 0, 0, 0, -t703, -t542, 0, t420, 0, 0, 0, 0, 0, 0, t457, t458, t494, t362, 0, 0, 0, 0, 0, 0, t329, t335, t309, t274, 0, 0, 0, 0, 0, 0, t269, t271, t266, t246; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t602, -t601, 0, t554, 0, 0, 0, 0, 0, 0, t542, -t703, 0, -t718, 0, 0, 0, 0, 0, 0, t455, t456, t493, t361, 0, 0, 0, 0, 0, 0, t328, t334, t308, t273, 0, 0, 0, 0, 0, 0, t268, t270, t265, t245; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t633, 0, 0, 0, 0, 0, 0, t556, t557, 0, -t449, 0, 0, 0, 0, 0, 0, t410, t430, t368, t310, 0, 0, 0, 0, 0, 0, t313, t316, t306, t261; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t602, 0, -t601, 0, t655, -t577, -t554, -pkin(5) * t554, 0, 0, t542, 0, -t703, 0, t717, t710, t718, pkin(5) * t718 + qJ(2) * t675 - t641 * t467, -t641 * t528 + t645 * t530, -t641 * t505 + t645 * t507, -t641 * t524 + t645 * t526, -t641 * t527 + t645 * t529, -t641 * t523 + t645 * t525, -t641 * t563 + t645 * t564, -pkin(5) * t455 - t641 * t381 + t645 * t397, -pkin(5) * t456 - t641 * t382 + t645 * t398, -pkin(5) * t493 - t641 * t432 + t645 * t433, -pkin(5) * t361 - t641 * t331 + t645 * t346, -t641 * t400 + t645 * t402, -t641 * t353 + t645 * t354, -t641 * t389 + t645 * t391, -t641 * t399 + t645 * t401, -t641 * t390 + t645 * t392, -t641 * t446 + t645 * t447, -pkin(5) * t328 - t641 * t279 + t645 * t284, -pkin(5) * t334 - t641 * t283 + t645 * t288, -pkin(5) * t308 - t641 * t259 + t645 * t263, -pkin(5) * t273 - t641 * t251 + t645 * t255, -t641 * t323 + t645 * t325, -t641 * t292 + t645 * t293, -t641 * t302 + t645 * t304, -t641 * t322 + t645 * t324, -t641 * t303 + t645 * t305, -t641 * t340 + t645 * t341, -pkin(5) * t268 - t641 * t243 + t645 * t247, -pkin(5) * t270 - t641 * t244 + t645 * t248, -pkin(5) * t265 - t641 * t241 + t645 * t242, -pkin(5) * t245 - t641 * t238 + t645 * t239; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t601, 0, t602, 0, t577, t655, t555, pkin(5) * t555, 0, 0, t703, 0, t542, 0, -t710, t717, t420, pkin(5) * t420 + qJ(2) * t685 + t645 * t467, t645 * t528 + t641 * t530, t645 * t505 + t641 * t507, t645 * t524 + t641 * t526, t645 * t527 + t641 * t529, t645 * t523 + t641 * t525, t645 * t563 + t641 * t564, pkin(5) * t457 + t645 * t381 + t641 * t397, pkin(5) * t458 + t645 * t382 + t641 * t398, pkin(5) * t494 + t645 * t432 + t641 * t433, pkin(5) * t362 + t645 * t331 + t641 * t346, t645 * t400 + t641 * t402, t645 * t353 + t641 * t354, t645 * t389 + t641 * t391, t645 * t399 + t641 * t401, t645 * t390 + t641 * t392, t645 * t446 + t641 * t447, pkin(5) * t329 + t645 * t279 + t641 * t284, pkin(5) * t335 + t645 * t283 + t641 * t288, pkin(5) * t309 + t645 * t259 + t641 * t263, pkin(5) * t274 + t645 * t251 + t641 * t255, t645 * t323 + t641 * t325, t645 * t292 + t641 * t293, t645 * t302 + t641 * t304, t645 * t322 + t641 * t324, t645 * t303 + t641 * t305, t645 * t340 + t641 * t341, pkin(5) * t269 + t645 * t243 + t641 * t247, pkin(5) * t271 + t645 * t244 + t641 * t248, pkin(5) * t266 + t645 * t241 + t641 * t242, pkin(5) * t246 + t645 * t238 + t641 * t239; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t608, t609, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t599 - t538, -pkin(1) * t598 - t539, 0, -pkin(1) * t479, (t595 + t662) * t640, t644 * t594 + t640 * t597, t644 * t610 + t688, (t596 - t663) * t644, t640 * t612 + t676, 0, pkin(1) * t516 + pkin(2) * t597 + pkin(6) * t559 - t677, pkin(1) * t517 - pkin(2) * t594 + pkin(6) * t561 + t689, pkin(1) * t546 + pkin(2) * t603 + pkin(6) * t600 + t450, pkin(1) * t421 - pkin(2) * t522 + pkin(6) * t450, t644 * t475 + t640 * t476, t644 * t426 + t640 * t428, t644 * t495 + t640 * t497, t644 * t473 + t640 * t474, t644 * t496 + t640 * t498, t644 * t512 + t640 * t513, pkin(1) * t375 - pkin(2) * t485 + pkin(6) * t411 + t644 * t380 + t640 * t414, pkin(1) * t383 + pkin(2) * t712 + pkin(6) * t431 + t644 * t387 + t640 * t425, pkin(1) * t349 - pkin(2) * t511 + pkin(6) * t370 + t644 * t326 + t640 * t330, pkin(1) * t300 - pkin(2) * t481 + pkin(6) * t311 - pkin(7) * t690 + t644 * t337, t644 * t394 + t640 * t396, t644 * t355 + t640 * t356, t644 * t364 + t640 * t366, t644 * t393 + t640 * t395, t644 * t365 + t640 * t367, t644 * t423 + t640 * t424, pkin(1) * t296 - pkin(2) * t403 + pkin(6) * t314 + t644 * t272 + t640 * t280, pkin(1) * t298 - pkin(2) * t405 + pkin(6) * t317 + t644 * t275 + t640 * t281, pkin(1) * t290 - pkin(2) * t372 + pkin(6) * t307 + t644 * t264 + t640 * t267, pkin(1) * t256 - pkin(2) * t294 + pkin(6) * t262 + t644 * t252 + t640 * t258;];
tauB_reg = t1;
