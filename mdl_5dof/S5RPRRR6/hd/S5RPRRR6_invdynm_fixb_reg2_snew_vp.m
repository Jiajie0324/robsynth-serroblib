% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:02
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRRR6_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR6_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR6_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR6_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR6_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR6_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:02:02
% EndTime: 2019-12-31 19:02:16
% DurationCPUTime: 15.41s
% Computational Cost: add. (80399->649), mult. (160028->923), div. (0->0), fcn. (107721->10), ass. (0->452)
t1169 = sin(qJ(1));
t1173 = cos(qJ(1));
t1141 = t1173 * g(1) + t1169 * g(2);
t1175 = qJD(1) ^ 2;
t1124 = -t1175 * pkin(1) - t1141;
t1163 = sin(pkin(9));
t1164 = cos(pkin(9));
t1140 = t1169 * g(1) - t1173 * g(2);
t1182 = qJDD(1) * pkin(1) + t1140;
t1067 = t1163 * t1124 - t1164 * t1182;
t1068 = t1164 * t1124 + t1163 * t1182;
t1204 = t1163 * t1067 + t1164 * t1068;
t1001 = t1164 * t1067 - t1163 * t1068;
t1227 = t1173 * t1001;
t1272 = -t1169 * t1204 + t1227;
t1233 = t1169 * t1001;
t1271 = t1173 * t1204 + t1233;
t1166 = sin(qJ(5));
t1167 = sin(qJ(4));
t1168 = sin(qJ(3));
t1171 = cos(qJ(4));
t1172 = cos(qJ(3));
t1114 = (t1167 * t1172 + t1168 * t1171) * qJD(1);
t1170 = cos(qJ(5));
t1226 = qJD(3) + qJD(4);
t1078 = t1166 * t1114 - t1170 * t1226;
t1080 = t1170 * t1114 + t1166 * t1226;
t1023 = t1080 * t1078;
t1242 = qJD(1) * t1172;
t1152 = qJD(3) * t1242;
t1225 = t1168 * qJDD(1);
t1127 = t1152 + t1225;
t1243 = qJD(1) * t1168;
t1215 = qJD(3) * t1243;
t1224 = t1172 * qJDD(1);
t1179 = -t1215 + t1224;
t1203 = t1167 * t1127 - t1171 * t1179;
t1032 = -t1114 * qJD(4) - t1203;
t1026 = qJDD(5) - t1032;
t1259 = -t1023 + t1026;
t1270 = t1166 * t1259;
t1112 = t1167 * t1243 - t1171 * t1242;
t1069 = t1114 * t1112;
t1159 = qJDD(3) + qJDD(4);
t1258 = -t1069 + t1159;
t1269 = t1167 * t1258;
t1268 = t1170 * t1259;
t1267 = t1171 * t1258;
t1033 = -t1112 * qJD(4) + t1171 * t1127 + t1167 * t1179;
t1105 = t1226 * t1112;
t1266 = -t1105 + t1033;
t1130 = t1163 * qJDD(1) + t1164 * t1175;
t1161 = g(3) - qJDD(2);
t1103 = qJ(2) * t1130 - t1164 * t1161;
t1131 = t1164 * qJDD(1) - t1163 * t1175;
t1186 = -qJ(2) * t1131 - t1163 * t1161;
t1257 = t1173 * t1130 + t1169 * t1131;
t1265 = pkin(5) * t1257 + t1173 * t1103 - t1169 * t1186;
t1072 = -t1169 * t1130 + t1173 * t1131;
t1264 = -pkin(5) * t1072 + t1169 * t1103 + t1173 * t1186;
t1223 = t1226 ^ 2;
t1065 = t1112 * pkin(4) - t1114 * pkin(8);
t1178 = -t1175 * pkin(2) + qJDD(1) * pkin(6) + t1068;
t1177 = t1168 * t1178;
t1234 = t1168 * t1175;
t1244 = qJD(1) * qJD(3);
t1176 = -t1177 - t1127 * pkin(7) + qJDD(3) * pkin(3) + (pkin(3) * t1234 + pkin(7) * t1244 - t1161) * t1172;
t1031 = -t1168 * t1161 + t1172 * t1178;
t1139 = qJD(3) * pkin(3) - pkin(7) * t1243;
t1255 = t1172 ^ 2;
t1157 = t1255 * t1175;
t988 = -pkin(3) * t1157 + pkin(7) * t1179 - qJD(3) * t1139 + t1031;
t918 = t1167 * t1176 + t1171 * t988;
t884 = -t1223 * pkin(4) + t1159 * pkin(8) - t1112 * t1065 + t918;
t1051 = -qJDD(1) * pkin(2) - t1175 * pkin(6) + t1067;
t1003 = -t1179 * pkin(3) - pkin(7) * t1157 + t1139 * t1243 + t1051;
t1211 = t1226 * t1114;
t893 = -t1266 * pkin(8) + (-t1032 + t1211) * pkin(4) + t1003;
t829 = t1166 * t884 - t1170 * t893;
t830 = t1166 * t893 + t1170 * t884;
t783 = t1166 * t829 + t1170 * t830;
t1029 = t1172 * t1161 + t1177;
t971 = t1168 * t1029 + t1172 * t1031;
t1076 = t1078 ^ 2;
t1077 = t1080 ^ 2;
t1107 = qJD(5) + t1112;
t1106 = t1107 ^ 2;
t1109 = t1112 ^ 2;
t1110 = t1114 ^ 2;
t917 = t1167 * t988 - t1171 * t1176;
t849 = t1167 * t918 - t1171 * t917;
t1254 = pkin(3) * t849;
t1011 = qJD(3) * t1114 - t1203;
t1014 = t1105 + t1033;
t941 = t1167 * t1011 - t1171 * t1014;
t1253 = pkin(3) * t941;
t1252 = pkin(4) * t1167;
t883 = -t1159 * pkin(4) - t1223 * pkin(8) + t1114 * t1065 + t917;
t1250 = -pkin(4) * t883 + pkin(8) * t783;
t879 = t1166 * t883;
t973 = t1023 + t1026;
t1249 = t1166 * t973;
t1248 = t1168 * t849;
t880 = t1170 * t883;
t1247 = t1170 * t973;
t1246 = t1172 * t849;
t1245 = -pkin(2) * t1051 + pkin(6) * t971;
t1241 = t1107 * t1166;
t1240 = t1107 * t1170;
t1160 = t1168 ^ 2;
t1239 = t1160 * t1175;
t1238 = t1167 * t1003;
t1063 = t1069 + t1159;
t1237 = t1167 * t1063;
t1047 = t1168 * t1051;
t1147 = t1172 * t1234;
t1137 = qJDD(3) + t1147;
t1236 = t1168 * t1137;
t1138 = qJDD(3) - t1147;
t1235 = t1168 * t1138;
t1230 = t1171 * t1003;
t1229 = t1171 * t1063;
t1048 = t1172 * t1051;
t1128 = -0.2e1 * t1215 + t1224;
t1083 = t1172 * t1128;
t1228 = t1172 * t1138;
t1222 = t1160 + t1255;
t1021 = -t1077 - t1106;
t915 = -t1166 * t1021 - t1247;
t1185 = -t1170 * t1033 - t1166 * t1159;
t963 = (qJD(5) + t1107) * t1078 + t1185;
t1221 = pkin(4) * t963 + pkin(8) * t915 + t879;
t1004 = -t1106 - t1076;
t911 = t1170 * t1004 - t1270;
t1046 = t1107 * t1080;
t1205 = -t1166 * t1033 + t1170 * t1159;
t980 = -t1080 * qJD(5) + t1205;
t959 = -t1046 + t980;
t1220 = pkin(4) * t959 + pkin(8) * t911 - t880;
t1219 = -pkin(4) * t1171 - pkin(3);
t1218 = t1163 * t1069;
t1217 = t1164 * t1069;
t1216 = t1167 * t1023;
t1214 = t1171 * t1023;
t1174 = qJD(3) ^ 2;
t1143 = -t1174 - t1239;
t1092 = -t1168 * t1143 - t1228;
t1126 = 0.2e1 * t1152 + t1225;
t1213 = -pkin(2) * t1126 + pkin(6) * t1092 + t1047;
t1145 = -t1157 - t1174;
t1090 = t1172 * t1145 - t1236;
t1212 = pkin(2) * t1128 + pkin(6) * t1090 - t1048;
t850 = t1167 * t917 + t1171 * t918;
t773 = t1167 * t883 + t1171 * t783;
t782 = t1166 * t830 - t1170 * t829;
t736 = pkin(7) * t773 + (-pkin(8) * t1167 + t1219) * t782;
t772 = t1167 * t783 - t1171 * t883;
t743 = -pkin(7) * t772 + (-pkin(8) * t1171 + t1252) * t782;
t749 = -t1168 * t772 + t1172 * t773;
t1210 = -pkin(2) * t782 + pkin(6) * t749 + t1168 * t743 + t1172 * t736;
t960 = (-qJD(5) + t1107) * t1080 + t1205;
t1045 = t1107 * t1078;
t981 = -t1078 * qJD(5) - t1185;
t962 = t1045 + t981;
t874 = t1166 * t960 - t1170 * t962;
t771 = -pkin(8) * t874 - t782;
t876 = t1166 * t962 + t1170 * t960;
t986 = t1076 + t1077;
t846 = -t1167 * t986 + t1171 * t876;
t752 = pkin(7) * t846 + t1167 * t771 + t1219 * t874;
t845 = t1167 * t876 + t1171 * t986;
t754 = -pkin(7) * t845 + t1171 * t771 + t874 * t1252;
t798 = -t1168 * t845 + t1172 * t846;
t1209 = -pkin(2) * t874 + pkin(6) * t798 + t1168 * t754 + t1172 * t752;
t910 = t1166 * t1004 + t1268;
t808 = -pkin(4) * t910 + t829;
t834 = -pkin(8) * t910 + t879;
t856 = -t1167 * t959 + t1171 * t911;
t757 = -pkin(3) * t910 + pkin(7) * t856 + t1167 * t834 + t1171 * t808;
t855 = t1167 * t911 + t1171 * t959;
t765 = -pkin(7) * t855 - t1167 * t808 + t1171 * t834;
t806 = -t1168 * t855 + t1172 * t856;
t1208 = -pkin(2) * t910 + pkin(6) * t806 + t1168 * t765 + t1172 * t757;
t914 = t1170 * t1021 - t1249;
t811 = -pkin(4) * t914 + t830;
t838 = -pkin(8) * t914 + t880;
t858 = -t1167 * t963 + t1171 * t915;
t759 = -pkin(3) * t914 + pkin(7) * t858 + t1167 * t838 + t1171 * t811;
t857 = t1167 * t915 + t1171 * t963;
t767 = -pkin(7) * t857 - t1167 * t811 + t1171 * t838;
t810 = -t1168 * t857 + t1172 * t858;
t1207 = -pkin(2) * t914 + pkin(6) * t810 + t1168 * t767 + t1172 * t759;
t1206 = pkin(4) * t986 + pkin(8) * t876 + t783;
t1202 = -t1169 * t1140 - t1173 * t1141;
t1034 = -t1109 - t1110;
t943 = t1171 * t1011 + t1167 * t1014;
t822 = -pkin(3) * t1034 + pkin(7) * t943 + t850;
t825 = -pkin(7) * t941 - t849;
t870 = -t1168 * t941 + t1172 * t943;
t1201 = -pkin(2) * t1034 + pkin(6) * t870 + t1168 * t825 + t1172 * t822;
t1009 = (0.2e1 * qJD(4) + qJD(3)) * t1114 + t1203;
t1060 = -t1223 - t1109;
t990 = t1171 * t1060 - t1269;
t885 = -pkin(3) * t1009 + pkin(7) * t990 - t1230;
t989 = t1167 * t1060 + t1267;
t921 = -t1168 * t989 + t1172 * t990;
t928 = -pkin(7) * t989 + t1238;
t1200 = -pkin(2) * t1009 + pkin(6) * t921 + t1168 * t928 + t1172 * t885;
t1093 = -t1110 - t1223;
t1016 = -t1167 * t1093 - t1229;
t892 = -pkin(3) * t1266 + pkin(7) * t1016 + t1238;
t1015 = t1171 * t1093 - t1237;
t938 = -pkin(7) * t1015 + t1230;
t945 = -t1168 * t1015 + t1172 * t1016;
t1199 = -pkin(2) * t1266 + pkin(6) * t945 + t1168 * t938 + t1172 * t892;
t1198 = pkin(3) * t772 + t1250;
t1197 = pkin(3) * t1015 - t918;
t1196 = t1163 * t1147;
t1195 = t1164 * t1147;
t1132 = t1222 * qJDD(1);
t1135 = t1157 + t1239;
t1194 = pkin(2) * t1135 + pkin(6) * t1132 + t971;
t1134 = t1173 * qJDD(1) - t1169 * t1175;
t1193 = -pkin(5) * t1134 - t1169 * g(3);
t1192 = t1167 * t1105;
t1191 = t1167 * t1211;
t1190 = t1171 * t1105;
t1189 = t1171 * t1211;
t1188 = pkin(3) * t855 + t1220;
t1187 = pkin(3) * t857 + t1221;
t970 = t1172 * t1029 - t1168 * t1031;
t1184 = t1173 * t1140 - t1169 * t1141;
t1183 = pkin(3) * t989 - t917;
t1181 = pkin(3) * t845 + t1206;
t801 = t1172 * t850 - t1248;
t833 = -pkin(3) * t1003 + pkin(7) * t850;
t1180 = -pkin(2) * t1003 + pkin(6) * t801 - pkin(7) * t1248 + t1172 * t833;
t1144 = t1157 - t1174;
t1142 = t1174 - t1239;
t1136 = -t1157 + t1239;
t1133 = t1169 * qJDD(1) + t1173 * t1175;
t1122 = t1172 * t1137;
t1121 = t1222 * t1244;
t1108 = -pkin(5) * t1133 + t1173 * g(3);
t1099 = -t1110 + t1223;
t1098 = t1109 - t1223;
t1097 = t1172 * t1127 - t1160 * t1244;
t1096 = -t1168 * t1179 - t1255 * t1244;
t1095 = t1163 * qJDD(3) + t1164 * t1121;
t1094 = -t1164 * qJDD(3) + t1163 * t1121;
t1091 = -t1168 * t1142 + t1122;
t1089 = t1172 * t1144 - t1235;
t1088 = t1172 * t1143 - t1235;
t1087 = t1172 * t1142 + t1236;
t1086 = t1168 * t1145 + t1122;
t1085 = t1168 * t1144 + t1228;
t1084 = (t1127 + t1152) * t1168;
t1075 = t1164 * t1132 - t1163 * t1135;
t1074 = t1163 * t1132 + t1164 * t1135;
t1071 = -t1168 * t1126 + t1083;
t1070 = t1172 * t1126 + t1168 * t1128;
t1066 = t1110 - t1109;
t1059 = t1164 * t1097 - t1196;
t1058 = t1164 * t1096 + t1196;
t1057 = t1163 * t1097 + t1195;
t1056 = t1163 * t1096 - t1195;
t1055 = t1164 * t1091 + t1163 * t1225;
t1054 = t1164 * t1089 + t1163 * t1224;
t1053 = t1163 * t1091 - t1164 * t1225;
t1052 = t1163 * t1089 - t1164 * t1224;
t1044 = t1164 * t1092 + t1163 * t1126;
t1043 = t1164 * t1090 - t1163 * t1128;
t1042 = t1163 * t1092 - t1164 * t1126;
t1041 = t1163 * t1090 + t1164 * t1128;
t1040 = -pkin(1) * t1130 - t1068;
t1039 = pkin(1) * t1131 - t1067;
t1038 = -t1077 + t1106;
t1037 = t1076 - t1106;
t1036 = -t1190 + t1191;
t1035 = -t1192 - t1189;
t1030 = t1164 * t1071 + t1163 * t1136;
t1028 = t1163 * t1071 - t1164 * t1136;
t1022 = t1077 - t1076;
t1020 = t1171 * t1098 - t1237;
t1019 = -t1167 * t1099 + t1267;
t1018 = t1167 * t1098 + t1229;
t1017 = t1171 * t1099 + t1269;
t1008 = -pkin(6) * t1088 + t1048;
t1007 = -pkin(6) * t1086 + t1047;
t997 = pkin(1) * t1001;
t996 = t1171 * t1033 - t1191;
t995 = t1167 * t1033 + t1189;
t994 = -t1167 * t1032 + t1190;
t993 = t1171 * t1032 + t1192;
t992 = -pkin(2) * t1088 + t1031;
t991 = -pkin(2) * t1086 + t1029;
t987 = pkin(1) * t1161 + qJ(2) * t1204;
t978 = (-t1078 * t1170 + t1080 * t1166) * t1107;
t977 = (-t1078 * t1166 - t1080 * t1170) * t1107;
t976 = -t1168 * t1035 + t1172 * t1036;
t975 = t1172 * t1035 + t1168 * t1036;
t967 = t1163 * t1159 + t1164 * t976;
t966 = -t1164 * t1159 + t1163 * t976;
t965 = pkin(1) * t1041 + t1212;
t964 = pkin(1) * t1042 + t1213;
t961 = -t1045 + t981;
t958 = -t1046 - t980;
t955 = -t1168 * t1018 + t1172 * t1020;
t954 = -t1168 * t1017 + t1172 * t1019;
t953 = t1172 * t1018 + t1168 * t1020;
t952 = t1172 * t1017 + t1168 * t1019;
t951 = -t1080 * t1241 + t1170 * t981;
t950 = t1080 * t1240 + t1166 * t981;
t949 = t1078 * t1240 - t1166 * t980;
t948 = -t1078 * t1241 - t1170 * t980;
t947 = -qJ(2) * t1074 + t1164 * t970;
t946 = qJ(2) * t1075 + t1163 * t970;
t944 = t1172 * t1015 + t1168 * t1016;
t942 = -t1171 * t1009 - t1167 * t1266;
t940 = -t1167 * t1009 + t1171 * t1266;
t936 = t1167 * t1026 + t1171 * t978;
t935 = -t1171 * t1026 + t1167 * t978;
t934 = t1163 * t1051 + t1164 * t971;
t933 = -t1164 * t1051 + t1163 * t971;
t932 = t1170 * t1037 - t1249;
t931 = -t1166 * t1038 + t1268;
t930 = t1166 * t1037 + t1247;
t929 = t1170 * t1038 + t1270;
t927 = -t1168 * t995 + t1172 * t996;
t926 = -t1168 * t993 + t1172 * t994;
t925 = t1168 * t996 + t1172 * t995;
t924 = t1168 * t994 + t1172 * t993;
t922 = pkin(1) * t1074 + t1194;
t920 = t1168 * t990 + t1172 * t989;
t907 = t1164 * t927 + t1218;
t906 = t1164 * t926 - t1218;
t905 = t1163 * t927 - t1217;
t904 = t1163 * t926 + t1217;
t903 = -qJ(2) * t1042 + t1164 * t1008 - t1163 * t992;
t902 = -qJ(2) * t1041 + t1164 * t1007 - t1163 * t991;
t901 = t1171 * t951 + t1216;
t900 = t1171 * t949 - t1216;
t899 = t1167 * t951 - t1214;
t898 = t1167 * t949 + t1214;
t897 = t1011 * t1163 + t1164 * t955;
t896 = t1163 * t1014 + t1164 * t954;
t895 = -t1011 * t1164 + t1163 * t955;
t894 = -t1164 * t1014 + t1163 * t954;
t889 = t1163 * t1266 + t1164 * t945;
t888 = t1163 * t945 - t1164 * t1266;
t887 = -pkin(1) * t1088 + qJ(2) * t1044 + t1163 * t1008 + t1164 * t992;
t886 = -pkin(1) * t1086 + qJ(2) * t1043 + t1163 * t1007 + t1164 * t991;
t878 = t1163 * t1009 + t1164 * t921;
t877 = -t1164 * t1009 + t1163 * t921;
t875 = -t1166 * t961 + t1170 * t959;
t873 = t1166 * t959 + t1170 * t961;
t869 = -t1168 * t940 + t1172 * t942;
t868 = t1168 * t943 + t1172 * t941;
t867 = t1168 * t942 + t1172 * t940;
t866 = -t1167 * t958 + t1171 * t932;
t865 = t1167 * t962 + t1171 * t931;
t864 = t1167 * t932 + t1171 * t958;
t863 = t1167 * t931 - t1171 * t962;
t861 = pkin(1) * t933 + t1245;
t860 = -t1168 * t935 + t1172 * t936;
t859 = t1168 * t936 + t1172 * t935;
t854 = t1167 * t1022 + t1171 * t875;
t853 = -t1171 * t1022 + t1167 * t875;
t852 = t1163 * t1066 + t1164 * t869;
t851 = -t1164 * t1066 + t1163 * t869;
t848 = t1163 * t1034 + t1164 * t870;
t847 = -t1164 * t1034 + t1163 * t870;
t844 = -qJ(2) * t933 - (pkin(2) * t1163 - pkin(6) * t1164) * t970;
t843 = -pkin(2) * t944 - t1197;
t842 = -t1168 * t899 + t1172 * t901;
t841 = -t1168 * t898 + t1172 * t900;
t840 = t1168 * t901 + t1172 * t899;
t839 = t1168 * t900 + t1172 * t898;
t837 = t1163 * t977 + t1164 * t860;
t836 = t1163 * t860 - t1164 * t977;
t835 = -pkin(2) * t920 - t1183;
t831 = -pkin(2) * t868 - t1253;
t826 = qJ(2) * t934 - (-pkin(2) * t1164 - pkin(6) * t1163 - pkin(1)) * t970;
t823 = -pkin(6) * t944 - t1168 * t892 + t1172 * t938;
t820 = t1163 * t950 + t1164 * t842;
t819 = -t1163 * t948 + t1164 * t841;
t818 = t1163 * t842 - t1164 * t950;
t817 = t1163 * t841 + t1164 * t948;
t816 = -pkin(6) * t920 - t1168 * t885 + t1172 * t928;
t815 = -t1168 * t864 + t1172 * t866;
t814 = -t1168 * t863 + t1172 * t865;
t813 = t1168 * t866 + t1172 * t864;
t812 = t1168 * t865 + t1172 * t863;
t809 = t1168 * t858 + t1172 * t857;
t805 = t1168 * t856 + t1172 * t855;
t803 = -t1168 * t853 + t1172 * t854;
t802 = t1168 * t854 + t1172 * t853;
t800 = t1168 * t850 + t1246;
t797 = t1168 * t846 + t1172 * t845;
t795 = t1163 * t930 + t1164 * t815;
t794 = t1163 * t929 + t1164 * t814;
t793 = t1163 * t815 - t1164 * t930;
t792 = t1163 * t814 - t1164 * t929;
t791 = t1163 * t1003 + t1164 * t801;
t790 = -t1164 * t1003 + t1163 * t801;
t789 = pkin(1) * t888 + t1199;
t788 = t1163 * t914 + t1164 * t810;
t787 = t1163 * t810 - t1164 * t914;
t786 = t1163 * t910 + t1164 * t806;
t785 = t1163 * t806 - t1164 * t910;
t784 = pkin(1) * t877 + t1200;
t779 = t1163 * t873 + t1164 * t803;
t778 = t1163 * t803 - t1164 * t873;
t777 = t1163 * t874 + t1164 * t798;
t776 = t1163 * t798 - t1164 * t874;
t775 = -pkin(2) * t800 - t1254;
t774 = -qJ(2) * t888 - t1163 * t843 + t1164 * t823;
t770 = -qJ(2) * t877 - t1163 * t835 + t1164 * t816;
t769 = -pkin(1) * t944 + qJ(2) * t889 + t1163 * t823 + t1164 * t843;
t768 = -pkin(6) * t868 - t1168 * t822 + t1172 * t825;
t763 = -pkin(1) * t920 + qJ(2) * t878 + t1163 * t816 + t1164 * t835;
t762 = -pkin(6) * t800 - pkin(7) * t1246 - t1168 * t833;
t761 = -pkin(2) * t809 - t1187;
t760 = -pkin(2) * t805 - t1188;
t755 = pkin(1) * t847 + t1201;
t750 = -qJ(2) * t847 - t1163 * t831 + t1164 * t768;
t748 = t1168 * t773 + t1172 * t772;
t746 = pkin(1) * t790 + t1180;
t745 = -pkin(2) * t797 - t1181;
t744 = -pkin(1) * t868 + qJ(2) * t848 + t1163 * t768 + t1164 * t831;
t741 = t1163 * t782 + t1164 * t749;
t740 = t1163 * t749 - t1164 * t782;
t739 = -qJ(2) * t790 - t1163 * t775 + t1164 * t762;
t738 = -pkin(6) * t809 - t1168 * t759 + t1172 * t767;
t737 = -pkin(6) * t805 - t1168 * t757 + t1172 * t765;
t734 = -pkin(1) * t800 + qJ(2) * t791 + t1163 * t762 + t1164 * t775;
t733 = pkin(1) * t787 + t1207;
t732 = -pkin(2) * t748 - t1198;
t731 = pkin(1) * t785 + t1208;
t730 = -pkin(6) * t797 - t1168 * t752 + t1172 * t754;
t729 = -qJ(2) * t787 - t1163 * t761 + t1164 * t738;
t728 = pkin(1) * t776 + t1209;
t727 = -qJ(2) * t785 - t1163 * t760 + t1164 * t737;
t726 = -pkin(1) * t809 + qJ(2) * t788 + t1163 * t738 + t1164 * t761;
t725 = -pkin(1) * t805 + qJ(2) * t786 + t1163 * t737 + t1164 * t760;
t724 = -qJ(2) * t776 - t1163 * t745 + t1164 * t730;
t723 = -pkin(1) * t797 + qJ(2) * t777 + t1163 * t730 + t1164 * t745;
t722 = -pkin(6) * t748 - t1168 * t736 + t1172 * t743;
t721 = pkin(1) * t740 + t1210;
t720 = -qJ(2) * t740 - t1163 * t732 + t1164 * t722;
t719 = -pkin(1) * t748 + qJ(2) * t741 + t1163 * t722 + t1164 * t732;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1134, 0, -t1133, 0, t1193, -t1108, -t1184, -pkin(5) * t1184, 0, 0, t1072, 0, -t1257, 0, t1264, t1265, t1272, pkin(5) * t1272 + qJ(2) * t1227 - t1169 * t987, -t1169 * t1057 + t1173 * t1059, -t1169 * t1028 + t1173 * t1030, -t1169 * t1053 + t1173 * t1055, -t1169 * t1056 + t1173 * t1058, -t1169 * t1052 + t1173 * t1054, -t1169 * t1094 + t1173 * t1095, t1173 * t902 - t1169 * t886 - pkin(5) * (t1173 * t1041 + t1169 * t1043), t1173 * t903 - t1169 * t887 - pkin(5) * (t1173 * t1042 + t1169 * t1044), t1173 * t947 - t1169 * t946 - pkin(5) * (t1173 * t1074 + t1169 * t1075), t1173 * t844 - t1169 * t826 - pkin(5) * (t1169 * t934 + t1173 * t933), -t1169 * t905 + t1173 * t907, -t1169 * t851 + t1173 * t852, -t1169 * t894 + t1173 * t896, -t1169 * t904 + t1173 * t906, -t1169 * t895 + t1173 * t897, -t1169 * t966 + t1173 * t967, t1173 * t770 - t1169 * t763 - pkin(5) * (t1169 * t878 + t1173 * t877), t1173 * t774 - t1169 * t769 - pkin(5) * (t1169 * t889 + t1173 * t888), t1173 * t750 - t1169 * t744 - pkin(5) * (t1169 * t848 + t1173 * t847), t1173 * t739 - t1169 * t734 - pkin(5) * (t1169 * t791 + t1173 * t790), -t1169 * t818 + t1173 * t820, -t1169 * t778 + t1173 * t779, -t1169 * t792 + t1173 * t794, -t1169 * t817 + t1173 * t819, -t1169 * t793 + t1173 * t795, -t1169 * t836 + t1173 * t837, t1173 * t727 - t1169 * t725 - pkin(5) * (t1169 * t786 + t1173 * t785), t1173 * t729 - t1169 * t726 - pkin(5) * (t1169 * t788 + t1173 * t787), t1173 * t724 - t1169 * t723 - pkin(5) * (t1169 * t777 + t1173 * t776), t1173 * t720 - t1169 * t719 - pkin(5) * (t1169 * t741 + t1173 * t740); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1133, 0, t1134, 0, t1108, t1193, t1202, pkin(5) * t1202, 0, 0, t1257, 0, t1072, 0, -t1265, t1264, t1271, pkin(5) * t1271 + qJ(2) * t1233 + t1173 * t987, t1173 * t1057 + t1169 * t1059, t1173 * t1028 + t1169 * t1030, t1173 * t1053 + t1169 * t1055, t1173 * t1056 + t1169 * t1058, t1173 * t1052 + t1169 * t1054, t1173 * t1094 + t1169 * t1095, t1169 * t902 + t1173 * t886 + pkin(5) * (-t1169 * t1041 + t1173 * t1043), t1169 * t903 + t1173 * t887 + pkin(5) * (-t1169 * t1042 + t1173 * t1044), t1169 * t947 + t1173 * t946 + pkin(5) * (-t1169 * t1074 + t1173 * t1075), t1169 * t844 + t1173 * t826 + pkin(5) * (-t1169 * t933 + t1173 * t934), t1169 * t907 + t1173 * t905, t1169 * t852 + t1173 * t851, t1169 * t896 + t1173 * t894, t1169 * t906 + t1173 * t904, t1169 * t897 + t1173 * t895, t1169 * t967 + t1173 * t966, t1169 * t770 + t1173 * t763 + pkin(5) * (-t1169 * t877 + t1173 * t878), t1169 * t774 + t1173 * t769 + pkin(5) * (-t1169 * t888 + t1173 * t889), t1169 * t750 + t1173 * t744 + pkin(5) * (-t1169 * t847 + t1173 * t848), t1169 * t739 + t1173 * t734 + pkin(5) * (-t1169 * t790 + t1173 * t791), t1169 * t820 + t1173 * t818, t1169 * t779 + t1173 * t778, t1169 * t794 + t1173 * t792, t1169 * t819 + t1173 * t817, t1169 * t795 + t1173 * t793, t1169 * t837 + t1173 * t836, t1169 * t727 + t1173 * t725 + pkin(5) * (-t1169 * t785 + t1173 * t786), t1169 * t729 + t1173 * t726 + pkin(5) * (-t1169 * t787 + t1173 * t788), t1169 * t724 + t1173 * t723 + pkin(5) * (-t1169 * t776 + t1173 * t777), t1169 * t720 + t1173 * t719 + pkin(5) * (-t1169 * t740 + t1173 * t741); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1140, t1141, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1039, t1040, 0, -t997, t1084, t1070, t1087, t1083, t1085, 0, t965, t964, t922, t861, t925, t867, t952, t924, t953, t975, t784, t789, t755, t746, t840, t802, t812, t839, t813, t859, t731, t733, t728, t721; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1175, 0, 0, -g(3), -t1140, 0, 0, 0, t1131, 0, -t1130, 0, t1186, t1103, t1001, qJ(2) * t1001, t1059, t1030, t1055, t1058, t1054, t1095, t902, t903, t947, t844, t907, t852, t896, t906, t897, t967, t770, t774, t750, t739, t820, t779, t794, t819, t795, t837, t727, t729, t724, t720; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1175, 0, qJDD(1), 0, g(3), 0, -t1141, 0, 0, 0, t1130, 0, t1131, 0, -t1103, t1186, t1204, t987, t1057, t1028, t1053, t1056, t1052, t1094, t886, t887, t946, t826, t905, t851, t894, t904, t895, t966, t763, t769, t744, t734, t818, t778, t792, t817, t793, t836, t725, t726, t723, t719; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1140, t1141, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1039, t1040, 0, -t997, t1084, t1070, t1087, t1083, t1085, 0, t965, t964, t922, t861, t925, t867, t952, t924, t953, t975, t784, t789, t755, t746, t840, t802, t812, t839, t813, t859, t731, t733, t728, t721; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1175, 0, 0, -t1161, t1067, 0, t1097, t1071, t1091, t1096, t1089, t1121, t1007, t1008, t970, pkin(6) * t970, t927, t869, t954, t926, t955, t976, t816, t823, t768, t762, t842, t803, t814, t841, t815, t860, t737, t738, t730, t722; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1175, 0, qJDD(1), 0, t1161, 0, t1068, 0, t1147, -t1136, -t1225, -t1147, -t1224, -qJDD(3), t991, t992, 0, pkin(2) * t970, -t1069, -t1066, -t1014, t1069, -t1011, -t1159, t835, t843, t831, t775, -t950, -t873, -t929, t948, -t930, -t977, t760, t761, t745, t732; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1067, -t1068, 0, 0, t1084, t1070, t1087, t1083, t1085, 0, t1212, t1213, t1194, t1245, t925, t867, t952, t924, t953, t975, t1200, t1199, t1201, t1180, t840, t802, t812, t839, t813, t859, t1208, t1207, t1209, t1210; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1127, t1128, t1137, -t1152, t1144, t1152, 0, t1051, t1029, 0, t996, t942, t1019, t994, t1020, t1036, t928, t938, t825, -pkin(7) * t849, t901, t854, t865, t900, t866, t936, t765, t767, t754, t743; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1215, t1126, t1142, t1179, t1138, -t1215, -t1051, 0, t1031, 0, t995, t940, t1017, t993, t1018, t1035, t885, t892, t822, t833, t899, t853, t863, t898, t864, t935, t757, t759, t752, t736; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1147, t1136, t1225, t1147, t1224, qJDD(3), -t1029, -t1031, 0, 0, t1069, t1066, t1014, -t1069, t1011, t1159, t1183, t1197, t1253, t1254, t950, t873, t929, -t948, t930, t977, t1188, t1187, t1181, t1198; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1033, -t1009, t1258, t1105, t1098, -t1105, 0, t1003, t917, 0, t951, t875, t931, t949, t932, t978, t834, t838, t771, -pkin(8) * t782; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1211, t1266, t1099, t1032, t1063, -t1211, -t1003, 0, t918, 0, -t1023, -t1022, -t962, t1023, t958, -t1026, t808, t811, -pkin(4) * t874, -pkin(4) * t782; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1069, t1066, t1014, -t1069, t1011, t1159, -t917, -t918, 0, 0, t950, t873, t929, -t948, t930, t977, t1220, t1221, t1206, t1250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t981, t959, t1259, t1045, t1037, -t1045, 0, t883, t829, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1046, t961, t1038, t980, t973, -t1046, -t883, 0, t830, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1023, t1022, t962, -t1023, -t958, t1026, -t829, -t830, 0, 0;];
m_new_reg = t1;
