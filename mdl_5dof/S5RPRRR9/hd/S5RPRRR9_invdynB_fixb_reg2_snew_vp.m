% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:08
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRRR9_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR9_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR9_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR9_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR9_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR9_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:08:14
% EndTime: 2019-12-31 19:08:29
% DurationCPUTime: 14.50s
% Computational Cost: add. (82326->637), mult. (200102->983), div. (0->0), fcn. (155380->10), ass. (0->442)
t733 = sin(qJ(5));
t732 = cos(pkin(9));
t739 = cos(qJ(3));
t731 = sin(pkin(9));
t735 = sin(qJ(3));
t798 = t731 * t735;
t699 = (t732 * t739 - t798) * qJD(1);
t754 = t731 * t739 + t732 * t735;
t700 = t754 * qJD(1);
t734 = sin(qJ(4));
t738 = cos(qJ(4));
t659 = t734 * t699 + t738 * t700;
t730 = qJD(3) + qJD(4);
t737 = cos(qJ(5));
t640 = t733 * t659 - t737 * t730;
t642 = t737 * t659 + t733 * t730;
t598 = t642 * t640;
t773 = qJDD(1) * t732;
t697 = qJDD(1) * t798 - t739 * t773;
t777 = t700 * qJD(3);
t668 = -t697 - t777;
t778 = t699 * qJD(3);
t819 = t754 * qJDD(1);
t670 = t819 + t778;
t758 = -t738 * t668 + t734 * t670;
t594 = -t659 * qJD(4) - t758;
t750 = qJDD(5) - t594;
t822 = -t598 + t750;
t830 = t733 * t822;
t657 = -t738 * t699 + t734 * t700;
t616 = t659 * t657;
t727 = qJDD(3) + qJDD(4);
t821 = -t616 + t727;
t829 = t734 * t821;
t673 = t699 * t700;
t818 = qJDD(3) + t673;
t828 = t735 * t818;
t827 = t737 * t822;
t826 = t738 * t821;
t825 = t739 * t818;
t742 = qJD(1) ^ 2;
t736 = sin(qJ(1));
t740 = cos(qJ(1));
t711 = t736 * g(1) - t740 * g(2);
t756 = -qJDD(2) + t711;
t728 = t731 ^ 2;
t729 = t732 ^ 2;
t779 = t728 + t729;
t812 = pkin(2) * t732;
t663 = (pkin(6) * t779 + qJ(2)) * t742 + (pkin(1) + t812) * qJDD(1) + t756;
t695 = t699 ^ 2;
t755 = qJD(3) * pkin(3) - t700 * pkin(7);
t587 = t668 * pkin(3) + t695 * pkin(7) - t700 * t755 + t663;
t712 = t740 * g(1) + t736 * g(2);
t701 = -t742 * pkin(1) + qJDD(1) * qJ(2) - t712;
t774 = qJD(1) * qJD(2);
t824 = t701 + 0.2e1 * t774;
t650 = t730 * t657;
t749 = t657 * qJD(4) - t734 * t668 - t738 * t670;
t823 = t749 + t650;
t550 = -t640 * qJD(5) + t733 * t727 - t737 * t749;
t654 = qJD(5) + t657;
t609 = t654 * t640;
t528 = -t609 + t550;
t815 = t742 * t779;
t759 = -t737 * t727 - t733 * t749;
t525 = (qJD(5) - t654) * t642 + t759;
t564 = (qJD(4) - t730) * t659 + t758;
t723 = t729 * t742;
t780 = t824 * t732;
t748 = -pkin(2) * t723 + pkin(6) * t773 + t780;
t752 = -pkin(6) * qJDD(1) + t742 * t812 - t701;
t807 = t732 * g(3);
t761 = -0.2e1 * t731 * t774 - t807;
t600 = -(t735 * g(3) + t739 * t752) * t731 + t735 * t748 - t739 * t761;
t638 = t640 ^ 2;
t639 = t642 ^ 2;
t653 = t654 ^ 2;
t655 = t657 ^ 2;
t656 = t659 ^ 2;
t696 = t700 ^ 2;
t813 = t730 ^ 2;
t811 = pkin(4) * t734;
t808 = t731 * g(3);
t806 = qJDD(1) * pkin(1);
t805 = t654 * t733;
t804 = t654 * t737;
t803 = t728 * t742;
t802 = t730 * t734;
t801 = t730 * t738;
t601 = t739 * (t748 - t808) + t735 * (t731 * t752 + t761);
t541 = -t739 * t600 + t735 * t601;
t800 = t731 * t541;
t799 = t731 * t732;
t797 = t732 * t541;
t556 = -t695 * pkin(3) + t668 * pkin(7) - qJD(3) * t755 + t601;
t745 = (-t670 + t778) * pkin(7) + t818 * pkin(3) - t600;
t490 = t734 * t556 - t738 * t745;
t614 = t657 * pkin(4) - t659 * pkin(8);
t469 = -t727 * pkin(4) - t813 * pkin(8) + t659 * t614 + t490;
t796 = t733 * t469;
t535 = t598 + t750;
t795 = t733 * t535;
t794 = t734 * t587;
t612 = t616 + t727;
t793 = t734 * t612;
t491 = t738 * t556 + t734 * t745;
t435 = -t738 * t490 + t734 * t491;
t792 = t735 * t435;
t791 = t735 * t663;
t665 = qJDD(3) - t673;
t790 = t735 * t665;
t693 = t742 * qJ(2) + t756 + t806;
t789 = t736 * t693;
t788 = t737 * t469;
t787 = t737 * t535;
t786 = t738 * t587;
t785 = t738 * t612;
t784 = t739 * t435;
t783 = t739 * t663;
t782 = t739 * t665;
t781 = t740 * t693;
t470 = -t813 * pkin(4) + t727 * pkin(8) - t657 * t614 + t491;
t474 = t823 * pkin(8) + (t730 * t659 - t594) * pkin(4) - t587;
t421 = t737 * t470 + t733 * t474;
t772 = t736 * qJDD(1);
t771 = t740 * qJDD(1);
t769 = t734 * t598;
t768 = t736 * t616;
t767 = t736 * t673;
t766 = t738 * t598;
t765 = t740 * t616;
t764 = t740 * t673;
t762 = -pkin(4) * t738 - pkin(3);
t760 = t693 + t806;
t420 = t733 * t470 - t737 * t474;
t436 = t734 * t490 + t738 * t491;
t542 = t735 * t600 + t739 * t601;
t674 = t824 * t731 + t807;
t675 = t780 - t808;
t625 = t731 * t674 + t732 * t675;
t683 = -t736 * t711 - t740 * t712;
t710 = -t736 * t742 + t771;
t757 = -pkin(5) * t710 - t736 * g(3);
t386 = -t737 * t420 + t733 * t421;
t387 = t733 * t420 + t737 * t421;
t624 = t732 * t674 - t731 * t675;
t682 = t740 * t711 - t736 * t712;
t709 = t740 * t742 + t772;
t703 = t732 * t815;
t679 = -t736 * t703 + t732 * t771;
t753 = t740 * t703 + t732 * t772;
t741 = qJD(3) ^ 2;
t722 = t729 * qJDD(1);
t721 = t728 * qJDD(1);
t708 = t723 - t803;
t707 = t723 + t803;
t706 = t722 - t721;
t705 = t722 + t721;
t702 = t731 * t815;
t694 = -pkin(5) * t709 + t740 * g(3);
t688 = -t696 - t741;
t687 = -t696 + t741;
t686 = t695 - t741;
t685 = t710 * t799;
t684 = t709 * t799;
t680 = t740 * t702 + t731 * t772;
t678 = t736 * t702 - t731 * t771;
t677 = t740 * t705 - t736 * t707;
t676 = t736 * t705 + t740 * t707;
t672 = -t696 + t695;
t669 = t819 + 0.2e1 * t778;
t667 = t697 + 0.2e1 * t777;
t662 = -t741 - t695;
t652 = (t699 * t739 + t700 * t735) * qJD(3);
t651 = (t699 * t735 - t700 * t739) * qJD(3);
t648 = -t656 + t813;
t647 = t655 - t813;
t645 = -t656 - t813;
t643 = -t695 - t696;
t635 = t739 * t670 - t735 * t777;
t634 = t735 * t670 + t739 * t777;
t633 = -t735 * t668 - t739 * t778;
t632 = t739 * t668 - t735 * t778;
t631 = -t735 * t688 - t782;
t630 = -t735 * t687 + t825;
t629 = t739 * t686 - t790;
t628 = t739 * t688 - t790;
t627 = t739 * t687 + t828;
t626 = t735 * t686 + t782;
t622 = -t739 * t667 - t735 * t669;
t621 = -t697 * t739 + t735 * t819;
t620 = -t735 * t667 + t739 * t669;
t619 = -t697 * t735 - t739 * t819;
t618 = t739 * t662 - t828;
t617 = t735 * t662 + t825;
t615 = -t656 + t655;
t610 = -t813 - t655;
t608 = -t731 * t651 + t732 * t652;
t607 = -t639 + t653;
t606 = t638 - t653;
t605 = (-t657 * t738 + t659 * t734) * t730;
t604 = (-t657 * t734 - t659 * t738) * t730;
t603 = t740 * t625 - t789;
t602 = t736 * t625 + t781;
t597 = -t639 + t638;
t596 = -pkin(6) * t628 - t783;
t593 = -pkin(6) * t617 - t791;
t591 = -t655 - t656;
t589 = -t731 * t634 + t732 * t635;
t588 = -t731 * t632 + t732 * t633;
t586 = -t731 * t628 + t732 * t631;
t585 = -t731 * t627 + t732 * t630;
t584 = -t731 * t626 + t732 * t629;
t583 = t732 * t628 + t731 * t631;
t582 = -t639 - t653;
t581 = t738 * t647 - t793;
t580 = -t734 * t648 + t826;
t579 = t734 * t647 + t785;
t578 = t738 * t648 + t829;
t577 = -pkin(2) * t669 + pkin(6) * t631 - t791;
t576 = -t734 * t645 - t785;
t575 = t738 * t645 - t793;
t574 = -t653 - t638;
t573 = t638 + t639;
t572 = -pkin(2) * t667 + pkin(6) * t618 + t783;
t571 = -t731 * t620 + t732 * t622;
t570 = -t731 * t619 + t732 * t621;
t569 = t732 * t619 + t731 * t621;
t568 = -t650 + t749;
t563 = (qJD(4) + t730) * t659 + t758;
t562 = -t731 * t617 + t732 * t618;
t561 = t732 * t617 + t731 * t618;
t560 = -t659 * t802 - t738 * t749;
t559 = t659 * t801 - t734 * t749;
t558 = -t734 * t594 + t657 * t801;
t557 = t738 * t594 + t657 * t802;
t555 = t740 * t586 + t736 * t669;
t554 = t736 * t586 - t740 * t669;
t553 = t738 * t610 - t829;
t552 = t734 * t610 + t826;
t549 = -t642 * qJD(5) - t759;
t548 = (-t640 * t737 + t642 * t733) * t654;
t547 = (t640 * t733 + t642 * t737) * t654;
t544 = -t735 * t604 + t739 * t605;
t543 = t739 * t604 + t735 * t605;
t540 = t740 * t562 + t736 * t667;
t539 = t736 * t562 - t740 * t667;
t538 = t740 * t570 + t736 * t643;
t537 = t736 * t570 - t740 * t643;
t533 = pkin(2) * t663 + pkin(6) * t542;
t532 = -pkin(1) * t569 - pkin(2) * t619;
t531 = -pkin(7) * t575 - t786;
t529 = -t609 - t550;
t526 = (-qJD(5) - t654) * t642 - t759;
t524 = -pkin(6) * t619 - t541;
t523 = -t735 * t579 + t739 * t581;
t522 = -t735 * t578 + t739 * t580;
t521 = t739 * t579 + t735 * t581;
t520 = t739 * t578 + t735 * t580;
t519 = t737 * t550 - t642 * t805;
t518 = -t733 * t550 - t642 * t804;
t517 = -t733 * t549 + t640 * t804;
t516 = -t737 * t549 - t640 * t805;
t515 = -t735 * t575 + t739 * t576;
t514 = t739 * t575 + t735 * t576;
t513 = -pkin(1) * t583 - pkin(2) * t628 + t601;
t512 = -pkin(7) * t552 - t794;
t511 = t738 * t548 + t734 * t750;
t510 = t734 * t548 - t738 * t750;
t509 = t737 * t606 - t795;
t508 = -t733 * t607 + t827;
t507 = -t733 * t606 - t787;
t506 = -t737 * t607 - t830;
t505 = -pkin(2) * t643 + pkin(6) * t621 + t542;
t504 = -t564 * t738 - t734 * t568;
t503 = -t738 * t563 + t734 * t823;
t502 = -t564 * t734 + t738 * t568;
t501 = -t734 * t563 - t738 * t823;
t500 = -pkin(1) * t561 - pkin(2) * t617 + t600;
t499 = -t735 * t559 + t739 * t560;
t498 = -t735 * t557 + t739 * t558;
t497 = t739 * t559 + t735 * t560;
t496 = t739 * t557 + t735 * t558;
t495 = -t735 * t552 + t739 * t553;
t494 = t739 * t552 + t735 * t553;
t493 = -t733 * t582 - t787;
t492 = t737 * t582 - t795;
t489 = t737 * t574 - t830;
t488 = t733 * t574 + t827;
t486 = -qJ(2) * t583 - t731 * t577 + t732 * t596;
t485 = t738 * t519 + t769;
t484 = t738 * t517 - t769;
t483 = t734 * t519 - t766;
t482 = t734 * t517 + t766;
t481 = -t731 * t543 + t732 * t544;
t480 = t732 * t542 - t800;
t479 = t731 * t542 + t797;
t478 = pkin(3) * t823 + pkin(7) * t576 - t794;
t477 = -qJ(2) * t561 - t731 * t572 + t732 * t593;
t476 = t740 * t480 - t736 * t663;
t475 = t736 * t480 + t740 * t663;
t471 = -pkin(3) * t563 + pkin(7) * t553 + t786;
t467 = -t525 * t737 - t733 * t529;
t466 = t737 * t526 - t733 * t528;
t465 = -t525 * t733 + t737 * t529;
t464 = -t733 * t526 - t737 * t528;
t463 = -t731 * t521 + t732 * t523;
t462 = -t731 * t520 + t732 * t522;
t461 = -t731 * t514 + t732 * t515;
t460 = t732 * t514 + t731 * t515;
t459 = t738 * t509 - t734 * t525;
t458 = t738 * t508 - t734 * t529;
t457 = t734 * t509 + t738 * t525;
t456 = t734 * t508 + t738 * t529;
t455 = -pkin(1) * t479 - pkin(2) * t541;
t454 = -t735 * t510 + t739 * t511;
t453 = t739 * t510 + t735 * t511;
t452 = t738 * t493 + t528 * t734;
t451 = t734 * t493 - t528 * t738;
t450 = t738 * t489 - t734 * t526;
t449 = t734 * t489 + t738 * t526;
t448 = t738 * t466 - t734 * t597;
t447 = t734 * t466 + t738 * t597;
t446 = -t735 * t502 + t739 * t504;
t445 = -t735 * t501 + t739 * t503;
t444 = t739 * t502 + t735 * t504;
t443 = t739 * t501 + t735 * t503;
t442 = -t731 * t497 + t732 * t499;
t441 = -t731 * t496 + t732 * t498;
t440 = t738 * t467 - t734 * t573;
t439 = t734 * t467 + t738 * t573;
t438 = -t731 * t494 + t732 * t495;
t437 = t732 * t494 + t731 * t495;
t434 = t740 * t461 - t736 * t823;
t433 = t736 * t461 + t740 * t823;
t432 = -qJ(2) * t569 - t731 * t505 + t732 * t524;
t431 = -t735 * t483 + t739 * t485;
t430 = -t735 * t482 + t739 * t484;
t429 = t739 * t483 + t735 * t485;
t428 = t739 * t482 + t735 * t484;
t427 = -pkin(6) * t797 - qJ(2) * t479 - t731 * t533;
t426 = -pkin(8) * t492 + t788;
t425 = pkin(3) * t587 + pkin(7) * t436;
t424 = -pkin(8) * t488 + t796;
t423 = t740 * t438 + t736 * t563;
t422 = t736 * t438 - t740 * t563;
t419 = -pkin(6) * t514 - t735 * t478 + t739 * t531;
t418 = -pkin(7) * t502 - t435;
t417 = -pkin(6) * t494 - t735 * t471 + t739 * t512;
t416 = pkin(2) * t823 + pkin(6) * t515 + t739 * t478 + t735 * t531;
t415 = -pkin(3) * t591 + pkin(7) * t504 + t436;
t414 = -t735 * t457 + t739 * t459;
t413 = -t735 * t456 + t739 * t458;
t412 = t739 * t457 + t735 * t459;
t411 = t739 * t456 + t735 * t458;
t410 = -t731 * t453 + t732 * t454;
t409 = -t735 * t451 + t739 * t452;
t408 = t739 * t451 + t735 * t452;
t407 = -pkin(2) * t563 + pkin(6) * t495 + t739 * t471 + t735 * t512;
t406 = -t735 * t449 + t739 * t450;
t405 = t739 * t449 + t735 * t450;
t404 = -pkin(4) * t492 + t421;
t403 = -t735 * t447 + t739 * t448;
t402 = t739 * t447 + t735 * t448;
t401 = -pkin(4) * t488 + t420;
t400 = -t731 * t444 + t732 * t446;
t399 = -t731 * t443 + t732 * t445;
t398 = t732 * t444 + t731 * t446;
t397 = -pkin(1) * t460 - pkin(2) * t514 - pkin(3) * t575 + t491;
t396 = -t735 * t439 + t739 * t440;
t395 = t739 * t439 + t735 * t440;
t394 = t740 * t400 + t736 * t591;
t393 = t736 * t400 - t740 * t591;
t392 = t739 * t436 - t792;
t391 = t735 * t436 + t784;
t390 = -t731 * t429 + t732 * t431;
t389 = -t731 * t428 + t732 * t430;
t388 = -pkin(1) * t437 - pkin(2) * t494 - pkin(3) * t552 + t490;
t385 = -pkin(1) * t398 - pkin(2) * t444 - pkin(3) * t502;
t384 = -t731 * t412 + t732 * t414;
t383 = -t731 * t411 + t732 * t413;
t382 = t738 * t387 + t734 * t469;
t381 = t734 * t387 - t738 * t469;
t380 = -pkin(8) * t465 - t386;
t379 = -t731 * t408 + t732 * t409;
t378 = t732 * t408 + t731 * t409;
t377 = -t731 * t405 + t732 * t406;
t376 = t732 * t405 + t731 * t406;
t375 = -t731 * t402 + t732 * t403;
t374 = -qJ(2) * t460 - t731 * t416 + t732 * t419;
t373 = -pkin(7) * t451 - t734 * t404 + t738 * t426;
t372 = -pkin(7) * t449 - t734 * t401 + t738 * t424;
t371 = -t731 * t395 + t732 * t396;
t370 = t732 * t395 + t731 * t396;
t369 = -pkin(6) * t444 - t735 * t415 + t739 * t418;
t368 = t740 * t379 + t736 * t492;
t367 = t736 * t379 - t740 * t492;
t366 = -t731 * t391 + t732 * t392;
t365 = t732 * t391 + t731 * t392;
t364 = t740 * t377 + t736 * t488;
t363 = t736 * t377 - t740 * t488;
t362 = -pkin(2) * t591 + pkin(6) * t446 + t739 * t415 + t735 * t418;
t361 = -pkin(6) * t391 - pkin(7) * t784 - t735 * t425;
t360 = t740 * t366 - t736 * t587;
t359 = t736 * t366 + t740 * t587;
t358 = -qJ(2) * t437 - t731 * t407 + t732 * t417;
t357 = -pkin(3) * t492 + pkin(7) * t452 + t738 * t404 + t734 * t426;
t356 = -pkin(3) * t488 + pkin(7) * t450 + t738 * t401 + t734 * t424;
t355 = pkin(2) * t587 + pkin(6) * t392 - pkin(7) * t792 + t739 * t425;
t354 = t740 * t371 + t736 * t465;
t353 = t736 * t371 - t740 * t465;
t352 = -pkin(7) * t439 + t738 * t380 + t465 * t811;
t351 = pkin(7) * t440 + t734 * t380 + t465 * t762;
t350 = -t735 * t381 + t739 * t382;
t349 = t739 * t381 + t735 * t382;
t348 = -pkin(1) * t365 - pkin(2) * t391 - pkin(3) * t435;
t347 = -pkin(1) * t378 - pkin(2) * t408 - pkin(3) * t451 + pkin(4) * t528 - pkin(8) * t493 - t796;
t346 = -pkin(1) * t376 - pkin(2) * t405 - pkin(3) * t449 - pkin(4) * t526 - pkin(8) * t489 + t788;
t345 = -pkin(7) * t381 + (-pkin(8) * t738 + t811) * t386;
t344 = -pkin(6) * t408 - t735 * t357 + t739 * t373;
t343 = -qJ(2) * t398 - t731 * t362 + t732 * t369;
t342 = -pkin(6) * t405 - t735 * t356 + t739 * t372;
t341 = -pkin(1) * t370 - pkin(2) * t395 - pkin(3) * t439 - pkin(4) * t573 - pkin(8) * t467 - t387;
t340 = -pkin(2) * t492 + pkin(6) * t409 + t739 * t357 + t735 * t373;
t339 = -pkin(2) * t488 + pkin(6) * t406 + t739 * t356 + t735 * t372;
t338 = pkin(7) * t382 + (-pkin(8) * t734 + t762) * t386;
t337 = -qJ(2) * t365 - t731 * t355 + t732 * t361;
t336 = -pkin(6) * t395 - t735 * t351 + t739 * t352;
t335 = -t731 * t349 + t732 * t350;
t334 = t732 * t349 + t731 * t350;
t333 = -pkin(2) * t465 + pkin(6) * t396 + t739 * t351 + t735 * t352;
t332 = t740 * t335 + t736 * t386;
t331 = t736 * t335 - t740 * t386;
t330 = -qJ(2) * t378 - t731 * t340 + t732 * t344;
t329 = -qJ(2) * t376 - t731 * t339 + t732 * t342;
t328 = -pkin(6) * t349 - t735 * t338 + t739 * t345;
t327 = -pkin(1) * t334 - pkin(2) * t349 - pkin(3) * t381 + pkin(4) * t469 - pkin(8) * t387;
t326 = -pkin(2) * t386 + pkin(6) * t350 + t739 * t338 + t735 * t345;
t325 = -qJ(2) * t370 - t731 * t333 + t732 * t336;
t324 = -qJ(2) * t334 - t731 * t326 + t732 * t328;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t709, -t710, 0, t683, 0, 0, 0, 0, 0, 0, -t753, t680, t677, t603, 0, 0, 0, 0, 0, 0, t540, t555, t538, t476, 0, 0, 0, 0, 0, 0, t423, t434, t394, t360, 0, 0, 0, 0, 0, 0, t364, t368, t354, t332; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t710, -t709, 0, t682, 0, 0, 0, 0, 0, 0, t679, t678, t676, t602, 0, 0, 0, 0, 0, 0, t539, t554, t537, t475, 0, 0, 0, 0, 0, 0, t422, t433, t393, t359, 0, 0, 0, 0, 0, 0, t363, t367, t353, t331; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t624, 0, 0, 0, 0, 0, 0, t561, t583, t569, t479, 0, 0, 0, 0, 0, 0, t437, t460, t398, t365, 0, 0, 0, 0, 0, 0, t376, t378, t370, t334; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t710, 0, -t709, 0, t757, -t694, -t682, -pkin(5) * t682, t685, t740 * t706 - t736 * t708, t680, -t685, t753, 0, -pkin(5) * t679 - t736 * t674 - t731 * t781, -pkin(5) * t678 - t736 * t675 - t732 * t781, -pkin(5) * t676 + t740 * t624, -pkin(5) * t602 - (pkin(1) * t736 - qJ(2) * t740) * t624, t740 * t589 - t767, t740 * t571 - t736 * t672, t740 * t585 + t736 * t819, t740 * t588 + t767, t740 * t584 - t736 * t697, t736 * qJDD(3) + t740 * t608, -pkin(5) * t539 + t740 * t477 - t736 * t500, -pkin(5) * t554 + t740 * t486 - t736 * t513, -pkin(5) * t537 + t740 * t432 - t736 * t532, -pkin(5) * t475 + t740 * t427 - t736 * t455, t740 * t442 + t768, t740 * t399 - t736 * t615, t740 * t462 - t736 * t568, t740 * t441 - t768, t740 * t463 - t736 * t564, t740 * t481 + t736 * t727, -pkin(5) * t422 + t740 * t358 - t736 * t388, -pkin(5) * t433 + t740 * t374 - t736 * t397, -pkin(5) * t393 + t740 * t343 - t736 * t385, -pkin(5) * t359 + t740 * t337 - t736 * t348, t740 * t390 - t736 * t518, t740 * t375 - t736 * t464, t740 * t383 - t736 * t506, t740 * t389 - t736 * t516, t740 * t384 - t736 * t507, t740 * t410 - t736 * t547, -pkin(5) * t363 + t740 * t329 - t736 * t346, -pkin(5) * t367 + t740 * t330 - t736 * t347, -pkin(5) * t353 + t740 * t325 - t736 * t341, -pkin(5) * t331 + t740 * t324 - t736 * t327; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t709, 0, t710, 0, t694, t757, t683, pkin(5) * t683, t684, t736 * t706 + t740 * t708, t678, -t684, -t679, 0, -pkin(5) * t753 + t740 * t674 - t731 * t789, pkin(5) * t680 + t740 * t675 - t732 * t789, pkin(5) * t677 + t736 * t624, pkin(5) * t603 - (-pkin(1) * t740 - qJ(2) * t736) * t624, t736 * t589 + t764, t736 * t571 + t740 * t672, t736 * t585 - t740 * t819, t736 * t588 - t764, t736 * t584 + t740 * t697, -t740 * qJDD(3) + t736 * t608, pkin(5) * t540 + t736 * t477 + t740 * t500, pkin(5) * t555 + t736 * t486 + t740 * t513, pkin(5) * t538 + t736 * t432 + t740 * t532, pkin(5) * t476 + t736 * t427 + t740 * t455, t736 * t442 - t765, t736 * t399 + t740 * t615, t736 * t462 + t740 * t568, t736 * t441 + t765, t736 * t463 + t740 * t564, t736 * t481 - t740 * t727, pkin(5) * t423 + t736 * t358 + t740 * t388, pkin(5) * t434 + t736 * t374 + t740 * t397, pkin(5) * t394 + t736 * t343 + t740 * t385, pkin(5) * t360 + t736 * t337 + t740 * t348, t736 * t390 + t740 * t518, t736 * t375 + t740 * t464, t736 * t383 + t740 * t506, t736 * t389 + t740 * t516, t736 * t384 + t740 * t507, t736 * t410 + t740 * t547, pkin(5) * t364 + t736 * t329 + t740 * t346, pkin(5) * t368 + t736 * t330 + t740 * t347, pkin(5) * t354 + t736 * t325 + t740 * t341, pkin(5) * t332 + t736 * t324 + t740 * t327; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t711, t712, 0, 0, t721, 0.2e1 * t731 * t773, 0, t722, 0, 0, -qJ(2) * t703 + t732 * t760, qJ(2) * t702 - t731 * t760, pkin(1) * t707 + qJ(2) * t705 + t625, pkin(1) * t693 + qJ(2) * t625, t732 * t634 + t731 * t635, t732 * t620 + t731 * t622, t732 * t627 + t731 * t630, t732 * t632 + t731 * t633, t732 * t626 + t731 * t629, t732 * t651 + t731 * t652, -pkin(1) * t667 + qJ(2) * t562 + t732 * t572 + t731 * t593, -pkin(1) * t669 + qJ(2) * t586 + t732 * t577 + t731 * t596, -pkin(1) * t643 + qJ(2) * t570 + t732 * t505 + t731 * t524, pkin(1) * t663 - pkin(6) * t800 + qJ(2) * t480 + t732 * t533, t732 * t497 + t731 * t499, t732 * t443 + t731 * t445, t732 * t520 + t731 * t522, t732 * t496 + t731 * t498, t732 * t521 + t731 * t523, t732 * t543 + t731 * t544, -pkin(1) * t563 + qJ(2) * t438 + t732 * t407 + t731 * t417, pkin(1) * t823 + qJ(2) * t461 + t732 * t416 + t731 * t419, -pkin(1) * t591 + qJ(2) * t400 + t732 * t362 + t731 * t369, pkin(1) * t587 + qJ(2) * t366 + t732 * t355 + t731 * t361, t732 * t429 + t731 * t431, t732 * t402 + t731 * t403, t732 * t411 + t731 * t413, t732 * t428 + t731 * t430, t732 * t412 + t731 * t414, t732 * t453 + t731 * t454, -pkin(1) * t488 + qJ(2) * t377 + t732 * t339 + t731 * t342, -pkin(1) * t492 + qJ(2) * t379 + t732 * t340 + t731 * t344, -pkin(1) * t465 + qJ(2) * t371 + t732 * t333 + t731 * t336, -pkin(1) * t386 + qJ(2) * t335 + t732 * t326 + t731 * t328;];
tauB_reg = t1;
