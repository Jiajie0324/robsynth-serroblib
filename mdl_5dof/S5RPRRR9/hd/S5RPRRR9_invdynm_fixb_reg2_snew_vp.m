% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRRR9
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:08
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRRR9_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR9_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR9_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR9_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR9_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR9_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:08:29
% EndTime: 2019-12-31 19:08:47
% DurationCPUTime: 18.75s
% Computational Cost: add. (144686->697), mult. (351792->987), div. (0->0), fcn. (273051->10), ass. (0->485)
t1261 = sin(qJ(5));
t1260 = cos(pkin(9));
t1263 = sin(qJ(3));
t1267 = cos(qJ(3));
t1259 = sin(pkin(9));
t1351 = qJD(1) * t1259;
t1227 = t1267 * t1260 * qJD(1) - t1263 * t1351;
t1283 = t1259 * t1267 + t1260 * t1263;
t1228 = t1283 * qJD(1);
t1262 = sin(qJ(4));
t1266 = cos(qJ(4));
t1193 = t1262 * t1227 + t1266 * t1228;
t1250 = t1259 * qJDD(1);
t1252 = t1260 * qJDD(1);
t1225 = t1263 * t1250 - t1267 * t1252;
t1346 = t1228 * qJD(3);
t1202 = -t1225 - t1346;
t1220 = t1227 * qJD(3);
t1226 = t1283 * qJDD(1);
t1204 = t1220 + t1226;
t1302 = -t1266 * t1202 + t1262 * t1204;
t1123 = -t1193 * qJD(4) - t1302;
t1121 = qJDD(5) - t1123;
t1265 = cos(qJ(5));
t1326 = qJD(3) + qJD(4);
t1170 = t1261 * t1193 - t1265 * t1326;
t1172 = t1265 * t1193 + t1261 * t1326;
t1127 = t1172 * t1170;
t1370 = t1121 - t1127;
t1377 = t1261 * t1370;
t1191 = -t1266 * t1227 + t1262 * t1228;
t1147 = t1193 * t1191;
t1256 = qJDD(3) + qJDD(4);
t1369 = -t1147 + t1256;
t1376 = t1262 * t1369;
t1207 = t1227 * t1228;
t1368 = qJDD(3) + t1207;
t1375 = t1263 * t1368;
t1374 = t1265 * t1370;
t1373 = t1266 * t1369;
t1372 = t1267 * t1368;
t1124 = -t1191 * qJD(4) + t1262 * t1202 + t1266 * t1204;
t1181 = t1326 * t1191;
t1371 = t1124 - t1181;
t1270 = qJD(1) ^ 2;
t1264 = sin(qJ(1));
t1268 = cos(qJ(1));
t1239 = t1264 * g(1) - t1268 * g(2);
t1294 = -qJDD(2) + t1239;
t1257 = t1259 ^ 2;
t1258 = t1260 ^ 2;
t1325 = t1257 + t1258;
t1197 = (t1325 * pkin(6) + qJ(2)) * t1270 + (t1260 * pkin(2) + pkin(1)) * qJDD(1) + t1294;
t1223 = t1227 ^ 2;
t1296 = qJD(3) * pkin(3) - t1228 * pkin(7);
t1115 = t1202 * pkin(3) + t1223 * pkin(7) - t1228 * t1296 + t1197;
t1322 = t1326 ^ 2;
t1240 = t1268 * g(1) + t1264 * g(2);
t1229 = -t1270 * pkin(1) + qJDD(1) * qJ(2) - t1240;
t1339 = t1260 * t1270;
t1356 = pkin(6) * qJDD(1);
t1357 = t1260 * g(3);
t1177 = -t1357 - 0.2e1 * qJD(2) * t1351 + (pkin(2) * t1339 - t1229 - t1356) * t1259;
t1253 = t1258 * t1270;
t1304 = 0.2e1 * qJD(1) * qJD(2) + t1229;
t1358 = t1259 * g(3);
t1184 = -pkin(2) * t1253 - t1358 + (t1304 + t1356) * t1260;
t1130 = t1263 * t1177 + t1267 * t1184;
t1079 = -t1223 * pkin(3) + t1202 * pkin(7) - qJD(3) * t1296 + t1130;
t1285 = t1267 * t1177 - t1263 * t1184;
t1273 = (-t1204 + t1220) * pkin(7) + t1368 * pkin(3) + t1285;
t1015 = t1266 * t1079 + t1262 * t1273;
t1145 = t1191 * pkin(4) - t1193 * pkin(8);
t993 = -t1322 * pkin(4) + t1256 * pkin(8) - t1191 * t1145 + t1015;
t1305 = t1326 * t1193;
t997 = -t1371 * pkin(8) + (-t1123 + t1305) * pkin(4) - t1115;
t934 = t1261 * t993 - t1265 * t997;
t935 = t1261 * t997 + t1265 * t993;
t897 = t1261 * t934 + t1265 * t935;
t1365 = t1270 * t1325;
t1168 = t1170 ^ 2;
t1169 = t1172 ^ 2;
t1188 = qJD(5) + t1191;
t1187 = t1188 ^ 2;
t1189 = t1191 ^ 2;
t1190 = t1193 ^ 2;
t1224 = t1228 ^ 2;
t1065 = t1263 * t1130 + t1267 * t1285;
t1363 = pkin(2) * t1065;
t1150 = -t1225 * t1263 - t1267 * t1226;
t1362 = pkin(2) * t1150;
t1361 = pkin(4) * t1262;
t1355 = qJDD(1) * pkin(1);
t1014 = t1262 * t1079 - t1266 * t1273;
t992 = -t1256 * pkin(4) - t1322 * pkin(8) + t1193 * t1145 + t1014;
t1354 = -pkin(4) * t992 + pkin(8) * t897;
t989 = t1261 * t992;
t948 = -t1266 * t1014 + t1262 * t1015;
t1353 = t1263 * t948;
t990 = t1265 * t992;
t1352 = t1267 * t948;
t1350 = t1188 * t1261;
t1349 = t1188 * t1265;
t1348 = t1227 * t1263;
t1347 = t1227 * t1267;
t1345 = t1228 * t1263;
t1344 = t1228 * t1267;
t1343 = t1257 * t1270;
t1342 = t1259 * t1065;
t1341 = t1259 * t1260;
t1340 = t1260 * t1065;
t1063 = t1121 + t1127;
t1338 = t1261 * t1063;
t1337 = t1262 * t1115;
t1143 = t1147 + t1256;
t1336 = t1262 * t1143;
t1335 = t1263 * t1197;
t1199 = qJDD(3) - t1207;
t1334 = t1263 * t1199;
t1221 = t1270 * qJ(2) + t1294 + t1355;
t1333 = t1264 * t1221;
t1332 = t1265 * t1063;
t1331 = t1266 * t1115;
t1330 = t1266 * t1143;
t1329 = t1267 * t1197;
t1328 = t1267 * t1199;
t1327 = t1268 * t1221;
t1324 = t1264 * qJDD(1);
t1323 = t1268 * qJDD(1);
t888 = t1262 * t897 - t1266 * t992;
t1321 = pkin(3) * t888 + t1354;
t1319 = -pkin(4) * t1266 - pkin(3);
t1108 = -t1169 - t1187;
t1018 = -t1261 * t1108 - t1332;
t1286 = -t1265 * t1124 - t1261 * t1256;
t1058 = (qJD(5) + t1188) * t1170 + t1286;
t1318 = pkin(4) * t1058 + pkin(8) * t1018 + t989;
t1099 = -t1187 - t1168;
t1013 = t1265 * t1099 - t1377;
t1139 = t1188 * t1172;
t1303 = -t1261 * t1124 + t1265 * t1256;
t1279 = t1172 * qJD(5) - t1303;
t1054 = -t1139 - t1279;
t1317 = pkin(4) * t1054 + pkin(8) * t1013 - t990;
t949 = t1262 * t1014 + t1266 * t1015;
t903 = t1263 * t949 + t1352;
t947 = pkin(3) * t948;
t1316 = pkin(2) * t903 + t947;
t1315 = t1262 * t1127;
t1314 = t1264 * t1147;
t1313 = t1264 * t1207;
t1312 = t1266 * t1127;
t1311 = t1268 * t1147;
t1310 = t1268 * t1207;
t1175 = -t1190 - t1322;
t1101 = t1266 * t1175 - t1336;
t1309 = pkin(3) * t1101 - t1015;
t1088 = qJD(3) * t1193 - t1302;
t1091 = t1124 + t1181;
t1028 = t1262 * t1088 - t1266 * t1091;
t1026 = pkin(3) * t1028;
t1030 = t1266 * t1088 + t1262 * t1091;
t960 = t1267 * t1028 + t1263 * t1030;
t1308 = pkin(2) * t960 + t1026;
t1307 = t1259 * t1252;
t1306 = t1221 + t1355;
t1066 = t1267 * t1130 - t1263 * t1285;
t1208 = t1304 * t1259 + t1357;
t1209 = t1304 * t1260 - t1358;
t1156 = t1259 * t1208 + t1260 * t1209;
t1301 = -t1264 * t1239 - t1268 * t1240;
t1098 = t1168 + t1169;
t1055 = (-qJD(5) + t1188) * t1172 + t1303;
t1074 = -t1170 * qJD(5) - t1286;
t1138 = t1188 * t1170;
t1057 = t1074 + t1138;
t988 = t1265 * t1055 + t1261 * t1057;
t1300 = pkin(4) * t1098 + pkin(8) * t988 + t897;
t969 = t1262 * t1018 + t1266 * t1058;
t1299 = pkin(3) * t969 + t1318;
t966 = t1262 * t1013 + t1266 * t1054;
t1298 = pkin(3) * t966 + t1317;
t1269 = qJD(3) ^ 2;
t1216 = -t1224 - t1269;
t1159 = t1267 * t1216 - t1334;
t1297 = pkin(2) * t1159 - t1130;
t1238 = -t1264 * t1270 + t1323;
t1295 = -pkin(5) * t1238 - t1264 * g(3);
t1293 = t1262 * t1181;
t1292 = t1262 * t1305;
t1291 = t1266 * t1181;
t1290 = t1266 * t1305;
t953 = t1266 * t1098 + t1262 * t988;
t1289 = pkin(3) * t953 + t1300;
t1141 = -t1322 - t1189;
t1077 = t1262 * t1141 + t1373;
t1288 = pkin(3) * t1077 - t1014;
t889 = t1262 * t992 + t1266 * t897;
t860 = t1263 * t889 + t1267 * t888;
t1287 = pkin(2) * t860 + t1321;
t896 = t1261 * t935 - t1265 * t934;
t1155 = t1260 * t1208 - t1259 * t1209;
t1284 = t1268 * t1239 - t1264 * t1240;
t1237 = t1268 * t1270 + t1324;
t1102 = -t1262 * t1175 - t1330;
t1040 = t1267 * t1101 + t1263 * t1102;
t1282 = pkin(2) * t1040 + t1309;
t967 = t1266 * t1013 - t1262 * t1054;
t916 = t1263 * t967 + t1267 * t966;
t1281 = pkin(2) * t916 + t1298;
t970 = t1266 * t1018 - t1262 * t1058;
t919 = t1263 * t970 + t1267 * t969;
t1280 = pkin(2) * t919 + t1299;
t1231 = t1260 * t1365;
t1278 = -t1264 * t1231 + t1260 * t1323;
t1277 = t1268 * t1231 + t1260 * t1324;
t954 = -t1262 * t1098 + t1266 * t988;
t905 = t1263 * t954 + t1267 * t953;
t1276 = pkin(2) * t905 + t1289;
t1078 = t1266 * t1141 - t1376;
t1019 = t1267 * t1077 + t1263 * t1078;
t1275 = pkin(2) * t1019 + t1288;
t1196 = -t1269 - t1223;
t1148 = t1263 * t1196 + t1372;
t1274 = pkin(2) * t1148 + t1285;
t1251 = t1258 * qJDD(1);
t1249 = t1257 * qJDD(1);
t1242 = t1259 * t1339;
t1241 = 0.2e1 * t1307;
t1236 = -t1253 + t1343;
t1235 = t1253 + t1343;
t1234 = t1251 - t1249;
t1233 = t1251 + t1249;
t1230 = t1259 * t1365;
t1222 = -pkin(5) * t1237 + t1268 * g(3);
t1215 = -t1224 + t1269;
t1214 = t1223 - t1269;
t1213 = t1238 * t1341;
t1212 = t1237 * t1341;
t1211 = t1268 * t1230 + t1259 * t1324;
t1210 = t1264 * t1230 - t1259 * t1323;
t1206 = t1224 - t1223;
t1203 = 0.2e1 * t1220 + t1226;
t1201 = t1225 + 0.2e1 * t1346;
t1186 = (t1345 + t1347) * qJD(3);
t1185 = (-t1344 + t1348) * qJD(3);
t1183 = -qJ(2) * t1231 + t1306 * t1260;
t1182 = qJ(2) * t1230 - t1306 * t1259;
t1179 = -t1190 + t1322;
t1178 = t1189 - t1322;
t1173 = -t1223 - t1224;
t1166 = -qJD(3) * t1345 + t1267 * t1204;
t1165 = qJD(3) * t1344 + t1263 * t1204;
t1164 = -qJD(3) * t1347 - t1263 * t1202;
t1163 = -qJD(3) * t1348 + t1267 * t1202;
t1162 = -t1263 * t1216 - t1328;
t1161 = -t1263 * t1215 + t1372;
t1160 = t1267 * t1214 - t1334;
t1158 = t1267 * t1215 + t1375;
t1157 = t1263 * t1214 + t1328;
t1153 = -t1267 * t1201 - t1263 * t1203;
t1152 = -t1225 * t1267 + t1263 * t1226;
t1151 = -t1263 * t1201 + t1267 * t1203;
t1149 = t1267 * t1196 - t1375;
t1146 = t1190 - t1189;
t1140 = pkin(1) * t1221 + qJ(2) * t1156;
t1137 = -t1259 * t1185 + t1260 * t1186;
t1136 = t1260 * t1185 + t1259 * t1186;
t1135 = -t1169 + t1187;
t1134 = t1168 - t1187;
t1133 = -t1291 + t1292;
t1132 = -t1293 - t1290;
t1131 = pkin(1) * t1235 + qJ(2) * t1233 + t1156;
t1126 = t1169 - t1168;
t1125 = -pkin(6) * t1159 - t1329;
t1122 = -pkin(6) * t1148 - t1335;
t1120 = -t1189 - t1190;
t1119 = -t1259 * t1165 + t1260 * t1166;
t1118 = -t1259 * t1163 + t1260 * t1164;
t1117 = t1260 * t1165 + t1259 * t1166;
t1116 = t1260 * t1163 + t1259 * t1164;
t1114 = -t1259 * t1159 + t1260 * t1162;
t1113 = -t1259 * t1158 + t1260 * t1161;
t1112 = -t1259 * t1157 + t1260 * t1160;
t1111 = t1260 * t1159 + t1259 * t1162;
t1110 = t1260 * t1158 + t1259 * t1161;
t1109 = t1260 * t1157 + t1259 * t1160;
t1107 = t1266 * t1178 - t1336;
t1106 = -t1262 * t1179 + t1373;
t1105 = t1262 * t1178 + t1330;
t1104 = t1266 * t1179 + t1376;
t1103 = -pkin(2) * t1203 + pkin(6) * t1162 - t1335;
t1096 = -pkin(2) * t1201 + pkin(6) * t1149 + t1329;
t1095 = -t1259 * t1151 + t1260 * t1153;
t1094 = -t1259 * t1150 + t1260 * t1152;
t1093 = t1260 * t1151 + t1259 * t1153;
t1092 = t1260 * t1150 + t1259 * t1152;
t1086 = (0.2e1 * qJD(4) + qJD(3)) * t1193 + t1302;
t1085 = -t1259 * t1148 + t1260 * t1149;
t1084 = t1260 * t1148 + t1259 * t1149;
t1083 = t1266 * t1124 - t1292;
t1082 = t1262 * t1124 + t1290;
t1081 = -t1262 * t1123 + t1291;
t1080 = t1266 * t1123 + t1293;
t1072 = (-t1170 * t1265 + t1172 * t1261) * t1188;
t1071 = (-t1170 * t1261 - t1172 * t1265) * t1188;
t1068 = -t1263 * t1132 + t1267 * t1133;
t1067 = t1267 * t1132 + t1263 * t1133;
t1061 = pkin(2) * t1197 + pkin(6) * t1066;
t1060 = -pkin(1) * t1092 - t1362;
t1059 = -pkin(7) * t1101 - t1331;
t1056 = t1074 - t1138;
t1053 = -t1139 + t1279;
t1050 = -pkin(6) * t1150 - t1065;
t1049 = -t1263 * t1105 + t1267 * t1107;
t1048 = -t1263 * t1104 + t1267 * t1106;
t1047 = t1267 * t1105 + t1263 * t1107;
t1046 = t1267 * t1104 + t1263 * t1106;
t1045 = t1265 * t1074 - t1172 * t1350;
t1044 = t1261 * t1074 + t1172 * t1349;
t1043 = t1170 * t1349 + t1261 * t1279;
t1042 = -t1170 * t1350 + t1265 * t1279;
t1041 = -t1263 * t1101 + t1267 * t1102;
t1039 = -pkin(1) * t1111 - t1297;
t1038 = -pkin(7) * t1077 - t1337;
t1037 = t1266 * t1072 + t1262 * t1121;
t1036 = t1262 * t1072 - t1266 * t1121;
t1035 = t1265 * t1134 - t1338;
t1034 = -t1261 * t1135 + t1374;
t1033 = t1261 * t1134 + t1332;
t1032 = t1265 * t1135 + t1377;
t1031 = -pkin(2) * t1173 + pkin(6) * t1152 + t1066;
t1029 = -t1266 * t1086 - t1262 * t1371;
t1027 = -t1262 * t1086 + t1266 * t1371;
t1025 = -pkin(1) * t1084 - t1274;
t1024 = -t1263 * t1082 + t1267 * t1083;
t1023 = -t1263 * t1080 + t1267 * t1081;
t1022 = t1267 * t1082 + t1263 * t1083;
t1021 = t1267 * t1080 + t1263 * t1081;
t1020 = -t1263 * t1077 + t1267 * t1078;
t1017 = t1265 * t1108 - t1338;
t1012 = t1261 * t1099 + t1374;
t1009 = -qJ(2) * t1111 - t1259 * t1103 + t1260 * t1125;
t1008 = t1266 * t1045 + t1315;
t1007 = t1266 * t1043 - t1315;
t1006 = t1262 * t1045 - t1312;
t1005 = t1262 * t1043 + t1312;
t1004 = -t1259 * t1067 + t1260 * t1068;
t1003 = t1260 * t1067 + t1259 * t1068;
t1002 = t1260 * t1066 - t1342;
t1001 = t1259 * t1066 + t1340;
t1000 = -pkin(1) * t1203 + qJ(2) * t1114 + t1260 * t1103 + t1259 * t1125;
t999 = -pkin(3) * t1371 + pkin(7) * t1102 - t1337;
t998 = -qJ(2) * t1084 - t1259 * t1096 + t1260 * t1122;
t995 = -pkin(3) * t1086 + pkin(7) * t1078 + t1331;
t994 = -pkin(1) * t1201 + qJ(2) * t1085 + t1260 * t1096 + t1259 * t1122;
t987 = t1265 * t1054 - t1261 * t1056;
t986 = t1261 * t1055 - t1265 * t1057;
t985 = t1261 * t1054 + t1265 * t1056;
t983 = -t1259 * t1047 + t1260 * t1049;
t982 = -t1259 * t1046 + t1260 * t1048;
t981 = t1260 * t1047 + t1259 * t1049;
t980 = t1260 * t1046 + t1259 * t1048;
t979 = -t1259 * t1040 + t1260 * t1041;
t978 = t1260 * t1040 + t1259 * t1041;
t977 = t1266 * t1035 - t1262 * t1053;
t976 = t1266 * t1034 + t1262 * t1057;
t975 = t1262 * t1035 + t1266 * t1053;
t974 = t1262 * t1034 - t1266 * t1057;
t973 = -pkin(1) * t1001 - t1363;
t972 = -t1263 * t1036 + t1267 * t1037;
t971 = t1267 * t1036 + t1263 * t1037;
t964 = t1262 * t1126 + t1266 * t987;
t963 = -t1266 * t1126 + t1262 * t987;
t962 = -t1263 * t1028 + t1267 * t1030;
t961 = -t1263 * t1027 + t1267 * t1029;
t959 = t1267 * t1027 + t1263 * t1029;
t958 = -t1259 * t1022 + t1260 * t1024;
t957 = -t1259 * t1021 + t1260 * t1023;
t956 = t1260 * t1022 + t1259 * t1024;
t955 = t1260 * t1021 + t1259 * t1023;
t951 = -t1259 * t1019 + t1260 * t1020;
t950 = t1260 * t1019 + t1259 * t1020;
t946 = -qJ(2) * t1092 - t1259 * t1031 + t1260 * t1050;
t945 = -t1263 * t1006 + t1267 * t1008;
t944 = -t1263 * t1005 + t1267 * t1007;
t943 = t1267 * t1006 + t1263 * t1008;
t942 = t1267 * t1005 + t1263 * t1007;
t941 = -pkin(1) * t1173 + qJ(2) * t1094 + t1260 * t1031 + t1259 * t1050;
t940 = -pkin(6) * t1340 - qJ(2) * t1001 - t1259 * t1061;
t939 = -pkin(8) * t1017 + t990;
t938 = pkin(3) * t1115 + pkin(7) * t949;
t937 = -pkin(8) * t1012 + t989;
t936 = pkin(1) * t1197 - pkin(6) * t1342 + qJ(2) * t1002 + t1260 * t1061;
t931 = -pkin(6) * t1040 + t1267 * t1059 - t1263 * t999;
t930 = -pkin(7) * t1028 - t948;
t929 = -pkin(6) * t1019 + t1267 * t1038 - t1263 * t995;
t928 = -pkin(2) * t1371 + pkin(6) * t1041 + t1263 * t1059 + t1267 * t999;
t927 = -pkin(3) * t1120 + pkin(7) * t1030 + t949;
t926 = -t1263 * t975 + t1267 * t977;
t925 = -t1263 * t974 + t1267 * t976;
t924 = t1263 * t977 + t1267 * t975;
t923 = t1263 * t976 + t1267 * t974;
t922 = -t1259 * t971 + t1260 * t972;
t921 = t1259 * t972 + t1260 * t971;
t920 = -t1263 * t969 + t1267 * t970;
t918 = -pkin(2) * t1086 + pkin(6) * t1020 + t1263 * t1038 + t1267 * t995;
t917 = -t1263 * t966 + t1267 * t967;
t915 = -pkin(4) * t1017 + t935;
t914 = -t1263 * t963 + t1267 * t964;
t913 = t1263 * t964 + t1267 * t963;
t912 = -pkin(4) * t1012 + t934;
t911 = -t1259 * t960 + t1260 * t962;
t910 = -t1259 * t959 + t1260 * t961;
t909 = t1259 * t962 + t1260 * t960;
t908 = t1259 * t961 + t1260 * t959;
t907 = -pkin(1) * t978 - t1282;
t906 = -t1263 * t953 + t1267 * t954;
t904 = t1267 * t949 - t1353;
t902 = -t1259 * t943 + t1260 * t945;
t901 = -t1259 * t942 + t1260 * t944;
t900 = t1259 * t945 + t1260 * t943;
t899 = t1259 * t944 + t1260 * t942;
t898 = -pkin(1) * t950 - t1275;
t894 = -pkin(1) * t909 - t1308;
t893 = -t1259 * t924 + t1260 * t926;
t892 = -t1259 * t923 + t1260 * t925;
t891 = t1259 * t926 + t1260 * t924;
t890 = t1259 * t925 + t1260 * t923;
t886 = -pkin(8) * t986 - t896;
t885 = -t1259 * t919 + t1260 * t920;
t884 = t1259 * t920 + t1260 * t919;
t883 = -t1259 * t916 + t1260 * t917;
t882 = t1259 * t917 + t1260 * t916;
t881 = -t1259 * t913 + t1260 * t914;
t880 = t1259 * t914 + t1260 * t913;
t879 = -qJ(2) * t978 - t1259 * t928 + t1260 * t931;
t878 = -pkin(7) * t969 - t1262 * t915 + t1266 * t939;
t877 = -pkin(7) * t966 - t1262 * t912 + t1266 * t937;
t876 = -t1259 * t905 + t1260 * t906;
t875 = t1259 * t906 + t1260 * t905;
t874 = -pkin(1) * t1371 + qJ(2) * t979 + t1259 * t931 + t1260 * t928;
t873 = -pkin(6) * t960 - t1263 * t927 + t1267 * t930;
t872 = -t1259 * t903 + t1260 * t904;
t871 = t1259 * t904 + t1260 * t903;
t870 = -pkin(2) * t1120 + pkin(6) * t962 + t1263 * t930 + t1267 * t927;
t869 = -pkin(6) * t903 - pkin(7) * t1352 - t1263 * t938;
t868 = -qJ(2) * t950 - t1259 * t918 + t1260 * t929;
t867 = -pkin(3) * t1017 + pkin(7) * t970 + t1262 * t939 + t1266 * t915;
t866 = -pkin(3) * t1012 + pkin(7) * t967 + t1262 * t937 + t1266 * t912;
t865 = pkin(2) * t1115 + pkin(6) * t904 - pkin(7) * t1353 + t1267 * t938;
t864 = -pkin(1) * t1086 + qJ(2) * t951 + t1259 * t929 + t1260 * t918;
t863 = -pkin(7) * t953 + t1266 * t886 + t986 * t1361;
t862 = pkin(7) * t954 + t1262 * t886 + t1319 * t986;
t861 = -t1263 * t888 + t1267 * t889;
t859 = -pkin(1) * t871 - t1316;
t858 = -pkin(1) * t884 - t1280;
t857 = -pkin(1) * t882 - t1281;
t856 = -pkin(7) * t888 + (-pkin(8) * t1266 + t1361) * t896;
t855 = -pkin(6) * t919 - t1263 * t867 + t1267 * t878;
t854 = -qJ(2) * t909 - t1259 * t870 + t1260 * t873;
t853 = -pkin(6) * t916 - t1263 * t866 + t1267 * t877;
t852 = -pkin(1) * t1120 + qJ(2) * t911 + t1259 * t873 + t1260 * t870;
t851 = -pkin(1) * t875 - t1276;
t850 = -pkin(2) * t1017 + pkin(6) * t920 + t1263 * t878 + t1267 * t867;
t849 = -pkin(2) * t1012 + pkin(6) * t917 + t1263 * t877 + t1267 * t866;
t848 = pkin(7) * t889 + (-pkin(8) * t1262 + t1319) * t896;
t847 = -qJ(2) * t871 - t1259 * t865 + t1260 * t869;
t846 = pkin(1) * t1115 + qJ(2) * t872 + t1259 * t869 + t1260 * t865;
t845 = -pkin(6) * t905 - t1263 * t862 + t1267 * t863;
t844 = -t1259 * t860 + t1260 * t861;
t843 = t1259 * t861 + t1260 * t860;
t842 = -pkin(2) * t986 + pkin(6) * t906 + t1263 * t863 + t1267 * t862;
t841 = -qJ(2) * t884 - t1259 * t850 + t1260 * t855;
t840 = -qJ(2) * t882 - t1259 * t849 + t1260 * t853;
t839 = -pkin(1) * t1017 + qJ(2) * t885 + t1259 * t855 + t1260 * t850;
t838 = -pkin(1) * t1012 + qJ(2) * t883 + t1259 * t853 + t1260 * t849;
t837 = -pkin(6) * t860 - t1263 * t848 + t1267 * t856;
t836 = -pkin(1) * t843 - t1287;
t835 = -pkin(2) * t896 + pkin(6) * t861 + t1263 * t856 + t1267 * t848;
t834 = -qJ(2) * t875 - t1259 * t842 + t1260 * t845;
t833 = -pkin(1) * t986 + qJ(2) * t876 + t1259 * t845 + t1260 * t842;
t832 = -qJ(2) * t843 - t1259 * t835 + t1260 * t837;
t831 = -pkin(1) * t896 + qJ(2) * t844 + t1259 * t837 + t1260 * t835;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1238, 0, -t1237, 0, t1295, -t1222, -t1284, -pkin(5) * t1284, t1213, t1268 * t1234 + t1264 * t1236, t1211, -t1213, t1277, 0, -pkin(5) * t1278 - t1264 * t1208 - t1259 * t1327, -pkin(5) * t1210 - t1264 * t1209 - t1260 * t1327, t1268 * t1155 - pkin(5) * (t1264 * t1233 + t1268 * t1235), -pkin(5) * (t1264 * t1156 + t1327) - (t1264 * pkin(1) - t1268 * qJ(2)) * t1155, t1268 * t1119 - t1313, t1268 * t1095 + t1264 * t1206, t1268 * t1113 + t1264 * t1226, t1268 * t1118 + t1313, t1268 * t1112 - t1264 * t1225, t1264 * qJDD(3) + t1268 * t1137, t1268 * t998 - t1264 * t1025 - pkin(5) * (t1264 * t1085 - t1268 * t1201), t1268 * t1009 - t1264 * t1039 - pkin(5) * (t1264 * t1114 - t1268 * t1203), t1268 * t946 - t1264 * t1060 - pkin(5) * (t1264 * t1094 - t1268 * t1173), t1268 * t940 - t1264 * t973 - pkin(5) * (t1264 * t1002 + t1268 * t1197), t1268 * t958 + t1314, t1264 * t1146 + t1268 * t910, t1264 * t1091 + t1268 * t982, t1268 * t957 - t1314, t1088 * t1264 + t1268 * t983, t1268 * t1004 + t1264 * t1256, t1268 * t868 - t1264 * t898 - pkin(5) * (-t1268 * t1086 + t1264 * t951), t1268 * t879 - t1264 * t907 - pkin(5) * (t1264 * t979 - t1268 * t1371), t1268 * t854 - t1264 * t894 - pkin(5) * (-t1268 * t1120 + t1264 * t911), t1268 * t847 - t1264 * t859 - pkin(5) * (t1268 * t1115 + t1264 * t872), t1264 * t1044 + t1268 * t902, t1264 * t985 + t1268 * t881, t1264 * t1032 + t1268 * t892, -t1264 * t1042 + t1268 * t901, t1264 * t1033 + t1268 * t893, t1264 * t1071 + t1268 * t922, t1268 * t840 - t1264 * t857 - pkin(5) * (-t1268 * t1012 + t1264 * t883), t1268 * t841 - t1264 * t858 - pkin(5) * (-t1268 * t1017 + t1264 * t885), t1268 * t834 - t1264 * t851 - pkin(5) * (t1264 * t876 - t1268 * t986), t1268 * t832 - t1264 * t836 - pkin(5) * (t1264 * t844 - t1268 * t896); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1237, 0, t1238, 0, t1222, t1295, t1301, pkin(5) * t1301, t1212, t1264 * t1234 - t1268 * t1236, t1210, -t1212, -t1278, 0, -pkin(5) * t1277 + t1268 * t1208 - t1259 * t1333, pkin(5) * t1211 + t1268 * t1209 - t1260 * t1333, t1264 * t1155 + pkin(5) * (t1268 * t1233 - t1264 * t1235), pkin(5) * (t1268 * t1156 - t1333) - (-t1268 * pkin(1) - t1264 * qJ(2)) * t1155, t1264 * t1119 + t1310, t1264 * t1095 - t1268 * t1206, t1264 * t1113 - t1268 * t1226, t1264 * t1118 - t1310, t1264 * t1112 + t1268 * t1225, -t1268 * qJDD(3) + t1264 * t1137, t1264 * t998 + t1268 * t1025 + pkin(5) * (t1268 * t1085 + t1264 * t1201), t1264 * t1009 + t1268 * t1039 + pkin(5) * (t1268 * t1114 + t1264 * t1203), t1264 * t946 + t1268 * t1060 + pkin(5) * (t1268 * t1094 + t1264 * t1173), t1264 * t940 + t1268 * t973 + pkin(5) * (t1268 * t1002 - t1264 * t1197), t1264 * t958 - t1311, -t1268 * t1146 + t1264 * t910, -t1268 * t1091 + t1264 * t982, t1264 * t957 + t1311, -t1088 * t1268 + t1264 * t983, t1264 * t1004 - t1268 * t1256, t1264 * t868 + t1268 * t898 + pkin(5) * (t1264 * t1086 + t1268 * t951), t1264 * t879 + t1268 * t907 + pkin(5) * (t1264 * t1371 + t1268 * t979), t1264 * t854 + t1268 * t894 + pkin(5) * (t1264 * t1120 + t1268 * t911), t1264 * t847 + t1268 * t859 + pkin(5) * (-t1264 * t1115 + t1268 * t872), -t1268 * t1044 + t1264 * t902, t1264 * t881 - t1268 * t985, -t1268 * t1032 + t1264 * t892, t1268 * t1042 + t1264 * t901, -t1268 * t1033 + t1264 * t893, -t1268 * t1071 + t1264 * t922, t1264 * t840 + t1268 * t857 + pkin(5) * (t1264 * t1012 + t1268 * t883), t1264 * t841 + t1268 * t858 + pkin(5) * (t1264 * t1017 + t1268 * t885), t1264 * t834 + t1268 * t851 + pkin(5) * (t1264 * t986 + t1268 * t876), t1264 * t832 + t1268 * t836 + pkin(5) * (t1264 * t896 + t1268 * t844); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1239, t1240, 0, 0, t1249, t1241, 0, t1251, 0, 0, t1183, t1182, t1131, t1140, t1117, t1093, t1110, t1116, t1109, t1136, t994, t1000, t941, t936, t956, t908, t980, t955, t981, t1003, t864, t874, t852, t846, t900, t880, t890, t899, t891, t921, t838, t839, t833, t831; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1270, 0, 0, -g(3), -t1239, 0, t1307, t1234, t1230, -t1307, t1231, 0, -t1259 * t1221, -t1260 * t1221, t1155, qJ(2) * t1155, t1119, t1095, t1113, t1118, t1112, t1137, t998, t1009, t946, t940, t958, t910, t982, t957, t983, t1004, t868, t879, t854, t847, t902, t881, t892, t901, t893, t922, t840, t841, t834, t832; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1270, 0, qJDD(1), 0, g(3), 0, -t1240, 0, t1242, -t1236, -t1250, -t1242, -t1252, 0, t1208, t1209, 0, pkin(1) * t1155, t1207, -t1206, -t1226, -t1207, t1225, -qJDD(3), t1025, t1039, t1060, t973, -t1147, -t1146, -t1091, t1147, -t1088, -t1256, t898, t907, t894, t859, -t1044, -t985, -t1032, t1042, -t1033, -t1071, t857, t858, t851, t836; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1239, t1240, 0, 0, t1249, t1241, 0, t1251, 0, 0, t1183, t1182, t1131, t1140, t1117, t1093, t1110, t1116, t1109, t1136, t994, t1000, t941, t936, t956, t908, t980, t955, t981, t1003, t864, t874, t852, t846, t900, t880, t890, t899, t891, t921, t838, t839, t833, t831; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1250, t1252, t1242, 0, t1253, 0, 0, -t1221, t1208, 0, t1166, t1153, t1161, t1164, t1160, t1186, t1122, t1125, t1050, -pkin(6) * t1065, t1024, t961, t1048, t1023, t1049, t1068, t929, t931, t873, t869, t945, t914, t925, t944, t926, t972, t853, t855, t845, t837; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1250, -t1343, t1252, -t1242, 0, t1221, 0, t1209, 0, t1165, t1151, t1158, t1163, t1157, t1185, t1096, t1103, t1031, t1061, t1022, t959, t1046, t1021, t1047, t1067, t918, t928, t870, t865, t943, t913, t923, t942, t924, t971, t849, t850, t842, t835; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1242, t1236, t1250, t1242, t1252, 0, -t1208, -t1209, 0, 0, -t1207, t1206, t1226, t1207, -t1225, qJDD(3), t1274, t1297, t1362, t1363, t1147, t1146, t1091, -t1147, t1088, t1256, t1275, t1282, t1308, t1316, t1044, t985, t1032, -t1042, t1033, t1071, t1281, t1280, t1276, t1287; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1204, -t1201, t1368, -t1220, t1214, t1220, 0, -t1197, -t1285, 0, t1083, t1029, t1106, t1081, t1107, t1133, t1038, t1059, t930, -pkin(7) * t948, t1008, t964, t976, t1007, t977, t1037, t877, t878, t863, t856; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1346, t1203, t1215, t1202, t1199, -t1346, t1197, 0, t1130, 0, t1082, t1027, t1104, t1080, t1105, t1132, t995, t999, t927, t938, t1006, t963, t974, t1005, t975, t1036, t866, t867, t862, t848; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1207, t1206, t1226, t1207, -t1225, qJDD(3), t1285, -t1130, 0, 0, t1147, t1146, t1091, -t1147, t1088, t1256, t1288, t1309, t1026, t947, t1044, t985, t1032, -t1042, t1033, t1071, t1298, t1299, t1289, t1321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1124, -t1086, t1369, t1181, t1178, -t1181, 0, -t1115, t1014, 0, t1045, t987, t1034, t1043, t1035, t1072, t937, t939, t886, -pkin(8) * t896; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1305, t1371, t1179, t1123, t1143, -t1305, t1115, 0, t1015, 0, -t1127, -t1126, -t1057, t1127, t1053, -t1121, t912, t915, -pkin(4) * t986, -pkin(4) * t896; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1147, t1146, t1091, -t1147, t1088, t1256, -t1014, -t1015, 0, 0, t1044, t985, t1032, -t1042, t1033, t1071, t1317, t1318, t1300, t1354; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1074, t1054, t1370, t1138, t1134, -t1138, 0, t992, t934, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1139, t1056, t1135, -t1279, t1063, -t1139, -t992, 0, t935, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1127, t1126, t1057, -t1127, -t1053, t1121, -t934, -t935, 0, 0;];
m_new_reg = t1;
