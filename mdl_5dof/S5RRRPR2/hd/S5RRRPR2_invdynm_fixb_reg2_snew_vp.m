% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRRPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:41
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRRPR2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR2_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR2_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR2_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRPR2_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:41:12
% EndTime: 2019-12-05 18:41:24
% DurationCPUTime: 11.76s
% Computational Cost: add. (59094->425), mult. (74873->563), div. (0->0), fcn. (44118->10), ass. (0->285)
t819 = qJD(1) + qJD(2);
t815 = qJD(3) + t819;
t813 = t815 ^ 2;
t818 = qJDD(1) + qJDD(2);
t814 = qJDD(3) + t818;
t823 = sin(pkin(9));
t824 = cos(pkin(9));
t775 = t824 * t813 + t823 * t814;
t778 = t823 * t813 - t824 * t814;
t826 = sin(qJ(3));
t830 = cos(qJ(3));
t710 = t830 * t775 - t826 * t778;
t822 = g(1) - qJDD(4);
t751 = qJ(4) * t775 - t824 * t822;
t898 = qJ(4) * t778 - t823 * t822;
t654 = pkin(7) * t710 + t830 * t751 - t826 * t898;
t714 = t826 * t775 + t830 * t778;
t827 = sin(qJ(2));
t831 = cos(qJ(2));
t664 = t831 * t710 - t827 * t714;
t914 = pkin(7) * t714 + t826 * t751 + t830 * t898;
t594 = pkin(6) * t664 + t831 * t654 - t827 * t914;
t668 = t827 * t710 + t831 * t714;
t828 = sin(qJ(1));
t832 = cos(qJ(1));
t620 = t664 * t828 + t832 * t668;
t931 = pkin(6) * t668 + t827 * t654 + t831 * t914;
t943 = pkin(5) * t620 + t828 * t594 + t832 * t931;
t933 = t832 * t664 - t668 * t828;
t942 = pkin(5) * t933 + t832 * t594 - t828 * t931;
t807 = t832 * g(2) + t828 * g(3);
t795 = qJDD(1) * pkin(1) + t807;
t806 = t828 * g(2) - t832 * g(3);
t835 = qJD(1) ^ 2;
t796 = -t835 * pkin(1) + t806;
t736 = -t831 * t795 + t827 * t796;
t725 = t818 * pkin(2) - t736;
t737 = t827 * t795 + t831 * t796;
t817 = t819 ^ 2;
t726 = -t817 * pkin(2) + t737;
t678 = t826 * t725 + t830 * t726;
t675 = -t813 * pkin(3) + t678;
t677 = -t830 * t725 + t826 * t726;
t840 = t814 * pkin(3) - t677;
t627 = t823 * t675 - t824 * t840;
t628 = t824 * t675 + t823 * t840;
t860 = t823 * t627 + t824 * t628;
t583 = t824 * t627 - t823 * t628;
t870 = t830 * t583;
t559 = -t826 * t860 + t870;
t874 = t826 * t583;
t904 = t830 * t860 + t874;
t543 = t831 * t559 - t827 * t904;
t927 = t827 * t559 + t831 * t904;
t940 = t828 * t543 + t832 * t927;
t939 = t543 * t832 - t828 * t927;
t780 = t830 * t813 + t826 * t814;
t783 = t826 * t813 - t830 * t814;
t718 = t831 * t780 - t827 * t783;
t755 = pkin(7) * t780 - t830 * g(1);
t899 = pkin(7) * t783 - t826 * g(1);
t662 = pkin(6) * t718 + t831 * t755 - t827 * t899;
t722 = t827 * t780 + t831 * t783;
t672 = t718 * t828 + t832 * t722;
t915 = pkin(6) * t722 + t827 * t755 + t831 * t899;
t934 = pkin(5) * t672 + t828 * t662 + t832 * t915;
t917 = t832 * t718 - t722 * t828;
t932 = pkin(5) * t917 + t832 * t662 - t828 * t915;
t859 = t826 * t677 + t830 * t678;
t633 = t830 * t677 - t826 * t678;
t869 = t831 * t633;
t587 = -t827 * t859 + t869;
t873 = t827 * t633;
t905 = t831 * t859 + t873;
t926 = t828 * t587 + t832 * t905;
t925 = t587 * t832 - t828 * t905;
t789 = t831 * t817 + t827 * t818;
t792 = t827 * t817 - t831 * t818;
t727 = t828 * t789 + t832 * t792;
t760 = pkin(6) * t789 - t831 * g(1);
t900 = pkin(6) * t792 - t827 * g(1);
t918 = pkin(5) * t727 + t828 * t760 + t832 * t900;
t896 = t832 * t789 - t792 * t828;
t916 = pkin(5) * t896 + t832 * t760 - t828 * t900;
t858 = t827 * t736 + t831 * t737;
t685 = t831 * t736 - t827 * t737;
t872 = t828 * t685;
t906 = t832 * t858 + t872;
t881 = t685 * t832;
t903 = -t828 * t858 + t881;
t623 = -t813 * pkin(4) + t814 * pkin(8) + t628;
t825 = sin(qJ(5));
t829 = cos(qJ(5));
t615 = t825 * t623 + t829 * t822;
t616 = t829 * t623 - t825 * t822;
t578 = t825 * t615 + t829 * t616;
t820 = t825 ^ 2;
t880 = t820 * t813;
t622 = -t814 * pkin(4) - t813 * pkin(8) + t627;
t617 = t825 * t622;
t801 = t829 * t813 * t825;
t793 = qJDD(5) + t801;
t877 = t825 * t793;
t794 = qJDD(5) - t801;
t876 = t825 * t794;
t875 = t825 * t814;
t618 = t829 * t622;
t871 = t829 * t794;
t808 = t829 * t814;
t580 = pkin(3) * t583;
t868 = -pkin(2) * t559 - t580;
t867 = -pkin(4) * t622 + pkin(8) * t578;
t821 = t829 ^ 2;
t866 = t820 + t821;
t865 = qJD(5) * t815;
t834 = qJD(5) ^ 2;
t798 = -t834 - t880;
t745 = -t825 * t798 - t871;
t805 = t829 * t865;
t770 = 0.2e1 * t805 + t875;
t864 = -pkin(4) * t770 + pkin(8) * t745 + t617;
t809 = t821 * t813;
t800 = -t809 - t834;
t743 = t829 * t800 - t877;
t861 = t825 * t865;
t773 = t808 - 0.2e1 * t861;
t863 = pkin(4) * t773 + pkin(8) * t743 - t618;
t566 = t823 * t578 - t824 * t622;
t862 = pkin(3) * t566 + t867;
t855 = t823 * t801;
t854 = t824 * t801;
t567 = t824 * t578 + t823 * t622;
t549 = t830 * t566 + t826 * t567;
t853 = pkin(2) * t549 + t862;
t779 = t866 * t814;
t784 = t809 + t880;
t852 = pkin(4) * t784 + pkin(8) * t779 + t578;
t692 = t823 * t745 - t824 * t770;
t851 = pkin(3) * t692 + t864;
t691 = t823 * t743 + t824 * t773;
t850 = pkin(3) * t691 + t863;
t802 = t828 * qJDD(1) + t832 * t835;
t849 = pkin(5) * t802 - t832 * g(1);
t848 = -pkin(3) * t778 - t627;
t847 = -pkin(2) * t783 - t677;
t716 = t823 * t779 + t824 * t784;
t846 = pkin(3) * t716 + t852;
t693 = t824 * t743 - t823 * t773;
t643 = t830 * t691 + t826 * t693;
t845 = pkin(2) * t643 + t850;
t694 = t824 * t745 + t823 * t770;
t644 = t830 * t692 + t826 * t694;
t844 = pkin(2) * t644 + t851;
t577 = t829 * t615 - t825 * t616;
t843 = t832 * t806 - t828 * t807;
t842 = -t828 * t806 - t832 * t807;
t841 = -pkin(2) * t714 + t848;
t717 = t824 * t779 - t823 * t784;
t670 = t830 * t716 + t826 * t717;
t839 = pkin(2) * t670 + t846;
t838 = -pkin(2) * t780 - t678;
t837 = -pkin(3) * t775 - t628;
t836 = -pkin(2) * t710 + t837;
t833 = pkin(1) * g(1);
t803 = -t832 * qJDD(1) + t828 * t835;
t799 = t809 - t834;
t797 = t834 - t880;
t787 = t829 * t793;
t786 = -pkin(5) * t803 + t828 * g(1);
t785 = -t809 + t880;
t772 = t808 - t861;
t771 = t805 + t875;
t764 = t866 * t865;
t747 = t823 * qJDD(5) + t824 * t764;
t746 = -t824 * qJDD(5) + t823 * t764;
t744 = -t825 * t797 + t787;
t742 = t829 * t799 - t876;
t741 = t829 * t798 - t876;
t740 = t829 * t797 + t877;
t739 = t825 * t800 + t787;
t738 = t825 * t799 + t871;
t735 = t829 * t771 - t820 * t865;
t734 = -t825 * t772 - t821 * t865;
t730 = (t771 + t805) * t825;
t729 = (t772 - t861) * t829;
t708 = -t825 * t770 + t829 * t773;
t707 = t829 * t770 + t825 * t773;
t704 = t824 * t744 + t823 * t875;
t703 = t824 * t742 + t823 * t808;
t702 = t823 * t744 - t824 * t875;
t701 = t823 * t742 - t824 * t808;
t700 = -pkin(1) * t792 - t736;
t699 = -pkin(1) * t789 - t737;
t698 = t824 * t735 - t855;
t697 = t824 * t734 + t855;
t696 = t823 * t735 + t854;
t695 = t823 * t734 - t854;
t688 = -t826 * t746 + t830 * t747;
t687 = t830 * t746 + t826 * t747;
t684 = t824 * t708 + t823 * t785;
t681 = t823 * t708 - t824 * t785;
t680 = pkin(1) * t685;
t679 = pkin(6) * t858 + t833;
t671 = -t826 * t716 + t830 * t717;
t658 = -t826 * t702 + t830 * t704;
t657 = -t826 * t701 + t830 * t703;
t656 = t830 * t702 + t826 * t704;
t655 = t830 * t701 + t826 * t703;
t650 = -t826 * t696 + t830 * t698;
t649 = -t826 * t695 + t830 * t697;
t648 = t830 * t696 + t826 * t698;
t647 = t830 * t695 + t826 * t697;
t646 = -t826 * t692 + t830 * t694;
t645 = -t826 * t691 + t830 * t693;
t640 = -t827 * t687 + t831 * t688;
t639 = t831 * t687 + t827 * t688;
t638 = -pkin(1) * t722 + t847;
t637 = -pkin(1) * t718 + t838;
t636 = -t826 * t681 + t830 * t684;
t635 = t830 * t681 + t826 * t684;
t630 = pkin(2) * t633;
t629 = pkin(2) * g(1) + pkin(7) * t859;
t625 = -t827 * t670 + t831 * t671;
t624 = t831 * t670 + t827 * t671;
t612 = -t827 * t656 + t831 * t658;
t611 = -t827 * t655 + t831 * t657;
t610 = t831 * t656 + t827 * t658;
t609 = t831 * t655 + t827 * t657;
t608 = -t827 * t648 + t831 * t650;
t607 = -t827 * t647 + t831 * t649;
t606 = t831 * t648 + t827 * t650;
t605 = t831 * t647 + t827 * t649;
t604 = -pkin(8) * t741 + t618;
t603 = -pkin(8) * t739 + t617;
t602 = -pkin(4) * t741 + t616;
t601 = -pkin(4) * t739 + t615;
t600 = -t827 * t644 + t831 * t646;
t599 = -t827 * t643 + t831 * t645;
t598 = t831 * t644 + t827 * t646;
t597 = t831 * t643 + t827 * t645;
t596 = -t827 * t635 + t831 * t636;
t595 = t831 * t635 + t827 * t636;
t590 = -pkin(1) * t668 + t841;
t589 = -pkin(1) * t664 + t836;
t579 = pkin(3) * t822 + qJ(4) * t860;
t574 = -qJ(4) * t716 + t824 * t577;
t573 = qJ(4) * t717 + t823 * t577;
t572 = -pkin(1) * t587 - t630;
t571 = -qJ(4) * t692 - t823 * t602 + t824 * t604;
t570 = -qJ(4) * t691 - t823 * t601 + t824 * t603;
t569 = -pkin(3) * t741 + qJ(4) * t694 + t824 * t602 + t823 * t604;
t568 = -pkin(3) * t739 + qJ(4) * t693 + t824 * t601 + t823 * t603;
t564 = pkin(1) * t598 + t844;
t563 = pkin(1) * t597 + t845;
t562 = pkin(6) * t587 + pkin(7) * t869 - t827 * t629;
t561 = pkin(6) * t905 + pkin(7) * t873 + t831 * t629 + t833;
t555 = pkin(1) * t624 + t839;
t554 = -pkin(7) * t670 - t826 * t573 + t830 * t574;
t553 = pkin(7) * t671 + t830 * t573 + t826 * t574;
t552 = -pkin(7) * t644 - t826 * t569 + t830 * t571;
t551 = -pkin(7) * t643 - t826 * t568 + t830 * t570;
t550 = -t826 * t566 + t830 * t567;
t547 = -pkin(2) * t741 + pkin(7) * t646 + t830 * t569 + t826 * t571;
t546 = -pkin(2) * t739 + pkin(7) * t645 + t830 * t568 + t826 * t570;
t545 = -qJ(4) * t566 - (pkin(4) * t823 - pkin(8) * t824) * t577;
t540 = pkin(7) * t559 + qJ(4) * t870 - t826 * t579;
t539 = pkin(2) * t822 + pkin(7) * t904 + qJ(4) * t874 + t830 * t579;
t538 = qJ(4) * t567 - (-pkin(4) * t824 - pkin(8) * t823 - pkin(3)) * t577;
t537 = -pkin(6) * t624 - t827 * t553 + t831 * t554;
t536 = pkin(6) * t625 + t831 * t553 + t827 * t554;
t535 = -t827 * t549 + t831 * t550;
t534 = t831 * t549 + t827 * t550;
t533 = -pkin(1) * t543 + t868;
t532 = -pkin(6) * t598 - t827 * t547 + t831 * t552;
t531 = -pkin(6) * t597 - t827 * t546 + t831 * t551;
t530 = -pkin(1) * t741 + pkin(6) * t600 + t831 * t547 + t827 * t552;
t529 = -pkin(1) * t739 + pkin(6) * t599 + t831 * t546 + t827 * t551;
t528 = pkin(6) * t543 - t827 * t539 + t831 * t540;
t527 = pkin(1) * t822 + pkin(6) * t927 + t831 * t539 + t827 * t540;
t526 = -pkin(7) * t549 - t826 * t538 + t830 * t545;
t525 = pkin(1) * t534 + t853;
t524 = pkin(2) * t577 + pkin(7) * t550 + t830 * t538 + t826 * t545;
t523 = -pkin(6) * t534 - t827 * t524 + t831 * t526;
t522 = pkin(1) * t577 + pkin(6) * t535 + t831 * t524 + t827 * t526;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t807, -t806, 0, 0, 0, 0, 0, 0, 0, t818, t700, t699, 0, -t680, 0, 0, 0, 0, 0, t814, t638, t637, 0, t572, 0, 0, 0, 0, 0, t814, t590, t589, 0, t533, t730, t707, t740, t729, t738, 0, t563, t564, t555, t525; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t802, 0, t803, 0, t849, t786, -t843, -pkin(5) * t843, 0, 0, -t896, 0, t727, 0, t916, -t918, -t906, -pkin(5) * t906 - pkin(6) * t872 - t832 * t679, 0, 0, -t917, 0, t672, 0, t932, -t934, -t926, -pkin(5) * t926 - t832 * t561 - t828 * t562, 0, 0, -t933, 0, t620, 0, t942, -t943, -t940, -pkin(5) * t940 - t832 * t527 - t828 * t528, -t832 * t606 - t828 * t608, -t832 * t595 - t828 * t596, -t832 * t610 - t828 * t612, -t832 * t605 - t828 * t607, -t609 * t832 - t611 * t828, -t639 * t832 - t640 * t828, -t828 * t531 - t832 * t529 - pkin(5) * (-t597 * t828 + t599 * t832), -t828 * t532 - t832 * t530 - pkin(5) * (-t598 * t828 + t600 * t832), -t828 * t537 - t832 * t536 - pkin(5) * (-t624 * t828 + t625 * t832), -t828 * t523 - t832 * t522 - pkin(5) * (-t534 * t828 + t535 * t832); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t803, 0, -t802, 0, -t786, t849, t842, pkin(5) * t842, 0, 0, -t727, 0, -t896, 0, t918, t916, t903, pkin(5) * t903 + pkin(6) * t881 - t828 * t679, 0, 0, -t672, 0, -t917, 0, t934, t932, t925, pkin(5) * t925 - t828 * t561 + t832 * t562, 0, 0, -t620, 0, -t933, 0, t943, t942, t939, pkin(5) * t939 - t828 * t527 + t832 * t528, -t606 * t828 + t608 * t832, -t595 * t828 + t596 * t832, -t610 * t828 + t612 * t832, -t605 * t828 + t607 * t832, -t609 * t828 + t611 * t832, -t639 * t828 + t640 * t832, t832 * t531 - t828 * t529 + pkin(5) * (-t597 * t832 - t599 * t828), t832 * t532 - t828 * t530 + pkin(5) * (-t598 * t832 - t600 * t828), t832 * t537 - t828 * t536 + pkin(5) * (-t624 * t832 - t625 * t828), t832 * t523 - t828 * t522 + pkin(5) * (-t534 * t832 - t535 * t828); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t835, 0, 0, -g(1), -t807, 0, 0, 0, -t792, 0, -t789, 0, t900, t760, t685, pkin(6) * t685, 0, 0, -t722, 0, -t718, 0, t915, t662, t587, t562, 0, 0, -t668, 0, -t664, 0, t931, t594, t543, t528, t608, t596, t612, t607, t611, t640, t531, t532, t537, t523; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t835, 0, qJDD(1), 0, g(1), 0, t806, 0, 0, 0, t789, 0, -t792, 0, -t760, t900, t858, t679, 0, 0, t718, 0, -t722, 0, -t662, t915, t905, t561, 0, 0, t664, 0, -t668, 0, -t594, t931, t927, t527, t606, t595, t610, t605, t609, t639, t529, t530, t536, t522; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t807, -t806, 0, 0, 0, 0, 0, 0, 0, t818, t700, t699, 0, -t680, 0, 0, 0, 0, 0, t814, t638, t637, 0, t572, 0, 0, 0, 0, 0, t814, t590, t589, 0, t533, t730, t707, t740, t729, t738, 0, t563, t564, t555, t525; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t818, 0, -t817, 0, 0, -g(1), t736, 0, 0, 0, -t783, 0, -t780, 0, t899, t755, t633, pkin(7) * t633, 0, 0, -t714, 0, -t710, 0, t914, t654, t559, t540, t650, t636, t658, t649, t657, t688, t551, t552, t554, t526; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t817, 0, t818, 0, g(1), 0, t737, 0, 0, 0, t780, 0, -t783, 0, -t755, t899, t859, t629, 0, 0, t710, 0, -t714, 0, -t654, t914, t904, t539, t648, t635, t656, t647, t655, t687, t546, t547, t553, t524; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t818, -t736, -t737, 0, 0, 0, 0, 0, 0, 0, t814, t847, t838, 0, -t630, 0, 0, 0, 0, 0, t814, t841, t836, 0, t868, t730, t707, t740, t729, t738, 0, t845, t844, t839, t853; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t814, 0, -t813, 0, 0, -g(1), t677, 0, 0, 0, -t778, 0, -t775, 0, t898, t751, t583, qJ(4) * t583, t698, t684, t704, t697, t703, t747, t570, t571, t574, t545; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t813, 0, t814, 0, g(1), 0, t678, 0, 0, 0, t775, 0, -t778, 0, -t751, t898, t860, t579, t696, t681, t702, t695, t701, t746, t568, t569, t573, t538; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t814, -t677, -t678, 0, 0, 0, 0, 0, 0, 0, t814, t848, t837, 0, -t580, t730, t707, t740, t729, t738, 0, t850, t851, t846, t862; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t814, 0, -t813, 0, 0, -t822, t627, 0, t735, t708, t744, t734, t742, t764, t603, t604, t577, pkin(8) * t577; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t813, 0, t814, 0, t822, 0, t628, 0, t801, -t785, -t875, -t801, -t808, -qJDD(5), t601, t602, 0, pkin(4) * t577; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t814, -t627, -t628, 0, 0, t730, t707, t740, t729, t738, 0, t863, t864, t852, t867; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t771, t773, t793, -t805, t799, t805, 0, t622, t615, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t861, t770, t797, t772, t794, -t861, -t622, 0, t616, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t801, t785, t875, t801, t808, qJDD(5), -t615, -t616, 0, 0;];
m_new_reg = t1;
