% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 12:08
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRPR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRPR2_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 12:07:58
% EndTime: 2020-01-03 12:08:00
% DurationCPUTime: 2.13s
% Computational Cost: add. (9600->149), mult. (12202->204), div. (0->0), fcn. (7318->10), ass. (0->115)
t1079 = sin(qJ(1));
t1083 = cos(qJ(1));
t1070 = qJD(1) + qJD(2);
t1066 = qJD(3) + t1070;
t1064 = t1066 ^ 2;
t1069 = qJDD(1) + qJDD(2);
t1065 = qJDD(3) + t1069;
t1074 = sin(pkin(9));
t1075 = cos(pkin(9));
t1035 = t1064 * t1074 - t1065 * t1075;
t1077 = sin(qJ(3));
t1081 = cos(qJ(3));
t1089 = -t1064 * t1075 - t1065 * t1074;
t1013 = t1035 * t1081 - t1077 * t1089;
t1078 = sin(qJ(2));
t1082 = cos(qJ(2));
t1103 = t1035 * t1077 + t1081 * t1089;
t1110 = t1013 * t1078 + t1082 * t1103;
t995 = t1013 * t1082 - t1078 * t1103;
t1114 = t1079 * t995 + t1083 * t1110;
t1113 = t1079 * t1110 - t1083 * t995;
t1040 = t1064 * t1077 - t1065 * t1081;
t1088 = -t1064 * t1081 - t1065 * t1077;
t1019 = t1040 * t1082 - t1078 * t1088;
t1102 = t1040 * t1078 + t1082 * t1088;
t1109 = t1019 * t1079 + t1083 * t1102;
t1108 = -t1019 * t1083 + t1079 * t1102;
t1068 = t1070 ^ 2;
t1048 = t1068 * t1078 - t1069 * t1082;
t1087 = -t1068 * t1082 - t1069 * t1078;
t1101 = t1048 * t1079 + t1083 * t1087;
t1100 = -t1048 * t1083 + t1079 * t1087;
t1061 = -g(2) * t1083 - g(3) * t1079;
t1052 = qJDD(1) * pkin(1) + t1061;
t1060 = -g(2) * t1079 + g(3) * t1083;
t1085 = qJD(1) ^ 2;
t1053 = -pkin(1) * t1085 + t1060;
t1025 = t1052 * t1082 - t1053 * t1078;
t1023 = pkin(2) * t1069 + t1025;
t1026 = t1052 * t1078 + t1053 * t1082;
t1024 = -pkin(2) * t1068 + t1026;
t1004 = t1023 * t1077 + t1024 * t1081;
t1002 = -pkin(3) * t1064 + t1004;
t1003 = t1023 * t1081 - t1024 * t1077;
t1086 = pkin(3) * t1065 + t1003;
t986 = t1002 * t1075 + t1074 * t1086;
t1093 = qJD(5) * t1066;
t1076 = sin(qJ(5));
t1092 = t1076 * t1065;
t1080 = cos(qJ(5));
t1091 = t1080 * t1065;
t1071 = t1076 ^ 2;
t1072 = t1080 ^ 2;
t1090 = t1071 + t1072;
t985 = -t1002 * t1074 + t1075 * t1086;
t1084 = qJD(5) ^ 2;
t1073 = -g(1) + qJDD(4);
t1058 = qJDD(1) * t1083 - t1079 * t1085;
t1057 = -qJDD(1) * t1079 - t1083 * t1085;
t1056 = t1080 * t1064 * t1076;
t1055 = -t1064 * t1072 - t1084;
t1054 = -t1064 * t1071 - t1084;
t1051 = -qJDD(5) + t1056;
t1050 = qJDD(5) + t1056;
t1042 = t1090 * t1064;
t1037 = t1090 * t1065;
t1032 = -0.2e1 * t1076 * t1093 + t1091;
t1031 = 0.2e1 * t1080 * t1093 + t1092;
t1030 = t1051 * t1080 - t1054 * t1076;
t1029 = -t1050 * t1076 + t1055 * t1080;
t1028 = t1051 * t1076 + t1054 * t1080;
t1027 = t1050 * t1080 + t1055 * t1076;
t1016 = t1037 * t1075 - t1042 * t1074;
t1015 = t1037 * t1074 + t1042 * t1075;
t1010 = t1030 * t1075 + t1031 * t1074;
t1009 = t1029 * t1075 - t1032 * t1074;
t1008 = t1030 * t1074 - t1031 * t1075;
t1007 = t1029 * t1074 + t1032 * t1075;
t1006 = -t1025 * t1078 + t1026 * t1082;
t1005 = t1025 * t1082 + t1026 * t1078;
t998 = -t1015 * t1077 + t1016 * t1081;
t997 = t1015 * t1081 + t1016 * t1077;
t992 = -t1008 * t1077 + t1010 * t1081;
t991 = -t1007 * t1077 + t1009 * t1081;
t990 = t1008 * t1081 + t1010 * t1077;
t989 = t1007 * t1081 + t1009 * t1077;
t988 = -t1003 * t1077 + t1004 * t1081;
t987 = t1003 * t1081 + t1004 * t1077;
t984 = -t1078 * t997 + t1082 * t998;
t983 = t1078 * t998 + t1082 * t997;
t982 = -pkin(4) * t1064 + pkin(8) * t1065 + t986;
t981 = -pkin(4) * t1065 - pkin(8) * t1064 - t985;
t980 = t1073 * t1076 + t1080 * t982;
t979 = t1073 * t1080 - t1076 * t982;
t978 = -t1078 * t990 + t1082 * t992;
t977 = -t1078 * t989 + t1082 * t991;
t976 = t1078 * t992 + t1082 * t990;
t975 = t1078 * t991 + t1082 * t989;
t974 = -t1078 * t987 + t1082 * t988;
t973 = t1078 * t988 + t1082 * t987;
t972 = -t1074 * t985 + t1075 * t986;
t971 = t1074 * t986 + t1075 * t985;
t970 = -t1076 * t979 + t1080 * t980;
t969 = t1076 * t980 + t1080 * t979;
t968 = t1074 * t981 + t1075 * t970;
t967 = t1074 * t970 - t1075 * t981;
t966 = -t1077 * t971 + t1081 * t972;
t965 = t1077 * t972 + t1081 * t971;
t964 = -t1077 * t967 + t1081 * t968;
t963 = t1077 * t968 + t1081 * t967;
t962 = -t1078 * t965 + t1082 * t966;
t961 = t1078 * t966 + t1082 * t965;
t960 = -t1078 * t963 + t1082 * t964;
t959 = t1078 * t964 + t1082 * t963;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1073, 0, 0, 0, 0, 0, 0, t1027, t1028, 0, t969; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1058, t1057, 0, t1060 * t1079 + t1061 * t1083, 0, 0, 0, 0, 0, 0, t1100, t1101, 0, t1005 * t1083 + t1006 * t1079, 0, 0, 0, 0, 0, 0, t1108, t1109, 0, t1079 * t974 + t1083 * t973, 0, 0, 0, 0, 0, 0, t1113, t1114, 0, t1079 * t962 + t1083 * t961, 0, 0, 0, 0, 0, 0, t1079 * t977 + t1083 * t975, t1079 * t978 + t1083 * t976, t1079 * t984 + t1083 * t983, t1079 * t960 + t1083 * t959; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1057, t1058, 0, -t1060 * t1083 + t1061 * t1079, 0, 0, 0, 0, 0, 0, -t1101, t1100, 0, t1005 * t1079 - t1006 * t1083, 0, 0, 0, 0, 0, 0, -t1109, t1108, 0, t1079 * t973 - t1083 * t974, 0, 0, 0, 0, 0, 0, -t1114, t1113, 0, t1079 * t961 - t1083 * t962, 0, 0, 0, 0, 0, 0, t1079 * t975 - t1083 * t977, t1079 * t976 - t1083 * t978, t1079 * t983 - t1083 * t984, t1079 * t959 - t1083 * t960; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1085, -qJDD(1), 0, t1060, 0, 0, 0, 0, 0, 0, t1087, t1048, 0, t1006, 0, 0, 0, 0, 0, 0, t1102, t1019, 0, t974, 0, 0, 0, 0, 0, 0, t1110, t995, 0, t962, 0, 0, 0, 0, 0, 0, t977, t978, t984, t960; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1085, 0, t1061, 0, 0, 0, 0, 0, 0, -t1048, t1087, 0, t1005, 0, 0, 0, 0, 0, 0, -t1019, t1102, 0, t973, 0, 0, 0, 0, 0, 0, -t995, t1110, 0, t961, 0, 0, 0, 0, 0, 0, t975, t976, t983, t959; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1073, 0, 0, 0, 0, 0, 0, t1027, t1028, 0, t969; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1068, -t1069, 0, t1026, 0, 0, 0, 0, 0, 0, t1088, t1040, 0, t988, 0, 0, 0, 0, 0, 0, t1103, t1013, 0, t966, 0, 0, 0, 0, 0, 0, t991, t992, t998, t964; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1069, -t1068, 0, t1025, 0, 0, 0, 0, 0, 0, -t1040, t1088, 0, t987, 0, 0, 0, 0, 0, 0, -t1013, t1103, 0, t965, 0, 0, 0, 0, 0, 0, t989, t990, t997, t963; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1073, 0, 0, 0, 0, 0, 0, t1027, t1028, 0, t969; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1064, -t1065, 0, t1004, 0, 0, 0, 0, 0, 0, t1089, t1035, 0, t972, 0, 0, 0, 0, 0, 0, t1009, t1010, t1016, t968; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1065, -t1064, 0, t1003, 0, 0, 0, 0, 0, 0, -t1035, t1089, 0, t971, 0, 0, 0, 0, 0, 0, t1007, t1008, t1015, t967; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1073, 0, 0, 0, 0, 0, 0, t1027, t1028, 0, t969; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1064, -t1065, 0, t986, 0, 0, 0, 0, 0, 0, t1029, t1030, t1037, t970; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1065, -t1064, 0, t985, 0, 0, 0, 0, 0, 0, t1032, -t1031, t1042, -t981; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1073, 0, 0, 0, 0, 0, 0, t1027, t1028, 0, t969; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1055, t1051, t1091, t980; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1050, t1054, -t1092, t979; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1032, t1031, -t1042, t981;];
f_new_reg = t1;
