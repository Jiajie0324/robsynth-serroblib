% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:41
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRPR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRPR2_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:41:24
% EndTime: 2019-12-05 18:41:26
% DurationCPUTime: 2.27s
% Computational Cost: add. (9600->149), mult. (12202->204), div. (0->0), fcn. (7318->10), ass. (0->115)
t1066 = sin(qJ(1));
t1070 = cos(qJ(1));
t1065 = sin(qJ(2));
t1069 = cos(qJ(2));
t1057 = qJD(1) + qJD(2);
t1051 = qJD(3) + t1057;
t1049 = t1051 ^ 2;
t1056 = qJDD(1) + qJDD(2);
t1050 = qJDD(3) + t1056;
t1061 = sin(pkin(9));
t1062 = cos(pkin(9));
t1020 = t1061 * t1049 - t1062 * t1050;
t1064 = sin(qJ(3));
t1068 = cos(qJ(3));
t1076 = -t1062 * t1049 - t1061 * t1050;
t1090 = t1064 * t1020 + t1068 * t1076;
t998 = t1068 * t1020 - t1064 * t1076;
t1097 = t1065 * t998 + t1069 * t1090;
t980 = -t1065 * t1090 + t1069 * t998;
t1101 = t1066 * t980 + t1070 * t1097;
t1100 = -t1066 * t1097 + t1070 * t980;
t1025 = t1064 * t1049 - t1068 * t1050;
t1075 = -t1068 * t1049 - t1064 * t1050;
t1004 = t1069 * t1025 - t1065 * t1075;
t1089 = t1065 * t1025 + t1069 * t1075;
t1096 = t1066 * t1004 + t1070 * t1089;
t1095 = t1070 * t1004 - t1066 * t1089;
t1055 = t1057 ^ 2;
t1033 = t1065 * t1055 - t1069 * t1056;
t1074 = -t1069 * t1055 - t1065 * t1056;
t1088 = t1066 * t1033 + t1070 * t1074;
t1087 = t1070 * t1033 - t1066 * t1074;
t1046 = t1070 * g(2) + t1066 * g(3);
t1037 = qJDD(1) * pkin(1) + t1046;
t1045 = t1066 * g(2) - t1070 * g(3);
t1072 = qJD(1) ^ 2;
t1038 = -t1072 * pkin(1) + t1045;
t1010 = t1069 * t1037 - t1065 * t1038;
t1008 = t1056 * pkin(2) + t1010;
t1011 = t1065 * t1037 + t1069 * t1038;
t1009 = -t1055 * pkin(2) + t1011;
t988 = t1068 * t1008 - t1064 * t1009;
t1073 = t1050 * pkin(3) + t988;
t989 = t1064 * t1008 + t1068 * t1009;
t987 = -t1049 * pkin(3) + t989;
t971 = t1061 * t1073 + t1062 * t987;
t1080 = qJD(5) * t1051;
t1063 = sin(qJ(5));
t1079 = t1063 * t1050;
t1067 = cos(qJ(5));
t1078 = t1067 * t1050;
t1058 = t1063 ^ 2;
t1059 = t1067 ^ 2;
t1077 = t1058 + t1059;
t970 = -t1061 * t987 + t1062 * t1073;
t1071 = qJD(5) ^ 2;
t1060 = -g(1) + qJDD(4);
t1043 = -t1070 * qJDD(1) + t1066 * t1072;
t1042 = t1066 * qJDD(1) + t1070 * t1072;
t1041 = t1067 * t1049 * t1063;
t1040 = -t1059 * t1049 - t1071;
t1039 = -t1058 * t1049 - t1071;
t1036 = -qJDD(5) + t1041;
t1035 = qJDD(5) + t1041;
t1027 = t1077 * t1049;
t1022 = t1077 * t1050;
t1017 = -0.2e1 * t1063 * t1080 + t1078;
t1016 = 0.2e1 * t1067 * t1080 + t1079;
t1015 = t1067 * t1036 - t1063 * t1039;
t1014 = -t1063 * t1035 + t1067 * t1040;
t1013 = t1063 * t1036 + t1067 * t1039;
t1012 = t1067 * t1035 + t1063 * t1040;
t1001 = t1062 * t1022 - t1061 * t1027;
t1000 = t1061 * t1022 + t1062 * t1027;
t995 = t1062 * t1015 + t1061 * t1016;
t994 = t1062 * t1014 - t1061 * t1017;
t993 = t1061 * t1015 - t1062 * t1016;
t992 = t1061 * t1014 + t1062 * t1017;
t991 = -t1065 * t1010 + t1069 * t1011;
t990 = t1069 * t1010 + t1065 * t1011;
t983 = -t1064 * t1000 + t1068 * t1001;
t982 = t1068 * t1000 + t1064 * t1001;
t977 = -t1064 * t993 + t1068 * t995;
t976 = -t1064 * t992 + t1068 * t994;
t975 = t1064 * t995 + t1068 * t993;
t974 = t1064 * t994 + t1068 * t992;
t973 = -t1064 * t988 + t1068 * t989;
t972 = t1064 * t989 + t1068 * t988;
t969 = -t1065 * t982 + t1069 * t983;
t968 = t1065 * t983 + t1069 * t982;
t967 = -t1049 * pkin(4) + t1050 * pkin(8) + t971;
t966 = -t1050 * pkin(4) - t1049 * pkin(8) - t970;
t965 = t1063 * t1060 + t1067 * t967;
t964 = t1067 * t1060 - t1063 * t967;
t963 = -t1065 * t975 + t1069 * t977;
t962 = -t1065 * t974 + t1069 * t976;
t961 = t1065 * t977 + t1069 * t975;
t960 = t1065 * t976 + t1069 * t974;
t959 = -t1065 * t972 + t1069 * t973;
t958 = t1065 * t973 + t1069 * t972;
t957 = -t1061 * t970 + t1062 * t971;
t956 = t1061 * t971 + t1062 * t970;
t955 = -t1063 * t964 + t1067 * t965;
t954 = t1063 * t965 + t1067 * t964;
t953 = t1061 * t966 + t1062 * t955;
t952 = t1061 * t955 - t1062 * t966;
t951 = -t1064 * t956 + t1068 * t957;
t950 = t1064 * t957 + t1068 * t956;
t949 = -t1064 * t952 + t1068 * t953;
t948 = t1064 * t953 + t1068 * t952;
t947 = -t1065 * t950 + t1069 * t951;
t946 = t1065 * t951 + t1069 * t950;
t945 = -t1065 * t948 + t1069 * t949;
t944 = t1065 * t949 + t1069 * t948;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1060, 0, 0, 0, 0, 0, 0, t1012, t1013, 0, t954; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1043, t1042, 0, -t1066 * t1045 - t1070 * t1046, 0, 0, 0, 0, 0, 0, t1087, -t1088, 0, -t1066 * t991 - t1070 * t990, 0, 0, 0, 0, 0, 0, t1095, -t1096, 0, -t1066 * t959 - t1070 * t958, 0, 0, 0, 0, 0, 0, t1100, -t1101, 0, -t1066 * t947 - t1070 * t946, 0, 0, 0, 0, 0, 0, -t1066 * t962 - t1070 * t960, -t1066 * t963 - t1070 * t961, -t1066 * t969 - t1070 * t968, -t1066 * t945 - t1070 * t944; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1042, t1043, 0, t1070 * t1045 - t1066 * t1046, 0, 0, 0, 0, 0, 0, t1088, t1087, 0, -t1066 * t990 + t1070 * t991, 0, 0, 0, 0, 0, 0, t1096, t1095, 0, -t1066 * t958 + t1070 * t959, 0, 0, 0, 0, 0, 0, t1101, t1100, 0, -t1066 * t946 + t1070 * t947, 0, 0, 0, 0, 0, 0, -t1066 * t960 + t1070 * t962, -t1066 * t961 + t1070 * t963, -t1066 * t968 + t1070 * t969, -t1066 * t944 + t1070 * t945; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1072, -qJDD(1), 0, t1045, 0, 0, 0, 0, 0, 0, t1074, t1033, 0, t991, 0, 0, 0, 0, 0, 0, t1089, t1004, 0, t959, 0, 0, 0, 0, 0, 0, t1097, t980, 0, t947, 0, 0, 0, 0, 0, 0, t962, t963, t969, t945; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1072, 0, t1046, 0, 0, 0, 0, 0, 0, -t1033, t1074, 0, t990, 0, 0, 0, 0, 0, 0, -t1004, t1089, 0, t958, 0, 0, 0, 0, 0, 0, -t980, t1097, 0, t946, 0, 0, 0, 0, 0, 0, t960, t961, t968, t944; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1060, 0, 0, 0, 0, 0, 0, t1012, t1013, 0, t954; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1055, -t1056, 0, t1011, 0, 0, 0, 0, 0, 0, t1075, t1025, 0, t973, 0, 0, 0, 0, 0, 0, t1090, t998, 0, t951, 0, 0, 0, 0, 0, 0, t976, t977, t983, t949; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1056, -t1055, 0, t1010, 0, 0, 0, 0, 0, 0, -t1025, t1075, 0, t972, 0, 0, 0, 0, 0, 0, -t998, t1090, 0, t950, 0, 0, 0, 0, 0, 0, t974, t975, t982, t948; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1060, 0, 0, 0, 0, 0, 0, t1012, t1013, 0, t954; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1049, -t1050, 0, t989, 0, 0, 0, 0, 0, 0, t1076, t1020, 0, t957, 0, 0, 0, 0, 0, 0, t994, t995, t1001, t953; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1050, -t1049, 0, t988, 0, 0, 0, 0, 0, 0, -t1020, t1076, 0, t956, 0, 0, 0, 0, 0, 0, t992, t993, t1000, t952; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1060, 0, 0, 0, 0, 0, 0, t1012, t1013, 0, t954; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1049, -t1050, 0, t971, 0, 0, 0, 0, 0, 0, t1014, t1015, t1022, t955; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1050, -t1049, 0, t970, 0, 0, 0, 0, 0, 0, t1017, -t1016, t1027, -t966; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1060, 0, 0, 0, 0, 0, 0, t1012, t1013, 0, t954; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1040, t1036, t1078, t965; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1035, t1039, -t1079, t964; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1017, t1016, -t1027, t966;];
f_new_reg = t1;
