% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PRPRP4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d4,theta1,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:36
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PRPRP4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRP4_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRP4_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRP4_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRP4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRPRP4_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:36:20
% EndTime: 2019-12-05 15:36:28
% DurationCPUTime: 8.66s
% Computational Cost: add. (16058->451), mult. (29671->531), div. (0->0), fcn. (17939->8), ass. (0->299)
t797 = qJD(4) ^ 2;
t793 = sin(qJ(4));
t782 = t793 ^ 2;
t798 = qJD(2) ^ 2;
t875 = t782 * t798;
t762 = t797 + t875;
t795 = cos(qJ(4));
t767 = t793 * t798 * t795;
t760 = qJDD(4) - t767;
t855 = t795 * t760;
t717 = -t793 * t762 + t855;
t845 = qJD(2) * qJD(4);
t773 = t795 * t845;
t842 = t793 * qJDD(2);
t745 = 0.2e1 * t773 + t842;
t787 = sin(pkin(8));
t789 = cos(pkin(8));
t659 = t787 * t717 + t789 * t745;
t662 = t789 * t717 - t787 * t745;
t794 = sin(qJ(2));
t796 = cos(qJ(2));
t609 = t794 * t659 - t796 * t662;
t862 = t793 * t760;
t711 = t795 * t762 + t862;
t788 = sin(pkin(7));
t790 = cos(pkin(7));
t926 = qJ(1) * (t790 * t609 - t788 * t711);
t925 = qJ(1) * (t788 * t609 + t790 * t711);
t605 = t796 * t659 + t794 * t662;
t924 = pkin(1) * t605;
t923 = pkin(5) * t605;
t922 = -pkin(1) * t711 - pkin(5) * t609;
t772 = t793 * t845;
t841 = t795 * qJDD(2);
t747 = -0.2e1 * t772 + t841;
t857 = t795 * t747;
t865 = t793 * t745;
t679 = -t857 + t865;
t783 = t795 ^ 2;
t756 = (t782 - t783) * t798;
t649 = t787 * t679 + t789 * t756;
t651 = t789 * t679 - t787 * t756;
t598 = t794 * t649 - t796 * t651;
t858 = t795 * t745;
t864 = t793 * t747;
t676 = t858 + t864;
t921 = t788 * t598 - t790 * t676;
t920 = t790 * t598 + t788 * t676;
t874 = t783 * t798;
t764 = -t797 + t874;
t715 = -t795 * t764 + t862;
t665 = t787 * t715 + t789 * t841;
t668 = t789 * t715 - t787 * t841;
t621 = t794 * t665 - t796 * t668;
t707 = t793 * t764 + t855;
t917 = t788 * t621 - t790 * t707;
t916 = t790 * t621 + t788 * t707;
t915 = pkin(2) * t659;
t914 = qJ(3) * t659;
t913 = -pkin(2) * t711 + qJ(3) * t662;
t597 = t796 * t649 + t794 * t651;
t619 = t796 * t665 + t794 * t668;
t758 = t790 * g(1) + t788 * g(2);
t784 = g(3) - qJDD(1);
t726 = -t796 * t758 - t794 * t784;
t720 = -t798 * pkin(2) + t726;
t725 = -t794 * t758 + t796 * t784;
t804 = qJDD(2) * pkin(2) - t725;
t644 = t787 * t720 - t789 * t804;
t645 = t789 * t720 + t787 * t804;
t831 = t787 * t644 + t789 * t645;
t582 = t789 * t644 - t787 * t645;
t854 = t796 * t582;
t552 = -t794 * t831 + t854;
t861 = t794 * t582;
t912 = t796 * t831 + t861;
t757 = t788 * g(1) - t790 * g(2);
t749 = -qJDD(3) + t757;
t750 = t787 * qJDD(2) + t789 * t798;
t692 = qJ(3) * t750 - t789 * t749;
t751 = t789 * qJDD(2) - t787 * t798;
t811 = -qJ(3) * t751 - t787 * t749;
t829 = -t794 * t750 + t796 * t751;
t911 = -pkin(5) * t829 + t794 * t692 + t796 * t811;
t908 = pkin(3) * t711;
t907 = pkin(6) * t711;
t640 = -t798 * pkin(3) + qJDD(2) * pkin(6) + t645;
t730 = t795 * t749;
t815 = pkin(4) * t795 + qJ(5) * t793;
t847 = t798 * t815;
t600 = -qJDD(4) * pkin(4) - t797 * qJ(5) + (t640 - t847) * t793 + qJDD(5) + t730;
t759 = qJDD(4) + t767;
t765 = -t797 - t874;
t900 = pkin(4) * t759 + qJ(5) * t765 - t600;
t899 = -pkin(3) * t745 - pkin(6) * t717;
t682 = t796 * t750 + t794 * t751;
t613 = pkin(5) * t682 + t796 * t692 - t794 * t811;
t844 = (qJD(5) * qJD(4));
t778 = 2 * t844;
t629 = t795 * t640 - t793 * t749;
t812 = -t797 * pkin(4) + qJDD(4) * qJ(5) - t795 * t847 + t629;
t593 = t778 + t812;
t848 = t782 + t783;
t755 = t848 * t798;
t579 = pkin(4) * t755 + t593;
t584 = qJ(5) * t755 + t600;
t894 = -t795 * t579 - t793 * t584;
t628 = t793 * t640 + t730;
t567 = t793 * t628 + t795 * t629;
t734 = t790 * t757;
t893 = -t788 * t758 + t734;
t559 = t795 * t593 + t793 * t600;
t639 = -qJDD(2) * pkin(3) - t798 * pkin(6) + t644;
t746 = -t772 + t841;
t825 = t773 + t842;
t802 = -t746 * pkin(4) + t639 + (-t773 - t825) * qJ(5);
t846 = qJD(2) * t793;
t592 = (pkin(4) * qJD(4) - (2 * qJD(5))) * t846 + t802;
t537 = t787 * t559 - t789 * t592;
t801 = pkin(6) * t559 + (-pkin(3) - t815) * t592;
t892 = pkin(2) * t537 + t801;
t863 = t793 * t759;
t714 = t795 * t765 - t863;
t658 = t787 * t714 + t789 * t747;
t661 = t789 * t714 - t787 * t747;
t604 = t796 * t658 + t794 * t661;
t889 = pkin(1) * t604;
t887 = pkin(2) * t582;
t856 = t795 * t759;
t708 = t793 * t765 + t856;
t886 = pkin(3) * t708;
t883 = pkin(5) * t604;
t752 = t848 * qJDD(2);
t690 = t787 * t752 + t789 * t755;
t693 = t789 * t752 - t787 * t755;
t632 = t796 * t690 + t794 * t693;
t882 = pkin(5) * t632;
t881 = pkin(6) * t708;
t607 = -t794 * t658 + t796 * t661;
t880 = qJ(1) * (t788 * t607 - t790 * t708);
t633 = -t794 * t690 + t796 * t693;
t879 = qJ(1) * t633;
t878 = qJ(3) * t658;
t877 = qJ(3) * t690;
t871 = t788 * t757;
t869 = t788 * t784;
t866 = t790 * t784;
t634 = t793 * t639;
t635 = t795 * t639;
t852 = -pkin(1) * t708 + pkin(5) * t607;
t851 = -pkin(3) * t639 + pkin(6) * t567;
t850 = pkin(3) * t747 + pkin(6) * t714;
t849 = pkin(3) * t755 + pkin(6) * t752;
t843 = t790 * qJDD(2);
t840 = t634 + t899;
t839 = -t635 + t850;
t836 = -pkin(2) * t708 + qJ(3) * t661;
t817 = -pkin(2) * t750 - t645;
t601 = pkin(1) * t682 - t817;
t835 = -qJ(1) * t829 + t601;
t808 = pkin(2) * t751 - t644;
t602 = -pkin(1) * t829 - t808;
t834 = -qJ(1) * t682 + t602;
t753 = t794 * qJDD(2) + t796 * t798;
t674 = pkin(1) * t753 + t726;
t754 = t796 * qJDD(2) - t794 * t798;
t833 = qJ(1) * t754 - t674;
t675 = -pkin(1) * t754 + t725;
t832 = qJ(1) * t753 - t675;
t830 = t794 * t725 + t796 * t726;
t827 = -t790 * t758 - t871;
t824 = t787 * t767;
t823 = t789 * t767;
t822 = t849 - t894;
t821 = t849 + t567;
t657 = pkin(2) * t658;
t820 = t657 + t839;
t555 = t787 * t567 - t789 * t639;
t818 = pkin(2) * t555 + t851;
t816 = -pkin(4) * t600 + qJ(5) * t593;
t814 = pkin(4) * t793 - qJ(5) * t795;
t704 = pkin(5) * t753 - t796 * t757;
t813 = -pkin(5) * t754 - t794 * t757;
t566 = t795 * t628 - t793 * t629;
t654 = t796 * t725 - t794 * t726;
t681 = pkin(2) * t690;
t810 = -pkin(1) * t632 - t681 - t849;
t809 = t840 - t915;
t800 = 0.2e1 * qJD(5) * t846 - t802;
t575 = -pkin(4) * t772 + qJ(5) * t745 + t800;
t807 = pkin(4) * t858 + t793 * t575 - t899;
t576 = (t747 - t772) * pkin(4) + t800;
t806 = qJ(5) * t864 + t795 * t576 + t850;
t805 = t657 + t806;
t803 = t807 + t915;
t799 = pkin(4) * t762 + qJ(5) * t760 + t812;
t774 = t788 * qJDD(2);
t763 = -t797 + t875;
t761 = t793 * t773;
t742 = t814 * qJDD(2);
t741 = t848 * t845;
t724 = -t782 * t845 + t795 * t825;
t723 = -t793 * t746 - t783 * t845;
t722 = t787 * qJDD(4) + t789 * t741;
t721 = -t789 * qJDD(4) + t787 * t741;
t716 = t793 * t763 + t856;
t710 = -t795 * t763 + t863;
t706 = t795 * t746 - t761;
t705 = -t793 * t825 - t761;
t680 = qJ(3) * t693;
t673 = t789 * t724 - t824;
t672 = t789 * t723 + t824;
t671 = t787 * t724 + t823;
t670 = t787 * t723 - t823;
t669 = t789 * t716 + t787 * t842;
t666 = t787 * t716 - t789 * t842;
t647 = -t794 * t721 + t796 * t722;
t646 = t796 * t721 + t794 * t722;
t643 = t790 * t647;
t642 = t788 * t647;
t638 = pkin(1) * t757 + pkin(5) * t830;
t631 = pkin(5) * t633;
t630 = t790 * t879;
t627 = -t794 * t671 + t796 * t673;
t626 = -t794 * t670 + t796 * t672;
t625 = t796 * t671 + t794 * t673;
t624 = t796 * t670 + t794 * t672;
t623 = -t794 * t666 + t796 * t669;
t620 = t796 * t666 + t794 * t669;
t615 = t635 + t907;
t614 = t634 - t881;
t595 = t629 + t908;
t594 = t628 - t886;
t590 = t790 * t627 - t788 * t705;
t589 = t790 * t626 + t788 * t706;
t588 = t788 * t627 + t790 * t705;
t587 = t788 * t626 - t790 * t706;
t586 = t790 * t623 + t788 * t710;
t585 = t788 * t623 - t790 * t710;
t571 = qJ(1) * (t790 * t607 + t788 * t708);
t570 = pkin(2) * t749 + qJ(3) * t831;
t569 = -t886 - t900;
t568 = -t799 - (2 * t844) - t908;
t564 = -pkin(4) * t865 + t795 * t575 - t907;
t563 = qJ(5) * t857 - t793 * t576 - t881;
t561 = t789 * t566 - t877;
t560 = t787 * t566 + t680;
t558 = t793 * t593 - t795 * t600;
t556 = t789 * t567 + t787 * t639;
t554 = -t793 * t579 + t795 * t584;
t549 = -t809 + t924;
t548 = -t820 - t889;
t547 = -t787 * t595 + t789 * t615 + t914;
t546 = -t787 * t594 + t789 * t614 - t878;
t545 = t789 * t595 + t787 * t615 - t913;
t544 = t789 * t594 + t787 * t614 + t836;
t543 = t810 - t567;
t542 = t789 * t554 - t787 * t742 - t877;
t541 = t787 * t554 + t789 * t742 + t680;
t540 = -t803 - t924;
t539 = -t805 - t889;
t538 = t789 * t559 + t787 * t592;
t536 = t810 + t894;
t535 = pkin(1) * t552 + t887;
t534 = t789 * t563 - t787 * t569 - t878;
t533 = t789 * t564 - t787 * t568 - t914;
t532 = t787 * t563 + t789 * t569 + t836;
t531 = t787 * t564 + t789 * t568 + t913;
t530 = -pkin(3) * t558 - t816;
t529 = -pkin(6) * t558 + t814 * t592;
t528 = -t794 * t560 + t796 * t561 - t882;
t527 = t796 * t560 + t794 * t561 + t631;
t526 = -t794 * t555 + t796 * t556;
t525 = t796 * t555 + t794 * t556;
t524 = pkin(5) * t552 + qJ(3) * t854 - t794 * t570;
t523 = pkin(1) * t749 + pkin(5) * t912 + qJ(3) * t861 + t796 * t570;
t522 = -qJ(3) * t555 - (pkin(3) * t787 - pkin(6) * t789) * t566;
t521 = -t794 * t545 + t796 * t547 + t923;
t520 = -t794 * t544 + t796 * t546 - t883;
t519 = t796 * t545 + t794 * t547 - t922;
t518 = t796 * t544 + t794 * t546 + t852;
t517 = -t794 * t541 + t796 * t542 - t882;
t516 = t796 * t541 + t794 * t542 + t631;
t515 = -t794 * t537 + t796 * t538;
t514 = t796 * t537 + t794 * t538;
t513 = qJ(3) * t556 - (-pkin(3) * t789 - pkin(6) * t787 - pkin(2)) * t566;
t512 = -t794 * t532 + t796 * t534 - t883;
t511 = -t794 * t531 + t796 * t533 - t923;
t510 = t796 * t532 + t794 * t534 + t852;
t509 = t796 * t531 + t794 * t533 + t922;
t508 = -pkin(1) * t525 - t818;
t507 = -qJ(3) * t537 + t789 * t529 - t787 * t530;
t506 = -pkin(2) * t558 + qJ(3) * t538 + t787 * t529 + t789 * t530;
t505 = -pkin(1) * t514 - t892;
t504 = -pkin(5) * t525 - t794 * t513 + t796 * t522;
t503 = pkin(1) * t566 + pkin(5) * t526 + t796 * t513 + t794 * t522;
t502 = -pkin(5) * t514 - t794 * t506 + t796 * t507;
t501 = -pkin(1) * t558 + pkin(5) * t515 + t796 * t506 + t794 * t507;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t869, -t866, -t893, -qJ(1) * t893, 0, 0, t790 * t754, 0, -t790 * t753, t774, t788 * t832 + t790 * t813, t790 * t704 + t788 * t833, t790 * t654, -qJ(1) * (t788 * t830 + t734) - (t788 * pkin(1) - t790 * pkin(5)) * t654, 0, 0, t790 * t829, 0, -t790 * t682, t774, -t788 * t834 + t790 * t911, t790 * t613 - t788 * t835, t790 * t552, t790 * t524 - t788 * t535 - qJ(1) * (t790 * t749 + t788 * t912), t590, t920, t586, t589, t916, t643, t790 * t520 - t788 * t548 - t880, t790 * t521 - t788 * t549 - t925, t790 * t528 + (-t543 - t879) * t788, t790 * t504 - t788 * t508 - qJ(1) * (t788 * t526 + t566 * t790), t590, t586, -t920, t643, -t916, t589, t790 * t512 - t788 * t539 - t880, t790 * t517 + (-t536 - t879) * t788, t790 * t511 - t788 * t540 + t925, t790 * t502 - t788 * t505 - qJ(1) * (t788 * t515 - t790 * t558); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t866, -t869, t827, qJ(1) * t827, 0, 0, t788 * t754, 0, -t788 * t753, -t843, t788 * t813 - t790 * t832, t788 * t704 - t790 * t833, t788 * t654, qJ(1) * (t790 * t830 - t871) - (-t790 * pkin(1) - t788 * pkin(5)) * t654, 0, 0, t788 * t829, 0, -t788 * t682, -t843, t788 * t911 + t790 * t834, t788 * t613 + t790 * t835, t788 * t552, t788 * t524 + t790 * t535 + qJ(1) * (-t788 * t749 + t790 * t912), t588, t921, t585, t587, t917, t642, t788 * t520 + t790 * t548 + t571, t788 * t521 + t790 * t549 + t926, t788 * t528 + t790 * t543 + t630, t788 * t504 + t790 * t508 + qJ(1) * (t790 * t526 - t566 * t788), t588, t585, -t921, t642, -t917, t587, t788 * t512 + t790 * t539 + t571, t788 * t517 + t790 * t536 + t630, t788 * t511 + t790 * t540 - t926, t788 * t502 + t790 * t505 + qJ(1) * (t790 * t515 + t788 * t558); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t757, t758, 0, 0, 0, 0, t753, 0, t754, 0, -t704, t813, t830, t638, 0, 0, t682, 0, t829, 0, -t613, t911, t912, t523, t625, -t597, t620, t624, -t619, t646, t518, t519, t527, t503, t625, t620, t597, t646, t619, t624, t510, t516, t509, t501; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t784, -t757, 0, 0, 0, t754, 0, -t753, 0, t813, t704, t654, pkin(5) * t654, 0, 0, t829, 0, -t682, 0, t911, t613, t552, t524, t627, t598, t623, t626, t621, t647, t520, t521, t528, t504, t627, t623, -t598, t647, -t621, t626, t512, t517, t511, t502; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t784, 0, -t758, 0, 0, 0, 0, 0, 0, -qJDD(2), t675, t674, 0, pkin(1) * t654, 0, 0, 0, 0, 0, -qJDD(2), t602, t601, 0, t535, t705, -t676, -t710, -t706, -t707, 0, t548, t549, t543, t508, t705, -t710, t676, 0, t707, -t706, t539, t536, t540, t505; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t757, t758, 0, 0, 0, 0, t753, 0, t754, 0, -t704, t813, t830, t638, 0, 0, t682, 0, t829, 0, -t613, t911, t912, t523, t625, -t597, t620, t624, -t619, t646, t518, t519, t527, t503, t625, t620, t597, t646, t619, t624, t510, t516, t509, t501; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t798, 0, 0, -t757, t725, 0, 0, 0, t751, 0, -t750, 0, t811, t692, t582, qJ(3) * t582, t673, -t651, t669, t672, -t668, t722, t546, t547, t561, t522, t673, t669, t651, t722, t668, t672, t534, t542, t533, t507; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t798, 0, qJDD(2), 0, t757, 0, t726, 0, 0, 0, t750, 0, t751, 0, -t692, t811, t831, t570, t671, -t649, t666, t670, -t665, t721, t544, t545, t560, t513, t671, t666, t649, t721, t665, t670, t532, t541, t531, t506; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t725, -t726, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t808, t817, 0, -t887, -t705, t676, t710, t706, t707, 0, t820, t809, t681 + t821, t818, -t705, t710, -t676, 0, -t707, t706, t805, t681 + t822, t803, t892; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t798, 0, 0, -t749, t644, 0, t724, -t679, t716, t723, -t715, t741, t614, t615, t566, pkin(6) * t566, t724, t716, t679, t741, t715, t723, t563, t554, t564, t529; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t798, 0, qJDD(2), 0, t749, 0, t645, 0, t767, -t756, -t842, -t767, -t841, -qJDD(4), t594, t595, 0, pkin(3) * t566, t767, -t842, t756, -qJDD(4), t841, -t767, t569, t742, t568, t530; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t644, -t645, 0, 0, -t705, t676, t710, t706, t707, 0, t839, t840, t821, t851, -t705, t710, -t676, 0, -t707, t706, t806, t822, t807, t801; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t825, t747, t759, -t773, t764, t773, 0, t639, t628, 0, t825, t759, -t747, t773, -t764, -t773, qJ(5) * t747, t584, t575, -qJ(5) * t592; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t772, t745, -t763, t746, t760, -t772, -t639, 0, t629, 0, t772, -t763, -t745, -t772, -t760, t746, t576, t579, pkin(4) * t745, -pkin(4) * t592; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t767, t756, t842, t767, t841, qJDD(4), -t628, -t629, 0, 0, -t767, t842, -t756, qJDD(4), -t841, t767, t900, -t742, t778 + t799, t816; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t825, t759, -t747, t773, -t764, -t773, 0, t600, -t592, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t767, t842, -t756, qJDD(4), -t841, t767, -t600, 0, t593, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t772, t763, t745, t772, t760, -t746, t592, -t593, 0, 0;];
m_new_reg = t1;
