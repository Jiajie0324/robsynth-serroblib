% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PPRPR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d5,theta1,theta2,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:01
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PPRPR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRPR1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRPR1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRPR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRPR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PPRPR1_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:01:45
% EndTime: 2019-12-05 15:01:47
% DurationCPUTime: 1.80s
% Computational Cost: add. (4818->145), mult. (9697->226), div. (0->0), fcn. (7343->10), ass. (0->125)
t1018 = qJD(3) ^ 2;
t1007 = sin(pkin(9));
t1002 = t1007 ^ 2;
t1010 = cos(pkin(9));
t1003 = t1010 ^ 2;
t1027 = t1002 + t1003;
t986 = t1027 * t1018;
t1013 = sin(qJ(5));
t1015 = cos(qJ(5));
t1021 = t1007 * t1015 + t1010 * t1013;
t974 = t1021 * qJDD(3);
t1031 = qJD(3) * t1010;
t1032 = qJD(3) * t1007;
t975 = t1013 * t1032 - t1015 * t1031;
t1037 = t975 ^ 2;
t977 = t1021 * qJD(3);
t1036 = t977 ^ 2;
t1035 = t977 * t975;
t1014 = sin(qJ(3));
t1016 = cos(qJ(3));
t1005 = -g(3) + qJDD(1);
t1008 = sin(pkin(8));
t1011 = cos(pkin(8));
t1009 = sin(pkin(7));
t1012 = cos(pkin(7));
t990 = -t1012 * g(1) - t1009 * g(2);
t1022 = t1011 * t1005 - t1008 * t990;
t970 = t1008 * t1005 + t1011 * t990;
t951 = t1014 * t1022 + t1016 * t970;
t989 = t1009 * g(1) - t1012 * g(2);
t984 = -qJDD(2) + t989;
t1034 = -0.2e1 * qJD(4) * t1032 - t1010 * t984;
t1033 = t1009 * t984;
t1030 = t1002 * t1018;
t1029 = t1003 * t1018;
t1028 = t1010 * t1018;
t1026 = t1007 * qJDD(3);
t999 = t1010 * qJDD(3);
t1025 = t1014 * qJDD(3);
t1024 = t1016 * qJDD(3);
t945 = -t1018 * pkin(3) + qJDD(3) * qJ(4) + t951;
t929 = 0.2e1 * qJD(4) * t1031 - t1007 * t984 + t1010 * t945;
t987 = -t1014 * t1018 + t1024;
t988 = -t1016 * t1018 - t1025;
t1023 = -t1008 * t987 + t1011 * t988;
t950 = -t1014 * t970 + t1016 * t1022;
t946 = -t1013 * t1026 + t1015 * t999;
t960 = t1008 * t988 + t1011 * t987;
t944 = -qJDD(3) * pkin(3) - t1018 * qJ(4) + qJDD(4) - t950;
t1017 = qJD(5) ^ 2;
t991 = t1007 * t1028;
t985 = t1027 * qJDD(3);
t983 = t1010 * t986;
t982 = t1007 * t986;
t980 = t1012 * t984;
t971 = -t1017 - t1036;
t966 = -t1010 * t1025 - t1016 * t983;
t965 = t1007 * t1025 + t1016 * t982;
t964 = t1010 * t1024 - t1014 * t983;
t963 = -t1007 * t1024 + t1014 * t982;
t958 = -t1014 * t986 + t1016 * t985;
t957 = t1014 * t985 + t1016 * t986;
t956 = -0.2e1 * t975 * qJD(5) + t974;
t955 = 0.2e1 * t977 * qJD(5) - t946;
t954 = -qJDD(5) - t1035;
t953 = qJDD(5) - t1035;
t952 = -t1017 - t1037;
t949 = -t1008 * t1022 + t1011 * t970;
t948 = t1008 * t970 + t1011 * t1022;
t947 = -t1036 - t1037;
t942 = -t1008 * t964 + t1011 * t966;
t941 = -t1008 * t963 + t1011 * t965;
t940 = t1008 * t966 + t1011 * t964;
t939 = t1008 * t965 + t1011 * t963;
t938 = -t1013 * t971 + t1015 * t954;
t937 = t1013 * t954 + t1015 * t971;
t936 = -t1008 * t957 + t1011 * t958;
t935 = t1008 * t958 + t1011 * t957;
t934 = -pkin(4) * t999 + t944 + (-t1029 - t1030) * pkin(6);
t933 = t1013 * t974 + t1015 * t946;
t932 = t1013 * t946 - t1015 * t974;
t931 = -t1013 * t953 + t1015 * t952;
t930 = t1013 * t952 + t1015 * t953;
t928 = -t1007 * t945 + t1034;
t927 = -pkin(4) * t1029 + pkin(6) * t999 + t929;
t926 = (pkin(4) * t1028 - pkin(6) * qJDD(3) - t945) * t1007 + t1034;
t925 = -t1014 * t950 + t1016 * t951;
t924 = t1014 * t951 + t1016 * t950;
t923 = -t1007 * t937 + t1010 * t938;
t922 = t1007 * t938 + t1010 * t937;
t921 = -t1007 * t932 + t1010 * t933;
t920 = t1007 * t933 + t1010 * t932;
t919 = -t1007 * t930 + t1010 * t931;
t918 = t1007 * t931 + t1010 * t930;
t917 = -t1007 * t928 + t1010 * t929;
t916 = t1007 * t929 + t1010 * t928;
t915 = t1014 * t956 + t1016 * t923;
t914 = t1014 * t923 - t1016 * t956;
t913 = t1013 * t926 + t1015 * t927;
t912 = -t1013 * t927 + t1015 * t926;
t911 = t1014 * t955 + t1016 * t919;
t910 = t1014 * t919 - t1016 * t955;
t909 = t1014 * t947 + t1016 * t921;
t908 = t1014 * t921 - t1016 * t947;
t907 = -t1008 * t924 + t1011 * t925;
t906 = t1008 * t925 + t1011 * t924;
t905 = t1014 * t944 + t1016 * t917;
t904 = t1014 * t917 - t1016 * t944;
t903 = -t1008 * t914 + t1011 * t915;
t902 = t1008 * t915 + t1011 * t914;
t901 = -t1013 * t912 + t1015 * t913;
t900 = t1013 * t913 + t1015 * t912;
t899 = -t1008 * t910 + t1011 * t911;
t898 = t1008 * t911 + t1011 * t910;
t897 = -t1008 * t908 + t1011 * t909;
t896 = t1008 * t909 + t1011 * t908;
t895 = -t1008 * t904 + t1011 * t905;
t894 = t1008 * t905 + t1011 * t904;
t893 = -t1007 * t900 + t1010 * t901;
t892 = t1007 * t901 + t1010 * t900;
t891 = t1014 * t934 + t1016 * t893;
t890 = t1014 * t893 - t1016 * t934;
t889 = -t1008 * t890 + t1011 * t891;
t888 = t1008 * t891 + t1011 * t890;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1009 * t989 + t1012 * t990, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1012 * t949 - t1033, 0, 0, 0, 0, 0, 0, t1012 * t1023, -t1012 * t960, 0, t1012 * t907 - t1033, 0, 0, 0, 0, 0, 0, t1012 * t942, t1012 * t941, t1012 * t936, t1009 * t916 + t1012 * t895, 0, 0, 0, 0, 0, 0, t1009 * t918 + t1012 * t899, t1009 * t922 + t1012 * t903, t1009 * t920 + t1012 * t897, t1009 * t892 + t1012 * t889; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1009 * t990 + t1012 * t989, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1009 * t949 + t980, 0, 0, 0, 0, 0, 0, t1009 * t1023, -t1009 * t960, 0, t1009 * t907 + t980, 0, 0, 0, 0, 0, 0, t1009 * t942, t1009 * t941, t1009 * t936, t1009 * t895 - t1012 * t916, 0, 0, 0, 0, 0, 0, t1009 * t899 - t1012 * t918, t1009 * t903 - t1012 * t922, t1009 * t897 - t1012 * t920, t1009 * t889 - t1012 * t892; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1005, 0, 0, 0, 0, 0, 0, 0, 0, 0, t948, 0, 0, 0, 0, 0, 0, t960, t1023, 0, t906, 0, 0, 0, 0, 0, 0, t940, t939, t935, t894, 0, 0, 0, 0, 0, 0, t898, t902, t896, t888; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t990, 0, 0, 0, 0, 0, 0, 0, 0, 0, t949, 0, 0, 0, 0, 0, 0, t1023, -t960, 0, t907, 0, 0, 0, 0, 0, 0, t942, t941, t936, t895, 0, 0, 0, 0, 0, 0, t899, t903, t897, t889; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t989, 0, 0, 0, 0, 0, 0, 0, 0, 0, t984, 0, 0, 0, 0, 0, 0, 0, 0, 0, t984, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t916, 0, 0, 0, 0, 0, 0, -t918, -t922, -t920, -t892; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1005, 0, 0, 0, 0, 0, 0, 0, 0, 0, t948, 0, 0, 0, 0, 0, 0, t960, t1023, 0, t906, 0, 0, 0, 0, 0, 0, t940, t939, t935, t894, 0, 0, 0, 0, 0, 0, t898, t902, t896, t888; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t970, 0, 0, 0, 0, 0, 0, t988, -t987, 0, t925, 0, 0, 0, 0, 0, 0, t966, t965, t958, t905, 0, 0, 0, 0, 0, 0, t911, t915, t909, t891; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1022, 0, 0, 0, 0, 0, 0, t987, t988, 0, t924, 0, 0, 0, 0, 0, 0, t964, t963, t957, t904, 0, 0, 0, 0, 0, 0, t910, t914, t908, t890; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t984, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t984, 0, 0, 0, 0, 0, 0, 0, 0, 0, t916, 0, 0, 0, 0, 0, 0, t918, t922, t920, t892; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1018, -qJDD(3), 0, t951, 0, 0, 0, 0, 0, 0, -t983, t982, t985, t917, 0, 0, 0, 0, 0, 0, t919, t923, t921, t893; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t1018, 0, t950, 0, 0, 0, 0, 0, 0, t999, -t1026, t986, -t944, 0, 0, 0, 0, 0, 0, -t955, -t956, -t947, -t934; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t984, 0, 0, 0, 0, 0, 0, 0, 0, 0, t916, 0, 0, 0, 0, 0, 0, t918, t922, t920, t892; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1029, t991, t999, t929, 0, 0, 0, 0, 0, 0, t931, t938, t933, t901; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t991, -t1030, -t1026, t928, 0, 0, 0, 0, 0, 0, t930, t937, t932, t900; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t999, t1026, -t986, t944, 0, 0, 0, 0, 0, 0, t955, t956, t947, t934; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t952, t954, t946, t913; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t953, t971, -t974, t912; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t955, t956, t947, t934;];
f_new_reg = t1;
