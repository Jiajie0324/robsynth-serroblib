% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PPRPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d5,theta1,theta2,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:01
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PPRPR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRPR1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRPR1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRPR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRPR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PPRPR1_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:01:25
% EndTime: 2019-12-05 15:01:36
% DurationCPUTime: 6.71s
% Computational Cost: add. (17718->416), mult. (35481->660), div. (0->0), fcn. (26550->10), ass. (0->290)
t396 = cos(pkin(9));
t393 = sin(pkin(9));
t388 = t393 ^ 2;
t389 = t396 ^ 2;
t458 = qJD(3) ^ 2;
t460 = t458 * (t388 + t389);
t364 = t396 * t460;
t400 = sin(qJ(3));
t402 = cos(qJ(3));
t429 = qJDD(3) * t402;
t422 = t396 * t429;
t335 = -t364 * t400 + t422;
t430 = qJDD(3) * t400;
t337 = t364 * t402 + t396 * t430;
t394 = sin(pkin(8));
t397 = cos(pkin(8));
t288 = t335 * t394 + t337 * t397;
t395 = sin(pkin(7));
t476 = t395 * t288;
t398 = cos(pkin(7));
t475 = t398 * t288;
t374 = t458 * t402 + t430;
t434 = t400 * t458;
t375 = t429 - t434;
t414 = -t374 * t394 + t397 * t375;
t474 = t395 * t414;
t473 = t398 * t414;
t391 = g(3) - qJDD(1);
t411 = g(1) * t398 + g(2) * t395;
t345 = -t394 * t391 - t397 * t411;
t412 = t391 * t397 - t394 * t411;
t303 = t402 * t345 - t400 * t412;
t468 = -t458 * pkin(3) + qJDD(3) * qJ(4) + (2 * qJD(3) * qJD(4)) + t303;
t302 = t345 * t400 + t402 * t412;
t415 = t302 * t400 + t402 * t303;
t245 = t302 * t402 - t303 * t400;
t455 = t245 * t394;
t190 = t397 * t415 + t455;
t454 = t245 * t397;
t189 = -t394 * t415 + t454;
t376 = g(1) * t395 - t398 * g(2);
t368 = -qJDD(2) + t376;
t332 = pkin(5) * t374 - t368 * t402;
t410 = -pkin(5) * t375 - t368 * t400;
t254 = -qJ(2) * t414 + t332 * t394 + t397 * t410;
t444 = t393 * t396;
t343 = t374 * t444;
t344 = t393 * t422 - t434 * t444;
t297 = t343 * t394 - t344 * t397;
t472 = t297 * t395;
t471 = t297 * t398;
t399 = sin(qJ(5));
t401 = cos(qJ(5));
t443 = t393 * t399;
t355 = (-t396 * t401 + t443) * qJD(3);
t408 = t393 * t401 + t396 * t399;
t357 = t408 * qJD(3);
t315 = t357 * t355;
t461 = qJDD(5) - t315;
t470 = t399 * t461;
t469 = t401 * t461;
t463 = t397 * t374 + t375 * t394;
t255 = qJ(2) * t463 + t332 * t397 - t394 * t410;
t285 = t335 * t397 - t337 * t394;
t385 = t389 * t458;
t437 = t458 * t388;
t371 = t385 + t437;
t462 = t408 * qJDD(3);
t301 = t397 * t345 + t394 * t412;
t300 = -t394 * t345 + t397 * t412;
t351 = t355 ^ 2;
t352 = t357 ^ 2;
t392 = qJDD(3) * pkin(3);
t359 = t396 * t368;
t252 = -t359 + (pkin(4) * t458 * t396 - pkin(6) * qJDD(3) - t468) * t393;
t261 = -t393 * t368 + t468 * t396;
t431 = qJDD(3) * t396;
t253 = -pkin(4) * t385 + pkin(6) * t431 + t261;
t201 = -t401 * t252 + t253 * t399;
t202 = t399 * t252 + t401 * t253;
t172 = -t201 * t401 + t202 * t399;
t457 = t172 * t393;
t456 = t172 * t396;
t292 = -t458 * qJ(4) + qJDD(4) + t302 - t392;
t268 = -pkin(4) * t431 - t371 * pkin(6) + t292;
t453 = t268 * t399;
t452 = t268 * t401;
t451 = t292 * t400;
t450 = t292 * t402;
t308 = qJDD(5) + t315;
t449 = t308 * t399;
t448 = t308 * t401;
t447 = t368 * t395;
t441 = t394 * t368;
t440 = t395 * t391;
t439 = t397 * t368;
t360 = t398 * t368;
t438 = t398 * t391;
t436 = t355 * qJD(5);
t435 = t357 * qJD(5);
t432 = qJDD(3) * t388;
t428 = t395 * qJDD(3);
t427 = t398 * qJDD(3);
t425 = t400 * t315;
t424 = t402 * t315;
t423 = t393 * t431;
t421 = -t292 + t392;
t260 = t468 * t393 + t359;
t215 = t260 * t393 + t261 * t396;
t384 = t389 * qJDD(3);
t369 = t384 + t432;
t318 = t369 * t400 + t371 * t402;
t320 = t369 * t402 - t371 * t400;
t271 = t318 * t397 + t320 * t394;
t272 = -t318 * t394 + t320 * t397;
t420 = -pkin(1) * t271 - pkin(2) * t318 - pkin(3) * t371 + qJ(1) * t272 - qJ(4) * t369 - t215;
t363 = t393 * t460;
t333 = t363 * t400 - t393 * t429;
t336 = t363 * t402 + t393 * t430;
t284 = t333 * t397 + t336 * t394;
t287 = -t333 * t394 + t336 * t397;
t419 = -pkin(1) * t284 - pkin(2) * t333 + qJ(1) * t287 - qJ(4) * t363 + t421 * t393;
t418 = -pkin(1) * t285 - pkin(2) * t335 - qJ(1) * t288 + qJ(4) * t364 - t421 * t396;
t417 = pkin(1) * t463 + pkin(2) * t374 - qJ(1) * t414 + t303;
t416 = -pkin(1) * t414 - pkin(2) * t375 - qJ(1) * t463 + t302;
t173 = t201 * t399 + t401 * t202;
t328 = -t376 * t395 - t398 * t411;
t353 = qJDD(3) * t443 - t401 * t431;
t214 = t260 * t396 - t261 * t393;
t409 = t343 * t397 + t344 * t394;
t406 = -t398 * t376 + t395 * t411;
t403 = qJD(5) ^ 2;
t372 = t385 - t437;
t370 = t384 - t432;
t367 = pkin(1) * t368;
t348 = -t352 - t403;
t347 = -t352 + t403;
t346 = t351 - t403;
t321 = t370 * t402 - t372 * t400;
t319 = t370 * t400 + t372 * t402;
t317 = t398 * t463;
t316 = t395 * t463;
t314 = -t352 + t351;
t313 = t462 - t436;
t312 = t462 - 0.2e1 * t436;
t311 = -t353 - t435;
t310 = t353 + 0.2e1 * t435;
t306 = -t403 - t351;
t305 = (-t355 * t401 + t357 * t399) * qJD(5);
t304 = (-t355 * t399 - t357 * t401) * qJD(5);
t298 = -t351 - t352;
t290 = t313 * t401 - t399 * t435;
t286 = t313 * t399 + t401 * t435;
t283 = -t311 * t399 + t401 * t436;
t282 = t311 * t401 + t399 * t436;
t281 = -t348 * t399 - t448;
t280 = -t347 * t399 + t469;
t279 = t346 * t401 - t449;
t278 = t348 * t401 - t449;
t277 = t347 * t401 + t470;
t276 = t346 * t399 + t448;
t275 = t398 * t287;
t274 = t395 * t287;
t273 = -t319 * t394 + t321 * t397;
t270 = t301 * t398 - t447;
t269 = t301 * t395 + t360;
t267 = -t310 * t401 - t312 * t399;
t266 = -t353 * t401 + t399 * t462;
t265 = -t310 * t399 + t312 * t401;
t264 = -t353 * t399 - t401 * t462;
t263 = t306 * t401 - t470;
t262 = t306 * t399 + t469;
t257 = -t304 * t393 + t305 * t396;
t256 = -t304 * t396 - t305 * t393;
t248 = qJDD(5) * t400 + t257 * t402;
t247 = -qJDD(5) * t402 + t257 * t400;
t242 = pkin(2) * t368 + pkin(5) * t415;
t241 = -t286 * t393 + t290 * t396;
t240 = -t282 * t393 + t283 * t396;
t239 = -t286 * t396 - t290 * t393;
t238 = -t282 * t396 - t283 * t393;
t237 = -t278 * t393 + t281 * t396;
t236 = -t277 * t393 + t280 * t396;
t235 = -t276 * t393 + t279 * t396;
t234 = t278 * t396 + t281 * t393;
t233 = -t277 * t396 - t280 * t393;
t232 = -t276 * t396 - t279 * t393;
t231 = -pkin(6) * t278 + t452;
t230 = t236 * t402 + t400 * t462;
t229 = t235 * t402 - t353 * t400;
t228 = t236 * t400 - t402 * t462;
t227 = t235 * t400 + t353 * t402;
t226 = -pkin(6) * t262 + t453;
t225 = -t265 * t393 + t267 * t396;
t224 = -t264 * t393 + t266 * t396;
t223 = -t265 * t396 - t267 * t393;
t222 = t264 * t396 + t266 * t393;
t221 = -t262 * t393 + t263 * t396;
t220 = t262 * t396 + t263 * t393;
t219 = t241 * t402 + t425;
t218 = t240 * t402 - t425;
t217 = t241 * t400 - t424;
t216 = t240 * t400 + t424;
t210 = t237 * t402 + t312 * t400;
t209 = t237 * t400 - t312 * t402;
t208 = -pkin(5) * t333 - t261 * t400 + t396 * t450;
t207 = -pkin(5) * t335 - t260 * t400 + t393 * t450;
t206 = pkin(5) * t336 + t261 * t402 + t396 * t451;
t205 = -pkin(5) * t337 + t260 * t402 + t393 * t451;
t204 = -pkin(4) * t312 + pkin(6) * t281 + t453;
t203 = -pkin(4) * t310 + pkin(6) * t263 - t452;
t199 = t225 * t402 - t314 * t400;
t198 = t225 * t400 + t314 * t402;
t197 = t221 * t402 + t310 * t400;
t196 = -pkin(5) * t318 + t214 * t402;
t195 = t221 * t400 - t310 * t402;
t194 = pkin(5) * t320 + t214 * t400;
t193 = -t247 * t394 + t248 * t397;
t192 = t224 * t402 + t298 * t400;
t191 = t224 * t400 - t298 * t402;
t187 = t215 * t402 + t451;
t186 = t215 * t400 - t450;
t185 = t190 * t398 - t447;
t184 = t190 * t395 + t360;
t183 = -pkin(3) * t222 - pkin(4) * t264;
t181 = -t228 * t394 + t230 * t397;
t180 = -t227 * t394 + t229 * t397;
t179 = pkin(1) * t189 + pkin(2) * t245;
t178 = -t217 * t394 + t219 * t397;
t177 = -t216 * t394 + t218 * t397;
t176 = -t209 * t394 + t210 * t397;
t175 = t209 * t397 + t210 * t394;
t174 = -pkin(3) * t234 - pkin(4) * t278 + t202;
t171 = -t198 * t394 + t199 * t397;
t170 = -t195 * t394 + t197 * t397;
t169 = t195 * t397 + t197 * t394;
t168 = -qJ(2) * t284 - t206 * t394 + t208 * t397;
t167 = -qJ(2) * t285 - t205 * t394 + t207 * t397;
t166 = -pkin(3) * t220 - pkin(4) * t262 + t201;
t165 = -t191 * t394 + t192 * t397;
t164 = t191 * t397 + t192 * t394;
t163 = pkin(5) * t454 + qJ(2) * t189 - t242 * t394;
t162 = -qJ(4) * t234 - t204 * t393 + t231 * t396;
t161 = -t186 * t394 + t187 * t397;
t160 = t186 * t397 + t187 * t394;
t159 = -pkin(6) * t264 - t172;
t158 = -pkin(4) * t268 + pkin(6) * t173;
t157 = -qJ(2) * t271 - t194 * t394 + t196 * t397;
t156 = t176 * t398 + t234 * t395;
t155 = t176 * t395 - t234 * t398;
t154 = -qJ(4) * t220 - t203 * t393 + t226 * t396;
t153 = -pkin(4) * t298 + pkin(6) * t266 + t173;
t152 = -pkin(5) * t186 - (pkin(3) * t400 - qJ(4) * t402) * t214;
t151 = t170 * t398 + t220 * t395;
t150 = t170 * t395 - t220 * t398;
t149 = t165 * t398 + t222 * t395;
t148 = t165 * t395 - t222 * t398;
t147 = t161 * t398 - t214 * t395;
t146 = t161 * t395 + t214 * t398;
t145 = pkin(5) * t187 - (-pkin(3) * t402 - qJ(4) * t400 - pkin(2)) * t214;
t144 = t173 * t396 - t457;
t143 = t173 * t393 + t456;
t142 = t144 * t402 + t268 * t400;
t141 = t144 * t400 - t268 * t402;
t140 = -pkin(1) * t160 - pkin(2) * t186 + pkin(3) * t292 - qJ(4) * t215;
t139 = -pkin(1) * t175 - pkin(2) * t209 + pkin(3) * t312 - qJ(4) * t237 - t204 * t396 - t231 * t393;
t138 = -pkin(5) * t209 + t162 * t402 - t174 * t400;
t137 = -pkin(2) * t234 + pkin(5) * t210 + t162 * t400 + t174 * t402;
t136 = -qJ(4) * t222 - t153 * t393 + t159 * t396;
t135 = -pkin(5) * t195 + t154 * t402 - t166 * t400;
t134 = -pkin(1) * t169 - pkin(2) * t195 + pkin(3) * t310 - qJ(4) * t221 - t203 * t396 - t226 * t393;
t133 = -pkin(3) * t143 - pkin(4) * t172;
t132 = -pkin(2) * t220 + pkin(5) * t197 + t154 * t400 + t166 * t402;
t131 = -pkin(5) * t191 + t136 * t402 - t183 * t400;
t130 = -pkin(6) * t456 - qJ(4) * t143 - t158 * t393;
t129 = -t141 * t394 + t142 * t397;
t128 = t141 * t397 + t142 * t394;
t127 = -pkin(2) * t222 + pkin(5) * t192 + t136 * t400 + t183 * t402;
t126 = -qJ(2) * t160 - t145 * t394 + t152 * t397;
t125 = -pkin(1) * t164 - pkin(2) * t191 + pkin(3) * t298 - qJ(4) * t224 - t153 * t396 - t159 * t393;
t124 = -qJ(2) * t175 - t137 * t394 + t138 * t397;
t123 = t129 * t398 + t143 * t395;
t122 = t129 * t395 - t143 * t398;
t121 = -qJ(2) * t169 - t132 * t394 + t135 * t397;
t120 = -pkin(5) * t141 + t130 * t402 - t133 * t400;
t119 = -qJ(2) * t164 - t127 * t394 + t131 * t397;
t118 = -pkin(1) * t128 - pkin(2) * t141 + pkin(3) * t268 + pkin(6) * t457 - qJ(4) * t144 - t158 * t396;
t117 = -pkin(2) * t143 + pkin(5) * t142 + t130 * t400 + t133 * t402;
t116 = -qJ(2) * t128 - t117 * t394 + t120 * t397;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t328, 0, 0, 0, 0, 0, 0, 0, 0, 0, t270, 0, 0, 0, 0, 0, 0, -t317, -t473, 0, t185, 0, 0, 0, 0, 0, 0, -t475, t275, t398 * t272, t147, 0, 0, 0, 0, 0, 0, t151, t156, t149, t123; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t406, 0, 0, 0, 0, 0, 0, 0, 0, 0, t269, 0, 0, 0, 0, 0, 0, -t316, -t474, 0, t184, 0, 0, 0, 0, 0, 0, -t476, t274, t395 * t272, t146, 0, 0, 0, 0, 0, 0, t150, t155, t148, t122; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t391, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t300, 0, 0, 0, 0, 0, 0, t414, -t463, 0, -t189, 0, 0, 0, 0, 0, 0, t285, t284, t271, t160, 0, 0, 0, 0, 0, 0, t169, t175, t164, t128; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t440, -t438, t406, qJ(1) * t406, 0, 0, 0, 0, 0, 0, -t394 * t360 - t395 * t412, -t345 * t395 - t397 * t360, t398 * t300, -qJ(1) * t269 - (pkin(1) * t395 - qJ(2) * t398) * t300, 0, 0, t473, 0, -t317, t428, t398 * t254 - t395 * t416, t398 * t255 - t395 * t417, t398 * t189, -qJ(1) * t184 + t163 * t398 - t179 * t395, t388 * t428 - t471, t273 * t398 + 0.2e1 * t395 * t423, t275, t389 * t428 + t471, t475, 0, t398 * t167 - t395 * t418, t398 * t168 - t395 * t419, t398 * t157 - t395 * t420, -qJ(1) * t146 + t126 * t398 - t140 * t395, t178 * t398 - t239 * t395, t171 * t398 - t223 * t395, t181 * t398 - t233 * t395, t177 * t398 - t238 * t395, t180 * t398 - t232 * t395, t193 * t398 - t256 * t395, -qJ(1) * t150 + t121 * t398 - t134 * t395, -qJ(1) * t155 + t124 * t398 - t139 * t395, -qJ(1) * t148 + t119 * t398 - t125 * t395, -qJ(1) * t122 + t116 * t398 - t118 * t395; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t438, -t440, t328, qJ(1) * t328, 0, 0, 0, 0, 0, 0, -t395 * t441 + t398 * t412, t345 * t398 - t395 * t439, t395 * t300, qJ(1) * t270 - (-pkin(1) * t398 - qJ(2) * t395) * t300, 0, 0, t474, 0, -t316, -t427, t395 * t254 + t398 * t416, t395 * t255 + t398 * t417, t395 * t189, qJ(1) * t185 + t163 * t395 + t179 * t398, -t388 * t427 - t472, t273 * t395 - 0.2e1 * t398 * t423, t274, -t389 * t427 + t472, t476, 0, t395 * t167 + t398 * t418, t395 * t168 + t398 * t419, t395 * t157 + t398 * t420, qJ(1) * t147 + t126 * t395 + t140 * t398, t178 * t395 + t239 * t398, t171 * t395 + t223 * t398, t181 * t395 + t233 * t398, t177 * t395 + t238 * t398, t180 * t395 + t232 * t398, t193 * t395 + t256 * t398, qJ(1) * t151 + t121 * t395 + t134 * t398, qJ(1) * t156 + t124 * t395 + t139 * t398, qJ(1) * t149 + t119 * t395 + t125 * t398, qJ(1) * t123 + t116 * t395 + t118 * t398; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t376, t411, 0, 0, 0, 0, 0, 0, 0, 0, t439, -t441, t301, qJ(2) * t301 + t367, 0, 0, t463, 0, t414, 0, -t255, t254, t190, pkin(5) * t455 + qJ(2) * t190 + t242 * t397 + t367, t409, t319 * t397 + t321 * t394, t284, -t409, -t285, 0, -qJ(2) * t288 + t205 * t397 + t207 * t394, qJ(2) * t287 + t206 * t397 + t208 * t394, qJ(2) * t272 + t194 * t397 + t196 * t394, pkin(1) * t214 + qJ(2) * t161 + t145 * t397 + t152 * t394, t217 * t397 + t219 * t394, t198 * t397 + t199 * t394, t228 * t397 + t230 * t394, t216 * t397 + t218 * t394, t227 * t397 + t229 * t394, t247 * t397 + t248 * t394, -pkin(1) * t220 + qJ(2) * t170 + t132 * t397 + t135 * t394, -pkin(1) * t234 + qJ(2) * t176 + t137 * t397 + t138 * t394, -pkin(1) * t222 + qJ(2) * t165 + t127 * t397 + t131 * t394, -pkin(1) * t143 + qJ(2) * t129 + t117 * t397 + t120 * t394;];
tauB_reg = t1;
