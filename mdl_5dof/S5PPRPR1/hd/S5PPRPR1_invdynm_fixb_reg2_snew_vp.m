% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PPRPR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d5,theta1,theta2,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:01
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PPRPR1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRPR1_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRPR1_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRPR1_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRPR1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PPRPR1_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:01:36
% EndTime: 2019-12-05 15:01:45
% DurationCPUTime: 9.99s
% Computational Cost: add. (31417->462), mult. (62880->667), div. (0->0), fcn. (46774->10), ass. (0->317)
t790 = sin(pkin(8));
t787 = g(3) - qJDD(1);
t793 = cos(pkin(8));
t791 = sin(pkin(7));
t794 = cos(pkin(7));
t849 = t794 * g(1) + t791 * g(2);
t729 = -t790 * t787 - t793 * t849;
t796 = sin(qJ(3));
t798 = cos(qJ(3));
t827 = t793 * t787 - t790 * t849;
t687 = t796 * t729 + t798 * t827;
t688 = t798 * t729 - t796 * t827;
t830 = t796 * t687 + t798 * t688;
t622 = t798 * t687 - t796 * t688;
t858 = t793 * t622;
t557 = -t790 * t830 + t858;
t865 = t790 * t622;
t887 = t793 * t830 + t865;
t766 = t791 * g(1) - t794 * g(2);
t758 = -qJDD(2) + t766;
t842 = t796 * qJDD(3);
t872 = qJD(3) ^ 2;
t764 = t798 * t872 + t842;
t716 = pkin(5) * t764 - t798 * t758;
t841 = t798 * qJDD(3);
t765 = -t796 * t872 + t841;
t817 = -pkin(5) * t765 - t796 * t758;
t829 = -t790 * t764 + t793 * t765;
t886 = -qJ(2) * t829 + t790 * t716 + t793 * t817;
t789 = sin(pkin(9));
t792 = cos(pkin(9));
t727 = t764 * t792 * t789;
t846 = t792 * t872;
t768 = t789 * t846;
t836 = t792 * t841;
t728 = -t796 * t768 + t789 * t836;
t680 = t790 * t727 - t793 * t728;
t885 = t791 * t680;
t884 = t794 * t680;
t795 = sin(qJ(5));
t797 = cos(qJ(5));
t740 = (t789 * t795 - t792 * t797) * qJD(3);
t816 = t789 * t797 + t792 * t795;
t742 = t816 * qJD(3);
t702 = t742 * t740;
t876 = qJDD(5) - t702;
t883 = t795 * t876;
t882 = t797 * t876;
t824 = -t872 * pkin(3) + qJDD(3) * qJ(4) + 0.2e1 * qJD(3) * qJD(4) + t688;
t881 = pkin(6) * qJDD(3) + t824;
t707 = t793 * t764 + t790 * t765;
t632 = qJ(2) * t707 + t793 * t716 - t790 * t817;
t785 = t789 ^ 2;
t801 = t792 ^ 2;
t875 = t872 * (t785 + t801);
t752 = t792 * t875;
t719 = -t796 * t752 + t836;
t721 = t798 * t752 + t792 * t842;
t666 = t793 * t719 - t790 * t721;
t669 = t790 * t719 + t793 * t721;
t746 = t792 * t758;
t639 = t824 * t789 + t746;
t866 = t789 * t758;
t640 = t824 * t792 - t866;
t587 = t789 * t639 + t792 * t640;
t780 = t801 * t872;
t847 = t785 * t872;
t761 = t780 + t847;
t874 = t793 * t729 + t790 * t827;
t685 = -t790 * t729 + t793 * t827;
t736 = t740 ^ 2;
t737 = t742 ^ 2;
t871 = pkin(2) * t622;
t627 = -t746 + (pkin(4) * t846 - t881) * t789;
t628 = -pkin(4) * t780 + t881 * t792 - t866;
t571 = -t797 * t627 + t795 * t628;
t572 = t795 * t627 + t797 * t628;
t537 = -t797 * t571 + t795 * t572;
t870 = pkin(4) * t537;
t777 = t789 * qJDD(3);
t779 = t792 * qJDD(3);
t738 = t795 * t777 - t797 * t779;
t739 = t816 * qJDD(3);
t644 = -t738 * t795 - t797 * t739;
t869 = pkin(4) * t644;
t867 = t789 * t537;
t673 = -qJDD(3) * pkin(3) - t872 * qJ(4) + qJDD(4) + t687;
t660 = t789 * t673;
t745 = t790 * t758;
t861 = t791 * t758;
t860 = t791 * t787;
t859 = t792 * t537;
t661 = t792 * t673;
t747 = t793 * t758;
t748 = t794 * t758;
t857 = t794 * t787;
t648 = -pkin(4) * t779 - t761 * pkin(6) + t673;
t856 = t795 * t648;
t695 = qJDD(5) + t702;
t855 = t795 * t695;
t854 = t796 * t673;
t853 = t797 * t648;
t852 = t797 * t695;
t851 = t798 * t673;
t850 = -pkin(3) * t673 + qJ(4) * t587;
t735 = t740 * qJD(5);
t848 = t742 * qJD(5);
t844 = t791 * qJDD(3);
t843 = t794 * qJDD(3);
t778 = t801 * qJDD(3);
t840 = t796 * t702;
t839 = t798 * t702;
t838 = pkin(3) * t779 - qJ(4) * t752 - t661;
t837 = t789 * t779;
t776 = t785 * qJDD(3);
t759 = t778 + t776;
t703 = t796 * t759 + t798 * t761;
t705 = t798 * t759 - t796 * t761;
t649 = t793 * t703 + t790 * t705;
t820 = pkin(3) * t761 + qJ(4) * t759 + t587;
t807 = pkin(2) * t703 + t820;
t551 = -pkin(1) * t649 - t807;
t651 = -t790 * t703 + t793 * t705;
t835 = qJ(1) * t651 + t551;
t751 = t789 * t875;
t717 = t796 * t751 - t789 * t841;
t720 = t798 * t751 + t789 * t842;
t664 = t793 * t717 + t790 * t720;
t814 = -pkin(3) * t777 + qJ(4) * t751 + t660;
t804 = pkin(2) * t717 + t814;
t583 = -pkin(1) * t664 - t804;
t668 = -t790 * t717 + t793 * t720;
t834 = qJ(1) * t668 + t583;
t815 = pkin(2) * t719 + t838;
t584 = -pkin(1) * t666 - t815;
t833 = -qJ(1) * t669 + t584;
t818 = -pkin(2) * t764 - t688;
t635 = pkin(1) * t707 - t818;
t832 = -qJ(1) * t829 + t635;
t813 = pkin(2) * t765 - t687;
t636 = -pkin(1) * t829 - t813;
t831 = -qJ(1) * t707 + t636;
t538 = t795 * t571 + t797 * t572;
t826 = -t791 * t766 - t794 * t849;
t825 = -0.2e1 * t837;
t767 = 0.2e1 * t837;
t646 = -t738 * t797 + t795 * t739;
t682 = -t736 - t737;
t513 = -pkin(4) * t682 + pkin(6) * t646 + t538;
t520 = -pkin(6) * t644 - t537;
t599 = -t789 * t644 + t792 * t646;
t823 = -pkin(3) * t682 + qJ(4) * t599 + t792 * t513 + t789 * t520;
t799 = qJD(5) ^ 2;
t693 = -t799 - t736;
t642 = t797 * t693 - t883;
t697 = t738 + 0.2e1 * t848;
t573 = -pkin(4) * t697 + pkin(6) * t642 - t853;
t641 = t795 * t693 + t882;
t594 = -t789 * t641 + t792 * t642;
t601 = -pkin(6) * t641 + t856;
t822 = -pkin(3) * t697 + qJ(4) * t594 + t792 * t573 + t789 * t601;
t732 = -t737 - t799;
t659 = -t795 * t732 - t852;
t699 = -0.2e1 * t735 + t739;
t575 = -pkin(4) * t699 + pkin(6) * t659 + t856;
t656 = t797 * t732 - t855;
t607 = -pkin(6) * t656 + t853;
t614 = -t789 * t656 + t792 * t659;
t821 = -pkin(3) * t699 + qJ(4) * t614 + t792 * t575 + t789 * t607;
t553 = t796 * t587 - t851;
t819 = pkin(2) * t553 + t850;
t586 = t792 * t639 - t789 * t640;
t677 = t793 * t727 + t790 * t728;
t812 = pkin(4) * t641 - t571;
t509 = t792 * t538 - t867;
t519 = -pkin(4) * t648 + pkin(6) * t538;
t811 = -pkin(3) * t648 - pkin(6) * t867 + qJ(4) * t509 + t792 * t519;
t559 = t796 * t599 - t798 * t682;
t810 = pkin(2) * t559 + t823;
t564 = t796 * t594 - t798 * t697;
t809 = pkin(2) * t564 + t822;
t580 = t796 * t614 - t798 * t699;
t808 = pkin(2) * t580 + t821;
t806 = -t794 * t766 + t791 * t849;
t805 = pkin(4) * t656 - t572;
t505 = t796 * t509 - t798 * t648;
t803 = pkin(2) * t505 + t811;
t762 = -t780 + t847;
t760 = t778 - t776;
t756 = pkin(1) * t758;
t731 = -t737 + t799;
t730 = t736 - t799;
t706 = t798 * t760 + t796 * t762;
t704 = t796 * t760 - t798 * t762;
t701 = t737 - t736;
t700 = -t735 + t739;
t698 = -t738 - t848;
t690 = (-t740 * t797 + t742 * t795) * qJD(5);
t689 = (-t740 * t795 - t742 * t797) * qJD(5);
t671 = t797 * t700 - t795 * t848;
t667 = t795 * t700 + t797 * t848;
t663 = -t795 * t698 + t797 * t735;
t662 = t797 * t698 + t795 * t735;
t658 = -t795 * t731 + t882;
t657 = t797 * t730 - t855;
t655 = t797 * t731 + t883;
t654 = t795 * t730 + t852;
t653 = qJ(2) * t874 + t756;
t652 = -t790 * t704 + t793 * t706;
t650 = t793 * t704 + t790 * t706;
t647 = -t797 * t697 - t795 * t699;
t645 = -t795 * t697 + t797 * t699;
t634 = -t789 * t689 + t792 * t690;
t633 = t792 * t689 + t789 * t690;
t625 = t796 * qJDD(5) + t798 * t634;
t624 = -t798 * qJDD(5) + t796 * t634;
t619 = pkin(2) * t758 + pkin(5) * t830;
t618 = -t789 * t667 + t792 * t671;
t617 = -t789 * t662 + t792 * t663;
t616 = t792 * t667 + t789 * t671;
t615 = t792 * t662 + t789 * t663;
t613 = -t789 * t655 + t792 * t658;
t612 = -t789 * t654 + t792 * t657;
t611 = t792 * t656 + t789 * t659;
t610 = t792 * t655 + t789 * t658;
t609 = t792 * t654 + t789 * t657;
t605 = t798 * t613 + t796 * t739;
t604 = t798 * t612 - t796 * t738;
t603 = t796 * t613 - t798 * t739;
t602 = t796 * t612 + t798 * t738;
t600 = -t789 * t645 + t792 * t647;
t598 = t792 * t645 + t789 * t647;
t597 = t792 * t644 + t789 * t646;
t593 = t792 * t641 + t789 * t642;
t591 = t798 * t618 + t840;
t590 = t798 * t617 - t840;
t589 = t796 * t618 - t839;
t588 = t796 * t617 + t839;
t581 = t798 * t614 + t796 * t699;
t579 = -pkin(5) * t717 - t796 * t640 + t792 * t851;
t578 = -pkin(5) * t719 - t796 * t639 + t789 * t851;
t577 = pkin(5) * t720 + t798 * t640 + t792 * t854;
t576 = -pkin(5) * t721 + t798 * t639 + t789 * t854;
t568 = t798 * t600 + t796 * t701;
t567 = t796 * t600 - t798 * t701;
t566 = t798 * t594 + t796 * t697;
t565 = -pkin(5) * t703 + t798 * t586;
t563 = pkin(5) * t705 + t796 * t586;
t562 = -t790 * t624 + t793 * t625;
t561 = t793 * t624 + t790 * t625;
t560 = t798 * t599 + t796 * t682;
t554 = t798 * t587 + t854;
t552 = -pkin(3) * t597 - t869;
t550 = -t790 * t603 + t793 * t605;
t549 = -t790 * t602 + t793 * t604;
t548 = t793 * t603 + t790 * t605;
t547 = t793 * t602 + t790 * t604;
t546 = pkin(1) * t557 + t871;
t545 = -t790 * t589 + t793 * t591;
t544 = -t790 * t588 + t793 * t590;
t543 = t793 * t589 + t790 * t591;
t542 = t793 * t588 + t790 * t590;
t541 = -t790 * t580 + t793 * t581;
t540 = t793 * t580 + t790 * t581;
t539 = -pkin(3) * t611 - t805;
t536 = -t790 * t567 + t793 * t568;
t535 = t793 * t567 + t790 * t568;
t534 = -t790 * t564 + t793 * t566;
t533 = t793 * t564 + t790 * t566;
t532 = -qJ(2) * t664 - t790 * t577 + t793 * t579;
t531 = -qJ(2) * t666 - t790 * t576 + t793 * t578;
t530 = qJ(2) * t668 + t793 * t577 + t790 * t579;
t529 = -qJ(2) * t669 + t793 * t576 + t790 * t578;
t528 = -pkin(3) * t593 - t812;
t527 = -t790 * t559 + t793 * t560;
t526 = t793 * t559 + t790 * t560;
t525 = pkin(5) * t858 + qJ(2) * t557 - t790 * t619;
t524 = -qJ(4) * t611 - t789 * t575 + t792 * t607;
t523 = pkin(5) * t865 + qJ(2) * t887 + t793 * t619 + t756;
t522 = -t790 * t553 + t793 * t554;
t521 = t793 * t553 + t790 * t554;
t516 = -qJ(2) * t649 - t790 * t563 + t793 * t565;
t515 = qJ(2) * t651 + t793 * t563 + t790 * t565;
t514 = -qJ(4) * t593 - t789 * t573 + t792 * t601;
t511 = -pkin(5) * t553 - (pkin(3) * t796 - qJ(4) * t798) * t586;
t510 = pkin(5) * t554 - (-pkin(3) * t798 - qJ(4) * t796 - pkin(2)) * t586;
t508 = t789 * t538 + t859;
t506 = t798 * t509 + t796 * t648;
t504 = -pkin(1) * t521 - t819;
t503 = -pkin(1) * t540 - t808;
t502 = -pkin(5) * t580 + t798 * t524 - t796 * t539;
t501 = -pkin(2) * t611 + pkin(5) * t581 + t796 * t524 + t798 * t539;
t500 = -qJ(4) * t597 - t789 * t513 + t792 * t520;
t499 = -pkin(5) * t564 + t798 * t514 - t796 * t528;
t498 = -pkin(1) * t533 - t809;
t497 = -pkin(3) * t508 - t870;
t496 = -pkin(2) * t593 + pkin(5) * t566 + t796 * t514 + t798 * t528;
t495 = -pkin(5) * t559 + t798 * t500 - t796 * t552;
t494 = -pkin(6) * t859 - qJ(4) * t508 - t789 * t519;
t493 = -t790 * t505 + t793 * t506;
t492 = t793 * t505 + t790 * t506;
t491 = -pkin(2) * t597 + pkin(5) * t560 + t796 * t500 + t798 * t552;
t490 = -qJ(2) * t521 - t790 * t510 + t793 * t511;
t489 = -pkin(1) * t526 - t810;
t488 = pkin(1) * t586 + qJ(2) * t522 + t793 * t510 + t790 * t511;
t487 = -qJ(2) * t540 - t790 * t501 + t793 * t502;
t486 = -pkin(1) * t611 + qJ(2) * t541 + t793 * t501 + t790 * t502;
t485 = -qJ(2) * t533 - t790 * t496 + t793 * t499;
t484 = -pkin(1) * t593 + qJ(2) * t534 + t793 * t496 + t790 * t499;
t483 = -pkin(5) * t505 + t798 * t494 - t796 * t497;
t482 = -qJ(2) * t526 - t790 * t491 + t793 * t495;
t481 = -pkin(1) * t597 + qJ(2) * t527 + t793 * t491 + t790 * t495;
t480 = -pkin(1) * t492 - t803;
t479 = -pkin(2) * t508 + pkin(5) * t506 + t796 * t494 + t798 * t497;
t478 = -qJ(2) * t492 - t790 * t479 + t793 * t483;
t477 = -pkin(1) * t508 + qJ(2) * t493 + t793 * t479 + t790 * t483;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t860, -t857, t806, qJ(1) * t806, 0, 0, 0, 0, 0, 0, -t790 * t748 - t791 * t827, -t791 * t729 - t793 * t748, t794 * t685, -qJ(1) * (t791 * t874 + t748) - (t791 * pkin(1) - t794 * qJ(2)) * t685, 0, 0, t794 * t829, 0, -t794 * t707, t844, -t791 * t831 + t794 * t886, t794 * t632 - t791 * t832, t794 * t557, t794 * t525 - t791 * t546 - qJ(1) * (t791 * t887 + t748), t785 * t844 - t884, t794 * t652 + t767 * t791, t794 * t668, t778 * t791 + t884, t794 * t669, 0, t794 * t531 - t791 * t833, t794 * t532 - t791 * t834, t794 * t516 - t791 * t835, t794 * t490 - t791 * t504 - qJ(1) * (t791 * t522 + t586 * t794), t794 * t545 + t791 * t616, t794 * t536 + t791 * t598, t794 * t550 + t791 * t610, t794 * t544 + t791 * t615, t794 * t549 + t791 * t609, t794 * t562 + t791 * t633, t794 * t485 - t791 * t498 - qJ(1) * (t791 * t534 - t794 * t593), t794 * t487 - t791 * t503 - qJ(1) * (t791 * t541 - t794 * t611), t794 * t482 - t791 * t489 - qJ(1) * (t791 * t527 - t794 * t597), t794 * t478 - t791 * t480 - qJ(1) * (t791 * t493 - t794 * t508); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t857, -t860, t826, qJ(1) * t826, 0, 0, 0, 0, 0, 0, -t790 * t861 + t794 * t827, t794 * t729 - t791 * t747, t791 * t685, qJ(1) * (t794 * t874 - t861) - (-t794 * pkin(1) - t791 * qJ(2)) * t685, 0, 0, t791 * t829, 0, -t791 * t707, -t843, t791 * t886 + t794 * t831, t791 * t632 + t794 * t832, t791 * t557, t791 * t525 + t794 * t546 + qJ(1) * (t794 * t887 - t861), -t785 * t843 - t885, t791 * t652 + t794 * t825, t791 * t668, -t778 * t794 + t885, t791 * t669, 0, t791 * t531 + t794 * t833, t791 * t532 + t794 * t834, t791 * t516 + t794 * t835, t791 * t490 + t794 * t504 + qJ(1) * (t794 * t522 - t586 * t791), t791 * t545 - t794 * t616, t791 * t536 - t794 * t598, t791 * t550 - t794 * t610, t791 * t544 - t794 * t615, t791 * t549 - t794 * t609, t791 * t562 - t794 * t633, t791 * t485 + t794 * t498 + qJ(1) * (t794 * t534 + t791 * t593), t791 * t487 + t794 * t503 + qJ(1) * (t794 * t541 + t791 * t611), t791 * t482 + t794 * t489 + qJ(1) * (t794 * t527 + t791 * t597), t791 * t478 + t794 * t480 + qJ(1) * (t794 * t493 + t791 * t508); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t766, t849, 0, 0, 0, 0, 0, 0, 0, 0, t747, -t745, t874, t653, 0, 0, t707, 0, t829, 0, -t632, t886, t887, t523, t677, t650, t664, -t677, -t666, 0, t529, t530, t515, t488, t543, t535, t548, t542, t547, t561, t484, t486, t481, t477; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t787, -t766, 0, 0, 0, 0, 0, 0, 0, -t745, -t747, t685, qJ(2) * t685, 0, 0, t829, 0, -t707, 0, t886, t632, t557, t525, -t680, t652, t668, t680, t669, 0, t531, t532, t516, t490, t545, t536, t550, t544, t549, t562, t485, t487, t482, t478; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t787, 0, -t849, 0, 0, 0, 0, 0, 0, 0, t827, t729, 0, pkin(1) * t685, 0, 0, 0, 0, 0, -qJDD(3), t636, t635, 0, t546, -t776, t825, 0, -t778, 0, 0, t584, t583, t551, t504, -t616, -t598, -t610, -t615, -t609, -t633, t498, t503, t489, t480; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t766, t849, 0, 0, 0, 0, 0, 0, 0, 0, t747, -t745, t874, t653, 0, 0, t707, 0, t829, 0, -t632, t886, t887, t523, t677, t650, t664, -t677, -t666, 0, t529, t530, t515, t488, t543, t535, t548, t542, t547, t561, t484, t486, t481, t477; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t758, t827, 0, 0, 0, t765, 0, -t764, 0, t817, t716, t622, pkin(5) * t622, t728, t706, t720, -t728, t721, 0, t578, t579, t565, t511, t591, t568, t605, t590, t604, t625, t499, t502, t495, t483; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t758, 0, t729, 0, 0, 0, t764, 0, t765, 0, -t716, t817, t830, t619, t727, t704, t717, -t727, -t719, 0, t576, t577, t563, t510, t589, t567, t603, t588, t602, t624, t496, t501, t491, t479; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t827, -t729, 0, 0, 0, 0, 0, 0, 0, qJDD(3), t813, t818, 0, -t871, t776, t767, 0, t778, 0, 0, t815, t804, t807, t819, t616, t598, t610, t615, t609, t633, t809, t808, t810, t803; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), 0, -t872, 0, 0, -t758, t687, 0, t837, t760, t751, -t837, t752, 0, t660, t661, t586, qJ(4) * t586, t618, t600, t613, t617, t612, t634, t514, t524, t500, t494; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t872, 0, qJDD(3), 0, t758, 0, t688, 0, t768, -t762, -t777, -t768, -t779, 0, t639, t640, 0, pkin(3) * t586, -t702, -t701, -t739, t702, t738, -qJDD(5), t528, t539, t552, t497; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t687, -t688, 0, 0, t776, t767, 0, t778, 0, 0, t838, t814, t820, t850, t616, t598, t610, t615, t609, t633, t822, t821, t823, t811; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t777, t779, t768, 0, t780, 0, 0, t673, t639, 0, t671, t647, t658, t663, t657, t690, t601, t607, t520, -pkin(6) * t537; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t777, -t847, t779, -t768, 0, -t673, 0, t640, 0, t667, t645, t655, t662, t654, t689, t573, t575, t513, t519; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t768, t762, t777, t768, t779, 0, -t639, -t640, 0, 0, t702, t701, t739, -t702, -t738, qJDD(5), t812, t805, t869, t870; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t700, -t697, t876, t735, t730, -t735, 0, t648, t571, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t848, t699, t731, t698, t695, -t848, -t648, 0, t572, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t702, t701, t739, -t702, -t738, qJDD(5), -t571, -t572, 0, 0;];
m_new_reg = t1;
