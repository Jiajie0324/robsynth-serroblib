% Calculate inertial parameters regressor of coriolis matrix for
% S5PPRPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d5,theta1,theta2,theta4]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:01
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PPRPR1_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRPR1_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRPR1_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PPRPR1_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:01:28
% EndTime: 2019-12-05 15:01:31
% DurationCPUTime: 0.87s
% Computational Cost: add. (1247->73), mult. (2959->123), div. (0->0), fcn. (3515->8), ass. (0->77)
t135 = cos(qJ(5));
t93 = cos(pkin(9));
t107 = t135 * t93;
t91 = sin(pkin(9));
t94 = sin(qJ(5));
t131 = t94 * t91;
t141 = t107 - t131;
t139 = t141 / 0.2e1;
t108 = t135 * t91;
t130 = t94 * t93;
t78 = t108 + t130;
t138 = t78 / 0.2e1;
t124 = cos(pkin(8));
t95 = sin(qJ(3));
t104 = t95 * t124;
t136 = cos(qJ(3));
t92 = sin(pkin(8));
t109 = t136 * t92;
t127 = t109 / 0.2e1 + t104 / 0.2e1;
t80 = t109 + t104;
t50 = t78 * t80;
t52 = t141 * t80;
t128 = t138 * t50 + t139 * t52;
t73 = t141 ^ 2;
t140 = t78 ^ 2;
t77 = -t124 * t136 + t92 * t95;
t132 = t77 * t80;
t129 = pkin(6) + qJ(4);
t89 = t91 ^ 2;
t90 = t93 ^ 2;
t83 = t89 + t90;
t49 = t77 * t78;
t51 = t77 * t141;
t15 = -t138 * t51 + t139 * t49;
t123 = t15 * qJD(1);
t16 = (0.1e1 - t83) * t132;
t122 = t16 * qJD(1);
t97 = t130 / 0.2e1 + t108 / 0.2e1;
t24 = (-t78 / 0.2e1 + t97) * t77;
t119 = t24 * qJD(1);
t96 = t107 / 0.2e1 - t131 / 0.2e1;
t25 = (-t141 / 0.2e1 + t96) * t77;
t118 = t25 * qJD(1);
t48 = t73 - t140;
t117 = t48 * qJD(3);
t53 = t73 + t140;
t116 = t53 * qJD(3);
t115 = t141 * qJD(3);
t71 = t141 * qJD(5);
t114 = t78 * qJD(3);
t72 = t78 * qJD(5);
t113 = t80 * qJD(3);
t112 = t83 * qJD(3);
t111 = t141 * t114;
t110 = t141 * t72;
t106 = t129 * t91;
t105 = t83 * t77;
t88 = -pkin(4) * t93 - pkin(3);
t103 = qJD(3) * t88 + qJD(4);
t102 = (t90 / 0.2e1 + t89 / 0.2e1) * t80;
t7 = -t49 * t50 - t51 * t52 + t132;
t101 = qJD(1) * t7 + qJD(2) * t15;
t12 = -t128 + t127;
t82 = t129 * t93;
t60 = t106 * t135 + t82 * t94;
t61 = -t106 * t94 + t135 * t82;
t19 = t141 * t61 + t60 * t78;
t100 = qJD(1) * t12 - qJD(3) * t19;
t43 = t102 - t127;
t81 = t83 * qJ(4);
t99 = qJD(1) * t43 + qJD(3) * t81;
t42 = t102 + t127;
t27 = (t138 + t97) * t77;
t26 = (t139 + t96) * t77;
t13 = t127 + t128;
t1 = t15 * qJD(3);
t2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16 * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t7 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t113, t77 * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, -t93 * t113, t91 * t113, -qJD(3) * t105, t122 + (-t80 * pkin(3) - qJ(4) * t105) * qJD(3) + t42 * qJD(4), 0, 0, 0, 0, 0, 0, qJD(5) * t27 - t113 * t141, qJD(5) * t26 + t113 * t78, (-t141 * t51 - t49 * t78) * qJD(3), (-t49 * t60 - t51 * t61 + t80 * t88) * qJD(3) + t13 * qJD(4) + t101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42 * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t13 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t27 - qJD(5) * t52, qJD(3) * t26 + qJD(5) * t50, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t72, -t71, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(4) * t43 - t122, 0, 0, 0, 0, 0, 0, -t24 * qJD(5), -t25 * qJD(5), 0, -qJD(4) * t12 - t101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83 * qJD(4), t81 * qJD(4), t110, t48 * qJD(5), 0, -t110, 0, 0, t88 * t72, t88 * t71, t53 * qJD(4), t19 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t112, t99, 0, 0, 0, 0, 0, 0, 0, 0, t116, -t100; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t111, t117, t71, -t111, -t72, 0, -qJD(5) * t61 + t114 * t88 - t119, qJD(5) * t60 + t115 * t88 - t118, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t43 * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t12 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t112, -t99, 0, 0, 0, 0, 0, 0, t72, t71, -t116, t100; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t114, t115, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24 * qJD(3), t25 * qJD(3), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t111, -t117, 0, t111, 0, 0, -t103 * t78 + t119, -t103 * t141 + t118, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t114, -t115, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t2;
