% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:00
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRRP1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPRRP1_invdynB_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:00:05
% EndTime: 2019-12-05 18:00:12
% DurationCPUTime: 4.61s
% Computational Cost: add. (12548->389), mult. (25739->515), div. (0->0), fcn. (16298->6), ass. (0->280)
t426 = qJDD(3) + qJDD(4);
t431 = sin(qJ(4));
t432 = sin(qJ(3));
t434 = cos(qJ(4));
t435 = cos(qJ(3));
t395 = (-t431 * t435 - t432 * t434) * qJD(1);
t479 = qJD(1) * t435;
t397 = -t431 * t432 * qJD(1) + t434 * t479;
t496 = t397 * t395;
t524 = t426 + t496;
t527 = t524 * pkin(4);
t499 = t524 * t431;
t498 = t524 * t434;
t526 = 2 * qJD(5);
t517 = pkin(6) + pkin(1);
t476 = qJD(1) * qJD(3);
t464 = t435 * t476;
t474 = qJDD(1) * t432;
t403 = -t464 - t474;
t465 = t432 * t476;
t472 = qJDD(1) * t435;
t404 = -t465 + t472;
t342 = qJD(4) * t395 + t403 * t431 + t404 * t434;
t427 = qJD(3) + qJD(4);
t488 = t427 * t395;
t525 = t342 + t488;
t460 = -t434 * t403 + t431 * t404;
t341 = -qJD(4) * t397 - t460;
t523 = t341 * qJ(5) + t395 * t526;
t393 = t395 ^ 2;
t425 = t427 ^ 2;
t522 = -t393 - t425;
t438 = qJD(1) ^ 2;
t481 = t435 * t438;
t433 = sin(qJ(1));
t436 = cos(qJ(1));
t413 = g(1) * t433 - t436 * g(2);
t450 = qJDD(2) - t413;
t442 = -qJ(2) * t438 + t450;
t382 = -t517 * qJDD(1) + t442;
t497 = t382 * t435;
t336 = qJDD(3) * pkin(3) - pkin(7) * t404 + t497 + (-pkin(3) * t481 - pkin(7) * t476 + g(3)) * t432;
t362 = -t435 * g(3) + t432 * t382;
t444 = qJD(3) * pkin(3) - pkin(7) * t479;
t429 = t432 ^ 2;
t485 = t429 * t438;
t337 = -pkin(3) * t485 + t403 * pkin(7) - qJD(3) * t444 + t362;
t293 = -t434 * t336 + t337 * t431;
t521 = -qJ(5) * t488 + t397 * t526 + t293 - t527;
t449 = pkin(4) * t427 - qJ(5) * t397;
t520 = -t397 * t449 - qJDD(5);
t308 = t431 * t522 + t498;
t309 = t434 * t522 - t499;
t267 = t308 * t435 + t309 * t432;
t268 = -t308 * t432 + t309 * t435;
t519 = pkin(2) * t267 + pkin(3) * t308 - qJ(2) * t268;
t414 = g(1) * t436 + g(2) * t433;
t428 = qJDD(1) * qJ(2);
t448 = t414 - t428;
t518 = -pkin(3) * t403 - (pkin(7) * t429 + t517) * t438 + t444 * t479 - t448;
t394 = t397 ^ 2;
t516 = pkin(4) * t341;
t324 = t342 - t488;
t441 = (-qJD(4) + t427) * t397 - t460;
t280 = -t324 * t434 + t431 * t441;
t282 = t324 * t431 + t434 * t441;
t240 = t280 * t435 + t282 * t432;
t343 = -t393 - t394;
t231 = -t240 * t436 + t343 * t433;
t515 = pkin(5) * t231;
t319 = (qJD(4) + t427) * t397 + t460;
t248 = -t267 * t436 + t319 * t433;
t514 = pkin(5) * t248;
t373 = -t394 - t425;
t355 = -t496 + t426;
t501 = t355 * t431;
t325 = t373 * t434 - t501;
t500 = t355 * t434;
t326 = -t373 * t431 - t500;
t283 = t325 * t435 + t326 * t432;
t252 = -t283 * t436 + t433 * t525;
t513 = pkin(5) * t252;
t512 = pkin(7) * t280;
t511 = pkin(7) * t308;
t510 = pkin(7) * t325;
t508 = qJDD(1) * pkin(1);
t294 = t431 * t336 + t434 * t337;
t244 = -t293 * t434 + t294 * t431;
t507 = t244 * t432;
t506 = t244 * t435;
t246 = -qJ(5) * t342 - t521;
t505 = t246 * t431;
t504 = t246 * t434;
t475 = qJD(2) * qJD(1);
t469 = -0.2e1 * t475;
t338 = t469 - t518;
t503 = t338 * t431;
t502 = t338 * t434;
t495 = t397 * t427;
t430 = t435 ^ 2;
t480 = t429 + t430;
t406 = t480 * qJDD(1);
t494 = t406 * t433;
t493 = t406 * t436;
t466 = t432 * t481;
t411 = qJDD(3) + t466;
t492 = t411 * t432;
t491 = t411 * t435;
t412 = qJDD(3) - t466;
t490 = t412 * t432;
t489 = t412 * t435;
t487 = t427 * t431;
t486 = t427 * t434;
t484 = t430 * t438;
t376 = t517 * t438 + t448 + t469;
t483 = t432 * t376;
t482 = t435 * t376;
t473 = qJDD(1) * t433;
t471 = qJDD(1) * t436;
t468 = t433 * t496;
t467 = t436 * t496;
t463 = -pkin(3) * t343 + pkin(7) * t282;
t462 = -pkin(3) * t319 + pkin(7) * t309;
t461 = -pkin(3) * t525 + pkin(7) * t326;
t245 = t293 * t431 + t434 * t294;
t423 = 0.2e1 * t475;
t385 = -pkin(1) * t438 + t423 - t448;
t388 = -t442 + t508;
t349 = t436 * t385 - t388 * t433;
t366 = -t413 * t433 - t436 * t414;
t458 = t433 * t466;
t457 = t436 * t466;
t456 = t294 + t523;
t455 = qJ(2) * t343 - t517 * t240;
t454 = qJ(2) * t319 - t517 * t267;
t453 = qJ(2) * t525 - t517 * t283;
t407 = -t433 * t438 + t471;
t452 = pkin(5) * t407 + g(3) * t433;
t408 = t436 * t438 + t473;
t451 = -pkin(5) * t408 + g(3) * t436;
t242 = -t280 * t432 + t282 * t435;
t210 = pkin(2) * t240 + pkin(3) * t280 - qJ(2) * t242;
t361 = g(3) * t432 + t497;
t327 = t361 * t435 + t362 * t432;
t328 = -t361 * t432 + t362 * t435;
t346 = t385 * t433 + t388 * t436;
t365 = t413 * t436 - t414 * t433;
t447 = pkin(2) * t319 - t517 * t268;
t284 = -t325 * t432 + t326 * t435;
t446 = pkin(2) * t525 - t517 * t284;
t445 = pkin(2) * t343 - t517 * t242;
t221 = pkin(2) * t283 + pkin(3) * t325 - qJ(2) * t284 - t294;
t439 = t338 + t520;
t437 = qJD(3) ^ 2;
t418 = -t437 - t484;
t417 = t437 - t484;
t416 = -t437 - t485;
t415 = -t437 + t485;
t410 = (-t429 + t430) * t438;
t409 = t480 * t438;
t405 = -0.2e1 * t465 + t472;
t402 = 0.2e1 * t464 + t474;
t400 = t480 * t476;
t380 = -t394 + t425;
t379 = t393 - t425;
t378 = -t404 * t432 - t430 * t476;
t377 = -t403 * t435 - t429 * t476;
t372 = -t418 * t432 - t491;
t371 = t416 * t435 - t490;
t370 = t418 * t435 - t492;
t369 = -t417 * t435 - t490;
t368 = t416 * t432 + t489;
t367 = -t415 * t432 - t491;
t364 = -t409 * t436 - t494;
t363 = -t409 * t433 + t493;
t360 = t402 * t432 - t405 * t435;
t357 = t394 - t393;
t351 = t370 * t433 + t405 * t436;
t350 = t368 * t433 + t402 * t436;
t348 = -t370 * t436 + t405 * t433;
t347 = -t368 * t436 + t402 * t433;
t345 = (t395 * t434 + t397 * t431) * t427;
t344 = (t395 * t431 - t397 * t434) * t427;
t332 = t379 * t434 - t501;
t331 = -t380 * t431 + t498;
t330 = t379 * t431 + t500;
t329 = t380 * t434 + t499;
t314 = t342 * t434 - t397 * t487;
t313 = t342 * t431 + t397 * t486;
t312 = -t341 * t431 - t395 * t486;
t311 = t341 * t434 - t395 * t487;
t310 = -pkin(2) * t409 - t328;
t305 = pkin(2) * t370 - qJ(2) * t372 - t362;
t304 = pkin(2) * t368 - qJ(2) * t371 + t361;
t303 = pkin(2) * t402 - t517 * t371 - t482;
t302 = pkin(2) * t405 - t517 * t372 + t483;
t301 = t327 * t433 - t376 * t436;
t300 = -t327 * t436 - t376 * t433;
t299 = -t344 * t432 + t345 * t435;
t298 = -t344 * t435 - t345 * t432;
t297 = -pkin(4) * t525 - qJ(5) * t355;
t296 = -t298 * t433 + t426 * t436;
t295 = t298 * t436 + t426 * t433;
t292 = -t502 - t510;
t290 = pkin(2) * t327 - qJ(2) * t328;
t289 = -t330 * t432 + t332 * t435;
t288 = -t329 * t432 + t331 * t435;
t287 = -t330 * t435 - t332 * t432;
t286 = -t329 * t435 - t331 * t432;
t285 = -t503 - t511;
t281 = -t319 * t434 - t431 * t525;
t279 = -t319 * t431 + t434 * t525;
t274 = -pkin(2) * t376 - t517 * t328;
t273 = -t313 * t432 + t314 * t435;
t272 = -t311 * t432 + t312 * t435;
t271 = -t313 * t435 - t314 * t432;
t270 = -t311 * t435 - t312 * t432;
t269 = qJ(5) * t393 + t439 + t516;
t264 = -t516 + t423 + (-t373 - t393) * qJ(5) + t518 - t520;
t263 = -t271 * t433 - t467;
t262 = -t270 * t433 + t467;
t261 = t271 * t436 - t468;
t260 = t270 * t436 + t468;
t259 = t461 - t503;
t258 = t462 + t502;
t257 = -t286 * t433 + t324 * t436;
t256 = -t287 * t433 + t436 * t441;
t255 = t286 * t436 + t324 * t433;
t254 = t287 * t436 + t433 * t441;
t253 = t283 * t433 + t436 * t525;
t251 = pkin(5) * t253;
t250 = -t393 * pkin(4) - t427 * t449 + t456;
t249 = t267 * t433 + t319 * t436;
t247 = pkin(5) * t249;
t243 = (t522 + t393) * qJ(5) + (-t319 + t341) * pkin(4) + t439;
t241 = -t279 * t432 + t281 * t435;
t239 = -t279 * t435 - t281 * t432;
t236 = pkin(3) * t338 + pkin(7) * t245;
t235 = (t324 + t342) * qJ(5) + t521;
t234 = -t239 * t433 + t357 * t436;
t233 = t239 * t436 + t357 * t433;
t232 = t240 * t433 + t343 * t436;
t230 = pkin(5) * t232;
t229 = (t441 + t495) * qJ(5) + (-t343 + t522) * pkin(4) + t456;
t228 = t264 * t434 - t297 * t431 - t510;
t227 = -qJ(5) * t498 - t243 * t431 - t511;
t226 = -t244 - t512;
t225 = pkin(4) * t269 + qJ(5) * t250;
t224 = t264 * t431 + t297 * t434 + t461;
t223 = t245 + t463;
t222 = -qJ(5) * t499 + t243 * t434 + t462;
t220 = t250 * t434 - t505;
t219 = t250 * t431 + t504;
t218 = t245 * t435 - t507;
t217 = t245 * t432 + t506;
t216 = -t293 + t519;
t215 = t217 * t433 - t338 * t436;
t214 = -t217 * t436 - t338 * t433;
t213 = -qJ(5) * t495 + (t373 - t522) * pkin(4) + t221 - t523;
t212 = -t259 * t435 - t292 * t432 + t446;
t211 = t246 + t519 + t527;
t209 = -t258 * t435 - t285 * t432 + t447;
t208 = -pkin(4) * t324 + t210;
t207 = -t229 * t431 + t235 * t434 - t512;
t206 = t229 * t434 + t235 * t431 + t463;
t205 = -t219 * t432 + t220 * t435;
t204 = t219 * t435 + t220 * t432;
t203 = -pkin(7) * t219 - qJ(5) * t504 - t225 * t431;
t202 = t204 * t433 - t269 * t436;
t201 = -t204 * t436 - t269 * t433;
t200 = -t224 * t435 - t228 * t432 + t446;
t199 = -t435 * t222 - t432 * t227 + t447;
t198 = pkin(2) * t217 + pkin(3) * t244 - qJ(2) * t218;
t197 = pkin(3) * t269 + pkin(7) * t220 - qJ(5) * t505 + t225 * t434;
t196 = -t435 * t223 - t432 * t226 + t445;
t195 = -pkin(2) * t338 + pkin(7) * t507 - t517 * t218 - t236 * t435;
t194 = -t435 * t206 - t432 * t207 + t445;
t193 = pkin(2) * t204 + pkin(3) * t219 + pkin(4) * t246 - qJ(2) * t205;
t192 = -pkin(2) * t269 - t435 * t197 - t432 * t203 - t517 * t205;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t408, -t407, 0, t366, 0, 0, 0, 0, 0, 0, 0, t408, t407, t349, 0, 0, 0, 0, 0, 0, t350, t351, t364, t301, 0, 0, 0, 0, 0, 0, t249, t253, t232, t215, 0, 0, 0, 0, 0, 0, t249, t253, t232, t202; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t407, -t408, 0, t365, 0, 0, 0, 0, 0, 0, 0, -t407, t408, t346, 0, 0, 0, 0, 0, 0, t347, t348, t363, t300, 0, 0, 0, 0, 0, 0, t248, t252, t231, t214, 0, 0, 0, 0, 0, 0, t248, t252, t231, t201; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t371, t372, 0, t328, 0, 0, 0, 0, 0, 0, t268, t284, t242, t218, 0, 0, 0, 0, 0, 0, t268, t284, t242, t205; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t407, 0, -t408, 0, -t452, -t451, -t365, -pkin(5) * t365, 0, -t407, t408, 0, 0, 0, -t346, t452, t451, -pkin(5) * t346 + (-pkin(1) * t433 + qJ(2) * t436) * g(3), -t378 * t433 + t457, -t360 * t433 + t410 * t436, -t369 * t433 + t435 * t471, -t377 * t433 - t457, -t367 * t433 - t432 * t471, qJDD(3) * t436 - t400 * t433, -pkin(5) * t347 - t303 * t433 + t304 * t436, -pkin(5) * t348 - t302 * t433 + t305 * t436, -pkin(2) * t493 - pkin(5) * t363 - t310 * t433, -pkin(5) * t300 - t274 * t433 + t290 * t436, t263, t234, t257, t262, t256, t296, -t209 * t433 + t216 * t436 - t514, -t212 * t433 + t221 * t436 - t513, -t196 * t433 + t210 * t436 - t515, -pkin(5) * t214 - t195 * t433 + t198 * t436, t263, t234, t257, t262, t256, t296, -t199 * t433 + t211 * t436 - t514, -t200 * t433 + t213 * t436 - t513, -t194 * t433 + t208 * t436 - t515, -pkin(5) * t201 - t192 * t433 + t193 * t436; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t408, 0, t407, 0, t451, -t452, t366, pkin(5) * t366, 0, -t408, -t407, 0, 0, 0, t349, -t451, t452, pkin(5) * t349 + (pkin(1) * t436 + qJ(2) * t433) * g(3), t378 * t436 + t458, t360 * t436 + t410 * t433, t369 * t436 + t433 * t472, t377 * t436 - t458, t367 * t436 - t432 * t473, qJDD(3) * t433 + t400 * t436, pkin(5) * t350 + t303 * t436 + t304 * t433, pkin(5) * t351 + t302 * t436 + t305 * t433, -pkin(2) * t494 + pkin(5) * t364 + t310 * t436, pkin(5) * t301 + t274 * t436 + t290 * t433, t261, t233, t255, t260, t254, t295, t209 * t436 + t216 * t433 + t247, t212 * t436 + t221 * t433 + t251, t196 * t436 + t210 * t433 + t230, pkin(5) * t215 + t195 * t436 + t198 * t433, t261, t233, t255, t260, t254, t295, t199 * t436 + t211 * t433 + t247, t200 * t436 + t213 * t433 + t251, t194 * t436 + t208 * t433 + t230, pkin(5) * t202 + t192 * t436 + t193 * t433; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t413, t414, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t450 - 0.2e1 * t508, -t414 + t423 + 0.2e1 * t428, pkin(1) * t388 + qJ(2) * t385, (t404 - t465) * t435, -t402 * t435 - t405 * t432, -t417 * t432 + t489, (-t403 + t464) * t432, t415 * t435 - t492, 0, qJ(2) * t402 - t517 * t368 - t483, qJ(2) * t405 - t517 * t370 - t482, -qJ(2) * t409 + t517 * t406 - t327, -qJ(2) * t376 - t517 * t327, t273, t241, t288, t272, t289, t299, -t258 * t432 + t285 * t435 + t454, -t259 * t432 + t292 * t435 + t453, -t223 * t432 + t226 * t435 + t455, -pkin(7) * t506 - qJ(2) * t338 - t517 * t217 - t236 * t432, t273, t241, t288, t272, t289, t299, -t222 * t432 + t227 * t435 + t454, -t224 * t432 + t228 * t435 + t453, -t206 * t432 + t207 * t435 + t455, -qJ(2) * t269 - t197 * t432 + t203 * t435 - t517 * t204;];
tauB_reg = t1;
