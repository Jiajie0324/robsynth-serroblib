% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:04
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRRP3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP3_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP3_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP3_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP3_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:04:02
% EndTime: 2019-12-05 18:04:13
% DurationCPUTime: 8.84s
% Computational Cost: add. (24080->480), mult. (49296->677), div. (0->0), fcn. (31846->8), ass. (0->350)
t524 = sin(qJ(4));
t527 = cos(qJ(4));
t528 = cos(qJ(3));
t525 = sin(qJ(3));
t562 = qJD(1) * t525;
t478 = -t527 * t528 * qJD(1) + t524 * t562;
t480 = (t524 * t528 + t525 * t527) * qJD(1);
t439 = t480 * t478;
t515 = qJDD(3) + qJDD(4);
t542 = -t515 + t439;
t608 = t542 * pkin(4);
t578 = t524 * t542;
t569 = t527 * t542;
t526 = sin(qJ(1));
t529 = cos(qJ(1));
t499 = t526 * g(2) - t529 * g(3);
t531 = qJD(1) ^ 2;
t485 = -t531 * pkin(1) + t499;
t521 = sin(pkin(8));
t522 = cos(pkin(8));
t500 = t529 * g(2) + t526 * g(3);
t532 = qJDD(1) * pkin(1) + t500;
t437 = t521 * t485 - t522 * t532;
t438 = t522 * t485 + t521 * t532;
t543 = t521 * t437 + t522 * t438;
t380 = t522 * t437 - t521 * t438;
t564 = t529 * t380;
t331 = -t526 * t543 + t564;
t573 = t526 * t380;
t611 = -t529 * t543 - t573;
t489 = t521 * qJDD(1) + t522 * t531;
t519 = g(1) - qJDD(2);
t466 = qJ(2) * t489 - t522 * t519;
t490 = t522 * qJDD(1) - t521 * t531;
t535 = t526 * t489 - t529 * t490;
t536 = -qJ(2) * t490 - t521 * t519;
t610 = pkin(5) * t535 + t526 * t466 + t529 * t536;
t442 = t529 * t489 + t526 * t490;
t609 = pkin(5) * t442 + t529 * t466 - t526 * t536;
t559 = qJD(1) * qJD(3);
t550 = t528 * t559;
t558 = t525 * qJDD(1);
t487 = t550 + t558;
t512 = t528 * qJDD(1);
t551 = t525 * t559;
t537 = -t512 + t551;
t412 = -t478 * qJD(4) + t527 * t487 - t524 * t537;
t516 = qJD(3) + qJD(4);
t468 = t516 * t478;
t604 = -t468 + t412;
t474 = t480 ^ 2;
t514 = t516 ^ 2;
t455 = -t474 - t514;
t434 = t439 + t515;
t579 = t524 * t434;
t394 = t527 * t455 - t579;
t570 = t527 * t434;
t395 = -t524 * t455 - t570;
t342 = t528 * t394 + t525 * t395;
t603 = -pkin(2) * t342 - pkin(3) * t394;
t473 = t478 ^ 2;
t431 = -t514 - t473;
t370 = t524 * t431 - t569;
t371 = t527 * t431 + t578;
t324 = t528 * t370 + t525 * t371;
t602 = -pkin(2) * t324 - pkin(3) * t370;
t541 = t524 * t487 + t527 * t537;
t389 = (qJD(4) - t516) * t480 + t541;
t393 = -t468 - t412;
t339 = -t389 * t524 + t527 * t393;
t341 = -t389 * t527 - t524 * t393;
t291 = -t525 * t339 + t528 * t341;
t413 = -t473 - t474;
t278 = t521 * t291 - t522 * t413;
t279 = t522 * t291 + t521 * t413;
t235 = -t526 * t278 + t529 * t279;
t596 = pkin(5) * t235;
t325 = -t525 * t370 + t528 * t371;
t388 = (qJD(4) + t516) * t480 + t541;
t296 = t521 * t325 - t522 * t388;
t297 = t522 * t325 + t521 * t388;
t250 = -t526 * t296 + t529 * t297;
t595 = pkin(5) * t250;
t343 = -t525 * t394 + t528 * t395;
t305 = t521 * t343 - t522 * t604;
t306 = t522 * t343 + t521 * t604;
t258 = -t526 * t305 + t529 * t306;
t594 = pkin(5) * t258;
t289 = t528 * t339 + t525 * t341;
t593 = pkin(6) * t289;
t592 = pkin(6) * t324;
t591 = pkin(6) * t342;
t590 = pkin(7) * t339;
t589 = pkin(7) * t370;
t588 = pkin(7) * t394;
t587 = qJ(2) * t278;
t586 = qJ(2) * t296;
t585 = qJ(2) * t305;
t584 = t516 * t524;
t583 = t516 * t527;
t517 = t525 ^ 2;
t582 = t517 * t531;
t518 = t528 ^ 2;
t513 = t518 * t531;
t422 = -t531 * pkin(2) + qJDD(1) * pkin(6) + t438;
t408 = t525 * t422 + t528 * t519;
t506 = t528 * t531 * t525;
t496 = qJDD(3) + t506;
t366 = (-t487 + t550) * pkin(7) + t496 * pkin(3) - t408;
t410 = t528 * t422 - t525 * t519;
t498 = qJD(3) * pkin(3) - pkin(7) * t562;
t369 = -pkin(3) * t513 - pkin(7) * t537 - qJD(3) * t498 + t410;
t321 = -t527 * t366 + t524 * t369;
t552 = t412 * qJ(5) + t321;
t534 = -qJ(5) * t468 - t552;
t561 = qJD(5) * t480;
t287 = t534 - 0.2e1 * t561 - t608;
t581 = t524 * t287;
t421 = -qJDD(1) * pkin(2) - t531 * pkin(6) + t437;
t382 = t537 * pkin(3) - pkin(7) * t513 + t498 * t562 + t421;
t580 = t524 * t382;
t322 = t524 * t366 + t527 * t369;
t280 = -t527 * t321 + t524 * t322;
t577 = t525 * t280;
t576 = t525 * t421;
t575 = t525 * t496;
t497 = qJDD(3) - t506;
t574 = t525 * t497;
t572 = t527 * t287;
t571 = t527 * t382;
t568 = t528 * t280;
t567 = t528 * t421;
t488 = t512 - 0.2e1 * t551;
t566 = t528 * t488;
t565 = t528 * t497;
t563 = t517 + t518;
t557 = t521 * t439;
t556 = t522 * t439;
t555 = pkin(1) * t278 - pkin(2) * t413 + pkin(6) * t291;
t554 = pkin(1) * t296 - pkin(2) * t388 + pkin(6) * t325;
t553 = pkin(1) * t305 - pkin(2) * t604 + pkin(6) * t343;
t549 = -pkin(1) * t289 + qJ(2) * t279;
t548 = -pkin(1) * t324 + qJ(2) * t297;
t547 = -pkin(1) * t342 + qJ(2) * t306;
t546 = -pkin(3) * t413 + pkin(7) * t341;
t545 = -pkin(3) * t388 + pkin(7) * t371;
t544 = -pkin(3) * t604 + pkin(7) * t395;
t281 = t524 * t321 + t527 * t322;
t355 = t525 * t408 + t528 * t410;
t540 = t521 * t506;
t539 = t522 * t506;
t259 = -pkin(2) * t289 - pkin(3) * t339;
t492 = t526 * qJDD(1) + t529 * t531;
t538 = pkin(5) * t492 - t529 * g(1);
t354 = t528 * t408 - t525 * t410;
t448 = t529 * t499 - t526 * t500;
t447 = -t526 * t499 - t529 * t500;
t411 = -t480 * qJD(4) - t541;
t456 = t516 * pkin(4) - t480 * qJ(5);
t533 = t411 * qJ(5) - 0.2e1 * qJD(5) * t478 - t516 * t456 + t322;
t319 = -t411 * pkin(4) - t473 * qJ(5) + t480 * t456 + qJDD(5) + t382;
t530 = qJD(3) ^ 2;
t504 = -t513 - t530;
t503 = t513 - t530;
t502 = -t530 - t582;
t501 = t530 - t582;
t495 = t513 - t582;
t494 = t513 + t582;
t493 = -t529 * qJDD(1) + t526 * t531;
t491 = t563 * qJDD(1);
t486 = 0.2e1 * t550 + t558;
t484 = t528 * t496;
t483 = t563 * t559;
t472 = -pkin(5) * t493 + t526 * g(1);
t470 = 0.2e1 * t561;
t462 = -t474 + t514;
t461 = t473 - t514;
t460 = t528 * t487 - t517 * t559;
t459 = -t518 * t559 + t525 * t537;
t458 = t521 * qJDD(3) + t522 * t483;
t457 = -t522 * qJDD(3) + t521 * t483;
t454 = -t525 * t502 - t565;
t453 = -t525 * t501 + t484;
t452 = t528 * t504 - t575;
t451 = t528 * t503 - t574;
t450 = t528 * t502 - t574;
t449 = t525 * t504 + t484;
t446 = t522 * t491 - t521 * t494;
t445 = t521 * t491 + t522 * t494;
t440 = -t525 * t486 + t566;
t436 = -t474 + t473;
t430 = t522 * t460 - t540;
t429 = t522 * t459 + t540;
t428 = t521 * t460 + t539;
t427 = t521 * t459 - t539;
t426 = t522 * t453 + t521 * t558;
t425 = t522 * t451 + t521 * t512;
t424 = t521 * t453 - t522 * t558;
t423 = t521 * t451 - t522 * t512;
t419 = t522 * t454 + t521 * t486;
t418 = t522 * t452 - t521 * t488;
t417 = t521 * t454 - t522 * t486;
t416 = t521 * t452 + t522 * t488;
t415 = (-t478 * t527 + t480 * t524) * t516;
t414 = (-t478 * t524 - t480 * t527) * t516;
t409 = t522 * t440 - t521 * t495;
t407 = t521 * t440 + t522 * t495;
t401 = t527 * t461 - t579;
t400 = -t524 * t462 - t569;
t399 = t524 * t461 + t570;
t398 = t527 * t462 - t578;
t397 = -t526 * t445 + t529 * t446;
t396 = -t529 * t445 - t526 * t446;
t387 = -pkin(6) * t450 + t567;
t386 = -pkin(6) * t449 + t576;
t377 = t527 * t412 - t480 * t584;
t376 = t524 * t412 + t480 * t583;
t375 = -t524 * t411 + t478 * t583;
t374 = t527 * t411 + t478 * t584;
t373 = -pkin(2) * t450 + t410;
t372 = -pkin(2) * t449 + t408;
t368 = pkin(1) * t519 + qJ(2) * t543;
t361 = -t526 * t417 + t529 * t419;
t360 = -t526 * t416 + t529 * t418;
t359 = -t529 * t417 - t526 * t419;
t358 = -t529 * t416 - t526 * t418;
t357 = -t525 * t414 + t528 * t415;
t356 = t528 * t414 + t525 * t415;
t352 = -pkin(4) * t604 - qJ(5) * t434;
t351 = t522 * t357 + t521 * t515;
t350 = t521 * t357 - t522 * t515;
t349 = -t525 * t399 + t528 * t401;
t348 = -t525 * t398 + t528 * t400;
t347 = t528 * t399 + t525 * t401;
t346 = t528 * t398 + t525 * t400;
t345 = -qJ(2) * t445 + t522 * t354;
t344 = qJ(2) * t446 + t521 * t354;
t340 = -t527 * t388 - t524 * t604;
t338 = -t524 * t388 + t527 * t604;
t336 = t571 - t588;
t334 = t522 * t355 + t521 * t421;
t333 = t521 * t355 - t522 * t421;
t330 = t580 - t589;
t329 = -t525 * t376 + t528 * t377;
t328 = -t525 * t374 + t528 * t375;
t327 = t528 * t376 + t525 * t377;
t326 = t528 * t374 + t525 * t375;
t318 = t522 * t329 + t557;
t317 = t522 * t328 - t557;
t316 = t521 * t329 - t556;
t315 = t521 * t328 + t556;
t314 = -qJ(2) * t417 - t521 * t373 + t522 * t387;
t313 = -qJ(2) * t416 - t521 * t372 + t522 * t386;
t312 = -qJ(5) * t455 + t319;
t311 = t522 * t349 - t521 * t389;
t310 = t522 * t348 - t521 * t393;
t309 = t521 * t349 + t522 * t389;
t308 = t521 * t348 + t522 * t393;
t307 = t544 + t580;
t302 = -pkin(1) * t450 + qJ(2) * t419 + t522 * t373 + t521 * t387;
t301 = -pkin(1) * t449 + qJ(2) * t418 + t522 * t372 + t521 * t386;
t300 = t545 - t571;
t299 = -t526 * t350 + t529 * t351;
t298 = -t529 * t350 - t526 * t351;
t293 = -t473 * pkin(4) + t533;
t292 = -pkin(4) * t388 + qJ(5) * t431 - t319;
t290 = -t525 * t338 + t528 * t340;
t288 = t528 * t338 + t525 * t340;
t285 = -t526 * t333 + t529 * t334;
t284 = -t529 * t333 - t526 * t334;
t283 = t522 * t290 - t521 * t436;
t282 = t521 * t290 + t522 * t436;
t275 = t470 + (-t393 + t468) * qJ(5) + t608 + t552;
t274 = -qJ(2) * t333 - (pkin(2) * t521 - pkin(6) * t522) * t354;
t273 = t322 + t603;
t272 = t527 * t312 - t524 * t352 - t588;
t271 = -t526 * t316 + t529 * t318;
t270 = -t526 * t315 + t529 * t317;
t269 = -t529 * t316 - t526 * t318;
t268 = -t529 * t315 - t526 * t317;
t267 = -qJ(5) * t389 + (-t413 - t473) * pkin(4) + t533;
t266 = qJ(5) * t569 - t524 * t292 - t589;
t265 = t321 + t602;
t264 = -pkin(3) * t382 + pkin(7) * t281;
t263 = -t526 * t309 + t529 * t311;
t262 = -t526 * t308 + t529 * t310;
t261 = -t529 * t309 - t526 * t311;
t260 = -t529 * t308 - t526 * t310;
t257 = -t529 * t305 - t526 * t306;
t256 = pkin(5) * t257;
t255 = t524 * t312 + t527 * t352 + t544;
t254 = -pkin(4) * t319 + qJ(5) * t293;
t253 = qJ(5) * t578 + t527 * t292 + t545;
t252 = qJ(2) * t334 - (-pkin(2) * t522 - pkin(6) * t521 - pkin(1)) * t354;
t251 = -t280 - t590;
t249 = -t529 * t296 - t526 * t297;
t248 = pkin(5) * t249;
t247 = -t525 * t307 + t528 * t336 - t591;
t246 = -pkin(4) * t393 + t259;
t245 = (-t455 - t473) * pkin(4) + t533 + t603;
t244 = t281 + t546;
t243 = -t525 * t300 + t528 * t330 - t592;
t242 = t470 - t534 + t602 + 0.2e1 * t608;
t241 = t527 * t293 - t581;
t240 = t524 * t293 + t572;
t239 = -t526 * t282 + t529 * t283;
t238 = -t529 * t282 - t526 * t283;
t237 = t528 * t281 - t577;
t236 = t525 * t281 + t568;
t234 = -t529 * t278 - t526 * t279;
t233 = pkin(5) * t234;
t232 = t522 * t237 + t521 * t382;
t231 = t521 * t237 - t522 * t382;
t230 = -t524 * t267 + t527 * t275 - t590;
t229 = t527 * t267 + t524 * t275 + t546;
t228 = -t525 * t255 + t528 * t272 - t591;
t227 = -pkin(2) * t236 - pkin(3) * t280;
t226 = -t525 * t253 + t528 * t266 - t592;
t225 = t522 * t247 - t521 * t273 - t585;
t224 = -t525 * t240 + t528 * t241;
t223 = t528 * t240 + t525 * t241;
t222 = t522 * t243 - t521 * t265 - t586;
t221 = t521 * t247 + t522 * t273 + t547;
t220 = -t525 * t244 + t528 * t251 - t593;
t219 = -pkin(7) * t240 - qJ(5) * t572 - t524 * t254;
t218 = t522 * t224 + t521 * t319;
t217 = t521 * t224 - t522 * t319;
t216 = t521 * t243 + t522 * t265 + t548;
t215 = -pkin(6) * t236 - pkin(7) * t568 - t525 * t264;
t214 = -pkin(3) * t319 + pkin(7) * t241 - qJ(5) * t581 + t527 * t254;
t213 = -t526 * t231 + t529 * t232;
t212 = -t529 * t231 - t526 * t232;
t211 = t522 * t228 - t521 * t245 - t585;
t210 = t521 * t228 + t522 * t245 + t547;
t209 = t522 * t226 - t521 * t242 - t586;
t208 = -pkin(2) * t223 - pkin(3) * t240 - pkin(4) * t287;
t207 = t521 * t226 + t522 * t242 + t548;
t206 = t522 * t220 - t521 * t259 - t587;
t205 = -t525 * t229 + t528 * t230 - t593;
t204 = t521 * t220 + t522 * t259 + t549;
t203 = -t526 * t217 + t529 * t218;
t202 = -t529 * t217 - t526 * t218;
t201 = t522 * t205 - t521 * t246 - t587;
t200 = -qJ(2) * t231 + t522 * t215 - t521 * t227;
t199 = t521 * t205 + t522 * t246 + t549;
t198 = -pkin(1) * t236 + qJ(2) * t232 + t521 * t215 + t522 * t227;
t197 = -pkin(6) * t223 - t525 * t214 + t528 * t219;
t196 = -qJ(2) * t217 + t522 * t197 - t521 * t208;
t195 = -pkin(1) * t223 + qJ(2) * t218 + t521 * t197 + t522 * t208;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t519, 0, 0, 0, 0, 0, 0, t449, t450, 0, -t354, 0, 0, 0, 0, 0, 0, t324, t342, t289, t236, 0, 0, 0, 0, 0, 0, t324, t342, t289, t223; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t493, t492, 0, t447, 0, 0, 0, 0, 0, 0, t535, t442, 0, t331, 0, 0, 0, 0, 0, 0, t358, t359, t396, t284, 0, 0, 0, 0, 0, 0, t249, t257, t234, t212, 0, 0, 0, 0, 0, 0, t249, t257, t234, t202; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t492, t493, 0, t448, 0, 0, 0, 0, 0, 0, -t442, t535, 0, -t611, 0, 0, 0, 0, 0, 0, t360, t361, t397, t285, 0, 0, 0, 0, 0, 0, t250, t258, t235, t213, 0, 0, 0, 0, 0, 0, t250, t258, t235, t203; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t500, -t499, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t490 - t437, -pkin(1) * t489 - t438, 0, -pkin(1) * t380, (t487 + t550) * t525, t528 * t486 + t525 * t488, t528 * t501 + t575, t566, t525 * t503 + t565, 0, pkin(1) * t416 + pkin(2) * t488 + pkin(6) * t452 - t567, pkin(1) * t417 - pkin(2) * t486 + pkin(6) * t454 + t576, pkin(1) * t445 + pkin(2) * t494 + pkin(6) * t491 + t355, pkin(1) * t333 - pkin(2) * t421 + pkin(6) * t355, t327, t288, t346, t326, t347, t356, t528 * t300 + t525 * t330 + t554, t528 * t307 + t525 * t336 + t553, t528 * t244 + t525 * t251 + t555, pkin(1) * t231 - pkin(2) * t382 + pkin(6) * t237 - pkin(7) * t577 + t528 * t264, t327, t288, t346, t326, t347, t356, t528 * t253 + t525 * t266 + t554, t528 * t255 + t525 * t272 + t553, t528 * t229 + t525 * t230 + t555, pkin(1) * t217 - pkin(2) * t319 + pkin(6) * t224 + t528 * t214 + t525 * t219; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t492, 0, t493, 0, t538, t472, -t448, -pkin(5) * t448, 0, 0, -t442, 0, t535, 0, t609, -t610, t611, pkin(5) * t611 - qJ(2) * t573 - t529 * t368, -t529 * t428 - t526 * t430, -t529 * t407 - t526 * t409, -t529 * t424 - t526 * t426, -t529 * t427 - t526 * t429, -t529 * t423 - t526 * t425, -t529 * t457 - t526 * t458, -pkin(5) * t360 - t529 * t301 - t526 * t313, -pkin(5) * t361 - t529 * t302 - t526 * t314, -pkin(5) * t397 - t529 * t344 - t526 * t345, -pkin(5) * t285 - t529 * t252 - t526 * t274, t269, t238, t260, t268, t261, t298, -t529 * t216 - t526 * t222 - t595, -t529 * t221 - t526 * t225 - t594, -t529 * t204 - t526 * t206 - t596, -pkin(5) * t213 - t529 * t198 - t526 * t200, t269, t238, t260, t268, t261, t298, -t529 * t207 - t526 * t209 - t595, -t529 * t210 - t526 * t211 - t594, -t529 * t199 - t526 * t201 - t596, -pkin(5) * t203 - t529 * t195 - t526 * t196; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t493, 0, -t492, 0, -t472, t538, t447, pkin(5) * t447, 0, 0, -t535, 0, -t442, 0, t610, t609, t331, pkin(5) * t331 + qJ(2) * t564 - t526 * t368, -t526 * t428 + t529 * t430, -t526 * t407 + t529 * t409, -t526 * t424 + t529 * t426, -t526 * t427 + t529 * t429, -t526 * t423 + t529 * t425, -t526 * t457 + t529 * t458, pkin(5) * t358 - t526 * t301 + t529 * t313, pkin(5) * t359 - t526 * t302 + t529 * t314, pkin(5) * t396 - t526 * t344 + t529 * t345, pkin(5) * t284 - t526 * t252 + t529 * t274, t271, t239, t262, t270, t263, t299, -t526 * t216 + t529 * t222 + t248, -t526 * t221 + t529 * t225 + t256, -t526 * t204 + t529 * t206 + t233, pkin(5) * t212 - t526 * t198 + t529 * t200, t271, t239, t262, t270, t263, t299, -t526 * t207 + t529 * t209 + t248, -t526 * t210 + t529 * t211 + t256, -t526 * t199 + t529 * t201 + t233, pkin(5) * t202 - t526 * t195 + t529 * t196;];
tauB_reg = t1;
