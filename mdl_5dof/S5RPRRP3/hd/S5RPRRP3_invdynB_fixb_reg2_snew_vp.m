% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:48
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRRP3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP3_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP3_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP3_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP3_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:47:49
% EndTime: 2020-01-03 11:47:59
% DurationCPUTime: 7.59s
% Computational Cost: add. (24080->482), mult. (49296->677), div. (0->0), fcn. (31846->8), ass. (0->350)
t531 = sin(qJ(4));
t534 = cos(qJ(4));
t535 = cos(qJ(3));
t532 = sin(qJ(3));
t569 = qJD(1) * t532;
t478 = -t534 * t535 * qJD(1) + t531 * t569;
t480 = (t531 * t535 + t532 * t534) * qJD(1);
t439 = t480 * t478;
t522 = qJDD(3) + qJDD(4);
t547 = -t522 + t439;
t618 = t547 * pkin(4);
t587 = t531 * t547;
t578 = t534 * t547;
t533 = sin(qJ(1));
t536 = cos(qJ(1));
t502 = t533 * g(2) - t536 * g(3);
t609 = qJD(1) ^ 2;
t488 = -t609 * pkin(1) - t502;
t528 = sin(pkin(8));
t529 = cos(pkin(8));
t503 = t536 * g(2) + t533 * g(3);
t538 = qJDD(1) * pkin(1) - t503;
t437 = t528 * t488 - t529 * t538;
t438 = t529 * t488 + t528 * t538;
t548 = t528 * t437 + t529 * t438;
t380 = t529 * t437 - t528 * t438;
t573 = t536 * t380;
t331 = t533 * t548 - t573;
t582 = t533 * t380;
t622 = t536 * t548 + t582;
t492 = t528 * qJDD(1) + t529 * t609;
t493 = t529 * qJDD(1) - t528 * t609;
t442 = -t536 * t492 - t533 * t493;
t526 = g(1) - qJDD(2);
t466 = qJ(2) * t492 - t529 * t526;
t541 = -qJ(2) * t493 - t528 * t526;
t621 = pkin(5) * t442 - t536 * t466 + t533 * t541;
t613 = t533 * t492 - t536 * t493;
t620 = pkin(5) * t613 + t533 * t466 + t536 * t541;
t565 = qJD(1) * qJD(3);
t556 = t535 * t565;
t564 = t532 * qJDD(1);
t490 = t556 + t564;
t516 = t535 * qJDD(1);
t557 = t532 * t565;
t542 = -t516 + t557;
t412 = -t478 * qJD(4) + t534 * t490 - t531 * t542;
t523 = qJD(3) + qJD(4);
t468 = t523 * t478;
t614 = -t468 + t412;
t474 = t480 ^ 2;
t521 = t523 ^ 2;
t455 = -t474 - t521;
t434 = t439 + t522;
t588 = t531 * t434;
t394 = t534 * t455 - t588;
t579 = t534 * t434;
t395 = -t531 * t455 - t579;
t342 = t535 * t394 + t532 * t395;
t612 = -pkin(2) * t342 - pkin(3) * t394;
t473 = t478 ^ 2;
t431 = -t521 - t473;
t370 = t531 * t431 - t578;
t371 = t534 * t431 + t587;
t324 = t535 * t370 + t532 * t371;
t611 = -pkin(2) * t324 - pkin(3) * t370;
t546 = t531 * t490 + t534 * t542;
t389 = (qJD(4) - t523) * t480 + t546;
t393 = -t468 - t412;
t339 = -t389 * t531 + t534 * t393;
t341 = -t389 * t534 - t531 * t393;
t291 = -t532 * t339 + t535 * t341;
t413 = -t473 - t474;
t278 = t528 * t291 - t529 * t413;
t279 = t529 * t291 + t528 * t413;
t235 = t533 * t278 - t536 * t279;
t604 = pkin(5) * t235;
t325 = -t532 * t370 + t535 * t371;
t388 = (qJD(4) + t523) * t480 + t546;
t296 = t528 * t325 - t529 * t388;
t297 = t529 * t325 + t528 * t388;
t250 = t533 * t296 - t536 * t297;
t603 = pkin(5) * t250;
t343 = -t532 * t394 + t535 * t395;
t305 = t528 * t343 - t529 * t614;
t306 = t529 * t343 + t528 * t614;
t258 = t533 * t305 - t536 * t306;
t602 = pkin(5) * t258;
t289 = t535 * t339 + t532 * t341;
t601 = pkin(6) * t289;
t600 = pkin(6) * t324;
t599 = pkin(6) * t342;
t598 = pkin(7) * t339;
t597 = pkin(7) * t370;
t596 = pkin(7) * t394;
t595 = qJ(2) * t278;
t594 = qJ(2) * t296;
t593 = qJ(2) * t305;
t592 = t523 * t531;
t591 = t523 * t534;
t422 = -t609 * pkin(2) + qJDD(1) * pkin(6) + t438;
t408 = t532 * t422 + t535 * t526;
t509 = t535 * t609 * t532;
t499 = qJDD(3) + t509;
t366 = (-t490 + t556) * pkin(7) + t499 * pkin(3) - t408;
t410 = t535 * t422 - t532 * t526;
t501 = qJD(3) * pkin(3) - pkin(7) * t569;
t525 = t535 ^ 2;
t517 = t525 * t609;
t369 = -pkin(3) * t517 - pkin(7) * t542 - qJD(3) * t501 + t410;
t321 = -t534 * t366 + t531 * t369;
t558 = t412 * qJ(5) + t321;
t540 = -qJ(5) * t468 - t558;
t568 = qJD(5) * t480;
t287 = t540 - 0.2e1 * t568 - t618;
t590 = t531 * t287;
t421 = -qJDD(1) * pkin(2) - t609 * pkin(6) + t437;
t382 = t542 * pkin(3) - pkin(7) * t517 + t501 * t569 + t421;
t589 = t531 * t382;
t322 = t531 * t366 + t534 * t369;
t280 = -t534 * t321 + t531 * t322;
t586 = t532 * t280;
t585 = t532 * t421;
t584 = t532 * t499;
t500 = qJDD(3) - t509;
t583 = t532 * t500;
t581 = t534 * t287;
t580 = t534 * t382;
t577 = t535 * t280;
t576 = t535 * t421;
t491 = t516 - 0.2e1 * t557;
t575 = t535 * t491;
t574 = t535 * t500;
t524 = t532 ^ 2;
t570 = t524 + t525;
t567 = t524 * t609;
t563 = t528 * t439;
t562 = t529 * t439;
t561 = pkin(1) * t278 - pkin(2) * t413 + pkin(6) * t291;
t560 = pkin(1) * t296 - pkin(2) * t388 + pkin(6) * t325;
t559 = pkin(1) * t305 - pkin(2) * t614 + pkin(6) * t343;
t555 = -pkin(1) * t289 + qJ(2) * t279;
t554 = -pkin(1) * t324 + qJ(2) * t297;
t553 = -pkin(1) * t342 + qJ(2) * t306;
t552 = -pkin(3) * t413 + pkin(7) * t341;
t551 = -pkin(3) * t388 + pkin(7) * t371;
t550 = -pkin(3) * t614 + pkin(7) * t395;
t495 = -t533 * qJDD(1) - t536 * t609;
t549 = pkin(5) * t495 + t536 * g(1);
t281 = t531 * t321 + t534 * t322;
t355 = t532 * t408 + t535 * t410;
t447 = -t533 * t502 - t536 * t503;
t544 = t528 * t509;
t543 = t529 * t509;
t259 = -pkin(2) * t289 - pkin(3) * t339;
t354 = t535 * t408 - t532 * t410;
t448 = t536 * t502 - t533 * t503;
t411 = -t480 * qJD(4) - t546;
t456 = t523 * pkin(4) - t480 * qJ(5);
t539 = t411 * qJ(5) - 0.2e1 * qJD(5) * t478 - t523 * t456 + t322;
t319 = -t411 * pkin(4) - t473 * qJ(5) + t480 * t456 + qJDD(5) + t382;
t537 = qJD(3) ^ 2;
t507 = -t517 - t537;
t506 = t517 - t537;
t505 = -t537 - t567;
t504 = t537 - t567;
t498 = t517 - t567;
t497 = t517 + t567;
t496 = t536 * qJDD(1) - t533 * t609;
t494 = t570 * qJDD(1);
t489 = 0.2e1 * t556 + t564;
t486 = t535 * t499;
t485 = t570 * t565;
t472 = pkin(5) * t496 + t533 * g(1);
t470 = 0.2e1 * t568;
t462 = -t474 + t521;
t461 = t473 - t521;
t460 = t535 * t490 - t524 * t565;
t459 = -t525 * t565 + t532 * t542;
t458 = t528 * qJDD(3) + t529 * t485;
t457 = -t529 * qJDD(3) + t528 * t485;
t454 = -t532 * t505 - t574;
t453 = -t532 * t504 + t486;
t452 = t535 * t507 - t584;
t451 = t535 * t506 - t583;
t450 = t535 * t505 - t583;
t449 = t532 * t507 + t486;
t446 = t529 * t494 - t528 * t497;
t445 = t528 * t494 + t529 * t497;
t440 = -t532 * t489 + t575;
t436 = -t474 + t473;
t430 = t529 * t460 - t544;
t429 = t529 * t459 + t544;
t428 = t528 * t460 + t543;
t427 = t528 * t459 - t543;
t426 = t529 * t453 + t528 * t564;
t425 = t529 * t451 + t516 * t528;
t424 = t528 * t453 - t529 * t564;
t423 = t528 * t451 - t516 * t529;
t419 = t529 * t454 + t528 * t489;
t418 = t529 * t452 - t528 * t491;
t417 = t528 * t454 - t529 * t489;
t416 = t528 * t452 + t529 * t491;
t415 = (-t478 * t534 + t480 * t531) * t523;
t414 = (-t478 * t531 - t480 * t534) * t523;
t409 = t529 * t440 - t528 * t498;
t407 = t528 * t440 + t529 * t498;
t401 = t534 * t461 - t588;
t400 = -t531 * t462 - t578;
t399 = t531 * t461 + t579;
t398 = t534 * t462 - t587;
t397 = t533 * t445 - t536 * t446;
t396 = t536 * t445 + t533 * t446;
t387 = -pkin(6) * t450 + t576;
t386 = -pkin(6) * t449 + t585;
t377 = t534 * t412 - t480 * t592;
t376 = t531 * t412 + t480 * t591;
t375 = -t531 * t411 + t478 * t591;
t374 = t534 * t411 + t478 * t592;
t373 = -pkin(2) * t450 + t410;
t372 = -pkin(2) * t449 + t408;
t368 = pkin(1) * t526 + qJ(2) * t548;
t361 = t533 * t417 - t536 * t419;
t360 = t533 * t416 - t536 * t418;
t359 = t536 * t417 + t533 * t419;
t358 = t536 * t416 + t533 * t418;
t357 = -t532 * t414 + t535 * t415;
t356 = t535 * t414 + t532 * t415;
t352 = -pkin(4) * t614 - qJ(5) * t434;
t351 = t529 * t357 + t528 * t522;
t350 = t528 * t357 - t529 * t522;
t349 = -t532 * t399 + t535 * t401;
t348 = -t532 * t398 + t535 * t400;
t347 = t535 * t399 + t532 * t401;
t346 = t535 * t398 + t532 * t400;
t345 = -qJ(2) * t445 + t529 * t354;
t344 = qJ(2) * t446 + t528 * t354;
t340 = -t534 * t388 - t531 * t614;
t338 = -t531 * t388 + t534 * t614;
t336 = t580 - t596;
t334 = t529 * t355 + t528 * t421;
t333 = t528 * t355 - t529 * t421;
t330 = t589 - t597;
t329 = -t532 * t376 + t535 * t377;
t328 = -t532 * t374 + t535 * t375;
t327 = t535 * t376 + t532 * t377;
t326 = t535 * t374 + t532 * t375;
t318 = t529 * t329 + t563;
t317 = t529 * t328 - t563;
t316 = t528 * t329 - t562;
t315 = t528 * t328 + t562;
t314 = -qJ(2) * t417 - t528 * t373 + t529 * t387;
t313 = -qJ(2) * t416 - t528 * t372 + t529 * t386;
t312 = -qJ(5) * t455 + t319;
t311 = t529 * t349 - t528 * t389;
t310 = t529 * t348 - t528 * t393;
t309 = t528 * t349 + t529 * t389;
t308 = t528 * t348 + t529 * t393;
t307 = t550 + t589;
t302 = -pkin(1) * t450 + qJ(2) * t419 + t529 * t373 + t528 * t387;
t301 = -pkin(1) * t449 + qJ(2) * t418 + t529 * t372 + t528 * t386;
t300 = t551 - t580;
t299 = t533 * t350 - t536 * t351;
t298 = t536 * t350 + t533 * t351;
t293 = -t473 * pkin(4) + t539;
t292 = -pkin(4) * t388 + qJ(5) * t431 - t319;
t290 = -t532 * t338 + t535 * t340;
t288 = t535 * t338 + t532 * t340;
t285 = t533 * t333 - t536 * t334;
t284 = t536 * t333 + t533 * t334;
t283 = t529 * t290 - t528 * t436;
t282 = t528 * t290 + t529 * t436;
t275 = t470 + (-t393 + t468) * qJ(5) + t618 + t558;
t274 = -qJ(2) * t333 - (pkin(2) * t528 - pkin(6) * t529) * t354;
t273 = t322 + t612;
t272 = t534 * t312 - t531 * t352 - t596;
t271 = t533 * t316 - t536 * t318;
t270 = t533 * t315 - t536 * t317;
t269 = t536 * t316 + t533 * t318;
t268 = t536 * t315 + t533 * t317;
t267 = -qJ(5) * t389 + (-t413 - t473) * pkin(4) + t539;
t266 = qJ(5) * t578 - t531 * t292 - t597;
t265 = t321 + t611;
t264 = -pkin(3) * t382 + pkin(7) * t281;
t263 = t533 * t309 - t536 * t311;
t262 = t533 * t308 - t536 * t310;
t261 = t536 * t309 + t533 * t311;
t260 = t536 * t308 + t533 * t310;
t257 = t536 * t305 + t533 * t306;
t256 = pkin(5) * t257;
t255 = t531 * t312 + t534 * t352 + t550;
t254 = -pkin(4) * t319 + qJ(5) * t293;
t253 = qJ(5) * t587 + t534 * t292 + t551;
t252 = qJ(2) * t334 - (-pkin(2) * t529 - pkin(6) * t528 - pkin(1)) * t354;
t251 = -t280 - t598;
t249 = t536 * t296 + t533 * t297;
t248 = pkin(5) * t249;
t247 = -t532 * t307 + t535 * t336 - t599;
t246 = -pkin(4) * t393 + t259;
t245 = (-t455 - t473) * pkin(4) + t539 + t612;
t244 = t281 + t552;
t243 = -t532 * t300 + t535 * t330 - t600;
t242 = t470 - t540 + t611 + 0.2e1 * t618;
t241 = t534 * t293 - t590;
t240 = t531 * t293 + t581;
t239 = t533 * t282 - t536 * t283;
t238 = t536 * t282 + t533 * t283;
t237 = t535 * t281 - t586;
t236 = t532 * t281 + t577;
t234 = t536 * t278 + t533 * t279;
t233 = pkin(5) * t234;
t232 = t529 * t237 + t528 * t382;
t231 = t528 * t237 - t529 * t382;
t230 = -t531 * t267 + t534 * t275 - t598;
t229 = t534 * t267 + t531 * t275 + t552;
t228 = -t532 * t255 + t535 * t272 - t599;
t227 = -pkin(2) * t236 - pkin(3) * t280;
t226 = -t532 * t253 + t535 * t266 - t600;
t225 = t529 * t247 - t528 * t273 - t593;
t224 = -t532 * t240 + t535 * t241;
t223 = t535 * t240 + t532 * t241;
t222 = t529 * t243 - t528 * t265 - t594;
t221 = t528 * t247 + t529 * t273 + t553;
t220 = -t532 * t244 + t535 * t251 - t601;
t219 = -pkin(7) * t240 - qJ(5) * t581 - t531 * t254;
t218 = t529 * t224 + t528 * t319;
t217 = t528 * t224 - t529 * t319;
t216 = t528 * t243 + t529 * t265 + t554;
t215 = -pkin(6) * t236 - pkin(7) * t577 - t532 * t264;
t214 = -pkin(3) * t319 + pkin(7) * t241 - qJ(5) * t590 + t534 * t254;
t213 = t533 * t231 - t536 * t232;
t212 = t536 * t231 + t533 * t232;
t211 = t529 * t228 - t528 * t245 - t593;
t210 = t528 * t228 + t529 * t245 + t553;
t209 = t529 * t226 - t528 * t242 - t594;
t208 = -pkin(2) * t223 - pkin(3) * t240 - pkin(4) * t287;
t207 = t528 * t226 + t529 * t242 + t554;
t206 = t529 * t220 - t528 * t259 - t595;
t205 = -t532 * t229 + t535 * t230 - t601;
t204 = t528 * t220 + t529 * t259 + t555;
t203 = t533 * t217 - t536 * t218;
t202 = t536 * t217 + t533 * t218;
t201 = t529 * t205 - t528 * t246 - t595;
t200 = -qJ(2) * t231 + t529 * t215 - t528 * t227;
t199 = t528 * t205 + t529 * t246 + t555;
t198 = -pkin(1) * t236 + qJ(2) * t232 + t528 * t215 + t529 * t227;
t197 = -pkin(6) * t223 - t532 * t214 + t535 * t219;
t196 = -qJ(2) * t217 + t529 * t197 - t528 * t208;
t195 = -pkin(1) * t223 + qJ(2) * t218 + t528 * t197 + t529 * t208;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t526, 0, 0, 0, 0, 0, 0, t449, t450, 0, -t354, 0, 0, 0, 0, 0, 0, t324, t342, t289, t236, 0, 0, 0, 0, 0, 0, t324, t342, t289, t223; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t496, t495, 0, t447, 0, 0, 0, 0, 0, 0, -t613, t442, 0, t331, 0, 0, 0, 0, 0, 0, t358, t359, t396, t284, 0, 0, 0, 0, 0, 0, t249, t257, t234, t212, 0, 0, 0, 0, 0, 0, t249, t257, t234, t202; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t495, t496, 0, t448, 0, 0, 0, 0, 0, 0, -t442, -t613, 0, -t622, 0, 0, 0, 0, 0, 0, t360, t361, t397, t285, 0, 0, 0, 0, 0, 0, t250, t258, t235, t213, 0, 0, 0, 0, 0, 0, t250, t258, t235, t203; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t503, t502, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t493 - t437, -pkin(1) * t492 - t438, 0, -pkin(1) * t380, (t490 + t556) * t532, t535 * t489 + t532 * t491, t535 * t504 + t584, t575, t532 * t506 + t574, 0, pkin(1) * t416 + pkin(2) * t491 + pkin(6) * t452 - t576, pkin(1) * t417 - pkin(2) * t489 + pkin(6) * t454 + t585, pkin(1) * t445 + pkin(2) * t497 + pkin(6) * t494 + t355, pkin(1) * t333 - pkin(2) * t421 + pkin(6) * t355, t327, t288, t346, t326, t347, t356, t535 * t300 + t532 * t330 + t560, t535 * t307 + t532 * t336 + t559, t535 * t244 + t532 * t251 + t561, pkin(1) * t231 - pkin(2) * t382 + pkin(6) * t237 - pkin(7) * t586 + t535 * t264, t327, t288, t346, t326, t347, t356, t535 * t253 + t532 * t266 + t560, t535 * t255 + t532 * t272 + t559, t535 * t229 + t532 * t230 + t561, pkin(1) * t217 - pkin(2) * t319 + pkin(6) * t224 + t535 * t214 + t532 * t219; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t495, 0, t496, 0, t549, -t472, -t448, -pkin(5) * t448, 0, 0, -t442, 0, -t613, 0, t621, t620, t622, pkin(5) * t622 + qJ(2) * t582 + t536 * t368, t536 * t428 + t533 * t430, t536 * t407 + t533 * t409, t536 * t424 + t533 * t426, t536 * t427 + t533 * t429, t536 * t423 + t533 * t425, t536 * t457 + t533 * t458, -pkin(5) * t360 + t536 * t301 + t533 * t313, -pkin(5) * t361 + t536 * t302 + t533 * t314, -pkin(5) * t397 + t536 * t344 + t533 * t345, -pkin(5) * t285 + t536 * t252 + t533 * t274, t269, t238, t260, t268, t261, t298, t536 * t216 + t533 * t222 - t603, t536 * t221 + t533 * t225 - t602, t536 * t204 + t533 * t206 - t604, -pkin(5) * t213 + t536 * t198 + t533 * t200, t269, t238, t260, t268, t261, t298, t536 * t207 + t533 * t209 - t603, t536 * t210 + t533 * t211 - t602, t536 * t199 + t533 * t201 - t604, -pkin(5) * t203 + t536 * t195 + t533 * t196; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t496, 0, -t495, 0, t472, t549, t447, pkin(5) * t447, 0, 0, t613, 0, -t442, 0, -t620, t621, t331, pkin(5) * t331 - qJ(2) * t573 + t533 * t368, t533 * t428 - t536 * t430, t533 * t407 - t536 * t409, t533 * t424 - t536 * t426, t533 * t427 - t536 * t429, t533 * t423 - t536 * t425, t533 * t457 - t536 * t458, pkin(5) * t358 + t533 * t301 - t536 * t313, pkin(5) * t359 + t533 * t302 - t536 * t314, pkin(5) * t396 + t533 * t344 - t536 * t345, pkin(5) * t284 + t533 * t252 - t536 * t274, t271, t239, t262, t270, t263, t299, t533 * t216 - t536 * t222 + t248, t533 * t221 - t536 * t225 + t256, t533 * t204 - t536 * t206 + t233, pkin(5) * t212 + t533 * t198 - t536 * t200, t271, t239, t262, t270, t263, t299, t533 * t207 - t536 * t209 + t248, t533 * t210 - t536 * t211 + t256, t533 * t199 - t536 * t201 + t233, pkin(5) * t202 + t533 * t195 - t536 * t196;];
tauB_reg = t1;
