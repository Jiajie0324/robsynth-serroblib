% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRRP3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:48
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRRP3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP3_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP3_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP3_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP3_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:47:59
% EndTime: 2020-01-03 11:48:10
% DurationCPUTime: 11.82s
% Computational Cost: add. (40505->534), mult. (82998->682), div. (0->0), fcn. (53268->8), ass. (0->381)
t1000 = cos(qJ(4));
t1001 = cos(qJ(3));
t1047 = qJD(1) * t1001;
t998 = sin(qJ(3));
t1063 = qJD(1) * t998;
t997 = sin(qJ(4));
t938 = -t1000 * t1047 + t997 * t1063;
t940 = t1000 * t1063 + t997 * t1047;
t893 = t940 * t938;
t989 = qJDD(3) + qJDD(4);
t1106 = t893 - t989;
t1110 = t1106 * pkin(4);
t1096 = qJD(1) ^ 2;
t1002 = cos(qJ(1));
t999 = sin(qJ(1));
t967 = t1002 * g(2) + t999 * g(3);
t1007 = qJDD(1) * pkin(1) - t967;
t966 = t999 * g(2) - t1002 * g(3);
t950 = -t1096 * pkin(1) - t966;
t994 = sin(pkin(8));
t995 = cos(pkin(8));
t891 = t1007 * t994 + t995 * t950;
t874 = -t1096 * pkin(2) + qJDD(1) * pkin(6) + t891;
t992 = g(1) - qJDD(2);
t855 = t1001 * t992 + t998 * t874;
t1046 = t998 * qJDD(1);
t979 = qJD(3) * t1047;
t953 = t979 + t1046;
t975 = t1001 * t1096 * t998;
t963 = qJDD(3) + t975;
t1004 = (-t953 + t979) * pkin(7) + t963 * pkin(3) - t855;
t1048 = qJD(1) * qJD(3);
t1038 = t998 * t1048;
t1045 = t1001 * qJDD(1);
t1009 = -t1038 + t1045;
t857 = t1001 * t874 - t998 * t992;
t965 = qJD(3) * pkin(3) - pkin(7) * t1063;
t1095 = t1001 ^ 2;
t984 = t1095 * t1096;
t814 = -pkin(3) * t984 + pkin(7) * t1009 - qJD(3) * t965 + t857;
t766 = -t1000 * t1004 + t997 * t814;
t990 = qJD(3) + qJD(4);
t928 = t990 * t938;
t1006 = qJ(5) * t928 + 0.2e1 * qJD(5) * t940 + t1110 + t766;
t859 = -t938 * qJD(4) + t1000 * t953 + t1009 * t997;
t729 = t859 * qJ(5) + t1006;
t1005 = -t729 - t1110;
t1057 = t1000 * t1106;
t935 = t938 ^ 2;
t988 = t990 ^ 2;
t884 = -t988 - t935;
t815 = t997 * t884 - t1057;
t812 = pkin(3) * t815;
t1109 = t1005 + t812;
t890 = -t995 * t1007 + t994 * t950;
t1029 = t994 * t890 + t995 * t891;
t827 = t995 * t890 - t994 * t891;
t1053 = t1002 * t827;
t1108 = t1029 * t999 - t1053;
t1068 = t999 * t827;
t1107 = t1002 * t1029 + t1068;
t1072 = t997 * t1106;
t957 = t995 * qJDD(1) - t994 * t1096;
t1014 = -qJ(2) * t957 - t994 * t992;
t956 = t994 * qJDD(1) + t995 * t1096;
t896 = t1002 * t957 - t999 * t956;
t926 = qJ(2) * t956 - t995 * t992;
t1105 = -pkin(5) * t896 + t1002 * t1014 + t999 * t926;
t897 = t1002 * t956 + t999 * t957;
t1104 = -pkin(5) * t897 - t1002 * t926 + t999 * t1014;
t805 = t1001 * t857 + t998 * t855;
t1101 = -t928 + t859;
t1028 = -t1000 * t1009 + t997 * t953;
t838 = (qJD(4) - t990) * t940 + t1028;
t936 = t940 ^ 2;
t816 = t1000 * t884 + t1072;
t769 = t1001 * t815 + t998 * t816;
t1094 = pkin(2) * t769;
t887 = t893 + t989;
t1073 = t997 * t887;
t914 = -t936 - t988;
t843 = t1000 * t914 - t1073;
t1058 = t1000 * t887;
t844 = -t997 * t914 - t1058;
t789 = t1001 * t843 + t998 * t844;
t1093 = pkin(2) * t789;
t767 = t1000 * t814 + t997 * t1004;
t722 = -t1000 * t766 + t997 * t767;
t1092 = pkin(3) * t722;
t842 = t928 + t859;
t786 = -t1000 * t842 - t838 * t997;
t788 = -t1000 * t838 + t997 * t842;
t733 = t1001 * t788 - t998 * t786;
t860 = -t935 - t936;
t720 = t994 * t733 - t995 * t860;
t721 = t995 * t733 + t994 * t860;
t1091 = pkin(5) * (-t1002 * t721 + t999 * t720);
t770 = t1001 * t816 - t998 * t815;
t837 = (qJD(4) + t990) * t940 + t1028;
t738 = t994 * t770 - t995 * t837;
t739 = t995 * t770 + t994 * t837;
t1090 = pkin(5) * (-t1002 * t739 + t999 * t738);
t790 = t1001 * t844 - t998 * t843;
t748 = -t1101 * t995 + t994 * t790;
t749 = t1101 * t994 + t995 * t790;
t1089 = pkin(5) * (-t1002 * t749 + t999 * t748);
t731 = t1001 * t786 + t998 * t788;
t1087 = pkin(6) * t731;
t1086 = pkin(6) * t769;
t1085 = pkin(6) * t789;
t1084 = pkin(7) * t786;
t1083 = pkin(7) * t815;
t1082 = pkin(7) * t843;
t1081 = qJ(2) * t720;
t1080 = qJ(2) * t738;
t1079 = qJ(2) * t748;
t1077 = t990 * t940;
t1076 = t990 * t997;
t1075 = t997 * t729;
t873 = -qJDD(1) * pkin(2) - t1096 * pkin(6) + t890;
t829 = -t1009 * pkin(3) - pkin(7) * t984 + t965 * t1063 + t873;
t1074 = t997 * t829;
t1071 = t998 * t722;
t869 = t998 * t873;
t1070 = t998 * t963;
t964 = qJDD(3) - t975;
t1069 = t998 * t964;
t1067 = -pkin(2) * t860 + pkin(6) * t733;
t1066 = -pkin(2) * t837 + pkin(6) * t770;
t1065 = -pkin(2) * t1101 + pkin(6) * t790;
t1064 = -pkin(2) * t873 + pkin(6) * t805;
t1062 = qJD(5) * t938;
t1060 = t1000 * t729;
t1059 = t1000 * t829;
t1056 = t1000 * t990;
t1055 = t1001 * t722;
t870 = t1001 * t873;
t954 = -0.2e1 * t1038 + t1045;
t904 = t1001 * t954;
t1054 = t1001 * t964;
t991 = t998 ^ 2;
t1050 = t991 * t1096;
t1044 = t991 + t1095;
t1043 = t994 * t893;
t1042 = t995 * t893;
t834 = pkin(3) * t843;
t1041 = t834 - t767;
t1003 = qJD(3) ^ 2;
t969 = -t1003 - t1050;
t913 = -t998 * t969 - t1054;
t952 = 0.2e1 * t979 + t1046;
t1040 = -pkin(2) * t952 + pkin(6) * t913 + t869;
t971 = -t984 - t1003;
t911 = t1001 * t971 - t1070;
t1039 = pkin(2) * t954 + pkin(6) * t911 - t870;
t1037 = -pkin(1) * t731 + qJ(2) * t721;
t1036 = -pkin(1) * t769 + qJ(2) * t739;
t1035 = -pkin(1) * t789 + qJ(2) * t749;
t782 = pkin(3) * t786;
t698 = -pkin(2) * t731 - t782;
t858 = -t940 * qJD(4) - t1028;
t915 = t990 * pkin(4) - t940 * qJ(5);
t1015 = t935 * pkin(4) - t858 * qJ(5) + t990 * t915 - t767;
t929 = -0.2e1 * t1062;
t735 = t929 - t1015;
t677 = t997 * t735 - t1060;
t728 = pkin(4) * t729;
t1034 = pkin(3) * t677 - t728;
t1033 = -pkin(3) * t860 + pkin(7) * t788;
t1032 = -pkin(3) * t837 + pkin(7) * t816;
t1031 = -pkin(3) * t1101 + pkin(7) * t844;
t959 = -t999 * qJDD(1) - t1002 * t1096;
t1030 = pkin(5) * t959 + t1002 * g(1);
t723 = t1000 * t767 + t997 * t766;
t1027 = -t1002 * t967 - t999 * t966;
t678 = t1000 * t735 + t1075;
t764 = -t858 * pkin(4) - t935 * qJ(5) + t940 * t915 + qJDD(5) + t829;
t693 = -pkin(4) * t764 + qJ(5) * t735;
t643 = -pkin(3) * t764 + pkin(7) * t678 + qJ(5) * t1075 + t1000 * t693;
t650 = -pkin(7) * t677 + qJ(5) * t1060 - t997 * t693;
t657 = t1001 * t678 - t998 * t677;
t1026 = -pkin(2) * t764 + pkin(6) * t657 + t1001 * t643 + t998 * t650;
t708 = -pkin(4) * t860 - qJ(5) * t838 + t735;
t717 = (t842 + t859) * qJ(5) + t1006;
t663 = t1000 * t708 + t997 * t717 + t1033;
t665 = t1000 * t717 - t997 * t708 - t1084;
t1025 = t1001 * t663 + t998 * t665 + t1067;
t682 = t1033 + t723;
t689 = -t722 - t1084;
t1024 = t1001 * t682 + t998 * t689 + t1067;
t734 = -pkin(4) * t837 + qJ(5) * t884 - t764;
t692 = qJ(5) * t1072 + t1000 * t734 + t1032;
t707 = qJ(5) * t1057 - t997 * t734 - t1083;
t1023 = t1001 * t692 + t998 * t707 + t1066;
t756 = -qJ(5) * t914 + t764;
t801 = -pkin(4) * t1101 - qJ(5) * t887;
t695 = t1000 * t801 + t997 * t756 + t1031;
t714 = t1000 * t756 - t997 * t801 - t1082;
t1022 = t1001 * t695 + t998 * t714 + t1065;
t743 = t1032 - t1059;
t777 = t1074 - t1083;
t1021 = t1001 * t743 + t998 * t777 + t1066;
t751 = t1031 + t1074;
t783 = t1059 - t1082;
t1020 = t1001 * t751 + t998 * t783 + t1065;
t958 = t1044 * qJDD(1);
t961 = t984 + t1050;
t1019 = pkin(2) * t961 + pkin(6) * t958 + t805;
t1018 = t994 * t975;
t1017 = t995 * t975;
t1016 = t766 - t812;
t804 = t1001 * t855 - t998 * t857;
t1013 = t1002 * t966 - t999 * t967;
t1012 = pkin(4) * t914 + t1015;
t674 = t1001 * t723 - t1071;
t704 = -pkin(3) * t829 + pkin(7) * t723;
t1011 = -pkin(2) * t829 + pkin(6) * t674 - pkin(7) * t1071 + t1001 * t704;
t1008 = t834 + t1012;
t970 = t984 - t1003;
t968 = t1003 - t1050;
t962 = -t984 + t1050;
t960 = t1002 * qJDD(1) - t999 * t1096;
t948 = t1001 * t963;
t947 = t1044 * t1048;
t934 = pkin(5) * t960 + t999 * g(1);
t930 = 0.2e1 * t1062;
t921 = -t936 + t988;
t920 = t935 - t988;
t919 = t1001 * t953 - t991 * t1048;
t918 = -t1009 * t998 - t1095 * t1048;
t917 = t994 * qJDD(3) + t995 * t947;
t916 = -t995 * qJDD(3) + t994 * t947;
t912 = -t998 * t968 + t948;
t910 = t1001 * t970 - t1069;
t909 = t1001 * t969 - t1069;
t908 = t1001 * t968 + t1070;
t907 = t998 * t971 + t948;
t906 = t998 * t970 + t1054;
t905 = (t953 + t979) * t998;
t899 = t995 * t958 - t994 * t961;
t898 = t994 * t958 + t995 * t961;
t895 = -t998 * t952 + t904;
t894 = t1001 * t952 + t998 * t954;
t889 = t936 - t935;
t883 = t995 * t919 - t1018;
t882 = t995 * t918 + t1018;
t881 = t994 * t919 + t1017;
t880 = t994 * t918 - t1017;
t879 = t994 * t1046 + t995 * t912;
t878 = t994 * t1045 + t995 * t910;
t877 = -t995 * t1046 + t994 * t912;
t876 = -t995 * t1045 + t994 * t910;
t868 = t995 * t913 + t994 * t952;
t867 = t995 * t911 - t994 * t954;
t866 = t994 * t913 - t995 * t952;
t865 = t994 * t911 + t995 * t954;
t864 = -pkin(1) * t956 - t891;
t863 = pkin(1) * t957 - t890;
t862 = (-t1000 * t938 + t940 * t997) * t990;
t861 = (-t1000 * t940 - t938 * t997) * t990;
t856 = t995 * t895 + t994 * t962;
t854 = t994 * t895 - t995 * t962;
t848 = t1000 * t920 - t1073;
t847 = -t997 * t921 - t1057;
t846 = t997 * t920 + t1058;
t845 = t1000 * t921 - t1072;
t836 = -pkin(6) * t909 + t870;
t835 = -pkin(6) * t907 + t869;
t830 = pkin(4) * t842;
t823 = pkin(1) * t827;
t822 = t1000 * t859 - t940 * t1076;
t821 = t940 * t1056 + t997 * t859;
t820 = t938 * t1056 - t997 * t858;
t819 = t1000 * t858 + t938 * t1076;
t818 = -pkin(2) * t909 + t857;
t817 = -pkin(2) * t907 + t855;
t813 = pkin(1) * t992 + qJ(2) * t1029;
t807 = t1001 * t862 - t998 * t861;
t806 = t1001 * t861 + t998 * t862;
t800 = t995 * t807 + t994 * t989;
t799 = t994 * t807 - t995 * t989;
t798 = pkin(1) * t865 + t1039;
t797 = pkin(1) * t866 + t1040;
t796 = t1001 * t848 - t998 * t846;
t795 = t1001 * t847 - t998 * t845;
t794 = t1001 * t846 + t998 * t848;
t793 = t1001 * t845 + t998 * t847;
t792 = -qJ(2) * t898 + t995 * t804;
t791 = qJ(2) * t899 + t994 * t804;
t787 = -t1000 * t837 - t1101 * t997;
t785 = t1000 * t1101 - t997 * t837;
t779 = t995 * t805 + t994 * t873;
t778 = t994 * t805 - t995 * t873;
t776 = t1001 * t822 - t998 * t821;
t775 = t1001 * t820 - t998 * t819;
t774 = t1001 * t821 + t998 * t822;
t773 = t1001 * t819 + t998 * t820;
t771 = pkin(1) * t898 + t1019;
t762 = t995 * t776 + t1043;
t761 = t995 * t775 - t1043;
t760 = t994 * t776 - t1042;
t759 = t994 * t775 + t1042;
t758 = -qJ(2) * t866 - t994 * t818 + t995 * t836;
t757 = -qJ(2) * t865 - t994 * t817 + t995 * t835;
t755 = t995 * t796 - t994 * t838;
t754 = t995 * t795 + t994 * t842;
t753 = t994 * t796 + t995 * t838;
t752 = t994 * t795 - t995 * t842;
t747 = pkin(1) * t748;
t745 = -pkin(1) * t909 + qJ(2) * t868 + t995 * t818 + t994 * t836;
t744 = -pkin(1) * t907 + qJ(2) * t867 + t995 * t817 + t994 * t835;
t742 = -t1002 * t800 + t999 * t799;
t741 = t1002 * t799 + t999 * t800;
t737 = pkin(1) * t738;
t732 = t1001 * t787 - t998 * t785;
t730 = t1001 * t785 + t998 * t787;
t726 = pkin(1) * t778 + t1064;
t725 = t995 * t732 + t994 * t889;
t724 = t994 * t732 - t995 * t889;
t719 = pkin(1) * t720;
t716 = -qJ(2) * t778 - (pkin(2) * t994 - pkin(6) * t995) * t804;
t715 = -t1041 - t1093;
t712 = -t1002 * t762 + t999 * t760;
t711 = -t1002 * t761 + t999 * t759;
t710 = t1002 * t760 + t999 * t762;
t709 = t1002 * t759 + t999 * t761;
t705 = t1016 - t1094;
t702 = -t1002 * t755 + t999 * t753;
t701 = -t1002 * t754 + t999 * t752;
t700 = t1002 * t753 + t999 * t755;
t699 = t1002 * t752 + t999 * t754;
t696 = pkin(5) * (t1002 * t748 + t999 * t749);
t691 = qJ(2) * t779 - (-pkin(2) * t995 - pkin(6) * t994 - pkin(1)) * t804;
t686 = pkin(5) * (t1002 * t738 + t999 * t739);
t685 = t1001 * t783 - t998 * t751 - t1085;
t684 = t698 + t830;
t683 = -t1008 + t929 - t1093;
t680 = t1001 * t777 - t998 * t743 - t1086;
t679 = -t1094 - t1109;
t676 = -t1002 * t725 + t999 * t724;
t675 = t1002 * t724 + t999 * t725;
t673 = t998 * t723 + t1055;
t670 = pkin(5) * (t1002 * t720 + t999 * t721);
t669 = t995 * t674 + t994 * t829;
t668 = t994 * t674 - t995 * t829;
t667 = t747 + t1020;
t666 = t737 + t1021;
t661 = t1001 * t714 - t998 * t695 - t1085;
t660 = -pkin(2) * t673 - t1092;
t659 = t1001 * t707 - t998 * t692 - t1086;
t658 = t995 * t685 - t994 * t715 - t1079;
t656 = t1001 * t677 + t998 * t678;
t654 = t995 * t680 - t994 * t705 - t1080;
t653 = t994 * t685 + t995 * t715 + t1035;
t652 = t747 + t1022;
t651 = t1001 * t689 - t998 * t682 - t1087;
t648 = t995 * t657 + t994 * t764;
t647 = t994 * t657 - t995 * t764;
t646 = t737 + t1023;
t645 = t994 * t680 + t995 * t705 + t1036;
t644 = -pkin(6) * t673 - pkin(7) * t1055 - t998 * t704;
t641 = t719 + t1024;
t640 = t995 * t661 - t994 * t683 - t1079;
t639 = t994 * t661 + t995 * t683 + t1035;
t638 = t995 * t659 - t994 * t679 - t1080;
t637 = -pkin(2) * t656 - t1034;
t636 = t994 * t659 + t995 * t679 + t1036;
t635 = t995 * t651 - t994 * t698 - t1081;
t634 = t1001 * t665 - t998 * t663 - t1087;
t633 = pkin(1) * t668 + t1011;
t632 = t994 * t651 + t995 * t698 + t1037;
t631 = t719 + t1025;
t630 = t995 * t634 - t994 * t684 - t1081;
t629 = -qJ(2) * t668 + t995 * t644 - t994 * t660;
t628 = t994 * t634 + t995 * t684 + t1037;
t627 = -pkin(1) * t673 + qJ(2) * t669 + t994 * t644 + t995 * t660;
t626 = -pkin(6) * t656 + t1001 * t650 - t998 * t643;
t625 = pkin(1) * t647 + t1026;
t624 = -qJ(2) * t647 + t995 * t626 - t994 * t637;
t623 = -pkin(1) * t656 + qJ(2) * t648 + t994 * t626 + t995 * t637;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t967, t966, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t863, t864, 0, -t823, t905, t894, t908, t904, t906, 0, t798, t797, t771, t726, t774, t730, t793, t773, t794, t806, t666, t667, t641, t633, t774, t730, t793, t773, t794, t806, t646, t652, t631, t625; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t959, 0, t960, 0, t1030, -t934, -t1013, -pkin(5) * t1013, 0, 0, t897, 0, t896, 0, t1104, t1105, t1107, pkin(5) * t1107 + qJ(2) * t1068 + t1002 * t813, t1002 * t881 + t999 * t883, t1002 * t854 + t999 * t856, t1002 * t877 + t999 * t879, t1002 * t880 + t999 * t882, t1002 * t876 + t999 * t878, t1002 * t916 + t999 * t917, t999 * t757 + t1002 * t744 - pkin(5) * (-t1002 * t867 + t999 * t865), t999 * t758 + t1002 * t745 - pkin(5) * (-t1002 * t868 + t999 * t866), t999 * t792 + t1002 * t791 - pkin(5) * (-t1002 * t899 + t999 * t898), t999 * t716 + t1002 * t691 - pkin(5) * (-t1002 * t779 + t999 * t778), t710, t675, t699, t709, t700, t741, t1002 * t645 + t999 * t654 - t1090, t1002 * t653 + t999 * t658 - t1089, t1002 * t632 + t999 * t635 - t1091, t999 * t629 + t1002 * t627 - pkin(5) * (-t1002 * t669 + t999 * t668), t710, t675, t699, t709, t700, t741, t1002 * t636 + t999 * t638 - t1090, t1002 * t639 + t999 * t640 - t1089, t1002 * t628 + t999 * t630 - t1091, t999 * t624 + t1002 * t623 - pkin(5) * (-t1002 * t648 + t999 * t647); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t960, 0, -t959, 0, t934, t1030, t1027, pkin(5) * t1027, 0, 0, -t896, 0, t897, 0, -t1105, t1104, t1108, pkin(5) * t1108 - qJ(2) * t1053 + t999 * t813, -t1002 * t883 + t999 * t881, -t1002 * t856 + t999 * t854, -t1002 * t879 + t999 * t877, -t1002 * t882 + t999 * t880, -t1002 * t878 + t999 * t876, -t1002 * t917 + t999 * t916, -t1002 * t757 + t999 * t744 + pkin(5) * (t1002 * t865 + t999 * t867), -t1002 * t758 + t999 * t745 + pkin(5) * (t1002 * t866 + t999 * t868), -t1002 * t792 + t999 * t791 + pkin(5) * (t1002 * t898 + t999 * t899), -t1002 * t716 + t999 * t691 + pkin(5) * (t1002 * t778 + t999 * t779), t712, t676, t701, t711, t702, t742, -t1002 * t654 + t999 * t645 + t686, -t1002 * t658 + t999 * t653 + t696, -t1002 * t635 + t999 * t632 + t670, -t1002 * t629 + t999 * t627 + pkin(5) * (t1002 * t668 + t999 * t669), t712, t676, t701, t711, t702, t742, -t1002 * t638 + t999 * t636 + t686, -t1002 * t640 + t999 * t639 + t696, -t1002 * t630 + t999 * t628 + t670, -t1002 * t624 + t999 * t623 + pkin(5) * (t1002 * t647 + t999 * t648); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1096, 0, 0, -g(1), t967, 0, 0, 0, t957, 0, -t956, 0, t1014, t926, t827, qJ(2) * t827, t883, t856, t879, t882, t878, t917, t757, t758, t792, t716, t762, t725, t754, t761, t755, t800, t654, t658, t635, t629, t762, t725, t754, t761, t755, t800, t638, t640, t630, t624; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1096, 0, qJDD(1), 0, g(1), 0, -t966, 0, 0, 0, t956, 0, t957, 0, -t926, t1014, t1029, t813, t881, t854, t877, t880, t876, t916, t744, t745, t791, t691, t760, t724, t752, t759, t753, t799, t645, t653, t632, t627, t760, t724, t752, t759, t753, t799, t636, t639, t628, t623; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t967, t966, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t863, t864, 0, -t823, t905, t894, t908, t904, t906, 0, t798, t797, t771, t726, t774, t730, t793, t773, t794, t806, t666, t667, t641, t633, t774, t730, t793, t773, t794, t806, t646, t652, t631, t625; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1096, 0, 0, -t992, t890, 0, t919, t895, t912, t918, t910, t947, t835, t836, t804, pkin(6) * t804, t776, t732, t795, t775, t796, t807, t680, t685, t651, t644, t776, t732, t795, t775, t796, t807, t659, t661, t634, t626; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1096, 0, qJDD(1), 0, t992, 0, t891, 0, t975, -t962, -t1046, -t975, -t1045, -qJDD(3), t817, t818, 0, pkin(2) * t804, -t893, -t889, -t842, t893, t838, -t989, t705, t715, t698, t660, -t893, -t889, -t842, t893, t838, -t989, t679, t683, t684, t637; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t890, -t891, 0, 0, t905, t894, t908, t904, t906, 0, t1039, t1040, t1019, t1064, t774, t730, t793, t773, t794, t806, t1021, t1020, t1024, t1011, t774, t730, t793, t773, t794, t806, t1023, t1022, t1025, t1026; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t953, t954, t963, -t979, t970, t979, 0, t873, t855, 0, t822, t787, t847, t820, t848, t862, t777, t783, t689, -pkin(7) * t722, t822, t787, t847, t820, t848, t862, t707, t714, t665, t650; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1038, t952, t968, t1009, t964, -t1038, -t873, 0, t857, 0, t821, t785, t845, t819, t846, t861, t743, t751, t682, t704, t821, t785, t845, t819, t846, t861, t692, t695, t663, t643; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t975, t962, t1046, t975, t1045, qJDD(3), -t855, -t857, 0, 0, t893, t889, t842, -t893, -t838, t989, -t1016, t1041, t782, t1092, t893, t889, t842, -t893, -t838, t989, t1109, t930 + t1008, -t830 + t782, t1034; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t859, -t837, -t1106, t928, t920, -t928, 0, t829, t766, 0, t859, -t837, -t1106, t928, t920, -t928, qJ(5) * t1106, t756, t717, qJ(5) * t729; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1077, t1101, t921, t858, t887, -t1077, -t829, 0, t767, 0, t1077, t1101, t921, t858, t887, -t1077, t734, t801, t708, t693; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t893, t889, t842, -t893, -t838, t989, -t766, -t767, 0, 0, t893, t889, t842, -t893, -t838, t989, t1005, t930 + t1012, -t830, -t728; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t859, -t837, -t1106, t928, t920, -t928, 0, t764, t729, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1077, t1101, t921, t858, t887, -t1077, -t764, 0, t735, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t893, t889, t842, -t893, -t838, t989, -t729, -t735, 0, 0;];
m_new_reg = t1;
