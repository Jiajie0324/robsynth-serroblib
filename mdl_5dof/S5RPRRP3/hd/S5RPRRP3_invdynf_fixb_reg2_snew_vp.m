% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRRP3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:04
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRRP3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP3_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP3_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP3_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP3_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:04:25
% EndTime: 2019-12-05 18:04:27
% DurationCPUTime: 2.01s
% Computational Cost: add. (6554->165), mult. (13463->228), div. (0->0), fcn. (8785->8), ass. (0->134)
t1208 = qJD(3) + qJD(4);
t1246 = qJD(4) + t1208;
t1215 = sin(qJ(4));
t1218 = cos(qJ(4));
t1219 = cos(qJ(3));
t1239 = qJD(1) * t1219;
t1216 = sin(qJ(3));
t1240 = qJD(1) * t1216;
t1178 = t1215 * t1240 - t1218 * t1239;
t1245 = t1178 ^ 2;
t1180 = (t1215 * t1219 + t1216 * t1218) * qJD(1);
t1244 = t1180 ^ 2;
t1243 = t1208 ^ 2;
t1242 = t1219 ^ 2;
t1241 = -2 * qJD(5);
t1238 = t1180 * t1178;
t1222 = qJD(1) ^ 2;
t1237 = t1242 * t1222;
t1236 = qJD(4) - t1208;
t1217 = sin(qJ(1));
t1220 = cos(qJ(1));
t1196 = t1217 * g(2) - t1220 * g(3);
t1183 = -t1222 * pkin(1) + t1196;
t1212 = sin(pkin(8));
t1213 = cos(pkin(8));
t1197 = t1220 * g(2) + t1217 * g(3);
t1224 = qJDD(1) * pkin(1) + t1197;
t1164 = t1213 * t1183 + t1212 * t1224;
t1159 = -t1222 * pkin(2) + qJDD(1) * pkin(6) + t1164;
t1210 = -g(1) + qJDD(2);
t1150 = -t1216 * t1159 + t1219 * t1210;
t1230 = qJD(3) * t1239;
t1235 = t1216 * qJDD(1);
t1185 = t1230 + t1235;
t1201 = t1219 * t1222 * t1216;
t1193 = qJDD(3) + t1201;
t1136 = (-t1185 + t1230) * pkin(7) + t1193 * pkin(3) + t1150;
t1151 = t1219 * t1159 + t1216 * t1210;
t1195 = qJD(3) * pkin(3) - pkin(7) * t1240;
t1231 = qJD(3) * t1240;
t1234 = t1219 * qJDD(1);
t1225 = -t1231 + t1234;
t1137 = -pkin(3) * t1237 + t1225 * pkin(7) - qJD(3) * t1195 + t1151;
t1122 = t1215 * t1136 + t1218 * t1137;
t1233 = -qJDD(3) - qJDD(4);
t1209 = t1216 ^ 2;
t1232 = t1209 + t1242;
t1121 = t1218 * t1136 - t1215 * t1137;
t1163 = -t1212 * t1183 + t1213 * t1224;
t1229 = t1215 * t1185 - t1218 * t1225;
t1161 = -t1233 - t1238;
t1187 = -t1212 * qJDD(1) - t1213 * t1222;
t1188 = t1213 * qJDD(1) - t1212 * t1222;
t1228 = t1220 * t1187 - t1217 * t1188;
t1227 = -t1217 * t1187 - t1220 * t1188;
t1158 = -qJDD(1) * pkin(2) - t1222 * pkin(6) - t1163;
t1226 = -t1180 * qJD(4) - t1229;
t1223 = -t1218 * t1185 - t1215 * t1225;
t1142 = -t1225 * pkin(3) - pkin(7) * t1237 + t1195 * t1240 + t1158;
t1146 = t1236 * t1178 + t1223;
t1221 = qJD(3) ^ 2;
t1199 = -t1221 - t1237;
t1198 = -t1209 * t1222 - t1221;
t1194 = -qJDD(3) + t1201;
t1192 = t1232 * t1222;
t1191 = -t1220 * qJDD(1) + t1217 * t1222;
t1190 = t1217 * qJDD(1) + t1220 * t1222;
t1189 = t1232 * qJDD(1);
t1186 = -0.2e1 * t1231 + t1234;
t1184 = 0.2e1 * t1230 + t1235;
t1172 = t1208 * pkin(4) - t1180 * qJ(5);
t1171 = -t1243 - t1244;
t1170 = t1219 * t1194 - t1216 * t1198;
t1169 = -t1216 * t1193 + t1219 * t1199;
t1168 = t1216 * t1194 + t1219 * t1198;
t1167 = t1219 * t1193 + t1216 * t1199;
t1166 = t1213 * t1189 - t1212 * t1192;
t1165 = t1212 * t1189 + t1213 * t1192;
t1162 = t1233 - t1238;
t1160 = -t1243 - t1245;
t1156 = t1213 * t1170 + t1212 * t1184;
t1155 = t1213 * t1169 - t1212 * t1186;
t1154 = t1212 * t1170 - t1213 * t1184;
t1153 = t1212 * t1169 + t1213 * t1186;
t1152 = -t1244 - t1245;
t1148 = t1218 * t1162 - t1215 * t1171;
t1147 = t1215 * t1162 + t1218 * t1171;
t1145 = -t1246 * t1178 - t1223;
t1144 = -t1236 * t1180 - t1229;
t1143 = t1246 * t1180 + t1229;
t1141 = -t1212 * t1163 + t1213 * t1164;
t1140 = t1213 * t1163 + t1212 * t1164;
t1139 = t1218 * t1160 - t1215 * t1161;
t1138 = t1215 * t1160 + t1218 * t1161;
t1132 = -t1216 * t1150 + t1219 * t1151;
t1131 = t1219 * t1150 + t1216 * t1151;
t1130 = -t1216 * t1147 + t1219 * t1148;
t1129 = t1219 * t1147 + t1216 * t1148;
t1128 = t1218 * t1144 - t1215 * t1146;
t1127 = t1215 * t1144 + t1218 * t1146;
t1126 = t1213 * t1132 + t1212 * t1158;
t1125 = t1212 * t1132 - t1213 * t1158;
t1124 = -t1216 * t1138 + t1219 * t1139;
t1123 = t1219 * t1138 + t1216 * t1139;
t1120 = -t1226 * pkin(4) - t1245 * qJ(5) + t1180 * t1172 + qJDD(5) + t1142;
t1119 = t1213 * t1130 + t1212 * t1145;
t1118 = t1212 * t1130 - t1213 * t1145;
t1117 = t1213 * t1124 + t1212 * t1143;
t1116 = t1212 * t1124 - t1213 * t1143;
t1115 = -t1208 * t1172 + t1226 * qJ(5) + (-pkin(4) * t1178 + t1241) * t1178 + t1122;
t1114 = -t1216 * t1127 + t1219 * t1128;
t1113 = t1219 * t1127 + t1216 * t1128;
t1112 = t1161 * pkin(4) + t1146 * qJ(5) + t1180 * t1241 + t1121;
t1111 = -t1215 * t1121 + t1218 * t1122;
t1110 = t1218 * t1121 + t1215 * t1122;
t1109 = t1213 * t1114 + t1212 * t1152;
t1108 = t1212 * t1114 - t1213 * t1152;
t1107 = -t1217 * t1118 + t1220 * t1119;
t1106 = -t1220 * t1118 - t1217 * t1119;
t1105 = -t1217 * t1116 + t1220 * t1117;
t1104 = -t1220 * t1116 - t1217 * t1117;
t1103 = -t1215 * t1112 + t1218 * t1115;
t1102 = t1218 * t1112 + t1215 * t1115;
t1101 = -t1216 * t1110 + t1219 * t1111;
t1100 = t1219 * t1110 + t1216 * t1111;
t1099 = -t1217 * t1108 + t1220 * t1109;
t1098 = -t1220 * t1108 - t1217 * t1109;
t1097 = t1213 * t1101 + t1212 * t1142;
t1096 = t1212 * t1101 - t1213 * t1142;
t1095 = -t1216 * t1102 + t1219 * t1103;
t1094 = t1219 * t1102 + t1216 * t1103;
t1093 = t1213 * t1095 + t1212 * t1120;
t1092 = t1212 * t1095 - t1213 * t1120;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1210, 0, 0, 0, 0, 0, 0, t1167, t1168, 0, t1131, 0, 0, 0, 0, 0, 0, t1123, t1129, t1113, t1100, 0, 0, 0, 0, 0, 0, t1123, t1129, t1113, t1094; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1191, t1190, 0, -t1217 * t1196 - t1220 * t1197, 0, 0, 0, 0, 0, 0, t1227, -t1228, 0, -t1220 * t1140 - t1217 * t1141, 0, 0, 0, 0, 0, 0, -t1220 * t1153 - t1217 * t1155, -t1220 * t1154 - t1217 * t1156, -t1220 * t1165 - t1217 * t1166, -t1220 * t1125 - t1217 * t1126, 0, 0, 0, 0, 0, 0, t1104, t1106, t1098, -t1220 * t1096 - t1217 * t1097, 0, 0, 0, 0, 0, 0, t1104, t1106, t1098, -t1220 * t1092 - t1217 * t1093; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1190, t1191, 0, t1220 * t1196 - t1217 * t1197, 0, 0, 0, 0, 0, 0, t1228, t1227, 0, -t1217 * t1140 + t1220 * t1141, 0, 0, 0, 0, 0, 0, -t1217 * t1153 + t1220 * t1155, -t1217 * t1154 + t1220 * t1156, -t1217 * t1165 + t1220 * t1166, -t1217 * t1125 + t1220 * t1126, 0, 0, 0, 0, 0, 0, t1105, t1107, t1099, -t1217 * t1096 + t1220 * t1097, 0, 0, 0, 0, 0, 0, t1105, t1107, t1099, -t1217 * t1092 + t1220 * t1093; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1222, -qJDD(1), 0, t1196, 0, 0, 0, 0, 0, 0, t1187, -t1188, 0, t1141, 0, 0, 0, 0, 0, 0, t1155, t1156, t1166, t1126, 0, 0, 0, 0, 0, 0, t1117, t1119, t1109, t1097, 0, 0, 0, 0, 0, 0, t1117, t1119, t1109, t1093; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1222, 0, t1197, 0, 0, 0, 0, 0, 0, t1188, t1187, 0, t1140, 0, 0, 0, 0, 0, 0, t1153, t1154, t1165, t1125, 0, 0, 0, 0, 0, 0, t1116, t1118, t1108, t1096, 0, 0, 0, 0, 0, 0, t1116, t1118, t1108, t1092; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1210, 0, 0, 0, 0, 0, 0, t1167, t1168, 0, t1131, 0, 0, 0, 0, 0, 0, t1123, t1129, t1113, t1100, 0, 0, 0, 0, 0, 0, t1123, t1129, t1113, t1094; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1222, -qJDD(1), 0, t1164, 0, 0, 0, 0, 0, 0, t1169, t1170, t1189, t1132, 0, 0, 0, 0, 0, 0, t1124, t1130, t1114, t1101, 0, 0, 0, 0, 0, 0, t1124, t1130, t1114, t1095; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1222, 0, t1163, 0, 0, 0, 0, 0, 0, t1186, -t1184, t1192, -t1158, 0, 0, 0, 0, 0, 0, -t1143, -t1145, -t1152, -t1142, 0, 0, 0, 0, 0, 0, -t1143, -t1145, -t1152, -t1120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1210, 0, 0, 0, 0, 0, 0, t1167, t1168, 0, t1131, 0, 0, 0, 0, 0, 0, t1123, t1129, t1113, t1100, 0, 0, 0, 0, 0, 0, t1123, t1129, t1113, t1094; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1199, t1194, t1234, t1151, 0, 0, 0, 0, 0, 0, t1139, t1148, t1128, t1111, 0, 0, 0, 0, 0, 0, t1139, t1148, t1128, t1103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1193, t1198, -t1235, t1150, 0, 0, 0, 0, 0, 0, t1138, t1147, t1127, t1110, 0, 0, 0, 0, 0, 0, t1138, t1147, t1127, t1102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1186, t1184, -t1192, t1158, 0, 0, 0, 0, 0, 0, t1143, t1145, t1152, t1142, 0, 0, 0, 0, 0, 0, t1143, t1145, t1152, t1120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1160, t1162, t1144, t1122, 0, 0, 0, 0, 0, 0, t1160, t1162, t1144, t1115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1161, t1171, t1146, t1121, 0, 0, 0, 0, 0, 0, t1161, t1171, t1146, t1112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1143, t1145, t1152, t1142, 0, 0, 0, 0, 0, 0, t1143, t1145, t1152, t1120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1160, t1162, t1144, t1115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1161, t1171, t1146, t1112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1143, t1145, t1152, t1120;];
f_new_reg = t1;
