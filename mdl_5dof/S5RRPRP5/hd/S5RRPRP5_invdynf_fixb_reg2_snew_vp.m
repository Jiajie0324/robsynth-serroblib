% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPRP5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:55
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPRP5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRP5_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRP5_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRP5_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRP5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPRP5_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:55:50
% EndTime: 2019-12-31 19:55:54
% DurationCPUTime: 4.10s
% Computational Cost: add. (13726->227), mult. (32444->274), div. (0->0), fcn. (22698->8), ass. (0->159)
t1748 = qJDD(2) + qJDD(4);
t1726 = sin(pkin(8));
t1727 = cos(pkin(8));
t1732 = cos(qJ(2));
t1763 = qJD(1) * t1732;
t1729 = sin(qJ(2));
t1764 = qJD(1) * t1729;
t1693 = t1726 * t1764 - t1727 * t1763;
t1695 = (t1726 * t1732 + t1727 * t1729) * qJD(1);
t1728 = sin(qJ(4));
t1731 = cos(qJ(4));
t1672 = t1731 * t1693 + t1728 * t1695;
t1674 = -t1728 * t1693 + t1731 * t1695;
t1760 = t1674 * t1672;
t1642 = t1748 + t1760;
t1671 = t1674 ^ 2;
t1723 = qJD(2) + qJD(4);
t1767 = t1723 ^ 2;
t1773 = -t1671 - t1767;
t1612 = t1728 * t1642 - t1731 * t1773;
t1614 = t1731 * t1642 + t1728 * t1773;
t1592 = t1727 * t1612 + t1726 * t1614;
t1602 = t1726 * t1612 - t1727 * t1614;
t1584 = t1729 * t1592 + t1732 * t1602;
t1730 = sin(qJ(1));
t1733 = cos(qJ(1));
t1746 = qJD(2) * t1763;
t1749 = t1729 * qJDD(1);
t1701 = t1746 + t1749;
t1720 = t1732 * qJDD(1);
t1747 = qJD(2) * t1764;
t1702 = t1720 - t1747;
t1680 = -t1726 * t1701 + t1727 * t1702;
t1681 = t1727 * t1701 + t1726 * t1702;
t1743 = t1728 * t1680 + t1731 * t1681;
t1738 = -t1672 * qJD(4) + t1743;
t1758 = t1723 * t1672;
t1737 = t1738 - t1758;
t1796 = t1730 * t1584 - t1733 * t1737;
t1795 = t1733 * t1584 + t1730 * t1737;
t1745 = -t1731 * t1680 + t1728 * t1681;
t1751 = qJD(4) + t1723;
t1620 = t1751 * t1674 + t1745;
t1643 = t1748 - t1760;
t1646 = t1672 ^ 2;
t1771 = -t1767 - t1646;
t1778 = -t1728 * t1643 + t1731 * t1771;
t1779 = t1731 * t1643 + t1728 * t1771;
t1782 = t1726 * t1778 + t1727 * t1779;
t1783 = -t1726 * t1779 + t1727 * t1778;
t1787 = -t1729 * t1782 + t1732 * t1783;
t1794 = t1730 * t1620 + t1733 * t1787;
t1793 = -t1733 * t1620 + t1730 * t1787;
t1573 = t1732 * t1592 - t1729 * t1602;
t1636 = t1671 + t1646;
t1625 = t1738 + t1758;
t1739 = (-qJD(4) + t1723) * t1674 - t1745;
t1769 = t1728 * t1625 + t1731 * t1739;
t1770 = -t1731 * t1625 + t1728 * t1739;
t1776 = t1726 * t1769 + t1727 * t1770;
t1777 = -t1726 * t1770 + t1727 * t1769;
t1780 = -t1729 * t1776 + t1732 * t1777;
t1790 = t1733 * t1636 + t1730 * t1780;
t1789 = -t1730 * t1636 + t1733 * t1780;
t1788 = t1729 * t1783 + t1732 * t1782;
t1781 = t1729 * t1777 + t1732 * t1776;
t1692 = t1693 ^ 2;
t1768 = t1695 ^ 2;
t1766 = -2 * qJD(3);
t1765 = 2 * qJD(5);
t1762 = qJD(2) * t1693;
t1761 = qJD(2) * t1695;
t1759 = t1695 * t1693;
t1725 = t1732 ^ 2;
t1735 = qJD(1) ^ 2;
t1756 = t1725 * t1735;
t1711 = -t1733 * g(1) - t1730 * g(2);
t1698 = -t1735 * pkin(1) + qJDD(1) * pkin(6) + t1711;
t1753 = t1729 * t1698;
t1752 = t1729 * t1735;
t1653 = qJDD(2) * pkin(2) - t1701 * qJ(3) - t1753 + (qJD(2) * qJ(3) * qJD(1) + pkin(2) * t1752 - g(3)) * t1732;
t1687 = -t1729 * g(3) + t1732 * t1698;
t1741 = qJD(2) * pkin(2) - qJ(3) * t1764;
t1654 = -pkin(2) * t1756 + t1702 * qJ(3) - qJD(2) * t1741 + t1687;
t1632 = t1726 * t1653 + t1727 * t1654 + t1693 * t1766;
t1744 = qJD(2) * pkin(3) - t1695 * pkin(7);
t1611 = -t1692 * pkin(3) + t1680 * pkin(7) - qJD(2) * t1744 + t1632;
t1631 = t1727 * t1653 - t1726 * t1654 + t1695 * t1766;
t1662 = -t1681 - t1762;
t1677 = qJDD(2) - t1759;
t1736 = t1677 * pkin(3) + t1662 * pkin(7) + t1631;
t1591 = t1731 * t1611 + t1728 * t1736;
t1724 = t1729 ^ 2;
t1750 = t1724 + t1725;
t1710 = t1730 * g(1) - t1733 * g(2);
t1590 = -t1728 * t1611 + t1731 * t1736;
t1742 = qJDD(1) * pkin(1) + t1710;
t1657 = t1702 * pkin(2) - qJDD(3) - t1741 * t1764 + (t1725 * qJ(3) + pkin(6)) * t1735 + t1742;
t1630 = t1680 * pkin(3) + t1692 * pkin(7) - t1695 * t1744 + t1657;
t1734 = qJD(2) ^ 2;
t1716 = t1732 * t1752;
t1715 = -t1734 - t1756;
t1714 = -t1724 * t1735 - t1734;
t1709 = -qJDD(2) + t1716;
t1708 = qJDD(2) + t1716;
t1707 = t1750 * t1735;
t1706 = -t1730 * qJDD(1) - t1733 * t1735;
t1705 = t1733 * qJDD(1) - t1730 * t1735;
t1704 = t1750 * qJDD(1);
t1703 = t1720 - 0.2e1 * t1747;
t1700 = 0.2e1 * t1746 + t1749;
t1697 = t1735 * pkin(6) + t1742;
t1688 = -t1734 - t1768;
t1686 = -t1732 * g(3) - t1753;
t1685 = t1732 * t1709 - t1729 * t1714;
t1684 = -t1729 * t1708 + t1732 * t1715;
t1683 = t1729 * t1709 + t1732 * t1714;
t1682 = t1732 * t1708 + t1729 * t1715;
t1678 = -qJDD(2) - t1759;
t1676 = -t1734 - t1692;
t1661 = t1681 - t1762;
t1660 = t1680 + t1761;
t1659 = -t1680 + t1761;
t1658 = -t1692 - t1768;
t1656 = -t1729 * t1686 + t1732 * t1687;
t1655 = t1732 * t1686 + t1729 * t1687;
t1650 = t1727 * t1678 - t1726 * t1688;
t1649 = t1726 * t1678 + t1727 * t1688;
t1648 = t1727 * t1676 - t1726 * t1677;
t1647 = t1726 * t1676 + t1727 * t1677;
t1645 = t1672 * pkin(4) - t1674 * qJ(5);
t1638 = t1727 * t1660 - t1726 * t1662;
t1637 = t1726 * t1660 + t1727 * t1662;
t1634 = -t1729 * t1649 + t1732 * t1650;
t1633 = t1732 * t1649 + t1729 * t1650;
t1617 = -t1729 * t1647 + t1732 * t1648;
t1616 = t1732 * t1647 + t1729 * t1648;
t1609 = -t1729 * t1637 + t1732 * t1638;
t1608 = t1732 * t1637 + t1729 * t1638;
t1605 = -t1726 * t1631 + t1727 * t1632;
t1604 = t1727 * t1631 + t1726 * t1632;
t1589 = t1630 + (-t1751 * t1672 + t1743) * qJ(5) + t1674 * t1765 - t1620 * pkin(4);
t1588 = -t1729 * t1604 + t1732 * t1605;
t1587 = t1732 * t1604 + t1729 * t1605;
t1586 = -t1748 * pkin(4) - qJ(5) * t1767 + t1674 * t1645 + qJDD(5) - t1590;
t1581 = -pkin(4) * t1767 + t1748 * qJ(5) - t1672 * t1645 + t1723 * t1765 + t1591;
t1572 = -t1728 * t1590 + t1731 * t1591;
t1571 = t1731 * t1590 + t1728 * t1591;
t1570 = t1731 * t1581 + t1728 * t1586;
t1569 = t1728 * t1581 - t1731 * t1586;
t1564 = -t1726 * t1571 + t1727 * t1572;
t1563 = t1727 * t1571 + t1726 * t1572;
t1562 = -t1726 * t1569 + t1727 * t1570;
t1561 = t1727 * t1569 + t1726 * t1570;
t1560 = -t1729 * t1563 + t1732 * t1564;
t1559 = t1732 * t1563 + t1729 * t1564;
t1558 = -t1729 * t1561 + t1732 * t1562;
t1557 = t1732 * t1561 + t1729 * t1562;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1706, -t1705, 0, -t1730 * t1710 + t1733 * t1711, 0, 0, 0, 0, 0, 0, t1733 * t1684 - t1730 * t1703, t1733 * t1685 + t1730 * t1700, t1733 * t1704 - t1730 * t1707, t1733 * t1656 - t1730 * t1697, 0, 0, 0, 0, 0, 0, t1733 * t1617 + t1730 * t1659, t1733 * t1634 + t1730 * t1661, t1733 * t1609 + t1730 * t1658, t1733 * t1588 - t1730 * t1657, 0, 0, 0, 0, 0, 0, t1794, t1795, t1789, t1733 * t1560 - t1730 * t1630, 0, 0, 0, 0, 0, 0, t1794, t1789, -t1795, t1733 * t1558 - t1730 * t1589; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1705, t1706, 0, t1733 * t1710 + t1730 * t1711, 0, 0, 0, 0, 0, 0, t1730 * t1684 + t1733 * t1703, t1730 * t1685 - t1733 * t1700, t1730 * t1704 + t1733 * t1707, t1730 * t1656 + t1733 * t1697, 0, 0, 0, 0, 0, 0, t1730 * t1617 - t1733 * t1659, t1730 * t1634 - t1733 * t1661, t1730 * t1609 - t1733 * t1658, t1730 * t1588 + t1733 * t1657, 0, 0, 0, 0, 0, 0, t1793, t1796, t1790, t1730 * t1560 + t1733 * t1630, 0, 0, 0, 0, 0, 0, t1793, t1790, -t1796, t1730 * t1558 + t1733 * t1589; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1682, t1683, 0, t1655, 0, 0, 0, 0, 0, 0, t1616, t1633, t1608, t1587, 0, 0, 0, 0, 0, 0, t1788, -t1573, t1781, t1559, 0, 0, 0, 0, 0, 0, t1788, t1781, t1573, t1557; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1735, -qJDD(1), 0, t1711, 0, 0, 0, 0, 0, 0, t1684, t1685, t1704, t1656, 0, 0, 0, 0, 0, 0, t1617, t1634, t1609, t1588, 0, 0, 0, 0, 0, 0, t1787, t1584, t1780, t1560, 0, 0, 0, 0, 0, 0, t1787, t1780, -t1584, t1558; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1735, 0, t1710, 0, 0, 0, 0, 0, 0, t1703, -t1700, t1707, t1697, 0, 0, 0, 0, 0, 0, -t1659, -t1661, -t1658, t1657, 0, 0, 0, 0, 0, 0, -t1620, -t1737, t1636, t1630, 0, 0, 0, 0, 0, 0, -t1620, t1636, t1737, t1589; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1682, t1683, 0, t1655, 0, 0, 0, 0, 0, 0, t1616, t1633, t1608, t1587, 0, 0, 0, 0, 0, 0, t1788, -t1573, t1781, t1559, 0, 0, 0, 0, 0, 0, t1788, t1781, t1573, t1557; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1715, t1709, t1720, t1687, 0, 0, 0, 0, 0, 0, t1648, t1650, t1638, t1605, 0, 0, 0, 0, 0, 0, t1783, t1602, t1777, t1564, 0, 0, 0, 0, 0, 0, t1783, t1777, -t1602, t1562; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1708, t1714, -t1749, t1686, 0, 0, 0, 0, 0, 0, t1647, t1649, t1637, t1604, 0, 0, 0, 0, 0, 0, t1782, -t1592, t1776, t1563, 0, 0, 0, 0, 0, 0, t1782, t1776, t1592, t1561; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1703, t1700, -t1707, -t1697, 0, 0, 0, 0, 0, 0, t1659, t1661, t1658, -t1657, 0, 0, 0, 0, 0, 0, t1620, t1737, -t1636, -t1630, 0, 0, 0, 0, 0, 0, t1620, -t1636, -t1737, -t1589; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1676, t1678, t1660, t1632, 0, 0, 0, 0, 0, 0, t1778, -t1614, t1769, t1572, 0, 0, 0, 0, 0, 0, t1778, t1769, t1614, t1570; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1677, t1688, t1662, t1631, 0, 0, 0, 0, 0, 0, t1779, -t1612, t1770, t1571, 0, 0, 0, 0, 0, 0, t1779, t1770, t1612, t1569; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1659, t1661, t1658, -t1657, 0, 0, 0, 0, 0, 0, t1620, t1737, -t1636, -t1630, 0, 0, 0, 0, 0, 0, t1620, -t1636, -t1737, -t1589; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1771, -t1642, t1739, t1591, 0, 0, 0, 0, 0, 0, t1771, t1739, t1642, t1581; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1643, t1773, -t1625, t1590, 0, 0, 0, 0, 0, 0, t1643, -t1625, -t1773, -t1586; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1620, t1737, -t1636, -t1630, 0, 0, 0, 0, 0, 0, t1620, -t1636, -t1737, -t1589; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1771, t1739, t1642, t1581; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1620, -t1636, -t1737, -t1589; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1643, t1625, t1773, t1586;];
f_new_reg = t1;
