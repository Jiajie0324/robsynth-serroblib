% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:55
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPRP5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRP5_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRP5_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRP5_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRP5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPRP5_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:55:09
% EndTime: 2019-12-31 19:55:27
% DurationCPUTime: 18.37s
% Computational Cost: add. (46672->563), mult. (110445->790), div. (0->0), fcn. (77742->8), ass. (0->414)
t742 = sin(pkin(8));
t743 = cos(pkin(8));
t748 = cos(qJ(2));
t745 = sin(qJ(2));
t793 = qJD(1) * t745;
t699 = qJD(1) * t743 * t748 - t742 * t793;
t700 = (t742 * t748 + t743 * t745) * qJD(1);
t744 = sin(qJ(4));
t747 = cos(qJ(4));
t662 = t699 * t744 + t700 * t747;
t659 = t662 ^ 2;
t739 = qJD(2) + qJD(4);
t833 = t739 ^ 2;
t594 = t833 + t659;
t660 = -t747 * t699 + t700 * t744;
t604 = t662 * t660;
t738 = qJDD(2) + qJDD(4);
t843 = t604 + t738;
t816 = t843 * t744;
t529 = t594 * t747 + t816;
t815 = t843 * t747;
t555 = t594 * t744 - t815;
t472 = t529 * t743 - t555 * t742;
t496 = t529 * t742 + t555 * t743;
t450 = t472 * t745 + t496 * t748;
t746 = sin(qJ(1));
t749 = cos(qJ(1));
t786 = qJD(1) * qJD(2);
t775 = t748 * t786;
t785 = qJDD(1) * t745;
t709 = t775 + t785;
t733 = t748 * qJDD(1);
t776 = t745 * t786;
t710 = t733 - t776;
t672 = t709 * t743 + t710 * t742;
t771 = t709 * t742 - t743 * t710;
t754 = qJD(4) * t660 - t672 * t747 + t744 * t771;
t802 = t739 * t660;
t851 = -t754 - t802;
t419 = t450 * t746 - t749 * t851;
t932 = pkin(5) * t419;
t421 = t450 * t749 + t746 * t851;
t931 = pkin(5) * t421;
t423 = t472 * t748 - t496 * t745;
t930 = pkin(6) * t423;
t929 = -pkin(1) * t423 - pkin(2) * t472 - pkin(3) * t529;
t928 = pkin(1) * t851 - pkin(6) * t450;
t772 = t744 * t672 + t747 * t771;
t544 = (qJD(4) + t739) * t662 + t772;
t488 = -t544 * t744 + t747 * t851;
t820 = t851 * t744;
t490 = t544 * t747 + t820;
t437 = -t488 * t743 + t490 * t742;
t441 = t488 * t742 + t490 * t743;
t397 = t437 * t745 - t441 * t748;
t834 = t660 ^ 2;
t601 = t659 - t834;
t927 = t397 * t746 - t601 * t749;
t926 = t397 * t749 + t601 * t746;
t642 = t834 - t833;
t562 = t642 * t744 + t815;
t566 = t642 * t747 - t816;
t503 = t562 * t743 + t566 * t742;
t508 = t562 * t742 - t566 * t743;
t458 = t503 * t745 + t508 * t748;
t545 = (qJD(4) - t739) * t662 + t772;
t925 = t458 * t746 - t545 * t749;
t924 = t458 * t749 + t545 * t746;
t577 = -t834 - t659;
t841 = -t802 + t754;
t867 = -t545 * t747 - t841 * t744;
t868 = -t545 * t744 + t747 * t841;
t886 = t742 * t867 + t743 * t868;
t887 = -t742 * t868 + t743 * t867;
t896 = -t745 * t886 + t748 * t887;
t911 = t577 * t746 + t749 * t896;
t923 = pkin(5) * t911;
t913 = -t577 * t749 + t746 * t896;
t922 = pkin(5) * t913;
t921 = qJ(3) * t472;
t919 = pkin(2) * t851 - qJ(3) * t496;
t918 = t437 * t748 + t441 * t745;
t917 = t503 * t748 - t508 * t745;
t897 = t745 * t887 + t748 * t886;
t916 = pkin(6) * t897;
t377 = -pkin(1) * t897 - pkin(2) * t886 - pkin(3) * t868;
t915 = -pkin(1) * t577 + pkin(6) * t896;
t643 = -t659 + t833;
t844 = -t604 + t738;
t814 = t844 * t744;
t869 = t747 * t643 + t814;
t592 = t747 * t844;
t870 = -t643 * t744 + t592;
t884 = -t742 * t869 + t743 * t870;
t885 = t742 * t870 + t743 * t869;
t899 = -t745 * t885 + t748 * t884;
t914 = t746 * t899 + t749 * t841;
t912 = -t746 * t841 + t749 * t899;
t840 = -t833 - t834;
t849 = t747 * t840 - t814;
t850 = t744 * t840 + t592;
t861 = t742 * t849 + t743 * t850;
t862 = -t742 * t850 + t743 * t849;
t882 = -t745 * t861 + t748 * t862;
t909 = pkin(6) * t882;
t883 = t745 * t862 + t748 * t861;
t908 = pkin(6) * t883;
t907 = pkin(7) * t529;
t906 = pkin(7) * t555;
t905 = qJ(3) * t886;
t904 = t746 * t882;
t903 = t749 * t882;
t902 = -pkin(1) * t883 - pkin(2) * t861 - pkin(3) * t850;
t900 = -pkin(2) * t577 + qJ(3) * t887;
t898 = t745 * t884 + t748 * t885;
t894 = pkin(7) * t868;
t893 = qJ(3) * t861;
t892 = qJ(3) * t862;
t888 = -pkin(3) * t577 + pkin(7) * t867;
t877 = pkin(7) * t849;
t876 = pkin(7) * t850;
t871 = t851 * qJ(5);
t755 = (-t660 * t744 - t662 * t747) * t739;
t800 = t739 * t744;
t639 = t662 * t800;
t799 = t739 * t747;
t779 = t660 * t799;
t762 = t639 - t779;
t837 = -t742 * t755 + t743 * t762;
t838 = t742 * t762 + t743 * t755;
t846 = -t745 * t838 + t748 * t837;
t866 = -t749 * t738 + t746 * t846;
t780 = t749 * t604;
t581 = -qJD(4) * t662 - t772;
t757 = -t581 * t744 + t779;
t763 = t747 * t581 + t660 * t800;
t835 = t742 * t757 + t743 * t763;
t836 = -t742 * t763 + t743 * t757;
t847 = -t745 * t835 + t748 * t836;
t865 = t746 * t847 + t780;
t781 = t746 * t604;
t864 = t749 * t847 - t781;
t863 = t738 * t746 + t749 * t846;
t860 = 2 * qJD(5);
t670 = t699 * t700;
t839 = qJDD(2) + t670;
t857 = t742 * t839;
t856 = t743 * t839;
t848 = t745 * t836 + t748 * t835;
t845 = t745 * t837 + t748 * t838;
t751 = qJD(1) ^ 2;
t796 = t745 * t751;
t720 = g(1) * t749 + g(2) * t746;
t703 = -pkin(1) * t751 + qJDD(1) * pkin(6) - t720;
t797 = t745 * t703;
t622 = qJDD(2) * pkin(2) - t709 * qJ(3) - t797 + (pkin(2) * t796 + qJ(3) * t786 - g(3)) * t748;
t686 = -t745 * g(3) + t748 * t703;
t741 = t748 ^ 2;
t735 = t741 * t751;
t758 = qJD(2) * pkin(2) - qJ(3) * t793;
t623 = -pkin(2) * t735 + t710 * qJ(3) - qJD(2) * t758 + t686;
t832 = 2 * qJD(3);
t558 = -t743 * t622 + t742 * t623 + t700 * t832;
t792 = qJD(2) * t699;
t633 = -t672 + t792;
t513 = pkin(3) * t839 + pkin(7) * t633 - t558;
t559 = t742 * t622 + t743 * t623 + t699 * t832;
t697 = t699 ^ 2;
t761 = qJD(2) * pkin(3) - pkin(7) * t700;
t521 = -t697 * pkin(3) - pkin(7) * t771 - qJD(2) * t761 + t559;
t464 = t744 * t513 + t747 * t521;
t600 = pkin(4) * t660 - qJ(5) * t662;
t760 = t738 * qJ(5) - t660 * t600 + t739 * t860 + t464;
t698 = t700 ^ 2;
t831 = pkin(4) * t747;
t830 = t581 * pkin(4);
t829 = qJ(5) * t747;
t463 = -t747 * t513 + t744 * t521;
t412 = -t463 * t747 + t464 * t744;
t828 = t412 * t742;
t827 = t412 * t743;
t499 = -t558 * t743 + t559 * t742;
t826 = t499 * t745;
t825 = t499 * t748;
t719 = t746 * g(1) - t749 * g(2);
t759 = qJDD(1) * pkin(1) + t719;
t627 = t710 * pkin(2) - qJDD(3) - t758 * t793 + (qJ(3) * t741 + pkin(6)) * t751 + t759;
t557 = -pkin(3) * t771 + t697 * pkin(7) - t700 * t761 + t627;
t818 = t557 * t744;
t817 = t557 * t747;
t813 = t627 * t742;
t812 = t627 * t743;
t666 = qJDD(2) - t670;
t810 = t666 * t742;
t809 = t666 * t743;
t702 = t751 * pkin(6) + t759;
t808 = t702 * t745;
t807 = t702 * t748;
t727 = t748 * t796;
t717 = qJDD(2) + t727;
t806 = t717 * t745;
t718 = qJDD(2) - t727;
t805 = t718 * t745;
t804 = t718 * t748;
t801 = t739 * t662;
t740 = t745 ^ 2;
t798 = t740 * t751;
t795 = -t577 - t833;
t794 = t740 + t741;
t791 = qJD(2) * t700;
t790 = qJD(2) * t742;
t789 = qJD(2) * t743;
t784 = qJDD(1) * t746;
t783 = qJDD(1) * t749;
t782 = qJDD(2) * t749;
t778 = t746 * t670;
t777 = t749 * t670;
t774 = -qJ(5) * t744 - pkin(3);
t413 = t463 * t744 + t747 * t464;
t500 = t558 * t742 + t743 * t559;
t685 = t748 * g(3) + t797;
t626 = t685 * t745 + t748 * t686;
t678 = -t719 * t746 - t749 * t720;
t770 = t746 * t727;
t769 = t749 * t727;
t767 = t662 * t600 + qJDD(5) + t463;
t714 = -t746 * t751 + t783;
t766 = -pkin(5) * t714 - g(3) * t746;
t540 = t662 * t799 - t744 * t754;
t541 = -t747 * t754 - t639;
t481 = t540 * t743 + t541 * t742;
t484 = -t540 * t742 + t541 * t743;
t434 = -t481 * t745 + t484 * t748;
t765 = t746 * t434 - t780;
t764 = t749 * t434 + t781;
t625 = t685 * t748 - t686 * t745;
t677 = t719 * t749 - t720 * t746;
t631 = -t771 + t791;
t756 = -t738 * pkin(4) + t767;
t753 = -pkin(4) * t801 + t662 * t860 + t557;
t752 = t753 + t871;
t750 = qJD(2) ^ 2;
t732 = t746 * qJDD(2);
t726 = -t735 - t750;
t725 = t735 - t750;
t724 = -t750 - t798;
t723 = t750 - t798;
t716 = t735 - t798;
t715 = t735 + t798;
t713 = t749 * t751 + t784;
t712 = t794 * qJDD(1);
t711 = t733 - 0.2e1 * t776;
t708 = 0.2e1 * t775 + t785;
t706 = t748 * t717;
t705 = t794 * t786;
t696 = -pkin(5) * t713 + g(3) * t749;
t691 = -t698 - t750;
t690 = -t698 + t750;
t689 = t697 - t750;
t688 = t709 * t748 - t740 * t786;
t687 = -t710 * t745 - t741 * t786;
t684 = -t724 * t745 - t804;
t683 = -t723 * t745 + t706;
t682 = t726 * t748 - t806;
t681 = t725 * t748 - t805;
t680 = t724 * t748 - t805;
t679 = t726 * t745 + t706;
t675 = t712 * t749 - t715 * t746;
t674 = t712 * t746 + t715 * t749;
t673 = -t708 * t745 + t711 * t748;
t669 = -t698 + t697;
t664 = -t750 - t697;
t655 = (t699 * t743 + t700 * t742) * qJD(2);
t654 = (t699 * t742 - t700 * t743) * qJD(2);
t653 = t684 * t749 + t708 * t746;
t652 = t682 * t749 - t711 * t746;
t651 = t684 * t746 - t708 * t749;
t650 = t682 * t746 + t711 * t749;
t641 = -pkin(6) * t680 - t807;
t640 = -pkin(6) * t679 - t808;
t635 = -pkin(1) * t680 + t686;
t634 = -pkin(1) * t679 + t685;
t632 = t672 + t792;
t629 = t771 + t791;
t628 = -t697 - t698;
t621 = t672 * t743 - t700 * t790;
t620 = t672 * t742 + t700 * t789;
t619 = -t699 * t789 + t742 * t771;
t618 = -t699 * t790 - t743 * t771;
t614 = -t691 * t742 - t809;
t613 = -t690 * t742 + t856;
t612 = t689 * t743 - t810;
t611 = t691 * t743 - t810;
t610 = t690 * t743 + t857;
t609 = t689 * t742 + t809;
t608 = t626 * t749 - t702 * t746;
t607 = t626 * t746 + t702 * t749;
t606 = t664 * t743 - t857;
t605 = t664 * t742 + t856;
t591 = -t654 * t745 + t655 * t748;
t586 = t631 * t743 - t633 * t742;
t585 = -t629 * t743 - t632 * t742;
t584 = t631 * t742 + t633 * t743;
t583 = -t629 * t742 + t632 * t743;
t579 = -qJ(3) * t611 - t812;
t576 = -t620 * t745 + t621 * t748;
t575 = -t618 * t745 + t619 * t748;
t572 = -t611 * t745 + t614 * t748;
t571 = -t610 * t745 + t613 * t748;
t570 = -t609 * t745 + t612 * t748;
t569 = t611 * t748 + t614 * t745;
t568 = -qJ(3) * t605 - t813;
t543 = -t581 + t801;
t535 = -t605 * t745 + t606 * t748;
t534 = t605 * t748 + t606 * t745;
t533 = -pkin(2) * t632 + qJ(3) * t614 - t813;
t528 = -pkin(2) * t629 + qJ(3) * t606 + t812;
t527 = t572 * t749 + t632 * t746;
t526 = t572 * t746 - t632 * t749;
t518 = t535 * t749 + t629 * t746;
t517 = -t584 * t745 + t586 * t748;
t516 = -t583 * t745 + t585 * t748;
t515 = t535 * t746 - t629 * t749;
t514 = t584 * t748 + t586 * t745;
t510 = t517 * t749 + t628 * t746;
t509 = t517 * t746 - t628 * t749;
t498 = -t817 + t907;
t485 = -t818 - t876;
t478 = -pkin(1) * t514 - pkin(2) * t584;
t477 = -pkin(1) * t569 - pkin(2) * t611 + t559;
t476 = pkin(2) * t627 + qJ(3) * t500;
t471 = -pkin(1) * t534 - pkin(2) * t605 + t558;
t470 = -qJ(3) * t584 - t499;
t467 = -pkin(6) * t569 - t533 * t745 + t579 * t748;
t466 = -pkin(3) * t851 - t818 + t906;
t465 = -pkin(2) * t628 + qJ(3) * t586 + t500;
t461 = -pkin(3) * t544 + t817 + t877;
t460 = -pkin(6) * t534 - t528 * t745 + t568 * t748;
t459 = t752 + t830;
t454 = t500 * t748 - t826;
t453 = t500 * t745 + t825;
t452 = qJ(5) * t833 - t756;
t447 = -pkin(4) * t833 + t760;
t446 = t454 * t749 - t627 * t746;
t445 = t454 * t746 + t627 * t749;
t436 = (-t543 + t581) * pkin(4) + t752;
t435 = t753 + t830 + 0.2e1 * t871;
t431 = t481 * t748 + t484 * t745;
t428 = t795 * qJ(5) + t756;
t427 = t795 * pkin(4) + t760;
t422 = t543 * t746 + t903;
t420 = -t543 * t749 + t904;
t418 = -pkin(1) * t453 - pkin(2) * t499;
t417 = t544 * t746 + t903;
t415 = -t544 * t749 + t904;
t411 = -t436 * t744 - t543 * t829 - t876;
t410 = -pkin(4) * t820 + t435 * t747 - t907;
t409 = -t466 * t742 + t498 * t743 + t921;
t408 = pkin(3) * t557 + pkin(7) * t413;
t407 = -pkin(6) * t514 - t465 * t745 + t470 * t748;
t406 = t747 * t436 + t774 * t543 + t877;
t405 = -t906 + t744 * t435 + (pkin(3) + t831) * t851;
t404 = -t461 * t742 + t485 * t743 - t893;
t403 = t447 * t747 - t452 * t744;
t402 = t447 * t744 + t452 * t747;
t401 = t466 * t743 + t498 * t742 - t919;
t400 = -pkin(6) * t453 - qJ(3) * t825 - t476 * t745;
t399 = -t412 - t894;
t392 = -pkin(2) * t544 + t461 * t743 + t485 * t742 + t892;
t391 = t413 + t888;
t386 = t464 - t929;
t385 = t463 + t902;
t384 = (-t840 - t833) * qJ(5) + (-t844 - t738) * pkin(4) + t767 + t902;
t383 = -t427 * t744 + t428 * t747 - t894;
t382 = t413 * t743 - t828;
t381 = t413 * t742 + t827;
t380 = t427 * t747 + t428 * t744 + t888;
t379 = -qJ(5) * t843 + (-t594 + t833) * pkin(4) - t760 + t929;
t378 = -pkin(7) * t402 + (-pkin(4) * t744 + t829) * t459;
t376 = -t402 * t742 + t403 * t743;
t375 = t402 * t743 + t403 * t742;
t374 = -t406 * t742 + t411 * t743 - t893;
t373 = -t405 * t742 + t410 * t743 - t921;
t372 = -pkin(2) * t543 + t406 * t743 + t411 * t742 + t892;
t371 = -pkin(4) * t841 + qJ(5) * t545 + t377;
t370 = pkin(7) * t403 + (-t774 + t831) * t459;
t369 = t405 * t743 + t410 * t742 + t919;
t368 = -t401 * t745 + t409 * t748 + t930;
t367 = -t391 * t742 + t399 * t743 - t905;
t366 = -t392 * t745 + t404 * t748 - t908;
t365 = t391 * t743 + t399 * t742 + t900;
t364 = -t381 * t745 + t382 * t748;
t363 = t381 * t748 + t382 * t745;
t362 = -pkin(7) * t827 - qJ(3) * t381 - t408 * t742;
t361 = t364 * t749 - t557 * t746;
t360 = t364 * t746 + t557 * t749;
t359 = pkin(2) * t557 - pkin(7) * t828 + qJ(3) * t382 + t408 * t743;
t358 = -t380 * t742 + t383 * t743 - t905;
t357 = t380 * t743 + t383 * t742 + t900;
t356 = -t375 * t745 + t376 * t748;
t355 = t375 * t748 + t376 * t745;
t354 = t356 * t749 - t459 * t746;
t353 = t356 * t746 + t459 * t749;
t352 = -t372 * t745 + t374 * t748 - t908;
t351 = -t369 * t745 + t373 * t748 - t930;
t350 = -pkin(1) * t363 - pkin(2) * t381 - pkin(3) * t412;
t349 = -qJ(3) * t375 - t370 * t742 + t378 * t743;
t348 = pkin(2) * t459 + qJ(3) * t376 + t370 * t743 + t378 * t742;
t347 = -t365 * t745 + t367 * t748 - t916;
t346 = -pkin(1) * t355 - pkin(2) * t375 - pkin(3) * t402 - pkin(4) * t452 - qJ(5) * t447;
t345 = -t357 * t745 + t358 * t748 - t916;
t344 = -pkin(6) * t363 - t359 * t745 + t362 * t748;
t343 = -pkin(6) * t355 - t348 * t745 + t349 * t748;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t713, -t714, 0, t678, 0, 0, 0, 0, 0, 0, t652, t653, t675, t608, 0, 0, 0, 0, 0, 0, t518, t527, t510, t446, 0, 0, 0, 0, 0, 0, t417, t421, t911, t361, 0, 0, 0, 0, 0, 0, t422, t911, -t421, t354; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t714, -t713, 0, t677, 0, 0, 0, 0, 0, 0, t650, t651, t674, t607, 0, 0, 0, 0, 0, 0, t515, t526, t509, t445, 0, 0, 0, 0, 0, 0, t415, t419, t913, t360, 0, 0, 0, 0, 0, 0, t420, t913, -t419, t353; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t679, t680, 0, -t625, 0, 0, 0, 0, 0, 0, t534, t569, t514, t453, 0, 0, 0, 0, 0, 0, t883, -t423, t897, t363, 0, 0, 0, 0, 0, 0, t883, t897, t423, t355; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t714, 0, -t713, 0, t766, -t696, -t677, -pkin(5) * t677, t688 * t749 - t770, t673 * t749 - t716 * t746, t683 * t749 + t745 * t784, t687 * t749 + t770, t681 * t749 + t733 * t746, t705 * t749 + t732, -pkin(5) * t650 - t634 * t746 + t640 * t749, -pkin(5) * t651 - t635 * t746 + t641 * t749, -pkin(5) * t674 + t625 * t749, -pkin(5) * t607 - (pkin(1) * t746 - pkin(6) * t749) * t625, t576 * t749 - t778, t516 * t749 - t669 * t746, t571 * t749 - t633 * t746, t575 * t749 + t778, t570 * t749 + t631 * t746, t591 * t749 + t732, -pkin(5) * t515 + t460 * t749 - t471 * t746, -pkin(5) * t526 + t467 * t749 - t477 * t746, -pkin(5) * t509 + t407 * t749 - t478 * t746, -pkin(5) * t445 + t400 * t749 - t418 * t746, t764, t926, t912, t864, -t924, t863, -pkin(5) * t415 + t366 * t749 - t385 * t746, t368 * t749 - t386 * t746 - t932, t347 * t749 - t377 * t746 - t922, -pkin(5) * t360 + t344 * t749 - t350 * t746, t764, t912, -t926, t863, t924, t864, -pkin(5) * t420 + t352 * t749 - t384 * t746, t345 * t749 - t371 * t746 - t922, t351 * t749 - t379 * t746 + t932, -pkin(5) * t353 + t343 * t749 - t346 * t746; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t713, 0, t714, 0, t696, t766, t678, pkin(5) * t678, t688 * t746 + t769, t673 * t746 + t716 * t749, t683 * t746 - t745 * t783, t687 * t746 - t769, t681 * t746 - t733 * t749, t705 * t746 - t782, pkin(5) * t652 + t634 * t749 + t640 * t746, pkin(5) * t653 + t635 * t749 + t641 * t746, pkin(5) * t675 + t625 * t746, pkin(5) * t608 - (-pkin(1) * t749 - pkin(6) * t746) * t625, t576 * t746 + t777, t516 * t746 + t669 * t749, t571 * t746 + t633 * t749, t575 * t746 - t777, t570 * t746 - t631 * t749, t591 * t746 - t782, pkin(5) * t518 + t460 * t746 + t471 * t749, pkin(5) * t527 + t467 * t746 + t477 * t749, pkin(5) * t510 + t407 * t746 + t478 * t749, pkin(5) * t446 + t400 * t746 + t418 * t749, t765, t927, t914, t865, -t925, t866, pkin(5) * t417 + t366 * t746 + t385 * t749, t368 * t746 + t386 * t749 + t931, t347 * t746 + t377 * t749 + t923, pkin(5) * t361 + t344 * t746 + t350 * t749, t765, t914, -t927, t866, t925, t865, pkin(5) * t422 + t352 * t746 + t384 * t749, t345 * t746 + t371 * t749 + t923, t351 * t746 + t379 * t749 - t931, pkin(5) * t354 + t343 * t746 + t346 * t749; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t719, t720, 0, 0, (t709 + t775) * t745, t708 * t748 + t711 * t745, t723 * t748 + t806, (t710 - t776) * t748, t725 * t745 + t804, 0, pkin(1) * t711 + pkin(6) * t682 + t807, -pkin(1) * t708 + pkin(6) * t684 - t808, pkin(1) * t715 + pkin(6) * t712 + t626, pkin(1) * t702 + pkin(6) * t626, t620 * t748 + t621 * t745, t583 * t748 + t585 * t745, t610 * t748 + t613 * t745, t618 * t748 + t619 * t745, t609 * t748 + t612 * t745, t654 * t748 + t655 * t745, -pkin(1) * t629 + pkin(6) * t535 + t528 * t748 + t568 * t745, -pkin(1) * t632 + pkin(6) * t572 + t533 * t748 + t579 * t745, -pkin(1) * t628 + pkin(6) * t517 + t465 * t748 + t470 * t745, pkin(1) * t627 + pkin(6) * t454 - qJ(3) * t826 + t476 * t748, t431, -t918, t898, t848, t917, t845, -pkin(1) * t544 + t392 * t748 + t404 * t745 + t909, t401 * t748 + t409 * t745 - t928, t365 * t748 + t367 * t745 + t915, pkin(1) * t557 + pkin(6) * t364 + t359 * t748 + t362 * t745, t431, t898, t918, t845, -t917, t848, -pkin(1) * t543 + t372 * t748 + t374 * t745 + t909, t357 * t748 + t358 * t745 + t915, t369 * t748 + t373 * t745 + t928, pkin(1) * t459 + pkin(6) * t356 + t348 * t748 + t349 * t745;];
tauB_reg = t1;
