% Calculate vector of inverse dynamics joint torques for
% S5RRPRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,theta3]';
% m_mdh [6x1]
%   mass of all robot links (including the base)
% rSges [6x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (starting with base)
%   columns: x-, y-, z-coordinates
% Icges [6x6]
%   inertia of all robot links about their respective center of mass, in body frames
%   rows: links of the robot (starting with base)
%   columns: xx, yy, zz, xy, xz, yz (see inertiavector2matrix.m)
% 
% Output:
% tau [5x1]
%   joint torques of inverse dynamics (contains inertial, gravitational coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:55
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S5RRPRP5_invdynJ_fixb_slag_vp1(qJ, qJD, qJDD, g, ...
  pkin, m, rSges, Icges)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1),zeros(6,1),zeros(6,3),zeros(6,6)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRP5_invdynJ_fixb_slag_vp1: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRP5_invdynJ_fixb_slag_vp1: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRP5_invdynJ_fixb_slag_vp1: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRP5_invdynJ_fixb_slag_vp1: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPRP5_invdynJ_fixb_slag_vp1: pkin has to be [8x1] (double)');
assert(isreal(m) && all(size(m) == [6 1]), ...
  'S5RRPRP5_invdynJ_fixb_slag_vp1: m has to be [6x1] (double)'); 
assert(isreal(rSges) && all(size(rSges) == [6,3]), ...
  'S5RRPRP5_invdynJ_fixb_slag_vp1: rSges has to be [6x3] (double)');
assert(isreal(Icges) && all(size(Icges) == [6 6]), ...
  'S5RRPRP5_invdynJ_fixb_slag_vp1: Icges has to be [6x6] (double)'); 

%% Symbolic Calculation
% From invdyn_fixb_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:54:01
% EndTime: 2019-12-31 19:54:55
% DurationCPUTime: 46.12s
% Computational Cost: add. (21014->928), mult. (22601->1126), div. (0->0), fcn. (17719->8), ass. (0->500)
t1020 = Icges(3,3) + Icges(4,3);
t510 = qJ(2) + pkin(8);
t476 = sin(t510);
t477 = cos(t510);
t514 = sin(qJ(2));
t516 = cos(qJ(2));
t992 = Icges(3,5) * t516 + Icges(4,5) * t477 - Icges(3,6) * t514 - Icges(4,6) * t476;
t480 = qJ(4) + t510;
t463 = sin(t480);
t464 = cos(t480);
t812 = Icges(6,5) * t464;
t350 = Icges(6,1) * t463 - t812;
t448 = Icges(5,4) * t464;
t352 = Icges(5,1) * t463 + t448;
t1015 = t350 + t352;
t817 = Icges(5,4) * t463;
t348 = Icges(5,2) * t464 + t817;
t447 = Icges(6,5) * t463;
t597 = Icges(6,3) * t464 - t447;
t1014 = t597 + t348;
t517 = cos(qJ(1));
t1019 = t1020 * t517;
t343 = Icges(6,3) * t463 + t812;
t515 = sin(qJ(1));
t246 = -Icges(6,6) * t517 + t343 * t515;
t774 = t464 * t515;
t776 = t463 * t515;
t805 = Icges(5,6) * t517;
t252 = Icges(5,4) * t774 - Icges(5,2) * t776 - t805;
t1018 = -t246 + t252;
t773 = t464 * t517;
t408 = Icges(6,5) * t773;
t775 = t463 * t517;
t804 = Icges(6,6) * t515;
t247 = Icges(6,3) * t775 + t408 + t804;
t598 = -Icges(5,2) * t463 + t448;
t253 = Icges(5,6) * t515 + t517 * t598;
t1017 = -t247 + t253;
t601 = Icges(6,1) * t464 + t447;
t254 = -Icges(6,4) * t517 + t515 * t601;
t409 = Icges(5,4) * t776;
t813 = Icges(5,5) * t517;
t256 = Icges(5,1) * t774 - t409 - t813;
t1016 = t254 + t256;
t255 = Icges(6,4) * t515 + t517 * t601;
t353 = Icges(5,1) * t464 - t817;
t257 = Icges(5,5) * t515 + t353 * t517;
t995 = t255 + t257;
t766 = t515 * t516;
t768 = t514 * t515;
t770 = t477 * t515;
t772 = t476 * t515;
t994 = -Icges(3,5) * t766 - Icges(4,5) * t770 + Icges(3,6) * t768 + Icges(4,6) * t772 + t1019;
t1001 = t1020 * t515 + t992 * t517;
t806 = Icges(4,6) * t517;
t275 = Icges(4,4) * t770 - Icges(4,2) * t772 - t806;
t807 = Icges(3,6) * t517;
t322 = Icges(3,4) * t766 - Icges(3,2) * t768 - t807;
t1013 = t275 * t476 + t322 * t514;
t433 = Icges(4,4) * t772;
t814 = Icges(4,5) * t517;
t277 = Icges(4,1) * t770 - t433 - t814;
t456 = Icges(3,4) * t768;
t815 = Icges(3,5) * t517;
t324 = Icges(3,1) * t766 - t456 - t815;
t965 = -t277 * t477 - t324 * t516 + t1013;
t927 = -t965 * t515 + t994 * t517;
t818 = Icges(4,4) * t476;
t378 = Icges(4,1) * t477 - t818;
t278 = Icges(4,5) * t515 + t378 * t517;
t819 = Icges(3,4) * t514;
t426 = Icges(3,1) * t516 - t819;
t325 = Icges(3,5) * t515 + t426 * t517;
t1011 = -t278 * t770 - t325 * t766;
t1010 = -t597 * t515 + t1016;
t1009 = (Icges(5,6) - Icges(6,6)) * t464 + (Icges(6,4) + Icges(5,5)) * t463;
t1008 = Icges(3,5) * t514 + Icges(4,5) * t476 + Icges(3,6) * t516 + Icges(4,6) * t477;
t1007 = t353 + t601 - t1014;
t1006 = t343 - t598 - t1015;
t1005 = t1014 * t517 - t995;
t1004 = -t352 * t517 - t1017;
t1003 = t1015 * t515 + t1018;
t345 = Icges(5,5) * t464 - Icges(5,6) * t463;
t249 = Icges(5,3) * t515 + t345 * t517;
t347 = Icges(6,4) * t464 + Icges(6,6) * t463;
t251 = Icges(6,2) * t515 + t347 * t517;
t1002 = -t249 - t251;
t375 = Icges(4,2) * t477 + t818;
t460 = Icges(4,4) * t477;
t377 = Icges(4,1) * t476 + t460;
t423 = Icges(3,2) * t516 + t819;
t495 = Icges(3,4) * t516;
t425 = Icges(3,1) * t514 + t495;
t990 = t375 * t476 - t377 * t477 + t423 * t514 - t425 * t516;
t1000 = -t1014 * t463 + t1015 * t464;
t999 = t1001 * t517 + t1011;
t765 = t516 * t517;
t769 = t477 * t517;
t873 = -t1001 * t515 - t278 * t769 - t325 * t765;
t998 = -t277 * t769 - t324 * t765 + t994 * t515;
t599 = -Icges(4,2) * t476 + t460;
t276 = Icges(4,6) * t515 + t517 * t599;
t600 = -Icges(3,2) * t514 + t495;
t323 = Icges(3,6) * t515 + t517 * t600;
t997 = t276 * t476 + t323 * t514;
t926 = -t276 * t772 - t323 * t768 - t999;
t767 = t514 * t517;
t771 = t476 * t517;
t925 = -t275 * t771 - t322 * t767 - t998;
t924 = -t276 * t771 - t323 * t767 - t873;
t917 = t275 * t477 + t277 * t476 + t322 * t516 + t324 * t514;
t916 = t276 * t477 + t278 * t476 + t323 * t516 + t325 * t514;
t993 = t345 + t347;
t991 = t1008 * qJD(2);
t989 = -t375 * t477 - t377 * t476 - t423 * t516 - t425 * t514;
t988 = t278 * t477 + t325 * t516 - t997;
t587 = t252 * t463 - t256 * t464;
t589 = t246 * t463 + t254 * t464;
t987 = -t587 + t589;
t509 = qJD(2) + qJD(4);
t986 = t1007 * t509;
t985 = t1006 * t509;
t984 = -t995 * qJD(1) + t1003 * t509;
t420 = t509 * t517;
t983 = -t350 * t420 + t1004 * t509 + (-t353 * t515 - t254 + t813) * qJD(1);
t419 = t509 * t515;
t982 = -t348 * t419 + t1010 * t509 + (-t343 * t517 + t253 - t804) * qJD(1);
t981 = -t1005 * t509 + (-t515 * t598 + t246 + t805) * qJD(1);
t893 = t1008 * t517;
t892 = t1008 * t515;
t980 = t1009 * t517;
t979 = t1009 * t515;
t973 = rSges(6,3) + qJ(5);
t923 = t1000 * t515 - t980;
t922 = t1000 * t517 + t979;
t919 = -t990 * t515 - t893;
t918 = -t990 * t517 + t892;
t880 = t464 * rSges(6,1) + t463 * rSges(6,3);
t978 = -t463 * qJ(5) - t880;
t977 = t1001 * qJD(1);
t976 = t1002 * qJD(1);
t975 = t517 ^ 2;
t842 = rSges(6,1) + pkin(4);
t759 = -t247 * t776 - t255 * t774;
t206 = t257 * t774;
t641 = t249 * t517 - t206;
t91 = -t253 * t776 - t641;
t931 = -t251 * t517 - t759 + t91;
t93 = t247 * t775 + t515 * t251 + t255 * t773;
t757 = t515 * t249 + t257 * t773;
t95 = -t253 * t775 + t757;
t929 = t93 + t95;
t974 = rSges(3,2) * t514;
t339 = t599 * qJD(2);
t340 = t378 * qJD(2);
t386 = t600 * qJD(2);
t387 = t426 * qJD(2);
t972 = t1008 * qJD(1) + t989 * qJD(2) - t339 * t476 + t340 * t477 - t386 * t514 + t387 * t516;
t563 = qJD(2) * t375;
t159 = -t517 * t563 + (-t515 * t599 + t806) * qJD(1);
t565 = qJD(2) * t377;
t161 = -t517 * t565 + (-t378 * t515 + t814) * qJD(1);
t564 = qJD(2) * t423;
t191 = -t517 * t564 + (-t515 * t600 + t807) * qJD(1);
t566 = qJD(2) * t425;
t193 = -t517 * t566 + (-t426 * t515 + t815) * qJD(1);
t971 = -t916 * qJD(2) - t159 * t476 + t161 * t477 - t191 * t514 + t193 * t516 + t977;
t160 = qJD(1) * t276 - t515 * t563;
t162 = qJD(1) * t278 - t515 * t565;
t192 = qJD(1) * t323 - t515 * t564;
t194 = qJD(1) * t325 - t515 * t566;
t970 = t994 * qJD(1) + t917 * qJD(2) + t160 * t476 - t162 * t477 + t192 * t514 - t194 * t516;
t969 = t1009 * qJD(1) + t985 * t463 + t986 * t464;
t968 = -t981 * t463 + t983 * t464 - t976;
t800 = Icges(5,3) * t517;
t248 = Icges(5,5) * t774 - Icges(5,6) * t776 - t800;
t250 = -Icges(6,2) * t517 + t347 * t515;
t871 = qJD(1) * t250;
t967 = -qJD(1) * t248 + t982 * t463 + t984 * t464 - t871;
t966 = t1003 * t420 + (-Icges(6,1) * t775 + t1004 + t408) * t419 + t1007 * qJD(1);
t964 = t924 * t515 - t925 * t517;
t963 = t926 * t515 - t927 * t517;
t962 = (-Icges(5,2) * t774 + t1010 - t409) * t420 + t1005 * t419 + t1006 * qJD(1);
t961 = t990 * qJD(1) + t992 * qJD(2);
t960 = t1000 * qJD(1) - t993 * t509;
t959 = t965 * qJD(1) - t991 * t515 + t977;
t958 = -t991 * t517 + (-t992 * t515 + t1019 - t988) * qJD(1);
t957 = t987 * qJD(1) + t979 * t509 + t976;
t791 = t253 * t463;
t956 = t871 + t980 * t509 + (t247 * t463 + t345 * t515 + t995 * t464 - t791 - t800) * qJD(1);
t955 = t464 * pkin(4) - t978;
t832 = rSges(4,2) * t477;
t381 = rSges(4,1) * t476 + t832;
t332 = t381 * t515;
t497 = t515 * rSges(4,3);
t461 = t477 * rSges(4,1);
t877 = -rSges(4,2) * t476 + t461;
t164 = -qJD(2) * t332 + (t517 * t877 + t497) * qJD(1);
t341 = t877 * qJD(2);
t689 = qJD(1) * qJD(2);
t467 = t515 * t689;
t395 = -qJDD(2) * t517 + t467;
t688 = qJD(1) * qJD(3);
t841 = pkin(2) * t514;
t672 = qJDD(3) * t515 + t395 * t841 + t517 * t688;
t288 = rSges(4,1) * t770 - rSges(4,2) * t772 - t517 * rSges(4,3);
t506 = t517 * pkin(6);
t436 = pkin(1) * t515 - t506;
t513 = -qJ(3) - pkin(6);
t469 = t517 * t513;
t505 = t516 * pkin(2);
t470 = t505 + pkin(1);
t712 = t515 * t470 + t469;
t270 = t436 - t712;
t740 = t270 - t436;
t674 = -t288 + t740;
t504 = t515 * pkin(6);
t700 = qJD(1) * t515;
t453 = t513 * t700;
t686 = pkin(2) * t768;
t443 = qJD(2) * t686;
t482 = qJD(3) * t517;
t710 = t443 + t482;
t669 = t453 + t710;
t835 = pkin(1) - t470;
t186 = (-t517 * t835 - t504) * qJD(1) - t669;
t437 = t517 * pkin(1) + t504;
t392 = t437 * qJD(1);
t761 = -t186 - t392;
t518 = qJD(2) ^ 2;
t764 = t516 * t518;
t50 = t381 * t395 + (-pkin(2) * t764 - qJD(2) * t341) * t517 + t674 * qJDD(1) + (-t164 + t761) * qJD(1) + t672;
t954 = t50 - g(1);
t224 = t515 * t250;
t92 = t246 * t775 + t254 * t773 + t224;
t953 = t922 * qJD(1) - t420 * t92;
t952 = t918 * qJD(1);
t717 = t973 * t774;
t405 = qJ(5) * t773;
t716 = rSges(6,3) * t773 + t405;
t951 = t919 * qJD(1);
t694 = qJD(5) * t517;
t400 = t463 * t694;
t682 = t464 * t420;
t699 = qJD(1) * t517;
t950 = rSges(6,2) * t699 + rSges(6,3) * t682 + t509 * t405 + t400;
t88 = -t250 * t517 + t515 * t589;
t949 = -t923 * qJD(1) + t420 * t88;
t948 = t957 * t515 + t967 * t517;
t947 = -t956 * t515 + t968 * t517;
t946 = t967 * t515 - t957 * t517;
t945 = t968 * t515 + t956 * t517;
t567 = t587 * t515;
t793 = t248 * t517;
t90 = -t567 - t793;
t944 = t931 * t419 - t420 * t90 - t949;
t758 = -t515 * t248 - t256 * t773;
t94 = -t252 * t775 - t758;
t943 = t929 * t419 - t420 * t94 + t953;
t942 = -t960 * t515 + t969 * t517;
t941 = t969 * t515 + t960 * t517;
t940 = t963 * qJD(2) + t951;
t939 = t964 * qJD(2) + t952;
t938 = t984 * t463 - t982 * t464;
t937 = t983 * t463 + t981 * t464;
t936 = t961 * t515 + t972 * t517;
t935 = t972 * t515 - t961 * t517;
t934 = t965 * qJD(2) - t160 * t477 - t162 * t476 - t192 * t516 - t194 * t514;
t933 = t988 * qJD(2) + t159 * t477 + t161 * t476 + t191 * t516 + t193 * t514;
t932 = t88 + t90;
t930 = t92 + t94;
t687 = qJD(1) * qJD(4);
t295 = t515 * t687 + t467 + (-qJDD(2) - qJDD(4)) * t517;
t462 = pkin(3) * t477;
t876 = -t505 - t462;
t570 = t876 * t518;
t696 = qJD(5) * t509;
t539 = qJDD(5) * t463 + t464 * t696 + t570;
t388 = pkin(1) - t876;
t508 = -pkin(7) + t513;
t726 = -t515 * t388 - t517 * t508;
t201 = t712 + t726;
t677 = t201 + t740;
t503 = t517 * rSges(6,2);
t744 = t955 * t515 - t503;
t605 = t677 - t744;
t840 = pkin(3) * t476;
t618 = t395 * t840 + t672;
t695 = qJD(5) * t515;
t660 = t463 * t695;
t396 = -t840 - t841;
t379 = t396 * qJD(2);
t442 = t508 * t700;
t628 = t379 * t515 - t442;
t720 = t388 - t470;
t120 = t699 * t720 + t443 + t453 + t628;
t681 = -t120 + t761;
t355 = rSges(6,1) * t463 - rSges(6,3) * t464;
t728 = pkin(4) * t463 - qJ(5) * t464 + t355;
t651 = pkin(4) * t509 - qJD(5);
t754 = -t464 * t651 + t978 * t509;
t499 = t515 * rSges(6,2);
t762 = (pkin(4) * t699 + qJ(5) * t419) * t464 + (qJ(5) * t699 - t515 * t651) * t463 - t355 * t419 + (t517 * t880 + t499) * qJD(1);
t12 = t754 * t420 + t728 * t295 + t539 * t517 + t605 * qJDD(1) + (-t660 + t681 - t762) * qJD(1) + t618;
t743 = t842 * t773 + t973 * t775 + t499;
t362 = t517 * t388;
t440 = t517 * t470;
t707 = -t508 + t513;
t202 = t515 * t707 + t362 - t440;
t627 = -t513 * t515 + t440;
t271 = t627 - t437;
t760 = -t202 - t271;
t620 = -t743 + t760;
t698 = qJD(2) * t515;
t670 = -t698 * t840 - t710;
t63 = t660 - t728 * t419 + (t437 - t620) * qJD(1) + t670;
t928 = (qJD(1) * t63 + t12) * t517;
t921 = t1016 * t463 + t1018 * t464;
t920 = t1017 * t464 + t995 * t463;
t683 = t463 * t420;
t558 = -t464 * t700 - t683;
t668 = t463 * t700;
t763 = t842 * t558 - t973 * t668 + t950;
t909 = -t842 * t776 + t717;
t908 = -t842 * t775 + t716;
t903 = t962 * t463 + t966 * t464;
t551 = t322 * t517 - t323 * t515;
t552 = t275 * t517 - t276 * t515;
t855 = t515 * (-t375 * t517 + t278) - t517 * (-Icges(4,2) * t770 + t277 - t433);
t856 = t515 * (-t423 * t517 + t325) - t517 * (-Icges(3,2) * t766 + t324 - t456);
t902 = -t476 * t855 + t552 * t477 - t514 * t856 + t551 * t516;
t713 = t425 + t600;
t714 = -t423 + t426;
t724 = t377 + t599;
t725 = -t375 + t378;
t901 = (-t476 * t724 + t477 * t725 - t514 * t713 + t516 * t714) * qJD(1);
t900 = t993 * qJD(1) - t980 * t419 + t979 * t420;
t899 = t959 * t975 + (t971 * t515 + (-t958 + t970) * t517) * t515;
t898 = t970 * t975 + (t958 * t515 + (-t959 + t971) * t517) * t515;
t897 = qJD(1) * t908 - t419 * t955 + t464 * t695;
t896 = t992 * qJD(1);
t667 = t476 * t700;
t895 = pkin(3) * t667;
t894 = t420 * t955 - t464 * t694 + t728 * t700;
t372 = t517 * t396;
t685 = pkin(2) * t767;
t297 = t372 + t685;
t891 = (t297 - t685) * qJD(1);
t394 = qJDD(2) * t515 + t517 * t689;
t294 = qJDD(4) * t515 + t517 * t687 + t394;
t475 = pkin(6) * t699;
t481 = qJD(3) * t515;
t697 = qJD(2) * t517;
t664 = t514 * t697;
t625 = pkin(2) * t664;
t185 = -t625 - t475 + t481 + (t515 * t835 - t469) * qJD(1);
t721 = qJD(1) * (-pkin(1) * t700 + t475) + qJDD(1) * t437;
t553 = qJD(1) * t185 + qJDD(1) * t271 - qJDD(3) * t517 + t515 * t688 + t721;
t337 = t517 * t379;
t119 = t625 + t337 + (-t515 * t720 + t517 * t707) * qJD(1);
t884 = qJD(1) * t119 + qJDD(1) * t202;
t11 = t754 * t419 + t396 * t394 - t728 * t294 + t743 * qJDD(1) + (t400 + t763) * qJD(1) + t539 * t515 + t553 + t884;
t890 = t11 * t515;
t887 = t463 * t842;
t559 = -t381 - t841;
t886 = t517 * t559;
t398 = qJD(1) * t436;
t883 = qJD(1) * t270 - t398;
t882 = t337 + t481;
t881 = t877 + t505;
t451 = t464 * rSges(5,1);
t879 = -rSges(5,2) * t463 + t451;
t875 = t994 + t997;
t838 = g(2) * t515;
t872 = -g(1) * t517 - t838;
t870 = qJD(1) * t201 + t883;
t445 = qJD(5) * t463;
t857 = -t419 * t909 - t420 * t908 - t445;
t852 = t294 / 0.2e1;
t851 = t295 / 0.2e1;
t850 = t394 / 0.2e1;
t849 = t395 / 0.2e1;
t848 = -t419 / 0.2e1;
t847 = t419 / 0.2e1;
t846 = -t420 / 0.2e1;
t845 = t420 / 0.2e1;
t844 = t515 / 0.2e1;
t843 = -t517 / 0.2e1;
t837 = -qJD(1) / 0.2e1;
t836 = qJD(1) / 0.2e1;
t834 = rSges(3,1) * t516;
t498 = t515 * rSges(3,3);
t496 = t515 * rSges(5,3);
t356 = rSges(5,1) * t463 + rSges(5,2) * t464;
t542 = -t420 * t356 + t882;
t262 = rSges(5,1) * t774 - rSges(5,2) * t776 - t517 * rSges(5,3);
t621 = -t262 + t677;
t77 = qJD(1) * t621 + t542;
t827 = t77 * t356;
t557 = qJD(2) * t886 + t481;
t98 = qJD(1) * t674 + t557;
t826 = t98 * t381;
t825 = qJDD(1) / 0.2e1;
t751 = -t270 * t698 + t271 * t697;
t623 = -t201 * t698 + t202 * t697 + t751;
t43 = -qJD(5) * t464 + t419 * t744 + t420 * t743 + t623;
t798 = qJD(1) * t43;
t427 = rSges(3,1) * t514 + rSges(3,2) * t516;
t665 = t427 * t697;
t709 = rSges(3,2) * t768 + t517 * rSges(3,3);
t334 = rSges(3,1) * t766 - t709;
t732 = -t334 - t436;
t171 = qJD(1) * t732 - t665;
t796 = t171 * t515;
t795 = t171 * t517;
t335 = rSges(3,1) * t765 - rSges(3,2) * t767 + t498;
t238 = t335 + t437;
t172 = qJD(1) * t238 - t427 * t698;
t370 = t427 * t517;
t794 = t172 * t370;
t264 = rSges(5,1) * t773 - rSges(5,2) * t775 + t496;
t753 = t515 * t262 + t517 * t264;
t750 = -t515 * t270 + t517 * t271;
t371 = t515 * t396;
t296 = t371 + t686;
t749 = t296 * t698 + t297 * t697;
t289 = rSges(4,1) * t769 - rSges(4,2) * t771 + t497;
t739 = -t271 - t289;
t719 = rSges(5,2) * t668 + rSges(5,3) * t699;
t718 = rSges(4,2) * t667 + rSges(4,3) * t699;
t711 = rSges(3,3) * t699 + t700 * t974;
t684 = qJD(2) * t505;
t153 = rSges(5,1) * t558 - rSges(5,2) * t682 + t719;
t312 = t356 * t515;
t155 = -t509 * t312 + (t517 * t879 + t496) * qJD(1);
t680 = t517 * t153 + t515 * t155 + t262 * t699;
t679 = t185 * t697 + t186 * t698 - t394 * t270;
t678 = t517 * t185 + t515 * t186 - t270 * t699;
t676 = -t264 + t760;
t663 = t516 * t697;
t659 = -pkin(1) - t834;
t658 = t700 / 0.2e1;
t657 = t699 / 0.2e1;
t656 = -t698 / 0.2e1;
t655 = t698 / 0.2e1;
t654 = -t697 / 0.2e1;
t653 = t697 / 0.2e1;
t650 = (-t515 ^ 2 - t975) * t514;
t316 = t356 * t517;
t640 = -t419 * t312 - t316 * t420;
t638 = -t248 + t791;
t631 = -qJD(1) * t316 - t419 * t879;
t629 = -t508 * t515 + t362;
t626 = qJD(1) * t312 - t420 * t879;
t622 = -t515 * t201 + t517 * t202 + t750;
t619 = t515 * t744 + t517 * t743;
t430 = rSges(2,1) * t517 - rSges(2,2) * t515;
t428 = rSges(2,1) * t515 + rSges(2,2) * t517;
t429 = t834 - t974;
t538 = -t420 * t728 + t400 + t882;
t62 = qJD(1) * t605 + t538;
t607 = t515 * t63 + t517 * t62;
t78 = -t356 * t419 + (t437 - t676) * qJD(1) + t670;
t606 = -t515 * t78 - t517 * t77;
t163 = -t697 * t832 + (-t476 * t697 - t477 * t700) * rSges(4,1) + t718;
t592 = t163 * t517 + t164 * t515;
t591 = -t172 * t515 - t795;
t197 = -rSges(3,2) * t663 + (-t516 * t700 - t664) * rSges(3,1) + t711;
t369 = t427 * t515;
t198 = -qJD(2) * t369 + (t429 * t517 + t498) * qJD(1);
t590 = t197 * t517 + t198 * t515;
t583 = t288 * t515 + t289 * t517;
t580 = t334 * t515 + t335 * t517;
t573 = -t356 + t396;
t572 = t517 * t119 + t515 * t120 - t201 * t699 + t678;
t571 = t515 * t762 + t517 * t763 + t699 * t744;
t568 = t396 - t728;
t560 = -qJD(2) * t462 - t684;
t291 = t879 * t509;
t556 = -t291 + t560;
t548 = t560 + t754;
t545 = t119 * t697 + t120 * t698 - t394 * t201 + t395 * t760 + t679;
t544 = t872 * t887;
t543 = -t388 - t955;
t525 = (-t394 * t514 - t515 * t764) * pkin(2) + t553;
t522 = (t929 * t515 - t930 * t517) * t852 + (t931 * t515 - t932 * t517) * t851 + (t515 * t900 + t517 * t903) * t848 + (t948 * t517 + t947 * t515 + (t930 * t515 + t929 * t517) * qJD(1)) * t847 + (t946 * t517 + t945 * t515 + (t932 * t515 + t931 * t517) * qJD(1)) * t846 + (t515 * t903 - t517 * t900) * t845 + (t942 * qJD(1) + t922 * qJDD(1) + t929 * t294 + t930 * t295 + t947 * t419 + t948 * t420) * t844 + (t941 * qJD(1) + t923 * qJDD(1) + t931 * t294 + t932 * t295 + t945 * t419 + t946 * t420) * t843 + (t966 * t463 - t962 * t464) * t837 + (t938 * t517 + t937 * t515 + (t515 * t921 + t920 * t517) * qJD(1)) * t836 + (t920 * t515 - t517 * t921) * t825 + t944 * t658 + t943 * t657;
t389 = t429 * qJD(2);
t333 = t381 * t517;
t167 = t580 * qJD(2);
t99 = -t381 * t698 + (t437 - t739) * qJD(1) - t710;
t87 = qJD(2) * t583 + t751;
t86 = qJD(1) * t197 + qJDD(1) * t335 - t389 * t698 - t394 * t427 + t721;
t85 = -t389 * t697 + t395 * t427 + t732 * qJDD(1) + (-t198 - t392) * qJD(1);
t64 = t262 * t419 + t264 * t420 + t623;
t51 = qJD(1) * t163 + qJDD(1) * t289 - t341 * t698 - t381 * t394 + t525;
t20 = qJD(1) * t153 + qJDD(1) * t264 - t291 * t419 - t294 * t356 + (-t394 * t476 - t518 * t770) * pkin(3) + t525 + t884;
t19 = -t291 * t420 + t295 * t356 + t517 * t570 + t621 * qJDD(1) + (-t155 + t681) * qJD(1) + t618;
t10 = t153 * t420 + t155 * t419 + t262 * t294 - t264 * t295 + t545;
t9 = -qJDD(5) * t464 + t294 * t744 - t295 * t743 + t419 * t762 + t420 * t763 + t463 * t696 + t545;
t1 = [-m(2) * (-g(1) * t428 + g(2) * t430) + ((t91 + (t252 * t517 + t253 * t515) * t463 + t641 + t758) * t420 + (-t256 * t774 + t793 + t90 + (t252 * t515 - t253 * t517) * t463 + t757 + t93) * t419 + t953) * t845 + ((((t1001 + t1013) * t517 + t926 + t998 + t1011) * t517 - t873 * t515) * qJD(2) + t952) * t653 + (-t990 * qJD(2) + t339 * t477 + t340 * t476 + t386 * t516 + t387 * t514 + t986 * t463 - t985 * t464) * qJD(1) + (-(-qJD(1) * t744 + t538 - t62 + t870) * t63 + t62 * (t442 + t482) + t63 * (-t683 * t842 + t882 + t950) + (-t445 - t379 + (-t464 * t973 + t887) * t509) * t515 * t62 + ((-t63 * t508 + t543 * t62) * t517 + (-t62 * rSges(6,2) + t543 * t63) * t515) * qJD(1) + (t11 - g(2)) * (t629 + t743) + (t12 - g(1)) * (t503 + (-t463 * t973 - t464 * t842) * t515 + t726)) * m(6) + (-(-qJD(1) * t262 + t542 - t77 + t870) * t78 + t77 * (t482 - t628) + t78 * (t719 + t882) + (-t316 * t78 + t515 * t827) * t509 + ((-t77 * rSges(5,3) + t78 * (-t388 - t451)) * t515 + (t77 * (-t388 - t879) - t78 * t508) * t517) * qJD(1) + (t20 - g(2)) * (t264 + t629) + (t19 - g(1)) * (-t262 + t726)) * m(5) + (t98 * t669 + t99 * (t481 + t718) + (t515 * t826 + t886 * t99) * qJD(2) + ((-t98 * rSges(4,3) + t99 * (-t470 - t461)) * t515 + (t98 * (-t470 - t877) - t99 * t513) * t517) * qJD(1) - (-qJD(1) * t288 + t557 + t883 - t98) * t99 + (t51 - g(2)) * (t289 + t627) + t954 * (-t288 - t712)) * m(4) + (-(-qJD(1) * t334 - t171 - t398 - t665) * t172 + t172 * (t475 + t711) + (t427 * t796 - t794) * qJD(2) + ((-pkin(1) - t429) * t795 + (t171 * (-rSges(3,3) - pkin(6)) + t172 * t659) * t515) * qJD(1) + (t86 - g(2)) * t238 + (t85 - g(1)) * (t659 * t515 + t506 + t709)) * m(3) + (t920 + t922) * t852 + (t921 + t923) * t851 + (t916 + t918) * t850 + (t917 + t919) * t849 + ((t638 * t517 - t567 - t757 + t95) * t420 + (t515 * t638 - t206 - t224 + t759 + (-t987 - t1002) * t517 + t930) * t419 + t944 + t949) * t848 + (t937 + t942) * t847 + (((t517 * t875 + t873 + t924) * t517 + (t515 * t875 + t925 + t999) * t515) * qJD(2) + t940 - t951) * t656 + (t933 + t936) * t655 + (-t938 + t941 + t943) * t846 + (-t934 + t935 + t939) * t654 + (m(2) * (t428 ^ 2 + t430 ^ 2) + Icges(2,3) + t1014 * t464 + t1015 * t463 - t989) * qJDD(1); t522 + t964 * t850 + t963 * t849 + (t936 * qJD(1) + t898 * qJD(2) + t918 * qJDD(1) + t924 * t394 + t925 * t395) * t844 + (t935 * qJD(1) + t899 * qJD(2) + t919 * qJDD(1) + t926 * t394 + t927 * t395) * t843 + ((t552 * t476 + t477 * t855 + t551 * t514 + t516 * t856) * qJD(2) + (t476 * t725 + t477 * t724 + t514 * t714 + t516 * t713) * qJD(1)) * t837 + (t934 * t517 + t933 * t515 + (t515 * t917 + t517 * t916) * qJD(1)) * t836 + (t515 * t916 - t517 * t917) * t825 + t940 * t658 + t939 * t657 + ((-t698 * t893 + t896) * t515 + ((t515 * t892 + t902) * qJD(2) + t901) * t517) * t656 + ((t925 * t515 + t924 * t517) * qJD(1) + t898) * t655 + ((t927 * t515 + t926 * t517) * qJD(1) + t899) * t654 + ((-t697 * t892 - t896) * t517 + ((t517 * t893 + t902) * qJD(2) + t901) * t515) * t653 + (-g(1) * (t372 + t716) - g(2) * (t371 + t717) - g(3) * (t955 - t876) - t544 - t43 * (t749 - t857) - (-t607 * t462 + (t43 * t650 - t516 * t607) * pkin(2)) * qJD(2) + t9 * (t619 + t622) + t43 * (t571 + t572) + t568 * t928 + (t11 * t568 + t620 * t798) * t515 + (t548 * t515 - t891 - t897) * t63 + (-(-t296 - t909) * qJD(1) + t548 * t517 + t894 + t895) * t62) * m(6) + (-g(1) * (t372 - t316) - g(2) * (t371 - t312) - g(3) * (t879 - t876) + t10 * (t622 + t753) + t64 * (t572 + t680) + (qJD(1) * t78 + t19) * t573 * t517 + (t20 * t573 + t78 * t556 + (t64 * t676 + t827) * qJD(1)) * t515 - t78 * (t631 + t891) - t64 * (t640 + t749) - (t606 * t462 + (t516 * t606 + t64 * t650) * pkin(2)) * qJD(2) + (qJD(1) * t296 + t556 * t517 - t626 + t895) * t77) * m(5) + (-(t98 * t332 + t99 * (-t333 - t685)) * qJD(1) - (t87 * pkin(2) * t650 + (-t87 * t333 - t881 * t98) * t517 + (-t87 * t332 - t881 * t99) * t515) * qJD(2) + t98 * (-pkin(2) * t663 - t341 * t517) + (qJD(2) * t592 + t288 * t394 + t395 * t739 + t679) * (t583 + t750) + t87 * (t592 + t678) + (t87 * t288 + t559 * t99) * t699 + (t51 * t559 + t99 * (-t341 - t684) + (t739 * t87 + t826) * qJD(1)) * t515 - g(3) * t881 - t559 * t838 + t954 * t886) * m(4) + (-(t171 * t369 - t794) * qJD(1) - (t167 * (-t369 * t515 - t370 * t517) + t591 * t429) * qJD(2) + g(1) * t370 + g(2) * t369 - g(3) * t429 + (qJD(2) * t590 + t334 * t394 - t335 * t395) * t580 + t167 * ((t334 * t517 - t335 * t515) * qJD(1) + t590) + t591 * t389 + (-t86 * t515 - t85 * t517 + (-t172 * t517 + t796) * qJD(1)) * t427) * m(3); (-m(4) - m(5) - m(6)) * (g(1) * t515 - g(2) * t517) + 0.2e1 * (t11 * t843 + t12 * t844) * m(6) + 0.2e1 * (t19 * t844 + t20 * t843) * m(5) + 0.2e1 * (t50 * t844 + t51 * t843) * m(4); t522 + (t9 * t619 + (t63 * t754 - t743 * t798) * t515 - t63 * t897 - g(1) * t716 - g(2) * t717 - g(3) * t955 - t544 + (-t890 - t928) * t728 + (qJD(1) * t909 + t517 * t754 + t894) * t62 + (t571 + t857) * t43) * m(6) + (t10 * t753 + t606 * t291 + (-t19 * t517 - t20 * t515 + (t515 * t77 - t517 * t78) * qJD(1)) * t356 - t626 * t77 - t631 * t78 + g(1) * t316 + g(2) * t312 - g(3) * t879 + (-t264 * t700 - t640 + t680) * t64) * m(5); ((-t419 * t63 - t420 * t62 + t509 * t607 + g(3) - t9) * t464 + (t890 + t12 * t517 + (-t419 * t515 - t420 * t517 + t509) * t43 + t872) * t463) * m(6);];
tau = t1;
