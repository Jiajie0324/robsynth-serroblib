% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PPRRP3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d4,theta1,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:11
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PPRRP3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRRP3_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRRP3_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRRP3_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRRP3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PPRRP3_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:11:28
% EndTime: 2019-12-05 15:11:36
% DurationCPUTime: 8.09s
% Computational Cost: add. (13349->454), mult. (25073->538), div. (0->0), fcn. (16225->8), ass. (0->308)
t730 = qJD(4) ^ 2;
t726 = sin(qJ(4));
t716 = t726 ^ 2;
t834 = qJD(3) ^ 2;
t782 = t716 * t834;
t696 = t730 + t782;
t728 = cos(qJ(4));
t702 = t726 * t834 * t728;
t695 = qJDD(4) - t702;
t795 = t728 * t695;
t655 = -t726 * t696 + t795;
t780 = qJD(3) * qJD(4);
t708 = t728 * t780;
t776 = t726 * qJDD(3);
t682 = 0.2e1 * t708 + t776;
t727 = sin(qJ(3));
t729 = cos(qJ(3));
t610 = t729 * t655 - t727 * t682;
t802 = t726 * t695;
t649 = t728 * t696 + t802;
t720 = sin(pkin(8));
t722 = cos(pkin(8));
t568 = t722 * t610 + t720 * t649;
t607 = t727 * t655 + t729 * t682;
t721 = sin(pkin(7));
t723 = cos(pkin(7));
t873 = qJ(1) * (t568 * t723 + t607 * t721);
t872 = qJ(1) * (t721 * t568 - t723 * t607);
t565 = t720 * t610 - t722 * t649;
t871 = pkin(1) * t565;
t870 = qJ(2) * t565;
t869 = -pkin(1) * t607 + qJ(2) * t568;
t707 = t726 * t780;
t774 = t728 * qJDD(3);
t684 = -0.2e1 * t707 + t774;
t797 = t728 * t684;
t805 = t726 * t682;
t632 = -t797 + t805;
t717 = t728 ^ 2;
t691 = (t716 - t717) * t834;
t601 = t729 * t632 - t727 * t691;
t804 = t726 * t684;
t629 = t728 * t682 + t804;
t557 = t722 * t601 - t720 * t629;
t599 = t727 * t632 + t729 * t691;
t868 = t557 * t721 - t599 * t723;
t867 = t723 * t557 + t721 * t599;
t781 = t717 * t834;
t698 = -t730 + t781;
t653 = -t728 * t698 + t802;
t620 = t729 * t653 - t727 * t774;
t645 = t726 * t698 + t795;
t579 = t722 * t620 - t720 * t645;
t773 = t729 * qJDD(3);
t617 = t727 * t653 + t728 * t773;
t864 = t579 * t721 - t617 * t723;
t863 = t723 * t579 + t721 * t617;
t861 = pkin(2) * t607;
t860 = pkin(5) * t607;
t853 = -pkin(2) * t649 + pkin(5) * t610;
t555 = t720 * t601 + t722 * t629;
t576 = t720 * t620 + t722 * t645;
t851 = pkin(3) * t649;
t850 = pkin(6) * t649;
t849 = pkin(6) * t655;
t693 = t723 * g(1) + t721 * g(2);
t791 = g(3) - qJDD(1);
t665 = -t722 * t693 - t720 * t791;
t692 = t721 * g(1) - t723 * g(2);
t686 = -qJDD(2) + t692;
t613 = t729 * t665 - t727 * t686;
t603 = -t834 * pkin(3) + qJDD(3) * pkin(6) + t613;
t664 = -t720 * t693 + t722 * t791;
t658 = t728 * t664;
t827 = pkin(4) * t728;
t753 = -qJ(5) * t726 - t827;
t784 = t834 * t753;
t551 = -qJDD(4) * pkin(4) - t730 * qJ(5) + (t603 + t784) * t726 + qJDD(5) - t658;
t694 = qJDD(4) + t702;
t699 = -t730 - t781;
t842 = pkin(4) * t694 + qJ(5) * t699 - t551;
t683 = t708 + t776;
t841 = t683 + t708;
t840 = t721 * t791;
t839 = t723 * t791;
t641 = t722 * t664;
t595 = -t720 * t665 + t641;
t572 = t726 * t603 - t658;
t573 = t728 * t603 + t726 * t664;
t523 = t726 * t572 + t728 * t573;
t612 = t727 * t665 + t729 * t686;
t602 = -qJDD(3) * pkin(3) - t834 * pkin(6) + t612;
t517 = t729 * t523 + t727 * t602;
t522 = t728 * t572 - t726 * t573;
t837 = (pkin(3) * t729 + pkin(6) * t727 + pkin(2)) * t522 + pkin(5) * t517;
t779 = (qJD(5) * qJD(4));
t712 = 2 * t779;
t750 = -t730 * pkin(4) + qJDD(4) * qJ(5) + t728 * t784 + t573;
t548 = t712 + t750;
t519 = t728 * t548 + t726 * t551;
t761 = -t707 + t774;
t736 = -t761 * pkin(4) - t841 * qJ(5) + t602;
t783 = qJD(3) * t726;
t552 = (pkin(4) * qJD(4) - (2 * qJD(5))) * t783 + t736;
t836 = -(pkin(3) - t753) * t552 + pkin(6) * t519;
t735 = 0.2e1 * qJD(5) * t783 - t736;
t546 = -pkin(4) * t707 + qJ(5) * t682 + t735;
t835 = t849 + t726 * t546 + (pkin(3) + t827) * t682;
t803 = t726 * t694;
t652 = t728 * t699 - t803;
t609 = t729 * t652 - t727 * t684;
t796 = t728 * t694;
t646 = t726 * t699 + t796;
t564 = t720 * t609 - t722 * t646;
t833 = pkin(1) * t564;
t832 = pkin(1) * t720;
t606 = t727 * t652 + t729 * t684;
t831 = pkin(2) * t606;
t785 = t716 + t717;
t687 = t785 * qJDD(3);
t690 = t785 * t834;
t635 = t727 * t687 + t729 * t690;
t830 = pkin(2) * t635;
t829 = pkin(3) * t646;
t825 = pkin(5) * t606;
t824 = pkin(5) * t635;
t822 = pkin(6) * t646;
t567 = t722 * t609 + t720 * t646;
t821 = qJ(1) * (t721 * t567 - t723 * t606);
t636 = t729 * t687 - t727 * t690;
t816 = t636 * t722;
t820 = qJ(1) * (-t723 * t635 + t721 * t816);
t819 = qJ(2) * t564;
t818 = qJ(2) * t636;
t815 = t720 * t664;
t667 = t720 * t686;
t560 = t729 * t612 - t727 * t613;
t813 = t722 * t560;
t678 = t785 * t780;
t663 = t727 * qJDD(4) + t729 * t678;
t640 = t722 * t663;
t668 = t722 * t686;
t775 = t727 * qJDD(3);
t688 = t729 * t834 + t775;
t812 = t722 * t688;
t689 = -t727 * t834 + t773;
t811 = t722 * t689;
t810 = t722 * t723;
t809 = t723 * t686;
t808 = t723 * t688;
t807 = t723 * t689;
t806 = t726 * t602;
t801 = t727 * t664;
t798 = t728 * t602;
t794 = t729 * t664;
t790 = -pkin(1) * t606 + qJ(2) * t567;
t789 = -pkin(2) * t646 + pkin(5) * t609;
t788 = -pkin(1) * t635 + qJ(2) * t816;
t787 = pkin(3) * t684 + pkin(6) * t652;
t786 = pkin(3) * t690 + pkin(6) * t687;
t778 = t720 * qJDD(3);
t777 = t722 * qJDD(3);
t772 = t636 * t832;
t771 = pkin(5) + t832;
t591 = -pkin(2) * t689 + t612;
t767 = qJ(2) * t688 - t591;
t592 = pkin(2) * t688 + t613;
t766 = qJ(2) * t689 - t592;
t633 = pkin(5) * t636;
t765 = t727 * t522 + t633;
t764 = t722 * t665 + t815;
t763 = -t692 * t721 - t723 * t693;
t760 = t727 * t702;
t759 = t729 * t702;
t749 = t727 * t612 + t729 * t613;
t757 = -pkin(2) * t664 + pkin(5) * t749;
t756 = -pkin(3) * t602 + pkin(6) * t523;
t755 = t787 - t798;
t754 = -pkin(4) * t551 + qJ(5) * t548;
t752 = pkin(4) * t726 - qJ(5) * t728;
t615 = pkin(5) * t688 + t794;
t614 = -pkin(5) * t689 + t801;
t748 = t723 * t692 - t721 * t693;
t745 = t523 + t786;
t744 = t721 * t688 + t722 * t807;
t743 = t721 * t811 - t808;
t536 = pkin(4) * t690 + t548;
t545 = qJ(5) * t690 + t551;
t508 = -t726 * t536 + t728 * t545;
t679 = t752 * qJDD(3);
t742 = t727 * t508 + t729 * t679 + t633;
t741 = -pkin(3) * t682 + t806 - t849;
t547 = (t684 - t707) * pkin(4) + t735;
t524 = qJ(5) * t797 - t726 * t547 - t822;
t527 = -t829 - t842;
t740 = t727 * t524 + t729 * t527 + t789;
t739 = t728 * t536 + t726 * t545 + t786;
t549 = t572 - t829;
t570 = t806 - t822;
t738 = t729 * t549 + t727 * t570 + t789;
t737 = qJ(5) * t804 + t728 * t547 + t787;
t518 = t726 * t548 - t728 * t551;
t493 = -pkin(3) * t518 - t754;
t494 = -pkin(6) * t518 + t752 * t552;
t504 = t729 * t519 + t727 * t552;
t734 = -pkin(2) * t518 + pkin(5) * t504 + t729 * t493 + t727 * t494;
t525 = -pkin(4) * t805 + t728 * t546 - t850;
t731 = pkin(4) * t696 + qJ(5) * t695 + t750;
t526 = -t731 - (2 * t779) - t851;
t733 = t727 * t525 + t729 * t526 + t853;
t550 = t573 + t851;
t571 = t798 + t850;
t732 = t729 * t550 + t727 * t571 - t853;
t697 = -t730 + t782;
t673 = t720 * t688;
t672 = t720 * t689;
t662 = t728 * t683 - t716 * t780;
t661 = -t729 * qJDD(4) + t727 * t678;
t660 = -t717 * t780 - t726 * t761;
t654 = t726 * t697 + t796;
t648 = -t728 * t697 + t803;
t644 = t841 * t726;
t643 = t726 * t708 - t728 * t761;
t639 = t720 * t663;
t628 = t721 * t689 - t722 * t808;
t627 = -t721 * t812 - t807;
t625 = t729 * t662 - t760;
t624 = t729 * t660 + t760;
t623 = t727 * t662 + t759;
t622 = t727 * t660 - t759;
t621 = t729 * t654 + t726 * t775;
t618 = t727 * t654 - t726 * t773;
t590 = t771 * t688 + t794;
t589 = t771 * t689 - t801;
t588 = t721 * t661 + t663 * t810;
t587 = t721 * t640 - t723 * t661;
t586 = pkin(1) * t686 + qJ(2) * t764;
t584 = t722 * t625 + t720 * t644;
t583 = t722 * t624 - t720 * t643;
t582 = t720 * t625 - t722 * t644;
t581 = t720 * t624 + t722 * t643;
t580 = t722 * t621 + t720 * t648;
t577 = t720 * t621 - t722 * t648;
t574 = qJ(1) * (t721 * t635 + t636 * t810);
t553 = t720 * t560;
t544 = t722 * t615 + t766 * t720;
t543 = t722 * t614 + t767 * t720;
t542 = t723 * t584 + t721 * t623;
t541 = t723 * t583 + t721 * t622;
t540 = t721 * t584 - t723 * t623;
t539 = t721 * t583 - t723 * t622;
t538 = t723 * t580 + t721 * t618;
t537 = t721 * t580 - t723 * t618;
t535 = t722 * t749 + t815;
t534 = t720 * t749 - t641;
t533 = pkin(1) * t688 + t720 * t615 - t766 * t722;
t532 = -pkin(1) * t689 + t720 * t614 - t767 * t722;
t530 = qJ(1) * (t723 * t567 + t721 * t606);
t529 = -t755 - t831;
t528 = -t741 + t861;
t520 = t729 * t522 - t824;
t516 = t727 * t523 - t729 * t602;
t515 = -t745 - t830;
t514 = -t835 - t861;
t513 = -t737 - t831;
t512 = -t765 - t772;
t511 = -t727 * t550 + t729 * t571 + t860;
t510 = -t727 * t549 + t729 * t570 - t825;
t509 = -pkin(1) * t534 - t757;
t507 = t729 * t508 - t727 * t679 - t824;
t506 = -t739 - t830;
t505 = -qJ(2) * t534 - (pkin(2) * t720 - pkin(5) * t722) * t560;
t503 = t727 * t519 - t729 * t552;
t502 = -t742 - t772;
t501 = -t732 + t871;
t500 = -t738 - t833;
t499 = t729 * t524 - t727 * t527 - t825;
t498 = t729 * t525 - t727 * t526 - t860;
t497 = t722 * t517 - t522 * t720;
t496 = t720 * t517 + t522 * t722;
t495 = qJ(2) * t535 - (-pkin(2) * t722 - pkin(5) * t720 - pkin(1)) * t560;
t492 = -pkin(2) * t516 - t756;
t491 = t722 * t520 + (-t515 - t818) * t720;
t490 = t722 * t511 - t720 * t528 + t870;
t489 = t722 * t510 - t720 * t529 - t819;
t488 = -t740 - t833;
t487 = -t733 - t871;
t486 = t722 * t515 + t720 * t520 + t788;
t485 = t720 * t511 + t722 * t528 - t869;
t484 = t720 * t510 + t722 * t529 + t790;
t483 = t722 * t504 + t720 * t518;
t482 = t720 * t504 - t722 * t518;
t481 = -pkin(5) * t516 - (pkin(3) * t727 - pkin(6) * t729) * t522;
t480 = t722 * t507 + (-t506 - t818) * t720;
t479 = t722 * t506 + t720 * t507 + t788;
t478 = t722 * t499 - t720 * t513 - t819;
t477 = t722 * t498 - t720 * t514 - t870;
t476 = t720 * t499 + t722 * t513 + t790;
t475 = t720 * t498 + t722 * t514 + t869;
t474 = -pkin(2) * t503 - t836;
t473 = -pkin(1) * t496 - t837;
t472 = -pkin(5) * t503 - t727 * t493 + t729 * t494;
t471 = -qJ(2) * t496 + t722 * t481 - t720 * t492;
t470 = -pkin(1) * t516 + qJ(2) * t497 + t720 * t481 + t722 * t492;
t469 = -pkin(1) * t482 - t734;
t468 = -qJ(2) * t482 + t722 * t472 - t720 * t474;
t467 = -pkin(1) * t503 + qJ(2) * t483 + t720 * t472 + t722 * t474;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t840, -t839, -t748, -qJ(1) * t748, 0, 0, 0, 0, 0, 0, -t721 * t664 - t720 * t809, -t721 * t665 - t722 * t809, t723 * t595, -qJ(1) * (t721 * t764 + t809) - (t721 * pkin(1) - t723 * qJ(2)) * t595, 0, 0, t744, 0, t628, t723 * t778, -qJ(1) * t627 + t723 * t543 - t721 * t590, qJ(1) * t743 + t723 * t544 - t721 * t589, t560 * t810 + t721 * t749, t723 * t505 - t721 * t509 - qJ(1) * (t721 * t535 + t560 * t723), t542, -t867, t538, t541, -t863, t588, t723 * t489 - t721 * t500 - t821, t723 * t490 - t721 * t501 + t872, t723 * t491 - t721 * t512 - t820, t723 * t471 - t721 * t473 - qJ(1) * (t721 * t497 - t723 * t516), t542, t538, t867, t588, t863, t541, t723 * t478 - t721 * t488 - t821, t723 * t480 - t721 * t502 - t820, t723 * t477 - t721 * t487 - t872, t723 * t468 - t721 * t469 - qJ(1) * (t721 * t483 - t723 * t503); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t839, -t840, t763, qJ(1) * t763, 0, 0, 0, 0, 0, 0, t664 * t723 - t667 * t721, t665 * t723 - t668 * t721, t721 * t595, qJ(1) * (-t686 * t721 + t723 * t764) - (-pkin(1) * t723 - qJ(2) * t721) * t595, 0, 0, t743, 0, t627, t721 * t778, qJ(1) * t628 + t543 * t721 + t590 * t723, -qJ(1) * t744 + t721 * t544 + t723 * t589, t721 * t813 - t723 * t749, t721 * t505 + t723 * t509 + qJ(1) * (t535 * t723 - t560 * t721), t540, -t868, t537, t539, -t864, t587, t489 * t721 + t500 * t723 + t530, t721 * t490 + t723 * t501 - t873, t491 * t721 + t512 * t723 + t574, t721 * t471 + t723 * t473 + qJ(1) * (t497 * t723 + t516 * t721), t540, t537, t868, t587, t864, t539, t478 * t721 + t488 * t723 + t530, t480 * t721 + t502 * t723 + t574, t721 * t477 + t723 * t487 + t873, t721 * t468 + t723 * t469 + qJ(1) * (t483 * t723 + t503 * t721); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t692, t693, 0, 0, 0, 0, 0, 0, 0, 0, t668, -t667, t764, t586, 0, 0, t672, 0, -t673, -t777, t532, t533, t553, t495, t582, -t555, t577, t581, -t576, t639, t484, t485, t486, t470, t582, t577, t555, t639, t576, t581, t476, t479, t475, t467; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t791, -t692, 0, 0, 0, 0, 0, 0, 0, -t667, -t668, t595, qJ(2) * t595, 0, 0, t811, 0, -t812, t778, t543, t544, t813, t505, t584, -t557, t580, t583, -t579, t640, t489, t490, t491, t471, t584, t580, t557, t640, t579, t583, t478, t480, t477, t468; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t791, 0, -t693, 0, 0, 0, 0, 0, 0, 0, t664, t665, 0, pkin(1) * t595, 0, 0, -t688, 0, -t689, 0, t590, t589, -t749, t509, -t623, t599, -t618, -t622, t617, -t661, t500, t501, t512, t473, -t623, -t618, -t599, -t661, -t617, -t622, t488, t502, t487, t469; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t692, t693, 0, 0, 0, 0, 0, 0, 0, 0, t668, -t667, t764, t586, 0, 0, t672, 0, -t673, -t777, t532, t533, t553, t495, t582, -t555, t577, t581, -t576, t639, t484, t485, t486, t470, t582, t577, t555, t639, t576, t581, t476, t479, t475, t467; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t686, t664, 0, 0, 0, t689, 0, -t688, 0, t614, t615, t560, pkin(5) * t560, t625, -t601, t621, t624, -t620, t663, t510, t511, t520, t481, t625, t621, t601, t663, t620, t624, t499, t507, t498, t472; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t686, 0, t665, 0, 0, 0, 0, 0, 0, -qJDD(3), t591, t592, 0, pkin(2) * t560, -t644, -t629, -t648, t643, -t645, 0, t529, t528, t515, t492, -t644, -t648, t629, 0, t645, t643, t513, t506, t514, t474; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t664, -t665, 0, 0, 0, 0, t688, 0, t689, 0, -t615, t614, t749, t757, t623, -t599, t618, t622, -t617, t661, t738, t732, t765, t837, t623, t618, t599, t661, t617, t622, t740, t742, t733, t734; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), 0, -t834, 0, 0, t664, t612, 0, t662, -t632, t654, t660, -t653, t678, t570, t571, t522, pkin(6) * t522, t662, t654, t632, t678, t653, t660, t524, t508, t525, t494; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t834, 0, qJDD(3), 0, -t664, 0, t613, 0, t702, -t691, -t776, -t702, -t774, -qJDD(4), t549, t550, 0, pkin(3) * t522, t702, -t776, t691, -qJDD(4), t774, -t702, t527, t679, t526, t493; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t612, -t613, 0, 0, t644, t629, t648, -t643, t645, 0, t755, t741, t745, t756, t644, t648, -t629, 0, -t645, -t643, t737, t739, t835, t836; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t683, t684, t694, -t708, t698, t708, 0, t602, t572, 0, t683, t694, -t684, t708, -t698, -t708, qJ(5) * t684, t545, t546, -qJ(5) * t552; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t707, t682, -t697, t761, t695, -t707, -t602, 0, t573, 0, t707, -t697, -t682, -t707, -t695, t761, t547, t536, pkin(4) * t682, -pkin(4) * t552; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t702, t691, t776, t702, t774, qJDD(4), -t572, -t573, 0, 0, -t702, t776, -t691, qJDD(4), -t774, t702, t842, -t679, t712 + t731, t754; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t683, t694, -t684, t708, -t698, -t708, 0, t551, -t552, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t702, t776, -t691, qJDD(4), -t774, t702, -t551, 0, t548, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t707, t697, t682, t707, t695, -t761, t552, -t548, 0, 0;];
m_new_reg = t1;
