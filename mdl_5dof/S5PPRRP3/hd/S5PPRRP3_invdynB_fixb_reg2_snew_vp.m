% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PPRRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d4,theta1,theta2]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:11
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PPRRP3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRRP3_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRRP3_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRRP3_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRRP3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PPRRP3_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:11:18
% EndTime: 2019-12-05 15:11:28
% DurationCPUTime: 6.08s
% Computational Cost: add. (7671->369), mult. (14403->520), div. (0->0), fcn. (9537->8), ass. (0->273)
t357 = qJD(4) ^ 2;
t353 = sin(qJ(4));
t344 = t353 ^ 2;
t432 = qJD(3) ^ 2;
t391 = t344 * t432;
t331 = t357 + t391;
t355 = cos(qJ(4));
t336 = t353 * t432 * t355;
t330 = qJDD(4) - t336;
t400 = t355 * t330;
t297 = -t353 * t331 + t400;
t389 = qJD(3) * qJD(4);
t379 = t355 * t389;
t386 = t353 * qJDD(3);
t319 = 0.2e1 * t379 + t386;
t354 = sin(qJ(3));
t356 = cos(qJ(3));
t251 = t356 * t297 - t354 * t319;
t407 = t353 * t330;
t291 = t355 * t331 + t407;
t348 = sin(pkin(8));
t350 = cos(pkin(8));
t210 = t350 * t251 + t348 * t291;
t248 = t354 * t297 + t356 * t319;
t349 = sin(pkin(7));
t351 = cos(pkin(7));
t175 = t349 * t210 - t351 * t248;
t466 = qJ(1) * t175;
t178 = t351 * t210 + t349 * t248;
t465 = qJ(1) * t178;
t207 = t348 * t251 - t350 * t291;
t464 = qJ(2) * t207;
t463 = -pkin(1) * t207 + pkin(2) * t291 - pkin(5) * t251;
t462 = -pkin(1) * t248 + qJ(2) * t210;
t409 = t353 * t319;
t381 = t353 * t389;
t384 = t355 * qJDD(3);
t363 = 0.2e1 * t381 - t384;
t434 = t363 * t355;
t276 = t434 + t409;
t345 = t355 ^ 2;
t326 = (t344 - t345) * t432;
t243 = t356 * t276 - t354 * t326;
t274 = t355 * t319 - t353 * t363;
t200 = t350 * t243 - t348 * t274;
t240 = t354 * t276 + t356 * t326;
t461 = t349 * t200 - t351 * t240;
t460 = t351 * t200 + t349 * t240;
t390 = t345 * t432;
t333 = -t357 + t390;
t295 = -t355 * t333 + t407;
t261 = t356 * t295 - t354 * t384;
t289 = t353 * t333 + t400;
t221 = t350 * t261 - t348 * t289;
t383 = t356 * qJDD(3);
t257 = t354 * t295 + t355 * t383;
t459 = t349 * t221 - t351 * t257;
t458 = t351 * t221 + t349 * t257;
t456 = pkin(5) * t248;
t449 = -pkin(2) * t248 - pkin(6) * t297;
t447 = t348 * t243 + t350 * t274;
t446 = t348 * t261 + t350 * t289;
t445 = 2 * qJD(5);
t443 = pkin(3) * t291;
t442 = pkin(6) * t291;
t328 = t351 * g(1) + t349 * g(2);
t346 = g(3) - qJDD(1);
t306 = -t348 * t328 + t350 * t346;
t283 = t350 * t306;
t307 = -t350 * t328 - t348 * t346;
t236 = -t348 * t307 + t283;
t327 = t349 * g(1) - t351 * g(2);
t321 = -qJDD(2) + t327;
t254 = t356 * t307 - t354 * t321;
t245 = -t432 * pkin(3) + qJDD(3) * pkin(6) + t254;
t215 = t355 * t245 + t353 * t306;
t423 = qJ(5) * t353;
t431 = pkin(4) * t355;
t370 = -t423 - t431;
t318 = t370 * qJD(3);
t368 = t355 * qJD(3) * t318 + qJDD(4) * qJ(5) + (qJD(4) * t445) + t215;
t392 = qJD(3) * t353;
t433 = t318 * t392 + qJDD(5);
t334 = -t357 - t390;
t329 = qJDD(4) + t336;
t408 = t353 * t329;
t294 = t355 * t334 - t408;
t247 = t354 * t294 - t356 * t363;
t430 = pkin(5) * t247;
t393 = t344 + t345;
t322 = t393 * qJDD(3);
t325 = t393 * t432;
t278 = t354 * t322 + t356 * t325;
t429 = pkin(5) * t278;
t401 = t355 * t329;
t288 = t353 * t334 + t401;
t428 = pkin(6) * t288;
t250 = t356 * t294 + t354 * t363;
t209 = t350 * t250 + t348 * t288;
t174 = t349 * t209 - t351 * t247;
t427 = qJ(1) * t174;
t279 = t356 * t322 - t354 * t325;
t417 = t349 * t350;
t227 = -t351 * t278 + t279 * t417;
t426 = qJ(1) * t227;
t206 = t348 * t250 - t350 * t288;
t425 = qJ(2) * t206;
t424 = qJ(2) * t279;
t422 = t348 * t306;
t324 = -t354 * t432 + t383;
t420 = t348 * t324;
t419 = t349 * t321;
t418 = t349 * t346;
t416 = t350 * t321;
t415 = t350 * t351;
t414 = t351 * t321;
t385 = t354 * qJDD(3);
t323 = t356 * t432 + t385;
t413 = t351 * t323;
t412 = t351 * t324;
t411 = t351 * t346;
t253 = t354 * t307 + t356 * t321;
t244 = -qJDD(3) * pkin(3) - t432 * pkin(6) + t253;
t410 = t353 * t244;
t406 = t354 * t306;
t403 = t355 * t244;
t399 = t356 * t306;
t396 = -pkin(1) * t247 + qJ(2) * t209;
t214 = t353 * t245 - t355 * t306;
t395 = -pkin(1) * t278 + t350 * t424;
t394 = t325 - t357;
t387 = qJDD(3) * t348;
t382 = pkin(1) * t348 + pkin(5);
t377 = pkin(2) * t324 + qJ(2) * t323 - t253;
t376 = -pkin(2) * t323 + qJ(2) * t324 - t254;
t237 = t350 * t307 + t422;
t281 = -t349 * t327 - t351 * t328;
t374 = t354 * t336;
t373 = t356 * t336;
t195 = -pkin(3) * t288 + t214;
t372 = t382 * t279;
t371 = -pkin(2) * t247 - pkin(6) * t294;
t369 = pkin(4) * t353 - qJ(5) * t355;
t165 = t355 * t214 - t353 * t215;
t166 = t353 * t214 + t355 * t215;
t203 = t356 * t253 - t354 * t254;
t204 = t354 * t253 + t356 * t254;
t280 = t351 * t327 - t349 * t328;
t367 = t349 * t323 + t350 * t412;
t366 = t324 * t417 - t413;
t365 = t379 + t386;
t364 = -t381 + t384;
t362 = -pkin(1) * t206 + pkin(2) * t288 - pkin(5) * t250;
t361 = -pkin(2) * t278 - pkin(3) * t325 - pkin(6) * t322;
t360 = -qJDD(4) * pkin(4) + t214 + t433;
t359 = -t364 * pkin(4) + t244 + (-t365 - t379) * qJ(5);
t358 = t392 * t445 - t359;
t332 = t357 - t391;
t317 = t369 * qJDD(3);
t316 = t393 * t389;
t312 = t348 * t323;
t305 = t354 * qJDD(4) + t356 * t316;
t304 = -t344 * t389 + t355 * t365;
t303 = t356 * qJDD(4) - t354 * t316;
t302 = -t345 * t389 - t353 * t364;
t296 = -t353 * t332 + t401;
t290 = -t355 * t332 - t408;
t282 = t348 * t305;
t272 = t348 * t279;
t271 = t349 * t324 - t350 * t413;
t269 = -t323 * t417 - t412;
t266 = t356 * t304 - t374;
t265 = t356 * t302 + t374;
t264 = -t354 * t304 - t373;
t263 = -t354 * t302 + t373;
t262 = t356 * t296 + t353 * t385;
t259 = -t354 * t296 + t353 * t383;
t256 = pkin(5) * t323 + t399;
t255 = -pkin(5) * t324 + t406;
t232 = t382 * t323 + t399;
t231 = t382 * t324 - t406;
t230 = -t349 * t303 + t305 * t415;
t229 = t351 * t303 + t305 * t417;
t228 = t349 * t278 + t279 * t415;
t226 = t350 * t266 + t348 * t409;
t225 = t350 * t265 - t348 * t434;
t224 = t348 * t266 - t350 * t409;
t223 = t348 * t265 + t350 * t434;
t222 = t350 * t262 - t348 * t290;
t219 = t348 * t262 + t350 * t290;
t218 = qJ(1) * t228;
t217 = t351 * t237 - t419;
t216 = t349 * t237 + t414;
t213 = t403 + t442;
t212 = t410 - t428;
t198 = (pkin(4) * qJD(4) - (2 * qJD(5))) * t392 + t359;
t197 = t357 * qJ(5) - t360;
t196 = t215 + t443;
t194 = -t357 * pkin(4) + t368;
t193 = (-t363 - t381) * pkin(4) + t358;
t192 = -pkin(4) * t381 + qJ(5) * t319 + t358;
t191 = t394 * qJ(5) + t360;
t190 = t350 * t256 + t348 * t376;
t189 = t350 * t255 + t348 * t377;
t188 = t351 * t226 - t349 * t264;
t187 = t351 * t225 - t349 * t263;
t186 = t349 * t226 + t351 * t264;
t185 = t349 * t225 + t351 * t263;
t184 = t351 * t222 - t349 * t259;
t183 = t349 * t222 + t351 * t259;
t182 = t394 * pkin(4) + t368;
t181 = t350 * t204 + t422;
t180 = t348 * t204 - t283;
t177 = t351 * t209 + t349 * t247;
t173 = qJ(1) * t177;
t172 = pkin(3) * t363 + t371 + t403;
t171 = pkin(3) * t319 - t410 - t449;
t170 = (-t334 - t357) * qJ(5) + (-qJDD(4) - t329) * pkin(4) + t195 + t433;
t169 = -t443 - qJ(5) * t330 + (-t331 + t357) * pkin(4) - t368;
t168 = -pkin(4) * t409 + t355 * t192 - t442;
t167 = -qJ(5) * t434 - t353 * t193 - t428;
t163 = t356 * t165 - t429;
t162 = t355 * t194 - t353 * t197;
t161 = t353 * t194 + t355 * t197;
t160 = t356 * t166 + t354 * t244;
t159 = t354 * t166 - t356 * t244;
t158 = -t166 + t361;
t157 = t351 * t181 - t203 * t349;
t156 = t349 * t181 + t203 * t351;
t155 = -t353 * t192 + (-pkin(3) - t431) * t319 + t449;
t154 = -t355 * t193 - (-pkin(3) - t423) * t363 + t371;
t153 = -t354 * t165 - t372;
t152 = -t354 * t196 + t356 * t213 + t456;
t151 = -t354 * t195 + t356 * t212 - t430;
t150 = -pkin(1) * t180 + pkin(2) * t306 - pkin(5) * t204;
t149 = -t353 * t182 + t355 * t191;
t148 = t356 * t149 - t354 * t317 - t429;
t147 = -t355 * t182 - t353 * t191 + t361;
t146 = -qJ(2) * t180 - (pkin(2) * t348 - pkin(5) * t350) * t203;
t145 = t356 * t162 + t354 * t198;
t144 = t354 * t162 - t356 * t198;
t143 = -t354 * t149 - t356 * t317 - t372;
t142 = -t356 * t196 - t354 * t213 - t463;
t141 = -t356 * t195 - t354 * t212 + t362;
t140 = t356 * t167 - t354 * t170 - t430;
t139 = t356 * t168 - t354 * t169 - t456;
t138 = t350 * t160 - t165 * t348;
t137 = t348 * t160 + t165 * t350;
t136 = -pkin(6) * t161 + t198 * t369;
t135 = -pkin(3) * t161 - pkin(4) * t197 - qJ(5) * t194;
t134 = -pkin(2) * t159 + pkin(3) * t244 - pkin(6) * t166;
t133 = t350 * t163 + (-t158 - t424) * t348;
t132 = t350 * t152 - t348 * t171 + t464;
t131 = t350 * t151 - t348 * t172 - t425;
t130 = -t354 * t167 - t356 * t170 + t362;
t129 = -t354 * t168 - t356 * t169 + t463;
t128 = t350 * t145 + t348 * t161;
t127 = t348 * t145 - t350 * t161;
t126 = -pkin(5) * t159 - (pkin(3) * t354 - pkin(6) * t356) * t165;
t125 = t351 * t138 + t349 * t159;
t124 = t349 * t138 - t351 * t159;
t123 = t350 * t148 + (-t147 - t424) * t348;
t122 = t350 * t140 - t348 * t154 - t425;
t121 = t350 * t139 - t348 * t155 - t464;
t120 = -pkin(2) * t144 - pkin(6) * t162 + (pkin(3) - t370) * t198;
t119 = t351 * t128 + t349 * t144;
t118 = t349 * t128 - t351 * t144;
t117 = -pkin(1) * t137 - pkin(5) * t160 - (pkin(3) * t356 + pkin(6) * t354 + pkin(2)) * t165;
t116 = -pkin(5) * t144 - t354 * t135 + t356 * t136;
t115 = -qJ(2) * t137 + t350 * t126 - t348 * t134;
t114 = -pkin(1) * t127 + pkin(2) * t161 - pkin(5) * t145 - t356 * t135 - t354 * t136;
t113 = -qJ(2) * t127 + t350 * t116 - t348 * t120;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t281, 0, 0, 0, 0, 0, 0, 0, 0, 0, t217, 0, 0, 0, 0, 0, 0, t271, -t367, 0, t157, 0, 0, 0, 0, 0, 0, t177, -t178, t228, t125, 0, 0, 0, 0, 0, 0, t177, t228, t178, t119; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t280, 0, 0, 0, 0, 0, 0, 0, 0, 0, t216, 0, 0, 0, 0, 0, 0, t269, -t366, 0, t156, 0, 0, 0, 0, 0, 0, t174, -t175, t227, t124, 0, 0, 0, 0, 0, 0, t174, t227, t175, t118; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t346, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t236, 0, 0, 0, 0, 0, 0, -t312, -t420, 0, t180, 0, 0, 0, 0, 0, 0, t206, -t207, t272, t137, 0, 0, 0, 0, 0, 0, t206, t272, t207, t127; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t418, -t411, -t280, -qJ(1) * t280, 0, 0, 0, 0, 0, 0, -t349 * t306 - t348 * t414, -t349 * t307 - t350 * t414, t351 * t236, -qJ(1) * t216 - (pkin(1) * t349 - qJ(2) * t351) * t236, 0, 0, t367, 0, t271, t351 * t387, -qJ(1) * t269 + t351 * t189 - t349 * t232, qJ(1) * t366 + t351 * t190 - t349 * t231, t203 * t415 + t204 * t349, -qJ(1) * t156 + t351 * t146 - t349 * t150, t188, -t460, t184, t187, -t458, t230, t351 * t131 - t349 * t141 - t427, t351 * t132 - t349 * t142 + t466, t351 * t133 - t349 * t153 - t426, -qJ(1) * t124 + t351 * t115 - t349 * t117, t188, t184, t460, t230, t458, t187, t351 * t122 - t349 * t130 - t427, t351 * t123 - t349 * t143 - t426, t351 * t121 - t349 * t129 - t466, -qJ(1) * t118 + t351 * t113 - t349 * t114; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t411, -t418, t281, qJ(1) * t281, 0, 0, 0, 0, 0, 0, t351 * t306 - t348 * t419, t351 * t307 - t349 * t416, t349 * t236, qJ(1) * t217 - (-pkin(1) * t351 - qJ(2) * t349) * t236, 0, 0, t366, 0, t269, t349 * t387, qJ(1) * t271 + t349 * t189 + t351 * t232, -qJ(1) * t367 + t349 * t190 + t351 * t231, t203 * t417 - t204 * t351, qJ(1) * t157 + t349 * t146 + t351 * t150, t186, -t461, t183, t185, -t459, t229, t349 * t131 + t351 * t141 + t173, t349 * t132 + t351 * t142 - t465, t349 * t133 + t351 * t153 + t218, qJ(1) * t125 + t349 * t115 + t351 * t117, t186, t183, t461, t229, t459, t185, t349 * t122 + t351 * t130 + t173, t349 * t123 + t351 * t143 + t218, t349 * t121 + t351 * t129 + t465, qJ(1) * t119 + t349 * t113 + t351 * t114; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t327, t328, 0, 0, 0, 0, 0, 0, 0, 0, t416, -t348 * t321, t237, pkin(1) * t321 + qJ(2) * t237, 0, 0, t420, 0, -t312, -t350 * qJDD(3), -pkin(1) * t324 + t348 * t255 - t350 * t377, pkin(1) * t323 + t348 * t256 - t350 * t376, t348 * t203, qJ(2) * t181 - (-pkin(2) * t350 - pkin(5) * t348 - pkin(1)) * t203, t224, -t447, t219, t223, -t446, t282, t348 * t151 + t350 * t172 + t396, t348 * t152 + t350 * t171 - t462, t350 * t158 + t348 * t163 + t395, -pkin(1) * t159 + qJ(2) * t138 + t348 * t126 + t350 * t134, t224, t219, t447, t282, t446, t223, t348 * t140 + t350 * t154 + t396, t350 * t147 + t348 * t148 + t395, t348 * t139 + t350 * t155 + t462, -pkin(1) * t144 + qJ(2) * t128 + t348 * t116 + t350 * t120;];
tauB_reg = t1;
