% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPPR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:28
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPPR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR4_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR4_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPPR4_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:28:02
% EndTime: 2019-12-31 19:28:04
% DurationCPUTime: 1.45s
% Computational Cost: add. (3983->161), mult. (4958->163), div. (0->0), fcn. (2514->8), ass. (0->89)
t878 = sin(qJ(2));
t881 = cos(qJ(2));
t869 = qJDD(1) + qJDD(2);
t875 = sin(pkin(8));
t876 = cos(pkin(8));
t870 = (qJD(1) + qJD(2));
t895 = t870 ^ 2;
t887 = t876 * t869 + t875 * t895;
t890 = t875 * t869 - t876 * t895;
t819 = t878 * t887 - t881 * t890;
t879 = sin(qJ(1));
t882 = cos(qJ(1));
t896 = t878 * t890 + t881 * t887;
t901 = -t879 * t819 + t882 * t896;
t900 = t882 * t819 + t879 * t896;
t844 = t878 * t869 + t881 * t895;
t847 = -t881 * t869 + t878 * t895;
t888 = t882 * t844 - t879 * t847;
t897 = t879 * t844 + t882 * t847;
t877 = sin(qJ(5));
t894 = t877 * t869;
t880 = cos(qJ(5));
t893 = t880 * t869;
t858 = -t882 * g(1) - t879 * g(2);
t884 = qJD(1) ^ 2;
t849 = -t884 * pkin(1) + t858;
t857 = t879 * g(1) - t882 * g(2);
t886 = qJDD(1) * pkin(1) + t857;
t828 = t881 * t849 + t878 * t886;
t889 = t869 * qJ(3) + (2 * qJD(3) * t870) + t828;
t810 = (-pkin(2) - pkin(3)) * t895 + t889;
t827 = -t878 * t849 + t881 * t886;
t818 = -t869 * pkin(2) - qJ(3) * t895 + qJDD(3) - t827;
t885 = -t869 * pkin(3) + t818;
t802 = t876 * t810 + t875 * t885;
t872 = t877 ^ 2;
t873 = t880 ^ 2;
t892 = t872 + t873;
t891 = qJD(5) * t870;
t801 = -t875 * t810 + t876 * t885;
t883 = qJD(5) ^ 2;
t874 = g(3) + qJDD(4);
t856 = t880 * t895 * t877;
t855 = -t873 * t895 - t883;
t854 = -t872 * t895 - t883;
t853 = -t879 * qJDD(1) - t882 * t884;
t852 = t882 * qJDD(1) - t879 * t884;
t851 = -qJDD(5) + t856;
t850 = qJDD(5) + t856;
t848 = t892 * t895;
t843 = t892 * t869;
t835 = 0.2e1 * t877 * t891 - t893;
t834 = -0.2e1 * t880 * t891 - t894;
t832 = t880 * t851 - t877 * t854;
t831 = -t877 * t850 + t880 * t855;
t830 = t877 * t851 + t880 * t854;
t829 = t880 * t850 + t877 * t855;
t824 = -t876 * t843 - t875 * t848;
t823 = -t875 * t843 + t876 * t848;
t817 = -pkin(2) * t895 + t889;
t816 = t876 * t832 + t875 * t834;
t815 = t876 * t831 - t875 * t835;
t814 = t875 * t832 - t876 * t834;
t813 = t875 * t831 + t876 * t835;
t808 = -t878 * t827 + t881 * t828;
t807 = t881 * t827 + t878 * t828;
t806 = t878 * t823 + t881 * t824;
t805 = -t881 * t823 + t878 * t824;
t804 = t881 * t817 + t878 * t818;
t803 = t878 * t817 - t881 * t818;
t800 = t878 * t814 + t881 * t816;
t799 = t878 * t813 + t881 * t815;
t798 = -t881 * t814 + t878 * t816;
t797 = -t881 * t813 + t878 * t815;
t796 = -pkin(4) * t895 - t869 * pkin(7) + t802;
t795 = t869 * pkin(4) - pkin(7) * t895 - t801;
t794 = t880 * t796 + t877 * t874;
t793 = -t877 * t796 + t880 * t874;
t792 = -t875 * t801 + t876 * t802;
t791 = t876 * t801 + t875 * t802;
t790 = -t877 * t793 + t880 * t794;
t789 = t880 * t793 + t877 * t794;
t788 = t876 * t790 + t875 * t795;
t787 = t875 * t790 - t876 * t795;
t786 = t878 * t791 + t881 * t792;
t785 = -t881 * t791 + t878 * t792;
t784 = t878 * t787 + t881 * t788;
t783 = -t881 * t787 + t878 * t788;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t853, -t852, 0, -t879 * t857 + t882 * t858, 0, 0, 0, 0, 0, 0, -t888, t897, 0, -t879 * t807 + t882 * t808, 0, 0, 0, 0, 0, 0, -t888, 0, -t897, -t879 * t803 + t882 * t804, 0, 0, 0, 0, 0, 0, -t900, t901, 0, -t879 * t785 + t882 * t786, 0, 0, 0, 0, 0, 0, -t879 * t797 + t882 * t799, -t879 * t798 + t882 * t800, -t879 * t805 + t882 * t806, -t879 * t783 + t882 * t784; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t852, t853, 0, t882 * t857 + t879 * t858, 0, 0, 0, 0, 0, 0, -t897, -t888, 0, t882 * t807 + t879 * t808, 0, 0, 0, 0, 0, 0, -t897, 0, t888, t882 * t803 + t879 * t804, 0, 0, 0, 0, 0, 0, t901, t900, 0, t882 * t785 + t879 * t786, 0, 0, 0, 0, 0, 0, t882 * t797 + t879 * t799, t882 * t798 + t879 * t800, t882 * t805 + t879 * t806, t882 * t783 + t879 * t784; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t874, 0, 0, 0, 0, 0, 0, -t829, -t830, 0, -t789; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t884, -qJDD(1), 0, t858, 0, 0, 0, 0, 0, 0, -t844, t847, 0, t808, 0, 0, 0, 0, 0, 0, -t844, 0, -t847, t804, 0, 0, 0, 0, 0, 0, -t819, t896, 0, t786, 0, 0, 0, 0, 0, 0, t799, t800, t806, t784; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t884, 0, t857, 0, 0, 0, 0, 0, 0, -t847, -t844, 0, t807, 0, 0, 0, 0, 0, 0, -t847, 0, t844, t803, 0, 0, 0, 0, 0, 0, t896, t819, 0, t785, 0, 0, 0, 0, 0, 0, t797, t798, t805, t783; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t874, 0, 0, 0, 0, 0, 0, -t829, -t830, 0, -t789; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t895, -t869, 0, t828, 0, 0, 0, 0, 0, 0, -t895, 0, t869, t817, 0, 0, 0, 0, 0, 0, t890, t887, 0, t792, 0, 0, 0, 0, 0, 0, t815, t816, t824, t788; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t869, -t895, 0, t827, 0, 0, 0, 0, 0, 0, t869, 0, t895, -t818, 0, 0, 0, 0, 0, 0, t887, -t890, 0, -t791, 0, 0, 0, 0, 0, 0, -t813, -t814, -t823, -t787; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t874, 0, 0, 0, 0, 0, 0, -t829, -t830, 0, -t789; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t895, 0, t869, t817, 0, 0, 0, 0, 0, 0, t890, t887, 0, t792, 0, 0, 0, 0, 0, 0, t815, t816, t824, t788; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t874, 0, 0, 0, 0, 0, 0, -t829, -t830, 0, -t789; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t869, 0, -t895, t818, 0, 0, 0, 0, 0, 0, -t887, t890, 0, t791, 0, 0, 0, 0, 0, 0, t813, t814, t823, t787; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t895, t869, 0, t802, 0, 0, 0, 0, 0, 0, t831, t832, -t843, t790; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t869, -t895, 0, t801, 0, 0, 0, 0, 0, 0, t835, -t834, t848, -t795; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t874, 0, 0, 0, 0, 0, 0, t829, t830, 0, t789; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t855, t851, -t893, t794; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t850, t854, t894, t793; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t835, t834, -t848, t795;];
f_new_reg = t1;
