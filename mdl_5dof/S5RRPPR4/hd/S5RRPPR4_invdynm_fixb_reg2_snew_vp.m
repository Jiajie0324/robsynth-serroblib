% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPPR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:28
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPPR4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR4_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR4_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR4_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPPR4_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:27:56
% EndTime: 2019-12-31 19:28:02
% DurationCPUTime: 6.05s
% Computational Cost: add. (22162->392), mult. (27594->458), div. (0->0), fcn. (13572->8), ass. (0->244)
t659 = qJDD(1) + qJDD(2);
t665 = sin(pkin(8));
t666 = cos(pkin(8));
t660 = (qJD(1) + qJD(2));
t747 = t660 ^ 2;
t614 = -t659 * t665 + t666 * t747;
t668 = sin(qJ(2));
t671 = cos(qJ(2));
t699 = t659 * t666 + t665 * t747;
t562 = t614 * t668 - t671 * t699;
t664 = g(3) + qJDD(4);
t590 = qJ(4) * t614 + t664 * t666;
t750 = qJ(4) * t699 + t664 * t665;
t504 = pkin(6) * t562 - t590 * t668 + t671 * t750;
t669 = sin(qJ(1));
t672 = cos(qJ(1));
t560 = t614 * t671 + t668 * t699;
t761 = t560 * t669 + t562 * t672;
t774 = -pkin(6) * t560 + t590 * t671 + t668 * t750;
t782 = pkin(5) * t761 + t504 * t672 - t669 * t774;
t775 = t560 * t672 - t562 * t669;
t781 = -pkin(5) * t775 + t504 * t669 + t672 * t774;
t640 = g(1) * t672 + g(2) * t669;
t675 = qJD(1) ^ 2;
t626 = -pkin(1) * t675 - t640;
t639 = g(1) * t669 - g(2) * t672;
t696 = qJDD(1) * pkin(1) + t639;
t573 = t626 * t671 + t668 * t696;
t720 = (2 * qJD(3) * t660) + t573;
t727 = t659 * qJ(3);
t697 = t720 + t727;
t746 = pkin(2) + pkin(3);
t533 = -t746 * t747 + t697;
t650 = t659 * pkin(2);
t572 = t626 * t668 - t671 * t696;
t703 = -qJDD(3) - t572;
t550 = -qJ(3) * t747 - t650 - t703;
t682 = -pkin(3) * t659 + t550;
t492 = t533 * t665 - t666 * t682;
t493 = t533 * t666 + t665 * t682;
t468 = t492 * t666 - t493 * t665;
t702 = t492 * t665 + t493 * t666;
t442 = t468 * t668 - t671 * t702;
t764 = t468 * t671 + t668 * t702;
t777 = -t442 * t669 + t672 * t764;
t776 = t442 * t672 + t669 * t764;
t619 = t659 * t668 + t671 * t747;
t622 = -t659 * t671 + t668 * t747;
t567 = t619 * t672 - t622 * t669;
t593 = pkin(6) * t622 - g(3) * t668;
t596 = pkin(6) * t619 - g(3) * t671;
t773 = pkin(5) * t567 - t669 * t593 + t672 * t596;
t712 = t619 * t669 + t622 * t672;
t772 = pkin(5) * t712 + t672 * t593 + t669 * t596;
t715 = t572 * t668 + t573 * t671;
t520 = t572 * t671 - t573 * t668;
t735 = t520 * t672;
t769 = -t669 * t715 + t735;
t736 = t520 * t669;
t768 = t672 * t715 + t736;
t767 = pkin(1) * t619;
t542 = -pkin(2) * t747 + t697;
t495 = t542 * t668 - t550 * t671;
t716 = t542 * t671 + t550 * t668;
t763 = -t495 * t669 + t672 * t716;
t762 = t495 * t672 + t669 * t716;
t745 = pkin(3) * t468;
t485 = -pkin(4) * t747 - pkin(7) * t659 + t493;
t667 = sin(qJ(5));
t670 = cos(qJ(5));
t480 = t485 * t667 - t664 * t670;
t481 = t485 * t670 + t664 * t667;
t460 = t480 * t670 - t481 * t667;
t744 = pkin(4) * t460;
t743 = pkin(7) * t666;
t461 = t480 * t667 + t481 * t670;
t484 = pkin(4) * t659 - pkin(7) * t747 + t492;
t455 = t461 * t666 + t484 * t665;
t741 = qJ(4) * t455;
t740 = qJ(4) * t468;
t739 = qJ(4) * t702;
t738 = t484 * t667;
t737 = t484 * t670;
t638 = t670 * t747 * t667;
t627 = qJDD(5) + t638;
t732 = t627 * t667;
t731 = t627 * t670;
t628 = qJDD(5) - t638;
t730 = t628 * t667;
t729 = t628 * t670;
t662 = t667 ^ 2;
t728 = t747 * t662;
t724 = t667 * t659;
t644 = t670 * t659;
t723 = -pkin(2) * t550 + qJ(3) * t542;
t663 = t670 ^ 2;
t722 = -t662 - t663;
t721 = qJD(5) * t660;
t719 = t667 * t721;
t642 = t670 * t721;
t454 = t461 * t665 - t484 * t666;
t717 = -qJ(4) * t454 - t665 * t744;
t711 = -t639 * t669 - t640 * t672;
t710 = t665 * t638;
t709 = t666 * t638;
t708 = 0.2e1 * t727 + t720;
t707 = pkin(2) * t468 + qJ(3) * t702 + t745;
t706 = pkin(3) * t614 + t493;
t705 = -pkin(4) * t484 + pkin(7) * t461;
t631 = qJDD(1) * t672 - t669 * t675;
t704 = -pkin(5) * t631 - g(3) * t669;
t700 = t639 * t672 - t640 * t669;
t698 = -pkin(4) * t666 - pkin(7) * t665 - pkin(3);
t695 = pkin(3) * t699 + t492;
t694 = 0.2e1 * t650 + t703;
t645 = t663 * t747;
t674 = qJD(5) ^ 2;
t637 = -t645 - t674;
t577 = t637 * t667 + t731;
t473 = -pkin(4) * t577 + t480;
t477 = -pkin(7) * t577 + t738;
t581 = t637 * t670 - t732;
t610 = -t644 + 0.2e1 * t719;
t536 = t581 * t665 + t610 * t666;
t693 = -qJ(4) * t536 - t473 * t665 + t477 * t666;
t635 = -t674 - t728;
t579 = t635 * t670 - t730;
t474 = -pkin(4) * t579 + t481;
t478 = -pkin(7) * t579 + t737;
t583 = -t635 * t667 - t729;
t607 = -0.2e1 * t642 - t724;
t537 = t583 * t665 - t607 * t666;
t692 = -qJ(4) * t537 - t474 * t665 + t478 * t666;
t691 = pkin(2) * t614 + qJ(3) * t699 + t706;
t690 = -pkin(3) * t454 - t705;
t689 = pkin(4) * t610 + pkin(7) * t581 - t737;
t688 = -pkin(4) * t607 + pkin(7) * t583 + t738;
t538 = t581 * t666 - t610 * t665;
t687 = -qJ(4) * t538 - t473 * t666 - t477 * t665;
t539 = t583 * t666 + t607 * t665;
t686 = -qJ(4) * t539 - t474 * t666 - t478 * t665;
t685 = pkin(2) * t699 - qJ(3) * t614 + t695;
t618 = t722 * t659;
t623 = t645 + t728;
t684 = pkin(4) * t623 + pkin(7) * t618 + t461;
t683 = -pkin(2) * t454 + qJ(3) * t455 + t690;
t681 = -pkin(3) * t536 - t689;
t680 = -pkin(3) * t537 - t688;
t565 = t618 * t665 + t623 * t666;
t679 = -pkin(3) * t565 - t684;
t678 = -pkin(2) * t536 + qJ(3) * t538 + t681;
t677 = -pkin(2) * t537 + qJ(3) * t539 + t680;
t566 = t618 * t666 - t623 * t665;
t676 = -pkin(2) * t565 + qJ(3) * t566 + t679;
t673 = pkin(1) * g(3);
t636 = t645 - t674;
t634 = t674 - t728;
t630 = qJDD(1) * t669 + t672 * t675;
t629 = t667 * t642;
t624 = -t645 + t728;
t609 = -t644 + t719;
t608 = -t642 - t724;
t606 = pkin(1) * t622;
t605 = -pkin(5) * t630 + g(3) * t672;
t602 = t722 * t721;
t587 = qJDD(5) * t665 + t602 * t666;
t586 = -qJDD(5) * t666 + t602 * t665;
t585 = t608 * t670 + t662 * t721;
t584 = -t609 * t667 + t663 * t721;
t582 = -t634 * t667 + t731;
t580 = t636 * t670 - t730;
t578 = t634 * t670 + t732;
t576 = t636 * t667 + t729;
t575 = t609 * t670 + t629;
t574 = -t608 * t667 + t629;
t556 = -t607 * t667 + t610 * t670;
t555 = t607 * t670 + t610 * t667;
t554 = t582 * t666 - t665 * t724;
t553 = t580 * t666 - t644 * t665;
t552 = t582 * t665 + t666 * t724;
t551 = t580 * t665 + t644 * t666;
t549 = t585 * t666 - t710;
t548 = t584 * t666 + t710;
t547 = t585 * t665 + t709;
t546 = t584 * t665 - t709;
t544 = -t572 - t606;
t543 = -t573 - t767;
t528 = -t606 + t694;
t526 = t708 + t767;
t525 = t586 * t668 + t587 * t671;
t524 = -t586 * t671 + t587 * t668;
t523 = t556 * t666 + t624 * t665;
t522 = t556 * t665 - t624 * t666;
t517 = pkin(1) * t520;
t516 = pkin(6) * t715 + t673;
t515 = t565 * t668 + t566 * t671;
t514 = -t565 * t671 + t566 * t668;
t509 = t552 * t668 + t554 * t671;
t508 = t551 * t668 + t553 * t671;
t507 = -t552 * t671 + t554 * t668;
t506 = -t551 * t671 + t553 * t668;
t501 = t547 * t668 + t549 * t671;
t500 = t546 * t668 + t548 * t671;
t499 = -t547 * t671 + t549 * t668;
t498 = -t546 * t671 + t548 * t668;
t491 = -pkin(6) * t495 + (-pkin(2) * t668 + qJ(3) * t671) * g(3);
t490 = t537 * t668 + t539 * t671;
t489 = t536 * t668 + t538 * t671;
t488 = -t537 * t671 + t539 * t668;
t487 = -t536 * t671 + t538 * t668;
t486 = pkin(6) * t716 + t673 + (pkin(2) * t671 + qJ(3) * t668) * g(3);
t483 = t522 * t668 + t523 * t671;
t482 = -t522 * t671 + t523 * t668;
t472 = pkin(1) * t495 + t723;
t471 = -pkin(1) * t562 + t685;
t470 = pkin(1) * t560 + t691;
t463 = qJ(3) * t664 + t740;
t462 = t664 * t746 - t739;
t457 = -qJ(4) * t565 + t460 * t666;
t456 = qJ(4) * t566 + t460 * t665;
t451 = qJ(3) * t579 + t692;
t450 = qJ(3) * t577 + t693;
t449 = t579 * t746 + t686;
t448 = t577 * t746 + t687;
t447 = pkin(1) * t488 + t677;
t446 = pkin(1) * t487 + t678;
t441 = pkin(1) * t514 + t676;
t440 = -pkin(6) * t514 + t456 * t668 + t457 * t671;
t439 = pkin(6) * t515 - t456 * t671 + t457 * t668;
t438 = t454 * t668 + t455 * t671;
t437 = -t454 * t671 + t455 * t668;
t436 = -pkin(6) * t764 - t462 * t668 + t463 * t671;
t435 = pkin(1) * t664 - pkin(6) * t442 + t462 * t671 + t463 * t668;
t434 = -pkin(6) * t488 - t449 * t668 + t451 * t671;
t433 = -pkin(6) * t487 - t448 * t668 + t450 * t671;
t432 = pkin(1) * t579 + pkin(6) * t490 + t449 * t671 + t451 * t668;
t431 = pkin(1) * t577 + pkin(6) * t489 + t448 * t671 + t450 * t668;
t430 = pkin(1) * t764 + t707;
t429 = -(qJ(3) - t743) * t460 + t717;
t428 = -t741 - (pkin(2) - t698) * t460;
t427 = pkin(1) * t437 + t683;
t426 = -pkin(6) * t437 - t428 * t668 + t429 * t671;
t425 = -pkin(1) * t460 + pkin(6) * t438 + t428 * t671 + t429 * t668;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t631, 0, -t630, 0, t704, -t605, -t700, -pkin(5) * t700, 0, 0, -t712, 0, -t567, 0, t772, t773, t769, pkin(5) * t769 + pkin(6) * t735 - t669 * t516, 0, -t712, 0, 0, t567, 0, t772, -t762, -t773, -pkin(5) * t762 - t669 * t486 + t672 * t491, 0, 0, t761, 0, -t775, 0, t782, t781, t777, -pkin(5) * t777 - t669 * t435 + t672 * t436, -t499 * t669 + t501 * t672, -t482 * t669 + t483 * t672, -t507 * t669 + t509 * t672, -t498 * t669 + t500 * t672, -t506 * t669 + t508 * t672, -t524 * t669 + t525 * t672, t672 * t433 - t669 * t431 - pkin(5) * (t487 * t672 + t489 * t669), t672 * t434 - t669 * t432 - pkin(5) * (t488 * t672 + t490 * t669), t672 * t440 - t669 * t439 - pkin(5) * (t514 * t672 + t515 * t669), t672 * t426 - t669 * t425 - pkin(5) * (t437 * t672 + t438 * t669); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t630, 0, t631, 0, t605, t704, t711, pkin(5) * t711, 0, 0, t567, 0, -t712, 0, -t773, t772, t768, pkin(5) * t768 + pkin(6) * t736 + t672 * t516, 0, t567, 0, 0, t712, 0, -t773, t763, -t772, pkin(5) * t763 + t672 * t486 + t669 * t491, 0, 0, -t775, 0, -t761, 0, t781, -t782, t776, -pkin(5) * t776 + t672 * t435 + t669 * t436, t499 * t672 + t501 * t669, t482 * t672 + t483 * t669, t507 * t672 + t509 * t669, t498 * t672 + t500 * t669, t506 * t672 + t508 * t669, t524 * t672 + t525 * t669, t669 * t433 + t672 * t431 + pkin(5) * (-t487 * t669 + t489 * t672), t669 * t434 + t672 * t432 + pkin(5) * (-t488 * t669 + t490 * t672), t669 * t440 + t672 * t439 + pkin(5) * (-t514 * t669 + t515 * t672), t669 * t426 + t672 * t425 + pkin(5) * (-t437 * t669 + t438 * t672); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t639, t640, 0, 0, 0, 0, 0, 0, 0, t659, t544, t543, 0, -t517, 0, 0, 0, t659, 0, 0, t528, 0, t526, t472, 0, 0, 0, 0, 0, t659, t471, t470, 0, t430, t574, -t555, -t578, -t575, -t576, 0, t446, t447, t441, t427; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t675, 0, 0, -g(3), -t639, 0, 0, 0, -t622, 0, -t619, 0, t593, t596, t520, pkin(6) * t520, 0, -t622, 0, 0, t619, 0, t593, -t495, -t596, t491, 0, 0, t562, 0, -t560, 0, t504, t774, t764, t436, t501, t483, t509, t500, t508, t525, t433, t434, t440, t426; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t675, 0, qJDD(1), 0, g(3), 0, -t640, 0, 0, 0, t619, 0, -t622, 0, -t596, t593, t715, t516, 0, t619, 0, 0, t622, 0, -t596, t716, -t593, t486, 0, 0, -t560, 0, -t562, 0, t774, -t504, t442, t435, t499, t482, t507, t498, t506, t524, t431, t432, t439, t425; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t639, t640, 0, 0, 0, 0, 0, 0, 0, t659, t544, t543, 0, -t517, 0, 0, 0, t659, 0, 0, t528, 0, t526, t472, 0, 0, 0, 0, 0, t659, t471, t470, 0, t430, t574, -t555, -t578, -t575, -t576, 0, t446, t447, t441, t427; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t659, 0, -t747, 0, 0, -g(3), t572, 0, 0, t659, 0, 0, t747, 0, 0, t550, g(3), qJ(3) * g(3), 0, 0, -t699, 0, -t614, 0, t750, t590, t468, t463, t549, t523, t554, t548, t553, t587, t450, t451, t457, t429; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t747, 0, t659, 0, g(3), 0, t573, 0, 0, t747, 0, 0, -t659, 0, g(3), t542, 0, pkin(2) * g(3), 0, 0, -t614, 0, t699, 0, t590, -t750, -t702, t462, -t547, -t522, -t552, -t546, -t551, -t586, t448, t449, -t456, t428; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t659, -t572, -t573, 0, 0, 0, 0, 0, t659, 0, 0, t694, 0, t708, t723, 0, 0, 0, 0, 0, t659, t685, t691, 0, t707, t574, -t555, -t578, -t575, -t576, 0, t678, t677, t676, t683; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t659, 0, 0, t747, 0, 0, t550, g(3), 0, 0, 0, -t699, 0, -t614, 0, t750, t590, t468, t740, t549, t523, t554, t548, t553, t587, t693, t692, t457, t460 * t743 + t717; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t659, 0, 0, -t550, 0, t542, 0, 0, 0, 0, 0, 0, t659, t695, t706, 0, t745, t574, -t555, -t578, -t575, -t576, 0, t681, t680, t679, t690; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t747, 0, 0, t659, 0, -g(3), -t542, 0, 0, 0, 0, t614, 0, -t699, 0, -t590, t750, t702, -pkin(3) * t664 + t739, t547, t522, t552, t546, t551, t586, -pkin(3) * t577 - t687, -pkin(3) * t579 - t686, t456, -t460 * t698 + t741; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t659, 0, -t747, 0, 0, t664, t492, 0, t585, t556, t582, t584, t580, t602, t477, t478, t460, pkin(7) * t460; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t747, 0, -t659, 0, -t664, 0, t493, 0, t638, -t624, t724, -t638, t644, -qJDD(5), t473, t474, 0, t744; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t659, -t492, -t493, 0, 0, -t574, t555, t578, t575, t576, 0, t689, t688, t684, t705; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t608, t610, t627, t642, t636, -t642, 0, t484, t480, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t719, t607, t634, t609, t628, t719, -t484, 0, t481, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t638, t624, -t724, t638, -t644, qJDD(5), -t480, -t481, 0, 0;];
m_new_reg = t1;
