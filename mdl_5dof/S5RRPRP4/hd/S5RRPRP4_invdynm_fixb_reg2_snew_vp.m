% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPRP4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:53
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPRP4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRP4_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRP4_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRP4_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRP4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RRPRP4_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:53:04
% EndTime: 2019-12-31 19:53:09
% DurationCPUTime: 5.78s
% Computational Cost: add. (13228->427), mult. (17675->423), div. (0->0), fcn. (8695->6), ass. (0->284)
t726 = qJD(4) ^ 2;
t713 = qJD(1) + qJD(2);
t711 = t713 ^ 2;
t722 = cos(qJ(4));
t717 = t722 ^ 2;
t816 = t717 * t711;
t692 = t726 + t816;
t719 = sin(qJ(4));
t694 = t719 * t711 * t722;
t684 = qJDD(4) + t694;
t810 = t719 * t684;
t631 = t722 * t692 + t810;
t784 = qJD(4) * t713;
t700 = t719 * t784;
t712 = qJDD(1) + qJDD(2);
t797 = t722 * t712;
t670 = -0.2e1 * t700 + t797;
t720 = sin(qJ(2));
t723 = cos(qJ(2));
t579 = t723 * t631 + t720 * t670;
t583 = t720 * t631 - t723 * t670;
t721 = sin(qJ(1));
t724 = cos(qJ(1));
t881 = pkin(5) * (t721 * t579 + t724 * t583);
t880 = pkin(5) * (t724 * t579 - t721 * t583);
t879 = pkin(1) * t579;
t878 = pkin(6) * t579;
t799 = t722 * t684;
t637 = -t719 * t692 + t799;
t877 = -pkin(1) * t637 + pkin(6) * t583;
t776 = t722 * t784;
t808 = t719 * t712;
t667 = 0.2e1 * t776 + t808;
t812 = t719 * t667;
t601 = -t722 * t670 + t812;
t716 = t719 ^ 2;
t678 = (-t716 + t717) * t711;
t561 = t723 * t601 + t720 * t678;
t564 = t720 * t601 - t723 * t678;
t876 = t724 * t561 - t721 * t564;
t875 = t721 * t561 + t724 * t564;
t817 = t716 * t711;
t690 = -t726 + t817;
t628 = t719 * t690 + t799;
t804 = t720 * t712;
t595 = t723 * t628 + t719 * t804;
t793 = t723 * t712;
t599 = t720 * t628 - t719 * t793;
t872 = t724 * t595 - t721 * t599;
t871 = t721 * t595 + t724 * t599;
t673 = t723 * t711 + t804;
t675 = t720 * t711 - t793;
t609 = t724 * t673 - t721 * t675;
t773 = pkin(6) * t673 - t723 * g(3);
t854 = -pkin(6) * t675 + t720 * g(3);
t856 = pkin(5) * t609 + t721 * t854 + t724 * t773;
t769 = t721 * t673 + t724 * t675;
t839 = pkin(5) * t769 + t721 * t773 - t724 * t854;
t695 = t721 * g(1) - t724 * g(2);
t682 = qJDD(1) * pkin(1) + t695;
t696 = t724 * g(1) + t721 * g(2);
t727 = qJD(1) ^ 2;
t683 = -t727 * pkin(1) - t696;
t619 = -t723 * t682 + t720 * t683;
t620 = t720 * t682 + t723 * t683;
t770 = t720 * t619 + t723 * t620;
t559 = t723 * t619 - t720 * t620;
t803 = t721 * t559;
t868 = t724 * t770 + t803;
t792 = t724 * t559;
t867 = -t721 * t770 + t792;
t865 = pkin(1) * t673;
t864 = pkin(1) * t675;
t863 = pkin(3) * t631;
t862 = pkin(7) * t631;
t861 = pkin(7) * t637;
t860 = qJ(3) * t637;
t838 = -pkin(7) - pkin(2);
t859 = t838 * t637;
t858 = pkin(4) * t719 - qJ(5) * t722;
t857 = -pkin(2) * t631 - qJ(3) * t670;
t818 = t712 * qJ(3);
t740 = -t711 * pkin(2) + t620 + t818;
t785 = (qJD(3) * t713);
t781 = 2 * t785;
t586 = t740 + t781;
t824 = t712 * pkin(2);
t750 = qJDD(3) + t619 - t824;
t594 = -t711 * qJ(3) + t750;
t540 = t720 * t586 - t723 * t594;
t771 = t723 * t586 + t720 * t594;
t853 = -t721 * t540 + t724 * t771;
t852 = t724 * t540 + t721 * t771;
t668 = t776 + t808;
t669 = -t700 + t797;
t706 = t711 * pkin(7);
t734 = t668 * pkin(4) - t669 * qJ(5) - t706 + t740;
t832 = pkin(4) * t722;
t758 = qJ(5) * t719 + t832;
t783 = qJD(5) * t722;
t531 = (t758 * qJD(4) + (2 * qJD(3)) - 0.2e1 * t783) * t713 + t734;
t847 = (pkin(3) + t758) * t531;
t846 = t758 * t712;
t737 = -t712 * pkin(7) + t594;
t570 = t719 * g(3) + t722 * t737;
t571 = t722 * g(3) - t719 * t737;
t525 = t722 * t570 - t719 * t571;
t691 = -t726 - t817;
t685 = qJDD(4) - t694;
t798 = t722 * t685;
t629 = t719 * t691 + t798;
t845 = -pkin(2) * t629 + qJ(3) * t667;
t786 = t716 + t717;
t672 = t786 * t712;
t677 = t786 * t711;
t844 = pkin(2) * t672 - qJ(3) * t677;
t732 = 0.2e1 * t713 * t783 - t734 - (2 * t785);
t522 = -pkin(4) * t776 + (t670 - t700) * qJ(5) + t732;
t843 = (pkin(3) + t832) * t670 + t719 * t522;
t809 = t719 * t685;
t635 = t722 * t691 - t809;
t837 = pkin(2) * t635;
t836 = pkin(3) * t525;
t576 = t586 - t706;
t835 = pkin(3) * t576;
t834 = pkin(3) * t677;
t578 = -t723 * t629 + t720 * t667;
t581 = t720 * t629 + t723 * t667;
t831 = pkin(5) * (t724 * t578 + t721 * t581);
t795 = t723 * t672;
t607 = -t720 * t677 + t795;
t806 = t720 * t672;
t612 = -t723 * t677 - t806;
t830 = pkin(5) * (t724 * t607 + t721 * t612);
t829 = pkin(6) * t578;
t828 = pkin(6) * t607;
t827 = pkin(7) * t525;
t826 = pkin(7) * t629;
t825 = pkin(7) * t672;
t822 = qJ(3) * t635;
t819 = t858 * t711;
t813 = t719 * t576;
t811 = t719 * t670;
t572 = t722 * t576;
t800 = t722 * t667;
t745 = qJDD(4) * qJ(5) - t719 * t819 - t571;
t736 = t726 * pkin(4) - t745;
t782 = qJD(5) * qJD(4);
t780 = -0.2e1 * t782;
t550 = t736 + t780;
t552 = qJDD(4) * pkin(4) + t726 * qJ(5) - t722 * t819 - qJDD(5) + t570;
t789 = pkin(4) * t552 - qJ(5) * t550;
t788 = -pkin(2) * t594 + qJ(3) * t586;
t787 = pkin(3) * t667 - pkin(7) * t635;
t775 = -pkin(1) * t635 + pkin(6) * t581;
t772 = t572 + t862;
t767 = -t721 * t695 - t724 * t696;
t766 = t720 * t694;
t765 = t723 * t694;
t512 = -t719 * t550 + t722 * t552;
t764 = -pkin(3) * t512 - t789;
t763 = -pkin(4) * t811 + t722 * t522 - t862;
t762 = -pkin(2) * t525 + qJ(3) * t576 - t827;
t689 = t724 * qJDD(1) - t721 * t727;
t761 = -pkin(5) * t689 - t721 * g(3);
t760 = -t787 - t572;
t759 = pkin(3) * t670 - t813;
t757 = t813 - t826;
t526 = -t719 * t570 - t722 * t571;
t603 = t800 + t811;
t636 = -t722 * t690 + t810;
t756 = t724 * t695 - t721 * t696;
t755 = t772 - t857;
t753 = -t571 + t863;
t708 = 0.2e1 * t782;
t537 = t708 + (t677 - t726) * pkin(4) + t745;
t538 = qJ(5) * t677 - t552;
t752 = -t719 * t537 + t722 * t538 + t825;
t751 = t825 - t525;
t749 = t763 + t857;
t748 = -pkin(7) * t512 + t858 * t531;
t747 = t757 + t845;
t746 = -t824 + t750;
t744 = t752 + t844;
t743 = t751 + t844;
t523 = -qJ(5) * t700 + (-t667 - t776) * pkin(4) + t732;
t742 = -qJ(5) * t812 + t722 * t523 - t787;
t741 = -qJ(5) * t800 - t719 * t523 - t826;
t739 = t620 + 0.2e1 * t818 + t781;
t738 = -pkin(2) * t512 + qJ(3) * t531 + t748;
t735 = t741 + t845;
t733 = pkin(4) * t692 + qJ(5) * t684 - t736;
t731 = -t733 - t863;
t624 = pkin(3) * t629;
t730 = t624 + t570;
t729 = pkin(4) * t685 + qJ(5) * t691 + t552;
t728 = -t624 - t729;
t725 = pkin(1) * g(3);
t693 = -t726 + t816;
t688 = t721 * qJDD(1) + t724 * t727;
t662 = pkin(3) * t672;
t661 = -pkin(5) * t688 + t724 * g(3);
t660 = t786 * t784;
t643 = t723 * qJDD(4) - t720 * t660;
t642 = t720 * qJDD(4) + t723 * t660;
t641 = t719 * t669 + t717 * t784;
t640 = -t722 * t668 + t716 * t784;
t638 = t719 * t693 + t798;
t632 = -t722 * t693 + t809;
t622 = (t669 - t700) * t722;
t621 = (t668 + t776) * t719;
t618 = t662 + t846;
t606 = pkin(1) * t607;
t605 = pkin(6) * t612;
t600 = t720 * t632 + t722 * t793;
t597 = -t723 * t632 + t720 * t797;
t593 = t720 * t640 - t765;
t592 = t720 * t641 + t765;
t591 = -t723 * t640 - t766;
t590 = -t723 * t641 + t766;
t588 = -t619 - t864;
t587 = -t620 - t865;
t575 = pkin(1) * t578;
t569 = t739 + t865;
t568 = -t721 * t642 + t724 * t643;
t567 = t724 * t642 + t721 * t643;
t566 = t746 + t864;
t556 = pkin(1) * t559;
t555 = pkin(6) * t770 + t725;
t553 = pkin(5) * (-t721 * t607 + t724 * t612);
t549 = -t721 * t597 + t724 * t600;
t548 = t724 * t597 + t721 * t600;
t546 = -t721 * t591 + t724 * t593;
t545 = -t721 * t590 + t724 * t592;
t544 = t724 * t591 + t721 * t593;
t543 = t724 * t590 + t721 * t592;
t534 = -pkin(6) * t540 + (-pkin(2) * t720 + qJ(3) * t723) * g(3);
t533 = pkin(5) * (-t721 * t578 + t724 * t581);
t532 = pkin(6) * t771 + t725 + (pkin(2) * t723 + qJ(3) * t720) * g(3);
t529 = -t753 + t860;
t528 = t730 - t822;
t521 = -t760 - t837;
t520 = t759 - t859;
t518 = t526 + t834;
t517 = -t728 - t822;
t516 = t708 - t731 - t860;
t515 = t720 * t525 + t723 * t576;
t514 = -t723 * t525 + t720 * t576;
t513 = -t722 * t550 - t719 * t552;
t510 = t755 + t879;
t509 = t575 + t747;
t508 = pkin(1) * t540 + t788;
t507 = -pkin(3) * t795 + t720 * t518 - t828;
t506 = -pkin(3) * t806 - t723 * t518 + t605;
t505 = t606 + t743;
t504 = t722 * t537 + t719 * t538 + t834;
t503 = -t843 + t859;
t502 = -t742 - t837;
t501 = -qJ(3) * t526 + t836;
t500 = t749 - t879;
t499 = t575 + t735;
t498 = t838 * t526 + t835;
t497 = t606 + t744;
t496 = t720 * t512 + t723 * t531;
t495 = -t723 * t512 + t720 * t531;
t494 = t720 * t504 - t723 * t618 - t828;
t493 = -t723 * t504 - t720 * t618 + t605;
t492 = -t720 * t520 + t723 * t529 - t878;
t491 = -t720 * t521 + t723 * t528 - t829;
t490 = t723 * t520 + t720 * t529 - t877;
t489 = t723 * t521 + t720 * t528 + t775;
t488 = -t720 * t502 + t723 * t517 - t829;
t487 = -t720 * t503 + t723 * t516 + t878;
t486 = pkin(1) * t514 + t762;
t485 = t723 * t502 + t720 * t517 + t775;
t484 = t723 * t503 + t720 * t516 + t877;
t483 = -qJ(3) * t513 - t764;
t482 = t838 * t513 + t847;
t481 = -pkin(6) * t514 - t720 * t498 + t723 * t501;
t480 = -pkin(1) * t526 + pkin(6) * t515 + t723 * t498 + t720 * t501;
t479 = pkin(1) * t495 + t738;
t478 = -pkin(6) * t495 - t720 * t482 + t723 * t483;
t477 = -pkin(1) * t513 + pkin(6) * t496 + t723 * t482 + t720 * t483;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t689, 0, -t688, 0, t761, -t661, -t756, -pkin(5) * t756, 0, 0, -t769, 0, -t609, 0, t839, t856, t867, pkin(5) * t867 + pkin(6) * t792 - t721 * t555, 0, t769, t609, 0, 0, 0, -t852, -t839, -t856, -pkin(5) * t852 - t721 * t532 + t724 * t534, t545, -t875, t549, t546, t871, t568, -t721 * t489 + t724 * t491 - t831, -t721 * t490 + t724 * t492 - t880, -t721 * t506 + t724 * t507 - t830, t724 * t481 - t721 * t480 - pkin(5) * (t724 * t514 + t721 * t515), t545, t549, t875, t568, -t871, t546, -t721 * t485 + t724 * t488 - t831, -t721 * t493 + t724 * t494 - t830, -t721 * t484 + t724 * t487 + t880, t724 * t478 - t721 * t477 - pkin(5) * (t724 * t495 + t721 * t496); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t688, 0, t689, 0, t661, t761, t767, pkin(5) * t767, 0, 0, t609, 0, -t769, 0, -t856, t839, t868, pkin(5) * t868 + pkin(6) * t803 + t724 * t555, 0, -t609, t769, 0, 0, 0, t853, t856, -t839, pkin(5) * t853 + t724 * t532 + t721 * t534, t543, t876, t548, t544, -t872, t567, t724 * t489 + t721 * t491 + t533, t724 * t490 + t721 * t492 - t881, t724 * t506 + t721 * t507 + t553, t721 * t481 + t724 * t480 + pkin(5) * (-t721 * t514 + t724 * t515), t543, t548, -t876, t567, t872, t544, t724 * t485 + t721 * t488 + t533, t724 * t493 + t721 * t494 + t553, t724 * t484 + t721 * t487 + t881, t721 * t478 + t724 * t477 + pkin(5) * (-t721 * t495 + t724 * t496); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t695, t696, 0, 0, 0, 0, 0, 0, 0, t712, t588, t587, 0, -t556, t712, 0, 0, 0, 0, 0, 0, t566, t569, t508, t622, -t603, t638, t621, -t636, 0, t509, t510, t505, t486, t622, t638, t603, 0, t636, t621, t499, t497, t500, t479; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t727, 0, 0, -g(3), -t695, 0, 0, 0, -t675, 0, -t673, 0, -t854, t773, t559, pkin(6) * t559, 0, t675, t673, 0, 0, 0, -t540, t854, -t773, t534, t592, -t564, t600, t593, t599, t643, t491, t492, t507, t481, t592, t600, t564, t643, -t599, t593, t488, t494, t487, t478; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t727, 0, qJDD(1), 0, g(3), 0, -t696, 0, 0, 0, t673, 0, -t675, 0, -t773, -t854, t770, t555, 0, -t673, t675, 0, 0, 0, t771, t773, t854, t532, t590, t561, t597, t591, -t595, t642, t489, t490, t506, t480, t590, t597, -t561, t642, t595, t591, t485, t493, t484, t477; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t695, t696, 0, 0, 0, 0, 0, 0, 0, t712, t588, t587, 0, -t556, t712, 0, 0, 0, 0, 0, 0, t566, t569, t508, t622, -t603, t638, t621, -t636, 0, t509, t510, t505, t486, t622, t638, t603, 0, t636, t621, t499, t497, t500, t479; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t712, 0, -t711, 0, 0, -g(3), t619, 0, 0, -t712, t711, 0, 0, 0, t594, 0, g(3), qJ(3) * g(3), t694, t678, t797, -t694, -t808, qJDD(4), t528, t529, -t662, t501, t694, t797, -t678, qJDD(4), t808, -t694, t517, -t618, t516, t483; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t711, 0, t712, 0, g(3), 0, t620, 0, 0, -t711, -t712, 0, 0, 0, t586, -g(3), 0, pkin(2) * g(3), -t641, t601, -t632, -t640, -t628, t660, t521, t520, -t518, t498, -t641, -t632, -t601, t660, t628, -t640, t502, -t504, t503, t482; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t712, -t619, -t620, 0, 0, t712, 0, 0, 0, 0, 0, 0, t746, t739, t788, t622, -t603, t638, t621, -t636, 0, t747, t755, t743, t762, t622, t638, t603, 0, t636, t621, t735, t744, t749, t738; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t712, 0, 0, 0, 0, 0, 0, t594, t586, 0, t622, -t603, t638, t621, -t636, 0, t757, t772, t751, -t827, t622, t638, t603, 0, t636, t621, t741, t752, t763, t748; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t712, -t711, 0, 0, 0, -t594, 0, -g(3), 0, -t694, -t678, -t797, t694, t808, -qJDD(4), -t730, t753, t662, -t836, -t694, -t797, t678, -qJDD(4), -t808, t694, t728, t618, t731 + t780, t764; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t711, t712, 0, 0, 0, -t586, g(3), 0, 0, t641, -t601, t632, t640, t628, -t660, t760, -t759 - t861, t518, pkin(7) * t526 - t835, t641, t632, t601, -t660, -t628, t640, t742, t504, t843 + t861, pkin(7) * t513 - t847; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t669, -t667, t685, t700, t690, -t700, 0, t576, -t570, 0, t669, t685, t667, -t700, -t690, t700, -qJ(5) * t667, t538, t522, -qJ(5) * t531; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t776, t670, -t693, -t668, t684, -t776, -t576, 0, -t571, 0, t776, -t693, -t670, -t776, -t684, -t668, t523, t537, pkin(4) * t670, -pkin(4) * t531; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t694, t678, t797, -t694, -t808, qJDD(4), t570, t571, 0, 0, t694, t797, -t678, qJDD(4), t808, -t694, t729, -t846, t708 + t733, t789; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t669, t685, t667, -t700, -t690, t700, 0, -t552, -t531, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t694, t797, -t678, qJDD(4), t808, -t694, t552, 0, -t550, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t776, t693, t670, t776, t684, t668, t531, t550, 0, 0;];
m_new_reg = t1;
