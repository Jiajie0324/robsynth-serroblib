% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRRPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d5,theta1,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:16
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRRPR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPR1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPR1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRPR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRPR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRRPR1_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:15:55
% EndTime: 2019-12-05 16:16:06
% DurationCPUTime: 8.54s
% Computational Cost: add. (31850->439), mult. (47836->669), div. (0->0), fcn. (34101->10), ass. (0->299)
t476 = cos(qJ(3));
t464 = qJDD(2) + qJDD(3);
t473 = sin(qJ(3));
t510 = t473 * t464;
t466 = (qJD(2) + qJD(3));
t529 = t466 ^ 2;
t435 = t476 * t529 + t510;
t503 = t476 * t464;
t509 = t473 * t529;
t438 = -t503 + t509;
t474 = sin(qJ(2));
t477 = cos(qJ(2));
t381 = t477 * t435 - t474 * t438;
t467 = g(3) - qJDD(1);
t414 = pkin(6) * t435 - t476 * t467;
t547 = pkin(6) * t438 - t473 * t467;
t323 = pkin(5) * t381 + t477 * t414 - t474 * t547;
t385 = t474 * t435 + t477 * t438;
t469 = sin(pkin(8));
t471 = cos(pkin(8));
t331 = t469 * t381 + t471 * t385;
t557 = pkin(5) * t385 + t474 * t414 + t477 * t547;
t565 = qJ(1) * t331 + t469 * t323 + t471 * t557;
t546 = t471 * t381 - t469 * t385;
t564 = qJ(1) * t546 + t471 * t323 - t469 * t557;
t448 = t469 * g(1) - t471 * g(2);
t488 = t471 * g(1) + t469 * g(2);
t405 = t474 * t448 - t477 * t488;
t528 = qJD(2) ^ 2;
t397 = -t528 * pkin(2) + t405;
t483 = t477 * t448 + t474 * t488;
t482 = qJDD(2) * pkin(2) + t483;
t353 = t473 * t397 - t476 * t482;
t354 = t476 * t397 + t473 * t482;
t492 = t473 * t353 + t476 * t354;
t298 = t476 * t353 - t473 * t354;
t501 = t477 * t298;
t240 = -t474 * t492 + t501;
t507 = t474 * t298;
t554 = t477 * t492 + t507;
t206 = t469 * t240 + t471 * t554;
t561 = t471 * t240 - t469 * t554;
t470 = cos(pkin(9));
t468 = sin(pkin(9));
t465 = t468 ^ 2;
t480 = t470 ^ 2;
t531 = t529 * (t465 + t480);
t429 = t470 * t531;
t494 = t470 * t503;
t392 = -t473 * t429 + t494;
t394 = t476 * t429 + t470 * t510;
t347 = t477 * t392 - t474 * t394;
t349 = t474 * t392 + t477 * t394;
t292 = t471 * t347 - t469 * t349;
t558 = t469 * t347 + t471 * t349;
t549 = -t529 * pkin(3) + t464 * qJ(4) + (2 * qJD(4) * t466) + t354;
t491 = t477 * t405 - t474 * t483;
t359 = -t474 * t405 - t477 * t483;
t515 = t471 * t359;
t553 = -t469 * t491 + t515;
t521 = t469 * t359;
t301 = t471 * t491 + t521;
t445 = t474 * qJDD(2) + t477 * t528;
t446 = t477 * qJDD(2) - t474 * t528;
t399 = -t469 * t445 + t471 * t446;
t427 = pkin(5) * t445 - t477 * t467;
t487 = -pkin(5) * t446 - t474 * t467;
t552 = -qJ(1) * t399 + t469 * t427 + t471 * t487;
t472 = sin(qJ(5));
t475 = cos(qJ(5));
t548 = t468 * t472 - t470 * t475;
t421 = t548 * t466;
t486 = t468 * t475 + t470 * t472;
t423 = t486 * t466;
t376 = t423 * t421;
t532 = qJDD(5) - t376;
t551 = t472 * t532;
t550 = t475 * t532;
t533 = t471 * t445 + t469 * t446;
t544 = qJ(1) * t533 + t471 * t427 - t469 * t487;
t523 = t468 * t470;
t406 = t435 * t523;
t407 = t468 * t494 - t509 * t523;
t361 = t477 * t406 + t474 * t407;
t364 = t474 * t406 - t477 * t407;
t543 = t471 * t361 - t469 * t364;
t542 = t469 * t361 + t471 * t364;
t534 = t486 * t464;
t457 = t480 * t529;
t525 = t465 * t529;
t433 = t457 + t525;
t419 = t421 ^ 2;
t420 = t423 ^ 2;
t527 = pkin(1) * t467;
t460 = t464 * pkin(3);
t526 = t464 * t470;
t459 = t470 * t467;
t307 = -t459 + (pkin(4) * t529 * t470 - pkin(7) * t464 - t549) * t468;
t313 = -t468 * t467 + t549 * t470;
t308 = -pkin(4) * t457 + pkin(7) * t526 + t313;
t256 = -t475 * t307 + t472 * t308;
t257 = t472 * t307 + t475 * t308;
t224 = -t475 * t256 + t472 * t257;
t524 = t468 * t224;
t518 = t469 * t467;
t517 = t470 * t224;
t514 = t471 * t467;
t333 = -t529 * qJ(4) + qJDD(4) + t353 - t460;
t310 = -pkin(4) * t526 - t433 * pkin(7) + t333;
t513 = t472 * t310;
t369 = qJDD(5) + t376;
t512 = t472 * t369;
t511 = t473 * t333;
t506 = t475 * t310;
t505 = t475 * t369;
t504 = t476 * t333;
t499 = t421 * qJD(5);
t498 = t423 * qJD(5);
t496 = t473 * t376;
t495 = t476 * t376;
t493 = -t333 + t460;
t225 = t472 * t256 + t475 * t257;
t312 = t549 * t468 + t459;
t268 = t468 * t312 + t470 * t313;
t403 = -t469 * t448 - t471 * t488;
t417 = t548 * t464;
t267 = t470 * t312 - t468 * t313;
t484 = -t471 * t448 + t469 * t488;
t478 = qJD(5) ^ 2;
t456 = t480 * t464;
t455 = t465 * t464;
t434 = t457 - t525;
t432 = t456 - t455;
t431 = t456 + t455;
t428 = t468 * t531;
t410 = -t420 - t478;
t409 = -t420 + t478;
t408 = t419 - t478;
t393 = t476 * t428 + t468 * t510;
t390 = t473 * t428 - t468 * t503;
t380 = t476 * t432 - t473 * t434;
t379 = t476 * t431 - t473 * t433;
t378 = t473 * t432 + t476 * t434;
t377 = t473 * t431 + t476 * t433;
t375 = -t420 + t419;
t374 = t534 - t499;
t373 = t534 - 0.2e1 * t499;
t372 = -t417 - t498;
t371 = t417 + 0.2e1 * t498;
t367 = -t478 - t419;
t366 = (-t421 * t475 + t423 * t472) * qJD(5);
t365 = (-t421 * t472 - t423 * t475) * qJD(5);
t356 = -t419 - t420;
t352 = pkin(5) * t491 + t527;
t348 = -t474 * t390 + t477 * t393;
t345 = t477 * t390 + t474 * t393;
t344 = t475 * t374 - t472 * t498;
t343 = t472 * t374 + t475 * t498;
t342 = -t472 * t372 + t475 * t499;
t341 = t475 * t372 + t472 * t499;
t340 = -t472 * t410 - t505;
t339 = -t472 * t409 + t550;
t338 = t475 * t408 - t512;
t337 = t475 * t410 - t512;
t336 = t475 * t409 + t551;
t335 = t472 * t408 + t505;
t327 = -t474 * t378 + t477 * t380;
t326 = -t474 * t377 + t477 * t379;
t325 = t477 * t378 + t474 * t380;
t324 = t477 * t377 + t474 * t379;
t319 = -t475 * t371 - t472 * t373;
t318 = -t417 * t475 + t472 * t534;
t317 = -t472 * t371 + t475 * t373;
t316 = -t417 * t472 - t475 * t534;
t315 = t475 * t367 - t551;
t314 = t472 * t367 + t550;
t309 = -t468 * t365 + t470 * t366;
t305 = t473 * qJDD(5) + t476 * t309;
t304 = -t476 * qJDD(5) + t473 * t309;
t295 = pkin(2) * t467 + pkin(6) * t492;
t293 = -t469 * t345 + t471 * t348;
t291 = t471 * t345 + t469 * t348;
t290 = -t468 * t343 + t470 * t344;
t289 = -t468 * t341 + t470 * t342;
t288 = -t468 * t337 + t470 * t340;
t287 = -t468 * t336 + t470 * t339;
t286 = -t468 * t335 + t470 * t338;
t285 = t470 * t337 + t468 * t340;
t284 = -t469 * t324 + t471 * t326;
t283 = t471 * t324 + t469 * t326;
t282 = -pkin(7) * t337 + t506;
t281 = t476 * t287 + t473 * t534;
t280 = t476 * t286 - t473 * t417;
t279 = t473 * t287 - t476 * t534;
t278 = t473 * t286 + t476 * t417;
t277 = -t468 * t317 + t470 * t319;
t276 = -t468 * t316 + t470 * t318;
t275 = t470 * t316 + t468 * t318;
t274 = -t468 * t314 + t470 * t315;
t273 = t470 * t314 + t468 * t315;
t272 = t476 * t290 + t496;
t271 = t476 * t289 - t496;
t270 = t473 * t290 - t495;
t269 = t473 * t289 + t495;
t265 = -pkin(7) * t314 + t513;
t264 = t476 * t288 + t473 * t373;
t263 = t473 * t288 - t476 * t373;
t262 = -pkin(6) * t390 - t473 * t313 + t470 * t504;
t261 = -pkin(6) * t392 - t473 * t312 + t468 * t504;
t260 = pkin(6) * t393 + t476 * t313 + t470 * t511;
t259 = -pkin(6) * t394 + t476 * t312 + t468 * t511;
t258 = -pkin(4) * t373 + pkin(7) * t340 + t513;
t254 = -t474 * t304 + t477 * t305;
t253 = t477 * t304 + t474 * t305;
t252 = t476 * t277 - t473 * t375;
t251 = t473 * t277 + t476 * t375;
t250 = -pkin(6) * t377 + t476 * t267;
t249 = pkin(6) * t379 + t473 * t267;
t248 = t476 * t274 + t473 * t371;
t247 = t473 * t274 - t476 * t371;
t246 = -pkin(4) * t371 + pkin(7) * t315 - t506;
t245 = t476 * t276 + t473 * t356;
t244 = t473 * t276 - t476 * t356;
t243 = t476 * t268 + t511;
t242 = t473 * t268 - t504;
t237 = -pkin(3) * t275 - pkin(4) * t316;
t236 = -t474 * t279 + t477 * t281;
t235 = -t474 * t278 + t477 * t280;
t234 = t477 * t279 + t474 * t281;
t233 = t477 * t278 + t474 * t280;
t232 = -t474 * t270 + t477 * t272;
t231 = -t474 * t269 + t477 * t271;
t230 = t477 * t270 + t474 * t272;
t229 = t477 * t269 + t474 * t271;
t228 = -t474 * t263 + t477 * t264;
t227 = t477 * t263 + t474 * t264;
t226 = -pkin(3) * t285 - pkin(4) * t337 + t257;
t223 = -t474 * t251 + t477 * t252;
t222 = t477 * t251 + t474 * t252;
t221 = -t474 * t247 + t477 * t248;
t220 = t477 * t247 + t474 * t248;
t219 = -pkin(5) * t345 - t474 * t260 + t477 * t262;
t218 = -pkin(5) * t347 - t474 * t259 + t477 * t261;
t217 = pkin(5) * t348 + t477 * t260 + t474 * t262;
t216 = -pkin(5) * t349 + t477 * t259 + t474 * t261;
t215 = -pkin(3) * t273 - pkin(4) * t314 + t256;
t214 = -t474 * t244 + t477 * t245;
t213 = t477 * t244 + t474 * t245;
t212 = -pkin(7) * t316 - t224;
t211 = -qJ(4) * t285 - t468 * t258 + t470 * t282;
t210 = -pkin(5) * t324 - t474 * t249 + t477 * t250;
t209 = pkin(5) * t326 + t477 * t249 + t474 * t250;
t208 = -t474 * t242 + t477 * t243;
t207 = t477 * t242 + t474 * t243;
t204 = pkin(5) * t240 + pkin(6) * t501 - t474 * t295;
t203 = -pkin(4) * t310 + pkin(7) * t225;
t202 = pkin(5) * t554 + pkin(6) * t507 + t477 * t295 + t527;
t201 = -pkin(4) * t356 + pkin(7) * t318 + t225;
t200 = -qJ(4) * t273 - t468 * t246 + t470 * t265;
t199 = -pkin(6) * t242 - (pkin(3) * t473 - qJ(4) * t476) * t267;
t198 = -t469 * t227 + t471 * t228;
t197 = t471 * t227 + t469 * t228;
t196 = pkin(6) * t243 - (-pkin(3) * t476 - qJ(4) * t473 - pkin(2)) * t267;
t195 = t470 * t225 - t524;
t194 = t468 * t225 + t517;
t193 = -t469 * t220 + t471 * t221;
t192 = t471 * t220 + t469 * t221;
t191 = -t469 * t213 + t471 * t214;
t190 = t471 * t213 + t469 * t214;
t189 = t476 * t195 + t473 * t310;
t188 = t473 * t195 - t476 * t310;
t187 = -t469 * t207 + t471 * t208;
t186 = t471 * t207 + t469 * t208;
t185 = -pkin(6) * t263 + t476 * t211 - t473 * t226;
t184 = -pkin(2) * t285 + pkin(6) * t264 + t473 * t211 + t476 * t226;
t183 = -qJ(4) * t275 - t468 * t201 + t470 * t212;
t182 = -pkin(6) * t247 + t476 * t200 - t473 * t215;
t181 = -pkin(3) * t194 - pkin(4) * t224;
t180 = -pkin(2) * t273 + pkin(6) * t248 + t473 * t200 + t476 * t215;
t179 = -pkin(6) * t244 + t476 * t183 - t473 * t237;
t178 = -pkin(7) * t517 - qJ(4) * t194 - t468 * t203;
t177 = -t474 * t188 + t477 * t189;
t176 = t477 * t188 + t474 * t189;
t175 = -pkin(2) * t275 + pkin(6) * t245 + t473 * t183 + t476 * t237;
t174 = -pkin(5) * t207 - t474 * t196 + t477 * t199;
t173 = pkin(1) * t267 + pkin(5) * t208 + t477 * t196 + t474 * t199;
t172 = -pkin(5) * t227 - t474 * t184 + t477 * t185;
t171 = -pkin(1) * t285 + pkin(5) * t228 + t477 * t184 + t474 * t185;
t170 = -pkin(5) * t220 - t474 * t180 + t477 * t182;
t169 = -pkin(1) * t273 + pkin(5) * t221 + t477 * t180 + t474 * t182;
t168 = -t469 * t176 + t471 * t177;
t167 = t471 * t176 + t469 * t177;
t166 = -pkin(6) * t188 + t476 * t178 - t473 * t181;
t165 = -pkin(5) * t213 - t474 * t175 + t477 * t179;
t164 = -pkin(1) * t275 + pkin(5) * t214 + t477 * t175 + t474 * t179;
t163 = -pkin(2) * t194 + pkin(6) * t189 + t473 * t178 + t476 * t181;
t162 = -pkin(5) * t176 - t474 * t163 + t477 * t166;
t161 = -pkin(1) * t194 + pkin(5) * t177 + t477 * t163 + t474 * t166;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t403, 0, 0, 0, 0, 0, 0, -t533, -t399, 0, t301, 0, 0, 0, 0, 0, 0, -t546, t331, 0, t206, 0, 0, 0, 0, 0, 0, -t558, t293, t284, t187, 0, 0, 0, 0, 0, 0, t193, t198, t191, t168; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t484, 0, 0, 0, 0, 0, 0, t399, -t533, 0, -t553, 0, 0, 0, 0, 0, 0, -t331, -t546, 0, -t561, 0, 0, 0, 0, 0, 0, t292, t291, t283, t186, 0, 0, 0, 0, 0, 0, t192, t197, t190, t167; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t467, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t467, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t467, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t267, 0, 0, 0, 0, 0, 0, t273, t285, t275, t194; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t518, -t514, t484, qJ(1) * t484, 0, 0, t399, 0, -t533, 0, t552, t544, t553, pkin(5) * t515 + qJ(1) * t553 - t469 * t352, 0, 0, -t331, 0, -t546, 0, t565, t564, t561, qJ(1) * t561 - t469 * t202 + t471 * t204, -t542, -t469 * t325 + t471 * t327, t293, t542, t558, 0, -qJ(1) * t292 - t469 * t216 + t471 * t218, -qJ(1) * t291 - t469 * t217 + t471 * t219, -qJ(1) * t283 - t469 * t209 + t471 * t210, -qJ(1) * t186 - t469 * t173 + t471 * t174, -t469 * t230 + t471 * t232, -t469 * t222 + t471 * t223, -t469 * t234 + t471 * t236, -t469 * t229 + t471 * t231, -t469 * t233 + t471 * t235, -t469 * t253 + t471 * t254, -qJ(1) * t192 - t469 * t169 + t471 * t170, -qJ(1) * t197 - t469 * t171 + t471 * t172, -qJ(1) * t190 - t469 * t164 + t471 * t165, -qJ(1) * t167 - t469 * t161 + t471 * t162; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t514, -t518, t403, qJ(1) * t403, 0, 0, t533, 0, t399, 0, -t544, t552, t301, pkin(5) * t521 + qJ(1) * t301 + t471 * t352, 0, 0, t546, 0, -t331, 0, -t564, t565, t206, qJ(1) * t206 + t471 * t202 + t469 * t204, t543, t471 * t325 + t469 * t327, t291, -t543, -t292, 0, -qJ(1) * t558 + t471 * t216 + t469 * t218, qJ(1) * t293 + t471 * t217 + t469 * t219, qJ(1) * t284 + t471 * t209 + t469 * t210, qJ(1) * t187 + t471 * t173 + t469 * t174, t471 * t230 + t469 * t232, t471 * t222 + t469 * t223, t471 * t234 + t469 * t236, t471 * t229 + t469 * t231, t471 * t233 + t469 * t235, t471 * t253 + t469 * t254, qJ(1) * t193 + t471 * t169 + t469 * t170, qJ(1) * t198 + t471 * t171 + t469 * t172, qJ(1) * t191 + t471 * t164 + t469 * t165, qJ(1) * t168 + t471 * t161 + t469 * t162; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t448, t488, 0, 0, 0, 0, 0, 0, 0, qJDD(2), pkin(1) * t446 + t483, -pkin(1) * t445 - t405, 0, -pkin(1) * t359, 0, 0, 0, 0, 0, t464, -pkin(1) * t385 - pkin(2) * t438 - t353, -pkin(1) * t381 - pkin(2) * t435 - t354, 0, -pkin(1) * t240 - pkin(2) * t298, t455, 0.2e1 * t464 * t523, 0, t456, 0, 0, pkin(1) * t347 + pkin(2) * t392 - qJ(4) * t429 + t493 * t470, pkin(1) * t345 + pkin(2) * t390 + qJ(4) * t428 - t468 * t493, pkin(1) * t324 + pkin(2) * t377 + pkin(3) * t433 + qJ(4) * t431 + t268, pkin(1) * t207 + pkin(2) * t242 - pkin(3) * t333 + qJ(4) * t268, t470 * t343 + t468 * t344, t470 * t317 + t468 * t319, t470 * t336 + t468 * t339, t470 * t341 + t468 * t342, t470 * t335 + t468 * t338, t470 * t365 + t468 * t366, pkin(1) * t220 + pkin(2) * t247 - pkin(3) * t371 + qJ(4) * t274 + t470 * t246 + t468 * t265, pkin(1) * t227 + pkin(2) * t263 - pkin(3) * t373 + qJ(4) * t288 + t470 * t258 + t468 * t282, pkin(1) * t213 + pkin(2) * t244 - pkin(3) * t356 + qJ(4) * t276 + t470 * t201 + t468 * t212, pkin(1) * t176 + pkin(2) * t188 - pkin(3) * t310 - pkin(7) * t524 + qJ(4) * t195 + t470 * t203;];
tauB_reg = t1;
