% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PRRPR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d5,theta1,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:16
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PRRPR1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPR1_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPR1_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRPR1_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRPR1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRRPR1_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:16:06
% EndTime: 2019-12-05 16:16:18
% DurationCPUTime: 12.03s
% Computational Cost: add. (52249->482), mult. (78136->680), div. (0->0), fcn. (55359->10), ass. (0->334)
t909 = cos(qJ(3));
t954 = qJD(2) + qJD(3);
t953 = t954 ^ 2;
t898 = qJDD(2) + qJDD(3);
t906 = sin(qJ(3));
t965 = t906 * t898;
t867 = t909 * t953 + t965;
t959 = t909 * t898;
t870 = t906 * t953 - t959;
t907 = sin(qJ(2));
t910 = cos(qJ(2));
t814 = t907 * t867 + t910 * t870;
t900 = g(3) - qJDD(1);
t839 = pkin(6) * t867 - t909 * t900;
t999 = pkin(6) * t870 - t906 * t900;
t1008 = pkin(5) * t814 + t907 * t839 + t910 * t999;
t810 = t910 * t867 - t907 * t870;
t745 = pkin(5) * t810 + t910 * t839 - t907 * t999;
t902 = sin(pkin(8));
t904 = cos(pkin(8));
t998 = t904 * t810 - t902 * t814;
t1020 = qJ(1) * t998 - t1008 * t902 + t904 * t745;
t1009 = t902 * t810 + t904 * t814;
t1019 = qJ(1) * t1009 + t1008 * t904 + t902 * t745;
t880 = t902 * g(1) - t904 * g(2);
t881 = t904 * g(1) + t902 * g(2);
t830 = t907 * t880 - t910 * t881;
t912 = qJD(2) ^ 2;
t826 = -t912 * pkin(2) + t830;
t925 = t910 * t880 + t907 * t881;
t917 = qJDD(2) * pkin(2) + t925;
t775 = t906 * t826 - t909 * t917;
t776 = t909 * t826 + t906 * t917;
t946 = t906 * t775 + t909 * t776;
t719 = t909 * t775 - t906 * t776;
t963 = t907 * t719;
t1005 = t910 * t946 + t963;
t957 = t910 * t719;
t646 = -t907 * t946 + t957;
t1017 = t1005 * t904 + t902 * t646;
t1016 = -t1005 * t902 + t904 * t646;
t903 = cos(pkin(9));
t914 = t903 ^ 2;
t892 = t914 * t953;
t901 = sin(pkin(9));
t899 = t901 ^ 2;
t941 = t903 * t953;
t857 = t892 * t903 + t899 * t941;
t949 = t903 * t959;
t821 = -t906 * t857 + t949;
t823 = t909 * t857 + t903 * t965;
t769 = t910 * t821 - t907 * t823;
t771 = t907 * t821 + t910 * t823;
t1011 = t904 * t769 - t902 * t771;
t1010 = t902 * t769 + t904 * t771;
t945 = t910 * t830 - t907 * t925;
t783 = -t907 * t830 - t910 * t925;
t975 = t902 * t783;
t1004 = t904 * t945 + t975;
t970 = t904 * t783;
t1003 = -t902 * t945 + t970;
t905 = sin(qJ(5));
t908 = cos(qJ(5));
t939 = t908 * t954;
t940 = t905 * t954;
t847 = t901 * t940 - t903 * t939;
t849 = t901 * t939 + t903 * t940;
t802 = t849 * t847;
t984 = qJDD(5) - t802;
t1002 = t905 * t984;
t1001 = t908 * t984;
t923 = -t953 * pkin(3) + t898 * qJ(4) + 0.2e1 * qJD(4) * t954 + t776;
t1000 = t898 * pkin(7) + t923;
t876 = t907 * qJDD(2) + t910 * t912;
t855 = pkin(5) * t876 - t910 * t900;
t877 = t910 * qJDD(2) - t907 * t912;
t931 = -pkin(5) * t877 - t907 * t900;
t985 = t904 * t876 + t902 * t877;
t997 = qJ(1) * t985 + t904 * t855 - t902 * t931;
t827 = -t902 * t876 + t904 * t877;
t996 = -qJ(1) * t827 + t902 * t855 + t904 * t931;
t831 = t867 * t903 * t901;
t878 = t901 * t941;
t832 = -t878 * t906 + t901 * t949;
t785 = t910 * t831 + t907 * t832;
t788 = t907 * t831 - t910 * t832;
t995 = t904 * t785 - t902 * t788;
t994 = t902 * t785 + t904 * t788;
t893 = t903 * t900;
t734 = t901 * t923 + t893;
t976 = t901 * t900;
t735 = t903 * t923 - t976;
t683 = t901 * t734 + t903 * t735;
t942 = t899 * t953;
t865 = t942 + t892;
t845 = t847 ^ 2;
t846 = t849 ^ 2;
t982 = pkin(1) * t900;
t726 = -t893 + (pkin(4) * t941 - t1000) * t901;
t727 = -pkin(4) * t892 + t1000 * t903 - t976;
t665 = -t908 * t726 + t905 * t727;
t666 = t905 * t726 + t908 * t727;
t627 = -t908 * t665 + t905 * t666;
t981 = pkin(4) * t627;
t889 = t901 * t898;
t891 = t903 * t898;
t843 = t905 * t889 - t908 * t891;
t844 = (t908 * t901 + t905 * t903) * t898;
t738 = -t843 * t905 - t908 * t844;
t980 = pkin(4) * t738;
t977 = t901 * t627;
t755 = -t898 * pkin(3) - t953 * qJ(4) + qJDD(4) + t775;
t750 = t901 * t755;
t972 = t902 * t900;
t971 = t903 * t627;
t751 = t903 * t755;
t969 = t904 * t900;
t731 = -pkin(4) * t891 - t865 * pkin(7) + t755;
t968 = t905 * t731;
t795 = qJDD(5) + t802;
t967 = t905 * t795;
t966 = t906 * t755;
t962 = t908 * t731;
t961 = t908 * t795;
t960 = t909 * t755;
t956 = -pkin(3) * t755 + qJ(4) * t683;
t842 = t847 * qJD(5);
t955 = t849 * qJD(5);
t952 = t901 * t891;
t951 = t906 * t802;
t950 = t909 * t802;
t948 = pkin(3) * t891 - qJ(4) * t857 - t751;
t648 = t906 * t683 - t960;
t947 = pkin(2) * t648 + t956;
t628 = t905 * t665 + t908 * t666;
t943 = -t902 * t880 - t904 * t881;
t740 = -t843 * t908 + t905 * t844;
t779 = -t845 - t846;
t604 = -pkin(4) * t779 + pkin(7) * t740 + t628;
t615 = -pkin(7) * t738 - t627;
t694 = -t901 * t738 + t903 * t740;
t937 = -pkin(3) * t779 + qJ(4) * t694 + t903 * t604 + t901 * t615;
t911 = qJD(5) ^ 2;
t793 = -t911 - t845;
t737 = t908 * t793 - t1002;
t797 = t843 + 0.2e1 * t955;
t655 = -pkin(4) * t797 + pkin(7) * t737 - t962;
t736 = t905 * t793 + t1001;
t680 = -pkin(7) * t736 + t968;
t691 = -t901 * t736 + t903 * t737;
t936 = -pkin(3) * t797 + qJ(4) * t691 + t903 * t655 + t901 * t680;
t835 = -t846 - t911;
t762 = -t905 * t835 - t961;
t799 = -0.2e1 * t842 + t844;
t668 = -pkin(4) * t799 + pkin(7) * t762 + t968;
t759 = t908 * t835 - t967;
t701 = -pkin(7) * t759 + t962;
t708 = -t901 * t759 + t903 * t762;
t935 = -pkin(3) * t799 + qJ(4) * t708 + t903 * t668 + t901 * t701;
t888 = t899 * t898;
t890 = t914 * t898;
t863 = t890 + t888;
t934 = pkin(3) * t865 + qJ(4) * t863 + t683;
t933 = pkin(2) * t821 + t948;
t932 = -pkin(2) * t870 - t775;
t651 = t906 * t694 - t909 * t779;
t930 = pkin(2) * t651 + t937;
t656 = t906 * t691 - t909 * t797;
t929 = pkin(2) * t656 + t936;
t677 = t906 * t708 - t909 * t799;
t928 = pkin(2) * t677 + t935;
t806 = t906 * t863 + t909 * t865;
t927 = pkin(2) * t806 + t934;
t682 = t903 * t734 - t901 * t735;
t926 = t904 * t880 - t902 * t881;
t856 = t865 * t901;
t924 = -pkin(3) * t889 + qJ(4) * t856 + t750;
t922 = pkin(4) * t736 - t665;
t819 = t906 * t856 - t901 * t959;
t921 = pkin(2) * t819 + t924;
t599 = t903 * t628 - t977;
t607 = -pkin(4) * t731 + pkin(7) * t628;
t920 = -pkin(3) * t731 - pkin(7) * t977 + qJ(4) * t599 + t903 * t607;
t595 = t906 * t599 - t909 * t731;
t919 = pkin(2) * t595 + t920;
t918 = pkin(4) * t759 - t666;
t916 = -pkin(2) * t867 - t776;
t875 = 0.2e1 * t952;
t866 = t942 - t892;
t864 = t890 - t888;
t834 = -t846 + t911;
t833 = t845 - t911;
t822 = t909 * t856 + t901 * t965;
t809 = t909 * t864 + t906 * t866;
t808 = t909 * t863 - t906 * t865;
t807 = t906 * t864 - t909 * t866;
t805 = -pkin(1) * t876 - t830;
t804 = pkin(1) * t877 + t925;
t801 = t846 - t845;
t800 = -t842 + t844;
t798 = -t843 - t955;
t790 = (-t847 * t908 + t849 * t905) * qJD(5);
t789 = (-t847 * t905 - t849 * t908) * qJD(5);
t780 = pkin(1) * t783;
t774 = pkin(5) * t945 + t982;
t770 = -t907 * t819 + t910 * t822;
t767 = t910 * t819 + t907 * t822;
t766 = t908 * t800 - t905 * t955;
t765 = t905 * t800 + t908 * t955;
t764 = -t905 * t798 + t908 * t842;
t763 = t908 * t798 + t905 * t842;
t761 = -t905 * t834 + t1001;
t760 = t908 * t833 - t967;
t758 = t908 * t834 + t1002;
t757 = t905 * t833 + t961;
t749 = -t907 * t807 + t910 * t809;
t748 = -t907 * t806 + t910 * t808;
t747 = t910 * t807 + t907 * t809;
t746 = t910 * t806 + t907 * t808;
t741 = -t908 * t797 - t905 * t799;
t739 = -t905 * t797 + t908 * t799;
t729 = -t901 * t789 + t903 * t790;
t728 = t903 * t789 + t901 * t790;
t725 = t906 * qJDD(5) + t909 * t729;
t724 = -t909 * qJDD(5) + t906 * t729;
t722 = -pkin(1) * t814 + t932;
t721 = -pkin(1) * t810 + t916;
t716 = pkin(2) * t719;
t715 = pkin(2) * t900 + pkin(6) * t946;
t714 = -t902 * t767 + t904 * t770;
t713 = t904 * t767 + t902 * t770;
t712 = -t901 * t765 + t903 * t766;
t711 = -t901 * t763 + t903 * t764;
t710 = t903 * t765 + t901 * t766;
t709 = t903 * t763 + t901 * t764;
t707 = -t901 * t758 + t903 * t761;
t706 = -t901 * t757 + t903 * t760;
t705 = t903 * t759 + t901 * t762;
t704 = t903 * t758 + t901 * t761;
t703 = t903 * t757 + t901 * t760;
t700 = t909 * t707 + t906 * t844;
t699 = t909 * t706 - t906 * t843;
t698 = t906 * t707 - t909 * t844;
t697 = t906 * t706 + t909 * t843;
t695 = -t901 * t739 + t903 * t741;
t693 = t903 * t739 + t901 * t741;
t692 = t903 * t738 + t901 * t740;
t690 = t903 * t736 + t901 * t737;
t687 = t909 * t712 + t951;
t686 = t909 * t711 - t951;
t685 = t906 * t712 - t950;
t684 = t906 * t711 + t950;
t678 = t909 * t708 + t906 * t799;
t674 = pkin(1) * t769 + t933;
t673 = pkin(1) * t767 + t921;
t672 = -pkin(6) * t819 - t906 * t735 + t903 * t960;
t671 = -pkin(6) * t821 - t906 * t734 + t901 * t960;
t670 = pkin(6) * t822 + t909 * t735 + t903 * t966;
t669 = -pkin(6) * t823 + t909 * t734 + t901 * t966;
t663 = -t907 * t724 + t910 * t725;
t662 = t910 * t724 + t907 * t725;
t661 = t909 * t695 + t906 * t801;
t660 = t906 * t695 - t909 * t801;
t659 = -pkin(6) * t806 + t909 * t682;
t658 = pkin(6) * t808 + t906 * t682;
t657 = t909 * t691 + t906 * t797;
t652 = t909 * t694 + t906 * t779;
t649 = t909 * t683 + t966;
t642 = -pkin(3) * t692 - t980;
t641 = pkin(1) * t746 + t927;
t640 = -t907 * t698 + t910 * t700;
t639 = -t907 * t697 + t910 * t699;
t638 = t910 * t698 + t907 * t700;
t637 = t910 * t697 + t907 * t699;
t636 = -t907 * t685 + t910 * t687;
t635 = -t907 * t684 + t910 * t686;
t634 = t910 * t685 + t907 * t687;
t633 = t910 * t684 + t907 * t686;
t632 = -t907 * t677 + t910 * t678;
t631 = t910 * t677 + t907 * t678;
t630 = -pkin(1) * t646 - t716;
t629 = -pkin(3) * t705 - t918;
t626 = -t907 * t660 + t910 * t661;
t625 = t910 * t660 + t907 * t661;
t624 = -t907 * t656 + t910 * t657;
t623 = t910 * t656 + t907 * t657;
t622 = -pkin(5) * t767 - t907 * t670 + t910 * t672;
t621 = -pkin(5) * t769 - t907 * t669 + t910 * t671;
t620 = pkin(5) * t770 + t910 * t670 + t907 * t672;
t619 = -pkin(5) * t771 + t910 * t669 + t907 * t671;
t618 = -pkin(3) * t690 - t922;
t617 = -t907 * t651 + t910 * t652;
t616 = t910 * t651 + t907 * t652;
t614 = -qJ(4) * t705 - t901 * t668 + t903 * t701;
t612 = -pkin(5) * t746 - t907 * t658 + t910 * t659;
t611 = pkin(5) * t748 + t910 * t658 + t907 * t659;
t610 = -t907 * t648 + t910 * t649;
t609 = t910 * t648 + t907 * t649;
t608 = pkin(5) * t646 + pkin(6) * t957 - t907 * t715;
t606 = pkin(5) * t1005 + pkin(6) * t963 + t910 * t715 + t982;
t602 = -qJ(4) * t690 - t901 * t655 + t903 * t680;
t601 = -pkin(6) * t648 - (pkin(3) * t906 - qJ(4) * t909) * t682;
t600 = pkin(6) * t649 - (-pkin(3) * t909 - qJ(4) * t906 - pkin(2)) * t682;
t598 = t901 * t628 + t971;
t596 = t909 * t599 + t906 * t731;
t593 = pkin(1) * t609 + t947;
t592 = pkin(1) * t631 + t928;
t591 = -pkin(6) * t677 + t909 * t614 - t906 * t629;
t590 = -pkin(2) * t705 + pkin(6) * t678 + t906 * t614 + t909 * t629;
t589 = -qJ(4) * t692 - t901 * t604 + t903 * t615;
t588 = -pkin(6) * t656 + t909 * t602 - t906 * t618;
t587 = pkin(1) * t623 + t929;
t586 = -pkin(3) * t598 - t981;
t585 = -pkin(2) * t690 + pkin(6) * t657 + t906 * t602 + t909 * t618;
t584 = -pkin(6) * t651 + t909 * t589 - t906 * t642;
t583 = -pkin(7) * t971 - qJ(4) * t598 - t901 * t607;
t582 = -t907 * t595 + t910 * t596;
t581 = t910 * t595 + t907 * t596;
t580 = -pkin(2) * t692 + pkin(6) * t652 + t906 * t589 + t909 * t642;
t579 = -pkin(5) * t609 - t907 * t600 + t910 * t601;
t578 = pkin(1) * t616 + t930;
t577 = pkin(1) * t682 + pkin(5) * t610 + t910 * t600 + t907 * t601;
t576 = -pkin(5) * t631 - t907 * t590 + t910 * t591;
t575 = -pkin(1) * t705 + pkin(5) * t632 + t910 * t590 + t907 * t591;
t574 = -pkin(5) * t623 - t907 * t585 + t910 * t588;
t573 = -pkin(1) * t690 + pkin(5) * t624 + t910 * t585 + t907 * t588;
t572 = -pkin(6) * t595 + t909 * t583 - t906 * t586;
t571 = -pkin(5) * t616 - t907 * t580 + t910 * t584;
t570 = -pkin(1) * t692 + pkin(5) * t617 + t910 * t580 + t907 * t584;
t569 = pkin(1) * t581 + t919;
t568 = -pkin(2) * t598 + pkin(6) * t596 + t906 * t583 + t909 * t586;
t567 = -pkin(5) * t581 - t907 * t568 + t910 * t572;
t566 = -pkin(1) * t598 + pkin(5) * t582 + t910 * t568 + t907 * t572;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t972, -t969, -t926, -qJ(1) * t926, 0, 0, t827, 0, -t985, 0, t996, t997, t1003, pkin(5) * t970 + qJ(1) * t1003 - t902 * t774, 0, 0, -t1009, 0, -t998, 0, t1019, t1020, t1016, qJ(1) * t1016 - t902 * t606 + t904 * t608, -t994, -t902 * t747 + t904 * t749, t714, t994, t1010, 0, -qJ(1) * t1011 - t902 * t619 + t904 * t621, -qJ(1) * t713 - t902 * t620 + t904 * t622, t904 * t612 - t902 * t611 - qJ(1) * (t904 * t746 + t902 * t748), t904 * t579 - t902 * t577 - qJ(1) * (t904 * t609 + t902 * t610), -t902 * t634 + t904 * t636, -t902 * t625 + t904 * t626, -t902 * t638 + t904 * t640, -t902 * t633 + t904 * t635, -t902 * t637 + t904 * t639, -t902 * t662 + t904 * t663, t904 * t574 - t902 * t573 - qJ(1) * (t904 * t623 + t902 * t624), t904 * t576 - t902 * t575 - qJ(1) * (t904 * t631 + t902 * t632), t904 * t571 - t902 * t570 - qJ(1) * (t904 * t616 + t902 * t617), t904 * t567 - t902 * t566 - qJ(1) * (t904 * t581 + t902 * t582); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t969, -t972, t943, qJ(1) * t943, 0, 0, t985, 0, t827, 0, -t997, t996, t1004, pkin(5) * t975 + qJ(1) * t1004 + t904 * t774, 0, 0, t998, 0, -t1009, 0, -t1020, t1019, t1017, qJ(1) * t1017 + t904 * t606 + t902 * t608, t995, t904 * t747 + t902 * t749, t713, -t995, -t1011, 0, -qJ(1) * t1010 + t904 * t619 + t902 * t621, qJ(1) * t714 + t904 * t620 + t902 * t622, t902 * t612 + t904 * t611 + qJ(1) * (-t902 * t746 + t904 * t748), t902 * t579 + t904 * t577 + qJ(1) * (-t902 * t609 + t904 * t610), t904 * t634 + t902 * t636, t904 * t625 + t902 * t626, t904 * t638 + t902 * t640, t904 * t633 + t902 * t635, t904 * t637 + t902 * t639, t904 * t662 + t902 * t663, t902 * t574 + t904 * t573 + qJ(1) * (-t902 * t623 + t904 * t624), t902 * t576 + t904 * t575 + qJ(1) * (-t902 * t631 + t904 * t632), t902 * t571 + t904 * t570 + qJ(1) * (-t902 * t616 + t904 * t617), t902 * t567 + t904 * t566 + qJ(1) * (-t902 * t581 + t904 * t582); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t880, t881, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t804, t805, 0, -t780, 0, 0, 0, 0, 0, t898, t722, t721, 0, t630, t888, t875, 0, t890, 0, 0, t674, t673, t641, t593, t710, t693, t704, t709, t703, t728, t587, t592, t578, t569; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t900, -t880, 0, 0, 0, t877, 0, -t876, 0, t931, t855, t783, pkin(5) * t783, 0, 0, -t814, 0, -t810, 0, t1008, t745, t646, t608, -t788, t749, t770, t788, t771, 0, t621, t622, t612, t579, t636, t626, t640, t635, t639, t663, t574, t576, t571, t567; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t900, 0, -t881, 0, 0, 0, t876, 0, t877, 0, -t855, t931, t945, t774, 0, 0, t810, 0, -t814, 0, -t745, t1008, t1005, t606, t785, t747, t767, -t785, -t769, 0, t619, t620, t611, t577, t634, t625, t638, t633, t637, t662, t573, t575, t570, t566; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t880, t881, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t804, t805, 0, -t780, 0, 0, 0, 0, 0, t898, t722, t721, 0, t630, t888, t875, 0, t890, 0, 0, t674, t673, t641, t593, t710, t693, t704, t709, t703, t728, t587, t592, t578, t569; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t912, 0, 0, -t900, -t925, 0, 0, 0, -t870, 0, -t867, 0, t999, t839, t719, pkin(6) * t719, t832, t809, t822, -t832, t823, 0, t671, t672, t659, t601, t687, t661, t700, t686, t699, t725, t588, t591, t584, t572; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t912, 0, qJDD(2), 0, t900, 0, t830, 0, 0, 0, t867, 0, -t870, 0, -t839, t999, t946, t715, t831, t807, t819, -t831, -t821, 0, t669, t670, t658, t600, t685, t660, t698, t684, t697, t724, t585, t590, t580, t568; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t925, -t830, 0, 0, 0, 0, 0, 0, 0, t898, t932, t916, 0, -t716, t888, t875, 0, t890, 0, 0, t933, t921, t927, t947, t710, t693, t704, t709, t703, t728, t929, t928, t930, t919; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t898, 0, -t953, 0, 0, -t900, t775, 0, t952, t864, t856, -t952, t857, 0, t750, t751, t682, qJ(4) * t682, t712, t695, t707, t711, t706, t729, t602, t614, t589, t583; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t953, 0, t898, 0, t900, 0, t776, 0, t878, -t866, -t889, -t878, -t891, 0, t734, t735, 0, pkin(3) * t682, -t802, -t801, -t844, t802, t843, -qJDD(5), t618, t629, t642, t586; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t898, -t775, -t776, 0, 0, t888, t875, 0, t890, 0, 0, t948, t924, t934, t956, t710, t693, t704, t709, t703, t728, t936, t935, t937, t920; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t889, t891, t878, 0, t892, 0, 0, t755, t734, 0, t766, t741, t761, t764, t760, t790, t680, t701, t615, -pkin(7) * t627; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t889, -t942, t891, -t878, 0, -t755, 0, t735, 0, t765, t739, t758, t763, t757, t789, t655, t668, t604, t607; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t878, t866, t889, t878, t891, 0, -t734, -t735, 0, 0, t802, t801, t844, -t802, -t843, qJDD(5), t922, t918, t980, t981; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t800, -t797, t984, t842, t833, -t842, 0, t731, t665, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t955, t799, t834, t798, t795, -t955, -t731, 0, t666, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t802, t801, t844, -t802, -t843, qJDD(5), -t665, -t666, 0, 0;];
m_new_reg = t1;
