% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPPPR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d5,theta2,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:45
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPPPR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPPR4_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPPR4_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPPR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPPR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPPR4_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:45:32
% EndTime: 2019-12-31 17:45:34
% DurationCPUTime: 1.53s
% Computational Cost: add. (3206->157), mult. (6508->197), div. (0->0), fcn. (4060->8), ass. (0->106)
t975 = sin(qJ(1));
t977 = cos(qJ(1));
t951 = t975 * g(1) - t977 * g(2);
t943 = qJDD(1) * pkin(1) + t951;
t952 = -t977 * g(1) - t975 * g(2);
t979 = qJD(1) ^ 2;
t944 = -t979 * pkin(1) + t952;
t970 = sin(pkin(7));
t972 = cos(pkin(7));
t923 = t972 * t943 - t970 * t944;
t917 = -qJDD(1) * pkin(2) - t979 * qJ(3) + qJDD(3) - t923;
t1007 = -qJDD(1) * qJ(4) - (2 * qJD(1) * qJD(4)) + t917;
t969 = sin(pkin(8));
t963 = t969 ^ 2;
t971 = cos(pkin(8));
t964 = t971 ^ 2;
t992 = t963 + t964;
t1006 = t992 * t979;
t991 = t970 * qJDD(1);
t946 = t972 * t979 + t991;
t990 = t972 * qJDD(1);
t947 = t970 * t979 - t990;
t985 = t975 * t946 + t977 * t947;
t987 = t977 * t946 - t975 * t947;
t974 = sin(qJ(5));
t976 = cos(qJ(5));
t983 = t969 * t976 + t971 * t974;
t910 = t983 * qJDD(1);
t1005 = -t979 * qJ(4) + qJDD(4);
t933 = t983 * qJD(1);
t1003 = t933 ^ 2;
t935 = (-t969 * t974 + t971 * t976) * qJD(1);
t1002 = t935 ^ 2;
t1001 = 2 * qJD(5);
t1000 = t935 * t933;
t999 = t963 * t979;
t998 = t971 * t979;
t993 = t1007 * t971;
t958 = t969 * qJDD(1);
t959 = t971 * qJDD(1);
t988 = t969 * t998;
t967 = -g(3) + qJDD(2);
t909 = t1007 * t969 + t971 * t967;
t932 = t974 * t958 - t976 * t959;
t924 = t970 * t943 + t972 * t944;
t982 = -t979 * pkin(2) + (2 * qJD(3) * qJD(1)) + t924;
t916 = qJDD(1) * qJ(3) + t982;
t978 = qJD(5) ^ 2;
t950 = -t975 * qJDD(1) - t977 * t979;
t949 = t977 * qJDD(1) - t975 * t979;
t945 = t992 * qJDD(1);
t942 = t969 * t1006;
t941 = t971 * t1006;
t931 = -t978 - t1002;
t930 = -t970 * t941 + t971 * t990;
t929 = -t970 * t942 + t969 * t990;
t928 = t972 * t941 + t970 * t959;
t927 = t972 * t942 + t969 * t991;
t926 = -t1006 * t972 - t970 * t945;
t925 = -t1006 * t970 + t972 * t945;
t922 = -t933 * t1001 - t932;
t921 = t935 * t1001 + t910;
t920 = -qJDD(5) - t1000;
t919 = qJDD(5) - t1000;
t918 = -t978 - t1003;
t914 = t916 + t1005;
t911 = -t1002 - t1003;
t908 = -t969 * t967 + t993;
t907 = t976 * t920 - t974 * t931;
t906 = t974 * t920 + t976 * t931;
t905 = (pkin(4) * t969 + qJ(3)) * qJDD(1) - pkin(6) * t1006 + t982 + t1005;
t904 = -t970 * t923 + t972 * t924;
t903 = t972 * t923 + t970 * t924;
t902 = -pkin(4) * t999 - pkin(6) * t958 + t909;
t901 = -t976 * t910 - t974 * t932;
t900 = -t974 * t910 + t976 * t932;
t899 = -pkin(6) * t959 + (-pkin(4) * t998 - t967) * t969 + t993;
t898 = t976 * t918 - t974 * t919;
t897 = t974 * t918 + t976 * t919;
t896 = t972 * t916 + t970 * t917;
t895 = t970 * t916 - t972 * t917;
t894 = -t969 * t908 + t971 * t909;
t893 = t971 * t908 + t969 * t909;
t892 = -t969 * t906 + t971 * t907;
t891 = t971 * t906 + t969 * t907;
t890 = t974 * t899 + t976 * t902;
t889 = t976 * t899 - t974 * t902;
t888 = -t969 * t900 + t971 * t901;
t887 = t971 * t900 + t969 * t901;
t886 = -t969 * t897 + t971 * t898;
t885 = t971 * t897 + t969 * t898;
t884 = t970 * t891 + t972 * t922;
t883 = -t972 * t891 + t970 * t922;
t882 = t970 * t893 + t972 * t914;
t881 = -t972 * t893 + t970 * t914;
t880 = t970 * t885 + t972 * t921;
t879 = -t972 * t885 + t970 * t921;
t878 = t970 * t887 + t972 * t911;
t877 = -t972 * t887 + t970 * t911;
t876 = -t974 * t889 + t976 * t890;
t875 = t976 * t889 + t974 * t890;
t874 = -t969 * t875 + t971 * t876;
t873 = t971 * t875 + t969 * t876;
t872 = t970 * t873 + t972 * t905;
t871 = -t972 * t873 + t970 * t905;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t950, -t949, 0, -t975 * t951 + t977 * t952, 0, 0, 0, 0, 0, 0, -t987, t985, 0, -t975 * t903 + t977 * t904, 0, 0, 0, 0, 0, 0, 0, t987, -t985, -t975 * t895 + t977 * t896, 0, 0, 0, 0, 0, 0, -t975 * t927 + t977 * t929, -t975 * t928 + t977 * t930, -t975 * t925 + t977 * t926, -t975 * t881 + t977 * t882, 0, 0, 0, 0, 0, 0, -t975 * t879 + t977 * t880, -t975 * t883 + t977 * t884, -t975 * t877 + t977 * t878, -t975 * t871 + t977 * t872; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t949, t950, 0, t977 * t951 + t975 * t952, 0, 0, 0, 0, 0, 0, -t985, -t987, 0, t977 * t903 + t975 * t904, 0, 0, 0, 0, 0, 0, 0, t985, t987, t977 * t895 + t975 * t896, 0, 0, 0, 0, 0, 0, t977 * t927 + t975 * t929, t977 * t928 + t975 * t930, t977 * t925 + t975 * t926, t977 * t881 + t975 * t882, 0, 0, 0, 0, 0, 0, t977 * t879 + t975 * t880, t977 * t883 + t975 * t884, t977 * t877 + t975 * t878, t977 * t871 + t975 * t872; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t967, 0, 0, 0, 0, 0, 0, 0, 0, 0, t967, 0, 0, 0, 0, 0, 0, 0, 0, 0, t894, 0, 0, 0, 0, 0, 0, t886, t892, t888, t874; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t979, -qJDD(1), 0, t952, 0, 0, 0, 0, 0, 0, -t946, t947, 0, t904, 0, 0, 0, 0, 0, 0, 0, t946, -t947, t896, 0, 0, 0, 0, 0, 0, t929, t930, t926, t882, 0, 0, 0, 0, 0, 0, t880, t884, t878, t872; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t979, 0, t951, 0, 0, 0, 0, 0, 0, -t947, -t946, 0, t903, 0, 0, 0, 0, 0, 0, 0, t947, t946, t895, 0, 0, 0, 0, 0, 0, t927, t928, t925, t881, 0, 0, 0, 0, 0, 0, t879, t883, t877, t871; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t967, 0, 0, 0, 0, 0, 0, 0, 0, 0, t967, 0, 0, 0, 0, 0, 0, 0, 0, 0, t894, 0, 0, 0, 0, 0, 0, t886, t892, t888, t874; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t979, -qJDD(1), 0, t924, 0, 0, 0, 0, 0, 0, 0, t979, qJDD(1), t916, 0, 0, 0, 0, 0, 0, t958, t959, -t1006, t914, 0, 0, 0, 0, 0, 0, t921, t922, t911, t905; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t979, 0, t923, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), t979, -t917, 0, 0, 0, 0, 0, 0, t942, t941, t945, -t893, 0, 0, 0, 0, 0, 0, -t885, -t891, -t887, -t873; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t967, 0, 0, 0, 0, 0, 0, 0, 0, 0, t967, 0, 0, 0, 0, 0, 0, 0, 0, 0, t894, 0, 0, 0, 0, 0, 0, t886, t892, t888, t874; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t967, 0, 0, 0, 0, 0, 0, 0, 0, 0, t894, 0, 0, 0, 0, 0, 0, t886, t892, t888, t874; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t979, -qJDD(1), -t916, 0, 0, 0, 0, 0, 0, -t958, -t959, t1006, -t914, 0, 0, 0, 0, 0, 0, -t921, -t922, -t911, -t905; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t979, t917, 0, 0, 0, 0, 0, 0, -t942, -t941, -t945, t893, 0, 0, 0, 0, 0, 0, t885, t891, t887, t873; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t999, -t988, -t958, t909, 0, 0, 0, 0, 0, 0, t898, t907, t901, t876; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t988, -t964 * t979, -t959, t908, 0, 0, 0, 0, 0, 0, t897, t906, t900, t875; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t958, t959, -t1006, t914, 0, 0, 0, 0, 0, 0, t921, t922, t911, t905; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t918, t920, -t910, t890; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t919, t931, t932, t889; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t921, t922, t911, t905;];
f_new_reg = t1;
