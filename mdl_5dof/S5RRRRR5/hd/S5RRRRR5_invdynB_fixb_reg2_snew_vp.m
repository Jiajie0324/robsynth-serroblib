% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 12:13
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRRR5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR5_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR5_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR5_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRR5_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 12:13:27
% EndTime: 2020-01-03 12:13:40
% DurationCPUTime: 10.66s
% Computational Cost: add. (57439->511), mult. (61110->769), div. (0->0), fcn. (38139->10), ass. (0->350)
t556 = qJD(1) + qJD(2);
t548 = qJD(3) + t556;
t546 = t548 ^ 2;
t566 = cos(qJ(3));
t589 = qJDD(1) + qJDD(2);
t547 = qJDD(3) + t589;
t561 = sin(qJ(3));
t605 = t561 * t547;
t512 = t566 * t546 + t605;
t596 = t566 * t547;
t515 = t561 * t546 - t596;
t562 = sin(qJ(2));
t567 = cos(qJ(2));
t454 = t567 * t512 - t562 * t515;
t492 = pkin(7) * t512 - t566 * g(1);
t633 = pkin(7) * t515 - t561 * g(1);
t395 = pkin(6) * t454 + t567 * t492 - t562 * t633;
t459 = t562 * t512 + t567 * t515;
t563 = sin(qJ(1));
t568 = cos(qJ(1));
t410 = t568 * t454 - t563 * t459;
t641 = pkin(6) * t459 + t562 * t492 + t567 * t633;
t652 = -pkin(5) * t410 - t568 * t395 + t563 * t641;
t632 = t563 * t454 + t568 * t459;
t651 = pkin(5) * t632 + t563 * t395 + t568 * t641;
t540 = t568 * g(2) + t563 * g(3);
t574 = qJDD(1) * pkin(1) - t540;
t539 = t563 * g(2) - t568 * g(3);
t623 = qJD(1) ^ 2;
t575 = -t623 * pkin(1) - t539;
t473 = t562 * t574 + t567 * t575;
t553 = t556 ^ 2;
t464 = -t553 * pkin(2) + t473;
t572 = -t562 * t575 + t567 * t574;
t571 = t589 * pkin(2) + t572;
t418 = t561 * t464 - t566 * t571;
t419 = t566 * t464 + t561 * t571;
t582 = t561 * t418 + t566 * t419;
t352 = t566 * t418 - t561 * t419;
t595 = t567 * t352;
t300 = -t562 * t582 + t595;
t604 = t562 * t352;
t637 = t567 * t582 + t604;
t648 = t563 * t300 + t568 * t637;
t264 = -t568 * t300 + t563 * t637;
t522 = t567 * t553 + t562 * t589;
t524 = -t562 * t553 + t567 * t589;
t468 = t568 * t522 + t563 * t524;
t502 = pkin(6) * t522 - t567 * g(1);
t636 = -pkin(6) * t524 - t562 * g(1);
t647 = -pkin(5) * t468 - t568 * t502 + t563 * t636;
t576 = t563 * t522 - t568 * t524;
t646 = pkin(5) * t576 + t563 * t502 + t568 * t636;
t581 = t567 * t473 - t562 * t572;
t423 = -t562 * t473 - t567 * t572;
t593 = t568 * t423;
t358 = t563 * t581 - t593;
t602 = t563 * t423;
t638 = t568 * t581 + t602;
t559 = sin(qJ(5));
t564 = cos(qJ(5));
t565 = cos(qJ(4));
t560 = sin(qJ(4));
t617 = t548 * t560;
t495 = -t564 * t565 * t548 + t559 * t617;
t497 = (t559 * t565 + t560 * t564) * t548;
t452 = t497 * t495;
t588 = qJDD(4) + qJDD(5);
t625 = -t452 + t588;
t635 = t559 * t625;
t634 = t564 * t625;
t555 = qJD(4) + qJD(5);
t486 = t555 * t495;
t591 = qJD(4) * t548;
t584 = t565 * t591;
t606 = t560 * t547;
t507 = t584 + t606;
t542 = t565 * t547;
t585 = t560 * t591;
t508 = t542 - t585;
t573 = t495 * qJD(5) - t564 * t507 - t559 * t508;
t624 = -t486 - t573;
t580 = t559 * t507 - t564 * t508;
t398 = (qJD(5) - t555) * t497 + t580;
t493 = t495 ^ 2;
t494 = t497 ^ 2;
t552 = t555 ^ 2;
t618 = t546 * t560;
t616 = t555 * t559;
t615 = t555 * t564;
t557 = t560 ^ 2;
t614 = t557 * t546;
t558 = t565 ^ 2;
t543 = t558 * t546;
t403 = -t547 * pkin(3) - t546 * pkin(8) + t418;
t528 = qJD(4) * pkin(4) - pkin(9) * t617;
t363 = -t508 * pkin(4) - pkin(9) * t543 + t528 * t617 + t403;
t613 = t559 * t363;
t444 = t452 + t588;
t612 = t559 * t444;
t404 = -t546 * pkin(3) + t547 * pkin(8) + t419;
t609 = t560 * t404;
t357 = qJDD(4) * pkin(4) - t507 * pkin(9) - t609 + (pkin(4) * t618 + pkin(9) * t591 - g(1)) * t565;
t387 = -t560 * g(1) + t565 * t404;
t360 = -pkin(4) * t543 + t508 * pkin(9) - qJD(4) * t528 + t387;
t310 = -t564 * t357 + t559 * t360;
t311 = t559 * t357 + t564 * t360;
t274 = -t564 * t310 + t559 * t311;
t611 = t560 * t274;
t610 = t560 * t403;
t535 = t565 * t618;
t526 = qJDD(4) + t535;
t608 = t560 * t526;
t527 = qJDD(4) - t535;
t607 = t560 * t527;
t601 = t564 * t363;
t600 = t564 * t444;
t599 = t565 * t274;
t598 = t565 * t403;
t597 = t565 * t527;
t592 = t557 + t558;
t587 = t561 * t452;
t586 = t566 * t452;
t536 = -t563 * qJDD(1) - t568 * t623;
t583 = pkin(5) * t536 + t568 * g(1);
t275 = t559 * t310 + t564 * t311;
t386 = t565 * g(1) + t609;
t338 = t560 * t386 + t565 * t387;
t487 = -t563 * t539 - t568 * t540;
t578 = t561 * t535;
t577 = t566 * t535;
t337 = t565 * t386 - t560 * t387;
t488 = t568 * t539 - t563 * t540;
t570 = qJD(4) ^ 2;
t569 = pkin(1) * g(1);
t537 = t568 * qJDD(1) - t563 * t623;
t533 = -t543 - t570;
t532 = t543 - t570;
t531 = -t570 - t614;
t530 = t570 - t614;
t519 = t565 * t526;
t518 = pkin(5) * t537 + t563 * g(1);
t517 = t543 - t614;
t516 = t543 + t614;
t510 = t592 * t547;
t509 = t542 - 0.2e1 * t585;
t506 = 0.2e1 * t584 + t606;
t505 = t592 * t591;
t484 = -t494 + t552;
t483 = t493 - t552;
t482 = t561 * qJDD(4) + t566 * t505;
t481 = -t566 * qJDD(4) + t561 * t505;
t480 = -t494 - t552;
t479 = -t560 * t531 - t597;
t478 = -t560 * t530 + t519;
t477 = t565 * t533 - t608;
t476 = t565 * t532 - t607;
t475 = t565 * t531 - t607;
t474 = t560 * t533 + t519;
t471 = t565 * t507 - t557 * t591;
t470 = -t560 * t508 - t558 * t591;
t457 = t566 * t510 - t561 * t516;
t453 = t561 * t510 + t566 * t516;
t451 = -t560 * t506 + t565 * t509;
t450 = -t494 + t493;
t449 = t566 * t478 + t560 * t605;
t448 = t566 * t476 + t561 * t542;
t447 = t561 * t478 - t560 * t596;
t446 = t561 * t476 - t565 * t596;
t442 = t566 * t471 - t578;
t441 = t566 * t470 + t578;
t440 = t561 * t471 + t577;
t439 = t561 * t470 - t577;
t438 = -t552 - t493;
t437 = t566 * t479 + t561 * t506;
t436 = t566 * t477 - t561 * t509;
t435 = t561 * t479 - t566 * t506;
t434 = t561 * t477 + t566 * t509;
t433 = (-t495 * t564 + t497 * t559) * t555;
t432 = (-t495 * t559 - t497 * t564) * t555;
t431 = -t562 * t481 + t567 * t482;
t430 = t567 * t481 + t562 * t482;
t429 = -t493 - t494;
t428 = t566 * t451 - t561 * t517;
t427 = t561 * t451 + t566 * t517;
t425 = -t497 * qJD(5) - t580;
t420 = pkin(6) * t581 + t569;
t416 = t564 * t483 - t612;
t415 = -t559 * t484 + t634;
t414 = t559 * t483 + t600;
t413 = t564 * t484 + t635;
t412 = -t559 * t480 - t600;
t411 = t564 * t480 - t612;
t408 = -t562 * t453 + t567 * t457;
t405 = t567 * t453 + t562 * t457;
t402 = -t486 + t573;
t397 = (qJD(5) + t555) * t497 + t580;
t391 = -t562 * t447 + t567 * t449;
t390 = -t562 * t446 + t567 * t448;
t389 = t567 * t447 + t562 * t449;
t388 = t567 * t446 + t562 * t448;
t385 = -t497 * t616 - t564 * t573;
t384 = t497 * t615 - t559 * t573;
t383 = -t559 * t425 + t495 * t615;
t382 = t564 * t425 + t495 * t616;
t380 = t564 * t438 - t635;
t379 = t559 * t438 + t634;
t378 = -t562 * t440 + t567 * t442;
t377 = -t562 * t439 + t567 * t441;
t376 = t567 * t440 + t562 * t442;
t375 = t567 * t439 + t562 * t441;
t374 = -t562 * t435 + t567 * t437;
t373 = -t562 * t434 + t567 * t436;
t372 = t567 * t435 + t562 * t437;
t371 = t567 * t434 + t562 * t436;
t370 = -t560 * t432 + t565 * t433;
t369 = -pkin(8) * t475 + t598;
t368 = -pkin(8) * t474 + t610;
t367 = -pkin(3) * t475 + t387;
t366 = -pkin(3) * t474 + t386;
t365 = t566 * t370 + t561 * t588;
t364 = t561 * t370 - t566 * t588;
t362 = -t562 * t427 + t567 * t428;
t361 = t567 * t427 + t562 * t428;
t349 = pkin(2) * g(1) + pkin(7) * t582;
t348 = -t560 * t414 + t565 * t416;
t347 = -t560 * t413 + t565 * t415;
t346 = -t560 * t411 + t565 * t412;
t345 = t565 * t411 + t560 * t412;
t344 = t563 * t405 - t568 * t408;
t343 = t568 * t405 + t563 * t408;
t342 = -t398 * t564 - t559 * t402;
t341 = -t564 * t397 - t559 * t624;
t340 = -t398 * t559 + t564 * t402;
t339 = -t559 * t397 + t564 * t624;
t335 = -t560 * t384 + t565 * t385;
t334 = -t560 * t382 + t565 * t383;
t333 = -t560 * t379 + t565 * t380;
t332 = t565 * t379 + t560 * t380;
t331 = -pkin(9) * t411 + t601;
t330 = t563 * t372 - t568 * t374;
t329 = t563 * t371 - t568 * t373;
t328 = t568 * t372 + t563 * t374;
t327 = t568 * t371 + t563 * t373;
t326 = -pkin(9) * t379 + t613;
t325 = -pkin(7) * t453 + t566 * t337;
t324 = pkin(7) * t457 + t561 * t337;
t323 = t566 * t335 + t587;
t322 = t566 * t334 - t587;
t321 = t561 * t335 - t586;
t320 = t561 * t334 + t586;
t319 = t566 * t348 - t561 * t398;
t318 = t566 * t347 - t561 * t402;
t317 = t561 * t348 + t566 * t398;
t316 = t561 * t347 + t566 * t402;
t315 = -t562 * t364 + t567 * t365;
t314 = t567 * t364 + t562 * t365;
t313 = t566 * t346 + t561 * t624;
t312 = t561 * t346 - t566 * t624;
t308 = t566 * t338 + t561 * t403;
t307 = t561 * t338 - t566 * t403;
t306 = t566 * t333 + t561 * t397;
t305 = t561 * t333 - t566 * t397;
t304 = -pkin(7) * t435 - t561 * t367 + t566 * t369;
t303 = -pkin(7) * t434 - t561 * t366 + t566 * t368;
t302 = -pkin(4) * t624 + pkin(9) * t412 + t613;
t297 = -pkin(4) * t397 + pkin(9) * t380 - t601;
t296 = -pkin(2) * t475 + pkin(7) * t437 + t566 * t367 + t561 * t369;
t295 = -pkin(2) * t474 + pkin(7) * t436 + t566 * t366 + t561 * t368;
t294 = -t560 * t340 + t565 * t342;
t293 = -t560 * t339 + t565 * t341;
t292 = t565 * t340 + t560 * t342;
t291 = t566 * t293 - t561 * t450;
t290 = t561 * t293 + t566 * t450;
t289 = t566 * t294 + t561 * t429;
t288 = t561 * t294 - t566 * t429;
t287 = -t562 * t321 + t567 * t323;
t286 = -t562 * t320 + t567 * t322;
t285 = t567 * t321 + t562 * t323;
t284 = t567 * t320 + t562 * t322;
t283 = -t562 * t317 + t567 * t319;
t282 = -t562 * t316 + t567 * t318;
t281 = t567 * t317 + t562 * t319;
t280 = t567 * t316 + t562 * t318;
t279 = -pkin(3) * t345 - pkin(4) * t411 + t311;
t278 = -t562 * t312 + t567 * t313;
t277 = t567 * t312 + t562 * t313;
t276 = -pkin(3) * t292 - pkin(4) * t340;
t273 = -pkin(6) * t405 - t562 * t324 + t567 * t325;
t272 = pkin(6) * t408 + t567 * t324 + t562 * t325;
t271 = -pkin(3) * t332 - pkin(4) * t379 + t310;
t270 = -t562 * t307 + t567 * t308;
t269 = t567 * t307 + t562 * t308;
t268 = -t562 * t305 + t567 * t306;
t267 = t567 * t305 + t562 * t306;
t266 = pkin(6) * t300 + pkin(7) * t595 - t562 * t349;
t263 = pkin(6) * t637 + pkin(7) * t604 + t567 * t349 + t569;
t262 = -pkin(7) * t307 - (pkin(3) * t561 - pkin(8) * t566) * t337;
t261 = -pkin(4) * t363 + pkin(9) * t275;
t260 = -pkin(8) * t345 - t560 * t302 + t565 * t331;
t259 = -pkin(9) * t340 - t274;
t258 = -pkin(6) * t372 - t562 * t296 + t567 * t304;
t257 = -pkin(6) * t371 - t562 * t295 + t567 * t303;
t256 = -pkin(8) * t332 - t560 * t297 + t565 * t326;
t255 = -pkin(1) * t475 + pkin(6) * t374 + t567 * t296 + t562 * t304;
t254 = -pkin(1) * t474 + pkin(6) * t373 + t567 * t295 + t562 * t303;
t253 = -pkin(4) * t429 + pkin(9) * t342 + t275;
t252 = -t562 * t290 + t567 * t291;
t251 = t567 * t290 + t562 * t291;
t250 = pkin(7) * t308 - (-pkin(3) * t566 - pkin(8) * t561 - pkin(2)) * t337;
t249 = -t562 * t288 + t567 * t289;
t248 = t567 * t288 + t562 * t289;
t247 = t563 * t277 - t568 * t278;
t246 = t568 * t277 + t563 * t278;
t245 = t565 * t275 - t611;
t244 = t560 * t275 + t599;
t243 = t563 * t269 - t568 * t270;
t242 = t568 * t269 + t563 * t270;
t241 = t563 * t267 - t568 * t268;
t240 = t568 * t267 + t563 * t268;
t239 = t566 * t245 + t561 * t363;
t238 = t561 * t245 - t566 * t363;
t237 = -pkin(7) * t312 + t566 * t260 - t561 * t279;
t236 = -pkin(7) * t305 + t566 * t256 - t561 * t271;
t235 = -pkin(2) * t345 + pkin(7) * t313 + t561 * t260 + t566 * t279;
t234 = -pkin(3) * t244 - pkin(4) * t274;
t233 = t563 * t248 - t568 * t249;
t232 = t568 * t248 + t563 * t249;
t231 = -pkin(2) * t332 + pkin(7) * t306 + t561 * t256 + t566 * t271;
t230 = -pkin(8) * t292 - t560 * t253 + t565 * t259;
t229 = -pkin(6) * t269 - t562 * t250 + t567 * t262;
t228 = pkin(1) * t337 + pkin(6) * t270 + t567 * t250 + t562 * t262;
t227 = -pkin(8) * t244 - pkin(9) * t599 - t560 * t261;
t226 = -t562 * t238 + t567 * t239;
t225 = t567 * t238 + t562 * t239;
t224 = -pkin(7) * t288 + t566 * t230 - t561 * t276;
t223 = -pkin(2) * t292 + pkin(7) * t289 + t561 * t230 + t566 * t276;
t222 = -pkin(6) * t277 - t562 * t235 + t567 * t237;
t221 = -pkin(1) * t345 + pkin(6) * t278 + t567 * t235 + t562 * t237;
t220 = -pkin(6) * t267 - t562 * t231 + t567 * t236;
t219 = -pkin(1) * t332 + pkin(6) * t268 + t567 * t231 + t562 * t236;
t218 = t563 * t225 - t568 * t226;
t217 = t568 * t225 + t563 * t226;
t216 = -pkin(7) * t238 + t566 * t227 - t561 * t234;
t215 = -pkin(2) * t244 + pkin(7) * t239 + t561 * t227 + t566 * t234;
t214 = -pkin(6) * t248 - t562 * t223 + t567 * t224;
t213 = -pkin(1) * t292 + pkin(6) * t249 + t567 * t223 + t562 * t224;
t212 = -pkin(6) * t225 - t562 * t215 + t567 * t216;
t211 = -pkin(1) * t244 + pkin(6) * t226 + t567 * t215 + t562 * t216;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t474, t475, 0, -t337, 0, 0, 0, 0, 0, 0, t332, t345, t292, t244; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t537, t536, 0, t487, 0, 0, 0, 0, 0, 0, -t576, -t468, 0, t358, 0, 0, 0, 0, 0, 0, -t632, -t410, 0, t264, 0, 0, 0, 0, 0, 0, t327, t328, t343, t242, 0, 0, 0, 0, 0, 0, t240, t246, t232, t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t536, t537, 0, t488, 0, 0, 0, 0, 0, 0, t468, -t576, 0, -t638, 0, 0, 0, 0, 0, 0, t410, -t632, 0, -t648, 0, 0, 0, 0, 0, 0, t329, t330, t344, t243, 0, 0, 0, 0, 0, 0, t241, t247, t233, t218; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t540, t539, 0, 0, 0, 0, 0, 0, 0, t589, pkin(1) * t524 + t572, -pkin(1) * t522 - t473, 0, -pkin(1) * t423, 0, 0, 0, 0, 0, t547, -pkin(1) * t459 - pkin(2) * t515 - t418, -pkin(1) * t454 - pkin(2) * t512 - t419, 0, -pkin(1) * t300 - pkin(2) * t352, (t507 + t584) * t560, t565 * t506 + t560 * t509, t565 * t530 + t608, (t508 - t585) * t565, t560 * t532 + t597, 0, pkin(1) * t371 + pkin(2) * t434 + pkin(3) * t509 + pkin(8) * t477 - t598, pkin(1) * t372 + pkin(2) * t435 - pkin(3) * t506 + pkin(8) * t479 + t610, pkin(1) * t405 + pkin(2) * t453 + pkin(3) * t516 + pkin(8) * t510 + t338, pkin(1) * t269 + pkin(2) * t307 - pkin(3) * t403 + pkin(8) * t338, t565 * t384 + t560 * t385, t565 * t339 + t560 * t341, t565 * t413 + t560 * t415, t565 * t382 + t560 * t383, t565 * t414 + t560 * t416, t565 * t432 + t560 * t433, pkin(1) * t267 + pkin(2) * t305 - pkin(3) * t397 + pkin(8) * t333 + t565 * t297 + t560 * t326, pkin(1) * t277 + pkin(2) * t312 - pkin(3) * t624 + pkin(8) * t346 + t565 * t302 + t560 * t331, pkin(1) * t248 + pkin(2) * t288 - pkin(3) * t429 + pkin(8) * t294 + t565 * t253 + t560 * t259, pkin(1) * t225 + pkin(2) * t238 - pkin(3) * t363 + pkin(8) * t245 - pkin(9) * t611 + t565 * t261; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t536, 0, t537, 0, t583, -t518, -t488, -pkin(5) * t488, 0, 0, t468, 0, -t576, 0, t647, t646, t638, pkin(5) * t638 + pkin(6) * t602 + t568 * t420, 0, 0, t410, 0, -t632, 0, t652, t651, t648, pkin(5) * t648 + t568 * t263 + t563 * t266, t568 * t376 + t563 * t378, t568 * t361 + t563 * t362, t568 * t389 + t563 * t391, t568 * t375 + t563 * t377, t568 * t388 + t563 * t390, t568 * t430 + t563 * t431, -pkin(5) * t329 + t568 * t254 + t563 * t257, -pkin(5) * t330 + t568 * t255 + t563 * t258, -pkin(5) * t344 + t568 * t272 + t563 * t273, -pkin(5) * t243 + t568 * t228 + t563 * t229, t568 * t285 + t563 * t287, t568 * t251 + t563 * t252, t568 * t280 + t563 * t282, t568 * t284 + t563 * t286, t568 * t281 + t563 * t283, t568 * t314 + t563 * t315, -pkin(5) * t241 + t568 * t219 + t563 * t220, -pkin(5) * t247 + t568 * t221 + t563 * t222, -pkin(5) * t233 + t568 * t213 + t563 * t214, -pkin(5) * t218 + t568 * t211 + t563 * t212; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t537, 0, -t536, 0, t518, t583, t487, pkin(5) * t487, 0, 0, t576, 0, t468, 0, -t646, t647, t358, pkin(5) * t358 - pkin(6) * t593 + t563 * t420, 0, 0, t632, 0, t410, 0, -t651, t652, t264, pkin(5) * t264 + t563 * t263 - t568 * t266, t563 * t376 - t568 * t378, t563 * t361 - t568 * t362, t563 * t389 - t568 * t391, t563 * t375 - t568 * t377, t563 * t388 - t568 * t390, t563 * t430 - t568 * t431, pkin(5) * t327 + t563 * t254 - t568 * t257, pkin(5) * t328 + t563 * t255 - t568 * t258, pkin(5) * t343 + t563 * t272 - t568 * t273, pkin(5) * t242 + t563 * t228 - t568 * t229, t563 * t285 - t568 * t287, t563 * t251 - t568 * t252, t563 * t280 - t568 * t282, t563 * t284 - t568 * t286, t563 * t281 - t568 * t283, t563 * t314 - t568 * t315, pkin(5) * t240 + t563 * t219 - t568 * t220, pkin(5) * t246 + t563 * t221 - t568 * t222, pkin(5) * t232 + t563 * t213 - t568 * t214, pkin(5) * t217 + t563 * t211 - t568 * t212;];
tauB_reg = t1;
