% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRRRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4,d5]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 12:13
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRRRR5_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR5_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR5_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR5_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR5_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRR5_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 12:13:40
% EndTime: 2020-01-03 12:13:54
% DurationCPUTime: 14.17s
% Computational Cost: add. (94617->558), mult. (100093->774), div. (0->0), fcn. (62071->10), ass. (0->384)
t1035 = sin(qJ(1));
t1040 = cos(qJ(1));
t1034 = sin(qJ(2));
t1039 = cos(qJ(2));
t1033 = sin(qJ(3));
t1029 = qJD(1) + qJD(2);
t1019 = qJD(3) + t1029;
t1017 = t1019 ^ 2;
t1027 = qJDD(1) + qJDD(2);
t1018 = qJDD(3) + t1027;
t1038 = cos(qJ(3));
t1082 = t1038 * t1018;
t988 = t1033 * t1017 - t1082;
t1127 = pkin(7) * t988 - t1033 * g(1);
t1084 = t1033 * t1018;
t985 = t1038 * t1017 + t1084;
t927 = t1034 * t985 + t1039 * t988;
t960 = pkin(7) * t985 - t1038 * g(1);
t1140 = pkin(6) * t927 + t1034 * t960 + t1039 * t1127;
t923 = t1034 * t988 - t1039 * t985;
t1141 = t1035 * t923 - t1040 * t927;
t849 = pkin(6) * t923 + t1034 * t1127 - t1039 * t960;
t1151 = pkin(5) * t1141 + t1035 * t849 - t1040 * t1140;
t1142 = t1035 * t927 + t1040 * t923;
t1150 = pkin(5) * t1142 + t1035 * t1140 + t1040 * t849;
t1012 = t1040 * g(2) + t1035 * g(3);
t1048 = qJDD(1) * pkin(1) - t1012;
t1011 = t1035 * g(2) - t1040 * g(3);
t1116 = qJD(1) ^ 2;
t1052 = t1116 * pkin(1) + t1011;
t1045 = t1034 * t1052 + t1039 * t1048;
t1044 = t1027 * pkin(2) + t1045;
t1025 = t1029 ^ 2;
t941 = t1034 * t1048 - t1039 * t1052;
t930 = -t1025 * pkin(2) + t941;
t878 = t1033 * t930 - t1038 * t1044;
t879 = t1033 * t1044 + t1038 * t930;
t1071 = t1033 * t878 + t1038 * t879;
t807 = t1033 * t879 - t1038 * t878;
t1100 = t1034 * t807;
t1133 = t1039 * t1071 - t1100;
t1094 = t1039 * t807;
t745 = t1034 * t1071 + t1094;
t1147 = t1035 * t745 - t1040 * t1133;
t1146 = t1035 * t1133 + t1040 * t745;
t993 = t1039 * t1025 + t1034 * t1027;
t996 = t1034 * t1025 - t1039 * t1027;
t1054 = t1035 * t993 + t1040 * t996;
t1128 = pkin(6) * t996 - t1034 * g(1);
t970 = pkin(6) * t993 - t1039 * g(1);
t1143 = pkin(5) * t1054 + t1035 * t970 + t1040 * t1128;
t1125 = t1035 * t996 - t1040 * t993;
t1139 = pkin(5) * t1125 + t1035 * t1128 - t1040 * t970;
t1070 = -t1034 * t1045 + t1039 * t941;
t884 = t1034 * t941 + t1039 * t1045;
t1093 = t1040 * t884;
t1135 = t1035 * t1070 + t1093;
t1099 = t1035 * t884;
t1134 = -t1040 * t1070 + t1099;
t1031 = sin(qJ(5));
t1026 = qJDD(4) + qJDD(5);
t1036 = cos(qJ(5));
t1037 = cos(qJ(4));
t1089 = t1019 * t1037;
t1032 = sin(qJ(4));
t1090 = t1019 * t1032;
t963 = t1031 * t1090 - t1036 * t1089;
t965 = (t1031 * t1037 + t1032 * t1036) * t1019;
t919 = t965 * t963;
t1123 = -t919 + t1026;
t1130 = t1031 * t1123;
t1129 = t1036 * t1123;
t866 = -t1017 * pkin(3) + t1018 * pkin(8) + t879;
t1103 = t1032 * t866;
t843 = t1037 * g(1) + t1103;
t844 = -t1032 * g(1) + t1037 * t866;
t792 = t1032 * t843 + t1037 * t844;
t1074 = qJD(4) * t1090;
t1083 = t1037 * t1018;
t1049 = t1074 - t1083;
t1010 = qJD(4) * t1089;
t1085 = t1032 * t1018;
t980 = t1010 + t1085;
t888 = -t963 * qJD(5) - t1031 * t1049 + t1036 * t980;
t1028 = qJD(4) + qJD(5);
t956 = t1028 * t963;
t1124 = -t956 + t888;
t1072 = t1031 * t980 + t1036 * t1049;
t859 = (qJD(5) - t1028) * t965 + t1072;
t961 = t963 ^ 2;
t962 = t965 ^ 2;
t1024 = t1028 ^ 2;
t1115 = t1037 ^ 2;
t1091 = t1017 * t1032;
t1092 = qJD(4) * t1019;
t811 = qJDD(4) * pkin(4) - t980 * pkin(9) - t1103 + (pkin(4) * t1091 + pkin(9) * t1092 - g(1)) * t1037;
t1014 = t1115 * t1017;
t999 = qJD(4) * pkin(4) - pkin(9) * t1090;
t812 = -pkin(4) * t1014 - pkin(9) * t1049 - qJD(4) * t999 + t844;
t761 = t1031 * t812 - t1036 * t811;
t762 = t1031 * t811 + t1036 * t812;
t714 = t1031 * t762 - t1036 * t761;
t1114 = pkin(4) * t714;
t863 = t956 + t888;
t794 = -t1031 * t859 - t1036 * t863;
t1113 = pkin(4) * t794;
t865 = -t1018 * pkin(3) - t1017 * pkin(8) + t878;
t1108 = -pkin(3) * t865 + pkin(8) * t792;
t1107 = t1028 * t965;
t816 = pkin(4) * t1049 - pkin(9) * t1014 + t999 * t1090 + t865;
t1106 = t1031 * t816;
t908 = t919 + t1026;
t1105 = t1031 * t908;
t1104 = t1032 * t714;
t855 = t1032 * t865;
t1006 = t1037 * t1091;
t997 = qJDD(4) + t1006;
t1102 = t1032 * t997;
t998 = qJDD(4) - t1006;
t1101 = t1032 * t998;
t1098 = t1036 * t816;
t1097 = t1036 * t908;
t1096 = t1037 * t714;
t856 = t1037 * t865;
t981 = -0.2e1 * t1074 + t1083;
t933 = t1037 * t981;
t1095 = t1037 * t998;
t1088 = t1028 * t1031;
t1087 = t1028 * t1036;
t1030 = t1032 ^ 2;
t1086 = t1030 * t1017;
t1080 = t1030 + t1115;
t1042 = qJD(4) ^ 2;
t1002 = -t1042 - t1086;
t949 = -t1032 * t1002 - t1095;
t979 = 0.2e1 * t1010 + t1085;
t1079 = -pkin(3) * t979 + pkin(8) * t949 + t855;
t1004 = -t1014 - t1042;
t947 = t1037 * t1004 - t1102;
t1078 = pkin(3) * t981 + pkin(8) * t947 - t856;
t758 = t1033 * t792 - t1038 * t865;
t1077 = pkin(2) * t758 + t1108;
t1076 = t1033 * t919;
t1075 = t1038 * t919;
t1007 = -t1035 * qJDD(1) - t1040 * t1116;
t1073 = pkin(5) * t1007 + t1040 * g(1);
t715 = t1031 * t761 + t1036 * t762;
t796 = t1031 * t863 - t1036 * t859;
t891 = -t961 - t962;
t693 = -pkin(4) * t891 + pkin(9) * t796 + t715;
t700 = -pkin(9) * t794 - t714;
t738 = -t1032 * t794 + t1037 * t796;
t1068 = -pkin(3) * t891 + pkin(8) * t738 + t1032 * t700 + t1037 * t693;
t902 = -t1024 - t961;
t836 = t1036 * t902 - t1130;
t858 = (qJD(5) + t1028) * t965 + t1072;
t743 = -pkin(4) * t858 + pkin(9) * t836 - t1098;
t835 = t1031 * t902 + t1129;
t779 = -pkin(9) * t835 + t1106;
t784 = -t1032 * t835 + t1037 * t836;
t1067 = -pkin(3) * t858 + pkin(8) * t784 + t1032 * t779 + t1037 * t743;
t950 = -t962 - t1024;
t872 = -t1031 * t950 - t1097;
t749 = -pkin(4) * t1124 + pkin(9) * t872 + t1106;
t871 = t1036 * t950 - t1105;
t781 = -pkin(9) * t871 + t1098;
t799 = -t1032 * t871 + t1037 * t872;
t1066 = -pkin(3) * t1124 + pkin(8) * t799 + t1032 * t781 + t1037 * t749;
t983 = t1080 * t1018;
t989 = t1014 + t1086;
t1065 = pkin(3) * t989 + pkin(8) * t983 + t792;
t899 = t1033 * t949 - t1038 * t979;
t1064 = pkin(2) * t899 + t1079;
t898 = t1033 * t947 + t1038 * t981;
t1063 = pkin(2) * t898 + t1078;
t1062 = -t1035 * t1011 - t1040 * t1012;
t1061 = t1033 * t1006;
t1060 = t1038 * t1006;
t1059 = -pkin(2) * t988 - t878;
t730 = t1033 * t738 - t1038 * t891;
t1058 = pkin(2) * t730 + t1068;
t755 = t1033 * t784 - t1038 * t858;
t1057 = pkin(2) * t755 + t1067;
t764 = t1033 * t799 - t1038 * t1124;
t1056 = pkin(2) * t764 + t1066;
t921 = t1033 * t983 + t1038 * t989;
t1055 = pkin(2) * t921 + t1065;
t790 = t1032 * t844 - t1037 * t843;
t1053 = t1040 * t1011 - t1035 * t1012;
t1051 = pkin(4) * t835 - t761;
t686 = t1037 * t715 - t1104;
t703 = -pkin(4) * t816 + pkin(9) * t715;
t1050 = -pkin(3) * t816 + pkin(8) * t686 - pkin(9) * t1104 + t1037 * t703;
t681 = t1033 * t686 - t1038 * t816;
t1047 = pkin(2) * t681 + t1050;
t1046 = pkin(4) * t871 - t762;
t1043 = -pkin(2) * t985 - t879;
t1041 = pkin(1) * g(1);
t1008 = t1040 * qJDD(1) - t1035 * t1116;
t1003 = t1014 - t1042;
t1001 = t1042 - t1086;
t992 = t1037 * t997;
t991 = pkin(5) * t1008 + t1035 * g(1);
t990 = -t1014 + t1086;
t975 = t1080 * t1092;
t954 = -t962 + t1024;
t953 = t961 - t1024;
t952 = t1033 * qJDD(4) + t1038 * t975;
t951 = -t1038 * qJDD(4) + t1033 * t975;
t948 = -t1032 * t1001 + t992;
t946 = t1037 * t1003 - t1101;
t945 = t1037 * t1002 - t1101;
t944 = t1037 * t1001 + t1102;
t943 = t1032 * t1004 + t992;
t942 = t1032 * t1003 + t1095;
t939 = -t1030 * t1092 + t1037 * t980;
t938 = t1032 * t1049 - t1115 * t1092;
t934 = (t980 + t1010) * t1032;
t925 = -t1033 * t989 + t1038 * t983;
t918 = -t1032 * t979 + t933;
t917 = t1032 * t981 + t1037 * t979;
t916 = t962 - t961;
t915 = t1032 * t1084 + t1038 * t948;
t914 = t1033 * t1083 + t1038 * t946;
t913 = -t1032 * t1082 + t1033 * t948;
t912 = t1033 * t946 - t1037 * t1082;
t911 = -pkin(1) * t996 + t1045;
t910 = -pkin(1) * t993 - t941;
t906 = t1038 * t939 - t1061;
t905 = t1038 * t938 + t1061;
t904 = t1033 * t939 + t1060;
t903 = t1033 * t938 - t1060;
t901 = t1033 * t979 + t1038 * t949;
t900 = -t1033 * t981 + t1038 * t947;
t897 = (t1031 * t965 - t1036 * t963) * t1028;
t896 = (-t1031 * t963 - t1036 * t965) * t1028;
t893 = -t1034 * t951 + t1039 * t952;
t892 = t1034 * t952 + t1039 * t951;
t890 = t1033 * t990 + t1038 * t918;
t889 = t1033 * t918 - t1038 * t990;
t887 = -t965 * qJD(5) - t1072;
t881 = pkin(1) * t884;
t880 = pkin(6) * t1070 + t1041;
t876 = t1036 * t953 - t1105;
t875 = -t1031 * t954 + t1129;
t874 = t1031 * t953 + t1097;
t873 = t1036 * t954 + t1130;
t869 = -t1034 * t921 + t1039 * t925;
t867 = t1034 * t925 + t1039 * t921;
t848 = -t1034 * t913 + t1039 * t915;
t847 = -t1034 * t912 + t1039 * t914;
t846 = t1034 * t915 + t1039 * t913;
t845 = t1034 * t914 + t1039 * t912;
t842 = t1036 * t888 - t965 * t1088;
t841 = t1031 * t888 + t965 * t1087;
t840 = -t1031 * t887 + t963 * t1087;
t839 = t1036 * t887 + t963 * t1088;
t834 = -t1034 * t904 + t1039 * t906;
t833 = -t1034 * t903 + t1039 * t905;
t832 = t1034 * t906 + t1039 * t904;
t831 = t1034 * t905 + t1039 * t903;
t830 = -t1034 * t899 + t1039 * t901;
t829 = -t1034 * t898 + t1039 * t900;
t828 = t1034 * t901 + t1039 * t899;
t827 = t1034 * t900 + t1039 * t898;
t826 = -t1032 * t896 + t1037 * t897;
t825 = t1032 * t897 + t1037 * t896;
t824 = -pkin(8) * t945 + t856;
t823 = -pkin(8) * t943 + t855;
t822 = -pkin(3) * t945 + t844;
t821 = -pkin(3) * t943 + t843;
t820 = t1033 * t1026 + t1038 * t826;
t819 = -t1038 * t1026 + t1033 * t826;
t818 = -pkin(1) * t927 + t1059;
t817 = pkin(1) * t923 + t1043;
t814 = -t1034 * t889 + t1039 * t890;
t813 = t1034 * t890 + t1039 * t889;
t805 = pkin(2) * t807;
t804 = pkin(2) * g(1) + pkin(7) * t1071;
t803 = -t1032 * t874 + t1037 * t876;
t802 = -t1032 * t873 + t1037 * t875;
t801 = t1032 * t876 + t1037 * t874;
t800 = t1032 * t875 + t1037 * t873;
t798 = t1032 * t872 + t1037 * t871;
t795 = -t1031 * t1124 - t1036 * t858;
t793 = -t1031 * t858 + t1036 * t1124;
t789 = -t1032 * t841 + t1037 * t842;
t788 = -t1032 * t839 + t1037 * t840;
t787 = t1032 * t842 + t1037 * t841;
t786 = t1032 * t840 + t1037 * t839;
t783 = t1032 * t836 + t1037 * t835;
t777 = -pkin(7) * t921 - t1038 * t790;
t776 = pkin(7) * t925 - t1033 * t790;
t775 = t1038 * t789 + t1076;
t774 = t1038 * t788 - t1076;
t773 = t1033 * t789 - t1075;
t772 = t1033 * t788 + t1075;
t771 = -t1033 * t859 + t1038 * t803;
t770 = t1033 * t863 + t1038 * t802;
t769 = t1033 * t803 + t1038 * t859;
t768 = t1033 * t802 - t1038 * t863;
t767 = -t1034 * t819 + t1039 * t820;
t766 = t1034 * t820 + t1039 * t819;
t765 = t1033 * t1124 + t1038 * t799;
t759 = t1033 * t865 + t1038 * t792;
t756 = t1033 * t858 + t1038 * t784;
t753 = -pkin(7) * t899 - t1033 * t822 + t1038 * t824;
t752 = -pkin(7) * t898 - t1033 * t821 + t1038 * t823;
t751 = pkin(1) * t828 + t1064;
t750 = pkin(1) * t827 + t1063;
t741 = -pkin(2) * t945 + pkin(7) * t901 + t1033 * t824 + t1038 * t822;
t740 = -pkin(2) * t943 + pkin(7) * t900 + t1033 * t823 + t1038 * t821;
t739 = pkin(1) * t867 + t1055;
t737 = -t1032 * t793 + t1037 * t795;
t736 = t1032 * t796 + t1037 * t794;
t735 = t1032 * t795 + t1037 * t793;
t733 = t1033 * t916 + t1038 * t737;
t732 = t1033 * t737 - t1038 * t916;
t731 = t1033 * t891 + t1038 * t738;
t728 = pkin(1) * t745 + t805;
t727 = -t1034 * t773 + t1039 * t775;
t726 = -t1034 * t772 + t1039 * t774;
t725 = t1034 * t775 + t1039 * t773;
t724 = t1034 * t774 + t1039 * t772;
t723 = -t1034 * t769 + t1039 * t771;
t722 = -t1034 * t768 + t1039 * t770;
t721 = t1034 * t771 + t1039 * t769;
t720 = t1034 * t770 + t1039 * t768;
t719 = -pkin(3) * t798 - t1046;
t718 = -t1034 * t764 + t1039 * t765;
t717 = t1034 * t765 + t1039 * t764;
t716 = -pkin(3) * t736 - t1113;
t713 = -pkin(6) * t867 - t1034 * t776 + t1039 * t777;
t712 = pkin(6) * t869 + t1034 * t777 + t1039 * t776;
t711 = -pkin(3) * t783 - t1051;
t710 = -t1034 * t758 + t1039 * t759;
t709 = t1034 * t759 + t1039 * t758;
t708 = -t1034 * t755 + t1039 * t756;
t707 = t1034 * t756 + t1039 * t755;
t706 = -pkin(6) * t745 - pkin(7) * t1094 - t1034 * t804;
t705 = pkin(6) * t1133 - pkin(7) * t1100 + t1039 * t804 + t1041;
t704 = -pkin(7) * t758 + (pkin(3) * t1033 - pkin(8) * t1038) * t790;
t701 = -pkin(8) * t798 - t1032 * t749 + t1037 * t781;
t698 = -pkin(6) * t828 - t1034 * t741 + t1039 * t753;
t697 = -pkin(6) * t827 - t1034 * t740 + t1039 * t752;
t696 = -pkin(8) * t783 - t1032 * t743 + t1037 * t779;
t695 = -pkin(1) * t945 + pkin(6) * t830 + t1034 * t753 + t1039 * t741;
t694 = -pkin(1) * t943 + pkin(6) * t829 + t1034 * t752 + t1039 * t740;
t691 = -t1034 * t732 + t1039 * t733;
t690 = t1034 * t733 + t1039 * t732;
t689 = pkin(7) * t759 + (-pkin(3) * t1038 - pkin(8) * t1033 - pkin(2)) * t790;
t688 = -t1034 * t730 + t1039 * t731;
t687 = t1034 * t731 + t1039 * t730;
t685 = t1032 * t715 + t1096;
t683 = pkin(1) * t709 + t1077;
t682 = t1033 * t816 + t1038 * t686;
t679 = -pkin(7) * t764 - t1033 * t719 + t1038 * t701;
t678 = pkin(1) * t717 + t1056;
t677 = -pkin(7) * t755 - t1033 * t711 + t1038 * t696;
t676 = -pkin(2) * t798 + pkin(7) * t765 + t1033 * t701 + t1038 * t719;
t675 = -pkin(3) * t685 - t1114;
t674 = pkin(1) * t707 + t1057;
t673 = -pkin(2) * t783 + pkin(7) * t756 + t1033 * t696 + t1038 * t711;
t672 = -pkin(8) * t736 - t1032 * t693 + t1037 * t700;
t671 = -pkin(6) * t709 - t1034 * t689 + t1039 * t704;
t670 = -pkin(1) * t790 + pkin(6) * t710 + t1034 * t704 + t1039 * t689;
t669 = -pkin(8) * t685 - pkin(9) * t1096 - t1032 * t703;
t668 = -t1034 * t681 + t1039 * t682;
t667 = t1034 * t682 + t1039 * t681;
t666 = -pkin(7) * t730 - t1033 * t716 + t1038 * t672;
t665 = -pkin(2) * t736 + pkin(7) * t731 + t1033 * t672 + t1038 * t716;
t664 = pkin(1) * t687 + t1058;
t663 = -pkin(6) * t717 - t1034 * t676 + t1039 * t679;
t662 = -pkin(1) * t798 + pkin(6) * t718 + t1034 * t679 + t1039 * t676;
t661 = -pkin(6) * t707 - t1034 * t673 + t1039 * t677;
t660 = -pkin(1) * t783 + pkin(6) * t708 + t1034 * t677 + t1039 * t673;
t659 = -pkin(7) * t681 - t1033 * t675 + t1038 * t669;
t658 = pkin(1) * t667 + t1047;
t657 = -pkin(2) * t685 + pkin(7) * t682 + t1033 * t669 + t1038 * t675;
t656 = -pkin(6) * t687 - t1034 * t665 + t1039 * t666;
t655 = -pkin(1) * t736 + pkin(6) * t688 + t1034 * t666 + t1039 * t665;
t654 = -pkin(6) * t667 - t1034 * t657 + t1039 * t659;
t653 = -pkin(1) * t685 + pkin(6) * t668 + t1034 * t659 + t1039 * t657;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t1012, t1011, 0, 0, 0, 0, 0, 0, 0, t1027, t911, t910, 0, t881, 0, 0, 0, 0, 0, t1018, t818, t817, 0, t728, t934, t917, t944, t933, t942, 0, t750, t751, t739, t683, t787, t735, t800, t786, t801, t825, t674, t678, t664, t658; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t1007, 0, t1008, 0, t1073, -t991, -t1053, -pkin(5) * t1053, 0, 0, -t1125, 0, -t1054, 0, t1139, t1143, -t1134, -pkin(5) * t1134 - pkin(6) * t1099 + t1040 * t880, 0, 0, -t1142, 0, t1141, 0, t1150, -t1151, -t1147, -pkin(5) * t1147 + t1035 * t706 + t1040 * t705, t1035 * t834 + t1040 * t832, t1035 * t814 + t1040 * t813, t1035 * t848 + t1040 * t846, t1035 * t833 + t1040 * t831, t1035 * t847 + t1040 * t845, t1035 * t893 + t1040 * t892, t1035 * t697 + t1040 * t694 - pkin(5) * (t1035 * t827 - t1040 * t829), t1035 * t698 + t1040 * t695 - pkin(5) * (t1035 * t828 - t1040 * t830), t1035 * t713 + t1040 * t712 - pkin(5) * (t1035 * t867 - t1040 * t869), t1035 * t671 + t1040 * t670 - pkin(5) * (t1035 * t709 - t1040 * t710), t1035 * t727 + t1040 * t725, t1035 * t691 + t1040 * t690, t1035 * t722 + t1040 * t720, t1035 * t726 + t1040 * t724, t1035 * t723 + t1040 * t721, t1035 * t767 + t1040 * t766, t1035 * t661 + t1040 * t660 - pkin(5) * (t1035 * t707 - t1040 * t708), t1035 * t663 + t1040 * t662 - pkin(5) * (t1035 * t717 - t1040 * t718), t1035 * t656 + t1040 * t655 - pkin(5) * (t1035 * t687 - t1040 * t688), t1035 * t654 + t1040 * t653 - pkin(5) * (t1035 * t667 - t1040 * t668); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t1008, 0, -t1007, 0, t991, t1073, t1062, pkin(5) * t1062, 0, 0, t1054, 0, -t1125, 0, -t1143, t1139, t1135, pkin(5) * t1135 + pkin(6) * t1093 + t1035 * t880, 0, 0, -t1141, 0, -t1142, 0, t1151, t1150, t1146, pkin(5) * t1146 + t1035 * t705 - t1040 * t706, t1035 * t832 - t1040 * t834, t1035 * t813 - t1040 * t814, t1035 * t846 - t1040 * t848, t1035 * t831 - t1040 * t833, t1035 * t845 - t1040 * t847, t1035 * t892 - t1040 * t893, -t1040 * t697 + t1035 * t694 + pkin(5) * (t1035 * t829 + t1040 * t827), -t1040 * t698 + t1035 * t695 + pkin(5) * (t1035 * t830 + t1040 * t828), -t1040 * t713 + t1035 * t712 + pkin(5) * (t1035 * t869 + t1040 * t867), -t1040 * t671 + t1035 * t670 + pkin(5) * (t1035 * t710 + t1040 * t709), t1035 * t725 - t1040 * t727, t1035 * t690 - t1040 * t691, t1035 * t720 - t1040 * t722, t1035 * t724 - t1040 * t726, t1035 * t721 - t1040 * t723, t1035 * t766 - t1040 * t767, -t1040 * t661 + t1035 * t660 + pkin(5) * (t1035 * t708 + t1040 * t707), -t1040 * t663 + t1035 * t662 + pkin(5) * (t1035 * t718 + t1040 * t717), -t1040 * t656 + t1035 * t655 + pkin(5) * (t1035 * t688 + t1040 * t687), -t1040 * t654 + t1035 * t653 + pkin(5) * (t1035 * t668 + t1040 * t667); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1116, 0, 0, -g(1), t1012, 0, 0, 0, -t996, 0, -t993, 0, t1128, t970, -t884, -pkin(6) * t884, 0, 0, -t927, 0, t923, 0, t1140, -t849, -t745, t706, t834, t814, t848, t833, t847, t893, t697, t698, t713, t671, t727, t691, t722, t726, t723, t767, t661, t663, t656, t654; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1116, 0, qJDD(1), 0, g(1), 0, -t1011, 0, 0, 0, t993, 0, -t996, 0, -t970, t1128, t1070, t880, 0, 0, -t923, 0, -t927, 0, t849, t1140, t1133, t705, t832, t813, t846, t831, t845, t892, t694, t695, t712, t670, t725, t690, t720, t724, t721, t766, t660, t662, t655, t653; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1012, t1011, 0, 0, 0, 0, 0, 0, 0, t1027, t911, t910, 0, t881, 0, 0, 0, 0, 0, t1018, t818, t817, 0, t728, t934, t917, t944, t933, t942, 0, t750, t751, t739, t683, t787, t735, t800, t786, t801, t825, t674, t678, t664, t658; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1027, 0, -t1025, 0, 0, -g(1), -t1045, 0, 0, 0, -t988, 0, -t985, 0, t1127, t960, -t807, -pkin(7) * t807, t906, t890, t915, t905, t914, t952, t752, t753, t777, t704, t775, t733, t770, t774, t771, t820, t677, t679, t666, t659; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1025, 0, t1027, 0, g(1), 0, t941, 0, 0, 0, t985, 0, -t988, 0, -t960, t1127, t1071, t804, t904, t889, t913, t903, t912, t951, t740, t741, t776, t689, t773, t732, t768, t772, t769, t819, t673, t676, t665, t657; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1027, t1045, -t941, 0, 0, 0, 0, 0, 0, 0, t1018, t1059, t1043, 0, t805, t934, t917, t944, t933, t942, 0, t1063, t1064, t1055, t1077, t787, t735, t800, t786, t801, t825, t1057, t1056, t1058, t1047; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1018, 0, -t1017, 0, 0, -g(1), t878, 0, t939, t918, t948, t938, t946, t975, t823, t824, -t790, -pkin(8) * t790, t789, t737, t802, t788, t803, t826, t696, t701, t672, t669; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1017, 0, t1018, 0, g(1), 0, t879, 0, t1006, -t990, -t1085, -t1006, -t1083, -qJDD(4), t821, t822, 0, -pkin(3) * t790, -t919, -t916, -t863, t919, t859, -t1026, t711, t719, t716, t675; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1018, -t878, -t879, 0, 0, t934, t917, t944, t933, t942, 0, t1078, t1079, t1065, t1108, t787, t735, t800, t786, t801, t825, t1067, t1066, t1068, t1050; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t980, t981, t997, -t1010, t1003, t1010, 0, t865, t843, 0, t842, t795, t875, t840, t876, t897, t779, t781, t700, -pkin(9) * t714; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1074, t979, t1001, -t1049, t998, -t1074, -t865, 0, t844, 0, t841, t793, t873, t839, t874, t896, t743, t749, t693, t703; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1006, t990, t1085, t1006, t1083, qJDD(4), -t843, -t844, 0, 0, t919, t916, t863, -t919, -t859, t1026, t1051, t1046, t1113, t1114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t888, -t858, t1123, t956, t953, -t956, 0, t816, t761, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1107, t1124, t954, t887, t908, -t1107, -t816, 0, t762, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t919, t916, t863, -t919, -t859, t1026, -t761, -t762, 0, 0;];
m_new_reg = t1;
