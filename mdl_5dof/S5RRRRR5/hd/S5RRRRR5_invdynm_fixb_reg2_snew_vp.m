% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRRRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4,d5]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:59
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRRRR5_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR5_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR5_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR5_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR5_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRR5_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:58:51
% EndTime: 2019-12-05 18:59:08
% DurationCPUTime: 17.38s
% Computational Cost: add. (94617->552), mult. (100093->774), div. (0->0), fcn. (62071->10), ass. (0->384)
t1026 = sin(qJ(1));
t1031 = cos(qJ(1));
t1025 = sin(qJ(2));
t1030 = cos(qJ(2));
t1024 = sin(qJ(3));
t1020 = qJD(1) + qJD(2);
t1013 = qJD(3) + t1020;
t1011 = t1013 ^ 2;
t1018 = qJDD(1) + qJDD(2);
t1012 = qJDD(3) + t1018;
t1029 = cos(qJ(3));
t1073 = t1029 * t1012;
t983 = t1024 * t1011 - t1073;
t1115 = pkin(7) * t983 - t1024 * g(1);
t1075 = t1024 * t1012;
t980 = t1029 * t1011 + t1075;
t923 = t1025 * t980 + t1030 * t983;
t956 = pkin(7) * t980 - t1029 * g(1);
t1128 = pkin(6) * t923 + t1025 * t956 + t1030 * t1115;
t919 = t1025 * t983 - t1030 * t980;
t845 = pkin(6) * t919 + t1025 * t1115 - t1030 * t956;
t864 = -t1026 * t919 + t1031 * t923;
t1140 = -pkin(5) * t864 + t1026 * t845 - t1031 * t1128;
t866 = t1026 * t923 + t1031 * t919;
t1139 = -pkin(5) * t866 - t1026 * t1128 - t1031 * t845;
t1006 = t1031 * g(2) + t1026 * g(3);
t1040 = qJDD(1) * pkin(1) + t1006;
t1005 = t1026 * g(2) - t1031 * g(3);
t1034 = qJD(1) ^ 2;
t1044 = t1034 * pkin(1) - t1005;
t1037 = t1025 * t1044 + t1030 * t1040;
t1036 = t1018 * pkin(2) + t1037;
t1016 = t1020 ^ 2;
t937 = t1025 * t1040 - t1030 * t1044;
t926 = -t1016 * pkin(2) + t937;
t874 = t1024 * t926 - t1029 * t1036;
t875 = t1024 * t1036 + t1029 * t926;
t1063 = t1024 * t874 + t1029 * t875;
t803 = t1024 * t875 - t1029 * t874;
t1091 = t1025 * t803;
t1124 = t1030 * t1063 - t1091;
t1085 = t1030 * t803;
t742 = -t1025 * t1063 - t1085;
t1138 = t1026 * t742 + t1031 * t1124;
t1137 = -t1026 * t1124 + t1031 * t742;
t991 = t1025 * t1016 - t1030 * t1018;
t1116 = pkin(6) * t991 - t1025 * g(1);
t988 = t1030 * t1016 + t1025 * t1018;
t927 = t1026 * t988 + t1031 * t991;
t966 = pkin(6) * t988 - t1030 * g(1);
t1130 = pkin(5) * t927 + t1026 * t966 + t1031 * t1116;
t928 = t1026 * t991 - t1031 * t988;
t1129 = -pkin(5) * t928 - t1026 * t1116 + t1031 * t966;
t1062 = -t1025 * t1037 + t1030 * t937;
t880 = t1025 * t937 + t1030 * t1037;
t1084 = t1031 * t880;
t1125 = -t1026 * t1062 - t1084;
t1090 = t1026 * t880;
t1123 = -t1031 * t1062 + t1090;
t1022 = sin(qJ(5));
t1017 = qJDD(4) + qJDD(5);
t1027 = cos(qJ(5));
t1028 = cos(qJ(4));
t1080 = t1013 * t1028;
t1023 = sin(qJ(4));
t1081 = t1013 * t1023;
t959 = t1022 * t1081 - t1027 * t1080;
t961 = (t1022 * t1028 + t1023 * t1027) * t1013;
t915 = t961 * t959;
t1113 = -t915 + t1017;
t1118 = t1022 * t1113;
t1117 = t1027 * t1113;
t862 = -t1011 * pkin(3) + t1012 * pkin(8) + t875;
t1094 = t1023 * t862;
t839 = t1028 * g(1) + t1094;
t840 = -t1023 * g(1) + t1028 * t862;
t788 = t1023 * t839 + t1028 * t840;
t1065 = qJD(4) * t1081;
t1074 = t1028 * t1012;
t1041 = t1065 - t1074;
t1004 = qJD(4) * t1080;
t1076 = t1023 * t1012;
t976 = t1004 + t1076;
t884 = -t959 * qJD(5) - t1022 * t1041 + t1027 * t976;
t1019 = qJD(4) + qJD(5);
t952 = t1019 * t959;
t1114 = -t952 + t884;
t1064 = t1022 * t976 + t1027 * t1041;
t855 = (qJD(5) - t1019) * t961 + t1064;
t957 = t959 ^ 2;
t958 = t961 ^ 2;
t1015 = t1019 ^ 2;
t1106 = t1028 ^ 2;
t1082 = t1011 * t1023;
t1083 = qJD(4) * t1013;
t807 = qJDD(4) * pkin(4) - t976 * pkin(9) - t1094 + (pkin(4) * t1082 + pkin(9) * t1083 - g(1)) * t1028;
t1008 = t1106 * t1011;
t994 = qJD(4) * pkin(4) - pkin(9) * t1081;
t808 = -pkin(4) * t1008 - pkin(9) * t1041 - qJD(4) * t994 + t840;
t757 = t1022 * t808 - t1027 * t807;
t758 = t1022 * t807 + t1027 * t808;
t710 = t1022 * t758 - t1027 * t757;
t1105 = pkin(4) * t710;
t859 = t952 + t884;
t790 = -t1022 * t855 - t1027 * t859;
t1104 = pkin(4) * t790;
t861 = -t1012 * pkin(3) - t1011 * pkin(8) + t874;
t1099 = -pkin(3) * t861 + pkin(8) * t788;
t1098 = t1019 * t961;
t812 = pkin(4) * t1041 - pkin(9) * t1008 + t994 * t1081 + t861;
t1097 = t1022 * t812;
t904 = t915 + t1017;
t1096 = t1022 * t904;
t1095 = t1023 * t710;
t851 = t1023 * t861;
t1000 = t1028 * t1082;
t992 = qJDD(4) + t1000;
t1093 = t1023 * t992;
t993 = qJDD(4) - t1000;
t1092 = t1023 * t993;
t1089 = t1027 * t812;
t1088 = t1027 * t904;
t1087 = t1028 * t710;
t852 = t1028 * t861;
t977 = -0.2e1 * t1065 + t1074;
t929 = t1028 * t977;
t1086 = t1028 * t993;
t1079 = t1019 * t1022;
t1078 = t1019 * t1027;
t1021 = t1023 ^ 2;
t1077 = t1021 * t1011;
t1071 = t1021 + t1106;
t1033 = qJD(4) ^ 2;
t996 = -t1033 - t1077;
t945 = -t1023 * t996 - t1086;
t975 = 0.2e1 * t1004 + t1076;
t1070 = -pkin(3) * t975 + pkin(8) * t945 + t851;
t998 = -t1008 - t1033;
t943 = t1028 * t998 - t1093;
t1069 = pkin(3) * t977 + pkin(8) * t943 - t852;
t754 = t1024 * t788 - t1029 * t861;
t1068 = pkin(2) * t754 + t1099;
t1067 = t1024 * t915;
t1066 = t1029 * t915;
t711 = t1022 * t757 + t1027 * t758;
t792 = t1022 * t859 - t1027 * t855;
t887 = -t957 - t958;
t689 = -pkin(4) * t887 + pkin(9) * t792 + t711;
t696 = -pkin(9) * t790 - t710;
t734 = -t1023 * t790 + t1028 * t792;
t1060 = -pkin(3) * t887 + pkin(8) * t734 + t1023 * t696 + t1028 * t689;
t898 = -t1015 - t957;
t832 = t1027 * t898 - t1118;
t854 = (qJD(5) + t1019) * t961 + t1064;
t739 = -pkin(4) * t854 + pkin(9) * t832 - t1089;
t831 = t1022 * t898 + t1117;
t775 = -pkin(9) * t831 + t1097;
t780 = -t1023 * t831 + t1028 * t832;
t1059 = -pkin(3) * t854 + pkin(8) * t780 + t1023 * t775 + t1028 * t739;
t946 = -t958 - t1015;
t868 = -t1022 * t946 - t1088;
t745 = -pkin(4) * t1114 + pkin(9) * t868 + t1097;
t867 = t1027 * t946 - t1096;
t777 = -pkin(9) * t867 + t1089;
t795 = -t1023 * t867 + t1028 * t868;
t1058 = -pkin(3) * t1114 + pkin(8) * t795 + t1023 * t777 + t1028 * t745;
t979 = t1071 * t1012;
t984 = t1008 + t1077;
t1057 = pkin(3) * t984 + pkin(8) * t979 + t788;
t895 = t1024 * t945 - t1029 * t975;
t1056 = pkin(2) * t895 + t1070;
t894 = t1024 * t943 + t1029 * t977;
t1055 = pkin(2) * t894 + t1069;
t1054 = t1024 * t1000;
t1053 = t1029 * t1000;
t1052 = -pkin(2) * t983 - t874;
t1001 = t1026 * qJDD(1) + t1031 * t1034;
t1051 = pkin(5) * t1001 - g(1) * t1031;
t726 = t1024 * t734 - t1029 * t887;
t1050 = pkin(2) * t726 + t1060;
t751 = t1024 * t780 - t1029 * t854;
t1049 = pkin(2) * t751 + t1059;
t760 = t1024 * t795 - t1029 * t1114;
t1048 = pkin(2) * t760 + t1058;
t917 = t1024 * t979 + t1029 * t984;
t1047 = pkin(2) * t917 + t1057;
t786 = t1023 * t840 - t1028 * t839;
t1046 = t1005 * t1031 - t1006 * t1026;
t1045 = -t1005 * t1026 - t1006 * t1031;
t1043 = pkin(4) * t831 - t757;
t682 = t1028 * t711 - t1095;
t699 = -pkin(4) * t812 + pkin(9) * t711;
t1042 = -pkin(3) * t812 + pkin(8) * t682 - pkin(9) * t1095 + t1028 * t699;
t677 = t1024 * t682 - t1029 * t812;
t1039 = pkin(2) * t677 + t1042;
t1038 = pkin(4) * t867 - t758;
t1035 = -pkin(2) * t980 - t875;
t1032 = pkin(1) * g(1);
t1002 = -t1031 * qJDD(1) + t1026 * t1034;
t997 = t1008 - t1033;
t995 = t1033 - t1077;
t987 = t1028 * t992;
t986 = -pkin(5) * t1002 + t1026 * g(1);
t985 = -t1008 + t1077;
t971 = t1071 * t1083;
t950 = -t958 + t1015;
t949 = t957 - t1015;
t948 = t1024 * qJDD(4) + t1029 * t971;
t947 = -t1029 * qJDD(4) + t1024 * t971;
t944 = -t1023 * t995 + t987;
t942 = t1028 * t997 - t1092;
t941 = t1028 * t996 - t1092;
t940 = t1028 * t995 + t1093;
t939 = t1023 * t998 + t987;
t938 = t1023 * t997 + t1086;
t935 = -t1021 * t1083 + t1028 * t976;
t934 = t1023 * t1041 - t1106 * t1083;
t930 = (t976 + t1004) * t1023;
t921 = -t1024 * t984 + t1029 * t979;
t914 = -t1023 * t975 + t929;
t913 = t1023 * t977 + t1028 * t975;
t912 = t958 - t957;
t911 = t1023 * t1075 + t1029 * t944;
t910 = t1024 * t1074 + t1029 * t942;
t909 = -t1023 * t1073 + t1024 * t944;
t908 = t1024 * t942 - t1028 * t1073;
t907 = -pkin(1) * t991 + t1037;
t906 = -pkin(1) * t988 - t937;
t902 = t1029 * t935 - t1054;
t901 = t1029 * t934 + t1054;
t900 = t1024 * t935 + t1053;
t899 = t1024 * t934 - t1053;
t897 = t1024 * t975 + t1029 * t945;
t896 = -t1024 * t977 + t1029 * t943;
t893 = (t1022 * t961 - t1027 * t959) * t1019;
t892 = (-t1022 * t959 - t1027 * t961) * t1019;
t889 = -t1025 * t947 + t1030 * t948;
t888 = t1025 * t948 + t1030 * t947;
t886 = t1024 * t985 + t1029 * t914;
t885 = t1024 * t914 - t1029 * t985;
t883 = -t961 * qJD(5) - t1064;
t877 = pkin(1) * t880;
t876 = pkin(6) * t1062 + t1032;
t872 = t1027 * t949 - t1096;
t871 = -t1022 * t950 + t1117;
t870 = t1022 * t949 + t1088;
t869 = t1027 * t950 + t1118;
t865 = -t1025 * t917 + t1030 * t921;
t863 = t1025 * t921 + t1030 * t917;
t844 = -t1025 * t909 + t1030 * t911;
t843 = -t1025 * t908 + t1030 * t910;
t842 = t1025 * t911 + t1030 * t909;
t841 = t1025 * t910 + t1030 * t908;
t838 = t1027 * t884 - t961 * t1079;
t837 = t1022 * t884 + t961 * t1078;
t836 = -t1022 * t883 + t959 * t1078;
t835 = t1027 * t883 + t959 * t1079;
t830 = -t1025 * t900 + t1030 * t902;
t829 = -t1025 * t899 + t1030 * t901;
t828 = t1025 * t902 + t1030 * t900;
t827 = t1025 * t901 + t1030 * t899;
t826 = -t1025 * t895 + t1030 * t897;
t825 = -t1025 * t894 + t1030 * t896;
t824 = t1025 * t897 + t1030 * t895;
t823 = t1025 * t896 + t1030 * t894;
t822 = -t1023 * t892 + t1028 * t893;
t821 = t1023 * t893 + t1028 * t892;
t820 = -pkin(8) * t941 + t852;
t819 = -pkin(8) * t939 + t851;
t818 = -pkin(3) * t941 + t840;
t817 = -pkin(3) * t939 + t839;
t816 = t1024 * t1017 + t1029 * t822;
t815 = -t1029 * t1017 + t1024 * t822;
t814 = -pkin(1) * t923 + t1052;
t813 = pkin(1) * t919 + t1035;
t810 = -t1025 * t885 + t1030 * t886;
t809 = t1025 * t886 + t1030 * t885;
t801 = pkin(2) * t803;
t800 = pkin(2) * g(1) + pkin(7) * t1063;
t799 = -t1023 * t870 + t1028 * t872;
t798 = -t1023 * t869 + t1028 * t871;
t797 = t1023 * t872 + t1028 * t870;
t796 = t1023 * t871 + t1028 * t869;
t794 = t1023 * t868 + t1028 * t867;
t791 = -t1022 * t1114 - t1027 * t854;
t789 = -t1022 * t854 + t1027 * t1114;
t785 = -t1023 * t837 + t1028 * t838;
t784 = -t1023 * t835 + t1028 * t836;
t783 = t1023 * t838 + t1028 * t837;
t782 = t1023 * t836 + t1028 * t835;
t779 = t1023 * t832 + t1028 * t831;
t773 = -pkin(7) * t917 - t1029 * t786;
t772 = pkin(7) * t921 - t1024 * t786;
t771 = t1029 * t785 + t1067;
t770 = t1029 * t784 - t1067;
t769 = t1024 * t785 - t1066;
t768 = t1024 * t784 + t1066;
t767 = -t1024 * t855 + t1029 * t799;
t766 = t1024 * t859 + t1029 * t798;
t765 = t1024 * t799 + t1029 * t855;
t764 = t1024 * t798 - t1029 * t859;
t763 = -t1025 * t815 + t1030 * t816;
t762 = t1025 * t816 + t1030 * t815;
t761 = t1024 * t1114 + t1029 * t795;
t755 = t1024 * t861 + t1029 * t788;
t752 = t1024 * t854 + t1029 * t780;
t749 = -pkin(7) * t895 - t1024 * t818 + t1029 * t820;
t748 = -pkin(7) * t894 - t1024 * t817 + t1029 * t819;
t747 = pkin(1) * t824 + t1056;
t746 = pkin(1) * t823 + t1055;
t737 = -pkin(2) * t941 + pkin(7) * t897 + t1024 * t820 + t1029 * t818;
t736 = -pkin(2) * t939 + pkin(7) * t896 + t1024 * t819 + t1029 * t817;
t735 = pkin(1) * t863 + t1047;
t733 = -t1023 * t789 + t1028 * t791;
t732 = t1023 * t792 + t1028 * t790;
t731 = t1023 * t791 + t1028 * t789;
t729 = t1024 * t912 + t1029 * t733;
t728 = t1024 * t733 - t1029 * t912;
t727 = t1024 * t887 + t1029 * t734;
t724 = -pkin(1) * t742 + t801;
t723 = -t1025 * t769 + t1030 * t771;
t722 = -t1025 * t768 + t1030 * t770;
t721 = t1025 * t771 + t1030 * t769;
t720 = t1025 * t770 + t1030 * t768;
t719 = -t1025 * t765 + t1030 * t767;
t718 = -t1025 * t764 + t1030 * t766;
t717 = t1025 * t767 + t1030 * t765;
t716 = t1025 * t766 + t1030 * t764;
t715 = -pkin(3) * t794 - t1038;
t714 = -t1025 * t760 + t1030 * t761;
t713 = t1025 * t761 + t1030 * t760;
t712 = -pkin(3) * t732 - t1104;
t709 = -pkin(6) * t863 - t1025 * t772 + t1030 * t773;
t708 = pkin(6) * t865 + t1025 * t773 + t1030 * t772;
t707 = -pkin(3) * t779 - t1043;
t706 = -t1025 * t754 + t1030 * t755;
t705 = t1025 * t755 + t1030 * t754;
t704 = -t1025 * t751 + t1030 * t752;
t703 = t1025 * t752 + t1030 * t751;
t702 = pkin(6) * t742 - pkin(7) * t1085 - t1025 * t800;
t701 = pkin(6) * t1124 - pkin(7) * t1091 + t1030 * t800 + t1032;
t700 = -pkin(7) * t754 + (pkin(3) * t1024 - pkin(8) * t1029) * t786;
t697 = -pkin(8) * t794 - t1023 * t745 + t1028 * t777;
t694 = -pkin(6) * t824 - t1025 * t737 + t1030 * t749;
t693 = -pkin(6) * t823 - t1025 * t736 + t1030 * t748;
t692 = -pkin(8) * t779 - t1023 * t739 + t1028 * t775;
t691 = -pkin(1) * t941 + pkin(6) * t826 + t1025 * t749 + t1030 * t737;
t690 = -pkin(1) * t939 + pkin(6) * t825 + t1025 * t748 + t1030 * t736;
t687 = -t1025 * t728 + t1030 * t729;
t686 = t1025 * t729 + t1030 * t728;
t685 = pkin(7) * t755 + (-pkin(3) * t1029 - pkin(8) * t1024 - pkin(2)) * t786;
t684 = -t1025 * t726 + t1030 * t727;
t683 = t1025 * t727 + t1030 * t726;
t681 = t1023 * t711 + t1087;
t679 = pkin(1) * t705 + t1068;
t678 = t1024 * t812 + t1029 * t682;
t675 = -pkin(7) * t760 - t1024 * t715 + t1029 * t697;
t674 = pkin(1) * t713 + t1048;
t673 = -pkin(7) * t751 - t1024 * t707 + t1029 * t692;
t672 = -pkin(2) * t794 + pkin(7) * t761 + t1024 * t697 + t1029 * t715;
t671 = -pkin(3) * t681 - t1105;
t670 = pkin(1) * t703 + t1049;
t669 = -pkin(2) * t779 + pkin(7) * t752 + t1024 * t692 + t1029 * t707;
t668 = -pkin(8) * t732 - t1023 * t689 + t1028 * t696;
t667 = -pkin(6) * t705 - t1025 * t685 + t1030 * t700;
t666 = -pkin(1) * t786 + pkin(6) * t706 + t1025 * t700 + t1030 * t685;
t665 = -pkin(8) * t681 - pkin(9) * t1087 - t1023 * t699;
t664 = -t1025 * t677 + t1030 * t678;
t663 = t1025 * t678 + t1030 * t677;
t662 = -pkin(7) * t726 - t1024 * t712 + t1029 * t668;
t661 = -pkin(2) * t732 + pkin(7) * t727 + t1024 * t668 + t1029 * t712;
t660 = pkin(1) * t683 + t1050;
t659 = -pkin(6) * t713 - t1025 * t672 + t1030 * t675;
t658 = -pkin(1) * t794 + pkin(6) * t714 + t1025 * t675 + t1030 * t672;
t657 = -pkin(6) * t703 - t1025 * t669 + t1030 * t673;
t656 = -pkin(1) * t779 + pkin(6) * t704 + t1025 * t673 + t1030 * t669;
t655 = -pkin(7) * t677 - t1024 * t671 + t1029 * t665;
t654 = pkin(1) * t663 + t1039;
t653 = -pkin(2) * t681 + pkin(7) * t678 + t1024 * t665 + t1029 * t671;
t652 = -pkin(6) * t683 - t1025 * t661 + t1030 * t662;
t651 = -pkin(1) * t732 + pkin(6) * t684 + t1025 * t662 + t1030 * t661;
t650 = -pkin(6) * t663 - t1025 * t653 + t1030 * t655;
t649 = -pkin(1) * t681 + pkin(6) * t664 + t1025 * t655 + t1030 * t653;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t1006, -t1005, 0, 0, 0, 0, 0, 0, 0, t1018, t907, t906, 0, t877, 0, 0, 0, 0, 0, t1012, t814, t813, 0, t724, t930, t913, t940, t929, t938, 0, t746, t747, t735, t679, t783, t731, t796, t782, t797, t821, t670, t674, t660, t654; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t1001, 0, t1002, 0, t1051, t986, -t1046, -pkin(5) * t1046, 0, 0, t928, 0, t927, 0, t1129, -t1130, t1123, pkin(5) * t1123 + pkin(6) * t1090 - t1031 * t876, 0, 0, t866, 0, t864, 0, t1139, t1140, -t1138, -pkin(5) * t1138 - t1026 * t702 - t1031 * t701, -t1026 * t830 - t1031 * t828, -t1026 * t810 - t1031 * t809, -t1026 * t844 - t1031 * t842, -t1026 * t829 - t1031 * t827, -t1026 * t843 - t1031 * t841, -t1026 * t889 - t1031 * t888, -t1026 * t693 - t1031 * t690 - pkin(5) * (-t1026 * t823 + t1031 * t825), -t1026 * t694 - t1031 * t691 - pkin(5) * (-t1026 * t824 + t1031 * t826), -t1026 * t709 - t1031 * t708 - pkin(5) * (-t1026 * t863 + t1031 * t865), -t1026 * t667 - t1031 * t666 - pkin(5) * (-t1026 * t705 + t1031 * t706), -t1026 * t723 - t1031 * t721, -t1026 * t687 - t1031 * t686, -t1026 * t718 - t1031 * t716, -t1026 * t722 - t1031 * t720, -t1026 * t719 - t1031 * t717, -t1026 * t763 - t1031 * t762, -t1026 * t657 - t1031 * t656 - pkin(5) * (-t1026 * t703 + t1031 * t704), -t1026 * t659 - t1031 * t658 - pkin(5) * (-t1026 * t713 + t1031 * t714), -t1026 * t652 - t1031 * t651 - pkin(5) * (-t1026 * t683 + t1031 * t684), -t1026 * t650 - t1031 * t649 - pkin(5) * (-t1026 * t663 + t1031 * t664); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t1002, 0, -t1001, 0, -t986, t1051, t1045, pkin(5) * t1045, 0, 0, -t927, 0, t928, 0, t1130, t1129, t1125, pkin(5) * t1125 - pkin(6) * t1084 - t1026 * t876, 0, 0, -t864, 0, t866, 0, -t1140, t1139, t1137, pkin(5) * t1137 - t1026 * t701 + t1031 * t702, -t1026 * t828 + t1031 * t830, -t1026 * t809 + t1031 * t810, -t1026 * t842 + t1031 * t844, -t1026 * t827 + t1031 * t829, -t1026 * t841 + t1031 * t843, -t1026 * t888 + t1031 * t889, t1031 * t693 - t1026 * t690 + pkin(5) * (-t1026 * t825 - t1031 * t823), t1031 * t694 - t1026 * t691 + pkin(5) * (-t1026 * t826 - t1031 * t824), t1031 * t709 - t1026 * t708 + pkin(5) * (-t1026 * t865 - t1031 * t863), t1031 * t667 - t1026 * t666 + pkin(5) * (-t1026 * t706 - t1031 * t705), -t1026 * t721 + t1031 * t723, -t1026 * t686 + t1031 * t687, -t1026 * t716 + t1031 * t718, -t1026 * t720 + t1031 * t722, -t1026 * t717 + t1031 * t719, -t1026 * t762 + t1031 * t763, t1031 * t657 - t1026 * t656 + pkin(5) * (-t1026 * t704 - t1031 * t703), t1031 * t659 - t1026 * t658 + pkin(5) * (-t1026 * t714 - t1031 * t713), t1031 * t652 - t1026 * t651 + pkin(5) * (-t1026 * t684 - t1031 * t683), t1031 * t650 - t1026 * t649 + pkin(5) * (-t1026 * t664 - t1031 * t663); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1034, 0, 0, -g(1), -t1006, 0, 0, 0, -t991, 0, -t988, 0, t1116, t966, -t880, -pkin(6) * t880, 0, 0, -t923, 0, t919, 0, t1128, -t845, t742, t702, t830, t810, t844, t829, t843, t889, t693, t694, t709, t667, t723, t687, t718, t722, t719, t763, t657, t659, t652, t650; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1034, 0, qJDD(1), 0, g(1), 0, t1005, 0, 0, 0, t988, 0, -t991, 0, -t966, t1116, t1062, t876, 0, 0, -t919, 0, -t923, 0, t845, t1128, t1124, t701, t828, t809, t842, t827, t841, t888, t690, t691, t708, t666, t721, t686, t716, t720, t717, t762, t656, t658, t651, t649; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1006, -t1005, 0, 0, 0, 0, 0, 0, 0, t1018, t907, t906, 0, t877, 0, 0, 0, 0, 0, t1012, t814, t813, 0, t724, t930, t913, t940, t929, t938, 0, t746, t747, t735, t679, t783, t731, t796, t782, t797, t821, t670, t674, t660, t654; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1018, 0, -t1016, 0, 0, -g(1), -t1037, 0, 0, 0, -t983, 0, -t980, 0, t1115, t956, -t803, -pkin(7) * t803, t902, t886, t911, t901, t910, t948, t748, t749, t773, t700, t771, t729, t766, t770, t767, t816, t673, t675, t662, t655; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1016, 0, t1018, 0, g(1), 0, t937, 0, 0, 0, t980, 0, -t983, 0, -t956, t1115, t1063, t800, t900, t885, t909, t899, t908, t947, t736, t737, t772, t685, t769, t728, t764, t768, t765, t815, t669, t672, t661, t653; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1018, t1037, -t937, 0, 0, 0, 0, 0, 0, 0, t1012, t1052, t1035, 0, t801, t930, t913, t940, t929, t938, 0, t1055, t1056, t1047, t1068, t783, t731, t796, t782, t797, t821, t1049, t1048, t1050, t1039; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1012, 0, -t1011, 0, 0, -g(1), t874, 0, t935, t914, t944, t934, t942, t971, t819, t820, -t786, -pkin(8) * t786, t785, t733, t798, t784, t799, t822, t692, t697, t668, t665; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1011, 0, t1012, 0, g(1), 0, t875, 0, t1000, -t985, -t1076, -t1000, -t1074, -qJDD(4), t817, t818, 0, -pkin(3) * t786, -t915, -t912, -t859, t915, t855, -t1017, t707, t715, t712, t671; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1012, -t874, -t875, 0, 0, t930, t913, t940, t929, t938, 0, t1069, t1070, t1057, t1099, t783, t731, t796, t782, t797, t821, t1059, t1058, t1060, t1042; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t976, t977, t992, -t1004, t997, t1004, 0, t861, t839, 0, t838, t791, t871, t836, t872, t893, t775, t777, t696, -pkin(9) * t710; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1065, t975, t995, -t1041, t993, -t1065, -t861, 0, t840, 0, t837, t789, t869, t835, t870, t892, t739, t745, t689, t699; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1000, t985, t1076, t1000, t1074, qJDD(4), -t839, -t840, 0, 0, t915, t912, t859, -t915, -t855, t1017, t1043, t1038, t1104, t1105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t884, -t854, t1113, t952, t949, -t952, 0, t812, t757, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1098, t1114, t950, t883, t904, -t1098, -t812, 0, t758, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t915, t912, t859, -t915, -t855, t1017, -t757, -t758, 0, 0;];
m_new_reg = t1;
