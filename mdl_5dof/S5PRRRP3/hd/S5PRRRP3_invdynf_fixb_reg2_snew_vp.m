% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRRRP3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d4,theta1]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:44
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRRRP3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRP3_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRP3_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRP3_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRP3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRRRP3_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:44:36
% EndTime: 2019-12-05 16:44:38
% DurationCPUTime: 1.81s
% Computational Cost: add. (6045->155), mult. (12696->222), div. (0->0), fcn. (8777->8), ass. (0->130)
t1202 = qJD(3) + qJD(4);
t1240 = qJD(4) + t1202;
t1209 = sin(qJ(4));
t1212 = cos(qJ(4));
t1213 = cos(qJ(3));
t1233 = qJD(2) * t1213;
t1210 = sin(qJ(3));
t1234 = qJD(2) * t1210;
t1173 = t1209 * t1234 - t1212 * t1233;
t1239 = t1173 ^ 2;
t1175 = (t1209 * t1213 + t1210 * t1212) * qJD(2);
t1238 = t1175 ^ 2;
t1237 = t1202 ^ 2;
t1236 = t1213 ^ 2;
t1235 = -2 * qJD(5);
t1232 = t1175 * t1173;
t1216 = qJD(2) ^ 2;
t1231 = t1236 * t1216;
t1230 = qJD(4) - t1202;
t1206 = sin(pkin(8));
t1207 = cos(pkin(8));
t1189 = -g(1) * t1207 - g(2) * t1206;
t1211 = sin(qJ(2));
t1214 = cos(qJ(2));
t1221 = g(1) * t1206 - g(2) * t1207;
t1164 = t1214 * t1189 + t1211 * t1221;
t1160 = -pkin(2) * t1216 + qJDD(2) * pkin(6) + t1164;
t1204 = -g(3) + qJDD(1);
t1149 = -t1210 * t1160 + t1213 * t1204;
t1224 = qJD(3) * t1233;
t1229 = t1210 * qJDD(2);
t1183 = t1224 + t1229;
t1195 = t1210 * t1216 * t1213;
t1190 = qJDD(3) + t1195;
t1136 = (-t1183 + t1224) * pkin(7) + t1190 * pkin(3) + t1149;
t1152 = t1213 * t1160 + t1210 * t1204;
t1192 = qJD(3) * pkin(3) - pkin(7) * t1234;
t1225 = qJD(3) * t1234;
t1228 = t1213 * qJDD(2);
t1218 = -t1225 + t1228;
t1137 = -pkin(3) * t1231 + pkin(7) * t1218 - qJD(3) * t1192 + t1152;
t1122 = t1209 * t1136 + t1212 * t1137;
t1227 = -qJDD(3) - qJDD(4);
t1203 = t1210 ^ 2;
t1226 = t1203 + t1236;
t1121 = t1212 * t1136 - t1209 * t1137;
t1223 = t1209 * t1183 - t1212 * t1218;
t1186 = qJDD(2) * t1214 - t1211 * t1216;
t1187 = -qJDD(2) * t1211 - t1214 * t1216;
t1222 = -t1186 * t1206 + t1207 * t1187;
t1163 = -t1211 * t1189 + t1214 * t1221;
t1157 = -t1227 - t1232;
t1220 = t1186 * t1207 + t1187 * t1206;
t1159 = -qJDD(2) * pkin(2) - t1216 * pkin(6) - t1163;
t1219 = -qJD(4) * t1175 - t1223;
t1217 = -t1212 * t1183 - t1209 * t1218;
t1144 = -t1218 * pkin(3) - pkin(7) * t1231 + t1192 * t1234 + t1159;
t1141 = t1173 * t1230 + t1217;
t1215 = qJD(3) ^ 2;
t1194 = -t1215 - t1231;
t1193 = -t1203 * t1216 - t1215;
t1191 = -qJDD(3) + t1195;
t1188 = t1226 * t1216;
t1185 = t1226 * qJDD(2);
t1184 = -0.2e1 * t1225 + t1228;
t1182 = 0.2e1 * t1224 + t1229;
t1170 = pkin(4) * t1202 - qJ(5) * t1175;
t1169 = -t1237 - t1238;
t1168 = t1191 * t1213 - t1193 * t1210;
t1167 = -t1190 * t1210 + t1194 * t1213;
t1166 = t1191 * t1210 + t1193 * t1213;
t1165 = t1190 * t1213 + t1194 * t1210;
t1162 = t1185 * t1214 - t1188 * t1211;
t1161 = t1185 * t1211 + t1188 * t1214;
t1158 = t1227 - t1232;
t1155 = -t1237 - t1239;
t1154 = t1168 * t1214 + t1182 * t1211;
t1153 = t1167 * t1214 - t1184 * t1211;
t1151 = t1168 * t1211 - t1182 * t1214;
t1150 = t1167 * t1211 + t1184 * t1214;
t1148 = -t1238 - t1239;
t1146 = -t1163 * t1211 + t1164 * t1214;
t1145 = t1163 * t1214 + t1164 * t1211;
t1143 = t1158 * t1212 - t1169 * t1209;
t1142 = t1158 * t1209 + t1169 * t1212;
t1140 = -t1173 * t1240 - t1217;
t1139 = -t1175 * t1230 - t1223;
t1138 = t1175 * t1240 + t1223;
t1132 = t1155 * t1212 - t1157 * t1209;
t1131 = t1155 * t1209 + t1157 * t1212;
t1130 = -t1149 * t1210 + t1152 * t1213;
t1129 = t1149 * t1213 + t1152 * t1210;
t1128 = t1130 * t1214 + t1159 * t1211;
t1127 = t1130 * t1211 - t1159 * t1214;
t1126 = -t1142 * t1210 + t1143 * t1213;
t1125 = t1142 * t1213 + t1143 * t1210;
t1124 = t1139 * t1212 - t1141 * t1209;
t1123 = t1139 * t1209 + t1141 * t1212;
t1120 = -t1131 * t1210 + t1132 * t1213;
t1119 = t1131 * t1213 + t1132 * t1210;
t1118 = -pkin(4) * t1219 - qJ(5) * t1239 + t1175 * t1170 + qJDD(5) + t1144;
t1117 = t1126 * t1214 + t1140 * t1211;
t1116 = t1126 * t1211 - t1140 * t1214;
t1115 = t1120 * t1214 + t1138 * t1211;
t1114 = t1120 * t1211 - t1138 * t1214;
t1113 = -t1202 * t1170 + t1219 * qJ(5) + (-pkin(4) * t1173 + t1235) * t1173 + t1122;
t1112 = pkin(4) * t1157 + qJ(5) * t1141 + t1175 * t1235 + t1121;
t1111 = -t1123 * t1210 + t1124 * t1213;
t1110 = t1123 * t1213 + t1124 * t1210;
t1109 = -t1121 * t1209 + t1122 * t1212;
t1108 = t1121 * t1212 + t1122 * t1209;
t1107 = t1111 * t1214 + t1148 * t1211;
t1106 = t1111 * t1211 - t1148 * t1214;
t1105 = -t1116 * t1206 + t1117 * t1207;
t1104 = t1116 * t1207 + t1117 * t1206;
t1103 = -t1114 * t1206 + t1115 * t1207;
t1102 = t1114 * t1207 + t1115 * t1206;
t1101 = -t1112 * t1209 + t1113 * t1212;
t1100 = t1112 * t1212 + t1113 * t1209;
t1099 = -t1108 * t1210 + t1109 * t1213;
t1098 = t1108 * t1213 + t1109 * t1210;
t1097 = -t1106 * t1206 + t1107 * t1207;
t1096 = t1106 * t1207 + t1107 * t1206;
t1095 = t1099 * t1214 + t1144 * t1211;
t1094 = t1099 * t1211 - t1144 * t1214;
t1093 = -t1100 * t1210 + t1101 * t1213;
t1092 = t1100 * t1213 + t1101 * t1210;
t1091 = t1093 * t1214 + t1118 * t1211;
t1090 = t1093 * t1211 - t1118 * t1214;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1207 * t1189 - t1206 * t1221, 0, 0, 0, 0, 0, 0, t1222, -t1220, 0, -t1145 * t1206 + t1146 * t1207, 0, 0, 0, 0, 0, 0, -t1150 * t1206 + t1153 * t1207, -t1151 * t1206 + t1154 * t1207, -t1161 * t1206 + t1162 * t1207, -t1127 * t1206 + t1128 * t1207, 0, 0, 0, 0, 0, 0, t1103, t1105, t1097, -t1094 * t1206 + t1095 * t1207, 0, 0, 0, 0, 0, 0, t1103, t1105, t1097, -t1090 * t1206 + t1091 * t1207; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1206 * t1189 + t1207 * t1221, 0, 0, 0, 0, 0, 0, t1220, t1222, 0, t1145 * t1207 + t1146 * t1206, 0, 0, 0, 0, 0, 0, t1150 * t1207 + t1153 * t1206, t1151 * t1207 + t1154 * t1206, t1161 * t1207 + t1162 * t1206, t1127 * t1207 + t1128 * t1206, 0, 0, 0, 0, 0, 0, t1102, t1104, t1096, t1094 * t1207 + t1095 * t1206, 0, 0, 0, 0, 0, 0, t1102, t1104, t1096, t1090 * t1207 + t1091 * t1206; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1204, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1204, 0, 0, 0, 0, 0, 0, t1165, t1166, 0, t1129, 0, 0, 0, 0, 0, 0, t1119, t1125, t1110, t1098, 0, 0, 0, 0, 0, 0, t1119, t1125, t1110, t1092; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1189, 0, 0, 0, 0, 0, 0, t1187, -t1186, 0, t1146, 0, 0, 0, 0, 0, 0, t1153, t1154, t1162, t1128, 0, 0, 0, 0, 0, 0, t1115, t1117, t1107, t1095, 0, 0, 0, 0, 0, 0, t1115, t1117, t1107, t1091; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1221, 0, 0, 0, 0, 0, 0, t1186, t1187, 0, t1145, 0, 0, 0, 0, 0, 0, t1150, t1151, t1161, t1127, 0, 0, 0, 0, 0, 0, t1114, t1116, t1106, t1094, 0, 0, 0, 0, 0, 0, t1114, t1116, t1106, t1090; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1204, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1204, 0, 0, 0, 0, 0, 0, t1165, t1166, 0, t1129, 0, 0, 0, 0, 0, 0, t1119, t1125, t1110, t1098, 0, 0, 0, 0, 0, 0, t1119, t1125, t1110, t1092; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1216, -qJDD(2), 0, t1164, 0, 0, 0, 0, 0, 0, t1167, t1168, t1185, t1130, 0, 0, 0, 0, 0, 0, t1120, t1126, t1111, t1099, 0, 0, 0, 0, 0, 0, t1120, t1126, t1111, t1093; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1216, 0, t1163, 0, 0, 0, 0, 0, 0, t1184, -t1182, t1188, -t1159, 0, 0, 0, 0, 0, 0, -t1138, -t1140, -t1148, -t1144, 0, 0, 0, 0, 0, 0, -t1138, -t1140, -t1148, -t1118; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1204, 0, 0, 0, 0, 0, 0, t1165, t1166, 0, t1129, 0, 0, 0, 0, 0, 0, t1119, t1125, t1110, t1098, 0, 0, 0, 0, 0, 0, t1119, t1125, t1110, t1092; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1194, t1191, t1228, t1152, 0, 0, 0, 0, 0, 0, t1132, t1143, t1124, t1109, 0, 0, 0, 0, 0, 0, t1132, t1143, t1124, t1101; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1190, t1193, -t1229, t1149, 0, 0, 0, 0, 0, 0, t1131, t1142, t1123, t1108, 0, 0, 0, 0, 0, 0, t1131, t1142, t1123, t1100; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1184, t1182, -t1188, t1159, 0, 0, 0, 0, 0, 0, t1138, t1140, t1148, t1144, 0, 0, 0, 0, 0, 0, t1138, t1140, t1148, t1118; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1155, t1158, t1139, t1122, 0, 0, 0, 0, 0, 0, t1155, t1158, t1139, t1113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1157, t1169, t1141, t1121, 0, 0, 0, 0, 0, 0, t1157, t1169, t1141, t1112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1138, t1140, t1148, t1144, 0, 0, 0, 0, 0, 0, t1138, t1140, t1148, t1118; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1155, t1158, t1139, t1113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1157, t1169, t1141, t1112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1138, t1140, t1148, t1118;];
f_new_reg = t1;
