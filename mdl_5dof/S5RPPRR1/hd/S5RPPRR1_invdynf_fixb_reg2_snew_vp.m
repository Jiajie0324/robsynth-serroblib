% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPPRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:38
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPPRR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPPRR1_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:38:32
% EndTime: 2019-12-05 17:38:33
% DurationCPUTime: 1.36s
% Computational Cost: add. (2598->167), mult. (5150->162), div. (0->0), fcn. (2905->6), ass. (0->97)
t826 = qJD(4) + qJD(5);
t862 = qJD(5) + t826;
t838 = qJD(1) ^ 2;
t833 = sin(qJ(1));
t836 = cos(qJ(1));
t814 = -t836 * g(1) - t833 * g(2);
t841 = -qJDD(1) * qJ(2) - (2 * qJD(2) * qJD(1)) - t814;
t857 = pkin(1) + qJ(3);
t793 = t857 * t838 - qJDD(3) + t841;
t831 = sin(qJ(5));
t832 = sin(qJ(4));
t834 = cos(qJ(5));
t835 = cos(qJ(4));
t797 = (-t831 * t835 - t832 * t834) * qJD(1);
t861 = t797 ^ 2;
t853 = qJD(1) * t835;
t799 = -t831 * t832 * qJD(1) + t834 * t853;
t860 = t799 ^ 2;
t859 = t826 ^ 2;
t858 = 2 * qJD(3);
t856 = t799 * t797;
t828 = t832 ^ 2;
t855 = t828 * t838;
t786 = -qJDD(1) * pkin(6) - t793;
t781 = t832 * g(3) + t835 * t786;
t829 = t835 ^ 2;
t854 = t828 + t829;
t852 = qJD(5) - t826;
t851 = qJD(1) * qJD(4);
t850 = t832 * qJDD(1);
t849 = t835 * qJDD(1);
t848 = -qJDD(4) - qJDD(5);
t847 = t832 * t838 * t835;
t846 = t832 * t851;
t845 = t835 * t851;
t813 = t833 * g(1) - t836 * g(2);
t782 = -t835 * g(3) + t832 * t786;
t803 = -t845 - t850;
t804 = -t846 + t849;
t844 = t834 * t803 - t831 * t804;
t810 = qJDD(4) - t847;
t843 = -t831 * t803 - t834 * t804;
t842 = t838 * qJ(2) - qJDD(2) + t813;
t839 = t857 * qJDD(1) + t842;
t792 = (qJD(1) * t858) + t839;
t837 = qJD(4) ^ 2;
t830 = t838 * pkin(6);
t816 = -t829 * t838 - t837;
t815 = -t837 - t855;
t812 = (qJD(4) * pkin(4)) - pkin(7) * t853;
t811 = -qJDD(4) - t847;
t809 = t854 * t838;
t808 = t833 * qJDD(1) + t836 * t838;
t807 = t836 * qJDD(1) - t833 * t838;
t806 = t854 * qJDD(1);
t805 = -0.2e1 * t846 + t849;
t802 = 0.2e1 * t845 + t850;
t796 = qJDD(1) * pkin(1) + t842;
t795 = t838 * pkin(1) + t841;
t791 = -t859 - t860;
t790 = t835 * t811 - t832 * t816;
t789 = -t832 * t810 + t835 * t815;
t788 = t832 * t811 + t835 * t816;
t787 = t835 * t810 + t832 * t815;
t785 = -t830 + t792;
t780 = t848 + t856;
t779 = -t848 + t856;
t778 = -t859 - t861;
t777 = -t860 - t861;
t776 = -t803 * pkin(4) - pkin(7) * t855 - t830 + (t812 * t835 + t858) * qJD(1) + t839;
t775 = -pkin(4) * t855 + t803 * pkin(7) - qJD(4) * t812 + t782;
t774 = (-t804 - t846) * pkin(7) + t810 * pkin(4) + t781;
t773 = t834 * t780 - t831 * t791;
t772 = t831 * t780 + t834 * t791;
t771 = -t852 * t797 + t843;
t770 = t862 * t797 - t843;
t769 = -t852 * t799 + t844;
t768 = t862 * t799 - t844;
t767 = -t832 * t781 + t835 * t782;
t766 = t835 * t781 + t832 * t782;
t765 = t834 * t778 - t831 * t779;
t764 = t831 * t778 + t834 * t779;
t763 = t831 * t774 + t834 * t775;
t762 = t834 * t774 - t831 * t775;
t761 = -t832 * t772 + t835 * t773;
t760 = t835 * t772 + t832 * t773;
t759 = t834 * t769 - t831 * t771;
t758 = t831 * t769 + t834 * t771;
t757 = -t832 * t764 + t835 * t765;
t756 = t835 * t764 + t832 * t765;
t755 = -t831 * t762 + t834 * t763;
t754 = t834 * t762 + t831 * t763;
t753 = -t832 * t758 + t835 * t759;
t752 = t835 * t758 + t832 * t759;
t751 = -t832 * t754 + t835 * t755;
t750 = t835 * t754 + t832 * t755;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t808, -t807, 0, -t833 * t813 + t836 * t814, 0, 0, 0, 0, 0, 0, 0, t808, t807, -t836 * t795 - t833 * t796, 0, 0, 0, 0, 0, 0, 0, t807, -t808, -t833 * t792 - t836 * t793, 0, 0, 0, 0, 0, 0, t836 * t787 - t833 * t802, t836 * t788 - t833 * t805, -t836 * t806 + t833 * t809, t836 * t766 - t833 * t785, 0, 0, 0, 0, 0, 0, t836 * t756 - t833 * t768, t836 * t760 - t833 * t770, t836 * t752 - t833 * t777, t836 * t750 - t833 * t776; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t807, -t808, 0, t836 * t813 + t833 * t814, 0, 0, 0, 0, 0, 0, 0, -t807, t808, -t833 * t795 + t836 * t796, 0, 0, 0, 0, 0, 0, 0, t808, t807, t836 * t792 - t833 * t793, 0, 0, 0, 0, 0, 0, t833 * t787 + t836 * t802, t833 * t788 + t836 * t805, -t833 * t806 - t836 * t809, t833 * t766 + t836 * t785, 0, 0, 0, 0, 0, 0, t833 * t756 + t836 * t768, t833 * t760 + t836 * t770, t833 * t752 + t836 * t777, t833 * t750 + t836 * t776; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t789, t790, 0, t767, 0, 0, 0, 0, 0, 0, t757, t761, t753, t751; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t838, -qJDD(1), 0, t814, 0, 0, 0, 0, 0, 0, 0, t838, qJDD(1), -t795, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t838, -t793, 0, 0, 0, 0, 0, 0, t787, t788, -t806, t766, 0, 0, 0, 0, 0, 0, t756, t760, t752, t750; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t838, 0, t813, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), t838, t796, 0, 0, 0, 0, 0, 0, 0, t838, qJDD(1), t792, 0, 0, 0, 0, 0, 0, t802, t805, -t809, t785, 0, 0, 0, 0, 0, 0, t768, t770, t777, t776; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t789, t790, 0, t767, 0, 0, 0, 0, 0, 0, t757, t761, t753, t751; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t789, t790, 0, t767, 0, 0, 0, 0, 0, 0, t757, t761, t753, t751; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t838, -qJDD(1), t795, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), t838, t793, 0, 0, 0, 0, 0, 0, -t787, -t788, t806, -t766, 0, 0, 0, 0, 0, 0, -t756, -t760, -t752, -t750; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t838, -t796, 0, 0, 0, 0, 0, 0, 0, -t838, -qJDD(1), -t792, 0, 0, 0, 0, 0, 0, -t802, -t805, t809, -t785, 0, 0, 0, 0, 0, 0, -t768, -t770, -t777, -t776; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t789, t790, 0, t767, 0, 0, 0, 0, 0, 0, t757, t761, t753, t751; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t838, -qJDD(1), -t792, 0, 0, 0, 0, 0, 0, -t802, -t805, t809, -t785, 0, 0, 0, 0, 0, 0, -t768, -t770, -t777, -t776; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t838, -t793, 0, 0, 0, 0, 0, 0, t787, t788, -t806, t766, 0, 0, 0, 0, 0, 0, t756, t760, t752, t750; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t815, t811, -t850, t782, 0, 0, 0, 0, 0, 0, t765, t773, t759, t755; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t810, t816, -t849, t781, 0, 0, 0, 0, 0, 0, t764, t772, t758, t754; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t802, t805, -t809, t785, 0, 0, 0, 0, 0, 0, t768, t770, t777, t776; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t778, t780, t769, t763; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t779, t791, t771, t762; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t768, t770, t777, t776;];
f_new_reg = t1;
