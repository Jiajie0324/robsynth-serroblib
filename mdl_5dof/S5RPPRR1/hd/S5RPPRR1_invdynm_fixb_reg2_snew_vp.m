% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPPRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:38
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPPRR1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR1_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR1_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR1_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPPRR1_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:38:26
% EndTime: 2019-12-05 17:38:32
% DurationCPUTime: 6.31s
% Computational Cost: add. (14880->453), mult. (29528->487), div. (0->0), fcn. (16388->6), ass. (0->274)
t612 = sin(qJ(5));
t605 = qJDD(4) + qJDD(5);
t613 = sin(qJ(4));
t615 = cos(qJ(5));
t616 = cos(qJ(4));
t555 = (-t616 * t612 - t613 * t615) * qJD(1);
t703 = qJD(1) * t616;
t557 = -t612 * t613 * qJD(1) + t615 * t703;
t725 = t557 * t555;
t747 = t605 + t725;
t749 = t612 * t747;
t748 = t615 * t747;
t701 = qJD(1) * qJD(4);
t687 = t613 * t701;
t697 = t616 * qJDD(1);
t572 = -t687 + t697;
t686 = t616 * t701;
t699 = t613 * qJDD(1);
t639 = t686 + t699;
t626 = t555 * qJD(5) + t615 * t572 - t612 * t639;
t606 = qJD(4) + qJD(5);
t724 = t606 * t555;
t746 = t626 + t724;
t620 = qJD(1) ^ 2;
t728 = pkin(1) + qJ(3);
t745 = t728 * t620;
t607 = qJDD(1) * qJ(2);
t614 = sin(qJ(1));
t617 = cos(qJ(1));
t587 = t617 * g(1) + t614 * g(2);
t654 = 0.2e1 * qJD(2) * qJD(1) - t587;
t637 = qJDD(3) + t654;
t635 = t607 + t637;
t521 = -qJDD(1) * pkin(6) + t635 - t745;
t505 = t613 * g(3) + t616 * t521;
t506 = t616 * g(3) - t613 * t521;
t467 = t616 * t505 - t613 * t506;
t734 = pkin(2) + pkin(3);
t744 = t734 * t467;
t468 = -t613 * t505 - t616 * t506;
t735 = 2 * qJD(3);
t694 = qJD(1) * t735;
t743 = 0.2e1 * qJDD(1) * qJ(3) + t694;
t592 = t613 * t620 * t616;
t584 = qJDD(4) - t592;
t486 = (-t572 - t687) * pkin(7) + t584 * pkin(4) + t505;
t585 = qJD(4) * pkin(4) - pkin(7) * t703;
t736 = t613 ^ 2;
t714 = t736 * t620;
t491 = -pkin(4) * t714 - pkin(7) * t639 - qJD(4) * t585 - t506;
t445 = -t615 * t486 + t612 * t491;
t446 = t612 * t486 + t615 * t491;
t417 = t612 * t445 + t615 * t446;
t416 = -t615 * t445 + t612 * t446;
t710 = t616 * t416;
t400 = t613 * t417 + t710;
t415 = pkin(4) * t416;
t742 = -t734 * t400 - t415;
t677 = t612 * t572 + t615 * t639;
t480 = (qJD(5) - t606) * t557 + t677;
t483 = -t724 + t626;
t439 = -t480 * t612 - t615 * t483;
t440 = -t480 * t615 + t612 * t483;
t412 = t616 * t439 + t613 * t440;
t436 = pkin(4) * t439;
t741 = -t734 * t412 - t436;
t553 = t555 ^ 2;
t604 = t606 ^ 2;
t502 = -t604 - t553;
t464 = t612 * t502 + t748;
t465 = t615 * t502 - t749;
t425 = t616 * t464 + t613 * t465;
t663 = -pkin(4) * t464 + t445;
t740 = -t734 * t425 + t663;
t554 = t557 ^ 2;
t536 = -t554 - t604;
t503 = -t725 + t605;
t720 = t612 * t503;
t484 = t615 * t536 - t720;
t712 = t615 * t503;
t485 = -t612 * t536 - t712;
t441 = t616 * t484 + t613 * t485;
t691 = -pkin(4) * t484 + t446;
t739 = -t734 * t441 + t691;
t619 = qJD(4) ^ 2;
t589 = -t619 - t714;
t707 = t616 * t584;
t528 = t613 * t589 + t707;
t738 = -t734 * t528 - t505;
t608 = t616 ^ 2;
t722 = t608 * t620;
t590 = -t619 - t722;
t583 = qJDD(4) + t592;
t715 = t613 * t583;
t530 = t616 * t590 - t715;
t737 = -t734 * t530 - t506;
t586 = t614 * g(1) - t617 * g(2);
t664 = -qJDD(2) + t586;
t636 = t620 * qJ(2) + t664;
t629 = t728 * qJDD(1) + t636;
t537 = t629 + t694;
t733 = pkin(2) * t537;
t696 = t617 * qJDD(1);
t579 = -t614 * t620 + t696;
t732 = pkin(5) * t579;
t698 = t614 * qJDD(1);
t580 = t617 * t620 + t698;
t731 = pkin(5) * t580;
t730 = pkin(6) * t467;
t729 = t620 * pkin(1);
t727 = qJ(2) - pkin(6);
t726 = qJDD(1) * pkin(1);
t723 = t606 * t557;
t610 = t620 * pkin(6);
t493 = t639 * pkin(4) - pkin(7) * t714 - t610 + (t585 * t616 + t735) * qJD(1) + t629;
t721 = t612 * t493;
t719 = t612 * t555;
t718 = t612 * t557;
t717 = t613 * t416;
t520 = -t610 + t537;
t512 = t613 * t520;
t571 = 0.2e1 * t686 + t699;
t526 = t613 * t571;
t713 = t615 * t493;
t711 = t615 * t606;
t709 = t616 * t520;
t708 = t616 * t583;
t706 = -pkin(3) * t520 + pkin(6) * t468;
t705 = t553 - t604;
t704 = -t554 + t604;
t695 = t608 + t736;
t693 = t614 * t725;
t692 = t617 * t725;
t581 = t695 * t620;
t690 = pkin(3) * t581 + t468;
t535 = -t613 * t590 - t708;
t573 = -0.2e1 * t687 + t697;
t689 = -pkin(3) * t573 + pkin(6) * t535 + t512;
t567 = t613 * t584;
t532 = t616 * t589 - t567;
t688 = -pkin(3) * t571 + pkin(6) * t532 - t709;
t685 = -pkin(6) * t530 + t709;
t497 = -t553 - t554;
t403 = -pkin(4) * t497 + pkin(7) * t440 + t417;
t406 = -pkin(7) * t439 - t416;
t683 = -t613 * t403 + t616 * t406;
t479 = (qJD(5) + t606) * t557 + t677;
t421 = -pkin(4) * t479 + pkin(7) * t465 - t713;
t435 = -pkin(7) * t464 + t721;
t682 = -t613 * t421 + t616 * t435;
t423 = -pkin(4) * t746 + pkin(7) * t485 + t721;
t453 = -pkin(7) * t484 + t713;
t681 = -t613 * t423 + t616 * t453;
t633 = -t607 - t654;
t538 = -qJDD(3) + t633 + t745;
t679 = -t614 * t537 - t617 * t538;
t545 = t633 + t729;
t547 = t636 + t726;
t678 = -t617 * t545 - t614 * t547;
t676 = -t614 * t586 - t617 * t587;
t675 = -t619 + t722;
t674 = -t619 + t714;
t673 = t614 * t592;
t672 = t617 * t592;
t414 = -t613 * t439 + t616 * t440;
t671 = -pkin(3) * t497 + pkin(6) * t414 + t616 * t403 + t613 * t406;
t426 = -t613 * t464 + t616 * t465;
t670 = -pkin(3) * t479 + pkin(6) * t426 + t616 * t421 + t613 * t435;
t442 = -t613 * t484 + t616 * t485;
t669 = -pkin(3) * t746 + pkin(6) * t442 + t616 * t423 + t613 * t453;
t668 = pkin(2) * t520 - t706;
t667 = pkin(2) * t538 - qJ(3) * g(3);
t666 = t614 * g(3) + t732;
t665 = t617 * g(3) - t731;
t662 = -pkin(6) * t528 + t512;
t661 = t617 * t537 - t614 * t538;
t660 = t614 * t545 - t617 * t547;
t659 = t615 * t555 + t718;
t658 = -t615 * t557 + t719;
t657 = t617 * t586 - t614 * t587;
t656 = pkin(2) * t573 - t689;
t655 = pkin(2) * t571 - t688;
t408 = -pkin(4) * t493 + pkin(7) * t417;
t653 = -pkin(7) * t710 - t613 * t408;
t652 = -pkin(6) * t412 + t683;
t651 = -pkin(6) * t425 + t682;
t650 = -pkin(6) * t441 + t681;
t578 = t695 * qJDD(1);
t649 = pkin(6) * t578 - t467;
t648 = -t557 * qJD(5) - t677;
t401 = t616 * t417 - t717;
t647 = -pkin(3) * t493 + pkin(6) * t401 - pkin(7) * t717 + t616 * t408;
t646 = pkin(2) * t497 - t671;
t645 = pkin(2) * t479 - t670;
t644 = pkin(2) * t746 - t669;
t643 = t659 * t606;
t642 = t658 * t606;
t641 = t612 * t705 + t712;
t640 = t615 * t705 - t720;
t597 = pkin(2) * t620 - g(3);
t638 = -pkin(2) * t698 - t617 * t597 - t731;
t562 = -t664 - 0.2e1 * t726;
t634 = -pkin(6) * t400 + t653;
t632 = pkin(2) * t493 - t647;
t631 = t615 * t704 + t749;
t630 = -t612 * t704 + t748;
t628 = t606 * t719 - t615 * t648;
t627 = -t555 * t711 - t612 * t648;
t624 = t612 * t479 - t615 * t746;
t623 = t557 * t711 + t612 * t626;
t622 = -t615 * t479 - t612 * t746;
t621 = -t606 * t718 + t615 * t626;
t618 = pkin(1) * g(3);
t611 = qJ(2) * g(3);
t609 = pkin(2) * qJDD(1);
t599 = 0.2e1 * t607;
t582 = (t608 - t736) * t620;
t570 = pkin(3) * t578;
t566 = t695 * t701;
t552 = t599 + t654;
t546 = t599 + t637;
t542 = -t562 + t743;
t541 = t613 * t572 + t608 * t701;
t540 = t616 * t639 - t736 * t701;
t534 = t613 * t675 + t707;
t533 = (t572 - t687) * t616;
t531 = t616 * t674 - t715;
t529 = t616 * t675 - t567;
t527 = -t613 * t674 - t708;
t525 = pkin(2) * t578 + t570;
t522 = -pkin(2) * t696 + t614 * t597 - t732;
t517 = t611 - t733;
t511 = -t616 * t571 - t613 * t573;
t510 = -t616 * t573 + t526;
t508 = t618 - t667;
t507 = t554 - t553;
t498 = pkin(1) * t547 - qJ(2) * t545;
t466 = -qJ(2) * t538 + t728 * t537;
t461 = (-t613 * t658 + t616 * t659) * t606;
t460 = -t613 * t643 - t616 * t642;
t459 = -pkin(2) * t581 - t690;
t458 = -qJ(2) * t535 - t656;
t457 = -qJ(2) * t532 - t655;
t456 = t727 * t530 + t728 * t573 + t709;
t455 = t727 * t528 + t728 * t571 + t512;
t454 = -t727 * t578 - t728 * t581 - t467;
t452 = -t613 * t641 + t616 * t640;
t451 = -t613 * t631 + t616 * t630;
t450 = -t613 * t640 - t616 * t641;
t449 = -t613 * t630 - t616 * t631;
t444 = -t728 * t535 - t737;
t443 = -t728 * t532 - t738;
t430 = -t613 * t623 + t616 * t621;
t429 = t613 * t628 + t616 * t627;
t428 = -t613 * t621 - t616 * t623;
t427 = -t613 * t627 + t616 * t628;
t419 = -qJ(2) * t468 - t668;
t418 = t727 * t467 + t728 * t520;
t413 = t613 * t624 + t616 * t622;
t411 = -t613 * t622 + t616 * t624;
t409 = -t728 * t468 + t744;
t398 = -qJ(2) * t442 - t644;
t397 = t727 * t441 + t728 * t746 + t681;
t396 = -t728 * t442 - t739;
t395 = -qJ(2) * t426 - t645;
t394 = t727 * t425 + t728 * t479 + t682;
t393 = -t728 * t426 - t740;
t392 = -t728 * t414 - t741;
t391 = -qJ(2) * t414 - t646;
t390 = t727 * t412 + t728 * t497 + t683;
t389 = -qJ(2) * t401 - t632;
t388 = t727 * t400 + t728 * t493 + t653;
t387 = -t728 * t401 - t742;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t579, 0, -t580, 0, -t666, -t665, -t657, -pkin(5) * t657, 0, -t579, t580, 0, 0, 0, t660, t666, t665, pkin(5) * t660 + (-t614 * pkin(1) + t617 * qJ(2)) * g(3), 0, t580, t579, 0, 0, 0, -t661, t638, t522, -pkin(5) * t661 - t614 * t508 + t617 * t517, t617 * t541 - t673, -t617 * t510 - t614 * t582, -t617 * t529 - t614 * t697, -t617 * t540 + t673, -t617 * t527 + t613 * t698, -t614 * qJDD(4) - t617 * t566, t617 * t457 - t614 * t443 - pkin(5) * (t614 * t528 + t617 * t571), t617 * t458 - t614 * t444 - pkin(5) * (t614 * t530 + t617 * t573), -t617 * t459 + t614 * t525 - pkin(5) * (-t614 * t578 - t617 * t581), t617 * t419 - t614 * t409 - pkin(5) * (t614 * t467 + t617 * t520), -t617 * t428 + t693, -t617 * t411 - t614 * t507, -t617 * t449 - t614 * t483, -t617 * t427 - t693, -t617 * t450 + t614 * t480, -t617 * t460 - t614 * t605, t617 * t395 - t614 * t393 - pkin(5) * (t614 * t425 + t617 * t479), t617 * t398 - t614 * t396 - pkin(5) * (t614 * t441 + t617 * t746), t617 * t391 - t614 * t392 - pkin(5) * (t614 * t412 + t617 * t497), t617 * t389 - t614 * t387 - pkin(5) * (t614 * t400 + t617 * t493); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t580, 0, t579, 0, t665, -t666, t676, pkin(5) * t676, 0, -t580, -t579, 0, 0, 0, t678, -t665, t666, pkin(5) * t678 + (t617 * pkin(1) + t614 * qJ(2)) * g(3), 0, -t579, t580, 0, 0, 0, t679, -t522, t638, pkin(5) * t679 + t617 * t508 + t614 * t517, t614 * t541 + t672, -t614 * t510 + t617 * t582, -t614 * t529 + t616 * t696, -t614 * t540 - t672, -t614 * t527 - t613 * t696, t617 * qJDD(4) - t614 * t566, t614 * t457 + t617 * t443 + pkin(5) * (t617 * t528 - t614 * t571), t614 * t458 + t617 * t444 + pkin(5) * (t617 * t530 - t614 * t573), -t614 * t459 - t617 * t525 + pkin(5) * (-t617 * t578 + t614 * t581), t614 * t419 + t617 * t409 + pkin(5) * (t617 * t467 - t614 * t520), -t614 * t428 - t692, -t614 * t411 + t617 * t507, -t614 * t449 + t617 * t483, -t614 * t427 + t692, -t614 * t450 - t617 * t480, -t614 * t460 + t617 * t605, t614 * t395 + t617 * t393 + pkin(5) * (t617 * t425 - t614 * t479), t614 * t398 + t617 * t396 + pkin(5) * (t617 * t441 - t614 * t746), t614 * t391 + t617 * t392 + pkin(5) * (t617 * t412 - t614 * t497), t614 * t389 + t617 * t387 + pkin(5) * (t617 * t400 - t614 * t493); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t586, t587, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t562, t552, t498, qJDD(1), 0, 0, 0, 0, 0, 0, t546, t542, t466, t533, t511, t534, t526, t531, 0, t455, t456, t454, t418, t430, t413, t451, t429, t452, t461, t394, t397, t390, t388; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t620, 0, 0, -g(3), -t586, 0, 0, -qJDD(1), t620, 0, 0, 0, -t547, 0, g(3), t611, 0, t620, qJDD(1), 0, 0, 0, -t537, -t597, -t609, t517, t541, -t510, -t529, -t540, -t527, -t566, t457, t458, -t459, t419, -t428, -t411, -t449, -t427, -t450, -t460, t395, t398, t391, t389; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t620, 0, qJDD(1), 0, g(3), 0, -t587, 0, 0, -t620, -qJDD(1), 0, 0, 0, -t545, -g(3), 0, t618, 0, -qJDD(1), t620, 0, 0, 0, -t538, t609, -t597, t508, t592, t582, t697, -t592, -t699, qJDD(4), t443, t444, -t525, t409, -t725, t507, t483, t725, -t480, t605, t393, t396, t392, t387; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t586, t587, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t562, t552, t498, qJDD(1), 0, 0, 0, 0, 0, 0, t546, t542, t466, t533, t511, t534, t526, t531, 0, t455, t456, t454, t418, t430, t413, t451, t429, t452, t461, t394, t397, t390, t388; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t547, -t545, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t635 - t729, t547 + t743, qJ(3) * t537, t533, t511, t534, t526, t531, 0, qJ(3) * t571 + t662, qJ(3) * t573 + t685, -qJ(3) * t581 + t649, qJ(3) * t520 - t730, t430, t413, t451, t429, t452, t461, qJ(3) * t479 + t651, qJ(3) * t746 + t650, qJ(3) * t497 + t652, qJ(3) * t493 + t634; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t620, 0, 0, 0, t547, 0, -g(3), 0, 0, -t620, -qJDD(1), 0, 0, 0, t537, t597, t609, t733, -t541, t510, t529, t540, t527, t566, t655, t656, t459, t668, t428, t411, t449, t427, t450, t460, t645, t644, t646, t632; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t620, qJDD(1), 0, 0, 0, t545, g(3), 0, 0, 0, qJDD(1), -t620, 0, 0, 0, t538, -t609, t597, t667, -t592, -t582, -t697, t592, t699, -qJDD(4), qJ(3) * t532 + t738, qJ(3) * t535 + t737, t525, qJ(3) * t468 - t744, t725, -t507, -t483, -t725, t480, -t605, qJ(3) * t426 + t740, qJ(3) * t442 + t739, qJ(3) * t414 + t741, qJ(3) * t401 + t742; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t538, t537, 0, t533, t511, t534, t526, t531, 0, t662, t685, t649, -t730, t430, t413, t451, t429, t452, t461, t651, t650, t652, t634; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t620, 0, 0, 0, t538, 0, -g(3), 0, -t592, -t582, -t697, t592, t699, -qJDD(4), -pkin(3) * t528 - t505, -pkin(3) * t530 - t506, t570, -pkin(3) * t467, t725, -t507, -t483, -t725, t480, -t605, -pkin(3) * t425 + t663, -pkin(3) * t441 + t691, -pkin(3) * t412 - t436, -pkin(3) * t400 - t415; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t620, qJDD(1), 0, 0, 0, -t537, g(3), 0, 0, t541, -t510, -t529, -t540, -t527, -t566, t688, t689, t690, t706, -t428, -t411, -t449, -t427, -t450, -t460, t670, t669, t671, t647; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t572, -t571, t584, t687, t674, -t687, 0, t520, -t505, 0, t621, t622, t630, t627, t640, t643, t435, t453, t406, -pkin(7) * t416; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t686, t573, -t675, -t639, t583, -t686, -t520, 0, -t506, 0, t623, -t624, t631, -t628, t641, t642, t421, t423, t403, t408; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t592, t582, t697, -t592, -t699, qJDD(4), t505, t506, 0, 0, -t725, t507, t483, t725, -t480, t605, -t663, -t691, t436, t415; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t626, -t479, t747, -t724, t705, t724, 0, t493, t445, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t723, t746, t704, t648, t503, -t723, -t493, 0, t446, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t725, t507, t483, t725, -t480, t605, -t445, -t446, 0, 0;];
m_new_reg = t1;
