% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRPRR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d4,d5,theta1,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:45
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRPRR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRR2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRR2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRPRR2_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:45:33
% EndTime: 2019-12-05 15:45:35
% DurationCPUTime: 1.86s
% Computational Cost: add. (5249->134), mult. (7682->191), div. (0->0), fcn. (5324->10), ass. (0->107)
t952 = qJD(2) + qJD(4);
t950 = t952 ^ 2;
t951 = qJDD(2) + qJDD(4);
t961 = sin(qJ(4));
t964 = cos(qJ(4));
t924 = t961 * t950 - t964 * t951;
t956 = sin(pkin(9));
t958 = cos(pkin(9));
t969 = -t964 * t950 - t961 * t951;
t900 = t958 * t924 - t956 * t969;
t962 = sin(qJ(2));
t965 = cos(qJ(2));
t979 = t956 * t924 + t958 * t969;
t982 = t962 * t900 + t965 * t979;
t882 = t965 * t900 - t962 * t979;
t957 = sin(pkin(8));
t959 = cos(pkin(8));
t937 = t957 * g(1) - t959 * g(2);
t932 = -qJDD(3) + t937;
t976 = t957 * t932;
t975 = t957 * t937;
t960 = sin(qJ(5));
t974 = t960 * t951;
t963 = cos(qJ(5));
t973 = t963 * t951;
t938 = -t959 * g(1) - t957 * g(2);
t955 = -g(3) + qJDD(1);
t916 = -t962 * t938 + t965 * t955;
t914 = qJDD(2) * pkin(2) + t916;
t917 = t965 * t938 + t962 * t955;
t967 = qJD(2) ^ 2;
t915 = -t967 * pkin(2) + t917;
t891 = t956 * t914 + t958 * t915;
t889 = -t967 * pkin(3) + t891;
t890 = t958 * t914 - t956 * t915;
t968 = qJDD(2) * pkin(3) + t890;
t873 = t964 * t889 + t961 * t968;
t953 = t960 ^ 2;
t954 = t963 ^ 2;
t972 = t953 + t954;
t971 = qJD(5) * t952;
t872 = -t961 * t889 + t964 * t968;
t933 = t958 * qJDD(2) - t956 * t967;
t934 = -t956 * qJDD(2) - t958 * t967;
t970 = -t962 * t933 + t965 * t934;
t905 = t965 * t933 + t962 * t934;
t966 = qJD(5) ^ 2;
t941 = t960 * t950 * t963;
t940 = -t954 * t950 - t966;
t939 = -t953 * t950 - t966;
t936 = t965 * qJDD(2) - t962 * t967;
t935 = -t962 * qJDD(2) - t965 * t967;
t931 = -qJDD(5) + t941;
t930 = qJDD(5) + t941;
t928 = t959 * t937;
t926 = t972 * t950;
t921 = t959 * t932;
t920 = t972 * t951;
t919 = -0.2e1 * t960 * t971 + t973;
t918 = 0.2e1 * t963 * t971 + t974;
t911 = t963 * t931 - t960 * t939;
t910 = -t960 * t930 + t963 * t940;
t909 = t960 * t931 + t963 * t939;
t908 = t963 * t930 + t960 * t940;
t903 = t964 * t920 - t961 * t926;
t902 = t961 * t920 + t964 * t926;
t897 = -t962 * t916 + t965 * t917;
t896 = t965 * t916 + t962 * t917;
t895 = t964 * t911 + t961 * t918;
t894 = t964 * t910 - t961 * t919;
t893 = t961 * t911 - t964 * t918;
t892 = t961 * t910 + t964 * t919;
t885 = -t956 * t902 + t958 * t903;
t884 = t958 * t902 + t956 * t903;
t879 = -t956 * t893 + t958 * t895;
t878 = -t956 * t892 + t958 * t894;
t877 = t958 * t893 + t956 * t895;
t876 = t958 * t892 + t956 * t894;
t875 = -t956 * t890 + t958 * t891;
t874 = t958 * t890 + t956 * t891;
t871 = -t950 * pkin(4) + t951 * pkin(7) + t873;
t870 = -t951 * pkin(4) - t950 * pkin(7) - t872;
t869 = t963 * t871 - t960 * t932;
t868 = -t960 * t871 - t963 * t932;
t867 = -t962 * t884 + t965 * t885;
t866 = t965 * t884 + t962 * t885;
t865 = -t962 * t877 + t965 * t879;
t864 = -t962 * t876 + t965 * t878;
t863 = t965 * t877 + t962 * t879;
t862 = t965 * t876 + t962 * t878;
t861 = -t962 * t874 + t965 * t875;
t860 = t965 * t874 + t962 * t875;
t859 = -t961 * t872 + t964 * t873;
t858 = t964 * t872 + t961 * t873;
t857 = -t960 * t868 + t963 * t869;
t856 = t963 * t868 + t960 * t869;
t855 = t964 * t857 + t961 * t870;
t854 = t961 * t857 - t964 * t870;
t853 = -t956 * t858 + t958 * t859;
t852 = t958 * t858 + t956 * t859;
t851 = -t956 * t854 + t958 * t855;
t850 = t958 * t854 + t956 * t855;
t849 = -t962 * t852 + t965 * t853;
t848 = t965 * t852 + t962 * t853;
t847 = -t962 * t850 + t965 * t851;
t846 = t965 * t850 + t962 * t851;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t959 * t938 - t975, 0, 0, 0, 0, 0, 0, t959 * t935, -t959 * t936, 0, t959 * t897 - t975, 0, 0, 0, 0, 0, 0, t959 * t970, -t959 * t905, 0, t959 * t861 - t976, 0, 0, 0, 0, 0, 0, t959 * t982, t959 * t882, 0, t959 * t849 - t976, 0, 0, 0, 0, 0, 0, t959 * t864 + t957 * t908, t959 * t865 + t957 * t909, t959 * t867, t959 * t847 + t957 * t856; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t957 * t938 + t928, 0, 0, 0, 0, 0, 0, t957 * t935, -t957 * t936, 0, t957 * t897 + t928, 0, 0, 0, 0, 0, 0, t957 * t970, -t957 * t905, 0, t957 * t861 + t921, 0, 0, 0, 0, 0, 0, t957 * t982, t957 * t882, 0, t957 * t849 + t921, 0, 0, 0, 0, 0, 0, t957 * t864 - t959 * t908, t957 * t865 - t959 * t909, t957 * t867, t957 * t847 - t959 * t856; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t955, 0, 0, 0, 0, 0, 0, t936, t935, 0, t896, 0, 0, 0, 0, 0, 0, t905, t970, 0, t860, 0, 0, 0, 0, 0, 0, -t882, t982, 0, t848, 0, 0, 0, 0, 0, 0, t862, t863, t866, t846; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t938, 0, 0, 0, 0, 0, 0, t935, -t936, 0, t897, 0, 0, 0, 0, 0, 0, t970, -t905, 0, t861, 0, 0, 0, 0, 0, 0, t982, t882, 0, t849, 0, 0, 0, 0, 0, 0, t864, t865, t867, t847; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t937, 0, 0, 0, 0, 0, 0, 0, 0, 0, t937, 0, 0, 0, 0, 0, 0, 0, 0, 0, t932, 0, 0, 0, 0, 0, 0, 0, 0, 0, t932, 0, 0, 0, 0, 0, 0, -t908, -t909, 0, -t856; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t955, 0, 0, 0, 0, 0, 0, t936, t935, 0, t896, 0, 0, 0, 0, 0, 0, t905, t970, 0, t860, 0, 0, 0, 0, 0, 0, -t882, t982, 0, t848, 0, 0, 0, 0, 0, 0, t862, t863, t866, t846; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t967, -qJDD(2), 0, t917, 0, 0, 0, 0, 0, 0, t934, -t933, 0, t875, 0, 0, 0, 0, 0, 0, t979, t900, 0, t853, 0, 0, 0, 0, 0, 0, t878, t879, t885, t851; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t967, 0, t916, 0, 0, 0, 0, 0, 0, t933, t934, 0, t874, 0, 0, 0, 0, 0, 0, -t900, t979, 0, t852, 0, 0, 0, 0, 0, 0, t876, t877, t884, t850; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t937, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t932, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t932, 0, 0, 0, 0, 0, 0, t908, t909, 0, t856; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t967, -qJDD(2), 0, t891, 0, 0, 0, 0, 0, 0, t969, t924, 0, t859, 0, 0, 0, 0, 0, 0, t894, t895, t903, t855; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t967, 0, t890, 0, 0, 0, 0, 0, 0, -t924, t969, 0, t858, 0, 0, 0, 0, 0, 0, t892, t893, t902, t854; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t932, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t932, 0, 0, 0, 0, 0, 0, t908, t909, 0, t856; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t950, -t951, 0, t873, 0, 0, 0, 0, 0, 0, t910, t911, t920, t857; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t951, -t950, 0, t872, 0, 0, 0, 0, 0, 0, t919, -t918, t926, -t870; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t932, 0, 0, 0, 0, 0, 0, t908, t909, 0, t856; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t940, t931, t973, t869; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t930, t939, -t974, t868; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t919, t918, -t926, t870;];
f_new_reg = t1;
