% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRPR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:48
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRPR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRPR1_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:48:16
% EndTime: 2019-12-05 17:48:19
% DurationCPUTime: 2.18s
% Computational Cost: add. (9472->209), mult. (21025->248), div. (0->0), fcn. (14067->8), ass. (0->142)
t1152 = sin(pkin(8));
t1153 = cos(pkin(8));
t1155 = sin(qJ(3));
t1158 = cos(qJ(3));
t1124 = (-t1152 * t1158 - t1153 * t1155) * qJD(1);
t1182 = qJD(1) * t1158;
t1183 = qJD(1) * t1155;
t1126 = -t1152 * t1183 + t1153 * t1182;
t1154 = sin(qJ(5));
t1157 = cos(qJ(5));
t1097 = -t1157 * t1124 + t1154 * t1126;
t1188 = t1097 ^ 2;
t1099 = t1154 * t1124 + t1157 * t1126;
t1187 = t1099 ^ 2;
t1123 = t1124 ^ 2;
t1186 = t1126 ^ 2;
t1148 = qJD(3) + qJD(5);
t1185 = t1148 ^ 2;
t1184 = pkin(6) + pkin(1);
t1181 = qJD(3) * t1124;
t1180 = qJD(3) * t1126;
t1179 = t1099 * t1097;
t1178 = t1126 * t1124;
t1150 = t1155 ^ 2;
t1161 = qJD(1) ^ 2;
t1177 = t1150 * t1161;
t1176 = qJD(5) - t1148;
t1175 = qJD(5) + t1148;
t1156 = sin(qJ(1));
t1159 = cos(qJ(1));
t1139 = t1156 * g(1) - t1159 * g(2);
t1163 = -t1161 * qJ(2) + qJDD(2) - t1139;
t1116 = -t1184 * qJDD(1) + t1163;
t1107 = t1155 * g(3) + t1158 * t1116;
t1151 = t1158 ^ 2;
t1174 = t1150 + t1151;
t1173 = t1155 * qJDD(1);
t1172 = t1158 * qJDD(1);
t1171 = -qJDD(3) - qJDD(5);
t1170 = qJD(3) * t1183;
t1169 = t1155 * t1161 * t1158;
t1168 = qJD(3) * t1182;
t1131 = -t1170 + t1172;
t1137 = qJDD(3) - t1169;
t1088 = (-t1131 - t1170) * qJ(4) + t1137 * pkin(3) + t1107;
t1108 = -t1158 * g(3) + t1155 * t1116;
t1130 = -t1168 - t1173;
t1164 = qJD(3) * pkin(3) - qJ(4) * t1182;
t1089 = -pkin(3) * t1177 + t1130 * qJ(4) - qJD(3) * t1164 + t1108;
t1067 = 0.2e1 * qJD(4) * t1124 + t1152 * t1088 + t1153 * t1089;
t1106 = t1152 * t1130 + t1153 * t1131;
t1095 = -t1106 + t1181;
t1105 = t1153 * t1130 - t1152 * t1131;
t1167 = t1157 * t1105 - t1154 * t1106;
t1102 = qJDD(3) + t1178;
t1166 = qJD(3) * pkin(4) - t1126 * pkin(7);
t1140 = -t1159 * g(1) - t1156 * g(2);
t1066 = -0.2e1 * qJD(4) * t1126 + t1153 * t1088 - t1152 * t1089;
t1165 = -t1154 * t1105 - t1157 * t1106;
t1162 = -qJDD(1) * qJ(2) - 0.2e1 * qJD(2) * qJD(1) - t1140;
t1090 = t1130 * pkin(3) - qJDD(4) - t1164 * t1182 + (qJ(4) * t1150 + t1184) * t1161 + t1162;
t1160 = qJD(3) ^ 2;
t1143 = -t1151 * t1161 - t1160;
t1142 = -t1160 - t1177;
t1138 = -qJDD(3) - t1169;
t1136 = t1174 * t1161;
t1135 = t1156 * qJDD(1) + t1159 * t1161;
t1134 = t1159 * qJDD(1) - t1156 * t1161;
t1133 = t1174 * qJDD(1);
t1132 = -0.2e1 * t1170 + t1172;
t1129 = 0.2e1 * t1168 + t1173;
t1122 = qJDD(1) * pkin(1) - t1163;
t1119 = t1161 * pkin(1) + t1162;
t1117 = -t1160 - t1186;
t1115 = t1184 * t1161 + t1162;
t1112 = t1158 * t1138 - t1155 * t1143;
t1111 = -t1155 * t1137 + t1158 * t1142;
t1110 = t1155 * t1138 + t1158 * t1143;
t1109 = t1158 * t1137 + t1155 * t1142;
t1103 = -qJDD(3) + t1178;
t1101 = -t1160 - t1123;
t1096 = -t1185 - t1187;
t1094 = t1106 + t1181;
t1093 = t1105 + t1180;
t1092 = -t1105 + t1180;
t1091 = -t1123 - t1186;
t1087 = t1153 * t1103 - t1152 * t1117;
t1086 = t1152 * t1103 + t1153 * t1117;
t1084 = -t1155 * t1107 + t1158 * t1108;
t1083 = t1158 * t1107 + t1155 * t1108;
t1080 = t1153 * t1101 - t1152 * t1102;
t1079 = t1152 * t1101 + t1153 * t1102;
t1078 = t1171 - t1179;
t1077 = -t1171 - t1179;
t1076 = -t1185 - t1188;
t1075 = t1153 * t1093 - t1152 * t1095;
t1074 = t1152 * t1093 + t1153 * t1095;
t1073 = -t1187 - t1188;
t1072 = -t1155 * t1086 + t1158 * t1087;
t1071 = t1158 * t1086 + t1155 * t1087;
t1070 = t1157 * t1078 - t1154 * t1096;
t1069 = t1154 * t1078 + t1157 * t1096;
t1068 = t1105 * pkin(4) + t1123 * pkin(7) - t1126 * t1166 + t1090;
t1065 = t1176 * t1097 + t1165;
t1064 = -t1175 * t1097 - t1165;
t1063 = -t1176 * t1099 + t1167;
t1062 = t1175 * t1099 - t1167;
t1061 = -t1155 * t1079 + t1158 * t1080;
t1060 = t1158 * t1079 + t1155 * t1080;
t1059 = t1157 * t1076 - t1154 * t1077;
t1058 = t1154 * t1076 + t1157 * t1077;
t1057 = -t1123 * pkin(4) + t1105 * pkin(7) - qJD(3) * t1166 + t1067;
t1056 = -t1155 * t1074 + t1158 * t1075;
t1055 = t1158 * t1074 + t1155 * t1075;
t1054 = t1102 * pkin(4) + t1095 * pkin(7) + t1066;
t1053 = -t1152 * t1069 + t1153 * t1070;
t1052 = t1153 * t1069 + t1152 * t1070;
t1051 = -t1152 * t1066 + t1153 * t1067;
t1050 = t1153 * t1066 + t1152 * t1067;
t1049 = t1157 * t1063 - t1154 * t1065;
t1048 = t1154 * t1063 + t1157 * t1065;
t1047 = -t1152 * t1058 + t1153 * t1059;
t1046 = t1153 * t1058 + t1152 * t1059;
t1045 = t1154 * t1054 + t1157 * t1057;
t1044 = t1157 * t1054 - t1154 * t1057;
t1043 = -t1155 * t1052 + t1158 * t1053;
t1042 = t1158 * t1052 + t1155 * t1053;
t1041 = -t1155 * t1050 + t1158 * t1051;
t1040 = t1158 * t1050 + t1155 * t1051;
t1039 = -t1152 * t1048 + t1153 * t1049;
t1038 = t1153 * t1048 + t1152 * t1049;
t1037 = -t1155 * t1046 + t1158 * t1047;
t1036 = t1158 * t1046 + t1155 * t1047;
t1035 = -t1154 * t1044 + t1157 * t1045;
t1034 = t1157 * t1044 + t1154 * t1045;
t1033 = -t1155 * t1038 + t1158 * t1039;
t1032 = t1158 * t1038 + t1155 * t1039;
t1031 = -t1152 * t1034 + t1153 * t1035;
t1030 = t1153 * t1034 + t1152 * t1035;
t1029 = -t1155 * t1030 + t1158 * t1031;
t1028 = t1158 * t1030 + t1155 * t1031;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1135, -t1134, 0, -t1156 * t1139 + t1159 * t1140, 0, 0, 0, 0, 0, 0, 0, t1135, t1134, -t1159 * t1119 - t1156 * t1122, 0, 0, 0, 0, 0, 0, t1156 * t1109 + t1159 * t1129, t1156 * t1110 + t1159 * t1132, -t1156 * t1133 - t1159 * t1136, t1156 * t1083 - t1159 * t1115, 0, 0, 0, 0, 0, 0, t1156 * t1060 + t1159 * t1092, t1156 * t1071 + t1159 * t1094, t1156 * t1055 + t1159 * t1091, t1156 * t1040 - t1159 * t1090, 0, 0, 0, 0, 0, 0, t1156 * t1036 + t1159 * t1062, t1156 * t1042 + t1159 * t1064, t1156 * t1032 + t1159 * t1073, t1156 * t1028 - t1159 * t1068; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1134, -t1135, 0, t1159 * t1139 + t1156 * t1140, 0, 0, 0, 0, 0, 0, 0, -t1134, t1135, -t1156 * t1119 + t1159 * t1122, 0, 0, 0, 0, 0, 0, -t1159 * t1109 + t1156 * t1129, -t1159 * t1110 + t1156 * t1132, t1159 * t1133 - t1156 * t1136, -t1159 * t1083 - t1156 * t1115, 0, 0, 0, 0, 0, 0, -t1159 * t1060 + t1156 * t1092, -t1159 * t1071 + t1156 * t1094, -t1159 * t1055 + t1156 * t1091, -t1159 * t1040 - t1156 * t1090, 0, 0, 0, 0, 0, 0, -t1159 * t1036 + t1156 * t1062, -t1159 * t1042 + t1156 * t1064, -t1159 * t1032 + t1156 * t1073, -t1159 * t1028 - t1156 * t1068; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1111, t1112, 0, t1084, 0, 0, 0, 0, 0, 0, t1061, t1072, t1056, t1041, 0, 0, 0, 0, 0, 0, t1037, t1043, t1033, t1029; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1161, -qJDD(1), 0, t1140, 0, 0, 0, 0, 0, 0, 0, t1161, qJDD(1), -t1119, 0, 0, 0, 0, 0, 0, t1129, t1132, -t1136, -t1115, 0, 0, 0, 0, 0, 0, t1092, t1094, t1091, -t1090, 0, 0, 0, 0, 0, 0, t1062, t1064, t1073, -t1068; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1161, 0, t1139, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), t1161, t1122, 0, 0, 0, 0, 0, 0, -t1109, -t1110, t1133, -t1083, 0, 0, 0, 0, 0, 0, -t1060, -t1071, -t1055, -t1040, 0, 0, 0, 0, 0, 0, -t1036, -t1042, -t1032, -t1028; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1111, t1112, 0, t1084, 0, 0, 0, 0, 0, 0, t1061, t1072, t1056, t1041, 0, 0, 0, 0, 0, 0, t1037, t1043, t1033, t1029; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1111, t1112, 0, t1084, 0, 0, 0, 0, 0, 0, t1061, t1072, t1056, t1041, 0, 0, 0, 0, 0, 0, t1037, t1043, t1033, t1029; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1161, -qJDD(1), t1119, 0, 0, 0, 0, 0, 0, -t1129, -t1132, t1136, t1115, 0, 0, 0, 0, 0, 0, -t1092, -t1094, -t1091, t1090, 0, 0, 0, 0, 0, 0, -t1062, -t1064, -t1073, t1068; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1161, -t1122, 0, 0, 0, 0, 0, 0, t1109, t1110, -t1133, t1083, 0, 0, 0, 0, 0, 0, t1060, t1071, t1055, t1040, 0, 0, 0, 0, 0, 0, t1036, t1042, t1032, t1028; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1142, t1138, -t1173, t1108, 0, 0, 0, 0, 0, 0, t1080, t1087, t1075, t1051, 0, 0, 0, 0, 0, 0, t1047, t1053, t1039, t1031; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1137, t1143, -t1172, t1107, 0, 0, 0, 0, 0, 0, t1079, t1086, t1074, t1050, 0, 0, 0, 0, 0, 0, t1046, t1052, t1038, t1030; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1129, t1132, -t1136, -t1115, 0, 0, 0, 0, 0, 0, t1092, t1094, t1091, -t1090, 0, 0, 0, 0, 0, 0, t1062, t1064, t1073, -t1068; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1101, t1103, t1093, t1067, 0, 0, 0, 0, 0, 0, t1059, t1070, t1049, t1035; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1102, t1117, t1095, t1066, 0, 0, 0, 0, 0, 0, t1058, t1069, t1048, t1034; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1092, t1094, t1091, -t1090, 0, 0, 0, 0, 0, 0, t1062, t1064, t1073, -t1068; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1076, t1078, t1063, t1045; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1077, t1096, t1065, t1044; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1062, t1064, t1073, -t1068;];
f_new_reg = t1;
