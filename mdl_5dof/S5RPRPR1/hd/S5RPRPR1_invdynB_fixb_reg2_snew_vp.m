% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:48
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRPR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRPR1_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:47:54
% EndTime: 2019-12-05 17:48:03
% DurationCPUTime: 8.23s
% Computational Cost: add. (28668->487), mult. (63571->715), div. (0->0), fcn. (42396->8), ass. (0->330)
t504 = sin(pkin(8));
t505 = cos(pkin(8));
t507 = sin(qJ(3));
t510 = cos(qJ(3));
t467 = (-t504 * t510 - t505 * t507) * qJD(1);
t550 = qJD(1) * t510;
t469 = -t504 * t507 * qJD(1) + t505 * t550;
t575 = t469 * t467;
t583 = qJDD(3) + t575;
t587 = t504 * t583;
t586 = t505 * t583;
t506 = sin(qJ(5));
t509 = cos(qJ(5));
t420 = -t509 * t467 + t506 * t469;
t422 = t506 * t467 + t509 * t469;
t378 = t422 * t420;
t499 = qJDD(3) + qJDD(5);
t582 = -t378 + t499;
t585 = t506 * t582;
t584 = t509 * t582;
t542 = qJD(1) * qJD(3);
t530 = t510 * t542;
t540 = t507 * qJDD(1);
t475 = -t530 - t540;
t531 = t507 * t542;
t538 = t510 * qJDD(1);
t476 = -t531 + t538;
t432 = t504 * t475 + t505 * t476;
t549 = qJD(3) * t467;
t405 = t432 - t549;
t513 = qJD(1) ^ 2;
t554 = t510 * t513;
t508 = sin(qJ(1));
t511 = cos(qJ(1));
t485 = t508 * g(1) - t511 * g(2);
t523 = qJDD(2) - t485;
t516 = -t513 * qJ(2) + t523;
t581 = pkin(6) + pkin(1);
t451 = -t581 * qJDD(1) + t516;
t557 = t510 * t451;
t393 = qJDD(3) * pkin(3) - t476 * qJ(4) + t557 + (-pkin(3) * t554 - qJ(4) * t542 + g(3)) * t507;
t435 = -t510 * g(3) + t507 * t451;
t518 = qJD(3) * pkin(3) - qJ(4) * t550;
t502 = t507 ^ 2;
t572 = t502 * t513;
t394 = -pkin(3) * t572 + t475 * qJ(4) - qJD(3) * t518 + t435;
t522 = -0.2e1 * qJD(4) * t469 + t505 * t393 - t504 * t394;
t340 = 0.2e1 * qJD(4) * t467 + t504 * t393 + t505 * t394;
t418 = t420 ^ 2;
t419 = t422 ^ 2;
t465 = t467 ^ 2;
t466 = t469 ^ 2;
t500 = qJD(3) + qJD(5);
t498 = t500 ^ 2;
t580 = qJDD(1) * pkin(1);
t310 = pkin(4) * t583 - t405 * pkin(7) + t522;
t431 = t505 * t475 - t504 * t476;
t521 = qJD(3) * pkin(4) - t469 * pkin(7);
t316 = -t465 * pkin(4) + t431 * pkin(7) - qJD(3) * t521 + t340;
t280 = -t509 * t310 + t506 * t316;
t281 = t506 * t310 + t509 * t316;
t251 = -t280 * t509 + t281 * t506;
t579 = t251 * t504;
t578 = t251 * t505;
t298 = t504 * t340 + t505 * t522;
t577 = t298 * t507;
t576 = t298 * t510;
t574 = t500 * t506;
t573 = t500 * t509;
t503 = t510 ^ 2;
t571 = t503 * t513;
t486 = t511 * g(1) + t508 * g(2);
t501 = qJDD(1) * qJ(2);
t519 = t486 - t501;
t541 = qJD(2) * qJD(1);
t514 = t519 - 0.2e1 * t541;
t395 = t475 * pkin(3) - qJDD(4) - t518 * t550 + (qJ(4) * t502 + t581) * t513 + t514;
t570 = t504 * t395;
t426 = qJDD(3) - t575;
t569 = t504 * t426;
t568 = t505 * t395;
t567 = t505 * t426;
t341 = t431 * pkin(4) + t465 * pkin(7) - t469 * t521 + t395;
t566 = t506 * t341;
t373 = t378 + t499;
t565 = t506 * t373;
t448 = t581 * t513 + t514;
t564 = t507 * t448;
t532 = t507 * t554;
t483 = qJDD(3) + t532;
t563 = t507 * t483;
t484 = qJDD(3) - t532;
t562 = t507 * t484;
t551 = t502 + t503;
t478 = t551 * qJDD(1);
t561 = t508 * t478;
t560 = t509 * t341;
t559 = t509 * t373;
t558 = t510 * t448;
t556 = t510 * t483;
t555 = t510 * t484;
t553 = t511 * t478;
t548 = qJD(3) * t469;
t547 = qJD(3) * t504;
t546 = qJD(3) * t505;
t543 = qJD(5) + t500;
t539 = t508 * qJDD(1);
t537 = t511 * qJDD(1);
t536 = t508 * t378;
t535 = t511 * t378;
t534 = t508 * t575;
t533 = t511 * t575;
t252 = t280 * t506 + t509 * t281;
t299 = t505 * t340 - t504 * t522;
t528 = -t509 * t431 + t506 * t432;
t496 = 0.2e1 * t541;
t456 = -t513 * pkin(1) + t496 - t519;
t460 = -t516 + t580;
t413 = t511 * t456 - t508 * t460;
t439 = -t508 * t485 - t511 * t486;
t527 = t508 * t532;
t526 = t511 * t532;
t479 = -t508 * t513 + t537;
t525 = pkin(5) * t479 + t508 * g(3);
t480 = t511 * t513 + t539;
t524 = -pkin(5) * t480 + t511 * g(3);
t434 = t507 * g(3) + t557;
t520 = t506 * t431 + t509 * t432;
t384 = t510 * t434 + t507 * t435;
t385 = -t507 * t434 + t510 * t435;
t410 = t508 * t456 + t511 * t460;
t438 = t511 * t485 - t508 * t486;
t517 = t431 + t548;
t515 = (-qJD(5) + t500) * t422 - t528;
t359 = -t420 * qJD(5) + t520;
t512 = qJD(3) ^ 2;
t494 = t511 * qJDD(3);
t493 = t508 * qJDD(3);
t491 = -t512 - t571;
t490 = t512 - t571;
t489 = -t512 - t572;
t488 = -t512 + t572;
t482 = (-t502 + t503) * t513;
t481 = t551 * t513;
t477 = -0.2e1 * t531 + t538;
t474 = 0.2e1 * t530 + t540;
t472 = t551 * t542;
t454 = -t466 - t512;
t453 = -t466 + t512;
t452 = t465 - t512;
t450 = -t507 * t476 - t503 * t542;
t449 = -t510 * t475 - t502 * t542;
t445 = -t507 * t491 - t556;
t444 = t510 * t489 - t562;
t443 = t510 * t491 - t563;
t442 = -t510 * t490 - t562;
t441 = t507 * t489 + t555;
t440 = -t507 * t488 - t556;
t437 = -t511 * t481 - t561;
t436 = -t508 * t481 + t553;
t433 = t507 * t474 - t510 * t477;
t429 = t466 - t465;
t424 = -t512 - t465;
t417 = (t467 * t505 + t469 * t504) * qJD(3);
t416 = (t467 * t504 - t469 * t505) * qJD(3);
t415 = t508 * t443 + t511 * t477;
t414 = t508 * t441 + t511 * t474;
t412 = -t511 * t443 + t508 * t477;
t411 = -t511 * t441 + t508 * t474;
t409 = t500 * t420;
t408 = -t419 + t498;
t407 = t418 - t498;
t406 = -t419 - t498;
t404 = t432 + t549;
t401 = -t431 + t548;
t400 = -t465 - t466;
t399 = t505 * t432 - t469 * t547;
t398 = t504 * t432 + t469 * t546;
t397 = -t504 * t431 - t467 * t546;
t396 = t505 * t431 - t467 * t547;
t392 = -t504 * t454 - t567;
t391 = -t504 * t453 + t586;
t390 = t505 * t452 - t569;
t389 = t505 * t454 - t569;
t388 = t505 * t453 + t587;
t387 = t504 * t452 + t567;
t381 = -pkin(2) * t481 - t385;
t380 = t505 * t424 - t587;
t379 = t504 * t424 + t586;
t377 = pkin(2) * t443 - qJ(2) * t445 - t435;
t376 = pkin(2) * t441 - qJ(2) * t444 + t434;
t375 = t419 - t418;
t371 = -t498 - t418;
t370 = pkin(2) * t474 - t581 * t444 - t558;
t369 = pkin(2) * t477 - t581 * t445 + t564;
t368 = -t510 * t416 - t507 * t417;
t367 = (-t420 * t509 + t422 * t506) * t500;
t366 = (-t420 * t506 - t422 * t509) * t500;
t365 = t508 * t384 - t511 * t448;
t364 = -t511 * t384 - t508 * t448;
t363 = t504 * t405 + t505 * t517;
t362 = -t505 * t401 - t504 * t404;
t361 = -t505 * t405 + t504 * t517;
t360 = -t504 * t401 + t505 * t404;
t358 = -t422 * qJD(5) - t528;
t357 = -t418 - t419;
t356 = -t510 * t398 - t507 * t399;
t355 = -t510 * t396 - t507 * t397;
t354 = -qJ(4) * t389 - t568;
t353 = pkin(2) * t384 - qJ(2) * t385;
t352 = -t507 * t389 + t510 * t392;
t351 = t510 * t389 + t507 * t392;
t350 = -t510 * t388 - t507 * t391;
t349 = -t510 * t387 - t507 * t390;
t348 = t509 * t407 - t565;
t347 = -t506 * t408 + t584;
t346 = t506 * t407 + t559;
t345 = t509 * t408 + t585;
t344 = -t506 * t406 - t559;
t343 = t509 * t406 - t565;
t342 = -qJ(4) * t379 - t570;
t337 = t359 + t409;
t336 = t359 - t409;
t335 = -t543 * t420 + t520;
t332 = t543 * t422 + t528;
t331 = -pkin(2) * t448 - t581 * t385;
t330 = t509 * t359 - t422 * t574;
t329 = t506 * t359 + t422 * t573;
t328 = -t506 * t358 + t420 * t573;
t327 = t509 * t358 + t420 * t574;
t326 = -t507 * t379 + t510 * t380;
t325 = t510 * t379 + t507 * t380;
t324 = t509 * t371 - t585;
t323 = t506 * t371 + t584;
t322 = -pkin(3) * t404 + qJ(4) * t392 - t570;
t321 = t508 * t351 + t511 * t404;
t320 = -t511 * t351 + t508 * t404;
t319 = -pkin(3) * t401 + qJ(4) * t380 + t568;
t318 = -t504 * t366 + t505 * t367;
t317 = t505 * t366 + t504 * t367;
t315 = t508 * t325 + t511 * t401;
t314 = -t507 * t361 + t510 * t363;
t313 = -t511 * t325 + t508 * t401;
t312 = t510 * t361 + t507 * t363;
t311 = -t510 * t360 - t507 * t362;
t308 = t508 * t312 + t511 * t400;
t307 = -t511 * t312 + t508 * t400;
t306 = -t504 * t346 + t505 * t348;
t305 = -t504 * t345 + t505 * t347;
t304 = t505 * t346 + t504 * t348;
t303 = t505 * t345 + t504 * t347;
t302 = -t504 * t343 + t505 * t344;
t301 = t505 * t343 + t504 * t344;
t300 = -pkin(7) * t343 - t560;
t297 = t506 * t337 + t509 * t515;
t296 = -t509 * t332 - t506 * t336;
t295 = -t509 * t337 + t506 * t515;
t294 = -t506 * t332 + t509 * t336;
t293 = -pkin(7) * t323 - t566;
t292 = -t504 * t329 + t505 * t330;
t291 = -t504 * t327 + t505 * t328;
t290 = t505 * t329 + t504 * t330;
t289 = t505 * t327 + t504 * t328;
t288 = -t504 * t323 + t505 * t324;
t287 = t505 * t323 + t504 * t324;
t286 = pkin(3) * t395 + qJ(4) * t299;
t285 = -t510 * t317 - t507 * t318;
t284 = -qJ(4) * t361 - t298;
t283 = -pkin(4) * t335 + pkin(7) * t344 - t566;
t282 = -pkin(3) * t400 + qJ(4) * t363 + t299;
t278 = pkin(2) * t351 + pkin(3) * t389 - qJ(2) * t352 - t340;
t277 = -pkin(4) * t332 + pkin(7) * t324 + t560;
t276 = pkin(2) * t312 + pkin(3) * t361 - qJ(2) * t314;
t275 = pkin(2) * t325 + pkin(3) * t379 - qJ(2) * t326 + t522;
t274 = -t304 * t510 - t306 * t507;
t273 = -t303 * t510 - t305 * t507;
t272 = -t301 * t507 + t302 * t510;
t271 = t301 * t510 + t302 * t507;
t270 = t299 * t510 - t577;
t269 = t299 * t507 + t576;
t268 = pkin(2) * t404 - t510 * t322 - t581 * t352 - t507 * t354;
t267 = -t295 * t504 + t297 * t505;
t266 = -t294 * t504 + t296 * t505;
t265 = t295 * t505 + t297 * t504;
t264 = t294 * t505 + t296 * t504;
t263 = -t290 * t510 - t292 * t507;
t262 = -t289 * t510 - t291 * t507;
t261 = t269 * t508 - t395 * t511;
t260 = -t269 * t511 - t395 * t508;
t259 = -t287 * t507 + t288 * t510;
t258 = t287 * t510 + t288 * t507;
t257 = pkin(2) * t401 - t510 * t319 - t581 * t326 - t507 * t342;
t256 = t271 * t508 + t335 * t511;
t255 = -t271 * t511 + t335 * t508;
t254 = t258 * t508 + t332 * t511;
t253 = -t258 * t511 + t332 * t508;
t250 = -qJ(4) * t301 - t283 * t504 + t300 * t505;
t249 = pkin(4) * t341 + pkin(7) * t252;
t248 = -qJ(4) * t287 - t277 * t504 + t293 * t505;
t247 = -pkin(3) * t335 + qJ(4) * t302 + t283 * t505 + t300 * t504;
t246 = -pkin(7) * t295 - t251;
t245 = -t265 * t507 + t267 * t510;
t244 = t265 * t510 + t267 * t507;
t243 = -t264 * t510 - t266 * t507;
t242 = -pkin(3) * t332 + qJ(4) * t288 + t277 * t505 + t293 * t504;
t241 = -pkin(4) * t357 + pkin(7) * t297 + t252;
t240 = pkin(2) * t400 - t510 * t282 - t507 * t284 - t581 * t314;
t239 = t244 * t508 + t357 * t511;
t238 = -t244 * t511 + t357 * t508;
t237 = pkin(2) * t269 + pkin(3) * t298 - qJ(2) * t270;
t236 = t252 * t505 - t579;
t235 = t252 * t504 + t578;
t234 = -pkin(2) * t395 + qJ(4) * t577 - t581 * t270 - t510 * t286;
t233 = pkin(2) * t271 + pkin(3) * t301 + pkin(4) * t343 - qJ(2) * t272 - t281;
t232 = pkin(2) * t258 + pkin(3) * t287 + pkin(4) * t323 - qJ(2) * t259 - t280;
t231 = -qJ(4) * t265 - t241 * t504 + t246 * t505;
t230 = -pkin(3) * t357 + qJ(4) * t267 + t241 * t505 + t246 * t504;
t229 = pkin(2) * t335 - t510 * t247 - t507 * t250 - t581 * t272;
t228 = pkin(2) * t244 + pkin(3) * t265 + pkin(4) * t295 - qJ(2) * t245;
t227 = -t235 * t507 + t236 * t510;
t226 = t235 * t510 + t236 * t507;
t225 = -pkin(7) * t578 - qJ(4) * t235 - t249 * t504;
t224 = t226 * t508 - t341 * t511;
t223 = -t226 * t511 - t341 * t508;
t222 = pkin(3) * t341 - pkin(7) * t579 + qJ(4) * t236 + t249 * t505;
t221 = pkin(2) * t332 - t510 * t242 - t507 * t248 - t581 * t259;
t220 = pkin(2) * t357 - t510 * t230 - t507 * t231 - t581 * t245;
t219 = pkin(2) * t226 + pkin(3) * t235 + pkin(4) * t251 - qJ(2) * t227;
t218 = -pkin(2) * t341 - t510 * t222 - t507 * t225 - t581 * t227;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t480, -t479, 0, t439, 0, 0, 0, 0, 0, 0, 0, t480, t479, t413, 0, 0, 0, 0, 0, 0, t414, t415, t437, t365, 0, 0, 0, 0, 0, 0, t315, t321, t308, t261, 0, 0, 0, 0, 0, 0, t254, t256, t239, t224; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t479, -t480, 0, t438, 0, 0, 0, 0, 0, 0, 0, -t479, t480, t410, 0, 0, 0, 0, 0, 0, t411, t412, t436, t364, 0, 0, 0, 0, 0, 0, t313, t320, t307, t260, 0, 0, 0, 0, 0, 0, t253, t255, t238, t223; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t444, t445, 0, t385, 0, 0, 0, 0, 0, 0, t326, t352, t314, t270, 0, 0, 0, 0, 0, 0, t259, t272, t245, t227; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t479, 0, -t480, 0, -t525, -t524, -t438, -pkin(5) * t438, 0, -t479, t480, 0, 0, 0, -t410, t525, t524, -pkin(5) * t410 + (-pkin(1) * t508 + qJ(2) * t511) * g(3), -t450 * t508 + t526, -t433 * t508 + t482 * t511, -t442 * t508 + t510 * t537, -t449 * t508 - t526, -t440 * t508 - t507 * t537, -t472 * t508 + t494, -pkin(5) * t411 - t370 * t508 + t376 * t511, -pkin(5) * t412 - t369 * t508 + t377 * t511, -pkin(2) * t553 - pkin(5) * t436 - t381 * t508, -pkin(5) * t364 - t331 * t508 + t353 * t511, -t356 * t508 - t533, -t311 * t508 + t429 * t511, -t350 * t508 + t405 * t511, -t355 * t508 + t533, -t349 * t508 + t511 * t517, -t368 * t508 + t494, -pkin(5) * t313 - t257 * t508 + t275 * t511, -pkin(5) * t320 - t268 * t508 + t278 * t511, -pkin(5) * t307 - t240 * t508 + t276 * t511, -pkin(5) * t260 - t234 * t508 + t237 * t511, -t263 * t508 + t535, -t243 * t508 + t375 * t511, -t273 * t508 + t337 * t511, -t262 * t508 - t535, -t274 * t508 + t511 * t515, -t285 * t508 + t499 * t511, -pkin(5) * t253 - t221 * t508 + t232 * t511, -pkin(5) * t255 - t229 * t508 + t233 * t511, -pkin(5) * t238 - t220 * t508 + t228 * t511, -pkin(5) * t223 - t218 * t508 + t219 * t511; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t480, 0, t479, 0, t524, -t525, t439, pkin(5) * t439, 0, -t480, -t479, 0, 0, 0, t413, -t524, t525, pkin(5) * t413 + (pkin(1) * t511 + qJ(2) * t508) * g(3), t450 * t511 + t527, t433 * t511 + t482 * t508, t442 * t511 + t508 * t538, t449 * t511 - t527, t440 * t511 - t507 * t539, t472 * t511 + t493, pkin(5) * t414 + t370 * t511 + t376 * t508, pkin(5) * t415 + t369 * t511 + t377 * t508, -pkin(2) * t561 + pkin(5) * t437 + t381 * t511, pkin(5) * t365 + t331 * t511 + t353 * t508, t356 * t511 - t534, t311 * t511 + t429 * t508, t350 * t511 + t405 * t508, t355 * t511 + t534, t349 * t511 + t508 * t517, t368 * t511 + t493, pkin(5) * t315 + t257 * t511 + t275 * t508, pkin(5) * t321 + t268 * t511 + t278 * t508, pkin(5) * t308 + t240 * t511 + t276 * t508, pkin(5) * t261 + t234 * t511 + t237 * t508, t263 * t511 + t536, t243 * t511 + t375 * t508, t273 * t511 + t337 * t508, t262 * t511 - t536, t274 * t511 + t508 * t515, t285 * t511 + t499 * t508, pkin(5) * t254 + t221 * t511 + t232 * t508, pkin(5) * t256 + t229 * t511 + t233 * t508, pkin(5) * t239 + t220 * t511 + t228 * t508, pkin(5) * t224 + t218 * t511 + t219 * t508; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t485, t486, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t523 - 0.2e1 * t580, -t486 + t496 + 0.2e1 * t501, pkin(1) * t460 + qJ(2) * t456, (t476 - t531) * t510, -t474 * t510 - t477 * t507, -t490 * t507 + t555, (-t475 + t530) * t507, t488 * t510 - t563, 0, qJ(2) * t474 - t581 * t441 - t564, qJ(2) * t477 - t581 * t443 - t558, -qJ(2) * t481 + t581 * t478 - t384, -qJ(2) * t448 - t581 * t384, -t398 * t507 + t399 * t510, -t360 * t507 + t362 * t510, -t388 * t507 + t391 * t510, -t396 * t507 + t397 * t510, -t387 * t507 + t390 * t510, -t416 * t507 + t417 * t510, qJ(2) * t401 - t507 * t319 - t581 * t325 + t510 * t342, qJ(2) * t404 - t507 * t322 - t581 * t351 + t510 * t354, qJ(2) * t400 - t507 * t282 + t510 * t284 - t581 * t312, -qJ(2) * t395 - qJ(4) * t576 - t581 * t269 - t507 * t286, -t290 * t507 + t292 * t510, -t264 * t507 + t266 * t510, -t303 * t507 + t305 * t510, -t289 * t507 + t291 * t510, -t304 * t507 + t306 * t510, -t317 * t507 + t318 * t510, qJ(2) * t332 - t507 * t242 + t510 * t248 - t581 * t258, qJ(2) * t335 - t507 * t247 + t510 * t250 - t581 * t271, qJ(2) * t357 - t507 * t230 + t510 * t231 - t581 * t244, -qJ(2) * t341 - t507 * t222 + t510 * t225 - t581 * t226;];
tauB_reg = t1;
