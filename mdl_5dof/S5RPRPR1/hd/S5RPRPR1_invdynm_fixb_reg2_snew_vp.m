% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRPR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:48
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRPR1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR1_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR1_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR1_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRPR1_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:48:03
% EndTime: 2019-12-05 17:48:16
% DurationCPUTime: 13.80s
% Computational Cost: add. (57452->593), mult. (127686->741), div. (0->0), fcn. (85065->8), ass. (0->387)
t905 = sin(pkin(8));
t906 = cos(pkin(8));
t908 = sin(qJ(3));
t911 = cos(qJ(3));
t863 = (-t905 * t911 - t906 * t908) * qJD(1);
t986 = qJD(1) * t911;
t865 = -t905 * t908 * qJD(1) + t906 * t986;
t1015 = t865 * t863;
t1023 = qJDD(3) + t1015;
t1027 = t1023 * t905;
t1026 = t1023 * t906;
t980 = qJD(1) * qJD(3);
t969 = t911 * t980;
t979 = t908 * qJDD(1);
t872 = -t969 - t979;
t893 = t911 * qJDD(1);
t970 = t908 * t980;
t873 = t893 - t970;
t824 = t905 * t872 + t906 * t873;
t985 = qJD(3) * t863;
t800 = t824 - t985;
t907 = sin(qJ(5));
t910 = cos(qJ(5));
t812 = -t910 * t863 + t907 * t865;
t814 = t907 * t863 + t910 * t865;
t772 = t814 * t812;
t900 = qJDD(3) + qJDD(5);
t1022 = -t772 + t900;
t1025 = t1022 * t907;
t1024 = t1022 * t910;
t955 = -t906 * t872 + t905 * t873;
t749 = -t812 * qJD(5) + t910 * t824 - t907 * t955;
t901 = qJD(3) + qJD(5);
t805 = t901 * t812;
t1021 = -t805 + t749;
t854 = qJD(3) * t865;
t798 = -t955 + t854;
t1020 = pkin(6) + pkin(1);
t914 = qJD(1) ^ 2;
t909 = sin(qJ(1));
t912 = cos(qJ(1));
t882 = t909 * g(1) - t912 * g(2);
t947 = qJDD(2) - t882;
t931 = -t914 * qJ(2) + t947;
t917 = -t1020 * qJDD(1) + t931;
t916 = t911 * t917;
t827 = t908 * g(3) + t916;
t828 = t911 * g(3) - t908 * t917;
t778 = t911 * t827 - t908 * t828;
t810 = t812 ^ 2;
t811 = t814 ^ 2;
t860 = t863 ^ 2;
t861 = t865 ^ 2;
t899 = t901 ^ 2;
t1019 = pkin(2) * t778;
t902 = qJDD(1) * qJ(2);
t883 = t912 * g(1) + t909 * g(2);
t922 = -0.2e1 * qJD(2) * qJD(1) + t883;
t919 = -t902 + t922;
t842 = t1020 * t914 + t919;
t1018 = pkin(2) * t842;
t903 = t908 ^ 2;
t904 = t911 ^ 2;
t987 = t903 + t904;
t875 = t987 * qJDD(1);
t1017 = pkin(2) * t875;
t1016 = qJDD(1) * pkin(1);
t1014 = t901 * t907;
t1013 = t901 * t910;
t1012 = t903 * t914;
t981 = qJD(4) * t865;
t852 = -0.2e1 * t981;
t992 = t911 * t914;
t788 = t916 - t873 * qJ(4) + qJDD(3) * pkin(3) + (-pkin(3) * t992 - qJ(4) * t980 + g(3)) * t908;
t936 = qJD(3) * pkin(3) - qJ(4) * t986;
t789 = -pkin(3) * t1012 + t872 * qJ(4) - qJD(3) * t936 - t828;
t959 = -t906 * t788 + t905 * t789;
t945 = t852 - t959;
t694 = pkin(4) * t1023 - t800 * pkin(7) + t945;
t982 = qJD(4) * t863;
t850 = 0.2e1 * t982;
t988 = t905 * t788 + t906 * t789;
t723 = t850 + t988;
t944 = qJD(3) * pkin(4) - t865 * pkin(7);
t699 = -t860 * pkin(4) - pkin(7) * t955 - qJD(3) * t944 + t723;
t660 = -t910 * t694 + t907 * t699;
t661 = t907 * t694 + t910 * t699;
t630 = -t910 * t660 + t907 * t661;
t1011 = t905 * t630;
t790 = t872 * pkin(3) - qJDD(4) - t936 * t986 + (t903 * qJ(4) + t1020) * t914 + t919;
t1010 = t905 * t790;
t818 = qJDD(3) - t1015;
t1009 = t905 * t818;
t1008 = t906 * t630;
t1007 = t906 * t790;
t1006 = t906 * t818;
t724 = -pkin(4) * t955 + t860 * pkin(7) - t865 * t944 + t790;
t1005 = t907 * t724;
t766 = t772 + t900;
t1004 = t907 * t766;
t976 = 0.2e1 * t981;
t722 = t959 + t976;
t683 = -t906 * t722 + t905 * t723;
t1003 = t908 * t683;
t1001 = t908 * t842;
t889 = t908 * t992;
t880 = qJDD(3) + t889;
t1000 = t908 * t880;
t881 = qJDD(3) - t889;
t999 = t908 * t881;
t998 = t909 * t875;
t997 = t910 * t724;
t996 = t910 * t766;
t995 = t911 * t683;
t829 = t911 * t842;
t994 = t911 * t880;
t993 = t911 * t881;
t991 = t912 * t875;
t631 = t907 * t660 + t910 * t661;
t611 = t905 * t631 + t1008;
t629 = pkin(4) * t630;
t990 = pkin(3) * t611 + t629;
t958 = -t907 * t824 - t910 * t955;
t717 = (-qJD(5) + t901) * t814 + t958;
t720 = t805 + t749;
t679 = t907 * t717 - t910 * t720;
t681 = t910 * t717 + t907 * t720;
t642 = t906 * t679 + t905 * t681;
t677 = pkin(4) * t679;
t989 = pkin(3) * t642 + t677;
t984 = qJD(3) * t905;
t983 = qJD(3) * t906;
t978 = t909 * qJDD(1);
t977 = t912 * qJDD(1);
t975 = t909 * t772;
t974 = t909 * t1015;
t973 = t912 * t772;
t972 = t912 * t1015;
t913 = qJD(3) ^ 2;
t847 = -t861 - t913;
t784 = t906 * t847 - t1009;
t971 = pkin(3) * t784 - t988;
t684 = t905 * t722 + t906 * t723;
t647 = t908 * t684 + t995;
t682 = pkin(3) * t683;
t968 = -pkin(2) * t647 - t682;
t752 = t905 * t798 - t906 * t800;
t754 = t906 * t798 + t905 * t800;
t696 = t911 * t752 + t908 * t754;
t750 = pkin(3) * t752;
t967 = -pkin(2) * t696 - t750;
t612 = t906 * t631 - t1011;
t626 = pkin(4) * t724 + pkin(7) * t631;
t595 = pkin(3) * t724 - pkin(7) * t1011 + qJ(4) * t612 + t906 * t626;
t597 = -pkin(7) * t1008 - qJ(4) * t611 - t905 * t626;
t966 = -t908 * t595 + t911 * t597;
t747 = -t810 - t811;
t616 = -pkin(4) * t747 + pkin(7) * t681 + t631;
t622 = -pkin(7) * t679 - t630;
t644 = -t905 * t679 + t906 * t681;
t603 = -pkin(3) * t747 + qJ(4) * t644 + t906 * t616 + t905 * t622;
t605 = -qJ(4) * t642 - t905 * t616 + t906 * t622;
t965 = -t908 * t603 + t911 * t605;
t764 = -t899 - t810;
t706 = t910 * t764 - t1025;
t806 = t901 * t814;
t933 = t814 * qJD(5) - t958;
t715 = t806 + t933;
t657 = -pkin(4) * t715 + pkin(7) * t706 + t997;
t705 = t907 * t764 + t1024;
t671 = -t905 * t705 + t906 * t706;
t676 = -pkin(7) * t705 - t1005;
t617 = -pkin(3) * t715 + qJ(4) * t671 + t906 * t657 + t905 * t676;
t670 = t906 * t705 + t905 * t706;
t625 = -qJ(4) * t670 - t905 * t657 + t906 * t676;
t964 = -t908 * t617 + t911 * t625;
t801 = -t811 - t899;
t729 = -t907 * t801 - t996;
t663 = -pkin(4) * t1021 + pkin(7) * t729 - t1005;
t728 = t910 * t801 - t1004;
t685 = -pkin(7) * t728 - t997;
t688 = -t905 * t728 + t906 * t729;
t623 = -pkin(3) * t1021 + qJ(4) * t688 + t906 * t663 + t905 * t685;
t687 = t906 * t728 + t905 * t729;
t628 = -qJ(4) * t687 - t905 * t663 + t906 * t685;
t963 = -t908 * t623 + t911 * t628;
t795 = -t860 - t861;
t662 = -pkin(3) * t795 + qJ(4) * t754 + t684;
t665 = -qJ(4) * t752 - t683;
t962 = -t908 * t662 + t911 * t665;
t816 = -t913 - t860;
t774 = t906 * t816 - t1027;
t796 = t854 + t955;
t702 = -pkin(3) * t796 + qJ(4) * t774 + t1007;
t773 = t905 * t816 + t1026;
t726 = -qJ(4) * t773 - t1010;
t961 = -t908 * t702 + t911 * t726;
t787 = -t905 * t847 - t1006;
t799 = t824 + t985;
t703 = -pkin(3) * t799 + qJ(4) * t787 - t1010;
t742 = -qJ(4) * t784 - t1007;
t960 = -t908 * t703 + t911 * t742;
t849 = t914 * pkin(1) + t919;
t855 = -t931 + t1016;
t956 = -t912 * t849 - t909 * t855;
t954 = -t909 * t882 - t912 * t883;
t953 = t909 * t889;
t952 = t912 * t889;
t598 = t911 * t611 + t908 * t612;
t951 = -pkin(2) * t598 - t990;
t619 = t911 * t642 + t908 * t644;
t950 = -pkin(2) * t619 - t989;
t876 = -t909 * t914 + t977;
t949 = pkin(5) * t876 + t909 * g(3);
t877 = t912 * t914 + t978;
t948 = -pkin(5) * t877 + t912 * g(3);
t946 = pkin(4) * t705 - t660;
t871 = 0.2e1 * t969 + t979;
t943 = pkin(2) * t871 - t829;
t874 = t893 - 0.2e1 * t970;
t942 = pkin(2) * t874 + t1001;
t779 = -t908 * t827 - t911 * t828;
t941 = t909 * t849 - t912 * t855;
t940 = t912 * t882 - t909 * t883;
t736 = t911 * t784 + t908 * t787;
t939 = -pkin(2) * t736 - t971;
t896 = t904 * t914;
t888 = -t896 - t913;
t834 = t911 * t888 - t1000;
t938 = -pkin(2) * t834 - t828;
t937 = pkin(3) * t670 + t946;
t668 = pkin(3) * t790 + qJ(4) * t684;
t935 = -qJ(4) * t995 - t908 * t668;
t934 = pkin(4) * t728 - t661;
t707 = t911 * t773 + t908 * t774;
t771 = pkin(3) * t773;
t932 = -pkin(2) * t707 - t771 + t959;
t930 = pkin(3) * t687 + t934;
t929 = -pkin(2) * t724 - t911 * t595 - t908 * t597;
t928 = pkin(2) * t747 - t911 * t603 - t908 * t605;
t927 = pkin(2) * t715 - t911 * t617 - t908 * t625;
t926 = pkin(2) * t1021 - t911 * t623 - t908 * t628;
t925 = pkin(2) * t795 - t911 * t662 - t908 * t665;
t924 = pkin(2) * t796 - t911 * t702 - t908 * t726;
t923 = pkin(2) * t799 - t911 * t703 - t908 * t742;
t634 = t911 * t670 + t908 * t671;
t921 = -pkin(2) * t634 - t937;
t920 = -pkin(2) * t790 + qJ(4) * t1003 - t911 * t668;
t649 = t911 * t687 + t908 * t688;
t918 = -pkin(2) * t649 - t930;
t886 = -t913 - t1012;
t832 = t908 * t886 + t993;
t915 = -pkin(2) * t832 - t827;
t894 = t912 * qJDD(3);
t892 = t909 * qJDD(3);
t887 = -t896 + t913;
t885 = -t913 + t1012;
t879 = t896 + t1012;
t878 = -t896 + t1012;
t869 = t987 * t980;
t868 = t947 - 0.2e1 * t1016;
t862 = 0.2e1 * t902 - t922;
t851 = -0.2e1 * t982;
t846 = -t861 + t913;
t845 = t860 - t913;
t844 = t908 * t873 + t904 * t980;
t843 = t911 * t872 + t903 * t980;
t839 = -t908 * t888 - t994;
t838 = -t908 * t887 + t993;
t837 = (t873 - t970) * t911;
t836 = t911 * t886 - t999;
t835 = t911 * t885 - t1000;
t833 = t911 * t887 + t999;
t831 = t908 * t885 + t994;
t830 = (-t872 + t969) * t908;
t826 = -t911 * t871 - t908 * t874;
t825 = -t908 * t871 + t911 * t874;
t821 = t860 - t861;
t809 = pkin(1) * t855 - qJ(2) * t849;
t808 = (t863 * t906 + t865 * t905) * qJD(3);
t807 = (t863 * t905 - t865 * t906) * qJD(3);
t803 = -t811 + t899;
t802 = t810 - t899;
t794 = t906 * t824 - t865 * t984;
t793 = t905 * t824 + t865 * t983;
t792 = -t863 * t983 + t905 * t955;
t791 = -t863 * t984 - t906 * t955;
t786 = -t905 * t846 + t1026;
t785 = t906 * t845 - t1009;
t783 = t906 * t846 + t1027;
t782 = t905 * t845 + t1006;
t775 = pkin(2) * t879 + t779;
t770 = -qJ(2) * t839 - t938;
t769 = -qJ(2) * t836 - t915;
t768 = t811 - t810;
t763 = -t1020 * t836 + t943;
t762 = -t1020 * t839 + t942;
t761 = qJ(2) * t874 - t1020 * t834 - t829;
t760 = qJ(2) * t871 - t1020 * t832 - t1001;
t759 = -t908 * t807 + t911 * t808;
t758 = t911 * t807 + t908 * t808;
t757 = (-t812 * t910 + t814 * t907) * t901;
t756 = (-t812 * t907 - t814 * t910) * t901;
t755 = -qJ(2) * t879 + t1020 * t875 - t778;
t753 = -t906 * t796 - t905 * t799;
t751 = -t905 * t796 + t906 * t799;
t746 = -t908 * t793 + t911 * t794;
t745 = -t908 * t791 + t911 * t792;
t744 = t911 * t793 + t908 * t794;
t743 = t911 * t791 + t908 * t792;
t740 = -qJ(2) * t779 + t1019;
t739 = -t908 * t784 + t911 * t787;
t738 = -t908 * t783 + t911 * t786;
t737 = -t908 * t782 + t911 * t785;
t735 = t911 * t783 + t908 * t786;
t734 = t911 * t782 + t908 * t785;
t733 = t910 * t802 - t1004;
t732 = -t907 * t803 + t1024;
t731 = t907 * t802 + t996;
t730 = t910 * t803 + t1025;
t716 = -t806 + t933;
t714 = -t1020 * t779 - t1018;
t713 = -qJ(2) * t842 - t1020 * t778;
t712 = -t814 * t1014 + t910 * t749;
t711 = t814 * t1013 + t907 * t749;
t710 = t812 * t1013 + t907 * t933;
t709 = t812 * t1014 - t910 * t933;
t708 = -t908 * t773 + t911 * t774;
t701 = -t905 * t756 + t906 * t757;
t700 = t906 * t756 + t905 * t757;
t698 = -t908 * t752 + t911 * t754;
t697 = -t908 * t751 + t911 * t753;
t695 = t911 * t751 + t908 * t753;
t692 = -t905 * t731 + t906 * t733;
t691 = -t905 * t730 + t906 * t732;
t690 = t906 * t731 + t905 * t733;
t689 = t906 * t730 + t905 * t732;
t680 = -t1021 * t907 - t910 * t715;
t678 = t1021 * t910 - t907 * t715;
t675 = -t905 * t711 + t906 * t712;
t674 = -t905 * t709 + t906 * t710;
t673 = t906 * t711 + t905 * t712;
t672 = t906 * t709 + t905 * t710;
t667 = -t908 * t700 + t911 * t701;
t666 = t911 * t700 + t908 * t701;
t658 = -qJ(2) * t739 + t851 - t939;
t656 = -qJ(2) * t698 - t967;
t655 = -qJ(2) * t708 + t852 - t932;
t654 = -t908 * t690 + t911 * t692;
t653 = -t908 * t689 + t911 * t691;
t652 = t911 * t690 + t908 * t692;
t651 = t911 * t689 + t908 * t691;
t650 = -t908 * t687 + t911 * t688;
t648 = t911 * t684 - t1003;
t646 = -t1020 * t739 + t923;
t645 = qJ(2) * t799 - t1020 * t736 + t960;
t643 = -t905 * t678 + t906 * t680;
t641 = t906 * t678 + t905 * t680;
t639 = -t908 * t673 + t911 * t675;
t638 = -t908 * t672 + t911 * t674;
t637 = t911 * t673 + t908 * t675;
t636 = t911 * t672 + t908 * t674;
t635 = -t908 * t670 + t911 * t671;
t633 = -t1020 * t708 + t924;
t632 = qJ(2) * t796 - t1020 * t707 + t961;
t621 = -t908 * t642 + t911 * t644;
t620 = -t908 * t641 + t911 * t643;
t618 = t911 * t641 + t908 * t643;
t615 = -t1020 * t698 + t925;
t614 = qJ(2) * t795 - t1020 * t696 + t962;
t613 = -qJ(2) * t648 - t968;
t609 = -t1020 * t648 + t920;
t608 = -qJ(2) * t790 - t1020 * t647 + t935;
t607 = -qJ(2) * t650 - t918;
t606 = -qJ(2) * t635 - t921;
t602 = -t1020 * t650 + t926;
t601 = qJ(2) * t1021 - t1020 * t649 + t963;
t600 = -qJ(2) * t621 - t950;
t599 = -t908 * t611 + t911 * t612;
t594 = -t1020 * t635 + t927;
t593 = qJ(2) * t715 - t1020 * t634 + t964;
t592 = -t1020 * t621 + t928;
t591 = qJ(2) * t747 - t1020 * t619 + t965;
t590 = -qJ(2) * t599 - t951;
t589 = -t1020 * t599 + t929;
t588 = -qJ(2) * t724 - t1020 * t598 + t966;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t876, 0, -t877, 0, -t949, -t948, -t940, -pkin(5) * t940, 0, -t876, t877, 0, 0, 0, t941, t949, t948, pkin(5) * t941 + (-t909 * pkin(1) + t912 * qJ(2)) * g(3), t909 * t844 + t952, t909 * t825 - t912 * t878, t909 * t833 + t911 * t977, t909 * t843 - t952, t909 * t831 - t908 * t977, -t909 * t869 + t894, t912 * t769 - t909 * t763 - pkin(5) * (-t912 * t832 + t909 * t871), t912 * t770 - t909 * t762 - pkin(5) * (-t912 * t834 + t909 * t874), -pkin(2) * t991 + t909 * t775 - pkin(5) * (-t909 * t879 + t991), t912 * t740 - t909 * t714 - pkin(5) * (-t912 * t778 - t909 * t842), t909 * t744 - t972, t909 * t695 - t912 * t821, t909 * t735 + t912 * t800, t909 * t743 + t972, t909 * t734 + t798 * t912, t909 * t758 + t894, t912 * t655 - t909 * t633 - pkin(5) * (-t912 * t707 + t909 * t796), t912 * t658 - t909 * t646 - pkin(5) * (-t912 * t736 + t909 * t799), t912 * t656 - t909 * t615 - pkin(5) * (-t912 * t696 + t909 * t795), t912 * t613 - t909 * t609 - pkin(5) * (-t912 * t647 - t909 * t790), t909 * t637 + t973, t909 * t618 + t912 * t768, t909 * t651 + t912 * t720, t909 * t636 - t973, t909 * t652 - t912 * t716, t909 * t666 + t912 * t900, t912 * t606 - t909 * t594 - pkin(5) * (-t912 * t634 + t909 * t715), t912 * t607 - t909 * t602 - pkin(5) * (t1021 * t909 - t912 * t649), t912 * t600 - t909 * t592 - pkin(5) * (-t912 * t619 + t909 * t747), t912 * t590 - t909 * t589 - pkin(5) * (-t912 * t598 - t909 * t724); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t877, 0, t876, 0, t948, -t949, t954, pkin(5) * t954, 0, -t877, -t876, 0, 0, 0, t956, -t948, t949, pkin(5) * t956 + (t912 * pkin(1) + t909 * qJ(2)) * g(3), -t912 * t844 + t953, -t912 * t825 - t909 * t878, -t912 * t833 + t893 * t909, -t912 * t843 - t953, -t912 * t831 - t908 * t978, t912 * t869 + t892, t909 * t769 + t912 * t763 + pkin(5) * (t909 * t832 + t912 * t871), t909 * t770 + t912 * t762 + pkin(5) * (t909 * t834 + t912 * t874), -pkin(2) * t998 - t912 * t775 + pkin(5) * (-t912 * t879 - t998), t909 * t740 + t912 * t714 + pkin(5) * (t909 * t778 - t912 * t842), -t912 * t744 - t974, -t912 * t695 - t909 * t821, -t912 * t735 + t909 * t800, -t912 * t743 + t974, -t912 * t734 + t798 * t909, -t912 * t758 + t892, t909 * t655 + t912 * t633 + pkin(5) * (t909 * t707 + t912 * t796), t909 * t658 + t912 * t646 + pkin(5) * (t909 * t736 + t912 * t799), t909 * t656 + t912 * t615 + pkin(5) * (t909 * t696 + t912 * t795), t909 * t613 + t912 * t609 + pkin(5) * (t909 * t647 - t912 * t790), -t912 * t637 + t975, -t912 * t618 + t909 * t768, -t912 * t651 + t909 * t720, -t912 * t636 - t975, -t912 * t652 - t909 * t716, -t912 * t666 + t909 * t900, t909 * t606 + t912 * t594 + pkin(5) * (t909 * t634 + t912 * t715), t909 * t607 + t912 * t602 + pkin(5) * (t1021 * t912 + t909 * t649), t909 * t600 + t912 * t592 + pkin(5) * (t909 * t619 + t912 * t747), t909 * t590 + t912 * t589 + pkin(5) * (t909 * t598 - t912 * t724); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t882, t883, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t868, t862, t809, t837, t826, t838, t830, t835, 0, t760, t761, t755, t713, t746, t697, t738, t745, t737, t759, t632, t645, t614, t608, t639, t620, t653, t638, t654, t667, t593, t601, t591, t588; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t914, 0, 0, -g(3), -t882, 0, 0, -qJDD(1), t914, 0, 0, 0, -t855, 0, g(3), qJ(2) * g(3), t889, -t878, t893, -t889, -t979, qJDD(3), t769, t770, -t1017, t740, -t1015, -t821, t800, t1015, t798, qJDD(3), t655, t658, t656, t613, t772, t768, t720, -t772, -t716, t900, t606, t607, t600, t590; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t914, 0, qJDD(1), 0, g(3), 0, -t883, 0, 0, -t914, -qJDD(1), 0, 0, 0, -t849, -g(3), 0, pkin(1) * g(3), -t844, -t825, -t833, -t843, -t831, t869, t763, t762, -t775, t714, -t744, -t695, -t735, -t743, -t734, -t758, t633, t646, t615, t609, -t637, -t618, -t651, -t636, -t652, -t666, t594, t602, t592, t589; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t882, t883, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t868, t862, t809, t837, t826, t838, t830, t835, 0, t760, t761, t755, t713, t746, t697, t738, t745, t737, t759, t632, t645, t614, t608, t639, t620, t653, t638, t654, t667, t593, t601, t591, t588; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t855, -t849, 0, t837, t826, t838, t830, t835, 0, -pkin(6) * t832 - t1001, -pkin(6) * t834 - t829, pkin(6) * t875 - t778, -pkin(6) * t778, t746, t697, t738, t745, t737, t759, -pkin(6) * t707 + t961, -pkin(6) * t736 + t960, -pkin(6) * t696 + t962, -pkin(6) * t647 + t935, t639, t620, t653, t638, t654, t667, -pkin(6) * t634 + t964, -pkin(6) * t649 + t963, -pkin(6) * t619 + t965, -pkin(6) * t598 + t966; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t914, 0, 0, 0, t855, 0, -g(3), 0, -t889, t878, -t893, t889, t979, -qJDD(3), t915, t938, t1017, -t1019, t1015, t821, -t800, -t1015, -t798, -qJDD(3), t932 + t976, t850 + t939, t967, t968, -t772, -t768, -t720, t772, t716, -t900, t921, t918, t950, t951; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t914, qJDD(1), 0, 0, 0, t849, g(3), 0, 0, t844, t825, t833, t843, t831, -t869, pkin(6) * t836 - t943, pkin(6) * t839 - t942, t775, pkin(6) * t779 + t1018, t744, t695, t735, t743, t734, t758, pkin(6) * t708 - t924, pkin(6) * t739 - t923, pkin(6) * t698 - t925, pkin(6) * t648 - t920, t637, t618, t651, t636, t652, t666, pkin(6) * t635 - t927, pkin(6) * t650 - t926, pkin(6) * t621 - t928, pkin(6) * t599 - t929; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t873, -t871, t881, t970, t885, -t970, 0, -t842, -t827, 0, t794, t753, t786, t792, t785, t808, t726, t742, t665, -qJ(4) * t683, t675, t643, t691, t674, t692, t701, t625, t628, t605, t597; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t969, t874, t887, t872, t880, -t969, t842, 0, -t828, 0, t793, t751, t783, t791, t782, t807, t702, t703, t662, t668, t673, t641, t689, t672, t690, t700, t617, t623, t603, t595; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t889, -t878, t893, -t889, -t979, qJDD(3), t827, t828, 0, 0, -t1015, -t821, t800, t1015, t798, qJDD(3), t771 + t945, t851 + t971, t750, t682, t772, t768, t720, -t772, -t716, t900, t937, t930, t989, t990; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t824, -t796, t1023, -t985, t845, t985, 0, -t790, t722, 0, t712, t680, t732, t710, t733, t757, t676, t685, t622, -pkin(7) * t630; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t854, t799, t846, -t955, t818, -t854, t790, 0, t723, 0, t711, t678, t730, t709, t731, t756, t657, t663, t616, t626; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1015, -t821, t800, t1015, t798, qJDD(3), -t722, -t723, 0, 0, t772, t768, t720, -t772, -t716, t900, t946, t934, t677, t629; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t749, -t715, t1022, t805, t802, -t805, 0, -t724, t660, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t806, t1021, t803, -t933, t766, -t806, t724, 0, t661, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t772, t768, t720, -t772, -t716, t900, -t660, -t661, 0, 0;];
m_new_reg = t1;
