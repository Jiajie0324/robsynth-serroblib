% Calculate minimal parameter regressor of coriolis matrix for
% S5RRRPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x28]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:21
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RRRPR8_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR8_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR8_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRPR8_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:20:29
% EndTime: 2019-12-31 21:20:38
% DurationCPUTime: 3.52s
% Computational Cost: add. (3004->299), mult. (6085->379), div. (0->0), fcn. (6233->6), ass. (0->236)
t215 = cos(qJ(2));
t343 = cos(qJ(3));
t197 = t343 * t215;
t212 = sin(qJ(3));
t213 = sin(qJ(2));
t303 = t212 * t213;
t171 = -t197 + t303;
t211 = sin(qJ(5));
t207 = qJD(2) + qJD(3);
t214 = cos(qJ(5));
t362 = t207 * t214;
t371 = t211 * t362;
t228 = 0.2e1 * t371 * t171;
t168 = t171 ^ 2;
t209 = t211 ^ 2;
t210 = t214 ^ 2;
t189 = t209 - t210;
t95 = t189 * t168;
t375 = t95 * qJD(1) + t228;
t88 = (t210 / 0.2e1 - t209 / 0.2e1) * t171;
t46 = -t88 * qJD(1) + t371;
t173 = t212 * t215 + t343 * t213;
t351 = -pkin(7) - pkin(6);
t181 = t351 * t213;
t182 = t351 * t215;
t256 = -t343 * t181 - t212 * t182;
t239 = t173 * pkin(4) + t256;
t372 = t211 * t239;
t199 = -t215 * pkin(2) - pkin(1);
t309 = t173 * qJ(4);
t240 = t199 - t309;
t352 = pkin(3) + pkin(8);
t310 = t352 * t171;
t47 = t240 + t310;
t28 = t214 * t47 + t372;
t374 = (t28 - t372) * t171;
t232 = t212 * t181 - t343 * t182;
t221 = -t171 * pkin(4) + t232;
t370 = t214 * t239;
t27 = t211 * t47 - t370;
t308 = t173 * t214;
t373 = (t27 + t370) * t171 - t221 * t308;
t361 = t214 * t221;
t353 = t361 / 0.2e1;
t341 = t212 * pkin(2);
t194 = qJ(4) + t341;
t369 = t256 * t194;
t271 = t343 * pkin(2);
t198 = -t271 - pkin(3);
t193 = -pkin(8) + t198;
t268 = -t341 / 0.2e1;
t348 = t194 / 0.2e1;
t250 = t268 + t348;
t350 = -qJ(4) / 0.2e1;
t226 = (t350 + t250) * t173;
t344 = t352 / 0.2e1;
t368 = t226 + (t193 / 0.2e1 + t271 / 0.2e1 + t344) * t171;
t367 = t207 * t256;
t365 = t232 * pkin(3);
t364 = t173 * t207;
t363 = t207 * t211;
t307 = t194 * t173;
t346 = t212 / 0.2e1;
t218 = (-t343 * t171 / 0.2e1 + t173 * t346) * pkin(2) - t307 / 0.2e1;
t359 = t218 - t309 / 0.2e1;
t354 = t173 ^ 2;
t272 = t354 - t168;
t357 = t232 * qJD(4);
t286 = qJD(1) * t214;
t265 = t211 * t286;
t356 = t168 * t265 + t207 * t88;
t77 = -0.2e1 * t171 * t265 + t207 * t189;
t355 = t207 * t232;
t349 = t232 / 0.2e1;
t347 = -t211 / 0.2e1;
t342 = t171 * pkin(3);
t206 = t213 * pkin(2);
t340 = pkin(2) * qJD(3);
t162 = t173 * pkin(8);
t313 = t171 * qJ(4);
t101 = t173 * pkin(3) + t313;
t92 = t101 + t206;
t50 = t162 + t92;
t337 = t211 * t50;
t1 = (t361 - t337) * t173 + t373;
t339 = t1 * qJD(1);
t335 = t214 * t50;
t2 = -t335 * t173 + t374;
t338 = t2 * qJD(1);
t65 = t101 + t162;
t336 = t211 * t65;
t3 = (t361 - t336) * t173 + t373;
t333 = t3 * qJD(1);
t4 = -t65 * t308 + t374;
t332 = t4 * qJD(1);
t327 = t221 * t211;
t85 = t240 + t342;
t326 = t85 * t171;
t325 = t85 * t173;
t311 = t171 * t211;
t18 = -t28 * t173 + t221 * t311;
t323 = qJD(1) * t18;
t29 = -t92 * t171 - t325;
t322 = qJD(1) * t29;
t30 = -t92 * t173 + t326;
t321 = qJD(1) * t30;
t31 = -t101 * t171 - t325;
t320 = qJD(1) * t31;
t32 = -t101 * t173 + t326;
t319 = qJD(1) * t32;
t80 = t171 * t206 + t199 * t173;
t318 = qJD(1) * t80;
t81 = -t199 * t171 + t173 * t206;
t317 = qJD(1) * t81;
t15 = t85 * t92;
t316 = t15 * qJD(1);
t16 = t85 * t101;
t315 = t16 * qJD(1);
t89 = t214 * t171;
t17 = t27 * t173 + t221 * t89;
t314 = t17 * qJD(1);
t312 = t171 * t193;
t306 = t198 * t171;
t304 = t209 * t171;
t86 = t211 * t173;
t25 = -t226 + (-t271 / 0.2e1 - t198 / 0.2e1 - pkin(3) / 0.2e1) * t171;
t302 = t25 * qJD(1);
t53 = t272 * t211;
t301 = t53 * qJD(1);
t54 = t272 * t214;
t300 = t54 * qJD(1);
t299 = t272 * qJD(1);
t298 = t86 * qJD(1);
t203 = qJD(3) * t271;
t204 = qJD(4) * t211;
t293 = t211 * t203 + t204;
t205 = qJD(4) * t214;
t292 = t214 * t203 + t205;
t200 = qJD(2) * t341;
t202 = t212 * t340;
t291 = t200 + t202;
t290 = qJ(4) * qJD(3);
t289 = qJD(1) * t173;
t288 = qJD(1) * t199;
t287 = qJD(1) * t211;
t285 = qJD(1) * t215;
t284 = qJD(3) * t199;
t283 = qJD(5) * t211;
t282 = qJD(5) * t214;
t281 = qJD(5) * t352;
t163 = t303 / 0.2e1 - t197 / 0.2e1;
t280 = t163 * qJD(1);
t279 = t354 * qJD(1);
t278 = t354 * qJD(4);
t161 = t171 * qJD(4);
t190 = -t213 ^ 2 + t215 ^ 2;
t277 = t190 * qJD(1);
t276 = t194 * qJD(2);
t275 = t213 * qJD(2);
t274 = t215 * qJD(2);
t273 = t203 + qJD(4);
t270 = pkin(1) * t213 * qJD(1);
t269 = pkin(1) * t285;
t266 = t85 * t289;
t264 = t173 * t283;
t263 = t173 * t282;
t110 = t171 * t289;
t262 = t171 * t288;
t261 = t173 * t288;
t260 = t354 * t287;
t259 = t213 * t285;
t258 = t211 * t282;
t155 = t173 * t286;
t64 = t163 * qJD(5) + t110;
t253 = qJD(5) + t289;
t201 = qJD(2) * t271;
t248 = t171 * t363;
t246 = t309 - t310;
t245 = t307 + t312;
t217 = (t256 * t346 + t343 * t349) * pkin(2) - t369 / 0.2e1 + t198 * t349;
t238 = t365 / 0.2e1 - t256 * t350;
t13 = t217 + t238;
t131 = -t194 * t271 - t198 * t341;
t244 = t13 * qJD(1) - t131 * qJD(2);
t236 = t350 - t250;
t234 = -t193 * t173 / 0.2e1 + t171 * t348;
t225 = t50 / 0.2e1 + t234;
t9 = t353 - t361 / 0.2e1 + t225 * t211;
t235 = -t9 * qJD(1) - t214 * t276;
t233 = t173 * t344 + t313 / 0.2e1;
t11 = t225 * t214;
t231 = -t11 * qJD(1) + t211 * t276;
t230 = t253 * t311;
t224 = t65 / 0.2e1 + t233;
t6 = t368 * t211;
t223 = -t6 * qJD(1) - t214 * t201;
t8 = t368 * t214;
t222 = t8 * qJD(1) - t211 * t201;
t121 = t236 * t211;
t34 = t224 * t214;
t220 = -t34 * qJD(1) - t121 * qJD(2) + t211 * t290;
t122 = t236 * t214;
t33 = t224 * t211;
t219 = -t33 * qJD(1) + t122 * qJD(2) - t214 * t290;
t208 = qJ(4) * qJD(4);
t188 = t207 * qJ(4);
t187 = t194 * qJD(4);
t180 = t189 * qJD(5);
t156 = t211 * t161;
t154 = t173 * t287;
t130 = -t155 - t282;
t129 = -t154 - t283;
t124 = t194 * t214;
t123 = t211 * t268 + (qJ(4) + t194) * t347;
t99 = t207 * t171;
t94 = t207 * t163;
t83 = t89 * qJD(4);
t82 = t88 * qJD(5);
t42 = t171 * t364;
t40 = -0.2e1 * t214 * t230;
t39 = -t263 - t300;
t38 = -t264 - t301;
t37 = -t209 * t110 + t82;
t36 = t248 + t300;
t35 = -t171 * t362 + t301;
t26 = -t306 / 0.2e1 + t342 / 0.2e1 + t359;
t24 = t82 + (qJD(1) * t304 + t371) * t173;
t23 = -t189 * t364 + 0.2e1 * (-qJD(5) + t289) * t211 * t89;
t22 = -t327 + (-t65 / 0.2e1 + t233) * t214;
t21 = t361 - t336 / 0.2e1 + t233 * t211;
t14 = t217 - t238;
t12 = -t327 / 0.2e1 - t335 / 0.2e1 + t221 * t347 + t234 * t214;
t10 = 0.2e1 * t353 - t337 / 0.2e1 + t234 * t211;
t7 = -t372 + t89 * t344 + (-t312 / 0.2e1 + t359) * t214;
t5 = -t370 + qJ(4) * t86 / 0.2e1 + (-t310 / 0.2e1 + t312 / 0.2e1 - t218) * t211;
t19 = [0, 0, 0, t213 * t274, t190 * qJD(2), 0, 0, 0, -pkin(1) * t275, -pkin(1) * t274, -t42, -t207 * t272, 0, 0, 0, t80 * qJD(2) + t173 * t284, t81 * qJD(2) - t171 * t284, 0, t29 * qJD(2) + t31 * qJD(3) + t161 * t173, t30 * qJD(2) + t32 * qJD(3) + t278, t15 * qJD(2) + t16 * qJD(3) - qJD(4) * t325, t168 * t258 + t304 * t364, -t95 * qJD(5) + t173 * t228, t171 * t263 + t207 * t53, -t171 * t264 + t207 * t54, -t42, t1 * qJD(2) + t3 * qJD(3) + t18 * qJD(5) + t354 * t204, t2 * qJD(2) + t4 * qJD(3) + t17 * qJD(5) + t214 * t278; 0, 0, 0, t259, t277, t274, -t275, 0, -pkin(6) * t274 - t270, pkin(6) * t275 - t269, -t110, -t299, -t99, -t364, 0, -t355 + t318, t367 + t317, (-t306 - t307) * qJD(2) + t26 * qJD(3) - t161, t355 + t322, -t367 + t321, t316 + (t198 * t232 - t369) * qJD(2) + t14 * qJD(3) + t357, t24, t23, t35, t36, -t64, t339 + (-t214 * t245 - t372) * qJD(2) + t7 * qJD(3) - t83 + t10 * qJD(5), t338 + (t211 * t245 - t370) * qJD(2) + t5 * qJD(3) + t156 + t12 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t110, -t299, -t99, -t364, 0, t261 - t355, t367 - t262, t26 * qJD(2) + (-t309 + t342) * qJD(3) - t161, t320 + t355, -t367 + t319, t315 + t14 * qJD(2) + (-qJ(4) * t256 - t365) * qJD(3) + t357, t24, t23, t35, t36, -t64, t333 + t7 * qJD(2) + (-t214 * t246 - t372) * qJD(3) - t83 + t21 * qJD(5), t332 + t5 * qJD(2) + (t211 * t246 - t370) * qJD(3) + t156 + t22 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t99, t110, t279, -t266 + t355, 0, 0, 0, 0, 0, -t207 * t89 + t260, t214 * t279 + t248; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t356, -t375, t253 * t89, -t230, -t94, qJD(2) * t10 + qJD(3) * t21 - qJD(5) * t28 + t323, qJD(2) * t12 + qJD(3) * t22 + qJD(5) * t27 + t314; 0, 0, 0, -t259, -t277, 0, 0, 0, t270, t269, t110, t299, 0, 0, 0, -t318, -t317, qJD(3) * t25, -t322, -t321, qJD(3) * t13 - t316, t37, t40, t38, t39, t64, -qJD(3) * t8 + qJD(5) * t9 - t339, qJD(3) * t6 + qJD(5) * t11 - t338; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t202, -t203, 0, t202, t273, -t131 * qJD(3) + t187, -t258, t180, 0, 0, 0, t194 * t282 + t293, -t194 * t283 + t292; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t291, -t203 - t201, t302, t291, t273 + t201, (-pkin(3) * t212 + t343 * qJ(4)) * t340 + t187 + t244, -t258, t180, 0, 0, 0, t124 * qJD(5) - t222 + t293, t123 * qJD(5) - t223 + t292; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t207, t194 * t207, 0, 0, 0, 0, 0, t363, t362; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t46, t77, t129, t130, t280, t124 * qJD(3) - t193 * t283 - t235, t123 * qJD(3) - t193 * t282 - t231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t110, t299, 0, 0, 0, -t261, t262, -qJD(2) * t25, -t320, -t319, -qJD(2) * t13 - t315, t37, t40, t38, t39, t64, qJD(2) * t8 + qJD(5) * t33 - t333, -qJD(2) * t6 + qJD(5) * t34 - t332; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t200, t201, -t302, -t200, qJD(4) - t201, t208 - t244, -t258, t180, 0, 0, 0, -t122 * qJD(5) + t204 + t222, t121 * qJD(5) + t205 + t223; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(4), t208, -t258, t180, 0, 0, 0, qJ(4) * t282 + t204, -qJ(4) * t283 + t205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t207, t188, 0, 0, 0, 0, 0, t363, t362; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t46, t77, t129, t130, t280, t211 * t281 - t219, t214 * t281 - t220; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t110, -t279, t266, 0, 0, 0, 0, 0, -t86 * qJD(5) - t260, (-qJD(5) * t173 - t279) * t214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t207, -t276 - t290, 0, 0, 0, 0, 0, -t363, -t362; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t207, -t188, 0, 0, 0, 0, 0, -t363, -t362; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t283 - t298, -t253 * t214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t356, t375, (-t171 * t286 + t363) * t173, (t171 * t287 + t362) * t173, -t94, -qJD(2) * t9 - qJD(3) * t33 + qJD(4) * t86 - t323, -t11 * qJD(2) - t34 * qJD(3) + t173 * t205 - t314; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, -t77, t154, t155, -t280, t122 * qJD(3) + t235, -t121 * qJD(3) + t231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, -t77, t154, t155, -t280, t219, t220; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t298, t155; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t19;
