% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [5x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,a5,d1,d4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-07-18 17:19
% Revision: 08c8d617a845f5dd194efdf9aca2774760f7818f (2019-07-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRRR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(5,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR3_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR3_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [5 1]), ...
  'S5RRRRR3_invdynB_fixb_reg2_snew_vp: pkin has to be [5x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-07-18 17:18:58
% EndTime: 2019-07-18 17:19:19
% DurationCPUTime: 12.80s
% Computational Cost: add. (52102->559), mult. (106678->906), div. (0->0), fcn. (82814->10), ass. (0->437)
t704 = sin(qJ(2));
t708 = cos(qJ(3));
t745 = t704 * t708;
t703 = sin(qJ(3));
t709 = cos(qJ(2));
t747 = t703 * t709;
t662 = (t745 + t747) * qJD(1);
t738 = qJD(1) * qJD(2);
t725 = t709 * t738;
t737 = qJDD(1) * t704;
t670 = t725 + t737;
t694 = t709 * qJDD(1);
t726 = t704 * t738;
t671 = t694 - t726;
t722 = t703 * t670 - t708 * t671;
t601 = -qJD(3) * t662 - t722;
t705 = sin(qJ(1));
t710 = cos(qJ(1));
t680 = t705 * g(1) - t710 * g(2);
t782 = t671 - t726;
t626 = pkin(1) * t782 + t680;
t698 = qJD(2) + qJD(3);
t744 = t708 * t709;
t748 = t703 * t704;
t660 = (-t744 + t748) * qJD(1);
t650 = t698 * t660;
t715 = qJD(3) * t660 - t670 * t708 - t671 * t703;
t781 = t715 + t650;
t507 = t781 * pkin(5) + (t662 * t698 - t601) * pkin(2) - t626;
t718 = g(1) * t710 + g(2) * t705;
t655 = -t704 * g(3) - t709 * t718;
t700 = t709 ^ 2;
t712 = qJD(1) ^ 2;
t696 = t700 * t712;
t711 = qJD(2) ^ 2;
t684 = -t696 - t711;
t636 = pkin(1) * t684 + t655;
t654 = t709 * g(3) - t704 * t718;
t686 = t709 * t712 * t704;
t678 = qJDD(2) + t686;
t713 = pkin(1) * t678 - t654;
t587 = t708 * t636 + t703 * t713;
t619 = pkin(2) * t660 - pkin(5) * t662;
t734 = qJDD(2) + qJDD(3);
t774 = t698 ^ 2;
t546 = -pkin(2) * t774 + pkin(5) * t734 - t660 * t619 + t587;
t702 = sin(qJ(4));
t707 = cos(qJ(4));
t466 = -t707 * t507 + t702 * t546;
t633 = t662 * t702 - t707 * t698;
t635 = t662 * t707 + t698 * t702;
t597 = t635 * t633;
t600 = qJDD(4) - t601;
t778 = -t597 + t600;
t429 = pkin(3) * t778 - t466;
t467 = t702 * t507 + t707 * t546;
t631 = t633 ^ 2;
t656 = qJD(4) + t660;
t653 = t656 ^ 2;
t572 = -t631 - t653;
t439 = pkin(3) * t572 + t467;
t701 = sin(qJ(5));
t706 = cos(qJ(5));
t394 = -t706 * t429 + t439 * t701;
t395 = t701 * t429 + t706 * t439;
t350 = t394 * t706 - t395 * t701;
t792 = t350 * t702;
t791 = t350 * t707;
t586 = t636 * t703 - t708 * t713;
t541 = t586 * t708 - t587 * t703;
t790 = t541 * t704;
t789 = t541 * t709;
t591 = t706 * t633 + t635 * t701;
t593 = -t633 * t701 + t635 * t706;
t548 = t593 * t591;
t714 = qJDD(5) + t600;
t780 = -t548 + t714;
t788 = t701 * t780;
t787 = t702 * t778;
t623 = t662 * t660;
t777 = -t623 + t734;
t786 = t703 * t777;
t785 = t706 * t780;
t784 = t707 * t778;
t783 = t708 * t777;
t560 = -t633 * qJD(4) + t702 * t734 - t707 * t715;
t723 = -t702 * t715 - t707 * t734;
t716 = qJD(4) * t635 + t723;
t487 = -t591 * qJD(5) + t706 * t560 - t701 * t716;
t652 = qJD(5) + t656;
t566 = t652 * t591;
t779 = -t566 + t487;
t608 = t656 * t633;
t537 = -t608 + t560;
t667 = t710 * t680;
t775 = t705 * t718 - t667;
t724 = t701 * t560 + t706 * t716;
t449 = (qJD(5) - t652) * t593 + t724;
t534 = (qJD(4) - t656) * t635 + t723;
t574 = (qJD(3) - t698) * t662 + t722;
t589 = t591 ^ 2;
t590 = t593 ^ 2;
t632 = t635 ^ 2;
t651 = t652 ^ 2;
t658 = t660 ^ 2;
t659 = t662 ^ 2;
t578 = -t650 + t715;
t520 = -t574 * t703 + t578 * t708;
t773 = pkin(1) * t520;
t772 = pkin(2) * t703;
t545 = -t734 * pkin(2) - t774 * pkin(5) + t619 * t662 + t586;
t485 = t545 + (t635 * t656 + t716) * pkin(3);
t771 = t485 * t702;
t770 = t485 * t706;
t769 = t485 * t707;
t505 = t548 + t714;
t768 = t505 * t701;
t767 = t505 * t706;
t766 = t545 * t702;
t765 = t545 * t707;
t550 = t597 + t600;
t764 = t550 * t702;
t763 = t550 * t707;
t617 = t623 + t734;
t762 = t617 * t703;
t761 = t617 * t708;
t760 = t626 * t710;
t759 = t652 * t701;
t758 = t652 * t706;
t757 = t656 * t702;
t756 = t656 * t707;
t755 = t678 * t704;
t679 = qJDD(2) - t686;
t754 = t679 * t704;
t753 = t679 * t709;
t752 = t680 * t705;
t751 = t698 * t703;
t750 = t698 * t708;
t699 = t704 ^ 2;
t749 = t699 * t712;
t746 = t704 * t705;
t743 = t709 * t680;
t742 = t699 + t700;
t736 = qJDD(1) * t705;
t735 = qJDD(1) * t710;
t733 = t703 * t548;
t732 = t708 * t548;
t731 = t703 * t597;
t730 = t708 * t597;
t729 = t705 * t623;
t728 = t710 * t623;
t727 = -pkin(2) * t708 - pkin(1);
t351 = t394 * t701 + t706 * t395;
t542 = t586 * t703 + t708 * t587;
t614 = t654 * t704 + t709 * t655;
t638 = -t710 * t718 - t752;
t721 = t705 * t686;
t720 = t710 * t686;
t675 = -t705 * t712 + t735;
t719 = -pkin(4) * t675 - g(3) * t705;
t413 = -t466 * t707 + t467 * t702;
t414 = t466 * t702 + t467 * t707;
t613 = t654 * t709 - t655 * t704;
t683 = t696 - t711;
t682 = -t711 - t749;
t681 = t711 - t749;
t677 = t696 - t749;
t676 = t696 + t749;
t674 = t710 * t712 + t736;
t673 = t742 * qJDD(1);
t672 = t694 - 0.2e1 * t726;
t669 = 0.2e1 * t725 + t737;
t665 = t709 * t678;
t664 = t742 * t738;
t657 = -pkin(4) * t674 + g(3) * t710;
t647 = -t659 + t774;
t646 = t658 - t774;
t645 = t670 * t709 - t699 * t738;
t644 = -t671 * t704 - t700 * t738;
t643 = -t659 - t774;
t642 = -t682 * t704 - t753;
t641 = -t681 * t704 + t665;
t640 = t684 * t709 - t755;
t639 = t683 * t709 - t754;
t630 = t673 * t710 - t676 * t705;
t629 = t673 * t705 + t676 * t710;
t624 = -t669 * t704 + t672 * t709;
t620 = -t659 + t658;
t615 = -t774 - t658;
t612 = t642 * t710 + t669 * t705;
t611 = t640 * t710 - t672 * t705;
t610 = t642 * t705 - t669 * t710;
t609 = t640 * t705 + t672 * t710;
t607 = -t632 + t653;
t606 = t631 - t653;
t605 = (-t660 * t708 + t662 * t703) * t698;
t604 = (-t660 * t703 - t662 * t708) * t698;
t603 = -t658 - t659;
t596 = -t632 + t631;
t595 = t614 * t710 - t752;
t594 = t614 * t705 + t667;
t588 = -t632 - t653;
t585 = t646 * t708 - t762;
t584 = -t647 * t703 + t783;
t583 = t646 * t703 + t761;
t582 = t647 * t708 + t786;
t580 = -t643 * t703 - t761;
t579 = t643 * t708 - t762;
t573 = (qJD(3) + t698) * t662 + t722;
t571 = -t662 * t751 - t708 * t715;
t570 = t662 * t750 - t703 * t715;
t569 = -t601 * t703 + t660 * t750;
t568 = t601 * t708 + t660 * t751;
t565 = t615 * t708 - t786;
t564 = t615 * t703 + t783;
t563 = -t590 + t651;
t562 = t589 - t651;
t561 = t631 + t632;
t557 = (t633 * t702 + t635 * t707) * t656;
t556 = (-t633 * t707 + t635 * t702) * t656;
t555 = -t604 * t704 + t605 * t709;
t554 = -t590 - t651;
t553 = -pkin(1) * t573 + t626 * t708;
t552 = pkin(1) * t781 - t626 * t703;
t547 = -t590 + t589;
t543 = -pkin(1) * t579 + t587;
t538 = -t608 - t560;
t535 = (-qJD(4) - t656) * t635 - t723;
t533 = -t583 * t704 + t585 * t709;
t532 = -t582 * t704 + t584 * t709;
t531 = t560 * t707 - t635 * t757;
t530 = -t633 * t757 + t707 * t716;
t529 = -t560 * t702 - t635 * t756;
t528 = t633 * t756 + t702 * t716;
t527 = -t651 - t589;
t526 = -t579 * t704 + t580 * t709;
t525 = -t552 * t704 - t626 * t744;
t524 = -t553 * t704 - t626 * t747;
t523 = -pkin(1) * t564 + t586;
t522 = -t574 * t708 - t578 * t703;
t521 = -t573 * t708 + t703 * t781;
t519 = -t573 * t703 - t708 * t781;
t518 = t556 * t708 + t600 * t703;
t517 = t556 * t703 - t600 * t708;
t516 = -t607 * t707 - t787;
t515 = t606 * t707 - t764;
t514 = -t606 * t702 - t763;
t513 = -t607 * t702 + t784;
t512 = -t570 * t704 + t571 * t709;
t511 = -t568 * t704 + t569 * t709;
t510 = (-t591 * t706 + t593 * t701) * t652;
t509 = (-t591 * t701 - t593 * t706) * t652;
t508 = -t564 * t704 + t565 * t709;
t503 = -t588 * t702 - t763;
t502 = t588 * t707 - t764;
t499 = -pkin(1) * t603 + t542;
t498 = -t589 - t590;
t497 = t572 * t707 - t787;
t496 = t572 * t702 + t784;
t495 = t531 * t708 + t731;
t494 = t528 * t708 - t731;
t493 = t531 * t703 - t730;
t492 = t528 * t703 + t730;
t491 = t526 * t710 - t705 * t781;
t490 = t526 * t705 + t710 * t781;
t489 = t508 * t710 + t573 * t705;
t488 = t508 * t705 - t573 * t710;
t486 = -qJD(5) * t593 - t724;
t484 = t562 * t706 - t768;
t483 = -t563 * t701 + t785;
t482 = t562 * t701 + t767;
t481 = t563 * t706 + t788;
t480 = t542 * t709 + t790;
t479 = -t535 * t702 - t537 * t707;
t478 = -t534 * t707 - t538 * t702;
t477 = t535 * t707 - t537 * t702;
t476 = -t534 * t702 + t538 * t707;
t475 = -t554 * t701 - t767;
t474 = t554 * t706 - t768;
t473 = -t520 * t704 + t522 * t709;
t472 = -t519 * t704 + t521 * t709;
t471 = t515 * t708 - t534 * t703;
t470 = t513 * t708 - t538 * t703;
t469 = t515 * t703 + t534 * t708;
t468 = t513 * t703 + t538 * t708;
t465 = -pkin(5) * t502 + t765;
t464 = t480 * t710 - t626 * t705;
t463 = t480 * t705 + t760;
t462 = -t517 * t704 + t518 * t709;
t461 = -pkin(5) * t496 + t766;
t460 = t503 * t708 + t537 * t703;
t459 = t503 * t703 - t537 * t708;
t458 = t527 * t706 - t788;
t457 = t527 * t701 + t785;
t456 = -t499 * t704 + t789;
t455 = t497 * t708 - t535 * t703;
t454 = t497 * t703 + t535 * t708;
t453 = -t566 - t487;
t448 = (qJD(5) + t652) * t593 + t724;
t447 = t487 * t706 - t593 * t759;
t446 = t487 * t701 + t593 * t758;
t445 = -t486 * t701 + t591 * t758;
t444 = t486 * t706 + t591 * t759;
t443 = t477 * t708 - t596 * t703;
t442 = t477 * t703 + t596 * t708;
t441 = -t509 * t702 + t510 * t707;
t440 = -t509 * t707 - t510 * t702;
t438 = t473 * t710 + t603 * t705;
t437 = t473 * t705 - t603 * t710;
t435 = t478 * t708 - t561 * t703;
t434 = t478 * t703 + t561 * t708;
t433 = t441 * t708 + t703 * t714;
t432 = t441 * t703 - t708 * t714;
t431 = -t493 * t704 + t495 * t709;
t430 = -t492 * t704 + t494 * t709;
t426 = -pkin(2) * t502 + t467;
t425 = -pkin(2) * t496 + t466;
t424 = -t482 * t702 + t484 * t707;
t423 = -t481 * t702 + t483 * t707;
t422 = -t482 * t707 - t484 * t702;
t421 = -t481 * t707 - t483 * t702;
t420 = -t474 * t702 + t475 * t707;
t419 = t474 * t707 + t475 * t702;
t418 = -pkin(3) * t448 - t770;
t417 = -pkin(3) * t779 + t485 * t701;
t416 = -t469 * t704 + t471 * t709;
t415 = -t468 * t704 + t470 * t709;
t412 = -t459 * t704 + t460 * t709;
t411 = -t457 * t702 + t458 * t707;
t410 = t457 * t707 + t458 * t702;
t409 = -t454 * t704 + t455 * t709;
t408 = -t449 * t706 - t453 * t701;
t407 = -t448 * t706 - t701 * t779;
t406 = -t449 * t701 + t453 * t706;
t405 = -t448 * t701 + t706 * t779;
t404 = -t446 * t702 + t447 * t707;
t403 = -t446 * t707 - t447 * t702;
t402 = -t444 * t702 + t445 * t707;
t401 = -t444 * t707 - t445 * t702;
t400 = -t442 * t704 + t443 * t709;
t399 = -t434 * t704 + t435 * t709;
t398 = t414 * t708 + t545 * t703;
t397 = t414 * t703 - t545 * t708;
t396 = -pkin(1) * t459 + pkin(2) * t537 - pkin(5) * t503 - t766;
t392 = -pkin(1) * t454 - pkin(2) * t535 - pkin(5) * t497 + t765;
t391 = -t426 * t703 + t465 * t708;
t390 = -t432 * t704 + t433 * t709;
t389 = t404 * t708 + t733;
t388 = t402 * t708 - t733;
t387 = t404 * t703 - t732;
t386 = t402 * t703 + t732;
t385 = -t425 * t703 + t461 * t708;
t384 = t412 * t710 + t502 * t705;
t383 = t412 * t705 - t502 * t710;
t382 = t409 * t710 + t496 * t705;
t381 = t409 * t705 - t496 * t710;
t380 = t424 * t708 - t449 * t703;
t379 = t423 * t708 - t453 * t703;
t378 = t424 * t703 + t449 * t708;
t377 = t423 * t703 + t453 * t708;
t376 = -pkin(5) * t476 - t413;
t375 = t420 * t708 + t703 * t779;
t374 = t420 * t703 - t708 * t779;
t373 = -pkin(1) * t502 + t426 * t708 + t465 * t703;
t372 = t411 * t708 + t448 * t703;
t371 = t411 * t703 - t448 * t708;
t370 = -pkin(1) * t496 + t425 * t708 + t461 * t703;
t369 = t399 * t710 + t476 * t705;
t368 = t399 * t705 - t476 * t710;
t367 = t376 * t708 + t476 * t772;
t366 = (-pkin(5) * t708 + t772) * t413;
t365 = -t406 * t702 + t408 * t707;
t364 = -t405 * t702 + t407 * t707;
t363 = -t405 * t707 - t407 * t702;
t362 = t406 * t707 + t408 * t702;
t361 = -pkin(1) * t434 - pkin(2) * t561 - pkin(5) * t478 - t414;
t360 = -pkin(5) * t419 - t417 * t702 + t706 * t769;
t359 = t703 * t376 + t476 * t727;
t358 = t364 * t708 - t547 * t703;
t357 = t364 * t703 + t547 * t708;
t356 = -pkin(1) * t397 + pkin(2) * t545 - pkin(5) * t414;
t355 = -t397 * t704 + t398 * t709;
t354 = -pkin(5) * t410 - t418 * t702 + t701 * t769;
t353 = t365 * t708 + t498 * t703;
t352 = t365 * t703 - t498 * t708;
t348 = -t387 * t704 + t389 * t709;
t347 = -t386 * t704 + t388 * t709;
t346 = -pkin(2) * t419 - pkin(3) * t474 + t395;
t345 = -pkin(3) * t498 + t351;
t344 = -t378 * t704 + t380 * t709;
t343 = -t377 * t704 + t379 * t709;
t342 = -pkin(2) * t410 - pkin(3) * t457 + t394;
t341 = -t373 * t704 + t391 * t709;
t340 = -t374 * t704 + t375 * t709;
t339 = -t370 * t704 + t385 * t709;
t338 = (-pkin(5) * t703 + t727) * t413;
t337 = -t371 * t704 + t372 * t709;
t336 = -pkin(2) * t362 - pkin(3) * t406;
t335 = t355 * t710 + t413 * t705;
t334 = t355 * t705 - t413 * t710;
t333 = t340 * t710 + t419 * t705;
t332 = t340 * t705 - t419 * t710;
t331 = -t359 * t704 + t367 * t709;
t330 = t337 * t710 + t410 * t705;
t329 = t337 * t705 - t410 * t710;
t328 = -pkin(1) * t374 + pkin(2) * t779 - pkin(5) * t420 - t417 * t707 - t702 * t770;
t327 = -pkin(1) * t371 + pkin(2) * t448 - pkin(5) * t411 - t418 * t707 - t701 * t771;
t326 = -t357 * t704 + t358 * t709;
t325 = -t352 * t704 + t353 * t709;
t324 = -t346 * t703 + t360 * t708;
t323 = t351 * t707 + t792;
t322 = t351 * t702 - t791;
t321 = -t338 * t704 + t366 * t709;
t320 = -t342 * t703 + t354 * t708;
t319 = pkin(3) * t771 - pkin(5) * t322;
t318 = t323 * t708 + t485 * t703;
t317 = t323 * t703 - t485 * t708;
t316 = -pkin(1) * t419 + t346 * t708 + t360 * t703;
t315 = -pkin(1) * t410 + t342 * t708 + t354 * t703;
t314 = t325 * t710 + t362 * t705;
t313 = t325 * t705 - t362 * t710;
t312 = -pkin(5) * t362 - t345 * t702 + t791;
t311 = -pkin(2) * t322 + pkin(3) * t350;
t310 = -pkin(1) * t352 + pkin(2) * t498 - pkin(5) * t365 - t345 * t707 - t792;
t309 = t312 * t708 - t336 * t703;
t308 = -t316 * t704 + t324 * t709;
t307 = -t317 * t704 + t318 * t709;
t306 = -pkin(1) * t317 - pkin(5) * t323 + (pkin(3) * t707 + pkin(2)) * t485;
t305 = -t315 * t704 + t320 * t709;
t304 = -pkin(1) * t362 + t312 * t703 + t336 * t708;
t303 = -t311 * t703 + t319 * t708;
t302 = t307 * t710 + t322 * t705;
t301 = t307 * t705 - t322 * t710;
t300 = -pkin(1) * t322 + t311 * t708 + t319 * t703;
t299 = -t304 * t704 + t309 * t709;
t298 = -t300 * t704 + t303 * t709;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t674, -t675, 0, t638, 0, 0, 0, 0, 0, 0, t611, t612, t630, t595, 0, 0, 0, 0, 0, 0, t489, t491, t438, t464, 0, 0, 0, 0, 0, 0, t382, t384, t369, t335, 0, 0, 0, 0, 0, 0, t330, t333, t314, t302; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t675, -t674, 0, -t775, 0, 0, 0, 0, 0, 0, t609, t610, t629, t594, 0, 0, 0, 0, 0, 0, t488, t490, t437, t463, 0, 0, 0, 0, 0, 0, t381, t383, t368, t334, 0, 0, 0, 0, 0, 0, t329, t332, t313, t301; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t684 * t704 + t665, t682 * t709 - t754, 0, -t613, 0, 0, 0, 0, 0, 0, t564 * t709 + t565 * t704, t579 * t709 + t580 * t704, t520 * t709 + t522 * t704, t542 * t704 - t789, 0, 0, 0, 0, 0, 0, t454 * t709 + t455 * t704, t459 * t709 + t460 * t704, t434 * t709 + t435 * t704, t397 * t709 + t398 * t704, 0, 0, 0, 0, 0, 0, t371 * t709 + t372 * t704, t374 * t709 + t375 * t704, t352 * t709 + t353 * t704, t317 * t709 + t318 * t704; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t675, 0, -t674, 0, t719, -t657, t775, pkin(4) * t775, t645 * t710 - t721, t624 * t710 - t677 * t705, t641 * t710 + t704 * t736, t644 * t710 + t721, t639 * t710 + t694 * t705, qJDD(2) * t705 + t664 * t710, -pkin(4) * t609 - t654 * t705 - t667 * t704, -pkin(4) * t610 - t655 * t705 - t667 * t709, -pkin(4) * t629 + t613 * t710, -pkin(4) * t594, t512 * t710 + t729, t472 * t710 - t620 * t705, t532 * t710 - t578 * t705, t511 * t710 - t729, t533 * t710 - t574 * t705, t710 * t555 + t705 * t734, -pkin(4) * t488 - t523 * t705 + t524 * t710, -pkin(4) * t490 + t525 * t710 - t543 * t705, -pkin(4) * t437 + t456 * t710 + t705 * t773, -pkin(4) * t463 + (-t541 * t705 - t704 * t760) * pkin(1), t431 * t710 - t529 * t705, t400 * t710 - t479 * t705, t415 * t710 - t516 * t705, t430 * t710 - t530 * t705, t416 * t710 - t514 * t705, t462 * t710 - t557 * t705, -pkin(4) * t381 + t339 * t710 - t392 * t705, -pkin(4) * t383 + t341 * t710 - t396 * t705, -pkin(4) * t368 + t331 * t710 - t361 * t705, -pkin(4) * t334 + t321 * t710 - t356 * t705, t348 * t710 - t403 * t705, t326 * t710 - t363 * t705, t343 * t710 - t421 * t705, t347 * t710 - t401 * t705, t344 * t710 - t422 * t705, t390 * t710 - t440 * t705, -pkin(4) * t329 + t305 * t710 - t327 * t705, -pkin(4) * t332 + t308 * t710 - t328 * t705, -pkin(4) * t313 + t299 * t710 - t310 * t705, -pkin(4) * t301 + t298 * t710 - t306 * t705; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t674, 0, t675, 0, t657, t719, t638, pkin(4) * t638, t645 * t705 + t720, t624 * t705 + t677 * t710, t641 * t705 - t704 * t735, t644 * t705 - t720, t639 * t705 - t694 * t710, -qJDD(2) * t710 + t664 * t705, pkin(4) * t611 + t654 * t710 - t680 * t746, pkin(4) * t612 + t655 * t710 - t705 * t743, pkin(4) * t630 + t613 * t705, pkin(4) * t595, t512 * t705 - t728, t472 * t705 + t620 * t710, t532 * t705 + t578 * t710, t511 * t705 + t728, t533 * t705 + t574 * t710, t705 * t555 - t710 * t734, pkin(4) * t489 + t523 * t710 + t524 * t705, pkin(4) * t491 + t525 * t705 + t543 * t710, pkin(4) * t438 + t456 * t705 - t710 * t773, pkin(4) * t464 + (t541 * t710 - t626 * t746) * pkin(1), t431 * t705 + t529 * t710, t400 * t705 + t479 * t710, t415 * t705 + t516 * t710, t430 * t705 + t530 * t710, t416 * t705 + t514 * t710, t462 * t705 + t557 * t710, pkin(4) * t382 + t339 * t705 + t392 * t710, pkin(4) * t384 + t341 * t705 + t396 * t710, pkin(4) * t369 + t331 * t705 + t361 * t710, pkin(4) * t335 + t321 * t705 + t356 * t710, t348 * t705 + t403 * t710, t326 * t705 + t363 * t710, t343 * t705 + t421 * t710, t347 * t705 + t401 * t710, t344 * t705 + t422 * t710, t390 * t705 + t440 * t710, pkin(4) * t330 + t305 * t705 + t327 * t710, pkin(4) * t333 + t308 * t705 + t328 * t710, pkin(4) * t314 + t299 * t705 + t310 * t710, pkin(4) * t302 + t298 * t705 + t306 * t710; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t680, t718, 0, 0, (t670 + t725) * t704, t669 * t709 + t672 * t704, t681 * t709 + t755, t782 * t709, t683 * t704 + t753, 0, t743, -t704 * t680, t614, 0, t570 * t709 + t571 * t704, t519 * t709 + t521 * t704, t582 * t709 + t584 * t704, t568 * t709 + t569 * t704, t583 * t709 + t585 * t704, t604 * t709 + t605 * t704, t553 * t709 - t626 * t748, t552 * t709 - t626 * t745, t499 * t709 + t790, t709 * pkin(1) * t626, t493 * t709 + t495 * t704, t442 * t709 + t443 * t704, t468 * t709 + t470 * t704, t492 * t709 + t494 * t704, t469 * t709 + t471 * t704, t517 * t709 + t518 * t704, t370 * t709 + t385 * t704, t373 * t709 + t391 * t704, t359 * t709 + t367 * t704, t338 * t709 + t366 * t704, t387 * t709 + t389 * t704, t357 * t709 + t358 * t704, t377 * t709 + t379 * t704, t386 * t709 + t388 * t704, t378 * t709 + t380 * t704, t432 * t709 + t433 * t704, t315 * t709 + t320 * t704, t316 * t709 + t324 * t704, t304 * t709 + t309 * t704, t300 * t709 + t303 * t704;];
tauB_reg  = t1;
