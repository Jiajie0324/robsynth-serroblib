% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PPRRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d4,d5,theta1,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:13
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PPRRR1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRRR1_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRRR1_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRRR1_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRRR1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PPRRR1_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:13:01
% EndTime: 2019-12-05 15:13:09
% DurationCPUTime: 8.19s
% Computational Cost: add. (29102->399), mult. (42037->550), div. (0->0), fcn. (32578->10), ass. (0->262)
t694 = qJD(3) + qJD(4);
t692 = t694 ^ 2;
t706 = cos(qJ(4));
t693 = qJDD(3) + qJDD(4);
t703 = sin(qJ(4));
t756 = t703 * t693;
t660 = t692 * t706 + t756;
t751 = t706 * t693;
t663 = t692 * t703 - t751;
t704 = sin(qJ(3));
t707 = cos(qJ(3));
t602 = t660 * t707 - t663 * t704;
t699 = sin(pkin(8));
t701 = cos(pkin(8));
t676 = g(1) * t699 - g(2) * t701;
t673 = -qJDD(2) + t676;
t612 = pkin(6) * t660 - t673 * t706;
t781 = pkin(6) * t663 - t673 * t703;
t541 = pkin(5) * t602 + t612 * t707 - t704 * t781;
t607 = t660 * t704 + t663 * t707;
t698 = sin(pkin(9));
t700 = cos(pkin(9));
t560 = t602 * t700 - t607 * t698;
t787 = pkin(5) * t607 + t612 * t704 + t707 * t781;
t480 = qJ(2) * t560 + t541 * t700 - t698 * t787;
t564 = t602 * t698 + t607 * t700;
t793 = qJ(2) * t564 + t541 * t698 + t700 * t787;
t677 = g(1) * t701 + g(2) * t699;
t697 = g(3) - qJDD(1);
t642 = -t677 * t698 + t697 * t700;
t643 = -t677 * t700 - t697 * t698;
t589 = -t642 * t704 + t643 * t707;
t709 = qJD(3) ^ 2;
t579 = -pkin(3) * t709 + t589;
t588 = t642 * t707 + t643 * t704;
t710 = qJDD(3) * pkin(3) - t588;
t532 = t579 * t703 - t706 * t710;
t533 = t579 * t706 + t703 * t710;
t735 = t532 * t703 + t533 * t706;
t493 = t532 * t706 - t533 * t703;
t750 = t707 * t493;
t464 = -t704 * t735 + t750;
t755 = t704 * t493;
t784 = t707 * t735 + t755;
t790 = t464 * t698 + t700 * t784;
t450 = t464 * t700 - t698 * t784;
t734 = t588 * t704 + t589 * t707;
t544 = t588 * t707 - t589 * t704;
t762 = t700 * t544;
t501 = -t698 * t734 + t762;
t767 = t698 * t544;
t783 = t700 * t734 + t767;
t674 = qJDD(3) * t704 + t707 * t709;
t636 = pkin(5) * t674 - t673 * t707;
t675 = qJDD(3) * t707 - t704 * t709;
t720 = -pkin(5) * t675 - t673 * t704;
t731 = -t674 * t698 + t675 * t700;
t782 = -qJ(2) * t731 + t636 * t698 + t700 * t720;
t617 = t674 * t700 + t675 * t698;
t553 = qJ(2) * t617 + t636 * t700 - t698 * t720;
t529 = -pkin(4) * t692 + pkin(7) * t693 + t533;
t702 = sin(qJ(5));
t705 = cos(qJ(5));
t519 = t529 * t702 + t673 * t705;
t520 = t529 * t705 - t673 * t702;
t484 = t519 * t702 + t520 * t705;
t770 = pkin(2) * t544;
t769 = pkin(2) * t673;
t695 = t702 ^ 2;
t768 = t695 * t692;
t657 = t698 * t673;
t764 = t699 * t673;
t763 = t699 * t697;
t658 = t700 * t673;
t659 = t701 * t673;
t761 = t701 * t697;
t528 = -pkin(4) * t693 - pkin(7) * t692 + t532;
t525 = t702 * t528;
t682 = t702 * t692 * t705;
t671 = qJDD(5) + t682;
t760 = t702 * t671;
t672 = qJDD(5) - t682;
t759 = t702 * t672;
t758 = t702 * t693;
t526 = t705 * t528;
t754 = t705 * t671;
t753 = t705 * t672;
t685 = t705 * t693;
t749 = -pkin(4) * t528 + pkin(7) * t484;
t696 = t705 ^ 2;
t748 = t695 + t696;
t747 = qJD(5) * t694;
t708 = qJD(5) ^ 2;
t679 = -t708 - t768;
t630 = -t679 * t702 - t753;
t684 = t705 * t747;
t652 = 0.2e1 * t684 + t758;
t746 = -pkin(4) * t652 + pkin(7) * t630 + t525;
t687 = t696 * t692;
t681 = -t687 - t708;
t628 = t681 * t705 - t760;
t742 = t702 * t747;
t654 = t685 - 0.2e1 * t742;
t745 = pkin(4) * t654 + pkin(7) * t628 - t526;
t468 = t484 * t703 - t528 * t706;
t744 = pkin(3) * t468 + t749;
t743 = -pkin(3) * t660 - t533;
t490 = pkin(3) * t493;
t741 = -pkin(2) * t464 - t490;
t656 = t748 * t693;
t665 = t687 + t768;
t601 = t656 * t703 + t665 * t706;
t605 = t656 * t706 - t665 * t703;
t566 = t601 * t707 + t605 * t704;
t567 = -t601 * t704 + t605 * t707;
t513 = t566 * t700 + t567 * t698;
t726 = pkin(4) * t665 + pkin(7) * t656 + t484;
t719 = pkin(3) * t601 + t726;
t712 = pkin(2) * t566 + t719;
t458 = -pkin(1) * t513 - t712;
t514 = -t566 * t698 + t567 * t700;
t740 = qJ(1) * t514 + t458;
t716 = -pkin(2) * t602 + t743;
t487 = pkin(1) * t560 - t716;
t739 = qJ(1) * t564 + t487;
t722 = -pkin(3) * t663 - t532;
t713 = -pkin(2) * t607 + t722;
t488 = pkin(1) * t564 - t713;
t738 = -qJ(1) * t560 + t488;
t723 = -pkin(2) * t674 - t589;
t558 = pkin(1) * t617 - t723;
t737 = -qJ(1) * t731 + t558;
t711 = pkin(2) * t675 - t588;
t559 = -pkin(1) * t731 - t711;
t736 = -qJ(1) * t617 + t559;
t733 = t642 * t698 + t643 * t700;
t729 = -t676 * t699 - t677 * t701;
t728 = t703 * t682;
t727 = t706 * t682;
t581 = t630 * t703 - t652 * t706;
t725 = pkin(3) * t581 + t746;
t580 = t628 * t703 + t654 * t706;
t724 = pkin(3) * t580 + t745;
t721 = -t685 + t742;
t483 = t519 * t705 - t520 * t702;
t586 = t642 * t700 - t643 * t698;
t718 = t676 * t701 - t677 * t699;
t469 = t484 * t706 + t528 * t703;
t454 = t468 * t707 + t469 * t704;
t717 = pkin(2) * t454 + t744;
t583 = t630 * t706 + t652 * t703;
t535 = t581 * t707 + t583 * t704;
t715 = pkin(2) * t535 + t725;
t582 = t628 * t706 - t654 * t703;
t534 = t580 * t707 + t582 * t704;
t714 = pkin(2) * t534 + t724;
t680 = t687 - t708;
t678 = t708 - t768;
t670 = pkin(1) * t673;
t666 = -t687 + t768;
t653 = t684 + t758;
t648 = t748 * t747;
t638 = qJDD(5) * t703 + t648 * t706;
t637 = -qJDD(5) * t706 + t648 * t703;
t632 = t653 * t705 - t695 * t747;
t631 = -t696 * t747 + t702 * t721;
t629 = -t678 * t702 + t754;
t627 = t680 * t705 - t759;
t623 = t679 * t705 - t759;
t622 = t678 * t705 + t760;
t621 = t681 * t702 + t754;
t620 = t680 * t702 + t753;
t614 = (t653 + t684) * t702;
t613 = t684 * t702 + t705 * t721;
t599 = -t652 * t702 + t654 * t705;
t598 = t652 * t705 + t654 * t702;
t597 = t629 * t706 + t702 * t756;
t596 = t627 * t706 + t685 * t703;
t595 = t629 * t703 - t702 * t751;
t594 = t627 * t703 - t705 * t751;
t593 = t632 * t706 - t728;
t592 = t631 * t706 + t728;
t591 = t632 * t703 + t727;
t590 = t631 * t703 - t727;
t572 = -t637 * t704 + t638 * t707;
t571 = t637 * t707 + t638 * t704;
t570 = t599 * t706 + t666 * t703;
t569 = t599 * t703 - t666 * t706;
t568 = qJ(2) * t733 + t670;
t557 = -t595 * t704 + t597 * t707;
t556 = -t594 * t704 + t596 * t707;
t555 = t595 * t707 + t597 * t704;
t554 = t594 * t707 + t596 * t704;
t549 = -t591 * t704 + t593 * t707;
t548 = -t590 * t704 + t592 * t707;
t547 = t591 * t707 + t593 * t704;
t546 = t590 * t707 + t592 * t704;
t537 = -t581 * t704 + t583 * t707;
t536 = -t580 * t704 + t582 * t707;
t530 = pkin(5) * t734 + t769;
t524 = -t571 * t698 + t572 * t700;
t523 = t571 * t700 + t572 * t698;
t522 = -t569 * t704 + t570 * t707;
t521 = t569 * t707 + t570 * t704;
t516 = -pkin(7) * t623 + t526;
t515 = -pkin(7) * t621 + t525;
t512 = -pkin(4) * t623 + t520;
t511 = -pkin(4) * t621 + t519;
t510 = -t555 * t698 + t557 * t700;
t509 = -t554 * t698 + t556 * t700;
t508 = t555 * t700 + t557 * t698;
t507 = t554 * t700 + t556 * t698;
t506 = -t547 * t698 + t549 * t700;
t505 = -t546 * t698 + t548 * t700;
t504 = t547 * t700 + t549 * t698;
t503 = t546 * t700 + t548 * t698;
t498 = -t535 * t698 + t537 * t700;
t497 = -t534 * t698 + t536 * t700;
t496 = t535 * t700 + t537 * t698;
t495 = t534 * t700 + t536 * t698;
t489 = pkin(3) * t673 + pkin(6) * t735;
t486 = -t521 * t698 + t522 * t700;
t485 = t521 * t700 + t522 * t698;
t476 = pkin(1) * t501 + t770;
t475 = -pkin(6) * t601 + t483 * t706;
t474 = pkin(6) * t605 + t483 * t703;
t473 = -pkin(6) * t581 - t512 * t703 + t516 * t706;
t472 = -pkin(6) * t580 - t511 * t703 + t515 * t706;
t471 = -pkin(3) * t623 + pkin(6) * t583 + t512 * t706 + t516 * t703;
t470 = -pkin(3) * t621 + pkin(6) * t582 + t511 * t706 + t515 * t703;
t466 = pkin(5) * t762 + qJ(2) * t501 - t530 * t698;
t461 = pkin(5) * t767 + qJ(2) * t783 + t530 * t700 + t670;
t460 = -pkin(1) * t496 - t715;
t459 = -pkin(1) * t495 - t714;
t457 = -pkin(5) * t566 - t474 * t704 + t475 * t707;
t456 = pkin(5) * t567 + t474 * t707 + t475 * t704;
t455 = -t468 * t704 + t469 * t707;
t453 = -pkin(5) * t535 - t471 * t704 + t473 * t707;
t452 = -pkin(5) * t534 - t470 * t704 + t472 * t707;
t447 = pkin(5) * t464 + pkin(6) * t750 - t489 * t704;
t446 = -pkin(2) * t623 + pkin(5) * t537 + t471 * t707 + t473 * t704;
t445 = -pkin(2) * t621 + pkin(5) * t536 + t470 * t707 + t472 * t704;
t444 = pkin(5) * t784 + pkin(6) * t755 + t489 * t707 + t769;
t443 = -pkin(6) * t468 - (pkin(4) * t703 - pkin(7) * t706) * t483;
t442 = pkin(6) * t469 - (-pkin(4) * t706 - pkin(7) * t703 - pkin(3)) * t483;
t441 = pkin(1) * t450 - t741;
t440 = -qJ(2) * t513 - t456 * t698 + t457 * t700;
t439 = qJ(2) * t514 + t456 * t700 + t457 * t698;
t438 = -t454 * t698 + t455 * t700;
t437 = t454 * t700 + t455 * t698;
t436 = -qJ(2) * t496 - t446 * t698 + t453 * t700;
t435 = -qJ(2) * t495 - t445 * t698 + t452 * t700;
t434 = -pkin(1) * t623 + qJ(2) * t498 + t446 * t700 + t453 * t698;
t433 = -pkin(1) * t621 + qJ(2) * t497 + t445 * t700 + t452 * t698;
t432 = qJ(2) * t450 - t444 * t698 + t447 * t700;
t431 = qJ(2) * t790 + t444 * t700 + t447 * t698 + t670;
t430 = -pkin(5) * t454 - t442 * t704 + t443 * t707;
t429 = -pkin(1) * t437 - t717;
t428 = pkin(2) * t483 + pkin(5) * t455 + t442 * t707 + t443 * t704;
t427 = -qJ(2) * t437 - t428 * t698 + t430 * t700;
t426 = pkin(1) * t483 + qJ(2) * t438 + t428 * t700 + t430 * t698;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t763, -t761, -t718, -qJ(1) * t718, 0, 0, 0, 0, 0, 0, -t642 * t699 - t659 * t698, -t643 * t699 - t659 * t700, t701 * t586, -qJ(1) * (t699 * t733 + t659) - (pkin(1) * t699 - qJ(2) * t701) * t586, 0, 0, t701 * t731, 0, -t701 * t617, t699 * qJDD(3), -t699 * t736 + t701 * t782, t701 * t553 - t699 * t737, t701 * t501, t701 * t466 - t699 * t476 - qJ(1) * (t699 * t783 + t659), 0, 0, -t701 * t564, 0, -t701 * t560, t699 * t693, -t699 * t738 + t701 * t793, t701 * t480 - t699 * t739, t701 * t450, t701 * t432 - t699 * t441 - qJ(1) * (t699 * t790 + t659), t506 * t701 + t614 * t699, t486 * t701 + t598 * t699, t510 * t701 + t622 * t699, t505 * t701 - t613 * t699, t509 * t701 + t620 * t699, t701 * t524, t701 * t435 - t699 * t459 - qJ(1) * (t497 * t699 - t621 * t701), t701 * t436 - t699 * t460 - qJ(1) * (t498 * t699 - t623 * t701), t701 * t440 - t699 * t740, t701 * t427 - t699 * t429 - qJ(1) * (t438 * t699 + t483 * t701); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t761, -t763, t729, qJ(1) * t729, 0, 0, 0, 0, 0, 0, t642 * t701 - t698 * t764, t643 * t701 - t658 * t699, t699 * t586, qJ(1) * (t701 * t733 - t764) - (-pkin(1) * t701 - qJ(2) * t699) * t586, 0, 0, t699 * t731, 0, -t699 * t617, -t701 * qJDD(3), t699 * t782 + t701 * t736, t699 * t553 + t701 * t737, t699 * t501, t699 * t466 + t701 * t476 + qJ(1) * (t701 * t783 - t764), 0, 0, -t699 * t564, 0, -t699 * t560, -t701 * t693, t699 * t793 + t701 * t738, t699 * t480 + t701 * t739, t699 * t450, t699 * t432 + t701 * t441 + qJ(1) * (t701 * t790 - t764), t506 * t699 - t614 * t701, t486 * t699 - t598 * t701, t510 * t699 - t622 * t701, t505 * t699 + t613 * t701, t509 * t699 - t620 * t701, t699 * t524, t699 * t435 + t701 * t459 + qJ(1) * (t497 * t701 + t621 * t699), t699 * t436 + t701 * t460 + qJ(1) * (t498 * t701 + t623 * t699), t699 * t440 + t701 * t740, t699 * t427 + t701 * t429 + qJ(1) * (t438 * t701 - t483 * t699); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t676, t677, 0, 0, 0, 0, 0, 0, 0, 0, t658, -t657, t733, t568, 0, 0, t617, 0, t731, 0, -t553, t782, t783, t461, 0, 0, t560, 0, -t564, 0, -t480, t793, t790, t431, t504, t485, t508, t503, t507, t523, t433, t434, t439, t426; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t697, -t676, 0, 0, 0, 0, 0, 0, 0, -t657, -t658, t586, qJ(2) * t586, 0, 0, t731, 0, -t617, 0, t782, t553, t501, t466, 0, 0, -t564, 0, -t560, 0, t793, t480, t450, t432, t506, t486, t510, t505, t509, t524, t435, t436, t440, t427; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t697, 0, -t677, 0, 0, 0, 0, 0, 0, 0, t642, t643, 0, pkin(1) * t586, 0, 0, 0, 0, 0, -qJDD(3), t559, t558, 0, t476, 0, 0, 0, 0, 0, -t693, t488, t487, 0, t441, -t614, -t598, -t622, t613, -t620, 0, t459, t460, t458, t429; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t676, t677, 0, 0, 0, 0, 0, 0, 0, 0, t658, -t657, t733, t568, 0, 0, t617, 0, t731, 0, -t553, t782, t783, t461, 0, 0, t560, 0, -t564, 0, -t480, t793, t790, t431, t504, t485, t508, t503, t507, t523, t433, t434, t439, t426; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t673, t642, 0, 0, 0, t675, 0, -t674, 0, t720, t636, t544, pkin(5) * t544, 0, 0, -t607, 0, -t602, 0, t787, t541, t464, t447, t549, t522, t557, t548, t556, t572, t452, t453, t457, t430; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t673, 0, t643, 0, 0, 0, t674, 0, t675, 0, -t636, t720, t734, t530, 0, 0, t602, 0, -t607, 0, -t541, t787, t784, t444, t547, t521, t555, t546, t554, t571, t445, t446, t456, t428; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t642, -t643, 0, 0, 0, 0, 0, 0, 0, qJDD(3), t711, t723, 0, -t770, 0, 0, 0, 0, 0, t693, t713, t716, 0, t741, t614, t598, t622, -t613, t620, 0, t714, t715, t712, t717; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), 0, -t709, 0, 0, -t673, t588, 0, 0, 0, -t663, 0, -t660, 0, t781, t612, t493, pkin(6) * t493, t593, t570, t597, t592, t596, t638, t472, t473, t475, t443; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t709, 0, qJDD(3), 0, t673, 0, t589, 0, 0, 0, t660, 0, -t663, 0, -t612, t781, t735, t489, t591, t569, t595, t590, t594, t637, t470, t471, t474, t442; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t588, -t589, 0, 0, 0, 0, 0, 0, 0, t693, t722, t743, 0, -t490, t614, t598, t622, -t613, t620, 0, t724, t725, t719, t744; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t693, 0, -t692, 0, 0, -t673, t532, 0, t632, t599, t629, t631, t627, t648, t515, t516, t483, pkin(7) * t483; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t692, 0, t693, 0, t673, 0, t533, 0, t682, -t666, -t758, -t682, -t685, -qJDD(5), t511, t512, 0, pkin(4) * t483; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t693, -t532, -t533, 0, 0, t614, t598, t622, -t613, t620, 0, t745, t746, t726, t749; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t653, t654, t671, -t684, t680, t684, 0, t528, t519, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t742, t652, t678, -t721, t672, -t742, -t528, 0, t520, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t682, t666, t758, t682, t685, qJDD(5), -t519, -t520, 0, 0;];
m_new_reg = t1;
