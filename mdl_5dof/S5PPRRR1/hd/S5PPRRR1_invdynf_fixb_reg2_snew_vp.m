% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PPRRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d4,d5,theta1,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:13
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PPRRR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRRR1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRRR1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRRR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRRR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PPRRR1_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:13:09
% EndTime: 2019-12-05 15:13:10
% DurationCPUTime: 1.66s
% Computational Cost: add. (4588->124), mult. (6668->181), div. (0->0), fcn. (5300->10), ass. (0->101)
t891 = qJD(3) + qJD(4);
t889 = t891 ^ 2;
t890 = qJDD(3) + qJDD(4);
t900 = sin(qJ(4));
t903 = cos(qJ(4));
t870 = t900 * t889 - t903 * t890;
t901 = sin(qJ(3));
t904 = cos(qJ(3));
t908 = -t903 * t889 - t900 * t890;
t850 = t904 * t870 - t901 * t908;
t895 = sin(pkin(9));
t897 = cos(pkin(9));
t917 = t901 * t870 + t904 * t908;
t920 = t895 * t850 + t897 * t917;
t830 = t897 * t850 - t895 * t917;
t896 = sin(pkin(8));
t898 = cos(pkin(8));
t879 = t896 * g(1) - t898 * g(2);
t876 = -qJDD(2) + t879;
t914 = t896 * t876;
t899 = sin(qJ(5));
t913 = t899 * t890;
t902 = cos(qJ(5));
t912 = t902 * t890;
t880 = -t898 * g(1) - t896 * g(2);
t894 = -g(3) + qJDD(1);
t862 = -t895 * t880 + t897 * t894;
t863 = t897 * t880 + t895 * t894;
t845 = t901 * t862 + t904 * t863;
t906 = qJD(3) ^ 2;
t837 = -t906 * pkin(3) + t845;
t844 = t904 * t862 - t901 * t863;
t907 = qJDD(3) * pkin(3) + t844;
t821 = t903 * t837 + t900 * t907;
t892 = t899 ^ 2;
t893 = t902 ^ 2;
t911 = t892 + t893;
t910 = qJD(5) * t891;
t820 = -t900 * t837 + t903 * t907;
t877 = t904 * qJDD(3) - t901 * t906;
t878 = -t901 * qJDD(3) - t904 * t906;
t909 = -t895 * t877 + t897 * t878;
t853 = t897 * t877 + t895 * t878;
t905 = qJD(5) ^ 2;
t883 = t899 * t889 * t902;
t882 = -t893 * t889 - t905;
t881 = -t892 * t889 - t905;
t875 = -qJDD(5) + t883;
t874 = qJDD(5) + t883;
t872 = t911 * t889;
t867 = t898 * t876;
t866 = t911 * t890;
t865 = -0.2e1 * t899 * t910 + t912;
t864 = 0.2e1 * t902 * t910 + t913;
t859 = t902 * t875 - t899 * t881;
t858 = -t899 * t874 + t902 * t882;
t855 = t899 * t875 + t902 * t881;
t854 = t902 * t874 + t899 * t882;
t849 = t903 * t866 - t900 * t872;
t846 = t900 * t866 + t903 * t872;
t843 = -t895 * t862 + t897 * t863;
t842 = t897 * t862 + t895 * t863;
t841 = t903 * t859 + t900 * t864;
t840 = t903 * t858 - t900 * t865;
t839 = t900 * t859 - t903 * t864;
t838 = t900 * t858 + t903 * t865;
t833 = -t901 * t846 + t904 * t849;
t832 = t904 * t846 + t901 * t849;
t827 = -t901 * t844 + t904 * t845;
t826 = t904 * t844 + t901 * t845;
t825 = -t901 * t839 + t904 * t841;
t824 = -t901 * t838 + t904 * t840;
t823 = t904 * t839 + t901 * t841;
t822 = t904 * t838 + t901 * t840;
t819 = -t889 * pkin(4) + t890 * pkin(7) + t821;
t818 = -t890 * pkin(4) - t889 * pkin(7) - t820;
t817 = t902 * t819 - t899 * t876;
t816 = -t899 * t819 - t902 * t876;
t815 = -t895 * t832 + t897 * t833;
t814 = t897 * t832 + t895 * t833;
t813 = -t895 * t826 + t897 * t827;
t812 = t897 * t826 + t895 * t827;
t811 = -t895 * t823 + t897 * t825;
t810 = -t895 * t822 + t897 * t824;
t809 = t897 * t823 + t895 * t825;
t808 = t897 * t822 + t895 * t824;
t807 = -t900 * t820 + t903 * t821;
t806 = t903 * t820 + t900 * t821;
t805 = -t899 * t816 + t902 * t817;
t804 = t902 * t816 + t899 * t817;
t803 = t903 * t805 + t900 * t818;
t802 = t900 * t805 - t903 * t818;
t801 = -t901 * t806 + t904 * t807;
t800 = t904 * t806 + t901 * t807;
t799 = -t901 * t802 + t904 * t803;
t798 = t904 * t802 + t901 * t803;
t797 = -t895 * t800 + t897 * t801;
t796 = t897 * t800 + t895 * t801;
t795 = -t895 * t798 + t897 * t799;
t794 = t897 * t798 + t895 * t799;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t896 * t879 + t898 * t880, 0, 0, 0, 0, 0, 0, 0, 0, 0, t898 * t843 - t914, 0, 0, 0, 0, 0, 0, t898 * t909, -t898 * t853, 0, t898 * t813 - t914, 0, 0, 0, 0, 0, 0, t898 * t920, t898 * t830, 0, t898 * t797 - t914, 0, 0, 0, 0, 0, 0, t898 * t810 + t896 * t854, t898 * t811 + t896 * t855, t898 * t815, t898 * t795 + t896 * t804; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t898 * t879 + t896 * t880, 0, 0, 0, 0, 0, 0, 0, 0, 0, t896 * t843 + t867, 0, 0, 0, 0, 0, 0, t896 * t909, -t896 * t853, 0, t896 * t813 + t867, 0, 0, 0, 0, 0, 0, t896 * t920, t896 * t830, 0, t896 * t797 + t867, 0, 0, 0, 0, 0, 0, t896 * t810 - t898 * t854, t896 * t811 - t898 * t855, t896 * t815, t896 * t795 - t898 * t804; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t894, 0, 0, 0, 0, 0, 0, 0, 0, 0, t842, 0, 0, 0, 0, 0, 0, t853, t909, 0, t812, 0, 0, 0, 0, 0, 0, -t830, t920, 0, t796, 0, 0, 0, 0, 0, 0, t808, t809, t814, t794; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t880, 0, 0, 0, 0, 0, 0, 0, 0, 0, t843, 0, 0, 0, 0, 0, 0, t909, -t853, 0, t813, 0, 0, 0, 0, 0, 0, t920, t830, 0, t797, 0, 0, 0, 0, 0, 0, t810, t811, t815, t795; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t879, 0, 0, 0, 0, 0, 0, 0, 0, 0, t876, 0, 0, 0, 0, 0, 0, 0, 0, 0, t876, 0, 0, 0, 0, 0, 0, 0, 0, 0, t876, 0, 0, 0, 0, 0, 0, -t854, -t855, 0, -t804; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t894, 0, 0, 0, 0, 0, 0, 0, 0, 0, t842, 0, 0, 0, 0, 0, 0, t853, t909, 0, t812, 0, 0, 0, 0, 0, 0, -t830, t920, 0, t796, 0, 0, 0, 0, 0, 0, t808, t809, t814, t794; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t863, 0, 0, 0, 0, 0, 0, t878, -t877, 0, t827, 0, 0, 0, 0, 0, 0, t917, t850, 0, t801, 0, 0, 0, 0, 0, 0, t824, t825, t833, t799; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t862, 0, 0, 0, 0, 0, 0, t877, t878, 0, t826, 0, 0, 0, 0, 0, 0, -t850, t917, 0, t800, 0, 0, 0, 0, 0, 0, t822, t823, t832, t798; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t876, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t876, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t876, 0, 0, 0, 0, 0, 0, t854, t855, 0, t804; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t906, -qJDD(3), 0, t845, 0, 0, 0, 0, 0, 0, t908, t870, 0, t807, 0, 0, 0, 0, 0, 0, t840, t841, t849, t803; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t906, 0, t844, 0, 0, 0, 0, 0, 0, -t870, t908, 0, t806, 0, 0, 0, 0, 0, 0, t838, t839, t846, t802; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t876, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t876, 0, 0, 0, 0, 0, 0, t854, t855, 0, t804; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t889, -t890, 0, t821, 0, 0, 0, 0, 0, 0, t858, t859, t866, t805; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t890, -t889, 0, t820, 0, 0, 0, 0, 0, 0, t865, -t864, t872, -t818; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t876, 0, 0, 0, 0, 0, 0, t854, t855, 0, t804; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t882, t875, t912, t817; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t874, t881, -t913, t816; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t865, t864, -t872, t818;];
f_new_reg = t1;
