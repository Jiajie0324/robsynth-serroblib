% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRRRP7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d3,d4,theta1]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:57
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRRRP7_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRP7_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRP7_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRP7_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRP7_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRRRP7_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:57:03
% EndTime: 2019-12-05 16:57:06
% DurationCPUTime: 2.33s
% Computational Cost: add. (8412->187), mult. (16612->275), div. (0->0), fcn. (11945->10), ass. (0->157)
t1377 = sin(pkin(9));
t1379 = cos(pkin(9));
t1356 = g(1) * t1377 - g(2) * t1379;
t1380 = cos(pkin(5));
t1412 = t1380 * t1356;
t1374 = -g(3) + qJDD(1);
t1378 = sin(pkin(5));
t1413 = t1378 * t1374;
t1422 = t1412 + t1413;
t1387 = cos(qJ(3));
t1411 = t1387 * qJD(2);
t1365 = -qJD(4) + t1411;
t1421 = qJD(4) - t1365;
t1420 = qJD(3) ^ 2;
t1383 = sin(qJ(4));
t1386 = cos(qJ(4));
t1384 = sin(qJ(3));
t1415 = qJD(2) * t1384;
t1345 = -qJD(3) * t1386 + t1383 * t1415;
t1419 = t1345 ^ 2;
t1347 = qJD(3) * t1383 + t1386 * t1415;
t1418 = t1347 ^ 2;
t1417 = t1365 ^ 2;
t1416 = -2 * qJD(5);
t1414 = t1347 * t1345;
t1410 = qJD(4) + t1365;
t1357 = -g(1) * t1379 - g(2) * t1377;
t1385 = sin(qJ(2));
t1388 = cos(qJ(2));
t1322 = t1388 * t1357 + t1385 * t1422;
t1389 = qJD(2) ^ 2;
t1315 = -pkin(2) * t1389 + qJDD(2) * pkin(7) + t1322;
t1393 = -t1356 * t1378 + t1374 * t1380;
t1308 = t1387 * t1315 + t1384 * t1393;
t1348 = (-pkin(3) * t1387 - pkin(8) * t1384) * qJD(2);
t1294 = -pkin(3) * t1420 + qJDD(3) * pkin(8) + t1348 * t1411 + t1308;
t1404 = t1385 * t1357 - t1388 * t1422;
t1314 = -qJDD(2) * pkin(2) - t1389 * pkin(7) + t1404;
t1407 = qJD(3) * t1411;
t1408 = t1384 * qJDD(2);
t1350 = t1407 + t1408;
t1368 = qJD(3) * t1415;
t1370 = t1387 * qJDD(2);
t1351 = t1370 - 0.2e1 * t1368;
t1297 = (-t1350 - t1407) * pkin(8) - t1351 * pkin(3) + t1314;
t1278 = t1294 * t1386 + t1383 * t1297;
t1372 = t1384 ^ 2;
t1373 = t1387 ^ 2;
t1409 = t1372 + t1373;
t1406 = t1370 - qJDD(4) - t1368;
t1277 = -t1383 * t1294 + t1386 * t1297;
t1405 = -t1386 * qJDD(3) + t1383 * t1350;
t1391 = -t1383 * qJDD(3) - t1386 * t1350;
t1312 = t1345 * t1410 + t1391;
t1320 = -t1406 - t1414;
t1271 = pkin(4) * t1320 + qJ(5) * t1312 + t1347 * t1416 + t1277;
t1335 = -pkin(4) * t1365 - qJ(5) * t1347;
t1390 = -qJD(4) * t1347 - t1405;
t1273 = t1365 * t1335 + t1390 * qJ(5) + (-pkin(4) * t1345 + t1416) * t1345 + t1278;
t1256 = -t1271 * t1383 + t1273 * t1386;
t1334 = t1387 * t1393;
t1293 = -t1334 - qJDD(3) * pkin(3) - t1420 * pkin(8) + (qJD(2) * t1348 + t1315) * t1384;
t1279 = -pkin(4) * t1390 - qJ(5) * t1419 + t1347 * t1335 + qJDD(5) + t1293;
t1250 = t1256 * t1387 + t1279 * t1384;
t1255 = t1271 * t1386 + t1273 * t1383;
t1403 = t1250 * t1385 - t1255 * t1388;
t1266 = -t1277 * t1383 + t1278 * t1386;
t1260 = t1266 * t1387 + t1293 * t1384;
t1265 = t1277 * t1386 + t1278 * t1383;
t1402 = t1260 * t1385 - t1265 * t1388;
t1310 = -t1347 * t1410 - t1405;
t1289 = t1310 * t1386 - t1312 * t1383;
t1318 = -t1418 - t1419;
t1281 = t1289 * t1387 + t1318 * t1384;
t1288 = t1310 * t1383 + t1312 * t1386;
t1401 = t1281 * t1385 - t1288 * t1388;
t1307 = -t1315 * t1384 + t1334;
t1283 = -t1307 * t1384 + t1308 * t1387;
t1400 = t1283 * t1385 - t1314 * t1388;
t1324 = -t1417 - t1419;
t1300 = -t1320 * t1383 + t1324 * t1386;
t1309 = t1347 * t1421 + t1405;
t1285 = t1300 * t1387 + t1309 * t1384;
t1299 = t1320 * t1386 + t1324 * t1383;
t1399 = t1285 * t1385 - t1299 * t1388;
t1319 = t1406 - t1414;
t1327 = -t1417 - t1418;
t1306 = t1319 * t1386 - t1327 * t1383;
t1311 = -t1345 * t1421 - t1391;
t1287 = t1306 * t1387 + t1311 * t1384;
t1305 = t1319 * t1383 + t1327 * t1386;
t1398 = t1287 * t1385 - t1305 * t1388;
t1397 = t1322 * t1385 - t1388 * t1404;
t1364 = t1384 * t1389 * t1387;
t1358 = qJDD(3) + t1364;
t1363 = -t1373 * t1389 - t1420;
t1331 = -t1358 * t1384 + t1363 * t1387;
t1396 = t1331 * t1385 + t1351 * t1388;
t1359 = -qJDD(3) + t1364;
t1362 = -t1372 * t1389 - t1420;
t1332 = t1359 * t1387 - t1362 * t1384;
t1349 = 0.2e1 * t1407 + t1408;
t1395 = t1332 * t1385 - t1349 * t1388;
t1352 = t1409 * qJDD(2);
t1355 = t1409 * t1389;
t1394 = t1352 * t1385 + t1355 * t1388;
t1392 = qJDD(2) * t1388 - t1385 * t1389;
t1354 = -qJDD(2) * t1385 - t1388 * t1389;
t1340 = t1392 * t1380;
t1339 = t1354 * t1380;
t1338 = t1392 * t1378;
t1337 = t1354 * t1378;
t1330 = t1359 * t1384 + t1362 * t1387;
t1329 = t1358 * t1387 + t1363 * t1384;
t1328 = t1352 * t1388 - t1355 * t1385;
t1326 = t1394 * t1380;
t1325 = t1394 * t1378;
t1317 = t1332 * t1388 + t1349 * t1385;
t1316 = t1331 * t1388 - t1351 * t1385;
t1304 = -t1378 * t1330 + t1380 * t1395;
t1303 = -t1378 * t1329 + t1380 * t1396;
t1302 = t1380 * t1330 + t1378 * t1395;
t1301 = t1380 * t1329 + t1378 * t1396;
t1298 = t1322 * t1388 + t1385 * t1404;
t1291 = t1378 ^ 2 * t1356 + (t1397 - t1413) * t1380;
t1290 = t1380 ^ 2 * t1374 + (t1397 - t1412) * t1378;
t1286 = t1306 * t1384 - t1311 * t1387;
t1284 = t1300 * t1384 - t1309 * t1387;
t1282 = t1307 * t1387 + t1308 * t1384;
t1280 = t1289 * t1384 - t1318 * t1387;
t1276 = t1283 * t1388 + t1314 * t1385;
t1275 = t1287 * t1388 + t1305 * t1385;
t1274 = t1285 * t1388 + t1299 * t1385;
t1272 = t1281 * t1388 + t1288 * t1385;
t1270 = -t1378 * t1286 + t1380 * t1398;
t1269 = t1380 * t1286 + t1378 * t1398;
t1268 = -t1378 * t1282 + t1380 * t1400;
t1267 = t1380 * t1282 + t1378 * t1400;
t1264 = -t1378 * t1284 + t1380 * t1399;
t1263 = t1380 * t1284 + t1378 * t1399;
t1262 = -t1378 * t1280 + t1380 * t1401;
t1261 = t1380 * t1280 + t1378 * t1401;
t1259 = t1266 * t1384 - t1293 * t1387;
t1258 = -t1270 * t1377 + t1275 * t1379;
t1257 = t1270 * t1379 + t1275 * t1377;
t1254 = -t1264 * t1377 + t1274 * t1379;
t1253 = t1264 * t1379 + t1274 * t1377;
t1252 = -t1262 * t1377 + t1272 * t1379;
t1251 = t1262 * t1379 + t1272 * t1377;
t1249 = t1256 * t1384 - t1279 * t1387;
t1248 = t1260 * t1388 + t1265 * t1385;
t1247 = -t1378 * t1259 + t1380 * t1402;
t1246 = t1380 * t1259 + t1378 * t1402;
t1245 = t1250 * t1388 + t1255 * t1385;
t1244 = -t1378 * t1249 + t1380 * t1403;
t1243 = t1380 * t1249 + t1378 * t1403;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1356 * t1377 + t1357 * t1379, 0, 0, 0, 0, 0, 0, -t1340 * t1377 + t1354 * t1379, -t1339 * t1377 - t1379 * t1392, 0, -t1291 * t1377 + t1298 * t1379, 0, 0, 0, 0, 0, 0, -t1303 * t1377 + t1316 * t1379, -t1304 * t1377 + t1317 * t1379, -t1326 * t1377 + t1328 * t1379, -t1268 * t1377 + t1276 * t1379, 0, 0, 0, 0, 0, 0, t1254, t1258, t1252, -t1247 * t1377 + t1248 * t1379, 0, 0, 0, 0, 0, 0, t1254, t1258, t1252, -t1244 * t1377 + t1245 * t1379; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1356 * t1379 + t1357 * t1377, 0, 0, 0, 0, 0, 0, t1340 * t1379 + t1354 * t1377, t1339 * t1379 - t1377 * t1392, 0, t1291 * t1379 + t1298 * t1377, 0, 0, 0, 0, 0, 0, t1303 * t1379 + t1316 * t1377, t1304 * t1379 + t1317 * t1377, t1326 * t1379 + t1328 * t1377, t1268 * t1379 + t1276 * t1377, 0, 0, 0, 0, 0, 0, t1253, t1257, t1251, t1247 * t1379 + t1248 * t1377, 0, 0, 0, 0, 0, 0, t1253, t1257, t1251, t1244 * t1379 + t1245 * t1377; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1374, 0, 0, 0, 0, 0, 0, t1338, t1337, 0, t1290, 0, 0, 0, 0, 0, 0, t1301, t1302, t1325, t1267, 0, 0, 0, 0, 0, 0, t1263, t1269, t1261, t1246, 0, 0, 0, 0, 0, 0, t1263, t1269, t1261, t1243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1357, 0, 0, 0, 0, 0, 0, t1354, -t1392, 0, t1298, 0, 0, 0, 0, 0, 0, t1316, t1317, t1328, t1276, 0, 0, 0, 0, 0, 0, t1274, t1275, t1272, t1248, 0, 0, 0, 0, 0, 0, t1274, t1275, t1272, t1245; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1356, 0, 0, 0, 0, 0, 0, t1340, t1339, 0, t1291, 0, 0, 0, 0, 0, 0, t1303, t1304, t1326, t1268, 0, 0, 0, 0, 0, 0, t1264, t1270, t1262, t1247, 0, 0, 0, 0, 0, 0, t1264, t1270, t1262, t1244; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1374, 0, 0, 0, 0, 0, 0, t1338, t1337, 0, t1290, 0, 0, 0, 0, 0, 0, t1301, t1302, t1325, t1267, 0, 0, 0, 0, 0, 0, t1263, t1269, t1261, t1246, 0, 0, 0, 0, 0, 0, t1263, t1269, t1261, t1243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1389, -qJDD(2), 0, t1322, 0, 0, 0, 0, 0, 0, t1331, t1332, t1352, t1283, 0, 0, 0, 0, 0, 0, t1285, t1287, t1281, t1260, 0, 0, 0, 0, 0, 0, t1285, t1287, t1281, t1250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1389, 0, -t1404, 0, 0, 0, 0, 0, 0, t1351, -t1349, t1355, -t1314, 0, 0, 0, 0, 0, 0, -t1299, -t1305, -t1288, -t1265, 0, 0, 0, 0, 0, 0, -t1299, -t1305, -t1288, -t1255; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1393, 0, 0, 0, 0, 0, 0, t1329, t1330, 0, t1282, 0, 0, 0, 0, 0, 0, t1284, t1286, t1280, t1259, 0, 0, 0, 0, 0, 0, t1284, t1286, t1280, t1249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1363, t1359, t1370, t1308, 0, 0, 0, 0, 0, 0, t1300, t1306, t1289, t1266, 0, 0, 0, 0, 0, 0, t1300, t1306, t1289, t1256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1358, t1362, -t1408, t1307, 0, 0, 0, 0, 0, 0, -t1309, -t1311, -t1318, -t1293, 0, 0, 0, 0, 0, 0, -t1309, -t1311, -t1318, -t1279; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1351, t1349, -t1355, t1314, 0, 0, 0, 0, 0, 0, t1299, t1305, t1288, t1265, 0, 0, 0, 0, 0, 0, t1299, t1305, t1288, t1255; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1324, t1319, t1310, t1278, 0, 0, 0, 0, 0, 0, t1324, t1319, t1310, t1273; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1320, t1327, t1312, t1277, 0, 0, 0, 0, 0, 0, t1320, t1327, t1312, t1271; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1309, t1311, t1318, t1293, 0, 0, 0, 0, 0, 0, t1309, t1311, t1318, t1279; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1324, t1319, t1310, t1273; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1320, t1327, t1312, t1271; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1309, t1311, t1318, t1279;];
f_new_reg = t1;
