% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRRRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d3,d4,theta1]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:57
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRRRP7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRP7_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRP7_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRP7_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRP7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRRRP7_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:56:34
% EndTime: 2019-12-05 16:56:49
% DurationCPUTime: 10.28s
% Computational Cost: add. (35829->568), mult. (70456->874), div. (0->0), fcn. (50002->10), ass. (0->437)
t570 = sin(pkin(9));
t572 = cos(pkin(9));
t546 = g(1) * t572 + g(2) * t570;
t578 = sin(qJ(2));
t581 = cos(qJ(2));
t571 = sin(pkin(5));
t573 = cos(pkin(5));
t642 = g(1) * t570 - g(2) * t572;
t669 = g(3) - qJDD(1);
t710 = -t571 * t669 + t573 * t642;
t473 = -t581 * t546 + t578 * t710;
t582 = qJD(2) ^ 2;
t465 = -t582 * pkin(2) + qJDD(2) * pkin(7) + t473;
t516 = t571 * t642 + t573 * t669;
t580 = cos(qJ(3));
t509 = t580 * t516;
t577 = sin(qJ(3));
t701 = pkin(3) * t580;
t635 = -pkin(8) * t577 - t701;
t536 = t635 * qJD(2);
t705 = qJD(3) ^ 2;
t406 = (qJD(2) * t536 + t465) * t577 - qJDD(3) * pkin(3) - t705 * pkin(8) + t509;
t656 = qJD(2) * qJD(3);
t560 = t577 * t656;
t652 = t580 * qJDD(2);
t539 = -t560 + t652;
t530 = -qJDD(4) + t539;
t576 = sin(qJ(4));
t579 = cos(qJ(4));
t660 = qJD(2) * t577;
t533 = -qJD(3) * t579 + t576 * t660;
t535 = qJD(3) * t576 + t579 * t660;
t689 = t535 * t533;
t640 = t530 + t689;
t709 = t640 * pkin(4);
t646 = t580 * t656;
t654 = t577 * qJDD(2);
t538 = t646 + t654;
t639 = -qJDD(3) * t579 + t576 * t538;
t481 = -qJD(4) * t535 - t639;
t658 = t580 * qJD(2);
t556 = -qJD(4) + t658;
t510 = -pkin(4) * t556 - qJ(5) * t535;
t528 = t533 ^ 2;
t362 = -pkin(4) * t481 - qJ(5) * t528 + t535 * t510 + qJDD(5) + t406;
t708 = t570 * t669;
t707 = t572 * t669;
t681 = t576 * t640;
t673 = t579 * t640;
t518 = t533 * t556;
t585 = qJD(4) * t533 - qJDD(3) * t576 - t538 * t579;
t706 = t518 - t585;
t496 = -t546 * t572 - t570 * t642;
t455 = (qJD(4) + t556) * t535 + t639;
t495 = -t570 * t546 + t572 * t642;
t529 = t535 ^ 2;
t554 = t556 ^ 2;
t487 = -t554 - t528;
t422 = t487 * t576 - t673;
t704 = pkin(3) * t422;
t492 = -t529 - t554;
t469 = t530 - t689;
t682 = t576 * t469;
t432 = t492 * t579 + t682;
t703 = pkin(3) * t432;
t702 = pkin(3) * t577;
t700 = pkin(6) * t571;
t699 = pkin(6) * t573;
t459 = t518 + t585;
t396 = -t455 * t579 - t459 * t576;
t468 = -t528 - t529;
t368 = t396 * t577 - t468 * t580;
t698 = pkin(7) * t368;
t423 = t487 * t579 + t681;
t454 = (qJD(4) - t556) * t535 + t639;
t378 = t423 * t577 - t454 * t580;
t697 = pkin(7) * t378;
t674 = t579 * t469;
t433 = -t492 * t576 + t674;
t381 = t433 * t577 - t580 * t706;
t696 = pkin(7) * t381;
t394 = -t455 * t576 + t459 * t579;
t695 = pkin(8) * t394;
t694 = pkin(8) * t422;
t693 = pkin(8) * t432;
t369 = t396 * t580 + t468 * t577;
t620 = t369 * t578 - t394 * t581;
t293 = -t571 * t368 + t573 * t620;
t332 = t369 * t581 + t394 * t578;
t262 = t293 * t572 + t332 * t570;
t692 = qJ(1) * t262;
t379 = t423 * t580 + t454 * t577;
t617 = t379 * t578 - t422 * t581;
t310 = -t571 * t378 + t573 * t617;
t346 = t379 * t581 + t422 * t578;
t270 = t310 * t572 + t346 * t570;
t691 = qJ(1) * t270;
t382 = t433 * t580 + t577 * t706;
t616 = t382 * t578 - t432 * t581;
t319 = -t571 * t381 + t573 * t616;
t349 = t382 * t581 + t432 * t578;
t278 = t319 * t572 + t349 * t570;
t690 = qJ(1) * t278;
t688 = t556 * t576;
t687 = t556 * t579;
t566 = t577 ^ 2;
t686 = t566 * t582;
t435 = t465 * t580 - t516 * t577;
t407 = -pkin(3) * t705 + qJDD(3) * pkin(8) + t536 * t658 + t435;
t472 = -t578 * t546 - t581 * t710;
t464 = -qJDD(2) * pkin(2) - pkin(7) * t582 + t472;
t629 = -t539 + t560;
t630 = t538 + t646;
t418 = pkin(3) * t629 - pkin(8) * t630 + t464;
t662 = -t407 * t576 + t418 * t579;
t648 = -qJ(5) * t585 - t662;
t597 = qJ(5) * t518 - t648;
t659 = qJD(5) * t535;
t329 = t597 - 0.2e1 * t659 - t709;
t684 = t576 * t329;
t683 = t576 * t406;
t680 = t577 * t464;
t555 = t577 * t582 * t580;
t547 = qJDD(3) + t555;
t679 = t577 * t547;
t548 = qJDD(3) - t555;
t678 = t577 * t548;
t677 = t578 * t516;
t676 = t579 * t329;
t675 = t579 * t406;
t672 = t580 * t464;
t671 = t580 * t548;
t670 = t581 * t516;
t668 = pkin(1) * t293 + t332 * t700;
t667 = pkin(1) * t310 + t346 * t700;
t666 = pkin(1) * t319 + t349 * t700;
t665 = -pkin(2) * t394 + pkin(7) * t369;
t664 = -pkin(2) * t422 + pkin(7) * t379;
t663 = -pkin(2) * t432 + pkin(7) * t382;
t361 = t407 * t579 + t418 * t576;
t567 = t580 ^ 2;
t661 = t566 + t567;
t655 = qJDD(2) * t571;
t653 = t578 * qJDD(2);
t651 = t581 * qJDD(2);
t650 = t577 * t689;
t649 = t580 * t689;
t292 = t573 * t368 + t571 * t620;
t645 = -pkin(1) * t292 + t332 * t699;
t309 = t573 * t378 + t571 * t617;
t644 = -pkin(1) * t309 + t346 * t699;
t318 = t573 * t381 + t571 * t616;
t643 = -pkin(1) * t318 + t349 * t699;
t434 = t465 * t577 + t509;
t374 = t434 * t577 + t435 * t580;
t637 = t581 * t555;
t636 = t578 * t555;
t373 = t434 * t580 - t435 * t577;
t541 = t661 * qJDD(2);
t564 = t567 * t582;
t544 = t564 + t686;
t493 = t541 * t581 - t544 * t578;
t633 = pkin(6) * t493 + t373 * t578;
t542 = -t578 * t582 + t651;
t632 = -pkin(6) * t542 - t677;
t604 = t581 * t582 + t653;
t631 = -pkin(6) * t604 + t670;
t596 = qJ(5) * t481 - 0.2e1 * qJD(5) * t533 + t556 * t510 + t361;
t308 = -qJ(5) * t455 + (-t468 - t528) * pkin(4) + t596;
t525 = 0.2e1 * t659;
t320 = t525 + (-t459 - t518) * qJ(5) + t709 + t648;
t257 = -t308 * t576 + t320 * t579 - t695;
t365 = -pkin(3) * t394 - pkin(4) * t459;
t245 = t257 * t580 - t365 * t577 - t698;
t595 = -pkin(2) * t368 + pkin(3) * t468 - pkin(8) * t396;
t247 = -t308 * t579 - t320 * t576 + t595;
t628 = t245 * t578 + t247 * t581;
t300 = t525 - t597 - t704 + 0.2e1 * t709;
t334 = -pkin(4) * t454 + qJ(5) * t487 - t362;
t302 = qJ(5) * t673 - t334 * t576 - t694;
t251 = -t300 * t577 + t302 * t580 - t697;
t594 = -pkin(2) * t378 + pkin(3) * t454 - pkin(8) * t423;
t272 = -qJ(5) * t681 - t334 * t579 + t594;
t627 = t251 * t578 + t272 * t581;
t350 = -qJ(5) * t492 + t362;
t405 = -pkin(4) * t706 + qJ(5) * t469;
t305 = t350 * t579 - t405 * t576 - t693;
t306 = -t703 + (-t492 - t528) * pkin(4) + t596;
t253 = t305 * t580 - t306 * t577 - t696;
t593 = -pkin(2) * t381 + pkin(3) * t706 - pkin(8) * t433;
t277 = -t350 * t576 - t405 * t579 + t593;
t626 = t253 * t578 + t277 * t581;
t311 = t361 * t576 + t579 * t662;
t287 = -t311 - t695;
t258 = t287 * t580 + t394 * t702 - t698;
t312 = t361 * t579 - t576 * t662;
t266 = -t312 + t595;
t625 = t258 * t578 + t266 * t581;
t333 = -pkin(4) * t528 + t596;
t275 = t333 * t579 - t684;
t260 = t275 * t580 + t362 * t577;
t274 = t333 * t576 + t676;
t624 = t260 * t578 - t274 * t581;
t336 = -t662 - t704;
t363 = t683 - t694;
t273 = -t336 * t577 + t363 * t580 - t697;
t313 = t594 + t675;
t623 = t273 * t578 + t313 * t581;
t341 = t361 - t703;
t366 = t675 - t693;
t280 = -t341 * t577 + t366 * t580 - t696;
t314 = t593 - t683;
t622 = t280 * t578 + t314 * t581;
t289 = t312 * t580 + t406 * t577;
t621 = t289 * t578 - t311 * t581;
t619 = t374 * t578 - t464 * t581;
t395 = -t454 * t579 - t576 * t706;
t497 = -t529 + t528;
t376 = t395 * t580 - t497 * t577;
t393 = t454 * t576 - t579 * t706;
t618 = t376 * t578 + t393 * t581;
t515 = -t529 + t554;
t444 = -t515 * t576 - t673;
t385 = t444 * t580 - t459 * t577;
t442 = -t515 * t579 + t681;
t615 = t385 * t578 + t442 * t581;
t514 = t528 - t554;
t445 = t514 * t579 + t682;
t386 = t445 * t580 - t455 * t577;
t443 = -t514 * t576 + t674;
t614 = t386 * t578 + t443 * t581;
t451 = -t481 * t576 - t533 * t687;
t410 = t451 * t580 - t650;
t450 = -t481 * t579 + t533 * t688;
t613 = t410 * t578 + t450 * t581;
t453 = t535 * t688 - t579 * t585;
t411 = t453 * t580 + t650;
t452 = t535 * t687 + t576 * t585;
t612 = t411 * t578 + t452 * t581;
t463 = (t533 * t579 - t535 * t576) * t556;
t447 = t463 * t580 - t530 * t577;
t462 = (-t533 * t576 - t535 * t579) * t556;
t611 = t447 * t578 + t462 * t581;
t419 = t472 * t581 - t473 * t578;
t420 = t472 * t578 + t473 * t581;
t537 = 0.2e1 * t646 + t654;
t540 = -0.2e1 * t560 + t652;
t491 = -t537 * t577 + t540 * t580;
t545 = t564 - t686;
t610 = t491 * t578 + t545 * t581;
t553 = -t564 - t705;
t505 = t553 * t580 - t679;
t609 = t505 * t578 + t540 * t581;
t551 = -t686 - t705;
t507 = -t551 * t577 - t671;
t608 = t507 * t578 - t537 * t581;
t521 = t604 * t573;
t607 = t521 * t572 + t542 * t570;
t485 = t521 * t570 - t542 * t572;
t606 = t541 * t578 + t544 * t581;
t531 = t661 * t656;
t603 = -qJDD(3) * t581 + t531 * t578;
t602 = (-t292 * t571 - t293 * t573) * pkin(6);
t601 = (-t309 * t571 - t310 * t573) * pkin(6);
t600 = (-t318 * t571 - t319 * t573) * pkin(6);
t552 = t564 - t705;
t504 = t552 * t580 - t678;
t599 = t504 * t578 - t580 * t651;
t532 = t580 * t547;
t550 = -t686 + t705;
t506 = -t550 * t577 + t532;
t598 = t506 * t578 - t577 * t651;
t511 = -t539 * t577 - t567 * t656;
t592 = t511 * t578 - t637;
t512 = t538 * t580 - t566 * t656;
t591 = t512 * t578 + t637;
t290 = -pkin(4) * t362 + qJ(5) * t333;
t240 = -pkin(8) * t274 - qJ(5) * t676 - t290 * t576;
t255 = -pkin(3) * t274 - pkin(4) * t329;
t259 = t275 * t577 - t362 * t580;
t225 = -pkin(7) * t259 + t240 * t580 - t255 * t577;
t228 = -pkin(2) * t259 + pkin(3) * t362 - pkin(8) * t275 + qJ(5) * t684 - t290 * t579;
t239 = t260 * t581 + t274 * t578;
t590 = pkin(6) * t239 + t225 * t578 + t228 * t581;
t288 = t312 * t577 - t406 * t580;
t244 = -pkin(7) * t288 + (-pkin(8) * t580 + t702) * t311;
t252 = -pkin(2) * t288 + pkin(3) * t406 - pkin(8) * t312;
t256 = t289 * t581 + t311 * t578;
t589 = pkin(6) * t256 + t244 * t578 + t252 * t581;
t501 = t553 * t577 + t532;
t401 = -pkin(2) * t501 + t434;
t430 = -pkin(7) * t501 + t680;
t466 = t505 * t581 - t540 * t578;
t588 = pkin(6) * t466 + t401 * t581 + t430 * t578;
t503 = t551 * t580 - t678;
t402 = -pkin(2) * t503 + t435;
t431 = -pkin(7) * t503 + t672;
t467 = t507 * t581 + t537 * t578;
t587 = pkin(6) * t467 + t402 * t581 + t431 * t578;
t354 = t374 * t581 + t464 * t578;
t583 = pkin(6) * t354 - (-pkin(2) * t581 - pkin(7) * t578) * t373;
t522 = t542 * t573;
t520 = t542 * t571;
t519 = t604 * t571;
t513 = qJDD(3) * t578 + t531 * t581;
t502 = t550 * t580 + t679;
t500 = t552 * t577 + t671;
t499 = t630 * t577;
t498 = t629 * t580;
t494 = t603 * t573;
t490 = t537 * t580 + t540 * t577;
t489 = t606 * t573;
t488 = t606 * t571;
t486 = -t522 * t570 - t572 * t604;
t484 = t522 * t572 - t570 * t604;
t480 = t512 * t581 - t636;
t479 = t511 * t581 + t636;
t478 = t506 * t581 + t577 * t653;
t477 = t504 * t581 + t578 * t652;
t461 = t491 * t581 - t545 * t578;
t449 = -t670 + (t519 * t571 + t521 * t573) * pkin(6);
t448 = -t677 + (-t520 * t571 - t522 * t573) * pkin(6);
t446 = t463 * t577 + t530 * t580;
t441 = -t489 * t570 + t493 * t572;
t440 = t489 * t572 + t493 * t570;
t439 = -t571 * t499 + t573 * t591;
t438 = t571 * t498 + t573 * t592;
t437 = -t571 * t502 + t573 * t598;
t436 = -t571 * t500 + t573 * t599;
t427 = -t571 * t503 + t573 * t608;
t426 = -t571 * t501 + t573 * t609;
t425 = t573 * t503 + t571 * t608;
t424 = t573 * t501 + t571 * t609;
t417 = -t571 * t490 + t573 * t610;
t416 = pkin(2) * t540 + pkin(7) * t505 - t672;
t415 = -pkin(2) * t537 + pkin(7) * t507 + t680;
t412 = t420 * t573;
t409 = t453 * t577 - t649;
t408 = t451 * t577 + t649;
t400 = -pkin(1) * t520 + t571 * t472 + t573 * t631;
t399 = pkin(1) * t519 + t571 * t473 + t573 * t632;
t398 = -t419 * t573 + t571 * t516;
t397 = -t419 * t571 - t573 * t516;
t391 = t447 * t581 - t462 * t578;
t390 = -t427 * t570 + t467 * t572;
t389 = -t426 * t570 + t466 * t572;
t388 = t427 * t572 + t467 * t570;
t387 = t426 * t572 + t466 * t570;
t384 = t445 * t577 + t455 * t580;
t383 = t444 * t577 + t459 * t580;
t375 = t395 * t577 + t497 * t580;
t371 = t411 * t581 - t452 * t578;
t370 = t410 * t581 - t450 * t578;
t364 = pkin(2) * t544 + pkin(7) * t541 + t374;
t359 = -t571 * t446 + t573 * t611;
t358 = t573 * t446 + t571 * t611;
t357 = -pkin(2) * t464 + pkin(7) * t374;
t356 = t386 * t581 - t443 * t578;
t355 = t385 * t581 - t442 * t578;
t353 = -pkin(1) * t397 + t420 * t699;
t352 = -t398 * t570 + t420 * t572;
t351 = t398 * t572 + t420 * t570;
t345 = t581 * t373 + (-t488 * t571 - t489 * t573) * pkin(6);
t342 = (-t397 * t571 - t398 * t573) * pkin(6);
t340 = -t571 * t409 + t573 * t612;
t339 = -t571 * t408 + t573 * t613;
t338 = t573 * t409 + t571 * t612;
t337 = t573 * t408 + t571 * t613;
t335 = t376 * t581 - t393 * t578;
t328 = -t359 * t570 + t391 * t572;
t327 = t359 * t572 + t391 * t570;
t326 = -t578 * t402 + t581 * t431 + (-t425 * t571 - t427 * t573) * pkin(6);
t325 = -t578 * t401 + t581 * t430 + (-t424 * t571 - t426 * t573) * pkin(6);
t324 = -t571 * t384 + t573 * t614;
t323 = -t571 * t383 + t573 * t615;
t322 = t573 * t384 + t571 * t614;
t321 = t573 * t383 + t571 * t615;
t316 = t373 * t571 + t573 * t619;
t315 = -t373 * t573 + t571 * t619;
t304 = -pkin(1) * t425 - t571 * t415 + t573 * t587;
t303 = -pkin(1) * t424 - t571 * t416 + t573 * t588;
t301 = -pkin(1) * t488 - t571 * t364 + t573 * t633;
t299 = -t340 * t570 + t371 * t572;
t298 = -t339 * t570 + t370 * t572;
t297 = t340 * t572 + t371 * t570;
t296 = t339 * t572 + t370 * t570;
t295 = -t571 * t375 + t573 * t618;
t294 = t573 * t375 + t571 * t618;
t286 = -t324 * t570 + t356 * t572;
t285 = -t323 * t570 + t355 * t572;
t284 = t324 * t572 + t356 * t570;
t283 = t323 * t572 + t355 * t570;
t282 = -t316 * t570 + t354 * t572;
t281 = t316 * t572 + t354 * t570;
t279 = -t319 * t570 + t349 * t572;
t276 = qJ(1) * t279;
t271 = -t310 * t570 + t346 * t572;
t269 = qJ(1) * t271;
t268 = t341 * t580 + t366 * t577 + t663;
t267 = t336 * t580 + t363 * t577 + t664;
t265 = -t295 * t570 + t335 * t572;
t264 = t295 * t572 + t335 * t570;
t263 = -t293 * t570 + t332 * t572;
t261 = qJ(1) * t263;
t254 = t287 * t577 - t394 * t701 + t665;
t250 = t305 * t577 + t306 * t580 + t663;
t249 = -(pkin(2) * t578 - pkin(7) * t581) * t373 + (-t315 * t571 - t316 * t573) * pkin(6);
t248 = t300 * t580 + t302 * t577 + t664;
t246 = -pkin(1) * t315 - t571 * t357 + t573 * t583;
t243 = t257 * t577 + t365 * t580 + t665;
t242 = -t571 * t288 + t573 * t621;
t241 = t573 * t288 + t571 * t621;
t238 = pkin(7) * t289 + (-pkin(2) + t635) * t311;
t237 = t581 * t280 - t578 * t314 + t600;
t236 = t581 * t273 - t578 * t313 + t601;
t235 = -t571 * t259 + t573 * t624;
t234 = t573 * t259 + t571 * t624;
t233 = -t571 * t268 + t573 * t622 + t643;
t232 = -t242 * t570 + t256 * t572;
t231 = t242 * t572 + t256 * t570;
t230 = t581 * t253 - t578 * t277 + t600;
t229 = -t571 * t267 + t573 * t623 + t644;
t227 = t581 * t251 - t578 * t272 + t601;
t226 = t581 * t258 - t578 * t266 + t602;
t224 = -t571 * t250 + t573 * t626 + t643;
t223 = -t571 * t254 + t573 * t625 + t645;
t222 = t581 * t245 - t578 * t247 + t602;
t221 = -t571 * t248 + t573 * t627 + t644;
t220 = -t235 * t570 + t239 * t572;
t219 = t235 * t572 + t239 * t570;
t218 = -pkin(2) * t274 + pkin(7) * t260 + t240 * t577 + t255 * t580;
t217 = -t571 * t243 + t573 * t628 + t645;
t216 = t581 * t244 - t578 * t252 + (-t241 * t571 - t242 * t573) * pkin(6);
t215 = -pkin(1) * t241 - t571 * t238 + t573 * t589;
t214 = t581 * t225 - t578 * t228 + (-t234 * t571 - t235 * t573) * pkin(6);
t213 = -pkin(1) * t234 - t571 * t218 + t573 * t590;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t496, 0, 0, 0, 0, 0, 0, t486, t485, 0, t352, 0, 0, 0, 0, 0, 0, t389, t390, t441, t282, 0, 0, 0, 0, 0, 0, t271, t279, t263, t232, 0, 0, 0, 0, 0, 0, t271, t279, t263, t220; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t495, 0, 0, 0, 0, 0, 0, t484, -t607, 0, t351, 0, 0, 0, 0, 0, 0, t387, t388, t440, t281, 0, 0, 0, 0, 0, 0, t270, t278, t262, t231, 0, 0, 0, 0, 0, 0, t270, t278, t262, t219; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t669, 0, 0, 0, 0, 0, 0, t520, -t519, 0, t397, 0, 0, 0, 0, 0, 0, t424, t425, t488, t315, 0, 0, 0, 0, 0, 0, t309, t318, t292, t241, 0, 0, 0, 0, 0, 0, t309, t318, t292, t234; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t708, -t707, -t495, -qJ(1) * t495, 0, 0, -t485, 0, t486, t570 * t655, -qJ(1) * t484 - t400 * t570 + t448 * t572, qJ(1) * t607 - t399 * t570 + t449 * t572, -t412 * t570 + t419 * t572, -qJ(1) * t351 + t342 * t572 - t353 * t570, -t439 * t570 + t480 * t572, -t417 * t570 + t461 * t572, -t437 * t570 + t478 * t572, -t438 * t570 + t479 * t572, -t436 * t570 + t477 * t572, -t494 * t570 + t513 * t572, -qJ(1) * t387 - t303 * t570 + t325 * t572, -qJ(1) * t388 - t304 * t570 + t326 * t572, -qJ(1) * t440 - t301 * t570 + t345 * t572, -qJ(1) * t281 - t246 * t570 + t249 * t572, t299, t265, t285, t298, t286, t328, -t229 * t570 + t236 * t572 - t691, -t233 * t570 + t237 * t572 - t690, -t223 * t570 + t226 * t572 - t692, -qJ(1) * t231 - t215 * t570 + t216 * t572, t299, t265, t285, t298, t286, t328, -t221 * t570 + t227 * t572 - t691, -t224 * t570 + t230 * t572 - t690, -t217 * t570 + t222 * t572 - t692, -qJ(1) * t219 - t213 * t570 + t214 * t572; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t707, -t708, t496, qJ(1) * t496, 0, 0, t607, 0, t484, -t572 * t655, qJ(1) * t486 + t400 * t572 + t448 * t570, qJ(1) * t485 + t399 * t572 + t449 * t570, t412 * t572 + t419 * t570, qJ(1) * t352 + t342 * t570 + t353 * t572, t439 * t572 + t480 * t570, t417 * t572 + t461 * t570, t437 * t572 + t478 * t570, t438 * t572 + t479 * t570, t436 * t572 + t477 * t570, t494 * t572 + t513 * t570, qJ(1) * t389 + t303 * t572 + t325 * t570, qJ(1) * t390 + t304 * t572 + t326 * t570, qJ(1) * t441 + t301 * t572 + t345 * t570, qJ(1) * t282 + t246 * t572 + t249 * t570, t297, t264, t283, t296, t284, t327, t229 * t572 + t236 * t570 + t269, t233 * t572 + t237 * t570 + t276, t223 * t572 + t226 * t570 + t261, qJ(1) * t232 + t215 * t572 + t216 * t570, t297, t264, t283, t296, t284, t327, t221 * t572 + t227 * t570 + t269, t224 * t572 + t230 * t570 + t276, t217 * t572 + t222 * t570 + t261, qJ(1) * t220 + t213 * t572 + t214 * t570; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t642, t546, 0, 0, 0, 0, t519, 0, t520, t573 * qJDD(2), pkin(1) * t522 - t573 * t472 + t571 * t631, -pkin(1) * t521 - t573 * t473 + t571 * t632, t420 * t571, pkin(1) * t398 + t420 * t700, t573 * t499 + t571 * t591, t573 * t490 + t571 * t610, t573 * t502 + t571 * t598, -t573 * t498 + t571 * t592, t573 * t500 + t571 * t599, t603 * t571, pkin(1) * t426 + t573 * t416 + t571 * t588, pkin(1) * t427 + t573 * t415 + t571 * t587, pkin(1) * t489 + t573 * t364 + t571 * t633, pkin(1) * t316 + t573 * t357 + t571 * t583, t338, t294, t321, t337, t322, t358, t573 * t267 + t571 * t623 + t667, t573 * t268 + t571 * t622 + t666, t573 * t254 + t571 * t625 + t668, pkin(1) * t242 + t573 * t238 + t571 * t589, t338, t294, t321, t337, t322, t358, t573 * t248 + t571 * t627 + t667, t573 * t250 + t571 * t626 + t666, t573 * t243 + t571 * t628 + t668, pkin(1) * t235 + t573 * t218 + t571 * t590;];
tauB_reg = t1;
