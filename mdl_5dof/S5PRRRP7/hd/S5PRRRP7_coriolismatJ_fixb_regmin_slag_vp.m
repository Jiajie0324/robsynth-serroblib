% Calculate minimal parameter regressor of coriolis matrix for
% S5PRRRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d3,d4,theta1]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x20]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:57
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PRRRP7_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRP7_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRP7_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRRRP7_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:56:29
% EndTime: 2019-12-05 16:56:38
% DurationCPUTime: 2.53s
% Computational Cost: add. (2177->268), mult. (5502->451), div. (0->0), fcn. (5411->8), ass. (0->225)
t192 = cos(qJ(3));
t189 = sin(qJ(3));
t228 = -pkin(3) * t192 - pkin(8) * t189;
t159 = -pkin(2) + t228;
t191 = cos(qJ(4));
t141 = t191 * t159;
t292 = t189 * t191;
t227 = -qJ(5) * t292 + t141;
t188 = sin(qJ(4));
t316 = pkin(7) * t188;
t88 = (-pkin(4) - t316) * t192 + t227;
t293 = t188 * t192;
t268 = pkin(7) * t293;
t98 = t227 - t268;
t329 = -t88 + t98;
t183 = t188 ^ 2;
t185 = t191 ^ 2;
t171 = t185 - t183;
t273 = t189 * qJD(2);
t252 = t191 * t273;
t328 = qJD(3) * t171 - 0.2e1 * t188 * t252;
t327 = -t88 / 0.2e1;
t311 = t192 * pkin(8);
t314 = t189 * pkin(3);
t162 = -t311 + t314;
t151 = t191 * t162;
t294 = t188 * t189;
t177 = pkin(7) * t294;
t288 = t191 * t192;
t91 = pkin(4) * t189 - qJ(5) * t288 + t151 + t177;
t326 = t91 / 0.2e1;
t187 = sin(pkin(5));
t193 = cos(qJ(2));
t295 = t187 * t193;
t257 = t188 * t295;
t304 = cos(pkin(5));
t237 = t304 * t189;
t190 = sin(qJ(2));
t296 = t187 * t190;
t258 = t192 * t296;
t134 = t237 + t258;
t300 = t134 * t191;
t97 = -t257 + t300;
t325 = -t97 / 0.2e1;
t324 = t97 / 0.2e1;
t323 = t98 / 0.2e1;
t287 = t192 * t193;
t290 = t190 * t191;
t118 = (-t188 * t287 + t290) * t187;
t322 = t118 / 0.2e1;
t321 = t134 / 0.2e1;
t310 = -qJ(5) - pkin(8);
t161 = t310 * t191;
t320 = t161 / 0.2e1;
t319 = -t188 / 0.2e1;
t318 = -t189 / 0.2e1;
t317 = t191 / 0.2e1;
t315 = t188 * pkin(4);
t313 = t192 * pkin(4);
t312 = t192 * pkin(7);
t309 = pkin(4) * qJD(4);
t259 = t323 + t327;
t260 = t313 / 0.2e1;
t9 = (t260 + t259) * t191;
t308 = qJD(2) * t9;
t255 = t191 * t295;
t301 = t134 * t188;
t96 = t255 + t301;
t307 = t96 * t188;
t306 = t96 * t192;
t305 = t97 * t191;
t13 = t329 * t294;
t303 = qJD(2) * t13;
t302 = qJD(4) * t97;
t133 = t189 * t296 - t304 * t192;
t52 = t133 * t188;
t15 = (t134 - t305 - t307) * t133;
t299 = t15 * qJD(1);
t253 = pkin(7) + t315;
t152 = t253 * t189;
t298 = t152 * t188;
t291 = t190 * t188;
t119 = (t191 * t287 + t291) * t187;
t256 = t189 * t295;
t16 = -t96 * t118 + t97 * t119 + t133 * t256;
t297 = t16 * qJD(1);
t184 = t189 ^ 2;
t289 = t191 * t184;
t170 = t185 + t183;
t186 = t192 ^ 2;
t172 = t186 - t184;
t148 = t172 * t188;
t286 = qJD(2) * t148;
t149 = t186 * t191 - t289;
t285 = qJD(2) * t149;
t284 = qJD(2) * t187;
t283 = qJD(3) * t188;
t282 = qJD(3) * t191;
t281 = qJD(4) * t188;
t280 = qJD(4) * t191;
t279 = qJD(4) * t192;
t278 = t133 * qJD(3);
t277 = t134 * qJD(3);
t146 = t170 * t184;
t276 = t146 * qJD(2);
t275 = t170 * qJD(3);
t274 = t172 * qJD(2);
t272 = t189 * qJD(3);
t271 = t192 * qJD(2);
t270 = t192 * qJD(3);
t269 = pkin(4) * t292;
t267 = pkin(7) * t288;
t266 = pkin(7) * t292;
t265 = pkin(2) * t273;
t264 = pkin(2) * t271;
t263 = pkin(4) * t281;
t262 = pkin(4) * t280;
t261 = -t313 / 0.2e1;
t254 = t192 * t325;
t251 = t188 * t282;
t250 = t191 * t272;
t249 = t188 * t279;
t248 = t191 * t279;
t247 = t193 * t284;
t246 = t188 * t280;
t245 = t189 * t270;
t244 = t189 * t271;
t243 = -t295 / 0.2e1;
t242 = t295 / 0.2e1;
t241 = -t294 / 0.2e1;
t240 = -t292 / 0.2e1;
t239 = t292 / 0.2e1;
t238 = -t287 / 0.2e1;
t236 = pkin(4) * t239;
t235 = -qJD(4) + t271;
t234 = t188 * t250;
t232 = t133 * t240;
t231 = t189 * t242;
t230 = t191 * t243;
t229 = -t161 * t318 + t327;
t150 = t188 * t162;
t100 = -qJ(5) * t293 + t150 - t266;
t153 = t253 * t192;
t121 = t159 * t188 + t267;
t99 = -qJ(5) * t294 + t121;
t11 = t100 * t99 + t152 * t153 + t88 * t91;
t194 = (-t99 * t191 / 0.2e1 + t88 * t188 / 0.2e1 + t153 / 0.2e1) * t133 + t152 * t321 - t96 * t91 / 0.2e1 + t100 * t324;
t160 = t310 * t188;
t181 = -pkin(4) * t191 - pkin(3);
t195 = -t118 * t160 / 0.2e1 + t119 * t320 + t189 * t181 * t243;
t2 = t194 + t195;
t226 = t2 * qJD(1) + t11 * qJD(2);
t14 = t152 * t269 + t329 * t99;
t3 = -t259 * t97 + (t322 + t232) * pkin(4);
t225 = -qJD(1) * t3 + qJD(2) * t14;
t48 = t181 * t315;
t5 = t259 * t161 + (t326 + t181 * t240 - t298 / 0.2e1) * pkin(4);
t224 = -qJD(2) * t5 + qJD(3) * t48;
t12 = (t189 * t91 + t192 * t88) * t191 + (t100 * t189 + t192 * t99) * t188;
t18 = (t306 / 0.2e1 - t119 / 0.2e1) * t191 + (t254 + t322) * t188;
t223 = t18 * qJD(1) - t12 * qJD(2);
t22 = (t188 * t242 + t324 - t300 / 0.2e1) * t189;
t46 = t150 * t192 + (-t121 + t267) * t189;
t222 = -t22 * qJD(1) + t46 * qJD(2);
t23 = (t230 + t96 / 0.2e1 - t301 / 0.2e1) * t189;
t120 = -t141 + t268;
t45 = t120 * t189 + (-t177 + t151) * t192;
t221 = -t23 * qJD(1) - t45 * qJD(2);
t213 = t96 * t317 + t97 * t319;
t28 = (t242 - t213) * t189;
t35 = (t99 * t188 + t88 * t191) * t189;
t220 = -qJD(1) * t28 - qJD(2) * t35;
t197 = (t188 * t238 + t290 / 0.2e1) * t187;
t205 = t254 + t232;
t30 = t197 + t205;
t90 = -pkin(7) * t289 - t121 * t192;
t219 = qJD(1) * t30 + qJD(2) * t90;
t196 = (t191 * t238 - t291 / 0.2e1) * t187;
t206 = -t306 / 0.2e1 + t133 * t241;
t31 = t196 - t206;
t89 = -t120 * t192 - t184 * t316;
t218 = qJD(1) * t31 - qJD(2) * t89;
t217 = t160 * t188 + t161 * t191;
t216 = t235 * t189;
t215 = t311 / 0.2e1 - t314 / 0.2e1;
t214 = t307 / 0.2e1 + t305 / 0.2e1;
t203 = t215 * t191;
t95 = -t151 / 0.2e1 + t203;
t212 = pkin(3) * t283 - qJD(2) * t95;
t204 = t215 * t188;
t94 = t150 / 0.2e1 - t204;
t211 = pkin(3) * t282 - qJD(2) * t94;
t210 = (t99 / 0.2e1 + t160 * t318) * t191;
t209 = t191 * t216;
t136 = (t183 / 0.2e1 - t185 / 0.2e1) * t189;
t208 = -qJD(2) * t136 + t251;
t207 = t252 + t283;
t202 = qJD(2) * t188 * t289 + qJD(3) * t136;
t147 = t171 * t184;
t201 = qJD(2) * t147 + 0.2e1 * t234;
t21 = -t312 / 0.2e1 + t210 + (t261 + t229) * t188;
t198 = t237 / 0.2e1 + t258 / 0.2e1;
t26 = t198 - t214;
t199 = -qJD(1) * t26 + qJD(2) * t21 - qJD(3) * t217;
t179 = t272 / 0.2e1;
t140 = (t271 - qJD(4) / 0.2e1) * t189;
t135 = t207 * pkin(4);
t132 = t136 * qJD(4);
t72 = t177 + t151 / 0.2e1 + t203;
t71 = t266 - t150 / 0.2e1 - t204;
t54 = t133 * t191;
t33 = t197 - t205;
t32 = t196 + t206;
t29 = t96 * t239 + t97 * t241 + t231;
t27 = t198 + t214;
t25 = t134 * t239 + t188 * t231 + t97 * t318;
t24 = t189 * t230 + t294 * t321 + t96 * t318;
t20 = t312 / 0.2e1 + t210 + (t260 + t229) * t188;
t17 = t118 * t319 + t119 * t317 + t213 * t192;
t10 = (t259 + t261) * t191;
t8 = pkin(4) * t52;
t6 = -t161 * t323 + t181 * t236 + t88 * t320 + (t298 / 0.2e1 + t326) * pkin(4);
t4 = pkin(4) * t322 + t133 * t236 + t97 * t323 + t88 * t325;
t1 = t194 - t195;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t16 + qJD(3) * t15; 0, 0, -t190 * t284, -t247, 0, 0, 0, 0, 0, (-t190 * t271 - t193 * t272) * t187, (t190 * t273 - t193 * t270) * t187, 0, 0, 0, 0, 0, (-t118 * t192 + t184 * t257) * qJD(2) + t24 * qJD(3) + t33 * qJD(4), (t119 * t192 + t184 * t255) * qJD(2) + t25 * qJD(3) + t32 * qJD(4), t17 * qJD(3) + (-t118 * t191 - t119 * t188) * t273, t297 + (t118 * t88 + t119 * t99 + t152 * t256) * qJD(2) + t1 * qJD(3) + t4 * qJD(4) + t29 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, -t189 * t247 - t277, -t192 * t247 + t278, 0, 0, 0, 0, 0, qJD(2) * t24 + qJD(4) * t52 - t191 * t277, qJD(2) * t25 + qJD(4) * t54 + t188 * t277, t17 * qJD(2) - t170 * t278, t299 + t1 * qJD(2) + (t133 * t217 + t134 * t181) * qJD(3) + t8 * qJD(4) + t27 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t33 + qJD(3) * t52 - t302, qJD(2) * t32 + qJD(3) * t54 + qJD(4) * t96, 0, -pkin(4) * t302 + qJD(2) * t4 + qJD(3) * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t29 + qJD(3) * t27; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3) * t23 - qJD(4) * t30, -qJD(3) * t22 - qJD(4) * t31, qJD(3) * t18, qJD(3) * t2 - qJD(4) * t3 - qJD(5) * t28 - t297; 0, 0, 0, 0, t245, t172 * qJD(3), 0, 0, 0, -pkin(2) * t272, -pkin(2) * t270, -t184 * t246 + t185 * t245, -qJD(4) * t147 - 0.2e1 * t192 * t234, -qJD(3) * t149 + t189 * t249, qJD(3) * t148 + t189 * t248, -t245, -qJD(3) * t45 - qJD(4) * t90, qJD(3) * t46 + qJD(4) * t89, -qJD(3) * t12 - qJD(4) * t13 + qJD(5) * t146, qJD(3) * t11 + qJD(4) * t14 - qJD(5) * t35; 0, 0, 0, 0, t244, t274, t270, -t272, 0, -pkin(7) * t270 - t265, pkin(7) * t272 - t264, -t132 + (t185 * t273 + t251) * t192, -0.2e1 * t189 * t246 + t328 * t192, t188 * t272 - t285, t250 + t286, -t140, (t188 * t228 - t267) * qJD(3) + t72 * qJD(4) + t221, (t191 * t228 + t268) * qJD(3) + t71 * qJD(4) + t222, ((-t160 * t192 + t100) * t191 + (t161 * t192 - t91) * t188) * qJD(3) + t10 * qJD(4) + t223, (-t100 * t161 + t153 * t181 + t160 * t91) * qJD(3) + t6 * qJD(4) + t20 * qJD(5) + t226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t202, -t201, t188 * t216, t209, t179, qJD(3) * t72 - qJD(4) * t121 - t219, qJD(3) * t71 + qJD(4) * t120 - t218, qJD(3) * t10 + t189 * t263 - t303, qJD(3) * t6 - t99 * t309 + t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t276, qJD(3) * t20 + t220; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t23, qJD(2) * t22, -qJD(2) * t18, -qJD(2) * t2 - qJD(5) * t26 - t299; 0, 0, 0, 0, -t244, -t274, 0, 0, 0, t265, t264, -t185 * t244 - t132, 0.2e1 * t188 * t209, -t248 + t285, t249 - t286, t140, qJD(4) * t95 - t221, qJD(4) * t94 - t222, qJD(4) * t9 - t223, -qJD(4) * t5 + qJD(5) * t21 - t226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t246, t171 * qJD(4), 0, 0, 0, -pkin(3) * t281, -pkin(3) * t280, qJD(5) * t170, qJD(4) * t48 - qJD(5) * t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t208, t328, -t235 * t191, t235 * t188, -t273 / 0.2e1, -pkin(8) * t280 - t212, pkin(8) * t281 - t211, -t262 + t308, t161 * t309 + t224; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t275, t199; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t30, qJD(2) * t31, 0, qJD(2) * t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t202, t201, (-t188 * t273 + t282) * t192, -t207 * t192, t179, -qJD(3) * t95 + t219, -qJD(3) * t94 + t218, -qJD(3) * t9 + t303, qJD(3) * t5 - qJD(5) * t269 - t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t208, -t328, t191 * t271, -t188 * t271, t273 / 0.2e1, t212, t211, -t308, -qJD(5) * t315 - t224; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t28 + qJD(3) * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t276, -qJD(3) * t21 + t189 * t262 - t220; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t275, -t199 + t263; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t7;
