% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S5RRRRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4]';
% 
% Output:
% MMD_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:58
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S5RRRRP7_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP7_inertiaDJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP7_inertiaDJ_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRRP7_inertiaDJ_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:57:44
% EndTime: 2019-12-31 21:57:51
% DurationCPUTime: 2.15s
% Computational Cost: add. (2615->211), mult. (6058->364), div. (0->0), fcn. (5292->6), ass. (0->134)
t92 = sin(qJ(4));
t90 = t92 ^ 2;
t95 = cos(qJ(4));
t91 = t95 ^ 2;
t175 = t90 + t91;
t163 = cos(qJ(3));
t117 = t163 * qJD(3);
t115 = pkin(2) * t117;
t174 = t175 * t115;
t172 = (t90 - t91) * qJD(4);
t96 = cos(qJ(2));
t120 = t163 * t96;
t93 = sin(qJ(3));
t94 = sin(qJ(2));
t153 = t93 * t94;
t66 = -t120 + t153;
t152 = t93 * t96;
t67 = t163 * t94 + t152;
t86 = -t96 * pkin(2) - pkin(1);
t35 = t66 * pkin(3) - t67 * pkin(8) + t86;
t167 = -pkin(7) - pkin(6);
t74 = t167 * t94;
t75 = t167 * t96;
t44 = -t163 * t75 + t93 * t74;
t173 = t92 * t35 + t95 * t44;
t171 = qJD(2) + qJD(3);
t119 = qJD(2) * t167;
t141 = qJD(3) * t93;
t69 = t94 * t119;
t25 = -t74 * t117 - t119 * t152 - t75 * t141 - t163 * t69;
t136 = t94 * qJD(2);
t129 = pkin(2) * t136;
t114 = qJD(2) * t120;
t40 = -t96 * t117 + t171 * t153 - t114;
t41 = t171 * t67;
t99 = t41 * pkin(3) + t40 * pkin(8) + t129;
t6 = -qJD(4) * t173 + t92 * t25 + t95 * t99;
t113 = t95 * pkin(4) + t92 * qJ(5);
t170 = t113 * qJD(4) - t95 * qJD(5);
t169 = -0.2e1 * t172;
t168 = 0.2e1 * qJD(5);
t166 = pkin(8) * t41;
t165 = pkin(8) * t66;
t164 = t41 * pkin(4);
t84 = t93 * pkin(2) + pkin(8);
t162 = t41 * t84;
t26 = qJD(3) * t44 - t167 * t114 + t93 * t69;
t43 = -t163 * t74 - t93 * t75;
t161 = t43 * t26;
t160 = t43 * t93;
t159 = t66 * t84;
t158 = t67 * t92;
t157 = t67 * t95;
t156 = t90 * t40;
t155 = t91 * t40;
t154 = t92 * t41;
t151 = t95 * t40;
t150 = t95 * t41;
t89 = qJD(4) * t95;
t149 = t26 * t92 + t43 * t89;
t128 = pkin(2) * t141;
t137 = t92 * qJD(5);
t88 = qJD(4) * t92;
t54 = pkin(4) * t88 - qJ(5) * t89 - t137;
t45 = t54 + t128;
t148 = -t45 - t54;
t147 = t174 * t84;
t146 = t174 * pkin(8);
t125 = t163 * pkin(2);
t85 = -t125 - pkin(3);
t145 = t92 * t128 + t85 * t89;
t143 = pkin(2) * qJD(3);
t142 = t41 * qJ(5);
t112 = pkin(4) * t92 - qJ(5) * t95;
t24 = t112 * t67 + t43;
t140 = qJD(4) * t24;
t138 = t66 * qJD(5);
t134 = t96 * qJD(2);
t31 = 0.2e1 * t66 * t41;
t133 = -0.2e1 * pkin(1) * qJD(2);
t132 = t92 * t151;
t131 = pkin(3) * t88;
t130 = pkin(3) * t89;
t127 = pkin(8) * t88;
t126 = pkin(8) * t89;
t124 = t92 * t89;
t123 = t94 * t134;
t122 = t92 * t163;
t121 = t95 * t163;
t63 = t67 ^ 2;
t116 = t63 * t124;
t12 = t66 * qJ(5) + t173;
t19 = t95 * t35 - t92 * t44;
t13 = -t66 * pkin(4) - t19;
t111 = t12 * t92 - t13 * t95;
t110 = t173 * t92 + t19 * t95;
t108 = -t67 * t85 + t159;
t105 = -t95 * t128 + t85 * t88;
t72 = -pkin(3) - t113;
t30 = -t92 * t40 + t67 * t89;
t104 = t67 * t88 + t151;
t27 = t66 * t88 - t150;
t5 = t95 * t25 - t35 * t89 + t44 * t88 - t92 * t99;
t103 = -t40 * t72 + t54 * t67 - t166;
t7 = -t112 * t40 + t170 * t67 + t26;
t102 = -t7 + (t67 * t72 - t165) * qJD(4);
t101 = (-t163 * t66 + t67 * t93) * qJD(3);
t59 = -t125 + t72;
t100 = -t7 + (t59 * t67 - t159) * qJD(4);
t3 = t138 - t5 + t142;
t4 = -t164 - t6;
t1 = -t111 * qJD(4) + t3 * t95 + t4 * t92;
t2 = -t110 * qJD(4) - t5 * t95 - t6 * t92;
t98 = -t66 * t115 - t40 * t59 + t45 * t67 - t162;
t97 = pkin(2) * t101 - t40 * t85 - t162;
t80 = -0.2e1 * t124;
t79 = 0.2e1 * t124;
t58 = t72 * t88;
t52 = t175 * t163 * t143;
t50 = t59 * t88;
t49 = t92 * t115 + t84 * t89;
t48 = -t95 * t115 + t84 * t88;
t47 = 0.2e1 * t52;
t38 = t43 * t88;
t29 = t66 * t89 + t154;
t21 = t24 * t88;
t18 = -0.2e1 * t67 * t155 - 0.2e1 * t116;
t17 = -0.2e1 * t67 * t156 + 0.2e1 * t116;
t16 = t67 * t172 + t132;
t11 = 0.2e1 * t67 * t132 + t63 * t172;
t10 = 0.4e1 * t67 * t124 + t155 - t156;
t9 = t67 * t154 + t30 * t66;
t8 = -0.2e1 * t104 * t66 + 0.2e1 * t67 * t150;
t14 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t123, 0.2e1 * (-t94 ^ 2 + t96 ^ 2) * qJD(2), 0, -0.2e1 * t123, 0, 0, t94 * t133, t96 * t133, 0, 0, -0.2e1 * t67 * t40, 0.2e1 * t40 * t66 - 0.2e1 * t67 * t41, 0, t31, 0, 0, 0.2e1 * t66 * t129 + 0.2e1 * t86 * t41, 0.2e1 * t67 * t129 - 0.2e1 * t86 * t40, 0.2e1 * t25 * t66 + 0.2e1 * t26 * t67 - 0.2e1 * t43 * t40 - 0.2e1 * t44 * t41, 0.2e1 * t86 * t129 - 0.2e1 * t44 * t25 + 0.2e1 * t161, t18, 0.2e1 * t11, t8, t17, -0.2e1 * t9, t31, 0.2e1 * t26 * t158 + 0.2e1 * t19 * t41 + 0.2e1 * t30 * t43 + 0.2e1 * t6 * t66, -0.2e1 * t104 * t43 + 0.2e1 * t26 * t157 - 0.2e1 * t173 * t41 + 0.2e1 * t5 * t66, 0.2e1 * t110 * t40 + 0.2e1 * (t5 * t92 - t6 * t95 + (-t173 * t95 + t19 * t92) * qJD(4)) * t67, -0.2e1 * t173 * t5 + 0.2e1 * t19 * t6 + 0.2e1 * t161, t18, t8, -0.2e1 * t11, t31, 0.2e1 * t9, t17, -0.2e1 * t13 * t41 + 0.2e1 * t7 * t158 + 0.2e1 * t24 * t30 - 0.2e1 * t4 * t66, 0.2e1 * t111 * t40 + 0.2e1 * (-t3 * t92 + t4 * t95 + (-t12 * t95 - t13 * t92) * qJD(4)) * t67, 0.2e1 * t104 * t24 + 0.2e1 * t12 * t41 - 0.2e1 * t7 * t157 + 0.2e1 * t3 * t66, 0.2e1 * t12 * t3 + 0.2e1 * t13 * t4 + 0.2e1 * t24 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t134, 0, -t136, 0, -pkin(6) * t134, pkin(6) * t136, 0, 0, 0, 0, -t40, 0, -t41, 0, -t26, t25, (t163 * t40 - t41 * t93 + t101) * pkin(2), (-t163 * t26 - t25 * t93 + (t163 * t44 + t160) * qJD(3)) * pkin(2), -t16, -t10, t29, t16, -t27, 0, t38 + (-t108 * qJD(4) - t26) * t95 + t97 * t92, t108 * t88 + t97 * t95 + t149, t2, t26 * t85 + (t121 * t173 - t122 * t19 + t160) * t143 + t2 * t84, -t16, t29, t10, 0, t27, t16, t100 * t95 + t92 * t98 + t21, t1, t100 * t92 + (-t98 - t140) * t95, t24 * t45 + t7 * t59 + (t12 * t121 + t122 * t13) * t143 + t1 * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t128, -0.2e1 * t115, 0, 0, t79, t169, 0, t80, 0, 0, 0.2e1 * t105, 0.2e1 * t145, t47, 0.2e1 * t128 * t85 + 0.2e1 * t147, t79, 0, -t169, 0, 0, t80, -0.2e1 * t45 * t95 + 0.2e1 * t50, t47, -0.2e1 * t45 * t92 - 0.2e1 * t59 * t89, 0.2e1 * t59 * t45 + 0.2e1 * t147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t40, 0, -t41, 0, -t26, t25, 0, 0, -t16, -t10, t29, t16, -t27, 0, t38 + (pkin(3) * t40 - t166) * t92 + (-t26 + (-pkin(3) * t67 - t165) * qJD(4)) * t95, pkin(3) * t104 + pkin(8) * t27 + t149, t2, -t26 * pkin(3) + pkin(8) * t2, -t16, t29, t10, 0, t27, t16, t102 * t95 + t103 * t92 + t21, t1, t102 * t92 + (-t103 - t140) * t95, pkin(8) * t1 + t24 * t54 + t7 * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t128, -t115, 0, 0, t79, t169, 0, t80, 0, 0, t105 - t131, -t130 + t145, t52, -pkin(3) * t128 + t146, t79, 0, -t169, 0, 0, t80, t148 * t95 + t50 + t58, t52, t148 * t92 + (-t59 - t72) * t89, t45 * t72 + t59 * t54 + t146; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, t169, 0, t80, 0, 0, -0.2e1 * t131, -0.2e1 * t130, 0, 0, t79, 0, -t169, 0, 0, t80, -0.2e1 * t54 * t95 + 0.2e1 * t58, 0, -0.2e1 * t54 * t92 - 0.2e1 * t72 * t89, 0.2e1 * t72 * t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t104, 0, -t30, t41, t6, t5, 0, 0, 0, -t104, 0, t41, t30, 0, t6 + 0.2e1 * t164, t113 * t40 + (t112 * qJD(4) - t137) * t67, 0.2e1 * t138 - t5 + 0.2e1 * t142, -pkin(4) * t4 + qJ(5) * t3 + qJD(5) * t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, -t88, 0, -t49, t48, 0, 0, 0, t89, 0, 0, t88, 0, -t49, -t170, -t48, (-pkin(4) * t122 + qJ(5) * t121) * t143 - t170 * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, -t88, 0, -t126, t127, 0, 0, 0, t89, 0, 0, t88, 0, -t126, -t170, -t127, -t170 * pkin(8); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t168, qJ(5) * t168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t41, -t104, 0, t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, 0, t126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t14;
