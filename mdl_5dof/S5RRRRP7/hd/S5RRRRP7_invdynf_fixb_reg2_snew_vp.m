% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRRP7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:58
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRRP7_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP7_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP7_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP7_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP7_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRRP7_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:58:41
% EndTime: 2019-12-31 21:58:45
% DurationCPUTime: 4.08s
% Computational Cost: add. (12466->236), mult. (25606->287), div. (0->0), fcn. (18104->8), ass. (0->166)
t1803 = sin(qJ(3));
t1804 = sin(qJ(2));
t1807 = cos(qJ(3));
t1808 = cos(qJ(2));
t1773 = (t1803 * t1808 + t1804 * t1807) * qJD(1);
t1844 = qJD(1) * t1808;
t1828 = qJD(2) * t1844;
t1832 = t1804 * qJDD(1);
t1778 = t1828 + t1832;
t1797 = t1808 * qJDD(1);
t1845 = qJD(1) * t1804;
t1829 = qJD(2) * t1845;
t1779 = t1797 - t1829;
t1825 = t1803 * t1778 - t1779 * t1807;
t1820 = qJD(3) * t1773 + qJDD(4) + t1825;
t1799 = qJD(2) + qJD(3);
t1802 = sin(qJ(4));
t1806 = cos(qJ(4));
t1756 = t1773 * t1802 - t1799 * t1806;
t1758 = t1773 * t1806 + t1799 * t1802;
t1842 = t1758 * t1756;
t1713 = t1820 + t1842;
t1755 = t1758 ^ 2;
t1771 = t1803 * t1845 - t1807 * t1844;
t1770 = qJD(4) + t1771;
t1849 = t1770 ^ 2;
t1853 = -t1755 - t1849;
t1689 = t1713 * t1806 + t1802 * t1853;
t1824 = -t1807 * t1778 - t1803 * t1779;
t1741 = -qJD(3) * t1771 - t1824;
t1831 = qJDD(2) + qJDD(3);
t1816 = -qJD(4) * t1756 + t1741 * t1806 + t1802 * t1831;
t1843 = t1756 * t1770;
t1814 = t1816 - t1843;
t1669 = t1689 * t1803 + t1807 * t1814;
t1671 = t1689 * t1807 - t1803 * t1814;
t1656 = t1669 * t1804 - t1671 * t1808;
t1687 = t1713 * t1802 - t1806 * t1853;
t1805 = sin(qJ(1));
t1809 = cos(qJ(1));
t1875 = t1656 * t1805 + t1809 * t1687;
t1874 = t1656 * t1809 - t1805 * t1687;
t1650 = t1669 * t1808 + t1671 * t1804;
t1708 = t1816 + t1843;
t1826 = t1802 * t1741 - t1806 * t1831;
t1819 = (-qJD(4) + t1770) * t1758 - t1826;
t1851 = -t1708 * t1806 + t1802 * t1819;
t1739 = t1756 ^ 2;
t1719 = t1755 + t1739;
t1850 = t1708 * t1802 + t1806 * t1819;
t1862 = t1719 * t1807 + t1803 * t1850;
t1863 = -t1719 * t1803 + t1807 * t1850;
t1868 = -t1804 * t1862 + t1808 * t1863;
t1873 = t1805 * t1868 - t1809 * t1851;
t1872 = t1805 * t1851 + t1809 * t1868;
t1869 = t1804 * t1863 + t1808 * t1862;
t1714 = t1820 - t1842;
t1852 = -t1849 - t1739;
t1856 = -t1714 * t1802 + t1806 * t1852;
t1867 = t1803 * t1856;
t1857 = t1714 * t1806 + t1802 * t1852;
t1866 = t1805 * t1857;
t1865 = t1807 * t1856;
t1864 = t1809 * t1857;
t1801 = t1808 ^ 2;
t1811 = qJD(1) ^ 2;
t1787 = t1805 * g(1) - g(2) * t1809;
t1822 = qJDD(1) * pkin(1) + t1787;
t1823 = qJD(2) * pkin(2) - pkin(7) * t1845;
t1743 = t1779 * pkin(2) + (pkin(7) * t1801 + pkin(6)) * t1811 - t1823 * t1845 + t1822;
t1848 = t1771 ^ 2;
t1847 = t1773 ^ 2;
t1846 = t1799 ^ 2;
t1841 = t1773 * t1771;
t1840 = t1801 * t1811;
t1837 = t1804 * t1811;
t1834 = qJD(3) - t1799;
t1788 = -g(1) * t1809 - g(2) * t1805;
t1817 = -pkin(1) * t1811 + qJDD(1) * pkin(6) + t1788;
t1765 = -t1804 * g(3) + t1808 * t1817;
t1738 = -pkin(2) * t1840 + t1779 * pkin(7) - qJD(2) * t1823 + t1765;
t1815 = t1804 * t1817;
t1813 = -t1815 - t1778 * pkin(7) + qJDD(2) * pkin(2) + (pkin(7) * qJD(1) * qJD(2) + pkin(2) * t1837 - g(3)) * t1808;
t1712 = t1738 * t1807 + t1803 * t1813;
t1752 = pkin(3) * t1771 - pkin(8) * t1773;
t1693 = -pkin(3) * t1846 + pkin(8) * t1831 - t1752 * t1771 + t1712;
t1724 = (qJD(3) + t1799) * t1773 + t1825;
t1827 = t1771 * t1799 - t1741;
t1812 = pkin(3) * t1724 + pkin(8) * t1827 - t1743;
t1664 = t1693 * t1806 + t1802 * t1812;
t1800 = t1804 ^ 2;
t1833 = t1800 + t1801;
t1663 = -t1693 * t1802 + t1806 * t1812;
t1711 = -t1803 * t1738 + t1807 * t1813;
t1821 = -qJD(4) * t1758 - t1826;
t1692 = -pkin(3) * t1831 - pkin(8) * t1846 + t1773 * t1752 - t1711;
t1810 = qJD(2) ^ 2;
t1792 = t1808 * t1837;
t1790 = -t1810 - t1840;
t1789 = -t1800 * t1811 - t1810;
t1786 = -qJDD(2) + t1792;
t1785 = qJDD(2) + t1792;
t1784 = t1833 * t1811;
t1783 = -qJDD(1) * t1805 - t1809 * t1811;
t1782 = qJDD(1) * t1809 - t1805 * t1811;
t1781 = t1833 * qJDD(1);
t1780 = t1797 - 0.2e1 * t1829;
t1777 = 0.2e1 * t1828 + t1832;
t1774 = t1811 * pkin(6) + t1822;
t1764 = -t1808 * g(3) - t1815;
t1763 = -t1846 - t1847;
t1762 = t1786 * t1808 - t1789 * t1804;
t1761 = -t1785 * t1804 + t1790 * t1808;
t1760 = t1786 * t1804 + t1789 * t1808;
t1759 = t1785 * t1808 + t1790 * t1804;
t1751 = -t1831 - t1841;
t1750 = t1831 - t1841;
t1749 = -t1846 - t1848;
t1742 = -t1847 - t1848;
t1737 = -t1764 * t1804 + t1765 * t1808;
t1736 = t1764 * t1808 + t1765 * t1804;
t1735 = pkin(4) * t1756 - qJ(5) * t1758;
t1729 = t1751 * t1807 - t1763 * t1803;
t1728 = t1751 * t1803 + t1763 * t1807;
t1727 = t1771 * t1834 + t1824;
t1725 = -t1773 * t1834 - t1825;
t1721 = t1749 * t1807 - t1750 * t1803;
t1720 = t1749 * t1803 + t1750 * t1807;
t1705 = t1758 * t1770 - t1821;
t1704 = (qJD(4) + t1770) * t1758 + t1826;
t1703 = -t1728 * t1804 + t1729 * t1808;
t1702 = t1728 * t1808 + t1729 * t1804;
t1701 = t1725 * t1807 - t1727 * t1803;
t1700 = t1725 * t1803 + t1727 * t1807;
t1699 = -t1720 * t1804 + t1721 * t1808;
t1698 = t1720 * t1808 + t1721 * t1804;
t1684 = -t1711 * t1803 + t1712 * t1807;
t1683 = t1711 * t1807 + t1712 * t1803;
t1678 = -t1700 * t1804 + t1701 * t1808;
t1677 = t1700 * t1808 + t1701 * t1804;
t1676 = t1705 * t1803 + t1865;
t1674 = -t1705 * t1807 + t1867;
t1672 = t1704 * t1803 + t1865;
t1670 = -t1704 * t1807 + t1867;
t1662 = -t1821 * pkin(4) + (pkin(4) * t1770 - (2 * qJD(5))) * t1758 + t1692 - t1814 * qJ(5);
t1661 = -t1683 * t1804 + t1684 * t1808;
t1660 = t1683 * t1808 + t1684 * t1804;
t1659 = -pkin(4) * t1820 - qJ(5) * t1849 + t1735 * t1758 + qJDD(5) - t1663;
t1658 = -pkin(4) * t1849 + qJ(5) * t1820 + 0.2e1 * qJD(5) * t1770 - t1735 * t1756 + t1664;
t1657 = -t1674 * t1804 + t1676 * t1808;
t1655 = t1674 * t1808 + t1676 * t1804;
t1653 = -t1670 * t1804 + t1672 * t1808;
t1651 = t1670 * t1808 + t1672 * t1804;
t1645 = -t1663 * t1802 + t1664 * t1806;
t1644 = t1663 * t1806 + t1664 * t1802;
t1643 = t1645 * t1807 + t1692 * t1803;
t1642 = t1645 * t1803 - t1692 * t1807;
t1641 = t1658 * t1806 + t1659 * t1802;
t1640 = t1658 * t1802 - t1659 * t1806;
t1639 = t1641 * t1807 + t1662 * t1803;
t1638 = t1641 * t1803 - t1662 * t1807;
t1637 = -t1642 * t1804 + t1643 * t1808;
t1636 = t1642 * t1808 + t1643 * t1804;
t1635 = -t1638 * t1804 + t1639 * t1808;
t1634 = t1638 * t1808 + t1639 * t1804;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1783, -t1782, 0, -t1787 * t1805 + t1788 * t1809, 0, 0, 0, 0, 0, 0, t1761 * t1809 - t1780 * t1805, t1762 * t1809 + t1777 * t1805, t1781 * t1809 - t1784 * t1805, t1737 * t1809 - t1774 * t1805, 0, 0, 0, 0, 0, 0, t1699 * t1809 + t1724 * t1805, t1703 * t1809 - t1805 * t1827, t1678 * t1809 + t1742 * t1805, t1661 * t1809 - t1743 * t1805, 0, 0, 0, 0, 0, 0, t1653 * t1809 + t1866, t1874, t1872, t1637 * t1809 + t1644 * t1805, 0, 0, 0, 0, 0, 0, t1657 * t1809 + t1866, t1872, -t1874, t1635 * t1809 + t1640 * t1805; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1782, t1783, 0, t1787 * t1809 + t1788 * t1805, 0, 0, 0, 0, 0, 0, t1761 * t1805 + t1780 * t1809, t1762 * t1805 - t1777 * t1809, t1781 * t1805 + t1784 * t1809, t1737 * t1805 + t1774 * t1809, 0, 0, 0, 0, 0, 0, t1699 * t1805 - t1724 * t1809, t1703 * t1805 + t1809 * t1827, t1678 * t1805 - t1742 * t1809, t1661 * t1805 + t1743 * t1809, 0, 0, 0, 0, 0, 0, t1653 * t1805 - t1864, t1875, t1873, t1637 * t1805 - t1644 * t1809, 0, 0, 0, 0, 0, 0, t1657 * t1805 - t1864, t1873, -t1875, t1635 * t1805 - t1640 * t1809; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1759, t1760, 0, t1736, 0, 0, 0, 0, 0, 0, t1698, t1702, t1677, t1660, 0, 0, 0, 0, 0, 0, t1651, -t1650, t1869, t1636, 0, 0, 0, 0, 0, 0, t1655, t1869, t1650, t1634; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1811, -qJDD(1), 0, t1788, 0, 0, 0, 0, 0, 0, t1761, t1762, t1781, t1737, 0, 0, 0, 0, 0, 0, t1699, t1703, t1678, t1661, 0, 0, 0, 0, 0, 0, t1653, t1656, t1868, t1637, 0, 0, 0, 0, 0, 0, t1657, t1868, -t1656, t1635; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1811, 0, t1787, 0, 0, 0, 0, 0, 0, t1780, -t1777, t1784, t1774, 0, 0, 0, 0, 0, 0, -t1724, t1827, -t1742, t1743, 0, 0, 0, 0, 0, 0, -t1857, t1687, -t1851, -t1644, 0, 0, 0, 0, 0, 0, -t1857, -t1851, -t1687, -t1640; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1759, t1760, 0, t1736, 0, 0, 0, 0, 0, 0, t1698, t1702, t1677, t1660, 0, 0, 0, 0, 0, 0, t1651, -t1650, t1869, t1636, 0, 0, 0, 0, 0, 0, t1655, t1869, t1650, t1634; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1790, t1786, t1797, t1765, 0, 0, 0, 0, 0, 0, t1721, t1729, t1701, t1684, 0, 0, 0, 0, 0, 0, t1672, -t1671, t1863, t1643, 0, 0, 0, 0, 0, 0, t1676, t1863, t1671, t1639; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1785, t1789, -t1832, t1764, 0, 0, 0, 0, 0, 0, t1720, t1728, t1700, t1683, 0, 0, 0, 0, 0, 0, t1670, -t1669, t1862, t1642, 0, 0, 0, 0, 0, 0, t1674, t1862, t1669, t1638; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1780, t1777, -t1784, -t1774, 0, 0, 0, 0, 0, 0, t1724, -t1827, t1742, -t1743, 0, 0, 0, 0, 0, 0, t1857, -t1687, t1851, t1644, 0, 0, 0, 0, 0, 0, t1857, t1851, t1687, t1640; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1749, t1751, t1725, t1712, 0, 0, 0, 0, 0, 0, t1856, -t1689, t1850, t1645, 0, 0, 0, 0, 0, 0, t1856, t1850, t1689, t1641; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1750, t1763, t1727, t1711, 0, 0, 0, 0, 0, 0, -t1704, -t1814, t1719, -t1692, 0, 0, 0, 0, 0, 0, -t1705, t1719, t1814, -t1662; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1724, -t1827, t1742, -t1743, 0, 0, 0, 0, 0, 0, t1857, -t1687, t1851, t1644, 0, 0, 0, 0, 0, 0, t1857, t1851, t1687, t1640; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1852, -t1713, t1819, t1664, 0, 0, 0, 0, 0, 0, t1852, t1819, t1713, t1658; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1714, t1853, -t1708, t1663, 0, 0, 0, 0, 0, 0, t1714, -t1708, -t1853, -t1659; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1704, t1814, -t1719, t1692, 0, 0, 0, 0, 0, 0, t1705, -t1719, -t1814, t1662; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1852, t1819, t1713, t1658; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1705, -t1719, -t1814, t1662; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1714, t1708, t1853, t1659;];
f_new_reg = t1;
