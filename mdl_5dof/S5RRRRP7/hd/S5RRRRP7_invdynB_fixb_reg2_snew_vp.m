% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:58
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRRP7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP7_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP7_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP7_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRRP7_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:57:59
% EndTime: 2019-12-31 21:58:19
% DurationCPUTime: 17.55s
% Computational Cost: add. (42558->581), mult. (87157->813), div. (0->0), fcn. (61246->8), ass. (0->429)
t789 = sin(qJ(3));
t790 = sin(qJ(2));
t793 = cos(qJ(3));
t794 = cos(qJ(2));
t751 = (t789 * t794 + t790 * t793) * qJD(1);
t788 = sin(qJ(4));
t792 = cos(qJ(4));
t841 = qJD(2) + qJD(3);
t724 = t751 * t792 + t788 * t841;
t849 = qJD(1) * t790;
t749 = -qJD(1) * t793 * t794 + t789 * t849;
t845 = qJD(1) * qJD(2);
t829 = t794 * t845;
t844 = t790 * qJDD(1);
t759 = t829 + t844;
t782 = t794 * qJDD(1);
t830 = t790 * t845;
t760 = t782 - t830;
t686 = -qJD(3) * t749 + t759 * t793 + t760 * t789;
t840 = qJDD(2) + qJDD(3);
t827 = t788 * t686 - t792 * t840;
t745 = qJD(4) + t749;
t846 = qJD(4) + t745;
t614 = t724 * t846 + t827;
t722 = t751 * t788 - t792 * t841;
t805 = -t792 * t686 - t788 * t840;
t802 = -t722 * qJD(4) - t805;
t885 = t722 * t745;
t898 = -t885 + t802;
t878 = t788 * t898;
t545 = t614 * t792 + t878;
t720 = t724 ^ 2;
t890 = t722 ^ 2;
t672 = t720 - t890;
t514 = t545 * t789 + t672 * t793;
t516 = t545 * t793 - t672 * t789;
t467 = t514 * t790 - t516 * t794;
t541 = -t614 * t788 + t792 * t898;
t791 = sin(qJ(1));
t795 = cos(qJ(1));
t990 = t467 * t791 - t795 * t541;
t989 = t467 * t795 + t791 * t541;
t889 = t745 ^ 2;
t696 = t890 - t889;
t680 = t724 * t722;
t826 = t789 * t759 - t760 * t793;
t685 = -t751 * qJD(3) - t826;
t682 = qJDD(4) - t685;
t902 = t680 + t682;
t876 = t788 * t902;
t591 = t696 * t792 - t876;
t615 = (qJD(4) - t745) * t724 + t827;
t532 = t591 * t789 + t615 * t793;
t536 = t591 * t793 - t615 * t789;
t482 = t532 * t790 - t536 * t794;
t860 = t792 * t902;
t586 = t696 * t788 + t860;
t988 = t482 * t791 + t795 * t586;
t987 = t482 * t795 - t791 * t586;
t899 = -t885 - t802;
t931 = -t615 * t788 + t792 * t899;
t900 = t720 + t890;
t930 = -t615 * t792 - t788 * t899;
t946 = -t789 * t900 + t793 * t930;
t948 = t789 * t930 + t793 * t900;
t959 = -t790 * t948 + t794 * t946;
t976 = t791 * t931 + t795 * t959;
t986 = pkin(5) * t976;
t978 = t791 * t959 - t795 * t931;
t985 = pkin(5) * t978;
t984 = t514 * t794 + t516 * t790;
t983 = t532 * t794 + t536 * t790;
t958 = t790 * t946 + t794 * t948;
t982 = pkin(6) * t958;
t981 = -pkin(1) * t958 - pkin(2) * t948 - pkin(3) * t900 - pkin(8) * t930;
t980 = -pkin(1) * t931 + pkin(6) * t959;
t697 = -t720 + t889;
t903 = -t680 + t682;
t875 = t788 * t903;
t933 = -t697 * t792 - t875;
t859 = t792 * t903;
t932 = -t697 * t788 + t859;
t945 = -t789 * t899 + t793 * t932;
t947 = t789 * t932 + t793 * t899;
t961 = -t790 * t947 + t794 * t945;
t979 = t791 * t961 + t795 * t933;
t977 = -t791 * t933 + t795 * t961;
t653 = t889 + t720;
t568 = t653 * t792 + t876;
t975 = pkin(1) * t568;
t974 = pkin(2) * t568;
t973 = pkin(3) * t568;
t972 = pkin(7) * t946;
t971 = pkin(7) * t948;
t970 = pkin(8) * t568;
t578 = t653 * t788 - t860;
t969 = pkin(8) * t578;
t968 = t789 * t578;
t967 = t791 * t568;
t965 = t793 * t578;
t964 = t795 * t568;
t960 = t790 * t945 + t794 * t947;
t956 = pkin(8) * t931;
t897 = -t889 - t890;
t914 = t788 * t897 + t859;
t944 = pkin(1) * t914;
t943 = pkin(2) * t914;
t942 = pkin(3) * t914;
t913 = t792 * t897 - t875;
t941 = pkin(8) * t913;
t940 = pkin(8) * t914;
t938 = t789 * t913;
t937 = t791 * t914;
t935 = t793 * t913;
t934 = t795 * t914;
t882 = t745 * t792;
t690 = t724 * t882;
t883 = t745 * t788;
t838 = t722 * t883;
t816 = t690 + t838;
t689 = t724 * t883;
t835 = t722 * t882;
t817 = t689 - t835;
t893 = t682 * t789 + t793 * t817;
t896 = -t682 * t793 + t789 * t817;
t911 = -t790 * t896 + t794 * t893;
t929 = t791 * t911 + t795 * t816;
t639 = -qJD(4) * t724 - t827;
t807 = -t639 * t792 - t838;
t808 = -t639 * t788 + t835;
t837 = t789 * t680;
t894 = t793 * t808 - t837;
t834 = t793 * t680;
t895 = t789 * t808 + t834;
t909 = -t790 * t895 + t794 * t894;
t928 = t791 * t909 + t795 * t807;
t927 = -t791 * t816 + t795 * t911;
t926 = -t791 * t807 + t795 * t909;
t925 = 2 * qJD(5);
t923 = qJ(5) * t898;
t713 = t751 * t749;
t901 = -t713 + t840;
t920 = t789 * t901;
t917 = t793 * t901;
t742 = t841 * t749;
t916 = t686 - t742;
t609 = -t788 * t802 - t690;
t610 = t792 * t802 - t689;
t818 = t610 * t793 + t837;
t819 = t610 * t789 - t834;
t892 = -t790 * t819 + t794 * t818;
t915 = t609 * t795 + t791 * t892;
t912 = -t609 * t791 + t795 * t892;
t910 = t790 * t893 + t794 * t896;
t908 = t790 * t894 + t794 * t895;
t839 = t841 ^ 2;
t787 = t794 ^ 2;
t797 = qJD(1) ^ 2;
t769 = t791 * g(1) - g(2) * t795;
t809 = qJDD(1) * pkin(1) + t769;
t810 = qJD(2) * pkin(2) - pkin(7) * t849;
t688 = t760 * pkin(2) + (pkin(7) * t787 + pkin(6)) * t797 - t810 * t849 + t809;
t825 = t841 * t751;
t567 = -t916 * pkin(8) + (-t685 + t825) * pkin(3) - t688;
t770 = g(1) * t795 + g(2) * t791;
t803 = -pkin(1) * t797 + qJDD(1) * pkin(6) - t770;
t735 = -t790 * g(3) + t794 * t803;
t784 = t787 * t797;
t677 = -pkin(2) * t784 + t760 * pkin(7) - qJD(2) * t810 + t735;
t801 = t790 * t803;
t865 = t790 * t797;
t798 = -t801 - t759 * pkin(7) + qJDD(2) * pkin(2) + (pkin(2) * t865 + pkin(7) * t845 - g(3)) * t794;
t626 = t677 * t793 + t789 * t798;
t710 = pkin(3) * t749 - pkin(8) * t751;
t575 = -pkin(3) * t839 + pkin(8) * t840 - t710 * t749 + t626;
t504 = t567 * t788 + t575 * t792;
t671 = pkin(4) * t722 - qJ(5) * t724;
t811 = qJ(5) * t682 - t671 * t722 + t745 * t925 + t504;
t891 = t790 * t818 + t794 * t819;
t747 = t749 ^ 2;
t748 = t751 ^ 2;
t888 = pkin(3) * t789;
t887 = pkin(4) * t792;
t886 = qJ(5) * t792;
t884 = t745 * t724;
t786 = t790 ^ 2;
t881 = t786 * t797;
t625 = t789 * t677 - t793 * t798;
t574 = -pkin(3) * t840 - pkin(8) * t839 + t751 * t710 + t625;
t880 = t788 * t574;
t871 = t789 * t688;
t708 = t713 + t840;
t870 = t789 * t708;
t551 = -t625 * t793 + t626 * t789;
t869 = t790 * t551;
t752 = t797 * pkin(6) + t809;
t868 = t790 * t752;
t776 = t794 * t865;
t767 = qJDD(2) + t776;
t867 = t790 * t767;
t768 = qJDD(2) - t776;
t866 = t790 * t768;
t863 = t792 * t574;
t856 = t793 * t688;
t855 = t793 * t708;
t854 = t794 * t551;
t853 = t794 * t752;
t852 = t794 * t768;
t503 = -t567 * t792 + t575 * t788;
t851 = t900 - t889;
t850 = t786 + t787;
t843 = t791 * qJDD(1);
t842 = t795 * qJDD(1);
t836 = t791 * t713;
t833 = t795 * t713;
t832 = -pkin(3) * t793 - pkin(2);
t828 = qJ(5) * t788 + pkin(3);
t552 = t625 * t789 + t626 * t793;
t734 = t794 * g(3) + t801;
t676 = t734 * t790 + t735 * t794;
t726 = -t769 * t791 - t770 * t795;
t824 = t791 * t776;
t823 = t795 * t776;
t821 = t671 * t724 + qJDD(5) + t503;
t764 = -t791 * t797 + t842;
t820 = -pkin(5) * t764 - g(3) * t791;
t815 = t789 * t742;
t814 = t789 * t825;
t813 = t793 * t742;
t812 = t793 * t825;
t459 = -t503 * t792 + t504 * t788;
t460 = t503 * t788 + t504 * t792;
t675 = t734 * t794 - t735 * t790;
t725 = t769 * t795 - t770 * t791;
t656 = qJD(2) * t751 - t826;
t806 = -t682 * pkin(4) + t821;
t800 = -t639 * pkin(4) + t574 - t923;
t799 = t724 * t925 - t800;
t796 = qJD(2) ^ 2;
t774 = -t784 - t796;
t773 = t784 - t796;
t772 = -t796 - t881;
t771 = t796 - t881;
t766 = t784 - t881;
t765 = t784 + t881;
t763 = t795 * t797 + t843;
t762 = t850 * qJDD(1);
t761 = t782 - 0.2e1 * t830;
t758 = 0.2e1 * t829 + t844;
t756 = t794 * t767;
t755 = t850 * t845;
t746 = -pkin(5) * t763 + g(3) * t795;
t739 = -t748 + t839;
t738 = t747 - t839;
t737 = t759 * t794 - t786 * t845;
t736 = -t760 * t790 - t787 * t845;
t733 = -t748 - t839;
t732 = -t772 * t790 - t852;
t731 = -t771 * t790 + t756;
t730 = t774 * t794 - t867;
t729 = t773 * t794 - t866;
t728 = t772 * t794 - t866;
t727 = t774 * t790 + t756;
t717 = t762 * t795 - t765 * t791;
t716 = t762 * t791 + t765 * t795;
t714 = -t758 * t790 + t761 * t794;
t712 = -t748 + t747;
t706 = -t839 - t747;
t705 = t732 * t795 + t758 * t791;
t704 = t730 * t795 - t761 * t791;
t703 = t732 * t791 - t758 * t795;
t702 = t730 * t791 + t761 * t795;
t694 = -t813 + t814;
t693 = -t815 - t812;
t692 = -pkin(6) * t728 - t853;
t691 = -pkin(6) * t727 - t868;
t687 = -t747 - t748;
t684 = -pkin(1) * t728 + t735;
t683 = -pkin(1) * t727 + t734;
t665 = t738 * t793 - t870;
t664 = -t739 * t789 + t917;
t663 = t738 * t789 + t855;
t662 = t739 * t793 + t920;
t661 = -t733 * t789 - t855;
t660 = t733 * t793 - t870;
t659 = -t686 - t742;
t654 = (0.2e1 * qJD(3) + qJD(2)) * t751 + t826;
t651 = t686 * t793 - t814;
t650 = t686 * t789 + t812;
t649 = -t685 * t789 + t813;
t648 = t685 * t793 + t815;
t647 = t676 * t795 - t752 * t791;
t646 = t676 * t791 + t752 * t795;
t645 = t706 * t793 - t920;
t644 = t706 * t789 + t917;
t632 = -t693 * t790 + t694 * t794;
t623 = -pkin(7) * t660 - t856;
t622 = t722 * t846 + t805;
t616 = -t639 + t884;
t613 = -pkin(7) * t644 - t871;
t612 = -t663 * t790 + t665 * t794;
t611 = -t662 * t790 + t664 * t794;
t601 = -t660 * t790 + t661 * t794;
t600 = t660 * t794 + t661 * t790;
t599 = t656 * t793 - t659 * t789;
t598 = -t654 * t793 - t789 * t916;
t597 = t656 * t789 + t659 * t793;
t596 = -t654 * t789 + t793 * t916;
t583 = -t650 * t790 + t651 * t794;
t582 = -t648 * t790 + t649 * t794;
t581 = -t644 * t790 + t645 * t794;
t580 = t644 * t794 + t645 * t790;
t566 = -pkin(2) * t916 + pkin(7) * t661 - t871;
t555 = -pkin(2) * t654 + pkin(7) * t645 + t856;
t554 = t601 * t795 + t791 * t916;
t553 = t601 * t791 - t795 * t916;
t550 = t581 * t795 + t654 * t791;
t549 = t581 * t791 - t654 * t795;
t540 = pkin(2) * t688 + pkin(7) * t552;
t539 = -t597 * t790 + t599 * t794;
t538 = -t596 * t790 + t598 * t794;
t537 = t597 * t794 + t599 * t790;
t526 = t616 * t789 + t935;
t525 = -t622 * t789 + t965;
t524 = -t616 * t793 + t938;
t523 = t622 * t793 + t968;
t522 = t614 * t789 + t935;
t521 = -t789 * t898 - t965;
t520 = -t614 * t793 + t938;
t519 = t793 * t898 - t968;
t518 = -pkin(1) * t600 - pkin(2) * t660 + t626;
t513 = t539 * t795 + t687 * t791;
t512 = t539 * t791 - t687 * t795;
t511 = t863 + t970;
t506 = -pkin(1) * t580 - pkin(2) * t644 + t625;
t505 = t880 - t940;
t502 = -pkin(7) * t597 - t551;
t497 = -pkin(2) * t687 + pkin(7) * t599 + t552;
t496 = -pkin(1) * t537 - pkin(2) * t597;
t495 = -pkin(6) * t600 - t566 * t790 + t623 * t794;
t494 = (pkin(4) * t745 - (2 * qJD(5))) * t724 + t800;
t493 = t552 * t794 - t869;
t492 = t552 * t790 + t854;
t491 = -pkin(6) * t580 - t555 * t790 + t613 * t794;
t490 = qJ(5) * t889 - t806;
t489 = -pkin(3) * t931 - pkin(4) * t899 + qJ(5) * t615;
t488 = t493 * t795 - t688 * t791;
t487 = t493 * t791 + t688 * t795;
t486 = -pkin(4) * t889 + t811;
t485 = t504 + t973;
t484 = t503 - t942;
t479 = (-t616 - t884) * pkin(4) + t799;
t478 = -pkin(4) * t884 + t799 + t923;
t477 = qJ(5) * t851 + t806;
t476 = pkin(4) * t851 + t811;
t475 = -t524 * t790 + t526 * t794;
t474 = -t523 * t790 + t525 * t794;
t473 = t524 * t794 + t526 * t790;
t472 = t523 * t794 + t525 * t790;
t471 = -t520 * t790 + t522 * t794;
t470 = -t519 * t790 + t521 * t794;
t469 = t520 * t794 + t522 * t790;
t468 = t519 * t794 + t521 * t790;
t461 = -pkin(1) * t492 - pkin(2) * t551;
t458 = t475 * t795 + t937;
t457 = t474 * t795 - t967;
t456 = t475 * t791 - t934;
t455 = t474 * t791 + t964;
t454 = t471 * t795 + t937;
t453 = t470 * t795 + t967;
t452 = t471 * t791 - t934;
t451 = t470 * t791 - t964;
t450 = -t942 + (-t897 - t889) * qJ(5) + (-t903 - t682) * pkin(4) + t821;
t449 = -t973 - qJ(5) * t902 + (-t653 + t889) * pkin(4) - t811;
t448 = -t479 * t788 - t616 * t886 - t940;
t447 = -pkin(4) * t878 + t478 * t792 - t970;
t446 = t460 * t793 + t574 * t789;
t445 = t460 * t789 - t574 * t793;
t440 = -t459 - t956;
t439 = -pkin(6) * t492 - pkin(7) * t854 - t540 * t790;
t438 = t486 * t792 - t490 * t788;
t437 = t486 * t788 + t490 * t792;
t436 = -pkin(6) * t537 - t497 * t790 + t502 * t794;
t435 = -pkin(7) * t523 - t485 * t789 + t511 * t793;
t434 = -pkin(7) * t520 - t484 * t789 + t505 * t793;
t433 = pkin(7) * t525 + t485 * t793 + t511 * t789 + t974;
t432 = -pkin(1) * t472 - pkin(2) * t523 - pkin(3) * t622 - t880 - t969;
t431 = pkin(7) * t522 + t484 * t793 + t505 * t789 - t943;
t430 = -pkin(1) * t469 - pkin(2) * t520 + pkin(3) * t614 + t863 - t941;
t429 = -t476 * t788 + t477 * t792 - t956;
t428 = t438 * t793 + t494 * t789;
t427 = t438 * t789 - t494 * t793;
t426 = t440 * t793 + t888 * t931 - t971;
t425 = -t445 * t790 + t446 * t794;
t424 = t445 * t794 + t446 * t790;
t423 = t789 * t440 + t832 * t931 + t972;
t422 = -pkin(1) * t473 - pkin(2) * t524 - t792 * t479 + t616 * t828 - t941;
t421 = -pkin(1) * t468 - pkin(2) * t519 + t969 - t788 * t478 + (-pkin(3) - t887) * t898;
t420 = -pkin(8) * t437 + (pkin(4) * t788 - t886) * t494;
t419 = -pkin(7) * t524 + t448 * t793 - t450 * t789;
t418 = -pkin(3) * t437 - pkin(4) * t490 - qJ(5) * t486;
t417 = -pkin(7) * t519 + t447 * t793 - t449 * t789;
t416 = -t460 + t981;
t415 = pkin(7) * t526 + t448 * t789 + t450 * t793 - t943;
t414 = pkin(7) * t521 + t447 * t789 + t449 * t793 - t974;
t413 = t429 * t793 - t489 * t789 - t971;
t412 = -pkin(7) * t445 + (-pkin(8) * t793 + t888) * t459;
t411 = t425 * t795 + t459 * t791;
t410 = t425 * t791 - t459 * t795;
t409 = -t476 * t792 - t477 * t788 + t981;
t408 = -pkin(2) * t931 + t429 * t789 + t489 * t793 + t972;
t407 = -t427 * t790 + t428 * t794;
t406 = t427 * t794 + t428 * t790;
t405 = pkin(7) * t446 + (-pkin(8) * t789 + t832) * t459;
t404 = -pkin(6) * t472 - t433 * t790 + t435 * t794;
t403 = -pkin(6) * t469 - t431 * t790 + t434 * t794;
t402 = -pkin(1) * t424 - pkin(2) * t445 + pkin(3) * t574 - pkin(8) * t460;
t401 = t407 * t795 + t437 * t791;
t400 = t407 * t791 - t437 * t795;
t399 = -t423 * t790 + t426 * t794 - t982;
t398 = -pkin(6) * t473 - t415 * t790 + t419 * t794;
t397 = -pkin(6) * t468 - t414 * t790 + t417 * t794;
t396 = -pkin(7) * t427 - t418 * t789 + t420 * t793;
t395 = -t408 * t790 + t413 * t794 - t982;
t394 = -pkin(2) * t437 + pkin(7) * t428 + t418 * t793 + t420 * t789;
t393 = -pkin(1) * t406 - pkin(2) * t427 - pkin(8) * t438 + (t828 + t887) * t494;
t392 = -pkin(6) * t424 - t405 * t790 + t412 * t794;
t391 = -pkin(6) * t406 - t394 * t790 + t396 * t794;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t763, -t764, 0, t726, 0, 0, 0, 0, 0, 0, t704, t705, t717, t647, 0, 0, 0, 0, 0, 0, t550, t554, t513, t488, 0, 0, 0, 0, 0, 0, t454, t457, t976, t411, 0, 0, 0, 0, 0, 0, t458, t976, t453, t401; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t764, -t763, 0, t725, 0, 0, 0, 0, 0, 0, t702, t703, t716, t646, 0, 0, 0, 0, 0, 0, t549, t553, t512, t487, 0, 0, 0, 0, 0, 0, t452, t455, t978, t410, 0, 0, 0, 0, 0, 0, t456, t978, t451, t400; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t727, t728, 0, -t675, 0, 0, 0, 0, 0, 0, t580, t600, t537, t492, 0, 0, 0, 0, 0, 0, t469, t472, t958, t424, 0, 0, 0, 0, 0, 0, t473, t958, t468, t406; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t764, 0, -t763, 0, t820, -t746, -t725, -pkin(5) * t725, t737 * t795 - t824, t714 * t795 - t766 * t791, t731 * t795 + t790 * t843, t736 * t795 + t824, t729 * t795 + t782 * t791, qJDD(2) * t791 + t755 * t795, -pkin(5) * t702 - t683 * t791 + t691 * t795, -pkin(5) * t703 - t684 * t791 + t692 * t795, -pkin(5) * t716 + t675 * t795, -pkin(5) * t646 - (pkin(1) * t791 - pkin(6) * t795) * t675, t583 * t795 + t836, t538 * t795 - t712 * t791, t611 * t795 - t659 * t791, t582 * t795 - t836, t612 * t795 + t656 * t791, t632 * t795 + t791 * t840, -pkin(5) * t549 + t491 * t795 - t506 * t791, -pkin(5) * t553 + t495 * t795 - t518 * t791, -pkin(5) * t512 + t436 * t795 - t496 * t791, -pkin(5) * t487 + t439 * t795 - t461 * t791, t912, t989, t977, t926, -t987, t927, -pkin(5) * t452 + t403 * t795 - t430 * t791, -pkin(5) * t455 + t404 * t795 - t432 * t791, t399 * t795 - t416 * t791 - t985, -pkin(5) * t410 + t392 * t795 - t402 * t791, t912, t977, -t989, t927, t987, t926, -pkin(5) * t456 + t398 * t795 - t422 * t791, t395 * t795 - t409 * t791 - t985, -pkin(5) * t451 + t397 * t795 - t421 * t791, -pkin(5) * t400 + t391 * t795 - t393 * t791; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t763, 0, t764, 0, t746, t820, t726, pkin(5) * t726, t737 * t791 + t823, t714 * t791 + t766 * t795, t731 * t791 - t790 * t842, t736 * t791 - t823, t729 * t791 - t794 * t842, -qJDD(2) * t795 + t755 * t791, pkin(5) * t704 + t683 * t795 + t691 * t791, pkin(5) * t705 + t684 * t795 + t692 * t791, pkin(5) * t717 + t675 * t791, pkin(5) * t647 - (-pkin(1) * t795 - pkin(6) * t791) * t675, t583 * t791 - t833, t538 * t791 + t712 * t795, t611 * t791 + t659 * t795, t582 * t791 + t833, t612 * t791 - t656 * t795, t632 * t791 - t795 * t840, pkin(5) * t550 + t491 * t791 + t506 * t795, pkin(5) * t554 + t495 * t791 + t518 * t795, pkin(5) * t513 + t436 * t791 + t496 * t795, pkin(5) * t488 + t439 * t791 + t461 * t795, t915, t990, t979, t928, -t988, t929, pkin(5) * t454 + t403 * t791 + t430 * t795, pkin(5) * t457 + t404 * t791 + t432 * t795, t399 * t791 + t416 * t795 + t986, pkin(5) * t411 + t392 * t791 + t402 * t795, t915, t979, -t990, t929, t988, t928, pkin(5) * t458 + t398 * t791 + t422 * t795, t395 * t791 + t409 * t795 + t986, pkin(5) * t453 + t397 * t791 + t421 * t795, pkin(5) * t401 + t391 * t791 + t393 * t795; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t769, t770, 0, 0, (t759 + t829) * t790, t758 * t794 + t761 * t790, t771 * t794 + t867, (t760 - t830) * t794, t773 * t790 + t852, 0, pkin(1) * t761 + pkin(6) * t730 + t853, -pkin(1) * t758 + pkin(6) * t732 - t868, pkin(1) * t765 + pkin(6) * t762 + t676, pkin(1) * t752 + pkin(6) * t676, t650 * t794 + t651 * t790, t596 * t794 + t598 * t790, t662 * t794 + t664 * t790, t648 * t794 + t649 * t790, t663 * t794 + t665 * t790, t693 * t794 + t694 * t790, -pkin(1) * t654 + pkin(6) * t581 + t555 * t794 + t613 * t790, -pkin(1) * t916 + pkin(6) * t601 + t566 * t794 + t623 * t790, -pkin(1) * t687 + pkin(6) * t539 + t497 * t794 + t502 * t790, pkin(1) * t688 + pkin(6) * t493 - pkin(7) * t869 + t540 * t794, t891, -t984, t960, t908, t983, t910, pkin(6) * t471 + t431 * t794 + t434 * t790 - t944, pkin(6) * t474 + t433 * t794 + t435 * t790 + t975, t423 * t794 + t426 * t790 + t980, -pkin(1) * t459 + pkin(6) * t425 + t405 * t794 + t412 * t790, t891, t960, t984, t910, -t983, t908, pkin(6) * t475 + t415 * t794 + t419 * t790 - t944, t408 * t794 + t413 * t790 + t980, pkin(6) * t470 + t414 * t794 + t417 * t790 - t975, -pkin(1) * t437 + pkin(6) * t407 + t394 * t794 + t396 * t790;];
tauB_reg = t1;
