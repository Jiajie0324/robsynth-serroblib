% Calculate inertial parameters regressor of coriolis matrix for
% S5RPRRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:06
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RPRRR8_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR8_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR8_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRR8_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:06:11
% EndTime: 2019-12-31 19:06:18
% DurationCPUTime: 4.82s
% Computational Cost: add. (6348->323), mult. (11362->421), div. (0->0), fcn. (11122->6), ass. (0->242)
t385 = qJD(4) + qJD(5);
t386 = qJD(1) - qJD(3);
t318 = cos(qJ(4));
t477 = -pkin(8) - pkin(7);
t295 = t477 * t318;
t315 = sin(qJ(5));
t316 = sin(qJ(4));
t467 = cos(qJ(5));
t378 = t467 * t316;
t354 = -t315 * t295 - t477 * t378;
t509 = t354 / 0.2e1;
t317 = sin(qJ(3));
t319 = cos(qJ(3));
t478 = -pkin(1) - pkin(2);
t285 = t319 * qJ(2) + t317 * t478;
t282 = -pkin(7) + t285;
t461 = pkin(8) - t282;
t230 = t461 * t318;
t358 = t461 * t316;
t355 = -t315 * t230 - t467 * t358;
t508 = t355 / 0.2e1;
t377 = t467 * t318;
t432 = t315 * t316;
t334 = t377 - t432;
t507 = t334 * t317;
t506 = t334 * t319;
t431 = t315 * t318;
t278 = t378 + t431;
t495 = t385 * t278;
t505 = t334 * t495;
t359 = -t278 ^ 2 + t334 ^ 2;
t504 = t385 * t359;
t313 = t316 ^ 2;
t314 = t318 ^ 2;
t418 = t313 + t314;
t427 = t319 * t278;
t344 = -t278 * t427 - t334 * t506;
t483 = t344 * qJD(1);
t503 = -qJD(3) * t344 + t483;
t328 = -t377 / 0.2e1 + t432 / 0.2e1;
t167 = (t334 / 0.2e1 + t328) * t319;
t403 = t167 * qJD(2);
t502 = t385 * t354 - t403;
t323 = t328 * t319;
t168 = t506 / 0.2e1 + t323;
t501 = t168 * qJD(2) + t385 * t355;
t58 = t386 * t359;
t213 = -t467 * t295 + t477 * t432;
t500 = t385 * t213;
t122 = -t467 * t230 + t315 * t358;
t329 = t431 / 0.2e1 + t378 / 0.2e1;
t325 = t329 * t319;
t171 = t427 / 0.2e1 - t325;
t499 = t171 * qJD(2) - t385 * t122;
t475 = -t355 / 0.2e1;
t177 = t317 * t278;
t307 = t319 * t317;
t74 = t177 * t427 + t506 * t507 - t307;
t73 = t74 * qJD(2);
t284 = t317 * qJ(2) - t319 * t478;
t173 = t278 * t284;
t174 = t334 * t284;
t435 = t285 * t319;
t265 = -t435 / 0.2e1;
t470 = t507 / 0.2e1;
t331 = -t173 * t177 / 0.2e1 - t174 * t470 + t265;
t281 = pkin(3) + t284;
t462 = t318 * pkin(4);
t262 = t281 + t462;
t308 = -pkin(3) - t462;
t361 = t308 / 0.2e1 - t262 / 0.2e1;
t472 = -t213 / 0.2e1;
t8 = -t361 * t317 + (t122 / 0.2e1 + t472) * t506 - (t475 + t509) * t427 + t331;
t498 = t8 * qJD(1) + t73;
t457 = qJD(4) * pkin(4);
t497 = (-t278 * t315 - t334 * t467) * t457;
t496 = t385 * t334;
t439 = t278 * t334;
t493 = t385 * t439;
t353 = t386 * t285;
t303 = t314 - t313;
t492 = t386 * t303;
t279 = t418 * t319;
t218 = t317 * t279 - t307;
t209 = t218 * qJD(2);
t360 = t314 / 0.2e1 + t313 / 0.2e1;
t351 = t360 * pkin(7);
t379 = -pkin(3) / 0.2e1 - t281 / 0.2e1;
t41 = (t360 * t284 + t379) * t317 + (t285 / 0.2e1 - t360 * t282 + t351) * t319;
t491 = t41 * qJD(1) - t209;
t397 = t279 * qJD(1);
t489 = -t279 * qJD(3) + t397;
t164 = (t278 / 0.2e1 - t329) * t319;
t406 = t164 * qJD(2);
t413 = qJD(3) * t308;
t324 = t329 * t284;
t61 = t361 * t278 + t324;
t488 = t61 * qJD(1) - t278 * t413 + t406;
t464 = pkin(4) * t316;
t384 = t334 * t464;
t433 = t308 * t278;
t162 = -t384 + t433;
t43 = t61 - t384;
t487 = t43 * qJD(1) - t162 * qJD(3) + t406;
t486 = qJD(2) * t344;
t484 = qJD(3) * t439;
t482 = qJD(1) * t439 - t484;
t416 = qJD(1) * t278;
t481 = -t334 * t416 + t484;
t362 = t472 + t213 / 0.2e1;
t363 = t509 - t354 / 0.2e1;
t365 = t508 + t475;
t6 = -t362 * t278 - (-t363 + t365) * t334;
t476 = t6 * qJD(4);
t469 = t315 / 0.2e1;
t468 = t318 / 0.2e1;
t466 = pkin(3) * t316;
t465 = pkin(4) * t315;
t463 = t317 * pkin(3);
t382 = t467 / 0.2e1;
t326 = (-t382 * t427 + t469 * t506) * pkin(4);
t381 = -t464 / 0.2e1;
t321 = t319 * t381 + t326;
t9 = t365 * t507 + t321;
t455 = t9 * qJD(1);
t454 = t355 * t427;
t451 = t122 * t506;
t21 = t262 * t464;
t449 = t21 * qJD(1);
t22 = -t122 * t174 - t173 * t355 + t262 * t285;
t448 = t22 * qJD(1);
t446 = t427 * t354;
t443 = t506 * t213;
t442 = t262 * t334;
t441 = t262 * t278;
t440 = t262 * t317;
t28 = t440 + t451 + t454;
t438 = t28 * qJD(1);
t437 = t281 * t317;
t436 = t284 * t317;
t434 = t308 * t334;
t430 = t316 * t284;
t429 = t317 * t308;
t60 = t173 * t278 + t174 * t334;
t424 = t60 * qJD(1);
t423 = t60 * qJD(3);
t199 = t418 * t284;
t75 = -t282 * t199 + t281 * t285;
t422 = t75 * qJD(1);
t420 = t442 / 0.2e1 - t434 / 0.2e1;
t366 = t284 * t468;
t419 = t467 * t366 - t315 * t430 / 0.2e1;
t417 = qJ(2) * qJD(1);
t415 = qJD(1) * t281;
t414 = qJD(1) * t318;
t412 = qJD(3) * t317;
t411 = qJD(3) * t318;
t115 = t282 * t279 + t437;
t409 = t115 * qJD(1);
t123 = t384 + t441;
t408 = t123 * qJD(1);
t383 = t278 * t464;
t124 = -t383 + t442;
t407 = t124 * qJD(1);
t165 = (-t278 / 0.2e1 - t329) * t319;
t405 = t165 * qJD(1);
t166 = (-t334 / 0.2e1 + t328) * t319;
t404 = t166 * qJD(1);
t402 = t507 * qJD(1);
t401 = t177 * qJD(1);
t200 = t435 + t436;
t400 = t200 * qJD(1);
t399 = t334 * qJD(5);
t398 = t278 * qJD(5);
t396 = t279 * qJD(2);
t394 = t285 * qJD(1);
t393 = t303 * qJD(4);
t392 = t316 * qJD(4);
t391 = t317 * qJD(1);
t390 = t317 * qJD(2);
t389 = t318 * qJD(4);
t388 = t319 * qJD(1);
t387 = t319 * qJD(2);
t380 = t464 / 0.2e1;
t376 = qJD(1) * t442;
t375 = t262 * t416;
t372 = t316 * t391;
t371 = t334 * t391;
t370 = t278 * t391;
t369 = t318 * t391;
t357 = t467 * qJD(4);
t356 = t467 * qJD(5);
t287 = t386 * t317;
t352 = t386 * t318;
t288 = t386 * t319;
t350 = t284 / 0.2e1 + t379;
t347 = t6 * qJD(3);
t346 = t6 * qJD(1);
t163 = t383 + t434;
t341 = -t383 + t420;
t45 = t328 * t284 + t341;
t342 = -t45 * qJD(1) - t163 * qJD(3);
t340 = -t387 + t415;
t339 = t390 + t394;
t338 = t285 * qJD(3) + t390;
t158 = t350 * t316;
t337 = t158 * qJD(1) + qJD(3) * t466;
t159 = t350 * t318;
t336 = pkin(3) * t411 + t159 * qJD(1);
t62 = t334 * t361 + t419;
t333 = t62 * qJD(1) - t334 * t413;
t330 = t173 * t382 - t174 * t469;
t320 = t213 * t475 - t355 * t472;
t1 = (t361 * t316 + t330) * pkin(4) + t320;
t322 = t319 * t380 + t326;
t19 = -t177 * t362 + t363 * t507 + t322;
t49 = t308 * t464;
t327 = -t1 * qJD(1) - t19 * qJD(2) + t49 * qJD(3);
t64 = -t433 / 0.2e1 + t441 / 0.2e1 + t324;
t305 = t316 * t389;
t267 = (-t411 + t414) * t316;
t225 = t317 * t352 - t319 * t392;
t224 = t316 * t287 + t319 * t389;
t170 = -t427 / 0.2e1 - t325;
t169 = -t506 / 0.2e1 + t323;
t161 = t366 + (pkin(3) + t281) * t468;
t160 = t466 / 0.2e1 + t281 * t316 / 0.2e1 + t430 / 0.2e1;
t149 = t166 * qJD(2);
t148 = t165 * qJD(2);
t77 = t167 * qJD(3) + t404;
t76 = t164 * qJD(3) + t405;
t63 = t419 + t420;
t48 = t170 * qJD(3) - t385 * t507 - t405;
t47 = t169 * qJD(3) + t177 * t385 - t404;
t46 = t341 + t419;
t44 = t64 + t384;
t42 = t265 + t437 / 0.2e1 - t463 / 0.2e1 + t319 * t351 + t418 * (-t436 / 0.2e1 + t282 * t319 / 0.2e1);
t20 = -t354 * t470 + t507 * t509 + t321;
t10 = -t355 * t470 + t507 * t508 + t322;
t7 = t451 / 0.2e1 + t454 / 0.2e1 + t440 / 0.2e1 + t443 / 0.2e1 + t446 / 0.2e1 + t429 / 0.2e1 + t331;
t2 = t330 * pkin(4) + t262 * t380 + t308 * t381 - t320;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), qJ(2) * qJD(2), 0, 0, 0, 0, 0, 0, t338, -t284 * qJD(3) + t387, 0, t200 * qJD(2), t305, t393, 0, -t305, 0, 0, -t281 * t392 + t338 * t318, -t281 * t389 - t338 * t316, t199 * qJD(3) - t396, t115 * qJD(2) + t75 * qJD(3), t505, t504, 0, -t505, 0, 0, -t123 * qJD(4) - t262 * t398 + t334 * t338, -t124 * qJD(4) - t262 * t399 - t278 * t338, t423 + t486, t28 * qJD(2) + t22 * qJD(3) - t21 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(1), t417, 0, 0, 0, 0, 0, 0, t391, t388, 0, t400, 0, 0, 0, 0, 0, 0, t369, -t372, -t397, t42 * qJD(3) + t209 + t409, 0, 0, 0, 0, 0, 0, t171 * t385 + t371, t168 * t385 - t370, t483, t7 * qJD(3) + t10 * qJD(4) + t438 + t73; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t353, -t386 * t284, 0, 0, -t305, -t393, 0, t305, 0, 0, t160 * qJD(4) + t285 * t352, t161 * qJD(4) - t316 * t353, t386 * t199, t422 + t42 * qJD(2) + (-t285 * pkin(3) - pkin(7) * t199) * qJD(3), -t493, -t504, 0, t493, 0, 0, t44 * qJD(4) + t64 * qJD(5) + t334 * t353, t46 * qJD(4) + t63 * qJD(5) - t278 * t353, -t423 + t424 + t476, t448 + t7 * qJD(2) + (-t173 * t354 - t174 * t213 + t285 * t308) * qJD(3) + t2 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t267, t492, -t389, -t267, t392, 0, t160 * qJD(3) - t282 * t389 - t316 * t415, t161 * qJD(3) - t281 * t414 + t282 * t392, 0, 0, -t481, t58, -t496, t481, t495, 0, t44 * qJD(3) - t408 + t499, t46 * qJD(3) - t407 + t501, t347 - t497, -t449 + t10 * qJD(2) + t2 * qJD(3) + (-t122 * t467 - t315 * t355) * t457; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t481, t58, -t496, t481, t495, 0, t64 * qJD(3) - t375 + t499, t63 * qJD(3) - t376 + t501, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(1), -t417, 0, 0, 0, 0, 0, 0, -t287, -t288, 0, -t400, 0, 0, 0, 0, 0, 0, -t225, t224, t489, -t41 * qJD(3) - t409, 0, 0, 0, 0, 0, 0, qJD(3) * t507 - t165 * t385 - t371, -t177 * qJD(3) - t166 * t385 + t370, -t503, t8 * qJD(3) - t9 * qJD(4) - t438; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t218 * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t74 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t287, t288, 0, 0, 0, 0, 0, 0, 0, 0, t225, -t224, -t489, (pkin(7) * t279 - t463) * qJD(3) - t491, 0, 0, 0, 0, 0, 0, t170 * t385 - t334 * t412 + t402, t169 * t385 + t278 * t412 - t401, t503, (t429 + t443 + t446) * qJD(3) + t20 * qJD(4) + t498; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t316 * t288 - t317 * t389, t288 * t318 + t317 * t392, 0, 0, 0, 0, 0, 0, 0, 0, t48, t47, 0, -t455 + t20 * qJD(3) + (-t177 * t315 - t467 * t507) * t457; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, t47, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t339, t284 * qJD(1) - t387, 0, 0, -t305, -t393, 0, t305, 0, 0, -t158 * qJD(4) - t339 * t318, -t159 * qJD(4) + t316 * t339, -t199 * qJD(1) + t396, t41 * qJD(2) - t422, -t493, -t504, 0, t493, 0, 0, -qJD(2) * t507 - t43 * qJD(4) - t61 * qJD(5) - t334 * t394, t177 * qJD(2) + t45 * qJD(4) - t62 * qJD(5) + t278 * t394, -t424 + t476 - t486, -t8 * qJD(2) - t1 * qJD(4) - t448; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t391, -t388, 0, 0, 0, 0, 0, 0, 0, 0, -t369, t372, t397, t491, 0, 0, 0, 0, 0, 0, -t164 * t385 - t402, -t167 * t385 + t401, -t483, -t19 * qJD(4) - t498; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t305, t393, 0, -t305, 0, 0, -pkin(3) * t392, -pkin(3) * t389, 0, 0, t505, t504, 0, -t505, 0, 0, t162 * qJD(4) + t308 * t398, t163 * qJD(4) + t308 * t399, 0, t49 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t267, -t492, t389, t267, -t392, 0, -pkin(7) * t389 - t337, pkin(7) * t392 - t336, 0, 0, -t482, -t58, t496, t482, -t495, 0, -t487 - t500, -t342 + t502, t346 + t497, (-t213 * t467 - t315 * t354) * t457 + t327; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t482, -t58, t496, t482, -t495, 0, -t488 - t500, -t333 + t502, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t267, -t492, 0, t267, 0, 0, t158 * qJD(3) + t340 * t316, t159 * qJD(3) + t318 * t340, 0, 0, t481, -t58, 0, -t481, 0, 0, t43 * qJD(3) + t148 + t408, -t45 * qJD(3) + t149 + t407, -t347, t9 * qJD(2) + t1 * qJD(3) + t449; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t316 * t388, -t318 * t388, 0, 0, 0, 0, 0, 0, 0, 0, t76, t77, 0, t19 * qJD(3) + t455; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t267, t492, 0, -t267, 0, 0, t337, t336, 0, 0, t482, t58, 0, -t482, 0, 0, t487, t403 + t342, -t346, -t327; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(5) * t465, -pkin(4) * t356, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t385 * t465, (-t357 - t356) * pkin(4), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t481, -t58, 0, -t481, 0, 0, t61 * qJD(3) + t148 + t375, t62 * qJD(3) + t149 + t376, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, t77, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t482, t58, 0, -t482, 0, 0, t488, t403 + t333, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t315 * t457, pkin(4) * t357, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t3;
