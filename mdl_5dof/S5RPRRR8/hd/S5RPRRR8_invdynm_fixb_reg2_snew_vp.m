% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRRR8
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:06
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRRR8_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR8_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR8_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR8_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR8_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRR8_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:06:18
% EndTime: 2019-12-31 19:06:27
% DurationCPUTime: 10.09s
% Computational Cost: add. (41929->519), mult. (55766->619), div. (0->0), fcn. (29693->8), ass. (0->313)
t764 = sin(qJ(1));
t768 = cos(qJ(1));
t763 = sin(qJ(3));
t767 = cos(qJ(3));
t824 = qJDD(1) - qJDD(3);
t807 = t767 * t824;
t825 = qJD(1) - qJD(3);
t823 = t825 ^ 2;
t861 = t763 * t823 + t807;
t865 = pkin(6) * t861 + t763 * g(3);
t809 = t763 * t824;
t720 = -t767 * t823 + t809;
t868 = t764 * t720 + t768 * t861;
t869 = -pkin(6) * t720 + t767 * g(3);
t875 = pkin(5) * t868 + t764 * t869 - t768 * t865;
t673 = t768 * t720 - t764 * t861;
t873 = pkin(5) * t673 + t764 * t865 + t768 * t869;
t766 = cos(qJ(4));
t762 = sin(qJ(4));
t811 = t825 * qJD(4);
t804 = t762 * t811;
t808 = t824 * t766;
t862 = t808 - 0.2e1 * t804;
t674 = t862 * t766;
t761 = sin(qJ(5));
t765 = cos(qJ(5));
t813 = t766 * t825;
t815 = t762 * t825;
t704 = -t761 * t815 + t765 * t813;
t706 = -t761 * t813 - t765 * t815;
t667 = t706 * t704;
t756 = qJDD(4) + qJDD(5);
t856 = -t667 + t756;
t864 = t761 * t856;
t863 = t765 * t856;
t752 = 2 * qJD(2) * qJD(1);
t742 = t768 * g(1) + t764 * g(2);
t758 = qJDD(1) * qJ(2);
t798 = t742 - t758;
t851 = (pkin(1) + pkin(2));
t852 = qJD(1) ^ 2;
t697 = -(t851 * t852) + t752 - t798;
t741 = t764 * g(1) - t768 * g(2);
t788 = -qJDD(2) + t741;
t776 = -(t852 * qJ(2)) - t788;
t771 = -(t851 * qJDD(1)) + t776;
t651 = t763 * t697 - t767 * t771;
t652 = t767 * t697 + t763 * t771;
t605 = t767 * t651 - t763 * t652;
t803 = t763 * t651 + t767 * t652;
t860 = t764 * t605 - t768 * t803;
t859 = t768 * t605 + t764 * t803;
t744 = t766 * t811;
t810 = t762 * t824;
t717 = -t810 - t744;
t772 = -t808 + t804;
t639 = -t704 * qJD(5) + t765 * t717 + t761 * t772;
t757 = qJD(4) + qJD(5);
t693 = t757 * t704;
t855 = -t693 + t639;
t759 = t762 ^ 2;
t853 = t766 ^ 2;
t854 = -t759 - t853;
t818 = t761 * t717 - t765 * t772;
t623 = (qJD(5) - t757) * t706 + t818;
t702 = t704 ^ 2;
t703 = t706 ^ 2;
t755 = t757 ^ 2;
t644 = -t823 * pkin(3) - t824 * pkin(7) + t652;
t635 = -t766 * g(3) + t762 * t644;
t636 = t762 * g(3) + t766 * t644;
t592 = t766 * t635 - t762 * t636;
t850 = pkin(3) * t592;
t740 = t766 * t823 * t762;
t728 = qJDD(4) + t740;
t601 = (-t717 - t744) * pkin(8) + t728 * pkin(4) - t635;
t730 = qJD(4) * pkin(4) + pkin(8) * t815;
t747 = t853 * t823;
t602 = -pkin(4) * t747 + pkin(8) * t772 - qJD(4) * t730 + t636;
t566 = -t765 * t601 + t761 * t602;
t567 = t761 * t601 + t765 * t602;
t533 = -t765 * t566 + t761 * t567;
t849 = pkin(4) * t533;
t627 = t693 + t639;
t581 = -t623 * t761 - t765 * t627;
t848 = pkin(4) * t581;
t593 = t762 * t635 + t766 * t636;
t643 = t824 * pkin(3) - t823 * pkin(7) + t651;
t569 = t767 * t593 + t763 * t643;
t847 = pkin(6) * t569;
t846 = pkin(6) * t605;
t845 = pkin(7) * t767;
t842 = qJDD(1) * pkin(1);
t841 = t757 * t706;
t840 = t757 * t761;
t839 = t757 * t765;
t607 = -pkin(4) * t772 - pkin(8) * t747 - t730 * t815 + t643;
t838 = t761 * t607;
t659 = t667 + t756;
t837 = t761 * t659;
t836 = t762 * t533;
t835 = t762 * t643;
t834 = t762 * t728;
t729 = qJDD(4) - t740;
t833 = t762 * t729;
t832 = t765 * t607;
t831 = t765 * t659;
t830 = t766 * t533;
t829 = t766 * t643;
t828 = t766 * t728;
t827 = t766 * t729;
t822 = t763 * t667;
t821 = t767 * t667;
t568 = t763 * t593 - t767 * t643;
t820 = -pkin(6) * t568 - t763 * t850;
t534 = t761 * t566 + t765 * t567;
t708 = ((pkin(1) * qJD(1) - 2 * qJD(2)) * qJD(1)) + t798;
t711 = -t776 + t842;
t819 = -t768 * t708 - t764 * t711;
t817 = -t764 * t741 - t768 * t742;
t816 = t759 * t823;
t806 = -pkin(2) * g(3) + pkin(6) * t803;
t805 = pkin(3) * t643 - pkin(7) * t593;
t731 = t764 * qJDD(1) + t768 * t852;
t714 = -pkin(5) * t731 + t768 * g(3);
t732 = t768 * qJDD(1) - t764 * t852;
t713 = pkin(5) * t732 + t764 * g(3);
t802 = t764 * t708 - t768 * t711;
t800 = t768 * t741 - t764 * t742;
t799 = -pkin(3) * t767 - pkin(7) * t763 - pkin(2);
t797 = t763 * t740;
t796 = t767 * t740;
t653 = -t755 - t702;
t614 = t761 * t653 + t863;
t795 = pkin(4) * t614 - t566;
t517 = t762 * t534 + t830;
t528 = -pkin(4) * t607 + pkin(8) * t534;
t505 = -pkin(7) * t517 - pkin(8) * t830 - t762 * t528;
t514 = -pkin(3) * t517 - t849;
t518 = t766 * t534 - t836;
t515 = t763 * t518 - t767 * t607;
t794 = -pkin(6) * t515 + t767 * t505 - t763 * t514;
t583 = -t623 * t765 + t761 * t627;
t642 = -t702 - t703;
t523 = -pkin(4) * t642 + pkin(8) * t583 + t534;
t527 = -pkin(8) * t581 - t533;
t540 = t766 * t581 + t762 * t583;
t510 = -pkin(7) * t540 - t762 * t523 + t766 * t527;
t529 = -pkin(3) * t540 - t848;
t542 = -t762 * t581 + t766 * t583;
t535 = t763 * t542 - t767 * t642;
t793 = -pkin(6) * t535 + t767 * t510 - t763 * t529;
t615 = t765 * t653 - t864;
t622 = (qJD(5) + t757) * t706 + t818;
t547 = -pkin(4) * t622 + pkin(8) * t615 - t832;
t570 = -pkin(8) * t614 + t838;
t571 = t766 * t614 + t762 * t615;
t522 = -pkin(7) * t571 - t762 * t547 + t766 * t570;
t530 = -pkin(3) * t571 - t795;
t572 = -t762 * t614 + t766 * t615;
t548 = t763 * t572 - t767 * t622;
t792 = -pkin(6) * t548 + t767 * t522 - t763 * t530;
t684 = -t703 - t755;
t629 = -t761 * t684 - t831;
t552 = -pkin(4) * t855 + pkin(8) * t629 + t838;
t628 = t765 * t684 - t837;
t577 = -pkin(8) * t628 + t832;
t584 = t766 * t628 + t762 * t629;
t526 = -pkin(7) * t584 - t762 * t552 + t766 * t577;
t785 = pkin(4) * t628 - t567;
t531 = -pkin(3) * t584 - t785;
t585 = -t762 * t628 + t766 * t629;
t555 = t763 * t585 - t767 * t855;
t791 = -pkin(6) * t555 + t767 * t526 - t763 * t531;
t770 = qJD(4) ^ 2;
t738 = -t747 - t770;
t677 = t762 * t738 + t828;
t610 = -pkin(3) * t677 + t635;
t616 = -pkin(7) * t677 + t835;
t681 = t766 * t738 - t834;
t647 = t763 * t681 - t767 * t862;
t790 = -pkin(6) * t647 - t763 * t610 + t767 * t616;
t736 = -t816 - t770;
t679 = t766 * t736 - t833;
t611 = -pkin(3) * t679 + t636;
t617 = -pkin(7) * t679 + t829;
t683 = -t762 * t736 - t827;
t716 = -t810 - 0.2e1 * t744;
t648 = t763 * t683 - t767 * t716;
t789 = -pkin(6) * t648 - t763 * t611 + t767 * t617;
t787 = -pkin(3) * t862 + pkin(7) * t681 - t829;
t786 = pkin(3) * t716 - pkin(7) * t683 - t835;
t516 = t767 * t518 + t763 * t607;
t784 = -pkin(6) * t516 - t763 * t505 - t767 * t514;
t536 = t767 * t542 + t763 * t642;
t783 = -pkin(6) * t536 - t763 * t510 - t767 * t529;
t549 = t767 * t572 + t763 * t622;
t782 = -pkin(6) * t549 - t763 * t522 - t767 * t530;
t556 = t767 * t585 + t763 * t855;
t781 = -pkin(6) * t556 - t763 * t526 - t767 * t531;
t649 = t767 * t681 + t763 * t862;
t780 = -pkin(6) * t649 - t767 * t610 - t763 * t616;
t650 = t767 * t683 + t763 * t716;
t779 = -pkin(6) * t650 - t767 * t611 - t763 * t617;
t778 = pkin(3) * t607 - pkin(7) * t518 + pkin(8) * t836 - t766 * t528;
t719 = t854 * t824;
t724 = t816 + t747;
t777 = pkin(3) * t724 + pkin(7) * t719 + t593;
t775 = pkin(3) * t642 - pkin(7) * t542 - t766 * t523 - t762 * t527;
t774 = pkin(3) * t622 - pkin(7) * t572 - t766 * t547 - t762 * t570;
t773 = pkin(3) * t855 - pkin(7) * t585 - t766 * t552 - t762 * t577;
t769 = pkin(1) * g(3);
t760 = qJ(2) * g(3);
t737 = t747 - t770;
t735 = -t816 + t770;
t726 = t788 + (2 * t842);
t725 = t816 - t747;
t715 = -t742 + t752 + 0.2e1 * t758;
t712 = t854 * t811;
t691 = -t703 + t755;
t690 = t702 - t755;
t688 = t763 * qJDD(4) + t767 * t712;
t687 = -t767 * qJDD(4) + t763 * t712;
t686 = t766 * t717 + t759 * t811;
t685 = -t762 * t772 + t853 * t811;
t682 = -t762 * t735 + t828;
t680 = t766 * t737 - t833;
t678 = t766 * t735 + t834;
t676 = t762 * t737 + t827;
t675 = (t717 - t744) * t762;
t672 = t767 * t719 - t763 * t724;
t670 = t763 * t719 + t767 * t724;
t669 = -t762 * t716 - t674;
t668 = t766 * t716 - t762 * t862;
t666 = pkin(1) * t711 - qJ(2) * t708;
t665 = t703 - t702;
t664 = t767 * t682 - t762 * t809;
t663 = t767 * t680 - t763 * t808;
t662 = t763 * t682 + t762 * t807;
t661 = t763 * t680 + t766 * t807;
t657 = t767 * t686 - t797;
t656 = t767 * t685 + t797;
t655 = t763 * t686 + t796;
t654 = t763 * t685 - t796;
t646 = (-t704 * t765 + t706 * t761) * t757;
t645 = (-t704 * t761 - t706 * t765) * t757;
t641 = t767 * t669 + t763 * t725;
t640 = t763 * t669 - t767 * t725;
t638 = -t706 * qJD(5) - t818;
t633 = t765 * t690 - t837;
t632 = -t761 * t691 + t863;
t631 = t761 * t690 + t831;
t630 = t765 * t691 + t864;
t621 = t765 * t639 - t706 * t840;
t620 = t761 * t639 + t706 * t839;
t619 = -t761 * t638 + t704 * t839;
t618 = t765 * t638 + t704 * t840;
t609 = qJ(2) * t720 + t851 * t861 + t651;
t608 = qJ(2) * t861 - t851 * t720 + t652;
t600 = t760 + t846;
t598 = t769 - t806;
t597 = -t762 * t645 + t766 * t646;
t596 = t766 * t645 + t762 * t646;
t595 = t767 * t597 + t763 * t756;
t594 = t763 * t597 - t767 * t756;
t589 = -t762 * t631 + t766 * t633;
t588 = -t762 * t630 + t766 * t632;
t587 = t766 * t631 + t762 * t633;
t586 = t766 * t630 + t762 * t632;
t582 = -t765 * t622 - t761 * t855;
t580 = -t761 * t622 + t765 * t855;
t579 = -pkin(6) * t670 + t767 * t592;
t578 = pkin(6) * t672 + t763 * t592;
t576 = -t762 * t620 + t766 * t621;
t575 = -t762 * t618 + t766 * t619;
t574 = t766 * t620 + t762 * t621;
t573 = t766 * t618 + t762 * t619;
t564 = t767 * t576 + t822;
t563 = t767 * t575 - t822;
t562 = t763 * t576 - t821;
t561 = t763 * t575 + t821;
t560 = t767 * t589 - t763 * t623;
t559 = t767 * t588 + t763 * t627;
t558 = t763 * t589 + t767 * t623;
t557 = t763 * t588 - t767 * t627;
t554 = qJ(2) * t650 - t851 * t648 + t786;
t553 = qJ(2) * t649 - t851 * t647 - t787;
t551 = qJ(2) * t679 + t789;
t550 = qJ(2) * t677 + t790;
t546 = qJ(2) * t672 - t851 * t670 - t777;
t545 = t851 * t679 + t779;
t544 = t851 * t677 + t780;
t543 = qJ(2) * t803 + t605 * t851;
t541 = -t762 * t580 + t766 * t582;
t539 = t766 * t580 + t762 * t582;
t538 = t767 * t541 + t763 * t665;
t537 = t763 * t541 - t767 * t665;
t524 = -(qJ(2) - t845) * t592 + t820;
t520 = -t847 - (pkin(1) - t799) * t592;
t519 = qJ(2) * t569 - t851 * t568 + t805;
t513 = qJ(2) * t556 - t851 * t555 + t773;
t512 = qJ(2) * t584 + t791;
t511 = qJ(2) * t549 - t851 * t548 + t774;
t508 = t851 * t584 + t781;
t507 = qJ(2) * t571 + t792;
t506 = t851 * t571 + t782;
t503 = qJ(2) * t540 + t793;
t502 = qJ(2) * t536 - t851 * t535 + t775;
t501 = t851 * t540 + t783;
t500 = qJ(2) * t516 - t851 * t515 + t778;
t499 = qJ(2) * t517 + t794;
t498 = t851 * t517 + t784;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t732, 0, -t731, 0, -t713, -t714, -t800, -pkin(5) * t800, 0, t732, 0, 0, t731, 0, -t713, t802, t714, pkin(5) * t802 + (-t764 * pkin(1) + t768 * qJ(2)) * g(3), 0, 0, -t868, 0, t673, 0, -t875, t873, t859, -pkin(5) * t859 - t764 * t598 + t768 * t600, t764 * t655 + t768 * t657, t764 * t640 + t768 * t641, t764 * t662 + t768 * t664, t764 * t654 + t768 * t656, t764 * t661 + t768 * t663, t764 * t687 + t768 * t688, t768 * t550 - t764 * t544 - pkin(5) * (-t768 * t647 + t764 * t649), t768 * t551 - t764 * t545 - pkin(5) * (-t768 * t648 + t764 * t650), t768 * t579 + t764 * t578 - pkin(5) * (-t768 * t670 + t764 * t672), t768 * t524 - t764 * t520 - pkin(5) * (-t768 * t568 + t764 * t569), t764 * t562 + t768 * t564, t764 * t537 + t768 * t538, t764 * t557 + t768 * t559, t764 * t561 + t768 * t563, t764 * t558 + t768 * t560, t764 * t594 + t768 * t595, t768 * t507 - t764 * t506 - pkin(5) * (-t768 * t548 + t764 * t549), t768 * t512 - t764 * t508 - pkin(5) * (-t768 * t555 + t764 * t556), t768 * t503 - t764 * t501 - pkin(5) * (-t768 * t535 + t764 * t536), t768 * t499 - t764 * t498 - pkin(5) * (-t768 * t515 + t764 * t516); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t731, 0, t732, 0, t714, -t713, t817, pkin(5) * t817, 0, t731, 0, 0, -t732, 0, t714, t819, t713, pkin(5) * t819 + (t768 * pkin(1) + t764 * qJ(2)) * g(3), 0, 0, t673, 0, t868, 0, t873, t875, t860, -pkin(5) * t860 + t768 * t598 + t764 * t600, -t768 * t655 + t764 * t657, -t768 * t640 + t764 * t641, -t768 * t662 + t764 * t664, -t768 * t654 + t764 * t656, -t768 * t661 + t764 * t663, -t768 * t687 + t764 * t688, t764 * t550 + t768 * t544 + pkin(5) * (t764 * t647 + t768 * t649), t764 * t551 + t768 * t545 + pkin(5) * (t764 * t648 + t768 * t650), t764 * t579 - t768 * t578 + pkin(5) * (t764 * t670 + t768 * t672), t764 * t524 + t768 * t520 + pkin(5) * (t764 * t568 + t768 * t569), -t768 * t562 + t764 * t564, -t768 * t537 + t764 * t538, -t768 * t557 + t764 * t559, -t768 * t561 + t764 * t563, -t768 * t558 + t764 * t560, -t768 * t594 + t764 * t595, t764 * t507 + t768 * t506 + pkin(5) * (t764 * t548 + t768 * t549), t764 * t512 + t768 * t508 + pkin(5) * (t764 * t555 + t768 * t556), t764 * t503 + t768 * t501 + pkin(5) * (t764 * t535 + t768 * t536), t764 * t499 + t768 * t498 + pkin(5) * (t764 * t515 + t768 * t516); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t741, t742, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t726, 0, t715, t666, 0, 0, 0, 0, 0, t824, t609, t608, 0, t543, -t675, -t668, -t678, t674, -t676, 0, t553, t554, t546, t519, -t574, -t539, -t586, -t573, -t587, -t596, t511, t513, t502, t500; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t852, 0, 0, -g(3), -t741, 0, 0, qJDD(1), 0, 0, t852, 0, 0, -t711, g(3), t760, 0, 0, -t861, 0, t720, 0, t865, t869, t605, t600, t657, t641, t664, t656, t663, t688, t550, t551, t579, t524, t564, t538, t559, t563, t560, t595, t507, t512, t503, t499; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t852, 0, qJDD(1), 0, g(3), 0, -t742, 0, 0, t852, 0, 0, -qJDD(1), 0, g(3), -t708, 0, t769, 0, 0, t720, 0, t861, 0, t869, -t865, -t803, t598, -t655, -t640, -t662, -t654, -t661, -t687, t544, t545, -t578, t520, -t562, -t537, -t557, -t561, -t558, -t594, t506, t508, t501, t498; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t741, t742, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t726, 0, t715, t666, 0, 0, 0, 0, 0, t824, t609, t608, 0, t543, -t675, -t668, -t678, t674, -t676, 0, t553, t554, t546, t519, -t574, -t539, -t586, -t573, -t587, -t596, t511, t513, t502, t500; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t852, 0, 0, -t711, g(3), 0, 0, 0, -t861, 0, t720, 0, t865, t869, t605, t846, t657, t641, t664, t656, t663, t688, t790, t789, t579, t592 * t845 + t820, t564, t538, t559, t563, t560, t595, t792, t791, t793, t794; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t711, 0, -t708, 0, 0, 0, 0, 0, 0, t824, pkin(2) * t861 + t651, -pkin(2) * t720 + t652, 0, pkin(2) * t605, -t675, -t668, -t678, t674, -t676, 0, -pkin(2) * t647 - t787, -pkin(2) * t648 + t786, -pkin(2) * t670 - t777, -pkin(2) * t568 + t805, -t574, -t539, -t586, -t573, -t587, -t596, -pkin(2) * t548 + t774, -pkin(2) * t555 + t773, -pkin(2) * t535 + t775, -pkin(2) * t515 + t778; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t852, 0, 0, qJDD(1), 0, -g(3), t708, 0, 0, 0, 0, -t720, 0, -t861, 0, -t869, t865, t803, t806, t655, t640, t662, t654, t661, t687, -pkin(2) * t677 - t780, -pkin(2) * t679 - t779, t578, -t592 * t799 + t847, t562, t537, t557, t561, t558, t594, -pkin(2) * t571 - t782, -pkin(2) * t584 - t781, -pkin(2) * t540 - t783, -pkin(2) * t517 - t784; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t824, 0, -t823, 0, 0, g(3), t651, 0, t686, t669, t682, t685, t680, t712, t616, t617, t592, pkin(7) * t592, t576, t541, t588, t575, t589, t597, t522, t526, t510, t505; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t823, 0, -t824, 0, -g(3), 0, t652, 0, t740, -t725, t810, -t740, t808, -qJDD(4), t610, t611, 0, t850, -t667, -t665, -t627, t667, t623, -t756, t530, t531, t529, t514; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t824, -t651, -t652, 0, 0, t675, t668, t678, -t674, t676, 0, t787, -t786, t777, -t805, t574, t539, t586, t573, t587, t596, -t774, -t773, -t775, -t778; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t717, -t862, t728, t744, t737, -t744, 0, t643, t635, 0, t621, t582, t632, t619, t633, t646, t570, t577, t527, -pkin(8) * t533; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t804, t716, t735, t772, t729, t804, -t643, 0, t636, 0, t620, t580, t630, t618, t631, t645, t547, t552, t523, t528; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t740, t725, -t810, t740, -t808, qJDD(4), -t635, -t636, 0, 0, t667, t665, t627, -t667, -t623, t756, t795, t785, t848, t849; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t639, -t622, t856, t693, t690, -t693, 0, t607, t566, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t841, t855, t691, t638, t659, -t841, -t607, 0, t567, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t667, t665, t627, -t667, -t623, t756, -t566, -t567, 0, 0;];
m_new_reg = t1;
