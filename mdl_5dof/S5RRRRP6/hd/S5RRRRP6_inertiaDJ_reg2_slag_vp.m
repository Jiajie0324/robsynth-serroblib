% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S5RRRRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4]';
% 
% Output:
% MMD_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:55
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S5RRRRP6_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP6_inertiaDJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP6_inertiaDJ_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRRP6_inertiaDJ_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:54:34
% EndTime: 2019-12-31 21:54:41
% DurationCPUTime: 2.14s
% Computational Cost: add. (2638->251), mult. (6146->418), div. (0->0), fcn. (5346->6), ass. (0->139)
t163 = cos(qJ(3));
t120 = t163 * qJD(3);
t95 = sin(qJ(3));
t140 = qJD(3) * t95;
t168 = -pkin(7) - pkin(6);
t96 = sin(qJ(2));
t73 = t168 * t96;
t98 = cos(qJ(2));
t74 = t168 * t98;
t111 = t73 * t120 + t74 * t140;
t116 = t168 * t163;
t151 = t95 * t98;
t119 = t168 * t151;
t100 = t111 + (t96 * t116 + t119) * qJD(2);
t123 = t163 * t98;
t152 = t95 * t96;
t62 = -t123 + t152;
t63 = t163 * t96 + t151;
t85 = -t98 * pkin(2) - pkin(1);
t107 = t62 * pkin(3) - t63 * pkin(8) + t85;
t173 = -qJD(4) * t107 - t100;
t129 = pkin(2) * t140;
t94 = sin(qJ(4));
t89 = qJD(4) * t94;
t87 = pkin(4) * t89;
t65 = t87 + t129;
t97 = cos(qJ(4));
t165 = t97 * pkin(4);
t127 = t163 * pkin(2);
t83 = -t127 - pkin(3);
t70 = t83 - t165;
t90 = qJD(4) * t97;
t146 = t65 * t94 + t70 * t90;
t55 = t70 * t89;
t172 = -t65 * t97 + t55;
t153 = t95 * t73;
t46 = -t163 * t74 + t153;
t20 = t97 * t107 - t94 * t46;
t21 = t94 * t107 + t97 * t46;
t171 = -t20 * t94 + t21 * t97;
t92 = t94 ^ 2;
t93 = t97 ^ 2;
t143 = t92 - t93;
t170 = t143 * qJD(4);
t169 = qJD(2) + qJD(3);
t43 = t169 * t63;
t167 = t43 * pkin(4);
t166 = t95 * pkin(2);
t115 = qJD(2) * t123;
t24 = qJD(2) * t153 + t46 * qJD(3) - t168 * t115;
t42 = -t98 * t120 + t169 * t152 - t115;
t155 = t94 * t42;
t28 = t63 * t90 - t155;
t10 = t28 * pkin(4) + t24;
t158 = t63 * t94;
t45 = -t163 * t73 - t95 * t74;
t32 = pkin(4) * t158 + t45;
t164 = t10 * t94 + t32 * t90;
t160 = t45 * t24;
t159 = t63 * t42;
t157 = t63 * t97;
t154 = t94 * t43;
t150 = t97 * t42;
t149 = t97 * t43;
t148 = -qJ(5) - pkin(8);
t147 = t24 * t94 + t45 * t90;
t145 = t94 * t129 + t83 * t90;
t138 = t92 * qJD(4);
t84 = -pkin(3) - t165;
t144 = pkin(4) * t138 + t84 * t90;
t142 = pkin(2) * qJD(3);
t91 = t97 * qJ(5);
t82 = pkin(8) + t166;
t141 = qJ(5) + t82;
t139 = qJD(4) * t63;
t137 = t96 * qJD(2);
t88 = t97 * qJD(5);
t136 = t98 * qJD(2);
t31 = 0.2e1 * t62 * t43;
t135 = -0.2e1 * pkin(1) * qJD(2);
t134 = t94 * t150;
t130 = pkin(2) * t137;
t105 = t43 * pkin(3) + t42 * pkin(8) + t130;
t133 = -t94 * t105 + t173 * t97;
t132 = pkin(3) * t89;
t131 = pkin(3) * t90;
t128 = pkin(4) * t90;
t126 = t63 * t89;
t29 = t32 * t89;
t68 = t84 * t89;
t125 = t94 * t90;
t124 = t96 * t136;
t122 = qJ(5) * t139;
t121 = -t10 * t97 + t29;
t60 = t63 ^ 2;
t118 = t60 * t125;
t117 = pkin(2) * t120;
t114 = t20 * t97 + t21 * t94;
t113 = t62 * t82 - t63 * t83;
t112 = -t97 * t129 + t83 * t89;
t110 = t126 + t150;
t109 = t62 * t89 - t149;
t108 = (t92 + t93) * t163;
t106 = (-t163 * t62 + t63 * t95) * qJD(3);
t5 = t46 * t89 + t133;
t6 = t97 * t105 + t173 * t94 - t46 * t90;
t1 = -t114 * qJD(4) - t5 * t97 - t6 * t94;
t102 = pkin(2) * t106 - t42 * t83 - t43 * t82;
t99 = t94 * t122 + t42 * t91 - t63 * t88 + t6;
t78 = -0.2e1 * t125;
t77 = 0.2e1 * t125;
t75 = t97 * t117;
t72 = t97 * pkin(8) + t91;
t71 = t148 * t94;
t61 = -0.2e1 * t170;
t58 = t97 * t82 + t91;
t57 = t141 * t94;
t52 = -t94 * qJD(5) + t148 * t90;
t51 = -t148 * t89 - t88;
t50 = t108 * t142;
t47 = t51 * t97;
t41 = (-t117 - qJD(5)) * t94 - t141 * t90;
t40 = t141 * t89 - t75 - t88;
t38 = t45 * t89;
t37 = t40 * t97;
t27 = t62 * t90 + t154;
t19 = -0.2e1 * t93 * t159 - 0.2e1 * t118;
t18 = -0.2e1 * t92 * t159 + 0.2e1 * t118;
t17 = t63 * t138 - t93 * t139 + t134;
t14 = -qJ(5) * t158 + t21;
t13 = 0.4e1 * t63 * t134 + 0.2e1 * t60 * t170;
t12 = -0.4e1 * t63 * t125 + t143 * t42;
t11 = t62 * pkin(4) - t63 * t91 + t20;
t8 = -0.2e1 * t63 * t154 - 0.2e1 * t28 * t62;
t7 = -0.2e1 * t110 * t62 + 0.2e1 * t63 * t149;
t4 = t97 * t122 + (-t42 * qJ(5) + qJD(4) * t46 + t63 * qJD(5)) * t94 + t133;
t3 = t4 * t97;
t2 = t99 + t167;
t9 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t124, 0.2e1 * (-t96 ^ 2 + t98 ^ 2) * qJD(2), 0, -0.2e1 * t124, 0, 0, t96 * t135, t98 * t135, 0, 0, -0.2e1 * t159, 0.2e1 * t42 * t62 - 0.2e1 * t63 * t43, 0, t31, 0, 0, 0.2e1 * t62 * t130 + 0.2e1 * t85 * t43, 0.2e1 * t63 * t130 - 0.2e1 * t85 * t42, -0.2e1 * t100 * t62 + 0.2e1 * t24 * t63 - 0.2e1 * t45 * t42 - 0.2e1 * t46 * t43, 0.2e1 * t46 * t111 + 0.2e1 * t160 + 0.2e1 * (t46 * t119 + (t85 * pkin(2) + t46 * t116) * t96) * qJD(2), t19, t13, t7, t18, t8, t31, 0.2e1 * t24 * t158 + 0.2e1 * t20 * t43 + 0.2e1 * t28 * t45 + 0.2e1 * t6 * t62, -0.2e1 * t110 * t45 + 0.2e1 * t24 * t157 - 0.2e1 * t21 * t43 + 0.2e1 * t5 * t62, 0.2e1 * t114 * t42 + 0.2e1 * (-t171 * qJD(4) + t5 * t94 - t6 * t97) * t63, 0.2e1 * t20 * t6 - 0.2e1 * t21 * t5 + 0.2e1 * t160, t19, t13, t7, t18, t8, t31, 0.2e1 * t10 * t158 + 0.2e1 * t11 * t43 + 0.2e1 * t2 * t62 + 0.2e1 * t28 * t32, 0.2e1 * t10 * t157 - 0.2e1 * t110 * t32 - 0.2e1 * t14 * t43 + 0.2e1 * t4 * t62, 0.2e1 * (t11 * t97 + t14 * t94) * t42 + 0.2e1 * (-t2 * t97 + t4 * t94 + (t11 * t94 - t14 * t97) * qJD(4)) * t63, 0.2e1 * t10 * t32 + 0.2e1 * t11 * t2 - 0.2e1 * t14 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t136, 0, -t137, 0, -pkin(6) * t136, pkin(6) * t137, 0, 0, 0, 0, -t42, 0, -t43, 0, -t24, -t100, (t163 * t42 - t43 * t95 + t106) * pkin(2), t100 * t166 + t46 * t117 - t24 * t127 + t45 * t129, -t17, t12, t27, t17, -t109, 0, t38 + (-t113 * qJD(4) - t24) * t97 + t102 * t94, t102 * t97 + t113 * t89 + t147, t1, t24 * t83 + (t171 * t163 + t45 * t95) * t142 + t1 * t82, -t17, t12, t27, t17, -t109, 0, t146 * t63 - t70 * t155 + t41 * t62 - t57 * t43 + t121, -t70 * t150 - t172 * t63 + t40 * t62 - t58 * t43 + t164, -t3 + (-t41 * t63 - t42 * t57 + (-t58 * t63 - t11) * qJD(4)) * t97 + (t40 * t63 + t42 * t58 - t2 + (-t57 * t63 - t14) * qJD(4)) * t94, t10 * t70 + t11 * t41 - t14 * t40 - t2 * t57 + t32 * t65 - t4 * t58; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t129, -0.2e1 * t117, 0, 0, t77, t61, 0, t78, 0, 0, 0.2e1 * t112, 0.2e1 * t145, 0.2e1 * t50, 0.2e1 * (t108 * t82 + t83 * t95) * t142, t77, t61, 0, t78, 0, 0, 0.2e1 * t172, 0.2e1 * t146, -0.2e1 * t41 * t94 - 0.2e1 * t37 + 0.2e1 * (t57 * t97 - t58 * t94) * qJD(4), -0.2e1 * t58 * t40 - 0.2e1 * t57 * t41 + 0.2e1 * t70 * t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t42, 0, -t43, 0, -t24, -t100, 0, 0, -t17, t12, t27, t17, -t109, 0, t38 + (pkin(3) * t42 - pkin(8) * t43) * t94 + (-t24 + (-pkin(3) * t63 - pkin(8) * t62) * qJD(4)) * t97, t110 * pkin(3) + t109 * pkin(8) + t147, t1, -t24 * pkin(3) + t1 * pkin(8), -t17, t12, t27, t17, -t109, 0, -t84 * t155 + t71 * t43 + t52 * t62 + (pkin(4) * t92 + t84 * t97) * t139 + t121, -t84 * t150 - t72 * t43 + t51 * t62 + (-t84 + t165) * t126 + t164, -t3 + (t42 * t71 - t52 * t63 + (-t63 * t72 - t11) * qJD(4)) * t97 + (t42 * t72 + t51 * t63 - t2 + (t63 * t71 - t14) * qJD(4)) * t94, pkin(4) * t29 + t10 * t84 + t11 * t52 - t14 * t51 + t2 * t71 - t4 * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t129, -t117, 0, 0, t77, t61, 0, t78, 0, 0, t112 - t132, -t131 + t145, t50, (-pkin(3) * t95 + t108 * pkin(8)) * t142, t77, t61, 0, t78, 0, 0, t55 + t68 + (-t65 - t87) * t97, t144 + t146, -t37 - t47 + (-t41 - t52) * t94 + ((t57 - t71) * t97 + (-t58 - t72) * t94) * qJD(4), pkin(4) * t55 - t40 * t72 + t41 * t71 - t58 * t51 - t57 * t52 + t65 * t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t77, t61, 0, t78, 0, 0, -0.2e1 * t132, -0.2e1 * t131, 0, 0, t77, t61, 0, t78, 0, 0, -0.2e1 * pkin(4) * t125 + 0.2e1 * t68, 0.2e1 * t144, -0.2e1 * t52 * t94 - 0.2e1 * t47 + 0.2e1 * (-t71 * t97 - t72 * t94) * qJD(4), 0.2e1 * pkin(4) * t68 - 0.2e1 * t72 * t51 + 0.2e1 * t71 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t110, 0, -t28, t43, t6, t5, 0, 0, 0, 0, -t110, 0, -t28, t43, t99 + 0.2e1 * t167, t4, t110 * pkin(4), t2 * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t90, 0, -t89, 0, -t94 * t117 - t82 * t90, t82 * t89 - t75, 0, 0, 0, 0, t90, 0, -t89, 0, t41, t40, -t128, t41 * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t90, 0, -t89, 0, -pkin(8) * t90, pkin(8) * t89, 0, 0, 0, 0, t90, 0, -t89, 0, t52, t51, -t128, t52 * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, -t110, 0, t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, t90, 0, t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, t90, 0, t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t9;
