% Calculate minimal parameter regressor of coriolis matrix for
% S5RRRRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x26]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:55
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RRRRP6_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP6_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP6_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRRP6_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:54:37
% EndTime: 2019-12-31 21:54:50
% DurationCPUTime: 5.42s
% Computational Cost: add. (6513->389), mult. (12844->546), div. (0->0), fcn. (13163->6), ass. (0->326)
t378 = qJD(2) + qJD(3);
t287 = cos(qJ(4));
t286 = sin(qJ(2));
t467 = -pkin(7) - pkin(6);
t260 = t467 * t286;
t288 = cos(qJ(2));
t261 = t467 * t288;
t453 = sin(qJ(3));
t454 = cos(qJ(3));
t331 = -t454 * t260 - t453 * t261;
t495 = t331 * t287;
t356 = t495 / 0.2e1;
t246 = t453 * t286 - t454 * t288;
t133 = t287 * t246;
t272 = t453 * t288;
t273 = t454 * t286;
t248 = -t273 - t272;
t285 = sin(qJ(4));
t496 = t331 * t285;
t497 = -t248 * pkin(4) + qJ(5) * t133 + t496;
t489 = 0.2e1 * t248;
t482 = t378 * t248;
t329 = t246 * t482;
t388 = qJD(4) * t287;
t416 = t248 * t287;
t278 = -pkin(2) * t288 - pkin(1);
t334 = t246 * pkin(3) + t248 * pkin(8);
t303 = t278 + t334;
t250 = t453 * t260;
t364 = t454 * t261;
t332 = -t364 + t250;
t484 = t332 * t285;
t87 = -t287 * t303 + t484;
t77 = qJ(5) * t416 - t87;
t468 = t77 / 0.2e1;
t450 = t246 * pkin(4);
t61 = t77 + t450;
t368 = t468 - t61 / 0.2e1;
t306 = (-t450 / 0.2e1 + t368) * t287;
t479 = qJD(1) * t306;
t494 = -pkin(4) * t388 + t479;
t130 = t285 * t246;
t225 = pkin(4) * t130;
t493 = -t225 / 0.2e1 + t250 / 0.2e1;
t492 = (t87 - t484) * t248;
t483 = t332 * t287;
t88 = t285 * t303 + t483;
t491 = (t88 - t483) * t248;
t490 = t378 * t331;
t488 = 0.2e1 * t285;
t375 = t454 * pkin(2);
t487 = t61 - t77;
t417 = t248 * t285;
t106 = -pkin(4) * t417 + t331;
t317 = -t225 + t332;
t486 = t106 * t317;
t276 = -t375 - pkin(3);
t447 = t287 * pkin(4);
t255 = t276 - t447;
t485 = t317 * t255;
t283 = t285 ^ 2;
t284 = t287 ^ 2;
t266 = t284 + t283;
t481 = t378 * t266;
t267 = t284 - t283;
t480 = t378 * t267;
t245 = t248 ^ 2;
t377 = -t246 ^ 2 + t245;
t477 = qJD(4) * t306;
t353 = t133 / 0.2e1;
t316 = pkin(4) * t353 + t368 * t287;
t476 = t316 * qJD(4);
t244 = -t364 / 0.2e1;
t475 = t244 + t493;
t243 = t364 / 0.2e1;
t474 = t243 - t493;
t129 = (-t283 / 0.2e1 + t284 / 0.2e1) * t248;
t393 = qJD(1) * t287;
t361 = t285 * t393;
t473 = t129 * t378 + t245 * t361;
t114 = t361 * t489 + t480;
t471 = -pkin(3) / 0.2e1;
t448 = t248 * pkin(3);
t449 = t246 * pkin(8);
t162 = -t448 + t449;
t452 = pkin(2) * t286;
t136 = t162 + t452;
t123 = t287 * t136;
t63 = t123 + t497;
t470 = t63 / 0.2e1;
t142 = t287 * t162;
t70 = t142 + t497;
t469 = t70 / 0.2e1;
t374 = t453 * pkin(2);
t275 = t374 + pkin(8);
t405 = qJ(5) + t275;
t231 = t405 * t285;
t465 = -t231 / 0.2e1;
t232 = t405 * t287;
t464 = -t232 / 0.2e1;
t463 = t232 / 0.2e1;
t446 = -qJ(5) - pkin(8);
t256 = t446 * t285;
t461 = -t256 / 0.2e1;
t257 = t446 * t287;
t460 = t257 / 0.2e1;
t459 = t275 / 0.2e1;
t458 = t276 / 0.2e1;
t277 = -pkin(3) - t447;
t457 = -t277 / 0.2e1;
t456 = -t285 / 0.2e1;
t455 = t287 / 0.2e1;
t451 = pkin(4) * t285;
t445 = pkin(3) * qJD(3);
t444 = pkin(4) * qJD(4);
t443 = t63 * t285;
t442 = t70 * t285;
t367 = qJ(5) * t130;
t122 = t285 * t136;
t404 = -t122 + t495;
t82 = t367 - t404;
t441 = t82 * t287;
t141 = t285 * t162;
t403 = t495 - t141;
t83 = t367 - t403;
t440 = t83 * t287;
t78 = qJ(5) * t417 + t88;
t9 = t61 * t63 + t78 * t82 + t486;
t439 = t9 * qJD(1);
t17 = t487 * t417;
t436 = qJD(1) * t17;
t376 = pkin(4) * t416;
t18 = -t106 * t376 - t487 * t78;
t435 = qJD(1) * t18;
t327 = -t78 * t285 - t61 * t287;
t27 = t327 * t248;
t434 = qJD(1) * t27;
t43 = t246 * t87 + t331 * t417;
t433 = qJD(1) * t43;
t44 = -t246 * t88 - t331 * t416;
t432 = qJD(1) * t44;
t12 = t61 * t70 + t78 * t83 + t486;
t431 = t12 * qJD(1);
t310 = t327 * t246;
t15 = (-t285 * t82 - t287 * t63) * t248 + t310;
t430 = t15 * qJD(1);
t16 = (-t285 * t83 - t287 * t70) * t248 + t310;
t429 = t16 * qJD(1);
t23 = t123 * t246 + t492;
t425 = t23 * qJD(1);
t424 = t231 * t285;
t423 = t231 * t287;
t422 = t232 * t285;
t421 = t232 * t287;
t24 = t491 + (t404 - t495) * t246;
t420 = t24 * qJD(1);
t419 = t246 * t276;
t418 = t248 * t275;
t25 = t142 * t246 + t492;
t415 = t25 * qJD(1);
t414 = t256 * t285;
t413 = t256 * t287;
t412 = t257 * t285;
t411 = t257 * t287;
t26 = t491 + (t403 - t495) * t246;
t410 = t26 * qJD(1);
t339 = -t375 / 0.2e1;
t319 = -t276 / 0.2e1 + t339;
t290 = (t459 - t374 / 0.2e1 - pkin(8) / 0.2e1) * t248 + (t471 + t319) * t246;
t28 = t290 * t285;
t409 = t28 * qJD(1);
t230 = t266 * t375;
t258 = t266 * qJD(5);
t402 = t230 * qJD(3) + t258;
t101 = t377 * t285;
t401 = qJD(1) * t101;
t102 = t377 * t287;
t400 = qJD(1) * t102;
t120 = t246 * t452 - t248 * t278;
t399 = qJD(1) * t120;
t121 = -t246 * t278 - t248 * t452;
t398 = qJD(1) * t121;
t140 = t267 * t245;
t397 = qJD(1) * t140;
t396 = qJD(1) * t246;
t395 = qJD(1) * t248;
t394 = qJD(1) * t278;
t392 = qJD(1) * t288;
t391 = qJD(2) * t276;
t390 = qJD(3) * t278;
t389 = qJD(4) * t285;
t387 = t377 * qJD(1);
t386 = t129 * qJD(1);
t385 = t130 * qJD(1);
t128 = t133 * qJD(1);
t139 = t266 * t245;
t384 = t139 * qJD(1);
t168 = t243 + t244;
t383 = t168 * qJD(1);
t238 = t273 / 0.2e1 + t272 / 0.2e1;
t382 = t238 * qJD(1);
t268 = -t286 ^ 2 + t288 ^ 2;
t381 = t268 * qJD(1);
t380 = t286 * qJD(2);
t379 = t288 * qJD(2);
t373 = pkin(1) * t286 * qJD(1);
t372 = pkin(1) * t392;
t370 = qJD(5) * t451;
t369 = t451 / 0.2e1;
t366 = t285 * t454;
t365 = t287 * t454;
t363 = t246 * t394;
t362 = t248 * t394;
t360 = t248 * t389;
t359 = t248 * t388;
t166 = t246 * t395;
t271 = t285 * t388;
t358 = t286 * t392;
t357 = t106 * t456;
t355 = t416 / 0.2e1;
t354 = t130 / 0.2e1;
t352 = -t122 / 0.2e1 + t356;
t351 = t141 / 0.2e1 - t495 / 0.2e1;
t349 = t454 * qJD(2);
t348 = t454 * qJD(3);
t347 = t453 * qJD(2);
t346 = t453 * qJD(3);
t344 = t378 * t287;
t343 = t378 * t285;
t342 = -t376 / 0.2e1;
t341 = pkin(2) * t346;
t340 = pkin(2) * t347;
t338 = t374 / 0.2e1;
t335 = -t366 / 0.2e1;
t330 = t285 * t344;
t328 = t287 * t343;
t326 = pkin(2) * t335;
t289 = (t78 * t365 / 0.2e1 + t61 * t335 + t106 * t453 / 0.2e1) * pkin(2) + t485 / 0.2e1 + t70 * t465 + t83 * t463;
t296 = t317 * t457 + t82 * t460 + t63 * t461;
t2 = t289 + t296;
t92 = (t231 * t366 + t232 * t365 + t453 * t255) * pkin(2);
t325 = t2 * qJD(1) + t92 * qJD(2);
t3 = -t368 * t232 + (t255 * t355 + t357 + t470) * pkin(4);
t84 = t255 * t451;
t324 = -qJD(1) * t3 + qJD(2) * t84;
t7 = (t83 / 0.2e1 - t82 / 0.2e1) * t287 + (-t70 / 0.2e1 + t470) * t285 + ((t465 + t461) * t287 + (t463 + t460) * t285) * t246;
t323 = -qJD(1) * t7 - qJD(2) * t230;
t322 = t418 - t419;
t125 = t421 + t424;
t314 = t422 / 0.2e1 - t423 / 0.2e1;
t315 = t78 * t455 + t61 * t456;
t293 = t248 * t314 + t315;
t20 = t293 + t474;
t321 = qJD(1) * t20 + qJD(2) * t125;
t320 = t248 * (qJD(4) + t396);
t318 = t449 / 0.2e1 - t448 / 0.2e1;
t313 = t246 * t459 + t248 * t458;
t302 = t313 * t287;
t34 = -t123 / 0.2e1 - t302;
t312 = -qJD(1) * t34 - t285 * t391;
t294 = t313 * t285 + t356;
t32 = t294 - t352;
t311 = -qJD(1) * t32 - t287 * t391;
t309 = t287 * t320;
t104 = -qJD(4) * t238 + t166;
t308 = pkin(3) / 0.2e1 + t319;
t307 = t318 * t287;
t305 = t330 * t489;
t36 = (t339 + t457 - t255 / 0.2e1) * t451;
t5 = t368 * t257 + (t277 * t355 + t357 + t469) * pkin(4);
t98 = t277 * t451;
t304 = -qJD(1) * t5 - qJD(2) * t36 + qJD(3) * t98;
t176 = -t411 - t414;
t292 = (-t412 / 0.2e1 + t413 / 0.2e1) * t248 + t315;
t22 = t292 + t474;
t85 = t338 + (t460 + t464) * t287 + (t256 / 0.2e1 + t465) * t285;
t301 = qJD(1) * t22 - qJD(2) * t85 + qJD(3) * t176;
t31 = t287 * t290;
t300 = -t31 * qJD(1) - t285 * t340;
t194 = t308 * t285;
t40 = -t142 / 0.2e1 - t307;
t299 = -qJD(1) * t40 + qJD(2) * t194 + t285 * t445;
t195 = t308 * t287;
t295 = t318 * t285 + t356;
t38 = t295 + t351;
t298 = -qJD(1) * t38 + qJD(2) * t195 + t287 * t445;
t297 = (-t347 - t346) * pkin(2);
t291 = t418 / 0.2e1 - t419 / 0.2e1 + (-t454 * t246 / 0.2e1 - t453 * t248 / 0.2e1) * pkin(2);
t282 = pkin(4) * t389;
t265 = t285 * t341;
t259 = t267 * qJD(4);
t197 = t276 * t455 + (t339 + t471) * t287;
t196 = pkin(3) * t456 + t285 * t458 + t326;
t160 = t378 * t246;
t159 = (-t248 * t393 + t343) * pkin(4);
t137 = t378 * t238;
t126 = t129 * qJD(4);
t116 = 0.2e1 * t243 - t250;
t111 = t128 + t388;
t110 = -t385 - t389;
t99 = t106 * t369;
t96 = t328 - t386;
t95 = -t330 + t386;
t93 = t309 * t488;
t89 = -t166 * t284 - t126;
t86 = -t411 / 0.2e1 + t421 / 0.2e1 - t414 / 0.2e1 + t424 / 0.2e1 + t338;
t80 = qJD(4) * t133 - t400;
t79 = -qJD(4) * t130 + t401;
t52 = -t126 + (t284 * t395 - t330) * t246;
t46 = -t285 * t482 + t400;
t45 = -t248 * t344 - t401;
t42 = (qJD(4) - t396) * t416 * t488 - t246 * t480;
t41 = t496 + t142 / 0.2e1 - t307;
t39 = t295 - t351;
t37 = pkin(4) * t326 + (t255 + t277) * t369;
t35 = t496 + t123 / 0.2e1 - t302;
t33 = t294 + t352;
t30 = pkin(3) * t353 + pkin(8) * t355 + t291 * t287 + t484;
t29 = -t483 + pkin(8) * t417 / 0.2e1 + pkin(3) * t354 + t291 * t285;
t21 = t292 + t475;
t19 = t293 + t475;
t8 = t440 / 0.2e1 - t442 / 0.2e1 - t257 * t354 + t441 / 0.2e1 + t256 * t353 - t443 / 0.2e1 + t314 * t246;
t6 = pkin(4) * t469 - t257 * t468 + t277 * t342 + t61 * t460 + t99;
t4 = pkin(4) * t470 + t255 * t342 + t77 * t463 + t61 * t464 + t99;
t1 = t289 - t296;
t10 = [0, 0, 0, t286 * t379, t268 * qJD(2), 0, 0, 0, -pkin(1) * t380, -pkin(1) * t379, t329, -t378 * t377, 0, 0, 0, qJD(2) * t120 - t248 * t390, qJD(2) * t121 - t246 * t390, -t245 * t271 + t284 * t329, -qJD(4) * t140 - t246 * t305, t102 * t378 + t246 * t360, -t101 * t378 + t246 * t359, -t329, qJD(2) * t23 + qJD(3) * t25 + qJD(4) * t44, qJD(2) * t24 + qJD(3) * t26 + qJD(4) * t43, -qJD(2) * t15 - qJD(3) * t16 - qJD(4) * t17 + qJD(5) * t139, qJD(2) * t9 + qJD(3) * t12 + qJD(4) * t18 - qJD(5) * t27; 0, 0, 0, t358, t381, t379, -t380, 0, -pkin(6) * t379 - t373, pkin(6) * t380 - t372, t166, -t387, -t160, t482, 0, -qJD(2) * t332 + qJD(3) * t116 + t399, t398 + t490, t52, t42, t46, t45, -t104, t425 + (t285 * t322 - t483) * qJD(2) + t29 * qJD(3) + t35 * qJD(4), t420 + (t287 * t322 + t484) * qJD(2) + t30 * qJD(3) + t33 * qJD(4), -t430 + (-t443 + t441 + (t422 - t423) * t246) * qJD(2) + t8 * qJD(3) + t476, t439 + (-t231 * t63 + t232 * t82 + t485) * qJD(2) + t1 * qJD(3) + t4 * qJD(4) + t19 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t166, -t387, -t160, t482, 0, qJD(2) * t116 - qJD(3) * t332 - t362, -t363 + t490, t52, t42, t46, t45, -t104, t415 + t29 * qJD(2) + (t285 * t334 - t483) * qJD(3) + t41 * qJD(4), t410 + t30 * qJD(2) + (t287 * t334 + t484) * qJD(3) + t39 * qJD(4), -t429 + t8 * qJD(2) + (-t442 + t440 + (-t412 + t413) * t246) * qJD(3) + t476, t431 + t1 * qJD(2) + (t256 * t70 - t257 * t83 + t277 * t317) * qJD(3) + t6 * qJD(4) + t21 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t473, t328 * t489 - t397, t285 * t320, t309, t137, qJD(2) * t35 + qJD(3) * t41 - qJD(4) * t88 + t432, qJD(2) * t33 + qJD(3) * t39 + qJD(4) * t87 + t433, -pkin(4) * t360 + t378 * t316 - t436, qJD(2) * t4 + qJD(3) * t6 - t444 * t78 + t435; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t384, qJD(2) * t19 + qJD(3) * t21 - t434; 0, 0, 0, -t358, -t381, 0, 0, 0, t373, t372, -t166, t387, 0, 0, 0, qJD(3) * t168 - t399, -t398, t89, t93, t80, t79, t104, qJD(3) * t28 + qJD(4) * t34 - t425, qJD(3) * t31 + qJD(4) * t32 - t420, qJD(3) * t7 + t430 + t477, qJD(3) * t2 - qJD(4) * t3 + qJD(5) * t20 - t439; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t341, -pkin(2) * t348, t271, t259, 0, 0, 0, t276 * t389 - t287 * t341, t276 * t388 + t265, t402, qJD(3) * t92 + qJD(4) * t84 + qJD(5) * t125; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t297 + t383, (-t349 - t348) * pkin(2), t271, t259, 0, 0, 0, t196 * qJD(4) + t287 * t297 + t409, t197 * qJD(4) + t265 - t300, -t323 + t402, (-t256 * t366 - t257 * t365 + t453 * t277) * pkin(2) * qJD(3) + t37 * qJD(4) + t86 * qJD(5) + t325; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96, t114, t111, t110, -t382, qJD(3) * t196 - t275 * t388 - t312, qJD(3) * t197 + t275 * t389 - t311, t494, qJD(3) * t37 - t232 * t444 + t324; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t481, qJD(3) * t86 + t321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t166, t387, 0, 0, 0, -qJD(2) * t168 + t362, t363, t89, t93, t80, t79, t104, -qJD(2) * t28 + qJD(4) * t40 - t415, -qJD(2) * t31 + qJD(4) * t38 - t410, -qJD(2) * t7 + t429 + t477, -qJD(2) * t2 - qJD(4) * t5 + qJD(5) * t22 - t431; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t340 - t383, pkin(2) * t349, t271, t259, 0, 0, 0, -t194 * qJD(4) + t287 * t340 - t409, -t195 * qJD(4) + t300, t258 + t323, -qJD(4) * t36 - qJD(5) * t85 - t325; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t271, t259, 0, 0, 0, -pkin(3) * t389, -pkin(3) * t388, t258, qJD(4) * t98 + qJD(5) * t176; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t96, t114, t111, t110, -t382, -pkin(8) * t388 - t299, pkin(8) * t389 - t298, t494, t257 * t444 + t304; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t481, t301; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t473, -t305 + t397, -t133 * t378 - t166 * t285, t130 * t378 - t166 * t287, t137, -qJD(2) * t34 - qJD(3) * t40 - t432, -qJD(2) * t32 - qJD(3) * t38 - t433, -t378 * t306 + t436, qJD(2) * t3 + qJD(3) * t5 + qJD(5) * t376 - t435; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, -t114, -t128, t385, t382, qJD(3) * t194 + t312, qJD(3) * t195 + t311, -t479, qJD(3) * t36 - t324 - t370; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t95, -t114, -t128, t385, t382, t299, t298, -t479, -t304 - t370; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t384, -pkin(4) * t359 - qJD(2) * t20 - qJD(3) * t22 + t434; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t481, qJD(3) * t85 + t282 - t321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t481, t282 - t301; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t10;
