% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPPRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:58
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPPRR6_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR6_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR6_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR6_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR6_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPPRR6_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:58:25
% EndTime: 2019-12-31 17:58:38
% DurationCPUTime: 13.94s
% Computational Cost: add. (63243->613), mult. (141319->870), div. (0->0), fcn. (98337->10), ass. (0->419)
t1081 = cos(qJ(1));
t1072 = sin(pkin(8));
t1074 = cos(pkin(8));
t1078 = sin(qJ(1));
t1048 = g(1) * t1081 + g(2) * t1078;
t1160 = qJD(1) ^ 2;
t1037 = -pkin(1) * t1160 - t1048;
t1047 = g(1) * t1078 - g(2) * t1081;
t1090 = qJDD(1) * pkin(1) + t1047;
t986 = t1037 * t1072 - t1074 * t1090;
t1128 = t1074 * t1037;
t987 = t1072 * t1090 + t1128;
t1116 = t1072 * t986 + t1074 * t987;
t927 = t1072 * t987 - t1074 * t986;
t1144 = t1078 * t927;
t1180 = t1081 * t1116 - t1144;
t1140 = t1081 * t927;
t1179 = -t1078 * t1116 - t1140;
t1076 = sin(qJ(5));
t1071 = sin(pkin(9));
t1073 = cos(pkin(9));
t1077 = sin(qJ(4));
t1080 = cos(qJ(4));
t1093 = t1071 * t1080 + t1073 * t1077;
t1026 = t1093 * qJD(1);
t1079 = cos(qJ(5));
t1002 = -qJD(4) * t1079 + t1026 * t1076;
t1004 = qJD(4) * t1076 + t1026 * t1079;
t958 = t1004 * t1002;
t1058 = t1071 * qJDD(1);
t1060 = t1073 * qJDD(1);
t1022 = t1058 * t1077 - t1060 * t1080;
t1135 = t1026 * qJD(4);
t981 = -t1022 - t1135;
t971 = qJDD(5) - t981;
t1169 = -t958 + t971;
t1178 = t1076 * t1169;
t1024 = (t1071 * t1077 - t1073 * t1080) * qJD(1);
t985 = t1026 * t1024;
t1165 = qJDD(4) - t985;
t1177 = t1077 * t1165;
t1176 = t1079 * t1169;
t1175 = t1080 * t1165;
t1083 = t1073 ^ 2;
t1062 = t1083 * t1160;
t1066 = t1071 ^ 2;
t1132 = t1066 * t1160;
t1043 = t1062 + t1132;
t1040 = qJDD(1) * t1072 + t1074 * t1160;
t1068 = g(3) - qJDD(2);
t1010 = qJ(2) * t1040 - t1068 * t1074;
t1041 = qJDD(1) * t1074 - t1072 * t1160;
t1098 = -qJ(2) * t1041 - t1068 * t1072;
t1164 = t1040 * t1081 + t1041 * t1078;
t1174 = pkin(5) * t1164 + t1081 * t1010 - t1078 * t1098;
t992 = -t1040 * t1078 + t1041 * t1081;
t1173 = -pkin(5) * t992 + t1078 * t1010 + t1081 * t1098;
t1163 = t1160 * (t1066 + t1083);
t1033 = t1073 * t1163;
t996 = -t1033 * t1072 + t1060 * t1074;
t998 = t1033 * t1074 + t1060 * t1072;
t1172 = t1078 * t998 - t1081 * t996;
t1171 = t1078 * t996 + t1081 * t998;
t1159 = qJD(4) ^ 2;
t1129 = t1073 * t1068;
t1161 = (pkin(1) * t1072 + pkin(6) + qJ(3)) * qJDD(1) + t1072 * t1047 + t1128;
t1085 = -t1129 + ((-(2 * qJD(3)) + (pkin(3) * t1073 + pkin(2)) * qJD(1)) * qJD(1) - t1161) * t1071;
t1131 = t1071 * t1068;
t1158 = 2 * qJD(3);
t934 = -t1131 + t1161 * t1073 + (t1073 * t1158 + (-pkin(2) * t1073 - pkin(3) * t1083) * qJD(1)) * qJD(1);
t860 = t1077 * t1085 + t1080 * t934;
t974 = pkin(4) * t1024 - pkin(7) * t1026;
t814 = -pkin(4) * t1159 + qJDD(4) * pkin(7) - t1024 * t974 + t860;
t1016 = t1024 * qJD(4);
t970 = -qJDD(1) * pkin(2) - qJ(3) * t1160 + qJDD(3) + t986;
t951 = -pkin(3) * t1060 - pkin(6) * t1043 + t970;
t1023 = t1093 * qJDD(1);
t983 = -t1016 + t1023;
t829 = (-t983 + t1016) * pkin(7) + (-t981 + t1135) * pkin(4) + t951;
t768 = t1076 * t814 - t1079 * t829;
t769 = t1076 * t829 + t1079 * t814;
t721 = t1076 * t768 + t1079 * t769;
t1086 = qJDD(1) * qJ(3) + (-pkin(2) * qJD(1) + t1158) * qJD(1) + t987;
t952 = t1071 * t1086 + t1129;
t953 = t1073 * t1086 - t1131;
t889 = t1071 * t952 + t1073 * t953;
t1000 = t1002 ^ 2;
t1001 = t1004 ^ 2;
t1018 = qJD(5) + t1024;
t1017 = t1018 ^ 2;
t1020 = t1024 ^ 2;
t1021 = t1026 ^ 2;
t859 = t1077 * t934 - t1080 * t1085;
t785 = t1077 * t860 - t1080 * t859;
t1157 = pkin(3) * t785;
t917 = -t1022 * t1077 - t1023 * t1080;
t1156 = pkin(3) * t917;
t1154 = pkin(4) * t1077;
t813 = -qJDD(4) * pkin(4) - pkin(7) * t1159 + t1026 * t974 + t859;
t1153 = -pkin(4) * t813 + pkin(7) * t721;
t1152 = -pkin(2) * t970 + qJ(3) * t889;
t1151 = t1071 * t785;
t963 = t1071 * t970;
t1150 = t1072 * t970;
t1149 = t1073 * t785;
t964 = t1073 * t970;
t1148 = t1074 * t970;
t808 = t1076 * t813;
t911 = t958 + t971;
t1147 = t1076 * t911;
t1146 = t1077 * t951;
t978 = qJDD(4) + t985;
t1145 = t1077 * t978;
t809 = t1079 * t813;
t1143 = t1079 * t911;
t1142 = t1080 * t951;
t1141 = t1080 * t978;
t1139 = t1018 * t1076;
t1138 = t1018 * t1079;
t1137 = t1024 * t1077;
t1136 = t1024 * t1080;
t1134 = t1026 * t1077;
t1133 = t1026 * t1080;
t1130 = t1071 * t1073;
t941 = -t1001 - t1017;
t857 = -t1076 * t941 - t1143;
t1097 = -qJDD(4) * t1076 - t1079 * t983;
t901 = (qJD(5) + t1018) * t1002 + t1097;
t1125 = pkin(4) * t901 + pkin(7) * t857 + t808;
t933 = -t1017 - t1000;
t841 = t1079 * t933 - t1178;
t1115 = qJDD(4) * t1079 - t1076 * t983;
t931 = -qJD(5) * t1004 + t1115;
t966 = t1018 * t1004;
t897 = t931 - t966;
t1124 = pkin(4) * t897 + pkin(7) * t841 - t809;
t1123 = -pkin(4) * t1080 - pkin(3);
t1122 = pkin(2) * t1060 - qJ(3) * t1033 - t964;
t1121 = t1077 * t958;
t1120 = t1080 * t958;
t1119 = t1072 * t985;
t1118 = t1074 * t985;
t1050 = t1160 * t1130;
t1117 = t1071 * t1060;
t786 = t1077 * t859 + t1080 * t860;
t710 = t1077 * t813 + t1080 * t721;
t720 = t1076 * t769 - t1079 * t768;
t674 = pkin(6) * t710 + (-pkin(7) * t1077 + t1123) * t720;
t709 = t1077 * t721 - t1080 * t813;
t681 = -pkin(6) * t709 + (-pkin(7) * t1080 + t1154) * t720;
t686 = -t1071 * t709 + t1073 * t710;
t1114 = -pkin(2) * t720 + qJ(3) * t686 + t1071 * t681 + t1073 * t674;
t898 = (-qJD(5) + t1018) * t1004 + t1115;
t932 = -qJD(5) * t1002 - t1097;
t965 = t1018 * t1002;
t900 = t932 + t965;
t803 = t1076 * t898 - t1079 * t900;
t708 = -pkin(7) * t803 - t720;
t805 = t1076 * t900 + t1079 * t898;
t921 = t1000 + t1001;
t784 = -t1077 * t921 + t1080 * t805;
t688 = pkin(6) * t784 + t1077 * t708 + t1123 * t803;
t783 = t1077 * t805 + t1080 * t921;
t691 = -pkin(6) * t783 + t1080 * t708 + t1154 * t803;
t735 = -t1071 * t783 + t1073 * t784;
t1113 = -pkin(2) * t803 + qJ(3) * t735 + t1071 * t691 + t1073 * t688;
t840 = t1076 * t933 + t1176;
t748 = -pkin(4) * t840 + t768;
t773 = -pkin(7) * t840 + t808;
t790 = -t1077 * t897 + t1080 * t841;
t694 = -pkin(3) * t840 + pkin(6) * t790 + t1077 * t773 + t1080 * t748;
t789 = t1077 * t841 + t1080 * t897;
t703 = -pkin(6) * t789 - t1077 * t748 + t1080 * t773;
t744 = -t1071 * t789 + t1073 * t790;
t1112 = -pkin(2) * t840 + qJ(3) * t744 + t1071 * t703 + t1073 * t694;
t856 = t1079 * t941 - t1147;
t750 = -pkin(4) * t856 + t769;
t775 = -pkin(7) * t856 + t809;
t794 = -t1077 * t901 + t1080 * t857;
t697 = -pkin(3) * t856 + pkin(6) * t794 + t1077 * t775 + t1080 * t750;
t793 = t1077 * t857 + t1080 * t901;
t705 = -pkin(6) * t793 - t1077 * t750 + t1080 * t775;
t747 = -t1071 * t793 + t1073 * t794;
t1111 = -pkin(2) * t856 + qJ(3) * t747 + t1071 * t705 + t1073 * t697;
t1110 = pkin(4) * t921 + pkin(7) * t805 + t721;
t919 = -t1022 * t1080 + t1023 * t1077;
t957 = -t1020 - t1021;
t761 = -pkin(3) * t957 + pkin(6) * t919 + t786;
t770 = -pkin(6) * t917 - t785;
t846 = -t1071 * t917 + t1073 * t919;
t1109 = -pkin(2) * t957 + qJ(3) * t846 + t1071 * t770 + t1073 * t761;
t976 = -t1020 - t1159;
t915 = t1080 * t976 - t1177;
t980 = t1022 + 0.2e1 * t1135;
t818 = -pkin(3) * t980 + pkin(6) * t915 - t1142;
t914 = t1077 * t976 + t1175;
t839 = -t1071 * t914 + t1073 * t915;
t862 = -pkin(6) * t914 + t1146;
t1108 = -pkin(2) * t980 + qJ(3) * t839 + t1071 * t862 + t1073 * t818;
t1013 = -t1021 - t1159;
t940 = -t1013 * t1077 - t1141;
t982 = -0.2e1 * t1016 + t1023;
t843 = -pkin(3) * t982 + pkin(6) * t940 + t1146;
t937 = t1013 * t1080 - t1145;
t879 = -t1071 * t937 + t1073 * t940;
t885 = -pkin(6) * t937 + t1142;
t1107 = -pkin(2) * t982 + qJ(3) * t879 + t1071 * t885 + t1073 * t843;
t1106 = -t1047 * t1078 - t1048 * t1081;
t1057 = t1066 * qJDD(1);
t1059 = t1083 * qJDD(1);
t1038 = t1059 + t1057;
t1104 = pkin(2) * t1043 + qJ(3) * t1038 + t889;
t1103 = pkin(3) * t709 + t1153;
t1102 = pkin(3) * t937 - t860;
t1046 = qJDD(1) * t1081 - t1078 * t1160;
t1101 = -pkin(5) * t1046 - g(3) * t1078;
t1100 = pkin(3) * t789 + t1124;
t1099 = pkin(3) * t793 + t1125;
t887 = t1071 * t953 - t1073 * t952;
t1005 = t1040 * t1130;
t1006 = -t1050 * t1072 + t1074 * t1117;
t1096 = t1005 * t1081 + t1006 * t1078;
t1095 = t1005 * t1078 - t1006 * t1081;
t1094 = t1047 * t1081 - t1048 * t1078;
t1032 = t1071 * t1163;
t1092 = -pkin(2) * t1058 + qJ(3) * t1032 + t963;
t1091 = pkin(3) * t914 - t859;
t1089 = pkin(3) * t783 + t1110;
t739 = t1073 * t786 - t1151;
t776 = -pkin(3) * t951 + pkin(6) * t786;
t1088 = -pkin(2) * t951 - pkin(6) * t1151 + qJ(3) * t739 + t1073 * t776;
t1049 = 0.2e1 * t1117;
t1045 = qJDD(1) * t1078 + t1081 * t1160;
t1044 = -t1062 + t1132;
t1039 = t1059 - t1057;
t1019 = -pkin(5) * t1045 + g(3) * t1081;
t1012 = -t1021 + t1159;
t1011 = t1020 - t1159;
t997 = t1032 * t1074 + t1058 * t1072;
t994 = t1032 * t1072 - t1058 * t1074;
t991 = t1039 * t1074 + t1044 * t1072;
t990 = t1038 * t1074 - t1043 * t1072;
t989 = t1039 * t1072 - t1044 * t1074;
t988 = t1038 * t1072 + t1043 * t1074;
t984 = t1021 - t1020;
t968 = (t1134 - t1136) * qJD(4);
t967 = (-t1133 - t1137) * qJD(4);
t962 = -t1001 + t1017;
t961 = t1000 - t1017;
t960 = -pkin(1) * t1040 - t987;
t959 = pkin(1) * t1041 - t986;
t956 = t1001 - t1000;
t950 = -qJD(4) * t1134 + t1080 * t983;
t949 = qJD(4) * t1133 + t1077 * t983;
t948 = qJD(4) * t1136 - t1077 * t981;
t947 = qJD(4) * t1137 + t1080 * t981;
t943 = -t1078 * t994 + t1081 * t997;
t942 = t1078 * t997 + t1081 * t994;
t939 = -t1012 * t1077 + t1175;
t938 = t1011 * t1080 - t1145;
t936 = t1012 * t1080 + t1177;
t935 = t1011 * t1077 + t1141;
t924 = pkin(1) * t927;
t920 = -t1077 * t982 - t1080 * t980;
t918 = -t1077 * t980 + t1080 * t982;
t913 = pkin(1) * t1068 + qJ(2) * t1116;
t909 = (-t1002 * t1079 + t1004 * t1076) * t1018;
t908 = (-t1002 * t1076 - t1004 * t1079) * t1018;
t907 = -t1071 * t967 + t1073 * t968;
t906 = t1071 * t968 + t1073 * t967;
t905 = pkin(1) * t996 + t1122;
t904 = pkin(1) * t994 + t1092;
t903 = qJDD(4) * t1072 + t1074 * t907;
t902 = -qJDD(4) * t1074 + t1072 * t907;
t899 = t932 - t965;
t896 = -t931 - t966;
t893 = -t1004 * t1139 + t1079 * t932;
t892 = t1004 * t1138 + t1076 * t932;
t891 = t1002 * t1138 - t1076 * t931;
t890 = -t1002 * t1139 - t1079 * t931;
t884 = -t1071 * t949 + t1073 * t950;
t883 = -t1071 * t947 + t1073 * t948;
t882 = t1071 * t950 + t1073 * t949;
t881 = t1071 * t948 + t1073 * t947;
t878 = -t1071 * t936 + t1073 * t939;
t877 = -t1071 * t935 + t1073 * t938;
t876 = t1071 * t940 + t1073 * t937;
t875 = t1071 * t939 + t1073 * t936;
t874 = t1071 * t938 + t1073 * t935;
t872 = t1077 * t971 + t1080 * t909;
t871 = t1077 * t909 - t1080 * t971;
t870 = -qJ(2) * t994 - t1072 * t953 + t1073 * t1148;
t869 = -qJ(2) * t996 + t1071 * t1148 - t1072 * t952;
t868 = qJ(2) * t997 + t1072 * t964 + t1074 * t953;
t867 = -qJ(2) * t998 + t1071 * t1150 + t1074 * t952;
t866 = t1079 * t961 - t1147;
t865 = -t1076 * t962 + t1176;
t864 = t1076 * t961 + t1143;
t863 = t1079 * t962 + t1178;
t855 = t1023 * t1072 + t1074 * t878;
t854 = -t1022 * t1072 + t1074 * t877;
t853 = -t1023 * t1074 + t1072 * t878;
t852 = t1022 * t1074 + t1072 * t877;
t849 = -qJ(2) * t988 - t1074 * t887;
t848 = qJ(2) * t990 - t1072 * t887;
t847 = -t1071 * t918 + t1073 * t920;
t845 = t1071 * t920 + t1073 * t918;
t844 = t1071 * t919 + t1073 * t917;
t838 = t1071 * t915 + t1073 * t914;
t833 = t1074 * t884 + t1119;
t832 = t1074 * t883 - t1119;
t831 = t1072 * t884 - t1118;
t830 = t1072 * t883 + t1118;
t828 = t1074 * t889 + t1150;
t827 = t1072 * t889 - t1148;
t825 = t1072 * t982 + t1074 * t879;
t824 = t1072 * t879 - t1074 * t982;
t823 = t1080 * t893 + t1121;
t822 = t1080 * t891 - t1121;
t821 = t1077 * t893 - t1120;
t820 = t1077 * t891 + t1120;
t819 = pkin(1) * t988 + t1104;
t816 = t1072 * t984 + t1074 * t847;
t815 = t1072 * t847 - t1074 * t984;
t812 = t1072 * t980 + t1074 * t839;
t811 = t1072 * t839 - t1074 * t980;
t807 = t1072 * t957 + t1074 * t846;
t806 = t1072 * t846 - t1074 * t957;
t804 = -t1076 * t899 + t1079 * t897;
t802 = t1076 * t897 + t1079 * t899;
t799 = -pkin(2) * t844 - t1156;
t798 = -t1077 * t896 + t1080 * t866;
t797 = t1077 * t900 + t1080 * t865;
t796 = t1077 * t866 + t1080 * t896;
t795 = t1077 * t865 - t1080 * t900;
t792 = -t1071 * t871 + t1073 * t872;
t791 = t1071 * t872 + t1073 * t871;
t788 = t1077 * t956 + t1080 * t804;
t787 = t1077 * t804 - t1080 * t956;
t782 = pkin(1) * t827 + t1152;
t781 = -pkin(2) * t876 - t1102;
t780 = -t1071 * t821 + t1073 * t823;
t779 = -t1071 * t820 + t1073 * t822;
t778 = t1071 * t823 + t1073 * t821;
t777 = t1071 * t822 + t1073 * t820;
t772 = t1072 * t908 + t1074 * t792;
t771 = t1072 * t792 - t1074 * t908;
t764 = -pkin(2) * t838 - t1091;
t763 = -qJ(2) * t827 + (pkin(2) * t1072 - qJ(3) * t1074) * t887;
t762 = -qJ(3) * t876 - t1071 * t843 + t1073 * t885;
t759 = t1072 * t892 + t1074 * t780;
t758 = -t1072 * t890 + t1074 * t779;
t757 = t1072 * t780 - t1074 * t892;
t756 = t1072 * t779 + t1074 * t890;
t755 = -qJ(3) * t838 - t1071 * t818 + t1073 * t862;
t754 = -t1071 * t796 + t1073 * t798;
t753 = -t1071 * t795 + t1073 * t797;
t752 = t1071 * t798 + t1073 * t796;
t751 = t1071 * t797 + t1073 * t795;
t749 = qJ(2) * t828 + (-pkin(2) * t1074 - qJ(3) * t1072 - pkin(1)) * t887;
t746 = t1071 * t794 + t1073 * t793;
t743 = t1071 * t790 + t1073 * t789;
t741 = -t1071 * t787 + t1073 * t788;
t740 = t1071 * t788 + t1073 * t787;
t738 = t1071 * t786 + t1149;
t736 = pkin(1) * t824 + t1107;
t734 = t1071 * t784 + t1073 * t783;
t732 = t1072 * t864 + t1074 * t754;
t731 = t1072 * t863 + t1074 * t753;
t730 = t1072 * t754 - t1074 * t864;
t729 = t1072 * t753 - t1074 * t863;
t728 = t1072 * t951 + t1074 * t739;
t727 = t1072 * t739 - t1074 * t951;
t726 = t1072 * t856 + t1074 * t747;
t725 = t1072 * t747 - t1074 * t856;
t724 = pkin(1) * t811 + t1108;
t723 = t1072 * t840 + t1074 * t744;
t722 = t1072 * t744 - t1074 * t840;
t717 = t1072 * t802 + t1074 * t741;
t716 = t1072 * t741 - t1074 * t802;
t715 = t1072 * t803 + t1074 * t735;
t714 = t1072 * t735 - t1074 * t803;
t713 = -pkin(2) * t738 - t1157;
t712 = -qJ(2) * t824 - t1072 * t781 + t1074 * t762;
t711 = -qJ(3) * t844 - t1071 * t761 + t1073 * t770;
t707 = -pkin(1) * t876 + qJ(2) * t825 + t1072 * t762 + t1074 * t781;
t706 = -qJ(2) * t811 - t1072 * t764 + t1074 * t755;
t701 = pkin(1) * t806 + t1109;
t700 = -pkin(1) * t838 + qJ(2) * t812 + t1072 * t755 + t1074 * t764;
t699 = -pkin(6) * t1149 - qJ(3) * t738 - t1071 * t776;
t698 = -pkin(2) * t746 - t1099;
t696 = -pkin(2) * t743 - t1100;
t692 = -qJ(2) * t806 - t1072 * t799 + t1074 * t711;
t689 = -pkin(1) * t844 + qJ(2) * t807 + t1072 * t711 + t1074 * t799;
t685 = t1071 * t710 + t1073 * t709;
t683 = pkin(1) * t727 + t1088;
t682 = -pkin(2) * t734 - t1089;
t679 = t1072 * t720 + t1074 * t686;
t678 = t1072 * t686 - t1074 * t720;
t677 = -qJ(2) * t727 - t1072 * t713 + t1074 * t699;
t676 = -qJ(3) * t746 - t1071 * t697 + t1073 * t705;
t675 = -qJ(3) * t743 - t1071 * t694 + t1073 * t703;
t672 = -pkin(1) * t738 + qJ(2) * t728 + t1072 * t699 + t1074 * t713;
t671 = -pkin(2) * t685 - t1103;
t670 = pkin(1) * t725 + t1111;
t669 = -qJ(3) * t734 - t1071 * t688 + t1073 * t691;
t668 = pkin(1) * t722 + t1112;
t667 = pkin(1) * t714 + t1113;
t666 = -qJ(2) * t725 - t1072 * t698 + t1074 * t676;
t665 = -qJ(2) * t722 - t1072 * t696 + t1074 * t675;
t664 = -pkin(1) * t746 + qJ(2) * t726 + t1072 * t676 + t1074 * t698;
t663 = -pkin(1) * t743 + qJ(2) * t723 + t1072 * t675 + t1074 * t696;
t662 = -qJ(2) * t714 - t1072 * t682 + t1074 * t669;
t661 = -pkin(1) * t734 + qJ(2) * t715 + t1072 * t669 + t1074 * t682;
t660 = -qJ(3) * t685 - t1071 * t674 + t1073 * t681;
t659 = pkin(1) * t678 + t1114;
t658 = -qJ(2) * t678 - t1072 * t671 + t1074 * t660;
t657 = -pkin(1) * t685 + qJ(2) * t679 + t1072 * t660 + t1074 * t671;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1046, 0, -t1045, 0, t1101, -t1019, -t1094, -pkin(5) * t1094, 0, 0, t992, 0, -t1164, 0, t1173, t1174, t1179, pkin(5) * t1179 - qJ(2) * t1140 - t1078 * t913, -t1095, -t1078 * t989 + t1081 * t991, t943, t1095, t1171, 0, pkin(5) * t1172 - t1078 * t867 + t1081 * t869, -pkin(5) * t942 - t1078 * t868 + t1081 * t870, t1081 * t849 - t1078 * t848 - pkin(5) * (t1078 * t990 + t1081 * t988), t1081 * t763 - t1078 * t749 - pkin(5) * (t1078 * t828 + t1081 * t827), -t1078 * t831 + t1081 * t833, -t1078 * t815 + t1081 * t816, -t1078 * t853 + t1081 * t855, -t1078 * t830 + t1081 * t832, -t1078 * t852 + t1081 * t854, -t1078 * t902 + t1081 * t903, t1081 * t706 - t1078 * t700 - pkin(5) * (t1078 * t812 + t1081 * t811), t1081 * t712 - t1078 * t707 - pkin(5) * (t1078 * t825 + t1081 * t824), t1081 * t692 - t1078 * t689 - pkin(5) * (t1078 * t807 + t1081 * t806), t1081 * t677 - t1078 * t672 - pkin(5) * (t1078 * t728 + t1081 * t727), -t1078 * t757 + t1081 * t759, -t1078 * t716 + t1081 * t717, -t1078 * t729 + t1081 * t731, -t1078 * t756 + t1081 * t758, -t1078 * t730 + t1081 * t732, -t1078 * t771 + t1081 * t772, t1081 * t665 - t1078 * t663 - pkin(5) * (t1078 * t723 + t1081 * t722), t1081 * t666 - t1078 * t664 - pkin(5) * (t1078 * t726 + t1081 * t725), t1081 * t662 - t1078 * t661 - pkin(5) * (t1078 * t715 + t1081 * t714), t1081 * t658 - t1078 * t657 - pkin(5) * (t1078 * t679 + t1081 * t678); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1045, 0, t1046, 0, t1019, t1101, t1106, pkin(5) * t1106, 0, 0, t1164, 0, t992, 0, -t1174, t1173, t1180, pkin(5) * t1180 - qJ(2) * t1144 + t1081 * t913, t1096, t1078 * t991 + t1081 * t989, t942, -t1096, t1172, 0, -pkin(5) * t1171 + t1078 * t869 + t1081 * t867, pkin(5) * t943 + t1078 * t870 + t1081 * t868, t1078 * t849 + t1081 * t848 + pkin(5) * (-t1078 * t988 + t1081 * t990), t1078 * t763 + t1081 * t749 + pkin(5) * (-t1078 * t827 + t1081 * t828), t1078 * t833 + t1081 * t831, t1078 * t816 + t1081 * t815, t1078 * t855 + t1081 * t853, t1078 * t832 + t1081 * t830, t1078 * t854 + t1081 * t852, t1078 * t903 + t1081 * t902, t1078 * t706 + t1081 * t700 + pkin(5) * (-t1078 * t811 + t1081 * t812), t1078 * t712 + t1081 * t707 + pkin(5) * (-t1078 * t824 + t1081 * t825), t1078 * t692 + t1081 * t689 + pkin(5) * (-t1078 * t806 + t1081 * t807), t1078 * t677 + t1081 * t672 + pkin(5) * (-t1078 * t727 + t1081 * t728), t1078 * t759 + t1081 * t757, t1078 * t717 + t1081 * t716, t1078 * t731 + t1081 * t729, t1078 * t758 + t1081 * t756, t1078 * t732 + t1081 * t730, t1078 * t772 + t1081 * t771, t1078 * t665 + t1081 * t663 + pkin(5) * (-t1078 * t722 + t1081 * t723), t1078 * t666 + t1081 * t664 + pkin(5) * (-t1078 * t725 + t1081 * t726), t1078 * t662 + t1081 * t661 + pkin(5) * (-t1078 * t714 + t1081 * t715), t1078 * t658 + t1081 * t657 + pkin(5) * (-t1078 * t678 + t1081 * t679); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1047, t1048, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t959, t960, 0, t924, t1057, t1049, 0, t1059, 0, 0, t905, t904, t819, t782, t882, t845, t875, t881, t874, t906, t724, t736, t701, t683, t778, t740, t751, t777, t752, t791, t668, t670, t667, t659; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1160, 0, 0, -g(3), -t1047, 0, 0, 0, t1041, 0, -t1040, 0, t1098, t1010, -t927, -qJ(2) * t927, t1006, t991, t997, -t1006, t998, 0, t869, t870, t849, t763, t833, t816, t855, t832, t854, t903, t706, t712, t692, t677, t759, t717, t731, t758, t732, t772, t665, t666, t662, t658; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1160, 0, qJDD(1), 0, g(3), 0, -t1048, 0, 0, 0, t1040, 0, t1041, 0, -t1010, t1098, t1116, t913, t1005, t989, t994, -t1005, -t996, 0, t867, t868, t848, t749, t831, t815, t853, t830, t852, t902, t700, t707, t689, t672, t757, t716, t729, t756, t730, t771, t663, t664, t661, t657; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1047, t1048, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t959, t960, 0, t924, t1057, t1049, 0, t1059, 0, 0, t905, t904, t819, t782, t882, t845, t875, t881, t874, t906, t724, t736, t701, t683, t778, t740, t751, t777, t752, t791, t668, t670, t667, t659; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1160, 0, 0, -t1068, t986, 0, t1117, t1039, t1032, -t1117, t1033, 0, t963, t964, -t887, -qJ(3) * t887, t884, t847, t878, t883, t877, t907, t755, t762, t711, t699, t780, t741, t753, t779, t754, t792, t675, t676, t669, t660; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1160, 0, qJDD(1), 0, t1068, 0, t987, 0, t1050, -t1044, -t1058, -t1050, -t1060, 0, t952, t953, 0, -pkin(2) * t887, -t985, -t984, -t1023, t985, t1022, -qJDD(4), t764, t781, t799, t713, -t892, -t802, -t863, t890, -t864, -t908, t696, t698, t682, t671; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t986, -t987, 0, 0, t1057, t1049, 0, t1059, 0, 0, t1122, t1092, t1104, t1152, t882, t845, t875, t881, t874, t906, t1108, t1107, t1109, t1088, t778, t740, t751, t777, t752, t791, t1112, t1111, t1113, t1114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1058, t1060, t1050, 0, t1062, 0, 0, t970, t952, 0, t950, t920, t939, t948, t938, t968, t862, t885, t770, -pkin(6) * t785, t823, t788, t797, t822, t798, t872, t703, t705, t691, t681; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1058, -t1132, t1060, -t1050, 0, -t970, 0, t953, 0, t949, t918, t936, t947, t935, t967, t818, t843, t761, t776, t821, t787, t795, t820, t796, t871, t694, t697, t688, t674; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1050, t1044, t1058, t1050, t1060, 0, -t952, -t953, 0, 0, t985, t984, t1023, -t985, -t1022, qJDD(4), t1091, t1102, t1156, t1157, t892, t802, t863, -t890, t864, t908, t1100, t1099, t1089, t1103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t983, -t980, t1165, t1016, t1011, -t1016, 0, t951, t859, 0, t893, t804, t865, t891, t866, t909, t773, t775, t708, -pkin(7) * t720; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1135, t982, t1012, t981, t978, -t1135, -t951, 0, t860, 0, -t958, -t956, -t900, t958, t896, -t971, t748, t750, -pkin(4) * t803, -pkin(4) * t720; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t985, t984, t1023, -t985, -t1022, qJDD(4), -t859, -t860, 0, 0, t892, t802, t863, -t890, t864, t908, t1124, t1125, t1110, t1153; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t932, t897, t1169, t965, t961, -t965, 0, t813, t768, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t966, t899, t962, t931, t911, -t966, -t813, 0, t769, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t958, t956, t900, -t958, -t896, t971, -t768, -t769, 0, 0;];
m_new_reg = t1;
