% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPPRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:58
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPPRR6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR6_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR6_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR6_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPPRR6_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:58:38
% EndTime: 2019-12-31 17:58:41
% DurationCPUTime: 2.66s
% Computational Cost: add. (9714->204), mult. (21790->295), div. (0->0), fcn. (15319->10), ass. (0->164)
t1338 = sin(qJ(1));
t1341 = cos(qJ(1));
t1312 = -g(1) * t1341 - g(2) * t1338;
t1343 = qJD(1) ^ 2;
t1304 = -pkin(1) * t1343 + t1312;
t1332 = sin(pkin(8));
t1334 = cos(pkin(8));
t1311 = g(1) * t1338 - g(2) * t1341;
t1349 = qJDD(1) * pkin(1) + t1311;
t1280 = t1304 * t1334 + t1332 * t1349;
t1378 = -pkin(2) * t1343 + qJDD(1) * qJ(3) + (2 * qJD(3) * qJD(1)) + t1280;
t1331 = sin(pkin(9));
t1325 = t1331 ^ 2;
t1333 = cos(pkin(9));
t1326 = t1333 ^ 2;
t1360 = t1325 + t1326;
t1308 = t1360 * t1343;
t1337 = sin(qJ(4));
t1340 = cos(qJ(4));
t1295 = (t1331 * t1337 - t1333 * t1340) * qJD(1);
t1293 = qJD(5) + t1295;
t1377 = qJD(5) + t1293;
t1351 = t1331 * t1340 + t1333 * t1337;
t1376 = t1351 * qJDD(1);
t1297 = t1351 * qJD(1);
t1336 = sin(qJ(5));
t1339 = cos(qJ(5));
t1287 = -qJD(4) * t1339 + t1297 * t1336;
t1375 = t1287 ^ 2;
t1289 = qJD(4) * t1336 + t1297 * t1339;
t1374 = t1289 ^ 2;
t1373 = t1293 ^ 2;
t1372 = t1295 ^ 2;
t1371 = t1297 ^ 2;
t1369 = t1289 * t1287;
t1368 = t1295 * qJD(4);
t1367 = t1297 * qJD(4);
t1366 = t1297 * t1295;
t1365 = t1325 * t1343;
t1364 = t1326 * t1343;
t1328 = -g(3) + qJDD(2);
t1363 = t1333 * t1328;
t1362 = t1333 * t1343;
t1361 = qJD(5) - t1293;
t1265 = t1331 * t1328 + t1333 * t1378;
t1321 = t1333 * qJDD(1);
t1259 = -pkin(3) * t1364 + pkin(6) * t1321 + t1265;
t1346 = t1363 + (pkin(3) * t1362 - qJDD(1) * pkin(6) - t1378) * t1331;
t1237 = t1259 * t1340 + t1337 * t1346;
t1359 = t1331 * qJDD(1);
t1358 = t1332 * qJDD(1);
t1357 = t1334 * qJDD(1);
t1236 = -t1259 * t1337 + t1340 * t1346;
t1278 = t1376 - t1368;
t1355 = t1339 * qJDD(4) - t1336 * t1278;
t1279 = -t1332 * t1304 + t1334 * t1349;
t1306 = -t1334 * t1343 - t1358;
t1307 = -t1332 * t1343 + t1357;
t1354 = t1306 * t1341 - t1307 * t1338;
t1353 = -t1321 * t1340 + t1337 * t1359;
t1352 = t1306 * t1338 + t1307 * t1341;
t1350 = -t1336 * qJDD(4) - t1339 * t1278;
t1270 = -qJDD(1) * pkin(2) - t1343 * qJ(3) + qJDD(3) - t1279;
t1276 = t1353 + 0.2e1 * t1367;
t1347 = -qJDD(5) - t1353 - t1367;
t1263 = -pkin(3) * t1321 + t1270 + (-t1364 - t1365) * pkin(6);
t1342 = qJD(4) ^ 2;
t1313 = t1331 * t1362;
t1310 = -qJDD(1) * t1338 - t1341 * t1343;
t1309 = qJDD(1) * t1341 - t1338 * t1343;
t1305 = t1360 * qJDD(1);
t1303 = t1333 * t1308;
t1302 = t1331 * t1308;
t1290 = -t1342 - t1371;
t1286 = -t1303 * t1334 - t1321 * t1332;
t1285 = t1302 * t1334 + t1331 * t1358;
t1284 = -t1303 * t1332 + t1333 * t1357;
t1283 = t1302 * t1332 - t1331 * t1357;
t1282 = t1305 * t1334 - t1308 * t1332;
t1281 = t1305 * t1332 + t1308 * t1334;
t1277 = t1376 - 0.2e1 * t1368;
t1275 = -qJDD(4) - t1366;
t1274 = qJDD(4) - t1366;
t1273 = -t1342 - t1372;
t1272 = pkin(4) * t1295 - pkin(7) * t1297;
t1267 = -t1371 - t1372;
t1264 = -t1331 * t1378 + t1363;
t1262 = -t1373 - t1374;
t1261 = t1275 * t1340 - t1290 * t1337;
t1260 = t1275 * t1337 + t1290 * t1340;
t1258 = -t1373 - t1375;
t1256 = -t1279 * t1332 + t1280 * t1334;
t1255 = t1279 * t1334 + t1280 * t1332;
t1252 = -t1374 - t1375;
t1251 = t1337 * t1376 - t1340 * t1353;
t1250 = -t1337 * t1353 - t1340 * t1376;
t1249 = t1273 * t1340 - t1274 * t1337;
t1248 = t1273 * t1337 + t1274 * t1340;
t1247 = t1347 - t1369;
t1246 = -t1347 - t1369;
t1245 = t1287 * t1361 + t1350;
t1244 = -t1287 * t1377 - t1350;
t1243 = -t1289 * t1361 + t1355;
t1242 = t1289 * t1377 - t1355;
t1241 = -t1264 * t1331 + t1265 * t1333;
t1240 = t1264 * t1333 + t1265 * t1331;
t1239 = -t1260 * t1331 + t1261 * t1333;
t1238 = t1260 * t1333 + t1261 * t1331;
t1235 = t1247 * t1339 - t1262 * t1336;
t1234 = t1247 * t1336 + t1262 * t1339;
t1233 = -t1250 * t1331 + t1251 * t1333;
t1232 = t1250 * t1333 + t1251 * t1331;
t1231 = -t1246 * t1336 + t1258 * t1339;
t1230 = t1246 * t1339 + t1258 * t1336;
t1229 = -t1248 * t1331 + t1249 * t1333;
t1228 = t1248 * t1333 + t1249 * t1331;
t1227 = (-t1278 + t1368) * pkin(7) + t1276 * pkin(4) + t1263;
t1226 = t1241 * t1334 + t1270 * t1332;
t1225 = t1241 * t1332 - t1270 * t1334;
t1224 = t1239 * t1334 + t1277 * t1332;
t1223 = t1239 * t1332 - t1277 * t1334;
t1222 = -pkin(4) * t1342 + qJDD(4) * pkin(7) - t1272 * t1295 + t1237;
t1221 = -qJDD(4) * pkin(4) - pkin(7) * t1342 + t1272 * t1297 - t1236;
t1220 = t1229 * t1334 + t1276 * t1332;
t1219 = t1229 * t1332 - t1276 * t1334;
t1218 = t1233 * t1334 + t1267 * t1332;
t1217 = t1233 * t1332 - t1267 * t1334;
t1216 = t1243 * t1339 - t1245 * t1336;
t1215 = t1243 * t1336 + t1245 * t1339;
t1214 = t1235 * t1340 + t1244 * t1337;
t1213 = t1235 * t1337 - t1244 * t1340;
t1212 = t1231 * t1340 + t1242 * t1337;
t1211 = t1231 * t1337 - t1242 * t1340;
t1210 = -t1236 * t1337 + t1237 * t1340;
t1209 = t1236 * t1340 + t1237 * t1337;
t1208 = t1216 * t1340 + t1252 * t1337;
t1207 = t1216 * t1337 - t1252 * t1340;
t1206 = t1222 * t1339 + t1227 * t1336;
t1205 = -t1222 * t1336 + t1227 * t1339;
t1204 = -t1213 * t1331 + t1214 * t1333;
t1203 = t1213 * t1333 + t1214 * t1331;
t1202 = -t1211 * t1331 + t1212 * t1333;
t1201 = t1211 * t1333 + t1212 * t1331;
t1200 = -t1209 * t1331 + t1210 * t1333;
t1199 = t1209 * t1333 + t1210 * t1331;
t1198 = -t1207 * t1331 + t1208 * t1333;
t1197 = t1207 * t1333 + t1208 * t1331;
t1196 = t1200 * t1334 + t1263 * t1332;
t1195 = t1200 * t1332 - t1263 * t1334;
t1194 = t1204 * t1334 + t1234 * t1332;
t1193 = t1204 * t1332 - t1234 * t1334;
t1192 = t1202 * t1334 + t1230 * t1332;
t1191 = t1202 * t1332 - t1230 * t1334;
t1190 = -t1205 * t1336 + t1206 * t1339;
t1189 = t1205 * t1339 + t1206 * t1336;
t1188 = t1198 * t1334 + t1215 * t1332;
t1187 = t1198 * t1332 - t1215 * t1334;
t1186 = t1190 * t1340 + t1221 * t1337;
t1185 = t1190 * t1337 - t1221 * t1340;
t1184 = -t1185 * t1331 + t1186 * t1333;
t1183 = t1185 * t1333 + t1186 * t1331;
t1182 = t1184 * t1334 + t1189 * t1332;
t1181 = t1184 * t1332 - t1189 * t1334;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1310, -t1309, 0, -t1311 * t1338 + t1312 * t1341, 0, 0, 0, 0, 0, 0, t1354, -t1352, 0, -t1255 * t1338 + t1256 * t1341, 0, 0, 0, 0, 0, 0, -t1284 * t1338 + t1286 * t1341, -t1283 * t1338 + t1285 * t1341, -t1281 * t1338 + t1282 * t1341, -t1225 * t1338 + t1226 * t1341, 0, 0, 0, 0, 0, 0, -t1219 * t1338 + t1220 * t1341, -t1223 * t1338 + t1224 * t1341, -t1217 * t1338 + t1218 * t1341, -t1195 * t1338 + t1196 * t1341, 0, 0, 0, 0, 0, 0, -t1191 * t1338 + t1192 * t1341, -t1193 * t1338 + t1194 * t1341, -t1187 * t1338 + t1188 * t1341, -t1181 * t1338 + t1182 * t1341; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1309, t1310, 0, t1311 * t1341 + t1312 * t1338, 0, 0, 0, 0, 0, 0, t1352, t1354, 0, t1255 * t1341 + t1256 * t1338, 0, 0, 0, 0, 0, 0, t1284 * t1341 + t1286 * t1338, t1283 * t1341 + t1285 * t1338, t1281 * t1341 + t1282 * t1338, t1225 * t1341 + t1226 * t1338, 0, 0, 0, 0, 0, 0, t1219 * t1341 + t1220 * t1338, t1223 * t1341 + t1224 * t1338, t1217 * t1341 + t1218 * t1338, t1195 * t1341 + t1196 * t1338, 0, 0, 0, 0, 0, 0, t1191 * t1341 + t1192 * t1338, t1193 * t1341 + t1194 * t1338, t1187 * t1341 + t1188 * t1338, t1181 * t1341 + t1182 * t1338; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1328, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1240, 0, 0, 0, 0, 0, 0, t1228, t1238, t1232, t1199, 0, 0, 0, 0, 0, 0, t1201, t1203, t1197, t1183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1343, -qJDD(1), 0, t1312, 0, 0, 0, 0, 0, 0, t1306, -t1307, 0, t1256, 0, 0, 0, 0, 0, 0, t1286, t1285, t1282, t1226, 0, 0, 0, 0, 0, 0, t1220, t1224, t1218, t1196, 0, 0, 0, 0, 0, 0, t1192, t1194, t1188, t1182; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1343, 0, t1311, 0, 0, 0, 0, 0, 0, t1307, t1306, 0, t1255, 0, 0, 0, 0, 0, 0, t1284, t1283, t1281, t1225, 0, 0, 0, 0, 0, 0, t1219, t1223, t1217, t1195, 0, 0, 0, 0, 0, 0, t1191, t1193, t1187, t1181; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1328, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1240, 0, 0, 0, 0, 0, 0, t1228, t1238, t1232, t1199, 0, 0, 0, 0, 0, 0, t1201, t1203, t1197, t1183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1343, -qJDD(1), 0, t1280, 0, 0, 0, 0, 0, 0, -t1303, t1302, t1305, t1241, 0, 0, 0, 0, 0, 0, t1229, t1239, t1233, t1200, 0, 0, 0, 0, 0, 0, t1202, t1204, t1198, t1184; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1343, 0, t1279, 0, 0, 0, 0, 0, 0, t1321, -t1359, t1308, -t1270, 0, 0, 0, 0, 0, 0, -t1276, -t1277, -t1267, -t1263, 0, 0, 0, 0, 0, 0, -t1230, -t1234, -t1215, -t1189; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1328, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1240, 0, 0, 0, 0, 0, 0, t1228, t1238, t1232, t1199, 0, 0, 0, 0, 0, 0, t1201, t1203, t1197, t1183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1364, t1313, t1321, t1265, 0, 0, 0, 0, 0, 0, t1249, t1261, t1251, t1210, 0, 0, 0, 0, 0, 0, t1212, t1214, t1208, t1186; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1313, -t1365, -t1359, t1264, 0, 0, 0, 0, 0, 0, t1248, t1260, t1250, t1209, 0, 0, 0, 0, 0, 0, t1211, t1213, t1207, t1185; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1321, t1359, -t1308, t1270, 0, 0, 0, 0, 0, 0, t1276, t1277, t1267, t1263, 0, 0, 0, 0, 0, 0, t1230, t1234, t1215, t1189; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1273, t1275, -t1353, t1237, 0, 0, 0, 0, 0, 0, t1231, t1235, t1216, t1190; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1274, t1290, -t1376, t1236, 0, 0, 0, 0, 0, 0, -t1242, -t1244, -t1252, -t1221; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1276, t1277, t1267, t1263, 0, 0, 0, 0, 0, 0, t1230, t1234, t1215, t1189; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1258, t1247, t1243, t1206; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1246, t1262, t1245, t1205; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1242, t1244, t1252, t1221;];
f_new_reg = t1;
