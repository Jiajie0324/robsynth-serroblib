% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:58
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPPRR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR6_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR6_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPPRR6_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:58:14
% EndTime: 2019-12-31 17:58:25
% DurationCPUTime: 10.39s
% Computational Cost: add. (36890->561), mult. (82422->857), div. (0->0), fcn. (57549->10), ass. (0->380)
t580 = cos(qJ(1));
t577 = sin(qJ(1));
t547 = t580 * g(1) + t577 * g(2);
t638 = qJD(1) ^ 2;
t536 = -t638 * pkin(1) - t547;
t571 = sin(pkin(8));
t573 = cos(pkin(8));
t546 = t577 * g(1) - t580 * g(2);
t588 = qJDD(1) * pkin(1) + t546;
t485 = t571 * t536 - t573 * t588;
t626 = t573 * t536;
t486 = t571 * t588 + t626;
t596 = t571 * t485 + t573 * t486;
t432 = t573 * t485 - t571 * t486;
t621 = t577 * t432;
t377 = t580 * t596 + t621;
t614 = t580 * t432;
t656 = -t577 * t596 + t614;
t606 = t571 * qJDD(1);
t539 = t573 * t638 + t606;
t605 = t573 * qJDD(1);
t609 = t571 * t638;
t540 = t605 - t609;
t491 = -t577 * t539 + t580 * t540;
t567 = g(3) - qJDD(2);
t514 = qJ(2) * t539 - t573 * t567;
t592 = -qJ(2) * t540 - t571 * t567;
t655 = -pkin(5) * t491 + t577 * t514 + t580 * t592;
t575 = sin(qJ(5));
t570 = sin(pkin(9));
t572 = cos(pkin(9));
t576 = sin(qJ(4));
t579 = cos(qJ(4));
t589 = t570 * t579 + t572 * t576;
t529 = t589 * qJD(1);
t578 = cos(qJ(5));
t506 = -t578 * qJD(4) + t575 * t529;
t508 = t575 * qJD(4) + t578 * t529;
t463 = t508 * t506;
t607 = qJDD(1) * t572;
t631 = t570 * t576;
t525 = qJDD(1) * t631 - t579 * t607;
t611 = t529 * qJD(4);
t480 = -t525 - t611;
t586 = qJDD(5) - t480;
t644 = -t463 + t586;
t654 = t575 * t644;
t613 = qJD(1) * t572;
t527 = qJD(1) * t631 - t579 * t613;
t484 = t529 * t527;
t641 = qJDD(4) - t484;
t653 = t576 * t641;
t652 = t578 * t644;
t651 = t579 * t641;
t565 = t572 ^ 2;
t558 = t565 * t638;
t564 = t570 ^ 2;
t610 = t564 * t638;
t542 = t558 + t610;
t643 = t580 * t539 + t577 * t540;
t649 = pkin(5) * t643 + t580 * t514 - t577 * t592;
t640 = t638 * (t564 + t565);
t534 = t572 * t640;
t598 = t572 * t605;
t498 = -t571 * t534 + t598;
t500 = t573 * t534 + t572 * t606;
t449 = t580 * t498 - t577 * t500;
t648 = t577 * t498 + t580 * t500;
t521 = qJD(5) + t527;
t466 = t521 * t506;
t612 = t527 * qJD(4);
t642 = t589 * qJDD(1);
t482 = t642 - t612;
t600 = t506 * qJD(5) - t575 * qJDD(4) - t578 * t482;
t411 = t600 + t466;
t595 = -t578 * qJDD(4) + t575 * t482;
t406 = (qJD(5) - t521) * t508 + t595;
t504 = t506 ^ 2;
t505 = t508 ^ 2;
t520 = t521 ^ 2;
t523 = t527 ^ 2;
t524 = t529 ^ 2;
t637 = 2 * qJD(3);
t636 = pkin(4) * t576;
t569 = qJDD(1) * pkin(2);
t635 = t521 * t575;
t634 = t521 * t578;
t585 = qJDD(1) * qJ(3) + t486;
t459 = t572 * (-t638 * pkin(2) + t585) - t570 * t567 + t613 * t637;
t438 = -pkin(3) * t558 + pkin(6) * t607 + t459;
t628 = t572 * t567;
t584 = -t628 + (-t626 - t571 * t546 + (-t571 * pkin(1) - pkin(6) - qJ(3)) * qJDD(1) + (-(2 * qJD(3)) + (t572 * pkin(3) + pkin(2)) * qJD(1)) * qJD(1)) * t570;
t379 = t576 * t438 - t579 * t584;
t380 = t579 * t438 + t576 * t584;
t317 = -t579 * t379 + t576 * t380;
t633 = t570 * t317;
t632 = t570 * t572;
t470 = -t638 * qJ(3) + qJDD(3) + t485 - t569;
t630 = t571 * t470;
t629 = t572 * t317;
t627 = t573 * t470;
t473 = t527 * pkin(4) - t529 * pkin(7);
t581 = qJD(4) ^ 2;
t340 = -qJDD(4) * pkin(4) - t581 * pkin(7) + t529 * t473 + t379;
t625 = t575 * t340;
t418 = t463 + t586;
t624 = t575 * t418;
t457 = -pkin(3) * t607 - t542 * pkin(6) + t470;
t623 = t576 * t457;
t477 = qJDD(4) + t484;
t622 = t576 * t477;
t618 = t578 * t340;
t617 = t578 * t418;
t616 = t579 * t457;
t615 = t579 * t477;
t341 = -t581 * pkin(4) + qJDD(4) * pkin(7) - t527 * t473 + t380;
t355 = (-t482 + t612) * pkin(7) + (-t480 + t611) * pkin(4) + t457;
t301 = t578 * t341 + t575 * t355;
t604 = t571 * t484;
t603 = t573 * t484;
t602 = t576 * t463;
t601 = t579 * t463;
t599 = -pkin(4) * t579 - pkin(3);
t597 = -t470 + t569;
t300 = t575 * t341 - t578 * t355;
t318 = t576 * t379 + t579 * t380;
t458 = t628 + ((-pkin(2) * qJD(1) + t637) * qJD(1) + t585) * t570;
t401 = t570 * t458 + t572 * t459;
t503 = -t577 * t546 - t580 * t547;
t545 = t580 * qJDD(1) - t577 * t638;
t593 = -pkin(5) * t545 - t577 * g(3);
t261 = -t578 * t300 + t575 * t301;
t262 = t575 * t300 + t578 * t301;
t400 = t572 * t458 - t570 * t459;
t509 = t539 * t632;
t510 = t570 * t598 - t609 * t632;
t591 = t580 * t509 + t577 * t510;
t590 = t577 * t509 - t580 * t510;
t502 = t580 * t546 - t577 * t547;
t556 = t565 * qJDD(1);
t555 = t564 * qJDD(1);
t544 = t577 * qJDD(1) + t580 * t638;
t543 = t558 - t610;
t538 = t556 - t555;
t537 = t556 + t555;
t533 = t570 * t640;
t522 = -pkin(5) * t544 + t580 * g(3);
t517 = -t524 - t581;
t516 = -t524 + t581;
t515 = t523 - t581;
t499 = t573 * t533 + t570 * t606;
t496 = t571 * t533 - t570 * t605;
t490 = t573 * t538 - t571 * t543;
t489 = t573 * t537 - t571 * t542;
t488 = t571 * t538 + t573 * t543;
t487 = t571 * t537 + t573 * t542;
t483 = -t524 + t523;
t481 = t642 - 0.2e1 * t612;
t479 = t525 + 0.2e1 * t611;
t475 = -t581 - t523;
t469 = (-t527 * t579 + t529 * t576) * qJD(4);
t468 = (-t527 * t576 - t529 * t579) * qJD(4);
t465 = -t505 + t520;
t464 = t504 - t520;
t462 = -t523 - t524;
t461 = -t505 + t504;
t456 = t579 * t482 - t576 * t611;
t455 = t576 * t482 + t579 * t611;
t454 = -t576 * t480 + t579 * t612;
t453 = t579 * t480 + t576 * t612;
t450 = -t577 * t496 + t580 * t499;
t448 = t580 * t496 + t577 * t499;
t447 = -t505 - t520;
t446 = -t576 * t517 - t615;
t445 = -t576 * t516 + t651;
t444 = t579 * t515 - t622;
t443 = t579 * t517 - t622;
t442 = t579 * t516 + t653;
t441 = t576 * t515 + t615;
t440 = -t577 * t487 + t580 * t489;
t439 = t580 * t487 + t577 * t489;
t437 = -t520 - t504;
t435 = -t508 * qJD(5) - t595;
t427 = t504 + t505;
t426 = -t579 * t479 - t576 * t481;
t425 = -t525 * t579 + t576 * t642;
t424 = -t576 * t479 + t579 * t481;
t423 = -t525 * t576 - t579 * t642;
t422 = t579 * t475 - t653;
t421 = t576 * t475 + t651;
t420 = pkin(1) * t567 + qJ(2) * t596;
t416 = (-t506 * t578 + t508 * t575) * t521;
t415 = (t506 * t575 + t508 * t578) * t521;
t414 = -t570 * t468 + t572 * t469;
t413 = t571 * qJDD(4) + t573 * t414;
t412 = -t573 * qJDD(4) + t571 * t414;
t410 = -t466 + t600;
t407 = (-qJD(5) - t521) * t508 - t595;
t405 = -t508 * t635 - t578 * t600;
t404 = -t508 * t634 + t575 * t600;
t403 = -t575 * t435 + t506 * t634;
t402 = -t578 * t435 - t506 * t635;
t398 = -pkin(6) * t443 + t616;
t397 = -t570 * t455 + t572 * t456;
t396 = -t570 * t453 + t572 * t454;
t395 = -t570 * t443 + t572 * t446;
t394 = -t570 * t442 + t572 * t445;
t393 = -t570 * t441 + t572 * t444;
t392 = t572 * t443 + t570 * t446;
t391 = t579 * t416 + t576 * t586;
t390 = t576 * t416 - t579 * t586;
t389 = -qJ(2) * t496 - t571 * t459 + t572 * t627;
t388 = -qJ(2) * t498 - t571 * t458 + t570 * t627;
t387 = qJ(2) * t499 + t573 * t459 + t572 * t630;
t386 = -qJ(2) * t500 + t573 * t458 + t570 * t630;
t385 = t578 * t464 - t624;
t384 = -t575 * t465 + t652;
t383 = -t575 * t464 - t617;
t382 = -t578 * t465 - t654;
t381 = -pkin(6) * t421 + t623;
t375 = -t575 * t447 - t617;
t374 = t578 * t447 - t624;
t373 = t573 * t394 + t571 * t642;
t372 = t573 * t393 - t571 * t525;
t371 = t571 * t394 - t573 * t642;
t370 = t571 * t393 + t573 * t525;
t369 = -qJ(2) * t487 + t573 * t400;
t368 = qJ(2) * t489 + t571 * t400;
t367 = -t570 * t424 + t572 * t426;
t366 = -t570 * t423 + t572 * t425;
t365 = t572 * t423 + t570 * t425;
t364 = -pkin(3) * t481 + pkin(6) * t446 + t623;
t363 = t578 * t437 - t654;
t362 = t575 * t437 + t652;
t361 = -t570 * t421 + t572 * t422;
t360 = t572 * t421 + t570 * t422;
t359 = t573 * t397 + t604;
t358 = t573 * t396 - t604;
t357 = t571 * t397 - t603;
t356 = t571 * t396 + t603;
t354 = t573 * t401 + t630;
t353 = t571 * t401 - t627;
t350 = t573 * t395 + t571 * t481;
t349 = t571 * t395 - t573 * t481;
t348 = t579 * t405 + t602;
t347 = t579 * t403 - t602;
t346 = t576 * t405 - t601;
t345 = t576 * t403 + t601;
t344 = -pkin(3) * t479 + pkin(6) * t422 - t616;
t343 = t573 * t367 - t571 * t483;
t342 = t571 * t367 + t573 * t483;
t339 = t573 * t361 + t571 * t479;
t338 = t571 * t361 - t573 * t479;
t336 = t573 * t366 + t571 * t462;
t335 = t571 * t366 - t573 * t462;
t334 = -t406 * t578 - t575 * t410;
t333 = t578 * t407 + t411 * t575;
t332 = -t406 * t575 + t578 * t410;
t331 = -t575 * t407 + t411 * t578;
t330 = -pkin(2) * t365 - pkin(3) * t423;
t329 = t579 * t385 - t576 * t406;
t328 = t579 * t384 - t576 * t410;
t327 = t576 * t385 + t579 * t406;
t326 = t576 * t384 + t579 * t410;
t325 = t579 * t375 - t576 * t411;
t324 = t576 * t375 + t579 * t411;
t323 = -t570 * t390 + t572 * t391;
t322 = t579 * t363 - t576 * t407;
t321 = t576 * t363 + t579 * t407;
t320 = t579 * t333 - t576 * t461;
t319 = t576 * t333 + t579 * t461;
t316 = t579 * t334 - t576 * t427;
t315 = t576 * t334 + t579 * t427;
t314 = -pkin(2) * t392 - pkin(3) * t443 + t380;
t313 = -t577 * t353 + t580 * t354;
t312 = t580 * t353 + t577 * t354;
t311 = -t577 * t349 + t580 * t350;
t310 = t580 * t349 + t577 * t350;
t309 = -t570 * t346 + t572 * t348;
t308 = -t570 * t345 + t572 * t347;
t307 = -pkin(3) * t457 + pkin(6) * t318;
t306 = -pkin(7) * t374 + t618;
t305 = -pkin(7) * t362 + t625;
t304 = t573 * t323 - t571 * t415;
t303 = t571 * t323 + t573 * t415;
t302 = -pkin(6) * t423 - t317;
t299 = -pkin(2) * t360 - pkin(3) * t421 + t379;
t298 = -t577 * t338 + t580 * t339;
t297 = t580 * t338 + t577 * t339;
t296 = -qJ(2) * t353 - (pkin(2) * t571 - qJ(3) * t573) * t400;
t295 = -qJ(3) * t392 - t570 * t364 + t572 * t398;
t294 = -pkin(3) * t462 + pkin(6) * t425 + t318;
t293 = -t577 * t335 + t580 * t336;
t292 = t580 * t335 + t577 * t336;
t291 = t573 * t309 - t571 * t404;
t290 = t573 * t308 - t571 * t402;
t289 = t571 * t309 + t573 * t404;
t288 = t571 * t308 + t573 * t402;
t287 = -qJ(3) * t360 - t570 * t344 + t572 * t381;
t286 = -t570 * t327 + t572 * t329;
t285 = -t570 * t326 + t572 * t328;
t284 = -pkin(4) * t374 + t301;
t283 = qJ(2) * t354 - (-pkin(2) * t573 - qJ(3) * t571 - pkin(1)) * t400;
t282 = -pkin(4) * t362 + t300;
t281 = -t570 * t324 + t572 * t325;
t280 = t572 * t324 + t570 * t325;
t279 = -t570 * t321 + t572 * t322;
t278 = t572 * t321 + t570 * t322;
t277 = -t570 * t319 + t572 * t320;
t276 = t572 * t318 - t633;
t275 = t570 * t318 + t629;
t274 = -t570 * t315 + t572 * t316;
t273 = t572 * t315 + t570 * t316;
t272 = t573 * t286 - t571 * t383;
t271 = t573 * t285 - t571 * t382;
t270 = t571 * t286 + t573 * t383;
t269 = t571 * t285 + t573 * t382;
t268 = t573 * t276 + t571 * t457;
t267 = t571 * t276 - t573 * t457;
t266 = t573 * t281 + t571 * t374;
t265 = t571 * t281 - t573 * t374;
t264 = t573 * t279 + t571 * t362;
t263 = t571 * t279 - t573 * t362;
t260 = t573 * t277 - t571 * t331;
t259 = t571 * t277 + t573 * t331;
t258 = t573 * t274 + t571 * t332;
t257 = t571 * t274 - t573 * t332;
t256 = -pkin(2) * t275 - pkin(3) * t317;
t255 = -qJ(2) * t349 + t573 * t295 - t571 * t314;
t254 = -qJ(3) * t365 - t570 * t294 + t572 * t302;
t253 = t579 * t262 + t576 * t340;
t252 = t576 * t262 - t579 * t340;
t251 = -pkin(7) * t332 - t261;
t250 = -pkin(1) * t392 + qJ(2) * t350 + t571 * t295 + t573 * t314;
t249 = -qJ(2) * t338 + t573 * t287 - t571 * t299;
t248 = -pkin(6) * t324 - t576 * t284 + t579 * t306;
t247 = -pkin(6) * t321 - t576 * t282 + t579 * t305;
t246 = -pkin(1) * t360 + qJ(2) * t339 + t571 * t287 + t573 * t299;
t245 = -pkin(6) * t629 - qJ(3) * t275 - t570 * t307;
t244 = -pkin(2) * t280 - pkin(3) * t324 - pkin(4) * t411 - pkin(7) * t375 - t625;
t243 = -pkin(3) * t374 + pkin(6) * t325 + t579 * t284 + t576 * t306;
t242 = -pkin(2) * t278 - pkin(3) * t321 - pkin(4) * t407 - pkin(7) * t363 + t618;
t241 = -t577 * t267 + t580 * t268;
t240 = t580 * t267 + t577 * t268;
t239 = -pkin(3) * t362 + pkin(6) * t322 + t579 * t282 + t576 * t305;
t238 = -qJ(2) * t335 + t573 * t254 - t571 * t330;
t237 = -t577 * t265 + t580 * t266;
t236 = t580 * t265 + t577 * t266;
t235 = -t577 * t263 + t580 * t264;
t234 = t580 * t263 + t577 * t264;
t233 = -pkin(6) * t315 + t579 * t251 + t332 * t636;
t232 = -pkin(1) * t365 + qJ(2) * t336 + t571 * t254 + t573 * t330;
t231 = -t577 * t257 + t580 * t258;
t230 = t580 * t257 + t577 * t258;
t229 = pkin(6) * t316 + t576 * t251 + t599 * t332;
t228 = -t570 * t252 + t572 * t253;
t227 = t572 * t252 + t570 * t253;
t226 = -pkin(2) * t273 - pkin(3) * t315 - pkin(4) * t427 - pkin(7) * t334 - t262;
t225 = -pkin(6) * t252 + (-pkin(7) * t579 + t636) * t261;
t224 = t573 * t228 + t571 * t261;
t223 = t571 * t228 - t573 * t261;
t222 = -qJ(2) * t267 + t573 * t245 - t571 * t256;
t221 = -qJ(3) * t280 - t570 * t243 + t572 * t248;
t220 = -qJ(3) * t278 - t570 * t239 + t572 * t247;
t219 = pkin(6) * t253 + (-pkin(7) * t576 + t599) * t261;
t218 = -pkin(1) * t275 + qJ(2) * t268 + t571 * t245 + t573 * t256;
t217 = -pkin(2) * t227 - pkin(3) * t252 + pkin(4) * t340 - pkin(7) * t262;
t216 = -qJ(3) * t273 - t570 * t229 + t572 * t233;
t215 = -qJ(2) * t265 + t573 * t221 - t571 * t244;
t214 = -qJ(2) * t263 + t573 * t220 - t571 * t242;
t213 = -t577 * t223 + t580 * t224;
t212 = t580 * t223 + t577 * t224;
t211 = -pkin(1) * t280 + qJ(2) * t266 + t571 * t221 + t573 * t244;
t210 = -pkin(1) * t278 + qJ(2) * t264 + t571 * t220 + t573 * t242;
t209 = -qJ(2) * t257 + t573 * t216 - t571 * t226;
t208 = -pkin(1) * t273 + qJ(2) * t258 + t571 * t216 + t573 * t226;
t207 = -qJ(3) * t227 - t570 * t219 + t572 * t225;
t206 = -qJ(2) * t223 + t573 * t207 - t571 * t217;
t205 = -pkin(1) * t227 + qJ(2) * t224 + t571 * t207 + t573 * t217;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t544, -t545, 0, t503, 0, 0, 0, 0, 0, 0, -t643, -t491, 0, t377, 0, 0, 0, 0, 0, 0, -t648, t450, t440, t313, 0, 0, 0, 0, 0, 0, t298, t311, t293, t241, 0, 0, 0, 0, 0, 0, t235, t237, t231, t213; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t545, -t544, 0, t502, 0, 0, 0, 0, 0, 0, t491, -t643, 0, -t656, 0, 0, 0, 0, 0, 0, t449, t448, t439, t312, 0, 0, 0, 0, 0, 0, t297, t310, t292, t240, 0, 0, 0, 0, 0, 0, t234, t236, t230, t212; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t567, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t400, 0, 0, 0, 0, 0, 0, t360, t392, t365, t275, 0, 0, 0, 0, 0, 0, t278, t280, t273, t227; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t545, 0, -t544, 0, t593, -t522, -t502, -pkin(5) * t502, 0, 0, t491, 0, -t643, 0, t655, t649, t656, pkin(5) * t656 + qJ(2) * t614 - t577 * t420, -t590, -t577 * t488 + t580 * t490, t450, t590, t648, 0, -pkin(5) * t449 - t577 * t386 + t580 * t388, -pkin(5) * t448 - t577 * t387 + t580 * t389, -pkin(5) * t439 - t577 * t368 + t580 * t369, -pkin(5) * t312 - t577 * t283 + t580 * t296, -t577 * t357 + t580 * t359, -t577 * t342 + t580 * t343, -t577 * t371 + t580 * t373, -t577 * t356 + t580 * t358, -t577 * t370 + t580 * t372, -t577 * t412 + t580 * t413, -pkin(5) * t297 - t577 * t246 + t580 * t249, -pkin(5) * t310 - t577 * t250 + t580 * t255, -pkin(5) * t292 - t577 * t232 + t580 * t238, -pkin(5) * t240 - t577 * t218 + t580 * t222, -t577 * t289 + t580 * t291, -t577 * t259 + t580 * t260, -t577 * t269 + t580 * t271, -t577 * t288 + t580 * t290, -t577 * t270 + t580 * t272, -t577 * t303 + t580 * t304, -pkin(5) * t234 - t577 * t210 + t580 * t214, -pkin(5) * t236 - t577 * t211 + t580 * t215, -pkin(5) * t230 - t577 * t208 + t580 * t209, -pkin(5) * t212 - t577 * t205 + t580 * t206; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t544, 0, t545, 0, t522, t593, t503, pkin(5) * t503, 0, 0, t643, 0, t491, 0, -t649, t655, t377, pkin(5) * t377 + qJ(2) * t621 + t580 * t420, t591, t580 * t488 + t577 * t490, t448, -t591, -t449, 0, -pkin(5) * t648 + t580 * t386 + t577 * t388, pkin(5) * t450 + t580 * t387 + t577 * t389, pkin(5) * t440 + t580 * t368 + t577 * t369, pkin(5) * t313 + t580 * t283 + t577 * t296, t580 * t357 + t577 * t359, t580 * t342 + t577 * t343, t580 * t371 + t577 * t373, t580 * t356 + t577 * t358, t580 * t370 + t577 * t372, t580 * t412 + t577 * t413, pkin(5) * t298 + t580 * t246 + t577 * t249, pkin(5) * t311 + t580 * t250 + t577 * t255, pkin(5) * t293 + t580 * t232 + t577 * t238, pkin(5) * t241 + t580 * t218 + t577 * t222, t580 * t289 + t577 * t291, t580 * t259 + t577 * t260, t580 * t269 + t577 * t271, t580 * t288 + t577 * t290, t580 * t270 + t577 * t272, t580 * t303 + t577 * t304, pkin(5) * t235 + t580 * t210 + t577 * t214, pkin(5) * t237 + t580 * t211 + t577 * t215, pkin(5) * t231 + t580 * t208 + t577 * t209, pkin(5) * t213 + t580 * t205 + t577 * t206; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t546, t547, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t540 - t485, -pkin(1) * t539 - t486, 0, -pkin(1) * t432, t555, 0.2e1 * t570 * t607, 0, t556, 0, 0, pkin(1) * t498 - qJ(3) * t534 + t597 * t572, pkin(1) * t496 + qJ(3) * t533 - t597 * t570, pkin(1) * t487 + pkin(2) * t542 + qJ(3) * t537 + t401, pkin(1) * t353 - pkin(2) * t470 + qJ(3) * t401, t572 * t455 + t570 * t456, t572 * t424 + t570 * t426, t572 * t442 + t570 * t445, t572 * t453 + t570 * t454, t572 * t441 + t570 * t444, t572 * t468 + t570 * t469, pkin(1) * t338 - pkin(2) * t479 + qJ(3) * t361 + t572 * t344 + t570 * t381, pkin(1) * t349 - pkin(2) * t481 + qJ(3) * t395 + t572 * t364 + t570 * t398, pkin(1) * t335 - pkin(2) * t462 + qJ(3) * t366 + t572 * t294 + t570 * t302, pkin(1) * t267 - pkin(2) * t457 - pkin(6) * t633 + qJ(3) * t276 + t572 * t307, t572 * t346 + t570 * t348, t572 * t319 + t570 * t320, t572 * t326 + t570 * t328, t572 * t345 + t570 * t347, t572 * t327 + t570 * t329, t572 * t390 + t570 * t391, pkin(1) * t263 - pkin(2) * t362 + qJ(3) * t279 + t572 * t239 + t570 * t247, pkin(1) * t265 - pkin(2) * t374 + qJ(3) * t281 + t572 * t243 + t570 * t248, pkin(1) * t257 - pkin(2) * t332 + qJ(3) * t274 + t572 * t229 + t570 * t233, pkin(1) * t223 - pkin(2) * t261 + qJ(3) * t228 + t572 * t219 + t570 * t225;];
tauB_reg = t1;
