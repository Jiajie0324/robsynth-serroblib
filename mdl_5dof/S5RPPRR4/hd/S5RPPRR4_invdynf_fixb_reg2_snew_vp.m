% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPPRR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:32
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPPRR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR4_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR4_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPPRR4_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:32:22
% EndTime: 2020-01-03 11:32:27
% DurationCPUTime: 4.31s
% Computational Cost: add. (17260->244), mult. (47949->356), div. (0->0), fcn. (33988->10), ass. (0->199)
t1502 = sin(qJ(1));
t1505 = cos(qJ(1));
t1480 = -t1505 * g(2) - t1502 * g(3);
t1506 = qJD(1) ^ 2;
t1459 = -qJDD(1) * pkin(1) - t1506 * qJ(2) + qJDD(2) - t1480;
t1497 = sin(pkin(8));
t1499 = cos(pkin(8));
t1516 = -pkin(2) * t1499 - qJ(3) * t1497;
t1542 = qJD(1) * t1497;
t1526 = -0.2e1 * t1542;
t1553 = qJD(3) * t1526 + t1516 * qJDD(1) + t1459;
t1491 = t1497 ^ 2;
t1493 = t1499 ^ 2;
t1530 = t1491 + t1493;
t1472 = t1530 * t1506;
t1541 = qJD(1) * t1499;
t1485 = -qJD(4) + t1541;
t1482 = -qJD(5) + t1485;
t1552 = qJD(5) - t1482;
t1496 = sin(pkin(9));
t1498 = cos(pkin(9));
t1501 = sin(qJ(4));
t1504 = cos(qJ(4));
t1515 = t1496 * t1504 + t1498 * t1501;
t1512 = t1515 * t1497;
t1451 = qJD(1) * t1512;
t1536 = t1497 * t1498;
t1523 = t1504 * t1536;
t1453 = -t1501 * t1496 * t1542 + qJD(1) * t1523;
t1500 = sin(qJ(5));
t1503 = cos(qJ(5));
t1427 = t1503 * t1451 + t1453 * t1500;
t1551 = t1427 ^ 2;
t1429 = -t1451 * t1500 + t1453 * t1503;
t1550 = t1429 ^ 2;
t1549 = t1451 ^ 2;
t1548 = t1453 ^ 2;
t1547 = t1482 ^ 2;
t1546 = t1485 ^ 2;
t1545 = t1496 ^ 2;
t1544 = 2 * qJD(2);
t1543 = t1499 * g(1);
t1540 = t1427 * t1429;
t1539 = t1451 * t1453;
t1538 = t1451 * t1485;
t1537 = t1491 * t1506;
t1535 = t1499 * t1506;
t1469 = t1516 * qJD(1);
t1534 = t1544 + t1469;
t1533 = qJD(4) + t1485;
t1532 = qJD(5) + t1482;
t1479 = -g(2) * t1502 + t1505 * g(3);
t1463 = -pkin(1) * t1506 + qJDD(1) * qJ(2) + t1479;
t1446 = -g(1) * t1497 + t1499 * t1463 + t1541 * t1544;
t1432 = t1469 * t1541 + t1446;
t1514 = -pkin(3) * t1499 - pkin(6) * t1536;
t1531 = t1553 * t1498;
t1396 = t1514 * qJDD(1) + (-t1432 + (-pkin(3) * t1491 * t1498 + pkin(6) * t1497 * t1499) * t1506) * t1496 + t1531;
t1406 = t1498 * t1432 + t1553 * t1496;
t1464 = t1514 * qJD(1);
t1525 = t1496 * t1537;
t1528 = t1497 * qJDD(1);
t1397 = t1464 * t1541 + (-pkin(3) * t1525 - pkin(6) * t1528) * t1496 + t1406;
t1372 = t1501 * t1396 + t1504 * t1397;
t1529 = qJDD(1) * t1498;
t1489 = t1499 * qJDD(1);
t1527 = t1489 - qJDD(4);
t1524 = t1496 * t1535;
t1484 = t1497 * t1535;
t1522 = t1496 * t1528;
t1521 = -qJDD(5) + t1527;
t1520 = qJDD(3) + t1543;
t1371 = t1504 * t1396 - t1501 * t1397;
t1513 = -qJDD(1) * t1523 + t1501 * t1522;
t1436 = -qJD(4) * t1451 - t1513;
t1511 = qJDD(1) * t1512;
t1510 = t1453 * qJD(4) + t1511;
t1518 = -t1500 * t1436 - t1503 * t1510;
t1517 = t1498 * t1525;
t1426 = -t1527 - t1539;
t1509 = -t1503 * t1436 + t1500 * t1510;
t1407 = -t1545 * pkin(6) * t1537 + (pkin(3) * qJDD(1) * t1496 + t1463 + (t1464 * t1498 + t1534) * qJD(1)) * t1497 + t1520;
t1492 = t1498 ^ 2;
t1476 = qJDD(1) * t1505 - t1502 * t1506;
t1475 = -qJDD(1) * t1502 - t1505 * t1506;
t1471 = t1498 * t1484;
t1470 = t1530 * qJDD(1);
t1468 = t1499 * t1472;
t1467 = (-t1491 * t1492 - t1493) * t1506;
t1466 = t1497 * t1472;
t1465 = (-t1491 * t1545 - t1493) * t1506;
t1462 = (t1492 + t1545) * t1537;
t1461 = -t1489 - t1517;
t1460 = t1489 - t1517;
t1457 = (t1524 - t1529) * t1497;
t1456 = (t1524 + t1529) * t1497;
t1455 = -t1471 - t1522;
t1454 = -t1471 + t1522;
t1445 = qJD(2) * t1526 - t1497 * t1463 - t1543;
t1444 = -pkin(4) * t1485 - pkin(7) * t1453;
t1441 = -t1546 - t1548;
t1440 = t1460 * t1498 - t1467 * t1496;
t1439 = -t1461 * t1496 + t1465 * t1498;
t1438 = t1460 * t1496 + t1467 * t1498;
t1437 = t1461 * t1498 + t1465 * t1496;
t1435 = t1455 * t1498 - t1457 * t1496;
t1434 = t1455 * t1496 + t1457 * t1498;
t1430 = (t1534 * qJD(1) + t1463) * t1497 + t1520;
t1425 = t1527 - t1539;
t1423 = -t1546 - t1549;
t1421 = t1440 * t1499 + t1456 * t1497;
t1420 = t1439 * t1499 + t1454 * t1497;
t1419 = t1440 * t1497 - t1456 * t1499;
t1418 = t1439 * t1497 - t1454 * t1499;
t1417 = -t1548 - t1549;
t1416 = -t1445 * t1497 + t1446 * t1499;
t1415 = t1445 * t1499 + t1446 * t1497;
t1414 = -t1547 - t1550;
t1413 = t1435 * t1499 - t1462 * t1497;
t1412 = t1435 * t1497 + t1462 * t1499;
t1411 = t1533 * t1451 + t1513;
t1410 = t1436 + t1538;
t1409 = -t1533 * t1453 - t1511;
t1408 = (qJD(4) - t1485) * t1453 + t1515 * t1528;
t1405 = -t1496 * t1432 + t1531;
t1404 = t1425 * t1504 - t1441 * t1501;
t1403 = t1425 * t1501 + t1441 * t1504;
t1402 = -t1521 - t1540;
t1401 = t1521 - t1540;
t1400 = t1423 * t1504 - t1426 * t1501;
t1399 = t1423 * t1501 + t1426 * t1504;
t1398 = -t1547 - t1551;
t1392 = -t1550 - t1551;
t1391 = t1409 * t1504 - t1411 * t1501;
t1390 = t1409 * t1501 + t1411 * t1504;
t1389 = t1401 * t1503 - t1414 * t1500;
t1388 = t1401 * t1500 + t1414 * t1503;
t1387 = -t1405 * t1496 + t1406 * t1498;
t1386 = t1405 * t1498 + t1406 * t1496;
t1385 = -t1403 * t1496 + t1404 * t1498;
t1384 = t1403 * t1498 + t1404 * t1496;
t1383 = t1532 * t1427 + t1509;
t1382 = -t1552 * t1427 - t1509;
t1381 = -t1532 * t1429 + t1518;
t1380 = t1552 * t1429 - t1518;
t1379 = t1510 * pkin(4) - t1549 * pkin(7) + t1453 * t1444 + t1407;
t1378 = t1398 * t1503 - t1402 * t1500;
t1377 = t1398 * t1500 + t1402 * t1503;
t1376 = -t1399 * t1496 + t1400 * t1498;
t1375 = t1399 * t1498 + t1400 * t1496;
t1374 = t1387 * t1499 + t1430 * t1497;
t1373 = t1387 * t1497 - t1430 * t1499;
t1370 = t1385 * t1499 + t1410 * t1497;
t1369 = t1385 * t1497 - t1410 * t1499;
t1368 = t1376 * t1499 + t1408 * t1497;
t1367 = t1376 * t1497 - t1408 * t1499;
t1366 = -t1390 * t1496 + t1391 * t1498;
t1365 = t1390 * t1498 + t1391 * t1496;
t1364 = -t1388 * t1501 + t1389 * t1504;
t1363 = t1388 * t1504 + t1389 * t1501;
t1362 = -t1549 * pkin(4) - t1510 * pkin(7) + t1485 * t1444 + t1372;
t1361 = t1366 * t1499 + t1417 * t1497;
t1360 = t1366 * t1497 - t1417 * t1499;
t1359 = (-t1436 + t1538) * pkin(7) + t1426 * pkin(4) + t1371;
t1358 = t1381 * t1503 - t1383 * t1500;
t1357 = t1381 * t1500 + t1383 * t1503;
t1356 = -t1377 * t1501 + t1378 * t1504;
t1355 = t1377 * t1504 + t1378 * t1501;
t1354 = -t1371 * t1501 + t1372 * t1504;
t1353 = t1371 * t1504 + t1372 * t1501;
t1352 = -t1363 * t1496 + t1364 * t1498;
t1351 = t1363 * t1498 + t1364 * t1496;
t1350 = t1359 * t1500 + t1362 * t1503;
t1349 = t1359 * t1503 - t1362 * t1500;
t1348 = -t1357 * t1501 + t1358 * t1504;
t1347 = t1357 * t1504 + t1358 * t1501;
t1346 = -t1355 * t1496 + t1356 * t1498;
t1345 = t1355 * t1498 + t1356 * t1496;
t1344 = t1352 * t1499 + t1382 * t1497;
t1343 = t1352 * t1497 - t1382 * t1499;
t1342 = -t1353 * t1496 + t1354 * t1498;
t1341 = t1353 * t1498 + t1354 * t1496;
t1340 = t1346 * t1499 + t1380 * t1497;
t1339 = t1346 * t1497 - t1380 * t1499;
t1338 = t1342 * t1499 + t1407 * t1497;
t1337 = t1342 * t1497 - t1407 * t1499;
t1336 = -t1349 * t1500 + t1350 * t1503;
t1335 = t1349 * t1503 + t1350 * t1500;
t1334 = -t1347 * t1496 + t1348 * t1498;
t1333 = t1347 * t1498 + t1348 * t1496;
t1332 = t1334 * t1499 + t1392 * t1497;
t1331 = t1334 * t1497 - t1392 * t1499;
t1330 = -t1335 * t1501 + t1336 * t1504;
t1329 = t1335 * t1504 + t1336 * t1501;
t1328 = -t1329 * t1496 + t1330 * t1498;
t1327 = t1329 * t1498 + t1330 * t1496;
t1326 = t1328 * t1499 + t1379 * t1497;
t1325 = t1328 * t1497 - t1379 * t1499;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1415, 0, 0, 0, 0, 0, 0, t1418, t1419, t1412, t1373, 0, 0, 0, 0, 0, 0, t1367, t1369, t1360, t1337, 0, 0, 0, 0, 0, 0, t1339, t1343, t1331, t1325; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1476, t1475, 0, t1479 * t1502 + t1480 * t1505, 0, 0, 0, 0, 0, 0, -t1468 * t1502 + t1505 * t1489, t1466 * t1502 - t1505 * t1528, t1470 * t1502 + t1472 * t1505, t1416 * t1502 - t1459 * t1505, 0, 0, 0, 0, 0, 0, t1420 * t1502 - t1437 * t1505, t1421 * t1502 - t1438 * t1505, t1413 * t1502 - t1434 * t1505, t1374 * t1502 - t1386 * t1505, 0, 0, 0, 0, 0, 0, t1368 * t1502 - t1375 * t1505, t1370 * t1502 - t1384 * t1505, t1361 * t1502 - t1365 * t1505, t1338 * t1502 - t1341 * t1505, 0, 0, 0, 0, 0, 0, t1340 * t1502 - t1345 * t1505, t1344 * t1502 - t1351 * t1505, t1332 * t1502 - t1333 * t1505, t1326 * t1502 - t1327 * t1505; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1475, t1476, 0, -t1479 * t1505 + t1480 * t1502, 0, 0, 0, 0, 0, 0, t1468 * t1505 + t1502 * t1489, -t1466 * t1505 - t1502 * t1528, -t1470 * t1505 + t1472 * t1502, -t1416 * t1505 - t1459 * t1502, 0, 0, 0, 0, 0, 0, -t1420 * t1505 - t1437 * t1502, -t1421 * t1505 - t1438 * t1502, -t1413 * t1505 - t1434 * t1502, -t1374 * t1505 - t1386 * t1502, 0, 0, 0, 0, 0, 0, -t1368 * t1505 - t1375 * t1502, -t1370 * t1505 - t1384 * t1502, -t1361 * t1505 - t1365 * t1502, -t1338 * t1505 - t1341 * t1502, 0, 0, 0, 0, 0, 0, -t1340 * t1505 - t1345 * t1502, -t1344 * t1505 - t1351 * t1502, -t1332 * t1505 - t1333 * t1502, -t1326 * t1505 - t1327 * t1502; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1506, -qJDD(1), 0, t1479, 0, 0, 0, 0, 0, 0, -t1468, t1466, t1470, t1416, 0, 0, 0, 0, 0, 0, t1420, t1421, t1413, t1374, 0, 0, 0, 0, 0, 0, t1368, t1370, t1361, t1338, 0, 0, 0, 0, 0, 0, t1340, t1344, t1332, t1326; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1506, 0, t1480, 0, 0, 0, 0, 0, 0, t1489, -t1528, t1472, -t1459, 0, 0, 0, 0, 0, 0, -t1437, -t1438, -t1434, -t1386, 0, 0, 0, 0, 0, 0, -t1375, -t1384, -t1365, -t1341, 0, 0, 0, 0, 0, 0, -t1345, -t1351, -t1333, -t1327; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1415, 0, 0, 0, 0, 0, 0, t1418, t1419, t1412, t1373, 0, 0, 0, 0, 0, 0, t1367, t1369, t1360, t1337, 0, 0, 0, 0, 0, 0, t1339, t1343, t1331, t1325; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1493 * t1506, t1484, t1489, t1446, 0, 0, 0, 0, 0, 0, t1439, t1440, t1435, t1387, 0, 0, 0, 0, 0, 0, t1376, t1385, t1366, t1342, 0, 0, 0, 0, 0, 0, t1346, t1352, t1334, t1328; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1484, -t1537, -t1528, t1445, 0, 0, 0, 0, 0, 0, -t1454, -t1456, t1462, -t1430, 0, 0, 0, 0, 0, 0, -t1408, -t1410, -t1417, -t1407, 0, 0, 0, 0, 0, 0, -t1380, -t1382, -t1392, -t1379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1489, t1528, -t1472, t1459, 0, 0, 0, 0, 0, 0, t1437, t1438, t1434, t1386, 0, 0, 0, 0, 0, 0, t1375, t1384, t1365, t1341, 0, 0, 0, 0, 0, 0, t1345, t1351, t1333, t1327; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1465, t1460, t1455, t1406, 0, 0, 0, 0, 0, 0, t1400, t1404, t1391, t1354, 0, 0, 0, 0, 0, 0, t1356, t1364, t1348, t1330; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1461, t1467, t1457, t1405, 0, 0, 0, 0, 0, 0, t1399, t1403, t1390, t1353, 0, 0, 0, 0, 0, 0, t1355, t1363, t1347, t1329; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1454, t1456, -t1462, t1430, 0, 0, 0, 0, 0, 0, t1408, t1410, t1417, t1407, 0, 0, 0, 0, 0, 0, t1380, t1382, t1392, t1379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1423, t1425, t1409, t1372, 0, 0, 0, 0, 0, 0, t1378, t1389, t1358, t1336; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1426, t1441, t1411, t1371, 0, 0, 0, 0, 0, 0, t1377, t1388, t1357, t1335; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1408, t1410, t1417, t1407, 0, 0, 0, 0, 0, 0, t1380, t1382, t1392, t1379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1398, t1401, t1381, t1350; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1402, t1414, t1383, t1349; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1380, t1382, t1392, t1379;];
f_new_reg = t1;
