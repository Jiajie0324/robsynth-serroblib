% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPPRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:45
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPPRR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR4_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR4_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPPRR4_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:45:14
% EndTime: 2019-12-05 17:45:32
% DurationCPUTime: 16.68s
% Computational Cost: add. (60796->629), mult. (168978->981), div. (0->0), fcn. (120066->10), ass. (0->457)
t670 = sin(pkin(8));
t669 = sin(pkin(9));
t671 = cos(pkin(9));
t674 = sin(qJ(4));
t677 = cos(qJ(4));
t696 = t669 * t677 + t671 * t674;
t688 = t696 * t670;
t614 = qJD(1) * t688;
t747 = t670 * t671;
t749 = t669 * t670;
t776 = -t674 * t749 + t677 * t747;
t572 = -t614 * qJD(4) + t776 * qJDD(1);
t672 = cos(pkin(8));
t728 = t672 * qJD(1);
t658 = -qJD(4) + t728;
t760 = t614 * t658;
t532 = -t572 + t760;
t779 = t572 + t760;
t675 = sin(qJ(1));
t678 = cos(qJ(1));
t651 = t678 * g(2) + t675 * g(3);
t679 = qJD(1) ^ 2;
t682 = -t679 * qJ(2) + qJDD(2) - t651;
t765 = pkin(2) * t672;
t698 = -qJ(3) * t670 - t765;
t693 = -pkin(1) + t698;
t778 = -0.2e1 * qJD(1) * qJD(3) * t670 + qJDD(1) * t693 + t682;
t650 = t675 * g(2) - t678 * g(3);
t628 = -t679 * pkin(1) + qJDD(1) * qJ(2) + t650;
t767 = 2 * qJD(2);
t777 = qJD(1) * t767 + t628;
t616 = t776 * qJD(1);
t775 = (qJD(4) + t658) * t616;
t741 = t672 * t679;
t673 = sin(qJ(5));
t721 = t672 * qJDD(1);
t657 = -qJDD(4) + t721;
t649 = -qJDD(5) + t657;
t676 = cos(qJ(5));
t560 = t676 * t614 + t673 * t616;
t562 = -t673 * t614 + t676 * t616;
t761 = t562 * t560;
t683 = -t649 - t761;
t774 = t673 * t683;
t759 = t616 * t614;
t687 = -t657 - t759;
t773 = t674 * t687;
t772 = t676 * t683;
t771 = t677 * t687;
t653 = -qJD(5) + t658;
t551 = t560 * t653;
t685 = qJDD(1) * t688;
t571 = -t616 * qJD(4) - t685;
t686 = t560 * qJD(5) - t673 * t571 - t676 * t572;
t770 = t551 - t686;
t703 = -t676 * t571 + t673 * t572;
t451 = (qJD(5) + t653) * t562 + t703;
t558 = t560 ^ 2;
t559 = t562 ^ 2;
t769 = t614 ^ 2;
t611 = t616 ^ 2;
t648 = t653 ^ 2;
t656 = t658 ^ 2;
t768 = t669 ^ 2;
t766 = pkin(2) * t670;
t666 = t670 ^ 2;
t764 = pkin(3) * t666;
t763 = t672 * g(1);
t762 = qJDD(1) * pkin(1);
t758 = t653 * t673;
t757 = t653 * t676;
t756 = t658 * t674;
t755 = t658 * t677;
t754 = t666 * t679;
t592 = -t670 * g(1) + t777 * t672;
t636 = t698 * qJD(1);
t565 = t636 * t728 + t592;
t692 = t778 * t671;
t694 = -pkin(3) * t672 - pkin(6) * t747;
t746 = t670 * t672;
t493 = t694 * qJDD(1) + (-t565 + (pkin(6) * t746 - t671 * t764) * t679) * t669 + t692;
t513 = t671 * t565 + t778 * t669;
t629 = t694 * qJD(1);
t723 = qJDD(1) * t670;
t748 = t669 * t679;
t494 = t629 * t728 + (-pkin(6) * t723 - t748 * t764) * t669 + t513;
t429 = -t677 * t493 + t674 * t494;
t430 = t674 * t493 + t677 * t494;
t376 = -t677 * t429 + t674 * t430;
t753 = t669 * t376;
t704 = qJDD(3) + t763;
t727 = t767 + t636;
t563 = (qJD(1) * t727 + t628) * t670 + t704;
t752 = t669 * t563;
t714 = t669 * t741;
t722 = qJDD(1) * t671;
t619 = (t714 + t722) * t670;
t607 = t669 * t619;
t715 = t671 * t748;
t639 = t666 * t715;
t623 = -t639 + t721;
t751 = t669 * t623;
t624 = -t639 - t721;
t750 = t669 * t624;
t745 = t671 * t376;
t744 = t671 * t563;
t743 = t671 * t623;
t742 = t671 * t624;
t655 = t768 * t754;
t724 = qJDD(1) * t669;
t518 = -pkin(6) * t655 + (pkin(3) * t724 + t628 + (t629 * t671 + t727) * qJD(1)) * t670 + t704;
t588 = -t658 * pkin(4) - t616 * pkin(7);
t449 = -t571 * pkin(4) - pkin(7) * t769 + t616 * t588 + t518;
t740 = t673 * t449;
t506 = t649 - t761;
t739 = t673 * t506;
t403 = t687 * pkin(4) + t532 * pkin(7) - t429;
t407 = -pkin(4) * t769 + t571 * pkin(7) + t658 * t588 + t430;
t356 = -t676 * t403 + t673 * t407;
t357 = t673 * t403 + t676 * t407;
t326 = -t676 * t356 + t673 * t357;
t738 = t674 * t326;
t737 = t674 * t518;
t555 = t657 - t759;
t736 = t674 * t555;
t622 = -t682 + t762;
t735 = t675 * t622;
t734 = t676 * t449;
t733 = t676 * t506;
t732 = t677 * t326;
t731 = t677 * t518;
t730 = t677 * t555;
t729 = t678 * t622;
t720 = t675 * qJDD(1);
t719 = t678 * qJDD(1);
t667 = t671 ^ 2;
t717 = t667 * t754;
t713 = t670 * t761;
t712 = t670 * t759;
t710 = t671 * t741;
t709 = t672 * t761;
t708 = t672 * t759;
t707 = t672 * t720;
t706 = t672 * t719;
t705 = t622 + t762;
t327 = t673 * t356 + t676 * t357;
t377 = t674 * t429 + t677 * t430;
t591 = t777 * t670 + t763;
t539 = t670 * t591 + t672 * t592;
t665 = t670 * t666;
t701 = t665 * t715;
t700 = t669 * t710;
t644 = t678 * t679 + t720;
t699 = pkin(5) * t644 - t678 * g(1);
t697 = t666 * t700;
t512 = t669 * t565 - t692;
t459 = -t671 * t512 + t669 * t513;
t460 = t669 * t512 + t671 * t513;
t538 = t672 * t591 - t670 * t592;
t603 = t678 * t650 - t675 * t651;
t602 = -t675 * t650 - t678 * t651;
t695 = -t675 * t679 + t719;
t668 = t672 ^ 2;
t635 = (t666 + t668) * t741;
t691 = -t675 * t635 + t706;
t690 = t678 * t635 + t707;
t689 = t710 - t724;
t684 = t696 * t723;
t664 = t668 * t679;
t663 = t668 * qJDD(1);
t662 = t666 * qJDD(1);
t641 = t664 - t754;
t640 = t664 + t754;
t638 = t663 - t662;
t637 = t663 + t662;
t634 = -t664 - t717;
t633 = t664 - t717;
t632 = (t668 * t670 + t665) * t679;
t631 = -t655 - t664;
t630 = t655 - t664;
t627 = pkin(5) * t695 + t675 * g(1);
t626 = t655 - t717;
t625 = t655 + t717;
t620 = (t714 - t722) * t670;
t618 = t689 * t670;
t617 = (t710 + t724) * t670;
t613 = t695 * t746;
t612 = t644 * t746;
t610 = (-t667 - t768) * t670 * t741;
t609 = (qJDD(1) * t667 + t700) * t670;
t608 = (t667 * t741 - t669 * t722) * t670;
t606 = t689 * t749;
t600 = t678 * t632 + t670 * t720;
t598 = -t675 * t632 + t670 * t719;
t597 = t678 * t637 - t675 * t640;
t596 = -t675 * t637 - t678 * t640;
t590 = -t611 + t656;
t589 = -t656 + t769;
t584 = t672 * t609 + t701;
t583 = -t672 * t606 - t701;
t582 = -t611 - t656;
t581 = -t669 * t633 + t742;
t580 = -t669 * t634 + t743;
t579 = t671 * t631 - t750;
t578 = t671 * t630 + t751;
t577 = -t671 * t633 - t750;
t576 = t671 * t634 + t751;
t575 = t669 * t631 + t742;
t574 = -t669 * t630 + t743;
t573 = -t611 + t769;
t570 = -t671 * t617 - t669 * t620;
t569 = t671 * t618 - t607;
t568 = -t669 * t617 + t671 * t620;
t567 = -t669 * t618 - t671 * t619;
t553 = -t656 - t769;
t550 = -t559 + t648;
t549 = t558 - t648;
t548 = (t614 * t677 - t616 * t674) * t658;
t547 = (t614 * t674 + t616 * t677) * t658;
t546 = t672 * t581 - t670 * t620;
t545 = t672 * t580 + t670 * t619;
t544 = t672 * t579 - t670 * t618;
t543 = t672 * t578 - t670 * t617;
t542 = t670 * t580 - t672 * t619;
t541 = t670 * t579 + t672 * t618;
t540 = -t611 - t769;
t536 = -t559 - t648;
t535 = t672 * t570 - t670 * t625;
t534 = t672 * t569 - t670 * t626;
t533 = t670 * t570 + t672 * t625;
t529 = -t685 - t775;
t528 = t684 + t775;
t527 = (qJD(4) - t658) * t616 + t684;
t526 = t677 * t572 + t616 * t756;
t525 = t674 * t572 - t616 * t755;
t524 = -t674 * t571 - t614 * t755;
t523 = t677 * t571 - t614 * t756;
t522 = t677 * t589 + t736;
t521 = -t674 * t590 + t771;
t520 = t674 * t589 - t730;
t519 = t677 * t590 + t773;
t517 = t678 * t539 - t735;
t516 = -t675 * t539 - t729;
t515 = -qJ(3) * t576 + t744;
t514 = -qJ(3) * t575 + t752;
t511 = -t674 * t582 + t730;
t510 = t677 * t582 + t736;
t509 = -t559 + t558;
t505 = t678 * t545 + t675 * t576;
t504 = t678 * t544 + t675 * t575;
t503 = t677 * t553 - t773;
t502 = -t675 * t545 + t678 * t576;
t501 = -t675 * t544 + t678 * t575;
t500 = t674 * t553 + t771;
t499 = -t648 - t558;
t498 = (t560 * t676 - t562 * t673) * t653;
t497 = (t560 * t673 + t562 * t676) * t653;
t496 = t678 * t535 + t675 * t568;
t495 = -t675 * t535 + t678 * t568;
t492 = -pkin(2) * t576 + t513;
t491 = -pkin(2) * t575 + t512;
t487 = -t669 * t547 + t671 * t548;
t486 = -t671 * t547 - t669 * t548;
t484 = -t562 * qJD(5) - t703;
t483 = t672 * t487 - t670 * t657;
t482 = -t558 - t559;
t481 = t677 * t529 - t674 * t532;
t480 = -t677 * t527 - t674 * t779;
t479 = t674 * t529 + t677 * t532;
t478 = -t674 * t527 + t677 * t779;
t477 = -t669 * t525 + t671 * t526;
t476 = -t669 * t523 + t671 * t524;
t475 = -t671 * t525 - t669 * t526;
t474 = -t671 * t523 - t669 * t524;
t473 = t676 * t549 + t739;
t472 = -t673 * t550 + t772;
t471 = t673 * t549 - t733;
t470 = t676 * t550 + t774;
t469 = -pkin(1) * t541 - pkin(2) * t618 - qJ(3) * t579 + t744;
t468 = -pkin(1) * t542 + pkin(2) * t619 - qJ(3) * t580 - t752;
t467 = -t669 * t520 + t671 * t522;
t466 = -t669 * t519 + t671 * t521;
t465 = -t671 * t520 - t669 * t522;
t464 = -t671 * t519 - t669 * t521;
t463 = -t673 * t536 + t733;
t462 = t676 * t536 + t739;
t461 = -pkin(6) * t510 + t731;
t458 = -t669 * t510 + t671 * t511;
t457 = t671 * t510 + t669 * t511;
t456 = -pkin(6) * t500 + t737;
t455 = t551 + t686;
t450 = (qJD(5) - t653) * t562 + t703;
t448 = t562 * t758 - t676 * t686;
t447 = -t562 * t757 - t673 * t686;
t446 = -t673 * t484 - t560 * t757;
t445 = t676 * t484 - t560 * t758;
t444 = t672 * t477 + t712;
t443 = t672 * t476 - t712;
t442 = t676 * t499 - t774;
t441 = t673 * t499 + t772;
t440 = -t669 * t500 + t671 * t503;
t439 = t671 * t500 + t669 * t503;
t438 = -qJ(3) * t568 - t459;
t437 = t672 * t460 + t670 * t563;
t436 = t670 * t460 - t672 * t563;
t435 = -t674 * t497 + t677 * t498;
t434 = t677 * t497 + t674 * t498;
t433 = -pkin(3) * t779 + pkin(6) * t511 + t737;
t432 = t672 * t467 - t670 * t528;
t431 = t672 * t466 - t670 * t532;
t427 = t672 * t458 + t670 * t779;
t426 = t670 * t458 - t672 * t779;
t425 = -pkin(3) * t527 + pkin(6) * t503 - t731;
t424 = -qJ(2) * t542 - t670 * t492 + t672 * t515;
t423 = -qJ(2) * t541 - t670 * t491 + t672 * t514;
t422 = t672 * t440 + t670 * t527;
t421 = t670 * t440 - t672 * t527;
t420 = -t669 * t479 + t671 * t481;
t419 = -t669 * t478 + t671 * t480;
t418 = t671 * t479 + t669 * t481;
t417 = -t671 * t478 - t669 * t480;
t416 = -pkin(1) * t533 - pkin(2) * t625 - qJ(3) * t570 - t460;
t415 = -t674 * t471 + t677 * t473;
t414 = -t674 * t470 + t677 * t472;
t413 = t677 * t471 + t674 * t473;
t412 = t677 * t470 + t674 * t472;
t411 = -qJ(2) * t533 + t672 * t438 + t568 * t766;
t410 = t672 * t419 - t670 * t573;
t409 = -t674 * t462 + t677 * t463;
t408 = t677 * t462 + t674 * t463;
t405 = t672 * t420 + t670 * t540;
t404 = t670 * t420 - t672 * t540;
t400 = -pkin(7) * t462 + t734;
t399 = -t451 * t676 - t673 * t455;
t398 = -t676 * t450 - t673 * t770;
t397 = -t451 * t673 + t676 * t455;
t396 = -t673 * t450 + t676 * t770;
t395 = -t674 * t447 + t677 * t448;
t394 = -t674 * t445 + t677 * t446;
t393 = t677 * t447 + t674 * t448;
t392 = t677 * t445 + t674 * t446;
t391 = -pkin(7) * t441 + t740;
t390 = t678 * t437 + t675 * t459;
t389 = -t675 * t437 + t678 * t459;
t388 = -t674 * t441 + t677 * t442;
t387 = t677 * t441 + t674 * t442;
t386 = -pkin(2) * t418 - pkin(3) * t479;
t385 = t678 * t427 + t675 * t457;
t384 = -t675 * t427 + t678 * t457;
t383 = -pkin(1) * t436 + pkin(2) * t563 - qJ(3) * t460;
t382 = -t669 * t434 + t671 * t435;
t381 = -t671 * t434 - t669 * t435;
t380 = t672 * t382 - t670 * t649;
t379 = t678 * t422 + t675 * t439;
t378 = -t675 * t422 + t678 * t439;
t375 = -pkin(2) * t457 - pkin(3) * t510 + t430;
t374 = -pkin(2) * t439 - pkin(3) * t500 + t429;
t373 = -pkin(4) * t770 + pkin(7) * t463 + t740;
t372 = -pkin(3) * t518 + pkin(6) * t377;
t371 = -qJ(2) * t436 + (-qJ(3) * t672 + t766) * t459;
t370 = -pkin(4) * t450 + pkin(7) * t442 - t734;
t369 = -qJ(3) * t457 - t669 * t433 + t671 * t461;
t368 = -pkin(6) * t479 - t376;
t367 = t678 * t405 + t675 * t418;
t366 = -t675 * t405 + t678 * t418;
t365 = -qJ(3) * t439 - t669 * t425 + t671 * t456;
t364 = -t669 * t413 + t671 * t415;
t363 = -t669 * t412 + t671 * t414;
t362 = -t671 * t413 - t669 * t415;
t361 = -t671 * t412 - t669 * t414;
t360 = -t669 * t408 + t671 * t409;
t359 = t671 * t408 + t669 * t409;
t358 = -pkin(3) * t540 + pkin(6) * t481 + t377;
t354 = -t674 * t397 + t677 * t399;
t353 = -t674 * t396 + t677 * t398;
t352 = t677 * t397 + t674 * t399;
t351 = t677 * t396 + t674 * t398;
t350 = -t669 * t393 + t671 * t395;
t349 = -t669 * t392 + t671 * t394;
t348 = -t671 * t393 - t669 * t395;
t347 = -t671 * t392 - t669 * t394;
t346 = -t669 * t387 + t671 * t388;
t345 = t671 * t387 + t669 * t388;
t344 = t672 * t364 - t670 * t451;
t343 = t672 * t363 - t670 * t455;
t342 = t672 * t360 + t670 * t770;
t341 = t670 * t360 - t672 * t770;
t340 = t672 * t350 + t713;
t339 = t672 * t349 - t713;
t338 = -pkin(1) * t426 + pkin(2) * t779 - qJ(3) * t458 - t671 * t433 - t669 * t461;
t337 = t671 * t377 - t753;
t336 = t669 * t377 + t745;
t335 = -pkin(1) * t421 + pkin(2) * t527 - qJ(3) * t440 - t671 * t425 - t669 * t456;
t334 = t672 * t346 + t670 * t450;
t333 = t670 * t346 - t672 * t450;
t332 = t672 * t337 + t670 * t518;
t331 = t670 * t337 - t672 * t518;
t330 = -pkin(6) * t408 - t674 * t373 + t677 * t400;
t329 = -qJ(2) * t426 + t672 * t369 - t670 * t375;
t328 = -pkin(6) * t387 - t674 * t370 + t677 * t391;
t325 = -pkin(3) * t770 + pkin(6) * t409 + t677 * t373 + t674 * t400;
t324 = -pkin(2) * t336 - pkin(3) * t376;
t323 = -qJ(2) * t421 + t672 * t365 - t670 * t374;
t322 = -t669 * t352 + t671 * t354;
t321 = -t669 * t351 + t671 * t353;
t320 = t671 * t352 + t669 * t354;
t319 = -t671 * t351 - t669 * t353;
t318 = t678 * t342 + t675 * t359;
t317 = -t675 * t342 + t678 * t359;
t316 = -pkin(3) * t450 + pkin(6) * t388 + t677 * t370 + t674 * t391;
t315 = -pkin(4) * t449 + pkin(7) * t327;
t314 = -qJ(3) * t418 - t669 * t358 + t671 * t368;
t313 = t672 * t321 - t670 * t509;
t312 = t672 * t322 + t670 * t482;
t311 = t670 * t322 - t672 * t482;
t310 = -pkin(7) * t397 - t326;
t309 = t678 * t334 + t675 * t345;
t308 = -t675 * t334 + t678 * t345;
t307 = -pkin(2) * t359 - pkin(3) * t408 - pkin(4) * t462 + t357;
t306 = -pkin(4) * t482 + pkin(7) * t399 + t327;
t305 = -pkin(1) * t404 + pkin(2) * t540 - qJ(3) * t420 - t671 * t358 - t669 * t368;
t304 = -pkin(6) * t745 - qJ(3) * t336 - t669 * t372;
t303 = t678 * t332 + t675 * t336;
t302 = -t675 * t332 + t678 * t336;
t301 = -pkin(2) * t345 - pkin(3) * t387 - pkin(4) * t441 + t356;
t300 = -qJ(2) * t404 + t672 * t314 - t670 * t386;
t299 = -pkin(2) * t320 - pkin(3) * t352 - pkin(4) * t397;
t298 = t677 * t327 - t738;
t297 = t674 * t327 + t732;
t296 = -pkin(1) * t331 + pkin(2) * t518 + pkin(6) * t753 - qJ(3) * t337 - t671 * t372;
t295 = t678 * t312 + t675 * t320;
t294 = -t675 * t312 + t678 * t320;
t293 = -qJ(3) * t359 - t669 * t325 + t671 * t330;
t292 = -qJ(3) * t345 - t669 * t316 + t671 * t328;
t291 = -pkin(1) * t341 + pkin(2) * t770 - qJ(3) * t360 - t671 * t325 - t669 * t330;
t290 = -pkin(6) * t352 - t674 * t306 + t677 * t310;
t289 = -qJ(2) * t331 + t672 * t304 - t670 * t324;
t288 = -pkin(3) * t482 + pkin(6) * t354 + t677 * t306 + t674 * t310;
t287 = -pkin(1) * t333 + pkin(2) * t450 - qJ(3) * t346 - t671 * t316 - t669 * t328;
t286 = -t669 * t297 + t671 * t298;
t285 = t671 * t297 + t669 * t298;
t284 = -pkin(6) * t297 - pkin(7) * t732 - t674 * t315;
t283 = t672 * t286 + t670 * t449;
t282 = t670 * t286 - t672 * t449;
t281 = -pkin(3) * t449 + pkin(6) * t298 - pkin(7) * t738 + t677 * t315;
t280 = -qJ(2) * t341 + t672 * t293 - t670 * t307;
t279 = -qJ(2) * t333 + t672 * t292 - t670 * t301;
t278 = -pkin(2) * t285 - pkin(3) * t297 - pkin(4) * t326;
t277 = -qJ(3) * t320 - t669 * t288 + t671 * t290;
t276 = t678 * t283 + t675 * t285;
t275 = -t675 * t283 + t678 * t285;
t274 = -pkin(1) * t311 + pkin(2) * t482 - qJ(3) * t322 - t671 * t288 - t669 * t290;
t273 = -qJ(2) * t311 + t672 * t277 - t670 * t299;
t272 = -qJ(3) * t285 - t669 * t281 + t671 * t284;
t271 = -pkin(1) * t282 + pkin(2) * t449 - qJ(3) * t286 - t671 * t281 - t669 * t284;
t270 = -qJ(2) * t282 + t672 * t272 - t670 * t278;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t538, 0, 0, 0, 0, 0, 0, t541, t542, t533, t436, 0, 0, 0, 0, 0, 0, t421, t426, t404, t331, 0, 0, 0, 0, 0, 0, t333, t341, t311, t282; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, -t695, t644, 0, t602, 0, 0, 0, 0, 0, 0, -t691, t598, t596, t516, 0, 0, 0, 0, 0, 0, t501, t502, t495, t389, 0, 0, 0, 0, 0, 0, t378, t384, t366, t302, 0, 0, 0, 0, 0, 0, t308, t317, t294, t275; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t644, -t695, 0, t603, 0, 0, 0, 0, 0, 0, -t690, t600, t597, t517, 0, 0, 0, 0, 0, 0, t504, t505, t496, t390, 0, 0, 0, 0, 0, 0, t379, t385, t367, t303, 0, 0, 0, 0, 0, 0, t309, t318, t295, t276; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t651, -t650, 0, 0, t662, 0.2e1 * t670 * t721, 0, t663, 0, 0, -qJ(2) * t635 + t672 * t705, qJ(2) * t632 - t670 * t705, pkin(1) * t640 + qJ(2) * t637 + t539, pkin(1) * t622 + qJ(2) * t539, t670 * t609 - t697, t670 * t569 + t672 * t626, t670 * t581 + t672 * t620, -t670 * t606 + t697, t670 * t578 + t672 * t617, t663, -pkin(1) * t575 + qJ(2) * t544 + t672 * t491 + t670 * t514, -pkin(1) * t576 + qJ(2) * t545 + t672 * t492 + t670 * t515, qJ(2) * t535 + t670 * t438 + (-pkin(1) - t765) * t568, qJ(2) * t437 + t459 * t693, t670 * t477 - t708, t670 * t419 + t672 * t573, t670 * t466 + t672 * t532, t670 * t476 + t708, t670 * t467 + t672 * t528, t670 * t487 + t672 * t657, -pkin(1) * t439 + qJ(2) * t422 + t670 * t365 + t672 * t374, -pkin(1) * t457 + qJ(2) * t427 + t670 * t369 + t672 * t375, -pkin(1) * t418 + qJ(2) * t405 + t670 * t314 + t672 * t386, -pkin(1) * t336 + qJ(2) * t332 + t670 * t304 + t672 * t324, t670 * t350 - t709, t670 * t321 + t672 * t509, t670 * t363 + t672 * t455, t670 * t349 + t709, t670 * t364 + t672 * t451, t670 * t382 + t672 * t649, -pkin(1) * t345 + qJ(2) * t334 + t670 * t292 + t672 * t301, -pkin(1) * t359 + qJ(2) * t342 + t670 * t293 + t672 * t307, -pkin(1) * t320 + qJ(2) * t312 + t670 * t277 + t672 * t299, -pkin(1) * t285 + qJ(2) * t283 + t670 * t272 + t672 * t278; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t644, 0, -t695, 0, t699, t627, -t603, -pkin(5) * t603, -t612, -t675 * t638 - t678 * t641, t598, t612, t691, 0, pkin(5) * t690 - t678 * t591 + t670 * t735, -pkin(5) * t600 - t678 * t592 + t672 * t735, -pkin(5) * t597 - t675 * t538, -pkin(5) * t517 - (pkin(1) * t678 + qJ(2) * t675) * t538, -t675 * t584 - t678 * t608, -t675 * t534 - t678 * t567, -t675 * t546 - t678 * t577, -t675 * t583 - t678 * t607, -t675 * t543 - t678 * t574, -t678 * t610 + t670 * t707, -pkin(5) * t504 - t675 * t423 - t678 * t469, -pkin(5) * t505 - t675 * t424 - t678 * t468, -pkin(5) * t496 - t675 * t411 - t678 * t416, -pkin(5) * t390 - t675 * t371 - t678 * t383, -t675 * t444 - t678 * t475, -t675 * t410 - t678 * t417, -t675 * t431 - t678 * t464, -t675 * t443 - t678 * t474, -t675 * t432 - t678 * t465, -t675 * t483 - t678 * t486, -pkin(5) * t379 - t675 * t323 - t678 * t335, -pkin(5) * t385 - t675 * t329 - t678 * t338, -pkin(5) * t367 - t675 * t300 - t678 * t305, -pkin(5) * t303 - t675 * t289 - t678 * t296, -t675 * t340 - t678 * t348, -t675 * t313 - t678 * t319, -t675 * t343 - t678 * t361, -t675 * t339 - t678 * t347, -t675 * t344 - t678 * t362, -t675 * t380 - t678 * t381, -pkin(5) * t309 - t675 * t279 - t678 * t287, -pkin(5) * t318 - t675 * t280 - t678 * t291, -pkin(5) * t295 - t675 * t273 - t678 * t274, -pkin(5) * t276 - t675 * t270 - t678 * t271; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, t695, 0, -t644, 0, -t627, t699, t602, pkin(5) * t602, t613, t678 * t638 - t675 * t641, t600, -t613, t690, 0, -pkin(5) * t691 - t675 * t591 - t670 * t729, pkin(5) * t598 - t675 * t592 - t672 * t729, pkin(5) * t596 + t678 * t538, pkin(5) * t516 - (pkin(1) * t675 - qJ(2) * t678) * t538, t678 * t584 - t675 * t608, t678 * t534 - t675 * t567, t678 * t546 - t675 * t577, t678 * t583 - t675 * t607, t678 * t543 - t675 * t574, -t675 * t610 - t670 * t706, pkin(5) * t501 + t678 * t423 - t675 * t469, pkin(5) * t502 + t678 * t424 - t675 * t468, pkin(5) * t495 + t678 * t411 - t675 * t416, pkin(5) * t389 + t678 * t371 - t675 * t383, t678 * t444 - t675 * t475, t678 * t410 - t675 * t417, t678 * t431 - t675 * t464, t678 * t443 - t675 * t474, t678 * t432 - t675 * t465, t678 * t483 - t675 * t486, pkin(5) * t378 + t678 * t323 - t675 * t335, pkin(5) * t384 + t678 * t329 - t675 * t338, pkin(5) * t366 + t678 * t300 - t675 * t305, pkin(5) * t302 + t678 * t289 - t675 * t296, t678 * t340 - t675 * t348, t678 * t313 - t675 * t319, t678 * t343 - t675 * t361, t678 * t339 - t675 * t347, t678 * t344 - t675 * t362, t678 * t380 - t675 * t381, pkin(5) * t308 + t678 * t279 - t675 * t287, pkin(5) * t317 + t678 * t280 - t675 * t291, pkin(5) * t294 + t678 * t273 - t675 * t274, pkin(5) * t275 + t678 * t270 - t675 * t271;];
tauB_reg = t1;
