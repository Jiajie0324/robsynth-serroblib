% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPPRR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:32
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPPRR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR4_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR4_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPPRR4_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:31:44
% EndTime: 2020-01-03 11:32:02
% DurationCPUTime: 15.43s
% Computational Cost: add. (60796->625), mult. (168978->981), div. (0->0), fcn. (120066->10), ass. (0->454)
t678 = sin(pkin(8));
t677 = sin(pkin(9));
t679 = cos(pkin(9));
t682 = sin(qJ(4));
t685 = cos(qJ(4));
t700 = t677 * t685 + t679 * t682;
t695 = t700 * t678;
t615 = qJD(1) * t695;
t734 = t678 * t679;
t736 = t677 * t678;
t778 = -t682 * t736 + t685 * t734;
t573 = -qJD(4) * t615 + t778 * qJDD(1);
t680 = cos(pkin(8));
t731 = qJD(1) * t680;
t660 = -qJD(4) + t731;
t748 = t615 * t660;
t533 = -t573 + t748;
t781 = t573 + t748;
t683 = sin(qJ(1));
t686 = cos(qJ(1));
t653 = g(2) * t686 + g(3) * t683;
t676 = qJDD(1) * pkin(1);
t687 = qJD(1) ^ 2;
t623 = -t687 * qJ(2) + qJDD(2) + t653 - t676;
t767 = pkin(2) * t680;
t702 = -qJ(3) * t678 - t767;
t780 = -0.2e1 * qJD(1) * qJD(3) * t678 + qJDD(1) * t702 + t623;
t652 = g(2) * t683 - t686 * g(3);
t629 = -pkin(1) * t687 + qJDD(1) * qJ(2) - t652;
t769 = 2 * qJD(2);
t779 = qJD(1) * t769 + t629;
t732 = t680 * t687;
t681 = sin(qJ(5));
t724 = qJDD(1) * t680;
t659 = -qJDD(4) + t724;
t651 = -qJDD(5) + t659;
t617 = t778 * qJD(1);
t684 = cos(qJ(5));
t561 = t684 * t615 + t617 * t681;
t563 = -t615 * t681 + t617 * t684;
t752 = t561 * t563;
t690 = -t651 - t752;
t777 = t681 * t690;
t749 = t615 * t617;
t694 = -t659 - t749;
t776 = t682 * t694;
t775 = t684 * t690;
t774 = t685 * t694;
t773 = (qJD(4) + t660) * t617;
t655 = -qJD(5) + t660;
t552 = t561 * t655;
t692 = qJDD(1) * t695;
t572 = -qJD(4) * t617 - t692;
t693 = qJD(5) * t561 - t572 * t681 - t573 * t684;
t772 = t552 - t693;
t706 = -t684 * t572 + t573 * t681;
t452 = (qJD(5) + t655) * t563 + t706;
t559 = t561 ^ 2;
t560 = t563 ^ 2;
t771 = t615 ^ 2;
t612 = t617 ^ 2;
t650 = t655 ^ 2;
t658 = t660 ^ 2;
t770 = t677 ^ 2;
t768 = pkin(2) * t678;
t672 = t678 ^ 2;
t766 = pkin(3) * t672;
t765 = g(1) * t680;
t593 = -g(1) * t678 + t779 * t680;
t637 = t702 * qJD(1);
t566 = t637 * t731 + t593;
t697 = t780 * t679;
t698 = -pkin(3) * t680 - pkin(6) * t734;
t733 = t678 * t680;
t494 = t698 * qJDD(1) + (-t566 + (pkin(6) * t733 - t679 * t766) * t687) * t677 + t697;
t514 = t679 * t566 + t780 * t677;
t630 = t698 * qJD(1);
t726 = qJDD(1) * t678;
t735 = t677 * t687;
t495 = t630 * t731 + (-pkin(6) * t726 - t735 * t766) * t677 + t514;
t430 = -t685 * t494 + t495 * t682;
t404 = t694 * pkin(4) + t533 * pkin(7) - t430;
t431 = t682 * t494 + t685 * t495;
t589 = -pkin(4) * t660 - pkin(7) * t617;
t408 = -pkin(4) * t771 + pkin(7) * t572 + t589 * t660 + t431;
t357 = -t684 * t404 + t408 * t681;
t358 = t681 * t404 + t684 * t408;
t327 = -t357 * t684 + t358 * t681;
t764 = t327 * t682;
t763 = t327 * t685;
t377 = -t430 * t685 + t431 * t682;
t762 = t377 * t677;
t761 = t377 * t679;
t737 = t672 * t687;
t657 = t770 * t737;
t707 = qJDD(3) + t765;
t727 = qJDD(1) * t677;
t730 = t769 + t637;
t519 = -pkin(6) * t657 + (pkin(3) * t727 + t629 + (t630 * t679 + t730) * qJD(1)) * t678 + t707;
t450 = -t572 * pkin(4) - t771 * pkin(7) + t589 * t617 + t519;
t760 = t450 * t681;
t759 = t450 * t684;
t507 = t651 - t752;
t758 = t507 * t681;
t757 = t507 * t684;
t756 = t519 * t682;
t755 = t519 * t685;
t556 = t659 - t749;
t754 = t556 * t682;
t753 = t556 * t685;
t564 = (t730 * qJD(1) + t629) * t678 + t707;
t751 = t564 * t677;
t750 = t564 * t679;
t713 = t677 * t732;
t725 = qJDD(1) * t679;
t620 = (t713 + t725) * t678;
t608 = t620 * t677;
t747 = t623 * t683;
t746 = t623 * t686;
t714 = t679 * t735;
t641 = t672 * t714;
t624 = -t641 + t724;
t745 = t624 * t677;
t744 = t624 * t679;
t625 = -t641 - t724;
t743 = t625 * t677;
t742 = t625 * t679;
t741 = t655 * t681;
t740 = t655 * t684;
t739 = t660 * t682;
t738 = t660 * t685;
t723 = qJDD(1) * t686;
t722 = t683 * qJDD(1);
t720 = t678 * t752;
t719 = t680 * t752;
t718 = t678 * t749;
t717 = t680 * t749;
t673 = t679 ^ 2;
t716 = t673 * t737;
t711 = t679 * t732;
t710 = t678 * t724;
t699 = t686 * t687 + t722;
t709 = -pkin(5) * t699 + t686 * g(1);
t708 = -t623 + t676;
t328 = t357 * t681 + t684 * t358;
t378 = t430 * t682 + t685 * t431;
t592 = t779 * t678 + t765;
t540 = t592 * t678 + t680 * t593;
t603 = -t683 * t652 - t653 * t686;
t671 = t678 * t672;
t704 = t671 * t714;
t703 = t677 * t711;
t701 = t672 * t703;
t513 = t566 * t677 - t697;
t460 = -t513 * t679 + t514 * t677;
t461 = t513 * t677 + t514 * t679;
t539 = t592 * t680 - t593 * t678;
t604 = t652 * t686 - t653 * t683;
t647 = -t683 * t687 + t723;
t674 = t680 ^ 2;
t636 = (t672 + t674) * t732;
t600 = -t636 * t683 + t680 * t723;
t602 = t636 * t686 + t680 * t722;
t696 = t711 - t727;
t691 = t700 * t726;
t666 = t674 * t687;
t665 = t674 * qJDD(1);
t664 = t672 * qJDD(1);
t643 = t666 - t737;
t642 = t666 + t737;
t640 = t665 - t664;
t639 = t665 + t664;
t635 = -t666 - t716;
t634 = t666 - t716;
t633 = (t674 * t678 + t671) * t687;
t632 = -t657 - t666;
t631 = t657 - t666;
t628 = pkin(5) * t647 + g(1) * t683;
t627 = t657 - t716;
t626 = t657 + t716;
t621 = (t713 - t725) * t678;
t619 = t696 * t678;
t618 = (t711 + t727) * t678;
t614 = t647 * t733;
t613 = t699 * t733;
t611 = (-t673 - t770) * t678 * t732;
t610 = (qJDD(1) * t673 + t703) * t678;
t609 = (t673 * t732 - t677 * t725) * t678;
t607 = t696 * t736;
t601 = -t633 * t686 - t678 * t722;
t599 = t633 * t683 - t678 * t723;
t598 = -t639 * t686 + t642 * t683;
t597 = t639 * t683 + t642 * t686;
t591 = -t612 + t658;
t590 = -t658 + t771;
t585 = t610 * t680 + t704;
t584 = -t607 * t680 - t704;
t583 = -t612 - t658;
t582 = -t634 * t677 + t742;
t581 = -t635 * t677 + t744;
t580 = t632 * t679 - t743;
t579 = t631 * t679 + t745;
t578 = -t634 * t679 - t743;
t577 = t635 * t679 + t745;
t576 = t632 * t677 + t742;
t575 = -t631 * t677 + t744;
t574 = -t612 + t771;
t571 = -t618 * t679 - t621 * t677;
t570 = t619 * t679 - t608;
t569 = -t618 * t677 + t621 * t679;
t568 = -t619 * t677 - t620 * t679;
t554 = -t658 - t771;
t551 = -t560 + t650;
t550 = t559 - t650;
t549 = (t615 * t685 - t617 * t682) * t660;
t548 = (t615 * t682 + t617 * t685) * t660;
t547 = t582 * t680 - t621 * t678;
t546 = t581 * t680 + t620 * t678;
t545 = t580 * t680 - t619 * t678;
t544 = t579 * t680 - t618 * t678;
t543 = t581 * t678 - t620 * t680;
t542 = t580 * t678 + t619 * t680;
t541 = -t612 - t771;
t537 = -t560 - t650;
t536 = t571 * t680 - t626 * t678;
t535 = t570 * t680 - t627 * t678;
t534 = t571 * t678 + t626 * t680;
t530 = -t692 - t773;
t529 = t691 + t773;
t528 = (qJD(4) - t660) * t617 + t691;
t527 = t573 * t685 + t617 * t739;
t526 = t573 * t682 - t617 * t738;
t525 = -t572 * t682 - t615 * t738;
t524 = t572 * t685 - t615 * t739;
t523 = t590 * t685 + t754;
t522 = -t591 * t682 + t774;
t521 = t590 * t682 - t753;
t520 = t591 * t685 + t776;
t518 = -t540 * t686 - t747;
t517 = t540 * t683 - t746;
t516 = -qJ(3) * t577 + t750;
t515 = -qJ(3) * t576 + t751;
t512 = -t583 * t682 + t753;
t511 = t583 * t685 + t754;
t510 = -t560 + t559;
t506 = -t546 * t686 - t577 * t683;
t505 = -t545 * t686 - t576 * t683;
t504 = t554 * t685 - t776;
t503 = t546 * t683 - t577 * t686;
t502 = t545 * t683 - t576 * t686;
t501 = t554 * t682 + t774;
t500 = -t650 - t559;
t499 = (t561 * t684 - t563 * t681) * t655;
t498 = (t561 * t681 + t563 * t684) * t655;
t497 = -t536 * t686 - t569 * t683;
t496 = t536 * t683 - t569 * t686;
t493 = -pkin(2) * t577 + t514;
t492 = -pkin(2) * t576 + t513;
t488 = -t548 * t677 + t549 * t679;
t487 = -t548 * t679 - t549 * t677;
t485 = -qJD(5) * t563 - t706;
t484 = t488 * t680 - t659 * t678;
t483 = -t559 - t560;
t482 = t530 * t685 - t533 * t682;
t481 = -t528 * t685 - t682 * t781;
t480 = t530 * t682 + t533 * t685;
t479 = -t528 * t682 + t685 * t781;
t478 = -t526 * t677 + t527 * t679;
t477 = -t524 * t677 + t525 * t679;
t476 = -t526 * t679 - t527 * t677;
t475 = -t524 * t679 - t525 * t677;
t474 = t550 * t684 + t758;
t473 = -t551 * t681 + t775;
t472 = t550 * t681 - t757;
t471 = t551 * t684 + t777;
t470 = -pkin(1) * t542 - pkin(2) * t619 - qJ(3) * t580 + t750;
t469 = -pkin(1) * t543 + pkin(2) * t620 - qJ(3) * t581 - t751;
t468 = -t521 * t677 + t523 * t679;
t467 = -t520 * t677 + t522 * t679;
t466 = -t521 * t679 - t523 * t677;
t465 = -t520 * t679 - t522 * t677;
t464 = -t537 * t681 + t757;
t463 = t537 * t684 + t758;
t462 = -pkin(6) * t511 + t755;
t459 = -t511 * t677 + t512 * t679;
t458 = t511 * t679 + t512 * t677;
t457 = -pkin(6) * t501 + t756;
t456 = t552 + t693;
t451 = (qJD(5) - t655) * t563 + t706;
t449 = t563 * t741 - t684 * t693;
t448 = -t563 * t740 - t681 * t693;
t447 = -t485 * t681 - t561 * t740;
t446 = t485 * t684 - t561 * t741;
t445 = t478 * t680 + t718;
t444 = t477 * t680 - t718;
t443 = t500 * t684 - t777;
t442 = t500 * t681 + t775;
t441 = -t501 * t677 + t504 * t679;
t440 = t501 * t679 + t504 * t677;
t439 = -qJ(3) * t569 - t460;
t438 = t461 * t680 + t564 * t678;
t437 = t461 * t678 - t564 * t680;
t436 = -t498 * t682 + t499 * t685;
t435 = t498 * t685 + t499 * t682;
t434 = -pkin(3) * t781 + pkin(6) * t512 + t756;
t433 = t468 * t680 - t529 * t678;
t432 = t467 * t680 - t533 * t678;
t428 = t459 * t680 + t678 * t781;
t427 = t459 * t678 - t680 * t781;
t426 = -pkin(3) * t528 + pkin(6) * t504 - t755;
t425 = -qJ(2) * t543 - t493 * t678 + t516 * t680;
t424 = -qJ(2) * t542 - t492 * t678 + t515 * t680;
t423 = t441 * t680 + t528 * t678;
t422 = t441 * t678 - t528 * t680;
t421 = -t480 * t677 + t482 * t679;
t420 = -t479 * t677 + t481 * t679;
t419 = t480 * t679 + t482 * t677;
t418 = -t479 * t679 - t481 * t677;
t417 = -pkin(1) * t534 - pkin(2) * t626 - qJ(3) * t571 - t461;
t416 = -t472 * t682 + t474 * t685;
t415 = -t471 * t682 + t473 * t685;
t414 = t472 * t685 + t474 * t682;
t413 = t471 * t685 + t473 * t682;
t412 = -qJ(2) * t534 + t439 * t680 + t569 * t768;
t411 = t420 * t680 - t574 * t678;
t410 = -t463 * t682 + t464 * t685;
t409 = t463 * t685 + t464 * t682;
t406 = t421 * t680 + t541 * t678;
t405 = t421 * t678 - t541 * t680;
t401 = -pkin(7) * t463 + t759;
t400 = -t452 * t684 - t456 * t681;
t399 = -t451 * t684 - t681 * t772;
t398 = -t452 * t681 + t456 * t684;
t397 = -t451 * t681 + t684 * t772;
t396 = -t448 * t682 + t449 * t685;
t395 = -t446 * t682 + t447 * t685;
t394 = t448 * t685 + t449 * t682;
t393 = t446 * t685 + t447 * t682;
t392 = -pkin(7) * t442 + t760;
t391 = -t438 * t686 - t460 * t683;
t390 = t438 * t683 - t460 * t686;
t389 = -t442 * t682 + t443 * t685;
t388 = t442 * t685 + t443 * t682;
t387 = -pkin(2) * t419 - pkin(3) * t480;
t386 = -t428 * t686 - t458 * t683;
t385 = t428 * t683 - t458 * t686;
t384 = -pkin(1) * t437 + pkin(2) * t564 - qJ(3) * t461;
t383 = -t435 * t677 + t436 * t679;
t382 = -t435 * t679 - t436 * t677;
t381 = t383 * t680 - t651 * t678;
t380 = -t423 * t686 - t440 * t683;
t379 = t423 * t683 - t440 * t686;
t376 = -pkin(2) * t458 - pkin(3) * t511 + t431;
t375 = -pkin(2) * t440 - pkin(3) * t501 + t430;
t374 = -pkin(4) * t772 + pkin(7) * t464 + t760;
t373 = -pkin(3) * t519 + pkin(6) * t378;
t372 = -qJ(2) * t437 + (-qJ(3) * t680 + t768) * t460;
t371 = -pkin(4) * t451 + pkin(7) * t443 - t759;
t370 = -qJ(3) * t458 - t434 * t677 + t462 * t679;
t369 = -pkin(6) * t480 - t377;
t368 = -t406 * t686 - t419 * t683;
t367 = t406 * t683 - t419 * t686;
t366 = -qJ(3) * t440 - t426 * t677 + t457 * t679;
t365 = -t414 * t677 + t416 * t679;
t364 = -t413 * t677 + t415 * t679;
t363 = -t414 * t679 - t416 * t677;
t362 = -t413 * t679 - t415 * t677;
t361 = -t409 * t677 + t410 * t679;
t360 = t409 * t679 + t410 * t677;
t359 = -pkin(3) * t541 + pkin(6) * t482 + t378;
t355 = -t398 * t682 + t400 * t685;
t354 = -t397 * t682 + t399 * t685;
t353 = t398 * t685 + t400 * t682;
t352 = t397 * t685 + t399 * t682;
t351 = -t394 * t677 + t396 * t679;
t350 = -t393 * t677 + t395 * t679;
t349 = -t394 * t679 - t396 * t677;
t348 = -t393 * t679 - t395 * t677;
t347 = -t388 * t677 + t389 * t679;
t346 = t388 * t679 + t389 * t677;
t345 = t365 * t680 - t452 * t678;
t344 = t364 * t680 - t456 * t678;
t343 = t361 * t680 + t678 * t772;
t342 = t361 * t678 - t680 * t772;
t341 = t351 * t680 + t720;
t340 = t350 * t680 - t720;
t339 = -pkin(1) * t427 + pkin(2) * t781 - qJ(3) * t459 - t434 * t679 - t462 * t677;
t338 = t378 * t679 - t762;
t337 = t378 * t677 + t761;
t336 = -pkin(1) * t422 + pkin(2) * t528 - qJ(3) * t441 - t426 * t679 - t457 * t677;
t335 = t347 * t680 + t451 * t678;
t334 = t347 * t678 - t451 * t680;
t333 = t338 * t680 + t519 * t678;
t332 = t338 * t678 - t519 * t680;
t331 = -pkin(6) * t409 - t374 * t682 + t401 * t685;
t330 = -qJ(2) * t427 + t370 * t680 - t376 * t678;
t329 = -pkin(6) * t388 - t371 * t682 + t392 * t685;
t326 = -pkin(3) * t772 + pkin(6) * t410 + t374 * t685 + t401 * t682;
t325 = -pkin(2) * t337 - pkin(3) * t377;
t324 = -qJ(2) * t422 + t366 * t680 - t375 * t678;
t323 = -t353 * t677 + t355 * t679;
t322 = -t352 * t677 + t354 * t679;
t321 = t353 * t679 + t355 * t677;
t320 = -t352 * t679 - t354 * t677;
t319 = -t343 * t686 - t360 * t683;
t318 = t343 * t683 - t360 * t686;
t317 = -pkin(3) * t451 + pkin(6) * t389 + t371 * t685 + t392 * t682;
t316 = -pkin(4) * t450 + pkin(7) * t328;
t315 = -qJ(3) * t419 - t359 * t677 + t369 * t679;
t314 = t322 * t680 - t510 * t678;
t313 = t323 * t680 + t483 * t678;
t312 = t323 * t678 - t483 * t680;
t311 = -pkin(7) * t398 - t327;
t310 = -t335 * t686 - t346 * t683;
t309 = t335 * t683 - t346 * t686;
t308 = -pkin(2) * t360 - pkin(3) * t409 - pkin(4) * t463 + t358;
t307 = -pkin(4) * t483 + pkin(7) * t400 + t328;
t306 = -pkin(1) * t405 + pkin(2) * t541 - qJ(3) * t421 - t359 * t679 - t369 * t677;
t305 = -pkin(6) * t761 - qJ(3) * t337 - t373 * t677;
t304 = -t333 * t686 - t337 * t683;
t303 = t333 * t683 - t337 * t686;
t302 = -pkin(2) * t346 - pkin(3) * t388 - pkin(4) * t442 + t357;
t301 = -qJ(2) * t405 + t315 * t680 - t387 * t678;
t300 = -pkin(2) * t321 - pkin(3) * t353 - pkin(4) * t398;
t299 = t328 * t685 - t764;
t298 = t328 * t682 + t763;
t297 = -pkin(1) * t332 + pkin(2) * t519 + pkin(6) * t762 - qJ(3) * t338 - t373 * t679;
t296 = -t313 * t686 - t321 * t683;
t295 = t313 * t683 - t321 * t686;
t294 = -qJ(3) * t360 - t326 * t677 + t331 * t679;
t293 = -qJ(3) * t346 - t317 * t677 + t329 * t679;
t292 = -pkin(1) * t342 + pkin(2) * t772 - qJ(3) * t361 - t326 * t679 - t331 * t677;
t291 = -pkin(6) * t353 - t307 * t682 + t311 * t685;
t290 = -qJ(2) * t332 + t305 * t680 - t325 * t678;
t289 = -pkin(3) * t483 + pkin(6) * t355 + t307 * t685 + t311 * t682;
t288 = -pkin(1) * t334 + pkin(2) * t451 - qJ(3) * t347 - t317 * t679 - t329 * t677;
t287 = -t298 * t677 + t299 * t679;
t286 = t298 * t679 + t299 * t677;
t285 = -pkin(6) * t298 - pkin(7) * t763 - t316 * t682;
t284 = t287 * t680 + t450 * t678;
t283 = t287 * t678 - t450 * t680;
t282 = -pkin(3) * t450 + pkin(6) * t299 - pkin(7) * t764 + t316 * t685;
t281 = -qJ(2) * t342 + t294 * t680 - t308 * t678;
t280 = -qJ(2) * t334 + t293 * t680 - t302 * t678;
t279 = -pkin(2) * t286 - pkin(3) * t298 - pkin(4) * t327;
t278 = -qJ(3) * t321 - t289 * t677 + t291 * t679;
t277 = -t284 * t686 - t286 * t683;
t276 = t284 * t683 - t286 * t686;
t275 = -pkin(1) * t312 + pkin(2) * t483 - qJ(3) * t323 - t289 * t679 - t291 * t677;
t274 = -qJ(2) * t312 + t278 * t680 - t300 * t678;
t273 = -qJ(3) * t286 - t282 * t677 + t285 * t679;
t272 = -pkin(1) * t283 + pkin(2) * t450 - qJ(3) * t287 - t282 * t679 - t285 * t677;
t271 = -qJ(2) * t283 + t273 * t680 - t279 * t678;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t539, 0, 0, 0, 0, 0, 0, t542, t543, t534, t437, 0, 0, 0, 0, 0, 0, t422, t427, t405, t332, 0, 0, 0, 0, 0, 0, t334, t342, t312, t283; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t647, -t699, 0, t603, 0, 0, 0, 0, 0, 0, t600, t599, t597, t517, 0, 0, 0, 0, 0, 0, t502, t503, t496, t390, 0, 0, 0, 0, 0, 0, t379, t385, t367, t303, 0, 0, 0, 0, 0, 0, t309, t318, t295, t276; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t699, t647, 0, t604, 0, 0, 0, 0, 0, 0, t602, t601, t598, t518, 0, 0, 0, 0, 0, 0, t505, t506, t497, t391, 0, 0, 0, 0, 0, 0, t380, t386, t368, t304, 0, 0, 0, 0, 0, 0, t310, t319, t296, t277; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t653, t652, 0, 0, t664, 0.2e1 * t710, 0, t665, 0, 0, -qJ(2) * t636 + t708 * t680, qJ(2) * t633 - t708 * t678, pkin(1) * t642 + qJ(2) * t639 + t540, -pkin(1) * t623 + qJ(2) * t540, t610 * t678 - t701, t570 * t678 + t627 * t680, t582 * t678 + t621 * t680, -t607 * t678 + t701, t579 * t678 + t618 * t680, t665, -pkin(1) * t576 + qJ(2) * t545 + t492 * t680 + t515 * t678, -pkin(1) * t577 + qJ(2) * t546 + t493 * t680 + t516 * t678, qJ(2) * t536 + t439 * t678 + (-pkin(1) - t767) * t569, qJ(2) * t438 + (-pkin(1) + t702) * t460, t478 * t678 - t717, t420 * t678 + t574 * t680, t467 * t678 + t533 * t680, t477 * t678 + t717, t468 * t678 + t529 * t680, t488 * t678 + t659 * t680, -pkin(1) * t440 + qJ(2) * t423 + t366 * t678 + t375 * t680, -pkin(1) * t458 + qJ(2) * t428 + t370 * t678 + t376 * t680, -pkin(1) * t419 + qJ(2) * t406 + t315 * t678 + t387 * t680, -pkin(1) * t337 + qJ(2) * t333 + t305 * t678 + t325 * t680, t351 * t678 - t719, t322 * t678 + t510 * t680, t364 * t678 + t456 * t680, t350 * t678 + t719, t365 * t678 + t452 * t680, t383 * t678 + t651 * t680, -pkin(1) * t346 + qJ(2) * t335 + t293 * t678 + t302 * t680, -pkin(1) * t360 + qJ(2) * t343 + t294 * t678 + t308 * t680, -pkin(1) * t321 + qJ(2) * t313 + t278 * t678 + t300 * t680, -pkin(1) * t286 + qJ(2) * t284 + t273 * t678 + t279 * t680; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t699, 0, t647, 0, t709, -t628, -t604, -pkin(5) * t604, t613, t640 * t683 + t643 * t686, t599, -t613, -t600, 0, -pkin(5) * t602 + t592 * t686 + t678 * t747, -pkin(5) * t601 + t593 * t686 + t680 * t747, -pkin(5) * t598 + t539 * t683, -pkin(5) * t518 - (-pkin(1) * t686 - qJ(2) * t683) * t539, t585 * t683 + t609 * t686, t535 * t683 + t568 * t686, t547 * t683 + t578 * t686, t584 * t683 + t608 * t686, t544 * t683 + t575 * t686, t611 * t686 - t683 * t710, -pkin(5) * t505 + t424 * t683 + t470 * t686, -pkin(5) * t506 + t425 * t683 + t469 * t686, -pkin(5) * t497 + t412 * t683 + t417 * t686, -pkin(5) * t391 + t372 * t683 + t384 * t686, t445 * t683 + t476 * t686, t411 * t683 + t418 * t686, t432 * t683 + t465 * t686, t444 * t683 + t475 * t686, t433 * t683 + t466 * t686, t484 * t683 + t487 * t686, -pkin(5) * t380 + t324 * t683 + t336 * t686, -pkin(5) * t386 + t330 * t683 + t339 * t686, -pkin(5) * t368 + t301 * t683 + t306 * t686, -pkin(5) * t304 + t290 * t683 + t297 * t686, t341 * t683 + t349 * t686, t314 * t683 + t320 * t686, t344 * t683 + t362 * t686, t340 * t683 + t348 * t686, t345 * t683 + t363 * t686, t381 * t683 + t382 * t686, -pkin(5) * t310 + t280 * t683 + t288 * t686, -pkin(5) * t319 + t281 * t683 + t292 * t686, -pkin(5) * t296 + t274 * t683 + t275 * t686, -pkin(5) * t277 + t271 * t683 + t272 * t686; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t647, 0, t699, 0, t628, t709, t603, pkin(5) * t603, -t614, -t640 * t686 + t643 * t683, t601, t614, -t602, 0, pkin(5) * t600 + t592 * t683 - t678 * t746, pkin(5) * t599 + t593 * t683 - t680 * t746, pkin(5) * t597 - t539 * t686, pkin(5) * t517 - (-pkin(1) * t683 + qJ(2) * t686) * t539, -t585 * t686 + t609 * t683, -t535 * t686 + t568 * t683, -t547 * t686 + t578 * t683, -t584 * t686 + t608 * t683, -t544 * t686 + t575 * t683, t611 * t683 + t686 * t710, pkin(5) * t502 - t424 * t686 + t470 * t683, pkin(5) * t503 - t425 * t686 + t469 * t683, pkin(5) * t496 - t412 * t686 + t417 * t683, pkin(5) * t390 - t372 * t686 + t384 * t683, -t445 * t686 + t476 * t683, -t411 * t686 + t418 * t683, -t432 * t686 + t465 * t683, -t444 * t686 + t475 * t683, -t433 * t686 + t466 * t683, -t484 * t686 + t487 * t683, pkin(5) * t379 - t324 * t686 + t336 * t683, pkin(5) * t385 - t330 * t686 + t339 * t683, pkin(5) * t367 - t301 * t686 + t306 * t683, pkin(5) * t303 - t290 * t686 + t297 * t683, -t341 * t686 + t349 * t683, -t314 * t686 + t320 * t683, -t344 * t686 + t362 * t683, -t340 * t686 + t348 * t683, -t345 * t686 + t363 * t683, -t381 * t686 + t382 * t683, pkin(5) * t309 - t280 * t686 + t288 * t683, pkin(5) * t318 - t281 * t686 + t292 * t683, pkin(5) * t295 - t274 * t686 + t275 * t683, pkin(5) * t276 - t271 * t686 + t272 * t683;];
tauB_reg = t1;
