% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRRRP3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:49
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRRRP3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP3_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP3_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP3_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRRP3_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:49:39
% EndTime: 2019-12-31 21:49:48
% DurationCPUTime: 9.43s
% Computational Cost: add. (33750->460), mult. (40171->531), div. (0->0), fcn. (22113->8), ass. (0->318)
t902 = qJD(4) ^ 2;
t886 = qJD(1) + qJD(2);
t879 = qJD(3) + t886;
t877 = t879 ^ 2;
t893 = sin(qJ(4));
t889 = t893 ^ 2;
t975 = t889 * t877;
t860 = t902 + t975;
t897 = cos(qJ(4));
t865 = t897 * t877 * t893;
t858 = qJDD(4) - t865;
t959 = t897 * t858;
t809 = -t893 * t860 + t959;
t948 = qJD(4) * t879;
t872 = t897 * t948;
t885 = qJDD(1) + qJDD(2);
t878 = qJDD(3) + t885;
t967 = t893 * t878;
t836 = 0.2e1 * t872 + t967;
t894 = sin(qJ(3));
t898 = cos(qJ(3));
t756 = t894 * t809 + t898 * t836;
t759 = t898 * t809 - t894 * t836;
t895 = sin(qJ(2));
t899 = cos(qJ(2));
t701 = t899 * t756 + t895 * t759;
t705 = t895 * t756 - t899 * t759;
t896 = sin(qJ(1));
t900 = cos(qJ(1));
t1046 = pkin(5) * (t896 * t701 + t900 * t705);
t1045 = pkin(5) * (t900 * t701 - t896 * t705);
t1044 = pkin(1) * t701;
t1043 = pkin(6) * t701;
t970 = t893 * t858;
t802 = t897 * t860 + t970;
t1042 = -pkin(1) * t802 - pkin(6) * t705;
t964 = t894 * t878;
t843 = t898 * t877 + t964;
t955 = t898 * t878;
t846 = t894 * t877 - t955;
t780 = t899 * t843 - t895 * t846;
t785 = t895 * t843 + t899 * t846;
t1002 = t900 * t780 - t896 * t785;
t1003 = pkin(7) * t846 - t894 * g(3);
t819 = pkin(7) * t843 - t898 * g(3);
t1021 = pkin(6) * t785 + t1003 * t899 + t895 * t819;
t723 = pkin(6) * t780 - t1003 * t895 + t899 * t819;
t1039 = pkin(5) * t1002 - t1021 * t896 + t900 * t723;
t871 = t893 * t948;
t958 = t897 * t878;
t839 = -0.2e1 * t871 + t958;
t960 = t897 * t839;
t973 = t893 * t836;
t776 = -t960 + t973;
t890 = t897 ^ 2;
t848 = (t889 - t890) * t877;
t746 = t894 * t776 + t898 * t848;
t748 = t898 * t776 - t894 * t848;
t685 = t899 * t746 + t895 * t748;
t686 = t895 * t746 - t899 * t748;
t1038 = t900 * t685 - t896 * t686;
t1037 = t896 * t685 + t900 * t686;
t974 = t890 * t877;
t862 = -t902 + t974;
t807 = -t897 * t862 + t970;
t768 = t894 * t807 + t897 * t955;
t771 = t898 * t807 - t894 * t958;
t715 = t899 * t768 + t895 * t771;
t717 = t895 * t768 - t899 * t771;
t1036 = t900 * t715 - t896 * t717;
t1035 = t896 * t715 + t900 * t717;
t1022 = t896 * t780 + t900 * t785;
t1034 = pkin(5) * t1022 + t1021 * t900 + t896 * t723;
t1033 = pkin(2) * t756;
t1032 = pkin(7) * t756;
t1030 = -pkin(2) * t802 + pkin(7) * t759;
t874 = t900 * g(1) + t896 * g(2);
t903 = qJD(1) ^ 2;
t914 = t903 * pkin(1) + t874;
t873 = t896 * g(1) - t900 * g(2);
t917 = qJDD(1) * pkin(1) + t873;
t800 = t895 * t917 - t899 * t914;
t884 = t886 ^ 2;
t788 = -t884 * pkin(2) + t800;
t906 = t895 * t914 + t899 * t917;
t905 = t885 * pkin(2) + t906;
t737 = t894 * t788 - t898 * t905;
t738 = t898 * t788 + t894 * t905;
t938 = t894 * t737 + t898 * t738;
t676 = t898 * t737 - t894 * t738;
t963 = t895 * t676;
t1018 = t899 * t938 + t963;
t954 = t899 * t676;
t634 = t895 * t938 - t954;
t1029 = t1018 * t900 - t896 * t634;
t1028 = t1018 * t896 + t900 * t634;
t856 = t895 * t884 - t899 * t885;
t1004 = pkin(6) * t856 - t895 * g(3);
t853 = t899 * t884 + t895 * t885;
t823 = pkin(6) * t853 - t899 * g(3);
t920 = t900 * t853 - t896 * t856;
t1023 = pkin(5) * t920 - t1004 * t896 + t900 * t823;
t1001 = t896 * t853 + t900 * t856;
t1020 = pkin(5) * t1001 + t1004 * t900 + t896 * t823;
t937 = t899 * t800 - t895 * t906;
t743 = -t895 * t800 - t899 * t906;
t962 = t896 * t743;
t1019 = t900 * t937 + t962;
t953 = t900 * t743;
t1017 = -t896 * t937 + t953;
t1013 = -pkin(3) * t836 - pkin(8) * t809;
t1009 = pkin(3) * t802;
t1007 = pkin(8) * t802;
t729 = -t877 * pkin(3) + t878 * pkin(8) + t738;
t925 = -pkin(4) * t897 - qJ(5) * t893;
t977 = t925 * t877;
t981 = t897 * g(3);
t691 = -qJDD(4) * pkin(4) - t902 * qJ(5) + (t729 + t977) * t893 + qJDD(5) + t981;
t857 = qJDD(4) + t865;
t863 = -t902 - t974;
t1006 = pkin(4) * t857 + qJ(5) * t863 - t691;
t837 = t872 + t967;
t1005 = t837 + t872;
t712 = t893 * t729 + t981;
t713 = -t893 * g(3) + t897 * t729;
t661 = t893 * t712 + t897 * t713;
t810 = t893 * t862 + t959;
t850 = t897 * t857;
t801 = t893 * t863 + t850;
t993 = pkin(3) * t801;
t971 = t893 * t857;
t806 = t897 * t863 - t971;
t755 = t894 * t806 + t898 * t839;
t758 = t898 * t806 - t894 * t839;
t700 = t899 * t755 + t895 * t758;
t703 = -t895 * t755 + t899 * t758;
t990 = pkin(5) * (t900 * t700 + t896 * t703);
t949 = t889 + t890;
t841 = t949 * t878;
t847 = t949 * t877;
t779 = t894 * t841 + t898 * t847;
t783 = t898 * t841 - t894 * t847;
t732 = t899 * t779 + t895 * t783;
t734 = -t895 * t779 + t899 * t783;
t989 = pkin(5) * (t900 * t732 + t896 * t734);
t988 = pkin(6) * t700;
t987 = pkin(6) * t732;
t986 = pkin(7) * t755;
t985 = pkin(7) * t779;
t984 = pkin(8) * t801;
t976 = t879 * t893;
t728 = -t878 * pkin(3) - t877 * pkin(8) + t737;
t724 = t893 * t728;
t972 = t893 * t839;
t725 = t897 * t728;
t961 = t897 * t836;
t952 = -pkin(3) * t728 + pkin(8) * t661;
t951 = pkin(3) * t839 + pkin(8) * t806;
t950 = pkin(3) * t847 + pkin(8) * t841;
t947 = (qJD(5) * qJD(4));
t944 = t1013 + t724;
t943 = -t725 + t951;
t643 = t894 * t661 - t898 * t728;
t942 = pkin(2) * t643 + t952;
t941 = -pkin(1) * t801 + pkin(6) * t703;
t940 = -pkin(2) * t801 + pkin(7) * t758;
t935 = -t896 * t873 - t900 * t874;
t934 = t894 * t865;
t933 = t898 * t865;
t880 = 2 * t947;
t921 = -t902 * pkin(4) + qJDD(4) * qJ(5) + t897 * t977 + t713;
t690 = t880 + t921;
t682 = pkin(4) * t847 + t690;
t683 = qJ(5) * t847 + t691;
t932 = t897 * t682 + t893 * t683 + t950;
t931 = t950 + t661;
t930 = t944 - t1033;
t752 = pkin(2) * t755;
t929 = t752 + t943;
t867 = t900 * qJDD(1) - t896 * t903;
t928 = -pkin(5) * t867 - t896 * g(3);
t927 = -pkin(2) * t846 - t737;
t926 = -pkin(4) * t691 + qJ(5) * t690;
t924 = pkin(4) * t893 - qJ(5) * t897;
t778 = pkin(2) * t779;
t923 = t778 + t932;
t922 = t778 + t931;
t660 = t897 * t712 - t893 * t713;
t773 = t961 + t972;
t919 = t900 * t873 - t896 * t874;
t838 = -t871 + t958;
t911 = -t838 * pkin(4) - t1005 * qJ(5) + t728;
t909 = 0.2e1 * qJD(5) * t976 - t911;
t670 = -pkin(4) * t871 + qJ(5) * t836 + t909;
t916 = pkin(4) * t961 + t893 * t670 - t1013;
t671 = (t839 - t871) * pkin(4) + t909;
t915 = qJ(5) * t972 + t897 * t671 + t951;
t913 = t916 + t1033;
t912 = t752 + t915;
t647 = t897 * t690 + t893 * t691;
t679 = (pkin(4) * qJD(4) - 0.2e1 * qJD(5)) * t976 + t911;
t910 = pkin(8) * t647 + (-pkin(3) + t925) * t679;
t908 = pkin(4) * t860 + qJ(5) * t858 + t921;
t624 = t894 * t647 - t898 * t679;
t907 = pkin(2) * t624 + t910;
t904 = -pkin(2) * t843 - t738;
t901 = pkin(1) * g(3);
t866 = t896 * qJDD(1) + t900 * t903;
t861 = -t902 + t975;
t849 = -pkin(5) * t866 + t900 * g(3);
t831 = t949 * t948;
t830 = t924 * t878;
t814 = t894 * qJDD(4) + t898 * t831;
t813 = -t898 * qJDD(4) + t894 * t831;
t808 = t893 * t861 + t850;
t804 = -t897 * t861 + t971;
t798 = t897 * t837 - t889 * t948;
t797 = -t893 * t838 - t890 * t948;
t792 = (t838 - t871) * t897;
t791 = t1005 * t893;
t777 = pkin(7) * t783;
t772 = t898 * t808 + t893 * t964;
t769 = t894 * t808 - t893 * t955;
t766 = -pkin(1) * t856 + t906;
t765 = -pkin(1) * t853 - t800;
t764 = t898 * t798 - t934;
t763 = t898 * t797 + t934;
t762 = t894 * t798 + t933;
t761 = t894 * t797 - t933;
t750 = -t895 * t813 + t899 * t814;
t749 = t899 * t813 + t895 * t814;
t740 = pkin(1) * t743;
t739 = pkin(6) * t937 + t901;
t731 = pkin(1) * t732;
t730 = pkin(6) * t734;
t719 = -t895 * t769 + t899 * t772;
t716 = t899 * t769 + t895 * t772;
t709 = -t895 * t762 + t899 * t764;
t708 = -t895 * t761 + t899 * t763;
t707 = t899 * t762 + t895 * t764;
t706 = t899 * t761 + t895 * t763;
t699 = pkin(1) * t700;
t697 = t725 + t1007;
t696 = t724 - t984;
t695 = t713 + t1009;
t694 = t712 - t993;
t693 = -t896 * t749 + t900 * t750;
t692 = t900 * t749 + t896 * t750;
t689 = -pkin(1) * t785 + t927;
t688 = -pkin(1) * t780 + t904;
t673 = pkin(2) * t676;
t672 = pkin(2) * g(3) + pkin(7) * t938;
t666 = pkin(5) * (-t896 * t732 + t900 * t734);
t665 = -t993 - t1006;
t664 = -t908 - (2 * t947) - t1009;
t663 = -t896 * t716 + t900 * t719;
t662 = t900 * t716 + t896 * t719;
t657 = -t896 * t707 + t900 * t709;
t656 = -t896 * t706 + t900 * t708;
t655 = t900 * t707 + t896 * t709;
t654 = t900 * t706 + t896 * t708;
t653 = -pkin(4) * t973 + t897 * t670 - t1007;
t652 = qJ(5) * t960 - t893 * t671 - t984;
t650 = pkin(5) * (-t896 * t700 + t900 * t703);
t649 = t898 * t660 - t985;
t648 = t894 * t660 + t777;
t646 = t893 * t690 - t897 * t691;
t644 = t898 * t661 + t894 * t728;
t641 = -t893 * t682 + t897 * t683;
t640 = -t894 * t695 + t898 * t697 + t1032;
t639 = -t894 * t694 + t898 * t696 - t986;
t638 = t930 - t1044;
t637 = t699 + t929;
t632 = t898 * t695 + t894 * t697 - t1030;
t631 = t898 * t694 + t894 * t696 + t940;
t630 = t731 + t922;
t629 = t898 * t641 - t894 * t830 - t985;
t628 = t894 * t641 + t898 * t830 + t777;
t627 = t913 + t1044;
t626 = t699 + t912;
t625 = t898 * t647 + t894 * t679;
t622 = t731 + t923;
t621 = t898 * t652 - t894 * t665 - t986;
t620 = t898 * t653 - t894 * t664 - t1032;
t619 = pkin(1) * t634 - t673;
t618 = t894 * t652 + t898 * t665 + t940;
t617 = t894 * t653 + t898 * t664 + t1030;
t616 = -pkin(3) * t646 - t926;
t615 = -t895 * t648 + t899 * t649 - t987;
t614 = t899 * t648 + t895 * t649 + t730;
t613 = -pkin(8) * t646 + t924 * t679;
t612 = -t895 * t643 + t899 * t644;
t611 = t899 * t643 + t895 * t644;
t610 = -pkin(6) * t634 + pkin(7) * t954 - t895 * t672;
t609 = pkin(6) * t1018 + pkin(7) * t963 + t899 * t672 + t901;
t608 = -pkin(7) * t643 - (pkin(3) * t894 - pkin(8) * t898) * t660;
t607 = -t895 * t632 + t899 * t640 + t1043;
t606 = -t895 * t631 + t899 * t639 - t988;
t605 = t899 * t632 + t895 * t640 - t1042;
t604 = t899 * t631 + t895 * t639 + t941;
t603 = -t895 * t628 + t899 * t629 - t987;
t602 = t899 * t628 + t895 * t629 + t730;
t601 = -t895 * t624 + t899 * t625;
t600 = t899 * t624 + t895 * t625;
t599 = pkin(7) * t644 - (-pkin(3) * t898 - pkin(8) * t894 - pkin(2)) * t660;
t598 = -t895 * t618 + t899 * t621 - t988;
t597 = -t895 * t617 + t899 * t620 - t1043;
t596 = t899 * t618 + t895 * t621 + t941;
t595 = t899 * t617 + t895 * t620 + t1042;
t594 = pkin(1) * t611 + t942;
t593 = -pkin(7) * t624 + t898 * t613 - t894 * t616;
t592 = -pkin(2) * t646 + pkin(7) * t625 + t894 * t613 + t898 * t616;
t591 = pkin(1) * t600 + t907;
t590 = -pkin(6) * t611 - t895 * t599 + t899 * t608;
t589 = pkin(1) * t660 + pkin(6) * t612 + t899 * t599 + t895 * t608;
t588 = -pkin(6) * t600 - t895 * t592 + t899 * t593;
t587 = -pkin(1) * t646 + pkin(6) * t601 + t899 * t592 + t895 * t593;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t867, 0, -t866, 0, t928, -t849, -t919, -pkin(5) * t919, 0, 0, -t1001, 0, -t920, 0, t1020, t1023, t1017, pkin(5) * t1017 + pkin(6) * t953 - t896 * t739, 0, 0, -t1022, 0, -t1002, 0, t1034, t1039, -t1028, -pkin(5) * t1028 - t896 * t609 + t900 * t610, t657, t1037, t663, t656, t1035, t693, -t896 * t604 + t900 * t606 - t990, -t896 * t605 + t900 * t607 + t1045, -t896 * t614 + t900 * t615 - t989, t900 * t590 - t896 * t589 - pkin(5) * (t900 * t611 + t896 * t612), t657, t663, -t1037, t693, -t1035, t656, -t896 * t596 + t900 * t598 - t990, -t896 * t602 + t900 * t603 - t989, -t896 * t595 + t900 * t597 - t1045, t900 * t588 - t896 * t587 - pkin(5) * (t900 * t600 + t896 * t601); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t866, 0, t867, 0, t849, t928, t935, pkin(5) * t935, 0, 0, t920, 0, -t1001, 0, -t1023, t1020, t1019, pkin(5) * t1019 + pkin(6) * t962 + t900 * t739, 0, 0, t1002, 0, -t1022, 0, -t1039, t1034, t1029, pkin(5) * t1029 + t900 * t609 + t896 * t610, t655, -t1038, t662, t654, -t1036, t692, t900 * t604 + t896 * t606 + t650, t900 * t605 + t896 * t607 + t1046, t900 * t614 + t896 * t615 + t666, t896 * t590 + t900 * t589 + pkin(5) * (-t896 * t611 + t900 * t612), t655, t662, t1038, t692, t1036, t654, t900 * t596 + t896 * t598 + t650, t900 * t602 + t896 * t603 + t666, t900 * t595 + t896 * t597 - t1046, t896 * t588 + t900 * t587 + pkin(5) * (-t896 * t600 + t900 * t601); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t873, t874, 0, 0, 0, 0, 0, 0, 0, t885, t766, t765, 0, -t740, 0, 0, 0, 0, 0, t878, t689, t688, 0, t619, t791, t773, t804, t792, t810, 0, t637, t638, t630, t594, t791, t804, -t773, 0, -t810, t792, t626, t622, t627, t591; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t903, 0, 0, -g(3), -t873, 0, 0, 0, -t856, 0, -t853, 0, t1004, t823, t743, pkin(6) * t743, 0, 0, -t785, 0, -t780, 0, t1021, t723, -t634, t610, t709, t686, t719, t708, t717, t750, t606, t607, t615, t590, t709, t719, -t686, t750, -t717, t708, t598, t603, t597, t588; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t903, 0, qJDD(1), 0, g(3), 0, -t874, 0, 0, 0, t853, 0, -t856, 0, -t823, t1004, t937, t739, 0, 0, t780, 0, -t785, 0, -t723, t1021, t1018, t609, t707, -t685, t716, t706, -t715, t749, t604, t605, t614, t589, t707, t716, t685, t749, t715, t706, t596, t602, t595, t587; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t873, t874, 0, 0, 0, 0, 0, 0, 0, t885, t766, t765, 0, -t740, 0, 0, 0, 0, 0, t878, t689, t688, 0, t619, t791, t773, t804, t792, t810, 0, t637, t638, t630, t594, t791, t804, -t773, 0, -t810, t792, t626, t622, t627, t591; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t885, 0, -t884, 0, 0, -g(3), -t906, 0, 0, 0, -t846, 0, -t843, 0, t1003, t819, t676, pkin(7) * t676, t764, -t748, t772, t763, -t771, t814, t639, t640, t649, t608, t764, t772, t748, t814, t771, t763, t621, t629, t620, t593; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t884, 0, t885, 0, g(3), 0, t800, 0, 0, 0, t843, 0, -t846, 0, -t819, t1003, t938, t672, t762, -t746, t769, t761, -t768, t813, t631, t632, t648, t599, t762, t769, t746, t813, t768, t761, t618, t628, t617, t592; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t885, t906, -t800, 0, 0, 0, 0, 0, 0, 0, t878, t927, t904, 0, -t673, t791, t773, t804, t792, t810, 0, t929, t930, t922, t942, t791, t804, -t773, 0, -t810, t792, t912, t923, t913, t907; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t878, 0, -t877, 0, 0, -g(3), t737, 0, t798, -t776, t808, t797, -t807, t831, t696, t697, t660, pkin(8) * t660, t798, t808, t776, t831, t807, t797, t652, t641, t653, t613; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t877, 0, t878, 0, g(3), 0, t738, 0, t865, -t848, -t967, -t865, -t958, -qJDD(4), t694, t695, 0, pkin(3) * t660, t865, -t967, t848, -qJDD(4), t958, -t865, t665, t830, t664, t616; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t878, -t737, -t738, 0, 0, t791, t773, t804, t792, t810, 0, t943, t944, t931, t952, t791, t804, -t773, 0, -t810, t792, t915, t932, t916, t910; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t837, t839, t857, -t872, t862, t872, 0, t728, t712, 0, t837, t857, -t839, t872, -t862, -t872, qJ(5) * t839, t683, t670, -qJ(5) * t679; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t871, t836, -t861, t838, t858, -t871, -t728, 0, t713, 0, t871, -t861, -t836, -t871, -t858, t838, t671, t682, pkin(4) * t836, -pkin(4) * t679; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t865, t848, t967, t865, t958, qJDD(4), -t712, -t713, 0, 0, -t865, t967, -t848, qJDD(4), -t958, t865, t1006, -t830, t880 + t908, t926; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t837, t857, -t839, t872, -t862, -t872, 0, t691, -t679, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t865, t967, -t848, qJDD(4), -t958, t865, -t691, 0, t690, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t871, t861, t836, t871, t858, -t838, t679, -t690, 0, 0;];
m_new_reg = t1;
