% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRRP3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:49
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRRP3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP3_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP3_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP3_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRRP3_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:49:48
% EndTime: 2019-12-31 21:49:50
% DurationCPUTime: 2.02s
% Computational Cost: add. (5546->160), mult. (6675->183), div. (0->0), fcn. (3817->8), ass. (0->106)
t1148 = qJD(1) + qJD(2);
t1145 = qJD(3) + t1148;
t1143 = t1145 ^ 2;
t1153 = sin(qJ(4));
t1157 = cos(qJ(4));
t1133 = t1157 * t1143 * t1153;
t1129 = qJDD(4) - t1133;
t1150 = t1153 ^ 2;
t1161 = qJD(4) ^ 2;
t1130 = t1150 * t1143 + t1161;
t1109 = t1157 * t1129 - t1153 * t1130;
t1147 = qJDD(1) + qJDD(2);
t1144 = qJDD(3) + t1147;
t1174 = t1153 * t1144;
t1175 = t1145 * t1157;
t1185 = 2 * qJD(4);
t1114 = t1175 * t1185 + t1174;
t1154 = sin(qJ(3));
t1158 = cos(qJ(3));
t1088 = t1154 * t1109 + t1158 * t1114;
t1091 = t1158 * t1109 - t1154 * t1114;
t1155 = sin(qJ(2));
t1159 = cos(qJ(2));
t1071 = t1159 * t1088 + t1155 * t1091;
t1075 = t1155 * t1088 - t1159 * t1091;
t1156 = sin(qJ(1));
t1160 = cos(qJ(1));
t1191 = t1160 * t1071 - t1156 * t1075;
t1190 = t1156 * t1071 + t1160 * t1075;
t1119 = t1154 * t1143 - t1158 * t1144;
t1167 = -t1158 * t1143 - t1154 * t1144;
t1097 = t1159 * t1119 - t1155 * t1167;
t1184 = t1155 * t1119 + t1159 * t1167;
t1189 = t1156 * t1097 + t1160 * t1184;
t1188 = t1160 * t1097 - t1156 * t1184;
t1146 = t1148 ^ 2;
t1126 = t1155 * t1146 - t1159 * t1147;
t1166 = -t1159 * t1146 - t1155 * t1147;
t1183 = t1156 * t1126 + t1160 * t1166;
t1182 = t1160 * t1126 - t1156 * t1166;
t1177 = t1157 * g(3);
t1176 = t1145 * t1153;
t1172 = t1157 * t1144;
t1139 = t1156 * g(1) - t1160 * g(2);
t1164 = qJDD(1) * pkin(1) + t1139;
t1140 = -t1160 * g(1) - t1156 * g(2);
t1162 = qJD(1) ^ 2;
t1165 = -t1162 * pkin(1) + t1140;
t1104 = t1155 * t1164 + t1159 * t1165;
t1102 = -t1146 * pkin(2) + t1104;
t1103 = -t1155 * t1165 + t1159 * t1164;
t1163 = t1147 * pkin(2) + t1103;
t1084 = t1158 * t1102 + t1154 * t1163;
t1151 = t1157 ^ 2;
t1170 = t1150 + t1151;
t1169 = qJD(4) * t1176;
t1080 = -t1143 * pkin(3) + t1144 * pkin(8) + t1084;
t1077 = -t1153 * g(3) + t1157 * t1080;
t1083 = -t1154 * t1102 + t1158 * t1163;
t1106 = t1153 * t1129 + t1157 * t1130;
t1079 = -t1144 * pkin(3) - t1143 * pkin(8) - t1083;
t1135 = -t1156 * qJDD(1) - t1160 * t1162;
t1134 = t1160 * qJDD(1) - t1156 * t1162;
t1131 = -t1151 * t1143 - t1161;
t1128 = qJDD(4) + t1133;
t1121 = t1170 * t1143;
t1116 = t1170 * t1144;
t1115 = -0.2e1 * t1169 + t1172;
t1113 = (-pkin(4) * t1157 - qJ(5) * t1153) * t1145;
t1108 = -t1153 * t1128 + t1157 * t1131;
t1105 = t1157 * t1128 + t1153 * t1131;
t1096 = t1158 * t1116 - t1154 * t1121;
t1093 = t1154 * t1116 + t1158 * t1121;
t1090 = t1158 * t1108 - t1154 * t1115;
t1087 = t1154 * t1108 + t1158 * t1115;
t1086 = -t1155 * t1103 + t1159 * t1104;
t1085 = t1159 * t1103 + t1155 * t1104;
t1082 = -t1155 * t1093 + t1159 * t1096;
t1081 = t1159 * t1093 + t1155 * t1096;
t1076 = -t1153 * t1080 - t1177;
t1073 = -t1155 * t1087 + t1159 * t1090;
t1070 = t1159 * t1087 + t1155 * t1090;
t1069 = t1177 + qJDD(5) - t1161 * qJ(5) - qJDD(4) * pkin(4) + (t1113 * t1145 + t1080) * t1153;
t1068 = -t1161 * pkin(4) + qJDD(4) * qJ(5) + (qJD(5) * t1185) + t1113 * t1175 + t1077;
t1067 = -(-t1169 + t1172) * pkin(4) + (pkin(4) * qJD(4) - (2 * qJD(5))) * t1176 + t1079 - t1114 * qJ(5);
t1066 = -t1154 * t1083 + t1158 * t1084;
t1065 = t1158 * t1083 + t1154 * t1084;
t1064 = -t1156 * t1081 + t1160 * t1082;
t1063 = t1160 * t1081 + t1156 * t1082;
t1062 = -t1153 * t1076 + t1157 * t1077;
t1061 = t1157 * t1076 + t1153 * t1077;
t1060 = -t1156 * t1070 + t1160 * t1073;
t1059 = t1160 * t1070 + t1156 * t1073;
t1058 = t1157 * t1068 + t1153 * t1069;
t1057 = t1153 * t1068 - t1157 * t1069;
t1056 = t1158 * t1062 + t1154 * t1079;
t1055 = t1154 * t1062 - t1158 * t1079;
t1054 = -t1155 * t1065 + t1159 * t1066;
t1053 = t1159 * t1065 + t1155 * t1066;
t1052 = t1158 * t1058 + t1154 * t1067;
t1051 = t1154 * t1058 - t1158 * t1067;
t1050 = -t1155 * t1055 + t1159 * t1056;
t1049 = t1159 * t1055 + t1155 * t1056;
t1048 = -t1155 * t1051 + t1159 * t1052;
t1047 = t1159 * t1051 + t1155 * t1052;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1135, -t1134, 0, -t1156 * t1139 + t1160 * t1140, 0, 0, 0, 0, 0, 0, t1183, t1182, 0, -t1156 * t1085 + t1160 * t1086, 0, 0, 0, 0, 0, 0, t1189, t1188, 0, -t1156 * t1053 + t1160 * t1054, 0, 0, 0, 0, 0, 0, t1060, t1190, t1064, -t1156 * t1049 + t1160 * t1050, 0, 0, 0, 0, 0, 0, t1060, t1064, -t1190, -t1156 * t1047 + t1160 * t1048; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1134, t1135, 0, t1160 * t1139 + t1156 * t1140, 0, 0, 0, 0, 0, 0, -t1182, t1183, 0, t1160 * t1085 + t1156 * t1086, 0, 0, 0, 0, 0, 0, -t1188, t1189, 0, t1160 * t1053 + t1156 * t1054, 0, 0, 0, 0, 0, 0, t1059, -t1191, t1063, t1160 * t1049 + t1156 * t1050, 0, 0, 0, 0, 0, 0, t1059, t1063, t1191, t1160 * t1047 + t1156 * t1048; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1105, -t1106, 0, t1061, 0, 0, 0, 0, 0, 0, t1105, 0, t1106, t1057; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1162, -qJDD(1), 0, t1140, 0, 0, 0, 0, 0, 0, t1166, t1126, 0, t1086, 0, 0, 0, 0, 0, 0, t1184, t1097, 0, t1054, 0, 0, 0, 0, 0, 0, t1073, t1075, t1082, t1050, 0, 0, 0, 0, 0, 0, t1073, t1082, -t1075, t1048; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1162, 0, t1139, 0, 0, 0, 0, 0, 0, -t1126, t1166, 0, t1085, 0, 0, 0, 0, 0, 0, -t1097, t1184, 0, t1053, 0, 0, 0, 0, 0, 0, t1070, -t1071, t1081, t1049, 0, 0, 0, 0, 0, 0, t1070, t1081, t1071, t1047; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1105, -t1106, 0, t1061, 0, 0, 0, 0, 0, 0, t1105, 0, t1106, t1057; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1146, -t1147, 0, t1104, 0, 0, 0, 0, 0, 0, t1167, t1119, 0, t1066, 0, 0, 0, 0, 0, 0, t1090, -t1091, t1096, t1056, 0, 0, 0, 0, 0, 0, t1090, t1096, t1091, t1052; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1147, -t1146, 0, t1103, 0, 0, 0, 0, 0, 0, -t1119, t1167, 0, t1065, 0, 0, 0, 0, 0, 0, t1087, -t1088, t1093, t1055, 0, 0, 0, 0, 0, 0, t1087, t1093, t1088, t1051; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1105, -t1106, 0, t1061, 0, 0, 0, 0, 0, 0, t1105, 0, t1106, t1057; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1143, -t1144, 0, t1084, 0, 0, 0, 0, 0, 0, t1108, -t1109, t1116, t1062, 0, 0, 0, 0, 0, 0, t1108, t1116, t1109, t1058; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1144, -t1143, 0, t1083, 0, 0, 0, 0, 0, 0, t1115, -t1114, t1121, -t1079, 0, 0, 0, 0, 0, 0, t1115, t1121, t1114, -t1067; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1105, -t1106, 0, t1061, 0, 0, 0, 0, 0, 0, t1105, 0, t1106, t1057; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1131, -t1129, t1172, t1077, 0, 0, 0, 0, 0, 0, t1131, t1172, t1129, t1068; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1128, -t1130, -t1174, t1076, 0, 0, 0, 0, 0, 0, t1128, -t1174, t1130, -t1069; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1115, t1114, -t1121, t1079, 0, 0, 0, 0, 0, 0, -t1115, -t1121, -t1114, t1067; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1131, t1172, t1129, t1068; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1115, -t1121, -t1114, t1067; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1128, t1174, -t1130, t1069;];
f_new_reg = t1;
