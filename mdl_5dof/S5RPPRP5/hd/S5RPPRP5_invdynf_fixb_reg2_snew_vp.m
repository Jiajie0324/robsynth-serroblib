% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPPRP5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:54
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPPRP5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRP5_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRP5_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRP5_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRP5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPPRP5_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:54:07
% EndTime: 2019-12-31 17:54:09
% DurationCPUTime: 2.10s
% Computational Cost: add. (2804->186), mult. (7010->179), div. (0->0), fcn. (4463->6), ass. (0->107)
t1249 = sin(pkin(7));
t1250 = cos(pkin(7));
t1251 = sin(qJ(4));
t1253 = cos(qJ(4));
t1266 = t1249 * t1251 + t1250 * t1253;
t1221 = t1266 * qJD(1);
t1284 = qJD(1) * t1250;
t1285 = qJD(1) * t1249;
t1223 = -t1251 * t1284 + t1253 * t1285;
t1281 = t1223 * t1221;
t1198 = -qJDD(4) - t1281;
t1218 = t1223 ^ 2;
t1255 = qJD(4) ^ 2;
t1291 = -t1218 - t1255;
t1176 = t1198 * t1251 + t1253 * t1291;
t1178 = t1198 * t1253 - t1251 * t1291;
t1159 = t1176 * t1249 + t1178 * t1250;
t1252 = sin(qJ(1));
t1254 = cos(qJ(1));
t1242 = t1249 * qJDD(1);
t1243 = t1250 * qJDD(1);
t1220 = t1242 * t1253 - t1243 * t1251;
t1261 = -0.2e1 * qJD(4) * t1221 + t1220;
t1306 = t1159 * t1252 + t1254 * t1261;
t1305 = t1159 * t1254 - t1252 * t1261;
t1263 = t1266 * qJDD(1);
t1282 = t1223 * qJD(4);
t1199 = 0.2e1 * t1282 + t1263;
t1197 = qJDD(4) - t1281;
t1201 = t1221 ^ 2;
t1292 = -t1201 - t1255;
t1297 = -t1197 * t1251 + t1253 * t1292;
t1298 = t1197 * t1253 + t1251 * t1292;
t1300 = t1249 * t1298 + t1250 * t1297;
t1304 = t1254 * t1199 + t1252 * t1300;
t1303 = -t1252 * t1199 + t1254 * t1300;
t1149 = t1176 * t1250 - t1178 * t1249;
t1185 = t1218 + t1201;
t1289 = t1220 * t1251 - t1253 * t1263;
t1290 = -t1220 * t1253 - t1251 * t1263;
t1296 = t1249 * t1290 + t1250 * t1289;
t1302 = -t1185 * t1254 + t1252 * t1296;
t1301 = t1185 * t1252 + t1254 * t1296;
t1299 = t1249 * t1297 - t1250 * t1298;
t1295 = t1249 * t1289 - t1250 * t1290;
t1256 = qJD(1) ^ 2;
t1245 = t1249 ^ 2;
t1246 = t1250 ^ 2;
t1272 = t1245 + t1246;
t1229 = t1272 * t1256;
t1288 = 2 * qJD(2);
t1287 = t1250 * g(3);
t1286 = qJ(3) * t1249;
t1280 = t1245 * t1256;
t1279 = t1246 * t1256;
t1278 = t1250 * t1256;
t1233 = -g(1) * t1254 - g(2) * t1252;
t1224 = -pkin(1) * t1256 + qJDD(1) * qJ(2) + t1233;
t1203 = -g(3) * t1249 + t1224 * t1250 + t1284 * t1288;
t1268 = -pkin(2) * t1250 - t1286;
t1227 = t1268 * qJD(1);
t1186 = t1227 * t1284 + t1203;
t1179 = -pkin(3) * t1279 - pkin(6) * t1243 + t1186;
t1267 = t1224 + (t1288 + t1227) * qJD(1);
t1269 = qJDD(3) + t1287;
t1259 = (-pkin(3) * t1278 - pkin(6) * qJDD(1) + t1267) * t1249 + t1269;
t1155 = t1179 * t1253 + t1251 * t1259;
t1271 = t1252 * qJDD(1);
t1270 = t1254 * qJDD(1);
t1232 = t1252 * g(1) - g(2) * t1254;
t1154 = -t1179 * t1251 + t1253 * t1259;
t1225 = t1249 * t1229;
t1265 = -t1225 * t1252 + t1249 * t1270;
t1264 = t1225 * t1254 + t1249 * t1271;
t1262 = t1256 * qJ(2) - qJDD(2) + t1232;
t1260 = 0.2e1 * qJD(3) * t1285 + t1262;
t1180 = (t1286 + pkin(1) + (pkin(2) + pkin(3)) * t1250) * qJDD(1) + t1260 + (-t1280 - t1279) * pkin(6);
t1234 = t1249 * t1278;
t1231 = -t1254 * t1256 - t1271;
t1230 = -t1252 * t1256 + t1270;
t1228 = t1272 * qJDD(1);
t1226 = t1250 * t1229;
t1217 = qJDD(1) * pkin(1) + t1262;
t1207 = -t1226 * t1254 - t1250 * t1271;
t1206 = -t1226 * t1252 + t1250 * t1270;
t1205 = t1228 * t1254 - t1229 * t1252;
t1204 = t1228 * t1252 + t1229 * t1254;
t1202 = -0.2e1 * qJD(2) * t1285 - t1249 * t1224 - t1287;
t1192 = (pkin(1) - t1268) * qJDD(1) + t1260;
t1191 = pkin(4) * t1221 - qJ(5) * t1223;
t1183 = t1249 * t1267 + t1269;
t1171 = -t1202 * t1249 + t1203 * t1250;
t1170 = t1202 * t1250 + t1203 * t1249;
t1161 = t1183 * t1249 + t1186 * t1250;
t1160 = -t1183 * t1250 + t1186 * t1249;
t1147 = -(-t1263 - t1282) * pkin(4) + (pkin(4) * qJD(4) - (2 * qJD(5))) * t1223 + t1180 - t1261 * qJ(5);
t1146 = -qJDD(4) * pkin(4) - qJ(5) * t1255 + t1191 * t1223 + qJDD(5) - t1154;
t1145 = -pkin(4) * t1255 + qJDD(4) * qJ(5) + 0.2e1 * qJD(5) * qJD(4) - t1191 * t1221 + t1155;
t1144 = -t1154 * t1251 + t1155 * t1253;
t1143 = t1154 * t1253 + t1155 * t1251;
t1142 = t1145 * t1253 + t1146 * t1251;
t1141 = t1145 * t1251 - t1146 * t1253;
t1140 = t1143 * t1249 + t1144 * t1250;
t1139 = -t1143 * t1250 + t1144 * t1249;
t1138 = t1141 * t1249 + t1142 * t1250;
t1137 = -t1141 * t1250 + t1142 * t1249;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1231, -t1230, 0, -t1232 * t1252 + t1233 * t1254, 0, 0, 0, 0, 0, 0, t1207, t1264, t1205, t1171 * t1254 - t1217 * t1252, 0, 0, 0, 0, 0, 0, t1207, t1205, -t1264, t1161 * t1254 - t1192 * t1252, 0, 0, 0, 0, 0, 0, t1303, t1305, t1301, t1140 * t1254 - t1180 * t1252, 0, 0, 0, 0, 0, 0, t1303, t1301, -t1305, t1138 * t1254 - t1147 * t1252; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1230, t1231, 0, t1232 * t1254 + t1233 * t1252, 0, 0, 0, 0, 0, 0, t1206, -t1265, t1204, t1171 * t1252 + t1217 * t1254, 0, 0, 0, 0, 0, 0, t1206, t1204, t1265, t1161 * t1252 + t1192 * t1254, 0, 0, 0, 0, 0, 0, t1304, t1306, t1302, t1140 * t1252 + t1180 * t1254, 0, 0, 0, 0, 0, 0, t1304, t1302, -t1306, t1138 * t1252 + t1147 * t1254; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1170, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1160, 0, 0, 0, 0, 0, 0, t1299, -t1149, t1295, t1139, 0, 0, 0, 0, 0, 0, t1299, t1295, t1149, t1137; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1256, -qJDD(1), 0, t1233, 0, 0, 0, 0, 0, 0, -t1226, t1225, t1228, t1171, 0, 0, 0, 0, 0, 0, -t1226, t1228, -t1225, t1161, 0, 0, 0, 0, 0, 0, t1300, t1159, t1296, t1140, 0, 0, 0, 0, 0, 0, t1300, t1296, -t1159, t1138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1256, 0, t1232, 0, 0, 0, 0, 0, 0, t1243, -t1242, t1229, t1217, 0, 0, 0, 0, 0, 0, t1243, t1229, t1242, t1192, 0, 0, 0, 0, 0, 0, t1199, t1261, -t1185, t1180, 0, 0, 0, 0, 0, 0, t1199, -t1185, -t1261, t1147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1170, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1160, 0, 0, 0, 0, 0, 0, t1299, -t1149, t1295, t1139, 0, 0, 0, 0, 0, 0, t1299, t1295, t1149, t1137; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1279, t1234, t1243, t1203, 0, 0, 0, 0, 0, 0, -t1279, t1243, -t1234, t1186, 0, 0, 0, 0, 0, 0, t1297, t1178, t1289, t1144, 0, 0, 0, 0, 0, 0, t1297, t1289, -t1178, t1142; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1234, -t1280, -t1242, t1202, 0, 0, 0, 0, 0, 0, t1234, -t1242, t1280, -t1183, 0, 0, 0, 0, 0, 0, -t1298, -t1176, -t1290, -t1143, 0, 0, 0, 0, 0, 0, -t1298, -t1290, t1176, -t1141; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1243, t1242, -t1229, -t1217, 0, 0, 0, 0, 0, 0, -t1243, -t1229, -t1242, -t1192, 0, 0, 0, 0, 0, 0, -t1199, -t1261, t1185, -t1180, 0, 0, 0, 0, 0, 0, -t1199, t1185, t1261, -t1147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1279, t1243, -t1234, t1186, 0, 0, 0, 0, 0, 0, t1297, t1178, t1289, t1144, 0, 0, 0, 0, 0, 0, t1297, t1289, -t1178, t1142; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1243, -t1229, -t1242, -t1192, 0, 0, 0, 0, 0, 0, -t1199, -t1261, t1185, -t1180, 0, 0, 0, 0, 0, 0, -t1199, t1185, t1261, -t1147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1234, t1242, -t1280, t1183, 0, 0, 0, 0, 0, 0, t1298, t1176, t1290, t1143, 0, 0, 0, 0, 0, 0, t1298, t1290, -t1176, t1141; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1292, t1198, -t1263, t1155, 0, 0, 0, 0, 0, 0, t1292, -t1263, -t1198, t1145; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1197, t1291, -t1220, t1154, 0, 0, 0, 0, 0, 0, t1197, -t1220, -t1291, -t1146; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1199, t1261, -t1185, t1180, 0, 0, 0, 0, 0, 0, t1199, -t1185, -t1261, t1147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1292, -t1263, -t1198, t1145; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1199, -t1185, -t1261, t1147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1197, t1220, t1291, t1146;];
f_new_reg = t1;
