% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRRP5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:41
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRRP5_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP5_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP5_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP5_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP5_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP5_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:41:09
% EndTime: 2019-12-31 18:41:17
% DurationCPUTime: 9.15s
% Computational Cost: add. (26553->453), mult. (40171->530), div. (0->0), fcn. (22113->8), ass. (0->314)
t885 = qJD(4) ^ 2;
t869 = qJD(1) + qJD(3);
t867 = t869 ^ 2;
t879 = sin(qJ(4));
t872 = t879 ^ 2;
t943 = t867 * t872;
t846 = t885 + t943;
t882 = cos(qJ(4));
t851 = t882 * t867 * t879;
t841 = qJDD(4) - t851;
t937 = t882 * t841;
t794 = -t846 * t879 + t937;
t931 = qJD(4) * t869;
t858 = t882 * t931;
t868 = qJDD(1) + qJDD(3);
t938 = t879 * t868;
t822 = 0.2e1 * t858 + t938;
t880 = sin(qJ(3));
t883 = cos(qJ(3));
t741 = t794 * t880 + t822 * t883;
t744 = t794 * t883 - t822 * t880;
t876 = sin(pkin(8));
t877 = cos(pkin(8));
t686 = t741 * t877 + t744 * t876;
t690 = t741 * t876 - t744 * t877;
t881 = sin(qJ(1));
t884 = cos(qJ(1));
t1027 = pkin(5) * (t686 * t881 + t690 * t884);
t1026 = pkin(5) * (t686 * t884 - t690 * t881);
t1025 = pkin(1) * t686;
t1024 = qJ(2) * t686;
t948 = t841 * t879;
t788 = t846 * t882 + t948;
t1023 = -pkin(1) * t788 - qJ(2) * t690;
t831 = t867 * t883 + t868 * t880;
t834 = t867 * t880 - t868 * t883;
t769 = t831 * t876 + t834 * t877;
t874 = g(3) - qJDD(2);
t803 = pkin(6) * t831 - t874 * t883;
t990 = pkin(6) * t834 - t874 * t880;
t1003 = qJ(2) * t769 + t803 * t876 + t877 * t990;
t765 = t831 * t877 - t834 * t876;
t702 = qJ(2) * t765 + t803 * t877 - t876 * t990;
t989 = t765 * t884 - t769 * t881;
t1020 = pkin(5) * t989 - t1003 * t881 + t884 * t702;
t857 = t879 * t931;
t936 = t882 * t868;
t825 = -0.2e1 * t857 + t936;
t952 = t825 * t882;
t957 = t822 * t879;
t761 = -t952 + t957;
t873 = t882 ^ 2;
t836 = (t872 - t873) * t867;
t731 = t761 * t880 + t836 * t883;
t733 = t761 * t883 - t836 * t880;
t674 = t731 * t877 + t733 * t876;
t675 = t731 * t876 - t733 * t877;
t1019 = t674 * t884 - t675 * t881;
t1018 = t674 * t881 + t675 * t884;
t942 = t867 * t873;
t848 = -t885 + t942;
t792 = -t848 * t882 + t948;
t753 = t792 * t880 + t883 * t936;
t756 = t792 * t883 - t880 * t936;
t704 = t753 * t877 + t756 * t876;
t706 = t753 * t876 - t756 * t877;
t1017 = t704 * t884 - t706 * t881;
t1016 = t704 * t881 + t706 * t884;
t1004 = t765 * t881 + t769 * t884;
t1015 = pkin(5) * t1004 + t1003 * t884 + t881 * t702;
t1014 = pkin(2) * t741;
t1013 = pkin(6) * t741;
t1011 = -pkin(2) * t788 + pkin(6) * t744;
t853 = g(1) * t884 + g(2) * t881;
t886 = qJD(1) ^ 2;
t897 = pkin(1) * t886 + t853;
t852 = g(1) * t881 - t884 * g(2);
t900 = qJDD(1) * pkin(1) + t852;
t776 = t876 * t900 - t877 * t897;
t774 = -t886 * pkin(2) + t776;
t889 = t876 * t897 + t877 * t900;
t888 = qJDD(1) * pkin(2) + t889;
t723 = t774 * t880 - t883 * t888;
t724 = t883 * t774 + t880 * t888;
t921 = t723 * t880 + t883 * t724;
t661 = t723 * t883 - t724 * t880;
t961 = t661 * t877;
t620 = -t876 * t921 + t961;
t962 = t661 * t876;
t998 = t877 * t921 + t962;
t1010 = t620 * t881 + t884 * t998;
t1009 = t620 * t884 - t881 * t998;
t920 = t877 * t776 - t876 * t889;
t728 = -t776 * t876 - t877 * t889;
t959 = t728 * t884;
t1000 = -t881 * t920 + t959;
t960 = t728 * t881;
t999 = t884 * t920 + t960;
t997 = -pkin(3) * t822 - pkin(7) * t794;
t994 = pkin(3) * t788;
t993 = pkin(7) * t788;
t714 = -t867 * pkin(3) + t868 * pkin(7) + t724;
t860 = t882 * t874;
t907 = -pkin(4) * t882 - qJ(5) * t879;
t958 = t907 * t867;
t672 = -qJDD(4) * pkin(4) - t885 * qJ(5) + (t714 + t958) * t879 + qJDD(5) + t860;
t840 = qJDD(4) + t851;
t849 = -t885 - t942;
t992 = pkin(4) * t840 + qJ(5) * t849 - t672;
t823 = t858 + t938;
t991 = t823 + t858;
t842 = qJDD(1) * t876 + t877 * t886;
t808 = qJ(2) * t842 - t874 * t877;
t843 = qJDD(1) * t877 - t876 * t886;
t902 = -qJ(2) * t843 - t874 * t876;
t978 = t884 * t842 + t843 * t881;
t988 = pkin(5) * t978 + t884 * t808 - t881 * t902;
t782 = -t842 * t881 + t884 * t843;
t987 = -pkin(5) * t782 + t881 * t808 + t884 * t902;
t693 = t714 * t879 + t860;
t694 = t882 * t714 - t879 * t874;
t642 = t879 * t693 + t882 * t694;
t784 = t848 * t879 + t937;
t975 = pkin(1) * t874;
t828 = t882 * t840;
t785 = t849 * t879 + t828;
t974 = pkin(3) * t785;
t949 = t840 * t879;
t791 = t849 * t882 - t949;
t740 = t791 * t880 + t825 * t883;
t743 = t791 * t883 - t825 * t880;
t685 = t740 * t877 + t743 * t876;
t688 = -t740 * t876 + t743 * t877;
t971 = pkin(5) * (t685 * t884 + t688 * t881);
t932 = t872 + t873;
t827 = t932 * t868;
t835 = t932 * t867;
t771 = t827 * t880 + t835 * t883;
t772 = t827 * t883 - t835 * t880;
t719 = t771 * t877 + t772 * t876;
t720 = -t771 * t876 + t772 * t877;
t970 = pkin(5) * (t719 * t884 + t720 * t881);
t968 = pkin(6) * t740;
t967 = pkin(6) * t771;
t966 = pkin(7) * t785;
t965 = qJ(2) * t685;
t964 = qJ(2) * t719;
t955 = t822 * t882;
t953 = t825 * t879;
t941 = t869 * t879;
t713 = -t868 * pkin(3) - t867 * pkin(7) + t723;
t709 = t879 * t713;
t710 = t882 * t713;
t935 = -pkin(3) * t713 + pkin(7) * t642;
t934 = pkin(3) * t825 + pkin(7) * t791;
t933 = pkin(3) * t835 + pkin(7) * t827;
t930 = (qJD(5) * qJD(4));
t927 = t709 + t997;
t926 = -t710 + t934;
t628 = t642 * t880 - t713 * t883;
t925 = pkin(2) * t628 + t935;
t924 = -pkin(1) * t785 + qJ(2) * t688;
t923 = -pkin(2) * t785 + pkin(6) * t743;
t918 = -t852 * t881 - t884 * t853;
t917 = t880 * t851;
t916 = t883 * t851;
t864 = 2 * t930;
t903 = -t885 * pkin(4) + qJDD(4) * qJ(5) + t882 * t958 + t694;
t671 = t864 + t903;
t667 = pkin(4) * t835 + t671;
t668 = qJ(5) * t835 + t672;
t915 = t882 * t667 + t879 * t668 + t933;
t914 = t933 + t642;
t913 = t927 - t1014;
t737 = pkin(2) * t740;
t912 = t737 + t926;
t845 = qJDD(1) * t884 - t881 * t886;
t910 = -pkin(5) * t845 - g(3) * t881;
t909 = -pkin(2) * t834 - t723;
t908 = -pkin(4) * t672 + qJ(5) * t671;
t906 = pkin(4) * t879 - qJ(5) * t882;
t764 = pkin(2) * t771;
t905 = t764 + t915;
t904 = t764 + t914;
t641 = t693 * t882 - t694 * t879;
t758 = t953 + t955;
t901 = t852 * t884 - t853 * t881;
t824 = -t857 + t936;
t894 = -t824 * pkin(4) - t991 * qJ(5) + t713;
t892 = 0.2e1 * qJD(5) * t941 - t894;
t656 = -pkin(4) * t857 + qJ(5) * t822 + t892;
t899 = pkin(4) * t955 + t879 * t656 - t997;
t657 = (t825 - t857) * pkin(4) + t892;
t898 = qJ(5) * t953 + t882 * t657 + t934;
t896 = t899 + t1014;
t895 = t737 + t898;
t632 = t671 * t882 + t672 * t879;
t665 = (pkin(4) * qJD(4) - 0.2e1 * qJD(5)) * t941 + t894;
t893 = pkin(7) * t632 + (-pkin(3) + t907) * t665;
t891 = pkin(4) * t846 + qJ(5) * t841 + t903;
t609 = t632 * t880 - t665 * t883;
t890 = pkin(2) * t609 + t893;
t887 = -pkin(2) * t831 - t724;
t847 = -t885 + t943;
t844 = qJDD(1) * t881 + t884 * t886;
t817 = -pkin(5) * t844 + g(3) * t884;
t816 = t906 * t868;
t815 = t932 * t931;
t799 = qJDD(4) * t880 + t815 * t883;
t798 = -qJDD(4) * t883 + t815 * t880;
t797 = t823 * t882 - t872 * t931;
t796 = -t824 * t879 - t873 * t931;
t793 = t847 * t879 + t828;
t787 = -t847 * t882 + t949;
t778 = t991 * t879;
t777 = (t824 - t857) * t882;
t763 = pkin(6) * t772;
t757 = t793 * t883 + t880 * t938;
t754 = t793 * t880 - t883 * t938;
t751 = t797 * t883 - t917;
t750 = t796 * t883 + t917;
t749 = t797 * t880 + t916;
t748 = t796 * t880 - t916;
t747 = pkin(1) * t843 + t889;
t746 = -pkin(1) * t842 - t776;
t735 = -t798 * t876 + t799 * t877;
t734 = t798 * t877 + t799 * t876;
t725 = pkin(1) * t728;
t722 = qJ(2) * t920 + t975;
t716 = pkin(1) * t719;
t715 = qJ(2) * t720;
t708 = -t754 * t876 + t757 * t877;
t705 = t754 * t877 + t757 * t876;
t698 = -t749 * t876 + t751 * t877;
t697 = -t748 * t876 + t750 * t877;
t696 = t749 * t877 + t751 * t876;
t695 = t748 * t877 + t750 * t876;
t684 = pkin(1) * t685;
t682 = t710 + t993;
t681 = t709 - t966;
t680 = -t734 * t881 + t735 * t884;
t679 = t734 * t884 + t735 * t881;
t678 = t694 + t994;
t677 = t693 - t974;
t670 = -pkin(1) * t769 + t909;
t669 = -pkin(1) * t765 + t887;
t658 = pkin(2) * t661;
t654 = pkin(2) * t874 + pkin(6) * t921;
t653 = pkin(5) * (-t719 * t881 + t720 * t884);
t650 = -t974 - t992;
t649 = -t891 - (2 * t930) - t994;
t648 = -t705 * t881 + t708 * t884;
t647 = t705 * t884 + t708 * t881;
t646 = -t696 * t881 + t698 * t884;
t645 = -t695 * t881 + t697 * t884;
t644 = t696 * t884 + t698 * t881;
t643 = t695 * t884 + t697 * t881;
t638 = -pkin(4) * t957 + t656 * t882 - t993;
t637 = qJ(5) * t952 - t657 * t879 - t966;
t635 = pkin(5) * (-t685 * t881 + t688 * t884);
t634 = t641 * t883 - t967;
t633 = t641 * t880 + t763;
t631 = t671 * t879 - t672 * t882;
t629 = t642 * t883 + t713 * t880;
t627 = -t667 * t879 + t668 * t882;
t625 = t913 - t1025;
t624 = t684 + t912;
t623 = -t678 * t880 + t682 * t883 + t1013;
t622 = -t677 * t880 + t681 * t883 - t968;
t617 = t678 * t883 + t682 * t880 - t1011;
t616 = t677 * t883 + t681 * t880 + t923;
t615 = t716 + t904;
t614 = t627 * t883 - t816 * t880 - t967;
t613 = t627 * t880 + t816 * t883 + t763;
t612 = t896 + t1025;
t611 = t684 + t895;
t610 = t632 * t883 + t665 * t880;
t607 = t716 + t905;
t606 = t637 * t883 - t650 * t880 - t968;
t605 = t638 * t883 - t649 * t880 - t1013;
t604 = t637 * t880 + t650 * t883 + t923;
t603 = t638 * t880 + t649 * t883 + t1011;
t602 = -pkin(1) * t620 - t658;
t601 = -pkin(3) * t631 - t908;
t600 = -pkin(7) * t631 + t906 * t665;
t599 = -t633 * t876 + t634 * t877 - t964;
t598 = t633 * t877 + t634 * t876 + t715;
t597 = -t628 * t876 + t629 * t877;
t596 = t628 * t877 + t629 * t876;
t595 = pkin(6) * t961 + qJ(2) * t620 - t654 * t876;
t594 = pkin(6) * t962 + qJ(2) * t998 + t654 * t877 + t975;
t593 = -pkin(6) * t628 - (pkin(3) * t880 - pkin(7) * t883) * t641;
t592 = -t617 * t876 + t623 * t877 + t1024;
t591 = -t616 * t876 + t622 * t877 - t965;
t590 = t617 * t877 + t623 * t876 - t1023;
t589 = t616 * t877 + t622 * t876 + t924;
t588 = -t613 * t876 + t614 * t877 - t964;
t587 = t613 * t877 + t614 * t876 + t715;
t586 = -t609 * t876 + t610 * t877;
t585 = t609 * t877 + t610 * t876;
t584 = pkin(6) * t629 - (-pkin(3) * t883 - pkin(7) * t880 - pkin(2)) * t641;
t583 = -t604 * t876 + t606 * t877 - t965;
t582 = -t603 * t876 + t605 * t877 - t1024;
t581 = t604 * t877 + t606 * t876 + t924;
t580 = t603 * t877 + t605 * t876 + t1023;
t579 = pkin(1) * t596 + t925;
t578 = -pkin(6) * t609 + t600 * t883 - t601 * t880;
t577 = -pkin(2) * t631 + pkin(6) * t610 + t600 * t880 + t601 * t883;
t576 = pkin(1) * t585 + t890;
t575 = -qJ(2) * t596 - t584 * t876 + t593 * t877;
t574 = pkin(1) * t641 + qJ(2) * t597 + t584 * t877 + t593 * t876;
t573 = -qJ(2) * t585 - t577 * t876 + t578 * t877;
t572 = -pkin(1) * t631 + qJ(2) * t586 + t577 * t877 + t578 * t876;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t845, 0, -t844, 0, t910, -t817, -t901, -pkin(5) * t901, 0, 0, t782, 0, -t978, 0, t987, t988, t1000, pkin(5) * t1000 + qJ(2) * t959 - t881 * t722, 0, 0, -t1004, 0, -t989, 0, t1015, t1020, t1009, pkin(5) * t1009 - t881 * t594 + t884 * t595, t646, t1018, t648, t645, t1016, t680, -t589 * t881 + t591 * t884 - t971, -t881 * t590 + t884 * t592 + t1026, -t598 * t881 + t599 * t884 - t970, t884 * t575 - t881 * t574 - pkin(5) * (t596 * t884 + t597 * t881), t646, t648, -t1018, t680, -t1016, t645, -t581 * t881 + t583 * t884 - t971, -t587 * t881 + t588 * t884 - t970, -t881 * t580 + t884 * t582 - t1026, t884 * t573 - t881 * t572 - pkin(5) * (t585 * t884 + t586 * t881); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t844, 0, t845, 0, t817, t910, t918, pkin(5) * t918, 0, 0, t978, 0, t782, 0, -t988, t987, t999, pkin(5) * t999 + qJ(2) * t960 + t884 * t722, 0, 0, t989, 0, -t1004, 0, -t1020, t1015, t1010, pkin(5) * t1010 + t884 * t594 + t881 * t595, t644, -t1019, t647, t643, -t1017, t679, t589 * t884 + t591 * t881 + t635, t884 * t590 + t881 * t592 + t1027, t598 * t884 + t599 * t881 + t653, t881 * t575 + t884 * t574 + pkin(5) * (-t596 * t881 + t597 * t884), t644, t647, t1019, t679, t1017, t643, t581 * t884 + t583 * t881 + t635, t587 * t884 + t588 * t881 + t653, t884 * t580 + t881 * t582 - t1027, t881 * t573 + t884 * t572 + pkin(5) * (-t585 * t881 + t586 * t884); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t852, t853, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t747, t746, 0, -t725, 0, 0, 0, 0, 0, t868, t670, t669, 0, t602, t778, t758, t787, t777, t784, 0, t624, t625, t615, t579, t778, t787, -t758, 0, -t784, t777, t611, t607, t612, t576; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t886, 0, 0, -g(3), -t852, 0, 0, 0, t843, 0, -t842, 0, t902, t808, t728, qJ(2) * t728, 0, 0, -t769, 0, -t765, 0, t1003, t702, t620, t595, t698, t675, t708, t697, t706, t735, t591, t592, t599, t575, t698, t708, -t675, t735, -t706, t697, t583, t588, t582, t573; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t886, 0, qJDD(1), 0, g(3), 0, -t853, 0, 0, 0, t842, 0, t843, 0, -t808, t902, t920, t722, 0, 0, t765, 0, -t769, 0, -t702, t1003, t998, t594, t696, -t674, t705, t695, -t704, t734, t589, t590, t598, t574, t696, t705, t674, t734, t704, t695, t581, t587, t580, t572; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t852, t853, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t747, t746, 0, -t725, 0, 0, 0, 0, 0, t868, t670, t669, 0, t602, t778, t758, t787, t777, t784, 0, t624, t625, t615, t579, t778, t787, -t758, 0, -t784, t777, t611, t607, t612, t576; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t886, 0, 0, -t874, -t889, 0, 0, 0, -t834, 0, -t831, 0, t990, t803, t661, pkin(6) * t661, t751, -t733, t757, t750, -t756, t799, t622, t623, t634, t593, t751, t757, t733, t799, t756, t750, t606, t614, t605, t578; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t886, 0, qJDD(1), 0, t874, 0, t776, 0, 0, 0, t831, 0, -t834, 0, -t803, t990, t921, t654, t749, -t731, t754, t748, -t753, t798, t616, t617, t633, t584, t749, t754, t731, t798, t753, t748, t604, t613, t603, t577; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t889, -t776, 0, 0, 0, 0, 0, 0, 0, t868, t909, t887, 0, -t658, t778, t758, t787, t777, t784, 0, t912, t913, t904, t925, t778, t787, -t758, 0, -t784, t777, t895, t905, t896, t890; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t868, 0, -t867, 0, 0, -t874, t723, 0, t797, -t761, t793, t796, -t792, t815, t681, t682, t641, pkin(7) * t641, t797, t793, t761, t815, t792, t796, t637, t627, t638, t600; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t867, 0, t868, 0, t874, 0, t724, 0, t851, -t836, -t938, -t851, -t936, -qJDD(4), t677, t678, 0, pkin(3) * t641, t851, -t938, t836, -qJDD(4), t936, -t851, t650, t816, t649, t601; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t868, -t723, -t724, 0, 0, t778, t758, t787, t777, t784, 0, t926, t927, t914, t935, t778, t787, -t758, 0, -t784, t777, t898, t915, t899, t893; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t823, t825, t840, -t858, t848, t858, 0, t713, t693, 0, t823, t840, -t825, t858, -t848, -t858, qJ(5) * t825, t668, t656, -qJ(5) * t665; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t857, t822, -t847, t824, t841, -t857, -t713, 0, t694, 0, t857, -t847, -t822, -t857, -t841, t824, t657, t667, pkin(4) * t822, -pkin(4) * t665; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t851, t836, t938, t851, t936, qJDD(4), -t693, -t694, 0, 0, -t851, t938, -t836, qJDD(4), -t936, t851, t992, -t816, t864 + t891, t908; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t823, t840, -t825, t858, -t848, -t858, 0, t672, -t665, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t851, t938, -t836, qJDD(4), -t936, t851, -t672, 0, t671, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t857, t847, t822, t857, t841, -t824, t665, -t671, 0, 0;];
m_new_reg = t1;
