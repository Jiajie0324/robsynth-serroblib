% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S5RRRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4,d5]';
% 
% Output:
% tau_reg [5x(5*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:23
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S5RRRRR7_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR7_invdynJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR7_invdynJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR7_invdynJ_fixb_reg2_slag_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR7_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRR7_invdynJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:22:33
% EndTime: 2019-12-31 22:22:48
% DurationCPUTime: 7.76s
% Computational Cost: add. (12685->557), mult. (30112->720), div. (0->0), fcn. (22017->14), ass. (0->277)
t223 = cos(qJ(5));
t310 = qJD(5) * t223;
t224 = cos(qJ(2));
t365 = cos(qJ(3));
t295 = t365 * t224;
t276 = qJD(1) * t295;
t220 = sin(qJ(3));
t221 = sin(qJ(2));
t314 = qJD(1) * t221;
t293 = t220 * t314;
t148 = t276 - t293;
t157 = t220 * t224 + t365 * t221;
t149 = t157 * qJD(1);
t219 = sin(qJ(4));
t364 = cos(qJ(4));
t104 = -t364 * t148 + t149 * t219;
t384 = t104 * t223;
t385 = t310 + t384;
t218 = sin(qJ(5));
t291 = qJD(4) * t364;
t312 = qJD(4) * t219;
t213 = qJD(2) + qJD(3);
t284 = qJDD(1) * t365;
t306 = t224 * qJDD(1);
t277 = -t213 * t276 - t220 * t306 - t221 * t284;
t91 = t213 * t293 + t277;
t307 = t221 * qJDD(1);
t382 = t213 * t157;
t92 = qJD(1) * t382 + t220 * t307 - t224 * t284;
t238 = t148 * t291 - t149 * t312 - t219 * t92 - t364 * t91;
t253 = t219 * t148 + t364 * t149;
t283 = qJD(4) + t213;
t262 = t223 * t283;
t212 = qJDD(2) + qJDD(3);
t280 = qJDD(4) + t212;
t311 = qJD(5) * t218;
t29 = -qJD(5) * t262 - t218 * t280 - t223 * t238 + t253 * t311;
t26 = t29 * t218;
t95 = t218 * t283 + t223 * t253;
t16 = t385 * t95 - t26;
t380 = qJD(5) + t104;
t285 = t219 * t91 - t364 * t92;
t52 = qJD(4) * t253 - t285;
t50 = qJDD(5) + t52;
t46 = t218 * t50;
t15 = -t253 * t95 + t385 * t380 + t46;
t226 = -pkin(7) - pkin(6);
t178 = t226 * t221;
t164 = qJD(1) * t178;
t354 = qJD(2) * pkin(2);
t155 = t164 + t354;
t179 = t226 * t224;
t166 = qJD(1) * t179;
t296 = t365 * t166;
t112 = t220 * t155 - t296;
t359 = t148 * pkin(8);
t90 = t112 + t359;
t347 = t219 * t90;
t150 = t220 * t166;
t111 = t365 * t155 + t150;
t142 = t149 * pkin(8);
t89 = t111 - t142;
t82 = pkin(3) * t213 + t89;
t57 = t364 * t82 - t347;
t55 = -pkin(4) * t283 - t57;
t351 = t104 * t55;
t383 = t104 * t253;
t217 = qJ(2) + qJ(3);
t211 = qJ(4) + t217;
t201 = sin(t211);
t225 = cos(qJ(1));
t329 = t201 * t225;
t222 = sin(qJ(1));
t330 = t201 * t222;
t381 = g(1) * t329 + g(2) * t330;
t45 = -t104 ^ 2 + t253 ^ 2;
t75 = pkin(4) * t253 + pkin(9) * t104;
t308 = qJD(1) * qJD(2);
t289 = t224 * t308;
t123 = qJDD(2) * pkin(2) - t226 * (-t289 - t307);
t290 = t221 * t308;
t124 = t226 * (-t290 + t306);
t68 = -qJD(3) * t112 + t365 * t123 + t220 * t124;
t43 = t212 * pkin(3) + t91 * pkin(8) + t68;
t292 = qJD(3) * t365;
t313 = qJD(3) * t220;
t278 = -t220 * t123 + t365 * t124 - t155 * t292 - t166 * t313;
t49 = -pkin(8) * t92 - t278;
t10 = t219 * t43 + t82 * t291 - t90 * t312 + t364 * t49;
t358 = t224 * pkin(2);
t206 = pkin(1) + t358;
t177 = t206 * qJD(1);
t125 = -pkin(3) * t148 - t177;
t196 = g(3) * t201;
t202 = cos(t211);
t327 = t202 * t225;
t328 = t202 * t222;
t299 = g(1) * t327 + g(2) * t328 + t196;
t245 = t125 * t104 - t10 + t299;
t37 = t104 * t283 + t238;
t93 = t218 * t253 - t262;
t263 = t218 * t95 + t223 * t93;
t375 = -t29 * t223 - t95 * t311;
t339 = qJD(5) * t95;
t30 = t218 * t238 - t223 * t280 + t339;
t376 = t218 * t30 + t93 * t310;
t4 = -t104 * t263 + t375 - t376;
t286 = t219 * t49 - t364 * t43;
t302 = t364 * t90;
t58 = t219 * t82 + t302;
t11 = -qJD(4) * t58 - t286;
t9 = -pkin(4) * t280 - t11;
t378 = t9 * t218 + t55 * t310;
t205 = t365 * pkin(2) + pkin(3);
t320 = t219 * t220;
t109 = t205 * t291 + (-t220 * t312 + (t364 * t365 - t320) * qJD(3)) * pkin(2);
t120 = -t220 * t164 + t296;
t247 = t120 - t359;
t121 = t365 * t164 + t150;
t97 = -t142 + t121;
t63 = t219 * t247 + t364 * t97;
t342 = t109 - t63;
t294 = t364 * t220;
t341 = -t219 * t97 + t364 * t247 + t205 * t312 + (t220 * t291 + (t365 * t219 + t294) * qJD(3)) * pkin(2);
t338 = t380 * t253;
t373 = t111 * t213;
t270 = g(1) * t222 - g(2) * t225;
t372 = t270 * t201;
t127 = t220 * t178 - t365 * t179;
t371 = t202 * pkin(4) + t201 * pkin(9);
t56 = pkin(9) * t283 + t58;
t61 = pkin(4) * t104 - pkin(9) * t253 + t125;
t23 = -t218 * t56 + t223 * t61;
t24 = t218 * t61 + t223 * t56;
t370 = -t23 * t218 + t24 * t223;
t47 = t223 * t50;
t369 = t253 * t93 + t47;
t53 = t55 * t311;
t368 = t381 * t223 - t253 * t23 + t53;
t362 = g(3) * t202;
t367 = t218 * t362 + t253 * t24 + t378;
t241 = -t125 * t253 - t286 - t362 + t381;
t38 = t253 * t213 + t285;
t363 = pkin(3) * t149;
t210 = cos(t217);
t361 = g(3) * t210;
t360 = g(3) * t224;
t143 = pkin(2) * t290 - t206 * qJDD(1);
t78 = pkin(3) * t92 + t143;
t13 = pkin(4) * t52 - pkin(9) * t238 + t78;
t8 = pkin(9) * t280 + t10;
t2 = qJD(5) * t23 + t13 * t218 + t223 * t8;
t1 = t2 * t223;
t357 = t95 * t93;
t353 = t380 * t23;
t352 = t380 * t24;
t350 = t218 * t24;
t255 = t220 * t221 - t295;
t234 = t213 * t255;
t246 = t364 * t255;
t65 = qJD(4) * t246 + t157 * t312 + t219 * t382 + t364 * t234;
t349 = t218 * t65;
t348 = t218 * t93;
t346 = t223 * t65;
t345 = t223 * t95;
t28 = t30 * t223;
t340 = pkin(6) * qJDD(1);
t337 = t380 * t218;
t331 = t149 * t148;
t209 = sin(t217);
t326 = t209 * t222;
t325 = t209 * t225;
t324 = t210 * t222;
t323 = t210 * t225;
t322 = t218 * t222;
t321 = t218 * t225;
t319 = t222 * t223;
t318 = t223 * t225;
t145 = pkin(2) * t294 + t219 * t205;
t215 = t221 ^ 2;
t216 = t224 ^ 2;
t316 = t215 - t216;
t315 = t215 + t216;
t304 = pkin(9) * qJD(5) * t380;
t208 = t221 * t354;
t228 = qJD(1) ^ 2;
t300 = t221 * t228 * t224;
t298 = -t9 - t362;
t297 = qJD(2) * t226;
t200 = pkin(3) * t210;
t288 = t200 + t358;
t168 = -pkin(2) * t221 - pkin(3) * t209;
t287 = -pkin(4) * t201 + t168;
t126 = t365 * t178 + t220 * t179;
t281 = t1 - t299;
t279 = pkin(3) * t291;
t275 = t221 * t289;
t59 = t219 * t89 + t302;
t274 = pkin(3) * t312 - t59;
t272 = -pkin(9) * t50 + t351;
t271 = g(1) * t225 + g(2) * t222;
t268 = -t104 * t57 + t253 * t58;
t140 = pkin(9) + t145;
t267 = -t140 * t50 + t351;
t203 = t219 * pkin(3) + pkin(9);
t266 = -t203 * t50 + t351;
t265 = t223 * t23 + t350;
t118 = t157 * t219 + t246;
t248 = t219 * t255;
t119 = t364 * t157 - t248;
t130 = pkin(3) * t255 - t206;
t72 = t118 * pkin(4) - t119 * pkin(9) + t130;
t100 = -pkin(8) * t157 + t126;
t101 = -pkin(8) * t255 + t127;
t74 = t219 * t100 + t364 * t101;
t39 = -t218 * t74 + t223 * t72;
t40 = t218 * t72 + t223 * t74;
t261 = -t104 * t350 - t23 * t384 + t281;
t260 = -qJD(5) * t61 + t196 - t8;
t259 = t271 * t201;
t258 = t271 * t209;
t257 = -0.2e1 * pkin(1) * t308 - pkin(6) * qJDD(2);
t165 = t221 * t297;
t167 = t224 * t297;
t254 = -t220 * t165 + t365 * t167;
t80 = t365 * t165 + t220 * t167 + t178 * t292 + t179 * t313;
t69 = t363 + t75;
t144 = -pkin(2) * t320 + t364 * t205;
t227 = qJD(2) ^ 2;
t244 = 0.2e1 * qJDD(1) * pkin(1) - pkin(6) * t227 + t270;
t243 = pkin(1) * t228 + t271 - t340;
t242 = g(1) * t323 + g(2) * t324 + g(3) * t209 + t177 * t148 + t278;
t240 = t298 * t223 + t368;
t12 = t223 * t13;
t3 = -qJD(5) * t24 - t218 * t8 + t12;
t239 = -qJD(5) * t265 - t3 * t218 + t1;
t169 = pkin(9) * t328;
t170 = pkin(9) * t327;
t237 = -g(1) * (-pkin(4) * t329 + t170) - g(2) * (-pkin(4) * t330 + t169);
t236 = -t218 * t259 + t367;
t231 = g(1) * t325 + g(2) * t326 + t177 * t149 - t361 + t68;
t108 = pkin(3) * t382 + t208;
t230 = pkin(8) * t234 - t178 * t313 + t179 * t292 + t254;
t214 = -pkin(8) + t226;
t207 = pkin(2) * t314;
t204 = -t364 * pkin(3) - pkin(4);
t163 = pkin(1) + t288;
t154 = t225 * t163;
t139 = -pkin(4) - t144;
t137 = t202 * t318 + t322;
t136 = -t202 * t321 + t319;
t135 = -t202 * t319 + t321;
t134 = t202 * t322 + t318;
t128 = t207 + t363;
t96 = -t148 ^ 2 + t149 ^ 2;
t81 = -t127 * qJD(3) + t254;
t77 = t149 * t213 - t92;
t76 = -t277 + (-t148 - t293) * t213;
t73 = -t364 * t100 + t101 * t219;
t71 = -pkin(8) * t382 + t80;
t66 = -qJD(4) * t248 + t157 * t291 - t219 * t234 + t364 * t382;
t64 = t207 + t69;
t60 = t364 * t89 - t347;
t36 = t218 * t75 + t223 * t57;
t35 = -t218 * t57 + t223 * t75;
t34 = t218 * t64 + t223 * t63;
t33 = -t218 * t63 + t223 * t64;
t32 = t218 * t69 + t223 * t60;
t31 = -t218 * t60 + t223 * t69;
t22 = t66 * pkin(4) + t65 * pkin(9) + t108;
t19 = t74 * qJD(4) + t219 * t71 - t364 * t230;
t18 = t100 * t291 - t101 * t312 + t219 * t230 + t364 * t71;
t17 = t348 * t380 - t28;
t14 = -t337 * t380 + t369;
t6 = -qJD(5) * t40 - t18 * t218 + t22 * t223;
t5 = qJD(5) * t39 + t18 * t223 + t218 * t22;
t7 = [0, 0, 0, 0, 0, qJDD(1), t270, t271, 0, 0, qJDD(1) * t215 + 0.2e1 * t275, 0.2e1 * t221 * t306 - 0.2e1 * t316 * t308, qJDD(2) * t221 + t224 * t227, qJDD(1) * t216 - 0.2e1 * t275, qJDD(2) * t224 - t221 * t227, 0, t221 * t257 + t224 * t244, -t221 * t244 + t224 * t257, 0.2e1 * t315 * t340 - t271, -g(1) * (-pkin(1) * t222 + pkin(6) * t225) - g(2) * (pkin(1) * t225 + pkin(6) * t222) + (t315 * pkin(6) ^ 2 + pkin(1) ^ 2) * qJDD(1), -t149 * t234 - t91 * t157, -t157 * t92 + t255 * t91 + t213 * (-t148 * t255 - t149 * t157), t157 * t212 - t213 * t234, -t148 * t382 + t255 * t92, -t212 * t255 - t213 * t382, 0, g(1) * t324 - g(2) * t323 + t126 * t212 + t143 * t255 - t148 * t208 - t177 * t382 - t206 * t92 + t81 * t213, -g(1) * t326 + g(2) * t325 - t127 * t212 + t143 * t157 + t149 * t208 + t177 * t234 + t206 * t91 - t80 * t213, -t112 * t382 + t126 * t91 - t127 * t92 + t80 * t148 - t81 * t149 - t68 * t157 - t271 + (t278 + t373) * t255, -t278 * t127 + t112 * t80 + t68 * t126 + t111 * t81 - t143 * t206 - t177 * t208 - g(1) * (-t206 * t222 - t225 * t226) - g(2) * (t206 * t225 - t222 * t226), t119 * t238 - t253 * t65, t104 * t65 - t118 * t238 - t119 * t52 - t253 * t66, t119 * t280 - t283 * t65, t104 * t66 + t118 * t52, -t118 * t280 - t283 * t66, 0, t108 * t104 + t78 * t118 + t125 * t66 + t130 * t52 - t19 * t283 + t202 * t270 - t280 * t73, t108 * t253 + t78 * t119 - t125 * t65 + t130 * t238 - t18 * t283 - t280 * t74 - t372, -t10 * t118 - t104 * t18 - t11 * t119 + t19 * t253 + t238 * t73 - t52 * t74 + t57 * t65 - t58 * t66 - t271, t10 * t74 + t58 * t18 - t11 * t73 - t57 * t19 + t78 * t130 + t125 * t108 - g(1) * (-t163 * t222 - t214 * t225) - g(2) * (-t214 * t222 + t154), t375 * t119 - t65 * t345, t263 * t65 + (t26 - t28 + (-t345 + t348) * qJD(5)) * t119, t119 * t47 - t118 * t29 + t66 * t95 + (-t119 * t311 - t346) * t380, t376 * t119 - t65 * t348, -t119 * t46 - t118 * t30 - t66 * t93 + (-t119 * t310 + t349) * t380, t118 * t50 + t380 * t66, -g(1) * t135 - g(2) * t137 + t118 * t3 + t378 * t119 + t19 * t93 + t23 * t66 + t30 * t73 - t55 * t349 + t380 * t6 + t39 * t50, -t55 * t346 - g(1) * t134 - g(2) * t136 - t380 * t5 - t118 * t2 + t19 * t95 - t24 * t66 - t29 * t73 - t40 * t50 + (t9 * t223 - t53) * t119, t29 * t39 - t30 * t40 - t5 * t93 - t6 * t95 + t265 * t65 + t372 + (-qJD(5) * t370 - t2 * t218 - t223 * t3) * t119, -g(2) * t154 + t55 * t19 + t2 * t40 + t23 * t6 + t24 * t5 + t3 * t39 + t9 * t73 + (g(1) * t214 - g(2) * t371) * t225 + (-g(1) * (-t163 - t371) + g(2) * t214) * t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t300, t316 * t228, t307, t300, t306, qJDD(2), t221 * t243 - t360, g(3) * t221 + t224 * t243, 0, 0, -t331, t96, t76, t331, t77, t212, -t120 * t213 + (t148 * t314 + t365 * t212 - t213 * t313) * pkin(2) + t231, t121 * t213 + (-t149 * t314 - t220 * t212 - t213 * t292) * pkin(2) + t242, (t112 + t120) * t149 + (t111 - t121) * t148 + (t91 * t365 - t92 * t220 + (t365 * t148 + t149 * t220) * qJD(3)) * pkin(2), -t111 * t120 - t112 * t121 + (t365 * t68 - t360 - t278 * t220 + (-t111 * t220 + t112 * t365) * qJD(3) + (qJD(1) * t177 + t271) * t221) * pkin(2), t383, t45, t37, -t383, t38, t280, t144 * t280 - t128 * t104 + (-t58 - t341) * qJD(4) + t241 - t341 * t213, -t128 * t253 - t145 * t280 - t342 * t283 + t245, -t104 * t342 - t144 * t238 - t145 * t52 + t253 * t341 + t268, -g(3) * t288 + t10 * t145 + t11 * t144 - t125 * t128 - t168 * t271 - t341 * t57 + t342 * t58, t16, t4, t15, t17, t14, -t338, t139 * t30 + t341 * t93 + t267 * t218 + (-t218 * t109 - t140 * t310 - t33) * t380 + t240, -t139 * t29 + t341 * t95 + t267 * t223 + (-t223 * t109 + t140 * t311 + t34) * t380 + t236, t33 * t95 + t34 * t93 + (-t109 * t93 - t140 * t30 + (t140 * t95 - t23) * qJD(5)) * t223 + (t109 * t95 - t140 * t29 - t3 + (t140 * t93 - t24) * qJD(5)) * t218 + t261, t9 * t139 - t24 * t34 - t23 * t33 - g(1) * (t225 * t287 + t170) - g(2) * (t222 * t287 + t169) - g(3) * (t288 + t371) + t341 * t55 + t370 * t109 + t239 * t140; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t331, t96, t76, t331, t77, t212, t112 * t213 + t231, t242 + t373, 0, 0, t383, t45, t37, -t383, t38, t280, t59 * t213 + (t59 - t58) * qJD(4) + (-t149 * t104 + t364 * t280 - t283 * t312) * pkin(3) + t241, t60 * t283 + (-t149 * t253 - t219 * t280 - t283 * t291) * pkin(3) + t245, t60 * t104 - t59 * t253 + (-t364 * t238 - t219 * t52 + (-t364 * t104 + t219 * t253) * qJD(4)) * pkin(3) + t268, t57 * t59 - t58 * t60 + (t364 * t11 - t361 + t10 * t219 - t125 * t149 + t258 + (-t219 * t57 + t364 * t58) * qJD(4)) * pkin(3), t16, t4, t15, t17, t14, -t338, t204 * t30 + t274 * t93 + t266 * t218 + (-t203 * t310 - t218 * t279 - t31) * t380 + t240, -t204 * t29 + t274 * t95 + t266 * t223 + (t203 * t311 - t223 * t279 + t32) * t380 + t236, t31 * t95 + t32 * t93 + (-t93 * t279 - t203 * t30 + (t203 * t95 - t23) * qJD(5)) * t223 + (t95 * t279 - t203 * t29 - t3 + (t203 * t93 - t24) * qJD(5)) * t218 + t261, t9 * t204 - t24 * t32 - t23 * t31 - t55 * t59 - g(3) * (t200 + t371) + (t258 + (t219 * t55 + t364 * t370) * qJD(4)) * pkin(3) + t239 * t203 + t237; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t383, t45, t37, -t383, t38, t280, t213 * t58 + t241, t283 * t57 + t245, 0, 0, t16, t4, t15, t337 * t93 - t28, -t218 * t380 ^ 2 + t369, -t338, -pkin(4) * t30 - t380 * t35 - t58 * t93 + t272 * t218 + (t298 - t304) * t223 + t368, pkin(4) * t29 + t380 * t36 - t58 * t95 + t272 * t223 + (-t259 + t304) * t218 + t367, t35 * t95 + t36 * t93 + (-t353 + (-t30 + t339) * pkin(9)) * t223 + (-t3 - t352 + (qJD(5) * t93 - t29) * pkin(9)) * t218 + t281, -t9 * pkin(4) + pkin(9) * t239 - g(3) * t371 - t23 * t35 - t24 * t36 - t55 * t58 + t237; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t357, -t93 ^ 2 + t95 ^ 2, t380 * t93 - t29, -t357, t380 * t95 - t30, t50, -g(1) * t136 + g(2) * t134 + t218 * t260 - t310 * t56 - t55 * t95 + t12 + t352, g(1) * t137 - g(2) * t135 + t353 + t55 * t93 + (qJD(5) * t56 - t13) * t218 + t260 * t223, 0, 0;];
tau_reg = t7;
