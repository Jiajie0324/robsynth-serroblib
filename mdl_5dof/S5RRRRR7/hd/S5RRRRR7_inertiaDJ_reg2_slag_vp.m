% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S5RRRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4,d5]';
% 
% Output:
% MMD_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:23
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S5RRRRR7_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR7_inertiaDJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR7_inertiaDJ_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRR7_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:22:27
% EndTime: 2019-12-31 22:22:34
% DurationCPUTime: 2.39s
% Computational Cost: add. (5088->220), mult. (11246->395), div. (0->0), fcn. (10737->8), ass. (0->133)
t83 = sin(qJ(5));
t81 = t83 ^ 2;
t86 = cos(qJ(5));
t82 = t86 ^ 2;
t176 = t81 + t82;
t167 = cos(qJ(3));
t139 = t167 * pkin(2);
t122 = t139 + pkin(3);
t166 = cos(qJ(4));
t108 = t166 * t122;
t131 = t167 * qJD(3);
t127 = pkin(2) * t131;
t165 = sin(qJ(3));
t130 = t165 * qJD(3);
t84 = sin(qJ(4));
t35 = -qJD(4) * t108 - t166 * t127 + (t165 * qJD(4) + t130) * t84 * pkin(2);
t180 = t176 * t35;
t121 = t166 * t165;
t179 = (qJD(3) + qJD(4)) * pkin(2) * (t167 * t84 + t121);
t153 = t81 - t82;
t174 = t153 * qJD(5);
t151 = qJD(4) * t84;
t171 = -pkin(7) - pkin(6);
t123 = t171 * t165;
t113 = qJD(2) * t123;
t124 = t171 * t167;
t114 = qJD(2) * t124;
t85 = sin(qJ(2));
t61 = t85 * t124;
t87 = cos(qJ(2));
t66 = t171 * t87;
t26 = -qJD(3) * t61 - t87 * t113 - t85 * t114 - t66 * t130;
t105 = -t165 * t87 - t167 * t85;
t99 = t105 * qJD(3);
t90 = t105 * qJD(2) + t99;
t22 = t90 * pkin(8) - t26;
t135 = t165 * t85;
t106 = -t167 * t87 + t135;
t60 = t85 * t123;
t44 = -t167 * t66 + t60;
t29 = -t106 * pkin(8) + t44;
t172 = -(t167 * qJD(2) + t131) * t87 + qJD(2) * t135 + t85 * t130;
t88 = -pkin(8) * t172 + qJD(3) * t60 + t85 * t113 - t87 * t114 - t66 * t131;
t43 = t165 * t66 + t61;
t109 = pkin(8) * t105 + t43;
t97 = t166 * t109;
t6 = -qJD(4) * t97 + t29 * t151 - t166 * t22 + t84 * t88;
t96 = t166 * t106;
t41 = -t105 * t84 + t96;
t100 = t84 * t106;
t42 = -t105 * t166 - t100;
t79 = -t87 * pkin(2) - pkin(1);
t47 = t106 * pkin(3) + t79;
t92 = t41 * pkin(4) - t42 * pkin(9) + t47;
t178 = -qJD(5) * t92 + t6;
t24 = t84 * t109 + t166 * t29;
t11 = -t83 * t24 + t86 * t92;
t12 = t86 * t24 + t83 * t92;
t175 = -t11 * t83 + t12 * t86;
t23 = t84 * t29 - t97;
t7 = t24 * qJD(4) + t166 * t88 + t84 * t22;
t170 = t23 * t7;
t169 = t85 * pkin(2);
t80 = qJD(5) * t86;
t168 = t23 * t80 + t7 * t83;
t16 = qJD(4) * t96 - t105 * t151 + t166 * t172 - t84 * t90;
t162 = t16 * t86;
t140 = pkin(3) * t151;
t36 = t140 + t179;
t161 = t23 * t36;
t160 = t23 * t84;
t159 = t42 * t16;
t158 = t42 * t83;
t157 = t42 * t86;
t138 = t165 * pkin(2);
t52 = -t84 * t138 + t108;
t48 = -pkin(4) - t52;
t156 = t36 * t83 + t48 * t80;
t132 = qJD(4) * t166;
t125 = pkin(3) * t132;
t51 = t176 * t125;
t78 = -t166 * pkin(3) - pkin(4);
t155 = t83 * t140 + t78 * t80;
t53 = pkin(2) * t121 + t84 * t122;
t152 = qJD(4) * pkin(3);
t149 = qJD(5) * t83;
t148 = t85 * qJD(2);
t147 = t87 * qJD(2);
t17 = -qJD(4) * t100 - t105 * t132 - t166 * t90 - t172 * t84;
t146 = 0.2e1 * t41 * t17;
t145 = -0.2e1 * pkin(1) * qJD(2);
t144 = t83 * t162;
t143 = pkin(4) * t149;
t142 = pkin(4) * t80;
t141 = pkin(2) * t148;
t137 = t83 * t80;
t136 = t85 * t147;
t45 = t48 * t149;
t133 = -t36 * t86 + t45;
t129 = -0.2e1 * t140;
t40 = t42 ^ 2;
t128 = t40 * t137;
t126 = pkin(2) * t130;
t120 = t11 * t86 + t12 * t83;
t118 = t35 * t41 + t36 * t42;
t49 = pkin(9) + t53;
t117 = t41 * t49 - t42 * t48;
t77 = t84 * pkin(3) + pkin(9);
t116 = t41 * t77 - t42 * t78;
t63 = t78 * t149;
t115 = -t86 * t140 + t63;
t112 = -t16 * t83 + t42 * t80;
t111 = t42 * t149 + t162;
t110 = t41 * t149 - t17 * t86;
t107 = t176 * t166;
t104 = (-t166 * t41 + t42 * t84) * qJD(4);
t101 = t79 * t105;
t98 = -t16 * t48 - t17 * t49 + t118;
t33 = -pkin(3) * t99 + (-t105 * pkin(3) + t169) * qJD(2);
t89 = t17 * pkin(4) + t16 * pkin(9) + t33;
t2 = t24 * t149 + t178 * t86 - t83 * t89;
t3 = t178 * t83 - t24 * t80 + t86 * t89;
t1 = -t120 * qJD(5) - t2 * t86 - t3 * t83;
t93 = pkin(3) * t104 - t16 * t78 - t17 * t77;
t73 = -0.2e1 * t137;
t72 = 0.2e1 * t137;
t58 = -0.2e1 * t174;
t27 = -t44 * qJD(3) + (t87 * t124 - t60) * qJD(2);
t20 = t23 * t149;
t14 = t17 * t83 + t41 * t80;
t10 = t42 * t174 + t144;
t8 = -0.4e1 * t42 * t137 + t153 * t16;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t136, 0.2e1 * (-t85 ^ 2 + t87 ^ 2) * qJD(2), 0, -0.2e1 * t136, 0, 0, t85 * t145, t87 * t145, 0, 0, 0.2e1 * t105 * t172, -0.2e1 * t105 * t90 + 0.2e1 * t106 * t172, 0, -0.2e1 * t106 * t90, 0, 0, -0.2e1 * qJD(3) * t101 + 0.2e1 * (t106 * t169 - t101) * qJD(2), -0.2e1 * t105 * t141 - 0.2e1 * t172 * t79, 0.2e1 * t105 * t27 + 0.2e1 * t26 * t106 + 0.2e1 * t172 * t43 + 0.2e1 * t44 * t90, 0.2e1 * t79 * t141 - 0.2e1 * t26 * t44 + 0.2e1 * t27 * t43, -0.2e1 * t159, 0.2e1 * t16 * t41 - 0.2e1 * t17 * t42, 0, t146, 0, 0, 0.2e1 * t17 * t47 + 0.2e1 * t33 * t41, -0.2e1 * t16 * t47 + 0.2e1 * t33 * t42, -0.2e1 * t16 * t23 - 0.2e1 * t17 * t24 + 0.2e1 * t41 * t6 + 0.2e1 * t42 * t7, -0.2e1 * t24 * t6 + 0.2e1 * t33 * t47 + 0.2e1 * t170, -0.2e1 * t82 * t159 - 0.2e1 * t128, 0.4e1 * t42 * t144 + 0.2e1 * t40 * t174, -0.2e1 * t111 * t41 + 0.2e1 * t17 * t157, -0.2e1 * t81 * t159 + 0.2e1 * t128, -0.2e1 * t112 * t41 - 0.2e1 * t17 * t158, t146, 0.2e1 * t11 * t17 + 0.2e1 * t112 * t23 + 0.2e1 * t7 * t158 + 0.2e1 * t3 * t41, -0.2e1 * t111 * t23 - 0.2e1 * t12 * t17 + 0.2e1 * t7 * t157 + 0.2e1 * t2 * t41, 0.2e1 * t120 * t16 + 0.2e1 * (-qJD(5) * t175 + t2 * t83 - t3 * t86) * t42, 0.2e1 * t11 * t3 - 0.2e1 * t12 * t2 + 0.2e1 * t170; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t147, 0, -t148, 0, -pkin(6) * t147, pkin(6) * t148, 0, 0, 0, 0, -t172, 0, t90, 0, t27, t26, -t105 * t126 - t106 * t127 + t90 * t138 + t139 * t172, (-t26 * t165 + t167 * t27 + (-t165 * t43 + t167 * t44) * qJD(3)) * pkin(2), 0, 0, -t16, 0, -t17, 0, -t7, t6, t16 * t52 - t17 * t53 + t118, -t24 * t35 - t52 * t7 - t53 * t6 + t161, -t10, t8, t14, t10, -t110, 0, t20 + (-qJD(5) * t117 - t7) * t86 + t98 * t83, t117 * t149 + t86 * t98 + t168, t1, t1 * t49 - t175 * t35 + t48 * t7 + t161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t126, -0.2e1 * t127, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t36, 0.2e1 * t35, 0, -0.2e1 * t35 * t53 - 0.2e1 * t36 * t52, t72, t58, 0, t73, 0, 0, 0.2e1 * t133, 0.2e1 * t156, -0.2e1 * t180, -0.2e1 * t180 * t49 + 0.2e1 * t36 * t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t172, 0, t90, 0, t27, t26, 0, 0, 0, 0, -t16, 0, -t17, 0, -t7, t6, (t166 * t16 - t17 * t84 + t104) * pkin(3), (-t166 * t7 - t6 * t84 + (t166 * t24 + t160) * qJD(4)) * pkin(3), -t10, t8, t14, t10, -t110, 0, t20 + (-qJD(5) * t116 - t7) * t86 + t93 * t83, t116 * t149 + t86 * t93 + t168, t1, t7 * t78 + (t175 * t166 + t160) * t152 + t1 * t77; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t126, -t127, 0, 0, 0, 0, 0, 0, 0, 0, t129 - t179, -t125 + t35, 0, (-t166 * t36 - t35 * t84 + (t166 * t53 - t52 * t84) * qJD(4)) * pkin(3), t72, t58, 0, t73, 0, 0, t45 + t63 + (-t36 - t140) * t86, t155 + t156, t51 - t180, t36 * t78 - t77 * t180 + (t107 * t49 + t48 * t84) * t152; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t129, -0.2e1 * t125, 0, 0, t72, t58, 0, t73, 0, 0, 0.2e1 * t115, 0.2e1 * t155, 0.2e1 * t51, 0.2e1 * (t107 * t77 + t78 * t84) * t152; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t16, 0, -t17, 0, -t7, t6, 0, 0, -t10, t8, t14, t10, -t110, 0, t20 + (pkin(4) * t16 - pkin(9) * t17) * t83 + (-t7 + (-pkin(4) * t42 - pkin(9) * t41) * qJD(5)) * t86, pkin(4) * t111 + pkin(9) * t110 + t168, t1, -pkin(4) * t7 + pkin(9) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t36, t35, 0, 0, t72, t58, 0, t73, 0, 0, t133 - t143, -t142 + t156, -t180, -pkin(4) * t36 - pkin(9) * t180; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t140, -t125, 0, 0, t72, t58, 0, t73, 0, 0, t115 - t143, -t142 + t155, t51, (-pkin(4) * t84 + pkin(9) * t107) * t152; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, t58, 0, t73, 0, 0, -0.2e1 * t143, -0.2e1 * t142, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t111, 0, -t112, t17, t3, t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, 0, -t149, 0, t35 * t83 - t49 * t80, t49 * t149 + t35 * t86, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, 0, -t149, 0, -t125 * t83 - t77 * t80, -t125 * t86 + t77 * t149, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, 0, -t149, 0, -pkin(9) * t80, pkin(9) * t149, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t4;
