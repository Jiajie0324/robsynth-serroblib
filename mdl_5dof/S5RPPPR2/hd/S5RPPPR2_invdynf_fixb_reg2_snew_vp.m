% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPPPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d5,theta2,theta3,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:32
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPPPR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPPR2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPPR2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPPR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPPR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPPPR2_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:32:24
% EndTime: 2019-12-05 17:32:27
% DurationCPUTime: 3.39s
% Computational Cost: add. (10423->260), mult. (30201->358), div. (0->0), fcn. (21367->10), ass. (0->204)
t1451 = sin(pkin(9));
t1454 = cos(pkin(9));
t1456 = cos(pkin(7));
t1453 = sin(pkin(7));
t1455 = cos(pkin(8));
t1497 = t1453 * t1455;
t1471 = t1451 * t1497 + t1454 * t1456;
t1512 = t1471 * qJDD(1);
t1514 = -qJDD(5) - t1512;
t1412 = t1471 * qJD(1);
t1461 = qJD(1) ^ 2;
t1448 = t1453 ^ 2;
t1450 = t1456 ^ 2;
t1494 = t1448 + t1450;
t1429 = t1494 * t1461;
t1406 = qJD(5) + t1412;
t1513 = qJD(5) + t1406;
t1414 = (-t1451 * t1456 + t1454 * t1497) * qJD(1);
t1457 = sin(qJ(5));
t1459 = cos(qJ(5));
t1452 = sin(pkin(8));
t1503 = qJD(1) * t1453;
t1487 = t1452 * t1503;
t1396 = t1457 * t1414 - t1459 * t1487;
t1511 = t1396 ^ 2;
t1398 = t1459 * t1414 + t1457 * t1487;
t1510 = t1398 ^ 2;
t1509 = t1406 ^ 2;
t1508 = t1412 ^ 2;
t1507 = t1414 ^ 2;
t1506 = 2 * qJD(2);
t1505 = 2 * qJD(4);
t1504 = t1456 * g(1);
t1502 = qJD(1) * t1456;
t1501 = t1398 * t1396;
t1500 = t1414 * t1412;
t1499 = t1448 * t1461;
t1498 = t1450 * t1461;
t1496 = t1456 * t1461;
t1495 = qJD(5) - t1406;
t1493 = qJDD(1) * t1455;
t1492 = t1453 * qJDD(1);
t1445 = t1456 * qJDD(1);
t1458 = sin(qJ(1));
t1491 = t1458 * qJDD(1);
t1460 = cos(qJ(1));
t1490 = t1460 * qJDD(1);
t1489 = -0.2e1 * t1503;
t1488 = qJD(1) * t1412 * t1452;
t1447 = t1452 ^ 2;
t1486 = t1447 * t1499;
t1485 = t1452 * t1496;
t1441 = t1453 * t1496;
t1436 = t1458 * g(2) - t1460 * g(3);
t1421 = -t1461 * pkin(1) + qJDD(1) * qJ(2) + t1436;
t1402 = -t1453 * g(1) + t1456 * t1421 + t1502 * t1506;
t1474 = -pkin(2) * t1456 - qJ(3) * t1453;
t1426 = t1474 * qJD(1);
t1383 = t1426 * t1502 + t1402;
t1437 = t1460 * g(2) + t1458 * g(3);
t1466 = -t1461 * qJ(2) + qJDD(2) - t1437;
t1465 = (-pkin(1) + t1474) * qJDD(1) + t1466;
t1480 = qJD(3) * t1489;
t1362 = t1455 * t1383 + (t1465 + t1480) * t1452;
t1416 = (pkin(3) * t1452 - qJ(4) * t1455) * t1503;
t1349 = -pkin(3) * t1498 - qJ(4) * t1445 - t1416 * t1487 + t1362;
t1470 = t1485 + t1493;
t1473 = t1421 + (t1506 + t1426) * qJD(1);
t1482 = qJDD(3) + t1504;
t1464 = (-t1470 * qJ(4) + (qJDD(1) * t1452 - t1455 * t1496) * pkin(3) + t1473) * t1453 + t1482;
t1331 = t1454 * t1349 - t1412 * t1505 + t1451 * t1464;
t1484 = t1454 * t1493;
t1483 = t1452 * t1492;
t1481 = (0.2e1 * qJD(3) + t1416) * t1455;
t1479 = t1451 * t1349 - t1454 * t1464;
t1478 = t1452 * t1383 - t1455 * t1465;
t1440 = t1451 * t1445;
t1407 = t1453 * t1484 - t1440;
t1477 = -t1457 * t1407 + t1459 * t1483;
t1476 = t1452 * t1455 * t1499;
t1475 = t1414 * t1487;
t1472 = -qJ(4) * t1498 + qJDD(4) + t1478;
t1469 = -t1459 * t1407 - t1457 * t1483;
t1449 = t1455 ^ 2;
t1433 = t1458 * t1461 - t1490;
t1432 = t1460 * t1461 + t1491;
t1428 = t1455 * t1441;
t1427 = t1494 * qJDD(1);
t1425 = t1456 * t1429;
t1424 = (-t1448 * t1449 - t1450) * t1461;
t1423 = t1453 * t1429;
t1422 = (-t1447 * t1448 - t1450) * t1461;
t1420 = (t1447 + t1449) * t1499;
t1419 = -t1445 - t1476;
t1418 = t1445 - t1476;
t1417 = qJDD(1) * pkin(1) - t1466;
t1411 = (t1485 - t1493) * t1453;
t1410 = t1470 * t1453;
t1409 = -t1428 - t1483;
t1408 = -t1428 + t1483;
t1403 = -t1486 - t1507;
t1401 = qJD(2) * t1489 - t1453 * t1421 - t1504;
t1395 = t1455 * t1418 - t1452 * t1424;
t1394 = -t1452 * t1419 + t1455 * t1422;
t1393 = t1452 * t1418 + t1455 * t1424;
t1392 = t1455 * t1419 + t1452 * t1422;
t1391 = t1412 * pkin(4) - t1414 * pkin(6);
t1390 = t1455 * t1409 - t1452 * t1411;
t1389 = t1452 * t1409 + t1455 * t1411;
t1388 = t1440 + (-t1484 - t1488) * t1453;
t1387 = -t1440 + (t1484 - t1488) * t1453;
t1386 = -t1512 + t1475;
t1385 = t1512 + t1475;
t1384 = -t1486 - t1508;
t1382 = -t1483 - t1500;
t1381 = t1483 - t1500;
t1380 = t1453 * t1473 + t1482;
t1377 = -t1507 - t1508;
t1376 = t1456 * t1395 + t1453 * t1410;
t1375 = t1456 * t1394 + t1453 * t1408;
t1374 = t1453 * t1395 - t1456 * t1410;
t1373 = t1453 * t1394 - t1456 * t1408;
t1372 = -t1453 * t1401 + t1456 * t1402;
t1371 = t1456 * t1401 + t1453 * t1402;
t1370 = t1456 * t1390 - t1453 * t1420;
t1369 = t1453 * t1390 + t1456 * t1420;
t1368 = -t1509 - t1510;
t1367 = t1454 * t1382 - t1451 * t1403;
t1366 = t1451 * t1382 + t1454 * t1403;
t1365 = -t1501 + t1514;
t1364 = -t1501 - t1514;
t1363 = -t1509 - t1511;
t1361 = t1455 * t1480 - t1478;
t1358 = t1454 * t1386 - t1451 * t1388;
t1357 = t1451 * t1386 + t1454 * t1388;
t1356 = -t1510 - t1511;
t1355 = -t1451 * t1381 + t1454 * t1384;
t1354 = t1454 * t1381 + t1451 * t1384;
t1353 = t1495 * t1396 + t1469;
t1352 = -t1513 * t1396 - t1469;
t1351 = -t1495 * t1398 + t1477;
t1350 = t1513 * t1398 - t1477;
t1348 = pkin(3) * t1445 + t1481 * t1503 + t1472;
t1346 = t1455 * t1367 + t1452 * t1387;
t1345 = t1452 * t1367 - t1455 * t1387;
t1344 = t1455 * t1355 + t1452 * t1385;
t1343 = t1452 * t1355 - t1455 * t1385;
t1342 = t1455 * t1358 + t1452 * t1377;
t1341 = t1452 * t1358 - t1455 * t1377;
t1340 = t1459 * t1365 - t1457 * t1368;
t1339 = t1457 * t1365 + t1459 * t1368;
t1338 = t1459 * t1363 - t1457 * t1364;
t1337 = t1457 * t1363 + t1459 * t1364;
t1336 = -t1452 * t1361 + t1455 * t1362;
t1335 = t1455 * t1361 + t1452 * t1362;
t1334 = t1456 * t1346 + t1453 * t1366;
t1333 = t1453 * t1346 - t1456 * t1366;
t1332 = -t1407 * pkin(6) + (t1456 * pkin(3) + pkin(4) * t1471) * qJDD(1) + (t1481 + (pkin(4) * t1414 + pkin(6) * t1412) * t1452) * t1503 + t1472;
t1330 = -0.2e1 * qJD(4) * t1414 - t1479;
t1329 = t1456 * t1336 + t1453 * t1380;
t1328 = t1453 * t1336 - t1456 * t1380;
t1327 = t1459 * t1351 - t1457 * t1353;
t1326 = t1457 * t1351 + t1459 * t1353;
t1325 = t1456 * t1344 + t1453 * t1354;
t1324 = t1453 * t1344 - t1456 * t1354;
t1323 = t1456 * t1342 + t1453 * t1357;
t1322 = t1453 * t1342 - t1456 * t1357;
t1321 = t1454 * t1340 + t1451 * t1352;
t1320 = t1451 * t1340 - t1454 * t1352;
t1319 = t1454 * t1338 + t1451 * t1350;
t1318 = t1451 * t1338 - t1454 * t1350;
t1317 = -pkin(4) * t1486 + pkin(6) * t1483 - t1412 * t1391 + t1331;
t1316 = -pkin(4) * t1483 - pkin(6) * t1486 + (t1505 + t1391) * t1414 + t1479;
t1315 = t1454 * t1327 + t1451 * t1356;
t1314 = t1451 * t1327 - t1454 * t1356;
t1313 = t1455 * t1321 + t1452 * t1339;
t1312 = t1452 * t1321 - t1455 * t1339;
t1311 = -t1451 * t1330 + t1454 * t1331;
t1310 = t1454 * t1330 + t1451 * t1331;
t1309 = t1455 * t1319 + t1452 * t1337;
t1308 = t1452 * t1319 - t1455 * t1337;
t1307 = t1459 * t1317 + t1457 * t1332;
t1306 = -t1457 * t1317 + t1459 * t1332;
t1305 = t1455 * t1315 + t1452 * t1326;
t1304 = t1452 * t1315 - t1455 * t1326;
t1303 = t1455 * t1311 + t1452 * t1348;
t1302 = t1452 * t1311 - t1455 * t1348;
t1301 = t1456 * t1313 + t1453 * t1320;
t1300 = t1453 * t1313 - t1456 * t1320;
t1299 = t1456 * t1309 + t1453 * t1318;
t1298 = t1453 * t1309 - t1456 * t1318;
t1297 = t1456 * t1305 + t1453 * t1314;
t1296 = t1453 * t1305 - t1456 * t1314;
t1295 = -t1457 * t1306 + t1459 * t1307;
t1294 = t1459 * t1306 + t1457 * t1307;
t1293 = t1456 * t1303 + t1453 * t1310;
t1292 = t1453 * t1303 - t1456 * t1310;
t1291 = t1454 * t1295 + t1451 * t1316;
t1290 = t1451 * t1295 - t1454 * t1316;
t1289 = t1455 * t1291 + t1452 * t1294;
t1288 = t1452 * t1291 - t1455 * t1294;
t1287 = t1456 * t1289 + t1453 * t1290;
t1286 = t1453 * t1289 - t1456 * t1290;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1371, 0, 0, 0, 0, 0, 0, t1373, t1374, t1369, t1328, 0, 0, 0, 0, 0, 0, t1324, t1333, t1322, t1292, 0, 0, 0, 0, 0, 0, t1298, t1300, t1296, t1286; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1433, t1432, 0, -t1458 * t1436 - t1460 * t1437, 0, 0, 0, 0, 0, 0, t1458 * t1425 - t1456 * t1490, -t1458 * t1423 + t1453 * t1490, -t1458 * t1427 - t1460 * t1429, -t1458 * t1372 - t1460 * t1417, 0, 0, 0, 0, 0, 0, -t1458 * t1375 + t1460 * t1392, -t1458 * t1376 + t1460 * t1393, -t1458 * t1370 + t1460 * t1389, -t1458 * t1329 + t1460 * t1335, 0, 0, 0, 0, 0, 0, -t1458 * t1325 + t1460 * t1343, -t1458 * t1334 + t1460 * t1345, -t1458 * t1323 + t1460 * t1341, -t1458 * t1293 + t1460 * t1302, 0, 0, 0, 0, 0, 0, -t1458 * t1299 + t1460 * t1308, -t1458 * t1301 + t1460 * t1312, -t1458 * t1297 + t1460 * t1304, -t1458 * t1287 + t1460 * t1288; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1432, t1433, 0, t1460 * t1436 - t1458 * t1437, 0, 0, 0, 0, 0, 0, -t1460 * t1425 - t1456 * t1491, t1460 * t1423 + t1453 * t1491, t1460 * t1427 - t1458 * t1429, t1460 * t1372 - t1458 * t1417, 0, 0, 0, 0, 0, 0, t1460 * t1375 + t1458 * t1392, t1460 * t1376 + t1458 * t1393, t1460 * t1370 + t1458 * t1389, t1460 * t1329 + t1458 * t1335, 0, 0, 0, 0, 0, 0, t1460 * t1325 + t1458 * t1343, t1460 * t1334 + t1458 * t1345, t1460 * t1323 + t1458 * t1341, t1460 * t1293 + t1458 * t1302, 0, 0, 0, 0, 0, 0, t1460 * t1299 + t1458 * t1308, t1460 * t1301 + t1458 * t1312, t1460 * t1297 + t1458 * t1304, t1460 * t1287 + t1458 * t1288; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1461, -qJDD(1), 0, t1436, 0, 0, 0, 0, 0, 0, -t1425, t1423, t1427, t1372, 0, 0, 0, 0, 0, 0, t1375, t1376, t1370, t1329, 0, 0, 0, 0, 0, 0, t1325, t1334, t1323, t1293, 0, 0, 0, 0, 0, 0, t1299, t1301, t1297, t1287; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1461, 0, t1437, 0, 0, 0, 0, 0, 0, t1445, -t1492, t1429, t1417, 0, 0, 0, 0, 0, 0, -t1392, -t1393, -t1389, -t1335, 0, 0, 0, 0, 0, 0, -t1343, -t1345, -t1341, -t1302, 0, 0, 0, 0, 0, 0, -t1308, -t1312, -t1304, -t1288; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1371, 0, 0, 0, 0, 0, 0, t1373, t1374, t1369, t1328, 0, 0, 0, 0, 0, 0, t1324, t1333, t1322, t1292, 0, 0, 0, 0, 0, 0, t1298, t1300, t1296, t1286; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1498, t1441, t1445, t1402, 0, 0, 0, 0, 0, 0, t1394, t1395, t1390, t1336, 0, 0, 0, 0, 0, 0, t1344, t1346, t1342, t1303, 0, 0, 0, 0, 0, 0, t1309, t1313, t1305, t1289; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1441, -t1499, -t1492, t1401, 0, 0, 0, 0, 0, 0, -t1408, -t1410, t1420, -t1380, 0, 0, 0, 0, 0, 0, -t1354, -t1366, -t1357, -t1310, 0, 0, 0, 0, 0, 0, -t1318, -t1320, -t1314, -t1290; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1445, t1492, -t1429, -t1417, 0, 0, 0, 0, 0, 0, t1392, t1393, t1389, t1335, 0, 0, 0, 0, 0, 0, t1343, t1345, t1341, t1302, 0, 0, 0, 0, 0, 0, t1308, t1312, t1304, t1288; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1422, t1418, t1409, t1362, 0, 0, 0, 0, 0, 0, t1355, t1367, t1358, t1311, 0, 0, 0, 0, 0, 0, t1319, t1321, t1315, t1291; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1419, t1424, t1411, t1361, 0, 0, 0, 0, 0, 0, -t1385, -t1387, -t1377, -t1348, 0, 0, 0, 0, 0, 0, -t1337, -t1339, -t1326, -t1294; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1408, t1410, -t1420, t1380, 0, 0, 0, 0, 0, 0, t1354, t1366, t1357, t1310, 0, 0, 0, 0, 0, 0, t1318, t1320, t1314, t1290; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1384, t1382, t1386, t1331, 0, 0, 0, 0, 0, 0, t1338, t1340, t1327, t1295; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1381, t1403, t1388, t1330, 0, 0, 0, 0, 0, 0, -t1350, -t1352, -t1356, -t1316; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1385, t1387, t1377, t1348, 0, 0, 0, 0, 0, 0, t1337, t1339, t1326, t1294; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1363, t1365, t1351, t1307; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1364, t1368, t1353, t1306; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1350, t1352, t1356, t1316;];
f_new_reg = t1;
