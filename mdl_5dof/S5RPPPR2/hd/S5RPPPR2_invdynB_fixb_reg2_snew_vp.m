% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPPPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d5,theta2,theta3,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:32
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPPPR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPPR2_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPPR2_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPPR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPPR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPPPR2_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:31:46
% EndTime: 2019-12-05 17:32:04
% DurationCPUTime: 17.69s
% Computational Cost: add. (36714->635), mult. (105567->979), div. (0->0), fcn. (74317->10), ass. (0->451)
t645 = sin(pkin(9));
t646 = sin(pkin(8));
t647 = sin(pkin(7));
t708 = qJDD(1) * t647;
t688 = t646 * t708;
t648 = cos(pkin(9));
t649 = cos(pkin(8));
t650 = cos(pkin(7));
t594 = (t645 * t647 * t649 + t648 * t650) * qJD(1);
t711 = t647 * qJD(1);
t596 = -t645 * t650 * qJD(1) + t648 * t649 * t711;
t732 = t596 * t594;
t748 = t688 - t732;
t750 = t645 * t748;
t749 = t648 * t748;
t651 = sin(qJ(5));
t653 = cos(qJ(5));
t691 = t646 * t711;
t555 = t651 * t596 - t653 * t691;
t557 = t653 * t596 + t651 * t691;
t505 = t557 * t555;
t707 = qJDD(1) * t649;
t687 = t647 * t707;
t706 = t650 * qJDD(1);
t712 = t645 * t687 + t648 * t706;
t684 = qJDD(5) + t712;
t744 = -t505 + t684;
t747 = t651 * t744;
t746 = t653 * t744;
t652 = sin(qJ(1));
t654 = cos(qJ(1));
t626 = t652 * g(2) - t654 * g(3);
t655 = qJD(1) ^ 2;
t661 = -t655 * pkin(1) + qJDD(1) * qJ(2) + t626;
t743 = 2 * qJD(2);
t745 = qJD(1) * t743 + t661;
t719 = t650 * t655;
t630 = t645 * t706;
t589 = t648 * t687 - t630;
t500 = -t555 * qJD(5) + t653 * t589 + t651 * t688;
t585 = qJD(5) + t594;
t517 = t585 * t555;
t455 = -t517 + t500;
t679 = t651 * t589 - t653 * t688;
t452 = (qJD(5) - t585) * t557 + t679;
t552 = t555 ^ 2;
t553 = t557 ^ 2;
t583 = t585 ^ 2;
t586 = t594 ^ 2;
t587 = t596 ^ 2;
t742 = 2 * qJD(4);
t741 = pkin(2) * t647;
t740 = pkin(2) * t650;
t739 = pkin(3) * t646;
t738 = pkin(3) * t649;
t737 = pkin(4) * t645;
t736 = t650 * g(1);
t735 = qJDD(1) * pkin(1);
t734 = t585 * t651;
t733 = t585 * t653;
t642 = t647 ^ 2;
t731 = t642 * t655;
t644 = t650 ^ 2;
t639 = t644 * t655;
t561 = -t647 * g(1) + t745 * t650;
t672 = -qJ(3) * t647 - t740;
t527 = t672 * t719 + t561;
t627 = t654 * g(2) + t652 * g(3);
t663 = -t655 * qJ(2) + qJDD(2) - t627;
t667 = -pkin(1) + t672;
t659 = qJDD(1) * t667 + t663;
t680 = t646 * t527 - t649 * t659;
t662 = pkin(3) * t706 - qJ(4) * t639 + qJDD(4) + t680;
t670 = -qJ(4) * t649 + t739;
t598 = t670 * t711;
t678 = ((2 * qJD(3)) + t598) * t649;
t442 = t678 * t711 + t662;
t730 = t645 * t442;
t525 = t732 + t688;
t729 = t645 * t525;
t660 = (qJD(1) * t672 + t743) * qJD(1);
t682 = qJDD(3) + t736;
t523 = t682 + (t660 + t661) * t647;
t728 = t646 * t523;
t699 = t646 * t649 * t655;
t615 = t642 * t699;
t600 = -t615 + t706;
t727 = t646 * t600;
t601 = -t615 - t706;
t726 = t646 * t601;
t725 = t647 * t650;
t724 = t648 * t442;
t723 = t648 * t525;
t722 = t649 * t523;
t721 = t649 * t600;
t720 = t649 * t601;
t538 = t594 * pkin(4) - t596 * pkin(6);
t640 = t646 ^ 2;
t633 = t640 * t731;
t690 = qJD(3) * t711;
t478 = t649 * t527 + (t659 - 0.2e1 * t690) * t646;
t445 = -pkin(3) * t639 - qJ(4) * t706 - t598 * t691 + t478;
t671 = -qJ(4) * t646 - t738;
t658 = ((t650 * t671 - pkin(1)) * t655 + (qJ(2) + t670) * qJDD(1) + t660 + t626) * t647 + t682;
t681 = t645 * t445 - t648 * t658;
t371 = -pkin(4) * t688 - pkin(6) * t633 + (t742 + t538) * t596 + t681;
t718 = t651 * t371;
t485 = t505 + t684;
t717 = t651 * t485;
t599 = -t663 + t735;
t716 = t652 * t599;
t715 = t653 * t371;
t714 = t653 * t485;
t713 = t654 * t599;
t397 = t648 * t445 - t594 * t742 + t645 * t658;
t372 = -pkin(4) * t633 + pkin(6) * t688 - t594 * t538 + t397;
t402 = t712 * pkin(4) - t589 * pkin(6) + (t678 + (pkin(4) * t596 + pkin(6) * t594) * t646) * t711 + t662;
t331 = t653 * t372 + t651 * t402;
t709 = qJDD(1) * t646;
t705 = t652 * qJDD(1);
t704 = t654 * qJDD(1);
t643 = t649 ^ 2;
t702 = t643 * t731;
t701 = t645 * t505;
t700 = t646 * t732;
t698 = t646 * t719;
t697 = t647 * t719;
t696 = t648 * t505;
t695 = t649 * t732;
t694 = t649 * t719;
t693 = pkin(4) * t648 + pkin(3);
t692 = qJD(1) * t594 * t646;
t689 = t648 * t707;
t686 = t650 * t705;
t685 = t650 * t704;
t683 = t599 + t735;
t330 = t651 * t372 - t653 * t402;
t560 = t745 * t647 + t736;
t504 = t647 * t560 + t650 * t561;
t641 = t647 * t642;
t677 = t641 * t699;
t676 = t646 * t694;
t675 = t594 * t691;
t674 = t596 * t691;
t622 = t654 * t655 + t705;
t673 = pkin(5) * t622 - t654 * g(1);
t669 = t642 * t676;
t301 = -t653 * t330 + t651 * t331;
t302 = t651 * t330 + t653 * t331;
t396 = t596 * t742 + t681;
t337 = -t648 * t396 + t645 * t397;
t338 = t645 * t396 + t648 * t397;
t477 = 0.2e1 * t649 * t690 + t680;
t412 = -t649 * t477 + t646 * t478;
t413 = t646 * t477 + t649 * t478;
t503 = t650 * t560 - t647 * t561;
t572 = t654 * t626 - t652 * t627;
t571 = -t652 * t626 - t654 * t627;
t668 = -t652 * t655 + t704;
t610 = (t642 + t644) * t719;
t665 = -t652 * t610 + t685;
t664 = t654 * t610 + t686;
t531 = t674 - t712;
t638 = t644 * qJDD(1);
t637 = t642 * qJDD(1);
t631 = t640 * t708;
t618 = t639 - t731;
t617 = t639 + t731;
t614 = t646 * t687;
t612 = t638 - t637;
t611 = t638 + t637;
t609 = -t639 - t702;
t608 = t639 - t702;
t607 = (t644 * t647 + t641) * t655;
t606 = -t633 - t639;
t605 = t633 - t639;
t604 = pkin(5) * t668 + t652 * g(1);
t603 = t633 - t702;
t602 = t633 + t702;
t593 = (t698 - t707) * t647;
t592 = (t698 + t707) * t647;
t591 = (t694 - t709) * t647;
t590 = (t694 + t709) * t647;
t582 = t668 * t725;
t581 = t622 * t725;
t578 = (-t640 - t643) * t697;
t577 = (qJDD(1) * t643 + t676) * t647;
t576 = t643 * t697 - t614;
t575 = t640 * t697 + t614;
t574 = -t647 * t676 + t631;
t569 = t654 * t607 + t647 * t705;
t567 = -t652 * t607 + t647 * t704;
t566 = -t587 - t633;
t565 = -t587 + t633;
t564 = t586 - t633;
t563 = t654 * t611 - t652 * t617;
t562 = -t652 * t611 - t654 * t617;
t550 = t650 * t577 + t677;
t549 = t650 * t574 - t677;
t548 = -t646 * t608 + t720;
t547 = -t646 * t609 + t721;
t546 = t649 * t606 - t726;
t545 = t649 * t605 + t727;
t544 = -t649 * t608 - t726;
t543 = t649 * t609 + t727;
t542 = t646 * t606 + t720;
t541 = -t646 * t605 + t721;
t539 = -t587 + t586;
t537 = -t649 * t590 - t646 * t593;
t536 = t649 * t591 - t646 * t592;
t535 = -t646 * t590 + t649 * t593;
t534 = -t646 * t591 - t649 * t592;
t533 = t630 + (-t689 - t692) * t647;
t532 = -t630 + (t689 - t692) * t647;
t530 = -t674 - t712;
t528 = -t633 - t586;
t521 = t648 * t589 - t645 * t674;
t520 = -t645 * t589 - t648 * t674;
t519 = t645 * t712 + t648 * t675;
t518 = -t645 * t675 + t648 * t712;
t516 = -t553 + t583;
t515 = t552 - t583;
t514 = t586 + t587;
t513 = (-t594 * t648 + t596 * t645) * t691;
t512 = (t594 * t645 + t596 * t648) * t691;
t511 = t650 * t548 - t647 * t593;
t510 = t650 * t547 + t647 * t592;
t509 = t650 * t546 - t647 * t591;
t508 = t650 * t545 - t647 * t590;
t507 = t647 * t547 - t650 * t592;
t506 = t647 * t546 + t650 * t591;
t501 = -t553 + t552;
t499 = -t557 * qJD(5) - t679;
t498 = t650 * t537 - t647 * t602;
t497 = t650 * t536 - t647 * t603;
t496 = t647 * t537 + t650 * t602;
t495 = t649 * t513 + t631;
t494 = -t646 * t513 + t614;
t493 = -t553 - t583;
t492 = t648 * t564 - t729;
t491 = -t645 * t566 - t723;
t490 = -t645 * t565 + t749;
t489 = -t645 * t564 - t723;
t488 = t648 * t566 - t729;
t487 = -t648 * t565 - t750;
t483 = -t583 - t552;
t482 = t654 * t504 - t716;
t481 = -t652 * t504 - t713;
t480 = -qJ(3) * t543 + t722;
t479 = -qJ(3) * t542 + t728;
t474 = t649 * t521 + t700;
t473 = t649 * t519 - t700;
t472 = -t646 * t521 + t695;
t471 = -t646 * t519 - t695;
t470 = t648 * t531 - t645 * t533;
t469 = t648 * t530 - t645 * t532;
t468 = t645 * t531 + t648 * t533;
t467 = -t645 * t530 - t648 * t532;
t466 = t552 + t553;
t465 = t648 * t528 - t750;
t464 = t645 * t528 + t749;
t463 = t654 * t510 + t652 * t543;
t462 = t654 * t509 + t652 * t542;
t461 = -t652 * t510 + t654 * t543;
t460 = -t652 * t509 + t654 * t542;
t459 = (-t555 * t653 + t557 * t651) * t585;
t458 = (t555 * t651 + t557 * t653) * t585;
t456 = -t517 - t500;
t453 = (-qJD(5) - t585) * t557 - t679;
t451 = t654 * t498 + t652 * t535;
t450 = -t652 * t498 + t654 * t535;
t449 = t653 * t500 - t557 * t734;
t448 = -t651 * t500 - t557 * t733;
t447 = -t651 * t499 + t555 * t733;
t446 = -t653 * t499 - t555 * t734;
t444 = -pkin(2) * t543 + t478;
t443 = -pkin(2) * t542 + t477;
t440 = t649 * t492 + t531 * t646;
t439 = t649 * t491 + t646 * t532;
t438 = t649 * t490 - t646 * t533;
t437 = -t646 * t492 + t531 * t649;
t436 = t646 * t491 - t649 * t532;
t435 = -t646 * t490 - t649 * t533;
t434 = t650 * t495 - t647 * t512;
t433 = t648 * t459 + t645 * t684;
t432 = -t645 * t459 + t648 * t684;
t431 = t649 * t469 - t646 * t539;
t430 = -t646 * t469 - t649 * t539;
t429 = t653 * t515 - t717;
t428 = -t651 * t516 + t746;
t427 = -t651 * t515 - t714;
t426 = -t653 * t516 - t747;
t425 = t649 * t465 - t646 * t530;
t424 = t646 * t465 + t649 * t530;
t423 = t650 * t474 - t647 * t520;
t422 = t650 * t473 - t647 * t518;
t421 = t649 * t470 - t646 * t514;
t420 = t646 * t470 + t649 * t514;
t419 = -t651 * t493 - t714;
t418 = t653 * t493 - t717;
t417 = -pkin(1) * t506 - pkin(2) * t591 - qJ(3) * t546 + t722;
t416 = -pkin(1) * t507 + pkin(2) * t592 - qJ(3) * t547 - t728;
t415 = t653 * t483 - t747;
t414 = t651 * t483 + t746;
t411 = t648 * t449 + t701;
t410 = t648 * t447 - t701;
t409 = -t645 * t449 + t696;
t408 = -t645 * t447 - t696;
t407 = -qJ(4) * t488 + t724;
t406 = t650 * t440 - t647 * t489;
t405 = t650 * t439 + t647 * t488;
t404 = t650 * t438 - t647 * t487;
t403 = t647 * t439 - t650 * t488;
t399 = -qJ(4) * t464 + t730;
t398 = -qJ(3) * t535 - t412;
t395 = t650 * t413 + t647 * t523;
t394 = t647 * t413 - t650 * t523;
t393 = -t452 * t653 - t651 * t456;
t392 = t653 * t453 - t651 * t455;
t391 = -t452 * t651 + t653 * t456;
t390 = -t651 * t453 - t653 * t455;
t389 = t650 * t431 - t647 * t467;
t388 = t649 * t433 - t646 * t458;
t387 = -t646 * t433 - t649 * t458;
t386 = t650 * t425 + t647 * t464;
t385 = t647 * t425 - t650 * t464;
t384 = t650 * t421 + t647 * t468;
t383 = t647 * t421 - t650 * t468;
t382 = t648 * t429 - t645 * t452;
t381 = t648 * t428 - t645 * t456;
t380 = -t645 * t429 - t648 * t452;
t379 = -t645 * t428 - t648 * t456;
t378 = -qJ(2) * t507 - t647 * t444 + t650 * t480;
t377 = -qJ(2) * t506 - t647 * t443 + t650 * t479;
t376 = t648 * t419 + t455 * t645;
t375 = t645 * t419 - t455 * t648;
t374 = t648 * t415 - t645 * t453;
t373 = t645 * t415 + t648 * t453;
t370 = t648 * t392 - t645 * t501;
t369 = -t645 * t392 - t648 * t501;
t368 = -pkin(1) * t496 - pkin(2) * t602 - qJ(3) * t537 - t413;
t366 = -pkin(3) * t488 + t397;
t365 = t649 * t411 - t646 * t448;
t364 = t649 * t410 - t646 * t446;
t363 = -t646 * t411 - t649 * t448;
t362 = -t646 * t410 - t649 * t446;
t361 = -pkin(3) * t464 + t396;
t360 = t648 * t393 - t645 * t466;
t359 = t645 * t393 + t648 * t466;
t358 = -qJ(2) * t496 + t650 * t398 + t535 * t741;
t357 = t654 * t405 + t652 * t436;
t356 = -t652 * t405 + t654 * t436;
t355 = -pkin(2) * t436 + pkin(3) * t532 - qJ(4) * t491 - t730;
t354 = t650 * t388 - t647 * t432;
t353 = t654 * t386 + t652 * t424;
t352 = -t652 * t386 + t654 * t424;
t351 = t649 * t382 - t646 * t427;
t350 = t649 * t381 - t646 * t426;
t349 = -t646 * t382 - t649 * t427;
t348 = -t646 * t381 - t649 * t426;
t347 = -pkin(2) * t424 - pkin(3) * t530 - qJ(4) * t465 + t724;
t346 = t654 * t384 + t652 * t420;
t345 = -t652 * t384 + t654 * t420;
t344 = t654 * t395 + t652 * t412;
t343 = -t652 * t395 + t654 * t412;
t342 = t649 * t376 + t646 * t418;
t341 = t646 * t376 - t649 * t418;
t340 = -pkin(1) * t394 + pkin(2) * t523 - qJ(3) * t413;
t339 = -pkin(6) * t418 + t715;
t336 = t649 * t374 + t646 * t414;
t335 = t646 * t374 - t649 * t414;
t334 = -pkin(6) * t414 + t718;
t333 = t650 * t365 - t647 * t409;
t332 = t650 * t364 - t647 * t408;
t329 = t649 * t370 - t646 * t390;
t328 = -t646 * t370 - t649 * t390;
t327 = -qJ(4) * t468 - t337;
t326 = t649 * t360 + t646 * t391;
t325 = t646 * t360 - t649 * t391;
t324 = t649 * t338 + t646 * t442;
t323 = t646 * t338 - t649 * t442;
t322 = -qJ(2) * t394 + (-qJ(3) * t650 + t741) * t412;
t321 = -qJ(3) * t436 - t646 * t366 + t649 * t407;
t320 = t650 * t351 - t647 * t380;
t319 = t650 * t350 - t647 * t379;
t318 = -pkin(4) * t418 + t331;
t317 = -pkin(4) * t414 + t330;
t316 = -qJ(3) * t424 - t646 * t361 + t649 * t399;
t315 = t650 * t342 + t647 * t375;
t314 = t647 * t342 - t650 * t375;
t313 = t650 * t336 + t647 * t373;
t312 = t647 * t336 - t650 * t373;
t311 = -pkin(2) * t420 - pkin(3) * t514 - qJ(4) * t470 - t338;
t310 = -qJ(3) * t420 + t649 * t327 + t468 * t739;
t309 = t650 * t329 - t647 * t369;
t308 = -pkin(3) * t375 + pkin(4) * t455 - pkin(6) * t419 - t718;
t307 = -pkin(3) * t373 - pkin(4) * t453 - pkin(6) * t415 + t715;
t306 = t650 * t326 + t647 * t359;
t305 = t647 * t326 - t650 * t359;
t304 = -pkin(1) * t403 + pkin(2) * t488 - qJ(3) * t439 - t649 * t366 - t646 * t407;
t303 = -pkin(1) * t385 + pkin(2) * t464 - qJ(3) * t425 - t649 * t361 - t646 * t399;
t300 = t650 * t324 + t647 * t337;
t299 = t647 * t324 - t650 * t337;
t298 = -pkin(1) * t383 - qJ(3) * t421 - t646 * t327 + (pkin(2) + t738) * t468;
t297 = t654 * t315 + t652 * t341;
t296 = -t652 * t315 + t654 * t341;
t295 = -pkin(2) * t323 + pkin(3) * t442 - qJ(4) * t338;
t294 = t654 * t313 + t652 * t335;
t293 = -t652 * t313 + t654 * t335;
t292 = -qJ(2) * t403 + t650 * t321 - t647 * t355;
t291 = -pkin(6) * t391 - t301;
t290 = t648 * t302 + t645 * t371;
t289 = t645 * t302 - t648 * t371;
t288 = -qJ(2) * t385 + t650 * t316 - t647 * t347;
t287 = -qJ(4) * t375 - t645 * t318 + t648 * t339;
t286 = -qJ(4) * t373 - t645 * t317 + t648 * t334;
t285 = t654 * t306 + t652 * t325;
t284 = -t652 * t306 + t654 * t325;
t283 = -qJ(3) * t323 + t337 * t670;
t282 = t654 * t300 + t652 * t323;
t281 = -t652 * t300 + t654 * t323;
t280 = -pkin(3) * t359 - pkin(4) * t466 - pkin(6) * t393 - t302;
t279 = -qJ(2) * t383 + t650 * t310 - t647 * t311;
t278 = -qJ(4) * t359 + t648 * t291 + t391 * t737;
t277 = -pkin(2) * t341 + pkin(3) * t418 - qJ(4) * t376 - t648 * t318 - t645 * t339;
t276 = -pkin(2) * t335 + pkin(3) * t414 - qJ(4) * t374 - t648 * t317 - t645 * t334;
t275 = t649 * t290 + t646 * t301;
t274 = t646 * t290 - t649 * t301;
t273 = -pkin(2) * t325 - qJ(4) * t360 - t645 * t291 + t391 * t693;
t272 = -pkin(3) * t289 + pkin(4) * t371 - pkin(6) * t302;
t271 = -qJ(3) * t341 + t649 * t287 - t646 * t308;
t270 = -qJ(3) * t335 + t649 * t286 - t646 * t307;
t269 = -pkin(1) * t299 - qJ(3) * t324 + (pkin(2) - t671) * t337;
t268 = -qJ(4) * t289 + (-pkin(6) * t648 + t737) * t301;
t267 = -pkin(1) * t314 + pkin(2) * t375 - qJ(3) * t342 - t646 * t287 - t649 * t308;
t266 = t650 * t275 + t647 * t289;
t265 = t647 * t275 - t650 * t289;
t264 = -qJ(2) * t299 + t650 * t283 - t647 * t295;
t263 = -pkin(1) * t312 + pkin(2) * t373 - qJ(3) * t336 - t646 * t286 - t649 * t307;
t262 = -qJ(3) * t325 + t649 * t278 - t646 * t280;
t261 = -pkin(1) * t305 + pkin(2) * t359 - qJ(3) * t326 - t646 * t278 - t649 * t280;
t260 = -qJ(2) * t314 + t650 * t271 - t647 * t277;
t259 = -qJ(2) * t312 + t650 * t270 - t647 * t276;
t258 = t654 * t266 + t652 * t274;
t257 = -t652 * t266 + t654 * t274;
t256 = -pkin(2) * t274 - qJ(4) * t290 + (pkin(6) * t645 + t693) * t301;
t255 = -qJ(2) * t305 + t650 * t262 - t647 * t273;
t254 = -qJ(3) * t274 + t649 * t268 - t646 * t272;
t253 = -pkin(1) * t265 + pkin(2) * t289 - qJ(3) * t275 - t646 * t268 - t649 * t272;
t252 = -qJ(2) * t265 + t650 * t254 - t647 * t256;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t503, 0, 0, 0, 0, 0, 0, t506, t507, t496, t394, 0, 0, 0, 0, 0, 0, t385, t403, t383, t299, 0, 0, 0, 0, 0, 0, t312, t314, t305, t265; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, -t668, t622, 0, t571, 0, 0, 0, 0, 0, 0, -t665, t567, t562, t481, 0, 0, 0, 0, 0, 0, t460, t461, t450, t343, 0, 0, 0, 0, 0, 0, t352, t356, t345, t281, 0, 0, 0, 0, 0, 0, t293, t296, t284, t257; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t622, -t668, 0, t572, 0, 0, 0, 0, 0, 0, -t664, t569, t563, t482, 0, 0, 0, 0, 0, 0, t462, t463, t451, t344, 0, 0, 0, 0, 0, 0, t353, t357, t346, t282, 0, 0, 0, 0, 0, 0, t294, t297, t285, t258; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t627, -t626, 0, 0, t637, 0.2e1 * t647 * t706, 0, t638, 0, 0, -qJ(2) * t610 + t650 * t683, qJ(2) * t607 - t647 * t683, pkin(1) * t617 + qJ(2) * t611 + t504, pkin(1) * t599 + qJ(2) * t504, t647 * t577 - t669, t647 * t536 + t650 * t603, t647 * t548 + t650 * t593, t647 * t574 + t669, t647 * t545 + t650 * t590, t638, -pkin(1) * t542 + qJ(2) * t509 + t650 * t443 + t647 * t479, -pkin(1) * t543 + qJ(2) * t510 + t650 * t444 + t647 * t480, qJ(2) * t498 + t647 * t398 + (-pkin(1) - t740) * t535, qJ(2) * t395 + t412 * t667, t647 * t474 + t650 * t520, t647 * t431 + t650 * t467, t647 * t438 + t650 * t487, t647 * t473 + t650 * t518, t647 * t440 + t650 * t489, t647 * t495 + t650 * t512, -pkin(1) * t424 + qJ(2) * t386 + t647 * t316 + t650 * t347, -pkin(1) * t436 + qJ(2) * t405 + t647 * t321 + t650 * t355, -pkin(1) * t420 + qJ(2) * t384 + t647 * t310 + t650 * t311, -pkin(1) * t323 + qJ(2) * t300 + t647 * t283 + t650 * t295, t647 * t365 + t650 * t409, t647 * t329 + t650 * t369, t647 * t350 + t650 * t379, t647 * t364 + t650 * t408, t647 * t351 + t650 * t380, t647 * t388 + t650 * t432, -pkin(1) * t335 + qJ(2) * t313 + t647 * t270 + t650 * t276, -pkin(1) * t341 + qJ(2) * t315 + t647 * t271 + t650 * t277, -pkin(1) * t325 + qJ(2) * t306 + t647 * t262 + t650 * t273, -pkin(1) * t274 + qJ(2) * t266 + t647 * t254 + t650 * t256; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t622, 0, -t668, 0, t673, t604, -t572, -pkin(5) * t572, -t581, -t652 * t612 - t654 * t618, t567, t581, t665, 0, pkin(5) * t664 - t654 * t560 + t647 * t716, -pkin(5) * t569 - t654 * t561 + t650 * t716, -pkin(5) * t563 - t652 * t503, -pkin(5) * t482 - (pkin(1) * t654 + qJ(2) * t652) * t503, -t652 * t550 - t654 * t576, -t652 * t497 - t654 * t534, -t652 * t511 - t654 * t544, -t652 * t549 - t654 * t575, -t652 * t508 - t654 * t541, -t654 * t578 + t647 * t686, -pkin(5) * t462 - t652 * t377 - t654 * t417, -pkin(5) * t463 - t652 * t378 - t654 * t416, -pkin(5) * t451 - t652 * t358 - t654 * t368, -pkin(5) * t344 - t652 * t322 - t654 * t340, -t652 * t423 - t654 * t472, -t652 * t389 - t654 * t430, -t652 * t404 - t654 * t435, -t652 * t422 - t654 * t471, -t652 * t406 - t654 * t437, -t652 * t434 - t654 * t494, -pkin(5) * t353 - t652 * t288 - t654 * t303, -pkin(5) * t357 - t652 * t292 - t654 * t304, -pkin(5) * t346 - t652 * t279 - t654 * t298, -pkin(5) * t282 - t652 * t264 - t654 * t269, -t652 * t333 - t654 * t363, -t652 * t309 - t654 * t328, -t652 * t319 - t654 * t348, -t652 * t332 - t654 * t362, -t652 * t320 - t654 * t349, -t652 * t354 - t654 * t387, -pkin(5) * t294 - t652 * t259 - t654 * t263, -pkin(5) * t297 - t652 * t260 - t654 * t267, -pkin(5) * t285 - t652 * t255 - t654 * t261, -pkin(5) * t258 - t652 * t252 - t654 * t253; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, t668, 0, -t622, 0, -t604, t673, t571, pkin(5) * t571, t582, t654 * t612 - t652 * t618, t569, -t582, t664, 0, -pkin(5) * t665 - t652 * t560 - t647 * t713, pkin(5) * t567 - t652 * t561 - t650 * t713, pkin(5) * t562 + t654 * t503, pkin(5) * t481 - (pkin(1) * t652 - qJ(2) * t654) * t503, t654 * t550 - t652 * t576, t654 * t497 - t652 * t534, t654 * t511 - t652 * t544, t654 * t549 - t652 * t575, t654 * t508 - t652 * t541, -t652 * t578 - t647 * t685, pkin(5) * t460 + t654 * t377 - t652 * t417, pkin(5) * t461 + t654 * t378 - t652 * t416, pkin(5) * t450 + t654 * t358 - t652 * t368, pkin(5) * t343 + t654 * t322 - t652 * t340, t654 * t423 - t652 * t472, t654 * t389 - t652 * t430, t654 * t404 - t652 * t435, t654 * t422 - t652 * t471, t654 * t406 - t652 * t437, t654 * t434 - t652 * t494, pkin(5) * t352 + t654 * t288 - t652 * t303, pkin(5) * t356 + t654 * t292 - t652 * t304, pkin(5) * t345 + t654 * t279 - t652 * t298, pkin(5) * t281 + t654 * t264 - t652 * t269, t654 * t333 - t652 * t363, t654 * t309 - t652 * t328, t654 * t319 - t652 * t348, t654 * t332 - t652 * t362, t654 * t320 - t652 * t349, t654 * t354 - t652 * t387, pkin(5) * t293 + t654 * t259 - t652 * t263, pkin(5) * t296 + t654 * t260 - t652 * t267, pkin(5) * t284 + t654 * t255 - t652 * t261, pkin(5) * t257 + t654 * t252 - t652 * t253;];
tauB_reg = t1;
