% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRRP13
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:00
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRRP13_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP13_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP13_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP13_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP13_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPRRP13_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:00:04
% EndTime: 2019-12-31 19:00:06
% DurationCPUTime: 2.31s
% Computational Cost: add. (3705->187), mult. (7222->178), div. (0->0), fcn. (4407->6), ass. (0->106)
t1303 = sin(qJ(1));
t1306 = cos(qJ(1));
t1305 = cos(qJ(3));
t1337 = qJD(1) * t1305;
t1321 = qJD(3) * t1337;
t1302 = sin(qJ(3));
t1325 = t1302 * qJDD(1);
t1314 = qJDD(4) + t1321 + t1325;
t1301 = sin(qJ(4));
t1304 = cos(qJ(4));
t1273 = -t1304 * qJD(3) + t1301 * t1337;
t1275 = t1301 * qJD(3) + t1304 * t1337;
t1334 = t1275 * t1273;
t1244 = t1314 - t1334;
t1253 = t1273 ^ 2;
t1330 = t1302 * qJD(1);
t1291 = qJD(4) + t1330;
t1340 = t1291 ^ 2;
t1343 = -t1340 - t1253;
t1350 = t1304 * t1244 + t1301 * t1343;
t1323 = qJD(3) * t1330;
t1324 = t1305 * qJDD(1);
t1277 = -t1323 + t1324;
t1320 = -t1304 * qJDD(3) + t1301 * t1277;
t1327 = qJD(4) + t1291;
t1232 = t1327 * t1275 + t1320;
t1349 = -t1301 * t1244 + t1304 * t1343;
t1366 = -t1305 * t1232 + t1302 * t1349;
t1371 = t1303 * t1366 + t1306 * t1350;
t1370 = t1303 * t1350 - t1306 * t1366;
t1243 = t1314 + t1334;
t1272 = t1275 ^ 2;
t1345 = -t1272 - t1340;
t1221 = t1304 * t1243 + t1301 * t1345;
t1319 = t1301 * qJDD(3) + t1304 * t1277;
t1312 = -t1273 * qJD(4) + t1319;
t1335 = t1273 * t1291;
t1310 = t1312 - t1335;
t1205 = t1302 * t1221 + t1305 * t1310;
t1219 = t1301 * t1243 - t1304 * t1345;
t1369 = t1303 * t1205 + t1306 * t1219;
t1368 = t1306 * t1205 - t1303 * t1219;
t1367 = t1302 * t1232 + t1305 * t1349;
t1207 = t1305 * t1221 - t1302 * t1310;
t1237 = t1312 + t1335;
t1313 = (-qJD(4) + t1291) * t1275 - t1320;
t1342 = -t1304 * t1237 + t1301 * t1313;
t1242 = t1272 + t1253;
t1341 = t1301 * t1237 + t1304 * t1313;
t1355 = t1305 * t1242 + t1302 * t1341;
t1363 = t1303 * t1355 + t1306 * t1342;
t1362 = t1303 * t1342 - t1306 * t1355;
t1356 = -t1302 * t1242 + t1305 * t1341;
t1308 = qJD(1) ^ 2;
t1286 = -t1306 * g(1) - t1303 * g(2);
t1311 = -qJDD(1) * qJ(2) - 0.2e1 * qJD(2) * qJD(1) - t1286;
t1338 = pkin(6) + pkin(1);
t1259 = t1338 * t1308 + t1311;
t1339 = 2 * qJD(5);
t1285 = t1303 * g(1) - t1306 * g(2);
t1315 = -t1308 * qJ(2) + qJDD(2) - t1285;
t1261 = -t1338 * qJDD(1) + t1315;
t1250 = -t1305 * g(3) + t1302 * t1261;
t1307 = qJD(3) ^ 2;
t1317 = t1308 * (pkin(3) * t1302 - pkin(7) * t1305);
t1240 = -t1307 * pkin(3) + qJDD(3) * pkin(7) - t1302 * t1317 + t1250;
t1276 = 0.2e1 * t1321 + t1325;
t1309 = (-t1277 + t1323) * pkin(7) + t1276 * pkin(3) - t1259;
t1214 = t1304 * t1240 + t1301 * t1309;
t1299 = t1302 ^ 2;
t1300 = t1305 ^ 2;
t1326 = t1299 + t1300;
t1322 = t1302 * t1308 * t1305;
t1213 = -t1301 * t1240 + t1304 * t1309;
t1249 = t1302 * g(3) + t1305 * t1261;
t1239 = qJDD(3) * pkin(3) + t1307 * pkin(7) - t1305 * t1317 + t1249;
t1289 = -t1300 * t1308 - t1307;
t1288 = -t1299 * t1308 - t1307;
t1284 = -qJDD(3) - t1322;
t1283 = qJDD(3) - t1322;
t1282 = t1326 * t1308;
t1281 = t1303 * qJDD(1) + t1306 * t1308;
t1280 = t1306 * qJDD(1) - t1303 * t1308;
t1279 = t1326 * qJDD(1);
t1278 = -0.2e1 * t1323 + t1324;
t1267 = qJDD(1) * pkin(1) - t1315;
t1266 = t1308 * pkin(1) + t1311;
t1257 = t1305 * t1284 - t1302 * t1289;
t1256 = -t1302 * t1283 + t1305 * t1288;
t1255 = t1302 * t1284 + t1305 * t1289;
t1254 = t1305 * t1283 + t1302 * t1288;
t1248 = t1273 * pkin(4) - t1275 * qJ(5);
t1230 = -t1302 * t1249 + t1305 * t1250;
t1229 = t1305 * t1249 + t1302 * t1250;
t1200 = t1275 * t1339 + (-t1327 * t1273 + t1319) * qJ(5) + t1239 - t1232 * pkin(4);
t1199 = -t1314 * pkin(4) - qJ(5) * t1340 + t1275 * t1248 + qJDD(5) - t1213;
t1198 = -pkin(4) * t1340 + t1314 * qJ(5) - t1273 * t1248 + t1291 * t1339 + t1214;
t1197 = -t1301 * t1213 + t1304 * t1214;
t1196 = t1304 * t1213 + t1301 * t1214;
t1195 = t1305 * t1197 - t1302 * t1239;
t1194 = t1302 * t1197 + t1305 * t1239;
t1193 = t1304 * t1198 + t1301 * t1199;
t1192 = t1301 * t1198 - t1304 * t1199;
t1191 = t1305 * t1193 - t1302 * t1200;
t1190 = t1302 * t1193 + t1305 * t1200;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1281, -t1280, 0, -t1303 * t1285 + t1306 * t1286, 0, 0, 0, 0, 0, 0, 0, t1281, t1280, -t1306 * t1266 - t1303 * t1267, 0, 0, 0, 0, 0, 0, t1303 * t1254 + t1306 * t1276, t1303 * t1255 + t1306 * t1278, -t1303 * t1279 - t1306 * t1282, t1303 * t1229 - t1306 * t1259, 0, 0, 0, 0, 0, 0, t1371, -t1369, t1363, t1303 * t1194 + t1306 * t1196, 0, 0, 0, 0, 0, 0, t1371, t1363, t1369, t1303 * t1190 + t1306 * t1192; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1280, -t1281, 0, t1306 * t1285 + t1303 * t1286, 0, 0, 0, 0, 0, 0, 0, -t1280, t1281, -t1303 * t1266 + t1306 * t1267, 0, 0, 0, 0, 0, 0, -t1306 * t1254 + t1303 * t1276, -t1306 * t1255 + t1303 * t1278, t1306 * t1279 - t1303 * t1282, -t1306 * t1229 - t1303 * t1259, 0, 0, 0, 0, 0, 0, t1370, t1368, t1362, -t1306 * t1194 + t1303 * t1196, 0, 0, 0, 0, 0, 0, t1370, t1362, -t1368, -t1306 * t1190 + t1303 * t1192; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1256, t1257, 0, t1230, 0, 0, 0, 0, 0, 0, t1367, -t1207, t1356, t1195, 0, 0, 0, 0, 0, 0, t1367, t1356, t1207, t1191; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1308, -qJDD(1), 0, t1286, 0, 0, 0, 0, 0, 0, 0, t1308, qJDD(1), -t1266, 0, 0, 0, 0, 0, 0, t1276, t1278, -t1282, -t1259, 0, 0, 0, 0, 0, 0, t1350, -t1219, t1342, t1196, 0, 0, 0, 0, 0, 0, t1350, t1342, t1219, t1192; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1308, 0, t1285, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), t1308, t1267, 0, 0, 0, 0, 0, 0, -t1254, -t1255, t1279, -t1229, 0, 0, 0, 0, 0, 0, -t1366, t1205, -t1355, -t1194, 0, 0, 0, 0, 0, 0, -t1366, -t1355, -t1205, -t1190; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1256, t1257, 0, t1230, 0, 0, 0, 0, 0, 0, t1367, -t1207, t1356, t1195, 0, 0, 0, 0, 0, 0, t1367, t1356, t1207, t1191; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1256, t1257, 0, t1230, 0, 0, 0, 0, 0, 0, t1367, -t1207, t1356, t1195, 0, 0, 0, 0, 0, 0, t1367, t1356, t1207, t1191; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1308, -qJDD(1), t1266, 0, 0, 0, 0, 0, 0, -t1276, -t1278, t1282, t1259, 0, 0, 0, 0, 0, 0, -t1350, t1219, -t1342, -t1196, 0, 0, 0, 0, 0, 0, -t1350, -t1342, -t1219, -t1192; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1308, -t1267, 0, 0, 0, 0, 0, 0, t1254, t1255, -t1279, t1229, 0, 0, 0, 0, 0, 0, t1366, -t1205, t1355, t1194, 0, 0, 0, 0, 0, 0, t1366, t1355, t1205, t1190; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1288, t1284, -t1325, t1250, 0, 0, 0, 0, 0, 0, t1349, -t1221, t1341, t1197, 0, 0, 0, 0, 0, 0, t1349, t1341, t1221, t1193; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1283, t1289, -t1324, t1249, 0, 0, 0, 0, 0, 0, -t1232, -t1310, t1242, t1239, 0, 0, 0, 0, 0, 0, -t1232, t1242, t1310, t1200; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1276, t1278, -t1282, -t1259, 0, 0, 0, 0, 0, 0, t1350, -t1219, t1342, t1196, 0, 0, 0, 0, 0, 0, t1350, t1342, t1219, t1192; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1343, -t1243, t1313, t1214, 0, 0, 0, 0, 0, 0, t1343, t1313, t1243, t1198; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1244, t1345, -t1237, t1213, 0, 0, 0, 0, 0, 0, t1244, -t1237, -t1345, -t1199; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1232, t1310, -t1242, -t1239, 0, 0, 0, 0, 0, 0, t1232, -t1242, -t1310, -t1200; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1343, t1313, t1243, t1198; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1232, -t1242, -t1310, -t1200; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1244, t1237, t1345, t1199;];
f_new_reg = t1;
