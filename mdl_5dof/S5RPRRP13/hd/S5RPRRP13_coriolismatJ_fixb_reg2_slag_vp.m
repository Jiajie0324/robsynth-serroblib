% Calculate inertial parameters regressor of coriolis matrix for
% S5RPRRP13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:00
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RPRRP13_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP13_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP13_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPRRP13_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:59:42
% EndTime: 2019-12-31 18:59:50
% DurationCPUTime: 4.25s
% Computational Cost: add. (2694->398), mult. (5276->481), div. (0->0), fcn. (4256->4), ass. (0->309)
t244 = cos(qJ(4));
t245 = cos(qJ(3));
t308 = t245 * qJD(3);
t213 = t244 * t308;
t241 = t245 ^ 2;
t242 = sin(qJ(4));
t227 = t241 * t242;
t243 = sin(qJ(3));
t406 = t243 ^ 2;
t171 = t242 * t406 - t227;
t318 = t171 * qJD(1);
t414 = t318 + t213;
t311 = t243 * qJD(4);
t215 = t242 * t311;
t413 = t318 + t215;
t209 = t242 * t308;
t216 = t244 * t311;
t306 = t406 / 0.2e1;
t282 = t306 + 0.1e1 / 0.2e1;
t228 = t241 * t244;
t395 = t228 / 0.2e1;
t142 = t282 * t244 + t395;
t322 = t142 * qJD(1);
t412 = t322 + t209 + t216;
t396 = t227 / 0.2e1;
t140 = t282 * t242 + t396;
t324 = t140 * qJD(1);
t411 = t324 + t215 - t213;
t246 = -pkin(1) - pkin(6);
t348 = t245 * t246;
t301 = t242 * t348;
t389 = t245 * pkin(3);
t184 = t243 * pkin(7) + t389;
t351 = t244 * t184;
t114 = -t301 + t351;
t173 = t242 * t184;
t189 = t244 * t348;
t115 = t189 + t173;
t388 = t245 * pkin(7);
t391 = t243 * pkin(3);
t273 = -t388 + t391;
t261 = qJ(2) + t273;
t349 = t244 * t246;
t302 = t243 * t349;
t111 = t242 * t261 + t302;
t372 = t111 * t245;
t163 = t244 * t261;
t353 = t243 * t246;
t110 = t242 * t353 - t163;
t375 = t110 * t245;
t394 = t243 / 0.2e1;
t13 = -t243 * t348 + (t115 * t394 + t372 / 0.2e1) * t244 + (-t114 * t243 / 0.2e1 + t375 / 0.2e1) * t242;
t239 = t242 ^ 2;
t240 = t244 ^ 2;
t331 = t239 + t240;
t354 = t243 * t245;
t108 = (-0.1e1 + t331) * t354;
t325 = t108 * qJD(2);
t410 = -t13 * qJD(1) - t325;
t352 = t244 * qJ(5);
t183 = pkin(4) * t242 - t352;
t118 = (-t183 + t246) * t243;
t358 = t242 * t245;
t219 = pkin(4) * t358;
t119 = t219 + (-t246 - t352) * t245;
t233 = t245 * pkin(4);
t96 = -t114 - t233;
t379 = t96 * t242;
t232 = t245 * qJ(5);
t92 = t232 + t115;
t380 = t92 * t244;
t357 = t242 * t246;
t87 = -t163 + (-pkin(4) + t357) * t243;
t403 = t87 / 0.2e1;
t83 = t242 * (qJ(2) - t388) + (t242 * pkin(3) + qJ(5) + t349) * t243;
t404 = t83 / 0.2e1;
t4 = (t244 * t404 - t118 / 0.2e1 + t242 * t403) * t245 + (t380 / 0.2e1 + t119 / 0.2e1 + t379 / 0.2e1) * t243;
t409 = t4 * qJD(1) + t325;
t312 = t243 * qJD(3);
t408 = t306 - 0.1e1 / 0.2e1;
t199 = t240 - t239;
t313 = t243 * qJD(1);
t350 = t244 * t245;
t407 = 0.2e1 * t242 * (-qJD(4) + t313) * t350 - t199 * t312;
t359 = t242 * t243;
t74 = t111 * t359;
t405 = t74 / 0.2e1;
t402 = t111 / 0.2e1;
t360 = t242 * qJ(5);
t390 = t244 * pkin(4);
t270 = t360 + t390;
t151 = t270 * t245;
t401 = -t151 / 0.2e1;
t175 = -pkin(3) - t270;
t400 = t175 / 0.2e1;
t399 = t183 / 0.2e1;
t398 = -t184 / 0.2e1;
t397 = -t219 / 0.2e1;
t393 = -t245 / 0.2e1;
t392 = pkin(3) * t244;
t289 = -t359 / 0.2e1;
t32 = t111 * t289 + t405;
t387 = t13 * qJD(3) - t32 * qJD(4);
t52 = t83 * t359;
t355 = t243 * t244;
t73 = t110 * t355;
t254 = -t52 / 0.2e1 - t73 / 0.2e1 + t405 + t151 * t393;
t6 = -t360 / 0.2e1 + (t87 * t394 - pkin(4) / 0.2e1) * t244 + t254;
t385 = t6 * qJD(1);
t8 = -t83 * t110 + t87 * t111 + t119 * t151;
t384 = t8 * qJD(1);
t383 = t83 * t242;
t382 = t87 * t244;
t287 = qJ(5) * t394;
t300 = -t110 / 0.2e1 + t403;
t374 = t111 * t242;
t9 = -t374 / 0.2e1 + (t287 + t404) * t242 + (pkin(4) * t394 - t300) * t244;
t381 = t9 * qJD(1);
t11 = -t96 * t350 + t87 * t355 + t92 * t358 - t52;
t378 = t11 * qJD(1);
t377 = t110 * t243;
t376 = t110 * t244;
t373 = t111 * t243;
t371 = t118 * t244;
t370 = t119 * t242;
t369 = t119 * t244;
t14 = ((-t111 + t83) * t244 + (-t110 + t87) * t242) * t245;
t367 = t14 * qJD(1);
t15 = (t83 - t371) * t245 + (t92 + t369) * t243;
t366 = t15 * qJD(1);
t365 = t151 * t244;
t16 = t73 - t74 + (t114 * t244 + t115 * t242) * t245;
t364 = t16 * qJD(1);
t17 = -t96 * t243 - t87 * t245 + (t118 * t245 - t119 * t243) * t242;
t363 = t17 * qJD(1);
t362 = t239 * t245;
t361 = t240 * t245;
t356 = t243 * t175;
t26 = -t373 + (t151 * t242 + t369) * t245;
t347 = t26 * qJD(1);
t27 = -t377 + (-t365 + t370) * t245;
t346 = t27 * qJD(1);
t28 = -t375 + (t114 + 0.2e1 * t301) * t243;
t345 = t28 * qJD(1);
t29 = t372 + (t115 - 0.2e1 * t189) * t243;
t344 = t29 * qJD(1);
t30 = -t382 + t383;
t343 = t30 * qJD(1);
t342 = t32 * qJD(1);
t341 = t32 * qJD(2);
t35 = -t119 * t350 + t83 * t243;
t340 = t35 * qJD(1);
t39 = t374 - t376;
t339 = t39 * qJD(1);
t44 = -t241 * t357 - t377;
t338 = t44 * qJD(1);
t45 = -t241 * t349 - t373;
t337 = t45 * qJD(1);
t143 = t408 * t244 + t395;
t129 = t143 * qJD(2);
t336 = -t111 * qJD(4) - t129;
t162 = t351 / 0.2e1;
t335 = t162 - t301 / 0.2e1;
t332 = (t361 + t362) * pkin(7);
t330 = qJD(2) * t243;
t329 = qJD(3) * t242;
t328 = qJD(3) * t244;
t327 = qJD(4) * t242;
t326 = qJD(4) * t244;
t323 = t140 * qJD(2);
t127 = t142 * qJD(2);
t283 = t239 / 0.2e1 - t240 / 0.2e1;
t159 = t283 * t245;
t321 = t159 * qJD(4);
t170 = t331 * t245;
t319 = t170 * qJD(1);
t172 = t244 * t406 - t228;
t317 = t172 * qJD(1);
t198 = -t241 + t406;
t316 = t198 * qJD(1);
t315 = t199 * qJD(4);
t314 = t242 * qJD(5);
t231 = t243 * qJD(5);
t310 = t244 * qJD(5);
t309 = t245 * qJD(1);
t307 = t245 * qJD(4);
t305 = -t189 / 0.2e1 - t232;
t304 = pkin(7) * t327;
t303 = pkin(7) * t326;
t286 = t355 / 0.2e1;
t299 = -t370 / 0.2e1 - t175 * t350 / 0.2e1 + pkin(7) * t286;
t298 = qJ(2) * t313;
t297 = qJ(2) * t309;
t296 = t244 * t309;
t295 = t242 * t307;
t294 = t244 * t307;
t208 = t242 * t326;
t293 = t242 * t330;
t207 = t242 * t328;
t292 = t242 * t310;
t214 = t243 * t308;
t291 = t245 * t314;
t290 = t243 * t309;
t288 = t358 / 0.2e1;
t285 = t350 / 0.2e1;
t284 = t183 * t393;
t138 = (-0.1e1 / 0.2e1 + t283) * t245;
t281 = t138 * qJD(1) - t207;
t106 = t159 * qJD(1) - t207;
t178 = t242 * qJD(1) * t228;
t90 = t159 * qJD(3) + t178;
t206 = t242 * t313;
t280 = t140 * qJD(4) + t206;
t141 = t408 * t242 + t396;
t279 = t141 * qJD(4) - t206;
t217 = qJD(4) + t313;
t277 = t241 * t208;
t276 = t242 * t296;
t275 = t242 * t213;
t272 = 0.2e1 * t275;
t271 = pkin(3) * t288 + pkin(7) * t359 / 0.2e1;
t269 = t356 + t388;
t7 = t119 * t118 + t83 * t92 + t87 * t96;
t268 = t7 * qJD(1) + t4 * qJD(2);
t267 = t379 + t380;
t22 = -t246 ^ 2 * t354 - t110 * t114 + t111 * t115;
t266 = t22 * qJD(1) + t13 * qJD(2);
t161 = -t173 / 0.2e1;
t248 = pkin(7) * t289 + (t245 * t400 + t401) * t242 + (t284 - t119 / 0.2e1) * t244;
t19 = t161 + t248 + t305;
t84 = t175 * t244 + t183 * t242;
t265 = -t19 * qJD(1) + t84 * qJD(3);
t180 = t246 * t288;
t195 = -pkin(7) * t355 / 0.2e1;
t255 = t183 * t288 + t175 * t285 + t195 + t370 / 0.2e1;
t21 = -t233 + t180 + (t401 + t398) * t244 + t255;
t85 = -t175 * t242 + t183 * t244;
t264 = -t21 * qJD(1) + t85 * qJD(3);
t263 = -t114 * t242 + t115 * t244;
t262 = t141 * qJD(2) + t110 * qJD(4);
t260 = -t92 * qJ(5) / 0.2e1 + t96 * pkin(4) / 0.2e1;
t69 = t195 + (-t389 / 0.2e1 + t398) * t244;
t259 = pkin(3) * t329 - t69 * qJD(1);
t160 = t173 / 0.2e1;
t68 = t160 + t271;
t258 = pkin(3) * t328 - t68 * qJD(1);
t25 = t233 / 0.2e1 + t299 + t335;
t257 = -t25 * qJD(1) + t175 * t329;
t134 = t217 * t350;
t256 = t270 * qJD(4);
t226 = t240 * t241;
t169 = t239 * t241 - t226;
t98 = -t169 * qJD(1) + t272;
t120 = -t199 * qJD(3) + 0.2e1 * t276;
t253 = -t171 * qJD(3) + t243 * t294;
t252 = t169 * qJD(4) + t243 * t272;
t247 = (t300 * t244 + (-t83 / 0.2e1 + t402) * t242) * pkin(7) + t119 * t399 + t151 * t400;
t2 = t247 + t260;
t65 = t397 + (t352 / 0.2e1 + t399) * t245;
t251 = t175 * t183 * qJD(3) + t2 * qJD(1) - t65 * qJD(2);
t250 = -t256 + t310;
t177 = t226 + t406;
t249 = t177 * qJD(1) + t275 + t311;
t238 = qJ(2) * qJD(2);
t237 = qJD(1) * qJ(2);
t224 = -t309 / 0.2e1;
t223 = t309 / 0.2e1;
t222 = t308 / 0.2e1;
t212 = t244 * t313;
t211 = t244 * t330;
t210 = t243 * t310;
t179 = t244 * t291;
t176 = t217 * qJ(5);
t167 = t212 + t326;
t166 = t206 + t327;
t165 = (t313 + qJD(4) / 0.2e1) * t245;
t154 = t170 * qJD(2);
t152 = t170 * qJD(3);
t150 = -t242 * t312 + t294;
t149 = -t244 * t312 - t295;
t148 = t239 * qJD(3) + t276;
t139 = -t362 / 0.2e1 + t361 / 0.2e1 + t393;
t133 = (t296 + t329) * t243;
t132 = t217 * t358;
t131 = (t242 * t309 - t328) * t243;
t117 = -t240 * t214 - t277;
t116 = -t239 * t214 + t277;
t113 = t209 - t317;
t112 = t216 + t317;
t109 = t242 * t134;
t99 = -t172 * qJD(3) - t243 * t295;
t93 = t108 * qJD(3);
t89 = t240 * t290 - t321;
t88 = t239 * t290 + t321;
t79 = -t142 * qJD(4) - t212;
t78 = -t143 * qJD(4) + t212;
t66 = qJ(5) * t285 + t284 + t397;
t43 = -t321 + (-t240 * t309 - t207) * t243;
t42 = t321 + (-t239 * t309 + t207) * t243;
t41 = t195 + t162 + (-t392 / 0.2e1 - t357) * t245;
t40 = -t189 + t161 + t271;
t24 = t180 - t351 / 0.2e1 - t233 / 0.2e1 + t299;
t20 = -t365 / 0.2e1 + t233 + t255 + t335;
t18 = t160 + t248 - t305;
t10 = -t376 / 0.2e1 - t383 / 0.2e1 + t382 / 0.2e1 + pkin(4) * t286 + (t402 + t287) * t242;
t5 = t87 * t286 + t360 / 0.2e1 + t390 / 0.2e1 + t254;
t3 = t4 * qJD(3);
t1 = t247 - t260;
t12 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), t238, -t214, t198 * qJD(3), 0, t214, 0, 0, qJ(2) * t308 + t330, -qJ(2) * t312 + qJD(2) * t245, 0, t238, t117, t252, t99, t116, -t253, t214, t28 * qJD(3) + t45 * qJD(4) + t211, -t29 * qJD(3) - t44 * qJD(4) - t293, -t16 * qJD(3) - t154, t39 * qJD(2) + t22 * qJD(3), t117, t99, -t252, t214, t253, t116, t17 * qJD(3) + t26 * qJD(4) - t241 * t292 + t211, -t11 * qJD(3) - t14 * qJD(4) - t243 * t291 - t154, t15 * qJD(3) + t27 * qJD(4) + t177 * qJD(5) + t293, t30 * qJD(2) + t7 * qJD(3) + t8 * qJD(4) + t35 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(1), t237, 0, 0, 0, 0, 0, 0, t313, t309, 0, t237, 0, 0, 0, 0, 0, 0, t78, t279, -t319, t339 + t387, 0, 0, 0, 0, 0, 0, t78, -t319, -t279, t5 * qJD(4) + t143 * qJD(5) + t3 + t343; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t290, t316, -t312, t290, -t308, 0, -t246 * t312 + t297, -t246 * t308 - t298, 0, 0, t43, t407, t113, t42, t414, t165, t345 + (t242 * t273 - t302) * qJD(3) + t41 * qJD(4), -t344 + (-pkin(7) * t350 + (t357 + t392) * t243) * qJD(3) + t40 * qJD(4), qJD(3) * t263 - t364, (-pkin(3) * t353 + pkin(7) * t263) * qJD(3) + t266, t43, t113, -t407, t165, -t414, t42, t363 + (-t242 * t269 - t371) * qJD(3) + t20 * qJD(4) + t139 * qJD(5), qJD(3) * t267 + t10 * qJD(4) - t378, t366 + (-t118 * t242 + t244 * t269) * qJD(3) + t18 * qJD(4) + t179, (pkin(7) * t267 + t118 * t175) * qJD(3) + t1 * qJD(4) + t24 * qJD(5) + t268; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t90, -t98, -t132, t90, -t134, t222, t41 * qJD(3) + t336 + t337, t40 * qJD(3) + t262 - t338, 0, -t341, -t90, -t132, t98, t222, t134, t90, t20 * qJD(3) + t336 + t347, -t367 + t10 * qJD(3) + (-t232 * t244 + t219) * qJD(4) - t291, t18 * qJD(3) + t231 - t262 + t346, t384 + t5 * qJD(2) + t1 * qJD(3) + (-t111 * pkin(4) - t110 * qJ(5)) * qJD(4) + t83 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t139 * qJD(3) - t178, -t132, t249, t24 * qJD(3) + t83 * qJD(4) + t129 + t340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(1), -t237, 0, 0, 0, 0, 0, 0, -t313, -t309, 0, -t237, 0, 0, 0, 0, 0, 0, t79, t280, t319, -t339 + t387, 0, 0, 0, 0, 0, 0, t79, t319, -t280, t6 * qJD(4) + t142 * qJD(5) + t3 - t343; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93, 0, 0, 0, 0, 0, 0, 0, 0, 0, t93; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t312, -t308, 0, 0, 0, 0, 0, 0, 0, 0, t149, -t150, t152, (t332 - t391) * qJD(3) - t410, 0, 0, 0, 0, 0, 0, t149, t152, t150, (t332 + t356) * qJD(3) + t66 * qJD(4) + t291 + t409; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t412, t411, 0, -t342, 0, 0, 0, 0, 0, 0, -t412, 0, -t411, t66 * qJD(3) - t243 * t256 + t210 + t385; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t412; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t290, -t316, 0, -t290, 0, 0, -t297, t298, 0, 0, t89, -0.2e1 * t109, t112, t88, -t413, -t165, t69 * qJD(4) - t345, t68 * qJD(4) + t344, t364, -t266, t89, t112, 0.2e1 * t109, -t165, t413, t88, t21 * qJD(4) - t138 * qJD(5) - t363, -t9 * qJD(4) + t210 + t378, t19 * qJD(4) + t179 - t366, t2 * qJD(4) + t25 * qJD(5) - t268; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t410, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t65 * qJD(4) - t409; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t208, t315, 0, -t208, 0, 0, -pkin(3) * t327, -pkin(3) * t326, 0, 0, t208, 0, -t315, 0, 0, -t208, -t85 * qJD(4) + t292, 0, -t84 * qJD(4) + t239 * qJD(5), (qJD(4) * t183 - t314) * t175; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t106, -t120, t167, t106, -t166, t224, -t259 - t303, -t258 + t304, 0, 0, -t106, t167, t120, t224, t166, t106, -t264 - t303, t250 - t381, -t265 - t304, pkin(7) * t250 + t251; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t281, t167, t148, -t257 + t303; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t90, t98, t131, -t90, t133, t222, -t69 * qJD(3) + t127 - t337, -t68 * qJD(3) - t323 + t338, 0, t341, t90, t131, -t98, t222, -t133, -t90, -t21 * qJD(3) + t127 - t347, t9 * qJD(3) + t367, -t19 * qJD(3) + t231 + t323 - t346, qJ(5) * t231 - t6 * qJD(2) - t2 * qJD(3) - t384; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t322, -t324, 0, t342, 0, 0, 0, 0, 0, 0, t322, 0, t324, t65 * qJD(3) - t385; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t106, t120, -t212, -t106, t206, t223, t259, t258, 0, 0, t106, -t212, -t120, t223, -t206, -t106, t264, t381, t265, -t251; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(5), qJ(5) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t217, t176; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t138 * qJD(3) + t178, t131, -t249, -qJ(5) * t311 - t25 * qJD(3) - t127 - t340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t322; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t281, -t212, -t148, t257; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t217, -t176; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t12;
