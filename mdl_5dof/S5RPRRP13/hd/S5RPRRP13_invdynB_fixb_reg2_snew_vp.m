% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRRP13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:00
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRRP13_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP13_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP13_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP13_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP13_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPRRP13_invdynB_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:59:43
% EndTime: 2019-12-31 18:59:53
% DurationCPUTime: 7.42s
% Computational Cost: add. (10637->407), mult. (20667->524), div. (0->0), fcn. (12520->6), ass. (0->299)
t499 = sin(qJ(4));
t502 = cos(qJ(4));
t503 = cos(qJ(3));
t552 = qJD(1) * t503;
t468 = t499 * qJD(3) + t502 * t552;
t500 = sin(qJ(3));
t548 = qJD(1) * qJD(3);
t537 = t500 * t548;
t544 = t503 * qJDD(1);
t472 = -t537 + t544;
t533 = -t502 * qJDD(3) + t499 * t472;
t489 = t500 * qJD(1) + qJD(4);
t549 = qJD(4) + t489;
t380 = t549 * t468 + t533;
t466 = -t502 * qJD(3) + t499 * t552;
t518 = -t499 * qJDD(3) - t502 * t472;
t509 = t466 * qJD(4) + t518;
t584 = t466 * t489;
t616 = -t584 - t509;
t577 = t499 * t616;
t332 = t502 * t380 + t577;
t463 = t468 ^ 2;
t592 = t466 ^ 2;
t424 = t463 - t592;
t309 = t500 * t332 + t503 * t424;
t330 = -t499 * t380 + t502 * t616;
t501 = sin(qJ(1));
t504 = cos(qJ(1));
t676 = t501 * t309 - t504 * t330;
t675 = t504 * t309 + t501 * t330;
t591 = t489 ^ 2;
t443 = t592 - t591;
t427 = t468 * t466;
t536 = t503 * t548;
t546 = t500 * qJDD(1);
t471 = -t536 - t546;
t464 = qJDD(4) - t471;
t603 = t427 + t464;
t574 = t499 * t603;
t361 = t502 * t443 - t574;
t381 = (qJD(4) - t489) * t468 + t533;
t324 = t500 * t361 + t503 * t381;
t562 = t502 * t603;
t357 = t499 * t443 + t562;
t674 = t501 * t324 + t504 * t357;
t673 = t504 * t324 - t501 * t357;
t600 = -t584 + t509;
t624 = -t499 * t381 + t502 * t600;
t602 = t463 + t592;
t623 = -t502 * t381 - t499 * t600;
t642 = t500 * t623 + t503 * t602;
t652 = t501 * t624 - t504 * t642;
t672 = pkin(5) * t652;
t654 = t501 * t642 + t504 * t624;
t671 = pkin(5) * t654;
t415 = t591 + t463;
t344 = t502 * t415 + t574;
t670 = pkin(2) * t344;
t669 = pkin(3) * t344;
t668 = pkin(7) * t344;
t353 = t499 * t415 - t562;
t667 = pkin(7) * t353;
t666 = qJ(2) * t344;
t665 = t500 * t353;
t664 = t501 * t344;
t662 = t503 * t353;
t661 = t504 * t344;
t590 = pkin(6) + pkin(1);
t640 = -t500 * t602 + t503 * t623;
t659 = t590 * t640;
t658 = t590 * t642;
t657 = t503 * t332 - t500 * t424;
t656 = t503 * t361 - t500 * t381;
t444 = -t463 + t591;
t604 = -t427 + t464;
t573 = t499 * t604;
t626 = t502 * t444 + t573;
t561 = t502 * t604;
t625 = -t499 * t444 + t561;
t641 = -t500 * t625 - t503 * t600;
t655 = -t501 * t641 + t504 * t626;
t653 = t501 * t626 + t504 * t641;
t651 = pkin(2) * t642 + pkin(3) * t602 + pkin(7) * t623 - qJ(2) * t640;
t650 = pkin(7) * t624;
t639 = -t500 * t600 + t503 * t625;
t599 = -t591 - t592;
t615 = t499 * t599 + t561;
t638 = pkin(2) * t615;
t637 = pkin(3) * t615;
t612 = t502 * t599 - t573;
t636 = pkin(7) * t612;
t635 = pkin(7) * t615;
t634 = qJ(2) * t615;
t632 = t500 * t612;
t631 = t501 * t615;
t629 = t503 * t612;
t628 = t504 * t615;
t627 = t616 * qJ(5);
t622 = 2 * qJD(5);
t511 = (-t466 * t499 - t468 * t502) * t489;
t582 = t489 * t499;
t438 = t468 * t582;
t581 = t489 * t502;
t540 = t466 * t581;
t523 = t438 - t540;
t595 = t503 * t464 - t500 * t523;
t614 = -t501 * t595 + t504 * t511;
t412 = -t468 * qJD(4) - t533;
t524 = t502 * t412 + t466 * t582;
t515 = -t499 * t412 + t540;
t539 = t503 * t427;
t596 = -t500 * t515 - t539;
t613 = -t501 * t596 + t504 * t524;
t611 = t501 * t511 + t504 * t595;
t610 = t501 * t524 + t504 * t596;
t506 = qJD(1) ^ 2;
t605 = t590 * t506;
t547 = qJD(2) * qJD(1);
t494 = 0.2e1 * t547;
t483 = t504 * g(1) + t501 * g(2);
t496 = qJDD(1) * qJ(2);
t517 = t483 - t496;
t513 = t494 - t517;
t520 = -t472 + t537;
t521 = -t471 + t536;
t372 = t521 * pkin(3) + t520 * pkin(7) + t513 - t605;
t482 = t501 * g(1) - t504 * g(2);
t522 = qJDD(2) - t482;
t510 = -t506 * qJ(2) + t522;
t447 = -t590 * qJDD(1) + t510;
t419 = -t503 * g(3) + t500 * t447;
t505 = qJD(3) ^ 2;
t589 = pkin(3) * t500;
t528 = -pkin(7) * t503 + t589;
t514 = t506 * t528;
t391 = -t505 * pkin(3) + qJDD(3) * pkin(7) - t500 * t514 + t419;
t327 = t499 * t372 + t502 * t391;
t417 = t466 * pkin(4) - t468 * qJ(5);
t519 = t464 * qJ(5) - t466 * t417 + t489 * t622 + t327;
t377 = t468 * t581 - t499 * t509;
t378 = -t502 * t509 - t438;
t516 = -t500 * t378 + t539;
t598 = t501 * t377 + t504 * t516;
t597 = t504 * t377 - t501 * t516;
t542 = t500 * t427;
t594 = t503 * t515 - t542;
t593 = t500 * t464 + t503 * t523;
t588 = pkin(4) * t502;
t587 = t412 * pkin(4);
t586 = qJ(5) * t502;
t585 = qJDD(1) * pkin(1);
t583 = t489 * t468;
t497 = t500 ^ 2;
t580 = t497 * t506;
t498 = t503 ^ 2;
t579 = t498 * t506;
t418 = t500 * g(3) + t503 * t447;
t390 = qJDD(3) * pkin(3) + t505 * pkin(7) - t503 * t514 + t418;
t575 = t499 * t390;
t440 = t517 - 0.2e1 * t547 + t605;
t570 = t500 * t440;
t541 = t500 * t506 * t503;
t479 = qJDD(3) + t541;
t568 = t500 * t479;
t480 = qJDD(3) - t541;
t567 = t500 * t480;
t553 = t497 + t498;
t474 = t553 * qJDD(1);
t566 = t501 * t474;
t563 = t502 * t390;
t559 = t503 * t440;
t557 = t503 * t479;
t556 = t503 * t480;
t555 = t504 * t474;
t326 = -t502 * t372 + t499 * t391;
t554 = t602 - t591;
t545 = t501 * qJDD(1);
t543 = t504 * qJDD(1);
t538 = pkin(3) * t503 + pkin(2);
t535 = -qJ(5) * t499 - pkin(3);
t284 = t499 * t326 + t502 * t327;
t451 = -t506 * pkin(1) + t513;
t452 = -t510 + t585;
t399 = t504 * t451 - t501 * t452;
t429 = -t501 * t482 - t504 * t483;
t532 = t501 * t541;
t531 = t504 * t541;
t529 = t468 * t417 + qJDD(5) + t326;
t475 = -t501 * t506 + t543;
t527 = pkin(5) * t475 + t501 * g(3);
t476 = t504 * t506 + t545;
t526 = -pkin(5) * t476 + t504 * g(3);
t525 = t503 * t378 + t542;
t283 = -t502 * t326 + t499 * t327;
t370 = t503 * t418 + t500 * t419;
t371 = -t500 * t418 + t503 * t419;
t396 = t501 * t451 + t504 * t452;
t428 = t504 * t482 - t501 * t483;
t512 = -t464 * pkin(4) + t529;
t508 = -pkin(4) * t583 + t468 * t622 + t390;
t507 = t508 + t627;
t487 = -t505 - t579;
t486 = t505 - t579;
t485 = -t505 - t580;
t484 = -t505 + t580;
t478 = (-t497 + t498) * t506;
t477 = t553 * t506;
t473 = -0.2e1 * t537 + t544;
t470 = 0.2e1 * t536 + t546;
t465 = t553 * t548;
t442 = -t500 * t472 - t498 * t548;
t441 = -t503 * t471 - t497 * t548;
t436 = -t500 * t487 - t557;
t435 = t503 * t485 - t567;
t434 = t503 * t487 - t568;
t433 = -t503 * t486 - t567;
t432 = t500 * t485 + t556;
t431 = -t500 * t484 - t557;
t423 = -t504 * t477 - t566;
t422 = -t501 * t477 + t555;
t416 = t500 * t470 - t503 * t473;
t401 = t501 * t434 + t504 * t473;
t400 = t501 * t432 + t504 * t470;
t398 = -t504 * t434 + t501 * t473;
t397 = -t504 * t432 + t501 * t470;
t386 = t549 * t466 + t518;
t379 = -t412 + t583;
t350 = -pkin(2) * t477 - t371;
t349 = pkin(2) * t434 - qJ(2) * t436 - t419;
t348 = pkin(2) * t432 - qJ(2) * t435 + t418;
t343 = pkin(2) * t470 - t590 * t435 - t559;
t342 = pkin(2) * t473 - t590 * t436 + t570;
t341 = t501 * t370 - t504 * t440;
t340 = -t504 * t370 - t501 * t440;
t320 = -t563 + t668;
t319 = pkin(2) * t370 - qJ(2) * t371;
t318 = -t575 - t635;
t317 = t500 * t379 + t629;
t316 = -t500 * t386 + t662;
t315 = -t503 * t379 + t632;
t314 = t503 * t386 + t665;
t313 = t500 * t380 + t629;
t312 = -t500 * t616 - t662;
t311 = -t503 * t380 + t632;
t310 = t503 * t616 - t665;
t307 = -pkin(2) * t440 - t590 * t371;
t302 = t507 + t587;
t301 = qJ(5) * t591 - t512;
t300 = -pkin(4) * t591 + t519;
t299 = t327 + t669;
t298 = t326 - t637;
t297 = t501 * t315 + t628;
t296 = t501 * t314 - t661;
t295 = -t504 * t315 + t631;
t294 = -t504 * t314 - t664;
t293 = t554 * qJ(5) + t512;
t292 = t501 * t311 + t628;
t291 = t501 * t310 + t661;
t290 = -t504 * t311 + t631;
t289 = -t504 * t310 + t664;
t288 = -pkin(3) * t624 - pkin(4) * t600 + qJ(5) * t381;
t287 = t554 * pkin(4) + t519;
t286 = (-t379 + t412) * pkin(4) + t507;
t285 = t508 + t587 + 0.2e1 * t627;
t278 = t503 * t284 - t500 * t390;
t277 = t500 * t284 + t503 * t390;
t276 = -t637 + (-t599 - t591) * qJ(5) + (-t604 - t464) * pkin(4) + t529;
t275 = -t669 - qJ(5) * t603 + (-t415 + t591) * pkin(4) - t519;
t274 = -t283 - t650;
t273 = -t499 * t286 - t379 * t586 - t635;
t272 = -pkin(4) * t577 + t502 * t285 - t668;
t271 = t502 * t300 - t499 * t301;
t270 = t499 * t300 + t502 * t301;
t269 = pkin(2) * t314 + pkin(3) * t386 - qJ(2) * t316 - t575 + t667;
t268 = pkin(2) * t311 - pkin(3) * t380 - qJ(2) * t313 + t563 + t636;
t267 = t501 * t277 + t504 * t283;
t266 = -t504 * t277 + t501 * t283;
t265 = t503 * t271 - t500 * t302;
t264 = t500 * t271 + t503 * t302;
t263 = -t499 * t287 + t502 * t293 - t650;
t262 = -t503 * t299 - t590 * t316 - t500 * t320 - t670;
t261 = pkin(2) * t315 - qJ(2) * t317 + t502 * t286 + t535 * t379 + t636;
t260 = -t503 * t298 - t590 * t313 - t500 * t318 + t638;
t259 = pkin(2) * t310 - t667 - qJ(2) * t312 + t499 * t285 + (pkin(3) + t588) * t616;
t258 = t284 + t651;
t257 = -pkin(7) * t270 + (-pkin(4) * t499 + t586) * t302;
t256 = -pkin(3) * t270 - pkin(4) * t301 - qJ(5) * t300;
t255 = pkin(2) * t277 + pkin(3) * t390 + pkin(7) * t284 - qJ(2) * t278;
t254 = -t500 * t274 + t538 * t624 - t659;
t253 = t502 * t287 + t499 * t293 + t651;
t252 = t501 * t264 + t504 * t270;
t251 = -t504 * t264 + t501 * t270;
t250 = -t500 * t273 - t503 * t276 - t590 * t317 + t638;
t249 = -t500 * t272 - t503 * t275 - t590 * t312 + t670;
t248 = pkin(2) * t624 - t500 * t263 - t503 * t288 - t659;
t247 = -t590 * t278 + (pkin(7) * t500 + t538) * t283;
t246 = pkin(2) * t264 + pkin(7) * t271 - qJ(2) * t265 + (-t535 + t588) * t302;
t245 = pkin(2) * t270 - t503 * t256 - t500 * t257 - t590 * t265;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t476, -t475, 0, t429, 0, 0, 0, 0, 0, 0, 0, t476, t475, t399, 0, 0, 0, 0, 0, 0, t400, t401, t423, t341, 0, 0, 0, 0, 0, 0, t292, t296, t654, t267, 0, 0, 0, 0, 0, 0, t297, t654, t291, t252; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t475, -t476, 0, t428, 0, 0, 0, 0, 0, 0, 0, -t475, t476, t396, 0, 0, 0, 0, 0, 0, t397, t398, t422, t340, 0, 0, 0, 0, 0, 0, t290, t294, t652, t266, 0, 0, 0, 0, 0, 0, t295, t652, t289, t251; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t435, t436, 0, t371, 0, 0, 0, 0, 0, 0, t313, t316, t640, t278, 0, 0, 0, 0, 0, 0, t317, t640, t312, t265; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t475, 0, -t476, 0, -t527, -t526, -t428, -pkin(5) * t428, 0, -t475, t476, 0, 0, 0, -t396, t527, t526, -pkin(5) * t396 + (-pkin(1) * t501 + qJ(2) * t504) * g(3), -t501 * t442 + t531, -t501 * t416 + t504 * t478, -t501 * t433 + t503 * t543, -t501 * t441 - t531, -t501 * t431 - t500 * t543, t504 * qJDD(3) - t501 * t465, -pkin(5) * t397 - t501 * t343 + t504 * t348, -pkin(5) * t398 - t501 * t342 + t504 * t349, -pkin(2) * t555 - pkin(5) * t422 - t501 * t350, -pkin(5) * t340 - t501 * t307 + t504 * t319, t597, -t676, t655, t613, t674, t614, -pkin(5) * t290 - t501 * t260 + t504 * t268, -pkin(5) * t294 - t501 * t262 + t504 * t269, -t501 * t254 + t504 * t258 - t672, -pkin(5) * t266 - t501 * t247 + t504 * t255, t597, t655, t676, t614, -t674, t613, -pkin(5) * t295 - t501 * t250 + t504 * t261, -t501 * t248 + t504 * t253 - t672, -pkin(5) * t289 - t501 * t249 + t504 * t259, -pkin(5) * t251 - t501 * t245 + t504 * t246; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t476, 0, t475, 0, t526, -t527, t429, pkin(5) * t429, 0, -t476, -t475, 0, 0, 0, t399, -t526, t527, pkin(5) * t399 + (pkin(1) * t504 + qJ(2) * t501) * g(3), t504 * t442 + t532, t504 * t416 + t501 * t478, t504 * t433 + t501 * t544, t504 * t441 - t532, t504 * t431 - t500 * t545, t501 * qJDD(3) + t504 * t465, pkin(5) * t400 + t504 * t343 + t501 * t348, pkin(5) * t401 + t504 * t342 + t501 * t349, -pkin(2) * t566 + pkin(5) * t423 + t504 * t350, pkin(5) * t341 + t504 * t307 + t501 * t319, t598, t675, t653, t610, -t673, t611, pkin(5) * t292 + t504 * t260 + t501 * t268, pkin(5) * t296 + t504 * t262 + t501 * t269, t504 * t254 + t501 * t258 + t671, pkin(5) * t267 + t504 * t247 + t501 * t255, t598, t653, -t675, t611, t673, t610, pkin(5) * t297 + t504 * t250 + t501 * t261, t504 * t248 + t501 * t253 + t671, pkin(5) * t291 + t504 * t249 + t501 * t259, pkin(5) * t252 + t504 * t245 + t501 * t246; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t482, t483, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t522 - 0.2e1 * t585, -t483 + t494 + 0.2e1 * t496, pkin(1) * t452 + qJ(2) * t451, -t520 * t503, -t503 * t470 - t500 * t473, -t500 * t486 + t556, t521 * t500, t503 * t484 - t568, 0, qJ(2) * t470 - t590 * t432 - t570, qJ(2) * t473 - t590 * t434 - t559, -qJ(2) * t477 + t590 * t474 - t370, -qJ(2) * t440 - t590 * t370, t525, -t657, t639, t594, t656, t593, -t500 * t298 - t590 * t311 + t503 * t318 + t634, -t500 * t299 - t590 * t314 + t503 * t320 - t666, t503 * t274 + (qJ(2) + t589) * t624 - t658, -t590 * t277 + (qJ(2) + t528) * t283, t525, t639, t657, t593, -t656, t594, t503 * t273 - t500 * t276 - t590 * t315 + t634, qJ(2) * t624 + t503 * t263 - t500 * t288 - t658, t503 * t272 - t500 * t275 - t590 * t310 + t666, qJ(2) * t270 - t500 * t256 + t503 * t257 - t590 * t264;];
tauB_reg = t1;
