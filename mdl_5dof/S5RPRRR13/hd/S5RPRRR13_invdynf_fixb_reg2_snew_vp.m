% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRRR13
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:16
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRRR13_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR13_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR13_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR13_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR13_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRR13_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:15:55
% EndTime: 2019-12-31 19:15:57
% DurationCPUTime: 2.02s
% Computational Cost: add. (8865->215), mult. (17408->248), div. (0->0), fcn. (11307->8), ass. (0->145)
t1176 = sin(qJ(3));
t1166 = t1176 * qJD(1);
t1162 = t1166 + qJD(4);
t1159 = qJD(5) + t1162;
t1210 = qJD(5) + t1159;
t1183 = qJD(1) ^ 2;
t1177 = sin(qJ(1));
t1181 = cos(qJ(1));
t1158 = -t1181 * g(1) - t1177 * g(2);
t1184 = -qJDD(1) * qJ(2) - 0.2e1 * qJD(2) * qJD(1) - t1158;
t1204 = pkin(6) + pkin(1);
t1137 = t1204 * t1183 + t1184;
t1175 = sin(qJ(4));
t1179 = cos(qJ(4));
t1180 = cos(qJ(3));
t1203 = qJD(1) * t1180;
t1145 = -t1179 * qJD(3) + t1175 * t1203;
t1147 = t1175 * qJD(3) + t1179 * t1203;
t1174 = sin(qJ(5));
t1178 = cos(qJ(5));
t1126 = t1178 * t1145 + t1174 * t1147;
t1209 = t1126 ^ 2;
t1128 = -t1174 * t1145 + t1178 * t1147;
t1208 = t1128 ^ 2;
t1144 = t1145 ^ 2;
t1207 = t1147 ^ 2;
t1206 = t1159 ^ 2;
t1205 = t1162 ^ 2;
t1202 = t1128 * t1126;
t1201 = t1147 * t1145;
t1200 = t1162 * t1145;
t1199 = qJD(4) - t1162;
t1198 = qJD(5) - t1159;
t1163 = qJD(3) * t1203;
t1164 = t1176 * qJDD(1);
t1148 = t1164 + 0.2e1 * t1163;
t1195 = qJD(3) * t1166;
t1196 = t1180 * qJDD(1);
t1149 = -t1195 + t1196;
t1108 = (-t1149 + t1195) * pkin(7) + t1148 * pkin(3) - t1137;
t1157 = t1177 * g(1) - t1181 * g(2);
t1185 = -t1183 * qJ(2) + qJDD(2) - t1157;
t1138 = -t1204 * qJDD(1) + t1185;
t1130 = -t1180 * g(3) + t1176 * t1138;
t1182 = qJD(3) ^ 2;
t1186 = t1183 * (pkin(3) * t1176 - pkin(7) * t1180);
t1116 = -t1182 * pkin(3) + qJDD(3) * pkin(7) - t1176 * t1186 + t1130;
t1093 = t1175 * t1108 + t1179 * t1116;
t1172 = t1176 ^ 2;
t1173 = t1180 ^ 2;
t1197 = t1172 + t1173;
t1194 = t1176 * t1183 * t1180;
t1193 = t1164 + t1163 + qJDD(4);
t1092 = t1179 * t1108 - t1175 * t1116;
t1191 = -t1179 * qJDD(3) + t1175 * t1149;
t1123 = -t1147 * qJD(4) - t1191;
t1187 = -t1175 * qJDD(3) - t1179 * t1149;
t1124 = -t1145 * qJD(4) - t1187;
t1192 = t1178 * t1123 - t1174 * t1124;
t1190 = -qJDD(5) - t1193;
t1189 = t1162 * pkin(4) - t1147 * pkin(8);
t1129 = t1176 * g(3) + t1180 * t1138;
t1188 = -t1174 * t1123 - t1178 * t1124;
t1119 = t1193 - t1201;
t1115 = qJDD(3) * pkin(3) + t1182 * pkin(7) - t1180 * t1186 + t1129;
t1161 = -t1173 * t1183 - t1182;
t1160 = -t1172 * t1183 - t1182;
t1156 = -qJDD(3) - t1194;
t1155 = qJDD(3) - t1194;
t1154 = t1197 * t1183;
t1153 = t1177 * qJDD(1) + t1181 * t1183;
t1152 = t1181 * qJDD(1) - t1177 * t1183;
t1151 = t1197 * qJDD(1);
t1150 = -0.2e1 * t1195 + t1196;
t1141 = qJDD(1) * pkin(1) - t1185;
t1140 = t1183 * pkin(1) + t1184;
t1135 = t1180 * t1156 - t1176 * t1161;
t1134 = -t1176 * t1155 + t1180 * t1160;
t1133 = t1176 * t1156 + t1180 * t1161;
t1132 = t1180 * t1155 + t1176 * t1160;
t1131 = -t1205 - t1207;
t1125 = -t1205 - t1144;
t1120 = -t1193 - t1201;
t1118 = -t1144 - t1207;
t1114 = -t1206 - t1208;
t1112 = t1199 * t1145 + t1187;
t1111 = t1124 - t1200;
t1110 = -t1199 * t1147 - t1191;
t1109 = (qJD(4) + t1162) * t1147 + t1191;
t1107 = -t1176 * t1129 + t1180 * t1130;
t1106 = t1180 * t1129 + t1176 * t1130;
t1103 = t1179 * t1120 - t1175 * t1131;
t1102 = t1175 * t1120 + t1179 * t1131;
t1101 = -t1206 - t1209;
t1100 = -t1175 * t1119 + t1179 * t1125;
t1099 = t1179 * t1119 + t1175 * t1125;
t1098 = t1190 - t1202;
t1097 = -t1190 - t1202;
t1096 = -t1208 - t1209;
t1095 = t1179 * t1110 - t1175 * t1112;
t1094 = t1175 * t1110 + t1179 * t1112;
t1091 = t1180 * t1103 + t1176 * t1111;
t1090 = t1176 * t1103 - t1180 * t1111;
t1089 = t1123 * pkin(4) + t1144 * pkin(8) - t1147 * t1189 + t1115;
t1088 = t1178 * t1098 - t1174 * t1114;
t1087 = t1174 * t1098 + t1178 * t1114;
t1086 = t1180 * t1100 + t1176 * t1109;
t1085 = t1176 * t1100 - t1180 * t1109;
t1084 = t1198 * t1126 + t1188;
t1083 = -t1210 * t1126 - t1188;
t1082 = -t1198 * t1128 + t1192;
t1081 = t1210 * t1128 - t1192;
t1080 = -t1174 * t1097 + t1178 * t1101;
t1079 = t1178 * t1097 + t1174 * t1101;
t1078 = t1180 * t1095 + t1176 * t1118;
t1077 = t1176 * t1095 - t1180 * t1118;
t1076 = -t1144 * pkin(4) + t1123 * pkin(8) - t1162 * t1189 + t1093;
t1075 = (-t1124 - t1200) * pkin(8) + t1119 * pkin(4) + t1092;
t1074 = -t1175 * t1092 + t1179 * t1093;
t1073 = t1179 * t1092 + t1175 * t1093;
t1072 = -t1175 * t1087 + t1179 * t1088;
t1071 = t1179 * t1087 + t1175 * t1088;
t1070 = t1180 * t1074 - t1176 * t1115;
t1069 = t1176 * t1074 + t1180 * t1115;
t1068 = t1178 * t1082 - t1174 * t1084;
t1067 = t1174 * t1082 + t1178 * t1084;
t1066 = -t1175 * t1079 + t1179 * t1080;
t1065 = t1179 * t1079 + t1175 * t1080;
t1064 = t1174 * t1075 + t1178 * t1076;
t1063 = t1178 * t1075 - t1174 * t1076;
t1062 = t1180 * t1072 + t1176 * t1083;
t1061 = t1176 * t1072 - t1180 * t1083;
t1060 = t1180 * t1066 + t1176 * t1081;
t1059 = t1176 * t1066 - t1180 * t1081;
t1058 = -t1175 * t1067 + t1179 * t1068;
t1057 = t1179 * t1067 + t1175 * t1068;
t1056 = t1180 * t1058 + t1176 * t1096;
t1055 = t1176 * t1058 - t1180 * t1096;
t1054 = -t1174 * t1063 + t1178 * t1064;
t1053 = t1178 * t1063 + t1174 * t1064;
t1052 = -t1175 * t1053 + t1179 * t1054;
t1051 = t1179 * t1053 + t1175 * t1054;
t1050 = t1180 * t1052 - t1176 * t1089;
t1049 = t1176 * t1052 + t1180 * t1089;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1153, -t1152, 0, -t1177 * t1157 + t1181 * t1158, 0, 0, 0, 0, 0, 0, 0, t1153, t1152, -t1181 * t1140 - t1177 * t1141, 0, 0, 0, 0, 0, 0, t1177 * t1132 + t1181 * t1148, t1177 * t1133 + t1181 * t1150, -t1177 * t1151 - t1181 * t1154, t1177 * t1106 - t1181 * t1137, 0, 0, 0, 0, 0, 0, t1177 * t1085 + t1181 * t1099, t1177 * t1090 + t1181 * t1102, t1177 * t1077 + t1181 * t1094, t1177 * t1069 + t1181 * t1073, 0, 0, 0, 0, 0, 0, t1177 * t1059 + t1181 * t1065, t1177 * t1061 + t1181 * t1071, t1177 * t1055 + t1181 * t1057, t1177 * t1049 + t1181 * t1051; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1152, -t1153, 0, t1181 * t1157 + t1177 * t1158, 0, 0, 0, 0, 0, 0, 0, -t1152, t1153, -t1177 * t1140 + t1181 * t1141, 0, 0, 0, 0, 0, 0, -t1181 * t1132 + t1177 * t1148, -t1181 * t1133 + t1177 * t1150, t1181 * t1151 - t1177 * t1154, -t1181 * t1106 - t1177 * t1137, 0, 0, 0, 0, 0, 0, -t1181 * t1085 + t1177 * t1099, -t1181 * t1090 + t1177 * t1102, -t1181 * t1077 + t1177 * t1094, -t1181 * t1069 + t1177 * t1073, 0, 0, 0, 0, 0, 0, -t1181 * t1059 + t1177 * t1065, -t1181 * t1061 + t1177 * t1071, -t1181 * t1055 + t1177 * t1057, -t1181 * t1049 + t1177 * t1051; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1134, t1135, 0, t1107, 0, 0, 0, 0, 0, 0, t1086, t1091, t1078, t1070, 0, 0, 0, 0, 0, 0, t1060, t1062, t1056, t1050; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1183, -qJDD(1), 0, t1158, 0, 0, 0, 0, 0, 0, 0, t1183, qJDD(1), -t1140, 0, 0, 0, 0, 0, 0, t1148, t1150, -t1154, -t1137, 0, 0, 0, 0, 0, 0, t1099, t1102, t1094, t1073, 0, 0, 0, 0, 0, 0, t1065, t1071, t1057, t1051; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1183, 0, t1157, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), t1183, t1141, 0, 0, 0, 0, 0, 0, -t1132, -t1133, t1151, -t1106, 0, 0, 0, 0, 0, 0, -t1085, -t1090, -t1077, -t1069, 0, 0, 0, 0, 0, 0, -t1059, -t1061, -t1055, -t1049; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1134, t1135, 0, t1107, 0, 0, 0, 0, 0, 0, t1086, t1091, t1078, t1070, 0, 0, 0, 0, 0, 0, t1060, t1062, t1056, t1050; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1134, t1135, 0, t1107, 0, 0, 0, 0, 0, 0, t1086, t1091, t1078, t1070, 0, 0, 0, 0, 0, 0, t1060, t1062, t1056, t1050; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1183, -qJDD(1), t1140, 0, 0, 0, 0, 0, 0, -t1148, -t1150, t1154, t1137, 0, 0, 0, 0, 0, 0, -t1099, -t1102, -t1094, -t1073, 0, 0, 0, 0, 0, 0, -t1065, -t1071, -t1057, -t1051; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1183, -t1141, 0, 0, 0, 0, 0, 0, t1132, t1133, -t1151, t1106, 0, 0, 0, 0, 0, 0, t1085, t1090, t1077, t1069, 0, 0, 0, 0, 0, 0, t1059, t1061, t1055, t1049; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1160, t1156, -t1164, t1130, 0, 0, 0, 0, 0, 0, t1100, t1103, t1095, t1074, 0, 0, 0, 0, 0, 0, t1066, t1072, t1058, t1052; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1155, t1161, -t1196, t1129, 0, 0, 0, 0, 0, 0, -t1109, -t1111, -t1118, t1115, 0, 0, 0, 0, 0, 0, -t1081, -t1083, -t1096, t1089; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1148, t1150, -t1154, -t1137, 0, 0, 0, 0, 0, 0, t1099, t1102, t1094, t1073, 0, 0, 0, 0, 0, 0, t1065, t1071, t1057, t1051; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1125, t1120, t1110, t1093, 0, 0, 0, 0, 0, 0, t1080, t1088, t1068, t1054; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1119, t1131, t1112, t1092, 0, 0, 0, 0, 0, 0, t1079, t1087, t1067, t1053; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1109, t1111, t1118, -t1115, 0, 0, 0, 0, 0, 0, t1081, t1083, t1096, -t1089; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1101, t1098, t1082, t1064; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1097, t1114, t1084, t1063; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1081, t1083, t1096, -t1089;];
f_new_reg = t1;
