% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRRR13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:16
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRRR13_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR13_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR13_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR13_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR13_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRR13_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:15:35
% EndTime: 2019-12-31 19:15:45
% DurationCPUTime: 6.71s
% Computational Cost: add. (26400->485), mult. (51754->705), div. (0->0), fcn. (33501->8), ass. (0->328)
t513 = sin(qJ(5));
t514 = sin(qJ(4));
t518 = cos(qJ(4));
t519 = cos(qJ(3));
t557 = qJD(1) * t519;
t478 = -t518 * qJD(3) + t514 * t557;
t480 = t514 * qJD(3) + t518 * t557;
t517 = cos(qJ(5));
t435 = t517 * t478 + t513 * t480;
t437 = -t513 * t478 + t517 * t480;
t392 = t437 * t435;
t554 = qJD(1) * qJD(3);
t540 = t519 * t554;
t515 = sin(qJ(3));
t552 = t515 * qJDD(1);
t483 = -t540 - t552;
t476 = qJDD(4) - t483;
t523 = qJDD(5) + t476;
t588 = -t392 + t523;
t593 = t513 * t588;
t445 = t480 * t478;
t586 = -t445 + t476;
t592 = t514 * t586;
t591 = t517 * t588;
t590 = t518 * t586;
t502 = t515 * qJD(1) + qJD(4);
t462 = t502 * t478;
t541 = t515 * t554;
t550 = t519 * qJDD(1);
t484 = -t541 + t550;
t543 = t478 * qJD(4) - t514 * qJDD(3) - t518 * t484;
t407 = -t462 + t543;
t522 = qJD(1) ^ 2;
t585 = pkin(6) + pkin(1);
t589 = t585 * t522;
t496 = qJD(5) + t502;
t422 = t496 * t435;
t538 = -t518 * qJDD(3) + t514 * t484;
t430 = -t480 * qJD(4) - t538;
t524 = t435 * qJD(5) - t513 * t430 + t517 * t543;
t587 = -t422 - t524;
t406 = t543 + t462;
t539 = -t517 * t430 - t513 * t543;
t335 = (qJD(5) - t496) * t437 + t539;
t402 = (qJD(4) - t502) * t480 + t538;
t433 = t435 ^ 2;
t434 = t437 ^ 2;
t474 = t478 ^ 2;
t475 = t480 ^ 2;
t495 = t496 ^ 2;
t501 = t502 ^ 2;
t584 = pkin(3) * t515;
t583 = qJDD(1) * pkin(1);
t582 = t496 * t513;
t581 = t496 * t517;
t580 = t502 * t514;
t579 = t502 * t518;
t511 = t515 ^ 2;
t578 = t511 * t522;
t512 = t519 ^ 2;
t577 = t512 * t522;
t516 = sin(qJ(1));
t520 = cos(qJ(1));
t493 = t516 * g(1) - t520 * g(2);
t531 = qJDD(2) - t493;
t525 = -t522 * qJ(2) + t531;
t461 = -t585 * qJDD(1) + t525;
t439 = t515 * g(3) + t519 * t461;
t521 = qJD(3) ^ 2;
t535 = -pkin(7) * t519 + t584;
t527 = t522 * t535;
t410 = qJDD(3) * pkin(3) + t521 * pkin(7) - t519 * t527 + t439;
t534 = t502 * pkin(4) - t480 * pkin(8);
t345 = t430 * pkin(4) + t474 * pkin(8) - t480 * t534 + t410;
t576 = t513 * t345;
t376 = t392 + t523;
t575 = t513 * t376;
t553 = qJD(2) * qJD(1);
t508 = 0.2e1 * t553;
t494 = t520 * g(1) + t516 * g(2);
t510 = qJDD(1) * qJ(2);
t528 = t494 - t510;
t526 = t508 - t528;
t529 = -t484 + t541;
t530 = -t483 + t540;
t397 = t530 * pkin(3) + t529 * pkin(7) + t526 - t589;
t440 = -t519 * g(3) + t515 * t461;
t411 = -t521 * pkin(3) + qJDD(3) * pkin(7) - t515 * t527 + t440;
t358 = -t518 * t397 + t514 * t411;
t315 = t586 * pkin(4) + t407 * pkin(8) - t358;
t359 = t514 * t397 + t518 * t411;
t321 = -t474 * pkin(4) + t430 * pkin(8) - t502 * t534 + t359;
t282 = -t517 * t315 + t513 * t321;
t283 = t513 * t315 + t517 * t321;
t252 = -t517 * t282 + t513 * t283;
t574 = t514 * t252;
t573 = t514 * t410;
t426 = t445 + t476;
t572 = t514 * t426;
t456 = t528 - 0.2e1 * t553 + t589;
t571 = t515 * t456;
t546 = t515 * t522 * t519;
t491 = qJDD(3) + t546;
t570 = t515 * t491;
t492 = qJDD(3) - t546;
t569 = t515 * t492;
t558 = t511 + t512;
t486 = t558 * qJDD(1);
t568 = t516 * t486;
t567 = t517 * t345;
t566 = t517 * t376;
t565 = t518 * t252;
t564 = t518 * t410;
t563 = t518 * t426;
t562 = t519 * t456;
t561 = t519 * t491;
t560 = t519 * t492;
t559 = t520 * t486;
t551 = t516 * qJDD(1);
t549 = t520 * qJDD(1);
t548 = t515 * t392;
t547 = t515 * t445;
t545 = t519 * t392;
t544 = t519 * t445;
t542 = pkin(3) * t519 + pkin(2);
t253 = t513 * t282 + t517 * t283;
t310 = t514 * t358 + t518 * t359;
t463 = -t522 * pkin(1) + t526;
t464 = -t525 + t583;
t417 = t520 * t463 - t516 * t464;
t447 = -t516 * t493 - t520 * t494;
t537 = t516 * t546;
t536 = t520 * t546;
t487 = -t516 * t522 + t549;
t533 = pkin(5) * t487 + t516 * g(3);
t488 = t520 * t522 + t551;
t532 = -pkin(5) * t488 + t520 * g(3);
t309 = -t518 * t358 + t514 * t359;
t395 = t519 * t439 + t515 * t440;
t396 = -t515 * t439 + t519 * t440;
t414 = t516 * t463 + t520 * t464;
t446 = t520 * t493 - t516 * t494;
t500 = -t521 - t577;
t499 = t521 - t577;
t498 = -t521 - t578;
t497 = -t521 + t578;
t490 = (-t511 + t512) * t522;
t489 = t558 * t522;
t485 = -0.2e1 * t541 + t550;
t482 = 0.2e1 * t540 + t552;
t477 = t558 * t554;
t460 = -t475 + t501;
t459 = t474 - t501;
t458 = -t515 * t484 - t512 * t554;
t457 = -t519 * t483 - t511 * t554;
t453 = -t515 * t500 - t561;
t452 = t519 * t498 - t569;
t451 = t519 * t500 - t570;
t450 = -t519 * t499 - t569;
t449 = t515 * t498 + t560;
t448 = -t515 * t497 - t561;
t444 = -t475 + t474;
t443 = -t520 * t489 - t568;
t442 = -t516 * t489 + t559;
t441 = -t475 - t501;
t438 = t515 * t482 - t519 * t485;
t432 = -t501 - t474;
t424 = t474 + t475;
t421 = -t434 + t495;
t420 = t433 - t495;
t419 = t516 * t451 + t520 * t485;
t418 = t516 * t449 + t520 * t482;
t416 = -t520 * t451 + t516 * t485;
t415 = -t520 * t449 + t516 * t482;
t413 = (-t478 * t518 + t480 * t514) * t502;
t412 = (-t478 * t514 - t480 * t518) * t502;
t409 = -t434 - t495;
t403 = (-qJD(4) - t502) * t480 - t538;
t401 = -t480 * t580 - t518 * t543;
t400 = t480 * t579 - t514 * t543;
t399 = -t514 * t430 + t478 * t579;
t398 = t518 * t430 + t478 * t580;
t391 = -t515 * t413 + t519 * t476;
t390 = -t434 + t433;
t389 = t518 * t459 - t572;
t388 = -t514 * t460 + t590;
t387 = t514 * t459 + t563;
t386 = t518 * t460 + t592;
t385 = -t514 * t441 - t563;
t384 = t518 * t441 - t572;
t383 = -t495 - t433;
t382 = -pkin(2) * t489 - t396;
t381 = pkin(2) * t451 - qJ(2) * t453 - t440;
t380 = pkin(2) * t449 - qJ(2) * t452 + t439;
t379 = t518 * t432 - t592;
t378 = t514 * t432 + t590;
t374 = (-t435 * t517 + t437 * t513) * t496;
t373 = (-t435 * t513 - t437 * t517) * t496;
t372 = pkin(2) * t482 - t585 * t452 - t562;
t371 = pkin(2) * t485 - t585 * t453 + t571;
t370 = t516 * t395 - t520 * t456;
t369 = -t520 * t395 - t516 * t456;
t368 = -t515 * t401 + t544;
t367 = -t515 * t399 - t544;
t366 = -t433 - t434;
t364 = -t437 * qJD(5) - t539;
t363 = -t402 * t518 - t514 * t407;
t362 = t518 * t403 + t406 * t514;
t361 = -t402 * t514 + t518 * t407;
t360 = t514 * t403 - t406 * t518;
t356 = -t515 * t389 - t519 * t402;
t355 = -t515 * t388 - t519 * t407;
t354 = t517 * t420 - t575;
t353 = -t513 * t421 + t591;
t352 = t513 * t420 + t566;
t351 = t517 * t421 + t593;
t350 = -pkin(7) * t384 - t564;
t349 = pkin(2) * t395 - qJ(2) * t396;
t348 = -pkin(7) * t378 - t573;
t347 = t519 * t385 - t515 * t406;
t346 = t515 * t385 + t519 * t406;
t344 = -t513 * t409 - t566;
t343 = t517 * t409 - t575;
t342 = t519 * t379 - t515 * t403;
t341 = t515 * t379 + t519 * t403;
t340 = -t515 * t362 - t519 * t444;
t339 = -t422 + t524;
t334 = (qJD(5) + t496) * t437 + t539;
t333 = -pkin(2) * t456 - t585 * t396;
t332 = -t437 * t582 - t517 * t524;
t331 = t437 * t581 - t513 * t524;
t330 = -t513 * t364 + t435 * t581;
t329 = t517 * t364 + t435 * t582;
t328 = t517 * t383 - t593;
t327 = t513 * t383 + t591;
t326 = t519 * t363 - t515 * t424;
t325 = t515 * t363 + t519 * t424;
t324 = -t514 * t373 + t518 * t374;
t323 = t518 * t373 + t514 * t374;
t322 = -pkin(3) * t384 + t359;
t320 = -pkin(3) * t378 + t358;
t318 = -t515 * t324 + t519 * t523;
t317 = t516 * t346 + t520 * t384;
t316 = -t520 * t346 + t516 * t384;
t312 = t516 * t341 + t520 * t378;
t311 = -t520 * t341 + t516 * t378;
t308 = -t514 * t352 + t518 * t354;
t307 = -t514 * t351 + t518 * t353;
t306 = t518 * t352 + t514 * t354;
t305 = t518 * t351 + t514 * t353;
t304 = -pkin(8) * t343 - t567;
t303 = -t514 * t343 + t518 * t344;
t302 = t518 * t343 + t514 * t344;
t301 = t516 * t325 + t520 * t361;
t300 = -t520 * t325 + t516 * t361;
t299 = t519 * t310 - t515 * t410;
t298 = t515 * t310 + t519 * t410;
t297 = -pkin(8) * t327 - t576;
t296 = -t335 * t517 - t513 * t339;
t295 = -t517 * t334 - t513 * t587;
t294 = -t335 * t513 + t517 * t339;
t293 = -t513 * t334 + t517 * t587;
t292 = -t514 * t331 + t518 * t332;
t291 = -t514 * t329 + t518 * t330;
t290 = t518 * t331 + t514 * t332;
t289 = t518 * t329 + t514 * t330;
t288 = -t514 * t327 + t518 * t328;
t287 = t518 * t327 + t514 * t328;
t286 = -pkin(7) * t361 - t309;
t285 = -t515 * t292 + t545;
t284 = -t515 * t291 - t545;
t281 = -t515 * t308 - t519 * t335;
t280 = -t515 * t307 - t519 * t339;
t278 = -pkin(4) * t587 + pkin(8) * t344 - t576;
t277 = t519 * t303 + t515 * t587;
t276 = t515 * t303 - t519 * t587;
t275 = -pkin(4) * t334 + pkin(8) * t328 + t567;
t274 = pkin(2) * t346 + pkin(3) * t406 + pkin(7) * t385 - qJ(2) * t347 - t573;
t273 = pkin(2) * t341 + pkin(3) * t403 + pkin(7) * t379 - qJ(2) * t342 + t564;
t272 = t519 * t288 + t515 * t334;
t271 = t515 * t288 - t519 * t334;
t270 = t516 * t298 + t520 * t309;
t269 = -t520 * t298 + t516 * t309;
t268 = -t514 * t294 + t518 * t296;
t267 = -t514 * t293 + t518 * t295;
t266 = t518 * t294 + t514 * t296;
t265 = t518 * t293 + t514 * t295;
t264 = pkin(2) * t384 - t519 * t322 - t585 * t347 - t515 * t350;
t263 = -t515 * t267 - t519 * t390;
t262 = pkin(2) * t378 - t519 * t320 - t585 * t342 - t515 * t348;
t261 = t516 * t276 + t520 * t302;
t260 = -t520 * t276 + t516 * t302;
t259 = pkin(2) * t325 + pkin(3) * t424 + pkin(7) * t363 - qJ(2) * t326 + t310;
t258 = t519 * t268 + t515 * t366;
t257 = t515 * t268 - t519 * t366;
t256 = t516 * t271 + t520 * t287;
t255 = -t520 * t271 + t516 * t287;
t254 = -pkin(3) * t302 - pkin(4) * t343 + t283;
t251 = pkin(2) * t298 + pkin(3) * t410 + pkin(7) * t310 - qJ(2) * t299;
t250 = -pkin(3) * t287 - pkin(4) * t327 + t282;
t249 = -t515 * t286 - t585 * t326 + t542 * t361;
t248 = -pkin(3) * t266 - pkin(4) * t294;
t247 = pkin(4) * t345 + pkin(8) * t253;
t246 = -pkin(7) * t302 - t514 * t278 + t518 * t304;
t245 = -pkin(7) * t287 - t514 * t275 + t518 * t297;
t244 = -pkin(8) * t294 - t252;
t243 = -pkin(4) * t366 + pkin(8) * t296 + t253;
t242 = -t585 * t299 + (pkin(7) * t515 + t542) * t309;
t241 = t516 * t257 + t520 * t266;
t240 = -t520 * t257 + t516 * t266;
t239 = t518 * t253 - t574;
t238 = t514 * t253 + t565;
t237 = t519 * t239 - t515 * t345;
t236 = t515 * t239 + t519 * t345;
t235 = pkin(2) * t276 - pkin(3) * t587 + pkin(7) * t303 - qJ(2) * t277 + t518 * t278 + t514 * t304;
t234 = pkin(2) * t271 - pkin(3) * t334 + pkin(7) * t288 - qJ(2) * t272 + t518 * t275 + t514 * t297;
t233 = -pkin(3) * t238 - pkin(4) * t252;
t232 = pkin(2) * t302 - t515 * t246 - t519 * t254 - t585 * t277;
t231 = -pkin(7) * t266 - t514 * t243 + t518 * t244;
t230 = pkin(2) * t287 - t515 * t245 - t519 * t250 - t585 * t272;
t229 = -pkin(7) * t238 - pkin(8) * t565 - t514 * t247;
t228 = t516 * t236 + t520 * t238;
t227 = -t520 * t236 + t516 * t238;
t226 = pkin(2) * t257 - pkin(3) * t366 + pkin(7) * t268 - qJ(2) * t258 + t518 * t243 + t514 * t244;
t225 = pkin(2) * t266 - t515 * t231 - t519 * t248 - t585 * t258;
t224 = pkin(2) * t236 + pkin(3) * t345 + pkin(7) * t239 - pkin(8) * t574 - qJ(2) * t237 + t518 * t247;
t223 = pkin(2) * t238 - t515 * t229 - t519 * t233 - t585 * t237;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t488, -t487, 0, t447, 0, 0, 0, 0, 0, 0, 0, t488, t487, t417, 0, 0, 0, 0, 0, 0, t418, t419, t443, t370, 0, 0, 0, 0, 0, 0, t312, t317, t301, t270, 0, 0, 0, 0, 0, 0, t256, t261, t241, t228; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t487, -t488, 0, t446, 0, 0, 0, 0, 0, 0, 0, -t487, t488, t414, 0, 0, 0, 0, 0, 0, t415, t416, t442, t369, 0, 0, 0, 0, 0, 0, t311, t316, t300, t269, 0, 0, 0, 0, 0, 0, t255, t260, t240, t227; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t452, t453, 0, t396, 0, 0, 0, 0, 0, 0, t342, t347, t326, t299, 0, 0, 0, 0, 0, 0, t272, t277, t258, t237; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t487, 0, -t488, 0, -t533, -t532, -t446, -pkin(5) * t446, 0, -t487, t488, 0, 0, 0, -t414, t533, t532, -pkin(5) * t414 + (-pkin(1) * t516 + qJ(2) * t520) * g(3), -t516 * t458 + t536, -t516 * t438 + t520 * t490, -t516 * t450 + t519 * t549, -t516 * t457 - t536, -t516 * t448 - t515 * t549, t520 * qJDD(3) - t516 * t477, -pkin(5) * t415 - t516 * t372 + t520 * t380, -pkin(5) * t416 - t516 * t371 + t520 * t381, -pkin(2) * t559 - pkin(5) * t442 - t516 * t382, -pkin(5) * t369 - t516 * t333 + t520 * t349, -t516 * t368 + t520 * t400, -t516 * t340 + t520 * t360, -t516 * t355 + t520 * t386, -t516 * t367 + t520 * t398, -t516 * t356 + t520 * t387, -t516 * t391 + t520 * t412, -pkin(5) * t311 - t516 * t262 + t520 * t273, -pkin(5) * t316 - t516 * t264 + t520 * t274, -pkin(5) * t300 - t516 * t249 + t520 * t259, -pkin(5) * t269 - t516 * t242 + t520 * t251, -t516 * t285 + t520 * t290, -t516 * t263 + t520 * t265, -t516 * t280 + t520 * t305, -t516 * t284 + t520 * t289, -t516 * t281 + t520 * t306, -t516 * t318 + t520 * t323, -pkin(5) * t255 - t516 * t230 + t520 * t234, -pkin(5) * t260 - t516 * t232 + t520 * t235, -pkin(5) * t240 - t516 * t225 + t520 * t226, -pkin(5) * t227 - t516 * t223 + t520 * t224; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t488, 0, t487, 0, t532, -t533, t447, pkin(5) * t447, 0, -t488, -t487, 0, 0, 0, t417, -t532, t533, pkin(5) * t417 + (pkin(1) * t520 + qJ(2) * t516) * g(3), t520 * t458 + t537, t520 * t438 + t516 * t490, t520 * t450 + t516 * t550, t520 * t457 - t537, t520 * t448 - t515 * t551, t516 * qJDD(3) + t520 * t477, pkin(5) * t418 + t520 * t372 + t516 * t380, pkin(5) * t419 + t520 * t371 + t516 * t381, -pkin(2) * t568 + pkin(5) * t443 + t520 * t382, pkin(5) * t370 + t520 * t333 + t516 * t349, t520 * t368 + t516 * t400, t520 * t340 + t516 * t360, t520 * t355 + t516 * t386, t520 * t367 + t516 * t398, t520 * t356 + t516 * t387, t520 * t391 + t516 * t412, pkin(5) * t312 + t520 * t262 + t516 * t273, pkin(5) * t317 + t520 * t264 + t516 * t274, pkin(5) * t301 + t520 * t249 + t516 * t259, pkin(5) * t270 + t520 * t242 + t516 * t251, t520 * t285 + t516 * t290, t520 * t263 + t516 * t265, t520 * t280 + t516 * t305, t520 * t284 + t516 * t289, t520 * t281 + t516 * t306, t520 * t318 + t516 * t323, pkin(5) * t256 + t520 * t230 + t516 * t234, pkin(5) * t261 + t520 * t232 + t516 * t235, pkin(5) * t241 + t520 * t225 + t516 * t226, pkin(5) * t228 + t520 * t223 + t516 * t224; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t493, t494, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t531 - 0.2e1 * t583, -t494 + t508 + 0.2e1 * t510, pkin(1) * t464 + qJ(2) * t463, -t529 * t519, -t519 * t482 - t515 * t485, -t515 * t499 + t560, t530 * t515, t519 * t497 - t570, 0, qJ(2) * t482 - t585 * t449 - t571, qJ(2) * t485 - t585 * t451 - t562, -qJ(2) * t489 + t585 * t486 - t395, -qJ(2) * t456 - t585 * t395, t519 * t401 + t547, t519 * t362 - t515 * t444, t519 * t388 - t515 * t407, t519 * t399 - t547, t519 * t389 - t515 * t402, t519 * t413 + t515 * t476, qJ(2) * t378 - t515 * t320 - t585 * t341 + t519 * t348, qJ(2) * t384 - t515 * t322 - t585 * t346 + t519 * t350, t519 * t286 + (qJ(2) + t584) * t361 - t585 * t325, -t585 * t298 + (qJ(2) + t535) * t309, t519 * t292 + t548, t519 * t267 - t515 * t390, t519 * t307 - t515 * t339, t519 * t291 - t548, t519 * t308 - t515 * t335, t519 * t324 + t515 * t523, qJ(2) * t287 + t519 * t245 - t515 * t250 - t585 * t271, qJ(2) * t302 + t519 * t246 - t515 * t254 - t585 * t276, qJ(2) * t266 + t519 * t231 - t515 * t248 - t585 * t257, qJ(2) * t238 + t519 * t229 - t515 * t233 - t585 * t236;];
tauB_reg = t1;
