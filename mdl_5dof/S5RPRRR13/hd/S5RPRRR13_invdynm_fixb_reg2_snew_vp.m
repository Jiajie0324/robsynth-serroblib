% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRRR13
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:16
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRRR13_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR13_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR13_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR13_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR13_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRR13_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:15:45
% EndTime: 2019-12-31 19:15:55
% DurationCPUTime: 10.76s
% Computational Cost: add. (53369->596), mult. (104628->740), div. (0->0), fcn. (67587->8), ass. (0->384)
t930 = cos(qJ(3));
t1002 = qJD(1) * t930;
t925 = sin(qJ(4));
t929 = cos(qJ(4));
t887 = -t929 * qJD(3) + t925 * t1002;
t889 = t925 * qJD(3) + t929 * t1002;
t850 = t889 * t887;
t1000 = qJD(1) * qJD(3);
t987 = t930 * t1000;
t926 = sin(qJ(3));
t998 = t926 * qJDD(1);
t892 = -t987 - t998;
t885 = qJDD(4) - t892;
t1041 = -t850 + t885;
t1048 = t1041 * t925;
t1047 = t1041 * t929;
t924 = sin(qJ(5));
t928 = cos(qJ(5));
t840 = t928 * t887 + t924 * t889;
t842 = -t924 * t887 + t928 * t889;
t796 = t842 * t840;
t881 = qJDD(5) + t885;
t1043 = -t796 + t881;
t1046 = t1043 * t924;
t1045 = t1043 * t928;
t1038 = pkin(6) + pkin(1);
t933 = qJD(1) ^ 2;
t1040 = t1038 * t933;
t999 = qJD(2) * qJD(1);
t919 = 0.2e1 * t999;
t927 = sin(qJ(1));
t931 = cos(qJ(1));
t903 = t931 * g(1) + t927 * g(2);
t921 = qJDD(1) * qJ(2);
t953 = t903 - t921;
t916 = t930 * qJDD(1);
t988 = t926 * t1000;
t893 = t916 - t988;
t961 = -t893 + t988;
t962 = -t892 + t987;
t801 = t962 * pkin(3) + t961 * pkin(7) - t1040 + t919 - t953;
t902 = t927 * g(1) - t931 * g(2);
t965 = qJDD(2) - t902;
t943 = -t933 * qJ(2) + t965;
t869 = -t1038 * qJDD(1) + t943;
t847 = t930 * g(3) - t926 * t869;
t932 = qJD(3) ^ 2;
t1031 = pkin(7) * t930;
t1034 = pkin(3) * t926;
t951 = t933 * (-t1031 + t1034);
t820 = -t932 * pkin(3) + qJDD(3) * pkin(7) - t926 * t951 - t847;
t754 = -t929 * t801 + t925 * t820;
t755 = t925 * t801 + t929 * t820;
t699 = -t929 * t754 + t925 * t755;
t989 = pkin(3) * t930 + pkin(2);
t1044 = (pkin(7) * t926 + t989) * t699;
t700 = t925 * t754 + t929 * t755;
t955 = -t925 * qJDD(3) - t929 * t893;
t836 = -t887 * qJD(4) - t955;
t976 = t929 * qJDD(3) - t925 * t893;
t950 = t889 * qJD(4) - t976;
t762 = -t840 * qJD(5) + t928 * t836 - t924 * t950;
t912 = t926 * qJD(1) + qJD(4);
t905 = qJD(5) + t912;
t826 = t905 * t840;
t1042 = -t826 + t762;
t870 = t912 * t887;
t812 = t836 + t870;
t846 = t926 * g(3) + t930 * t869;
t799 = t930 * t846 - t926 * t847;
t980 = t924 * t836 + t928 * t950;
t723 = (qJD(5) - t905) * t842 + t980;
t810 = (-qJD(4) + t912) * t889 + t976;
t758 = t925 * t810 - t929 * t812;
t672 = -pkin(7) * t758 - t699;
t1039 = t926 * t672 - t989 * t758;
t838 = t840 ^ 2;
t839 = t842 ^ 2;
t883 = t887 ^ 2;
t884 = t889 ^ 2;
t904 = t905 ^ 2;
t910 = t912 ^ 2;
t1037 = pkin(2) * t799;
t935 = t953 - 0.2e1 * t999;
t864 = t935 + t1040;
t1036 = pkin(2) * t864;
t922 = t926 ^ 2;
t923 = t930 ^ 2;
t1003 = t922 + t923;
t895 = t1003 * qJDD(1);
t1035 = pkin(2) * t895;
t702 = pkin(4) * t1041 - t812 * pkin(8) - t754;
t968 = t912 * pkin(4) - t889 * pkin(8);
t706 = -t883 * pkin(4) - pkin(8) * t950 - t912 * t968 + t755;
t665 = -t928 * t702 + t924 * t706;
t666 = t924 * t702 + t928 * t706;
t633 = -t928 * t665 + t924 * t666;
t1033 = pkin(4) * t633;
t726 = t826 + t762;
t681 = -t723 * t924 - t928 * t726;
t1032 = pkin(4) * t681;
t1030 = qJDD(1) * pkin(1);
t1029 = t905 * t842;
t1028 = t905 * t924;
t1027 = t905 * t928;
t1026 = t912 * t925;
t1025 = t912 * t929;
t1024 = t922 * t933;
t1023 = t923 * t933;
t819 = qJDD(3) * pkin(3) + t932 * pkin(7) - t930 * t951 + t846;
t736 = -pkin(4) * t950 + t883 * pkin(8) - t889 * t968 + t819;
t1022 = t924 * t736;
t778 = t796 + t881;
t1021 = t924 * t778;
t1020 = t925 * t633;
t814 = t925 * t819;
t831 = t850 + t885;
t1019 = t925 * t831;
t1016 = t926 * t864;
t911 = t926 * t933 * t930;
t900 = qJDD(3) + t911;
t1015 = t926 * t900;
t901 = qJDD(3) - t911;
t1014 = t926 * t901;
t1013 = t927 * t895;
t1012 = t928 * t736;
t1011 = t928 * t778;
t1010 = t929 * t633;
t815 = t929 * t819;
t1009 = t929 * t831;
t851 = t930 * t864;
t1008 = t930 * t900;
t1007 = t930 * t901;
t1006 = t931 * t895;
t1005 = t758 * t1034 + t930 * t672;
t1004 = pkin(3) * t819 + pkin(7) * t700;
t997 = t927 * qJDD(1);
t996 = t931 * qJDD(1);
t995 = t926 * t796;
t994 = t926 * t850;
t993 = t930 * t796;
t992 = t930 * t850;
t848 = -t884 - t910;
t788 = -t925 * t848 - t1009;
t813 = (qJD(4) + t912) * t887 + t955;
t991 = pkin(3) * t813 + pkin(7) * t788 - t814;
t837 = -t910 - t883;
t781 = t929 * t837 - t1048;
t871 = t912 * t889;
t809 = -t871 - t950;
t990 = pkin(3) * t809 + pkin(7) * t781 + t815;
t634 = t924 * t665 + t928 * t666;
t614 = t925 * t634 + t1010;
t627 = pkin(4) * t736 + pkin(8) * t634;
t601 = -pkin(7) * t614 - pkin(8) * t1010 - t925 * t627;
t608 = -pkin(3) * t614 - t1033;
t986 = t930 * t601 - t926 * t608;
t683 = -t723 * t928 + t924 * t726;
t764 = -t838 - t839;
t619 = -pkin(4) * t764 + pkin(8) * t683 + t634;
t621 = -pkin(8) * t681 - t633;
t647 = t929 * t681 + t925 * t683;
t605 = -pkin(7) * t647 - t925 * t619 + t929 * t621;
t628 = -pkin(3) * t647 - t1032;
t985 = t930 * t605 - t926 * t628;
t786 = -t904 - t838;
t713 = t928 * t786 - t1046;
t722 = (qJD(5) + t905) * t842 + t980;
t655 = -pkin(4) * t722 + pkin(8) * t713 + t1012;
t712 = t924 * t786 + t1045;
t674 = t929 * t712 + t925 * t713;
t685 = -pkin(8) * t712 - t1022;
t623 = -pkin(7) * t674 - t925 * t655 + t929 * t685;
t952 = pkin(4) * t712 - t665;
t631 = -pkin(3) * t674 - t952;
t984 = t930 * t623 - t926 * t631;
t818 = -t839 - t904;
t735 = -t924 * t818 - t1011;
t659 = -pkin(4) * t1042 + pkin(8) * t735 - t1022;
t734 = t928 * t818 - t1021;
t690 = t929 * t734 + t925 * t735;
t692 = -pkin(8) * t734 - t1012;
t625 = -pkin(7) * t690 - t925 * t659 + t929 * t692;
t936 = pkin(4) * t734 - t666;
t635 = -pkin(3) * t690 - t936;
t983 = t930 * t625 - t926 * t635;
t780 = t925 * t837 + t1047;
t705 = -pkin(3) * t780 + t754;
t739 = -pkin(7) * t780 - t814;
t982 = -t926 * t705 + t930 * t739;
t787 = t929 * t848 - t1019;
t707 = -pkin(3) * t787 + t755;
t742 = -pkin(7) * t787 - t815;
t981 = -t926 * t707 + t930 * t742;
t872 = t933 * pkin(1) + t935;
t873 = -t943 + t1030;
t978 = -t931 * t872 - t927 * t873;
t977 = -t927 * t902 - t931 * t903;
t975 = t927 * t911;
t974 = t931 * t911;
t649 = -t925 * t681 + t929 * t683;
t973 = -pkin(3) * t764 + pkin(7) * t649 + t929 * t619 + t925 * t621;
t675 = -t925 * t712 + t929 * t713;
t972 = -pkin(3) * t722 + pkin(7) * t675 + t929 * t655 + t925 * t685;
t691 = -t925 * t734 + t929 * t735;
t971 = -pkin(3) * t1042 + pkin(7) * t691 + t929 * t659 + t925 * t692;
t760 = t929 * t810 + t925 * t812;
t828 = t883 + t884;
t970 = pkin(3) * t828 + pkin(7) * t760 + t700;
t686 = t926 * t700 + t930 * t819;
t969 = -pkin(2) * t686 - t1004;
t896 = -t927 * t933 + t996;
t967 = pkin(5) * t896 + t927 * g(3);
t897 = t931 * t933 + t997;
t966 = -pkin(5) * t897 + t931 * g(3);
t891 = 0.2e1 * t987 + t998;
t964 = pkin(2) * t891 - t851;
t894 = t916 - 0.2e1 * t988;
t963 = pkin(2) * t894 + t1016;
t800 = -t926 * t846 - t930 * t847;
t960 = t927 * t872 - t931 * t873;
t959 = t931 * t902 - t927 * t903;
t730 = t926 * t781 + t930 * t809;
t957 = -pkin(2) * t730 - t990;
t737 = t926 * t788 + t930 * t813;
t956 = -pkin(2) * t737 - t991;
t909 = -t932 - t1023;
t856 = t930 * t909 - t1015;
t954 = -pkin(2) * t856 - t847;
t615 = t929 * t634 - t1020;
t949 = pkin(3) * t736 + pkin(7) * t615 - pkin(8) * t1020 + t929 * t627;
t636 = t926 * t649 - t930 * t764;
t948 = -pkin(2) * t636 - t973;
t650 = t926 * t675 - t930 * t722;
t947 = -pkin(2) * t650 - t972;
t656 = -t1042 * t930 + t926 * t691;
t946 = -pkin(2) * t656 - t971;
t710 = t926 * t760 + t930 * t828;
t945 = -pkin(2) * t710 - t970;
t907 = -t932 - t1024;
t854 = t926 * t907 + t1007;
t944 = -pkin(2) * t854 - t846;
t942 = pkin(2) * t614 - t926 * t601 - t930 * t608;
t941 = pkin(2) * t647 - t926 * t605 - t930 * t628;
t940 = pkin(2) * t674 - t926 * t623 - t930 * t631;
t939 = pkin(2) * t690 - t926 * t625 - t930 * t635;
t938 = pkin(2) * t780 - t930 * t705 - t926 * t739;
t937 = pkin(2) * t787 - t930 * t707 - t926 * t742;
t611 = t926 * t615 + t930 * t736;
t934 = -pkin(2) * t611 - t949;
t908 = t932 - t1023;
t906 = -t932 + t1024;
t899 = (-t922 + t923) * t933;
t898 = t1003 * t933;
t886 = t1003 * t1000;
t882 = t965 - 0.2e1 * t1030;
t879 = -t903 + t919 + 0.2e1 * t921;
t868 = -t884 + t910;
t867 = t883 - t910;
t866 = t923 * t1000 + t926 * t893;
t865 = t922 * t1000 + t930 * t892;
t861 = -t926 * t909 - t1008;
t860 = -t926 * t908 + t1007;
t859 = t961 * t930;
t858 = t930 * t907 - t1014;
t857 = t930 * t906 - t1015;
t855 = t930 * t908 + t1014;
t853 = t926 * t906 + t1008;
t852 = t962 * t926;
t849 = t884 - t883;
t845 = -t930 * t891 - t926 * t894;
t844 = -t926 * t891 + t930 * t894;
t829 = pkin(1) * t873 - qJ(2) * t872;
t824 = -t839 + t904;
t823 = t838 - t904;
t822 = (-t887 * t929 + t889 * t925) * t912;
t821 = (-t887 * t925 - t889 * t929) * t912;
t811 = t836 - t870;
t808 = -t871 + t950;
t805 = -t889 * t1026 + t929 * t836;
t804 = t889 * t1025 + t925 * t836;
t803 = t887 * t1025 + t925 * t950;
t802 = -t887 * t1026 + t929 * t950;
t795 = t930 * t822 + t926 * t885;
t794 = t926 * t822 - t930 * t885;
t793 = t839 - t838;
t792 = t929 * t867 - t1019;
t791 = -t925 * t868 + t1047;
t790 = t925 * t867 + t1009;
t789 = t929 * t868 + t1048;
t785 = pkin(2) * t898 + t800;
t783 = -qJ(2) * t861 - t954;
t782 = -qJ(2) * t858 - t944;
t775 = (-t840 * t928 + t842 * t924) * t905;
t774 = (-t840 * t924 - t842 * t928) * t905;
t773 = -t1038 * t858 + t964;
t772 = -t1038 * t861 + t963;
t771 = qJ(2) * t894 - t1038 * t856 - t851;
t770 = qJ(2) * t891 - t1038 * t854 - t1016;
t769 = t930 * t805 + t994;
t768 = t930 * t803 - t994;
t767 = t926 * t805 - t992;
t766 = t926 * t803 + t992;
t765 = -qJ(2) * t898 + t1038 * t895 - t799;
t761 = -t842 * qJD(5) - t980;
t759 = t929 * t809 - t925 * t811;
t757 = t925 * t809 + t929 * t811;
t750 = t930 * t792 - t926 * t808;
t749 = t930 * t791 + t926 * t812;
t748 = t926 * t792 + t930 * t808;
t747 = t926 * t791 - t930 * t812;
t746 = t928 * t823 - t1021;
t745 = -t924 * t824 + t1045;
t744 = t924 * t823 + t1011;
t743 = t928 * t824 + t1046;
t741 = -qJ(2) * t800 + t1037;
t738 = t930 * t788 - t926 * t813;
t731 = t930 * t781 - t926 * t809;
t729 = t930 * t759 + t926 * t849;
t728 = t926 * t759 - t930 * t849;
t721 = -t1038 * t800 - t1036;
t720 = -qJ(2) * t864 - t1038 * t799;
t717 = -t842 * t1028 + t928 * t762;
t716 = t842 * t1027 + t924 * t762;
t715 = t840 * t1027 - t924 * t761;
t714 = t840 * t1028 + t928 * t761;
t711 = t930 * t760 - t926 * t828;
t709 = -t925 * t774 + t929 * t775;
t708 = t929 * t774 + t925 * t775;
t704 = t930 * t709 + t926 * t881;
t703 = t926 * t709 - t930 * t881;
t697 = t699 * t1034;
t696 = -t925 * t744 + t929 * t746;
t695 = -t925 * t743 + t929 * t745;
t694 = t929 * t744 + t925 * t746;
t693 = t929 * t743 + t925 * t745;
t687 = t930 * t700 - t926 * t819;
t682 = -t1042 * t924 - t928 * t722;
t680 = t1042 * t928 - t924 * t722;
t679 = -t925 * t716 + t929 * t717;
t678 = -t925 * t714 + t929 * t715;
t677 = t929 * t716 + t925 * t717;
t676 = t929 * t714 + t925 * t715;
t670 = t930 * t679 + t995;
t669 = t930 * t678 - t995;
t668 = t926 * t679 - t993;
t667 = t926 * t678 + t993;
t664 = t930 * t696 - t926 * t723;
t663 = t930 * t695 + t926 * t726;
t662 = t926 * t696 + t930 * t723;
t661 = t926 * t695 - t930 * t726;
t657 = t1042 * t926 + t930 * t691;
t653 = -qJ(2) * t738 - t956;
t652 = -qJ(2) * t731 - t957;
t651 = t930 * t675 + t926 * t722;
t648 = -t925 * t680 + t929 * t682;
t646 = t929 * t680 + t925 * t682;
t644 = -t1038 * t738 + t937;
t643 = qJ(2) * t787 - t1038 * t737 + t981;
t642 = t930 * t648 + t926 * t793;
t641 = t926 * t648 - t930 * t793;
t640 = -t1038 * t731 + t938;
t639 = qJ(2) * t780 - t1038 * t730 + t982;
t638 = -qJ(2) * t711 - t945;
t637 = t930 * t649 + t926 * t764;
t632 = -qJ(2) * t687 - t969;
t630 = -t1038 * t711 - t1039;
t629 = qJ(2) * t758 - t1038 * t710 + t1005;
t617 = -t1038 * t687 + t1044;
t616 = t697 + (qJ(2) - t1031) * t699 - t1038 * t686;
t612 = t930 * t615 - t926 * t736;
t610 = -qJ(2) * t657 - t946;
t609 = -qJ(2) * t651 - t947;
t607 = -t1038 * t657 + t939;
t606 = qJ(2) * t690 - t1038 * t656 + t983;
t603 = -t1038 * t651 + t940;
t602 = qJ(2) * t674 - t1038 * t650 + t984;
t599 = -qJ(2) * t637 - t948;
t598 = -t1038 * t637 + t941;
t597 = qJ(2) * t647 - t1038 * t636 + t985;
t596 = -qJ(2) * t612 - t934;
t595 = -t1038 * t612 + t942;
t594 = qJ(2) * t614 - t1038 * t611 + t986;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t896, 0, -t897, 0, -t967, -t966, -t959, -pkin(5) * t959, 0, -t896, t897, 0, 0, 0, t960, t967, t966, pkin(5) * t960 + (-t927 * pkin(1) + t931 * qJ(2)) * g(3), t927 * t866 + t974, t927 * t844 + t931 * t899, t927 * t855 + t930 * t996, t927 * t865 - t974, t927 * t853 - t926 * t996, t931 * qJDD(3) - t927 * t886, t931 * t782 - t927 * t773 - pkin(5) * (-t931 * t854 + t927 * t891), t931 * t783 - t927 * t772 - pkin(5) * (-t931 * t856 + t927 * t894), -pkin(2) * t1006 + t927 * t785 - pkin(5) * (-t927 * t898 + t1006), t931 * t741 - t927 * t721 - pkin(5) * (-t931 * t799 - t927 * t864), t927 * t767 + t931 * t804, t927 * t728 + t931 * t757, t927 * t747 + t931 * t789, t927 * t766 - t931 * t802, t927 * t748 + t931 * t790, t927 * t794 + t931 * t821, t931 * t652 - t927 * t640 - pkin(5) * (-t931 * t730 + t927 * t780), t931 * t653 - t927 * t644 - pkin(5) * (-t931 * t737 + t927 * t787), t931 * t638 - t927 * t630 - pkin(5) * (-t931 * t710 + t927 * t758), t931 * t632 - t927 * t617 - pkin(5) * (-t931 * t686 + t927 * t699), t927 * t668 + t931 * t677, t927 * t641 + t931 * t646, t927 * t661 + t931 * t693, t927 * t667 + t931 * t676, t927 * t662 + t931 * t694, t927 * t703 + t931 * t708, t931 * t609 - t927 * t603 - pkin(5) * (-t931 * t650 + t927 * t674), t931 * t610 - t927 * t607 - pkin(5) * (-t931 * t656 + t927 * t690), t931 * t599 - t927 * t598 - pkin(5) * (-t931 * t636 + t927 * t647), t931 * t596 - t927 * t595 - pkin(5) * (-t931 * t611 + t927 * t614); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t897, 0, t896, 0, t966, -t967, t977, pkin(5) * t977, 0, -t897, -t896, 0, 0, 0, t978, -t966, t967, pkin(5) * t978 + (t931 * pkin(1) + t927 * qJ(2)) * g(3), -t931 * t866 + t975, -t931 * t844 + t927 * t899, -t931 * t855 + t916 * t927, -t931 * t865 - t975, -t931 * t853 - t926 * t997, t927 * qJDD(3) + t931 * t886, t927 * t782 + t931 * t773 + pkin(5) * (t927 * t854 + t931 * t891), t927 * t783 + t931 * t772 + pkin(5) * (t927 * t856 + t931 * t894), -pkin(2) * t1013 - t931 * t785 + pkin(5) * (-t931 * t898 - t1013), t927 * t741 + t931 * t721 + pkin(5) * (t927 * t799 - t931 * t864), -t931 * t767 + t927 * t804, -t931 * t728 + t927 * t757, -t931 * t747 + t927 * t789, -t931 * t766 - t927 * t802, -t931 * t748 + t927 * t790, -t931 * t794 + t927 * t821, t927 * t652 + t931 * t640 + pkin(5) * (t927 * t730 + t931 * t780), t927 * t653 + t931 * t644 + pkin(5) * (t927 * t737 + t931 * t787), t927 * t638 + t931 * t630 + pkin(5) * (t927 * t710 + t931 * t758), t927 * t632 + t931 * t617 + pkin(5) * (t927 * t686 + t931 * t699), -t931 * t668 + t927 * t677, -t931 * t641 + t927 * t646, -t931 * t661 + t927 * t693, -t931 * t667 + t927 * t676, -t931 * t662 + t927 * t694, -t931 * t703 + t927 * t708, t927 * t609 + t931 * t603 + pkin(5) * (t927 * t650 + t931 * t674), t927 * t610 + t931 * t607 + pkin(5) * (t927 * t656 + t931 * t690), t927 * t599 + t931 * t598 + pkin(5) * (t927 * t636 + t931 * t647), t927 * t596 + t931 * t595 + pkin(5) * (t927 * t611 + t931 * t614); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t902, t903, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t882, t879, t829, -t859, t845, t860, t852, t857, 0, t770, t771, t765, t720, t769, t729, t749, t768, t750, t795, t639, t643, t629, t616, t670, t642, t663, t669, t664, t704, t602, t606, t597, t594; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t933, 0, 0, -g(3), -t902, 0, 0, -qJDD(1), t933, 0, 0, 0, -t873, 0, g(3), qJ(2) * g(3), t911, t899, t916, -t911, -t998, qJDD(3), t782, t783, -t1035, t741, t804, t757, t789, -t802, t790, t821, t652, t653, t638, t632, t677, t646, t693, t676, t694, t708, t609, t610, t599, t596; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t933, 0, qJDD(1), 0, g(3), 0, -t903, 0, 0, -t933, -qJDD(1), 0, 0, 0, -t872, -g(3), 0, pkin(1) * g(3), -t866, -t844, -t855, -t865, -t853, t886, t773, t772, -t785, t721, -t767, -t728, -t747, -t766, -t748, -t794, t640, t644, t630, t617, -t668, -t641, -t661, -t667, -t662, -t703, t603, t607, t598, t595; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t902, t903, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t882, t879, t829, -t859, t845, t860, t852, t857, 0, t770, t771, t765, t720, t769, t729, t749, t768, t750, t795, t639, t643, t629, t616, t670, t642, t663, t669, t664, t704, t602, t606, t597, t594; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t873, -t872, 0, -t859, t845, t860, t852, t857, 0, -pkin(6) * t854 - t1016, -pkin(6) * t856 - t851, pkin(6) * t895 - t799, -pkin(6) * t799, t769, t729, t749, t768, t750, t795, -pkin(6) * t730 + t982, -pkin(6) * t737 + t981, -pkin(6) * t710 + t1005, -pkin(6) * t686 - t699 * t1031 + t697, t670, t642, t663, t669, t664, t704, -pkin(6) * t650 + t984, -pkin(6) * t656 + t983, -pkin(6) * t636 + t985, -pkin(6) * t611 + t986; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t933, 0, 0, 0, t873, 0, -g(3), 0, -t911, -t899, -t916, t911, t998, -qJDD(3), t944, t954, t1035, -t1037, -t804, -t757, -t789, t802, -t790, -t821, t957, t956, t945, t969, -t677, -t646, -t693, -t676, -t694, -t708, t947, t946, t948, t934; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t933, qJDD(1), 0, 0, 0, t872, g(3), 0, 0, t866, t844, t855, t865, t853, -t886, pkin(6) * t858 - t964, pkin(6) * t861 - t963, t785, pkin(6) * t800 + t1036, t767, t728, t747, t766, t748, t794, pkin(6) * t731 - t938, pkin(6) * t738 - t937, pkin(6) * t711 + t1039, pkin(6) * t687 - t1044, t668, t641, t661, t667, t662, t703, pkin(6) * t651 - t940, pkin(6) * t657 - t939, pkin(6) * t637 - t941, pkin(6) * t612 - t942; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t893, -t891, t901, t988, t906, -t988, 0, -t864, -t846, 0, t805, t759, t791, t803, t792, t822, t739, t742, t672, -pkin(7) * t699, t679, t648, t695, t678, t696, t709, t623, t625, t605, t601; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t987, t894, t908, t892, t900, -t987, t864, 0, -t847, 0, -t850, -t849, -t812, t850, t808, -t885, t705, t707, -pkin(3) * t758, -pkin(3) * t699, -t796, -t793, -t726, t796, t723, -t881, t631, t635, t628, t608; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t911, t899, t916, -t911, -t998, qJDD(3), t846, t847, 0, 0, t804, t757, t789, -t802, t790, t821, t990, t991, t970, t1004, t677, t646, t693, t676, t694, t708, t972, t971, t973, t949; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t836, t809, t1041, t870, t867, -t870, 0, -t819, t754, 0, t717, t682, t745, t715, t746, t775, t685, t692, t621, -pkin(8) * t633; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t871, t811, t868, -t950, t831, -t871, t819, 0, t755, 0, t716, t680, t743, t714, t744, t774, t655, t659, t619, t627; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t850, t849, t812, -t850, -t808, t885, -t754, -t755, 0, 0, t796, t793, t726, -t796, -t723, t881, t952, t936, t1032, t1033; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t762, -t722, t1043, t826, t823, -t826, 0, -t736, t665, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1029, t1042, t824, t761, t778, -t1029, t736, 0, t666, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t796, t793, t726, -t796, -t723, t881, -t665, -t666, 0, 0;];
m_new_reg = t1;
