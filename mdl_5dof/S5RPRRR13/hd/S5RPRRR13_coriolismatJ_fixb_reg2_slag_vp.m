% Calculate inertial parameters regressor of coriolis matrix for
% S5RPRRR13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:16
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RPRRR13_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR13_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR13_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRR13_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:15:32
% EndTime: 2019-12-31 19:15:48
% DurationCPUTime: 10.14s
% Computational Cost: add. (8457->499), mult. (17118->696), div. (0->0), fcn. (16893->6), ass. (0->378)
t413 = sin(qJ(3));
t634 = -t413 / 0.2e1;
t414 = cos(qJ(4));
t650 = -pkin(8) - pkin(7);
t361 = t650 * t414;
t411 = sin(qJ(5));
t412 = sin(qJ(4));
t631 = cos(qJ(5));
t496 = t631 * t412;
t471 = -t361 * t411 - t496 * t650;
t647 = t471 / 0.2e1;
t513 = qJD(4) + qJD(5);
t570 = t411 * t412;
t281 = -t361 * t631 + t570 * t650;
t415 = cos(qJ(3));
t566 = t412 * t415;
t363 = t411 * t566;
t399 = t631 * t414;
t319 = t399 * t415 - t363;
t416 = -pkin(1) - pkin(6);
t630 = pkin(4) * t412;
t473 = -t416 + t630;
t340 = t473 * t415;
t402 = -pkin(4) * t414 - pkin(3);
t666 = -t402 / 0.2e1;
t569 = t411 * t414;
t346 = t496 + t569;
t667 = -t346 / 0.2e1;
t672 = t281 * t634 - t319 * t666 - t340 * t667;
t341 = -t399 + t570;
t643 = -t341 / 0.2e1;
t558 = t415 * t346;
t671 = -t558 / 0.2e1;
t668 = t340 * t643 + t402 * t671 + t413 * t647;
t579 = t346 * t558;
t584 = t319 * t341;
t136 = -t579 / 0.2e1 - t584 / 0.2e1;
t670 = t513 * t136;
t462 = t415 * t650 + qJ(2);
t565 = t412 * t416;
t474 = pkin(4) - t565;
t625 = t414 * pkin(3);
t419 = t462 * t414 + (t474 + t625) * t413;
t209 = t631 * t419;
t628 = t413 * pkin(3);
t461 = -t415 * pkin(7) + t628;
t447 = qJ(2) + t461;
t560 = t414 * t416;
t505 = t413 * t560;
t295 = t412 * t447 + t505;
t256 = -pkin(8) * t566 + t295;
t572 = t411 * t256;
t123 = -t209 + t572;
t563 = t413 * t416;
t506 = t412 * t563;
t255 = -t506 + (t462 + t628) * t414;
t502 = t631 * t255;
t130 = t502 - t572;
t669 = t123 + t130;
t624 = t415 * pkin(3);
t626 = t413 * pkin(7);
t360 = t624 + t626;
t348 = t412 * t360;
t557 = t415 * t416;
t366 = t414 * t557;
t305 = t366 + t348;
t567 = t412 * t413;
t263 = pkin(8) * t567 + t305;
t500 = t631 * t263;
t464 = -t500 / 0.2e1;
t350 = t414 * t360;
t564 = t413 * t414;
t231 = pkin(8) * t564 + t415 * t474 + t350;
t574 = t411 * t231;
t430 = -t574 / 0.2e1 + t464;
t43 = t430 - t668;
t503 = t631 * t231;
t571 = t411 * t263;
t429 = -t571 / 0.2e1 + t503 / 0.2e1;
t45 = t429 + t672;
t42 = t429 - t672;
t648 = -t281 / 0.2e1;
t545 = qJD(3) * t346;
t663 = -qJD(1) * t136 + t341 * t545;
t547 = qJD(1) * t319;
t662 = qJD(3) * t136 - t547 * t558;
t463 = -t399 / 0.2e1;
t639 = t363 / 0.2e1;
t215 = t639 + (t463 + t643) * t415;
t528 = t215 * qJD(2);
t661 = t471 * t513 - t528;
t660 = t513 * t281;
t659 = 0.2e1 * t412;
t658 = t123 / 0.2e1;
t418 = t411 * t419;
t501 = t631 * t256;
t124 = t501 + t418;
t649 = t124 / 0.2e1;
t470 = t513 * t346;
t657 = t341 * t470;
t642 = t341 / 0.2e1;
t655 = t463 + t642;
t428 = t569 / 0.2e1 + t496 / 0.2e1;
t641 = t346 / 0.2e1;
t213 = (t641 - t428) * t415;
t529 = t213 * qJD(2);
t544 = qJD(3) * t402;
t654 = qJD(1) * t42 - t346 * t544 + t529;
t210 = t341 * t630 + t346 * t402;
t511 = t631 / 0.2e1;
t568 = t412 * t558;
t632 = -t414 / 0.2e1;
t30 = (-t568 / 0.2e1 + (t341 * t632 + t511) * t415) * pkin(4) + t42;
t653 = qJD(1) * t30 - qJD(3) * t210 + t529;
t407 = t412 ^ 2;
t409 = t414 ^ 2;
t378 = t409 - t407;
t561 = t414 * t415;
t472 = t561 * t659;
t426 = qJD(1) * t472 - qJD(3) * t378;
t646 = -t471 / 0.2e1;
t315 = t346 * t413;
t645 = -t315 / 0.2e1;
t362 = t411 * t567;
t318 = t399 * t413 - t362;
t644 = t318 / 0.2e1;
t640 = t362 / 0.2e1;
t410 = t415 ^ 2;
t400 = t410 * t414;
t638 = -t400 / 0.2e1;
t637 = t400 / 0.2e1;
t636 = -t412 / 0.2e1;
t633 = t413 / 0.2e1;
t629 = t411 * pkin(4);
t627 = t413 * pkin(4);
t623 = t415 * pkin(4);
t90 = -t319 * t346 + t341 * t558;
t620 = t513 * t90;
t619 = pkin(4) * qJD(4);
t497 = t631 * t341;
t578 = t346 * t411;
t431 = t578 / 0.2e1 - t497 / 0.2e1;
t479 = t130 / 0.2e1 + t658;
t573 = t411 * t255;
t129 = -t501 - t573;
t480 = t649 + t129 / 0.2e1;
t9 = -t479 * t318 + t480 * t315 + (t637 + t431) * pkin(4);
t616 = t9 * qJD(1);
t504 = t412 * t557;
t304 = t350 - t504;
t590 = t295 * t415;
t436 = t414 * t447;
t294 = -t436 + t506;
t591 = t294 * t415;
t67 = -t413 * t557 + (t305 * t633 + t590 / 0.2e1) * t414 + (t304 * t634 + t591 / 0.2e1) * t412;
t615 = t67 * qJD(3);
t512 = pkin(4) * t561;
t582 = t340 * t319;
t64 = t129 * t413 + t512 * t558 + t582;
t614 = qJD(1) * t64;
t243 = t340 * t558;
t65 = t130 * t413 - t319 * t512 + t243;
t613 = qJD(1) * t65;
t70 = -t123 * t413 + t243;
t612 = qJD(1) * t70;
t71 = -t124 * t413 + t582;
t611 = qJD(1) * t71;
t608 = t123 * t318;
t607 = t123 * t341;
t606 = t124 * t315;
t605 = t124 * t346;
t125 = t503 - t571;
t126 = t500 + t574;
t16 = -t125 * t319 - t126 * t558 + t606 - t608;
t604 = t16 * qJD(1);
t17 = (-t124 - t129) * t319 - t669 * t558;
t603 = t17 * qJD(1);
t339 = t473 * t413;
t18 = -t123 * t125 + t124 * t126 - t339 * t340;
t602 = t18 * qJD(1);
t19 = -t123 * t129 + t124 * t130 + t340 * t512;
t601 = t19 * qJD(1);
t25 = -t123 * t415 + t125 * t413 - t315 * t340 - t339 * t558;
t600 = t25 * qJD(1);
t26 = t124 * t415 + t126 * t413 + t318 * t340 + t319 * t339;
t599 = t26 * qJD(1);
t597 = t471 * t558;
t596 = t471 * t318;
t593 = t281 * t315;
t589 = t315 * t411;
t588 = t315 * t413;
t587 = t558 * t415;
t586 = t318 * t413;
t583 = t319 * t411;
t35 = t605 + t607;
t577 = t35 * qJD(1);
t408 = t413 ^ 2;
t562 = t414 * t408;
t559 = t415 * t319;
t401 = t415 * t413;
t481 = t561 / 0.2e1;
t51 = (-t627 + t506 / 0.2e1 - t436 / 0.2e1 + pkin(8) * t481 + t255 / 0.2e1) * t411;
t556 = t51 * qJD(1);
t508 = -t627 / 0.2e1;
t437 = -t209 / 0.2e1 + t631 * t508;
t53 = t502 / 0.2e1 + t437;
t555 = t53 * qJD(1);
t69 = t294 * t564 - t295 * t567 + (t304 * t414 + t305 * t412) * t415;
t554 = t69 * qJD(1);
t377 = t408 - t410;
t138 = -t579 + t584;
t549 = qJD(1) * t138;
t548 = qJD(1) * t558;
t546 = qJD(2) * t413;
t543 = qJD(3) * t414;
t542 = qJD(4) * t412;
t541 = qJD(4) * t414;
t540 = qJD(5) * t402;
t122 = t315 * t319 + t318 * t558;
t539 = t122 * qJD(1);
t139 = -t591 + (t304 + 0.2e1 * t504) * t413;
t538 = t139 * qJD(1);
t140 = t590 + (t305 - 0.2e1 * t366) * t413;
t537 = t140 * qJD(1);
t441 = -t586 / 0.2e1 - t559 / 0.2e1;
t458 = t399 / 0.2e1 - t570 / 0.2e1;
t152 = -t441 + t458;
t534 = t152 * qJD(1);
t442 = t588 / 0.2e1 + t587 / 0.2e1;
t153 = -t428 - t442;
t533 = t153 * qJD(1);
t160 = -t294 * t414 + t295 * t412;
t532 = t160 * qJD(1);
t181 = -t587 + t588;
t531 = t181 * qJD(1);
t182 = t559 - t586;
t530 = t182 * qJD(1);
t212 = (t641 + t428) * t413;
t190 = t212 * qJD(1);
t214 = t413 * t655 + t640;
t192 = t214 * qJD(1);
t221 = -t294 * t413 - t410 * t565;
t527 = t221 * qJD(1);
t222 = -t295 * t413 - t410 * t560;
t526 = t222 * qJD(1);
t510 = 0.1e1 / 0.2e1 + t408 / 0.2e1;
t320 = (-t410 / 0.2e1 - t510) * t412;
t525 = t320 * qJD(1);
t321 = t414 * t510 + t637;
t524 = t321 * qJD(1);
t330 = (t407 / 0.2e1 - t409 / 0.2e1) * t415;
t523 = t330 * qJD(4);
t344 = (t407 + t409) * t415;
t522 = t344 * qJD(1);
t345 = t377 * t412;
t521 = t345 * qJD(1);
t347 = -t400 + t562;
t520 = t347 * qJD(1);
t519 = t377 * qJD(1);
t518 = t413 * qJD(1);
t517 = t413 * qJD(3);
t516 = t415 * qJD(1);
t515 = t415 * qJD(3);
t514 = t415 * qJD(4);
t509 = t630 / 0.2e1;
t507 = -t623 / 0.2e1;
t499 = t631 * t558;
t498 = t631 * t318;
t495 = qJ(2) * t518;
t494 = qJ(2) * t516;
t493 = t413 * t542;
t492 = t412 * t514;
t491 = t413 * t541;
t490 = t414 * t514;
t488 = t341 * t518;
t486 = t346 * t518;
t485 = t412 * t515;
t484 = t412 * t541;
t483 = t412 * t543;
t482 = t414 * t515;
t393 = t413 * t515;
t392 = t413 * t516;
t478 = t646 + t647;
t477 = t281 / 0.2e1 + t648;
t476 = t631 * qJD(4);
t475 = t631 * qJD(5);
t469 = t513 * t413;
t468 = pkin(4) * t481;
t467 = -qJD(4) - t518;
t465 = t410 * t484;
t459 = qJD(3) * t472;
t424 = (t589 / 0.2e1 + t498 / 0.2e1) * pkin(4);
t3 = t319 * t477 + t341 * t479 + t346 * t480 + t478 * t558 + t424;
t457 = t3 * qJD(1);
t456 = -qJD(5) + t467;
t114 = t315 * t558 + t318 * t319 - t401;
t417 = t558 * t658 + t319 * t649 + t125 * t645 + t126 * t644 + t339 * t415 / 0.2e1 + t340 * t633;
t443 = t281 * t641 + t471 * t642;
t7 = -t417 + t443;
t455 = -qJD(1) * t7 + qJD(2) * t114;
t79 = -t401 * t416 ^ 2 - t294 * t304 + t295 * t305;
t454 = t79 * qJD(1) + t67 * qJD(2);
t452 = -t304 * t412 + t305 * t414;
t285 = t344 * t413 - t401;
t451 = -t67 * qJD(1) - t285 * qJD(2);
t158 = -t319 ^ 2 + t558 ^ 2;
t38 = qJD(1) * t158 + qJD(3) * t90;
t185 = t341 ^ 2 - t346 ^ 2;
t55 = qJD(1) * t90 + qJD(3) * t185;
t211 = -t341 * t402 + t346 * t630;
t29 = (t319 * t636 + (-t411 / 0.2e1 + t346 * t632) * t415) * pkin(4) + t43;
t449 = qJD(1) * t29 - qJD(3) * t211;
t448 = t467 * t415;
t446 = t626 / 0.2e1 + t624 / 0.2e1;
t434 = t446 * t412;
t257 = t348 / 0.2e1 + t434;
t445 = pkin(3) * t543 - qJD(1) * t257;
t435 = t446 * t414;
t258 = -t350 / 0.2e1 - t435;
t444 = pkin(3) * qJD(3) * t412 - qJD(1) * t258;
t440 = qJD(1) * t43 + t341 * t544;
t438 = t414 * t448;
t284 = -qJD(1) * t330 + t483;
t433 = t126 * t411 / 0.2e1 + t125 * t511;
t432 = t583 / 0.2e1 - t499 / 0.2e1;
t274 = qJD(1) * t400 * t412 + qJD(3) * t330;
t343 = t378 * t410;
t427 = qJD(1) * t343 + t459;
t422 = t129 * t647 + t471 * t649 + t648 * t669;
t1 = (t340 * t636 + t561 * t666 + t433) * pkin(4) + t422;
t23 = -t478 * t318 + t477 * t315 + (t566 / 0.2e1 + t432) * pkin(4);
t68 = t402 * t630;
t425 = -t1 * qJD(1) - t23 * qJD(2) + t68 * qJD(3);
t406 = qJ(2) * qJD(2);
t405 = qJD(1) * qJ(2);
t398 = -t516 / 0.2e1;
t397 = t516 / 0.2e1;
t396 = t515 / 0.2e1;
t391 = t414 * t518;
t390 = t412 * t517;
t389 = t412 * t518;
t338 = t392 + t514 / 0.2e1;
t323 = -t562 / 0.2e1 + t638 + t414 / 0.2e1;
t322 = t636 + (t408 + t410) * t412 / 0.2e1;
t308 = t392 + (qJD(4) / 0.2e1 + qJD(5) / 0.2e1) * t415;
t219 = t413 * t428 + t645;
t218 = t415 * t655 + t639;
t217 = t341 * t634 + t413 * t463 + t640;
t216 = -t415 * t428 + t671;
t206 = -t504 + t350 / 0.2e1 - t435;
t205 = -t366 - t348 / 0.2e1 + t434;
t155 = t441 + t458;
t154 = -t428 + t442;
t148 = t155 * qJD(2);
t147 = t154 * qJD(2);
t146 = t153 * qJD(2);
t145 = t152 * qJD(2);
t144 = qJD(3) * t212 + t319 * t518;
t143 = qJD(3) * t214 + t518 * t558;
t128 = -t470 - t190;
t127 = -t341 * t513 - t192;
t81 = qJD(3) * t215 + t533;
t80 = qJD(3) * t213 + t534;
t78 = t219 * qJD(3) + t319 * t456;
t77 = t217 * qJD(3) + t456 * t558;
t58 = t216 * qJD(3) - t318 * t513 - t534;
t57 = t218 * qJD(3) + t315 * t513 - t533;
t54 = t572 - t502 / 0.2e1 + t437;
t52 = t411 * t508 - t501 - t418 / 0.2e1 - t573 / 0.2e1;
t44 = t430 + t668;
t32 = t319 * t509 + t346 * t468 + t464 + (t507 - t231 / 0.2e1) * t411 + t668;
t31 = pkin(4) * t568 / 0.2e1 + t341 * t468 + t511 * t623 + t45;
t24 = t432 * pkin(4) - t281 * t645 - t471 * t644 + t412 * t507 - t593 / 0.2e1 + t596 / 0.2e1;
t10 = t129 * t645 + t130 * t644 + t608 / 0.2e1 - t606 / 0.2e1 + (t431 + t638) * pkin(4);
t8 = t417 + t443;
t4 = -t558 * t646 + t130 * t643 + t129 * t667 + t424 - t607 / 0.2e1 - t605 / 0.2e1 - t597 / 0.2e1;
t2 = pkin(4) * t433 + t340 * t509 + t402 * t468 - t422;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), t406, -t393, t377 * qJD(3), 0, t393, 0, 0, qJ(2) * t515 + t546, -qJ(2) * t517 + qJD(2) * t415, 0, t406, -t393 * t409 - t465, -qJD(4) * t343 + t413 * t459, -qJD(3) * t347 - t413 * t492, -t393 * t407 + t465, qJD(3) * t345 - t413 * t490, t393, qJD(3) * t139 + qJD(4) * t222 + t414 * t546, -qJD(3) * t140 - qJD(4) * t221 - t412 * t546, -qJD(2) * t344 - qJD(3) * t69, qJD(2) * t160 + qJD(3) * t79, (-qJD(3) * t318 - t513 * t558) * t319, t122 * qJD(3) + t158 * t513, t182 * qJD(3) - t469 * t558, (-qJD(3) * t315 + t319 * t513) * t558, t181 * qJD(3) - t319 * t469, t393, qJD(3) * t25 + qJD(4) * t64 + qJD(5) * t71 - t341 * t546, -qJD(3) * t26 - qJD(4) * t65 - qJD(5) * t70 - t346 * t546, qJD(2) * t138 + qJD(3) * t16 + qJD(4) * t17, qJD(2) * t35 + qJD(3) * t18 + qJD(4) * t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(1), t405, 0, 0, 0, 0, 0, 0, t518, t516, 0, t405, 0, 0, 0, 0, 0, 0, qJD(4) * t323 + t391, qJD(4) * t322 - t389, -t522, t532 + t615, 0, 0, 0, 0, 0, 0, t155 * t513 - t488, t154 * t513 - t486, t549, t577 + (t315 * t341 + t318 * t346) * qJD(2) + t8 * qJD(3) + t10 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t392, t519, -t517, t392, -t515, 0, -t416 * t517 + t494, -t416 * t515 - t495, 0, 0, -t523 + (-t409 * t516 - t483) * t413, t413 * t426 - 0.2e1 * t415 * t484, t485 - t520, t523 + (-t407 * t516 + t483) * t413, t482 + t521, t338, t538 + (t412 * t461 - t505) * qJD(3) + t206 * qJD(4), -t537 + (-pkin(7) * t561 + (t565 + t625) * t413) * qJD(3) + t205 * qJD(4), qJD(3) * t452 - t554, (-pkin(3) * t563 + pkin(7) * t452) * qJD(3) + t454, (-t545 - t547) * t318 + t670, t539 + (t315 * t346 + t318 * t341) * qJD(3) + t620, t217 * t513 + t346 * t515 + t530, (-qJD(3) * t341 - t548) * t315 - t670, t219 * t513 - t341 * t515 + t531, t308, t600 + (-t315 * t402 - t339 * t341 - t415 * t471) * qJD(3) + t31 * qJD(4) + t45 * qJD(5), -t599 + (-t281 * t415 - t318 * t402 - t339 * t346) * qJD(3) + t32 * qJD(4) + t44 * qJD(5), t604 + (-t125 * t346 - t126 * t341 + t593 - t596) * qJD(3) + t4 * qJD(4), t602 + t8 * qJD(2) + (-t125 * t471 + t126 * t281 - t339 * t402) * qJD(3) + t2 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t274, -t427, t412 * t448, t274, t438, t396, qJD(2) * t323 + qJD(3) * t206 - qJD(4) * t295 + t526, qJD(2) * t322 + qJD(3) * t205 + qJD(4) * t294 - t527, 0, 0, t662, t38, t77, -t662, t78, t396, qJD(3) * t31 + qJD(4) * t129 + qJD(5) * t52 + t148 + t614, qJD(3) * t32 - qJD(4) * t130 + qJD(5) * t54 + t147 - t613, t603 + t4 * qJD(3) + (t499 - t583) * t619, t601 + t10 * qJD(2) + t2 * qJD(3) + (t129 * t631 + t130 * t411) * t619; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t662, t38, t77, -t662, t78, t396, qJD(3) * t45 + qJD(4) * t52 - qJD(5) * t124 + t148 + t611, qJD(3) * t44 + qJD(4) * t54 + qJD(5) * t123 + t147 - t612, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(1), -t405, 0, 0, 0, 0, 0, 0, -t518, -t516, 0, -t405, 0, 0, 0, 0, 0, 0, -qJD(4) * t321 - t391, -qJD(4) * t320 + t389, t522, -t532 + t615, 0, 0, 0, 0, 0, 0, -t152 * t513 + t488, -t153 * t513 + t486, -t549, -qJD(3) * t7 - qJD(4) * t9 - t577; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t285 * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t517, -t515, 0, 0, 0, 0, 0, 0, 0, 0, -t414 * t517 - t492, t390 - t490, t344 * qJD(3), (pkin(7) * t344 - t628) * qJD(3) - t451, 0, 0, 0, 0, 0, 0, t216 * t513 + t341 * t517, t218 * t513 + t346 * t517, -qJD(3) * t138, (t319 * t281 + t402 * t413 + t597) * qJD(3) + t24 * qJD(4) + t455; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t485 - t491 - t524, -t482 + t493 - t525, 0, 0, 0, 0, 0, 0, 0, 0, t58, t57, 0, -t616 + t24 * qJD(3) + (-t498 - t589) * t619; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, t57, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t392, -t519, 0, -t392, 0, 0, -t494, t495, 0, 0, t392 * t409 - t523, t438 * t659, t491 + t520, t392 * t407 + t523, -t493 - t521, -t338, qJD(4) * t258 - t538, qJD(4) * t257 + t537, t554, -t454, t318 * t547 + t670, -t539 + t620, -t214 * t513 - t530, t315 * t548 - t670, -t212 * t513 - t531, -t308, -qJD(4) * t30 - qJD(5) * t42 - t600, -qJD(4) * t29 - qJD(5) * t43 + t599, -qJD(4) * t3 - t604, qJD(2) * t7 - qJD(4) * t1 - t602; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t451, 0, 0, 0, 0, 0, 0, -t513 * t213, -t513 * t215, 0, -qJD(4) * t23 - t455; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t484, t378 * qJD(4), 0, -t484, 0, 0, -pkin(3) * t542, -pkin(3) * t541, 0, 0, -t657, t513 * t185, 0, t657, 0, 0, qJD(4) * t210 + t346 * t540, qJD(4) * t211 - t341 * t540, 0, qJD(4) * t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t284, -t426, t391 + t541, -t284, -t389 - t542, t398, -pkin(7) * t541 - t444, pkin(7) * t542 - t445, 0, 0, -t663, t55, t127, t663, t128, t398, -t653 - t660, -t449 + t661, (t497 - t578) * t619 - t457, (-t281 * t631 - t411 * t471) * t619 + t425; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t663, t55, t127, t663, t128, t398, -t654 - t660, -t440 + t661, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t274, t427, (t412 * t516 - t543) * t413, -t274, t392 * t414 + t390, t396, qJD(2) * t321 - qJD(3) * t258 - t526, qJD(2) * t320 - qJD(3) * t257 + t527, 0, 0, -t662, -t38, t143, t662, t144, t396, qJD(3) * t30 + qJD(5) * t51 + t145 - t614, qJD(3) * t29 + qJD(5) * t53 + t146 + t613, qJD(3) * t3 - t603, qJD(2) * t9 + qJD(3) * t1 - t601; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t524, t525, 0, 0, 0, 0, 0, 0, 0, 0, t80, t81, 0, qJD(3) * t23 + t616; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t284, t426, -t391, t284, t389, t397, t444, t445, 0, 0, t663, -t55, t192, -t663, t190, t397, t653, t528 + t449, t457, -t425; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(5) * t629, -pkin(4) * t475, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t513 * t629 + t556, t555 + (-t476 - t475) * pkin(4), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t662, -t38, t143, t662, t144, t396, qJD(3) * t42 - qJD(4) * t51 + t145 - t611, qJD(3) * t43 - qJD(4) * t53 + t146 + t612, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, t81, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t663, -t55, t192, -t663, t190, t397, t654, t528 + t440, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t411 * t619 - t556, pkin(4) * t476 - t555, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t5;
