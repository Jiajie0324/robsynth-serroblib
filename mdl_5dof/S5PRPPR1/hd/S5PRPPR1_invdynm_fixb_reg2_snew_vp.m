% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PRPPR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d5,theta1,theta3,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:22
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PRPPR1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPPR1_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPPR1_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPPR1_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPPR1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRPPR1_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:22:28
% EndTime: 2019-12-05 15:22:42
% DurationCPUTime: 14.20s
% Computational Cost: add. (47375->607), mult. (119369->860), div. (0->0), fcn. (82444->10), ass. (0->429)
t1034 = sin(qJ(5));
t1032 = cos(pkin(8));
t1097 = t1032 * qJDD(2);
t1010 = -qJDD(5) + t1097;
t1029 = sin(pkin(8));
t1028 = sin(pkin(9));
t1031 = cos(pkin(9));
t1036 = cos(qJ(5));
t1059 = t1028 * t1036 + t1031 * t1034;
t1052 = t1059 * t1029;
t959 = qJD(2) * t1052;
t1105 = t1029 * t1031;
t1107 = t1028 * t1029;
t961 = (-t1034 * t1107 + t1036 * t1105) * qJD(2);
t1133 = t961 * t959;
t1155 = -t1010 - t1133;
t1163 = t1034 * t1155;
t1162 = t1036 * t1155;
t1030 = sin(pkin(7));
t1035 = sin(qJ(2));
t1037 = cos(qJ(2));
t1033 = cos(pkin(7));
t1003 = t1030 * g(1) - t1033 * g(2);
t1004 = t1033 * g(1) + t1030 * g(2);
t1078 = t1037 * t1003 + t1035 * t1004;
t943 = t1035 * t1003 - t1037 * t1004;
t1081 = -t1035 * t1078 + t1037 * t943;
t882 = t1035 * t943 + t1037 * t1078;
t1120 = t1033 * t882;
t1161 = t1030 * t1081 + t1120;
t1126 = t1030 * t882;
t1160 = t1033 * t1081 - t1126;
t1038 = qJD(2) ^ 2;
t1095 = t1037 * qJDD(2);
t1000 = -t1035 * t1038 + t1095;
t1132 = g(3) - qJDD(1);
t1144 = -pkin(5) * t1000 - t1035 * t1132;
t1096 = t1035 * qJDD(2);
t999 = t1037 * t1038 + t1096;
t940 = t1033 * t1000 - t1030 * t999;
t968 = -pkin(5) * t999 + t1037 * t1132;
t1159 = -qJ(1) * t940 - t1030 * t968 + t1033 * t1144;
t941 = -t1030 * t1000 - t1033 * t999;
t1158 = qJ(1) * t941 + t1030 * t1144 + t1033 * t968;
t1137 = pkin(3) * t1032;
t1065 = -qJ(4) * t1029 - t1137;
t929 = -qJDD(2) * pkin(2) - t1038 * qJ(3) + qJDD(3) - t1078;
t1157 = -0.2e1 * qJD(2) * qJD(4) * t1029 + qJDD(2) * t1065 + t929;
t1102 = t1032 * qJD(2);
t1011 = -qJD(5) + t1102;
t1113 = t959 * t1011;
t1017 = t1029 * qJDD(2);
t1085 = t1031 * t1017;
t1087 = t1028 * t1017;
t904 = -t959 * qJD(5) - t1034 * t1087 + t1036 * t1085;
t1156 = t904 + t1113;
t1083 = t1032 * t1095;
t1023 = t1029 ^ 2;
t1025 = t1032 ^ 2;
t1101 = t1032 * t1038;
t984 = (t1023 + t1025) * t1101;
t946 = -t1035 * t984 + t1083;
t1084 = t1032 * t1096;
t948 = t1037 * t984 + t1084;
t1152 = t1030 * t948 - t1033 * t946;
t1151 = t1030 * t946 + t1033 * t948;
t1014 = t1032 * t1132;
t1142 = 2 * qJD(3);
t930 = -t1038 * pkin(2) + qJDD(2) * qJ(3) + t943;
t1080 = qJD(2) * t1142 + t930;
t895 = t1080 * t1029 + t1014;
t1082 = t1029 * t1132;
t896 = t1080 * t1032 - t1082;
t835 = t1029 * t895 + t1032 * t896;
t1149 = (qJD(5) + t1011) * t961;
t1147 = t1030 * t1132;
t1145 = t1033 * t1132;
t955 = t959 ^ 2;
t956 = t961 ^ 2;
t1009 = t1011 ^ 2;
t1143 = t1028 ^ 2;
t1055 = t1157 * t1031;
t1057 = -pkin(4) * t1032 - pkin(6) * t1105;
t1104 = t1029 * t1032;
t1136 = pkin(4) * t1023;
t1111 = t1065 * qJD(2) + t1142;
t1064 = t1111 * qJD(2) + t930;
t861 = t1064 * t1032 - t1082;
t791 = t1057 * qJDD(2) + (-t861 + (pkin(6) * t1104 - t1031 * t1136) * t1038) * t1028 + t1055;
t1106 = t1028 * t1038;
t808 = t1157 * t1028 + t1031 * t861;
t976 = t1057 * qJD(2);
t792 = t976 * t1102 + (-pkin(6) * t1017 - t1106 * t1136) * t1028 + t808;
t737 = t1034 * t792 - t1036 * t791;
t738 = t1034 * t791 + t1036 * t792;
t694 = t1034 * t738 - t1036 * t737;
t1141 = pkin(4) * t694;
t1047 = qJDD(2) * t1052;
t850 = -t1047 - t1149;
t853 = t904 - t1113;
t795 = t1034 * t850 - t1036 * t853;
t1140 = pkin(4) * t795;
t1138 = pkin(3) * t1029;
t1131 = -pkin(2) * t929 + qJ(3) * t835;
t1130 = t1028 * t694;
t1094 = qJDD(4) + t1014;
t860 = t1029 * t1064 + t1094;
t1129 = t1028 * t860;
t1089 = t1031 * t1106;
t993 = t1023 * t1089;
t970 = -t993 + t1097;
t1128 = t1028 * t970;
t971 = -t993 - t1097;
t1127 = t1028 * t971;
t921 = t1029 * t929;
t1124 = t1031 * t694;
t1123 = t1031 * t860;
t1122 = t1031 * t970;
t1121 = t1031 * t971;
t922 = t1032 * t929;
t1108 = t1023 * t1038;
t1007 = t1143 * t1108;
t1099 = qJDD(2) * t1028;
t831 = -pkin(6) * t1007 + (pkin(4) * t1099 + t930 + (t1031 * t976 + t1111) * qJD(2)) * t1029 + t1094;
t1119 = t1034 * t831;
t890 = t1010 - t1133;
t1118 = t1034 * t890;
t1117 = t1035 * t929;
t1116 = t1036 * t831;
t1115 = t1036 * t890;
t1114 = t1037 * t929;
t1112 = t961 * t1011;
t1110 = t1011 * t1034;
t1109 = t1011 * t1036;
t1098 = qJDD(2) * t1031;
t1093 = t1029 * t1133;
t1092 = t1032 * t1133;
t1091 = pkin(2) * t1097 - qJ(3) * t984 - t922;
t1024 = t1031 ^ 2;
t1090 = t1024 * t1108;
t1008 = t1029 * t1101;
t1088 = t1031 * t1101;
t1086 = t1029 * t1097;
t807 = t1028 * t861 - t1055;
t759 = t1028 * t807 + t1031 * t808;
t695 = t1034 * t737 + t1036 * t738;
t1079 = -t1030 * t1003 - t1033 * t1004;
t674 = t1028 * t695 + t1124;
t683 = -pkin(4) * t831 + pkin(6) * t695;
t657 = -pkin(6) * t1124 - qJ(4) * t674 - t1028 * t683;
t666 = -pkin(3) * t674 - t1141;
t675 = t1031 * t695 - t1130;
t672 = t1029 * t831 + t1032 * t675;
t1076 = -pkin(2) * t674 + qJ(3) * t672 + t1029 * t657 + t1032 * t666;
t797 = t1034 * t853 + t1036 * t850;
t868 = -t955 - t956;
t680 = -pkin(4) * t868 + pkin(6) * t797 + t695;
t682 = -pkin(6) * t795 - t694;
t742 = t1028 * t797 + t1031 * t795;
t664 = -qJ(4) * t742 - t1028 * t680 + t1031 * t682;
t714 = -pkin(3) * t742 - t1140;
t744 = -t1028 * t795 + t1031 * t797;
t727 = t1029 * t868 + t1032 * t744;
t1075 = -pkin(2) * t742 + qJ(3) * t727 + t1029 * t664 + t1032 * t714;
t889 = -t1009 - t955;
t826 = t1036 * t889 - t1163;
t1046 = t1059 * t1017;
t848 = (qJD(5) - t1011) * t961 + t1046;
t749 = -pkin(4) * t848 + pkin(6) * t826 - t1116;
t821 = t1034 * t889 + t1162;
t765 = t1028 * t826 + t1031 * t821;
t767 = -pkin(6) * t821 + t1119;
t685 = -qJ(4) * t765 - t1028 * t749 + t1031 * t767;
t1056 = pkin(4) * t821 - t737;
t698 = -pkin(3) * t765 - t1056;
t766 = -t1028 * t821 + t1031 * t826;
t748 = t1029 * t848 + t1032 * t766;
t1074 = -pkin(2) * t765 + qJ(3) * t748 + t1029 * t685 + t1032 * t698;
t923 = -t956 - t1009;
t837 = -t1034 * t923 + t1115;
t753 = -pkin(4) * t1156 + pkin(6) * t837 + t1119;
t836 = t1036 * t923 + t1118;
t772 = -pkin(6) * t836 + t1116;
t776 = t1028 * t837 + t1031 * t836;
t691 = -qJ(4) * t776 - t1028 * t753 + t1031 * t772;
t1049 = pkin(4) * t836 - t738;
t702 = -pkin(3) * t776 - t1049;
t777 = -t1028 * t836 + t1031 * t837;
t756 = t1029 * t1156 + t1032 * t777;
t1073 = -pkin(2) * t776 + qJ(3) * t756 + t1029 * t691 + t1032 * t702;
t1019 = t1025 * t1038;
t980 = -t1007 - t1019;
t914 = t1028 * t980 + t1121;
t785 = -pkin(3) * t914 + t807;
t819 = -qJ(4) * t914 + t1129;
t918 = t1031 * t980 - t1127;
t1053 = t1088 - t1099;
t963 = t1053 * t1029;
t875 = -t1029 * t963 + t1032 * t918;
t1072 = -pkin(2) * t914 + qJ(3) * t875 + t1029 * t819 + t1032 * t785;
t983 = -t1019 - t1090;
t915 = t1031 * t983 + t1128;
t786 = -pkin(3) * t915 + t808;
t820 = -qJ(4) * t915 + t1123;
t919 = -t1028 * t983 + t1122;
t992 = t1028 * t1008;
t964 = t992 + t1085;
t876 = t1029 * t964 + t1032 * t919;
t1071 = -pkin(2) * t915 + qJ(3) * t876 + t1029 * t820 + t1032 * t786;
t1016 = t1023 * qJDD(2);
t1018 = t1025 * qJDD(2);
t990 = t1018 + t1016;
t994 = t1019 + t1108;
t1070 = pkin(2) * t994 + qJ(3) * t990 + t835;
t1022 = t1029 * t1023;
t1069 = t1022 * t1089;
t1068 = t1029 * t1088;
t1067 = t1029 * t1083;
t1066 = -pkin(3) * t860 + qJ(4) * t759;
t758 = t1028 * t808 - t1031 * t807;
t833 = t1029 * t896 - t1032 * t895;
t957 = t999 * t1104;
t958 = -t1035 * t1008 + t1067;
t1063 = t1030 * t958 + t1033 * t957;
t1062 = t1030 * t957 - t1033 * t958;
t1061 = t1032 * t993;
t1060 = t1033 * t1003 - t1030 * t1004;
t981 = (t1025 * t1029 + t1022) * t1038;
t1058 = -pkin(2) * t1017 + qJ(3) * t981 + t921;
t962 = (t1088 + t1099) * t1029;
t965 = -t992 + t1085;
t899 = -t1028 * t962 - t1031 * t965;
t745 = -qJ(4) * t899 - t758;
t901 = t1028 * t965 - t1031 * t962;
t972 = t1007 + t1090;
t858 = -t1029 * t972 + t1032 * t901;
t1054 = qJ(3) * t858 + t1029 * t745 + (-pkin(2) - t1137) * t899;
t1051 = -pkin(3) * t964 + qJ(4) * t919 + t1129;
t1050 = pkin(3) * t963 + qJ(4) * t918 - t1123;
t1048 = pkin(3) * t972 + qJ(4) * t901 + t759;
t736 = t1029 * t860 + t1032 * t759;
t1045 = qJ(3) * t736 + (-pkin(2) + t1065) * t758;
t1044 = -pkin(3) * t868 + qJ(4) * t744 + t1028 * t682 + t1031 * t680;
t1043 = -pkin(3) * t848 + qJ(4) * t766 + t1028 * t767 + t1031 * t749;
t1042 = -pkin(3) * t1156 + qJ(4) * t777 + t1028 * t772 + t1031 * t753;
t1041 = -pkin(3) * t831 - pkin(6) * t1130 + qJ(4) * t675 + t1031 * t683;
t1005 = 0.2e1 * t1086;
t995 = -t1019 + t1108;
t991 = t1018 - t1016;
t982 = t1019 - t1090;
t979 = t1007 - t1019;
t973 = -t1007 + t1090;
t954 = (t1024 + t1143) * t1008;
t953 = (qJDD(2) * t1024 + t1028 * t1088) * t1029;
t952 = (-t1024 * t1101 + t1028 * t1098) * t1029;
t951 = (t1028 * t1101 + t1098) * t1107;
t950 = t1053 * t1107;
t947 = t1029 * t1096 + t1037 * t981;
t944 = -t1029 * t1095 + t1035 * t981;
t939 = t1035 * t995 + t1037 * t991;
t938 = -t1035 * t994 + t1037 * t990;
t937 = t1035 * t991 - t1037 * t995;
t936 = t1035 * t990 + t1037 * t994;
t932 = -t956 + t1009;
t931 = t955 - t1009;
t927 = t1035 * t954 - t1067;
t926 = -t1029 * t1084 - t1037 * t954;
t925 = t1032 * t953 + t1069;
t924 = -t1032 * t950 - t1069;
t920 = -t1028 * t982 + t1121;
t917 = t1031 * t979 + t1128;
t916 = t1031 * t982 + t1127;
t913 = t1028 * t979 - t1122;
t912 = -pkin(1) * t999 - t943;
t911 = pkin(1) * t1000 + t1078;
t908 = t1029 * t953 - t1061;
t907 = -t1029 * t950 + t1061;
t905 = t956 - t955;
t903 = -t961 * qJD(5) - t1047;
t900 = -t1028 * t964 + t1031 * t963;
t898 = t1028 * t963 + t1031 * t964;
t886 = -t1030 * t944 + t1033 * t947;
t885 = t1030 * t947 + t1033 * t944;
t880 = pkin(1) * t882;
t879 = (-t1034 * t961 + t1036 * t959) * t1011;
t878 = (t1034 * t959 + t1036 * t961) * t1011;
t877 = t1029 * t965 + t1032 * t920;
t874 = -t1029 * t962 + t1032 * t917;
t873 = t1029 * t920 - t1032 * t965;
t872 = t1029 * t919 - t1032 * t964;
t871 = t1029 * t918 + t1032 * t963;
t870 = t1029 * t917 + t1032 * t962;
t869 = pkin(1) * t1132 + pkin(5) * t1081;
t867 = t1035 * t952 + t1037 * t925;
t866 = -t1035 * t951 + t1037 * t924;
t865 = t1035 * t925 - t1037 * t952;
t864 = t1035 * t924 + t1037 * t951;
t857 = t1029 * t973 + t1032 * t900;
t856 = t1029 * t901 + t1032 * t972;
t855 = t1029 * t900 - t1032 * t973;
t849 = t1046 + t1149;
t847 = t1036 * t904 + t961 * t1110;
t846 = t1034 * t904 - t961 * t1109;
t845 = -t1034 * t903 - t959 * t1109;
t844 = t1036 * t903 - t959 * t1110;
t843 = pkin(1) * t946 + t1091;
t842 = pkin(1) * t944 + t1058;
t841 = t1036 * t931 + t1118;
t840 = -t1034 * t932 + t1162;
t839 = t1034 * t931 - t1115;
t838 = t1036 * t932 + t1163;
t830 = t1035 * t916 + t1037 * t877;
t829 = t1035 * t915 + t1037 * t876;
t828 = t1035 * t914 + t1037 * t875;
t827 = t1035 * t913 + t1037 * t874;
t825 = t1035 * t877 - t1037 * t916;
t824 = t1035 * t876 - t1037 * t915;
t823 = t1035 * t875 - t1037 * t914;
t822 = t1035 * t874 - t1037 * t913;
t816 = -pkin(5) * t944 + t1032 * t1114 - t1035 * t896;
t815 = -pkin(5) * t946 + t1029 * t1114 - t1035 * t895;
t814 = pkin(5) * t947 + t1032 * t1117 + t1037 * t896;
t813 = -pkin(5) * t948 + t1029 * t1117 + t1037 * t895;
t812 = t1035 * t899 + t1037 * t858;
t811 = t1035 * t898 + t1037 * t857;
t810 = t1035 * t858 - t1037 * t899;
t809 = t1035 * t857 - t1037 * t898;
t805 = -t1028 * t878 + t1031 * t879;
t804 = t1028 * t879 + t1031 * t878;
t803 = -pkin(5) * t936 - t1037 * t833;
t802 = pkin(5) * t938 - t1035 * t833;
t801 = t1037 * t835 + t1117;
t800 = t1035 * t835 - t1114;
t799 = -t1029 * t1010 + t1032 * t805;
t798 = t1032 * t1010 + t1029 * t805;
t796 = -t1034 * t1156 - t1036 * t848;
t794 = -t1034 * t848 + t1036 * t1156;
t793 = pkin(1) * t936 + t1070;
t790 = -t1028 * t846 + t1031 * t847;
t789 = -t1028 * t844 + t1031 * t845;
t788 = t1028 * t847 + t1031 * t846;
t787 = t1028 * t845 + t1031 * t844;
t781 = -t1028 * t839 + t1031 * t841;
t780 = -t1028 * t838 + t1031 * t840;
t779 = t1028 * t841 + t1031 * t839;
t778 = t1028 * t840 + t1031 * t838;
t775 = -pkin(2) * t871 - t1050;
t774 = -pkin(2) * t872 - t1051;
t771 = t1032 * t790 + t1093;
t770 = t1032 * t789 - t1093;
t769 = t1029 * t790 - t1092;
t768 = t1029 * t789 + t1092;
t763 = -t1029 * t849 + t1032 * t781;
t762 = t1029 * t853 + t1032 * t780;
t761 = t1029 * t781 + t1032 * t849;
t760 = t1029 * t780 - t1032 * t853;
t755 = t1029 * t777 - t1032 * t1156;
t752 = t1035 * t804 + t1037 * t799;
t751 = t1035 * t799 - t1037 * t804;
t750 = pkin(1) * t800 + t1131;
t747 = t1029 * t766 - t1032 * t848;
t743 = -t1028 * t794 + t1031 * t796;
t741 = t1028 * t796 + t1031 * t794;
t735 = t1029 * t759 - t1032 * t860;
t732 = -qJ(3) * t872 - t1029 * t786 + t1032 * t820;
t731 = -qJ(3) * t871 - t1029 * t785 + t1032 * t819;
t730 = t1029 * t905 + t1032 * t743;
t729 = t1029 * t743 - t1032 * t905;
t728 = -pkin(5) * t800 + (pkin(2) * t1035 - qJ(3) * t1037) * t833;
t726 = t1029 * t744 - t1032 * t868;
t724 = t1035 * t788 + t1037 * t771;
t723 = t1035 * t787 + t1037 * t770;
t722 = t1035 * t771 - t1037 * t788;
t721 = t1035 * t770 - t1037 * t787;
t720 = -pkin(2) * t856 - t1048;
t719 = -qJ(3) * t856 + t1032 * t745 + t899 * t1138;
t718 = t1035 * t779 + t1037 * t763;
t717 = t1035 * t778 + t1037 * t762;
t716 = t1035 * t763 - t1037 * t779;
t715 = t1035 * t762 - t1037 * t778;
t713 = pkin(5) * t801 + (-pkin(2) * t1037 - qJ(3) * t1035 - pkin(1)) * t833;
t711 = t1035 * t776 + t1037 * t756;
t710 = t1035 * t756 - t1037 * t776;
t709 = pkin(1) * t824 + t1071;
t708 = pkin(1) * t823 + t1072;
t707 = t1035 * t765 + t1037 * t748;
t706 = t1035 * t748 - t1037 * t765;
t705 = pkin(1) * t810 + t1054;
t704 = t1035 * t758 + t1037 * t736;
t703 = t1035 * t736 - t1037 * t758;
t700 = -pkin(5) * t824 - t1035 * t774 + t1037 * t732;
t699 = -pkin(5) * t823 - t1035 * t775 + t1037 * t731;
t696 = -pkin(2) * t735 - t1066;
t693 = t1035 * t741 + t1037 * t730;
t692 = t1035 * t730 - t1037 * t741;
t689 = t1035 * t742 + t1037 * t727;
t688 = t1035 * t727 - t1037 * t742;
t687 = -pkin(1) * t872 + pkin(5) * t829 + t1035 * t732 + t1037 * t774;
t686 = -pkin(1) * t871 + pkin(5) * t828 + t1035 * t731 + t1037 * t775;
t681 = -qJ(3) * t735 + (-qJ(4) * t1032 + t1138) * t758;
t679 = -pkin(5) * t810 - t1035 * t720 + t1037 * t719;
t678 = -pkin(1) * t856 + pkin(5) * t812 + t1035 * t719 + t1037 * t720;
t677 = -pkin(2) * t755 - t1042;
t676 = -pkin(2) * t747 - t1043;
t671 = t1029 * t675 - t1032 * t831;
t669 = -qJ(3) * t755 - t1029 * t702 + t1032 * t691;
t668 = -qJ(3) * t747 - t1029 * t698 + t1032 * t685;
t667 = pkin(1) * t703 + t1045;
t662 = -pkin(5) * t703 - t1035 * t696 + t1037 * t681;
t661 = pkin(1) * t710 + t1073;
t660 = pkin(1) * t706 + t1074;
t659 = -pkin(1) * t735 + pkin(5) * t704 + t1035 * t681 + t1037 * t696;
t658 = -pkin(2) * t726 - t1044;
t655 = t1035 * t674 + t1037 * t672;
t654 = t1035 * t672 - t1037 * t674;
t653 = -qJ(3) * t726 - t1029 * t714 + t1032 * t664;
t652 = -pkin(5) * t710 - t1035 * t677 + t1037 * t669;
t651 = -pkin(5) * t706 - t1035 * t676 + t1037 * t668;
t650 = -pkin(1) * t755 + pkin(5) * t711 + t1035 * t669 + t1037 * t677;
t649 = -pkin(1) * t747 + pkin(5) * t707 + t1035 * t668 + t1037 * t676;
t648 = pkin(1) * t688 + t1075;
t647 = -pkin(2) * t671 - t1041;
t646 = -pkin(5) * t688 - t1035 * t658 + t1037 * t653;
t645 = -qJ(3) * t671 - t1029 * t666 + t1032 * t657;
t644 = -pkin(1) * t726 + pkin(5) * t689 + t1035 * t653 + t1037 * t658;
t643 = pkin(1) * t654 + t1076;
t642 = -pkin(5) * t654 - t1035 * t647 + t1037 * t645;
t641 = -pkin(1) * t671 + pkin(5) * t655 + t1035 * t645 + t1037 * t647;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1147, -t1145, -t1060, -qJ(1) * t1060, 0, 0, t940, 0, t941, 0, t1159, -t1158, -t1161, -pkin(5) * t1120 - qJ(1) * t1161 - t1030 * t869, -t1062, -t1030 * t937 + t1033 * t939, t886, t1062, t1151, 0, qJ(1) * t1152 - t1030 * t813 + t1033 * t815, -qJ(1) * t885 - t1030 * t814 + t1033 * t816, t1033 * t803 - t1030 * t802 - qJ(1) * (t1030 * t938 + t1033 * t936), t1033 * t728 - t1030 * t713 - qJ(1) * (t1030 * t801 + t1033 * t800), -t1030 * t865 + t1033 * t867, -t1030 * t809 + t1033 * t811, -t1030 * t825 + t1033 * t830, -t1030 * t864 + t1033 * t866, -t1030 * t822 + t1033 * t827, -t1030 * t926 + t1033 * t927, t1033 * t699 - t1030 * t686 - qJ(1) * (t1030 * t828 + t1033 * t823), t1033 * t700 - t1030 * t687 - qJ(1) * (t1030 * t829 + t1033 * t824), t1033 * t679 - t1030 * t678 - qJ(1) * (t1030 * t812 + t1033 * t810), t1033 * t662 - t1030 * t659 - qJ(1) * (t1030 * t704 + t1033 * t703), -t1030 * t722 + t1033 * t724, -t1030 * t692 + t1033 * t693, -t1030 * t715 + t1033 * t717, -t1030 * t721 + t1033 * t723, -t1030 * t716 + t1033 * t718, -t1030 * t751 + t1033 * t752, t1033 * t651 - t1030 * t649 - qJ(1) * (t1030 * t707 + t1033 * t706), t1033 * t652 - t1030 * t650 - qJ(1) * (t1030 * t711 + t1033 * t710), t1033 * t646 - t1030 * t644 - qJ(1) * (t1030 * t689 + t1033 * t688), t1033 * t642 - t1030 * t641 - qJ(1) * (t1030 * t655 + t1033 * t654); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1145, -t1147, t1079, qJ(1) * t1079, 0, 0, -t941, 0, t940, 0, t1158, t1159, t1160, -pkin(5) * t1126 + qJ(1) * t1160 + t1033 * t869, t1063, t1030 * t939 + t1033 * t937, t885, -t1063, t1152, 0, -qJ(1) * t1151 + t1030 * t815 + t1033 * t813, qJ(1) * t886 + t1030 * t816 + t1033 * t814, t1030 * t803 + t1033 * t802 + qJ(1) * (-t1030 * t936 + t1033 * t938), t1030 * t728 + t1033 * t713 + qJ(1) * (-t1030 * t800 + t1033 * t801), t1030 * t867 + t1033 * t865, t1030 * t811 + t1033 * t809, t1030 * t830 + t1033 * t825, t1030 * t866 + t1033 * t864, t1030 * t827 + t1033 * t822, t1030 * t927 + t1033 * t926, t1030 * t699 + t1033 * t686 + qJ(1) * (-t1030 * t823 + t1033 * t828), t1030 * t700 + t1033 * t687 + qJ(1) * (-t1030 * t824 + t1033 * t829), t1030 * t679 + t1033 * t678 + qJ(1) * (-t1030 * t810 + t1033 * t812), t1030 * t662 + t1033 * t659 + qJ(1) * (-t1030 * t703 + t1033 * t704), t1030 * t724 + t1033 * t722, t1030 * t693 + t1033 * t692, t1030 * t717 + t1033 * t715, t1030 * t723 + t1033 * t721, t1030 * t718 + t1033 * t716, t1030 * t752 + t1033 * t751, t1030 * t651 + t1033 * t649 + qJ(1) * (-t1030 * t706 + t1033 * t707), t1030 * t652 + t1033 * t650 + qJ(1) * (-t1030 * t710 + t1033 * t711), t1030 * t646 + t1033 * t644 + qJ(1) * (-t1030 * t688 + t1033 * t689), t1030 * t642 + t1033 * t641 + qJ(1) * (-t1030 * t654 + t1033 * t655); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1003, t1004, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t911, t912, 0, t880, t1016, t1005, 0, t1018, 0, 0, t843, t842, t793, t750, t908, t855, t873, t907, t870, t1018, t708, t709, t705, t667, t769, t729, t760, t768, t761, t798, t660, t661, t648, t643; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1132, -t1003, 0, 0, 0, t1000, 0, -t999, 0, t1144, -t968, -t882, -pkin(5) * t882, t958, t939, t947, -t958, t948, 0, t815, t816, t803, t728, t867, t811, t830, t866, t827, t927, t699, t700, t679, t662, t724, t693, t717, t723, t718, t752, t651, t652, t646, t642; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1132, 0, -t1004, 0, 0, 0, t999, 0, t1000, 0, t968, t1144, t1081, t869, t957, t937, t944, -t957, -t946, 0, t813, t814, t802, t713, t865, t809, t825, t864, t822, t926, t686, t687, t678, t659, t722, t692, t715, t721, t716, t751, t649, t650, t644, t641; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1003, t1004, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t911, t912, 0, t880, t1016, t1005, 0, t1018, 0, 0, t843, t842, t793, t750, t908, t855, t873, t907, t870, t1018, t708, t709, t705, t667, t769, t729, t760, t768, t761, t798, t660, t661, t648, t643; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t1038, 0, 0, -t1132, -t1078, 0, t1086, t991, t981, -t1086, t984, 0, t921, t922, -t833, -qJ(3) * t833, t925, t857, t877, t924, t874, -t1086, t731, t732, t719, t681, t771, t730, t762, t770, t763, t799, t668, t669, t653, t645; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1038, 0, qJDD(2), 0, t1132, 0, t943, 0, t1008, -t995, -t1017, -t1008, -t1097, 0, t895, t896, 0, -pkin(2) * t833, -t952, -t898, -t916, t951, -t913, -t954, t775, t774, t720, t696, -t788, -t741, -t778, -t787, -t779, -t804, t676, t677, t658, t647; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t1078, -t943, 0, 0, t1016, t1005, 0, t1018, 0, 0, t1091, t1058, t1070, t1131, t908, t855, t873, t907, t870, t1018, t1072, t1071, t1054, t1045, t769, t729, t760, t768, t761, t798, t1074, t1073, t1075, t1076; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1017, t1097, t1008, 0, t1019, 0, 0, t929, t895, 0, t953, t900, t920, -t950, t917, 0, t819, t820, t745, -qJ(4) * t758, t790, t743, t780, t789, t781, t805, t685, t691, t664, t657; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1017, -t1108, t1097, -t1008, 0, -t929, 0, t896, 0, -t993, -t973, -t965, t993, t962, t1097, t785, t786, -pkin(3) * t899, -pkin(3) * t758, -t1133, -t905, -t853, t1133, t849, t1010, t698, t702, t714, t666; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1008, t995, t1017, t1008, t1097, 0, -t895, -t896, 0, 0, t952, t898, t916, -t951, t913, t954, t1050, t1051, t1048, t1066, t788, t741, t778, t787, t779, t804, t1043, t1042, t1044, t1041; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1085, t963, t971, -t992, t979, t992, 0, t860, t807, 0, t847, t796, t840, t845, t841, t879, t767, t772, t682, -pkin(6) * t694; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1068, t964, t982, -t1087, -t970, t1068, -t860, 0, t808, 0, t846, t794, t838, t844, t839, t878, t749, t753, t680, t683; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t993, t973, t965, -t993, -t962, -t1097, -t807, -t808, 0, 0, t1133, t905, t853, -t1133, -t849, -t1010, t1056, t1049, t1140, t1141; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t904, -t848, t1155, -t1113, t931, t1113, 0, t831, t737, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1112, t1156, t932, t903, -t890, t1112, -t831, 0, t738, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1133, t905, t853, -t1133, -t849, -t1010, -t737, -t738, 0, 0;];
m_new_reg = t1;
