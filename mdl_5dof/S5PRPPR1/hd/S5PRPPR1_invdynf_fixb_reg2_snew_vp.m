% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRPPR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d5,theta1,theta3,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:22
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRPPR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPPR1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPPR1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPPR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPPR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRPPR1_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:22:42
% EndTime: 2019-12-05 15:22:45
% DurationCPUTime: 2.63s
% Computational Cost: add. (7498->197), mult. (18986->306), div. (0->0), fcn. (13218->10), ass. (0->170)
t1312 = sin(pkin(7));
t1315 = cos(pkin(7));
t1291 = t1312 * g(1) - t1315 * g(2);
t1292 = -t1315 * g(1) - t1312 * g(2);
t1317 = sin(qJ(2));
t1319 = cos(qJ(2));
t1256 = t1319 * t1291 - t1317 * t1292;
t1320 = qJD(2) ^ 2;
t1251 = -qJDD(2) * pkin(2) - t1320 * qJ(3) + qJDD(3) - t1256;
t1311 = sin(pkin(8));
t1314 = cos(pkin(8));
t1328 = -pkin(3) * t1314 - qJ(4) * t1311;
t1352 = qJD(2) * t1311;
t1336 = -0.2e1 * t1352;
t1358 = qJD(4) * t1336 + t1328 * qJDD(2) + t1251;
t1304 = t1311 ^ 2;
t1306 = t1314 ^ 2;
t1343 = t1304 + t1306;
t1284 = t1343 * t1320;
t1348 = t1314 * qJD(2);
t1295 = -qJD(5) + t1348;
t1357 = qJD(5) - t1295;
t1310 = sin(pkin(9));
t1313 = cos(pkin(9));
t1316 = sin(qJ(5));
t1318 = cos(qJ(5));
t1326 = t1310 * t1318 + t1313 * t1316;
t1323 = t1326 * t1311;
t1262 = qJD(2) * t1323;
t1356 = t1262 ^ 2;
t1349 = t1311 * t1313;
t1333 = t1318 * t1349;
t1264 = -t1316 * t1310 * t1352 + qJD(2) * t1333;
t1355 = t1264 ^ 2;
t1354 = t1295 ^ 2;
t1353 = 2 * qJD(3);
t1351 = t1264 * t1262;
t1350 = t1304 * t1320;
t1347 = t1314 * t1320;
t1281 = t1328 * qJD(2);
t1346 = t1353 + t1281;
t1345 = qJD(5) + t1295;
t1344 = t1358 * t1313;
t1257 = t1317 * t1291 + t1319 * t1292;
t1342 = qJDD(2) * t1313;
t1341 = t1311 * qJDD(2);
t1340 = t1317 * qJDD(2);
t1339 = t1319 * qJDD(2);
t1308 = -g(3) + qJDD(1);
t1300 = t1314 * t1308;
t1338 = qJDD(4) - t1300;
t1301 = t1314 * qJDD(2);
t1337 = t1301 - qJDD(5);
t1303 = t1310 ^ 2;
t1335 = t1303 * t1350;
t1334 = t1310 * t1347;
t1294 = t1311 * t1347;
t1252 = -t1320 * pkin(2) + qJDD(2) * qJ(3) + t1257;
t1241 = t1314 * t1252 + t1311 * t1308 + t1348 * t1353;
t1227 = t1281 * t1348 + t1241;
t1205 = t1313 * t1227 + t1358 * t1310;
t1332 = t1310 * t1341;
t1287 = -t1317 * t1320 + t1339;
t1288 = -t1319 * t1320 - t1340;
t1330 = -t1312 * t1287 + t1315 * t1288;
t1329 = t1313 * t1310 * t1350;
t1327 = t1315 * t1287 + t1312 * t1288;
t1325 = -pkin(4) * t1314 - pkin(6) * t1349;
t1324 = -qJDD(2) * t1333 + t1316 * t1332;
t1305 = t1313 ^ 2;
t1283 = t1313 * t1294;
t1282 = t1343 * qJDD(2);
t1277 = t1314 * t1284;
t1276 = (-t1304 * t1305 - t1306) * t1320;
t1275 = t1311 * t1284;
t1274 = (-t1303 * t1304 - t1306) * t1320;
t1272 = t1325 * qJD(2);
t1271 = (t1303 + t1305) * t1350;
t1270 = -t1301 - t1329;
t1269 = t1301 - t1329;
t1268 = (t1334 - t1342) * t1311;
t1267 = (t1334 + t1342) * t1311;
t1266 = -t1283 - t1332;
t1265 = -t1283 + t1332;
t1261 = -t1319 * t1277 - t1314 * t1340;
t1260 = t1319 * t1275 + t1311 * t1340;
t1259 = -t1317 * t1277 + t1314 * t1339;
t1258 = t1317 * t1275 - t1311 * t1339;
t1255 = t1319 * t1282 - t1317 * t1284;
t1254 = t1317 * t1282 + t1319 * t1284;
t1249 = -t1354 - t1355;
t1248 = t1313 * t1269 - t1310 * t1276;
t1247 = -t1310 * t1270 + t1313 * t1274;
t1246 = t1310 * t1269 + t1313 * t1276;
t1245 = t1313 * t1270 + t1310 * t1274;
t1243 = t1313 * t1266 - t1310 * t1268;
t1242 = t1310 * t1266 + t1313 * t1268;
t1240 = qJD(3) * t1336 - t1311 * t1252 + t1300;
t1237 = -t1337 - t1351;
t1236 = t1337 - t1351;
t1235 = -t1354 - t1356;
t1234 = -t1317 * t1256 + t1319 * t1257;
t1233 = t1319 * t1256 + t1317 * t1257;
t1232 = t1314 * t1248 + t1311 * t1267;
t1231 = t1314 * t1247 + t1311 * t1265;
t1230 = t1311 * t1248 - t1314 * t1267;
t1229 = t1311 * t1247 - t1314 * t1265;
t1228 = -t1355 - t1356;
t1226 = (t1346 * qJD(2) + t1252) * t1311 + t1338;
t1224 = t1314 * t1243 - t1311 * t1271;
t1223 = t1311 * t1243 + t1314 * t1271;
t1222 = t1345 * t1262 + t1324;
t1221 = -t1357 * t1262 - t1324;
t1220 = -qJDD(2) * t1323 - t1345 * t1264;
t1219 = t1357 * t1264 + t1326 * t1341;
t1218 = t1318 * t1236 - t1316 * t1249;
t1217 = t1316 * t1236 + t1318 * t1249;
t1216 = -t1311 * t1240 + t1314 * t1241;
t1215 = t1314 * t1240 + t1311 * t1241;
t1214 = -pkin(6) * t1335 + (pkin(4) * qJDD(2) * t1310 + t1252 + (t1272 * t1313 + t1346) * qJD(2)) * t1311 + t1338;
t1213 = t1319 * t1232 + t1317 * t1246;
t1212 = t1319 * t1231 + t1317 * t1245;
t1211 = t1318 * t1235 - t1316 * t1237;
t1210 = t1317 * t1232 - t1319 * t1246;
t1209 = t1317 * t1231 - t1319 * t1245;
t1208 = t1316 * t1235 + t1318 * t1237;
t1207 = t1319 * t1224 + t1317 * t1242;
t1206 = t1317 * t1224 - t1319 * t1242;
t1204 = -t1310 * t1227 + t1344;
t1203 = t1319 * t1216 + t1317 * t1251;
t1202 = t1317 * t1216 - t1319 * t1251;
t1201 = t1318 * t1220 - t1316 * t1222;
t1200 = t1316 * t1220 + t1318 * t1222;
t1199 = -pkin(4) * t1335 - pkin(6) * t1332 + t1272 * t1348 + t1205;
t1198 = t1325 * qJDD(2) + (-t1227 + (-pkin(4) * t1304 * t1313 + pkin(6) * t1311 * t1314) * t1320) * t1310 + t1344;
t1197 = -t1310 * t1217 + t1313 * t1218;
t1196 = t1313 * t1217 + t1310 * t1218;
t1195 = -t1310 * t1208 + t1313 * t1211;
t1194 = t1313 * t1208 + t1310 * t1211;
t1193 = -t1310 * t1204 + t1313 * t1205;
t1192 = t1313 * t1204 + t1310 * t1205;
t1191 = t1314 * t1197 + t1311 * t1221;
t1190 = t1311 * t1197 - t1314 * t1221;
t1189 = t1314 * t1195 + t1311 * t1219;
t1188 = t1311 * t1195 - t1314 * t1219;
t1187 = -t1310 * t1200 + t1313 * t1201;
t1186 = t1313 * t1200 + t1310 * t1201;
t1185 = t1316 * t1198 + t1318 * t1199;
t1184 = t1318 * t1198 - t1316 * t1199;
t1183 = t1314 * t1193 + t1311 * t1226;
t1182 = t1311 * t1193 - t1314 * t1226;
t1181 = t1314 * t1187 + t1311 * t1228;
t1180 = t1311 * t1187 - t1314 * t1228;
t1179 = t1319 * t1191 + t1317 * t1196;
t1178 = t1317 * t1191 - t1319 * t1196;
t1177 = t1319 * t1189 + t1317 * t1194;
t1176 = t1317 * t1189 - t1319 * t1194;
t1175 = t1319 * t1183 + t1317 * t1192;
t1174 = t1317 * t1183 - t1319 * t1192;
t1173 = -t1316 * t1184 + t1318 * t1185;
t1172 = t1318 * t1184 + t1316 * t1185;
t1171 = t1319 * t1181 + t1317 * t1186;
t1170 = t1317 * t1181 - t1319 * t1186;
t1169 = -t1310 * t1172 + t1313 * t1173;
t1168 = t1313 * t1172 + t1310 * t1173;
t1167 = t1314 * t1169 + t1311 * t1214;
t1166 = t1311 * t1169 - t1314 * t1214;
t1165 = t1319 * t1167 + t1317 * t1168;
t1164 = t1317 * t1167 - t1319 * t1168;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1312 * t1291 + t1315 * t1292, 0, 0, 0, 0, 0, 0, t1330, -t1327, 0, -t1312 * t1233 + t1315 * t1234, 0, 0, 0, 0, 0, 0, -t1312 * t1259 + t1315 * t1261, -t1312 * t1258 + t1315 * t1260, -t1312 * t1254 + t1315 * t1255, -t1312 * t1202 + t1315 * t1203, 0, 0, 0, 0, 0, 0, -t1312 * t1209 + t1315 * t1212, -t1312 * t1210 + t1315 * t1213, -t1312 * t1206 + t1315 * t1207, -t1312 * t1174 + t1315 * t1175, 0, 0, 0, 0, 0, 0, -t1312 * t1176 + t1315 * t1177, -t1312 * t1178 + t1315 * t1179, -t1312 * t1170 + t1315 * t1171, -t1312 * t1164 + t1315 * t1165; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1315 * t1291 + t1312 * t1292, 0, 0, 0, 0, 0, 0, t1327, t1330, 0, t1315 * t1233 + t1312 * t1234, 0, 0, 0, 0, 0, 0, t1315 * t1259 + t1312 * t1261, t1315 * t1258 + t1312 * t1260, t1315 * t1254 + t1312 * t1255, t1315 * t1202 + t1312 * t1203, 0, 0, 0, 0, 0, 0, t1315 * t1209 + t1312 * t1212, t1315 * t1210 + t1312 * t1213, t1315 * t1206 + t1312 * t1207, t1315 * t1174 + t1312 * t1175, 0, 0, 0, 0, 0, 0, t1315 * t1176 + t1312 * t1177, t1315 * t1178 + t1312 * t1179, t1315 * t1170 + t1312 * t1171, t1315 * t1164 + t1312 * t1165; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1308, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1308, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1215, 0, 0, 0, 0, 0, 0, t1229, t1230, t1223, t1182, 0, 0, 0, 0, 0, 0, t1188, t1190, t1180, t1166; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1292, 0, 0, 0, 0, 0, 0, t1288, -t1287, 0, t1234, 0, 0, 0, 0, 0, 0, t1261, t1260, t1255, t1203, 0, 0, 0, 0, 0, 0, t1212, t1213, t1207, t1175, 0, 0, 0, 0, 0, 0, t1177, t1179, t1171, t1165; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1291, 0, 0, 0, 0, 0, 0, t1287, t1288, 0, t1233, 0, 0, 0, 0, 0, 0, t1259, t1258, t1254, t1202, 0, 0, 0, 0, 0, 0, t1209, t1210, t1206, t1174, 0, 0, 0, 0, 0, 0, t1176, t1178, t1170, t1164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1308, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1308, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1215, 0, 0, 0, 0, 0, 0, t1229, t1230, t1223, t1182, 0, 0, 0, 0, 0, 0, t1188, t1190, t1180, t1166; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1320, -qJDD(2), 0, t1257, 0, 0, 0, 0, 0, 0, -t1277, t1275, t1282, t1216, 0, 0, 0, 0, 0, 0, t1231, t1232, t1224, t1183, 0, 0, 0, 0, 0, 0, t1189, t1191, t1181, t1167; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1320, 0, t1256, 0, 0, 0, 0, 0, 0, t1301, -t1341, t1284, -t1251, 0, 0, 0, 0, 0, 0, -t1245, -t1246, -t1242, -t1192, 0, 0, 0, 0, 0, 0, -t1194, -t1196, -t1186, -t1168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1308, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1215, 0, 0, 0, 0, 0, 0, t1229, t1230, t1223, t1182, 0, 0, 0, 0, 0, 0, t1188, t1190, t1180, t1166; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1306 * t1320, t1294, t1301, t1241, 0, 0, 0, 0, 0, 0, t1247, t1248, t1243, t1193, 0, 0, 0, 0, 0, 0, t1195, t1197, t1187, t1169; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1294, -t1350, -t1341, t1240, 0, 0, 0, 0, 0, 0, -t1265, -t1267, t1271, -t1226, 0, 0, 0, 0, 0, 0, -t1219, -t1221, -t1228, -t1214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1301, t1341, -t1284, t1251, 0, 0, 0, 0, 0, 0, t1245, t1246, t1242, t1192, 0, 0, 0, 0, 0, 0, t1194, t1196, t1186, t1168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1274, t1269, t1266, t1205, 0, 0, 0, 0, 0, 0, t1211, t1218, t1201, t1173; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1270, t1276, t1268, t1204, 0, 0, 0, 0, 0, 0, t1208, t1217, t1200, t1172; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1265, t1267, -t1271, t1226, 0, 0, 0, 0, 0, 0, t1219, t1221, t1228, t1214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1235, t1236, t1220, t1185; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1237, t1249, t1222, t1184; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1219, t1221, t1228, t1214;];
f_new_reg = t1;
