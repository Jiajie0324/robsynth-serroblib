% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPPR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:56
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPPR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPPR1_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:56:24
% EndTime: 2020-01-03 11:56:26
% DurationCPUTime: 2.31s
% Computational Cost: add. (9585->168), mult. (13584->248), div. (0->0), fcn. (8597->10), ass. (0->138)
t1183 = qJD(1) + qJD(2);
t1179 = t1183 ^ 2;
t1186 = sin(pkin(8));
t1180 = qJDD(1) + qJDD(2);
t1188 = cos(pkin(8));
t1207 = t1188 * t1180;
t1154 = t1186 * t1179 - t1207;
t1190 = sin(qJ(2));
t1193 = cos(qJ(2));
t1209 = t1186 * t1180;
t1204 = -t1188 * t1179 - t1209;
t1132 = t1193 * t1154 - t1190 * t1204;
t1191 = sin(qJ(1));
t1194 = cos(qJ(1));
t1225 = t1190 * t1154 + t1193 * t1204;
t1231 = t1191 * t1132 + t1194 * t1225;
t1230 = -t1194 * t1132 + t1191 * t1225;
t1229 = 2 * qJD(5);
t1185 = sin(pkin(9));
t1187 = cos(pkin(9));
t1189 = sin(qJ(5));
t1192 = cos(qJ(5));
t1226 = -t1185 * t1189 + t1187 * t1192;
t1160 = t1190 * t1179 - t1193 * t1180;
t1203 = -t1193 * t1179 - t1190 * t1180;
t1224 = t1191 * t1160 + t1194 * t1203;
t1223 = -t1194 * t1160 + t1191 * t1203;
t1202 = t1185 * t1192 + t1187 * t1189;
t1144 = t1202 * t1180;
t1181 = t1185 ^ 2;
t1182 = t1187 ^ 2;
t1205 = t1181 + t1182;
t1157 = t1205 * t1179;
t1145 = t1226 * t1183;
t1218 = t1145 ^ 2;
t1147 = t1202 * t1183;
t1217 = t1147 ^ 2;
t1216 = qJD(4) * t1183;
t1215 = t1147 * t1145;
t1214 = t1179 * t1187;
t1213 = t1181 * t1179;
t1212 = t1182 * t1179;
t1211 = t1185 * t1180;
t1174 = t1187 * t1180;
t1170 = -t1194 * g(2) - t1191 * g(3);
t1200 = qJDD(1) * pkin(1) + t1170;
t1169 = -t1191 * g(2) + t1194 * g(3);
t1196 = qJD(1) ^ 2;
t1201 = -t1196 * pkin(1) + t1169;
t1140 = t1190 * t1200 + t1193 * t1201;
t1134 = -t1179 * pkin(2) + t1140;
t1139 = -t1190 * t1201 + t1193 * t1200;
t1199 = t1180 * pkin(2) + t1139;
t1109 = t1188 * t1134 + t1186 * t1199;
t1184 = -g(1) + qJDD(3);
t1206 = t1187 * t1184 - 0.2e1 * t1185 * t1216;
t1105 = -t1179 * pkin(3) + t1180 * qJ(4) + t1109;
t1098 = t1185 * t1184 + (t1105 + 0.2e1 * t1216) * t1187;
t1108 = -t1186 * t1134 + t1188 * t1199;
t1118 = t1226 * t1180;
t1102 = -t1180 * pkin(3) - t1179 * qJ(4) + qJDD(4) - t1108;
t1195 = qJD(5) ^ 2;
t1164 = t1185 * t1214;
t1163 = t1194 * qJDD(1) - t1191 * t1196;
t1162 = -t1191 * qJDD(1) - t1194 * t1196;
t1150 = t1205 * t1180;
t1149 = t1187 * t1157;
t1148 = t1185 * t1157;
t1141 = -t1195 - t1217;
t1138 = -t1188 * t1149 - t1186 * t1174;
t1137 = t1188 * t1148 + t1185 * t1209;
t1136 = -t1186 * t1149 + t1187 * t1207;
t1135 = t1186 * t1148 - t1185 * t1207;
t1129 = t1188 * t1150 - t1186 * t1157;
t1128 = t1186 * t1150 + t1188 * t1157;
t1124 = t1145 * t1229 + t1144;
t1123 = t1147 * t1229 - t1118;
t1122 = -qJDD(5) + t1215;
t1121 = qJDD(5) + t1215;
t1120 = -t1195 - t1218;
t1119 = -t1217 - t1218;
t1117 = -t1190 * t1139 + t1193 * t1140;
t1116 = t1193 * t1139 + t1190 * t1140;
t1115 = -t1190 * t1136 + t1193 * t1138;
t1114 = -t1190 * t1135 + t1193 * t1137;
t1113 = t1193 * t1136 + t1190 * t1138;
t1112 = t1193 * t1135 + t1190 * t1137;
t1111 = t1192 * t1122 - t1189 * t1141;
t1110 = t1189 * t1122 + t1192 * t1141;
t1107 = -t1190 * t1128 + t1193 * t1129;
t1106 = t1193 * t1128 + t1190 * t1129;
t1104 = t1192 * t1118 + t1189 * t1144;
t1103 = t1189 * t1118 - t1192 * t1144;
t1101 = t1192 * t1120 - t1189 * t1121;
t1100 = t1189 * t1120 + t1192 * t1121;
t1097 = -t1185 * t1105 + t1206;
t1096 = -pkin(4) * t1174 + t1102 + (-t1212 - t1213) * pkin(7);
t1095 = -pkin(4) * t1212 + pkin(7) * t1174 + t1098;
t1094 = (pkin(4) * t1214 - pkin(7) * t1180 - t1105) * t1185 + t1206;
t1093 = -t1185 * t1110 + t1187 * t1111;
t1092 = t1187 * t1110 + t1185 * t1111;
t1091 = -t1186 * t1108 + t1188 * t1109;
t1090 = t1188 * t1108 + t1186 * t1109;
t1089 = -t1185 * t1103 + t1187 * t1104;
t1088 = t1187 * t1103 + t1185 * t1104;
t1087 = -t1185 * t1100 + t1187 * t1101;
t1086 = t1187 * t1100 + t1185 * t1101;
t1085 = t1188 * t1093 + t1186 * t1124;
t1084 = t1186 * t1093 - t1188 * t1124;
t1083 = -t1185 * t1097 + t1187 * t1098;
t1082 = t1187 * t1097 + t1185 * t1098;
t1081 = t1188 * t1087 + t1186 * t1123;
t1080 = t1186 * t1087 - t1188 * t1123;
t1079 = t1188 * t1089 + t1186 * t1119;
t1078 = t1186 * t1089 - t1188 * t1119;
t1077 = t1189 * t1094 + t1192 * t1095;
t1076 = t1192 * t1094 - t1189 * t1095;
t1075 = t1188 * t1083 + t1186 * t1102;
t1074 = t1186 * t1083 - t1188 * t1102;
t1073 = -t1190 * t1090 + t1193 * t1091;
t1072 = t1193 * t1090 + t1190 * t1091;
t1071 = -t1190 * t1084 + t1193 * t1085;
t1070 = t1193 * t1084 + t1190 * t1085;
t1069 = -t1190 * t1080 + t1193 * t1081;
t1068 = t1193 * t1080 + t1190 * t1081;
t1067 = -t1190 * t1078 + t1193 * t1079;
t1066 = t1193 * t1078 + t1190 * t1079;
t1065 = -t1189 * t1076 + t1192 * t1077;
t1064 = t1192 * t1076 + t1189 * t1077;
t1063 = -t1190 * t1074 + t1193 * t1075;
t1062 = t1193 * t1074 + t1190 * t1075;
t1061 = -t1185 * t1064 + t1187 * t1065;
t1060 = t1187 * t1064 + t1185 * t1065;
t1059 = t1188 * t1061 + t1186 * t1096;
t1058 = t1186 * t1061 - t1188 * t1096;
t1057 = -t1190 * t1058 + t1193 * t1059;
t1056 = t1193 * t1058 + t1190 * t1059;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1184, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1082, 0, 0, 0, 0, 0, 0, t1086, t1092, t1088, t1060; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1163, t1162, 0, t1191 * t1169 + t1194 * t1170, 0, 0, 0, 0, 0, 0, t1223, t1224, 0, t1194 * t1116 + t1191 * t1117, 0, 0, 0, 0, 0, 0, t1230, t1231, 0, t1194 * t1072 + t1191 * t1073, 0, 0, 0, 0, 0, 0, t1194 * t1113 + t1191 * t1115, t1194 * t1112 + t1191 * t1114, t1194 * t1106 + t1191 * t1107, t1194 * t1062 + t1191 * t1063, 0, 0, 0, 0, 0, 0, t1194 * t1068 + t1191 * t1069, t1194 * t1070 + t1191 * t1071, t1194 * t1066 + t1191 * t1067, t1194 * t1056 + t1191 * t1057; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1162, t1163, 0, -t1194 * t1169 + t1191 * t1170, 0, 0, 0, 0, 0, 0, -t1224, t1223, 0, t1191 * t1116 - t1194 * t1117, 0, 0, 0, 0, 0, 0, -t1231, t1230, 0, t1191 * t1072 - t1194 * t1073, 0, 0, 0, 0, 0, 0, t1191 * t1113 - t1194 * t1115, t1191 * t1112 - t1194 * t1114, t1191 * t1106 - t1194 * t1107, t1191 * t1062 - t1194 * t1063, 0, 0, 0, 0, 0, 0, t1191 * t1068 - t1194 * t1069, t1191 * t1070 - t1194 * t1071, t1191 * t1066 - t1194 * t1067, t1191 * t1056 - t1194 * t1057; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1196, -qJDD(1), 0, t1169, 0, 0, 0, 0, 0, 0, t1203, t1160, 0, t1117, 0, 0, 0, 0, 0, 0, t1225, t1132, 0, t1073, 0, 0, 0, 0, 0, 0, t1115, t1114, t1107, t1063, 0, 0, 0, 0, 0, 0, t1069, t1071, t1067, t1057; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1196, 0, t1170, 0, 0, 0, 0, 0, 0, -t1160, t1203, 0, t1116, 0, 0, 0, 0, 0, 0, -t1132, t1225, 0, t1072, 0, 0, 0, 0, 0, 0, t1113, t1112, t1106, t1062, 0, 0, 0, 0, 0, 0, t1068, t1070, t1066, t1056; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1184, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1082, 0, 0, 0, 0, 0, 0, t1086, t1092, t1088, t1060; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1179, -t1180, 0, t1140, 0, 0, 0, 0, 0, 0, t1204, t1154, 0, t1091, 0, 0, 0, 0, 0, 0, t1138, t1137, t1129, t1075, 0, 0, 0, 0, 0, 0, t1081, t1085, t1079, t1059; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1180, -t1179, 0, t1139, 0, 0, 0, 0, 0, 0, -t1154, t1204, 0, t1090, 0, 0, 0, 0, 0, 0, t1136, t1135, t1128, t1074, 0, 0, 0, 0, 0, 0, t1080, t1084, t1078, t1058; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1184, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1082, 0, 0, 0, 0, 0, 0, t1086, t1092, t1088, t1060; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1179, -t1180, 0, t1109, 0, 0, 0, 0, 0, 0, -t1149, t1148, t1150, t1083, 0, 0, 0, 0, 0, 0, t1087, t1093, t1089, t1061; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1180, -t1179, 0, t1108, 0, 0, 0, 0, 0, 0, t1174, -t1211, t1157, -t1102, 0, 0, 0, 0, 0, 0, -t1123, -t1124, -t1119, -t1096; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1184, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1082, 0, 0, 0, 0, 0, 0, t1086, t1092, t1088, t1060; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1212, t1164, t1174, t1098, 0, 0, 0, 0, 0, 0, t1101, t1111, t1104, t1065; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1164, -t1213, -t1211, t1097, 0, 0, 0, 0, 0, 0, t1100, t1110, t1103, t1064; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1174, t1211, -t1157, t1102, 0, 0, 0, 0, 0, 0, t1123, t1124, t1119, t1096; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1120, t1122, t1118, t1077; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1121, t1141, -t1144, t1076; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1123, t1124, t1119, t1096;];
f_new_reg = t1;
