% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPPR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:19
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPPR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPPR1_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:19:00
% EndTime: 2019-12-05 18:19:03
% DurationCPUTime: 2.40s
% Computational Cost: add. (9585->168), mult. (13584->248), div. (0->0), fcn. (8597->10), ass. (0->138)
t1178 = qJD(1) + qJD(2);
t1174 = t1178 ^ 2;
t1181 = sin(pkin(8));
t1175 = qJDD(1) + qJDD(2);
t1183 = cos(pkin(8));
t1202 = t1183 * t1175;
t1149 = t1181 * t1174 - t1202;
t1185 = sin(qJ(2));
t1188 = cos(qJ(2));
t1204 = t1181 * t1175;
t1199 = -t1183 * t1174 - t1204;
t1127 = t1188 * t1149 - t1185 * t1199;
t1186 = sin(qJ(1));
t1189 = cos(qJ(1));
t1220 = t1185 * t1149 + t1188 * t1199;
t1226 = t1186 * t1127 + t1189 * t1220;
t1225 = t1189 * t1127 - t1186 * t1220;
t1224 = 2 * qJD(5);
t1180 = sin(pkin(9));
t1182 = cos(pkin(9));
t1184 = sin(qJ(5));
t1187 = cos(qJ(5));
t1221 = -t1180 * t1184 + t1182 * t1187;
t1155 = t1185 * t1174 - t1188 * t1175;
t1198 = -t1188 * t1174 - t1185 * t1175;
t1219 = t1186 * t1155 + t1189 * t1198;
t1218 = t1189 * t1155 - t1186 * t1198;
t1197 = t1180 * t1187 + t1182 * t1184;
t1139 = t1197 * t1175;
t1176 = t1180 ^ 2;
t1177 = t1182 ^ 2;
t1200 = t1176 + t1177;
t1152 = t1200 * t1174;
t1140 = t1221 * t1178;
t1213 = t1140 ^ 2;
t1142 = t1197 * t1178;
t1212 = t1142 ^ 2;
t1211 = qJD(4) * t1178;
t1210 = t1142 * t1140;
t1209 = t1174 * t1182;
t1208 = t1176 * t1174;
t1207 = t1177 * t1174;
t1206 = t1180 * t1175;
t1169 = t1182 * t1175;
t1165 = t1189 * g(2) + t1186 * g(3);
t1195 = qJDD(1) * pkin(1) + t1165;
t1164 = t1186 * g(2) - t1189 * g(3);
t1191 = qJD(1) ^ 2;
t1196 = -t1191 * pkin(1) + t1164;
t1135 = t1185 * t1195 + t1188 * t1196;
t1129 = -t1174 * pkin(2) + t1135;
t1134 = -t1185 * t1196 + t1188 * t1195;
t1194 = t1175 * pkin(2) + t1134;
t1104 = t1183 * t1129 + t1181 * t1194;
t1179 = -g(1) + qJDD(3);
t1201 = t1182 * t1179 - 0.2e1 * t1180 * t1211;
t1100 = -t1174 * pkin(3) + t1175 * qJ(4) + t1104;
t1093 = t1180 * t1179 + (t1100 + 0.2e1 * t1211) * t1182;
t1103 = -t1181 * t1129 + t1183 * t1194;
t1113 = t1221 * t1175;
t1097 = -t1175 * pkin(3) - t1174 * qJ(4) + qJDD(4) - t1103;
t1190 = qJD(5) ^ 2;
t1159 = t1180 * t1209;
t1158 = -t1189 * qJDD(1) + t1186 * t1191;
t1157 = t1186 * qJDD(1) + t1189 * t1191;
t1145 = t1200 * t1175;
t1144 = t1182 * t1152;
t1143 = t1180 * t1152;
t1136 = -t1190 - t1212;
t1133 = -t1183 * t1144 - t1181 * t1169;
t1132 = t1183 * t1143 + t1180 * t1204;
t1131 = -t1181 * t1144 + t1182 * t1202;
t1130 = t1181 * t1143 - t1180 * t1202;
t1124 = t1183 * t1145 - t1181 * t1152;
t1123 = t1181 * t1145 + t1183 * t1152;
t1119 = t1140 * t1224 + t1139;
t1118 = t1142 * t1224 - t1113;
t1117 = -qJDD(5) + t1210;
t1116 = qJDD(5) + t1210;
t1115 = -t1190 - t1213;
t1114 = -t1212 - t1213;
t1112 = -t1185 * t1134 + t1188 * t1135;
t1111 = t1188 * t1134 + t1185 * t1135;
t1110 = -t1185 * t1131 + t1188 * t1133;
t1109 = -t1185 * t1130 + t1188 * t1132;
t1108 = t1188 * t1131 + t1185 * t1133;
t1107 = t1188 * t1130 + t1185 * t1132;
t1106 = t1187 * t1117 - t1184 * t1136;
t1105 = t1184 * t1117 + t1187 * t1136;
t1102 = -t1185 * t1123 + t1188 * t1124;
t1101 = t1188 * t1123 + t1185 * t1124;
t1099 = t1187 * t1113 + t1184 * t1139;
t1098 = t1184 * t1113 - t1187 * t1139;
t1096 = t1187 * t1115 - t1184 * t1116;
t1095 = t1184 * t1115 + t1187 * t1116;
t1092 = -t1180 * t1100 + t1201;
t1091 = -pkin(4) * t1169 + t1097 + (-t1207 - t1208) * pkin(7);
t1090 = -pkin(4) * t1207 + pkin(7) * t1169 + t1093;
t1089 = (pkin(4) * t1209 - pkin(7) * t1175 - t1100) * t1180 + t1201;
t1088 = -t1180 * t1105 + t1182 * t1106;
t1087 = t1182 * t1105 + t1180 * t1106;
t1086 = -t1181 * t1103 + t1183 * t1104;
t1085 = t1183 * t1103 + t1181 * t1104;
t1084 = -t1180 * t1098 + t1182 * t1099;
t1083 = t1182 * t1098 + t1180 * t1099;
t1082 = -t1180 * t1095 + t1182 * t1096;
t1081 = t1182 * t1095 + t1180 * t1096;
t1080 = t1183 * t1088 + t1181 * t1119;
t1079 = t1181 * t1088 - t1183 * t1119;
t1078 = -t1180 * t1092 + t1182 * t1093;
t1077 = t1182 * t1092 + t1180 * t1093;
t1076 = t1183 * t1082 + t1181 * t1118;
t1075 = t1181 * t1082 - t1183 * t1118;
t1074 = t1183 * t1084 + t1181 * t1114;
t1073 = t1181 * t1084 - t1183 * t1114;
t1072 = t1184 * t1089 + t1187 * t1090;
t1071 = t1187 * t1089 - t1184 * t1090;
t1070 = t1183 * t1078 + t1181 * t1097;
t1069 = t1181 * t1078 - t1183 * t1097;
t1068 = -t1185 * t1085 + t1188 * t1086;
t1067 = t1188 * t1085 + t1185 * t1086;
t1066 = -t1185 * t1079 + t1188 * t1080;
t1065 = t1188 * t1079 + t1185 * t1080;
t1064 = -t1185 * t1075 + t1188 * t1076;
t1063 = t1188 * t1075 + t1185 * t1076;
t1062 = -t1185 * t1073 + t1188 * t1074;
t1061 = t1188 * t1073 + t1185 * t1074;
t1060 = -t1184 * t1071 + t1187 * t1072;
t1059 = t1187 * t1071 + t1184 * t1072;
t1058 = -t1185 * t1069 + t1188 * t1070;
t1057 = t1188 * t1069 + t1185 * t1070;
t1056 = -t1180 * t1059 + t1182 * t1060;
t1055 = t1182 * t1059 + t1180 * t1060;
t1054 = t1183 * t1056 + t1181 * t1091;
t1053 = t1181 * t1056 - t1183 * t1091;
t1052 = -t1185 * t1053 + t1188 * t1054;
t1051 = t1188 * t1053 + t1185 * t1054;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1179, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1077, 0, 0, 0, 0, 0, 0, t1081, t1087, t1083, t1055; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1158, t1157, 0, -t1186 * t1164 - t1189 * t1165, 0, 0, 0, 0, 0, 0, t1218, -t1219, 0, -t1189 * t1111 - t1186 * t1112, 0, 0, 0, 0, 0, 0, t1225, -t1226, 0, -t1189 * t1067 - t1186 * t1068, 0, 0, 0, 0, 0, 0, -t1189 * t1108 - t1186 * t1110, -t1189 * t1107 - t1186 * t1109, -t1189 * t1101 - t1186 * t1102, -t1189 * t1057 - t1186 * t1058, 0, 0, 0, 0, 0, 0, -t1189 * t1063 - t1186 * t1064, -t1189 * t1065 - t1186 * t1066, -t1189 * t1061 - t1186 * t1062, -t1189 * t1051 - t1186 * t1052; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1157, t1158, 0, t1189 * t1164 - t1186 * t1165, 0, 0, 0, 0, 0, 0, t1219, t1218, 0, -t1186 * t1111 + t1189 * t1112, 0, 0, 0, 0, 0, 0, t1226, t1225, 0, -t1186 * t1067 + t1189 * t1068, 0, 0, 0, 0, 0, 0, -t1186 * t1108 + t1189 * t1110, -t1186 * t1107 + t1189 * t1109, -t1186 * t1101 + t1189 * t1102, -t1186 * t1057 + t1189 * t1058, 0, 0, 0, 0, 0, 0, -t1186 * t1063 + t1189 * t1064, -t1186 * t1065 + t1189 * t1066, -t1186 * t1061 + t1189 * t1062, -t1186 * t1051 + t1189 * t1052; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1191, -qJDD(1), 0, t1164, 0, 0, 0, 0, 0, 0, t1198, t1155, 0, t1112, 0, 0, 0, 0, 0, 0, t1220, t1127, 0, t1068, 0, 0, 0, 0, 0, 0, t1110, t1109, t1102, t1058, 0, 0, 0, 0, 0, 0, t1064, t1066, t1062, t1052; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1191, 0, t1165, 0, 0, 0, 0, 0, 0, -t1155, t1198, 0, t1111, 0, 0, 0, 0, 0, 0, -t1127, t1220, 0, t1067, 0, 0, 0, 0, 0, 0, t1108, t1107, t1101, t1057, 0, 0, 0, 0, 0, 0, t1063, t1065, t1061, t1051; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1179, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1077, 0, 0, 0, 0, 0, 0, t1081, t1087, t1083, t1055; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1174, -t1175, 0, t1135, 0, 0, 0, 0, 0, 0, t1199, t1149, 0, t1086, 0, 0, 0, 0, 0, 0, t1133, t1132, t1124, t1070, 0, 0, 0, 0, 0, 0, t1076, t1080, t1074, t1054; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1175, -t1174, 0, t1134, 0, 0, 0, 0, 0, 0, -t1149, t1199, 0, t1085, 0, 0, 0, 0, 0, 0, t1131, t1130, t1123, t1069, 0, 0, 0, 0, 0, 0, t1075, t1079, t1073, t1053; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1179, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1077, 0, 0, 0, 0, 0, 0, t1081, t1087, t1083, t1055; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1174, -t1175, 0, t1104, 0, 0, 0, 0, 0, 0, -t1144, t1143, t1145, t1078, 0, 0, 0, 0, 0, 0, t1082, t1088, t1084, t1056; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1175, -t1174, 0, t1103, 0, 0, 0, 0, 0, 0, t1169, -t1206, t1152, -t1097, 0, 0, 0, 0, 0, 0, -t1118, -t1119, -t1114, -t1091; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1179, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1077, 0, 0, 0, 0, 0, 0, t1081, t1087, t1083, t1055; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1207, t1159, t1169, t1093, 0, 0, 0, 0, 0, 0, t1096, t1106, t1099, t1060; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1159, -t1208, -t1206, t1092, 0, 0, 0, 0, 0, 0, t1095, t1105, t1098, t1059; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1169, t1206, -t1152, t1097, 0, 0, 0, 0, 0, 0, t1118, t1119, t1114, t1091; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1115, t1117, t1113, t1072; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1116, t1136, -t1139, t1071; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1118, t1119, t1114, t1091;];
f_new_reg = t1;
