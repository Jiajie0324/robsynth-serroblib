% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPPR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:19
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPPR1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR1_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR1_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR1_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPPR1_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:18:47
% EndTime: 2019-12-05 18:19:00
% DurationCPUTime: 14.16s
% Computational Cost: add. (62787->494), mult. (88678->687), div. (0->0), fcn. (55375->10), ass. (0->338)
t931 = qJD(1) + qJD(2);
t928 = t931 ^ 2;
t934 = sin(pkin(8));
t929 = qJDD(1) + qJDD(2);
t936 = cos(pkin(8));
t993 = t936 * t929;
t898 = t934 * t928 - t993;
t932 = g(1) - qJDD(3);
t1022 = qJ(3) * t898 - t934 * t932;
t998 = t934 * t929;
t895 = t936 * t928 + t998;
t938 = sin(qJ(2));
t941 = cos(qJ(2));
t844 = t938 * t895 + t941 * t898;
t865 = qJ(3) * t895 - t936 * t932;
t1037 = pkin(6) * t844 + t1022 * t941 + t938 * t865;
t840 = t941 * t895 - t938 * t898;
t770 = pkin(6) * t840 - t1022 * t938 + t941 * t865;
t939 = sin(qJ(1));
t942 = cos(qJ(1));
t785 = t939 * t840 + t942 * t844;
t1050 = pkin(5) * t785 + t1037 * t942 + t939 * t770;
t1038 = t942 * t840 - t939 * t844;
t1049 = pkin(5) * t1038 - t1037 * t939 + t942 * t770;
t914 = t942 * g(2) + t939 * g(3);
t951 = qJDD(1) * pkin(1) + t914;
t1010 = qJD(1) ^ 2;
t913 = t939 * g(2) - t942 * g(3);
t955 = t1010 * pkin(1) - t913;
t859 = t938 * t951 - t941 * t955;
t846 = -t928 * pkin(2) + t859;
t858 = -t938 * t955 - t941 * t951;
t948 = t929 * pkin(2) - t858;
t787 = t934 * t846 - t936 * t948;
t788 = t936 * t846 + t934 * t948;
t974 = t934 * t787 + t936 * t788;
t735 = t936 * t787 - t934 * t788;
t989 = t938 * t735;
t1030 = t941 * t974 + t989;
t985 = t941 * t735;
t673 = -t938 * t974 + t985;
t1047 = t1030 * t942 + t939 * t673;
t1046 = -t1030 * t939 + t942 * t673;
t904 = t938 * t928 - t941 * t929;
t1023 = pkin(6) * t904 - t938 * g(1);
t901 = t941 * t928 + t938 * t929;
t847 = t939 * t901 + t942 * t904;
t875 = pkin(6) * t901 - t941 * g(1);
t1041 = pkin(5) * t847 + t1023 * t942 + t939 * t875;
t933 = sin(pkin(9));
t930 = t933 ^ 2;
t935 = cos(pkin(9));
t945 = t935 ^ 2;
t1011 = t928 * (t930 + t945);
t887 = t935 * t1011;
t977 = t935 * t993;
t854 = -t934 * t887 + t977;
t922 = t935 * t929;
t856 = t936 * t887 + t934 * t922;
t798 = t941 * t854 - t938 * t856;
t800 = t938 * t854 + t941 * t856;
t1040 = t942 * t798 - t939 * t800;
t1039 = t939 * t798 + t942 * t800;
t1019 = t942 * t901 - t939 * t904;
t1036 = pkin(5) * t1019 - t1023 * t939 + t942 * t875;
t973 = t938 * t858 + t941 * t859;
t809 = t941 * t858 - t938 * t859;
t984 = t942 * t809;
t1032 = -t939 * t973 + t984;
t988 = t939 * t809;
t1031 = t942 * t973 + t988;
t937 = sin(qJ(5));
t940 = cos(qJ(5));
t1025 = t933 * t937 - t935 * t940;
t880 = t1025 * t931;
t957 = t933 * t940 + t935 * t937;
t882 = t957 * t931;
t833 = t882 * t880;
t1012 = qJDD(5) - t833;
t1027 = t1012 * t937;
t1026 = t1012 * t940;
t971 = -t928 * pkin(3) + t929 * qJ(4) + 0.2e1 * qJD(4) * t931 + t788;
t1024 = pkin(7) * t929 + t971;
t1001 = t933 * t935;
t860 = t895 * t1001;
t909 = t928 * t1001;
t861 = -t934 * t909 + t933 * t977;
t814 = t941 * t860 + t938 * t861;
t817 = t938 * t860 - t941 * t861;
t1021 = t942 * t814 - t939 * t817;
t1020 = t939 * t814 + t942 * t817;
t924 = t935 * t932;
t761 = t971 * t933 + t924;
t1002 = t933 * t932;
t762 = t971 * t935 - t1002;
t707 = t933 * t761 + t935 * t762;
t1004 = t930 * t928;
t923 = t945 * t928;
t899 = t923 + t1004;
t878 = t880 ^ 2;
t879 = t882 ^ 2;
t753 = -t924 + (pkin(4) * t928 * t935 - t1024) * t933;
t754 = -pkin(4) * t923 + t1024 * t935 - t1002;
t683 = -t940 * t753 + t937 * t754;
t684 = t937 * t753 + t940 * t754;
t650 = -t940 * t683 + t937 * t684;
t1009 = pkin(4) * t650;
t876 = t1025 * t929;
t877 = t957 * t929;
t775 = -t876 * t937 - t940 * t877;
t1008 = pkin(4) * t775;
t1003 = t933 * t650;
t774 = -t929 * pkin(3) - t928 * qJ(4) + qJDD(4) + t787;
t765 = t933 * t774;
t920 = t933 * t929;
t999 = t934 * t774;
t996 = t935 * t650;
t766 = t935 * t774;
t994 = t936 * t774;
t758 = -pkin(4) * t922 - t899 * pkin(7) + t774;
t991 = t937 * t758;
t826 = qJDD(5) + t833;
t990 = t937 * t826;
t987 = t940 * t758;
t986 = t940 * t826;
t983 = -pkin(3) * t774 + qJ(4) * t707;
t871 = t880 * qJD(5);
t981 = t882 * qJD(5);
t980 = t933 * t922;
t979 = t934 * t833;
t978 = t936 * t833;
t976 = pkin(3) * t922 - qJ(4) * t887 - t766;
t676 = t934 * t707 - t994;
t975 = pkin(2) * t676 + t983;
t651 = t937 * t683 + t940 * t684;
t777 = -t876 * t940 + t937 * t877;
t813 = -t878 - t879;
t634 = -pkin(4) * t813 + pkin(7) * t777 + t651;
t643 = -pkin(7) * t775 - t650;
t725 = -t933 * t775 + t935 * t777;
t970 = -pkin(3) * t813 + qJ(4) * t725 + t935 * t634 + t933 * t643;
t943 = qJD(5) ^ 2;
t824 = -t943 - t878;
t773 = t940 * t824 - t1027;
t828 = t876 + 0.2e1 * t981;
t688 = -pkin(4) * t828 + pkin(7) * t773 - t987;
t772 = t937 * t824 + t1026;
t709 = -pkin(7) * t772 + t991;
t722 = -t933 * t772 + t935 * t773;
t969 = -pkin(3) * t828 + qJ(4) * t722 + t935 * t688 + t933 * t709;
t868 = -t879 - t943;
t795 = -t937 * t868 - t986;
t830 = -0.2e1 * t871 + t877;
t701 = -pkin(4) * t830 + pkin(7) * t795 + t991;
t792 = t940 * t868 - t990;
t719 = -pkin(7) * t792 + t987;
t743 = -t933 * t792 + t935 * t795;
t968 = -pkin(3) * t830 + qJ(4) * t743 + t935 * t701 + t933 * t719;
t919 = t930 * t929;
t921 = t945 * t929;
t893 = t921 + t919;
t967 = pkin(3) * t899 + qJ(4) * t893 + t707;
t966 = pkin(2) * t854 + t976;
t907 = t939 * qJDD(1) + t942 * t1010;
t965 = pkin(5) * t907 - t942 * g(1);
t964 = -pkin(2) * t898 - t787;
t686 = t934 * t725 - t936 * t813;
t963 = pkin(2) * t686 + t970;
t694 = t934 * t722 - t936 * t828;
t962 = pkin(2) * t694 + t969;
t711 = t934 * t743 - t936 * t830;
t961 = pkin(2) * t711 + t968;
t836 = t934 * t893 + t936 * t899;
t960 = pkin(2) * t836 + t967;
t706 = t935 * t761 - t933 * t762;
t959 = t942 * t913 - t939 * t914;
t958 = -t939 * t913 - t942 * t914;
t886 = t933 * t1011;
t956 = -pkin(3) * t920 + qJ(4) * t886 + t765;
t954 = pkin(4) * t772 - t683;
t852 = t934 * t886 - t933 * t993;
t953 = pkin(2) * t852 + t956;
t628 = t935 * t651 - t1003;
t639 = -pkin(4) * t758 + pkin(7) * t651;
t952 = -pkin(3) * t758 - pkin(7) * t1003 + qJ(4) * t628 + t935 * t639;
t624 = t934 * t628 - t936 * t758;
t950 = pkin(2) * t624 + t952;
t949 = pkin(4) * t792 - t684;
t947 = -pkin(2) * t895 - t788;
t908 = -t942 * qJDD(1) + t939 * t1010;
t906 = 0.2e1 * t980;
t900 = -t923 + t1004;
t894 = t921 - t919;
t891 = -pkin(5) * t908 + t939 * g(1);
t867 = -t879 + t943;
t866 = t878 - t943;
t855 = t936 * t886 + t933 * t998;
t839 = t936 * t894 + t934 * t900;
t838 = t936 * t893 - t934 * t899;
t837 = t934 * t894 - t936 * t900;
t832 = t879 - t878;
t831 = -t871 + t877;
t829 = -t876 - t981;
t821 = -pkin(1) * t904 - t858;
t820 = -pkin(1) * t901 - t859;
t819 = (-t880 * t940 + t882 * t937) * qJD(5);
t818 = (-t880 * t937 - t882 * t940) * qJD(5);
t806 = pkin(1) * t809;
t805 = t940 * t831 - t937 * t981;
t804 = t937 * t831 + t940 * t981;
t803 = -t937 * t829 + t940 * t871;
t802 = t940 * t829 + t937 * t871;
t799 = -t938 * t852 + t941 * t855;
t796 = t941 * t852 + t938 * t855;
t794 = -t937 * t867 + t1026;
t793 = t940 * t866 - t990;
t791 = t940 * t867 + t1027;
t790 = t937 * t866 + t986;
t789 = pkin(1) * g(1) + pkin(6) * t973;
t784 = -t938 * t837 + t941 * t839;
t783 = -t938 * t836 + t941 * t838;
t782 = t941 * t837 + t938 * t839;
t781 = t941 * t836 + t938 * t838;
t778 = -t940 * t828 - t937 * t830;
t776 = -t937 * t828 + t940 * t830;
t764 = -t933 * t818 + t935 * t819;
t763 = t935 * t818 + t933 * t819;
t757 = t934 * qJDD(5) + t936 * t764;
t756 = -t936 * qJDD(5) + t934 * t764;
t751 = -pkin(1) * t844 + t964;
t750 = -pkin(1) * t840 + t947;
t749 = -t933 * t804 + t935 * t805;
t748 = -t933 * t802 + t935 * t803;
t747 = t935 * t804 + t933 * t805;
t746 = t935 * t802 + t933 * t803;
t745 = -t939 * t796 + t942 * t799;
t744 = -t942 * t796 - t939 * t799;
t742 = -t933 * t791 + t935 * t794;
t741 = -t933 * t790 + t935 * t793;
t740 = t935 * t792 + t933 * t795;
t739 = t935 * t791 + t933 * t794;
t738 = t935 * t790 + t933 * t793;
t732 = pkin(2) * t735;
t731 = pkin(2) * t932 + qJ(3) * t974;
t730 = t936 * t742 + t934 * t877;
t729 = t936 * t741 - t934 * t876;
t728 = t934 * t742 - t936 * t877;
t727 = t934 * t741 + t936 * t876;
t726 = -t933 * t776 + t935 * t778;
t724 = t935 * t776 + t933 * t778;
t723 = t935 * t775 + t933 * t777;
t721 = t935 * t772 + t933 * t773;
t717 = t936 * t749 + t979;
t716 = t936 * t748 - t979;
t715 = t934 * t749 - t978;
t714 = t934 * t748 + t978;
t712 = t936 * t743 + t934 * t830;
t703 = pkin(1) * t798 + t966;
t702 = pkin(1) * t796 + t953;
t700 = -t938 * t756 + t941 * t757;
t699 = t941 * t756 + t938 * t757;
t698 = t936 * t726 + t934 * t832;
t697 = t934 * t726 - t936 * t832;
t695 = t936 * t722 + t934 * t828;
t692 = -qJ(3) * t852 - t934 * t762 + t935 * t994;
t691 = -qJ(3) * t854 - t934 * t761 + t933 * t994;
t690 = qJ(3) * t855 + t936 * t762 + t934 * t766;
t689 = -qJ(3) * t856 + t936 * t761 + t933 * t999;
t687 = t936 * t725 + t934 * t813;
t680 = -qJ(3) * t836 + t936 * t706;
t679 = qJ(3) * t838 + t934 * t706;
t678 = -pkin(3) * t723 - t1008;
t677 = t936 * t707 + t999;
t670 = -t938 * t728 + t941 * t730;
t669 = -t938 * t727 + t941 * t729;
t668 = t941 * t728 + t938 * t730;
t667 = t941 * t727 + t938 * t729;
t666 = pkin(1) * t781 + t960;
t665 = -t938 * t715 + t941 * t717;
t664 = -t938 * t714 + t941 * t716;
t663 = t941 * t715 + t938 * t717;
t662 = t941 * t714 + t938 * t716;
t661 = -t938 * t711 + t941 * t712;
t660 = t941 * t711 + t938 * t712;
t659 = -t938 * t697 + t941 * t698;
t658 = t941 * t697 + t938 * t698;
t657 = -pkin(3) * t740 - t949;
t656 = -t938 * t694 + t941 * t695;
t655 = t941 * t694 + t938 * t695;
t654 = -pkin(1) * t673 - t732;
t653 = -t938 * t686 + t941 * t687;
t652 = t941 * t686 + t938 * t687;
t649 = -pkin(3) * t721 - t954;
t648 = -pkin(6) * t796 - t938 * t690 + t941 * t692;
t647 = -pkin(6) * t798 - t938 * t689 + t941 * t691;
t646 = pkin(6) * t799 + t941 * t690 + t938 * t692;
t645 = -pkin(6) * t800 + t941 * t689 + t938 * t691;
t644 = -qJ(4) * t740 - t933 * t701 + t935 * t719;
t641 = -pkin(6) * t781 - t938 * t679 + t941 * t680;
t640 = pkin(6) * t783 + t941 * t679 + t938 * t680;
t637 = -t938 * t676 + t941 * t677;
t636 = t941 * t676 + t938 * t677;
t635 = -qJ(4) * t721 - t933 * t688 + t935 * t709;
t632 = pkin(6) * t673 + qJ(3) * t985 - t938 * t731;
t631 = pkin(1) * t932 + pkin(6) * t1030 + qJ(3) * t989 + t941 * t731;
t630 = -qJ(3) * t676 - (pkin(3) * t934 - qJ(4) * t936) * t706;
t629 = qJ(3) * t677 - (-pkin(3) * t936 - qJ(4) * t934 - pkin(2)) * t706;
t627 = t933 * t651 + t996;
t625 = t936 * t628 + t934 * t758;
t622 = pkin(1) * t660 + t961;
t621 = -qJ(3) * t711 + t936 * t644 - t934 * t657;
t620 = pkin(1) * t636 + t975;
t619 = -pkin(2) * t740 + qJ(3) * t712 + t934 * t644 + t936 * t657;
t618 = pkin(1) * t655 + t962;
t617 = -qJ(3) * t694 + t936 * t635 - t934 * t649;
t616 = -qJ(4) * t723 - t933 * t634 + t935 * t643;
t615 = -pkin(3) * t627 - t1009;
t614 = -pkin(2) * t721 + qJ(3) * t695 + t934 * t635 + t936 * t649;
t613 = -qJ(3) * t686 + t936 * t616 - t934 * t678;
t612 = -pkin(7) * t996 - qJ(4) * t627 - t933 * t639;
t611 = -pkin(2) * t723 + qJ(3) * t687 + t934 * t616 + t936 * t678;
t610 = pkin(1) * t652 + t963;
t609 = -t938 * t624 + t941 * t625;
t608 = t941 * t624 + t938 * t625;
t607 = -pkin(6) * t636 - t938 * t629 + t941 * t630;
t606 = pkin(1) * t706 + pkin(6) * t637 + t941 * t629 + t938 * t630;
t605 = -pkin(6) * t660 - t938 * t619 + t941 * t621;
t604 = -pkin(1) * t740 + pkin(6) * t661 + t941 * t619 + t938 * t621;
t603 = -pkin(6) * t655 - t938 * t614 + t941 * t617;
t602 = -pkin(1) * t721 + pkin(6) * t656 + t941 * t614 + t938 * t617;
t601 = -pkin(6) * t652 - t938 * t611 + t941 * t613;
t600 = -pkin(1) * t723 + pkin(6) * t653 + t941 * t611 + t938 * t613;
t599 = -qJ(3) * t624 + t936 * t612 - t934 * t615;
t598 = pkin(1) * t608 + t950;
t597 = -pkin(2) * t627 + qJ(3) * t625 + t934 * t612 + t936 * t615;
t596 = -pkin(6) * t608 - t938 * t597 + t941 * t599;
t595 = -pkin(1) * t627 + pkin(6) * t609 + t941 * t597 + t938 * t599;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t914, -t913, 0, 0, 0, 0, 0, 0, 0, t929, t821, t820, 0, -t806, 0, 0, 0, 0, 0, t929, t751, t750, 0, t654, t919, t906, 0, t921, 0, 0, t703, t702, t666, t620, t747, t724, t739, t746, t738, t763, t618, t622, t610, t598; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t907, 0, t908, 0, t965, t891, -t959, -pkin(5) * t959, 0, 0, -t1019, 0, t847, 0, t1036, -t1041, -t1031, -pkin(5) * t1031 - pkin(6) * t988 - t942 * t789, 0, 0, -t1038, 0, t785, 0, t1049, -t1050, -t1047, -pkin(5) * t1047 - t942 * t631 - t939 * t632, -t1021, -t942 * t782 - t939 * t784, t744, t1021, t1040, 0, pkin(5) * t1039 - t942 * t645 - t939 * t647, -pkin(5) * t745 - t942 * t646 - t939 * t648, -t939 * t641 - t942 * t640 - pkin(5) * (-t939 * t781 + t942 * t783), -t939 * t607 - t942 * t606 - pkin(5) * (-t939 * t636 + t942 * t637), -t942 * t663 - t939 * t665, -t942 * t658 - t939 * t659, -t942 * t668 - t939 * t670, -t942 * t662 - t939 * t664, -t942 * t667 - t939 * t669, -t942 * t699 - t939 * t700, -t939 * t603 - t942 * t602 - pkin(5) * (-t939 * t655 + t942 * t656), -t939 * t605 - t942 * t604 - pkin(5) * (-t939 * t660 + t942 * t661), -t939 * t601 - t942 * t600 - pkin(5) * (-t939 * t652 + t942 * t653), -t939 * t596 - t942 * t595 - pkin(5) * (-t939 * t608 + t942 * t609); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t908, 0, -t907, 0, -t891, t965, t958, pkin(5) * t958, 0, 0, -t847, 0, -t1019, 0, t1041, t1036, t1032, pkin(5) * t1032 + pkin(6) * t984 - t939 * t789, 0, 0, -t785, 0, -t1038, 0, t1050, t1049, t1046, pkin(5) * t1046 - t939 * t631 + t942 * t632, -t1020, -t939 * t782 + t942 * t784, t745, t1020, t1039, 0, -pkin(5) * t1040 - t939 * t645 + t942 * t647, pkin(5) * t744 - t939 * t646 + t942 * t648, t942 * t641 - t939 * t640 + pkin(5) * (-t942 * t781 - t939 * t783), t942 * t607 - t939 * t606 + pkin(5) * (-t942 * t636 - t939 * t637), -t939 * t663 + t942 * t665, -t939 * t658 + t942 * t659, -t939 * t668 + t942 * t670, -t939 * t662 + t942 * t664, -t939 * t667 + t942 * t669, -t939 * t699 + t942 * t700, t942 * t603 - t939 * t602 + pkin(5) * (-t942 * t655 - t939 * t656), t942 * t605 - t939 * t604 + pkin(5) * (-t942 * t660 - t939 * t661), t942 * t601 - t939 * t600 + pkin(5) * (-t942 * t652 - t939 * t653), t942 * t596 - t939 * t595 + pkin(5) * (-t942 * t608 - t939 * t609); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1010, 0, 0, -g(1), -t914, 0, 0, 0, -t904, 0, -t901, 0, t1023, t875, t809, pkin(6) * t809, 0, 0, -t844, 0, -t840, 0, t1037, t770, t673, t632, -t817, t784, t799, t817, t800, 0, t647, t648, t641, t607, t665, t659, t670, t664, t669, t700, t603, t605, t601, t596; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1010, 0, qJDD(1), 0, g(1), 0, t913, 0, 0, 0, t901, 0, -t904, 0, -t875, t1023, t973, t789, 0, 0, t840, 0, -t844, 0, -t770, t1037, t1030, t631, t814, t782, t796, -t814, -t798, 0, t645, t646, t640, t606, t663, t658, t668, t662, t667, t699, t602, t604, t600, t595; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t914, -t913, 0, 0, 0, 0, 0, 0, 0, t929, t821, t820, 0, -t806, 0, 0, 0, 0, 0, t929, t751, t750, 0, t654, t919, t906, 0, t921, 0, 0, t703, t702, t666, t620, t747, t724, t739, t746, t738, t763, t618, t622, t610, t598; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t929, 0, -t928, 0, 0, -g(1), t858, 0, 0, 0, -t898, 0, -t895, 0, t1022, t865, t735, qJ(3) * t735, t861, t839, t855, -t861, t856, 0, t691, t692, t680, t630, t717, t698, t730, t716, t729, t757, t617, t621, t613, t599; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t928, 0, t929, 0, g(1), 0, t859, 0, 0, 0, t895, 0, -t898, 0, -t865, t1022, t974, t731, t860, t837, t852, -t860, -t854, 0, t689, t690, t679, t629, t715, t697, t728, t714, t727, t756, t614, t619, t611, t597; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t929, -t858, -t859, 0, 0, 0, 0, 0, 0, 0, t929, t964, t947, 0, -t732, t919, t906, 0, t921, 0, 0, t966, t953, t960, t975, t747, t724, t739, t746, t738, t763, t962, t961, t963, t950; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t929, 0, -t928, 0, 0, -t932, t787, 0, t980, t894, t886, -t980, t887, 0, t765, t766, t706, qJ(4) * t706, t749, t726, t742, t748, t741, t764, t635, t644, t616, t612; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t928, 0, t929, 0, t932, 0, t788, 0, t909, -t900, -t920, -t909, -t922, 0, t761, t762, 0, pkin(3) * t706, -t833, -t832, -t877, t833, t876, -qJDD(5), t649, t657, t678, t615; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t929, -t787, -t788, 0, 0, t919, t906, 0, t921, 0, 0, t976, t956, t967, t983, t747, t724, t739, t746, t738, t763, t969, t968, t970, t952; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t920, t922, t909, 0, t923, 0, 0, t774, t761, 0, t805, t778, t794, t803, t793, t819, t709, t719, t643, -pkin(7) * t650; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t920, -t1004, t922, -t909, 0, -t774, 0, t762, 0, t804, t776, t791, t802, t790, t818, t688, t701, t634, t639; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t909, t900, t920, t909, t922, 0, -t761, -t762, 0, 0, t833, t832, t877, -t833, -t876, qJDD(5), t954, t949, t1008, t1009; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t831, -t828, t1012, t871, t866, -t871, 0, t758, t683, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t981, t830, t867, t829, t826, -t981, -t758, 0, t684, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t833, t832, t877, -t833, -t876, qJDD(5), -t683, -t684, 0, 0;];
m_new_reg = t1;
