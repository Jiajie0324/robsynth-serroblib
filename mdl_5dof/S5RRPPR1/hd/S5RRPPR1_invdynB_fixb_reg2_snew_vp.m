% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:19
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPPR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPPR1_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:18:35
% EndTime: 2019-12-05 18:18:47
% DurationCPUTime: 10.56s
% Computational Cost: add. (38322->447), mult. (54314->679), div. (0->0), fcn. (34125->10), ass. (0->302)
t500 = (qJD(1) + qJD(2));
t497 = t500 ^ 2;
t505 = cos(pkin(8));
t498 = qJDD(1) + qJDD(2);
t503 = sin(pkin(8));
t549 = t503 * t498;
t467 = t505 * t497 + t549;
t543 = t505 * t498;
t470 = t503 * t497 - t543;
t507 = sin(qJ(2));
t510 = cos(qJ(2));
t416 = t510 * t467 - t507 * t470;
t501 = g(1) - qJDD(3);
t443 = qJ(3) * t467 - t505 * t501;
t571 = qJ(3) * t470 - t503 * t501;
t349 = pkin(6) * t416 + t510 * t443 - t507 * t571;
t508 = sin(qJ(1));
t511 = cos(qJ(1));
t420 = t507 * t467 + t510 * t470;
t583 = pkin(6) * t420 + t507 * t443 + t510 * t571;
t585 = t508 * t416 + t511 * t420;
t594 = pkin(5) * t585 + t508 * t349 + t511 * t583;
t364 = t511 * t416 - t508 * t420;
t593 = pkin(5) * t364 + t511 * t349 - t508 * t583;
t486 = t511 * g(2) + t508 * g(3);
t518 = qJDD(1) * pkin(1) + t486;
t485 = t508 * g(2) - t511 * g(3);
t558 = qJD(1) ^ 2;
t519 = -t558 * pkin(1) + t485;
t435 = t507 * t518 + t510 * t519;
t422 = -t497 * pkin(2) + t435;
t517 = -t507 * t519 + t510 * t518;
t516 = t498 * pkin(2) + t517;
t368 = t503 * t422 - t505 * t516;
t369 = t505 * t422 + t503 * t516;
t525 = t503 * t368 + t505 * t369;
t320 = t505 * t368 - t503 * t369;
t535 = t510 * t320;
t271 = -t507 * t525 + t535;
t539 = t507 * t320;
t579 = t510 * t525 + t539;
t235 = t508 * t271 + t511 * t579;
t234 = t511 * t271 - t508 * t579;
t474 = t510 * t497 + t507 * t498;
t452 = pkin(6) * t474 - t510 * g(1);
t477 = t507 * t497 - t510 * t498;
t568 = t508 * t474 + t511 * t477;
t572 = pkin(6) * t477 - t507 * g(1);
t588 = pkin(5) * t568 + t508 * t452 + t511 * t572;
t504 = cos(pkin(9));
t502 = sin(pkin(9));
t499 = t502 ^ 2;
t514 = t504 ^ 2;
t559 = t497 * (t499 + t514);
t462 = t504 * t559;
t527 = t504 * t543;
t430 = -t503 * t462 + t527;
t547 = t503 * t504;
t432 = t505 * t462 + t498 * t547;
t379 = t510 * t430 - t507 * t432;
t381 = t507 * t430 + t510 * t432;
t587 = t511 * t379 - t508 * t381;
t586 = t508 * t379 + t511 * t381;
t423 = t511 * t474 - t508 * t477;
t584 = pkin(5) * t423 + t511 * t452 - t508 * t572;
t574 = -t497 * pkin(3) + t498 * qJ(4) + (2 * qJD(4) * t500) + t369;
t524 = t510 * t435 - t507 * t517;
t389 = -t507 * t435 - t510 * t517;
t534 = t511 * t389;
t332 = -t508 * t524 + t534;
t538 = t508 * t389;
t578 = -t511 * t524 - t538;
t506 = sin(qJ(5));
t509 = cos(qJ(5));
t573 = t502 * t506 - t504 * t509;
t457 = t573 * t500;
t521 = t502 * t509 + t504 * t506;
t459 = t521 * t500;
t408 = t459 * t457;
t560 = qJDD(5) - t408;
t576 = t506 * t560;
t575 = t509 * t560;
t552 = t502 * t504;
t436 = t467 * t552;
t437 = (-t497 * t547 + t527) * t502;
t393 = t510 * t436 + t507 * t437;
t396 = t507 * t436 - t510 * t437;
t570 = t511 * t393 - t508 * t396;
t569 = t508 * t393 + t511 * t396;
t561 = t521 * t498;
t492 = t514 * t497;
t554 = t499 * t497;
t472 = t492 + t554;
t455 = t457 ^ 2;
t456 = t459 ^ 2;
t495 = t498 * pkin(3);
t555 = t498 * t504;
t494 = t504 * t501;
t337 = -t494 + (pkin(4) * t497 * t504 - pkin(7) * t498 - t574) * t502;
t344 = -t502 * t501 + t574 * t504;
t338 = -pkin(4) * t492 + pkin(7) * t555 + t344;
t279 = -t509 * t337 + t506 * t338;
t280 = t506 * t337 + t509 * t338;
t250 = -t509 * t279 + t506 * t280;
t553 = t502 * t250;
t353 = -t497 * qJ(4) + qJDD(4) + t368 - t495;
t550 = t503 * t353;
t546 = t504 * t250;
t544 = t505 * t353;
t341 = -pkin(4) * t555 - t472 * pkin(7) + t353;
t541 = t506 * t341;
t401 = qJDD(5) + t408;
t540 = t506 * t401;
t537 = t509 * t341;
t536 = t509 * t401;
t532 = t457 * qJD(5);
t531 = t459 * qJD(5);
t529 = t503 * t408;
t528 = t505 * t408;
t526 = -t353 + t495;
t251 = t506 * t279 + t509 * t280;
t343 = t574 * t502 + t494;
t297 = t502 * t343 + t504 * t344;
t479 = t508 * qJDD(1) + t511 * t558;
t522 = pkin(5) * t479 - t511 * g(1);
t453 = t573 * t498;
t296 = t504 * t343 - t502 * t344;
t439 = t511 * t485 - t508 * t486;
t438 = -t508 * t485 - t511 * t486;
t512 = qJD(5) ^ 2;
t491 = t514 * t498;
t490 = t499 * t498;
t480 = -t511 * qJDD(1) + t508 * t558;
t473 = t492 - t554;
t465 = t491 - t490;
t464 = t491 + t490;
t463 = -pkin(5) * t480 + t508 * g(1);
t461 = t502 * t559;
t446 = -t456 - t512;
t445 = -t456 + t512;
t444 = t455 - t512;
t431 = t505 * t461 + t502 * t549;
t428 = t503 * t461 - t502 * t543;
t415 = t505 * t465 - t503 * t473;
t414 = t505 * t464 - t503 * t472;
t413 = t503 * t465 + t505 * t473;
t412 = t503 * t464 + t505 * t472;
t407 = -t456 + t455;
t406 = t561 - t532;
t405 = t561 - 0.2e1 * t532;
t404 = -t453 - t531;
t403 = t453 + 0.2e1 * t531;
t399 = -t512 - t455;
t398 = (-t457 * t509 + t459 * t506) * qJD(5);
t397 = (-t457 * t506 - t459 * t509) * qJD(5);
t392 = -t455 - t456;
t386 = t509 * t406 - t506 * t531;
t385 = t506 * t406 + t509 * t531;
t384 = -t506 * t404 + t509 * t532;
t383 = t509 * t404 + t506 * t532;
t380 = -t507 * t428 + t510 * t431;
t377 = t510 * t428 + t507 * t431;
t376 = -t506 * t446 - t536;
t375 = -t506 * t445 + t575;
t374 = t509 * t444 - t540;
t373 = t509 * t446 - t540;
t372 = t509 * t445 + t576;
t371 = t506 * t444 + t536;
t370 = pkin(1) * g(1) + pkin(6) * t524;
t363 = -t507 * t413 + t510 * t415;
t362 = -t507 * t412 + t510 * t414;
t361 = t510 * t413 + t507 * t415;
t360 = t510 * t412 + t507 * t414;
t357 = -t509 * t403 - t506 * t405;
t356 = -t453 * t509 + t506 * t561;
t355 = -t506 * t403 + t509 * t405;
t354 = -t453 * t506 - t509 * t561;
t352 = t509 * t399 - t576;
t351 = t506 * t399 + t575;
t345 = -t502 * t397 + t504 * t398;
t340 = t503 * qJDD(5) + t505 * t345;
t339 = -t505 * qJDD(5) + t503 * t345;
t331 = -t502 * t385 + t504 * t386;
t330 = -t502 * t383 + t504 * t384;
t328 = -t508 * t377 + t511 * t380;
t326 = -t511 * t377 - t508 * t380;
t325 = -t502 * t373 + t504 * t376;
t324 = -t502 * t372 + t504 * t375;
t323 = -t502 * t371 + t504 * t374;
t322 = t504 * t373 + t502 * t376;
t317 = -t508 * t360 + t511 * t362;
t316 = -t511 * t360 - t508 * t362;
t315 = pkin(2) * t501 + qJ(3) * t525;
t314 = t505 * t324 + t503 * t561;
t313 = t505 * t323 - t503 * t453;
t312 = t503 * t324 - t505 * t561;
t311 = t503 * t323 + t505 * t453;
t310 = -t502 * t355 + t504 * t357;
t309 = -t502 * t354 + t504 * t356;
t308 = t504 * t354 + t502 * t356;
t307 = -t502 * t351 + t504 * t352;
t306 = t504 * t351 + t502 * t352;
t305 = -pkin(7) * t373 + t537;
t304 = t505 * t331 + t529;
t303 = t505 * t330 - t529;
t302 = t503 * t331 - t528;
t301 = t503 * t330 + t528;
t300 = t505 * t325 + t503 * t405;
t299 = t503 * t325 - t505 * t405;
t298 = -pkin(7) * t351 + t541;
t294 = -pkin(4) * t405 + pkin(7) * t376 + t541;
t293 = -t507 * t339 + t510 * t340;
t292 = t510 * t339 + t507 * t340;
t291 = t505 * t310 - t503 * t407;
t290 = t503 * t310 + t505 * t407;
t289 = t505 * t307 + t503 * t403;
t288 = t503 * t307 - t505 * t403;
t287 = -qJ(3) * t428 - t503 * t344 + t504 * t544;
t286 = -qJ(3) * t430 - t503 * t343 + t502 * t544;
t285 = qJ(3) * t431 + t505 * t344 + t353 * t547;
t284 = -qJ(3) * t432 + t505 * t343 + t502 * t550;
t283 = -pkin(4) * t403 + pkin(7) * t352 - t537;
t282 = t505 * t309 + t503 * t392;
t281 = t503 * t309 - t505 * t392;
t277 = -qJ(3) * t412 + t505 * t296;
t276 = qJ(3) * t414 + t503 * t296;
t275 = -pkin(3) * t308 - pkin(4) * t354;
t274 = t505 * t297 + t550;
t273 = t503 * t297 - t544;
t268 = -t507 * t312 + t510 * t314;
t267 = -t507 * t311 + t510 * t313;
t266 = t510 * t312 + t507 * t314;
t265 = t510 * t311 + t507 * t313;
t264 = -t507 * t302 + t510 * t304;
t263 = -t507 * t301 + t510 * t303;
t262 = t510 * t302 + t507 * t304;
t261 = t510 * t301 + t507 * t303;
t260 = -t507 * t299 + t510 * t300;
t259 = t510 * t299 + t507 * t300;
t258 = -t507 * t290 + t510 * t291;
t257 = t510 * t290 + t507 * t291;
t256 = -pkin(3) * t322 - pkin(4) * t373 + t280;
t255 = -t507 * t288 + t510 * t289;
t254 = t510 * t288 + t507 * t289;
t253 = -t507 * t281 + t510 * t282;
t252 = t510 * t281 + t507 * t282;
t249 = -pkin(3) * t306 - pkin(4) * t351 + t279;
t248 = -pkin(6) * t377 - t507 * t285 + t510 * t287;
t247 = -pkin(6) * t379 - t507 * t284 + t510 * t286;
t246 = pkin(6) * t380 + t510 * t285 + t507 * t287;
t245 = -pkin(6) * t381 + t510 * t284 + t507 * t286;
t244 = -qJ(4) * t322 - t502 * t294 + t504 * t305;
t243 = -pkin(7) * t354 - t250;
t242 = -pkin(6) * t360 - t507 * t276 + t510 * t277;
t241 = pkin(6) * t362 + t510 * t276 + t507 * t277;
t240 = -pkin(4) * t341 + pkin(7) * t251;
t239 = -t507 * t273 + t510 * t274;
t238 = t510 * t273 + t507 * t274;
t237 = -qJ(4) * t306 - t502 * t283 + t504 * t298;
t236 = -pkin(4) * t392 + pkin(7) * t356 + t251;
t233 = pkin(6) * t271 + qJ(3) * t535 - t507 * t315;
t232 = pkin(1) * t501 + pkin(6) * t579 + qJ(3) * t539 + t510 * t315;
t231 = -qJ(3) * t273 - (pkin(3) * t503 - qJ(4) * t505) * t296;
t230 = -t508 * t259 + t511 * t260;
t229 = -t511 * t259 - t508 * t260;
t228 = -t508 * t254 + t511 * t255;
t227 = -t511 * t254 - t508 * t255;
t226 = qJ(3) * t274 - (-pkin(3) * t505 - qJ(4) * t503 - pkin(2)) * t296;
t225 = -t508 * t252 + t511 * t253;
t224 = -t511 * t252 - t508 * t253;
t223 = t504 * t251 - t553;
t222 = t502 * t251 + t546;
t221 = t505 * t223 + t503 * t341;
t220 = t503 * t223 - t505 * t341;
t219 = -qJ(3) * t299 + t505 * t244 - t503 * t256;
t218 = -t508 * t238 + t511 * t239;
t217 = -t511 * t238 - t508 * t239;
t216 = -pkin(2) * t322 + qJ(3) * t300 + t503 * t244 + t505 * t256;
t215 = -qJ(3) * t288 + t505 * t237 - t503 * t249;
t214 = -qJ(4) * t308 - t502 * t236 + t504 * t243;
t213 = -pkin(3) * t222 - pkin(4) * t250;
t212 = -pkin(2) * t306 + qJ(3) * t289 + t503 * t237 + t505 * t249;
t211 = -qJ(3) * t281 + t505 * t214 - t503 * t275;
t210 = -pkin(7) * t546 - qJ(4) * t222 - t502 * t240;
t209 = -pkin(2) * t308 + qJ(3) * t282 + t503 * t214 + t505 * t275;
t208 = -t507 * t220 + t510 * t221;
t207 = t510 * t220 + t507 * t221;
t206 = -pkin(6) * t238 - t507 * t226 + t510 * t231;
t205 = pkin(1) * t296 + pkin(6) * t239 + t510 * t226 + t507 * t231;
t204 = -pkin(6) * t259 - t507 * t216 + t510 * t219;
t203 = -pkin(1) * t322 + pkin(6) * t260 + t510 * t216 + t507 * t219;
t202 = -pkin(6) * t254 - t507 * t212 + t510 * t215;
t201 = -pkin(1) * t306 + pkin(6) * t255 + t510 * t212 + t507 * t215;
t200 = -t508 * t207 + t511 * t208;
t199 = -t511 * t207 - t508 * t208;
t198 = -pkin(6) * t252 - t507 * t209 + t510 * t211;
t197 = -pkin(1) * t308 + pkin(6) * t253 + t510 * t209 + t507 * t211;
t196 = -qJ(3) * t220 + t505 * t210 - t503 * t213;
t195 = -pkin(2) * t222 + qJ(3) * t221 + t503 * t210 + t505 * t213;
t194 = -pkin(6) * t207 - t507 * t195 + t510 * t196;
t193 = -pkin(1) * t222 + pkin(6) * t208 + t510 * t195 + t507 * t196;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t501, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t296, 0, 0, 0, 0, 0, 0, t306, t322, t308, t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t480, t479, 0, t438, 0, 0, 0, 0, 0, 0, t568, t423, 0, t332, 0, 0, 0, 0, 0, 0, t585, t364, 0, t234, 0, 0, 0, 0, 0, 0, -t587, t326, t316, t217, 0, 0, 0, 0, 0, 0, t227, t229, t224, t199; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t479, t480, 0, t439, 0, 0, 0, 0, 0, 0, -t423, t568, 0, -t578, 0, 0, 0, 0, 0, 0, -t364, t585, 0, t235, 0, 0, 0, 0, 0, 0, -t586, t328, t317, t218, 0, 0, 0, 0, 0, 0, t228, t230, t225, t200; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t486, -t485, 0, 0, 0, 0, 0, 0, 0, t498, -pkin(1) * t477 + t517, -pkin(1) * t474 - t435, 0, -pkin(1) * t389, 0, 0, 0, 0, 0, t498, -pkin(1) * t420 - pkin(2) * t470 - t368, -pkin(1) * t416 - pkin(2) * t467 - t369, 0, -pkin(1) * t271 - pkin(2) * t320, t490, 0.2e1 * t498 * t552, 0, t491, 0, 0, pkin(1) * t379 + pkin(2) * t430 - qJ(4) * t462 + t504 * t526, pkin(1) * t377 + pkin(2) * t428 + qJ(4) * t461 - t502 * t526, pkin(1) * t360 + pkin(2) * t412 + pkin(3) * t472 + qJ(4) * t464 + t297, pkin(1) * t238 + pkin(2) * t273 - pkin(3) * t353 + qJ(4) * t297, t504 * t385 + t502 * t386, t504 * t355 + t502 * t357, t504 * t372 + t502 * t375, t504 * t383 + t502 * t384, t504 * t371 + t502 * t374, t504 * t397 + t502 * t398, pkin(1) * t254 + pkin(2) * t288 - pkin(3) * t403 + qJ(4) * t307 + t504 * t283 + t502 * t298, pkin(1) * t259 + pkin(2) * t299 - pkin(3) * t405 + qJ(4) * t325 + t504 * t294 + t502 * t305, pkin(1) * t252 + pkin(2) * t281 - pkin(3) * t392 + qJ(4) * t309 + t504 * t236 + t502 * t243, pkin(1) * t207 + pkin(2) * t220 - pkin(3) * t341 - pkin(7) * t553 + qJ(4) * t223 + t504 * t240; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t479, 0, t480, 0, t522, t463, -t439, -pkin(5) * t439, 0, 0, -t423, 0, t568, 0, t584, -t588, t578, pkin(5) * t578 - pkin(6) * t538 - t511 * t370, 0, 0, -t364, 0, t585, 0, t593, -t594, -t235, -pkin(5) * t235 - t511 * t232 - t508 * t233, -t570, -t511 * t361 - t508 * t363, t326, t570, t587, 0, pkin(5) * t586 - t511 * t245 - t508 * t247, -pkin(5) * t328 - t511 * t246 - t508 * t248, -pkin(5) * t317 - t511 * t241 - t508 * t242, -pkin(5) * t218 - t511 * t205 - t508 * t206, -t511 * t262 - t508 * t264, -t511 * t257 - t508 * t258, -t511 * t266 - t508 * t268, -t511 * t261 - t508 * t263, -t511 * t265 - t508 * t267, -t511 * t292 - t508 * t293, -pkin(5) * t228 - t511 * t201 - t508 * t202, -pkin(5) * t230 - t511 * t203 - t508 * t204, -pkin(5) * t225 - t511 * t197 - t508 * t198, -pkin(5) * t200 - t511 * t193 - t508 * t194; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t480, 0, -t479, 0, -t463, t522, t438, pkin(5) * t438, 0, 0, -t568, 0, -t423, 0, t588, t584, t332, pkin(5) * t332 + pkin(6) * t534 - t508 * t370, 0, 0, -t585, 0, -t364, 0, t594, t593, t234, pkin(5) * t234 - t508 * t232 + t511 * t233, -t569, -t508 * t361 + t511 * t363, t328, t569, t586, 0, -pkin(5) * t587 - t508 * t245 + t511 * t247, pkin(5) * t326 - t508 * t246 + t511 * t248, pkin(5) * t316 - t508 * t241 + t511 * t242, pkin(5) * t217 - t508 * t205 + t511 * t206, -t508 * t262 + t511 * t264, -t508 * t257 + t511 * t258, -t508 * t266 + t511 * t268, -t508 * t261 + t511 * t263, -t508 * t265 + t511 * t267, -t508 * t292 + t511 * t293, pkin(5) * t227 - t508 * t201 + t511 * t202, pkin(5) * t229 - t508 * t203 + t511 * t204, pkin(5) * t224 - t508 * t197 + t511 * t198, pkin(5) * t199 - t508 * t193 + t511 * t194;];
tauB_reg = t1;
