% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:56
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPPR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPPR1_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:56:04
% EndTime: 2020-01-03 11:56:13
% DurationCPUTime: 8.17s
% Computational Cost: add. (38322->447), mult. (54314->683), div. (0->0), fcn. (34125->10), ass. (0->301)
t503 = (qJD(1) + qJD(2));
t500 = t503 ^ 2;
t501 = qJDD(1) + qJDD(2);
t506 = sin(pkin(8));
t508 = cos(pkin(8));
t466 = t500 * t508 + t501 * t506;
t469 = t500 * t506 - t501 * t508;
t510 = sin(qJ(2));
t513 = cos(qJ(2));
t414 = t466 * t513 - t469 * t510;
t504 = g(1) - qJDD(3);
t441 = qJ(3) * t466 - t504 * t508;
t574 = qJ(3) * t469 - t504 * t506;
t347 = pkin(6) * t414 + t441 * t513 - t510 * t574;
t418 = t466 * t510 + t469 * t513;
t511 = sin(qJ(1));
t514 = cos(qJ(1));
t365 = t414 * t514 - t418 * t511;
t586 = pkin(6) * t418 + t441 * t510 + t513 * t574;
t595 = -pkin(5) * t365 - t347 * t514 + t511 * t586;
t573 = t414 * t511 + t418 * t514;
t594 = pkin(5) * t573 + t347 * t511 + t514 * t586;
t486 = g(2) * t514 + g(3) * t511;
t521 = qJDD(1) * pkin(1) - t486;
t485 = g(2) * t511 - g(3) * t514;
t561 = qJD(1) ^ 2;
t522 = -t561 * pkin(1) - t485;
t433 = t510 * t521 + t513 * t522;
t420 = -pkin(2) * t500 + t433;
t520 = -t510 * t522 + t513 * t521;
t519 = t501 * pkin(2) + t520;
t366 = t420 * t506 - t508 * t519;
t367 = t508 * t420 + t506 * t519;
t528 = t366 * t506 + t508 * t367;
t318 = t366 * t508 - t367 * t506;
t555 = t318 * t513;
t269 = -t510 * t528 + t555;
t556 = t318 * t510;
t580 = t513 * t528 + t556;
t591 = t269 * t511 + t514 * t580;
t232 = -t269 * t514 + t511 * t580;
t507 = cos(pkin(9));
t505 = sin(pkin(9));
t502 = t505 ^ 2;
t517 = t507 ^ 2;
t562 = t500 * (t502 + t517);
t460 = t507 * t562;
t539 = t507 * t508;
t428 = -t460 * t506 + t501 * t539;
t540 = t506 * t507;
t430 = t460 * t508 + t501 * t540;
t377 = t428 * t513 - t430 * t510;
t379 = t428 * t510 + t430 * t513;
t325 = t377 * t514 - t379 * t511;
t327 = t377 * t511 + t379 * t514;
t473 = t500 * t513 + t501 * t510;
t476 = t500 * t510 - t501 * t513;
t424 = t473 * t514 - t476 * t511;
t450 = pkin(6) * t473 - g(1) * t513;
t575 = pkin(6) * t476 - g(1) * t510;
t588 = -pkin(5) * t424 - t450 * t514 + t511 * t575;
t525 = t473 * t511 + t476 * t514;
t587 = pkin(5) * t525 + t450 * t511 + t514 * t575;
t577 = -pkin(3) * t500 + qJ(4) * t501 + (2 * qJD(4) * t503) + t367;
t527 = t513 * t433 - t510 * t520;
t387 = -t433 * t510 - t513 * t520;
t551 = t387 * t514;
t330 = t511 * t527 - t551;
t552 = t387 * t511;
t581 = t514 * t527 + t552;
t509 = sin(qJ(5));
t512 = cos(qJ(5));
t576 = t505 * t509 - t507 * t512;
t455 = t576 * t503;
t524 = t505 * t512 + t507 * t509;
t457 = t524 * t503;
t406 = t457 * t455;
t563 = qJDD(5) - t406;
t579 = t509 * t563;
t578 = t512 * t563;
t543 = t505 * t507;
t434 = t466 * t543;
t531 = t501 * t543;
t435 = -t500 * t505 * t540 + t508 * t531;
t391 = t434 * t513 + t435 * t510;
t394 = t434 * t510 - t435 * t513;
t572 = t391 * t514 - t394 * t511;
t571 = t391 * t511 + t394 * t514;
t564 = t524 * t501;
t492 = t517 * t500;
t548 = t500 * t502;
t471 = t492 + t548;
t453 = t455 ^ 2;
t454 = t457 ^ 2;
t495 = t501 * pkin(3);
t494 = t507 * t504;
t335 = -t494 + (pkin(4) * t500 * t507 - pkin(7) * t501 - t577) * t505;
t342 = -t505 * t504 + t577 * t507;
t547 = t501 * t507;
t336 = -pkin(4) * t492 + pkin(7) * t547 + t342;
t277 = -t512 * t335 + t336 * t509;
t278 = t509 * t335 + t512 * t336;
t248 = -t277 * t512 + t278 * t509;
t558 = t248 * t505;
t557 = t248 * t507;
t351 = -t500 * qJ(4) + qJDD(4) + t366 - t495;
t339 = -pkin(4) * t547 - t471 * pkin(7) + t351;
t554 = t339 * t509;
t553 = t339 * t512;
t399 = qJDD(5) + t406;
t550 = t399 * t509;
t549 = t399 * t512;
t544 = t505 * t506;
t542 = t505 * t508;
t536 = t455 * qJD(5);
t535 = t457 * qJD(5);
t533 = t506 * t406;
t532 = t508 * t406;
t530 = -t351 + t495;
t479 = -t511 * qJDD(1) - t514 * t561;
t529 = pkin(5) * t479 + t514 * g(1);
t249 = t277 * t509 + t512 * t278;
t341 = t577 * t505 + t494;
t295 = t341 * t505 + t507 * t342;
t436 = -t511 * t485 - t486 * t514;
t451 = t576 * t501;
t294 = t341 * t507 - t342 * t505;
t437 = t485 * t514 - t486 * t511;
t515 = qJD(5) ^ 2;
t491 = t517 * t501;
t490 = t502 * t501;
t480 = qJDD(1) * t514 - t561 * t511;
t472 = t492 - t548;
t464 = t491 - t490;
t463 = t491 + t490;
t462 = pkin(5) * t480 + g(1) * t511;
t459 = t505 * t562;
t444 = -t454 - t515;
t443 = -t454 + t515;
t442 = t453 - t515;
t429 = t459 * t508 + t501 * t544;
t426 = t459 * t506 - t501 * t542;
t413 = t464 * t508 - t472 * t506;
t412 = t463 * t508 - t471 * t506;
t411 = t464 * t506 + t472 * t508;
t410 = t463 * t506 + t471 * t508;
t405 = -t454 + t453;
t404 = t564 - t536;
t403 = t564 - 0.2e1 * t536;
t402 = -t451 - t535;
t401 = t451 + 0.2e1 * t535;
t397 = -t515 - t453;
t396 = (-t455 * t512 + t457 * t509) * qJD(5);
t395 = (-t455 * t509 - t457 * t512) * qJD(5);
t390 = -t453 - t454;
t384 = t404 * t512 - t509 * t535;
t383 = t404 * t509 + t512 * t535;
t382 = -t402 * t509 + t512 * t536;
t381 = t402 * t512 + t509 * t536;
t378 = -t426 * t510 + t429 * t513;
t375 = t426 * t513 + t429 * t510;
t374 = -t444 * t509 - t549;
t373 = -t443 * t509 + t578;
t372 = t442 * t512 - t550;
t371 = t444 * t512 - t550;
t370 = t443 * t512 + t579;
t369 = t442 * t509 + t549;
t368 = pkin(1) * g(1) + pkin(6) * t527;
t361 = -t411 * t510 + t413 * t513;
t360 = -t410 * t510 + t412 * t513;
t359 = t411 * t513 + t413 * t510;
t358 = t410 * t513 + t412 * t510;
t355 = -t401 * t512 - t403 * t509;
t354 = -t451 * t512 + t509 * t564;
t353 = -t401 * t509 + t403 * t512;
t352 = -t451 * t509 - t512 * t564;
t350 = t397 * t512 - t579;
t349 = t397 * t509 + t578;
t343 = -t395 * t505 + t396 * t507;
t338 = qJDD(5) * t506 + t343 * t508;
t337 = -qJDD(5) * t508 + t343 * t506;
t329 = -t383 * t505 + t384 * t507;
t328 = -t381 * t505 + t382 * t507;
t326 = t375 * t511 - t378 * t514;
t324 = t375 * t514 + t378 * t511;
t323 = -t371 * t505 + t374 * t507;
t322 = -t370 * t505 + t373 * t507;
t321 = -t369 * t505 + t372 * t507;
t320 = t371 * t507 + t374 * t505;
t315 = t358 * t511 - t360 * t514;
t314 = t358 * t514 + t360 * t511;
t313 = pkin(2) * t504 + qJ(3) * t528;
t312 = t322 * t508 + t506 * t564;
t311 = t321 * t508 - t451 * t506;
t310 = t322 * t506 - t508 * t564;
t309 = t321 * t506 + t451 * t508;
t308 = -t353 * t505 + t355 * t507;
t307 = -t352 * t505 + t354 * t507;
t306 = t352 * t507 + t354 * t505;
t305 = -t349 * t505 + t350 * t507;
t304 = t349 * t507 + t350 * t505;
t303 = -pkin(7) * t371 + t553;
t302 = t329 * t508 + t533;
t301 = t328 * t508 - t533;
t300 = t329 * t506 - t532;
t299 = t328 * t506 + t532;
t298 = t323 * t508 + t403 * t506;
t297 = t323 * t506 - t403 * t508;
t296 = -pkin(7) * t349 + t554;
t292 = -pkin(4) * t403 + pkin(7) * t374 + t554;
t291 = -t337 * t510 + t338 * t513;
t290 = t337 * t513 + t338 * t510;
t289 = t308 * t508 - t405 * t506;
t288 = t308 * t506 + t405 * t508;
t287 = t305 * t508 + t401 * t506;
t286 = t305 * t506 - t401 * t508;
t285 = -qJ(3) * t426 - t342 * t506 + t351 * t539;
t284 = -qJ(3) * t428 - t341 * t506 + t351 * t542;
t283 = qJ(3) * t429 + t342 * t508 + t351 * t540;
t282 = -qJ(3) * t430 + t341 * t508 + t351 * t544;
t281 = -pkin(4) * t401 + pkin(7) * t350 - t553;
t280 = t307 * t508 + t390 * t506;
t279 = t307 * t506 - t390 * t508;
t275 = -qJ(3) * t410 + t294 * t508;
t274 = qJ(3) * t412 + t294 * t506;
t273 = -pkin(3) * t306 - pkin(4) * t352;
t272 = t295 * t508 + t351 * t506;
t271 = t295 * t506 - t351 * t508;
t266 = -t310 * t510 + t312 * t513;
t265 = -t309 * t510 + t311 * t513;
t264 = t310 * t513 + t312 * t510;
t263 = t309 * t513 + t311 * t510;
t262 = -t300 * t510 + t302 * t513;
t261 = -t299 * t510 + t301 * t513;
t260 = t300 * t513 + t302 * t510;
t259 = t299 * t513 + t301 * t510;
t258 = -t297 * t510 + t298 * t513;
t257 = t297 * t513 + t298 * t510;
t256 = -t288 * t510 + t289 * t513;
t255 = t288 * t513 + t289 * t510;
t254 = -pkin(3) * t320 - pkin(4) * t371 + t278;
t253 = -t286 * t510 + t287 * t513;
t252 = t286 * t513 + t287 * t510;
t251 = -t279 * t510 + t280 * t513;
t250 = t279 * t513 + t280 * t510;
t247 = -pkin(3) * t304 - pkin(4) * t349 + t277;
t246 = -pkin(6) * t375 - t283 * t510 + t285 * t513;
t245 = -pkin(6) * t377 - t282 * t510 + t284 * t513;
t244 = pkin(6) * t378 + t283 * t513 + t285 * t510;
t243 = -pkin(6) * t379 + t282 * t513 + t284 * t510;
t242 = -qJ(4) * t320 - t292 * t505 + t303 * t507;
t241 = -pkin(7) * t352 - t248;
t240 = -pkin(6) * t358 - t274 * t510 + t275 * t513;
t239 = pkin(6) * t360 + t274 * t513 + t275 * t510;
t238 = -pkin(4) * t339 + pkin(7) * t249;
t237 = -t271 * t510 + t272 * t513;
t236 = t271 * t513 + t272 * t510;
t235 = -qJ(4) * t304 - t281 * t505 + t296 * t507;
t234 = -pkin(4) * t390 + pkin(7) * t354 + t249;
t231 = pkin(6) * t269 + qJ(3) * t555 - t313 * t510;
t230 = pkin(1) * t504 + pkin(6) * t580 + qJ(3) * t556 + t313 * t513;
t229 = -qJ(3) * t271 - (pkin(3) * t506 - qJ(4) * t508) * t294;
t228 = t257 * t511 - t258 * t514;
t227 = t257 * t514 + t258 * t511;
t226 = t252 * t511 - t253 * t514;
t225 = t252 * t514 + t253 * t511;
t224 = qJ(3) * t272 - (-pkin(3) * t508 - qJ(4) * t506 - pkin(2)) * t294;
t223 = t250 * t511 - t251 * t514;
t222 = t250 * t514 + t251 * t511;
t221 = t249 * t507 - t558;
t220 = t249 * t505 + t557;
t219 = t221 * t508 + t339 * t506;
t218 = t221 * t506 - t339 * t508;
t217 = -qJ(3) * t297 + t242 * t508 - t254 * t506;
t216 = t236 * t511 - t237 * t514;
t215 = t236 * t514 + t237 * t511;
t214 = -pkin(2) * t320 + qJ(3) * t298 + t242 * t506 + t254 * t508;
t213 = -qJ(3) * t286 + t235 * t508 - t247 * t506;
t212 = -qJ(4) * t306 - t234 * t505 + t241 * t507;
t211 = -pkin(3) * t220 - pkin(4) * t248;
t210 = -pkin(2) * t304 + qJ(3) * t287 + t235 * t506 + t247 * t508;
t209 = -qJ(3) * t279 + t212 * t508 - t273 * t506;
t208 = -pkin(7) * t557 - qJ(4) * t220 - t238 * t505;
t207 = -pkin(2) * t306 + qJ(3) * t280 + t212 * t506 + t273 * t508;
t206 = -t218 * t510 + t219 * t513;
t205 = t218 * t513 + t219 * t510;
t204 = -pkin(6) * t236 - t224 * t510 + t229 * t513;
t203 = pkin(1) * t294 + pkin(6) * t237 + t224 * t513 + t229 * t510;
t202 = -pkin(6) * t257 - t214 * t510 + t217 * t513;
t201 = -pkin(1) * t320 + pkin(6) * t258 + t214 * t513 + t217 * t510;
t200 = -pkin(6) * t252 - t210 * t510 + t213 * t513;
t199 = -pkin(1) * t304 + pkin(6) * t253 + t210 * t513 + t213 * t510;
t198 = t205 * t511 - t206 * t514;
t197 = t205 * t514 + t206 * t511;
t196 = -pkin(6) * t250 - t207 * t510 + t209 * t513;
t195 = -pkin(1) * t306 + pkin(6) * t251 + t207 * t513 + t209 * t510;
t194 = -qJ(3) * t218 + t208 * t508 - t211 * t506;
t193 = -pkin(2) * t220 + qJ(3) * t219 + t208 * t506 + t211 * t508;
t192 = -pkin(6) * t205 - t193 * t510 + t194 * t513;
t191 = -pkin(1) * t220 + pkin(6) * t206 + t193 * t513 + t194 * t510;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t504, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t294, 0, 0, 0, 0, 0, 0, t304, t320, t306, t220; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t480, t479, 0, t436, 0, 0, 0, 0, 0, 0, -t525, -t424, 0, t330, 0, 0, 0, 0, 0, 0, -t573, -t365, 0, t232, 0, 0, 0, 0, 0, 0, t325, t324, t314, t215, 0, 0, 0, 0, 0, 0, t225, t227, t222, t197; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t479, t480, 0, t437, 0, 0, 0, 0, 0, 0, t424, -t525, 0, -t581, 0, 0, 0, 0, 0, 0, t365, -t573, 0, -t591, 0, 0, 0, 0, 0, 0, t327, t326, t315, t216, 0, 0, 0, 0, 0, 0, t226, t228, t223, t198; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t486, t485, 0, 0, 0, 0, 0, 0, 0, t501, -pkin(1) * t476 + t520, -pkin(1) * t473 - t433, 0, -pkin(1) * t387, 0, 0, 0, 0, 0, t501, -pkin(1) * t418 - pkin(2) * t469 - t366, -pkin(1) * t414 - pkin(2) * t466 - t367, 0, -pkin(1) * t269 - pkin(2) * t318, t490, 0.2e1 * t531, 0, t491, 0, 0, pkin(1) * t377 + pkin(2) * t428 - qJ(4) * t460 + t507 * t530, pkin(1) * t375 + pkin(2) * t426 + qJ(4) * t459 - t505 * t530, pkin(1) * t358 + pkin(2) * t410 + pkin(3) * t471 + qJ(4) * t463 + t295, pkin(1) * t236 + pkin(2) * t271 - pkin(3) * t351 + qJ(4) * t295, t383 * t507 + t384 * t505, t353 * t507 + t355 * t505, t370 * t507 + t373 * t505, t381 * t507 + t382 * t505, t369 * t507 + t372 * t505, t395 * t507 + t396 * t505, pkin(1) * t252 + pkin(2) * t286 - pkin(3) * t401 + qJ(4) * t305 + t281 * t507 + t296 * t505, pkin(1) * t257 + pkin(2) * t297 - pkin(3) * t403 + qJ(4) * t323 + t292 * t507 + t303 * t505, pkin(1) * t250 + pkin(2) * t279 - pkin(3) * t390 + qJ(4) * t307 + t234 * t507 + t241 * t505, pkin(1) * t205 + pkin(2) * t218 - pkin(3) * t339 - pkin(7) * t558 + qJ(4) * t221 + t238 * t507; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t479, 0, t480, 0, t529, -t462, -t437, -pkin(5) * t437, 0, 0, t424, 0, -t525, 0, t588, t587, t581, pkin(5) * t581 + pkin(6) * t552 + t368 * t514, 0, 0, t365, 0, -t573, 0, t595, t594, t591, pkin(5) * t591 + t230 * t514 + t231 * t511, t572, t359 * t514 + t361 * t511, t324, -t572, -t325, 0, -pkin(5) * t327 + t243 * t514 + t245 * t511, -pkin(5) * t326 + t244 * t514 + t246 * t511, -pkin(5) * t315 + t239 * t514 + t240 * t511, -pkin(5) * t216 + t203 * t514 + t204 * t511, t260 * t514 + t262 * t511, t255 * t514 + t256 * t511, t264 * t514 + t266 * t511, t259 * t514 + t261 * t511, t263 * t514 + t265 * t511, t290 * t514 + t291 * t511, -pkin(5) * t226 + t199 * t514 + t200 * t511, -pkin(5) * t228 + t201 * t514 + t202 * t511, -pkin(5) * t223 + t195 * t514 + t196 * t511, -pkin(5) * t198 + t191 * t514 + t192 * t511; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t480, 0, -t479, 0, t462, t529, t436, pkin(5) * t436, 0, 0, t525, 0, t424, 0, -t587, t588, t330, pkin(5) * t330 - pkin(6) * t551 + t368 * t511, 0, 0, t573, 0, t365, 0, -t594, t595, t232, pkin(5) * t232 + t230 * t511 - t231 * t514, t571, t359 * t511 - t361 * t514, t326, -t571, -t327, 0, pkin(5) * t325 + t243 * t511 - t245 * t514, pkin(5) * t324 + t244 * t511 - t246 * t514, pkin(5) * t314 + t239 * t511 - t240 * t514, pkin(5) * t215 + t203 * t511 - t204 * t514, t260 * t511 - t262 * t514, t255 * t511 - t256 * t514, t264 * t511 - t266 * t514, t259 * t511 - t261 * t514, t263 * t511 - t265 * t514, t290 * t511 - t291 * t514, pkin(5) * t225 + t199 * t511 - t200 * t514, pkin(5) * t227 + t201 * t511 - t202 * t514, pkin(5) * t222 + t195 * t511 - t196 * t514, pkin(5) * t197 + t191 * t511 - t192 * t514;];
tauB_reg = t1;
