% Calculate minimal parameter regressor of coriolis matrix for
% S5RRPPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3,theta4]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x23]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:34
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RRPPR6_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR6_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR6_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPPR6_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:33:08
% EndTime: 2019-12-31 19:33:20
% DurationCPUTime: 3.16s
% Computational Cost: add. (3476->274), mult. (7307->407), div. (0->0), fcn. (8345->8), ass. (0->233)
t187 = sin(qJ(2));
t312 = -qJ(3) - pkin(6);
t168 = t312 * t187;
t189 = cos(qJ(2));
t169 = t312 * t189;
t184 = sin(pkin(8));
t291 = cos(pkin(8));
t119 = -t291 * t168 - t184 * t169;
t183 = sin(pkin(9));
t325 = t119 * t183;
t185 = cos(pkin(9));
t324 = t119 * t185;
t166 = t291 * t169;
t278 = t184 * t168;
t323 = -t166 + t278;
t287 = t323 * t183;
t286 = t323 * t185;
t218 = t291 * t187;
t277 = t184 * t189;
t162 = t218 + t277;
t188 = cos(qJ(5));
t274 = t188 * t183;
t186 = sin(qJ(5));
t275 = t186 * t185;
t164 = t274 + t275;
t70 = t164 * t162;
t255 = t70 * qJD(1);
t322 = t275 / 0.2e1 + t274 / 0.2e1;
t158 = t184 * t187 - t291 * t189;
t251 = qJD(1) * t158;
t230 = t70 * t251;
t320 = t162 ^ 2;
t110 = t158 ^ 2 + t320;
t181 = t183 ^ 2;
t182 = t185 ^ 2;
t170 = t181 + t182;
t321 = qJD(5) * t70;
t154 = t218 / 0.2e1 + t277 / 0.2e1;
t319 = -t158 / 0.2e1;
t273 = t188 * t185;
t276 = t186 * t183;
t160 = -t273 + t276;
t318 = -t160 / 0.2e1;
t317 = t160 / 0.2e1;
t316 = t164 / 0.2e1;
t179 = -t291 * pkin(2) - pkin(3);
t167 = -t185 * pkin(4) + t179;
t315 = -t167 / 0.2e1;
t314 = t187 * pkin(2);
t174 = t184 * pkin(2) + qJ(4);
t313 = pkin(7) + t174;
t311 = qJD(2) * pkin(2);
t279 = t162 * t185;
t229 = -t189 * pkin(2) - pkin(1);
t104 = t158 * pkin(3) - t162 * qJ(4) + t229;
t54 = t185 * t104 - t287;
t191 = t158 * pkin(4) - pkin(7) * t279 + t54;
t103 = t183 * t162;
t55 = t183 * t104 + t286;
t39 = -pkin(7) * t103 + t55;
t16 = t186 * t39 - t188 * t191;
t105 = t162 * pkin(3) + t158 * qJ(4) + t314;
t56 = t185 * t105 + t325;
t36 = t185 * t158 * pkin(7) + t162 * pkin(4) + t56;
t306 = t188 * t36;
t100 = t183 * t158;
t57 = t183 * t105 - t324;
t40 = pkin(7) * t100 + t57;
t307 = t186 * t40;
t82 = -pkin(4) * t100 + t323;
t83 = pkin(4) * t103 + t119;
t88 = t164 * t158;
t1 = (t306 - t307) * t158 - t16 * t162 + t82 * t70 - t83 * t88;
t310 = t1 * qJD(1);
t309 = t162 * t70;
t308 = t186 * t36;
t305 = t188 * t40;
t17 = t186 * t191 + t188 * t39;
t92 = t160 * t158;
t138 = t162 * t276;
t93 = t162 * t273 - t138;
t2 = -(t305 + t308) * t158 - t17 * t162 + t82 * t93 + t83 * t92;
t304 = t2 * qJD(1);
t151 = t313 * t183;
t152 = t313 * t185;
t99 = -t186 * t151 + t188 * t152;
t192 = t93 * t315 - t83 * t164 / 0.2e1 + t99 * t158 / 0.2e1;
t203 = -t307 / 0.2e1 + t306 / 0.2e1;
t3 = t192 + t203;
t303 = t3 * qJD(1);
t98 = t188 * t151 + t186 * t152;
t193 = -t315 * t70 + t83 * t317 + t98 * t319;
t204 = -t308 / 0.2e1 - t305 / 0.2e1;
t4 = t193 + t204;
t302 = t4 * qJD(1);
t301 = t54 * t183;
t300 = t55 * t185;
t299 = t56 * t185;
t298 = t57 * t183;
t212 = -t183 * t55 - t185 * t54;
t7 = (t298 + t299) * t162 + t212 * t158;
t297 = t7 * qJD(1);
t8 = t119 * t323 + t54 * t56 + t55 * t57;
t296 = t8 * qJD(1);
t295 = t88 * t158;
t9 = t16 * t158 - t70 * t83;
t294 = t9 * qJD(1);
t293 = t92 * t158;
t292 = t93 * t162;
t290 = qJD(1) * t93;
t10 = -t17 * t158 + t83 * t93;
t289 = t10 * qJD(1);
t11 = (t54 + t287) * t162 + (t56 - t325) * t158;
t288 = t11 * qJD(1);
t284 = t119 * t162;
t12 = (-t55 + t286) * t162 + (-t57 - t324) * t158;
t283 = t12 * qJD(1);
t219 = -t181 / 0.2e1 - t182 / 0.2e1;
t190 = t219 * t174 * t158 + t162 * t179 / 0.2e1;
t201 = -t299 / 0.2e1 - t298 / 0.2e1;
t14 = t190 + t201;
t282 = t14 * qJD(1);
t15 = t284 + (-t300 + t301) * t158;
t281 = t15 * qJD(1);
t280 = t162 * t160;
t20 = t212 * t162;
t272 = t20 * qJD(1);
t24 = -t70 * t92 + t93 * t88;
t270 = t24 * qJD(1);
t26 = t229 * t314;
t269 = t26 * qJD(1);
t29 = t295 - t309;
t268 = t29 * qJD(1);
t30 = t295 + t309;
t267 = t30 * qJD(1);
t31 = t292 + t293;
t266 = t31 * qJD(1);
t32 = t292 - t293;
t265 = t32 * qJD(1);
t42 = -t158 * t323 + t284;
t264 = t42 * qJD(1);
t58 = (t316 - t322) * t158;
t263 = t58 * qJD(1);
t262 = t58 * qJD(2);
t59 = (t316 + t322) * t158;
t51 = t59 * qJD(1);
t261 = t59 * qJD(2);
t223 = t276 / 0.2e1;
t198 = -t273 / 0.2e1 + t223;
t60 = (t317 + t198) * t158;
t260 = t60 * qJD(1);
t61 = (t318 + t198) * t158;
t259 = t61 * qJD(1);
t220 = t273 / 0.2e1;
t224 = t158 * t318;
t62 = t158 * t220 + t276 * t319 + t224;
t258 = t62 * qJD(1);
t64 = t170 * t320;
t257 = t64 * qJD(1);
t256 = t280 * qJD(1);
t214 = t219 * t162;
t80 = t214 - t154;
t254 = t80 * qJD(1);
t81 = t110 * t183;
t253 = t81 * qJD(1);
t194 = t184 * t319 - t291 * t162 / 0.2e1;
t85 = (-t187 / 0.2e1 + t194) * pkin(2);
t252 = t85 * qJD(1);
t250 = qJD(1) * t162;
t249 = qJD(1) * t189;
t248 = qJD(2) * t185;
t247 = qJD(4) * t158;
t246 = qJD(5) * t158;
t245 = t103 * qJD(1);
t106 = t170 * t158;
t244 = t106 * qJD(1);
t107 = t110 * t185;
t243 = t107 * qJD(1);
t242 = t110 * qJD(1);
t241 = t154 * qJD(1);
t240 = t160 * qJD(2);
t153 = t160 * qJD(5);
t239 = t164 * qJD(2);
t238 = t164 * qJD(5);
t237 = t170 * qJD(2);
t173 = -t187 ^ 2 + t189 ^ 2;
t236 = t173 * qJD(1);
t235 = t187 * qJD(2);
t234 = t189 * qJD(2);
t233 = pkin(1) * t187 * qJD(1);
t232 = pkin(1) * t249;
t231 = t280 * t251;
t228 = t162 * t247;
t227 = t158 * t250;
t226 = t185 * t250;
t225 = t187 * t249;
t217 = -qJD(5) - t251;
t216 = qJD(2) * t167 + qJD(4);
t215 = t158 * t226;
t213 = -t166 / 0.2e1 + t278 / 0.2e1;
t211 = -t56 * t183 + t57 * t185;
t23 = t160 * t70 - t164 * t93;
t25 = t70 ^ 2 - t93 ^ 2;
t210 = t25 * qJD(1) + t23 * qJD(2);
t86 = t160 ^ 2 - t164 ^ 2;
t209 = t23 * qJD(1) + t86 * qJD(2);
t208 = -t158 * t179 - t162 * t174;
t125 = t170 * t174;
t202 = t301 / 0.2e1 - t300 / 0.2e1;
t18 = t202 + t213;
t207 = t18 * qJD(1) - t125 * qJD(2);
t206 = -t240 - t255;
t43 = t138 / 0.2e1 + (t223 - t273) * t162;
t205 = t43 * qJD(1) - t239;
t28 = -t316 * t70 + t93 * t318;
t200 = t28 * qJD(2) - t290 * t70;
t197 = -t28 * qJD(1) + t160 * t239;
t196 = t154 * qJD(5) + t227;
t150 = t154 * qJD(2);
t84 = t314 / 0.2e1 + t194 * pkin(2);
t79 = t214 + t154;
t63 = t158 * t198 + t224;
t53 = t58 * qJD(5);
t52 = t59 * qJD(5);
t46 = -t138 / 0.2e1 + (t220 + t198) * t162;
t41 = -t238 - t51;
t27 = t28 * qJD(5);
t21 = t23 * qJD(5);
t19 = -t202 + t213;
t13 = t190 - t201;
t6 = -t192 + t203;
t5 = -t193 + t204;
t22 = [0, 0, 0, t187 * t234, t173 * qJD(2), 0, 0, 0, -pkin(1) * t235, -pkin(1) * t234, t110 * qJD(3), t26 * qJD(2) + t42 * qJD(3), t11 * qJD(2) + t81 * qJD(3) - t185 * t228, t12 * qJD(2) + t107 * qJD(3) + t183 * t228, -t7 * qJD(2) + t64 * qJD(4), t8 * qJD(2) + t15 * qJD(3) + t20 * qJD(4), (qJD(2) * t92 - t321) * t93, t24 * qJD(2) + t25 * qJD(5), t31 * qJD(2) - t246 * t70, t29 * qJD(2) - t246 * t93, t158 * t162 * qJD(2), t1 * qJD(2) + t30 * qJD(3) + t10 * qJD(5) + t247 * t280, t2 * qJD(2) + t32 * qJD(3) + t9 * qJD(5) + t247 * t70; 0, 0, 0, t225, t236, t234, -t235, 0, -pkin(6) * t234 - t233, pkin(6) * t235 - t232, (t291 * t158 - t162 * t184) * t311, t269 + (-t119 * t184 - t291 * t323) * t311 + t84 * qJD(3), t288 + (t183 * t208 - t286) * qJD(2) - t100 * qJD(4), qJD(2) * t287 + t283 + (qJD(2) * t208 - t247) * t185, qJD(2) * t211 - t297, t296 + (t174 * t211 + t179 * t323) * qJD(2) + t13 * qJD(3) + t19 * qJD(4), t27 + (t239 + t290) * t92, t270 + (-t92 * t160 + t164 * t88) * qJD(2) + t21, t63 * qJD(5) + t162 * t239 + t266, -t162 * t240 + t268 - t53, t196, t310 + (t82 * t160 - t98 * t162 - t167 * t88) * qJD(2) - t59 * qJD(4) + t6 * qJD(5), t304 + (-t99 * t162 + t82 * t164 + t167 * t92) * qJD(2) - t62 * qJD(4) + t5 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t242, t84 * qJD(2) + t264, t253, t243, 0, t13 * qJD(2) + t79 * qJD(4) + t281, 0, 0, 0, 0, 0, -t53 + t267, -t61 * qJD(5) + t265; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t100 * qJD(2) - t215, (t183 * t250 - t248) * t158, t257, t19 * qJD(2) + t79 * qJD(3) + t272, 0, 0, 0, 0, 0, t46 * qJD(5) + t231 - t261, -t62 * qJD(2) + t230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t200, t210, t63 * qJD(2) + t217 * t70, t217 * t93 - t262, t150, t6 * qJD(2) - t58 * qJD(3) + t46 * qJD(4) - t17 * qJD(5) + t289, t5 * qJD(2) - t61 * qJD(3) + t16 * qJD(5) + t294; 0, 0, 0, -t225, -t236, 0, 0, 0, t233, t232, 0, t85 * qJD(3) - t269, -qJD(3) * t279 - t288, t103 * qJD(3) - t283, -t106 * qJD(3) + t297, t14 * qJD(3) - t18 * qJD(4) - t296, -t290 * t92 + t27, t21 - t270, -t60 * qJD(5) - t266, -t52 - t268, -t196, qJD(3) * t280 - t58 * qJD(4) - t3 * qJD(5) - t310, t70 * qJD(3) - t61 * qJD(4) - t4 * qJD(5) - t304; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t170 * qJD(4), t125 * qJD(4), -t160 * t238, t86 * qJD(5), 0, 0, 0, t167 * t238, -t167 * t153; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t252, -t226, t245, -t244, t282, 0, 0, 0, 0, 0, t256, t255; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t237, -t207, 0, 0, 0, 0, 0, -t263, -t259; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t197, t209, -t153 - t260, t41, -t241, -t99 * qJD(5) + t167 * t239 - t303, t98 * qJD(5) - t167 * t240 - t302; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t242, -t85 * qJD(2) - t264, t162 * t248 - t253, -t103 * qJD(2) - t243, t106 * qJD(2), -t14 * qJD(2) + t80 * qJD(4) - t281, 0, 0, 0, 0, 0, -qJD(2) * t280 - t267 - t52, -t70 * qJD(2) - t62 * qJD(5) - t265; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t252, t226, -t245, t244, -t282, 0, 0, 0, 0, 0, -t256, -t255; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t254, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t41, t153 - t258; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t215, -t183 * t227, -t257, t18 * qJD(2) - t80 * qJD(3) - t272, 0, 0, 0, 0, 0, -t43 * qJD(5) - t231 + t262, t61 * qJD(2) - t230 - t321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t237, t207, 0, 0, 0, 0, 0, t238 + t263, -t153 + t259; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t254, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t205, t206; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t200, -t210, t60 * qJD(2) + t230, t251 * t93 + t261, t150, t3 * qJD(2) + t59 * qJD(3) + t43 * qJD(4) - t289, t4 * qJD(2) + t62 * qJD(3) + qJD(4) * t70 - t294; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t197, -t209, t260, t51, t241, -t164 * t216 + t303, t160 * t216 + t302; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t51, t258; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t205, -t206; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t22;
