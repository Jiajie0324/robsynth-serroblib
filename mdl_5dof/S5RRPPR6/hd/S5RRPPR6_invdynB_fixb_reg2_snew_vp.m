% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:34
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPPR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR6_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR6_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPPR6_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:33:22
% EndTime: 2019-12-31 19:33:39
% DurationCPUTime: 15.29s
% Computational Cost: add. (77428->668), mult. (184489->1027), div. (0->0), fcn. (130306->10), ass. (0->467)
t747 = sin(pkin(9));
t748 = sin(pkin(8));
t750 = cos(pkin(8));
t755 = cos(qJ(2));
t793 = qJD(1) * t755;
t752 = sin(qJ(2));
t794 = qJD(1) * t752;
t706 = t748 * t793 + t750 * t794;
t749 = cos(pkin(9));
t677 = -t749 * qJD(2) + t747 * t706;
t680 = t747 * qJD(2) + t749 * t706;
t629 = t680 * t677;
t787 = qJD(1) * qJD(2);
t774 = t755 * t787;
t786 = t752 * qJDD(1);
t714 = t774 + t786;
t739 = t755 * qJDD(1);
t775 = t752 * t787;
t715 = t739 - t775;
t666 = t748 * t714 - t750 * t715;
t830 = -t629 + t666;
t838 = t747 * t830;
t704 = t748 * t794 - t750 * t793;
t665 = t706 * t704;
t829 = qJDD(2) - t665;
t837 = t748 * t829;
t836 = t749 * t830;
t835 = t750 * t829;
t751 = sin(qJ(5));
t754 = cos(qJ(5));
t616 = t754 * t677 + t751 * t680;
t618 = -t751 * t677 + t754 * t680;
t573 = t618 * t616;
t766 = qJDD(5) + t666;
t832 = -t573 + t766;
t834 = t751 * t832;
t833 = t754 * t832;
t699 = qJD(5) + t704;
t602 = t699 * t616;
t667 = t750 * t714 + t748 * t715;
t653 = t749 * qJDD(2) - t747 * t667;
t654 = t747 * qJDD(2) + t749 * t667;
t763 = t616 * qJD(5) - t751 * t653 - t754 * t654;
t831 = -t602 - t763;
t652 = t704 * t677;
t590 = -t652 - t654;
t591 = -t654 + t652;
t791 = qJD(2) * t706;
t632 = t666 + t791;
t771 = -t754 * t653 + t751 * t654;
t508 = (qJD(5) - t699) * t618 + t771;
t745 = t755 ^ 2;
t758 = qJD(1) ^ 2;
t764 = qJD(2) * pkin(2) - qJ(3) * t794;
t753 = sin(qJ(1));
t756 = cos(qJ(1));
t724 = t753 * g(1) - t756 * g(2);
t765 = qJDD(1) * pkin(1) + t724;
t630 = t715 * pkin(2) + (qJ(3) * t745 + pkin(6)) * t758 - t764 * t794 - qJDD(3) + t765;
t614 = t616 ^ 2;
t615 = t618 ^ 2;
t828 = t677 ^ 2;
t676 = t680 ^ 2;
t698 = t699 ^ 2;
t827 = t704 ^ 2;
t703 = t706 ^ 2;
t826 = 2 * qJD(3);
t825 = pkin(3) * t748;
t824 = t699 * t751;
t823 = t699 * t754;
t822 = t704 * t680;
t821 = t704 * t747;
t820 = t704 * t749;
t744 = t752 ^ 2;
t819 = t744 * t758;
t741 = t745 * t758;
t725 = t756 * g(1) + t753 * g(2);
t762 = -t758 * pkin(1) + qJDD(1) * pkin(6) - t725;
t689 = -t752 * g(3) + t755 * t762;
t624 = -pkin(2) * t741 + t715 * qJ(3) - qJD(2) * t764 + t689;
t760 = t752 * t762;
t801 = t752 * t758;
t759 = -t760 - t714 * qJ(3) + qJDD(2) * pkin(2) + (pkin(2) * t801 + qJ(3) * t787 - g(3)) * t755;
t556 = -0.2e1 * qJD(3) * t704 + t750 * t624 + t748 * t759;
t655 = t704 * pkin(3) - t706 * qJ(4);
t757 = qJD(2) ^ 2;
t524 = -t757 * pkin(3) + qJDD(2) * qJ(4) - t704 * t655 + t556;
t792 = qJD(2) * t704;
t770 = -t667 + t792;
t542 = pkin(3) * t632 + t770 * qJ(4) - t630;
t467 = 0.2e1 * qJD(4) * t680 + t747 * t524 - t749 * t542;
t435 = pkin(4) * t830 + pkin(7) * t590 - t467;
t468 = -0.2e1 * qJD(4) * t677 + t749 * t524 + t747 * t542;
t639 = t704 * pkin(4) - t680 * pkin(7);
t441 = -t828 * pkin(4) + t653 * pkin(7) - t704 * t639 + t468;
t389 = -t754 * t435 + t751 * t441;
t390 = t751 * t435 + t754 * t441;
t356 = -t754 * t389 + t751 * t390;
t818 = t747 * t356;
t772 = t748 * t624 - t750 * t759;
t523 = qJDD(4) - t757 * qJ(4) - qJDD(2) * pkin(3) + (t826 + t655) * t706 + t772;
t817 = t747 * t523;
t593 = t629 + t666;
t816 = t747 * t593;
t815 = t748 * t630;
t658 = qJDD(2) + t665;
t814 = t748 * t658;
t813 = t748 * t666;
t812 = t749 * t356;
t811 = t749 * t523;
t810 = t749 * t593;
t809 = t750 * t630;
t808 = t750 * t658;
t474 = -t653 * pkin(4) - t828 * pkin(7) + t680 * t639 + t523;
t807 = t751 * t474;
t546 = t573 + t766;
t806 = t751 * t546;
t555 = t706 * t826 + t772;
t484 = -t750 * t555 + t748 * t556;
t805 = t752 * t484;
t708 = t758 * pkin(6) + t765;
t804 = t752 * t708;
t733 = t755 * t801;
t722 = qJDD(2) + t733;
t803 = t752 * t722;
t723 = qJDD(2) - t733;
t802 = t752 * t723;
t800 = t754 * t474;
t799 = t754 * t546;
t798 = t755 * t484;
t797 = t755 * t708;
t796 = t755 * t723;
t795 = t744 + t745;
t790 = qJD(2) * t748;
t789 = qJD(2) * t750;
t785 = t753 * qJDD(1);
t784 = t756 * qJDD(1);
t783 = t756 * qJDD(2);
t782 = t748 * t573;
t781 = t748 * t629;
t780 = t750 * t573;
t779 = t750 * t629;
t778 = t753 * t665;
t777 = t756 * t665;
t776 = -pkin(3) * t750 - pkin(2);
t357 = t751 * t389 + t754 * t390;
t485 = t748 * t555 + t750 * t556;
t688 = t755 * g(3) + t760;
t627 = t752 * t688 + t755 * t689;
t681 = -t753 * t724 - t756 * t725;
t769 = t753 * t733;
t768 = t756 * t733;
t719 = -t753 * t758 + t784;
t767 = -pkin(5) * t719 - t753 * g(3);
t406 = -t749 * t467 + t747 * t468;
t407 = t747 * t467 + t749 * t468;
t626 = t755 * t688 - t752 * t689;
t679 = t756 * t724 - t753 * t725;
t586 = -t653 - t822;
t634 = -t666 + t791;
t738 = t753 * qJDD(2);
t732 = -t741 - t757;
t731 = t741 - t757;
t730 = -t757 - t819;
t729 = t757 - t819;
t721 = t741 - t819;
t720 = t741 + t819;
t718 = t756 * t758 + t785;
t717 = t795 * qJDD(1);
t716 = t739 - 0.2e1 * t775;
t713 = 0.2e1 * t774 + t786;
t711 = t755 * t722;
t710 = t795 * t787;
t700 = -pkin(5) * t718 + t756 * g(3);
t694 = -t703 - t757;
t693 = -t703 + t757;
t692 = t827 - t757;
t691 = t755 * t714 - t744 * t787;
t690 = -t752 * t715 - t745 * t787;
t687 = -t752 * t730 - t796;
t686 = -t752 * t729 + t711;
t685 = t755 * t732 - t803;
t684 = t755 * t731 - t802;
t683 = t755 * t730 - t802;
t682 = t752 * t732 + t711;
t673 = t756 * t717 - t753 * t720;
t672 = t753 * t717 + t756 * t720;
t668 = -t752 * t713 + t755 * t716;
t662 = -t703 + t827;
t661 = t750 * t666;
t656 = -t827 - t757;
t650 = (-t704 * t750 + t706 * t748) * qJD(2);
t649 = (-t704 * t748 - t706 * t750) * qJD(2);
t648 = t756 * t687 + t753 * t713;
t647 = t756 * t685 - t753 * t716;
t646 = t753 * t687 - t756 * t713;
t645 = t753 * t685 + t756 * t716;
t644 = -t676 + t827;
t643 = -t827 + t828;
t641 = -pkin(6) * t683 - t797;
t640 = -pkin(6) * t682 - t804;
t638 = -pkin(1) * t683 + t689;
t637 = -pkin(1) * t682 + t688;
t636 = -t667 - t792;
t631 = -t827 - t703;
t628 = -t676 + t828;
t623 = t750 * t667 - t706 * t790;
t622 = t748 * t667 + t706 * t789;
t621 = t704 * t789 + t813;
t620 = t704 * t790 - t661;
t611 = -t676 - t827;
t610 = -t748 * t694 - t808;
t609 = -t748 * t693 + t835;
t608 = t750 * t692 - t814;
t607 = t750 * t694 - t814;
t606 = t750 * t693 + t837;
t605 = t748 * t692 + t808;
t604 = -t827 - t828;
t601 = t756 * t627 - t753 * t708;
t600 = t753 * t627 + t756 * t708;
t599 = -t615 + t698;
t598 = t614 - t698;
t597 = t676 + t828;
t596 = t750 * t656 - t837;
t595 = t748 * t656 + t835;
t587 = t653 - t822;
t585 = t749 * t654 - t680 * t821;
t584 = -t749 * t653 - t677 * t821;
t583 = -t747 * t654 - t680 * t820;
t582 = -t747 * t653 + t677 * t820;
t581 = (t677 * t747 + t680 * t749) * t704;
t580 = (-t677 * t749 + t680 * t747) * t704;
t579 = -t752 * t649 + t755 * t650;
t578 = -t615 - t698;
t577 = t750 * t634 - t748 * t636;
t576 = -t750 * t632 + t748 * t770;
t575 = t748 * t634 + t750 * t636;
t574 = -t748 * t632 - t750 * t770;
t572 = -t615 + t614;
t571 = -qJ(3) * t607 - t809;
t570 = -t752 * t622 + t755 * t623;
t569 = -t752 * t620 + t755 * t621;
t568 = t750 * t580 + t813;
t567 = t748 * t580 - t661;
t566 = -t752 * t607 + t755 * t610;
t565 = -t752 * t606 + t755 * t609;
t564 = -t752 * t605 + t755 * t608;
t563 = t755 * t607 + t752 * t610;
t562 = -t749 * t644 - t838;
t561 = t749 * t643 - t816;
t560 = -t747 * t643 - t810;
t559 = -t747 * t644 + t836;
t558 = -qJ(3) * t595 - t815;
t557 = -t698 - t614;
t553 = t750 * t585 + t781;
t552 = t750 * t582 - t781;
t551 = t748 * t585 - t779;
t550 = t748 * t582 + t779;
t548 = -t618 * qJD(5) - t771;
t544 = -t747 * t611 - t810;
t543 = t749 * t611 - t816;
t539 = (-t616 * t754 + t618 * t751) * t699;
t538 = (-t616 * t751 - t618 * t754) * t699;
t537 = t749 * t604 - t838;
t536 = t747 * t604 + t836;
t535 = -t752 * t595 + t755 * t596;
t534 = t755 * t595 + t752 * t596;
t533 = pkin(2) * t770 + qJ(3) * t610 - t815;
t532 = -t747 * t587 + t591 * t749;
t531 = -t586 * t749 - t747 * t590;
t530 = t749 * t587 + t591 * t747;
t529 = -t586 * t747 + t749 * t590;
t528 = -t614 - t615;
t527 = -pkin(2) * t632 + qJ(3) * t596 + t809;
t526 = t756 * t566 - t753 * t770;
t525 = t753 * t566 + t756 * t770;
t521 = t756 * t535 + t753 * t632;
t520 = -t752 * t575 + t755 * t577;
t519 = -t752 * t574 + t755 * t576;
t518 = t753 * t535 - t756 * t632;
t517 = t755 * t575 + t752 * t577;
t516 = t750 * t561 - t748 * t586;
t515 = t750 * t559 - t748 * t590;
t514 = t748 * t561 + t750 * t586;
t513 = t748 * t559 + t750 * t590;
t512 = -t602 + t763;
t507 = (qJD(5) + t699) * t618 + t771;
t506 = -t618 * t824 - t754 * t763;
t505 = t618 * t823 - t751 * t763;
t504 = -t751 * t548 + t616 * t823;
t503 = t754 * t548 + t616 * t824;
t502 = t754 * t598 - t806;
t501 = -t751 * t599 + t833;
t500 = t751 * t598 + t799;
t499 = t754 * t599 + t834;
t498 = t750 * t530 - t748 * t628;
t497 = t748 * t530 + t750 * t628;
t496 = t750 * t544 - t748 * t591;
t495 = t748 * t544 + t750 * t591;
t494 = t750 * t537 - t748 * t587;
t493 = t748 * t537 + t750 * t587;
t492 = -t751 * t578 - t799;
t491 = t754 * t578 - t806;
t490 = t750 * t531 - t748 * t597;
t489 = t748 * t531 + t750 * t597;
t488 = -t752 * t567 + t755 * t568;
t487 = t756 * t520 + t753 * t631;
t486 = t753 * t520 - t756 * t631;
t483 = t754 * t557 - t834;
t482 = t751 * t557 + t833;
t481 = -t752 * t551 + t755 * t553;
t480 = -t752 * t550 + t755 * t552;
t479 = -t747 * t538 + t749 * t539;
t478 = -t749 * t538 - t747 * t539;
t477 = -pkin(1) * t517 - pkin(2) * t575;
t476 = -pkin(1) * t563 - pkin(2) * t607 + t556;
t475 = pkin(2) * t630 + qJ(3) * t485;
t473 = -qJ(4) * t543 + t811;
t472 = -qJ(4) * t536 + t817;
t471 = t750 * t479 + t748 * t766;
t470 = t748 * t479 - t750 * t766;
t469 = -pkin(1) * t534 - pkin(2) * t595 + t555;
t466 = -qJ(3) * t575 - t484;
t465 = -pkin(6) * t563 - t752 * t533 + t755 * t571;
t464 = -pkin(2) * t631 + qJ(3) * t577 + t485;
t463 = -t752 * t514 + t755 * t516;
t462 = -t752 * t513 + t755 * t515;
t461 = -t508 * t754 - t751 * t512;
t460 = -t754 * t507 - t751 * t831;
t459 = -t508 * t751 + t754 * t512;
t458 = -t751 * t507 + t754 * t831;
t457 = -t747 * t505 + t749 * t506;
t456 = -t749 * t505 - t747 * t506;
t455 = -t747 * t503 + t749 * t504;
t454 = -t749 * t503 - t747 * t504;
t453 = -t752 * t497 + t755 * t498;
t452 = -t747 * t500 + t749 * t502;
t451 = -t747 * t499 + t749 * t501;
t450 = -t749 * t500 - t747 * t502;
t449 = -t749 * t499 - t747 * t501;
t448 = -t752 * t495 + t755 * t496;
t447 = t755 * t495 + t752 * t496;
t446 = -pkin(6) * t534 - t752 * t527 + t755 * t558;
t445 = -t752 * t493 + t755 * t494;
t444 = t755 * t493 + t752 * t494;
t443 = -t747 * t491 + t749 * t492;
t442 = t749 * t491 + t747 * t492;
t439 = -t752 * t489 + t755 * t490;
t438 = t755 * t489 + t752 * t490;
t437 = -pkin(3) * t543 + t468;
t436 = -pkin(3) * t536 + t467;
t432 = t755 * t485 - t805;
t431 = t752 * t485 + t798;
t430 = -t747 * t482 + t749 * t483;
t429 = t749 * t482 + t747 * t483;
t428 = -pkin(7) * t491 + t800;
t427 = t750 * t457 + t782;
t426 = t750 * t455 - t782;
t425 = t748 * t457 - t780;
t424 = t748 * t455 + t780;
t423 = t756 * t432 - t753 * t630;
t422 = t753 * t432 + t756 * t630;
t421 = -pkin(7) * t482 + t807;
t420 = t756 * t448 + t753 * t543;
t419 = t753 * t448 - t756 * t543;
t418 = t756 * t445 + t753 * t536;
t417 = t753 * t445 - t756 * t536;
t416 = t756 * t439 + t753 * t529;
t415 = t753 * t439 - t756 * t529;
t414 = t750 * t452 - t748 * t508;
t413 = t750 * t451 - t748 * t512;
t412 = t748 * t452 + t750 * t508;
t411 = t748 * t451 + t750 * t512;
t410 = -t752 * t470 + t755 * t471;
t409 = t750 * t443 + t748 * t831;
t408 = t748 * t443 - t750 * t831;
t405 = -pkin(4) * t831 + pkin(7) * t492 + t807;
t404 = t750 * t430 + t748 * t507;
t403 = t748 * t430 - t750 * t507;
t402 = -pkin(1) * t431 - pkin(2) * t484;
t401 = -pkin(4) * t507 + pkin(7) * t483 - t800;
t400 = -t747 * t459 + t749 * t461;
t399 = -t747 * t458 + t749 * t460;
t398 = -t749 * t458 - t747 * t460;
t397 = t749 * t459 + t747 * t461;
t396 = -qJ(4) * t529 - t406;
t395 = t750 * t407 + t748 * t523;
t394 = t748 * t407 - t750 * t523;
t393 = t750 * t399 - t748 * t572;
t392 = t748 * t399 + t750 * t572;
t391 = -pkin(6) * t517 - t752 * t464 + t755 * t466;
t387 = t750 * t400 + t748 * t528;
t386 = t748 * t400 - t750 * t528;
t385 = -qJ(3) * t495 - t748 * t437 + t750 * t473;
t384 = -qJ(3) * t493 - t748 * t436 + t750 * t472;
t383 = -pkin(1) * t447 - pkin(2) * t495 - pkin(3) * t591 - qJ(4) * t544 - t817;
t382 = -pkin(6) * t431 - qJ(3) * t798 - t752 * t475;
t381 = -t752 * t425 + t755 * t427;
t380 = -t752 * t424 + t755 * t426;
t379 = -pkin(1) * t444 - pkin(2) * t493 - pkin(3) * t587 - qJ(4) * t537 + t811;
t378 = -pkin(2) * t543 + qJ(3) * t496 + t750 * t437 + t748 * t473;
t377 = -pkin(2) * t536 + qJ(3) * t494 + t750 * t436 + t748 * t472;
t376 = -pkin(3) * t397 - pkin(4) * t459;
t375 = -qJ(3) * t489 + t750 * t396 + t529 * t825;
t374 = -t752 * t412 + t755 * t414;
t373 = -t752 * t411 + t755 * t413;
t372 = -t752 * t408 + t755 * t409;
t371 = t755 * t408 + t752 * t409;
t370 = qJ(3) * t490 + t748 * t396 + t776 * t529;
t369 = -t752 * t403 + t755 * t404;
t368 = t755 * t403 + t752 * t404;
t367 = -pkin(1) * t438 - pkin(2) * t489 - pkin(3) * t597 - qJ(4) * t531 - t407;
t366 = -pkin(3) * t442 - pkin(4) * t491 + t390;
t365 = -qJ(4) * t442 - t747 * t405 + t749 * t428;
t364 = -pkin(3) * t429 - pkin(4) * t482 + t389;
t363 = -t752 * t394 + t755 * t395;
t362 = t755 * t394 + t752 * t395;
t361 = t756 * t372 + t753 * t442;
t360 = t753 * t372 - t756 * t442;
t359 = -qJ(4) * t429 - t747 * t401 + t749 * t421;
t358 = -t752 * t392 + t755 * t393;
t355 = -t752 * t386 + t755 * t387;
t354 = t755 * t386 + t752 * t387;
t353 = t756 * t369 + t753 * t429;
t352 = t753 * t369 - t756 * t429;
t351 = -pkin(4) * t474 + pkin(7) * t357;
t350 = -qJ(3) * t394 + (-qJ(4) * t750 + t825) * t406;
t349 = -pkin(7) * t459 - t356;
t348 = t756 * t363 + t753 * t406;
t347 = t753 * t363 - t756 * t406;
t346 = -pkin(4) * t528 + pkin(7) * t461 + t357;
t345 = -pkin(6) * t447 - t752 * t378 + t755 * t385;
t344 = -pkin(6) * t444 - t752 * t377 + t755 * t384;
t343 = t756 * t355 + t753 * t397;
t342 = t753 * t355 - t756 * t397;
t341 = qJ(3) * t395 + (-qJ(4) * t748 + t776) * t406;
t340 = -pkin(6) * t438 - t752 * t370 + t755 * t375;
t339 = -pkin(1) * t362 - pkin(2) * t394 + pkin(3) * t523 - qJ(4) * t407;
t338 = t749 * t357 - t818;
t337 = t747 * t357 + t812;
t336 = -pkin(1) * t371 - pkin(2) * t408 + pkin(3) * t831 - qJ(4) * t443 - t749 * t405 - t747 * t428;
t335 = -qJ(3) * t408 + t750 * t365 - t748 * t366;
t334 = t750 * t338 + t748 * t474;
t333 = t748 * t338 - t750 * t474;
t332 = -pkin(1) * t368 - pkin(2) * t403 + pkin(3) * t507 - qJ(4) * t430 - t749 * t401 - t747 * t421;
t331 = -qJ(3) * t403 + t750 * t359 - t748 * t364;
t330 = -pkin(2) * t442 + qJ(3) * t409 + t748 * t365 + t750 * t366;
t329 = -pkin(2) * t429 + qJ(3) * t404 + t748 * t359 + t750 * t364;
t328 = -qJ(4) * t397 - t747 * t346 + t749 * t349;
t327 = -pkin(3) * t337 - pkin(4) * t356;
t326 = -pkin(6) * t362 - t752 * t341 + t755 * t350;
t325 = -qJ(3) * t386 + t750 * t328 - t748 * t376;
t324 = -pkin(7) * t812 - qJ(4) * t337 - t747 * t351;
t323 = -t752 * t333 + t755 * t334;
t322 = t755 * t333 + t752 * t334;
t321 = -pkin(2) * t397 + qJ(3) * t387 + t748 * t328 + t750 * t376;
t320 = -pkin(1) * t354 - pkin(2) * t386 + pkin(3) * t528 - qJ(4) * t400 - t749 * t346 - t747 * t349;
t319 = -pkin(6) * t371 - t752 * t330 + t755 * t335;
t318 = -pkin(6) * t368 - t752 * t329 + t755 * t331;
t317 = t756 * t323 + t753 * t337;
t316 = t753 * t323 - t756 * t337;
t315 = -qJ(3) * t333 + t750 * t324 - t748 * t327;
t314 = -pkin(6) * t354 - t752 * t321 + t755 * t325;
t313 = -pkin(1) * t322 - pkin(2) * t333 + pkin(3) * t474 + pkin(7) * t818 - qJ(4) * t338 - t749 * t351;
t312 = -pkin(2) * t337 + qJ(3) * t334 + t748 * t324 + t750 * t327;
t311 = -pkin(6) * t322 - t752 * t312 + t755 * t315;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t718, -t719, 0, t681, 0, 0, 0, 0, 0, 0, t647, t648, t673, t601, 0, 0, 0, 0, 0, 0, t521, t526, t487, t423, 0, 0, 0, 0, 0, 0, t418, t420, t416, t348, 0, 0, 0, 0, 0, 0, t353, t361, t343, t317; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t719, -t718, 0, t679, 0, 0, 0, 0, 0, 0, t645, t646, t672, t600, 0, 0, 0, 0, 0, 0, t518, t525, t486, t422, 0, 0, 0, 0, 0, 0, t417, t419, t415, t347, 0, 0, 0, 0, 0, 0, t352, t360, t342, t316; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t682, t683, 0, -t626, 0, 0, 0, 0, 0, 0, t534, t563, t517, t431, 0, 0, 0, 0, 0, 0, t444, t447, t438, t362, 0, 0, 0, 0, 0, 0, t368, t371, t354, t322; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t719, 0, -t718, 0, t767, -t700, -t679, -pkin(5) * t679, t756 * t691 - t769, t756 * t668 - t753 * t721, t756 * t686 + t752 * t785, t756 * t690 + t769, t756 * t684 + t753 * t739, t756 * t710 + t738, -pkin(5) * t645 - t753 * t637 + t756 * t640, -pkin(5) * t646 - t753 * t638 + t756 * t641, -pkin(5) * t672 + t756 * t626, -pkin(5) * t600 - (pkin(1) * t753 - pkin(6) * t756) * t626, t756 * t570 + t778, t756 * t519 - t753 * t662, t756 * t565 - t753 * t636, t756 * t569 - t778, t756 * t564 + t634 * t753, t756 * t579 + t738, -pkin(5) * t518 + t756 * t446 - t753 * t469, -pkin(5) * t525 + t756 * t465 - t753 * t476, -pkin(5) * t486 + t756 * t391 - t753 * t477, -pkin(5) * t422 + t756 * t382 - t753 * t402, t756 * t481 - t753 * t583, t756 * t453 - t753 * t532, t756 * t462 - t753 * t562, t756 * t480 - t753 * t584, t756 * t463 - t753 * t560, t756 * t488 - t753 * t581, -pkin(5) * t417 + t756 * t344 - t753 * t379, -pkin(5) * t419 + t756 * t345 - t753 * t383, -pkin(5) * t415 + t756 * t340 - t753 * t367, -pkin(5) * t347 + t756 * t326 - t753 * t339, t756 * t381 - t753 * t456, t756 * t358 - t753 * t398, t756 * t373 - t753 * t449, t756 * t380 - t753 * t454, t756 * t374 - t753 * t450, t756 * t410 - t753 * t478, -pkin(5) * t352 + t756 * t318 - t753 * t332, -pkin(5) * t360 + t756 * t319 - t753 * t336, -pkin(5) * t342 + t756 * t314 - t753 * t320, -pkin(5) * t316 + t756 * t311 - t753 * t313; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t718, 0, t719, 0, t700, t767, t681, pkin(5) * t681, t753 * t691 + t768, t753 * t668 + t756 * t721, t753 * t686 - t752 * t784, t753 * t690 - t768, t753 * t684 - t755 * t784, t753 * t710 - t783, pkin(5) * t647 + t756 * t637 + t753 * t640, pkin(5) * t648 + t756 * t638 + t753 * t641, pkin(5) * t673 + t753 * t626, pkin(5) * t601 - (-pkin(1) * t756 - pkin(6) * t753) * t626, t753 * t570 - t777, t753 * t519 + t756 * t662, t753 * t565 + t756 * t636, t753 * t569 + t777, t753 * t564 - t634 * t756, t753 * t579 - t783, pkin(5) * t521 + t753 * t446 + t756 * t469, pkin(5) * t526 + t753 * t465 + t756 * t476, pkin(5) * t487 + t753 * t391 + t756 * t477, pkin(5) * t423 + t753 * t382 + t756 * t402, t753 * t481 + t756 * t583, t753 * t453 + t756 * t532, t753 * t462 + t756 * t562, t753 * t480 + t756 * t584, t753 * t463 + t756 * t560, t753 * t488 + t756 * t581, pkin(5) * t418 + t753 * t344 + t756 * t379, pkin(5) * t420 + t753 * t345 + t756 * t383, pkin(5) * t416 + t753 * t340 + t756 * t367, pkin(5) * t348 + t753 * t326 + t756 * t339, t753 * t381 + t756 * t456, t753 * t358 + t756 * t398, t753 * t373 + t756 * t449, t753 * t380 + t756 * t454, t753 * t374 + t756 * t450, t753 * t410 + t756 * t478, pkin(5) * t353 + t753 * t318 + t756 * t332, pkin(5) * t361 + t753 * t319 + t756 * t336, pkin(5) * t343 + t753 * t314 + t756 * t320, pkin(5) * t317 + t753 * t311 + t756 * t313; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t724, t725, 0, 0, (t714 + t774) * t752, t755 * t713 + t752 * t716, t755 * t729 + t803, (t715 - t775) * t755, t752 * t731 + t796, 0, pkin(1) * t716 + pkin(6) * t685 + t797, -pkin(1) * t713 + pkin(6) * t687 - t804, pkin(1) * t720 + pkin(6) * t717 + t627, pkin(1) * t708 + pkin(6) * t627, t755 * t622 + t752 * t623, t755 * t574 + t752 * t576, t755 * t606 + t752 * t609, t755 * t620 + t752 * t621, t755 * t605 + t752 * t608, t755 * t649 + t752 * t650, -pkin(1) * t632 + pkin(6) * t535 + t755 * t527 + t752 * t558, pkin(1) * t770 + pkin(6) * t566 + t755 * t533 + t752 * t571, -pkin(1) * t631 + pkin(6) * t520 + t755 * t464 + t752 * t466, pkin(1) * t630 + pkin(6) * t432 - qJ(3) * t805 + t755 * t475, t755 * t551 + t752 * t553, t755 * t497 + t752 * t498, t755 * t513 + t752 * t515, t755 * t550 + t752 * t552, t755 * t514 + t752 * t516, t755 * t567 + t752 * t568, -pkin(1) * t536 + pkin(6) * t445 + t755 * t377 + t752 * t384, -pkin(1) * t543 + pkin(6) * t448 + t755 * t378 + t752 * t385, -pkin(1) * t529 + pkin(6) * t439 + t755 * t370 + t752 * t375, -pkin(1) * t406 + pkin(6) * t363 + t755 * t341 + t752 * t350, t755 * t425 + t752 * t427, t755 * t392 + t752 * t393, t755 * t411 + t752 * t413, t755 * t424 + t752 * t426, t755 * t412 + t752 * t414, t755 * t470 + t752 * t471, -pkin(1) * t429 + pkin(6) * t369 + t755 * t329 + t752 * t331, -pkin(1) * t442 + pkin(6) * t372 + t755 * t330 + t752 * t335, -pkin(1) * t397 + pkin(6) * t355 + t755 * t321 + t752 * t325, -pkin(1) * t337 + pkin(6) * t323 + t755 * t312 + t752 * t315;];
tauB_reg = t1;
