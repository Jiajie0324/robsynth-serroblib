% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRRPP1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:50
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRRPP1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPP1_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPP1_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPP1_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPP1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRPP1_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:50:19
% EndTime: 2019-12-31 20:50:36
% DurationCPUTime: 18.15s
% Computational Cost: add. (55630->568), mult. (76084->689), div. (0->0), fcn. (47816->8), ass. (0->396)
t1273 = sin(qJ(1));
t1276 = cos(qJ(1));
t1268 = sin(pkin(8));
t1269 = cos(pkin(8));
t1274 = cos(qJ(3));
t1339 = qJD(1) + qJD(2);
t1321 = t1274 * t1339;
t1271 = sin(qJ(3));
t1324 = t1271 * t1339;
t1217 = t1268 * t1321 + t1269 * t1324;
t1214 = t1217 ^ 2;
t1277 = qJD(3) ^ 2;
t1144 = t1277 + t1214;
t1215 = t1268 * t1324 - t1269 * t1321;
t1345 = t1217 * t1215;
t1384 = qJDD(3) + t1345;
t1350 = t1384 * t1268;
t1058 = t1144 * t1269 + t1350;
t1349 = t1384 * t1269;
t1083 = t1144 * t1268 - t1349;
t1022 = t1058 * t1271 + t1083 * t1274;
t1272 = sin(qJ(2));
t1275 = cos(qJ(2));
t1255 = qJD(3) * t1321;
t1334 = qJDD(1) + qJDD(2);
t1311 = t1271 * t1334;
t1227 = t1311 + t1255;
t1299 = qJD(3) * t1324;
t1309 = t1274 * t1334;
t1282 = t1309 - t1299;
t1166 = t1269 * t1227 + t1268 * t1282;
t1365 = qJD(3) * t1215;
t1388 = -t1365 + t1166;
t978 = t1022 * t1272 - t1275 * t1388;
t984 = t1022 * t1275 + t1272 * t1388;
t1484 = pkin(5) * (t1273 * t978 - t1276 * t984);
t1483 = pkin(5) * (t1273 * t984 + t1276 * t978);
t1482 = pkin(1) * t978;
t1481 = pkin(6) * t978;
t993 = t1058 * t1274 - t1083 * t1271;
t1480 = -pkin(1) * t993 - pkin(6) * t984;
t1377 = t1215 ^ 2;
t1152 = t1377 - t1214;
t1165 = t1227 * t1268 - t1269 * t1282;
t1207 = qJD(3) * t1217;
t1108 = t1165 + t1207;
t1039 = -t1108 * t1268 + t1269 * t1388;
t1352 = t1388 * t1268;
t1356 = t1108 * t1269;
t1041 = t1352 + t1356;
t957 = t1039 * t1271 + t1041 * t1274;
t940 = -t1152 * t1275 + t1272 * t957;
t942 = t1152 * t1272 + t1275 * t957;
t1479 = t1273 * t942 + t1276 * t940;
t1478 = t1273 * t940 - t1276 * t942;
t1195 = t1377 - t1277;
t1072 = t1195 * t1268 + t1349;
t1078 = t1195 * t1269 - t1350;
t1018 = t1072 * t1271 - t1078 * t1274;
t1109 = t1165 - t1207;
t974 = t1018 * t1272 - t1109 * t1275;
t980 = t1018 * t1275 + t1109 * t1272;
t1477 = t1273 * t980 + t1276 * t974;
t1476 = t1273 * t974 - t1276 * t980;
t1472 = pkin(2) * t993;
t1471 = pkin(7) * t993;
t1470 = -pkin(2) * t1388 + pkin(7) * t1022;
t1106 = -t1377 - t1214;
t1387 = t1365 + t1166;
t1411 = -t1109 * t1269 + t1387 * t1268;
t1412 = -t1109 * t1268 - t1269 * t1387;
t1429 = -t1271 * t1412 + t1274 * t1411;
t1448 = -t1106 * t1275 + t1272 * t1429;
t1469 = pkin(1) * t1448;
t1468 = pkin(6) * t1448;
t1428 = t1271 * t1411 + t1274 * t1412;
t1446 = t1106 * t1272 + t1275 * t1429;
t1467 = -pkin(1) * t1428 + pkin(6) * t1446;
t1310 = t1272 * t1334;
t1333 = t1339 ^ 2;
t1234 = -t1275 * t1333 - t1310;
t1308 = t1275 * t1334;
t1236 = t1272 * t1333 - t1308;
t1170 = t1234 * t1273 - t1236 * t1276;
t1210 = pkin(6) * t1234 + g(3) * t1275;
t1435 = pkin(6) * t1236 - g(3) * t1272;
t1466 = -pkin(5) * t1170 - t1210 * t1273 + t1276 * t1435;
t1196 = t1214 - t1277;
t1385 = qJDD(3) - t1345;
t1348 = t1385 * t1268;
t1415 = -t1269 * t1196 + t1348;
t1131 = t1269 * t1385;
t1416 = t1196 * t1268 + t1131;
t1426 = -t1271 * t1415 + t1274 * t1416;
t1447 = t1272 * t1387 + t1275 * t1426;
t1449 = t1272 * t1426 - t1275 * t1387;
t1465 = -t1273 * t1449 + t1276 * t1447;
t1464 = t1273 * t1447 + t1276 * t1449;
t1430 = t1234 * t1276 + t1236 * t1273;
t1463 = pkin(5) * t1430 + t1210 * t1276 + t1273 * t1435;
t1462 = pkin(5) * (-t1273 * t1448 + t1276 * t1446);
t1461 = pkin(5) * (t1273 * t1446 + t1276 * t1448);
t1386 = -t1377 - t1277;
t1396 = t1269 * t1386 - t1348;
t1398 = t1268 * t1386 + t1131;
t1410 = -t1271 * t1398 + t1274 * t1396;
t1432 = -t1275 * t1108 + t1272 * t1410;
t1459 = pkin(1) * t1432;
t1458 = pkin(2) * t1428;
t1457 = pkin(3) * t1058;
t1456 = pkin(6) * t1432;
t1455 = pkin(7) * t1428;
t1454 = qJ(4) * t1058;
t1453 = qJ(4) * t1083;
t1409 = t1271 * t1396 + t1274 * t1398;
t1431 = t1108 * t1272 + t1275 * t1410;
t1451 = -pkin(1) * t1409 + pkin(6) * t1431;
t1450 = -pkin(2) * t1106 + pkin(7) * t1429;
t953 = -t1039 * t1274 + t1041 * t1271;
t1011 = t1072 * t1274 + t1078 * t1271;
t1444 = pkin(5) * (-t1273 * t1432 + t1276 * t1431);
t1443 = pkin(5) * (t1273 * t1431 + t1276 * t1432);
t1374 = pkin(3) * t1412;
t1440 = pkin(7) * t1409;
t1439 = qJ(4) * t1412;
t1423 = pkin(3) * t1398;
t1436 = -pkin(2) * t1409 - t1423;
t1434 = -pkin(2) * t1108 + pkin(7) * t1410;
t1433 = -pkin(3) * t1106 + qJ(4) * t1411;
t1427 = t1271 * t1416 + t1274 * t1415;
t1422 = qJ(4) * t1396;
t1421 = qJ(4) * t1398;
t1253 = g(1) * t1276 + g(2) * t1273;
t1278 = qJD(1) ^ 2;
t1240 = -pkin(1) * t1278 - t1253;
t1252 = g(1) * t1273 - t1276 * g(2);
t1291 = qJDD(1) * pkin(1) + t1252;
t1174 = t1272 * t1240 - t1275 * t1291;
t1175 = t1275 * t1240 + t1272 * t1291;
t1316 = t1174 * t1272 + t1275 * t1175;
t1088 = t1174 * t1275 - t1175 * t1272;
t1359 = t1088 * t1273;
t1414 = t1276 * t1316 + t1359;
t1358 = t1088 * t1276;
t1413 = -t1273 * t1316 + t1358;
t1331 = t1272 * t1345;
t1332 = t1269 * t1365;
t1288 = t1165 * t1268 + t1332;
t1346 = t1215 * t1268;
t1298 = qJD(3) * t1346 - t1269 * t1165;
t1381 = -t1271 * t1298 + t1274 * t1288;
t1393 = t1275 * t1381 - t1331;
t1330 = t1275 * t1345;
t1395 = t1272 * t1381 + t1330;
t1408 = -t1273 * t1395 + t1276 * t1393;
t1407 = t1273 * t1393 + t1276 * t1395;
t1335 = qJDD(3) * t1275;
t1344 = t1217 * t1269;
t1286 = (-t1344 - t1346) * qJD(3);
t1194 = t1268 * t1207;
t1297 = t1194 - t1332;
t1382 = -t1271 * t1286 + t1274 * t1297;
t1394 = t1272 * t1382 - t1335;
t1260 = t1272 * qJDD(3);
t1397 = t1275 * t1382 + t1260;
t1406 = t1273 * t1397 + t1276 * t1394;
t1405 = -t1273 * t1394 + t1276 * t1397;
t1403 = qJ(5) * t1388;
t1159 = -t1333 * pkin(2) + t1334 * pkin(7) + t1175;
t1340 = t1271 * t1159;
t1127 = t1274 * g(3) + t1340;
t1128 = -t1271 * g(3) + t1274 * t1159;
t1056 = t1271 * t1127 + t1274 * t1128;
t1390 = -pkin(4) * t1385 - qJ(5) * t1386;
t1364 = qJD(4) * t1215;
t1202 = -0.2e1 * t1364;
t1362 = qJD(5) * qJD(3);
t1389 = t1202 + 0.2e1 * t1362;
t1383 = t1271 * t1297 + t1274 * t1286;
t1380 = t1271 * t1288 + t1274 * t1298;
t1094 = qJD(3) * t1344 + t1166 * t1268;
t1095 = t1166 * t1269 - t1194;
t1036 = -t1094 * t1271 + t1095 * t1274;
t1295 = t1275 * t1036 + t1331;
t1296 = t1272 * t1036 - t1330;
t1379 = -t1273 * t1296 + t1276 * t1295;
t1378 = t1273 * t1295 + t1276 * t1296;
t1376 = t1274 ^ 2;
t1323 = t1271 * t1333;
t1064 = qJDD(3) * pkin(3) - t1227 * qJ(4) - t1340 + (t1339 * qJD(3) * qJ(4) + pkin(3) * t1323 - g(3)) * t1274;
t1241 = qJD(3) * pkin(3) - qJ(4) * t1324;
t1257 = t1376 * t1333;
t1065 = -pkin(3) * t1257 + qJ(4) * t1282 - qJD(3) * t1241 + t1128;
t1317 = -t1269 * t1064 + t1268 * t1065;
t1363 = qJD(4) * t1217;
t988 = t1317 + 0.2e1 * t1363;
t1338 = t1268 * t1064 + t1269 * t1065;
t989 = t1202 + t1338;
t930 = t1268 * t989 - t1269 * t988;
t1375 = pkin(3) * t930;
t1371 = pkin(4) * t1269;
t1138 = pkin(4) * t1215 - qJ(5) * t1217;
t1294 = -t1277 * pkin(4) + qJDD(3) * qJ(5) - t1215 * t1138 + t1338;
t948 = t1294 + t1389;
t1285 = -qJDD(3) * pkin(4) - t1277 * qJ(5) + qJDD(5) + t1317;
t950 = (0.2e1 * qJD(4) + t1138) * t1217 + t1285;
t1368 = -pkin(4) * t950 + qJ(5) * t948;
t1367 = t1271 * t930;
t1366 = t1274 * t930;
t1158 = -t1334 * pkin(2) - t1333 * pkin(7) + t1174;
t1067 = -t1282 * pkin(3) - qJ(4) * t1257 + t1241 * t1324 + qJDD(4) + t1158;
t1361 = t1067 * t1268;
t1360 = t1067 * t1269;
t1228 = t1309 - 0.2e1 * t1299;
t1176 = t1228 * t1274;
t1251 = t1274 * t1323;
t1242 = qJDD(3) + t1251;
t1343 = t1242 * t1271;
t1243 = qJDD(3) - t1251;
t1342 = t1243 * t1271;
t1341 = t1243 * t1274;
t1133 = t1271 * t1158;
t1134 = t1274 * t1158;
t1337 = -pkin(4) * t1387 - qJ(5) * t1109;
t1336 = -pkin(2) * t1158 + pkin(7) * t1056;
t1266 = t1271 ^ 2;
t1325 = t1266 * t1333;
t1248 = -t1325 - t1277;
t1187 = -t1248 * t1271 - t1341;
t1226 = t1311 + 0.2e1 * t1255;
t1329 = -pkin(2) * t1226 + pkin(7) * t1187 + t1133;
t1250 = -t1257 - t1277;
t1185 = t1250 * t1274 - t1343;
t1328 = pkin(2) * t1228 + pkin(7) * t1185 - t1134;
t1327 = -qJ(5) * t1268 - pkin(3);
t931 = t1268 * t988 + t1269 * t989;
t1326 = t1266 * t1339;
t1320 = t1376 * t1339;
t912 = t1268 * t950 + t1269 * t948;
t1280 = t1165 * pkin(4) + t1067 - t1403;
t970 = (pkin(4) * qJD(3) - 0.2e1 * qJD(5)) * t1217 + t1280;
t885 = qJ(4) * t912 + (t1327 - t1371) * t970;
t911 = t1268 * t948 - t1269 * t950;
t891 = -t1271 * t911 + t1274 * t912;
t894 = -qJ(4) * t911 + (pkin(4) * t1268 - qJ(5) * t1269) * t970;
t1318 = -pkin(2) * t970 + pkin(7) * t891 + t1271 * t894 + t1274 * t885;
t1315 = -t1252 * t1273 - t1276 * t1253;
t934 = -pkin(4) * t1106 + t948;
t935 = -qJ(5) * t1106 + t950;
t899 = t1268 * t935 + t1269 * t934 + t1433;
t905 = -t1268 * t934 + t1269 * t935 - t1439;
t1314 = t1271 * t905 + t1274 * t899 + t1450;
t909 = t1433 + t931;
t915 = -t930 - t1439;
t1313 = t1271 * t915 + t1274 * t909 + t1450;
t1279 = 0.2e1 * qJD(5) * t1217 - t1280;
t945 = -pkin(4) * t1207 + t1279 + t1403;
t918 = -t1453 + t1268 * t945 + (pkin(3) + t1371) * t1388;
t926 = -pkin(4) * t1352 + t1269 * t945 - t1454;
t1312 = t1271 * t926 + t1274 * t918 - t1470;
t1005 = t1361 - t1421;
t966 = -pkin(3) * t1108 - t1360 + t1422;
t1307 = t1271 * t1005 + t1274 * t966 + t1434;
t946 = t1279 + (-t1108 - t1207) * pkin(4);
t922 = t1108 * t1327 + t1269 * t946 + t1422;
t928 = -qJ(5) * t1356 - t1268 * t946 - t1421;
t1306 = t1271 * t928 + t1274 * t922 + t1434;
t1305 = pkin(3) * t911 + t1368;
t1008 = t1360 + t1454;
t972 = -pkin(3) * t1388 + t1361 + t1453;
t1304 = t1271 * t1008 + t1274 * t972 + t1470;
t1231 = (t1266 + t1376) * t1334;
t1237 = t1325 + t1257;
t1303 = pkin(2) * t1237 + pkin(7) * t1231 + t1056;
t1302 = t1337 + t1374;
t1301 = -t1338 - t1457;
t1245 = qJDD(1) * t1276 - t1273 * t1278;
t1300 = -pkin(5) * t1245 - g(3) * t1273;
t1055 = t1127 * t1274 - t1128 * t1271;
t1292 = t1252 * t1276 - t1253 * t1273;
t1290 = t1272 * t1251;
t1289 = t1275 * t1251;
t902 = t1274 * t931 - t1367;
t920 = -pkin(3) * t1067 + qJ(4) * t931;
t1287 = -pkin(2) * t1067 + pkin(7) * t902 - qJ(4) * t1367 + t1274 * t920;
t1284 = pkin(4) * t1144 + qJ(5) * t1384 + t1294;
t1283 = t1284 + t1457;
t1204 = -0.2e1 * t1363;
t1281 = -t1138 * t1217 + t1204 - t1285 - t1390;
t1249 = t1257 - t1277;
t1247 = -t1325 + t1277;
t1244 = qJDD(1) * t1273 + t1276 * t1278;
t1238 = t1325 - t1257;
t1232 = t1274 * t1242;
t1224 = -pkin(5) * t1244 + g(3) * t1276;
t1223 = (t1320 + t1326) * qJD(3);
t1203 = 0.2e1 * t1364;
t1192 = t1223 * t1275 + t1260;
t1191 = t1223 * t1272 - t1335;
t1189 = -qJD(3) * t1326 + t1274 * t1227;
t1188 = -qJD(3) * t1320 - t1271 * t1282;
t1186 = -t1247 * t1271 + t1232;
t1184 = t1249 * t1274 - t1342;
t1183 = t1248 * t1274 - t1342;
t1182 = t1247 * t1274 + t1343;
t1181 = t1250 * t1271 + t1232;
t1180 = t1249 * t1271 + t1341;
t1177 = (t1227 + t1255) * t1271;
t1171 = t1231 * t1275 - t1237 * t1272;
t1169 = t1231 * t1272 + t1237 * t1275;
t1168 = -t1226 * t1271 + t1176;
t1167 = t1226 * t1274 + t1228 * t1271;
t1157 = t1275 * t1186 + t1271 * t1310;
t1156 = t1275 * t1184 + t1272 * t1309;
t1155 = t1272 * t1186 - t1271 * t1308;
t1154 = t1272 * t1184 - t1274 * t1308;
t1142 = t1275 * t1189 - t1290;
t1141 = t1275 * t1188 + t1290;
t1140 = t1272 * t1189 + t1289;
t1139 = t1272 * t1188 - t1289;
t1130 = pkin(1) * t1234 - t1175;
t1129 = -pkin(1) * t1236 - t1174;
t1122 = t1187 * t1275 + t1226 * t1272;
t1121 = t1185 * t1275 - t1228 * t1272;
t1120 = t1187 * t1272 - t1226 * t1275;
t1119 = t1185 * t1272 + t1228 * t1275;
t1116 = t1168 * t1275 + t1238 * t1272;
t1115 = t1168 * t1272 - t1238 * t1275;
t1085 = pkin(1) * t1088;
t1084 = pkin(1) * g(3) + pkin(6) * t1316;
t1071 = -pkin(7) * t1183 + t1134;
t1070 = -pkin(7) * t1181 + t1133;
t1069 = -pkin(2) * t1183 + t1128;
t1068 = -pkin(2) * t1181 + t1127;
t1033 = t1094 * t1274 + t1095 * t1271;
t1030 = pkin(1) * t1119 + t1328;
t1029 = pkin(1) * t1120 + t1329;
t1028 = -pkin(6) * t1169 + t1055 * t1275;
t1027 = pkin(6) * t1171 + t1055 * t1272;
t1024 = t1056 * t1275 + t1158 * t1272;
t1023 = t1056 * t1272 - t1158 * t1275;
t1006 = pkin(1) * t1169 + t1303;
t986 = -pkin(6) * t1120 - t1069 * t1272 + t1071 * t1275;
t985 = -pkin(6) * t1119 - t1068 * t1272 + t1070 * t1275;
t968 = -pkin(1) * t1183 + pkin(6) * t1122 + t1069 * t1275 + t1071 * t1272;
t967 = -pkin(1) * t1181 + pkin(6) * t1121 + t1068 * t1275 + t1070 * t1272;
t944 = pkin(1) * t1023 + t1336;
t933 = -pkin(6) * t1023 - (pkin(2) * t1272 - pkin(7) * t1275) * t1055;
t932 = -t1374 - t1458;
t929 = t1202 - t1301 + t1472;
t924 = pkin(6) * t1024 - (-pkin(2) * t1275 - pkin(7) * t1272 - pkin(1)) * t1055;
t923 = t1436 + t988;
t917 = -t1302 - t1458;
t913 = t1008 * t1274 - t1271 * t972 + t1471;
t910 = t1390 + t1436 + t950;
t907 = t1005 * t1274 - t1271 * t966 - t1440;
t906 = t1203 - t1283 - 0.2e1 * t1362 - t1472;
t903 = t1304 + t1482;
t901 = t1271 * t931 + t1366;
t897 = t1067 * t1272 + t1275 * t902;
t896 = -t1067 * t1275 + t1272 * t902;
t895 = t1307 + t1459;
t892 = -t1271 * t922 + t1274 * t928 - t1440;
t890 = t1271 * t912 + t1274 * t911;
t888 = -t1271 * t918 + t1274 * t926 - t1471;
t887 = -t1272 * t929 + t1275 * t913 - t1481;
t886 = -pkin(2) * t901 - t1375;
t883 = t1272 * t913 + t1275 * t929 - t1480;
t882 = t1272 * t970 + t1275 * t891;
t881 = t1272 * t891 - t1275 * t970;
t880 = t1306 + t1459;
t879 = -t1272 * t923 + t1275 * t907 - t1456;
t878 = -t1271 * t909 + t1274 * t915 - t1455;
t877 = t1312 - t1482;
t876 = t1272 * t907 + t1275 * t923 + t1451;
t875 = -pkin(7) * t901 - qJ(4) * t1366 - t1271 * t920;
t874 = t1313 + t1469;
t873 = -t1272 * t910 + t1275 * t892 - t1456;
t872 = -t1271 * t899 + t1274 * t905 - t1455;
t871 = t1272 * t892 + t1275 * t910 + t1451;
t870 = -t1272 * t906 + t1275 * t888 + t1481;
t869 = -t1272 * t932 + t1275 * t878 - t1468;
t868 = -pkin(2) * t890 - t1305;
t867 = t1272 * t888 + t1275 * t906 + t1480;
t866 = t1314 + t1469;
t865 = t1272 * t878 + t1275 * t932 + t1467;
t864 = pkin(1) * t896 + t1287;
t863 = -t1272 * t917 + t1275 * t872 - t1468;
t862 = t1272 * t872 + t1275 * t917 + t1467;
t861 = -pkin(7) * t890 - t1271 * t885 + t1274 * t894;
t860 = -pkin(6) * t896 - t1272 * t886 + t1275 * t875;
t859 = -pkin(1) * t901 + pkin(6) * t897 + t1272 * t875 + t1275 * t886;
t858 = pkin(1) * t881 + t1318;
t857 = -pkin(6) * t881 - t1272 * t868 + t1275 * t861;
t856 = -pkin(1) * t890 + pkin(6) * t882 + t1272 * t861 + t1275 * t868;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1245, 0, -t1244, 0, t1300, -t1224, -t1292, -pkin(5) * t1292, 0, 0, t1170, 0, t1430, 0, t1466, -t1463, t1413, pkin(5) * t1413 + pkin(6) * t1358 - t1273 * t1084, -t1140 * t1273 + t1142 * t1276, -t1115 * t1273 + t1116 * t1276, -t1155 * t1273 + t1157 * t1276, -t1139 * t1273 + t1141 * t1276, -t1154 * t1273 + t1156 * t1276, -t1191 * t1273 + t1192 * t1276, t1276 * t985 - t1273 * t967 - pkin(5) * (t1119 * t1276 + t1121 * t1273), t1276 * t986 - t1273 * t968 - pkin(5) * (t1120 * t1276 + t1122 * t1273), t1276 * t1028 - t1273 * t1027 - pkin(5) * (t1169 * t1276 + t1171 * t1273), t1276 * t933 - t1273 * t924 - pkin(5) * (t1023 * t1276 + t1024 * t1273), t1379, t1478, t1465, t1408, t1476, t1405, -t1273 * t876 + t1276 * t879 - t1443, -t1273 * t883 + t1276 * t887 - t1483, -t1273 * t865 + t1276 * t869 - t1461, t1276 * t860 - t1273 * t859 - pkin(5) * (t1273 * t897 + t1276 * t896), t1379, t1465, -t1478, t1405, -t1476, t1408, -t1273 * t871 + t1276 * t873 - t1443, -t1273 * t862 + t1276 * t863 - t1461, -t1273 * t867 + t1276 * t870 + t1483, t1276 * t857 - t1273 * t856 - pkin(5) * (t1273 * t882 + t1276 * t881); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1244, 0, t1245, 0, t1224, t1300, t1315, pkin(5) * t1315, 0, 0, -t1430, 0, t1170, 0, t1463, t1466, t1414, pkin(5) * t1414 + pkin(6) * t1359 + t1276 * t1084, t1140 * t1276 + t1142 * t1273, t1115 * t1276 + t1116 * t1273, t1155 * t1276 + t1157 * t1273, t1139 * t1276 + t1141 * t1273, t1154 * t1276 + t1156 * t1273, t1191 * t1276 + t1192 * t1273, t1273 * t985 + t1276 * t967 + pkin(5) * (-t1119 * t1273 + t1121 * t1276), t1273 * t986 + t1276 * t968 + pkin(5) * (-t1120 * t1273 + t1122 * t1276), t1273 * t1028 + t1276 * t1027 + pkin(5) * (-t1169 * t1273 + t1171 * t1276), t1273 * t933 + t1276 * t924 + pkin(5) * (-t1023 * t1273 + t1024 * t1276), t1378, -t1479, t1464, t1407, -t1477, t1406, t1273 * t879 + t1276 * t876 + t1444, t1273 * t887 + t1276 * t883 - t1484, t1273 * t869 + t1276 * t865 + t1462, t1273 * t860 + t1276 * t859 + pkin(5) * (-t1273 * t896 + t1276 * t897), t1378, t1464, t1479, t1406, t1477, t1407, t1273 * t873 + t1276 * t871 + t1444, t1273 * t863 + t1276 * t862 + t1462, t1273 * t870 + t1276 * t867 + t1484, t1273 * t857 + t1276 * t856 + pkin(5) * (-t1273 * t881 + t1276 * t882); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1252, t1253, 0, 0, 0, 0, 0, 0, 0, t1334, t1129, t1130, 0, -t1085, t1177, t1167, t1182, t1176, t1180, 0, t1030, t1029, t1006, t944, t1033, -t953, t1427, t1380, t1011, t1383, t895, t903, t874, t864, t1033, t1427, t953, t1383, -t1011, t1380, t880, t866, t877, t858; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1278, 0, 0, -g(3), -t1252, 0, 0, 0, -t1236, 0, t1234, 0, t1435, -t1210, t1088, pkin(6) * t1088, t1142, t1116, t1157, t1141, t1156, t1192, t985, t986, t1028, t933, t1295, -t942, t1447, t1393, -t980, t1397, t879, t887, t869, t860, t1295, t1447, t942, t1397, t980, t1393, t873, t863, t870, t857; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1278, 0, qJDD(1), 0, g(3), 0, -t1253, 0, 0, 0, -t1234, 0, -t1236, 0, t1210, t1435, t1316, t1084, t1140, t1115, t1155, t1139, t1154, t1191, t967, t968, t1027, t924, t1296, -t940, t1449, t1395, -t974, t1394, t876, t883, t865, t859, t1296, t1449, t940, t1394, t974, t1395, t871, t862, t867, t856; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1252, t1253, 0, 0, 0, 0, 0, 0, 0, t1334, t1129, t1130, 0, -t1085, t1177, t1167, t1182, t1176, t1180, 0, t1030, t1029, t1006, t944, t1033, -t953, t1427, t1380, t1011, t1383, t895, t903, t874, t864, t1033, t1427, t953, t1383, -t1011, t1380, t880, t866, t877, t858; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1334, 0, -t1333, 0, 0, -g(3), t1174, 0, t1189, t1168, t1186, t1188, t1184, t1223, t1070, t1071, t1055, pkin(7) * t1055, t1036, -t957, t1426, t1381, -t1018, t1382, t907, t913, t878, t875, t1036, t1426, t957, t1382, t1018, t1381, t892, t872, t888, t861; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1333, 0, t1334, 0, g(3), 0, t1175, 0, t1251, -t1238, -t1311, -t1251, -t1309, -qJDD(3), t1068, t1069, 0, pkin(2) * t1055, -t1345, t1152, -t1387, t1345, t1109, -qJDD(3), t923, t929, t932, t886, -t1345, -t1387, -t1152, -qJDD(3), -t1109, t1345, t910, t917, t906, t868; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1334, -t1174, -t1175, 0, 0, t1177, t1167, t1182, t1176, t1180, 0, t1328, t1329, t1303, t1336, t1033, -t953, t1427, t1380, t1011, t1383, t1307, t1304, t1313, t1287, t1033, t1427, t953, t1383, -t1011, t1380, t1306, t1314, t1312, t1318; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1227, t1228, t1242, -t1255, t1249, t1255, 0, t1158, t1127, 0, t1095, -t1041, t1416, t1288, t1078, t1297, t1005, t1008, t915, -qJ(4) * t930, t1095, t1416, t1041, t1297, -t1078, t1288, t928, t905, t926, t894; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1299, t1226, t1247, t1282, t1243, -t1299, -t1158, 0, t1128, 0, t1094, t1039, t1415, t1298, t1072, t1286, t966, t972, t909, t920, t1094, t1415, -t1039, t1286, -t1072, t1298, t922, t899, t918, t885; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1251, t1238, t1311, t1251, t1309, qJDD(3), -t1127, -t1128, 0, 0, t1345, -t1152, t1387, -t1345, -t1109, qJDD(3), t1204 - t1317 + t1423, t1203 + t1301, t1374, t1375, t1345, t1387, t1152, qJDD(3), t1109, -t1345, t1281 + t1423, t1302, t1283 + t1389, t1305; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1166, -t1108, t1385, t1365, t1195, -t1365, 0, t1067, t988, 0, t1166, t1385, t1108, -t1365, -t1195, t1365, -qJ(5) * t1108, t935, t945, -qJ(5) * t970; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1207, t1388, -t1196, -t1165, t1384, -t1207, -t1067, 0, t989, 0, t1207, -t1196, -t1388, -t1207, -t1384, -t1165, t946, t934, pkin(4) * t1388, -pkin(4) * t970; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1345, -t1152, t1387, -t1345, -t1109, qJDD(3), -t988, -t989, 0, 0, t1345, t1387, t1152, qJDD(3), t1109, -t1345, t1281, t1337, t1284 + t1389, t1368; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1166, t1385, t1108, -t1365, -t1195, t1365, 0, t950, -t970, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1345, t1387, t1152, qJDD(3), t1109, -t1345, -t950, 0, t948, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1207, t1196, t1388, t1207, t1384, t1165, t970, -t948, 0, 0;];
m_new_reg = t1;
