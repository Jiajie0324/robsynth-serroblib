% Calculate vector of inverse dynamics joint torques for
% S5RRRRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,alpha3,d1,d2,d3,d4,d5]';
% MDP [31x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S5RRRRR12_convert_par2_MPV_fixb.m
% 
% Output:
% tau [5x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:58
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S5RRRRR12_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(11,1),zeros(31,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR12_invdynJ_fixb_mdp_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR12_invdynJ_fixb_mdp_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR12_invdynJ_fixb_mdp_slag_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR12_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S5RRRRR12_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [31 1]), ...
  'S5RRRRR12_invdynJ_fixb_mdp_slag_vp: MDP has to be [31x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:55:44
% EndTime: 2019-12-31 22:56:15
% DurationCPUTime: 18.16s
% Computational Cost: add. (13927->752), mult. (40264->1063), div. (0->0), fcn. (34067->14), ass. (0->309)
t737 = cos(pkin(5));
t741 = sin(qJ(2));
t907 = sin(qJ(1));
t831 = t907 * t741;
t745 = cos(qJ(2));
t746 = cos(qJ(1));
t875 = t745 * t746;
t688 = -t737 * t875 + t831;
t830 = t907 * t745;
t874 = t746 * t741;
t689 = t737 * t874 + t830;
t740 = sin(qJ(3));
t744 = cos(qJ(3));
t734 = sin(pkin(6));
t735 = sin(pkin(5));
t884 = t735 * t746;
t839 = t734 * t884;
t736 = cos(pkin(6));
t883 = t736 * t740;
t591 = t688 * t883 - t689 * t744 + t740 * t839;
t647 = -t688 * t734 + t736 * t884;
t739 = sin(qJ(4));
t743 = cos(qJ(4));
t549 = t591 * t743 + t647 * t739;
t738 = sin(qJ(5));
t929 = t549 * t738;
t742 = cos(qJ(5));
t928 = t549 * t742;
t876 = t744 * t745;
t880 = t740 * t741;
t776 = -t736 * t880 + t876;
t673 = t776 * t735;
t665 = qJD(1) * t673;
t856 = qJD(3) * t744;
t825 = t734 * t856;
t927 = -t665 + t825;
t906 = pkin(1) * t737;
t728 = t745 * t906;
t720 = qJD(1) * t728;
t797 = t735 * (pkin(9) * t736 + pkin(8));
t780 = t741 * t797;
t643 = -qJD(1) * t780 + t720;
t905 = pkin(1) * t741;
t727 = t737 * t905;
t754 = -t745 * t797 - t727;
t644 = t754 * qJD(1);
t904 = pkin(9) * t734;
t779 = pkin(2) * t741 - t745 * t904;
t860 = qJD(1) * t735;
t676 = t779 * t860;
t889 = t734 * t740;
t723 = pkin(9) * t889;
t882 = t736 * t744;
t917 = pkin(2) * t882 - t723;
t926 = t917 * qJD(3) - t744 * t643 - t644 * t883 - t676 * t889;
t578 = -t644 * t734 + t736 * t676;
t878 = t741 * t744;
t879 = t740 * t745;
t778 = t736 * t878 + t879;
t672 = t778 * t735;
t664 = qJD(1) * t672;
t924 = pkin(3) * t664 - pkin(10) * t665 + t578 - (pkin(3) * t740 - pkin(10) * t744) * t734 * qJD(3);
t829 = t741 * t860;
t803 = t734 * t829;
t925 = pkin(10) * t803 - t926;
t686 = -t743 * t736 + t739 * t889;
t866 = -qJD(4) * t686 - t739 * t803 + t743 * t927;
t888 = t734 * t743;
t687 = t736 * t739 + t740 * t888;
t865 = qJD(4) * t687 + t739 * t927 + t743 * t803;
t857 = qJD(3) * t740;
t826 = t734 * t857;
t922 = t664 - t826;
t887 = t734 * t744;
t862 = pkin(2) * t883 + pkin(9) * t887;
t921 = t862 * qJD(3) - t740 * t643;
t828 = t745 * t860;
t800 = t736 * t828;
t701 = t744 * t800;
t859 = qJD(1) * t737;
t809 = qJD(2) + t859;
t781 = t809 * t734;
t802 = t740 * t829;
t615 = -t744 * t781 - t701 + t802;
t613 = qJD(4) + t615;
t777 = t736 * t879 + t878;
t764 = t777 * t735;
t617 = qJD(1) * t764 + t740 * t781;
t760 = t734 * t828 - t736 * t809 - qJD(3);
t659 = t743 * t760;
t569 = t617 * t739 + t659;
t568 = qJD(5) + t569;
t848 = qJDD(1) * t737;
t722 = qJDD(2) + t848;
t748 = qJD(2) * t778 + qJD(3) * t777;
t774 = qJD(3) * t781;
t846 = t745 * qJDD(1);
t818 = t735 * t846;
t799 = t736 * t818;
t847 = qJDD(1) * t741;
t542 = -t722 * t887 + (qJD(1) * t748 + t740 * t847) * t735 + t740 * t774 - t744 * t799;
t920 = t591 * t739 - t647 * t743;
t731 = t735 ^ 2;
t908 = 0.2e1 * t731;
t759 = t737 * pkin(2) - t780;
t642 = t728 + t759;
t775 = -pkin(2) * t745 - t741 * t904 - pkin(1);
t669 = t775 * t735;
t575 = -t642 * t734 + t736 * t669;
t915 = t736 * t876 - t880;
t637 = -t915 * t735 - t737 * t887;
t638 = t737 * t889 + t764;
t523 = pkin(3) * t637 - pkin(10) * t638 + t575;
t885 = t735 * t745;
t685 = t734 * t885 - t737 * t736;
t772 = pkin(8) * t885 + t727;
t632 = (t734 * t737 + t736 * t885) * pkin(9) + t772;
t835 = t744 * t632 + t642 * t883 + t669 * t889;
t528 = -pkin(10) * t685 + t835;
t918 = t739 * t523 + t743 * t528;
t680 = pkin(10) * t736 + t862;
t681 = (-pkin(3) * t744 - pkin(10) * t740 - pkin(2)) * t734;
t864 = t743 * t680 + t739 * t681;
t863 = t644 * t882 - (-pkin(3) * t829 - t676 * t744) * t734 + t921;
t852 = qJD(4) * t743;
t854 = qJD(4) * t739;
t916 = t680 * t854 - t681 * t852 + t924 * t739 + t925 * t743;
t914 = t731 * t905 + t772 * t737;
t849 = qJD(1) * qJD(2);
t820 = t741 * t849;
t798 = t735 * t820;
t622 = t722 * t736 + qJDD(3) + (t798 - t818) * t734;
t843 = qJD(2) * t906;
t806 = qJD(1) * t843;
t833 = pkin(8) * t818 + qJDD(1) * t727 + t745 * t806;
t758 = -pkin(8) * t798 + t833;
t561 = (t722 * t734 + (-t820 + t846) * t736 * t735) * pkin(9) + t758;
t842 = pkin(1) * t846;
t719 = t737 * t842;
t821 = t745 * t849;
t771 = -t821 - t847;
t567 = pkin(2) * t722 - t741 * t806 + t771 * t797 + t719;
t765 = t779 * qJD(2);
t594 = (qJD(1) * t765 + qJDD(1) * t775) * t735;
t609 = t772 * qJD(1) + (t781 + t800) * pkin(9);
t614 = qJD(2) * pkin(2) + qJD(1) * t759 + t720;
t660 = qJD(1) * t669;
t823 = t736 * t856;
t757 = -t744 * t561 - t567 * t883 - t594 * t889 + t609 * t857 - t614 * t823 - t660 * t825;
t478 = pkin(10) * t622 - t757;
t519 = -t567 * t734 + t736 * t594;
t819 = t735 * t847;
t541 = qJD(3) * t701 + t722 * t889 + t740 * t799 + (-t736 * qJD(2) - qJD(3)) * t802 + (t735 * t821 + t774 + t819) * t744;
t484 = pkin(3) * t542 - pkin(10) * t541 + t519;
t566 = -t614 * t734 + t736 * t660;
t511 = pkin(3) * t615 - pkin(10) * t617 + t566;
t526 = t744 * t609 + t614 * t883 + t660 * t889;
t515 = -pkin(10) * t760 + t526;
t488 = t511 * t739 + t515 * t743;
t467 = -qJD(4) * t488 - t478 * t739 + t743 * t484;
t538 = qJDD(4) + t542;
t465 = -pkin(4) * t538 - t467;
t571 = t743 * t617 - t739 * t760;
t690 = -t737 * t830 - t874;
t691 = -t737 * t831 + t875;
t832 = t735 * t907;
t804 = t734 * t832;
t593 = t691 * t744 + (t690 * t736 + t804) * t740;
t649 = -t690 * t734 + t736 * t832;
t550 = -t593 * t739 + t649 * t743;
t582 = t638 * t739 + t685 * t743;
t768 = g(1) * t550 + g(2) * t920 - g(3) * t582;
t913 = t568 * (pkin(4) * t571 + t568 * pkin(11)) + t465 + t768;
t812 = t739 * t541 - t743 * t622;
t502 = qJD(4) * t571 + t812;
t500 = qJDD(5) + t502;
t712 = -pkin(4) * t743 - pkin(11) * t739 - pkin(3);
t912 = t568 * (t526 - t613 * (pkin(4) * t739 - pkin(11) * t743)) - t712 * t500;
t525 = -t740 * t609 + (t614 * t736 + t660 * t734) * t744;
t911 = -t740 * t632 + t744 * (t642 * t736 + t669 * t734);
t721 = t745 * t843;
t645 = -qJD(2) * t780 + t721;
t646 = t754 * qJD(2);
t677 = t735 * t765;
t756 = -t632 * t857 + t642 * t823 + t744 * t645 + t646 * t883 + t669 * t825 + t677 * t889;
t858 = qJD(2) * t741;
t827 = t735 * t858;
t801 = t734 * t827;
t504 = pkin(10) * t801 + t756;
t576 = t735 * t748 + t737 * t826;
t577 = t737 * t825 + (t776 * qJD(2) + t915 * qJD(3)) * t735;
t579 = -t646 * t734 + t736 * t677;
t509 = pkin(3) * t576 - pkin(10) * t577 + t579;
t909 = -qJD(4) * t918 - t504 * t739 + t509 * t743;
t747 = qJD(1) ^ 2;
t902 = pkin(10) * qJD(4);
t501 = -qJD(4) * t659 + t743 * t541 - t617 * t854 + t739 * t622;
t850 = qJD(5) * t742;
t836 = t742 * t501 + t738 * t538 + t613 * t850;
t851 = qJD(5) * t738;
t475 = -t571 * t851 + t836;
t901 = t475 * t738;
t896 = t571 * t738;
t529 = -t742 * t613 + t896;
t900 = t529 * t568;
t531 = t571 * t742 + t613 * t738;
t899 = t531 * t568;
t898 = t569 * t613;
t897 = t571 * t613;
t895 = t615 * t743;
t894 = t689 * t740;
t892 = t722 * MDP(8);
t891 = t731 * t747;
t890 = t734 * t739;
t886 = t735 * t741;
t881 = t738 * t500;
t877 = t742 * t500;
t555 = pkin(3) * t617 + pkin(10) * t615;
t872 = t743 * t525 + t739 * t555;
t869 = t922 * pkin(4) + t864 * qJD(4) - t739 * t925 + t924 * t743;
t652 = t687 * t738 + t742 * t887;
t868 = -qJD(5) * t652 - t922 * t738 + t866 * t742;
t838 = t738 * t887;
t867 = -qJD(5) * t838 + t687 * t850 + t866 * t738 + t922 * t742;
t732 = t741 ^ 2;
t861 = -t745 ^ 2 + t732;
t855 = qJD(4) * t738;
t853 = qJD(4) * t742;
t841 = t745 * t891;
t840 = t734 * t886;
t824 = t736 * t857;
t822 = t735 * t737 * t747;
t466 = t743 * t478 + t739 * t484 + t511 * t852 - t515 * t854;
t464 = pkin(11) * t538 + t466;
t486 = -t740 * t561 + t567 * t882 + t594 * t887 - t609 * t856 - t614 * t824 - t660 * t826;
t479 = -pkin(3) * t622 - t486;
t469 = pkin(4) * t502 - pkin(11) * t501 + t479;
t815 = -t738 * t464 + t742 * t469;
t813 = t501 * t738 - t742 * t538;
t811 = t743 * t613;
t810 = t742 * t568;
t808 = qJD(2) + 0.2e1 * t859;
t807 = t722 + t848;
t805 = -t632 * t856 - t642 * t824 - t740 * t645 - t669 * t826;
t553 = t617 * t738 - t742 * t895;
t794 = t742 * t852 - t553;
t679 = t723 + (-pkin(2) * t744 - pkin(3)) * t736;
t584 = pkin(4) * t686 - pkin(11) * t687 + t679;
t793 = t922 * pkin(11) - qJD(5) * t584 + t916;
t587 = -pkin(11) * t887 + t864;
t792 = -t865 * pkin(4) + t866 * pkin(11) + qJD(5) * t587 - t863;
t791 = t742 * t464 + t738 * t469;
t483 = pkin(11) * t613 + t488;
t514 = pkin(3) * t760 - t525;
t491 = t569 * pkin(4) - t571 * pkin(11) + t514;
t473 = t483 * t742 + t491 * t738;
t790 = t483 * t738 - t491 * t742;
t493 = pkin(11) * t637 + t918;
t527 = pkin(3) * t685 - t911;
t583 = t638 * t743 - t685 * t739;
t498 = pkin(4) * t582 - pkin(11) * t583 + t527;
t789 = t493 * t742 + t498 * t738;
t788 = -t493 * t738 + t498 * t742;
t487 = t511 * t743 - t515 * t739;
t786 = t523 * t743 - t528 * t739;
t546 = t583 * t742 + t637 * t738;
t545 = t583 * t738 - t637 * t742;
t782 = -t680 * t739 + t681 * t743;
t773 = -pkin(10) * t538 + t514 * t613;
t770 = t743 * t504 + t739 * t509 + t523 * t852 - t528 * t854;
t588 = t688 * t882 + t744 * t839 + t894;
t592 = -t690 * t882 + t691 * t740 - t744 * t804;
t767 = g(1) * t592 + g(2) * t588 + g(3) * t637;
t766 = -g(1) * t593 + g(2) * t591 - g(3) * t638;
t762 = -t479 + t767;
t482 = -pkin(4) * t613 - t487;
t755 = -pkin(11) * t500 + (t482 + t487) * t568;
t753 = qJD(3) * t760;
t751 = pkin(10) * qJD(5) * t568 - t767;
t750 = t760 * t840;
t749 = (pkin(11) * t617 - qJD(5) * t712 + t872) * t568 + t766;
t505 = -t646 * t882 + (-pkin(3) * t827 - t677 * t744) * t734 - t805;
t653 = t687 * t742 - t838;
t618 = t673 * t743 + t739 * t840;
t608 = t690 * t744 - t691 * t883;
t607 = t690 * t740 + t691 * t882;
t606 = -t688 * t744 - t689 * t883;
t605 = -t688 * t740 + t689 * t882;
t590 = -t894 + (-t688 * t736 - t839) * t744;
t586 = pkin(4) * t887 - t782;
t573 = t608 * t743 + t691 * t890;
t572 = t606 * t743 + t689 * t890;
t552 = -t742 * t617 - t738 * t895;
t551 = t593 * t743 + t649 * t739;
t518 = -qJD(4) * t582 + t577 * t743 + t739 * t801;
t517 = qJD(4) * t583 + t577 * t739 - t743 * t801;
t513 = t551 * t742 + t592 * t738;
t512 = -t551 * t738 + t592 * t742;
t496 = -pkin(4) * t617 + t525 * t739 - t555 * t743;
t492 = -pkin(4) * t637 - t786;
t490 = -qJD(5) * t545 + t518 * t742 + t576 * t738;
t489 = qJD(5) * t546 + t518 * t738 - t576 * t742;
t476 = qJD(5) * t531 + t813;
t474 = pkin(4) * t517 - pkin(11) * t518 + t505;
t471 = -pkin(4) * t576 - t909;
t470 = pkin(11) * t576 + t770;
t463 = -t473 * qJD(5) + t815;
t462 = -t790 * qJD(5) + t791;
t1 = [(g(1) * t920 - g(2) * t550 - t466 * t637 + t479 * t583 - t488 * t576 + t527 * t501 + t505 * t571 + t514 * t518 - t918 * t538 - t770 * t613) * MDP(24) + (t542 * t685 + t576 * t760 - t615 * t801 - t637 * t622) * MDP(14) + (-t541 * t685 - t577 * t760 + t617 * t801 + t638 * t622) * MDP(13) + (g(1) * t590 + g(2) * t592 + t519 * t638 - t526 * t801 + t575 * t541 + t566 * t577 + t579 * t617 - t622 * t835 - t685 * t757 + t756 * t760) * MDP(17) + (-qJD(2) * t750 - t622 * t685) * MDP(15) + t737 * t892 + (-g(1) * t549 - g(2) * t551 + t467 * t637 + t479 * t582 + t487 * t576 + t527 * t502 + t505 * t569 + t514 * t517 + t786 * t538 + t909 * t613) * MDP(23) + (-((t646 * t736 + t677 * t734) * t744 + t805) * t760 + t911 * t622 - t486 * t685 + t525 * t801 + t579 * t615 + t575 * t542 + t519 * t637 + t566 * t576 - g(1) * t591 - g(2) * t593) * MDP(16) + (t842 * t908 + (-pkin(8) * t886 + t728) * t722 + (-pkin(8) * t819 + t719) * t737 + g(1) * t689 - g(2) * t691 - t772 * qJD(2) ^ 2 - 0.2e1 * t914 * t849) * MDP(9) + ((t745 * t807 - t808 * t858) * MDP(7) + (qJD(2) * t745 * t808 + t741 * t807) * MDP(6)) * t735 + (qJDD(1) * t732 + 0.2e1 * t745 * t820) * t731 * MDP(4) + (g(1) * t907 - g(2) * t746) * MDP(2) + (g(1) * t746 + g(2) * t907) * MDP(3) + (t741 * t846 - t849 * t861) * MDP(5) * t908 + ((-qJD(5) * t789 - t470 * t738 + t474 * t742) * t568 + t788 * t500 + t463 * t582 - t790 * t517 + t471 * t529 + t492 * t476 + t465 * t545 + t482 * t489 - g(1) * (t590 * t738 + t928) - g(2) * t513) * MDP(30) + (-(qJD(5) * t788 + t470 * t742 + t474 * t738) * t568 - t789 * t500 - t462 * t582 - t473 * t517 + t471 * t531 + t492 * t475 + t465 * t546 + t482 * t490 - g(1) * (t590 * t742 - t929) - g(2) * t512) * MDP(31) + (-t541 * t637 - t542 * t638 - t576 * t617 - t577 * t615) * MDP(12) + (t541 * t638 + t577 * t617) * MDP(11) + (-t502 * t637 - t517 * t613 - t538 * t582 - t569 * t576) * MDP(21) + (t501 * t637 + t518 * t613 + t538 * t583 + t571 * t576) * MDP(20) + (t538 * t637 + t576 * t613) * MDP(22) + (t500 * t582 + t517 * t568) * MDP(29) + (-t476 * t582 - t489 * t568 - t500 * t545 - t517 * t529) * MDP(28) + (t475 * t582 + t490 * t568 + t500 * t546 + t517 * t531) * MDP(27) + (-t501 * t582 - t502 * t583 - t517 * t571 - t518 * t569) * MDP(19) + (t501 * t583 + t518 * t571) * MDP(18) + (-t475 * t545 - t476 * t546 - t489 * t531 - t490 * t529) * MDP(26) + (t475 * t546 + t490 * t531) * MDP(25) + (-(-pkin(8) * t827 + t721) * t809 - t772 * t722 - t758 * t737 - g(1) * t688 - g(2) * t690 + t771 * pkin(1) * t908) * MDP(10) + qJDD(1) * MDP(1); (t782 * t538 - t467 * t887 + t679 * t502 + t479 * t686 - g(1) * t573 - g(2) * t572 - g(3) * t618 + ((-qJD(4) * t680 - t924) * t743 + (-qJD(4) * t681 + t925) * t739) * t613 + t863 * t569 + t865 * t514 - t922 * t487) * MDP(23) + ((t584 * t742 - t587 * t738) * t500 + t463 * t686 + t586 * t476 + t465 * t652 - g(1) * (t573 * t742 + t607 * t738) - g(2) * (t572 * t742 + t605 * t738) - g(3) * (t618 * t742 + t672 * t738) + (t738 * t793 - t742 * t792) * t568 + t869 * t529 + t867 * t482 - t865 * t790) * MDP(30) + (-t745 * t822 + t819) * MDP(6) + (t741 * t822 + t818) * MDP(7) + (qJD(1) * t750 + t622 * t736) * MDP(15) + (t541 * t736 + t665 * t760 + (-t617 * t829 + t740 * t622 - t744 * t753) * t734) * MDP(13) + (-t542 * t736 - t664 * t760 + (t615 * t829 + t744 * t622 + t740 * t753) * t734) * MDP(14) + (-g(1) * t690 + g(2) * t688 + t719 + (-pkin(8) * t847 - g(3) * t745) * t735 + t914 * t747) * MDP(9) + (-t864 * t538 + t466 * t887 + t679 * t501 + t479 * t687 - g(1) * (-t608 * t739 + t691 * t888) - g(2) * (-t606 * t739 + t689 * t888) - g(3) * (-t673 * t739 + t743 * t840) + t916 * t613 + t863 * t571 + t866 * t514 + t922 * t488) * MDP(24) + (t502 * t887 - t538 * t686 + t569 * t922 - t613 * t865) * MDP(21) + (-t538 * t887 - t613 * t922) * MDP(22) + (-t501 * t887 + t538 * t687 - t571 * t922 + t613 * t866) * MDP(20) + (t917 * t622 + t486 * t736 - t734 * pkin(2) * t542 - t519 * t887 - t525 * t803 - t578 * t615 - g(1) * t608 - g(2) * t606 - g(3) * t673 - t922 * t566 + ((t644 * t736 + t676 * t734) * t744 + t921) * t760) * MDP(16) - t741 * MDP(4) * t841 + (pkin(1) * t841 + (-pkin(8) * t829 + t720) * t859 + g(1) * t691 + g(2) * t689 + g(3) * t886 + t720 * qJD(2) - t833) * MDP(10) + (t501 * t687 + t571 * t866) * MDP(18) + (-t501 * t686 - t502 * t687 - t569 * t866 - t571 * t865) * MDP(19) + (-t476 * t686 - t500 * t652 - t529 * t865 - t568 * t867) * MDP(28) + (t475 * t686 + t500 * t653 + t531 * t865 + t568 * t868) * MDP(27) + (t475 * t653 + t531 * t868) * MDP(25) + (-t475 * t652 - t476 * t653 - t529 * t868 - t531 * t867) * MDP(26) + (-(t584 * t738 + t587 * t742) * t500 - t462 * t686 + t586 * t475 + t465 * t653 - g(1) * (-t573 * t738 + t607 * t742) - g(2) * (-t572 * t738 + t605 * t742) - g(3) * (-t618 * t738 + t672 * t742) + (t738 * t792 + t742 * t793) * t568 + t869 * t531 + t868 * t482 - t865 * t473) * MDP(31) + (t500 * t686 + t568 * t865) * MDP(29) + t892 + t861 * MDP(5) * t891 + (t615 * t665 + t617 * t664 + (t541 * t744 - t542 * t740 + (-t615 * t744 - t617 * t740) * qJD(3)) * t734) * MDP(12) + (-t862 * t622 + t757 * t736 - t578 * t617 - t566 * t665 + g(1) * t607 + g(2) * t605 + g(3) * t672 + (-pkin(2) * t541 + t519 * t740 + t526 * t829 + t566 * t856) * t734 + t926 * t760) * MDP(17) + (t541 * t889 + t617 * t927) * MDP(11); -t615 ^ 2 * MDP(12) + (-t615 * t760 + t541) * MDP(13) - t542 * MDP(14) + t622 * MDP(15) + (-t526 * t760 + t486 + t767) * MDP(16) + (-t525 * t760 + t566 * t615 + t757 - t766) * MDP(17) + (t501 * t739 + t571 * t811) * MDP(18) + ((t501 - t898) * t743 + (-t502 - t897) * t739) * MDP(19) + (t739 * t538 + t613 * t811) * MDP(20) + (-t613 ^ 2 * t739 + t743 * t538) * MDP(21) + (-pkin(3) * t502 - t526 * t569 + (t525 * t613 + t773) * t739 + ((-t555 - t902) * t613 + t762) * t743) * MDP(23) + (-pkin(3) * t501 + t872 * t613 - t526 * t571 + t773 * t743 + (t613 * t902 - t762) * t739) * MDP(24) + (t475 * t739 * t742 + (-t739 * t851 + t794) * t531) * MDP(25) + (t529 * t553 + t531 * t552 + (-t529 * t742 - t531 * t738) * t852 + (-t901 - t476 * t742 + (t529 * t738 - t531 * t742) * qJD(5)) * t739) * MDP(26) + (-t475 * t743 + t794 * t568 + (t531 * t613 - t568 * t851 + t877) * t739) * MDP(27) + (t476 * t743 + (-t738 * t852 + t552) * t568 + (-t529 * t613 - t568 * t850 - t881) * t739) * MDP(28) + (t568 * t613 * t739 - t500 * t743) * MDP(29) + (-t482 * t552 - t496 * t529 - t912 * t742 + t749 * t738 + (t482 * t855 - t463 + (qJD(4) * t529 - t881) * pkin(10) - t751 * t742) * t743 + (t482 * t850 + t465 * t738 - t613 * t790 + (t568 * t855 + t476) * pkin(10)) * t739) * MDP(30) + (-t482 * t553 - t496 * t531 + t912 * t738 + t749 * t742 + (t482 * t853 + t462 + (qJD(4) * t531 - t877) * pkin(10) + t751 * t738) * t743 + (-t482 * t851 + t465 * t742 - t613 * t473 + (t568 * t853 + t475) * pkin(10)) * t739) * MDP(31) + (MDP(11) * t615 + MDP(12) * t617 - t760 * MDP(14) - t566 * MDP(16) - t571 * MDP(20) + t569 * MDP(21) - t613 * MDP(22) - t487 * MDP(23) + t488 * MDP(24)) * t617; -t569 ^ 2 * MDP(19) + (t501 + t898) * MDP(20) + (-t812 + t897) * MDP(21) + t538 * MDP(22) + (t488 * t613 + t467 - t768) * MDP(23) + (g(1) * t551 - g(2) * t549 + g(3) * t583 + t487 * t613 + t514 * t569 - t466) * MDP(24) + (t531 * t810 + t901) * MDP(25) + ((t475 - t900) * t742 + (-t476 - t899) * t738) * MDP(26) + (t568 * t810 + t881) * MDP(27) + (-t568 ^ 2 * t738 + t877) * MDP(28) + (-pkin(4) * t476 - t488 * t529 + t755 * t738 - t913 * t742) * MDP(30) + (-pkin(4) * t475 - t488 * t531 + t913 * t738 + t755 * t742) * MDP(31) + (MDP(18) * t569 + t571 * MDP(19) - MDP(21) * qJD(4) - t514 * MDP(23) - t531 * MDP(27) + t529 * MDP(28) - t568 * MDP(29) + MDP(30) * t790 + t473 * MDP(31)) * t571; t531 * t529 * MDP(25) + (-t529 ^ 2 + t531 ^ 2) * MDP(26) + (t836 + t900) * MDP(27) + (-t813 + t899) * MDP(28) + t500 * MDP(29) + (t473 * t568 - t482 * t531 - g(1) * t512 - g(2) * (t588 * t742 + t929) + g(3) * t545 + t815) * MDP(30) + (-t790 * t568 + t482 * t529 + g(1) * t513 - g(2) * (-t588 * t738 + t928) + g(3) * t546 - t791) * MDP(31) + (-MDP(27) * t896 - MDP(28) * t531 - MDP(30) * t473 + MDP(31) * t790) * qJD(5);];
tau = t1;
