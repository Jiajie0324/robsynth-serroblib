% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRRR12
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,alpha3,d1,d2,d3,d4,d5]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:58
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRRR12_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR12_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR12_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR12_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR12_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S5RRRRR12_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:58:21
% EndTime: 2019-12-31 22:58:31
% DurationCPUTime: 9.63s
% Computational Cost: add. (109355->324), mult. (272674->516), div. (0->0), fcn. (228491->14), ass. (0->285)
t2267 = sin(qJ(2));
t2261 = sin(pkin(5));
t2272 = cos(qJ(2));
t2330 = t2261 * t2272;
t2322 = qJD(1) * t2330;
t2324 = qJDD(1) * t2261;
t2235 = qJD(2) * t2322 + t2267 * t2324;
t2260 = sin(pkin(6));
t2262 = cos(pkin(6));
t2263 = cos(pkin(5));
t2254 = t2263 * qJD(1) + qJD(2);
t2315 = t2262 * t2322;
t2220 = (t2260 * t2254 + t2315) * pkin(9);
t2253 = t2263 * qJDD(1) + qJDD(2);
t2268 = sin(qJ(1));
t2273 = cos(qJ(1));
t2249 = -t2273 * g(1) - t2268 * g(2);
t2274 = qJD(1) ^ 2;
t2232 = -t2274 * pkin(1) + pkin(8) * t2324 + t2249;
t2248 = t2268 * g(1) - t2273 * g(2);
t2231 = t2274 * t2261 * pkin(8) + qJDD(1) * pkin(1) + t2248;
t2335 = t2231 * t2263;
t2317 = -t2267 * t2232 + t2272 * t2335;
t2279 = t2253 * pkin(2) + t2254 * t2220 + t2317;
t2343 = qJD(1) * t2261;
t2347 = pkin(9) * t2260;
t2344 = qJD(1) * (-pkin(2) * t2272 - t2267 * t2347) * t2343;
t2281 = -g(3) * t2272 - t2267 * t2344;
t2331 = t2261 * t2267;
t2323 = qJD(1) * t2331;
t2236 = -qJD(2) * t2323 + t2272 * t2324;
t2345 = t2263 * g(3);
t2313 = -t2236 * pkin(2) - t2345;
t2346 = pkin(9) * t2262;
t2227 = t2254 * pkin(2) - t2323 * t2346;
t2358 = -t2231 + (-t2220 * t2272 + t2227 * t2267) * qJD(1);
t2360 = t2262 * (-t2235 * t2346 + t2261 * t2281 + t2279) + t2260 * (-t2235 * t2347 + t2358 * t2261 + t2313);
t2271 = cos(qJ(3));
t2266 = sin(qJ(3));
t2328 = t2262 * t2266;
t2333 = t2260 * t2266;
t2208 = t2254 * t2333 + (t2267 * t2271 + t2272 * t2328) * t2343;
t2223 = -t2262 * t2254 + t2260 * t2322 - qJD(3);
t2265 = sin(qJ(4));
t2270 = cos(qJ(4));
t2193 = t2265 * t2208 + t2270 * t2223;
t2192 = qJD(5) + t2193;
t2359 = qJD(5) + t2192;
t2195 = t2270 * t2208 - t2265 * t2223;
t2332 = t2260 * t2271;
t2206 = -t2254 * t2332 + t2266 * t2323 - t2271 * t2315;
t2204 = qJD(4) + t2206;
t2264 = sin(qJ(5));
t2269 = cos(qJ(5));
t2172 = t2264 * t2195 - t2269 * t2204;
t2357 = t2172 ^ 2;
t2174 = t2269 * t2195 + t2264 * t2204;
t2356 = t2174 ^ 2;
t2355 = t2192 ^ 2;
t2354 = t2193 ^ 2;
t2353 = t2195 ^ 2;
t2352 = t2204 ^ 2;
t2351 = t2206 ^ 2;
t2350 = t2208 ^ 2;
t2349 = t2223 ^ 2;
t2348 = t2254 ^ 2;
t2342 = t2174 * t2172;
t2341 = t2195 * t2193;
t2340 = t2206 * t2223;
t2339 = t2208 * t2206;
t2337 = t2223 * t2208;
t2334 = t2261 ^ 2 * t2274;
t2329 = t2262 * t2236;
t2327 = qJD(4) - t2204;
t2326 = qJD(5) - t2192;
t2325 = t2272 * t2232 + t2267 * t2335;
t2167 = -t2254 * t2227 + (-g(3) * t2267 + t2272 * t2344) * t2261 + (t2260 * t2253 + t2329) * pkin(9) + t2325;
t2131 = t2271 * t2167 + t2360 * t2266;
t2190 = t2206 * pkin(3) - t2208 * pkin(10);
t2210 = -t2260 * t2236 + t2262 * t2253 + qJDD(3);
t2122 = -t2349 * pkin(3) + t2210 * pkin(10) - t2206 * t2190 + t2131;
t2147 = -t2260 * t2279 + t2262 * t2313 + (-t2260 * t2281 + t2262 * t2358) * t2261;
t2314 = -t2208 * qJD(3) - t2266 * t2235 + t2253 * t2332 + t2271 * t2329;
t2157 = -t2314 - t2337;
t2182 = -t2206 * qJD(3) + t2271 * t2235 + t2236 * t2328 + t2253 * t2333;
t2318 = -t2182 - t2340;
t2275 = t2157 * pkin(3) + t2318 * pkin(10) + t2147;
t2093 = t2270 * t2122 + t2265 * t2275;
t2092 = -t2265 * t2122 + t2270 * t2275;
t2287 = -t2270 * t2182 - t2265 * t2210;
t2152 = -t2193 * qJD(4) - t2287;
t2282 = qJDD(4) - t2314;
t2321 = -t2264 * t2152 + t2269 * t2282;
t2320 = t2204 * t2193 - t2152;
t2319 = t2265 * t2182 - t2270 * t2210;
t2316 = t2254 * t2322;
t2312 = t2266 * t2167 - t2360 * t2271;
t2168 = t2193 * pkin(4) - t2195 * pkin(11);
t2080 = -t2352 * pkin(4) + pkin(11) * t2282 - t2193 * t2168 + t2093;
t2121 = -t2210 * pkin(3) - t2349 * pkin(10) + t2208 * t2190 + t2312;
t2142 = (qJD(4) + t2204) * t2195 + t2319;
t2087 = t2142 * pkin(4) + t2320 * pkin(11) + t2121;
t2067 = -t2264 * t2080 + t2269 * t2087;
t2068 = t2269 * t2080 + t2264 * t2087;
t2046 = -t2264 * t2067 + t2269 * t2068;
t2079 = -pkin(4) * t2282 - t2352 * pkin(11) + t2195 * t2168 - t2092;
t2043 = t2265 * t2046 - t2270 * t2079;
t2044 = t2270 * t2046 + t2265 * t2079;
t2045 = t2269 * t2067 + t2264 * t2068;
t2310 = t2044 * t2266 - t2045 * t2271;
t2031 = -t2260 * t2043 + t2310 * t2262;
t2034 = t2271 * t2044 + t2266 * t2045;
t2311 = t2031 * t2272 + t2034 * t2267;
t2069 = t2270 * t2092 + t2265 * t2093;
t2070 = -t2265 * t2092 + t2270 * t2093;
t2305 = t2070 * t2266 - t2121 * t2271;
t2049 = -t2260 * t2069 + t2305 * t2262;
t2063 = t2271 * t2070 + t2266 * t2121;
t2309 = t2049 * t2272 + t2063 * t2267;
t2116 = -t2326 * t2174 + t2321;
t2278 = -t2269 * t2152 - t2264 * t2282;
t2118 = t2326 * t2172 + t2278;
t2091 = t2269 * t2116 - t2264 * t2118;
t2140 = -t2356 - t2357;
t2077 = t2265 * t2091 - t2270 * t2140;
t2078 = t2270 * t2091 + t2265 * t2140;
t2090 = t2264 * t2116 + t2269 * t2118;
t2304 = t2078 * t2266 - t2090 * t2271;
t2052 = -t2260 * t2077 + t2304 * t2262;
t2066 = t2271 * t2078 + t2266 * t2090;
t2308 = t2052 * t2272 + t2066 * t2267;
t2280 = -t2195 * qJD(4) - qJDD(5) - t2319;
t2128 = -t2280 - t2342;
t2146 = -t2355 - t2357;
t2108 = -t2264 * t2128 + t2269 * t2146;
t2115 = t2359 * t2174 - t2321;
t2083 = t2265 * t2108 - t2270 * t2115;
t2084 = t2270 * t2108 + t2265 * t2115;
t2107 = t2269 * t2128 + t2264 * t2146;
t2302 = t2084 * t2266 - t2107 * t2271;
t2056 = -t2260 * t2083 + t2262 * t2302;
t2072 = t2271 * t2084 + t2266 * t2107;
t2307 = t2056 * t2272 + t2072 * t2267;
t2129 = t2280 - t2342;
t2148 = -t2355 - t2356;
t2112 = t2269 * t2129 - t2264 * t2148;
t2117 = -t2359 * t2172 - t2278;
t2085 = t2265 * t2112 - t2270 * t2117;
t2086 = t2270 * t2112 + t2265 * t2117;
t2111 = t2264 * t2129 + t2269 * t2148;
t2301 = t2086 * t2266 - t2111 * t2271;
t2058 = -t2260 * t2085 + t2262 * t2301;
t2074 = t2271 * t2086 + t2266 * t2111;
t2306 = t2058 * t2272 + t2074 * t2267;
t2143 = -t2327 * t2195 - t2319;
t2145 = t2327 * t2193 + t2287;
t2113 = t2265 * t2143 + t2270 * t2145;
t2114 = t2270 * t2143 - t2265 * t2145;
t2153 = -t2353 - t2354;
t2297 = t2114 * t2266 - t2153 * t2271;
t2082 = -t2260 * t2113 + t2262 * t2297;
t2105 = t2271 * t2114 + t2266 * t2153;
t2303 = t2082 * t2272 + t2105 * t2267;
t2149 = t2282 - t2341;
t2156 = -t2352 - t2354;
t2132 = t2270 * t2149 + t2265 * t2156;
t2133 = -t2265 * t2149 + t2270 * t2156;
t2294 = t2133 * t2266 - t2142 * t2271;
t2095 = -t2260 * t2132 + t2262 * t2294;
t2109 = t2271 * t2133 + t2266 * t2142;
t2300 = t2095 * t2272 + t2109 * t2267;
t2295 = t2131 * t2266 - t2271 * t2312;
t2097 = -t2260 * t2147 + t2262 * t2295;
t2104 = t2271 * t2131 + t2266 * t2312;
t2299 = t2097 * t2272 + t2104 * t2267;
t2150 = -t2282 - t2341;
t2165 = -t2352 - t2353;
t2134 = t2265 * t2150 + t2270 * t2165;
t2135 = t2270 * t2150 - t2265 * t2165;
t2293 = t2135 * t2266 + t2271 * t2320;
t2099 = -t2260 * t2134 + t2262 * t2293;
t2110 = t2271 * t2135 - t2266 * t2320;
t2298 = t2099 * t2272 + t2110 * t2267;
t2171 = -t2350 - t2351;
t2158 = t2314 - t2337;
t2160 = -t2182 + t2340;
t2290 = t2158 * t2266 + t2160 * t2271;
t2127 = -t2260 * t2171 + t2262 * t2290;
t2141 = t2271 * t2158 - t2266 * t2160;
t2296 = t2127 * t2272 + t2141 * t2267;
t2177 = t2210 - t2339;
t2181 = -t2349 - t2351;
t2288 = t2177 * t2271 + t2181 * t2266;
t2137 = -t2260 * t2157 + t2262 * t2288;
t2151 = -t2266 * t2177 + t2271 * t2181;
t2292 = t2137 * t2272 + t2151 * t2267;
t2176 = -t2210 - t2339;
t2187 = -t2349 - t2350;
t2289 = t2176 * t2266 + t2187 * t2271;
t2139 = t2260 * t2318 + t2262 * t2289;
t2154 = t2271 * t2176 - t2266 * t2187;
t2291 = t2139 * t2272 + t2154 * t2267;
t2196 = -g(3) * t2330 + t2317;
t2197 = -g(3) * t2331 + t2325;
t2286 = t2196 * t2272 + t2197 * t2267;
t2212 = t2316 - t2235;
t2239 = t2254 * t2323;
t2213 = t2236 + t2239;
t2285 = t2212 * t2272 + t2213 * t2267;
t2258 = t2267 ^ 2;
t2225 = -t2258 * t2334 - t2348;
t2247 = t2272 * t2267 * t2334;
t2234 = t2247 - t2253;
t2284 = t2225 * t2272 + t2234 * t2267;
t2233 = t2247 + t2253;
t2259 = t2272 ^ 2;
t2237 = -t2259 * t2334 - t2348;
t2283 = t2233 * t2272 + t2237 * t2267;
t2246 = -t2268 * qJDD(1) - t2273 * t2274;
t2245 = t2273 * qJDD(1) - t2268 * t2274;
t2238 = (-t2258 - t2259) * t2334;
t2215 = -t2261 * t2231 - t2345;
t2214 = -t2236 + t2239;
t2211 = t2316 + t2235;
t2200 = -t2267 * t2233 + t2272 * t2237;
t2198 = -t2267 * t2225 + t2272 * t2234;
t2191 = -t2267 * t2212 + t2272 * t2213;
t2189 = -t2261 * t2214 + t2263 * t2283;
t2188 = t2263 * t2214 + t2261 * t2283;
t2186 = -t2261 * t2211 + t2263 * t2284;
t2185 = t2263 * t2211 + t2261 * t2284;
t2184 = -t2261 * t2238 + t2263 * t2285;
t2183 = t2263 * t2238 + t2261 * t2285;
t2175 = -t2267 * t2196 + t2272 * t2197;
t2162 = -t2261 * t2215 + t2263 * t2286;
t2161 = t2263 * t2215 + t2261 * t2286;
t2138 = t2260 * t2289 - t2262 * t2318;
t2136 = t2262 * t2157 + t2260 * t2288;
t2126 = t2262 * t2171 + t2260 * t2290;
t2125 = -t2267 * t2139 + t2272 * t2154;
t2120 = -t2267 * t2137 + t2272 * t2151;
t2106 = -t2267 * t2127 + t2272 * t2141;
t2103 = -t2261 * t2138 + t2263 * t2291;
t2102 = t2263 * t2138 + t2261 * t2291;
t2101 = -t2261 * t2136 + t2263 * t2292;
t2100 = t2263 * t2136 + t2261 * t2292;
t2098 = t2262 * t2134 + t2260 * t2293;
t2096 = t2262 * t2147 + t2260 * t2295;
t2094 = t2262 * t2132 + t2260 * t2294;
t2089 = -t2261 * t2126 + t2263 * t2296;
t2088 = t2263 * t2126 + t2261 * t2296;
t2081 = t2262 * t2113 + t2260 * t2297;
t2076 = -t2267 * t2099 + t2272 * t2110;
t2075 = -t2267 * t2095 + t2272 * t2109;
t2073 = -t2267 * t2097 + t2272 * t2104;
t2071 = -t2267 * t2082 + t2272 * t2105;
t2065 = -t2261 * t2098 + t2263 * t2298;
t2064 = t2263 * t2098 + t2261 * t2298;
t2062 = -t2261 * t2094 + t2263 * t2300;
t2061 = t2263 * t2094 + t2261 * t2300;
t2060 = -t2261 * t2096 + t2263 * t2299;
t2059 = t2263 * t2096 + t2261 * t2299;
t2057 = t2262 * t2085 + t2260 * t2301;
t2055 = t2262 * t2083 + t2260 * t2302;
t2054 = -t2261 * t2081 + t2263 * t2303;
t2053 = t2263 * t2081 + t2261 * t2303;
t2051 = t2262 * t2077 + t2304 * t2260;
t2050 = -t2267 * t2058 + t2272 * t2074;
t2048 = t2262 * t2069 + t2305 * t2260;
t2047 = -t2267 * t2056 + t2272 * t2072;
t2042 = -t2267 * t2052 + t2272 * t2066;
t2041 = -t2267 * t2049 + t2272 * t2063;
t2040 = -t2261 * t2057 + t2306 * t2263;
t2039 = t2263 * t2057 + t2306 * t2261;
t2038 = -t2261 * t2055 + t2307 * t2263;
t2037 = t2263 * t2055 + t2307 * t2261;
t2036 = -t2261 * t2051 + t2308 * t2263;
t2035 = t2263 * t2051 + t2308 * t2261;
t2033 = -t2261 * t2048 + t2309 * t2263;
t2032 = t2263 * t2048 + t2309 * t2261;
t2030 = t2262 * t2043 + t2310 * t2260;
t2029 = -t2267 * t2031 + t2272 * t2034;
t2028 = -t2261 * t2030 + t2311 * t2263;
t2027 = t2263 * t2030 + t2311 * t2261;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2246, -t2245, 0, -t2268 * t2248 + t2273 * t2249, 0, 0, 0, 0, 0, 0, -t2268 * t2189 + t2273 * t2200, -t2268 * t2186 + t2273 * t2198, -t2268 * t2184 + t2273 * t2191, -t2268 * t2162 + t2273 * t2175, 0, 0, 0, 0, 0, 0, -t2268 * t2101 + t2273 * t2120, -t2268 * t2103 + t2273 * t2125, -t2268 * t2089 + t2273 * t2106, -t2268 * t2060 + t2273 * t2073, 0, 0, 0, 0, 0, 0, -t2268 * t2062 + t2273 * t2075, -t2268 * t2065 + t2273 * t2076, -t2268 * t2054 + t2273 * t2071, -t2268 * t2033 + t2273 * t2041, 0, 0, 0, 0, 0, 0, -t2268 * t2038 + t2273 * t2047, -t2268 * t2040 + t2273 * t2050, -t2268 * t2036 + t2273 * t2042, -t2268 * t2028 + t2273 * t2029; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2245, t2246, 0, t2273 * t2248 + t2268 * t2249, 0, 0, 0, 0, 0, 0, t2273 * t2189 + t2268 * t2200, t2273 * t2186 + t2268 * t2198, t2273 * t2184 + t2268 * t2191, t2273 * t2162 + t2268 * t2175, 0, 0, 0, 0, 0, 0, t2273 * t2101 + t2268 * t2120, t2273 * t2103 + t2268 * t2125, t2273 * t2089 + t2268 * t2106, t2273 * t2060 + t2268 * t2073, 0, 0, 0, 0, 0, 0, t2273 * t2062 + t2268 * t2075, t2273 * t2065 + t2268 * t2076, t2273 * t2054 + t2268 * t2071, t2273 * t2033 + t2268 * t2041, 0, 0, 0, 0, 0, 0, t2273 * t2038 + t2268 * t2047, t2273 * t2040 + t2268 * t2050, t2273 * t2036 + t2268 * t2042, t2273 * t2028 + t2268 * t2029; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2188, t2185, t2183, t2161, 0, 0, 0, 0, 0, 0, t2100, t2102, t2088, t2059, 0, 0, 0, 0, 0, 0, t2061, t2064, t2053, t2032, 0, 0, 0, 0, 0, 0, t2037, t2039, t2035, t2027; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2274, -qJDD(1), 0, t2249, 0, 0, 0, 0, 0, 0, t2200, t2198, t2191, t2175, 0, 0, 0, 0, 0, 0, t2120, t2125, t2106, t2073, 0, 0, 0, 0, 0, 0, t2075, t2076, t2071, t2041, 0, 0, 0, 0, 0, 0, t2047, t2050, t2042, t2029; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2274, 0, t2248, 0, 0, 0, 0, 0, 0, t2189, t2186, t2184, t2162, 0, 0, 0, 0, 0, 0, t2101, t2103, t2089, t2060, 0, 0, 0, 0, 0, 0, t2062, t2065, t2054, t2033, 0, 0, 0, 0, 0, 0, t2038, t2040, t2036, t2028; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2188, t2185, t2183, t2161, 0, 0, 0, 0, 0, 0, t2100, t2102, t2088, t2059, 0, 0, 0, 0, 0, 0, t2061, t2064, t2053, t2032, 0, 0, 0, 0, 0, 0, t2037, t2039, t2035, t2027; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2237, t2234, t2213, t2197, 0, 0, 0, 0, 0, 0, t2151, t2154, t2141, t2104, 0, 0, 0, 0, 0, 0, t2109, t2110, t2105, t2063, 0, 0, 0, 0, 0, 0, t2072, t2074, t2066, t2034; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2233, t2225, t2212, t2196, 0, 0, 0, 0, 0, 0, t2137, t2139, t2127, t2097, 0, 0, 0, 0, 0, 0, t2095, t2099, t2082, t2049, 0, 0, 0, 0, 0, 0, t2056, t2058, t2052, t2031; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2214, t2211, t2238, t2215, 0, 0, 0, 0, 0, 0, t2136, t2138, t2126, t2096, 0, 0, 0, 0, 0, 0, t2094, t2098, t2081, t2048, 0, 0, 0, 0, 0, 0, t2055, t2057, t2051, t2030; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2181, t2176, t2158, t2131, 0, 0, 0, 0, 0, 0, t2133, t2135, t2114, t2070, 0, 0, 0, 0, 0, 0, t2084, t2086, t2078, t2044; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2177, t2187, t2160, -t2312, 0, 0, 0, 0, 0, 0, -t2142, t2320, -t2153, -t2121, 0, 0, 0, 0, 0, 0, -t2107, -t2111, -t2090, -t2045; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2157, -t2318, t2171, t2147, 0, 0, 0, 0, 0, 0, t2132, t2134, t2113, t2069, 0, 0, 0, 0, 0, 0, t2083, t2085, t2077, t2043; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2156, t2150, t2143, t2093, 0, 0, 0, 0, 0, 0, t2108, t2112, t2091, t2046; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2149, t2165, t2145, t2092, 0, 0, 0, 0, 0, 0, -t2115, -t2117, -t2140, -t2079; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2142, -t2320, t2153, t2121, 0, 0, 0, 0, 0, 0, t2107, t2111, t2090, t2045; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2146, t2129, t2116, t2068; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2128, t2148, t2118, t2067; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2115, t2117, t2140, t2079;];
f_new_reg = t1;
