% Calculate minimal parameter regressor of Coriolis joint torque vector for
% S5RRRRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,alpha3,d1,d2,d3,d4,d5]';
% MDP [31x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S5RRRRR12_convert_par2_MPV_fixb.m
% 
% Output:
% tauc [5x1]
%   joint torques required to compensate Coriolis and centrifugal load

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:58
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc = S5RRRRR12_coriolisvecJ_fixb_mdp_slag_vp(qJ, qJD, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(11,1),zeros(31,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR12_coriolisvecJ_fixb_mdp_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR12_coriolisvecJ_fixb_mdp_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S5RRRRR12_coriolisvecJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [31 1]), ...
  'S5RRRRR12_coriolisvecJ_fixb_mdp_slag_vp: MDP has to be [31x1] (double)'); 

%% Symbolic Calculation
% From coriolisvec_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:55:34
% EndTime: 2019-12-31 22:55:59
% DurationCPUTime: 12.46s
% Computational Cost: add. (11237->610), mult. (34217->863), div. (0->0), fcn. (28285->12), ass. (0->254)
t604 = cos(pkin(6));
t611 = cos(qJ(3));
t612 = cos(qJ(2));
t729 = t611 * t612;
t607 = sin(qJ(3));
t608 = sin(qJ(2));
t733 = t607 * t608;
t635 = -t604 * t733 + t729;
t603 = sin(pkin(5));
t715 = qJD(1) * t603;
t554 = t635 * t715;
t602 = sin(pkin(6));
t712 = qJD(3) * t611;
t691 = t602 * t712;
t767 = -t554 + t691;
t748 = cos(pkin(5));
t696 = pkin(1) * t748;
t671 = t612 * t696;
t591 = qJD(1) * t671;
t664 = t603 * (-pkin(9) * t604 - pkin(8));
t638 = t608 * t664;
t534 = qJD(1) * t638 + t591;
t672 = t608 * t696;
t617 = t612 * t664 - t672;
t535 = t617 * qJD(1);
t749 = pkin(9) * t602;
t627 = (pkin(2) * t608 - t612 * t749) * t603;
t562 = qJD(1) * t627;
t736 = t604 * t607;
t739 = t602 * t607;
t593 = pkin(9) * t739;
t735 = t604 * t611;
t756 = pkin(2) * t735 - t593;
t766 = t756 * qJD(3) - t611 * t534 - t535 * t736 - t562 * t739;
t479 = -t535 * t602 + t604 * t562;
t731 = t608 * t611;
t732 = t607 * t612;
t637 = t604 * t731 + t732;
t553 = t637 * t715;
t764 = pkin(3) * t553 - pkin(10) * t554 + t479 - (pkin(3) * t607 - pkin(10) * t611) * t602 * qJD(3);
t695 = t608 * t715;
t670 = t602 * t695;
t765 = pkin(10) * t670 - t766;
t606 = sin(qJ(4));
t610 = cos(qJ(4));
t572 = -t610 * t604 + t606 * t739;
t721 = -qJD(4) * t572 - t606 * t670 + t610 * t767;
t573 = t604 * t606 + t610 * t739;
t720 = qJD(4) * t573 + t606 * t767 + t610 * t670;
t713 = qJD(3) * t607;
t692 = t602 * t713;
t762 = t553 - t692;
t738 = t602 * t611;
t717 = pkin(2) * t736 + pkin(9) * t738;
t761 = t717 * qJD(3) - t607 * t534;
t694 = t612 * t715;
t667 = t604 * t694;
t581 = t611 * t667;
t683 = t748 * qJD(1);
t641 = t683 + qJD(2);
t628 = t641 * t602;
t669 = t607 * t695;
t502 = -t611 * t628 - t581 + t669;
t500 = qJD(4) + t502;
t636 = t604 * t732 + t731;
t626 = t636 * t603;
t504 = qJD(1) * t626 + t607 * t628;
t585 = t602 * t694;
t705 = t585 - qJD(3);
t619 = -t604 * t641 + t705;
t548 = t610 * t619;
t469 = t504 * t606 + t548;
t468 = qJD(5) + t469;
t599 = t603 ^ 2;
t704 = qJD(1) * qJD(2);
t760 = -0.2e1 * t599 * t704;
t759 = MDP(5) * (t608 ^ 2 - t612 ^ 2);
t758 = MDP(6) * t612;
t618 = pkin(2) * t748 + t638;
t533 = t671 + t618;
t559 = (-pkin(2) * t612 - t608 * t749 - pkin(1)) * t603;
t476 = -t533 * t602 + t604 * t559;
t686 = t748 * t602;
t754 = t604 * t729 - t733;
t526 = -t603 * t754 - t611 * t686;
t527 = t607 * t686 + t626;
t437 = pkin(3) * t526 - pkin(10) * t527 + t476;
t685 = t748 * t604;
t737 = t603 * t612;
t571 = t602 * t737 - t685;
t624 = pkin(8) * t737 + t672;
t521 = (t604 * t737 + t686) * pkin(9) + t624;
t698 = t611 * t521 + t533 * t736 + t559 * t739;
t442 = -pkin(10) * t571 + t698;
t757 = t606 * t437 + t610 * t442;
t566 = pkin(10) * t604 + t717;
t567 = (-pkin(3) * t611 - pkin(10) * t607 - pkin(2)) * t602;
t719 = t610 * t566 + t606 * t567;
t718 = t535 * t735 - (-pkin(3) * t695 - t562 * t611) * t602 + t761;
t708 = qJD(4) * t610;
t710 = qJD(4) * t606;
t755 = t566 * t710 - t567 * t708 + t764 * t606 + t765 * t610;
t501 = qJD(2) * pkin(2) + qJD(1) * t618 + t591;
t549 = qJD(1) * t559;
t464 = -t501 * t602 + t604 * t549;
t428 = pkin(3) * t502 - pkin(10) * t504 + t464;
t496 = t624 * qJD(1) + (t628 + t667) * pkin(9);
t440 = t611 * t496 + t501 * t736 + t549 * t739;
t430 = -pkin(10) * t619 + t440;
t398 = t428 * t606 + t430 * t610;
t659 = qJD(2) * t683;
t639 = pkin(1) * t659;
t589 = t612 * t639;
t631 = qJD(2) * t638;
t518 = qJD(1) * t631 + t589;
t537 = t617 * qJD(2);
t519 = qJD(1) * t537;
t563 = qJD(2) * t627;
t556 = qJD(1) * t563;
t689 = t604 * t712;
t623 = t496 * t713 - t501 * t689 - t611 * t518 - t519 * t736 - t549 * t691 - t556 * t739;
t687 = t603 * t704;
t666 = t608 * t687;
t643 = t602 * t666;
t409 = pkin(10) * t643 - t623;
t625 = qJD(3) * t628;
t665 = t612 * t687;
t675 = -t604 * qJD(2) - qJD(3);
t472 = qJD(3) * t581 + t669 * t675 + (t625 + t665) * t611;
t750 = qJD(2) * t637 + qJD(3) * t636;
t614 = t750 * t603;
t621 = t607 * t625;
t473 = qJD(1) * t614 + t621;
t474 = -t519 * t602 + t604 * t556;
t420 = pkin(3) * t473 - pkin(10) * t472 + t474;
t385 = -qJD(4) * t398 - t409 * t606 + t610 * t420;
t383 = -pkin(4) * t473 - t385;
t471 = t610 * t504 - t606 * t619;
t753 = t468 * (pkin(4) * t471 + pkin(11) * t468) + t383;
t439 = -t607 * t496 + t611 * (t501 * t604 + t549 * t602);
t752 = -t607 * t521 + t611 * (t533 * t604 + t559 * t602);
t592 = qJD(2) * t671;
t536 = t592 + t631;
t622 = -t521 * t713 + t533 * t689 + t611 * t536 + t537 * t736 + t559 * t691 + t563 * t739;
t714 = qJD(2) * t603;
t693 = t608 * t714;
t668 = t602 * t693;
t415 = pkin(10) * t668 + t622;
t663 = qJD(3) * t686;
t477 = t607 * t663 + t614;
t478 = t611 * t663 + (t635 * qJD(2) + qJD(3) * t754) * t603;
t480 = -t537 * t602 + t604 * t563;
t423 = pkin(3) * t477 - pkin(10) * t478 + t480;
t751 = -qJD(4) * t757 - t415 * t606 + t423 * t610;
t613 = qJD(1) ^ 2;
t425 = -qJD(4) * t548 + t610 * t472 - t504 * t710 + t606 * t643;
t605 = sin(qJ(5));
t609 = cos(qJ(5));
t706 = qJD(5) * t609;
t699 = t609 * t425 + t605 * t473 + t500 * t706;
t707 = qJD(5) * t605;
t393 = -t471 * t707 + t699;
t747 = t393 * t605;
t742 = t471 * t605;
t443 = -t609 * t500 + t742;
t746 = t443 * t468;
t445 = t471 * t609 + t500 * t605;
t745 = t445 * t468;
t744 = t469 * t500;
t743 = t471 * t500;
t741 = t502 * t610;
t740 = t599 * t613;
t679 = t606 * t472 - t610 * t643;
t426 = qJD(4) * t471 + t679;
t734 = t605 * t426;
t730 = t609 * t426;
t728 = t440 - t500 * (pkin(4) * t606 - pkin(11) * t610);
t458 = pkin(3) * t504 + pkin(10) * t502;
t727 = t610 * t439 + t606 * t458;
t724 = t762 * pkin(4) + qJD(4) * t719 - t606 * t765 + t764 * t610;
t540 = t573 * t605 + t609 * t738;
t723 = -qJD(5) * t540 - t605 * t762 + t609 * t721;
t701 = t605 * t738;
t722 = -qJD(5) * t701 + t573 * t706 + t605 * t721 + t609 * t762;
t711 = qJD(4) * t605;
t709 = qJD(4) * t609;
t703 = pkin(1) * t740;
t690 = t604 * t713;
t384 = t610 * t409 + t606 * t420 + t428 * t708 - t430 * t710;
t382 = pkin(11) * t473 + t384;
t412 = -t496 * t712 - t501 * t690 - t607 * t518 + t519 * t735 - t549 * t692 + t556 * t738;
t410 = -pkin(3) * t643 - t412;
t391 = pkin(4) * t426 - pkin(11) * t425 + t410;
t682 = -t382 * t605 + t609 * t391;
t680 = t425 * t605 - t609 * t473;
t678 = t500 * t610;
t677 = t468 * t609;
t588 = -pkin(4) * t610 - pkin(11) * t606 - pkin(3);
t676 = pkin(11) * t504 - qJD(5) * t588 + t727;
t674 = t599 * t608 * t612 * MDP(4);
t673 = -t521 * t712 - t533 * t690 - t607 * t536 - t559 * t692;
t661 = pkin(1) * t760;
t456 = t504 * t605 - t609 * t741;
t657 = t609 * t708 - t456;
t565 = t593 + (-pkin(2) * t611 - pkin(3)) * t604;
t483 = pkin(4) * t572 - pkin(11) * t573 + t565;
t656 = pkin(11) * t762 - qJD(5) * t483 + t755;
t485 = -pkin(11) * t738 + t719;
t655 = -pkin(4) * t720 + pkin(11) * t721 + qJD(5) * t485 - t718;
t654 = t382 * t609 + t391 * t605;
t396 = pkin(11) * t500 + t398;
t429 = pkin(3) * t619 - t439;
t401 = t469 * pkin(4) - t471 * pkin(11) + t429;
t389 = t396 * t609 + t401 * t605;
t653 = t396 * t605 - t401 * t609;
t403 = pkin(11) * t526 + t757;
t441 = pkin(3) * t571 - t752;
t481 = t527 * t606 + t571 * t610;
t482 = t527 * t610 - t571 * t606;
t413 = pkin(4) * t481 - pkin(11) * t482 + t441;
t652 = t403 * t609 + t413 * t605;
t651 = -t403 * t605 + t413 * t609;
t397 = t428 * t610 - t430 * t606;
t649 = t437 * t610 - t442 * t606;
t454 = t482 * t609 + t526 * t605;
t453 = t482 * t605 - t526 * t609;
t645 = -t566 * t606 + t567 * t610;
t644 = t602 ^ 2 * t666;
t642 = MDP(15) * t668;
t634 = -t468 * t706 - t734;
t633 = -t468 * t707 + t730;
t632 = -pkin(10) * t473 + t429 * t500;
t630 = t610 * t415 + t606 * t423 + t437 * t708 - t442 * t710;
t395 = -pkin(4) * t500 - t397;
t620 = -pkin(11) * t426 + (t395 + t397) * t468;
t616 = qJD(3) * t619;
t615 = t641 * t624;
t416 = -t537 * t735 + (-pkin(3) * t693 - t563 * t611) * t602 - t673;
t541 = t573 * t609 - t701;
t484 = pkin(4) * t738 - t645;
t455 = -t609 * t504 - t605 * t741;
t433 = -qJD(4) * t481 + t478 * t610 + t606 * t668;
t432 = qJD(4) * t482 + t478 * t606 - t610 * t668;
t407 = -pkin(4) * t504 + t439 * t606 - t458 * t610;
t402 = -pkin(4) * t526 - t649;
t400 = -qJD(5) * t453 + t433 * t609 + t477 * t605;
t399 = qJD(5) * t454 + t433 * t605 - t477 * t609;
t394 = qJD(5) * t445 + t680;
t392 = pkin(4) * t432 - pkin(11) * t433 + t416;
t387 = -pkin(4) * t477 - t751;
t386 = pkin(11) * t477 + t630;
t381 = -qJD(5) * t389 + t682;
t380 = -qJD(5) * t653 + t654;
t1 = [(-t585 + (t685 - t571) * qJD(1) - t675) * t642 + ((-qJD(5) * t652 - t386 * t605 + t392 * t609) * t468 + t651 * t426 + t381 * t481 - t653 * t432 + t387 * t443 + t402 * t394 + t383 * t453 + t395 * t399) * MDP(30) + (t622 * t619 - t623 * t571 + t480 * t504 + t476 * t472 + t474 * t527 + t464 * t478 + (-qJD(1) * t698 - t440) * t668) * MDP(17) + (-t384 * t526 - t398 * t477 + t410 * t482 + t416 * t471 + t441 * t425 + t429 * t433 - t473 * t757 - t500 * t630) * MDP(24) + (-MDP(7) * t693 + t714 * t758) * (0.2e1 * t683 + qJD(2)) + (-t478 * t619 - t472 * t571 + (qJD(1) * t527 + t504) * t668) * MDP(13) + (t477 * t619 + t473 * t571 + (-qJD(1) * t526 - t502) * t668) * MDP(14) + (-qJD(2) * t615 + t608 * t661 - t624 * t659) * MDP(9) + (-((t537 * t604 + t563 * t602) * t611 + t673) * t619 - t412 * t571 + t480 * t502 + t476 * t473 + t474 * t526 + t464 * t477 + (qJD(1) * t752 + t439) * t668) * MDP(16) + (-t393 * t453 - t394 * t454 - t399 * t445 - t400 * t443) * MDP(26) + (t393 * t454 + t400 * t445) * MDP(25) + t759 * t760 + (t385 * t526 + t397 * t477 + t410 * t481 + t416 * t469 + t441 * t426 + t429 * t432 + t649 * t473 + t500 * t751) * MDP(23) + 0.2e1 * t674 * t704 + (-t426 * t526 - t432 * t500 - t469 * t477 - t473 * t481) * MDP(21) + (t425 * t526 + t433 * t500 + t471 * t477 + t473 * t482) * MDP(20) + (t473 * t526 + t477 * t500) * MDP(22) + (-t472 * t526 - t473 * t527 - t477 * t504 - t478 * t502) * MDP(12) + (t472 * t527 + t478 * t504) * MDP(11) + (t426 * t481 + t432 * t468) * MDP(29) + (-t425 * t481 - t426 * t482 - t432 * t471 - t433 * t469) * MDP(19) + (t425 * t482 + t433 * t471) * MDP(18) + (-t394 * t481 - t399 * t468 - t426 * t453 - t432 * t443) * MDP(28) + (t393 * t481 + t400 * t468 + t426 * t454 + t432 * t445) * MDP(27) + (t612 * t661 - (-pkin(8) * t693 + t592) * t641 - (-pkin(8) * t666 + t589) * t748) * MDP(10) + (-(qJD(5) * t651 + t386 * t609 + t392 * t605) * t468 - t652 * t426 - t380 * t481 - t389 * t432 + t387 * t445 + t402 * t393 + t383 * t454 + t395 * t400) * MDP(31); (t645 * t473 - t385 * t738 + t565 * t426 + t410 * t572 + ((-qJD(4) * t566 - t764) * t610 + (-qJD(4) * t567 + t765) * t606) * t500 + t718 * t469 + t720 * t429 - t762 * t397) * MDP(23) + (-t394 * t572 - t426 * t540 - t443 * t720 - t468 * t722) * MDP(28) + (t393 * t572 + t426 * t541 + t445 * t720 + t468 * t723) * MDP(27) + (t393 * t541 + t445 * t723) * MDP(25) + (-t393 * t540 - t394 * t541 - t443 * t723 - t445 * t722) * MDP(26) + (-(t483 * t605 + t485 * t609) * t426 - t380 * t572 + t484 * t393 + t383 * t541 + (t605 * t655 + t609 * t656) * t468 + t724 * t445 + t723 * t395 - t720 * t389) * MDP(31) + (t426 * t572 + t468 * t720) * MDP(29) + (t425 * t573 + t471 * t721) * MDP(18) + (-t425 * t572 - t426 * t573 - t469 * t721 - t471 * t720) * MDP(19) + (-t674 + (t608 * MDP(7) - t758) * t603 * t748) * t613 + ((t483 * t609 - t485 * t605) * t426 + t381 * t572 + t484 * t394 + t383 * t540 + (t605 * t656 - t609 * t655) * t468 + t724 * t443 + t722 * t395 - t720 * t653) * MDP(30) + (t623 * t604 - t479 * t504 - t464 * t554 + (t464 * t712 - pkin(2) * t472 + t474 * t607 + (-qJD(2) * t717 + t440) * t695) * t602 + t766 * t619) * MDP(17) + (-pkin(8) * t665 + qJD(1) * t615 + (-t639 + t703) * t608) * MDP(9) + (t607 * t644 + t472 * t604 + t554 * t619 + (-t504 * t695 - t611 * t616) * t602) * MDP(13) + (t611 * t644 - t473 * t604 - t553 * t619 + (t502 * t695 + t607 * t616) * t602) * MDP(14) + (t472 * t739 + t504 * t767) * MDP(11) + t740 * t759 + (-t589 + t612 * t703 + (-pkin(8) * t695 + t591) * t683 + t591 * qJD(2)) * MDP(10) + (-t473 * t738 - t500 * t762) * MDP(22) + (-t425 * t738 - t471 * t762 + t473 * t573 + t500 * t721) * MDP(20) + (t426 * t738 + t469 * t762 - t473 * t572 - t500 * t720) * MDP(21) + (t412 * t604 - t602 * pkin(2) * t473 - t474 * t738 - t479 * t502 + (qJD(2) * t756 - t439) * t670 - t762 * t464 + ((t535 * t604 + t562 * t602) * t611 + t761) * t619) * MDP(16) + (t384 * t738 + t398 * t762 + t410 * t573 + t565 * t425 + t721 * t429 + t718 * t471 - t719 * t473 + t500 * t755) * MDP(24) - (t604 * t683 - t705) * MDP(15) * t670 + (t502 * t554 + t504 * t553 + (t472 * t611 - t473 * t607 + (-t502 * t611 - t504 * t607) * qJD(3)) * t602) * MDP(12); -t502 ^ 2 * MDP(12) + (-t502 * t619 + t472) * MDP(13) + (-t715 * t750 - t621) * MDP(14) + qJD(1) * t642 + (-t440 * t619 + t412) * MDP(16) + (-t439 * t619 + t464 * t502 + t623) * MDP(17) + (t425 * t606 + t471 * t678) * MDP(18) + ((t425 - t744) * t610 + (-t426 - t743) * t606) * MDP(19) + (t606 * t473 + t500 * t678) * MDP(20) + (-t500 ^ 2 * t606 + t610 * t473) * MDP(21) + (-pkin(3) * t426 - t440 * t469 + (-t410 + (-pkin(10) * qJD(4) - t458) * t500) * t610 + (t439 * t500 + t632) * t606) * MDP(23) + (-pkin(3) * t425 + t410 * t606 - t440 * t471 + (pkin(10) * t710 + t727) * t500 + t632 * t610) * MDP(24) + (t393 * t606 * t609 + (-t606 * t707 + t657) * t445) * MDP(25) + (t443 * t456 + t445 * t455 + (-t443 * t609 - t445 * t605) * t708 + (-t747 - t394 * t609 + (t443 * t605 - t445 * t609) * qJD(5)) * t606) * MDP(26) + (-t393 * t610 + t657 * t468 + (t445 * t500 + t633) * t606) * MDP(27) + (t394 * t610 + (-t605 * t708 + t455) * t468 + (-t443 * t500 + t634) * t606) * MDP(28) + (t468 * t500 * t606 - t426 * t610) * MDP(29) + (t588 * t730 - t395 * t455 - t407 * t443 + (t605 * t676 - t609 * t728) * t468 + (t395 * t711 - t381 + (qJD(4) * t443 + t634) * pkin(10)) * t610 + (t395 * t706 + t383 * t605 - t500 * t653 + (t468 * t711 + t394) * pkin(10)) * t606) * MDP(30) + (-t588 * t734 - t395 * t456 - t407 * t445 + (t605 * t728 + t609 * t676) * t468 + (t395 * t709 + t380 + (qJD(4) * t445 - t633) * pkin(10)) * t610 + (-t395 * t707 + t383 * t609 - t500 * t389 + (t468 * t709 + t393) * pkin(10)) * t606) * MDP(31) + (MDP(11) * t502 + MDP(12) * t504 - t619 * MDP(14) - t464 * MDP(16) - t471 * MDP(20) + t469 * MDP(21) - t500 * MDP(22) - t397 * MDP(23) + t398 * MDP(24)) * t504; -t469 ^ 2 * MDP(19) + (t425 + t744) * MDP(20) + (-t679 + t743) * MDP(21) + t473 * MDP(22) + (t398 * t500 + t385) * MDP(23) + (t397 * t500 + t429 * t469 - t384) * MDP(24) + (t445 * t677 + t747) * MDP(25) + ((t393 - t746) * t609 + (-t394 - t745) * t605) * MDP(26) + (t468 * t677 + t734) * MDP(27) + (-t468 ^ 2 * t605 + t730) * MDP(28) + (-pkin(4) * t394 - t398 * t443 + t620 * t605 - t609 * t753) * MDP(30) + (-pkin(4) * t393 - t398 * t445 + t605 * t753 + t620 * t609) * MDP(31) + (MDP(18) * t469 + t471 * MDP(19) - MDP(21) * qJD(4) - t429 * MDP(23) - t445 * MDP(27) + t443 * MDP(28) - t468 * MDP(29) + MDP(30) * t653 + t389 * MDP(31)) * t471; t445 * t443 * MDP(25) + (-t443 ^ 2 + t445 ^ 2) * MDP(26) + (t699 + t746) * MDP(27) + (-t680 + t745) * MDP(28) + t426 * MDP(29) + (t389 * t468 - t395 * t445 + t682) * MDP(30) + (t395 * t443 - t468 * t653 - t654) * MDP(31) + (-MDP(27) * t742 - MDP(28) * t445 - MDP(30) * t389 + MDP(31) * t653) * qJD(5);];
tauc = t1;
