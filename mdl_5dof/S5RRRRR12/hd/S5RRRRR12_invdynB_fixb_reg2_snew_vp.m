% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,alpha3,d1,d2,d3,d4,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:58
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRRR12_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR12_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR12_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR12_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR12_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S5RRRRR12_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:56:06
% EndTime: 2019-12-31 22:57:11
% DurationCPUTime: 58.30s
% Computational Cost: add. (538252->939), mult. (1341438->1573), div. (0->0), fcn. (1122324->14), ass. (0->700)
t1021 = sin(pkin(6));
t1023 = cos(pkin(6));
t1024 = cos(pkin(5));
t1198 = qJD(1) * t1024;
t1013 = qJD(2) + t1198;
t1012 = t1013 ^ 2;
t1022 = sin(pkin(5));
t1028 = sin(qJ(2));
t1033 = cos(qJ(2));
t1029 = sin(qJ(1));
t1034 = cos(qJ(1));
t1009 = t1029 * g(1) - g(2) * t1034;
t1088 = qJDD(1) * pkin(1) + t1009;
t1059 = t1024 * t1088;
t1234 = pkin(9) * t1021;
t1183 = t1028 * t1234;
t1081 = t1022 * (-pkin(2) * t1033 - t1183);
t1010 = g(1) * t1034 + g(2) * t1029;
t1240 = qJD(1) ^ 2;
t1232 = t1240 * pkin(1);
t1082 = t1010 + t1232;
t1162 = qJDD(1) * t1024 + qJDD(2);
t1092 = t1162 * pkin(2);
t1233 = pkin(9) * t1023;
t1172 = -pkin(8) - t1233;
t1184 = qJDD(1) * t1028;
t1189 = t1023 * t1033;
t1231 = t1024 * pkin(8);
t1038 = t1012 * t1234 + t1028 * t1082 + t1033 * t1059 + t1092 + (((-t1028 * t1081 + t1033 * t1231) * qJD(1) + (-qJD(2) + t1013) * pkin(9) * t1189) * qJD(1) - t1033 * g(3) + t1172 * t1184) * t1022;
t1019 = t1028 ^ 2;
t1020 = t1033 ^ 2;
t1186 = t1019 + t1020;
t1187 = qJD(2) + t1013;
t1193 = t1013 * t1028;
t1199 = qJD(1) * t1022;
t1230 = t1024 * g(3);
t1191 = t1022 * t1028;
t1170 = qJD(1) * t1191;
t1185 = qJDD(1) * t1022;
t991 = -qJD(2) * t1170 + t1033 * t1185;
t1239 = t991 * pkin(2);
t1040 = -t1239 - t1230 + ((-pkin(1) - t1183) * qJDD(1) + (pkin(2) * t1193 - pkin(8) * t1199 + (-t1187 * t1033 * t1021 - t1023 * t1186 * t1199) * pkin(9)) * qJD(1) - t1009) * t1022;
t845 = t1021 * t1038 - t1023 * t1040;
t1025 = sin(qJ(5));
t1026 = sin(qJ(4));
t1031 = cos(qJ(4));
t1027 = sin(qJ(3));
t1032 = cos(qJ(3));
t1051 = t1021 * t1162 + t1023 * t991;
t1196 = qJD(1) * t1033;
t1083 = qJD(2) * t1196 + t1184;
t1055 = t1083 * t1022;
t1042 = t1027 * t1051 + t1032 * t1055;
t1190 = t1022 * t1033;
t1169 = qJD(1) * t1190;
t1161 = t1023 * t1169;
t1195 = t1013 * t1021;
t1058 = t1161 + t1195;
t968 = t1027 * t1170 - t1032 * t1058;
t926 = -t968 * qJD(3) + t1042;
t970 = t1027 * t1195 + (t1027 * t1189 + t1028 * t1032) * t1199;
t1160 = t1021 * t1169;
t987 = t1013 * t1023 + qJD(3) - t1160;
t949 = t1026 * t987 + t1031 * t970;
t974 = -t1021 * t991 + t1023 * t1162 + qJDD(3);
t1180 = qJD(4) * t949 + t1026 * t926 - t1031 * t974;
t1163 = qJDD(5) + t1180;
t1030 = cos(qJ(5));
t963 = qJD(4) + t968;
t909 = t1025 * t949 - t1030 * t963;
t911 = t1025 * t963 + t1030 * t949;
t859 = t911 * t909;
t1246 = -t859 + t1163;
t1253 = t1025 * t1246;
t947 = t1026 * t970 - t1031 * t987;
t899 = t949 * t947;
t1046 = t1027 * t1055 - t1032 * t1051;
t1045 = t970 * qJD(3) + t1046;
t925 = qJDD(4) + t1045;
t1247 = -t899 + t925;
t1252 = t1026 * t1247;
t1251 = t1030 * t1246;
t1250 = t1031 * t1247;
t1249 = t1021 * t1040 + t1023 * t1038;
t1229 = t949 * t963;
t1248 = t1180 + t1229;
t868 = -qJD(4) * t947 + t1026 * t974 + t1031 * t926;
t918 = t963 * t947;
t837 = -t918 + t868;
t952 = t987 * t968;
t888 = -t952 + t926;
t1181 = qJD(5) * t909 - t1025 * t925 - t1030 * t868;
t944 = qJD(5) + t947;
t874 = t944 * t909;
t776 = -t874 - t1181;
t1228 = t968 * t970;
t1060 = t974 - t1228;
t1245 = t1027 * t1060;
t1244 = t1032 * t1060;
t1165 = t1025 * t868 - t1030 * t925;
t773 = (qJD(5) - t944) * t911 + t1165;
t906 = t909 ^ 2;
t907 = t911 ^ 2;
t943 = t944 ^ 2;
t945 = t947 ^ 2;
t946 = t949 ^ 2;
t1242 = t963 ^ 2;
t964 = t968 ^ 2;
t965 = t970 ^ 2;
t1241 = t987 ^ 2;
t1018 = t1022 ^ 2;
t1238 = pkin(3) * t1027;
t1237 = pkin(3) * t1032;
t1236 = pkin(4) * t1026;
t1235 = pkin(8) * t1022;
t1036 = -t888 * pkin(10) + (t970 * t987 + t1045) * pkin(3) - t845;
t1014 = g(3) * t1191;
t1056 = pkin(8) * t1185 - t1010;
t1188 = t1024 * t1028;
t896 = t1033 * t1056 + t1028 * t1059 - t1014 - pkin(2) * t1012 + t1051 * pkin(9) + (-pkin(1) * t1196 + (t1193 * t1233 + (pkin(8) * t1188 + t1033 * t1081) * qJD(1)) * t1022) * qJD(1);
t1207 = t1032 * t896;
t937 = pkin(3) * t968 - pkin(10) * t970;
t782 = -t1241 * pkin(3) + t974 * pkin(10) + t1027 * t1249 - t968 * t937 + t1207;
t714 = t1026 * t1036 + t1031 * t782;
t897 = pkin(4) * t947 - pkin(11) * t949;
t675 = -pkin(4) * t1242 + pkin(11) * t925 - t897 * t947 + t714;
t802 = t1027 * t896 - t1032 * t1249;
t781 = -pkin(3) * t974 - pkin(10) * t1241 + t937 * t970 + t802;
t705 = pkin(4) * t1248 - pkin(11) * t837 + t781;
t631 = t1025 * t705 + t1030 * t675;
t713 = t1026 * t782 - t1031 * t1036;
t674 = -pkin(4) * t925 - pkin(11) * t1242 + t897 * t949 + t713;
t1226 = t1025 * t674;
t798 = t859 + t1163;
t1225 = t1025 * t798;
t1224 = t1025 * t944;
t1223 = t1026 * t781;
t855 = t899 + t925;
t1222 = t1026 * t855;
t1221 = t1026 * t963;
t1220 = t1027 * t845;
t913 = -t974 - t1228;
t1219 = t1027 * t913;
t1218 = t1027 * t987;
t1049 = t1235 * t1240 + t1088;
t981 = t1022 * t1049 + t1230;
t1217 = t1028 * t981;
t1166 = t1028 * t1033 * t1240;
t1008 = t1018 * t1166;
t989 = t1008 + t1162;
t1216 = t1028 * t989;
t990 = -t1008 + t1162;
t1215 = t1028 * t990;
t1214 = t1030 * t674;
t1213 = t1030 * t798;
t1212 = t1030 * t944;
t1211 = t1031 * t781;
t1210 = t1031 * t855;
t1209 = t1031 * t963;
t1208 = t1032 * t845;
t1206 = t1032 * t913;
t1205 = t1032 * t987;
t1204 = t1033 * t981;
t1203 = t1033 * t989;
t1202 = t1033 * t990;
t1201 = qJD(3) + t987;
t1197 = qJD(1) * t1028;
t1194 = t1013 * t1022;
t1192 = t1018 * t1240;
t1179 = t1021 * t1228;
t1178 = t1023 * t1228;
t1177 = t1026 * t859;
t1176 = t1027 * t899;
t1175 = t1031 * t859;
t1174 = t1032 * t899;
t1173 = -pkin(4) * t1031 - pkin(3);
t1171 = qJD(1) * t1194;
t1168 = t1019 * t1192;
t1167 = t1020 * t1192;
t630 = t1025 * t675 - t1030 * t705;
t637 = t1026 * t713 + t1031 * t714;
t1164 = -t1013 + t1198;
t984 = -t1009 * t1029 - t1010 * t1034;
t1007 = qJDD(1) * t1034 - t1029 * t1240;
t1159 = -pkin(7) * t1007 - g(3) * t1029;
t988 = -t1168 - t1012;
t957 = -t1028 * t988 - t1202;
t1158 = pkin(8) * t957 - t1217;
t995 = -t1012 - t1167;
t961 = t1033 * t995 - t1216;
t1157 = pkin(8) * t961 + t1204;
t932 = -t965 - t1241;
t871 = -t1027 * t932 + t1206;
t1156 = pkin(9) * t871 - t1220;
t924 = -t1241 - t964;
t864 = t1032 * t924 - t1245;
t1155 = pkin(9) * t864 + t1208;
t577 = t1025 * t631 - t1030 * t630;
t578 = t1025 * t630 + t1030 * t631;
t636 = t1026 * t714 - t1031 * t713;
t562 = t1026 * t674 + t1031 * t578;
t1154 = t1027 * t562 - t1032 * t577;
t1153 = t1027 * t637 - t1032 * t781;
t777 = -t874 + t1181;
t711 = -t1025 * t777 - t1030 * t773;
t826 = t906 + t907;
t670 = -t1026 * t826 + t1031 * t711;
t709 = -t1025 * t773 + t1030 * t777;
t1152 = t1027 * t670 - t1032 * t709;
t774 = (-qJD(5) - t944) * t911 - t1165;
t710 = -t1025 * t776 + t1030 * t774;
t858 = -t907 + t906;
t683 = -t1026 * t858 + t1031 * t710;
t708 = -t1025 * t774 - t1030 * t776;
t1151 = t1027 * t683 + t1032 * t708;
t843 = -t943 - t906;
t751 = t1030 * t843 - t1253;
t688 = -t1026 * t774 + t1031 * t751;
t750 = t1025 * t843 + t1251;
t1150 = t1027 * t688 - t1032 * t750;
t849 = -t907 - t943;
t756 = -t1025 * t849 - t1213;
t693 = t1026 * t776 + t1031 * t756;
t755 = t1030 * t849 - t1225;
t1149 = t1027 * t693 - t1032 * t755;
t873 = -t907 + t943;
t767 = -t1025 * t873 + t1251;
t701 = -t1026 * t777 + t1031 * t767;
t765 = -t1030 * t873 - t1253;
t1148 = t1027 * t701 + t1032 * t765;
t872 = t906 - t943;
t768 = t1030 * t872 - t1225;
t702 = -t1026 * t773 + t1031 * t768;
t766 = -t1025 * t872 - t1213;
t1147 = t1027 * t702 + t1032 * t766;
t800 = -qJD(5) * t911 - t1165;
t770 = -t1025 * t800 + t1212 * t909;
t741 = t1031 * t770 - t1177;
t769 = -t1030 * t800 - t1224 * t909;
t1146 = t1027 * t741 + t1032 * t769;
t772 = -t1030 * t1181 - t1224 * t911;
t742 = t1031 * t772 + t1177;
t771 = t1025 * t1181 - t1212 * t911;
t1145 = t1027 * t742 + t1032 * t771;
t763 = -t1026 * t837 - t1031 * t1248;
t898 = -t946 + t945;
t1144 = t1027 * t763 + t1032 * t898;
t836 = -t1180 + t1229;
t838 = -t918 - t868;
t764 = -t1026 * t838 + t1031 * t836;
t869 = t945 + t946;
t1143 = t1027 * t764 + t1032 * t869;
t815 = (t1025 * t911 - t1030 * t909) * t944;
t786 = t1026 * t1163 + t1031 * t815;
t814 = (t1025 * t909 + t1030 * t911) * t944;
t1142 = t1027 * t786 + t1032 * t814;
t1047 = t1024 * t1049;
t1050 = t1058 * qJD(1);
t803 = t1207 + (t1023 * (-g(3) * t1190 + t1033 * t1047 + t1092) + t1021 * (-t981 - t1239) + (t1023 * (-qJD(2) * t1161 + t1013 * t1058) + t1021 * (-qJD(2) * t1160 - t1050 * t1190)) * pkin(9) + (t1023 * t1082 + (pkin(2) * t1050 + (-pkin(9) * t1021 ^ 2 + t1023 * t1172) * qJDD(1)) * t1022) * t1028) * t1027;
t1141 = t1027 * t803 - t1032 * t802;
t738 = t1027 * t802 + t1032 * t803;
t877 = -t1242 - t945;
t807 = t1031 * t877 - t1252;
t1140 = t1027 * t807 - t1032 * t1248;
t893 = -t946 - t1242;
t811 = -t1026 * t893 - t1210;
t1139 = t1027 * t811 - t1032 * t837;
t917 = -t946 + t1242;
t820 = -t1026 * t917 + t1250;
t1138 = t1027 * t820 + t1032 * t838;
t916 = t945 - t1242;
t821 = t1031 * t916 - t1222;
t1137 = t1027 * t821 - t1032 * t836;
t861 = (t1026 * t949 - t1031 * t947) * t963;
t1136 = t1027 * t861 - t1032 * t925;
t884 = t1201 * t970 + t1046;
t1135 = -t1027 * t884 + t1032 * t888;
t1044 = (-qJD(3) + t987) * t970 - t1046;
t889 = t952 + t926;
t1134 = t1027 * t1044 - t1032 * t889;
t1133 = t1032 * t932 + t1219;
t950 = t964 - t1241;
t1132 = t1027 * t950 - t1206;
t951 = -t965 + t1241;
t1131 = t1032 * t951 + t1245;
t1130 = t1027 * t924 + t1244;
t561 = t1026 * t578 - t1031 * t674;
t521 = -t1021 * t561 + t1023 * t1154;
t539 = t1027 * t577 + t1032 * t562;
t1129 = t1028 * t539 + t1033 * t521;
t581 = -t1021 * t636 + t1023 * t1153;
t625 = t1027 * t781 + t1032 * t637;
t1128 = t1028 * t625 + t1033 * t581;
t669 = t1026 * t711 + t1031 * t826;
t596 = -t1021 * t669 + t1023 * t1152;
t629 = t1027 * t709 + t1032 * t670;
t1127 = t1028 * t629 + t1033 * t596;
t682 = t1026 * t710 + t1031 * t858;
t602 = -t1021 * t682 + t1023 * t1151;
t634 = -t1027 * t708 + t1032 * t683;
t1126 = t1028 * t634 + t1033 * t602;
t687 = t1026 * t751 + t1031 * t774;
t612 = -t1021 * t687 + t1023 * t1150;
t647 = t1027 * t750 + t1032 * t688;
t1125 = t1028 * t647 + t1033 * t612;
t692 = t1026 * t756 - t1031 * t776;
t614 = -t1021 * t692 + t1023 * t1149;
t653 = t1027 * t755 + t1032 * t693;
t1124 = t1028 * t653 + t1033 * t614;
t699 = t1026 * t767 + t1031 * t777;
t620 = -t1021 * t699 + t1023 * t1148;
t657 = -t1027 * t765 + t1032 * t701;
t1123 = t1028 * t657 + t1033 * t620;
t700 = t1026 * t768 + t1031 * t773;
t621 = -t1021 * t700 + t1023 * t1147;
t658 = -t1027 * t766 + t1032 * t702;
t1122 = t1028 * t658 + t1033 * t621;
t739 = t1026 * t770 + t1175;
t641 = -t1021 * t739 + t1023 * t1146;
t680 = -t1027 * t769 + t1032 * t741;
t1121 = t1028 * t680 + t1033 * t641;
t740 = t1026 * t772 - t1175;
t642 = -t1021 * t740 + t1023 * t1145;
t681 = -t1027 * t771 + t1032 * t742;
t1120 = t1028 * t681 + t1033 * t642;
t785 = t1026 * t815 - t1031 * t1163;
t672 = -t1021 * t785 + t1023 * t1142;
t732 = -t1027 * t814 + t1032 * t786;
t1119 = t1028 * t732 + t1033 * t672;
t762 = t1026 * t836 + t1031 * t838;
t679 = -t1021 * t762 + t1023 * t1143;
t743 = -t1027 * t869 + t1032 * t764;
t1118 = t1028 * t743 + t1033 * t679;
t761 = -t1026 * t1248 + t1031 * t837;
t686 = -t1021 * t761 + t1023 * t1144;
t748 = -t1027 * t898 + t1032 * t763;
t1117 = t1028 * t748 + t1033 * t686;
t806 = t1026 * t877 + t1250;
t716 = -t1021 * t806 + t1023 * t1140;
t753 = t1027 * t1248 + t1032 * t807;
t1116 = t1028 * t753 + t1033 * t716;
t719 = t1021 * t845 + t1023 * t1141;
t1115 = t1028 * t738 + t1033 * t719;
t810 = t1031 * t893 - t1222;
t721 = -t1021 * t810 + t1023 * t1139;
t754 = t1027 * t837 + t1032 * t811;
t1114 = t1028 * t754 + t1033 * t721;
t818 = t1031 * t917 + t1252;
t725 = -t1021 * t818 + t1023 * t1138;
t759 = -t1027 * t838 + t1032 * t820;
t1113 = t1028 * t759 + t1033 * t725;
t819 = t1026 * t916 + t1210;
t726 = -t1021 * t819 + t1023 * t1137;
t760 = t1027 * t836 + t1032 * t821;
t1112 = t1028 * t760 + t1033 * t726;
t831 = t1026 * t1180 + t1209 * t947;
t1087 = t1027 * t831 + t1174;
t830 = -t1031 * t1180 + t1221 * t947;
t746 = -t1021 * t830 + t1023 * t1087;
t793 = t1032 * t831 - t1176;
t1111 = t1028 * t793 + t1033 * t746;
t833 = t1031 * t868 - t1221 * t949;
t1086 = t1027 * t833 - t1174;
t832 = t1026 * t868 + t1209 * t949;
t747 = -t1021 * t832 + t1023 * t1086;
t794 = t1032 * t833 + t1176;
t1110 = t1028 * t794 + t1033 * t747;
t860 = (-t1026 * t947 - t1031 * t949) * t963;
t789 = -t1021 * t860 + t1023 * t1136;
t827 = t1027 * t925 + t1032 * t861;
t1109 = t1028 * t827 + t1033 * t789;
t908 = -t964 - t965;
t796 = -t1021 * t908 + t1023 * t1134;
t829 = t1027 * t889 + t1032 * t1044;
t1108 = t1028 * t829 + t1033 * t796;
t938 = t965 - t964;
t809 = -t1021 * t938 + t1023 * t1135;
t828 = -t1027 * t888 - t1032 * t884;
t1107 = t1028 * t828 + t1033 * t809;
t813 = -t1021 * t884 + t1023 * t1130;
t1106 = t1028 * t864 + t1033 * t813;
t887 = -t1201 * t968 + t1042;
t817 = -t1021 * t887 + t1023 * t1133;
t1105 = t1028 * t871 + t1033 * t817;
t824 = -t1021 * t889 + t1023 * t1131;
t875 = -t1027 * t951 + t1244;
t1104 = t1028 * t875 + t1033 * t824;
t825 = -t1021 * t1044 + t1023 * t1132;
t876 = t1032 * t950 + t1219;
t1103 = t1028 * t876 + t1033 * t825;
t1043 = -t1032 * t1045 + t1218 * t968;
t851 = t1023 * t1043 + t1179;
t882 = t1027 * t1045 + t1205 * t968;
t1102 = t1028 * t882 + t1033 * t851;
t1085 = t1027 * t926 + t1205 * t970;
t853 = t1023 * t1085 - t1179;
t883 = t1032 * t926 - t1218 * t970;
t1101 = t1028 * t883 + t1033 * t853;
t1084 = (-t1027 * t968 - t1032 * t970) * t987;
t881 = -t1021 * t974 + t1023 * t1084;
t904 = (t1027 * t970 - t1032 * t968) * t987;
t1100 = t1028 * t904 + t1033 * t881;
t1048 = t1056 - t1232;
t955 = t1028 * t1048 + (t1022 * g(3) - t1047) * t1033;
t956 = t1028 * t1047 + t1033 * t1048 - t1014;
t1099 = t1028 * t956 - t1033 * t955;
t912 = t1028 * t955 + t1033 * t956;
t999 = t1013 * t1169;
t976 = t999 + t1055;
t998 = t1013 * t1170;
t979 = t991 - t998;
t1098 = t1028 * t979 + t1033 * t976;
t977 = -t999 + t1055;
t978 = t991 + t998;
t1097 = t1028 * t978 - t1033 * t977;
t1096 = t1033 * t988 - t1215;
t993 = t1012 - t1168;
t1095 = t1033 * t993 + t1216;
t1094 = t1028 * t995 + t1203;
t994 = -t1012 + t1167;
t1093 = t1028 * t994 + t1202;
t983 = t1009 * t1034 - t1010 * t1029;
t1089 = t1022 * t1162;
t525 = -pkin(10) * t561 + (-pkin(11) * t1031 + t1236) * t577;
t534 = -pkin(3) * t561 + pkin(4) * t674 - pkin(11) * t578;
t1067 = pkin(9) * t539 + t1027 * t525 + t1032 * t534;
t514 = pkin(10) * t562 + (-pkin(11) * t1026 + t1173) * t577;
t520 = t1021 * t1154 + t1023 * t561;
t492 = -pkin(2) * t520 - t1021 * t514 + t1023 * t1067;
t498 = -t1027 * t534 + t1032 * t525 + (-t1021 * t520 - t1023 * t521) * pkin(9);
t507 = -t1028 * t521 + t1033 * t539;
t1080 = pkin(8) * t507 + t1028 * t498 + t1033 * t492;
t566 = -pkin(11) * t709 - t577;
t546 = -pkin(10) * t669 + t1031 * t566 + t1236 * t709;
t551 = -pkin(3) * t669 - pkin(4) * t826 - pkin(11) * t711 - t578;
t1066 = pkin(9) * t629 + t1027 * t546 + t1032 * t551;
t544 = pkin(10) * t670 + t1026 * t566 + t1173 * t709;
t595 = t1021 * t1152 + t1023 * t669;
t506 = -pkin(2) * t595 - t1021 * t544 + t1023 * t1066;
t509 = -t1027 * t551 + t1032 * t546 + (-t1021 * t595 - t1023 * t596) * pkin(9);
t559 = -t1028 * t596 + t1033 * t629;
t1079 = pkin(8) * t559 + t1028 * t509 + t1033 * t506;
t609 = -pkin(4) * t750 + t630;
t644 = -pkin(11) * t750 + t1226;
t560 = -pkin(10) * t687 - t1026 * t609 + t1031 * t644;
t598 = -pkin(3) * t687 - pkin(4) * t774 - pkin(11) * t751 + t1214;
t1065 = pkin(9) * t647 + t1027 * t560 + t1032 * t598;
t557 = -pkin(3) * t750 + pkin(10) * t688 + t1026 * t644 + t1031 * t609;
t611 = t1021 * t1150 + t1023 * t687;
t511 = -pkin(2) * t611 - t1021 * t557 + t1023 * t1065;
t524 = -t1027 * t598 + t1032 * t560 + (-t1021 * t611 - t1023 * t612) * pkin(9);
t579 = -t1028 * t612 + t1033 * t647;
t1078 = pkin(8) * t579 + t1028 * t524 + t1033 * t511;
t610 = -pkin(4) * t755 + t631;
t645 = -pkin(11) * t755 + t1214;
t564 = -pkin(10) * t692 - t1026 * t610 + t1031 * t645;
t600 = -pkin(3) * t692 + pkin(4) * t776 - pkin(11) * t756 - t1226;
t1064 = pkin(9) * t653 + t1027 * t564 + t1032 * t600;
t558 = -pkin(3) * t755 + pkin(10) * t693 + t1026 * t645 + t1031 * t610;
t613 = t1021 * t1149 + t1023 * t692;
t513 = -pkin(2) * t613 - t1021 * t558 + t1023 * t1064;
t526 = -t1027 * t600 + t1032 * t564 + (-t1021 * t613 - t1023 * t614) * pkin(9);
t582 = -t1028 * t614 + t1033 * t653;
t1077 = pkin(8) * t582 + t1028 * t526 + t1033 * t513;
t1052 = pkin(9) * t625 + (-pkin(10) * t1027 - t1237) * t636;
t580 = t1021 * t1153 + t1023 * t636;
t626 = -pkin(3) * t781 + pkin(10) * t637;
t530 = -pkin(2) * t580 - t1021 * t626 + t1023 * t1052;
t531 = (-pkin(10) * t1032 + t1238) * t636 + (-t1021 * t580 - t1023 * t581) * pkin(9);
t554 = -t1028 * t581 + t1033 * t625;
t1076 = pkin(8) * t554 + t1028 * t531 + t1033 * t530;
t624 = -pkin(10) * t762 - t636;
t1057 = pkin(9) * t743 + t1027 * t624 - t1237 * t762;
t615 = pkin(3) * t869 + pkin(10) * t764 + t637;
t678 = t1021 * t1143 + t1023 * t762;
t548 = -pkin(2) * t678 - t1021 * t615 + t1023 * t1057;
t567 = t762 * t1238 + t1032 * t624 + (-t1021 * t678 - t1023 * t679) * pkin(9);
t638 = -t1028 * t679 + t1033 * t743;
t1075 = pkin(8) * t638 + t1028 * t567 + t1033 * t548;
t665 = -pkin(3) * t806 + t713;
t728 = -pkin(10) * t806 + t1223;
t1063 = pkin(9) * t753 + t1027 * t728 + t1032 * t665;
t689 = -pkin(3) * t1248 + pkin(10) * t807 - t1211;
t715 = t1021 * t1140 + t1023 * t806;
t573 = -pkin(2) * t715 - t1021 * t689 + t1023 * t1063;
t591 = -t1027 * t665 + t1032 * t728 + (-t1021 * t715 - t1023 * t716) * pkin(9);
t656 = -t1028 * t716 + t1033 * t753;
t1074 = pkin(8) * t656 + t1028 * t591 + t1033 * t573;
t668 = -pkin(3) * t810 + t714;
t731 = -pkin(10) * t810 + t1211;
t1062 = pkin(9) * t754 + t1027 * t731 + t1032 * t668;
t694 = -pkin(3) * t837 + pkin(10) * t811 + t1223;
t720 = t1021 * t1139 + t1023 * t810;
t576 = -pkin(2) * t720 - t1021 * t694 + t1023 * t1062;
t592 = -t1027 * t668 + t1032 * t731 + (-t1021 * t720 - t1023 * t721) * pkin(9);
t659 = -t1028 * t721 + t1033 * t754;
t1073 = pkin(8) * t659 + t1028 * t592 + t1033 * t576;
t718 = t1021 * t1141 - t1023 * t845;
t643 = (-t1021 * t718 - t1023 * t719) * pkin(9);
t650 = -t1028 * t719 + t1033 * t738;
t651 = -pkin(2) * t718 + t1233 * t738;
t1072 = pkin(8) * t650 + t1028 * t643 + t1033 * t651;
t795 = t1021 * t1134 + t1023 * t908;
t660 = (-t1021 * t795 - t1023 * t796) * pkin(9) - t1141;
t1061 = pkin(9) * t829 + t738;
t664 = -pkin(2) * t795 + t1023 * t1061;
t749 = -t1028 * t796 + t1033 * t829;
t1071 = pkin(8) * t749 + t1028 * t660 + t1033 * t664;
t812 = t1021 * t1130 + t1023 * t884;
t691 = -pkin(2) * t812 + t1021 * t802 + t1023 * t1155;
t722 = -t1220 + (-t1021 * t812 - t1023 * t813) * pkin(9);
t780 = -t1028 * t813 + t1033 * t864;
t1070 = pkin(8) * t780 + t1028 * t722 + t1033 * t691;
t816 = t1021 * t1133 + t1023 * t887;
t696 = -pkin(2) * t816 + t1021 * t803 + t1023 * t1156;
t727 = -t1208 + (-t1021 * t816 - t1023 * t817) * pkin(9);
t787 = -t1028 * t817 + t1033 * t871;
t1069 = pkin(8) * t787 + t1028 * t727 + t1033 * t696;
t939 = t1028 * t977 + t1033 * t978;
t1068 = pkin(8) * t939 + t912;
t975 = (t1187 * t1196 + t1184) * t1022;
t1017 = t1022 * t1018;
t1006 = qJDD(1) * t1029 + t1034 * t1240;
t997 = t1186 * t1192;
t996 = (t1019 - t1020) * t1192;
t992 = -pkin(7) * t1006 + g(3) * t1034;
t980 = t1186 * t1171;
t972 = (-t1019 * t1013 * qJD(1) + t1033 * t1083) * t1022;
t971 = -t1020 * t1171 - t1028 * t991;
t960 = t1033 * t994 - t1215;
t959 = -t1028 * t993 + t1203;
t954 = t1017 * t1166 + t1188 * t975;
t953 = (t1024 * t991 + (-qJD(1) * t1017 - t1024 * t1194) * t1197) * t1033;
t940 = -t1028 * t976 + t1033 * t979;
t936 = t1022 * t979 + t1024 * t1094;
t935 = -t1022 * t978 + t1024 * t1093;
t934 = -t1022 * t977 + t1024 * t1095;
t933 = t1022 * t1094 - t1024 * t979;
t931 = -t1022 * t975 + t1024 * t1096;
t930 = t1022 * t1096 + t1024 * t975;
t929 = -t1022 * t996 + t1024 * t1098;
t928 = t1022 * t997 + t1024 * t1097;
t927 = t1022 * t1097 - t1024 * t997;
t903 = -t1029 * t936 + t1034 * t961;
t902 = t1029 * t961 + t1034 * t936;
t895 = -t1029 * t931 + t1034 * t957;
t894 = t1029 * t957 + t1034 * t931;
t891 = t1022 * t981 + t1024 * t1099;
t890 = t1022 * t1099 - t1024 * t981;
t880 = t1021 * t1084 + t1023 * t974;
t879 = -t1029 * t928 + t1034 * t939;
t878 = t1029 * t939 + t1034 * t928;
t870 = -t1217 + (-t1022 * t933 - t1024 * t936) * pkin(8);
t863 = -t1204 + (-t1022 * t930 - t1024 * t931) * pkin(8);
t862 = -pkin(1) * t933 + t1022 * t955 + t1024 * t1157;
t857 = -pkin(1) * t930 + t1022 * t956 + t1024 * t1158;
t852 = t1021 * t1085 + t1178;
t850 = t1021 * t1043 - t1178;
t848 = -pkin(1) * t890 + t1231 * t912;
t847 = -t1029 * t891 + t1034 * t912;
t846 = t1029 * t912 + t1034 * t891;
t844 = -pkin(1) * t927 + t1024 * t1068;
t842 = -t1028 * t881 + t1033 * t904;
t841 = (-t1022 * t890 - t1024 * t891) * pkin(8);
t840 = (-t1022 * t927 - t1024 * t928) * pkin(8) - t1099;
t823 = t1021 * t1132 + t1023 * t1044;
t822 = t1021 * t1131 + t1023 * t889;
t808 = t1021 * t1135 + t1023 * t938;
t805 = -t1028 * t853 + t1033 * t883;
t804 = -t1028 * t851 + t1033 * t882;
t792 = -t1022 * t880 + t1024 * t1100;
t791 = -t1028 * t825 + t1033 * t876;
t790 = -t1028 * t824 + t1033 * t875;
t788 = t1021 * t1136 + t1023 * t860;
t758 = -t1022 * t852 + t1024 * t1101;
t757 = -t1022 * t850 + t1024 * t1102;
t752 = -t1028 * t809 + t1033 * t828;
t745 = t1021 * t1086 + t1023 * t832;
t744 = t1021 * t1087 + t1023 * t830;
t737 = -t1028 * t789 + t1033 * t827;
t736 = -t1022 * t823 + t1024 * t1103;
t735 = -t1022 * t822 + t1024 * t1104;
t734 = -t1022 * t816 + t1024 * t1105;
t733 = t1022 * t1105 + t1024 * t816;
t730 = -t1022 * t812 + t1024 * t1106;
t729 = t1022 * t1106 + t1024 * t812;
t724 = t1021 * t1137 + t1023 * t819;
t723 = t1021 * t1138 + t1023 * t818;
t717 = -t1022 * t808 + t1024 * t1107;
t707 = -t1022 * t795 + t1024 * t1108;
t706 = t1022 * t1108 + t1024 * t795;
t698 = -t1028 * t747 + t1033 * t794;
t697 = -t1028 * t746 + t1033 * t793;
t695 = pkin(2) * t817 + t1021 * t1156 - t1023 * t803;
t690 = pkin(2) * t813 + t1021 * t1155 - t1023 * t802;
t685 = t1021 * t1144 + t1023 * t761;
t684 = -t1022 * t788 + t1024 * t1109;
t677 = -t1029 * t734 + t1034 * t787;
t676 = t1029 * t787 + t1034 * t734;
t671 = t1021 * t1142 + t1023 * t785;
t667 = -t1029 * t730 + t1034 * t780;
t666 = t1029 * t780 + t1034 * t730;
t663 = pkin(2) * t796 + t1021 * t1061;
t662 = -t1028 * t726 + t1033 * t760;
t661 = -t1028 * t725 + t1033 * t759;
t655 = -t1029 * t707 + t1034 * t749;
t654 = t1029 * t749 + t1034 * t707;
t652 = pkin(2) * t719 + t1234 * t738;
t649 = -t1022 * t745 + t1024 * t1110;
t648 = -t1022 * t744 + t1024 * t1111;
t646 = -t1028 * t686 + t1033 * t748;
t640 = t1021 * t1145 + t1023 * t740;
t639 = t1021 * t1146 + t1023 * t739;
t635 = -t1028 * t672 + t1033 * t732;
t633 = -t1022 * t724 + t1024 * t1112;
t632 = -t1022 * t723 + t1024 * t1113;
t628 = -t1022 * t720 + t1024 * t1114;
t627 = t1022 * t1114 + t1024 * t720;
t623 = -t1022 * t715 + t1024 * t1116;
t622 = t1022 * t1116 + t1024 * t715;
t619 = t1021 * t1147 + t1023 * t700;
t618 = t1021 * t1148 + t1023 * t699;
t617 = -t1022 * t718 + t1024 * t1115;
t616 = t1022 * t1115 + t1024 * t718;
t608 = -t1022 * t685 + t1024 * t1117;
t607 = -t1028 * t642 + t1033 * t681;
t606 = -t1028 * t641 + t1033 * t680;
t605 = -t1022 * t678 + t1024 * t1118;
t604 = t1022 * t1118 + t1024 * t678;
t603 = -t1022 * t671 + t1024 * t1119;
t601 = t1021 * t1151 + t1023 * t682;
t599 = -t1028 * t696 + t1033 * t727 + (-t1022 * t733 - t1024 * t734) * pkin(8);
t597 = -t1028 * t691 + t1033 * t722 + (-t1022 * t729 - t1024 * t730) * pkin(8);
t594 = -t1029 * t628 + t1034 * t659;
t593 = t1029 * t659 + t1034 * t628;
t590 = -t1029 * t623 + t1034 * t656;
t589 = t1029 * t656 + t1034 * t623;
t588 = -t1028 * t621 + t1033 * t658;
t587 = -t1028 * t620 + t1033 * t657;
t586 = -pkin(1) * t733 - t1022 * t695 + t1024 * t1069;
t585 = -t1029 * t617 + t1034 * t650;
t584 = t1029 * t650 + t1034 * t617;
t583 = -pkin(1) * t729 - t1022 * t690 + t1024 * t1070;
t575 = pkin(2) * t721 + t1021 * t1062 + t1023 * t694;
t574 = -t1028 * t664 + t1033 * t660 + (-t1022 * t706 - t1024 * t707) * pkin(8);
t572 = pkin(2) * t716 + t1021 * t1063 + t1023 * t689;
t571 = -t1022 * t640 + t1024 * t1120;
t570 = -t1022 * t639 + t1024 * t1121;
t569 = -t1029 * t605 + t1034 * t638;
t568 = t1029 * t638 + t1034 * t605;
t565 = -t1028 * t602 + t1033 * t634;
t563 = -pkin(1) * t706 - t1022 * t663 + t1024 * t1071;
t556 = -t1022 * t619 + t1024 * t1122;
t555 = -t1022 * t618 + t1024 * t1123;
t553 = -t1022 * t613 + t1024 * t1124;
t552 = t1022 * t1124 + t1024 * t613;
t550 = -t1022 * t611 + t1024 * t1125;
t549 = t1022 * t1125 + t1024 * t611;
t547 = pkin(2) * t679 + t1021 * t1057 + t1023 * t615;
t545 = -t1028 * t651 + t1033 * t643 + (-t1022 * t616 - t1024 * t617) * pkin(8);
t543 = -t1022 * t601 + t1024 * t1126;
t542 = -pkin(1) * t616 - t1022 * t652 + t1024 * t1072;
t541 = -t1022 * t595 + t1024 * t1127;
t540 = t1022 * t1127 + t1024 * t595;
t538 = -t1022 * t580 + t1024 * t1128;
t537 = t1022 * t1128 + t1024 * t580;
t536 = -t1029 * t553 + t1034 * t582;
t535 = t1029 * t582 + t1034 * t553;
t533 = -t1029 * t550 + t1034 * t579;
t532 = t1029 * t579 + t1034 * t550;
t529 = pkin(2) * t581 + t1021 * t1052 + t1023 * t626;
t528 = -t1028 * t576 + t1033 * t592 + (-t1022 * t627 - t1024 * t628) * pkin(8);
t527 = -t1028 * t573 + t1033 * t591 + (-t1022 * t622 - t1024 * t623) * pkin(8);
t523 = -t1029 * t541 + t1034 * t559;
t522 = t1029 * t559 + t1034 * t541;
t519 = -pkin(1) * t627 - t1022 * t575 + t1024 * t1073;
t518 = -pkin(1) * t622 - t1022 * t572 + t1024 * t1074;
t517 = -t1029 * t538 + t1034 * t554;
t516 = t1029 * t554 + t1034 * t538;
t515 = -t1028 * t548 + t1033 * t567 + (-t1022 * t604 - t1024 * t605) * pkin(8);
t512 = pkin(2) * t614 + t1021 * t1064 + t1023 * t558;
t510 = pkin(2) * t612 + t1021 * t1065 + t1023 * t557;
t508 = -pkin(1) * t604 - t1022 * t547 + t1024 * t1075;
t505 = pkin(2) * t596 + t1021 * t1066 + t1023 * t544;
t504 = -t1022 * t520 + t1024 * t1129;
t503 = t1022 * t1129 + t1024 * t520;
t502 = -t1028 * t513 + t1033 * t526 + (-t1022 * t552 - t1024 * t553) * pkin(8);
t501 = -t1028 * t530 + t1033 * t531 + (-t1022 * t537 - t1024 * t538) * pkin(8);
t500 = -t1028 * t511 + t1033 * t524 + (-t1022 * t549 - t1024 * t550) * pkin(8);
t499 = -pkin(1) * t537 - t1022 * t529 + t1024 * t1076;
t497 = -pkin(1) * t552 - t1022 * t512 + t1024 * t1077;
t496 = -pkin(1) * t549 - t1022 * t510 + t1024 * t1078;
t495 = -t1029 * t504 + t1034 * t507;
t494 = t1029 * t507 + t1034 * t504;
t493 = -t1028 * t506 + t1033 * t509 + (-t1022 * t540 - t1024 * t541) * pkin(8);
t491 = pkin(2) * t521 + t1021 * t1067 + t1023 * t514;
t490 = -pkin(1) * t540 - t1022 * t505 + t1024 * t1079;
t489 = -t1028 * t492 + t1033 * t498 + (-t1022 * t503 - t1024 * t504) * pkin(8);
t488 = -pkin(1) * t503 - t1022 * t491 + t1024 * t1080;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1006, -t1007, 0, t984, 0, 0, 0, 0, 0, 0, t903, t895, t879, t847, 0, 0, 0, 0, 0, 0, t667, t677, t655, t585, 0, 0, 0, 0, 0, 0, t590, t594, t569, t517, 0, 0, 0, 0, 0, 0, t533, t536, t523, t495; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1007, -t1006, 0, t983, 0, 0, 0, 0, 0, 0, t902, t894, t878, t846, 0, 0, 0, 0, 0, 0, t666, t676, t654, t584, 0, 0, 0, 0, 0, 0, t589, t593, t568, t516, 0, 0, 0, 0, 0, 0, t532, t535, t522, t494; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t933, t930, t927, t890, 0, 0, 0, 0, 0, 0, t729, t733, t706, t616, 0, 0, 0, 0, 0, 0, t622, t627, t604, t537, 0, 0, 0, 0, 0, 0, t549, t552, t540, t503; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1007, 0, -t1006, 0, t1159, -t992, -t983, -pkin(7) * t983, -t1029 * t954 + t1034 * t972, -t1029 * t929 + t1034 * t940, -t1029 * t934 + t1034 * t959, -t1029 * t953 + t1034 * t971, -t1029 * t935 + t1034 * t960, t1029 * t1089 + t1034 * t980, -pkin(7) * t902 - t1029 * t862 + t1034 * t870, -pkin(7) * t894 - t1029 * t857 + t1034 * t863, -pkin(7) * t878 - t1029 * t844 + t1034 * t840, -pkin(7) * t846 - t1029 * t848 + t1034 * t841, -t1029 * t758 + t1034 * t805, -t1029 * t717 + t1034 * t752, -t1029 * t735 + t1034 * t790, -t1029 * t757 + t1034 * t804, -t1029 * t736 + t1034 * t791, -t1029 * t792 + t1034 * t842, -pkin(7) * t666 - t1029 * t583 + t1034 * t597, -pkin(7) * t676 - t1029 * t586 + t1034 * t599, -pkin(7) * t654 - t1029 * t563 + t1034 * t574, -pkin(7) * t584 - t1029 * t542 + t1034 * t545, -t1029 * t649 + t1034 * t698, -t1029 * t608 + t1034 * t646, -t1029 * t632 + t1034 * t661, -t1029 * t648 + t1034 * t697, -t1029 * t633 + t1034 * t662, -t1029 * t684 + t1034 * t737, -pkin(7) * t589 - t1029 * t518 + t1034 * t527, -pkin(7) * t593 - t1029 * t519 + t1034 * t528, -pkin(7) * t568 - t1029 * t508 + t1034 * t515, -pkin(7) * t516 - t1029 * t499 + t1034 * t501, -t1029 * t571 + t1034 * t607, -t1029 * t543 + t1034 * t565, -t1029 * t555 + t1034 * t587, -t1029 * t570 + t1034 * t606, -t1029 * t556 + t1034 * t588, -t1029 * t603 + t1034 * t635, -pkin(7) * t532 - t1029 * t496 + t1034 * t500, -pkin(7) * t535 - t1029 * t497 + t1034 * t502, -pkin(7) * t522 - t1029 * t490 + t1034 * t493, -pkin(7) * t494 - t1029 * t488 + t1034 * t489; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1006, 0, t1007, 0, t992, t1159, t984, pkin(7) * t984, t1029 * t972 + t1034 * t954, t1029 * t940 + t1034 * t929, t1029 * t959 + t1034 * t934, t1029 * t971 + t1034 * t953, t1029 * t960 + t1034 * t935, t1029 * t980 - t1034 * t1089, pkin(7) * t903 + t1029 * t870 + t1034 * t862, pkin(7) * t895 + t1029 * t863 + t1034 * t857, pkin(7) * t879 + t1029 * t840 + t1034 * t844, pkin(7) * t847 + t1029 * t841 + t1034 * t848, t1029 * t805 + t1034 * t758, t1029 * t752 + t1034 * t717, t1029 * t790 + t1034 * t735, t1029 * t804 + t1034 * t757, t1029 * t791 + t1034 * t736, t1029 * t842 + t1034 * t792, pkin(7) * t667 + t1029 * t597 + t1034 * t583, pkin(7) * t677 + t1029 * t599 + t1034 * t586, pkin(7) * t655 + t1029 * t574 + t1034 * t563, pkin(7) * t585 + t1029 * t545 + t1034 * t542, t1029 * t698 + t1034 * t649, t1029 * t646 + t1034 * t608, t1029 * t661 + t1034 * t632, t1029 * t697 + t1034 * t648, t1029 * t662 + t1034 * t633, t1029 * t737 + t1034 * t684, pkin(7) * t590 + t1029 * t527 + t1034 * t518, pkin(7) * t594 + t1029 * t528 + t1034 * t519, pkin(7) * t569 + t1029 * t515 + t1034 * t508, pkin(7) * t517 + t1029 * t501 + t1034 * t499, t1029 * t607 + t1034 * t571, t1029 * t565 + t1034 * t543, t1029 * t587 + t1034 * t555, t1029 * t606 + t1034 * t570, t1029 * t588 + t1034 * t556, t1029 * t635 + t1034 * t603, pkin(7) * t533 + t1029 * t500 + t1034 * t496, pkin(7) * t536 + t1029 * t502 + t1034 * t497, pkin(7) * t523 + t1029 * t493 + t1034 * t490, pkin(7) * t495 + t1029 * t489 + t1034 * t488; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1009, t1010, 0, 0, (t1184 + (qJD(2) - t1164) * t1196) * t1018 * t1028, t1022 * t1098 + t1024 * t996, t1022 * t1095 + t1024 * t977, (t1018 * t1164 * t1197 + t1022 * t991) * t1033, t1022 * t1093 + t1024 * t978, t1024 * t1162, pkin(1) * t936 + t1022 * t1157 - t1024 * t955, pkin(1) * t931 + t1022 * t1158 - t1024 * t956, pkin(1) * t928 + t1022 * t1068, pkin(1) * t891 + t1235 * t912, t1022 * t1101 + t1024 * t852, t1022 * t1107 + t1024 * t808, t1022 * t1104 + t1024 * t822, t1022 * t1102 + t1024 * t850, t1022 * t1103 + t1024 * t823, t1022 * t1100 + t1024 * t880, pkin(1) * t730 + t1022 * t1070 + t1024 * t690, pkin(1) * t734 + t1022 * t1069 + t1024 * t695, pkin(1) * t707 + t1022 * t1071 + t1024 * t663, pkin(1) * t617 + t1022 * t1072 + t1024 * t652, t1022 * t1110 + t1024 * t745, t1022 * t1117 + t1024 * t685, t1022 * t1113 + t1024 * t723, t1022 * t1111 + t1024 * t744, t1022 * t1112 + t1024 * t724, t1022 * t1109 + t1024 * t788, pkin(1) * t623 + t1022 * t1074 + t1024 * t572, pkin(1) * t628 + t1022 * t1073 + t1024 * t575, pkin(1) * t605 + t1022 * t1075 + t1024 * t547, pkin(1) * t538 + t1022 * t1076 + t1024 * t529, t1022 * t1120 + t1024 * t640, t1022 * t1126 + t1024 * t601, t1022 * t1123 + t1024 * t618, t1022 * t1121 + t1024 * t639, t1022 * t1122 + t1024 * t619, t1022 * t1119 + t1024 * t671, pkin(1) * t550 + t1022 * t1078 + t1024 * t510, pkin(1) * t553 + t1022 * t1077 + t1024 * t512, pkin(1) * t541 + t1022 * t1079 + t1024 * t505, pkin(1) * t504 + t1022 * t1080 + t1024 * t491;];
tauB_reg = t1;
