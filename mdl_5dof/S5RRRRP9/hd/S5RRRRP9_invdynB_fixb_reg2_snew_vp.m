% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRRP9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:07
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRRP9_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP9_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP9_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP9_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP9_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRRP9_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:06:20
% EndTime: 2019-12-31 22:06:45
% DurationCPUTime: 21.36s
% Computational Cost: add. (44952->567), mult. (90352->791), div. (0->0), fcn. (62978->8), ass. (0->416)
t783 = sin(qJ(3));
t787 = cos(qJ(3));
t784 = sin(qJ(2));
t834 = qJD(1) * t784;
t742 = -t787 * qJD(2) + t783 * t834;
t743 = t783 * qJD(2) + t787 * t834;
t782 = sin(qJ(4));
t786 = cos(qJ(4));
t703 = -t782 * t742 + t786 * t743;
t700 = t703 ^ 2;
t788 = cos(qJ(2));
t832 = t788 * qJD(1);
t769 = -qJD(3) + t832;
t761 = -qJD(4) + t769;
t878 = t761 ^ 2;
t636 = t878 + t700;
t829 = qJD(1) * qJD(2);
t772 = t784 * t829;
t826 = t788 * qJDD(1);
t748 = -t772 + t826;
t739 = -qJDD(3) + t748;
t735 = -qJDD(4) + t739;
t701 = t786 * t742 + t782 * t743;
t870 = t703 * t701;
t793 = t735 - t870;
t857 = t782 * t793;
t563 = t786 * t636 - t857;
t843 = t786 * t793;
t588 = t782 * t636 + t843;
t528 = t783 * t563 + t787 * t588;
t818 = t788 * t829;
t828 = t784 * qJDD(1);
t747 = t818 + t828;
t800 = t787 * qJDD(2) - t783 * t747;
t795 = t743 * qJD(3) - t800;
t819 = t742 * qJD(3) - t783 * qJDD(2) - t787 * t747;
t792 = -t701 * qJD(4) - t782 * t795 - t786 * t819;
t871 = t701 * t761;
t891 = t792 + t871;
t485 = t788 * t528 + t784 * t891;
t500 = t787 * t563 - t783 * t588;
t785 = sin(qJ(1));
t789 = cos(qJ(1));
t449 = t785 * t485 + t789 * t500;
t991 = pkin(5) * t449;
t451 = t789 * t485 - t785 * t500;
t990 = pkin(5) * t451;
t483 = t784 * t528 - t788 * t891;
t989 = pkin(6) * t483;
t988 = pkin(1) * t483 - pkin(2) * t891 + pkin(7) * t528;
t987 = -pkin(1) * t500 - pkin(6) * t485;
t816 = -t782 * t819 + t786 * t795;
t574 = (qJD(4) - t761) * t703 + t816;
t517 = -t782 * t574 + t786 * t891;
t860 = t782 * t891;
t519 = t786 * t574 + t860;
t462 = t783 * t517 + t787 * t519;
t880 = t701 ^ 2;
t644 = t700 - t880;
t454 = t788 * t462 - t784 * t644;
t460 = -t787 * t517 + t783 * t519;
t986 = t785 * t454 - t789 * t460;
t985 = t789 * t454 + t785 * t460;
t682 = t880 - t878;
t597 = t782 * t682 - t843;
t601 = t786 * t682 + t857;
t539 = t783 * t597 - t787 * t601;
t575 = (qJD(4) + t761) * t703 + t816;
t490 = t788 * t539 + t784 * t575;
t535 = t787 * t597 + t783 * t601;
t984 = t785 * t490 + t789 * t535;
t983 = t789 * t490 - t785 * t535;
t890 = t871 - t792;
t920 = -t786 * t575 - t782 * t890;
t921 = -t782 * t575 + t786 * t890;
t933 = t783 * t920 + t787 * t921;
t617 = -t880 - t700;
t934 = -t783 * t921 + t787 * t920;
t953 = t784 * t617 + t788 * t934;
t964 = t785 * t933 + t789 * t953;
t981 = pkin(5) * t964;
t965 = t785 * t953 - t789 * t933;
t980 = pkin(5) * t965;
t979 = pkin(7) * t500;
t972 = -pkin(2) * t500 - pkin(3) * t563;
t970 = t784 * t462 + t788 * t644;
t969 = t784 * t539 - t788 * t575;
t955 = -t788 * t617 + t784 * t934;
t968 = pkin(6) * t955;
t967 = -pkin(1) * t955 + pkin(2) * t617 - pkin(7) * t934;
t966 = -pkin(1) * t933 + pkin(6) * t953;
t961 = pkin(7) * t933;
t960 = pkin(8) * t563;
t959 = pkin(8) * t588;
t434 = -pkin(2) * t933 - pkin(3) * t921;
t683 = -t700 + t878;
t794 = -t735 - t870;
t856 = t782 * t794;
t900 = t786 * t683 + t856;
t625 = t786 * t794;
t901 = -t782 * t683 + t625;
t913 = -t783 * t901 - t787 * t900;
t912 = -t783 * t900 + t787 * t901;
t935 = -t784 * t890 + t788 * t912;
t954 = t785 * t935 + t789 * t913;
t952 = -t785 * t913 + t789 * t935;
t889 = -t878 - t880;
t896 = t786 * t889 - t856;
t899 = t782 * t889 + t625;
t914 = t783 * t896 + t787 * t899;
t951 = pkin(1) * t914;
t949 = pkin(7) * t914;
t915 = -t783 * t899 + t787 * t896;
t948 = pkin(7) * t915;
t947 = pkin(8) * t921;
t945 = t784 * t915;
t943 = t785 * t914;
t941 = t788 * t915;
t939 = t789 * t914;
t938 = -pkin(2) * t914 - pkin(3) * t899;
t937 = -pkin(3) * t617 + pkin(8) * t920;
t936 = t784 * t912 + t788 * t890;
t929 = pkin(8) * t896;
t928 = pkin(8) * t899;
t927 = qJ(5) * t891;
t759 = t789 * g(1) + t785 * g(2);
t790 = qJD(1) ^ 2;
t733 = -t790 * pkin(1) + qJDD(1) * pkin(6) - t759;
t875 = pkin(2) * t788;
t809 = -pkin(7) * t784 - t875;
t745 = t809 * qJD(1);
t873 = t788 * g(3);
t877 = qJD(2) ^ 2;
t672 = -qJDD(2) * pkin(2) - t877 * pkin(7) + (qJD(1) * t745 + t733) * t784 + t873;
t720 = -t769 * pkin(3) - t743 * pkin(8);
t879 = t742 ^ 2;
t592 = t795 * pkin(3) - t879 * pkin(8) + t743 * t720 + t672;
t612 = -t703 * qJD(4) - t816;
t922 = -t612 * pkin(4) + t592 - t927;
t797 = (t701 * t782 + t703 * t786) * t761;
t866 = t761 * t782;
t676 = t703 * t866;
t865 = t761 * t786;
t822 = t701 * t865;
t804 = -t676 + t822;
t884 = -t783 * t804 - t787 * t797;
t883 = -t783 * t797 + t787 * t804;
t894 = -t784 * t735 + t788 * t883;
t919 = t785 * t894 + t789 * t884;
t799 = -t782 * t612 - t822;
t805 = t786 * t612 - t701 * t866;
t881 = -t783 * t799 - t787 * t805;
t824 = t784 * t870;
t882 = -t783 * t805 + t787 * t799;
t895 = t788 * t882 - t824;
t918 = t785 * t895 + t789 * t881;
t917 = -t785 * t884 + t789 * t894;
t916 = -t785 * t881 + t789 * t895;
t911 = -2 * qJD(5);
t725 = t742 * t769;
t660 = t725 + t819;
t898 = t788 * t735 + t784 * t883;
t821 = t788 * t870;
t897 = t784 * t882 + t821;
t867 = t743 * t742;
t796 = -t739 - t867;
t893 = t783 * t796;
t892 = t787 * t796;
t659 = t819 - t725;
t758 = t785 * g(1) - t789 * g(2);
t732 = qJDD(1) * pkin(1) + t790 * pkin(6) + t758;
t802 = -t748 + t772;
t803 = t747 + t818;
t654 = pkin(2) * t802 - pkin(7) * t803 - t732;
t719 = -t784 * g(3) + t788 * t733;
t673 = -t877 * pkin(2) + qJDD(2) * pkin(7) + t745 * t832 + t719;
t613 = -t787 * t654 + t783 * t673;
t549 = t796 * pkin(3) + t660 * pkin(8) - t613;
t614 = t783 * t654 + t787 * t673;
t555 = -t879 * pkin(3) - pkin(8) * t795 + t769 * t720 + t614;
t494 = t782 * t549 + t786 * t555;
t639 = t701 * pkin(4) - t703 * qJ(5);
t801 = -t735 * qJ(5) - t701 * t639 + t761 * t911 + t494;
t571 = -t703 * t865 + t782 * t792;
t572 = t786 * t792 + t676;
t510 = -t787 * t571 - t783 * t572;
t513 = -t783 * t571 + t787 * t572;
t806 = t788 * t513 + t824;
t886 = t789 * t510 + t785 * t806;
t655 = (qJD(3) + t769) * t743 - t800;
t885 = -t785 * t510 + t789 * t806;
t738 = t743 ^ 2;
t767 = t769 ^ 2;
t876 = pkin(2) * t784;
t874 = pkin(4) * t786;
t872 = qJ(5) * t786;
t869 = t703 * t761;
t864 = t769 * t783;
t863 = t769 * t787;
t778 = t784 ^ 2;
t862 = t778 * t790;
t858 = t782 * t592;
t493 = -t786 * t549 + t782 * t555;
t443 = -t786 * t493 + t782 * t494;
t854 = t783 * t443;
t853 = t783 * t672;
t690 = t739 - t867;
t852 = t783 * t690;
t850 = t784 * t732;
t768 = t788 * t790 * t784;
t756 = -t768 + qJDD(2);
t848 = t784 * t756;
t757 = qJDD(2) + t768;
t847 = t784 * t757;
t844 = t786 * t592;
t842 = t787 * t443;
t841 = t787 * t672;
t840 = t787 * t690;
t838 = t788 * t732;
t837 = t788 * t756;
t836 = -t617 - t878;
t779 = t788 ^ 2;
t835 = t778 + t779;
t827 = t785 * qJDD(1);
t825 = t789 * qJDD(1);
t823 = t784 * t867;
t820 = t788 * t867;
t817 = -qJ(5) * t782 - pkin(3);
t444 = t782 * t493 + t786 * t494;
t718 = t784 * t733 + t873;
t663 = t784 * t718 + t788 * t719;
t711 = -t785 * t758 - t789 * t759;
t814 = t785 * t768;
t813 = t789 * t768;
t811 = t703 * t639 + qJDD(5) + t493;
t753 = -t785 * t790 + t825;
t808 = -pkin(5) * t753 - t785 * g(3);
t807 = t784 * t513 - t821;
t543 = -t787 * t613 + t783 * t614;
t544 = t783 * t613 + t787 * t614;
t662 = t788 * t718 - t784 * t719;
t710 = t789 * t758 - t785 * t759;
t798 = t735 * pkin(4) + t811;
t791 = 0.2e1 * qJD(5) * t703 - t922;
t776 = t779 * t790;
t766 = -t776 - t877;
t765 = t776 - t877;
t764 = -t862 - t877;
t763 = -t862 + t877;
t755 = t776 - t862;
t754 = t776 + t862;
t752 = t789 * t790 + t827;
t751 = t835 * qJDD(1);
t749 = -0.2e1 * t772 + t826;
t746 = 0.2e1 * t818 + t828;
t741 = t788 * t757;
t740 = t835 * t829;
t729 = -pkin(5) * t752 + t789 * g(3);
t724 = -t738 + t767;
t723 = -t767 + t879;
t722 = t788 * t747 - t778 * t829;
t721 = -t784 * t748 - t779 * t829;
t717 = -t784 * t764 - t837;
t716 = -t784 * t763 + t741;
t715 = t788 * t766 - t847;
t714 = t788 * t765 - t848;
t713 = t788 * t764 - t848;
t712 = t784 * t766 + t741;
t708 = -t738 + t879;
t707 = t789 * t751 - t785 * t754;
t706 = t785 * t751 + t789 * t754;
t705 = -t738 - t767;
t704 = -t784 * t746 + t788 * t749;
t697 = -t767 - t879;
t689 = t738 + t879;
t680 = t789 * t717 + t785 * t746;
t679 = t789 * t715 - t785 * t749;
t678 = t785 * t717 - t789 * t746;
t677 = t785 * t715 + t789 * t749;
t675 = -pkin(6) * t713 - t838;
t674 = -pkin(6) * t712 - t850;
t670 = (t742 * t787 - t743 * t783) * t769;
t669 = (-t742 * t783 - t743 * t787) * t769;
t667 = -pkin(1) * t713 + t719;
t666 = -pkin(1) * t712 + t718;
t656 = (-qJD(3) + t769) * t743 + t800;
t651 = t743 * t864 - t787 * t819;
t650 = t743 * t863 + t783 * t819;
t649 = -t742 * t863 + t783 * t795;
t648 = t742 * t864 + t787 * t795;
t646 = t788 * t670 - t784 * t739;
t643 = t787 * t723 + t852;
t642 = -t783 * t724 + t892;
t641 = -t783 * t723 + t840;
t640 = -t787 * t724 - t893;
t638 = -t783 * t705 + t840;
t637 = t787 * t705 + t852;
t634 = t789 * t663 - t785 * t732;
t633 = t785 * t663 + t789 * t732;
t632 = t787 * t697 - t893;
t631 = t783 * t697 + t892;
t620 = t788 * t651 + t823;
t619 = t788 * t649 - t823;
t608 = -t655 * t787 - t783 * t660;
t607 = t787 * t656 + t659 * t783;
t606 = -t655 * t783 + t787 * t660;
t605 = -t783 * t656 + t659 * t787;
t604 = -pkin(7) * t637 + t841;
t603 = t788 * t643 - t784 * t655;
t602 = t788 * t642 - t784 * t660;
t593 = -pkin(7) * t631 + t853;
t591 = t788 * t638 - t784 * t659;
t590 = t784 * t638 + t788 * t659;
t585 = t788 * t632 - t784 * t656;
t584 = t784 * t632 + t788 * t656;
t583 = t788 * t607 - t784 * t708;
t576 = -t612 - t869;
t562 = t788 * t608 - t784 * t689;
t561 = t784 * t608 + t788 * t689;
t560 = -pkin(2) * t637 + t614;
t554 = -pkin(2) * t631 + t613;
t546 = t789 * t591 + t785 * t637;
t545 = t785 * t591 - t789 * t637;
t542 = t789 * t585 + t785 * t631;
t541 = t785 * t585 - t789 * t631;
t532 = t788 * t544 + t784 * t672;
t531 = t784 * t544 - t788 * t672;
t530 = t844 + t960;
t525 = t789 * t562 + t785 * t606;
t524 = t785 * t562 - t789 * t606;
t523 = t858 - t928;
t514 = -pkin(1) * t590 - pkin(2) * t659 - pkin(7) * t638 - t853;
t504 = -pkin(1) * t584 - pkin(2) * t656 - pkin(7) * t632 + t841;
t499 = -pkin(7) * t606 - t543;
t487 = -pkin(3) * t891 + t858 + t959;
t486 = t784 * t576 + t941;
t484 = -t788 * t576 + t945;
t482 = -pkin(6) * t590 - t784 * t560 + t788 * t604;
t481 = -pkin(3) * t574 - t844 + t929;
t480 = -pkin(6) * t584 - t784 * t554 + t788 * t593;
t479 = (-pkin(4) * t761 + t911) * t703 + t922;
t478 = t784 * t574 + t941;
t476 = -t788 * t574 + t945;
t474 = t789 * t532 + t785 * t543;
t473 = t785 * t532 - t789 * t543;
t472 = qJ(5) * t878 - t798;
t471 = -pkin(4) * t878 + t801;
t470 = -pkin(1) * t561 - pkin(2) * t689 - pkin(7) * t608 - t544;
t469 = -pkin(1) * t531 + pkin(2) * t672 - pkin(7) * t544;
t468 = -pkin(6) * t561 + t788 * t499 + t606 * t876;
t467 = (-t576 + t869) * pkin(4) + t791;
t466 = pkin(4) * t869 + t791 + t927;
t457 = t836 * qJ(5) + t798;
t456 = t836 * pkin(4) + t801;
t453 = -pkin(6) * t531 + (-pkin(7) * t788 + t876) * t543;
t452 = t789 * t486 + t943;
t450 = t785 * t486 - t939;
t442 = t494 - t972;
t441 = t789 * t478 + t943;
t439 = t785 * t478 - t939;
t437 = t493 + t938;
t436 = -t782 * t467 - t576 * t872 - t928;
t435 = -pkin(3) * t592 + pkin(8) * t444;
t433 = -pkin(4) * t860 + t786 * t466 - t960;
t432 = -t783 * t487 + t787 * t530 + t979;
t431 = t786 * t471 - t782 * t472;
t430 = t782 * t471 + t786 * t472;
t429 = t786 * t467 + t817 * t576 + t929;
t428 = (-t889 - t878) * qJ(5) + (-t794 + t735) * pkin(4) + t811 + t938;
t427 = -t783 * t481 + t787 * t523 - t949;
t426 = -t959 + t782 * t466 + (pkin(3) + t874) * t891;
t425 = -t443 - t947;
t424 = qJ(5) * t793 + (-t636 + t878) * pkin(4) - t801 + t972;
t423 = t444 + t937;
t422 = -pkin(4) * t890 + qJ(5) * t575 + t434;
t417 = -t782 * t456 + t786 * t457 - t947;
t416 = -t787 * t487 - t783 * t530 - t988;
t415 = t787 * t444 - t854;
t414 = t783 * t444 + t842;
t413 = t786 * t456 + t782 * t457 + t937;
t412 = -pkin(1) * t476 + pkin(2) * t574 - t787 * t481 - t783 * t523 - t948;
t411 = t788 * t415 + t784 * t592;
t410 = t784 * t415 - t788 * t592;
t409 = -pkin(8) * t430 + (pkin(4) * t782 - t872) * t479;
t408 = -t783 * t430 + t787 * t431;
t407 = t787 * t430 + t783 * t431;
t406 = t788 * t432 - t784 * t442 - t989;
t405 = -t783 * t429 + t787 * t436 - t949;
t404 = -t783 * t426 + t787 * t433 - t979;
t403 = -pkin(2) * t414 - pkin(3) * t443;
t402 = -pkin(6) * t476 + t788 * t427 - t784 * t437;
t401 = pkin(8) * t431 + (t817 - t874) * t479;
t400 = t788 * t408 + t784 * t479;
t399 = t784 * t408 - t788 * t479;
t398 = -pkin(1) * t484 + pkin(2) * t576 - t787 * t429 - t783 * t436 - t948;
t397 = -t783 * t423 + t787 * t425 - t961;
t396 = -t787 * t426 - t783 * t433 + t988;
t395 = -pkin(7) * t414 - pkin(8) * t842 - t783 * t435;
t394 = t789 * t411 + t785 * t414;
t393 = t785 * t411 - t789 * t414;
t392 = -t787 * t423 - t783 * t425 + t967;
t391 = -pkin(6) * t484 + t788 * t405 - t784 * t428;
t390 = -t783 * t413 + t787 * t417 - t961;
t389 = t788 * t404 - t784 * t424 + t989;
t388 = -pkin(2) * t407 - pkin(3) * t430 - pkin(4) * t472 - qJ(5) * t471;
t387 = t788 * t397 - t784 * t434 - t968;
t386 = -t787 * t413 - t783 * t417 + t967;
t385 = t789 * t400 + t785 * t407;
t384 = t785 * t400 - t789 * t407;
t383 = -pkin(1) * t410 + pkin(2) * t592 - pkin(7) * t415 + pkin(8) * t854 - t787 * t435;
t382 = t788 * t390 - t784 * t422 - t968;
t381 = -pkin(7) * t407 - t783 * t401 + t787 * t409;
t380 = -pkin(6) * t410 + t788 * t395 - t784 * t403;
t379 = -pkin(1) * t399 + pkin(2) * t479 - pkin(7) * t408 - t787 * t401 - t783 * t409;
t378 = -pkin(6) * t399 + t788 * t381 - t784 * t388;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t752, -t753, 0, t711, 0, 0, 0, 0, 0, 0, t679, t680, t707, t634, 0, 0, 0, 0, 0, 0, t542, t546, t525, t474, 0, 0, 0, 0, 0, 0, t441, t451, t964, t394, 0, 0, 0, 0, 0, 0, t452, t964, -t451, t385; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t753, -t752, 0, t710, 0, 0, 0, 0, 0, 0, t677, t678, t706, t633, 0, 0, 0, 0, 0, 0, t541, t545, t524, t473, 0, 0, 0, 0, 0, 0, t439, t449, t965, t393, 0, 0, 0, 0, 0, 0, t450, t965, -t449, t384; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t712, t713, 0, -t662, 0, 0, 0, 0, 0, 0, t584, t590, t561, t531, 0, 0, 0, 0, 0, 0, t476, t483, t955, t410, 0, 0, 0, 0, 0, 0, t484, t955, -t483, t399; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t753, 0, -t752, 0, t808, -t729, -t710, -pkin(5) * t710, t789 * t722 - t814, t789 * t704 - t785 * t755, t789 * t716 + t784 * t827, t789 * t721 + t814, t789 * t714 + t785 * t826, t785 * qJDD(2) + t789 * t740, -pkin(5) * t677 - t785 * t666 + t789 * t674, -pkin(5) * t678 - t785 * t667 + t789 * t675, -pkin(5) * t706 + t789 * t662, -pkin(5) * t633 - (pkin(1) * t785 - pkin(6) * t789) * t662, t789 * t620 - t785 * t650, t789 * t583 - t785 * t605, t789 * t602 - t785 * t640, t789 * t619 - t785 * t648, t789 * t603 - t785 * t641, t789 * t646 - t785 * t669, -pkin(5) * t541 + t789 * t480 - t785 * t504, -pkin(5) * t545 + t789 * t482 - t785 * t514, -pkin(5) * t524 + t789 * t468 - t785 * t470, -pkin(5) * t473 + t789 * t453 - t785 * t469, t885, -t985, t952, t916, -t983, t917, -pkin(5) * t439 + t789 * t402 - t785 * t412, t789 * t406 - t785 * t416 - t991, t789 * t387 - t785 * t392 - t980, -pkin(5) * t393 + t789 * t380 - t785 * t383, t885, t952, t985, t917, t983, t916, -pkin(5) * t450 + t789 * t391 - t785 * t398, t789 * t382 - t785 * t386 - t980, t789 * t389 - t785 * t396 + t991, -pkin(5) * t384 + t789 * t378 - t785 * t379; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t752, 0, t753, 0, t729, t808, t711, pkin(5) * t711, t785 * t722 + t813, t785 * t704 + t789 * t755, t785 * t716 - t784 * t825, t785 * t721 - t813, t785 * t714 - t788 * t825, -t789 * qJDD(2) + t785 * t740, pkin(5) * t679 + t789 * t666 + t785 * t674, pkin(5) * t680 + t789 * t667 + t785 * t675, pkin(5) * t707 + t785 * t662, pkin(5) * t634 - (-pkin(1) * t789 - pkin(6) * t785) * t662, t785 * t620 + t789 * t650, t785 * t583 + t789 * t605, t785 * t602 + t789 * t640, t785 * t619 + t789 * t648, t785 * t603 + t789 * t641, t785 * t646 + t789 * t669, pkin(5) * t542 + t785 * t480 + t789 * t504, pkin(5) * t546 + t785 * t482 + t789 * t514, pkin(5) * t525 + t785 * t468 + t789 * t470, pkin(5) * t474 + t785 * t453 + t789 * t469, t886, -t986, t954, t918, -t984, t919, pkin(5) * t441 + t785 * t402 + t789 * t412, t785 * t406 + t789 * t416 + t990, t785 * t387 + t789 * t392 + t981, pkin(5) * t394 + t785 * t380 + t789 * t383, t886, t954, t986, t919, t984, t918, pkin(5) * t452 + t785 * t391 + t789 * t398, t785 * t382 + t789 * t386 + t981, t785 * t389 + t789 * t396 - t990, pkin(5) * t385 + t785 * t378 + t789 * t379; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t758, t759, 0, 0, t803 * t784, t788 * t746 + t784 * t749, t788 * t763 + t847, -t802 * t788, t784 * t765 + t837, 0, pkin(1) * t749 + pkin(6) * t715 + t838, -pkin(1) * t746 + pkin(6) * t717 - t850, pkin(1) * t754 + pkin(6) * t751 + t663, pkin(1) * t732 + pkin(6) * t663, t784 * t651 - t820, t784 * t607 + t788 * t708, t784 * t642 + t788 * t660, t784 * t649 + t820, t784 * t643 + t788 * t655, t784 * t670 + t788 * t739, -pkin(1) * t631 + pkin(6) * t585 + t788 * t554 + t784 * t593, -pkin(1) * t637 + pkin(6) * t591 + t788 * t560 + t784 * t604, pkin(6) * t562 + t784 * t499 + (-pkin(1) - t875) * t606, pkin(6) * t532 + (-pkin(1) + t809) * t543, t807, -t970, t936, t897, -t969, t898, pkin(6) * t478 + t784 * t427 + t788 * t437 - t951, t784 * t432 + t788 * t442 - t987, t784 * t397 + t788 * t434 + t966, -pkin(1) * t414 + pkin(6) * t411 + t784 * t395 + t788 * t403, t807, t936, t970, t898, t969, t897, pkin(6) * t486 + t784 * t405 + t788 * t428 - t951, t784 * t390 + t788 * t422 + t966, t784 * t404 + t788 * t424 + t987, -pkin(1) * t407 + pkin(6) * t400 + t784 * t381 + t788 * t388;];
tauB_reg = t1;
