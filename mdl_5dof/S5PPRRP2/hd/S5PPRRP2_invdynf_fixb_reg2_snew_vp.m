% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PPRRP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d4,theta1,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:09
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PPRRP2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRRP2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRRP2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRRP2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRRP2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PPRRP2_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:09:29
% EndTime: 2019-12-05 15:09:31
% DurationCPUTime: 1.68s
% Computational Cost: add. (2341->134), mult. (4428->161), div. (0->0), fcn. (3055->8), ass. (0->90)
t983 = sin(qJ(4));
t985 = cos(qJ(4));
t988 = qJD(3) ^ 2;
t966 = t983 * t988 * t985;
t962 = qJDD(4) - t966;
t973 = t983 ^ 2;
t987 = qJD(4) ^ 2;
t963 = t973 * t988 + t987;
t939 = t962 * t985 - t963 * t983;
t994 = t983 * qJDD(3);
t995 = qJD(3) * qJD(4);
t952 = 0.2e1 * t985 * t995 + t994;
t984 = sin(qJ(3));
t986 = cos(qJ(3));
t924 = t939 * t984 + t986 * t952;
t927 = t939 * t986 - t984 * t952;
t978 = sin(pkin(8));
t980 = cos(pkin(8));
t909 = t924 * t978 - t927 * t980;
t936 = t962 * t983 + t963 * t985;
t979 = sin(pkin(7));
t981 = cos(pkin(7));
t1004 = t909 * t979 + t981 * t936;
t1003 = t909 * t981 - t979 * t936;
t905 = t924 * t980 + t927 * t978;
t959 = g(1) * t979 - g(2) * t981;
t954 = -qJDD(2) + t959;
t1000 = t979 * t954;
t960 = -g(1) * t981 - g(2) * t979;
t975 = -g(3) + qJDD(1);
t944 = t960 * t980 + t975 * t978;
t989 = -t960 * t978 + t975 * t980;
t922 = t944 * t986 + t984 * t989;
t918 = -pkin(3) * t988 + qJDD(3) * pkin(6) + t922;
t911 = t918 * t985 - t954 * t983;
t974 = t985 ^ 2;
t997 = t973 + t974;
t996 = t988 * (-pkin(4) * t985 - qJ(5) * t983);
t993 = t985 * qJDD(3);
t992 = t983 * t995;
t921 = -t984 * t944 + t986 * t989;
t956 = qJDD(3) * t986 - t984 * t988;
t957 = -qJDD(3) * t984 - t986 * t988;
t990 = -t956 * t978 + t957 * t980;
t930 = t956 * t980 + t957 * t978;
t917 = -qJDD(3) * pkin(3) - pkin(6) * t988 - t921;
t964 = -t974 * t988 - t987;
t961 = qJDD(4) + t966;
t958 = t997 * t988;
t955 = t997 * qJDD(3);
t953 = -0.2e1 * t992 + t993;
t947 = t985 * t954;
t945 = t981 * t954;
t938 = -t961 * t983 + t964 * t985;
t935 = t961 * t985 + t964 * t983;
t934 = t955 * t986 - t958 * t984;
t933 = t955 * t984 + t958 * t986;
t926 = t938 * t986 - t953 * t984;
t923 = t938 * t984 + t953 * t986;
t920 = t980 * t944 - t978 * t989;
t919 = t978 * t944 + t980 * t989;
t915 = -t933 * t978 + t934 * t980;
t914 = t933 * t980 + t934 * t978;
t913 = t981 * t915;
t912 = t979 * t915;
t910 = -t918 * t983 - t947;
t907 = -t923 * t978 + t926 * t980;
t904 = t923 * t980 + t926 * t978;
t903 = qJDD(5) + t947 - t987 * qJ(5) - qJDD(4) * pkin(4) + (t918 + t996) * t983;
t902 = -pkin(4) * t987 + qJDD(4) * qJ(5) + (2 * qJD(5) * qJD(4)) + t985 * t996 + t911;
t901 = -(-t992 + t993) * pkin(4) + (pkin(4) * qJD(4) - (2 * qJD(5))) * t983 * qJD(3) + t917 - t952 * qJ(5);
t900 = -t921 * t984 + t922 * t986;
t899 = t921 * t986 + t922 * t984;
t898 = t907 * t981 + t935 * t979;
t897 = t907 * t979 - t935 * t981;
t896 = -t910 * t983 + t911 * t985;
t895 = t910 * t985 + t911 * t983;
t894 = t902 * t985 + t903 * t983;
t893 = t902 * t983 - t903 * t985;
t892 = t896 * t986 + t917 * t984;
t891 = t896 * t984 - t917 * t986;
t890 = -t899 * t978 + t900 * t980;
t889 = t899 * t980 + t900 * t978;
t888 = t894 * t986 + t901 * t984;
t887 = t894 * t984 - t901 * t986;
t886 = -t891 * t978 + t892 * t980;
t885 = t891 * t980 + t892 * t978;
t884 = -t887 * t978 + t888 * t980;
t883 = t887 * t980 + t888 * t978;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t959 * t979 + t960 * t981, 0, 0, 0, 0, 0, 0, 0, 0, 0, t920 * t981 - t1000, 0, 0, 0, 0, 0, 0, t981 * t990, -t981 * t930, 0, t890 * t981 - t1000, 0, 0, 0, 0, 0, 0, t898, t1003, t913, t886 * t981 + t895 * t979, 0, 0, 0, 0, 0, 0, t898, t913, -t1003, t884 * t981 + t893 * t979; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t959 * t981 + t960 * t979, 0, 0, 0, 0, 0, 0, 0, 0, 0, t920 * t979 + t945, 0, 0, 0, 0, 0, 0, t979 * t990, -t979 * t930, 0, t890 * t979 + t945, 0, 0, 0, 0, 0, 0, t897, t1004, t912, t886 * t979 - t895 * t981, 0, 0, 0, 0, 0, 0, t897, t912, -t1004, t884 * t979 - t893 * t981; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t975, 0, 0, 0, 0, 0, 0, 0, 0, 0, t919, 0, 0, 0, 0, 0, 0, t930, t990, 0, t889, 0, 0, 0, 0, 0, 0, t904, -t905, t914, t885, 0, 0, 0, 0, 0, 0, t904, t914, t905, t883; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t960, 0, 0, 0, 0, 0, 0, 0, 0, 0, t920, 0, 0, 0, 0, 0, 0, t990, -t930, 0, t890, 0, 0, 0, 0, 0, 0, t907, t909, t915, t886, 0, 0, 0, 0, 0, 0, t907, t915, -t909, t884; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t959, 0, 0, 0, 0, 0, 0, 0, 0, 0, t954, 0, 0, 0, 0, 0, 0, 0, 0, 0, t954, 0, 0, 0, 0, 0, 0, -t935, t936, 0, -t895, 0, 0, 0, 0, 0, 0, -t935, 0, -t936, -t893; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t975, 0, 0, 0, 0, 0, 0, 0, 0, 0, t919, 0, 0, 0, 0, 0, 0, t930, t990, 0, t889, 0, 0, 0, 0, 0, 0, t904, -t905, t914, t885, 0, 0, 0, 0, 0, 0, t904, t914, t905, t883; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t944, 0, 0, 0, 0, 0, 0, t957, -t956, 0, t900, 0, 0, 0, 0, 0, 0, t926, -t927, t934, t892, 0, 0, 0, 0, 0, 0, t926, t934, t927, t888; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t989, 0, 0, 0, 0, 0, 0, t956, t957, 0, t899, 0, 0, 0, 0, 0, 0, t923, -t924, t933, t891, 0, 0, 0, 0, 0, 0, t923, t933, t924, t887; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t954, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t954, 0, 0, 0, 0, 0, 0, t935, -t936, 0, t895, 0, 0, 0, 0, 0, 0, t935, 0, t936, t893; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t988, -qJDD(3), 0, t922, 0, 0, 0, 0, 0, 0, t938, -t939, t955, t896, 0, 0, 0, 0, 0, 0, t938, t955, t939, t894; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t988, 0, t921, 0, 0, 0, 0, 0, 0, t953, -t952, t958, -t917, 0, 0, 0, 0, 0, 0, t953, t958, t952, -t901; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t954, 0, 0, 0, 0, 0, 0, t935, -t936, 0, t895, 0, 0, 0, 0, 0, 0, t935, 0, t936, t893; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t964, -t962, t993, t911, 0, 0, 0, 0, 0, 0, t964, t993, t962, t902; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t961, -t963, -t994, t910, 0, 0, 0, 0, 0, 0, t961, -t994, t963, -t903; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t953, t952, -t958, t917, 0, 0, 0, 0, 0, 0, -t953, -t958, -t952, t901; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t964, t993, t962, t902; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t953, -t958, -t952, t901; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t961, t994, -t963, t903;];
f_new_reg = t1;
