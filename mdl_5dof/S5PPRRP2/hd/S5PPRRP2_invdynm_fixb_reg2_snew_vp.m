% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PPRRP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d4,theta1,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:09
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PPRRP2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRRP2_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRRP2_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRRP2_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRRP2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PPRRP2_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:09:22
% EndTime: 2019-12-05 15:09:29
% DurationCPUTime: 7.92s
% Computational Cost: add. (14466->436), mult. (27215->514), div. (0->0), fcn. (17869->8), ass. (0->290)
t756 = qJD(4) ^ 2;
t752 = sin(qJ(4));
t741 = t752 ^ 2;
t757 = qJD(3) ^ 2;
t813 = t741 * t757;
t724 = t756 + t813;
t754 = cos(qJ(4));
t729 = t752 * t757 * t754;
t723 = qJDD(4) - t729;
t814 = t723 * t754;
t679 = -t724 * t752 + t814;
t800 = qJD(3) * qJD(4);
t734 = t754 * t800;
t798 = t752 * qJDD(3);
t710 = 0.2e1 * t734 + t798;
t753 = sin(qJ(3));
t755 = cos(qJ(3));
t629 = t679 * t753 + t710 * t755;
t632 = t679 * t755 - t710 * t753;
t746 = sin(pkin(8));
t748 = cos(pkin(8));
t577 = t629 * t746 - t632 * t748;
t815 = t723 * t752;
t673 = t724 * t754 + t815;
t747 = sin(pkin(7));
t749 = cos(pkin(7));
t882 = qJ(1) * (t577 * t749 - t673 * t747);
t881 = qJ(1) * (t577 * t747 + t673 * t749);
t573 = t629 * t748 + t632 * t746;
t880 = pkin(1) * t573;
t879 = qJ(2) * t573;
t878 = -pkin(1) * t673 - qJ(2) * t577;
t733 = t752 * t800;
t797 = t754 * qJDD(3);
t712 = -0.2e1 * t733 + t797;
t823 = t712 * t754;
t828 = t710 * t752;
t647 = -t823 + t828;
t742 = t754 ^ 2;
t719 = (t741 - t742) * t757;
t623 = t647 * t753 + t719 * t755;
t625 = t647 * t755 - t719 * t753;
t563 = t623 * t746 - t625 * t748;
t824 = t712 * t752;
t826 = t710 * t754;
t644 = t824 + t826;
t877 = t563 * t747 - t644 * t749;
t876 = t563 * t749 + t644 * t747;
t812 = t742 * t757;
t726 = -t756 + t812;
t677 = -t726 * t754 + t815;
t635 = t677 * t753 + t755 * t797;
t638 = t677 * t755 - t753 * t797;
t589 = t635 * t746 - t638 * t748;
t669 = t726 * t752 + t814;
t873 = t589 * t747 - t669 * t749;
t872 = t589 * t749 + t669 * t747;
t871 = pkin(2) * t629;
t870 = pkin(5) * t629;
t869 = -pkin(2) * t673 + pkin(5) * t632;
t562 = t623 * t748 + t625 * t746;
t587 = t635 * t748 + t638 * t746;
t721 = g(1) * t749 + g(2) * t747;
t743 = g(3) - qJDD(1);
t688 = -t721 * t748 - t743 * t746;
t786 = -t746 * t721 + t743 * t748;
t620 = t688 * t753 + t755 * t786;
t621 = t755 * t688 - t753 * t786;
t789 = t620 * t753 + t755 * t621;
t559 = t620 * t755 - t621 * t753;
t830 = t559 * t746;
t868 = t748 * t789 + t830;
t829 = t559 * t748;
t523 = -t746 * t789 + t829;
t720 = g(1) * t747 - t749 * g(2);
t714 = -qJDD(2) + t720;
t716 = qJDD(3) * t753 + t755 * t757;
t661 = pkin(5) * t716 - t714 * t755;
t717 = qJDD(3) * t755 - t753 * t757;
t771 = -pkin(5) * t717 - t714 * t753;
t788 = -t716 * t746 + t748 * t717;
t867 = -qJ(2) * t788 + t661 * t746 + t748 * t771;
t864 = pkin(3) * t673;
t863 = pkin(6) * t673;
t610 = -pkin(3) * t757 + qJDD(3) * pkin(6) + t621;
t695 = t754 * t714;
t773 = pkin(4) * t754 + qJ(5) * t752;
t802 = t757 * t773;
t570 = -qJDD(4) * pkin(4) - t756 * qJ(5) + t752 * (t610 - t802) + qJDD(5) + t695;
t722 = qJDD(4) + t729;
t727 = -t756 - t812;
t856 = pkin(4) * t722 + qJ(5) * t727 - t570;
t711 = t734 + t798;
t855 = t711 + t734;
t854 = -pkin(3) * t710 - pkin(6) * t679;
t650 = t748 * t716 + t717 * t746;
t581 = qJ(2) * t650 + t661 * t748 - t746 * t771;
t799 = (qJD(5) * qJD(4));
t737 = 2 * t799;
t599 = t754 * t610 - t752 * t714;
t770 = -t756 * pkin(4) + qJDD(4) * qJ(5) - t754 * t802 + t599;
t567 = t737 + t770;
t803 = t741 + t742;
t718 = t803 * t757;
t549 = pkin(4) * t718 + t567;
t556 = qJ(5) * t718 + t570;
t849 = -t754 * t549 - t752 * t556;
t598 = t610 * t752 + t695;
t537 = t752 * t598 + t754 * t599;
t529 = t567 * t754 + t570 * t752;
t609 = -qJDD(3) * pkin(3) - t757 * pkin(6) + t620;
t783 = -t733 + t797;
t761 = -t783 * pkin(4) - t855 * qJ(5) + t609;
t801 = qJD(3) * t752;
t566 = (pkin(4) * qJD(4) - (2 * qJD(5))) * t801 + t761;
t507 = t529 * t753 - t566 * t755;
t760 = pkin(6) * t529 + (-pkin(3) - t773) * t566;
t848 = pkin(2) * t507 + t760;
t846 = t748 * t688 + t746 * t786;
t618 = -t746 * t688 + t748 * t786;
t817 = t722 * t752;
t676 = t727 * t754 - t817;
t628 = t676 * t753 + t712 * t755;
t631 = t676 * t755 - t712 * t753;
t572 = t628 * t748 + t631 * t746;
t844 = pkin(1) * t572;
t842 = pkin(2) * t559;
t816 = t722 * t754;
t670 = t727 * t752 + t816;
t841 = pkin(3) * t670;
t838 = pkin(5) * t628;
t715 = t803 * qJDD(3);
t656 = t715 * t753 + t718 * t755;
t837 = pkin(5) * t656;
t836 = pkin(6) * t670;
t575 = -t628 * t746 + t631 * t748;
t835 = qJ(1) * (t575 * t747 - t670 * t749);
t657 = t715 * t755 - t718 * t753;
t604 = -t656 * t746 + t657 * t748;
t834 = qJ(1) * t604;
t833 = qJ(2) * t572;
t603 = t656 * t748 + t657 * t746;
t832 = qJ(2) * t603;
t822 = t714 * t747;
t690 = t746 * t714;
t810 = t747 * t743;
t691 = t748 * t714;
t692 = t749 * t714;
t809 = t749 * t743;
t605 = t752 * t609;
t606 = t754 * t609;
t807 = -pkin(1) * t670 + qJ(2) * t575;
t806 = -pkin(3) * t609 + pkin(6) * t537;
t805 = pkin(3) * t712 + pkin(6) * t676;
t804 = pkin(3) * t718 + pkin(6) * t715;
t796 = t605 + t854;
t795 = -t606 + t805;
t792 = -pkin(2) * t670 + pkin(5) * t631;
t775 = -pkin(2) * t716 - t621;
t582 = pkin(1) * t650 - t775;
t791 = -qJ(1) * t788 + t582;
t766 = pkin(2) * t717 - t620;
t583 = -pkin(1) * t788 - t766;
t790 = -qJ(1) * t650 + t583;
t785 = -t720 * t747 - t749 * t721;
t782 = t753 * t729;
t781 = t755 * t729;
t780 = t804 - t849;
t779 = t804 + t537;
t627 = pkin(2) * t628;
t778 = t627 + t795;
t525 = t537 * t753 - t609 * t755;
t776 = pkin(2) * t525 + t806;
t774 = -pkin(4) * t570 + qJ(5) * t567;
t772 = pkin(4) * t752 - qJ(5) * t754;
t536 = t598 * t754 - t599 * t752;
t769 = t720 * t749 - t721 * t747;
t649 = pkin(2) * t656;
t768 = -pkin(1) * t603 - t649 - t804;
t767 = t796 - t871;
t759 = 0.2e1 * qJD(5) * t801 - t761;
t545 = -pkin(4) * t733 + qJ(5) * t710 + t759;
t765 = pkin(4) * t826 + t752 * t545 - t854;
t546 = (t712 - t733) * pkin(4) + t759;
t764 = qJ(5) * t824 + t754 * t546 + t805;
t763 = t627 + t764;
t762 = t765 + t871;
t758 = pkin(4) * t724 + qJ(5) * t723 + t770;
t725 = -t756 + t813;
t707 = t772 * qJDD(3);
t706 = pkin(1) * t714;
t705 = t803 * t800;
t687 = qJDD(4) * t753 + t705 * t755;
t686 = t711 * t754 - t741 * t800;
t685 = -qJDD(4) * t755 + t705 * t753;
t684 = -t742 * t800 - t752 * t783;
t678 = t725 * t752 + t816;
t672 = -t725 * t754 + t817;
t668 = t855 * t752;
t667 = t752 * t734 - t754 * t783;
t648 = pkin(5) * t657;
t643 = t686 * t755 - t782;
t642 = t684 * t755 + t782;
t641 = t686 * t753 + t781;
t640 = t684 * t753 - t781;
t639 = t678 * t755 + t753 * t798;
t636 = t678 * t753 - t755 * t798;
t615 = -t685 * t746 + t687 * t748;
t614 = t685 * t748 + t687 * t746;
t612 = t749 * t615;
t611 = t747 * t615;
t602 = qJ(2) * t846 + t706;
t601 = qJ(2) * t604;
t600 = t749 * t834;
t595 = -t641 * t746 + t643 * t748;
t594 = -t640 * t746 + t642 * t748;
t593 = t641 * t748 + t643 * t746;
t592 = t640 * t748 + t642 * t746;
t591 = -t636 * t746 + t639 * t748;
t588 = t636 * t748 + t639 * t746;
t585 = t606 + t863;
t584 = t605 - t836;
t569 = t599 + t864;
t568 = t598 - t841;
t555 = t595 * t749 + t668 * t747;
t554 = t594 * t749 - t667 * t747;
t553 = t595 * t747 - t668 * t749;
t552 = t594 * t747 + t667 * t749;
t551 = t591 * t749 + t672 * t747;
t550 = t591 * t747 - t672 * t749;
t542 = pkin(2) * t714 + pkin(5) * t789;
t540 = qJ(1) * (t575 * t749 + t670 * t747);
t539 = -t841 - t856;
t538 = -t758 - (2 * t799) - t864;
t533 = -pkin(4) * t828 + t545 * t754 - t863;
t532 = qJ(5) * t823 - t546 * t752 - t836;
t531 = t536 * t755 - t837;
t530 = t536 * t753 + t648;
t528 = t567 * t752 - t570 * t754;
t526 = t537 * t755 + t609 * t753;
t520 = -t549 * t752 + t556 * t754;
t519 = -t569 * t753 + t585 * t755 + t870;
t518 = -t568 * t753 + t584 * t755 - t838;
t517 = -t767 + t880;
t516 = -t778 - t844;
t515 = t569 * t755 + t585 * t753 - t869;
t514 = t568 * t755 + t584 * t753 + t792;
t513 = t768 - t537;
t512 = t520 * t755 - t707 * t753 - t837;
t511 = t520 * t753 + t707 * t755 + t648;
t510 = -t762 - t880;
t509 = -t763 - t844;
t508 = t529 * t755 + t566 * t753;
t506 = pkin(1) * t523 + t842;
t505 = t768 + t849;
t504 = t532 * t755 - t539 * t753 - t838;
t503 = t533 * t755 - t538 * t753 - t870;
t502 = t532 * t753 + t539 * t755 + t792;
t501 = t533 * t753 + t538 * t755 + t869;
t500 = -pkin(3) * t528 - t774;
t499 = -pkin(6) * t528 + t566 * t772;
t498 = -t525 * t746 + t526 * t748;
t497 = t525 * t748 + t526 * t746;
t496 = -t530 * t746 + t531 * t748 - t832;
t495 = t530 * t748 + t531 * t746 + t601;
t494 = pkin(5) * t829 + qJ(2) * t523 - t542 * t746;
t493 = pkin(5) * t830 + qJ(2) * t868 + t542 * t748 + t706;
t492 = -pkin(5) * t525 - (pkin(3) * t753 - pkin(6) * t755) * t536;
t491 = -t515 * t746 + t519 * t748 + t879;
t490 = -t514 * t746 + t518 * t748 - t833;
t489 = t515 * t748 + t519 * t746 - t878;
t488 = t514 * t748 + t518 * t746 + t807;
t487 = -t511 * t746 + t512 * t748 - t832;
t486 = t511 * t748 + t512 * t746 + t601;
t485 = -t507 * t746 + t508 * t748;
t484 = t507 * t748 + t508 * t746;
t483 = pkin(5) * t526 - (-pkin(3) * t755 - pkin(6) * t753 - pkin(2)) * t536;
t482 = -t502 * t746 + t504 * t748 - t833;
t481 = -t501 * t746 + t503 * t748 - t879;
t480 = t502 * t748 + t504 * t746 + t807;
t479 = -pkin(1) * t497 - t776;
t478 = t501 * t748 + t503 * t746 + t878;
t477 = -pkin(5) * t507 + t499 * t755 - t500 * t753;
t476 = -pkin(2) * t528 + pkin(5) * t508 + t499 * t753 + t500 * t755;
t475 = -pkin(1) * t484 - t848;
t474 = -qJ(2) * t497 - t483 * t746 + t492 * t748;
t473 = pkin(1) * t536 + qJ(2) * t498 + t483 * t748 + t492 * t746;
t472 = -qJ(2) * t484 - t476 * t746 + t477 * t748;
t471 = -pkin(1) * t528 + qJ(2) * t485 + t476 * t748 + t477 * t746;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t810, -t809, -t769, -qJ(1) * t769, 0, 0, 0, 0, 0, 0, -t746 * t692 - t747 * t786, -t688 * t747 - t748 * t692, t749 * t618, -qJ(1) * (t747 * t846 + t692) - (pkin(1) * t747 - qJ(2) * t749) * t618, 0, 0, t749 * t788, 0, -t749 * t650, t747 * qJDD(3), -t790 * t747 + t749 * t867, t581 * t749 - t791 * t747, t749 * t523, t749 * t494 - t747 * t506 - qJ(1) * (t747 * t868 + t692), t555, t876, t551, t554, t872, t612, t490 * t749 - t516 * t747 - t835, t749 * t491 - t747 * t517 - t881, t496 * t749 + (-t513 - t834) * t747, t749 * t474 - t747 * t479 - qJ(1) * (t498 * t747 + t536 * t749), t555, t551, -t876, t612, -t872, t554, t482 * t749 - t509 * t747 - t835, t487 * t749 + (-t505 - t834) * t747, t749 * t481 - t747 * t510 + t881, t749 * t472 - t747 * t475 - qJ(1) * (t485 * t747 - t528 * t749); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t809, -t810, t785, qJ(1) * t785, 0, 0, 0, 0, 0, 0, -t747 * t690 + t749 * t786, t688 * t749 - t747 * t691, t747 * t618, qJ(1) * (t749 * t846 - t822) - (-pkin(1) * t749 - qJ(2) * t747) * t618, 0, 0, t747 * t788, 0, -t747 * t650, -t749 * qJDD(3), t747 * t867 + t790 * t749, t581 * t747 + t791 * t749, t747 * t523, t747 * t494 + t749 * t506 + qJ(1) * (t749 * t868 - t822), t553, t877, t550, t552, t873, t611, t490 * t747 + t516 * t749 + t540, t747 * t491 + t749 * t517 + t882, t496 * t747 + t513 * t749 + t600, t747 * t474 + t749 * t479 + qJ(1) * (t498 * t749 - t536 * t747), t553, t550, -t877, t611, -t873, t552, t482 * t747 + t509 * t749 + t540, t487 * t747 + t505 * t749 + t600, t747 * t481 + t749 * t510 - t882, t747 * t472 + t749 * t475 + qJ(1) * (t485 * t749 + t528 * t747); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t720, t721, 0, 0, 0, 0, 0, 0, 0, 0, t691, -t690, t846, t602, 0, 0, t650, 0, t788, 0, -t581, t867, t868, t493, t593, -t562, t588, t592, -t587, t614, t488, t489, t495, t473, t593, t588, t562, t614, t587, t592, t480, t486, t478, t471; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t743, -t720, 0, 0, 0, 0, 0, 0, 0, -t690, -t691, t618, qJ(2) * t618, 0, 0, t788, 0, -t650, 0, t867, t581, t523, t494, t595, t563, t591, t594, t589, t615, t490, t491, t496, t474, t595, t591, -t563, t615, -t589, t594, t482, t487, t481, t472; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t743, 0, -t721, 0, 0, 0, 0, 0, 0, 0, t786, t688, 0, pkin(1) * t618, 0, 0, 0, 0, 0, -qJDD(3), t583, t582, 0, t506, -t668, -t644, -t672, t667, -t669, 0, t516, t517, t513, t479, -t668, -t672, t644, 0, t669, t667, t509, t505, t510, t475; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t720, t721, 0, 0, 0, 0, 0, 0, 0, 0, t691, -t690, t846, t602, 0, 0, t650, 0, t788, 0, -t581, t867, t868, t493, t593, -t562, t588, t592, -t587, t614, t488, t489, t495, t473, t593, t588, t562, t614, t587, t592, t480, t486, t478, t471; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t714, t786, 0, 0, 0, t717, 0, -t716, 0, t771, t661, t559, pkin(5) * t559, t643, -t625, t639, t642, -t638, t687, t518, t519, t531, t492, t643, t639, t625, t687, t638, t642, t504, t512, t503, t477; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t714, 0, t688, 0, 0, 0, t716, 0, t717, 0, -t661, t771, t789, t542, t641, -t623, t636, t640, -t635, t685, t514, t515, t530, t483, t641, t636, t623, t685, t635, t640, t502, t511, t501, t476; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t786, -t688, 0, 0, 0, 0, 0, 0, 0, qJDD(3), t766, t775, 0, -t842, t668, t644, t672, -t667, t669, 0, t778, t767, t649 + t779, t776, t668, t672, -t644, 0, -t669, -t667, t763, t649 + t780, t762, t848; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), 0, -t757, 0, 0, -t714, t620, 0, t686, -t647, t678, t684, -t677, t705, t584, t585, t536, pkin(6) * t536, t686, t678, t647, t705, t677, t684, t532, t520, t533, t499; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t757, 0, qJDD(3), 0, t714, 0, t621, 0, t729, -t719, -t798, -t729, -t797, -qJDD(4), t568, t569, 0, pkin(3) * t536, t729, -t798, t719, -qJDD(4), t797, -t729, t539, t707, t538, t500; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t620, -t621, 0, 0, t668, t644, t672, -t667, t669, 0, t795, t796, t779, t806, t668, t672, -t644, 0, -t669, -t667, t764, t780, t765, t760; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t711, t712, t722, -t734, t726, t734, 0, t609, t598, 0, t711, t722, -t712, t734, -t726, -t734, qJ(5) * t712, t556, t545, -qJ(5) * t566; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t733, t710, -t725, t783, t723, -t733, -t609, 0, t599, 0, t733, -t725, -t710, -t733, -t723, t783, t546, t549, pkin(4) * t710, -pkin(4) * t566; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t729, t719, t798, t729, t797, qJDD(4), -t598, -t599, 0, 0, -t729, t798, -t719, qJDD(4), -t797, t729, t856, -t707, t737 + t758, t774; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t711, t722, -t712, t734, -t726, -t734, 0, t570, -t566, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t729, t798, -t719, qJDD(4), -t797, t729, -t570, 0, t567, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t733, t725, t710, t733, t723, -t783, t566, -t567, 0, 0;];
m_new_reg = t1;
