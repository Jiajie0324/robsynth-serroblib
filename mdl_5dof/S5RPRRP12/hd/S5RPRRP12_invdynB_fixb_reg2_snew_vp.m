% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRRP12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:57
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRRP12_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP12_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP12_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP12_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP12_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPRRP12_invdynB_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:57:25
% EndTime: 2019-12-31 18:57:32
% DurationCPUTime: 4.19s
% Computational Cost: add. (10916->383), mult. (21382->508), div. (0->0), fcn. (13001->6), ass. (0->281)
t436 = sin(qJ(4));
t439 = cos(qJ(4));
t440 = cos(qJ(3));
t488 = qJD(1) * t440;
t403 = -qJD(3) * t439 + t436 * t488;
t405 = qJD(3) * t436 + t439 * t488;
t370 = t405 * t403;
t484 = qJD(1) * qJD(3);
t471 = t440 * t484;
t437 = sin(qJ(3));
t482 = t437 * qJDD(1);
t409 = -t471 - t482;
t401 = qJDD(4) - t409;
t469 = -t401 + t370;
t503 = t436 * t469;
t495 = t439 * t469;
t521 = pkin(6) + pkin(1);
t524 = t469 * pkin(4);
t443 = qJD(1) ^ 2;
t523 = t521 * t443;
t486 = t437 * qJD(1);
t426 = qJD(4) + t486;
t389 = t426 * t403;
t472 = t437 * t484;
t480 = t440 * qJDD(1);
t410 = -t472 + t480;
t446 = qJD(4) * t403 - qJDD(3) * t436 - t410 * t439;
t522 = -t389 - t446;
t468 = -qJDD(3) * t439 + t436 * t410;
t335 = (qJD(4) - t426) * t405 + t468;
t399 = t403 ^ 2;
t400 = t405 ^ 2;
t425 = t426 ^ 2;
t362 = -t425 - t399;
t308 = t362 * t436 - t495;
t520 = pkin(3) * t308;
t366 = -t400 - t425;
t355 = t370 + t401;
t504 = t436 * t355;
t315 = t366 * t439 - t504;
t519 = pkin(3) * t315;
t518 = pkin(3) * t437;
t339 = -t389 + t446;
t296 = -t335 * t439 - t339 * t436;
t353 = -t399 - t400;
t261 = t296 * t437 - t353 * t440;
t294 = -t335 * t436 + t339 * t439;
t438 = sin(qJ(1));
t441 = cos(qJ(1));
t236 = -t261 * t441 + t294 * t438;
t517 = pkin(5) * t236;
t309 = t362 * t439 + t503;
t334 = (qJD(4) + t426) * t405 + t468;
t272 = t309 * t437 - t334 * t440;
t245 = -t272 * t441 + t308 * t438;
t516 = pkin(5) * t245;
t496 = t439 * t355;
t316 = -t366 * t436 - t496;
t277 = t316 * t437 - t440 * t522;
t248 = -t277 * t441 + t315 * t438;
t515 = pkin(5) * t248;
t514 = pkin(7) * t294;
t513 = pkin(7) * t308;
t512 = pkin(7) * t315;
t511 = qJDD(1) * pkin(1);
t510 = t426 * t436;
t509 = t426 * t439;
t434 = t437 ^ 2;
t508 = t434 * t443;
t435 = t440 ^ 2;
t507 = t435 * t443;
t483 = qJD(2) * qJD(1);
t431 = 0.2e1 * t483;
t420 = t441 * g(1) + t438 * g(2);
t433 = qJDD(1) * qJ(2);
t456 = t420 - t433;
t450 = t431 - t456;
t457 = -t410 + t472;
t458 = -t409 + t471;
t327 = pkin(3) * t458 + pkin(7) * t457 + t450 - t523;
t462 = -pkin(7) * t440 + t518;
t407 = t462 * qJD(1);
t442 = qJD(3) ^ 2;
t419 = t438 * g(1) - g(2) * t441;
t459 = qJDD(2) - t419;
t447 = -t443 * qJ(2) + t459;
t387 = -qJDD(1) * t521 + t447;
t470 = g(3) * t440 - t387 * t437;
t343 = -pkin(3) * t442 + qJDD(3) * pkin(7) - t407 * t486 - t470;
t287 = -t327 * t439 + t343 * t436;
t474 = -qJ(5) * t446 + t287;
t449 = -qJ(5) * t389 - t474;
t487 = qJD(5) * t405;
t242 = t449 - 0.2e1 * t487 - t524;
t506 = t436 * t242;
t364 = t437 * g(3) + t440 * t387;
t342 = qJDD(3) * pkin(3) + t442 * pkin(7) - t407 * t488 + t364;
t505 = t436 * t342;
t382 = t456 - 0.2e1 * t483 + t523;
t502 = t437 * t382;
t476 = t437 * t443 * t440;
t417 = qJDD(3) + t476;
t501 = t437 * t417;
t418 = qJDD(3) - t476;
t500 = t437 * t418;
t489 = t434 + t435;
t412 = t489 * qJDD(1);
t499 = t438 * t412;
t498 = t439 * t242;
t497 = t439 * t342;
t494 = t440 * t382;
t493 = t440 * t417;
t492 = t440 * t418;
t491 = t441 * t412;
t288 = t327 * t436 + t343 * t439;
t490 = -t366 - t399;
t481 = t438 * qJDD(1);
t479 = t441 * qJDD(1);
t262 = t296 * t440 + t353 * t437;
t478 = t521 * t262;
t477 = t437 * t370;
t475 = t440 * t370;
t473 = pkin(3) * t440 + pkin(2);
t241 = t287 * t436 + t288 * t439;
t390 = -t443 * pkin(1) + t450;
t391 = -t447 + t511;
t349 = t390 * t441 - t391 * t438;
t372 = -t419 * t438 - t420 * t441;
t467 = t438 * t476;
t466 = t441 * t476;
t465 = qJ(2) * t294 - t261 * t521;
t464 = qJ(2) * t308 - t272 * t521;
t463 = qJ(2) * t315 - t277 * t521;
t413 = -t438 * t443 + t479;
t461 = pkin(5) * t413 + g(3) * t438;
t414 = t441 * t443 + t481;
t460 = -pkin(5) * t414 + g(3) * t441;
t240 = -t287 * t439 + t288 * t436;
t325 = t440 * t364 - t437 * t470;
t326 = -t364 * t437 - t440 * t470;
t346 = t390 * t438 + t391 * t441;
t371 = t419 * t441 - t420 * t438;
t455 = pkin(2) * t261 - pkin(3) * t353 + pkin(7) * t296 - qJ(2) * t262;
t273 = t309 * t440 + t334 * t437;
t454 = pkin(2) * t272 - pkin(3) * t334 + pkin(7) * t309 - qJ(2) * t273;
t278 = t316 * t440 + t437 * t522;
t453 = pkin(2) * t277 - pkin(3) * t522 + pkin(7) * t316 - qJ(2) * t278;
t452 = pkin(2) * t308 - t273 * t521;
t451 = pkin(2) * t315 - t278 * t521;
t360 = -qJD(4) * t405 - t468;
t379 = pkin(4) * t426 - qJ(5) * t405;
t448 = qJ(5) * t360 - 0.2e1 * qJD(5) * t403 - t426 * t379 + t288;
t445 = -t379 * t405 - qJDD(5) + t342;
t444 = -t360 * pkin(4) - t445;
t424 = -t442 - t507;
t423 = t442 - t507;
t422 = -t442 - t508;
t421 = -t442 + t508;
t416 = (-t434 + t435) * t443;
t415 = t489 * t443;
t411 = -0.2e1 * t472 + t480;
t408 = 0.2e1 * t471 + t482;
t402 = t489 * t484;
t398 = 0.2e1 * t487;
t386 = -t400 + t425;
t385 = t399 - t425;
t384 = -t410 * t437 - t435 * t484;
t383 = -t409 * t440 - t434 * t484;
t378 = -t424 * t437 - t493;
t377 = t422 * t440 - t500;
t376 = t424 * t440 - t501;
t375 = -t423 * t440 - t500;
t374 = t422 * t437 + t492;
t373 = -t421 * t437 - t493;
t369 = -t400 + t399;
t368 = -t415 * t441 - t499;
t367 = -t415 * t438 + t491;
t363 = t408 * t437 - t411 * t440;
t351 = t376 * t438 + t411 * t441;
t350 = t374 * t438 + t408 * t441;
t348 = -t376 * t441 + t411 * t438;
t347 = -t374 * t441 + t408 * t438;
t345 = (-t403 * t439 + t405 * t436) * t426;
t344 = (-t403 * t436 - t405 * t439) * t426;
t331 = -t405 * t510 - t439 * t446;
t330 = t405 * t509 - t436 * t446;
t329 = -t360 * t436 + t403 * t509;
t328 = t360 * t439 + t403 * t510;
t322 = t345 * t440 + t401 * t437;
t321 = -t345 * t437 + t401 * t440;
t320 = t385 * t439 - t504;
t319 = -t386 * t436 - t495;
t318 = t385 * t436 + t496;
t317 = t386 * t439 - t503;
t314 = -pkin(2) * t415 - t326;
t311 = pkin(2) * t376 - qJ(2) * t378 + t470;
t310 = pkin(2) * t374 - qJ(2) * t377 + t364;
t305 = pkin(2) * t408 - t377 * t521 - t494;
t304 = pkin(2) * t411 - t378 * t521 + t502;
t303 = t325 * t438 - t382 * t441;
t302 = -t325 * t441 - t382 * t438;
t301 = t331 * t440 + t477;
t300 = t329 * t440 - t477;
t299 = -t331 * t437 + t475;
t298 = -t329 * t437 - t475;
t297 = -pkin(4) * t522 - qJ(5) * t355;
t295 = -t334 * t439 - t436 * t522;
t293 = -t334 * t436 + t439 * t522;
t290 = -t321 * t438 + t344 * t441;
t289 = t321 * t441 + t344 * t438;
t285 = t320 * t440 - t335 * t437;
t284 = t319 * t440 - t339 * t437;
t283 = -t320 * t437 - t335 * t440;
t282 = -t319 * t437 - t339 * t440;
t281 = -t497 - t512;
t280 = pkin(2) * t325 - qJ(2) * t326;
t279 = -t505 - t513;
t274 = t399 * qJ(5) - t444;
t269 = t295 * t440 - t369 * t437;
t268 = -t295 * t437 - t369 * t440;
t267 = -pkin(2) * t382 - t326 * t521;
t266 = -t299 * t438 + t330 * t441;
t265 = -t298 * t438 + t328 * t441;
t264 = t299 * t441 + t330 * t438;
t263 = t298 * t441 + t328 * t438;
t258 = qJ(5) * t490 + t444;
t257 = -pkin(3) * t294 - pkin(4) * t339;
t256 = t288 - t519;
t255 = t287 - t520;
t254 = -t283 * t438 + t318 * t441;
t253 = -t282 * t438 + t317 * t441;
t252 = t283 * t441 + t318 * t438;
t251 = t282 * t441 + t317 * t438;
t250 = -pkin(4) * t399 + t448;
t249 = t277 * t438 + t315 * t441;
t247 = pkin(5) * t249;
t246 = t272 * t438 + t308 * t441;
t244 = pkin(5) * t246;
t243 = (t362 + t399) * qJ(5) + (-t334 + t360) * pkin(4) + t445;
t239 = -t268 * t438 + t293 * t441;
t238 = t268 * t441 + t293 * t438;
t237 = t261 * t438 + t294 * t441;
t235 = pkin(5) * t237;
t234 = t398 + (-t339 + t389) * qJ(5) + t524 + t474;
t233 = t241 * t440 - t342 * t437;
t232 = t241 * t437 + t342 * t440;
t231 = -qJ(5) * t335 + (-t353 - t399) * pkin(4) + t448;
t230 = pkin(4) * t490 + t448 - t519;
t229 = t258 * t439 - t297 * t436 - t512;
t228 = t398 - t449 - t520 + 0.2e1 * t524;
t227 = pkin(4) * t274 + qJ(5) * t250;
t226 = qJ(5) * t495 - t243 * t436 - t513;
t225 = -t240 - t514;
t224 = t250 * t439 - t506;
t223 = t250 * t436 + t498;
t222 = t453 - t505;
t221 = t454 + t497;
t220 = t232 * t438 + t240 * t441;
t219 = -t232 * t441 + t240 * t438;
t218 = t224 * t440 - t274 * t437;
t217 = t224 * t437 + t274 * t440;
t216 = t258 * t436 + t297 * t439 + t453;
t215 = -t440 * t256 - t437 * t281 + t451;
t214 = -pkin(3) * t223 - pkin(4) * t242;
t213 = qJ(5) * t503 + t243 * t439 + t454;
t212 = -t440 * t255 - t437 * t279 + t452;
t211 = -t231 * t436 + t234 * t439 - t514;
t210 = t241 + t455;
t209 = pkin(2) * t232 + pkin(3) * t342 + pkin(7) * t241 - qJ(2) * t233;
t208 = -t437 * t225 + t294 * t473 - t478;
t207 = -t437 * t229 - t440 * t230 + t451;
t206 = -pkin(7) * t223 - qJ(5) * t498 - t227 * t436;
t205 = t217 * t438 + t223 * t441;
t204 = -t217 * t441 + t223 * t438;
t203 = -t437 * t226 - t440 * t228 + t452;
t202 = t231 * t439 + t234 * t436 + t455;
t201 = -t521 * t233 + (pkin(7) * t437 + t473) * t240;
t200 = pkin(2) * t294 - t437 * t211 - t440 * t257 - t478;
t199 = pkin(2) * t217 + pkin(3) * t274 + pkin(7) * t224 - qJ(2) * t218 - qJ(5) * t506 + t227 * t439;
t198 = pkin(2) * t223 - t437 * t206 - t440 * t214 - t218 * t521;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t414, -t413, 0, t372, 0, 0, 0, 0, 0, 0, 0, t414, t413, t349, 0, 0, 0, 0, 0, 0, t350, t351, t368, t303, 0, 0, 0, 0, 0, 0, t246, t249, t237, t220, 0, 0, 0, 0, 0, 0, t246, t249, t237, t205; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t413, -t414, 0, t371, 0, 0, 0, 0, 0, 0, 0, -t413, t414, t346, 0, 0, 0, 0, 0, 0, t347, t348, t367, t302, 0, 0, 0, 0, 0, 0, t245, t248, t236, t219, 0, 0, 0, 0, 0, 0, t245, t248, t236, t204; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t377, t378, 0, t326, 0, 0, 0, 0, 0, 0, t273, t278, t262, t233, 0, 0, 0, 0, 0, 0, t273, t278, t262, t218; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t413, 0, -t414, 0, -t461, -t460, -t371, -pkin(5) * t371, 0, -t413, t414, 0, 0, 0, -t346, t461, t460, -pkin(5) * t346 + (-pkin(1) * t438 + qJ(2) * t441) * g(3), -t384 * t438 + t466, -t363 * t438 + t416 * t441, -t375 * t438 + t440 * t479, -t383 * t438 - t466, -t373 * t438 - t437 * t479, qJDD(3) * t441 - t402 * t438, -pkin(5) * t347 - t305 * t438 + t310 * t441, -pkin(5) * t348 - t304 * t438 + t311 * t441, -pkin(2) * t491 - pkin(5) * t367 - t314 * t438, -pkin(5) * t302 - t267 * t438 + t280 * t441, t266, t239, t253, t265, t254, t290, -t212 * t438 + t221 * t441 - t516, -t215 * t438 + t222 * t441 - t515, -t208 * t438 + t210 * t441 - t517, -pkin(5) * t219 - t201 * t438 + t209 * t441, t266, t239, t253, t265, t254, t290, -t203 * t438 + t213 * t441 - t516, -t207 * t438 + t216 * t441 - t515, -t200 * t438 + t202 * t441 - t517, -pkin(5) * t204 - t198 * t438 + t199 * t441; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t414, 0, t413, 0, t460, -t461, t372, pkin(5) * t372, 0, -t414, -t413, 0, 0, 0, t349, -t460, t461, pkin(5) * t349 + (pkin(1) * t441 + qJ(2) * t438) * g(3), t384 * t441 + t467, t363 * t441 + t416 * t438, t375 * t441 + t438 * t480, t383 * t441 - t467, t373 * t441 - t437 * t481, qJDD(3) * t438 + t402 * t441, pkin(5) * t350 + t305 * t441 + t310 * t438, pkin(5) * t351 + t304 * t441 + t311 * t438, -pkin(2) * t499 + pkin(5) * t368 + t314 * t441, pkin(5) * t303 + t267 * t441 + t280 * t438, t264, t238, t251, t263, t252, t289, t212 * t441 + t221 * t438 + t244, t215 * t441 + t222 * t438 + t247, t208 * t441 + t210 * t438 + t235, pkin(5) * t220 + t201 * t441 + t209 * t438, t264, t238, t251, t263, t252, t289, t203 * t441 + t213 * t438 + t244, t207 * t441 + t216 * t438 + t247, t200 * t441 + t202 * t438 + t235, pkin(5) * t205 + t198 * t441 + t199 * t438; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t419, t420, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t459 - 0.2e1 * t511, -t420 + t431 + 0.2e1 * t433, pkin(1) * t391 + qJ(2) * t390, -t457 * t440, -t408 * t440 - t411 * t437, -t423 * t437 + t492, t458 * t437, t421 * t440 - t501, 0, qJ(2) * t408 - t374 * t521 - t502, qJ(2) * t411 - t376 * t521 - t494, -qJ(2) * t415 + t412 * t521 - t325, -qJ(2) * t382 - t325 * t521, t301, t269, t284, t300, t285, t322, -t255 * t437 + t279 * t440 + t464, -t256 * t437 + t281 * t440 + t463, t225 * t440 + t294 * t518 + t465, -t521 * t232 + (qJ(2) + t462) * t240, t301, t269, t284, t300, t285, t322, t226 * t440 - t228 * t437 + t464, t229 * t440 - t230 * t437 + t463, t211 * t440 - t257 * t437 + t465, qJ(2) * t223 + t440 * t206 - t437 * t214 - t217 * t521;];
tauB_reg = t1;
