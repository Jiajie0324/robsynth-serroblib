% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRRP12
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:57
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRRP12_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP12_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP12_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP12_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP12_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPRRP12_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:57:32
% EndTime: 2019-12-31 18:57:39
% DurationCPUTime: 7.42s
% Computational Cost: add. (21663->506), mult. (42394->533), div. (0->0), fcn. (25535->6), ass. (0->332)
t800 = sin(qJ(4));
t803 = cos(qJ(4));
t804 = cos(qJ(3));
t874 = qJD(1) * t804;
t764 = -qJD(3) * t803 + t800 * t874;
t766 = t800 * qJD(3) + t803 * t874;
t723 = t766 * t764;
t871 = qJD(1) * qJD(3);
t863 = t804 * t871;
t801 = sin(qJ(3));
t869 = t801 * qJDD(1);
t827 = -t863 - t869;
t815 = qJDD(4) - t827;
t937 = t723 - t815;
t938 = t937 * pkin(4);
t897 = t937 * t800;
t896 = t937 * t803;
t807 = qJD(1) ^ 2;
t802 = sin(qJ(1));
t805 = cos(qJ(1));
t778 = t802 * g(1) - t805 * g(2);
t847 = qJDD(2) - t778;
t825 = -t807 * qJ(2) + t847;
t927 = pkin(6) + pkin(1);
t744 = -t927 * qJDD(1) + t825;
t719 = t804 * g(3) - t801 * t744;
t806 = qJD(3) ^ 2;
t904 = pkin(7) * t804;
t917 = pkin(3) * t801;
t830 = t807 * (-t904 + t917);
t699 = -t806 * pkin(3) + qJDD(3) * pkin(7) - t801 * t830 - t719;
t768 = 0.2e1 * t863 + t869;
t870 = qJD(2) * qJD(1);
t795 = 0.2e1 * t870;
t779 = t805 * g(1) + t802 * g(2);
t797 = qJDD(1) * qJ(2);
t838 = t779 - t797;
t791 = t804 * qJDD(1);
t864 = t801 * t871;
t769 = t791 - t864;
t844 = -t769 + t864;
t935 = t927 * t807;
t808 = t768 * pkin(3) + t844 * pkin(7) + t795 - t838 - t935;
t637 = t800 * t699 - t803 * t808;
t638 = t803 * t699 + t800 * t808;
t581 = -t637 * t803 + t638 * t800;
t916 = pkin(3) * t804;
t936 = (pkin(7) * t801 + pkin(2) + t916) * t581;
t873 = qJD(5) * t764;
t755 = -0.2e1 * t873;
t858 = -t803 * qJDD(3) + t800 * t769;
t711 = -qJD(4) * t766 - t858;
t787 = t801 * qJD(1) + qJD(4);
t735 = pkin(4) * t787 - qJ(5) * t766;
t761 = t764 ^ 2;
t843 = t761 * pkin(4) - t711 * qJ(5) + t787 * t735 - t638;
t590 = t755 - t843;
t689 = (qJD(4) - t787) * t766 + t858;
t762 = t766 ^ 2;
t703 = -t761 - t762;
t570 = -pkin(4) * t703 - qJ(5) * t689 + t590;
t712 = -qJD(4) * t764 + qJDD(3) * t800 + t769 * t803;
t746 = t787 * t764;
t693 = t712 + t746;
t812 = qJ(5) * t746 + 0.2e1 * qJD(5) * t766 + t637 + t938;
t574 = (t693 + t712) * qJ(5) + t812;
t934 = t803 * t570 + t800 * t574;
t784 = t787 ^ 2;
t720 = -t762 - t784;
t718 = t801 * g(3) + t804 * t744;
t698 = qJDD(3) * pkin(3) + t806 * pkin(7) - t804 * t830 + t718;
t811 = -t766 * t735 - qJDD(5) + t698;
t809 = -t711 * pkin(4) - t811;
t599 = (-t720 - t761) * qJ(5) + t809;
t706 = t723 + t815;
t929 = t712 - t746;
t650 = -pkin(4) * t929 - qJ(5) * t706;
t933 = t800 * t599 + t803 * t650;
t582 = t800 * t637 + t803 * t638;
t647 = -t689 * t803 + t693 * t800;
t603 = t647 * t801 - t703 * t804;
t645 = -t689 * t800 - t693 * t803;
t932 = -pkin(1) * t603 + qJ(2) * t645;
t713 = -t784 - t761;
t663 = t713 * t803 + t897;
t688 = (qJD(4) + t787) * t766 + t858;
t616 = t663 * t801 - t688 * t804;
t662 = t713 * t800 - t896;
t931 = -pkin(1) * t616 + qJ(2) * t662;
t898 = t706 * t803;
t671 = -t720 * t800 - t898;
t624 = t671 * t801 - t804 * t929;
t899 = t706 * t800;
t670 = t720 * t803 - t899;
t930 = -pkin(1) * t624 + qJ(2) * t670;
t680 = t804 * t718 - t801 * t719;
t604 = t647 * t804 + t703 * t801;
t926 = pkin(1) * t604;
t617 = t663 * t804 + t688 * t801;
t925 = pkin(1) * t617;
t625 = t671 * t804 + t801 * t929;
t924 = pkin(1) * t625;
t923 = pkin(2) * t680;
t814 = t838 - 0.2e1 * t870;
t738 = t814 + t935;
t922 = pkin(2) * t738;
t798 = t801 ^ 2;
t799 = t804 ^ 2;
t875 = t798 + t799;
t771 = t875 * qJDD(1);
t921 = pkin(2) * t771;
t920 = pkin(3) * t645;
t919 = pkin(3) * t662;
t918 = pkin(3) * t670;
t584 = qJ(5) * t712 + t812;
t915 = pkin(4) * t584;
t914 = pkin(4) * t693;
t913 = pkin(5) * (-t603 * t805 + t645 * t802);
t912 = pkin(5) * (-t616 * t805 + t662 * t802);
t911 = pkin(5) * (-t624 * t805 + t670 * t802);
t910 = pkin(6) * t603;
t909 = pkin(6) * t616;
t908 = pkin(6) * t624;
t907 = pkin(7) * t645;
t906 = pkin(7) * t662;
t905 = pkin(7) * t670;
t903 = qJ(2) * t617;
t902 = qJDD(1) * pkin(1);
t901 = t584 * t800;
t900 = t584 * t803;
t725 = t768 * t801;
t895 = t771 * t802;
t894 = t771 * t805;
t785 = t801 * t807 * t804;
t776 = qJDD(3) + t785;
t893 = t776 * t801;
t892 = t776 * t804;
t777 = qJDD(3) - t785;
t891 = t777 * t801;
t890 = t777 * t804;
t889 = t787 * t766;
t888 = t787 * t800;
t887 = t787 * t803;
t886 = t798 * t807;
t885 = t799 * t807;
t694 = t800 * t698;
t883 = t801 * t738;
t695 = t803 * t698;
t724 = t804 * t738;
t882 = -pkin(2) * t645 + pkin(6) * t604;
t881 = -pkin(2) * t662 + pkin(6) * t617;
t880 = -pkin(2) * t670 + pkin(6) * t625;
t879 = -pkin(3) * t703 + pkin(7) * t647;
t878 = -pkin(3) * t929 + pkin(7) * t671;
t877 = pkin(3) * t688 - pkin(7) * t663;
t876 = pkin(3) * t698 + pkin(7) * t582;
t868 = t801 * t723;
t867 = t804 * t723;
t866 = -t694 + t878;
t865 = t695 - t877;
t557 = t590 * t800 - t900;
t619 = t761 * qJ(5) - t809;
t564 = pkin(4) * t619 + qJ(5) * t590;
t536 = -pkin(7) * t557 + qJ(5) * t900 - t564 * t800;
t548 = -pkin(3) * t557 + t915;
t862 = t804 * t536 - t801 * t548;
t747 = t807 * pkin(1) + t814;
t748 = -t825 + t902;
t860 = -t805 * t747 - t748 * t802;
t859 = -t778 * t802 - t805 * t779;
t857 = t802 * t785;
t856 = t805 * t785;
t855 = t879 + t934;
t854 = t878 + t933;
t853 = t879 + t582;
t614 = pkin(2) * t616;
t852 = -t614 - t865;
t571 = t582 * t801 + t698 * t804;
t851 = -pkin(2) * t571 - t876;
t560 = -t581 - t907;
t850 = t804 * t560 + t645 * t917 - t910;
t772 = qJDD(1) * t805 - t802 * t807;
t849 = pkin(5) * t772 + g(3) * t802;
t773 = qJDD(1) * t802 + t805 * t807;
t848 = -pkin(5) * t773 + g(3) * t805;
t846 = pkin(2) * t768 - t724;
t770 = t791 - 0.2e1 * t864;
t845 = pkin(2) * t770 + t883;
t681 = -t718 * t801 - t719 * t804;
t842 = t747 * t802 - t748 * t805;
t841 = t778 * t805 - t779 * t802;
t783 = -t806 - t885;
t729 = t783 * t804 - t893;
t839 = -pkin(2) * t729 - t719;
t601 = pkin(2) * t603;
t837 = -qJ(2) * t604 + t601 + t879;
t622 = pkin(2) * t624;
t836 = -qJ(2) * t625 + t622 + t878;
t544 = -t570 * t800 + t574 * t803 - t907;
t597 = t914 - t920;
t835 = t804 * t544 - t597 * t801 - t910;
t585 = (t713 + t761) * qJ(5) + (-t688 + t711) * pkin(4) + t811;
t563 = qJ(5) * t896 - t585 * t800 - t906;
t810 = -t584 - t938;
t565 = -t810 - t919;
t834 = t804 * t563 - t565 * t801 - t909;
t567 = t599 * t803 - t650 * t800 - t905;
t819 = pkin(4) * t720 + t843;
t568 = t755 - t819 - t918;
t833 = t804 * t567 - t568 * t801 - t908;
t595 = t637 - t919;
t626 = -t694 - t906;
t832 = -t595 * t801 + t804 * t626 - t909;
t596 = t638 - t918;
t629 = -t695 - t905;
t831 = -t596 * t801 + t804 * t629 - t908;
t558 = t590 * t803 + t901;
t829 = pkin(3) * t619 + pkin(7) * t558 + qJ(5) * t901 + t803 * t564;
t828 = qJ(5) * t897 + t803 * t585 - t877;
t781 = -t806 - t886;
t727 = t781 * t801 + t890;
t826 = -pkin(2) * t727 - t718;
t824 = t544 * t801 + t597 * t804 + t882;
t823 = t563 * t801 + t565 * t804 + t881;
t822 = t567 * t801 + t568 * t804 + t880;
t821 = t595 * t804 + t626 * t801 + t881;
t820 = t596 * t804 + t629 * t801 + t880;
t818 = pkin(2) * t557 - t801 * t536 - t804 * t548;
t817 = -t614 - t828;
t816 = t560 * t801 - t645 * t916 + t882;
t552 = t558 * t801 + t619 * t804;
t813 = -pkin(2) * t552 - t829;
t782 = t806 - t885;
t780 = -t806 + t886;
t775 = (-t798 + t799) * t807;
t774 = t875 * t807;
t763 = t875 * t871;
t760 = t847 - 0.2e1 * t902;
t754 = -t779 + t795 + 0.2e1 * t797;
t742 = -t762 + t784;
t741 = t761 - t784;
t740 = t769 * t801 + t799 * t871;
t739 = t798 * t871 + t804 * t827;
t734 = -t783 * t801 - t892;
t733 = -t782 * t801 + t890;
t732 = t844 * t804;
t731 = t781 * t804 - t891;
t730 = t780 * t804 - t893;
t728 = t782 * t804 + t891;
t726 = t780 * t801 + t892;
t721 = t762 - t761;
t717 = -t768 * t804 - t770 * t801;
t716 = t770 * t804 - t725;
t704 = pkin(1) * t748 - qJ(2) * t747;
t701 = (-t764 * t803 + t766 * t800) * t787;
t700 = (-t764 * t800 - t766 * t803) * t787;
t685 = t712 * t803 - t766 * t888;
t684 = t712 * t800 + t766 * t887;
t683 = -t711 * t800 + t764 * t887;
t682 = -t803 * t711 - t764 * t888;
t677 = t804 * t701 + t801 * t815;
t676 = t801 * t701 - t804 * t815;
t675 = t741 * t803 - t899;
t674 = -t742 * t800 - t896;
t673 = t741 * t800 + t898;
t672 = t742 * t803 - t897;
t669 = pkin(2) * t774 + t681;
t665 = -qJ(2) * t734 - t839;
t664 = -qJ(2) * t731 - t826;
t658 = -t927 * t731 + t846;
t657 = -t927 * t734 + t845;
t656 = qJ(2) * t770 - t927 * t729 - t724;
t655 = qJ(2) * t768 - t927 * t727 - t883;
t654 = t685 * t804 + t868;
t653 = t683 * t804 - t868;
t652 = t685 * t801 - t867;
t651 = t683 * t801 + t867;
t649 = -qJ(2) * t774 + t927 * t771 - t680;
t646 = -t688 * t803 - t800 * t929;
t644 = -t688 * t800 + t803 * t929;
t640 = t676 * t802 + t700 * t805;
t639 = -t676 * t805 + t700 * t802;
t633 = t675 * t804 - t689 * t801;
t632 = t674 * t804 + t693 * t801;
t631 = t675 * t801 + t689 * t804;
t630 = t674 * t801 - t693 * t804;
t628 = -qJ(2) * t681 + t923;
t612 = t646 * t804 + t721 * t801;
t611 = t646 * t801 - t721 * t804;
t610 = -t927 * t681 - t922;
t609 = -qJ(2) * t738 - t927 * t680;
t608 = t652 * t802 + t684 * t805;
t607 = t651 * t802 - t682 * t805;
t606 = -t652 * t805 + t684 * t802;
t605 = -t651 * t805 - t682 * t802;
t594 = t631 * t802 + t673 * t805;
t593 = t630 * t802 + t672 * t805;
t592 = -t631 * t805 + t673 * t802;
t591 = -t630 * t805 + t672 * t802;
t588 = pkin(5) * (t624 * t802 + t670 * t805);
t586 = pkin(5) * (t616 * t802 + t662 * t805);
t579 = t581 * t917;
t578 = t611 * t802 + t644 * t805;
t577 = -t611 * t805 + t644 * t802;
t575 = pkin(5) * (t603 * t802 + t645 * t805);
t572 = t582 * t804 - t698 * t801;
t555 = -t694 + t836;
t554 = -t852 - t903;
t553 = t558 * t804 - t619 * t801;
t551 = t836 + t933;
t550 = -t820 - t924;
t549 = t831 + t930;
t547 = -t817 - t903;
t546 = -t821 - t925;
t545 = t832 + t931;
t542 = t837 + t582;
t541 = -qJ(2) * t572 - t851;
t540 = -t816 - t926;
t539 = t850 + t932;
t538 = -t822 - t924;
t537 = t833 + t930;
t534 = -t823 - t925;
t533 = t834 + t931;
t532 = t837 + t934;
t531 = -t927 * t572 + t936;
t530 = t579 + (qJ(2) - t904) * t581 - t927 * t571;
t529 = -t824 - t926;
t528 = t835 + t932;
t527 = -qJ(2) * t553 - t813;
t526 = -t927 * t553 + t818;
t525 = qJ(2) * t557 - t927 * t552 + t862;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t772, 0, -t773, 0, -t849, -t848, -t841, -pkin(5) * t841, 0, -t772, t773, 0, 0, 0, t842, t849, t848, pkin(5) * t842 + (-pkin(1) * t802 + qJ(2) * t805) * g(3), t740 * t802 + t856, t716 * t802 + t775 * t805, t728 * t802 + t791 * t805, t739 * t802 - t856, t726 * t802 - t805 * t869, qJDD(3) * t805 - t763 * t802, t805 * t664 - t802 * t658 - pkin(5) * (-t727 * t805 + t768 * t802), t805 * t665 - t802 * t657 - pkin(5) * (-t729 * t805 + t770 * t802), -pkin(2) * t894 + t802 * t669 - pkin(5) * (-t774 * t802 + t894), t805 * t628 - t802 * t610 - pkin(5) * (-t680 * t805 - t738 * t802), t608, t578, t593, t607, t594, t640, -t546 * t802 + t554 * t805 - t912, -t550 * t802 + t555 * t805 - t911, -t540 * t802 + t542 * t805 - t913, t805 * t541 - t802 * t531 - pkin(5) * (-t571 * t805 + t581 * t802), t608, t578, t593, t607, t594, t640, -t534 * t802 + t547 * t805 - t912, -t538 * t802 + t551 * t805 - t911, -t529 * t802 + t532 * t805 - t913, t805 * t527 - t802 * t526 - pkin(5) * (-t552 * t805 + t557 * t802); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t773, 0, t772, 0, t848, -t849, t859, pkin(5) * t859, 0, -t773, -t772, 0, 0, 0, t860, -t848, t849, pkin(5) * t860 + (pkin(1) * t805 + qJ(2) * t802) * g(3), -t740 * t805 + t857, -t716 * t805 + t775 * t802, -t728 * t805 + t791 * t802, -t739 * t805 - t857, -t726 * t805 - t802 * t869, qJDD(3) * t802 + t763 * t805, t802 * t664 + t805 * t658 + pkin(5) * (t727 * t802 + t768 * t805), t802 * t665 + t805 * t657 + pkin(5) * (t729 * t802 + t770 * t805), -pkin(2) * t895 - t805 * t669 + pkin(5) * (-t774 * t805 - t895), t802 * t628 + t805 * t610 + pkin(5) * (t680 * t802 - t738 * t805), t606, t577, t591, t605, t592, t639, t546 * t805 + t554 * t802 + t586, t550 * t805 + t555 * t802 + t588, t540 * t805 + t542 * t802 + t575, t802 * t541 + t805 * t531 + pkin(5) * (t571 * t802 + t581 * t805), t606, t577, t591, t605, t592, t639, t534 * t805 + t547 * t802 + t586, t538 * t805 + t551 * t802 + t588, t529 * t805 + t532 * t802 + t575, t802 * t527 + t805 * t526 + pkin(5) * (t552 * t802 + t805 * t557); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t778, t779, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t760, t754, t704, -t732, t717, t733, t725, t730, 0, t655, t656, t649, t609, t654, t612, t632, t653, t633, t677, t545, t549, t539, t530, t654, t612, t632, t653, t633, t677, t533, t537, t528, t525; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t807, 0, 0, -g(3), -t778, 0, 0, -qJDD(1), t807, 0, 0, 0, -t748, 0, g(3), qJ(2) * g(3), t785, t775, t791, -t785, -t869, qJDD(3), t664, t665, -t921, t628, t684, t644, t672, -t682, t673, t700, t554, t555, t542, t541, t684, t644, t672, -t682, t673, t700, t547, t551, t532, t527; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t807, 0, qJDD(1), 0, g(3), 0, -t779, 0, 0, -t807, -qJDD(1), 0, 0, 0, -t747, -g(3), 0, pkin(1) * g(3), -t740, -t716, -t728, -t739, -t726, t763, t658, t657, -t669, t610, -t652, -t611, -t630, -t651, -t631, -t676, t546, t550, t540, t531, -t652, -t611, -t630, -t651, -t631, -t676, t534, t538, t529, t526; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t778, t779, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t760, t754, t704, -t732, t717, t733, t725, t730, 0, t655, t656, t649, t609, t654, t612, t632, t653, t633, t677, t545, t549, t539, t530, t654, t612, t632, t653, t633, t677, t533, t537, t528, t525; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t748, -t747, 0, -t732, t717, t733, t725, t730, 0, -pkin(6) * t727 - t883, -pkin(6) * t729 - t724, pkin(6) * t771 - t680, -pkin(6) * t680, t654, t612, t632, t653, t633, t677, t832, t831, t850, -pkin(6) * t571 - t581 * t904 + t579, t654, t612, t632, t653, t633, t677, t834, t833, t835, -pkin(6) * t552 + t862; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t807, 0, 0, 0, t748, 0, -g(3), 0, -t785, -t775, -t791, t785, t869, -qJDD(3), t826, t839, t921, -t923, -t684, -t644, -t672, t682, -t673, -t700, t852, -t622 - t866, -t601 - t853, t851, -t684, -t644, -t672, t682, -t673, -t700, t817, -t622 - t854, -t601 - t855, t813; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t807, qJDD(1), 0, 0, 0, t747, g(3), 0, 0, t740, t716, t728, t739, t726, -t763, pkin(6) * t731 - t846, pkin(6) * t734 - t845, t669, pkin(6) * t681 + t922, t652, t611, t630, t651, t631, t676, t821, t820, t816, pkin(6) * t572 - t936, t652, t611, t630, t651, t631, t676, t823, t822, t824, pkin(6) * t553 - t818; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t769, -t768, t777, t864, t780, -t864, 0, -t738, -t718, 0, t685, t646, t674, t683, t675, t701, t626, t629, t560, -pkin(7) * t581, t685, t646, t674, t683, t675, t701, t563, t567, t544, t536; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t863, t770, t782, t827, t776, -t863, t738, 0, -t719, 0, -t723, -t721, -t693, t723, t689, -t815, t595, t596, -t920, -pkin(3) * t581, -t723, -t721, -t693, t723, t689, -t815, t565, t568, t597, t548; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t785, t775, t791, -t785, -t869, qJDD(3), t718, t719, 0, 0, t684, t644, t672, -t682, t673, t700, t865, t866, t853, t876, t684, t644, t672, -t682, t673, t700, t828, t854, t855, t829; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t712, -t688, -t937, t746, t741, -t746, 0, -t698, t637, 0, t712, -t688, -t937, t746, t741, -t746, qJ(5) * t937, t599, t574, qJ(5) * t584; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t889, t929, t742, t711, t706, -t889, t698, 0, t638, 0, t889, t929, t742, t711, t706, -t889, t585, t650, t570, t564; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t723, t721, t693, -t723, -t689, t815, -t637, -t638, 0, 0, t723, t721, t693, -t723, -t689, t815, t810, t819 + 0.2e1 * t873, -t914, -t915; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t712, -t688, -t937, t746, t741, -t746, 0, -t619, t584, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t889, t929, t742, t711, t706, -t889, t619, 0, t590, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t723, t721, t693, -t723, -t689, t815, -t584, -t590, 0, 0;];
m_new_reg = t1;
