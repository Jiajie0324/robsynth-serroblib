% Calculate inertial parameters regressor of coriolis matrix for
% S5RPRRP12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:57
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RPRRP12_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP12_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP12_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPRRP12_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:57:25
% EndTime: 2019-12-31 18:57:32
% DurationCPUTime: 4.05s
% Computational Cost: add. (2758->358), mult. (5473->489), div. (0->0), fcn. (4445->4), ass. (0->297)
t252 = cos(qJ(4));
t253 = cos(qJ(3));
t251 = sin(qJ(3));
t392 = t251 * pkin(3);
t273 = -t253 * pkin(7) + t392;
t265 = qJ(2) + t273;
t174 = t252 * t265;
t250 = sin(qJ(4));
t254 = -pkin(1) - pkin(6);
t353 = t250 * t254;
t279 = pkin(4) - t353;
t345 = t252 * t253;
t302 = qJ(5) * t345;
t73 = t251 * t279 + t174 - t302;
t348 = t251 * t254;
t115 = t250 * t348 - t174;
t80 = t115 + t302;
t405 = t80 + t73;
t246 = t250 ^ 2;
t248 = t252 ^ 2;
t397 = -t248 / 0.2e1;
t280 = t246 / 0.2e1 + t397;
t169 = t280 * t253;
t215 = t248 + t246;
t389 = t253 * pkin(3);
t391 = t251 * pkin(7);
t198 = t389 + t391;
t190 = t252 * t198;
t343 = t253 * t254;
t301 = t250 * t343;
t121 = t190 - t301;
t189 = t250 * t198;
t204 = t252 * t343;
t122 = t204 + t189;
t344 = t252 * t254;
t303 = t251 * t344;
t116 = t250 * t265 + t303;
t374 = t116 * t253;
t375 = t115 * t253;
t395 = t251 / 0.2e1;
t14 = -t251 * t343 + (t122 * t395 + t374 / 0.2e1) * t252 + (-t121 * t251 / 0.2e1 + t375 / 0.2e1) * t250;
t349 = t251 * t253;
t114 = (-0.1e1 + t215) * t349;
t328 = t114 * qJD(2);
t404 = -t14 * qJD(1) - t328;
t387 = pkin(7) + qJ(5);
t194 = t387 * t250;
t278 = t250 * pkin(4) - t254;
t177 = t278 * t253;
t393 = t252 / 0.2e1;
t396 = -t250 / 0.2e1;
t354 = t250 * t253;
t48 = t73 * t354;
t347 = t252 * qJ(5);
t74 = t251 * t347 + t253 * t279 + t190;
t352 = t251 * qJ(5);
t86 = t250 * t352 + t122;
t255 = (t86 * t393 + t74 * t396 + t177 / 0.2e1) * t251 - t48 / 0.2e1;
t195 = t387 * t252;
t357 = t250 * t195;
t176 = t278 * t251;
t370 = t176 * t253;
t81 = -qJ(5) * t354 + t116;
t379 = t81 * t253;
t4 = t370 / 0.2e1 - t357 / 0.2e1 + (t379 / 0.2e1 + t194 / 0.2e1) * t252 + t255;
t403 = t4 * qJD(1) + t328;
t216 = t248 - t246;
t304 = t250 * t345;
t277 = 0.2e1 * t304;
t125 = qJD(1) * t277 - t216 * qJD(3);
t402 = t74 / 0.2e1;
t249 = t253 ^ 2;
t237 = t249 * t252;
t400 = -t237 / 0.2e1;
t247 = t251 ^ 2;
t398 = t247 / 0.2e1;
t394 = -t252 / 0.2e1;
t390 = t252 * pkin(4);
t356 = t250 * t251;
t284 = -t356 / 0.2e1;
t88 = t116 * t356;
t33 = t88 / 0.2e1 + t116 * t284;
t386 = t14 * qJD(3) - t33 * qJD(4);
t305 = t80 / 0.2e1 + t73 / 0.2e1;
t308 = pkin(4) * t395;
t5 = (t308 + t305) * t252;
t384 = t5 * qJD(1);
t383 = t73 * t252;
t380 = t81 * t250;
t299 = t380 / 0.2e1;
t350 = t251 * t252;
t49 = t73 * t350;
t64 = t81 * t356;
t306 = -t49 / 0.2e1 - t64 / 0.2e1;
t309 = -t249 / 0.2e1 - 0.1e1 / 0.2e1;
t381 = t80 * t251;
t8 = t251 * t299 + (-t381 / 0.2e1 + t309 * pkin(4)) * t252 + t306;
t382 = t8 * qJD(1);
t9 = -t177 * t176 + t73 * t74 + t81 * t86;
t378 = t9 * qJD(1);
t10 = -t49 - t64 + (t250 * t86 + t252 * t74) * t253;
t377 = t10 * qJD(1);
t11 = -t80 * t354 - t48;
t376 = t11 * qJD(1);
t12 = t177 * pkin(4) * t345 - t405 * t81;
t373 = t12 * qJD(1);
t17 = t115 * t350 - t88 + (t121 * t252 + t122 * t250) * t253;
t371 = t17 * qJD(1);
t369 = t177 * t250;
t368 = t177 * t252;
t18 = t74 * t251 + t73 * t253 + (-t177 * t251 - t370) * t250;
t367 = t18 * qJD(1);
t19 = t379 + t176 * t345 + (t86 + t368) * t251;
t366 = t19 * qJD(1);
t365 = t194 * t251;
t364 = t194 * t253;
t363 = t195 * t251;
t362 = t195 * t253;
t238 = -pkin(3) - t390;
t361 = t238 * t250;
t360 = t238 * t252;
t359 = t238 * t253;
t358 = t249 * t250;
t355 = t250 * t252;
t351 = t251 * t238;
t346 = t252 * t247;
t27 = t380 + t383;
t26 = t27 * t253;
t342 = t26 * qJD(1);
t341 = t27 * qJD(1);
t28 = -t81 * t251 + (pkin(4) * t358 + t177 * t253) * t252;
t340 = t28 * qJD(1);
t29 = -t375 + (t121 + 0.2e1 * t301) * t251;
t339 = t29 * qJD(1);
t30 = t374 + (t122 - 0.2e1 * t204) * t251;
t338 = t30 * qJD(1);
t32 = -t248 * t249 * pkin(4) + t177 * t354 - t381;
t337 = t32 * qJD(1);
t336 = t33 * qJD(1);
t335 = t33 * qJD(2);
t39 = -t115 * t252 + t116 * t250;
t334 = t39 * qJD(1);
t65 = -t115 * t251 - t249 * t353;
t333 = t65 * qJD(1);
t66 = -t116 * t251 - t249 * t344;
t332 = t66 * qJD(1);
t331 = t81 * qJD(4);
t214 = t247 - t249;
t330 = qJD(2) * t251;
t329 = qJD(4) * t250;
t240 = qJD(4) * t252;
t143 = (-t247 / 0.2e1 + t309) * t250;
t128 = t143 * qJD(1);
t145 = t237 / 0.2e1 + (0.1e1 / 0.2e1 + t398) * t252;
t130 = t145 * qJD(1);
t327 = t169 * qJD(4);
t184 = t215 * t249;
t326 = t184 * qJD(1);
t186 = t215 * t253;
t325 = t186 * qJD(1);
t187 = t214 * t250;
t324 = t187 * qJD(1);
t188 = -t237 + t346;
t323 = t188 * qJD(1);
t322 = t195 * qJD(4);
t321 = t214 * qJD(1);
t320 = t215 * qJD(3);
t319 = t250 * qJD(3);
t318 = t250 * qJD(5);
t317 = t251 * qJD(1);
t316 = t251 * qJD(3);
t315 = t252 * qJD(3);
t314 = t252 * qJD(5);
t313 = t253 * qJD(1);
t312 = t253 * qJD(3);
t311 = t253 * qJD(4);
t172 = -t189 / 0.2e1;
t310 = t172 - t204 / 0.2e1;
t307 = t390 / 0.2e1;
t300 = t80 * t394;
t298 = qJ(2) * t317;
t297 = qJ(2) * t313;
t296 = t251 * t329;
t295 = t250 * t311;
t294 = t251 * t240;
t293 = t252 * t311;
t292 = t250 * t312;
t226 = t250 * t240;
t291 = t250 * t315;
t290 = t252 * t312;
t289 = t253 * t314;
t229 = t251 * t312;
t288 = t251 * t313;
t287 = -t369 / 0.2e1;
t286 = -t359 / 0.2e1;
t285 = t359 / 0.2e1;
t283 = -t353 / 0.2e1;
t282 = -t352 / 0.2e1;
t281 = t347 / 0.2e1;
t276 = qJD(4) + t317;
t275 = t249 * t226;
t274 = -t362 / 0.2e1 - t73 / 0.2e1;
t271 = qJD(3) * t277;
t258 = t252 * t286 + t287;
t1 = t305 * t195 + (t402 + t258) * pkin(4);
t40 = pkin(4) * t361;
t270 = -t1 * qJD(1) + t40 * qJD(3);
t20 = -t254 ^ 2 * t349 - t115 * t121 + t116 * t122;
t269 = t20 * qJD(1) + t14 * qJD(2);
t268 = -t121 * t250 + t122 * t252;
t103 = t194 * t250 + t195 * t252;
t155 = pkin(4) * t355 - t361;
t173 = t190 / 0.2e1;
t21 = t173 + t287 + (t281 + t195 / 0.2e1) * t251 + (t283 - t360 / 0.2e1 + (0.1e1 - t280) * pkin(4)) * t253;
t267 = -t21 * qJD(1) - t155 * qJD(3);
t170 = t246 * pkin(4) + t360;
t257 = -pkin(4) * t304 - t368 / 0.2e1 - t365 / 0.2e1;
t24 = (t282 + t285) * t250 + t257 + t310;
t266 = -t24 * qJD(1) + t170 * qJD(3);
t264 = t391 / 0.2e1 + t389 / 0.2e1;
t260 = t264 * t252;
t83 = -t190 / 0.2e1 - t260;
t263 = pkin(3) * t319 - t83 * qJD(1);
t259 = t264 * t250;
t82 = t189 / 0.2e1 + t259;
t262 = pkin(3) * t315 - t82 * qJD(1);
t261 = (t81 / 0.2e1 + t364 / 0.2e1) * t252;
t136 = t276 * t354;
t113 = -t169 * qJD(1) + t291;
t183 = t252 * t313 + t319;
t181 = t250 * t313 - t315;
t100 = t249 * qJD(1) * t355 + t169 * qJD(3);
t185 = t216 * t249;
t109 = t185 * qJD(1) + t271;
t144 = (0.1e1 / 0.2e1 + t397 - t246 / 0.2e1) * t251;
t16 = -t348 / 0.2e1 + t261 + (t308 + t274) * t250;
t256 = t16 * qJD(1) - t144 * qJD(2) + t103 * qJD(3);
t245 = qJ(2) * qJD(2);
t244 = qJD(1) * qJ(2);
t236 = -t313 / 0.2e1;
t235 = t313 / 0.2e1;
t234 = t312 / 0.2e1;
t228 = t252 * t317;
t227 = t252 * t330;
t225 = t250 * t317;
t197 = t216 * qJD(4);
t182 = t228 + t240;
t180 = -t225 - t329;
t175 = (t317 + qJD(4) / 0.2e1) * t253;
t164 = t183 * pkin(4);
t162 = t186 * qJD(2);
t160 = t186 * qJD(3);
t159 = t250 * t316 - t293;
t158 = -t251 * t315 - t295;
t148 = -t346 / 0.2e1 + t400 + t393;
t147 = (0.1e1 + t215) * t395;
t146 = t250 * t398 + t358 / 0.2e1 + t396;
t138 = t276 * t345;
t137 = t183 * t251;
t135 = t181 * t251;
t132 = t148 * qJD(2);
t131 = t146 * qJD(2);
t129 = t145 * qJD(2);
t127 = t143 * qJD(2);
t124 = -t229 * t248 - t275;
t123 = -t229 * t246 + t275;
t120 = t292 - t323;
t119 = t294 + t323;
t118 = -t296 - t324;
t117 = t290 + t324;
t111 = -t188 * qJD(3) - t251 * t295;
t110 = t187 * qJD(3) - t251 * t293;
t107 = -0.2e1 * t252 * t136;
t104 = t114 * qJD(3);
t99 = t248 * t288 - t327;
t98 = t246 * t288 + t327;
t95 = -t145 * qJD(4) - t228;
t94 = t148 * qJD(4) + t228;
t93 = t146 * qJD(4) - t225;
t92 = -t143 * qJD(4) + t225;
t91 = -t185 * qJD(4) + t251 * t271;
t68 = -t292 - t294 - t130;
t67 = -t290 + t296 - t128;
t61 = -t327 + (-t248 * t313 - t291) * t251;
t60 = t327 + (-t246 * t313 + t291) * t251;
t55 = t173 - t260 - t301;
t54 = -t204 + t172 + t259;
t53 = t125 * t251 - 0.2e1 * t253 * t226;
t50 = pkin(4) * t354;
t25 = -t257 + t310 + (t282 + t286) * t250;
t22 = -t363 / 0.2e1 + t173 + t251 * t281 + (pkin(4) + t283) * t253 - t258 + pkin(4) * t169;
t15 = t348 / 0.2e1 + pkin(4) * t284 + t261 + t274 * t250;
t7 = pkin(4) * t400 + t307 + (t300 + t299) * t251 + t306;
t6 = t300 - t383 / 0.2e1 + t251 * t307;
t3 = t357 / 0.2e1 + t194 * t394 + (t81 * t393 + t176 / 0.2e1) * t253 + t255;
t2 = t285 * t390 - t405 * t195 / 0.2e1 + (t369 / 0.2e1 + t402) * pkin(4);
t13 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), t245, -t229, t214 * qJD(3), 0, t229, 0, 0, qJ(2) * t312 + t330, -qJ(2) * t316 + qJD(2) * t253, 0, t245, t124, t91, t111, t123, t110, t229, t29 * qJD(3) + t66 * qJD(4) + t227, -t30 * qJD(3) - t65 * qJD(4) - t250 * t330, -t17 * qJD(3) - t162, t39 * qJD(2) + t20 * qJD(3), t124, t91, t111, t123, t110, t229, t18 * qJD(3) + t28 * qJD(4) - t251 * t289 + t227, -t19 * qJD(3) - t32 * qJD(4) + (qJD(5) * t253 - qJD(2)) * t356, -t10 * qJD(3) - t11 * qJD(4) + t184 * qJD(5) - t162, t27 * qJD(2) + t9 * qJD(3) + t12 * qJD(4) - t26 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(1), t244, 0, 0, 0, 0, 0, 0, t317, t313, 0, t244, 0, 0, 0, 0, 0, 0, t94, t93, -t325, t334 + t386, 0, 0, 0, 0, 0, 0, t94, t93, -t325, t3 * qJD(3) + t7 * qJD(4) + t341; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t288, t321, -t316, t288, -t312, 0, -t254 * t316 + t297, -t254 * t312 - t298, 0, 0, t61, t53, t120, t60, t117, t175, t339 + (t250 * t273 - t303) * qJD(3) + t55 * qJD(4), -t338 + (-pkin(7) * t345 + (pkin(3) * t252 + t353) * t251) * qJD(3) + t54 * qJD(4), qJD(3) * t268 - t371, (-pkin(3) * t348 + pkin(7) * t268) * qJD(3) + t269, t61, t53, t120, t60, t117, t175, t367 + (t176 * t252 - t250 * t351 - t364) * qJD(3) + t22 * qJD(4) - t251 * t318, -t366 + (-t176 * t250 - t238 * t350 - t362) * qJD(3) + t25 * qJD(4) - t251 * t314, -t377 + ((t86 - t365) * t252 + (-t74 + t363) * t250) * qJD(3) + t6 * qJD(4), t378 + t3 * qJD(2) + (-t176 * t238 - t74 * t194 + t86 * t195) * qJD(3) + t2 * qJD(4) + t15 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t100, -t109, -t136, t100, -t138, t234, t55 * qJD(3) - t116 * qJD(4) + t132 + t332, t54 * qJD(3) + t115 * qJD(4) + t131 - t333, 0, -t335, -t100, -t109, -t136, t100, -t138, t234, t22 * qJD(3) + t132 - t331 + t340, t25 * qJD(3) + t80 * qJD(4) + t131 - t337, pkin(4) * t295 + t6 * qJD(3) - t376, -pkin(4) * t331 + t7 * qJD(2) + t2 * qJD(3) + t373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t137, t135, t326, t15 * qJD(3) - t342; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(1), -t244, 0, 0, 0, 0, 0, 0, -t317, -t313, 0, -t244, 0, 0, 0, 0, 0, 0, t95, t92, t325, -t334 + t386, 0, 0, 0, 0, 0, 0, t95, t92, t325, t4 * qJD(3) + t8 * qJD(4) - t341; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t316, -t312, 0, 0, 0, 0, 0, 0, 0, 0, t158, t159, t160, (pkin(7) * t186 - t392) * qJD(3) - t404, 0, 0, 0, 0, 0, 0, t158, t159, t160, (t103 * t253 + t351) * qJD(3) - t50 * qJD(4) + t147 * qJD(5) + t403; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68, t67, 0, -t336, 0, 0, 0, 0, 0, 0, t68, t67, 0, -pkin(4) * t294 - t50 * qJD(3) + t382; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t147 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t288, -t321, 0, -t288, 0, 0, -t297, t298, 0, 0, t99, t107, t119, t98, t118, -t175, t83 * qJD(4) - t339, t82 * qJD(4) + t338, t371, -t269, t99, t107, t119, t98, t118, -t175, -t21 * qJD(4) - t367, -t24 * qJD(4) + t366, -t5 * qJD(4) + t377, -t4 * qJD(2) - t1 * qJD(4) + t16 * qJD(5) - t378; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t404, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t144 * qJD(5) - t403; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t226, t197, 0, -t226, 0, 0, -pkin(3) * t329, -pkin(3) * t240, 0, 0, t226, t197, 0, -t226, 0, 0, -t155 * qJD(4), t170 * qJD(4), t215 * qJD(5), t40 * qJD(4) + t103 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, -t125, t182, -t113, t180, t236, -pkin(7) * t240 - t263, pkin(7) * t329 - t262, 0, 0, t113, -t125, t182, -t113, t180, t236, t267 - t322, t194 * qJD(4) + t266, -pkin(4) * t240 - t384, -pkin(4) * t322 + t270; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t320, t256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, t109, t135, -t100, t137, t234, -t83 * qJD(3) + t129 - t332, -t82 * qJD(3) + t127 + t333, 0, t335, t100, t109, t135, -t100, t137, t234, t21 * qJD(3) + t129 - t289 - t340, t24 * qJD(3) + t253 * t318 + t127 + t337, t5 * qJD(3) + t376, -pkin(4) * t289 - t8 * qJD(2) + t1 * qJD(3) - t373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t130, t128, 0, t336, 0, 0, 0, 0, 0, 0, t130, t128, 0, -t382; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t113, t125, -t228, t113, t225, t235, t263, t262, 0, 0, -t113, t125, -t228, t113, t225, t235, -t267 - t318, -t266 - t314, t384, -pkin(4) * t318 - t270; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t183, t181, 0, -t164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t138, -t136, -t326, pkin(4) * t293 - t16 * qJD(3) + t342; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t144 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t329, t240, -t320, pkin(4) * t329 - t256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t183, -t181, 0, t164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t13;
