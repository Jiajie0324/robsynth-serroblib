% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPRR15
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:43
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPRR15_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR15_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR15_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR15_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR15_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPRR15_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:43:17
% EndTime: 2019-12-31 20:43:31
% DurationCPUTime: 10.53s
% Computational Cost: add. (30845->539), mult. (64249->755), div. (0->0), fcn. (39354->8), ass. (0->380)
t607 = sin(qJ(2));
t601 = t607 ^ 2;
t614 = qJD(1) ^ 2;
t593 = t601 * t614;
t613 = qJD(2) ^ 2;
t580 = -t593 - t613;
t611 = cos(qJ(2));
t641 = t611 * t614 * t607;
t573 = qJDD(2) - t641;
t661 = t611 * t573;
t524 = t607 * t580 + t661;
t652 = qJD(1) * qJD(2);
t590 = t611 * t652;
t650 = t607 * qJDD(1);
t562 = 0.2e1 * t590 + t650;
t608 = sin(qJ(1));
t612 = cos(qJ(1));
t474 = t608 * t524 + t612 * t562;
t719 = pkin(5) * t474;
t478 = t612 * t524 - t608 * t562;
t718 = pkin(5) * t478;
t602 = t611 ^ 2;
t595 = t602 * t614;
t582 = -t595 - t613;
t572 = qJDD(2) + t641;
t677 = t607 * t572;
t523 = -t611 * t582 + t677;
t639 = t607 * t652;
t648 = t611 * qJDD(1);
t565 = -0.2e1 * t639 + t648;
t473 = t608 * t523 - t612 * t565;
t717 = pkin(5) * t473;
t477 = t612 * t523 + t608 * t565;
t716 = pkin(5) * t477;
t662 = t611 * t572;
t514 = t607 * t582 + t662;
t715 = pkin(1) * t514;
t714 = pkin(6) * t514;
t713 = pkin(6) * t524;
t579 = -t593 + t613;
t518 = -t607 * t579 + t662;
t647 = t612 * qJDD(1);
t712 = t608 * t518 - t607 * t647;
t649 = t608 * qJDD(1);
t711 = t612 * t518 + t607 * t649;
t710 = 2 * qJD(3);
t676 = t607 * t573;
t516 = -t611 * t580 + t676;
t709 = pkin(1) * t516;
t708 = pkin(6) * t516;
t707 = pkin(6) * t523;
t605 = sin(qJ(5));
t606 = sin(qJ(4));
t610 = cos(qJ(4));
t655 = qJD(1) * t611;
t555 = t606 * qJD(2) + t610 * t655;
t557 = t610 * qJD(2) - t606 * t655;
t609 = cos(qJ(5));
t498 = t609 * t555 + t605 * t557;
t500 = -t605 * t555 + t609 * t557;
t443 = t500 * t498;
t563 = t590 + t650;
t548 = qJDD(4) + t563;
t543 = qJDD(5) + t548;
t699 = -t443 + t543;
t706 = t605 * t699;
t509 = t557 * t555;
t698 = -t509 + t548;
t705 = t606 * t698;
t704 = t609 * t699;
t703 = t610 * t698;
t581 = t595 - t613;
t521 = -t611 * t581 + t676;
t702 = t608 * t521 + t611 * t647;
t701 = t612 * t521 - t608 * t648;
t626 = t563 + t590;
t700 = qJ(3) * t626;
t564 = -t639 + t648;
t494 = -t555 * qJD(4) + t610 * qJDD(2) - t606 * t564;
t654 = t607 * qJD(1);
t586 = qJD(4) + t654;
t687 = t586 * t555;
t457 = t494 + t687;
t697 = -pkin(2) * t639 + t654 * t710;
t696 = t607 * t581 + t661;
t576 = t612 * g(1) + t608 * g(2);
t540 = -t614 * pkin(1) + qJDD(1) * pkin(6) - t576;
t690 = qJ(3) * t607;
t693 = pkin(2) * t611;
t628 = -t690 - t693;
t560 = t628 * qJD(1);
t597 = t607 * g(3);
t695 = -(qJD(1) * t560 + t540) * t611 + t613 * pkin(2) + t597;
t496 = t498 ^ 2;
t497 = t500 ^ 2;
t546 = t555 ^ 2;
t547 = t557 ^ 2;
t578 = qJD(5) + t586;
t577 = t578 ^ 2;
t583 = t586 ^ 2;
t694 = pkin(2) + pkin(7);
t656 = t601 + t602;
t567 = t656 * qJDD(1);
t570 = t593 + t595;
t505 = t608 * t567 + t612 * t570;
t692 = pkin(5) * t505;
t691 = t614 * pkin(6);
t689 = t578 * t605;
t688 = t578 * t609;
t686 = t586 * t606;
t685 = t586 * t610;
t574 = pkin(3) * t654 - qJD(2) * pkin(7);
t617 = qJDD(2) * qJ(3) - t695;
t428 = t564 * pkin(3) - pkin(7) * t595 + (t710 + t574) * qJD(2) + t617;
t632 = t606 * qJDD(2) + t610 * t564;
t493 = -t557 * qJD(4) - t632;
t528 = t586 * pkin(4) - t557 * pkin(8);
t371 = -t493 * pkin(4) - t546 * pkin(8) + t557 * t528 + t428;
t684 = t605 * t371;
t424 = t443 + t543;
t683 = t605 * t424;
t575 = t608 * g(1) - t612 * g(2);
t622 = -qJDD(1) * pkin(1) - t575;
t616 = t622 - t697 - t700;
t415 = -t574 * t654 + (-pkin(3) * t602 - pkin(6)) * t614 - t694 * t564 + t616;
t526 = t611 * g(3) + t607 * t540;
t621 = -qJDD(2) * pkin(2) - t613 * qJ(3) + t560 * t654 + qJDD(3) + t526;
t429 = -t572 * pkin(7) + (t563 - t590) * pkin(3) + t621;
t367 = t606 * t415 - t610 * t429;
t350 = pkin(4) * t698 - t457 * pkin(8) - t367;
t368 = t610 * t415 + t606 * t429;
t355 = -t546 * pkin(4) + t493 * pkin(8) - t586 * t528 + t368;
t310 = -t609 * t350 + t605 * t355;
t311 = t605 * t350 + t609 * t355;
t287 = -t609 * t310 + t605 * t311;
t682 = t606 * t287;
t681 = t606 * t428;
t486 = t509 + t548;
t680 = t606 * t486;
t539 = -t622 + t691;
t679 = t607 * t539;
t678 = t607 * t562;
t669 = t609 * t371;
t668 = t609 * t424;
t667 = t610 * t287;
t666 = t610 * t428;
t665 = t610 * t486;
t664 = t611 * t539;
t663 = t611 * t565;
t658 = pkin(1) * t570 + pkin(6) * t567;
t653 = qJD(5) + t578;
t651 = qJD(3) * qJD(2);
t646 = -t547 - t583;
t645 = t607 * t443;
t644 = t607 * t509;
t643 = t611 * t443;
t642 = t611 * t509;
t288 = t605 * t310 + t609 * t311;
t634 = -t609 * t493 + t605 * t494;
t527 = t611 * t540 - t597;
t460 = t607 * t526 + t611 * t527;
t511 = -t608 * t575 - t612 * t576;
t631 = t608 * t641;
t630 = t612 * t641;
t569 = -t608 * t614 + t647;
t629 = -pkin(5) * t569 - t608 * g(3);
t627 = pkin(2) * t607 - qJ(3) * t611;
t326 = -t610 * t367 + t606 * t368;
t327 = t606 * t367 + t610 * t368;
t625 = t605 * t493 + t609 * t494;
t459 = t611 * t526 - t607 * t527;
t624 = t611 * t579 + t677;
t510 = t612 * t575 - t608 * t576;
t623 = t494 - t687;
t619 = (-qJD(5) + t578) * t500 - t634;
t409 = -t498 * qJD(5) + t625;
t618 = (-qJD(4) + t586) * t557 - t632;
t462 = t617 + 0.2e1 * t651;
t615 = t564 * pkin(2) + t539 + t697;
t571 = -t593 + t595;
t568 = t612 * t614 + t649;
t558 = t627 * qJDD(1);
t550 = t656 * t652;
t537 = -pkin(5) * t568 + t612 * g(3);
t534 = -t547 + t583;
t533 = t546 - t583;
t532 = t608 * qJDD(2) + t612 * t550;
t531 = t611 * t563 - t601 * t652;
t530 = -t612 * qJDD(2) + t608 * t550;
t529 = -t607 * t564 - t602 * t652;
t513 = t626 * t607;
t512 = (t564 - t639) * t611;
t507 = t547 - t546;
t506 = t612 * t567 - t608 * t570;
t504 = pkin(5) * t506;
t503 = t663 - t678;
t502 = t611 * t562 + t607 * t565;
t495 = -t583 - t546;
t492 = t612 * t531 - t631;
t491 = t612 * t529 + t631;
t490 = t608 * t531 + t630;
t489 = t608 * t529 - t630;
t484 = -t546 - t547;
t483 = t578 * t498;
t481 = -t497 + t577;
t480 = t496 - t577;
t471 = -t664 + t708;
t470 = -t679 - t714;
t469 = (t555 * t610 - t557 * t606) * t586;
t468 = (t555 * t606 + t557 * t610) * t586;
t467 = t612 * t503 - t608 * t571;
t466 = t608 * t503 + t612 * t571;
t464 = t527 + t709;
t463 = t526 - t715;
t461 = -t497 - t577;
t452 = (qJD(4) + t586) * t557 + t632;
t450 = qJ(3) * t570 + t621;
t449 = pkin(2) * t570 + t462;
t448 = -t610 * t494 + t557 * t686;
t447 = -t606 * t494 - t557 * t685;
t446 = t606 * t493 - t555 * t685;
t445 = -t610 * t493 - t555 * t686;
t444 = t615 + t700;
t442 = -t607 * t468 + t611 * t548;
t441 = t497 - t496;
t440 = -t610 * t533 + t680;
t439 = t606 * t534 - t703;
t438 = -t606 * t533 - t665;
t437 = -t610 * t534 - t705;
t436 = -t606 * t646 - t665;
t435 = t610 * t646 - t680;
t434 = -t691 + (-t564 - t565) * pkin(2) + t616;
t433 = -t577 - t496;
t432 = (t562 + t626) * qJ(3) + t615;
t431 = t612 * t460 - t608 * t539;
t430 = t608 * t460 + t612 * t539;
t427 = t610 * t495 - t705;
t426 = t606 * t495 + t703;
t420 = (-t498 * t609 + t500 * t605) * t578;
t419 = (-t498 * t605 - t500 * t609) * t578;
t418 = pkin(2) * t572 + qJ(3) * t582 - t621 + t715;
t417 = -t607 * t447 + t642;
t416 = -t607 * t445 - t642;
t414 = -t709 + pkin(2) * t580 - 0.2e1 * t651 + (-qJDD(2) - t573) * qJ(3) + t695;
t412 = -t496 - t497;
t411 = t611 * t462 + t607 * t621;
t410 = t607 * t462 - t611 * t621;
t408 = -t500 * qJD(5) - t634;
t407 = t606 * t457 + t610 * t618;
t406 = t610 * t452 + t606 * t623;
t405 = -t610 * t457 + t606 * t618;
t404 = t606 * t452 - t610 * t623;
t403 = -pkin(2) * t678 + t611 * t432 - t708;
t402 = -qJ(3) * t663 - t607 * t434 + t714;
t401 = -t607 * t449 + t611 * t450;
t400 = -t607 * t437 + t611 * t457;
t399 = -t607 * t438 + t611 * t618;
t398 = t609 * t480 - t683;
t397 = -t605 * t481 + t704;
t396 = t605 * t480 + t668;
t395 = t609 * t481 + t706;
t394 = t607 * t435 + t611 * t623;
t393 = -t611 * t435 + t607 * t623;
t392 = -t605 * t461 - t668;
t391 = t609 * t461 - t683;
t389 = t607 * t426 + t611 * t452;
t388 = -t611 * t426 + t607 * t452;
t387 = -t607 * t404 + t611 * t507;
t386 = -t498 * t653 + t625;
t385 = t409 + t483;
t384 = t409 - t483;
t381 = t500 * t653 + t634;
t380 = t609 * t409 - t500 * t689;
t379 = t605 * t409 + t500 * t688;
t378 = -t605 * t408 + t498 * t688;
t377 = t609 * t408 + t498 * t689;
t376 = t609 * t433 - t706;
t375 = t605 * t433 + t704;
t374 = t607 * t405 + t611 * t484;
t373 = -t611 * t405 + t607 * t484;
t370 = t612 * t411 - t608 * t444;
t369 = t608 * t411 + t612 * t444;
t365 = t606 * t419 - t610 * t420;
t364 = -t610 * t419 - t606 * t420;
t363 = -t607 * t364 + t611 * t543;
t362 = -pkin(1) * t410 + pkin(2) * t621 - qJ(3) * t462;
t361 = t612 * t394 + t608 * t436;
t360 = t608 * t394 - t612 * t436;
t359 = t612 * t389 + t608 * t427;
t358 = t608 * t389 - t612 * t427;
t357 = pkin(3) * t405 - qJ(3) * t407;
t356 = -pkin(6) * t410 - t444 * t627;
t354 = t606 * t396 - t610 * t398;
t353 = t606 * t395 - t610 * t397;
t352 = -t610 * t396 - t606 * t398;
t351 = -t610 * t395 - t606 * t397;
t348 = -t606 * t391 + t610 * t392;
t347 = t610 * t391 + t606 * t392;
t346 = t612 * t374 + t608 * t407;
t345 = t608 * t374 - t612 * t407;
t344 = pkin(3) * t623 - t694 * t436 - t681;
t343 = pkin(3) * t452 - t694 * t427 + t666;
t342 = -pkin(8) * t391 + t669;
t341 = t605 * t385 + t609 * t619;
t340 = -t609 * t381 - t605 * t384;
t339 = -t609 * t385 + t605 * t619;
t338 = -t605 * t381 + t609 * t384;
t336 = t606 * t379 - t610 * t380;
t335 = t606 * t377 - t610 * t378;
t334 = -t610 * t379 - t606 * t380;
t333 = -t610 * t377 - t606 * t378;
t332 = -t606 * t375 + t610 * t376;
t331 = t610 * t375 + t606 * t376;
t330 = pkin(3) * t435 - qJ(3) * t436 - t368;
t329 = -pkin(8) * t375 + t684;
t328 = pkin(3) * t426 - qJ(3) * t427 - t367;
t325 = -t607 * t334 + t643;
t324 = -t607 * t333 - t643;
t323 = -t607 * t351 + t611 * t385;
t322 = -t607 * t352 + t611 * t619;
t321 = -pkin(1) * t393 - qJ(3) * t623 + t694 * t435 - t666;
t320 = t607 * t347 + t611 * t386;
t319 = -t611 * t347 + t607 * t386;
t318 = -pkin(1) * t388 - qJ(3) * t452 + t694 * t426 - t681;
t317 = t607 * t326 + t611 * t428;
t316 = -t611 * t326 + t607 * t428;
t315 = -pkin(4) * t386 + pkin(8) * t392 + t684;
t314 = -pkin(4) * t381 + pkin(8) * t376 - t669;
t313 = t607 * t331 + t611 * t381;
t312 = -t611 * t331 + t607 * t381;
t308 = -t606 * t339 + t610 * t341;
t307 = t606 * t338 - t610 * t340;
t306 = t610 * t339 + t606 * t341;
t305 = -t610 * t338 - t606 * t340;
t304 = pkin(3) * t484 - t694 * t407 - t327;
t303 = -t607 * t305 + t611 * t441;
t302 = t612 * t320 + t608 * t348;
t301 = t608 * t320 - t612 * t348;
t300 = pkin(3) * t326 - qJ(3) * t327;
t299 = t607 * t306 + t611 * t412;
t298 = -t611 * t306 + t607 * t412;
t297 = -pkin(6) * t393 + t611 * t330 - t607 * t344;
t296 = -pkin(6) * t388 + t611 * t328 - t607 * t343;
t295 = -pkin(1) * t373 - qJ(3) * t484 + t694 * t405 + t326;
t294 = pkin(3) * t428 - t694 * t327;
t293 = t612 * t317 + t608 * t327;
t292 = t608 * t317 - t612 * t327;
t291 = t612 * t313 + t608 * t332;
t290 = t608 * t313 - t612 * t332;
t289 = -pkin(6) * t373 - t607 * t304 + t611 * t357;
t285 = pkin(3) * t347 + pkin(4) * t391 - qJ(3) * t348 - t311;
t284 = -pkin(4) * t371 + pkin(8) * t288;
t283 = -pkin(1) * t316 - qJ(3) * t428 + t694 * t326;
t282 = pkin(3) * t331 + pkin(4) * t375 - qJ(3) * t332 - t310;
t281 = t612 * t299 + t608 * t308;
t280 = t608 * t299 - t612 * t308;
t279 = -pkin(8) * t339 - t287;
t278 = pkin(3) * t386 - t610 * t315 - t606 * t342 - t694 * t348;
t277 = -pkin(4) * t412 + pkin(8) * t341 + t288;
t276 = pkin(3) * t306 + pkin(4) * t339 - qJ(3) * t308;
t275 = pkin(3) * t381 - t610 * t314 - t606 * t329 - t694 * t332;
t274 = -pkin(1) * t319 - qJ(3) * t386 + t606 * t315 - t610 * t342 + t694 * t347;
t273 = -pkin(6) * t316 - t607 * t294 + t611 * t300;
t272 = -pkin(1) * t312 - qJ(3) * t381 + t606 * t314 - t610 * t329 + t694 * t331;
t271 = t610 * t288 - t682;
t270 = t606 * t288 + t667;
t269 = t607 * t270 + t611 * t371;
t268 = -t611 * t270 + t607 * t371;
t267 = -pkin(6) * t319 - t607 * t278 + t611 * t285;
t266 = -pkin(6) * t312 - t607 * t275 + t611 * t282;
t265 = pkin(3) * t412 - t610 * t277 - t606 * t279 - t694 * t308;
t264 = t612 * t269 + t608 * t271;
t263 = t608 * t269 - t612 * t271;
t262 = -pkin(1) * t298 - qJ(3) * t412 + t606 * t277 - t610 * t279 + t694 * t306;
t261 = pkin(3) * t270 + pkin(4) * t287 - qJ(3) * t271;
t260 = -pkin(6) * t298 - t607 * t265 + t611 * t276;
t259 = pkin(3) * t371 + pkin(8) * t682 - t694 * t271 - t610 * t284;
t258 = -pkin(1) * t268 + pkin(8) * t667 - qJ(3) * t371 + t694 * t270 + t606 * t284;
t257 = -pkin(6) * t268 - t607 * t259 + t611 * t261;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t568, -t569, 0, t511, 0, 0, 0, 0, 0, 0, -t477, -t478, t506, t431, 0, 0, 0, 0, 0, 0, t506, t477, t478, t370, 0, 0, 0, 0, 0, 0, t359, t361, t346, t293, 0, 0, 0, 0, 0, 0, t291, t302, t281, t264; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t569, -t568, 0, t510, 0, 0, 0, 0, 0, 0, -t473, -t474, t505, t430, 0, 0, 0, 0, 0, 0, t505, t473, t474, t369, 0, 0, 0, 0, 0, 0, t358, t360, t345, t292, 0, 0, 0, 0, 0, 0, t290, t301, t280, t263; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t514, -t516, 0, -t459, 0, 0, 0, 0, 0, 0, 0, -t514, t516, t410, 0, 0, 0, 0, 0, 0, t388, t393, t373, t316, 0, 0, 0, 0, 0, 0, t312, t319, t298, t268; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t569, 0, -t568, 0, t629, -t537, -t510, -pkin(5) * t510, t492, t467, t711, t491, -t701, t532, -t608 * t463 + t612 * t470 + t717, -t608 * t464 + t612 * t471 + t719, t612 * t459 - t692, -pkin(5) * t430 - (pkin(1) * t608 - pkin(6) * t612) * t459, t532, -t711, t701, t492, t467, t491, t612 * t401 - t608 * t558 - t692, t612 * t402 - t608 * t418 - t717, t612 * t403 - t608 * t414 - t719, -pkin(5) * t369 + t612 * t356 - t608 * t362, t612 * t417 - t608 * t448, t612 * t387 - t608 * t406, t612 * t400 - t608 * t439, t612 * t416 - t608 * t446, t612 * t399 - t608 * t440, t612 * t442 - t608 * t469, -pkin(5) * t358 + t612 * t296 - t608 * t318, -pkin(5) * t360 + t612 * t297 - t608 * t321, -pkin(5) * t345 + t612 * t289 - t608 * t295, -pkin(5) * t292 + t612 * t273 - t608 * t283, t612 * t325 - t608 * t336, t612 * t303 - t608 * t307, t612 * t323 - t608 * t353, t612 * t324 - t608 * t335, t612 * t322 - t608 * t354, t612 * t363 - t608 * t365, -pkin(5) * t290 + t612 * t266 - t608 * t272, -pkin(5) * t301 + t612 * t267 - t608 * t274, -pkin(5) * t280 + t612 * t260 - t608 * t262, -pkin(5) * t263 + t612 * t257 - t608 * t258; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t568, 0, t569, 0, t537, t629, t511, pkin(5) * t511, t490, t466, t712, t489, -t702, t530, t612 * t463 + t608 * t470 - t716, t612 * t464 + t608 * t471 - t718, t608 * t459 + t504, pkin(5) * t431 - (-pkin(1) * t612 - pkin(6) * t608) * t459, t530, -t712, t702, t490, t466, t489, t608 * t401 + t612 * t558 + t504, t608 * t402 + t612 * t418 + t716, t608 * t403 + t612 * t414 + t718, pkin(5) * t370 + t608 * t356 + t612 * t362, t608 * t417 + t612 * t448, t608 * t387 + t612 * t406, t608 * t400 + t612 * t439, t608 * t416 + t612 * t446, t608 * t399 + t612 * t440, t608 * t442 + t612 * t469, pkin(5) * t359 + t608 * t296 + t612 * t318, pkin(5) * t361 + t608 * t297 + t612 * t321, pkin(5) * t346 + t608 * t289 + t612 * t295, pkin(5) * t293 + t608 * t273 + t612 * t283, t608 * t325 + t612 * t336, t608 * t303 + t612 * t307, t608 * t323 + t612 * t353, t608 * t324 + t612 * t335, t608 * t322 + t612 * t354, t608 * t363 + t612 * t365, pkin(5) * t291 + t608 * t266 + t612 * t272, pkin(5) * t302 + t608 * t267 + t612 * t274, pkin(5) * t281 + t608 * t260 + t612 * t262, pkin(5) * t264 + t608 * t257 + t612 * t258; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t575, t576, 0, 0, t513, t502, t624, t512, t696, 0, pkin(1) * t565 + t664 - t707, -pkin(1) * t562 - t679 - t713, t460 + t658, pkin(1) * t539 + pkin(6) * t460, 0, -t624, -t696, t513, t502, t512, t611 * t449 + t607 * t450 + t658, t707 + t611 * t434 + (-pkin(1) - t690) * t565, t713 + t607 * t432 + (pkin(1) + t693) * t562, pkin(6) * t411 + (pkin(1) - t628) * t444, t611 * t447 + t644, t611 * t404 + t607 * t507, t611 * t437 + t607 * t457, t611 * t445 - t644, t611 * t438 + t607 * t618, t611 * t468 + t607 * t548, -pkin(1) * t427 + pkin(6) * t389 + t607 * t328 + t611 * t343, -pkin(1) * t436 + pkin(6) * t394 + t607 * t330 + t611 * t344, -pkin(1) * t407 + pkin(6) * t374 + t611 * t304 + t607 * t357, -pkin(1) * t327 + pkin(6) * t317 + t611 * t294 + t607 * t300, t611 * t334 + t645, t611 * t305 + t607 * t441, t611 * t351 + t607 * t385, t611 * t333 - t645, t611 * t352 + t607 * t619, t611 * t364 + t607 * t543, -pkin(1) * t332 + pkin(6) * t313 + t611 * t275 + t607 * t282, -pkin(1) * t348 + pkin(6) * t320 + t611 * t278 + t607 * t285, -pkin(1) * t308 + pkin(6) * t299 + t611 * t265 + t607 * t276, -pkin(1) * t271 + pkin(6) * t269 + t611 * t259 + t607 * t261;];
tauB_reg = t1;
