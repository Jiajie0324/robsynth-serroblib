% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPRR15
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:43
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPRR15_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR15_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR15_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR15_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR15_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPRR15_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:43:45
% EndTime: 2019-12-31 20:43:48
% DurationCPUTime: 2.58s
% Computational Cost: add. (9487->240), mult. (19834->267), div. (0->0), fcn. (12204->8), ass. (0->163)
t1397 = sin(qJ(2));
t1401 = cos(qJ(2));
t1404 = qJD(1) ^ 2;
t1434 = t1401 * t1404;
t1378 = t1397 * t1434;
t1369 = t1378 + qJDD(2);
t1403 = qJD(2) ^ 2;
t1392 = t1401 ^ 2;
t1438 = t1392 * t1404;
t1376 = -t1403 - t1438;
t1345 = t1397 * t1369 - t1401 * t1376;
t1437 = t1397 * qJD(1);
t1384 = qJD(2) * t1437;
t1425 = t1401 * qJDD(1);
t1364 = -0.2e1 * t1384 + t1425;
t1398 = sin(qJ(1));
t1402 = cos(qJ(1));
t1454 = t1398 * t1345 - t1402 * t1364;
t1453 = t1402 * t1345 + t1398 * t1364;
t1370 = qJDD(2) - t1378;
t1391 = t1397 ^ 2;
t1375 = -t1391 * t1404 - t1403;
t1346 = t1401 * t1370 + t1397 * t1375;
t1441 = qJD(1) * t1401;
t1385 = qJD(2) * t1441;
t1426 = t1397 * qJDD(1);
t1361 = 0.2e1 * t1385 + t1426;
t1452 = t1398 * t1346 + t1402 * t1361;
t1451 = t1402 * t1346 - t1398 * t1361;
t1362 = t1385 + t1426;
t1372 = t1398 * g(1) - t1402 * g(2);
t1410 = -qJDD(1) * pkin(1) - t1372;
t1444 = 2 * qJD(3);
t1450 = pkin(2) * t1384 - (t1362 + t1385) * qJ(3) - t1437 * t1444 + t1410;
t1396 = sin(qJ(4));
t1400 = cos(qJ(4));
t1357 = t1396 * qJD(2) + t1400 * t1441;
t1359 = t1400 * qJD(2) - t1396 * t1441;
t1395 = sin(qJ(5));
t1399 = cos(qJ(5));
t1334 = t1399 * t1357 + t1395 * t1359;
t1449 = t1334 ^ 2;
t1336 = -t1395 * t1357 + t1399 * t1359;
t1448 = t1336 ^ 2;
t1355 = t1357 ^ 2;
t1447 = t1359 ^ 2;
t1380 = qJD(4) + t1437;
t1374 = qJD(5) + t1380;
t1446 = t1374 ^ 2;
t1445 = t1380 ^ 2;
t1443 = t1401 * g(3);
t1442 = t1404 * pkin(6);
t1440 = t1336 * t1334;
t1439 = t1359 * t1357;
t1431 = qJD(4) - t1380;
t1430 = qJD(4) + t1380;
t1429 = qJD(5) - t1374;
t1428 = qJD(5) + t1374;
t1363 = -t1384 + t1425;
t1371 = pkin(3) * t1437 - qJD(2) * pkin(7);
t1305 = -t1371 * t1437 + (-pkin(3) * t1392 - pkin(6)) * t1404 + (-pkin(2) - pkin(7)) * t1363 + t1450;
t1411 = -qJDD(2) * pkin(2) - t1403 * qJ(3) + qJDD(3) + t1443;
t1373 = -t1402 * g(1) - t1398 * g(2);
t1353 = -t1404 * pkin(1) + qJDD(1) * pkin(6) + t1373;
t1423 = t1404 * (-pkin(2) * t1401 - qJ(3) * t1397) + t1353;
t1313 = -qJDD(2) * pkin(7) + (t1362 - t1385) * pkin(3) + (-pkin(7) * t1434 + t1423) * t1397 + t1411;
t1283 = t1400 * t1305 + t1396 * t1313;
t1427 = t1391 + t1392;
t1424 = -t1445 - t1447;
t1422 = -t1396 * t1305 + t1400 * t1313;
t1420 = t1396 * qJDD(2) + t1400 * t1363;
t1331 = -t1359 * qJD(4) - t1420;
t1412 = t1400 * qJDD(2) - t1396 * t1363;
t1332 = -t1357 * qJD(4) + t1412;
t1421 = t1399 * t1331 - t1395 * t1332;
t1418 = qJDD(4) + t1362;
t1408 = t1418 - t1439;
t1280 = (-t1380 * t1357 - t1332) * pkin(8) + t1408 * pkin(4) + t1422;
t1350 = t1380 * pkin(4) - t1359 * pkin(8);
t1281 = -t1355 * pkin(4) + t1331 * pkin(8) - t1380 * t1350 + t1283;
t1264 = t1399 * t1280 - t1395 * t1281;
t1265 = t1395 * t1280 + t1399 * t1281;
t1417 = t1399 * t1264 + t1395 * t1265;
t1290 = -t1429 * t1336 + t1421;
t1413 = -t1395 * t1331 - t1399 * t1332;
t1292 = t1429 * t1334 + t1413;
t1416 = t1395 * t1290 + t1399 * t1292;
t1409 = -qJDD(5) - t1418;
t1308 = -t1409 - t1440;
t1314 = -t1446 - t1449;
t1415 = t1399 * t1308 + t1395 * t1314;
t1309 = t1409 - t1440;
t1324 = -t1446 - t1448;
t1414 = t1395 * t1309 + t1399 * t1324;
t1340 = t1401 * t1369 + t1397 * t1376;
t1342 = t1397 * t1370 - t1401 * t1375;
t1407 = t1431 * t1357 - t1412;
t1388 = t1397 * g(3);
t1405 = -t1403 * pkin(2) + qJDD(2) * qJ(3) + t1423 * t1401 - t1388;
t1312 = t1363 * pkin(3) - pkin(7) * t1438 + (t1444 + t1371) * qJD(2) + t1405;
t1368 = t1427 * t1404;
t1367 = -t1398 * qJDD(1) - t1402 * t1404;
t1366 = t1402 * qJDD(1) - t1398 * t1404;
t1365 = t1427 * qJDD(1);
t1352 = -t1410 + t1442;
t1349 = t1401 * t1353 - t1388;
t1348 = -t1397 * t1353 - t1443;
t1339 = t1402 * t1365 - t1398 * t1368;
t1338 = t1398 * t1365 + t1402 * t1368;
t1333 = -t1445 - t1355;
t1329 = -t1418 - t1439;
t1328 = -t1355 - t1447;
t1326 = t1423 * t1397 + t1411;
t1325 = qJD(2) * t1444 + t1405;
t1323 = -t1397 * t1348 + t1401 * t1349;
t1322 = t1401 * t1348 + t1397 * t1349;
t1321 = -t1430 * t1357 + t1412;
t1320 = -t1431 * t1359 - t1420;
t1319 = t1430 * t1359 + t1420;
t1317 = t1363 * pkin(2) + t1442 - t1450;
t1316 = t1400 * t1329 - t1396 * t1424;
t1315 = t1396 * t1329 + t1400 * t1424;
t1311 = t1400 * t1333 - t1396 * t1408;
t1310 = t1396 * t1333 + t1400 * t1408;
t1303 = -t1448 - t1449;
t1302 = t1401 * t1325 + t1397 * t1326;
t1301 = t1397 * t1325 - t1401 * t1326;
t1300 = t1400 * t1320 - t1396 * t1407;
t1299 = t1396 * t1320 + t1400 * t1407;
t1298 = t1397 * t1315 + t1401 * t1321;
t1297 = -t1401 * t1315 + t1397 * t1321;
t1296 = t1399 * t1309 - t1395 * t1324;
t1294 = t1397 * t1310 + t1401 * t1319;
t1293 = -t1401 * t1310 + t1397 * t1319;
t1291 = -t1428 * t1334 - t1413;
t1289 = t1428 * t1336 - t1421;
t1288 = -t1395 * t1308 + t1399 * t1314;
t1287 = t1397 * t1299 + t1401 * t1328;
t1286 = -t1401 * t1299 + t1397 * t1328;
t1284 = -t1331 * pkin(4) - t1355 * pkin(8) + t1359 * t1350 + t1312;
t1279 = t1400 * t1296 - t1396 * t1414;
t1278 = t1396 * t1296 + t1400 * t1414;
t1277 = t1399 * t1290 - t1395 * t1292;
t1275 = t1400 * t1288 - t1396 * t1415;
t1274 = t1396 * t1288 + t1400 * t1415;
t1273 = t1400 * t1283 - t1396 * t1422;
t1272 = t1396 * t1283 + t1400 * t1422;
t1271 = t1397 * t1278 + t1401 * t1291;
t1270 = -t1401 * t1278 + t1397 * t1291;
t1269 = t1397 * t1272 + t1401 * t1312;
t1268 = -t1401 * t1272 + t1397 * t1312;
t1267 = t1397 * t1274 + t1401 * t1289;
t1266 = -t1401 * t1274 + t1397 * t1289;
t1263 = t1400 * t1277 - t1396 * t1416;
t1262 = t1396 * t1277 + t1400 * t1416;
t1261 = t1397 * t1262 + t1401 * t1303;
t1260 = -t1401 * t1262 + t1397 * t1303;
t1259 = -t1395 * t1264 + t1399 * t1265;
t1257 = t1400 * t1259 - t1396 * t1417;
t1256 = t1396 * t1259 + t1400 * t1417;
t1255 = t1397 * t1256 + t1401 * t1284;
t1254 = -t1401 * t1256 + t1397 * t1284;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1367, -t1366, 0, -t1398 * t1372 + t1402 * t1373, 0, 0, 0, 0, 0, 0, -t1453, -t1451, t1339, t1402 * t1323 - t1398 * t1352, 0, 0, 0, 0, 0, 0, t1339, t1453, t1451, t1402 * t1302 - t1398 * t1317, 0, 0, 0, 0, 0, 0, t1402 * t1294 + t1398 * t1311, t1402 * t1298 + t1398 * t1316, t1402 * t1287 + t1398 * t1300, t1402 * t1269 + t1398 * t1273, 0, 0, 0, 0, 0, 0, t1402 * t1267 + t1398 * t1275, t1402 * t1271 + t1398 * t1279, t1402 * t1261 + t1398 * t1263, t1402 * t1255 + t1398 * t1257; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1366, t1367, 0, t1402 * t1372 + t1398 * t1373, 0, 0, 0, 0, 0, 0, -t1454, -t1452, t1338, t1398 * t1323 + t1402 * t1352, 0, 0, 0, 0, 0, 0, t1338, t1454, t1452, t1398 * t1302 + t1402 * t1317, 0, 0, 0, 0, 0, 0, t1398 * t1294 - t1402 * t1311, t1398 * t1298 - t1402 * t1316, t1398 * t1287 - t1402 * t1300, t1398 * t1269 - t1402 * t1273, 0, 0, 0, 0, 0, 0, t1398 * t1267 - t1402 * t1275, t1398 * t1271 - t1402 * t1279, t1398 * t1261 - t1402 * t1263, t1398 * t1255 - t1402 * t1257; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1340, -t1342, 0, t1322, 0, 0, 0, 0, 0, 0, 0, -t1340, t1342, t1301, 0, 0, 0, 0, 0, 0, t1293, t1297, t1286, t1268, 0, 0, 0, 0, 0, 0, t1266, t1270, t1260, t1254; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1404, -qJDD(1), 0, t1373, 0, 0, 0, 0, 0, 0, -t1345, -t1346, t1365, t1323, 0, 0, 0, 0, 0, 0, t1365, t1345, t1346, t1302, 0, 0, 0, 0, 0, 0, t1294, t1298, t1287, t1269, 0, 0, 0, 0, 0, 0, t1267, t1271, t1261, t1255; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1404, 0, t1372, 0, 0, 0, 0, 0, 0, t1364, -t1361, t1368, t1352, 0, 0, 0, 0, 0, 0, t1368, -t1364, t1361, t1317, 0, 0, 0, 0, 0, 0, -t1311, -t1316, -t1300, -t1273, 0, 0, 0, 0, 0, 0, -t1275, -t1279, -t1263, -t1257; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1340, -t1342, 0, t1322, 0, 0, 0, 0, 0, 0, 0, -t1340, t1342, t1301, 0, 0, 0, 0, 0, 0, t1293, t1297, t1286, t1268, 0, 0, 0, 0, 0, 0, t1266, t1270, t1260, t1254; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1376, -t1370, t1425, t1349, 0, 0, 0, 0, 0, 0, t1425, -t1376, t1370, t1325, 0, 0, 0, 0, 0, 0, t1319, t1321, t1328, t1312, 0, 0, 0, 0, 0, 0, t1289, t1291, t1303, t1284; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1369, t1375, -t1426, t1348, 0, 0, 0, 0, 0, 0, -t1426, -t1369, -t1375, -t1326, 0, 0, 0, 0, 0, 0, -t1310, -t1315, -t1299, -t1272, 0, 0, 0, 0, 0, 0, -t1274, -t1278, -t1262, -t1256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1364, t1361, -t1368, -t1352, 0, 0, 0, 0, 0, 0, -t1368, t1364, -t1361, -t1317, 0, 0, 0, 0, 0, 0, t1311, t1316, t1300, t1273, 0, 0, 0, 0, 0, 0, t1275, t1279, t1263, t1257; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1368, t1364, -t1361, -t1317, 0, 0, 0, 0, 0, 0, t1311, t1316, t1300, t1273, 0, 0, 0, 0, 0, 0, t1275, t1279, t1263, t1257; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1425, t1376, -t1370, -t1325, 0, 0, 0, 0, 0, 0, -t1319, -t1321, -t1328, -t1312, 0, 0, 0, 0, 0, 0, -t1289, -t1291, -t1303, -t1284; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1426, t1369, t1375, t1326, 0, 0, 0, 0, 0, 0, t1310, t1315, t1299, t1272, 0, 0, 0, 0, 0, 0, t1274, t1278, t1262, t1256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1333, t1329, t1320, t1283, 0, 0, 0, 0, 0, 0, t1288, t1296, t1277, t1259; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1408, t1424, t1407, t1422, 0, 0, 0, 0, 0, 0, t1415, t1414, t1416, t1417; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1319, t1321, t1328, t1312, 0, 0, 0, 0, 0, 0, t1289, t1291, t1303, t1284; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1314, t1309, t1290, t1265; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1308, t1324, t1292, t1264; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1289, t1291, t1303, t1284;];
f_new_reg = t1;
