% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRPR13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:33
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRPR13_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR13_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR13_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR13_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR13_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRPR13_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:33:03
% EndTime: 2019-12-31 18:33:17
% DurationCPUTime: 14.73s
% Computational Cost: add. (24612->531), mult. (60312->762), div. (0->0), fcn. (42818->8), ass. (0->376)
t648 = qJD(3) ^ 2;
t639 = sin(pkin(8));
t640 = cos(pkin(8));
t643 = sin(qJ(3));
t646 = cos(qJ(3));
t665 = t639 * t646 + t640 * t643;
t609 = t665 * qJD(1);
t721 = t609 ^ 2;
t587 = t721 - t648;
t695 = t639 * t643;
t607 = (-t640 * t646 + t695) * qJD(1);
t698 = t609 * t607;
t755 = qJDD(3) - t698;
t766 = t643 * t755;
t501 = t587 * t646 - t766;
t765 = t646 * t755;
t506 = t587 * t643 + t765;
t445 = t501 * t639 + t506 * t640;
t644 = sin(qJ(1));
t788 = t445 * t644;
t647 = cos(qJ(1));
t787 = t445 * t647;
t586 = t721 + t648;
t754 = qJDD(3) + t698;
t764 = t754 * t643;
t499 = t586 * t646 + t764;
t763 = t754 * t646;
t505 = -t586 * t643 + t763;
t440 = t499 * t640 + t505 * t639;
t786 = qJ(2) * t440;
t447 = t499 * t639 - t505 * t640;
t785 = qJ(2) * t447;
t722 = t607 ^ 2;
t582 = t722 - t648;
t497 = t582 * t643 + t763;
t504 = -t582 * t646 + t764;
t443 = t497 * t639 + t504 * t640;
t784 = t443 * t644;
t783 = t443 * t647;
t782 = t447 * t644;
t781 = t447 * t647;
t780 = -pkin(1) * t440 - pkin(2) * t499;
t779 = t501 * t640 - t506 * t639;
t777 = pkin(6) * t499;
t776 = pkin(6) * t505;
t775 = t497 * t640 - t504 * t639;
t546 = -t648 - t722;
t479 = t546 * t643 + t765;
t482 = -t546 * t646 + t766;
t417 = t479 * t640 - t482 * t639;
t774 = qJ(2) * t417;
t420 = t479 * t639 + t482 * t640;
t773 = qJ(2) * t420;
t772 = t420 * t644;
t771 = t420 * t647;
t770 = -pkin(1) * t417 - pkin(2) * t479;
t768 = pkin(6) * t479;
t767 = pkin(6) * t482;
t594 = t607 * qJD(3);
t732 = t665 * qJDD(1);
t557 = t732 - t594;
t521 = -t594 + t557;
t737 = qJ(4) * t521;
t622 = g(1) * t647 + g(2) * t644;
t649 = qJD(1) ^ 2;
t744 = -pkin(1) * t649 + qJDD(1) * qJ(2) + 0.2e1 * qJD(1) * qJD(2) - t622;
t621 = t644 * g(1) - t647 * g(2);
t669 = -qJDD(2) + t621;
t635 = t639 ^ 2;
t636 = t640 ^ 2;
t690 = t635 + t636;
t719 = pkin(2) * t640;
t547 = t649 * (t690 * pkin(6) + qJ(2)) + (pkin(1) + t719) * qJDD(1) + t669;
t688 = t609 * qJD(3);
t753 = -2 * qJD(4);
t756 = pkin(3) * t688 + t609 * t753 - t547;
t733 = -t722 - t721;
t752 = pkin(1) * t733;
t751 = pkin(2) * t733;
t642 = sin(qJ(5));
t645 = cos(qJ(5));
t576 = qJD(3) * t642 - t645 * t607;
t578 = qJD(3) * t645 + t607 * t642;
t525 = t578 * t576;
t544 = qJDD(5) + t557;
t736 = -t525 + t544;
t750 = t642 * t736;
t749 = t644 * t733;
t734 = -t721 + t722;
t748 = t644 * t734;
t747 = t645 * t736;
t746 = t647 * t733;
t745 = t647 * t734;
t658 = (-t607 * t643 - t609 * t646) * qJD(3);
t659 = (-t607 * t646 + t609 * t643) * qJD(3);
t727 = -t639 * t658 + t640 * t659;
t743 = t644 * qJDD(3) + t647 * t727;
t676 = t647 * t698;
t666 = t646 * t557 - t643 * t688;
t668 = t643 * t557 + t646 * t688;
t724 = -t639 * t668 + t640 * t666;
t742 = t644 * t724 - t676;
t686 = qJDD(1) * t640;
t605 = qJDD(1) * t695 - t646 * t686;
t555 = t605 + t688;
t661 = t555 * t643 + t646 * t594;
t667 = -t646 * t555 + t643 * t594;
t726 = -t639 * t667 + t640 * t661;
t741 = t644 * t726 + t676;
t740 = -qJDD(3) * t647 + t644 * t727;
t677 = t644 * t698;
t739 = t647 * t724 + t677;
t738 = t647 * t726 - t677;
t520 = t594 + t557;
t730 = t649 * t690;
t728 = t639 * t659 + t640 * t658;
t725 = t639 * t661 + t640 * t667;
t723 = t639 * t666 + t640 * t668;
t574 = t576 ^ 2;
t575 = t578 ^ 2;
t598 = qJD(5) + t609;
t596 = t598 ^ 2;
t720 = pkin(3) + pkin(7);
t718 = pkin(3) * t646;
t717 = t640 * g(3);
t716 = qJDD(1) * pkin(1);
t530 = -t717 + (-pkin(6) * qJDD(1) + t649 * t719 - t744) * t639;
t564 = -g(3) * t639 + t744 * t640;
t629 = t636 * t649;
t533 = -pkin(2) * t629 + pkin(6) * t686 + t564;
t468 = -t646 * t530 + t643 * t533;
t469 = t643 * t530 + t646 * t533;
t406 = -t468 * t646 + t469 * t643;
t715 = t406 * t639;
t714 = t406 * t640;
t518 = t555 + t688;
t713 = t518 * t646;
t712 = t521 * t643;
t709 = t547 * t643;
t708 = t547 * t646;
t703 = t576 * t598;
t702 = t598 * t642;
t701 = t598 * t645;
t599 = t649 * qJ(2) + t669 + t716;
t700 = t599 * t644;
t699 = t599 * t647;
t697 = t635 * t649;
t696 = t639 * t640;
t581 = pkin(4) * t609 - qJD(3) * pkin(7);
t543 = pkin(3) * t607 - qJ(4) * t609;
t664 = -t648 * pkin(3) - t607 * t543 + t469;
t683 = qJDD(3) * qJ(4);
t388 = t683 - t555 * pkin(4) - t722 * pkin(7) + ((2 * qJD(4)) + t581) * qJD(3) + t664;
t694 = t642 * t388;
t478 = t525 + t544;
t693 = t642 * t478;
t692 = t645 * t388;
t691 = t645 * t478;
t685 = qJDD(1) * t644;
t684 = qJDD(1) * t647;
t681 = -t575 - t596;
t679 = t643 * t525;
t678 = t646 * t525;
t491 = -t576 * qJD(5) + t645 * qJDD(3) + t642 * t555;
t674 = qJ(4) * t643 + pkin(2);
t673 = t599 + t716;
t407 = t468 * t643 + t646 * t469;
t563 = t744 * t639 + t717;
t494 = t563 * t639 + t640 * t564;
t573 = -t621 * t644 - t647 * t622;
t671 = t642 * qJDD(3) - t645 * t555;
t620 = -t644 * t649 + t684;
t670 = -pkin(5) * t620 - g(3) * t644;
t652 = -t737 + t756;
t384 = -pkin(4) * t722 + t720 * t555 - t609 * t581 + t652;
t662 = -qJDD(3) * pkin(3) - t648 * qJ(4) + t609 * t543 + qJDD(4) + t468;
t385 = pkin(4) * t520 - pkin(7) * t755 + t662;
t346 = t384 * t642 - t385 * t645;
t347 = t384 * t645 + t385 * t642;
t312 = -t645 * t346 + t642 * t347;
t313 = t642 * t346 + t645 * t347;
t493 = t563 * t640 - t564 * t639;
t572 = t621 * t647 - t622 * t644;
t619 = t647 * t649 + t685;
t663 = t491 - t703;
t613 = t640 * t730;
t569 = -t613 * t644 + t640 * t684;
t660 = t613 * t647 + t640 * t685;
t656 = (-qJD(5) + t598) * t578 - t671;
t655 = qJD(3) * t753 - t664;
t428 = -t655 + t683;
t653 = -t555 * pkin(3) - t756;
t628 = t636 * qJDD(1);
t627 = t635 * qJDD(1);
t618 = t629 - t697;
t617 = t629 + t697;
t616 = t628 - t627;
t615 = t628 + t627;
t612 = t639 * t730;
t600 = -pkin(5) * t619 + g(3) * t647;
t580 = t620 * t696;
t579 = t619 * t696;
t570 = t612 * t647 + t639 * t685;
t568 = t612 * t644 - t639 * t684;
t566 = t615 * t647 - t617 * t644;
t565 = t615 * t644 + t617 * t647;
t556 = t732 - 0.2e1 * t594;
t554 = t605 + 0.2e1 * t688;
t532 = -t575 + t596;
t531 = t574 - t596;
t522 = t575 - t574;
t519 = -t555 + t688;
t495 = -t596 - t574;
t490 = -qJD(5) * t578 - t671;
t489 = -t574 - t575;
t488 = t520 * t643 - t605 * t646;
t487 = -t554 * t646 - t556 * t643;
t486 = t519 * t646 + t643 * t732;
t485 = -t520 * t646 - t605 * t643;
t484 = -t554 * t643 + t556 * t646;
t483 = t519 * t643 - t646 * t732;
t475 = (t576 * t645 - t578 * t642) * t598;
t474 = (t576 * t642 + t578 * t645) * t598;
t471 = t494 * t647 - t700;
t470 = t494 * t644 + t699;
t466 = -t708 + t777;
t465 = -t712 - t713;
t464 = -t518 * t643 + t521 * t646;
t462 = t491 + t703;
t458 = (qJD(5) + t598) * t578 + t671;
t456 = -t709 - t768;
t455 = -t491 * t645 + t578 * t702;
t454 = -t491 * t642 - t578 * t701;
t453 = t490 * t642 - t576 * t701;
t452 = -t490 * t645 - t576 * t702;
t439 = -t474 * t643 + t544 * t646;
t438 = t474 * t646 + t544 * t643;
t437 = -t531 * t645 + t693;
t436 = t532 * t642 - t747;
t435 = -t531 * t642 - t691;
t434 = -t532 * t645 - t750;
t433 = -pkin(2) * t556 - t709 - t776;
t432 = -pkin(2) * t554 + t708 - t767;
t431 = -t642 * t681 - t691;
t430 = t645 * t681 - t693;
t427 = -t485 * t639 + t488 * t640;
t426 = -t484 * t639 + t487 * t640;
t425 = -t483 * t639 + t486 * t640;
t424 = t485 * t640 + t488 * t639;
t423 = t483 * t640 + t486 * t639;
t422 = t645 * t495 - t750;
t421 = t642 * t495 + t747;
t416 = t653 + t737;
t415 = t556 * t644 + t781;
t414 = -t556 * t647 + t782;
t413 = -t454 * t643 + t678;
t412 = -t452 * t643 - t678;
t411 = t454 * t646 + t679;
t410 = t452 * t646 - t679;
t409 = -t521 * t644 - t781;
t408 = t521 * t647 - t782;
t405 = t554 * t644 - t771;
t404 = -t554 * t647 - t772;
t403 = -qJ(4) * t733 + t662;
t402 = -pkin(3) * t733 + t428;
t401 = t427 * t647 + t749;
t400 = t425 * t647 + t749;
t399 = t427 * t644 - t746;
t398 = t425 * t644 - t746;
t397 = (t518 + t555) * pkin(3) + t652;
t396 = t653 + 0.2e1 * t737;
t395 = -t518 * t644 + t771;
t394 = t518 * t647 + t772;
t393 = -t464 * t639 + t465 * t640;
t392 = t642 * t462 + t645 * t656;
t391 = t458 * t645 + t642 * t663;
t390 = -t462 * t645 + t642 * t656;
t389 = t458 * t642 - t645 * t663;
t387 = pkin(2) * t547 + pkin(6) * t407;
t386 = -pkin(1) * t423 - pkin(2) * t483;
t383 = -t434 * t643 + t462 * t646;
t382 = -t435 * t643 + t646 * t656;
t381 = t434 * t646 + t462 * t643;
t380 = t435 * t646 + t643 * t656;
t379 = t430 * t643 + t646 * t663;
t378 = -t430 * t646 + t643 * t663;
t377 = -pkin(6) * t483 - t406;
t376 = -t438 * t639 + t439 * t640;
t375 = t421 * t643 + t458 * t646;
t374 = -t421 * t646 + t458 * t643;
t373 = -t389 * t643 + t522 * t646;
t372 = t389 * t646 + t522 * t643;
t371 = t469 - t780;
t370 = -pkin(1) * t424 - pkin(2) * t485 + pkin(3) * t520 + qJ(4) * t605;
t369 = t390 * t643 + t489 * t646;
t368 = -t390 * t646 + t489 * t643;
t367 = t428 * t646 + t643 * t662;
t366 = t428 * t643 - t646 * t662;
t365 = pkin(6) * t486 + t407 - t751;
t364 = t468 + t770;
t363 = -pkin(3) * t712 + t396 * t646 - t777;
t362 = qJ(4) * t713 - t397 * t643 + t768;
t361 = -t411 * t639 + t413 * t640;
t360 = -t410 * t639 + t412 * t640;
t359 = -t433 * t639 + t466 * t640 + t786;
t358 = t776 + t643 * t396 + (pkin(2) + t718) * t521;
t357 = t407 * t640 - t715;
t356 = t407 * t639 + t714;
t355 = t646 * t397 + t674 * t518 + t767;
t354 = -pkin(3) * t586 + (-qJDD(3) - t754) * qJ(4) + t655 + t780;
t353 = -t432 * t639 + t456 * t640 - t774;
t352 = t357 * t647 - t547 * t644;
t351 = t357 * t644 + t547 * t647;
t350 = pkin(4) * t390 - qJ(4) * t392;
t349 = pkin(3) * t755 + qJ(4) * t546 - t662 - t770;
t348 = -pkin(6) * t485 - t402 * t643 + t403 * t646;
t344 = -t381 * t639 + t383 * t640;
t343 = -t380 * t639 + t382 * t640;
t342 = pkin(6) * t488 + t402 * t646 + t403 * t643 - t751;
t341 = -t378 * t639 + t379 * t640;
t340 = t378 * t640 + t379 * t639;
t339 = -t374 * t639 + t375 * t640;
t338 = t374 * t640 + t375 * t639;
t337 = -t372 * t639 + t373 * t640;
t336 = -pkin(1) * t356 - pkin(2) * t406;
t335 = -t368 * t639 + t369 * t640;
t334 = t368 * t640 + t369 * t639;
t333 = -t366 * t639 + t367 * t640;
t332 = t366 * t640 + t367 * t639;
t331 = -pkin(6) * t366 + (-pkin(3) * t643 + qJ(4) * t646) * t416;
t330 = pkin(4) * t663 - t720 * t431 - t694;
t329 = pkin(4) * t458 - t720 * t422 + t692;
t328 = t341 * t647 + t431 * t644;
t327 = t341 * t644 - t431 * t647;
t326 = t339 * t647 + t422 * t644;
t325 = t339 * t644 - t422 * t647;
t324 = -qJ(2) * t423 - t365 * t639 + t377 * t640;
t323 = t333 * t647 - t416 * t644;
t322 = t333 * t644 + t416 * t647;
t321 = pkin(4) * t430 - qJ(4) * t431 - t347;
t320 = pkin(6) * t367 + (t674 + t718) * t416;
t319 = pkin(4) * t421 - qJ(4) * t422 - t346;
t318 = -pkin(6) * t714 - qJ(2) * t356 - t387 * t639;
t317 = -t358 * t639 + t363 * t640 - t786;
t316 = t335 * t647 + t392 * t644;
t315 = t335 * t644 - t392 * t647;
t314 = -t355 * t639 + t362 * t640 + t774;
t311 = -qJ(2) * t424 - t342 * t639 + t348 * t640;
t310 = t312 * t643 + t388 * t646;
t309 = -t312 * t646 + t388 * t643;
t308 = -pkin(1) * t332 - pkin(2) * t366 + pkin(3) * t662 - qJ(4) * t428;
t307 = -pkin(1) * t340 - pkin(2) * t378 - qJ(4) * t663 + t720 * t430 - t692;
t306 = -pkin(1) * t338 - pkin(2) * t374 - qJ(4) * t458 + t720 * t421 - t694;
t305 = pkin(4) * t489 - t720 * t392 - t313;
t304 = -pkin(6) * t378 + t321 * t646 - t330 * t643;
t303 = -pkin(6) * t374 + t319 * t646 - t329 * t643;
t302 = -pkin(2) * t431 + pkin(6) * t379 + t321 * t643 + t330 * t646;
t301 = -pkin(2) * t422 + pkin(6) * t375 + t319 * t643 + t329 * t646;
t300 = pkin(4) * t312 - qJ(4) * t313;
t299 = -qJ(2) * t332 - t320 * t639 + t331 * t640;
t298 = pkin(4) * t388 - t720 * t313;
t297 = -pkin(6) * t368 - t305 * t643 + t350 * t646;
t296 = -pkin(1) * t334 - pkin(2) * t368 - qJ(4) * t489 + t720 * t390 + t312;
t295 = -t309 * t639 + t310 * t640;
t294 = t309 * t640 + t310 * t639;
t293 = -pkin(2) * t392 + pkin(6) * t369 + t305 * t646 + t350 * t643;
t292 = t295 * t647 + t313 * t644;
t291 = t295 * t644 - t313 * t647;
t290 = -qJ(2) * t340 - t302 * t639 + t304 * t640;
t289 = -qJ(2) * t338 - t301 * t639 + t303 * t640;
t288 = -qJ(2) * t334 - t293 * t639 + t297 * t640;
t287 = -pkin(6) * t309 - t298 * t643 + t300 * t646;
t286 = -pkin(1) * t294 - pkin(2) * t309 - qJ(4) * t388 + t720 * t312;
t285 = -pkin(2) * t313 + pkin(6) * t310 + t298 * t646 + t300 * t643;
t284 = -qJ(2) * t294 - t285 * t639 + t287 * t640;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t619, -t620, 0, t573, 0, 0, 0, 0, 0, 0, -t660, t570, t566, t471, 0, 0, 0, 0, 0, 0, t405, t415, t400, t352, 0, 0, 0, 0, 0, 0, t401, t395, t409, t323, 0, 0, 0, 0, 0, 0, t326, t328, t316, t292; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t620, -t619, 0, t572, 0, 0, 0, 0, 0, 0, t569, t568, t565, t470, 0, 0, 0, 0, 0, 0, t404, t414, t398, t351, 0, 0, 0, 0, 0, 0, t399, t394, t408, t322, 0, 0, 0, 0, 0, 0, t325, t327, t315, t291; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t493, 0, 0, 0, 0, 0, 0, t417, -t440, t423, t356, 0, 0, 0, 0, 0, 0, t424, -t417, t440, t332, 0, 0, 0, 0, 0, 0, t338, t340, t334, t294; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t620, 0, -t619, 0, t670, -t600, -t572, -pkin(5) * t572, t580, t616 * t647 - t618 * t644, t570, -t580, t660, 0, -pkin(5) * t569 - t563 * t644 - t639 * t699, -pkin(5) * t568 - t564 * t644 - t640 * t699, -pkin(5) * t565 + t493 * t647, -pkin(5) * t470 - (pkin(1) * t644 - qJ(2) * t647) * t493, t739, t426 * t647 - t748, t644 * t732 + t787, t738, -t605 * t644 - t783, t743, -pkin(5) * t404 + t353 * t647 - t364 * t644, -pkin(5) * t414 + t359 * t647 - t371 * t644, -pkin(5) * t398 + t324 * t647 - t386 * t644, -pkin(5) * t351 + t318 * t647 - t336 * t644, t743, -t520 * t644 - t787, -t519 * t644 + t783, t739, t393 * t647 - t748, t738, -pkin(5) * t399 + t311 * t647 - t370 * t644, -pkin(5) * t394 + t314 * t647 - t349 * t644, -pkin(5) * t408 + t317 * t647 - t354 * t644, -pkin(5) * t322 + t299 * t647 - t308 * t644, t361 * t647 - t455 * t644, t337 * t647 - t391 * t644, t344 * t647 - t436 * t644, t360 * t647 - t453 * t644, t343 * t647 - t437 * t644, t376 * t647 - t475 * t644, -pkin(5) * t325 + t289 * t647 - t306 * t644, -pkin(5) * t327 + t290 * t647 - t307 * t644, -pkin(5) * t315 + t288 * t647 - t296 * t644, -pkin(5) * t291 + t284 * t647 - t286 * t644; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t619, 0, t620, 0, t600, t670, t573, pkin(5) * t573, t579, t616 * t644 + t618 * t647, t568, -t579, -t569, 0, -pkin(5) * t660 + t563 * t647 - t639 * t700, pkin(5) * t570 + t564 * t647 - t640 * t700, pkin(5) * t566 + t493 * t644, pkin(5) * t471 - (-pkin(1) * t647 - qJ(2) * t644) * t493, t742, t426 * t644 + t745, -t647 * t732 + t788, t741, t605 * t647 - t784, t740, pkin(5) * t405 + t353 * t644 + t364 * t647, pkin(5) * t415 + t359 * t644 + t371 * t647, pkin(5) * t400 + t324 * t644 + t386 * t647, pkin(5) * t352 + t318 * t644 + t336 * t647, t740, t520 * t647 - t788, t519 * t647 + t784, t742, t393 * t644 + t745, t741, pkin(5) * t401 + t311 * t644 + t370 * t647, pkin(5) * t395 + t314 * t644 + t349 * t647, pkin(5) * t409 + t317 * t644 + t354 * t647, pkin(5) * t323 + t299 * t644 + t308 * t647, t361 * t644 + t455 * t647, t337 * t644 + t391 * t647, t344 * t644 + t436 * t647, t360 * t644 + t453 * t647, t343 * t644 + t437 * t647, t376 * t644 + t475 * t647, pkin(5) * t326 + t289 * t644 + t306 * t647, pkin(5) * t328 + t290 * t644 + t307 * t647, pkin(5) * t316 + t288 * t644 + t296 * t647, pkin(5) * t292 + t284 * t644 + t286 * t647; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t621, t622, 0, 0, t627, 0.2e1 * t639 * t686, 0, t628, 0, 0, -qJ(2) * t613 + t673 * t640, qJ(2) * t612 - t673 * t639, pkin(1) * t617 + qJ(2) * t615 + t494, pkin(1) * t599 + qJ(2) * t494, t723, t484 * t640 + t487 * t639, -t779, t725, t775, t728, -pkin(1) * t554 + t432 * t640 + t456 * t639 - t773, -pkin(1) * t556 + t433 * t640 + t466 * t639 + t785, qJ(2) * t425 + t365 * t640 + t377 * t639 - t752, pkin(1) * t547 - pkin(6) * t715 + qJ(2) * t357 + t387 * t640, t728, t779, -t775, t723, t464 * t640 + t465 * t639, t725, qJ(2) * t427 + t342 * t640 + t348 * t639 - t752, pkin(1) * t518 + t355 * t640 + t362 * t639 + t773, pkin(1) * t521 + t358 * t640 + t363 * t639 - t785, pkin(1) * t416 + qJ(2) * t333 + t320 * t640 + t331 * t639, t411 * t640 + t413 * t639, t372 * t640 + t373 * t639, t381 * t640 + t383 * t639, t410 * t640 + t412 * t639, t380 * t640 + t382 * t639, t438 * t640 + t439 * t639, -pkin(1) * t422 + qJ(2) * t339 + t301 * t640 + t303 * t639, -pkin(1) * t431 + qJ(2) * t341 + t302 * t640 + t304 * t639, -pkin(1) * t392 + qJ(2) * t335 + t293 * t640 + t297 * t639, -pkin(1) * t313 + qJ(2) * t295 + t285 * t640 + t287 * t639;];
tauB_reg = t1;
