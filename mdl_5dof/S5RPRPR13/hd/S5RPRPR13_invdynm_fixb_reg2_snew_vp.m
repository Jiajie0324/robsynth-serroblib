% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRPR13
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:33
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRPR13_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR13_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR13_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR13_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR13_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRPR13_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:33:17
% EndTime: 2019-12-31 18:33:36
% DurationCPUTime: 20.06s
% Computational Cost: add. (44192->628), mult. (108332->786), div. (0->0), fcn. (76735->8), ass. (0->416)
t1170 = qJD(3) ^ 2;
t1161 = sin(pkin(8));
t1162 = cos(pkin(8));
t1165 = sin(qJ(3));
t1168 = cos(qJ(3));
t1200 = t1161 * t1168 + t1162 * t1165;
t1130 = t1200 * qJD(1);
t1281 = t1130 ^ 2;
t1108 = t1281 + t1170;
t1262 = qJD(1) * t1161;
t1128 = -t1168 * t1162 * qJD(1) + t1165 * t1262;
t1254 = t1130 * t1128;
t1314 = qJDD(3) + t1254;
t1324 = t1165 * t1314;
t1024 = t1168 * t1108 + t1324;
t1322 = t1168 * t1314;
t1030 = -t1165 * t1108 + t1322;
t953 = t1162 * t1024 + t1161 * t1030;
t1344 = pkin(1) * t953;
t1343 = qJ(2) * t953;
t962 = t1161 * t1024 - t1162 * t1030;
t1342 = qJ(2) * t962;
t1166 = sin(qJ(1));
t1123 = t1128 ^ 2;
t1107 = t1170 - t1123;
t1022 = -t1165 * t1107 + t1322;
t1029 = t1168 * t1107 + t1324;
t958 = t1161 * t1022 + t1162 * t1029;
t1341 = t1166 * t958;
t1340 = t1166 * t962;
t1169 = cos(qJ(1));
t1339 = t1169 * t958;
t1338 = t1169 * t962;
t1292 = -t1281 + t1170;
t1315 = qJDD(3) - t1254;
t1323 = t1165 * t1315;
t1025 = t1168 * t1292 + t1323;
t1321 = t1168 * t1315;
t1031 = -t1165 * t1292 + t1321;
t961 = t1161 * t1025 - t1162 * t1031;
t1337 = t1166 * t961;
t1336 = t1169 * t961;
t1335 = pkin(2) * t1024;
t1334 = pkin(6) * t1024;
t1333 = pkin(6) * t1030;
t951 = t1162 * t1022 - t1161 * t1029;
t1074 = -t1170 - t1123;
t1004 = t1165 * t1074 + t1321;
t1007 = -t1168 * t1074 + t1323;
t924 = t1162 * t1004 - t1161 * t1007;
t1332 = pkin(1) * t924;
t1331 = qJ(2) * t924;
t927 = t1161 * t1004 + t1162 * t1007;
t1330 = qJ(2) * t927;
t1329 = t1166 * t927;
t1328 = t1169 * t927;
t954 = t1162 * t1025 + t1161 * t1031;
t1327 = pkin(2) * t1004;
t1326 = pkin(6) * t1004;
t1325 = pkin(6) * t1007;
t1116 = t1128 * qJD(3);
t1127 = t1200 * qJDD(1);
t1085 = t1127 - t1116;
t1046 = -t1116 + t1085;
t1297 = qJ(4) * t1046;
t1171 = qJD(1) ^ 2;
t1142 = t1166 * g(1) - t1169 * g(2);
t1209 = -qJDD(2) + t1142;
t1157 = t1161 ^ 2;
t1158 = t1162 ^ 2;
t1231 = t1157 + t1158;
t1075 = (t1231 * pkin(6) + qJ(2)) * t1171 + (pkin(2) * t1162 + pkin(1)) * qJDD(1) + t1209;
t1255 = t1130 * qJD(3);
t1316 = pkin(3) * t1255 - 0.2e1 * qJD(4) * t1130 - t1075;
t1293 = -t1123 - t1281;
t1313 = pkin(1) * t1293;
t1312 = pkin(2) * t1293;
t1164 = sin(qJ(5));
t1167 = cos(qJ(5));
t1097 = t1164 * qJD(3) - t1167 * t1128;
t1099 = t1167 * qJD(3) + t1164 * t1128;
t1050 = t1099 * t1097;
t1072 = qJDD(5) + t1085;
t1295 = -t1050 + t1072;
t1311 = t1164 * t1295;
t1291 = t1281 - t1123;
t1309 = t1166 * t1291;
t1308 = t1166 * t1293;
t1307 = t1167 * t1295;
t1305 = t1169 * t1291;
t1304 = t1169 * t1293;
t1252 = t1130 * t1168;
t1257 = t1128 * t1165;
t1190 = (-t1252 - t1257) * qJD(3);
t1253 = t1130 * t1165;
t1256 = t1128 * t1168;
t1191 = (t1253 - t1256) * qJD(3);
t1286 = -t1161 * t1190 + t1162 * t1191;
t1303 = t1166 * qJDD(3) + t1169 * t1286;
t1221 = t1169 * t1254;
t1203 = -qJD(3) * t1253 + t1168 * t1085;
t1205 = qJD(3) * t1252 + t1165 * t1085;
t1283 = -t1161 * t1205 + t1162 * t1203;
t1302 = t1166 * t1283 - t1221;
t1150 = t1161 * qJDD(1);
t1152 = t1162 * qJDD(1);
t1126 = t1165 * t1150 - t1168 * t1152;
t1083 = t1126 + t1255;
t1195 = qJD(3) * t1256 + t1165 * t1083;
t1204 = qJD(3) * t1257 - t1168 * t1083;
t1285 = -t1161 * t1204 + t1162 * t1195;
t1301 = t1166 * t1285 + t1221;
t1300 = -t1169 * qJDD(3) + t1166 * t1286;
t1223 = t1166 * t1254;
t1299 = t1169 * t1283 + t1223;
t1298 = t1169 * t1285 - t1223;
t1102 = t1130 * pkin(4) - qJD(3) * pkin(7);
t1174 = -t1297 + t1316;
t1279 = pkin(3) + pkin(7);
t897 = -t1123 * pkin(4) + t1279 * t1083 - t1130 * t1102 + t1174;
t1045 = t1116 + t1085;
t1071 = t1128 * pkin(3) - t1130 * qJ(4);
t1143 = t1169 * g(1) + t1166 * g(2);
t1132 = -t1171 * pkin(1) + qJDD(1) * qJ(2) - t1143;
t1249 = t1162 * t1171;
t1269 = pkin(6) * qJDD(1);
t1270 = t1162 * g(3);
t1053 = -t1270 - 0.2e1 * qJD(2) * t1262 + (pkin(2) * t1249 - t1132 - t1269) * t1161;
t1153 = t1158 * t1171;
t1217 = 0.2e1 * qJD(1) * qJD(2) + t1132;
t1271 = t1161 * g(3);
t1057 = -pkin(2) * t1153 - t1271 + (t1217 + t1269) * t1162;
t989 = -t1168 * t1053 + t1165 * t1057;
t939 = -qJDD(3) * pkin(3) - t1170 * qJ(4) + t1130 * t1071 + qJDD(4) + t989;
t899 = t1045 * pkin(4) - pkin(7) * t1315 + t939;
t856 = t1164 * t897 - t1167 * t899;
t857 = t1164 * t899 + t1167 * t897;
t822 = t1164 * t857 - t1167 * t856;
t1016 = -t1097 * qJD(5) + t1167 * qJDD(3) + t1164 * t1083;
t1120 = qJD(5) + t1130;
t1058 = t1120 * t1097;
t1296 = t1016 - t1058;
t1289 = t1171 * t1231;
t1214 = t1164 * qJDD(3) - t1167 * t1083;
t981 = (qJD(5) - t1120) * t1099 + t1214;
t1287 = t1161 * t1191 + t1162 * t1190;
t1284 = t1161 * t1195 + t1162 * t1204;
t1282 = t1161 * t1203 + t1162 * t1205;
t1095 = t1097 ^ 2;
t1096 = t1099 ^ 2;
t1118 = t1120 ^ 2;
t1280 = 0.2e1 * qJD(4);
t990 = t1165 * t1053 + t1168 * t1057;
t916 = t1165 * t990 - t1168 * t989;
t1278 = pkin(2) * t916;
t1277 = pkin(4) * t822;
t1181 = -t1170 * pkin(3) + qJDD(3) * qJ(4) - t1128 * t1071 + t990;
t904 = -t1083 * pkin(4) - t1123 * pkin(7) + (t1280 + t1102) * qJD(3) + t1181;
t1276 = pkin(4) * t904;
t983 = t1016 + t1058;
t907 = -t1164 * t981 - t1167 * t983;
t1275 = pkin(4) * t907;
t1274 = pkin(7) * t822;
t1043 = t1083 - t1255;
t1008 = -t1165 * t1043 - t1168 * t1127;
t1273 = pkin(2) * t1008;
t1272 = pkin(3) * t1168;
t1268 = qJDD(1) * pkin(1);
t937 = qJD(3) * t1280 + t1181;
t1267 = -pkin(3) * t939 + qJ(4) * t937;
t1266 = t1161 * t916;
t1265 = t1162 * t916;
t1263 = t1164 * t904;
t901 = t1167 * t904;
t1260 = t1120 * t1099;
t1259 = t1120 * t1164;
t1258 = t1120 * t1167;
t1251 = t1157 * t1171;
t1250 = t1161 * t1162;
t1002 = t1050 + t1072;
t1248 = t1164 * t1002;
t1247 = t1165 * t1046;
t1245 = t1165 * t1075;
t1121 = t1171 * qJ(2) + t1209 + t1268;
t1242 = t1166 * t1121;
t1241 = t1167 * t1002;
t1044 = t1083 + t1255;
t1240 = t1168 * t1044;
t1238 = t1168 * t1075;
t1235 = t1169 * t1121;
t1233 = -pkin(3) * t1045 - qJ(4) * t1126;
t1232 = -t1096 + t1118;
t1230 = t1166 * qJDD(1);
t1229 = t1169 * qJDD(1);
t1227 = -t1096 - t1118;
t941 = t1167 * t1227 - t1248;
t1225 = -pkin(7) * t941 + t901;
t1224 = t1165 * t1050;
t1222 = t1168 * t1050;
t1220 = qJ(4) * t1165 + pkin(2);
t1219 = t1161 * t1152;
t1218 = t1121 + t1268;
t917 = t1165 * t989 + t1168 * t990;
t1091 = t1217 * t1161 + t1270;
t1092 = t1217 * t1162 - t1271;
t1019 = t1161 * t1091 + t1162 * t1092;
t1215 = -t1166 * t1142 - t1169 * t1143;
t878 = t1165 * t937 - t1168 * t939;
t1213 = pkin(2) * t878 + t1267;
t1212 = -pkin(3) * t822 + qJ(4) * t904 - t1274;
t1010 = -t1168 * t1045 - t1165 * t1126;
t1211 = pkin(2) * t1010 + t1233;
t1141 = -t1166 * t1171 + t1229;
t1210 = -pkin(5) * t1141 - t1166 * g(3);
t1208 = pkin(4) * t1296 - t1263;
t980 = (qJD(5) + t1120) * t1099 + t1214;
t1207 = pkin(4) * t980 + t901;
t1020 = -t1118 - t1095;
t928 = t1164 * t1020 + t1307;
t1206 = -pkin(7) * t928 + t1263;
t1202 = -pkin(3) * t941 + qJ(4) * t1296 + t1225;
t823 = t1164 * t856 + t1167 * t857;
t1018 = t1162 * t1091 - t1161 * t1092;
t1201 = t1169 * t1142 - t1166 * t1143;
t1140 = t1169 * t1171 + t1230;
t1199 = -pkin(4) * t928 + t856;
t1198 = -pkin(7) * t907 - t822;
t1197 = -t989 + t1327;
t818 = t1165 * t904 - t1168 * t822;
t1196 = pkin(2) * t818 + t1212;
t1134 = t1162 * t1289;
t1194 = -t1166 * t1134 + t1162 * t1229;
t1193 = t1169 * t1134 + t1162 * t1230;
t1192 = -pkin(3) * t928 + qJ(4) * t980 + t1206;
t891 = t1165 * t1296 - t1168 * t941;
t1189 = pkin(2) * t891 + t1202;
t1188 = -pkin(4) * t941 + t857;
t1014 = -t1095 - t1096;
t1187 = pkin(4) * t1014 - t823;
t1186 = -t990 - t1335;
t1185 = -pkin(3) * t907 + qJ(4) * t1014 + t1198;
t886 = t1165 * t980 - t1168 * t928;
t1184 = pkin(2) * t886 + t1192;
t880 = t1165 * t1014 - t1168 * t907;
t1182 = pkin(2) * t880 + t1185;
t1180 = -pkin(3) * t1315 - qJ(4) * t1074 + t939;
t1178 = t1180 - t1327;
t1177 = pkin(3) * t1108 + qJ(4) * t1314 + t937;
t1176 = t1177 + t1335;
t1175 = -t1083 * pkin(3) - t1316;
t1151 = t1158 * qJDD(1);
t1149 = t1157 * qJDD(1);
t1145 = t1161 * t1249;
t1144 = 0.2e1 * t1219;
t1139 = -t1153 + t1251;
t1138 = t1153 + t1251;
t1137 = t1151 - t1149;
t1136 = t1151 + t1149;
t1133 = t1161 * t1289;
t1122 = -pkin(5) * t1140 + t1169 * g(3);
t1101 = t1141 * t1250;
t1100 = t1140 * t1250;
t1094 = t1169 * t1133 + t1161 * t1230;
t1093 = t1166 * t1133 - t1161 * t1229;
t1084 = t1127 - 0.2e1 * t1116;
t1082 = t1126 + 0.2e1 * t1255;
t1056 = -qJ(2) * t1134 + t1218 * t1162;
t1055 = qJ(2) * t1133 - t1218 * t1161;
t1054 = t1095 - t1118;
t1047 = t1096 - t1095;
t1015 = -t1099 * qJD(5) - t1214;
t1013 = t1165 * t1045 - t1168 * t1126;
t1012 = -t1168 * t1082 - t1165 * t1084;
t1011 = -t1168 * t1043 + t1165 * t1127;
t1009 = -t1165 * t1082 + t1168 * t1084;
t998 = pkin(1) * t1121 + qJ(2) * t1019;
t997 = (-t1097 * t1167 + t1099 * t1164) * t1120;
t996 = (-t1097 * t1164 - t1099 * t1167) * t1120;
t991 = pkin(1) * t1138 + qJ(2) * t1136 + t1019;
t987 = -t1238 + t1334;
t986 = -t1240 - t1247;
t985 = -t1165 * t1044 + t1168 * t1046;
t975 = -t1245 - t1326;
t974 = t1167 * t1016 - t1099 * t1259;
t973 = t1164 * t1016 + t1099 * t1258;
t972 = t1164 * t1015 - t1097 * t1258;
t971 = -t1167 * t1015 - t1097 * t1259;
t950 = t1168 * t1072 + t1165 * t996;
t949 = t1165 * t1072 - t1168 * t996;
t948 = t1167 * t1054 - t1248;
t947 = -t1164 * t1232 + t1307;
t946 = t1164 * t1054 + t1241;
t945 = t1167 * t1232 + t1311;
t944 = -pkin(2) * t1084 - t1245 - t1333;
t943 = -pkin(2) * t1082 + t1238 - t1325;
t942 = -t1164 * t1227 - t1241;
t936 = -t1161 * t1010 + t1162 * t1013;
t935 = -t1161 * t1009 + t1162 * t1012;
t934 = -t1161 * t1008 + t1162 * t1011;
t933 = t1162 * t1010 + t1161 * t1013;
t932 = t1162 * t1009 + t1161 * t1012;
t931 = t1162 * t1008 + t1161 * t1011;
t929 = t1167 * t1020 - t1311;
t923 = t1175 + t1297;
t921 = t1165 * t973 + t1222;
t920 = -t1165 * t971 - t1222;
t919 = -t1168 * t973 + t1224;
t918 = t1168 * t971 - t1224;
t915 = -qJ(4) * t1293 + t939;
t914 = -pkin(3) * t1293 + t937;
t913 = (t1044 + t1083) * pkin(3) + t1174;
t912 = t1175 + 0.2e1 * t1297;
t911 = -t1161 * t985 + t1162 * t986;
t910 = t1161 * t986 + t1162 * t985;
t909 = t1164 * t983 - t1167 * t981;
t908 = -t1164 * t1296 - t1167 * t980;
t906 = -t1164 * t980 + t1167 * t1296;
t902 = pkin(2) * t1075 + pkin(6) * t917;
t900 = -pkin(1) * t931 - t1273;
t896 = t1165 * t945 + t1168 * t983;
t895 = t1165 * t946 - t1168 * t981;
t894 = t1165 * t983 - t1168 * t945;
t893 = -t1165 * t981 - t1168 * t946;
t892 = t1165 * t941 + t1168 * t1296;
t890 = -pkin(6) * t1008 - t916;
t889 = -t1161 * t949 + t1162 * t950;
t888 = t1161 * t950 + t1162 * t949;
t887 = t1165 * t928 + t1168 * t980;
t885 = t1168 * t1047 + t1165 * t906;
t884 = t1165 * t1047 - t1168 * t906;
t883 = -t1186 + t1344;
t882 = -pkin(1) * t933 - t1211;
t881 = t1168 * t1014 + t1165 * t907;
t879 = t1165 * t939 + t1168 * t937;
t877 = pkin(6) * t1011 - t1312 + t917;
t876 = -t1197 - t1332;
t875 = -pkin(3) * t1247 + t1168 * t912 - t1334;
t874 = qJ(4) * t1240 - t1165 * t913 + t1326;
t873 = -t1161 * t919 + t1162 * t921;
t872 = -t1161 * t918 + t1162 * t920;
t871 = t1161 * t921 + t1162 * t919;
t870 = t1161 * t920 + t1162 * t918;
t869 = -t1161 * t944 + t1162 * t987 + t1343;
t868 = t1333 + t1165 * t912 + (pkin(2) + t1272) * t1046;
t867 = t1162 * t917 - t1266;
t866 = t1161 * t917 + t1265;
t865 = t1220 * t1044 + t1168 * t913 + t1325;
t864 = -t1176 - t1344;
t863 = -pkin(1) * t1084 + t1161 * t987 + t1162 * t944 + t1342;
t862 = -t1161 * t943 + t1162 * t975 - t1331;
t861 = -qJ(4) * t909 + t1275;
t860 = -t1178 + t1332;
t859 = -pkin(1) * t1082 + t1161 * t975 + t1162 * t943 - t1330;
t858 = -pkin(6) * t1010 - t1165 * t914 + t1168 * t915;
t853 = -t1161 * t894 + t1162 * t896;
t852 = -t1161 * t893 + t1162 * t895;
t851 = t1161 * t896 + t1162 * t894;
t850 = t1161 * t895 + t1162 * t893;
t849 = pkin(6) * t1013 + t1165 * t915 + t1168 * t914 - t1312;
t848 = -t1161 * t891 + t1162 * t892;
t847 = t1161 * t892 + t1162 * t891;
t846 = -t1161 * t886 + t1162 * t887;
t845 = t1161 * t887 + t1162 * t886;
t844 = -t1161 * t884 + t1162 * t885;
t843 = t1161 * t885 + t1162 * t884;
t842 = -pkin(1) * t866 - t1278;
t841 = -t1161 * t880 + t1162 * t881;
t840 = t1161 * t881 + t1162 * t880;
t839 = -t1161 * t878 + t1162 * t879;
t838 = t1161 * t879 + t1162 * t878;
t837 = -pkin(6) * t878 + (-pkin(3) * t1165 + qJ(4) * t1168) * t923;
t836 = -t1279 * t942 + t1208;
t835 = -t1279 * t929 + t1207;
t834 = -qJ(2) * t931 - t1161 * t877 + t1162 * t890;
t833 = -qJ(4) * t942 - t1188;
t832 = pkin(6) * t879 + (t1220 + t1272) * t923;
t831 = qJ(2) * t934 + t1161 * t890 + t1162 * t877 - t1313;
t830 = -qJ(4) * t929 - t1199;
t829 = -pkin(6) * t1265 - qJ(2) * t866 - t1161 * t902;
t828 = -t1161 * t868 + t1162 * t875 - t1343;
t827 = pkin(1) * t1075 - pkin(6) * t1266 + qJ(2) * t867 + t1162 * t902;
t826 = pkin(1) * t1046 + t1161 * t875 + t1162 * t868 - t1342;
t825 = -t1161 * t865 + t1162 * t874 + t1331;
t824 = pkin(1) * t1044 + t1161 * t874 + t1162 * t865 + t1330;
t820 = -qJ(2) * t933 - t1161 * t849 + t1162 * t858;
t819 = t1165 * t822 + t1168 * t904;
t817 = qJ(2) * t936 + t1161 * t858 + t1162 * t849 - t1313;
t816 = -pkin(1) * t838 - t1213;
t815 = -pkin(1) * t847 - t1189;
t814 = -pkin(1) * t845 - t1184;
t813 = -t1279 * t909 + t1187;
t812 = -pkin(6) * t891 - t1165 * t836 + t1168 * t833;
t811 = -pkin(6) * t886 - t1165 * t835 + t1168 * t830;
t810 = -pkin(2) * t942 + pkin(6) * t892 + t1165 * t833 + t1168 * t836;
t809 = -pkin(2) * t929 + pkin(6) * t887 + t1165 * t830 + t1168 * t835;
t808 = -qJ(4) * t823 + t1277;
t807 = -qJ(2) * t838 - t1161 * t832 + t1162 * t837;
t806 = -t1279 * t823 + t1276;
t805 = pkin(1) * t923 + qJ(2) * t839 + t1161 * t837 + t1162 * t832;
t804 = -pkin(6) * t880 - t1165 * t813 + t1168 * t861;
t803 = -pkin(1) * t840 - t1182;
t802 = -t1161 * t818 + t1162 * t819;
t801 = t1161 * t819 + t1162 * t818;
t800 = -pkin(2) * t909 + pkin(6) * t881 + t1165 * t861 + t1168 * t813;
t799 = -qJ(2) * t847 - t1161 * t810 + t1162 * t812;
t798 = -qJ(2) * t845 - t1161 * t809 + t1162 * t811;
t797 = -pkin(1) * t942 + qJ(2) * t848 + t1161 * t812 + t1162 * t810;
t796 = -pkin(1) * t929 + qJ(2) * t846 + t1161 * t811 + t1162 * t809;
t795 = -qJ(2) * t840 - t1161 * t800 + t1162 * t804;
t794 = -pkin(6) * t818 - t1165 * t806 + t1168 * t808;
t793 = -pkin(1) * t909 + qJ(2) * t841 + t1161 * t804 + t1162 * t800;
t792 = -pkin(1) * t801 - t1196;
t791 = -pkin(2) * t823 + pkin(6) * t819 + t1165 * t808 + t1168 * t806;
t790 = -qJ(2) * t801 - t1161 * t791 + t1162 * t794;
t789 = -pkin(1) * t823 + qJ(2) * t802 + t1161 * t794 + t1162 * t791;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1141, 0, -t1140, 0, t1210, -t1122, -t1201, -pkin(5) * t1201, t1101, t1169 * t1137 + t1166 * t1139, t1094, -t1101, t1193, 0, -pkin(5) * t1194 - t1166 * t1091 - t1161 * t1235, -pkin(5) * t1093 - t1166 * t1092 - t1162 * t1235, t1169 * t1018 - pkin(5) * (t1166 * t1136 + t1169 * t1138), -pkin(5) * (t1166 * t1019 + t1235) - (t1166 * pkin(1) - t1169 * qJ(2)) * t1018, t1299, t1169 * t935 + t1309, t1166 * t1127 - t1336, t1298, -t1166 * t1126 - t1339, t1303, t1169 * t862 - t1166 * t876 - pkin(5) * (-t1169 * t1082 - t1329), t1169 * t869 - t1166 * t883 - pkin(5) * (-t1169 * t1084 + t1340), t1169 * t834 - t1166 * t900 - pkin(5) * (t1166 * t934 - t1304), t1169 * t829 - t1166 * t842 - pkin(5) * (t1169 * t1075 + t1166 * t867), t1303, -t1166 * t1045 + t1336, t1166 * t1043 + t1339, t1299, t1169 * t911 + t1309, t1298, t1169 * t820 - t1166 * t882 - pkin(5) * (t1166 * t936 - t1304), t1169 * t825 - t1166 * t860 - pkin(5) * (t1169 * t1044 + t1329), t1169 * t828 - t1166 * t864 - pkin(5) * (t1169 * t1046 - t1340), t1169 * t807 - t1166 * t816 - pkin(5) * (t1166 * t839 + t1169 * t923), t1166 * t974 + t1169 * t873, t1166 * t908 + t1169 * t844, t1166 * t947 + t1169 * t853, -t1166 * t972 + t1169 * t872, t1166 * t948 + t1169 * t852, t1166 * t997 + t1169 * t889, t1169 * t798 - t1166 * t814 - pkin(5) * (t1166 * t846 - t1169 * t929), t1169 * t799 - t1166 * t815 - pkin(5) * (t1166 * t848 - t1169 * t942), t1169 * t795 - t1166 * t803 - pkin(5) * (t1166 * t841 - t1169 * t909), t1169 * t790 - t1166 * t792 - pkin(5) * (t1166 * t802 - t1169 * t823); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1140, 0, t1141, 0, t1122, t1210, t1215, pkin(5) * t1215, t1100, t1166 * t1137 - t1169 * t1139, t1093, -t1100, -t1194, 0, -pkin(5) * t1193 + t1169 * t1091 - t1161 * t1242, pkin(5) * t1094 + t1169 * t1092 - t1162 * t1242, t1166 * t1018 + pkin(5) * (t1169 * t1136 - t1166 * t1138), pkin(5) * (t1169 * t1019 - t1242) - (-t1169 * pkin(1) - t1166 * qJ(2)) * t1018, t1302, t1166 * t935 - t1305, -t1169 * t1127 - t1337, t1301, t1169 * t1126 - t1341, t1300, t1166 * t862 + t1169 * t876 + pkin(5) * (t1166 * t1082 - t1328), t1166 * t869 + t1169 * t883 + pkin(5) * (t1166 * t1084 + t1338), t1166 * t834 + t1169 * t900 + pkin(5) * (t1169 * t934 + t1308), t1166 * t829 + t1169 * t842 + pkin(5) * (-t1166 * t1075 + t1169 * t867), t1300, t1169 * t1045 + t1337, -t1169 * t1043 + t1341, t1302, t1166 * t911 - t1305, t1301, t1166 * t820 + t1169 * t882 + pkin(5) * (t1169 * t936 + t1308), t1166 * t825 + t1169 * t860 + pkin(5) * (-t1166 * t1044 + t1328), t1166 * t828 + t1169 * t864 + pkin(5) * (-t1166 * t1046 - t1338), t1166 * t807 + t1169 * t816 + pkin(5) * (-t1166 * t923 + t1169 * t839), t1166 * t873 - t1169 * t974, t1166 * t844 - t1169 * t908, t1166 * t853 - t1169 * t947, t1166 * t872 + t1169 * t972, t1166 * t852 - t1169 * t948, t1166 * t889 - t1169 * t997, t1166 * t798 + t1169 * t814 + pkin(5) * (t1166 * t929 + t1169 * t846), t1166 * t799 + t1169 * t815 + pkin(5) * (t1166 * t942 + t1169 * t848), t1166 * t795 + t1169 * t803 + pkin(5) * (t1166 * t909 + t1169 * t841), t1166 * t790 + t1169 * t792 + pkin(5) * (t1166 * t823 + t1169 * t802); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1142, t1143, 0, 0, t1149, t1144, 0, t1151, 0, 0, t1056, t1055, t991, t998, t1282, t932, t954, t1284, t951, t1287, t859, t863, t831, t827, t1287, -t954, -t951, t1282, t910, t1284, t817, t824, t826, t805, t871, t843, t851, t870, t850, t888, t796, t797, t793, t789; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1171, 0, 0, -g(3), -t1142, 0, t1219, t1137, t1133, -t1219, t1134, 0, -t1161 * t1121, -t1162 * t1121, t1018, qJ(2) * t1018, t1283, t935, -t961, t1285, -t958, t1286, t862, t869, t834, t829, t1286, t961, t958, t1283, t911, t1285, t820, t825, t828, t807, t873, t844, t853, t872, t852, t889, t798, t799, t795, t790; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1171, 0, qJDD(1), 0, g(3), 0, -t1143, 0, t1145, -t1139, -t1150, -t1145, -t1152, 0, t1091, t1092, 0, pkin(1) * t1018, -t1254, -t1291, -t1127, t1254, t1126, -qJDD(3), t876, t883, t900, t842, -qJDD(3), t1045, -t1043, -t1254, -t1291, t1254, t882, t860, t864, t816, -t974, -t908, -t947, t972, -t948, -t997, t814, t815, t803, t792; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1142, t1143, 0, 0, t1149, t1144, 0, t1151, 0, 0, t1056, t1055, t991, t998, t1282, t932, t954, t1284, t951, t1287, t859, t863, t831, t827, t1287, -t954, -t951, t1282, t910, t1284, t817, t824, t826, t805, t871, t843, t851, t870, t850, t888, t796, t797, t793, t789; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1150, t1152, t1145, 0, t1153, 0, 0, -t1121, t1091, 0, t1203, t1012, t1031, t1195, -t1029, t1191, t975, t987, t890, -pkin(6) * t916, t1191, -t1031, t1029, t1203, t986, t1195, t858, t874, t875, t837, t921, t885, t896, t920, t895, t950, t811, t812, t804, t794; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1150, -t1251, t1152, -t1145, 0, t1121, 0, t1092, 0, t1205, t1009, t1025, t1204, t1022, t1190, t943, t944, t877, t902, t1190, -t1025, -t1022, t1205, t985, t1204, t849, t865, t868, t832, t919, t884, t894, t918, t893, t949, t809, t810, t800, t791; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1145, t1139, t1150, t1145, t1152, 0, -t1091, -t1092, 0, 0, t1254, t1291, t1127, -t1254, -t1126, qJDD(3), t1197, t1186, t1273, t1278, qJDD(3), -t1045, t1043, t1254, t1291, -t1254, t1211, t1178, t1176, t1213, t974, t908, t947, -t972, t948, t997, t1184, t1189, t1182, t1196; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1085, -t1082, t1315, t1116, -t1107, -t1116, 0, -t1075, t989, 0, -t1116, -t1315, t1107, t1085, -t1044, t1116, t915, qJ(4) * t1044, t912, qJ(4) * t923, t1050, t1047, t983, -t1050, -t981, t1072, t830, t833, t861, t808; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1255, t1084, t1292, -t1083, t1314, -t1255, t1075, 0, t990, 0, -t1255, -t1292, -t1314, t1255, t1046, -t1083, t914, t913, pkin(3) * t1046, pkin(3) * t923, -t973, -t906, -t945, t971, -t946, -t996, t835, t836, t813, t806; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1254, t1291, t1127, -t1254, -t1126, qJDD(3), -t989, -t990, 0, 0, qJDD(3), -t1045, t1043, t1254, t1291, -t1254, t1233, t1180, t1177, t1267, t974, t908, t947, -t972, t948, t997, t1192, t1202, t1185, t1212; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t1045, t1043, t1254, t1291, -t1254, 0, t939, t937, 0, t974, t908, t947, -t972, t948, t997, t1206, t1225, t1198, -t1274; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1116, t1315, -t1107, -t1085, t1044, -t1116, -t939, 0, -t923, 0, -t1050, -t1047, -t983, t1050, t981, -t1072, t1199, t1188, -t1275, -t1277; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1255, t1292, t1314, -t1255, -t1046, t1083, -t937, t923, 0, 0, t973, t906, t945, -t971, t946, t996, pkin(7) * t929 - t1207, pkin(7) * t942 - t1208, pkin(7) * t909 - t1187, pkin(7) * t823 - t1276; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1016, -t980, t1295, t1058, t1054, -t1058, 0, t904, t856, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1260, t1296, t1232, t1015, t1002, -t1260, -t904, 0, t857, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1050, t1047, t983, -t1050, -t981, t1072, -t856, -t857, 0, 0;];
m_new_reg = t1;
