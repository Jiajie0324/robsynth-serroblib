% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRPR13
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:33
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRPR13_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR13_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR13_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR13_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR13_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRPR13_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:33:36
% EndTime: 2019-12-31 18:33:39
% DurationCPUTime: 3.19s
% Computational Cost: add. (7074->232), mult. (17448->267), div. (0->0), fcn. (12458->8), ass. (0->155)
t1493 = sin(qJ(3));
t1496 = cos(qJ(3));
t1490 = cos(pkin(8));
t1531 = qJD(1) * t1490;
t1489 = sin(pkin(8));
t1532 = qJD(1) * t1489;
t1464 = t1493 * t1532 - t1496 * t1531;
t1507 = t1489 * t1496 + t1490 * t1493;
t1466 = t1507 * qJD(1);
t1526 = t1466 * t1464;
t1438 = -qJDD(3) - t1526;
t1498 = qJD(3) ^ 2;
t1534 = t1466 ^ 2;
t1451 = t1498 + t1534;
t1419 = t1493 * t1438 - t1496 * t1451;
t1421 = t1496 * t1438 + t1493 * t1451;
t1395 = t1489 * t1419 - t1490 * t1421;
t1494 = sin(qJ(1));
t1497 = cos(qJ(1));
t1528 = t1464 * qJD(3);
t1541 = t1507 * qJDD(1);
t1504 = t1541 - 0.2e1 * t1528;
t1554 = t1494 * t1395 + t1497 * t1504;
t1553 = t1497 * t1395 - t1494 * t1504;
t1461 = t1464 ^ 2;
t1433 = -t1498 - t1461;
t1510 = qJDD(3) - t1526;
t1405 = t1493 * t1433 + t1496 * t1510;
t1408 = -t1496 * t1433 + t1493 * t1510;
t1382 = t1489 * t1405 + t1490 * t1408;
t1552 = t1494 * t1382;
t1551 = t1497 * t1382;
t1394 = t1490 * t1419 + t1489 * t1421;
t1499 = qJD(1) ^ 2;
t1475 = t1494 * g(1) - t1497 * g(2);
t1509 = -qJDD(2) + t1475;
t1485 = t1489 ^ 2;
t1486 = t1490 ^ 2;
t1519 = t1485 + t1486;
t1434 = (t1519 * pkin(6) + qJ(2)) * t1499 + (pkin(2) * t1490 + pkin(1)) * qJDD(1) + t1509;
t1442 = t1541 - t1528;
t1527 = t1466 * qJD(3);
t1550 = pkin(3) * t1527 + (-t1442 + t1528) * qJ(4) - 0.2e1 * qJD(4) * t1466 - t1434;
t1549 = -qJDD(5) - t1442;
t1379 = t1490 * t1405 - t1489 * t1408;
t1548 = t1493 * t1541;
t1542 = -t1461 - t1534;
t1547 = t1494 * t1542;
t1546 = t1496 * t1541;
t1545 = t1497 * t1542;
t1472 = t1519 * t1499;
t1492 = sin(qJ(5));
t1495 = cos(qJ(5));
t1446 = t1492 * qJD(3) - t1495 * t1464;
t1537 = t1446 ^ 2;
t1448 = t1495 * qJD(3) + t1492 * t1464;
t1536 = t1448 ^ 2;
t1459 = qJD(5) + t1466;
t1535 = t1459 ^ 2;
t1533 = 0.2e1 * qJD(4);
t1529 = t1448 * t1446;
t1525 = t1486 * t1499;
t1524 = t1490 * t1499;
t1521 = qJD(5) - t1459;
t1520 = qJD(5) + t1459;
t1518 = t1489 * qJDD(1);
t1482 = t1490 * qJDD(1);
t1517 = t1494 * qJDD(1);
t1516 = t1497 * qJDD(1);
t1514 = -t1535 - t1536;
t1513 = -t1490 * g(3) - 0.2e1 * qJD(2) * t1532;
t1476 = -t1497 * g(1) - t1494 * g(2);
t1468 = -t1499 * pkin(1) + qJDD(1) * qJ(2) + t1476;
t1429 = (pkin(2) * t1524 - pkin(6) * qJDD(1) - t1468) * t1489 + t1513;
t1445 = -t1489 * g(3) + 0.2e1 * qJD(2) * t1531 + t1490 * t1468;
t1430 = -pkin(2) * t1525 + pkin(6) * t1482 + t1445;
t1401 = t1496 * t1429 - t1493 * t1430;
t1462 = -t1496 * t1482 + t1493 * t1518;
t1440 = t1462 + t1527;
t1511 = -t1492 * qJDD(3) + t1495 * t1440;
t1449 = t1466 * pkin(4) - qJD(3) * pkin(7);
t1371 = -t1461 * pkin(4) - t1466 * t1449 + (pkin(3) + pkin(7)) * t1440 + t1550;
t1432 = t1464 * pkin(3) - t1466 * qJ(4);
t1390 = -qJDD(3) * pkin(3) - t1498 * qJ(4) + t1466 * t1432 + qJDD(4) - t1401;
t1372 = -t1510 * pkin(7) + (t1442 + t1528) * pkin(4) + t1390;
t1508 = -t1492 * t1371 + t1495 * t1372;
t1402 = t1493 * t1429 + t1496 * t1430;
t1506 = -t1495 * qJDD(3) - t1492 * t1440;
t1505 = t1521 * t1446 + t1506;
t1503 = -t1498 * pkin(3) + qJDD(3) * qJ(4) - t1464 * t1432 + t1402;
t1502 = -t1529 - t1549;
t1477 = t1489 * t1524;
t1474 = -t1497 * t1499 - t1517;
t1473 = -t1494 * t1499 + t1516;
t1471 = t1519 * qJDD(1);
t1470 = t1490 * t1472;
t1469 = t1489 * t1472;
t1460 = qJDD(1) * pkin(1) + t1499 * qJ(2) + t1509;
t1444 = -t1489 * t1468 + t1513;
t1439 = t1462 + 0.2e1 * t1527;
t1423 = -t1440 + t1527;
t1422 = t1440 + t1527;
t1416 = -t1535 - t1537;
t1415 = -t1489 * t1444 + t1490 * t1445;
t1414 = t1490 * t1444 + t1489 * t1445;
t1413 = -t1536 - t1537;
t1412 = -t1496 * t1462 + t1548;
t1411 = t1496 * t1423 + t1548;
t1410 = -t1493 * t1462 - t1546;
t1409 = t1493 * t1423 - t1546;
t1404 = -t1529 + t1549;
t1400 = -t1520 * t1446 - t1506;
t1399 = -t1521 * t1448 + t1511;
t1398 = t1520 * t1448 - t1511;
t1392 = t1495 * t1404 - t1492 * t1514;
t1391 = t1492 * t1404 + t1495 * t1514;
t1389 = qJD(3) * t1533 + t1503;
t1388 = -t1489 * t1410 + t1490 * t1412;
t1387 = -t1489 * t1409 + t1490 * t1411;
t1386 = t1490 * t1410 + t1489 * t1412;
t1385 = t1490 * t1409 + t1489 * t1411;
t1384 = t1495 * t1416 - t1492 * t1502;
t1383 = t1492 * t1416 + t1495 * t1502;
t1378 = -t1440 * pkin(3) - t1550;
t1377 = -t1493 * t1401 + t1496 * t1402;
t1376 = t1496 * t1401 + t1493 * t1402;
t1375 = t1495 * t1399 - t1492 * t1505;
t1374 = t1492 * t1399 + t1495 * t1505;
t1373 = -t1440 * pkin(4) - t1461 * pkin(7) + (t1533 + t1449) * qJD(3) + t1503;
t1370 = t1493 * t1391 + t1496 * t1400;
t1369 = -t1496 * t1391 + t1493 * t1400;
t1368 = t1493 * t1383 + t1496 * t1398;
t1367 = -t1496 * t1383 + t1493 * t1398;
t1366 = t1493 * t1374 + t1496 * t1413;
t1365 = -t1496 * t1374 + t1493 * t1413;
t1364 = t1496 * t1389 + t1493 * t1390;
t1363 = t1493 * t1389 - t1496 * t1390;
t1362 = -t1489 * t1376 + t1490 * t1377;
t1361 = t1490 * t1376 + t1489 * t1377;
t1360 = t1495 * t1371 + t1492 * t1372;
t1358 = -t1489 * t1369 + t1490 * t1370;
t1357 = t1490 * t1369 + t1489 * t1370;
t1356 = -t1489 * t1367 + t1490 * t1368;
t1355 = t1490 * t1367 + t1489 * t1368;
t1354 = -t1489 * t1365 + t1490 * t1366;
t1353 = t1490 * t1365 + t1489 * t1366;
t1352 = -t1489 * t1363 + t1490 * t1364;
t1351 = t1490 * t1363 + t1489 * t1364;
t1350 = t1495 * t1360 - t1492 * t1508;
t1349 = t1492 * t1360 + t1495 * t1508;
t1348 = t1493 * t1349 + t1496 * t1373;
t1347 = -t1496 * t1349 + t1493 * t1373;
t1346 = -t1489 * t1347 + t1490 * t1348;
t1345 = t1490 * t1347 + t1489 * t1348;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1474, -t1473, 0, -t1494 * t1475 + t1497 * t1476, 0, 0, 0, 0, 0, 0, -t1497 * t1470 - t1490 * t1517, t1497 * t1469 + t1489 * t1517, t1497 * t1471 - t1494 * t1472, t1497 * t1415 - t1494 * t1460, 0, 0, 0, 0, 0, 0, t1494 * t1439 - t1551, -t1553, t1497 * t1387 + t1547, t1497 * t1362 - t1494 * t1434, 0, 0, 0, 0, 0, 0, t1497 * t1388 + t1547, -t1494 * t1422 + t1551, t1553, t1497 * t1352 - t1494 * t1378, 0, 0, 0, 0, 0, 0, t1497 * t1356 + t1494 * t1384, t1497 * t1358 + t1494 * t1392, t1497 * t1354 + t1494 * t1375, t1497 * t1346 + t1494 * t1350; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1473, t1474, 0, t1497 * t1475 + t1494 * t1476, 0, 0, 0, 0, 0, 0, -t1494 * t1470 + t1490 * t1516, t1494 * t1469 - t1489 * t1516, t1494 * t1471 + t1497 * t1472, t1494 * t1415 + t1497 * t1460, 0, 0, 0, 0, 0, 0, -t1497 * t1439 - t1552, -t1554, t1494 * t1387 - t1545, t1494 * t1362 + t1497 * t1434, 0, 0, 0, 0, 0, 0, t1494 * t1388 - t1545, t1497 * t1422 + t1552, t1554, t1494 * t1352 + t1497 * t1378, 0, 0, 0, 0, 0, 0, t1494 * t1356 - t1497 * t1384, t1494 * t1358 - t1497 * t1392, t1494 * t1354 - t1497 * t1375, t1494 * t1346 - t1497 * t1350; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1414, 0, 0, 0, 0, 0, 0, t1379, t1394, t1385, t1361, 0, 0, 0, 0, 0, 0, t1386, -t1379, -t1394, t1351, 0, 0, 0, 0, 0, 0, t1355, t1357, t1353, t1345; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1499, -qJDD(1), 0, t1476, 0, 0, 0, 0, 0, 0, -t1470, t1469, t1471, t1415, 0, 0, 0, 0, 0, 0, -t1382, -t1395, t1387, t1362, 0, 0, 0, 0, 0, 0, t1388, t1382, t1395, t1352, 0, 0, 0, 0, 0, 0, t1356, t1358, t1354, t1346; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1499, 0, t1475, 0, 0, 0, 0, 0, 0, t1482, -t1518, t1472, t1460, 0, 0, 0, 0, 0, 0, -t1439, -t1504, -t1542, t1434, 0, 0, 0, 0, 0, 0, -t1542, t1422, t1504, t1378, 0, 0, 0, 0, 0, 0, -t1384, -t1392, -t1375, -t1350; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1414, 0, 0, 0, 0, 0, 0, t1379, t1394, t1385, t1361, 0, 0, 0, 0, 0, 0, t1386, -t1379, -t1394, t1351, 0, 0, 0, 0, 0, 0, t1355, t1357, t1353, t1345; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1525, t1477, t1482, t1445, 0, 0, 0, 0, 0, 0, -t1408, t1421, t1411, t1377, 0, 0, 0, 0, 0, 0, t1412, t1408, -t1421, t1364, 0, 0, 0, 0, 0, 0, t1368, t1370, t1366, t1348; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1477, -t1485 * t1499, -t1518, t1444, 0, 0, 0, 0, 0, 0, t1405, t1419, t1409, t1376, 0, 0, 0, 0, 0, 0, t1410, -t1405, -t1419, t1363, 0, 0, 0, 0, 0, 0, t1367, t1369, t1365, t1347; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1482, t1518, -t1472, -t1460, 0, 0, 0, 0, 0, 0, t1439, t1504, t1542, -t1434, 0, 0, 0, 0, 0, 0, t1542, -t1422, -t1504, -t1378, 0, 0, 0, 0, 0, 0, t1384, t1392, t1375, t1350; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1433, t1438, t1423, t1402, 0, 0, 0, 0, 0, 0, -t1462, -t1433, -t1438, t1389, 0, 0, 0, 0, 0, 0, t1398, t1400, t1413, t1373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1510, -t1451, -t1541, t1401, 0, 0, 0, 0, 0, 0, -t1541, -t1510, t1451, -t1390, 0, 0, 0, 0, 0, 0, -t1383, -t1391, -t1374, -t1349; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1439, t1504, t1542, -t1434, 0, 0, 0, 0, 0, 0, t1542, -t1422, -t1504, -t1378, 0, 0, 0, 0, 0, 0, t1384, t1392, t1375, t1350; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1542, -t1422, -t1504, -t1378, 0, 0, 0, 0, 0, 0, t1384, t1392, t1375, t1350; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1462, t1433, t1438, -t1389, 0, 0, 0, 0, 0, 0, -t1398, -t1400, -t1413, -t1373; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1541, t1510, -t1451, t1390, 0, 0, 0, 0, 0, 0, t1383, t1391, t1374, t1349; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1416, t1404, t1399, t1360; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1502, t1514, t1505, t1508; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1398, t1400, t1413, t1373;];
f_new_reg = t1;
