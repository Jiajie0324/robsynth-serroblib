% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:20
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRPR7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR7_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR7_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR7_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR7_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:19:57
% EndTime: 2019-12-31 18:20:09
% DurationCPUTime: 11.55s
% Computational Cost: add. (41121->602), mult. (89298->919), div. (0->0), fcn. (59427->10), ass. (0->414)
t622 = sin(qJ(1));
t625 = cos(qJ(1));
t588 = t625 * g(1) + t622 * g(2);
t627 = qJD(1) ^ 2;
t572 = -t627 * pkin(1) - t588;
t615 = sin(pkin(8));
t617 = cos(pkin(8));
t587 = t622 * g(1) - t625 * g(2);
t631 = qJDD(1) * pkin(1) + t587;
t516 = t615 * t572 - t617 * t631;
t517 = t617 * t572 + t615 * t631;
t641 = t615 * t516 + t617 * t517;
t454 = t617 * t516 - t615 * t517;
t661 = t625 * t454;
t700 = -t622 * t641 + t661;
t669 = t622 * t454;
t392 = t625 * t641 + t669;
t577 = t615 * qJDD(1) + t617 * t627;
t578 = t617 * qJDD(1) - t615 * t627;
t521 = -t622 * t577 + t625 * t578;
t611 = g(3) - qJDD(2);
t548 = qJ(2) * t577 - t617 * t611;
t632 = -qJ(2) * t578 - t615 * t611;
t699 = -pkin(5) * t521 + t622 * t548 + t625 * t632;
t614 = sin(pkin(9));
t616 = cos(pkin(9));
t624 = cos(qJ(3));
t658 = qJD(1) * t624;
t621 = sin(qJ(3));
t659 = qJD(1) * t621;
t559 = t614 * t659 - t616 * t658;
t561 = t614 * t658 + t616 * t659;
t515 = t561 * t559;
t687 = qJDD(3) - t515;
t698 = t614 * t687;
t697 = t616 * t687;
t620 = sin(qJ(5));
t623 = cos(qJ(5));
t532 = -t623 * qJD(3) + t620 * t561;
t534 = t620 * qJD(3) + t623 * t561;
t477 = t534 * t532;
t652 = qJD(1) * qJD(3);
t643 = t624 * t652;
t650 = t621 * qJDD(1);
t574 = t643 + t650;
t604 = t624 * qJDD(1);
t644 = t621 * t652;
t575 = t604 - t644;
t639 = t614 * t574 - t616 * t575;
t633 = qJDD(5) + t639;
t689 = -t477 + t633;
t696 = t620 * t689;
t695 = t623 * t689;
t656 = qJD(3) * t561;
t478 = t639 + t656;
t688 = t625 * t577 + t622 * t578;
t693 = pkin(5) * t688 + t625 * t548 - t622 * t632;
t519 = t616 * t574 + t614 * t575;
t460 = -t532 * qJD(5) + t620 * qJDD(3) + t623 * t519;
t555 = qJD(5) + t559;
t495 = t555 * t532;
t419 = -t495 + t460;
t640 = -t623 * qJDD(3) + t620 * t519;
t416 = (qJD(5) - t555) * t534 + t640;
t530 = t532 ^ 2;
t531 = t534 ^ 2;
t554 = t555 ^ 2;
t557 = t559 ^ 2;
t558 = t561 ^ 2;
t685 = 2 * qJD(4);
t684 = pkin(4) * t614;
t683 = t555 * t620;
t682 = t555 * t623;
t609 = t621 ^ 2;
t681 = t609 * t627;
t610 = t624 ^ 2;
t607 = t610 * t627;
t497 = -qJDD(1) * pkin(2) - t627 * pkin(6) + t516;
t584 = qJD(3) * pkin(3) - qJ(4) * t659;
t451 = -t575 * pkin(3) - qJ(4) * t607 + t584 * t659 + qJDD(4) + t497;
t680 = t614 * t451;
t510 = qJDD(3) + t515;
t679 = t614 * t510;
t678 = t616 * t451;
t677 = t616 * t510;
t506 = t559 * pkin(4) - t561 * pkin(7);
t626 = qJD(3) ^ 2;
t630 = -t627 * pkin(2) + qJDD(1) * pkin(6) + t517;
t486 = -t621 * t611 + t624 * t630;
t445 = -pkin(3) * t607 + t575 * qJ(4) - qJD(3) * t584 + t486;
t629 = t621 * t630;
t670 = t621 * t627;
t628 = -t629 - t574 * qJ(4) + qJDD(3) * pkin(3) + (pkin(3) * t670 + qJ(4) * t652 - t611) * t624;
t642 = t614 * t445 - t616 * t628;
t349 = -qJDD(3) * pkin(4) - t626 * pkin(7) + (t685 + t506) * t561 + t642;
t676 = t620 * t349;
t442 = t477 + t633;
t675 = t620 * t442;
t373 = t561 * t685 + t642;
t374 = -0.2e1 * qJD(4) * t559 + t616 * t445 + t614 * t628;
t321 = -t616 * t373 + t614 * t374;
t674 = t621 * t321;
t673 = t621 * t497;
t596 = t624 * t670;
t585 = qJDD(3) + t596;
t672 = t621 * t585;
t586 = qJDD(3) - t596;
t671 = t621 * t586;
t666 = t623 * t349;
t665 = t623 * t442;
t664 = t624 * t321;
t663 = t624 * t497;
t662 = t624 * t586;
t350 = -t626 * pkin(4) + qJDD(3) * pkin(7) - t559 * t506 + t374;
t657 = qJD(3) * t559;
t637 = -t519 + t657;
t377 = t478 * pkin(4) + t637 * pkin(7) + t451;
t315 = t623 * t350 + t620 * t377;
t660 = t609 + t610;
t655 = qJD(3) * t614;
t654 = qJD(3) * t616;
t651 = t617 * qJDD(3);
t649 = t614 * t477;
t648 = t615 * t515;
t647 = t616 * t477;
t646 = t617 * t515;
t645 = -pkin(4) * t616 - pkin(3);
t314 = t620 * t350 - t623 * t377;
t322 = t614 * t373 + t616 * t374;
t484 = t624 * t611 + t629;
t428 = t621 * t484 + t624 * t486;
t529 = -t622 * t587 - t625 * t588;
t636 = t615 * t596;
t635 = t617 * t596;
t581 = t625 * qJDD(1) - t622 * t627;
t634 = -pkin(5) * t581 - t622 * g(3);
t270 = -t623 * t314 + t620 * t315;
t271 = t620 * t314 + t623 * t315;
t427 = t624 * t484 - t621 * t486;
t528 = t625 * t587 - t622 * t588;
t480 = -t639 + t656;
t600 = t615 * qJDD(3);
t595 = -t607 - t626;
t594 = t607 - t626;
t593 = -t626 - t681;
t592 = t626 - t681;
t583 = t607 - t681;
t582 = t607 + t681;
t580 = t622 * qJDD(1) + t625 * t627;
t579 = t660 * qJDD(1);
t576 = t604 - 0.2e1 * t644;
t573 = 0.2e1 * t643 + t650;
t570 = t624 * t585;
t569 = t660 * t652;
t556 = -pkin(5) * t580 + t625 * g(3);
t551 = -t558 - t626;
t550 = -t558 + t626;
t549 = t557 - t626;
t544 = t624 * t574 - t609 * t652;
t543 = -t621 * t575 - t610 * t652;
t542 = t617 * t569 + t600;
t541 = t615 * t569 - t651;
t540 = -t621 * t593 - t662;
t539 = -t621 * t592 + t570;
t538 = t624 * t595 - t672;
t537 = t624 * t594 - t671;
t536 = t624 * t593 - t671;
t535 = t621 * t595 + t570;
t526 = t617 * t579 - t615 * t582;
t525 = t615 * t579 + t617 * t582;
t520 = -t621 * t573 + t624 * t576;
t513 = -t558 + t557;
t508 = -t626 - t557;
t505 = t617 * t544 - t636;
t504 = t617 * t543 + t636;
t503 = t615 * t544 + t635;
t502 = t615 * t543 - t635;
t501 = t617 * t539 + t615 * t650;
t500 = t617 * t537 + t615 * t604;
t499 = t615 * t539 - t617 * t650;
t498 = t615 * t537 - t617 * t604;
t494 = (-t559 * t616 + t561 * t614) * qJD(3);
t493 = (-t559 * t614 - t561 * t616) * qJD(3);
t492 = t617 * t540 + t615 * t573;
t491 = t617 * t538 - t615 * t576;
t490 = t615 * t540 - t617 * t573;
t489 = t615 * t538 + t617 * t576;
t488 = -t531 + t554;
t487 = t530 - t554;
t485 = t617 * t520 - t615 * t583;
t483 = t615 * t520 + t617 * t583;
t482 = -t519 - t657;
t476 = -t557 - t558;
t475 = -t531 + t530;
t473 = t616 * t519 - t561 * t655;
t472 = t614 * t519 + t561 * t654;
t471 = t559 * t654 + t614 * t639;
t470 = t559 * t655 - t616 * t639;
t469 = -t531 - t554;
t468 = -t614 * t551 - t677;
t467 = -t614 * t550 + t697;
t466 = t616 * t549 - t679;
t465 = t616 * t551 - t679;
t464 = t616 * t550 + t698;
t463 = t614 * t549 + t677;
t462 = -t622 * t525 + t625 * t526;
t461 = t625 * t525 + t622 * t526;
t459 = -t534 * qJD(5) - t640;
t458 = -pkin(6) * t536 + t663;
t457 = -pkin(6) * t535 + t673;
t456 = -t554 - t530;
t450 = -pkin(2) * t536 + t486;
t449 = -pkin(2) * t535 + t484;
t448 = t530 + t531;
t447 = t616 * t508 - t698;
t446 = t614 * t508 + t697;
t444 = pkin(1) * t611 + qJ(2) * t641;
t437 = (-t532 * t623 + t534 * t620) * t555;
t436 = (t532 * t620 + t534 * t623) * t555;
t435 = -t621 * t493 + t624 * t494;
t434 = -t622 * t490 + t625 * t492;
t433 = -t622 * t489 + t625 * t491;
t432 = t625 * t490 + t622 * t492;
t431 = t625 * t489 + t622 * t491;
t430 = t617 * t435 + t600;
t429 = t615 * t435 - t651;
t425 = t616 * t480 - t614 * t482;
t424 = -t616 * t478 + t614 * t637;
t423 = t614 * t480 + t616 * t482;
t422 = -t614 * t478 - t616 * t637;
t420 = -t495 - t460;
t417 = (-qJD(5) - t555) * t534 - t640;
t415 = t623 * t460 - t534 * t683;
t414 = -t620 * t460 - t534 * t682;
t413 = -t620 * t459 + t532 * t682;
t412 = -t623 * t459 - t532 * t683;
t411 = -t621 * t472 + t624 * t473;
t410 = -t621 * t470 + t624 * t471;
t409 = -t621 * t465 + t624 * t468;
t408 = -t621 * t464 + t624 * t467;
t407 = -t621 * t463 + t624 * t466;
t406 = t624 * t465 + t621 * t468;
t405 = t616 * t437 + t614 * t633;
t404 = t614 * t437 - t616 * t633;
t403 = t623 * t487 - t675;
t402 = -t620 * t488 + t695;
t401 = -t620 * t487 - t665;
t400 = -t623 * t488 - t696;
t399 = -qJ(2) * t525 + t617 * t427;
t398 = qJ(2) * t526 + t615 * t427;
t397 = -qJ(4) * t465 + t678;
t396 = t617 * t428 + t615 * t497;
t395 = t615 * t428 - t617 * t497;
t394 = -t620 * t469 - t665;
t393 = t623 * t469 - t675;
t390 = -qJ(4) * t446 + t680;
t389 = t623 * t456 - t696;
t388 = t620 * t456 + t695;
t387 = t617 * t411 + t648;
t386 = t617 * t410 - t648;
t385 = t615 * t411 - t646;
t384 = t615 * t410 + t646;
t383 = -t621 * t446 + t624 * t447;
t382 = t624 * t446 + t621 * t447;
t381 = t616 * t415 + t649;
t380 = t616 * t413 - t649;
t379 = t614 * t415 - t647;
t378 = t614 * t413 + t647;
t372 = t617 * t409 - t615 * t637;
t371 = t617 * t408 - t615 * t482;
t370 = t617 * t407 + t480 * t615;
t369 = t615 * t409 + t617 * t637;
t368 = t615 * t408 + t617 * t482;
t367 = t615 * t407 - t480 * t617;
t365 = pkin(3) * t637 + qJ(4) * t468 + t680;
t364 = -qJ(2) * t490 - t615 * t450 + t617 * t458;
t363 = -qJ(2) * t489 - t615 * t449 + t617 * t457;
t362 = -pkin(3) * t478 + qJ(4) * t447 - t678;
t361 = -t621 * t423 + t624 * t425;
t360 = -t621 * t422 + t624 * t424;
t359 = t624 * t423 + t621 * t425;
t358 = t617 * t383 + t615 * t478;
t357 = t615 * t383 - t617 * t478;
t356 = -pkin(1) * t536 + qJ(2) * t492 + t617 * t450 + t615 * t458;
t355 = -pkin(1) * t535 + qJ(2) * t491 + t617 * t449 + t615 * t457;
t354 = -t416 * t623 - t620 * t420;
t353 = t623 * t417 - t620 * t419;
t352 = -t416 * t620 + t623 * t420;
t351 = -t620 * t417 - t623 * t419;
t347 = t616 * t403 - t614 * t416;
t346 = t616 * t402 - t614 * t420;
t345 = t614 * t403 + t616 * t416;
t344 = t614 * t402 + t616 * t420;
t343 = t617 * t360 - t615 * t513;
t342 = t615 * t360 + t617 * t513;
t341 = t616 * t394 + t419 * t614;
t340 = t614 * t394 - t419 * t616;
t339 = -t621 * t404 + t624 * t405;
t338 = t616 * t389 - t614 * t417;
t337 = t614 * t389 + t616 * t417;
t336 = t617 * t361 + t615 * t476;
t335 = t615 * t361 - t617 * t476;
t334 = t616 * t353 - t614 * t475;
t333 = t614 * t353 + t616 * t475;
t332 = -t622 * t395 + t625 * t396;
t331 = t625 * t395 + t622 * t396;
t330 = t616 * t354 - t614 * t448;
t329 = t614 * t354 + t616 * t448;
t328 = -pkin(2) * t359 - pkin(3) * t423;
t327 = -t621 * t379 + t624 * t381;
t326 = -t621 * t378 + t624 * t380;
t325 = t617 * t339 - t615 * t436;
t324 = t615 * t339 + t617 * t436;
t323 = -qJ(2) * t395 - (pkin(2) * t615 - pkin(6) * t617) * t427;
t320 = -pkin(2) * t406 - pkin(3) * t465 + t374;
t319 = -t622 * t369 + t625 * t372;
t318 = t625 * t369 + t622 * t372;
t317 = -pkin(7) * t393 + t666;
t316 = -pkin(7) * t388 + t676;
t313 = -pkin(2) * t382 - pkin(3) * t446 + t373;
t312 = -t622 * t357 + t625 * t358;
t311 = t625 * t357 + t622 * t358;
t310 = -pkin(3) * t451 + qJ(4) * t322;
t309 = -pkin(6) * t406 - t621 * t365 + t624 * t397;
t308 = qJ(2) * t396 - (-pkin(2) * t617 - pkin(6) * t615 - pkin(1)) * t427;
t307 = t617 * t327 - t615 * t414;
t306 = t617 * t326 - t615 * t412;
t305 = t615 * t327 + t617 * t414;
t304 = t615 * t326 + t617 * t412;
t303 = -qJ(4) * t423 - t321;
t302 = -t621 * t345 + t624 * t347;
t301 = -t621 * t344 + t624 * t346;
t300 = -pkin(6) * t382 - t621 * t362 + t624 * t390;
t299 = -pkin(3) * t476 + qJ(4) * t425 + t322;
t298 = -t621 * t340 + t624 * t341;
t297 = t624 * t340 + t621 * t341;
t296 = -t621 * t337 + t624 * t338;
t295 = t624 * t337 + t621 * t338;
t294 = -t622 * t335 + t625 * t336;
t293 = t625 * t335 + t622 * t336;
t292 = -t621 * t333 + t624 * t334;
t291 = -pkin(4) * t393 + t315;
t290 = -pkin(4) * t388 + t314;
t289 = -t621 * t329 + t624 * t330;
t288 = t624 * t329 + t621 * t330;
t287 = t617 * t302 - t615 * t401;
t286 = t617 * t301 - t615 * t400;
t285 = t615 * t302 + t617 * t401;
t284 = t615 * t301 + t617 * t400;
t283 = t617 * t298 + t615 * t393;
t282 = t615 * t298 - t617 * t393;
t281 = t617 * t296 + t615 * t388;
t280 = t615 * t296 - t617 * t388;
t279 = t624 * t322 - t674;
t278 = t621 * t322 + t664;
t277 = t617 * t292 - t615 * t351;
t276 = t615 * t292 + t617 * t351;
t275 = t617 * t279 + t615 * t451;
t274 = t615 * t279 - t617 * t451;
t273 = t617 * t289 + t615 * t352;
t272 = t615 * t289 - t617 * t352;
t269 = -qJ(2) * t369 + t617 * t309 - t615 * t320;
t268 = -pkin(7) * t352 - t270;
t267 = t616 * t271 + t614 * t349;
t266 = t614 * t271 - t616 * t349;
t265 = -pkin(2) * t278 - pkin(3) * t321;
t264 = -pkin(1) * t406 + qJ(2) * t372 + t615 * t309 + t617 * t320;
t263 = -qJ(2) * t357 + t617 * t300 - t615 * t313;
t262 = -pkin(6) * t359 - t621 * t299 + t624 * t303;
t261 = -qJ(4) * t340 - t614 * t291 + t616 * t317;
t260 = -qJ(4) * t337 - t614 * t290 + t616 * t316;
t259 = -pkin(2) * t297 - pkin(3) * t340 + pkin(4) * t419 - pkin(7) * t394 - t676;
t258 = -pkin(2) * t295 - pkin(3) * t337 - pkin(4) * t417 - pkin(7) * t389 + t666;
t257 = -pkin(1) * t382 + qJ(2) * t358 + t615 * t300 + t617 * t313;
t256 = -pkin(3) * t393 + qJ(4) * t341 + t616 * t291 + t614 * t317;
t255 = -t622 * t282 + t625 * t283;
t254 = t625 * t282 + t622 * t283;
t253 = -pkin(3) * t388 + qJ(4) * t338 + t616 * t290 + t614 * t316;
t252 = -t622 * t280 + t625 * t281;
t251 = t625 * t280 + t622 * t281;
t250 = -pkin(6) * t278 - qJ(4) * t664 - t621 * t310;
t249 = -qJ(4) * t329 + t616 * t268 + t352 * t684;
t248 = -t622 * t274 + t625 * t275;
t247 = t625 * t274 + t622 * t275;
t246 = -t622 * t272 + t625 * t273;
t245 = t625 * t272 + t622 * t273;
t244 = qJ(4) * t330 + t614 * t268 + t645 * t352;
t243 = -qJ(2) * t335 + t617 * t262 - t615 * t328;
t242 = -pkin(1) * t359 + qJ(2) * t336 + t615 * t262 + t617 * t328;
t241 = -pkin(2) * t288 - pkin(3) * t329 - pkin(4) * t448 - pkin(7) * t354 - t271;
t240 = -t621 * t266 + t624 * t267;
t239 = t624 * t266 + t621 * t267;
t238 = -qJ(4) * t266 + (-pkin(7) * t616 + t684) * t270;
t237 = t617 * t240 + t615 * t270;
t236 = t615 * t240 - t617 * t270;
t235 = -pkin(6) * t297 - t621 * t256 + t624 * t261;
t234 = -pkin(6) * t295 - t621 * t253 + t624 * t260;
t233 = -qJ(2) * t274 + t617 * t250 - t615 * t265;
t232 = qJ(4) * t267 + (-pkin(7) * t614 + t645) * t270;
t231 = -pkin(6) * t288 - t621 * t244 + t624 * t249;
t230 = -pkin(1) * t278 + qJ(2) * t275 + t615 * t250 + t617 * t265;
t229 = -pkin(2) * t239 - pkin(3) * t266 + pkin(4) * t349 - pkin(7) * t271;
t228 = -qJ(2) * t282 + t617 * t235 - t615 * t259;
t227 = -qJ(2) * t280 + t617 * t234 - t615 * t258;
t226 = -pkin(1) * t297 + qJ(2) * t283 + t615 * t235 + t617 * t259;
t225 = -pkin(1) * t295 + qJ(2) * t281 + t615 * t234 + t617 * t258;
t224 = -t622 * t236 + t625 * t237;
t223 = t625 * t236 + t622 * t237;
t222 = -qJ(2) * t272 + t617 * t231 - t615 * t241;
t221 = -pkin(1) * t288 + qJ(2) * t273 + t615 * t231 + t617 * t241;
t220 = -pkin(6) * t239 - t621 * t232 + t624 * t238;
t219 = -qJ(2) * t236 + t617 * t220 - t615 * t229;
t218 = -pkin(1) * t239 + qJ(2) * t237 + t615 * t220 + t617 * t229;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t580, -t581, 0, t529, 0, 0, 0, 0, 0, 0, -t688, -t521, 0, t392, 0, 0, 0, 0, 0, 0, t433, t434, t462, t332, 0, 0, 0, 0, 0, 0, t312, t319, t294, t248, 0, 0, 0, 0, 0, 0, t252, t255, t246, t224; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t581, -t580, 0, t528, 0, 0, 0, 0, 0, 0, t521, -t688, 0, -t700, 0, 0, 0, 0, 0, 0, t431, t432, t461, t331, 0, 0, 0, 0, 0, 0, t311, t318, t293, t247, 0, 0, 0, 0, 0, 0, t251, t254, t245, t223; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t611, 0, 0, 0, 0, 0, 0, t535, t536, 0, -t427, 0, 0, 0, 0, 0, 0, t382, t406, t359, t278, 0, 0, 0, 0, 0, 0, t295, t297, t288, t239; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t581, 0, -t580, 0, t634, -t556, -t528, -pkin(5) * t528, 0, 0, t521, 0, -t688, 0, t699, t693, t700, pkin(5) * t700 + qJ(2) * t661 - t622 * t444, -t622 * t503 + t625 * t505, -t622 * t483 + t625 * t485, -t622 * t499 + t625 * t501, -t622 * t502 + t625 * t504, -t622 * t498 + t625 * t500, -t622 * t541 + t625 * t542, -pkin(5) * t431 - t622 * t355 + t625 * t363, -pkin(5) * t432 - t622 * t356 + t625 * t364, -pkin(5) * t461 - t622 * t398 + t625 * t399, -pkin(5) * t331 - t622 * t308 + t625 * t323, -t622 * t385 + t625 * t387, -t622 * t342 + t625 * t343, -t622 * t368 + t625 * t371, -t622 * t384 + t625 * t386, -t622 * t367 + t625 * t370, -t622 * t429 + t625 * t430, -pkin(5) * t311 - t622 * t257 + t625 * t263, -pkin(5) * t318 - t622 * t264 + t625 * t269, -pkin(5) * t293 - t622 * t242 + t625 * t243, -pkin(5) * t247 - t622 * t230 + t625 * t233, -t622 * t305 + t625 * t307, -t622 * t276 + t625 * t277, -t622 * t284 + t625 * t286, -t622 * t304 + t625 * t306, -t622 * t285 + t625 * t287, -t622 * t324 + t625 * t325, -pkin(5) * t251 - t622 * t225 + t625 * t227, -pkin(5) * t254 - t622 * t226 + t625 * t228, -pkin(5) * t245 - t622 * t221 + t625 * t222, -pkin(5) * t223 - t622 * t218 + t625 * t219; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t580, 0, t581, 0, t556, t634, t529, pkin(5) * t529, 0, 0, t688, 0, t521, 0, -t693, t699, t392, pkin(5) * t392 + qJ(2) * t669 + t625 * t444, t625 * t503 + t622 * t505, t625 * t483 + t622 * t485, t625 * t499 + t622 * t501, t625 * t502 + t622 * t504, t625 * t498 + t622 * t500, t625 * t541 + t622 * t542, pkin(5) * t433 + t625 * t355 + t622 * t363, pkin(5) * t434 + t625 * t356 + t622 * t364, pkin(5) * t462 + t625 * t398 + t622 * t399, pkin(5) * t332 + t625 * t308 + t622 * t323, t625 * t385 + t622 * t387, t625 * t342 + t622 * t343, t625 * t368 + t622 * t371, t625 * t384 + t622 * t386, t625 * t367 + t622 * t370, t625 * t429 + t622 * t430, pkin(5) * t312 + t625 * t257 + t622 * t263, pkin(5) * t319 + t625 * t264 + t622 * t269, pkin(5) * t294 + t625 * t242 + t622 * t243, pkin(5) * t248 + t625 * t230 + t622 * t233, t625 * t305 + t622 * t307, t625 * t276 + t622 * t277, t625 * t284 + t622 * t286, t625 * t304 + t622 * t306, t625 * t285 + t622 * t287, t625 * t324 + t622 * t325, pkin(5) * t252 + t625 * t225 + t622 * t227, pkin(5) * t255 + t625 * t226 + t622 * t228, pkin(5) * t246 + t625 * t221 + t622 * t222, pkin(5) * t224 + t625 * t218 + t622 * t219; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t587, t588, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t578 - t516, -pkin(1) * t577 - t517, 0, -pkin(1) * t454, (t574 + t643) * t621, t624 * t573 + t621 * t576, t624 * t592 + t672, (t575 - t644) * t624, t621 * t594 + t662, 0, pkin(1) * t489 + pkin(2) * t576 + pkin(6) * t538 - t663, pkin(1) * t490 - pkin(2) * t573 + pkin(6) * t540 + t673, pkin(1) * t525 + pkin(2) * t582 + pkin(6) * t579 + t428, pkin(1) * t395 - pkin(2) * t497 + pkin(6) * t428, t624 * t472 + t621 * t473, t624 * t422 + t621 * t424, t624 * t464 + t621 * t467, t624 * t470 + t621 * t471, t624 * t463 + t621 * t466, t624 * t493 + t621 * t494, pkin(1) * t357 - pkin(2) * t478 + pkin(6) * t383 + t624 * t362 + t621 * t390, pkin(1) * t369 + pkin(2) * t637 + pkin(6) * t409 + t624 * t365 + t621 * t397, pkin(1) * t335 - pkin(2) * t476 + pkin(6) * t361 + t624 * t299 + t621 * t303, pkin(1) * t274 - pkin(2) * t451 + pkin(6) * t279 - qJ(4) * t674 + t624 * t310, t624 * t379 + t621 * t381, t624 * t333 + t621 * t334, t624 * t344 + t621 * t346, t624 * t378 + t621 * t380, t624 * t345 + t621 * t347, t624 * t404 + t621 * t405, pkin(1) * t280 - pkin(2) * t388 + pkin(6) * t296 + t624 * t253 + t621 * t260, pkin(1) * t282 - pkin(2) * t393 + pkin(6) * t298 + t624 * t256 + t621 * t261, pkin(1) * t272 - pkin(2) * t352 + pkin(6) * t289 + t624 * t244 + t621 * t249, pkin(1) * t236 - pkin(2) * t270 + pkin(6) * t240 + t624 * t232 + t621 * t238;];
tauB_reg = t1;
