% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRPR7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:20
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRPR7_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR7_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR7_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR7_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR7_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR7_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:20:09
% EndTime: 2019-12-31 18:20:24
% DurationCPUTime: 15.23s
% Computational Cost: add. (70487->650), mult. (153068->925), div. (0->0), fcn. (101445->10), ass. (0->455)
t1158 = cos(qJ(1));
t1155 = sin(qJ(1));
t1124 = g(1) * t1158 + g(2) * t1155;
t1160 = qJD(1) ^ 2;
t1107 = -pkin(1) * t1160 - t1124;
t1148 = sin(pkin(8));
t1150 = cos(pkin(8));
t1123 = g(1) * t1155 - g(2) * t1158;
t1168 = qJDD(1) * pkin(1) + t1123;
t1047 = t1148 * t1107 - t1150 * t1168;
t1048 = t1150 * t1107 + t1148 * t1168;
t1185 = t1047 * t1148 + t1048 * t1150;
t977 = t1047 * t1150 - t1048 * t1148;
t1231 = t1155 * t977;
t1259 = t1158 * t1185 + t1231;
t1228 = t1158 * t977;
t1258 = -t1155 * t1185 + t1228;
t1147 = sin(pkin(9));
t1149 = cos(pkin(9));
t1157 = cos(qJ(3));
t1224 = qJD(1) * t1157;
t1154 = sin(qJ(3));
t1225 = qJD(1) * t1154;
t1094 = t1147 * t1225 - t1149 * t1224;
t1096 = t1147 * t1224 + t1149 * t1225;
t1046 = t1096 * t1094;
t1245 = qJDD(3) - t1046;
t1257 = t1147 * t1245;
t1256 = t1149 * t1245;
t1153 = sin(qJ(5));
t1156 = cos(qJ(5));
t1061 = -qJD(3) * t1156 + t1096 * t1153;
t1063 = qJD(3) * t1153 + t1096 * t1156;
t1003 = t1063 * t1061;
t1135 = qJD(3) * t1224;
t1205 = t1154 * qJDD(1);
t1110 = t1135 + t1205;
t1195 = qJD(3) * t1225;
t1204 = t1157 * qJDD(1);
t1165 = -t1195 + t1204;
t1183 = t1110 * t1147 - t1149 * t1165;
t1045 = qJDD(5) + t1183;
t1247 = -t1003 + t1045;
t1255 = t1153 * t1247;
t1254 = t1156 * t1247;
t1223 = qJD(3) * t1096;
t1004 = t1183 + t1223;
t1113 = qJDD(1) * t1148 + t1150 * t1160;
t1144 = g(3) - qJDD(2);
t1081 = qJ(2) * t1113 - t1144 * t1150;
t1114 = qJDD(1) * t1150 - t1148 * t1160;
t1171 = -qJ(2) * t1114 - t1144 * t1148;
t1246 = t1113 * t1158 + t1114 * t1155;
t1253 = pkin(5) * t1246 + t1158 * t1081 - t1155 * t1171;
t1053 = -t1113 * t1155 + t1114 * t1158;
t1252 = -pkin(5) * t1053 + t1155 * t1081 + t1158 * t1171;
t1038 = pkin(4) * t1094 - pkin(7) * t1096;
t1159 = qJD(3) ^ 2;
t1222 = qJD(4) * t1094;
t1085 = -0.2e1 * t1222;
t1163 = -t1160 * pkin(2) + qJDD(1) * pkin(6) + t1048;
t1162 = t1154 * t1163;
t1210 = t1154 * t1160;
t1226 = qJD(1) * qJD(3);
t1161 = -t1162 - t1110 * qJ(4) + qJDD(3) * pkin(3) + (pkin(3) * t1210 + qJ(4) * t1226 - t1144) * t1157;
t1012 = -t1144 * t1154 + t1157 * t1163;
t1120 = qJD(3) * pkin(3) - qJ(4) * t1225;
t1243 = t1157 ^ 2;
t1141 = t1243 * t1160;
t965 = -pkin(3) * t1141 + qJ(4) * t1165 - qJD(3) * t1120 + t1012;
t1236 = t1147 * t1161 + t1149 * t965;
t882 = t1085 + t1236;
t852 = -pkin(4) * t1159 + qJDD(3) * pkin(7) - t1038 * t1094 + t882;
t1050 = t1110 * t1149 + t1147 * t1165;
t1088 = qJD(3) * t1094;
t1007 = -t1088 + t1050;
t1029 = -qJDD(1) * pkin(2) - pkin(6) * t1160 + t1047;
t974 = -pkin(3) * t1165 - qJ(4) * t1141 + t1120 * t1225 + qJDD(4) + t1029;
t884 = pkin(4) * t1004 - pkin(7) * t1007 + t974;
t814 = t1153 * t852 - t1156 * t884;
t815 = t1153 * t884 + t1156 * t852;
t761 = t1153 * t814 + t1156 * t815;
t1010 = t1157 * t1144 + t1162;
t951 = t1010 * t1154 + t1012 * t1157;
t1059 = t1061 ^ 2;
t1060 = t1063 ^ 2;
t1090 = qJD(5) + t1094;
t1089 = t1090 ^ 2;
t1092 = t1094 ^ 2;
t1093 = t1096 ^ 2;
t1242 = 0.2e1 * qJD(4);
t1192 = t1147 * t965 - t1149 * t1161;
t881 = t1096 * t1242 + t1192;
t819 = t1147 * t882 - t1149 * t881;
t1241 = pkin(3) * t819;
t1006 = -t1183 + t1223;
t1008 = t1088 + t1050;
t945 = t1006 * t1147 - t1008 * t1149;
t1240 = pkin(3) * t945;
t1239 = pkin(4) * t1147;
t851 = -qJDD(3) * pkin(4) - t1159 * pkin(7) + (t1242 + t1038) * t1096 + t1192;
t1237 = -pkin(4) * t851 + pkin(7) * t761;
t1235 = t1147 * t974;
t1234 = t1149 * t974;
t848 = t1153 * t851;
t962 = t1003 + t1045;
t1233 = t1153 * t962;
t1232 = t1154 * t819;
t849 = t1156 * t851;
t1230 = t1156 * t962;
t1229 = t1157 * t819;
t1227 = -pkin(2) * t1029 + pkin(6) * t951;
t1221 = t1090 * t1153;
t1220 = t1090 * t1156;
t1219 = t1094 * t1147;
t1218 = t1094 * t1149;
t1217 = t1096 * t1147;
t1216 = t1096 * t1149;
t1143 = t1154 ^ 2;
t1215 = t1143 * t1160;
t1042 = qJDD(3) + t1046;
t1214 = t1147 * t1042;
t1213 = t1149 * t1042;
t1025 = t1154 * t1029;
t1132 = t1157 * t1210;
t1121 = qJDD(3) + t1132;
t1212 = t1154 * t1121;
t1122 = qJDD(3) - t1132;
t1211 = t1154 * t1122;
t1026 = t1157 * t1029;
t1111 = -0.2e1 * t1195 + t1204;
t1064 = t1157 * t1111;
t1207 = t1157 * t1122;
t1206 = t1150 * qJDD(3);
t1203 = t1143 + t1243;
t991 = -t1060 - t1089;
t906 = -t1153 * t991 - t1230;
t1169 = -t1153 * qJDD(3) - t1156 * t1050;
t943 = (qJD(5) + t1090) * t1061 + t1169;
t1202 = pkin(4) * t943 + pkin(7) * t906 + t848;
t980 = -t1089 - t1059;
t900 = t1156 * t980 - t1255;
t1024 = t1090 * t1063;
t1184 = qJDD(3) * t1156 - t1153 * t1050;
t983 = -qJD(5) * t1063 + t1184;
t939 = -t1024 + t983;
t1201 = pkin(4) * t939 + pkin(7) * t900 - t849;
t1200 = -pkin(4) * t1149 - pkin(3);
t1199 = t1147 * t1003;
t1198 = t1148 * t1046;
t1197 = t1149 * t1003;
t1196 = t1150 * t1046;
t1129 = -t1159 - t1215;
t1073 = -t1129 * t1154 - t1207;
t1109 = 0.2e1 * t1135 + t1205;
t1194 = -pkin(2) * t1109 + pkin(6) * t1073 + t1025;
t1131 = -t1141 - t1159;
t1071 = t1131 * t1157 - t1212;
t1193 = pkin(2) * t1111 + pkin(6) * t1071 - t1026;
t820 = t1147 * t881 + t1149 * t882;
t755 = t1147 * t851 + t1149 * t761;
t760 = t1153 * t815 - t1156 * t814;
t718 = qJ(4) * t755 + (-pkin(7) * t1147 + t1200) * t760;
t754 = t1147 * t761 - t1149 * t851;
t725 = -qJ(4) * t754 + (-pkin(7) * t1149 + t1239) * t760;
t729 = -t1154 * t754 + t1157 * t755;
t1191 = -pkin(2) * t760 + pkin(6) * t729 + t1154 * t725 + t1157 * t718;
t940 = (-qJD(5) + t1090) * t1063 + t1184;
t1023 = t1090 * t1061;
t984 = -qJD(5) * t1061 - t1169;
t942 = t1023 + t984;
t856 = t1153 * t940 - t1156 * t942;
t756 = -pkin(7) * t856 - t760;
t858 = t1153 * t942 + t1156 * t940;
t969 = t1059 + t1060;
t830 = -t1147 * t969 + t1149 * t858;
t734 = qJ(4) * t830 + t1147 * t756 + t1200 * t856;
t829 = t1147 * t858 + t1149 * t969;
t736 = -qJ(4) * t829 + t1149 * t756 + t1239 * t856;
t783 = -t1154 * t829 + t1157 * t830;
t1190 = -pkin(2) * t856 + pkin(6) * t783 + t1154 * t736 + t1157 * t734;
t899 = t1153 * t980 + t1254;
t784 = -pkin(4) * t899 + t814;
t816 = -pkin(7) * t899 + t848;
t837 = -t1147 * t939 + t1149 * t900;
t740 = -pkin(3) * t899 + qJ(4) * t837 + t1147 * t816 + t1149 * t784;
t836 = t1147 * t900 + t1149 * t939;
t747 = -qJ(4) * t836 - t1147 * t784 + t1149 * t816;
t790 = -t1154 * t836 + t1157 * t837;
t1189 = -pkin(2) * t899 + pkin(6) * t790 + t1154 * t747 + t1157 * t740;
t905 = t1156 * t991 - t1233;
t785 = -pkin(4) * t905 + t815;
t817 = -pkin(7) * t905 + t849;
t841 = -t1147 * t943 + t1149 * t906;
t742 = -pkin(3) * t905 + qJ(4) * t841 + t1147 * t817 + t1149 * t785;
t840 = t1147 * t906 + t1149 * t943;
t749 = -qJ(4) * t840 - t1147 * t785 + t1149 * t817;
t793 = -t1154 * t840 + t1157 * t841;
t1188 = -pkin(2) * t905 + pkin(6) * t793 + t1154 * t749 + t1157 * t742;
t1002 = -t1092 - t1093;
t947 = t1006 * t1149 + t1008 * t1147;
t795 = -pkin(3) * t1002 + qJ(4) * t947 + t820;
t802 = -qJ(4) * t945 - t819;
t867 = -t1154 * t945 + t1157 * t947;
t1187 = -pkin(2) * t1002 + pkin(6) * t867 + t1154 * t802 + t1157 * t795;
t1186 = pkin(4) * t969 + pkin(7) * t858 + t761;
t1182 = -t1123 * t1155 - t1124 * t1158;
t1040 = -t1159 - t1092;
t967 = t1040 * t1149 - t1257;
t869 = -pkin(3) * t1004 + qJ(4) * t967 - t1234;
t966 = t1040 * t1147 + t1256;
t891 = -t1154 * t966 + t1157 * t967;
t902 = -qJ(4) * t966 + t1235;
t1181 = -pkin(2) * t1004 + pkin(6) * t891 + t1154 * t902 + t1157 * t869;
t1084 = -t1093 - t1159;
t990 = -t1084 * t1147 - t1213;
t873 = -pkin(3) * t1007 + qJ(4) * t990 + t1235;
t987 = t1084 * t1149 - t1214;
t910 = -qJ(4) * t987 + t1234;
t925 = -t1154 * t987 + t1157 * t990;
t1180 = -pkin(2) * t1007 + pkin(6) * t925 + t1154 * t910 + t1157 * t873;
t1115 = t1203 * qJDD(1);
t1118 = t1141 + t1215;
t1179 = pkin(2) * t1118 + pkin(6) * t1115 + t951;
t1178 = pkin(3) * t754 + t1237;
t1177 = pkin(3) * t987 - t1236;
t1176 = t1148 * t1132;
t1175 = t1150 * t1132;
t1117 = qJDD(1) * t1158 - t1155 * t1160;
t1174 = -pkin(5) * t1117 - g(3) * t1155;
t1173 = pkin(3) * t836 + t1201;
t1172 = pkin(3) * t840 + t1202;
t950 = t1010 * t1157 - t1012 * t1154;
t1170 = t1123 * t1158 - t1124 * t1155;
t1167 = pkin(3) * t829 + t1186;
t771 = t1157 * t820 - t1232;
t810 = -pkin(3) * t974 + qJ(4) * t820;
t1166 = -pkin(2) * t974 + pkin(6) * t771 - qJ(4) * t1232 + t1157 * t810;
t1164 = pkin(3) * t966 - t881;
t1137 = t1148 * qJDD(3);
t1130 = t1141 - t1159;
t1128 = t1159 - t1215;
t1119 = -t1141 + t1215;
t1116 = qJDD(1) * t1155 + t1158 * t1160;
t1105 = t1157 * t1121;
t1104 = t1203 * t1226;
t1091 = -pkin(5) * t1116 + g(3) * t1158;
t1083 = -t1093 + t1159;
t1082 = t1092 - t1159;
t1077 = t1110 * t1157 - t1143 * t1226;
t1076 = -t1154 * t1165 - t1226 * t1243;
t1075 = t1104 * t1150 + t1137;
t1074 = t1104 * t1148 - t1206;
t1072 = -t1128 * t1154 + t1105;
t1070 = t1130 * t1157 - t1211;
t1069 = t1129 * t1157 - t1211;
t1068 = t1128 * t1157 + t1212;
t1067 = t1131 * t1154 + t1105;
t1066 = t1130 * t1154 + t1207;
t1065 = (t1110 + t1135) * t1154;
t1056 = t1115 * t1150 - t1118 * t1148;
t1055 = t1115 * t1148 + t1118 * t1150;
t1052 = -t1109 * t1154 + t1064;
t1051 = t1109 * t1157 + t1111 * t1154;
t1044 = t1093 - t1092;
t1037 = t1077 * t1150 - t1176;
t1036 = t1076 * t1150 + t1176;
t1035 = t1077 * t1148 + t1175;
t1034 = t1076 * t1148 - t1175;
t1033 = t1072 * t1150 + t1148 * t1205;
t1032 = t1070 * t1150 + t1148 * t1204;
t1031 = t1072 * t1148 - t1150 * t1205;
t1030 = t1070 * t1148 - t1150 * t1204;
t1022 = (t1217 - t1218) * qJD(3);
t1021 = (-t1216 - t1219) * qJD(3);
t1020 = t1073 * t1150 + t1109 * t1148;
t1019 = t1071 * t1150 - t1111 * t1148;
t1018 = t1073 * t1148 - t1109 * t1150;
t1017 = t1071 * t1148 + t1111 * t1150;
t1016 = -t1060 + t1089;
t1015 = t1059 - t1089;
t1014 = -pkin(1) * t1113 - t1048;
t1013 = pkin(1) * t1114 - t1047;
t1011 = t1052 * t1150 + t1119 * t1148;
t1009 = t1052 * t1148 - t1119 * t1150;
t999 = t1060 - t1059;
t995 = -qJD(3) * t1217 + t1050 * t1149;
t994 = qJD(3) * t1216 + t1050 * t1147;
t993 = qJD(3) * t1218 + t1147 * t1183;
t992 = qJD(3) * t1219 - t1149 * t1183;
t989 = -t1083 * t1147 + t1256;
t988 = t1082 * t1149 - t1214;
t986 = t1083 * t1149 + t1257;
t985 = t1082 * t1147 + t1213;
t982 = -pkin(6) * t1069 + t1026;
t981 = -pkin(6) * t1067 + t1025;
t973 = pkin(1) * t977;
t972 = -pkin(2) * t1069 + t1012;
t971 = -pkin(2) * t1067 + t1010;
t964 = pkin(1) * t1144 + qJ(2) * t1185;
t957 = (-t1061 * t1156 + t1063 * t1153) * t1090;
t956 = (-t1061 * t1153 - t1063 * t1156) * t1090;
t955 = -t1021 * t1154 + t1022 * t1157;
t954 = t1021 * t1157 + t1022 * t1154;
t953 = t1150 * t955 + t1137;
t952 = t1148 * t955 - t1206;
t946 = -t1004 * t1149 - t1007 * t1147;
t944 = -t1004 * t1147 + t1007 * t1149;
t941 = -t1023 + t984;
t938 = -t1024 - t983;
t935 = -t1063 * t1221 + t1156 * t984;
t934 = t1063 * t1220 + t1153 * t984;
t933 = t1061 * t1220 - t1153 * t983;
t932 = -t1061 * t1221 - t1156 * t983;
t931 = -t1154 * t994 + t1157 * t995;
t930 = -t1154 * t992 + t1157 * t993;
t929 = t1154 * t995 + t1157 * t994;
t928 = t1154 * t993 + t1157 * t992;
t927 = pkin(1) * t1017 + t1193;
t926 = pkin(1) * t1018 + t1194;
t924 = -t1154 * t986 + t1157 * t989;
t923 = -t1154 * t985 + t1157 * t988;
t922 = t1154 * t990 + t1157 * t987;
t921 = t1154 * t989 + t1157 * t986;
t920 = t1154 * t988 + t1157 * t985;
t919 = t1045 * t1147 + t1149 * t957;
t918 = -t1045 * t1149 + t1147 * t957;
t916 = t1015 * t1156 - t1233;
t915 = -t1016 * t1153 + t1254;
t914 = t1015 * t1153 + t1230;
t913 = t1016 * t1156 + t1255;
t912 = -qJ(2) * t1055 + t1150 * t950;
t911 = qJ(2) * t1056 + t1148 * t950;
t908 = t1029 * t1148 + t1150 * t951;
t907 = -t1029 * t1150 + t1148 * t951;
t901 = pkin(1) * t1055 + t1179;
t896 = t1150 * t931 + t1198;
t895 = t1150 * t930 - t1198;
t894 = t1148 * t931 - t1196;
t893 = t1148 * t930 + t1196;
t890 = t1154 * t967 + t1157 * t966;
t888 = t1149 * t935 + t1199;
t887 = t1149 * t933 - t1199;
t886 = t1147 * t935 - t1197;
t885 = t1147 * t933 + t1197;
t880 = t1007 * t1148 + t1150 * t925;
t879 = t1008 * t1148 + t1150 * t924;
t878 = t1006 * t1148 + t1150 * t923;
t877 = -t1007 * t1150 + t1148 * t925;
t876 = -t1008 * t1150 + t1148 * t924;
t875 = -t1006 * t1150 + t1148 * t923;
t871 = -qJ(2) * t1018 - t1148 * t972 + t1150 * t982;
t870 = -qJ(2) * t1017 - t1148 * t971 + t1150 * t981;
t866 = -t1154 * t944 + t1157 * t946;
t865 = t1154 * t947 + t1157 * t945;
t864 = t1154 * t946 + t1157 * t944;
t863 = t1004 * t1148 + t1150 * t891;
t862 = -t1004 * t1150 + t1148 * t891;
t860 = -pkin(1) * t1069 + qJ(2) * t1020 + t1148 * t982 + t1150 * t972;
t859 = -pkin(1) * t1067 + qJ(2) * t1019 + t1148 * t981 + t1150 * t971;
t857 = -t1153 * t941 + t1156 * t939;
t855 = t1153 * t939 + t1156 * t941;
t847 = -t1147 * t938 + t1149 * t916;
t846 = t1147 * t942 + t1149 * t915;
t845 = t1147 * t916 + t1149 * t938;
t844 = t1147 * t915 - t1149 * t942;
t843 = t1044 * t1148 + t1150 * t866;
t842 = -t1044 * t1150 + t1148 * t866;
t839 = -t1154 * t918 + t1157 * t919;
t838 = t1154 * t919 + t1157 * t918;
t835 = t1002 * t1148 + t1150 * t867;
t834 = -t1002 * t1150 + t1148 * t867;
t833 = t1147 * t999 + t1149 * t857;
t832 = t1147 * t857 - t1149 * t999;
t831 = pkin(1) * t907 + t1227;
t828 = -pkin(2) * t865 - t1240;
t827 = -t1154 * t886 + t1157 * t888;
t826 = -t1154 * t885 + t1157 * t887;
t825 = t1154 * t888 + t1157 * t886;
t824 = t1154 * t887 + t1157 * t885;
t823 = t1148 * t956 + t1150 * t839;
t822 = t1148 * t839 - t1150 * t956;
t821 = -qJ(2) * t907 - (pkin(2) * t1148 - pkin(6) * t1150) * t950;
t818 = -pkin(2) * t922 + t1085 - t1177;
t813 = -pkin(2) * t890 - t1164;
t808 = -pkin(6) * t922 - t1154 * t873 + t1157 * t910;
t807 = qJ(2) * t908 - (-pkin(2) * t1150 - pkin(6) * t1148 - pkin(1)) * t950;
t806 = t1148 * t934 + t1150 * t827;
t805 = -t1148 * t932 + t1150 * t826;
t804 = t1148 * t827 - t1150 * t934;
t803 = t1148 * t826 + t1150 * t932;
t800 = -t1154 * t845 + t1157 * t847;
t799 = -t1154 * t844 + t1157 * t846;
t798 = t1154 * t847 + t1157 * t845;
t797 = t1154 * t846 + t1157 * t844;
t796 = -pkin(6) * t890 - t1154 * t869 + t1157 * t902;
t792 = t1154 * t841 + t1157 * t840;
t789 = t1154 * t837 + t1157 * t836;
t787 = -t1154 * t832 + t1157 * t833;
t786 = t1154 * t833 + t1157 * t832;
t782 = t1154 * t830 + t1157 * t829;
t780 = t1148 * t914 + t1150 * t800;
t779 = t1148 * t913 + t1150 * t799;
t778 = t1148 * t800 - t1150 * t914;
t777 = t1148 * t799 - t1150 * t913;
t776 = t1148 * t905 + t1150 * t793;
t775 = t1148 * t793 - t1150 * t905;
t774 = pkin(1) * t877 + t1180;
t773 = t1148 * t899 + t1150 * t790;
t772 = t1148 * t790 - t1150 * t899;
t770 = t1154 * t820 + t1229;
t768 = pkin(1) * t862 + t1181;
t767 = t1148 * t855 + t1150 * t787;
t766 = t1148 * t787 - t1150 * t855;
t765 = t1148 * t974 + t1150 * t771;
t764 = t1148 * t771 - t1150 * t974;
t763 = t1148 * t856 + t1150 * t783;
t762 = t1148 * t783 - t1150 * t856;
t757 = -qJ(2) * t877 - t1148 * t818 + t1150 * t808;
t753 = -pkin(2) * t770 - t1241;
t752 = -pkin(1) * t922 + qJ(2) * t880 + t1148 * t808 + t1150 * t818;
t751 = -qJ(2) * t862 - t1148 * t813 + t1150 * t796;
t750 = -pkin(6) * t865 - t1154 * t795 + t1157 * t802;
t745 = -pkin(2) * t792 - t1172;
t744 = -pkin(2) * t789 - t1173;
t743 = -pkin(1) * t890 + qJ(2) * t863 + t1148 * t796 + t1150 * t813;
t738 = pkin(1) * t834 + t1187;
t737 = -pkin(6) * t770 - qJ(4) * t1229 - t1154 * t810;
t732 = -qJ(2) * t834 - t1148 * t828 + t1150 * t750;
t731 = -pkin(1) * t865 + qJ(2) * t835 + t1148 * t750 + t1150 * t828;
t730 = -pkin(2) * t782 - t1167;
t728 = t1154 * t755 + t1157 * t754;
t726 = pkin(1) * t764 + t1166;
t723 = t1148 * t760 + t1150 * t729;
t722 = t1148 * t729 - t1150 * t760;
t721 = -pkin(6) * t792 - t1154 * t742 + t1157 * t749;
t720 = -pkin(6) * t789 - t1154 * t740 + t1157 * t747;
t719 = -qJ(2) * t764 - t1148 * t753 + t1150 * t737;
t716 = pkin(1) * t775 + t1188;
t715 = -pkin(6) * t782 - t1154 * t734 + t1157 * t736;
t714 = pkin(1) * t772 + t1189;
t713 = -pkin(1) * t770 + qJ(2) * t765 + t1148 * t737 + t1150 * t753;
t712 = -pkin(2) * t728 - t1178;
t711 = pkin(1) * t762 + t1190;
t710 = -qJ(2) * t775 - t1148 * t745 + t1150 * t721;
t709 = -qJ(2) * t772 - t1148 * t744 + t1150 * t720;
t708 = -pkin(1) * t792 + qJ(2) * t776 + t1148 * t721 + t1150 * t745;
t707 = -pkin(1) * t789 + qJ(2) * t773 + t1148 * t720 + t1150 * t744;
t706 = -qJ(2) * t762 - t1148 * t730 + t1150 * t715;
t705 = -pkin(1) * t782 + qJ(2) * t763 + t1148 * t715 + t1150 * t730;
t704 = -pkin(6) * t728 - t1154 * t718 + t1157 * t725;
t703 = pkin(1) * t722 + t1191;
t702 = -qJ(2) * t722 - t1148 * t712 + t1150 * t704;
t701 = -pkin(1) * t728 + qJ(2) * t723 + t1148 * t704 + t1150 * t712;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1117, 0, -t1116, 0, t1174, -t1091, -t1170, -pkin(5) * t1170, 0, 0, t1053, 0, -t1246, 0, t1252, t1253, t1258, pkin(5) * t1258 + qJ(2) * t1228 - t1155 * t964, -t1035 * t1155 + t1037 * t1158, -t1009 * t1155 + t1011 * t1158, -t1031 * t1155 + t1033 * t1158, -t1034 * t1155 + t1036 * t1158, -t1030 * t1155 + t1032 * t1158, -t1074 * t1155 + t1075 * t1158, t1158 * t870 - t1155 * t859 - pkin(5) * (t1017 * t1158 + t1019 * t1155), t1158 * t871 - t1155 * t860 - pkin(5) * (t1018 * t1158 + t1020 * t1155), t1158 * t912 - t1155 * t911 - pkin(5) * (t1055 * t1158 + t1056 * t1155), t1158 * t821 - t1155 * t807 - pkin(5) * (t1155 * t908 + t1158 * t907), -t1155 * t894 + t1158 * t896, -t1155 * t842 + t1158 * t843, -t1155 * t876 + t1158 * t879, -t1155 * t893 + t1158 * t895, -t1155 * t875 + t1158 * t878, -t1155 * t952 + t1158 * t953, t1158 * t751 - t1155 * t743 - pkin(5) * (t1155 * t863 + t1158 * t862), t1158 * t757 - t1155 * t752 - pkin(5) * (t1155 * t880 + t1158 * t877), t1158 * t732 - t1155 * t731 - pkin(5) * (t1155 * t835 + t1158 * t834), t1158 * t719 - t1155 * t713 - pkin(5) * (t1155 * t765 + t1158 * t764), -t1155 * t804 + t1158 * t806, -t1155 * t766 + t1158 * t767, -t1155 * t777 + t1158 * t779, -t1155 * t803 + t1158 * t805, -t1155 * t778 + t1158 * t780, -t1155 * t822 + t1158 * t823, t1158 * t709 - t1155 * t707 - pkin(5) * (t1155 * t773 + t1158 * t772), t1158 * t710 - t1155 * t708 - pkin(5) * (t1155 * t776 + t1158 * t775), t1158 * t706 - t1155 * t705 - pkin(5) * (t1155 * t763 + t1158 * t762), t1158 * t702 - t1155 * t701 - pkin(5) * (t1155 * t723 + t1158 * t722); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1116, 0, t1117, 0, t1091, t1174, t1182, pkin(5) * t1182, 0, 0, t1246, 0, t1053, 0, -t1253, t1252, t1259, pkin(5) * t1259 + qJ(2) * t1231 + t1158 * t964, t1035 * t1158 + t1037 * t1155, t1009 * t1158 + t1011 * t1155, t1031 * t1158 + t1033 * t1155, t1034 * t1158 + t1036 * t1155, t1030 * t1158 + t1032 * t1155, t1074 * t1158 + t1075 * t1155, t1155 * t870 + t1158 * t859 + pkin(5) * (-t1017 * t1155 + t1019 * t1158), t1155 * t871 + t1158 * t860 + pkin(5) * (-t1018 * t1155 + t1020 * t1158), t1155 * t912 + t1158 * t911 + pkin(5) * (-t1055 * t1155 + t1056 * t1158), t1155 * t821 + t1158 * t807 + pkin(5) * (-t1155 * t907 + t1158 * t908), t1155 * t896 + t1158 * t894, t1155 * t843 + t1158 * t842, t1155 * t879 + t1158 * t876, t1155 * t895 + t1158 * t893, t1155 * t878 + t1158 * t875, t1155 * t953 + t1158 * t952, t1155 * t751 + t1158 * t743 + pkin(5) * (-t1155 * t862 + t1158 * t863), t1155 * t757 + t1158 * t752 + pkin(5) * (-t1155 * t877 + t1158 * t880), t1155 * t732 + t1158 * t731 + pkin(5) * (-t1155 * t834 + t1158 * t835), t1155 * t719 + t1158 * t713 + pkin(5) * (-t1155 * t764 + t1158 * t765), t1155 * t806 + t1158 * t804, t1155 * t767 + t1158 * t766, t1155 * t779 + t1158 * t777, t1155 * t805 + t1158 * t803, t1155 * t780 + t1158 * t778, t1155 * t823 + t1158 * t822, t1155 * t709 + t1158 * t707 + pkin(5) * (-t1155 * t772 + t1158 * t773), t1155 * t710 + t1158 * t708 + pkin(5) * (-t1155 * t775 + t1158 * t776), t1155 * t706 + t1158 * t705 + pkin(5) * (-t1155 * t762 + t1158 * t763), t1155 * t702 + t1158 * t701 + pkin(5) * (-t1155 * t722 + t1158 * t723); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1123, t1124, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1013, t1014, 0, -t973, t1065, t1051, t1068, t1064, t1066, 0, t927, t926, t901, t831, t929, t864, t921, t928, t920, t954, t768, t774, t738, t726, t825, t786, t797, t824, t798, t838, t714, t716, t711, t703; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1160, 0, 0, -g(3), -t1123, 0, 0, 0, t1114, 0, -t1113, 0, t1171, t1081, t977, qJ(2) * t977, t1037, t1011, t1033, t1036, t1032, t1075, t870, t871, t912, t821, t896, t843, t879, t895, t878, t953, t751, t757, t732, t719, t806, t767, t779, t805, t780, t823, t709, t710, t706, t702; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1160, 0, qJDD(1), 0, g(3), 0, -t1124, 0, 0, 0, t1113, 0, t1114, 0, -t1081, t1171, t1185, t964, t1035, t1009, t1031, t1034, t1030, t1074, t859, t860, t911, t807, t894, t842, t876, t893, t875, t952, t743, t752, t731, t713, t804, t766, t777, t803, t778, t822, t707, t708, t705, t701; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1123, t1124, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1013, t1014, 0, -t973, t1065, t1051, t1068, t1064, t1066, 0, t927, t926, t901, t831, t929, t864, t921, t928, t920, t954, t768, t774, t738, t726, t825, t786, t797, t824, t798, t838, t714, t716, t711, t703; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1160, 0, 0, -t1144, t1047, 0, t1077, t1052, t1072, t1076, t1070, t1104, t981, t982, t950, pkin(6) * t950, t931, t866, t924, t930, t923, t955, t796, t808, t750, t737, t827, t787, t799, t826, t800, t839, t720, t721, t715, t704; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1160, 0, qJDD(1), 0, t1144, 0, t1048, 0, t1132, -t1119, -t1205, -t1132, -t1204, -qJDD(3), t971, t972, 0, pkin(2) * t950, -t1046, -t1044, -t1008, t1046, -t1006, -qJDD(3), t813, t818, t828, t753, -t934, -t855, -t913, t932, -t914, -t956, t744, t745, t730, t712; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1047, -t1048, 0, 0, t1065, t1051, t1068, t1064, t1066, 0, t1193, t1194, t1179, t1227, t929, t864, t921, t928, t920, t954, t1181, t1180, t1187, t1166, t825, t786, t797, t824, t798, t838, t1189, t1188, t1190, t1191; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1110, t1111, t1121, -t1135, t1130, t1135, 0, t1029, t1010, 0, t995, t946, t989, t993, t988, t1022, t902, t910, t802, -qJ(4) * t819, t888, t833, t846, t887, t847, t919, t747, t749, t736, t725; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1195, t1109, t1128, t1165, t1122, -t1195, -t1029, 0, t1012, 0, t994, t944, t986, t992, t985, t1021, t869, t873, t795, t810, t886, t832, t844, t885, t845, t918, t740, t742, t734, t718; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1132, t1119, t1205, t1132, t1204, qJDD(3), -t1010, -t1012, 0, 0, t1046, t1044, t1008, -t1046, t1006, qJDD(3), t1164, t1177 + 0.2e1 * t1222, t1240, t1241, t934, t855, t913, -t932, t914, t956, t1173, t1172, t1167, t1178; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1050, -t1004, t1245, t1088, t1082, -t1088, 0, t974, t881, 0, t935, t857, t915, t933, t916, t957, t816, t817, t756, -pkin(7) * t760; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1223, t1007, t1083, -t1183, t1042, -t1223, -t974, 0, t882, 0, -t1003, -t999, -t942, t1003, t938, -t1045, t784, t785, -pkin(4) * t856, -pkin(4) * t760; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1046, t1044, t1008, -t1046, t1006, qJDD(3), -t881, -t882, 0, 0, t934, t855, t913, -t932, t914, t956, t1201, t1202, t1186, t1237; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t984, t939, t1247, t1023, t1015, -t1023, 0, t851, t814, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1024, t941, t1016, t983, t962, -t1024, -t851, 0, t815, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1003, t999, t942, -t1003, -t938, t1045, -t814, -t815, 0, 0;];
m_new_reg = t1;
