% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PPRPR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d5,theta1]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:33
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PPRPR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRPR5_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRPR5_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRPR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRPR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5PPRPR5_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:33:39
% EndTime: 2019-12-31 17:33:40
% DurationCPUTime: 0.95s
% Computational Cost: add. (920->123), mult. (1619->110), div. (0->0), fcn. (1060->6), ass. (0->60)
t591 = sin(qJ(3));
t593 = cos(qJ(3));
t595 = qJD(3) ^ 2;
t572 = t591 * qJDD(3) + t593 * t595;
t573 = -t593 * qJDD(3) + t591 * t595;
t587 = sin(pkin(7));
t588 = cos(pkin(7));
t600 = -t587 * t572 + t588 * t573;
t602 = t588 * t572 + t587 * t573;
t590 = sin(qJ(5));
t583 = t590 ^ 2;
t592 = cos(qJ(5));
t584 = t592 ^ 2;
t607 = t583 + t584;
t606 = qJD(3) * qJD(5);
t605 = t590 * qJDD(3);
t604 = t592 * qJDD(3);
t603 = t592 * t595 * t590;
t575 = t587 * g(1) - t588 * g(2);
t569 = -qJDD(2) + t575;
t576 = -t588 * g(1) - t587 * g(2);
t551 = -t593 * t569 - t591 * t576;
t594 = qJD(5) ^ 2;
t598 = -t584 * t595 - t594;
t597 = qJDD(5) - t603;
t550 = -qJDD(3) * pkin(3) - t595 * qJ(4) + qJDD(4) - t551;
t548 = -qJDD(3) * pkin(6) + t550;
t585 = g(3) - qJDD(1);
t596 = t592 * t548 - t590 * t585;
t552 = -t591 * t569 + t593 * t576;
t549 = -t595 * pkin(3) + qJDD(3) * qJ(4) + (2 * qJD(4) * qJD(3)) + t552;
t578 = -t583 * t595 - t594;
t577 = -qJDD(5) - t603;
t574 = t607 * t595;
t571 = t607 * qJDD(3);
t568 = -0.2e1 * t590 * t606 + t604;
t567 = 0.2e1 * t592 * t606 + t605;
t565 = t588 * t576;
t564 = t587 * t576;
t558 = t592 * t577 - t590 * t598;
t557 = t592 * t578 - t590 * t597;
t556 = t590 * t577 + t592 * t598;
t555 = t590 * t578 + t592 * t597;
t554 = -t591 * t571 - t593 * t574;
t553 = t593 * t571 - t591 * t574;
t547 = -t595 * pkin(6) + t549;
t546 = t591 * t556 + t593 * t568;
t545 = t591 * t555 + t593 * t567;
t544 = -t593 * t556 + t591 * t568;
t543 = -t593 * t555 + t591 * t567;
t542 = t590 * t548 + t592 * t585;
t540 = -t591 * t551 + t593 * t552;
t539 = t593 * t551 + t591 * t552;
t538 = t593 * t549 + t591 * t550;
t537 = t591 * t549 - t593 * t550;
t536 = t592 * t542 - t590 * t596;
t535 = t590 * t542 + t592 * t596;
t534 = t591 * t535 + t593 * t547;
t533 = -t593 * t535 + t591 * t547;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t587 * t575 + t565, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t587 * t569 + t565, 0, 0, 0, 0, 0, 0, -t602, t600, 0, t587 * t539 + t588 * t540, 0, 0, 0, 0, 0, 0, 0, t602, -t600, t587 * t537 + t588 * t538, 0, 0, 0, 0, 0, 0, t587 * t543 + t588 * t545, t587 * t544 + t588 * t546, t587 * t553 + t588 * t554, t587 * t533 + t588 * t534; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t588 * t575 + t564, 0, 0, 0, 0, 0, 0, 0, 0, 0, t588 * t569 + t564, 0, 0, 0, 0, 0, 0, t600, t602, 0, -t588 * t539 + t587 * t540, 0, 0, 0, 0, 0, 0, 0, -t600, -t602, -t588 * t537 + t587 * t538, 0, 0, 0, 0, 0, 0, -t588 * t543 + t587 * t545, -t588 * t544 + t587 * t546, -t588 * t553 + t587 * t554, -t588 * t533 + t587 * t534; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t585, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t585, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t585, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t585, 0, 0, 0, 0, 0, 0, -t557, -t558, 0, -t536; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t576, 0, 0, 0, 0, 0, 0, 0, 0, 0, t576, 0, 0, 0, 0, 0, 0, -t572, t573, 0, t540, 0, 0, 0, 0, 0, 0, 0, t572, -t573, t538, 0, 0, 0, 0, 0, 0, t545, t546, t554, t534; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t575, 0, 0, 0, 0, 0, 0, 0, 0, 0, t569, 0, 0, 0, 0, 0, 0, t573, t572, 0, -t539, 0, 0, 0, 0, 0, 0, 0, -t573, -t572, -t537, 0, 0, 0, 0, 0, 0, -t543, -t544, -t553, -t533; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t585, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t585, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t585, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t585, 0, 0, 0, 0, 0, 0, -t557, -t558, 0, -t536; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t576, 0, 0, 0, 0, 0, 0, -t572, t573, 0, t540, 0, 0, 0, 0, 0, 0, 0, t572, -t573, t538, 0, 0, 0, 0, 0, 0, t545, t546, t554, t534; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t585, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t585, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t585, 0, 0, 0, 0, 0, 0, -t557, -t558, 0, -t536; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t569, 0, 0, 0, 0, 0, 0, -t573, -t572, 0, t539, 0, 0, 0, 0, 0, 0, 0, t573, t572, t537, 0, 0, 0, 0, 0, 0, t543, t544, t553, t533; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t595, -qJDD(3), 0, t552, 0, 0, 0, 0, 0, 0, 0, t595, qJDD(3), t549, 0, 0, 0, 0, 0, 0, t567, t568, -t574, t547; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t595, 0, t551, 0, 0, 0, 0, 0, 0, 0, -qJDD(3), t595, -t550, 0, 0, 0, 0, 0, 0, -t555, -t556, t571, -t535; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t585, 0, 0, 0, 0, 0, 0, 0, 0, 0, t585, 0, 0, 0, 0, 0, 0, t557, t558, 0, t536; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t585, 0, 0, 0, 0, 0, 0, t557, t558, 0, t536; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t595, -qJDD(3), -t549, 0, 0, 0, 0, 0, 0, -t567, -t568, t574, -t547; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t595, t550, 0, 0, 0, 0, 0, 0, t555, t556, -t571, t535; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t578, t577, -t605, t542; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t597, t598, -t604, t596; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t567, t568, -t574, t547;];
f_new_reg = t1;
