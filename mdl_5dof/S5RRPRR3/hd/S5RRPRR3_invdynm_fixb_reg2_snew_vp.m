% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 12:00
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPRR3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR3_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR3_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR3_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR3_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 12:00:47
% EndTime: 2020-01-03 12:00:56
% DurationCPUTime: 9.89s
% Computational Cost: add. (56799->416), mult. (74873->562), div. (0->0), fcn. (44118->10), ass. (0->288)
t833 = qJD(1) + qJD(2);
t826 = qJD(4) + t833;
t824 = t826 ^ 2;
t844 = cos(qJ(4));
t832 = qJDD(1) + qJDD(2);
t825 = qJDD(4) + t832;
t840 = sin(qJ(4));
t891 = t840 * t825;
t784 = t844 * t824 + t891;
t886 = t844 * t825;
t787 = t840 * t824 - t886;
t837 = sin(pkin(9));
t838 = cos(pkin(9));
t719 = t838 * t784 - t837 * t787;
t836 = g(1) - qJDD(3);
t760 = pkin(7) * t784 - t844 * t836;
t917 = pkin(7) * t787 - t840 * t836;
t663 = qJ(3) * t719 + t838 * t760 - t837 * t917;
t723 = t837 * t784 + t838 * t787;
t841 = sin(qJ(2));
t845 = cos(qJ(2));
t673 = t845 * t719 - t841 * t723;
t933 = qJ(3) * t723 + t837 * t760 + t838 * t917;
t603 = pkin(6) * t673 + t845 * t663 - t841 * t933;
t842 = sin(qJ(1));
t846 = cos(qJ(1));
t677 = t841 * t719 + t845 * t723;
t937 = t842 * t673 + t846 * t677;
t951 = pkin(6) * t677 + t841 * t663 + t845 * t933;
t963 = pkin(5) * t937 + t842 * t603 + t846 * t951;
t630 = t846 * t673 - t842 * t677;
t962 = -pkin(5) * t630 - t846 * t603 + t842 * t951;
t818 = t846 * g(2) + t842 * g(3);
t806 = qJDD(1) * pkin(1) - t818;
t817 = t842 * g(2) - t846 * g(3);
t848 = qJD(1) ^ 2;
t807 = -t848 * pkin(1) - t817;
t745 = -t845 * t806 + t841 * t807;
t734 = t832 * pkin(2) - t745;
t746 = t841 * t806 + t845 * t807;
t831 = t833 ^ 2;
t735 = -t831 * pkin(2) + t746;
t687 = t837 * t734 + t838 * t735;
t682 = -t831 * pkin(3) + t687;
t686 = -t838 * t734 + t837 * t735;
t853 = t832 * pkin(3) - t686;
t636 = t840 * t682 - t844 * t853;
t637 = t844 * t682 + t840 * t853;
t873 = t840 * t636 + t844 * t637;
t592 = t844 * t636 - t840 * t637;
t896 = t838 * t592;
t568 = -t837 * t873 + t896;
t898 = t837 * t592;
t923 = t838 * t873 + t898;
t552 = t845 * t568 - t841 * t923;
t948 = t841 * t568 + t845 * t923;
t961 = t842 * t552 + t846 * t948;
t960 = -t846 * t552 + t842 * t948;
t795 = t838 * t831 + t837 * t832;
t798 = t837 * t831 - t838 * t832;
t728 = t845 * t795 - t841 * t798;
t764 = qJ(3) * t795 - t838 * t836;
t916 = qJ(3) * t798 - t837 * t836;
t671 = pkin(6) * t728 + t845 * t764 - t841 * t916;
t732 = t841 * t795 + t845 * t798;
t914 = t842 * t728 + t846 * t732;
t934 = pkin(6) * t732 + t841 * t764 + t845 * t916;
t953 = pkin(5) * t914 + t842 * t671 + t846 * t934;
t685 = t846 * t728 - t842 * t732;
t952 = -pkin(5) * t685 - t846 * t671 + t842 * t934;
t872 = t837 * t686 + t838 * t687;
t642 = t838 * t686 - t837 * t687;
t884 = t845 * t642;
t596 = -t841 * t872 + t884;
t889 = t841 * t642;
t924 = t845 * t872 + t889;
t947 = t842 * t596 + t846 * t924;
t946 = -t846 * t596 + t842 * t924;
t799 = t845 * t831 + t841 * t832;
t769 = pkin(6) * t799 - t845 * g(1);
t802 = t841 * t831 - t845 * t832;
t856 = t842 * t799 + t846 * t802;
t918 = pkin(6) * t802 - t841 * g(1);
t936 = pkin(5) * t856 + t842 * t769 + t846 * t918;
t737 = t846 * t799 - t842 * t802;
t935 = -pkin(5) * t737 - t846 * t769 + t842 * t918;
t871 = t841 * t745 + t845 * t746;
t692 = t845 * t745 - t841 * t746;
t883 = t846 * t692;
t926 = t842 * t871 - t883;
t888 = t842 * t692;
t925 = t846 * t871 + t888;
t632 = -t824 * pkin(4) + t825 * pkin(8) + t637;
t839 = sin(qJ(5));
t843 = cos(qJ(5));
t624 = t839 * t632 + t843 * t836;
t625 = t843 * t632 - t839 * t836;
t587 = t839 * t624 + t843 * t625;
t903 = pkin(1) * t836;
t902 = pkin(2) * t836;
t834 = t839 ^ 2;
t899 = t834 * t824;
t631 = -t825 * pkin(4) - t824 * pkin(8) + t636;
t626 = t839 * t631;
t812 = t843 * t824 * t839;
t803 = qJDD(5) + t812;
t894 = t839 * t803;
t804 = qJDD(5) - t812;
t893 = t839 * t804;
t892 = t839 * t825;
t627 = t843 * t631;
t887 = t843 * t804;
t819 = t843 * t825;
t589 = pkin(3) * t592;
t882 = -pkin(2) * t568 - t589;
t881 = -pkin(4) * t631 + pkin(8) * t587;
t835 = t843 ^ 2;
t880 = t834 + t835;
t879 = qJD(5) * t826;
t847 = qJD(5) ^ 2;
t809 = -t847 - t899;
t754 = -t839 * t809 - t887;
t816 = t843 * t879;
t776 = 0.2e1 * t816 + t892;
t878 = -pkin(4) * t776 + pkin(8) * t754 + t626;
t820 = t835 * t824;
t811 = -t820 - t847;
t752 = t843 * t811 - t894;
t875 = t839 * t879;
t779 = t819 - 0.2e1 * t875;
t877 = pkin(4) * t779 + pkin(8) * t752 - t627;
t575 = t840 * t587 - t844 * t631;
t876 = pkin(3) * t575 + t881;
t813 = -t842 * qJDD(1) - t846 * t848;
t874 = pkin(5) * t813 + t846 * g(1);
t868 = -t842 * t817 - t846 * t818;
t867 = t840 * t812;
t866 = t844 * t812;
t576 = t844 * t587 + t840 * t631;
t558 = t838 * t575 + t837 * t576;
t865 = pkin(2) * t558 + t876;
t782 = t880 * t825;
t788 = t820 + t899;
t864 = pkin(4) * t788 + pkin(8) * t782 + t587;
t701 = t840 * t754 - t844 * t776;
t863 = pkin(3) * t701 + t878;
t700 = t840 * t752 + t844 * t779;
t862 = pkin(3) * t700 + t877;
t861 = -pkin(3) * t787 - t636;
t860 = -pkin(2) * t798 - t686;
t725 = t840 * t782 + t844 * t788;
t859 = pkin(3) * t725 + t864;
t702 = t844 * t752 - t840 * t779;
t652 = t838 * t700 + t837 * t702;
t858 = pkin(2) * t652 + t862;
t703 = t844 * t754 + t840 * t776;
t653 = t838 * t701 + t837 * t703;
t857 = pkin(2) * t653 + t863;
t586 = t843 * t624 - t839 * t625;
t855 = t846 * t817 - t842 * t818;
t854 = -pkin(2) * t723 + t861;
t726 = t844 * t782 - t840 * t788;
t679 = t838 * t725 + t837 * t726;
t852 = pkin(2) * t679 + t859;
t851 = -pkin(2) * t795 - t687;
t850 = -pkin(3) * t784 - t637;
t849 = -pkin(2) * t719 + t850;
t814 = t846 * qJDD(1) - t842 * t848;
t810 = t820 - t847;
t808 = t847 - t899;
t793 = t843 * t803;
t792 = pkin(5) * t814 + t842 * g(1);
t789 = -t820 + t899;
t778 = t819 - t875;
t777 = t816 + t892;
t772 = t880 * t879;
t756 = t840 * qJDD(5) + t844 * t772;
t755 = -t844 * qJDD(5) + t840 * t772;
t753 = -t839 * t808 + t793;
t751 = t843 * t810 - t893;
t750 = t843 * t809 - t893;
t749 = t843 * t808 + t894;
t748 = t839 * t811 + t793;
t747 = t839 * t810 + t887;
t744 = t843 * t777 - t834 * t879;
t743 = -t839 * t778 - t835 * t879;
t739 = (t777 + t816) * t839;
t738 = (t778 - t875) * t843;
t715 = -t839 * t776 + t843 * t779;
t714 = t843 * t776 + t839 * t779;
t713 = t844 * t753 + t839 * t891;
t712 = t844 * t751 + t840 * t819;
t711 = t840 * t753 - t839 * t886;
t710 = t840 * t751 - t843 * t886;
t709 = -pkin(1) * t802 - t745;
t708 = -pkin(1) * t799 - t746;
t707 = t844 * t744 - t867;
t706 = t844 * t743 + t867;
t705 = t840 * t744 + t866;
t704 = t840 * t743 - t866;
t697 = -t837 * t755 + t838 * t756;
t696 = t838 * t755 + t837 * t756;
t695 = t844 * t715 + t840 * t789;
t694 = t840 * t715 - t844 * t789;
t689 = pkin(1) * t692;
t688 = pkin(1) * g(1) + pkin(6) * t871;
t680 = -t837 * t725 + t838 * t726;
t667 = -t837 * t711 + t838 * t713;
t666 = -t837 * t710 + t838 * t712;
t665 = t838 * t711 + t837 * t713;
t664 = t838 * t710 + t837 * t712;
t659 = -t837 * t705 + t838 * t707;
t658 = -t837 * t704 + t838 * t706;
t657 = t838 * t705 + t837 * t707;
t656 = t838 * t704 + t837 * t706;
t655 = -t837 * t701 + t838 * t703;
t654 = -t837 * t700 + t838 * t702;
t649 = -pkin(1) * t732 + t860;
t648 = -pkin(1) * t728 + t851;
t647 = -t841 * t696 + t845 * t697;
t646 = t845 * t696 + t841 * t697;
t645 = -t837 * t694 + t838 * t695;
t644 = t838 * t694 + t837 * t695;
t639 = pkin(2) * t642;
t638 = qJ(3) * t872 + t902;
t634 = -t841 * t679 + t845 * t680;
t633 = t845 * t679 + t841 * t680;
t621 = -t841 * t665 + t845 * t667;
t620 = -t841 * t664 + t845 * t666;
t619 = t845 * t665 + t841 * t667;
t618 = t845 * t664 + t841 * t666;
t617 = -t841 * t657 + t845 * t659;
t616 = -t841 * t656 + t845 * t658;
t615 = t845 * t657 + t841 * t659;
t614 = t845 * t656 + t841 * t658;
t613 = -pkin(8) * t750 + t627;
t612 = -pkin(8) * t748 + t626;
t611 = -pkin(4) * t750 + t625;
t610 = -pkin(4) * t748 + t624;
t609 = -t841 * t653 + t845 * t655;
t608 = -t841 * t652 + t845 * t654;
t607 = t845 * t653 + t841 * t655;
t606 = t845 * t652 + t841 * t654;
t605 = -t841 * t644 + t845 * t645;
t604 = t845 * t644 + t841 * t645;
t599 = -pkin(1) * t677 + t854;
t598 = -pkin(1) * t673 + t849;
t588 = pkin(3) * t836 + pkin(7) * t873;
t583 = -pkin(7) * t725 + t844 * t586;
t582 = pkin(7) * t726 + t840 * t586;
t581 = -pkin(1) * t596 - t639;
t580 = -pkin(7) * t701 - t840 * t611 + t844 * t613;
t579 = -pkin(7) * t700 - t840 * t610 + t844 * t612;
t578 = -pkin(3) * t750 + pkin(7) * t703 + t844 * t611 + t840 * t613;
t577 = -pkin(3) * t748 + pkin(7) * t702 + t844 * t610 + t840 * t612;
t573 = pkin(1) * t607 + t857;
t572 = pkin(1) * t606 + t858;
t571 = pkin(6) * t596 + qJ(3) * t884 - t841 * t638;
t570 = pkin(6) * t924 + qJ(3) * t889 + t845 * t638 + t903;
t564 = pkin(1) * t633 + t852;
t563 = -qJ(3) * t679 - t837 * t582 + t838 * t583;
t562 = qJ(3) * t680 + t838 * t582 + t837 * t583;
t561 = -qJ(3) * t653 - t837 * t578 + t838 * t580;
t560 = -qJ(3) * t652 - t837 * t577 + t838 * t579;
t559 = -t837 * t575 + t838 * t576;
t556 = -pkin(2) * t750 + qJ(3) * t655 + t838 * t578 + t837 * t580;
t555 = -pkin(2) * t748 + qJ(3) * t654 + t838 * t577 + t837 * t579;
t554 = -pkin(7) * t575 - (pkin(4) * t840 - pkin(8) * t844) * t586;
t549 = pkin(7) * t896 + qJ(3) * t568 - t837 * t588;
t548 = pkin(7) * t898 + qJ(3) * t923 + t838 * t588 + t902;
t547 = pkin(7) * t576 - (-pkin(4) * t844 - pkin(8) * t840 - pkin(3)) * t586;
t546 = -pkin(6) * t633 - t841 * t562 + t845 * t563;
t545 = pkin(6) * t634 + t845 * t562 + t841 * t563;
t544 = -t841 * t558 + t845 * t559;
t543 = t845 * t558 + t841 * t559;
t542 = -pkin(1) * t552 + t882;
t541 = -pkin(6) * t607 - t841 * t556 + t845 * t561;
t540 = -pkin(6) * t606 - t841 * t555 + t845 * t560;
t539 = -pkin(1) * t750 + pkin(6) * t609 + t845 * t556 + t841 * t561;
t538 = -pkin(1) * t748 + pkin(6) * t608 + t845 * t555 + t841 * t560;
t537 = pkin(6) * t552 - t841 * t548 + t845 * t549;
t536 = pkin(6) * t948 + t845 * t548 + t841 * t549 + t903;
t535 = -qJ(3) * t558 - t837 * t547 + t838 * t554;
t534 = pkin(1) * t543 + t865;
t533 = pkin(2) * t586 + qJ(3) * t559 + t838 * t547 + t837 * t554;
t532 = -pkin(6) * t543 - t841 * t533 + t845 * t535;
t531 = pkin(1) * t586 + pkin(6) * t544 + t845 * t533 + t841 * t535;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t818, t817, 0, 0, 0, 0, 0, 0, 0, t832, t709, t708, 0, -t689, 0, 0, 0, 0, 0, t832, t649, t648, 0, t581, 0, 0, 0, 0, 0, t825, t599, t598, 0, t542, t739, t714, t749, t738, t747, 0, t572, t573, t564, t534; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t813, 0, t814, 0, t874, -t792, -t855, -pkin(5) * t855, 0, 0, t737, 0, -t856, 0, t935, t936, t925, pkin(5) * t925 + pkin(6) * t888 + t846 * t688, 0, 0, t685, 0, -t914, 0, t952, t953, t947, pkin(5) * t947 + t846 * t570 + t842 * t571, 0, 0, t630, 0, -t937, 0, t962, t963, t961, pkin(5) * t961 + t846 * t536 + t842 * t537, t846 * t615 + t842 * t617, t846 * t604 + t842 * t605, t846 * t619 + t842 * t621, t846 * t614 + t842 * t616, t846 * t618 + t842 * t620, t846 * t646 + t842 * t647, t842 * t540 + t846 * t538 - pkin(5) * (t842 * t606 - t846 * t608), t842 * t541 + t846 * t539 - pkin(5) * (t842 * t607 - t846 * t609), t842 * t546 + t846 * t545 - pkin(5) * (t842 * t633 - t846 * t634), t842 * t532 + t846 * t531 - pkin(5) * (t842 * t543 - t846 * t544); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t814, 0, -t813, 0, t792, t874, t868, pkin(5) * t868, 0, 0, t856, 0, t737, 0, -t936, t935, t926, pkin(5) * t926 - pkin(6) * t883 + t842 * t688, 0, 0, t914, 0, t685, 0, -t953, t952, t946, pkin(5) * t946 + t842 * t570 - t846 * t571, 0, 0, t937, 0, t630, 0, -t963, t962, t960, pkin(5) * t960 + t842 * t536 - t846 * t537, t842 * t615 - t846 * t617, t842 * t604 - t846 * t605, t842 * t619 - t846 * t621, t842 * t614 - t846 * t616, t842 * t618 - t846 * t620, t842 * t646 - t846 * t647, -t846 * t540 + t842 * t538 + pkin(5) * (t846 * t606 + t842 * t608), -t846 * t541 + t842 * t539 + pkin(5) * (t846 * t607 + t842 * t609), -t846 * t546 + t842 * t545 + pkin(5) * (t846 * t633 + t842 * t634), -t846 * t532 + t842 * t531 + pkin(5) * (t846 * t543 + t842 * t544); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t848, 0, 0, -g(1), t818, 0, 0, 0, -t802, 0, -t799, 0, t918, t769, t692, pkin(6) * t692, 0, 0, -t732, 0, -t728, 0, t934, t671, t596, t571, 0, 0, -t677, 0, -t673, 0, t951, t603, t552, t537, t617, t605, t621, t616, t620, t647, t540, t541, t546, t532; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t848, 0, qJDD(1), 0, g(1), 0, -t817, 0, 0, 0, t799, 0, -t802, 0, -t769, t918, t871, t688, 0, 0, t728, 0, -t732, 0, -t671, t934, t924, t570, 0, 0, t673, 0, -t677, 0, -t603, t951, t948, t536, t615, t604, t619, t614, t618, t646, t538, t539, t545, t531; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t818, t817, 0, 0, 0, 0, 0, 0, 0, t832, t709, t708, 0, -t689, 0, 0, 0, 0, 0, t832, t649, t648, 0, t581, 0, 0, 0, 0, 0, t825, t599, t598, 0, t542, t739, t714, t749, t738, t747, 0, t572, t573, t564, t534; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t832, 0, -t831, 0, 0, -g(1), t745, 0, 0, 0, -t798, 0, -t795, 0, t916, t764, t642, qJ(3) * t642, 0, 0, -t723, 0, -t719, 0, t933, t663, t568, t549, t659, t645, t667, t658, t666, t697, t560, t561, t563, t535; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t831, 0, t832, 0, g(1), 0, t746, 0, 0, 0, t795, 0, -t798, 0, -t764, t916, t872, t638, 0, 0, t719, 0, -t723, 0, -t663, t933, t923, t548, t657, t644, t665, t656, t664, t696, t555, t556, t562, t533; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t832, -t745, -t746, 0, 0, 0, 0, 0, 0, 0, t832, t860, t851, 0, -t639, 0, 0, 0, 0, 0, t825, t854, t849, 0, t882, t739, t714, t749, t738, t747, 0, t858, t857, t852, t865; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t832, 0, -t831, 0, 0, -t836, t686, 0, 0, 0, -t787, 0, -t784, 0, t917, t760, t592, pkin(7) * t592, t707, t695, t713, t706, t712, t756, t579, t580, t583, t554; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t831, 0, t832, 0, t836, 0, t687, 0, 0, 0, t784, 0, -t787, 0, -t760, t917, t873, t588, t705, t694, t711, t704, t710, t755, t577, t578, t582, t547; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t832, -t686, -t687, 0, 0, 0, 0, 0, 0, 0, t825, t861, t850, 0, -t589, t739, t714, t749, t738, t747, 0, t862, t863, t859, t876; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t825, 0, -t824, 0, 0, -t836, t636, 0, t744, t715, t753, t743, t751, t772, t612, t613, t586, pkin(8) * t586; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t824, 0, t825, 0, t836, 0, t637, 0, t812, -t789, -t892, -t812, -t819, -qJDD(5), t610, t611, 0, pkin(4) * t586; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t825, -t636, -t637, 0, 0, t739, t714, t749, t738, t747, 0, t877, t878, t864, t881; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t777, t779, t803, -t816, t810, t816, 0, t631, t624, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t875, t776, t808, t778, t804, -t875, -t631, 0, t625, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t812, t789, t892, t812, t819, qJDD(5), -t624, -t625, 0, 0;];
m_new_reg = t1;
