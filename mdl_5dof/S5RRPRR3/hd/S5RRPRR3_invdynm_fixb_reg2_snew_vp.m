% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:31
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPRR3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR3_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR3_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR3_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR3_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:30:46
% EndTime: 2019-12-05 18:30:57
% DurationCPUTime: 11.85s
% Computational Cost: add. (56799->425), mult. (74873->562), div. (0->0), fcn. (44118->10), ass. (0->286)
t822 = qJD(1) + qJD(2);
t818 = qJD(4) + t822;
t816 = t818 ^ 2;
t821 = qJDD(1) + qJDD(2);
t817 = qJDD(4) + t821;
t829 = sin(qJ(4));
t833 = cos(qJ(4));
t777 = t816 * t833 + t817 * t829;
t780 = t816 * t829 - t817 * t833;
t826 = sin(pkin(9));
t827 = cos(pkin(9));
t713 = t777 * t827 - t780 * t826;
t825 = g(1) - qJDD(3);
t754 = pkin(7) * t777 - t825 * t833;
t903 = pkin(7) * t780 - t825 * t829;
t657 = qJ(3) * t713 + t754 * t827 - t826 * t903;
t717 = t777 * t826 + t780 * t827;
t830 = sin(qJ(2));
t834 = cos(qJ(2));
t667 = t713 * t834 - t717 * t830;
t918 = qJ(3) * t717 + t754 * t826 + t827 * t903;
t597 = pkin(6) * t667 + t657 * t834 - t830 * t918;
t671 = t713 * t830 + t717 * t834;
t831 = sin(qJ(1));
t835 = cos(qJ(1));
t623 = t667 * t831 + t671 * t835;
t935 = pkin(6) * t671 + t657 * t830 + t834 * t918;
t947 = pkin(5) * t623 + t831 * t597 + t835 * t935;
t937 = t667 * t835 - t671 * t831;
t946 = pkin(5) * t937 + t835 * t597 - t831 * t935;
t810 = g(2) * t835 + g(3) * t831;
t798 = qJDD(1) * pkin(1) + t810;
t809 = g(2) * t831 - t835 * g(3);
t837 = qJD(1) ^ 2;
t799 = -pkin(1) * t837 + t809;
t739 = -t834 * t798 + t799 * t830;
t728 = pkin(2) * t821 - t739;
t740 = t798 * t830 + t799 * t834;
t820 = t822 ^ 2;
t729 = -pkin(2) * t820 + t740;
t681 = t728 * t826 + t729 * t827;
t676 = -pkin(3) * t820 + t681;
t680 = -t827 * t728 + t729 * t826;
t842 = pkin(3) * t821 - t680;
t630 = t676 * t829 - t833 * t842;
t631 = t833 * t676 + t829 * t842;
t862 = t630 * t829 + t833 * t631;
t586 = t630 * t833 - t631 * t829;
t884 = t586 * t827;
t562 = -t826 * t862 + t884;
t885 = t586 * t826;
t907 = t827 * t862 + t885;
t546 = t562 * t834 - t830 * t907;
t931 = t562 * t830 + t834 * t907;
t944 = t546 * t831 + t835 * t931;
t943 = t546 * t835 - t831 * t931;
t788 = t820 * t827 + t821 * t826;
t791 = t820 * t826 - t821 * t827;
t722 = t788 * t834 - t791 * t830;
t758 = qJ(3) * t788 - t825 * t827;
t902 = qJ(3) * t791 - t825 * t826;
t665 = pkin(6) * t722 + t758 * t834 - t830 * t902;
t726 = t788 * t830 + t791 * t834;
t678 = t722 * t831 + t726 * t835;
t919 = pkin(6) * t726 + t758 * t830 + t834 * t902;
t938 = pkin(5) * t678 + t831 * t665 + t835 * t919;
t921 = t722 * t835 - t726 * t831;
t936 = pkin(5) * t921 + t835 * t665 - t831 * t919;
t861 = t680 * t826 + t827 * t681;
t636 = t680 * t827 - t681 * t826;
t882 = t636 * t834;
t590 = -t830 * t861 + t882;
t883 = t636 * t830;
t908 = t834 * t861 + t883;
t930 = t590 * t831 + t835 * t908;
t929 = t590 * t835 - t831 * t908;
t792 = t820 * t834 + t821 * t830;
t795 = t820 * t830 - t821 * t834;
t730 = t792 * t831 + t795 * t835;
t763 = pkin(6) * t792 - g(1) * t834;
t904 = pkin(6) * t795 - g(1) * t830;
t922 = pkin(5) * t730 + t831 * t763 + t835 * t904;
t900 = t792 * t835 - t795 * t831;
t920 = pkin(5) * t900 + t835 * t763 - t831 * t904;
t860 = t739 * t830 + t834 * t740;
t686 = t739 * t834 - t740 * t830;
t880 = t686 * t835;
t910 = -t831 * t860 + t880;
t881 = t686 * t831;
t909 = t835 * t860 + t881;
t626 = -t816 * pkin(4) + t817 * pkin(8) + t631;
t828 = sin(qJ(5));
t832 = cos(qJ(5));
t618 = t626 * t828 + t832 * t825;
t619 = t626 * t832 - t825 * t828;
t581 = t828 * t618 + t832 * t619;
t889 = pkin(1) * t825;
t888 = pkin(2) * t825;
t804 = t832 * t816 * t828;
t796 = qJDD(5) + t804;
t879 = t796 * t828;
t797 = qJDD(5) - t804;
t878 = t797 * t828;
t877 = t797 * t832;
t823 = t828 ^ 2;
t876 = t816 * t823;
t625 = -t817 * pkin(4) - t816 * pkin(8) + t630;
t620 = t828 * t625;
t871 = t828 * t817;
t621 = t832 * t625;
t811 = t832 * t817;
t583 = pkin(3) * t586;
t870 = -pkin(2) * t562 - t583;
t869 = -pkin(4) * t625 + pkin(8) * t581;
t824 = t832 ^ 2;
t868 = t823 + t824;
t867 = qJD(5) * t818;
t836 = qJD(5) ^ 2;
t801 = -t836 - t876;
t748 = -t801 * t828 - t877;
t808 = t832 * t867;
t770 = 0.2e1 * t808 + t871;
t866 = -pkin(4) * t770 + pkin(8) * t748 + t620;
t812 = t824 * t816;
t803 = -t812 - t836;
t746 = t803 * t832 - t879;
t863 = t828 * t867;
t773 = t811 - 0.2e1 * t863;
t865 = pkin(4) * t773 + pkin(8) * t746 - t621;
t569 = t581 * t829 - t625 * t833;
t864 = pkin(3) * t569 + t869;
t857 = t829 * t804;
t856 = t833 * t804;
t570 = t581 * t833 + t625 * t829;
t552 = t569 * t827 + t570 * t826;
t855 = pkin(2) * t552 + t864;
t776 = t868 * t817;
t781 = t812 + t876;
t854 = pkin(4) * t781 + pkin(8) * t776 + t581;
t695 = t748 * t829 - t770 * t833;
t853 = pkin(3) * t695 + t866;
t694 = t746 * t829 + t773 * t833;
t852 = pkin(3) * t694 + t865;
t805 = qJDD(1) * t831 + t835 * t837;
t851 = pkin(5) * t805 - g(1) * t835;
t850 = -pkin(3) * t780 - t630;
t849 = -pkin(2) * t791 - t680;
t719 = t776 * t829 + t781 * t833;
t848 = pkin(3) * t719 + t854;
t696 = t746 * t833 - t773 * t829;
t646 = t694 * t827 + t696 * t826;
t847 = pkin(2) * t646 + t852;
t697 = t748 * t833 + t770 * t829;
t647 = t695 * t827 + t697 * t826;
t846 = pkin(2) * t647 + t853;
t580 = t618 * t832 - t619 * t828;
t845 = t809 * t835 - t810 * t831;
t844 = -t809 * t831 - t810 * t835;
t843 = -pkin(2) * t717 + t850;
t720 = t776 * t833 - t781 * t829;
t673 = t719 * t827 + t720 * t826;
t841 = pkin(2) * t673 + t848;
t840 = -pkin(2) * t788 - t681;
t839 = -pkin(3) * t777 - t631;
t838 = -pkin(2) * t713 + t839;
t806 = -qJDD(1) * t835 + t831 * t837;
t802 = t812 - t836;
t800 = t836 - t876;
t786 = t832 * t796;
t785 = -pkin(5) * t806 + g(1) * t831;
t782 = -t812 + t876;
t772 = t811 - t863;
t771 = t808 + t871;
t766 = t868 * t867;
t750 = qJDD(5) * t829 + t766 * t833;
t749 = -qJDD(5) * t833 + t766 * t829;
t747 = -t800 * t828 + t786;
t745 = t802 * t832 - t878;
t744 = t801 * t832 - t878;
t743 = t800 * t832 + t879;
t742 = t803 * t828 + t786;
t741 = t802 * t828 + t877;
t738 = t771 * t832 - t823 * t867;
t737 = -t772 * t828 - t824 * t867;
t733 = (t771 + t808) * t828;
t732 = (t772 - t863) * t832;
t709 = -t770 * t828 + t773 * t832;
t708 = t770 * t832 + t773 * t828;
t707 = t747 * t833 + t829 * t871;
t706 = t745 * t833 + t829 * t811;
t705 = t747 * t829 - t833 * t871;
t704 = t745 * t829 - t833 * t811;
t703 = -pkin(1) * t795 - t739;
t702 = -pkin(1) * t792 - t740;
t701 = t738 * t833 - t857;
t700 = t737 * t833 + t857;
t699 = t738 * t829 + t856;
t698 = t737 * t829 - t856;
t691 = -t749 * t826 + t750 * t827;
t690 = t749 * t827 + t750 * t826;
t689 = t709 * t833 + t782 * t829;
t688 = t709 * t829 - t782 * t833;
t683 = pkin(1) * t686;
t682 = pkin(1) * g(1) + pkin(6) * t860;
t674 = -t719 * t826 + t720 * t827;
t661 = -t705 * t826 + t707 * t827;
t660 = -t704 * t826 + t706 * t827;
t659 = t705 * t827 + t707 * t826;
t658 = t704 * t827 + t706 * t826;
t653 = -t699 * t826 + t701 * t827;
t652 = -t698 * t826 + t700 * t827;
t651 = t699 * t827 + t701 * t826;
t650 = t698 * t827 + t700 * t826;
t649 = -t695 * t826 + t697 * t827;
t648 = -t694 * t826 + t696 * t827;
t643 = -pkin(1) * t726 + t849;
t642 = -pkin(1) * t722 + t840;
t641 = -t690 * t830 + t691 * t834;
t640 = t690 * t834 + t691 * t830;
t639 = -t688 * t826 + t689 * t827;
t638 = t688 * t827 + t689 * t826;
t633 = pkin(2) * t636;
t632 = qJ(3) * t861 + t888;
t628 = -t673 * t830 + t674 * t834;
t627 = t673 * t834 + t674 * t830;
t615 = -t659 * t830 + t661 * t834;
t614 = -t658 * t830 + t660 * t834;
t613 = t659 * t834 + t661 * t830;
t612 = t658 * t834 + t660 * t830;
t611 = -t651 * t830 + t653 * t834;
t610 = -t650 * t830 + t652 * t834;
t609 = t651 * t834 + t653 * t830;
t608 = t650 * t834 + t652 * t830;
t607 = -pkin(8) * t744 + t621;
t606 = -pkin(8) * t742 + t620;
t605 = -pkin(4) * t744 + t619;
t604 = -pkin(4) * t742 + t618;
t603 = -t647 * t830 + t649 * t834;
t602 = -t646 * t830 + t648 * t834;
t601 = t647 * t834 + t649 * t830;
t600 = t646 * t834 + t648 * t830;
t599 = -t638 * t830 + t639 * t834;
t598 = t638 * t834 + t639 * t830;
t593 = -pkin(1) * t671 + t843;
t592 = -pkin(1) * t667 + t838;
t582 = pkin(3) * t825 + pkin(7) * t862;
t577 = -pkin(7) * t719 + t580 * t833;
t576 = pkin(7) * t720 + t580 * t829;
t575 = -pkin(1) * t590 - t633;
t574 = -pkin(7) * t695 - t605 * t829 + t607 * t833;
t573 = -pkin(7) * t694 - t604 * t829 + t606 * t833;
t572 = -pkin(3) * t744 + pkin(7) * t697 + t605 * t833 + t607 * t829;
t571 = -pkin(3) * t742 + pkin(7) * t696 + t604 * t833 + t606 * t829;
t567 = pkin(1) * t601 + t846;
t566 = pkin(1) * t600 + t847;
t565 = pkin(6) * t590 + qJ(3) * t882 - t632 * t830;
t564 = pkin(6) * t908 + qJ(3) * t883 + t632 * t834 + t889;
t558 = pkin(1) * t627 + t841;
t557 = -qJ(3) * t673 - t576 * t826 + t577 * t827;
t556 = qJ(3) * t674 + t576 * t827 + t577 * t826;
t555 = -qJ(3) * t647 - t572 * t826 + t574 * t827;
t554 = -qJ(3) * t646 - t571 * t826 + t573 * t827;
t553 = -t569 * t826 + t570 * t827;
t550 = -pkin(2) * t744 + qJ(3) * t649 + t572 * t827 + t574 * t826;
t549 = -pkin(2) * t742 + qJ(3) * t648 + t571 * t827 + t573 * t826;
t548 = -pkin(7) * t569 - (pkin(4) * t829 - pkin(8) * t833) * t580;
t543 = pkin(7) * t884 + qJ(3) * t562 - t582 * t826;
t542 = pkin(7) * t885 + qJ(3) * t907 + t582 * t827 + t888;
t541 = pkin(7) * t570 - (-pkin(4) * t833 - pkin(8) * t829 - pkin(3)) * t580;
t540 = -pkin(6) * t627 - t556 * t830 + t557 * t834;
t539 = pkin(6) * t628 + t556 * t834 + t557 * t830;
t538 = -t552 * t830 + t553 * t834;
t537 = t552 * t834 + t553 * t830;
t536 = -pkin(1) * t546 + t870;
t535 = -pkin(6) * t601 - t550 * t830 + t555 * t834;
t534 = -pkin(6) * t600 - t549 * t830 + t554 * t834;
t533 = -pkin(1) * t744 + pkin(6) * t603 + t550 * t834 + t555 * t830;
t532 = -pkin(1) * t742 + pkin(6) * t602 + t549 * t834 + t554 * t830;
t531 = pkin(6) * t546 - t542 * t830 + t543 * t834;
t530 = pkin(6) * t931 + t542 * t834 + t543 * t830 + t889;
t529 = -qJ(3) * t552 - t541 * t826 + t548 * t827;
t528 = pkin(1) * t537 + t855;
t527 = pkin(2) * t580 + qJ(3) * t553 + t541 * t827 + t548 * t826;
t526 = -pkin(6) * t537 - t527 * t830 + t529 * t834;
t525 = pkin(1) * t580 + pkin(6) * t538 + t527 * t834 + t529 * t830;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t810, -t809, 0, 0, 0, 0, 0, 0, 0, t821, t703, t702, 0, -t683, 0, 0, 0, 0, 0, t821, t643, t642, 0, t575, 0, 0, 0, 0, 0, t817, t593, t592, 0, t536, t733, t708, t743, t732, t741, 0, t566, t567, t558, t528; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t805, 0, t806, 0, t851, t785, -t845, -pkin(5) * t845, 0, 0, -t900, 0, t730, 0, t920, -t922, -t909, -pkin(5) * t909 - pkin(6) * t881 - t835 * t682, 0, 0, -t921, 0, t678, 0, t936, -t938, -t930, -pkin(5) * t930 - t835 * t564 - t831 * t565, 0, 0, -t937, 0, t623, 0, t946, -t947, -t944, -pkin(5) * t944 - t835 * t530 - t831 * t531, -t609 * t835 - t611 * t831, -t598 * t835 - t599 * t831, -t613 * t835 - t615 * t831, -t608 * t835 - t610 * t831, -t612 * t835 - t614 * t831, -t640 * t835 - t641 * t831, -t831 * t534 - t835 * t532 - pkin(5) * (-t600 * t831 + t602 * t835), -t831 * t535 - t835 * t533 - pkin(5) * (-t601 * t831 + t603 * t835), -t831 * t540 - t835 * t539 - pkin(5) * (-t627 * t831 + t628 * t835), -t831 * t526 - t835 * t525 - pkin(5) * (-t537 * t831 + t538 * t835); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t806, 0, -t805, 0, -t785, t851, t844, pkin(5) * t844, 0, 0, -t730, 0, -t900, 0, t922, t920, t910, pkin(5) * t910 + pkin(6) * t880 - t831 * t682, 0, 0, -t678, 0, -t921, 0, t938, t936, t929, pkin(5) * t929 - t831 * t564 + t835 * t565, 0, 0, -t623, 0, -t937, 0, t947, t946, t943, pkin(5) * t943 - t831 * t530 + t835 * t531, -t609 * t831 + t611 * t835, -t598 * t831 + t599 * t835, -t613 * t831 + t615 * t835, -t608 * t831 + t610 * t835, -t612 * t831 + t614 * t835, -t640 * t831 + t641 * t835, t835 * t534 - t831 * t532 + pkin(5) * (-t600 * t835 - t602 * t831), t835 * t535 - t831 * t533 + pkin(5) * (-t601 * t835 - t603 * t831), t835 * t540 - t831 * t539 + pkin(5) * (-t627 * t835 - t628 * t831), t835 * t526 - t831 * t525 + pkin(5) * (-t537 * t835 - t538 * t831); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t837, 0, 0, -g(1), -t810, 0, 0, 0, -t795, 0, -t792, 0, t904, t763, t686, pkin(6) * t686, 0, 0, -t726, 0, -t722, 0, t919, t665, t590, t565, 0, 0, -t671, 0, -t667, 0, t935, t597, t546, t531, t611, t599, t615, t610, t614, t641, t534, t535, t540, t526; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t837, 0, qJDD(1), 0, g(1), 0, t809, 0, 0, 0, t792, 0, -t795, 0, -t763, t904, t860, t682, 0, 0, t722, 0, -t726, 0, -t665, t919, t908, t564, 0, 0, t667, 0, -t671, 0, -t597, t935, t931, t530, t609, t598, t613, t608, t612, t640, t532, t533, t539, t525; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t810, -t809, 0, 0, 0, 0, 0, 0, 0, t821, t703, t702, 0, -t683, 0, 0, 0, 0, 0, t821, t643, t642, 0, t575, 0, 0, 0, 0, 0, t817, t593, t592, 0, t536, t733, t708, t743, t732, t741, 0, t566, t567, t558, t528; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t821, 0, -t820, 0, 0, -g(1), t739, 0, 0, 0, -t791, 0, -t788, 0, t902, t758, t636, qJ(3) * t636, 0, 0, -t717, 0, -t713, 0, t918, t657, t562, t543, t653, t639, t661, t652, t660, t691, t554, t555, t557, t529; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t820, 0, t821, 0, g(1), 0, t740, 0, 0, 0, t788, 0, -t791, 0, -t758, t902, t861, t632, 0, 0, t713, 0, -t717, 0, -t657, t918, t907, t542, t651, t638, t659, t650, t658, t690, t549, t550, t556, t527; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t821, -t739, -t740, 0, 0, 0, 0, 0, 0, 0, t821, t849, t840, 0, -t633, 0, 0, 0, 0, 0, t817, t843, t838, 0, t870, t733, t708, t743, t732, t741, 0, t847, t846, t841, t855; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t821, 0, -t820, 0, 0, -t825, t680, 0, 0, 0, -t780, 0, -t777, 0, t903, t754, t586, pkin(7) * t586, t701, t689, t707, t700, t706, t750, t573, t574, t577, t548; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t820, 0, t821, 0, t825, 0, t681, 0, 0, 0, t777, 0, -t780, 0, -t754, t903, t862, t582, t699, t688, t705, t698, t704, t749, t571, t572, t576, t541; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t821, -t680, -t681, 0, 0, 0, 0, 0, 0, 0, t817, t850, t839, 0, -t583, t733, t708, t743, t732, t741, 0, t852, t853, t848, t864; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t817, 0, -t816, 0, 0, -t825, t630, 0, t738, t709, t747, t737, t745, t766, t606, t607, t580, pkin(8) * t580; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t816, 0, t817, 0, t825, 0, t631, 0, t804, -t782, -t871, -t804, -t811, -qJDD(5), t604, t605, 0, pkin(4) * t580; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t817, -t630, -t631, 0, 0, t733, t708, t743, t732, t741, 0, t865, t866, t854, t869; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t771, t773, t796, -t808, t802, t808, 0, t625, t618, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t863, t770, t800, t772, t797, -t863, -t625, 0, t619, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t804, t782, t871, t804, t811, qJDD(5), -t618, -t619, 0, 0;];
m_new_reg = t1;
