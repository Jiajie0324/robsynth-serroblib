% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:31
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPRR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR3_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR3_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR3_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:30:57
% EndTime: 2019-12-05 18:30:59
% DurationCPUTime: 2.34s
% Computational Cost: add. (9204->145), mult. (12202->204), div. (0->0), fcn. (7318->10), ass. (0->115)
t1070 = sin(qJ(1));
t1074 = cos(qJ(1));
t1061 = qJD(1) + qJD(2);
t1055 = qJD(4) + t1061;
t1053 = t1055 ^ 2;
t1060 = qJDD(1) + qJDD(2);
t1054 = qJDD(4) + t1060;
t1068 = sin(qJ(4));
t1072 = cos(qJ(4));
t1025 = t1068 * t1053 - t1072 * t1054;
t1065 = sin(pkin(9));
t1066 = cos(pkin(9));
t1080 = -t1072 * t1053 - t1068 * t1054;
t1002 = t1066 * t1025 - t1065 * t1080;
t1069 = sin(qJ(2));
t1073 = cos(qJ(2));
t1094 = t1065 * t1025 + t1066 * t1080;
t1101 = t1069 * t1002 + t1073 * t1094;
t984 = t1073 * t1002 - t1069 * t1094;
t1105 = t1070 * t984 + t1074 * t1101;
t1104 = -t1070 * t1101 + t1074 * t984;
t1059 = t1061 ^ 2;
t1032 = t1065 * t1059 - t1066 * t1060;
t1079 = -t1066 * t1059 - t1065 * t1060;
t1010 = t1073 * t1032 - t1069 * t1079;
t1093 = t1069 * t1032 + t1073 * t1079;
t1100 = t1070 * t1010 + t1074 * t1093;
t1099 = t1074 * t1010 - t1070 * t1093;
t1037 = t1069 * t1059 - t1073 * t1060;
t1078 = -t1073 * t1059 - t1069 * t1060;
t1092 = t1070 * t1037 + t1074 * t1078;
t1091 = t1074 * t1037 - t1070 * t1078;
t1050 = t1074 * g(2) + t1070 * g(3);
t1041 = qJDD(1) * pkin(1) + t1050;
t1049 = t1070 * g(2) - t1074 * g(3);
t1076 = qJD(1) ^ 2;
t1042 = -t1076 * pkin(1) + t1049;
t1014 = t1073 * t1041 - t1069 * t1042;
t1012 = t1060 * pkin(2) + t1014;
t1015 = t1069 * t1041 + t1073 * t1042;
t1013 = -t1059 * pkin(2) + t1015;
t992 = t1066 * t1012 - t1065 * t1013;
t1077 = t1060 * pkin(3) + t992;
t993 = t1065 * t1012 + t1066 * t1013;
t991 = -t1059 * pkin(3) + t993;
t975 = t1068 * t1077 + t1072 * t991;
t1084 = qJD(5) * t1055;
t1067 = sin(qJ(5));
t1083 = t1067 * t1054;
t1071 = cos(qJ(5));
t1082 = t1071 * t1054;
t1062 = t1067 ^ 2;
t1063 = t1071 ^ 2;
t1081 = t1062 + t1063;
t974 = -t1068 * t991 + t1072 * t1077;
t1075 = qJD(5) ^ 2;
t1064 = -g(1) + qJDD(3);
t1047 = -t1074 * qJDD(1) + t1070 * t1076;
t1046 = t1070 * qJDD(1) + t1074 * t1076;
t1045 = t1071 * t1053 * t1067;
t1044 = -t1063 * t1053 - t1075;
t1043 = -t1062 * t1053 - t1075;
t1040 = -qJDD(5) + t1045;
t1039 = qJDD(5) + t1045;
t1027 = t1081 * t1053;
t1022 = t1081 * t1054;
t1021 = -0.2e1 * t1067 * t1084 + t1082;
t1020 = 0.2e1 * t1071 * t1084 + t1083;
t1019 = t1071 * t1040 - t1067 * t1043;
t1018 = -t1067 * t1039 + t1071 * t1044;
t1017 = t1067 * t1040 + t1071 * t1043;
t1016 = t1071 * t1039 + t1067 * t1044;
t1005 = t1072 * t1022 - t1068 * t1027;
t1004 = t1068 * t1022 + t1072 * t1027;
t999 = t1072 * t1019 + t1068 * t1020;
t998 = t1072 * t1018 - t1068 * t1021;
t997 = t1068 * t1019 - t1072 * t1020;
t996 = t1068 * t1018 + t1072 * t1021;
t995 = -t1069 * t1014 + t1073 * t1015;
t994 = t1073 * t1014 + t1069 * t1015;
t987 = -t1065 * t1004 + t1066 * t1005;
t986 = t1066 * t1004 + t1065 * t1005;
t981 = -t1065 * t997 + t1066 * t999;
t980 = -t1065 * t996 + t1066 * t998;
t979 = t1065 * t999 + t1066 * t997;
t978 = t1065 * t998 + t1066 * t996;
t977 = -t1065 * t992 + t1066 * t993;
t976 = t1065 * t993 + t1066 * t992;
t973 = -t1069 * t986 + t1073 * t987;
t972 = t1069 * t987 + t1073 * t986;
t971 = -t1053 * pkin(4) + t1054 * pkin(8) + t975;
t970 = -t1054 * pkin(4) - t1053 * pkin(8) - t974;
t969 = t1067 * t1064 + t1071 * t971;
t968 = t1071 * t1064 - t1067 * t971;
t967 = -t1069 * t979 + t1073 * t981;
t966 = -t1069 * t978 + t1073 * t980;
t965 = t1069 * t981 + t1073 * t979;
t964 = t1069 * t980 + t1073 * t978;
t963 = -t1069 * t976 + t1073 * t977;
t962 = t1069 * t977 + t1073 * t976;
t961 = -t1068 * t974 + t1072 * t975;
t960 = t1068 * t975 + t1072 * t974;
t959 = -t1067 * t968 + t1071 * t969;
t958 = t1067 * t969 + t1071 * t968;
t957 = t1068 * t970 + t1072 * t959;
t956 = t1068 * t959 - t1072 * t970;
t955 = -t1065 * t960 + t1066 * t961;
t954 = t1065 * t961 + t1066 * t960;
t953 = -t1065 * t956 + t1066 * t957;
t952 = t1065 * t957 + t1066 * t956;
t951 = -t1069 * t954 + t1073 * t955;
t950 = t1069 * t955 + t1073 * t954;
t949 = -t1069 * t952 + t1073 * t953;
t948 = t1069 * t953 + t1073 * t952;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1064, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1064, 0, 0, 0, 0, 0, 0, t1016, t1017, 0, t958; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1047, t1046, 0, -t1070 * t1049 - t1074 * t1050, 0, 0, 0, 0, 0, 0, t1091, -t1092, 0, -t1070 * t995 - t1074 * t994, 0, 0, 0, 0, 0, 0, t1099, -t1100, 0, -t1070 * t963 - t1074 * t962, 0, 0, 0, 0, 0, 0, t1104, -t1105, 0, -t1070 * t951 - t1074 * t950, 0, 0, 0, 0, 0, 0, -t1070 * t966 - t1074 * t964, -t1070 * t967 - t1074 * t965, -t1070 * t973 - t1074 * t972, -t1070 * t949 - t1074 * t948; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1046, t1047, 0, t1074 * t1049 - t1070 * t1050, 0, 0, 0, 0, 0, 0, t1092, t1091, 0, -t1070 * t994 + t1074 * t995, 0, 0, 0, 0, 0, 0, t1100, t1099, 0, -t1070 * t962 + t1074 * t963, 0, 0, 0, 0, 0, 0, t1105, t1104, 0, -t1070 * t950 + t1074 * t951, 0, 0, 0, 0, 0, 0, -t1070 * t964 + t1074 * t966, -t1070 * t965 + t1074 * t967, -t1070 * t972 + t1074 * t973, -t1070 * t948 + t1074 * t949; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1076, -qJDD(1), 0, t1049, 0, 0, 0, 0, 0, 0, t1078, t1037, 0, t995, 0, 0, 0, 0, 0, 0, t1093, t1010, 0, t963, 0, 0, 0, 0, 0, 0, t1101, t984, 0, t951, 0, 0, 0, 0, 0, 0, t966, t967, t973, t949; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1076, 0, t1050, 0, 0, 0, 0, 0, 0, -t1037, t1078, 0, t994, 0, 0, 0, 0, 0, 0, -t1010, t1093, 0, t962, 0, 0, 0, 0, 0, 0, -t984, t1101, 0, t950, 0, 0, 0, 0, 0, 0, t964, t965, t972, t948; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1064, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1064, 0, 0, 0, 0, 0, 0, t1016, t1017, 0, t958; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1059, -t1060, 0, t1015, 0, 0, 0, 0, 0, 0, t1079, t1032, 0, t977, 0, 0, 0, 0, 0, 0, t1094, t1002, 0, t955, 0, 0, 0, 0, 0, 0, t980, t981, t987, t953; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1060, -t1059, 0, t1014, 0, 0, 0, 0, 0, 0, -t1032, t1079, 0, t976, 0, 0, 0, 0, 0, 0, -t1002, t1094, 0, t954, 0, 0, 0, 0, 0, 0, t978, t979, t986, t952; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1064, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1064, 0, 0, 0, 0, 0, 0, t1016, t1017, 0, t958; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1059, -t1060, 0, t993, 0, 0, 0, 0, 0, 0, t1080, t1025, 0, t961, 0, 0, 0, 0, 0, 0, t998, t999, t1005, t957; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1060, -t1059, 0, t992, 0, 0, 0, 0, 0, 0, -t1025, t1080, 0, t960, 0, 0, 0, 0, 0, 0, t996, t997, t1004, t956; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1064, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1064, 0, 0, 0, 0, 0, 0, t1016, t1017, 0, t958; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1053, -t1054, 0, t975, 0, 0, 0, 0, 0, 0, t1018, t1019, t1022, t959; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1054, -t1053, 0, t974, 0, 0, 0, 0, 0, 0, t1021, -t1020, t1027, -t970; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1064, 0, 0, 0, 0, 0, 0, t1016, t1017, 0, t958; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1044, t1040, t1082, t969; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1039, t1043, -t1083, t968; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1021, t1020, -t1027, t970;];
f_new_reg = t1;
