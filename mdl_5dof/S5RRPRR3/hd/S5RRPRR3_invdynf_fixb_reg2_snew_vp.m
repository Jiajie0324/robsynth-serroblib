% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 12:00
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPRR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR3_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR3_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR3_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 12:00:56
% EndTime: 2020-01-03 12:00:58
% DurationCPUTime: 2.07s
% Computational Cost: add. (9204->145), mult. (12202->204), div. (0->0), fcn. (7318->10), ass. (0->115)
t1075 = qJD(1) + qJD(2);
t1071 = qJD(4) + t1075;
t1069 = t1071 ^ 2;
t1074 = qJDD(1) + qJDD(2);
t1070 = qJDD(4) + t1074;
t1082 = sin(qJ(4));
t1086 = cos(qJ(4));
t1041 = t1082 * t1069 - t1086 * t1070;
t1079 = sin(pkin(9));
t1080 = cos(pkin(9));
t1094 = -t1086 * t1069 - t1082 * t1070;
t1018 = t1080 * t1041 - t1079 * t1094;
t1083 = sin(qJ(2));
t1087 = cos(qJ(2));
t1108 = t1079 * t1041 + t1080 * t1094;
t1000 = t1087 * t1018 - t1083 * t1108;
t1084 = sin(qJ(1));
t1088 = cos(qJ(1));
t1115 = t1083 * t1018 + t1087 * t1108;
t1119 = t1084 * t1000 + t1088 * t1115;
t1118 = -t1088 * t1000 + t1084 * t1115;
t1073 = t1075 ^ 2;
t1048 = t1079 * t1073 - t1080 * t1074;
t1093 = -t1080 * t1073 - t1079 * t1074;
t1026 = t1087 * t1048 - t1083 * t1093;
t1107 = t1083 * t1048 + t1087 * t1093;
t1114 = t1084 * t1026 + t1088 * t1107;
t1113 = -t1088 * t1026 + t1084 * t1107;
t1053 = t1083 * t1073 - t1087 * t1074;
t1092 = -t1087 * t1073 - t1083 * t1074;
t1106 = t1084 * t1053 + t1088 * t1092;
t1105 = -t1088 * t1053 + t1084 * t1092;
t1098 = qJD(5) * t1071;
t1081 = sin(qJ(5));
t1097 = t1081 * t1070;
t1085 = cos(qJ(5));
t1096 = t1085 * t1070;
t1066 = -t1088 * g(2) - t1084 * g(3);
t1057 = qJDD(1) * pkin(1) + t1066;
t1065 = -t1084 * g(2) + t1088 * g(3);
t1090 = qJD(1) ^ 2;
t1058 = -t1090 * pkin(1) + t1065;
t1030 = t1087 * t1057 - t1083 * t1058;
t1028 = t1074 * pkin(2) + t1030;
t1031 = t1083 * t1057 + t1087 * t1058;
t1029 = -t1073 * pkin(2) + t1031;
t1009 = t1079 * t1028 + t1080 * t1029;
t1007 = -t1073 * pkin(3) + t1009;
t1008 = t1080 * t1028 - t1079 * t1029;
t1091 = t1074 * pkin(3) + t1008;
t991 = t1086 * t1007 + t1082 * t1091;
t1076 = t1081 ^ 2;
t1077 = t1085 ^ 2;
t1095 = t1076 + t1077;
t990 = -t1082 * t1007 + t1086 * t1091;
t1089 = qJD(5) ^ 2;
t1078 = -g(1) + qJDD(3);
t1063 = t1088 * qJDD(1) - t1084 * t1090;
t1062 = -t1084 * qJDD(1) - t1088 * t1090;
t1061 = t1085 * t1069 * t1081;
t1060 = -t1077 * t1069 - t1089;
t1059 = -t1076 * t1069 - t1089;
t1056 = -qJDD(5) + t1061;
t1055 = qJDD(5) + t1061;
t1043 = t1095 * t1069;
t1038 = t1095 * t1070;
t1037 = -0.2e1 * t1081 * t1098 + t1096;
t1036 = 0.2e1 * t1085 * t1098 + t1097;
t1035 = t1085 * t1056 - t1081 * t1059;
t1034 = -t1081 * t1055 + t1085 * t1060;
t1033 = t1081 * t1056 + t1085 * t1059;
t1032 = t1085 * t1055 + t1081 * t1060;
t1021 = t1086 * t1038 - t1082 * t1043;
t1020 = t1082 * t1038 + t1086 * t1043;
t1015 = t1086 * t1035 + t1082 * t1036;
t1014 = t1086 * t1034 - t1082 * t1037;
t1013 = t1082 * t1035 - t1086 * t1036;
t1012 = t1082 * t1034 + t1086 * t1037;
t1011 = -t1083 * t1030 + t1087 * t1031;
t1010 = t1087 * t1030 + t1083 * t1031;
t1003 = -t1079 * t1020 + t1080 * t1021;
t1002 = t1080 * t1020 + t1079 * t1021;
t997 = -t1079 * t1013 + t1080 * t1015;
t996 = -t1079 * t1012 + t1080 * t1014;
t995 = t1080 * t1013 + t1079 * t1015;
t994 = t1080 * t1012 + t1079 * t1014;
t993 = -t1079 * t1008 + t1080 * t1009;
t992 = t1080 * t1008 + t1079 * t1009;
t989 = -t1083 * t1002 + t1087 * t1003;
t988 = t1087 * t1002 + t1083 * t1003;
t987 = -t1069 * pkin(4) + t1070 * pkin(8) + t991;
t986 = -t1070 * pkin(4) - t1069 * pkin(8) - t990;
t985 = t1081 * t1078 + t1085 * t987;
t984 = t1085 * t1078 - t1081 * t987;
t983 = -t1083 * t995 + t1087 * t997;
t982 = -t1083 * t994 + t1087 * t996;
t981 = t1083 * t997 + t1087 * t995;
t980 = t1083 * t996 + t1087 * t994;
t979 = -t1083 * t992 + t1087 * t993;
t978 = t1083 * t993 + t1087 * t992;
t977 = -t1082 * t990 + t1086 * t991;
t976 = t1082 * t991 + t1086 * t990;
t975 = -t1081 * t984 + t1085 * t985;
t974 = t1081 * t985 + t1085 * t984;
t973 = t1082 * t986 + t1086 * t975;
t972 = t1082 * t975 - t1086 * t986;
t971 = -t1079 * t976 + t1080 * t977;
t970 = t1079 * t977 + t1080 * t976;
t969 = -t1079 * t972 + t1080 * t973;
t968 = t1079 * t973 + t1080 * t972;
t967 = -t1083 * t970 + t1087 * t971;
t966 = t1083 * t971 + t1087 * t970;
t965 = -t1083 * t968 + t1087 * t969;
t964 = t1083 * t969 + t1087 * t968;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1078, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1078, 0, 0, 0, 0, 0, 0, t1032, t1033, 0, t974; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1063, t1062, 0, t1084 * t1065 + t1088 * t1066, 0, 0, 0, 0, 0, 0, t1105, t1106, 0, t1088 * t1010 + t1084 * t1011, 0, 0, 0, 0, 0, 0, t1113, t1114, 0, t1084 * t979 + t1088 * t978, 0, 0, 0, 0, 0, 0, t1118, t1119, 0, t1084 * t967 + t1088 * t966, 0, 0, 0, 0, 0, 0, t1084 * t982 + t1088 * t980, t1084 * t983 + t1088 * t981, t1084 * t989 + t1088 * t988, t1084 * t965 + t1088 * t964; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1062, t1063, 0, -t1088 * t1065 + t1084 * t1066, 0, 0, 0, 0, 0, 0, -t1106, t1105, 0, t1084 * t1010 - t1088 * t1011, 0, 0, 0, 0, 0, 0, -t1114, t1113, 0, t1084 * t978 - t1088 * t979, 0, 0, 0, 0, 0, 0, -t1119, t1118, 0, t1084 * t966 - t1088 * t967, 0, 0, 0, 0, 0, 0, t1084 * t980 - t1088 * t982, t1084 * t981 - t1088 * t983, t1084 * t988 - t1088 * t989, t1084 * t964 - t1088 * t965; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1090, -qJDD(1), 0, t1065, 0, 0, 0, 0, 0, 0, t1092, t1053, 0, t1011, 0, 0, 0, 0, 0, 0, t1107, t1026, 0, t979, 0, 0, 0, 0, 0, 0, t1115, t1000, 0, t967, 0, 0, 0, 0, 0, 0, t982, t983, t989, t965; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1090, 0, t1066, 0, 0, 0, 0, 0, 0, -t1053, t1092, 0, t1010, 0, 0, 0, 0, 0, 0, -t1026, t1107, 0, t978, 0, 0, 0, 0, 0, 0, -t1000, t1115, 0, t966, 0, 0, 0, 0, 0, 0, t980, t981, t988, t964; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1078, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1078, 0, 0, 0, 0, 0, 0, t1032, t1033, 0, t974; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1073, -t1074, 0, t1031, 0, 0, 0, 0, 0, 0, t1093, t1048, 0, t993, 0, 0, 0, 0, 0, 0, t1108, t1018, 0, t971, 0, 0, 0, 0, 0, 0, t996, t997, t1003, t969; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1074, -t1073, 0, t1030, 0, 0, 0, 0, 0, 0, -t1048, t1093, 0, t992, 0, 0, 0, 0, 0, 0, -t1018, t1108, 0, t970, 0, 0, 0, 0, 0, 0, t994, t995, t1002, t968; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1078, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1078, 0, 0, 0, 0, 0, 0, t1032, t1033, 0, t974; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1073, -t1074, 0, t1009, 0, 0, 0, 0, 0, 0, t1094, t1041, 0, t977, 0, 0, 0, 0, 0, 0, t1014, t1015, t1021, t973; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1074, -t1073, 0, t1008, 0, 0, 0, 0, 0, 0, -t1041, t1094, 0, t976, 0, 0, 0, 0, 0, 0, t1012, t1013, t1020, t972; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1078, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1078, 0, 0, 0, 0, 0, 0, t1032, t1033, 0, t974; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1069, -t1070, 0, t991, 0, 0, 0, 0, 0, 0, t1034, t1035, t1038, t975; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1070, -t1069, 0, t990, 0, 0, 0, 0, 0, 0, t1037, -t1036, t1043, -t986; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1078, 0, 0, 0, 0, 0, 0, t1032, t1033, 0, t974; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1060, t1056, t1096, t985; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1055, t1059, -t1097, t984; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1037, t1036, -t1043, t986;];
f_new_reg = t1;
