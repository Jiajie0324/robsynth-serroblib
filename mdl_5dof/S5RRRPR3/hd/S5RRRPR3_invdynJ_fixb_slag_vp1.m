% Calculate vector of inverse dynamics joint torques for
% S5RRRPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5,theta4]';
% m_mdh [6x1]
%   mass of all robot links (including the base)
% rSges [6x3]
%   center of mass of all robot links (in body frames)
%   rows: links of the robot (starting with base)
%   columns: x-, y-, z-coordinates
% Icges [6x6]
%   inertia of all robot links about their respective center of mass, in body frames
%   rows: links of the robot (starting with base)
%   columns: xx, yy, zz, xy, xz, yz (see inertiavector2matrix.m)
% 
% Output:
% tau [5x1]
%   joint torques of inverse dynamics (contains inertial, gravitational coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:43
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S5RRRPR3_invdynJ_fixb_slag_vp1(qJ, qJD, qJDD, g, ...
  pkin, m, rSges, Icges)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1),zeros(6,1),zeros(6,3),zeros(6,6)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR3_invdynJ_fixb_slag_vp1: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR3_invdynJ_fixb_slag_vp1: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR3_invdynJ_fixb_slag_vp1: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR3_invdynJ_fixb_slag_vp1: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRPR3_invdynJ_fixb_slag_vp1: pkin has to be [9x1] (double)');
assert(isreal(m) && all(size(m) == [6 1]), ...
  'S5RRRPR3_invdynJ_fixb_slag_vp1: m has to be [6x1] (double)'); 
assert(isreal(rSges) && all(size(rSges) == [6,3]), ...
  'S5RRRPR3_invdynJ_fixb_slag_vp1: rSges has to be [6x3] (double)');
assert(isreal(Icges) && all(size(Icges) == [6 6]), ...
  'S5RRRPR3_invdynJ_fixb_slag_vp1: Icges has to be [6x6] (double)'); 

%% Symbolic Calculation
% From invdyn_fixb_par1_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:42:18
% EndTime: 2019-12-05 18:42:56
% DurationCPUTime: 30.92s
% Computational Cost: add. (23902->819), mult. (17623->978), div. (0->0), fcn. (13787->10), ass. (0->468)
t431 = qJ(3) + pkin(9);
t419 = sin(t431);
t420 = cos(t431);
t316 = Icges(5,5) * t420 - Icges(5,6) * t419;
t434 = sin(qJ(3));
t436 = cos(qJ(3));
t379 = Icges(4,5) * t436 - Icges(4,6) * t434;
t828 = t316 + t379;
t836 = Icges(4,3) + Icges(5,3);
t432 = qJ(1) + qJ(2);
t422 = sin(t432);
t835 = t828 * t422;
t423 = cos(t432);
t834 = t836 * t423 - t835;
t645 = t420 * t423;
t647 = t419 * t423;
t230 = Icges(5,4) * t645 - Icges(5,2) * t647 + Icges(5,6) * t422;
t363 = Icges(5,4) * t647;
t232 = Icges(5,1) * t645 + Icges(5,5) * t422 - t363;
t636 = t423 * t436;
t637 = t423 * t434;
t250 = Icges(4,4) * t636 - Icges(4,2) * t637 + Icges(4,6) * t422;
t393 = Icges(4,4) * t637;
t252 = Icges(4,1) * t636 + Icges(4,5) * t422 - t393;
t833 = t230 * t419 - t232 * t420 + t250 * t434 - t252 * t436;
t832 = Icges(4,5) * t636 + Icges(5,5) * t645 - Icges(4,6) * t637 - Icges(5,6) * t647 + t836 * t422;
t315 = Icges(5,5) * t419 + Icges(5,6) * t420;
t378 = Icges(4,5) * t434 + Icges(4,6) * t436;
t831 = t315 + t378;
t688 = Icges(5,4) * t419;
t317 = Icges(5,2) * t420 + t688;
t689 = Icges(4,4) * t434;
t380 = Icges(4,2) * t436 + t689;
t424 = Icges(4,4) * t436;
t753 = Icges(4,1) * t434 + t424;
t403 = Icges(5,4) * t420;
t754 = Icges(5,1) * t419 + t403;
t827 = t317 * t419 + t380 * t434 - t420 * t754 - t436 * t753;
t648 = t419 * t422;
t362 = Icges(5,4) * t648;
t646 = t420 * t422;
t231 = -Icges(5,1) * t646 + Icges(5,5) * t423 + t362;
t642 = t422 * t434;
t392 = Icges(4,4) * t642;
t641 = t422 * t436;
t251 = -Icges(4,1) * t641 + Icges(4,5) * t423 + t392;
t773 = -t231 * t645 - t251 * t636 - t834 * t422;
t519 = -Icges(5,2) * t419 + t403;
t487 = t519 * t422;
t229 = Icges(5,6) * t423 - t487;
t520 = -Icges(4,2) * t434 + t424;
t488 = t520 * t422;
t249 = Icges(4,6) * t423 - t488;
t772 = t229 * t648 + t249 * t642 + t834 * t423;
t830 = -t231 * t420 - t251 * t436;
t770 = t229 * t419 + t249 * t434;
t829 = t833 * t423;
t790 = -t231 * t646 - t251 * t641 + t772;
t789 = t230 * t648 - t232 * t646 + t250 * t642 - t252 * t641 + t832 * t423;
t788 = -t229 * t647 - t249 * t637 - t773;
t787 = t832 * t422 - t829;
t783 = t229 * t420 + t231 * t419 + t249 * t436 + t251 * t434;
t782 = t230 * t420 + t232 * t419 + t250 * t436 + t252 * t434;
t826 = t317 * t420 + t380 * t436 + t419 * t754 + t434 * t753;
t824 = t770 + t830;
t430 = qJD(1) + qJD(2);
t823 = t831 * qJD(3) - t836 * t430;
t655 = t378 * t423;
t658 = t315 * t423;
t781 = t827 * t422 + t655 + t658;
t261 = t315 * t422;
t275 = t378 * t422;
t780 = -t827 * t423 + t261 + t275;
t822 = t828 * qJD(3) + t827 * t430;
t638 = t423 * t430;
t821 = t823 * t422 + t824 * t430 - t828 * t638;
t820 = (t833 - t835) * t430 - t823 * t423;
t819 = t787 * t422 + t788 * t423;
t818 = t789 * t422 + t790 * t423;
t291 = t519 * qJD(3);
t320 = Icges(5,1) * t420 - t688;
t292 = t320 * qJD(3);
t331 = t520 * qJD(3);
t383 = Icges(4,1) * t436 - t689;
t332 = t383 * qJD(3);
t817 = t826 * qJD(3) + t291 * t419 - t292 * t420 + t331 * t434 - t332 * t436 - t831 * t430;
t740 = -Icges(5,6) * t430 + qJD(3) * t317;
t143 = -t423 * t740 - t430 * t487;
t490 = t430 * t320;
t735 = -Icges(5,5) * t430 + qJD(3) * t754;
t145 = -t422 * t490 - t423 * t735;
t738 = -Icges(4,6) * t430 + qJD(3) * t380;
t161 = -t423 * t738 - t430 * t488;
t491 = t430 * t383;
t734 = -Icges(4,5) * t430 + qJD(3) * t753;
t163 = -t422 * t491 - t423 * t734;
t816 = t782 * qJD(3) + t143 * t419 - t145 * t420 + t161 * t434 - t163 * t436 - t430 * t832;
t144 = t422 * t740 - t519 * t638;
t146 = t422 * t735 - t423 * t490;
t162 = t422 * t738 - t520 * t638;
t164 = t422 * t734 - t423 * t491;
t815 = t783 * qJD(3) + t144 * t419 - t146 * t420 + t162 * t434 - t164 * t436 - t834 * t430;
t402 = qJDD(3) * t423;
t429 = qJD(3) + qJD(5);
t643 = t422 * t430;
t208 = qJDD(5) * t423 - t429 * t643 + t402;
t421 = qJ(5) + t431;
t413 = cos(t421);
t398 = t413 * rSges(6,1);
t412 = sin(t421);
t304 = -rSges(6,2) * t412 + t398;
t260 = t304 * t429;
t592 = qJD(3) * t430;
t284 = -t422 * t592 + t402;
t303 = rSges(6,1) * t412 + rSges(6,2) * t413;
t325 = t423 * t429;
t426 = t436 * pkin(3);
t414 = t426 + pkin(2);
t427 = qJDD(1) + qJDD(2);
t438 = qJD(3) ^ 2;
t433 = -qJ(4) - pkin(7);
t634 = t430 * t433;
t357 = t422 * t634;
t591 = qJD(3) * t434;
t563 = t422 * t591;
t373 = pkin(3) * t563;
t406 = qJD(4) * t423;
t600 = t373 + t406;
t567 = t357 + t600;
t703 = pkin(2) - t414;
t705 = pkin(7) * t422;
t152 = (t423 * t703 + t705) * t430 + t567;
t708 = pkin(2) * t423;
t328 = t705 + t708;
t435 = sin(qJ(1));
t437 = cos(qJ(1));
t439 = qJD(1) ^ 2;
t482 = (-qJDD(1) * t435 - t437 * t439) * pkin(1);
t704 = t423 * pkin(7);
t533 = -pkin(2) * t422 + t704;
t457 = -t430 ^ 2 * t328 + t427 * t533 + t482;
t702 = pkin(7) + t433;
t764 = t423 * t702;
t477 = t422 * t703 - t764;
t447 = qJDD(4) * t422 + t427 * t477 + t457 + (t152 + t406) * t430;
t531 = -pkin(4) * t420 - t426;
t706 = pkin(4) * t419;
t707 = pkin(3) * t434;
t532 = t706 + t707;
t351 = pkin(2) - t531;
t549 = t351 + t398;
t321 = t532 * qJD(3);
t428 = -pkin(8) + t433;
t635 = t428 * t430;
t539 = (t321 + t635) * t422;
t603 = -t351 + t414;
t110 = t603 * t638 - t357 - t373 + t539;
t649 = t413 * t423;
t583 = rSges(6,1) * t649;
t496 = rSges(6,3) * t422 + t583;
t650 = t413 * t422;
t652 = t412 * t422;
t245 = rSges(6,1) * t652 + rSges(6,2) * t650;
t651 = t412 * t423;
t348 = rSges(6,2) * t651;
t574 = t245 * t429 + t430 * t348;
t128 = -t430 * t496 + t574;
t632 = t110 + t128;
t757 = rSges(6,2) * t652 + t423 * rSges(6,3);
t595 = t428 - t433;
t761 = t595 * t423;
t13 = t438 * t531 * t423 - t208 * t303 - t325 * t260 - t532 * t284 + t632 * t430 + t447 + (t757 + (t414 - t549) * t422 - t761) * t427;
t805 = -g(3) + t13;
t814 = rSges(5,2) * t420;
t813 = t781 * t430;
t527 = rSges(3,1) * t422 + rSges(3,2) * t423;
t272 = t527 * t430;
t693 = pkin(1) * qJD(1);
t586 = t435 * t693;
t255 = t272 + t586;
t811 = t780 * t430;
t339 = Icges(6,4) * t652;
t218 = -Icges(6,1) * t650 + Icges(6,5) * t423 + t339;
t340 = Icges(6,4) * t651;
t219 = Icges(6,1) * t649 + Icges(6,5) * t422 - t340;
t324 = t422 * t429;
t397 = Icges(6,4) * t413;
t518 = -Icges(6,2) * t412 + t397;
t755 = Icges(6,1) * t412 + t397;
t769 = t755 + t518;
t448 = t324 * (-Icges(6,2) * t649 + t219 - t340) + t325 * (Icges(6,2) * t650 + t218 + t339) + t430 * t769;
t216 = Icges(6,6) * t423 - t422 * t518;
t217 = Icges(6,4) * t649 - Icges(6,2) * t651 + Icges(6,6) * t422;
t687 = Icges(6,4) * t412;
t298 = Icges(6,2) * t413 + t687;
t301 = Icges(6,1) * t413 - t687;
t725 = t324 * (t423 * t755 + t217) + t325 * (-t422 * t755 + t216) + t430 * (t298 - t301);
t810 = t448 * t412 + t413 * t725;
t459 = t422 * (-Icges(5,2) * t645 + t232 - t363) + t423 * (Icges(5,2) * t646 + t231 + t362);
t732 = t423 * t229 + t230 * t422;
t809 = -t459 * t419 - t420 * t732;
t584 = pkin(3) * t591;
t607 = t414 * t643 + t423 * t634;
t610 = -t351 * t643 - t423 * t635;
t109 = (-t321 + t584) * t423 + t607 + t610;
t587 = rSges(6,1) * t650;
t786 = t303 * t325;
t573 = -t430 * t587 - t786;
t127 = t430 * t757 + t573;
t283 = qJDD(3) * t422 + t423 * t592;
t207 = qJD(5) * t638 + qJDD(5) * t422 + t283;
t709 = pkin(1) * t437;
t710 = pkin(1) * t435;
t534 = -qJDD(1) * t709 + t439 * t710;
t633 = t436 * t438;
t480 = t422 * pkin(3) * t633 + qJDD(4) * t423 + t283 * t707 + t534;
t385 = pkin(2) * t643;
t405 = qJD(4) * t422;
t566 = t405 - t607;
t151 = t385 + (-pkin(7) * t430 - t584) * t423 + t566;
t274 = pkin(7) * t638 - t385;
t530 = -t151 - t274 - t405;
t368 = t423 * t414;
t220 = t422 * t702 - t368 + t708;
t287 = t423 * t351;
t180 = t422 * t595 - t287 + t368;
t221 = -t348 + t496;
t779 = t180 - t221;
t577 = t220 + t779;
t538 = -t328 + t577;
t14 = t207 * t303 + t260 * t324 + (t283 * t419 + t438 * t646) * pkin(4) + t538 * t427 + (-t109 - t127 + t530) * t430 + t480;
t808 = -g(2) + t14;
t322 = rSges(5,1) * t419 + t814;
t588 = rSges(5,1) * t646;
t593 = qJD(3) * t423;
t572 = -t322 * t593 - t430 * t588;
t756 = rSges(5,2) * t648 + t423 * rSges(5,3);
t148 = t430 * t756 + t572;
t404 = t420 * rSges(5,1);
t323 = -rSges(5,2) * t419 + t404;
t295 = t323 * qJD(3);
t367 = rSges(5,2) * t647;
t582 = rSges(5,1) * t645;
t497 = rSges(5,3) * t422 + t582;
t234 = -t367 + t497;
t620 = t220 - t234;
t576 = -t328 + t620;
t594 = qJD(3) * t422;
t37 = t295 * t594 + t283 * t322 + t576 * t427 + (-t148 + t530) * t430 + t480;
t807 = -g(2) + t37;
t561 = t423 * t591;
t589 = rSges(4,1) * t641;
t590 = qJD(3) * t436;
t569 = -t423 * rSges(4,2) * t590 - rSges(4,1) * t561 - t430 * t589;
t597 = rSges(4,2) * t642 + t423 * rSges(4,3);
t165 = t430 * t597 + t569;
t698 = rSges(4,2) * t434;
t701 = rSges(4,1) * t436;
t388 = -t698 + t701;
t352 = t388 * qJD(3);
t386 = rSges(4,1) * t434 + rSges(4,2) * t436;
t395 = rSges(4,2) * t637;
t498 = -rSges(4,1) * t636 - rSges(4,3) * t422;
t253 = -t395 - t498;
t611 = -t253 - t328;
t72 = t352 * t594 + t283 * t386 + (-t165 - t274) * t430 + t611 * t427 + t534;
t806 = -g(2) + t72;
t568 = rSges(4,1) * t563 + (t422 * t590 + t430 * t637) * rSges(4,2);
t166 = t430 * t498 + t568;
t505 = t589 - t597;
t71 = t430 * t166 - t284 * t386 - t352 * t593 - t427 * t505 + t457;
t804 = -g(3) + t71;
t565 = t419 * t594;
t571 = rSges(5,1) * t565 + t430 * t367 + t594 * t814;
t149 = -t430 * t497 + t571;
t504 = -t588 + t756;
t36 = t427 * t504 + t430 * t149 - t284 * t322 - t295 * t593 + (-t284 * t434 - t423 * t633) * pkin(3) + t447;
t803 = -t36 + g(3);
t327 = rSges(3,1) * t423 - t422 * rSges(3,2);
t802 = t272 * t430 - t327 * t427 - g(2) + t534;
t273 = -rSges(3,1) * t638 + rSges(3,2) * t643;
t801 = t273 * t430 - t427 * t527 - g(3) + t482;
t800 = t821 * t422 - t815 * t423;
t799 = t820 * t422 - t816 * t423;
t798 = t815 * t422 + t821 * t423;
t797 = t816 * t422 + t820 * t423;
t796 = t818 * qJD(3) + t813;
t795 = t819 * qJD(3) + t811;
t794 = -t824 * qJD(3) + t144 * t420 + t146 * t419 + t162 * t436 + t164 * t434;
t793 = -qJD(3) * t833 + t143 * t420 + t145 * t419 + t161 * t436 + t163 * t434;
t792 = t822 * t422 - t817 * t423;
t791 = t817 * t422 + t822 * t423;
t598 = t753 + t520;
t599 = t380 - t383;
t785 = (t434 * t598 + t436 * t599) * t430;
t605 = t754 + t519;
t606 = t317 - t320;
t784 = (t419 * t605 + t420 * t606) * t430;
t215 = Icges(6,5) * t649 - Icges(6,6) * t651 + Icges(6,3) * t422;
t778 = t423 * t215 - t219 * t650;
t501 = pkin(4) * t565 + t303 * t324 + t600;
t294 = t430 * t328;
t759 = -t430 * t220 + t294;
t777 = t779 * t430 - t406 + t501 - t539 - t574 - t759;
t776 = -t430 * t234 - t567 - t571 - t759;
t775 = -t832 + t830;
t236 = t430 * t253;
t774 = -t568 - t236 - t294;
t771 = t260 * t422 - t324 * t304;
t768 = t430 * t245 + t260 * t423 - t304 * t325;
t758 = t323 + t426;
t297 = Icges(6,5) * t413 - Icges(6,6) * t412;
t483 = t297 * t422;
t214 = Icges(6,3) * t423 - t483;
t629 = -t422 * t214 - t218 * t649;
t752 = t629 - t778;
t660 = t298 * t429;
t751 = -Icges(6,6) * t430 + t660;
t235 = t430 * t505;
t293 = t430 * t533;
t500 = t386 * t593 + t235 - t293;
t137 = t500 + t586;
t305 = t386 * t594;
t585 = t437 * t693;
t535 = t305 - t585;
t138 = t430 * t611 + t535;
t750 = t137 * t423 + t138 * t422;
t748 = (-t422 ^ 2 - t423 ^ 2) * t707;
t296 = Icges(6,5) * t412 + Icges(6,6) * t413;
t747 = -Icges(6,3) * t430 + t296 * t429;
t746 = -Icges(6,5) * t430 + t429 * t755;
t612 = -Icges(4,2) * t636 + t252 - t393;
t614 = t423 * t753 + t250;
t730 = t434 * t612 + t436 * t614;
t613 = Icges(4,2) * t641 + t251 + t392;
t615 = -t422 * t753 + t249;
t729 = -t434 * t613 - t436 * t615;
t540 = -t301 * t429 + t660;
t541 = t769 * t429;
t728 = -t296 * t430 + t412 * t541 + t413 * t540;
t489 = t430 * t301;
t545 = t216 * t429 - t422 * t746 + t423 * t489;
t486 = t518 * t430;
t547 = t218 * t429 + t422 * t751 - t423 * t486;
t727 = -t214 * t430 + t412 * t547 + t413 * t545;
t546 = t217 * t429 + t422 * t489 + t423 * t746;
t548 = t219 * t429 - t422 * t486 - t423 * t751;
t726 = -t215 * t430 + t412 * t548 + t413 * t546;
t724 = t207 / 0.2e1;
t723 = t208 / 0.2e1;
t722 = t283 / 0.2e1;
t721 = t284 / 0.2e1;
t720 = -t324 / 0.2e1;
t719 = t324 / 0.2e1;
t718 = -t325 / 0.2e1;
t717 = t325 / 0.2e1;
t716 = t422 / 0.2e1;
t715 = t423 / 0.2e1;
t714 = t427 / 0.2e1;
t713 = -t430 / 0.2e1;
t712 = t430 / 0.2e1;
t711 = -rSges(4,3) - pkin(7);
t239 = t296 * t422;
t510 = t298 * t412 - t413 * t755;
t116 = -t423 * t510 + t239;
t674 = t116 * t430;
t662 = t296 * t423;
t659 = t303 * t423;
t657 = t316 * t430;
t656 = t532 * t422;
t654 = t379 * t430;
t281 = t386 * t422;
t653 = t386 * t423;
t644 = t422 * t215;
t640 = t423 * t109;
t639 = t423 * t180;
t631 = t151 * t593 - t284 * t220;
t630 = t423 * t214 + t216 * t652;
t267 = rSges(5,1) * t648 + rSges(5,2) * t646;
t396 = pkin(3) * t642;
t581 = t216 * t651;
t578 = -t430 * t477 - t293 - t405;
t575 = t322 * t594 + t600;
t560 = -t643 / 0.2e1;
t559 = t638 / 0.2e1;
t558 = -pkin(2) - t701;
t557 = (pkin(7) + t428) * t423;
t556 = -t594 / 0.2e1;
t555 = t594 / 0.2e1;
t554 = -t593 / 0.2e1;
t553 = t593 / 0.2e1;
t552 = t322 + t707;
t551 = t303 + t706;
t550 = -t414 - t404;
t537 = t385 - t569;
t536 = -pkin(2) - t550;
t529 = t551 * t430;
t389 = rSges(2,1) * t437 - t435 * rSges(2,2);
t528 = rSges(2,1) * t435 + rSges(2,2) * t437;
t191 = t220 * t593;
t478 = (-pkin(2) + t351) * t422 + t557;
t503 = t587 - t757;
t47 = -t191 + t325 * t221 + t324 * t503 + (t422 * t478 - t639) * qJD(3);
t524 = t47 * (-t245 * t324 - t325 * t659);
t118 = t217 * t413 + t219 * t412;
t515 = t217 * t412 - t219 * t413;
t499 = -t756 + t764;
t256 = -t327 * t430 - t585;
t492 = t575 - t585;
t481 = t423 * t148 + (-t149 - t152) * t422;
t472 = t239 * t325 + t297 * t430 - t324 * t662;
t469 = -t423 * t747 + (-t483 + t515) * t430;
t468 = -t297 * t638 + t747 * t422 + (t216 * t412 - t218 * t413) * t430;
t463 = t297 * t429 + t430 * t510;
t458 = t321 * t423 - t405 - t573 - t610;
t156 = -t583 - t287 + t348 + (-rSges(6,3) + t428) * t422;
t179 = -t582 + t367 - t368 + (-rSges(5,3) + t433) * t422;
t196 = t422 * t558 + t597 + t704;
t197 = t422 * t711 + t423 * t558 + t395;
t455 = t423 * t253 + t422 * t505;
t155 = -t422 * t549 - t423 * t428 + t757;
t178 = t422 * t550 - t423 * t433 + t756;
t454 = pkin(3) * t561 - t566 - t572;
t453 = -t430 * t504 + t552 * t593 + t578;
t115 = t422 * t510 + t662;
t117 = t216 * t413 + t218 * t412;
t18 = t468 * t422 - t423 * t727;
t19 = t469 * t422 - t423 * t726;
t20 = t422 * t727 + t468 * t423;
t21 = t422 * t726 + t469 * t423;
t113 = t115 * t430;
t89 = -t218 * t650 + t630;
t183 = t217 * t652;
t90 = t183 + t778;
t38 = t324 * t90 + t325 * t89 + t113;
t91 = -t581 - t629;
t92 = -t423 * t515 + t644;
t39 = t324 * t92 + t325 * t91 + t674;
t56 = t463 * t422 - t423 * t728;
t57 = t422 * t728 + t463 * t423;
t58 = -t412 * t545 + t413 * t547;
t59 = -t412 * t546 + t413 * t548;
t452 = (t116 * t427 + t18 * t325 + t19 * t324 + t207 * t92 + t208 * t91 + t430 * t56) * t716 + ((t118 * t430 + t58) * t423 + (-t117 * t430 + t59) * t422) * t712 + (t472 * t422 - t810 * t423) * t720 + (t810 * t422 + t472 * t423) * t718 + (t115 * t427 + t20 * t325 + t207 * t90 + t208 * t89 + t21 * t324 + t430 * t57) * t715 + (-t412 * t725 + t413 * t448) * t713 + ((t430 * t92 + t18) * t423 + (-t430 * t91 + t19) * t422) * t719 + t38 * t560 + t39 * t559 + ((t430 * t90 + t20) * t423 + (-t430 * t89 + t21) * t422) * t717 + (t422 * t92 + t423 * t91) * t724 + (t422 * t90 + t423 * t89) * t723 + (t117 * t423 + t118 * t422) * t714;
t451 = (-pkin(2) + t549) * t422 + t557 - t757;
t450 = t422 * t536 + t499;
t446 = (-t218 * t422 - t219 * t423) * t413 + t217 * t651 - t644 + t630;
t445 = t786 + t532 * t593 + t578 + (-t422 * t603 + t503 + t761) * t430;
t444 = t423 * t234 + t422 * t450;
t69 = t445 + t586;
t70 = t430 * t538 + t501 - t585;
t443 = (-t70 * t757 - t69 * (-t496 - t287)) * t430;
t86 = t453 + t586;
t87 = t430 * t576 + t492;
t442 = (-t87 * t756 - t86 * (-t497 - t368)) * t430;
t441 = ((-t137 * t711 - t138 * t698) * t422 + (-t137 * t558 + t138 * t711) * t423) * t430;
t440 = (t113 + (t92 + t446) * t325 + (t183 - t91 - t581 - t752) * t324) * t720 + (t116 + t118) * t724 + (t115 + t117) * t723 + (-t674 + (t90 + (t216 * t423 - t217 * t422) * t412 + t752) * t325 + (-t89 + t446) * t324 + t39) * t718 + (t58 + t57) * t717 + (((t772 + t787 + t829) * t423 + ((-t770 + t775) * t423 - t773 - t788 + t789) * t422) * qJD(3) + t813) * t556 + (t59 + t56 + t38) * t719 + (-t827 * qJD(3) + t291 * t420 + t292 * t419 + t331 * t436 + t332 * t434 - t412 * t540 + t413 * t541) * t430 + (t780 + t782) * t722 + (t781 + t783) * t721 + ((((t770 - t832) * t423 + t773 + t789) * t423 + (t775 * t422 + t772 - t790) * t422) * qJD(3) + t795 - t811) * t554 + (t791 + t794) * t553 + (t298 * t413 + t412 * t755 + Icges(3,3) + t826) * t427 + (t792 + t793 + t796) * t555;
t302 = t423 * t532;
t268 = t322 * t423;
t238 = pkin(3) * t637 - t302;
t237 = -t396 + t656;
t198 = t423 * t221;
t195 = t423 * t220;
t150 = t455 * qJD(3);
t139 = t423 * t151;
t114 = t423 * t127;
t83 = qJD(3) * t444 - t191;
t7 = -t284 * t180 + t208 * t221 + t325 * t127 + t207 * t503 - t324 * t128 + (t640 + (-t110 - t152) * t422) * qJD(3) + t478 * t283 + t631;
t1 = [Icges(2,3) * qJDD(1) + t440 + (t802 * (-t327 - t709) + t801 * (-t527 - t710) + (t256 - t273 + t585) * t255) * m(3) + ((qJDD(1) * t528 + g(3)) * t528 + (qJDD(1) * t389 + g(2)) * t389) * m(2) + (t70 * (t458 + t586) + t443 + t808 * (t156 - t709) + t805 * (t155 - t710) + (-t70 + t777) * t69) * m(6) + (t87 * (t454 + t586) + t442 + (t492 - t87 + t585 + t776) * t86 + t807 * (t179 - t709) - t803 * (t178 - t710)) * m(5) + (t138 * (t537 + t586) + t441 + t806 * (t197 - t709) + t804 * (t196 - t710) + (-t138 + t535 + t585 + t774) * t137) * m(4); t440 + (t443 + (-t445 + t458) * t70 + t777 * t69 + t808 * t156 + t805 * t155) * m(6) + (t442 + (-t453 + t454) * t87 + (t575 + t776) * t86 + t807 * t179 - t803 * t178) * m(5) + (t441 + t806 * t197 + t804 * t196 + (t537 - t500) * t138 + (t305 + t774) * t137) * m(4) + (-t255 * t273 + t256 * t272 + (-t255 * t430 - t802) * t327 - (t256 * t430 + t801) * t527) * m(3); t452 + t819 * t722 + t818 * t721 + (t792 * t430 + t780 * t427 + t788 * t284 + t787 * t283 + (t799 * t422 + t800 * t423) * qJD(3)) * t716 + (t791 * t430 + t781 * t427 + t790 * t284 + t789 * t283 + (t797 * t422 + t798 * t423) * qJD(3)) * t715 + (t782 * t422 + t783 * t423) * t714 + ((-t419 * t606 + t420 * t605 - t434 * t599 + t436 * t598) * t430 + ((t422 * t612 + t423 * t613) * t436 + (-t422 * t614 - t423 * t615) * t434 - t419 * t732 + t420 * t459) * qJD(3)) * t713 + ((t782 * t430 + t794) * t423 + (-t783 * t430 + t793) * t422) * t712 + t796 * t560 + t795 * t559 + ((-t594 * t655 + t654) * t422 + (-t785 + (t729 * t423 + (t275 - t730) * t422) * qJD(3)) * t423 + (-t594 * t658 + t657) * t422 + (-t784 + (t422 * t261 + t809) * qJD(3)) * t423) * t556 + ((t787 * t430 + t800) * t423 + (-t788 * t430 + t799) * t422) * t555 + ((t275 * t593 + t654) * t423 + (t785 + (t730 * t422 + (-t655 - t729) * t423) * qJD(3)) * t422 + (t261 * t593 + t657) * t423 + (t784 + (-t423 * t658 - t809) * qJD(3)) * t422) * t554 + ((t789 * t430 + t798) * t423 + (-t790 * t430 + t797) * t422) * t553 + (t7 * (t422 * t451 - t195 + t198 - t639) + t14 * (t422 * t551 + t396) + t13 * (-t303 - t532) * t423 - g(1) * (t304 - t531) - g(2) * (t245 + t656) - g(3) * (-t302 - t659) - t524 + (t423 * t529 - (-t238 + t659) * t430 + t771) * t70 + (t237 * t430 - t422 * t529 + t768) * t69 + (t640 + t114 + t139 + (-t152 - t632) * t422 + (t422 * t577 + t423 * t451) * t430 - (-t237 * t422 + t238 * t423 + t748) * qJD(3)) * t47) * m(6) + (t86 * t267 * t430 - (t83 * (-t267 * t422 + t748) + (-t83 * t268 + t758 * t86) * t423) * qJD(3) + (qJD(3) * t481 + t284 * t234 + t283 * t450 + t631) * (-t195 + t444) + t83 * (t139 + (t499 * t423 + (t423 * t536 + t620) * t422) * t430 + t481) + t37 * (t322 * t422 + t396) - t86 * (t322 * t643 + (-pkin(3) * t590 - t295) * t423) - g(1) * t758 - g(2) * (t396 + t267) + t803 * t423 * t552 + (-t268 * t430 + t322 * t638) * t87) * m(5) + (-g(1) * t388 - g(2) * t281 + g(3) * t653 + (t284 * t253 + t283 * t505 + (t423 * t165 - t422 * t166) * qJD(3)) * t455 + t150 * ((-t166 - t236) * t422 + (t165 + t235) * t423) + t72 * t281 - t71 * t653 + (-t137 * t643 + t138 * t638) * t386 + t750 * t352 - (-t137 * t281 + t138 * t653) * t430 - (t150 * (-t281 * t422 - t423 * t653) + t750 * t388) * qJD(3)) * m(4); (-m(5) - m(6)) * (g(2) * t423 + g(3) * t422) + m(5) * (t36 * t422 + t37 * t423) + m(6) * (t13 * t422 + t14 * t423); t452 + (-g(1) * t304 - g(2) * t245 + t7 * (t422 * t503 + t198) + t47 * (-t422 * t128 + t114 + (-t422 * t221 + t423 * t503) * t430) - t524 + t771 * t70 + t768 * t69 + (t14 * t422 + t638 * t70 - t643 * t69) * t303 + (-t430 * t70 - t805) * t659) * m(6);];
tau = t1;
