% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:43
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRPR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR3_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR3_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRPR3_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:43:07
% EndTime: 2019-12-05 18:43:28
% DurationCPUTime: 20.12s
% Computational Cost: add. (88153->601), mult. (119643->922), div. (0->0), fcn. (80292->10), ass. (0->417)
t690 = cos(qJ(2));
t686 = sin(qJ(2));
t714 = qJDD(1) + qJDD(2);
t700 = t686 * t714;
t680 = qJD(1) + qJD(2);
t752 = t680 ^ 2;
t652 = -t690 * t752 - t700;
t633 = pkin(6) * t652 + g(1) * t690;
t687 = sin(qJ(1));
t691 = cos(qJ(1));
t698 = t690 * t714;
t653 = -t686 * t752 + t698;
t765 = -t652 * t687 - t653 * t691;
t766 = -pkin(6) * t653 - g(1) * t686;
t770 = -pkin(5) * t765 + t633 * t687 - t691 * t766;
t607 = t652 * t691 - t653 * t687;
t769 = -pkin(5) * t607 - t633 * t691 - t687 * t766;
t669 = g(2) * t687 - g(3) * t691;
t693 = qJD(1) ^ 2;
t657 = -pkin(1) * t693 + t669;
t670 = g(2) * t691 + g(3) * t687;
t696 = qJDD(1) * pkin(1) + t670;
t609 = t657 * t686 - t690 * t696;
t610 = t690 * t657 + t686 * t696;
t705 = t609 * t686 + t690 * t610;
t547 = t609 * t690 - t610 * t686;
t737 = t547 * t691;
t495 = -t687 * t705 + t737;
t738 = t547 * t687;
t764 = -t691 * t705 - t738;
t682 = sin(pkin(9));
t683 = cos(pkin(9));
t689 = cos(qJ(3));
t685 = sin(qJ(3));
t726 = t680 * t685;
t636 = -t683 * t689 * t680 + t682 * t726;
t638 = (t682 * t689 + t683 * t685) * t680;
t598 = t638 * t636;
t754 = qJDD(3) - t598;
t763 = t682 * t754;
t762 = t683 * t754;
t684 = sin(qJ(5));
t688 = cos(qJ(5));
t577 = t688 * t636 + t638 * t684;
t579 = -t636 * t684 + t638 * t688;
t523 = t579 * t577;
t713 = qJDD(3) + qJDD(5);
t757 = -t523 + t713;
t761 = t684 * t757;
t760 = t688 * t757;
t679 = qJD(3) + qJD(5);
t570 = t679 * t577;
t701 = t685 * t714;
t719 = qJD(3) * t680;
t707 = t689 * t719;
t644 = t701 + t707;
t699 = t689 * t714;
t708 = t685 * t719;
t694 = t699 - t708;
t600 = t683 * t644 + t682 * t694;
t704 = t644 * t682 - t683 * t694;
t695 = qJD(5) * t577 - t600 * t688 + t684 * t704;
t756 = -t570 - t695;
t681 = t685 ^ 2;
t751 = t689 ^ 2;
t755 = t681 + t751;
t706 = t684 * t600 + t688 * t704;
t474 = (qJD(5) - t679) * t579 + t706;
t575 = t577 ^ 2;
t576 = t579 ^ 2;
t753 = t636 ^ 2;
t635 = t638 ^ 2;
t677 = t679 ^ 2;
t596 = -t752 * pkin(2) + t714 * pkin(7) + t610;
t724 = t685 * t596;
t529 = qJDD(3) * pkin(3) - t644 * qJ(4) - t724 + (-g(1) + (pkin(3) * t726 + qJ(4) * qJD(3)) * t680) * t689;
t574 = -t685 * g(1) + t689 * t596;
t658 = qJD(3) * pkin(3) - qJ(4) * t726;
t673 = t751 * t752;
t530 = -pkin(3) * t673 + qJ(4) * t694 - qJD(3) * t658 + t574;
t458 = 0.2e1 * qJD(4) * t638 - t683 * t529 + t682 * t530;
t721 = qJD(3) * t636;
t558 = -t600 - t721;
t435 = pkin(4) * t754 + pkin(8) * t558 - t458;
t459 = -0.2e1 * qJD(4) * t636 + t682 * t529 + t683 * t530;
t623 = qJD(3) * pkin(4) - pkin(8) * t638;
t437 = -pkin(4) * t753 - pkin(8) * t704 - qJD(3) * t623 + t459;
t387 = -t688 * t435 + t437 * t684;
t388 = t684 * t435 + t688 * t437;
t352 = -t387 * t688 + t388 * t684;
t748 = t352 * t682;
t747 = t352 * t683;
t405 = -t458 * t683 + t459 * t682;
t746 = t405 * t685;
t745 = t405 * t689;
t595 = -t714 * pkin(2) - t752 * pkin(7) + t609;
t531 = -t694 * pkin(3) - qJ(4) * t673 + t658 * t726 + qJDD(4) + t595;
t464 = pkin(4) * t704 - t753 * pkin(8) + t623 * t638 + t531;
t744 = t464 * t684;
t743 = t464 * t688;
t520 = t523 + t713;
t742 = t520 * t684;
t741 = t520 * t688;
t740 = t531 * t682;
t739 = t531 * t683;
t587 = qJDD(3) + t598;
t736 = t587 * t682;
t735 = t587 * t683;
t734 = t595 * t685;
t733 = t595 * t689;
t645 = t699 - 0.2e1 * t708;
t732 = t645 * t689;
t668 = t689 * t752 * t685;
t659 = qJDD(3) + t668;
t731 = t659 * t685;
t660 = qJDD(3) - t668;
t730 = t660 * t685;
t729 = t660 * t689;
t728 = t679 * t684;
t727 = t679 * t688;
t725 = t752 * t681;
t720 = qJD(3) * t638;
t718 = qJD(3) * t682;
t717 = qJD(3) * t683;
t715 = qJDD(3) * t690;
t712 = t686 * t523;
t711 = t690 * t523;
t710 = t686 * t598;
t709 = t690 * t598;
t353 = t387 * t684 + t688 * t388;
t406 = t458 * t682 + t683 * t459;
t573 = t689 * g(1) + t724;
t517 = t573 * t685 + t689 * t574;
t703 = t686 * t668;
t702 = t690 * t668;
t661 = qJDD(1) * t687 + t691 * t693;
t697 = pkin(5) * t661 - g(1) * t691;
t516 = t573 * t689 - t574 * t685;
t622 = t669 * t691 - t670 * t687;
t621 = -t669 * t687 - t670 * t691;
t556 = -t704 + t720;
t692 = qJD(3) ^ 2;
t676 = t686 * qJDD(3);
t667 = -t673 - t692;
t666 = t673 - t692;
t665 = -t692 - t725;
t664 = t692 - t725;
t662 = -qJDD(1) * t691 + t687 * t693;
t656 = t673 - t725;
t655 = t673 + t725;
t650 = t689 * t659;
t649 = t755 * t714;
t643 = t701 + 0.2e1 * t707;
t642 = -pkin(5) * t662 + g(1) * t687;
t641 = t755 * t719;
t626 = -t635 - t692;
t625 = -t635 + t692;
t624 = -t692 + t753;
t620 = t641 * t690 + t676;
t619 = t641 * t686 - t715;
t618 = t644 * t689 - t681 * t719;
t617 = -t685 * t694 - t751 * t719;
t616 = -t665 * t685 - t729;
t615 = -t664 * t685 + t650;
t614 = t667 * t689 - t731;
t613 = t666 * t689 - t730;
t612 = t665 * t689 - t730;
t611 = t667 * t685 + t650;
t605 = t649 * t690 - t655 * t686;
t602 = t649 * t686 + t655 * t690;
t601 = -t643 * t685 + t732;
t594 = t690 * t615 + t685 * t700;
t593 = t690 * t613 + t686 * t699;
t592 = t686 * t615 - t685 * t698;
t591 = t686 * t613 - t689 * t698;
t590 = -t635 + t753;
t585 = -t692 - t753;
t584 = t618 * t690 - t703;
t583 = t617 * t690 + t703;
t582 = t618 * t686 + t702;
t581 = t617 * t686 - t702;
t572 = (-t636 * t683 + t638 * t682) * qJD(3);
t571 = (-t636 * t682 - t638 * t683) * qJD(3);
t568 = t616 * t690 + t643 * t686;
t567 = t614 * t690 - t645 * t686;
t566 = t616 * t686 - t643 * t690;
t565 = t614 * t686 + t645 * t690;
t564 = -t576 + t677;
t563 = t575 - t677;
t561 = -t576 - t677;
t560 = t601 * t690 - t656 * t686;
t559 = t601 * t686 + t656 * t690;
t557 = t600 - t721;
t554 = t704 + t720;
t553 = -t635 - t753;
t552 = t600 * t683 - t638 * t718;
t551 = t600 * t682 + t638 * t717;
t550 = t636 * t717 + t682 * t704;
t549 = t636 * t718 - t683 * t704;
t544 = pkin(1) * g(1) + pkin(6) * t705;
t543 = -t626 * t682 - t735;
t542 = -t625 * t682 + t762;
t541 = t624 * t683 - t736;
t540 = t626 * t683 - t736;
t539 = t625 * t683 + t763;
t538 = t624 * t682 + t735;
t537 = -pkin(7) * t612 + t733;
t536 = -pkin(7) * t611 + t734;
t535 = -pkin(2) * t612 + t574;
t534 = -pkin(2) * t611 + t573;
t533 = -t602 * t687 + t605 * t691;
t532 = -t602 * t691 - t605 * t687;
t525 = t585 * t683 - t763;
t524 = t585 * t682 + t762;
t522 = -t576 + t575;
t518 = -t677 - t575;
t514 = -t571 * t685 + t572 * t689;
t513 = (-t577 * t688 + t579 * t684) * t679;
t512 = (-t577 * t684 - t579 * t688) * t679;
t511 = -t566 * t687 + t568 * t691;
t510 = -t565 * t687 + t567 * t691;
t509 = -t566 * t691 - t568 * t687;
t508 = -t565 * t691 - t567 * t687;
t507 = t514 * t690 + t676;
t506 = t514 * t686 - t715;
t505 = t556 * t683 - t558 * t682;
t504 = -t554 * t683 - t557 * t682;
t503 = t556 * t682 + t558 * t683;
t502 = -t554 * t682 + t557 * t683;
t500 = -qJD(5) * t579 - t706;
t499 = -t575 - t576;
t498 = -t551 * t685 + t552 * t689;
t497 = -t549 * t685 + t550 * t689;
t494 = -pkin(6) * t602 + t516 * t690;
t493 = pkin(6) * t605 + t516 * t686;
t492 = t517 * t690 + t595 * t686;
t491 = t517 * t686 - t595 * t690;
t490 = -t540 * t685 + t543 * t689;
t489 = -t539 * t685 + t542 * t689;
t488 = -t538 * t685 + t541 * t689;
t487 = t540 * t689 + t543 * t685;
t486 = t563 * t688 - t742;
t485 = -t564 * t684 + t760;
t484 = t563 * t684 + t741;
t483 = t564 * t688 + t761;
t482 = -t561 * t684 - t741;
t481 = t561 * t688 - t742;
t480 = -qJ(4) * t540 + t739;
t479 = -qJ(4) * t524 + t740;
t478 = -t570 + t695;
t473 = (qJD(5) + t679) * t579 + t706;
t472 = t498 * t690 + t710;
t471 = t497 * t690 - t710;
t470 = t498 * t686 - t709;
t469 = t497 * t686 + t709;
t468 = -t579 * t728 - t688 * t695;
t467 = t579 * t727 - t684 * t695;
t466 = -t500 * t684 + t577 * t727;
t465 = t500 * t688 + t577 * t728;
t463 = -t524 * t685 + t525 * t689;
t462 = t524 * t689 + t525 * t685;
t461 = t518 * t688 - t761;
t460 = t518 * t684 + t760;
t456 = -pkin(6) * t566 - t535 * t686 + t537 * t690;
t455 = -pkin(6) * t565 - t534 * t686 + t536 * t690;
t454 = t490 * t690 + t557 * t686;
t453 = t489 * t690 - t558 * t686;
t452 = t488 * t690 + t556 * t686;
t451 = t490 * t686 - t557 * t690;
t450 = t489 * t686 + t558 * t690;
t449 = t488 * t686 - t556 * t690;
t448 = -t512 * t682 + t513 * t683;
t447 = t512 * t683 + t513 * t682;
t446 = -pkin(3) * t557 + qJ(4) * t543 + t740;
t445 = -pkin(1) * t612 + pkin(6) * t568 + t535 * t690 + t537 * t686;
t444 = -pkin(1) * t611 + pkin(6) * t567 + t534 * t690 + t536 * t686;
t443 = -pkin(3) * t554 + qJ(4) * t525 - t739;
t442 = t463 * t690 + t554 * t686;
t441 = t463 * t686 - t554 * t690;
t440 = -t503 * t685 + t505 * t689;
t439 = -t502 * t685 + t504 * t689;
t438 = t503 * t689 + t505 * t685;
t434 = -t491 * t687 + t492 * t691;
t433 = -t491 * t691 - t492 * t687;
t432 = t439 * t690 - t590 * t686;
t431 = t439 * t686 + t590 * t690;
t428 = -t484 * t682 + t486 * t683;
t427 = -t483 * t682 + t485 * t683;
t426 = t484 * t683 + t486 * t682;
t425 = t483 * t683 + t485 * t682;
t424 = -t481 * t682 + t482 * t683;
t423 = t481 * t683 + t482 * t682;
t422 = t440 * t690 + t553 * t686;
t421 = t440 * t686 - t553 * t690;
t420 = -pkin(8) * t481 + t743;
t419 = -pkin(6) * t491 - (pkin(2) * t686 - pkin(7) * t690) * t516;
t418 = -t474 * t688 - t478 * t684;
t417 = -t473 * t688 - t684 * t756;
t416 = -t474 * t684 + t478 * t688;
t415 = -t473 * t684 + t688 * t756;
t414 = -t467 * t682 + t468 * t683;
t413 = -t465 * t682 + t466 * t683;
t412 = t467 * t683 + t468 * t682;
t411 = t465 * t683 + t466 * t682;
t410 = -pkin(2) * t438 - pkin(3) * t503;
t409 = -pkin(8) * t460 + t744;
t408 = -t460 * t682 + t461 * t683;
t407 = t460 * t683 + t461 * t682;
t404 = -pkin(2) * t487 - pkin(3) * t540 + t459;
t403 = -t451 * t687 + t454 * t691;
t402 = -t451 * t691 - t454 * t687;
t401 = -t447 * t685 + t448 * t689;
t400 = t401 * t690 + t686 * t713;
t399 = t401 * t686 - t690 * t713;
t398 = pkin(6) * t492 - (-pkin(2) * t690 - pkin(7) * t686 - pkin(1)) * t516;
t397 = -pkin(2) * t462 - pkin(3) * t524 + t458;
t396 = -pkin(3) * t531 + qJ(4) * t406;
t395 = -t441 * t687 + t442 * t691;
t394 = -t441 * t691 - t442 * t687;
t393 = -pkin(4) * t756 + pkin(8) * t482 + t744;
t392 = -qJ(4) * t503 - t405;
t391 = -pkin(7) * t487 - t446 * t685 + t480 * t689;
t390 = -pkin(4) * t473 + pkin(8) * t461 - t743;
t389 = -pkin(3) * t553 + qJ(4) * t505 + t406;
t385 = -pkin(7) * t462 - t443 * t685 + t479 * t689;
t384 = -t426 * t685 + t428 * t689;
t383 = -t425 * t685 + t427 * t689;
t382 = -t423 * t685 + t424 * t689;
t381 = t423 * t689 + t424 * t685;
t380 = -t421 * t687 + t422 * t691;
t379 = -t421 * t691 - t422 * t687;
t378 = -t416 * t682 + t418 * t683;
t377 = -t415 * t682 + t417 * t683;
t376 = t416 * t683 + t418 * t682;
t375 = t415 * t683 + t417 * t682;
t374 = -t412 * t685 + t414 * t689;
t373 = -t411 * t685 + t413 * t689;
t372 = -t407 * t685 + t408 * t689;
t371 = t407 * t689 + t408 * t685;
t370 = t384 * t690 - t474 * t686;
t369 = t383 * t690 - t478 * t686;
t368 = t384 * t686 + t474 * t690;
t367 = t383 * t686 + t478 * t690;
t366 = t406 * t689 - t746;
t365 = t406 * t685 + t745;
t364 = t382 * t690 + t686 * t756;
t363 = t382 * t686 - t690 * t756;
t362 = t374 * t690 + t712;
t361 = t373 * t690 - t712;
t360 = t374 * t686 - t711;
t359 = t373 * t686 + t711;
t358 = t366 * t690 + t531 * t686;
t357 = t366 * t686 - t531 * t690;
t356 = t372 * t690 + t473 * t686;
t355 = t372 * t686 - t473 * t690;
t354 = -pkin(6) * t451 + t391 * t690 - t404 * t686;
t351 = -qJ(4) * t423 - t393 * t682 + t420 * t683;
t350 = -pkin(2) * t365 - pkin(3) * t405;
t349 = -pkin(1) * t487 + pkin(6) * t454 + t391 * t686 + t404 * t690;
t348 = -pkin(6) * t441 + t385 * t690 - t397 * t686;
t347 = -qJ(4) * t407 - t390 * t682 + t409 * t683;
t346 = -pkin(3) * t756 + qJ(4) * t424 + t393 * t683 + t420 * t682;
t345 = -pkin(4) * t464 + pkin(8) * t353;
t344 = -pkin(7) * t438 - t389 * t685 + t392 * t689;
t343 = -t376 * t685 + t378 * t689;
t342 = -t375 * t685 + t377 * t689;
t341 = t376 * t689 + t378 * t685;
t340 = -pkin(1) * t462 + pkin(6) * t442 + t385 * t686 + t397 * t690;
t339 = -pkin(3) * t473 + qJ(4) * t408 + t390 * t683 + t409 * t682;
t338 = -pkin(8) * t416 - t352;
t337 = t342 * t690 - t522 * t686;
t336 = t342 * t686 + t522 * t690;
t335 = t343 * t690 + t499 * t686;
t334 = t343 * t686 - t499 * t690;
t333 = -t363 * t687 + t364 * t691;
t332 = -t363 * t691 - t364 * t687;
t331 = -pkin(4) * t499 + pkin(8) * t418 + t353;
t330 = -pkin(2) * t381 - pkin(3) * t423 - pkin(4) * t481 + t388;
t329 = -pkin(7) * t365 - qJ(4) * t745 - t396 * t685;
t328 = -t357 * t687 + t358 * t691;
t327 = -t357 * t691 - t358 * t687;
t326 = -t355 * t687 + t356 * t691;
t325 = -t355 * t691 - t356 * t687;
t324 = -pkin(2) * t371 - pkin(3) * t407 - pkin(4) * t460 + t387;
t323 = -pkin(6) * t421 + t344 * t690 - t410 * t686;
t322 = -pkin(1) * t438 + pkin(6) * t422 + t344 * t686 + t410 * t690;
t321 = t353 * t683 - t748;
t320 = t353 * t682 + t747;
t319 = -pkin(2) * t341 - pkin(3) * t376 - pkin(4) * t416;
t318 = -pkin(7) * t381 - t346 * t685 + t351 * t689;
t317 = -t334 * t687 + t335 * t691;
t316 = -t334 * t691 - t335 * t687;
t315 = -pkin(7) * t371 - t339 * t685 + t347 * t689;
t314 = -pkin(6) * t357 + t329 * t690 - t350 * t686;
t313 = -qJ(4) * t376 - t331 * t682 + t338 * t683;
t312 = -pkin(3) * t499 + qJ(4) * t378 + t331 * t683 + t338 * t682;
t311 = -pkin(1) * t365 + pkin(6) * t358 + t329 * t686 + t350 * t690;
t310 = -t320 * t685 + t321 * t689;
t309 = t320 * t689 + t321 * t685;
t308 = -pkin(8) * t747 - qJ(4) * t320 - t345 * t682;
t307 = t310 * t690 + t464 * t686;
t306 = t310 * t686 - t464 * t690;
t305 = -pkin(3) * t464 - pkin(8) * t748 + qJ(4) * t321 + t345 * t683;
t304 = -pkin(6) * t363 + t318 * t690 - t330 * t686;
t303 = -pkin(1) * t381 + pkin(6) * t364 + t318 * t686 + t330 * t690;
t302 = -pkin(6) * t355 + t315 * t690 - t324 * t686;
t301 = -pkin(1) * t371 + pkin(6) * t356 + t315 * t686 + t324 * t690;
t300 = -pkin(2) * t309 - pkin(3) * t320 - pkin(4) * t352;
t299 = -pkin(7) * t341 - t312 * t685 + t313 * t689;
t298 = -t306 * t687 + t307 * t691;
t297 = -t306 * t691 - t307 * t687;
t296 = -pkin(6) * t334 + t299 * t690 - t319 * t686;
t295 = -pkin(7) * t309 - t305 * t685 + t308 * t689;
t294 = -pkin(1) * t341 + pkin(6) * t335 + t299 * t686 + t319 * t690;
t293 = -pkin(6) * t306 + t295 * t690 - t300 * t686;
t292 = -pkin(1) * t309 + pkin(6) * t307 + t295 * t686 + t300 * t690;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t611, t612, 0, -t516, 0, 0, 0, 0, 0, 0, t462, t487, t438, t365, 0, 0, 0, 0, 0, 0, t371, t381, t341, t309; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t662, t661, 0, t621, 0, 0, 0, 0, 0, 0, t765, -t607, 0, t495, 0, 0, 0, 0, 0, 0, t508, t509, t532, t433, 0, 0, 0, 0, 0, 0, t394, t402, t379, t327, 0, 0, 0, 0, 0, 0, t325, t332, t316, t297; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t661, t662, 0, t622, 0, 0, 0, 0, 0, 0, t607, t765, 0, -t764, 0, 0, 0, 0, 0, 0, t510, t511, t533, t434, 0, 0, 0, 0, 0, 0, t395, t403, t380, t328, 0, 0, 0, 0, 0, 0, t326, t333, t317, t298; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t670, -t669, 0, 0, 0, 0, 0, 0, 0, t714, pkin(1) * t653 - t609, pkin(1) * t652 - t610, 0, -pkin(1) * t547, (t644 + t707) * t685, t643 * t689 + t645 * t685, t664 * t689 + t731, t732, t666 * t685 + t729, 0, pkin(1) * t565 + pkin(2) * t645 + pkin(7) * t614 - t733, pkin(1) * t566 - pkin(2) * t643 + pkin(7) * t616 + t734, pkin(1) * t602 + pkin(2) * t655 + pkin(7) * t649 + t517, pkin(1) * t491 - pkin(2) * t595 + pkin(7) * t517, t551 * t689 + t552 * t685, t502 * t689 + t504 * t685, t539 * t689 + t542 * t685, t549 * t689 + t550 * t685, t538 * t689 + t541 * t685, t571 * t689 + t572 * t685, pkin(1) * t441 - pkin(2) * t554 + pkin(7) * t463 + t443 * t689 + t479 * t685, pkin(1) * t451 - pkin(2) * t557 + pkin(7) * t490 + t446 * t689 + t480 * t685, pkin(1) * t421 - pkin(2) * t553 + pkin(7) * t440 + t389 * t689 + t392 * t685, pkin(1) * t357 - pkin(2) * t531 + pkin(7) * t366 - qJ(4) * t746 + t396 * t689, t412 * t689 + t414 * t685, t375 * t689 + t377 * t685, t425 * t689 + t427 * t685, t411 * t689 + t413 * t685, t426 * t689 + t428 * t685, t447 * t689 + t448 * t685, pkin(1) * t355 - pkin(2) * t473 + pkin(7) * t372 + t339 * t689 + t347 * t685, pkin(1) * t363 - pkin(2) * t756 + pkin(7) * t382 + t346 * t689 + t351 * t685, pkin(1) * t334 - pkin(2) * t499 + pkin(7) * t343 + t312 * t689 + t313 * t685, pkin(1) * t306 - pkin(2) * t464 + pkin(7) * t310 + t305 * t689 + t308 * t685; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t661, 0, t662, 0, t697, t642, -t622, -pkin(5) * t622, 0, 0, t607, 0, t765, 0, t769, t770, t764, pkin(5) * t764 - pkin(6) * t738 - t544 * t691, -t582 * t691 - t584 * t687, -t559 * t691 - t560 * t687, -t592 * t691 - t594 * t687, -t581 * t691 - t583 * t687, -t591 * t691 - t593 * t687, -t619 * t691 - t620 * t687, -pkin(5) * t510 - t444 * t691 - t455 * t687, -pkin(5) * t511 - t445 * t691 - t456 * t687, -pkin(5) * t533 - t493 * t691 - t494 * t687, -pkin(5) * t434 - t398 * t691 - t419 * t687, -t470 * t691 - t472 * t687, -t431 * t691 - t432 * t687, -t450 * t691 - t453 * t687, -t469 * t691 - t471 * t687, -t449 * t691 - t452 * t687, -t506 * t691 - t507 * t687, -pkin(5) * t395 - t340 * t691 - t348 * t687, -pkin(5) * t403 - t349 * t691 - t354 * t687, -pkin(5) * t380 - t322 * t691 - t323 * t687, -pkin(5) * t328 - t311 * t691 - t314 * t687, -t360 * t691 - t362 * t687, -t336 * t691 - t337 * t687, -t367 * t691 - t369 * t687, -t359 * t691 - t361 * t687, -t368 * t691 - t370 * t687, -t399 * t691 - t400 * t687, -pkin(5) * t326 - t301 * t691 - t302 * t687, -pkin(5) * t333 - t303 * t691 - t304 * t687, -pkin(5) * t317 - t294 * t691 - t296 * t687, -pkin(5) * t298 - t292 * t691 - t293 * t687; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t662, 0, -t661, 0, -t642, t697, t621, pkin(5) * t621, 0, 0, -t765, 0, t607, 0, -t770, t769, t495, pkin(5) * t495 + pkin(6) * t737 - t544 * t687, -t582 * t687 + t584 * t691, -t559 * t687 + t560 * t691, -t592 * t687 + t594 * t691, -t581 * t687 + t583 * t691, -t591 * t687 + t593 * t691, -t619 * t687 + t620 * t691, pkin(5) * t508 - t444 * t687 + t455 * t691, pkin(5) * t509 - t445 * t687 + t456 * t691, pkin(5) * t532 - t493 * t687 + t494 * t691, pkin(5) * t433 - t398 * t687 + t419 * t691, -t470 * t687 + t472 * t691, -t431 * t687 + t432 * t691, -t450 * t687 + t453 * t691, -t469 * t687 + t471 * t691, -t449 * t687 + t452 * t691, -t506 * t687 + t507 * t691, pkin(5) * t394 - t340 * t687 + t348 * t691, pkin(5) * t402 - t349 * t687 + t354 * t691, pkin(5) * t379 - t322 * t687 + t323 * t691, pkin(5) * t327 - t311 * t687 + t314 * t691, -t360 * t687 + t362 * t691, -t336 * t687 + t337 * t691, -t367 * t687 + t369 * t691, -t359 * t687 + t361 * t691, -t368 * t687 + t370 * t691, -t399 * t687 + t400 * t691, pkin(5) * t325 - t301 * t687 + t302 * t691, pkin(5) * t332 - t303 * t687 + t304 * t691, pkin(5) * t316 - t294 * t687 + t296 * t691, pkin(5) * t297 - t292 * t687 + t293 * t691;];
tauB_reg = t1;
