% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 12:10
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRPR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR3_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR3_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRPR3_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 12:09:39
% EndTime: 2020-01-03 12:09:54
% DurationCPUTime: 15.10s
% Computational Cost: add. (88153->603), mult. (119643->922), div. (0->0), fcn. (80292->10), ass. (0->417)
t696 = cos(qJ(2));
t692 = sin(qJ(2));
t720 = qJDD(1) + qJDD(2);
t705 = t692 * t720;
t686 = qJD(1) + qJD(2);
t759 = t686 ^ 2;
t653 = -t696 * t759 - t705;
t703 = t696 * t720;
t654 = -t692 * t759 + t703;
t693 = sin(qJ(1));
t697 = cos(qJ(1));
t603 = t653 * t697 - t654 * t693;
t633 = pkin(6) * t653 + g(1) * t696;
t772 = -pkin(6) * t654 - g(1) * t692;
t776 = pkin(5) * t603 + t633 * t697 + t693 * t772;
t606 = t653 * t693 + t654 * t697;
t775 = pkin(5) * t606 + t633 * t693 - t697 * t772;
t671 = g(2) * t693 - g(3) * t697;
t757 = qJD(1) ^ 2;
t659 = -pkin(1) * t757 - t671;
t672 = g(2) * t697 + g(3) * t693;
t701 = qJDD(1) * pkin(1) - t672;
t609 = t659 * t692 - t696 * t701;
t610 = t659 * t696 + t692 * t701;
t710 = t609 * t692 + t610 * t696;
t547 = t609 * t696 - t610 * t692;
t743 = t547 * t697;
t495 = t693 * t710 - t743;
t744 = t547 * t693;
t771 = t697 * t710 + t744;
t688 = sin(pkin(9));
t689 = cos(pkin(9));
t695 = cos(qJ(3));
t691 = sin(qJ(3));
t731 = t686 * t691;
t636 = -t686 * t689 * t695 + t688 * t731;
t638 = (t688 * t695 + t689 * t691) * t686;
t598 = t638 * t636;
t761 = qJDD(3) - t598;
t770 = t688 * t761;
t769 = t689 * t761;
t690 = sin(qJ(5));
t694 = cos(qJ(5));
t577 = t636 * t694 + t638 * t690;
t579 = -t636 * t690 + t638 * t694;
t523 = t579 * t577;
t719 = qJDD(3) + qJDD(5);
t764 = -t523 + t719;
t768 = t690 * t764;
t767 = t694 * t764;
t685 = qJD(3) + qJD(5);
t570 = t685 * t577;
t706 = t691 * t720;
t725 = qJD(3) * t686;
t713 = t695 * t725;
t645 = t706 + t713;
t704 = t695 * t720;
t714 = t691 * t725;
t699 = t704 - t714;
t600 = t689 * t645 + t688 * t699;
t709 = t645 * t688 - t689 * t699;
t700 = qJD(5) * t577 - t600 * t694 + t690 * t709;
t763 = -t570 - t700;
t687 = t691 ^ 2;
t758 = t695 ^ 2;
t762 = t687 + t758;
t711 = t690 * t600 + t694 * t709;
t474 = (qJD(5) - t685) * t579 + t711;
t575 = t577 ^ 2;
t576 = t579 ^ 2;
t760 = t636 ^ 2;
t635 = t638 ^ 2;
t683 = t685 ^ 2;
t596 = -pkin(2) * t759 + pkin(7) * t720 + t610;
t738 = t596 * t691;
t529 = qJDD(3) * pkin(3) - qJ(4) * t645 - t738 + (-g(1) + (pkin(3) * t731 + qJ(4) * qJD(3)) * t686) * t695;
t574 = -t691 * g(1) + t596 * t695;
t660 = qJD(3) * pkin(3) - qJ(4) * t731;
t675 = t758 * t759;
t530 = -pkin(3) * t675 + qJ(4) * t699 - qJD(3) * t660 + t574;
t458 = 0.2e1 * qJD(4) * t638 - t529 * t689 + t530 * t688;
t727 = qJD(3) * t636;
t558 = -t600 - t727;
t435 = pkin(4) * t761 + pkin(8) * t558 - t458;
t459 = -0.2e1 * qJD(4) * t636 + t529 * t688 + t530 * t689;
t623 = qJD(3) * pkin(4) - pkin(8) * t638;
t437 = -pkin(4) * t760 - pkin(8) * t709 - qJD(3) * t623 + t459;
t387 = -t435 * t694 + t437 * t690;
t388 = t435 * t690 + t437 * t694;
t352 = -t387 * t694 + t388 * t690;
t754 = t352 * t688;
t753 = t352 * t689;
t405 = -t458 * t689 + t459 * t688;
t752 = t405 * t691;
t751 = t405 * t695;
t595 = -pkin(2) * t720 - pkin(7) * t759 + t609;
t531 = -pkin(3) * t699 - qJ(4) * t675 + t660 * t731 + qJDD(4) + t595;
t464 = pkin(4) * t709 - pkin(8) * t760 + t623 * t638 + t531;
t750 = t464 * t690;
t749 = t464 * t694;
t520 = t523 + t719;
t748 = t520 * t690;
t747 = t520 * t694;
t746 = t531 * t688;
t745 = t531 * t689;
t587 = qJDD(3) + t598;
t742 = t587 * t688;
t741 = t587 * t689;
t740 = t595 * t691;
t739 = t595 * t695;
t646 = t704 - 0.2e1 * t714;
t737 = t646 * t695;
t670 = t695 * t759 * t691;
t661 = qJDD(3) + t670;
t736 = t661 * t691;
t662 = qJDD(3) - t670;
t735 = t662 * t691;
t734 = t662 * t695;
t733 = t685 * t690;
t732 = t685 * t694;
t730 = t759 * t687;
t726 = qJD(3) * t638;
t724 = qJD(3) * t688;
t723 = qJD(3) * t689;
t721 = qJDD(3) * t696;
t718 = t692 * t523;
t717 = t696 * t523;
t716 = t692 * t598;
t715 = t696 * t598;
t663 = -qJDD(1) * t693 - t697 * t757;
t712 = pkin(5) * t663 + g(1) * t697;
t353 = t387 * t690 + t388 * t694;
t406 = t458 * t688 + t459 * t689;
t573 = g(1) * t695 + t738;
t517 = t573 * t691 + t574 * t695;
t621 = -t671 * t693 - t672 * t697;
t708 = t692 * t670;
t707 = t696 * t670;
t516 = t573 * t695 - t574 * t691;
t622 = t671 * t697 - t672 * t693;
t556 = -t709 + t726;
t698 = qJD(3) ^ 2;
t678 = t692 * qJDD(3);
t669 = -t675 - t698;
t668 = t675 - t698;
t667 = -t698 - t730;
t666 = t698 - t730;
t664 = qJDD(1) * t697 - t693 * t757;
t657 = t675 - t730;
t656 = t675 + t730;
t651 = t695 * t661;
t650 = t762 * t720;
t644 = t706 + 0.2e1 * t713;
t643 = pkin(5) * t664 + g(1) * t693;
t642 = t762 * t725;
t626 = -t635 - t698;
t625 = -t635 + t698;
t624 = -t698 + t760;
t620 = t642 * t696 + t678;
t619 = t642 * t692 - t721;
t618 = t645 * t695 - t687 * t725;
t617 = -t691 * t699 - t725 * t758;
t616 = -t667 * t691 - t734;
t615 = -t666 * t691 + t651;
t614 = t669 * t695 - t736;
t613 = t668 * t695 - t735;
t612 = t667 * t695 - t735;
t611 = t669 * t691 + t651;
t605 = t650 * t696 - t656 * t692;
t602 = t650 * t692 + t656 * t696;
t601 = -t644 * t691 + t737;
t594 = t615 * t696 + t691 * t705;
t593 = t613 * t696 + t692 * t704;
t592 = t615 * t692 - t691 * t703;
t591 = t613 * t692 - t695 * t703;
t590 = -t635 + t760;
t585 = -t698 - t760;
t584 = t618 * t696 - t708;
t583 = t617 * t696 + t708;
t582 = t618 * t692 + t707;
t581 = t617 * t692 - t707;
t572 = (-t636 * t689 + t638 * t688) * qJD(3);
t571 = (-t636 * t688 - t638 * t689) * qJD(3);
t568 = t616 * t696 + t644 * t692;
t567 = t614 * t696 - t646 * t692;
t566 = t616 * t692 - t644 * t696;
t565 = t614 * t692 + t646 * t696;
t564 = -t576 + t683;
t563 = t575 - t683;
t561 = -t576 - t683;
t560 = t601 * t696 - t657 * t692;
t559 = t601 * t692 + t657 * t696;
t557 = t600 - t727;
t554 = t709 + t726;
t553 = -t635 - t760;
t552 = t600 * t689 - t638 * t724;
t551 = t600 * t688 + t638 * t723;
t550 = t636 * t723 + t688 * t709;
t549 = t636 * t724 - t689 * t709;
t544 = pkin(1) * g(1) + pkin(6) * t710;
t543 = -t626 * t688 - t741;
t542 = -t625 * t688 + t769;
t541 = t624 * t689 - t742;
t540 = t626 * t689 - t742;
t539 = t625 * t689 + t770;
t538 = t624 * t688 + t741;
t537 = -pkin(7) * t612 + t739;
t536 = -pkin(7) * t611 + t740;
t535 = -pkin(2) * t612 + t574;
t534 = -pkin(2) * t611 + t573;
t533 = t602 * t693 - t605 * t697;
t532 = t602 * t697 + t605 * t693;
t525 = t585 * t689 - t770;
t524 = t585 * t688 + t769;
t522 = -t576 + t575;
t518 = -t683 - t575;
t514 = -t571 * t691 + t572 * t695;
t513 = (-t577 * t694 + t579 * t690) * t685;
t512 = (-t577 * t690 - t579 * t694) * t685;
t511 = t566 * t693 - t568 * t697;
t510 = t565 * t693 - t567 * t697;
t509 = t566 * t697 + t568 * t693;
t508 = t565 * t697 + t567 * t693;
t507 = t514 * t696 + t678;
t506 = t514 * t692 - t721;
t505 = t556 * t689 - t558 * t688;
t504 = -t554 * t689 - t557 * t688;
t503 = t556 * t688 + t558 * t689;
t502 = -t554 * t688 + t557 * t689;
t500 = -qJD(5) * t579 - t711;
t499 = -t575 - t576;
t498 = -t551 * t691 + t552 * t695;
t497 = -t549 * t691 + t550 * t695;
t494 = -pkin(6) * t602 + t516 * t696;
t493 = pkin(6) * t605 + t516 * t692;
t492 = t517 * t696 + t595 * t692;
t491 = t517 * t692 - t595 * t696;
t490 = -t540 * t691 + t543 * t695;
t489 = -t539 * t691 + t542 * t695;
t488 = -t538 * t691 + t541 * t695;
t487 = t540 * t695 + t543 * t691;
t486 = t563 * t694 - t748;
t485 = -t564 * t690 + t767;
t484 = t563 * t690 + t747;
t483 = t564 * t694 + t768;
t482 = -t561 * t690 - t747;
t481 = t561 * t694 - t748;
t480 = -qJ(4) * t540 + t745;
t479 = -qJ(4) * t524 + t746;
t478 = -t570 + t700;
t473 = (qJD(5) + t685) * t579 + t711;
t472 = t498 * t696 + t716;
t471 = t497 * t696 - t716;
t470 = t498 * t692 - t715;
t469 = t497 * t692 + t715;
t468 = -t579 * t733 - t694 * t700;
t467 = t579 * t732 - t690 * t700;
t466 = -t500 * t690 + t577 * t732;
t465 = t500 * t694 + t577 * t733;
t463 = -t524 * t691 + t525 * t695;
t462 = t524 * t695 + t525 * t691;
t461 = t518 * t694 - t768;
t460 = t518 * t690 + t767;
t456 = -pkin(6) * t566 - t535 * t692 + t537 * t696;
t455 = -pkin(6) * t565 - t534 * t692 + t536 * t696;
t454 = t490 * t696 + t557 * t692;
t453 = t489 * t696 - t558 * t692;
t452 = t488 * t696 + t556 * t692;
t451 = t490 * t692 - t557 * t696;
t450 = t489 * t692 + t558 * t696;
t449 = t488 * t692 - t556 * t696;
t448 = -t512 * t688 + t513 * t689;
t447 = t512 * t689 + t513 * t688;
t446 = -pkin(3) * t557 + qJ(4) * t543 + t746;
t445 = -pkin(1) * t612 + pkin(6) * t568 + t535 * t696 + t537 * t692;
t444 = -pkin(1) * t611 + pkin(6) * t567 + t534 * t696 + t536 * t692;
t443 = -pkin(3) * t554 + qJ(4) * t525 - t745;
t442 = t463 * t696 + t554 * t692;
t441 = t463 * t692 - t554 * t696;
t440 = -t503 * t691 + t505 * t695;
t439 = -t502 * t691 + t504 * t695;
t438 = t503 * t695 + t505 * t691;
t434 = t491 * t693 - t492 * t697;
t433 = t491 * t697 + t492 * t693;
t432 = t439 * t696 - t590 * t692;
t431 = t439 * t692 + t590 * t696;
t428 = -t484 * t688 + t486 * t689;
t427 = -t483 * t688 + t485 * t689;
t426 = t484 * t689 + t486 * t688;
t425 = t483 * t689 + t485 * t688;
t424 = -t481 * t688 + t482 * t689;
t423 = t481 * t689 + t482 * t688;
t422 = t440 * t696 + t553 * t692;
t421 = t440 * t692 - t553 * t696;
t420 = -pkin(8) * t481 + t749;
t419 = -pkin(6) * t491 - (pkin(2) * t692 - pkin(7) * t696) * t516;
t418 = -t474 * t694 - t478 * t690;
t417 = -t473 * t694 - t690 * t763;
t416 = -t474 * t690 + t478 * t694;
t415 = -t473 * t690 + t694 * t763;
t414 = -t467 * t688 + t468 * t689;
t413 = -t465 * t688 + t466 * t689;
t412 = t467 * t689 + t468 * t688;
t411 = t465 * t689 + t466 * t688;
t410 = -pkin(2) * t438 - pkin(3) * t503;
t409 = -pkin(8) * t460 + t750;
t408 = -t460 * t688 + t461 * t689;
t407 = t460 * t689 + t461 * t688;
t404 = -pkin(2) * t487 - pkin(3) * t540 + t459;
t403 = t451 * t693 - t454 * t697;
t402 = t451 * t697 + t454 * t693;
t401 = -t447 * t691 + t448 * t695;
t400 = t401 * t696 + t692 * t719;
t399 = t401 * t692 - t696 * t719;
t398 = pkin(6) * t492 - (-pkin(2) * t696 - pkin(7) * t692 - pkin(1)) * t516;
t397 = -pkin(2) * t462 - pkin(3) * t524 + t458;
t396 = -pkin(3) * t531 + qJ(4) * t406;
t395 = t441 * t693 - t442 * t697;
t394 = t441 * t697 + t442 * t693;
t393 = -pkin(4) * t763 + pkin(8) * t482 + t750;
t392 = -qJ(4) * t503 - t405;
t391 = -pkin(7) * t487 - t446 * t691 + t480 * t695;
t390 = -pkin(4) * t473 + pkin(8) * t461 - t749;
t389 = -pkin(3) * t553 + qJ(4) * t505 + t406;
t385 = -pkin(7) * t462 - t443 * t691 + t479 * t695;
t384 = -t426 * t691 + t428 * t695;
t383 = -t425 * t691 + t427 * t695;
t382 = -t423 * t691 + t424 * t695;
t381 = t423 * t695 + t424 * t691;
t380 = t421 * t693 - t422 * t697;
t379 = t421 * t697 + t422 * t693;
t378 = -t416 * t688 + t418 * t689;
t377 = -t415 * t688 + t417 * t689;
t376 = t416 * t689 + t418 * t688;
t375 = t415 * t689 + t417 * t688;
t374 = -t412 * t691 + t414 * t695;
t373 = -t411 * t691 + t413 * t695;
t372 = -t407 * t691 + t408 * t695;
t371 = t407 * t695 + t408 * t691;
t370 = t384 * t696 - t474 * t692;
t369 = t383 * t696 - t478 * t692;
t368 = t384 * t692 + t474 * t696;
t367 = t383 * t692 + t478 * t696;
t366 = t406 * t695 - t752;
t365 = t406 * t691 + t751;
t364 = t382 * t696 + t692 * t763;
t363 = t382 * t692 - t696 * t763;
t362 = t374 * t696 + t718;
t361 = t373 * t696 - t718;
t360 = t374 * t692 - t717;
t359 = t373 * t692 + t717;
t358 = t366 * t696 + t531 * t692;
t357 = t366 * t692 - t531 * t696;
t356 = t372 * t696 + t473 * t692;
t355 = t372 * t692 - t473 * t696;
t354 = -pkin(6) * t451 + t391 * t696 - t404 * t692;
t351 = -qJ(4) * t423 - t393 * t688 + t420 * t689;
t350 = -pkin(2) * t365 - pkin(3) * t405;
t349 = -pkin(1) * t487 + pkin(6) * t454 + t391 * t692 + t404 * t696;
t348 = -pkin(6) * t441 + t385 * t696 - t397 * t692;
t347 = -qJ(4) * t407 - t390 * t688 + t409 * t689;
t346 = -pkin(3) * t763 + qJ(4) * t424 + t393 * t689 + t420 * t688;
t345 = -pkin(4) * t464 + pkin(8) * t353;
t344 = -pkin(7) * t438 - t389 * t691 + t392 * t695;
t343 = -t376 * t691 + t378 * t695;
t342 = -t375 * t691 + t377 * t695;
t341 = t376 * t695 + t378 * t691;
t340 = -pkin(1) * t462 + pkin(6) * t442 + t385 * t692 + t397 * t696;
t339 = -pkin(3) * t473 + qJ(4) * t408 + t390 * t689 + t409 * t688;
t338 = -pkin(8) * t416 - t352;
t337 = t342 * t696 - t522 * t692;
t336 = t342 * t692 + t522 * t696;
t335 = t343 * t696 + t499 * t692;
t334 = t343 * t692 - t499 * t696;
t333 = t363 * t693 - t364 * t697;
t332 = t363 * t697 + t364 * t693;
t331 = -pkin(4) * t499 + pkin(8) * t418 + t353;
t330 = -pkin(2) * t381 - pkin(3) * t423 - pkin(4) * t481 + t388;
t329 = -pkin(7) * t365 - qJ(4) * t751 - t396 * t691;
t328 = t357 * t693 - t358 * t697;
t327 = t357 * t697 + t358 * t693;
t326 = t355 * t693 - t356 * t697;
t325 = t355 * t697 + t356 * t693;
t324 = -pkin(2) * t371 - pkin(3) * t407 - pkin(4) * t460 + t387;
t323 = -pkin(6) * t421 + t344 * t696 - t410 * t692;
t322 = -pkin(1) * t438 + pkin(6) * t422 + t344 * t692 + t410 * t696;
t321 = t353 * t689 - t754;
t320 = t353 * t688 + t753;
t319 = -pkin(2) * t341 - pkin(3) * t376 - pkin(4) * t416;
t318 = -pkin(7) * t381 - t346 * t691 + t351 * t695;
t317 = t334 * t693 - t335 * t697;
t316 = t334 * t697 + t335 * t693;
t315 = -pkin(7) * t371 - t339 * t691 + t347 * t695;
t314 = -pkin(6) * t357 + t329 * t696 - t350 * t692;
t313 = -qJ(4) * t376 - t331 * t688 + t338 * t689;
t312 = -pkin(3) * t499 + qJ(4) * t378 + t331 * t689 + t338 * t688;
t311 = -pkin(1) * t365 + pkin(6) * t358 + t329 * t692 + t350 * t696;
t310 = -t320 * t691 + t321 * t695;
t309 = t320 * t695 + t321 * t691;
t308 = -pkin(8) * t753 - qJ(4) * t320 - t345 * t688;
t307 = t310 * t696 + t464 * t692;
t306 = t310 * t692 - t464 * t696;
t305 = -pkin(3) * t464 - pkin(8) * t754 + qJ(4) * t321 + t345 * t689;
t304 = -pkin(6) * t363 + t318 * t696 - t330 * t692;
t303 = -pkin(1) * t381 + pkin(6) * t364 + t318 * t692 + t330 * t696;
t302 = -pkin(6) * t355 + t315 * t696 - t324 * t692;
t301 = -pkin(1) * t371 + pkin(6) * t356 + t315 * t692 + t324 * t696;
t300 = -pkin(2) * t309 - pkin(3) * t320 - pkin(4) * t352;
t299 = -pkin(7) * t341 - t312 * t691 + t313 * t695;
t298 = t306 * t693 - t307 * t697;
t297 = t306 * t697 + t307 * t693;
t296 = -pkin(6) * t334 + t299 * t696 - t319 * t692;
t295 = -pkin(7) * t309 - t305 * t691 + t308 * t695;
t294 = -pkin(1) * t341 + pkin(6) * t335 + t299 * t692 + t319 * t696;
t293 = -pkin(6) * t306 + t295 * t696 - t300 * t692;
t292 = -pkin(1) * t309 + pkin(6) * t307 + t295 * t692 + t300 * t696;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t611, t612, 0, -t516, 0, 0, 0, 0, 0, 0, t462, t487, t438, t365, 0, 0, 0, 0, 0, 0, t371, t381, t341, t309; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t664, t663, 0, t621, 0, 0, 0, 0, 0, 0, t606, t603, 0, t495, 0, 0, 0, 0, 0, 0, t508, t509, t532, t433, 0, 0, 0, 0, 0, 0, t394, t402, t379, t327, 0, 0, 0, 0, 0, 0, t325, t332, t316, t297; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t663, t664, 0, t622, 0, 0, 0, 0, 0, 0, -t603, t606, 0, -t771, 0, 0, 0, 0, 0, 0, t510, t511, t533, t434, 0, 0, 0, 0, 0, 0, t395, t403, t380, t328, 0, 0, 0, 0, 0, 0, t326, t333, t317, t298; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t672, t671, 0, 0, 0, 0, 0, 0, 0, t720, pkin(1) * t654 - t609, pkin(1) * t653 - t610, 0, -pkin(1) * t547, (t645 + t713) * t691, t644 * t695 + t646 * t691, t666 * t695 + t736, t737, t668 * t691 + t734, 0, pkin(1) * t565 + pkin(2) * t646 + pkin(7) * t614 - t739, pkin(1) * t566 - pkin(2) * t644 + pkin(7) * t616 + t740, pkin(1) * t602 + pkin(2) * t656 + pkin(7) * t650 + t517, pkin(1) * t491 - pkin(2) * t595 + pkin(7) * t517, t551 * t695 + t552 * t691, t502 * t695 + t504 * t691, t539 * t695 + t542 * t691, t549 * t695 + t550 * t691, t538 * t695 + t541 * t691, t571 * t695 + t572 * t691, pkin(1) * t441 - pkin(2) * t554 + pkin(7) * t463 + t443 * t695 + t479 * t691, pkin(1) * t451 - pkin(2) * t557 + pkin(7) * t490 + t446 * t695 + t480 * t691, pkin(1) * t421 - pkin(2) * t553 + pkin(7) * t440 + t389 * t695 + t392 * t691, pkin(1) * t357 - pkin(2) * t531 + pkin(7) * t366 - qJ(4) * t752 + t396 * t695, t412 * t695 + t414 * t691, t375 * t695 + t377 * t691, t425 * t695 + t427 * t691, t411 * t695 + t413 * t691, t426 * t695 + t428 * t691, t447 * t695 + t448 * t691, pkin(1) * t355 - pkin(2) * t473 + pkin(7) * t372 + t339 * t695 + t347 * t691, pkin(1) * t363 - pkin(2) * t763 + pkin(7) * t382 + t346 * t695 + t351 * t691, pkin(1) * t334 - pkin(2) * t499 + pkin(7) * t343 + t312 * t695 + t313 * t691, pkin(1) * t306 - pkin(2) * t464 + pkin(7) * t310 + t305 * t695 + t308 * t691; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t663, 0, t664, 0, t712, -t643, -t622, -pkin(5) * t622, 0, 0, -t603, 0, t606, 0, t776, -t775, t771, pkin(5) * t771 + pkin(6) * t744 + t544 * t697, t582 * t697 + t584 * t693, t559 * t697 + t560 * t693, t592 * t697 + t594 * t693, t581 * t697 + t583 * t693, t591 * t697 + t593 * t693, t619 * t697 + t620 * t693, -pkin(5) * t510 + t444 * t697 + t455 * t693, -pkin(5) * t511 + t445 * t697 + t456 * t693, -pkin(5) * t533 + t493 * t697 + t494 * t693, -pkin(5) * t434 + t398 * t697 + t419 * t693, t470 * t697 + t472 * t693, t431 * t697 + t432 * t693, t450 * t697 + t453 * t693, t469 * t697 + t471 * t693, t449 * t697 + t452 * t693, t506 * t697 + t507 * t693, -pkin(5) * t395 + t340 * t697 + t348 * t693, -pkin(5) * t403 + t349 * t697 + t354 * t693, -pkin(5) * t380 + t322 * t697 + t323 * t693, -pkin(5) * t328 + t311 * t697 + t314 * t693, t360 * t697 + t362 * t693, t336 * t697 + t337 * t693, t367 * t697 + t369 * t693, t359 * t697 + t361 * t693, t368 * t697 + t370 * t693, t399 * t697 + t400 * t693, -pkin(5) * t326 + t301 * t697 + t302 * t693, -pkin(5) * t333 + t303 * t697 + t304 * t693, -pkin(5) * t317 + t294 * t697 + t296 * t693, -pkin(5) * t298 + t292 * t697 + t293 * t693; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t664, 0, -t663, 0, t643, t712, t621, pkin(5) * t621, 0, 0, -t606, 0, -t603, 0, t775, t776, t495, pkin(5) * t495 - pkin(6) * t743 + t544 * t693, t582 * t693 - t584 * t697, t559 * t693 - t560 * t697, t592 * t693 - t594 * t697, t581 * t693 - t583 * t697, t591 * t693 - t593 * t697, t619 * t693 - t620 * t697, pkin(5) * t508 + t444 * t693 - t455 * t697, pkin(5) * t509 + t445 * t693 - t456 * t697, pkin(5) * t532 + t493 * t693 - t494 * t697, pkin(5) * t433 + t398 * t693 - t419 * t697, t470 * t693 - t472 * t697, t431 * t693 - t432 * t697, t450 * t693 - t453 * t697, t469 * t693 - t471 * t697, t449 * t693 - t452 * t697, t506 * t693 - t507 * t697, pkin(5) * t394 + t340 * t693 - t348 * t697, pkin(5) * t402 + t349 * t693 - t354 * t697, pkin(5) * t379 + t322 * t693 - t323 * t697, pkin(5) * t327 + t311 * t693 - t314 * t697, t360 * t693 - t362 * t697, t336 * t693 - t337 * t697, t367 * t693 - t369 * t697, t359 * t693 - t361 * t697, t368 * t693 - t370 * t697, t399 * t693 - t400 * t697, pkin(5) * t325 + t301 * t693 - t302 * t697, pkin(5) * t332 + t303 * t693 - t304 * t697, pkin(5) * t316 + t294 * t693 - t296 * t697, pkin(5) * t297 + t292 * t693 - t293 * t697;];
tauB_reg = t1;
