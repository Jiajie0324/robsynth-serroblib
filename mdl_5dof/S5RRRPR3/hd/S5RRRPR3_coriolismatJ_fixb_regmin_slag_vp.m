% Calculate minimal parameter regressor of coriolis matrix for
% S5RRRPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5,theta4]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x22]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:43
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RRRPR3_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR3_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR3_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRPR3_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:43:00
% EndTime: 2019-12-05 18:43:08
% DurationCPUTime: 3.14s
% Computational Cost: add. (3670->228), mult. (7334->290), div. (0->0), fcn. (7902->8), ass. (0->196)
t366 = qJD(3) + qJD(5);
t214 = sin(qJ(3));
t308 = -qJ(4) - pkin(7);
t193 = t308 * t214;
t217 = cos(qJ(3));
t194 = t308 * t217;
t211 = sin(pkin(9));
t212 = cos(pkin(9));
t141 = t211 * t193 - t212 * t194;
t181 = -t211 * t214 + t212 * t217;
t177 = t181 * pkin(8);
t112 = t177 + t141;
t213 = sin(qJ(5));
t216 = cos(qJ(5));
t182 = t211 * t217 + t212 * t214;
t178 = t182 * pkin(8);
t326 = t212 * t193 + t211 * t194;
t342 = t326 - t178;
t365 = t366 * (-t216 * t112 - t213 * t342);
t364 = t366 * (t213 * t112 - t216 * t342);
t215 = sin(qJ(2));
t310 = t215 * pkin(1);
t203 = pkin(7) + t310;
t269 = qJ(4) + t203;
t179 = t269 * t214;
t180 = t269 * t217;
t328 = -t212 * t179 - t211 * t180;
t341 = t328 - t178;
t126 = -t211 * t179 + t212 * t180;
t88 = t177 + t126;
t363 = t366 * (-t213 * t341 - t216 * t88);
t362 = t366 * (t213 * t88 - t216 * t341);
t260 = qJD(1) + qJD(2);
t132 = -t216 * t181 + t213 * t182;
t174 = t216 * t182;
t280 = t213 * t181;
t327 = t174 + t280;
t339 = t132 ^ 2 - t327 ^ 2;
t345 = t260 * t339;
t218 = cos(qJ(2));
t309 = t218 * pkin(1);
t155 = t181 * t309;
t314 = -t213 / 0.2e1;
t154 = t182 * t309;
t317 = -t154 / 0.2e1;
t225 = t155 * t314 + t216 * t317;
t205 = -t217 * pkin(3) - pkin(2);
t153 = -t181 * pkin(4) + t205;
t148 = t153 - t309;
t243 = t153 / 0.2e1 + t148 / 0.2e1;
t334 = t327 * t243;
t25 = t225 - t334;
t344 = t260 * t132;
t331 = t260 * t327;
t264 = t132 * qJD(5);
t343 = -t132 * qJD(3) - t264;
t340 = t132 * qJD(4);
t224 = -t216 * t155 / 0.2e1 - t154 * t314;
t26 = t132 * t243 + t224;
t248 = t174 / 0.2e1;
t84 = 0.2e1 * t248 + t280;
t335 = t260 * t84;
t315 = t211 / 0.2e1;
t226 = t181 * t315 - t212 * t182 / 0.2e1;
t313 = -t214 / 0.2e1;
t102 = (t313 + t226) * pkin(3);
t333 = t260 * t102;
t130 = t248 - t174 / 0.2e1;
t332 = t260 * t130;
t137 = t181 ^ 2 + t182 ^ 2;
t330 = t260 * t137;
t199 = -t214 ^ 2 + t217 ^ 2;
t329 = t260 * t199;
t204 = -pkin(2) - t309;
t255 = -t309 / 0.2e1;
t325 = t255 + t204 / 0.2e1;
t324 = t126 / 0.2e1;
t323 = -t126 / 0.2e1;
t321 = t141 / 0.2e1;
t320 = -t141 / 0.2e1;
t312 = pkin(3) * t211;
t311 = t214 * pkin(3);
t307 = pkin(1) * qJD(1);
t306 = pkin(1) * qJD(2);
t305 = pkin(2) * qJD(2);
t304 = qJD(3) * pkin(3);
t136 = t137 * qJD(4);
t50 = t154 * t182 + t155 * t181;
t295 = t50 * qJD(2) + t136;
t294 = t328 * t182;
t293 = t126 * t181;
t292 = t326 * t182;
t291 = t141 * t181;
t290 = t148 * t327;
t289 = t148 * t132;
t288 = t153 * t327;
t287 = t153 * t132;
t192 = t205 - t309;
t30 = t192 * t311;
t275 = t30 * qJD(1);
t35 = t126 * t155 - t154 * t328 + t192 * t310;
t274 = t35 * qJD(1);
t156 = t182 * pkin(4) + t311;
t73 = t156 * t132;
t37 = t73 + t290;
t273 = t37 * qJD(1);
t74 = t156 * t327;
t38 = t74 - t289;
t272 = t38 * qJD(1);
t42 = t293 - t294;
t271 = t42 * qJD(1);
t270 = t50 * qJD(1);
t268 = qJD(1) * t148;
t267 = qJD(1) * t204;
t266 = qJD(2) * t153;
t265 = t130 * qJD(5);
t262 = t327 * qJD(5);
t261 = t214 * qJD(3);
t210 = t217 * qJD(3);
t259 = t215 * t306;
t258 = t215 * t307;
t257 = t311 / 0.2e1;
t256 = t310 / 0.2e1;
t252 = t132 * t268;
t251 = t327 * t268;
t250 = t214 * t267;
t249 = t217 * t267;
t244 = t320 + t323;
t242 = pkin(1) * t260;
t240 = t132 * t258;
t239 = t327 * t258;
t238 = t214 * t258;
t237 = t215 * t242;
t2 = (t321 + t324 + t244) * t182;
t236 = t2 * qJD(2);
t235 = t2 * qJD(1);
t219 = (t320 + t321) * t328 + (t323 + t324) * t326;
t227 = t155 * t315 + t212 * t317;
t3 = ((-t205 / 0.2e1 - t192 / 0.2e1) * t214 + t227) * pkin(3) + t219;
t36 = t205 * t311;
t234 = -t3 * qJD(1) + t36 * qJD(2);
t12 = -t73 + t25;
t39 = t73 + t288;
t233 = -t12 * qJD(1) + t39 * qJD(2);
t13 = t26 - t74;
t40 = t74 - t287;
t232 = -t13 * qJD(1) + t40 * qJD(2);
t19 = t181 * t244 + t182 * (t326 / 0.2e1 + t328 / 0.2e1) + t256;
t48 = t291 - t292;
t231 = t19 * qJD(1) - t48 * qJD(2);
t45 = qJD(3) * t327 + t84 * qJD(5);
t230 = t255 + pkin(2) / 0.2e1 - t204 / 0.2e1;
t149 = t230 * t214;
t229 = t149 * qJD(1) + t214 * t305;
t150 = t230 * t217;
t228 = t150 * qJD(1) + t217 * t305;
t223 = -t26 * qJD(1) - t132 * t266;
t222 = -t25 * qJD(1) + t266 * t327;
t202 = t212 * pkin(3) + pkin(4);
t171 = -t216 * t202 + t213 * t312;
t221 = t171 * qJD(3);
t172 = t213 * t202 + t216 * t312;
t220 = t172 * qJD(3);
t200 = t214 * t210;
t198 = t214 * t259;
t195 = t199 * qJD(3);
t176 = t260 * t217 * t214;
t160 = t172 * qJD(5);
t159 = t171 * qJD(5);
t152 = (-pkin(2) / 0.2e1 + t325) * t217;
t151 = pkin(2) * t313 + t325 * t214;
t127 = t327 * qJD(4);
t121 = t130 * qJD(3);
t120 = t130 * qJD(4);
t115 = (-t181 * t212 - t182 * t211) * t304;
t114 = t327 * t259;
t113 = t132 * t259;
t101 = pkin(3) * t226 + t257;
t100 = t102 * qJD(3);
t99 = t102 * qJD(4);
t98 = t101 * qJD(3);
t97 = t101 * qJD(4);
t76 = t84 * qJD(4);
t44 = -t84 * qJD(3) - t262;
t33 = t327 * t344;
t32 = t343 * t327;
t31 = t132 * t331;
t28 = t225 + t334;
t27 = t224 - (t148 + t153) * t132 / 0.2e1;
t20 = t291 / 0.2e1 + t293 / 0.2e1 - t292 / 0.2e1 - t294 / 0.2e1 + t256;
t15 = t74 - t287 / 0.2e1 - t289 / 0.2e1 + t224;
t14 = t73 + t288 / 0.2e1 + t290 / 0.2e1 + t225;
t7 = t366 * t339;
t4 = pkin(3) * t227 - t219 + (t192 + t205) * t257;
t1 = t2 * qJD(3);
t5 = [0, 0, 0, 0, -t259, -t218 * t306, t200, t195, 0, 0, 0, t204 * t261 - t217 * t259, t204 * t210 + t198, t295, t35 * qJD(2) + t30 * qJD(3) + t42 * qJD(4), t32, t7, 0, 0, 0, t37 * qJD(3) + t148 * t262 + t113, t38 * qJD(3) - t148 * t264 + t114; 0, 0, 0, 0, -t237, -t218 * t242, t200, t195, 0, 0, 0, t151 * qJD(3) - t217 * t237, t152 * qJD(3) + t198 + t238, t1 + t270 + t295, t274 + (t155 * t141 - t154 * t326 + t205 * t310) * qJD(2) + t4 * qJD(3) + t20 * qJD(4), t32, t7, 0, 0, 0, t14 * qJD(3) + t28 * qJD(5) + t113 + t240, t15 * qJD(3) + t27 * qJD(5) + t114 + t239; 0, 0, 0, 0, 0, 0, t176, t329, t210, -t261, 0, t151 * qJD(2) - t203 * t210 + t250, t152 * qJD(2) + t203 * t261 + t249, t115 + t236, t275 + t4 * qJD(2) + t97 + (-t126 * t212 + t211 * t328) * t304, -t33, t345, t343, -t45, 0, t14 * qJD(2) + t273 + t363, t15 * qJD(2) + t272 + t362; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t330, t20 * qJD(2) + t271 + t98, 0, 0, 0, 0, 0, t265, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, t345, t343, t44, 0, t28 * qJD(2) + t120 + t251 + t363, t27 * qJD(2) - t252 + t362; 0, 0, 0, 0, t258, t218 * t307, t200, t195, 0, 0, 0, -t149 * qJD(3) + t217 * t258, -t150 * qJD(3) - t238, t1 + t136 - t270, -t3 * qJD(3) - t19 * qJD(4) - t274, t32, t7, 0, 0, 0, -t12 * qJD(3) - t25 * qJD(5) - t240, -t13 * qJD(3) - t26 * qJD(5) - t239; 0, 0, 0, 0, 0, 0, t200, t195, 0, 0, 0, -pkin(2) * t261, -pkin(2) * t210, t136, t36 * qJD(3) + t48 * qJD(4), t32, t7, 0, 0, 0, t39 * qJD(3) + t153 * t262, t40 * qJD(3) - t153 * t264; 0, 0, 0, 0, 0, 0, t176, t329, t210, -t261, 0, -pkin(7) * t210 - t229, pkin(7) * t261 - t228, t115 + t235, t97 + (-t141 * t212 + t211 * t326) * t304 + t234, -t33, t345, t343, -t45, 0, t233 + t365, t232 + t364; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t330, -t231 + t98, 0, 0, 0, 0, 0, t265, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, t345, t343, t44, 0, t120 + t222 + t365, t223 + t364; 0, 0, 0, 0, 0, 0, -t176, -t329, 0, 0, 0, t149 * qJD(2) - t250, t150 * qJD(2) - t249, -t236, t3 * qJD(2) - t275 + t99, t33, -t345, 0, -t265, 0, t12 * qJD(2) - t127 - t273, t13 * qJD(2) - t272 + t340; 0, 0, 0, 0, 0, 0, -t176, -t329, 0, 0, 0, t229, t228, -t235, -t234 + t99, t33, -t345, 0, -t265, 0, -t127 - t233, -t232 + t340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t160, t159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t333, 0, 0, 0, 0, 0, -t331, t344; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t332, 0, -t160 - t220, t159 + t221; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t330, t19 * qJD(2) - t100 - t271, 0, 0, 0, 0, 0, t45, t343; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t330, -t100 + t231, 0, 0, 0, 0, 0, t45, t343; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t333, 0, 0, 0, 0, 0, t331, -t344; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t335, -t344; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, -t345, 0, t121, 0, t25 * qJD(2) - t251 - t76, t26 * qJD(2) + t252 + t340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, -t345, 0, t121, 0, -t222 - t76, -t223 + t340; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t332, 0, t220, -t221; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t335, t344; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t5;
