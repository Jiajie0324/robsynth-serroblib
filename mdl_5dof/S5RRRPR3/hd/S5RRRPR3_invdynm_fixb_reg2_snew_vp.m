% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRRPR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 12:10
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRRPR3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR3_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR3_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR3_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRPR3_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 12:09:54
% EndTime: 2020-01-03 12:10:10
% DurationCPUTime: 16.71s
% Computational Cost: add. (150491->650), mult. (203831->927), div. (0->0), fcn. (136613->10), ass. (0->455)
t1227 = cos(qJ(2));
t1215 = qJDD(1) + qJDD(2);
t1223 = sin(qJ(2));
t1278 = t1223 * t1215;
t1217 = qJD(1) + qJD(2);
t1314 = t1217 ^ 2;
t1181 = t1227 * t1314 + t1278;
t1162 = pkin(6) * t1181 - t1227 * g(1);
t1224 = sin(qJ(1));
t1228 = cos(qJ(1));
t1273 = t1227 * t1215;
t1184 = t1223 * t1314 - t1273;
t1238 = t1224 * t1181 + t1228 * t1184;
t1321 = pkin(6) * t1184 - t1223 * g(1);
t1334 = pkin(5) * t1238 + t1224 * t1162 + t1228 * t1321;
t1129 = t1228 * t1181 - t1224 * t1184;
t1333 = -pkin(5) * t1129 - t1228 * t1162 + t1224 * t1321;
t1229 = qJD(3) ^ 2;
t1219 = sin(pkin(9));
t1220 = cos(pkin(9));
t1226 = cos(qJ(3));
t1289 = t1217 * t1226;
t1222 = sin(qJ(3));
t1290 = t1217 * t1222;
t1164 = t1219 * t1290 - t1220 * t1289;
t1315 = t1164 ^ 2;
t1108 = -t1229 - t1315;
t1165 = (t1219 * t1226 + t1220 * t1222) * t1217;
t1122 = t1165 * t1164;
t1316 = qJDD(3) - t1122;
t1324 = t1220 * t1316;
t1039 = t1219 * t1108 + t1324;
t1203 = qJD(3) * t1289;
t1279 = t1222 * t1215;
t1175 = t1203 + t1279;
t1200 = t1224 * g(2) - t1228 * g(3);
t1230 = qJD(1) ^ 2;
t1188 = -t1230 * pkin(1) - t1200;
t1201 = t1228 * g(2) + t1224 * g(3);
t1232 = qJDD(1) * pkin(1) - t1201;
t1132 = t1227 * t1188 + t1223 * t1232;
t1120 = -t1314 * pkin(2) + t1215 * pkin(7) + t1132;
t1282 = t1222 * t1120;
t1044 = qJDD(3) * pkin(3) - t1175 * qJ(4) - t1282 + (-g(1) + (pkin(3) * t1290 + qJ(4) * qJD(3)) * t1217) * t1226;
t1093 = -t1222 * g(1) + t1226 * t1120;
t1189 = qJD(3) * pkin(3) - qJ(4) * t1290;
t1313 = t1226 ^ 2;
t1205 = t1313 * t1314;
t1264 = qJD(3) * t1290;
t1274 = t1226 * t1215;
t1235 = -t1264 + t1274;
t1045 = -pkin(3) * t1205 + qJ(4) * t1235 - qJD(3) * t1189 + t1093;
t1239 = -0.2e1 * qJD(4) * t1165 + t1220 * t1044 - t1219 * t1045;
t1332 = pkin(3) * t1039 + t1239;
t1131 = t1223 * t1188 - t1227 * t1232;
t1251 = t1223 * t1131 + t1227 * t1132;
t1062 = t1227 * t1131 - t1223 * t1132;
t1272 = t1228 * t1062;
t1331 = t1224 * t1251 - t1272;
t1277 = t1224 * t1062;
t1330 = t1228 * t1251 + t1277;
t1325 = t1219 * t1316;
t1221 = sin(qJ(5));
t1225 = cos(qJ(5));
t1098 = t1225 * t1164 + t1221 * t1165;
t1100 = -t1221 * t1164 + t1225 * t1165;
t1038 = t1100 * t1098;
t1214 = qJDD(3) + qJDD(5);
t1318 = -t1038 + t1214;
t1323 = t1221 * t1318;
t1322 = t1225 * t1318;
t1092 = t1226 * g(1) + t1282;
t1032 = t1222 * t1092 + t1226 * t1093;
t1123 = t1220 * t1175 + t1219 * t1235;
t1250 = t1219 * t1175 - t1220 * t1235;
t1018 = -t1098 * qJD(5) + t1225 * t1123 - t1221 * t1250;
t1216 = qJD(3) + qJD(5);
t1089 = t1216 * t1098;
t1317 = -t1089 + t1018;
t1157 = qJD(3) * t1164;
t1076 = t1157 + t1123;
t1252 = t1221 * t1123 + t1225 * t1250;
t982 = (qJD(5) - t1216) * t1100 + t1252;
t1094 = t1098 ^ 2;
t1095 = t1100 ^ 2;
t1163 = t1165 ^ 2;
t1213 = t1216 ^ 2;
t1299 = qJD(4) * t1164;
t1154 = -0.2e1 * t1299;
t1270 = t1219 * t1044 + t1220 * t1045;
t961 = t1154 + t1270;
t905 = t1219 * t961 + t1220 * t1239;
t1312 = pkin(3) * t905;
t1301 = qJD(3) * t1165;
t1074 = -t1250 + t1301;
t1020 = t1219 * t1074 - t1220 * t1076;
t1311 = pkin(3) * t1020;
t933 = pkin(4) * t1316 - t1076 * pkin(8) + t1239;
t1149 = qJD(3) * pkin(4) - t1165 * pkin(8);
t935 = -t1315 * pkin(4) - t1250 * pkin(8) - qJD(3) * t1149 + t961;
t888 = t1221 * t935 - t1225 * t933;
t889 = t1221 * t933 + t1225 * t935;
t845 = t1221 * t889 - t1225 * t888;
t1307 = t1219 * t845;
t1306 = t1220 * t845;
t1119 = -t1215 * pkin(2) - t1314 * pkin(7) + t1131;
t1047 = -t1235 * pkin(3) - qJ(4) * t1205 + t1189 * t1290 + qJDD(4) + t1119;
t969 = t1250 * pkin(4) - t1315 * pkin(8) + t1165 * t1149 + t1047;
t1305 = t1221 * t969;
t1304 = t1222 * t905;
t1303 = t1225 * t969;
t1302 = t1226 * t905;
t1300 = qJD(3) * t1217;
t1297 = t1164 * t1219;
t1296 = t1164 * t1220;
t1295 = t1165 * t1219;
t1294 = t1165 * t1220;
t1293 = t1216 * t1100;
t1292 = t1216 * t1221;
t1291 = t1216 * t1225;
t1218 = t1222 ^ 2;
t1288 = t1218 * t1314;
t1287 = t1219 * t1047;
t1111 = qJDD(3) + t1122;
t1286 = t1219 * t1111;
t1285 = t1220 * t1047;
t1284 = t1220 * t1111;
t1035 = t1038 + t1214;
t1283 = t1221 * t1035;
t1101 = t1222 * t1119;
t1199 = t1226 * t1314 * t1222;
t1190 = qJDD(3) + t1199;
t1281 = t1222 * t1190;
t1191 = qJDD(3) - t1199;
t1280 = t1222 * t1191;
t1276 = t1225 * t1035;
t1102 = t1226 * t1119;
t1176 = -0.2e1 * t1264 + t1274;
t1133 = t1226 * t1176;
t1275 = t1226 * t1191;
t1269 = -pkin(2) * t1119 + pkin(7) * t1032;
t1268 = t1227 * qJDD(3);
t1267 = t1218 + t1313;
t846 = t1221 * t888 + t1225 * t889;
t811 = t1219 * t846 + t1306;
t844 = pkin(4) * t845;
t1266 = pkin(3) * t811 + t844;
t986 = t1089 + t1018;
t917 = -t1221 * t982 - t1225 * t986;
t919 = t1221 * t986 - t1225 * t982;
t875 = t1219 * t919 + t1220 * t917;
t915 = pkin(4) * t917;
t1265 = pkin(3) * t875 + t915;
t1263 = t1223 * t1038;
t1262 = t1223 * t1122;
t1261 = t1227 * t1038;
t1260 = t1227 * t1122;
t1196 = -t1229 - t1288;
t1144 = -t1222 * t1196 - t1275;
t1174 = 0.2e1 * t1203 + t1279;
t1259 = -pkin(2) * t1174 + pkin(7) * t1144 + t1101;
t1198 = -t1205 - t1229;
t1142 = t1226 * t1198 - t1281;
t1258 = pkin(2) * t1176 + pkin(7) * t1142 - t1102;
t1192 = -t1224 * qJDD(1) - t1228 * t1230;
t1257 = pkin(5) * t1192 + t1228 * g(1);
t906 = -t1219 * t1239 + t1220 * t961;
t812 = t1220 * t846 - t1307;
t834 = -pkin(4) * t969 + pkin(8) * t846;
t791 = -pkin(3) * t969 - pkin(8) * t1307 + qJ(4) * t812 + t1220 * t834;
t795 = -pkin(8) * t1306 - qJ(4) * t811 - t1219 * t834;
t799 = -t1222 * t811 + t1226 * t812;
t1256 = -pkin(2) * t969 + pkin(7) * t799 + t1222 * t795 + t1226 * t791;
t1033 = -t1213 - t1094;
t964 = t1225 * t1033 - t1323;
t981 = (qJD(5) + t1216) * t1100 + t1252;
t891 = -pkin(4) * t981 + pkin(8) * t964 - t1303;
t963 = t1221 * t1033 + t1322;
t908 = -t1219 * t963 + t1220 * t964;
t909 = -pkin(8) * t963 + t1305;
t826 = -pkin(3) * t981 + qJ(4) * t908 + t1219 * t909 + t1220 * t891;
t907 = t1219 * t964 + t1220 * t963;
t838 = -qJ(4) * t907 - t1219 * t891 + t1220 * t909;
t869 = -t1222 * t907 + t1226 * t908;
t1255 = -pkin(2) * t981 + pkin(7) * t869 + t1222 * t838 + t1226 * t826;
t1079 = -t1095 - t1213;
t993 = -t1221 * t1079 - t1276;
t895 = -pkin(4) * t1317 + pkin(8) * t993 + t1305;
t992 = t1225 * t1079 - t1283;
t921 = -pkin(8) * t992 + t1303;
t925 = -t1219 * t992 + t1220 * t993;
t836 = -pkin(3) * t1317 + qJ(4) * t925 + t1219 * t921 + t1220 * t895;
t924 = t1219 * t993 + t1220 * t992;
t843 = -qJ(4) * t924 - t1219 * t895 + t1220 * t921;
t880 = -t1222 * t924 + t1226 * t925;
t1254 = -pkin(2) * t1317 + pkin(7) * t880 + t1222 * t843 + t1226 * t836;
t1249 = -t1224 * t1200 - t1228 * t1201;
t1016 = -t1094 - t1095;
t819 = -pkin(4) * t1016 + pkin(8) * t919 + t846;
t824 = -pkin(8) * t917 - t845;
t877 = -t1219 * t917 + t1220 * t919;
t803 = -pkin(3) * t1016 + qJ(4) * t877 + t1219 * t824 + t1220 * t819;
t805 = -qJ(4) * t875 - t1219 * t819 + t1220 * t824;
t832 = -t1222 * t875 + t1226 * t877;
t1248 = -pkin(2) * t1016 + pkin(7) * t832 + t1222 * t805 + t1226 * t803;
t1071 = -t1163 - t1315;
t1022 = t1220 * t1074 + t1219 * t1076;
t890 = -pkin(3) * t1071 + qJ(4) * t1022 + t906;
t894 = -qJ(4) * t1020 - t905;
t940 = -t1222 * t1020 + t1226 * t1022;
t1247 = -pkin(2) * t1071 + pkin(7) * t940 + t1222 * t894 + t1226 * t890;
t1072 = t1250 + t1301;
t1040 = t1220 * t1108 - t1325;
t944 = -pkin(3) * t1072 + qJ(4) * t1040 - t1285;
t968 = -t1222 * t1039 + t1226 * t1040;
t987 = -qJ(4) * t1039 + t1287;
t1246 = -pkin(2) * t1072 + pkin(7) * t968 + t1222 * t987 + t1226 * t944;
t1152 = -t1163 - t1229;
t1054 = t1220 * t1152 - t1286;
t1057 = -t1219 * t1152 - t1284;
t1004 = -t1222 * t1054 + t1226 * t1057;
t1075 = -t1157 + t1123;
t948 = -pkin(3) * t1075 + qJ(4) * t1057 + t1287;
t990 = -qJ(4) * t1054 + t1285;
t1245 = -pkin(2) * t1075 + pkin(7) * t1004 + t1222 * t990 + t1226 * t948;
t1244 = t1223 * t1199;
t1243 = t1227 * t1199;
t1179 = t1267 * t1215;
t1185 = t1205 + t1288;
t1242 = pkin(2) * t1185 + pkin(7) * t1179 + t1032;
t1241 = pkin(3) * t1054 - t1270;
t1240 = pkin(4) * t963 - t888;
t1031 = t1226 * t1092 - t1222 * t1093;
t1237 = t1228 * t1200 - t1224 * t1201;
t1236 = pkin(4) * t992 - t889;
t861 = t1226 * t906 - t1304;
t897 = -pkin(3) * t1047 + qJ(4) * t906;
t1234 = -pkin(2) * t1047 + pkin(7) * t861 - qJ(4) * t1304 + t1226 * t897;
t1233 = pkin(3) * t907 + t1240;
t1231 = pkin(3) * t924 + t1236;
t1208 = t1223 * qJDD(3);
t1197 = t1205 - t1229;
t1195 = t1229 - t1288;
t1193 = t1228 * qJDD(1) - t1224 * t1230;
t1186 = -t1205 + t1288;
t1180 = t1226 * t1190;
t1172 = pkin(5) * t1193 + t1224 * g(1);
t1171 = t1267 * t1300;
t1151 = -t1163 + t1229;
t1150 = -t1229 + t1315;
t1148 = t1227 * t1171 + t1208;
t1147 = t1223 * t1171 - t1268;
t1146 = t1226 * t1175 - t1218 * t1300;
t1145 = -t1222 * t1235 - t1313 * t1300;
t1143 = -t1222 * t1195 + t1180;
t1141 = t1226 * t1197 - t1280;
t1140 = t1226 * t1196 - t1280;
t1139 = t1226 * t1195 + t1281;
t1138 = t1222 * t1198 + t1180;
t1137 = t1222 * t1197 + t1275;
t1134 = (t1175 + t1203) * t1222;
t1128 = t1227 * t1179 - t1223 * t1185;
t1126 = t1223 * t1179 + t1227 * t1185;
t1125 = -t1222 * t1174 + t1133;
t1124 = t1226 * t1174 + t1222 * t1176;
t1118 = t1227 * t1143 + t1222 * t1278;
t1117 = t1227 * t1141 + t1223 * t1274;
t1116 = t1223 * t1143 - t1222 * t1273;
t1115 = t1223 * t1141 - t1226 * t1273;
t1114 = t1163 - t1315;
t1107 = t1227 * t1146 - t1244;
t1106 = t1227 * t1145 + t1244;
t1105 = t1223 * t1146 + t1243;
t1104 = t1223 * t1145 - t1243;
t1097 = -pkin(1) * t1181 - t1132;
t1096 = -pkin(1) * t1184 - t1131;
t1091 = (t1295 - t1296) * qJD(3);
t1090 = (-t1294 - t1297) * qJD(3);
t1087 = t1227 * t1144 + t1223 * t1174;
t1086 = t1227 * t1142 - t1223 * t1176;
t1085 = t1223 * t1144 - t1227 * t1174;
t1084 = t1223 * t1142 + t1227 * t1176;
t1083 = -t1095 + t1213;
t1082 = t1094 - t1213;
t1078 = t1227 * t1125 + t1223 * t1186;
t1077 = t1223 * t1125 - t1227 * t1186;
t1067 = -qJD(3) * t1295 + t1220 * t1123;
t1066 = qJD(3) * t1294 + t1219 * t1123;
t1065 = qJD(3) * t1296 + t1219 * t1250;
t1064 = qJD(3) * t1297 - t1220 * t1250;
t1059 = pkin(1) * t1062;
t1058 = pkin(1) * g(1) + pkin(6) * t1251;
t1056 = -t1219 * t1151 + t1324;
t1055 = t1220 * t1150 - t1286;
t1053 = t1220 * t1151 + t1325;
t1052 = t1219 * t1150 + t1284;
t1051 = -pkin(7) * t1140 + t1102;
t1050 = -pkin(7) * t1138 + t1101;
t1049 = -pkin(2) * t1140 + t1093;
t1048 = -pkin(2) * t1138 + t1092;
t1037 = t1095 - t1094;
t1028 = -t1222 * t1090 + t1226 * t1091;
t1027 = t1226 * t1090 + t1222 * t1091;
t1026 = (-t1098 * t1225 + t1100 * t1221) * t1216;
t1025 = (-t1098 * t1221 - t1100 * t1225) * t1216;
t1024 = t1227 * t1028 + t1208;
t1023 = t1223 * t1028 - t1268;
t1021 = -t1220 * t1072 - t1219 * t1075;
t1019 = -t1219 * t1072 + t1220 * t1075;
t1017 = -t1100 * qJD(5) - t1252;
t1015 = -t1222 * t1066 + t1226 * t1067;
t1014 = -t1222 * t1064 + t1226 * t1065;
t1013 = t1226 * t1066 + t1222 * t1067;
t1012 = t1226 * t1064 + t1222 * t1065;
t1010 = pkin(1) * t1084 + t1258;
t1009 = pkin(1) * t1085 + t1259;
t1008 = -pkin(6) * t1126 + t1227 * t1031;
t1007 = pkin(6) * t1128 + t1223 * t1031;
t1006 = t1227 * t1032 + t1223 * t1119;
t1005 = t1223 * t1032 - t1227 * t1119;
t1003 = -t1222 * t1053 + t1226 * t1056;
t1002 = -t1222 * t1052 + t1226 * t1055;
t1001 = t1226 * t1054 + t1222 * t1057;
t1000 = t1226 * t1053 + t1222 * t1056;
t999 = t1226 * t1052 + t1222 * t1055;
t997 = t1225 * t1082 - t1283;
t996 = -t1221 * t1083 + t1322;
t995 = t1221 * t1082 + t1276;
t994 = t1225 * t1083 + t1323;
t988 = pkin(1) * t1126 + t1242;
t977 = t1227 * t1015 + t1262;
t976 = t1227 * t1014 - t1262;
t975 = t1223 * t1015 - t1260;
t974 = t1223 * t1014 + t1260;
t973 = t1225 * t1018 - t1100 * t1292;
t972 = t1221 * t1018 + t1100 * t1291;
t971 = -t1221 * t1017 + t1098 * t1291;
t970 = t1225 * t1017 + t1098 * t1292;
t967 = t1226 * t1039 + t1222 * t1040;
t958 = -pkin(6) * t1085 - t1223 * t1049 + t1227 * t1051;
t957 = -pkin(6) * t1084 - t1223 * t1048 + t1227 * t1050;
t956 = t1227 * t1004 + t1223 * t1075;
t955 = t1227 * t1003 + t1223 * t1076;
t954 = t1227 * t1002 + t1074 * t1223;
t953 = t1223 * t1004 - t1227 * t1075;
t952 = t1223 * t1003 - t1227 * t1076;
t951 = t1223 * t1002 - t1074 * t1227;
t950 = -t1219 * t1025 + t1220 * t1026;
t949 = t1220 * t1025 + t1219 * t1026;
t946 = -pkin(1) * t1140 + pkin(6) * t1087 + t1227 * t1049 + t1223 * t1051;
t945 = -pkin(1) * t1138 + pkin(6) * t1086 + t1227 * t1048 + t1223 * t1050;
t942 = t1223 * t1072 + t1227 * t968;
t941 = -t1227 * t1072 + t1223 * t968;
t939 = -t1222 * t1019 + t1226 * t1021;
t938 = t1226 * t1020 + t1222 * t1022;
t937 = t1226 * t1019 + t1222 * t1021;
t934 = pkin(1) * t1005 + t1269;
t932 = t1223 * t1114 + t1227 * t939;
t931 = -t1227 * t1114 + t1223 * t939;
t929 = -t1219 * t995 + t1220 * t997;
t928 = -t1219 * t994 + t1220 * t996;
t927 = t1219 * t997 + t1220 * t995;
t926 = t1219 * t996 + t1220 * t994;
t923 = t1223 * t1071 + t1227 * t940;
t922 = -t1227 * t1071 + t1223 * t940;
t920 = -pkin(6) * t1005 - (pkin(2) * t1223 - pkin(7) * t1227) * t1031;
t918 = -t1221 * t1317 - t1225 * t981;
t916 = -t1221 * t981 + t1225 * t1317;
t914 = -t1219 * t972 + t1220 * t973;
t913 = -t1219 * t970 + t1220 * t971;
t912 = t1219 * t973 + t1220 * t972;
t911 = t1219 * t971 + t1220 * t970;
t910 = -pkin(2) * t938 - t1311;
t904 = -pkin(2) * t1001 + t1154 - t1241;
t903 = -t1222 * t949 + t1226 * t950;
t902 = t1222 * t950 + t1226 * t949;
t901 = t1223 * t1214 + t1227 * t903;
t900 = -t1227 * t1214 + t1223 * t903;
t899 = pkin(6) * t1006 - (-pkin(2) * t1227 - pkin(7) * t1223 - pkin(1)) * t1031;
t898 = -pkin(2) * t967 - t1332;
t892 = -pkin(7) * t1001 - t1222 * t948 + t1226 * t990;
t885 = -pkin(7) * t967 - t1222 * t944 + t1226 * t987;
t884 = -t1222 * t927 + t1226 * t929;
t883 = -t1222 * t926 + t1226 * t928;
t882 = t1222 * t929 + t1226 * t927;
t881 = t1222 * t928 + t1226 * t926;
t879 = t1222 * t925 + t1226 * t924;
t876 = -t1219 * t916 + t1220 * t918;
t874 = t1219 * t918 + t1220 * t916;
t873 = -t1222 * t912 + t1226 * t914;
t872 = -t1222 * t911 + t1226 * t913;
t871 = t1222 * t914 + t1226 * t912;
t870 = t1222 * t913 + t1226 * t911;
t868 = t1222 * t908 + t1226 * t907;
t866 = pkin(1) * t953 + t1245;
t865 = -t1223 * t982 + t1227 * t884;
t864 = t1223 * t986 + t1227 * t883;
t863 = t1223 * t884 + t1227 * t982;
t862 = t1223 * t883 - t1227 * t986;
t860 = t1222 * t906 + t1302;
t858 = t1223 * t1317 + t1227 * t880;
t857 = t1223 * t880 - t1227 * t1317;
t856 = t1227 * t873 + t1263;
t855 = t1227 * t872 - t1263;
t854 = t1223 * t873 - t1261;
t853 = t1223 * t872 + t1261;
t852 = t1223 * t1047 + t1227 * t861;
t851 = -t1227 * t1047 + t1223 * t861;
t850 = pkin(1) * t941 + t1246;
t849 = t1223 * t981 + t1227 * t869;
t848 = t1223 * t869 - t1227 * t981;
t847 = -pkin(6) * t953 - t1223 * t904 + t1227 * t892;
t841 = -pkin(2) * t860 - t1312;
t840 = -pkin(1) * t1001 + pkin(6) * t956 + t1223 * t892 + t1227 * t904;
t839 = -pkin(6) * t941 - t1223 * t898 + t1227 * t885;
t833 = -pkin(7) * t938 - t1222 * t890 + t1226 * t894;
t831 = -t1222 * t874 + t1226 * t876;
t830 = t1222 * t877 + t1226 * t875;
t829 = t1222 * t876 + t1226 * t874;
t827 = -pkin(1) * t967 + pkin(6) * t942 + t1223 * t885 + t1227 * t898;
t823 = t1223 * t1037 + t1227 * t831;
t822 = -t1227 * t1037 + t1223 * t831;
t821 = t1223 * t1016 + t1227 * t832;
t820 = -t1227 * t1016 + t1223 * t832;
t818 = -pkin(2) * t879 - t1231;
t817 = -pkin(7) * t860 - qJ(4) * t1302 - t1222 * t897;
t816 = pkin(1) * t922 + t1247;
t815 = -pkin(2) * t868 - t1233;
t814 = -pkin(6) * t922 - t1223 * t910 + t1227 * t833;
t813 = -pkin(1) * t938 + pkin(6) * t923 + t1223 * t833 + t1227 * t910;
t810 = -pkin(2) * t830 - t1265;
t809 = pkin(1) * t851 + t1234;
t808 = -pkin(7) * t879 - t1222 * t836 + t1226 * t843;
t807 = -pkin(7) * t868 - t1222 * t826 + t1226 * t838;
t806 = -pkin(6) * t851 - t1223 * t841 + t1227 * t817;
t801 = pkin(1) * t857 + t1254;
t800 = -pkin(1) * t860 + pkin(6) * t852 + t1223 * t817 + t1227 * t841;
t798 = t1222 * t812 + t1226 * t811;
t796 = pkin(1) * t848 + t1255;
t793 = t1223 * t969 + t1227 * t799;
t792 = t1223 * t799 - t1227 * t969;
t789 = -pkin(6) * t857 - t1223 * t818 + t1227 * t808;
t788 = -pkin(1) * t879 + pkin(6) * t858 + t1223 * t808 + t1227 * t818;
t787 = -pkin(6) * t848 - t1223 * t815 + t1227 * t807;
t786 = -pkin(1) * t868 + pkin(6) * t849 + t1223 * t807 + t1227 * t815;
t785 = -pkin(2) * t798 - t1266;
t784 = -pkin(7) * t830 - t1222 * t803 + t1226 * t805;
t783 = pkin(1) * t820 + t1248;
t782 = -pkin(6) * t820 - t1223 * t810 + t1227 * t784;
t781 = -pkin(7) * t798 - t1222 * t791 + t1226 * t795;
t780 = -pkin(1) * t830 + pkin(6) * t821 + t1223 * t784 + t1227 * t810;
t779 = pkin(1) * t792 + t1256;
t778 = -pkin(6) * t792 - t1223 * t785 + t1227 * t781;
t777 = -pkin(1) * t798 + pkin(6) * t793 + t1223 * t781 + t1227 * t785;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t1201, t1200, 0, 0, 0, 0, 0, 0, 0, t1215, t1096, t1097, 0, -t1059, t1134, t1124, t1139, t1133, t1137, 0, t1010, t1009, t988, t934, t1013, t937, t1000, t1012, t999, t1027, t850, t866, t816, t809, t871, t829, t881, t870, t882, t902, t796, t801, t783, t779; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t1192, 0, t1193, 0, t1257, -t1172, -t1237, -pkin(5) * t1237, 0, 0, t1129, 0, -t1238, 0, t1333, t1334, t1330, pkin(5) * t1330 + pkin(6) * t1277 + t1228 * t1058, t1228 * t1105 + t1224 * t1107, t1228 * t1077 + t1224 * t1078, t1228 * t1116 + t1224 * t1118, t1228 * t1104 + t1224 * t1106, t1228 * t1115 + t1224 * t1117, t1228 * t1147 + t1224 * t1148, t1224 * t957 + t1228 * t945 - pkin(5) * (t1224 * t1084 - t1228 * t1086), t1224 * t958 + t1228 * t946 - pkin(5) * (t1224 * t1085 - t1228 * t1087), t1224 * t1008 + t1228 * t1007 - pkin(5) * (t1224 * t1126 - t1228 * t1128), t1224 * t920 + t1228 * t899 - pkin(5) * (t1224 * t1005 - t1228 * t1006), t1224 * t977 + t1228 * t975, t1224 * t932 + t1228 * t931, t1224 * t955 + t1228 * t952, t1224 * t976 + t1228 * t974, t1224 * t954 + t1228 * t951, t1228 * t1023 + t1224 * t1024, t1224 * t839 + t1228 * t827 - pkin(5) * (t1224 * t941 - t1228 * t942), t1224 * t847 + t1228 * t840 - pkin(5) * (t1224 * t953 - t1228 * t956), t1224 * t814 + t1228 * t813 - pkin(5) * (t1224 * t922 - t1228 * t923), t1224 * t806 + t1228 * t800 - pkin(5) * (t1224 * t851 - t1228 * t852), t1224 * t856 + t1228 * t854, t1224 * t823 + t1228 * t822, t1224 * t864 + t1228 * t862, t1224 * t855 + t1228 * t853, t1224 * t865 + t1228 * t863, t1224 * t901 + t1228 * t900, t1224 * t787 + t1228 * t786 - pkin(5) * (t1224 * t848 - t1228 * t849), t1224 * t789 + t1228 * t788 - pkin(5) * (t1224 * t857 - t1228 * t858), t1224 * t782 + t1228 * t780 - pkin(5) * (t1224 * t820 - t1228 * t821), t1224 * t778 + t1228 * t777 - pkin(5) * (t1224 * t792 - t1228 * t793); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t1193, 0, -t1192, 0, t1172, t1257, t1249, pkin(5) * t1249, 0, 0, t1238, 0, t1129, 0, -t1334, t1333, t1331, pkin(5) * t1331 - pkin(6) * t1272 + t1224 * t1058, t1224 * t1105 - t1228 * t1107, t1224 * t1077 - t1228 * t1078, t1224 * t1116 - t1228 * t1118, t1224 * t1104 - t1228 * t1106, t1224 * t1115 - t1228 * t1117, t1224 * t1147 - t1228 * t1148, -t1228 * t957 + t1224 * t945 + pkin(5) * (t1228 * t1084 + t1224 * t1086), -t1228 * t958 + t1224 * t946 + pkin(5) * (t1228 * t1085 + t1224 * t1087), -t1228 * t1008 + t1224 * t1007 + pkin(5) * (t1228 * t1126 + t1224 * t1128), -t1228 * t920 + t1224 * t899 + pkin(5) * (t1228 * t1005 + t1224 * t1006), t1224 * t975 - t1228 * t977, t1224 * t931 - t1228 * t932, t1224 * t952 - t1228 * t955, t1224 * t974 - t1228 * t976, t1224 * t951 - t1228 * t954, t1224 * t1023 - t1228 * t1024, -t1228 * t839 + t1224 * t827 + pkin(5) * (t1224 * t942 + t1228 * t941), -t1228 * t847 + t1224 * t840 + pkin(5) * (t1224 * t956 + t1228 * t953), -t1228 * t814 + t1224 * t813 + pkin(5) * (t1224 * t923 + t1228 * t922), -t1228 * t806 + t1224 * t800 + pkin(5) * (t1224 * t852 + t1228 * t851), t1224 * t854 - t1228 * t856, t1224 * t822 - t1228 * t823, t1224 * t862 - t1228 * t864, t1224 * t853 - t1228 * t855, t1224 * t863 - t1228 * t865, t1224 * t900 - t1228 * t901, -t1228 * t787 + t1224 * t786 + pkin(5) * (t1224 * t849 + t1228 * t848), -t1228 * t789 + t1224 * t788 + pkin(5) * (t1224 * t858 + t1228 * t857), -t1228 * t782 + t1224 * t780 + pkin(5) * (t1224 * t821 + t1228 * t820), -t1228 * t778 + t1224 * t777 + pkin(5) * (t1224 * t793 + t1228 * t792); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1230, 0, 0, -g(1), t1201, 0, 0, 0, -t1184, 0, -t1181, 0, t1321, t1162, t1062, pkin(6) * t1062, t1107, t1078, t1118, t1106, t1117, t1148, t957, t958, t1008, t920, t977, t932, t955, t976, t954, t1024, t839, t847, t814, t806, t856, t823, t864, t855, t865, t901, t787, t789, t782, t778; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1230, 0, qJDD(1), 0, g(1), 0, -t1200, 0, 0, 0, t1181, 0, -t1184, 0, -t1162, t1321, t1251, t1058, t1105, t1077, t1116, t1104, t1115, t1147, t945, t946, t1007, t899, t975, t931, t952, t974, t951, t1023, t827, t840, t813, t800, t854, t822, t862, t853, t863, t900, t786, t788, t780, t777; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1201, t1200, 0, 0, 0, 0, 0, 0, 0, t1215, t1096, t1097, 0, -t1059, t1134, t1124, t1139, t1133, t1137, 0, t1010, t1009, t988, t934, t1013, t937, t1000, t1012, t999, t1027, t850, t866, t816, t809, t871, t829, t881, t870, t882, t902, t796, t801, t783, t779; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1215, 0, -t1314, 0, 0, -g(1), t1131, 0, t1146, t1125, t1143, t1145, t1141, t1171, t1050, t1051, t1031, pkin(7) * t1031, t1015, t939, t1003, t1014, t1002, t1028, t885, t892, t833, t817, t873, t831, t883, t872, t884, t903, t807, t808, t784, t781; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1314, 0, t1215, 0, g(1), 0, t1132, 0, t1199, -t1186, -t1279, -t1199, -t1274, -qJDD(3), t1048, t1049, 0, pkin(2) * t1031, -t1122, -t1114, -t1076, t1122, -t1074, -qJDD(3), t898, t904, t910, t841, -t1038, -t1037, -t986, t1038, t982, -t1214, t815, t818, t810, t785; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1215, -t1131, -t1132, 0, 0, t1134, t1124, t1139, t1133, t1137, 0, t1258, t1259, t1242, t1269, t1013, t937, t1000, t1012, t999, t1027, t1246, t1245, t1247, t1234, t871, t829, t881, t870, t882, t902, t1255, t1254, t1248, t1256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1175, t1176, t1190, -t1203, t1197, t1203, 0, t1119, t1092, 0, t1067, t1021, t1056, t1065, t1055, t1091, t987, t990, t894, -qJ(4) * t905, t914, t876, t928, t913, t929, t950, t838, t843, t805, t795; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1264, t1174, t1195, t1235, t1191, -t1264, -t1119, 0, t1093, 0, t1066, t1019, t1053, t1064, t1052, t1090, t944, t948, t890, t897, t912, t874, t926, t911, t927, t949, t826, t836, t803, t791; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1199, t1186, t1279, t1199, t1274, qJDD(3), -t1092, -t1093, 0, 0, t1122, t1114, t1076, -t1122, t1074, qJDD(3), t1332, t1241 + 0.2e1 * t1299, t1311, t1312, t1038, t1037, t986, -t1038, -t982, t1214, t1233, t1231, t1265, t1266; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1123, -t1072, t1316, t1157, t1150, -t1157, 0, t1047, -t1239, 0, t973, t918, t996, t971, t997, t1026, t909, t921, t824, -pkin(8) * t845; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1301, t1075, t1151, -t1250, t1111, -t1301, -t1047, 0, t961, 0, t972, t916, t994, t970, t995, t1025, t891, t895, t819, t834; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1122, t1114, t1076, -t1122, t1074, qJDD(3), t1239, -t961, 0, 0, t1038, t1037, t986, -t1038, -t982, t1214, t1240, t1236, t915, t844; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1018, -t981, t1318, t1089, t1082, -t1089, 0, t969, t888, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1293, t1317, t1083, t1017, t1035, -t1293, -t969, 0, t889, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1038, t1037, t986, -t1038, -t982, t1214, -t888, -t889, 0, 0;];
m_new_reg = t1;
