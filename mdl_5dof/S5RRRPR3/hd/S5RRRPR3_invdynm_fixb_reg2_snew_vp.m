% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRRPR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:43
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRRPR3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR3_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR3_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR3_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRPR3_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:43:28
% EndTime: 2019-12-05 18:43:48
% DurationCPUTime: 20.72s
% Computational Cost: add. (150491->652), mult. (203831->927), div. (0->0), fcn. (136613->10), ass. (0->453)
t1204 = qJDD(1) + qJDD(2);
t1212 = sin(qJ(2));
t1216 = cos(qJ(2));
t1206 = qJD(1) + qJD(2);
t1300 = t1206 ^ 2;
t1174 = t1204 * t1212 + t1216 * t1300;
t1177 = -t1204 * t1216 + t1212 * t1300;
t1213 = sin(qJ(1));
t1217 = cos(qJ(1));
t1121 = t1174 * t1213 + t1177 * t1217;
t1156 = pkin(6) * t1174 - g(1) * t1216;
t1308 = pkin(6) * t1177 - g(1) * t1212;
t1320 = pkin(5) * t1121 + t1213 * t1156 + t1217 * t1308;
t1307 = t1174 * t1217 - t1177 * t1213;
t1319 = pkin(5) * t1307 + t1217 * t1156 - t1213 * t1308;
t1218 = qJD(3) ^ 2;
t1208 = sin(pkin(9));
t1209 = cos(pkin(9));
t1215 = cos(qJ(3));
t1263 = t1206 * t1215;
t1211 = sin(qJ(3));
t1264 = t1206 * t1211;
t1158 = t1208 * t1264 - t1209 * t1263;
t1301 = t1158 ^ 2;
t1102 = -t1218 - t1301;
t1159 = (t1208 * t1215 + t1209 * t1211) * t1206;
t1116 = t1159 * t1158;
t1302 = qJDD(3) - t1116;
t1311 = t1209 * t1302;
t1033 = t1102 * t1208 + t1311;
t1195 = qJD(3) * t1263;
t1261 = t1211 * t1204;
t1168 = t1195 + t1261;
t1192 = g(2) * t1213 - g(3) * t1217;
t1219 = qJD(1) ^ 2;
t1180 = -pkin(1) * t1219 + t1192;
t1193 = g(2) * t1217 + g(3) * t1213;
t1221 = qJDD(1) * pkin(1) + t1193;
t1126 = t1216 * t1180 + t1212 * t1221;
t1114 = -pkin(2) * t1300 + pkin(7) * t1204 + t1126;
t1275 = t1114 * t1211;
t1038 = qJDD(3) * pkin(3) - qJ(4) * t1168 - t1275 + (-g(1) + (pkin(3) * t1264 + qJ(4) * qJD(3)) * t1206) * t1215;
t1087 = -t1211 * g(1) + t1114 * t1215;
t1181 = qJD(3) * pkin(3) - qJ(4) * t1264;
t1299 = t1215 ^ 2;
t1197 = t1299 * t1300;
t1248 = qJD(3) * t1264;
t1260 = t1215 * t1204;
t1224 = -t1248 + t1260;
t1039 = -pkin(3) * t1197 + qJ(4) * t1224 - qJD(3) * t1181 + t1087;
t1228 = -0.2e1 * qJD(4) * t1159 + t1038 * t1209 - t1039 * t1208;
t1317 = pkin(3) * t1033 + t1228;
t1125 = t1180 * t1212 - t1216 * t1221;
t1240 = t1125 * t1212 + t1126 * t1216;
t1056 = t1125 * t1216 - t1126 * t1212;
t1278 = t1056 * t1217;
t1316 = -t1213 * t1240 + t1278;
t1279 = t1056 * t1213;
t1315 = -t1217 * t1240 - t1279;
t1312 = t1208 * t1302;
t1210 = sin(qJ(5));
t1214 = cos(qJ(5));
t1092 = t1158 * t1214 + t1159 * t1210;
t1094 = -t1158 * t1210 + t1159 * t1214;
t1032 = t1094 * t1092;
t1203 = qJDD(3) + qJDD(5);
t1304 = -t1032 + t1203;
t1310 = t1210 * t1304;
t1309 = t1214 * t1304;
t1086 = g(1) * t1215 + t1275;
t1026 = t1086 * t1211 + t1087 * t1215;
t1117 = t1168 * t1209 + t1208 * t1224;
t1239 = t1168 * t1208 - t1209 * t1224;
t1012 = -qJD(5) * t1092 + t1117 * t1214 - t1210 * t1239;
t1205 = qJD(3) + qJD(5);
t1083 = t1205 * t1092;
t1303 = -t1083 + t1012;
t1151 = qJD(3) * t1158;
t1070 = t1151 + t1117;
t1241 = t1117 * t1210 + t1214 * t1239;
t976 = (qJD(5) - t1205) * t1094 + t1241;
t1088 = t1092 ^ 2;
t1089 = t1094 ^ 2;
t1157 = t1159 ^ 2;
t1202 = t1205 ^ 2;
t1285 = qJD(4) * t1158;
t1148 = -0.2e1 * t1285;
t1258 = t1038 * t1208 + t1039 * t1209;
t955 = t1148 + t1258;
t899 = t1208 * t955 + t1209 * t1228;
t1298 = pkin(3) * t899;
t1287 = qJD(3) * t1159;
t1068 = -t1239 + t1287;
t1014 = t1068 * t1208 - t1070 * t1209;
t1297 = pkin(3) * t1014;
t927 = pkin(4) * t1302 - pkin(8) * t1070 + t1228;
t1143 = qJD(3) * pkin(4) - pkin(8) * t1159;
t929 = -pkin(4) * t1301 - pkin(8) * t1239 - qJD(3) * t1143 + t955;
t882 = t1210 * t929 - t1214 * t927;
t883 = t1210 * t927 + t1214 * t929;
t839 = t1210 * t883 - t1214 * t882;
t1293 = t1208 * t839;
t1292 = t1209 * t839;
t1113 = -pkin(2) * t1204 - pkin(7) * t1300 + t1125;
t1041 = -pkin(3) * t1224 - qJ(4) * t1197 + t1181 * t1264 + qJDD(4) + t1113;
t963 = pkin(4) * t1239 - pkin(8) * t1301 + t1143 * t1159 + t1041;
t1291 = t1210 * t963;
t1290 = t1211 * t899;
t1289 = t1214 * t963;
t1288 = t1215 * t899;
t1286 = qJD(3) * t1206;
t1029 = t1032 + t1203;
t1283 = t1029 * t1210;
t1282 = t1029 * t1214;
t1281 = t1041 * t1208;
t1280 = t1041 * t1209;
t1105 = qJDD(3) + t1116;
t1277 = t1105 * t1208;
t1276 = t1105 * t1209;
t1274 = t1158 * t1208;
t1273 = t1158 * t1209;
t1272 = t1159 * t1208;
t1271 = t1159 * t1209;
t1169 = -0.2e1 * t1248 + t1260;
t1127 = t1169 * t1215;
t1191 = t1215 * t1300 * t1211;
t1182 = qJDD(3) + t1191;
t1270 = t1182 * t1211;
t1183 = qJDD(3) - t1191;
t1269 = t1183 * t1211;
t1268 = t1183 * t1215;
t1267 = t1205 * t1094;
t1266 = t1205 * t1210;
t1265 = t1205 * t1214;
t1207 = t1211 ^ 2;
t1262 = t1300 * t1207;
t1095 = t1211 * t1113;
t1096 = t1215 * t1113;
t1257 = -pkin(2) * t1113 + pkin(7) * t1026;
t1256 = qJDD(3) * t1216;
t1255 = t1207 + t1299;
t840 = t1210 * t882 + t1214 * t883;
t805 = t1208 * t840 + t1292;
t838 = pkin(4) * t839;
t1254 = pkin(3) * t805 + t838;
t980 = t1083 + t1012;
t911 = -t1210 * t976 - t1214 * t980;
t913 = t1210 * t980 - t1214 * t976;
t869 = t1208 * t913 + t1209 * t911;
t909 = pkin(4) * t911;
t1253 = pkin(3) * t869 + t909;
t1252 = t1212 * t1032;
t1251 = t1216 * t1032;
t1250 = t1212 * t1116;
t1249 = t1216 * t1116;
t1188 = -t1218 - t1262;
t1138 = -t1188 * t1211 - t1268;
t1167 = 0.2e1 * t1195 + t1261;
t1247 = -pkin(2) * t1167 + pkin(7) * t1138 + t1095;
t1190 = -t1197 - t1218;
t1136 = t1190 * t1215 - t1270;
t1246 = pkin(2) * t1169 + pkin(7) * t1136 - t1096;
t900 = -t1208 * t1228 + t1209 * t955;
t806 = t1209 * t840 - t1293;
t828 = -pkin(4) * t963 + pkin(8) * t840;
t785 = -pkin(3) * t963 - pkin(8) * t1293 + qJ(4) * t806 + t1209 * t828;
t789 = -pkin(8) * t1292 - qJ(4) * t805 - t1208 * t828;
t793 = -t1211 * t805 + t1215 * t806;
t1245 = -pkin(2) * t963 + pkin(7) * t793 + t1211 * t789 + t1215 * t785;
t1027 = -t1202 - t1088;
t958 = t1027 * t1214 - t1310;
t975 = (qJD(5) + t1205) * t1094 + t1241;
t885 = -pkin(4) * t975 + pkin(8) * t958 - t1289;
t957 = t1027 * t1210 + t1309;
t902 = -t1208 * t957 + t1209 * t958;
t903 = -pkin(8) * t957 + t1291;
t820 = -pkin(3) * t975 + qJ(4) * t902 + t1208 * t903 + t1209 * t885;
t901 = t1208 * t958 + t1209 * t957;
t832 = -qJ(4) * t901 - t1208 * t885 + t1209 * t903;
t863 = -t1211 * t901 + t1215 * t902;
t1244 = -pkin(2) * t975 + pkin(7) * t863 + t1211 * t832 + t1215 * t820;
t1073 = -t1089 - t1202;
t987 = -t1073 * t1210 - t1282;
t889 = -pkin(4) * t1303 + pkin(8) * t987 + t1291;
t986 = t1073 * t1214 - t1283;
t915 = -pkin(8) * t986 + t1289;
t919 = -t1208 * t986 + t1209 * t987;
t830 = -pkin(3) * t1303 + qJ(4) * t919 + t1208 * t915 + t1209 * t889;
t918 = t1208 * t987 + t1209 * t986;
t837 = -qJ(4) * t918 - t1208 * t889 + t1209 * t915;
t874 = -t1211 * t918 + t1215 * t919;
t1243 = -pkin(2) * t1303 + pkin(7) * t874 + t1211 * t837 + t1215 * t830;
t1010 = -t1088 - t1089;
t813 = -pkin(4) * t1010 + pkin(8) * t913 + t840;
t818 = -pkin(8) * t911 - t839;
t871 = -t1208 * t911 + t1209 * t913;
t797 = -pkin(3) * t1010 + qJ(4) * t871 + t1208 * t818 + t1209 * t813;
t799 = -qJ(4) * t869 - t1208 * t813 + t1209 * t818;
t826 = -t1211 * t869 + t1215 * t871;
t1238 = -pkin(2) * t1010 + pkin(7) * t826 + t1211 * t799 + t1215 * t797;
t1065 = -t1157 - t1301;
t1016 = t1068 * t1209 + t1070 * t1208;
t884 = -pkin(3) * t1065 + qJ(4) * t1016 + t900;
t888 = -qJ(4) * t1014 - t899;
t934 = -t1014 * t1211 + t1016 * t1215;
t1237 = -pkin(2) * t1065 + pkin(7) * t934 + t1211 * t888 + t1215 * t884;
t1066 = t1239 + t1287;
t1034 = t1102 * t1209 - t1312;
t938 = -pkin(3) * t1066 + qJ(4) * t1034 - t1280;
t962 = -t1033 * t1211 + t1034 * t1215;
t981 = -qJ(4) * t1033 + t1281;
t1236 = -pkin(2) * t1066 + pkin(7) * t962 + t1211 * t981 + t1215 * t938;
t1069 = -t1151 + t1117;
t1146 = -t1157 - t1218;
t1051 = -t1146 * t1208 - t1276;
t942 = -pkin(3) * t1069 + qJ(4) * t1051 + t1281;
t1048 = t1146 * t1209 - t1277;
t984 = -qJ(4) * t1048 + t1280;
t998 = -t1048 * t1211 + t1051 * t1215;
t1235 = -pkin(2) * t1069 + pkin(7) * t998 + t1211 * t984 + t1215 * t942;
t1234 = t1212 * t1191;
t1233 = t1216 * t1191;
t1172 = t1255 * t1204;
t1178 = t1197 + t1262;
t1232 = pkin(2) * t1178 + pkin(7) * t1172 + t1026;
t1231 = pkin(3) * t1048 - t1258;
t1230 = pkin(4) * t957 - t882;
t1184 = qJDD(1) * t1213 + t1217 * t1219;
t1229 = pkin(5) * t1184 - g(1) * t1217;
t1025 = t1086 * t1215 - t1087 * t1211;
t1227 = t1192 * t1217 - t1193 * t1213;
t1226 = -t1192 * t1213 - t1193 * t1217;
t1225 = pkin(4) * t986 - t883;
t855 = t1215 * t900 - t1290;
t891 = -pkin(3) * t1041 + qJ(4) * t900;
t1223 = -pkin(2) * t1041 + pkin(7) * t855 - qJ(4) * t1290 + t1215 * t891;
t1222 = pkin(3) * t901 + t1230;
t1220 = pkin(3) * t918 + t1225;
t1200 = t1212 * qJDD(3);
t1189 = t1197 - t1218;
t1187 = t1218 - t1262;
t1185 = -qJDD(1) * t1217 + t1213 * t1219;
t1179 = -t1197 + t1262;
t1173 = t1215 * t1182;
t1165 = -pkin(5) * t1185 + g(1) * t1213;
t1164 = t1255 * t1286;
t1145 = -t1157 + t1218;
t1144 = -t1218 + t1301;
t1142 = t1164 * t1216 + t1200;
t1141 = t1164 * t1212 - t1256;
t1140 = t1168 * t1215 - t1207 * t1286;
t1139 = -t1211 * t1224 - t1286 * t1299;
t1137 = -t1187 * t1211 + t1173;
t1135 = t1189 * t1215 - t1269;
t1134 = t1188 * t1215 - t1269;
t1133 = t1187 * t1215 + t1270;
t1132 = t1190 * t1211 + t1173;
t1131 = t1189 * t1211 + t1268;
t1128 = (t1168 + t1195) * t1211;
t1122 = t1172 * t1216 - t1178 * t1212;
t1120 = t1172 * t1212 + t1178 * t1216;
t1119 = -t1167 * t1211 + t1127;
t1118 = t1167 * t1215 + t1169 * t1211;
t1112 = t1137 * t1216 + t1212 * t1261;
t1111 = t1135 * t1216 + t1212 * t1260;
t1110 = t1137 * t1212 - t1216 * t1261;
t1109 = t1135 * t1212 - t1216 * t1260;
t1108 = t1157 - t1301;
t1101 = t1140 * t1216 - t1234;
t1100 = t1139 * t1216 + t1234;
t1099 = t1140 * t1212 + t1233;
t1098 = t1139 * t1212 - t1233;
t1091 = -pkin(1) * t1174 - t1126;
t1090 = -pkin(1) * t1177 - t1125;
t1085 = (t1272 - t1273) * qJD(3);
t1084 = (-t1271 - t1274) * qJD(3);
t1081 = t1138 * t1216 + t1167 * t1212;
t1080 = t1136 * t1216 - t1169 * t1212;
t1079 = t1138 * t1212 - t1167 * t1216;
t1078 = t1136 * t1212 + t1169 * t1216;
t1077 = -t1089 + t1202;
t1076 = t1088 - t1202;
t1072 = t1119 * t1216 + t1179 * t1212;
t1071 = t1119 * t1212 - t1179 * t1216;
t1061 = -qJD(3) * t1272 + t1117 * t1209;
t1060 = qJD(3) * t1271 + t1117 * t1208;
t1059 = qJD(3) * t1273 + t1208 * t1239;
t1058 = qJD(3) * t1274 - t1209 * t1239;
t1053 = pkin(1) * t1056;
t1052 = pkin(1) * g(1) + pkin(6) * t1240;
t1050 = -t1145 * t1208 + t1311;
t1049 = t1144 * t1209 - t1277;
t1047 = t1145 * t1209 + t1312;
t1046 = t1144 * t1208 + t1276;
t1045 = -pkin(7) * t1134 + t1096;
t1044 = -pkin(7) * t1132 + t1095;
t1043 = -pkin(2) * t1134 + t1087;
t1042 = -pkin(2) * t1132 + t1086;
t1031 = t1089 - t1088;
t1022 = -t1084 * t1211 + t1085 * t1215;
t1021 = t1084 * t1215 + t1085 * t1211;
t1020 = (-t1092 * t1214 + t1094 * t1210) * t1205;
t1019 = (-t1092 * t1210 - t1094 * t1214) * t1205;
t1018 = t1022 * t1216 + t1200;
t1017 = t1022 * t1212 - t1256;
t1015 = -t1066 * t1209 - t1069 * t1208;
t1013 = -t1066 * t1208 + t1069 * t1209;
t1011 = -qJD(5) * t1094 - t1241;
t1009 = -t1060 * t1211 + t1061 * t1215;
t1008 = -t1058 * t1211 + t1059 * t1215;
t1007 = t1060 * t1215 + t1061 * t1211;
t1006 = t1058 * t1215 + t1059 * t1211;
t1004 = pkin(1) * t1078 + t1246;
t1003 = pkin(1) * t1079 + t1247;
t1002 = -pkin(6) * t1120 + t1025 * t1216;
t1001 = pkin(6) * t1122 + t1025 * t1212;
t1000 = t1026 * t1216 + t1113 * t1212;
t999 = t1026 * t1212 - t1113 * t1216;
t997 = -t1047 * t1211 + t1050 * t1215;
t996 = -t1046 * t1211 + t1049 * t1215;
t995 = t1048 * t1215 + t1051 * t1211;
t994 = t1047 * t1215 + t1050 * t1211;
t993 = t1046 * t1215 + t1049 * t1211;
t991 = t1076 * t1214 - t1283;
t990 = -t1077 * t1210 + t1309;
t989 = t1076 * t1210 + t1282;
t988 = t1077 * t1214 + t1310;
t982 = pkin(1) * t1120 + t1232;
t971 = t1009 * t1216 + t1250;
t970 = t1008 * t1216 - t1250;
t969 = t1009 * t1212 - t1249;
t968 = t1008 * t1212 + t1249;
t967 = t1012 * t1214 - t1094 * t1266;
t966 = t1012 * t1210 + t1094 * t1265;
t965 = -t1011 * t1210 + t1092 * t1265;
t964 = t1011 * t1214 + t1092 * t1266;
t961 = t1033 * t1215 + t1034 * t1211;
t952 = -pkin(6) * t1079 - t1043 * t1212 + t1045 * t1216;
t951 = -pkin(6) * t1078 - t1042 * t1212 + t1044 * t1216;
t950 = t1069 * t1212 + t1216 * t998;
t949 = t1070 * t1212 + t1216 * t997;
t948 = t1068 * t1212 + t1216 * t996;
t947 = -t1069 * t1216 + t1212 * t998;
t946 = -t1070 * t1216 + t1212 * t997;
t945 = -t1068 * t1216 + t1212 * t996;
t944 = -t1019 * t1208 + t1020 * t1209;
t943 = t1019 * t1209 + t1020 * t1208;
t940 = -pkin(1) * t1134 + pkin(6) * t1081 + t1043 * t1216 + t1045 * t1212;
t939 = -pkin(1) * t1132 + pkin(6) * t1080 + t1042 * t1216 + t1044 * t1212;
t936 = t1066 * t1212 + t1216 * t962;
t935 = -t1066 * t1216 + t1212 * t962;
t933 = -t1013 * t1211 + t1015 * t1215;
t932 = t1014 * t1215 + t1016 * t1211;
t931 = t1013 * t1215 + t1015 * t1211;
t928 = pkin(1) * t999 + t1257;
t926 = t1108 * t1212 + t1216 * t933;
t925 = -t1108 * t1216 + t1212 * t933;
t923 = -t1208 * t989 + t1209 * t991;
t922 = -t1208 * t988 + t1209 * t990;
t921 = t1208 * t991 + t1209 * t989;
t920 = t1208 * t990 + t1209 * t988;
t917 = t1065 * t1212 + t1216 * t934;
t916 = -t1065 * t1216 + t1212 * t934;
t914 = -pkin(6) * t999 - (pkin(2) * t1212 - pkin(7) * t1216) * t1025;
t912 = -t1210 * t1303 - t1214 * t975;
t910 = -t1210 * t975 + t1214 * t1303;
t908 = -t1208 * t966 + t1209 * t967;
t907 = -t1208 * t964 + t1209 * t965;
t906 = t1208 * t967 + t1209 * t966;
t905 = t1208 * t965 + t1209 * t964;
t904 = -pkin(2) * t932 - t1297;
t898 = -pkin(2) * t995 + t1148 - t1231;
t897 = -t1211 * t943 + t1215 * t944;
t896 = t1211 * t944 + t1215 * t943;
t895 = t1203 * t1212 + t1216 * t897;
t894 = -t1203 * t1216 + t1212 * t897;
t893 = pkin(6) * t1000 - (-pkin(2) * t1216 - pkin(7) * t1212 - pkin(1)) * t1025;
t892 = -pkin(2) * t961 - t1317;
t886 = -pkin(7) * t995 - t1211 * t942 + t1215 * t984;
t879 = -pkin(7) * t961 - t1211 * t938 + t1215 * t981;
t878 = -t1211 * t921 + t1215 * t923;
t877 = -t1211 * t920 + t1215 * t922;
t876 = t1211 * t923 + t1215 * t921;
t875 = t1211 * t922 + t1215 * t920;
t873 = t1211 * t919 + t1215 * t918;
t870 = -t1208 * t910 + t1209 * t912;
t868 = t1208 * t912 + t1209 * t910;
t867 = -t1211 * t906 + t1215 * t908;
t866 = -t1211 * t905 + t1215 * t907;
t865 = t1211 * t908 + t1215 * t906;
t864 = t1211 * t907 + t1215 * t905;
t862 = t1211 * t902 + t1215 * t901;
t860 = pkin(1) * t947 + t1235;
t859 = -t1212 * t976 + t1216 * t878;
t858 = t1212 * t980 + t1216 * t877;
t857 = t1212 * t878 + t1216 * t976;
t856 = t1212 * t877 - t1216 * t980;
t854 = t1211 * t900 + t1288;
t852 = t1212 * t1303 + t1216 * t874;
t851 = t1212 * t874 - t1216 * t1303;
t850 = t1216 * t867 + t1252;
t849 = t1216 * t866 - t1252;
t848 = t1212 * t867 - t1251;
t847 = t1212 * t866 + t1251;
t846 = t1041 * t1212 + t1216 * t855;
t845 = -t1041 * t1216 + t1212 * t855;
t844 = pkin(1) * t935 + t1236;
t843 = t1212 * t975 + t1216 * t863;
t842 = t1212 * t863 - t1216 * t975;
t841 = -pkin(6) * t947 - t1212 * t898 + t1216 * t886;
t835 = -pkin(2) * t854 - t1298;
t834 = -pkin(1) * t995 + pkin(6) * t950 + t1212 * t886 + t1216 * t898;
t833 = -pkin(6) * t935 - t1212 * t892 + t1216 * t879;
t827 = -pkin(7) * t932 - t1211 * t884 + t1215 * t888;
t825 = -t1211 * t868 + t1215 * t870;
t824 = t1211 * t871 + t1215 * t869;
t823 = t1211 * t870 + t1215 * t868;
t821 = -pkin(1) * t961 + pkin(6) * t936 + t1212 * t879 + t1216 * t892;
t817 = t1031 * t1212 + t1216 * t825;
t816 = -t1031 * t1216 + t1212 * t825;
t815 = t1010 * t1212 + t1216 * t826;
t814 = -t1010 * t1216 + t1212 * t826;
t812 = -pkin(2) * t873 - t1220;
t811 = -pkin(7) * t854 - qJ(4) * t1288 - t1211 * t891;
t810 = pkin(1) * t916 + t1237;
t809 = -pkin(2) * t862 - t1222;
t808 = -pkin(6) * t916 - t1212 * t904 + t1216 * t827;
t807 = -pkin(1) * t932 + pkin(6) * t917 + t1212 * t827 + t1216 * t904;
t804 = -pkin(2) * t824 - t1253;
t803 = pkin(1) * t845 + t1223;
t802 = -pkin(7) * t873 - t1211 * t830 + t1215 * t837;
t801 = -pkin(7) * t862 - t1211 * t820 + t1215 * t832;
t800 = -pkin(6) * t845 - t1212 * t835 + t1216 * t811;
t795 = pkin(1) * t851 + t1243;
t794 = -pkin(1) * t854 + pkin(6) * t846 + t1212 * t811 + t1216 * t835;
t792 = t1211 * t806 + t1215 * t805;
t790 = pkin(1) * t842 + t1244;
t787 = t1212 * t963 + t1216 * t793;
t786 = t1212 * t793 - t1216 * t963;
t783 = -pkin(6) * t851 - t1212 * t812 + t1216 * t802;
t782 = -pkin(1) * t873 + pkin(6) * t852 + t1212 * t802 + t1216 * t812;
t781 = -pkin(6) * t842 - t1212 * t809 + t1216 * t801;
t780 = -pkin(1) * t862 + pkin(6) * t843 + t1212 * t801 + t1216 * t809;
t779 = -pkin(2) * t792 - t1254;
t778 = -pkin(7) * t824 - t1211 * t797 + t1215 * t799;
t777 = pkin(1) * t814 + t1238;
t776 = -pkin(6) * t814 - t1212 * t804 + t1216 * t778;
t775 = -pkin(7) * t792 - t1211 * t785 + t1215 * t789;
t774 = -pkin(1) * t824 + pkin(6) * t815 + t1212 * t778 + t1216 * t804;
t773 = pkin(1) * t786 + t1245;
t772 = -pkin(6) * t786 - t1212 * t779 + t1216 * t775;
t771 = -pkin(1) * t792 + pkin(6) * t787 + t1212 * t775 + t1216 * t779;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t1193, -t1192, 0, 0, 0, 0, 0, 0, 0, t1204, t1090, t1091, 0, -t1053, t1128, t1118, t1133, t1127, t1131, 0, t1004, t1003, t982, t928, t1007, t931, t994, t1006, t993, t1021, t844, t860, t810, t803, t865, t823, t875, t864, t876, t896, t790, t795, t777, t773; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t1184, 0, t1185, 0, t1229, t1165, -t1227, -pkin(5) * t1227, 0, 0, -t1307, 0, t1121, 0, t1319, -t1320, t1315, pkin(5) * t1315 - pkin(6) * t1279 - t1217 * t1052, -t1099 * t1217 - t1101 * t1213, -t1071 * t1217 - t1072 * t1213, -t1110 * t1217 - t1112 * t1213, -t1098 * t1217 - t1100 * t1213, -t1109 * t1217 - t1111 * t1213, -t1141 * t1217 - t1142 * t1213, -t1213 * t951 - t1217 * t939 - pkin(5) * (-t1078 * t1213 + t1080 * t1217), -t1213 * t952 - t1217 * t940 - pkin(5) * (-t1079 * t1213 + t1081 * t1217), -t1213 * t1002 - t1217 * t1001 - pkin(5) * (-t1120 * t1213 + t1122 * t1217), -t1213 * t914 - t1217 * t893 - pkin(5) * (t1000 * t1217 - t1213 * t999), -t1213 * t971 - t1217 * t969, -t1213 * t926 - t1217 * t925, -t1213 * t949 - t1217 * t946, -t1213 * t970 - t1217 * t968, -t1213 * t948 - t1217 * t945, -t1017 * t1217 - t1018 * t1213, -t1213 * t833 - t1217 * t821 - pkin(5) * (-t1213 * t935 + t1217 * t936), -t1213 * t841 - t1217 * t834 - pkin(5) * (-t1213 * t947 + t1217 * t950), -t1213 * t808 - t1217 * t807 - pkin(5) * (-t1213 * t916 + t1217 * t917), -t1213 * t800 - t1217 * t794 - pkin(5) * (-t1213 * t845 + t1217 * t846), -t1213 * t850 - t1217 * t848, -t1213 * t817 - t1217 * t816, -t1213 * t858 - t1217 * t856, -t1213 * t849 - t1217 * t847, -t1213 * t859 - t1217 * t857, -t1213 * t895 - t1217 * t894, -t1213 * t781 - t1217 * t780 - pkin(5) * (-t1213 * t842 + t1217 * t843), -t1213 * t783 - t1217 * t782 - pkin(5) * (-t1213 * t851 + t1217 * t852), -t1213 * t776 - t1217 * t774 - pkin(5) * (-t1213 * t814 + t1217 * t815), -t1213 * t772 - t1217 * t771 - pkin(5) * (-t1213 * t786 + t1217 * t787); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t1185, 0, -t1184, 0, -t1165, t1229, t1226, pkin(5) * t1226, 0, 0, -t1121, 0, -t1307, 0, t1320, t1319, t1316, pkin(5) * t1316 + pkin(6) * t1278 - t1213 * t1052, -t1099 * t1213 + t1101 * t1217, -t1071 * t1213 + t1072 * t1217, -t1110 * t1213 + t1112 * t1217, -t1098 * t1213 + t1100 * t1217, -t1109 * t1213 + t1111 * t1217, -t1141 * t1213 + t1142 * t1217, t1217 * t951 - t1213 * t939 + pkin(5) * (-t1078 * t1217 - t1080 * t1213), t1217 * t952 - t1213 * t940 + pkin(5) * (-t1079 * t1217 - t1081 * t1213), t1217 * t1002 - t1213 * t1001 + pkin(5) * (-t1120 * t1217 - t1122 * t1213), t1217 * t914 - t1213 * t893 + pkin(5) * (-t1000 * t1213 - t1217 * t999), -t1213 * t969 + t1217 * t971, -t1213 * t925 + t1217 * t926, -t1213 * t946 + t1217 * t949, -t1213 * t968 + t1217 * t970, -t1213 * t945 + t1217 * t948, -t1017 * t1213 + t1018 * t1217, t1217 * t833 - t1213 * t821 + pkin(5) * (-t1213 * t936 - t1217 * t935), t1217 * t841 - t1213 * t834 + pkin(5) * (-t1213 * t950 - t1217 * t947), t1217 * t808 - t1213 * t807 + pkin(5) * (-t1213 * t917 - t1217 * t916), t1217 * t800 - t1213 * t794 + pkin(5) * (-t1213 * t846 - t1217 * t845), -t1213 * t848 + t1217 * t850, -t1213 * t816 + t1217 * t817, -t1213 * t856 + t1217 * t858, -t1213 * t847 + t1217 * t849, -t1213 * t857 + t1217 * t859, -t1213 * t894 + t1217 * t895, t1217 * t781 - t1213 * t780 + pkin(5) * (-t1213 * t843 - t1217 * t842), t1217 * t783 - t1213 * t782 + pkin(5) * (-t1213 * t852 - t1217 * t851), t1217 * t776 - t1213 * t774 + pkin(5) * (-t1213 * t815 - t1217 * t814), t1217 * t772 - t1213 * t771 + pkin(5) * (-t1213 * t787 - t1217 * t786); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1219, 0, 0, -g(1), -t1193, 0, 0, 0, -t1177, 0, -t1174, 0, t1308, t1156, t1056, pkin(6) * t1056, t1101, t1072, t1112, t1100, t1111, t1142, t951, t952, t1002, t914, t971, t926, t949, t970, t948, t1018, t833, t841, t808, t800, t850, t817, t858, t849, t859, t895, t781, t783, t776, t772; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1219, 0, qJDD(1), 0, g(1), 0, t1192, 0, 0, 0, t1174, 0, -t1177, 0, -t1156, t1308, t1240, t1052, t1099, t1071, t1110, t1098, t1109, t1141, t939, t940, t1001, t893, t969, t925, t946, t968, t945, t1017, t821, t834, t807, t794, t848, t816, t856, t847, t857, t894, t780, t782, t774, t771; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1193, -t1192, 0, 0, 0, 0, 0, 0, 0, t1204, t1090, t1091, 0, -t1053, t1128, t1118, t1133, t1127, t1131, 0, t1004, t1003, t982, t928, t1007, t931, t994, t1006, t993, t1021, t844, t860, t810, t803, t865, t823, t875, t864, t876, t896, t790, t795, t777, t773; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1204, 0, -t1300, 0, 0, -g(1), t1125, 0, t1140, t1119, t1137, t1139, t1135, t1164, t1044, t1045, t1025, pkin(7) * t1025, t1009, t933, t997, t1008, t996, t1022, t879, t886, t827, t811, t867, t825, t877, t866, t878, t897, t801, t802, t778, t775; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1300, 0, t1204, 0, g(1), 0, t1126, 0, t1191, -t1179, -t1261, -t1191, -t1260, -qJDD(3), t1042, t1043, 0, pkin(2) * t1025, -t1116, -t1108, -t1070, t1116, -t1068, -qJDD(3), t892, t898, t904, t835, -t1032, -t1031, -t980, t1032, t976, -t1203, t809, t812, t804, t779; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1204, -t1125, -t1126, 0, 0, t1128, t1118, t1133, t1127, t1131, 0, t1246, t1247, t1232, t1257, t1007, t931, t994, t1006, t993, t1021, t1236, t1235, t1237, t1223, t865, t823, t875, t864, t876, t896, t1244, t1243, t1238, t1245; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1168, t1169, t1182, -t1195, t1189, t1195, 0, t1113, t1086, 0, t1061, t1015, t1050, t1059, t1049, t1085, t981, t984, t888, -qJ(4) * t899, t908, t870, t922, t907, t923, t944, t832, t837, t799, t789; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1248, t1167, t1187, t1224, t1183, -t1248, -t1113, 0, t1087, 0, t1060, t1013, t1047, t1058, t1046, t1084, t938, t942, t884, t891, t906, t868, t920, t905, t921, t943, t820, t830, t797, t785; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1191, t1179, t1261, t1191, t1260, qJDD(3), -t1086, -t1087, 0, 0, t1116, t1108, t1070, -t1116, t1068, qJDD(3), t1317, t1231 + 0.2e1 * t1285, t1297, t1298, t1032, t1031, t980, -t1032, -t976, t1203, t1222, t1220, t1253, t1254; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1117, -t1066, t1302, t1151, t1144, -t1151, 0, t1041, -t1228, 0, t967, t912, t990, t965, t991, t1020, t903, t915, t818, -pkin(8) * t839; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1287, t1069, t1145, -t1239, t1105, -t1287, -t1041, 0, t955, 0, t966, t910, t988, t964, t989, t1019, t885, t889, t813, t828; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1116, t1108, t1070, -t1116, t1068, qJDD(3), t1228, -t955, 0, 0, t1032, t1031, t980, -t1032, -t976, t1203, t1230, t1225, t909, t838; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1012, -t975, t1304, t1083, t1076, -t1083, 0, t963, t882, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1267, t1303, t1077, t1011, t1029, -t1267, -t963, 0, t883, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1032, t1031, t980, -t1032, -t976, t1203, -t882, -t883, 0, 0;];
m_new_reg = t1;
