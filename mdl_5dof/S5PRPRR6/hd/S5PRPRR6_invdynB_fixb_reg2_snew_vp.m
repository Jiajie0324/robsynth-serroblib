% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d4,d5,theta1,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:58
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRPRR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRR6_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRR6_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5PRPRR6_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:58:01
% EndTime: 2019-12-05 15:58:19
% DurationCPUTime: 16.17s
% Computational Cost: add. (63911->662), mult. (142312->1087), div. (0->0), fcn. (108949->12), ass. (0->474)
t614 = sin(qJ(5));
t607 = sin(pkin(10));
t610 = cos(pkin(10));
t615 = sin(qJ(4));
t618 = cos(qJ(4));
t645 = t607 * t618 + t610 * t615;
t574 = t645 * qJD(2);
t617 = cos(qJ(5));
t551 = -t617 * qJD(4) + t574 * t614;
t553 = qJD(4) * t614 + t574 * t617;
t504 = t553 * t551;
t691 = qJDD(2) * t610;
t706 = t607 * t615;
t566 = qJDD(2) * t706 - t618 * t691;
t695 = t574 * qJD(4);
t527 = -t566 - t695;
t627 = qJDD(5) - t527;
t730 = -t504 + t627;
t740 = t614 * t730;
t698 = qJD(2) * t610;
t572 = qJD(2) * t706 - t618 * t698;
t535 = t574 * t572;
t728 = qJDD(4) - t535;
t739 = t615 * t728;
t738 = t617 * t730;
t737 = t618 * t728;
t603 = t610 ^ 2;
t726 = qJD(2) ^ 2;
t596 = t603 * t726;
t602 = t607 ^ 2;
t697 = t726 * t602;
t581 = t596 + t697;
t609 = sin(pkin(5));
t612 = cos(pkin(5));
t608 = sin(pkin(9));
t611 = cos(pkin(9));
t679 = g(1) * t608 - t611 * g(2);
t699 = g(3) - qJDD(1);
t736 = -t609 * t699 + t612 * t679;
t727 = t726 * (t602 + t603);
t577 = t610 * t727;
t619 = cos(qJ(2));
t616 = sin(qJ(2));
t690 = qJDD(2) * t616;
t547 = t577 * t619 + t610 * t690;
t689 = qJDD(2) * t619;
t680 = t610 * t689;
t639 = -t577 * t616 + t680;
t731 = t639 * t612;
t735 = t547 * t611 + t608 * t731;
t734 = t547 * t608 - t611 * t731;
t733 = t608 * t699;
t732 = t611 * t699;
t537 = t639 * t609;
t696 = t572 * qJD(4);
t729 = t645 * qJDD(2);
t529 = t729 - t696;
t481 = -t551 * qJD(5) + t614 * qJDD(4) + t617 * t529;
t563 = qJD(5) + t572;
t510 = t563 * t551;
t446 = -t510 + t481;
t676 = -t617 * qJDD(4) + t614 * t529;
t443 = (qJD(5) - t563) * t553 + t676;
t586 = g(1) * t611 + g(2) * t608;
t544 = -t611 * t586 - t608 * t679;
t543 = -t608 * t586 + t611 * t679;
t514 = -t619 * t586 + t736 * t616;
t549 = t551 ^ 2;
t550 = t553 ^ 2;
t562 = t563 ^ 2;
t564 = t572 ^ 2;
t565 = t574 ^ 2;
t725 = 2 * qJD(3);
t724 = pkin(4) * t615;
t513 = -t586 * t616 - t736 * t619;
t465 = t513 * t616 + t514 * t619;
t723 = pkin(6) * t465;
t606 = qJDD(2) * pkin(2);
t556 = t609 * t679 + t612 * t699;
t624 = qJDD(2) * qJ(3) + t514;
t468 = t610 * (-pkin(2) * t726 + t624) - t607 * t556 + t698 * t725;
t455 = -pkin(3) * t596 + pkin(7) * t691 + t468;
t704 = t610 * t556;
t623 = -t704 + ((-qJ(3) - pkin(7)) * qJDD(2) + (-(2 * qJD(3)) + (pkin(3) * t610 + pkin(2)) * qJD(2)) * qJD(2) - t514) * t607;
t389 = t455 * t615 - t618 * t623;
t390 = t618 * t455 + t615 * t623;
t332 = -t389 * t618 + t390 * t615;
t722 = t332 * t607;
t721 = t332 * t610;
t519 = pkin(4) * t572 - pkin(8) * t574;
t620 = qJD(4) ^ 2;
t368 = -qJDD(4) * pkin(4) - t620 * pkin(8) + t519 * t574 + t389;
t720 = t368 * t614;
t719 = t368 * t617;
t462 = t504 + t627;
t718 = t462 * t614;
t717 = t462 * t617;
t506 = -t726 * qJ(3) + qJDD(3) + t513 - t606;
t485 = -pkin(3) * t691 - t581 * pkin(7) + t506;
t716 = t485 * t615;
t715 = t485 * t618;
t714 = t506 * t616;
t713 = t506 * t619;
t524 = qJDD(4) + t535;
t712 = t524 * t615;
t711 = t524 * t618;
t682 = t607 * t610 * t726;
t555 = t607 * t680 - t616 * t682;
t710 = t555 * t608;
t709 = t555 * t611;
t708 = t563 * t614;
t707 = t563 * t617;
t703 = t610 * t616;
t702 = t616 * t556;
t701 = t619 * t556;
t369 = -pkin(4) * t620 + qJDD(4) * pkin(8) - t519 * t572 + t390;
t399 = (-t529 + t696) * pkin(8) + (-t527 + t695) * pkin(4) + t485;
t327 = t617 * t369 + t614 * t399;
t693 = qJDD(2) * t602;
t692 = qJDD(2) * t609;
t688 = t615 * t504;
t687 = t618 * t504;
t686 = t616 * t535;
t685 = t619 * t535;
t684 = t607 * t703;
t683 = -pkin(4) * t618 - pkin(3);
t681 = t607 * t691;
t677 = -t506 + t606;
t326 = t369 * t614 - t617 * t399;
t333 = t389 * t615 + t618 * t390;
t467 = t704 + ((-pkin(2) * qJD(2) + t725) * qJD(2) + t624) * t607;
t403 = t467 * t607 + t610 * t468;
t675 = t609 * t684;
t674 = t612 * t684;
t673 = t619 * t682;
t402 = t467 * t610 - t468 * t607;
t595 = t603 * qJDD(2);
t579 = t595 + t693;
t541 = t579 * t619 - t581 * t616;
t671 = pkin(6) * t541 + t402 * t616;
t584 = -t616 * t726 + t689;
t670 = -pkin(6) * t584 - t702;
t643 = t619 * t726 + t690;
t669 = -pkin(6) * t643 + t701;
t668 = t609 * t673;
t667 = t612 * t673;
t281 = t326 * t614 + t327 * t617;
t276 = t281 * t615 - t368 * t618;
t277 = t281 * t618 + t368 * t615;
t239 = -t276 * t607 + t277 * t610;
t280 = -t326 * t617 + t327 * t614;
t666 = t239 * t616 - t280 * t619;
t287 = t333 * t610 - t722;
t665 = t287 * t616 - t485 * t619;
t447 = -t510 - t481;
t375 = -t443 * t617 - t447 * t614;
t475 = t549 + t550;
t345 = t375 * t615 + t475 * t618;
t346 = t375 * t618 - t475 * t615;
t294 = -t345 * t607 + t346 * t610;
t373 = -t443 * t614 + t447 * t617;
t664 = t294 * t616 - t373 * t619;
t445 = (-qJD(5) - t563) * t553 - t676;
t376 = t445 * t617 - t446 * t614;
t502 = -t550 + t549;
t353 = t376 * t615 + t502 * t618;
t354 = t376 * t618 - t502 * t615;
t302 = -t353 * t607 + t354 * t610;
t374 = -t445 * t614 - t446 * t617;
t663 = t302 * t616 + t374 * t619;
t482 = -t562 - t549;
t410 = t482 * t617 - t740;
t357 = t410 * t615 + t445 * t618;
t358 = t410 * t618 - t445 * t615;
t306 = -t357 * t607 + t358 * t610;
t409 = t482 * t614 + t738;
t662 = t306 * t616 - t409 * t619;
t496 = -t550 - t562;
t418 = -t496 * t614 - t717;
t361 = t418 * t615 - t446 * t618;
t362 = t418 * t618 + t446 * t615;
t308 = -t361 * t607 + t362 * t610;
t417 = t496 * t617 - t718;
t661 = t308 * t616 - t417 * t619;
t509 = -t550 + t562;
t422 = -t509 * t614 + t738;
t364 = t422 * t615 + t447 * t618;
t366 = t422 * t618 - t447 * t615;
t313 = -t364 * t607 + t366 * t610;
t420 = -t509 * t617 - t740;
t660 = t313 * t616 + t420 * t619;
t508 = t549 - t562;
t423 = t508 * t617 - t718;
t365 = t423 * t615 + t443 * t618;
t367 = t423 * t618 - t443 * t615;
t314 = -t365 * t607 + t367 * t610;
t421 = -t508 * t614 - t717;
t659 = t314 * t616 + t421 * t619;
t480 = -qJD(5) * t553 - t676;
t438 = -t480 * t614 + t551 * t707;
t395 = t438 * t615 + t687;
t397 = t438 * t618 - t688;
t343 = -t395 * t607 + t397 * t610;
t437 = -t480 * t617 - t551 * t708;
t658 = t343 * t616 + t437 * t619;
t440 = t481 * t617 - t553 * t708;
t396 = t440 * t615 - t687;
t398 = t440 * t618 + t688;
t344 = -t396 * t607 + t398 * t610;
t439 = -t481 * t614 - t553 * t707;
t657 = t344 * t616 + t439 * t619;
t459 = (-t551 * t617 + t553 * t614) * t563;
t424 = t459 * t615 - t618 * t627;
t425 = t459 * t618 + t615 * t627;
t360 = -t424 * t607 + t425 * t610;
t458 = (t551 * t614 + t553 * t617) * t563;
t656 = t360 * t616 + t458 * t619;
t655 = t403 * t616 - t713;
t520 = -t620 - t564;
t469 = t520 * t615 + t737;
t470 = t520 * t618 - t739;
t408 = -t469 * t607 + t470 * t610;
t526 = t566 + 0.2e1 * t695;
t654 = t408 * t616 - t526 * t619;
t471 = -t566 * t615 - t618 * t729;
t473 = -t566 * t618 + t615 * t729;
t413 = -t471 * t607 + t473 * t610;
t503 = -t564 - t565;
t653 = t413 * t616 - t503 * t619;
t528 = t729 - 0.2e1 * t696;
t472 = -t526 * t615 + t528 * t618;
t474 = -t526 * t618 - t528 * t615;
t414 = -t472 * t607 + t474 * t610;
t534 = -t565 + t564;
t652 = t414 * t616 + t534 * t619;
t557 = t564 - t620;
t490 = t557 * t615 + t711;
t493 = t557 * t618 - t712;
t430 = -t490 * t607 + t493 * t610;
t651 = t430 * t616 + t566 * t619;
t558 = -t565 + t620;
t491 = t558 * t618 + t739;
t494 = -t558 * t615 + t737;
t431 = -t491 * t607 + t494 * t610;
t650 = t431 * t616 - t619 * t729;
t559 = -t565 - t620;
t492 = t559 * t618 - t712;
t495 = -t559 * t615 - t711;
t432 = -t492 * t607 + t495 * t610;
t649 = t432 * t616 - t528 * t619;
t464 = t513 * t619 - t514 * t616;
t570 = t643 * t612;
t648 = t570 * t611 + t584 * t608;
t532 = t570 * t608 - t584 * t611;
t647 = t579 * t616 + t581 * t619;
t580 = t595 - t693;
t582 = t596 - t697;
t646 = t580 * t616 + t582 * t619;
t511 = (-t572 * t615 - t574 * t618) * qJD(4);
t512 = (-t572 * t618 + t574 * t615) * qJD(4);
t457 = -t511 * t607 + t512 * t610;
t644 = -qJDD(4) * t619 + t457 * t616;
t497 = t527 * t618 + t615 * t696;
t498 = -t527 * t615 + t618 * t696;
t435 = -t497 * t607 + t498 * t610;
t642 = t435 * t616 + t685;
t499 = t529 * t615 + t618 * t695;
t500 = t529 * t618 - t615 * t695;
t436 = -t499 * t607 + t500 * t610;
t641 = t436 * t616 - t685;
t576 = t607 * t727;
t640 = t576 * t616 - t607 * t689;
t226 = pkin(7) * t277 + (-pkin(8) * t615 + t683) * t280;
t233 = -pkin(7) * t276 + (-pkin(8) * t618 + t724) * t280;
t238 = t276 * t610 + t277 * t607;
t214 = -qJ(3) * t238 - t226 * t607 + t233 * t610;
t223 = -pkin(2) * t238 - pkin(3) * t276 + pkin(4) * t368 - pkin(8) * t281;
t232 = t239 * t619 + t280 * t616;
t637 = pkin(6) * t232 + t214 * t616 + t223 * t619;
t278 = -pkin(8) * t373 - t280;
t247 = pkin(7) * t346 + t615 * t278 + t373 * t683;
t254 = -pkin(7) * t345 + t278 * t618 + t373 * t724;
t293 = t345 * t610 + t346 * t607;
t225 = -qJ(3) * t293 - t247 * t607 + t254 * t610;
t241 = -pkin(2) * t293 - pkin(3) * t345 - pkin(4) * t475 - pkin(8) * t375 - t281;
t279 = t294 * t619 + t373 * t616;
t636 = pkin(6) * t279 + t225 * t616 + t241 * t619;
t299 = -pkin(4) * t409 + t326;
t328 = -pkin(8) * t409 + t720;
t258 = -pkin(3) * t409 + pkin(7) * t358 + t299 * t618 + t328 * t615;
t265 = -pkin(7) * t357 - t299 * t615 + t328 * t618;
t305 = t357 * t610 + t358 * t607;
t229 = -qJ(3) * t305 - t258 * t607 + t265 * t610;
t261 = -pkin(2) * t305 - pkin(3) * t357 - pkin(4) * t445 - pkin(8) * t410 + t719;
t288 = t306 * t619 + t409 * t616;
t635 = pkin(6) * t288 + t229 * t616 + t261 * t619;
t300 = -pkin(4) * t417 + t327;
t329 = -pkin(8) * t417 + t719;
t259 = -pkin(3) * t417 + pkin(7) * t362 + t300 * t618 + t329 * t615;
t266 = -pkin(7) * t361 - t300 * t615 + t329 * t618;
t307 = t361 * t610 + t362 * t607;
t230 = -qJ(3) * t307 - t259 * t607 + t266 * t610;
t262 = -pkin(2) * t307 - pkin(3) * t361 + pkin(4) * t446 - pkin(8) * t418 - t720;
t289 = t308 * t619 + t417 * t616;
t634 = pkin(6) * t289 + t230 * t616 + t262 * t619;
t286 = t333 * t607 + t721;
t322 = -pkin(3) * t485 + pkin(7) * t333;
t253 = -pkin(7) * t721 - qJ(3) * t286 - t322 * t607;
t271 = -pkin(2) * t286 - pkin(3) * t332;
t282 = t287 * t619 + t485 * t616;
t633 = pkin(6) * t282 + t253 * t616 + t271 * t619;
t310 = -pkin(3) * t503 + pkin(7) * t473 + t333;
t321 = -pkin(7) * t471 - t332;
t411 = t471 * t610 + t473 * t607;
t274 = -qJ(3) * t411 - t310 * t607 + t321 * t610;
t372 = -pkin(2) * t411 - pkin(3) * t471;
t379 = t413 * t619 + t503 * t616;
t632 = pkin(6) * t379 + t274 * t616 + t372 * t619;
t392 = -pkin(3) * t526 + pkin(7) * t470 - t715;
t407 = t469 * t610 + t470 * t607;
t419 = -pkin(7) * t469 + t716;
t315 = -qJ(3) * t407 - t392 * t607 + t419 * t610;
t325 = -pkin(2) * t407 - pkin(3) * t469 + t389;
t385 = t408 * t619 + t526 * t616;
t631 = pkin(6) * t385 + t315 * t616 + t325 * t619;
t404 = -pkin(3) * t528 + pkin(7) * t495 + t716;
t426 = -pkin(7) * t492 + t715;
t429 = t492 * t610 + t495 * t607;
t324 = -qJ(3) * t429 - t404 * t607 + t426 * t610;
t334 = -pkin(2) * t429 - pkin(3) * t492 + t390;
t400 = t432 * t619 + t528 * t616;
t630 = pkin(6) * t400 + t324 * t616 + t334 * t619;
t629 = -pkin(6) * t547 + t467 * t619 + t607 * t714;
t546 = t576 * t619 + t607 * t690;
t628 = pkin(6) * t546 + t468 * t619 + t506 * t703;
t377 = t403 * t619 + t714;
t626 = pkin(6) * t377 - (-pkin(2) * t619 - qJ(3) * t616) * t402;
t571 = t584 * t612;
t569 = t584 * t609;
t568 = t643 * t609;
t542 = t580 * t619 - t582 * t616;
t538 = t640 * t612;
t536 = t640 * t609;
t533 = -t571 * t608 - t611 * t643;
t531 = t571 * t611 - t608 * t643;
t522 = t647 * t612;
t521 = t647 * t609;
t517 = -t667 + (-t603 * t609 - t674) * qJDD(2);
t516 = t667 + (-t602 * t609 + t674) * qJDD(2);
t507 = -0.2e1 * t609 * t681 + t612 * t646;
t488 = -t538 * t608 + t546 * t611;
t486 = t538 * t611 + t546 * t608;
t484 = -t701 + (t568 * t609 + t570 * t612) * pkin(6);
t483 = -t702 + (-t569 * t609 - t571 * t612) * pkin(6);
t479 = -t522 * t608 + t541 * t611;
t478 = t522 * t611 + t541 * t608;
t477 = -qJ(3) * t577 + t610 * t677;
t476 = qJ(3) * t576 - t607 * t677;
t460 = t465 * t612;
t456 = t511 * t610 + t512 * t607;
t451 = qJDD(4) * t616 + t457 * t619;
t450 = -pkin(1) * t569 + t609 * t513 + t612 * t669;
t449 = pkin(1) * t568 + t609 * t514 + t612 * t670;
t442 = -t464 * t612 + t609 * t556;
t441 = -t464 * t609 - t612 * t556;
t434 = t499 * t610 + t500 * t607;
t433 = t497 * t610 + t498 * t607;
t428 = t491 * t610 + t494 * t607;
t427 = t490 * t610 + t493 * t607;
t416 = t431 * t619 + t616 * t729;
t415 = t430 * t619 - t566 * t616;
t412 = t472 * t610 + t474 * t607;
t406 = t436 * t619 + t686;
t405 = t435 * t619 - t686;
t391 = pkin(2) * t581 + qJ(3) * t579 + t403;
t387 = t414 * t619 - t534 * t616;
t386 = -t609 * t456 + t612 * t644;
t384 = -pkin(1) * t441 + t612 * t723;
t383 = -t442 * t608 + t465 * t611;
t382 = t442 * t611 + t465 * t608;
t381 = t610 * t713 - t468 * t616 + (-t536 * t609 - t538 * t612) * pkin(6);
t380 = t607 * t713 - t616 * t467 + (-t537 * t609 - t612 * t731) * pkin(6);
t378 = -pkin(2) * t506 + qJ(3) * t403;
t371 = (-t441 * t609 - t442 * t612) * pkin(6);
t370 = t619 * t402 + (-t521 * t609 - t522 * t612) * pkin(6);
t359 = t424 * t610 + t425 * t607;
t356 = -pkin(1) * t536 - t476 * t609 + t612 * t628;
t355 = -pkin(1) * t537 - t477 * t609 + t612 * t629;
t352 = -t609 * t428 + t612 * t650;
t351 = -t609 * t427 + t612 * t651;
t350 = -t609 * t434 + t612 * t641;
t349 = -t609 * t433 + t612 * t642;
t348 = -t609 * t429 + t612 * t649;
t347 = t612 * t429 + t609 * t649;
t342 = t396 * t610 + t398 * t607;
t341 = t395 * t610 + t397 * t607;
t340 = -t609 * t412 + t612 * t652;
t339 = t360 * t619 - t458 * t616;
t338 = -t609 * t407 + t612 * t654;
t337 = t612 * t407 + t609 * t654;
t336 = -t609 * t411 + t612 * t653;
t335 = t612 * t411 + t609 * t653;
t331 = t402 * t609 + t612 * t655;
t330 = -t402 * t612 + t609 * t655;
t323 = -pkin(1) * t521 - t609 * t391 + t612 * t671;
t320 = -pkin(2) * t528 + qJ(3) * t432 + t404 * t610 + t426 * t607;
t319 = t344 * t619 - t439 * t616;
t318 = t343 * t619 - t437 * t616;
t317 = -t348 * t608 + t400 * t611;
t316 = t348 * t611 + t400 * t608;
t312 = t365 * t610 + t367 * t607;
t311 = t364 * t610 + t366 * t607;
t309 = -pkin(2) * t526 + qJ(3) * t408 + t392 * t610 + t419 * t607;
t304 = -t338 * t608 + t385 * t611;
t303 = t338 * t611 + t385 * t608;
t301 = t353 * t610 + t354 * t607;
t298 = -t336 * t608 + t379 * t611;
t297 = t336 * t611 + t379 * t608;
t296 = -t331 * t608 + t377 * t611;
t295 = t331 * t611 + t377 * t608;
t292 = -t609 * t359 + t612 * t656;
t291 = t314 * t619 - t421 * t616;
t290 = t313 * t619 - t420 * t616;
t285 = t302 * t619 - t374 * t616;
t284 = -t609 * t342 + t612 * t657;
t283 = -t609 * t341 + t612 * t658;
t275 = -(pkin(2) * t616 - qJ(3) * t619) * t402 + (-t330 * t609 - t331 * t612) * pkin(6);
t273 = -t609 * t312 + t612 * t659;
t272 = -t609 * t311 + t612 * t660;
t270 = -pkin(1) * t330 - t378 * t609 + t612 * t626;
t269 = -pkin(2) * t503 + qJ(3) * t413 + t310 * t610 + t321 * t607;
t268 = -t609 * t307 + t612 * t661;
t267 = t612 * t307 + t609 * t661;
t264 = -t609 * t305 + t612 * t662;
t263 = t612 * t305 + t609 * t662;
t260 = -t609 * t301 + t612 * t663;
t257 = t619 * t324 - t616 * t334 + (-t347 * t609 - t348 * t612) * pkin(6);
t256 = -t609 * t293 + t612 * t664;
t255 = t612 * t293 + t609 * t664;
t252 = -t609 * t286 + t612 * t665;
t251 = t612 * t286 + t609 * t665;
t250 = t619 * t315 - t616 * t325 + (-t337 * t609 - t338 * t612) * pkin(6);
t249 = -pkin(2) * t485 - pkin(7) * t722 + qJ(3) * t287 + t322 * t610;
t248 = -pkin(1) * t347 - t320 * t609 + t612 * t630;
t246 = -t268 * t608 + t289 * t611;
t245 = t268 * t611 + t289 * t608;
t244 = -t264 * t608 + t288 * t611;
t243 = t264 * t611 + t288 * t608;
t242 = -pkin(1) * t337 - t309 * t609 + t612 * t631;
t240 = t619 * t274 - t616 * t372 + (-t335 * t609 - t336 * t612) * pkin(6);
t237 = -t256 * t608 + t279 * t611;
t236 = t256 * t611 + t279 * t608;
t235 = -t252 * t608 + t282 * t611;
t234 = t252 * t611 + t282 * t608;
t231 = -pkin(1) * t335 - t269 * t609 + t612 * t632;
t228 = -pkin(2) * t417 + qJ(3) * t308 + t259 * t610 + t266 * t607;
t227 = -pkin(2) * t409 + qJ(3) * t306 + t258 * t610 + t265 * t607;
t224 = -pkin(2) * t373 + qJ(3) * t294 + t247 * t610 + t254 * t607;
t222 = -t609 * t238 + t612 * t666;
t221 = t612 * t238 + t609 * t666;
t220 = t619 * t253 - t616 * t271 + (-t251 * t609 - t252 * t612) * pkin(6);
t219 = -pkin(1) * t251 - t249 * t609 + t612 * t633;
t218 = t619 * t230 - t616 * t262 + (-t267 * t609 - t268 * t612) * pkin(6);
t217 = t619 * t229 - t616 * t261 + (-t263 * t609 - t264 * t612) * pkin(6);
t216 = -t222 * t608 + t232 * t611;
t215 = t222 * t611 + t232 * t608;
t213 = t619 * t225 - t616 * t241 + (-t255 * t609 - t256 * t612) * pkin(6);
t212 = -pkin(2) * t280 + qJ(3) * t239 + t226 * t610 + t233 * t607;
t211 = -pkin(1) * t267 - t228 * t609 + t612 * t634;
t210 = -pkin(1) * t263 - t227 * t609 + t612 * t635;
t209 = -pkin(1) * t255 - t224 * t609 + t612 * t636;
t208 = t619 * t214 - t616 * t223 + (-t221 * t609 - t222 * t612) * pkin(6);
t207 = -pkin(1) * t221 - t212 * t609 + t612 * t637;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t544, 0, 0, 0, 0, 0, 0, t533, t532, 0, t383, 0, 0, 0, 0, 0, 0, -t735, t488, t479, t296, 0, 0, 0, 0, 0, 0, t304, t317, t298, t235, 0, 0, 0, 0, 0, 0, t244, t246, t237, t216; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t543, 0, 0, 0, 0, 0, 0, t531, -t648, 0, t382, 0, 0, 0, 0, 0, 0, -t734, t486, t478, t295, 0, 0, 0, 0, 0, 0, t303, t316, t297, t234, 0, 0, 0, 0, 0, 0, t243, t245, t236, t215; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t699, 0, 0, 0, 0, 0, 0, t569, -t568, 0, t441, 0, 0, 0, 0, 0, 0, t537, t536, t521, t330, 0, 0, 0, 0, 0, 0, t337, t347, t335, t251, 0, 0, 0, 0, 0, 0, t263, t267, t255, t221; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t733, -t732, -t543, -qJ(1) * t543, 0, 0, -t532, 0, t533, t608 * t692, -qJ(1) * t531 - t450 * t608 + t483 * t611, qJ(1) * t648 - t449 * t608 + t484 * t611, -t460 * t608 + t464 * t611, -qJ(1) * t382 + t371 * t611 - t384 * t608, -t516 * t608 + t709, -t507 * t608 + t542 * t611, t488, -t517 * t608 - t709, t735, 0, qJ(1) * t734 - t355 * t608 + t380 * t611, -qJ(1) * t486 - t356 * t608 + t381 * t611, -qJ(1) * t478 - t323 * t608 + t370 * t611, -qJ(1) * t295 - t270 * t608 + t275 * t611, -t350 * t608 + t406 * t611, -t340 * t608 + t387 * t611, -t352 * t608 + t416 * t611, -t349 * t608 + t405 * t611, -t351 * t608 + t415 * t611, -t386 * t608 + t451 * t611, -qJ(1) * t303 - t242 * t608 + t250 * t611, -qJ(1) * t316 - t248 * t608 + t257 * t611, -qJ(1) * t297 - t231 * t608 + t240 * t611, -qJ(1) * t234 - t219 * t608 + t220 * t611, -t284 * t608 + t319 * t611, -t260 * t608 + t285 * t611, -t272 * t608 + t290 * t611, -t283 * t608 + t318 * t611, -t273 * t608 + t291 * t611, -t292 * t608 + t339 * t611, -qJ(1) * t243 - t210 * t608 + t217 * t611, -qJ(1) * t245 - t211 * t608 + t218 * t611, -qJ(1) * t236 - t209 * t608 + t213 * t611, -qJ(1) * t215 - t207 * t608 + t208 * t611; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t732, -t733, t544, qJ(1) * t544, 0, 0, t648, 0, t531, -t611 * t692, qJ(1) * t533 + t450 * t611 + t483 * t608, qJ(1) * t532 + t449 * t611 + t484 * t608, t460 * t611 + t464 * t608, qJ(1) * t383 + t371 * t608 + t384 * t611, t516 * t611 + t710, t507 * t611 + t542 * t608, t486, t517 * t611 - t710, t734, 0, -qJ(1) * t735 + t355 * t611 + t380 * t608, qJ(1) * t488 + t356 * t611 + t381 * t608, qJ(1) * t479 + t323 * t611 + t370 * t608, qJ(1) * t296 + t270 * t611 + t275 * t608, t350 * t611 + t406 * t608, t340 * t611 + t387 * t608, t352 * t611 + t416 * t608, t349 * t611 + t405 * t608, t351 * t611 + t415 * t608, t386 * t611 + t451 * t608, qJ(1) * t304 + t242 * t611 + t250 * t608, qJ(1) * t317 + t248 * t611 + t257 * t608, qJ(1) * t298 + t231 * t611 + t240 * t608, qJ(1) * t235 + t219 * t611 + t220 * t608, t284 * t611 + t319 * t608, t260 * t611 + t285 * t608, t272 * t611 + t290 * t608, t283 * t611 + t318 * t608, t273 * t611 + t291 * t608, t292 * t611 + t339 * t608, qJ(1) * t244 + t210 * t611 + t217 * t608, qJ(1) * t246 + t211 * t611 + t218 * t608, qJ(1) * t237 + t209 * t611 + t213 * t608, qJ(1) * t216 + t207 * t611 + t208 * t608; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t679, t586, 0, 0, 0, 0, t568, 0, t569, t612 * qJDD(2), pkin(1) * t571 - t612 * t513 + t609 * t669, -pkin(1) * t570 - t612 * t514 + t609 * t670, t465 * t609, pkin(1) * t442 + t609 * t723, t668 + (t602 * t612 + t675) * qJDD(2), t609 * t646 + 0.2e1 * t612 * t681, t536, -t668 + (t603 * t612 - t675) * qJDD(2), -t537, 0, pkin(1) * t731 + t477 * t612 + t609 * t629, pkin(1) * t538 + t476 * t612 + t609 * t628, pkin(1) * t522 + t612 * t391 + t609 * t671, pkin(1) * t331 + t378 * t612 + t609 * t626, t612 * t434 + t609 * t641, t612 * t412 + t609 * t652, t612 * t428 + t609 * t650, t612 * t433 + t609 * t642, t612 * t427 + t609 * t651, t612 * t456 + t609 * t644, pkin(1) * t338 + t309 * t612 + t609 * t631, pkin(1) * t348 + t320 * t612 + t609 * t630, pkin(1) * t336 + t269 * t612 + t609 * t632, pkin(1) * t252 + t249 * t612 + t609 * t633, t612 * t342 + t609 * t657, t612 * t301 + t609 * t663, t612 * t311 + t609 * t660, t612 * t341 + t609 * t658, t612 * t312 + t609 * t659, t612 * t359 + t609 * t656, pkin(1) * t264 + t227 * t612 + t609 * t635, pkin(1) * t268 + t228 * t612 + t609 * t634, pkin(1) * t256 + t224 * t612 + t609 * t636, pkin(1) * t222 + t212 * t612 + t609 * t637;];
tauB_reg = t1;
