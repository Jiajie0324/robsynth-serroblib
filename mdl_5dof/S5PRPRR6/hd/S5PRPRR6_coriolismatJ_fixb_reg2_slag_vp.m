% Calculate inertial parameters regressor of coriolis matrix for
% S5PRPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d4,d5,theta1,theta3]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:58
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PRPRR6_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRR6_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRR6_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5PRPRR6_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:58:00
% EndTime: 2019-12-05 15:58:07
% DurationCPUTime: 3.68s
% Computational Cost: add. (4601->281), mult. (11018->437), div. (0->0), fcn. (12705->10), ass. (0->232)
t241 = sin(pkin(10));
t379 = cos(qJ(4));
t305 = t379 * t241;
t243 = cos(pkin(10));
t245 = sin(qJ(4));
t340 = t245 * t243;
t219 = t305 + t340;
t242 = sin(pkin(5));
t248 = cos(qJ(2));
t347 = t242 * t248;
t185 = t219 * t347;
t247 = cos(qJ(5));
t304 = t379 * t243;
t341 = t245 * t241;
t262 = t304 - t341;
t186 = t262 * t347;
t244 = sin(qJ(5));
t343 = t244 * t186;
t246 = sin(qJ(2));
t348 = t242 * t246;
t153 = t247 * t348 - t343;
t306 = t244 * t348;
t336 = t247 * t186;
t154 = t306 + t336;
t383 = t154 * t247 / 0.2e1 - t153 * t244 / 0.2e1;
t387 = t383 * pkin(8) - t185 * pkin(4) / 0.2e1;
t342 = t244 * t247;
t288 = 0.2e1 * t219 * t342;
t370 = cos(pkin(5));
t255 = t241 * t348 - t370 * t243;
t386 = t255 * t241;
t214 = t262 ^ 2;
t215 = t219 ^ 2;
t385 = -t215 - t214;
t308 = t215 - t214;
t294 = t348 / 0.2e1;
t208 = t370 * t241 + t243 * t348;
t150 = t245 * t208 + t379 * t255;
t363 = t150 * t219;
t295 = t363 / 0.2e1;
t384 = t295 + t294;
t151 = t379 * t208 - t245 * t255;
t346 = t244 * t151;
t124 = t247 * t347 + t346;
t382 = -t124 / 0.2e1;
t339 = t247 * t151;
t125 = -t244 * t347 + t339;
t381 = t125 / 0.2e1;
t240 = t247 ^ 2;
t380 = -t240 / 0.2e1;
t377 = t262 * pkin(8);
t376 = t219 * pkin(4);
t375 = pkin(7) + qJ(3);
t236 = -t243 * pkin(3) - pkin(2);
t284 = -pkin(4) * t262 - t219 * pkin(8);
t254 = t236 + t284;
t228 = t375 * t243;
t291 = t375 * t241;
t183 = t379 * t228 - t245 * t291;
t344 = t244 * t183;
t84 = -t247 * t254 + t344;
t374 = t244 * t84;
t337 = t247 * t183;
t85 = t244 * t254 + t337;
t373 = t85 * t247;
t176 = t376 - t377;
t338 = t247 * t176;
t182 = t245 * t228 + t379 * t291;
t356 = t182 * t244;
t98 = t338 + t356;
t372 = t98 * t247;
t345 = t244 * t176;
t355 = t182 * t247;
t99 = t345 - t355;
t371 = t99 * t244;
t365 = t125 * t247;
t367 = t124 * t244;
t12 = (t151 - t365 - t367) * t150;
t369 = t12 * qJD(1);
t368 = t124 * t262;
t366 = t125 * t262;
t364 = t150 * t185;
t362 = t151 * t262;
t360 = t153 * t247;
t359 = t154 * t244;
t357 = t182 * t219;
t354 = t185 * t182;
t353 = t185 * t244;
t352 = t185 * t247;
t19 = -t124 * t153 + t125 * t154 + t364;
t351 = t19 * qJD(1);
t350 = t208 * t243;
t349 = t219 * t247;
t163 = t244 * t219;
t239 = t244 ^ 2;
t252 = -(t380 - t239 / 0.2e1) * t377 - t376 / 0.2e1;
t270 = -t372 / 0.2e1 - t371 / 0.2e1;
t26 = t252 + t270;
t335 = t26 * qJD(2);
t229 = t242 ^ 2 * t246 * t248;
t43 = t151 * t186 - t229 + t364;
t334 = t43 * qJD(1);
t230 = t241 ^ 2 + t243 ^ 2;
t234 = t240 - t239;
t333 = qJD(2) * t242;
t332 = qJD(3) * t247;
t331 = qJD(4) * t247;
t330 = qJD(5) * t244;
t329 = qJD(5) * t247;
t100 = -t229 + (t350 + t386) * t347;
t328 = t100 * qJD(1);
t128 = t308 * t244;
t327 = t128 * qJD(2);
t129 = t385 * t244;
t326 = t129 * qJD(2);
t130 = t308 * t247;
t325 = t130 * qJD(2);
t213 = t305 / 0.2e1 + t340 / 0.2e1;
t131 = (t219 / 0.2e1 - t213) * t347;
t324 = t131 * qJD(1);
t258 = -t304 / 0.2e1 + t341 / 0.2e1;
t132 = (t262 / 0.2e1 + t258) * t347;
t323 = t132 * qJD(1);
t322 = t308 * qJD(2);
t321 = t151 * qJD(4);
t160 = (t239 / 0.2e1 + t380) * t219;
t320 = t160 * qJD(5);
t161 = t244 * t262;
t319 = t161 * qJD(2);
t318 = t163 * qJD(2);
t166 = t247 * t262;
t317 = t166 * qJD(2);
t209 = t239 * t262;
t210 = t240 * t262;
t169 = -t209 - t210;
t316 = t169 * qJD(2);
t171 = t385 * t247;
t315 = t171 * qJD(2);
t314 = t385 * qJD(2);
t313 = t213 * qJD(2);
t312 = t262 * qJD(2);
t212 = t262 * qJD(4);
t311 = t219 * qJD(2);
t310 = t219 * qJD(4);
t309 = t230 * qJD(2);
t303 = t262 * t329;
t302 = t262 * t311;
t301 = t262 * t310;
t300 = t246 * t333;
t299 = t244 * t329;
t298 = t244 * t331;
t297 = t247 * t311;
t296 = -t363 / 0.2e1;
t293 = -t343 / 0.2e1;
t292 = -t336 / 0.2e1;
t290 = t230 * t248;
t289 = (-t239 - t240) * t150;
t287 = qJD(2) * t236 + qJD(3);
t286 = -qJD(5) + t312;
t285 = t215 * t299;
t283 = qJD(4) * t288;
t249 = (-t373 / 0.2e1 - t374 / 0.2e1 + t183 / 0.2e1) * t150 + t98 * t382 + t99 * t381 + t151 * t182 / 0.2e1;
t2 = t249 - t387;
t6 = t182 * t183 - t84 * t98 + t85 * t99;
t282 = t2 * qJD(1) + t6 * qJD(2);
t281 = -t98 * t244 + t99 * t247;
t253 = (t244 * t381 + t247 * t382) * t262;
t21 = -t253 - t383;
t5 = (t371 + t372) * t219 - (-t85 * t244 + t247 * t84) * t262;
t280 = t21 * qJD(1) - t5 * qJD(2);
t251 = -(-t365 / 0.2e1 - t367 / 0.2e1) * t262 + t295;
t265 = -t360 / 0.2e1 - t359 / 0.2e1;
t10 = t251 + t265;
t24 = t357 - (-t373 - t374) * t262;
t279 = -qJD(1) * t10 - qJD(2) * t24;
t267 = (t382 + t346 / 0.2e1) * t219;
t13 = t352 / 0.2e1 + t267;
t17 = (-t84 + t344) * t219 - (t98 - t356) * t262;
t278 = t13 * qJD(1) + t17 * qJD(2);
t266 = (-t125 / 0.2e1 + t339 / 0.2e1) * t219;
t16 = -t353 / 0.2e1 + t266;
t18 = (-t85 + t337) * t219 - (-t99 - t355) * t262;
t277 = t16 * qJD(1) + t18 * qJD(2);
t263 = t294 + t296;
t30 = t293 - t366 / 0.2e1 + t263 * t247;
t49 = t182 * t349 + t262 * t85;
t276 = t30 * qJD(1) - t49 * qJD(2);
t31 = t292 + t368 / 0.2e1 - t263 * t244;
t48 = -t182 * t163 - t262 * t84;
t275 = -t31 * qJD(1) + t48 * qJD(2);
t57 = -t362 / 0.2e1 + t263;
t71 = t183 * t262 + t357;
t274 = qJD(1) * t57 - qJD(2) * t71;
t273 = t286 * t247;
t250 = t350 / 0.2e1 + t386 / 0.2e1;
t126 = t294 - t250;
t225 = t230 * qJ(3);
t272 = t126 * qJD(1) - t225 * qJD(2);
t271 = -t377 / 0.2e1 + t376 / 0.2e1;
t259 = t176 / 0.2e1 + t271;
t46 = t259 * t247;
t269 = pkin(4) * t244 * qJD(4) + t46 * qJD(2);
t44 = t259 * t244;
t268 = pkin(4) * t331 - t44 * qJD(2);
t261 = t219 * t273;
t136 = -t160 * qJD(2) + t298;
t260 = t213 * qJD(5) - t302;
t103 = t215 * qJD(2) * t342 + t160 * qJD(4);
t170 = t234 * t215;
t257 = t170 * qJD(2) + t283;
t256 = qJD(2) * t288 - t234 * qJD(4);
t207 = t213 * qJD(4);
t206 = t247 * t310;
t157 = t161 * qJD(5);
t144 = t319 - t330;
t134 = (-t219 / 0.2e1 - t213) * t347;
t133 = (-t262 / 0.2e1 + t258) * t347;
t127 = t294 + t250;
t70 = t150 * t247;
t69 = t150 * t244;
t58 = t362 / 0.2e1 + t384;
t47 = t356 + t338 / 0.2e1 - t271 * t247;
t45 = t355 - t345 / 0.2e1 + t271 * t244;
t33 = t366 / 0.2e1 + t293 + t384 * t247;
t32 = -t368 / 0.2e1 + t244 * t296 + t292 - t306 / 0.2e1;
t27 = t252 - t270;
t20 = -t253 + t383;
t15 = t353 / 0.2e1 + t266;
t14 = -t352 / 0.2e1 + t267;
t9 = t251 - t265;
t1 = t249 + t387;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t43, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t19 + qJD(4) * t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t300, -t248 * t333, 0, 0, 0, 0, 0, 0, 0, 0, -t243 * t300, t241 * t300, t290 * t333, t328 + t127 * qJD(3) + (-pkin(2) * t246 + qJ(3) * t290) * t333, 0, 0, 0, 0, 0, 0, t134 * qJD(4) - t262 * t300, t133 * qJD(4) + t219 * t300, (t185 * t219 + t186 * t262) * qJD(2), t334 + (t186 * t183 + t236 * t348 + t354) * qJD(2) + t58 * qJD(3), 0, 0, 0, 0, 0, 0, (-t153 * t262 + t163 * t185) * qJD(2) + t14 * qJD(4) + t33 * qJD(5), (t154 * t262 + t185 * t349) * qJD(2) + t15 * qJD(4) + t32 * qJD(5), t20 * qJD(4) + (-t359 - t360) * t311, t351 + (-t153 * t84 + t154 * t85 + t354) * qJD(2) + t9 * qJD(3) + t1 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t127 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t58 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t134 * qJD(2) - t321, t133 * qJD(2) + t150 * qJD(4), 0, 0, 0, 0, 0, 0, 0, 0, t14 * qJD(2) + t69 * qJD(5) - t247 * t321, t15 * qJD(2) + t70 * qJD(5) + t244 * t321, t20 * qJD(2) + qJD(4) * t289, t369 + t1 * qJD(2) + (-t151 * pkin(4) + pkin(8) * t289) * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t33 + qJD(4) * t69 - qJD(5) * t125, qJD(2) * t32 + qJD(4) * t70 + qJD(5) * t124, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3) * t126 - t328, 0, 0, 0, 0, 0, 0, -t131 * qJD(4), -t132 * qJD(4), 0, -qJD(3) * t57 - t334, 0, 0, 0, 0, 0, 0, qJD(4) * t13 - qJD(5) * t30, qJD(4) * t16 - qJD(5) * t31, qJD(4) * t21, qJD(3) * t10 + qJD(4) * t2 - t351; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t230 * qJD(3), t225 * qJD(3), t301, -t308 * qJD(4), 0, -t301, 0, 0, t236 * t310, t236 * t212, -t385 * qJD(3), qJD(3) * t71, t240 * t301 - t285, -t170 * qJD(5) - t262 * t283, t219 * t262 * t330 + t130 * qJD(4), t239 * t301 + t285, -t128 * qJD(4) + t219 * t303, -t301, -t129 * qJD(3) + t17 * qJD(4) + t49 * qJD(5), -t171 * qJD(3) + t18 * qJD(4) + t48 * qJD(5), -qJD(4) * t5, qJD(3) * t24 + qJD(4) * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t309, -t272, 0, 0, 0, 0, 0, 0, 0, 0, -t314, -t274, 0, 0, 0, 0, 0, 0, -t326, -t315, 0, qJD(4) * t27 - t279; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t302, -t322, t212, -t302, -t310, 0, -t183 * qJD(4) + t236 * t311 - t324, t182 * qJD(4) + t236 * t312 - t323, 0, 0, -t320 - (-t240 * t311 - t298) * t262, (-t209 + t210) * qJD(4) + (-qJD(5) - t312) * t288, t244 * t310 + t325, t320 - (-t239 * t311 + t298) * t262, t206 - t327, t260, (t244 * t284 - t337) * qJD(4) + t47 * qJD(5) + t278, (t247 * t284 + t344) * qJD(4) + t45 * qJD(5) + t277, qJD(4) * t281 + t280, t27 * qJD(3) + (-t183 * pkin(4) + pkin(8) * t281) * qJD(4) + t282; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t103, -t257, t286 * t163, t103, t261, t207, t47 * qJD(4) - t85 * qJD(5) - t276, qJD(4) * t45 + qJD(5) * t84 + t275, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t126 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t57 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(2) * t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t309, t272, 0, 0, 0, 0, 0, 0, t310, t212, t314, t274, 0, 0, 0, 0, 0, 0, t157 + t206 + t326, -t163 * qJD(4) + t303 + t315, t169 * qJD(4), -qJD(4) * t26 + t279; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t311, t312, 0, 0, 0, 0, 0, 0, 0, 0, t297, -t318, t316, -t335; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t144, t273, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t131 * qJD(2), t132 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, -qJD(2) * t13, -qJD(2) * t16, -qJD(2) * t21, -qJD(2) * t2 - t369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t302, t322, 0, t302, 0, 0, -t287 * t219 + t324, -t262 * t287 + t323, 0, 0, -t240 * t302 - t320, 0.2e1 * t244 * t261, -t166 * qJD(5) - t325, -t239 * t302 + t320, t157 + t327, -t260, -t46 * qJD(5) - t219 * t332 - t278, t163 * qJD(3) + t44 * qJD(5) - t277, -t169 * qJD(3) - t280, qJD(3) * t26 - t282; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t311, -t312, 0, 0, 0, 0, 0, 0, 0, 0, -t297, t318, -t316, t335; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t299, t234 * qJD(5), 0, -t299, 0, 0, -pkin(4) * t330, -pkin(4) * t329, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t136, -t256, -t317 + t329, -t136, t144, -t313, -pkin(8) * t329 - t269, pkin(8) * t330 - t268, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t30, qJD(2) * t31, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t103, t257, t166 * qJD(4) - t244 * t302, -t103, -t161 * qJD(4) - t262 * t297, t207, -t161 * qJD(3) + t46 * qJD(4) + t276, -t44 * qJD(4) - t262 * t332 - t275, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t319, -t247 * t312, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t136, t256, t317, t136, -t319, t313, t269, t268, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t3;
