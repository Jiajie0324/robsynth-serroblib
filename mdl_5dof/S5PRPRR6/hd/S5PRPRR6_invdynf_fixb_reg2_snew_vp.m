% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRPRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d4,d5,theta1,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:58
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRPRR6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRR6_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRR6_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRR6_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRR6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5PRPRR6_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:58:36
% EndTime: 2019-12-05 15:58:39
% DurationCPUTime: 3.38s
% Computational Cost: add. (14301->218), mult. (31936->347), div. (0->0), fcn. (24638->12), ass. (0->192)
t1469 = sin(pkin(9));
t1472 = cos(pkin(9));
t1450 = -t1472 * g(1) - t1469 * g(2);
t1477 = sin(qJ(2));
t1480 = cos(qJ(2));
t1470 = sin(pkin(5));
t1473 = cos(pkin(5));
t1507 = t1469 * g(1) - t1472 * g(2);
t1525 = -g(3) + qJDD(1);
t1533 = t1470 * t1525 + t1473 * t1507;
t1407 = t1480 * t1450 + t1533 * t1477;
t1482 = qJD(2) ^ 2;
t1534 = -t1482 * pkin(2) + qJDD(2) * qJ(3) + (2 * qJD(3) * qJD(2)) + t1407;
t1468 = sin(pkin(10));
t1463 = t1468 ^ 2;
t1471 = cos(pkin(10));
t1464 = t1471 ^ 2;
t1514 = t1463 + t1464;
t1447 = t1514 * t1482;
t1476 = sin(qJ(4));
t1479 = cos(qJ(4));
t1438 = (t1468 * t1476 - t1471 * t1479) * qJD(2);
t1432 = qJD(5) + t1438;
t1532 = qJD(5) + t1432;
t1493 = t1468 * t1479 + t1471 * t1476;
t1531 = t1493 * qJDD(2);
t1440 = t1493 * qJD(2);
t1475 = sin(qJ(5));
t1478 = cos(qJ(5));
t1424 = -t1478 * qJD(4) + t1475 * t1440;
t1530 = t1424 ^ 2;
t1426 = t1475 * qJD(4) + t1478 * t1440;
t1529 = t1426 ^ 2;
t1528 = t1432 ^ 2;
t1527 = t1438 ^ 2;
t1526 = t1440 ^ 2;
t1523 = t1426 * t1424;
t1522 = t1438 * qJD(4);
t1521 = t1440 * qJD(4);
t1520 = t1440 * t1438;
t1519 = t1463 * t1482;
t1518 = t1464 * t1482;
t1428 = -t1470 * t1507 + t1473 * t1525;
t1517 = t1471 * t1428;
t1516 = t1471 * t1482;
t1515 = qJD(5) - t1432;
t1389 = t1468 * t1428 + t1534 * t1471;
t1460 = t1471 * qJDD(2);
t1384 = -pkin(3) * t1518 + pkin(7) * t1460 + t1389;
t1485 = t1517 + (pkin(3) * t1516 - qJDD(2) * pkin(7) - t1534) * t1468;
t1360 = t1479 * t1384 + t1476 * t1485;
t1513 = t1468 * qJDD(2);
t1512 = t1477 * qJDD(2);
t1511 = t1480 * qJDD(2);
t1359 = -t1476 * t1384 + t1479 * t1485;
t1416 = t1531 - t1522;
t1508 = t1478 * qJDD(4) - t1475 * t1416;
t1506 = t1477 * t1450 - t1533 * t1480;
t1505 = -t1479 * t1460 + t1476 * t1513;
t1408 = t1438 * pkin(4) - t1440 * pkin(8);
t1481 = qJD(4) ^ 2;
t1353 = -t1481 * pkin(4) + qJDD(4) * pkin(8) - t1438 * t1408 + t1360;
t1403 = -qJDD(2) * pkin(2) - t1482 * qJ(3) + qJDD(3) + t1506;
t1396 = -pkin(3) * t1460 + t1403 + (-t1518 - t1519) * pkin(7);
t1414 = t1505 + 0.2e1 * t1521;
t1361 = (-t1416 + t1522) * pkin(8) + t1414 * pkin(4) + t1396;
t1334 = -t1475 * t1353 + t1478 * t1361;
t1335 = t1478 * t1353 + t1475 * t1361;
t1322 = -t1475 * t1334 + t1478 * t1335;
t1352 = -qJDD(4) * pkin(4) - t1481 * pkin(8) + t1440 * t1408 - t1359;
t1318 = t1476 * t1322 - t1479 * t1352;
t1319 = t1479 * t1322 + t1476 * t1352;
t1309 = -t1468 * t1318 + t1471 * t1319;
t1321 = t1478 * t1334 + t1475 * t1335;
t1504 = t1309 * t1477 - t1321 * t1480;
t1338 = t1479 * t1359 + t1476 * t1360;
t1339 = -t1476 * t1359 + t1479 * t1360;
t1325 = -t1468 * t1338 + t1471 * t1339;
t1503 = t1325 * t1477 - t1396 * t1480;
t1378 = -t1515 * t1426 + t1508;
t1491 = -t1475 * qJDD(4) - t1478 * t1416;
t1380 = t1515 * t1424 + t1491;
t1355 = t1478 * t1378 - t1475 * t1380;
t1394 = -t1529 - t1530;
t1344 = t1476 * t1355 - t1479 * t1394;
t1345 = t1479 * t1355 + t1476 * t1394;
t1329 = -t1468 * t1344 + t1471 * t1345;
t1354 = t1475 * t1378 + t1478 * t1380;
t1502 = t1329 * t1477 - t1354 * t1480;
t1486 = -qJDD(5) - t1505 - t1521;
t1385 = -t1486 - t1523;
t1395 = -t1528 - t1530;
t1368 = -t1475 * t1385 + t1478 * t1395;
t1377 = t1532 * t1426 - t1508;
t1348 = t1476 * t1368 - t1479 * t1377;
t1349 = t1479 * t1368 + t1476 * t1377;
t1331 = -t1468 * t1348 + t1471 * t1349;
t1367 = t1478 * t1385 + t1475 * t1395;
t1501 = t1331 * t1477 - t1367 * t1480;
t1386 = t1486 - t1523;
t1399 = -t1528 - t1529;
t1372 = t1478 * t1386 - t1475 * t1399;
t1379 = -t1532 * t1424 - t1491;
t1350 = t1476 * t1372 - t1479 * t1379;
t1351 = t1479 * t1372 + t1476 * t1379;
t1333 = -t1468 * t1350 + t1471 * t1351;
t1371 = t1475 * t1386 + t1478 * t1399;
t1500 = t1333 * t1477 - t1371 * t1480;
t1388 = -t1468 * t1534 + t1517;
t1364 = -t1468 * t1388 + t1471 * t1389;
t1499 = t1364 * t1477 - t1403 * t1480;
t1409 = -t1481 - t1527;
t1412 = qJDD(4) - t1520;
t1390 = t1476 * t1409 + t1479 * t1412;
t1391 = t1479 * t1409 - t1476 * t1412;
t1366 = -t1468 * t1390 + t1471 * t1391;
t1498 = t1366 * t1477 - t1414 * t1480;
t1392 = -t1476 * t1505 - t1479 * t1531;
t1393 = t1476 * t1531 - t1479 * t1505;
t1370 = -t1468 * t1392 + t1471 * t1393;
t1401 = -t1526 - t1527;
t1497 = t1370 * t1477 - t1401 * t1480;
t1413 = -qJDD(4) - t1520;
t1429 = -t1481 - t1526;
t1397 = t1476 * t1413 + t1479 * t1429;
t1398 = t1479 * t1413 - t1476 * t1429;
t1374 = -t1468 * t1397 + t1471 * t1398;
t1415 = t1531 - 0.2e1 * t1522;
t1496 = t1374 * t1477 - t1415 * t1480;
t1495 = t1407 * t1477 - t1480 * t1506;
t1446 = t1514 * qJDD(2);
t1494 = t1446 * t1477 + t1447 * t1480;
t1492 = -t1477 * t1482 + t1511;
t1449 = -t1480 * t1482 - t1512;
t1443 = t1468 * t1447;
t1489 = t1443 * t1477 - t1468 * t1511;
t1444 = t1471 * t1447;
t1488 = -t1444 * t1477 + t1471 * t1511;
t1453 = t1468 * t1516;
t1437 = t1492 * t1473;
t1436 = t1449 * t1473;
t1435 = t1492 * t1470;
t1434 = t1449 * t1470;
t1423 = -t1480 * t1444 - t1471 * t1512;
t1422 = t1480 * t1443 + t1468 * t1512;
t1421 = t1480 * t1446 - t1477 * t1447;
t1420 = t1488 * t1473;
t1419 = t1489 * t1473;
t1418 = t1488 * t1470;
t1417 = t1489 * t1470;
t1411 = t1494 * t1473;
t1410 = t1494 * t1470;
t1387 = t1480 * t1407 + t1477 * t1506;
t1376 = -t1470 * t1428 + t1473 * t1495;
t1375 = t1473 * t1428 + t1470 * t1495;
t1373 = t1471 * t1397 + t1468 * t1398;
t1369 = t1471 * t1392 + t1468 * t1393;
t1365 = t1471 * t1390 + t1468 * t1391;
t1363 = t1471 * t1388 + t1468 * t1389;
t1362 = t1480 * t1374 + t1477 * t1415;
t1358 = t1480 * t1366 + t1477 * t1414;
t1357 = t1480 * t1370 + t1477 * t1401;
t1356 = t1480 * t1364 + t1477 * t1403;
t1347 = -t1470 * t1373 + t1473 * t1496;
t1346 = t1473 * t1373 + t1470 * t1496;
t1343 = -t1470 * t1365 + t1473 * t1498;
t1342 = t1473 * t1365 + t1470 * t1498;
t1341 = -t1470 * t1369 + t1473 * t1497;
t1340 = t1473 * t1369 + t1470 * t1497;
t1337 = -t1470 * t1363 + t1473 * t1499;
t1336 = t1473 * t1363 + t1470 * t1499;
t1332 = t1471 * t1350 + t1468 * t1351;
t1330 = t1471 * t1348 + t1468 * t1349;
t1328 = t1471 * t1344 + t1468 * t1345;
t1327 = t1480 * t1333 + t1477 * t1371;
t1326 = t1480 * t1331 + t1477 * t1367;
t1324 = t1471 * t1338 + t1468 * t1339;
t1323 = t1480 * t1325 + t1477 * t1396;
t1320 = t1480 * t1329 + t1477 * t1354;
t1317 = -t1470 * t1332 + t1473 * t1500;
t1316 = t1473 * t1332 + t1470 * t1500;
t1315 = -t1470 * t1330 + t1473 * t1501;
t1314 = t1473 * t1330 + t1470 * t1501;
t1313 = -t1470 * t1328 + t1473 * t1502;
t1312 = t1473 * t1328 + t1470 * t1502;
t1311 = -t1470 * t1324 + t1473 * t1503;
t1310 = t1473 * t1324 + t1470 * t1503;
t1308 = t1471 * t1318 + t1468 * t1319;
t1307 = t1480 * t1309 + t1477 * t1321;
t1306 = -t1470 * t1308 + t1473 * t1504;
t1305 = t1473 * t1308 + t1470 * t1504;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1472 * t1450 - t1469 * t1507, 0, 0, 0, 0, 0, 0, -t1469 * t1437 + t1472 * t1449, -t1469 * t1436 - t1472 * t1492, 0, -t1469 * t1376 + t1472 * t1387, 0, 0, 0, 0, 0, 0, -t1469 * t1420 + t1472 * t1423, -t1469 * t1419 + t1472 * t1422, -t1469 * t1411 + t1472 * t1421, -t1469 * t1337 + t1472 * t1356, 0, 0, 0, 0, 0, 0, -t1469 * t1343 + t1472 * t1358, -t1469 * t1347 + t1472 * t1362, -t1469 * t1341 + t1472 * t1357, -t1469 * t1311 + t1472 * t1323, 0, 0, 0, 0, 0, 0, -t1469 * t1315 + t1472 * t1326, -t1469 * t1317 + t1472 * t1327, -t1469 * t1313 + t1472 * t1320, -t1469 * t1306 + t1472 * t1307; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1469 * t1450 + t1472 * t1507, 0, 0, 0, 0, 0, 0, t1472 * t1437 + t1469 * t1449, t1472 * t1436 - t1469 * t1492, 0, t1472 * t1376 + t1469 * t1387, 0, 0, 0, 0, 0, 0, t1472 * t1420 + t1469 * t1423, t1472 * t1419 + t1469 * t1422, t1472 * t1411 + t1469 * t1421, t1472 * t1337 + t1469 * t1356, 0, 0, 0, 0, 0, 0, t1472 * t1343 + t1469 * t1358, t1472 * t1347 + t1469 * t1362, t1472 * t1341 + t1469 * t1357, t1472 * t1311 + t1469 * t1323, 0, 0, 0, 0, 0, 0, t1472 * t1315 + t1469 * t1326, t1472 * t1317 + t1469 * t1327, t1472 * t1313 + t1469 * t1320, t1472 * t1306 + t1469 * t1307; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1525, 0, 0, 0, 0, 0, 0, t1435, t1434, 0, t1375, 0, 0, 0, 0, 0, 0, t1418, t1417, t1410, t1336, 0, 0, 0, 0, 0, 0, t1342, t1346, t1340, t1310, 0, 0, 0, 0, 0, 0, t1314, t1316, t1312, t1305; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1450, 0, 0, 0, 0, 0, 0, t1449, -t1492, 0, t1387, 0, 0, 0, 0, 0, 0, t1423, t1422, t1421, t1356, 0, 0, 0, 0, 0, 0, t1358, t1362, t1357, t1323, 0, 0, 0, 0, 0, 0, t1326, t1327, t1320, t1307; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1507, 0, 0, 0, 0, 0, 0, t1437, t1436, 0, t1376, 0, 0, 0, 0, 0, 0, t1420, t1419, t1411, t1337, 0, 0, 0, 0, 0, 0, t1343, t1347, t1341, t1311, 0, 0, 0, 0, 0, 0, t1315, t1317, t1313, t1306; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1525, 0, 0, 0, 0, 0, 0, t1435, t1434, 0, t1375, 0, 0, 0, 0, 0, 0, t1418, t1417, t1410, t1336, 0, 0, 0, 0, 0, 0, t1342, t1346, t1340, t1310, 0, 0, 0, 0, 0, 0, t1314, t1316, t1312, t1305; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1482, -qJDD(2), 0, t1407, 0, 0, 0, 0, 0, 0, -t1444, t1443, t1446, t1364, 0, 0, 0, 0, 0, 0, t1366, t1374, t1370, t1325, 0, 0, 0, 0, 0, 0, t1331, t1333, t1329, t1309; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1482, 0, -t1506, 0, 0, 0, 0, 0, 0, t1460, -t1513, t1447, -t1403, 0, 0, 0, 0, 0, 0, -t1414, -t1415, -t1401, -t1396, 0, 0, 0, 0, 0, 0, -t1367, -t1371, -t1354, -t1321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1428, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1363, 0, 0, 0, 0, 0, 0, t1365, t1373, t1369, t1324, 0, 0, 0, 0, 0, 0, t1330, t1332, t1328, t1308; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1518, t1453, t1460, t1389, 0, 0, 0, 0, 0, 0, t1391, t1398, t1393, t1339, 0, 0, 0, 0, 0, 0, t1349, t1351, t1345, t1319; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1453, -t1519, -t1513, t1388, 0, 0, 0, 0, 0, 0, t1390, t1397, t1392, t1338, 0, 0, 0, 0, 0, 0, t1348, t1350, t1344, t1318; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1460, t1513, -t1447, t1403, 0, 0, 0, 0, 0, 0, t1414, t1415, t1401, t1396, 0, 0, 0, 0, 0, 0, t1367, t1371, t1354, t1321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1409, t1413, -t1505, t1360, 0, 0, 0, 0, 0, 0, t1368, t1372, t1355, t1322; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1412, t1429, -t1531, t1359, 0, 0, 0, 0, 0, 0, -t1377, -t1379, -t1394, -t1352; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1414, t1415, t1401, t1396, 0, 0, 0, 0, 0, 0, t1367, t1371, t1354, t1321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1395, t1386, t1378, t1335; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1385, t1399, t1380, t1334; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1377, t1379, t1394, t1352;];
f_new_reg = t1;
