% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PRPRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d4,d5,theta1,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:58
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PRPRR6_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRR6_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRR6_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRR6_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRR6_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5PRPRR6_invdynm_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:58:19
% EndTime: 2019-12-05 15:58:36
% DurationCPUTime: 18.06s
% Computational Cost: add. (103455->715), mult. (230298->1098), div. (0->0), fcn. (175793->12), ass. (0->506)
t1163 = sin(qJ(5));
t1156 = sin(pkin(10));
t1159 = cos(pkin(10));
t1164 = sin(qJ(4));
t1167 = cos(qJ(4));
t1195 = t1156 * t1167 + t1159 * t1164;
t1121 = t1195 * qJD(2);
t1166 = cos(qJ(5));
t1098 = -t1166 * qJD(4) + t1163 * t1121;
t1100 = t1163 * qJD(4) + t1166 * t1121;
t1053 = t1100 * t1098;
t1143 = t1156 * qJDD(2);
t1145 = t1159 * qJDD(2);
t1113 = t1143 * t1164 - t1167 * t1145;
t1270 = t1121 * qJD(4);
t1078 = -t1113 - t1270;
t1069 = qJDD(5) - t1078;
t1292 = -t1053 + t1069;
t1304 = t1163 * t1292;
t1119 = (t1156 * t1164 - t1159 * t1167) * qJD(2);
t1084 = t1121 * t1119;
t1290 = qJDD(4) - t1084;
t1303 = t1164 * t1290;
t1302 = t1166 * t1292;
t1301 = t1167 * t1290;
t1157 = sin(pkin(9));
t1160 = cos(pkin(9));
t1133 = t1160 * g(1) + t1157 * g(2);
t1165 = sin(qJ(2));
t1168 = cos(qJ(2));
t1158 = sin(pkin(5));
t1161 = cos(pkin(5));
t1236 = t1157 * g(1) - t1160 * g(2);
t1278 = g(3) - qJDD(1);
t1299 = -t1158 * t1278 + t1161 * t1236;
t1064 = -t1168 * t1133 + t1299 * t1165;
t1300 = t1064 + (qJ(3) + pkin(7)) * qJDD(2);
t1170 = t1159 ^ 2;
t1286 = qJD(2) ^ 2;
t1147 = t1170 * t1286;
t1152 = t1156 ^ 2;
t1267 = t1152 * t1286;
t1128 = t1147 + t1267;
t1289 = t1286 * (t1152 + t1170);
t1124 = t1159 * t1289;
t1247 = t1165 * qJDD(2);
t1094 = t1168 * t1124 + t1159 * t1247;
t1246 = t1168 * qJDD(2);
t1186 = -t1124 * t1165 + t1159 * t1246;
t1293 = t1186 * t1161;
t1298 = t1160 * t1094 + t1157 * t1293;
t1297 = t1157 * t1094 - t1160 * t1293;
t1070 = t1119 * pkin(4) - t1121 * pkin(8);
t1285 = qJD(4) ^ 2;
t1102 = t1158 * t1236 + t1161 * t1278;
t1265 = t1156 * t1102;
t1284 = 2 * qJD(3);
t1005 = -t1265 + t1300 * t1159 + (t1159 * t1284 + (-t1159 * pkin(2) - t1170 * pkin(3)) * qJD(2)) * qJD(2);
t1260 = t1159 * t1102;
t1172 = -t1260 + ((-(2 * qJD(3)) + (t1159 * pkin(3) + pkin(2)) * qJD(2)) * qJD(2) - t1300) * t1156;
t935 = t1167 * t1005 + t1164 * t1172;
t913 = -t1285 * pkin(4) + qJDD(4) * pkin(8) - t1119 * t1070 + t935;
t1063 = -t1165 * t1133 - t1299 * t1168;
t1155 = qJDD(2) * pkin(2);
t1054 = -t1286 * qJ(3) + qJDD(3) + t1063 - t1155;
t1036 = -pkin(3) * t1145 - t1128 * pkin(7) + t1054;
t1108 = t1119 * qJD(4);
t1114 = t1195 * qJDD(2);
t1080 = -t1108 + t1114;
t943 = (-t1080 + t1108) * pkin(8) + (-t1078 + t1270) * pkin(4) + t1036;
t861 = t1163 * t913 - t1166 * t943;
t862 = t1163 * t943 + t1166 * t913;
t818 = t1163 * t861 + t1166 * t862;
t1296 = t1157 * t1278;
t1295 = t1160 * t1278;
t1294 = t1186 * t1158;
t1288 = -t1160 * t1133 - t1157 * t1236;
t1287 = -t1157 * t1133 + t1160 * t1236;
t1096 = t1098 ^ 2;
t1097 = t1100 ^ 2;
t1110 = qJD(5) + t1119;
t1109 = t1110 ^ 2;
t1111 = t1119 ^ 2;
t1112 = t1121 ^ 2;
t934 = t1164 * t1005 - t1167 * t1172;
t867 = t1164 * t935 - t1167 * t934;
t1283 = pkin(3) * t867;
t1023 = -t1113 * t1164 - t1167 * t1114;
t1281 = pkin(3) * t1023;
t1280 = pkin(4) * t1164;
t1016 = t1165 * t1063 + t1168 * t1064;
t1279 = pkin(6) * t1016;
t912 = -qJDD(4) * pkin(4) - t1285 * pkin(8) + t1121 * t1070 + t934;
t1277 = -pkin(4) * t912 + pkin(8) * t818;
t1276 = t1156 * t867;
t1275 = t1159 * t867;
t905 = t1163 * t912;
t906 = t1166 * t912;
t1274 = t1110 * t1163;
t1273 = t1110 * t1166;
t1272 = t1119 * t1164;
t1271 = t1119 * t1167;
t1269 = t1121 * t1164;
t1268 = t1121 * t1167;
t1266 = t1156 * t1054;
t1264 = t1156 * t1159;
t1237 = t1156 * t1145;
t1241 = t1165 * t1264;
t1101 = t1168 * t1237 - t1286 * t1241;
t1263 = t1157 * t1101;
t1261 = t1159 * t1054;
t1259 = t1160 * t1101;
t1013 = t1053 + t1069;
t1258 = t1163 * t1013;
t1257 = t1164 * t1036;
t1075 = qJDD(4) + t1084;
t1256 = t1164 * t1075;
t1255 = t1165 * t1054;
t1254 = t1165 * t1102;
t1253 = t1166 * t1013;
t1252 = t1167 * t1036;
t1251 = t1167 * t1075;
t1250 = t1168 * t1102;
t1248 = t1158 * qJDD(2);
t1045 = -t1097 - t1109;
t964 = -t1163 * t1045 - t1253;
t1192 = -t1163 * qJDD(4) - t1166 * t1080;
t996 = (qJD(5) + t1110) * t1098 + t1192;
t1245 = pkin(4) * t996 + pkin(8) * t964 + t905;
t1033 = -t1109 - t1096;
t955 = t1166 * t1033 - t1304;
t1233 = t1166 * qJDD(4) - t1163 * t1080;
t1031 = -t1100 * qJD(5) + t1233;
t1060 = t1100 * t1110;
t993 = t1031 - t1060;
t1244 = pkin(4) * t993 + pkin(8) * t955 - t906;
t1243 = -pkin(4) * t1167 - pkin(3);
t1242 = t1168 * t1084;
t1135 = t1286 * t1264;
t1240 = t1164 * t1053;
t1239 = t1165 * t1084;
t1238 = t1167 * t1053;
t1234 = -t1054 + t1155;
t868 = t1164 * t934 + t1167 * t935;
t1173 = qJDD(2) * qJ(3) + (-pkin(2) * qJD(2) + t1284) * qJD(2) + t1064;
t1018 = t1156 * t1173 + t1260;
t1019 = t1159 * t1173 - t1265;
t947 = t1156 * t1018 + t1159 * t1019;
t1232 = 0.2e1 * t1237;
t1027 = t1096 + t1097;
t992 = (-qJD(5) + t1110) * t1100 + t1233;
t1032 = -t1098 * qJD(5) - t1192;
t1059 = t1110 * t1098;
t995 = t1032 + t1059;
t920 = t1163 * t995 + t1166 * t992;
t1231 = pkin(4) * t1027 + pkin(8) * t920 + t818;
t812 = t1164 * t818 - t1167 * t912;
t1230 = pkin(3) * t812 + t1277;
t1229 = t1168 * t1135;
t1228 = t1158 * t1241;
t1227 = t1161 * t1241;
t1105 = -t1112 - t1285;
t1041 = t1167 * t1105 - t1256;
t1226 = pkin(3) * t1041 - t935;
t1142 = t1152 * qJDD(2);
t1144 = t1170 * qJDD(2);
t1126 = t1144 + t1142;
t1091 = t1168 * t1126 - t1165 * t1128;
t946 = t1159 * t1018 - t1156 * t1019;
t1225 = pkin(6) * t1091 + t1165 * t946;
t1131 = -t1165 * t1286 + t1246;
t1223 = -pkin(6) * t1131 - t1254;
t1194 = t1168 * t1286 + t1247;
t1222 = -pkin(6) * t1194 + t1250;
t899 = t1164 * t955 + t1167 * t993;
t1221 = pkin(3) * t899 + t1244;
t903 = t1164 * t964 + t1167 * t996;
t1220 = pkin(3) * t903 + t1245;
t817 = t1163 * t862 - t1166 * t861;
t813 = t1164 * t912 + t1167 * t818;
t773 = -t1156 * t812 + t1159 * t813;
t1219 = t1165 * t773 - t1168 * t817;
t881 = t1167 * t1027 + t1164 * t920;
t882 = -t1164 * t1027 + t1167 * t920;
t834 = -t1156 * t881 + t1159 * t882;
t918 = t1163 * t992 - t1166 * t995;
t1218 = t1165 * t834 - t1168 * t918;
t1051 = t1097 - t1096;
t994 = t1032 - t1059;
t921 = -t1163 * t994 + t1166 * t993;
t893 = -t1167 * t1051 + t1164 * t921;
t894 = t1164 * t1051 + t1167 * t921;
t838 = -t1156 * t893 + t1159 * t894;
t919 = t1163 * t993 + t1166 * t994;
t1217 = t1165 * t838 - t1168 * t919;
t900 = -t1164 * t993 + t1167 * t955;
t840 = -t1156 * t899 + t1159 * t900;
t954 = t1163 * t1033 + t1302;
t1216 = t1165 * t840 - t1168 * t954;
t904 = -t1164 * t996 + t1167 * t964;
t842 = -t1156 * t903 + t1159 * t904;
t963 = t1166 * t1045 - t1258;
t1215 = t1165 * t842 - t1168 * t963;
t1058 = -t1097 + t1109;
t968 = -t1163 * t1058 + t1302;
t907 = t1164 * t968 - t1167 * t995;
t909 = t1164 * t995 + t1167 * t968;
t847 = -t1156 * t907 + t1159 * t909;
t966 = t1166 * t1058 + t1304;
t1214 = t1165 * t847 - t1168 * t966;
t1057 = t1096 - t1109;
t969 = t1166 * t1057 - t1258;
t991 = -t1031 - t1060;
t908 = t1164 * t969 + t1167 * t991;
t910 = -t1164 * t991 + t1167 * t969;
t848 = -t1156 * t908 + t1159 * t910;
t967 = t1163 * t1057 + t1253;
t1213 = t1165 * t848 - t1168 * t967;
t984 = -t1163 * t1031 + t1098 * t1273;
t939 = t1164 * t984 + t1238;
t941 = t1167 * t984 - t1240;
t879 = -t1156 * t939 + t1159 * t941;
t983 = -t1166 * t1031 - t1098 * t1274;
t1212 = t1165 * t879 + t1168 * t983;
t986 = t1166 * t1032 - t1100 * t1274;
t940 = t1164 * t986 - t1238;
t942 = t1167 * t986 + t1240;
t880 = -t1156 * t940 + t1159 * t942;
t985 = t1163 * t1032 + t1100 * t1273;
t1211 = t1165 * t880 - t1168 * t985;
t1008 = (-t1098 * t1163 - t1100 * t1166) * t1110;
t1010 = (-t1098 * t1166 + t1100 * t1163) * t1110;
t970 = t1164 * t1010 - t1167 * t1069;
t971 = t1167 * t1010 + t1164 * t1069;
t902 = -t1156 * t970 + t1159 * t971;
t1210 = -t1008 * t1168 + t1165 * t902;
t826 = t1159 * t868 - t1276;
t1209 = -t1036 * t1168 + t1165 * t826;
t1052 = -t1111 - t1112;
t1025 = -t1113 * t1167 + t1164 * t1114;
t958 = -t1156 * t1023 + t1159 * t1025;
t1208 = -t1052 * t1168 + t1165 * t958;
t1207 = -t1054 * t1168 + t1165 * t947;
t1077 = t1113 + 0.2e1 * t1270;
t1071 = -t1111 - t1285;
t1020 = t1164 * t1071 + t1301;
t1021 = t1167 * t1071 - t1303;
t953 = -t1156 * t1020 + t1159 * t1021;
t1206 = -t1077 * t1168 + t1165 * t953;
t1079 = -0.2e1 * t1108 + t1114;
t1044 = -t1164 * t1105 - t1251;
t978 = -t1156 * t1041 + t1159 * t1044;
t1205 = -t1079 * t1168 + t1165 * t978;
t1083 = t1112 - t1111;
t1024 = -t1164 * t1077 + t1167 * t1079;
t1026 = -t1167 * t1077 - t1164 * t1079;
t959 = -t1156 * t1024 + t1159 * t1026;
t1204 = -t1083 * t1168 + t1165 * t959;
t1103 = t1111 - t1285;
t1039 = t1164 * t1103 + t1251;
t1042 = t1167 * t1103 - t1256;
t976 = -t1156 * t1039 + t1159 * t1042;
t1203 = t1113 * t1168 + t1165 * t976;
t1104 = -t1112 + t1285;
t1040 = t1167 * t1104 + t1303;
t1043 = -t1164 * t1104 + t1301;
t977 = -t1156 * t1040 + t1159 * t1043;
t1202 = -t1114 * t1168 + t1165 * t977;
t1201 = t1158 * t1229;
t1200 = t1161 * t1229;
t1015 = t1168 * t1063 - t1165 * t1064;
t1117 = t1194 * t1161;
t1199 = t1160 * t1117 + t1157 * t1131;
t1198 = t1157 * t1117 - t1160 * t1131;
t1197 = t1126 * t1165 + t1128 * t1168;
t1127 = t1144 - t1142;
t1129 = -t1147 + t1267;
t1196 = t1127 * t1165 - t1129 * t1168;
t1061 = (-t1268 - t1272) * qJD(4);
t1062 = (t1269 - t1271) * qJD(4);
t1007 = -t1156 * t1061 + t1159 * t1062;
t1193 = -qJDD(4) * t1168 + t1007 * t1165;
t1191 = pkin(3) * t1020 - t934;
t1190 = pkin(3) * t881 + t1231;
t1046 = qJD(4) * t1272 + t1167 * t1078;
t1047 = qJD(4) * t1271 - t1164 * t1078;
t981 = -t1156 * t1046 + t1159 * t1047;
t1189 = t1165 * t981 + t1242;
t1048 = qJD(4) * t1268 + t1164 * t1080;
t1049 = -qJD(4) * t1269 + t1167 * t1080;
t982 = -t1156 * t1048 + t1159 * t1049;
t1188 = t1165 * t982 - t1242;
t1123 = t1156 * t1289;
t1187 = t1123 * t1165 - t1156 * t1246;
t763 = pkin(7) * t813 + (-pkin(8) * t1164 + t1243) * t817;
t771 = -pkin(7) * t812 + (-pkin(8) * t1167 + t1280) * t817;
t772 = t1156 * t813 + t1159 * t812;
t752 = -qJ(3) * t772 - t1156 * t763 + t1159 * t771;
t760 = -pkin(2) * t772 - t1230;
t770 = t1165 * t817 + t1168 * t773;
t1185 = pkin(6) * t770 + t1165 * t752 + t1168 * t760;
t814 = -pkin(8) * t918 - t817;
t778 = pkin(7) * t882 + t1164 * t814 + t1243 * t918;
t786 = -pkin(7) * t881 + t1167 * t814 + t1280 * t918;
t833 = t1156 * t882 + t1159 * t881;
t762 = -qJ(3) * t833 - t1156 * t778 + t1159 * t786;
t775 = -pkin(2) * t833 - t1190;
t816 = t1165 * t918 + t1168 * t834;
t1184 = pkin(6) * t816 + t1165 * t762 + t1168 * t775;
t835 = -pkin(4) * t954 + t861;
t863 = -pkin(8) * t954 + t905;
t790 = -pkin(3) * t954 + pkin(7) * t900 + t1164 * t863 + t1167 * t835;
t798 = -pkin(7) * t899 - t1164 * t835 + t1167 * t863;
t839 = t1156 * t900 + t1159 * t899;
t766 = -qJ(3) * t839 - t1156 * t790 + t1159 * t798;
t794 = -pkin(2) * t839 - t1221;
t827 = t1165 * t954 + t1168 * t840;
t1183 = pkin(6) * t827 + t1165 * t766 + t1168 * t794;
t836 = -pkin(4) * t963 + t862;
t864 = -pkin(8) * t963 + t906;
t791 = -pkin(3) * t963 + pkin(7) * t904 + t1164 * t864 + t1167 * t836;
t799 = -pkin(7) * t903 - t1164 * t836 + t1167 * t864;
t841 = t1156 * t904 + t1159 * t903;
t767 = -qJ(3) * t841 - t1156 * t791 + t1159 * t799;
t795 = -pkin(2) * t841 - t1220;
t828 = t1165 * t963 + t1168 * t842;
t1182 = pkin(6) * t828 + t1165 * t767 + t1168 * t795;
t825 = t1156 * t868 + t1275;
t854 = -pkin(3) * t1036 + pkin(7) * t868;
t785 = -pkin(7) * t1275 - qJ(3) * t825 - t1156 * t854;
t805 = -pkin(2) * t825 - t1283;
t819 = t1165 * t1036 + t1168 * t826;
t1181 = pkin(6) * t819 + t1165 * t785 + t1168 * t805;
t844 = -pkin(3) * t1052 + pkin(7) * t1025 + t868;
t853 = -pkin(7) * t1023 - t867;
t956 = t1159 * t1023 + t1156 * t1025;
t810 = -qJ(3) * t956 - t1156 * t844 + t1159 * t853;
t916 = -pkin(2) * t956 - t1281;
t924 = t1165 * t1052 + t1168 * t958;
t1180 = pkin(6) * t924 + t1165 * t810 + t1168 * t916;
t937 = -pkin(3) * t1077 + pkin(7) * t1021 - t1252;
t952 = t1159 * t1020 + t1156 * t1021;
t965 = -pkin(7) * t1020 + t1257;
t849 = -qJ(3) * t952 - t1156 * t937 + t1159 * t965;
t858 = -pkin(2) * t952 - t1191;
t929 = t1165 * t1077 + t1168 * t953;
t1179 = pkin(6) * t929 + t1165 * t849 + t1168 * t858;
t948 = -pkin(3) * t1079 + pkin(7) * t1044 + t1257;
t972 = -pkin(7) * t1041 + t1252;
t975 = t1159 * t1041 + t1156 * t1044;
t857 = -qJ(3) * t975 - t1156 * t948 + t1159 * t972;
t869 = -pkin(2) * t975 - t1226;
t944 = t1165 * t1079 + t1168 * t978;
t1178 = pkin(6) * t944 + t1165 * t857 + t1168 * t869;
t1177 = -pkin(6) * t1094 + t1018 * t1168 + t1156 * t1255;
t1093 = t1168 * t1123 + t1156 * t1247;
t1176 = pkin(6) * t1093 + t1019 * t1168 + t1159 * t1255;
t922 = t1168 * t947 + t1255;
t1175 = pkin(6) * t922 - (-pkin(2) * t1168 - qJ(3) * t1165) * t946;
t1146 = t1161 * qJDD(2);
t1118 = t1131 * t1161;
t1116 = t1131 * t1158;
t1115 = t1194 * t1158;
t1092 = t1168 * t1127 + t1165 * t1129;
t1088 = t1187 * t1161;
t1085 = t1187 * t1158;
t1082 = -t1157 * t1118 - t1160 * t1194;
t1081 = t1160 * t1118 - t1157 * t1194;
t1073 = t1197 * t1161;
t1072 = t1197 * t1158;
t1068 = -t1200 + (-t1158 * t1170 - t1227) * qJDD(2);
t1067 = t1200 + (-t1152 * t1158 + t1227) * qJDD(2);
t1066 = -t1201 + (t1161 * t1170 - t1228) * qJDD(2);
t1065 = t1201 + (t1152 * t1161 + t1228) * qJDD(2);
t1056 = -0.2e1 * t1158 * t1237 + t1161 * t1196;
t1055 = t1158 * t1196 + t1161 * t1232;
t1038 = -t1157 * t1088 + t1160 * t1093;
t1037 = t1160 * t1088 + t1157 * t1093;
t1035 = -t1250 + (t1115 * t1158 + t1117 * t1161) * pkin(6);
t1034 = -t1254 + (-t1116 * t1158 - t1118 * t1161) * pkin(6);
t1030 = -qJ(3) * t1124 + t1159 * t1234;
t1029 = qJ(3) * t1123 - t1156 * t1234;
t1011 = t1016 * t1161;
t1009 = t1016 * t1158;
t1006 = t1159 * t1061 + t1156 * t1062;
t1001 = t1165 * qJDD(4) + t1168 * t1007;
t1000 = -pkin(1) * t1116 + t1158 * t1063 + t1161 * t1222;
t999 = pkin(1) * t1115 + t1158 * t1064 + t1161 * t1223;
t998 = pkin(1) * t1118 - t1161 * t1063 + t1158 * t1222;
t997 = -pkin(1) * t1117 - t1161 * t1064 + t1158 * t1223;
t988 = -t1015 * t1161 + t1158 * t1102;
t987 = -t1015 * t1158 - t1161 * t1102;
t980 = t1159 * t1048 + t1156 * t1049;
t979 = t1159 * t1046 + t1156 * t1047;
t974 = t1159 * t1040 + t1156 * t1043;
t973 = t1159 * t1039 + t1156 * t1042;
t962 = t1165 * t1114 + t1168 * t977;
t961 = -t1165 * t1113 + t1168 * t976;
t957 = t1159 * t1024 + t1156 * t1026;
t950 = t1168 * t982 + t1239;
t949 = t1168 * t981 - t1239;
t936 = pkin(2) * t1128 + qJ(3) * t1126 + t947;
t932 = t1165 * t1083 + t1168 * t959;
t931 = -t1158 * t1006 + t1161 * t1193;
t930 = t1161 * t1006 + t1158 * t1193;
t928 = pkin(1) * t988 + t1158 * t1279;
t927 = -pkin(1) * t987 + t1161 * t1279;
t926 = t1168 * t1261 - t1165 * t1019 + (-t1085 * t1158 - t1088 * t1161) * pkin(6);
t925 = t1168 * t1266 - t1165 * t1018 + (-t1158 * t1294 - t1161 * t1293) * pkin(6);
t923 = -pkin(2) * t1054 + qJ(3) * t947;
t915 = (-t1158 * t987 - t1161 * t988) * pkin(6);
t914 = t1168 * t946 + (-t1072 * t1158 - t1073 * t1161) * pkin(6);
t901 = t1156 * t971 + t1159 * t970;
t898 = -pkin(1) * t1085 - t1158 * t1029 + t1161 * t1176;
t897 = -pkin(1) * t1294 - t1158 * t1030 + t1161 * t1177;
t896 = pkin(1) * t1088 + t1161 * t1029 + t1158 * t1176;
t895 = pkin(1) * t1293 + t1161 * t1030 + t1158 * t1177;
t892 = -t1158 * t974 + t1161 * t1202;
t891 = -t1158 * t973 + t1161 * t1203;
t890 = t1158 * t1202 + t1161 * t974;
t889 = t1158 * t1203 + t1161 * t973;
t888 = -t1158 * t980 + t1161 * t1188;
t887 = -t1158 * t979 + t1161 * t1189;
t886 = t1158 * t1188 + t1161 * t980;
t885 = t1158 * t1189 + t1161 * t979;
t884 = -t1158 * t975 + t1161 * t1205;
t883 = t1158 * t1205 + t1161 * t975;
t878 = t1156 * t942 + t1159 * t940;
t877 = t1156 * t941 + t1159 * t939;
t876 = -t1158 * t957 + t1161 * t1204;
t875 = t1158 * t1204 + t1161 * t957;
t874 = t1165 * t1008 + t1168 * t902;
t873 = -t1158 * t952 + t1161 * t1206;
t872 = t1158 * t1206 + t1161 * t952;
t871 = -t1158 * t956 + t1161 * t1208;
t870 = t1158 * t1208 + t1161 * t956;
t866 = t1158 * t946 + t1161 * t1207;
t865 = t1158 * t1207 - t1161 * t946;
t856 = -pkin(1) * t1072 - t1158 * t936 + t1161 * t1225;
t855 = pkin(1) * t1073 + t1158 * t1225 + t1161 * t936;
t852 = -pkin(2) * t1079 + qJ(3) * t978 + t1156 * t972 + t1159 * t948;
t851 = t1165 * t985 + t1168 * t880;
t850 = -t1165 * t983 + t1168 * t879;
t846 = t1156 * t910 + t1159 * t908;
t845 = t1156 * t909 + t1159 * t907;
t843 = -pkin(2) * t1077 + qJ(3) * t953 + t1156 * t965 + t1159 * t937;
t837 = t1156 * t894 + t1159 * t893;
t832 = -t1158 * t901 + t1161 * t1210;
t831 = t1158 * t1210 + t1161 * t901;
t830 = t1165 * t967 + t1168 * t848;
t829 = t1165 * t966 + t1168 * t847;
t824 = t1165 * t919 + t1168 * t838;
t823 = -t1158 * t878 + t1161 * t1211;
t822 = -t1158 * t877 + t1161 * t1212;
t821 = t1158 * t1211 + t1161 * t878;
t820 = t1158 * t1212 + t1161 * t877;
t811 = -(pkin(2) * t1165 - qJ(3) * t1168) * t946 + (-t1158 * t865 - t1161 * t866) * pkin(6);
t809 = -t1158 * t846 + t1161 * t1213;
t808 = -t1158 * t845 + t1161 * t1214;
t807 = t1158 * t1213 + t1161 * t846;
t806 = t1158 * t1214 + t1161 * t845;
t804 = -pkin(1) * t865 - t1158 * t923 + t1161 * t1175;
t803 = pkin(1) * t866 + t1158 * t1175 + t1161 * t923;
t802 = -pkin(2) * t1052 + qJ(3) * t958 + t1156 * t853 + t1159 * t844;
t801 = -t1158 * t841 + t1161 * t1215;
t800 = t1158 * t1215 + t1161 * t841;
t797 = -t1158 * t839 + t1161 * t1216;
t796 = t1158 * t1216 + t1161 * t839;
t793 = -t1158 * t837 + t1161 * t1217;
t792 = t1158 * t1217 + t1161 * t837;
t789 = -t1165 * t869 + t1168 * t857 + (-t1158 * t883 - t1161 * t884) * pkin(6);
t788 = -t1158 * t833 + t1161 * t1218;
t787 = t1158 * t1218 + t1161 * t833;
t784 = -t1158 * t825 + t1161 * t1209;
t783 = t1158 * t1209 + t1161 * t825;
t782 = -t1165 * t858 + t1168 * t849 + (-t1158 * t872 - t1161 * t873) * pkin(6);
t781 = -pkin(2) * t1036 - pkin(7) * t1276 + qJ(3) * t826 + t1159 * t854;
t780 = -pkin(1) * t883 - t1158 * t852 + t1161 * t1178;
t779 = pkin(1) * t884 + t1158 * t1178 + t1161 * t852;
t777 = -pkin(1) * t872 - t1158 * t843 + t1161 * t1179;
t776 = pkin(1) * t873 + t1158 * t1179 + t1161 * t843;
t774 = -t1165 * t916 + t1168 * t810 + (-t1158 * t870 - t1161 * t871) * pkin(6);
t769 = -pkin(1) * t870 - t1158 * t802 + t1161 * t1180;
t768 = pkin(1) * t871 + t1158 * t1180 + t1161 * t802;
t765 = -pkin(2) * t963 + qJ(3) * t842 + t1156 * t799 + t1159 * t791;
t764 = -pkin(2) * t954 + qJ(3) * t840 + t1156 * t798 + t1159 * t790;
t761 = -pkin(2) * t918 + qJ(3) * t834 + t1156 * t786 + t1159 * t778;
t759 = -t1158 * t772 + t1161 * t1219;
t758 = t1158 * t1219 + t1161 * t772;
t757 = -t1165 * t805 + t1168 * t785 + (-t1158 * t783 - t1161 * t784) * pkin(6);
t756 = -pkin(1) * t783 - t1158 * t781 + t1161 * t1181;
t755 = pkin(1) * t784 + t1158 * t1181 + t1161 * t781;
t754 = -t1165 * t795 + t1168 * t767 + (-t1158 * t800 - t1161 * t801) * pkin(6);
t753 = -t1165 * t794 + t1168 * t766 + (-t1158 * t796 - t1161 * t797) * pkin(6);
t751 = -t1165 * t775 + t1168 * t762 + (-t1158 * t787 - t1161 * t788) * pkin(6);
t750 = -pkin(2) * t817 + qJ(3) * t773 + t1156 * t771 + t1159 * t763;
t749 = -pkin(1) * t800 - t1158 * t765 + t1161 * t1182;
t748 = pkin(1) * t801 + t1158 * t1182 + t1161 * t765;
t747 = -pkin(1) * t796 - t1158 * t764 + t1161 * t1183;
t746 = pkin(1) * t797 + t1158 * t1183 + t1161 * t764;
t745 = -pkin(1) * t787 - t1158 * t761 + t1161 * t1184;
t744 = pkin(1) * t788 + t1158 * t1184 + t1161 * t761;
t743 = -t1165 * t760 + t1168 * t752 + (-t1158 * t758 - t1161 * t759) * pkin(6);
t742 = -pkin(1) * t758 - t1158 * t750 + t1161 * t1185;
t741 = pkin(1) * t759 + t1158 * t1185 + t1161 * t750;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1296, -t1295, -t1287, -qJ(1) * t1287, 0, 0, -t1198, 0, t1082, t1157 * t1248, -qJ(1) * t1081 - t1157 * t1000 + t1160 * t1034, qJ(1) * t1199 + t1160 * t1035 - t1157 * t999, -t1157 * t1011 + t1160 * t1015, t1160 * t915 - t1157 * t927 - qJ(1) * (t1157 * t1016 + t1160 * t988), -t1157 * t1067 + t1259, -t1157 * t1056 + t1160 * t1092, t1038, -t1157 * t1068 - t1259, t1298, 0, qJ(1) * t1297 - t1157 * t897 + t1160 * t925, -qJ(1) * t1037 - t1157 * t898 + t1160 * t926, t1160 * t914 - t1157 * t856 - qJ(1) * (t1160 * t1073 + t1157 * t1091), t1160 * t811 - t1157 * t804 - qJ(1) * (t1157 * t922 + t1160 * t866), -t1157 * t888 + t1160 * t950, -t1157 * t876 + t1160 * t932, -t1157 * t892 + t1160 * t962, -t1157 * t887 + t1160 * t949, -t1157 * t891 + t1160 * t961, t1160 * t1001 - t1157 * t931, t1160 * t782 - t1157 * t777 - qJ(1) * (t1157 * t929 + t1160 * t873), t1160 * t789 - t1157 * t780 - qJ(1) * (t1157 * t944 + t1160 * t884), t1160 * t774 - t1157 * t769 - qJ(1) * (t1157 * t924 + t1160 * t871), t1160 * t757 - t1157 * t756 - qJ(1) * (t1157 * t819 + t1160 * t784), -t1157 * t823 + t1160 * t851, -t1157 * t793 + t1160 * t824, -t1157 * t808 + t1160 * t829, -t1157 * t822 + t1160 * t850, -t1157 * t809 + t1160 * t830, -t1157 * t832 + t1160 * t874, t1160 * t753 - t1157 * t747 - qJ(1) * (t1157 * t827 + t1160 * t797), t1160 * t754 - t1157 * t749 - qJ(1) * (t1157 * t828 + t1160 * t801), t1160 * t751 - t1157 * t745 - qJ(1) * (t1157 * t816 + t1160 * t788), t1160 * t743 - t1157 * t742 - qJ(1) * (t1157 * t770 + t1160 * t759); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1295, -t1296, t1288, qJ(1) * t1288, 0, 0, t1199, 0, t1081, -t1160 * t1248, qJ(1) * t1082 + t1160 * t1000 + t1157 * t1034, qJ(1) * t1198 + t1157 * t1035 + t1160 * t999, t1160 * t1011 + t1157 * t1015, t1157 * t915 + t1160 * t927 + qJ(1) * (t1160 * t1016 - t1157 * t988), t1160 * t1067 + t1263, t1160 * t1056 + t1157 * t1092, t1037, t1160 * t1068 - t1263, t1297, 0, -qJ(1) * t1298 + t1157 * t925 + t1160 * t897, qJ(1) * t1038 + t1157 * t926 + t1160 * t898, t1157 * t914 + t1160 * t856 + qJ(1) * (-t1157 * t1073 + t1160 * t1091), t1157 * t811 + t1160 * t804 + qJ(1) * (-t1157 * t866 + t1160 * t922), t1157 * t950 + t1160 * t888, t1157 * t932 + t1160 * t876, t1157 * t962 + t1160 * t892, t1157 * t949 + t1160 * t887, t1157 * t961 + t1160 * t891, t1157 * t1001 + t1160 * t931, t1157 * t782 + t1160 * t777 + qJ(1) * (-t1157 * t873 + t1160 * t929), t1157 * t789 + t1160 * t780 + qJ(1) * (-t1157 * t884 + t1160 * t944), t1157 * t774 + t1160 * t769 + qJ(1) * (-t1157 * t871 + t1160 * t924), t1157 * t757 + t1160 * t756 + qJ(1) * (-t1157 * t784 + t1160 * t819), t1157 * t851 + t1160 * t823, t1157 * t824 + t1160 * t793, t1157 * t829 + t1160 * t808, t1157 * t850 + t1160 * t822, t1157 * t830 + t1160 * t809, t1157 * t874 + t1160 * t832, t1157 * t753 + t1160 * t747 + qJ(1) * (-t1157 * t797 + t1160 * t827), t1157 * t754 + t1160 * t749 + qJ(1) * (-t1157 * t801 + t1160 * t828), t1157 * t751 + t1160 * t745 + qJ(1) * (-t1157 * t788 + t1160 * t816), t1157 * t743 + t1160 * t742 + qJ(1) * (-t1157 * t759 + t1160 * t770); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1236, t1133, 0, 0, 0, 0, t1115, 0, t1116, t1146, t998, t997, t1009, t928, t1065, t1055, t1085, t1066, -t1294, 0, t895, t896, t855, t803, t886, t875, t890, t885, t889, t930, t776, t779, t768, t755, t821, t792, t806, t820, t807, t831, t746, t748, t744, t741; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1278, -t1236, 0, 0, 0, t1131, 0, -t1194, 0, t1034, t1035, t1015, t915, t1101, t1092, t1093, -t1101, t1094, 0, t925, t926, t914, t811, t950, t932, t962, t949, t961, t1001, t782, t789, t774, t757, t851, t824, t829, t850, t830, t874, t753, t754, t751, t743; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1278, 0, -t1133, 0, 0, 0, t1117, 0, t1118, -t1248, t1000, t999, t1011, t927, t1067, t1056, t1088, t1068, -t1293, 0, t897, t898, t856, t804, t888, t876, t892, t887, t891, t931, t777, t780, t769, t756, t823, t793, t808, t822, t809, t832, t747, t749, t745, t742; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1236, t1133, 0, 0, 0, 0, t1115, 0, t1116, t1146, t998, t997, t1009, t928, t1065, t1055, t1085, t1066, -t1294, 0, t895, t896, t855, t803, t886, t875, t890, t885, t889, t930, t776, t779, t768, t755, t821, t792, t806, t820, t807, t831, t746, t748, t744, t741; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t1286, 0, 0, -t1102, t1063, 0, t1237, t1127, t1123, -t1237, t1124, 0, t1266, t1261, t946, qJ(3) * t946, t982, t959, t977, t981, t976, t1007, t849, t857, t810, t785, t880, t838, t847, t879, t848, t902, t766, t767, t762, t752; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1286, 0, qJDD(2), 0, t1102, 0, t1064, 0, t1135, -t1129, -t1143, -t1135, -t1145, 0, t1018, t1019, 0, pkin(2) * t946, -t1084, -t1083, -t1114, t1084, t1113, -qJDD(4), t858, t869, t916, t805, -t985, -t919, -t966, t983, -t967, -t1008, t794, t795, t775, t760; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1063, -t1064, 0, 0, t1142, t1232, 0, t1144, 0, 0, t1030, t1029, t936, t923, t980, t957, t974, t979, t973, t1006, t843, t852, t802, t781, t878, t837, t845, t877, t846, t901, t764, t765, t761, t750; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1143, t1145, t1135, 0, t1147, 0, 0, t1054, t1018, 0, t1049, t1026, t1043, t1047, t1042, t1062, t965, t972, t853, -pkin(7) * t867, t942, t894, t909, t941, t910, t971, t798, t799, t786, t771; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1143, -t1267, t1145, -t1135, 0, -t1054, 0, t1019, 0, t1048, t1024, t1040, t1046, t1039, t1061, t937, t948, t844, t854, t940, t893, t907, t939, t908, t970, t790, t791, t778, t763; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1135, t1129, t1143, t1135, t1145, 0, -t1018, -t1019, 0, 0, t1084, t1083, t1114, -t1084, -t1113, qJDD(4), t1191, t1226, t1281, t1283, t985, t919, t966, -t983, t967, t1008, t1221, t1220, t1190, t1230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1080, -t1077, t1290, t1108, t1103, -t1108, 0, t1036, t934, 0, t986, t921, t968, t984, t969, t1010, t863, t864, t814, -pkin(8) * t817; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1270, t1079, t1104, t1078, t1075, -t1270, -t1036, 0, t935, 0, -t1053, -t1051, -t995, t1053, t991, -t1069, t835, t836, -pkin(4) * t918, -pkin(4) * t817; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1084, t1083, t1114, -t1084, -t1113, qJDD(4), -t934, -t935, 0, 0, t985, t919, t966, -t983, t967, t1008, t1244, t1245, t1231, t1277; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1032, t993, t1292, t1059, t1057, -t1059, 0, t912, t861, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1060, t994, t1058, t1031, t1013, -t1060, -t912, 0, t862, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1053, t1051, t995, -t1053, -t991, t1069, -t861, -t862, 0, 0;];
m_new_reg = t1;
