% Calculate inertial parameters regressor of joint inertia matrix for
% S5RPRRR14
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,alpha3,d1,d3,d4,d5,theta2]';
% 
% Output:
% MM_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:22
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S5RPRRR14_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR14_inertiaJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S5RPRRR14_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
t61 = cos(pkin(5));
t108 = pkin(1) * t61;
t56 = sin(pkin(11));
t59 = cos(pkin(11));
t58 = sin(pkin(5));
t80 = qJ(2) * t58;
t36 = t56 * t108 + t59 * t80;
t57 = sin(pkin(6));
t60 = cos(pkin(6));
t92 = t59 * t60;
t77 = t58 * t92;
t22 = (t57 * t61 + t77) * pkin(8) + t36;
t64 = sin(qJ(3));
t67 = cos(qJ(3));
t46 = t59 * t108;
t96 = t56 * t58;
t26 = t61 * pkin(2) + t46 + (-pkin(8) * t60 - qJ(2)) * t96;
t30 = (-pkin(8) * t56 * t57 - pkin(2) * t59 - pkin(1)) * t58;
t73 = t26 * t60 + t30 * t57;
t11 = -t64 * t22 + t67 * t73;
t95 = t57 * t64;
t25 = t61 * t95 + (t56 * t67 + t64 * t92) * t58;
t93 = t58 * t59;
t34 = -t57 * t93 + t60 * t61;
t63 = sin(qJ(4));
t66 = cos(qJ(4));
t17 = t25 * t63 - t34 * t66;
t116 = t17 ^ 2;
t94 = t57 * t67;
t23 = -t61 * t94 + t64 * t96 - t67 * t77;
t115 = t23 ^ 2;
t37 = -t66 * t60 + t63 * t95;
t114 = t37 ^ 2;
t113 = -0.2e1 * t17;
t112 = -0.2e1 * t23;
t111 = 0.2e1 * t58;
t110 = -0.2e1 * t63;
t109 = 0.2e1 * t66;
t65 = cos(qJ(5));
t107 = pkin(4) * t65;
t12 = t67 * t22 + t64 * t73;
t10 = t34 * pkin(9) + t12;
t16 = -t26 * t57 + t60 * t30;
t8 = pkin(3) * t23 - pkin(9) * t25 + t16;
t5 = -t10 * t63 + t66 * t8;
t3 = -pkin(4) * t23 - t5;
t62 = sin(qJ(5));
t106 = t3 * t62;
t105 = t3 * t65;
t53 = t63 ^ 2;
t104 = t53 * pkin(9);
t103 = t63 * pkin(9);
t19 = t25 * t66 + t34 * t63;
t13 = t19 * t62 - t23 * t65;
t102 = t13 * t65;
t15 = t19 * t65 + t23 * t62;
t101 = t15 * t62;
t100 = t17 * t66;
t99 = t19 * t63;
t98 = t37 * t63;
t51 = t58 ^ 2;
t97 = t51 * t59;
t91 = t62 * t17;
t90 = t62 * t63;
t89 = t62 * t65;
t88 = t62 * t66;
t87 = t63 * t17;
t86 = t63 * t23;
t85 = t65 * t17;
t84 = t65 * t63;
t83 = t65 * t66;
t82 = t66 * t23;
t52 = t62 ^ 2;
t54 = t65 ^ 2;
t81 = t52 + t54;
t79 = t61 * t111;
t78 = t63 * t109;
t76 = t62 * t84;
t6 = t10 * t66 + t63 * t8;
t4 = pkin(10) * t23 + t6;
t9 = -t34 * pkin(3) - t11;
t7 = t17 * pkin(4) - t19 * pkin(10) + t9;
t1 = -t4 * t62 + t65 * t7;
t2 = t4 * t65 + t62 * t7;
t75 = -t1 * t62 + t2 * t65;
t74 = -t5 * t63 + t6 * t66;
t39 = t60 * t63 + t66 * t95;
t27 = -t39 * t62 - t65 * t94;
t28 = t39 * t65 - t62 * t94;
t72 = -t27 * t62 + t28 * t65;
t41 = -pkin(4) * t66 - pkin(10) * t63 - pkin(3);
t31 = -pkin(9) * t88 + t41 * t65;
t32 = pkin(9) * t83 + t41 * t62;
t71 = -t31 * t62 + t32 * t65;
t70 = t39 * t66 + t98;
t69 = pkin(9) ^ 2;
t55 = t66 ^ 2;
t50 = t57 ^ 2;
t49 = t53 * t69;
t47 = t50 * t67 ^ 2;
t35 = -t56 * t80 + t46;
t14 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t51 * t56 ^ 2, 0.2e1 * t56 * t97, t56 * t79, t51 * t59 ^ 2, t59 * t79, t61 ^ 2, 0.2e1 * pkin(1) * t97 + 0.2e1 * t35 * t61, -0.2e1 * pkin(1) * t51 * t56 - 0.2e1 * t36 * t61, (-t35 * t56 + t36 * t59) * t111, pkin(1) ^ 2 * t51 + t35 ^ 2 + t36 ^ 2, t25 ^ 2, t25 * t112, 0.2e1 * t25 * t34, t115, t34 * t112, t34 ^ 2, 0.2e1 * t11 * t34 + 0.2e1 * t16 * t23, -0.2e1 * t12 * t34 + 0.2e1 * t16 * t25, -0.2e1 * t11 * t25 - 0.2e1 * t12 * t23, t11 ^ 2 + t12 ^ 2 + t16 ^ 2, t19 ^ 2, t19 * t113, 0.2e1 * t19 * t23, t116, t17 * t112, t115, 0.2e1 * t17 * t9 + 0.2e1 * t23 * t5, 0.2e1 * t19 * t9 - 0.2e1 * t23 * t6, -0.2e1 * t17 * t6 - 0.2e1 * t19 * t5, t5 ^ 2 + t6 ^ 2 + t9 ^ 2, t15 ^ 2, -0.2e1 * t15 * t13, 0.2e1 * t15 * t17, t13 ^ 2, t13 * t113, t116, 0.2e1 * t1 * t17 + 0.2e1 * t13 * t3, 0.2e1 * t15 * t3 - 0.2e1 * t17 * t2, -0.2e1 * t1 * t15 - 0.2e1 * t13 * t2, t1 ^ 2 + t2 ^ 2 + t3 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t93, t96, 0, -t58 * pkin(1), 0, 0, 0, 0, 0, 0, t23 * t60 + t34 * t94, t25 * t60 - t34 * t95, (-t23 * t64 - t25 * t67) * t57, t16 * t60 + (t11 * t67 + t12 * t64) * t57, 0, 0, 0, 0, 0, 0, -t17 * t94 - t23 * t37, -t19 * t94 - t23 * t39, -t17 * t39 + t19 * t37, -t37 * t5 + t39 * t6 - t9 * t94, 0, 0, 0, 0, 0, 0, t13 * t37 + t17 * t27, t15 * t37 - t17 * t28, -t13 * t28 - t15 * t27, t1 * t27 + t2 * t28 + t3 * t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50 * t64 ^ 2 + t60 ^ 2 + t47, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39 ^ 2 + t114 + t47, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27 ^ 2 + t28 ^ 2 + t114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, 0, -t23, t34, t11, -t12, 0, 0, t99, t19 * t66 - t87, t86, -t100, t82, 0, -pkin(3) * t17 - pkin(9) * t86 - t66 * t9, -pkin(3) * t19 - pkin(9) * t82 + t63 * t9, (t99 - t100) * pkin(9) + t74, -t9 * pkin(3) + pkin(9) * t74, t15 * t84, (-t101 - t102) * t63, -t15 * t66 + t17 * t84, t13 * t90, t13 * t66 - t62 * t87, -t100, -t1 * t66 + t31 * t17 + (pkin(9) * t13 + t106) * t63, -t32 * t17 + t2 * t66 + (pkin(9) * t15 + t105) * t63, -t32 * t13 - t31 * t15 + (-t1 * t65 - t2 * t62) * t63, t1 * t31 + t103 * t3 + t2 * t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t94, -t95, 0, 0, 0, 0, 0, 0, 0, 0, t66 * t94, -t63 * t94, t70, pkin(3) * t94 + pkin(9) * t70, 0, 0, 0, 0, 0, 0, -t27 * t66 + t37 * t90, t28 * t66 + t37 * t84, (-t27 * t65 - t28 * t62) * t63, pkin(9) * t98 + t27 * t31 + t28 * t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t53, t78, 0, t55, 0, 0, pkin(3) * t109, pkin(3) * t110, 0.2e1 * (t53 + t55) * pkin(9), pkin(3) ^ 2 + t55 * t69 + t49, t54 * t53, -0.2e1 * t53 * t89, t83 * t110, t52 * t53, t62 * t78, t55, 0.2e1 * t104 * t62 - 0.2e1 * t31 * t66, 0.2e1 * t104 * t65 + 0.2e1 * t32 * t66, 0.2e1 * (-t31 * t65 - t32 * t62) * t63, t31 ^ 2 + t32 ^ 2 + t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t19, 0, -t17, t23, t5, -t6, 0, 0, t101, -t13 * t62 + t15 * t65, t91, -t102, t85, 0, -pkin(4) * t13 - pkin(10) * t91 - t105, -pkin(4) * t15 - pkin(10) * t85 + t106, (t101 - t102) * pkin(10) + t75, -t3 * pkin(4) + pkin(10) * t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t37, -t39, 0, 0, 0, 0, 0, 0, 0, 0, -t37 * t65, t37 * t62, t72, -t37 * pkin(4) + pkin(10) * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, 0, t66, 0, -t103, -t66 * pkin(9), 0, 0, t76, (-t52 + t54) * t63, -t88, -t76, -t83, 0, -pkin(9) * t84 + (-pkin(4) * t63 + pkin(10) * t66) * t62, pkin(10) * t83 + (pkin(9) * t62 - t107) * t63, t71, -pkin(4) * t103 + pkin(10) * t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t52, 0.2e1 * t89, 0, t54, 0, 0, 0.2e1 * t107, -0.2e1 * pkin(4) * t62, 0.2e1 * t81 * pkin(10), pkin(10) ^ 2 * t81 + pkin(4) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, 0, -t13, t17, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, -t28, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, 0, -t90, -t66, t31, -t32, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, 0, t65, 0, -t62 * pkin(10), -t65 * pkin(10), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg = t14;
