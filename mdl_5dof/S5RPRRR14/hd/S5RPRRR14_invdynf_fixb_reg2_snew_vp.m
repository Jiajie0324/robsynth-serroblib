% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRRR14
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,alpha3,d1,d3,d4,d5,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:22
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRRR14_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR14_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR14_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR14_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR14_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S5RPRRR14_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:22:11
% EndTime: 2019-12-31 19:22:20
% DurationCPUTime: 9.30s
% Computational Cost: add. (81070->324), mult. (254335->525), div. (0->0), fcn. (215412->14), ass. (0->286)
t2223 = sin(pkin(5));
t2224 = cos(pkin(11));
t2225 = cos(pkin(6));
t2295 = t2224 * t2225;
t2222 = sin(pkin(6));
t2226 = cos(pkin(5));
t2298 = t2222 * t2226;
t2328 = qJD(1) * (t2223 * t2295 + t2298);
t2235 = qJD(1) ^ 2;
t2296 = t2223 * t2235;
t2230 = sin(qJ(1));
t2234 = cos(qJ(1));
t2214 = -t2234 * g(1) - t2230 * g(2);
t2291 = qJDD(1) * t2223;
t2191 = -t2235 * pkin(1) + qJ(2) * t2291 + t2214;
t2221 = sin(pkin(11));
t2242 = -pkin(8) * t2221 * t2222 - pkin(2) * t2224;
t2312 = t2242 * t2296;
t2313 = pkin(8) * qJDD(1);
t2241 = t2225 * t2313 + t2312;
t2299 = t2221 * t2223;
t2288 = qJD(1) * t2299;
t2213 = t2230 * g(1) - t2234 * g(2);
t2190 = qJDD(1) * pkin(1) + qJ(2) * t2296 + t2213;
t2303 = t2190 * t2226;
t2292 = -0.2e1 * qJD(2) * t2288 + t2224 * t2303;
t2297 = t2223 * t2224;
t2243 = -g(3) * t2297 + t2292;
t2281 = -t2226 * g(3) + qJDD(2);
t2183 = pkin(8) * t2328;
t2311 = qJD(1) * t2183;
t2192 = (-pkin(8) * t2225 * t2299 + pkin(2) * t2226) * qJD(1);
t2323 = (-t2183 * t2224 + t2192 * t2221) * qJD(1) - t2190;
t2327 = t2225 * ((qJDD(1) * pkin(2) + t2311) * t2226 + (-t2241 * t2223 - t2191) * t2221 + t2243) + t2222 * ((t2242 * qJDD(1) + t2323) * t2223 + t2281);
t2290 = qJDD(1) * t2224;
t2282 = t2223 * t2290;
t2289 = t2226 * qJDD(1);
t2326 = t2222 * t2289 + t2225 * t2282;
t2229 = sin(qJ(3));
t2233 = cos(qJ(3));
t2172 = (t2229 * t2298 + (t2221 * t2233 + t2229 * t2295) * t2223) * qJD(1);
t2184 = -qJD(3) - (-t2222 * t2297 + t2225 * t2226) * qJD(1);
t2228 = sin(qJ(4));
t2232 = cos(qJ(4));
t2159 = t2228 * t2172 + t2232 * t2184;
t2156 = qJD(5) + t2159;
t2324 = qJD(5) + t2156;
t2161 = t2232 * t2172 - t2228 * t2184;
t2170 = t2229 * t2288 - t2233 * t2328;
t2169 = qJD(4) + t2170;
t2227 = sin(qJ(5));
t2231 = cos(qJ(5));
t2138 = t2227 * t2161 - t2231 * t2169;
t2322 = t2138 ^ 2;
t2140 = t2231 * t2161 + t2227 * t2169;
t2321 = t2140 ^ 2;
t2320 = t2156 ^ 2;
t2319 = t2159 ^ 2;
t2318 = t2161 ^ 2;
t2317 = t2169 ^ 2;
t2316 = t2170 ^ 2;
t2315 = t2172 ^ 2;
t2314 = t2184 ^ 2;
t2309 = t2140 * t2138;
t2308 = t2161 * t2159;
t2307 = t2170 * t2184;
t2306 = t2172 * t2170;
t2304 = t2184 * t2172;
t2218 = t2223 ^ 2;
t2301 = t2218 * t2235;
t2300 = t2221 * t2191;
t2294 = qJD(4) - t2169;
t2293 = qJD(5) - t2156;
t2285 = 0.2e1 * qJD(2) * qJD(1) * t2297 + t2224 * t2191 + t2221 * t2303;
t2128 = (-qJD(1) * t2192 + t2222 * t2313) * t2226 + (-g(3) * t2221 + t2241 * t2224) * t2223 + t2285;
t2092 = t2233 * t2128 + t2327 * t2229;
t2148 = t2170 * pkin(3) - t2172 * pkin(9);
t2181 = -t2222 * t2282 + t2225 * t2289 + qJDD(3);
t2080 = -t2314 * pkin(3) + t2181 * pkin(9) - t2170 * t2148 + t2092;
t2112 = -t2222 * (pkin(2) * t2289 + t2226 * t2311 + t2292 - t2300) + t2225 * t2281 + (-t2222 * (-g(3) * t2224 - t2221 * t2312) + t2225 * (-pkin(2) * t2290 + t2323)) * t2223;
t2283 = t2221 * t2291;
t2276 = -t2172 * qJD(3) - t2229 * t2283 + t2326 * t2233;
t2131 = -t2276 - t2304;
t2151 = -t2170 * qJD(3) + t2326 * t2229 + t2233 * t2283;
t2278 = -t2151 - t2307;
t2236 = t2131 * pkin(3) + t2278 * pkin(9) + t2112;
t2054 = t2232 * t2080 + t2228 * t2236;
t2286 = t2226 * t2296;
t2053 = -t2228 * t2080 + t2232 * t2236;
t2249 = -t2232 * t2151 - t2228 * t2181;
t2122 = -t2159 * qJD(4) - t2249;
t2244 = qJDD(4) - t2276;
t2280 = -t2227 * t2122 + t2231 * t2244;
t2279 = t2169 * t2159 - t2122;
t2277 = t2228 * t2151 - t2232 * t2181;
t2274 = t2229 * t2128 - t2327 * t2233;
t2130 = t2159 * pkin(4) - t2161 * pkin(10);
t2045 = -t2317 * pkin(4) + t2244 * pkin(10) - t2159 * t2130 + t2054;
t2079 = -t2181 * pkin(3) - t2314 * pkin(9) + t2172 * t2148 + t2274;
t2107 = (qJD(4) + t2169) * t2161 + t2277;
t2052 = t2107 * pkin(4) + t2279 * pkin(10) + t2079;
t2031 = -t2227 * t2045 + t2231 * t2052;
t2032 = t2231 * t2045 + t2227 * t2052;
t2012 = -t2227 * t2031 + t2231 * t2032;
t2044 = -t2244 * pkin(4) - t2317 * pkin(10) + t2161 * t2130 - t2053;
t2008 = t2228 * t2012 - t2232 * t2044;
t2009 = t2232 * t2012 + t2228 * t2044;
t2011 = t2231 * t2031 + t2227 * t2032;
t2272 = t2009 * t2229 - t2011 * t2233;
t1996 = -t2222 * t2008 + t2272 * t2225;
t1999 = t2233 * t2009 + t2229 * t2011;
t2273 = t1996 * t2224 + t1999 * t2221;
t2034 = t2232 * t2053 + t2228 * t2054;
t2035 = -t2228 * t2053 + t2232 * t2054;
t2267 = t2035 * t2229 - t2079 * t2233;
t2014 = -t2222 * t2034 + t2267 * t2225;
t2028 = t2233 * t2035 + t2229 * t2079;
t2271 = t2014 * t2224 + t2028 * t2221;
t2085 = -t2293 * t2140 + t2280;
t2239 = -t2231 * t2122 - t2227 * t2244;
t2087 = t2293 * t2138 + t2239;
t2056 = t2231 * t2085 - t2227 * t2087;
t2103 = -t2321 - t2322;
t2042 = t2228 * t2056 - t2232 * t2103;
t2043 = t2232 * t2056 + t2228 * t2103;
t2055 = t2227 * t2085 + t2231 * t2087;
t2266 = t2043 * t2229 - t2055 * t2233;
t2017 = -t2222 * t2042 + t2266 * t2225;
t2033 = t2233 * t2043 + t2229 * t2055;
t2270 = t2017 * t2224 + t2033 * t2221;
t2240 = -t2161 * qJD(4) - qJDD(5) - t2277;
t2095 = -t2240 - t2309;
t2106 = -t2320 - t2322;
t2072 = -t2227 * t2095 + t2231 * t2106;
t2084 = t2324 * t2140 - t2280;
t2048 = t2228 * t2072 - t2232 * t2084;
t2049 = t2232 * t2072 + t2228 * t2084;
t2071 = t2231 * t2095 + t2227 * t2106;
t2264 = t2049 * t2229 - t2071 * t2233;
t2021 = -t2222 * t2048 + t2264 * t2225;
t2037 = t2233 * t2049 + t2229 * t2071;
t2269 = t2021 * t2224 + t2037 * t2221;
t2096 = t2240 - t2309;
t2113 = -t2320 - t2321;
t2076 = t2231 * t2096 - t2227 * t2113;
t2086 = -t2324 * t2138 - t2239;
t2050 = t2228 * t2076 - t2232 * t2086;
t2051 = t2232 * t2076 + t2228 * t2086;
t2075 = t2227 * t2096 + t2231 * t2113;
t2263 = t2051 * t2229 - t2075 * t2233;
t2023 = -t2222 * t2050 + t2263 * t2225;
t2039 = t2233 * t2051 + t2229 * t2075;
t2268 = t2023 * t2224 + t2039 * t2221;
t2108 = -t2294 * t2161 - t2277;
t2110 = t2294 * t2159 + t2249;
t2081 = t2228 * t2108 + t2232 * t2110;
t2082 = t2232 * t2108 - t2228 * t2110;
t2117 = -t2318 - t2319;
t2259 = t2082 * t2229 - t2117 * t2233;
t2047 = -t2222 * t2081 + t2259 * t2225;
t2070 = t2233 * t2082 + t2229 * t2117;
t2265 = t2047 * t2224 + t2070 * t2221;
t2258 = t2092 * t2229 - t2233 * t2274;
t2058 = -t2222 * t2112 + t2258 * t2225;
t2069 = t2233 * t2092 + t2229 * t2274;
t2262 = t2058 * t2224 + t2069 * t2221;
t2114 = t2244 - t2308;
t2123 = -t2317 - t2319;
t2097 = t2232 * t2114 + t2228 * t2123;
t2098 = -t2228 * t2114 + t2232 * t2123;
t2256 = t2098 * t2229 - t2107 * t2233;
t2062 = -t2222 * t2097 + t2256 * t2225;
t2074 = t2233 * t2098 + t2229 * t2107;
t2261 = t2062 * t2224 + t2074 * t2221;
t2115 = -t2244 - t2308;
t2127 = -t2317 - t2318;
t2099 = t2228 * t2115 + t2232 * t2127;
t2100 = t2232 * t2115 - t2228 * t2127;
t2255 = t2100 * t2229 + t2233 * t2279;
t2064 = -t2222 * t2099 + t2255 * t2225;
t2077 = t2233 * t2100 - t2229 * t2279;
t2260 = t2064 * t2224 + t2077 * t2221;
t2137 = -t2315 - t2316;
t2132 = t2276 - t2304;
t2134 = -t2151 + t2307;
t2252 = t2132 * t2229 + t2134 * t2233;
t2094 = -t2222 * t2137 + t2252 * t2225;
t2111 = t2233 * t2132 - t2229 * t2134;
t2257 = t2094 * t2224 + t2111 * t2221;
t2142 = -t2314 - t2316;
t2144 = t2181 - t2306;
t2251 = t2142 * t2229 + t2144 * t2233;
t2102 = -t2222 * t2131 + t2251 * t2225;
t2116 = t2233 * t2142 - t2229 * t2144;
t2254 = t2102 * t2224 + t2116 * t2221;
t2143 = -t2181 - t2306;
t2145 = -t2314 - t2315;
t2250 = t2143 * t2229 + t2145 * t2233;
t2105 = t2222 * t2278 + t2250 * t2225;
t2118 = t2233 * t2143 - t2229 * t2145;
t2253 = t2105 * t2224 + t2118 * t2221;
t2157 = t2243 - t2300;
t2158 = -g(3) * t2299 + t2285;
t2248 = t2157 * t2224 + t2158 * t2221;
t2203 = t2224 * t2286;
t2187 = t2203 - t2283;
t2202 = t2221 * t2286;
t2188 = t2202 + t2282;
t2247 = t2187 * t2224 + t2188 * t2221;
t2201 = t2224 * t2221 * t2301;
t2193 = t2201 + t2289;
t2219 = t2224 ^ 2;
t2220 = t2226 ^ 2;
t2197 = (-t2218 * t2219 - t2220) * t2235;
t2246 = t2193 * t2224 + t2197 * t2221;
t2194 = t2201 - t2289;
t2217 = t2221 ^ 2;
t2196 = (-t2217 * t2218 - t2220) * t2235;
t2245 = t2194 * t2221 + t2196 * t2224;
t2210 = -t2230 * qJDD(1) - t2234 * t2235;
t2209 = t2234 * qJDD(1) - t2230 * t2235;
t2195 = (-t2217 - t2219) * t2301;
t2189 = t2202 - t2282;
t2186 = t2203 + t2283;
t2173 = -t2223 * t2190 + t2281;
t2165 = t2224 * t2194 - t2221 * t2196;
t2164 = -t2221 * t2193 + t2224 * t2197;
t2162 = -t2221 * t2187 + t2224 * t2188;
t2155 = -t2223 * t2186 + t2245 * t2226;
t2154 = -t2223 * t2189 + t2246 * t2226;
t2153 = t2226 * t2186 + t2245 * t2223;
t2152 = t2226 * t2189 + t2246 * t2223;
t2150 = -t2223 * t2195 + t2247 * t2226;
t2149 = t2226 * t2195 + t2247 * t2223;
t2129 = -t2221 * t2157 + t2224 * t2158;
t2120 = -t2223 * t2173 + t2248 * t2226;
t2119 = t2226 * t2173 + t2248 * t2223;
t2104 = t2250 * t2222 - t2225 * t2278;
t2101 = t2225 * t2131 + t2251 * t2222;
t2093 = t2225 * t2137 + t2252 * t2222;
t2090 = -t2221 * t2105 + t2224 * t2118;
t2083 = -t2221 * t2102 + t2224 * t2116;
t2073 = -t2221 * t2094 + t2224 * t2111;
t2068 = -t2223 * t2104 + t2253 * t2226;
t2067 = t2226 * t2104 + t2253 * t2223;
t2066 = -t2223 * t2101 + t2254 * t2226;
t2065 = t2226 * t2101 + t2254 * t2223;
t2063 = t2225 * t2099 + t2255 * t2222;
t2061 = t2225 * t2097 + t2256 * t2222;
t2060 = -t2223 * t2093 + t2257 * t2226;
t2059 = t2226 * t2093 + t2257 * t2223;
t2057 = t2225 * t2112 + t2258 * t2222;
t2046 = t2225 * t2081 + t2259 * t2222;
t2041 = -t2221 * t2064 + t2224 * t2077;
t2040 = -t2221 * t2062 + t2224 * t2074;
t2038 = -t2221 * t2058 + t2224 * t2069;
t2036 = -t2221 * t2047 + t2224 * t2070;
t2030 = -t2223 * t2063 + t2260 * t2226;
t2029 = t2226 * t2063 + t2260 * t2223;
t2027 = -t2223 * t2061 + t2261 * t2226;
t2026 = t2226 * t2061 + t2261 * t2223;
t2025 = -t2223 * t2057 + t2262 * t2226;
t2024 = t2226 * t2057 + t2262 * t2223;
t2022 = t2225 * t2050 + t2263 * t2222;
t2020 = t2225 * t2048 + t2264 * t2222;
t2019 = -t2223 * t2046 + t2265 * t2226;
t2018 = t2226 * t2046 + t2265 * t2223;
t2016 = t2225 * t2042 + t2266 * t2222;
t2015 = -t2221 * t2023 + t2224 * t2039;
t2013 = t2225 * t2034 + t2267 * t2222;
t2010 = -t2221 * t2021 + t2224 * t2037;
t2007 = -t2221 * t2017 + t2224 * t2033;
t2006 = -t2221 * t2014 + t2224 * t2028;
t2005 = -t2223 * t2022 + t2268 * t2226;
t2004 = t2226 * t2022 + t2268 * t2223;
t2003 = -t2223 * t2020 + t2269 * t2226;
t2002 = t2226 * t2020 + t2269 * t2223;
t2001 = -t2223 * t2016 + t2270 * t2226;
t2000 = t2226 * t2016 + t2270 * t2223;
t1998 = -t2223 * t2013 + t2271 * t2226;
t1997 = t2226 * t2013 + t2271 * t2223;
t1995 = t2225 * t2008 + t2272 * t2222;
t1994 = -t2221 * t1996 + t2224 * t1999;
t1993 = -t2223 * t1995 + t2273 * t2226;
t1992 = t2226 * t1995 + t2273 * t2223;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2210, -t2209, 0, -t2230 * t2213 + t2234 * t2214, 0, 0, 0, 0, 0, 0, -t2230 * t2154 + t2234 * t2164, -t2230 * t2155 + t2234 * t2165, -t2230 * t2150 + t2234 * t2162, -t2230 * t2120 + t2234 * t2129, 0, 0, 0, 0, 0, 0, -t2230 * t2066 + t2234 * t2083, -t2230 * t2068 + t2234 * t2090, -t2230 * t2060 + t2234 * t2073, -t2230 * t2025 + t2234 * t2038, 0, 0, 0, 0, 0, 0, -t2230 * t2027 + t2234 * t2040, -t2230 * t2030 + t2234 * t2041, -t2230 * t2019 + t2234 * t2036, -t2230 * t1998 + t2234 * t2006, 0, 0, 0, 0, 0, 0, -t2230 * t2003 + t2234 * t2010, -t2230 * t2005 + t2234 * t2015, -t2230 * t2001 + t2234 * t2007, -t2230 * t1993 + t2234 * t1994; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2209, t2210, 0, t2234 * t2213 + t2230 * t2214, 0, 0, 0, 0, 0, 0, t2234 * t2154 + t2230 * t2164, t2234 * t2155 + t2230 * t2165, t2234 * t2150 + t2230 * t2162, t2234 * t2120 + t2230 * t2129, 0, 0, 0, 0, 0, 0, t2234 * t2066 + t2230 * t2083, t2234 * t2068 + t2230 * t2090, t2234 * t2060 + t2230 * t2073, t2234 * t2025 + t2230 * t2038, 0, 0, 0, 0, 0, 0, t2234 * t2027 + t2230 * t2040, t2234 * t2030 + t2230 * t2041, t2234 * t2019 + t2230 * t2036, t2234 * t1998 + t2230 * t2006, 0, 0, 0, 0, 0, 0, t2234 * t2003 + t2230 * t2010, t2234 * t2005 + t2230 * t2015, t2234 * t2001 + t2230 * t2007, t2234 * t1993 + t2230 * t1994; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2152, t2153, t2149, t2119, 0, 0, 0, 0, 0, 0, t2065, t2067, t2059, t2024, 0, 0, 0, 0, 0, 0, t2026, t2029, t2018, t1997, 0, 0, 0, 0, 0, 0, t2002, t2004, t2000, t1992; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2235, -qJDD(1), 0, t2214, 0, 0, 0, 0, 0, 0, t2164, t2165, t2162, t2129, 0, 0, 0, 0, 0, 0, t2083, t2090, t2073, t2038, 0, 0, 0, 0, 0, 0, t2040, t2041, t2036, t2006, 0, 0, 0, 0, 0, 0, t2010, t2015, t2007, t1994; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2235, 0, t2213, 0, 0, 0, 0, 0, 0, t2154, t2155, t2150, t2120, 0, 0, 0, 0, 0, 0, t2066, t2068, t2060, t2025, 0, 0, 0, 0, 0, 0, t2027, t2030, t2019, t1998, 0, 0, 0, 0, 0, 0, t2003, t2005, t2001, t1993; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2152, t2153, t2149, t2119, 0, 0, 0, 0, 0, 0, t2065, t2067, t2059, t2024, 0, 0, 0, 0, 0, 0, t2026, t2029, t2018, t1997, 0, 0, 0, 0, 0, 0, t2002, t2004, t2000, t1992; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2197, t2194, t2188, t2158, 0, 0, 0, 0, 0, 0, t2116, t2118, t2111, t2069, 0, 0, 0, 0, 0, 0, t2074, t2077, t2070, t2028, 0, 0, 0, 0, 0, 0, t2037, t2039, t2033, t1999; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2193, t2196, t2187, t2157, 0, 0, 0, 0, 0, 0, t2102, t2105, t2094, t2058, 0, 0, 0, 0, 0, 0, t2062, t2064, t2047, t2014, 0, 0, 0, 0, 0, 0, t2021, t2023, t2017, t1996; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2189, t2186, t2195, t2173, 0, 0, 0, 0, 0, 0, t2101, t2104, t2093, t2057, 0, 0, 0, 0, 0, 0, t2061, t2063, t2046, t2013, 0, 0, 0, 0, 0, 0, t2020, t2022, t2016, t1995; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2142, t2143, t2132, t2092, 0, 0, 0, 0, 0, 0, t2098, t2100, t2082, t2035, 0, 0, 0, 0, 0, 0, t2049, t2051, t2043, t2009; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2144, t2145, t2134, -t2274, 0, 0, 0, 0, 0, 0, -t2107, t2279, -t2117, -t2079, 0, 0, 0, 0, 0, 0, -t2071, -t2075, -t2055, -t2011; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2131, -t2278, t2137, t2112, 0, 0, 0, 0, 0, 0, t2097, t2099, t2081, t2034, 0, 0, 0, 0, 0, 0, t2048, t2050, t2042, t2008; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2123, t2115, t2108, t2054, 0, 0, 0, 0, 0, 0, t2072, t2076, t2056, t2012; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2114, t2127, t2110, t2053, 0, 0, 0, 0, 0, 0, -t2084, -t2086, -t2103, -t2044; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2107, -t2279, t2117, t2079, 0, 0, 0, 0, 0, 0, t2071, t2075, t2055, t2011; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2106, t2096, t2085, t2032; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2095, t2113, t2087, t2031; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2084, t2086, t2103, t2044;];
f_new_reg = t1;
