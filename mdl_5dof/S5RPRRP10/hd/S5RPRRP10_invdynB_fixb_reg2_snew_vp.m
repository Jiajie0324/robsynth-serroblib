% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRRP10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:52
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRRP10_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP10_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP10_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP10_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP10_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP10_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:52:12
% EndTime: 2019-12-31 18:52:21
% DurationCPUTime: 8.36s
% Computational Cost: add. (32726->512), mult. (78460->737), div. (0->0), fcn. (57554->8), ass. (0->375)
t613 = sin(qJ(4));
t610 = sin(pkin(8));
t611 = cos(pkin(8));
t614 = sin(qJ(3));
t617 = cos(qJ(3));
t632 = t610 * t617 + t611 * t614;
t585 = t632 * qJD(1);
t616 = cos(qJ(4));
t564 = -t616 * qJD(3) + t585 * t613;
t566 = qJD(3) * t613 + t585 * t616;
t523 = t566 * t564;
t650 = qJDD(1) * t611;
t662 = t610 * t614;
t581 = qJDD(1) * t662 - t617 * t650;
t653 = t585 * qJD(3);
t543 = -t581 - t653;
t535 = qJDD(4) - t543;
t636 = -t535 + t523;
t673 = t636 * t613;
t672 = t636 * t616;
t615 = sin(qJ(1));
t618 = cos(qJ(1));
t596 = g(1) * t618 + t615 * g(2);
t710 = -0.2e1 * qJD(2) * qJD(1) + t596;
t706 = t636 * pkin(4);
t583 = (-t611 * t617 + t662) * qJD(1);
t548 = t585 * t583;
t703 = qJDD(3) - t548;
t709 = t614 * t703;
t708 = t617 * t703;
t619 = qJD(1) ^ 2;
t707 = -pkin(1) * t619 + qJDD(1) * qJ(2) - t710;
t595 = g(1) * t615 - t618 * g(2);
t633 = -qJDD(2) + t595;
t641 = pkin(2) * t611 + pkin(1);
t607 = t610 ^ 2;
t608 = t611 ^ 2;
t656 = t607 + t608;
t538 = t641 * qJDD(1) + (t656 * pkin(6) + qJ(2)) * t619 + t633;
t576 = qJD(4) + t583;
t531 = t576 * t564;
t654 = t583 * qJD(3);
t704 = t632 * qJDD(1);
t545 = t704 - t654;
t627 = qJD(4) * t564 - qJDD(3) * t613 - t545 * t616;
t705 = -t531 - t627;
t701 = t619 * t656;
t635 = -t616 * qJDD(3) + t545 * t613;
t476 = (qJD(4) - t576) * t566 + t635;
t562 = t564 ^ 2;
t563 = t566 ^ 2;
t575 = t576 ^ 2;
t579 = t583 ^ 2;
t580 = t585 ^ 2;
t699 = qJD(3) ^ 2;
t508 = -t575 - t562;
t441 = t508 * t613 - t672;
t698 = pkin(3) * t441;
t515 = -t563 - t575;
t491 = t523 + t535;
t675 = t491 * t613;
t449 = t515 * t616 - t675;
t697 = pkin(3) * t449;
t696 = pkin(3) * t614;
t480 = -t531 + t627;
t424 = -t476 * t616 - t480 * t613;
t499 = -t562 - t563;
t397 = t424 * t614 - t499 * t617;
t398 = t424 * t617 + t499 * t614;
t353 = -t397 * t610 + t398 * t611;
t422 = -t476 * t613 + t480 * t616;
t325 = t615 * t353 - t422 * t618;
t695 = pkin(5) * t325;
t442 = t508 * t616 + t673;
t475 = (qJD(4) + t576) * t566 + t635;
t406 = t442 * t614 - t475 * t617;
t407 = t442 * t617 + t475 * t614;
t361 = -t406 * t610 + t407 * t611;
t339 = t615 * t361 - t441 * t618;
t694 = pkin(5) * t339;
t674 = t491 * t616;
t450 = -t515 * t613 - t674;
t412 = t450 * t614 - t617 * t705;
t413 = t450 * t617 + t614 * t705;
t364 = -t412 * t610 + t413 * t611;
t342 = t615 * t364 - t449 * t618;
t693 = pkin(5) * t342;
t692 = pkin(6) * t397;
t691 = pkin(6) * t406;
t690 = pkin(6) * t412;
t689 = pkin(7) * t422;
t688 = pkin(7) * t441;
t687 = pkin(7) * t449;
t686 = t611 * g(3);
t352 = t397 * t611 + t398 * t610;
t685 = qJ(2) * t352;
t360 = t406 * t611 + t407 * t610;
t684 = qJ(2) * t360;
t363 = t412 * t611 + t413 * t610;
t683 = qJ(2) * t363;
t682 = qJDD(1) * pkin(1);
t550 = -g(3) * t610 + t707 * t611;
t602 = t608 * t619;
t530 = -pkin(2) * t602 + pkin(6) * t650 + t550;
t622 = -t686 + (t641 * t619 + (-pkin(6) - qJ(2)) * qJDD(1) + t710) * t610;
t484 = t617 * t530 + t614 * t622;
t536 = pkin(3) * t583 - pkin(7) * t585;
t452 = -t699 * pkin(3) + qJDD(3) * pkin(7) - t536 * t583 + t484;
t456 = (-t545 + t654) * pkin(7) + (-t543 + t653) * pkin(3) - t538;
t657 = -t613 * t452 + t616 * t456;
t642 = -qJ(5) * t627 - t657;
t630 = -qJ(5) * t531 - t642;
t655 = qJD(5) * t566;
t365 = t630 - 0.2e1 * t655 - t706;
t681 = t365 * t613;
t680 = t365 * t616;
t483 = t530 * t614 - t617 * t622;
t430 = -t483 * t617 + t484 * t614;
t679 = t430 * t610;
t678 = t430 * t611;
t451 = -qJDD(3) * pkin(3) - t699 * pkin(7) + t536 * t585 + t483;
t677 = t451 * t613;
t676 = t451 * t616;
t671 = t538 * t614;
t670 = t538 * t617;
t540 = qJDD(3) + t548;
t669 = t540 * t614;
t668 = t540 * t617;
t667 = t576 * t613;
t666 = t576 * t616;
t577 = qJ(2) * t619 + t633 + t682;
t665 = t577 * t618;
t664 = t607 * t619;
t663 = t610 * t611;
t661 = t615 * t577;
t660 = -pkin(1) * t422 + qJ(2) * t353;
t659 = -pkin(1) * t441 + qJ(2) * t361;
t658 = -pkin(1) * t449 + qJ(2) * t364;
t401 = t616 * t452 + t613 * t456;
t649 = qJDD(1) * t618;
t648 = t615 * qJDD(1);
t646 = t614 * t523;
t645 = t617 * t523;
t644 = t618 * t548;
t643 = t615 * t548;
t640 = -pkin(3) * t617 - pkin(2);
t639 = -pkin(2) * t441 + pkin(6) * t407;
t638 = -pkin(2) * t449 + pkin(6) * t413;
t637 = t577 + t682;
t431 = t483 * t614 + t617 * t484;
t549 = t707 * t610 + t686;
t507 = t549 * t610 + t611 * t550;
t561 = -t595 * t615 - t618 * t596;
t594 = -t615 * t619 + t649;
t634 = -pkin(5) * t594 - g(3) * t615;
t354 = t401 * t613 + t616 * t657;
t355 = t401 * t616 - t613 * t657;
t506 = t549 * t611 - t550 * t610;
t560 = t595 * t618 - t615 * t596;
t593 = t618 * t619 + t648;
t587 = t611 * t701;
t557 = -t615 * t587 + t611 * t649;
t631 = t587 * t618 + t611 * t648;
t503 = -qJD(4) * t566 - t635;
t526 = pkin(4) * t576 - qJ(5) * t566;
t629 = t503 * qJ(5) - 0.2e1 * qJD(5) * t564 - t526 * t576 + t401;
t626 = -pkin(1) * t352 - pkin(2) * t397 + pkin(3) * t499 - pkin(7) * t424;
t625 = -pkin(1) * t360 - pkin(2) * t406 + pkin(3) * t475 - pkin(7) * t442;
t624 = -pkin(1) * t363 - pkin(2) * t412 + pkin(3) * t705 - pkin(7) * t450;
t394 = -t503 * pkin(4) - t562 * qJ(5) + t526 * t566 + qJDD(5) + t451;
t601 = t608 * qJDD(1);
t600 = t607 * qJDD(1);
t592 = t602 - t664;
t591 = t602 + t664;
t590 = t601 - t600;
t589 = t601 + t600;
t586 = t610 * t701;
t578 = -pkin(5) * t593 + g(3) * t618;
t571 = -t580 - t699;
t570 = -t580 + t699;
t569 = t579 - t699;
t568 = t594 * t663;
t567 = t593 * t663;
t558 = t586 * t618 + t610 * t648;
t556 = t615 * t586 - t610 * t649;
t554 = 0.2e1 * t655;
t552 = t589 * t618 - t615 * t591;
t551 = t615 * t589 + t591 * t618;
t547 = -t580 + t579;
t544 = t704 - 0.2e1 * t654;
t542 = t581 + 0.2e1 * t653;
t537 = -t699 - t579;
t534 = (-t583 * t617 + t585 * t614) * qJD(3);
t533 = (-t583 * t614 - t585 * t617) * qJD(3);
t529 = -t563 + t575;
t528 = t562 - t575;
t522 = -t579 - t580;
t521 = -t563 + t562;
t519 = t545 * t617 - t614 * t653;
t518 = t545 * t614 + t617 * t653;
t517 = -t543 * t614 + t617 * t654;
t516 = t543 * t617 + t614 * t654;
t514 = -t571 * t614 - t668;
t513 = -t570 * t614 + t708;
t512 = t569 * t617 - t669;
t511 = t571 * t617 - t669;
t510 = t570 * t617 + t709;
t509 = t569 * t614 + t668;
t498 = -t542 * t617 - t544 * t614;
t497 = -t581 * t617 + t614 * t704;
t496 = -t542 * t614 + t544 * t617;
t495 = -t581 * t614 - t617 * t704;
t494 = t537 * t617 - t709;
t493 = t537 * t614 + t708;
t489 = (-t564 * t616 + t566 * t613) * t576;
t488 = (t564 * t613 + t566 * t616) * t576;
t487 = -t533 * t610 + t534 * t611;
t486 = t507 * t618 - t661;
t485 = t615 * t507 + t665;
t481 = -pkin(6) * t511 - t670;
t474 = -pkin(6) * t493 - t671;
t473 = -t566 * t667 - t616 * t627;
t472 = -t566 * t666 + t613 * t627;
t471 = -t503 * t613 + t564 * t666;
t470 = -t503 * t616 - t564 * t667;
t469 = -t518 * t610 + t519 * t611;
t468 = -t516 * t610 + t517 * t611;
t467 = -t511 * t610 + t514 * t611;
t466 = -t510 * t610 + t513 * t611;
t465 = -t509 * t610 + t512 * t611;
t464 = t511 * t611 + t514 * t610;
t463 = t489 * t617 + t535 * t614;
t462 = t489 * t614 - t535 * t617;
t461 = t528 * t616 - t675;
t460 = -t529 * t613 - t672;
t459 = -t528 * t613 - t674;
t458 = -t529 * t616 + t673;
t457 = -pkin(2) * t544 + pkin(6) * t514 - t671;
t453 = -pkin(2) * t542 + pkin(6) * t494 + t670;
t445 = -t496 * t610 + t498 * t611;
t444 = -t495 * t610 + t497 * t611;
t443 = t495 * t611 + t497 * t610;
t440 = -t493 * t610 + t494 * t611;
t439 = t493 * t611 + t494 * t610;
t437 = t467 * t618 + t615 * t544;
t436 = t615 * t467 - t544 * t618;
t435 = t473 * t617 + t646;
t434 = t471 * t617 - t646;
t433 = t473 * t614 - t645;
t432 = t471 * t614 + t645;
t429 = -pkin(4) * t705 - qJ(5) * t491;
t428 = t440 * t618 + t615 * t542;
t427 = t615 * t440 - t542 * t618;
t426 = t444 * t618 + t615 * t522;
t425 = t615 * t444 - t522 * t618;
t423 = -t475 * t616 - t613 * t705;
t421 = t475 * t613 - t616 * t705;
t419 = pkin(2) * t538 + pkin(6) * t431;
t418 = -pkin(1) * t443 - pkin(2) * t495;
t417 = t461 * t617 - t476 * t614;
t416 = t460 * t617 - t480 * t614;
t415 = t461 * t614 + t476 * t617;
t414 = t460 * t614 + t480 * t617;
t410 = -pkin(6) * t495 - t430;
t409 = -t462 * t610 + t463 * t611;
t408 = t462 * t611 + t463 * t610;
t404 = t423 * t617 - t521 * t614;
t403 = t423 * t614 + t521 * t617;
t402 = -pkin(1) * t464 - pkin(2) * t511 + t484;
t399 = t676 - t687;
t396 = pkin(6) * t398;
t395 = t677 - t688;
t393 = -pkin(2) * t522 + pkin(6) * t497 + t431;
t392 = -pkin(1) * t439 - pkin(2) * t493 + t483;
t391 = -pkin(3) * t422 - pkin(4) * t480;
t390 = -t433 * t610 + t435 * t611;
t389 = -t432 * t610 + t434 * t611;
t388 = t433 * t611 + t435 * t610;
t387 = t432 * t611 + t434 * t610;
t386 = t409 * t618 - t615 * t488;
t385 = t615 * t409 + t488 * t618;
t384 = -qJ(2) * t464 - t457 * t610 + t481 * t611;
t383 = -qJ(5) * t515 + t394;
t382 = t431 * t611 - t679;
t381 = t431 * t610 + t678;
t380 = -qJ(2) * t439 - t453 * t610 + t474 * t611;
t379 = t382 * t618 - t615 * t538;
t378 = t615 * t382 + t538 * t618;
t377 = t401 - t697;
t376 = -t657 - t698;
t375 = t390 * t618 - t615 * t472;
t374 = t389 * t618 - t615 * t470;
t373 = t615 * t390 + t472 * t618;
t372 = t615 * t389 + t470 * t618;
t371 = -pkin(4) * t562 + t629;
t370 = -pkin(4) * t475 + qJ(5) * t508 - t394;
t369 = -t415 * t610 + t417 * t611;
t368 = -t414 * t610 + t416 * t611;
t367 = t415 * t611 + t417 * t610;
t366 = t414 * t611 + t416 * t610;
t358 = -t403 * t610 + t404 * t611;
t357 = t403 * t611 + t404 * t610;
t356 = -pkin(1) * t381 - pkin(2) * t430;
t350 = t554 + (-t480 + t531) * qJ(5) + t706 + t642;
t349 = t369 * t618 - t615 * t459;
t348 = t368 * t618 - t615 * t458;
t347 = t615 * t369 + t459 * t618;
t346 = t615 * t368 + t458 * t618;
t345 = -qJ(5) * t476 + (-t499 - t562) * pkin(4) + t629;
t344 = -t697 + (-t515 - t562) * pkin(4) + t629;
t343 = t364 * t618 + t615 * t449;
t341 = pkin(5) * t343;
t340 = t361 * t618 + t615 * t441;
t338 = pkin(5) * t340;
t337 = t383 * t616 - t429 * t613 - t687;
t336 = qJ(5) * t672 - t370 * t613 - t688;
t335 = -qJ(2) * t443 - t393 * t610 + t410 * t611;
t334 = t355 * t617 + t451 * t614;
t333 = t355 * t614 - t451 * t617;
t332 = t554 - t630 - t698 + 0.2e1 * t706;
t331 = -pkin(4) * t394 + qJ(5) * t371;
t330 = t358 * t618 - t615 * t421;
t329 = t615 * t358 + t421 * t618;
t328 = -pkin(6) * t678 - qJ(2) * t381 - t419 * t610;
t327 = -t354 - t689;
t326 = t353 * t618 + t615 * t422;
t324 = pkin(5) * t326;
t323 = t371 * t616 - t681;
t322 = t371 * t613 + t680;
t321 = -t377 * t614 + t399 * t617 - t690;
t320 = -t376 * t614 + t395 * t617 - t691;
t319 = t377 * t617 + t399 * t614 + t638;
t318 = t376 * t617 + t395 * t614 + t639;
t317 = t624 - t677;
t316 = t625 + t676;
t315 = t323 * t617 + t394 * t614;
t314 = t323 * t614 - t394 * t617;
t313 = t327 * t617 + t422 * t696 - t692;
t312 = -t333 * t610 + t334 * t611;
t311 = t333 * t611 + t334 * t610;
t310 = -pkin(3) * t322 - pkin(4) * t365;
t309 = -t345 * t613 + t350 * t616 - t689;
t308 = t327 * t614 + t640 * t422 + t396;
t307 = -t383 * t613 - t429 * t616 + t624;
t306 = -qJ(5) * t673 - t370 * t616 + t625;
t305 = t337 * t617 - t344 * t614 - t690;
t304 = -t332 * t614 + t336 * t617 - t691;
t303 = -t355 + t626;
t302 = t337 * t614 + t344 * t617 + t638;
t301 = t332 * t617 + t336 * t614 + t639;
t300 = -pkin(6) * t333 + (-pkin(7) * t617 + t696) * t354;
t299 = t312 * t618 + t615 * t354;
t298 = t615 * t312 - t354 * t618;
t297 = t309 * t617 - t391 * t614 - t692;
t296 = -pkin(7) * t322 - qJ(5) * t680 - t331 * t613;
t295 = -pkin(2) * t422 + t309 * t614 + t391 * t617 + t396;
t294 = -t345 * t616 - t350 * t613 + t626;
t293 = pkin(6) * t334 + (-pkin(7) * t614 + t640) * t354;
t292 = -t314 * t610 + t315 * t611;
t291 = t314 * t611 + t315 * t610;
t290 = -t319 * t610 + t321 * t611 - t683;
t289 = -t318 * t610 + t320 * t611 - t684;
t288 = -pkin(1) * t311 - pkin(2) * t333 + pkin(3) * t451 - pkin(7) * t355;
t287 = -t308 * t610 + t313 * t611 - t685;
t286 = t292 * t618 + t615 * t322;
t285 = t615 * t292 - t322 * t618;
t284 = -t302 * t610 + t305 * t611 - t683;
t283 = -t301 * t610 + t304 * t611 - t684;
t282 = -pkin(6) * t314 + t296 * t617 - t310 * t614;
t281 = -t295 * t610 + t297 * t611 - t685;
t280 = -qJ(2) * t311 - t293 * t610 + t300 * t611;
t279 = -pkin(2) * t322 + pkin(6) * t315 + t296 * t614 + t310 * t617;
t278 = -pkin(1) * t291 - pkin(2) * t314 + pkin(3) * t394 - pkin(7) * t323 + qJ(5) * t681 - t331 * t616;
t277 = -qJ(2) * t291 - t279 * t610 + t282 * t611;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t593, -t594, 0, t561, 0, 0, 0, 0, 0, 0, -t631, t558, t552, t486, 0, 0, 0, 0, 0, 0, t428, t437, t426, t379, 0, 0, 0, 0, 0, 0, t340, t343, t326, t299, 0, 0, 0, 0, 0, 0, t340, t343, t326, t286; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t594, -t593, 0, t560, 0, 0, 0, 0, 0, 0, t557, t556, t551, t485, 0, 0, 0, 0, 0, 0, t427, t436, t425, t378, 0, 0, 0, 0, 0, 0, t339, t342, t325, t298, 0, 0, 0, 0, 0, 0, t339, t342, t325, t285; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t506, 0, 0, 0, 0, 0, 0, t439, t464, t443, t381, 0, 0, 0, 0, 0, 0, t360, t363, t352, t311, 0, 0, 0, 0, 0, 0, t360, t363, t352, t291; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t594, 0, -t593, 0, t634, -t578, -t560, -pkin(5) * t560, t568, t590 * t618 - t615 * t592, t558, -t568, t631, 0, -pkin(5) * t557 - t615 * t549 - t610 * t665, -pkin(5) * t556 - t615 * t550 - t611 * t665, -pkin(5) * t551 + t506 * t618, -pkin(5) * t485 - (pkin(1) * t615 - qJ(2) * t618) * t506, t469 * t618 + t643, t445 * t618 - t615 * t547, t466 * t618 + t615 * t704, t468 * t618 - t643, t465 * t618 - t615 * t581, t615 * qJDD(3) + t487 * t618, -pkin(5) * t427 + t380 * t618 - t615 * t392, -pkin(5) * t436 + t384 * t618 - t615 * t402, -pkin(5) * t425 + t335 * t618 - t615 * t418, -pkin(5) * t378 + t328 * t618 - t615 * t356, t375, t330, t348, t374, t349, t386, t289 * t618 - t615 * t316 - t694, t290 * t618 - t615 * t317 - t693, t287 * t618 - t615 * t303 - t695, -pkin(5) * t298 + t280 * t618 - t615 * t288, t375, t330, t348, t374, t349, t386, t283 * t618 - t615 * t306 - t694, t284 * t618 - t615 * t307 - t693, t281 * t618 - t615 * t294 - t695, -pkin(5) * t285 + t277 * t618 - t615 * t278; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t593, 0, t594, 0, t578, t634, t561, pkin(5) * t561, t567, t615 * t590 + t592 * t618, t556, -t567, -t557, 0, -pkin(5) * t631 + t549 * t618 - t610 * t661, pkin(5) * t558 + t550 * t618 - t611 * t661, pkin(5) * t552 + t506 * t615, pkin(5) * t486 - (-pkin(1) * t618 - qJ(2) * t615) * t506, t615 * t469 - t644, t615 * t445 + t547 * t618, t615 * t466 - t618 * t704, t615 * t468 + t644, t615 * t465 + t581 * t618, -t618 * qJDD(3) + t615 * t487, pkin(5) * t428 + t615 * t380 + t392 * t618, pkin(5) * t437 + t615 * t384 + t402 * t618, pkin(5) * t426 + t615 * t335 + t418 * t618, pkin(5) * t379 + t615 * t328 + t356 * t618, t373, t329, t346, t372, t347, t385, t615 * t289 + t316 * t618 + t338, t615 * t290 + t317 * t618 + t341, t615 * t287 + t303 * t618 + t324, pkin(5) * t299 + t615 * t280 + t288 * t618, t373, t329, t346, t372, t347, t385, t615 * t283 + t306 * t618 + t338, t615 * t284 + t307 * t618 + t341, t615 * t281 + t294 * t618 + t324, pkin(5) * t286 + t615 * t277 + t278 * t618; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t595, t596, 0, 0, t600, 0.2e1 * t610 * t650, 0, t601, 0, 0, -qJ(2) * t587 + t637 * t611, qJ(2) * t586 - t637 * t610, pkin(1) * t591 + qJ(2) * t589 + t507, pkin(1) * t577 + qJ(2) * t507, t518 * t611 + t519 * t610, t496 * t611 + t498 * t610, t510 * t611 + t513 * t610, t516 * t611 + t517 * t610, t509 * t611 + t512 * t610, t533 * t611 + t534 * t610, -pkin(1) * t542 + qJ(2) * t440 + t453 * t611 + t474 * t610, -pkin(1) * t544 + qJ(2) * t467 + t457 * t611 + t481 * t610, -pkin(1) * t522 + qJ(2) * t444 + t393 * t611 + t410 * t610, pkin(1) * t538 - pkin(6) * t679 + qJ(2) * t382 + t419 * t611, t388, t357, t366, t387, t367, t408, t318 * t611 + t320 * t610 + t659, t319 * t611 + t321 * t610 + t658, t308 * t611 + t313 * t610 + t660, -pkin(1) * t354 + qJ(2) * t312 + t293 * t611 + t300 * t610, t388, t357, t366, t387, t367, t408, t301 * t611 + t304 * t610 + t659, t302 * t611 + t305 * t610 + t658, t295 * t611 + t297 * t610 + t660, -pkin(1) * t322 + qJ(2) * t292 + t279 * t611 + t610 * t282;];
tauB_reg = t1;
