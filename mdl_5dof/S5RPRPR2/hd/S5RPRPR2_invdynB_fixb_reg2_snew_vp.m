% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:50
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRPR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR2_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR2_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR2_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:49:44
% EndTime: 2019-12-05 17:49:56
% DurationCPUTime: 10.53s
% Computational Cost: add. (36153->447), mult. (54314->677), div. (0->0), fcn. (34125->10), ass. (0->303)
t494 = cos(qJ(3));
t482 = qJDD(1) + qJDD(3);
t491 = sin(qJ(3));
t529 = t491 * t482;
t484 = (qJD(1) + qJD(3));
t544 = t484 ^ 2;
t456 = t494 * t544 + t529;
t522 = t494 * t482;
t528 = t491 * t544;
t459 = -t522 + t528;
t487 = sin(pkin(8));
t489 = cos(pkin(8));
t402 = t489 * t456 - t487 * t459;
t485 = g(1) - qJDD(2);
t432 = pkin(6) * t456 - t494 * t485;
t560 = pkin(6) * t459 - t491 * t485;
t337 = qJ(2) * t402 + t489 * t432 - t487 * t560;
t492 = sin(qJ(1));
t495 = cos(qJ(1));
t406 = t487 * t456 + t489 * t459;
t569 = qJ(2) * t406 + t487 * t432 + t489 * t560;
t570 = t492 * t402 + t495 * t406;
t578 = pkin(5) * t570 + t492 * t337 + t495 * t569;
t349 = t495 * t402 - t492 * t406;
t577 = pkin(5) * t349 + t495 * t337 - t492 * t569;
t470 = t495 * g(2) + t492 * g(3);
t502 = qJDD(1) * pkin(1) + t470;
t469 = t492 * g(2) - t495 * g(3);
t543 = qJD(1) ^ 2;
t503 = -t543 * pkin(1) + t469;
t411 = t487 * t502 + t489 * t503;
t409 = -t543 * pkin(2) + t411;
t501 = -t487 * t503 + t489 * t502;
t500 = qJDD(1) * pkin(2) + t501;
t355 = t491 * t409 - t494 * t500;
t356 = t494 * t409 + t491 * t500;
t511 = t491 * t355 + t494 * t356;
t306 = t494 * t355 - t491 * t356;
t533 = t489 * t306;
t257 = -t487 * t511 + t533;
t536 = t487 * t306;
t566 = t489 * t511 + t536;
t223 = t492 * t257 + t495 * t566;
t222 = t495 * t257 - t492 * t566;
t488 = cos(pkin(9));
t486 = sin(pkin(9));
t483 = t486 ^ 2;
t498 = t488 ^ 2;
t546 = t544 * (t483 + t498);
t448 = t488 * t546;
t513 = t488 * t522;
t414 = -t491 * t448 + t513;
t416 = t494 * t448 + t488 * t529;
t371 = t489 * t414 - t487 * t416;
t374 = t487 * t414 + t489 * t416;
t572 = t495 * t371 - t492 * t374;
t571 = t492 * t371 + t495 * t374;
t562 = -t544 * pkin(3) + t482 * qJ(4) + (2 * qJD(4) * t484) + t356;
t510 = t489 * t411 - t487 * t501;
t365 = -t487 * t411 - t489 * t501;
t520 = t495 * t365;
t312 = -t492 * t510 + t520;
t526 = t492 * t365;
t565 = -t495 * t510 - t526;
t490 = sin(qJ(5));
t493 = cos(qJ(5));
t561 = t486 * t490 - t488 * t493;
t443 = t561 * t484;
t505 = t486 * t493 + t488 * t490;
t445 = t505 * t484;
t394 = t445 * t443;
t547 = qJDD(5) - t394;
t564 = t490 * t547;
t563 = t493 * t547;
t461 = t487 * qJDD(1) + t489 * t543;
t442 = qJ(2) * t461 - t489 * t485;
t462 = t489 * qJDD(1) - t487 * t543;
t506 = t492 * t461 - t495 * t462;
t507 = -qJ(2) * t462 - t487 * t485;
t559 = pkin(5) * t506 + t492 * t442 + t495 * t507;
t538 = t486 * t488;
t422 = t456 * t538;
t423 = t486 * t513 - t528 * t538;
t379 = t489 * t422 + t487 * t423;
t382 = t487 * t422 - t489 * t423;
t558 = t495 * t379 - t492 * t382;
t557 = t492 * t379 + t495 * t382;
t419 = t495 * t461 + t492 * t462;
t556 = pkin(5) * t419 + t495 * t442 - t492 * t507;
t548 = t505 * t482;
t476 = t498 * t544;
t540 = t483 * t544;
t454 = t476 + t540;
t437 = t443 ^ 2;
t438 = t445 ^ 2;
t542 = pkin(1) * t485;
t479 = t482 * pkin(3);
t541 = t482 * t488;
t478 = t488 * t485;
t323 = -t478 + (pkin(4) * t544 * t488 - pkin(7) * t482 - t562) * t486;
t331 = -t486 * t485 + t562 * t488;
t324 = -pkin(4) * t476 + pkin(7) * t541 + t331;
t267 = -t493 * t323 + t490 * t324;
t268 = t490 * t323 + t493 * t324;
t238 = -t493 * t267 + t490 * t268;
t539 = t486 * t238;
t535 = t488 * t238;
t343 = -t544 * qJ(4) + qJDD(4) + t355 - t479;
t327 = -pkin(4) * t541 - t454 * pkin(7) + t343;
t532 = t490 * t327;
t387 = qJDD(5) + t394;
t531 = t490 * t387;
t530 = t491 * t343;
t525 = t493 * t327;
t524 = t493 * t387;
t523 = t494 * t343;
t518 = t443 * qJD(5);
t517 = t445 * qJD(5);
t515 = t491 * t394;
t514 = t494 * t394;
t512 = -t343 + t479;
t239 = t490 * t267 + t493 * t268;
t330 = t562 * t486 + t478;
t283 = t486 * t330 + t488 * t331;
t463 = t492 * qJDD(1) + t495 * t543;
t508 = pkin(5) * t463 - t495 * g(1);
t435 = t561 * t482;
t282 = t488 * t330 - t486 * t331;
t425 = t495 * t469 - t492 * t470;
t424 = -t492 * t469 - t495 * t470;
t496 = qJD(5) ^ 2;
t475 = t498 * t482;
t474 = t483 * t482;
t464 = -t495 * qJDD(1) + t492 * t543;
t455 = t476 - t540;
t452 = t475 - t474;
t451 = t475 + t474;
t449 = -pkin(5) * t464 + t492 * g(1);
t447 = t486 * t546;
t428 = -t438 - t496;
t427 = -t438 + t496;
t426 = t437 - t496;
t415 = t494 * t447 + t486 * t529;
t412 = t491 * t447 - t486 * t522;
t401 = t494 * t452 - t491 * t455;
t400 = t494 * t451 - t491 * t454;
t399 = t491 * t452 + t494 * t455;
t398 = t491 * t451 + t494 * t454;
t393 = -t438 + t437;
t392 = t548 - t518;
t391 = t548 - 0.2e1 * t518;
t390 = -t435 - t517;
t389 = t435 + 0.2e1 * t517;
t385 = -t496 - t437;
t384 = (-t443 * t493 + t445 * t490) * qJD(5);
t383 = (-t443 * t490 - t445 * t493) * qJD(5);
t378 = -t437 - t438;
t376 = t493 * t392 - t490 * t517;
t373 = -t487 * t412 + t489 * t415;
t372 = t490 * t392 + t493 * t517;
t369 = t489 * t412 + t487 * t415;
t368 = -t490 * t390 + t493 * t518;
t367 = t493 * t390 + t490 * t518;
t362 = -t490 * t428 - t524;
t361 = -t490 * t427 + t563;
t360 = t493 * t426 - t531;
t359 = t493 * t428 - t531;
t358 = t493 * t427 + t564;
t357 = t490 * t426 + t524;
t354 = qJ(2) * t510 + t542;
t348 = -t487 * t399 + t489 * t401;
t347 = -t487 * t398 + t489 * t400;
t346 = t489 * t399 + t487 * t401;
t345 = t489 * t398 + t487 * t400;
t341 = -t493 * t389 - t490 * t391;
t340 = -t435 * t493 + t490 * t548;
t339 = -t490 * t389 + t493 * t391;
t338 = -t435 * t490 - t493 * t548;
t333 = t493 * t385 - t564;
t332 = t490 * t385 + t563;
t329 = -t486 * t383 + t488 * t384;
t326 = t491 * qJDD(5) + t494 * t329;
t325 = -t494 * qJDD(5) + t491 * t329;
t318 = -t492 * t369 + t495 * t373;
t316 = -t495 * t369 - t492 * t373;
t314 = -t486 * t372 + t488 * t376;
t313 = -t486 * t367 + t488 * t368;
t311 = -t486 * t359 + t488 * t362;
t310 = -t486 * t358 + t488 * t361;
t309 = -t486 * t357 + t488 * t360;
t308 = t488 * t359 + t486 * t362;
t303 = pkin(2) * t485 + pkin(6) * t511;
t302 = -t492 * t345 + t495 * t347;
t301 = -t495 * t345 - t492 * t347;
t300 = t494 * t310 + t491 * t548;
t299 = t494 * t309 - t491 * t435;
t298 = t491 * t310 - t494 * t548;
t297 = t491 * t309 + t494 * t435;
t296 = -pkin(7) * t359 + t525;
t295 = -t486 * t339 + t488 * t341;
t294 = -t486 * t338 + t488 * t340;
t293 = t488 * t338 + t486 * t340;
t292 = -t486 * t332 + t488 * t333;
t291 = t488 * t332 + t486 * t333;
t290 = t494 * t314 + t515;
t289 = t494 * t313 - t515;
t288 = t491 * t314 - t514;
t287 = t491 * t313 + t514;
t286 = t494 * t311 + t491 * t391;
t285 = t491 * t311 - t494 * t391;
t284 = -pkin(7) * t332 + t532;
t280 = -pkin(4) * t391 + pkin(7) * t362 + t532;
t279 = -pkin(6) * t412 - t491 * t331 + t488 * t523;
t278 = -pkin(6) * t414 - t491 * t330 + t486 * t523;
t277 = pkin(6) * t415 + t494 * t331 + t488 * t530;
t276 = -pkin(6) * t416 + t494 * t330 + t486 * t530;
t275 = -t487 * t325 + t489 * t326;
t274 = t489 * t325 + t487 * t326;
t273 = t494 * t295 - t491 * t393;
t272 = t491 * t295 + t494 * t393;
t271 = t494 * t292 + t491 * t389;
t270 = t491 * t292 - t494 * t389;
t269 = -pkin(4) * t389 + pkin(7) * t333 - t525;
t265 = t494 * t294 + t491 * t378;
t264 = t491 * t294 - t494 * t378;
t263 = -pkin(6) * t398 + t494 * t282;
t262 = pkin(6) * t400 + t491 * t282;
t261 = -pkin(3) * t293 - pkin(4) * t338;
t260 = t494 * t283 + t530;
t259 = t491 * t283 - t523;
t254 = -t487 * t298 + t489 * t300;
t253 = -t487 * t297 + t489 * t299;
t252 = t489 * t298 + t487 * t300;
t251 = t489 * t297 + t487 * t299;
t250 = -t487 * t288 + t489 * t290;
t249 = -t487 * t287 + t489 * t289;
t248 = t489 * t288 + t487 * t290;
t247 = t489 * t287 + t487 * t289;
t246 = -t487 * t285 + t489 * t286;
t245 = t489 * t285 + t487 * t286;
t244 = -pkin(3) * t308 - pkin(4) * t359 + t268;
t243 = -t487 * t272 + t489 * t273;
t242 = t489 * t272 + t487 * t273;
t241 = -t487 * t270 + t489 * t271;
t240 = t489 * t270 + t487 * t271;
t237 = -t487 * t264 + t489 * t265;
t236 = t489 * t264 + t487 * t265;
t235 = -pkin(3) * t291 - pkin(4) * t332 + t267;
t234 = -qJ(2) * t369 - t487 * t277 + t489 * t279;
t233 = -qJ(2) * t371 - t487 * t276 + t489 * t278;
t232 = qJ(2) * t373 + t489 * t277 + t487 * t279;
t231 = -qJ(2) * t374 + t489 * t276 + t487 * t278;
t230 = -qJ(4) * t308 - t486 * t280 + t488 * t296;
t229 = -pkin(7) * t338 - t238;
t228 = -qJ(2) * t345 - t487 * t262 + t489 * t263;
t227 = qJ(2) * t347 + t489 * t262 + t487 * t263;
t226 = -pkin(4) * t327 + pkin(7) * t239;
t225 = -t487 * t259 + t489 * t260;
t224 = t489 * t259 + t487 * t260;
t221 = pkin(6) * t533 + qJ(2) * t257 - t487 * t303;
t220 = -qJ(4) * t291 - t486 * t269 + t488 * t284;
t219 = pkin(6) * t536 + qJ(2) * t566 + t489 * t303 + t542;
t218 = -pkin(4) * t378 + pkin(7) * t340 + t239;
t217 = -pkin(6) * t259 - (pkin(3) * t491 - qJ(4) * t494) * t282;
t216 = -t492 * t245 + t495 * t246;
t215 = -t495 * t245 - t492 * t246;
t214 = pkin(6) * t260 - (-pkin(3) * t494 - qJ(4) * t491 - pkin(2)) * t282;
t213 = -t492 * t240 + t495 * t241;
t212 = -t495 * t240 - t492 * t241;
t211 = t488 * t239 - t539;
t210 = t486 * t239 + t535;
t209 = -t492 * t236 + t495 * t237;
t208 = -t495 * t236 - t492 * t237;
t207 = t494 * t211 + t491 * t327;
t206 = t491 * t211 - t494 * t327;
t205 = -pkin(6) * t285 + t494 * t230 - t491 * t244;
t204 = -t492 * t224 + t495 * t225;
t203 = -t495 * t224 - t492 * t225;
t202 = -pkin(2) * t308 + pkin(6) * t286 + t491 * t230 + t494 * t244;
t201 = -pkin(6) * t270 + t494 * t220 - t491 * t235;
t200 = -qJ(4) * t293 - t486 * t218 + t488 * t229;
t199 = -pkin(3) * t210 - pkin(4) * t238;
t198 = -pkin(2) * t291 + pkin(6) * t271 + t491 * t220 + t494 * t235;
t197 = -pkin(6) * t264 + t494 * t200 - t491 * t261;
t196 = -pkin(7) * t535 - qJ(4) * t210 - t486 * t226;
t195 = -pkin(2) * t293 + pkin(6) * t265 + t491 * t200 + t494 * t261;
t194 = -t487 * t206 + t489 * t207;
t193 = t489 * t206 + t487 * t207;
t192 = -qJ(2) * t224 - t487 * t214 + t489 * t217;
t191 = pkin(1) * t282 + qJ(2) * t225 + t489 * t214 + t487 * t217;
t190 = -qJ(2) * t245 - t487 * t202 + t489 * t205;
t189 = -pkin(1) * t308 + qJ(2) * t246 + t489 * t202 + t487 * t205;
t188 = -qJ(2) * t240 - t487 * t198 + t489 * t201;
t187 = -pkin(1) * t291 + qJ(2) * t241 + t489 * t198 + t487 * t201;
t186 = -t492 * t193 + t495 * t194;
t185 = -t495 * t193 - t492 * t194;
t184 = -qJ(2) * t236 - t487 * t195 + t489 * t197;
t183 = -pkin(6) * t206 + t494 * t196 - t491 * t199;
t182 = -pkin(1) * t293 + qJ(2) * t237 + t489 * t195 + t487 * t197;
t181 = -pkin(2) * t210 + pkin(6) * t207 + t491 * t196 + t494 * t199;
t180 = -qJ(2) * t193 - t487 * t181 + t489 * t183;
t179 = -pkin(1) * t210 + qJ(2) * t194 + t489 * t181 + t487 * t183;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t485, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t485, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t282, 0, 0, 0, 0, 0, 0, t291, t308, t293, t210; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t464, t463, 0, t424, 0, 0, 0, 0, 0, 0, t506, t419, 0, t312, 0, 0, 0, 0, 0, 0, t570, t349, 0, t222, 0, 0, 0, 0, 0, 0, -t572, t316, t301, t203, 0, 0, 0, 0, 0, 0, t212, t215, t208, t185; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t463, t464, 0, t425, 0, 0, 0, 0, 0, 0, -t419, t506, 0, -t565, 0, 0, 0, 0, 0, 0, -t349, t570, 0, t223, 0, 0, 0, 0, 0, 0, -t571, t318, t302, t204, 0, 0, 0, 0, 0, 0, t213, t216, t209, t186; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t470, -t469, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t462 + t501, -pkin(1) * t461 - t411, 0, -pkin(1) * t365, 0, 0, 0, 0, 0, t482, -pkin(1) * t406 - pkin(2) * t459 - t355, -pkin(1) * t402 - pkin(2) * t456 - t356, 0, -pkin(1) * t257 - pkin(2) * t306, t474, 0.2e1 * t482 * t538, 0, t475, 0, 0, pkin(1) * t371 + pkin(2) * t414 - qJ(4) * t448 + t488 * t512, pkin(1) * t369 + pkin(2) * t412 + qJ(4) * t447 - t486 * t512, pkin(1) * t345 + pkin(2) * t398 + pkin(3) * t454 + qJ(4) * t451 + t283, pkin(1) * t224 + pkin(2) * t259 - pkin(3) * t343 + qJ(4) * t283, t488 * t372 + t486 * t376, t488 * t339 + t486 * t341, t488 * t358 + t486 * t361, t488 * t367 + t486 * t368, t488 * t357 + t486 * t360, t488 * t383 + t486 * t384, pkin(1) * t240 + pkin(2) * t270 - pkin(3) * t389 + qJ(4) * t292 + t488 * t269 + t486 * t284, pkin(1) * t245 + pkin(2) * t285 - pkin(3) * t391 + qJ(4) * t311 + t488 * t280 + t486 * t296, pkin(1) * t236 + pkin(2) * t264 - pkin(3) * t378 + qJ(4) * t294 + t488 * t218 + t486 * t229, pkin(1) * t193 + pkin(2) * t206 - pkin(3) * t327 - pkin(7) * t539 + qJ(4) * t211 + t488 * t226; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t463, 0, t464, 0, t508, t449, -t425, -pkin(5) * t425, 0, 0, -t419, 0, t506, 0, t556, -t559, t565, pkin(5) * t565 - qJ(2) * t526 - t495 * t354, 0, 0, -t349, 0, t570, 0, t577, -t578, -t223, -pkin(5) * t223 - t495 * t219 - t492 * t221, -t558, -t495 * t346 - t492 * t348, t316, t558, t572, 0, pkin(5) * t571 - t495 * t231 - t492 * t233, -pkin(5) * t318 - t495 * t232 - t492 * t234, -pkin(5) * t302 - t495 * t227 - t492 * t228, -pkin(5) * t204 - t495 * t191 - t492 * t192, -t495 * t248 - t492 * t250, -t495 * t242 - t492 * t243, -t495 * t252 - t492 * t254, -t495 * t247 - t492 * t249, -t495 * t251 - t492 * t253, -t495 * t274 - t492 * t275, -pkin(5) * t213 - t495 * t187 - t492 * t188, -pkin(5) * t216 - t495 * t189 - t492 * t190, -pkin(5) * t209 - t495 * t182 - t492 * t184, -pkin(5) * t186 - t495 * t179 - t492 * t180; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t464, 0, -t463, 0, -t449, t508, t424, pkin(5) * t424, 0, 0, -t506, 0, -t419, 0, t559, t556, t312, pkin(5) * t312 + qJ(2) * t520 - t492 * t354, 0, 0, -t570, 0, -t349, 0, t578, t577, t222, pkin(5) * t222 - t492 * t219 + t495 * t221, -t557, -t492 * t346 + t495 * t348, t318, t557, t571, 0, -pkin(5) * t572 - t492 * t231 + t495 * t233, pkin(5) * t316 - t492 * t232 + t495 * t234, pkin(5) * t301 - t492 * t227 + t495 * t228, pkin(5) * t203 - t492 * t191 + t495 * t192, -t492 * t248 + t495 * t250, -t492 * t242 + t495 * t243, -t492 * t252 + t495 * t254, -t492 * t247 + t495 * t249, -t492 * t251 + t495 * t253, -t492 * t274 + t495 * t275, pkin(5) * t212 - t492 * t187 + t495 * t188, pkin(5) * t215 - t492 * t189 + t495 * t190, pkin(5) * t208 - t492 * t182 + t495 * t184, pkin(5) * t185 - t492 * t179 + t495 * t180;];
tauB_reg = t1;
