% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:34
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRPR2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR2_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR2_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR2_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR2_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:34:25
% EndTime: 2020-01-03 11:34:38
% DurationCPUTime: 13.84s
% Computational Cost: add. (59264->492), mult. (88678->690), div. (0->0), fcn. (55375->10), ass. (0->336)
t931 = sin(qJ(3));
t981 = qJD(1) + qJD(3);
t980 = t981 ^ 2;
t923 = qJDD(1) + qJDD(3);
t934 = cos(qJ(3));
t984 = t934 * t923;
t891 = t931 * t980 - t984;
t925 = g(1) - qJDD(2);
t1023 = pkin(6) * t891 - t925 * t931;
t985 = t931 * t923;
t888 = t934 * t980 + t985;
t927 = sin(pkin(8));
t929 = cos(pkin(8));
t835 = t888 * t927 + t891 * t929;
t859 = pkin(6) * t888 - t925 * t934;
t1032 = qJ(2) * t835 + t1023 * t929 + t859 * t927;
t831 = t888 * t929 - t891 * t927;
t761 = qJ(2) * t831 - t1023 * t927 + t859 * t929;
t932 = sin(qJ(1));
t935 = cos(qJ(1));
t776 = t831 * t935 - t835 * t932;
t1044 = -pkin(5) * t776 + t1032 * t932 - t935 * t761;
t1021 = t831 * t932 + t835 * t935;
t1043 = pkin(5) * t1021 + t1032 * t935 + t932 * t761;
t1006 = qJD(1) ^ 2;
t905 = g(2) * t932 - g(3) * t935;
t906 = g(2) * t935 + g(3) * t932;
t946 = qJDD(1) * pkin(1) - t906;
t943 = t927 * t946;
t838 = -t929 * t905 + t943 + (-pkin(1) * t929 - pkin(2)) * t1006;
t947 = pkin(1) * t1006 + t905;
t942 = t927 * t947 + t929 * t946;
t941 = qJDD(1) * pkin(2) + t942;
t779 = t838 * t931 - t934 * t941;
t780 = t934 * t838 + t931 * t941;
t973 = t779 * t931 + t934 * t780;
t726 = t779 * t934 - t780 * t931;
t998 = t726 * t927;
t1027 = t929 * t973 + t998;
t997 = t726 * t929;
t664 = -t927 * t973 + t997;
t1042 = t1027 * t935 + t664 * t932;
t1041 = t1027 * t932 - t664 * t935;
t928 = cos(pkin(9));
t938 = t928 ^ 2;
t915 = t938 * t980;
t926 = sin(pkin(9));
t924 = t926 ^ 2;
t968 = t928 * t980;
t878 = t915 * t928 + t924 * t968;
t845 = -t878 * t931 + t928 * t984;
t847 = t878 * t934 + t928 * t985;
t796 = t845 * t929 - t847 * t927;
t799 = t845 * t927 + t847 * t929;
t1034 = t796 * t935 - t799 * t932;
t1033 = t796 * t932 + t799 * t935;
t842 = -t929 * t947 + t943;
t972 = t929 * t842 - t927 * t942;
t790 = -t842 * t927 - t929 * t942;
t993 = t790 * t935;
t1029 = t932 * t972 - t993;
t994 = t790 * t932;
t1028 = t935 * t972 + t994;
t933 = cos(qJ(5));
t966 = t933 * t981;
t930 = sin(qJ(5));
t967 = t930 * t981;
t871 = t926 * t967 - t928 * t966;
t873 = t926 * t966 + t928 * t967;
t824 = t873 * t871;
t1008 = qJDD(5) - t824;
t1026 = t1008 * t930;
t1025 = t1008 * t933;
t951 = -pkin(3) * t980 + t923 * qJ(4) + 0.2e1 * qJD(4) * t981 + t780;
t1024 = t923 * pkin(7) + t951;
t897 = qJDD(1) * t927 + t1006 * t929;
t898 = qJDD(1) * t929 - t1006 * t927;
t1009 = t932 * t897 - t898 * t935;
t870 = qJ(2) * t897 - t925 * t929;
t954 = -qJ(2) * t898 - t925 * t927;
t1022 = pkin(5) * t1009 + t932 * t870 + t935 * t954;
t850 = t897 * t935 + t932 * t898;
t1020 = -pkin(5) * t850 - t935 * t870 + t932 * t954;
t851 = t888 * t928 * t926;
t901 = t926 * t968;
t914 = t928 * t923;
t977 = t926 * t914;
t852 = -t901 * t931 + t934 * t977;
t805 = t851 * t929 + t852 * t927;
t808 = t851 * t927 - t852 * t929;
t1019 = t805 * t935 - t808 * t932;
t1018 = t805 * t932 + t808 * t935;
t916 = t928 * t925;
t754 = t926 * t951 + t916;
t986 = t926 * t925;
t755 = t928 * t951 - t986;
t698 = t926 * t754 + t928 * t755;
t969 = t924 * t980;
t886 = t969 + t915;
t865 = t871 ^ 2;
t866 = t873 ^ 2;
t1005 = pkin(1) * t925;
t744 = -t916 + (pkin(4) * t968 - t1024) * t926;
t745 = -pkin(4) * t915 + t1024 * t928 - t986;
t677 = -t933 * t744 + t745 * t930;
t678 = t744 * t930 + t745 * t933;
t643 = -t677 * t933 + t678 * t930;
t1004 = pkin(4) * t643;
t912 = t926 * t923;
t863 = t912 * t930 - t933 * t914;
t864 = (t926 * t933 + t928 * t930) * t923;
t764 = -t863 * t930 - t864 * t933;
t1003 = pkin(4) * t764;
t1000 = t643 * t926;
t999 = t643 * t928;
t769 = -t923 * pkin(3) - t980 * qJ(4) + qJDD(4) + t779;
t749 = -pkin(4) * t914 - t886 * pkin(7) + t769;
t996 = t749 * t930;
t995 = t749 * t933;
t817 = qJDD(5) + t824;
t992 = t817 * t930;
t991 = t817 * t933;
t762 = t926 * t769;
t763 = t928 * t769;
t983 = -pkin(3) * t769 + qJ(4) * t698;
t862 = t871 * qJD(5);
t982 = t873 * qJD(5);
t979 = t931 * t824;
t978 = t934 * t824;
t976 = pkin(3) * t914 - qJ(4) * t878 - t763;
t667 = t698 * t931 - t769 * t934;
t975 = pkin(2) * t667 + t983;
t899 = -t932 * qJDD(1) - t1006 * t935;
t974 = pkin(5) * t899 + t935 * g(1);
t644 = t677 * t930 + t933 * t678;
t970 = -t932 * t905 - t906 * t935;
t766 = -t863 * t933 + t864 * t930;
t804 = -t865 - t866;
t623 = -pkin(4) * t804 + pkin(7) * t766 + t644;
t634 = -pkin(7) * t764 - t643;
t715 = -t764 * t926 + t766 * t928;
t964 = -pkin(3) * t804 + qJ(4) * t715 + t928 * t623 + t926 * t634;
t936 = qJD(5) ^ 2;
t815 = -t936 - t865;
t757 = t815 * t933 - t1026;
t819 = t863 + 0.2e1 * t982;
t679 = -pkin(4) * t819 + pkin(7) * t757 - t995;
t756 = t815 * t930 + t1025;
t700 = -pkin(7) * t756 + t996;
t712 = -t756 * t926 + t757 * t928;
t963 = -pkin(3) * t819 + qJ(4) * t712 + t928 * t679 + t926 * t700;
t855 = -t866 - t936;
t786 = -t855 * t930 - t991;
t821 = -0.2e1 * t862 + t864;
t692 = -pkin(4) * t821 + pkin(7) * t786 + t996;
t783 = t855 * t933 - t992;
t717 = -pkin(7) * t783 + t995;
t734 = -t783 * t926 + t786 * t928;
t962 = -pkin(3) * t821 + qJ(4) * t734 + t928 * t692 + t926 * t717;
t911 = t924 * t923;
t913 = t938 * t923;
t884 = t913 + t911;
t961 = pkin(3) * t886 + qJ(4) * t884 + t698;
t960 = pkin(2) * t845 + t976;
t959 = -pkin(2) * t891 - t779;
t673 = t715 * t931 - t804 * t934;
t958 = pkin(2) * t673 + t964;
t681 = t712 * t931 - t819 * t934;
t957 = pkin(2) * t681 + t963;
t702 = t734 * t931 - t821 * t934;
t956 = pkin(2) * t702 + t962;
t827 = t884 * t931 + t886 * t934;
t955 = pkin(2) * t827 + t961;
t697 = t754 * t928 - t755 * t926;
t953 = t905 * t935 - t906 * t932;
t877 = t886 * t926;
t952 = -pkin(3) * t912 + qJ(4) * t877 + t762;
t950 = pkin(4) * t756 - t677;
t843 = t877 * t931 - t926 * t984;
t949 = pkin(2) * t843 + t952;
t619 = t644 * t928 - t1000;
t630 = -pkin(4) * t749 + pkin(7) * t644;
t948 = -pkin(3) * t749 - pkin(7) * t1000 + qJ(4) * t619 + t928 * t630;
t615 = t619 * t931 - t749 * t934;
t945 = pkin(2) * t615 + t948;
t944 = pkin(4) * t783 - t678;
t940 = -pkin(2) * t888 - t780;
t900 = qJDD(1) * t935 - t1006 * t932;
t896 = 0.2e1 * t977;
t887 = t969 - t915;
t885 = t913 - t911;
t880 = pkin(5) * t900 + g(1) * t932;
t854 = -t866 + t936;
t853 = t865 - t936;
t846 = t877 * t934 + t926 * t985;
t830 = t885 * t934 + t887 * t931;
t829 = t884 * t934 - t886 * t931;
t828 = t885 * t931 - t887 * t934;
t823 = t866 - t865;
t822 = -t862 + t864;
t820 = -t863 - t982;
t812 = pkin(1) * t898 + t942;
t811 = -pkin(1) * t897 - t842;
t810 = (-t871 * t933 + t873 * t930) * qJD(5);
t809 = (-t871 * t930 - t873 * t933) * qJD(5);
t801 = t822 * t933 - t930 * t982;
t798 = -t843 * t927 + t846 * t929;
t797 = t822 * t930 + t933 * t982;
t794 = t843 * t929 + t846 * t927;
t793 = -t820 * t930 + t862 * t933;
t792 = t820 * t933 + t862 * t930;
t787 = pkin(1) * t790;
t785 = -t854 * t930 + t1025;
t784 = t853 * t933 - t992;
t782 = t854 * t933 + t1026;
t781 = t853 * t930 + t991;
t778 = qJ(2) * t972 + t1005;
t774 = -t828 * t927 + t830 * t929;
t773 = -t827 * t927 + t829 * t929;
t772 = t828 * t929 + t830 * t927;
t771 = t827 * t929 + t829 * t927;
t767 = -t819 * t933 - t821 * t930;
t765 = -t819 * t930 + t821 * t933;
t753 = -t809 * t926 + t810 * t928;
t752 = t809 * t928 + t810 * t926;
t747 = qJDD(5) * t931 + t753 * t934;
t746 = -qJDD(5) * t934 + t753 * t931;
t742 = -pkin(1) * t835 + t959;
t741 = -pkin(1) * t831 + t940;
t740 = t794 * t932 - t798 * t935;
t739 = t794 * t935 + t798 * t932;
t738 = -t797 * t926 + t801 * t928;
t737 = -t792 * t926 + t793 * t928;
t736 = t797 * t928 + t801 * t926;
t735 = t792 * t928 + t793 * t926;
t733 = -t782 * t926 + t785 * t928;
t732 = -t781 * t926 + t784 * t928;
t731 = t783 * t928 + t786 * t926;
t730 = t782 * t928 + t785 * t926;
t729 = t781 * t928 + t784 * t926;
t723 = pkin(2) * t726;
t722 = pkin(2) * t925 + pkin(6) * t973;
t721 = t733 * t934 + t864 * t931;
t720 = t732 * t934 - t863 * t931;
t719 = t733 * t931 - t864 * t934;
t718 = t732 * t931 + t863 * t934;
t716 = -t765 * t926 + t767 * t928;
t714 = t765 * t928 + t767 * t926;
t713 = t764 * t928 + t766 * t926;
t711 = t756 * t928 + t757 * t926;
t707 = t738 * t934 + t979;
t706 = t737 * t934 - t979;
t705 = t738 * t931 - t978;
t704 = t737 * t931 + t978;
t703 = t734 * t934 + t821 * t931;
t694 = pkin(1) * t796 + t960;
t693 = pkin(1) * t794 + t949;
t691 = -pkin(6) * t843 - t755 * t931 + t763 * t934;
t690 = -pkin(6) * t845 - t754 * t931 + t762 * t934;
t689 = pkin(6) * t846 + t755 * t934 + t763 * t931;
t688 = -pkin(6) * t847 + t754 * t934 + t762 * t931;
t686 = -t746 * t927 + t747 * t929;
t685 = t746 * t929 + t747 * t927;
t684 = t716 * t934 + t823 * t931;
t683 = t716 * t931 - t823 * t934;
t682 = t712 * t934 + t819 * t931;
t674 = t715 * t934 + t804 * t931;
t671 = -pkin(6) * t827 + t697 * t934;
t670 = pkin(6) * t829 + t697 * t931;
t669 = -pkin(3) * t713 - t1003;
t668 = t698 * t934 + t769 * t931;
t661 = -t719 * t927 + t721 * t929;
t660 = -t718 * t927 + t720 * t929;
t659 = t719 * t929 + t721 * t927;
t658 = t718 * t929 + t720 * t927;
t657 = pkin(1) * t771 + t955;
t656 = -t705 * t927 + t707 * t929;
t655 = -t704 * t927 + t706 * t929;
t654 = t705 * t929 + t707 * t927;
t653 = t704 * t929 + t706 * t927;
t652 = -t702 * t927 + t703 * t929;
t651 = t702 * t929 + t703 * t927;
t650 = -pkin(3) * t731 - t944;
t649 = -t683 * t927 + t684 * t929;
t648 = t683 * t929 + t684 * t927;
t647 = -pkin(1) * t664 - t723;
t646 = -t681 * t927 + t682 * t929;
t645 = t681 * t929 + t682 * t927;
t642 = -t673 * t927 + t674 * t929;
t641 = t673 * t929 + t674 * t927;
t640 = -pkin(3) * t711 - t950;
t639 = -qJ(2) * t794 - t689 * t927 + t691 * t929;
t638 = -qJ(2) * t796 - t688 * t927 + t690 * t929;
t637 = qJ(2) * t798 + t689 * t929 + t691 * t927;
t636 = -qJ(2) * t799 + t688 * t929 + t690 * t927;
t635 = -qJ(4) * t731 - t692 * t926 + t717 * t928;
t632 = -qJ(2) * t771 - t670 * t927 + t671 * t929;
t631 = qJ(2) * t773 + t670 * t929 + t671 * t927;
t628 = -t667 * t927 + t668 * t929;
t627 = t667 * t929 + t668 * t927;
t626 = pkin(6) * t997 + qJ(2) * t664 - t722 * t927;
t625 = -qJ(4) * t711 - t679 * t926 + t700 * t928;
t624 = pkin(6) * t998 + qJ(2) * t1027 + t722 * t929 + t1005;
t621 = -pkin(6) * t667 - (pkin(3) * t931 - qJ(4) * t934) * t697;
t620 = pkin(6) * t668 - (-pkin(3) * t934 - qJ(4) * t931 - pkin(2)) * t697;
t618 = t644 * t926 + t999;
t616 = t619 * t934 + t749 * t931;
t613 = pkin(1) * t651 + t956;
t612 = pkin(1) * t627 + t975;
t611 = -pkin(6) * t702 + t635 * t934 - t650 * t931;
t610 = -pkin(2) * t731 + pkin(6) * t703 + t635 * t931 + t650 * t934;
t609 = pkin(1) * t645 + t957;
t608 = -pkin(6) * t681 + t625 * t934 - t640 * t931;
t607 = -qJ(4) * t713 - t623 * t926 + t634 * t928;
t606 = -pkin(3) * t618 - t1004;
t605 = -pkin(2) * t711 + pkin(6) * t682 + t625 * t931 + t640 * t934;
t604 = -pkin(6) * t673 + t607 * t934 - t669 * t931;
t603 = -pkin(7) * t999 - qJ(4) * t618 - t630 * t926;
t602 = -pkin(2) * t713 + pkin(6) * t674 + t607 * t931 + t669 * t934;
t601 = -t615 * t927 + t616 * t929;
t600 = t615 * t929 + t616 * t927;
t599 = pkin(1) * t641 + t958;
t598 = -qJ(2) * t627 - t620 * t927 + t621 * t929;
t597 = pkin(1) * t697 + qJ(2) * t628 + t620 * t929 + t621 * t927;
t596 = -qJ(2) * t651 - t610 * t927 + t611 * t929;
t595 = -pkin(1) * t731 + qJ(2) * t652 + t610 * t929 + t611 * t927;
t594 = -qJ(2) * t645 - t605 * t927 + t608 * t929;
t593 = -pkin(1) * t711 + qJ(2) * t646 + t605 * t929 + t608 * t927;
t592 = -qJ(2) * t641 - t602 * t927 + t604 * t929;
t591 = -pkin(6) * t615 + t603 * t934 - t606 * t931;
t590 = -pkin(1) * t713 + qJ(2) * t642 + t602 * t929 + t604 * t927;
t589 = pkin(1) * t600 + t945;
t588 = -pkin(2) * t618 + pkin(6) * t616 + t603 * t931 + t606 * t934;
t587 = -qJ(2) * t600 - t588 * t927 + t591 * t929;
t586 = -pkin(1) * t618 + qJ(2) * t601 + t588 * t929 + t591 * t927;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t906, t905, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t812, t811, 0, -t787, 0, 0, 0, 0, 0, t923, t742, t741, 0, t647, t911, t896, 0, t913, 0, 0, t694, t693, t657, t612, t736, t714, t730, t735, t729, t752, t609, t613, t599, t589; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t899, 0, t900, 0, t974, -t880, -t953, -pkin(5) * t953, 0, 0, t850, 0, -t1009, 0, t1020, t1022, t1028, pkin(5) * t1028 + qJ(2) * t994 + t935 * t778, 0, 0, t776, 0, -t1021, 0, t1044, t1043, t1042, pkin(5) * t1042 + t935 * t624 + t932 * t626, t1019, t772 * t935 + t774 * t932, t739, -t1019, -t1034, 0, -pkin(5) * t1033 + t935 * t636 + t932 * t638, -pkin(5) * t740 + t637 * t935 + t639 * t932, t932 * t632 + t935 * t631 - pkin(5) * (t771 * t932 - t773 * t935), t932 * t598 + t935 * t597 - pkin(5) * (t627 * t932 - t628 * t935), t654 * t935 + t656 * t932, t648 * t935 + t649 * t932, t659 * t935 + t661 * t932, t653 * t935 + t655 * t932, t658 * t935 + t660 * t932, t685 * t935 + t686 * t932, t932 * t594 + t935 * t593 - pkin(5) * (t645 * t932 - t646 * t935), t932 * t596 + t935 * t595 - pkin(5) * (t651 * t932 - t652 * t935), t932 * t592 + t935 * t590 - pkin(5) * (t641 * t932 - t642 * t935), t932 * t587 + t935 * t586 - pkin(5) * (t600 * t932 - t601 * t935); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t900, 0, -t899, 0, t880, t974, t970, pkin(5) * t970, 0, 0, t1009, 0, t850, 0, -t1022, t1020, t1029, pkin(5) * t1029 - qJ(2) * t993 + t932 * t778, 0, 0, t1021, 0, t776, 0, -t1043, t1044, t1041, pkin(5) * t1041 + t932 * t624 - t935 * t626, t1018, t772 * t932 - t774 * t935, t740, -t1018, -t1033, 0, pkin(5) * t1034 + t932 * t636 - t935 * t638, pkin(5) * t739 + t637 * t932 - t639 * t935, -t935 * t632 + t932 * t631 + pkin(5) * (t771 * t935 + t773 * t932), -t935 * t598 + t932 * t597 + pkin(5) * (t627 * t935 + t628 * t932), t654 * t932 - t656 * t935, t648 * t932 - t649 * t935, t659 * t932 - t661 * t935, t653 * t932 - t655 * t935, t658 * t932 - t660 * t935, t685 * t932 - t686 * t935, -t935 * t594 + t932 * t593 + pkin(5) * (t645 * t935 + t646 * t932), -t935 * t596 + t932 * t595 + pkin(5) * (t651 * t935 + t652 * t932), -t935 * t592 + t932 * t590 + pkin(5) * (t641 * t935 + t642 * t932), -t935 * t587 + t932 * t586 + pkin(5) * (t600 * t935 + t601 * t932); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1006, 0, 0, -g(1), t906, 0, 0, 0, t898, 0, -t897, 0, t954, t870, t790, qJ(2) * t790, 0, 0, -t835, 0, -t831, 0, t1032, t761, t664, t626, -t808, t774, t798, t808, t799, 0, t638, t639, t632, t598, t656, t649, t661, t655, t660, t686, t594, t596, t592, t587; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1006, 0, qJDD(1), 0, g(1), 0, -t905, 0, 0, 0, t897, 0, t898, 0, -t870, t954, t972, t778, 0, 0, t831, 0, -t835, 0, -t761, t1032, t1027, t624, t805, t772, t794, -t805, -t796, 0, t636, t637, t631, t597, t654, t648, t659, t653, t658, t685, t593, t595, t590, t586; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t906, t905, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t812, t811, 0, -t787, 0, 0, 0, 0, 0, t923, t742, t741, 0, t647, t911, t896, 0, t913, 0, 0, t694, t693, t657, t612, t736, t714, t730, t735, t729, t752, t609, t613, t599, t589; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1006, 0, 0, -t925, -t942, 0, 0, 0, -t891, 0, -t888, 0, t1023, t859, t726, pkin(6) * t726, t852, t830, t846, -t852, t847, 0, t690, t691, t671, t621, t707, t684, t721, t706, t720, t747, t608, t611, t604, t591; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1006, 0, qJDD(1), 0, t925, 0, t842, 0, 0, 0, t888, 0, -t891, 0, -t859, t1023, t973, t722, t851, t828, t843, -t851, -t845, 0, t688, t689, t670, t620, t705, t683, t719, t704, t718, t746, t605, t610, t602, t588; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t942, -t842, 0, 0, 0, 0, 0, 0, 0, t923, t959, t940, 0, -t723, t911, t896, 0, t913, 0, 0, t960, t949, t955, t975, t736, t714, t730, t735, t729, t752, t957, t956, t958, t945; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t923, 0, -t980, 0, 0, -t925, t779, 0, t977, t885, t877, -t977, t878, 0, t762, t763, t697, qJ(4) * t697, t738, t716, t733, t737, t732, t753, t625, t635, t607, t603; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t980, 0, t923, 0, t925, 0, t780, 0, t901, -t887, -t912, -t901, -t914, 0, t754, t755, 0, pkin(3) * t697, -t824, -t823, -t864, t824, t863, -qJDD(5), t640, t650, t669, t606; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t923, -t779, -t780, 0, 0, t911, t896, 0, t913, 0, 0, t976, t952, t961, t983, t736, t714, t730, t735, t729, t752, t963, t962, t964, t948; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t912, t914, t901, 0, t915, 0, 0, t769, t754, 0, t801, t767, t785, t793, t784, t810, t700, t717, t634, -pkin(7) * t643; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t912, -t969, t914, -t901, 0, -t769, 0, t755, 0, t797, t765, t782, t792, t781, t809, t679, t692, t623, t630; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t901, t887, t912, t901, t914, 0, -t754, -t755, 0, 0, t824, t823, t864, -t824, -t863, qJDD(5), t950, t944, t1003, t1004; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t822, -t819, t1008, t862, t853, -t862, 0, t749, t677, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t982, t821, t854, t820, t817, -t982, -t749, 0, t678, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t824, t823, t864, -t824, -t863, qJDD(5), -t677, -t678, 0, 0;];
m_new_reg = t1;
