% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:50
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRPR2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR2_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR2_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR2_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR2_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:49:56
% EndTime: 2019-12-05 17:50:10
% DurationCPUTime: 14.28s
% Computational Cost: add. (59264->494), mult. (88678->688), div. (0->0), fcn. (55375->10), ass. (0->338)
t919 = sin(qJ(3));
t971 = qJD(1) + qJD(3);
t970 = t971 ^ 2;
t911 = qJDD(1) + qJDD(3);
t922 = cos(qJ(3));
t976 = t922 * t911;
t884 = t919 * t970 - t976;
t913 = g(1) - qJDD(2);
t1009 = pkin(6) * t884 - t919 * t913;
t982 = t919 * t911;
t881 = t922 * t970 + t982;
t915 = sin(pkin(8));
t917 = cos(pkin(8));
t828 = t915 * t881 + t917 * t884;
t852 = pkin(6) * t881 - t922 * t913;
t1018 = qJ(2) * t828 + t1009 * t917 + t915 * t852;
t824 = t917 * t881 - t915 * t884;
t754 = qJ(2) * t824 - t1009 * t915 + t917 * t852;
t920 = sin(qJ(1));
t923 = cos(qJ(1));
t768 = t920 * t824 + t923 * t828;
t1030 = pkin(5) * t768 + t1018 * t923 + t920 * t754;
t1019 = t923 * t824 - t920 * t828;
t1029 = pkin(5) * t1019 - t1018 * t920 + t923 * t754;
t896 = t923 * g(2) + t920 * g(3);
t934 = qJDD(1) * pkin(1) + t896;
t895 = t920 * g(2) - t923 * g(3);
t925 = qJD(1) ^ 2;
t938 = t925 * pkin(1) - t895;
t835 = t915 * t934 - t917 * t938;
t831 = -t925 * pkin(2) + t835;
t931 = t915 * t938 + t917 * t934;
t930 = qJDD(1) * pkin(2) + t931;
t772 = t919 * t831 - t922 * t930;
t773 = t922 * t831 + t919 * t930;
t963 = t919 * t772 + t922 * t773;
t719 = t922 * t772 - t919 * t773;
t988 = t915 * t719;
t1013 = t917 * t963 + t988;
t986 = t917 * t719;
t657 = -t915 * t963 + t986;
t1027 = t1013 * t923 + t920 * t657;
t1026 = -t1013 * t920 + t923 * t657;
t916 = cos(pkin(9));
t927 = t916 ^ 2;
t905 = t927 * t970;
t914 = sin(pkin(9));
t912 = t914 ^ 2;
t959 = t916 * t970;
t871 = t905 * t916 + t912 * t959;
t966 = t916 * t976;
t838 = -t919 * t871 + t966;
t840 = t922 * t871 + t916 * t982;
t789 = t917 * t838 - t915 * t840;
t792 = t915 * t838 + t917 * t840;
t1021 = t923 * t789 - t920 * t792;
t1020 = t920 * t789 + t923 * t792;
t962 = t917 * t835 - t915 * t931;
t783 = -t915 * t835 - t917 * t931;
t980 = t920 * t783;
t1017 = t923 * t962 + t980;
t974 = t923 * t783;
t1014 = -t920 * t962 + t974;
t918 = sin(qJ(5));
t921 = cos(qJ(5));
t957 = t921 * t971;
t958 = t918 * t971;
t864 = t914 * t958 - t916 * t957;
t866 = t914 * t957 + t916 * t958;
t817 = t866 * t864;
t997 = qJDD(5) - t817;
t1012 = t918 * t997;
t1011 = t921 * t997;
t939 = -t970 * pkin(3) + t911 * qJ(4) + 0.2e1 * qJD(4) * t971 + t773;
t1010 = t911 * pkin(7) + t939;
t887 = t915 * qJDD(1) + t917 * t925;
t888 = t917 * qJDD(1) - t915 * t925;
t842 = t920 * t887 - t923 * t888;
t863 = qJ(2) * t887 - t917 * t913;
t944 = -qJ(2) * t888 - t915 * t913;
t1008 = pkin(5) * t842 + t920 * t863 + t923 * t944;
t844 = t881 * t916 * t914;
t891 = t914 * t959;
t845 = -t891 * t919 + t914 * t966;
t798 = t917 * t844 + t915 * t845;
t801 = t915 * t844 - t917 * t845;
t1007 = t923 * t798 - t920 * t801;
t1006 = t920 * t798 + t923 * t801;
t943 = t923 * t887 + t920 * t888;
t1005 = pkin(5) * t943 + t923 * t863 - t920 * t944;
t906 = t916 * t913;
t747 = t914 * t939 + t906;
t989 = t914 * t913;
t748 = t916 * t939 - t989;
t691 = t914 * t747 + t916 * t748;
t960 = t912 * t970;
t879 = t960 + t905;
t858 = t864 ^ 2;
t859 = t866 ^ 2;
t995 = pkin(1) * t913;
t737 = -t906 + (pkin(4) * t959 - t1010) * t914;
t738 = -pkin(4) * t905 + t1010 * t916 - t989;
t670 = -t921 * t737 + t918 * t738;
t671 = t918 * t737 + t921 * t738;
t636 = -t921 * t670 + t918 * t671;
t994 = pkin(4) * t636;
t902 = t914 * t911;
t904 = t916 * t911;
t856 = t918 * t902 - t921 * t904;
t857 = (t921 * t914 + t918 * t916) * t911;
t757 = -t856 * t918 - t921 * t857;
t993 = pkin(4) * t757;
t990 = t914 * t636;
t762 = -t911 * pkin(3) - t970 * qJ(4) + qJDD(4) + t772;
t755 = t914 * t762;
t987 = t916 * t636;
t756 = t916 * t762;
t742 = -pkin(4) * t904 - t879 * pkin(7) + t762;
t985 = t918 * t742;
t810 = qJDD(5) + t817;
t984 = t918 * t810;
t983 = t919 * t762;
t979 = t921 * t742;
t978 = t921 * t810;
t977 = t922 * t762;
t973 = -pkin(3) * t762 + qJ(4) * t691;
t855 = t864 * qJD(5);
t972 = t866 * qJD(5);
t969 = t914 * t904;
t968 = t919 * t817;
t967 = t922 * t817;
t965 = pkin(3) * t904 - qJ(4) * t871 - t756;
t660 = t919 * t691 - t977;
t964 = pkin(2) * t660 + t973;
t637 = t918 * t670 + t921 * t671;
t759 = -t856 * t921 + t918 * t857;
t797 = -t858 - t859;
t616 = -pkin(4) * t797 + pkin(7) * t759 + t637;
t627 = -pkin(7) * t757 - t636;
t708 = -t914 * t757 + t916 * t759;
t955 = -pkin(3) * t797 + qJ(4) * t708 + t916 * t616 + t914 * t627;
t924 = qJD(5) ^ 2;
t808 = -t924 - t858;
t750 = t921 * t808 - t1012;
t812 = t856 + 0.2e1 * t972;
t672 = -pkin(4) * t812 + pkin(7) * t750 - t979;
t749 = t918 * t808 + t1011;
t693 = -pkin(7) * t749 + t985;
t705 = -t914 * t749 + t916 * t750;
t954 = -pkin(3) * t812 + qJ(4) * t705 + t916 * t672 + t914 * t693;
t848 = -t859 - t924;
t779 = -t918 * t848 - t978;
t814 = -0.2e1 * t855 + t857;
t685 = -pkin(4) * t814 + pkin(7) * t779 + t985;
t776 = t921 * t848 - t984;
t710 = -pkin(7) * t776 + t979;
t727 = -t914 * t776 + t916 * t779;
t953 = -pkin(3) * t814 + qJ(4) * t727 + t916 * t685 + t914 * t710;
t901 = t912 * t911;
t903 = t927 * t911;
t877 = t903 + t901;
t952 = pkin(3) * t879 + qJ(4) * t877 + t691;
t951 = pkin(2) * t838 + t965;
t889 = t920 * qJDD(1) + t923 * t925;
t950 = pkin(5) * t889 - t923 * g(1);
t949 = -pkin(2) * t884 - t772;
t666 = t919 * t708 - t922 * t797;
t948 = pkin(2) * t666 + t955;
t674 = t919 * t705 - t922 * t812;
t947 = pkin(2) * t674 + t954;
t695 = t919 * t727 - t922 * t814;
t946 = pkin(2) * t695 + t953;
t820 = t919 * t877 + t922 * t879;
t945 = pkin(2) * t820 + t952;
t690 = t916 * t747 - t914 * t748;
t942 = t923 * t895 - t920 * t896;
t941 = -t920 * t895 - t923 * t896;
t870 = t879 * t914;
t940 = -pkin(3) * t902 + qJ(4) * t870 + t755;
t937 = pkin(4) * t749 - t670;
t836 = t919 * t870 - t914 * t976;
t936 = pkin(2) * t836 + t940;
t612 = t916 * t637 - t990;
t623 = -pkin(4) * t742 + pkin(7) * t637;
t935 = -pkin(3) * t742 - pkin(7) * t990 + qJ(4) * t612 + t916 * t623;
t608 = t919 * t612 - t922 * t742;
t933 = pkin(2) * t608 + t935;
t932 = pkin(4) * t776 - t671;
t929 = -pkin(2) * t881 - t773;
t890 = -t923 * qJDD(1) + t920 * t925;
t886 = 0.2e1 * t969;
t880 = t960 - t905;
t878 = t903 - t901;
t873 = -pkin(5) * t890 + t920 * g(1);
t847 = -t859 + t924;
t846 = t858 - t924;
t839 = t922 * t870 + t914 * t982;
t823 = t922 * t878 + t919 * t880;
t822 = t922 * t877 - t919 * t879;
t821 = t919 * t878 - t922 * t880;
t816 = t859 - t858;
t815 = -t855 + t857;
t813 = -t856 - t972;
t805 = pkin(1) * t888 + t931;
t804 = -pkin(1) * t887 - t835;
t803 = (-t864 * t921 + t866 * t918) * qJD(5);
t802 = (-t864 * t918 - t866 * t921) * qJD(5);
t794 = t921 * t815 - t918 * t972;
t791 = -t915 * t836 + t917 * t839;
t790 = t918 * t815 + t921 * t972;
t787 = t917 * t836 + t915 * t839;
t786 = -t918 * t813 + t921 * t855;
t785 = t921 * t813 + t918 * t855;
t780 = pkin(1) * t783;
t778 = -t918 * t847 + t1011;
t777 = t921 * t846 - t984;
t775 = t921 * t847 + t1012;
t774 = t918 * t846 + t978;
t771 = qJ(2) * t962 + t995;
t767 = -t915 * t821 + t917 * t823;
t766 = -t915 * t820 + t917 * t822;
t765 = t917 * t821 + t915 * t823;
t764 = t917 * t820 + t915 * t822;
t760 = -t921 * t812 - t918 * t814;
t758 = -t918 * t812 + t921 * t814;
t746 = -t914 * t802 + t916 * t803;
t745 = t916 * t802 + t914 * t803;
t740 = t919 * qJDD(5) + t922 * t746;
t739 = -t922 * qJDD(5) + t919 * t746;
t735 = -pkin(1) * t828 + t949;
t734 = -pkin(1) * t824 + t929;
t733 = -t920 * t787 + t923 * t791;
t732 = -t923 * t787 - t920 * t791;
t731 = -t914 * t790 + t916 * t794;
t730 = -t914 * t785 + t916 * t786;
t729 = t916 * t790 + t914 * t794;
t728 = t916 * t785 + t914 * t786;
t726 = -t914 * t775 + t916 * t778;
t725 = -t914 * t774 + t916 * t777;
t724 = t916 * t776 + t914 * t779;
t723 = t916 * t775 + t914 * t778;
t722 = t916 * t774 + t914 * t777;
t716 = pkin(2) * t719;
t715 = pkin(2) * t913 + pkin(6) * t963;
t714 = t922 * t726 + t919 * t857;
t713 = t922 * t725 - t919 * t856;
t712 = t919 * t726 - t922 * t857;
t711 = t919 * t725 + t922 * t856;
t709 = -t914 * t758 + t916 * t760;
t707 = t916 * t758 + t914 * t760;
t706 = t916 * t757 + t914 * t759;
t704 = t916 * t749 + t914 * t750;
t700 = t922 * t731 + t968;
t699 = t922 * t730 - t968;
t698 = t919 * t731 - t967;
t697 = t919 * t730 + t967;
t696 = t922 * t727 + t919 * t814;
t687 = pkin(1) * t789 + t951;
t686 = pkin(1) * t787 + t936;
t684 = -pkin(6) * t836 - t919 * t748 + t916 * t977;
t683 = -pkin(6) * t838 - t919 * t747 + t914 * t977;
t682 = pkin(6) * t839 + t922 * t748 + t916 * t983;
t681 = -pkin(6) * t840 + t922 * t747 + t914 * t983;
t679 = -t915 * t739 + t917 * t740;
t678 = t917 * t739 + t915 * t740;
t677 = t922 * t709 + t919 * t816;
t676 = t919 * t709 - t922 * t816;
t675 = t922 * t705 + t919 * t812;
t667 = t922 * t708 + t919 * t797;
t664 = -pkin(6) * t820 + t922 * t690;
t663 = pkin(6) * t822 + t919 * t690;
t662 = -pkin(3) * t706 - t993;
t661 = t922 * t691 + t983;
t654 = -t915 * t712 + t917 * t714;
t653 = -t915 * t711 + t917 * t713;
t652 = t917 * t712 + t915 * t714;
t651 = t917 * t711 + t915 * t713;
t650 = pkin(1) * t764 + t945;
t649 = -t915 * t698 + t917 * t700;
t648 = -t915 * t697 + t917 * t699;
t647 = t917 * t698 + t915 * t700;
t646 = t917 * t697 + t915 * t699;
t645 = -t915 * t695 + t917 * t696;
t644 = t917 * t695 + t915 * t696;
t643 = -pkin(3) * t724 - t932;
t642 = -t915 * t676 + t917 * t677;
t641 = t917 * t676 + t915 * t677;
t640 = -pkin(1) * t657 - t716;
t639 = -t915 * t674 + t917 * t675;
t638 = t917 * t674 + t915 * t675;
t635 = -t915 * t666 + t917 * t667;
t634 = t917 * t666 + t915 * t667;
t633 = -pkin(3) * t704 - t937;
t632 = -qJ(2) * t787 - t915 * t682 + t917 * t684;
t631 = -qJ(2) * t789 - t915 * t681 + t917 * t683;
t630 = qJ(2) * t791 + t917 * t682 + t915 * t684;
t629 = -qJ(2) * t792 + t917 * t681 + t915 * t683;
t628 = -qJ(4) * t724 - t914 * t685 + t916 * t710;
t625 = -qJ(2) * t764 - t915 * t663 + t917 * t664;
t624 = qJ(2) * t766 + t917 * t663 + t915 * t664;
t621 = -t915 * t660 + t917 * t661;
t620 = t917 * t660 + t915 * t661;
t619 = pkin(6) * t986 + qJ(2) * t657 - t915 * t715;
t618 = -qJ(4) * t704 - t914 * t672 + t916 * t693;
t617 = pkin(6) * t988 + qJ(2) * t1013 + t917 * t715 + t995;
t614 = -pkin(6) * t660 - (pkin(3) * t919 - qJ(4) * t922) * t690;
t613 = pkin(6) * t661 - (-pkin(3) * t922 - qJ(4) * t919 - pkin(2)) * t690;
t611 = t914 * t637 + t987;
t609 = t922 * t612 + t919 * t742;
t606 = pkin(1) * t644 + t946;
t605 = pkin(1) * t620 + t964;
t604 = -pkin(6) * t695 + t922 * t628 - t919 * t643;
t603 = -pkin(2) * t724 + pkin(6) * t696 + t919 * t628 + t922 * t643;
t602 = pkin(1) * t638 + t947;
t601 = -pkin(6) * t674 + t922 * t618 - t919 * t633;
t600 = -qJ(4) * t706 - t914 * t616 + t916 * t627;
t599 = -pkin(3) * t611 - t994;
t598 = -pkin(2) * t704 + pkin(6) * t675 + t919 * t618 + t922 * t633;
t597 = -pkin(6) * t666 + t922 * t600 - t919 * t662;
t596 = -pkin(7) * t987 - qJ(4) * t611 - t914 * t623;
t595 = -pkin(2) * t706 + pkin(6) * t667 + t919 * t600 + t922 * t662;
t594 = -t915 * t608 + t917 * t609;
t593 = t917 * t608 + t915 * t609;
t592 = pkin(1) * t634 + t948;
t591 = -qJ(2) * t620 - t915 * t613 + t917 * t614;
t590 = pkin(1) * t690 + qJ(2) * t621 + t917 * t613 + t915 * t614;
t589 = -qJ(2) * t644 - t915 * t603 + t917 * t604;
t588 = -pkin(1) * t724 + qJ(2) * t645 + t917 * t603 + t915 * t604;
t587 = -qJ(2) * t638 - t915 * t598 + t917 * t601;
t586 = -pkin(1) * t704 + qJ(2) * t639 + t917 * t598 + t915 * t601;
t585 = -qJ(2) * t634 - t915 * t595 + t917 * t597;
t584 = -pkin(6) * t608 + t922 * t596 - t919 * t599;
t583 = -pkin(1) * t706 + qJ(2) * t635 + t917 * t595 + t915 * t597;
t582 = pkin(1) * t593 + t933;
t581 = -pkin(2) * t611 + pkin(6) * t609 + t919 * t596 + t922 * t599;
t580 = -qJ(2) * t593 - t915 * t581 + t917 * t584;
t579 = -pkin(1) * t611 + qJ(2) * t594 + t917 * t581 + t915 * t584;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t896, -t895, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t805, t804, 0, -t780, 0, 0, 0, 0, 0, t911, t735, t734, 0, t640, t901, t886, 0, t903, 0, 0, t687, t686, t650, t605, t729, t707, t723, t728, t722, t745, t602, t606, t592, t582; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t889, 0, t890, 0, t950, t873, -t942, -pkin(5) * t942, 0, 0, -t943, 0, t842, 0, t1005, -t1008, -t1017, -pkin(5) * t1017 - qJ(2) * t980 - t923 * t771, 0, 0, -t1019, 0, t768, 0, t1029, -t1030, -t1027, -pkin(5) * t1027 - t923 * t617 - t920 * t619, -t1007, -t923 * t765 - t920 * t767, t732, t1007, t1021, 0, pkin(5) * t1020 - t923 * t629 - t920 * t631, -pkin(5) * t733 - t923 * t630 - t920 * t632, -t920 * t625 - t923 * t624 - pkin(5) * (-t920 * t764 + t923 * t766), -t920 * t591 - t923 * t590 - pkin(5) * (-t920 * t620 + t923 * t621), -t923 * t647 - t920 * t649, -t923 * t641 - t920 * t642, -t923 * t652 - t920 * t654, -t923 * t646 - t920 * t648, -t923 * t651 - t920 * t653, -t923 * t678 - t920 * t679, -t920 * t587 - t923 * t586 - pkin(5) * (-t920 * t638 + t923 * t639), -t920 * t589 - t923 * t588 - pkin(5) * (-t920 * t644 + t923 * t645), -t920 * t585 - t923 * t583 - pkin(5) * (-t920 * t634 + t923 * t635), -t920 * t580 - t923 * t579 - pkin(5) * (-t920 * t593 + t923 * t594); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t890, 0, -t889, 0, -t873, t950, t941, pkin(5) * t941, 0, 0, -t842, 0, -t943, 0, t1008, t1005, t1014, pkin(5) * t1014 + qJ(2) * t974 - t920 * t771, 0, 0, -t768, 0, -t1019, 0, t1030, t1029, t1026, pkin(5) * t1026 - t920 * t617 + t923 * t619, -t1006, -t920 * t765 + t923 * t767, t733, t1006, t1020, 0, -pkin(5) * t1021 - t920 * t629 + t923 * t631, pkin(5) * t732 - t920 * t630 + t923 * t632, t923 * t625 - t920 * t624 + pkin(5) * (-t923 * t764 - t920 * t766), t923 * t591 - t920 * t590 + pkin(5) * (-t923 * t620 - t920 * t621), -t920 * t647 + t923 * t649, -t920 * t641 + t923 * t642, -t920 * t652 + t923 * t654, -t920 * t646 + t923 * t648, -t920 * t651 + t923 * t653, -t920 * t678 + t923 * t679, t923 * t587 - t920 * t586 + pkin(5) * (-t923 * t638 - t920 * t639), t923 * t589 - t920 * t588 + pkin(5) * (-t923 * t644 - t920 * t645), t923 * t585 - t920 * t583 + pkin(5) * (-t923 * t634 - t920 * t635), t923 * t580 - t920 * t579 + pkin(5) * (-t923 * t593 - t920 * t594); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t925, 0, 0, -g(1), -t896, 0, 0, 0, t888, 0, -t887, 0, t944, t863, t783, qJ(2) * t783, 0, 0, -t828, 0, -t824, 0, t1018, t754, t657, t619, -t801, t767, t791, t801, t792, 0, t631, t632, t625, t591, t649, t642, t654, t648, t653, t679, t587, t589, t585, t580; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t925, 0, qJDD(1), 0, g(1), 0, t895, 0, 0, 0, t887, 0, t888, 0, -t863, t944, t962, t771, 0, 0, t824, 0, -t828, 0, -t754, t1018, t1013, t617, t798, t765, t787, -t798, -t789, 0, t629, t630, t624, t590, t647, t641, t652, t646, t651, t678, t586, t588, t583, t579; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t896, -t895, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t805, t804, 0, -t780, 0, 0, 0, 0, 0, t911, t735, t734, 0, t640, t901, t886, 0, t903, 0, 0, t687, t686, t650, t605, t729, t707, t723, t728, t722, t745, t602, t606, t592, t582; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t925, 0, 0, -t913, -t931, 0, 0, 0, -t884, 0, -t881, 0, t1009, t852, t719, pkin(6) * t719, t845, t823, t839, -t845, t840, 0, t683, t684, t664, t614, t700, t677, t714, t699, t713, t740, t601, t604, t597, t584; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t925, 0, qJDD(1), 0, t913, 0, t835, 0, 0, 0, t881, 0, -t884, 0, -t852, t1009, t963, t715, t844, t821, t836, -t844, -t838, 0, t681, t682, t663, t613, t698, t676, t712, t697, t711, t739, t598, t603, t595, t581; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t931, -t835, 0, 0, 0, 0, 0, 0, 0, t911, t949, t929, 0, -t716, t901, t886, 0, t903, 0, 0, t951, t936, t945, t964, t729, t707, t723, t728, t722, t745, t947, t946, t948, t933; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t911, 0, -t970, 0, 0, -t913, t772, 0, t969, t878, t870, -t969, t871, 0, t755, t756, t690, qJ(4) * t690, t731, t709, t726, t730, t725, t746, t618, t628, t600, t596; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t970, 0, t911, 0, t913, 0, t773, 0, t891, -t880, -t902, -t891, -t904, 0, t747, t748, 0, pkin(3) * t690, -t817, -t816, -t857, t817, t856, -qJDD(5), t633, t643, t662, t599; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t911, -t772, -t773, 0, 0, t901, t886, 0, t903, 0, 0, t965, t940, t952, t973, t729, t707, t723, t728, t722, t745, t954, t953, t955, t935; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t902, t904, t891, 0, t905, 0, 0, t762, t747, 0, t794, t760, t778, t786, t777, t803, t693, t710, t627, -pkin(7) * t636; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t902, -t960, t904, -t891, 0, -t762, 0, t748, 0, t790, t758, t775, t785, t774, t802, t672, t685, t616, t623; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t891, t880, t902, t891, t904, 0, -t747, -t748, 0, 0, t817, t816, t857, -t817, -t856, qJDD(5), t937, t932, t993, t994; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t815, -t812, t997, t855, t846, -t855, 0, t742, t670, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t972, t814, t847, t813, t810, -t972, -t742, 0, t671, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t817, t816, t857, -t817, -t856, qJDD(5), -t670, -t671, 0, 0;];
m_new_reg = t1;
