% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:50
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRPR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR2_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:50:10
% EndTime: 2019-12-05 17:50:12
% DurationCPUTime: 2.50s
% Computational Cost: add. (9024->165), mult. (13584->248), div. (0->0), fcn. (8597->10), ass. (0->138)
t1157 = qJD(1) + qJD(3);
t1153 = t1157 ^ 2;
t1164 = sin(qJ(3));
t1154 = qJDD(1) + qJDD(3);
t1167 = cos(qJ(3));
t1182 = t1167 * t1154;
t1131 = t1164 * t1153 - t1182;
t1160 = sin(pkin(8));
t1162 = cos(pkin(8));
t1183 = t1164 * t1154;
t1177 = -t1167 * t1153 - t1183;
t1107 = t1162 * t1131 - t1160 * t1177;
t1165 = sin(qJ(1));
t1168 = cos(qJ(1));
t1196 = t1160 * t1131 + t1162 * t1177;
t1202 = t1165 * t1107 + t1168 * t1196;
t1201 = t1168 * t1107 - t1165 * t1196;
t1200 = 2 * qJD(5);
t1159 = sin(pkin(9));
t1161 = cos(pkin(9));
t1163 = sin(qJ(5));
t1166 = cos(qJ(5));
t1197 = -t1159 * t1163 + t1161 * t1166;
t1176 = t1159 * t1166 + t1161 * t1163;
t1119 = t1176 * t1154;
t1155 = t1159 ^ 2;
t1156 = t1161 ^ 2;
t1180 = t1155 + t1156;
t1128 = t1180 * t1153;
t1120 = t1197 * t1157;
t1193 = t1120 ^ 2;
t1122 = t1176 * t1157;
t1192 = t1122 ^ 2;
t1191 = qJD(4) * t1157;
t1190 = t1122 * t1120;
t1189 = t1153 * t1161;
t1188 = t1155 * t1153;
t1187 = t1156 * t1153;
t1186 = t1159 * t1154;
t1147 = t1161 * t1154;
t1143 = t1168 * g(2) + t1165 * g(3);
t1174 = qJDD(1) * pkin(1) + t1143;
t1142 = t1165 * g(2) - t1168 * g(3);
t1170 = qJD(1) ^ 2;
t1175 = -t1170 * pkin(1) + t1142;
t1111 = t1160 * t1174 + t1162 * t1175;
t1109 = -t1170 * pkin(2) + t1111;
t1110 = -t1160 * t1175 + t1162 * t1174;
t1173 = qJDD(1) * pkin(2) + t1110;
t1084 = t1167 * t1109 + t1164 * t1173;
t1158 = -g(1) + qJDD(2);
t1181 = t1161 * t1158 - 0.2e1 * t1159 * t1191;
t1080 = -t1153 * pkin(3) + t1154 * qJ(4) + t1084;
t1073 = t1159 * t1158 + (t1080 + 0.2e1 * t1191) * t1161;
t1083 = -t1164 * t1109 + t1167 * t1173;
t1093 = t1197 * t1154;
t1133 = -t1160 * qJDD(1) - t1162 * t1170;
t1134 = t1162 * qJDD(1) - t1160 * t1170;
t1179 = t1168 * t1133 - t1165 * t1134;
t1178 = -t1165 * t1133 - t1168 * t1134;
t1079 = -t1154 * pkin(3) - t1153 * qJ(4) + qJDD(4) - t1083;
t1169 = qJD(5) ^ 2;
t1137 = t1159 * t1189;
t1136 = -t1168 * qJDD(1) + t1165 * t1170;
t1135 = t1165 * qJDD(1) + t1168 * t1170;
t1126 = t1180 * t1154;
t1124 = t1161 * t1128;
t1123 = t1159 * t1128;
t1116 = -t1169 - t1192;
t1115 = -t1167 * t1124 - t1161 * t1183;
t1114 = t1167 * t1123 + t1159 * t1183;
t1113 = -t1164 * t1124 + t1161 * t1182;
t1112 = t1164 * t1123 - t1159 * t1182;
t1104 = t1167 * t1126 - t1164 * t1128;
t1103 = t1164 * t1126 + t1167 * t1128;
t1099 = t1120 * t1200 + t1119;
t1098 = t1122 * t1200 - t1093;
t1097 = -qJDD(5) + t1190;
t1096 = qJDD(5) + t1190;
t1095 = -t1169 - t1193;
t1094 = -t1192 - t1193;
t1092 = -t1160 * t1113 + t1162 * t1115;
t1091 = -t1160 * t1112 + t1162 * t1114;
t1090 = t1162 * t1113 + t1160 * t1115;
t1089 = t1162 * t1112 + t1160 * t1114;
t1088 = -t1160 * t1110 + t1162 * t1111;
t1087 = t1162 * t1110 + t1160 * t1111;
t1086 = t1166 * t1097 - t1163 * t1116;
t1085 = t1163 * t1097 + t1166 * t1116;
t1082 = -t1160 * t1103 + t1162 * t1104;
t1081 = t1162 * t1103 + t1160 * t1104;
t1077 = t1166 * t1093 + t1163 * t1119;
t1076 = t1163 * t1093 - t1166 * t1119;
t1075 = t1166 * t1095 - t1163 * t1096;
t1074 = t1163 * t1095 + t1166 * t1096;
t1072 = -t1159 * t1080 + t1181;
t1071 = -pkin(4) * t1147 + t1079 + (-t1187 - t1188) * pkin(7);
t1070 = -pkin(4) * t1187 + pkin(7) * t1147 + t1073;
t1069 = (pkin(4) * t1189 - pkin(7) * t1154 - t1080) * t1159 + t1181;
t1068 = -t1159 * t1085 + t1161 * t1086;
t1067 = t1161 * t1085 + t1159 * t1086;
t1066 = -t1164 * t1083 + t1167 * t1084;
t1065 = t1167 * t1083 + t1164 * t1084;
t1064 = -t1159 * t1076 + t1161 * t1077;
t1063 = t1161 * t1076 + t1159 * t1077;
t1062 = -t1159 * t1074 + t1161 * t1075;
t1061 = t1161 * t1074 + t1159 * t1075;
t1060 = t1167 * t1068 + t1164 * t1099;
t1059 = t1164 * t1068 - t1167 * t1099;
t1058 = -t1159 * t1072 + t1161 * t1073;
t1057 = t1161 * t1072 + t1159 * t1073;
t1056 = t1167 * t1062 + t1164 * t1098;
t1055 = t1164 * t1062 - t1167 * t1098;
t1054 = t1163 * t1069 + t1166 * t1070;
t1053 = t1166 * t1069 - t1163 * t1070;
t1052 = t1167 * t1064 + t1164 * t1094;
t1051 = t1164 * t1064 - t1167 * t1094;
t1050 = t1167 * t1058 + t1164 * t1079;
t1049 = t1164 * t1058 - t1167 * t1079;
t1048 = -t1160 * t1065 + t1162 * t1066;
t1047 = t1162 * t1065 + t1160 * t1066;
t1046 = -t1160 * t1059 + t1162 * t1060;
t1045 = t1162 * t1059 + t1160 * t1060;
t1044 = -t1160 * t1055 + t1162 * t1056;
t1043 = t1162 * t1055 + t1160 * t1056;
t1042 = -t1163 * t1053 + t1166 * t1054;
t1041 = t1166 * t1053 + t1163 * t1054;
t1040 = -t1160 * t1051 + t1162 * t1052;
t1039 = t1162 * t1051 + t1160 * t1052;
t1038 = -t1160 * t1049 + t1162 * t1050;
t1037 = t1162 * t1049 + t1160 * t1050;
t1036 = -t1159 * t1041 + t1161 * t1042;
t1035 = t1161 * t1041 + t1159 * t1042;
t1034 = t1167 * t1036 + t1164 * t1071;
t1033 = t1164 * t1036 - t1167 * t1071;
t1032 = -t1160 * t1033 + t1162 * t1034;
t1031 = t1162 * t1033 + t1160 * t1034;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1158, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1158, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1057, 0, 0, 0, 0, 0, 0, t1061, t1067, t1063, t1035; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1136, t1135, 0, -t1165 * t1142 - t1168 * t1143, 0, 0, 0, 0, 0, 0, t1178, -t1179, 0, -t1168 * t1087 - t1165 * t1088, 0, 0, 0, 0, 0, 0, t1201, -t1202, 0, -t1168 * t1047 - t1165 * t1048, 0, 0, 0, 0, 0, 0, -t1168 * t1090 - t1165 * t1092, -t1168 * t1089 - t1165 * t1091, -t1168 * t1081 - t1165 * t1082, -t1168 * t1037 - t1165 * t1038, 0, 0, 0, 0, 0, 0, -t1168 * t1043 - t1165 * t1044, -t1168 * t1045 - t1165 * t1046, -t1168 * t1039 - t1165 * t1040, -t1168 * t1031 - t1165 * t1032; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1135, t1136, 0, t1168 * t1142 - t1165 * t1143, 0, 0, 0, 0, 0, 0, t1179, t1178, 0, -t1165 * t1087 + t1168 * t1088, 0, 0, 0, 0, 0, 0, t1202, t1201, 0, -t1165 * t1047 + t1168 * t1048, 0, 0, 0, 0, 0, 0, -t1165 * t1090 + t1168 * t1092, -t1165 * t1089 + t1168 * t1091, -t1165 * t1081 + t1168 * t1082, -t1165 * t1037 + t1168 * t1038, 0, 0, 0, 0, 0, 0, -t1165 * t1043 + t1168 * t1044, -t1165 * t1045 + t1168 * t1046, -t1165 * t1039 + t1168 * t1040, -t1165 * t1031 + t1168 * t1032; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1170, -qJDD(1), 0, t1142, 0, 0, 0, 0, 0, 0, t1133, -t1134, 0, t1088, 0, 0, 0, 0, 0, 0, t1196, t1107, 0, t1048, 0, 0, 0, 0, 0, 0, t1092, t1091, t1082, t1038, 0, 0, 0, 0, 0, 0, t1044, t1046, t1040, t1032; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1170, 0, t1143, 0, 0, 0, 0, 0, 0, t1134, t1133, 0, t1087, 0, 0, 0, 0, 0, 0, -t1107, t1196, 0, t1047, 0, 0, 0, 0, 0, 0, t1090, t1089, t1081, t1037, 0, 0, 0, 0, 0, 0, t1043, t1045, t1039, t1031; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1158, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1158, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1057, 0, 0, 0, 0, 0, 0, t1061, t1067, t1063, t1035; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1170, -qJDD(1), 0, t1111, 0, 0, 0, 0, 0, 0, t1177, t1131, 0, t1066, 0, 0, 0, 0, 0, 0, t1115, t1114, t1104, t1050, 0, 0, 0, 0, 0, 0, t1056, t1060, t1052, t1034; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1170, 0, t1110, 0, 0, 0, 0, 0, 0, -t1131, t1177, 0, t1065, 0, 0, 0, 0, 0, 0, t1113, t1112, t1103, t1049, 0, 0, 0, 0, 0, 0, t1055, t1059, t1051, t1033; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1158, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1158, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1057, 0, 0, 0, 0, 0, 0, t1061, t1067, t1063, t1035; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1153, -t1154, 0, t1084, 0, 0, 0, 0, 0, 0, -t1124, t1123, t1126, t1058, 0, 0, 0, 0, 0, 0, t1062, t1068, t1064, t1036; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1154, -t1153, 0, t1083, 0, 0, 0, 0, 0, 0, t1147, -t1186, t1128, -t1079, 0, 0, 0, 0, 0, 0, -t1098, -t1099, -t1094, -t1071; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1158, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1057, 0, 0, 0, 0, 0, 0, t1061, t1067, t1063, t1035; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1187, t1137, t1147, t1073, 0, 0, 0, 0, 0, 0, t1075, t1086, t1077, t1042; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1137, -t1188, -t1186, t1072, 0, 0, 0, 0, 0, 0, t1074, t1085, t1076, t1041; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1147, t1186, -t1128, t1079, 0, 0, 0, 0, 0, 0, t1098, t1099, t1094, t1071; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1095, t1097, t1093, t1054; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1096, t1116, -t1119, t1053; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1098, t1099, t1094, t1071;];
f_new_reg = t1;
