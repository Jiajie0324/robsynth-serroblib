% Calculate minimal parameter regressor of coriolis matrix for
% S5RRRPP8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x25]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:10
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RRRPP8_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPP8_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPP8_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RRRPP8_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:09:26
% EndTime: 2019-12-31 21:09:38
% DurationCPUTime: 4.92s
% Computational Cost: add. (3130->465), mult. (6497->567), div. (0->0), fcn. (5364->4), ass. (0->328)
t233 = cos(qJ(2));
t231 = sin(qJ(2));
t397 = t231 * pkin(7);
t271 = -t233 * pkin(2) - t397;
t165 = -pkin(1) + t271;
t232 = cos(qJ(3));
t357 = t232 * t233;
t206 = pkin(6) * t357;
t230 = sin(qJ(3));
t119 = t230 * t165 + t206;
t356 = t233 * qJ(4);
t104 = -t119 + t356;
t427 = t104 + t119;
t363 = t230 * qJ(4);
t266 = -t232 * pkin(3) - t363;
t162 = -pkin(2) + t266;
t395 = t233 * pkin(7);
t315 = t395 / 0.2e1;
t401 = t231 / 0.2e1;
t426 = t162 * t401 + t315;
t223 = pkin(3) * t230;
t387 = qJ(4) * t232;
t261 = t230 * qJ(5) - t387;
t143 = t223 + t261;
t374 = t143 * t230;
t229 = pkin(3) + qJ(5);
t419 = -t229 * t232 - t363;
t141 = -pkin(2) + t419;
t375 = t141 * t232;
t56 = t374 + t375;
t219 = t231 * qJ(4);
t360 = t231 * t232;
t142 = pkin(3) * t360 + t230 * t219;
t115 = qJ(5) * t360 + t142;
t412 = pkin(4) + pkin(7);
t174 = t412 * t230;
t362 = t230 * t231;
t86 = -pkin(4) * t362 + t119;
t65 = t86 - t356;
t312 = t86 / 0.2e1 - t65 / 0.2e1;
t409 = -t141 / 0.2e1;
t199 = pkin(3) * t362;
t220 = t231 * pkin(6);
t99 = t231 * t261 + t199 + t220;
t425 = t174 * t312 - t115 * t409 + t99 * t143 / 0.2e1;
t323 = t233 * qJD(1);
t198 = -qJD(3) + t323;
t175 = t412 * t232;
t368 = t175 * t233;
t402 = t230 / 0.2e1;
t245 = t99 * t402 + t368 / 0.2e1;
t325 = t231 * qJD(1);
t298 = t232 * t325;
t275 = t230 * t298;
t227 = t232 ^ 2;
t417 = t230 ^ 2;
t321 = -t227 + t417;
t237 = qJD(2) * t321 + 0.2e1 * t275;
t222 = t233 * pkin(3);
t361 = t230 * t233;
t200 = pkin(6) * t361;
t118 = -t232 * t165 + t200;
t85 = -pkin(4) * t360 - t118;
t55 = t233 * qJ(5) + t222 - t85;
t424 = t55 + t85;
t218 = qJD(4) * t232;
t422 = t266 * qJD(3) + t218;
t421 = qJD(5) * t230 - t218;
t369 = t174 * t233;
t388 = t99 * t232;
t420 = t369 / 0.2e1 - t388 / 0.2e1;
t105 = t222 + t118;
t400 = t232 / 0.2e1;
t418 = -t118 * t232 / 0.2e1 + t105 * t400 + t427 * t402;
t341 = qJD(2) * t232;
t195 = t230 * t341;
t172 = t231 * t195;
t416 = -0.2e1 * t172;
t415 = -pkin(3) / 0.2e1;
t411 = -qJ(5) / 0.2e1;
t410 = -t115 / 0.2e1;
t408 = -t142 / 0.2e1;
t173 = t223 - t387;
t407 = -t173 / 0.2e1;
t399 = t231 * pkin(2);
t176 = -t395 + t399;
t405 = -t176 / 0.2e1;
t404 = -t222 / 0.2e1;
t403 = -t229 / 0.2e1;
t398 = t231 * pkin(3);
t396 = t233 * pkin(4);
t394 = t233 * t55;
t393 = t233 * t65;
t344 = pkin(3) * t361 + t233 * pkin(6);
t100 = t233 * t261 + t344;
t204 = pkin(6) * t362;
t60 = -t204 + (-t176 + t396) * t232 - t229 * t231;
t159 = t230 * t176;
t205 = pkin(6) * t360;
t343 = -t205 + t159;
t107 = -t219 - t343;
t69 = -pkin(4) * t361 - t107;
t5 = t100 * t99 + t55 * t60 + t65 * t69;
t392 = t5 * qJD(1);
t313 = t55 / 0.2e1 + t85 / 0.2e1;
t7 = (t229 * t233 / 0.2e1 + t313) * t232 + (t356 / 0.2e1 + t312) * t230;
t391 = t7 * qJD(1);
t8 = t115 * t99 + t55 * t86 + t65 * t85;
t390 = t8 * qJD(1);
t9 = (t231 * t60 + t394) * t232 + (-t231 * t69 - t393) * t230;
t389 = t9 * qJD(1);
t270 = -qJ(4) * t360 + t199;
t122 = t220 + t270;
t379 = t119 * t233;
t38 = t379 + (t122 * t232 + t142 * t230) * t231;
t386 = qJD(1) * t38;
t382 = t104 * t233;
t44 = t122 * t360 - t382;
t385 = qJD(1) * t44;
t226 = t231 ^ 2;
t380 = t118 * t233;
t67 = -t226 * pkin(6) * t230 - t380;
t384 = qJD(1) * t67;
t358 = t232 * t226;
t68 = -pkin(6) * t358 - t379;
t383 = qJD(1) * t68;
t381 = t115 * t230;
t12 = ((-t65 + t86) * t232 - t424 * t230) * t231;
t378 = t12 * qJD(1);
t377 = t122 * t230;
t123 = -t232 * t356 + t344;
t376 = t123 * t232;
t262 = t100 * t231 + t233 * t99;
t15 = t230 * t262 - t55 * t231 + t60 * t233;
t373 = t15 * qJD(1);
t359 = t232 * t176;
t284 = -t204 - t359;
t108 = t284 - t398;
t16 = t104 * t107 + t105 * t108 + t122 * t123;
t372 = t16 * qJD(1);
t17 = -t65 * t231 + t232 * t262 + t69 * t233;
t371 = t17 * qJD(1);
t370 = t173 * t230;
t18 = t104 * t118 + t105 * t119 + t122 * t142;
t367 = t18 * qJD(1);
t289 = -t361 / 0.2e1;
t177 = qJ(4) * t289;
t269 = (-t104 / 0.2e1 - t119 / 0.2e1) * t230;
t286 = t118 / 0.2e1 - t105 / 0.2e1;
t19 = t177 + t269 + (t404 + t286) * t232;
t366 = t19 * qJD(1);
t21 = (t105 * t233 + t108 * t231) * t232 + (t107 * t231 + t382) * t230;
t365 = t21 * qJD(1);
t22 = (t427 * t232 + (-t105 + t118) * t230) * t231;
t364 = t22 * qJD(1);
t27 = t122 * t357 - t107 * t233 + (t104 + t376) * t231;
t355 = t27 * qJD(1);
t28 = t108 * t233 - t105 * t231 + (t122 * t233 + t123 * t231) * t230;
t354 = t28 * qJD(1);
t33 = t86 * t233 + (t381 + t388) * t231;
t353 = t33 * qJD(1);
t66 = t99 * t362;
t34 = t115 * t360 + t233 * t85 - t66;
t352 = t34 * qJD(1);
t37 = t66 + t394;
t351 = t37 * qJD(1);
t39 = -t122 * t362 + t142 * t360 - t380;
t350 = t39 * qJD(1);
t40 = t99 * t360 + t393;
t349 = t40 * qJD(1);
t42 = t118 * t231 + (-t284 - 0.2e1 * t204) * t233;
t348 = t42 * qJD(1);
t43 = t343 * t233 + (-t119 + 0.2e1 * t206) * t231;
t347 = t43 * qJD(1);
t145 = t159 / 0.2e1;
t346 = t145 - t205 / 0.2e1;
t147 = t359 / 0.2e1;
t345 = t147 + t204 / 0.2e1;
t228 = t233 ^ 2;
t192 = t228 - t226;
t342 = qJD(2) * t230;
t340 = qJD(3) * t119;
t339 = qJD(3) * t175;
t338 = qJD(3) * t230;
t337 = qJD(3) * t232;
t283 = t417 / 0.2e1 - t227 / 0.2e1;
t133 = (-0.1e1 / 0.2e1 + t283) * t231;
t336 = qJD(4) * t133;
t335 = qJD(4) * t233;
t333 = qJD(5) * t232;
t332 = qJD(5) * t233;
t331 = t118 * qJD(3);
t132 = (0.1e1 / 0.2e1 + t283) * t231;
t330 = t132 * qJD(4);
t157 = t192 * t230;
t329 = t157 * qJD(1);
t158 = t232 * t228 - t358;
t328 = t158 * qJD(1);
t327 = t192 * qJD(1);
t326 = t230 * qJD(4);
t324 = t231 * qJD(2);
t322 = t233 * qJD(2);
t217 = t233 * qJD(3);
t320 = pkin(1) * t325;
t319 = pkin(1) * t323;
t318 = pkin(7) * t338;
t317 = -t398 / 0.2e1;
t316 = t396 / 0.2e1;
t314 = t415 + t411;
t287 = -t357 / 0.2e1;
t288 = -t360 / 0.2e1;
t311 = -t377 / 0.2e1 + t162 * t288 + pkin(7) * t287;
t310 = t219 + t346;
t309 = qJ(4) * t335;
t308 = t230 * t217;
t307 = t232 * t217;
t306 = t232 * t326;
t305 = t230 * t333;
t304 = t231 * t333;
t303 = t230 * t337;
t302 = t230 * t323;
t301 = t231 * t322;
t300 = t231 * t326;
t299 = t231 * t323;
t292 = -t370 / 0.2e1;
t290 = t362 / 0.2e1;
t146 = -t159 / 0.2e1;
t285 = t146 + t205 / 0.2e1 - t219;
t282 = qJD(1) * t132 - t195;
t89 = t133 * qJD(1) - t195;
t144 = t283 * t231;
t281 = qJD(1) * t144 - t195;
t156 = t321 * t226;
t280 = qJD(1) * t156 + t416;
t170 = t230 * qJD(1) * t358;
t75 = t132 * qJD(2) + t170;
t279 = t133 * qJD(2) + t170;
t278 = qJD(2) * t144 + t170;
t182 = -t204 / 0.2e1;
t277 = t182 + t311;
t276 = t226 * t306;
t274 = t230 * t304;
t273 = t405 + t316;
t178 = pkin(4) * t289;
t272 = t178 + t219 / 0.2e1 + t346;
t166 = t198 * qJ(4);
t167 = t417 * t226 + t228;
t268 = qJD(1) * t167 - t172 - t217;
t168 = t227 * t226 + t228;
t87 = t168 * qJD(1) + t172 - t217;
t267 = pkin(2) * t290 + pkin(7) * t289;
t265 = -t162 * t233 + t397;
t264 = t141 * t290 + t420;
t250 = t60 * t403 + t69 * qJ(4) / 0.2e1;
t1 = -t175 * t313 + t250 - t425;
t41 = t141 * t143;
t263 = t1 * qJD(1) - t41 * qJD(2);
t249 = t375 / 0.2e1 + t314;
t10 = t182 + (t410 + t273) * t232 + (t374 / 0.2e1 + t403 + t249) * t231 + t245;
t57 = -t141 * t230 + t143 * t232;
t260 = -qJD(1) * t10 + qJD(2) * t57;
t235 = t143 * t288 + t264;
t14 = (t410 + t316) * t230 + t235 + t285;
t259 = -qJD(1) * t14 + qJD(2) * t56;
t234 = (t231 * t407 - t122 / 0.2e1) * t232 + (t408 + t426) * t230;
t24 = t234 + t285;
t91 = t162 * t232 + t370;
t258 = -qJD(1) * t24 + qJD(2) * t91;
t25 = t142 * t400 + (t292 + pkin(3)) * t231 + t311 + t345;
t92 = -t162 * t230 + t173 * t232;
t257 = -qJD(1) * t25 - qJD(2) * t92;
t256 = -t107 * t232 + t108 * t230;
t255 = t198 * t231;
t129 = t404 + (t403 + t411) * t233;
t254 = qJD(1) * t129 + qJD(3) * t229;
t253 = -t326 - t333;
t252 = t315 - t399 / 0.2e1;
t251 = -t107 * qJ(4) / 0.2e1 + t108 * t415;
t80 = (t405 + t252) * t232;
t248 = pkin(2) * t342 - qJD(1) * t80;
t79 = t145 + t267;
t247 = pkin(2) * t341 - qJD(1) * t79;
t243 = t122 * t407 + t162 * t408;
t3 = (t232 * t286 + t269) * pkin(7) + t243 + t251;
t244 = -t162 * t173 * qJD(2) + t3 * qJD(1);
t236 = t232 * t273 + t182;
t29 = t231 * t249 + t236 + t245;
t242 = qJD(1) * t29 + t141 * t342;
t31 = t362 * t409 + t272 - t420;
t241 = qJD(1) * t31 + t141 * t341;
t35 = t182 + t317 + t377 / 0.2e1 + (t405 + t426) * t232;
t240 = qJD(1) * t35 + t162 * t342;
t127 = t232 * t255;
t239 = t298 + t342;
t224 = qJ(4) * qJD(4);
t216 = t417 * qJD(4);
t215 = pkin(7) * t337;
t211 = qJ(4) * t217;
t207 = t324 / 0.2e1;
t196 = t232 * t323;
t171 = t232 * t300;
t169 = t233 * t300;
t161 = t174 * qJD(3);
t160 = t168 * qJD(4);
t155 = -t196 + t337;
t154 = t198 * t230;
t151 = (t323 - qJD(3) / 0.2e1) * t231;
t140 = -t227 * qJD(2) + t275;
t139 = t239 * t230;
t138 = t144 * qJD(3);
t128 = t239 * t233;
t126 = (-t230 * t325 + t341) * t233;
t125 = t230 * t255;
t59 = t232 * t252 + t147 + t204;
t58 = t205 + t146 + t267;
t46 = t129 + t85;
t36 = -t359 / 0.2e1 + t317 + t277;
t32 = t264 + t272;
t30 = t141 * t288 + t231 * t314 + t236 - t245;
t26 = (t142 / 0.2e1 + t405) * t232 + (t292 - pkin(3)) * t231 + t277;
t23 = t234 + t310;
t20 = pkin(3) * t287 + t177 + t418;
t13 = -t381 / 0.2e1 + t178 + t235 + t310;
t11 = t398 / 0.2e1 + pkin(4) * t287 + t410 * t232 + t345 + (qJ(5) + t229 + t56) * t401 + t245;
t6 = t229 * t287 + t230 * t312 + t232 * t313 + t177;
t4 = t418 * pkin(7) - t243 + t251;
t2 = t250 + t424 * t175 / 0.2e1 + t425;
t45 = [0, 0, 0, t301, t192 * qJD(2), 0, 0, 0, -pkin(1) * t324, -pkin(1) * t322, -t226 * t303 + t227 * t301, t156 * qJD(3) + t233 * t416, -t158 * qJD(2) + t231 * t308, t157 * qJD(2) + t231 * t307, -t301, -qJD(2) * t42 - qJD(3) * t68, qJD(2) * t43 + qJD(3) * t67, qJD(2) * t21 + qJD(3) * t22 + t169, -qJD(2) * t28 - qJD(3) * t38 + t276, -qJD(2) * t27 - qJD(3) * t39 + t160, qJD(2) * t16 + qJD(3) * t18 - qJD(4) * t44, t9 * qJD(2) + t12 * qJD(3) + t233 * t304 + t169, -qJD(2) * t17 - qJD(3) * t34 - t226 * t305 + t160, qJD(2) * t15 + qJD(3) * t33 + qJD(5) * t167 - t276, qJD(2) * t5 + qJD(3) * t8 - qJD(4) * t40 + qJD(5) * t37; 0, 0, 0, t299, t327, t322, -t324, 0, -pkin(6) * t322 - t320, pkin(6) * t324 - t319, -t138 + (t227 * t325 + t195) * t233, -0.2e1 * t231 * t303 - t237 * t233, t230 * t324 - t328, t232 * t324 + t329, -t151, -t348 + (t230 * t271 - t206) * qJD(2) + t59 * qJD(3), t347 + (t232 * t271 + t200) * qJD(2) + t58 * qJD(3), qJD(2) * t256 + t20 * qJD(3) + t365, -t354 + (t230 * t265 + t376) * qJD(2) + t26 * qJD(3) + t330, -t355 + (-t123 * t230 + t232 * t265) * qJD(2) + t23 * qJD(3) + t171, t372 + (pkin(7) * t256 + t123 * t162) * qJD(2) + t4 * qJD(3) + t36 * qJD(4), t389 + ((t69 + t369) * t232 + (t60 - t368) * t230) * qJD(2) + t6 * qJD(3), -t371 + (-t100 * t230 - t141 * t357 + t175 * t231) * qJD(2) + t13 * qJD(3) + t171 - t133 * qJD(5), t373 + (-t100 * t232 + t141 * t361 - t174 * t231) * qJD(2) + t11 * qJD(3) - t330 - t274, t392 + (t100 * t141 + t174 * t60 + t175 * t69) * qJD(2) + t2 * qJD(3) + t30 * qJD(4) + t32 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t278, t280, t125, t127, t207, qJD(2) * t59 - t340 - t383, qJD(2) * t58 + t331 + t384, t20 * qJD(2) + qJD(3) * t270 - t300 + t364, qJD(2) * t26 + t340 - t386, t23 * qJD(2) - t331 - t335 - t350, t367 + t4 * qJD(2) + (-pkin(3) * t119 - qJ(4) * t118) * qJD(3) - t104 * qJD(4), t378 + t6 * qJD(2) + ((t229 * t230 - t387) * qJD(3) + t253) * t231, t13 * qJD(2) + t85 * qJD(3) - t335 - t352, t11 * qJD(2) - t86 * qJD(3) - t332 + t353, t390 + t2 * qJD(2) + (qJ(4) * t85 - t229 * t86) * qJD(3) + t65 * qJD(4) + t46 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t125, t75, t87, qJD(2) * t36 - qJD(3) * t104 - t385, t125, t87, -t75, qJD(2) * t30 + qJD(3) * t65 - t349; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t127, -t279, t268, qJD(2) * t32 + qJD(3) * t46 + t351; 0, 0, 0, -t299, -t327, 0, 0, 0, t320, t319, -t227 * t299 - t138, 0.2e1 * t230 * t127, -t307 + t328, t308 - t329, t151, qJD(3) * t80 + t348, qJD(3) * t79 - t347, -t19 * qJD(3) - t232 * t335 - t365, qJD(3) * t25 + t336 + t354, qJD(3) * t24 + t171 + t355, -qJD(3) * t3 - qJD(4) * t35 - t372, t7 * qJD(3) + t233 * t421 - t389, qJD(3) * t14 - qJD(5) * t132 + t171 + t371, qJD(3) * t10 - t274 - t336 - t373, -qJD(3) * t1 - qJD(4) * t29 - qJD(5) * t31 - t392; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t303, -t321 * qJD(3), 0, 0, 0, -pkin(2) * t338, -pkin(2) * t337, 0, qJD(3) * t92 - t306, -qJD(3) * t91 + t216, (qJD(3) * t173 - t326) * t162, 0, -qJD(3) * t56 + t216 + t305, -qJD(3) * t57 + qJD(5) * t227 + t306, t41 * qJD(3) + t141 * t253; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t281, -t237, t155, t154, -t325 / 0.2e1, -t215 - t248, -t247 + t318, -t366 + t422, t215 - t257, -t258 - t318, pkin(7) * t422 - t244, qJD(3) * t419 + t391 - t421, -t161 - t259, -t260 - t339, (-qJ(4) * t174 - t175 * t229) * qJD(3) + t175 * qJD(4) - t174 * qJD(5) - t263; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t155, t89, t139, t215 - t240, t155, t139, -t89, -t242 + t339; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t154, -t282, -t140, -t161 - t241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t278, -t280, t126, -t128, t207, -qJD(2) * t80 + t383, -qJD(2) * t79 - t384, qJD(2) * t19 - t364, -qJD(2) * t25 + t386, -t24 * qJD(2) - t335 + t350, t3 * qJD(2) - t309 - t367, -qJD(2) * t7 - t378, -t14 * qJD(2) - t335 + t352, -t10 * qJD(2) - t332 - t353, t1 * qJD(2) + t129 * qJD(5) - t309 - t390; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t281, t237, t196, -t302, t325 / 0.2e1, t248, t247, t366, t257, t258, t244, -t391, t259, t260, t263; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(4), t224, 0, qJD(4), qJD(5), qJD(5) * t229 + t224; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t198, -t166, 0, -t198, 0, -t166; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t198, t254; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t126, -t279, -t87, qJD(2) * t35 + t211 + t385, t126, -t87, t279, t29 * qJD(2) + t211 + t332 + t349; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t196, -t89, -t139, t240, t196, -t139, t89, t242; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t198, t166, 0, t198, 0, -qJD(5) + t166; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t198; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t128, t75, -t268, t31 * qJD(2) - t129 * qJD(3) - t335 - t351; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t302, t282, t140, t241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t198, qJD(4) - t254; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t198; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t45;
