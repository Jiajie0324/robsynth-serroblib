% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRPP8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:10
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRPP8_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPP8_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPP8_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPP8_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPP8_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RRRPP8_invdynB_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:09:33
% EndTime: 2019-12-31 21:09:49
% DurationCPUTime: 12.12s
% Computational Cost: add. (15252->486), mult. (30521->608), div. (0->0), fcn. (19476->6), ass. (0->345)
t658 = sin(qJ(3));
t661 = cos(qJ(3));
t659 = sin(qJ(2));
t700 = qJD(1) * qJD(2);
t648 = t659 * t700;
t662 = cos(qJ(2));
t697 = t662 * qJDD(1);
t623 = -t648 + t697;
t612 = -qJDD(3) + t623;
t706 = qJD(1) * t659;
t615 = -t661 * qJD(2) + t658 * t706;
t617 = t658 * qJD(2) + t661 * t706;
t748 = t617 * t615;
t672 = t612 + t748;
t717 = t661 * t672;
t702 = t662 * qJD(1);
t645 = -qJD(3) + t702;
t643 = t645 ^ 2;
t762 = t615 ^ 2;
t772 = -t643 - t762;
t461 = -t658 * t772 + t717;
t660 = sin(qJ(1));
t663 = cos(qJ(1));
t692 = t662 * t700;
t699 = t659 * qJDD(1);
t622 = t692 + t699;
t554 = t617 * qJD(3) - t661 * qJDD(2) + t658 * t622;
t747 = t617 * t645;
t777 = t554 - t747;
t736 = t658 * t672;
t797 = t661 * t772 + t736;
t811 = t659 * t777 + t662 * t797;
t392 = t660 * t461 - t663 * t811;
t877 = pkin(5) * t392;
t761 = t617 ^ 2;
t562 = -t761 - t643;
t673 = t612 - t748;
t783 = t658 * t673;
t467 = t661 * t562 + t783;
t675 = t658 * qJDD(2) + t661 * t622;
t516 = (qJD(3) - t645) * t615 - t675;
t780 = t661 * t673;
t795 = t658 * t562 - t780;
t812 = t659 * t516 + t662 * t795;
t831 = -t660 * t467 + t663 * t812;
t870 = pkin(5) * t831;
t832 = t663 * t467 + t660 * t812;
t869 = pkin(5) * t832;
t865 = t663 * t461 + t660 * t811;
t876 = pkin(5) * t865;
t512 = (-qJD(3) - t645) * t615 + t675;
t588 = -t761 + t643;
t479 = t658 * t588 + t717;
t822 = t662 * t479;
t433 = t659 * t512 - t822;
t473 = t661 * t588 - t736;
t820 = t663 * t473;
t882 = t660 * t433 - t820;
t823 = t660 * t473;
t881 = t663 * t433 + t823;
t814 = -t662 * t516 + t659 * t795;
t842 = -pkin(1) * t814 - pkin(7) * t795;
t880 = -pkin(2) * t516 - t842;
t555 = -t615 * qJD(3) + t675;
t593 = t615 * t645;
t515 = t555 - t593;
t508 = t554 + t747;
t742 = t658 * t508;
t817 = -t661 * t515 - t742;
t541 = t762 + t761;
t806 = t659 * t541;
t504 = t661 * t508;
t819 = t658 * t515 - t504;
t835 = t662 * t819 - t806;
t859 = t660 * t817 + t663 * t835;
t879 = pkin(5) * t859;
t860 = t660 * t835 - t663 * t817;
t878 = pkin(5) * t860;
t854 = pkin(6) * t814;
t825 = t659 * t479;
t875 = t662 * t512 + t825;
t863 = pkin(1) * t461 + pkin(6) * t811;
t833 = pkin(1) * t467 + pkin(6) * t812;
t791 = t661 * t777;
t444 = -t658 * t516 + t791;
t565 = -t762 + t761;
t805 = t659 * t565;
t415 = t662 * t444 - t805;
t743 = t658 * t777;
t442 = t661 * t516 + t743;
t874 = t660 * t415 - t663 * t442;
t873 = t663 * t415 + t660 * t442;
t587 = t762 - t643;
t482 = t661 * t587 + t783;
t434 = t662 * t482 - t659 * t508;
t788 = t658 * t587 - t780;
t872 = t660 * t434 - t663 * t788;
t871 = t663 * t434 + t660 * t788;
t813 = t659 * t797 - t662 * t777;
t855 = pkin(6) * t813;
t868 = pkin(6) * t835;
t802 = t662 * t541;
t837 = t659 * t819 + t802;
t867 = pkin(6) * t837;
t829 = pkin(2) * t461;
t866 = qJ(4) * t772 - t829;
t862 = -pkin(1) * t813 - pkin(7) * t797;
t809 = pkin(2) * t541;
t861 = -pkin(1) * t837 - pkin(7) * t819 - t809;
t857 = pkin(2) * t467;
t828 = pkin(7) * t461;
t853 = pkin(7) * t467;
t852 = pkin(7) * t817;
t843 = pkin(2) * t777 + t862;
t704 = qJD(4) * t645;
t841 = qJ(4) * t673 + 0.2e1 * t704 + t857;
t801 = t662 * t565;
t839 = t659 * t444 + t801;
t838 = t659 * t482 + t662 * t508;
t808 = (t777 - t747) * pkin(3);
t807 = qJ(4) * t541;
t514 = t555 + t593;
t636 = t663 * g(1) + t660 * g(2);
t664 = qJD(1) ^ 2;
t602 = -t664 * pkin(1) + qJDD(1) * pkin(6) - t636;
t757 = pkin(2) * t662;
t685 = -pkin(7) * t659 - t757;
t620 = t685 * qJD(1);
t753 = t662 * g(3);
t760 = qJD(2) ^ 2;
t529 = -qJDD(2) * pkin(2) - t760 * pkin(7) + (qJD(1) * t620 + t602) * t659 + t753;
t667 = t554 * pkin(3) - qJ(4) * t514 + t529;
t666 = 0.2e1 * qJD(4) * t617 - t667;
t746 = t645 * t658;
t583 = t617 * t746;
t745 = t645 * t661;
t694 = t615 * t745;
t679 = -t583 + t694;
t728 = t659 * t612;
t766 = t662 * t679 - t728;
t582 = t615 * t746;
t584 = t617 * t745;
t708 = -t582 - t584;
t778 = t663 * t708;
t786 = t660 * t766 + t778;
t781 = t660 * t708;
t785 = t663 * t766 - t781;
t695 = t659 * t748;
t709 = t661 * t555 + t583;
t765 = t662 * t709 + t695;
t775 = -t658 * t555 + t584;
t764 = -t660 * t775 + t663 * t765;
t769 = t660 * t765 + t663 * t775;
t674 = t658 * t554 - t694;
t767 = t662 * t674 - t695;
t776 = t661 * t554 + t582;
t763 = -t660 * t776 + t663 * t767;
t770 = t660 * t767 + t663 * t776;
t784 = qJ(4) * t516;
t774 = t762 * pkin(4) - 0.2e1 * qJD(5) * t615;
t598 = t662 * t612;
t768 = t659 * t679 + t598;
t693 = t662 * t748;
t683 = t659 * t674 + t693;
t682 = t659 * t709 - t693;
t759 = 0.2e1 * qJD(5);
t758 = pkin(2) * t659;
t756 = pkin(3) * t645;
t755 = pkin(3) * t658;
t754 = pkin(3) * t661;
t752 = pkin(3) + qJ(5);
t751 = qJ(4) * t508;
t749 = t554 * qJ(5);
t654 = t659 ^ 2;
t744 = t654 * t664;
t739 = t658 * t529;
t635 = t660 * g(1) - t663 * g(2);
t601 = qJDD(1) * pkin(1) + t664 * pkin(6) + t635;
t729 = t659 * t601;
t644 = t662 * t664 * t659;
t630 = -t644 + qJDD(2);
t727 = t659 * t630;
t631 = qJDD(2) + t644;
t726 = t659 * t631;
t719 = t661 * t529;
t711 = t662 * t601;
t710 = t662 * t630;
t677 = -t623 + t648;
t678 = t622 + t692;
t505 = t677 * pkin(2) - pkin(7) * t678 - t601;
t581 = -t659 * g(3) + t662 * t602;
t530 = -t760 * pkin(2) + qJDD(2) * pkin(7) + t620 * t702 + t581;
t451 = t658 * t505 + t661 * t530;
t655 = t662 ^ 2;
t707 = t654 + t655;
t698 = t660 * qJDD(1);
t696 = t663 * qJDD(1);
t691 = -qJ(4) * t658 - pkin(2);
t690 = -0.2e1 * qJD(4) - t756;
t450 = -t661 * t505 + t658 * t530;
t580 = t659 * t602 + t753;
t519 = t659 * t580 + t662 * t581;
t571 = -t660 * t635 - t663 * t636;
t688 = t660 * t644;
t687 = t663 * t644;
t627 = -t660 * t664 + t696;
t684 = -pkin(5) * t627 - t660 * g(3);
t559 = t615 * pkin(3) - t617 * qJ(4);
t676 = t643 * pkin(3) + t612 * qJ(4) + t615 * t559 - t451;
t394 = -t661 * t450 + t658 * t451;
t395 = t658 * t450 + t661 * t451;
t518 = t662 * t580 - t659 * t581;
t570 = t663 * t635 - t660 * t636;
t634 = -0.2e1 * t704;
t405 = t634 - t676;
t671 = t612 * pkin(3) - t643 * qJ(4) + t617 * t559 + qJDD(4) + t450;
t579 = t617 * pkin(4) + t645 * qJ(5);
t669 = t554 * pkin(4) + qJ(5) * t762 + t645 * t579 - qJDD(5) + t676;
t383 = t634 - t669;
t668 = t555 * pkin(4) + t672 * qJ(5) + t671;
t665 = t666 + t774;
t379 = (-pkin(4) * t615 + t759) * t645 + t668;
t652 = t655 * t664;
t642 = -t652 - t760;
t641 = t652 - t760;
t640 = -t744 - t760;
t639 = -t744 + t760;
t629 = t652 - t744;
t628 = t652 + t744;
t626 = t663 * t664 + t698;
t625 = t707 * qJDD(1);
t624 = -0.2e1 * t648 + t697;
t621 = 0.2e1 * t692 + t699;
t614 = t662 * t631;
t613 = t707 * t700;
t597 = -pkin(5) * t626 + t663 * g(3);
t586 = t662 * t622 - t654 * t700;
t585 = -t659 * t623 - t655 * t700;
t578 = -t659 * t640 - t710;
t577 = -t659 * t639 + t614;
t576 = t662 * t642 - t726;
t575 = t662 * t641 - t727;
t574 = t662 * t640 - t727;
t573 = t659 * t642 + t614;
t564 = t663 * t625 - t660 * t628;
t563 = t660 * t625 + t663 * t628;
t558 = -t659 * t621 + t662 * t624;
t536 = t663 * t578 + t660 * t621;
t535 = t663 * t576 - t660 * t624;
t534 = t660 * t578 - t663 * t621;
t533 = t660 * t576 + t663 * t624;
t532 = -pkin(6) * t574 - t711;
t531 = -pkin(6) * t573 - t729;
t527 = (t615 * t661 - t617 * t658) * t645;
t521 = -pkin(1) * t574 + t581;
t520 = -pkin(1) * t573 + t580;
t486 = t662 * t527 - t728;
t466 = t663 * t519 - t660 * t601;
t465 = t660 * t519 + t663 * t601;
t452 = pkin(4) * t672 - qJ(4) * t777;
t447 = -t658 * t514 - t791;
t445 = t658 * t512 - t504;
t441 = -t661 * t514 + t743;
t439 = -t661 * t512 - t742;
t437 = t719 - t853;
t432 = t659 * t515 - t822;
t430 = t739 + t828;
t416 = t662 * t447 + t805;
t414 = -pkin(4) * t673 - t516 * t752;
t411 = t662 * t445 - t806;
t408 = t659 * t445 + t802;
t406 = t690 * t617 + t667;
t404 = t451 - t857;
t403 = t450 + t829;
t402 = t671 + t807;
t393 = pkin(3) * t541 + t405;
t386 = -t666 + t808;
t385 = pkin(3) * t747 + t666 - t784;
t384 = -pkin(2) * t439 + pkin(3) * t512 + t751;
t382 = t662 * t395 + t659 * t529;
t381 = t659 * t395 - t662 * t529;
t380 = t749 + (-t579 + t690) * t617 + t667 - t774;
t376 = t663 * t411 + t660 * t439;
t373 = t660 * t411 - t663 * t439;
t372 = -pkin(2) * t817 + t752 * t515 + t751;
t371 = -t739 + t880;
t370 = pkin(3) * t562 + t676 + t841;
t369 = t719 + t843;
t368 = -pkin(3) * t672 - t671 + t866;
t367 = -t394 - t852;
t366 = t661 * t405 + t658 * t671;
t365 = t658 * t405 - t661 * t671;
t364 = t665 - t749 + pkin(4) * t562 + (t579 + t756) * t617 - t784;
t363 = t661 * t385 + t516 * t755 + t853;
t362 = qJ(4) * t791 - t658 * t386 - t828;
t361 = t807 + t645 * t759 + (t515 - t593) * pkin(4) + t668;
t360 = -pkin(4) * t508 + t541 * t752 + t383;
t359 = t665 + t617 * t579 + pkin(4) * t772 - t808 + (-t777 - t554) * qJ(5);
t358 = -t659 * t404 + t662 * t437 + t854;
t357 = t562 * t752 + t669 + t841;
t356 = t672 * t752 + t379 - t866;
t355 = -t659 * t403 + t662 * t430 - t855;
t354 = t663 * t382 + t660 * t394;
t353 = t660 * t382 - t663 * t394;
t352 = t662 * t366 + t659 * t406;
t351 = t659 * t366 - t662 * t406;
t350 = -t395 + t861;
t349 = -pkin(1) * t381 + pkin(2) * t529 - pkin(7) * t395;
t348 = t658 * t379 + t661 * t383;
t347 = -t661 * t379 + t658 * t383;
t346 = pkin(4) * t379 - qJ(4) * t380;
t345 = -t658 * t385 - (-pkin(2) - t754) * t516 + t842;
t344 = -pkin(7) * t439 - t658 * t393 + t661 * t402;
t343 = -t661 * t386 + t691 * t777 - t862;
t342 = -t658 * t359 + t661 * t452 + t828;
t341 = t661 * t364 - t658 * t414 + t853;
t340 = t662 * t367 + t758 * t817 - t867;
t339 = -pkin(7) * t365 + (-qJ(4) * t661 + t755) * t406;
t338 = -pkin(2) * t365 + pkin(3) * t671 - qJ(4) * t405;
t337 = -pkin(6) * t381 + (-pkin(7) * t662 + t758) * t394;
t336 = -pkin(1) * t408 - pkin(7) * t445 - t661 * t393 - t658 * t402 - t809;
t335 = -t661 * t359 - t658 * t452 + t843;
t334 = -t658 * t364 - t661 * t414 - t880;
t333 = pkin(4) * t383 - t752 * t380;
t332 = t662 * t348 + t659 * t380;
t331 = t659 * t348 - t662 * t380;
t330 = t662 * t363 - t659 * t370 - t854;
t329 = t662 * t362 - t659 * t368 + t855;
t328 = -t658 * t360 + t661 * t361 - t852;
t327 = t663 * t352 + t660 * t365;
t326 = t660 * t352 - t663 * t365;
t325 = -pkin(6) * t408 + t662 * t344 - t659 * t384;
t324 = -t661 * t360 - t658 * t361 + t861;
t323 = t662 * t342 - t659 * t356 - t855;
t322 = t662 * t341 - t659 * t357 - t854;
t321 = t662 * t328 - t659 * t372 - t867;
t320 = -pkin(2) * t347 - qJ(4) * t383 + t752 * t379;
t319 = t663 * t332 + t660 * t347;
t318 = t660 * t332 - t663 * t347;
t317 = -pkin(1) * t351 - pkin(7) * t366 + (-t691 + t754) * t406;
t316 = -pkin(7) * t347 - t658 * t333 + t661 * t346;
t315 = -pkin(6) * t351 - t659 * t338 + t662 * t339;
t314 = -pkin(1) * t331 + pkin(2) * t380 - pkin(7) * t348 - t661 * t333 - t658 * t346;
t313 = -pkin(6) * t331 + t662 * t316 - t659 * t320;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t626, -t627, 0, t571, 0, 0, 0, 0, 0, 0, t535, t536, t564, t466, 0, 0, 0, 0, 0, 0, -t392, -t831, t859, t354, 0, 0, 0, 0, 0, 0, t376, t392, t831, t327, 0, 0, 0, 0, 0, 0, t859, t831, -t392, t319; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t627, -t626, 0, t570, 0, 0, 0, 0, 0, 0, t533, t534, t563, t465, 0, 0, 0, 0, 0, 0, t865, -t832, t860, t353, 0, 0, 0, 0, 0, 0, t373, -t865, t832, t326, 0, 0, 0, 0, 0, 0, t860, t832, t865, t318; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t573, t574, 0, -t518, 0, 0, 0, 0, 0, 0, t813, -t814, t837, t381, 0, 0, 0, 0, 0, 0, t408, -t813, t814, t351, 0, 0, 0, 0, 0, 0, t837, t814, t813, t331; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t627, 0, -t626, 0, t684, -t597, -t570, -pkin(5) * t570, t663 * t586 - t688, t663 * t558 - t660 * t629, t663 * t577 + t659 * t698, t663 * t585 + t688, t663 * t575 + t660 * t697, t660 * qJDD(2) + t663 * t613, -pkin(5) * t533 - t660 * t520 + t663 * t531, -pkin(5) * t534 - t660 * t521 + t663 * t532, -pkin(5) * t563 + t663 * t518, -pkin(5) * t465 - (pkin(1) * t660 - pkin(6) * t663) * t518, t764, t663 * t416 - t660 * t441, t663 * t432 + t823, t763, t871, t785, t663 * t355 - t660 * t369 - t876, t663 * t358 - t660 * t371 + t869, t663 * t340 - t660 * t350 - t878, -pkin(5) * t353 + t663 * t337 - t660 * t349, t663 * t486 - t781, -t881, -t871, t764, -t873, t763, -pkin(5) * t373 + t663 * t325 - t660 * t336, t663 * t329 - t660 * t343 + t876, t663 * t330 - t660 * t345 - t869, -pkin(5) * t326 + t663 * t315 - t660 * t317, t785, -t871, t881, t763, t873, t764, t663 * t321 - t660 * t324 - t878, t663 * t322 - t660 * t334 - t869, t663 * t323 - t660 * t335 - t876, -pkin(5) * t318 + t663 * t313 - t660 * t314; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t626, 0, t627, 0, t597, t684, t571, pkin(5) * t571, t660 * t586 + t687, t660 * t558 + t663 * t629, t660 * t577 - t659 * t696, t660 * t585 - t687, t660 * t575 - t662 * t696, -t663 * qJDD(2) + t660 * t613, pkin(5) * t535 + t663 * t520 + t660 * t531, pkin(5) * t536 + t663 * t521 + t660 * t532, pkin(5) * t564 + t660 * t518, pkin(5) * t466 - (-pkin(1) * t663 - pkin(6) * t660) * t518, t769, t660 * t416 + t663 * t441, t660 * t432 - t820, t770, t872, t786, t660 * t355 + t663 * t369 - t877, t660 * t358 + t663 * t371 - t870, t660 * t340 + t663 * t350 + t879, pkin(5) * t354 + t660 * t337 + t663 * t349, t660 * t486 + t778, -t882, -t872, t769, -t874, t770, pkin(5) * t376 + t660 * t325 + t663 * t336, t660 * t329 + t663 * t343 + t877, t660 * t330 + t663 * t345 + t870, pkin(5) * t327 + t660 * t315 + t663 * t317, t786, -t872, t882, t770, t874, t769, t660 * t321 + t663 * t324 + t879, t660 * t322 + t663 * t334 + t870, t660 * t323 + t663 * t335 - t877, pkin(5) * t319 + t660 * t313 + t663 * t314; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t635, t636, 0, 0, t678 * t659, t662 * t621 + t659 * t624, t662 * t639 + t726, -t677 * t662, t659 * t641 + t710, 0, pkin(1) * t624 + pkin(6) * t576 + t711, -pkin(1) * t621 + pkin(6) * t578 - t729, pkin(1) * t628 + pkin(6) * t625 + t519, pkin(1) * t601 + pkin(6) * t519, t682, t659 * t447 - t801, -t662 * t515 - t825, t683, t838, t768, t662 * t403 + t659 * t430 + t863, t662 * t404 + t659 * t437 - t833, t868 + t659 * t367 + (-pkin(1) - t757) * t817, pkin(6) * t382 + (-pkin(1) + t685) * t394, t659 * t527 + t598, t875, -t838, t682, -t839, t683, -pkin(1) * t439 + pkin(6) * t411 + t659 * t344 + t662 * t384, t659 * t362 + t662 * t368 - t863, t659 * t363 + t662 * t370 + t833, -pkin(1) * t365 + pkin(6) * t352 + t662 * t338 + t659 * t339, t768, -t838, -t875, t683, t839, t682, -pkin(1) * t817 + t659 * t328 + t662 * t372 + t868, t659 * t341 + t662 * t357 + t833, t659 * t342 + t662 * t356 + t863, -pkin(1) * t347 + pkin(6) * t332 + t659 * t316 + t662 * t320;];
tauB_reg = t1;
