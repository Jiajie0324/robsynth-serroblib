% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRPP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:03
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRPP6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPP6_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPP6_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPP6_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPP6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRPP6_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:02:15
% EndTime: 2019-12-31 21:02:36
% DurationCPUTime: 20.15s
% Computational Cost: add. (42336->561), mult. (88288->780), div. (0->0), fcn. (60882->8), ass. (0->415)
t787 = sin(qJ(3));
t790 = cos(qJ(3));
t788 = sin(qJ(2));
t840 = qJD(1) * t788;
t748 = -t790 * qJD(2) + t787 * t840;
t749 = qJD(2) * t787 + t790 * t840;
t784 = sin(pkin(8));
t785 = cos(pkin(8));
t710 = -t748 * t784 + t749 * t785;
t707 = t710 ^ 2;
t791 = cos(qJ(2));
t839 = qJD(1) * t791;
t772 = -qJD(3) + t839;
t885 = t772 ^ 2;
t640 = t885 + t707;
t834 = qJD(1) * qJD(2);
t775 = t788 * t834;
t831 = qJDD(1) * t791;
t754 = -t775 + t831;
t745 = -qJDD(3) + t754;
t708 = t785 * t748 + t749 * t784;
t858 = t710 * t708;
t799 = t745 - t858;
t867 = t799 * t784;
t567 = t640 * t785 - t867;
t866 = t799 * t785;
t577 = t640 * t784 + t866;
t515 = t567 * t787 + t577 * t790;
t824 = t791 * t834;
t833 = qJDD(1) * t788;
t753 = t824 + t833;
t703 = -t748 * qJD(3) + t787 * qJDD(2) + t790 * t753;
t806 = t790 * qJDD(2) - t787 * t753;
t797 = qJD(3) * t749 - t806;
t795 = t785 * t703 - t784 * t797;
t859 = t708 * t772;
t898 = t795 + t859;
t492 = t515 * t791 + t788 * t898;
t500 = t567 * t790 - t577 * t787;
t789 = sin(qJ(1));
t792 = cos(qJ(1));
t450 = t492 * t789 + t500 * t792;
t1007 = pkin(5) * t450;
t452 = t492 * t792 - t500 * t789;
t1006 = pkin(5) * t452;
t490 = t515 * t788 - t791 * t898;
t1005 = pkin(6) * t490;
t1004 = pkin(1) * t490 - pkin(2) * t898 + pkin(7) * t515;
t1003 = -pkin(1) * t500 - pkin(6) * t492;
t822 = t703 * t784 + t785 * t797;
t857 = t710 * t772;
t803 = t822 - t857;
t539 = -t803 * t784 + t785 * t898;
t869 = t898 * t784;
t541 = t803 * t785 + t869;
t475 = t539 * t787 + t541 * t790;
t887 = t708 ^ 2;
t644 = t707 - t887;
t462 = t475 * t791 - t644 * t788;
t473 = -t539 * t790 + t541 * t787;
t1002 = t462 * t789 - t473 * t792;
t1001 = t462 * t792 + t473 * t789;
t685 = t887 - t885;
t584 = t685 * t784 - t866;
t588 = t685 * t785 + t867;
t527 = t584 * t787 - t588 * t790;
t602 = t822 + t857;
t498 = t527 * t791 + t602 * t788;
t523 = t584 * t790 + t588 * t787;
t1000 = t498 * t789 + t523 * t792;
t999 = t498 * t792 - t523 * t789;
t997 = pkin(7) * t500;
t990 = -pkin(2) * t500 - pkin(3) * t567;
t988 = t475 * t788 + t644 * t791;
t987 = t527 * t788 - t602 * t791;
t800 = -t745 - t858;
t865 = t800 * t784;
t895 = -t885 - t887;
t907 = t785 * t895 - t865;
t625 = t785 * t800;
t909 = t784 * t895 + t625;
t928 = t787 * t907 + t790 * t909;
t929 = -t787 * t909 + t790 * t907;
t949 = t788 * t803 + t791 * t929;
t968 = t789 * t928 + t792 * t949;
t986 = pkin(5) * t968;
t896 = t859 - t795;
t910 = -t602 * t785 - t896 * t784;
t911 = -t602 * t784 + t785 * t896;
t926 = t787 * t910 + t790 * t911;
t617 = -t887 - t707;
t927 = -t787 * t911 + t790 * t910;
t947 = t617 * t788 + t791 * t927;
t970 = t789 * t926 + t792 * t947;
t985 = pkin(5) * t970;
t971 = t789 * t949 - t792 * t928;
t984 = pkin(5) * t971;
t973 = t789 * t947 - t792 * t926;
t983 = pkin(5) * t973;
t950 = -t617 * t791 + t788 * t927;
t981 = pkin(6) * t950;
t952 = t788 * t929 - t791 * t803;
t980 = pkin(6) * t952;
t979 = qJ(4) * t567;
t978 = qJ(4) * t577;
t977 = -pkin(1) * t950 + pkin(2) * t617 - pkin(7) * t927;
t976 = -pkin(1) * t952 + pkin(2) * t803 - pkin(7) * t929;
t975 = -pkin(1) * t926 + pkin(6) * t947;
t974 = -pkin(1) * t928 + pkin(6) * t949;
t686 = -t707 + t885;
t912 = t785 * t686 + t865;
t913 = -t686 * t784 + t625;
t925 = -t787 * t913 - t790 * t912;
t924 = -t787 * t912 + t790 * t913;
t948 = -t788 * t896 + t791 * t924;
t972 = t789 * t948 + t792 * t925;
t969 = -t789 * t925 + t792 * t948;
t965 = pkin(7) * t926;
t964 = pkin(7) * t928;
t448 = -pkin(2) * t926 - pkin(3) * t911;
t955 = -pkin(2) * t928 - pkin(3) * t909;
t951 = t788 * t924 + t791 * t896;
t943 = qJ(4) * t907;
t942 = qJ(4) * t909;
t941 = qJ(4) * t911;
t940 = qJ(5) * t898;
t765 = g(1) * t792 + g(2) * t789;
t793 = qJD(1) ^ 2;
t738 = -pkin(1) * t793 + qJDD(1) * pkin(6) - t765;
t882 = pkin(2) * t791;
t815 = -pkin(7) * t788 - t882;
t751 = t815 * qJD(1);
t880 = t791 * g(3);
t884 = qJD(2) ^ 2;
t675 = (qJD(1) * t751 + t738) * t788 - qJDD(2) * pkin(2) - t884 * pkin(7) + t880;
t725 = -pkin(3) * t772 - qJ(4) * t749;
t886 = t748 ^ 2;
t580 = t797 * pkin(3) - t886 * qJ(4) + t749 * t725 + qJDD(4) + t675;
t935 = pkin(4) * t822 + t580 - t940;
t801 = (t708 * t784 + t710 * t785) * t772;
t849 = t772 * t784;
t680 = t710 * t849;
t848 = t772 * t785;
t827 = t708 * t848;
t810 = -t680 + t827;
t891 = -t787 * t810 - t790 * t801;
t854 = t745 * t788;
t890 = -t787 * t801 + t790 * t810;
t904 = t791 * t890 - t854;
t934 = t789 * t904 + t792 * t891;
t804 = t784 * t822 - t827;
t811 = -t708 * t849 - t785 * t822;
t888 = -t787 * t804 - t790 * t811;
t829 = t788 * t858;
t889 = -t787 * t811 + t790 * t804;
t905 = t791 * t889 - t829;
t933 = t789 * t905 + t792 * t888;
t932 = -t789 * t891 + t792 * t904;
t931 = -t789 * t888 + t792 * t905;
t930 = -pkin(3) * t617 + qJ(4) * t910;
t923 = -2 * qJD(5);
t735 = t791 * t745;
t908 = t788 * t890 + t735;
t828 = t791 * t858;
t906 = t788 * t889 + t828;
t853 = t748 * t749;
t798 = -t745 - t853;
t902 = t787 * t798;
t900 = t790 * t798;
t732 = t748 * t772;
t664 = t732 - t703;
t662 = t732 + t703;
t643 = pkin(4) * t708 - qJ(5) * t710;
t764 = t789 * g(1) - t792 * g(2);
t737 = qJDD(1) * pkin(1) + t793 * pkin(6) + t764;
t808 = -t754 + t775;
t809 = t753 + t824;
t658 = pkin(2) * t808 - pkin(7) * t809 - t737;
t727 = -g(3) * t788 + t791 * t738;
t676 = -t884 * pkin(2) + qJDD(2) * pkin(7) + t751 * t839 + t727;
t613 = -t790 * t658 + t787 * t676;
t553 = t798 * pkin(3) + t664 * qJ(4) - t613;
t614 = t787 * t658 + t790 * t676;
t558 = -t886 * pkin(3) - qJ(4) * t797 + t772 * t725 + t614;
t844 = t784 * t553 + t785 * t558;
t897 = -t745 * qJ(5) - t708 * t643 + t772 * t923 + t844;
t596 = -t710 * t848 + t784 * t795;
t597 = t785 * t795 + t680;
t533 = -t596 * t790 - t597 * t787;
t536 = -t596 * t787 + t597 * t790;
t812 = t791 * t536 + t829;
t893 = t792 * t533 + t789 * t812;
t659 = (qJD(3) + t772) * t749 - t806;
t892 = -t533 * t789 + t792 * t812;
t744 = t749 ^ 2;
t883 = pkin(2) * t788;
t881 = pkin(4) * t785;
t879 = qJ(5) * t785;
t837 = qJD(4) * t710;
t702 = 0.2e1 * t837;
t843 = -t785 * t553 + t784 * t558;
t486 = t702 + t843;
t838 = qJD(4) * t708;
t700 = -0.2e1 * t838;
t487 = t700 + t844;
t439 = -t486 * t785 + t487 * t784;
t878 = t439 * t787;
t877 = t439 * t790;
t875 = t580 * t784;
t874 = t580 * t785;
t864 = t675 * t787;
t863 = t675 * t790;
t694 = t745 - t853;
t861 = t694 * t787;
t860 = t694 * t790;
t856 = t737 * t788;
t855 = t737 * t791;
t771 = t791 * t793 * t788;
t761 = -t771 + qJDD(2);
t852 = t761 * t788;
t851 = t761 * t791;
t762 = qJDD(2) + t771;
t850 = t762 * t788;
t847 = t772 * t787;
t846 = t772 * t790;
t781 = t788 ^ 2;
t845 = t781 * t793;
t842 = -t617 - t885;
t782 = t791 ^ 2;
t841 = t781 + t782;
t832 = qJDD(1) * t789;
t830 = qJDD(1) * t792;
t826 = t788 * t853;
t825 = t791 * t853;
t823 = -qJ(5) * t784 - pkin(3);
t440 = t486 * t784 + t785 * t487;
t726 = t788 * t738 + t880;
t667 = t726 * t788 + t791 * t727;
t718 = -t764 * t789 - t792 * t765;
t820 = t789 * t771;
t819 = t792 * t771;
t817 = t710 * t643 + qJDD(5) + t843;
t758 = -t789 * t793 + t830;
t814 = -pkin(5) * t758 - g(3) * t789;
t813 = t788 * t536 - t828;
t547 = -t613 * t790 + t614 * t787;
t548 = t613 * t787 + t614 * t790;
t666 = t726 * t791 - t727 * t788;
t717 = t764 * t792 - t765 * t789;
t805 = t700 + t897;
t802 = t745 * pkin(4) + t817;
t794 = 0.2e1 * qJD(5) * t710 - t935;
t779 = t782 * t793;
t769 = -t779 - t884;
t768 = t779 - t884;
t767 = -t845 - t884;
t766 = -t845 + t884;
t760 = t779 - t845;
t759 = t779 + t845;
t757 = t792 * t793 + t832;
t756 = t841 * qJDD(1);
t755 = -0.2e1 * t775 + t831;
t752 = 0.2e1 * t824 + t833;
t747 = t791 * t762;
t746 = t841 * t834;
t734 = -pkin(5) * t757 + g(3) * t792;
t731 = -t744 + t885;
t730 = -t885 + t886;
t729 = t753 * t791 - t781 * t834;
t728 = -t754 * t788 - t782 * t834;
t724 = -t767 * t788 - t851;
t723 = -t766 * t788 + t747;
t722 = t769 * t791 - t850;
t721 = t768 * t791 - t852;
t720 = t767 * t791 - t852;
t719 = t769 * t788 + t747;
t715 = -t744 + t886;
t714 = t756 * t792 - t759 * t789;
t713 = t756 * t789 + t759 * t792;
t712 = -t744 - t885;
t711 = -t752 * t788 + t755 * t791;
t704 = -t885 - t886;
t693 = t744 + t886;
t684 = t724 * t792 + t752 * t789;
t683 = t722 * t792 - t755 * t789;
t682 = t724 * t789 - t752 * t792;
t681 = t722 * t789 + t755 * t792;
t679 = -pkin(6) * t720 - t855;
t678 = -pkin(6) * t719 - t856;
t674 = (t748 * t790 - t749 * t787) * t772;
t673 = (-t748 * t787 - t749 * t790) * t772;
t669 = -pkin(1) * t720 + t727;
t668 = -pkin(1) * t719 + t726;
t660 = (-qJD(3) + t772) * t749 + t806;
t655 = t703 * t790 + t749 * t847;
t654 = -t703 * t787 + t749 * t846;
t653 = -t748 * t846 + t787 * t797;
t652 = t748 * t847 + t790 * t797;
t651 = t674 * t791 - t854;
t649 = t730 * t790 + t861;
t648 = -t731 * t787 + t900;
t647 = -t730 * t787 + t860;
t646 = -t731 * t790 - t902;
t642 = -t712 * t787 + t860;
t641 = t712 * t790 + t861;
t638 = t667 * t792 - t737 * t789;
t637 = t667 * t789 + t737 * t792;
t628 = t704 * t790 - t902;
t627 = t704 * t787 + t900;
t620 = t655 * t791 + t826;
t619 = t653 * t791 - t826;
t612 = -t659 * t790 - t664 * t787;
t611 = t660 * t790 - t662 * t787;
t610 = -t659 * t787 + t664 * t790;
t609 = -t660 * t787 - t662 * t790;
t598 = -pkin(7) * t641 + t863;
t591 = t649 * t791 - t659 * t788;
t590 = t648 * t791 - t664 * t788;
t581 = -pkin(7) * t627 + t864;
t579 = t642 * t791 + t662 * t788;
t576 = t642 * t788 - t662 * t791;
t573 = t628 * t791 - t660 * t788;
t572 = t628 * t788 + t660 * t791;
t571 = t611 * t791 - t715 * t788;
t566 = t612 * t791 - t693 * t788;
t565 = t612 * t788 + t693 * t791;
t560 = -pkin(2) * t641 + t614;
t559 = -pkin(2) * t627 + t613;
t550 = t579 * t792 + t641 * t789;
t549 = t579 * t789 - t641 * t792;
t546 = t573 * t792 + t627 * t789;
t545 = t573 * t789 - t627 * t792;
t519 = t548 * t791 + t675 * t788;
t518 = t548 * t788 - t675 * t791;
t517 = t874 + t979;
t512 = t566 * t792 + t610 * t789;
t511 = t566 * t789 - t610 * t792;
t510 = t875 - t942;
t509 = -pkin(1) * t576 + pkin(2) * t662 - pkin(7) * t642 - t864;
t508 = -pkin(1) * t572 - pkin(2) * t660 - pkin(7) * t628 + t863;
t499 = -pkin(7) * t610 - t547;
t494 = -pkin(3) * t898 + t875 + t978;
t489 = (-pkin(4) * t772 + t923) * t710 + t935;
t488 = -pkin(3) * t803 - t874 + t943;
t484 = -pkin(6) * t576 - t560 * t788 + t598 * t791;
t479 = -pkin(6) * t572 - t559 * t788 + t581 * t791;
t470 = t519 * t792 + t547 * t789;
t469 = t519 * t789 - t547 * t792;
t468 = t794 + (-t803 + t857) * pkin(4);
t467 = pkin(4) * t857 + t794 + t940;
t466 = -pkin(1) * t565 - pkin(2) * t693 - pkin(7) * t612 - t548;
t465 = -pkin(1) * t518 + pkin(2) * t675 - pkin(7) * t548;
t464 = qJ(5) * t885 - t802 - 0.2e1 * t837;
t461 = -pkin(4) * t885 + t805;
t456 = -pkin(6) * t565 + t499 * t791 + t610 * t883;
t455 = t842 * qJ(5) + t702 + t802;
t454 = t842 * pkin(4) + t805;
t449 = -pkin(6) * t518 + (-pkin(7) * t791 + t883) * t547;
t447 = -t468 * t784 - t803 * t879 - t942;
t442 = -pkin(4) * t869 + t467 * t785 - t979;
t441 = t487 - t990;
t438 = t785 * t468 + t803 * t823 + t943;
t437 = t486 + t955;
t436 = -t978 + t784 * t467 + (pkin(3) + t881) * t898;
t435 = -t494 * t787 + t517 * t790 + t997;
t434 = -pkin(4) * t896 + qJ(5) * t602 + t448;
t433 = -pkin(3) * t580 + qJ(4) * t440;
t432 = -t488 * t787 + t510 * t790 - t964;
t427 = t702 + (-t895 - t885) * qJ(5) + (-t800 + t745) * pkin(4) + t817 + t955;
t426 = -t439 - t941;
t425 = t461 * t785 - t464 * t784;
t424 = t461 * t784 + t464 * t785;
t423 = qJ(5) * t799 + 0.2e1 * t838 + (-t640 + t885) * pkin(4) - t897 + t990;
t422 = t440 + t930;
t421 = -t494 * t790 - t517 * t787 - t1004;
t420 = -t454 * t784 + t455 * t785 - t941;
t419 = -t488 * t790 - t510 * t787 + t976;
t418 = t454 * t785 + t455 * t784 + t930;
t417 = t440 * t790 - t878;
t416 = t440 * t787 + t877;
t415 = t417 * t791 + t580 * t788;
t414 = t417 * t788 - t580 * t791;
t413 = -qJ(4) * t424 + (pkin(4) * t784 - t879) * t489;
t412 = -t438 * t787 + t447 * t790 - t964;
t411 = -t436 * t787 + t442 * t790 - t997;
t410 = t435 * t791 - t441 * t788 - t1005;
t409 = -t424 * t787 + t425 * t790;
t408 = t424 * t790 + t425 * t787;
t407 = qJ(4) * t425 + (t823 - t881) * t489;
t406 = t432 * t791 - t437 * t788 - t980;
t405 = -t438 * t790 - t447 * t787 + t976;
t404 = -pkin(2) * t416 - pkin(3) * t439;
t403 = -t436 * t790 - t442 * t787 + t1004;
t402 = t409 * t791 + t489 * t788;
t401 = t409 * t788 - t489 * t791;
t400 = -t422 * t787 + t426 * t790 - t965;
t399 = t412 * t791 - t427 * t788 - t980;
t398 = -t422 * t790 - t426 * t787 + t977;
t397 = -pkin(7) * t416 - qJ(4) * t877 - t433 * t787;
t396 = t415 * t792 + t416 * t789;
t395 = t415 * t789 - t416 * t792;
t394 = t411 * t791 - t423 * t788 + t1005;
t393 = -t418 * t787 + t420 * t790 - t965;
t392 = t400 * t791 - t448 * t788 - t981;
t391 = -t418 * t790 - t420 * t787 + t977;
t390 = -pkin(2) * t408 - pkin(3) * t424 - pkin(4) * t464 - qJ(5) * t461;
t389 = t402 * t792 + t408 * t789;
t388 = t402 * t789 - t408 * t792;
t387 = t393 * t791 - t434 * t788 - t981;
t386 = -pkin(1) * t414 + pkin(2) * t580 - pkin(7) * t417 + qJ(4) * t878 - t433 * t790;
t385 = -pkin(7) * t408 - t407 * t787 + t413 * t790;
t384 = -pkin(6) * t414 + t397 * t791 - t404 * t788;
t383 = -pkin(1) * t401 + pkin(2) * t489 - pkin(7) * t409 - t407 * t790 - t413 * t787;
t382 = -pkin(6) * t401 + t385 * t791 - t390 * t788;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t757, -t758, 0, t718, 0, 0, 0, 0, 0, 0, t683, t684, t714, t638, 0, 0, 0, 0, 0, 0, t546, t550, t512, t470, 0, 0, 0, 0, 0, 0, t968, t452, t970, t396, 0, 0, 0, 0, 0, 0, t968, t970, -t452, t389; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t758, -t757, 0, t717, 0, 0, 0, 0, 0, 0, t681, t682, t713, t637, 0, 0, 0, 0, 0, 0, t545, t549, t511, t469, 0, 0, 0, 0, 0, 0, t971, t450, t973, t395, 0, 0, 0, 0, 0, 0, t971, t973, -t450, t388; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t719, t720, 0, -t666, 0, 0, 0, 0, 0, 0, t572, t576, t565, t518, 0, 0, 0, 0, 0, 0, t952, t490, t950, t414, 0, 0, 0, 0, 0, 0, t952, t950, -t490, t401; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t758, 0, -t757, 0, t814, -t734, -t717, -pkin(5) * t717, t729 * t792 - t820, t711 * t792 - t760 * t789, t723 * t792 + t788 * t832, t728 * t792 + t820, t721 * t792 + t789 * t831, qJDD(2) * t789 + t746 * t792, -pkin(5) * t681 - t668 * t789 + t678 * t792, -pkin(5) * t682 - t669 * t789 + t679 * t792, -pkin(5) * t713 + t666 * t792, -pkin(5) * t637 - (pkin(1) * t789 - pkin(6) * t792) * t666, t620 * t792 - t654 * t789, t571 * t792 - t609 * t789, t590 * t792 - t646 * t789, t619 * t792 - t652 * t789, t591 * t792 - t647 * t789, t651 * t792 - t673 * t789, -pkin(5) * t545 + t479 * t792 - t508 * t789, -pkin(5) * t549 + t484 * t792 - t509 * t789, -pkin(5) * t511 + t456 * t792 - t466 * t789, -pkin(5) * t469 + t449 * t792 - t465 * t789, t892, -t1001, t969, t931, -t999, t932, t406 * t792 - t419 * t789 - t984, t410 * t792 - t421 * t789 - t1007, t392 * t792 - t398 * t789 - t983, -pkin(5) * t395 + t384 * t792 - t386 * t789, t892, t969, t1001, t932, t999, t931, t399 * t792 - t405 * t789 - t984, t387 * t792 - t391 * t789 - t983, t394 * t792 - t403 * t789 + t1007, -pkin(5) * t388 + t382 * t792 - t383 * t789; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t757, 0, t758, 0, t734, t814, t718, pkin(5) * t718, t729 * t789 + t819, t711 * t789 + t760 * t792, t723 * t789 - t788 * t830, t728 * t789 - t819, t721 * t789 - t791 * t830, -qJDD(2) * t792 + t746 * t789, pkin(5) * t683 + t668 * t792 + t678 * t789, pkin(5) * t684 + t669 * t792 + t679 * t789, pkin(5) * t714 + t666 * t789, pkin(5) * t638 - (-pkin(1) * t792 - pkin(6) * t789) * t666, t620 * t789 + t654 * t792, t571 * t789 + t609 * t792, t590 * t789 + t646 * t792, t619 * t789 + t652 * t792, t591 * t789 + t647 * t792, t651 * t789 + t673 * t792, pkin(5) * t546 + t479 * t789 + t508 * t792, pkin(5) * t550 + t484 * t789 + t509 * t792, pkin(5) * t512 + t456 * t789 + t466 * t792, pkin(5) * t470 + t449 * t789 + t465 * t792, t893, -t1002, t972, t933, -t1000, t934, t406 * t789 + t419 * t792 + t986, t410 * t789 + t421 * t792 + t1006, t392 * t789 + t398 * t792 + t985, pkin(5) * t396 + t384 * t789 + t386 * t792, t893, t972, t1002, t934, t1000, t933, t399 * t789 + t405 * t792 + t986, t387 * t789 + t391 * t792 + t985, t394 * t789 + t403 * t792 - t1006, pkin(5) * t389 + t382 * t789 + t383 * t792; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t764, t765, 0, 0, t809 * t788, t752 * t791 + t755 * t788, t766 * t791 + t850, -t808 * t791, t768 * t788 + t851, 0, pkin(1) * t755 + pkin(6) * t722 + t855, -pkin(1) * t752 + pkin(6) * t724 - t856, pkin(1) * t759 + pkin(6) * t756 + t667, pkin(1) * t737 + pkin(6) * t667, t655 * t788 - t825, t611 * t788 + t715 * t791, t648 * t788 + t664 * t791, t653 * t788 + t825, t649 * t788 + t659 * t791, t674 * t788 + t735, -pkin(1) * t627 + pkin(6) * t573 + t559 * t791 + t581 * t788, -pkin(1) * t641 + pkin(6) * t579 + t560 * t791 + t598 * t788, pkin(6) * t566 + t788 * t499 + (-pkin(1) - t882) * t610, pkin(6) * t519 + (-pkin(1) + t815) * t547, t813, -t988, t951, t906, -t987, t908, t432 * t788 + t437 * t791 + t974, t435 * t788 + t441 * t791 - t1003, t400 * t788 + t448 * t791 + t975, -pkin(1) * t416 + pkin(6) * t415 + t397 * t788 + t404 * t791, t813, t951, t988, t908, t987, t906, t412 * t788 + t427 * t791 + t974, t393 * t788 + t434 * t791 + t975, t411 * t788 + t423 * t791 + t1003, -pkin(1) * t408 + pkin(6) * t402 + t385 * t788 + t390 * t791;];
tauB_reg = t1;
