% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRPR15
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:37
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRPR15_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR15_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR15_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR15_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR15_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRPR15_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:37:50
% EndTime: 2019-12-31 18:37:52
% DurationCPUTime: 2.02s
% Computational Cost: add. (7935->213), mult. (16830->246), div. (0->0), fcn. (10741->8), ass. (0->143)
t1154 = sin(qJ(3));
t1175 = t1154 * qJD(1);
t1140 = qJD(5) + t1175;
t1186 = qJD(5) + t1140;
t1157 = cos(qJ(3));
t1179 = qJD(1) * t1157;
t1141 = qJD(3) * t1179;
t1144 = t1154 * qJDD(1);
t1127 = t1144 + t1141;
t1151 = sin(pkin(8));
t1152 = cos(pkin(8));
t1123 = -t1152 * qJD(3) + t1151 * t1179;
t1125 = t1151 * qJD(3) + t1152 * t1179;
t1177 = t1125 * t1123;
t1096 = t1127 - t1177;
t1160 = qJD(1) ^ 2;
t1155 = sin(qJ(1));
t1158 = cos(qJ(1));
t1137 = -t1158 * g(1) - t1155 * g(2);
t1161 = -qJDD(1) * qJ(2) - 0.2e1 * qJD(2) * qJD(1) - t1137;
t1180 = pkin(6) + pkin(1);
t1111 = t1180 * t1160 + t1161;
t1153 = sin(qJ(5));
t1156 = cos(qJ(5));
t1099 = t1156 * t1123 + t1153 * t1125;
t1185 = t1099 ^ 2;
t1101 = -t1153 * t1123 + t1156 * t1125;
t1184 = t1101 ^ 2;
t1122 = t1123 ^ 2;
t1183 = t1125 ^ 2;
t1182 = t1140 ^ 2;
t1181 = -2 * qJD(4);
t1178 = t1101 * t1099;
t1149 = t1154 ^ 2;
t1176 = t1149 * t1160;
t1174 = qJD(5) - t1140;
t1150 = t1157 ^ 2;
t1173 = t1149 + t1150;
t1172 = t1157 * qJDD(1);
t1171 = qJD(3) * t1175;
t1170 = t1123 * t1175;
t1169 = t1125 * t1175;
t1168 = t1154 * t1160 * t1157;
t1128 = -t1171 + t1172;
t1085 = (-t1128 + t1171) * qJ(4) + (t1127 + t1141) * pkin(3) - t1111;
t1136 = t1155 * g(1) - t1158 * g(2);
t1162 = -t1160 * qJ(2) + qJDD(2) - t1136;
t1114 = -t1180 * qJDD(1) + t1162;
t1104 = -t1157 * g(3) + t1154 * t1114;
t1159 = qJD(3) ^ 2;
t1163 = t1160 * (pkin(3) * t1154 - qJ(4) * t1157);
t1088 = -t1159 * pkin(3) + qJDD(3) * qJ(4) - t1154 * t1163 + t1104;
t1059 = t1151 * t1085 + t1152 * t1088 + t1123 * t1181;
t1167 = -qJDD(5) - t1127;
t1112 = t1152 * qJDD(3) - t1151 * t1128;
t1113 = t1151 * qJDD(3) + t1152 * t1128;
t1166 = t1156 * t1112 - t1153 * t1113;
t1095 = -t1113 - t1170;
t1058 = t1152 * t1085 - t1151 * t1088 + t1125 * t1181;
t1103 = t1154 * g(3) + t1157 * t1114;
t1165 = -t1153 * t1112 - t1156 * t1113;
t1164 = pkin(4) * t1175 - t1125 * pkin(7);
t1087 = qJDD(3) * pkin(3) + t1159 * qJ(4) - t1157 * t1163 - qJDD(4) + t1103;
t1139 = -t1150 * t1160 - t1159;
t1138 = -t1159 - t1176;
t1135 = -qJDD(3) - t1168;
t1134 = qJDD(3) - t1168;
t1133 = t1173 * t1160;
t1132 = t1155 * qJDD(1) + t1158 * t1160;
t1131 = t1158 * qJDD(1) - t1155 * t1160;
t1130 = t1173 * qJDD(1);
t1129 = -0.2e1 * t1171 + t1172;
t1126 = t1144 + 0.2e1 * t1141;
t1117 = qJDD(1) * pkin(1) - t1162;
t1116 = t1160 * pkin(1) + t1161;
t1115 = -t1176 - t1183;
t1109 = t1157 * t1135 - t1154 * t1139;
t1108 = -t1154 * t1134 + t1157 * t1138;
t1107 = t1154 * t1135 + t1157 * t1139;
t1106 = t1157 * t1134 + t1154 * t1138;
t1102 = -t1176 - t1122;
t1097 = -t1127 - t1177;
t1094 = t1113 - t1170;
t1093 = t1112 + t1169;
t1092 = -t1112 + t1169;
t1090 = -t1122 - t1183;
t1089 = -t1182 - t1184;
t1084 = -t1154 * t1103 + t1157 * t1104;
t1083 = t1157 * t1103 + t1154 * t1104;
t1080 = t1152 * t1097 - t1151 * t1115;
t1079 = t1151 * t1097 + t1152 * t1115;
t1078 = -t1182 - t1185;
t1077 = -t1151 * t1096 + t1152 * t1102;
t1076 = t1152 * t1096 + t1151 * t1102;
t1075 = t1167 - t1178;
t1074 = -t1167 - t1178;
t1073 = t1152 * t1093 - t1151 * t1095;
t1072 = t1151 * t1093 + t1152 * t1095;
t1071 = -t1184 - t1185;
t1070 = t1157 * t1080 + t1154 * t1094;
t1069 = t1154 * t1080 - t1157 * t1094;
t1068 = t1112 * pkin(4) + t1122 * pkin(7) - t1125 * t1164 + t1087;
t1067 = t1157 * t1077 + t1154 * t1092;
t1066 = t1154 * t1077 - t1157 * t1092;
t1065 = t1174 * t1099 + t1165;
t1064 = -t1186 * t1099 - t1165;
t1063 = -t1174 * t1101 + t1166;
t1062 = t1186 * t1101 - t1166;
t1061 = t1157 * t1073 + t1154 * t1090;
t1060 = t1154 * t1073 - t1157 * t1090;
t1057 = t1156 * t1075 - t1153 * t1089;
t1056 = t1153 * t1075 + t1156 * t1089;
t1055 = -t1153 * t1074 + t1156 * t1078;
t1054 = t1156 * t1074 + t1153 * t1078;
t1053 = -t1122 * pkin(4) + t1112 * pkin(7) - t1164 * t1175 + t1059;
t1052 = t1096 * pkin(4) + t1095 * pkin(7) + t1058;
t1051 = t1156 * t1063 - t1153 * t1065;
t1050 = t1153 * t1063 + t1156 * t1065;
t1049 = -t1151 * t1058 + t1152 * t1059;
t1048 = t1152 * t1058 + t1151 * t1059;
t1047 = -t1151 * t1056 + t1152 * t1057;
t1046 = t1152 * t1056 + t1151 * t1057;
t1045 = -t1151 * t1054 + t1152 * t1055;
t1044 = t1152 * t1054 + t1151 * t1055;
t1043 = t1157 * t1049 - t1154 * t1087;
t1042 = t1154 * t1049 + t1157 * t1087;
t1041 = t1157 * t1047 + t1154 * t1064;
t1040 = t1154 * t1047 - t1157 * t1064;
t1039 = t1153 * t1052 + t1156 * t1053;
t1038 = t1156 * t1052 - t1153 * t1053;
t1037 = t1157 * t1045 + t1154 * t1062;
t1036 = t1154 * t1045 - t1157 * t1062;
t1035 = -t1151 * t1050 + t1152 * t1051;
t1034 = t1152 * t1050 + t1151 * t1051;
t1033 = t1157 * t1035 + t1154 * t1071;
t1032 = t1154 * t1035 - t1157 * t1071;
t1031 = -t1153 * t1038 + t1156 * t1039;
t1030 = t1156 * t1038 + t1153 * t1039;
t1029 = -t1151 * t1030 + t1152 * t1031;
t1028 = t1152 * t1030 + t1151 * t1031;
t1027 = t1157 * t1029 - t1154 * t1068;
t1026 = t1154 * t1029 + t1157 * t1068;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1132, -t1131, 0, -t1155 * t1136 + t1158 * t1137, 0, 0, 0, 0, 0, 0, 0, t1132, t1131, -t1158 * t1116 - t1155 * t1117, 0, 0, 0, 0, 0, 0, t1155 * t1106 + t1158 * t1126, t1155 * t1107 + t1158 * t1129, -t1155 * t1130 - t1158 * t1133, t1155 * t1083 - t1158 * t1111, 0, 0, 0, 0, 0, 0, t1155 * t1066 + t1158 * t1076, t1155 * t1069 + t1158 * t1079, t1155 * t1060 + t1158 * t1072, t1155 * t1042 + t1158 * t1048, 0, 0, 0, 0, 0, 0, t1155 * t1036 + t1158 * t1044, t1155 * t1040 + t1158 * t1046, t1155 * t1032 + t1158 * t1034, t1155 * t1026 + t1158 * t1028; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1131, -t1132, 0, t1158 * t1136 + t1155 * t1137, 0, 0, 0, 0, 0, 0, 0, -t1131, t1132, -t1155 * t1116 + t1158 * t1117, 0, 0, 0, 0, 0, 0, -t1158 * t1106 + t1155 * t1126, -t1158 * t1107 + t1155 * t1129, t1158 * t1130 - t1155 * t1133, -t1158 * t1083 - t1155 * t1111, 0, 0, 0, 0, 0, 0, -t1158 * t1066 + t1155 * t1076, -t1158 * t1069 + t1155 * t1079, -t1158 * t1060 + t1155 * t1072, -t1158 * t1042 + t1155 * t1048, 0, 0, 0, 0, 0, 0, -t1158 * t1036 + t1155 * t1044, -t1158 * t1040 + t1155 * t1046, -t1158 * t1032 + t1155 * t1034, -t1158 * t1026 + t1155 * t1028; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1108, t1109, 0, t1084, 0, 0, 0, 0, 0, 0, t1067, t1070, t1061, t1043, 0, 0, 0, 0, 0, 0, t1037, t1041, t1033, t1027; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1160, -qJDD(1), 0, t1137, 0, 0, 0, 0, 0, 0, 0, t1160, qJDD(1), -t1116, 0, 0, 0, 0, 0, 0, t1126, t1129, -t1133, -t1111, 0, 0, 0, 0, 0, 0, t1076, t1079, t1072, t1048, 0, 0, 0, 0, 0, 0, t1044, t1046, t1034, t1028; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1160, 0, t1136, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), t1160, t1117, 0, 0, 0, 0, 0, 0, -t1106, -t1107, t1130, -t1083, 0, 0, 0, 0, 0, 0, -t1066, -t1069, -t1060, -t1042, 0, 0, 0, 0, 0, 0, -t1036, -t1040, -t1032, -t1026; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1108, t1109, 0, t1084, 0, 0, 0, 0, 0, 0, t1067, t1070, t1061, t1043, 0, 0, 0, 0, 0, 0, t1037, t1041, t1033, t1027; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1108, t1109, 0, t1084, 0, 0, 0, 0, 0, 0, t1067, t1070, t1061, t1043, 0, 0, 0, 0, 0, 0, t1037, t1041, t1033, t1027; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1160, -qJDD(1), t1116, 0, 0, 0, 0, 0, 0, -t1126, -t1129, t1133, t1111, 0, 0, 0, 0, 0, 0, -t1076, -t1079, -t1072, -t1048, 0, 0, 0, 0, 0, 0, -t1044, -t1046, -t1034, -t1028; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1160, -t1117, 0, 0, 0, 0, 0, 0, t1106, t1107, -t1130, t1083, 0, 0, 0, 0, 0, 0, t1066, t1069, t1060, t1042, 0, 0, 0, 0, 0, 0, t1036, t1040, t1032, t1026; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1138, t1135, -t1144, t1104, 0, 0, 0, 0, 0, 0, t1077, t1080, t1073, t1049, 0, 0, 0, 0, 0, 0, t1045, t1047, t1035, t1029; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1134, t1139, -t1172, t1103, 0, 0, 0, 0, 0, 0, -t1092, -t1094, -t1090, t1087, 0, 0, 0, 0, 0, 0, -t1062, -t1064, -t1071, t1068; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1126, t1129, -t1133, -t1111, 0, 0, 0, 0, 0, 0, t1076, t1079, t1072, t1048, 0, 0, 0, 0, 0, 0, t1044, t1046, t1034, t1028; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1102, t1097, t1093, t1059, 0, 0, 0, 0, 0, 0, t1055, t1057, t1051, t1031; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1096, t1115, t1095, t1058, 0, 0, 0, 0, 0, 0, t1054, t1056, t1050, t1030; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1092, t1094, t1090, -t1087, 0, 0, 0, 0, 0, 0, t1062, t1064, t1071, -t1068; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1078, t1075, t1063, t1039; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1074, t1089, t1065, t1038; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1062, t1064, t1071, -t1068;];
f_new_reg = t1;
