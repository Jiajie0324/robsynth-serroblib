% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S5RPRPR15
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta4]';
% 
% Output:
% MMD_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:37
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S5RPRPR15_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR15_inertiaDJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR15_inertiaDJ_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRPR15_inertiaDJ_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:37:24
% EndTime: 2019-12-31 18:37:29
% DurationCPUTime: 1.40s
% Computational Cost: add. (1089->164), mult. (2477->313), div. (0->0), fcn. (2121->6), ass. (0->96)
t111 = sin(qJ(5));
t112 = cos(qJ(5));
t53 = sin(pkin(8));
t54 = cos(pkin(8));
t63 = -t111 * t53 + t112 * t54;
t87 = qJD(5) * t111;
t88 = qJD(5) * t112;
t26 = t53 * t87 - t54 * t88;
t56 = cos(qJ(3));
t119 = t56 * t26;
t55 = sin(qJ(3));
t23 = t63 * t55;
t24 = t63 * t56;
t118 = (t55 ^ 2 - t56 ^ 2) * qJD(3);
t117 = -0.2e1 * t26;
t94 = t112 * t53;
t32 = t111 * t54 + t94;
t27 = t32 * qJD(5);
t116 = 0.2e1 * t27;
t115 = 2 * qJD(2);
t114 = pkin(3) * t56;
t113 = t55 * pkin(3);
t110 = t27 * t55;
t57 = -pkin(1) - pkin(6);
t109 = t55 * t57;
t108 = t56 * t27;
t107 = t56 * t57;
t106 = pkin(7) + qJ(4);
t40 = t54 * t109;
t71 = -t56 * qJ(4) + t113;
t65 = qJ(2) + t71;
t20 = t53 * t65 + t40;
t49 = t53 ^ 2;
t50 = t54 ^ 2;
t105 = t49 + t50;
t103 = qJD(4) * t55;
t47 = t55 * qJD(3);
t102 = t56 * qJD(3);
t101 = qJ(2) * qJD(3);
t100 = t53 * t109;
t99 = t54 * t107;
t98 = t32 * t102;
t97 = t53 * t47;
t96 = t54 * t47;
t44 = t57 * t47;
t95 = t55 * t102;
t91 = -t53 * t57 + pkin(4);
t90 = t105 * t56;
t89 = qJD(4) * t111;
t86 = t112 * qJD(4);
t85 = t105 * qJD(4);
t84 = -0.2e1 * t95;
t41 = 0.2e1 * t95;
t83 = t53 * t96;
t82 = -t56 * qJD(4) + qJD(2);
t79 = 0.2e1 * t85;
t78 = 0.2e1 * t118;
t77 = t111 * t47;
t74 = t112 * t47;
t73 = t106 * t111;
t72 = qJ(4) * t55 + t114;
t67 = t54 * t82;
t14 = t67 + (-t53 * t107 + t54 * t72) * qJD(3);
t68 = t53 * t82;
t15 = t68 + (t53 * t72 + t99) * qJD(3);
t70 = -t14 * t53 + t15 * t54;
t19 = t54 * t65 - t100;
t69 = -t19 * t53 + t20 * t54;
t66 = t106 * t94;
t64 = t106 * t55 + t114;
t62 = t91 * t55 + (-t106 * t56 + qJ(2) + t113) * t54;
t61 = t112 * t62;
t60 = t111 * t62;
t59 = t68 + (t64 * t53 + t99) * qJD(3);
t58 = t67 + (t64 * t54 + t91 * t56) * qJD(3);
t48 = qJ(2) * t115;
t46 = -t54 * pkin(4) - pkin(3);
t38 = t106 * t54;
t30 = (pkin(4) * t53 - t57) * t56;
t25 = -pkin(4) * t97 + t44;
t22 = t32 * t56;
t21 = t32 * t55;
t18 = t112 * t38 - t53 * t73;
t17 = -t111 * t38 - t66;
t16 = -t53 * t56 * pkin(7) + t20;
t12 = -t53 * t74 - t54 * t77 - t119;
t11 = -qJD(5) * t23 - t98;
t10 = -t53 * t77 + t54 * t74 + t108;
t9 = -t24 * qJD(3) + t110;
t7 = -t38 * t88 - t54 * t89 + (qJD(5) * t73 - t86) * t53;
t6 = qJD(5) * t66 + t38 * t87 + t53 * t89 - t54 * t86;
t4 = t112 * t16 + t60;
t3 = -t111 * t16 + t61;
t2 = -qJD(5) * t60 - t111 * t59 + t112 * t58 - t16 * t88;
t1 = -qJD(5) * t61 - t111 * t58 - t112 * t59 + t16 * t87;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t115, t48, t84, t78, 0, t41, 0, 0, 0.2e1 * qJD(2) * t55 + 0.2e1 * t56 * t101, 0.2e1 * qJD(2) * t56 - 0.2e1 * t55 * t101, 0, t48, t50 * t84, 0.4e1 * t56 * t83, -0.2e1 * t54 * t118, t49 * t84, t53 * t78, t41, 0.2e1 * t14 * t55 + 0.2e1 * (t19 + 0.2e1 * t100) * t102, -0.2e1 * t15 * t55 + 0.2e1 * (-t20 + 0.2e1 * t40) * t102, 0.2e1 * (-t14 * t54 - t15 * t53) * t56 + 0.2e1 * (t19 * t54 + t20 * t53) * t47, -0.2e1 * t57 ^ 2 * t95 + 0.2e1 * t19 * t14 + 0.2e1 * t20 * t15, -0.2e1 * t24 * t10, 0.2e1 * t10 * t22 - 0.2e1 * t24 * t12, -0.2e1 * t10 * t55 + 0.2e1 * t24 * t102, 0.2e1 * t22 * t12, -0.2e1 * t22 * t102 - 0.2e1 * t12 * t55, t41, 0.2e1 * t3 * t102 + 0.2e1 * t30 * t12 + 0.2e1 * t2 * t55 + 0.2e1 * t25 * t22, 0.2e1 * t1 * t55 - 0.2e1 * t30 * t10 - 0.2e1 * t4 * t102 + 0.2e1 * t25 * t24, 0.2e1 * t1 * t22 + 0.2e1 * t3 * t10 - 0.2e1 * t4 * t12 - 0.2e1 * t2 * t24, -0.2e1 * t4 * t1 + 0.2e1 * t3 * t2 + 0.2e1 * t30 * t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70 * t55 + (t69 - 0.2e1 * t109) * t102, 0, 0, 0, 0, 0, 0, t11 * t55 - t56 * t12 + (-t21 * t56 + t22 * t55) * qJD(3), t56 * t10 + t9 * t55 + (-t23 * t56 + t24 * t55) * qJD(3), -t21 * t10 - t11 * t24 - t23 * t12 + t9 * t22, -t1 * t23 + t3 * t11 - t2 * t21 - t25 * t56 + t30 * t47 - t4 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-0.1e1 + t105) * t41, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t21 * t11 - 0.2e1 * t23 * t9 - 0.2e1 * t95; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t47, 0, -t102, 0, -t44, -t57 * t102, 0, 0, -t83, (t49 - t50) * t47, t53 * t102, t83, t54 * t102, 0, -t53 * t103 + (t71 * t53 - t40) * qJD(3), -t54 * t103 + (t71 * t54 + t100) * qJD(3), t70, -pkin(3) * t44 + t70 * qJ(4) + t69 * qJD(4), -t10 * t32 - t24 * t26, -t10 * t63 - t32 * t12 + t26 * t22 - t24 * t27, -t26 * t55 + t98, -t12 * t63 + t22 * t27, t102 * t63 - t110, 0, t17 * t102 + t46 * t12 - t25 * t63 + t30 * t27 + t7 * t55, -t46 * t10 - t18 * t102 + t25 * t32 - t30 * t26 + t6 * t55, -t1 * t63 + t17 * t10 - t18 * t12 - t2 * t32 + t6 * t22 - t7 * t24 + t3 * t26 - t4 * t27, -t1 * t18 + t2 * t17 + t25 * t46 + t3 * t7 - t4 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t47, -t102, 0, 0, 0, 0, 0, 0, 0, 0, -t96, t97, qJD(3) * t90, t55 * t85 + (qJ(4) * t90 - t113) * qJD(3), 0, 0, 0, 0, 0, 0, -t47 * t63 - t108, t32 * t47 + t119, -t11 * t32 - t21 * t26 - t23 * t27 - t63 * t9, t11 * t17 - t9 * t18 - t21 * t7 - t23 * t6 + t46 * t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, qJ(4) * t79, t32 * t117, -0.2e1 * t26 * t63 - 0.2e1 * t32 * t27, 0, -t63 * t116, 0, 0, t46 * t116, t46 * t117, 0.2e1 * t17 * t26 - 0.2e1 * t18 * t27 - 0.2e1 * t7 * t32 - 0.2e1 * t6 * t63, 0.2e1 * t17 * t7 - 0.2e1 * t18 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t97, -t96, 0, t44, 0, 0, 0, 0, 0, 0, t12, -t10, 0, t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, -t26, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t10, 0, -t12, t102, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, t9, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t26, 0, -t27, 0, t7, t6, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t5;
