% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRPR15
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:37
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRPR15_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR15_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR15_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR15_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR15_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRPR15_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:37:31
% EndTime: 2019-12-31 18:37:40
% DurationCPUTime: 6.28s
% Computational Cost: add. (23656->482), mult. (49982->704), div. (0->0), fcn. (31797->8), ass. (0->327)
t494 = sin(pkin(8));
t495 = cos(pkin(8));
t500 = cos(qJ(3));
t539 = qJD(1) * t500;
t460 = -t495 * qJD(3) + t494 * t539;
t462 = qJD(3) * t494 + t495 * t539;
t427 = t462 * t460;
t537 = qJD(1) * qJD(3);
t520 = t500 * t537;
t497 = sin(qJ(3));
t535 = qJDD(1) * t497;
t467 = t520 + t535;
t568 = -t427 + t467;
t575 = t494 * t568;
t574 = t495 * t568;
t496 = sin(qJ(5));
t499 = cos(qJ(5));
t417 = t499 * t460 + t462 * t496;
t419 = -t460 * t496 + t462 * t499;
t372 = t419 * t417;
t504 = qJDD(5) + t467;
t570 = -t372 + t504;
t573 = t496 * t570;
t572 = t499 * t570;
t503 = qJD(1) ^ 2;
t567 = pkin(6) + pkin(1);
t571 = t567 * t503;
t540 = qJD(1) * t497;
t484 = qJD(5) + t540;
t405 = t484 * t417;
t521 = t497 * t537;
t533 = qJDD(1) * t500;
t468 = -t521 + t533;
t442 = t495 * qJDD(3) - t468 * t494;
t443 = qJDD(3) * t494 + t468 * t495;
t505 = qJD(5) * t417 - t442 * t496 - t443 * t499;
t569 = -t405 - t505;
t519 = -t499 * t442 + t443 * t496;
t333 = (qJD(5) - t484) * t419 + t519;
t415 = t417 ^ 2;
t416 = t419 ^ 2;
t458 = t460 ^ 2;
t459 = t462 ^ 2;
t483 = t484 ^ 2;
t566 = pkin(3) * t497;
t565 = qJDD(1) * pkin(1);
t536 = qJD(2) * qJD(1);
t489 = 0.2e1 * t536;
t498 = sin(qJ(1));
t501 = cos(qJ(1));
t478 = g(1) * t501 + g(2) * t498;
t491 = qJDD(1) * qJ(2);
t510 = t478 - t491;
t507 = t489 - t510;
t511 = -t468 + t521;
t512 = t467 + t520;
t383 = t512 * pkin(3) + t511 * qJ(4) + t507 - t571;
t477 = g(1) * t498 - t501 * g(2);
t514 = qJDD(2) - t477;
t506 = -qJ(2) * t503 + t514;
t444 = -t567 * qJDD(1) + t506;
t424 = -t500 * g(3) + t497 * t444;
t502 = qJD(3) ^ 2;
t513 = -qJ(4) * t500 + t566;
t508 = t503 * t513;
t387 = -t502 * pkin(3) + qJDD(3) * qJ(4) - t497 * t508 + t424;
t319 = 0.2e1 * qJD(4) * t462 - t495 * t383 + t387 * t494;
t525 = t460 * t540;
t410 = -t443 - t525;
t300 = pkin(4) * t568 + pkin(7) * t410 - t319;
t320 = -0.2e1 * qJD(4) * t460 + t494 * t383 + t495 * t387;
t509 = pkin(4) * t540 - t462 * pkin(7);
t307 = -t458 * pkin(4) + t442 * pkin(7) - t509 * t540 + t320;
t262 = -t499 * t300 + t307 * t496;
t263 = t496 * t300 + t499 * t307;
t237 = -t262 * t499 + t263 * t496;
t564 = t237 * t494;
t563 = t237 * t495;
t423 = g(3) * t497 + t444 * t500;
t386 = qJDD(3) * pkin(3) + qJ(4) * t502 - t500 * t508 - qJDD(4) + t423;
t340 = pkin(4) * t442 + pkin(7) * t458 - t462 * t509 + t386;
t562 = t340 * t496;
t561 = t340 * t499;
t361 = t372 + t504;
t560 = t361 * t496;
t559 = t361 * t499;
t558 = t386 * t494;
t557 = t386 * t495;
t412 = t427 + t467;
t556 = t412 * t494;
t555 = t412 * t495;
t439 = t510 - 0.2e1 * t536 + t571;
t554 = t439 * t497;
t553 = t439 * t500;
t552 = t467 * t500;
t492 = t497 ^ 2;
t493 = t500 ^ 2;
t541 = t492 + t493;
t470 = t541 * qJDD(1);
t551 = t470 * t498;
t550 = t470 * t501;
t527 = t497 * t500 * t503;
t475 = qJDD(3) + t527;
t549 = t475 * t497;
t548 = t475 * t500;
t476 = qJDD(3) - t527;
t547 = t476 * t497;
t546 = t476 * t500;
t545 = t484 * t496;
t544 = t484 * t499;
t543 = t492 * t503;
t542 = t493 * t503;
t534 = qJDD(1) * t498;
t532 = qJDD(1) * t501;
t531 = t497 * t372;
t530 = t500 * t372;
t529 = t497 * t427;
t528 = t500 * t427;
t526 = pkin(3) * t500 + pkin(2);
t524 = t462 * t540;
t523 = t494 * t540;
t522 = t495 * t540;
t238 = t262 * t496 + t499 * t263;
t282 = t319 * t494 + t495 * t320;
t448 = -pkin(1) * t503 + t507;
t449 = -t506 + t565;
t396 = t501 * t448 - t449 * t498;
t429 = -t477 * t498 - t501 * t478;
t518 = t498 * t527;
t517 = t501 * t527;
t471 = -t498 * t503 + t532;
t516 = pkin(5) * t471 + g(3) * t498;
t472 = t501 * t503 + t534;
t515 = -pkin(5) * t472 + g(3) * t501;
t281 = -t319 * t495 + t320 * t494;
t381 = t423 * t500 + t424 * t497;
t382 = -t423 * t497 + t424 * t500;
t393 = t448 * t498 + t449 * t501;
t428 = t477 * t501 - t478 * t498;
t408 = t442 + t524;
t482 = -t502 - t542;
t481 = t502 - t542;
t480 = -t502 - t543;
t479 = -t502 + t543;
t474 = (-t492 + t493) * t503;
t473 = t541 * t503;
t469 = -0.2e1 * t521 + t533;
t466 = 0.2e1 * t520 + t535;
t464 = t541 * t537;
t447 = -t459 - t543;
t446 = -t459 + t543;
t445 = t458 - t543;
t441 = -t468 * t497 - t493 * t537;
t440 = -t492 * t537 + t552;
t436 = -t482 * t497 - t548;
t435 = t480 * t500 - t547;
t434 = t482 * t500 - t549;
t433 = -t481 * t500 - t547;
t432 = t480 * t497 + t546;
t431 = -t479 * t497 - t548;
t426 = -t473 * t501 - t551;
t425 = -t473 * t498 + t550;
t422 = -t459 + t458;
t421 = t466 * t497 - t469 * t500;
t420 = -t543 - t458;
t409 = t443 - t525;
t407 = t442 - t524;
t403 = t458 + t459;
t402 = (-t460 * t495 + t462 * t494) * t540;
t401 = (-t460 * t494 - t462 * t495) * t540;
t400 = -t416 + t483;
t399 = t415 - t483;
t398 = t434 * t498 + t469 * t501;
t397 = t432 * t498 + t466 * t501;
t395 = -t434 * t501 + t469 * t498;
t394 = -t432 * t501 + t466 * t498;
t392 = t443 * t495 - t462 * t523;
t391 = t443 * t494 + t462 * t522;
t390 = -t442 * t494 + t460 * t522;
t389 = t442 * t495 + t460 * t523;
t388 = -t416 - t483;
t384 = -t402 * t497 + t552;
t378 = t445 * t495 - t556;
t377 = -t447 * t494 - t555;
t376 = -t446 * t494 + t574;
t375 = t445 * t494 + t555;
t374 = t447 * t495 - t556;
t373 = t446 * t495 + t575;
t371 = -t416 + t415;
t370 = -pkin(2) * t473 - t382;
t369 = -t483 - t415;
t368 = t420 * t495 - t575;
t367 = t420 * t494 + t574;
t366 = pkin(2) * t434 - qJ(2) * t436 - t424;
t365 = pkin(2) * t432 - qJ(2) * t435 + t423;
t364 = -t392 * t497 + t528;
t363 = -t390 * t497 - t528;
t358 = -qJD(5) * t419 - t519;
t357 = t408 * t495 - t410 * t494;
t356 = t407 * t495 - t409 * t494;
t355 = t408 * t494 + t410 * t495;
t354 = t407 * t494 + t409 * t495;
t353 = (-t417 * t499 + t419 * t496) * t484;
t352 = (-t417 * t496 - t419 * t499) * t484;
t351 = pkin(2) * t466 - t567 * t435 - t553;
t350 = pkin(2) * t469 - t567 * t436 + t554;
t349 = t381 * t498 - t439 * t501;
t348 = -t381 * t501 - t439 * t498;
t347 = -t415 - t416;
t346 = t377 * t500 + t409 * t497;
t345 = -t378 * t497 + t408 * t500;
t344 = t377 * t497 - t409 * t500;
t343 = -t376 * t497 - t410 * t500;
t342 = -t356 * t497 - t422 * t500;
t341 = -qJ(4) * t374 - t557;
t339 = t368 * t500 - t407 * t497;
t338 = t368 * t497 + t407 * t500;
t337 = -t405 + t505;
t332 = (qJD(5) + t484) * t419 + t519;
t331 = pkin(2) * t381 - qJ(2) * t382;
t330 = t399 * t499 - t560;
t329 = -t400 * t496 + t572;
t328 = t399 * t496 + t559;
t327 = t400 * t499 + t573;
t326 = -t419 * t545 - t499 * t505;
t325 = t419 * t544 - t496 * t505;
t324 = -t358 * t496 + t417 * t544;
t323 = t358 * t499 + t417 * t545;
t322 = t357 * t500 - t403 * t497;
t321 = t357 * t497 + t403 * t500;
t318 = -t388 * t496 - t559;
t317 = t388 * t499 - t560;
t316 = -qJ(4) * t367 - t558;
t314 = -pkin(2) * t439 - t567 * t382;
t313 = t369 * t499 - t573;
t312 = t369 * t496 + t572;
t311 = -t352 * t494 + t353 * t495;
t310 = t352 * t495 + t353 * t494;
t309 = t344 * t498 + t374 * t501;
t308 = -t344 * t501 + t374 * t498;
t305 = -pkin(3) * t374 + t320;
t304 = -t311 * t497 + t500 * t504;
t303 = t338 * t498 + t367 * t501;
t302 = -t338 * t501 + t367 * t498;
t301 = -pkin(3) * t367 + t319;
t297 = t321 * t498 + t355 * t501;
t296 = -t321 * t501 + t355 * t498;
t295 = -t333 * t499 - t337 * t496;
t294 = -t332 * t499 - t496 * t569;
t293 = -t333 * t496 + t337 * t499;
t292 = -t332 * t496 + t499 * t569;
t291 = -pkin(7) * t317 - t561;
t290 = -t328 * t494 + t330 * t495;
t289 = -t327 * t494 + t329 * t495;
t288 = t328 * t495 + t330 * t494;
t287 = t327 * t495 + t329 * t494;
t286 = -t325 * t494 + t326 * t495;
t285 = -t323 * t494 + t324 * t495;
t284 = t325 * t495 + t326 * t494;
t283 = t323 * t495 + t324 * t494;
t280 = -t317 * t494 + t318 * t495;
t279 = t317 * t495 + t318 * t494;
t278 = -pkin(7) * t312 - t562;
t277 = -t312 * t494 + t313 * t495;
t276 = t312 * t495 + t313 * t494;
t275 = t282 * t500 - t386 * t497;
t274 = t282 * t497 + t386 * t500;
t273 = -t286 * t497 + t530;
t272 = -t285 * t497 - t530;
t271 = -qJ(4) * t355 - t281;
t270 = pkin(2) * t344 - pkin(3) * t409 - qJ(2) * t346 + qJ(4) * t377 - t558;
t269 = -pkin(4) * t569 + pkin(7) * t318 - t562;
t268 = -t290 * t497 - t333 * t500;
t267 = -t289 * t497 - t337 * t500;
t266 = t280 * t500 + t497 * t569;
t265 = t280 * t497 - t500 * t569;
t264 = -pkin(4) * t332 + pkin(7) * t313 + t561;
t260 = pkin(2) * t338 + pkin(3) * t407 - qJ(2) * t339 + qJ(4) * t368 + t557;
t259 = t277 * t500 + t332 * t497;
t258 = t277 * t497 - t332 * t500;
t257 = -t293 * t494 + t295 * t495;
t256 = -t292 * t494 + t294 * t495;
t255 = t293 * t495 + t295 * t494;
t254 = t292 * t495 + t294 * t494;
t253 = -t256 * t497 - t371 * t500;
t252 = t274 * t498 + t281 * t501;
t251 = -t274 * t501 + t281 * t498;
t250 = pkin(2) * t374 - t305 * t500 - t341 * t497 - t567 * t346;
t249 = t257 * t500 + t347 * t497;
t248 = t257 * t497 - t347 * t500;
t247 = pkin(2) * t321 + pkin(3) * t403 - qJ(2) * t322 + qJ(4) * t357 + t282;
t246 = pkin(2) * t367 - t301 * t500 - t316 * t497 - t567 * t339;
t245 = t265 * t498 + t279 * t501;
t244 = -t265 * t501 + t279 * t498;
t243 = -pkin(3) * t255 - pkin(4) * t293;
t242 = t258 * t498 + t276 * t501;
t241 = -t258 * t501 + t276 * t498;
t240 = -t271 * t497 - t567 * t322 + t526 * t355;
t239 = -pkin(3) * t279 - pkin(4) * t317 + t263;
t236 = -pkin(3) * t276 - pkin(4) * t312 + t262;
t235 = -qJ(4) * t279 - t269 * t494 + t291 * t495;
t234 = pkin(4) * t340 + pkin(7) * t238;
t233 = pkin(2) * t274 + pkin(3) * t386 - qJ(2) * t275 + qJ(4) * t282;
t232 = -qJ(4) * t276 - t264 * t494 + t278 * t495;
t231 = -pkin(7) * t293 - t237;
t230 = t248 * t498 + t255 * t501;
t229 = -t248 * t501 + t255 * t498;
t228 = -pkin(4) * t347 + pkin(7) * t295 + t238;
t227 = -t567 * t275 + (qJ(4) * t497 + t526) * t281;
t226 = t238 * t495 - t564;
t225 = t238 * t494 + t563;
t224 = t226 * t500 - t340 * t497;
t223 = t226 * t497 + t340 * t500;
t222 = pkin(2) * t265 - pkin(3) * t569 - qJ(2) * t266 + qJ(4) * t280 + t269 * t495 + t291 * t494;
t221 = pkin(2) * t258 - pkin(3) * t332 - qJ(2) * t259 + qJ(4) * t277 + t264 * t495 + t278 * t494;
t220 = -pkin(3) * t225 - pkin(4) * t237;
t219 = -qJ(4) * t255 - t228 * t494 + t231 * t495;
t218 = pkin(2) * t279 - t235 * t497 - t239 * t500 - t567 * t266;
t217 = pkin(2) * t276 - t232 * t497 - t236 * t500 - t567 * t259;
t216 = -pkin(7) * t563 - qJ(4) * t225 - t234 * t494;
t215 = t223 * t498 + t225 * t501;
t214 = -t223 * t501 + t225 * t498;
t213 = pkin(2) * t248 - pkin(3) * t347 - qJ(2) * t249 + qJ(4) * t257 + t228 * t495 + t231 * t494;
t212 = pkin(2) * t255 - t219 * t497 - t243 * t500 - t567 * t249;
t211 = pkin(2) * t223 + pkin(3) * t340 - pkin(7) * t564 - qJ(2) * t224 + qJ(4) * t226 + t234 * t495;
t210 = pkin(2) * t225 - t216 * t497 - t220 * t500 - t567 * t224;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t472, -t471, 0, t429, 0, 0, 0, 0, 0, 0, 0, t472, t471, t396, 0, 0, 0, 0, 0, 0, t397, t398, t426, t349, 0, 0, 0, 0, 0, 0, t303, t309, t297, t252, 0, 0, 0, 0, 0, 0, t242, t245, t230, t215; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t471, -t472, 0, t428, 0, 0, 0, 0, 0, 0, 0, -t471, t472, t393, 0, 0, 0, 0, 0, 0, t394, t395, t425, t348, 0, 0, 0, 0, 0, 0, t302, t308, t296, t251, 0, 0, 0, 0, 0, 0, t241, t244, t229, t214; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t435, t436, 0, t382, 0, 0, 0, 0, 0, 0, t339, t346, t322, t275, 0, 0, 0, 0, 0, 0, t259, t266, t249, t224; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t471, 0, -t472, 0, -t516, -t515, -t428, -pkin(5) * t428, 0, -t471, t472, 0, 0, 0, -t393, t516, t515, -pkin(5) * t393 + (-pkin(1) * t498 + qJ(2) * t501) * g(3), -t441 * t498 + t517, -t421 * t498 + t474 * t501, -t433 * t498 + t500 * t532, -t440 * t498 - t517, -t431 * t498 - t497 * t532, qJDD(3) * t501 - t464 * t498, -pkin(5) * t394 - t351 * t498 + t365 * t501, -pkin(5) * t395 - t350 * t498 + t366 * t501, -pkin(2) * t550 - pkin(5) * t425 - t370 * t498, -pkin(5) * t348 - t314 * t498 + t331 * t501, -t364 * t498 + t391 * t501, -t342 * t498 + t354 * t501, -t343 * t498 + t373 * t501, -t363 * t498 + t389 * t501, -t345 * t498 + t375 * t501, -t384 * t498 + t401 * t501, -pkin(5) * t302 - t246 * t498 + t260 * t501, -pkin(5) * t308 - t250 * t498 + t270 * t501, -pkin(5) * t296 - t240 * t498 + t247 * t501, -pkin(5) * t251 - t227 * t498 + t233 * t501, -t273 * t498 + t284 * t501, -t253 * t498 + t254 * t501, -t267 * t498 + t287 * t501, -t272 * t498 + t283 * t501, -t268 * t498 + t288 * t501, -t304 * t498 + t310 * t501, -pkin(5) * t241 - t217 * t498 + t221 * t501, -pkin(5) * t244 - t218 * t498 + t222 * t501, -pkin(5) * t229 - t212 * t498 + t213 * t501, -pkin(5) * t214 - t210 * t498 + t211 * t501; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t472, 0, t471, 0, t515, -t516, t429, pkin(5) * t429, 0, -t472, -t471, 0, 0, 0, t396, -t515, t516, pkin(5) * t396 + (pkin(1) * t501 + qJ(2) * t498) * g(3), t441 * t501 + t518, t421 * t501 + t474 * t498, t433 * t501 + t498 * t533, t440 * t501 - t518, t431 * t501 - t497 * t534, qJDD(3) * t498 + t464 * t501, pkin(5) * t397 + t351 * t501 + t365 * t498, pkin(5) * t398 + t350 * t501 + t366 * t498, -pkin(2) * t551 + pkin(5) * t426 + t370 * t501, pkin(5) * t349 + t314 * t501 + t331 * t498, t364 * t501 + t391 * t498, t342 * t501 + t354 * t498, t343 * t501 + t373 * t498, t363 * t501 + t389 * t498, t345 * t501 + t375 * t498, t384 * t501 + t401 * t498, pkin(5) * t303 + t246 * t501 + t260 * t498, pkin(5) * t309 + t250 * t501 + t270 * t498, pkin(5) * t297 + t240 * t501 + t247 * t498, pkin(5) * t252 + t227 * t501 + t233 * t498, t273 * t501 + t284 * t498, t253 * t501 + t254 * t498, t267 * t501 + t287 * t498, t272 * t501 + t283 * t498, t268 * t501 + t288 * t498, t304 * t501 + t310 * t498, pkin(5) * t242 + t217 * t501 + t221 * t498, pkin(5) * t245 + t218 * t501 + t222 * t498, pkin(5) * t230 + t212 * t501 + t213 * t498, pkin(5) * t215 + t210 * t501 + t211 * t498; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t477, t478, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t514 - 0.2e1 * t565, -t478 + t489 + 0.2e1 * t491, pkin(1) * t449 + qJ(2) * t448, -t511 * t500, -t466 * t500 - t469 * t497, -t481 * t497 + t546, t512 * t497, t479 * t500 - t549, 0, qJ(2) * t466 - t567 * t432 - t554, qJ(2) * t469 - t567 * t434 - t553, -qJ(2) * t473 + t567 * t470 - t381, -qJ(2) * t439 - t567 * t381, t392 * t500 + t529, t356 * t500 - t422 * t497, t376 * t500 - t410 * t497, t390 * t500 - t529, t378 * t500 + t408 * t497, t402 * t500 + t467 * t497, qJ(2) * t367 - t301 * t497 + t316 * t500 - t567 * t338, qJ(2) * t374 - t305 * t497 + t341 * t500 - t567 * t344, t271 * t500 + (qJ(2) + t566) * t355 - t567 * t321, -t567 * t274 + (qJ(2) + t513) * t281, t286 * t500 + t531, t256 * t500 - t371 * t497, t289 * t500 - t337 * t497, t285 * t500 - t531, t290 * t500 - t333 * t497, t311 * t500 + t497 * t504, qJ(2) * t276 + t232 * t500 - t236 * t497 - t567 * t258, qJ(2) * t279 + t235 * t500 - t239 * t497 - t567 * t265, qJ(2) * t255 + t219 * t500 - t243 * t497 - t567 * t248, qJ(2) * t225 + t216 * t500 - t220 * t497 - t567 * t223;];
tauB_reg = t1;
