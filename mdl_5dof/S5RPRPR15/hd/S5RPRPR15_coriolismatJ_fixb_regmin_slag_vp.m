% Calculate minimal parameter regressor of coriolis matrix for
% S5RPRPR15
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta4]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x24]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:37
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RPRPR15_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR15_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR15_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRPR15_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:37:26
% EndTime: 2019-12-31 18:37:32
% DurationCPUTime: 1.98s
% Computational Cost: add. (1622->254), mult. (3560->374), div. (0->0), fcn. (3554->6), ass. (0->202)
t153 = cos(pkin(8));
t154 = sin(qJ(5));
t143 = t154 * t153;
t152 = sin(pkin(8));
t156 = cos(qJ(5));
t144 = t156 * t152;
t269 = t144 + t143;
t149 = t152 ^ 2;
t150 = t153 ^ 2;
t134 = t150 + t149;
t268 = -t143 / 0.2e1 - t144 / 0.2e1;
t145 = t156 * t153;
t236 = t154 * t152;
t112 = -t145 + t236;
t267 = -t112 / 0.2e1;
t266 = t112 / 0.2e1;
t265 = -t269 / 0.2e1;
t264 = t269 / 0.2e1;
t157 = cos(qJ(3));
t130 = t157 * t236;
t263 = t130 / 0.2e1;
t260 = t145 / 0.2e1;
t146 = -t153 * pkin(4) - pkin(3);
t259 = -t146 / 0.2e1;
t155 = sin(qJ(3));
t258 = -t155 / 0.2e1;
t257 = t155 / 0.2e1;
t256 = pkin(7) * t157;
t255 = t155 * pkin(3);
t254 = pkin(7) + qJ(4);
t158 = -pkin(1) - pkin(6);
t189 = pkin(4) * t152 - t158;
t107 = t189 * t155;
t108 = t189 * t157;
t184 = -t157 * qJ(4) + t255;
t118 = qJ(2) + t184;
t106 = t153 * t118;
t190 = -t152 * t158 + pkin(4);
t160 = -t153 * t256 + t190 * t155 + t106;
t235 = t155 * t158;
t131 = t153 * t235;
t81 = t152 * t118 + t131;
t65 = -t152 * t256 + t81;
t17 = t154 * t65 - t156 * t160;
t128 = t157 * pkin(3) + t155 * qJ(4);
t116 = t153 * t128;
t237 = t153 * t155;
t53 = pkin(7) * t237 + t190 * t157 + t116;
t250 = t156 * t53;
t238 = t152 * t155;
t233 = t157 * t158;
t132 = t153 * t233;
t92 = t152 * t128 + t132;
t70 = pkin(7) * t238 + t92;
t251 = t154 * t70;
t93 = t269 * t155;
t94 = t269 * t157;
t1 = (t250 - t251) * t155 - t17 * t157 - t107 * t94 - t108 * t93;
t253 = t1 * qJD(1);
t252 = t154 * t53;
t249 = t156 * t70;
t97 = t157 * t145 - t130;
t248 = t157 * t97;
t18 = t154 * t160 + t156 * t65;
t129 = t155 * t236;
t96 = t155 * t145 - t129;
t2 = (t249 + t252) * t155 + t18 * t157 + t107 * t97 + t108 * t96;
t247 = t2 * qJD(1);
t80 = -t152 * t235 + t106;
t246 = t80 * t157;
t245 = t81 * t157;
t203 = t152 * t233;
t91 = t116 - t203;
t9 = -t80 * t237 - t81 * t238 + (t152 * t92 + t153 * t91) * t157;
t244 = t9 * qJD(1);
t243 = t93 * t155;
t242 = t94 * t157;
t241 = t96 * t155;
t10 = t108 * t94 - t17 * t155;
t240 = t10 * qJD(1);
t11 = t108 * t97 - t18 * t155;
t239 = t11 * qJD(1);
t234 = t157 * t155;
t16 = t97 * t93 + t96 * t94;
t232 = t16 * qJD(1);
t21 = t246 + (t91 + 0.2e1 * t203) * t155;
t231 = t21 * qJD(1);
t22 = t245 + (t92 - 0.2e1 * t132) * t155;
t230 = t22 * qJD(1);
t32 = t81 * t152 + t80 * t153;
t26 = t32 * t157;
t229 = t26 * qJD(1);
t171 = t248 / 0.2e1 + t241 / 0.2e1;
t185 = t260 - t236 / 0.2e1;
t27 = t171 + t185;
t228 = t27 * qJD(1);
t169 = -t243 / 0.2e1 - t242 / 0.2e1;
t28 = t169 + t268;
t227 = t28 * qJD(1);
t226 = t32 * qJD(1);
t37 = -t242 + t243;
t225 = t37 * qJD(1);
t38 = -t241 + t248;
t224 = t38 * qJD(1);
t43 = (t264 - t268) * t155;
t223 = t43 * qJD(1);
t164 = t264 + t268;
t44 = t164 * t155;
t222 = t44 * qJD(1);
t48 = -t129 / 0.2e1 + (t267 + t260) * t155;
t221 = t48 * qJD(1);
t192 = -t145 / 0.2e1;
t49 = t112 * t258 + t155 * t192 + t129 / 0.2e1;
t220 = t49 * qJD(1);
t219 = t94 * qJD(4);
t218 = t97 * qJD(1);
t217 = t97 * qJD(4);
t216 = qJD(1) * qJ(2);
t215 = qJD(5) * t155;
t151 = t157 ^ 2;
t110 = t134 * t151;
t214 = t110 * qJD(1);
t111 = t134 * t157;
t213 = t111 * qJD(1);
t212 = t112 * qJD(3);
t104 = t112 * qJD(5);
t211 = t269 * qJD(3);
t210 = t269 * qJD(5);
t209 = t134 * qJD(3);
t141 = t155 ^ 2 - t151;
t208 = t141 * qJD(1);
t207 = t155 * qJD(1);
t206 = t155 * qJD(3);
t205 = t157 * qJD(1);
t204 = t157 * qJD(3);
t202 = qJ(2) * t207;
t201 = qJ(2) * t205;
t200 = t112 * t207;
t199 = t269 * t207;
t198 = t152 * t207;
t197 = t153 * t207;
t196 = t158 * t206;
t195 = t155 * t204;
t194 = t155 * t205;
t193 = t235 / 0.2e1;
t90 = t97 * t207;
t188 = t43 * qJD(3) + t90;
t187 = qJD(4) * t157 - qJD(2);
t186 = qJD(3) * t146 + qJD(4);
t183 = -t91 * t152 + t92 * t153;
t12 = -t158 ^ 2 * t234 + t80 * t91 + t81 * t92;
t8 = -t155 * t233 + (t92 * t257 + t245 / 0.2e1) * t153 + (t91 * t258 - t246 / 0.2e1) * t152;
t182 = t12 * qJD(1) + t8 * qJD(2);
t126 = t254 * t152;
t127 = t254 * t153;
t76 = -t154 * t126 + t156 * t127;
t161 = t108 * t265 + t76 * t257 + t97 * t259;
t172 = -t251 / 0.2e1 + t250 / 0.2e1;
t3 = t161 + t172;
t45 = t164 * t157;
t181 = t3 * qJD(1) + t45 * qJD(2);
t75 = t156 * t126 + t154 * t127;
t162 = t108 * t266 + t75 * t258 - t94 * t259;
t173 = -t252 / 0.2e1 - t249 / 0.2e1;
t4 = t162 + t173;
t46 = t263 + (t192 + t267) * t157;
t180 = t4 * qJD(1) + t46 * qJD(2);
t79 = (-0.1e1 + t134) * t234;
t179 = t8 * qJD(1) + t79 * qJD(2);
t14 = t112 * t94 - t269 * t97;
t31 = t94 ^ 2 - t97 ^ 2;
t178 = t31 * qJD(1) + t14 * qJD(3);
t39 = t112 ^ 2 - t269 ^ 2;
t177 = t14 * qJD(1) + t39 * qJD(3);
t175 = -t94 * qJD(1) - t212;
t174 = t211 + t218;
t170 = t80 * t152 / 0.2e1 - t81 * t153 / 0.2e1;
t20 = -t94 * t264 + t97 * t267;
t168 = t20 * qJD(3) - t94 * t218;
t167 = t44 * qJD(3) + t97 * qJD(5) + t90;
t165 = -t20 * qJD(1) + t112 * t211;
t119 = t134 * qJ(4);
t23 = t193 + t170;
t98 = (0.1e1 / 0.2e1 - t150 / 0.2e1 - t149 / 0.2e1) * t155;
t163 = t23 * qJD(1) + t98 * qJD(2) - t119 * qJD(3);
t159 = qJD(3) * t184 - qJD(4) * t155;
t147 = t204 / 0.2e1;
t109 = (t207 + qJD(5) / 0.2e1) * t157;
t99 = (0.1e1 + t134) * t257;
t50 = t263 + (t192 + t266) * t157;
t47 = (t268 + t265) * t157;
t30 = -t171 + t185;
t29 = -t169 + t268;
t25 = -t48 * qJD(3) + t94 * t207;
t24 = t193 - t170;
t19 = t20 * qJD(5);
t15 = t49 * qJD(3) + (-qJD(5) - t207) * t94;
t13 = t14 * qJD(5);
t7 = t8 * qJD(3);
t6 = -t161 + t172;
t5 = -t162 + t173;
t33 = [0, 0, 0, 0, qJD(2), qJ(2) * qJD(2), -t195, t141 * qJD(3), 0, 0, 0, qJ(2) * t204 + qJD(2) * t155, -qJ(2) * t206 + qJD(2) * t157, t21 * qJD(3) - t187 * t237, -t22 * qJD(3) + t187 * t238, -t111 * qJD(2) - t9 * qJD(3) + t110 * qJD(4), t32 * qJD(2) + t12 * qJD(3) - t26 * qJD(4), (-qJD(3) * t96 - t94 * qJD(5)) * t97, t16 * qJD(3) + t31 * qJD(5), t38 * qJD(3) - t215 * t94, t37 * qJD(3) - t215 * t97, t195, t1 * qJD(3) + t11 * qJD(5) + (-qJD(2) * t112 - t217) * t155, -t2 * qJD(3) - t10 * qJD(5) + (-qJD(2) * t269 + t219) * t155; 0, 0, 0, 0, qJD(1), t216, 0, 0, 0, 0, 0, t207, t205, t197, -t198, -t213, t7 + t226, 0, 0, 0, 0, 0, t30 * qJD(5) - t200, t29 * qJD(5) - t199; 0, 0, 0, 0, 0, 0, -t194, t208, -t206, -t204, 0, -t196 + t201, -t158 * t204 - t202, -t131 * qJD(3) + t152 * t159 + t231, t152 * t196 + t153 * t159 - t230, qJD(3) * t183 - t244, (-pkin(3) * t235 + qJ(4) * t183) * qJD(3) + t24 * qJD(4) + t182, -t174 * t96 + t19, t232 + (t96 * t112 + t269 * t93) * qJD(3) + t13, t49 * qJD(5) + t204 * t269 + t224, -t44 * qJD(5) - t112 * t204 + t225, t109, t253 + (-t107 * t112 - t146 * t93 - t75 * t157) * qJD(3) - t43 * qJD(4) + t6 * qJD(5), -t247 + (-t107 * t269 - t146 * t96 - t76 * t157) * qJD(3) - t48 * qJD(4) + t5 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (-qJD(3) * t152 - t153 * t205) * t155, (-qJD(3) * t153 + t152 * t205) * t155, t214, t24 * qJD(3) - t229, 0, 0, 0, 0, 0, -t188, t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t168, t178, t15, -t167, t147, t30 * qJD(2) + t6 * qJD(3) - t18 * qJD(5) + t239, t29 * qJD(2) + t5 * qJD(3) + t17 * qJD(5) - t240; 0, 0, 0, 0, -qJD(1), -t216, 0, 0, 0, 0, 0, -t207, -t205, -t197, t198, t213, t7 - t226, 0, 0, 0, 0, 0, -t27 * qJD(5) + t200, -t28 * qJD(5) + t199; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79 * qJD(3), 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t206, -t204, -t153 * t206, t152 * t206, t111 * qJD(3), (qJ(4) * t111 - t255) * qJD(3) + t99 * qJD(4) + t179, 0, 0, 0, 0, 0, t47 * qJD(5) + t112 * t206, t50 * qJD(5) + t206 * t269; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99 * qJD(3), 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47 * qJD(3) - t96 * qJD(5) - t228, t50 * qJD(3) + t93 * qJD(5) - t227; 0, 0, 0, 0, 0, 0, t194, -t208, 0, 0, 0, -t201, t202, -t231, t230, t244, -t23 * qJD(4) - t182, t96 * t218 + t19, t13 - t232, t48 * qJD(5) - t224, -t43 * qJD(5) - t225, -t109, -t44 * qJD(4) - t3 * qJD(5) - t253, -t49 * qJD(4) - t4 * qJD(5) + t247; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t98 * qJD(4) - t179, 0, 0, 0, 0, 0, -t45 * qJD(5), -t46 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t134 * qJD(4), t119 * qJD(4), -t112 * t210, t39 * qJD(5), 0, 0, 0, t146 * t210, -t146 * t104; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t209, -t163, 0, 0, 0, 0, 0, -t222, -t220; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t165, t177, -t104 + t221, -t210 - t223, -t205 / 0.2e1, -t76 * qJD(5) + t146 * t211 - t181, t75 * qJD(5) - t146 * t212 - t180; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t153 * t194, -t152 * t194, -t214, t23 * qJD(3) + t229, 0, 0, 0, 0, 0, t167, t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t98 * qJD(3), 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t209, t163, 0, 0, 0, 0, 0, t210 + t222, -t104 + t220; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t174, t175; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t168, -t178, t25, t188, t147, t27 * qJD(2) + t3 * qJD(3) - t217 - t239, t28 * qJD(2) + t4 * qJD(3) + t219 + t240; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t45 * qJD(3) + t228, t46 * qJD(3) + t227; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t165, -t177, -t221, t223, t205 / 0.2e1, -t186 * t269 + t181, t112 * t186 + t180; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t174, -t175; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t33;
