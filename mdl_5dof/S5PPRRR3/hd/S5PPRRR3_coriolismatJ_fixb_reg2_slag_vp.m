% Calculate inertial parameters regressor of coriolis matrix for
% S5PPRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d4,d5,theta1,theta2]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:17
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PPRRR3_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRRR3_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRRR3_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PPRRR3_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:17:05
% EndTime: 2019-12-05 15:17:11
% DurationCPUTime: 2.25s
% Computational Cost: add. (2534->168), mult. (6931->282), div. (0->0), fcn. (7666->8), ass. (0->144)
t253 = qJD(4) + qJD(5);
t213 = cos(qJ(4));
t307 = -pkin(7) - pkin(6);
t193 = t307 * t213;
t210 = sin(qJ(5));
t211 = sin(qJ(4));
t297 = cos(qJ(5));
t249 = t297 * t211;
t232 = -t210 * t193 - t307 * t249;
t303 = t232 / 0.2e1;
t214 = cos(qJ(3));
t248 = t297 * t213;
t277 = t210 * t211;
t221 = t248 / 0.2e1 - t277 / 0.2e1;
t225 = t248 - t277;
t299 = -t225 / 0.2e1;
t216 = t299 + t221;
t119 = t216 * t214;
t208 = sin(pkin(9));
t212 = sin(qJ(3));
t279 = t208 * t212;
t87 = t216 * t279;
t287 = -t87 * qJD(1) + t119 * qJD(2);
t313 = t253 * t232 + t287;
t209 = cos(pkin(9));
t271 = t214 * t211;
t172 = t208 * t271 + t209 * t213;
t278 = t208 * t214;
t173 = -t209 * t211 + t213 * t278;
t233 = t297 * t172 + t210 * t173;
t241 = -t279 / 0.2e1;
t88 = t221 * t279 - t225 * t241;
t312 = t88 * qJD(3) + t253 * t233;
t108 = -t210 * t172 + t297 * t173;
t276 = t210 * t213;
t184 = t249 + t276;
t222 = t276 / 0.2e1 + t249 / 0.2e1;
t240 = t279 / 0.2e1;
t89 = t184 * t240 + t222 * t279;
t311 = t89 * qJD(3) - t253 * t108;
t140 = -t297 * t193 + t307 * t277;
t217 = -t184 / 0.2e1 + t222;
t118 = t217 * t214;
t86 = t217 * t279;
t286 = -t86 * qJD(1) + t118 * qJD(2);
t310 = -t253 * t140 + t286;
t305 = t233 / 0.2e1;
t306 = -t108 / 0.2e1;
t304 = t108 / 0.2e1;
t302 = -t140 / 0.2e1;
t275 = t211 * t212;
t168 = -t210 * t275 + t212 * t248;
t300 = t168 / 0.2e1;
t298 = t210 / 0.2e1;
t296 = pkin(4) * t210;
t295 = pkin(4) * t211;
t238 = t304 + t306;
t239 = -t233 / 0.2e1 + t305;
t14 = -t238 * t184 + t225 * t239;
t294 = t14 * qJD(4);
t291 = qJD(4) * pkin(4);
t274 = t212 * t213;
t166 = -t210 * t274 - t212 * t249;
t7 = t238 * t166 + t239 * t168;
t290 = t7 * qJD(1);
t285 = t14 * qJD(3);
t280 = t225 * t184;
t203 = t212 * t214;
t273 = t212 ^ 2 * t208;
t272 = t214 * t184;
t206 = t211 ^ 2;
t207 = t213 ^ 2;
t268 = t206 + t207;
t205 = -t213 * pkin(4) - pkin(3);
t267 = qJD(3) * t205;
t266 = qJD(3) * t208;
t265 = qJD(3) * t213;
t264 = qJD(5) * t205;
t102 = -t184 ^ 2 + t225 ^ 2;
t263 = t102 * qJD(3);
t116 = t205 * t184 - t225 * t295;
t262 = t116 * qJD(3);
t117 = t184 * t295 + t205 * t225;
t261 = t117 * qJD(3);
t201 = t207 - t206;
t258 = t201 * qJD(3);
t257 = t211 * qJD(4);
t256 = t212 * qJD(3);
t255 = t213 * qJD(4);
t254 = t214 * qJD(3);
t252 = t297 / 0.2e1;
t251 = pkin(3) * t211 * qJD(3);
t250 = pkin(3) * t265;
t247 = qJD(3) * t280;
t246 = t225 * t267;
t245 = t184 * t267;
t244 = t211 * t255;
t243 = t208 * t256;
t242 = t208 * t254;
t237 = t297 * qJD(4);
t236 = t297 * qJD(5);
t235 = t268 * t212;
t234 = t268 * t214;
t130 = t253 * t184;
t231 = t7 * qJD(2);
t143 = t184 * t279;
t144 = t225 * t279;
t169 = t225 * t214;
t10 = -t144 * t300 + t169 * t304 + t143 * t166 / 0.2e1 + t272 * t305 + t273 / 0.2e1 - t214 ^ 2 * t208 / 0.2e1;
t194 = t208 ^ 2 * t203;
t21 = -t108 * t144 - t143 * t233 + t194;
t230 = t21 * qJD(1) + t10 * qJD(2);
t34 = -t166 * t272 + t168 * t169 - t203;
t229 = t10 * qJD(1) + t34 * qJD(2);
t35 = (-t173 * t213 / 0.2e1 - t172 * t211 / 0.2e1 + t278 / 0.2e1) * t214 + (t207 / 0.2e1 + t206 / 0.2e1 - 0.1e1 / 0.2e1) * t273;
t54 = -t194 + (t172 * t275 + t173 * t274) * t208;
t228 = -t54 * qJD(1) - t35 * qJD(2);
t227 = t14 * qJD(1);
t142 = t212 * t234 - t203;
t226 = t35 * qJD(1) - t142 * qJD(2);
t224 = t143 * t252 - t144 * t298;
t223 = t169 * t298 - t252 * t272;
t220 = t212 * t257 - t213 * t254;
t219 = t211 * t254 + t212 * t255;
t215 = t108 * t303 - t140 * t305 + t232 * t306 - t233 * t302;
t2 = (t211 * t241 + t224) * pkin(4) + t215;
t30 = t205 * t295;
t8 = (t303 - t232 / 0.2e1) * t168 + (t302 + t140 / 0.2e1) * t166 + (t271 / 0.2e1 + t223) * pkin(4);
t218 = -t2 * qJD(1) - t8 * qJD(2) + t30 * qJD(3);
t202 = t211 * t265;
t129 = t253 * t225;
t121 = -t272 / 0.2e1 - t222 * t214;
t120 = (-t221 + t299) * t214;
t111 = t119 * qJD(3);
t109 = t118 * qJD(3);
t72 = t87 * qJD(3);
t70 = t86 * qJD(3);
t37 = t121 * qJD(3) - t253 * t168;
t36 = t120 * qJD(3) - t253 * t166;
t28 = t35 * qJD(3);
t9 = -t232 * t300 + t168 * t303 + (-t271 / 0.2e1 + t223) * pkin(4);
t3 = t224 * pkin(4) + t240 * t295 - t215;
t1 = t10 * qJD(3) + t7 * qJD(4);
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t54 * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t21 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t28, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t242, t243, 0, 0, 0, 0, 0, 0, 0, 0, t220 * t208, t219 * t208, -t235 * t266, (-pkin(3) * t214 - pkin(6) * t235) * t266 + t228, 0, 0, 0, 0, 0, 0, -t225 * t242 + t253 * t89, t184 * t242 + t253 * t88, (-t143 * t184 - t144 * t225) * qJD(3) + t294, (-t144 * t140 - t143 * t232 + t205 * t278) * qJD(3) + t3 * qJD(4) + t230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t173 * qJD(4) + t211 * t243, t172 * qJD(4) + t213 * t243, 0, 0, 0, 0, 0, 0, 0, 0, t311, t312, t285, t3 * qJD(3) + (-t108 * t297 - t210 * t233) * t291 + t231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t311, t312, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t28, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t142 * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t34 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t256, -t254, 0, 0, 0, 0, 0, 0, 0, 0, -t213 * t256 - t214 * t257, t211 * t256 - t214 * t255, qJD(3) * t234, (-t212 * pkin(3) + pkin(6) * t234) * qJD(3) - t226, 0, 0, 0, 0, 0, 0, t253 * t121 - t225 * t256, t253 * t120 + t184 * t256, (t169 * t225 + t184 * t272) * qJD(3), (t169 * t140 + t212 * t205 + t232 * t272) * qJD(3) + t9 * qJD(4) + t229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t219, t220, 0, 0, 0, 0, 0, 0, 0, 0, t37, t36, 0, t290 + t9 * qJD(3) + (t166 * t210 - t297 * t168) * t291; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, t36, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t228, 0, 0, 0, 0, 0, 0, -t253 * t86, -t253 * t87, t294, -t2 * qJD(4) - t230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t226, 0, 0, 0, 0, 0, 0, t253 * t118, t253 * t119, 0, -t8 * qJD(4) - t229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t244, t201 * qJD(4), 0, -t244, 0, 0, -pkin(3) * t257, -pkin(3) * t255, 0, 0, t225 * t130, t253 * t102, 0, -t253 * t280, 0, 0, t116 * qJD(4) + t184 * t264, t117 * qJD(4) + t225 * t264, 0, t30 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t202, t258, t255, -t202, -t257, 0, -pkin(6) * t255 - t251, pkin(6) * t257 - t250, 0, 0, t247, t263, t129, -t247, -t130, 0, t262 + t310, t261 + t313, (-t184 * t210 - t225 * t297) * t291 + t227, (-t140 * t297 - t210 * t232) * t291 + t218; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t247, t263, t129, -t247, -t130, 0, t245 + t310, t246 + t313, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, t72, -t285, t2 * qJD(3) - t231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t109, -t111, 0, t8 * qJD(3) - t290; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t202, -t258, 0, t202, 0, 0, t251, t250, 0, 0, -t247, -t263, 0, t247, 0, 0, -t262 - t286, -t261 - t287, -t227, -t218; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(5) * t296, -pkin(4) * t236, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t253 * t296, (-t237 - t236) * pkin(4), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, t72, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t109, -t111, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t247, -t263, 0, t247, 0, 0, -t245 - t286, -t246 - t287, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t210 * t291, pkin(4) * t237, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t4;
