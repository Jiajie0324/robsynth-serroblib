% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PPRRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d4,d5,theta1,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:17
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PPRRR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRRR3_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRRR3_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRRR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRRR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PPRRR3_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:17:24
% EndTime: 2019-12-05 15:17:25
% DurationCPUTime: 1.73s
% Computational Cost: add. (5753->182), mult. (10857->244), div. (0->0), fcn. (7958->10), ass. (0->143)
t1037 = qJD(4) + qJD(5);
t1077 = qJD(5) + t1037;
t1076 = qJD(3) ^ 2;
t1046 = sin(qJ(5));
t1049 = cos(qJ(5));
t1050 = cos(qJ(4));
t1069 = qJD(3) * t1050;
t1047 = sin(qJ(4));
t1070 = qJD(3) * t1047;
t1005 = t1046 * t1070 - t1049 * t1069;
t1075 = t1005 ^ 2;
t1007 = (t1046 * t1050 + t1047 * t1049) * qJD(3);
t1074 = t1007 ^ 2;
t1073 = t1037 ^ 2;
t1072 = -g(3) + qJDD(1);
t1042 = sin(pkin(8));
t1044 = cos(pkin(8));
t1023 = -t1044 * g(1) - t1042 * g(2);
t1041 = sin(pkin(9));
t1043 = cos(pkin(9));
t1002 = t1041 * t1023 - t1043 * t1072;
t1003 = t1043 * t1023 + t1041 * t1072;
t1022 = t1042 * g(1) - t1044 * g(2);
t1017 = -qJDD(2) + t1022;
t1048 = sin(qJ(3));
t1051 = cos(qJ(3));
t986 = t1051 * t1003 - t1048 * t1017;
t980 = -t1076 * pkin(3) + qJDD(3) * pkin(6) + t986;
t968 = t1047 * t1002 + t1050 * t980;
t1038 = t1047 ^ 2;
t1039 = t1050 ^ 2;
t1060 = t1038 + t1039;
t1018 = t1060 * qJDD(3);
t1021 = t1060 * t1076;
t992 = t1051 * t1018 - t1048 * t1021;
t1071 = t1043 * t992;
t1068 = t1007 * t1005;
t1067 = t1039 * t1076;
t1066 = t1041 * t1002;
t1019 = t1048 * qJDD(3) + t1051 * t1076;
t1065 = t1043 * t1019;
t1020 = t1051 * qJDD(3) - t1048 * t1076;
t1064 = t1043 * t1020;
t1063 = t1044 * t1019;
t1062 = t1044 * t1020;
t1061 = qJD(5) - t1037;
t1059 = t1047 * qJDD(3);
t1029 = t1047 * t1076 * t1050;
t1024 = qJDD(4) + t1029;
t1058 = -qJDD(4) - qJDD(5);
t1057 = qJD(4) * t1070;
t1056 = qJD(4) * t1069;
t967 = t1050 * t1002 - t1047 * t980;
t985 = -t1048 * t1003 - t1051 * t1017;
t1015 = t1056 + t1059;
t1034 = t1050 * qJDD(3);
t1054 = -t1034 + t1057;
t1055 = -t1046 * t1015 - t1049 * t1054;
t979 = -qJDD(3) * pkin(3) - t1076 * pkin(6) - t985;
t1053 = -t1049 * t1015 + t1046 * t1054;
t1052 = qJD(4) ^ 2;
t1028 = -t1052 - t1067;
t1027 = -t1038 * t1076 - t1052;
t1026 = qJD(4) * pkin(4) - pkin(7) * t1070;
t1025 = -qJDD(4) + t1029;
t1016 = t1034 - 0.2e1 * t1057;
t1014 = 0.2e1 * t1056 + t1059;
t1012 = t1041 * t1019;
t1011 = t1041 * t1020;
t998 = -t1073 - t1074;
t997 = t1050 * t1025 - t1047 * t1027;
t996 = -t1047 * t1024 + t1050 * t1028;
t995 = t1047 * t1025 + t1050 * t1027;
t994 = t1050 * t1024 + t1047 * t1028;
t993 = t1043 * t1002;
t991 = t1048 * t1018 + t1051 * t1021;
t990 = t1041 * t992;
t989 = t1058 - t1068;
t988 = -t1058 - t1068;
t987 = -t1073 - t1075;
t984 = t1048 * t1014 + t1051 * t997;
t983 = -t1048 * t1016 + t1051 * t996;
t982 = -t1051 * t1014 + t1048 * t997;
t981 = t1051 * t1016 + t1048 * t996;
t978 = -t1074 - t1075;
t976 = t1043 * t1003 + t1066;
t975 = t1041 * t1003 - t993;
t974 = -t1046 * t998 + t1049 * t989;
t973 = t1046 * t989 + t1049 * t998;
t972 = t1061 * t1005 + t1053;
t971 = -t1077 * t1005 - t1053;
t970 = -t1061 * t1007 + t1055;
t969 = t1077 * t1007 - t1055;
t966 = t1041 * t995 + t1043 * t984;
t965 = t1041 * t994 + t1043 * t983;
t964 = t1041 * t984 - t1043 * t995;
t963 = t1041 * t983 - t1043 * t994;
t962 = t1054 * pkin(4) - pkin(7) * t1067 + t1026 * t1070 + t979;
t961 = -t1046 * t988 + t1049 * t987;
t960 = t1046 * t987 + t1049 * t988;
t959 = -t1048 * t985 + t1051 * t986;
t958 = t1048 * t986 + t1051 * t985;
t957 = -pkin(4) * t1067 - t1054 * pkin(7) - qJD(4) * t1026 + t968;
t956 = (-t1015 + t1056) * pkin(7) + t1024 * pkin(4) + t967;
t955 = t1043 * t959 + t1066;
t954 = t1041 * t959 - t993;
t953 = -t1047 * t973 + t1050 * t974;
t952 = t1047 * t974 + t1050 * t973;
t951 = -t1046 * t972 + t1049 * t970;
t950 = t1046 * t970 + t1049 * t972;
t949 = -t1047 * t967 + t1050 * t968;
t948 = t1047 * t968 + t1050 * t967;
t947 = -t1047 * t960 + t1050 * t961;
t946 = t1047 * t961 + t1050 * t960;
t945 = t1048 * t979 + t1051 * t949;
t944 = t1048 * t949 - t1051 * t979;
t943 = t1048 * t971 + t1051 * t953;
t942 = t1048 * t953 - t1051 * t971;
t941 = t1046 * t956 + t1049 * t957;
t940 = -t1046 * t957 + t1049 * t956;
t939 = t1048 * t969 + t1051 * t947;
t938 = t1048 * t947 - t1051 * t969;
t937 = -t1047 * t950 + t1050 * t951;
t936 = t1047 * t951 + t1050 * t950;
t935 = t1048 * t978 + t1051 * t937;
t934 = t1048 * t937 - t1051 * t978;
t933 = t1041 * t952 + t1043 * t943;
t932 = t1041 * t943 - t1043 * t952;
t931 = t1041 * t948 + t1043 * t945;
t930 = t1041 * t945 - t1043 * t948;
t929 = t1041 * t946 + t1043 * t939;
t928 = t1041 * t939 - t1043 * t946;
t927 = -t1046 * t940 + t1049 * t941;
t926 = t1046 * t941 + t1049 * t940;
t925 = t1041 * t936 + t1043 * t935;
t924 = t1041 * t935 - t1043 * t936;
t923 = -t1047 * t926 + t1050 * t927;
t922 = t1047 * t927 + t1050 * t926;
t921 = t1048 * t962 + t1051 * t923;
t920 = t1048 * t923 - t1051 * t962;
t919 = t1041 * t922 + t1043 * t921;
t918 = t1041 * t921 - t1043 * t922;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1042 * t1022 + t1044 * t1023, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1042 * t1017 + t1044 * t976, 0, 0, 0, 0, 0, 0, t1042 * t1020 - t1043 * t1063, -t1042 * t1019 - t1043 * t1062, 0, t1042 * t958 + t1044 * t955, 0, 0, 0, 0, 0, 0, t1042 * t981 + t1044 * t965, t1042 * t982 + t1044 * t966, t1042 * t991 + t1044 * t1071, t1042 * t944 + t1044 * t931, 0, 0, 0, 0, 0, 0, t1042 * t938 + t1044 * t929, t1042 * t942 + t1044 * t933, t1042 * t934 + t1044 * t925, t1042 * t920 + t1044 * t919; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1044 * t1022 + t1042 * t1023, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1044 * t1017 + t1042 * t976, 0, 0, 0, 0, 0, 0, -t1042 * t1065 - t1062, -t1042 * t1064 + t1063, 0, t1042 * t955 - t1044 * t958, 0, 0, 0, 0, 0, 0, t1042 * t965 - t1044 * t981, t1042 * t966 - t1044 * t982, t1042 * t1071 - t1044 * t991, t1042 * t931 - t1044 * t944, 0, 0, 0, 0, 0, 0, t1042 * t929 - t1044 * t938, t1042 * t933 - t1044 * t942, t1042 * t925 - t1044 * t934, t1042 * t919 - t1044 * t920; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1072, 0, 0, 0, 0, 0, 0, 0, 0, 0, t975, 0, 0, 0, 0, 0, 0, -t1012, -t1011, 0, t954, 0, 0, 0, 0, 0, 0, t963, t964, t990, t930, 0, 0, 0, 0, 0, 0, t928, t932, t924, t918; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1023, 0, 0, 0, 0, 0, 0, 0, 0, 0, t976, 0, 0, 0, 0, 0, 0, -t1065, -t1064, 0, t955, 0, 0, 0, 0, 0, 0, t965, t966, t1071, t931, 0, 0, 0, 0, 0, 0, t929, t933, t925, t919; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1022, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1017, 0, 0, 0, 0, 0, 0, -t1020, t1019, 0, -t958, 0, 0, 0, 0, 0, 0, -t981, -t982, -t991, -t944, 0, 0, 0, 0, 0, 0, -t938, -t942, -t934, -t920; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1072, 0, 0, 0, 0, 0, 0, 0, 0, 0, t975, 0, 0, 0, 0, 0, 0, -t1012, -t1011, 0, t954, 0, 0, 0, 0, 0, 0, t963, t964, t990, t930, 0, 0, 0, 0, 0, 0, t928, t932, t924, t918; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1003, 0, 0, 0, 0, 0, 0, -t1019, -t1020, 0, t959, 0, 0, 0, 0, 0, 0, t983, t984, t992, t945, 0, 0, 0, 0, 0, 0, t939, t943, t935, t921; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1002, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1002, 0, 0, 0, 0, 0, 0, -t994, -t995, 0, -t948, 0, 0, 0, 0, 0, 0, -t946, -t952, -t936, -t922; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1017, 0, 0, 0, 0, 0, 0, t1020, -t1019, 0, t958, 0, 0, 0, 0, 0, 0, t981, t982, t991, t944, 0, 0, 0, 0, 0, 0, t938, t942, t934, t920; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1076, -qJDD(3), 0, t986, 0, 0, 0, 0, 0, 0, t996, t997, t1018, t949, 0, 0, 0, 0, 0, 0, t947, t953, t937, t923; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t1076, 0, t985, 0, 0, 0, 0, 0, 0, t1016, -t1014, t1021, -t979, 0, 0, 0, 0, 0, 0, -t969, -t971, -t978, -t962; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1002, 0, 0, 0, 0, 0, 0, t994, t995, 0, t948, 0, 0, 0, 0, 0, 0, t946, t952, t936, t922; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1028, t1025, t1034, t968, 0, 0, 0, 0, 0, 0, t961, t974, t951, t927; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1024, t1027, -t1059, t967, 0, 0, 0, 0, 0, 0, t960, t973, t950, t926; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1016, t1014, -t1021, t979, 0, 0, 0, 0, 0, 0, t969, t971, t978, t962; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t987, t989, t970, t941; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t988, t998, t972, t940; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t969, t971, t978, t962;];
f_new_reg = t1;
