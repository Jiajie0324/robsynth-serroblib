% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PPRPR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d5,theta1,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:32
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PPRPR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRPR4_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRPR4_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRPR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRPR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PPRPR4_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:32:37
% EndTime: 2019-12-31 17:32:38
% DurationCPUTime: 1.27s
% Computational Cost: add. (2807->155), mult. (6019->183), div. (0->0), fcn. (4283->8), ass. (0->100)
t814 = qJD(3) ^ 2;
t805 = sin(pkin(8));
t800 = t805 ^ 2;
t807 = cos(pkin(8));
t801 = t807 ^ 2;
t824 = t800 + t801;
t782 = t824 * t814;
t809 = sin(qJ(5));
t811 = cos(qJ(5));
t817 = t805 * t811 + t807 * t809;
t768 = t817 * qJDD(3);
t769 = (t805 * t809 - t807 * t811) * qJD(3);
t831 = t769 ^ 2;
t771 = t817 * qJD(3);
t830 = t771 ^ 2;
t829 = t771 * t769;
t828 = t800 * t814;
t827 = t801 * t814;
t826 = t807 * t814;
t806 = sin(pkin(7));
t808 = cos(pkin(7));
t785 = t806 * g(1) - t808 * g(2);
t780 = -qJDD(2) + t785;
t786 = -t808 * g(1) - t806 * g(2);
t810 = sin(qJ(3));
t812 = cos(qJ(3));
t760 = -t810 * t780 + t812 * t786;
t803 = g(3) - qJDD(1);
t823 = qJD(3) * qJD(4);
t825 = t807 * t803 - 0.2e1 * t805 * t823;
t822 = t805 * qJDD(3);
t798 = t807 * qJDD(3);
t821 = t810 * qJDD(3);
t820 = t812 * qJDD(3);
t754 = -t814 * pkin(3) + qJDD(3) * qJ(4) + t760;
t747 = t805 * t803 + (t754 + 0.2e1 * t823) * t807;
t759 = -t812 * t780 - t810 * t786;
t783 = t812 * t814 + t821;
t784 = t810 * t814 - t820;
t819 = -t806 * t783 + t808 * t784;
t745 = t811 * t798 - t809 * t822;
t818 = t808 * t783 + t806 * t784;
t750 = -qJDD(3) * pkin(3) - t814 * qJ(4) + qJDD(4) - t759;
t813 = qJD(5) ^ 2;
t787 = t805 * t826;
t781 = t824 * qJDD(3);
t778 = t808 * t786;
t777 = t806 * t786;
t776 = t807 * t782;
t775 = t805 * t782;
t765 = -t813 - t830;
t764 = -t812 * t776 - t807 * t821;
t763 = t812 * t775 + t805 * t821;
t762 = -t810 * t776 + t807 * t820;
t761 = t810 * t775 - t805 * t820;
t758 = t812 * t781 - t810 * t782;
t757 = t810 * t781 + t812 * t782;
t756 = -0.2e1 * t769 * qJD(5) + t768;
t755 = 0.2e1 * t771 * qJD(5) - t745;
t753 = -qJDD(5) - t829;
t752 = qJDD(5) - t829;
t751 = -t813 - t831;
t748 = -t830 - t831;
t746 = -t805 * t754 + t825;
t744 = -pkin(4) * t798 + t750 + (-t827 - t828) * pkin(6);
t743 = t811 * t753 - t809 * t765;
t742 = t809 * t753 + t811 * t765;
t741 = -t810 * t759 + t812 * t760;
t740 = t812 * t759 + t810 * t760;
t739 = -pkin(4) * t827 + pkin(6) * t798 + t747;
t738 = (pkin(4) * t826 - pkin(6) * qJDD(3) - t754) * t805 + t825;
t737 = t811 * t745 + t809 * t768;
t736 = t809 * t745 - t811 * t768;
t735 = t811 * t751 - t809 * t752;
t734 = t809 * t751 + t811 * t752;
t733 = -t805 * t746 + t807 * t747;
t732 = t807 * t746 + t805 * t747;
t731 = -t805 * t742 + t807 * t743;
t730 = t807 * t742 + t805 * t743;
t729 = t809 * t738 + t811 * t739;
t728 = t811 * t738 - t809 * t739;
t727 = t812 * t733 + t810 * t750;
t726 = t810 * t733 - t812 * t750;
t725 = -t805 * t736 + t807 * t737;
t724 = t807 * t736 + t805 * t737;
t723 = -t805 * t734 + t807 * t735;
t722 = t807 * t734 + t805 * t735;
t721 = t812 * t731 + t810 * t756;
t720 = t810 * t731 - t812 * t756;
t719 = t812 * t723 + t810 * t755;
t718 = t810 * t723 - t812 * t755;
t717 = t812 * t725 + t810 * t748;
t716 = t810 * t725 - t812 * t748;
t715 = -t809 * t728 + t811 * t729;
t714 = t811 * t728 + t809 * t729;
t713 = -t805 * t714 + t807 * t715;
t712 = t807 * t714 + t805 * t715;
t711 = t812 * t713 + t810 * t744;
t710 = t810 * t713 - t812 * t744;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t806 * t785 + t778, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t806 * t780 + t778, 0, 0, 0, 0, 0, 0, -t818, t819, 0, t806 * t740 + t808 * t741, 0, 0, 0, 0, 0, 0, t806 * t762 + t808 * t764, t806 * t761 + t808 * t763, t806 * t757 + t808 * t758, t806 * t726 + t808 * t727, 0, 0, 0, 0, 0, 0, t806 * t718 + t808 * t719, t806 * t720 + t808 * t721, t806 * t716 + t808 * t717, t806 * t710 + t808 * t711; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t808 * t785 + t777, 0, 0, 0, 0, 0, 0, 0, 0, 0, t808 * t780 + t777, 0, 0, 0, 0, 0, 0, t819, t818, 0, -t808 * t740 + t806 * t741, 0, 0, 0, 0, 0, 0, -t808 * t762 + t806 * t764, -t808 * t761 + t806 * t763, -t808 * t757 + t806 * t758, -t808 * t726 + t806 * t727, 0, 0, 0, 0, 0, 0, -t808 * t718 + t806 * t719, -t808 * t720 + t806 * t721, -t808 * t716 + t806 * t717, -t808 * t710 + t806 * t711; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t803, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t803, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t803, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t732, 0, 0, 0, 0, 0, 0, -t722, -t730, -t724, -t712; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t786, 0, 0, 0, 0, 0, 0, 0, 0, 0, t786, 0, 0, 0, 0, 0, 0, -t783, t784, 0, t741, 0, 0, 0, 0, 0, 0, t764, t763, t758, t727, 0, 0, 0, 0, 0, 0, t719, t721, t717, t711; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t785, 0, 0, 0, 0, 0, 0, 0, 0, 0, t780, 0, 0, 0, 0, 0, 0, t784, t783, 0, -t740, 0, 0, 0, 0, 0, 0, -t762, -t761, -t757, -t726, 0, 0, 0, 0, 0, 0, -t718, -t720, -t716, -t710; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t803, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t803, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t803, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t732, 0, 0, 0, 0, 0, 0, -t722, -t730, -t724, -t712; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t786, 0, 0, 0, 0, 0, 0, -t783, t784, 0, t741, 0, 0, 0, 0, 0, 0, t764, t763, t758, t727, 0, 0, 0, 0, 0, 0, t719, t721, t717, t711; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t803, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t803, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t732, 0, 0, 0, 0, 0, 0, -t722, -t730, -t724, -t712; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t780, 0, 0, 0, 0, 0, 0, -t784, -t783, 0, t740, 0, 0, 0, 0, 0, 0, t762, t761, t757, t726, 0, 0, 0, 0, 0, 0, t718, t720, t716, t710; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t814, -qJDD(3), 0, t760, 0, 0, 0, 0, 0, 0, -t776, t775, t781, t733, 0, 0, 0, 0, 0, 0, t723, t731, t725, t713; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t814, 0, t759, 0, 0, 0, 0, 0, 0, t798, -t822, t782, -t750, 0, 0, 0, 0, 0, 0, -t755, -t756, -t748, -t744; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t803, 0, 0, 0, 0, 0, 0, 0, 0, 0, t732, 0, 0, 0, 0, 0, 0, t722, t730, t724, t712; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t827, t787, t798, t747, 0, 0, 0, 0, 0, 0, t735, t743, t737, t715; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t787, -t828, -t822, t746, 0, 0, 0, 0, 0, 0, t734, t742, t736, t714; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t798, t822, -t782, t750, 0, 0, 0, 0, 0, 0, t755, t756, t748, t744; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t751, t753, t745, t729; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t752, t765, -t768, t728; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t755, t756, t748, t744;];
f_new_reg = t1;
