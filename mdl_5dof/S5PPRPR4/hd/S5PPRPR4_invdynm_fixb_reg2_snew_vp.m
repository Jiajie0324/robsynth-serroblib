% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PPRPR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d5,theta1,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:32
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PPRPR4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRPR4_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRPR4_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRPR4_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRPR4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PPRPR4_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:32:31
% EndTime: 2019-12-31 17:32:37
% DurationCPUTime: 5.84s
% Computational Cost: add. (17202->446), mult. (36489->533), div. (0->0), fcn. (25433->8), ass. (0->261)
t619 = cos(qJ(3));
t617 = sin(qJ(3));
t659 = t617 * qJDD(3);
t689 = qJD(3) ^ 2;
t584 = t619 * t689 + t659;
t610 = g(3) - qJDD(1);
t558 = pkin(5) * t584 + t619 * t610;
t613 = sin(pkin(7));
t615 = cos(pkin(7));
t658 = t619 * qJDD(3);
t585 = t617 * t689 - t658;
t646 = pkin(5) * t585 + t617 * t610;
t696 = t615 * t584 + t613 * t585;
t709 = -qJ(1) * t696 + t615 * t558 + t613 * t646;
t616 = sin(qJ(5));
t612 = sin(pkin(8));
t614 = cos(pkin(8));
t618 = cos(qJ(5));
t567 = (t612 * t616 - t614 * t618) * qJD(3);
t642 = t612 * t618 + t614 * t616;
t569 = t642 * qJD(3);
t535 = t569 * t567;
t695 = qJDD(5) - t535;
t708 = t616 * t695;
t707 = t618 * t695;
t587 = t615 * g(1) + t613 * g(2);
t586 = t613 * g(1) - t615 * g(2);
t648 = qJDD(2) - t586;
t543 = -t619 * t587 + t617 * t648;
t649 = -t689 * pkin(3) + qJDD(3) * qJ(4) + 0.2e1 * qJD(3) * qJD(4) + t543;
t706 = pkin(6) * qJDD(3) + t649;
t542 = -t617 * t587 - t619 * t648;
t502 = t619 * t542 - t617 * t543;
t645 = t617 * t542 + t619 * t543;
t705 = t502 * t613 - t615 * t645;
t704 = t502 * t615 + t613 * t645;
t540 = -t613 * t584 + t615 * t585;
t703 = qJ(1) * t540 + t613 * t558 - t615 * t646;
t608 = t612 ^ 2;
t622 = t614 ^ 2;
t694 = t689 * (t608 + t622);
t575 = t614 * t694;
t654 = t614 * t658;
t546 = -t617 * t575 + t654;
t548 = t619 * t575 + t614 * t659;
t701 = t546 * t615 + t548 * t613;
t700 = t546 * t613 - t548 * t615;
t604 = t622 * t689;
t662 = t608 * t689;
t581 = t604 + t662;
t576 = t613 * t587;
t693 = t615 * t648 + t576;
t577 = t615 * t587;
t692 = t613 * t648 - t577;
t611 = qJDD(3) * pkin(3);
t524 = -t689 * qJ(4) + qJDD(4) + t542 - t611;
t691 = t614 * (-t524 + t611) - qJ(4) * t575;
t563 = t567 ^ 2;
t564 = t569 ^ 2;
t688 = pkin(1) + pkin(2);
t594 = t614 * t610;
t519 = t612 * t649 - t594;
t674 = t612 * t610;
t520 = t614 * t649 + t674;
t481 = t614 * t519 - t612 * t520;
t687 = pkin(3) * t481;
t661 = t614 * t689;
t496 = t594 + (pkin(4) * t661 - t706) * t612;
t497 = -pkin(4) * t604 + t706 * t614 + t674;
t461 = -t618 * t496 + t616 * t497;
t462 = t616 * t496 + t618 * t497;
t425 = -t618 * t461 + t616 * t462;
t686 = pkin(4) * t425;
t601 = t612 * qJDD(3);
t603 = t614 * qJDD(3);
t565 = t601 * t616 - t618 * t603;
t566 = t642 * qJDD(3);
t489 = -t565 * t616 - t618 * t566;
t685 = pkin(4) * t489;
t482 = t612 * t519 + t614 * t520;
t667 = t617 * t524;
t451 = t619 * t482 + t667;
t684 = pkin(5) * t451;
t683 = pkin(5) * t502;
t682 = pkin(5) * t645;
t679 = qJ(2) * t610;
t677 = qJ(4) * t619;
t676 = t612 * t425;
t675 = t612 * t524;
t671 = t613 * t610;
t670 = t614 * t425;
t595 = t615 * t610;
t517 = -pkin(4) * t603 - t581 * pkin(6) + t524;
t669 = t616 * t517;
t527 = qJDD(5) + t535;
t668 = t616 * t527;
t666 = t618 * t517;
t665 = t618 * t527;
t664 = t619 * t524;
t562 = t567 * qJD(5);
t663 = t569 * qJD(5);
t657 = t617 * t535;
t656 = t619 * t535;
t589 = t612 * t661;
t655 = t612 * t603;
t450 = t617 * t482 - t664;
t653 = -pkin(5) * t450 - t617 * t687;
t426 = t616 * t461 + t618 * t462;
t651 = t615 * t586 - t576;
t650 = -t586 * t613 - t577;
t647 = pkin(3) * t524 - qJ(4) * t482;
t551 = t584 * t614 * t612;
t552 = -t589 * t617 + t612 * t654;
t644 = t551 * t615 - t552 * t613;
t643 = t551 * t613 + t552 * t615;
t641 = -pkin(3) * t619 - qJ(4) * t617 - pkin(2);
t620 = qJD(5) ^ 2;
t525 = -t620 - t563;
t487 = t616 * t525 + t707;
t640 = pkin(4) * t487 - t461;
t412 = t612 * t426 + t670;
t422 = -pkin(4) * t517 + pkin(6) * t426;
t400 = -pkin(6) * t670 - qJ(4) * t412 - t612 * t422;
t407 = -pkin(3) * t412 - t686;
t413 = t614 * t426 - t676;
t408 = t617 * t413 - t619 * t517;
t639 = -pkin(5) * t408 + t619 * t400 - t617 * t407;
t491 = -t565 * t618 + t616 * t566;
t521 = -t563 - t564;
t419 = -pkin(4) * t521 + pkin(6) * t491 + t426;
t421 = -pkin(6) * t489 - t425;
t445 = t614 * t489 + t612 * t491;
t406 = -qJ(4) * t445 - t612 * t419 + t614 * t421;
t427 = -pkin(3) * t445 - t685;
t447 = -t612 * t489 + t614 * t491;
t429 = t617 * t447 - t619 * t521;
t638 = -pkin(5) * t429 + t619 * t406 - t617 * t427;
t488 = t618 * t525 - t708;
t530 = t565 + 0.2e1 * t663;
t436 = -pkin(4) * t530 + pkin(6) * t488 - t666;
t443 = t614 * t487 + t612 * t488;
t463 = -pkin(6) * t487 + t669;
t416 = -qJ(4) * t443 - t612 * t436 + t614 * t463;
t420 = -pkin(3) * t443 - t640;
t444 = -t612 * t487 + t614 * t488;
t431 = t617 * t444 - t619 * t530;
t637 = -pkin(5) * t431 + t619 * t416 - t617 * t420;
t555 = -t564 - t620;
t509 = -t616 * t555 - t665;
t532 = -0.2e1 * t562 + t566;
t449 = -pkin(4) * t532 + pkin(6) * t509 + t669;
t506 = t618 * t555 - t668;
t466 = t614 * t506 + t612 * t509;
t478 = -pkin(6) * t506 + t666;
t418 = -qJ(4) * t466 - t612 * t449 + t614 * t478;
t634 = pkin(4) * t506 - t462;
t423 = -pkin(3) * t466 - t634;
t469 = -t612 * t506 + t614 * t509;
t437 = t617 * t469 - t619 * t532;
t636 = -pkin(5) * t437 + t619 * t418 - t617 * t423;
t574 = t612 * t694;
t635 = -pkin(3) * t601 + qJ(4) * t574 + t675;
t409 = t619 * t413 + t617 * t517;
t633 = -pkin(5) * t409 - t617 * t400 - t619 * t407;
t430 = t619 * t447 + t617 * t521;
t632 = -pkin(5) * t430 - t617 * t406 - t619 * t427;
t432 = t619 * t444 + t617 * t530;
t631 = -pkin(5) * t432 - t617 * t416 - t619 * t420;
t438 = t619 * t469 + t617 * t532;
t630 = -pkin(5) * t438 - t617 * t418 - t619 * t423;
t628 = pkin(3) * t517 + pkin(6) * t676 - qJ(4) * t413 - t614 * t422;
t600 = t608 * qJDD(3);
t602 = t622 * qJDD(3);
t579 = t602 + t600;
t627 = pkin(3) * t581 + qJ(4) * t579 + t482;
t626 = pkin(3) * t521 - qJ(4) * t447 - t614 * t419 - t612 * t421;
t625 = pkin(3) * t530 - qJ(4) * t444 - t614 * t436 - t612 * t463;
t624 = pkin(3) * t532 - qJ(4) * t469 - t614 * t449 - t612 * t478;
t588 = -0.2e1 * t655;
t582 = -t604 + t662;
t580 = t602 - t600;
t554 = -t564 + t620;
t553 = t563 - t620;
t550 = -pkin(1) * t648 - qJ(2) * t587;
t547 = t619 * t574 + t612 * t659;
t544 = t617 * t574 - t612 * t658;
t539 = t619 * t580 + t617 * t582;
t538 = t619 * t579 - t617 * t581;
t537 = t617 * t580 - t619 * t582;
t536 = t617 * t579 + t619 * t581;
t534 = t564 - t563;
t533 = -t562 + t566;
t531 = -t565 - t663;
t523 = (-t567 * t618 + t569 * t616) * qJD(5);
t522 = (-t567 * t616 - t569 * t618) * qJD(5);
t515 = t618 * t533 - t616 * t663;
t514 = t613 * t544 + t615 * t547;
t513 = t616 * t533 + t618 * t663;
t512 = -t615 * t544 + t613 * t547;
t511 = -t616 * t531 + t562 * t618;
t510 = t618 * t531 + t562 * t616;
t508 = -t616 * t554 + t707;
t507 = t618 * t553 - t668;
t505 = t618 * t554 + t708;
t504 = t616 * t553 + t665;
t499 = -qJ(2) * t584 + t585 * t688 + t542;
t498 = qJ(2) * t585 + t584 * t688 + t543;
t494 = t679 + t683;
t493 = t610 * t688 - t682;
t492 = -t618 * t530 - t616 * t532;
t490 = -t616 * t530 + t618 * t532;
t486 = -t612 * t522 + t614 * t523;
t485 = t614 * t522 + t612 * t523;
t484 = t617 * qJDD(5) + t619 * t486;
t483 = -t619 * qJDD(5) + t617 * t486;
t477 = -pkin(5) * t544 - t617 * t520 + t614 * t664;
t476 = -pkin(5) * t546 - t617 * t519 + t612 * t664;
t475 = pkin(5) * t547 + t619 * t520 + t614 * t667;
t474 = pkin(5) * t548 - t619 * t519 - t612 * t667;
t473 = -t612 * t513 + t614 * t515;
t472 = -t612 * t510 + t614 * t511;
t471 = t614 * t513 + t612 * t515;
t470 = t614 * t510 + t612 * t511;
t468 = -t612 * t505 + t614 * t508;
t467 = -t612 * t504 + t614 * t507;
t465 = t614 * t505 + t612 * t508;
t464 = t614 * t504 + t612 * t507;
t459 = -qJ(2) * t548 - t546 * t688 - t691;
t458 = qJ(2) * t547 - t544 * t688 - t635;
t457 = -pkin(5) * t536 + t619 * t481;
t456 = pkin(5) * t538 + t617 * t481;
t455 = t619 * t468 + t617 * t566;
t454 = t619 * t467 - t617 * t565;
t453 = t617 * t468 - t619 * t566;
t452 = t617 * t467 + t619 * t565;
t448 = -t612 * t490 + t614 * t492;
t446 = t614 * t490 + t612 * t492;
t442 = t619 * t473 + t657;
t441 = t619 * t472 - t657;
t440 = t617 * t473 - t656;
t439 = t617 * t472 + t656;
t435 = qJ(2) * t645 + t502 * t688;
t434 = t619 * t448 + t617 * t534;
t433 = t617 * t448 - t619 * t534;
t428 = qJ(2) * t538 - t536 * t688 - t627;
t414 = -(qJ(2) - t677) * t481 + t653;
t411 = -t684 - (pkin(1) - t641) * t481;
t410 = qJ(2) * t451 - t450 * t688 + t647;
t404 = qJ(2) * t438 - t437 * t688 + t624;
t403 = qJ(2) * t466 + t636;
t402 = qJ(2) * t432 - t431 * t688 + t625;
t401 = t466 * t688 + t630;
t398 = qJ(2) * t443 + t637;
t397 = t443 * t688 + t631;
t396 = qJ(2) * t445 + t638;
t395 = qJ(2) * t430 - t429 * t688 + t626;
t394 = t445 * t688 + t632;
t393 = qJ(2) * t409 - t408 * t688 + t628;
t392 = qJ(2) * t412 + t639;
t391 = t412 * t688 + t633;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t671, -t595, -t651, -qJ(1) * t651, 0, 0, 0, 0, 0, 0, -t671, t693, t595, qJ(1) * t693 + (-pkin(1) * t613 + qJ(2) * t615) * t610, 0, 0, -t540, 0, -t696, 0, -t703, t709, t704, -qJ(1) * t704 - t613 * t493 + t615 * t494, t643, t537 * t613 + t539 * t615, t514, -t643, -t700, 0, qJ(1) * t701 - t613 * t474 + t615 * t476, -qJ(1) * t512 + t475 * t613 + t477 * t615, t615 * t457 + t613 * t456 - qJ(1) * (-t536 * t615 + t538 * t613), t615 * t414 - t613 * t411 - qJ(1) * (-t450 * t615 + t451 * t613), t440 * t613 + t442 * t615, t433 * t613 + t434 * t615, t453 * t613 + t455 * t615, t439 * t613 + t441 * t615, t452 * t613 + t454 * t615, t483 * t613 + t484 * t615, t615 * t398 - t613 * t397 - qJ(1) * (-t431 * t615 + t432 * t613), t615 * t403 - t613 * t401 - qJ(1) * (-t437 * t615 + t438 * t613), t615 * t396 - t613 * t394 - qJ(1) * (-t429 * t615 + t430 * t613), t615 * t392 - t613 * t391 - qJ(1) * (-t408 * t615 + t409 * t613); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t595, -t671, t650, qJ(1) * t650, 0, 0, 0, 0, 0, 0, t595, t692, t671, qJ(1) * t692 + (pkin(1) * t615 + qJ(2) * t613) * t610, 0, 0, -t696, 0, t540, 0, t709, t703, t705, -qJ(1) * t705 + t615 * t493 + t613 * t494, -t644, -t537 * t615 + t539 * t613, t512, t644, t701, 0, qJ(1) * t700 + t615 * t474 + t613 * t476, qJ(1) * t514 - t475 * t615 + t477 * t613, t613 * t457 - t615 * t456 + qJ(1) * (t536 * t613 + t538 * t615), t613 * t414 + t615 * t411 + qJ(1) * (t450 * t613 + t451 * t615), -t440 * t615 + t442 * t613, -t433 * t615 + t434 * t613, -t453 * t615 + t455 * t613, -t439 * t615 + t441 * t613, -t452 * t615 + t454 * t613, -t483 * t615 + t484 * t613, t613 * t398 + t615 * t397 + qJ(1) * (t431 * t613 + t432 * t615), t613 * t403 + t615 * t401 + qJ(1) * (t437 * t613 + t438 * t615), t613 * t396 + t615 * t394 + qJ(1) * (t429 * t613 + t430 * t615), t613 * t392 + t615 * t391 + qJ(1) * (t408 * t613 + t409 * t615); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t586, t587, 0, 0, 0, 0, 0, 0, 0, 0, -t648, 0, -t587, t550, 0, 0, 0, 0, 0, -qJDD(3), t499, t498, 0, t435, -t600, t588, 0, -t602, 0, 0, t459, t458, t428, t410, -t471, -t446, -t465, -t470, -t464, -t485, t402, t404, t395, t393; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t610, -t586, 0, 0, 0, 0, 0, 0, 0, 0, t648, t610, t679, 0, 0, -t585, 0, -t584, 0, t646, t558, t502, t494, t552, t539, t547, -t552, t548, 0, t476, t477, t457, t414, t442, t434, t455, t441, t454, t484, t398, t403, t396, t392; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t610, 0, -t587, 0, 0, 0, 0, 0, 0, 0, t610, -t587, 0, pkin(1) * t610, 0, 0, -t584, 0, t585, 0, t558, -t646, -t645, t493, -t551, -t537, -t544, t551, t546, 0, t474, -t475, -t456, t411, -t440, -t433, -t453, -t439, -t452, -t483, t397, t401, t394, t391; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t586, t587, 0, 0, 0, 0, 0, 0, 0, 0, -t648, 0, -t587, t550, 0, 0, 0, 0, 0, -qJDD(3), t499, t498, 0, t435, -t600, t588, 0, -t602, 0, 0, t459, t458, t428, t410, -t471, -t446, -t465, -t470, -t464, -t485, t402, t404, t395, t393; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t648, t610, 0, 0, 0, -t585, 0, -t584, 0, t646, t558, t502, t683, t552, t539, t547, -t552, t548, 0, t476, t477, t457, t481 * t677 + t653, t442, t434, t455, t441, t454, t484, t637, t636, t638, t639; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t648, 0, -t587, 0, 0, 0, 0, 0, 0, -qJDD(3), pkin(2) * t585 + t542, pkin(2) * t584 + t543, 0, pkin(2) * t502, -t600, t588, 0, -t602, 0, 0, -pkin(2) * t546 - t691, -pkin(2) * t544 - t635, -pkin(2) * t536 - t627, -pkin(2) * t450 + t647, -t471, -t446, -t465, -t470, -t464, -t485, -pkin(2) * t431 + t625, -pkin(2) * t437 + t624, -pkin(2) * t429 + t626, -pkin(2) * t408 + t628; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t610, t587, 0, 0, 0, 0, t584, 0, -t585, 0, -t558, t646, t645, -pkin(2) * t610 + t682, t551, t537, t544, -t551, -t546, 0, -t474, t475, t456, -t481 * t641 + t684, t440, t433, t453, t439, t452, t483, -pkin(2) * t443 - t631, -pkin(2) * t466 - t630, -pkin(2) * t445 - t632, -pkin(2) * t412 - t633; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), 0, -t689, 0, 0, t610, t542, 0, t655, t580, t574, -t655, t575, 0, t675, t614 * t524, t481, qJ(4) * t481, t473, t448, t468, t472, t467, t486, t416, t418, t406, t400; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t689, 0, qJDD(3), 0, -t610, 0, t543, 0, t589, -t582, -t601, -t589, -t603, 0, t519, t520, 0, t687, -t535, -t534, -t566, t535, t565, -qJDD(5), t420, t423, t427, t407; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t542, -t543, 0, 0, t600, 0.2e1 * t655, 0, t602, 0, 0, t691, t635, t627, -t647, t471, t446, t465, t470, t464, t485, -t625, -t624, -t626, -t628; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t601, t603, t589, 0, t604, 0, 0, t524, t519, 0, t515, t492, t508, t511, t507, t523, t463, t478, t421, -pkin(6) * t425; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t601, -t662, t603, -t589, 0, -t524, 0, t520, 0, t513, t490, t505, t510, t504, t522, t436, t449, t419, t422; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t589, t582, t601, t589, t603, 0, -t519, -t520, 0, 0, t535, t534, t566, -t535, -t565, qJDD(5), t640, t634, t685, t686; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t533, -t530, t695, t562, t553, -t562, 0, t517, t461, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t663, t532, t554, t531, t527, -t663, -t517, 0, t462, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t535, t534, t566, -t535, -t565, qJDD(5), -t461, -t462, 0, 0;];
m_new_reg = t1;
