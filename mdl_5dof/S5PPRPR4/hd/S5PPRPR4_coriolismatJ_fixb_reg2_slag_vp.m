% Calculate inertial parameters regressor of coriolis matrix for
% S5PPRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d5,theta1,theta4]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:32
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PPRPR4_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRPR4_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRPR4_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PPRPR4_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:32:28
% EndTime: 2019-12-31 17:32:29
% DurationCPUTime: 0.76s
% Computational Cost: add. (886->72), mult. (2218->126), div. (0->0), fcn. (2423->6), ass. (0->76)
t88 = sin(pkin(8));
t86 = t88 ^ 2;
t89 = cos(pkin(8));
t87 = t89 ^ 2;
t79 = t86 + t87;
t124 = cos(qJ(5));
t102 = t124 * t89;
t90 = sin(qJ(5));
t121 = t90 * t88;
t95 = t102 - t121;
t103 = t124 * t88;
t120 = t90 * t89;
t70 = t103 + t120;
t129 = t70 ^ 2;
t128 = -t95 / 0.2e1;
t127 = -t70 / 0.2e1;
t91 = sin(qJ(3));
t126 = t91 / 0.2e1;
t56 = t95 * t91;
t123 = t95 * t56;
t54 = t70 * t91;
t122 = t70 * t54;
t119 = pkin(6) + qJ(4);
t104 = -t122 / 0.2e1;
t36 = t122 / 0.2e1;
t9 = t36 + t104;
t118 = t9 * qJD(1);
t117 = t9 * qJD(2);
t92 = cos(qJ(3));
t55 = t92 * t70;
t57 = t95 * t92;
t18 = t57 * t127 - t55 * t128;
t116 = t18 * qJD(2);
t66 = t95 ^ 2;
t30 = t66 - t129;
t115 = t30 * qJD(3);
t94 = -t120 / 0.2e1 - t103 / 0.2e1;
t31 = (t70 / 0.2e1 + t94) * t92;
t114 = t31 * qJD(2);
t93 = -t102 / 0.2e1 + t121 / 0.2e1;
t32 = (t95 / 0.2e1 + t93) * t92;
t113 = t32 * qJD(2);
t46 = t66 + t129;
t112 = t46 * qJD(3);
t100 = t79 * t92;
t84 = t91 * t92;
t53 = t91 * t100 - t84;
t111 = t53 * qJD(2);
t110 = t95 * qJD(3);
t64 = t95 * qJD(5);
t109 = t70 * qJD(3);
t65 = t70 * qJD(5);
t108 = t79 * qJD(3);
t107 = t91 * qJD(3);
t106 = t95 * t109;
t105 = t95 * t65;
t101 = t119 * t88;
t72 = t79 * qJ(4);
t83 = -t89 * pkin(4) - pkin(3);
t99 = qJD(3) * t83 + qJD(4);
t14 = t54 * t55 + t56 * t57 - t84;
t98 = t18 * qJD(1) + t14 * qJD(2);
t77 = t119 * t89;
t51 = t124 * t101 + t90 * t77;
t52 = -t90 * t101 + t124 * t77;
t13 = t70 * t51 + t52 * t95;
t16 = t126 - t123 / 0.2e1 + t104;
t97 = t16 * qJD(2) - t13 * qJD(3);
t58 = (0.1e1 / 0.2e1 - t87 / 0.2e1 - t86 / 0.2e1) * t91;
t96 = t58 * qJD(2) - t72 * qJD(3);
t59 = (0.1e1 + t79) * t126;
t34 = (t127 + t94) * t92;
t33 = (t128 + t93) * t92;
t17 = t123 / 0.2e1 + t36 + t126;
t1 = t18 * qJD(3) + t9 * qJD(5);
t2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t116; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t65, t64, 0, t117; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53 * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t14 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t107, -t92 * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, -t89 * t107, t88 * t107, qJD(3) * t100, t111 + (-t91 * pkin(3) + t92 * t72) * qJD(3) + t59 * qJD(4), 0, 0, 0, 0, 0, 0, t34 * qJD(5) - t107 * t95, t33 * qJD(5) + t70 * t107, (t55 * t70 + t57 * t95) * qJD(3), (t55 * t51 + t57 * t52 + t91 * t83) * qJD(3) + t17 * qJD(4) + t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t59 * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t17 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34 * qJD(3) - t56 * qJD(5), t33 * qJD(3) + t54 * qJD(5), 0, t118; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t116; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t58 * qJD(4) - t111, 0, 0, 0, 0, 0, 0, -t31 * qJD(5), -t32 * qJD(5), 0, -t16 * qJD(4) - t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79 * qJD(4), t72 * qJD(4), t105, t30 * qJD(5), 0, -t105, 0, 0, t83 * t65, t83 * t64, t46 * qJD(4), t13 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t108, -t96, 0, 0, 0, 0, 0, 0, 0, 0, t112, -t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t106, t115, t64, -t106, -t65, 0, -t52 * qJD(5) + t83 * t109 - t114, t51 * qJD(5) + t83 * t110 - t113, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58 * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t16 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t108, t96, 0, 0, 0, 0, 0, 0, t65, t64, -t112, t97; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t109, t110, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t117; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31 * qJD(3), t32 * qJD(3), 0, -t118; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t106, -t115, 0, t106, 0, 0, -t99 * t70 + t114, -t95 * t99 + t113, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t109, -t110, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t2;
