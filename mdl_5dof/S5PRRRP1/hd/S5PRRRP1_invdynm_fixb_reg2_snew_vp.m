% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PRRRP1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d4,theta1]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:40
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PRRRP1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRP1_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRP1_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRP1_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRP1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRRRP1_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:40:28
% EndTime: 2019-12-05 16:40:36
% DurationCPUTime: 8.04s
% Computational Cost: add. (23601->416), mult. (35935->520), div. (0->0), fcn. (22658->8), ass. (0->313)
t791 = qJD(2) + qJD(3);
t789 = t791 ^ 2;
t802 = cos(qJ(3));
t790 = qJDD(2) + qJDD(3);
t799 = sin(qJ(3));
t859 = t799 * t790;
t748 = t802 * t789 + t859;
t854 = t802 * t790;
t751 = t799 * t789 - t854;
t800 = sin(qJ(2));
t803 = cos(qJ(2));
t692 = t803 * t748 - t800 * t751;
t794 = g(3) - qJDD(1);
t727 = pkin(6) * t748 - t802 * t794;
t902 = pkin(6) * t751 - t799 * t794;
t635 = pkin(5) * t692 + t803 * t727 - t800 * t902;
t796 = sin(pkin(8));
t797 = cos(pkin(8));
t697 = t800 * t748 + t803 * t751;
t901 = t797 * t692 - t796 * t697;
t908 = pkin(5) * t697 + t800 * t727 + t803 * t902;
t918 = qJ(1) * t901 + t797 * t635 - t796 * t908;
t909 = t796 * t692 + t797 * t697;
t917 = qJ(1) * t909 + t796 * t635 + t797 * t908;
t764 = t796 * g(1) - t797 * g(2);
t765 = t797 * g(1) + t796 * g(2);
t721 = t800 * t764 - t803 * t765;
t805 = qJD(2) ^ 2;
t707 = -t805 * pkin(2) + t721;
t814 = t803 * t764 + t800 * t765;
t807 = qJDD(2) * pkin(2) + t814;
t658 = t799 * t707 - t802 * t807;
t659 = t802 * t707 + t799 * t807;
t833 = t799 * t658 + t802 * t659;
t602 = t802 * t658 - t799 * t659;
t852 = t803 * t602;
t556 = -t800 * t833 + t852;
t857 = t800 * t602;
t905 = t803 * t833 + t857;
t915 = t796 * t556 + t797 * t905;
t914 = t797 * t556 - t796 * t905;
t832 = t803 * t721 - t800 * t814;
t665 = -t800 * t721 - t803 * t814;
t869 = t796 * t665;
t904 = t797 * t832 + t869;
t865 = t797 * t665;
t903 = -t796 * t832 + t865;
t798 = sin(qJ(4));
t801 = cos(qJ(4));
t771 = t798 * t789 * t801;
t759 = qJDD(4) + t771;
t884 = pkin(4) * t759;
t761 = t800 * qJDD(2) + t803 * t805;
t731 = pkin(5) * t761 - t803 * t794;
t762 = t803 * qJDD(2) - t800 * t805;
t820 = -pkin(5) * t762 - t800 * t794;
t890 = t797 * t761 + t796 * t762;
t900 = qJ(1) * t890 + t797 * t731 - t796 * t820;
t708 = -t796 * t761 + t797 * t762;
t899 = -qJ(1) * t708 + t796 * t731 + t797 * t820;
t784 = t801 * t794;
t655 = -t789 * pkin(3) + t790 * pkin(7) + t659;
t862 = t798 * t655;
t642 = t784 + t862;
t643 = t801 * t655 - t798 * t794;
t587 = t798 * t642 + t801 * t643;
t888 = pkin(1) * t794;
t747 = t801 * t759;
t793 = t801 ^ 2;
t782 = t793 * t789;
t804 = qJD(4) ^ 2;
t769 = -t782 - t804;
t710 = t798 * t769 + t747;
t887 = pkin(3) * t710;
t792 = t798 ^ 2;
t870 = t792 * t789;
t767 = -t804 - t870;
t760 = qJDD(4) - t771;
t860 = t798 * t760;
t712 = t801 * t767 - t860;
t886 = pkin(3) * t712;
t846 = qJD(4) * t791;
t777 = t801 * t846;
t780 = t798 * t790;
t742 = t780 + t777;
t811 = t784 + (t742 - t777) * qJ(5) - t884;
t845 = (qJD(5) * t791);
t829 = t655 + (2 * t845);
t605 = t829 * t798 + t811;
t885 = pkin(4) * t605;
t861 = t798 * t759;
t715 = t801 * t769 - t861;
t776 = t798 * t846;
t781 = t801 * t790;
t744 = t781 - 0.2e1 * t776;
t673 = t799 * t715 + t802 * t744;
t675 = t802 * t715 - t799 * t744;
t624 = t803 * t673 + t800 * t675;
t883 = pkin(5) * t624;
t855 = t801 * t760;
t717 = -t798 * t767 - t855;
t741 = t780 + 0.2e1 * t777;
t674 = t799 * t717 - t802 * t741;
t676 = t802 * t717 + t799 * t741;
t625 = t803 * t674 + t800 * t676;
t882 = pkin(5) * t625;
t847 = t792 + t793;
t746 = t847 * t790;
t752 = t782 + t870;
t691 = t799 * t746 + t802 * t752;
t695 = t802 * t746 - t799 * t752;
t651 = t803 * t691 + t800 * t695;
t881 = pkin(5) * t651;
t880 = pkin(6) * t673;
t879 = pkin(6) * t674;
t878 = pkin(6) * t691;
t877 = pkin(7) * t710;
t876 = pkin(7) * t712;
t626 = -t800 * t673 + t803 * t675;
t875 = qJ(1) * (t797 * t624 + t796 * t626);
t627 = -t800 * t674 + t803 * t676;
t874 = qJ(1) * (t797 * t625 + t796 * t627);
t652 = -t800 * t691 + t803 * t695;
t873 = qJ(1) * (t797 * t651 + t796 * t652);
t871 = t791 * t798;
t866 = t796 * t794;
t864 = t797 * t794;
t863 = t798 * t605;
t654 = -t790 * pkin(3) - t789 * pkin(7) + t658;
t648 = t798 * t654;
t856 = t801 * t605;
t649 = t801 * t654;
t851 = -pkin(3) * t654 + pkin(7) * t587;
t850 = pkin(3) * t744 + pkin(7) * t715;
t849 = -pkin(3) * t741 + pkin(7) * t717;
t848 = pkin(3) * t752 + pkin(7) * t746;
t844 = pkin(4) * t780;
t843 = t798 * t859;
t842 = t798 * t854;
t841 = t648 + t849;
t840 = -t649 + t850;
t562 = t799 * t587 - t802 * t654;
t839 = pkin(2) * t562 + t851;
t838 = t801 * t845;
t837 = -pkin(1) * t710 + pkin(5) * t626;
t836 = -pkin(1) * t712 + pkin(5) * t627;
t835 = -pkin(2) * t710 + pkin(6) * t675;
t834 = -pkin(2) * t712 + pkin(6) * t676;
t830 = -t796 * t764 - t797 * t765;
t828 = t799 * t771;
t827 = t802 * t771;
t774 = 0.2e1 * t838;
t743 = t781 - t776;
t758 = qJD(4) * pkin(4) - qJ(5) * t871;
t816 = pkin(4) * t782 - t743 * qJ(5) + qJD(4) * t758 - t643;
t606 = t774 - t816;
t593 = pkin(4) * t752 + qJ(5) * t781 + t606;
t598 = (qJ(5) * t790 + t829) * t798 + t811;
t826 = t801 * t593 + t798 * t598 + t848;
t613 = -t743 * pkin(4) - qJ(5) * t782 + t758 * t871 + qJDD(5) + t654;
t607 = -qJ(5) * t767 + t613;
t701 = -pkin(4) * t741 - qJ(5) * t760;
t825 = t798 * t607 + t801 * t701 + t849;
t824 = t848 + t587;
t672 = pkin(2) * t674;
t823 = t672 + t841;
t671 = pkin(2) * t673;
t822 = t671 + t840;
t821 = -pkin(2) * t751 - t658;
t690 = pkin(2) * t691;
t819 = t690 + t826;
t818 = t672 + t825;
t817 = t690 + t824;
t586 = t801 * t642 - t798 * t643;
t815 = t797 * t764 - t796 * t765;
t560 = t801 * t606 + t863;
t567 = -pkin(4) * t613 + qJ(5) * t606;
t813 = -pkin(3) * t613 + pkin(7) * t560 + qJ(5) * t863 + t801 * t567;
t595 = pkin(4) * t744 + qJ(5) * t769 - t613;
t812 = -qJ(5) * t861 + t801 * t595 + t850;
t810 = pkin(4) * t767 + t816;
t540 = t799 * t560 - t802 * t613;
t809 = pkin(2) * t540 + t813;
t808 = t671 + t812;
t806 = -pkin(2) * t748 - t659;
t768 = t782 - t804;
t766 = t804 - t870;
t753 = -t782 + t870;
t737 = t847 * t846;
t723 = t799 * qJDD(4) + t802 * t737;
t722 = -t802 * qJDD(4) + t799 * t737;
t719 = t801 * t742 - t792 * t846;
t718 = -t798 * t743 - t793 * t846;
t716 = -t798 * t766 + t747;
t714 = t801 * t768 - t860;
t711 = t801 * t766 + t861;
t709 = t798 * t768 + t855;
t703 = (t742 + t777) * t798;
t702 = (t743 - t776) * t801;
t689 = pkin(6) * t695;
t688 = -pkin(1) * t761 - t721;
t687 = pkin(1) * t762 + t814;
t686 = -t798 * t741 + t801 * t744;
t685 = t801 * t741 + t798 * t744;
t684 = t802 * t716 + t843;
t683 = t802 * t714 + t799 * t781;
t682 = t799 * t716 - t842;
t681 = t799 * t714 - t801 * t854;
t680 = t802 * t719 - t828;
t679 = t802 * t718 + t828;
t678 = t799 * t719 + t827;
t677 = t799 * t718 - t827;
t668 = -t800 * t722 + t803 * t723;
t667 = t803 * t722 + t800 * t723;
t664 = t802 * t686 + t799 * t753;
t661 = t799 * t686 - t802 * t753;
t660 = pkin(1) * t665;
t657 = pkin(5) * t832 + t888;
t645 = pkin(1) * t651;
t644 = pkin(5) * t652;
t639 = -t800 * t682 + t803 * t684;
t638 = -t800 * t681 + t803 * t683;
t637 = t803 * t682 + t800 * t684;
t636 = t803 * t681 + t800 * t683;
t631 = -t800 * t678 + t803 * t680;
t630 = -t800 * t677 + t803 * t679;
t629 = t803 * t678 + t800 * t680;
t628 = t803 * t677 + t800 * t679;
t623 = t649 - t876;
t622 = t648 - t877;
t621 = pkin(1) * t625;
t620 = pkin(1) * t624;
t617 = t643 - t886;
t616 = t642 - t887;
t615 = -pkin(1) * t697 + t821;
t614 = -pkin(1) * t692 + t806;
t611 = -t796 * t667 + t797 * t668;
t610 = t797 * t667 + t796 * t668;
t609 = -t800 * t661 + t803 * t664;
t608 = t803 * t661 + t800 * t664;
t599 = pkin(2) * t602;
t597 = pkin(2) * t794 + pkin(6) * t833;
t590 = qJ(1) * (-t796 * t651 + t797 * t652);
t589 = t774 - t810 - t886;
t588 = t605 - t884 - t887;
t583 = -t796 * t637 + t797 * t639;
t582 = -t796 * t636 + t797 * t638;
t581 = t797 * t637 + t796 * t639;
t580 = t797 * t636 + t796 * t638;
t579 = -t796 * t629 + t797 * t631;
t578 = -t796 * t628 + t797 * t630;
t577 = t797 * t629 + t796 * t631;
t576 = t797 * t628 + t796 * t630;
t575 = -qJ(5) * t747 - t798 * t595 - t877;
t574 = t801 * t607 - t798 * t701 - t876;
t573 = t802 * t586 - t878;
t572 = t799 * t586 + t689;
t569 = qJ(1) * (-t796 * t625 + t797 * t627);
t568 = qJ(1) * (-t796 * t624 + t797 * t626);
t565 = -t796 * t608 + t797 * t609;
t564 = t797 * t608 + t796 * t609;
t563 = t802 * t587 + t799 * t654;
t559 = t798 * t606 - t856;
t553 = -t799 * t617 + t802 * t623 - t879;
t552 = -t799 * t616 + t802 * t622 - t880;
t551 = t621 + t823;
t550 = t620 + t822;
t549 = -t798 * t593 + t801 * t598;
t548 = t802 * t617 + t799 * t623 + t834;
t547 = t802 * t616 + t799 * t622 + t835;
t546 = t645 + t817;
t545 = -pkin(4) * t843 + t802 * t549 - t878;
t544 = pkin(4) * t842 + t799 * t549 + t689;
t543 = t620 + t808;
t542 = t621 + t818;
t541 = t802 * t560 + t799 * t613;
t538 = -pkin(3) * t559 + t885;
t537 = -pkin(1) * t556 - t599;
t536 = t802 * t574 - t799 * t589 - t879;
t535 = t802 * t575 - t799 * t588 - t880;
t534 = t645 + t819;
t533 = t799 * t574 + t802 * t589 + t834;
t532 = t799 * t575 + t802 * t588 + t835;
t531 = -t800 * t572 + t803 * t573 - t881;
t530 = t803 * t572 + t800 * t573 + t644;
t529 = -t800 * t562 + t803 * t563;
t528 = t803 * t562 + t800 * t563;
t527 = pkin(5) * t556 + pkin(6) * t852 - t800 * t597;
t526 = pkin(5) * t905 + pkin(6) * t857 + t803 * t597 + t888;
t525 = -pkin(6) * t562 - (pkin(3) * t799 - pkin(7) * t802) * t586;
t524 = -pkin(7) * t559 + qJ(5) * t856 - t798 * t567;
t523 = -t800 * t548 + t803 * t553 - t882;
t522 = -t800 * t547 + t803 * t552 - t883;
t521 = t803 * t548 + t800 * t553 + t836;
t520 = t803 * t547 + t800 * t552 + t837;
t519 = -t800 * t544 + t803 * t545 - t881;
t518 = t803 * t544 + t800 * t545 + t644;
t517 = -t800 * t540 + t803 * t541;
t516 = t803 * t540 + t800 * t541;
t515 = pkin(6) * t563 - (-pkin(3) * t802 - pkin(7) * t799 - pkin(2)) * t586;
t514 = -t800 * t533 + t803 * t536 - t882;
t513 = -t800 * t532 + t803 * t535 - t883;
t512 = t803 * t533 + t800 * t536 + t836;
t511 = t803 * t532 + t800 * t535 + t837;
t510 = pkin(1) * t528 + t839;
t509 = -pkin(6) * t540 + t802 * t524 - t799 * t538;
t508 = -pkin(2) * t559 + pkin(6) * t541 + t799 * t524 + t802 * t538;
t507 = -pkin(5) * t528 - t800 * t515 + t803 * t525;
t506 = pkin(1) * t516 + t809;
t505 = pkin(1) * t586 + pkin(5) * t529 + t803 * t515 + t800 * t525;
t504 = -pkin(5) * t516 - t800 * t508 + t803 * t509;
t503 = -pkin(1) * t559 + pkin(5) * t517 + t803 * t508 + t800 * t509;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t866, -t864, -t815, -qJ(1) * t815, 0, 0, t708, 0, -t890, 0, t899, t900, t903, pkin(5) * t865 + qJ(1) * t903 - t796 * t657, 0, 0, -t909, 0, -t901, 0, t917, t918, t914, qJ(1) * t914 - t796 * t526 + t797 * t527, t579, t565, t583, t578, t582, t611, -t796 * t520 + t797 * t522 - t875, -t796 * t521 + t797 * t523 - t874, -t796 * t530 + t797 * t531 - t873, t797 * t507 - t796 * t505 - qJ(1) * (t797 * t528 + t796 * t529), t579, t565, t583, t578, t582, t611, -t796 * t511 + t797 * t513 - t875, -t796 * t512 + t797 * t514 - t874, -t796 * t518 + t797 * t519 - t873, t797 * t504 - t796 * t503 - qJ(1) * (t797 * t516 + t796 * t517); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t864, -t866, t830, qJ(1) * t830, 0, 0, t890, 0, t708, 0, -t900, t899, t904, pkin(5) * t869 + qJ(1) * t904 + t797 * t657, 0, 0, t901, 0, -t909, 0, -t918, t917, t915, qJ(1) * t915 + t797 * t526 + t796 * t527, t577, t564, t581, t576, t580, t610, t797 * t520 + t796 * t522 + t568, t797 * t521 + t796 * t523 + t569, t797 * t530 + t796 * t531 + t590, t796 * t507 + t797 * t505 + qJ(1) * (-t796 * t528 + t797 * t529), t577, t564, t581, t576, t580, t610, t797 * t511 + t796 * t513 + t568, t797 * t512 + t796 * t514 + t569, t797 * t518 + t796 * t519 + t590, t796 * t504 + t797 * t503 + qJ(1) * (-t796 * t516 + t797 * t517); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t764, t765, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t687, t688, 0, -t660, 0, 0, 0, 0, 0, t790, t615, t614, 0, t537, t703, t685, t711, t702, t709, 0, t550, t551, t546, t510, t703, t685, t711, t702, t709, 0, t543, t542, t534, t506; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t794, -t764, 0, 0, 0, t762, 0, -t761, 0, t820, t731, t665, pkin(5) * t665, 0, 0, -t697, 0, -t692, 0, t908, t635, t556, t527, t631, t609, t639, t630, t638, t668, t522, t523, t531, t507, t631, t609, t639, t630, t638, t668, t513, t514, t519, t504; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t794, 0, -t765, 0, 0, 0, t761, 0, t762, 0, -t731, t820, t832, t657, 0, 0, t692, 0, -t697, 0, -t635, t908, t905, t526, t629, t608, t637, t628, t636, t667, t520, t521, t530, t505, t629, t608, t637, t628, t636, t667, t511, t512, t518, t503; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t764, t765, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t687, t688, 0, -t660, 0, 0, 0, 0, 0, t790, t615, t614, 0, t537, t703, t685, t711, t702, t709, 0, t550, t551, t546, t510, t703, t685, t711, t702, t709, 0, t543, t542, t534, t506; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t805, 0, 0, -t794, -t814, 0, 0, 0, -t751, 0, -t748, 0, t902, t727, t602, pkin(6) * t602, t680, t664, t684, t679, t683, t723, t552, t553, t573, t525, t680, t664, t684, t679, t683, t723, t535, t536, t545, t509; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t805, 0, qJDD(2), 0, t794, 0, t721, 0, 0, 0, t748, 0, -t751, 0, -t727, t902, t833, t597, t678, t661, t682, t677, t681, t722, t547, t548, t572, t515, t678, t661, t682, t677, t681, t722, t532, t533, t544, t508; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t814, -t721, 0, 0, 0, 0, 0, 0, 0, t790, t821, t806, 0, -t599, t703, t685, t711, t702, t709, 0, t822, t823, t817, t839, t703, t685, t711, t702, t709, 0, t808, t818, t819, t809; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t790, 0, -t789, 0, 0, -t794, t658, 0, t719, t686, t716, t718, t714, t737, t622, t623, t586, pkin(7) * t586, t719, t686, t716, t718, t714, t737, t575, t574, t549, t524; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t789, 0, t790, 0, t794, 0, t659, 0, t771, -t753, -t780, -t771, -t781, -qJDD(4), t616, t617, 0, pkin(3) * t586, t771, -t753, -t780, -t771, -t781, -qJDD(4), t588, t589, t844, t538; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t790, -t658, -t659, 0, 0, t703, t685, t711, t702, t709, 0, t840, t841, t824, t851, t703, t685, t711, t702, t709, 0, t812, t825, t826, t813; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t742, t744, t759, -t777, t768, t777, 0, t654, t642, 0, t742, t744, t759, -t777, t768, t777, -qJ(5) * t759, t607, t598, qJ(5) * t605; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t776, t741, t766, t743, t760, -t776, -t654, 0, t643, 0, t776, t741, t766, t743, t760, -t776, t595, t701, t593, t567; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t771, t753, t780, t771, t781, qJDD(4), -t642, -t643, 0, 0, -t771, t753, t780, t771, t781, qJDD(4), -0.2e1 * t798 * t845 - t811 - t862 + t884, t810 - 0.2e1 * t838, -t844, -t885; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t742, t744, t759, -t777, t768, t777, 0, t613, t605, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t776, t741, t766, t743, t760, -t776, -t613, 0, t606, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t771, t753, t780, t771, t781, qJDD(4), -t605, -t606, 0, 0;];
m_new_reg = t1;
