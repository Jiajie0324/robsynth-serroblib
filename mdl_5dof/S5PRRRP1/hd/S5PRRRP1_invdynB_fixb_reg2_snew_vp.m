% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d4,theta1]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:40
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRRRP1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRP1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRP1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRP1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRP1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRRRP1_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:40:15
% EndTime: 2019-12-05 16:40:28
% DurationCPUTime: 5.31s
% Computational Cost: add. (14715->374), mult. (22624->514), div. (0->0), fcn. (14552->8), ass. (0->278)
t396 = qJD(2) + qJD(3);
t394 = t396 ^ 2;
t406 = cos(qJ(3));
t395 = qJDD(2) + qJDD(3);
t403 = sin(qJ(3));
t447 = t403 * t395;
t360 = t406 * t394 + t447;
t440 = t406 * t395;
t363 = t403 * t394 - t440;
t404 = sin(qJ(2));
t407 = cos(qJ(2));
t300 = t407 * t360 - t404 * t363;
t399 = g(3) - qJDD(1);
t340 = pkin(6) * t360 - t406 * t399;
t489 = pkin(6) * t363 - t403 * t399;
t247 = pkin(5) * t300 + t407 * t340 - t404 * t489;
t305 = t404 * t360 + t407 * t363;
t400 = sin(pkin(8));
t401 = cos(pkin(8));
t259 = t400 * t300 + t401 * t305;
t495 = pkin(5) * t305 + t404 * t340 + t407 * t489;
t502 = qJ(1) * t259 + t400 * t247 + t401 * t495;
t488 = t401 * t300 - t400 * t305;
t501 = qJ(1) * t488 + t401 * t247 - t400 * t495;
t376 = t400 * g(1) - t401 * g(2);
t377 = t401 * g(1) + t400 * g(2);
t437 = -t404 * t376 + t407 * t377;
t474 = qJD(2) ^ 2;
t316 = -t474 * pkin(2) - t437;
t411 = t407 * t376 + t404 * t377;
t409 = qJDD(2) * pkin(2) + t411;
t269 = t403 * t316 - t406 * t409;
t270 = t406 * t316 + t403 * t409;
t422 = t403 * t269 + t406 * t270;
t216 = t406 * t269 - t403 * t270;
t438 = t407 * t216;
t175 = -t404 * t422 + t438;
t445 = t404 * t216;
t492 = t407 * t422 + t445;
t154 = t400 * t175 + t401 * t492;
t498 = t401 * t175 - t400 * t492;
t421 = -t404 * t411 - t407 * t437;
t275 = t404 * t437 - t407 * t411;
t454 = t401 * t275;
t491 = -t400 * t421 + t454;
t458 = t400 * t275;
t222 = t401 * t421 + t458;
t374 = t404 * qJDD(2) + t407 * t474;
t375 = t407 * qJDD(2) - t404 * t474;
t318 = -t400 * t374 + t401 * t375;
t344 = pkin(5) * t374 - t407 * t399;
t413 = -pkin(5) * t375 - t404 * t399;
t490 = -qJ(1) * t318 + t400 * t344 + t401 * t413;
t477 = t401 * t374 + t400 * t375;
t486 = qJ(1) * t477 + t401 * t344 - t400 * t413;
t402 = sin(qJ(4));
t405 = cos(qJ(4));
t382 = t402 * t394 * t405;
t433 = qJDD(4) + t382;
t485 = t433 * pkin(4);
t266 = -t394 * pkin(3) + t395 * pkin(7) + t270;
t253 = t402 * t266 + t405 * t399;
t434 = qJD(4) * t405;
t427 = t396 * t434;
t448 = t402 * t395;
t354 = t427 + t448;
t346 = t354 * qJ(5);
t476 = -t346 - t253 + t485;
t473 = pkin(1) * t399;
t408 = qJD(4) ^ 2;
t397 = t402 ^ 2;
t459 = t397 * t394;
t379 = -t408 - t459;
t373 = qJDD(4) - t382;
t449 = t402 * t373;
t322 = t405 * t379 - t449;
t472 = pkin(3) * t322;
t398 = t405 ^ 2;
t387 = t398 * t394;
t381 = -t387 - t408;
t450 = t402 * t433;
t326 = t405 * t381 - t450;
t435 = qJD(4) * t396;
t428 = t402 * t435;
t441 = t405 * t395;
t356 = -0.2e1 * t428 + t441;
t283 = t403 * t326 + t406 * t356;
t285 = t406 * t326 - t403 * t356;
t236 = t407 * t283 + t404 * t285;
t471 = pkin(5) * t236;
t442 = t405 * t373;
t328 = -t402 * t379 - t442;
t353 = 0.2e1 * t427 + t448;
t284 = t403 * t328 - t406 * t353;
t286 = t406 * t328 + t403 * t353;
t237 = t407 * t284 + t404 * t286;
t470 = pkin(5) * t237;
t436 = t397 + t398;
t358 = t436 * t395;
t364 = t387 + t459;
t299 = t403 * t358 + t406 * t364;
t303 = t406 * t358 - t403 * t364;
t263 = t407 * t299 + t404 * t303;
t469 = pkin(5) * t263;
t468 = pkin(6) * t283;
t467 = pkin(6) * t284;
t466 = pkin(6) * t299;
t359 = t405 * t433;
t320 = t402 * t381 + t359;
t465 = pkin(7) * t320;
t464 = pkin(7) * t322;
t238 = -t404 * t283 + t407 * t285;
t186 = t401 * t236 + t400 * t238;
t463 = qJ(1) * t186;
t239 = -t404 * t284 + t407 * t286;
t187 = t401 * t237 + t400 * t239;
t462 = qJ(1) * t187;
t264 = -t404 * t299 + t407 * t303;
t208 = t401 * t263 + t400 * t264;
t461 = qJ(1) * t208;
t460 = t396 * t402;
t455 = t400 * t399;
t453 = t401 * t399;
t218 = (qJ(5) * t434 - 0.2e1 * qJD(5) * t402) * t396 + t476;
t452 = t402 * t218;
t265 = -t395 * pkin(3) - t394 * pkin(7) + t269;
t451 = t402 * t265;
t444 = t405 * t218;
t443 = t405 * t265;
t254 = t405 * t266 - t402 * t399;
t432 = 0.2e1 * qJD(5) * t396;
t431 = t402 * t447;
t430 = t402 * t440;
t426 = -pkin(1) * t320 + pkin(5) * t238;
t425 = -pkin(1) * t322 + pkin(5) * t239;
t424 = -pkin(2) * t320 + pkin(6) * t285;
t423 = -pkin(2) * t322 + pkin(6) * t286;
t204 = t402 * t253 + t405 * t254;
t332 = -t400 * t376 - t401 * t377;
t418 = t403 * t382;
t417 = t406 * t382;
t416 = pkin(1) * t236 + pkin(2) * t283 + pkin(3) * t356 + pkin(7) * t326;
t415 = pkin(1) * t237 + pkin(2) * t284 - pkin(3) * t353 + pkin(7) * t328;
t414 = pkin(1) * t263 + pkin(2) * t299 + pkin(3) * t364 + pkin(7) * t358;
t228 = -pkin(3) * t320 + t253;
t203 = t405 * t253 - t402 * t254;
t331 = t401 * t376 - t400 * t377;
t355 = -t428 + t441;
t371 = qJD(4) * pkin(4) - qJ(5) * t460;
t410 = t355 * qJ(5) - qJD(4) * t371 + t405 * t432 + t254;
t227 = -t355 * pkin(4) - qJ(5) * t387 + t371 * t460 + qJDD(5) + t265;
t384 = t402 * t432;
t380 = t387 - t408;
t378 = t408 - t459;
t365 = t387 - t459;
t351 = t436 * t435;
t336 = t403 * qJDD(4) + t406 * t351;
t335 = -t406 * qJDD(4) + t403 * t351;
t330 = t405 * t354 - t397 * t435;
t329 = -t402 * t355 - t398 * t435;
t327 = -t402 * t378 + t359;
t325 = t405 * t380 - t449;
t321 = t405 * t378 + t450;
t319 = t402 * t380 + t442;
t312 = (t354 + t427) * t402;
t311 = (t355 - t428) * t405;
t310 = -pkin(4) * t353 - qJ(5) * t373;
t297 = pkin(6) * t303;
t296 = -t402 * t353 + t405 * t356;
t295 = t405 * t353 + t402 * t356;
t294 = t406 * t327 + t431;
t293 = t406 * t325 + t403 * t441;
t292 = t403 * t327 - t430;
t291 = t403 * t325 - t405 * t440;
t290 = t406 * t330 - t418;
t289 = t406 * t329 + t418;
t288 = t403 * t330 + t417;
t287 = t403 * t329 - t417;
t278 = -t404 * t335 + t407 * t336;
t277 = t407 * t335 + t404 * t336;
t274 = t406 * t296 - t403 * t365;
t271 = t403 * t296 + t406 * t365;
t268 = pkin(5) * t421 + t473;
t255 = pkin(5) * t264;
t251 = -t404 * t292 + t407 * t294;
t250 = -t404 * t291 + t407 * t293;
t249 = t407 * t292 + t404 * t294;
t248 = t407 * t291 + t404 * t293;
t243 = -t404 * t288 + t407 * t290;
t242 = -t404 * t287 + t407 * t289;
t241 = t407 * t288 + t404 * t290;
t240 = t407 * t287 + t404 * t289;
t235 = t443 - t464;
t234 = t451 - t465;
t229 = t254 - t472;
t226 = -t400 * t277 + t401 * t278;
t225 = t401 * t277 + t400 * t278;
t224 = -t404 * t271 + t407 * t274;
t223 = t407 * t271 + t404 * t274;
t220 = -qJ(5) * t379 + t227;
t219 = -pkin(4) * t387 + t410;
t213 = t384 + (-t427 + t448) * qJ(5) - t476;
t212 = pkin(2) * t399 + pkin(6) * t422;
t211 = pkin(4) * t356 + qJ(5) * t381 - t227;
t210 = qJ(5) * t441 + (t364 - t387) * pkin(4) + t410;
t209 = -t400 * t263 + t401 * t264;
t207 = qJ(1) * t209;
t206 = -t472 + (-t379 - t387) * pkin(4) + t410;
t205 = -qJ(5) * t427 + t228 + t346 + t384 - 0.2e1 * t485;
t201 = -t400 * t249 + t401 * t251;
t200 = -t400 * t248 + t401 * t250;
t199 = t401 * t249 + t400 * t251;
t198 = t401 * t248 + t400 * t250;
t197 = -t400 * t241 + t401 * t243;
t196 = -t400 * t240 + t401 * t242;
t195 = t401 * t241 + t400 * t243;
t194 = t401 * t240 + t400 * t242;
t193 = -qJ(5) * t359 - t402 * t211 - t465;
t192 = t405 * t220 - t402 * t310 - t464;
t191 = t406 * t203 - t466;
t190 = t403 * t203 + t297;
t189 = -t400 * t237 + t401 * t239;
t188 = -t400 * t236 + t401 * t238;
t185 = qJ(1) * t189;
t184 = qJ(1) * t188;
t183 = -pkin(4) * t227 + qJ(5) * t219;
t182 = -t400 * t223 + t401 * t224;
t181 = t401 * t223 + t400 * t224;
t180 = t406 * t204 + t403 * t265;
t179 = t403 * t204 - t406 * t265;
t178 = t405 * t219 - t452;
t177 = t402 * t219 + t444;
t172 = -t403 * t229 + t406 * t235 - t467;
t171 = -t403 * t228 + t406 * t234 - t468;
t170 = -t402 * t210 + t405 * t213;
t169 = t406 * t229 + t403 * t235 + t423;
t168 = t406 * t228 + t403 * t234 + t424;
t167 = -pkin(4) * t431 + t406 * t170 - t466;
t166 = pkin(4) * t430 + t403 * t170 + t297;
t165 = t406 * t178 + t403 * t227;
t164 = t403 * t178 - t406 * t227;
t163 = -pkin(3) * t177 - pkin(4) * t218;
t162 = t406 * t192 - t403 * t206 - t467;
t161 = t406 * t193 - t403 * t205 - t468;
t160 = t403 * t192 + t406 * t206 + t423;
t159 = t403 * t193 + t406 * t205 + t424;
t158 = -t404 * t190 + t407 * t191 - t469;
t157 = t407 * t190 + t404 * t191 + t255;
t156 = -t404 * t179 + t407 * t180;
t155 = t407 * t179 + t404 * t180;
t152 = pkin(5) * t175 + pkin(6) * t438 - t404 * t212;
t151 = pkin(5) * t492 + pkin(6) * t445 + t407 * t212 + t473;
t150 = -pkin(6) * t179 - (pkin(3) * t403 - pkin(7) * t406) * t203;
t149 = -pkin(7) * t177 - qJ(5) * t444 - t402 * t183;
t148 = -t404 * t169 + t407 * t172 - t470;
t147 = -t404 * t168 + t407 * t171 - t471;
t146 = t407 * t169 + t404 * t172 + t425;
t145 = t407 * t168 + t404 * t171 + t426;
t144 = -t404 * t166 + t407 * t167 - t469;
t143 = t407 * t166 + t404 * t167 + t255;
t142 = -t404 * t164 + t407 * t165;
t141 = t407 * t164 + t404 * t165;
t140 = pkin(6) * t180 - (-pkin(3) * t406 - pkin(7) * t403 - pkin(2)) * t203;
t139 = -t404 * t160 + t407 * t162 - t470;
t138 = -t404 * t159 + t407 * t161 - t471;
t137 = t407 * t160 + t404 * t162 + t425;
t136 = t407 * t159 + t404 * t161 + t426;
t135 = -t400 * t155 + t401 * t156;
t134 = t401 * t155 + t400 * t156;
t133 = -pkin(6) * t164 + t406 * t149 - t403 * t163;
t132 = -t400 * t141 + t401 * t142;
t131 = t401 * t141 + t400 * t142;
t130 = -pkin(2) * t177 + pkin(6) * t165 + t403 * t149 + t406 * t163;
t129 = -pkin(5) * t155 - t404 * t140 + t407 * t150;
t128 = pkin(1) * t203 + pkin(5) * t156 + t407 * t140 + t404 * t150;
t127 = -pkin(5) * t141 - t404 * t130 + t407 * t133;
t126 = -pkin(1) * t177 + pkin(5) * t142 + t407 * t130 + t404 * t133;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t332, 0, 0, 0, 0, 0, 0, -t477, -t318, 0, t222, 0, 0, 0, 0, 0, 0, -t488, t259, 0, t154, 0, 0, 0, 0, 0, 0, t188, t189, t209, t135, 0, 0, 0, 0, 0, 0, t188, t189, t209, t132; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t331, 0, 0, 0, 0, 0, 0, t318, -t477, 0, -t491, 0, 0, 0, 0, 0, 0, -t259, -t488, 0, -t498, 0, 0, 0, 0, 0, 0, t186, t187, t208, t134, 0, 0, 0, 0, 0, 0, t186, t187, t208, t131; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t399, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t399, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t399, 0, 0, 0, 0, 0, 0, t320, t322, 0, -t203, 0, 0, 0, 0, 0, 0, t320, t322, 0, t177; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t455, -t453, -t331, -qJ(1) * t331, 0, 0, t318, 0, -t477, 0, t490, t486, t491, pkin(5) * t454 + qJ(1) * t491 - t400 * t268, 0, 0, -t259, 0, -t488, 0, t502, t501, t498, qJ(1) * t498 - t400 * t151 + t401 * t152, t197, t182, t201, t196, t200, t226, -t400 * t145 + t401 * t147 - t463, -t400 * t146 + t401 * t148 - t462, -t400 * t157 + t401 * t158 - t461, -qJ(1) * t134 - t400 * t128 + t401 * t129, t197, t182, t201, t196, t200, t226, -t400 * t136 + t401 * t138 - t463, -t400 * t137 + t401 * t139 - t462, -t400 * t143 + t401 * t144 - t461, -qJ(1) * t131 - t400 * t126 + t401 * t127; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t453, -t455, t332, qJ(1) * t332, 0, 0, t477, 0, t318, 0, -t486, t490, t222, pkin(5) * t458 + qJ(1) * t222 + t401 * t268, 0, 0, t488, 0, -t259, 0, -t501, t502, t154, qJ(1) * t154 + t401 * t151 + t400 * t152, t195, t181, t199, t194, t198, t225, t401 * t145 + t400 * t147 + t184, t401 * t146 + t400 * t148 + t185, t401 * t157 + t400 * t158 + t207, qJ(1) * t135 + t401 * t128 + t400 * t129, t195, t181, t199, t194, t198, t225, t401 * t136 + t400 * t138 + t184, t401 * t137 + t400 * t139 + t185, t401 * t143 + t400 * t144 + t207, qJ(1) * t132 + t401 * t126 + t400 * t127; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t376, t377, 0, 0, 0, 0, 0, 0, 0, qJDD(2), pkin(1) * t375 + t411, -pkin(1) * t374 + t437, 0, -pkin(1) * t275, 0, 0, 0, 0, 0, t395, -pkin(1) * t305 - pkin(2) * t363 - t269, -pkin(1) * t300 - pkin(2) * t360 - t270, 0, -pkin(1) * t175 - pkin(2) * t216, t312, t295, t321, t311, t319, 0, t416 - t443, t415 + t451, t204 + t414, pkin(1) * t155 + pkin(2) * t179 - pkin(3) * t265 + pkin(7) * t204, t312, t295, t321, t311, t319, 0, -qJ(5) * t450 + t405 * t211 + t416, t402 * t220 + t405 * t310 + t415, t405 * t210 + t402 * t213 + t414, pkin(1) * t141 + pkin(2) * t164 - pkin(3) * t227 + pkin(7) * t178 - qJ(5) * t452 + t405 * t183;];
tauB_reg = t1;
