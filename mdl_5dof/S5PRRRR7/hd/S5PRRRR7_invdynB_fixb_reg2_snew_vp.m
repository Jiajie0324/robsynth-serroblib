% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRRRR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d4,d5,theta1]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:13
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRRRR7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR7_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR7_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRR7_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRR7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRRRR7_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:13:08
% EndTime: 2019-12-05 17:13:23
% DurationCPUTime: 11.41s
% Computational Cost: add. (52169->590), mult. (109751->913), div. (0->0), fcn. (78373->10), ass. (0->408)
t605 = sin(qJ(5));
t606 = sin(qJ(4));
t610 = cos(qJ(4));
t611 = cos(qJ(3));
t607 = sin(qJ(3));
t640 = qJD(2) * t607;
t555 = -qJD(2) * t610 * t611 + t606 * t640;
t557 = (t606 * t611 + t607 * t610) * qJD(2);
t609 = cos(qJ(5));
t504 = t555 * t609 + t557 * t605;
t506 = -t555 * t605 + t557 * t609;
t450 = t506 * t504;
t598 = qJDD(3) + qJDD(4);
t619 = qJDD(5) + t598;
t674 = -t450 + t619;
t680 = t605 * t674;
t518 = t557 * t555;
t672 = -t518 + t598;
t679 = t606 * t672;
t678 = t609 * t674;
t677 = t610 * t672;
t636 = qJD(2) * qJD(3);
t626 = t607 * t636;
t633 = t611 * qJDD(2);
t615 = 0.2e1 * t626 - t633;
t530 = t615 * t611;
t602 = sin(pkin(9));
t641 = g(3) - qJDD(1);
t676 = t602 * t641;
t603 = cos(pkin(9));
t675 = t603 * t641;
t599 = qJD(3) + qJD(4);
t593 = qJD(5) + t599;
t494 = t593 * t504;
t625 = t611 * t636;
t635 = t607 * qJDD(2);
t569 = t625 + t635;
t616 = t626 - t633;
t620 = t606 * t569 + t610 * t616;
t483 = -qJD(4) * t557 - t620;
t484 = -qJD(4) * t555 + t569 * t610 - t606 * t616;
t614 = qJD(5) * t504 - t483 * t605 - t484 * t609;
t673 = -t494 - t614;
t551 = t599 * t555;
t468 = -t551 - t484;
t671 = -t551 + t484;
t576 = g(1) * t602 - g(2) * t603;
t561 = t603 * t576;
t577 = g(1) * t603 + g(2) * t602;
t524 = -t577 * t602 + t561;
t621 = -t483 * t609 + t605 * t484;
t386 = (qJD(5) - t593) * t506 + t621;
t464 = (qJD(4) - t599) * t557 + t620;
t502 = t504 ^ 2;
t503 = t506 ^ 2;
t670 = t555 ^ 2;
t554 = t557 ^ 2;
t591 = t593 ^ 2;
t597 = t599 ^ 2;
t669 = t611 ^ 2;
t668 = qJD(2) ^ 2;
t667 = t593 * t605;
t666 = t593 * t609;
t665 = t599 * t606;
t664 = t599 * t610;
t608 = sin(qJ(2));
t612 = cos(qJ(2));
t632 = t612 * qJDD(2);
t573 = -t608 * t668 + t632;
t663 = t602 * t573;
t662 = t602 * t576;
t660 = t603 * t573;
t548 = -t577 * t608 + t612 * t641;
t526 = -qJDD(2) * pkin(2) - pkin(6) * t668 + t548;
t580 = qJD(3) * pkin(3) - pkin(7) * t640;
t595 = t669 * t668;
t477 = pkin(3) * t616 - pkin(7) * t595 + t580 * t640 + t526;
t542 = pkin(4) * t599 - pkin(8) * t557;
t397 = -pkin(4) * t483 - pkin(8) * t670 + t542 * t557 + t477;
t659 = t605 * t397;
t442 = t450 + t619;
t658 = t605 * t442;
t549 = -t577 * t612 - t608 * t641;
t527 = -pkin(2) * t668 + qJDD(2) * pkin(6) + t549;
t496 = t607 * t527 + t576 * t611;
t585 = t607 * t668 * t611;
t578 = qJDD(3) + t585;
t455 = (-t569 + t625) * pkin(7) + t578 * pkin(3) - t496;
t499 = t527 * t611 - t576 * t607;
t460 = -pkin(3) * t595 - pkin(7) * t616 - qJD(3) * t580 + t499;
t399 = -t455 * t610 + t606 * t460;
t363 = pkin(4) * t672 + pkin(8) * t468 - t399;
t402 = t455 * t606 + t460 * t610;
t366 = -pkin(4) * t670 + pkin(8) * t483 - t542 * t599 + t402;
t316 = -t363 * t609 + t366 * t605;
t317 = t363 * t605 + t366 * t609;
t278 = -t316 * t609 + t317 * t605;
t657 = t606 * t278;
t656 = t606 * t477;
t513 = t518 + t598;
t655 = t606 * t513;
t348 = -t399 * t610 + t402 * t606;
t654 = t607 * t348;
t653 = t607 * t526;
t652 = t607 * t578;
t579 = qJDD(3) - t585;
t651 = t607 * t579;
t650 = t609 * t397;
t649 = t609 * t442;
t648 = t610 * t278;
t647 = t610 * t477;
t646 = t610 * t513;
t645 = t611 * t348;
t644 = t611 * t526;
t643 = t611 * t578;
t642 = t611 * t579;
t600 = t607 ^ 2;
t639 = t600 * t668;
t634 = t608 * qJDD(2);
t631 = t600 + t669;
t630 = t608 * t450;
t629 = t608 * t518;
t628 = t612 * t450;
t627 = t612 * t518;
t437 = t496 * t607 + t499 * t611;
t571 = t631 * qJDD(2);
t574 = t595 + t639;
t522 = t571 * t608 + t574 * t612;
t523 = t571 * t612 - t574 * t608;
t624 = -pkin(1) * t522 - pkin(2) * t574 - pkin(6) * t571 + qJ(1) * t523 - t437;
t572 = t612 * t668 + t634;
t623 = pkin(1) * t573 + qJ(1) * t572 - t548;
t622 = -pkin(1) * t572 + qJ(1) * t573 - t549;
t279 = t316 * t605 + t317 * t609;
t349 = t399 * t606 + t402 * t610;
t489 = t548 * t608 + t549 * t612;
t525 = -t577 * t603 - t662;
t618 = t608 * t585;
t617 = t612 * t585;
t529 = pkin(5) * t572 - t576 * t612;
t528 = -pkin(5) * t573 - t576 * t608;
t436 = t496 * t611 - t499 * t607;
t488 = t548 * t612 - t549 * t608;
t613 = qJD(3) ^ 2;
t584 = -t595 - t613;
t583 = t595 - t613;
t582 = -t613 - t639;
t581 = t613 - t639;
t575 = t595 - t639;
t568 = 0.2e1 * t625 + t635;
t567 = t631 * t636;
t560 = t603 * t572;
t559 = t602 * t572;
t547 = -t554 + t597;
t546 = -t597 + t670;
t545 = qJDD(3) * t608 + t567 * t612;
t544 = t569 * t611 - t600 * t636;
t543 = t607 * t616 - t636 * t669;
t540 = -t554 - t597;
t539 = -t582 * t607 - t642;
t538 = -t581 * t607 + t643;
t537 = t584 * t611 - t652;
t536 = t583 * t611 - t651;
t535 = t582 * t611 - t651;
t534 = -t581 * t611 - t652;
t533 = t584 * t607 + t643;
t532 = -t583 * t607 - t642;
t531 = (-t569 - t625) * t607;
t520 = -t568 * t607 - t530;
t519 = -t568 * t611 + t607 * t615;
t515 = -t554 + t670;
t511 = t544 * t612 - t618;
t510 = t543 * t612 + t618;
t509 = t538 * t612 + t607 * t634;
t508 = t536 * t612 + t608 * t633;
t507 = -t597 - t670;
t501 = t539 * t612 + t568 * t608;
t500 = t537 * t612 + t608 * t615;
t498 = t539 * t608 - t568 * t612;
t497 = t537 * t608 - t612 * t615;
t493 = -t503 + t591;
t492 = t502 - t591;
t491 = (-t555 * t610 + t557 * t606) * t599;
t490 = (-t555 * t606 - t557 * t610) * t599;
t486 = -t554 - t670;
t485 = t520 * t612 - t575 * t608;
t481 = -t503 - t591;
t479 = -pkin(6) * t535 + t644;
t478 = -pkin(6) * t533 + t653;
t476 = t546 * t610 - t655;
t475 = -t547 * t606 + t677;
t474 = t546 * t606 + t646;
t473 = t547 * t610 + t679;
t472 = t489 * t603 - t662;
t471 = t489 * t602 + t561;
t470 = -t540 * t606 - t646;
t469 = t540 * t610 - t655;
t463 = (qJD(4) + t599) * t557 + t620;
t462 = -pkin(2) * t535 + t499;
t461 = -pkin(2) * t533 + t496;
t459 = t484 * t610 - t557 * t665;
t458 = t484 * t606 + t557 * t664;
t457 = -t483 * t606 + t555 * t664;
t456 = t483 * t610 + t555 * t665;
t454 = t501 * t603 + t535 * t602;
t453 = t500 * t603 + t533 * t602;
t452 = t501 * t602 - t535 * t603;
t451 = t500 * t602 - t533 * t603;
t448 = -t503 + t502;
t445 = t507 * t610 - t679;
t444 = t507 * t606 + t677;
t440 = -t591 - t502;
t439 = (-t504 * t609 + t506 * t605) * t593;
t438 = (-t504 * t605 - t506 * t609) * t593;
t434 = -t490 * t607 + t491 * t611;
t433 = -t490 * t611 - t491 * t607;
t432 = t434 * t612 + t598 * t608;
t431 = -pkin(1) * t497 + pkin(2) * t615 - pkin(6) * t537 + t644;
t430 = -pkin(1) * t498 + pkin(2) * t568 - pkin(6) * t539 - t653;
t429 = -t502 - t503;
t428 = -pkin(5) * t522 + t436 * t612;
t427 = t437 * t612 + t526 * t608;
t426 = t437 * t608 - t526 * t612;
t425 = -pkin(7) * t469 + t647;
t424 = -t474 * t607 + t476 * t611;
t423 = -t473 * t607 + t475 * t611;
t422 = -t474 * t611 - t476 * t607;
t421 = -t473 * t611 - t475 * t607;
t420 = t492 * t609 - t658;
t419 = -t493 * t605 + t678;
t418 = t492 * t605 + t649;
t417 = t493 * t609 + t680;
t416 = -t481 * t605 - t649;
t415 = t481 * t609 - t658;
t414 = -t469 * t607 + t470 * t611;
t413 = t469 * t611 + t470 * t607;
t412 = -t464 * t610 - t468 * t606;
t411 = -t463 * t610 - t606 * t671;
t410 = -t464 * t606 + t468 * t610;
t409 = -t463 * t606 + t610 * t671;
t408 = -pkin(7) * t444 + t656;
t406 = -qJD(5) * t506 - t621;
t404 = -t458 * t607 + t459 * t611;
t403 = -t456 * t607 + t457 * t611;
t401 = -t458 * t611 - t459 * t607;
t400 = -t456 * t611 - t457 * t607;
t396 = -t444 * t607 + t445 * t611;
t395 = t444 * t611 + t445 * t607;
t394 = t440 * t609 - t680;
t393 = t440 * t605 + t678;
t392 = -pkin(5) * t498 - t462 * t608 + t479 * t612;
t391 = -pkin(5) * t497 - t461 * t608 + t478 * t612;
t390 = -t494 + t614;
t385 = (qJD(5) + t593) * t506 + t621;
t384 = -t438 * t606 + t439 * t610;
t383 = t438 * t610 + t439 * t606;
t382 = t404 * t612 + t629;
t381 = t403 * t612 - t629;
t380 = -t506 * t667 - t609 * t614;
t379 = t506 * t666 - t605 * t614;
t378 = -t406 * t605 + t504 * t666;
t377 = t406 * t609 + t504 * t667;
t376 = -pkin(3) * t671 + pkin(7) * t470 + t656;
t375 = t424 * t612 - t464 * t608;
t374 = t423 * t612 - t468 * t608;
t373 = -pkin(3) * t463 + pkin(7) * t445 - t647;
t372 = t414 * t612 + t608 * t671;
t371 = t414 * t608 - t612 * t671;
t370 = t427 * t603 - t436 * t602;
t369 = t427 * t602 + t436 * t603;
t368 = t396 * t612 + t463 * t608;
t367 = t396 * t608 - t463 * t612;
t364 = -pkin(1) * t426 + pkin(2) * t526 - pkin(6) * t437;
t360 = -t418 * t606 + t420 * t610;
t359 = -t417 * t606 + t419 * t610;
t358 = t418 * t610 + t420 * t606;
t357 = t417 * t610 + t419 * t606;
t356 = -t415 * t606 + t416 * t610;
t355 = t415 * t610 + t416 * t606;
t354 = -t410 * t607 + t412 * t611;
t353 = -t409 * t607 + t411 * t611;
t352 = t410 * t611 + t412 * t607;
t351 = -t409 * t611 - t411 * t607;
t350 = -pkin(8) * t415 + t650;
t347 = -pkin(5) * t426 - (pkin(2) * t608 - pkin(6) * t612) * t436;
t346 = t353 * t612 - t515 * t608;
t345 = -pkin(8) * t393 + t659;
t344 = t354 * t612 + t486 * t608;
t343 = t354 * t608 - t486 * t612;
t342 = -t393 * t606 + t394 * t610;
t341 = t393 * t610 + t394 * t606;
t340 = t372 * t603 + t413 * t602;
t339 = t372 * t602 - t413 * t603;
t338 = -pkin(2) * t413 - pkin(3) * t469 + t402;
t337 = -t385 * t609 - t605 * t673;
t336 = -t386 * t609 - t390 * t605;
t335 = -t385 * t605 + t609 * t673;
t334 = -t386 * t605 + t390 * t609;
t333 = -pkin(3) * t477 + pkin(7) * t349;
t332 = -t383 * t607 + t384 * t611;
t331 = -t383 * t611 - t384 * t607;
t330 = -t379 * t606 + t380 * t610;
t329 = -t377 * t606 + t378 * t610;
t328 = t379 * t610 + t380 * t606;
t327 = t377 * t610 + t378 * t606;
t326 = -pkin(2) * t395 - pkin(3) * t444 + t399;
t325 = t332 * t612 + t608 * t619;
t324 = t368 * t603 + t395 * t602;
t323 = t368 * t602 - t395 * t603;
t322 = -pkin(2) * t352 - pkin(3) * t410;
t321 = -pkin(7) * t410 - t348;
t320 = -pkin(6) * t413 - t376 * t607 + t425 * t611;
t319 = -pkin(4) * t673 + pkin(8) * t416 + t659;
t318 = -pkin(3) * t486 + pkin(7) * t412 + t349;
t314 = -pkin(6) * t395 - t373 * t607 + t408 * t611;
t313 = -pkin(4) * t385 + pkin(8) * t394 - t650;
t312 = -t358 * t607 + t360 * t611;
t311 = -t357 * t607 + t359 * t611;
t310 = -t358 * t611 - t360 * t607;
t309 = -t357 * t611 - t359 * t607;
t308 = -t355 * t607 + t356 * t611;
t307 = t355 * t611 + t356 * t607;
t306 = t349 * t611 - t654;
t305 = t349 * t607 + t645;
t304 = t344 * t603 + t352 * t602;
t303 = t344 * t602 - t352 * t603;
t302 = -t341 * t607 + t342 * t611;
t301 = t341 * t611 + t342 * t607;
t300 = t306 * t612 + t477 * t608;
t299 = t306 * t608 - t477 * t612;
t298 = t312 * t612 - t386 * t608;
t297 = t311 * t612 - t390 * t608;
t296 = -pkin(1) * t371 + pkin(2) * t671 - pkin(6) * t414 - t376 * t611 - t425 * t607;
t295 = -t335 * t606 + t337 * t610;
t294 = -t334 * t606 + t336 * t610;
t293 = t335 * t610 + t337 * t606;
t292 = t334 * t610 + t336 * t606;
t291 = t308 * t612 + t608 * t673;
t290 = t308 * t608 - t612 * t673;
t289 = -t328 * t607 + t330 * t611;
t288 = -t327 * t607 + t329 * t611;
t287 = -t328 * t611 - t330 * t607;
t286 = -t327 * t611 - t329 * t607;
t285 = -pkin(1) * t367 + pkin(2) * t463 - pkin(6) * t396 - t373 * t611 - t408 * t607;
t284 = t289 * t612 + t630;
t283 = t288 * t612 - t630;
t282 = t302 * t612 + t385 * t608;
t281 = t302 * t608 - t385 * t612;
t280 = -pkin(2) * t305 - pkin(3) * t348;
t277 = -pkin(5) * t371 + t320 * t612 - t338 * t608;
t276 = -pkin(7) * t355 - t319 * t606 + t350 * t610;
t275 = -pkin(5) * t367 + t314 * t612 - t326 * t608;
t274 = -pkin(4) * t397 + pkin(8) * t279;
t273 = -pkin(7) * t341 - t313 * t606 + t345 * t610;
t272 = -pkin(6) * t352 - t318 * t607 + t321 * t611;
t271 = -pkin(3) * t673 + pkin(7) * t356 + t319 * t610 + t350 * t606;
t270 = -pkin(6) * t305 - pkin(7) * t645 - t333 * t607;
t269 = t291 * t603 + t307 * t602;
t268 = t291 * t602 - t307 * t603;
t267 = t300 * t603 + t305 * t602;
t266 = t300 * t602 - t305 * t603;
t265 = -pkin(3) * t385 + pkin(7) * t342 + t313 * t610 + t345 * t606;
t264 = -pkin(8) * t334 - t278;
t263 = -pkin(2) * t307 - pkin(3) * t355 - pkin(4) * t415 + t317;
t262 = -pkin(4) * t429 + pkin(8) * t336 + t279;
t261 = -t293 * t607 + t295 * t611;
t260 = -t292 * t607 + t294 * t611;
t259 = -t293 * t611 - t295 * t607;
t258 = t292 * t611 + t294 * t607;
t257 = t282 * t603 + t301 * t602;
t256 = t282 * t602 - t301 * t603;
t255 = t261 * t612 - t448 * t608;
t254 = t260 * t612 + t429 * t608;
t253 = t260 * t608 - t429 * t612;
t252 = -pkin(1) * t343 + pkin(2) * t486 - pkin(6) * t354 - t318 * t611 - t321 * t607;
t251 = -pkin(2) * t301 - pkin(3) * t341 - pkin(4) * t393 + t316;
t250 = -pkin(5) * t343 + t272 * t612 - t322 * t608;
t249 = t279 * t610 - t657;
t248 = t279 * t606 + t648;
t247 = -pkin(1) * t299 + pkin(2) * t477 - pkin(6) * t306 + pkin(7) * t654 - t333 * t611;
t246 = -pkin(2) * t258 - pkin(3) * t292 - pkin(4) * t334;
t245 = -pkin(6) * t307 - t271 * t607 + t276 * t611;
t244 = -pkin(5) * t299 + t270 * t612 - t280 * t608;
t243 = t254 * t603 + t258 * t602;
t242 = t254 * t602 - t258 * t603;
t241 = -pkin(6) * t301 - t265 * t607 + t273 * t611;
t240 = -pkin(7) * t292 - t262 * t606 + t264 * t610;
t239 = -pkin(3) * t429 + pkin(7) * t294 + t262 * t610 + t264 * t606;
t238 = -pkin(1) * t290 + pkin(2) * t673 - pkin(6) * t308 - t271 * t611 - t276 * t607;
t237 = -t248 * t607 + t249 * t611;
t236 = t248 * t611 + t249 * t607;
t235 = -pkin(7) * t248 - pkin(8) * t648 - t274 * t606;
t234 = t237 * t612 + t397 * t608;
t233 = t237 * t608 - t397 * t612;
t232 = -pkin(1) * t281 + pkin(2) * t385 - pkin(6) * t302 - t265 * t611 - t273 * t607;
t231 = -pkin(3) * t397 + pkin(7) * t249 - pkin(8) * t657 + t274 * t610;
t230 = -pkin(5) * t290 + t245 * t612 - t263 * t608;
t229 = -pkin(5) * t281 + t241 * t612 - t251 * t608;
t228 = -pkin(2) * t236 - pkin(3) * t248 - pkin(4) * t278;
t227 = t234 * t603 + t236 * t602;
t226 = t234 * t602 - t236 * t603;
t225 = -pkin(6) * t258 - t239 * t607 + t240 * t611;
t224 = -pkin(1) * t253 + pkin(2) * t429 - pkin(6) * t260 - t239 * t611 - t240 * t607;
t223 = -pkin(6) * t236 - t231 * t607 + t235 * t611;
t222 = -pkin(5) * t253 + t225 * t612 - t246 * t608;
t221 = -pkin(1) * t233 + pkin(2) * t397 - pkin(6) * t237 - t231 * t611 - t235 * t607;
t220 = -pkin(5) * t233 + t223 * t612 - t228 * t608;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t525, 0, 0, 0, 0, 0, 0, -t560, -t660, 0, t472, 0, 0, 0, 0, 0, 0, t453, t454, t603 * t523, t370, 0, 0, 0, 0, 0, 0, t324, t340, t304, t267, 0, 0, 0, 0, 0, 0, t257, t269, t243, t227; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t524, 0, 0, 0, 0, 0, 0, -t559, -t663, 0, t471, 0, 0, 0, 0, 0, 0, t451, t452, t602 * t523, t369, 0, 0, 0, 0, 0, 0, t323, t339, t303, t266, 0, 0, 0, 0, 0, 0, t256, t268, t242, t226; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t641, 0, 0, 0, 0, 0, 0, t573, -t572, 0, -t488, 0, 0, 0, 0, 0, 0, t497, t498, t522, t426, 0, 0, 0, 0, 0, 0, t367, t371, t343, t299, 0, 0, 0, 0, 0, 0, t281, t290, t253, t233; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t676, -t675, -t524, -qJ(1) * t524, 0, 0, t660, 0, -t560, t602 * qJDD(2), t603 * t528 + t602 * t623, t603 * t529 + t602 * t622, t603 * t488, -qJ(1) * t471 - (pkin(1) * t602 - pkin(5) * t603) * t488, t511 * t603 - t531 * t602, t485 * t603 - t519 * t602, t509 * t603 - t534 * t602, t510 * t603 - t530 * t602, t508 * t603 - t532 * t602, t603 * t545, -qJ(1) * t451 + t391 * t603 - t431 * t602, -qJ(1) * t452 + t392 * t603 - t430 * t602, t603 * t428 - t602 * t624, -qJ(1) * t369 + t347 * t603 - t364 * t602, t382 * t603 - t401 * t602, t346 * t603 - t351 * t602, t374 * t603 - t421 * t602, t381 * t603 - t400 * t602, t375 * t603 - t422 * t602, t432 * t603 - t433 * t602, -qJ(1) * t323 + t275 * t603 - t285 * t602, -qJ(1) * t339 + t277 * t603 - t296 * t602, -qJ(1) * t303 + t250 * t603 - t252 * t602, -qJ(1) * t266 + t244 * t603 - t247 * t602, t284 * t603 - t287 * t602, t255 * t603 - t259 * t602, t297 * t603 - t309 * t602, t283 * t603 - t286 * t602, t298 * t603 - t310 * t602, t325 * t603 - t331 * t602, -qJ(1) * t256 + t229 * t603 - t232 * t602, -qJ(1) * t268 + t230 * t603 - t238 * t602, -qJ(1) * t242 + t222 * t603 - t224 * t602, -qJ(1) * t226 + t220 * t603 - t221 * t602; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t675, -t676, t525, qJ(1) * t525, 0, 0, t663, 0, -t559, -t603 * qJDD(2), t602 * t528 - t603 * t623, t602 * t529 - t603 * t622, t602 * t488, qJ(1) * t472 - (-pkin(1) * t603 - pkin(5) * t602) * t488, t511 * t602 + t531 * t603, t485 * t602 + t519 * t603, t509 * t602 + t534 * t603, t510 * t602 + t530 * t603, t508 * t602 + t532 * t603, t602 * t545, qJ(1) * t453 + t391 * t602 + t431 * t603, qJ(1) * t454 + t392 * t602 + t430 * t603, t602 * t428 + t603 * t624, qJ(1) * t370 + t347 * t602 + t364 * t603, t382 * t602 + t401 * t603, t346 * t602 + t351 * t603, t374 * t602 + t421 * t603, t381 * t602 + t400 * t603, t375 * t602 + t422 * t603, t432 * t602 + t433 * t603, qJ(1) * t324 + t275 * t602 + t285 * t603, qJ(1) * t340 + t277 * t602 + t296 * t603, qJ(1) * t304 + t250 * t602 + t252 * t603, qJ(1) * t267 + t244 * t602 + t247 * t603, t284 * t602 + t287 * t603, t255 * t602 + t259 * t603, t297 * t602 + t309 * t603, t283 * t602 + t286 * t603, t298 * t602 + t310 * t603, t325 * t602 + t331 * t603, qJ(1) * t257 + t229 * t602 + t232 * t603, qJ(1) * t269 + t230 * t602 + t238 * t603, qJ(1) * t243 + t222 * t602 + t224 * t603, qJ(1) * t227 + t220 * t602 + t221 * t603; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t576, t577, 0, 0, 0, 0, t572, 0, t573, 0, -t529, t528, t489, pkin(1) * t576 + pkin(5) * t489, t544 * t608 + t617, t520 * t608 + t575 * t612, t538 * t608 - t607 * t632, t543 * t608 - t617, t536 * t608 - t611 * t632, -qJDD(3) * t612 + t567 * t608, -pkin(1) * t533 + pkin(5) * t500 + t461 * t612 + t478 * t608, -pkin(1) * t535 + pkin(5) * t501 + t462 * t612 + t479 * t608, pkin(5) * t523 + t436 * t608, pkin(5) * t427 - (-pkin(2) * t612 - pkin(6) * t608 - pkin(1)) * t436, t404 * t608 - t627, t353 * t608 + t515 * t612, t423 * t608 + t468 * t612, t403 * t608 + t627, t424 * t608 + t464 * t612, t434 * t608 - t598 * t612, -pkin(1) * t395 + pkin(5) * t368 + t314 * t608 + t326 * t612, -pkin(1) * t413 + pkin(5) * t372 + t320 * t608 + t338 * t612, -pkin(1) * t352 + pkin(5) * t344 + t272 * t608 + t322 * t612, -pkin(1) * t305 + pkin(5) * t300 + t270 * t608 + t280 * t612, t289 * t608 - t628, t261 * t608 + t448 * t612, t311 * t608 + t390 * t612, t288 * t608 + t628, t312 * t608 + t386 * t612, t332 * t608 - t612 * t619, -pkin(1) * t301 + pkin(5) * t282 + t241 * t608 + t251 * t612, -pkin(1) * t307 + pkin(5) * t291 + t245 * t608 + t263 * t612, -pkin(1) * t258 + pkin(5) * t254 + t225 * t608 + t246 * t612, -pkin(1) * t236 + pkin(5) * t234 + t223 * t608 + t228 * t612;];
tauB_reg = t1;
