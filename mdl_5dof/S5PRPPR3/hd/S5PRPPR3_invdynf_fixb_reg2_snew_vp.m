% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRPPR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d5,theta1,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:27
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRPPR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPPR3_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPPR3_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPPR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPPR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRPPR3_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:27:11
% EndTime: 2019-12-05 15:27:12
% DurationCPUTime: 1.42s
% Computational Cost: add. (1924->131), mult. (3246->152), div. (0->0), fcn. (2146->8), ass. (0->88)
t816 = sin(pkin(7));
t815 = sin(pkin(8));
t817 = cos(pkin(8));
t825 = qJD(2) ^ 2;
t793 = qJDD(2) * t817 - t815 * t825;
t794 = qJDD(2) * t815 + t817 * t825;
t821 = sin(qJ(2));
t823 = cos(qJ(2));
t830 = t821 * t793 + t823 * t794;
t847 = t816 * t830;
t832 = t823 * t793 - t821 * t794;
t846 = t816 * t832;
t818 = cos(pkin(7));
t845 = t818 * t830;
t844 = t818 * t832;
t800 = g(1) * t816 - t818 * g(2);
t792 = -qJDD(3) + t800;
t843 = t816 * t792;
t842 = t816 * t800;
t801 = -g(1) * t818 - g(2) * t816;
t813 = -g(3) + qJDD(1);
t781 = t823 * t801 + t821 * t813;
t820 = sin(qJ(5));
t811 = t820 ^ 2;
t822 = cos(qJ(5));
t812 = t822 ^ 2;
t837 = t811 + t812;
t836 = qJD(2) * qJD(5);
t835 = t820 * qJDD(2);
t834 = t822 * qJDD(2);
t833 = t822 * t825 * t820;
t780 = -t801 * t821 + t823 * t813;
t778 = qJDD(2) * pkin(2) + t780;
t779 = -pkin(2) * t825 + t781;
t755 = t778 * t817 - t779 * t815;
t824 = qJD(5) ^ 2;
t828 = -t812 * t825 - t824;
t827 = qJDD(5) - t833;
t754 = -qJDD(2) * pkin(3) - t825 * qJ(4) + qJDD(4) - t755;
t750 = -qJDD(2) * pkin(6) + t754;
t826 = t750 * t822 + t792 * t820;
t756 = t778 * t815 + t779 * t817;
t751 = -t825 * pkin(3) + qJDD(2) * qJ(4) + (2 * qJD(4) * qJD(2)) + t756;
t803 = -t811 * t825 - t824;
t802 = -qJDD(5) - t833;
t799 = t837 * t825;
t798 = qJDD(2) * t823 - t821 * t825;
t797 = -qJDD(2) * t821 - t823 * t825;
t796 = t837 * qJDD(2);
t791 = -0.2e1 * t820 * t836 + t834;
t790 = 0.2e1 * t822 * t836 + t835;
t787 = t818 * t800;
t782 = t818 * t792;
t777 = t802 * t822 - t820 * t828;
t776 = t803 * t822 - t820 * t827;
t775 = t802 * t820 + t822 * t828;
t774 = t820 * t803 + t822 * t827;
t772 = -t796 * t815 - t799 * t817;
t771 = t796 * t817 - t799 * t815;
t762 = t775 * t815 + t791 * t817;
t761 = t774 * t815 + t790 * t817;
t760 = -t775 * t817 + t791 * t815;
t759 = -t774 * t817 + t790 * t815;
t758 = -t780 * t821 + t781 * t823;
t757 = t780 * t823 + t781 * t821;
t753 = -t771 * t821 + t772 * t823;
t752 = t771 * t823 + t772 * t821;
t749 = -pkin(6) * t825 + t751;
t748 = t750 * t820 - t792 * t822;
t746 = -t760 * t821 + t762 * t823;
t745 = -t759 * t821 + t761 * t823;
t744 = t760 * t823 + t762 * t821;
t743 = t759 * t823 + t761 * t821;
t742 = -t755 * t815 + t756 * t817;
t741 = t755 * t817 + t756 * t815;
t740 = t751 * t817 + t754 * t815;
t739 = t751 * t815 - t754 * t817;
t738 = t748 * t822 - t820 * t826;
t737 = t820 * t748 + t822 * t826;
t736 = -t741 * t821 + t742 * t823;
t735 = t741 * t823 + t742 * t821;
t734 = t737 * t815 + t749 * t817;
t733 = -t737 * t817 + t749 * t815;
t732 = -t739 * t821 + t740 * t823;
t731 = t739 * t823 + t740 * t821;
t730 = -t733 * t821 + t734 * t823;
t729 = t733 * t823 + t734 * t821;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t801 * t818 - t842, 0, 0, 0, 0, 0, 0, t818 * t797, -t818 * t798, 0, t758 * t818 - t842, 0, 0, 0, 0, 0, 0, -t845, -t844, 0, t736 * t818 - t843, 0, 0, 0, 0, 0, 0, 0, t845, t844, t732 * t818 - t843, 0, 0, 0, 0, 0, 0, t745 * t818 + t776 * t816, t746 * t818 + t777 * t816, t818 * t753, t730 * t818 + t738 * t816; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t801 * t816 + t787, 0, 0, 0, 0, 0, 0, t816 * t797, -t816 * t798, 0, t758 * t816 + t787, 0, 0, 0, 0, 0, 0, -t847, -t846, 0, t736 * t816 + t782, 0, 0, 0, 0, 0, 0, 0, t847, t846, t732 * t816 + t782, 0, 0, 0, 0, 0, 0, t745 * t816 - t776 * t818, t746 * t816 - t777 * t818, t816 * t753, t730 * t816 - t738 * t818; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t813, 0, 0, 0, 0, 0, 0, t798, t797, 0, t757, 0, 0, 0, 0, 0, 0, t832, -t830, 0, t735, 0, 0, 0, 0, 0, 0, 0, -t832, t830, t731, 0, 0, 0, 0, 0, 0, t743, t744, t752, t729; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t801, 0, 0, 0, 0, 0, 0, t797, -t798, 0, t758, 0, 0, 0, 0, 0, 0, -t830, -t832, 0, t736, 0, 0, 0, 0, 0, 0, 0, t830, t832, t732, 0, 0, 0, 0, 0, 0, t745, t746, t753, t730; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t800, 0, 0, 0, 0, 0, 0, 0, 0, 0, t800, 0, 0, 0, 0, 0, 0, 0, 0, 0, t792, 0, 0, 0, 0, 0, 0, 0, 0, 0, t792, 0, 0, 0, 0, 0, 0, -t776, -t777, 0, -t738; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t813, 0, 0, 0, 0, 0, 0, t798, t797, 0, t757, 0, 0, 0, 0, 0, 0, t832, -t830, 0, t735, 0, 0, 0, 0, 0, 0, 0, -t832, t830, t731, 0, 0, 0, 0, 0, 0, t743, t744, t752, t729; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t825, -qJDD(2), 0, t781, 0, 0, 0, 0, 0, 0, -t794, -t793, 0, t742, 0, 0, 0, 0, 0, 0, 0, t794, t793, t740, 0, 0, 0, 0, 0, 0, t761, t762, t772, t734; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t825, 0, t780, 0, 0, 0, 0, 0, 0, t793, -t794, 0, t741, 0, 0, 0, 0, 0, 0, 0, -t793, t794, t739, 0, 0, 0, 0, 0, 0, t759, t760, t771, t733; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t800, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t792, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t792, 0, 0, 0, 0, 0, 0, t776, t777, 0, t738; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t825, -qJDD(2), 0, t756, 0, 0, 0, 0, 0, 0, 0, t825, qJDD(2), t751, 0, 0, 0, 0, 0, 0, t790, t791, -t799, t749; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t825, 0, t755, 0, 0, 0, 0, 0, 0, 0, -qJDD(2), t825, -t754, 0, 0, 0, 0, 0, 0, -t774, -t775, t796, -t737; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t792, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t792, 0, 0, 0, 0, 0, 0, t776, t777, 0, t738; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t792, 0, 0, 0, 0, 0, 0, t776, t777, 0, t738; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t825, -qJDD(2), -t751, 0, 0, 0, 0, 0, 0, -t790, -t791, t799, -t749; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t825, t754, 0, 0, 0, 0, 0, 0, t774, t775, -t796, t737; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t803, t802, -t835, t748; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t827, t828, -t834, t826; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t790, t791, -t799, t749;];
f_new_reg = t1;
