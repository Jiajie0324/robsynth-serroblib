% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPPPR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d5,theta3,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:46
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPPPR5_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPPR5_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPPR5_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPPR5_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPPR5_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPPR5_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:46:39
% EndTime: 2019-12-31 17:46:46
% DurationCPUTime: 6.88s
% Computational Cost: add. (24818->465), mult. (48515->554), div. (0->0), fcn. (25465->8), ass. (0->269)
t657 = sin(qJ(5));
t653 = sin(pkin(8));
t655 = cos(pkin(8));
t659 = cos(qJ(5));
t614 = (t653 * t657 - t655 * t659) * qJD(1);
t689 = t653 * t659 + t655 * t657;
t615 = t689 * qJD(1);
t718 = t614 * t615;
t755 = qJDD(5) - t718;
t757 = t657 * t755;
t756 = t659 * t755;
t656 = cos(pkin(7));
t654 = sin(pkin(7));
t707 = t654 * qJDD(1);
t738 = qJD(1) ^ 2;
t625 = t738 * t656 - t707;
t652 = g(3) + qJDD(3);
t598 = qJ(3) * t625 + t652 * t656;
t658 = sin(qJ(1));
t660 = cos(qJ(1));
t626 = qJDD(1) * t656 + t738 * t654;
t695 = qJ(3) * t626 + t652 * t654;
t743 = t660 * t625 + t626 * t658;
t754 = -pkin(5) * t743 + t660 * t598 + t658 * t695;
t649 = 0.2e1 * qJD(2) * qJD(1);
t633 = g(1) * t660 + g(2) * t658;
t650 = qJDD(1) * qJ(2);
t687 = t633 - t650;
t737 = pkin(1) + pkin(2);
t595 = -t737 * t738 + t649 - t687;
t632 = g(1) * t658 - g(2) * t660;
t685 = -qJDD(2) + t632;
t670 = -t738 * qJ(2) - t685;
t666 = -t737 * qJDD(1) + t670;
t562 = t656 * t595 + t654 * t666;
t698 = -t738 * pkin(3) - qJDD(1) * qJ(4) - 0.2e1 * qJD(1) * qJD(4) + t562;
t753 = -pkin(6) * qJDD(1) + t698;
t561 = t595 * t654 - t656 * t666;
t525 = t561 * t656 - t562 * t654;
t694 = t561 * t654 + t562 * t656;
t752 = t525 * t658 - t660 * t694;
t751 = t525 * t660 + t658 * t694;
t581 = -t625 * t658 + t660 * t626;
t750 = pkin(5) * t581 + t658 * t598 - t660 * t695;
t662 = t653 ^ 2;
t664 = t655 ^ 2;
t741 = t738 * (t662 + t664);
t621 = t655 * t741;
t706 = t655 * qJDD(1);
t584 = t621 * t654 + t656 * t706;
t588 = -t621 * t656 + t654 * t706;
t748 = t584 * t660 + t588 * t658;
t747 = t584 * t658 - t588 * t660;
t647 = t664 * t738;
t710 = t662 * t738;
t742 = -t710 - t647;
t612 = t689 * qJDD(1);
t684 = -t738 * qJ(4) + qJDD(4) + t561;
t725 = qJDD(1) * pkin(3);
t558 = t684 + t725;
t620 = t653 * t741;
t740 = (t558 + t725) * t653 + qJ(4) * t620;
t609 = t614 ^ 2;
t610 = t615 ^ 2;
t639 = t655 * t652;
t544 = t698 * t653 - t639;
t715 = t652 * t653;
t545 = t698 * t655 + t715;
t504 = t544 * t655 - t545 * t653;
t736 = pkin(3) * t504;
t711 = t655 * t738;
t532 = t639 + (pkin(4) * t711 - t753) * t653;
t535 = -pkin(4) * t647 + t753 * t655 + t715;
t480 = -t659 * t532 + t535 * t657;
t481 = t532 * t657 + t535 * t659;
t463 = -t480 * t659 + t481 * t657;
t735 = pkin(4) * t463;
t708 = t653 * qJDD(1);
t696 = t657 * t708 - t659 * t706;
t539 = t612 * t659 + t657 * t696;
t734 = pkin(4) * t539;
t505 = t544 * t653 + t655 * t545;
t469 = t505 * t656 + t558 * t654;
t731 = qJ(3) * t469;
t730 = qJ(3) * t525;
t729 = qJ(3) * t694;
t727 = qJ(4) * t656;
t726 = qJDD(1) * pkin(1);
t724 = t463 * t653;
t723 = t463 * t655;
t543 = (pkin(4) * t655 + pkin(3)) * qJDD(1) + t684 + t742 * pkin(6);
t722 = t543 * t657;
t721 = t543 * t659;
t569 = qJDD(5) + t718;
t720 = t569 * t657;
t719 = t569 * t659;
t714 = t653 * t558;
t713 = t655 * t558;
t712 = qJD(5) * t615;
t605 = t614 * qJD(5);
t705 = t654 * t718;
t704 = t656 * t718;
t635 = t653 * t711;
t703 = t653 * t706;
t468 = t505 * t654 - t558 * t656;
t701 = -qJ(3) * t468 - t654 * t736;
t464 = t480 * t657 + t659 * t481;
t603 = (pkin(1) * qJD(1) - 0.2e1 * qJD(2)) * qJD(1) + t687;
t606 = -t670 + t726;
t700 = -t660 * t603 - t606 * t658;
t699 = -t632 * t658 - t660 * t633;
t630 = qJDD(1) * t658 + t738 * t660;
t608 = -pkin(5) * t630 + g(3) * t660;
t631 = qJDD(1) * t660 - t658 * t738;
t607 = pkin(5) * t631 + g(3) * t658;
t697 = pkin(3) * t558 - qJ(4) * t505;
t592 = -t656 * t635 + t654 * t703;
t593 = t626 * t655 * t653;
t693 = t592 * t660 - t593 * t658;
t692 = t592 * t658 + t593 * t660;
t691 = t603 * t658 - t606 * t660;
t690 = t632 * t660 - t633 * t658;
t688 = -pkin(3) * t656 - qJ(4) * t654 - pkin(2);
t661 = qJD(5) ^ 2;
t567 = -t661 - t609;
t536 = t567 * t657 + t756;
t686 = pkin(4) * t536 - t480;
t450 = t464 * t653 + t723;
t458 = -pkin(4) * t543 + pkin(6) * t464;
t436 = -pkin(6) * t723 - qJ(4) * t450 - t458 * t653;
t442 = -pkin(3) * t450 - t735;
t451 = t464 * t655 - t724;
t448 = t451 * t654 - t543 * t656;
t683 = -qJ(3) * t448 + t656 * t436 - t442 * t654;
t541 = -t612 * t657 + t659 * t696;
t563 = -t609 - t610;
t455 = -pkin(4) * t563 + pkin(6) * t541 + t464;
t459 = -pkin(6) * t539 - t463;
t498 = t539 * t655 + t541 * t653;
t444 = -qJ(4) * t498 - t455 * t653 + t459 * t655;
t467 = -pkin(3) * t498 - t734;
t500 = -t539 * t653 + t541 * t655;
t470 = t500 * t654 - t563 * t656;
t682 = -qJ(3) * t470 + t656 * t444 - t467 * t654;
t537 = t567 * t659 - t757;
t572 = t696 + 0.2e1 * t712;
t476 = pkin(4) * t572 + pkin(6) * t537 - t721;
t495 = t536 * t655 + t537 * t653;
t502 = -pkin(6) * t536 + t722;
t454 = -qJ(4) * t495 - t476 * t653 + t502 * t655;
t460 = -pkin(3) * t495 - t686;
t496 = -t536 * t653 + t537 * t655;
t472 = t496 * t654 + t572 * t656;
t681 = -qJ(3) * t472 + t656 * t454 - t460 * t654;
t602 = -t610 - t661;
t551 = -t602 * t657 - t719;
t573 = -0.2e1 * t605 + t612;
t482 = pkin(4) * t573 + pkin(6) * t551 + t722;
t548 = t602 * t659 - t720;
t510 = -pkin(6) * t548 + t721;
t513 = t548 * t655 + t551 * t653;
t457 = -qJ(4) * t513 - t482 * t653 + t510 * t655;
t678 = pkin(4) * t548 - t481;
t461 = -pkin(3) * t513 - t678;
t516 = -t548 * t653 + t551 * t655;
t483 = t516 * t654 + t573 * t656;
t680 = -qJ(3) * t483 + t656 * t457 - t461 * t654;
t679 = pkin(3) * t706 + qJ(4) * t621 + t713;
t449 = t451 * t656 + t543 * t654;
t677 = -qJ(3) * t449 - t436 * t654 - t442 * t656;
t471 = t500 * t656 + t563 * t654;
t676 = -qJ(3) * t471 - t444 * t654 - t467 * t656;
t473 = t496 * t656 - t572 * t654;
t675 = -qJ(3) * t473 - t454 * t654 - t460 * t656;
t484 = t516 * t656 - t573 * t654;
t674 = -qJ(3) * t484 - t457 * t654 - t461 * t656;
t672 = pkin(3) * t543 + pkin(6) * t724 - qJ(4) * t451 - t458 * t655;
t643 = t662 * qJDD(1);
t645 = t664 * qJDD(1);
t624 = -t645 - t643;
t671 = -pkin(3) * t742 + qJ(4) * t624 + t505;
t669 = pkin(3) * t563 - qJ(4) * t500 - t455 * t655 - t459 * t653;
t668 = pkin(3) * t572 + qJ(4) * t496 + t476 * t655 + t502 * t653;
t667 = pkin(3) * t573 + qJ(4) * t516 + t482 * t655 + t510 * t653;
t634 = 0.2e1 * t703;
t629 = -t647 + t710;
t623 = -t645 + t643;
t619 = t685 + 0.2e1 * t726;
t613 = -t633 + t649 + 0.2e1 * t650;
t601 = -t610 + t661;
t600 = t609 - t661;
t586 = t620 * t656 - t653 * t707;
t583 = t620 * t654 + t656 * t708;
t580 = t624 * t656 + t654 * t742;
t579 = t623 * t656 + t629 * t654;
t578 = t624 * t654 - t656 * t742;
t577 = t623 * t654 - t629 * t656;
t575 = t610 - t609;
t574 = t605 - t612;
t571 = t696 + t712;
t566 = pkin(1) * t606 - qJ(2) * t603;
t565 = (t614 * t659 - t615 * t657) * qJD(5);
t564 = (t614 * t657 + t615 * t659) * qJD(5);
t557 = t574 * t659 + t657 * t712;
t556 = t574 * t657 - t659 * t712;
t555 = -t571 * t657 - t659 * t605;
t554 = t571 * t659 - t657 * t605;
t553 = t583 * t658 + t586 * t660;
t552 = -t583 * t660 + t586 * t658;
t550 = -t601 * t657 + t756;
t549 = t600 * t659 - t720;
t547 = t601 * t659 + t757;
t546 = t600 * t657 + t719;
t542 = t572 * t659 + t573 * t657;
t540 = t572 * t657 - t573 * t659;
t534 = -qJ(2) * t625 + t737 * t626 + t561;
t533 = qJ(2) * t626 + t737 * t625 + t562;
t531 = -t564 * t653 + t565 * t655;
t530 = t564 * t655 + t565 * t653;
t528 = qJDD(5) * t654 + t531 * t656;
t527 = -t656 * qJDD(5) + t531 * t654;
t522 = qJ(2) * t652 + t730;
t521 = t737 * t652 - t729;
t520 = -t556 * t653 + t557 * t655;
t519 = -t554 * t653 + t555 * t655;
t518 = t556 * t655 + t557 * t653;
t517 = t554 * t655 + t555 * t653;
t515 = -t547 * t653 + t550 * t655;
t514 = -t546 * t653 + t549 * t655;
t512 = t547 * t655 + t550 * t653;
t511 = t546 * t655 + t549 * t653;
t509 = t515 * t656 - t612 * t654;
t508 = t514 * t656 + t654 * t696;
t507 = t515 * t654 + t612 * t656;
t506 = t514 * t654 - t656 * t696;
t501 = -t540 * t653 + t542 * t655;
t499 = t540 * t655 + t542 * t653;
t494 = t520 * t656 + t705;
t493 = t519 * t656 - t705;
t492 = t520 * t654 - t704;
t491 = t519 * t654 + t704;
t490 = qJ(2) * t588 + t584 * t737 + t679;
t489 = qJ(2) * t586 - t737 * t583 - t740;
t488 = -qJ(3) * t583 - t545 * t654 + t656 * t713;
t487 = qJ(3) * t584 - t544 * t654 + t656 * t714;
t486 = qJ(3) * t586 + t545 * t656 + t654 * t713;
t485 = -qJ(3) * t588 - t544 * t656 - t654 * t714;
t478 = -qJ(3) * t578 + t504 * t656;
t477 = qJ(3) * t580 + t504 * t654;
t475 = t501 * t656 + t575 * t654;
t474 = t501 * t654 - t575 * t656;
t466 = qJ(2) * t580 - t737 * t578 - t671;
t465 = qJ(2) * t694 + t525 * t737;
t452 = -(qJ(2) - t727) * t504 + t701;
t447 = -t731 - (pkin(1) - t688) * t504;
t446 = qJ(2) * t469 - t737 * t468 + t697;
t445 = qJ(2) * t484 - t737 * t483 - t667;
t441 = qJ(2) * t513 + t680;
t440 = qJ(2) * t473 - t737 * t472 - t668;
t439 = t737 * t513 + t674;
t438 = qJ(2) * t495 + t681;
t437 = t737 * t495 + t675;
t434 = qJ(2) * t498 + t682;
t433 = qJ(2) * t471 - t737 * t470 + t669;
t432 = t737 * t498 + t676;
t431 = qJ(2) * t449 - t737 * t448 + t672;
t430 = qJ(2) * t450 + t683;
t429 = t737 * t450 + t677;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t631, 0, -t630, 0, -t607, -t608, -t690, -pkin(5) * t690, 0, t631, 0, 0, t630, 0, -t607, t691, t608, pkin(5) * t691 + (-pkin(1) * t658 + qJ(2) * t660) * g(3), 0, 0, -t581, 0, -t743, 0, -t750, t754, t751, -pkin(5) * t751 - t658 * t521 + t660 * t522, -t692, t577 * t658 + t579 * t660, t553, t692, t747, 0, -pkin(5) * t748 - t658 * t485 + t660 * t487, -pkin(5) * t552 + t486 * t658 + t488 * t660, t660 * t478 + t658 * t477 - pkin(5) * (-t578 * t660 + t580 * t658), t660 * t452 - t658 * t447 - pkin(5) * (-t468 * t660 + t469 * t658), t492 * t658 + t494 * t660, t474 * t658 + t475 * t660, t507 * t658 + t509 * t660, t491 * t658 + t493 * t660, t506 * t658 + t508 * t660, t527 * t658 + t528 * t660, t660 * t438 - t658 * t437 - pkin(5) * (-t472 * t660 + t473 * t658), t660 * t441 - t658 * t439 - pkin(5) * (-t483 * t660 + t484 * t658), t660 * t434 - t658 * t432 - pkin(5) * (-t470 * t660 + t471 * t658), t660 * t430 - t658 * t429 - pkin(5) * (-t448 * t660 + t449 * t658); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t630, 0, t631, 0, t608, -t607, t699, pkin(5) * t699, 0, t630, 0, 0, -t631, 0, t608, t700, t607, pkin(5) * t700 + (pkin(1) * t660 + qJ(2) * t658) * g(3), 0, 0, -t743, 0, t581, 0, t754, t750, t752, -pkin(5) * t752 + t660 * t521 + t658 * t522, t693, -t577 * t660 + t579 * t658, t552, -t693, -t748, 0, -pkin(5) * t747 + t660 * t485 + t658 * t487, pkin(5) * t553 - t486 * t660 + t488 * t658, t658 * t478 - t660 * t477 + pkin(5) * (t578 * t658 + t580 * t660), t658 * t452 + t660 * t447 + pkin(5) * (t468 * t658 + t469 * t660), -t492 * t660 + t494 * t658, -t474 * t660 + t475 * t658, -t507 * t660 + t509 * t658, -t491 * t660 + t493 * t658, -t506 * t660 + t508 * t658, -t527 * t660 + t528 * t658, t658 * t438 + t660 * t437 + pkin(5) * (t472 * t658 + t473 * t660), t658 * t441 + t660 * t439 + pkin(5) * (t483 * t658 + t484 * t660), t658 * t434 + t660 * t432 + pkin(5) * (t470 * t658 + t471 * t660), t658 * t430 + t660 * t429 + pkin(5) * (t448 * t658 + t449 * t660); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t632, t633, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t619, 0, t613, t566, 0, 0, 0, 0, 0, qJDD(1), t534, t533, 0, t465, t643, t634, 0, t645, 0, 0, t490, t489, t466, t446, -t518, -t499, -t512, -t517, -t511, -t530, t440, t445, t433, t431; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t738, 0, 0, -g(3), -t632, 0, 0, qJDD(1), 0, 0, t738, 0, 0, -t606, g(3), qJ(2) * g(3), 0, 0, -t626, 0, -t625, 0, t695, t598, t525, t522, -t593, t579, t586, t593, -t588, 0, t487, t488, t478, t452, t494, t475, t509, t493, t508, t528, t438, t441, t434, t430; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t738, 0, qJDD(1), 0, g(3), 0, -t633, 0, 0, t738, 0, 0, -qJDD(1), 0, g(3), -t603, 0, pkin(1) * g(3), 0, 0, -t625, 0, t626, 0, t598, -t695, -t694, t521, t592, -t577, -t583, -t592, -t584, 0, t485, -t486, -t477, t447, -t492, -t474, -t507, -t491, -t506, -t527, t437, t439, t432, t429; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t632, t633, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t619, 0, t613, t566, 0, 0, 0, 0, 0, qJDD(1), t534, t533, 0, t465, t643, t634, 0, t645, 0, 0, t490, t489, t466, t446, -t518, -t499, -t512, -t517, -t511, -t530, t440, t445, t433, t431; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t738, 0, 0, -t606, g(3), 0, 0, 0, -t626, 0, -t625, 0, t695, t598, t525, t730, -t593, t579, t586, t593, -t588, 0, t487, t488, t478, t504 * t727 + t701, t494, t475, t509, t493, t508, t528, t681, t680, t682, t683; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t606, 0, -t603, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(2) * t626 + t561, pkin(2) * t625 + t562, 0, pkin(2) * t525, t643, t634, 0, t645, 0, 0, pkin(2) * t584 + t679, -pkin(2) * t583 - t740, -pkin(2) * t578 - t671, -pkin(2) * t468 + t697, -t518, -t499, -t512, -t517, -t511, -t530, -pkin(2) * t472 - t668, -pkin(2) * t483 - t667, -pkin(2) * t470 + t669, -pkin(2) * t448 + t672; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t738, 0, 0, qJDD(1), 0, -g(3), t603, 0, 0, 0, 0, t625, 0, -t626, 0, -t598, t695, t694, -pkin(2) * t652 + t729, -t592, t577, t583, t592, t584, 0, -t485, t486, t477, -t504 * t688 + t731, t492, t474, t507, t491, t506, t527, -pkin(2) * t495 - t675, -pkin(2) * t513 - t674, -pkin(2) * t498 - t676, -pkin(2) * t450 - t677; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), 0, -t738, 0, 0, t652, t561, 0, -t703, t623, t620, t703, t621, 0, t714, t713, t504, qJ(4) * t504, t520, t501, t515, t519, t514, t531, t454, t457, t444, t436; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t738, 0, -qJDD(1), 0, -t652, 0, t562, 0, t635, -t629, t708, -t635, t706, 0, t544, t545, 0, t736, -t718, -t575, t612, t718, -t696, -qJDD(5), t460, t461, t467, t442; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), -t561, -t562, 0, 0, -t643, -0.2e1 * t703, 0, -t645, 0, 0, -t679, t740, t671, -t697, t518, t499, t512, t517, t511, t530, t668, t667, -t669, -t672; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t708, -t706, t635, 0, t647, 0, 0, t558, t544, 0, t557, t542, t550, t555, t549, t565, t502, t510, t459, -pkin(6) * t463; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t708, -t710, -t706, -t635, 0, -t558, 0, t545, 0, t556, t540, t547, t554, t546, t564, t476, t482, t455, t458; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t635, t629, -t708, t635, -t706, 0, -t544, -t545, 0, 0, t718, t575, -t612, -t718, t696, qJDD(5), t686, t678, t734, t735; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t574, t572, t755, -t605, t600, t605, 0, t543, t480, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t712, -t573, t601, t571, t569, t712, -t543, 0, t481, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t718, t575, -t612, -t718, t696, qJDD(5), -t480, -t481, 0, 0;];
m_new_reg = t1;
