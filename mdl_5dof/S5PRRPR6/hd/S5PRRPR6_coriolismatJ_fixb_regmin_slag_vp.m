% Calculate minimal parameter regressor of coriolis matrix for
% S5PRRPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d3,d5,theta1,theta4]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x22]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:33
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PRRPR6_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPR6_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPR6_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5PRRPR6_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:32:51
% EndTime: 2019-12-05 16:33:03
% DurationCPUTime: 3.31s
% Computational Cost: add. (2086->308), mult. (5727->509), div. (0->0), fcn. (6229->10), ass. (0->248)
t199 = sin(qJ(3));
t328 = cos(pkin(5));
t257 = t328 * t199;
t202 = cos(qJ(3));
t196 = sin(pkin(5));
t200 = sin(qJ(2));
t317 = t196 * t200;
t273 = t202 * t317;
t153 = t257 + t273;
t342 = -t153 / 0.2e1;
t197 = cos(pkin(10));
t201 = cos(qJ(5));
t304 = t201 * t197;
t195 = sin(pkin(10));
t198 = sin(qJ(5));
t310 = t198 * t195;
t346 = t304 - t310;
t347 = t346 * t202;
t220 = t304 / 0.2e1 - t310 / 0.2e1;
t203 = cos(qJ(2));
t316 = t196 * t203;
t271 = t197 * t316;
t323 = t153 * t195;
t101 = -t271 - t323;
t345 = -t101 / 0.2e1;
t152 = t199 * t317 - t328 * t202;
t344 = -t152 / 0.2e1;
t343 = t152 / 0.2e1;
t341 = t346 / 0.2e1;
t305 = t201 * t195;
t309 = t198 * t197;
t161 = t305 + t309;
t340 = -t161 / 0.2e1;
t339 = t161 / 0.2e1;
t189 = -t197 * pkin(4) - pkin(3);
t338 = t189 / 0.2e1;
t337 = -t195 / 0.2e1;
t336 = -t199 / 0.2e1;
t335 = t199 / 0.2e1;
t334 = -t202 / 0.2e1;
t333 = t202 / 0.2e1;
t332 = t202 * pkin(7);
t331 = pkin(8) + qJ(4);
t178 = t199 * pkin(3) - t202 * qJ(4);
t319 = t195 * t199;
t183 = pkin(7) * t319;
t143 = t197 * t178 + t183;
t314 = t197 * t202;
t93 = t199 * pkin(4) - pkin(8) * t314 + t143;
t330 = t198 * t93;
t329 = t201 * t93;
t327 = t101 * t195;
t272 = t195 * t316;
t322 = t153 * t197;
t102 = -t272 + t322;
t326 = t102 * t197;
t251 = -t202 * pkin(3) - t199 * qJ(4);
t171 = -pkin(2) + t251;
t156 = t197 * t171;
t318 = t195 * t202;
t137 = -pkin(7) * t318 + t156;
t325 = t137 * t195;
t184 = pkin(7) * t314;
t138 = t195 * t171 + t184;
t324 = t138 * t197;
t17 = (t153 - t326 + t327) * t152;
t321 = t17 * qJD(1);
t303 = t202 * t203;
t135 = (-t195 * t303 + t197 * t200) * t196;
t136 = (t195 * t200 + t197 * t303) * t196;
t270 = t199 * t316;
t18 = t101 * t135 + t102 * t136 + t152 * t270;
t320 = t18 * qJD(1);
t315 = t197 * t199;
t144 = -pkin(7) * t315 + t195 * t178;
t104 = -pkin(8) * t318 + t144;
t313 = t198 * t104;
t312 = t198 * t135;
t311 = t198 * t136;
t308 = t201 * t104;
t307 = t201 * t135;
t306 = t201 * t136;
t145 = t161 * t199;
t147 = t161 * t202;
t148 = t346 * t199;
t40 = -t145 * t347 - t148 * t147;
t302 = t40 * qJD(2);
t61 = t145 * t199 - t147 * t202;
t301 = t61 * qJD(2);
t62 = -t148 * t199 + t202 * t347;
t300 = t62 * qJD(2);
t221 = t309 / 0.2e1 + t305 / 0.2e1;
t214 = t340 + t221;
t66 = t214 * t202;
t299 = t66 * qJD(2);
t67 = (t340 - t221) * t202;
t298 = t67 * qJD(2);
t68 = t220 * t202 - t334 * t346;
t297 = t68 * qJD(2);
t213 = -t346 / 0.2e1 + t220;
t69 = t213 * t202;
t296 = t69 * qJD(2);
t180 = t195 ^ 2 + t197 ^ 2;
t295 = qJD(2) * t196;
t294 = qJD(4) * t202;
t293 = t145 * qJD(4);
t292 = t145 * qJD(5);
t291 = t148 * qJD(2);
t290 = t148 * qJD(4);
t289 = t148 * qJD(5);
t288 = t153 * qJD(3);
t194 = t199 ^ 2;
t158 = t180 * t194;
t287 = t158 * qJD(2);
t286 = t346 * qJD(3);
t154 = t346 * qJD(5);
t285 = t161 * qJD(3);
t284 = t161 * qJD(5);
t283 = t180 * qJD(3);
t182 = t202 ^ 2 - t194;
t282 = t182 * qJD(2);
t281 = t199 * qJD(2);
t280 = t199 * qJD(3);
t279 = t202 * qJD(2);
t278 = t202 * qJD(3);
t277 = pkin(2) * t281;
t276 = pkin(2) * t279;
t275 = pkin(7) * t278;
t274 = t332 / 0.2e1;
t269 = pkin(4) * t195 + pkin(7);
t268 = t199 * t294;
t267 = t203 * t295;
t266 = t199 * t278;
t265 = t199 * t279;
t264 = t197 * t345;
t263 = t102 * t336;
t262 = t153 * t335;
t261 = -t316 / 0.2e1;
t260 = t316 / 0.2e1;
t256 = t180 * t152;
t134 = t148 * t279;
t255 = t67 * qJD(3) - t134;
t254 = qJD(3) * t189 + qJD(4);
t253 = t199 * t261;
t252 = t199 * t260;
t235 = t201 * t101 - t198 * t102;
t205 = t145 * t342 + t235 * t336;
t246 = t346 * t252;
t3 = -t246 + t205;
t166 = t269 * t199;
t167 = t269 * t202;
t103 = -pkin(8) * t319 + t138;
t90 = -pkin(8) * t315 + t156 + (-pkin(7) * t195 - pkin(4)) * t202;
t46 = t198 * t103 - t201 * t90;
t7 = (-t313 + t329) * t202 + t46 * t199 - t167 * t145 - t166 * t147;
t250 = -t3 * qJD(1) - t7 * qJD(2);
t234 = t198 * t101 + t201 * t102;
t204 = t148 * t342 + t234 * t335;
t245 = t161 * t252;
t4 = t245 + t204;
t47 = t201 * t103 + t198 * t90;
t8 = t167 * t148 + t166 * t347 + (t308 + t330) * t202 - t47 * t199;
t249 = -t4 * qJD(1) + t8 * qJD(2);
t225 = t136 * t197 / 0.2e1 + t135 * t337;
t215 = t225 * qJ(4);
t227 = -t102 * t144 / 0.2e1 + t143 * t345;
t224 = -t325 / 0.2e1 + t324 / 0.2e1;
t53 = t274 - t224;
t1 = (pkin(3) * t261 + pkin(7) * t342) * t199 + t215 - t53 * t152 + t227;
t30 = t199 * pkin(7) ^ 2 * t202 + t137 * t143 + t138 * t144;
t248 = -t1 * qJD(1) + t30 * qJD(2);
t27 = -t166 * t148 - t47 * t202;
t206 = t148 * t344 + t234 * t334;
t222 = -t311 / 0.2e1 + t307 / 0.2e1;
t9 = t206 + t222;
t247 = t9 * qJD(1) + t27 * qJD(2);
t207 = -t145 * t343 + t235 * t333;
t223 = -t312 / 0.2e1 - t306 / 0.2e1;
t10 = -t207 + t223;
t26 = -t166 * t145 - t46 * t202;
t244 = t10 * qJD(1) - t26 * qJD(2);
t176 = t331 * t195;
t177 = t331 * t197;
t108 = -t198 * t176 + t201 * t177;
t209 = t108 * t333 + t148 * t338 + t166 * t339;
t230 = -t313 / 0.2e1 + t329 / 0.2e1;
t13 = -t209 + t230;
t36 = t214 * t152;
t243 = t36 * qJD(1) + t13 * qJD(2);
t107 = t201 * t176 + t198 * t177;
t210 = t107 * t334 - t145 * t338 + t166 * t341;
t229 = -t330 / 0.2e1 - t308 / 0.2e1;
t14 = -t210 + t229;
t37 = t213 * t152;
t242 = t37 * qJD(1) + t14 * qJD(2);
t20 = (-t136 / 0.2e1 + t101 * t334) * t197 + (t135 / 0.2e1 + t102 * t334) * t195;
t25 = (t137 * t202 + t143 * t199) * t197 + (t138 * t202 + t144 * t199) * t195;
t241 = -t20 * qJD(1) + t25 * qJD(2);
t21 = (t195 * t260 + t102 / 0.2e1 - t322 / 0.2e1) * t199;
t52 = t144 * t202 + (-t138 + 0.2e1 * t184) * t199;
t240 = t21 * qJD(1) - t52 * qJD(2);
t22 = (t197 * t261 + t345 - t323 / 0.2e1) * t199;
t51 = -t137 * t199 + (t143 - 0.2e1 * t183) * t202;
t239 = t22 * qJD(1) + t51 * qJD(2);
t226 = t102 * t337 + t264;
t34 = (t260 - t226) * t199;
t56 = (t137 * t197 + t138 * t195) * t199;
t238 = t34 * qJD(1) + t56 * qJD(2);
t29 = -t145 * t346 - t161 * t148;
t55 = t145 ^ 2 - t148 ^ 2;
t237 = t55 * qJD(2) + t29 * qJD(3);
t65 = -t161 ^ 2 + t346 ^ 2;
t236 = t29 * qJD(2) + t65 * qJD(3);
t233 = -t143 * t195 + t144 * t197;
t232 = -t145 * qJD(2) + t286;
t231 = t285 + t291;
t228 = -t327 / 0.2e1 + t326 / 0.2e1;
t49 = -t145 * t339 + t148 * t341;
t219 = t49 * qJD(3) - t145 * t291;
t218 = -t49 * qJD(2) - t285 * t346;
t217 = t66 * qJD(3) - t134 + t289;
t169 = t180 * qJ(4);
t211 = t257 / 0.2e1 + t273 / 0.2e1;
t31 = t211 - t228;
t212 = t31 * qJD(1) + t53 * qJD(2) - t169 * qJD(3);
t208 = t251 * qJD(3) + t294;
t190 = t280 / 0.2e1;
t157 = (t279 - qJD(5) / 0.2e1) * t199;
t54 = t274 + t224;
t50 = t68 * qJD(3) - t145 * t279;
t48 = t49 * qJD(5);
t39 = (t221 + t339) * t152;
t38 = (t220 + t341) * t152;
t35 = t195 * t263 + t199 * t264 + t252;
t33 = t69 * qJD(3) + (-qJD(5) + t279) * t145;
t32 = t211 + t228;
t28 = t29 * qJD(5);
t24 = t195 * t252 + t197 * t262 + t263;
t23 = t101 * t335 + t195 * t262 + t197 * t253;
t19 = t226 * t202 + t225;
t16 = t210 + t229;
t15 = t209 + t230;
t12 = -t206 + t222;
t11 = t207 + t223;
t6 = -t204 + t245;
t5 = -t246 - t205;
t2 = pkin(3) * t253 + pkin(7) * t262 + t152 * t274 + t324 * t344 + t325 * t343 + t215 - t227;
t41 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t18 * qJD(2) + t17 * qJD(3), 0, 0, 0, 0, 0, 0, 0; 0, 0, -t200 * t295, -t267, 0, 0, 0, 0, 0, (-t200 * t279 - t203 * t280) * t196, (t200 * t281 - t203 * t278) * t196, (-t135 * t202 + t194 * t272) * qJD(2) + t23 * qJD(3), (t136 * t202 + t194 * t271) * qJD(2) + t24 * qJD(3), t19 * qJD(3) + (-t135 * t197 - t136 * t195) * t281, t320 + (t194 * pkin(7) * t316 + t135 * t137 + t136 * t138) * qJD(2) + t2 * qJD(3) + t35 * qJD(4), 0, 0, 0, 0, 0, (-(t307 - t311) * t202 + t145 * t270) * qJD(2) + t5 * qJD(3) + t12 * qJD(5), (t148 * t270 + (t306 + t312) * t202) * qJD(2) + t6 * qJD(3) + t11 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, -t199 * t267 - t288, t152 * qJD(3) - t202 * t267, t23 * qJD(2) - t197 * t288, t24 * qJD(2) + t195 * t288, t19 * qJD(2) - qJD(3) * t256, t321 + t2 * qJD(2) + (-t153 * pkin(3) - qJ(4) * t256) * qJD(3) + t32 * qJD(4), 0, 0, 0, 0, 0, t5 * qJD(2) + t39 * qJD(5) - t153 * t286, t6 * qJD(2) + t38 * qJD(5) + t153 * t285; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35 * qJD(2) + t32 * qJD(3), 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t12 * qJD(2) + t39 * qJD(3) - qJD(5) * t234, t11 * qJD(2) + t38 * qJD(3) - qJD(5) * t235; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t22 * qJD(3), -t21 * qJD(3), t20 * qJD(3), -t1 * qJD(3) - t34 * qJD(4) - t320, 0, 0, 0, 0, 0, -t3 * qJD(3) - t9 * qJD(5), -t4 * qJD(3) - t10 * qJD(5); 0, 0, 0, 0, t266, t182 * qJD(3), 0, 0, 0, -pkin(2) * t280, -pkin(2) * t278, -t51 * qJD(3) + t197 * t268, t52 * qJD(3) - t195 * t268, -t25 * qJD(3) + t158 * qJD(4), t30 * qJD(3) - t56 * qJD(4), (qJD(3) * t347 - t292) * t148, t40 * qJD(3) + t55 * qJD(5), -t62 * qJD(3) + t202 * t292, -t61 * qJD(3) + t202 * t289, -t266, -t7 * qJD(3) - t27 * qJD(5) + t202 * t290, t8 * qJD(3) + t26 * qJD(5) - t202 * t293; 0, 0, 0, 0, t265, t282, t278, -t280, 0, -t275 - t277, pkin(7) * t280 - t276, -t184 * qJD(3) + t195 * t208 - t239, t195 * t275 + t197 * t208 - t240, qJD(3) * t233 - t241, (-pkin(3) * t332 + qJ(4) * t233) * qJD(3) + t54 * qJD(4) + t248, t231 * t347 + t48, t302 + (-t161 * t147 + t346 * t347) * qJD(3) + t28, t69 * qJD(5) + t161 * t280 - t300, -t66 * qJD(5) + t280 * t346 - t301, -t157, (-t107 * t199 + t189 * t147 - t167 * t346) * qJD(3) - t67 * qJD(4) + t15 * qJD(5) + t250, (-t108 * t199 + t167 * t161 + t189 * t347) * qJD(3) + t68 * qJD(4) + t16 * qJD(5) + t249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (qJD(3) * t195 + t197 * t281) * t202, (qJD(3) * t197 - t195 * t281) * t202, t287, t54 * qJD(3) - t238, 0, 0, 0, 0, 0, -t255, t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t219, t237, t33, -t217, t190, t15 * qJD(3) - t47 * qJD(5) - t247, t16 * qJD(3) + t46 * qJD(5) - t244; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t22 * qJD(2), t21 * qJD(2), -t20 * qJD(2), t1 * qJD(2) - t31 * qJD(4) - t321, 0, 0, 0, 0, 0, t3 * qJD(2) - t36 * qJD(5), t4 * qJD(2) - t37 * qJD(5); 0, 0, 0, 0, -t265, -t282, 0, 0, 0, t277, t276, t239, t240, t241, -t53 * qJD(4) - t248, -t291 * t347 + t48, t28 - t302, -t68 * qJD(5) + t300, -t67 * qJD(5) + t301, t157, -t66 * qJD(4) - t13 * qJD(5) - t250, -t69 * qJD(4) - t14 * qJD(5) - t249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t180 * qJD(4), t169 * qJD(4), t346 * t284, t65 * qJD(5), 0, 0, 0, t189 * t284, t189 * t154; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t283, -t212, 0, 0, 0, 0, 0, -t299, -t296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t218, t236, t154 - t297, -t284 - t298, -t281 / 0.2e1, -t108 * qJD(5) + t189 * t285 - t243, t107 * qJD(5) + t189 * t286 - t242; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34 * qJD(2) + t31 * qJD(3), 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t197 * t265, t195 * t265, -t287, t53 * qJD(3) + t238, 0, 0, 0, 0, 0, t217, t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t283, t212, 0, 0, 0, 0, 0, t284 + t299, t154 + t296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t231, t232; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t9 * qJD(2) + t36 * qJD(3), t10 * qJD(2) + t37 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t219, -t237, t50, t255, t190, t13 * qJD(3) + t247 - t290, t14 * qJD(3) + t244 + t293; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t218, -t236, t297, t298, t281 / 0.2e1, -t161 * t254 + t243, -t254 * t346 + t242; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t231, -t232; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t41;
