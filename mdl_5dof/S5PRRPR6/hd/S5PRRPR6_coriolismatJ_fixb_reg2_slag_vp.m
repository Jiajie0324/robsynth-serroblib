% Calculate inertial parameters regressor of coriolis matrix for
% S5PRRPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d3,d5,theta1,theta4]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:33
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PRRPR6_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPR6_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPR6_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5PRRPR6_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:32:54
% EndTime: 2019-12-05 16:33:10
% DurationCPUTime: 6.44s
% Computational Cost: add. (6052->427), mult. (14949->671), div. (0->0), fcn. (16496->10), ass. (0->319)
t312 = sin(pkin(10));
t481 = cos(qJ(5));
t406 = t481 * t312;
t314 = cos(pkin(10));
t315 = sin(qJ(5));
t454 = t315 * t314;
t275 = t406 + t454;
t316 = sin(qJ(3));
t254 = t275 * t316;
t405 = t481 * t314;
t455 = t315 * t312;
t502 = t405 - t455;
t257 = t502 * t316;
t488 = t275 / 0.2e1;
t491 = t502 / 0.2e1;
t125 = -t254 * t488 + t257 * t491;
t506 = t125 * qJD(5);
t426 = t275 * qJD(3);
t505 = -t125 * qJD(2) - t426 * t502;
t434 = t257 * qJD(2);
t504 = t125 * qJD(3) - t254 * t434;
t475 = cos(pkin(5));
t392 = t475 * t316;
t318 = cos(qJ(3));
t313 = sin(pkin(5));
t317 = sin(qJ(2));
t463 = t313 * t317;
t415 = t318 * t463;
t264 = t392 + t415;
t319 = cos(qJ(2));
t462 = t313 * t319;
t413 = t314 * t462;
t359 = -t264 * t312 - t413;
t503 = -t359 / 0.2e1;
t310 = t316 ^ 2;
t311 = t318 ^ 2;
t298 = t311 - t310;
t501 = t257 ^ 2;
t500 = t275 ^ 2;
t414 = t312 * t462;
t469 = t264 * t314;
t206 = -t414 + t469;
t126 = t315 * t206 - t481 * t359;
t499 = t126 / 0.2e1;
t127 = t481 * t206 + t315 * t359;
t498 = t127 / 0.2e1;
t477 = pkin(8) + qJ(4);
t290 = t477 * t314;
t393 = t477 * t312;
t213 = t481 * t290 - t315 * t393;
t497 = -t213 / 0.2e1;
t496 = -t254 / 0.2e1;
t495 = -t257 / 0.2e1;
t263 = t316 * t463 - t475 * t318;
t494 = -t263 / 0.2e1;
t493 = t263 / 0.2e1;
t492 = t264 / 0.2e1;
t490 = -t502 / 0.2e1;
t489 = -t275 / 0.2e1;
t480 = t312 * pkin(4);
t411 = pkin(7) + t480;
t281 = t411 * t316;
t487 = t281 / 0.2e1;
t305 = -t314 * pkin(4) - pkin(3);
t486 = t305 / 0.2e1;
t485 = -t312 / 0.2e1;
t484 = -t316 / 0.2e1;
t483 = -t318 / 0.2e1;
t482 = t318 / 0.2e1;
t479 = t318 * pkin(3);
t478 = t318 * pkin(7);
t466 = t275 * t257;
t471 = t254 * t502;
t131 = t466 - t471;
t476 = t131 * qJD(4);
t474 = t206 * t314;
t382 = -t316 * qJ(4) - t479;
t361 = -pkin(2) + t382;
t464 = t312 * t318;
t242 = -pkin(7) * t464 + t314 * t361;
t473 = t242 * t312;
t460 = t314 * t318;
t301 = pkin(7) * t460;
t243 = t312 * t361 + t301;
t472 = t243 * t314;
t453 = t318 * t319;
t240 = (-t312 * t453 + t314 * t317) * t313;
t408 = t481 * t240;
t241 = (t312 * t317 + t314 * t453) * t313;
t456 = t315 * t241;
t144 = t408 - t456;
t407 = t481 * t241;
t457 = t315 * t240;
t145 = t407 + t457;
t412 = t316 * t462;
t387 = t263 * t412;
t26 = -t126 * t144 + t127 * t145 + t387;
t470 = t26 * qJD(1);
t468 = t264 * t316;
t154 = t263 * t275;
t155 = t263 * t502;
t27 = -t126 * t154 - t127 * t155 + t263 * t264;
t467 = t27 * qJD(1);
t465 = t312 * t316;
t461 = t314 * t316;
t292 = t316 * pkin(3) - t318 * qJ(4);
t300 = pkin(7) * t465;
t249 = t314 * t292 + t300;
t196 = t316 * pkin(4) - pkin(8) * t460 + t249;
t459 = t315 * t196;
t250 = -pkin(7) * t461 + t312 * t292;
t209 = -pkin(8) * t464 + t250;
t458 = t315 * t209;
t340 = t359 * t312;
t54 = (t264 + t340 - t474) * t263;
t452 = t54 * qJD(1);
t55 = t206 * t241 + t240 * t359 + t387;
t451 = t55 * qJD(1);
t308 = t312 ^ 2;
t309 = t314 ^ 2;
t296 = t309 + t308;
t450 = qJD(2) * t313;
t449 = qJD(2) * t318;
t448 = qJD(3) * t314;
t447 = qJD(4) * t318;
t256 = t275 * t318;
t294 = t318 * t455;
t259 = t318 * t405 - t294;
t111 = -t259 * t254 - t257 * t256;
t446 = t111 * qJD(2);
t135 = -t242 * t316 + (t249 - 0.2e1 * t300) * t318;
t445 = t135 * qJD(2);
t137 = (t263 * t316 + t264 * t318 - t463) * t462;
t444 = t137 * qJD(1);
t156 = t254 * t316 - t256 * t318;
t443 = t156 * qJD(2);
t157 = -t257 * t316 + t259 * t318;
t442 = t157 * qJD(2);
t342 = t454 / 0.2e1 + t406 / 0.2e1;
t334 = t489 + t342;
t166 = t334 * t318;
t441 = t166 * qJD(2);
t167 = (t489 - t342) * t318;
t440 = t167 * qJD(2);
t383 = t405 / 0.2e1;
t168 = -t502 * t483 + t318 * t383 - t294 / 0.2e1;
t439 = t168 * qJD(2);
t169 = t294 / 0.2e1 + (t491 - t405 / 0.2e1) * t318;
t438 = t169 * qJD(2);
t437 = t254 * qJD(2);
t436 = t254 * qJD(4);
t435 = t254 * qJD(5);
t433 = t257 * qJD(4);
t432 = t257 * qJD(5);
t431 = t264 * qJD(3);
t270 = t296 * t310;
t430 = t270 * qJD(2);
t429 = t502 * qJD(3);
t265 = t502 * qJD(5);
t273 = t298 * t312;
t428 = t273 * qJD(2);
t274 = t298 * t314;
t427 = t274 * qJD(2);
t425 = t275 * qJD(5);
t424 = t296 * qJD(3);
t423 = t298 * qJD(2);
t422 = t316 * qJD(2);
t421 = t316 * qJD(3);
t420 = t318 * qJD(3);
t419 = pkin(2) * t422;
t418 = pkin(2) * t449;
t417 = pkin(7) * t420;
t416 = t478 / 0.2e1;
t410 = t481 * t196;
t409 = t481 * t209;
t404 = t312 * t448;
t403 = t316 * t447;
t400 = t502 * t425;
t399 = t319 * t450;
t398 = t316 * t420;
t299 = t318 * t422;
t397 = t206 * t484;
t396 = t468 / 0.2e1;
t395 = -t462 / 0.2e1;
t394 = t462 / 0.2e1;
t391 = t296 * t263;
t390 = -0.2e1 * t312 * t461;
t239 = t318 * t434;
t389 = t167 * qJD(3) - t239;
t388 = qJD(3) * t305 + qJD(4);
t386 = t314 * t299;
t385 = t316 * t395;
t384 = t316 * t394;
t207 = -pkin(8) * t465 + t243;
t321 = (-t312 * pkin(7) - pkin(4)) * t318 + (-t477 * t316 - pkin(2) - t479) * t314;
t117 = t315 * t207 - t481 * t321;
t118 = t481 * t207 + t315 * t321;
t121 = t410 - t458;
t122 = t409 + t459;
t14 = t117 * t259 - t118 * t256 - t121 * t257 - t122 * t254;
t323 = t259 * t499 - t127 * t256 / 0.2e1 + t154 * t495 - t155 * t496;
t354 = t144 * t489 + t145 * t491;
t8 = t323 - t354;
t381 = t8 * qJD(1) + t14 * qJD(2);
t282 = t411 * t318;
t19 = -t117 * t121 + t118 * t122 + t281 * t282;
t320 = -t126 * t121 / 0.2e1 + t122 * t498 - t154 * t117 / 0.2e1 - t155 * t118 / 0.2e1 + t282 * t493 + t264 * t487;
t212 = t315 * t290 + t481 * t393;
t328 = t144 * t212 / 0.2e1 + t145 * t497 + t305 * t385;
t2 = t320 + t328;
t380 = t2 * qJD(1) + t19 * qJD(2);
t352 = -t473 / 0.2e1 + t472 / 0.2e1;
t138 = t416 - t352;
t327 = -t206 * t250 / 0.2e1 + t249 * t503;
t353 = t241 * t314 / 0.2e1 + t240 * t485;
t338 = t353 * qJ(4);
t20 = pkin(3) * t385 - pkin(7) * t468 / 0.2e1 + t338 - t138 * t263 + t327;
t78 = t318 * pkin(7) ^ 2 * t316 + t242 * t249 + t243 * t250;
t379 = -t20 * qJD(1) + t78 * qJD(2);
t333 = t154 * t482 - t254 * t492 + t256 * t494;
t28 = (-t394 * t502 + t499) * t316 + t333;
t32 = t117 * t316 + t121 * t318 - t282 * t254 - t281 * t256;
t378 = -t28 * qJD(1) - t32 * qJD(2);
t332 = -t155 * t483 + t259 * t494 + t264 * t495;
t29 = (t275 * t394 + t498) * t316 + t332;
t33 = -t118 * t316 + t122 * t318 + t282 * t257 + t281 * t259;
t377 = -t29 * qJD(1) + t33 * qJD(2);
t358 = t127 * t496 + t257 * t499;
t34 = t384 - t358;
t38 = t117 * t257 - t118 * t254;
t376 = t34 * qJD(1) - t38 * qJD(2);
t343 = -t456 / 0.2e1 + t408 / 0.2e1;
t355 = t127 * t482 + t257 * t493;
t40 = t343 - t355;
t67 = -t118 * t318 - t281 * t257;
t375 = t40 * qJD(1) + t67 * qJD(2);
t344 = -t457 / 0.2e1 - t407 / 0.2e1;
t356 = t126 * t483 - t254 * t493;
t41 = t344 - t356;
t66 = -t117 * t318 - t281 * t254;
t374 = t41 * qJD(1) - t66 * qJD(2);
t335 = t314 * t503;
t326 = t206 * t485 + t335;
t322 = t326 * t318;
t57 = t322 - t353;
t65 = (t242 * t318 + t249 * t316) * t314 + (t243 * t318 + t250 * t316) * t312;
t373 = -t57 * qJD(1) + t65 * qJD(2);
t372 = -t249 * t312 + t250 * t314;
t107 = t334 * t263;
t330 = t213 * t482 + t257 * t486 + t275 * t487;
t345 = -t458 / 0.2e1 + t410 / 0.2e1;
t44 = -t330 + t345;
t371 = t107 * qJD(1) + t44 * qJD(2);
t341 = t383 - t455 / 0.2e1;
t108 = (t490 + t341) * t263;
t331 = t212 * t483 - t254 * t486 + t281 * t491;
t346 = -t459 / 0.2e1 - t409 / 0.2e1;
t45 = -t331 + t346;
t370 = t108 * qJD(1) + t45 * qJD(2);
t136 = t250 * t318 + (-t243 + 0.2e1 * t301) * t316;
t60 = (t312 * t394 + t206 / 0.2e1 - t469 / 0.2e1) * t316;
t369 = t60 * qJD(1) - t136 * qJD(2);
t141 = (t242 * t314 + t243 * t312) * t316;
t97 = (t394 - t326) * t316;
t368 = t97 * qJD(1) + t141 * qJD(2);
t253 = t254 ^ 2;
t140 = t253 - t501;
t69 = -t466 - t471;
t367 = t140 * qJD(2) + t69 * qJD(3);
t267 = t502 ^ 2;
t163 = t267 - t500;
t366 = t69 * qJD(2) + t163 * qJD(3);
t165 = t253 + t501;
t365 = t165 * qJD(2) + t131 * qJD(3);
t208 = t267 + t500;
t364 = t131 * qJD(2) + t208 * qJD(3);
t363 = t429 - t437;
t362 = t426 + t434;
t360 = (pkin(7) / 0.2e1 + t480 / 0.2e1) * t318;
t357 = t126 * t488 + t127 * t491;
t347 = t166 * qJD(3) - t239 + t432;
t324 = t117 * t489 + t118 * t490 + t212 * t495 - t254 * t497;
t23 = t360 + t324;
t336 = t392 / 0.2e1 + t415 / 0.2e1;
t36 = t336 - t357;
t96 = t212 * t275 + t213 * t502;
t339 = t36 * qJD(1) + t23 * qJD(2) - t96 * qJD(3);
t284 = t296 * qJ(4);
t325 = t474 / 0.2e1 - t340 / 0.2e1;
t87 = -t325 + t336;
t337 = t87 * qJD(1) + t138 * qJD(2) - t284 * qJD(3);
t329 = t382 * qJD(3) + t447;
t306 = t421 / 0.2e1;
t291 = t310 * pkin(7) * t462;
t268 = qJD(5) * t484 + t299;
t139 = t416 + t352;
t134 = t168 * qJD(3) - t318 * t437;
t110 = (t342 + t488) * t263;
t109 = (t341 + t491) * t263;
t98 = t312 * t397 + t316 * t335 + t384;
t95 = -t169 * qJD(3) + (-qJD(5) + t449) * t254;
t88 = t325 + t336;
t68 = t69 * qJD(5);
t63 = t312 * t384 + t314 * t396 + t397;
t62 = t359 * t316 / 0.2e1 + t312 * t396 + t314 * t385;
t56 = t322 + t353;
t47 = t331 + t346;
t46 = t330 + t345;
t43 = t343 + t355;
t42 = t344 + t356;
t37 = t336 + t357;
t35 = t384 + t358;
t31 = t127 * t484 + t275 * t384 - t332;
t30 = t126 * t484 - t384 * t502 - t333;
t24 = t360 - t324;
t21 = t472 * t494 + t473 * t493 + t263 * t416 + (pkin(3) * t395 + pkin(7) * t492) * t316 + t338 - t327;
t7 = t323 + t354;
t1 = t320 - t328;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t137 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t55 * qJD(2) + t54 * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t26 * qJD(2) + t27 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t317 * t450, -t399, 0, 0, 0, 0, 0, 0, 0, 0, (-t317 * t449 - t319 * t421) * t313, (t317 * t422 - t319 * t420) * t313, (t310 + t311) * t399, t444 + (t291 + (pkin(7) * t311 * t319 - pkin(2) * t317) * t313) * qJD(2), 0, 0, 0, 0, 0, 0, (-t240 * t318 + t310 * t414) * qJD(2) + t62 * qJD(3), (t241 * t318 + t310 * t413) * qJD(2) + t63 * qJD(3), t56 * qJD(3) + (-t240 * t314 - t241 * t312) * t422, t451 + (t240 * t242 + t241 * t243 + t291) * qJD(2) + t21 * qJD(3) + t98 * qJD(4), 0, 0, 0, 0, 0, 0, (-t144 * t318 + t254 * t412) * qJD(2) + t30 * qJD(3) + t43 * qJD(5), (t145 * t318 + t257 * t412) * qJD(2) + t31 * qJD(3) + t42 * qJD(5), (-t144 * t257 - t145 * t254) * qJD(2) + t7 * qJD(3), t470 + (-t144 * t117 + t145 * t118 + t281 * t412) * qJD(2) + t1 * qJD(3) + t35 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t316 * t399 - t431, t263 * qJD(3) - t318 * t399, 0, 0, 0, 0, 0, 0, 0, 0, t62 * qJD(2) - t314 * t431, t63 * qJD(2) + t312 * t431, t56 * qJD(2) - qJD(3) * t391, t452 + t21 * qJD(2) + (-t264 * pkin(3) - qJ(4) * t391) * qJD(3) + t88 * qJD(4), 0, 0, 0, 0, 0, 0, t30 * qJD(2) + t110 * qJD(5) - t264 * t429, t31 * qJD(2) + t109 * qJD(5) + t264 * t426, t7 * qJD(2) + (-t154 * t275 - t155 * t502) * qJD(3), t467 + t1 * qJD(2) + (-t154 * t212 - t155 * t213 + t264 * t305) * qJD(3) + t37 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t98 * qJD(2) + t88 * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t35 * qJD(2) + t37 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43 * qJD(2) + t110 * qJD(3) - t127 * qJD(5), t42 * qJD(2) + t109 * qJD(3) + t126 * qJD(5), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t444, 0, 0, 0, 0, 0, 0, 0, -t60 * qJD(3), t57 * qJD(3), -t20 * qJD(3) - t97 * qJD(4) - t451, 0, 0, 0, 0, 0, 0, -t28 * qJD(3) - t40 * qJD(5), -t29 * qJD(3) - t41 * qJD(5), t8 * qJD(3), t2 * qJD(3) - t34 * qJD(4) - t470; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t398, t298 * qJD(3), 0, -t398, 0, 0, -pkin(2) * t421, -pkin(2) * t420, 0, 0, t309 * t398, t390 * t420, -t274 * qJD(3), t308 * t398, t273 * qJD(3), -t398, -t135 * qJD(3) + t314 * t403, t136 * qJD(3) - t312 * t403, -t65 * qJD(3) + t270 * qJD(4), t78 * qJD(3) - t141 * qJD(4), (qJD(3) * t259 - t435) * t257, t111 * qJD(3) + t140 * qJD(5), -t157 * qJD(3) + t318 * t435, (qJD(3) * t256 + t432) * t254, -t156 * qJD(3) + t318 * t432, -t398, -t32 * qJD(3) - t67 * qJD(5) + t318 * t433, t33 * qJD(3) + t66 * qJD(5) - t318 * t436, t14 * qJD(3) + t165 * qJD(4), t19 * qJD(3) + t38 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t299, t423, t420, -t299, -t421, 0, -t417 - t419, pkin(7) * t421 - t418, 0, 0, (t309 * t422 + t404) * t318, (qJD(2) * t390 + (-t308 + t309) * qJD(3)) * t318, t312 * t421 - t427, (t308 * t422 - t404) * t318, t314 * t421 + t428, -t299, -t301 * qJD(3) + t312 * t329 - t445, t312 * t417 + t314 * t329 - t369, qJD(3) * t372 - t373, (-pkin(3) * t478 + qJ(4) * t372) * qJD(3) + t139 * qJD(4) + t379, t259 * t362 + t506, t446 + (-t275 * t256 + t259 * t502) * qJD(3) + t68, -t169 * qJD(5) + t275 * t421 - t442, -t256 * t363 - t506, -t166 * qJD(5) + t421 * t502 - t443, -t268, (-t212 * t316 + t305 * t256 - t282 * t502) * qJD(3) - t167 * qJD(4) + t46 * qJD(5) + t378, (-t213 * t316 + t305 * t259 + t282 * t275) * qJD(3) + t168 * qJD(4) + t47 * qJD(5) + t377, (-t121 * t275 + t122 * t502 + t212 * t259 - t213 * t256) * qJD(3) + t381 + t476, (-t121 * t212 + t122 * t213 + t282 * t305) * qJD(3) + t24 * qJD(4) + t380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (qJD(3) * t312 + t314 * t422) * t318, (-t312 * t422 + t448) * t318, t430, t139 * qJD(3) - t368, 0, 0, 0, 0, 0, 0, -t389, t134, t365, t24 * qJD(3) - t376; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t504, t367, t95, -t504, -t347, t306, t46 * qJD(3) - t118 * qJD(5) - t375, t47 * qJD(3) + t117 * qJD(5) - t374, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60 * qJD(2), -t57 * qJD(2), t20 * qJD(2) - t87 * qJD(4) - t452, 0, 0, 0, 0, 0, 0, t28 * qJD(2) - t107 * qJD(5), t29 * qJD(2) - t108 * qJD(5), -t8 * qJD(2), -t2 * qJD(2) - t36 * qJD(4) - t467; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t299, -t423, 0, t299, 0, 0, t419, t418, 0, 0, -t309 * t299, 0.2e1 * t312 * t386, t427, -t308 * t299, -t428, t299, t445, t369, t373, -t138 * qJD(4) - t379, -t259 * t434 + t506, t68 - t446, -t168 * qJD(5) + t442, -t256 * t437 - t506, -t167 * qJD(5) + t443, t268, -t166 * qJD(4) - t44 * qJD(5) - t378, t169 * qJD(4) - t45 * qJD(5) - t377, -t381 + t476, -t23 * qJD(4) - t380; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t296 * qJD(4), t284 * qJD(4), t400, t163 * qJD(5), 0, -t400, 0, 0, t305 * t425, t305 * t265, t208 * qJD(4), t96 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t424, -t337, 0, 0, 0, 0, 0, 0, -t441, t438, t364, -t339; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t505, t366, t265 - t439, t505, -t425 - t440, -t422 / 0.2e1, -t213 * qJD(5) + t305 * t426 - t371, t212 * qJD(5) + t305 * t429 - t370, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97 * qJD(2) + t87 * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t34 * qJD(2) + t36 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t386, t312 * t299, -t430, t138 * qJD(3) + t368, 0, 0, 0, 0, 0, 0, t347, t95, -t365, t23 * qJD(3) + t376; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t424, t337, 0, 0, 0, 0, 0, 0, t425 + t441, t265 - t438, -t364, t339; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t362, t363, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40 * qJD(2) + t107 * qJD(3), t41 * qJD(2) + t108 * qJD(3), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t504, -t367, t134, t504, t389, t306, t44 * qJD(3) + t375 - t433, t45 * qJD(3) + t374 + t436, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t505, -t366, t439, -t505, t440, t422 / 0.2e1, -t275 * t388 + t371, -t388 * t502 + t370, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t362, -t363, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t3;
