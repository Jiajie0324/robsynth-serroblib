% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRRPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d3,d5,theta1,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:33
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRRPR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPR6_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPR6_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRPR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRPR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5PRRPR6_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:33:01
% EndTime: 2019-12-05 16:33:24
% DurationCPUTime: 17.44s
% Computational Cost: add. (76759->704), mult. (160378->1149), div. (0->0), fcn. (115975->12), ass. (0->510)
t659 = sin(pkin(5));
t662 = cos(pkin(5));
t658 = sin(pkin(9));
t661 = cos(pkin(9));
t728 = t658 * g(1) - t661 * g(2);
t744 = g(3) - qJDD(1);
t781 = -t659 * t744 + t662 * t728;
t657 = sin(pkin(10));
t665 = sin(qJ(3));
t739 = qJD(2) * qJD(3);
t646 = t665 * t739;
t668 = cos(qJ(3));
t735 = t668 * qJDD(2);
t626 = -t646 + t735;
t660 = cos(pkin(10));
t742 = qJD(2) * t665;
t615 = -t660 * qJD(3) + t657 * t742;
t617 = t657 * qJD(3) + t660 * t742;
t767 = t617 * t615;
t686 = -t626 - t767;
t780 = t657 * t686;
t779 = t658 * t744;
t778 = t660 * t686;
t777 = t661 * t744;
t664 = sin(qJ(5));
t620 = -qJDD(5) + t626;
t667 = cos(qJ(5));
t565 = t667 * t615 + t664 * t617;
t567 = -t664 * t615 + t667 * t617;
t768 = t567 * t565;
t673 = -t620 - t768;
t776 = t664 * t673;
t775 = t667 * t673;
t741 = t668 * qJD(2);
t643 = -qJD(5) + t741;
t544 = t565 * t643;
t729 = t668 * t739;
t737 = t665 * qJDD(2);
t625 = t729 + t737;
t596 = t657 * qJDD(3) + t660 * t625;
t725 = -t660 * qJDD(3) + t657 * t625;
t672 = t565 * qJD(5) - t667 * t596 + t664 * t725;
t774 = t544 - t672;
t602 = t615 * t741;
t549 = -t596 + t602;
t603 = t617 * t741;
t546 = -t725 - t603;
t726 = t664 * t596 + t667 * t725;
t448 = (qJD(5) + t643) * t567 + t726;
t633 = t661 * g(1) + t658 * g(2);
t577 = -t661 * t633 - t658 * t728;
t576 = -t658 * t633 + t661 * t728;
t559 = t565 ^ 2;
t560 = t567 ^ 2;
t773 = t615 ^ 2;
t614 = t617 ^ 2;
t641 = t643 ^ 2;
t772 = qJD(3) ^ 2;
t771 = pkin(3) * t665;
t770 = pkin(3) * t668;
t666 = sin(qJ(2));
t669 = cos(qJ(2));
t550 = -t666 * t633 - t781 * t669;
t554 = -t669 * t633 + t781 * t666;
t490 = t666 * t550 + t669 * t554;
t769 = pkin(6) * t490;
t766 = t643 * t664;
t765 = t643 * t667;
t653 = t665 ^ 2;
t670 = qJD(2) ^ 2;
t764 = t653 * t670;
t535 = -t670 * pkin(2) + qJDD(2) * pkin(7) + t554;
t598 = t659 * t728 + t662 * t744;
t509 = t668 * t535 - t665 * t598;
t721 = -qJ(4) * t665 - t770;
t623 = t721 * qJD(2);
t473 = -t772 * pkin(3) + qJDD(3) * qJ(4) + t623 * t741 + t509;
t534 = -qJDD(2) * pkin(2) - t670 * pkin(7) + t550;
t717 = t625 + t729;
t486 = -t717 * qJ(4) + (-t626 + t646) * pkin(3) + t534;
t411 = 0.2e1 * qJD(4) * t617 + t657 * t473 - t660 * t486;
t379 = t686 * pkin(4) + t549 * pkin(8) - t411;
t412 = -0.2e1 * qJD(4) * t615 + t660 * t473 + t657 * t486;
t597 = -pkin(4) * t741 - t617 * pkin(8);
t393 = -t773 * pkin(4) - pkin(8) * t725 + t597 * t741 + t412;
t327 = -t667 * t379 + t664 * t393;
t328 = t664 * t379 + t667 * t393;
t288 = -t667 * t327 + t664 * t328;
t763 = t657 * t288;
t590 = t668 * t598;
t472 = qJDD(4) + t590 - t772 * qJ(4) - qJDD(3) * pkin(3) + (qJD(2) * t623 + t535) * t665;
t762 = t657 * t472;
t551 = t626 - t767;
t761 = t657 * t551;
t759 = t660 * t288;
t758 = t660 * t472;
t757 = t660 * t551;
t422 = pkin(4) * t725 - t773 * pkin(8) + t617 * t597 + t472;
t756 = t664 * t422;
t491 = t620 - t768;
t755 = t664 * t491;
t754 = t665 * t534;
t753 = t665 * t626;
t642 = t665 * t670 * t668;
t634 = qJDD(3) + t642;
t752 = t665 * t634;
t635 = qJDD(3) - t642;
t751 = t665 * t635;
t750 = t666 * t598;
t749 = t667 * t422;
t748 = t667 * t491;
t747 = t668 * t534;
t746 = t668 * t635;
t745 = t669 * t598;
t654 = t668 ^ 2;
t743 = t653 + t654;
t738 = qJDD(2) * t659;
t736 = t666 * qJDD(2);
t734 = t669 * qJDD(2);
t733 = t665 * t768;
t732 = t665 * t767;
t731 = t668 * t768;
t730 = t668 * t767;
t289 = t664 * t327 + t667 * t328;
t508 = t665 * t535 + t590;
t428 = t665 * t508 + t668 * t509;
t724 = t669 * t642;
t723 = t666 * t642;
t427 = t668 * t508 - t665 * t509;
t628 = t743 * qJDD(2);
t650 = t654 * t670;
t631 = t650 + t764;
t574 = t669 * t628 - t666 * t631;
t720 = pkin(6) * t574 + t427 * t666;
t629 = -t666 * t670 + t734;
t719 = -pkin(6) * t629 - t750;
t690 = t669 * t670 + t736;
t718 = -pkin(6) * t690 + t745;
t259 = t660 * t289 - t763;
t255 = t668 * t259 + t665 * t422;
t258 = t657 * t289 + t759;
t716 = t255 * t666 - t258 * t669;
t452 = t544 + t672;
t395 = -t448 * t664 + t667 * t452;
t397 = -t448 * t667 - t664 * t452;
t332 = -t657 * t395 + t660 * t397;
t466 = -t559 - t560;
t311 = t668 * t332 + t665 * t466;
t330 = t660 * t395 + t657 * t397;
t715 = t311 * t666 - t330 * t669;
t447 = (qJD(5) - t643) * t567 + t726;
t394 = -t664 * t447 + t667 * t774;
t396 = -t667 * t447 - t664 * t774;
t331 = -t657 * t394 + t660 * t396;
t510 = -t560 + t559;
t319 = t668 * t331 - t665 * t510;
t329 = -t660 * t394 - t657 * t396;
t714 = t319 * t666 + t329 * t669;
t345 = t657 * t411 + t660 * t412;
t334 = t668 * t345 + t665 * t472;
t344 = -t660 * t411 + t657 * t412;
t713 = t334 * t666 - t344 * t669;
t504 = -t641 - t559;
t424 = t664 * t504 + t775;
t425 = t667 * t504 - t776;
t370 = -t657 * t424 + t660 * t425;
t339 = t668 * t370 + t665 * t447;
t369 = t660 * t424 + t657 * t425;
t712 = t339 * t666 - t369 * t669;
t527 = -t560 - t641;
t429 = t667 * t527 + t755;
t430 = -t664 * t527 + t748;
t382 = -t657 * t429 + t660 * t430;
t343 = t668 * t382 + t665 * t774;
t381 = t660 * t429 + t657 * t430;
t711 = t343 * t666 - t381 * t669;
t539 = -t560 + t641;
t439 = t667 * t539 + t776;
t441 = -t664 * t539 + t775;
t391 = -t657 * t439 + t660 * t441;
t349 = t668 * t391 - t665 * t452;
t389 = -t660 * t439 - t657 * t441;
t710 = t349 * t666 + t389 * t669;
t538 = t559 - t641;
t440 = t664 * t538 - t748;
t442 = t667 * t538 + t755;
t392 = -t657 * t440 + t660 * t442;
t350 = t668 * t392 - t665 * t448;
t390 = -t660 * t440 - t657 * t442;
t709 = t350 * t666 + t390 * t669;
t487 = -t567 * qJD(5) - t726;
t435 = t667 * t487 - t565 * t766;
t436 = -t664 * t487 - t565 * t765;
t385 = -t657 * t435 + t660 * t436;
t361 = t668 * t385 - t733;
t383 = -t660 * t435 - t657 * t436;
t708 = t361 * t666 + t383 * t669;
t437 = -t567 * t765 - t664 * t672;
t438 = t567 * t766 - t667 * t672;
t386 = -t657 * t437 + t660 * t438;
t362 = t668 * t386 + t733;
t384 = -t660 * t437 - t657 * t438;
t707 = t362 * t666 + t384 * t669;
t477 = (t565 * t664 + t567 * t667) * t643;
t478 = (t565 * t667 - t567 * t664) * t643;
t418 = -t657 * t477 + t660 * t478;
t409 = t668 * t418 - t665 * t620;
t417 = -t660 * t477 - t657 * t478;
t706 = t409 * t666 + t417 * t669;
t705 = t428 * t666 - t534 * t669;
t484 = t660 * t546 - t657 * t549;
t542 = t614 + t773;
t432 = t668 * t484 - t665 * t542;
t482 = t657 * t546 + t660 * t549;
t704 = t432 * t666 - t482 * t669;
t570 = -t650 - t773;
t499 = t660 * t570 - t780;
t547 = t603 - t725;
t454 = t668 * t499 - t665 * t547;
t498 = t657 * t570 + t778;
t703 = t454 * t666 - t498 * t669;
t548 = t596 + t602;
t485 = t660 * t547 - t657 * t548;
t573 = -t614 + t773;
t456 = t668 * t485 - t665 * t573;
t483 = -t657 * t547 - t660 * t548;
t702 = t456 * t666 + t483 * t669;
t601 = -t614 - t650;
t520 = -t657 * t601 + t757;
t462 = t668 * t520 + t665 * t548;
t517 = t660 * t601 + t761;
t701 = t462 * t666 - t517 * t669;
t600 = -t614 + t650;
t521 = -t657 * t600 + t778;
t463 = t668 * t521 - t665 * t549;
t518 = -t660 * t600 - t780;
t700 = t463 * t666 + t518 * t669;
t599 = -t650 + t773;
t522 = t660 * t599 + t761;
t464 = t668 * t522 + t546 * t665;
t519 = -t657 * t599 + t757;
t699 = t464 * t666 + t519 * t669;
t531 = -t602 * t660 + t657 * t725;
t496 = t668 * t531 - t732;
t530 = t602 * t657 + t660 * t725;
t698 = t496 * t666 + t530 * t669;
t533 = t660 * t596 + t603 * t657;
t497 = t668 * t533 + t732;
t532 = -t657 * t596 + t603 * t660;
t697 = t497 * t666 + t532 * t669;
t541 = (t615 * t660 - t617 * t657) * t741;
t526 = t668 * t541 - t753;
t540 = (-t615 * t657 - t617 * t660) * t741;
t696 = t526 * t666 + t540 * t669;
t489 = t669 * t550 - t666 * t554;
t624 = 0.2e1 * t729 + t737;
t627 = -0.2e1 * t646 + t735;
t572 = -t665 * t624 + t668 * t627;
t632 = t650 - t764;
t695 = t572 * t666 + t632 * t669;
t640 = -t650 - t772;
t586 = t668 * t640 - t752;
t694 = t586 * t666 + t627 * t669;
t638 = -t764 - t772;
t588 = -t665 * t638 - t746;
t693 = t588 * t666 - t624 * t669;
t607 = t690 * t662;
t692 = t661 * t607 + t658 * t629;
t563 = t658 * t607 - t661 * t629;
t691 = t628 * t666 + t631 * t669;
t621 = t743 * t739;
t689 = -qJDD(3) * t669 + t621 * t666;
t639 = t650 - t772;
t585 = t668 * t639 - t751;
t688 = t585 * t666 - t668 * t734;
t622 = t668 * t634;
t637 = -t764 + t772;
t587 = -t665 * t637 + t622;
t687 = t587 * t666 - t665 * t734;
t592 = -t654 * t739 - t753;
t685 = t592 * t666 - t724;
t593 = t668 * t625 - t653 * t739;
t684 = t593 * t666 + t724;
t280 = -pkin(4) * t422 + pkin(8) * t289;
t243 = -pkin(8) * t759 - qJ(4) * t258 - t657 * t280;
t246 = -pkin(3) * t258 - pkin(4) * t288;
t254 = t665 * t259 - t668 * t422;
t230 = -pkin(7) * t254 + t668 * t243 - t665 * t246;
t233 = -pkin(2) * t254 + pkin(3) * t422 + pkin(8) * t763 - qJ(4) * t259 - t660 * t280;
t242 = t669 * t255 + t666 * t258;
t683 = pkin(6) * t242 + t230 * t666 + t233 * t669;
t275 = -pkin(4) * t466 + pkin(8) * t397 + t289;
t278 = -pkin(8) * t395 - t288;
t245 = -qJ(4) * t330 - t657 * t275 + t660 * t278;
t303 = -pkin(3) * t330 - pkin(4) * t395;
t310 = t665 * t332 - t668 * t466;
t241 = -pkin(7) * t310 + t668 * t245 - t665 * t303;
t244 = -pkin(2) * t310 + pkin(3) * t466 - qJ(4) * t332 - t660 * t275 - t657 * t278;
t283 = t669 * t311 + t666 * t330;
t682 = pkin(6) * t283 + t241 * t666 + t244 * t669;
t340 = -pkin(4) * t447 + pkin(8) * t425 - t749;
t368 = -pkin(8) * t424 + t756;
t284 = -qJ(4) * t369 - t657 * t340 + t660 * t368;
t293 = -pkin(3) * t369 - pkin(4) * t424 + t327;
t338 = t665 * t370 - t668 * t447;
t252 = -pkin(7) * t338 + t668 * t284 - t665 * t293;
t270 = -pkin(2) * t338 + pkin(3) * t447 - qJ(4) * t370 - t660 * t340 - t657 * t368;
t302 = t669 * t339 + t666 * t369;
t681 = pkin(6) * t302 + t252 * t666 + t270 * t669;
t341 = -pkin(4) * t774 + pkin(8) * t430 + t756;
t372 = -pkin(8) * t429 + t749;
t295 = -qJ(4) * t381 - t657 * t341 + t660 * t372;
t299 = -pkin(3) * t381 - pkin(4) * t429 + t328;
t342 = t665 * t382 - t668 * t774;
t253 = -pkin(7) * t342 + t668 * t295 - t665 * t299;
t273 = -pkin(2) * t342 + pkin(3) * t774 - qJ(4) * t382 - t660 * t341 - t657 * t372;
t305 = t669 * t343 + t666 * t381;
t680 = pkin(6) * t305 + t253 * t666 + t273 * t669;
t333 = t665 * t345 - t668 * t472;
t279 = -pkin(7) * t333 + (-qJ(4) * t668 + t771) * t344;
t296 = -pkin(2) * t333 + pkin(3) * t472 - qJ(4) * t345;
t300 = t669 * t334 + t666 * t344;
t679 = pkin(6) * t300 + t279 * t666 + t296 * t669;
t335 = -qJ(4) * t482 - t344;
t431 = t665 * t484 + t668 * t542;
t304 = -pkin(7) * t431 + t668 * t335 + t482 * t771;
t306 = -pkin(2) * t431 - pkin(3) * t542 - qJ(4) * t484 - t345;
t400 = t669 * t432 + t666 * t482;
t678 = pkin(6) * t400 + t304 * t666 + t306 * t669;
t380 = -pkin(3) * t498 + t411;
t419 = -qJ(4) * t498 + t762;
t453 = t665 * t499 + t668 * t547;
t320 = -pkin(7) * t453 - t665 * t380 + t668 * t419;
t358 = -pkin(2) * t453 - pkin(3) * t547 - qJ(4) * t499 + t758;
t404 = t669 * t454 + t666 * t498;
t677 = pkin(6) * t404 + t320 * t666 + t358 * t669;
t387 = -pkin(3) * t517 + t412;
t423 = -qJ(4) * t517 + t758;
t459 = t665 * t520 - t668 * t548;
t326 = -pkin(7) * t459 - t665 * t387 + t668 * t423;
t371 = -pkin(2) * t459 + pkin(3) * t548 - qJ(4) * t520 - t762;
t414 = t669 * t462 + t666 * t517;
t676 = pkin(6) * t414 + t326 * t666 + t371 * t669;
t582 = t665 * t640 + t622;
t470 = -pkin(2) * t582 + t508;
t506 = -pkin(7) * t582 + t754;
t536 = t669 * t586 - t666 * t627;
t675 = pkin(6) * t536 + t470 * t669 + t506 * t666;
t584 = t668 * t638 - t751;
t471 = -pkin(2) * t584 + t509;
t507 = -pkin(7) * t584 + t747;
t537 = t669 * t588 + t666 * t624;
t674 = pkin(6) * t537 + t471 * t669 + t507 * t666;
t410 = t669 * t428 + t666 * t534;
t671 = pkin(6) * t410 - (-pkin(2) * t669 - pkin(7) * t666) * t427;
t612 = t668 * t626;
t608 = t629 * t662;
t606 = t629 * t659;
t605 = t690 * t659;
t594 = t666 * qJDD(3) + t669 * t621;
t583 = t668 * t637 + t752;
t581 = t665 * t639 + t746;
t580 = t717 * t665;
t579 = -t665 * t729 + t612;
t575 = t689 * t662;
t571 = t668 * t624 + t665 * t627;
t569 = t691 * t662;
t568 = t691 * t659;
t564 = -t658 * t608 - t661 * t690;
t562 = t661 * t608 - t658 * t690;
t558 = t669 * t593 - t723;
t557 = t669 * t592 + t723;
t556 = t669 * t587 + t665 * t736;
t555 = t669 * t585 + t666 * t735;
t529 = t669 * t572 - t666 * t632;
t525 = t665 * t541 + t612;
t524 = -t745 + (t605 * t659 + t607 * t662) * pkin(6);
t523 = -t750 + (-t606 * t659 - t608 * t662) * pkin(6);
t516 = -t658 * t569 + t661 * t574;
t515 = t661 * t569 + t658 * t574;
t514 = -t659 * t580 + t662 * t684;
t513 = -t659 * t579 + t662 * t685;
t512 = -t659 * t583 + t662 * t687;
t511 = -t659 * t581 + t662 * t688;
t503 = -t659 * t584 + t662 * t693;
t502 = -t659 * t582 + t662 * t694;
t501 = t662 * t584 + t659 * t693;
t500 = t662 * t582 + t659 * t694;
t495 = t665 * t533 - t730;
t494 = t665 * t531 + t730;
t481 = -t659 * t571 + t662 * t695;
t480 = pkin(2) * t627 + pkin(7) * t586 - t747;
t479 = -pkin(2) * t624 + pkin(7) * t588 + t754;
t474 = t490 * t662;
t468 = -pkin(1) * t606 + t659 * t550 + t662 * t718;
t467 = pkin(1) * t605 + t659 * t554 + t662 * t719;
t465 = t669 * t526 - t666 * t540;
t461 = t665 * t522 - t546 * t668;
t460 = t665 * t521 + t668 * t549;
t458 = -t489 * t662 + t659 * t598;
t457 = -t489 * t659 - t662 * t598;
t455 = t665 * t485 + t668 * t573;
t446 = -t658 * t503 + t661 * t537;
t445 = -t658 * t502 + t661 * t536;
t444 = t661 * t503 + t658 * t537;
t443 = t661 * t502 + t658 * t536;
t434 = t669 * t497 - t666 * t532;
t433 = t669 * t496 - t666 * t530;
t421 = pkin(2) * t631 + pkin(7) * t628 + t428;
t420 = -t659 * t525 + t662 * t696;
t416 = t669 * t464 - t666 * t519;
t415 = t669 * t463 - t666 * t518;
t413 = -pkin(2) * t534 + pkin(7) * t428;
t408 = t665 * t418 + t668 * t620;
t407 = -pkin(1) * t457 + t662 * t769;
t406 = -t658 * t458 + t661 * t490;
t405 = t661 * t458 + t658 * t490;
t403 = t669 * t456 - t666 * t483;
t402 = -t659 * t495 + t662 * t697;
t401 = -t659 * t494 + t662 * t698;
t399 = t669 * t427 + (-t568 * t659 - t569 * t662) * pkin(6);
t398 = (-t457 * t659 - t458 * t662) * pkin(6);
t376 = -t659 * t461 + t662 * t699;
t375 = -t659 * t460 + t662 * t700;
t374 = -t659 * t459 + t662 * t701;
t373 = t662 * t459 + t659 * t701;
t367 = -t666 * t471 + t669 * t507 + (-t501 * t659 - t503 * t662) * pkin(6);
t366 = -t666 * t470 + t669 * t506 + (-t500 * t659 - t502 * t662) * pkin(6);
t365 = -t659 * t455 + t662 * t702;
t364 = -t659 * t453 + t662 * t703;
t363 = t662 * t453 + t659 * t703;
t360 = t665 * t386 - t731;
t359 = t665 * t385 + t731;
t357 = t427 * t659 + t662 * t705;
t356 = -t427 * t662 + t659 * t705;
t355 = -t659 * t431 + t662 * t704;
t354 = t662 * t431 + t659 * t704;
t353 = t669 * t409 - t666 * t417;
t352 = -pkin(1) * t501 - t659 * t479 + t662 * t674;
t351 = -pkin(1) * t500 - t659 * t480 + t662 * t675;
t348 = t665 * t392 + t668 * t448;
t347 = t665 * t391 + t668 * t452;
t346 = -pkin(1) * t568 - t659 * t421 + t662 * t720;
t337 = -t658 * t374 + t661 * t414;
t336 = t661 * t374 + t658 * t414;
t324 = -t658 * t364 + t661 * t404;
t323 = t661 * t364 + t658 * t404;
t322 = -t658 * t357 + t661 * t410;
t321 = t661 * t357 + t658 * t410;
t318 = t665 * t331 + t668 * t510;
t317 = -t658 * t355 + t661 * t400;
t316 = t661 * t355 + t658 * t400;
t315 = -t659 * t408 + t662 * t706;
t314 = t669 * t362 - t666 * t384;
t313 = t669 * t361 - t666 * t383;
t312 = -pkin(2) * t517 + pkin(7) * t462 + t668 * t387 + t665 * t423;
t309 = t669 * t350 - t666 * t390;
t308 = t669 * t349 - t666 * t389;
t307 = -pkin(2) * t498 + pkin(7) * t454 + t668 * t380 + t665 * t419;
t301 = pkin(7) * t432 + t665 * t335 + (-pkin(2) - t770) * t482;
t298 = -t659 * t360 + t662 * t707;
t297 = -t659 * t359 + t662 * t708;
t294 = -(pkin(2) * t666 - pkin(7) * t669) * t427 + (-t356 * t659 - t357 * t662) * pkin(6);
t292 = -t659 * t348 + t662 * t709;
t291 = -t659 * t347 + t662 * t710;
t290 = -pkin(1) * t356 - t659 * t413 + t662 * t671;
t287 = -t659 * t342 + t662 * t711;
t286 = t662 * t342 + t659 * t711;
t285 = t669 * t319 - t666 * t329;
t282 = -t659 * t338 + t662 * t712;
t281 = t662 * t338 + t659 * t712;
t277 = -t659 * t333 + t662 * t713;
t276 = t662 * t333 + t659 * t713;
t274 = t669 * t326 - t666 * t371 + (-t373 * t659 - t374 * t662) * pkin(6);
t272 = t669 * t320 - t666 * t358 + (-t363 * t659 - t364 * t662) * pkin(6);
t271 = -t659 * t318 + t662 * t714;
t269 = pkin(7) * t334 + (-pkin(2) + t721) * t344;
t268 = -t659 * t310 + t662 * t715;
t267 = t662 * t310 + t659 * t715;
t266 = -t658 * t287 + t661 * t305;
t265 = t661 * t287 + t658 * t305;
t264 = -pkin(1) * t373 - t659 * t312 + t662 * t676;
t263 = -t658 * t282 + t661 * t302;
t262 = t661 * t282 + t658 * t302;
t261 = t669 * t304 - t666 * t306 + (-t354 * t659 - t355 * t662) * pkin(6);
t260 = -pkin(1) * t363 - t659 * t307 + t662 * t677;
t257 = -t658 * t277 + t661 * t300;
t256 = t661 * t277 + t658 * t300;
t251 = -pkin(2) * t381 + pkin(7) * t343 + t665 * t295 + t668 * t299;
t250 = -pkin(1) * t354 - t659 * t301 + t662 * t678;
t249 = -t658 * t268 + t661 * t283;
t248 = t661 * t268 + t658 * t283;
t247 = -pkin(2) * t369 + pkin(7) * t339 + t665 * t284 + t668 * t293;
t240 = t669 * t279 - t666 * t296 + (-t276 * t659 - t277 * t662) * pkin(6);
t239 = -pkin(2) * t330 + pkin(7) * t311 + t665 * t245 + t668 * t303;
t238 = t669 * t253 - t666 * t273 + (-t286 * t659 - t287 * t662) * pkin(6);
t237 = -pkin(1) * t276 - t659 * t269 + t662 * t679;
t236 = t669 * t252 - t666 * t270 + (-t281 * t659 - t282 * t662) * pkin(6);
t235 = -t659 * t254 + t662 * t716;
t234 = t662 * t254 + t659 * t716;
t232 = -pkin(1) * t286 - t659 * t251 + t662 * t680;
t231 = -pkin(1) * t281 - t659 * t247 + t662 * t681;
t229 = -t658 * t235 + t661 * t242;
t228 = t661 * t235 + t658 * t242;
t227 = t669 * t241 - t666 * t244 + (-t267 * t659 - t268 * t662) * pkin(6);
t226 = -pkin(2) * t258 + pkin(7) * t255 + t665 * t243 + t668 * t246;
t225 = -pkin(1) * t267 - t659 * t239 + t662 * t682;
t224 = t669 * t230 - t666 * t233 + (-t234 * t659 - t235 * t662) * pkin(6);
t223 = -pkin(1) * t234 - t659 * t226 + t662 * t683;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t577, 0, 0, 0, 0, 0, 0, t564, t563, 0, t406, 0, 0, 0, 0, 0, 0, t445, t446, t516, t322, 0, 0, 0, 0, 0, 0, t324, t337, t317, t257, 0, 0, 0, 0, 0, 0, t263, t266, t249, t229; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t576, 0, 0, 0, 0, 0, 0, t562, -t692, 0, t405, 0, 0, 0, 0, 0, 0, t443, t444, t515, t321, 0, 0, 0, 0, 0, 0, t323, t336, t316, t256, 0, 0, 0, 0, 0, 0, t262, t265, t248, t228; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t744, 0, 0, 0, 0, 0, 0, t606, -t605, 0, t457, 0, 0, 0, 0, 0, 0, t500, t501, t568, t356, 0, 0, 0, 0, 0, 0, t363, t373, t354, t276, 0, 0, 0, 0, 0, 0, t281, t286, t267, t234; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t779, -t777, -t576, -qJ(1) * t576, 0, 0, -t563, 0, t564, t658 * t738, -qJ(1) * t562 - t658 * t468 + t661 * t523, qJ(1) * t692 - t658 * t467 + t661 * t524, -t658 * t474 + t661 * t489, -qJ(1) * t405 + t661 * t398 - t658 * t407, -t658 * t514 + t661 * t558, -t658 * t481 + t661 * t529, -t658 * t512 + t661 * t556, -t658 * t513 + t661 * t557, -t658 * t511 + t661 * t555, -t658 * t575 + t661 * t594, -qJ(1) * t443 - t658 * t351 + t661 * t366, -qJ(1) * t444 - t658 * t352 + t661 * t367, -qJ(1) * t515 - t658 * t346 + t661 * t399, -qJ(1) * t321 - t658 * t290 + t661 * t294, -t658 * t402 + t661 * t434, -t658 * t365 + t661 * t403, -t658 * t375 + t661 * t415, -t658 * t401 + t661 * t433, -t658 * t376 + t661 * t416, -t658 * t420 + t661 * t465, -qJ(1) * t323 - t658 * t260 + t661 * t272, -qJ(1) * t336 - t658 * t264 + t661 * t274, -qJ(1) * t316 - t658 * t250 + t661 * t261, -qJ(1) * t256 - t658 * t237 + t661 * t240, -t658 * t298 + t661 * t314, -t658 * t271 + t661 * t285, -t658 * t291 + t661 * t308, -t658 * t297 + t661 * t313, -t658 * t292 + t661 * t309, -t658 * t315 + t661 * t353, -qJ(1) * t262 - t658 * t231 + t661 * t236, -qJ(1) * t265 - t658 * t232 + t661 * t238, -qJ(1) * t248 - t658 * t225 + t661 * t227, -qJ(1) * t228 - t658 * t223 + t661 * t224; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t777, -t779, t577, qJ(1) * t577, 0, 0, t692, 0, t562, -t661 * t738, qJ(1) * t564 + t661 * t468 + t658 * t523, qJ(1) * t563 + t661 * t467 + t658 * t524, t661 * t474 + t658 * t489, qJ(1) * t406 + t658 * t398 + t661 * t407, t661 * t514 + t658 * t558, t661 * t481 + t658 * t529, t661 * t512 + t658 * t556, t661 * t513 + t658 * t557, t661 * t511 + t658 * t555, t661 * t575 + t658 * t594, qJ(1) * t445 + t661 * t351 + t658 * t366, qJ(1) * t446 + t661 * t352 + t658 * t367, qJ(1) * t516 + t661 * t346 + t658 * t399, qJ(1) * t322 + t661 * t290 + t658 * t294, t661 * t402 + t658 * t434, t661 * t365 + t658 * t403, t661 * t375 + t658 * t415, t661 * t401 + t658 * t433, t661 * t376 + t658 * t416, t661 * t420 + t658 * t465, qJ(1) * t324 + t661 * t260 + t658 * t272, qJ(1) * t337 + t661 * t264 + t658 * t274, qJ(1) * t317 + t661 * t250 + t658 * t261, qJ(1) * t257 + t661 * t237 + t658 * t240, t661 * t298 + t658 * t314, t661 * t271 + t658 * t285, t661 * t291 + t658 * t308, t661 * t297 + t658 * t313, t661 * t292 + t658 * t309, t661 * t315 + t658 * t353, qJ(1) * t263 + t661 * t231 + t658 * t236, qJ(1) * t266 + t661 * t232 + t658 * t238, qJ(1) * t249 + t661 * t225 + t658 * t227, qJ(1) * t229 + t661 * t223 + t658 * t224; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t728, t633, 0, 0, 0, 0, t605, 0, t606, t662 * qJDD(2), pkin(1) * t608 - t662 * t550 + t659 * t718, -pkin(1) * t607 - t662 * t554 + t659 * t719, t490 * t659, pkin(1) * t458 + t659 * t769, t662 * t580 + t659 * t684, t662 * t571 + t659 * t695, t662 * t583 + t659 * t687, t662 * t579 + t659 * t685, t662 * t581 + t659 * t688, t689 * t659, pkin(1) * t502 + t662 * t480 + t659 * t675, pkin(1) * t503 + t662 * t479 + t659 * t674, pkin(1) * t569 + t662 * t421 + t659 * t720, pkin(1) * t357 + t662 * t413 + t659 * t671, t662 * t495 + t659 * t697, t662 * t455 + t659 * t702, t662 * t460 + t659 * t700, t662 * t494 + t659 * t698, t662 * t461 + t659 * t699, t662 * t525 + t659 * t696, pkin(1) * t364 + t662 * t307 + t659 * t677, pkin(1) * t374 + t662 * t312 + t659 * t676, pkin(1) * t355 + t662 * t301 + t659 * t678, pkin(1) * t277 + t662 * t269 + t659 * t679, t662 * t360 + t659 * t707, t662 * t318 + t659 * t714, t662 * t347 + t659 * t710, t662 * t359 + t659 * t708, t662 * t348 + t659 * t709, t662 * t408 + t659 * t706, pkin(1) * t282 + t662 * t247 + t659 * t681, pkin(1) * t287 + t662 * t251 + t659 * t680, pkin(1) * t268 + t662 * t239 + t659 * t682, pkin(1) * t235 + t662 * t226 + t659 * t683;];
tauB_reg = t1;
