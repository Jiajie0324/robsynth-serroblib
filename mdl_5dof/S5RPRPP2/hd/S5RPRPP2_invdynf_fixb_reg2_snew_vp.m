% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRPP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:11
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRPP2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPP2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPP2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPP2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPP2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPRPP2_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:11:28
% EndTime: 2019-12-31 18:11:30
% DurationCPUTime: 1.71s
% Computational Cost: add. (1995->165), mult. (4243->161), div. (0->0), fcn. (2174->6), ass. (0->91)
t1044 = sin(qJ(1));
t1046 = cos(qJ(1));
t1045 = cos(qJ(3));
t1064 = qJD(3) * t1045;
t1056 = qJD(1) * t1064;
t1043 = sin(qJ(3));
t1059 = t1043 * qJDD(1);
t1008 = 0.2e1 * t1056 + t1059;
t1040 = sin(pkin(7));
t1041 = cos(pkin(7));
t1047 = qJD(1) ^ 2;
t1055 = t1045 * t1047 * t1043;
t1017 = qJDD(3) - t1055;
t1035 = t1043 ^ 2;
t1070 = qJD(3) ^ 2;
t1021 = t1035 * t1047 + t1070;
t995 = t1045 * t1017 - t1043 * t1021;
t977 = t1041 * t1008 + t1040 * t995;
t980 = -t1040 * t1008 + t1041 * t995;
t964 = t1044 * t980 + t1046 * t977;
t1073 = t1044 * t977 - t1046 * t980;
t1036 = t1045 ^ 2;
t1060 = t1035 + t1036;
t1012 = t1060 * qJDD(1);
t1015 = t1060 * t1047;
t987 = t1040 * t1012 + t1041 * t1015;
t989 = t1041 * t1012 - t1040 * t1015;
t972 = t1044 * t989 + t1046 * t987;
t1072 = t1044 * t987 - t1046 * t989;
t1071 = -t1055 - qJDD(3);
t1069 = -2 * qJD(5);
t1068 = -g(3) + qJDD(2);
t1019 = -t1046 * g(1) - t1044 * g(2);
t1007 = -t1047 * pkin(1) + t1019;
t1018 = t1044 * g(1) - t1046 * g(2);
t1048 = qJDD(1) * pkin(1) + t1018;
t986 = t1041 * t1007 + t1040 * t1048;
t984 = -t1047 * pkin(2) + qJDD(1) * pkin(6) + t986;
t1067 = t1043 * t984;
t975 = t1043 * t1068 + t1045 * t984;
t1066 = qJD(1) * t1043;
t1065 = qJD(1) * t1045;
t1063 = t1036 * t1047;
t1058 = t1045 * qJDD(1);
t1057 = qJ(5) * t1066;
t985 = -t1040 * t1007 + t1041 * t1048;
t1010 = -t1040 * qJDD(1) - t1041 * t1047;
t1011 = t1041 * qJDD(1) - t1040 * t1047;
t1054 = t1046 * t1010 - t1044 * t1011;
t1030 = qJD(3) * t1066;
t1053 = -t1030 + t1058;
t1029 = t1045 * t1068;
t1052 = -qJDD(3) * pkin(3) - t1070 * qJ(4) + qJDD(4) - t1029;
t1006 = (-pkin(3) * t1045 - qJ(4) * t1043) * qJD(1);
t1051 = qJDD(3) * qJ(4) + 0.2e1 * qJD(4) * qJD(3) + t1006 * t1065 + t975;
t1050 = t1044 * t1010 + t1046 * t1011;
t992 = t1043 * t1017 + t1045 * t1021;
t983 = -qJDD(1) * pkin(2) - t1047 * pkin(6) - t985;
t1049 = t1056 + t1059;
t967 = -t1053 * pkin(3) + (pkin(3) * qJD(3) - 0.2e1 * qJD(4)) * t1066 + t983 + (-t1049 - t1056) * qJ(4);
t1022 = -t1063 - t1070;
t1014 = -t1044 * qJDD(1) - t1046 * t1047;
t1013 = t1046 * qJDD(1) - t1044 * t1047;
t1009 = -0.2e1 * t1030 + t1058;
t994 = t1045 * t1022 + t1043 * t1071;
t991 = t1043 * t1022 - t1045 * t1071;
t979 = -t1040 * t1009 + t1041 * t994;
t976 = t1041 * t1009 + t1040 * t994;
t974 = t1029 - t1067;
t971 = -t1040 * t985 + t1041 * t986;
t970 = t1040 * t986 + t1041 * t985;
t969 = (qJD(1) * t1006 + t984) * t1043 + t1052;
t968 = -t1070 * pkin(3) + t1051;
t965 = -t1044 * t976 + t1046 * t979;
t963 = t1044 * t979 + t1046 * t976;
t962 = -t1043 * t974 + t1045 * t975;
t961 = t1043 * t975 + t1045 * t974;
t960 = t1067 - t1049 * qJ(5) + (qJ(5) * t1064 + (t1069 + t1006) * t1043) * qJD(1) + t1052 + t1071 * pkin(4);
t959 = -pkin(4) * t1063 - t1053 * qJ(5) + t1065 * t1069 + (-t1057 + (-pkin(3) - pkin(4)) * qJD(3)) * qJD(3) + t1051;
t958 = -(-qJD(3) * pkin(4) - t1057) * t1066 + qJ(5) * t1063 - t1053 * pkin(4) - qJDD(5) + t967;
t957 = t1040 * t983 + t1041 * t962;
t956 = t1040 * t962 - t1041 * t983;
t955 = t1043 * t969 + t1045 * t968;
t954 = t1043 * t968 - t1045 * t969;
t953 = t1043 * t960 + t1045 * t959;
t952 = t1043 * t959 - t1045 * t960;
t951 = t1040 * t967 + t1041 * t955;
t950 = t1040 * t955 - t1041 * t967;
t949 = t1040 * t958 + t1041 * t953;
t948 = t1040 * t953 - t1041 * t958;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1014, -t1013, 0, -t1044 * t1018 + t1046 * t1019, 0, 0, 0, 0, 0, 0, t1054, -t1050, 0, -t1044 * t970 + t1046 * t971, 0, 0, 0, 0, 0, 0, t965, t1073, -t1072, -t1044 * t956 + t1046 * t957, 0, 0, 0, 0, 0, 0, t965, -t1072, -t1073, -t1044 * t950 + t1046 * t951, 0, 0, 0, 0, 0, 0, t965, -t1073, t1072, -t1044 * t948 + t1046 * t949; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1013, t1014, 0, t1046 * t1018 + t1044 * t1019, 0, 0, 0, 0, 0, 0, t1050, t1054, 0, t1044 * t971 + t1046 * t970, 0, 0, 0, 0, 0, 0, t963, -t964, t972, t1044 * t957 + t1046 * t956, 0, 0, 0, 0, 0, 0, t963, t972, t964, t1044 * t951 + t1046 * t950, 0, 0, 0, 0, 0, 0, t963, t964, -t972, t1044 * t949 + t1046 * t948; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1068, 0, 0, 0, 0, 0, 0, t991, -t992, 0, t961, 0, 0, 0, 0, 0, 0, t991, 0, t992, t954, 0, 0, 0, 0, 0, 0, t991, t992, 0, t952; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1047, -qJDD(1), 0, t1019, 0, 0, 0, 0, 0, 0, t1010, -t1011, 0, t971, 0, 0, 0, 0, 0, 0, t979, -t980, t989, t957, 0, 0, 0, 0, 0, 0, t979, t989, t980, t951, 0, 0, 0, 0, 0, 0, t979, t980, -t989, t949; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1047, 0, t1018, 0, 0, 0, 0, 0, 0, t1011, t1010, 0, t970, 0, 0, 0, 0, 0, 0, t976, -t977, t987, t956, 0, 0, 0, 0, 0, 0, t976, t987, t977, t950, 0, 0, 0, 0, 0, 0, t976, t977, -t987, t948; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1068, 0, 0, 0, 0, 0, 0, t991, -t992, 0, t961, 0, 0, 0, 0, 0, 0, t991, 0, t992, t954, 0, 0, 0, 0, 0, 0, t991, t992, 0, t952; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1047, -qJDD(1), 0, t986, 0, 0, 0, 0, 0, 0, t994, -t995, t1012, t962, 0, 0, 0, 0, 0, 0, t994, t1012, t995, t955, 0, 0, 0, 0, 0, 0, t994, t995, -t1012, t953; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1047, 0, t985, 0, 0, 0, 0, 0, 0, t1009, -t1008, t1015, -t983, 0, 0, 0, 0, 0, 0, t1009, t1015, t1008, -t967, 0, 0, 0, 0, 0, 0, t1009, t1008, -t1015, -t958; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1068, 0, 0, 0, 0, 0, 0, t991, -t992, 0, t961, 0, 0, 0, 0, 0, 0, t991, 0, t992, t954, 0, 0, 0, 0, 0, 0, t991, t992, 0, t952; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1022, -t1017, t1058, t975, 0, 0, 0, 0, 0, 0, t1022, t1058, t1017, t968, 0, 0, 0, 0, 0, 0, t1022, t1017, -t1058, t959; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1071, -t1021, -t1059, t974, 0, 0, 0, 0, 0, 0, -t1071, -t1059, t1021, -t969, 0, 0, 0, 0, 0, 0, -t1071, t1021, t1059, -t960; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1009, t1008, -t1015, t983, 0, 0, 0, 0, 0, 0, -t1009, -t1015, -t1008, t967, 0, 0, 0, 0, 0, 0, -t1009, -t1008, t1015, t958; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1022, t1058, t1017, t968, 0, 0, 0, 0, 0, 0, t1022, t1017, -t1058, t959; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1009, -t1015, -t1008, t967, 0, 0, 0, 0, 0, 0, -t1009, -t1008, t1015, t958; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1071, t1059, -t1021, t969, 0, 0, 0, 0, 0, 0, t1071, -t1021, -t1059, t960; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1022, t1017, -t1058, t959; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1071, -t1021, -t1059, t960; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1009, t1008, -t1015, -t958;];
f_new_reg = t1;
