% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRPP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:11
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRPP2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPP2_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPP2_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPP2_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPP2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPRPP2_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:11:21
% EndTime: 2019-12-31 18:11:28
% DurationCPUTime: 7.26s
% Computational Cost: add. (11648->490), mult. (24459->482), div. (0->0), fcn. (11849->6), ass. (0->296)
t811 = qJD(3) ^ 2;
t807 = sin(qJ(3));
t797 = t807 ^ 2;
t812 = qJD(1) ^ 2;
t894 = t797 * t812;
t772 = t811 + t894;
t809 = cos(qJ(3));
t777 = t809 * t812 * t807;
t766 = qJDD(3) - t777;
t875 = t809 * t766;
t713 = -t807 * t772 + t875;
t864 = qJD(1) * qJD(3);
t787 = t809 * t864;
t862 = t807 * qJDD(1);
t748 = 0.2e1 * t787 + t862;
t803 = sin(pkin(7));
t804 = cos(pkin(7));
t655 = t803 * t713 + t804 * t748;
t658 = t804 * t713 - t803 * t748;
t808 = sin(qJ(1));
t810 = cos(qJ(1));
t607 = pkin(5) * (t808 * t655 - t810 * t658);
t912 = pkin(5) * (t810 * t655 + t808 * t658);
t651 = pkin(1) * t655;
t904 = qJ(2) * t655;
t884 = t807 * t766;
t706 = t809 * t772 + t884;
t850 = -pkin(1) * t706 + qJ(2) * t658;
t765 = qJDD(3) + t777;
t739 = t809 * t765;
t773 = -t811 + t894;
t712 = t807 * t773 + t739;
t670 = t803 * t712 - t804 * t862;
t674 = t804 * t712 + t803 * t862;
t617 = t810 * t670 + t808 * t674;
t945 = t808 * t670 - t810 * t674;
t786 = t807 * t864;
t861 = t809 * qJDD(1);
t751 = -0.2e1 * t786 + t861;
t876 = t809 * t751;
t887 = t807 * t748;
t686 = -t876 + t887;
t798 = t809 ^ 2;
t763 = (t797 - t798) * t812;
t643 = t803 * t686 + t804 * t763;
t646 = t804 * t686 - t803 * t763;
t598 = t810 * t643 + t808 * t646;
t944 = t808 * t643 - t810 * t646;
t893 = t798 * t812;
t774 = -t811 + t893;
t711 = -t809 * t774 + t884;
t669 = t803 * t711 + t804 * t861;
t673 = t804 * t711 - t803 * t861;
t943 = t810 * t669 + t808 * t673;
t618 = t808 * t669 - t810 * t673;
t867 = t797 + t798;
t759 = t867 * qJDD(1);
t762 = t867 * t812;
t692 = t803 * t759 + t804 * t762;
t694 = t804 * t759 - t803 * t762;
t636 = pkin(5) * (t808 * t692 - t810 * t694);
t911 = pkin(5) * (t810 * t692 + t808 * t694);
t769 = t810 * g(1) + t808 * g(2);
t745 = -t812 * pkin(1) - t769;
t768 = t808 * g(1) - t810 * g(2);
t830 = qJDD(1) * pkin(1) + t768;
t681 = t803 * t745 - t804 * t830;
t682 = t804 * t745 + t803 * t830;
t849 = t803 * t681 + t804 * t682;
t632 = t804 * t681 - t803 * t682;
t874 = t810 * t632;
t942 = -t808 * t849 + t874;
t880 = t808 * t632;
t941 = t810 * t849 + t880;
t871 = pkin(2) * t748 + pkin(6) * t713;
t688 = pkin(1) * t692;
t939 = pkin(2) * t706;
t914 = pkin(4) * t765;
t908 = pkin(6) * t706;
t903 = qJ(2) * t692;
t687 = qJ(2) * t694;
t749 = t787 + t862;
t938 = t749 + t787;
t757 = t803 * qJDD(1) + t804 * t812;
t799 = g(3) - qJDD(2);
t723 = qJ(2) * t757 - t804 * t799;
t758 = t804 * qJDD(1) - t803 * t812;
t832 = -qJ(2) * t758 - t803 * t799;
t929 = t810 * t757 + t808 * t758;
t937 = pkin(5) * t929 + t810 * t723 - t808 * t832;
t689 = -t808 * t757 + t810 * t758;
t936 = -pkin(5) * t689 + t808 * t723 + t810 * t832;
t785 = t809 * t799;
t667 = -t812 * pkin(2) + qJDD(1) * pkin(6) + t682;
t888 = t807 * t667;
t644 = t785 + t888;
t868 = -t809 * t667 + t807 * t799;
t600 = t807 * t644 - t809 * t868;
t928 = pkin(3) * t772 + qJ(4) * t766;
t775 = -t811 - t893;
t927 = pkin(3) * t765 + qJ(4) * t775;
t863 = (qJD(4) * qJD(3));
t792 = 2 * t863;
t865 = qJD(1) * t809;
t856 = qJD(5) * t865;
t926 = -0.2e1 * t856 + t792;
t793 = -2 * t863;
t925 = t793 - t939;
t702 = t807 * t774 + t875;
t870 = pkin(2) * t762 + pkin(6) * t759;
t866 = qJD(1) * t807;
t764 = -qJD(3) * pkin(4) - qJ(5) * t866;
t924 = t764 * t866 + qJDD(5);
t703 = t807 * t775 + t739;
t918 = pkin(2) * t703;
t923 = -t918 - t927;
t750 = -t786 + t861;
t834 = -pkin(3) * t809 - qJ(4) * t807;
t744 = t834 * qJD(1);
t833 = t811 * pkin(3) - qJDD(3) * qJ(4) - t744 * t865 + t868;
t826 = pkin(4) * t893 + t750 * qJ(5) - qJD(3) * t764 + t833;
t594 = -t826 + t926;
t837 = qJDD(3) * pkin(3) + t811 * qJ(4) - qJDD(4) - t785;
t822 = -t749 * qJ(5) - t837 + t888 - t914;
t857 = qJ(5) * qJD(3) * t809;
t595 = (t857 + (-0.2e1 * qJD(5) + t744) * t807) * qJD(1) + t822;
t919 = pkin(3) + pkin(4);
t922 = qJ(4) * t594 - t919 * t595;
t629 = (qJD(1) * t744 + t667) * t807 - t837;
t920 = -(t750 + t751) * pkin(4) + (t775 + t893) * qJ(5);
t885 = t807 * t765;
t710 = t809 * t775 - t885;
t654 = t803 * t710 + t804 * t751;
t657 = t804 * t710 - t803 * t751;
t913 = pkin(5) * (t810 * t654 + t808 * t657);
t909 = pkin(6) * t703;
t906 = t750 * pkin(4);
t905 = qJ(2) * t654;
t901 = qJ(4) * t748;
t900 = qJ(4) * t751;
t899 = qJ(4) * t762;
t898 = qJ(5) * t594;
t897 = qJ(5) * t595;
t896 = qJ(5) * t765;
t895 = qJ(5) * t766;
t666 = -qJDD(1) * pkin(2) - t812 * pkin(6) + t681;
t661 = t807 * t666;
t886 = t807 * t751;
t662 = t809 * t666;
t877 = t809 * t748;
t873 = -pkin(2) * t666 + pkin(6) * t600;
t872 = pkin(2) * t751 + pkin(6) * t710;
t860 = 0.2e1 * t866;
t859 = t661 - t871;
t858 = -t662 + t872;
t851 = -pkin(1) * t703 + qJ(2) * t657;
t848 = -t808 * t768 - t810 * t769;
t845 = t803 * t777;
t844 = t804 * t777;
t825 = -t750 * pkin(3) - t938 * qJ(4) + t666;
t615 = (pkin(3) * qJD(3) - (2 * qJD(4))) * t866 + t825;
t817 = t615 - t924;
t592 = qJ(5) * t893 + t817 - t906;
t535 = -t919 * t592 - t898;
t552 = -qJ(4) * t592 - t897;
t556 = t809 * t594 + t807 * t595;
t843 = -pkin(2) * t592 + pkin(6) * t556 + t809 * t535 + t807 * t552;
t823 = qJD(4) * t860 - t825;
t818 = -pkin(3) * t786 + t823;
t813 = t906 + (t772 - t893) * qJ(5) + t818 + t924;
t582 = t813 + t901;
t665 = t919 * t748 - t895;
t842 = t807 * t582 + t809 * t665 + t871;
t781 = 0.2e1 * t856;
t820 = qJ(5) * t861 + t826;
t583 = -t919 * t762 + t781 + t793 + t820;
t816 = qJD(5) * t860 + (-t744 * t807 - t857) * qJD(1) - t822;
t815 = qJ(5) * t862 + t816;
t587 = t815 - t899;
t841 = t809 * t583 + t807 * t587 - t870;
t625 = t792 - t833;
t612 = pkin(3) * t762 + t625;
t614 = t629 + t899;
t840 = t809 * t612 + t807 * t614 + t870;
t839 = t870 + t600;
t605 = (t751 - t786) * pkin(3) + t823;
t575 = t605 - t920 + t924;
t699 = t896 + t900;
t838 = t809 * t575 + t807 * t699 + t872;
t761 = t810 * qJDD(1) - t808 * t812;
t836 = -pkin(5) * t761 - t808 * g(3);
t835 = -pkin(3) * t629 + qJ(4) * t625;
t599 = t809 * t644 + t807 * t868;
t683 = t877 + t886;
t705 = -t809 * t773 + t885;
t831 = t810 * t768 - t808 * t769;
t604 = t818 + t901;
t829 = pkin(3) * t877 + t807 * t604 + t871;
t828 = qJ(4) * t886 + t809 * t605 + t872;
t827 = t833 - t928;
t574 = t809 * t625 + t807 * t629;
t824 = pkin(6) * t574 + (-pkin(2) + t834) * t615;
t821 = pkin(4) * t772 - t826;
t819 = t821 + t926;
t814 = t816 + t914;
t789 = qJ(4) * t861;
t760 = t808 * qJDD(1) + t810 * t812;
t742 = pkin(3) * t862 - t789;
t738 = t867 * t864;
t726 = -pkin(5) * t760 + t810 * g(3);
t724 = t919 * t862 - t789;
t719 = t809 * t749 - t797 * t864;
t718 = -t807 * t750 - t798 * t864;
t717 = t803 * qJDD(3) + t804 * t738;
t716 = -t804 * qJDD(3) + t803 * t738;
t701 = t938 * t807;
t700 = (t750 - t786) * t809;
t679 = t804 * t719 - t845;
t678 = t804 * t718 + t845;
t677 = t803 * t719 + t844;
t676 = t803 * t718 - t844;
t653 = -pkin(1) * t757 - t682;
t652 = pkin(1) * t758 - t681;
t650 = pkin(1) * t654;
t639 = -t808 * t716 + t810 * t717;
t638 = t810 * t716 + t808 * t717;
t635 = t662 + t908;
t634 = t661 - t909;
t628 = pkin(1) * t632;
t627 = -t868 + t939;
t626 = t644 - t918;
t624 = pkin(1) * t799 + qJ(2) * t849;
t623 = -t808 * t677 + t810 * t679;
t622 = -t808 * t676 + t810 * t678;
t621 = t810 * t677 + t808 * t679;
t620 = t810 * t676 + t808 * t678;
t606 = pkin(5) * (-t808 * t654 + t810 * t657);
t593 = t629 + t923;
t590 = t827 + t925;
t589 = t650 + t858;
t588 = t859 - t651;
t585 = t804 * t599 - t903;
t584 = t803 * t599 + t687;
t581 = -pkin(3) * t887 + t809 * t604 - t908;
t580 = qJ(4) * t876 - t807 * t605 - t909;
t577 = t804 * t600 + t803 * t666;
t576 = t803 * t600 - t804 * t666;
t573 = t807 * t625 - t809 * t629;
t571 = t688 + t839;
t569 = t781 - t821 + t925 - t928;
t568 = t595 - t914 + t923;
t567 = -t807 * t612 + t809 * t614;
t566 = -t803 * t627 + t804 * t635 + t904;
t565 = -t803 * t626 + t804 * t634 - t905;
t564 = t651 + t829;
t563 = t650 + t828;
t562 = -t807 * t575 + t809 * t699 - t909;
t561 = t809 * t582 - t807 * t665 - t908;
t560 = t804 * t627 + t803 * t635 - t850;
t559 = t804 * t626 + t803 * t634 + t851;
t558 = t804 * t567 - t803 * t742 - t903;
t557 = t803 * t567 + t804 * t742 + t687;
t555 = t807 * t594 - t809 * t595;
t553 = t688 + t840;
t550 = t804 * t574 + t803 * t615;
t549 = t803 * t574 - t804 * t615;
t548 = t650 + t838;
t547 = t651 + t842;
t546 = -t807 * t583 + t809 * t587;
t545 = pkin(1) * t576 + t873;
t544 = -pkin(2) * t573 - t835;
t543 = t804 * t580 - t803 * t593 - t905;
t542 = t804 * t581 - t803 * t590 - t904;
t541 = t841 - t688;
t540 = t804 * t546 + t803 * t724 + t903;
t539 = t803 * t546 - t804 * t724 - t687;
t538 = -pkin(6) * t573 + (pkin(3) * t807 - qJ(4) * t809) * t615;
t537 = t803 * t580 + t804 * t593 + t851;
t536 = t803 * t581 + t804 * t590 + t850;
t534 = t804 * t556 + t803 * t592;
t533 = t803 * t556 - t804 * t592;
t531 = -qJ(2) * t576 - (pkin(2) * t803 - pkin(6) * t804) * t599;
t530 = t804 * t561 - t803 * t569 - t904;
t529 = t804 * t562 - t803 * t568 - t905;
t528 = t803 * t561 + t804 * t569 + t850;
t527 = t803 * t562 + t804 * t568 + t851;
t526 = qJ(2) * t577 - (-pkin(2) * t804 - pkin(6) * t803 - pkin(1)) * t599;
t525 = -pkin(2) * t555 - t922;
t524 = pkin(1) * t549 + t824;
t523 = -pkin(6) * t555 - t807 * t535 + t809 * t552;
t522 = -qJ(2) * t549 + t804 * t538 - t803 * t544;
t521 = -pkin(1) * t573 + qJ(2) * t550 + t803 * t538 + t804 * t544;
t520 = pkin(1) * t533 + t843;
t519 = -qJ(2) * t533 + t804 * t523 - t803 * t525;
t518 = -pkin(1) * t555 + qJ(2) * t534 + t803 * t523 + t804 * t525;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t761, 0, -t760, 0, t836, -t726, -t831, -pkin(5) * t831, 0, 0, t689, 0, -t929, 0, t936, t937, t942, pkin(5) * t942 + qJ(2) * t874 - t808 * t624, t623, t944, -t945, t622, t618, t639, -t808 * t559 + t810 * t565 - t913, -t808 * t560 + t810 * t566 + t912, -t808 * t584 + t810 * t585 - t911, t810 * t531 - t808 * t526 - pkin(5) * (t810 * t576 + t808 * t577), t623, -t945, -t944, t639, -t618, t622, -t808 * t537 + t810 * t543 - t913, -t808 * t557 + t810 * t558 - t911, -t808 * t536 + t810 * t542 - t912, t810 * t522 - t808 * t521 - pkin(5) * (t810 * t549 + t808 * t550), t623, -t944, t945, t622, t618, t639, -t808 * t527 + t810 * t529 - t913, -t808 * t528 + t810 * t530 - t912, -t808 * t539 + t810 * t540 + t911, t810 * t519 - t808 * t518 - pkin(5) * (t810 * t533 + t808 * t534); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t760, 0, t761, 0, t726, t836, t848, pkin(5) * t848, 0, 0, t929, 0, t689, 0, -t937, t936, t941, pkin(5) * t941 + qJ(2) * t880 + t810 * t624, t621, -t598, t617, t620, -t943, t638, t810 * t559 + t808 * t565 + t606, t810 * t560 + t808 * t566 + t607, t810 * t584 + t808 * t585 - t636, t808 * t531 + t810 * t526 + pkin(5) * (-t808 * t576 + t810 * t577), t621, t617, t598, t638, t943, t620, t810 * t537 + t808 * t543 + t606, t810 * t557 + t808 * t558 - t636, t810 * t536 + t808 * t542 - t607, t808 * t522 + t810 * t521 + pkin(5) * (-t808 * t549 + t810 * t550), t621, t598, -t617, t620, -t943, t638, t810 * t527 + t808 * t529 + t606, t810 * t528 + t808 * t530 - t607, t810 * t539 + t808 * t540 + t636, t808 * t519 + t810 * t518 + pkin(5) * (-t808 * t533 + t810 * t534); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t768, t769, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t652, t653, 0, -t628, t701, t683, t705, t700, t702, 0, t589, t588, t571, t545, t701, t705, -t683, 0, -t702, t700, t563, t553, t564, t524, t701, -t683, -t705, t700, t702, 0, t548, t547, t541, t520; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t812, 0, 0, -g(3), -t768, 0, 0, 0, t758, 0, -t757, 0, t832, t723, t632, qJ(2) * t632, t679, -t646, t674, t678, -t673, t717, t565, t566, t585, t531, t679, t674, t646, t717, t673, t678, t543, t558, t542, t522, t679, t646, -t674, t678, -t673, t717, t529, t530, t540, t519; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t812, 0, qJDD(1), 0, g(3), 0, -t769, 0, 0, 0, t757, 0, t758, 0, -t723, t832, t849, t624, t677, -t643, t670, t676, -t669, t716, t559, t560, t584, t526, t677, t670, t643, t716, t669, t676, t537, t557, t536, t521, t677, t643, -t670, t676, -t669, t716, t527, t528, t539, t518; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t768, t769, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t652, t653, 0, -t628, t701, t683, t705, t700, t702, 0, t589, t588, t571, t545, t701, t705, -t683, 0, -t702, t700, t563, t553, t564, t524, t701, -t683, -t705, t700, t702, 0, t548, t547, t541, t520; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t812, 0, 0, -t799, t681, 0, t719, -t686, t712, t718, -t711, t738, t634, t635, t599, pkin(6) * t599, t719, t712, t686, t738, t711, t718, t580, t567, t581, t538, t719, t686, -t712, t718, -t711, t738, t562, t561, t546, t523; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t812, 0, qJDD(1), 0, t799, 0, t682, 0, t777, -t763, -t862, -t777, -t861, -qJDD(3), t626, t627, 0, pkin(2) * t599, t777, -t862, t763, -qJDD(3), t861, -t777, t593, t742, t590, t544, t777, t763, t862, -t777, -t861, -qJDD(3), t568, t569, -t724, t525; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t681, -t682, 0, 0, t701, t683, t705, t700, t702, 0, t858, t859, t839, t873, t701, t705, -t683, 0, -t702, t700, t828, t840, t829, t824, t701, -t683, -t705, t700, t702, 0, t838, t842, t841, t843; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t749, t751, t765, -t787, t774, t787, 0, t666, t644, 0, t749, t765, -t751, t787, -t774, -t787, t900, t614, t604, -qJ(4) * t615, t749, -t751, -t765, -t787, t774, t787, t699, t582, t587, t552; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t786, t748, -t773, t750, t766, -t786, -t666, 0, -t868, 0, t786, -t773, -t748, -t786, -t766, t750, t605, t612, pkin(3) * t748, -pkin(3) * t615, t786, -t748, t773, t750, t766, -t786, t575, t665, t583, t535; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t777, t763, t862, t777, t861, qJDD(3), -t644, t868, 0, 0, -t777, t862, -t763, qJDD(3), -t861, t777, -t629 + t927, -t742, t792 - t827, t835, -t777, -t763, -t862, t777, t861, qJDD(3), t814 + t927, t819 + t928, t724, t922; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t749, t765, -t751, t787, -t774, -t787, 0, t629, -t615, 0, t749, -t751, -t765, -t787, t774, t787, t896, t813, t815, -t897; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t777, t862, -t763, qJDD(3), -t861, t777, -t629, 0, t625, 0, -t777, -t763, -t862, t777, t861, qJDD(3), t814, t819, pkin(4) * t862, -pkin(4) * t595; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t786, t773, t748, t786, t766, -t750, t615, -t625, 0, 0, -t786, t748, -t773, -t750, -t766, t786, t817 + t920, -pkin(4) * t748 + t895, pkin(4) * t762 - t820 + t926, pkin(4) * t592 + t898; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t749, -t751, -t765, -t787, t774, t787, 0, -t592, -t595, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t786, t748, -t773, -t750, -t766, t786, t592, 0, t594, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t777, t763, t862, -t777, -t861, -qJDD(3), t595, -t594, 0, 0;];
m_new_reg = t1;
