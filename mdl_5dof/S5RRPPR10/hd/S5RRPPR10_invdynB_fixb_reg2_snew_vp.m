% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPPR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:45
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPPR10_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR10_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR10_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR10_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR10_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPPR10_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:44:52
% EndTime: 2019-12-31 19:45:09
% DurationCPUTime: 15.87s
% Computational Cost: add. (27102->554), mult. (60518->771), div. (0->0), fcn. (39466->8), ass. (0->399)
t677 = sin(pkin(8));
t678 = cos(pkin(8));
t680 = sin(qJ(2));
t730 = qJD(1) * t680;
t639 = t677 * qJD(2) + t678 * t730;
t635 = t639 ^ 2;
t683 = cos(qJ(2));
t675 = t683 ^ 2;
t685 = qJD(1) ^ 2;
t671 = t675 * t685;
t589 = t671 + t635;
t725 = qJD(1) * qJD(2);
t667 = t680 * t725;
t722 = t683 * qJDD(1);
t647 = -t667 + t722;
t637 = -t678 * qJD(2) + t677 * t730;
t765 = t639 * t637;
t695 = t647 - t765;
t751 = t678 * t695;
t521 = t677 * t589 + t751;
t715 = t683 * t725;
t724 = t680 * qJDD(1);
t646 = t715 + t724;
t614 = t677 * qJDD(2) + t678 * t646;
t726 = t683 * qJD(1);
t622 = t637 * t726;
t783 = t614 + t622;
t480 = t683 * t521 + t680 * t783;
t757 = t677 * t695;
t506 = t678 * t589 - t757;
t681 = sin(qJ(1));
t684 = cos(qJ(1));
t438 = t681 * t480 + t684 * t506;
t868 = pkin(5) * t438;
t440 = t684 * t480 - t681 * t506;
t867 = pkin(5) * t440;
t478 = t680 * t521 - t683 * t783;
t866 = pkin(6) * t478;
t865 = pkin(1) * t478 + qJ(3) * t521;
t864 = -pkin(1) * t506 - pkin(6) * t480;
t613 = -t678 * qJDD(2) + t677 * t646;
t623 = t639 * t726;
t571 = t613 - t623;
t753 = t678 * t571;
t759 = t677 * t783;
t493 = t753 + t759;
t772 = t637 ^ 2;
t592 = t635 - t772;
t475 = t683 * t493 - t680 * t592;
t489 = -t677 * t571 + t678 * t783;
t863 = t681 * t475 + t684 * t489;
t862 = t684 * t475 - t681 * t489;
t617 = t772 - t671;
t526 = t678 * t617 + t757;
t570 = t613 + t623;
t485 = t683 * t526 - t680 * t570;
t518 = t677 * t617 - t751;
t861 = t681 * t485 - t684 * t518;
t860 = t684 * t485 + t681 * t518;
t784 = -t614 + t622;
t814 = -t677 * t570 + t678 * t784;
t782 = t635 + t772;
t813 = -t678 * t570 - t677 * t784;
t828 = -t680 * t782 + t683 * t813;
t841 = t681 * t814 + t684 * t828;
t859 = pkin(5) * t841;
t842 = t681 * t828 - t684 * t814;
t858 = pkin(5) * t842;
t856 = pkin(2) * t506;
t711 = t647 + t765;
t750 = t678 * t711;
t780 = -t772 - t671;
t797 = t677 * t780 - t750;
t756 = t677 * t711;
t796 = t678 * t780 + t756;
t811 = t680 * t571 + t683 * t796;
t826 = t681 * t797 + t684 * t811;
t855 = pkin(5) * t826;
t829 = t681 * t811 - t684 * t797;
t854 = pkin(5) * t829;
t853 = pkin(6) * t828;
t831 = t680 * t813 + t683 * t782;
t852 = pkin(6) * t831;
t851 = qJ(3) * t506;
t845 = -pkin(1) * t831 - pkin(2) * t782 - qJ(3) * t813;
t844 = t680 * t493 + t683 * t592;
t843 = t680 * t526 + t683 * t570;
t815 = -t683 * t571 + t680 * t796;
t840 = pkin(6) * t815;
t839 = qJ(3) * t814;
t834 = -pkin(1) * t815 - qJ(3) * t796;
t833 = -pkin(1) * t797 + pkin(6) * t811;
t618 = -t635 + t671;
t799 = -t678 * t618 + t756;
t798 = -t677 * t618 - t750;
t810 = -t680 * t784 + t683 * t798;
t830 = t681 * t810 + t684 * t799;
t827 = -t681 * t799 + t684 * t810;
t824 = pkin(2) * t797;
t822 = qJ(3) * t797;
t812 = t680 * t798 + t683 * t784;
t808 = pkin(3) * t571;
t679 = sin(qJ(5));
t682 = cos(qJ(5));
t585 = -t682 * t637 + t679 * t639;
t587 = t679 * t637 + t682 * t639;
t514 = t587 * t585;
t640 = qJDD(5) + t647;
t785 = -t514 + t640;
t807 = t679 * t785;
t803 = t682 * t785;
t692 = t678 * t613 + t677 * t622;
t693 = t677 * t613 - t678 * t622;
t719 = t680 * t765;
t775 = t683 * t693 - t719;
t795 = t681 * t775 + t684 * t692;
t690 = (-t637 * t677 - t639 * t678) * t726;
t691 = (t637 * t678 - t639 * t677) * t726;
t742 = t680 * t647;
t776 = t683 * t691 - t742;
t794 = t681 * t776 + t684 * t690;
t793 = -t681 * t692 + t684 * t775;
t792 = -t681 * t690 + t684 * t776;
t657 = t684 * g(1) + t681 * g(2);
t631 = -t685 * pkin(1) + qJDD(1) * pkin(6) - t657;
t768 = pkin(2) * t683;
t702 = -qJ(3) * t680 - t768;
t644 = t702 * qJD(1);
t787 = (qJD(1) * t644 + t631) * t680;
t498 = -t585 * qJD(5) + t679 * t613 + t682 * t614;
t664 = qJD(5) + t726;
t569 = t664 * t585;
t786 = t498 - t569;
t590 = t637 * pkin(3) - t639 * qJ(4);
t656 = t681 * g(1) - t684 * g(2);
t630 = qJDD(1) * pkin(1) + t685 * pkin(6) + t656;
t701 = t646 + t715;
t531 = -t701 * qJ(3) + (-t647 + t667) * pkin(2) - t630;
t608 = -t680 * g(3) + t683 * t631;
t771 = qJD(2) ^ 2;
t544 = -t771 * pkin(2) + qJDD(2) * qJ(3) + t644 * t726 + t608;
t733 = t677 * t531 + t678 * t544;
t781 = -t647 * qJ(4) - 0.2e1 * qJD(4) * t726 - t637 * t590 + t733;
t549 = -t677 * t614 + t678 * t623;
t550 = t678 * t614 + t677 * t623;
t703 = t683 * t550 + t719;
t779 = t684 * t549 + t681 * t703;
t632 = t683 * t647;
t778 = t680 * t691 + t632;
t717 = t683 * t765;
t777 = t680 * t693 + t717;
t774 = -t681 * t549 + t684 * t703;
t766 = t683 * g(3);
t700 = -qJDD(2) * pkin(2) - t771 * qJ(3) + qJDD(3) + t766;
t688 = t614 * qJ(4) - t700 - t808;
t743 = t680 * t631;
t773 = -(qJ(4) * t637 * t683 - t644 * t680) * qJD(1) - t688 + t743;
t583 = t585 ^ 2;
t584 = t587 ^ 2;
t662 = t664 ^ 2;
t770 = pkin(3) + pkin(4);
t769 = pkin(2) * t680;
t767 = pkin(3) * t678;
t764 = t664 * t679;
t763 = t664 * t682;
t674 = t680 ^ 2;
t762 = t674 * t685;
t543 = t700 + t787;
t761 = t677 * t543;
t754 = t678 * t543;
t727 = qJD(4) * t639;
t447 = -0.2e1 * t727 + t773;
t699 = pkin(4) * t726 - t639 * pkin(7);
t426 = t613 * pkin(4) + pkin(7) * t772 - t639 * t699 + t447;
t748 = t679 * t426;
t500 = t514 + t640;
t747 = t679 * t500;
t744 = t680 * t630;
t663 = t683 * t685 * t680;
t654 = -t663 + qJDD(2);
t741 = t680 * t654;
t655 = qJDD(2) + t663;
t740 = t680 * t655;
t738 = t682 * t426;
t737 = t682 * t500;
t735 = t683 * t630;
t734 = t683 * t654;
t732 = -t678 * t531 + t677 * t544;
t731 = t674 + t675;
t729 = qJD(3) * t637;
t728 = qJD(3) * t639;
t723 = t681 * qJDD(1);
t721 = t684 * qJDD(1);
t720 = t680 * t514;
t718 = t683 * t514;
t629 = 0.2e1 * t728;
t473 = t629 + t732;
t627 = -0.2e1 * t729;
t474 = t627 + t733;
t714 = qJ(4) * t677 + pkin(2);
t706 = t639 * t590 + qJDD(4) + t732;
t694 = t647 * pkin(3) + t706;
t687 = -qJ(4) * t671 + t694;
t408 = pkin(4) * t711 + pkin(7) * t784 + t629 + t687;
t698 = t627 + t781;
t433 = -pkin(3) * t671 + t698;
t419 = -pkin(4) * t772 + t613 * pkin(7) - t699 * t726 + t433;
t367 = -t682 * t408 + t679 * t419;
t713 = t782 - t671;
t607 = t743 + t766;
t534 = t680 * t607 + t683 * t608;
t712 = -t682 * t613 + t679 * t614;
t599 = -t681 * t656 - t684 * t657;
t709 = t681 * t663;
t708 = t684 * t663;
t651 = -t681 * t685 + t721;
t705 = -pkin(5) * t651 - t681 * g(3);
t704 = t680 * t550 - t717;
t368 = t679 * t408 + t682 * t419;
t340 = -t682 * t367 + t679 * t368;
t341 = t679 * t367 + t682 * t368;
t417 = -t678 * t473 + t677 * t474;
t418 = t677 * t473 + t678 * t474;
t533 = t683 * t607 - t680 * t608;
t598 = t684 * t656 - t681 * t657;
t689 = (-qJD(5) + t664) * t587 - t712;
t661 = -t671 - t771;
t660 = t671 - t771;
t659 = -t762 - t771;
t658 = -t762 + t771;
t653 = t671 - t762;
t652 = t671 + t762;
t650 = t684 * t685 + t723;
t649 = t731 * qJDD(1);
t648 = -0.2e1 * t667 + t722;
t645 = 0.2e1 * t715 + t724;
t642 = t683 * t655;
t641 = t731 * t725;
t626 = 0.2e1 * t727;
t624 = -pkin(5) * t650 + t684 * g(3);
t612 = t683 * t646 - t674 * t725;
t611 = -t675 * t725 - t742;
t606 = -t680 * t659 - t734;
t605 = -t680 * t658 + t642;
t604 = t683 * t661 - t740;
t603 = t683 * t660 - t741;
t602 = t683 * t659 - t741;
t601 = t680 * t661 + t642;
t595 = t684 * t649 - t681 * t652;
t594 = t681 * t649 + t684 * t652;
t591 = -t680 * t645 + t683 * t648;
t560 = -t584 + t662;
t559 = t583 - t662;
t558 = t684 * t606 + t681 * t645;
t557 = t684 * t604 - t681 * t648;
t556 = t681 * t606 - t684 * t645;
t555 = t681 * t604 + t684 * t648;
t552 = -pkin(6) * t602 - t735;
t551 = -pkin(6) * t601 - t744;
t542 = -pkin(1) * t602 + t608;
t541 = -pkin(1) * t601 + t607;
t540 = -t584 - t662;
t513 = t584 - t583;
t512 = t684 * t534 - t681 * t630;
t511 = t681 * t534 + t684 * t630;
t510 = -t662 - t583;
t497 = -t587 * qJD(5) - t712;
t488 = (-t585 * t682 + t587 * t679) * t664;
t487 = (t585 * t679 + t587 * t682) * t664;
t486 = -t583 - t584;
t477 = t754 + t851;
t468 = t498 + t569;
t463 = (qJD(5) + t664) * t587 + t712;
t462 = t682 * t559 - t747;
t461 = -t679 * t560 + t803;
t460 = -t679 * t559 - t737;
t459 = -t682 * t560 - t807;
t458 = t682 * t498 - t587 * t764;
t457 = -t679 * t498 - t587 * t763;
t456 = -t679 * t497 + t585 * t763;
t455 = -t682 * t497 - t585 * t764;
t454 = t761 - t822;
t449 = -t679 * t540 - t737;
t448 = t682 * t540 - t747;
t446 = t682 * t510 - t807;
t445 = t679 * t510 + t803;
t444 = -pkin(2) * t814 - pkin(3) * t784 + qJ(4) * t570;
t443 = -t677 * t487 + t678 * t488;
t442 = -t678 * t487 - t677 * t488;
t437 = t626 - t773 - t808;
t436 = t626 - t787 + (t783 + t622) * qJ(4) + t688;
t435 = -t687 - 0.2e1 * t728;
t434 = t474 + t856;
t432 = t683 * t443 - t680 * t640;
t431 = t473 - t824;
t421 = qJ(4) * t713 + t629 + t694;
t420 = pkin(3) * t713 + t698;
t416 = t679 * t468 + t682 * t689;
t415 = -t682 * t463 - t679 * t786;
t414 = -t682 * t468 + t679 * t689;
t413 = t679 * t463 - t682 * t786;
t412 = -t677 * t460 + t678 * t462;
t411 = -t677 * t459 + t678 * t461;
t410 = -t678 * t460 - t677 * t462;
t409 = -t678 * t459 - t677 * t461;
t407 = -t677 * t457 + t678 * t458;
t406 = -t677 * t455 + t678 * t456;
t405 = -t678 * t457 - t677 * t458;
t404 = -t678 * t455 - t677 * t456;
t403 = pkin(2) * t783 - t761 - t865;
t401 = t677 * t448 + t678 * t449;
t400 = -t678 * t448 + t677 * t449;
t399 = pkin(2) * t571 + t754 + t834;
t398 = -qJ(4) * t753 - t677 * t437 - t822;
t397 = t683 * t418 + t680 * t543;
t396 = t680 * t418 - t683 * t543;
t395 = -pkin(3) * t759 + t678 * t436 - t851;
t394 = -t824 + t629 + (-t780 - t671) * qJ(4) + (t711 + t647) * pkin(3) + t706;
t393 = t677 * t445 + t678 * t446;
t392 = -t678 * t445 + t677 * t446;
t391 = -t417 - t839;
t390 = t683 * t407 - t720;
t389 = t683 * t406 + t720;
t388 = -t856 + qJ(4) * t695 + 0.2e1 * t729 + (-t589 + t671) * pkin(3) - t781;
t387 = t678 * t433 - t677 * t435;
t386 = t677 * t433 + t678 * t435;
t385 = t683 * t412 - t680 * t689;
t384 = t683 * t411 - t680 * t468;
t383 = t683 * t401 - t680 * t786;
t382 = t680 * t401 + t683 * t786;
t381 = -t680 * t434 + t683 * t477 - t866;
t380 = -t678 * t437 + t714 * t571 + t834;
t379 = t683 * t393 - t680 * t463;
t378 = t680 * t393 + t683 * t463;
t377 = -t680 * t431 + t683 * t454 - t840;
t376 = -t677 * t436 + (-pkin(2) - t767) * t783 + t865;
t375 = -pkin(7) * t448 + qJ(4) * t786 - t738;
t374 = -pkin(7) * t445 + qJ(4) * t463 - t748;
t373 = -t418 + t845;
t372 = t677 * t414 + t678 * t416;
t371 = -t677 * t413 + t678 * t415;
t370 = -t678 * t414 + t677 * t416;
t369 = -t678 * t413 - t677 * t415;
t366 = t683 * t387 + t680 * t447;
t365 = t680 * t387 - t683 * t447;
t364 = -t677 * t420 + t678 * t421 - t839;
t363 = t683 * t391 + t769 * t814 - t852;
t362 = t684 * t397 + t681 * t417;
t361 = t681 * t397 - t684 * t417;
t360 = t683 * t371 - t680 * t513;
t359 = -pkin(7) * t449 + t770 * t786 + t748;
t358 = -pkin(1) * t396 + pkin(2) * t543 - qJ(3) * t418;
t357 = t683 * t372 - t680 * t486;
t356 = t680 * t372 + t683 * t486;
t355 = -pkin(7) * t446 + t770 * t463 - t738;
t354 = -qJ(3) * t386 + (pkin(3) * t677 - qJ(4) * t678) * t447;
t353 = t684 * t383 + t681 * t400;
t352 = t681 * t383 - t684 * t400;
t351 = -t680 * t394 + t683 * t398 - t840;
t350 = -t678 * t420 - t677 * t421 + t845;
t349 = -pkin(2) * t386 - pkin(3) * t435 - qJ(4) * t433;
t348 = -t680 * t388 + t683 * t395 + t866;
t347 = t684 * t379 + t681 * t392;
t346 = t681 * t379 - t684 * t392;
t345 = -pkin(6) * t396 + (-qJ(3) * t683 + t769) * t417;
t344 = t683 * t364 - t680 * t444 - t852;
t343 = t684 * t366 + t681 * t386;
t342 = t681 * t366 - t684 * t386;
t339 = t684 * t357 + t681 * t370;
t338 = t681 * t357 - t684 * t370;
t337 = -pkin(2) * t400 - qJ(4) * t449 + t770 * t448 - t368;
t336 = -pkin(7) * t340 - qJ(4) * t426;
t335 = -pkin(2) * t370 - qJ(4) * t416 + t770 * t414;
t334 = -pkin(2) * t392 - qJ(4) * t446 + t770 * t445 - t367;
t333 = -pkin(1) * t365 - qJ(3) * t387 + (t714 + t767) * t447;
t332 = -qJ(3) * t400 - t677 * t359 + t678 * t375;
t331 = -pkin(7) * t414 + qJ(4) * t486 - t340;
t330 = -qJ(3) * t392 - t677 * t355 + t678 * t374;
t329 = -pkin(7) * t341 - t770 * t426;
t328 = -pkin(7) * t416 + t770 * t486 - t341;
t327 = -pkin(1) * t382 - pkin(2) * t786 - qJ(3) * t401 - t678 * t359 - t677 * t375;
t326 = -pkin(6) * t365 - t680 * t349 + t683 * t354;
t325 = -pkin(1) * t378 - pkin(2) * t463 - qJ(3) * t393 - t678 * t355 - t677 * t374;
t324 = t677 * t340 + t678 * t341;
t323 = -t678 * t340 + t677 * t341;
t322 = t683 * t324 + t680 * t426;
t321 = t680 * t324 - t683 * t426;
t320 = -pkin(6) * t382 + t683 * t332 - t680 * t337;
t319 = -pkin(6) * t378 + t683 * t330 - t680 * t334;
t318 = -qJ(3) * t370 - t677 * t328 + t678 * t331;
t317 = -pkin(1) * t356 - pkin(2) * t486 - qJ(3) * t372 - t678 * t328 - t677 * t331;
t316 = t684 * t322 + t681 * t323;
t315 = t681 * t322 - t684 * t323;
t314 = -qJ(3) * t323 - t677 * t329 + t678 * t336;
t313 = -pkin(2) * t323 - qJ(4) * t341 + t770 * t340;
t312 = -pkin(6) * t356 + t683 * t318 - t680 * t335;
t311 = -pkin(1) * t321 + pkin(2) * t426 - qJ(3) * t324 - t678 * t329 - t677 * t336;
t310 = -pkin(6) * t321 - t680 * t313 + t683 * t314;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t650, -t651, 0, t599, 0, 0, 0, 0, 0, 0, t557, t558, t595, t512, 0, 0, 0, 0, 0, 0, t826, t440, t841, t362, 0, 0, 0, 0, 0, 0, t826, t841, -t440, t343, 0, 0, 0, 0, 0, 0, t347, t353, t339, t316; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t651, -t650, 0, t598, 0, 0, 0, 0, 0, 0, t555, t556, t594, t511, 0, 0, 0, 0, 0, 0, t829, t438, t842, t361, 0, 0, 0, 0, 0, 0, t829, t842, -t438, t342, 0, 0, 0, 0, 0, 0, t346, t352, t338, t315; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t601, t602, 0, -t533, 0, 0, 0, 0, 0, 0, t815, t478, t831, t396, 0, 0, 0, 0, 0, 0, t815, t831, -t478, t365, 0, 0, 0, 0, 0, 0, t378, t382, t356, t321; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t651, 0, -t650, 0, t705, -t624, -t598, -pkin(5) * t598, t684 * t612 - t709, t684 * t591 - t681 * t653, t684 * t605 + t680 * t723, t684 * t611 + t709, t684 * t603 + t681 * t722, t681 * qJDD(2) + t684 * t641, -pkin(5) * t555 - t681 * t541 + t684 * t551, -pkin(5) * t556 - t681 * t542 + t684 * t552, -pkin(5) * t594 + t684 * t533, -pkin(5) * t511 - (pkin(1) * t681 - pkin(6) * t684) * t533, t774, -t862, t827, t793, t860, t792, t684 * t377 - t681 * t399 - t854, t684 * t381 - t681 * t403 - t868, t684 * t363 - t681 * t373 - t858, -pkin(5) * t361 + t684 * t345 - t681 * t358, t774, t827, t862, t792, -t860, t793, t684 * t351 - t681 * t380 - t854, t684 * t344 - t681 * t350 - t858, t684 * t348 - t681 * t376 + t868, -pkin(5) * t342 + t684 * t326 - t681 * t333, t684 * t390 - t681 * t405, t684 * t360 - t681 * t369, t684 * t384 - t681 * t409, t684 * t389 - t681 * t404, t684 * t385 - t681 * t410, t684 * t432 - t681 * t442, -pkin(5) * t346 + t684 * t319 - t681 * t325, -pkin(5) * t352 + t684 * t320 - t681 * t327, -pkin(5) * t338 + t684 * t312 - t681 * t317, -pkin(5) * t315 + t684 * t310 - t681 * t311; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t650, 0, t651, 0, t624, t705, t599, pkin(5) * t599, t681 * t612 + t708, t681 * t591 + t684 * t653, t681 * t605 - t680 * t721, t681 * t611 - t708, t681 * t603 - t683 * t721, -t684 * qJDD(2) + t681 * t641, pkin(5) * t557 + t684 * t541 + t681 * t551, pkin(5) * t558 + t684 * t542 + t681 * t552, pkin(5) * t595 + t681 * t533, pkin(5) * t512 - (-pkin(1) * t684 - pkin(6) * t681) * t533, t779, -t863, t830, t795, t861, t794, t681 * t377 + t684 * t399 + t855, t681 * t381 + t684 * t403 + t867, t681 * t363 + t684 * t373 + t859, pkin(5) * t362 + t681 * t345 + t684 * t358, t779, t830, t863, t794, -t861, t795, t681 * t351 + t684 * t380 + t855, t681 * t344 + t684 * t350 + t859, t681 * t348 + t684 * t376 - t867, pkin(5) * t343 + t681 * t326 + t684 * t333, t681 * t390 + t684 * t405, t681 * t360 + t684 * t369, t681 * t384 + t684 * t409, t681 * t389 + t684 * t404, t681 * t385 + t684 * t410, t681 * t432 + t684 * t442, pkin(5) * t347 + t681 * t319 + t684 * t325, pkin(5) * t353 + t681 * t320 + t684 * t327, pkin(5) * t339 + t681 * t312 + t684 * t317, pkin(5) * t316 + t681 * t310 + t684 * t311; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t656, t657, 0, 0, t701 * t680, t683 * t645 + t680 * t648, t683 * t658 + t740, -t680 * t715 + t632, t680 * t660 + t734, 0, pkin(1) * t648 + pkin(6) * t604 + t735, -pkin(1) * t645 + pkin(6) * t606 - t744, pkin(1) * t652 + pkin(6) * t649 + t534, pkin(1) * t630 + pkin(6) * t534, t704, -t844, t812, t777, t843, t778, t683 * t431 + t680 * t454 + t833, t683 * t434 + t680 * t477 - t864, t853 + t680 * t391 + (-pkin(1) - t768) * t814, pkin(6) * t397 + (-pkin(1) + t702) * t417, t704, t812, t844, t778, -t843, t777, t683 * t394 + t680 * t398 + t833, -pkin(1) * t814 + t680 * t364 + t683 * t444 + t853, t683 * t388 + t680 * t395 + t864, -pkin(1) * t386 + pkin(6) * t366 + t683 * t349 + t680 * t354, t680 * t407 + t718, t680 * t371 + t683 * t513, t680 * t411 + t683 * t468, t680 * t406 - t718, t680 * t412 + t683 * t689, t680 * t443 + t683 * t640, -pkin(1) * t392 + pkin(6) * t379 + t680 * t330 + t683 * t334, -pkin(1) * t400 + pkin(6) * t383 + t680 * t332 + t683 * t337, -pkin(1) * t370 + pkin(6) * t357 + t680 * t318 + t683 * t335, -pkin(1) * t323 + pkin(6) * t322 + t683 * t313 + t680 * t314;];
tauB_reg = t1;
