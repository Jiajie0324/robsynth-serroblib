% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S5RRPPR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3]';
% 
% Output:
% MMD_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:45
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S5RRPPR10_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR10_inertiaDJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR10_inertiaDJ_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPPR10_inertiaDJ_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:44:41
% EndTime: 2019-12-31 19:44:46
% DurationCPUTime: 1.69s
% Computational Cost: add. (1120->199), mult. (2783->377), div. (0->0), fcn. (2275->6), ass. (0->109)
t67 = sin(pkin(8));
t63 = t67 ^ 2;
t68 = cos(pkin(8));
t64 = t68 ^ 2;
t135 = (t63 + t64) * qJD(3);
t130 = pkin(3) + pkin(4);
t70 = sin(qJ(2));
t115 = t70 * qJ(3);
t71 = cos(qJ(2));
t82 = -t71 * pkin(2) - t115;
t44 = -pkin(1) + t82;
t97 = pkin(6) * t67 + pkin(3);
t134 = (-pkin(7) * t70 - t44) * t68 + (pkin(4) + t97) * t71;
t133 = t130 * t67;
t69 = sin(qJ(5));
t114 = qJD(5) * t69;
t127 = cos(qJ(5));
t90 = qJD(5) * t127;
t32 = -t68 * t114 + t67 * t90;
t39 = t127 * t67 - t69 * t68;
t94 = t67 * qJ(4) + pkin(2);
t40 = -t68 * pkin(3) - t94;
t132 = (-t40 * t71 + t115) * qJD(2);
t88 = qJD(2) * (t70 ^ 2 - t71 ^ 2);
t131 = 0.2e1 * t68;
t129 = pkin(2) * t70;
t128 = pkin(3) * t67;
t126 = t67 * t70;
t125 = t67 * t71;
t124 = t68 * t44;
t123 = t68 * t70;
t122 = t68 * t71;
t120 = pkin(7) - qJ(3);
t107 = t71 * qJD(2);
t56 = t68 * t107;
t119 = -qJ(4) * t56 - qJD(4) * t123;
t59 = pkin(6) * t122;
t25 = t67 * t44 + t59;
t118 = qJ(3) * t135;
t116 = qJ(3) * t71;
t113 = t63 * qJD(4);
t112 = t67 * qJD(3);
t111 = t67 * qJD(4);
t110 = t68 * qJD(3);
t109 = t70 * qJD(2);
t108 = t70 * qJD(3);
t105 = pkin(6) * t125;
t104 = -0.2e1 * pkin(1) * qJD(2);
t103 = pkin(6) * t107;
t101 = t67 * t108;
t100 = t68 * t109;
t99 = t68 * t108;
t98 = t70 * t107;
t95 = t120 * t67;
t47 = t120 * t68;
t93 = qJ(4) * t68 - pkin(6);
t92 = -t68 * pkin(6) + qJ(4);
t91 = qJD(2) * t127;
t89 = t127 * qJD(3);
t87 = 0.2e1 * t98;
t43 = t67 * t56;
t85 = t68 * t89;
t22 = -t71 * qJ(4) + t25;
t83 = t70 * t43;
t81 = -t116 + t129;
t74 = pkin(6) * t126 + t68 * t81;
t17 = t74 * qJD(2) - t99;
t73 = -pkin(6) * t123 + t67 * t81;
t18 = t73 * qJD(2) - t101;
t80 = -t17 * t67 + t18 * t68;
t77 = -t68 * pkin(2) - t97;
t76 = t127 * t95;
t38 = t127 * t68 + t69 * t67;
t75 = -t71 * qJD(4) - t101;
t31 = t38 * qJD(5);
t72 = t127 * t134;
t15 = pkin(7) * t126 + t22;
t4 = t127 * t15 + t134 * t69;
t53 = t67 * t107;
t52 = t67 * t109;
t51 = t71 * t112;
t50 = -0.2e1 * t98;
t42 = t64 * t87;
t41 = t63 * t87;
t37 = 0.2e1 * t135;
t34 = t130 * t68 + t94;
t33 = t67 * t88;
t30 = (t63 - t64) * t107;
t29 = t38 * t70;
t28 = t39 * t70;
t27 = t88 * t131;
t26 = (-t93 + t128) * t70;
t24 = -t105 + t124;
t23 = t97 * t71 - t124;
t21 = (t93 - t133) * t70;
t20 = -t127 * t47 - t69 * t95;
t19 = t69 * t47 - t76;
t16 = (pkin(6) + t128) * t107 + t119;
t14 = t99 + (t68 * t116 + t77 * t70) * qJD(2);
t13 = (pkin(6) + t133) * t107 + t119;
t12 = (-t67 * t116 + (t67 * pkin(2) + t92) * t70) * qJD(2) + t75;
t11 = t38 * t107 + t32 * t70;
t10 = -t91 * t125 + t70 * t31 + t69 * t56;
t8 = t47 * t90 - t69 * t110 + (t120 * t114 + t89) * t67;
t7 = qJD(5) * t76 - t69 * t112 - t47 * t114 - t85;
t3 = -t69 * t15 + t72;
t2 = -t69 * t75 + t70 * t85 - t4 * qJD(5) + (-t69 * (pkin(7) * t125 + t70 * qJ(4) + t73) + t127 * (-pkin(7) * t122 - t130 * t70 - t74)) * qJD(2);
t1 = t15 * t114 - t69 * (t99 + (-t71 * t47 + (-pkin(4) + t77) * t70) * qJD(2)) - t127 * ((t92 * t70 + (t120 * t71 + t129) * t67) * qJD(2) + t75) - qJD(5) * t72;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t87, -0.2e1 * t88, 0, t50, 0, 0, t70 * t104, t71 * t104, 0, 0, t42, -0.4e1 * t83, t27, t41, -0.2e1 * t33, t50, -0.2e1 * t17 * t71 + 0.2e1 * (t24 + 0.2e1 * t105) * t109, 0.2e1 * t18 * t71 + 0.2e1 * (-t25 + 0.2e1 * t59) * t109, 0.2e1 * (-t17 * t68 - t18 * t67) * t70 + 0.2e1 * (-t24 * t68 - t25 * t67) * t107, 0.2e1 * pkin(6) ^ 2 * t98 + 0.2e1 * t24 * t17 + 0.2e1 * t25 * t18, t42, t27, 0.4e1 * t83, t50, 0.2e1 * t33, t41, 0.2e1 * t16 * t126 + 0.2e1 * t14 * t71 + 0.2e1 * (t26 * t125 - t23 * t70) * qJD(2), 0.2e1 * (-t12 * t67 + t14 * t68) * t70 + 0.2e1 * (-t22 * t67 + t23 * t68) * t107, -0.2e1 * t16 * t123 - 0.2e1 * t12 * t71 + 0.2e1 * (-t26 * t122 + t22 * t70) * qJD(2), 0.2e1 * t22 * t12 + 0.2e1 * t23 * t14 + 0.2e1 * t26 * t16, 0.2e1 * t29 * t11, -0.2e1 * t29 * t10 + 0.2e1 * t11 * t28, -0.2e1 * t29 * t109 + 0.2e1 * t11 * t71, -0.2e1 * t28 * t10, -0.2e1 * t10 * t71 - 0.2e1 * t28 * t109, t50, 0.2e1 * t21 * t10 - 0.2e1 * t3 * t109 + 0.2e1 * t13 * t28 + 0.2e1 * t2 * t71, 0.2e1 * t1 * t71 + 0.2e1 * t4 * t109 + 0.2e1 * t21 * t11 - 0.2e1 * t13 * t29, -0.2e1 * t1 * t28 - 0.2e1 * t4 * t10 - 0.2e1 * t3 * t11 - 0.2e1 * t2 * t29, -0.2e1 * t4 * t1 - 0.2e1 * t21 * t13 + 0.2e1 * t3 * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t107, 0, -t109, 0, -t103, pkin(6) * t109, 0, 0, t43, -t30, t52, -t43, t100, 0, t51 + (t82 * t67 - t59) * qJD(2), t71 * t110 + (t82 * t68 + t105) * qJD(2), t80, -pkin(2) * t103 + (-t24 * t67 + t25 * t68) * qJD(3) + t80 * qJ(3), t43, t52, t30, 0, -t100, -t43, -t70 * t113 - t67 * t132 - t16 * t68 + t51, t12 * t68 + t14 * t67, -t16 * t67 + (-qJD(3) * t71 + t70 * t111 + t132) * t68, t16 * t40 + (qJ(3) * t12 + qJD(3) * t22) * t68 + (qJ(3) * t14 + qJD(3) * t23 - qJD(4) * t26) * t67, t11 * t39 - t29 * t31, -t39 * t10 - t11 * t38 - t31 * t28 - t29 * t32, -t39 * t109 - t31 * t71, t10 * t38 - t28 * t32, t38 * t109 - t32 * t71, 0, t34 * t10 - t19 * t109 - t28 * t111 - t13 * t38 + t21 * t32 + t8 * t71, t20 * t109 + t34 * t11 + t29 * t111 - t13 * t39 - t21 * t31 + t7 * t71, t1 * t38 - t20 * t10 - t19 * t11 - t2 * t39 - t7 * t28 - t8 * t29 + t3 * t31 - t4 * t32, -t1 * t20 + t21 * t111 - t13 * t34 + t2 * t19 + t3 * t8 - t4 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, 0.2e1 * t118, 0, 0, 0, 0, 0, 0, t111 * t131, t37, 0.2e1 * t113, -0.2e1 * t40 * t111 + 0.2e1 * t118, -0.2e1 * t39 * t31, 0.2e1 * t31 * t38 - 0.2e1 * t39 * t32, 0, 0.2e1 * t38 * t32, 0, 0, 0.2e1 * t38 * t111 + 0.2e1 * t34 * t32, 0.2e1 * t39 * t111 - 0.2e1 * t34 * t31, 0.2e1 * t19 * t31 - 0.2e1 * t20 * t32 + 0.2e1 * t7 * t38 - 0.2e1 * t8 * t39, 0.2e1 * t34 * t111 + 0.2e1 * t19 * t8 - 0.2e1 * t20 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53, t56, 0, t103, 0, 0, 0, 0, 0, 0, t53, 0, -t56, t16, 0, 0, 0, 0, 0, 0, -t10, -t11, 0, t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t111, 0, 0, 0, 0, 0, 0, -t32, t31, 0, -t111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t109, t56, 0, t14, 0, 0, 0, 0, 0, 0, -t71 * t114 - t70 * t91, t69 * t109 - t71 * t90, -t127 * t11 - t69 * t10 + (t127 * t28 + t29 * t69) * qJD(5), t2 * t127 - t1 * t69 + (t127 * t4 - t3 * t69) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t112, 0, 0, 0, 0, 0, 0, 0, 0, t127 * t31 - t69 * t32 + (-t127 * t38 + t39 * t69) * qJD(5), t8 * t127 - t7 * t69 + (t127 * t20 - t19 * t69) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t11, 0, -t10, -t109, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, 0, -t32, 0, t8, t7, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t114, -t90, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t5;
