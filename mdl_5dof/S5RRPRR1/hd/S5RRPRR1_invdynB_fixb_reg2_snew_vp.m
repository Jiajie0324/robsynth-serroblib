% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d4,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-07-18 17:22
% Revision: 08c8d617a845f5dd194efdf9aca2774760f7818f (2019-07-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPRR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(4,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'S5RRPRR1_invdynB_fixb_reg2_snew_vp: pkin has to be [4x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-07-18 17:22:32
% EndTime: 2019-07-18 17:22:42
% DurationCPUTime: 5.64s
% Computational Cost: add. (16423->409), mult. (36147->642), div. (0->0), fcn. (23314->8), ass. (0->326)
t509 = sin(qJ(5));
t510 = sin(qJ(4));
t511 = sin(qJ(2));
t514 = cos(qJ(4));
t515 = cos(qJ(2));
t465 = (t510 * t515 + t511 * t514) * qJD(1);
t506 = qJD(2) + qJD(4);
t513 = cos(qJ(5));
t433 = t465 * t509 - t513 * t506;
t435 = t465 * t513 + t506 * t509;
t392 = t435 * t433;
t553 = qJD(1) * qJD(2);
t538 = t515 * t553;
t551 = qJDD(1) * t511;
t477 = t538 + t551;
t541 = t511 * t553;
t549 = qJDD(1) * t515;
t478 = -t541 + t549;
t536 = t510 * t477 - t514 * t478;
t395 = -qJD(4) * t465 - t536;
t525 = qJDD(5) - t395;
t594 = -t392 + t525;
t599 = t509 * t594;
t556 = qJD(1) * t511;
t463 = -t514 * t515 * qJD(1) + t510 * t556;
t425 = t465 * t463;
t505 = qJDD(2) + qJDD(4);
t593 = -t425 + t505;
t598 = t510 * t593;
t597 = t513 * t594;
t596 = t514 * t593;
t456 = t506 * t463;
t524 = qJD(4) * t463 - t477 * t514 - t478 * t510;
t595 = t456 + t524;
t357 = -t433 * qJD(5) + t509 * t505 - t513 * t524;
t461 = qJD(5) + t463;
t405 = t461 * t433;
t342 = -t405 + t357;
t422 = t425 + t505;
t512 = sin(qJ(1));
t516 = cos(qJ(1));
t488 = t512 * g(1) - t516 * g(2);
t474 = t516 * t488;
t489 = g(1) * t516 + g(2) * t512;
t591 = -t489 * t512 + t474;
t588 = t506 ^ 2;
t589 = t465 ^ 2;
t447 = -t588 - t589;
t537 = -t513 * t505 - t509 * t524;
t339 = (qJD(5) - t461) * t435 + t537;
t372 = (qJD(4) - t506) * t465 + t536;
t469 = t477 * qJ(3);
t590 = (qJ(3) * t553 - g(3)) * t515 - t469;
t508 = t515 ^ 2;
t518 = qJD(1) ^ 2;
t503 = t508 * t518;
t527 = qJD(2) * pkin(2) - pkin(3) * t556;
t485 = qJD(2) * pkin(1) - qJ(3) * t556;
t528 = -t485 * t556 - qJDD(3) + t488;
t583 = pkin(3) + qJ(3);
t587 = pkin(1) + pkin(2);
t364 = t587 * t478 + t583 * t503 - t527 * t556 + t528;
t431 = t433 ^ 2;
t432 = t435 ^ 2;
t457 = t461 ^ 2;
t462 = t463 ^ 2;
t558 = t515 * t518;
t531 = -pkin(1) * t558 - t489;
t552 = qJD(1) * qJD(3);
t547 = -0.2e1 * t552;
t582 = qJDD(2) * pkin(1);
t388 = t582 + (-t531 + t547) * t511 + t590;
t586 = pkin(1) * t388;
t585 = t512 * g(3);
t584 = t516 * g(3);
t347 = t392 + t525;
t581 = t347 * t509;
t580 = t347 * t513;
t579 = t388 * t511;
t578 = t388 * t515;
t577 = t422 * t510;
t576 = t422 * t514;
t575 = t461 * t509;
t574 = t461 * t513;
t495 = t511 * t558;
t486 = qJDD(2) + t495;
t573 = t486 * t511;
t487 = qJDD(2) - t495;
t572 = t487 * t511;
t571 = t487 * t515;
t570 = t488 * t512;
t568 = t506 * t510;
t567 = t506 * t514;
t507 = t511 ^ 2;
t566 = t507 * t518;
t459 = -t511 * g(3) - t515 * t489;
t546 = 0.2e1 * t552;
t529 = t478 * qJ(3) + t515 * t546 + t459;
t360 = t478 * pkin(3) - t587 * t503 + (-t485 - t527) * qJD(2) + t529;
t519 = -t477 * pkin(3) - t469 + (t489 + t547) * t511 + t587 * qJDD(2) + (t587 * t518 * t511 + t583 * t553 - g(3)) * t515;
t312 = t510 * t360 - t514 * t519;
t304 = pkin(4) * t447 + t312;
t565 = t509 * t304;
t564 = t510 * t364;
t563 = t511 * t488;
t562 = t511 * t489;
t561 = t513 * t304;
t560 = t514 * t364;
t472 = t515 * t486;
t559 = t515 * t488;
t313 = t514 * t360 + t510 * t519;
t557 = t507 + t508;
t550 = qJDD(1) * t512;
t548 = qJDD(1) * t516;
t545 = t510 * t392;
t544 = t514 * t392;
t543 = t512 * t425;
t542 = t516 * t425;
t540 = t511 * t550;
t539 = t511 * t548;
t277 = t510 * t312 + t514 * t313;
t458 = t515 * g(3) - t562;
t411 = t458 * t511 + t515 * t459;
t535 = -t516 * t489 - t570;
t517 = qJD(2) ^ 2;
t491 = -t517 - t566;
t534 = -t491 - t503;
t533 = t512 * t495;
t532 = t516 * t495;
t303 = t422 * pkin(4) + t313;
t520 = t595 * pkin(4) - t364;
t274 = t303 * t509 - t513 * t520;
t275 = t513 * t303 + t509 * t520;
t255 = -t274 * t513 + t275 * t509;
t256 = t509 * t274 + t513 * t275;
t276 = -t514 * t312 + t510 * t313;
t410 = t458 * t515 - t459 * t511;
t523 = -t478 * pkin(1) - t528;
t522 = -qJD(2) * t485 + t529;
t521 = t511 * t546 - t590;
t493 = -t503 - t517;
t492 = t503 - t517;
t490 = t517 - t566;
t484 = t503 - t566;
t483 = t503 + t566;
t482 = -t512 * t518 + t548;
t481 = t516 * t518 + t550;
t480 = t557 * qJDD(1);
t479 = -0.2e1 * t541 + t549;
t476 = 0.2e1 * t538 + t551;
t471 = t557 * t553;
t453 = t588 - t589;
t452 = t462 - t588;
t451 = qJDD(2) * t512 + t471 * t516;
t450 = t477 * t515 - t507 * t553;
t449 = -qJDD(2) * t516 + t471 * t512;
t448 = -t478 * t511 - t508 * t553;
t446 = -t491 * t511 - t571;
t445 = -t490 * t511 + t472;
t444 = t493 * t515 - t573;
t443 = t492 * t515 - t572;
t442 = t491 * t515 - t572;
t441 = t490 * t515 + t573;
t440 = t493 * t511 + t472;
t439 = t492 * t511 + t571;
t438 = (t477 + t538) * t511;
t437 = (t478 - t541) * t515;
t436 = -pkin(1) * t476 - qJ(3) * t487;
t430 = t480 * t516 - t483 * t512;
t429 = t480 * t512 + t483 * t516;
t427 = -t476 * t511 + t479 * t515;
t426 = t476 * t515 + t479 * t511;
t424 = t462 - t589;
t420 = t450 * t516 - t533;
t419 = t448 * t516 + t533;
t418 = t450 * t512 + t532;
t417 = t448 * t512 - t532;
t416 = t445 * t516 + t540;
t415 = t443 * t516 + t512 * t549;
t414 = t445 * t512 - t539;
t413 = t443 * t512 - t515 * t548;
t412 = -t588 - t462;
t409 = t446 * t516 + t476 * t512;
t408 = t444 * t516 - t479 * t512;
t407 = t446 * t512 - t476 * t516;
t406 = t444 * t512 + t479 * t516;
t404 = qJ(3) * t503 - t523;
t403 = -t432 + t457;
t402 = t431 - t457;
t401 = (-t463 * t514 + t465 * t510) * t506;
t400 = (-t463 * t510 - t465 * t514) * t506;
t399 = -t462 - t589;
t398 = t427 * t516 - t484 * t512;
t397 = t427 * t512 + t484 * t516;
t391 = qJ(3) * t534 + t523;
t390 = -pkin(1) * t503 + t522;
t389 = -t432 + t431;
t387 = -t432 - t457;
t386 = -t582 + (qJ(3) * qJDD(1) + t531) * t511 + t521;
t385 = pkin(1) * t534 + t522;
t384 = t452 * t514 - t577;
t383 = -t453 * t510 + t596;
t382 = t452 * t510 + t576;
t381 = t453 * t514 + t598;
t380 = -0.2e1 * pkin(1) * t486 + t521 - t562;
t379 = (t493 + t503) * qJ(3) + (t478 + t479) * pkin(1) + t528;
t378 = -t447 * t510 - t576;
t377 = t447 * t514 - t577;
t376 = -t456 + t524;
t371 = (qJD(4) + t506) * t465 + t536;
t370 = -t457 - t431;
t369 = qJ(3) * t549 + (t483 - t503) * pkin(1) + t522;
t368 = -t465 * t568 - t514 * t524;
t367 = t465 * t567 - t510 * t524;
t366 = -t395 * t510 + t463 * t567;
t365 = t395 * t514 + t463 * t568;
t363 = t412 * t514 - t598;
t362 = t412 * t510 + t596;
t361 = t431 + t432;
t359 = -qJ(3) * t472 - t379 * t511;
t358 = t391 * t515 - t436 * t511;
t356 = -qJD(5) * t435 - t537;
t352 = (-t433 * t513 + t435 * t509) * t461;
t351 = (t433 * t509 + t435 * t513) * t461;
t350 = -t400 * t511 + t401 * t515;
t349 = pkin(1) * t404 + qJ(3) * t390;
t345 = t390 * t515 - t579;
t343 = -t405 - t357;
t340 = (-qJD(5) - t461) * t435 - t537;
t338 = -t382 * t511 + t384 * t515;
t337 = -t381 * t511 + t383 * t515;
t336 = t357 * t513 - t435 * t575;
t335 = -t357 * t509 - t435 * t574;
t334 = -t356 * t509 + t433 * t574;
t333 = -t356 * t513 - t433 * t575;
t332 = -t369 * t511 + t386 * t515;
t331 = -t377 * t511 + t378 * t515;
t330 = -t372 * t514 - t376 * t510;
t329 = -t371 * t514 + t510 * t595;
t328 = -t372 * t510 + t376 * t514;
t327 = -t371 * t510 - t514 * t595;
t326 = t352 * t514 + t510 * t525;
t325 = t352 * t510 - t514 * t525;
t323 = t402 * t513 - t581;
t322 = -t403 * t509 + t597;
t321 = -t402 * t509 - t580;
t320 = -t403 * t513 - t599;
t319 = -t367 * t511 + t368 * t515;
t318 = -t365 * t511 + t366 * t515;
t317 = -t362 * t511 + t363 * t515;
t316 = -qJ(3) * t578 - t349 * t511;
t315 = -t387 * t509 - t580;
t314 = t387 * t513 - t581;
t311 = t370 * t513 - t599;
t310 = t370 * t509 + t597;
t308 = t336 * t514 + t545;
t307 = t334 * t514 - t545;
t306 = t336 * t510 - t544;
t305 = t334 * t510 + t544;
t302 = -t583 * t377 - t560;
t301 = -t583 * t362 - t564;
t300 = -t339 * t513 - t343 * t509;
t299 = t340 * t513 - t342 * t509;
t298 = -t339 * t509 + t343 * t513;
t297 = -t340 * t509 - t342 * t513;
t296 = t587 * t328;
t295 = -t328 * t511 + t330 * t515;
t294 = -t327 * t511 + t329 * t515;
t293 = t323 * t514 - t339 * t510;
t292 = t322 * t514 - t343 * t510;
t291 = t323 * t510 + t339 * t514;
t290 = t322 * t510 + t343 * t514;
t289 = -t325 * t511 + t326 * t515;
t288 = t315 * t514 + t342 * t510;
t287 = t315 * t510 - t342 * t514;
t286 = -t587 * t377 + t313;
t285 = t311 * t514 - t340 * t510;
t284 = t311 * t510 + t340 * t514;
t283 = t299 * t514 - t389 * t510;
t282 = t299 * t510 + t389 * t514;
t281 = -t587 * t362 + t312;
t280 = t583 * t378 + t587 * t595 - t564;
t279 = t300 * t514 - t361 * t510;
t278 = t300 * t510 + t361 * t514;
t273 = -pkin(4) * t314 + t561;
t272 = t583 * t363 - t587 * t371 + t560;
t271 = -pkin(4) * t310 + t565;
t270 = -t306 * t511 + t308 * t515;
t269 = -t305 * t511 + t307 * t515;
t268 = -t280 * t511 + t302 * t515;
t267 = -t291 * t511 + t293 * t515;
t266 = -t290 * t511 + t292 * t515;
t265 = -t287 * t511 + t288 * t515;
t264 = -t272 * t511 + t301 * t515;
t263 = -t284 * t511 + t285 * t515;
t262 = -t583 * t328 - t276;
t261 = -t282 * t511 + t283 * t515;
t260 = -t278 * t511 + t279 * t515;
t259 = t587 * t276;
t258 = t583 * t276;
t257 = -t276 * t511 + t277 * t515;
t254 = t583 * t330 - t587 * t399 + t277;
t253 = t583 * t277 + t587 * t364;
t252 = t256 * t514 + t304 * t510;
t251 = t256 * t510 - t304 * t514;
t250 = -pkin(4) * t315 - t587 * t287 - t565;
t249 = -pkin(4) * t298 - t255;
t248 = -pkin(4) * t311 - t587 * t284 + t561;
t247 = t514 * t273 - t510 * t275 - t583 * t287;
t246 = t514 * t271 - t510 * t274 - t583 * t284;
t245 = -t254 * t511 + t262 * t515;
t244 = -t253 * t511 - t258 * t515;
t243 = t510 * t273 + t514 * t275 + t583 * t288 - t587 * t314;
t242 = -pkin(4) * t300 - t587 * t278 - t256;
t241 = t514 * t249 - t583 * t278;
t240 = t510 * t271 + t514 * t274 + t583 * t285 - t587 * t310;
t239 = -t251 * t511 + t252 * t515;
t238 = t510 * t249 + t583 * t279 - t587 * t298;
t237 = -pkin(4) * t256 - t587 * t251;
t236 = -t514 * pkin(4) * t255 - t583 * t251;
t235 = -t243 * t511 + t247 * t515;
t234 = -t240 * t511 + t246 * t515;
t233 = -t238 * t511 + t241 * t515;
t232 = t583 * t252 + (-pkin(4) * t510 - t587) * t255;
t231 = -t232 * t511 + t236 * t515;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t481, -t482, 0, t535, 0, 0, 0, 0, 0, 0, t408, t409, t430, t411 * t516 - t570, 0, 0, 0, 0, 0, 0, t408, t409, t430, t345 * t516 - t404 * t512, 0, 0, 0, 0, 0, 0, t317 * t516 + t371 * t512, t331 * t516 - t512 * t595, t295 * t516 + t399 * t512, t257 * t516 - t364 * t512, 0, 0, 0, 0, 0, 0, t263 * t516 + t310 * t512, t265 * t516 + t314 * t512, t260 * t516 + t298 * t512, t239 * t516 + t255 * t512; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t482, -t481, 0, t591, 0, 0, 0, 0, 0, 0, t406, t407, t429, t411 * t512 + t474, 0, 0, 0, 0, 0, 0, t406, t407, t429, t345 * t512 + t404 * t516, 0, 0, 0, 0, 0, 0, t317 * t512 - t371 * t516, t331 * t512 + t516 * t595, t295 * t512 - t399 * t516, t257 * t512 + t364 * t516, 0, 0, 0, 0, 0, 0, t263 * t512 - t310 * t516, t265 * t512 - t314 * t516, t260 * t512 - t298 * t516, t239 * t512 - t255 * t516; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t440, t442, 0, -t410, 0, 0, 0, 0, 0, 0, t440, t442, 0, t390 * t511 + t578, 0, 0, 0, 0, 0, 0, t362 * t515 + t363 * t511, t377 * t515 + t378 * t511, t328 * t515 + t330 * t511, t276 * t515 + t277 * t511, 0, 0, 0, 0, 0, 0, t284 * t515 + t285 * t511, t287 * t515 + t288 * t511, t278 * t515 + t279 * t511, t251 * t515 + t252 * t511; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t482, 0, -t481, 0, -t585, -t584, -t591, 0, t420, t398, t416, t419, t415, t451, -t458 * t512 - t511 * t474, -t459 * t512 - t474 * t515, t516 * t410, 0, t420, t398, t416, t419, t415, t451, t359 * t516 - t380 * t512, t358 * t516 - t385 * t512, -pkin(1) * t540 + t332 * t516, t316 * t516 + t512 * t586, t319 * t516 + t543, t294 * t516 - t424 * t512, t337 * t516 - t376 * t512, t318 * t516 - t543, t338 * t516 - t372 * t512, t350 * t516 + t505 * t512, t264 * t516 - t281 * t512, t268 * t516 - t286 * t512, t245 * t516 + t296 * t512, t244 * t516 + t259 * t512, t270 * t516 - t335 * t512, t261 * t516 - t297 * t512, t266 * t516 - t320 * t512, t269 * t516 - t333 * t512, t267 * t516 - t321 * t512, t289 * t516 - t351 * t512, t234 * t516 - t248 * t512, t235 * t516 - t250 * t512, t233 * t516 - t242 * t512, t231 * t516 - t237 * t512; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t481, 0, t482, 0, t584, -t585, t535, 0, t418, t397, t414, t417, t413, t449, t458 * t516 - t512 * t563, t459 * t516 - t512 * t559, t512 * t410, 0, t418, t397, t414, t417, t413, t449, t359 * t512 + t380 * t516, t358 * t512 + t385 * t516, pkin(1) * t539 + t332 * t512, t316 * t512 - t516 * t586, t319 * t512 - t542, t294 * t512 + t424 * t516, t337 * t512 + t376 * t516, t318 * t512 + t542, t338 * t512 + t372 * t516, t350 * t512 - t505 * t516, t264 * t512 + t281 * t516, t268 * t512 + t286 * t516, t245 * t512 - t296 * t516, t244 * t512 - t259 * t516, t270 * t512 + t335 * t516, t261 * t512 + t297 * t516, t266 * t512 + t320 * t516, t269 * t512 + t333 * t516, t267 * t512 + t321 * t516, t289 * t512 + t351 * t516, t234 * t512 + t248 * t516, t235 * t512 + t250 * t516, t233 * t512 + t242 * t516, t231 * t512 + t237 * t516; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t488, t489, 0, 0, t438, t426, t441, t437, t439, 0, t559, -t563, t411, 0, t438, t426, t441, t437, t439, 0, -qJ(3) * t573 + t379 * t515, t391 * t511 + t436 * t515, t369 * t515 + t386 * t511, -qJ(3) * t579 + t349 * t515, t367 * t515 + t368 * t511, t327 * t515 + t329 * t511, t381 * t515 + t383 * t511, t365 * t515 + t366 * t511, t382 * t515 + t384 * t511, t400 * t515 + t401 * t511, t272 * t515 + t301 * t511, t280 * t515 + t302 * t511, t254 * t515 + t262 * t511, t253 * t515 - t258 * t511, t306 * t515 + t308 * t511, t282 * t515 + t283 * t511, t290 * t515 + t292 * t511, t305 * t515 + t307 * t511, t291 * t515 + t293 * t511, t325 * t515 + t326 * t511, t240 * t515 + t246 * t511, t243 * t515 + t247 * t511, t238 * t515 + t241 * t511, t232 * t515 + t236 * t511;];
tauB_reg  = t1;
