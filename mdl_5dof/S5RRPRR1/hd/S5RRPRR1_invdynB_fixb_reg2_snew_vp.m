% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d4,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:26
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPRR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(4,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'S5RRPRR1_invdynB_fixb_reg2_snew_vp: pkin has to be [4x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:25:42
% EndTime: 2019-12-05 18:25:53
% DurationCPUTime: 6.01s
% Computational Cost: add. (16423->409), mult. (36147->642), div. (0->0), fcn. (23314->8), ass. (0->325)
t509 = sin(qJ(5));
t510 = sin(qJ(4));
t511 = sin(qJ(2));
t514 = cos(qJ(4));
t515 = cos(qJ(2));
t465 = (t510 * t515 + t511 * t514) * qJD(1);
t506 = qJD(2) + qJD(4);
t513 = cos(qJ(5));
t433 = t509 * t465 - t513 * t506;
t435 = t513 * t465 + t509 * t506;
t392 = t435 * t433;
t553 = qJD(1) * qJD(2);
t539 = t515 * t553;
t551 = t511 * qJDD(1);
t477 = t539 + t551;
t541 = t511 * t553;
t549 = t515 * qJDD(1);
t478 = -t541 + t549;
t536 = t510 * t477 - t514 * t478;
t395 = -t465 * qJD(4) - t536;
t525 = qJDD(5) - t395;
t593 = -t392 + t525;
t598 = t509 * t593;
t556 = qJD(1) * t511;
t463 = -t514 * t515 * qJD(1) + t510 * t556;
t425 = t465 * t463;
t505 = qJDD(2) + qJDD(4);
t592 = -t425 + t505;
t597 = t510 * t592;
t596 = t513 * t593;
t595 = t514 * t592;
t456 = t506 * t463;
t524 = t463 * qJD(4) - t514 * t477 - t510 * t478;
t594 = t456 + t524;
t357 = -t433 * qJD(5) + t509 * t505 - t513 * t524;
t461 = qJD(5) + t463;
t405 = t461 * t433;
t342 = -t405 + t357;
t422 = t425 + t505;
t512 = sin(qJ(1));
t516 = cos(qJ(1));
t488 = t512 * g(1) - t516 * g(2);
t474 = t516 * t488;
t489 = t516 * g(1) + t512 * g(2);
t590 = -t512 * t489 + t474;
t587 = t506 ^ 2;
t588 = t465 ^ 2;
t447 = -t587 - t588;
t537 = -t513 * t505 - t509 * t524;
t339 = (qJD(5) - t461) * t435 + t537;
t372 = (qJD(4) - t506) * t465 + t536;
t469 = t477 * qJ(3);
t589 = (qJ(3) * t553 - g(3)) * t515 - t469;
t508 = t515 ^ 2;
t518 = qJD(1) ^ 2;
t503 = t508 * t518;
t527 = qJD(2) * pkin(2) - pkin(3) * t556;
t485 = qJD(2) * pkin(1) - qJ(3) * t556;
t528 = -t485 * t556 - qJDD(3) + t488;
t582 = pkin(3) + qJ(3);
t586 = pkin(1) + pkin(2);
t364 = t586 * t478 + t582 * t503 - t527 * t556 + t528;
t431 = t433 ^ 2;
t432 = t435 ^ 2;
t457 = t461 ^ 2;
t462 = t463 ^ 2;
t558 = t515 * t518;
t531 = -pkin(1) * t558 - t489;
t552 = qJD(1) * qJD(3);
t547 = -0.2e1 * t552;
t581 = qJDD(2) * pkin(1);
t388 = t581 + (-t531 + t547) * t511 + t589;
t585 = pkin(1) * t388;
t584 = t512 * g(3);
t583 = t516 * g(3);
t580 = t461 * t509;
t579 = t461 * t513;
t578 = t506 * t510;
t577 = t506 * t514;
t507 = t511 ^ 2;
t576 = t507 * t518;
t459 = -t511 * g(3) - t515 * t489;
t546 = 0.2e1 * t552;
t529 = t478 * qJ(3) + t515 * t546 + t459;
t360 = t478 * pkin(3) - t586 * t503 + (-t485 - t527) * qJD(2) + t529;
t519 = -t477 * pkin(3) - t469 + (t489 + t547) * t511 + t586 * qJDD(2) + (t586 * t518 * t511 + t582 * t553 - g(3)) * t515;
t312 = t510 * t360 - t514 * t519;
t304 = t447 * pkin(4) + t312;
t575 = t509 * t304;
t347 = t392 + t525;
t574 = t509 * t347;
t573 = t510 * t364;
t572 = t510 * t422;
t571 = t511 * t388;
t495 = t511 * t558;
t486 = qJDD(2) + t495;
t570 = t511 * t486;
t487 = qJDD(2) - t495;
t569 = t511 * t487;
t568 = t511 * t489;
t567 = t512 * t488;
t565 = t513 * t304;
t564 = t513 * t347;
t563 = t514 * t364;
t562 = t514 * t422;
t561 = t515 * t388;
t472 = t515 * t486;
t560 = t515 * t487;
t559 = t515 * t488;
t313 = t514 * t360 + t510 * t519;
t557 = t507 + t508;
t550 = t512 * qJDD(1);
t548 = t516 * qJDD(1);
t545 = t510 * t392;
t544 = t512 * t425;
t543 = t514 * t392;
t542 = t516 * t425;
t540 = t511 * t550;
t538 = t511 * t548;
t277 = t510 * t312 + t514 * t313;
t458 = t515 * g(3) - t568;
t411 = t511 * t458 + t515 * t459;
t535 = -t516 * t489 - t567;
t517 = qJD(2) ^ 2;
t491 = -t517 - t576;
t534 = -t491 - t503;
t533 = t512 * t495;
t532 = t516 * t495;
t303 = t422 * pkin(4) + t313;
t520 = t594 * pkin(4) - t364;
t274 = t509 * t303 - t513 * t520;
t275 = t513 * t303 + t509 * t520;
t255 = -t513 * t274 + t509 * t275;
t256 = t509 * t274 + t513 * t275;
t276 = -t514 * t312 + t510 * t313;
t410 = t515 * t458 - t511 * t459;
t523 = -t478 * pkin(1) - t528;
t522 = -qJD(2) * t485 + t529;
t521 = t511 * t546 - t589;
t493 = -t503 - t517;
t492 = t503 - t517;
t490 = t517 - t576;
t484 = t503 - t576;
t483 = t503 + t576;
t482 = -t512 * t518 + t548;
t481 = t516 * t518 + t550;
t480 = t557 * qJDD(1);
t479 = -0.2e1 * t541 + t549;
t476 = 0.2e1 * t539 + t551;
t471 = t557 * t553;
t453 = t587 - t588;
t452 = t462 - t587;
t451 = t512 * qJDD(2) + t516 * t471;
t450 = t515 * t477 - t507 * t553;
t449 = -t516 * qJDD(2) + t512 * t471;
t448 = -t511 * t478 - t508 * t553;
t446 = -t511 * t491 - t560;
t445 = -t511 * t490 + t472;
t444 = t515 * t493 - t570;
t443 = t515 * t492 - t569;
t442 = t515 * t491 - t569;
t441 = t515 * t490 + t570;
t440 = t511 * t493 + t472;
t439 = t511 * t492 + t560;
t438 = (t477 + t539) * t511;
t437 = (t478 - t541) * t515;
t436 = -pkin(1) * t476 - qJ(3) * t487;
t430 = t516 * t480 - t512 * t483;
t429 = t512 * t480 + t516 * t483;
t427 = -t511 * t476 + t515 * t479;
t426 = t515 * t476 + t511 * t479;
t424 = t462 - t588;
t420 = t516 * t450 - t533;
t419 = t516 * t448 + t533;
t418 = t512 * t450 + t532;
t417 = t512 * t448 - t532;
t416 = t516 * t445 + t540;
t415 = t516 * t443 + t512 * t549;
t414 = t512 * t445 - t538;
t413 = t512 * t443 - t515 * t548;
t412 = -t587 - t462;
t409 = t516 * t446 + t512 * t476;
t408 = t516 * t444 - t512 * t479;
t407 = t512 * t446 - t516 * t476;
t406 = t512 * t444 + t516 * t479;
t404 = qJ(3) * t503 - t523;
t403 = -t432 + t457;
t402 = t431 - t457;
t401 = (-t463 * t514 + t465 * t510) * t506;
t400 = (-t463 * t510 - t465 * t514) * t506;
t399 = -t462 - t588;
t398 = t516 * t427 - t512 * t484;
t397 = t512 * t427 + t516 * t484;
t391 = t534 * qJ(3) + t523;
t390 = -pkin(1) * t503 + t522;
t389 = -t432 + t431;
t387 = -t432 - t457;
t386 = -t581 + (qJ(3) * qJDD(1) + t531) * t511 + t521;
t385 = t534 * pkin(1) + t522;
t384 = t514 * t452 - t572;
t383 = -t510 * t453 + t595;
t382 = t510 * t452 + t562;
t381 = t514 * t453 + t597;
t380 = -0.2e1 * pkin(1) * t486 + t521 - t568;
t379 = (t493 + t503) * qJ(3) + (t478 + t479) * pkin(1) + t528;
t378 = -t510 * t447 - t562;
t377 = t514 * t447 - t572;
t376 = -t456 + t524;
t371 = (qJD(4) + t506) * t465 + t536;
t370 = -t457 - t431;
t369 = qJ(3) * t549 + (t483 - t503) * pkin(1) + t522;
t368 = -t465 * t578 - t514 * t524;
t367 = t465 * t577 - t510 * t524;
t366 = -t510 * t395 + t463 * t577;
t365 = t514 * t395 + t463 * t578;
t363 = t514 * t412 - t597;
t362 = t510 * t412 + t595;
t361 = t431 + t432;
t359 = -qJ(3) * t472 - t511 * t379;
t358 = t515 * t391 - t511 * t436;
t356 = -t435 * qJD(5) - t537;
t352 = (-t433 * t513 + t435 * t509) * t461;
t351 = (t433 * t509 + t435 * t513) * t461;
t350 = -t511 * t400 + t515 * t401;
t349 = pkin(1) * t404 + qJ(3) * t390;
t345 = t515 * t390 - t571;
t343 = -t405 - t357;
t340 = (-qJD(5) - t461) * t435 - t537;
t338 = -t511 * t382 + t515 * t384;
t337 = -t511 * t381 + t515 * t383;
t336 = t513 * t357 - t435 * t580;
t335 = -t509 * t357 - t435 * t579;
t334 = -t509 * t356 + t433 * t579;
t333 = -t513 * t356 - t433 * t580;
t332 = -t511 * t369 + t515 * t386;
t331 = -t511 * t377 + t515 * t378;
t330 = -t372 * t514 - t510 * t376;
t329 = -t514 * t371 + t510 * t594;
t328 = -t372 * t510 + t514 * t376;
t327 = -t510 * t371 - t514 * t594;
t326 = t514 * t352 + t510 * t525;
t325 = t510 * t352 - t514 * t525;
t323 = t513 * t402 - t574;
t322 = -t509 * t403 + t596;
t321 = -t509 * t402 - t564;
t320 = -t513 * t403 - t598;
t319 = -t511 * t367 + t515 * t368;
t318 = -t511 * t365 + t515 * t366;
t317 = -t511 * t362 + t515 * t363;
t316 = -qJ(3) * t561 - t511 * t349;
t315 = -t509 * t387 - t564;
t314 = t513 * t387 - t574;
t311 = t513 * t370 - t598;
t310 = t509 * t370 + t596;
t308 = t514 * t336 + t545;
t307 = t514 * t334 - t545;
t306 = t510 * t336 - t543;
t305 = t510 * t334 + t543;
t302 = -t582 * t377 - t563;
t301 = -t582 * t362 - t573;
t300 = -t339 * t513 - t509 * t343;
t299 = t513 * t340 - t509 * t342;
t298 = -t339 * t509 + t513 * t343;
t297 = -t509 * t340 - t513 * t342;
t296 = t586 * t328;
t295 = -t511 * t328 + t515 * t330;
t294 = -t511 * t327 + t515 * t329;
t293 = t514 * t323 - t510 * t339;
t292 = t514 * t322 - t510 * t343;
t291 = t510 * t323 + t514 * t339;
t290 = t510 * t322 + t514 * t343;
t289 = -t511 * t325 + t515 * t326;
t288 = t514 * t315 + t342 * t510;
t287 = t510 * t315 - t342 * t514;
t286 = -t586 * t377 + t313;
t285 = t514 * t311 - t510 * t340;
t284 = t510 * t311 + t514 * t340;
t283 = t514 * t299 - t510 * t389;
t282 = t510 * t299 + t514 * t389;
t281 = -t586 * t362 + t312;
t280 = t582 * t378 + t586 * t594 - t573;
t279 = t514 * t300 - t510 * t361;
t278 = t510 * t300 + t514 * t361;
t273 = -pkin(4) * t314 + t565;
t272 = t582 * t363 - t586 * t371 + t563;
t271 = -pkin(4) * t310 + t575;
t270 = -t511 * t306 + t515 * t308;
t269 = -t511 * t305 + t515 * t307;
t268 = -t511 * t280 + t515 * t302;
t267 = -t511 * t291 + t515 * t293;
t266 = -t511 * t290 + t515 * t292;
t265 = -t511 * t287 + t515 * t288;
t264 = -t511 * t272 + t515 * t301;
t263 = -t511 * t284 + t515 * t285;
t262 = -t582 * t328 - t276;
t261 = -t511 * t282 + t515 * t283;
t260 = -t511 * t278 + t515 * t279;
t259 = t586 * t276;
t258 = t582 * t276;
t257 = -t511 * t276 + t515 * t277;
t254 = t582 * t330 - t586 * t399 + t277;
t253 = t582 * t277 + t586 * t364;
t252 = t514 * t256 + t510 * t304;
t251 = t510 * t256 - t514 * t304;
t250 = -pkin(4) * t315 - t586 * t287 - t575;
t249 = -pkin(4) * t298 - t255;
t248 = -pkin(4) * t311 - t586 * t284 + t565;
t247 = t514 * t273 - t510 * t275 - t582 * t287;
t246 = t514 * t271 - t510 * t274 - t582 * t284;
t245 = -t511 * t254 + t515 * t262;
t244 = -t511 * t253 - t515 * t258;
t243 = t510 * t273 + t514 * t275 + t582 * t288 - t586 * t314;
t242 = -pkin(4) * t300 - t586 * t278 - t256;
t241 = t514 * t249 - t582 * t278;
t240 = t510 * t271 + t514 * t274 + t582 * t285 - t586 * t310;
t239 = -t511 * t251 + t515 * t252;
t238 = t510 * t249 + t582 * t279 - t586 * t298;
t237 = -pkin(4) * t256 - t586 * t251;
t236 = -t514 * pkin(4) * t255 - t582 * t251;
t235 = -t511 * t243 + t515 * t247;
t234 = -t511 * t240 + t515 * t246;
t233 = -t511 * t238 + t515 * t241;
t232 = t582 * t252 + (-pkin(4) * t510 - t586) * t255;
t231 = -t511 * t232 + t515 * t236;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t481, -t482, 0, t535, 0, 0, 0, 0, 0, 0, t408, t409, t430, t516 * t411 - t567, 0, 0, 0, 0, 0, 0, t408, t409, t430, t516 * t345 - t512 * t404, 0, 0, 0, 0, 0, 0, t516 * t317 + t512 * t371, t516 * t331 - t512 * t594, t516 * t295 + t512 * t399, t516 * t257 - t512 * t364, 0, 0, 0, 0, 0, 0, t516 * t263 + t512 * t310, t516 * t265 + t512 * t314, t516 * t260 + t512 * t298, t516 * t239 + t512 * t255; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t482, -t481, 0, t590, 0, 0, 0, 0, 0, 0, t406, t407, t429, t512 * t411 + t474, 0, 0, 0, 0, 0, 0, t406, t407, t429, t512 * t345 + t516 * t404, 0, 0, 0, 0, 0, 0, t512 * t317 - t516 * t371, t512 * t331 + t516 * t594, t512 * t295 - t516 * t399, t512 * t257 + t516 * t364, 0, 0, 0, 0, 0, 0, t512 * t263 - t516 * t310, t512 * t265 - t516 * t314, t512 * t260 - t516 * t298, t512 * t239 - t516 * t255; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t440, t442, 0, -t410, 0, 0, 0, 0, 0, 0, t440, t442, 0, t511 * t390 + t561, 0, 0, 0, 0, 0, 0, t515 * t362 + t511 * t363, t515 * t377 + t511 * t378, t515 * t328 + t511 * t330, t515 * t276 + t511 * t277, 0, 0, 0, 0, 0, 0, t515 * t284 + t511 * t285, t515 * t287 + t511 * t288, t515 * t278 + t511 * t279, t515 * t251 + t511 * t252; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t482, 0, -t481, 0, -t584, -t583, -t590, 0, t420, t398, t416, t419, t415, t451, -t512 * t458 - t511 * t474, -t512 * t459 - t515 * t474, t516 * t410, 0, t420, t398, t416, t419, t415, t451, t516 * t359 - t512 * t380, t516 * t358 - t512 * t385, -pkin(1) * t540 + t516 * t332, t516 * t316 + t512 * t585, t516 * t319 + t544, t516 * t294 - t512 * t424, t516 * t337 - t512 * t376, t516 * t318 - t544, t516 * t338 - t512 * t372, t516 * t350 + t512 * t505, t516 * t264 - t512 * t281, t516 * t268 - t512 * t286, t516 * t245 + t512 * t296, t516 * t244 + t512 * t259, t516 * t270 - t512 * t335, t516 * t261 - t512 * t297, t516 * t266 - t512 * t320, t516 * t269 - t512 * t333, t516 * t267 - t512 * t321, t516 * t289 - t512 * t351, t516 * t234 - t512 * t248, t516 * t235 - t512 * t250, t516 * t233 - t512 * t242, t516 * t231 - t512 * t237; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t481, 0, t482, 0, t583, -t584, t535, 0, t418, t397, t414, t417, t413, t449, t516 * t458 - t511 * t567, t516 * t459 - t512 * t559, t512 * t410, 0, t418, t397, t414, t417, t413, t449, t512 * t359 + t516 * t380, t512 * t358 + t516 * t385, pkin(1) * t538 + t512 * t332, t512 * t316 - t516 * t585, t512 * t319 - t542, t512 * t294 + t516 * t424, t512 * t337 + t516 * t376, t512 * t318 + t542, t512 * t338 + t516 * t372, t512 * t350 - t516 * t505, t512 * t264 + t516 * t281, t512 * t268 + t516 * t286, t512 * t245 - t516 * t296, t512 * t244 - t516 * t259, t512 * t270 + t516 * t335, t512 * t261 + t516 * t297, t512 * t266 + t516 * t320, t512 * t269 + t516 * t333, t512 * t267 + t516 * t321, t512 * t289 + t516 * t351, t512 * t234 + t516 * t248, t512 * t235 + t516 * t250, t512 * t233 + t516 * t242, t512 * t231 + t516 * t237; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t488, t489, 0, 0, t438, t426, t441, t437, t439, 0, t559, -t511 * t488, t411, 0, t438, t426, t441, t437, t439, 0, -qJ(3) * t570 + t515 * t379, t511 * t391 + t515 * t436, t515 * t369 + t511 * t386, -qJ(3) * t571 + t515 * t349, t515 * t367 + t511 * t368, t515 * t327 + t511 * t329, t515 * t381 + t511 * t383, t515 * t365 + t511 * t366, t515 * t382 + t511 * t384, t515 * t400 + t511 * t401, t515 * t272 + t511 * t301, t515 * t280 + t511 * t302, t515 * t254 + t511 * t262, t515 * t253 - t511 * t258, t515 * t306 + t511 * t308, t515 * t282 + t511 * t283, t515 * t290 + t511 * t292, t515 * t305 + t511 * t307, t515 * t291 + t511 * t293, t515 * t325 + t511 * t326, t515 * t240 + t511 * t246, t515 * t243 + t511 * t247, t515 * t238 + t511 * t241, t515 * t232 + t511 * t236;];
tauB_reg = t1;
