% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d4,d5]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:26
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPRR1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(4,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR1_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR1_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR1_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'S5RRPRR1_invdynm_fixb_reg2_snew_vp: pkin has to be [4x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:25:53
% EndTime: 2019-12-05 18:26:01
% DurationCPUTime: 8.34s
% Computational Cost: add. (32476->466), mult. (71438->583), div. (0->0), fcn. (45788->8), ass. (0->350)
t905 = cos(qJ(2));
t901 = sin(qJ(2));
t908 = qJD(1) ^ 2;
t969 = t901 * t908;
t883 = t905 * t969;
t873 = qJDD(2) + t883;
t997 = pkin(1) * t873;
t899 = sin(qJ(5));
t900 = sin(qJ(4));
t904 = cos(qJ(4));
t857 = (t900 * t905 + t901 * t904) * qJD(1);
t903 = cos(qJ(5));
t953 = qJD(2) + qJD(4);
t830 = t899 * t857 - t903 * t953;
t832 = t903 * t857 + t899 * t953;
t796 = t832 * t830;
t957 = qJD(1) * qJD(2);
t889 = t905 * t957;
t891 = t901 * qJDD(1);
t867 = t891 + t889;
t888 = t901 * t957;
t892 = t905 * qJDD(1);
t868 = t892 - t888;
t933 = -t900 * t867 + t904 * t868;
t916 = t857 * qJD(4) - t933;
t797 = qJDD(5) + t916;
t992 = -t796 + t797;
t996 = t899 * t992;
t958 = qJD(1) * t901;
t855 = -t904 * t905 * qJD(1) + t900 * t958;
t825 = t857 * t855;
t895 = qJDD(2) + qJDD(4);
t991 = -t825 + t895;
t995 = t900 * t991;
t994 = t903 * t992;
t993 = t904 * t991;
t951 = t953 ^ 2;
t989 = t857 ^ 2;
t840 = -t951 - t989;
t897 = t905 ^ 2;
t893 = t897 * t908;
t902 = sin(qJ(1));
t906 = cos(qJ(1));
t876 = t906 * g(1) + t902 * g(2);
t851 = -t901 * g(3) - t905 * t876;
t928 = -t868 * qJ(3) - t851;
t956 = qJD(1) * qJD(3);
t950 = 0.2e1 * t956;
t919 = t905 * t950 - t928;
t981 = pkin(3) + qJ(3);
t988 = pkin(1) + pkin(2);
t759 = t868 * pkin(3) - t988 * t893 + (-t988 * qJD(2) + t981 * t958) * qJD(2) + t919;
t941 = -qJ(3) * t889 - t997;
t970 = t901 * t876;
t990 = -0.2e1 * t901 * t956 + t970;
t909 = qJDD(2) * pkin(2) - t981 * t867 + (pkin(2) * t969 + pkin(3) * t957 - g(3)) * t905 - t941 + t990;
t704 = t900 * t759 - t904 * t909;
t705 = t904 * t759 + t900 * t909;
t935 = t904 * t704 - t900 * t705;
t663 = t900 * t704 + t904 * t705;
t920 = t904 * t867 + t900 * t868;
t799 = -t855 * qJD(4) + t920;
t847 = t953 * t855;
t779 = t799 - t847;
t822 = t825 + t895;
t907 = qJD(2) ^ 2;
t880 = t893 - t907;
t875 = t902 * g(1) - t906 * g(2);
t917 = qJD(2) * pkin(1) - qJ(3) * t958;
t918 = -t917 * t958 - qJDD(3) + t875;
t767 = t988 * t868 + t981 * t893 - (qJD(2) * pkin(2) - pkin(3) * t958) * t958 + t918;
t828 = t830 ^ 2;
t829 = t832 ^ 2;
t853 = qJD(5) + t855;
t849 = t853 ^ 2;
t854 = t855 ^ 2;
t983 = t905 * g(3);
t911 = t867 * qJ(3) + t941 + t983;
t931 = -t876 + t950;
t792 = t901 * t931 + t911;
t987 = pkin(1) * t792;
t693 = pkin(4) * t822 + t705;
t910 = -pkin(4) * t779 - t767;
t659 = t899 * t693 - t903 * t910;
t660 = t903 * t693 + t899 * t910;
t631 = -t903 * t659 + t899 * t660;
t986 = pkin(4) * t631;
t632 = t899 * t659 + t903 * t660;
t985 = pkin(4) * t632;
t984 = t902 * g(3);
t982 = t906 * g(3);
t980 = qJ(3) * t792;
t979 = qJ(3) * t901;
t978 = t853 * t899;
t977 = t853 * t903;
t896 = t901 ^ 2;
t976 = t896 * t908;
t694 = t840 * pkin(4) + t704;
t975 = t899 * t694;
t743 = t796 + t797;
t974 = t899 * t743;
t762 = t900 * t767;
t972 = t900 * t822;
t971 = t901 * t873;
t863 = t901 * t875;
t968 = t902 * t875;
t967 = t903 * t694;
t966 = t903 * t743;
t965 = t904 * t767;
t964 = t904 * t822;
t963 = t905 * t873;
t864 = t905 * t875;
t962 = t906 * t875;
t934 = -t899 * t799 + t903 * t895;
t738 = (-qJD(5) + t853) * t832 + t934;
t921 = -t903 * t799 - t899 * t895;
t754 = -t830 * qJD(5) - t921;
t808 = t853 * t830;
t740 = t754 + t808;
t688 = t899 * t738 - t903 * t740;
t624 = -pkin(4) * t688 - t631;
t690 = t903 * t738 + t899 * t740;
t760 = t828 + t829;
t666 = t904 * t690 - t900 * t760;
t961 = pkin(3) * t666 + t900 * t624;
t812 = -t951 - t854;
t766 = t904 * t812 - t995;
t960 = pkin(3) * t766 + t965;
t782 = -t900 * t840 - t964;
t959 = pkin(3) * t782 - t762;
t955 = t902 * qJDD(1);
t954 = t906 * qJDD(1);
t952 = t904 * t986;
t949 = pkin(1) * t891;
t948 = t900 * t796;
t947 = t902 * t825;
t946 = t904 * t796;
t945 = t906 * t825;
t773 = -t849 - t828;
t702 = t899 * t773 + t994;
t652 = -pkin(4) * t702 + t975;
t703 = t903 * t773 - t996;
t809 = t853 * t832;
t915 = t832 * qJD(5) - t934;
t737 = -t809 - t915;
t673 = t904 * t703 - t900 * t737;
t944 = pkin(3) * t673 + t900 * t652 + t904 * t659;
t791 = -t829 - t849;
t706 = t903 * t791 - t974;
t656 = -pkin(4) * t706 + t967;
t707 = -t899 * t791 - t966;
t741 = (qJD(5) + t853) * t830 + t921;
t677 = t904 * t707 - t900 * t741;
t943 = pkin(3) * t677 + t900 * t656 + t904 * t660;
t777 = qJD(2) * t857 + t933;
t780 = t799 + t847;
t725 = t904 * t777 + t900 * t780;
t942 = pkin(3) * t725 + t663;
t940 = -pkin(4) * t900 - pkin(2);
t939 = t901 * t955;
t938 = t901 * t954;
t937 = t904 * t652 - t900 * t659;
t936 = t904 * t656 - t900 * t660;
t932 = t976 - t880;
t848 = t953 * t857;
t930 = t902 * t883;
t929 = t906 * t883;
t927 = t900 * t847;
t926 = t900 * t848;
t925 = t904 * t847;
t924 = t904 * t848;
t923 = pkin(4) * t703 - t967;
t922 = pkin(4) * t707 + t975;
t913 = pkin(4) * t690 + t632;
t912 = -t868 * pkin(1) - t918;
t878 = t907 - t976;
t874 = qJDD(2) - t883;
t872 = -t893 + t976;
t871 = -t902 * t908 + t954;
t870 = t906 * t908 + t955;
t869 = t892 - 0.2e1 * t888;
t866 = t891 + 0.2e1 * t889;
t862 = (t896 + t897) * t957;
t850 = -t970 + t983;
t846 = t951 - t989;
t845 = t854 - t951;
t844 = t902 * qJDD(2) + t906 * t862;
t843 = t905 * t867 - t896 * t957;
t842 = -t906 * qJDD(2) + t902 * t862;
t841 = -t901 * t868 - t897 * t957;
t839 = -t901 * t878 + t963;
t838 = -t901 * t874 + t905 * t880;
t837 = t905 * t878 + t971;
t836 = t905 * t874 + t901 * t880;
t835 = (t867 + t889) * t901;
t834 = (t868 - t888) * t905;
t833 = -pkin(1) * t866 - qJ(3) * t874;
t827 = -t901 * t866 + t905 * t869;
t826 = t905 * t866 + t901 * t869;
t824 = -t854 + t989;
t820 = t906 * t843 - t930;
t819 = t906 * t841 + t930;
t818 = t902 * t843 + t929;
t817 = t902 * t841 - t929;
t816 = t906 * t839 + t939;
t815 = t906 * t838 + t892 * t902;
t814 = t902 * t839 - t938;
t813 = t902 * t838 - t905 * t954;
t811 = t905 * t850 - t901 * t851;
t810 = t901 * t850 + t905 * t851;
t807 = qJ(3) * t893 - t912;
t806 = -t829 + t849;
t805 = t828 - t849;
t804 = -t925 + t926;
t803 = -t927 - t924;
t802 = -t854 - t989;
t801 = t906 * t827 + t902 * t872;
t800 = t902 * t827 - t906 * t872;
t795 = qJ(3) * t932 + t912;
t794 = -pkin(1) * t893 - qJD(2) * t917 + t919;
t793 = t829 - t828;
t790 = (qJ(3) * qJDD(1) + t931) * t901 + t911;
t789 = (-qJD(2) * t979 - 0.2e1 * qJD(3) * t905) * qJD(1) + (-t932 + t907) * pkin(1) + t928;
t788 = t904 * t845 - t972;
t787 = -t900 * t846 + t993;
t786 = t900 * t845 + t964;
t785 = t904 * t846 + t995;
t784 = -t911 + t990 + t997;
t783 = -t907 * qJ(3) + (t868 + t869) * pkin(1) + t918;
t781 = t904 * t840 - t972;
t778 = (-0.2e1 * qJD(4) - qJD(2)) * t855 + t920;
t776 = -t848 + t916;
t775 = t848 + t916;
t772 = (t888 + t892) * qJ(3) + ((t896 - t897) * t908 + t880) * pkin(1) + t919;
t771 = t904 * t799 - t926;
t770 = t900 * t799 + t924;
t769 = t900 * t916 + t925;
t768 = -t904 * t916 + t927;
t765 = t900 * t812 + t993;
t758 = -qJ(3) * t963 - t901 * t783;
t757 = -qJ(3) * t971 + t905 * t783;
t756 = t905 * t795 - t901 * t833;
t755 = t901 * t795 + t905 * t833;
t749 = (-t830 * t903 + t832 * t899) * t853;
t748 = (-t830 * t899 - t832 * t903) * t853;
t747 = -t901 * t803 + t905 * t804;
t746 = t905 * t803 + t901 * t804;
t745 = pkin(1) * t807 + qJ(3) * t794;
t739 = t754 - t808;
t736 = -t809 + t915;
t735 = -t901 * t786 + t905 * t788;
t734 = -t901 * t785 + t905 * t787;
t733 = t905 * t786 + t901 * t788;
t732 = t905 * t785 + t901 * t787;
t731 = t903 * t754 - t832 * t978;
t730 = t899 * t754 + t832 * t977;
t729 = t830 * t977 + t899 * t915;
t728 = -t830 * t978 + t903 * t915;
t727 = -t901 * t772 + t905 * t790;
t726 = t905 * t772 + t901 * t790;
t724 = -t904 * t775 - t900 * t779;
t723 = t900 * t777 - t904 * t780;
t722 = -t900 * t775 + t904 * t779;
t720 = t904 * t749 + t900 * t797;
t719 = t900 * t749 - t904 * t797;
t717 = t903 * t805 - t974;
t716 = -t899 * t806 + t994;
t715 = t899 * t805 + t966;
t714 = t903 * t806 + t996;
t713 = -t901 * t770 + t905 * t771;
t712 = -t901 * t768 + t905 * t769;
t711 = t905 * t770 + t901 * t771;
t710 = t905 * t768 + t901 * t769;
t709 = -t901 * t745 + t905 * t980;
t708 = t905 * t745 + t792 * t979;
t698 = t904 * t731 + t948;
t697 = t904 * t729 - t948;
t696 = t900 * t731 - t946;
t695 = t900 * t729 + t946;
t692 = -t981 * t781 - t965;
t691 = -t981 * t765 - t762;
t689 = t903 * t737 - t899 * t739;
t687 = t899 * t737 + t903 * t739;
t686 = t988 * t723;
t685 = -t901 * t722 + t905 * t724;
t684 = t905 * t722 + t901 * t724;
t683 = t904 * t717 - t900 * t736;
t682 = t904 * t716 + t900 * t740;
t681 = t900 * t717 + t904 * t736;
t680 = t900 * t716 - t904 * t740;
t679 = -t901 * t719 + t905 * t720;
t678 = t905 * t719 + t901 * t720;
t676 = t900 * t707 + t904 * t741;
t674 = t988 * t781 - t705;
t672 = t900 * t703 + t904 * t737;
t670 = t904 * t689 + t900 * t793;
t669 = t900 * t689 - t904 * t793;
t668 = t988 * t765 - t704;
t667 = qJ(3) * t782 - t988 * t778 + t959;
t665 = t900 * t690 + t904 * t760;
t661 = pkin(3) * t663;
t655 = qJ(3) * t766 - t988 * t775 + t960;
t649 = -t901 * t696 + t905 * t698;
t648 = -t901 * t695 + t905 * t697;
t647 = t905 * t696 + t901 * t698;
t646 = t905 * t695 + t901 * t697;
t645 = -t901 * t667 + t905 * t692;
t644 = t905 * t667 + t901 * t692;
t643 = -t901 * t681 + t905 * t683;
t642 = -t901 * t680 + t905 * t682;
t641 = t905 * t681 + t901 * t683;
t640 = t905 * t680 + t901 * t682;
t639 = -t901 * t655 + t905 * t691;
t638 = t905 * t655 + t901 * t691;
t637 = -t981 * t723 + t935;
t636 = -t901 * t669 + t905 * t670;
t635 = t905 * t669 + t901 * t670;
t634 = t988 * t935;
t633 = t981 * t935;
t630 = qJ(3) * t725 - t988 * t802 + t942;
t629 = qJ(3) * t663 + t988 * t767 + t661;
t628 = t904 * t632 + t900 * t694;
t627 = t900 * t632 - t904 * t694;
t626 = pkin(3) * t628;
t625 = t988 * t676 + t922;
t623 = t904 * t624;
t621 = t988 * t672 + t923;
t620 = -t981 * t676 + t936;
t619 = -t981 * t672 + t937;
t618 = -t901 * t630 + t905 * t637;
t617 = t905 * t630 + t901 * t637;
t616 = -t901 * t629 + t905 * t633;
t615 = t905 * t629 + t901 * t633;
t614 = qJ(3) * t677 - t988 * t706 + t943;
t613 = t988 * t665 + t913;
t612 = -t981 * t665 + t623;
t611 = qJ(3) * t673 - t988 * t702 + t944;
t610 = qJ(3) * t666 - t988 * t688 + t961;
t609 = t988 * t627 + t985;
t608 = -t981 * t627 - t952;
t607 = -t901 * t614 + t905 * t620;
t606 = t905 * t614 + t901 * t620;
t605 = -t901 * t611 + t905 * t619;
t604 = t905 * t611 + t901 * t619;
t603 = -t901 * t610 + t905 * t612;
t602 = t905 * t610 + t901 * t612;
t601 = qJ(3) * t628 + t626 + (-pkin(1) + t940) * t631;
t600 = -t901 * t601 + t905 * t608;
t599 = t905 * t601 + t901 * t608;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t871, 0, -t870, 0, -t984, -t982, t902 * t876 - t962, 0, t820, t801, t816, t819, t815, t844, -t902 * t850 - t901 * t962, -t902 * t851 - t905 * t962, t906 * t811, 0, t820, t801, t816, t819, t815, t844, t906 * t758 + t902 * t784, t906 * t756 + t902 * t789, -pkin(1) * t939 + t906 * t727, t906 * t709 - t902 * t987, t906 * t713 + t947, t906 * t685 + t902 * t824, t906 * t734 + t902 * t780, t906 * t712 - t947, t906 * t735 - t902 * t776, t906 * t747 + t902 * t895, t906 * t639 + t902 * t668, t906 * t645 + t902 * t674, t906 * t618 + t902 * t686, t906 * t616 - t902 * t634, t906 * t649 + t902 * t730, t906 * t636 + t902 * t687, t906 * t642 + t902 * t714, t906 * t648 - t902 * t728, t906 * t643 + t902 * t715, t906 * t679 + t902 * t748, t906 * t605 + t902 * t621, t906 * t607 + t902 * t625, t906 * t603 + t902 * t613, t906 * t600 + t902 * t609; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t870, 0, t871, 0, t982, -t984, -t906 * t876 - t968, 0, t818, t800, t814, t817, t813, t842, t906 * t850 - t901 * t968, t906 * t851 - t902 * t864, t902 * t811, 0, t818, t800, t814, t817, t813, t842, t902 * t758 - t906 * t784, t902 * t756 - t906 * t789, pkin(1) * t938 + t902 * t727, t902 * t709 + t906 * t987, t902 * t713 - t945, t902 * t685 - t906 * t824, t902 * t734 - t906 * t780, t902 * t712 + t945, t902 * t735 + t906 * t776, t902 * t747 - t906 * t895, t902 * t639 - t906 * t668, t902 * t645 - t906 * t674, t902 * t618 - t906 * t686, t902 * t616 + t906 * t634, t902 * t649 - t906 * t730, t902 * t636 - t906 * t687, t902 * t642 - t906 * t714, t902 * t648 + t906 * t728, t902 * t643 - t906 * t715, t902 * t679 - t906 * t748, t902 * t605 - t906 * t621, t902 * t607 - t906 * t625, t902 * t603 - t906 * t613, t902 * t600 - t906 * t609; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t875, t876, 0, 0, t835, t826, t837, t834, t836, 0, t864, -t863, t810, 0, t835, t826, t837, t834, t836, 0, t757, t755, t726, t708, t711, t684, t732, t710, t733, t746, t638, t644, t617, t615, t647, t635, t640, t646, t641, t678, t604, t606, t602, t599; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t908, 0, 0, -g(3), -t875, 0, t843, t827, t839, t841, t838, t862, -t863, -t864, t811, 0, t843, t827, t839, t841, t838, t862, t758, t756, t727, t709, t713, t685, t734, t712, t735, t747, t639, t645, t618, t616, t649, t636, t642, t648, t643, t679, t605, t607, t603, t600; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t908, 0, qJDD(1), 0, g(3), 0, -t876, 0, t883, -t872, -t891, -t883, -t892, -qJDD(2), t850, t851, 0, 0, t883, -t872, -t891, -t883, -t892, -qJDD(2), -t784, -t789, t949, t987, -t825, -t824, -t780, t825, t776, -t895, -t668, -t674, -t686, t634, -t730, -t687, -t714, t728, -t715, -t748, -t621, -t625, -t613, -t609; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t875, t876, 0, 0, t835, t826, t837, t834, t836, 0, t864, -t863, t810, 0, t835, t826, t837, t834, t836, 0, t757, t755, t726, t708, t711, t684, t732, t710, t733, t746, t638, t644, t617, t615, t647, t635, t640, t646, t641, t678, t604, t606, t602, t599; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t867, t869, t873, -t889, t880, t889, 0, -t875, t850, 0, t867, t869, t873, -t889, t880, t889, -qJ(3) * t873, t795, t790, t980, t771, t724, t787, t769, t788, t804, t691, t692, t637, t633, t698, t670, t682, t697, t683, t720, t619, t620, t612, t608; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t888, t866, t878, t868, t874, -t888, t875, 0, t851, 0, t888, t866, t878, t868, t874, -t888, t783, t833, t772, t745, t770, t722, t785, t768, t786, t803, t655, t667, t630, t629, t696, t669, t680, t695, t681, t719, t611, t614, t610, t601; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t883, t872, t891, t883, t892, qJDD(2), -t850, -t851, 0, 0, -t883, t872, t891, t883, t892, qJDD(2), t784, t789, -t949, -t987, t825, t824, t780, -t825, -t776, t895, t668, t674, t686, -t634, t730, t687, t714, -t728, t715, t748, t621, t625, t613, t609; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t867, t869, t873, -t889, t880, t889, 0, -t807, t792, 0, t771, t724, t787, t769, t788, t804, -pkin(3) * t765 - t762, -pkin(3) * t781 - t965, -pkin(3) * t723 + t935, pkin(3) * t935, t698, t670, t682, t697, t683, t720, -pkin(3) * t672 + t937, -pkin(3) * t676 + t936, -pkin(3) * t665 + t623, -pkin(3) * t627 - t952; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t888, t866, t878, t868, t874, -t888, t807, 0, t794, 0, t770, t722, t785, t768, t786, t803, -pkin(2) * t775 + t960, -pkin(2) * t778 + t959, -pkin(2) * t802 + t942, pkin(2) * t767 + t661, t696, t669, t680, t695, t681, t719, -pkin(2) * t702 + t944, -pkin(2) * t706 + t943, -pkin(2) * t688 + t961, t631 * t940 + t626; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t883, t872, t891, t883, t892, qJDD(2), -t792, -t794, 0, 0, t825, t824, t780, -t825, -t776, t895, pkin(2) * t765 - t704, pkin(2) * t781 - t705, pkin(2) * t723, -pkin(2) * t935, t730, t687, t714, -t728, t715, t748, pkin(2) * t672 + t923, pkin(2) * t676 + t922, pkin(2) * t665 + t913, pkin(2) * t627 + t985; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t799, -t775, t991, t847, t845, -t847, 0, -t767, t704, 0, t731, t689, t716, t729, t717, t749, t652, t656, t624, -t986; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t848, t779, t846, -t916, t822, -t848, t767, 0, t705, 0, -t796, -t793, -t740, t796, t736, -t797, t659, t660, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t825, t824, t780, -t825, -t776, t895, -t704, -t705, 0, 0, t730, t687, t714, -t728, t715, t748, t923, t922, t913, t985; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t754, t737, t992, t808, t805, -t808, 0, t694, t659, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t809, t739, t806, -t915, t743, -t809, -t694, 0, t660, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t796, t793, t740, -t796, -t736, t797, -t659, -t660, 0, 0;];
m_new_reg = t1;
