% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d4,d5]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:26
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPRR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(4,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'S5RRPRR1_invdynf_fixb_reg2_snew_vp: pkin has to be [4x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:26:01
% EndTime: 2019-12-05 18:26:03
% DurationCPUTime: 2.34s
% Computational Cost: add. (7333->204), mult. (16171->260), div. (0->0), fcn. (10538->8), ass. (0->158)
t1133 = sin(qJ(4));
t1137 = cos(qJ(4));
t1138 = cos(qJ(2));
t1166 = qJD(1) * t1138;
t1134 = sin(qJ(2));
t1167 = qJD(1) * t1134;
t1095 = t1133 * t1167 - t1137 * t1166;
t1094 = qJD(5) + t1095;
t1178 = qJD(5) + t1094;
t1128 = qJDD(2) + qJDD(4);
t1097 = (t1133 * t1138 + t1134 * t1137) * qJD(1);
t1164 = t1097 * t1095;
t1177 = t1128 + t1164;
t1129 = qJD(2) + qJD(4);
t1171 = t1129 ^ 2;
t1172 = t1097 ^ 2;
t1089 = -t1171 - t1172;
t1126 = t1138 * qJDD(1);
t1155 = qJD(2) * t1167;
t1106 = t1126 - t1155;
t1135 = sin(qJ(1));
t1139 = cos(qJ(1));
t1114 = t1135 * g(1) - t1139 * g(2);
t1145 = qJD(2) * pkin(1) - qJ(3) * t1167;
t1146 = -t1145 * t1167 - qJDD(3) + t1114;
t1131 = t1138 ^ 2;
t1141 = qJD(1) ^ 2;
t1163 = t1131 * t1141;
t1169 = pkin(3) + qJ(3);
t1170 = pkin(1) + pkin(2);
t1056 = t1170 * t1106 + t1169 * t1163 - (qJD(2) * pkin(2) - pkin(3) * t1167) * t1167 + t1146;
t1132 = sin(qJ(5));
t1136 = cos(qJ(5));
t1082 = t1132 * t1097 - t1136 * t1129;
t1176 = t1082 ^ 2;
t1084 = t1136 * t1097 + t1132 * t1129;
t1175 = t1084 ^ 2;
t1174 = t1094 ^ 2;
t1173 = t1095 ^ 2;
t1168 = t1138 * g(3);
t1165 = t1084 * t1082;
t1162 = t1135 * t1114;
t1161 = t1138 * t1141;
t1160 = qJD(4) - t1129;
t1159 = qJD(5) - t1094;
t1115 = -t1139 * g(1) - t1135 * g(2);
t1092 = -t1134 * g(3) + t1138 * t1115;
t1147 = t1106 * qJ(3) + 0.2e1 * qJD(3) * t1166 + t1092;
t1156 = qJD(1) * t1169;
t1052 = t1106 * pkin(3) - t1170 * t1163 + (-t1170 * qJD(2) + t1134 * t1156) * qJD(2) + t1147;
t1154 = qJD(2) * t1166;
t1157 = t1134 * qJDD(1);
t1105 = t1154 + t1157;
t1153 = -0.2e1 * qJD(1) * qJD(3) - t1115;
t1142 = t1153 * t1134 - t1169 * t1105 + t1170 * qJDD(2) + (t1170 * t1141 * t1134 + qJD(2) * t1156 - g(3)) * t1138;
t1031 = t1137 * t1052 + t1133 * t1142;
t1130 = t1134 ^ 2;
t1158 = t1130 + t1131;
t1030 = -t1133 * t1052 + t1137 * t1142;
t1148 = -t1137 * t1105 - t1133 * t1106;
t1067 = -t1095 * qJD(4) - t1148;
t1152 = t1129 * t1095 - t1067;
t1151 = -t1132 * t1067 + t1136 * t1128;
t1150 = t1133 * t1105 - t1137 * t1106;
t1149 = -t1136 * t1067 - t1132 * t1128;
t1143 = -t1097 * qJD(4) - qJDD(5) - t1150;
t1140 = qJD(2) ^ 2;
t1119 = t1134 * t1161;
t1117 = -t1140 - t1163;
t1116 = -t1130 * t1141 - t1140;
t1113 = -qJDD(2) + t1119;
t1112 = qJDD(2) + t1119;
t1111 = t1158 * t1141;
t1110 = -t1135 * qJDD(1) - t1139 * t1141;
t1109 = t1139 * qJDD(1) - t1135 * t1141;
t1108 = t1158 * qJDD(1);
t1107 = t1126 - 0.2e1 * t1155;
t1104 = 0.2e1 * t1154 + t1157;
t1103 = t1139 * t1114;
t1091 = -t1134 * t1115 - t1168;
t1088 = t1138 * t1113 - t1134 * t1116;
t1087 = -t1134 * t1112 + t1138 * t1117;
t1086 = t1134 * t1113 + t1138 * t1116;
t1085 = t1138 * t1112 + t1134 * t1117;
t1081 = t1139 * t1108 - t1135 * t1111;
t1080 = t1135 * t1108 + t1139 * t1111;
t1078 = t1128 - t1164;
t1077 = -t1171 - t1173;
t1076 = -t1134 * t1091 + t1138 * t1092;
t1075 = t1138 * t1091 + t1134 * t1092;
t1074 = t1139 * t1088 + t1135 * t1104;
t1073 = t1139 * t1087 - t1135 * t1107;
t1072 = t1135 * t1088 - t1139 * t1104;
t1071 = t1135 * t1087 + t1139 * t1107;
t1069 = t1106 * pkin(1) + qJ(3) * t1163 + t1146;
t1068 = -t1172 - t1173;
t1066 = -pkin(1) * t1163 - qJD(2) * t1145 + t1147;
t1065 = qJDD(2) * pkin(1) - t1168 + (-t1105 + t1154) * qJ(3) + (pkin(1) * t1161 + t1153) * t1134;
t1064 = -t1174 - t1175;
t1063 = -t1133 * t1089 - t1137 * t1177;
t1062 = t1137 * t1089 - t1133 * t1177;
t1061 = t1160 * t1095 + t1148;
t1059 = -t1160 * t1097 - t1150;
t1058 = (qJD(4) + t1129) * t1097 + t1150;
t1057 = -t1174 - t1176;
t1055 = t1137 * t1077 - t1133 * t1078;
t1054 = t1133 * t1077 + t1137 * t1078;
t1053 = -t1175 - t1176;
t1048 = t1143 - t1165;
t1047 = -t1143 - t1165;
t1046 = -t1134 * t1065 + t1138 * t1066;
t1045 = t1138 * t1065 + t1134 * t1066;
t1044 = t1159 * t1082 + t1149;
t1043 = -t1178 * t1082 - t1149;
t1042 = -t1159 * t1084 + t1151;
t1041 = t1178 * t1084 - t1151;
t1040 = -t1134 * t1062 + t1138 * t1063;
t1039 = t1138 * t1062 + t1134 * t1063;
t1038 = t1137 * t1059 - t1133 * t1061;
t1037 = t1133 * t1059 + t1137 * t1061;
t1036 = t1152 * pkin(4) - t1056;
t1035 = -t1134 * t1054 + t1138 * t1055;
t1034 = t1138 * t1054 + t1134 * t1055;
t1033 = t1136 * t1048 - t1132 * t1064;
t1032 = t1132 * t1048 + t1136 * t1064;
t1029 = -t1132 * t1047 + t1136 * t1057;
t1028 = t1136 * t1047 + t1132 * t1057;
t1027 = t1089 * pkin(4) - t1030;
t1026 = t1177 * pkin(4) + t1031;
t1025 = t1136 * t1042 - t1132 * t1044;
t1024 = t1132 * t1042 + t1136 * t1044;
t1023 = -t1134 * t1037 + t1138 * t1038;
t1022 = t1138 * t1037 + t1134 * t1038;
t1021 = t1137 * t1033 + t1133 * t1043;
t1020 = t1133 * t1033 - t1137 * t1043;
t1019 = t1137 * t1029 + t1133 * t1041;
t1018 = t1133 * t1029 - t1137 * t1041;
t1017 = t1137 * t1025 + t1133 * t1053;
t1016 = t1133 * t1025 - t1137 * t1053;
t1015 = -t1133 * t1030 + t1137 * t1031;
t1014 = t1137 * t1030 + t1133 * t1031;
t1013 = t1136 * t1026 + t1132 * t1036;
t1012 = -t1132 * t1026 + t1136 * t1036;
t1011 = -t1134 * t1020 + t1138 * t1021;
t1010 = t1138 * t1020 + t1134 * t1021;
t1009 = -t1134 * t1018 + t1138 * t1019;
t1008 = t1138 * t1018 + t1134 * t1019;
t1007 = -t1134 * t1016 + t1138 * t1017;
t1006 = t1138 * t1016 + t1134 * t1017;
t1005 = -t1134 * t1014 + t1138 * t1015;
t1004 = t1138 * t1014 + t1134 * t1015;
t1003 = -t1132 * t1012 + t1136 * t1013;
t1002 = t1136 * t1012 + t1132 * t1013;
t1001 = t1137 * t1003 + t1133 * t1027;
t1000 = t1133 * t1003 - t1137 * t1027;
t999 = -t1134 * t1000 + t1138 * t1001;
t998 = t1138 * t1000 + t1134 * t1001;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1110, -t1109, 0, t1139 * t1115 - t1162, 0, 0, 0, 0, 0, 0, t1073, t1074, t1081, t1139 * t1076 - t1162, 0, 0, 0, 0, 0, 0, t1073, t1074, t1081, t1139 * t1046 - t1135 * t1069, 0, 0, 0, 0, 0, 0, t1139 * t1035 + t1135 * t1058, t1139 * t1040 - t1135 * t1152, t1139 * t1023 + t1135 * t1068, t1139 * t1005 - t1135 * t1056, 0, 0, 0, 0, 0, 0, t1139 * t1009 + t1135 * t1028, t1139 * t1011 + t1135 * t1032, t1139 * t1007 + t1135 * t1024, t1135 * t1002 + t1139 * t999; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1109, t1110, 0, t1135 * t1115 + t1103, 0, 0, 0, 0, 0, 0, t1071, t1072, t1080, t1135 * t1076 + t1103, 0, 0, 0, 0, 0, 0, t1071, t1072, t1080, t1135 * t1046 + t1139 * t1069, 0, 0, 0, 0, 0, 0, t1135 * t1035 - t1139 * t1058, t1135 * t1040 + t1139 * t1152, t1135 * t1023 - t1139 * t1068, t1135 * t1005 + t1139 * t1056, 0, 0, 0, 0, 0, 0, t1135 * t1009 - t1139 * t1028, t1135 * t1011 - t1139 * t1032, t1135 * t1007 - t1139 * t1024, -t1139 * t1002 + t1135 * t999; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1085, t1086, 0, t1075, 0, 0, 0, 0, 0, 0, t1085, t1086, 0, t1045, 0, 0, 0, 0, 0, 0, t1034, t1039, t1022, t1004, 0, 0, 0, 0, 0, 0, t1008, t1010, t1006, t998; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1141, -qJDD(1), 0, t1115, 0, 0, 0, 0, 0, 0, t1087, t1088, t1108, t1076, 0, 0, 0, 0, 0, 0, t1087, t1088, t1108, t1046, 0, 0, 0, 0, 0, 0, t1035, t1040, t1023, t1005, 0, 0, 0, 0, 0, 0, t1009, t1011, t1007, t999; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1141, 0, t1114, 0, 0, 0, 0, 0, 0, t1107, -t1104, t1111, t1114, 0, 0, 0, 0, 0, 0, t1107, -t1104, t1111, t1069, 0, 0, 0, 0, 0, 0, -t1058, t1152, -t1068, t1056, 0, 0, 0, 0, 0, 0, -t1028, -t1032, -t1024, -t1002; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1085, t1086, 0, t1075, 0, 0, 0, 0, 0, 0, t1085, t1086, 0, t1045, 0, 0, 0, 0, 0, 0, t1034, t1039, t1022, t1004, 0, 0, 0, 0, 0, 0, t1008, t1010, t1006, t998; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1117, t1113, t1126, t1092, 0, 0, 0, 0, 0, 0, t1117, t1113, t1126, t1066, 0, 0, 0, 0, 0, 0, t1055, t1063, t1038, t1015, 0, 0, 0, 0, 0, 0, t1019, t1021, t1017, t1001; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1112, t1116, -t1157, t1091, 0, 0, 0, 0, 0, 0, t1112, t1116, -t1157, t1065, 0, 0, 0, 0, 0, 0, t1054, t1062, t1037, t1014, 0, 0, 0, 0, 0, 0, t1018, t1020, t1016, t1000; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1107, t1104, -t1111, -t1114, 0, 0, 0, 0, 0, 0, -t1107, t1104, -t1111, -t1069, 0, 0, 0, 0, 0, 0, t1058, -t1152, t1068, -t1056, 0, 0, 0, 0, 0, 0, t1028, t1032, t1024, t1002; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1117, t1113, t1126, t1066, 0, 0, 0, 0, 0, 0, t1055, t1063, t1038, t1015, 0, 0, 0, 0, 0, 0, t1019, t1021, t1017, t1001; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1112, t1116, -t1157, t1065, 0, 0, 0, 0, 0, 0, t1054, t1062, t1037, t1014, 0, 0, 0, 0, 0, 0, t1018, t1020, t1016, t1000; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1107, t1104, -t1111, -t1069, 0, 0, 0, 0, 0, 0, t1058, -t1152, t1068, -t1056, 0, 0, 0, 0, 0, 0, t1028, t1032, t1024, t1002; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1077, -t1177, t1059, t1031, 0, 0, 0, 0, 0, 0, t1029, t1033, t1025, t1003; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1078, t1089, t1061, t1030, 0, 0, 0, 0, 0, 0, -t1041, -t1043, -t1053, -t1027; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1058, -t1152, t1068, -t1056, 0, 0, 0, 0, 0, 0, t1028, t1032, t1024, t1002; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1057, t1048, t1042, t1013; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1047, t1064, t1044, t1012; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1041, t1043, t1053, t1027;];
f_new_reg = t1;
