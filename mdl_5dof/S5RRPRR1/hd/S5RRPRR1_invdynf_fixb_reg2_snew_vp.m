% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d4,d5]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-07-18 17:22
% Revision: 08c8d617a845f5dd194efdf9aca2774760f7818f (2019-07-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPRR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(4,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'S5RRPRR1_invdynf_fixb_reg2_snew_vp: pkin has to be [4x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-07-18 17:22:49
% EndTime: 2019-07-18 17:22:51
% DurationCPUTime: 2.32s
% Computational Cost: add. (7333->204), mult. (16171->260), div. (0->0), fcn. (10538->8), ass. (0->158)
t1130 = sin(qJ(4));
t1134 = cos(qJ(4));
t1135 = cos(qJ(2));
t1163 = qJD(1) * t1135;
t1131 = sin(qJ(2));
t1164 = qJD(1) * t1131;
t1092 = t1130 * t1164 - t1134 * t1163;
t1091 = qJD(5) + t1092;
t1175 = qJD(5) + t1091;
t1125 = qJDD(2) + qJDD(4);
t1094 = (t1130 * t1135 + t1131 * t1134) * qJD(1);
t1161 = t1092 * t1094;
t1174 = t1125 + t1161;
t1126 = qJD(2) + qJD(4);
t1168 = t1126 ^ 2;
t1169 = t1094 ^ 2;
t1086 = -t1168 - t1169;
t1123 = t1135 * qJDD(1);
t1152 = qJD(2) * t1164;
t1103 = t1123 - t1152;
t1132 = sin(qJ(1));
t1136 = cos(qJ(1));
t1111 = t1132 * g(1) - t1136 * g(2);
t1142 = qJD(2) * pkin(1) - qJ(3) * t1164;
t1143 = -t1142 * t1164 - qJDD(3) + t1111;
t1128 = t1135 ^ 2;
t1138 = qJD(1) ^ 2;
t1159 = t1128 * t1138;
t1166 = pkin(3) + qJ(3);
t1167 = pkin(1) + pkin(2);
t1053 = t1103 * t1167 + t1159 * t1166 - (qJD(2) * pkin(2) - pkin(3) * t1164) * t1164 + t1143;
t1129 = sin(qJ(5));
t1133 = cos(qJ(5));
t1079 = t1094 * t1129 - t1133 * t1126;
t1173 = t1079 ^ 2;
t1081 = t1094 * t1133 + t1126 * t1129;
t1172 = t1081 ^ 2;
t1171 = t1091 ^ 2;
t1170 = t1092 ^ 2;
t1165 = t1135 * g(3);
t1162 = t1079 * t1081;
t1160 = t1111 * t1132;
t1158 = t1135 * t1138;
t1157 = qJD(4) - t1126;
t1156 = qJD(5) - t1091;
t1112 = -g(1) * t1136 - g(2) * t1132;
t1089 = -t1131 * g(3) + t1135 * t1112;
t1144 = t1103 * qJ(3) + 0.2e1 * qJD(3) * t1163 + t1089;
t1153 = qJD(1) * t1166;
t1049 = t1103 * pkin(3) - t1167 * t1159 + (-qJD(2) * t1167 + t1131 * t1153) * qJD(2) + t1144;
t1151 = qJD(2) * t1163;
t1154 = t1131 * qJDD(1);
t1102 = t1151 + t1154;
t1150 = -0.2e1 * qJD(1) * qJD(3) - t1112;
t1139 = t1150 * t1131 - t1166 * t1102 + t1167 * qJDD(2) + (t1131 * t1138 * t1167 + qJD(2) * t1153 - g(3)) * t1135;
t1028 = t1134 * t1049 + t1130 * t1139;
t1127 = t1131 ^ 2;
t1155 = t1127 + t1128;
t1027 = -t1049 * t1130 + t1134 * t1139;
t1145 = -t1134 * t1102 - t1130 * t1103;
t1064 = -qJD(4) * t1092 - t1145;
t1149 = t1126 * t1092 - t1064;
t1148 = -t1129 * t1064 + t1133 * t1125;
t1147 = t1130 * t1102 - t1134 * t1103;
t1146 = -t1133 * t1064 - t1129 * t1125;
t1140 = -qJD(4) * t1094 - qJDD(5) - t1147;
t1137 = qJD(2) ^ 2;
t1116 = t1131 * t1158;
t1114 = -t1137 - t1159;
t1113 = -t1127 * t1138 - t1137;
t1110 = -qJDD(2) + t1116;
t1109 = qJDD(2) + t1116;
t1108 = t1155 * t1138;
t1107 = -qJDD(1) * t1132 - t1136 * t1138;
t1106 = qJDD(1) * t1136 - t1132 * t1138;
t1105 = t1155 * qJDD(1);
t1104 = t1123 - 0.2e1 * t1152;
t1101 = 0.2e1 * t1151 + t1154;
t1100 = t1136 * t1111;
t1088 = -t1131 * t1112 - t1165;
t1085 = t1110 * t1135 - t1113 * t1131;
t1084 = -t1109 * t1131 + t1114 * t1135;
t1083 = t1110 * t1131 + t1113 * t1135;
t1082 = t1109 * t1135 + t1114 * t1131;
t1078 = t1105 * t1136 - t1108 * t1132;
t1077 = t1105 * t1132 + t1108 * t1136;
t1075 = t1125 - t1161;
t1074 = -t1168 - t1170;
t1073 = -t1088 * t1131 + t1089 * t1135;
t1072 = t1088 * t1135 + t1089 * t1131;
t1071 = t1085 * t1136 + t1101 * t1132;
t1070 = t1084 * t1136 - t1104 * t1132;
t1069 = t1085 * t1132 - t1101 * t1136;
t1068 = t1084 * t1132 + t1104 * t1136;
t1066 = t1103 * pkin(1) + qJ(3) * t1159 + t1143;
t1065 = -t1169 - t1170;
t1063 = -pkin(1) * t1159 - qJD(2) * t1142 + t1144;
t1062 = qJDD(2) * pkin(1) - t1165 + (-t1102 + t1151) * qJ(3) + (pkin(1) * t1158 + t1150) * t1131;
t1061 = -t1171 - t1172;
t1060 = -t1086 * t1130 - t1134 * t1174;
t1059 = t1086 * t1134 - t1130 * t1174;
t1058 = t1092 * t1157 + t1145;
t1056 = -t1094 * t1157 - t1147;
t1055 = (qJD(4) + t1126) * t1094 + t1147;
t1054 = -t1171 - t1173;
t1052 = t1074 * t1134 - t1075 * t1130;
t1051 = t1074 * t1130 + t1075 * t1134;
t1050 = -t1172 - t1173;
t1045 = t1140 - t1162;
t1044 = -t1140 - t1162;
t1043 = -t1062 * t1131 + t1063 * t1135;
t1042 = t1062 * t1135 + t1063 * t1131;
t1041 = t1079 * t1156 + t1146;
t1040 = -t1079 * t1175 - t1146;
t1039 = -t1081 * t1156 + t1148;
t1038 = t1081 * t1175 - t1148;
t1037 = -t1059 * t1131 + t1060 * t1135;
t1036 = t1059 * t1135 + t1060 * t1131;
t1035 = t1056 * t1134 - t1058 * t1130;
t1034 = t1056 * t1130 + t1058 * t1134;
t1033 = pkin(4) * t1149 - t1053;
t1032 = -t1051 * t1131 + t1052 * t1135;
t1031 = t1051 * t1135 + t1052 * t1131;
t1030 = t1045 * t1133 - t1061 * t1129;
t1029 = t1045 * t1129 + t1061 * t1133;
t1026 = -t1044 * t1129 + t1054 * t1133;
t1025 = t1044 * t1133 + t1054 * t1129;
t1024 = pkin(4) * t1086 - t1027;
t1023 = pkin(4) * t1174 + t1028;
t1022 = t1039 * t1133 - t1041 * t1129;
t1021 = t1039 * t1129 + t1041 * t1133;
t1020 = -t1034 * t1131 + t1035 * t1135;
t1019 = t1034 * t1135 + t1035 * t1131;
t1018 = t1030 * t1134 + t1040 * t1130;
t1017 = t1030 * t1130 - t1040 * t1134;
t1016 = t1026 * t1134 + t1038 * t1130;
t1015 = t1026 * t1130 - t1038 * t1134;
t1014 = t1022 * t1134 + t1050 * t1130;
t1013 = t1022 * t1130 - t1050 * t1134;
t1012 = -t1027 * t1130 + t1028 * t1134;
t1011 = t1027 * t1134 + t1028 * t1130;
t1010 = t1023 * t1133 + t1033 * t1129;
t1009 = -t1023 * t1129 + t1033 * t1133;
t1008 = -t1017 * t1131 + t1018 * t1135;
t1007 = t1017 * t1135 + t1018 * t1131;
t1006 = -t1015 * t1131 + t1016 * t1135;
t1005 = t1015 * t1135 + t1016 * t1131;
t1004 = -t1013 * t1131 + t1014 * t1135;
t1003 = t1013 * t1135 + t1014 * t1131;
t1002 = -t1011 * t1131 + t1012 * t1135;
t1001 = t1011 * t1135 + t1012 * t1131;
t1000 = -t1009 * t1129 + t1010 * t1133;
t999 = t1009 * t1133 + t1010 * t1129;
t998 = t1000 * t1134 + t1024 * t1130;
t997 = t1000 * t1130 - t1024 * t1134;
t996 = -t1131 * t997 + t1135 * t998;
t995 = t1131 * t998 + t1135 * t997;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1107, -t1106, 0, t1112 * t1136 - t1160, 0, 0, 0, 0, 0, 0, t1070, t1071, t1078, t1073 * t1136 - t1160, 0, 0, 0, 0, 0, 0, t1070, t1071, t1078, t1043 * t1136 - t1066 * t1132, 0, 0, 0, 0, 0, 0, t1032 * t1136 + t1055 * t1132, t1037 * t1136 - t1132 * t1149, t1020 * t1136 + t1065 * t1132, t1002 * t1136 - t1053 * t1132, 0, 0, 0, 0, 0, 0, t1006 * t1136 + t1025 * t1132, t1008 * t1136 + t1029 * t1132, t1004 * t1136 + t1021 * t1132, t1132 * t999 + t1136 * t996; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1106, t1107, 0, t1112 * t1132 + t1100, 0, 0, 0, 0, 0, 0, t1068, t1069, t1077, t1073 * t1132 + t1100, 0, 0, 0, 0, 0, 0, t1068, t1069, t1077, t1043 * t1132 + t1066 * t1136, 0, 0, 0, 0, 0, 0, t1032 * t1132 - t1055 * t1136, t1037 * t1132 + t1136 * t1149, t1020 * t1132 - t1065 * t1136, t1002 * t1132 + t1053 * t1136, 0, 0, 0, 0, 0, 0, t1006 * t1132 - t1025 * t1136, t1008 * t1132 - t1029 * t1136, t1004 * t1132 - t1021 * t1136, t1132 * t996 - t1136 * t999; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1082, t1083, 0, t1072, 0, 0, 0, 0, 0, 0, t1082, t1083, 0, t1042, 0, 0, 0, 0, 0, 0, t1031, t1036, t1019, t1001, 0, 0, 0, 0, 0, 0, t1005, t1007, t1003, t995; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1138, -qJDD(1), 0, t1112, 0, 0, 0, 0, 0, 0, t1084, t1085, t1105, t1073, 0, 0, 0, 0, 0, 0, t1084, t1085, t1105, t1043, 0, 0, 0, 0, 0, 0, t1032, t1037, t1020, t1002, 0, 0, 0, 0, 0, 0, t1006, t1008, t1004, t996; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1138, 0, t1111, 0, 0, 0, 0, 0, 0, t1104, -t1101, t1108, t1111, 0, 0, 0, 0, 0, 0, t1104, -t1101, t1108, t1066, 0, 0, 0, 0, 0, 0, -t1055, t1149, -t1065, t1053, 0, 0, 0, 0, 0, 0, -t1025, -t1029, -t1021, -t999; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1082, t1083, 0, t1072, 0, 0, 0, 0, 0, 0, t1082, t1083, 0, t1042, 0, 0, 0, 0, 0, 0, t1031, t1036, t1019, t1001, 0, 0, 0, 0, 0, 0, t1005, t1007, t1003, t995; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1114, t1110, t1123, t1089, 0, 0, 0, 0, 0, 0, t1114, t1110, t1123, t1063, 0, 0, 0, 0, 0, 0, t1052, t1060, t1035, t1012, 0, 0, 0, 0, 0, 0, t1016, t1018, t1014, t998; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1109, t1113, -t1154, t1088, 0, 0, 0, 0, 0, 0, t1109, t1113, -t1154, t1062, 0, 0, 0, 0, 0, 0, t1051, t1059, t1034, t1011, 0, 0, 0, 0, 0, 0, t1015, t1017, t1013, t997; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1104, t1101, -t1108, -t1111, 0, 0, 0, 0, 0, 0, -t1104, t1101, -t1108, -t1066, 0, 0, 0, 0, 0, 0, t1055, -t1149, t1065, -t1053, 0, 0, 0, 0, 0, 0, t1025, t1029, t1021, t999; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1114, t1110, t1123, t1063, 0, 0, 0, 0, 0, 0, t1052, t1060, t1035, t1012, 0, 0, 0, 0, 0, 0, t1016, t1018, t1014, t998; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1109, t1113, -t1154, t1062, 0, 0, 0, 0, 0, 0, t1051, t1059, t1034, t1011, 0, 0, 0, 0, 0, 0, t1015, t1017, t1013, t997; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1104, t1101, -t1108, -t1066, 0, 0, 0, 0, 0, 0, t1055, -t1149, t1065, -t1053, 0, 0, 0, 0, 0, 0, t1025, t1029, t1021, t999; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1074, -t1174, t1056, t1028, 0, 0, 0, 0, 0, 0, t1026, t1030, t1022, t1000; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1075, t1086, t1058, t1027, 0, 0, 0, 0, 0, 0, -t1038, -t1040, -t1050, -t1024; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1055, -t1149, t1065, -t1053, 0, 0, 0, 0, 0, 0, t1025, t1029, t1021, t999; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1054, t1045, t1039, t1010; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1044, t1061, t1041, t1009; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1038, t1040, t1050, t1024;];
f_new_reg  = t1;
