% Calculate minimal parameter regressor of coriolis matrix for
% S5RRPRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a3,a4,d4,d5]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x26]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:26
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RRPRR1_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(4,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR1_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR1_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'S5RRPRR1_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [4x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:25:37
% EndTime: 2019-12-05 18:25:45
% DurationCPUTime: 2.06s
% Computational Cost: add. (1764->195), mult. (3899->286), div. (0->0), fcn. (3948->6), ass. (0->184)
t210 = qJD(2) + qJD(4);
t162 = pkin(1) + pkin(2);
t159 = sin(qJ(2));
t161 = cos(qJ(2));
t260 = sin(qJ(4));
t261 = cos(qJ(4));
t132 = t159 * t260 - t161 * t261;
t150 = t260 * t161;
t151 = t261 * t159;
t134 = -t151 - t150;
t269 = t210 * t134;
t178 = t132 * t269;
t160 = cos(qJ(5));
t141 = t162 * t161;
t259 = t134 * pkin(4);
t174 = -t141 + t259;
t158 = sin(qJ(5));
t258 = pkin(3) + qJ(3);
t138 = t258 * t159;
t139 = t258 * t161;
t169 = -t138 * t260 + t139 * t261;
t271 = t169 * t158;
t26 = -t160 * t174 + t271;
t276 = (t26 - t271) * t134;
t270 = t169 * t160;
t27 = t158 * t174 + t270;
t275 = (t27 - t270) * t134;
t180 = t138 * t261 + t139 * t260;
t274 = t210 * t180;
t273 = t210 * t169;
t272 = 0.2e1 * t134;
t77 = t210 * t132;
t129 = t132 ^ 2;
t130 = t134 ^ 2;
t268 = -t130 - t129;
t209 = t130 - t129;
t202 = t260 * t162;
t143 = t202 + pkin(4);
t262 = t143 / 0.2e1;
t175 = t262 - t202 / 0.2e1;
t267 = t134 * t175 + t259 / 0.2e1;
t240 = t158 * t160;
t156 = t160 ^ 2;
t264 = t158 ^ 2;
t56 = (-t264 / 0.2e1 + t156 / 0.2e1) * t134;
t265 = qJD(1) * t130 * t240 + t210 * t56;
t217 = t134 * qJD(1);
t114 = t160 * t217;
t208 = -t156 + t264;
t45 = -0.2e1 * t114 * t158 + t208 * t210;
t263 = t180 / 0.2e1;
t142 = t162 * t159;
t93 = pkin(4) * t132 + t142;
t252 = t160 * t93;
t1 = t252 * t132 + t276;
t256 = t1 * qJD(1);
t254 = t158 * t93;
t2 = -t254 * t132 + t275;
t251 = t2 * qJD(1);
t3 = pkin(4) * t160 * t129 + t276;
t250 = t3 * qJD(1);
t57 = t158 * t132;
t115 = pkin(4) * t57;
t4 = -t115 * t132 + t275;
t249 = t4 * qJD(1);
t166 = t134 * (-pkin(4) / 0.2e1 + t175);
t5 = t158 * t166;
t248 = t5 * qJD(1);
t203 = t162 * t261;
t167 = t132 * t262 - t134 * t203 / 0.2e1;
t164 = t93 / 0.2e1 + t167;
t7 = t164 * t158;
t247 = t7 * qJD(1);
t20 = t180 * t158;
t25 = t180 * t160;
t9 = t164 * t160;
t244 = t9 * qJD(1);
t12 = t160 * t166;
t243 = t12 * qJD(1);
t242 = t134 * t160;
t241 = t141 * t132;
t59 = t158 * t134;
t16 = t132 * t26 + t180 * t59;
t239 = t16 * qJD(1);
t62 = t160 * t132;
t17 = -t132 * t27 - t180 * t242;
t238 = t17 * qJD(1);
t19 = pkin(4) * t62;
t237 = t19 * qJD(1);
t236 = t115 * qJD(1);
t31 = t132 * t142 + t134 * t141;
t235 = t31 * qJD(1);
t32 = -t134 * t142 + t241;
t234 = t32 * qJD(1);
t33 = t209 * t158;
t233 = t33 * qJD(1);
t34 = t268 * t158;
t232 = t34 * qJD(1);
t35 = t209 * t160;
t231 = t35 * qJD(1);
t230 = t209 * qJD(1);
t229 = t56 * qJD(1);
t228 = t57 * qJD(1);
t227 = t59 * qJD(1);
t55 = t62 * qJD(1);
t65 = t208 * t130;
t226 = t65 * qJD(1);
t66 = t268 * t160;
t225 = t66 * qJD(1);
t216 = t134 * qJD(4);
t224 = -qJD(2) * t242 - t160 * t216;
t155 = t159 ^ 2;
t157 = t161 ^ 2;
t145 = t157 + t155;
t223 = qJD(1) * t159;
t163 = pkin(1) ^ 2;
t222 = qJD(1) * t163;
t221 = qJD(5) * t158;
t220 = qJD(5) * t160;
t128 = t151 / 0.2e1 + t150 / 0.2e1;
t219 = t128 * qJD(1);
t218 = t132 * qJD(1);
t118 = t132 * qJD(3);
t121 = t134 * qJD(3);
t136 = t145 * qJ(3);
t215 = t136 * qJD(1);
t214 = t145 * qJD(1);
t146 = t157 - t155;
t213 = t146 * qJD(1);
t212 = t159 * qJD(2);
t211 = t161 * qJD(2);
t207 = pkin(1) * t223;
t201 = t132 * t220;
t83 = t132 * t217;
t200 = t141 * t218;
t199 = t141 * t217;
t149 = t158 * t220;
t198 = t159 * t211;
t197 = t161 * t223;
t196 = t160 * t121;
t195 = qJD(5) * t261;
t194 = t261 * qJD(2);
t193 = t261 * qJD(4);
t192 = t260 * qJD(2);
t191 = t260 * qJD(4);
t189 = t210 * t158;
t188 = qJD(5) + t218;
t185 = t162 * t191;
t184 = t158 * t195;
t183 = t160 * t195;
t182 = t162 * t194;
t181 = t162 * t192;
t179 = t160 * t189;
t177 = t210 * t240;
t176 = t134 * t188;
t173 = t160 * t176;
t37 = -qJD(5) * t128 + t83;
t172 = t132 * t203 + t134 * t143;
t170 = t179 * t272;
t168 = -t192 - t191;
t165 = (-t194 - t193) * t162;
t140 = t208 * qJD(5);
t137 = t158 * t185;
t63 = t210 * t128;
t53 = t59 * qJD(3);
t48 = t57 * qJD(5);
t47 = t56 * qJD(5);
t41 = t220 + t55;
t40 = -t221 - t228;
t30 = t177 - t229;
t29 = -t179 + t229;
t28 = 0.2e1 * t158 * t173;
t24 = -t156 * t83 - t47;
t22 = qJD(5) * t62 - t231;
t21 = -t48 + t233;
t18 = -t47 + (t156 * t217 - t179) * t132;
t15 = -t134 * t189 + t231;
t14 = t224 - t233;
t13 = t208 * t77 + (qJD(5) - t218) * t240 * t272;
t11 = t160 * t267 + t271;
t10 = t20 / 0.2e1 + t158 * t263 + t252 / 0.2e1 - t167 * t160;
t8 = t25 / 0.2e1 + t160 * t263 - t254 / 0.2e1 + t167 * t158;
t6 = t158 * t267 - t270;
t23 = [0, 0, 0, t198, t146 * qJD(2), 0, 0, 0, 0, 0, t145 * qJD(3), qJD(3) * t136 - t163 * t198, t178, -t210 * t209, 0, 0, 0, qJD(2) * t31 + t141 * t216, qJD(2) * t32 + qJD(4) * t241, -t130 * t149 + t156 * t178, t65 * qJD(5) - t132 * t170, t132 * t134 * t221 + t210 * t35, t134 * t201 - t210 * t33, -t178, qJD(2) * t1 - qJD(3) * t34 + qJD(4) * t3 + qJD(5) * t17, qJD(2) * t2 - qJD(3) * t66 + qJD(4) * t4 + qJD(5) * t16; 0, 0, 0, t197, t213, t211, -t212, 0, 0, 0, -pkin(1) * t211, (-pkin(1) * qJ(3) * qJD(2) - t159 * t222) * t161, t83, -t230, -t77, t269, 0, t235 - t273, t234 + t274, t18, t13, t15, t14, -t37, t256 + (t158 * t172 - t270) * qJD(2) + t6 * qJD(4) + t10 * qJD(5), t251 + (t160 * t172 + t271) * qJD(2) + t11 * qJD(4) + t8 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t214, t215, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t232, -t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, -t230, -t77, t269, 0, t199 - t273, t200 + t274, t18, t13, t15, t14, -t37, t250 + t6 * qJD(2) + (pkin(4) * t59 - t270) * qJD(4) + t20 * qJD(5), t249 + t11 * qJD(2) + (pkin(4) * t242 + t271) * qJD(4) + t25 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t265, t177 * t272 + t226, t158 * t176, t173, t63, qJD(2) * t10 + qJD(4) * t20 - qJD(5) * t27 + t238, qJD(2) * t8 + qJD(4) * t25 + qJD(5) * t26 + t239; 0, 0, 0, -t197, -t213, 0, 0, 0, 0, 0, 0, (-pkin(1) * qJD(3) + t161 * t222) * t159, -t83, t230, 0, 0, 0, t121 - t235, t118 - t234, t24, t28, t22, t21, t37, qJD(4) * t5 - qJD(5) * t9 + t196 - t256, qJD(4) * t12 + qJD(5) * t7 - t251 - t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t185, -t162 * t193, t149, -t140, 0, 0, 0, (-t160 * t191 - t184) * t162, -t162 * t183 + t137; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t207, 0, 0, 0, 0, 0, t217, t218, 0, 0, 0, 0, 0, t114, -t227; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t168 * t162, t165, t149, -t140, 0, 0, 0, t248 + (t160 * t168 - t184) * t162, t243 + t137 + (t158 * t192 - t183) * t162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, -t45, t41, t40, -t219, -t143 * t220 + t158 * t165 - t244, t143 * t221 + t160 * t165 + t247; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t214, pkin(1) * t212 - t215, 0, 0, 0, 0, 0, -t269, -t77, 0, 0, 0, 0, 0, t224 - t48 + t232, t210 * t59 - t201 + t225; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t207, 0, 0, 0, 0, 0, -t217, -t218, 0, 0, 0, 0, 0, -t114, t227; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t217, -t218, 0, 0, 0, 0, 0, -t114, t227; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, -t188 * t160; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t83, t230, 0, 0, 0, t121 - t199, t118 - t200, t24, t28, t22, t21, t37, -qJD(2) * t5 - qJD(5) * t19 + t196 - t250, -qJD(2) * t12 + qJD(5) * t115 - t249 - t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t181, t182, t149, -t140, 0, 0, 0, t160 * t181 - t248, -t158 * t181 - t243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t217, t218, 0, 0, 0, 0, 0, t114, -t227; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t149, -t140, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, -t45, t41, t40, -t219, -pkin(4) * t220 - t237, pkin(4) * t221 + t236; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t265, -t170 - t226, -t158 * t83 - t210 * t62, -t114 * t132 + t210 * t57, t63, qJD(2) * t9 + qJD(3) * t57 + qJD(4) * t19 - t238, -qJD(2) * t7 - qJD(4) * t115 + t118 * t160 - t239; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29, t45, -t55, t228, t219, t158 * t182 + t244, t160 * t182 - t247; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t228, t160 * t218; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29, t45, -t55, t228, t219, t237, -t236; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t23;
