% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPPRP6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:55
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPPRP6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRP6_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRP6_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRP6_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRP6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPPRP6_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:55:39
% EndTime: 2019-12-31 17:55:41
% DurationCPUTime: 1.99s
% Computational Cost: add. (2947->182), mult. (6710->163), div. (0->0), fcn. (4303->6), ass. (0->93)
t1158 = sin(pkin(7));
t1159 = cos(pkin(7));
t1160 = sin(qJ(4));
t1162 = cos(qJ(4));
t1174 = t1158 * t1162 + t1159 * t1160;
t1134 = t1174 * qJD(1);
t1136 = (-t1158 * t1160 + t1159 * t1162) * qJD(1);
t1185 = t1136 * t1134;
t1115 = -qJDD(4) - t1185;
t1131 = t1136 ^ 2;
t1164 = qJD(4) ^ 2;
t1195 = -t1131 - t1164;
t1091 = t1115 * t1160 + t1162 * t1195;
t1093 = t1115 * t1162 - t1160 * t1195;
t1075 = t1091 * t1159 + t1093 * t1158;
t1161 = sin(qJ(1));
t1163 = cos(qJ(1));
t1148 = t1158 * qJDD(1);
t1149 = t1159 * qJDD(1);
t1133 = -t1148 * t1160 + t1149 * t1162;
t1204 = -2 * qJD(4);
t1171 = t1134 * t1204 + t1133;
t1212 = t1075 * t1161 + t1163 * t1171;
t1211 = t1075 * t1163 - t1161 * t1171;
t1173 = t1174 * qJDD(1);
t1194 = t1136 * t1204 - t1173;
t1114 = qJDD(4) - t1185;
t1118 = t1134 ^ 2;
t1196 = -t1118 - t1164;
t1202 = -t1114 * t1160 + t1162 * t1196;
t1203 = t1114 * t1162 + t1160 * t1196;
t1205 = t1158 * t1202 + t1159 * t1203;
t1210 = -t1161 * t1194 - t1163 * t1205;
t1209 = t1161 * t1205 - t1163 * t1194;
t1071 = t1091 * t1158 - t1093 * t1159;
t1100 = t1131 + t1118;
t1191 = t1133 * t1160 - t1162 * t1173;
t1192 = -t1133 * t1162 - t1160 * t1173;
t1200 = t1158 * t1191 + t1159 * t1192;
t1208 = -t1100 * t1163 + t1161 * t1200;
t1207 = -t1100 * t1161 - t1163 * t1200;
t1206 = -t1158 * t1203 + t1159 * t1202;
t1143 = t1161 * g(1) - g(2) * t1163;
t1165 = qJD(1) ^ 2;
t1172 = -t1165 * qJ(2) + qJDD(2) - t1143;
t1188 = -qJ(3) - pkin(1);
t1190 = -0.2e1 * qJD(1);
t1175 = qJD(3) * t1190 + qJDD(1) * t1188 + t1172;
t1201 = -t1158 * t1192 + t1159 * t1191;
t1153 = t1158 ^ 2;
t1154 = t1159 ^ 2;
t1180 = t1153 + t1154;
t1197 = t1180 * t1165;
t1189 = 2 * qJD(5);
t1187 = t1158 * g(3);
t1184 = t1153 * t1165;
t1183 = t1158 * t1165;
t1110 = -t1159 * g(3) + t1158 * t1175;
t1101 = -pkin(3) * t1184 - pkin(6) * t1148 + t1110;
t1168 = t1187 + (-pkin(3) * t1183 - qJDD(1) * pkin(6) + t1175) * t1159;
t1079 = t1101 * t1162 + t1160 * t1168;
t1179 = t1161 * qJDD(1);
t1178 = t1163 * qJDD(1);
t1176 = t1159 * t1183;
t1078 = -t1101 * t1160 + t1162 * t1168;
t1144 = -t1163 * g(1) - t1161 * g(2);
t1170 = -qJDD(1) * qJ(2) + qJD(2) * t1190 - t1144;
t1169 = -qJDD(3) + t1170;
t1102 = -pkin(3) * t1148 + (pkin(6) * t1180 - t1188) * t1165 + t1169;
t1142 = t1163 * t1165 + t1179;
t1141 = -t1161 * t1165 + t1178;
t1139 = t1180 * qJDD(1);
t1138 = t1158 * t1197;
t1137 = t1159 * t1197;
t1130 = qJDD(1) * pkin(1) - t1172;
t1125 = t1165 * pkin(1) + t1170;
t1120 = -t1165 * t1188 + t1169;
t1109 = t1159 * t1175 + t1187;
t1108 = pkin(4) * t1134 - qJ(5) * t1136;
t1083 = -t1109 * t1158 + t1110 * t1159;
t1082 = t1109 * t1159 + t1110 * t1158;
t1067 = -qJDD(4) * pkin(4) - qJ(5) * t1164 + t1108 * t1136 + qJDD(5) - t1078;
t1066 = -pkin(4) * t1164 + qJDD(4) * qJ(5) + (qJD(4) * t1189) - t1108 * t1134 + t1079;
t1065 = pkin(4) * t1194 + t1171 * qJ(5) + t1136 * t1189 + t1102;
t1064 = -t1078 * t1160 + t1079 * t1162;
t1063 = t1078 * t1162 + t1079 * t1160;
t1062 = t1066 * t1162 + t1067 * t1160;
t1061 = t1066 * t1160 - t1067 * t1162;
t1060 = -t1063 * t1158 + t1064 * t1159;
t1059 = t1063 * t1159 + t1064 * t1158;
t1058 = -t1061 * t1158 + t1062 * t1159;
t1057 = t1061 * t1159 + t1062 * t1158;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1142, -t1141, 0, -t1143 * t1161 + t1144 * t1163, 0, 0, 0, 0, 0, 0, 0, t1142, t1141, -t1125 * t1163 - t1130 * t1161, 0, 0, 0, 0, 0, 0, -t1138 * t1161 + t1158 * t1178, -t1137 * t1161 + t1159 * t1178, -t1139 * t1161 - t1163 * t1197, t1082 * t1161 - t1120 * t1163, 0, 0, 0, 0, 0, 0, t1209, t1212, t1208, t1059 * t1161 - t1102 * t1163, 0, 0, 0, 0, 0, 0, t1209, t1208, -t1212, t1057 * t1161 - t1065 * t1163; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1141, -t1142, 0, t1143 * t1163 + t1144 * t1161, 0, 0, 0, 0, 0, 0, 0, -t1141, t1142, -t1125 * t1161 + t1130 * t1163, 0, 0, 0, 0, 0, 0, t1138 * t1163 + t1158 * t1179, t1137 * t1163 + t1159 * t1179, t1139 * t1163 - t1161 * t1197, -t1082 * t1163 - t1120 * t1161, 0, 0, 0, 0, 0, 0, t1210, -t1211, t1207, -t1059 * t1163 - t1102 * t1161, 0, 0, 0, 0, 0, 0, t1210, t1207, t1211, -t1057 * t1163 - t1065 * t1161; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1083, 0, 0, 0, 0, 0, 0, t1206, -t1071, t1201, t1060, 0, 0, 0, 0, 0, 0, t1206, t1201, t1071, t1058; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1165, -qJDD(1), 0, t1144, 0, 0, 0, 0, 0, 0, 0, t1165, qJDD(1), -t1125, 0, 0, 0, 0, 0, 0, t1148, t1149, -t1197, -t1120, 0, 0, 0, 0, 0, 0, -t1194, t1171, -t1100, -t1102, 0, 0, 0, 0, 0, 0, -t1194, -t1100, -t1171, -t1065; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1165, 0, t1143, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), t1165, t1130, 0, 0, 0, 0, 0, 0, t1138, t1137, t1139, -t1082, 0, 0, 0, 0, 0, 0, -t1205, -t1075, -t1200, -t1059, 0, 0, 0, 0, 0, 0, -t1205, -t1200, t1075, -t1057; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1083, 0, 0, 0, 0, 0, 0, t1206, -t1071, t1201, t1060, 0, 0, 0, 0, 0, 0, t1206, t1201, t1071, t1058; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1083, 0, 0, 0, 0, 0, 0, t1206, -t1071, t1201, t1060, 0, 0, 0, 0, 0, 0, t1206, t1201, t1071, t1058; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1165, -qJDD(1), t1125, 0, 0, 0, 0, 0, 0, -t1148, -t1149, t1197, t1120, 0, 0, 0, 0, 0, 0, t1194, -t1171, t1100, t1102, 0, 0, 0, 0, 0, 0, t1194, t1100, t1171, t1065; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1165, -t1130, 0, 0, 0, 0, 0, 0, -t1138, -t1137, -t1139, t1082, 0, 0, 0, 0, 0, 0, t1205, t1075, t1200, t1059, 0, 0, 0, 0, 0, 0, t1205, t1200, -t1075, t1057; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1184, -t1176, -t1148, t1110, 0, 0, 0, 0, 0, 0, t1202, t1093, t1191, t1064, 0, 0, 0, 0, 0, 0, t1202, t1191, -t1093, t1062; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1176, -t1154 * t1165, -t1149, t1109, 0, 0, 0, 0, 0, 0, t1203, t1091, t1192, t1063, 0, 0, 0, 0, 0, 0, t1203, t1192, -t1091, t1061; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1148, t1149, -t1197, -t1120, 0, 0, 0, 0, 0, 0, -t1194, t1171, -t1100, -t1102, 0, 0, 0, 0, 0, 0, -t1194, -t1100, -t1171, -t1065; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1196, t1115, -t1173, t1079, 0, 0, 0, 0, 0, 0, t1196, -t1173, -t1115, t1066; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1114, t1195, -t1133, t1078, 0, 0, 0, 0, 0, 0, t1114, -t1133, -t1195, -t1067; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1194, t1171, -t1100, -t1102, 0, 0, 0, 0, 0, 0, -t1194, -t1100, -t1171, -t1065; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1196, -t1173, -t1115, t1066; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1194, -t1100, -t1171, -t1065; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1114, t1133, t1195, t1067;];
f_new_reg = t1;
