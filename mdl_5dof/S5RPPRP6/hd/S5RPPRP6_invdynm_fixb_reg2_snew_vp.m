% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPPRP6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:55
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPPRP6_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRP6_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRP6_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRP6_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRP6_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPPRP6_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:55:29
% EndTime: 2019-12-31 17:55:39
% DurationCPUTime: 10.63s
% Computational Cost: add. (17237->479), mult. (39547->501), div. (0->0), fcn. (25016->6), ass. (0->316)
t866 = sin(pkin(7));
t867 = cos(pkin(7));
t869 = sin(qJ(4));
t871 = cos(qJ(4));
t829 = (-t866 * t869 + t867 * t871) * qJD(1);
t823 = t829 ^ 2;
t873 = qJD(4) ^ 2;
t774 = t873 + t823;
t908 = t866 * t871 + t867 * t869;
t827 = t908 * qJD(1);
t973 = t829 * t827;
t1007 = qJDD(4) + t973;
t964 = t869 * t1007;
t708 = t871 * t774 + t964;
t956 = t871 * t1007;
t710 = -t869 * t774 + t956;
t657 = t867 * t708 + t866 * t710;
t1056 = pkin(2) * t657;
t678 = t866 * t708 - t867 * t710;
t1055 = qJ(2) * t678;
t1054 = qJ(3) * t657;
t1053 = qJ(3) * t678;
t870 = sin(qJ(1));
t1052 = t870 * t657;
t872 = cos(qJ(1));
t1051 = t872 * t657;
t975 = -qJ(3) - pkin(1);
t1050 = t975 * t657;
t1049 = t975 * t678;
t982 = t827 ^ 2;
t803 = t982 - t873;
t720 = t869 * t803 + t956;
t727 = -t871 * t803 + t964;
t667 = t867 * t720 - t866 * t727;
t988 = t908 * qJDD(1);
t1048 = t870 * t667 - t872 * t988;
t1047 = t872 * t667 + t870 * t988;
t706 = pkin(3) * t708;
t1046 = pkin(6) * t708;
t1045 = pkin(6) * t710;
t674 = t866 * t720 + t867 * t727;
t804 = t823 - t873;
t1008 = qJDD(4) - t973;
t963 = t869 * t1008;
t1037 = -t871 * t804 + t963;
t761 = t871 * t1008;
t1038 = t869 * t804 + t761;
t1042 = t1037 * t867 + t1038 * t866;
t1044 = t1042 * t870;
t1043 = t1042 * t872;
t1041 = -t1037 * t866 + t1038 * t867;
t852 = t867 * qJDD(1);
t942 = t866 * qJDD(1);
t825 = t871 * t852 - t869 * t942;
t994 = t869 * t825 - t871 * t988;
t998 = -t871 * t825 - t869 * t988;
t1002 = t866 * t994 + t867 * t998;
t1040 = pkin(2) * t1002;
t989 = -t982 - t873;
t993 = t871 * t989 - t963;
t999 = t869 * t989 + t761;
t1004 = t866 * t993 + t867 * t999;
t1039 = pkin(2) * t1004;
t1003 = -t866 * t998 + t867 * t994;
t1036 = qJ(2) * t1003;
t1005 = -t866 * t999 + t867 * t993;
t1035 = qJ(2) * t1005;
t1034 = qJ(3) * t1002;
t1033 = qJ(3) * t1003;
t1032 = qJ(3) * t1004;
t1031 = qJ(3) * t1005;
t1030 = t1003 * t975;
t1029 = t1005 * t975;
t948 = qJD(4) * t827;
t783 = t825 - t948;
t1009 = t783 - t948;
t1028 = t1009 * qJ(5);
t947 = t829 * qJD(4);
t780 = t988 + 0.2e1 * t947;
t1027 = qJ(2) * t780 + t1004 * t975;
t748 = -t982 - t823;
t1026 = qJ(2) * t748 + t1002 * t975;
t1025 = pkin(5) * (-t1004 * t872 + t870 * t780);
t1024 = pkin(5) * (t1004 * t870 + t872 * t780);
t1023 = pkin(5) * (t1002 * t870 + t872 * t748);
t1022 = pkin(5) * (-t1002 * t872 + t870 * t748);
t1021 = pkin(2) * t748;
t711 = pkin(3) * t998;
t1020 = pkin(3) * t999;
t1019 = pkin(6) * t993;
t1018 = pkin(6) * t998;
t1017 = pkin(6) * t999;
t1006 = -pkin(3) * t748 + pkin(6) * t994;
t990 = t823 - t982;
t1001 = t870 * t990;
t1000 = t872 * t990;
t897 = (-t827 * t869 - t829 * t871) * qJD(4);
t801 = t869 * t947;
t933 = t871 * t948;
t912 = t801 - t933;
t986 = t866 * t912 + t867 * t897;
t997 = t870 * qJDD(4) - t872 * t986;
t996 = t872 * qJDD(4) + t870 * t986;
t937 = t872 * t973;
t781 = t988 + t947;
t900 = t869 * t781 + t933;
t913 = -t871 * t781 + t869 * t948;
t983 = t866 * t900 + t867 * t913;
t995 = t870 * t983 - t937;
t938 = t870 * t973;
t992 = -t872 * t983 - t938;
t874 = qJD(1) ^ 2;
t860 = t866 ^ 2;
t861 = t867 ^ 2;
t949 = t860 + t861;
t991 = t949 * t874;
t840 = t870 * g(1) - t872 * g(2);
t915 = qJDD(2) - t840;
t894 = -t874 * qJ(2) + t915;
t882 = t975 * qJDD(1) + t894;
t946 = qJD(3) * qJD(1);
t939 = -0.2e1 * t946;
t976 = t866 * g(3);
t771 = t976 + (t882 + t939) * t867;
t772 = t867 * g(3) + (-t882 + 0.2e1 * t946) * t866;
t703 = t867 * t771 - t866 * t772;
t985 = -t866 * t897 + t867 * t912;
t984 = -t866 * t913 + t867 * t900;
t981 = pkin(2) * t703;
t863 = qJDD(1) * qJ(2);
t841 = t872 * g(1) + t870 * g(2);
t888 = -0.2e1 * qJD(2) * qJD(1) + t841;
t885 = -t863 + t888;
t884 = -qJDD(3) + t885;
t795 = -t975 * t874 + t884;
t980 = pkin(2) * t795;
t834 = t949 * qJDD(1);
t979 = pkin(2) * t834;
t978 = pkin(4) * t871;
t977 = t781 * pkin(4);
t974 = qJDD(1) * pkin(1);
t972 = t860 * t874;
t747 = t976 + (t939 + (-pkin(3) * t866 - qJ(2)) * t874 + (-pkin(6) + t975) * qJDD(1) + t915) * t867;
t750 = -pkin(3) * t972 - pkin(6) * t942 - t772;
t692 = -t871 * t747 + t869 * t750;
t693 = t869 * t747 + t871 * t750;
t643 = -t871 * t692 + t869 * t693;
t971 = t866 * t643;
t969 = t866 * t795;
t968 = t866 * t867;
t967 = t867 * t643;
t791 = t867 * t795;
t966 = t869 * t1009;
t755 = -pkin(3) * t942 + (t949 * pkin(6) - t975) * t874 + t884;
t965 = t869 * t755;
t962 = t869 * t780;
t958 = t870 * t834;
t957 = t871 * t755;
t955 = t871 * t780;
t953 = t872 * t834;
t945 = qJD(5) * qJD(4);
t856 = 0.2e1 * t945;
t769 = t827 * pkin(4) - t829 * qJ(5);
t911 = -t873 * pkin(4) + qJDD(4) * qJ(5) - t827 * t769 + t693;
t653 = t856 + t911;
t655 = -qJDD(4) * pkin(4) - t873 * qJ(5) + t829 * t769 + qJDD(5) + t692;
t952 = -pkin(4) * t655 + qJ(5) * t653;
t951 = -pkin(4) * t825 - qJ(5) * t988;
t950 = t860 - t861;
t944 = t860 * qJDD(1);
t943 = t861 * qJDD(1);
t941 = t870 * qJDD(1);
t940 = t872 * qJDD(1);
t632 = t869 * t653 - t871 * t655;
t936 = pkin(3) * t632 + t952;
t935 = -t693 - t706;
t934 = t951 + t711;
t644 = t869 * t692 + t871 * t693;
t622 = t866 * t644 + t967;
t641 = pkin(3) * t643;
t932 = -pkin(2) * t622 - t641;
t931 = -t711 - t1040;
t930 = -qJ(5) * t869 - pkin(3);
t633 = t871 * t653 + t869 * t655;
t878 = -pkin(4) * t947 + 0.2e1 * qJD(5) * t829 + t755;
t877 = t878 + t1028;
t652 = t877 - t977;
t607 = pkin(6) * t633 + (-t930 + t978) * t652;
t609 = -pkin(6) * t632 + (-pkin(4) * t869 + qJ(5) * t871) * t652;
t929 = -t866 * t607 + t867 * t609;
t642 = -pkin(4) * t748 + t653;
t645 = -qJ(5) * t748 + t655;
t618 = t871 * t642 + t869 * t645 + t1006;
t621 = -t869 * t642 + t871 * t645 - t1018;
t928 = -t866 * t618 + t867 * t621;
t640 = t878 - t977 + 0.2e1 * t1028;
t625 = t1045 + t869 * t640 + (pkin(3) + t978) * t1009;
t628 = -pkin(4) * t966 + t871 * t640 - t1046;
t927 = -t866 * t625 + t867 * t628;
t646 = (-t780 - t781) * pkin(4) + t877;
t629 = t871 * t646 + t780 * t930 + t1019;
t635 = -qJ(5) * t955 - t869 * t646 - t1017;
t926 = -t866 * t629 + t867 * t635;
t630 = t1006 + t644;
t637 = -t643 - t1018;
t925 = -t866 * t630 + t867 * t637;
t661 = -pkin(3) * t780 + t1019 + t957;
t687 = -t965 - t1017;
t924 = -t866 * t661 + t867 * t687;
t782 = t825 - 0.2e1 * t948;
t666 = -pkin(3) * t782 - t1045 - t965;
t691 = -t957 + t1046;
t923 = -t866 * t666 + t867 * t691;
t808 = t874 * pkin(1) + t885;
t816 = -t894 + t974;
t921 = -t872 * t808 - t870 * t816;
t920 = -t870 * t840 - t872 * t841;
t838 = -t870 * t874 + t940;
t918 = pkin(5) * t838 + t870 * g(3);
t839 = t872 * t874 + t941;
t917 = -pkin(5) * t839 + t872 * g(3);
t736 = t869 * t783 + t871 * t947;
t737 = t871 * t783 - t801;
t683 = t867 * t736 + t866 * t737;
t916 = -t872 * t683 + t938;
t914 = -t692 + t1020;
t704 = -t866 * t771 - t867 * t772;
t910 = t870 * t808 - t872 * t816;
t909 = t872 * t840 - t870 * t841;
t610 = t867 * t632 + t866 * t633;
t907 = -pkin(2) * t610 - t936;
t906 = -t935 + t1056;
t905 = -t934 - t1040;
t638 = pkin(3) * t755 + pkin(6) * t644;
t904 = -pkin(6) * t967 - t866 * t638;
t903 = t870 * t683 + t937;
t770 = pkin(2) * t780;
t902 = -t867 * t629 - t866 * t635 + t770;
t901 = -t867 * t661 - t866 * t687 + t770;
t832 = t866 * t991;
t899 = -t870 * t832 + t866 * t940;
t898 = t872 * t832 + t866 * t941;
t896 = -t914 - t1039;
t895 = pkin(4) * t774 + qJ(5) * t1007 + t911;
t893 = -pkin(2) * t652 - t867 * t607 - t866 * t609;
t892 = -t867 * t618 - t866 * t621 + t1021;
t891 = -pkin(2) * t1009 - t867 * t625 - t866 * t628;
t890 = -t867 * t630 - t866 * t637 + t1021;
t889 = pkin(2) * t782 - t867 * t666 - t866 * t691;
t887 = t856 + t895;
t886 = -pkin(2) * t755 + pkin(6) * t971 - t867 * t638;
t883 = -t706 - t895 - t1056;
t881 = pkin(4) * t1008 + qJ(5) * t989 - t655;
t880 = t881 + t1020;
t879 = -t880 - t1039;
t844 = t874 * t968;
t843 = t866 * t852;
t842 = -0.2e1 * t843;
t837 = t950 * t874;
t835 = t950 * qJDD(1);
t831 = t867 * t991;
t830 = t915 - 0.2e1 * t974;
t826 = 0.2e1 * t863 - t888;
t799 = t839 * t968;
t798 = t838 * t968;
t793 = -t870 * t831 + t867 * t940;
t792 = t872 * t831 + t867 * t941;
t785 = -pkin(2) * t942 + t791;
t784 = -pkin(2) * t852 - t969;
t757 = pkin(1) * t816 - qJ(2) * t808;
t745 = -pkin(2) * t832 + t771;
t744 = -pkin(2) * t831 + t772;
t742 = t783 + t948;
t717 = qJ(2) * t852 - t975 * t831 - t791;
t716 = (-t795 + t863) * t866 - t975 * t832;
t715 = -t869 * t782 - t955;
t713 = t871 * t782 - t962;
t700 = pkin(2) * t991 + t704;
t695 = t955 + t966;
t694 = -t1009 * t871 + t962;
t688 = -qJ(2) * t991 - t975 * t834 - t703;
t686 = -t866 * t736 + t867 * t737;
t665 = -t866 * t713 + t867 * t715;
t663 = t867 * t713 + t866 * t715;
t660 = -qJ(2) * t704 + t981;
t650 = t975 * t704 - t980;
t649 = -qJ(2) * t795 + t975 * t703;
t648 = -t866 * t694 + t867 * t695;
t647 = t867 * t694 + t866 * t695;
t639 = -t905 - t1036;
t626 = -t931 - t1036;
t624 = -t906 - t1055;
t623 = t867 * t644 - t971;
t619 = -t896 - t1035;
t617 = -t879 - t1035;
t616 = t889 + t1049;
t615 = qJ(2) * t782 - t1050 + t923;
t614 = t856 - t883 + t1055;
t613 = t901 + t1029;
t612 = t1027 + t924;
t611 = -t866 * t632 + t867 * t633;
t606 = t902 + t1029;
t605 = t1027 + t926;
t604 = t890 + t1030;
t603 = t1026 + t925;
t602 = -qJ(2) * t623 - t932;
t601 = t891 - t1049;
t600 = -qJ(2) * t1009 + t1050 + t927;
t599 = t892 + t1030;
t598 = t1026 + t928;
t597 = t975 * t623 + t886;
t596 = -qJ(2) * t755 + t975 * t622 + t904;
t595 = -qJ(2) * t611 - t907;
t594 = t975 * t611 + t893;
t593 = -qJ(2) * t652 + t975 * t610 + t929;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t838, 0, -t839, 0, -t918, -t917, -t909, -pkin(5) * t909, 0, -t838, t839, 0, 0, 0, t910, t918, t917, pkin(5) * t910 + (-t870 * pkin(1) + t872 * qJ(2)) * g(3), t799, -t870 * t835 - t872 * t837, t793, -t799, -t899, 0, -pkin(5) * t898 + t872 * t745 + t870 * t785, -pkin(5) * t792 + t872 * t744 + t870 * t784, -pkin(2) * t953 + t870 * t700 - pkin(5) * (-t870 * t991 + t953), t872 * t660 - t870 * t650 - pkin(5) * (-t872 * t703 - t870 * t795), t903, t870 * t663 + t1000, t872 * t825 + t1044, t995, t1048, t996, -t870 * t613 + t872 * t619 - t1025, t872 * t624 - t870 * t616 - pkin(5) * (t870 * t782 + t1051), -t870 * t604 + t872 * t626 - t1022, t872 * t602 - t870 * t597 - pkin(5) * (-t872 * t622 - t870 * t755), t903, t872 * t742 + t1044, t870 * t647 - t1000, t996, -t1048, t995, -t870 * t606 + t872 * t617 - t1025, -t870 * t599 + t872 * t639 - t1022, t872 * t614 - t870 * t601 - pkin(5) * (-t1009 * t870 - t1051), t872 * t595 - t870 * t594 - pkin(5) * (-t872 * t610 - t870 * t652); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t839, 0, t838, 0, t917, -t918, t920, pkin(5) * t920, 0, -t839, -t838, 0, 0, 0, t921, -t917, t918, pkin(5) * t921 + (t872 * pkin(1) + t870 * qJ(2)) * g(3), -t798, t872 * t835 - t870 * t837, t792, t798, -t898, 0, pkin(5) * t899 + t870 * t745 - t872 * t785, pkin(5) * t793 + t870 * t744 - t872 * t784, -pkin(2) * t958 - t872 * t700 + pkin(5) * (-t872 * t991 - t958), t870 * t660 + t872 * t650 + pkin(5) * (t870 * t703 - t872 * t795), t916, -t872 * t663 + t1001, t870 * t825 - t1043, t992, -t1047, t997, t872 * t613 + t870 * t619 + t1024, t870 * t624 + t872 * t616 + pkin(5) * (t872 * t782 - t1052), t872 * t604 + t870 * t626 + t1023, t870 * t602 + t872 * t597 + pkin(5) * (t870 * t622 - t872 * t755), t916, t870 * t742 - t1043, -t872 * t647 - t1001, t997, t1047, t992, t872 * t606 + t870 * t617 + t1024, t872 * t599 + t870 * t639 + t1023, t870 * t614 + t872 * t601 + pkin(5) * (-t1009 * t872 + t1052), t870 * t595 + t872 * t594 + pkin(5) * (t870 * t610 - t872 * t652); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t840, t841, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t830, t826, t757, t943, t842, 0, t944, 0, 0, t716, t717, t688, t649, t686, t665, t1041, t984, -t674, t985, t612, t615, t603, t596, t686, t1041, t648, t985, t674, t984, t605, t598, t600, t593; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t874, 0, 0, -g(3), -t840, 0, 0, -qJDD(1), t874, 0, 0, 0, -t816, 0, g(3), qJ(2) * g(3), t844, -t837, t852, -t844, -t942, 0, t745, t744, -t979, t660, t973, t990, t825, -t973, -t988, qJDD(4), t619, t624, t626, t602, t973, t742, -t990, qJDD(4), t988, -t973, t617, t639, t614, t595; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t874, 0, qJDD(1), 0, g(3), 0, -t841, 0, 0, -t874, -qJDD(1), 0, 0, 0, -t808, -g(3), 0, pkin(1) * g(3), -t843, t835, t831, t843, -t832, 0, -t785, -t784, -t700, t650, -t683, -t663, -t1042, -t983, -t667, -t986, t613, t616, t604, t597, -t683, -t1042, -t647, -t986, t667, -t983, t606, t599, t601, t594; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t840, t841, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t830, t826, t757, t943, t842, 0, t944, 0, 0, t716, t717, t688, t649, t686, t665, t1041, t984, -t674, t985, t612, t615, t603, t596, t686, t1041, t648, t985, t674, t984, t605, t598, t600, t593; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t816, -t808, 0, t943, t842, 0, t944, 0, 0, qJ(3) * t832 - t969, qJ(3) * t831 - t791, qJ(3) * t834 - t703, -qJ(3) * t703, t686, t665, t1041, t984, -t674, t985, t924 - t1032, t923 + t1054, t925 - t1034, -qJ(3) * t622 + t904, t686, t1041, t648, t985, t674, t984, t926 - t1032, t928 - t1034, t927 - t1054, -qJ(3) * t610 + t929; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t874, 0, 0, 0, t816, 0, -g(3), 0, -t844, t837, -t852, t844, t942, 0, -t745, -t744, t979, -t981, -t973, -t990, -t825, t973, t988, -qJDD(4), t896, t906, t931, t932, -t973, -t742, t990, -qJDD(4), -t988, t973, t879, t905, t883 - 0.2e1 * t945, t907; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t874, qJDD(1), 0, 0, 0, t808, g(3), 0, 0, t843, -t835, -t831, -t843, t832, 0, t785, t784, t700, qJ(3) * t704 + t980, t683, t663, t1042, t983, t667, t986, -t901 + t1031, -t889 + t1053, -t890 + t1033, qJ(3) * t623 - t886, t683, t1042, t647, t986, -t667, t983, -t902 + t1031, -t892 + t1033, -t891 - t1053, qJ(3) * t611 - t893; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t852, -t942, -t844, 0, t972, 0, 0, -t795, -t771, 0, t737, t715, t1038, t900, -t727, t912, t687, t691, t637, -pkin(6) * t643, t737, t1038, t695, t912, t727, t900, t635, t621, t628, t609; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t852, -t861 * t874, -t942, t844, 0, t795, 0, -t772, 0, t736, t713, t1037, t913, t720, t897, t661, t666, t630, t638, t736, t1037, t694, t897, -t720, t913, t629, t618, t625, t607; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t844, -t837, t852, -t844, -t942, 0, t771, t772, 0, 0, t973, t990, t825, -t973, -t988, qJDD(4), t914, t935, t711, t641, t973, t742, -t990, qJDD(4), t988, -t973, t880, t934, t706 + t887, t936; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t783, -t780, t1008, t948, t803, -t948, 0, -t755, t692, 0, t783, t1008, t780, -t948, -t803, t948, -qJ(5) * t780, t645, t640, qJ(5) * t652; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t947, t782, -t804, -t781, t1007, -t947, t755, 0, t693, 0, t947, -t804, -t1009, -t947, -t1007, -t781, t646, t642, pkin(4) * t1009, pkin(4) * t652; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t973, t990, t825, -t973, -t988, qJDD(4), -t692, -t693, 0, 0, t973, t742, -t990, qJDD(4), t988, -t973, t881, t951, t887, t952; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t783, t1008, t780, -t948, -t803, t948, 0, t655, t652, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t973, t742, -t990, qJDD(4), t988, -t973, -t655, 0, t653, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t947, t804, t1009, t947, t1007, t781, -t652, -t653, 0, 0;];
m_new_reg = t1;
