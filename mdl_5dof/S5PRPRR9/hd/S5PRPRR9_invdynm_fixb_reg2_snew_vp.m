% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PRPRR9
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d4,d5,theta1]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:40
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PRPRR9_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRR9_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRR9_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRR9_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRR9_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRPRR9_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:39:52
% EndTime: 2019-12-31 17:39:57
% DurationCPUTime: 5.76s
% Computational Cost: add. (15613->382), mult. (23940->446), div. (0->0), fcn. (13556->8), ass. (0->241)
t611 = -qJD(2) + qJD(4);
t608 = t611 ^ 2;
t609 = qJDD(2) - qJDD(4);
t620 = sin(qJ(4));
t623 = cos(qJ(4));
t568 = t608 * t623 - t609 * t620;
t621 = sin(qJ(2));
t624 = cos(qJ(2));
t672 = t623 * t609;
t648 = t608 * t620 + t672;
t521 = t568 * t621 - t624 * t648;
t615 = g(3) - qJDD(1);
t549 = pkin(6) * t568 + t615 * t623;
t710 = pkin(6) * t648 + t615 * t620;
t457 = pkin(5) * t521 - t549 * t621 + t624 * t710;
t617 = sin(pkin(8));
t618 = cos(pkin(8));
t518 = t624 * t568 + t621 * t648;
t721 = t518 * t617 + t521 * t618;
t733 = -pkin(5) * t518 + t549 * t624 + t621 * t710;
t741 = qJ(1) * t721 + t457 * t618 - t617 * t733;
t734 = t518 * t618 - t521 * t617;
t740 = -qJ(1) * t734 + t457 * t617 + t618 * t733;
t705 = qJD(2) ^ 2;
t584 = qJDD(2) * t621 + t705 * t624;
t585 = qJDD(2) * t624 - t621 * t705;
t529 = t618 * t584 + t585 * t617;
t551 = pkin(5) * t585 + t615 * t621;
t664 = -pkin(5) * t584 + t624 * t615;
t473 = -qJ(1) * t529 - t551 * t617 + t618 * t664;
t607 = 2 * qJD(3) * qJD(2);
t586 = g(1) * t618 + g(2) * t617;
t662 = g(1) * t617 - t618 * g(2);
t670 = t624 * t586 - t621 * t662;
t666 = t607 - t670;
t667 = qJDD(2) * qJ(3);
t643 = t666 + t667;
t704 = pkin(2) + pkin(3);
t507 = -t704 * t705 + t643;
t616 = qJDD(2) * pkin(2);
t656 = t586 * t621 + t624 * t662;
t650 = -qJDD(3) + t656;
t525 = -t705 * qJ(3) - t616 - t650;
t630 = -qJDD(2) * pkin(3) + t525;
t463 = t507 * t620 - t623 * t630;
t464 = t623 * t507 + t620 * t630;
t427 = t463 * t623 - t464 * t620;
t649 = t463 * t620 + t464 * t623;
t405 = t427 * t621 - t624 * t649;
t724 = t427 * t624 + t621 * t649;
t736 = -t405 * t617 + t618 * t724;
t735 = t405 * t618 + t617 * t724;
t660 = -t621 * t656 - t624 * t670;
t481 = t621 * t670 - t624 * t656;
t690 = t481 * t618;
t730 = -t617 * t660 + t690;
t691 = t481 * t617;
t729 = t618 * t660 + t691;
t658 = -t584 * t617 + t618 * t585;
t706 = qJ(1) * t658 + t551 * t618 + t617 * t664;
t515 = -t705 * pkin(2) + t643;
t470 = t515 * t621 - t525 * t624;
t661 = t624 * t515 + t525 * t621;
t723 = -t470 * t617 + t618 * t661;
t722 = t470 * t618 + t617 * t661;
t709 = -t618 * t586 - t617 * t662;
t708 = -t617 * t586 + t618 * t662;
t703 = pkin(1) * t615;
t702 = pkin(3) * t427;
t454 = -pkin(4) * t608 - pkin(7) * t609 + t464;
t619 = sin(qJ(5));
t622 = cos(qJ(5));
t445 = t454 * t619 - t622 * t615;
t446 = t454 * t622 + t615 * t619;
t419 = t445 * t622 - t446 * t619;
t701 = pkin(4) * t419;
t420 = t445 * t619 + t622 * t446;
t453 = t609 * pkin(4) - t608 * pkin(7) + t463;
t414 = t420 * t623 + t453 * t620;
t699 = pkin(6) * t414;
t698 = pkin(6) * t427;
t697 = pkin(6) * t649;
t696 = pkin(7) * t623;
t694 = qJ(3) * t615;
t693 = t453 * t619;
t692 = t453 * t622;
t593 = t619 * t608 * t622;
t582 = qJDD(5) + t593;
t687 = t582 * t619;
t686 = t582 * t622;
t583 = qJDD(5) - t593;
t685 = t583 * t619;
t684 = t583 * t622;
t613 = t619 ^ 2;
t681 = t608 * t613;
t677 = t617 * t615;
t674 = t618 * t615;
t673 = t619 * t609;
t596 = t622 * t609;
t671 = -pkin(2) * t525 + qJ(3) * t515;
t614 = t622 ^ 2;
t669 = t613 + t614;
t668 = qJD(5) * t611;
t665 = t619 * t668;
t595 = t622 * t668;
t413 = t420 * t620 - t453 * t623;
t663 = -pkin(6) * t413 - t620 * t701;
t655 = t620 * t593;
t654 = t623 * t593;
t511 = -pkin(1) * t584 + t670;
t653 = pkin(2) * t427 + qJ(3) * t649 + t702;
t652 = pkin(3) * t568 + t464;
t651 = -pkin(4) * t453 + pkin(7) * t420;
t647 = -pkin(4) * t623 - pkin(7) * t620 - pkin(3);
t646 = pkin(3) * t648 + t463;
t598 = t614 * t608;
t625 = qJD(5) ^ 2;
t592 = -t598 - t625;
t532 = t592 * t619 + t686;
t432 = -pkin(4) * t532 + t445;
t436 = -pkin(7) * t532 + t693;
t538 = t592 * t622 - t687;
t565 = -t596 - 0.2e1 * t665;
t489 = t538 * t620 + t565 * t623;
t645 = -pkin(6) * t489 - t432 * t620 + t623 * t436;
t590 = -t625 - t681;
t534 = t590 * t622 - t685;
t433 = -pkin(4) * t534 + t446;
t437 = -pkin(7) * t534 + t692;
t540 = -t590 * t619 - t684;
t562 = 0.2e1 * t595 - t673;
t490 = t540 * t620 - t562 * t623;
t644 = -pkin(6) * t490 - t433 * t620 + t623 * t437;
t642 = 0.2e1 * t616 + t650;
t641 = pkin(2) * t568 + qJ(3) * t648 + t652;
t640 = -pkin(3) * t413 - t651;
t639 = pkin(4) * t565 + pkin(7) * t538 - t692;
t638 = -pkin(4) * t562 + pkin(7) * t540 + t693;
t491 = t538 * t623 - t565 * t620;
t637 = -pkin(6) * t491 - t432 * t623 - t436 * t620;
t492 = t540 * t623 + t562 * t620;
t636 = -pkin(6) * t492 - t433 * t623 - t437 * t620;
t635 = pkin(2) * t648 - qJ(3) * t568 + t646;
t566 = t669 * t609;
t571 = t598 + t681;
t634 = pkin(4) * t571 - pkin(7) * t566 + t420;
t633 = -pkin(2) * t413 + qJ(3) * t414 + t640;
t632 = -pkin(3) * t489 - t639;
t631 = -pkin(3) * t490 - t638;
t516 = -t566 * t620 + t571 * t623;
t629 = -pkin(3) * t516 - t634;
t628 = -pkin(2) * t489 + qJ(3) * t491 + t632;
t627 = -pkin(2) * t490 + qJ(3) * t492 + t631;
t520 = -t566 * t623 - t571 * t620;
t626 = -pkin(2) * t516 + qJ(3) * t520 + t629;
t606 = 0.2e1 * t667;
t591 = t598 - t625;
t589 = t625 - t681;
t581 = pkin(1) * t585;
t572 = -t598 + t681;
t564 = -t596 - t665;
t563 = t595 - t673;
t557 = t669 * t668;
t546 = qJDD(5) * t620 + t557 * t623;
t545 = -t623 * qJDD(5) + t557 * t620;
t542 = t563 * t622 - t613 * t668;
t541 = -t564 * t619 - t614 * t668;
t539 = -t589 * t619 + t686;
t537 = t591 * t622 - t685;
t533 = t589 * t622 + t687;
t531 = t591 * t619 + t684;
t527 = (t563 + t595) * t619;
t526 = (-t564 + t665) * t622;
t510 = t581 + t656;
t509 = -t562 * t619 + t565 * t622;
t508 = t562 * t622 + t565 * t619;
t503 = t539 * t623 - t620 * t673;
t502 = t537 * t623 - t620 * t596;
t501 = t539 * t620 + t619 * t672;
t500 = t537 * t620 + t622 * t672;
t498 = t581 + t642;
t497 = t542 * t623 - t655;
t496 = t541 * t623 + t655;
t495 = t542 * t620 + t654;
t494 = t541 * t620 - t654;
t493 = -t511 + t606 + t607;
t484 = t545 * t621 + t546 * t624;
t483 = -t545 * t624 + t546 * t621;
t480 = t509 * t623 + t572 * t620;
t477 = t509 * t620 - t572 * t623;
t476 = pkin(1) * t481;
t475 = pkin(5) * t660 + t703;
t468 = t516 * t621 + t520 * t624;
t467 = -t516 * t624 + t520 * t621;
t462 = t501 * t621 + t503 * t624;
t461 = t500 * t621 + t502 * t624;
t460 = -t501 * t624 + t503 * t621;
t459 = -t500 * t624 + t502 * t621;
t452 = t495 * t621 + t497 * t624;
t451 = t494 * t621 + t496 * t624;
t450 = -t495 * t624 + t497 * t621;
t449 = -t494 * t624 + t496 * t621;
t448 = -pkin(5) * t470 + (-pkin(2) * t621 + qJ(3) * t624) * t615;
t447 = pkin(5) * t661 + (pkin(2) * t624 + qJ(3) * t621 + pkin(1)) * t615;
t443 = t490 * t621 + t492 * t624;
t442 = t489 * t621 + t491 * t624;
t441 = -t490 * t624 + t492 * t621;
t440 = -t489 * t624 + t491 * t621;
t439 = t477 * t621 + t480 * t624;
t438 = -t477 * t624 + t480 * t621;
t431 = pkin(1) * t470 + t671;
t430 = -pkin(1) * t521 + t635;
t429 = pkin(1) * t518 + t641;
t422 = t694 + t698;
t421 = t704 * t615 - t697;
t416 = -pkin(6) * t516 + t419 * t623;
t415 = pkin(6) * t520 + t419 * t620;
t410 = qJ(3) * t534 + t644;
t409 = qJ(3) * t532 + t645;
t404 = t704 * t534 + t636;
t403 = t704 * t532 + t637;
t402 = pkin(1) * t441 + t627;
t401 = pkin(1) * t440 + t628;
t400 = pkin(1) * t467 + t626;
t399 = -pkin(5) * t467 + t415 * t621 + t416 * t624;
t398 = pkin(5) * t468 - t415 * t624 + t416 * t621;
t397 = t413 * t621 + t414 * t624;
t396 = -t413 * t624 + t414 * t621;
t395 = -pkin(5) * t724 - t421 * t621 + t422 * t624;
t394 = -pkin(5) * t405 + t421 * t624 + t422 * t621 + t703;
t393 = -pkin(5) * t441 - t404 * t621 + t410 * t624;
t392 = -pkin(5) * t440 - t403 * t621 + t409 * t624;
t391 = pkin(1) * t534 + pkin(5) * t443 + t404 * t624 + t410 * t621;
t390 = pkin(1) * t532 + pkin(5) * t442 + t403 * t624 + t409 * t621;
t389 = pkin(1) * t724 + t653;
t388 = -(qJ(3) - t696) * t419 + t663;
t387 = -t699 - (pkin(2) - t647) * t419;
t386 = pkin(1) * t396 + t633;
t385 = -pkin(5) * t396 - t387 * t621 + t388 * t624;
t384 = -pkin(1) * t419 + pkin(5) * t397 + t387 * t624 + t388 * t621;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t677, -t674, -t708, -qJ(1) * t708, 0, 0, t658, 0, -t529, 0, -t706, -t473, t730, pkin(5) * t690 + qJ(1) * t730 - t617 * t475, 0, t658, 0, 0, t529, 0, -t706, -t722, t473, -qJ(1) * t722 - t617 * t447 + t618 * t448, 0, 0, t721, 0, -t734, 0, t741, t740, t736, -qJ(1) * t736 - t617 * t394 + t618 * t395, -t450 * t617 + t452 * t618, -t438 * t617 + t439 * t618, -t460 * t617 + t462 * t618, -t449 * t617 + t451 * t618, -t459 * t617 + t461 * t618, -t483 * t617 + t484 * t618, t618 * t392 - t617 * t390 - qJ(1) * (t440 * t618 + t442 * t617), t618 * t393 - t617 * t391 - qJ(1) * (t441 * t618 + t443 * t617), t618 * t399 - t617 * t398 - qJ(1) * (t467 * t618 + t468 * t617), t618 * t385 - t617 * t384 - qJ(1) * (t396 * t618 + t397 * t617); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t674, -t677, t709, qJ(1) * t709, 0, 0, t529, 0, t658, 0, t473, -t706, t729, pkin(5) * t691 + qJ(1) * t729 + t618 * t475, 0, t529, 0, 0, -t658, 0, t473, t723, t706, qJ(1) * t723 + t618 * t447 + t617 * t448, 0, 0, -t734, 0, -t721, 0, t740, -t741, t735, -qJ(1) * t735 + t618 * t394 + t617 * t395, t450 * t618 + t452 * t617, t438 * t618 + t439 * t617, t460 * t618 + t462 * t617, t449 * t618 + t451 * t617, t459 * t618 + t461 * t617, t483 * t618 + t484 * t617, t617 * t392 + t618 * t390 + qJ(1) * (-t440 * t617 + t442 * t618), t617 * t393 + t618 * t391 + qJ(1) * (-t441 * t617 + t443 * t618), t617 * t399 + t618 * t398 + qJ(1) * (-t467 * t617 + t468 * t618), t617 * t385 + t618 * t384 + qJ(1) * (-t396 * t617 + t397 * t618); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t662, t586, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t510, t511, 0, -t476, 0, 0, 0, qJDD(2), 0, 0, t498, 0, t493, t431, 0, 0, 0, 0, 0, t609, t430, t429, 0, t389, -t527, -t508, -t533, t526, -t531, 0, t401, t402, t400, t386; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t615, -t662, 0, 0, 0, t585, 0, -t584, 0, -t551, -t664, t481, pkin(5) * t481, 0, t585, 0, 0, t584, 0, -t551, -t470, t664, t448, 0, 0, t521, 0, -t518, 0, t457, t733, t724, t395, t452, t439, t462, t451, t461, t484, t392, t393, t399, t385; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t615, 0, -t586, 0, 0, 0, t584, 0, t585, 0, t664, -t551, t660, t475, 0, t584, 0, 0, -t585, 0, t664, t661, t551, t447, 0, 0, -t518, 0, -t521, 0, t733, -t457, t405, t394, t450, t438, t460, t449, t459, t483, t390, t391, t398, t384; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t662, t586, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t510, t511, 0, -t476, 0, 0, 0, qJDD(2), 0, 0, t498, 0, t493, t431, 0, 0, 0, 0, 0, t609, t430, t429, 0, t389, -t527, -t508, -t533, t526, -t531, 0, t401, t402, t400, t386; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t705, 0, 0, -t615, -t656, 0, 0, qJDD(2), 0, 0, t705, 0, 0, t525, t615, t694, 0, 0, -t648, 0, -t568, 0, t710, t549, t427, t422, t497, t480, t503, t496, t502, t546, t409, t410, t416, t388; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t705, 0, qJDD(2), 0, t615, 0, -t670, 0, 0, t705, 0, 0, -qJDD(2), 0, t615, t515, 0, pkin(2) * t615, 0, 0, -t568, 0, t648, 0, t549, -t710, -t649, t421, -t495, -t477, -t501, -t494, -t500, -t545, t403, t404, -t415, t387; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t656, t670, 0, 0, 0, 0, 0, qJDD(2), 0, 0, t642, 0, t606 + t666, t671, 0, 0, 0, 0, 0, t609, t635, t641, 0, t653, -t527, -t508, -t533, t526, -t531, 0, t628, t627, t626, t633; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, 0, t705, 0, 0, t525, t615, 0, 0, 0, -t648, 0, -t568, 0, t710, t549, t427, t698, t497, t480, t503, t496, t502, t546, t645, t644, t416, t419 * t696 + t663; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, 0, -t525, 0, t515, 0, 0, 0, 0, 0, 0, t609, t646, t652, 0, t702, -t527, -t508, -t533, t526, -t531, 0, t632, t631, t629, t640; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t705, 0, 0, qJDD(2), 0, -t615, -t515, 0, 0, 0, 0, t568, 0, -t648, 0, -t549, t710, t649, -pkin(3) * t615 + t697, t495, t477, t501, t494, t500, t545, -pkin(3) * t532 - t637, -pkin(3) * t534 - t636, t415, -t419 * t647 + t699; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t609, 0, -t608, 0, 0, t615, t463, 0, t542, t509, t539, t541, t537, t557, t436, t437, t419, pkin(7) * t419; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t608, 0, -t609, 0, -t615, 0, t464, 0, t593, -t572, t673, -t593, t596, -qJDD(5), t432, t433, 0, t701; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t609, -t463, -t464, 0, 0, t527, t508, t533, -t526, t531, 0, t639, t638, t634, t651; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t563, t565, t582, -t595, t591, t595, 0, t453, t445, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t665, t562, t589, t564, t583, -t665, -t453, 0, t446, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t593, t572, -t673, t593, -t596, qJDD(5), -t445, -t446, 0, 0;];
m_new_reg = t1;
