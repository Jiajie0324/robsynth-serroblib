% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRPRR9
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d4,d5,theta1]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:40
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRPRR9_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRR9_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRR9_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRR9_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRR9_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRPRR9_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:39:57
% EndTime: 2019-12-31 17:39:59
% DurationCPUTime: 1.31s
% Computational Cost: add. (2740->149), mult. (4266->157), div. (0->0), fcn. (2506->8), ass. (0->85)
t833 = sin(qJ(2));
t836 = cos(qJ(2));
t822 = -qJD(2) + qJD(4);
t820 = t822 ^ 2;
t821 = qJDD(2) - qJDD(4);
t832 = sin(qJ(4));
t835 = cos(qJ(4));
t840 = t820 * t832 + t821 * t835;
t842 = -t820 * t835 + t821 * t832;
t778 = t833 * t840 - t836 * t842;
t829 = sin(pkin(8));
t830 = cos(pkin(8));
t849 = t833 * t842 + t836 * t840;
t854 = -t778 * t829 + t830 * t849;
t853 = t778 * t830 + t829 * t849;
t838 = qJD(2) ^ 2;
t807 = qJDD(2) * t833 + t836 * t838;
t808 = qJDD(2) * t836 - t833 * t838;
t784 = -t829 * t807 + t830 * t808;
t850 = t830 * t807 + t829 * t808;
t831 = sin(qJ(5));
t846 = t831 * t821;
t834 = cos(qJ(5));
t845 = t834 * t821;
t809 = g(1) * t829 - g(2) * t830;
t810 = -g(1) * t830 - g(2) * t829;
t791 = t809 * t833 + t810 * t836;
t841 = qJDD(2) * qJ(3) + (2 * qJD(3) * qJD(2)) + t791;
t775 = (-pkin(2) - pkin(3)) * t838 + t841;
t790 = t809 * t836 - t810 * t833;
t783 = -qJDD(2) * pkin(2) - qJ(3) * t838 + qJDD(3) - t790;
t839 = -qJDD(2) * pkin(3) + t783;
t761 = t775 * t835 + t832 * t839;
t825 = t831 ^ 2;
t826 = t834 ^ 2;
t844 = t825 + t826;
t843 = qJD(5) * t822;
t760 = -t775 * t832 + t835 * t839;
t837 = qJD(5) ^ 2;
t827 = g(3) - qJDD(1);
t813 = t831 * t820 * t834;
t812 = -t820 * t826 - t837;
t811 = -t820 * t825 - t837;
t806 = -qJDD(5) + t813;
t805 = qJDD(5) + t813;
t799 = t844 * t820;
t794 = t844 * t821;
t793 = -0.2e1 * t831 * t843 - t845;
t792 = 0.2e1 * t834 * t843 - t846;
t789 = t806 * t834 - t811 * t831;
t788 = -t805 * t831 + t812 * t834;
t786 = t806 * t831 + t811 * t834;
t785 = t805 * t834 + t812 * t831;
t780 = -t794 * t835 - t799 * t832;
t777 = -t794 * t832 + t799 * t835;
t776 = -pkin(2) * t838 + t841;
t771 = t789 * t835 + t792 * t832;
t770 = t788 * t835 - t793 * t832;
t769 = t789 * t832 - t792 * t835;
t768 = t788 * t832 + t793 * t835;
t767 = -t790 * t833 + t791 * t836;
t766 = t790 * t836 + t791 * t833;
t765 = t776 * t836 + t783 * t833;
t764 = t776 * t833 - t783 * t836;
t763 = t777 * t833 + t780 * t836;
t762 = -t777 * t836 + t780 * t833;
t759 = -pkin(4) * t820 - pkin(7) * t821 + t761;
t758 = pkin(4) * t821 - pkin(7) * t820 - t760;
t757 = t759 * t834 + t827 * t831;
t756 = -t759 * t831 + t827 * t834;
t755 = t769 * t833 + t771 * t836;
t754 = t768 * t833 + t770 * t836;
t753 = -t769 * t836 + t771 * t833;
t752 = -t768 * t836 + t770 * t833;
t751 = -t760 * t832 + t761 * t835;
t750 = t760 * t835 + t761 * t832;
t749 = -t756 * t831 + t757 * t834;
t748 = t756 * t834 + t757 * t831;
t747 = t749 * t835 + t758 * t832;
t746 = t749 * t832 - t758 * t835;
t745 = t750 * t833 + t751 * t836;
t744 = -t750 * t836 + t751 * t833;
t743 = t746 * t833 + t747 * t836;
t742 = -t746 * t836 + t747 * t833;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t809 * t829 + t810 * t830, 0, 0, 0, 0, 0, 0, -t850, -t784, 0, -t766 * t829 + t767 * t830, 0, 0, 0, 0, 0, 0, -t850, 0, t784, -t764 * t829 + t765 * t830, 0, 0, 0, 0, 0, 0, -t853, t854, 0, -t744 * t829 + t745 * t830, 0, 0, 0, 0, 0, 0, -t752 * t829 + t754 * t830, -t753 * t829 + t755 * t830, -t762 * t829 + t763 * t830, -t742 * t829 + t743 * t830; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t809 * t830 + t810 * t829, 0, 0, 0, 0, 0, 0, t784, -t850, 0, t766 * t830 + t767 * t829, 0, 0, 0, 0, 0, 0, t784, 0, t850, t764 * t830 + t765 * t829, 0, 0, 0, 0, 0, 0, t854, t853, 0, t744 * t830 + t745 * t829, 0, 0, 0, 0, 0, 0, t752 * t830 + t754 * t829, t753 * t830 + t755 * t829, t762 * t830 + t763 * t829, t742 * t830 + t743 * t829; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t827, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t827, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t827, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t827, 0, 0, 0, 0, 0, 0, -t785, -t786, 0, -t748; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t810, 0, 0, 0, 0, 0, 0, -t807, -t808, 0, t767, 0, 0, 0, 0, 0, 0, -t807, 0, t808, t765, 0, 0, 0, 0, 0, 0, -t778, t849, 0, t745, 0, 0, 0, 0, 0, 0, t754, t755, t763, t743; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t809, 0, 0, 0, 0, 0, 0, t808, -t807, 0, t766, 0, 0, 0, 0, 0, 0, t808, 0, t807, t764, 0, 0, 0, 0, 0, 0, t849, t778, 0, t744, 0, 0, 0, 0, 0, 0, t752, t753, t762, t742; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t827, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t827, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t827, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t827, 0, 0, 0, 0, 0, 0, -t785, -t786, 0, -t748; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t838, -qJDD(2), 0, t791, 0, 0, 0, 0, 0, 0, -t838, 0, qJDD(2), t776, 0, 0, 0, 0, 0, 0, t842, t840, 0, t751, 0, 0, 0, 0, 0, 0, t770, t771, t780, t747; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t838, 0, t790, 0, 0, 0, 0, 0, 0, qJDD(2), 0, t838, -t783, 0, 0, 0, 0, 0, 0, t840, -t842, 0, -t750, 0, 0, 0, 0, 0, 0, -t768, -t769, -t777, -t746; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t827, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t827, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t827, 0, 0, 0, 0, 0, 0, -t785, -t786, 0, -t748; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t838, 0, qJDD(2), t776, 0, 0, 0, 0, 0, 0, t842, t840, 0, t751, 0, 0, 0, 0, 0, 0, t770, t771, t780, t747; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t827, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t827, 0, 0, 0, 0, 0, 0, -t785, -t786, 0, -t748; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(2), 0, -t838, t783, 0, 0, 0, 0, 0, 0, -t840, t842, 0, t750, 0, 0, 0, 0, 0, 0, t768, t769, t777, t746; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t820, t821, 0, t761, 0, 0, 0, 0, 0, 0, t788, t789, -t794, t749; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t821, -t820, 0, t760, 0, 0, 0, 0, 0, 0, t793, -t792, t799, -t758; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t827, 0, 0, 0, 0, 0, 0, t785, t786, 0, t748; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t812, t806, -t845, t757; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t805, t811, t846, t756; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t793, t792, -t799, t758;];
f_new_reg = t1;
