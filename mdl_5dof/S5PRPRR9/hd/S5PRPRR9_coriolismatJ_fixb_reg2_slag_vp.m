% Calculate inertial parameters regressor of coriolis matrix for
% S5PRPRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d4,d5,theta1]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:40
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PRPRR9_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRR9_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRR9_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRPRR9_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:39:49
% EndTime: 2019-12-31 17:39:51
% DurationCPUTime: 0.87s
% Computational Cost: add. (588->100), mult. (1003->134), div. (0->0), fcn. (726->4), ass. (0->72)
t56 = sin(qJ(5));
t54 = t56 ^ 2;
t58 = cos(qJ(5));
t55 = t58 ^ 2;
t91 = t54 + t55;
t57 = sin(qJ(4));
t59 = cos(qJ(4));
t97 = -pkin(2) - pkin(3);
t38 = t59 * qJ(3) + t57 * t97;
t74 = qJD(2) - qJD(4);
t105 = t74 * t38;
t45 = t55 - t54;
t104 = t74 * t45;
t36 = -pkin(7) + t38;
t37 = t57 * qJ(3) - t59 * t97;
t68 = t55 / 0.2e1 + t54 / 0.2e1;
t66 = t68 * pkin(7);
t35 = pkin(4) + t37;
t73 = -pkin(4) / 0.2e1 - t35 / 0.2e1;
t1 = (t68 * t37 + t73) * t57 + (t38 / 0.2e1 - t68 * t36 + t66) * t59;
t15 = (-0.1e1 + t91) * t59 * t57;
t14 = t15 * qJD(3);
t103 = t1 * qJD(2) - t14;
t102 = t35 + t37;
t34 = t91 * t59;
t83 = t34 * qJD(2);
t100 = -t34 * qJD(4) + t83;
t96 = pkin(4) * t56;
t95 = t57 * pkin(4);
t94 = t35 * t57;
t93 = t37 * t57;
t92 = t38 * t59;
t12 = t91 * t37;
t3 = -t36 * t12 + t35 * t38;
t89 = t3 * qJD(2);
t4 = t36 * t34 + t94;
t88 = t4 * qJD(2);
t87 = qJD(2) * t35;
t86 = qJD(2) * t58;
t85 = qJD(4) * t58;
t13 = t92 + t93;
t84 = t13 * qJD(2);
t82 = t34 * qJD(3);
t80 = t45 * qJD(5);
t52 = t56 * qJD(5);
t79 = t57 * qJD(2);
t78 = t57 * qJD(3);
t53 = t58 * qJD(5);
t77 = t59 * qJD(2);
t76 = t59 * qJD(3);
t75 = qJ(3) * qJD(2);
t72 = t56 * t79;
t71 = t58 * t79;
t39 = t74 * t57;
t67 = t74 * t58;
t40 = t74 * t59;
t65 = t37 / 0.2e1 + t73;
t64 = -t76 + t87;
t63 = t38 * qJD(2) + t78;
t62 = t38 * qJD(4) + t78;
t6 = t65 * t56;
t61 = t6 * qJD(2) + qJD(4) * t96;
t7 = t65 * t58;
t60 = pkin(4) * t85 + t7 * qJD(2);
t47 = t56 * t53;
t31 = (-t85 + t86) * t56;
t17 = -t59 * t52 + t57 * t67;
t16 = t56 * t39 + t59 * t53;
t9 = (pkin(4) + t102) * t58 / 0.2e1;
t8 = t96 / 0.2e1 + t102 * t56 / 0.2e1;
t2 = -t92 / 0.2e1 + t94 / 0.2e1 - t95 / 0.2e1 + t59 * t66 + t91 * (-t93 / 0.2e1 + t36 * t59 / 0.2e1);
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52, t53, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3), qJ(3) * qJD(3), 0, 0, 0, 0, 0, 0, t62, -t37 * qJD(4) + t76, 0, t13 * qJD(3), t47, t80, 0, -t47, 0, 0, -t35 * t52 + t58 * t62, -t35 * t53 - t56 * t62, t12 * qJD(4) - t82, t4 * qJD(3) + t3 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), t75, 0, 0, 0, 0, 0, 0, t79, t77, 0, t84, 0, 0, 0, 0, 0, 0, t71, -t72, -t83, t2 * qJD(4) + t14 + t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105, -t74 * t37, 0, 0, -t47, -t80, 0, t47, 0, 0, t8 * qJD(5) + t38 * t67, t9 * qJD(5) - t56 * t105, t74 * t12, t89 + t2 * qJD(3) + (-t38 * pkin(4) - pkin(7) * t12) * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, t104, -t53, -t31, t52, 0, t8 * qJD(4) - t36 * t53 - t56 * t87, t9 * qJD(4) - t35 * t86 + t36 * t52, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(2), -t75, 0, 0, 0, 0, 0, 0, -t39, -t40, 0, -t84, 0, 0, 0, 0, 0, 0, -t17, t16, t100, -t1 * qJD(4) - t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, t40, 0, 0, 0, 0, 0, 0, 0, 0, t17, -t16, -t100, (pkin(7) * t34 - t95) * qJD(4) - t103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40 * t56 - t57 * t53, t40 * t58 + t57 * t52, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t63, t37 * qJD(2) - t76, 0, 0, -t47, -t80, 0, t47, 0, 0, -t6 * qJD(5) - t58 * t63, -t7 * qJD(5) + t56 * t63, -t12 * qJD(2) + t82, t1 * qJD(3) - t89; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t79, -t77, 0, 0, 0, 0, 0, 0, 0, 0, -t71, t72, t83, t103; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t47, t80, 0, -t47, 0, 0, -pkin(4) * t52, -pkin(4) * t53, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, -t104, t53, t31, -t52, 0, -pkin(7) * t53 - t61, pkin(7) * t52 - t60, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, -t104, 0, t31, 0, 0, t6 * qJD(4) + t56 * t64, t7 * qJD(4) + t58 * t64, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t56 * t77, -t58 * t77, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, t104, 0, -t31, 0, 0, t61, t60, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t5;
