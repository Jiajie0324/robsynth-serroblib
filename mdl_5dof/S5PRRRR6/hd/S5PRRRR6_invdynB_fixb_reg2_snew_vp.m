% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d4,d5,theta1]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:10
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRRRR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR6_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR6_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRRRR6_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:10:18
% EndTime: 2019-12-05 17:10:31
% DurationCPUTime: 8.78s
% Computational Cost: add. (33417->499), mult. (44051->764), div. (0->0), fcn. (30040->10), ass. (0->342)
t512 = qJD(2) + qJD(3);
t508 = t512 ^ 2;
t524 = cos(qJ(3));
t510 = qJDD(2) + qJDD(3);
t520 = sin(qJ(3));
t560 = t520 * t510;
t472 = t524 * t508 + t560;
t551 = t524 * t510;
t475 = t520 * t508 - t551;
t521 = sin(qJ(2));
t525 = cos(qJ(2));
t420 = t521 * t472 + t525 * t475;
t516 = sin(pkin(9));
t590 = t516 * t420;
t517 = cos(pkin(9));
t589 = t517 * t420;
t491 = t516 * g(1) - t517 * g(2);
t429 = pkin(6) * t472 - t524 * t491;
t584 = pkin(6) * t475 - t520 * t491;
t344 = pkin(5) * t420 + t521 * t429 + t525 * t584;
t530 = t525 * t472 - t521 * t475;
t345 = pkin(5) * t530 + t525 * t429 - t521 * t584;
t515 = g(3) - qJDD(1);
t531 = t517 * g(1) + t516 * g(2);
t457 = -t521 * t515 - t525 * t531;
t578 = qJD(2) ^ 2;
t455 = -t578 * pkin(2) + t457;
t456 = t525 * t515 - t521 * t531;
t527 = qJDD(2) * pkin(2) - t456;
t386 = t520 * t455 - t524 * t527;
t387 = t524 * t455 + t520 * t527;
t536 = t520 * t386 + t524 * t387;
t331 = t524 * t386 - t520 * t387;
t550 = t525 * t331;
t287 = -t521 * t536 + t550;
t559 = t521 * t331;
t288 = t525 * t536 + t559;
t518 = sin(qJ(5));
t522 = cos(qJ(5));
t523 = cos(qJ(4));
t519 = sin(qJ(4));
t575 = t512 * t519;
t460 = -t522 * t523 * t512 + t518 * t575;
t462 = (t518 * t523 + t519 * t522) * t512;
t412 = t462 * t460;
t546 = qJDD(4) + qJDD(5);
t581 = -t412 + t546;
t586 = t518 * t581;
t585 = t522 * t581;
t511 = qJD(4) + qJD(5);
t453 = t511 * t460;
t548 = qJD(4) * t512;
t542 = t523 * t548;
t562 = t519 * t510;
t468 = t542 + t562;
t500 = t523 * t510;
t543 = t519 * t548;
t469 = t500 - t543;
t528 = t460 * qJD(5) - t522 * t468 - t518 * t469;
t580 = -t453 - t528;
t480 = t517 * t491;
t579 = t516 * t531 - t480;
t535 = t518 * t468 - t522 * t469;
t359 = (qJD(5) - t511) * t462 + t535;
t458 = t460 ^ 2;
t459 = t462 ^ 2;
t507 = t511 ^ 2;
t577 = t511 * t518;
t576 = t511 * t522;
t513 = t519 ^ 2;
t574 = t513 * t508;
t514 = t523 ^ 2;
t501 = t514 * t508;
t490 = t525 * qJDD(2) - t521 * t578;
t573 = t516 * t490;
t572 = t516 * t491;
t571 = t516 * t515;
t570 = t517 * t490;
t569 = t517 * t515;
t377 = -t510 * pkin(3) - t508 * pkin(7) + t386;
t487 = qJD(4) * pkin(4) - pkin(8) * t575;
t343 = -t469 * pkin(4) - pkin(8) * t501 + t487 * t575 + t377;
t568 = t518 * t343;
t403 = t412 + t546;
t567 = t518 * t403;
t378 = -t508 * pkin(3) + t510 * pkin(7) + t387;
t364 = t519 * t378 + t523 * t491;
t496 = t519 * t508 * t523;
t485 = qJDD(4) + t496;
t327 = (-t468 + t542) * pkin(8) + t485 * pkin(4) - t364;
t365 = t523 * t378 - t519 * t491;
t328 = -pkin(4) * t501 + t469 * pkin(8) - qJD(4) * t487 + t365;
t282 = -t522 * t327 + t518 * t328;
t283 = t518 * t327 + t522 * t328;
t244 = -t522 * t282 + t518 * t283;
t566 = t519 * t244;
t565 = t519 * t377;
t564 = t519 * t485;
t486 = qJDD(4) - t496;
t563 = t519 * t486;
t558 = t522 * t343;
t557 = t522 * t403;
t556 = t523 * t244;
t555 = t523 * t377;
t554 = t523 * t485;
t553 = t523 * t486;
t549 = t513 + t514;
t545 = t520 * t412;
t544 = t524 * t412;
t309 = t519 * t364 + t523 * t365;
t471 = t549 * t510;
t476 = t501 + t574;
t415 = t520 * t471 + t524 * t476;
t418 = t524 * t471 - t520 * t476;
t366 = t525 * t415 + t521 * t418;
t367 = -t521 * t415 + t525 * t418;
t541 = -pkin(1) * t366 - pkin(2) * t415 - pkin(3) * t476 - pkin(7) * t471 + qJ(1) * t367 - t309;
t540 = pkin(1) * t530 + pkin(2) * t472 + qJ(1) * t420 + t387;
t539 = pkin(1) * t420 + pkin(2) * t475 - qJ(1) * t530 + t386;
t489 = t521 * qJDD(2) + t525 * t578;
t538 = -pkin(1) * t489 + qJ(1) * t490 - t457;
t537 = pkin(1) * t490 + qJ(1) * t489 - t456;
t245 = t518 * t282 + t522 * t283;
t396 = t521 * t456 + t525 * t457;
t442 = -t517 * t531 - t572;
t533 = t520 * t496;
t532 = t524 * t496;
t449 = pkin(5) * t489 - t525 * t491;
t448 = -pkin(5) * t490 - t521 * t491;
t308 = t523 * t364 - t519 * t365;
t395 = t525 * t456 - t521 * t457;
t526 = qJD(4) ^ 2;
t495 = -t501 - t526;
t494 = t501 - t526;
t493 = -t526 - t574;
t492 = t526 - t574;
t488 = pkin(1) * t491;
t479 = t517 * t489;
t478 = t516 * t489;
t477 = t501 - t574;
t470 = t500 - 0.2e1 * t543;
t467 = 0.2e1 * t542 + t562;
t466 = t549 * t548;
t451 = -t459 + t507;
t450 = t458 - t507;
t447 = t520 * qJDD(4) + t524 * t466;
t446 = -t524 * qJDD(4) + t520 * t466;
t440 = t523 * t468 - t513 * t548;
t439 = -t519 * t469 - t514 * t548;
t438 = -t459 - t507;
t437 = -t519 * t493 - t553;
t436 = -t519 * t492 + t554;
t435 = t523 * t495 - t564;
t434 = t523 * t494 - t563;
t433 = t523 * t493 - t563;
t432 = -t523 * t492 - t564;
t431 = t519 * t495 + t554;
t430 = -t519 * t494 - t553;
t425 = (-t468 - t542) * t519;
t424 = (-t469 + t543) * t523;
t414 = -t519 * t467 + t523 * t470;
t413 = -t523 * t467 - t519 * t470;
t411 = t517 * t530;
t410 = t516 * t530;
t409 = -t459 + t458;
t408 = t524 * t436 + t519 * t560;
t407 = t524 * t434 + t520 * t500;
t406 = t520 * t436 - t519 * t551;
t405 = t520 * t434 - t523 * t551;
t401 = t524 * t440 - t533;
t400 = t524 * t439 + t533;
t399 = t520 * t440 + t532;
t398 = t520 * t439 - t532;
t397 = -t507 - t458;
t393 = t524 * t437 + t520 * t467;
t392 = t524 * t435 - t520 * t470;
t391 = t520 * t437 - t524 * t467;
t390 = t520 * t435 + t524 * t470;
t389 = (-t460 * t522 + t462 * t518) * t511;
t388 = (-t460 * t518 - t462 * t522) * t511;
t384 = -t521 * t446 + t525 * t447;
t383 = -t458 - t459;
t382 = t524 * t414 - t520 * t477;
t381 = t520 * t414 + t524 * t477;
t379 = -t462 * qJD(5) - t535;
t376 = t517 * t396 - t572;
t375 = t516 * t396 + t480;
t373 = t522 * t450 - t567;
t372 = -t518 * t451 + t585;
t371 = t518 * t450 + t557;
t370 = t522 * t451 + t586;
t369 = -t518 * t438 - t557;
t368 = t522 * t438 - t567;
t363 = -t453 + t528;
t358 = (qJD(5) + t511) * t462 + t535;
t357 = -t462 * t577 - t522 * t528;
t356 = t462 * t576 - t518 * t528;
t355 = -t518 * t379 + t460 * t576;
t354 = t522 * t379 + t460 * t577;
t353 = -t521 * t406 + t525 * t408;
t352 = -t521 * t405 + t525 * t407;
t351 = t522 * t397 - t586;
t350 = t518 * t397 + t585;
t349 = -t521 * t399 + t525 * t401;
t348 = -t521 * t398 + t525 * t400;
t347 = -pkin(7) * t433 + t555;
t346 = -pkin(7) * t431 + t565;
t340 = -t521 * t391 + t525 * t393;
t339 = -t521 * t390 + t525 * t392;
t338 = t525 * t391 + t521 * t393;
t337 = t525 * t390 + t521 * t392;
t336 = -pkin(3) * t433 + t365;
t335 = -pkin(3) * t431 + t364;
t334 = -t519 * t388 + t523 * t389;
t333 = -t523 * t388 - t519 * t389;
t323 = t524 * t334 + t520 * t546;
t322 = t520 * t334 - t524 * t546;
t321 = pkin(2) * t491 + pkin(6) * t536;
t320 = -t521 * t381 + t525 * t382;
t319 = t517 * t340 + t516 * t433;
t318 = t517 * t339 + t516 * t431;
t317 = t516 * t340 - t517 * t433;
t316 = t516 * t339 - t517 * t431;
t315 = -t519 * t371 + t523 * t373;
t314 = -t519 * t370 + t523 * t372;
t313 = -t523 * t371 - t519 * t373;
t312 = -t523 * t370 - t519 * t372;
t311 = -t519 * t368 + t523 * t369;
t310 = t523 * t368 + t519 * t369;
t306 = -t359 * t522 - t518 * t363;
t305 = -t522 * t358 - t518 * t580;
t304 = -t359 * t518 + t522 * t363;
t303 = -t518 * t358 + t522 * t580;
t302 = -t519 * t356 + t523 * t357;
t301 = -t519 * t354 + t523 * t355;
t300 = -t523 * t356 - t519 * t357;
t299 = -t523 * t354 - t519 * t355;
t298 = -pkin(8) * t368 + t558;
t297 = -t519 * t350 + t523 * t351;
t296 = t523 * t350 + t519 * t351;
t295 = -pkin(8) * t350 + t568;
t294 = -pkin(6) * t415 + t524 * t308;
t293 = pkin(6) * t418 + t520 * t308;
t292 = t524 * t302 + t545;
t291 = t524 * t301 - t545;
t290 = t520 * t302 - t544;
t289 = t520 * t301 + t544;
t285 = t524 * t309 + t520 * t377;
t284 = t520 * t309 - t524 * t377;
t281 = t524 * t315 - t520 * t359;
t280 = t524 * t314 - t520 * t363;
t279 = t520 * t315 + t524 * t359;
t278 = t520 * t314 + t524 * t363;
t276 = t517 * t288 - t572;
t275 = t516 * t288 + t480;
t274 = -t521 * t322 + t525 * t323;
t273 = t524 * t311 + t520 * t580;
t272 = t520 * t311 - t524 * t580;
t271 = -pkin(6) * t391 - t520 * t336 + t524 * t347;
t270 = -pkin(6) * t390 - t520 * t335 + t524 * t346;
t269 = -pkin(4) * t580 + pkin(8) * t369 + t568;
t268 = -pkin(1) * t338 - pkin(2) * t391 + pkin(3) * t467 - pkin(7) * t437 - t565;
t267 = -pkin(1) * t337 - pkin(2) * t390 - pkin(3) * t470 - pkin(7) * t435 + t555;
t266 = t524 * t297 + t520 * t358;
t265 = t520 * t297 - t524 * t358;
t264 = -pkin(4) * t358 + pkin(8) * t351 - t558;
t263 = -pkin(2) * t433 + pkin(6) * t393 + t524 * t336 + t520 * t347;
t262 = -pkin(2) * t431 + pkin(6) * t392 + t524 * t335 + t520 * t346;
t260 = pkin(1) * t287 + pkin(2) * t331;
t259 = -t519 * t304 + t523 * t306;
t258 = -t519 * t303 + t523 * t305;
t257 = t523 * t304 + t519 * t306;
t256 = -t523 * t303 - t519 * t305;
t255 = t524 * t258 - t520 * t409;
t254 = t520 * t258 + t524 * t409;
t253 = t524 * t259 + t520 * t383;
t252 = t520 * t259 - t524 * t383;
t251 = -t521 * t290 + t525 * t292;
t250 = -t521 * t289 + t525 * t291;
t249 = -t521 * t284 + t525 * t285;
t248 = t525 * t284 + t521 * t285;
t247 = pkin(5) * t287 + pkin(6) * t550 - t521 * t321;
t246 = -pkin(3) * t310 - pkin(4) * t368 + t283;
t243 = -t521 * t279 + t525 * t281;
t242 = -t521 * t278 + t525 * t280;
t241 = -pkin(5) * t366 - t521 * t293 + t525 * t294;
t240 = -t521 * t272 + t525 * t273;
t239 = t525 * t272 + t521 * t273;
t238 = -pkin(3) * t257 - pkin(4) * t304;
t237 = -pkin(3) * t296 - pkin(4) * t350 + t282;
t236 = -t521 * t265 + t525 * t266;
t235 = t525 * t265 + t521 * t266;
t234 = -pkin(6) * t284 - (pkin(3) * t520 - pkin(7) * t524) * t308;
t233 = -pkin(4) * t343 + pkin(8) * t245;
t232 = -pkin(7) * t310 - t519 * t269 + t523 * t298;
t231 = t517 * t249 - t308 * t516;
t230 = t516 * t249 + t308 * t517;
t229 = -pkin(8) * t304 - t244;
t228 = -pkin(5) * t338 - t521 * t263 + t525 * t271;
t227 = -pkin(5) * t337 - t521 * t262 + t525 * t270;
t226 = t517 * t240 + t516 * t310;
t225 = t516 * t240 - t517 * t310;
t224 = -pkin(7) * t296 - t519 * t264 + t523 * t295;
t223 = -pkin(4) * t383 + pkin(8) * t306 + t245;
t222 = pkin(6) * t285 - (-pkin(3) * t524 - pkin(7) * t520 - pkin(2)) * t308;
t221 = t517 * t236 + t516 * t296;
t220 = t516 * t236 - t517 * t296;
t219 = -t521 * t254 + t525 * t255;
t218 = -t521 * t252 + t525 * t253;
t217 = t525 * t252 + t521 * t253;
t216 = -pkin(1) * t248 - pkin(2) * t284 + pkin(3) * t377 - pkin(7) * t309;
t215 = t523 * t245 - t566;
t214 = t519 * t245 + t556;
t213 = t524 * t215 + t520 * t343;
t212 = t520 * t215 - t524 * t343;
t211 = t517 * t218 + t516 * t257;
t210 = t516 * t218 - t517 * t257;
t209 = -pkin(6) * t272 + t524 * t232 - t520 * t246;
t208 = -pkin(1) * t239 - pkin(2) * t272 + pkin(3) * t580 - pkin(7) * t311 - t523 * t269 - t519 * t298;
t207 = -pkin(3) * t214 - pkin(4) * t244;
t206 = -pkin(6) * t265 + t524 * t224 - t520 * t237;
t205 = -pkin(2) * t310 + pkin(6) * t273 + t520 * t232 + t524 * t246;
t204 = -pkin(1) * t235 - pkin(2) * t265 + pkin(3) * t358 - pkin(7) * t297 - t523 * t264 - t519 * t295;
t203 = -pkin(2) * t296 + pkin(6) * t266 + t520 * t224 + t524 * t237;
t202 = -pkin(7) * t257 - t519 * t223 + t523 * t229;
t201 = -pkin(5) * t248 - t521 * t222 + t525 * t234;
t200 = -pkin(7) * t214 - pkin(8) * t556 - t519 * t233;
t199 = -t521 * t212 + t525 * t213;
t198 = t525 * t212 + t521 * t213;
t197 = -pkin(6) * t252 + t524 * t202 - t520 * t238;
t196 = -pkin(2) * t257 + pkin(6) * t253 + t520 * t202 + t524 * t238;
t195 = -pkin(1) * t217 - pkin(2) * t252 + pkin(3) * t383 - pkin(7) * t259 - t523 * t223 - t519 * t229;
t194 = t517 * t199 + t516 * t214;
t193 = t516 * t199 - t517 * t214;
t192 = -pkin(5) * t239 - t521 * t205 + t525 * t209;
t191 = -pkin(5) * t235 - t521 * t203 + t525 * t206;
t190 = -pkin(6) * t212 + t524 * t200 - t520 * t207;
t189 = -pkin(1) * t198 - pkin(2) * t212 + pkin(3) * t343 - pkin(7) * t215 + pkin(8) * t566 - t523 * t233;
t188 = -pkin(2) * t214 + pkin(6) * t213 + t520 * t200 + t524 * t207;
t187 = -pkin(5) * t217 - t521 * t196 + t525 * t197;
t186 = -pkin(5) * t198 - t521 * t188 + t525 * t190;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t442, 0, 0, 0, 0, 0, 0, -t479, -t570, 0, t376, 0, 0, 0, 0, 0, 0, -t411, t589, 0, t276, 0, 0, 0, 0, 0, 0, t318, t319, t517 * t367, t231, 0, 0, 0, 0, 0, 0, t221, t226, t211, t194; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t579, 0, 0, 0, 0, 0, 0, -t478, -t573, 0, t375, 0, 0, 0, 0, 0, 0, -t410, t590, 0, t275, 0, 0, 0, 0, 0, 0, t316, t317, t516 * t367, t230, 0, 0, 0, 0, 0, 0, t220, t225, t210, t193; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t515, 0, 0, 0, 0, 0, 0, t490, -t489, 0, -t395, 0, 0, 0, 0, 0, 0, -t420, -t530, 0, -t287, 0, 0, 0, 0, 0, 0, t337, t338, t366, t248, 0, 0, 0, 0, 0, 0, t235, t239, t217, t198; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t571, -t569, t579, qJ(1) * t579, 0, 0, t570, 0, -t479, t516 * qJDD(2), t517 * t448 + t516 * t537, t517 * t449 + t538 * t516, t517 * t395, -qJ(1) * t375 - (pkin(1) * t516 - pkin(5) * t517) * t395, 0, 0, -t589, 0, -t411, t516 * t510, t517 * t344 - t539 * t516, t517 * t345 - t540 * t516, t517 * t287, -qJ(1) * t275 + t517 * t247 - t516 * t260, t517 * t349 - t516 * t425, t517 * t320 - t516 * t413, t517 * t353 - t516 * t432, t517 * t348 - t516 * t424, t517 * t352 - t516 * t430, t517 * t384, -qJ(1) * t316 + t517 * t227 - t516 * t267, -qJ(1) * t317 + t517 * t228 - t516 * t268, t517 * t241 - t541 * t516, -qJ(1) * t230 + t517 * t201 - t516 * t216, t517 * t251 - t516 * t300, t517 * t219 - t516 * t256, t517 * t242 - t516 * t312, t517 * t250 - t516 * t299, t517 * t243 - t516 * t313, t517 * t274 - t516 * t333, -qJ(1) * t220 + t517 * t191 - t516 * t204, -qJ(1) * t225 + t517 * t192 - t516 * t208, -qJ(1) * t210 + t517 * t187 - t516 * t195, -qJ(1) * t193 + t517 * t186 - t516 * t189; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t569, -t571, t442, qJ(1) * t442, 0, 0, t573, 0, -t478, -t517 * qJDD(2), t516 * t448 - t517 * t537, t516 * t449 - t538 * t517, t516 * t395, qJ(1) * t376 - (-pkin(1) * t517 - pkin(5) * t516) * t395, 0, 0, -t590, 0, -t410, -t517 * t510, t516 * t344 + t539 * t517, t516 * t345 + t540 * t517, t516 * t287, qJ(1) * t276 + t516 * t247 + t517 * t260, t516 * t349 + t517 * t425, t516 * t320 + t517 * t413, t516 * t353 + t517 * t432, t516 * t348 + t517 * t424, t516 * t352 + t517 * t430, t516 * t384, qJ(1) * t318 + t516 * t227 + t517 * t267, qJ(1) * t319 + t516 * t228 + t517 * t268, t516 * t241 + t541 * t517, qJ(1) * t231 + t516 * t201 + t517 * t216, t516 * t251 + t517 * t300, t516 * t219 + t517 * t256, t516 * t242 + t517 * t312, t516 * t250 + t517 * t299, t516 * t243 + t517 * t313, t516 * t274 + t517 * t333, qJ(1) * t221 + t516 * t191 + t517 * t204, qJ(1) * t226 + t516 * t192 + t517 * t208, qJ(1) * t211 + t516 * t187 + t517 * t195, qJ(1) * t194 + t516 * t186 + t517 * t189; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t491, t531, 0, 0, 0, 0, t489, 0, t490, 0, -t449, t448, t396, pkin(5) * t396 + t488, 0, 0, t530, 0, -t420, 0, -t345, t344, t288, pkin(5) * t288 + pkin(6) * t559 + t525 * t321 + t488, t525 * t399 + t521 * t401, t525 * t381 + t521 * t382, t525 * t406 + t521 * t408, t525 * t398 + t521 * t400, t525 * t405 + t521 * t407, t525 * t446 + t521 * t447, -pkin(1) * t431 + pkin(5) * t339 + t525 * t262 + t521 * t270, -pkin(1) * t433 + pkin(5) * t340 + t525 * t263 + t521 * t271, pkin(5) * t367 + t525 * t293 + t521 * t294, pkin(1) * t308 + pkin(5) * t249 + t525 * t222 + t521 * t234, t525 * t290 + t521 * t292, t525 * t254 + t521 * t255, t525 * t278 + t521 * t280, t525 * t289 + t521 * t291, t525 * t279 + t521 * t281, t525 * t322 + t521 * t323, -pkin(1) * t296 + pkin(5) * t236 + t525 * t203 + t521 * t206, -pkin(1) * t310 + pkin(5) * t240 + t525 * t205 + t521 * t209, -pkin(1) * t257 + pkin(5) * t218 + t525 * t196 + t521 * t197, -pkin(1) * t214 + pkin(5) * t199 + t525 * t188 + t521 * t190;];
tauB_reg = t1;
