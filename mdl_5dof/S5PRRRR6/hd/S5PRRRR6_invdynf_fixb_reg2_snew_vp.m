% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRRRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d4,d5,theta1]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:10
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRRRR6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR6_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR6_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRR6_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRR6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRRRR6_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:10:44
% EndTime: 2019-12-05 17:10:46
% DurationCPUTime: 2.23s
% Computational Cost: add. (9134->175), mult. (12027->249), div. (0->0), fcn. (8297->10), ass. (0->145)
t1181 = qJD(2) + qJD(3);
t1178 = t1181 ^ 2;
t1179 = qJDD(2) + qJDD(3);
t1189 = sin(qJ(3));
t1193 = cos(qJ(3));
t1152 = t1189 * t1178 - t1193 * t1179;
t1190 = sin(qJ(2));
t1194 = cos(qJ(2));
t1199 = -t1193 * t1178 - t1189 * t1179;
t1219 = t1190 * t1152 + t1194 * t1199;
t1127 = t1194 * t1152 - t1190 * t1199;
t1180 = qJD(4) + qJD(5);
t1216 = qJD(5) + t1180;
t1187 = sin(qJ(5));
t1191 = cos(qJ(5));
t1192 = cos(qJ(4));
t1210 = t1181 * t1192;
t1188 = sin(qJ(4));
t1211 = t1181 * t1188;
t1141 = t1187 * t1211 - t1191 * t1210;
t1215 = t1141 ^ 2;
t1143 = (t1187 * t1192 + t1188 * t1191) * t1181;
t1214 = t1143 ^ 2;
t1213 = t1180 ^ 2;
t1212 = t1143 * t1141;
t1183 = t1192 ^ 2;
t1209 = t1183 * t1178;
t1185 = sin(pkin(9));
t1186 = cos(pkin(9));
t1164 = t1185 * g(1) - t1186 * g(2);
t1208 = t1185 * t1164;
t1207 = t1188 * t1179;
t1206 = qJD(5) - t1180;
t1165 = -t1186 * g(1) - t1185 * g(2);
t1184 = -g(3) + qJDD(1);
t1140 = t1194 * t1165 + t1190 * t1184;
t1196 = qJD(2) ^ 2;
t1138 = -t1196 * pkin(2) + t1140;
t1139 = -t1190 * t1165 + t1194 * t1184;
t1198 = qJDD(2) * pkin(2) + t1139;
t1113 = t1193 * t1138 + t1189 * t1198;
t1110 = -t1178 * pkin(3) + t1179 * pkin(7) + t1113;
t1103 = t1192 * t1110 - t1188 * t1164;
t1182 = t1188 ^ 2;
t1205 = t1182 + t1183;
t1168 = t1188 * t1178 * t1192;
t1159 = qJDD(4) + t1168;
t1204 = -qJDD(4) - qJDD(5);
t1203 = qJD(4) * t1211;
t1202 = qJD(4) * t1210;
t1102 = -t1188 * t1110 - t1192 * t1164;
t1112 = -t1189 * t1138 + t1193 * t1198;
t1147 = t1202 + t1207;
t1172 = t1192 * t1179;
t1200 = -t1172 + t1203;
t1201 = -t1187 * t1147 - t1191 * t1200;
t1109 = -t1179 * pkin(3) - t1178 * pkin(7) - t1112;
t1197 = -t1191 * t1147 + t1187 * t1200;
t1195 = qJD(4) ^ 2;
t1167 = -t1195 - t1209;
t1166 = -t1182 * t1178 - t1195;
t1163 = t1194 * qJDD(2) - t1190 * t1196;
t1162 = -t1190 * qJDD(2) - t1194 * t1196;
t1161 = qJD(4) * pkin(4) - pkin(8) * t1211;
t1160 = -qJDD(4) + t1168;
t1155 = t1186 * t1164;
t1154 = t1205 * t1178;
t1149 = t1205 * t1179;
t1148 = t1172 - 0.2e1 * t1203;
t1146 = 0.2e1 * t1202 + t1207;
t1133 = -t1213 - t1214;
t1132 = t1192 * t1160 - t1188 * t1166;
t1131 = -t1188 * t1159 + t1192 * t1167;
t1130 = t1188 * t1160 + t1192 * t1166;
t1129 = t1192 * t1159 + t1188 * t1167;
t1126 = t1193 * t1149 - t1189 * t1154;
t1123 = t1189 * t1149 + t1193 * t1154;
t1122 = t1204 - t1212;
t1121 = -t1204 - t1212;
t1120 = -t1213 - t1215;
t1119 = -t1190 * t1139 + t1194 * t1140;
t1118 = t1194 * t1139 + t1190 * t1140;
t1117 = t1193 * t1132 + t1189 * t1146;
t1116 = t1193 * t1131 - t1189 * t1148;
t1115 = t1189 * t1132 - t1193 * t1146;
t1114 = t1189 * t1131 + t1193 * t1148;
t1111 = -t1214 - t1215;
t1107 = t1191 * t1122 - t1187 * t1133;
t1106 = t1187 * t1122 + t1191 * t1133;
t1105 = -t1190 * t1123 + t1194 * t1126;
t1104 = t1194 * t1123 + t1190 * t1126;
t1101 = t1206 * t1141 + t1197;
t1100 = -t1216 * t1141 - t1197;
t1099 = -t1206 * t1143 + t1201;
t1098 = t1216 * t1143 - t1201;
t1097 = t1191 * t1120 - t1187 * t1121;
t1096 = t1187 * t1120 + t1191 * t1121;
t1095 = t1200 * pkin(4) - pkin(8) * t1209 + t1161 * t1211 + t1109;
t1094 = -t1190 * t1115 + t1194 * t1117;
t1093 = -t1190 * t1114 + t1194 * t1116;
t1092 = t1194 * t1115 + t1190 * t1117;
t1091 = t1194 * t1114 + t1190 * t1116;
t1090 = -t1189 * t1112 + t1193 * t1113;
t1089 = t1193 * t1112 + t1189 * t1113;
t1088 = -pkin(4) * t1209 - t1200 * pkin(8) - qJD(4) * t1161 + t1103;
t1087 = (-t1147 + t1202) * pkin(8) + t1159 * pkin(4) + t1102;
t1086 = -t1188 * t1106 + t1192 * t1107;
t1085 = t1192 * t1106 + t1188 * t1107;
t1084 = -t1188 * t1102 + t1192 * t1103;
t1083 = t1192 * t1102 + t1188 * t1103;
t1082 = t1191 * t1099 - t1187 * t1101;
t1081 = t1187 * t1099 + t1191 * t1101;
t1080 = -t1188 * t1096 + t1192 * t1097;
t1079 = t1192 * t1096 + t1188 * t1097;
t1078 = -t1190 * t1089 + t1194 * t1090;
t1077 = t1194 * t1089 + t1190 * t1090;
t1076 = t1193 * t1084 + t1189 * t1109;
t1075 = t1189 * t1084 - t1193 * t1109;
t1074 = t1187 * t1087 + t1191 * t1088;
t1073 = t1191 * t1087 - t1187 * t1088;
t1072 = t1193 * t1086 + t1189 * t1100;
t1071 = t1189 * t1086 - t1193 * t1100;
t1070 = t1193 * t1080 + t1189 * t1098;
t1069 = t1189 * t1080 - t1193 * t1098;
t1068 = -t1188 * t1081 + t1192 * t1082;
t1067 = t1192 * t1081 + t1188 * t1082;
t1066 = t1193 * t1068 + t1189 * t1111;
t1065 = t1189 * t1068 - t1193 * t1111;
t1064 = -t1190 * t1075 + t1194 * t1076;
t1063 = t1194 * t1075 + t1190 * t1076;
t1062 = -t1187 * t1073 + t1191 * t1074;
t1061 = t1191 * t1073 + t1187 * t1074;
t1060 = -t1190 * t1071 + t1194 * t1072;
t1059 = t1194 * t1071 + t1190 * t1072;
t1058 = -t1190 * t1069 + t1194 * t1070;
t1057 = t1194 * t1069 + t1190 * t1070;
t1056 = -t1190 * t1065 + t1194 * t1066;
t1055 = t1194 * t1065 + t1190 * t1066;
t1054 = -t1188 * t1061 + t1192 * t1062;
t1053 = t1192 * t1061 + t1188 * t1062;
t1052 = t1193 * t1054 + t1189 * t1095;
t1051 = t1189 * t1054 - t1193 * t1095;
t1050 = -t1190 * t1051 + t1194 * t1052;
t1049 = t1194 * t1051 + t1190 * t1052;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1186 * t1165 - t1208, 0, 0, 0, 0, 0, 0, t1186 * t1162, -t1186 * t1163, 0, t1186 * t1119 - t1208, 0, 0, 0, 0, 0, 0, t1186 * t1219, t1186 * t1127, 0, t1186 * t1078 - t1208, 0, 0, 0, 0, 0, 0, t1186 * t1093 + t1185 * t1129, t1186 * t1094 + t1185 * t1130, t1186 * t1105, t1186 * t1064 + t1185 * t1083, 0, 0, 0, 0, 0, 0, t1186 * t1058 + t1185 * t1079, t1186 * t1060 + t1185 * t1085, t1186 * t1056 + t1185 * t1067, t1186 * t1050 + t1185 * t1053; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1185 * t1165 + t1155, 0, 0, 0, 0, 0, 0, t1185 * t1162, -t1185 * t1163, 0, t1185 * t1119 + t1155, 0, 0, 0, 0, 0, 0, t1185 * t1219, t1185 * t1127, 0, t1185 * t1078 + t1155, 0, 0, 0, 0, 0, 0, t1185 * t1093 - t1186 * t1129, t1185 * t1094 - t1186 * t1130, t1185 * t1105, t1185 * t1064 - t1186 * t1083, 0, 0, 0, 0, 0, 0, t1185 * t1058 - t1186 * t1079, t1185 * t1060 - t1186 * t1085, t1185 * t1056 - t1186 * t1067, t1185 * t1050 - t1186 * t1053; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1184, 0, 0, 0, 0, 0, 0, t1163, t1162, 0, t1118, 0, 0, 0, 0, 0, 0, -t1127, t1219, 0, t1077, 0, 0, 0, 0, 0, 0, t1091, t1092, t1104, t1063, 0, 0, 0, 0, 0, 0, t1057, t1059, t1055, t1049; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1165, 0, 0, 0, 0, 0, 0, t1162, -t1163, 0, t1119, 0, 0, 0, 0, 0, 0, t1219, t1127, 0, t1078, 0, 0, 0, 0, 0, 0, t1093, t1094, t1105, t1064, 0, 0, 0, 0, 0, 0, t1058, t1060, t1056, t1050; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1164, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1164, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1164, 0, 0, 0, 0, 0, 0, -t1129, -t1130, 0, -t1083, 0, 0, 0, 0, 0, 0, -t1079, -t1085, -t1067, -t1053; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1184, 0, 0, 0, 0, 0, 0, t1163, t1162, 0, t1118, 0, 0, 0, 0, 0, 0, -t1127, t1219, 0, t1077, 0, 0, 0, 0, 0, 0, t1091, t1092, t1104, t1063, 0, 0, 0, 0, 0, 0, t1057, t1059, t1055, t1049; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1196, -qJDD(2), 0, t1140, 0, 0, 0, 0, 0, 0, t1199, t1152, 0, t1090, 0, 0, 0, 0, 0, 0, t1116, t1117, t1126, t1076, 0, 0, 0, 0, 0, 0, t1070, t1072, t1066, t1052; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1196, 0, t1139, 0, 0, 0, 0, 0, 0, -t1152, t1199, 0, t1089, 0, 0, 0, 0, 0, 0, t1114, t1115, t1123, t1075, 0, 0, 0, 0, 0, 0, t1069, t1071, t1065, t1051; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1164, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1164, 0, 0, 0, 0, 0, 0, t1129, t1130, 0, t1083, 0, 0, 0, 0, 0, 0, t1079, t1085, t1067, t1053; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1178, -t1179, 0, t1113, 0, 0, 0, 0, 0, 0, t1131, t1132, t1149, t1084, 0, 0, 0, 0, 0, 0, t1080, t1086, t1068, t1054; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1179, -t1178, 0, t1112, 0, 0, 0, 0, 0, 0, t1148, -t1146, t1154, -t1109, 0, 0, 0, 0, 0, 0, -t1098, -t1100, -t1111, -t1095; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1164, 0, 0, 0, 0, 0, 0, t1129, t1130, 0, t1083, 0, 0, 0, 0, 0, 0, t1079, t1085, t1067, t1053; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1167, t1160, t1172, t1103, 0, 0, 0, 0, 0, 0, t1097, t1107, t1082, t1062; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1159, t1166, -t1207, t1102, 0, 0, 0, 0, 0, 0, t1096, t1106, t1081, t1061; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1148, t1146, -t1154, t1109, 0, 0, 0, 0, 0, 0, t1098, t1100, t1111, t1095; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1120, t1122, t1099, t1074; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1121, t1133, t1101, t1073; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1098, t1100, t1111, t1095;];
f_new_reg = t1;
