% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 12:16
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRRR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR6_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR6_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRR6_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 12:15:29
% EndTime: 2020-01-03 12:15:44
% DurationCPUTime: 13.78s
% Computational Cost: add. (95562->606), mult. (123918->924), div. (0->0), fcn. (84400->10), ass. (0->418)
t701 = cos(qJ(2));
t689 = qJDD(1) + qJDD(2);
t696 = sin(qJ(2));
t731 = t689 * t696;
t691 = qJD(1) + qJD(2);
t760 = t691 ^ 2;
t654 = t760 * t701 + t731;
t729 = t689 * t701;
t657 = t760 * t696 - t729;
t697 = sin(qJ(1));
t702 = cos(qJ(1));
t609 = t654 * t702 - t657 * t697;
t635 = pkin(6) * t654 - g(1) * t701;
t768 = pkin(6) * t657 - g(1) * t696;
t777 = -pkin(5) * t609 - t635 * t702 + t697 * t768;
t707 = t654 * t697 + t657 * t702;
t776 = pkin(5) * t707 + t635 * t697 + t702 * t768;
t673 = g(2) * t697 - t702 * g(3);
t758 = qJD(1) ^ 2;
t661 = -t758 * pkin(1) - t673;
t674 = g(2) * t702 + g(3) * t697;
t705 = qJDD(1) * pkin(1) - t674;
t611 = t661 * t696 - t701 * t705;
t612 = t701 * t661 + t696 * t705;
t712 = t611 * t696 + t701 * t612;
t558 = t611 * t701 - t612 * t696;
t744 = t558 * t702;
t504 = t697 * t712 - t744;
t745 = t558 * t697;
t773 = t702 * t712 + t745;
t693 = sin(qJ(5));
t694 = sin(qJ(4));
t699 = cos(qJ(4));
t700 = cos(qJ(3));
t695 = sin(qJ(3));
t726 = t691 * t695;
t638 = -t699 * t700 * t691 + t694 * t726;
t640 = (t694 * t700 + t695 * t699) * t691;
t698 = cos(qJ(5));
t583 = t698 * t638 + t640 * t693;
t585 = -t638 * t693 + t640 * t698;
t528 = t585 * t583;
t688 = qJDD(3) + qJDD(4);
t710 = qJDD(5) + t688;
t765 = -t528 + t710;
t772 = t693 * t765;
t602 = t640 * t638;
t763 = -t602 + t688;
t771 = t694 * t763;
t770 = t698 * t765;
t769 = t699 * t763;
t690 = qJD(3) + qJD(4);
t682 = qJD(5) + t690;
t577 = t682 * t583;
t724 = qJD(3) * t691;
t715 = t700 * t724;
t732 = t689 * t695;
t647 = t715 + t732;
t716 = t695 * t724;
t730 = t689 * t700;
t706 = t716 - t730;
t711 = t647 * t694 + t699 * t706;
t562 = -qJD(4) * t640 - t711;
t563 = -t638 * qJD(4) + t699 * t647 - t694 * t706;
t704 = qJD(5) * t583 - t562 * t693 - t563 * t698;
t764 = -t577 - t704;
t630 = t690 * t638;
t542 = -t630 - t563;
t762 = -t630 + t563;
t713 = -t698 * t562 + t563 * t693;
t463 = (qJD(5) - t682) * t585 + t713;
t538 = (qJD(4) - t690) * t640 + t711;
t581 = t583 ^ 2;
t582 = t585 ^ 2;
t761 = t638 ^ 2;
t637 = t640 ^ 2;
t678 = t682 ^ 2;
t687 = t690 ^ 2;
t759 = t700 ^ 2;
t600 = -pkin(2) * t760 + pkin(7) * t689 + t612;
t739 = t600 * t695;
t534 = qJDD(3) * pkin(3) - pkin(8) * t647 - t739 + (-g(1) + (pkin(3) * t726 + pkin(8) * qJD(3)) * t691) * t700;
t580 = -t695 * g(1) + t700 * t600;
t664 = qJD(3) * pkin(3) - pkin(8) * t726;
t677 = t759 * t760;
t535 = -pkin(3) * t677 - pkin(8) * t706 - qJD(3) * t664 + t580;
t481 = -t699 * t534 + t535 * t694;
t439 = t763 * pkin(4) + t542 * pkin(9) - t481;
t482 = t694 * t534 + t699 * t535;
t622 = pkin(4) * t690 - pkin(9) * t640;
t441 = -pkin(4) * t761 + pkin(9) * t562 - t622 * t690 + t482;
t389 = -t698 * t439 + t441 * t693;
t390 = t693 * t439 + t698 * t441;
t353 = -t389 * t698 + t390 * t693;
t755 = t353 * t694;
t754 = t353 * t699;
t424 = -t481 * t699 + t482 * t694;
t753 = t424 * t695;
t752 = t424 * t700;
t599 = -t689 * pkin(2) - t760 * pkin(7) + t611;
t536 = t706 * pkin(3) - pkin(8) * t677 + t664 * t726 + t599;
t472 = -t562 * pkin(4) - t761 * pkin(9) + t622 * t640 + t536;
t751 = t472 * t693;
t750 = t472 * t698;
t521 = t528 + t710;
t749 = t521 * t693;
t748 = t521 * t698;
t747 = t536 * t694;
t746 = t536 * t699;
t593 = t602 + t688;
t743 = t593 * t694;
t742 = t593 * t699;
t741 = t599 * t695;
t740 = t599 * t700;
t648 = -0.2e1 * t716 + t730;
t738 = t648 * t700;
t672 = t700 * t760 * t695;
t662 = qJDD(3) + t672;
t737 = t662 * t695;
t663 = qJDD(3) - t672;
t736 = t663 * t695;
t735 = t663 * t700;
t734 = t682 * t693;
t733 = t682 * t698;
t728 = t690 * t694;
t727 = t690 * t699;
t692 = t695 ^ 2;
t725 = t760 * t692;
t721 = t692 + t759;
t720 = t696 * t528;
t719 = t701 * t528;
t718 = t696 * t602;
t717 = t701 * t602;
t665 = -t697 * qJDD(1) - t702 * t758;
t714 = pkin(5) * t665 + t702 * g(1);
t354 = t389 * t693 + t698 * t390;
t425 = t481 * t694 + t699 * t482;
t579 = g(1) * t700 + t739;
t518 = t579 * t695 + t700 * t580;
t625 = -t697 * t673 - t674 * t702;
t709 = t696 * t672;
t708 = t701 * t672;
t517 = t579 * t700 - t580 * t695;
t626 = t673 * t702 - t674 * t697;
t703 = qJD(3) ^ 2;
t670 = -t677 - t703;
t669 = t677 - t703;
t668 = -t703 - t725;
t667 = t703 - t725;
t666 = qJDD(1) * t702 - t758 * t697;
t659 = t677 - t725;
t658 = t677 + t725;
t653 = t700 * t662;
t652 = t721 * t689;
t646 = 0.2e1 * t715 + t732;
t645 = pkin(5) * t666 + g(1) * t697;
t644 = t721 * t724;
t628 = -t637 + t687;
t627 = -t687 + t761;
t624 = qJDD(3) * t696 + t644 * t701;
t623 = -qJDD(3) * t701 + t644 * t696;
t621 = t647 * t700 - t692 * t724;
t620 = t695 * t706 - t759 * t724;
t619 = -t637 - t687;
t618 = -t668 * t695 - t735;
t617 = -t667 * t695 + t653;
t616 = t670 * t700 - t737;
t615 = t669 * t700 - t736;
t614 = t668 * t700 - t736;
t613 = t670 * t695 + t653;
t607 = t652 * t701 - t658 * t696;
t604 = t652 * t696 + t658 * t701;
t603 = -t646 * t695 + t738;
t601 = -t637 + t761;
t598 = t617 * t701 + t695 * t731;
t597 = t615 * t701 + t696 * t730;
t596 = t617 * t696 - t695 * t729;
t595 = t615 * t696 - t700 * t729;
t591 = t621 * t701 - t709;
t590 = t620 * t701 + t709;
t589 = t621 * t696 + t708;
t588 = t620 * t696 - t708;
t587 = -t687 - t761;
t576 = t618 * t701 + t646 * t696;
t575 = t616 * t701 - t648 * t696;
t574 = t618 * t696 - t646 * t701;
t573 = t616 * t696 + t648 * t701;
t572 = -t582 + t678;
t571 = t581 - t678;
t570 = (-t638 * t699 + t640 * t694) * t690;
t569 = (-t638 * t694 - t640 * t699) * t690;
t567 = -t582 - t678;
t566 = -t637 - t761;
t565 = t603 * t701 - t659 * t696;
t564 = t603 * t696 + t659 * t701;
t555 = pkin(1) * g(1) + pkin(6) * t712;
t554 = t627 * t699 - t743;
t553 = -t628 * t694 + t769;
t552 = t627 * t694 + t742;
t551 = t628 * t699 + t771;
t550 = -pkin(7) * t614 + t740;
t549 = -pkin(7) * t613 + t741;
t548 = -t619 * t694 - t742;
t547 = t619 * t699 - t743;
t546 = -pkin(2) * t614 + t580;
t545 = -pkin(2) * t613 + t579;
t544 = t604 * t697 - t607 * t702;
t543 = t604 * t702 + t607 * t697;
t537 = (qJD(4) + t690) * t640 + t711;
t533 = t563 * t699 - t640 * t728;
t532 = t563 * t694 + t640 * t727;
t531 = -t562 * t694 + t638 * t727;
t530 = t562 * t699 + t638 * t728;
t525 = -t582 + t581;
t524 = t587 * t699 - t771;
t523 = t587 * t694 + t769;
t519 = -t678 - t581;
t515 = (-t583 * t698 + t585 * t693) * t682;
t514 = (-t583 * t693 - t585 * t698) * t682;
t513 = t574 * t697 - t576 * t702;
t512 = t573 * t697 - t575 * t702;
t511 = t574 * t702 + t576 * t697;
t510 = t573 * t702 + t575 * t697;
t509 = -t569 * t695 + t570 * t700;
t508 = t509 * t701 + t688 * t696;
t507 = t509 * t696 - t688 * t701;
t506 = -t581 - t582;
t503 = -pkin(6) * t604 + t517 * t701;
t502 = pkin(6) * t607 + t517 * t696;
t501 = t518 * t701 + t599 * t696;
t500 = t518 * t696 - t599 * t701;
t499 = -t552 * t695 + t554 * t700;
t498 = -t551 * t695 + t553 * t700;
t497 = t571 * t698 - t749;
t496 = -t572 * t693 + t770;
t495 = t571 * t693 + t748;
t494 = t572 * t698 + t772;
t493 = -t567 * t693 - t748;
t492 = t567 * t698 - t749;
t491 = -t547 * t695 + t548 * t700;
t490 = t547 * t700 + t548 * t695;
t489 = -pkin(8) * t547 + t746;
t488 = -t538 * t699 - t542 * t694;
t487 = -t537 * t699 - t694 * t762;
t486 = -t538 * t694 + t542 * t699;
t485 = -t537 * t694 + t699 * t762;
t483 = -qJD(5) * t585 - t713;
t480 = -pkin(8) * t523 + t747;
t478 = -t532 * t695 + t533 * t700;
t477 = -t530 * t695 + t531 * t700;
t476 = -t523 * t695 + t524 * t700;
t475 = t523 * t700 + t524 * t695;
t474 = t519 * t698 - t772;
t473 = t519 * t693 + t770;
t471 = -pkin(6) * t574 - t546 * t696 + t550 * t701;
t470 = -pkin(6) * t573 - t545 * t696 + t549 * t701;
t469 = -t514 * t694 + t515 * t699;
t468 = t514 * t699 + t515 * t694;
t467 = -t577 + t704;
t462 = (qJD(5) + t682) * t585 + t713;
t461 = t478 * t701 + t718;
t460 = t477 * t701 - t718;
t459 = -t585 * t734 - t698 * t704;
t458 = t478 * t696 - t717;
t457 = t477 * t696 + t717;
t456 = t585 * t733 - t693 * t704;
t455 = -t483 * t693 + t583 * t733;
t454 = t483 * t698 + t583 * t734;
t453 = -pkin(1) * t614 + pkin(6) * t576 + t546 * t701 + t550 * t696;
t452 = -pkin(1) * t613 + pkin(6) * t575 + t545 * t701 + t549 * t696;
t451 = t499 * t701 - t538 * t696;
t450 = t498 * t701 - t542 * t696;
t449 = t499 * t696 + t538 * t701;
t448 = t498 * t696 + t542 * t701;
t447 = -pkin(3) * t762 + pkin(8) * t548 + t747;
t446 = t491 * t701 + t696 * t762;
t445 = t491 * t696 - t701 * t762;
t444 = -pkin(3) * t537 + pkin(8) * t524 - t746;
t443 = t476 * t701 + t537 * t696;
t442 = t476 * t696 - t537 * t701;
t438 = t500 * t697 - t501 * t702;
t437 = t500 * t702 + t501 * t697;
t434 = -t495 * t694 + t497 * t699;
t433 = -t494 * t694 + t496 * t699;
t432 = t495 * t699 + t497 * t694;
t431 = t494 * t699 + t496 * t694;
t430 = -t492 * t694 + t493 * t699;
t429 = t492 * t699 + t493 * t694;
t428 = -t486 * t695 + t488 * t700;
t427 = -t485 * t695 + t487 * t700;
t426 = t486 * t700 + t488 * t695;
t423 = -pkin(6) * t500 - (pkin(2) * t696 - pkin(7) * t701) * t517;
t422 = -pkin(9) * t492 + t750;
t421 = t427 * t701 - t601 * t696;
t420 = t427 * t696 + t601 * t701;
t419 = -t473 * t694 + t474 * t699;
t418 = t473 * t699 + t474 * t694;
t417 = -pkin(9) * t473 + t751;
t416 = t428 * t701 + t566 * t696;
t415 = t428 * t696 - t566 * t701;
t414 = -pkin(2) * t490 - pkin(3) * t547 + t482;
t413 = -t468 * t695 + t469 * t700;
t412 = -t463 * t698 - t467 * t693;
t411 = -t462 * t698 - t693 * t764;
t410 = -t463 * t693 + t467 * t698;
t409 = -t462 * t693 + t698 * t764;
t408 = -pkin(3) * t536 + pkin(8) * t425;
t407 = t413 * t701 + t696 * t710;
t406 = t413 * t696 - t701 * t710;
t405 = -t456 * t694 + t459 * t699;
t404 = -t454 * t694 + t455 * t699;
t403 = t456 * t699 + t459 * t694;
t402 = t454 * t699 + t455 * t694;
t401 = -pkin(2) * t475 - pkin(3) * t523 + t481;
t400 = pkin(6) * t501 - (-pkin(2) * t701 - pkin(7) * t696 - pkin(1)) * t517;
t399 = t445 * t697 - t446 * t702;
t398 = t445 * t702 + t446 * t697;
t397 = -pkin(2) * t426 - pkin(3) * t486;
t396 = -pkin(8) * t486 - t424;
t395 = t442 * t697 - t443 * t702;
t394 = t442 * t702 + t443 * t697;
t393 = -pkin(7) * t490 - t447 * t695 + t489 * t700;
t392 = -pkin(4) * t764 + pkin(9) * t493 + t751;
t391 = -pkin(3) * t566 + pkin(8) * t488 + t425;
t387 = -pkin(4) * t462 + pkin(9) * t474 - t750;
t386 = -t432 * t695 + t434 * t700;
t385 = -t431 * t695 + t433 * t700;
t384 = -pkin(7) * t475 - t444 * t695 + t480 * t700;
t383 = -t429 * t695 + t430 * t700;
t382 = t429 * t700 + t430 * t695;
t381 = t425 * t700 - t753;
t380 = t425 * t695 + t752;
t379 = -t418 * t695 + t419 * t700;
t378 = t418 * t700 + t419 * t695;
t377 = t381 * t701 + t536 * t696;
t376 = t381 * t696 - t536 * t701;
t375 = t415 * t697 - t416 * t702;
t374 = t415 * t702 + t416 * t697;
t373 = t386 * t701 - t463 * t696;
t372 = t385 * t701 - t467 * t696;
t371 = t386 * t696 + t463 * t701;
t370 = t385 * t696 + t467 * t701;
t369 = t383 * t701 + t696 * t764;
t368 = t383 * t696 - t701 * t764;
t367 = -t410 * t694 + t412 * t699;
t366 = -t409 * t694 + t411 * t699;
t365 = t410 * t699 + t412 * t694;
t364 = t409 * t699 + t411 * t694;
t363 = -t403 * t695 + t405 * t700;
t362 = -t402 * t695 + t404 * t700;
t361 = t363 * t701 + t720;
t360 = t362 * t701 - t720;
t359 = t363 * t696 - t719;
t358 = t362 * t696 + t719;
t357 = t379 * t701 + t462 * t696;
t356 = t379 * t696 - t462 * t701;
t355 = -pkin(2) * t380 - pkin(3) * t424;
t352 = -pkin(6) * t445 + t393 * t701 - t414 * t696;
t351 = -pkin(8) * t429 - t392 * t694 + t422 * t699;
t350 = -pkin(6) * t442 + t384 * t701 - t401 * t696;
t349 = -pkin(1) * t490 + pkin(6) * t446 + t393 * t696 + t414 * t701;
t348 = -pkin(4) * t472 + pkin(9) * t354;
t347 = -pkin(8) * t418 - t387 * t694 + t417 * t699;
t346 = -pkin(7) * t426 - t391 * t695 + t396 * t700;
t345 = -pkin(3) * t764 + pkin(8) * t430 + t392 * t699 + t422 * t694;
t344 = -pkin(7) * t380 - pkin(8) * t752 - t408 * t695;
t343 = -pkin(1) * t475 + pkin(6) * t443 + t384 * t696 + t401 * t701;
t342 = t376 * t697 - t377 * t702;
t341 = t376 * t702 + t377 * t697;
t340 = -pkin(9) * t410 - t353;
t339 = -pkin(3) * t462 + pkin(8) * t419 + t387 * t699 + t417 * t694;
t338 = -pkin(2) * t382 - pkin(3) * t429 - pkin(4) * t492 + t390;
t337 = t368 * t697 - t369 * t702;
t336 = t368 * t702 + t369 * t697;
t335 = -pkin(4) * t506 + pkin(9) * t412 + t354;
t334 = -t365 * t695 + t367 * t700;
t333 = -t364 * t695 + t366 * t700;
t332 = t365 * t700 + t367 * t695;
t331 = t333 * t701 - t525 * t696;
t330 = t333 * t696 + t525 * t701;
t329 = t334 * t701 + t506 * t696;
t328 = t334 * t696 - t506 * t701;
t327 = -pkin(2) * t378 - pkin(3) * t418 - pkin(4) * t473 + t389;
t326 = t356 * t697 - t357 * t702;
t325 = t356 * t702 + t357 * t697;
t324 = -pkin(6) * t415 + t346 * t701 - t397 * t696;
t323 = t354 * t699 - t755;
t322 = t354 * t694 + t754;
t321 = -pkin(1) * t426 + pkin(6) * t416 + t346 * t696 + t397 * t701;
t320 = -pkin(2) * t332 - pkin(3) * t365 - pkin(4) * t410;
t319 = -pkin(7) * t382 - t345 * t695 + t351 * t700;
t318 = -pkin(6) * t376 + t344 * t701 - t355 * t696;
t317 = t328 * t697 - t329 * t702;
t316 = t328 * t702 + t329 * t697;
t315 = -pkin(7) * t378 - t339 * t695 + t347 * t700;
t314 = -pkin(1) * t380 + pkin(6) * t377 + t344 * t696 + t355 * t701;
t313 = -pkin(8) * t365 - t335 * t694 + t340 * t699;
t312 = -pkin(3) * t506 + pkin(8) * t367 + t335 * t699 + t340 * t694;
t311 = -t322 * t695 + t323 * t700;
t310 = t322 * t700 + t323 * t695;
t309 = -pkin(8) * t322 - pkin(9) * t754 - t348 * t694;
t308 = t311 * t701 + t472 * t696;
t307 = t311 * t696 - t472 * t701;
t306 = -pkin(3) * t472 + pkin(8) * t323 - pkin(9) * t755 + t348 * t699;
t305 = -pkin(6) * t368 + t319 * t701 - t338 * t696;
t304 = -pkin(1) * t382 + pkin(6) * t369 + t319 * t696 + t338 * t701;
t303 = -pkin(6) * t356 + t315 * t701 - t327 * t696;
t302 = -pkin(1) * t378 + pkin(6) * t357 + t315 * t696 + t327 * t701;
t301 = -pkin(2) * t310 - pkin(3) * t322 - pkin(4) * t353;
t300 = t307 * t697 - t308 * t702;
t299 = t307 * t702 + t308 * t697;
t298 = -pkin(7) * t332 - t312 * t695 + t313 * t700;
t297 = -pkin(7) * t310 - t306 * t695 + t309 * t700;
t296 = -pkin(6) * t328 + t298 * t701 - t320 * t696;
t295 = -pkin(1) * t332 + pkin(6) * t329 + t298 * t696 + t320 * t701;
t294 = -pkin(6) * t307 + t297 * t701 - t301 * t696;
t293 = -pkin(1) * t310 + pkin(6) * t308 + t297 * t696 + t301 * t701;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t613, t614, 0, -t517, 0, 0, 0, 0, 0, 0, t475, t490, t426, t380, 0, 0, 0, 0, 0, 0, t378, t382, t332, t310; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t666, t665, 0, t625, 0, 0, 0, 0, 0, 0, -t707, -t609, 0, t504, 0, 0, 0, 0, 0, 0, t510, t511, t543, t437, 0, 0, 0, 0, 0, 0, t394, t398, t374, t341, 0, 0, 0, 0, 0, 0, t325, t336, t316, t299; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t665, t666, 0, t626, 0, 0, 0, 0, 0, 0, t609, -t707, 0, -t773, 0, 0, 0, 0, 0, 0, t512, t513, t544, t438, 0, 0, 0, 0, 0, 0, t395, t399, t375, t342, 0, 0, 0, 0, 0, 0, t326, t337, t317, t300; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t674, t673, 0, 0, 0, 0, 0, 0, 0, t689, -pkin(1) * t657 - t611, -pkin(1) * t654 - t612, 0, -pkin(1) * t558, (t647 + t715) * t695, t646 * t700 + t648 * t695, t667 * t700 + t737, t738, t669 * t695 + t735, 0, pkin(1) * t573 + pkin(2) * t648 + pkin(7) * t616 - t740, pkin(1) * t574 - pkin(2) * t646 + pkin(7) * t618 + t741, pkin(1) * t604 + pkin(2) * t658 + pkin(7) * t652 + t518, pkin(1) * t500 - pkin(2) * t599 + pkin(7) * t518, t532 * t700 + t533 * t695, t485 * t700 + t487 * t695, t551 * t700 + t553 * t695, t530 * t700 + t531 * t695, t552 * t700 + t554 * t695, t569 * t700 + t570 * t695, pkin(1) * t442 - pkin(2) * t537 + pkin(7) * t476 + t444 * t700 + t480 * t695, pkin(1) * t445 - pkin(2) * t762 + pkin(7) * t491 + t447 * t700 + t489 * t695, pkin(1) * t415 - pkin(2) * t566 + pkin(7) * t428 + t391 * t700 + t396 * t695, pkin(1) * t376 - pkin(2) * t536 + pkin(7) * t381 - pkin(8) * t753 + t408 * t700, t403 * t700 + t405 * t695, t364 * t700 + t366 * t695, t431 * t700 + t433 * t695, t402 * t700 + t404 * t695, t432 * t700 + t434 * t695, t468 * t700 + t469 * t695, pkin(1) * t356 - pkin(2) * t462 + pkin(7) * t379 + t339 * t700 + t347 * t695, pkin(1) * t368 - pkin(2) * t764 + pkin(7) * t383 + t345 * t700 + t351 * t695, pkin(1) * t328 - pkin(2) * t506 + pkin(7) * t334 + t312 * t700 + t313 * t695, pkin(1) * t307 - pkin(2) * t472 + pkin(7) * t311 + t306 * t700 + t309 * t695; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t665, 0, t666, 0, t714, -t645, -t626, -pkin(5) * t626, 0, 0, t609, 0, -t707, 0, t777, t776, t773, pkin(5) * t773 + pkin(6) * t745 + t555 * t702, t589 * t702 + t591 * t697, t564 * t702 + t565 * t697, t596 * t702 + t598 * t697, t588 * t702 + t590 * t697, t595 * t702 + t597 * t697, t623 * t702 + t624 * t697, -pkin(5) * t512 + t452 * t702 + t470 * t697, -pkin(5) * t513 + t453 * t702 + t471 * t697, -pkin(5) * t544 + t502 * t702 + t503 * t697, -pkin(5) * t438 + t400 * t702 + t423 * t697, t458 * t702 + t461 * t697, t420 * t702 + t421 * t697, t448 * t702 + t450 * t697, t457 * t702 + t460 * t697, t449 * t702 + t451 * t697, t507 * t702 + t508 * t697, -pkin(5) * t395 + t343 * t702 + t350 * t697, -pkin(5) * t399 + t349 * t702 + t352 * t697, -pkin(5) * t375 + t321 * t702 + t324 * t697, -pkin(5) * t342 + t314 * t702 + t318 * t697, t359 * t702 + t361 * t697, t330 * t702 + t331 * t697, t370 * t702 + t372 * t697, t358 * t702 + t360 * t697, t371 * t702 + t373 * t697, t406 * t702 + t407 * t697, -pkin(5) * t326 + t302 * t702 + t303 * t697, -pkin(5) * t337 + t304 * t702 + t305 * t697, -pkin(5) * t317 + t295 * t702 + t296 * t697, -pkin(5) * t300 + t293 * t702 + t294 * t697; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t666, 0, -t665, 0, t645, t714, t625, pkin(5) * t625, 0, 0, t707, 0, t609, 0, -t776, t777, t504, pkin(5) * t504 - pkin(6) * t744 + t555 * t697, t589 * t697 - t591 * t702, t564 * t697 - t565 * t702, t596 * t697 - t598 * t702, t588 * t697 - t590 * t702, t595 * t697 - t597 * t702, t623 * t697 - t624 * t702, pkin(5) * t510 + t452 * t697 - t470 * t702, pkin(5) * t511 + t453 * t697 - t471 * t702, pkin(5) * t543 + t502 * t697 - t503 * t702, pkin(5) * t437 + t400 * t697 - t423 * t702, t458 * t697 - t461 * t702, t420 * t697 - t421 * t702, t448 * t697 - t450 * t702, t457 * t697 - t460 * t702, t449 * t697 - t451 * t702, t507 * t697 - t508 * t702, pkin(5) * t394 + t343 * t697 - t350 * t702, pkin(5) * t398 + t349 * t697 - t352 * t702, pkin(5) * t374 + t321 * t697 - t324 * t702, pkin(5) * t341 + t314 * t697 - t318 * t702, t359 * t697 - t361 * t702, t330 * t697 - t331 * t702, t370 * t697 - t372 * t702, t358 * t697 - t360 * t702, t371 * t697 - t373 * t702, t406 * t697 - t407 * t702, pkin(5) * t325 + t302 * t697 - t303 * t702, pkin(5) * t336 + t304 * t697 - t305 * t702, pkin(5) * t316 + t295 * t697 - t296 * t702, pkin(5) * t299 + t293 * t697 - t294 * t702;];
tauB_reg = t1;
