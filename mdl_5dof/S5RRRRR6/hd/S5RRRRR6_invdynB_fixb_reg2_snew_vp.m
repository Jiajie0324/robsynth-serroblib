% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 19:01
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRRR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR6_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR6_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRR6_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 19:00:45
% EndTime: 2019-12-05 19:01:04
% DurationCPUTime: 17.13s
% Computational Cost: add. (95562->606), mult. (123918->924), div. (0->0), fcn. (84400->10), ass. (0->418)
t695 = cos(qJ(2));
t683 = qJDD(1) + qJDD(2);
t690 = sin(qJ(2));
t725 = t683 * t690;
t685 = qJD(1) + qJD(2);
t753 = t685 ^ 2;
t653 = t753 * t695 + t725;
t635 = pkin(6) * t653 - g(1) * t695;
t691 = sin(qJ(1));
t696 = cos(qJ(1));
t723 = t683 * t695;
t656 = t753 * t690 - t723;
t761 = t653 * t691 + t656 * t696;
t762 = pkin(6) * t656 - g(1) * t690;
t771 = pkin(5) * t761 + t635 * t691 + t696 * t762;
t605 = t653 * t696 - t656 * t691;
t770 = pkin(5) * t605 + t635 * t696 - t691 * t762;
t671 = g(2) * t691 - g(3) * t696;
t698 = qJD(1) ^ 2;
t659 = -pkin(1) * t698 + t671;
t672 = g(2) * t696 + g(3) * t691;
t700 = qJDD(1) * pkin(1) + t672;
t611 = t659 * t690 - t695 * t700;
t612 = t695 * t659 + t690 * t700;
t707 = t611 * t690 + t695 * t612;
t558 = t611 * t695 - t612 * t690;
t738 = t558 * t696;
t504 = -t691 * t707 + t738;
t739 = t558 * t691;
t768 = -t696 * t707 - t739;
t687 = sin(qJ(5));
t688 = sin(qJ(4));
t693 = cos(qJ(4));
t694 = cos(qJ(3));
t689 = sin(qJ(3));
t720 = t685 * t689;
t638 = -t693 * t694 * t685 + t688 * t720;
t640 = (t688 * t694 + t689 * t693) * t685;
t692 = cos(qJ(5));
t583 = t692 * t638 + t640 * t687;
t585 = -t638 * t687 + t640 * t692;
t528 = t585 * t583;
t682 = qJDD(3) + qJDD(4);
t705 = qJDD(5) + t682;
t758 = -t528 + t705;
t766 = t687 * t758;
t602 = t640 * t638;
t756 = -t602 + t682;
t765 = t688 * t756;
t764 = t692 * t758;
t763 = t693 * t756;
t684 = qJD(3) + qJD(4);
t680 = qJD(5) + t684;
t577 = t680 * t583;
t718 = qJD(3) * t685;
t709 = t694 * t718;
t726 = t683 * t689;
t646 = t709 + t726;
t710 = t689 * t718;
t724 = t683 * t694;
t701 = t710 - t724;
t706 = t646 * t688 + t693 * t701;
t562 = -t640 * qJD(4) - t706;
t563 = -t638 * qJD(4) + t693 * t646 - t688 * t701;
t699 = qJD(5) * t583 - t562 * t687 - t563 * t692;
t757 = -t577 - t699;
t630 = t684 * t638;
t542 = -t630 - t563;
t755 = -t630 + t563;
t708 = -t692 * t562 + t563 * t687;
t463 = (qJD(5) - t680) * t585 + t708;
t538 = (qJD(4) - t684) * t640 + t706;
t581 = t583 ^ 2;
t582 = t585 ^ 2;
t754 = t638 ^ 2;
t637 = t640 ^ 2;
t676 = t680 ^ 2;
t681 = t684 ^ 2;
t752 = t694 ^ 2;
t600 = -pkin(2) * t753 + pkin(7) * t683 + t612;
t733 = t600 * t689;
t534 = qJDD(3) * pkin(3) - pkin(8) * t646 - t733 + (-g(1) + (pkin(3) * t720 + pkin(8) * qJD(3)) * t685) * t694;
t580 = -t689 * g(1) + t694 * t600;
t662 = qJD(3) * pkin(3) - pkin(8) * t720;
t675 = t752 * t753;
t535 = -pkin(3) * t675 - pkin(8) * t701 - qJD(3) * t662 + t580;
t481 = -t693 * t534 + t535 * t688;
t439 = t756 * pkin(4) + t542 * pkin(9) - t481;
t482 = t688 * t534 + t693 * t535;
t622 = pkin(4) * t684 - pkin(9) * t640;
t441 = -pkin(4) * t754 + pkin(9) * t562 - t622 * t684 + t482;
t389 = -t692 * t439 + t441 * t687;
t390 = t687 * t439 + t692 * t441;
t353 = -t389 * t692 + t390 * t687;
t749 = t353 * t688;
t748 = t353 * t693;
t424 = -t481 * t693 + t482 * t688;
t747 = t424 * t689;
t746 = t424 * t694;
t599 = -t683 * pkin(2) - t753 * pkin(7) + t611;
t536 = t701 * pkin(3) - pkin(8) * t675 + t662 * t720 + t599;
t472 = -t562 * pkin(4) - t754 * pkin(9) + t622 * t640 + t536;
t745 = t472 * t687;
t744 = t472 * t692;
t521 = t528 + t705;
t743 = t521 * t687;
t742 = t521 * t692;
t741 = t536 * t688;
t740 = t536 * t693;
t593 = t602 + t682;
t737 = t593 * t688;
t736 = t593 * t693;
t735 = t599 * t689;
t734 = t599 * t694;
t647 = -0.2e1 * t710 + t724;
t732 = t647 * t694;
t670 = t694 * t753 * t689;
t660 = qJDD(3) + t670;
t731 = t660 * t689;
t661 = qJDD(3) - t670;
t730 = t661 * t689;
t729 = t661 * t694;
t728 = t680 * t687;
t727 = t680 * t692;
t722 = t684 * t688;
t721 = t684 * t693;
t686 = t689 ^ 2;
t719 = t753 * t686;
t715 = t686 + t752;
t714 = t690 * t528;
t713 = t695 * t528;
t712 = t690 * t602;
t711 = t695 * t602;
t354 = t389 * t687 + t692 * t390;
t425 = t481 * t688 + t693 * t482;
t579 = g(1) * t694 + t733;
t518 = t579 * t689 + t694 * t580;
t704 = t690 * t670;
t703 = t695 * t670;
t663 = qJDD(1) * t691 + t696 * t698;
t702 = pkin(5) * t663 - g(1) * t696;
t517 = t579 * t694 - t580 * t689;
t626 = t671 * t696 - t672 * t691;
t625 = -t671 * t691 - t672 * t696;
t697 = qJD(3) ^ 2;
t668 = -t675 - t697;
t667 = t675 - t697;
t666 = -t697 - t719;
t665 = t697 - t719;
t664 = -qJDD(1) * t696 + t691 * t698;
t658 = t675 - t719;
t657 = t675 + t719;
t652 = t694 * t660;
t651 = t715 * t683;
t645 = 0.2e1 * t709 + t726;
t644 = -pkin(5) * t664 + g(1) * t691;
t643 = t715 * t718;
t628 = -t637 + t681;
t627 = -t681 + t754;
t624 = qJDD(3) * t690 + t643 * t695;
t623 = -qJDD(3) * t695 + t643 * t690;
t621 = t646 * t694 - t686 * t718;
t620 = t689 * t701 - t752 * t718;
t619 = -t637 - t681;
t618 = -t666 * t689 - t729;
t617 = -t665 * t689 + t652;
t616 = t668 * t694 - t731;
t615 = t667 * t694 - t730;
t614 = t666 * t694 - t730;
t613 = t668 * t689 + t652;
t607 = t651 * t695 - t657 * t690;
t604 = t651 * t690 + t657 * t695;
t603 = -t645 * t689 + t732;
t601 = -t637 + t754;
t598 = t617 * t695 + t689 * t725;
t597 = t615 * t695 + t690 * t724;
t596 = t617 * t690 - t689 * t723;
t595 = t615 * t690 - t694 * t723;
t591 = t621 * t695 - t704;
t590 = t620 * t695 + t704;
t589 = t621 * t690 + t703;
t588 = t620 * t690 - t703;
t587 = -t681 - t754;
t576 = t618 * t695 + t645 * t690;
t575 = t616 * t695 - t647 * t690;
t574 = t618 * t690 - t645 * t695;
t573 = t616 * t690 + t647 * t695;
t572 = -t582 + t676;
t571 = t581 - t676;
t570 = (-t638 * t693 + t640 * t688) * t684;
t569 = (-t638 * t688 - t640 * t693) * t684;
t567 = -t582 - t676;
t566 = -t637 - t754;
t565 = t603 * t695 - t658 * t690;
t564 = t603 * t690 + t658 * t695;
t555 = pkin(1) * g(1) + pkin(6) * t707;
t554 = t627 * t693 - t737;
t553 = -t628 * t688 + t763;
t552 = t627 * t688 + t736;
t551 = t628 * t693 + t765;
t550 = -pkin(7) * t614 + t734;
t549 = -pkin(7) * t613 + t735;
t548 = -t619 * t688 - t736;
t547 = t619 * t693 - t737;
t546 = -pkin(2) * t614 + t580;
t545 = -pkin(2) * t613 + t579;
t544 = -t604 * t691 + t607 * t696;
t543 = -t604 * t696 - t607 * t691;
t537 = (qJD(4) + t684) * t640 + t706;
t533 = t563 * t693 - t640 * t722;
t532 = t563 * t688 + t640 * t721;
t531 = -t562 * t688 + t638 * t721;
t530 = t562 * t693 + t638 * t722;
t525 = -t582 + t581;
t524 = t587 * t693 - t765;
t523 = t587 * t688 + t763;
t519 = -t676 - t581;
t515 = (-t583 * t692 + t585 * t687) * t680;
t514 = (-t583 * t687 - t585 * t692) * t680;
t513 = -t574 * t691 + t576 * t696;
t512 = -t573 * t691 + t575 * t696;
t511 = -t574 * t696 - t576 * t691;
t510 = -t573 * t696 - t575 * t691;
t509 = -t569 * t689 + t570 * t694;
t508 = t509 * t695 + t682 * t690;
t507 = t509 * t690 - t682 * t695;
t506 = -t581 - t582;
t503 = -pkin(6) * t604 + t517 * t695;
t502 = pkin(6) * t607 + t517 * t690;
t501 = t518 * t695 + t599 * t690;
t500 = t518 * t690 - t599 * t695;
t499 = -t552 * t689 + t554 * t694;
t498 = -t551 * t689 + t553 * t694;
t497 = t571 * t692 - t743;
t496 = -t572 * t687 + t764;
t495 = t571 * t687 + t742;
t494 = t572 * t692 + t766;
t493 = -t567 * t687 - t742;
t492 = t567 * t692 - t743;
t491 = -t547 * t689 + t548 * t694;
t490 = t547 * t694 + t548 * t689;
t489 = -pkin(8) * t547 + t740;
t488 = -t538 * t693 - t542 * t688;
t487 = -t537 * t693 - t688 * t755;
t486 = -t538 * t688 + t542 * t693;
t485 = -t537 * t688 + t693 * t755;
t483 = -qJD(5) * t585 - t708;
t480 = -pkin(8) * t523 + t741;
t478 = -t532 * t689 + t533 * t694;
t477 = -t530 * t689 + t531 * t694;
t476 = -t523 * t689 + t524 * t694;
t475 = t523 * t694 + t524 * t689;
t474 = t519 * t692 - t766;
t473 = t519 * t687 + t764;
t471 = -pkin(6) * t574 - t546 * t690 + t550 * t695;
t470 = -pkin(6) * t573 - t545 * t690 + t549 * t695;
t469 = -t514 * t688 + t515 * t693;
t468 = t514 * t693 + t515 * t688;
t467 = -t577 + t699;
t462 = (qJD(5) + t680) * t585 + t708;
t461 = t478 * t695 + t712;
t460 = t477 * t695 - t712;
t459 = -t585 * t728 - t692 * t699;
t458 = t478 * t690 - t711;
t457 = t477 * t690 + t711;
t456 = t585 * t727 - t687 * t699;
t455 = -t483 * t687 + t583 * t727;
t454 = t483 * t692 + t583 * t728;
t453 = -pkin(1) * t614 + pkin(6) * t576 + t546 * t695 + t550 * t690;
t452 = -pkin(1) * t613 + pkin(6) * t575 + t545 * t695 + t549 * t690;
t451 = t499 * t695 - t538 * t690;
t450 = t498 * t695 - t542 * t690;
t449 = t499 * t690 + t538 * t695;
t448 = t498 * t690 + t542 * t695;
t447 = -pkin(3) * t755 + pkin(8) * t548 + t741;
t446 = t491 * t695 + t690 * t755;
t445 = t491 * t690 - t695 * t755;
t444 = -pkin(3) * t537 + pkin(8) * t524 - t740;
t443 = t476 * t695 + t537 * t690;
t442 = t476 * t690 - t537 * t695;
t438 = -t500 * t691 + t501 * t696;
t437 = -t500 * t696 - t501 * t691;
t434 = -t495 * t688 + t497 * t693;
t433 = -t494 * t688 + t496 * t693;
t432 = t495 * t693 + t497 * t688;
t431 = t494 * t693 + t496 * t688;
t430 = -t492 * t688 + t493 * t693;
t429 = t492 * t693 + t493 * t688;
t428 = -t486 * t689 + t488 * t694;
t427 = -t485 * t689 + t487 * t694;
t426 = t486 * t694 + t488 * t689;
t423 = -pkin(6) * t500 - (pkin(2) * t690 - pkin(7) * t695) * t517;
t422 = -pkin(9) * t492 + t744;
t421 = t427 * t695 - t601 * t690;
t420 = t427 * t690 + t601 * t695;
t419 = -t473 * t688 + t474 * t693;
t418 = t473 * t693 + t474 * t688;
t417 = -pkin(9) * t473 + t745;
t416 = t428 * t695 + t566 * t690;
t415 = t428 * t690 - t566 * t695;
t414 = -pkin(2) * t490 - pkin(3) * t547 + t482;
t413 = -t468 * t689 + t469 * t694;
t412 = -t463 * t692 - t467 * t687;
t411 = -t462 * t692 - t687 * t757;
t410 = -t463 * t687 + t467 * t692;
t409 = -t462 * t687 + t692 * t757;
t408 = -pkin(3) * t536 + pkin(8) * t425;
t407 = t413 * t695 + t690 * t705;
t406 = t413 * t690 - t695 * t705;
t405 = -t456 * t688 + t459 * t693;
t404 = -t454 * t688 + t455 * t693;
t403 = t456 * t693 + t459 * t688;
t402 = t454 * t693 + t455 * t688;
t401 = -pkin(2) * t475 - pkin(3) * t523 + t481;
t400 = pkin(6) * t501 - (-pkin(2) * t695 - pkin(7) * t690 - pkin(1)) * t517;
t399 = -t445 * t691 + t446 * t696;
t398 = -t445 * t696 - t446 * t691;
t397 = -pkin(2) * t426 - pkin(3) * t486;
t396 = -pkin(8) * t486 - t424;
t395 = -t442 * t691 + t443 * t696;
t394 = -t442 * t696 - t443 * t691;
t393 = -pkin(7) * t490 - t447 * t689 + t489 * t694;
t392 = -pkin(4) * t757 + pkin(9) * t493 + t745;
t391 = -pkin(3) * t566 + pkin(8) * t488 + t425;
t387 = -pkin(4) * t462 + pkin(9) * t474 - t744;
t386 = -t432 * t689 + t434 * t694;
t385 = -t431 * t689 + t433 * t694;
t384 = -pkin(7) * t475 - t444 * t689 + t480 * t694;
t383 = -t429 * t689 + t430 * t694;
t382 = t429 * t694 + t430 * t689;
t381 = t425 * t694 - t747;
t380 = t425 * t689 + t746;
t379 = -t418 * t689 + t419 * t694;
t378 = t418 * t694 + t419 * t689;
t377 = t381 * t695 + t536 * t690;
t376 = t381 * t690 - t536 * t695;
t375 = -t415 * t691 + t416 * t696;
t374 = -t415 * t696 - t416 * t691;
t373 = t386 * t695 - t463 * t690;
t372 = t385 * t695 - t467 * t690;
t371 = t386 * t690 + t463 * t695;
t370 = t385 * t690 + t467 * t695;
t369 = t383 * t695 + t690 * t757;
t368 = t383 * t690 - t695 * t757;
t367 = -t410 * t688 + t412 * t693;
t366 = -t409 * t688 + t411 * t693;
t365 = t410 * t693 + t412 * t688;
t364 = t409 * t693 + t411 * t688;
t363 = -t403 * t689 + t405 * t694;
t362 = -t402 * t689 + t404 * t694;
t361 = t363 * t695 + t714;
t360 = t362 * t695 - t714;
t359 = t363 * t690 - t713;
t358 = t362 * t690 + t713;
t357 = t379 * t695 + t462 * t690;
t356 = t379 * t690 - t462 * t695;
t355 = -pkin(2) * t380 - pkin(3) * t424;
t352 = -pkin(6) * t445 + t393 * t695 - t414 * t690;
t351 = -pkin(8) * t429 - t392 * t688 + t422 * t693;
t350 = -pkin(6) * t442 + t384 * t695 - t401 * t690;
t349 = -pkin(1) * t490 + pkin(6) * t446 + t393 * t690 + t414 * t695;
t348 = -pkin(4) * t472 + pkin(9) * t354;
t347 = -pkin(8) * t418 - t387 * t688 + t417 * t693;
t346 = -pkin(7) * t426 - t391 * t689 + t396 * t694;
t345 = -pkin(3) * t757 + pkin(8) * t430 + t392 * t693 + t422 * t688;
t344 = -pkin(7) * t380 - pkin(8) * t746 - t408 * t689;
t343 = -pkin(1) * t475 + pkin(6) * t443 + t384 * t690 + t401 * t695;
t342 = -t376 * t691 + t377 * t696;
t341 = -t376 * t696 - t377 * t691;
t340 = -pkin(9) * t410 - t353;
t339 = -pkin(3) * t462 + pkin(8) * t419 + t387 * t693 + t417 * t688;
t338 = -pkin(2) * t382 - pkin(3) * t429 - pkin(4) * t492 + t390;
t337 = -t368 * t691 + t369 * t696;
t336 = -t368 * t696 - t369 * t691;
t335 = -pkin(4) * t506 + pkin(9) * t412 + t354;
t334 = -t365 * t689 + t367 * t694;
t333 = -t364 * t689 + t366 * t694;
t332 = t365 * t694 + t367 * t689;
t331 = t333 * t695 - t525 * t690;
t330 = t333 * t690 + t525 * t695;
t329 = t334 * t695 + t506 * t690;
t328 = t334 * t690 - t506 * t695;
t327 = -pkin(2) * t378 - pkin(3) * t418 - pkin(4) * t473 + t389;
t326 = -t356 * t691 + t357 * t696;
t325 = -t356 * t696 - t357 * t691;
t324 = -pkin(6) * t415 + t346 * t695 - t397 * t690;
t323 = t354 * t693 - t749;
t322 = t354 * t688 + t748;
t321 = -pkin(1) * t426 + pkin(6) * t416 + t346 * t690 + t397 * t695;
t320 = -pkin(2) * t332 - pkin(3) * t365 - pkin(4) * t410;
t319 = -pkin(7) * t382 - t345 * t689 + t351 * t694;
t318 = -pkin(6) * t376 + t344 * t695 - t355 * t690;
t317 = -t328 * t691 + t329 * t696;
t316 = -t328 * t696 - t329 * t691;
t315 = -pkin(7) * t378 - t339 * t689 + t347 * t694;
t314 = -pkin(1) * t380 + pkin(6) * t377 + t344 * t690 + t355 * t695;
t313 = -pkin(8) * t365 - t335 * t688 + t340 * t693;
t312 = -pkin(3) * t506 + pkin(8) * t367 + t335 * t693 + t340 * t688;
t311 = -t322 * t689 + t323 * t694;
t310 = t322 * t694 + t323 * t689;
t309 = -pkin(8) * t322 - pkin(9) * t748 - t348 * t688;
t308 = t311 * t695 + t472 * t690;
t307 = t311 * t690 - t472 * t695;
t306 = -pkin(3) * t472 + pkin(8) * t323 - pkin(9) * t749 + t348 * t693;
t305 = -pkin(6) * t368 + t319 * t695 - t338 * t690;
t304 = -pkin(1) * t382 + pkin(6) * t369 + t319 * t690 + t338 * t695;
t303 = -pkin(6) * t356 + t315 * t695 - t327 * t690;
t302 = -pkin(1) * t378 + pkin(6) * t357 + t315 * t690 + t327 * t695;
t301 = -pkin(2) * t310 - pkin(3) * t322 - pkin(4) * t353;
t300 = -t307 * t691 + t308 * t696;
t299 = -t307 * t696 - t308 * t691;
t298 = -pkin(7) * t332 - t312 * t689 + t313 * t694;
t297 = -pkin(7) * t310 - t306 * t689 + t309 * t694;
t296 = -pkin(6) * t328 + t298 * t695 - t320 * t690;
t295 = -pkin(1) * t332 + pkin(6) * t329 + t298 * t690 + t320 * t695;
t294 = -pkin(6) * t307 + t297 * t695 - t301 * t690;
t293 = -pkin(1) * t310 + pkin(6) * t308 + t297 * t690 + t301 * t695;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t613, t614, 0, -t517, 0, 0, 0, 0, 0, 0, t475, t490, t426, t380, 0, 0, 0, 0, 0, 0, t378, t382, t332, t310; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t664, t663, 0, t625, 0, 0, 0, 0, 0, 0, t761, t605, 0, t504, 0, 0, 0, 0, 0, 0, t510, t511, t543, t437, 0, 0, 0, 0, 0, 0, t394, t398, t374, t341, 0, 0, 0, 0, 0, 0, t325, t336, t316, t299; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t663, t664, 0, t626, 0, 0, 0, 0, 0, 0, -t605, t761, 0, -t768, 0, 0, 0, 0, 0, 0, t512, t513, t544, t438, 0, 0, 0, 0, 0, 0, t395, t399, t375, t342, 0, 0, 0, 0, 0, 0, t326, t337, t317, t300; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t672, -t671, 0, 0, 0, 0, 0, 0, 0, t683, -pkin(1) * t656 - t611, -pkin(1) * t653 - t612, 0, -pkin(1) * t558, (t646 + t709) * t689, t645 * t694 + t647 * t689, t665 * t694 + t731, t732, t667 * t689 + t729, 0, pkin(1) * t573 + pkin(2) * t647 + pkin(7) * t616 - t734, pkin(1) * t574 - pkin(2) * t645 + pkin(7) * t618 + t735, pkin(1) * t604 + pkin(2) * t657 + pkin(7) * t651 + t518, pkin(1) * t500 - pkin(2) * t599 + pkin(7) * t518, t532 * t694 + t533 * t689, t485 * t694 + t487 * t689, t551 * t694 + t553 * t689, t530 * t694 + t531 * t689, t552 * t694 + t554 * t689, t569 * t694 + t570 * t689, pkin(1) * t442 - pkin(2) * t537 + pkin(7) * t476 + t444 * t694 + t480 * t689, pkin(1) * t445 - pkin(2) * t755 + pkin(7) * t491 + t447 * t694 + t489 * t689, pkin(1) * t415 - pkin(2) * t566 + pkin(7) * t428 + t391 * t694 + t396 * t689, pkin(1) * t376 - pkin(2) * t536 + pkin(7) * t381 - pkin(8) * t747 + t408 * t694, t403 * t694 + t405 * t689, t364 * t694 + t366 * t689, t431 * t694 + t433 * t689, t402 * t694 + t404 * t689, t432 * t694 + t434 * t689, t468 * t694 + t469 * t689, pkin(1) * t356 - pkin(2) * t462 + pkin(7) * t379 + t339 * t694 + t347 * t689, pkin(1) * t368 - pkin(2) * t757 + pkin(7) * t383 + t345 * t694 + t351 * t689, pkin(1) * t328 - pkin(2) * t506 + pkin(7) * t334 + t312 * t694 + t313 * t689, pkin(1) * t307 - pkin(2) * t472 + pkin(7) * t311 + t306 * t694 + t309 * t689; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t663, 0, t664, 0, t702, t644, -t626, -pkin(5) * t626, 0, 0, -t605, 0, t761, 0, t770, -t771, t768, pkin(5) * t768 - pkin(6) * t739 - t555 * t696, -t589 * t696 - t591 * t691, -t564 * t696 - t565 * t691, -t596 * t696 - t598 * t691, -t588 * t696 - t590 * t691, -t595 * t696 - t597 * t691, -t623 * t696 - t624 * t691, -pkin(5) * t512 - t452 * t696 - t470 * t691, -pkin(5) * t513 - t453 * t696 - t471 * t691, -pkin(5) * t544 - t502 * t696 - t503 * t691, -pkin(5) * t438 - t400 * t696 - t423 * t691, -t458 * t696 - t461 * t691, -t420 * t696 - t421 * t691, -t448 * t696 - t450 * t691, -t457 * t696 - t460 * t691, -t449 * t696 - t451 * t691, -t507 * t696 - t508 * t691, -pkin(5) * t395 - t343 * t696 - t350 * t691, -pkin(5) * t399 - t349 * t696 - t352 * t691, -pkin(5) * t375 - t321 * t696 - t324 * t691, -pkin(5) * t342 - t314 * t696 - t318 * t691, -t359 * t696 - t361 * t691, -t330 * t696 - t331 * t691, -t370 * t696 - t372 * t691, -t358 * t696 - t360 * t691, -t371 * t696 - t373 * t691, -t406 * t696 - t407 * t691, -pkin(5) * t326 - t302 * t696 - t303 * t691, -pkin(5) * t337 - t304 * t696 - t305 * t691, -pkin(5) * t317 - t295 * t696 - t296 * t691, -pkin(5) * t300 - t293 * t696 - t294 * t691; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t664, 0, -t663, 0, -t644, t702, t625, pkin(5) * t625, 0, 0, -t761, 0, -t605, 0, t771, t770, t504, pkin(5) * t504 + pkin(6) * t738 - t555 * t691, -t589 * t691 + t591 * t696, -t564 * t691 + t565 * t696, -t596 * t691 + t598 * t696, -t588 * t691 + t590 * t696, -t595 * t691 + t597 * t696, -t623 * t691 + t624 * t696, pkin(5) * t510 - t452 * t691 + t470 * t696, pkin(5) * t511 - t453 * t691 + t471 * t696, pkin(5) * t543 - t502 * t691 + t503 * t696, pkin(5) * t437 - t400 * t691 + t423 * t696, -t458 * t691 + t461 * t696, -t420 * t691 + t421 * t696, -t448 * t691 + t450 * t696, -t457 * t691 + t460 * t696, -t449 * t691 + t451 * t696, -t507 * t691 + t508 * t696, pkin(5) * t394 - t343 * t691 + t350 * t696, pkin(5) * t398 - t349 * t691 + t352 * t696, pkin(5) * t374 - t321 * t691 + t324 * t696, pkin(5) * t341 - t314 * t691 + t318 * t696, -t359 * t691 + t361 * t696, -t330 * t691 + t331 * t696, -t370 * t691 + t372 * t696, -t358 * t691 + t360 * t696, -t371 * t691 + t373 * t696, -t406 * t691 + t407 * t696, pkin(5) * t325 - t302 * t691 + t303 * t696, pkin(5) * t336 - t304 * t691 + t305 * t696, pkin(5) * t316 - t295 * t691 + t296 * t696, pkin(5) * t299 - t293 * t691 + t294 * t696;];
tauB_reg = t1;
