% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4,d5]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 19:01
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRRR6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR6_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR6_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR6_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRR6_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 19:01:25
% EndTime: 2019-12-05 19:01:28
% DurationCPUTime: 3.34s
% Computational Cost: add. (25285->221), mult. (32763->316), div. (0->0), fcn. (22363->10), ass. (0->183)
t1478 = qJD(1) + qJD(2);
t1475 = t1478 ^ 2;
t1476 = qJDD(1) + qJDD(2);
t1483 = sin(qJ(2));
t1488 = cos(qJ(2));
t1454 = t1475 * t1483 - t1476 * t1488;
t1484 = sin(qJ(1));
t1489 = cos(qJ(1));
t1497 = -t1475 * t1488 - t1476 * t1483;
t1528 = t1454 * t1484 + t1489 * t1497;
t1527 = t1454 * t1489 - t1484 * t1497;
t1477 = qJD(3) + qJD(4);
t1473 = qJD(5) + t1477;
t1524 = qJD(5) + t1473;
t1481 = sin(qJ(4));
t1486 = cos(qJ(4));
t1487 = cos(qJ(3));
t1509 = t1478 * t1487;
t1482 = sin(qJ(3));
t1510 = t1478 * t1482;
t1440 = t1481 * t1510 - t1486 * t1509;
t1442 = (t1481 * t1487 + t1482 * t1486) * t1478;
t1480 = sin(qJ(5));
t1485 = cos(qJ(5));
t1418 = t1485 * t1440 + t1442 * t1480;
t1523 = t1418 ^ 2;
t1420 = -t1440 * t1480 + t1442 * t1485;
t1522 = t1420 ^ 2;
t1521 = t1440 ^ 2;
t1520 = t1442 ^ 2;
t1519 = t1473 ^ 2;
t1518 = t1477 ^ 2;
t1517 = t1487 ^ 2;
t1516 = t1418 * t1420;
t1467 = t1484 * g(2) - g(3) * t1489;
t1491 = qJD(1) ^ 2;
t1457 = -pkin(1) * t1491 + t1467;
t1468 = g(2) * t1489 + g(3) * t1484;
t1494 = qJDD(1) * pkin(1) + t1468;
t1430 = t1488 * t1457 + t1483 * t1494;
t1426 = -pkin(2) * t1475 + pkin(7) * t1476 + t1430;
t1515 = t1426 * t1482;
t1514 = t1440 * t1442;
t1513 = t1475 * t1482;
t1512 = t1475 * t1517;
t1511 = t1477 * t1440;
t1508 = t1482 * t1476;
t1507 = t1487 * t1476;
t1506 = qJD(4) - t1477;
t1505 = qJD(5) - t1473;
t1501 = qJD(3) * t1509;
t1446 = t1501 + t1508;
t1395 = qJDD(3) * pkin(3) - pkin(8) * t1446 - t1515 + (pkin(8) * qJD(3) * t1478 + pkin(3) * t1513 - g(1)) * t1487;
t1417 = -t1482 * g(1) + t1487 * t1426;
t1460 = qJD(3) * pkin(3) - pkin(8) * t1510;
t1502 = qJD(3) * t1510;
t1496 = -t1502 + t1507;
t1396 = -pkin(3) * t1512 + t1496 * pkin(8) - qJD(3) * t1460 + t1417;
t1375 = t1481 * t1395 + t1486 * t1396;
t1504 = qJDD(3) + qJDD(4);
t1479 = t1482 ^ 2;
t1503 = t1479 + t1517;
t1500 = -qJDD(5) - t1504;
t1374 = t1486 * t1395 - t1481 * t1396;
t1492 = -t1486 * t1446 - t1481 * t1496;
t1408 = -t1440 * qJD(4) - t1492;
t1498 = t1446 * t1481 - t1486 * t1496;
t1495 = qJD(4) * t1442 + t1498;
t1499 = -t1408 * t1480 - t1485 * t1495;
t1429 = -t1457 * t1483 + t1488 * t1494;
t1423 = t1504 - t1514;
t1425 = -t1476 * pkin(2) - t1475 * pkin(7) - t1429;
t1493 = -t1485 * t1408 + t1480 * t1495;
t1397 = -t1496 * pkin(3) - pkin(8) * t1512 + t1460 * t1510 + t1425;
t1490 = qJD(3) ^ 2;
t1466 = t1487 * t1513;
t1464 = -t1490 - t1512;
t1463 = -t1475 * t1479 - t1490;
t1462 = -qJDD(1) * t1489 + t1484 * t1491;
t1461 = qJDD(1) * t1484 + t1489 * t1491;
t1459 = -qJDD(3) + t1466;
t1458 = qJDD(3) + t1466;
t1456 = t1503 * t1475;
t1451 = t1503 * t1476;
t1447 = -0.2e1 * t1502 + t1507;
t1445 = 0.2e1 * t1501 + t1508;
t1436 = pkin(4) * t1477 - pkin(9) * t1442;
t1435 = -t1518 - t1520;
t1434 = t1459 * t1487 - t1463 * t1482;
t1433 = -t1458 * t1482 + t1464 * t1487;
t1432 = t1459 * t1482 + t1463 * t1487;
t1431 = t1458 * t1487 + t1464 * t1482;
t1428 = t1451 * t1488 - t1456 * t1483;
t1427 = t1451 * t1483 + t1456 * t1488;
t1424 = -t1504 - t1514;
t1422 = -t1518 - t1521;
t1416 = -g(1) * t1487 - t1515;
t1414 = t1434 * t1488 + t1445 * t1483;
t1413 = t1433 * t1488 - t1447 * t1483;
t1412 = t1434 * t1483 - t1445 * t1488;
t1411 = t1433 * t1483 + t1447 * t1488;
t1410 = -t1519 - t1522;
t1409 = -t1520 - t1521;
t1405 = -t1429 * t1483 + t1430 * t1488;
t1404 = t1429 * t1488 + t1430 * t1483;
t1403 = t1424 * t1486 - t1435 * t1481;
t1402 = t1424 * t1481 + t1435 * t1486;
t1401 = t1506 * t1440 + t1492;
t1400 = t1408 - t1511;
t1399 = -t1506 * t1442 - t1498;
t1398 = (qJD(4) + t1477) * t1442 + t1498;
t1391 = t1422 * t1486 - t1423 * t1481;
t1390 = t1422 * t1481 + t1423 * t1486;
t1389 = t1500 - t1516;
t1388 = -t1500 - t1516;
t1387 = -t1519 - t1523;
t1386 = -t1416 * t1482 + t1417 * t1487;
t1385 = t1416 * t1487 + t1417 * t1482;
t1384 = -t1522 - t1523;
t1383 = t1386 * t1488 + t1425 * t1483;
t1382 = t1386 * t1483 - t1425 * t1488;
t1381 = t1389 * t1485 - t1410 * t1480;
t1380 = t1389 * t1480 + t1410 * t1485;
t1379 = -t1402 * t1482 + t1403 * t1487;
t1378 = t1402 * t1487 + t1403 * t1482;
t1377 = t1399 * t1486 - t1401 * t1481;
t1376 = t1399 * t1481 + t1401 * t1486;
t1373 = -t1390 * t1482 + t1391 * t1487;
t1372 = t1390 * t1487 + t1391 * t1482;
t1371 = t1387 * t1485 - t1388 * t1480;
t1370 = t1387 * t1480 + t1388 * t1485;
t1369 = t1495 * pkin(4) - t1521 * pkin(9) + t1436 * t1442 + t1397;
t1368 = t1505 * t1418 + t1493;
t1367 = -t1524 * t1418 - t1493;
t1366 = -t1505 * t1420 + t1499;
t1365 = t1524 * t1420 - t1499;
t1364 = t1379 * t1488 + t1400 * t1483;
t1363 = t1379 * t1483 - t1400 * t1488;
t1362 = t1373 * t1488 + t1398 * t1483;
t1361 = t1373 * t1483 - t1398 * t1488;
t1360 = -t1521 * pkin(4) - t1495 * pkin(9) - t1477 * t1436 + t1375;
t1359 = (-t1408 - t1511) * pkin(9) + t1423 * pkin(4) + t1374;
t1358 = -t1380 * t1481 + t1381 * t1486;
t1357 = t1380 * t1486 + t1381 * t1481;
t1356 = -t1376 * t1482 + t1377 * t1487;
t1355 = t1376 * t1487 + t1377 * t1482;
t1354 = -t1374 * t1481 + t1375 * t1486;
t1353 = t1374 * t1486 + t1375 * t1481;
t1352 = -t1370 * t1481 + t1371 * t1486;
t1351 = t1370 * t1486 + t1371 * t1481;
t1350 = t1356 * t1488 + t1409 * t1483;
t1349 = t1356 * t1483 - t1409 * t1488;
t1348 = t1366 * t1485 - t1368 * t1480;
t1347 = t1366 * t1480 + t1368 * t1485;
t1346 = t1359 * t1480 + t1360 * t1485;
t1345 = t1359 * t1485 - t1360 * t1480;
t1344 = -t1357 * t1482 + t1358 * t1487;
t1343 = t1357 * t1487 + t1358 * t1482;
t1342 = -t1353 * t1482 + t1354 * t1487;
t1341 = t1353 * t1487 + t1354 * t1482;
t1340 = -t1351 * t1482 + t1352 * t1487;
t1339 = t1351 * t1487 + t1352 * t1482;
t1338 = t1342 * t1488 + t1397 * t1483;
t1337 = t1342 * t1483 - t1397 * t1488;
t1336 = t1344 * t1488 + t1367 * t1483;
t1335 = t1344 * t1483 - t1367 * t1488;
t1334 = -t1347 * t1481 + t1348 * t1486;
t1333 = t1347 * t1486 + t1348 * t1481;
t1332 = t1340 * t1488 + t1365 * t1483;
t1331 = t1340 * t1483 - t1365 * t1488;
t1330 = -t1345 * t1480 + t1346 * t1485;
t1329 = t1345 * t1485 + t1346 * t1480;
t1328 = -t1333 * t1482 + t1334 * t1487;
t1327 = t1333 * t1487 + t1334 * t1482;
t1326 = t1328 * t1488 + t1384 * t1483;
t1325 = t1328 * t1483 - t1384 * t1488;
t1324 = -t1329 * t1481 + t1330 * t1486;
t1323 = t1329 * t1486 + t1330 * t1481;
t1322 = -t1323 * t1482 + t1324 * t1487;
t1321 = t1323 * t1487 + t1324 * t1482;
t1320 = t1322 * t1488 + t1369 * t1483;
t1319 = t1322 * t1483 - t1369 * t1488;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1431, t1432, 0, t1385, 0, 0, 0, 0, 0, 0, t1372, t1378, t1355, t1341, 0, 0, 0, 0, 0, 0, t1339, t1343, t1327, t1321; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1462, t1461, 0, -t1467 * t1484 - t1468 * t1489, 0, 0, 0, 0, 0, 0, t1527, -t1528, 0, -t1404 * t1489 - t1405 * t1484, 0, 0, 0, 0, 0, 0, -t1411 * t1489 - t1413 * t1484, -t1412 * t1489 - t1414 * t1484, -t1427 * t1489 - t1428 * t1484, -t1382 * t1489 - t1383 * t1484, 0, 0, 0, 0, 0, 0, -t1361 * t1489 - t1362 * t1484, -t1363 * t1489 - t1364 * t1484, -t1349 * t1489 - t1350 * t1484, -t1337 * t1489 - t1338 * t1484, 0, 0, 0, 0, 0, 0, -t1331 * t1489 - t1332 * t1484, -t1335 * t1489 - t1336 * t1484, -t1325 * t1489 - t1326 * t1484, -t1319 * t1489 - t1320 * t1484; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1461, t1462, 0, t1467 * t1489 - t1468 * t1484, 0, 0, 0, 0, 0, 0, t1528, t1527, 0, -t1404 * t1484 + t1405 * t1489, 0, 0, 0, 0, 0, 0, -t1411 * t1484 + t1413 * t1489, -t1412 * t1484 + t1414 * t1489, -t1427 * t1484 + t1428 * t1489, -t1382 * t1484 + t1383 * t1489, 0, 0, 0, 0, 0, 0, -t1361 * t1484 + t1362 * t1489, -t1363 * t1484 + t1364 * t1489, -t1349 * t1484 + t1350 * t1489, -t1337 * t1484 + t1338 * t1489, 0, 0, 0, 0, 0, 0, -t1331 * t1484 + t1332 * t1489, -t1335 * t1484 + t1336 * t1489, -t1325 * t1484 + t1326 * t1489, -t1319 * t1484 + t1320 * t1489; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1491, -qJDD(1), 0, t1467, 0, 0, 0, 0, 0, 0, t1497, t1454, 0, t1405, 0, 0, 0, 0, 0, 0, t1413, t1414, t1428, t1383, 0, 0, 0, 0, 0, 0, t1362, t1364, t1350, t1338, 0, 0, 0, 0, 0, 0, t1332, t1336, t1326, t1320; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1491, 0, t1468, 0, 0, 0, 0, 0, 0, -t1454, t1497, 0, t1404, 0, 0, 0, 0, 0, 0, t1411, t1412, t1427, t1382, 0, 0, 0, 0, 0, 0, t1361, t1363, t1349, t1337, 0, 0, 0, 0, 0, 0, t1331, t1335, t1325, t1319; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1431, t1432, 0, t1385, 0, 0, 0, 0, 0, 0, t1372, t1378, t1355, t1341, 0, 0, 0, 0, 0, 0, t1339, t1343, t1327, t1321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1475, -t1476, 0, t1430, 0, 0, 0, 0, 0, 0, t1433, t1434, t1451, t1386, 0, 0, 0, 0, 0, 0, t1373, t1379, t1356, t1342, 0, 0, 0, 0, 0, 0, t1340, t1344, t1328, t1322; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1476, -t1475, 0, t1429, 0, 0, 0, 0, 0, 0, t1447, -t1445, t1456, -t1425, 0, 0, 0, 0, 0, 0, -t1398, -t1400, -t1409, -t1397, 0, 0, 0, 0, 0, 0, -t1365, -t1367, -t1384, -t1369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1431, t1432, 0, t1385, 0, 0, 0, 0, 0, 0, t1372, t1378, t1355, t1341, 0, 0, 0, 0, 0, 0, t1339, t1343, t1327, t1321; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1464, t1459, t1507, t1417, 0, 0, 0, 0, 0, 0, t1391, t1403, t1377, t1354, 0, 0, 0, 0, 0, 0, t1352, t1358, t1334, t1324; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1458, t1463, -t1508, t1416, 0, 0, 0, 0, 0, 0, t1390, t1402, t1376, t1353, 0, 0, 0, 0, 0, 0, t1351, t1357, t1333, t1323; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1447, t1445, -t1456, t1425, 0, 0, 0, 0, 0, 0, t1398, t1400, t1409, t1397, 0, 0, 0, 0, 0, 0, t1365, t1367, t1384, t1369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1422, t1424, t1399, t1375, 0, 0, 0, 0, 0, 0, t1371, t1381, t1348, t1330; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1423, t1435, t1401, t1374, 0, 0, 0, 0, 0, 0, t1370, t1380, t1347, t1329; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1398, t1400, t1409, t1397, 0, 0, 0, 0, 0, 0, t1365, t1367, t1384, t1369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1387, t1389, t1366, t1346; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1388, t1410, t1368, t1345; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1365, t1367, t1384, t1369;];
f_new_reg = t1;
