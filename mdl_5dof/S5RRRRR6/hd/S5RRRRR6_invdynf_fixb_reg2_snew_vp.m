% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4,d5]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 12:16
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRRR6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR6_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR6_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR6_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRR6_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 12:16:00
% EndTime: 2020-01-03 12:16:03
% DurationCPUTime: 3.07s
% Computational Cost: add. (25285->221), mult. (32763->316), div. (0->0), fcn. (22363->10), ass. (0->183)
t1490 = qJD(1) + qJD(2);
t1487 = t1490 ^ 2;
t1488 = qJDD(1) + qJDD(2);
t1495 = sin(qJ(2));
t1500 = cos(qJ(2));
t1466 = t1495 * t1487 - t1500 * t1488;
t1496 = sin(qJ(1));
t1501 = cos(qJ(1));
t1509 = -t1500 * t1487 - t1495 * t1488;
t1540 = t1496 * t1466 + t1501 * t1509;
t1539 = -t1501 * t1466 + t1496 * t1509;
t1489 = qJD(3) + qJD(4);
t1485 = qJD(5) + t1489;
t1536 = qJD(5) + t1485;
t1493 = sin(qJ(4));
t1498 = cos(qJ(4));
t1499 = cos(qJ(3));
t1523 = t1490 * t1499;
t1494 = sin(qJ(3));
t1524 = t1490 * t1494;
t1452 = t1493 * t1524 - t1498 * t1523;
t1454 = (t1493 * t1499 + t1494 * t1498) * t1490;
t1492 = sin(qJ(5));
t1497 = cos(qJ(5));
t1430 = t1497 * t1452 + t1492 * t1454;
t1535 = t1430 ^ 2;
t1432 = -t1492 * t1452 + t1497 * t1454;
t1534 = t1432 ^ 2;
t1533 = t1452 ^ 2;
t1532 = t1454 ^ 2;
t1531 = t1485 ^ 2;
t1530 = t1489 ^ 2;
t1529 = t1499 ^ 2;
t1528 = t1432 * t1430;
t1527 = t1454 * t1452;
t1526 = t1487 * t1494;
t1525 = t1489 * t1452;
t1479 = -t1496 * g(2) + t1501 * g(3);
t1503 = qJD(1) ^ 2;
t1469 = -t1503 * pkin(1) + t1479;
t1480 = -t1501 * g(2) - t1496 * g(3);
t1506 = qJDD(1) * pkin(1) + t1480;
t1442 = t1500 * t1469 + t1495 * t1506;
t1438 = -t1487 * pkin(2) + t1488 * pkin(7) + t1442;
t1522 = t1494 * t1438;
t1521 = t1494 * t1488;
t1520 = t1499 * t1488;
t1519 = t1529 * t1487;
t1518 = qJD(4) - t1489;
t1517 = qJD(5) - t1485;
t1513 = qJD(3) * t1523;
t1458 = t1513 + t1521;
t1407 = qJDD(3) * pkin(3) - t1458 * pkin(8) - t1522 + (qJD(3) * t1490 * pkin(8) + pkin(3) * t1526 - g(1)) * t1499;
t1429 = -t1494 * g(1) + t1499 * t1438;
t1472 = qJD(3) * pkin(3) - pkin(8) * t1524;
t1514 = qJD(3) * t1524;
t1508 = -t1514 + t1520;
t1408 = -pkin(3) * t1519 + t1508 * pkin(8) - qJD(3) * t1472 + t1429;
t1387 = t1493 * t1407 + t1498 * t1408;
t1516 = qJDD(3) + qJDD(4);
t1491 = t1494 ^ 2;
t1515 = t1491 + t1529;
t1512 = -qJDD(5) - t1516;
t1386 = t1498 * t1407 - t1493 * t1408;
t1504 = -t1498 * t1458 - t1493 * t1508;
t1420 = -t1452 * qJD(4) - t1504;
t1510 = t1493 * t1458 - t1498 * t1508;
t1507 = t1454 * qJD(4) + t1510;
t1511 = -t1492 * t1420 - t1497 * t1507;
t1441 = -t1495 * t1469 + t1500 * t1506;
t1435 = t1516 - t1527;
t1437 = -t1488 * pkin(2) - t1487 * pkin(7) - t1441;
t1505 = -t1497 * t1420 + t1492 * t1507;
t1409 = -t1508 * pkin(3) - pkin(8) * t1519 + t1472 * t1524 + t1437;
t1502 = qJD(3) ^ 2;
t1478 = t1499 * t1526;
t1476 = -t1502 - t1519;
t1475 = -t1491 * t1487 - t1502;
t1474 = t1501 * qJDD(1) - t1496 * t1503;
t1473 = -t1496 * qJDD(1) - t1501 * t1503;
t1471 = -qJDD(3) + t1478;
t1470 = qJDD(3) + t1478;
t1468 = t1515 * t1487;
t1463 = t1515 * t1488;
t1459 = -0.2e1 * t1514 + t1520;
t1457 = 0.2e1 * t1513 + t1521;
t1448 = t1489 * pkin(4) - t1454 * pkin(9);
t1447 = -t1530 - t1532;
t1446 = t1499 * t1471 - t1494 * t1475;
t1445 = -t1494 * t1470 + t1499 * t1476;
t1444 = t1494 * t1471 + t1499 * t1475;
t1443 = t1499 * t1470 + t1494 * t1476;
t1440 = t1500 * t1463 - t1495 * t1468;
t1439 = t1495 * t1463 + t1500 * t1468;
t1436 = -t1516 - t1527;
t1434 = -t1530 - t1533;
t1428 = -t1499 * g(1) - t1522;
t1426 = t1500 * t1446 + t1495 * t1457;
t1425 = t1500 * t1445 - t1495 * t1459;
t1424 = t1495 * t1446 - t1500 * t1457;
t1423 = t1495 * t1445 + t1500 * t1459;
t1422 = -t1531 - t1534;
t1421 = -t1532 - t1533;
t1417 = -t1495 * t1441 + t1500 * t1442;
t1416 = t1500 * t1441 + t1495 * t1442;
t1415 = t1498 * t1436 - t1493 * t1447;
t1414 = t1493 * t1436 + t1498 * t1447;
t1413 = t1518 * t1452 + t1504;
t1412 = t1420 - t1525;
t1411 = -t1518 * t1454 - t1510;
t1410 = (qJD(4) + t1489) * t1454 + t1510;
t1403 = t1498 * t1434 - t1493 * t1435;
t1402 = t1493 * t1434 + t1498 * t1435;
t1401 = t1512 - t1528;
t1400 = -t1512 - t1528;
t1399 = -t1531 - t1535;
t1398 = -t1494 * t1428 + t1499 * t1429;
t1397 = t1499 * t1428 + t1494 * t1429;
t1396 = -t1534 - t1535;
t1395 = t1500 * t1398 + t1495 * t1437;
t1394 = t1495 * t1398 - t1500 * t1437;
t1393 = t1497 * t1401 - t1492 * t1422;
t1392 = t1492 * t1401 + t1497 * t1422;
t1391 = -t1494 * t1414 + t1499 * t1415;
t1390 = t1499 * t1414 + t1494 * t1415;
t1389 = t1498 * t1411 - t1493 * t1413;
t1388 = t1493 * t1411 + t1498 * t1413;
t1385 = -t1494 * t1402 + t1499 * t1403;
t1384 = t1499 * t1402 + t1494 * t1403;
t1383 = t1497 * t1399 - t1492 * t1400;
t1382 = t1492 * t1399 + t1497 * t1400;
t1381 = t1507 * pkin(4) - t1533 * pkin(9) + t1454 * t1448 + t1409;
t1380 = t1517 * t1430 + t1505;
t1379 = -t1536 * t1430 - t1505;
t1378 = -t1517 * t1432 + t1511;
t1377 = t1536 * t1432 - t1511;
t1376 = t1500 * t1391 + t1495 * t1412;
t1375 = t1495 * t1391 - t1500 * t1412;
t1374 = t1500 * t1385 + t1495 * t1410;
t1373 = t1495 * t1385 - t1500 * t1410;
t1372 = -t1533 * pkin(4) - t1507 * pkin(9) - t1489 * t1448 + t1387;
t1371 = (-t1420 - t1525) * pkin(9) + t1435 * pkin(4) + t1386;
t1370 = -t1493 * t1392 + t1498 * t1393;
t1369 = t1498 * t1392 + t1493 * t1393;
t1368 = -t1494 * t1388 + t1499 * t1389;
t1367 = t1499 * t1388 + t1494 * t1389;
t1366 = -t1493 * t1386 + t1498 * t1387;
t1365 = t1498 * t1386 + t1493 * t1387;
t1364 = -t1493 * t1382 + t1498 * t1383;
t1363 = t1498 * t1382 + t1493 * t1383;
t1362 = t1500 * t1368 + t1495 * t1421;
t1361 = t1495 * t1368 - t1500 * t1421;
t1360 = t1497 * t1378 - t1492 * t1380;
t1359 = t1492 * t1378 + t1497 * t1380;
t1358 = t1492 * t1371 + t1497 * t1372;
t1357 = t1497 * t1371 - t1492 * t1372;
t1356 = -t1494 * t1369 + t1499 * t1370;
t1355 = t1499 * t1369 + t1494 * t1370;
t1354 = -t1494 * t1365 + t1499 * t1366;
t1353 = t1499 * t1365 + t1494 * t1366;
t1352 = -t1494 * t1363 + t1499 * t1364;
t1351 = t1499 * t1363 + t1494 * t1364;
t1350 = t1500 * t1354 + t1495 * t1409;
t1349 = t1495 * t1354 - t1500 * t1409;
t1348 = t1500 * t1356 + t1495 * t1379;
t1347 = t1495 * t1356 - t1500 * t1379;
t1346 = -t1493 * t1359 + t1498 * t1360;
t1345 = t1498 * t1359 + t1493 * t1360;
t1344 = t1500 * t1352 + t1495 * t1377;
t1343 = t1495 * t1352 - t1500 * t1377;
t1342 = -t1492 * t1357 + t1497 * t1358;
t1341 = t1497 * t1357 + t1492 * t1358;
t1340 = -t1494 * t1345 + t1499 * t1346;
t1339 = t1499 * t1345 + t1494 * t1346;
t1338 = t1500 * t1340 + t1495 * t1396;
t1337 = t1495 * t1340 - t1500 * t1396;
t1336 = -t1493 * t1341 + t1498 * t1342;
t1335 = t1498 * t1341 + t1493 * t1342;
t1334 = -t1494 * t1335 + t1499 * t1336;
t1333 = t1499 * t1335 + t1494 * t1336;
t1332 = t1500 * t1334 + t1495 * t1381;
t1331 = t1495 * t1334 - t1500 * t1381;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1443, t1444, 0, t1397, 0, 0, 0, 0, 0, 0, t1384, t1390, t1367, t1353, 0, 0, 0, 0, 0, 0, t1351, t1355, t1339, t1333; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1474, t1473, 0, t1496 * t1479 + t1501 * t1480, 0, 0, 0, 0, 0, 0, t1539, t1540, 0, t1501 * t1416 + t1496 * t1417, 0, 0, 0, 0, 0, 0, t1501 * t1423 + t1496 * t1425, t1501 * t1424 + t1496 * t1426, t1501 * t1439 + t1496 * t1440, t1501 * t1394 + t1496 * t1395, 0, 0, 0, 0, 0, 0, t1501 * t1373 + t1496 * t1374, t1501 * t1375 + t1496 * t1376, t1501 * t1361 + t1496 * t1362, t1501 * t1349 + t1496 * t1350, 0, 0, 0, 0, 0, 0, t1501 * t1343 + t1496 * t1344, t1501 * t1347 + t1496 * t1348, t1501 * t1337 + t1496 * t1338, t1501 * t1331 + t1496 * t1332; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1473, t1474, 0, -t1501 * t1479 + t1496 * t1480, 0, 0, 0, 0, 0, 0, -t1540, t1539, 0, t1496 * t1416 - t1501 * t1417, 0, 0, 0, 0, 0, 0, t1496 * t1423 - t1501 * t1425, t1496 * t1424 - t1501 * t1426, t1496 * t1439 - t1501 * t1440, t1496 * t1394 - t1501 * t1395, 0, 0, 0, 0, 0, 0, t1496 * t1373 - t1501 * t1374, t1496 * t1375 - t1501 * t1376, t1496 * t1361 - t1501 * t1362, t1496 * t1349 - t1501 * t1350, 0, 0, 0, 0, 0, 0, t1496 * t1343 - t1501 * t1344, t1496 * t1347 - t1501 * t1348, t1496 * t1337 - t1501 * t1338, t1496 * t1331 - t1501 * t1332; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1503, -qJDD(1), 0, t1479, 0, 0, 0, 0, 0, 0, t1509, t1466, 0, t1417, 0, 0, 0, 0, 0, 0, t1425, t1426, t1440, t1395, 0, 0, 0, 0, 0, 0, t1374, t1376, t1362, t1350, 0, 0, 0, 0, 0, 0, t1344, t1348, t1338, t1332; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1503, 0, t1480, 0, 0, 0, 0, 0, 0, -t1466, t1509, 0, t1416, 0, 0, 0, 0, 0, 0, t1423, t1424, t1439, t1394, 0, 0, 0, 0, 0, 0, t1373, t1375, t1361, t1349, 0, 0, 0, 0, 0, 0, t1343, t1347, t1337, t1331; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1443, t1444, 0, t1397, 0, 0, 0, 0, 0, 0, t1384, t1390, t1367, t1353, 0, 0, 0, 0, 0, 0, t1351, t1355, t1339, t1333; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1487, -t1488, 0, t1442, 0, 0, 0, 0, 0, 0, t1445, t1446, t1463, t1398, 0, 0, 0, 0, 0, 0, t1385, t1391, t1368, t1354, 0, 0, 0, 0, 0, 0, t1352, t1356, t1340, t1334; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1488, -t1487, 0, t1441, 0, 0, 0, 0, 0, 0, t1459, -t1457, t1468, -t1437, 0, 0, 0, 0, 0, 0, -t1410, -t1412, -t1421, -t1409, 0, 0, 0, 0, 0, 0, -t1377, -t1379, -t1396, -t1381; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1443, t1444, 0, t1397, 0, 0, 0, 0, 0, 0, t1384, t1390, t1367, t1353, 0, 0, 0, 0, 0, 0, t1351, t1355, t1339, t1333; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1476, t1471, t1520, t1429, 0, 0, 0, 0, 0, 0, t1403, t1415, t1389, t1366, 0, 0, 0, 0, 0, 0, t1364, t1370, t1346, t1336; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1470, t1475, -t1521, t1428, 0, 0, 0, 0, 0, 0, t1402, t1414, t1388, t1365, 0, 0, 0, 0, 0, 0, t1363, t1369, t1345, t1335; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1459, t1457, -t1468, t1437, 0, 0, 0, 0, 0, 0, t1410, t1412, t1421, t1409, 0, 0, 0, 0, 0, 0, t1377, t1379, t1396, t1381; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1434, t1436, t1411, t1387, 0, 0, 0, 0, 0, 0, t1383, t1393, t1360, t1342; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1435, t1447, t1413, t1386, 0, 0, 0, 0, 0, 0, t1382, t1392, t1359, t1341; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1410, t1412, t1421, t1409, 0, 0, 0, 0, 0, 0, t1377, t1379, t1396, t1381; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1399, t1401, t1378, t1358; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1400, t1422, t1380, t1357; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1377, t1379, t1396, t1381;];
f_new_reg = t1;
