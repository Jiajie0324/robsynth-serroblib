% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRRRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4,d5]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 19:01
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRRRR6_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR6_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR6_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR6_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR6_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRR6_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 19:01:04
% EndTime: 2019-12-05 19:01:25
% DurationCPUTime: 21.14s
% Computational Cost: add. (163384->654), mult. (211504->931), div. (0->0), fcn. (143913->10), ass. (0->452)
t1218 = cos(qJ(2));
t1206 = qJDD(1) + qJDD(2);
t1213 = sin(qJ(2));
t1269 = t1213 * t1206;
t1208 = qJD(1) + qJD(2);
t1298 = t1208 ^ 2;
t1174 = t1218 * t1298 + t1269;
t1262 = t1218 * t1206;
t1177 = t1213 * t1298 - t1262;
t1214 = sin(qJ(1));
t1219 = cos(qJ(1));
t1123 = t1214 * t1174 + t1219 * t1177;
t1155 = pkin(6) * t1174 - t1218 * g(1);
t1307 = pkin(6) * t1177 - t1213 * g(1);
t1318 = pkin(5) * t1123 + t1214 * t1155 + t1219 * t1307;
t1306 = t1219 * t1174 - t1214 * t1177;
t1317 = pkin(5) * t1306 + t1219 * t1155 - t1214 * t1307;
t1192 = t1214 * g(2) - t1219 * g(3);
t1221 = qJD(1) ^ 2;
t1180 = -t1221 * pkin(1) + t1192;
t1193 = t1219 * g(2) + t1214 * g(3);
t1223 = qJDD(1) * pkin(1) + t1193;
t1127 = t1213 * t1180 - t1218 * t1223;
t1128 = t1218 * t1180 + t1213 * t1223;
t1243 = t1213 * t1127 + t1218 * t1128;
t1069 = t1218 * t1127 - t1213 * t1128;
t1261 = t1219 * t1069;
t1315 = -t1214 * t1243 + t1261;
t1268 = t1214 * t1069;
t1314 = -t1219 * t1243 - t1268;
t1210 = sin(qJ(5));
t1211 = sin(qJ(4));
t1216 = cos(qJ(4));
t1217 = cos(qJ(3));
t1278 = t1208 * t1217;
t1212 = sin(qJ(3));
t1279 = t1208 * t1212;
t1158 = t1211 * t1279 - t1216 * t1278;
t1159 = (t1211 * t1217 + t1212 * t1216) * t1208;
t1215 = cos(qJ(5));
t1097 = t1215 * t1158 + t1210 * t1159;
t1099 = -t1210 * t1158 + t1215 * t1159;
t1037 = t1099 * t1097;
t1205 = qJDD(3) + qJDD(4);
t1199 = qJDD(5) + t1205;
t1302 = -t1037 + t1199;
t1311 = t1210 * t1302;
t1119 = t1159 * t1158;
t1301 = -t1119 + t1205;
t1310 = t1211 * t1301;
t1309 = t1215 * t1302;
t1308 = t1216 * t1301;
t1207 = qJD(3) + qJD(4);
t1202 = qJD(5) + t1207;
t1089 = t1202 * t1097;
t1195 = qJD(3) * t1278;
t1270 = t1212 * t1206;
t1168 = t1195 + t1270;
t1254 = qJD(3) * t1279;
t1263 = t1217 * t1206;
t1226 = -t1254 + t1263;
t1074 = -t1158 * qJD(4) + t1216 * t1168 + t1211 * t1226;
t1242 = t1211 * t1168 - t1216 * t1226;
t1225 = t1159 * qJD(4) + t1242;
t989 = -t1097 * qJD(5) + t1215 * t1074 - t1210 * t1225;
t1305 = -t1089 + t989;
t1117 = -t1298 * pkin(2) + t1206 * pkin(7) + t1128;
t1273 = t1212 * t1117;
t1091 = t1217 * g(1) + t1273;
t1092 = -t1212 * g(1) + t1217 * t1117;
t1027 = t1212 * t1091 + t1217 * t1092;
t1150 = t1207 * t1158;
t1300 = -t1150 + t1074;
t1054 = t1150 + t1074;
t1244 = t1210 * t1074 + t1215 * t1225;
t961 = (qJD(5) - t1202) * t1099 + t1244;
t1050 = (qJD(4) - t1207) * t1159 + t1242;
t1095 = t1097 ^ 2;
t1096 = t1099 ^ 2;
t1299 = t1158 ^ 2;
t1157 = t1159 ^ 2;
t1198 = t1202 ^ 2;
t1204 = t1207 ^ 2;
t1297 = t1217 ^ 2;
t1043 = qJDD(3) * pkin(3) - t1168 * pkin(8) - t1273 + (-g(1) + (pkin(3) * t1279 + pkin(8) * qJD(3)) * t1208) * t1217;
t1183 = qJD(3) * pkin(3) - pkin(8) * t1279;
t1197 = t1297 * t1298;
t1044 = -pkin(3) * t1197 + pkin(8) * t1226 - qJD(3) * t1183 + t1092;
t985 = -t1216 * t1043 + t1211 * t1044;
t986 = t1211 * t1043 + t1216 * t1044;
t919 = t1211 * t986 - t1216 * t985;
t1296 = pkin(3) * t919;
t991 = -t1050 * t1211 - t1216 * t1054;
t1295 = pkin(3) * t991;
t1116 = -t1206 * pkin(2) - t1298 * pkin(7) + t1127;
t1048 = -t1226 * pkin(3) - pkin(8) * t1197 + t1183 * t1279 + t1116;
t1144 = t1207 * pkin(4) - t1159 * pkin(9);
t971 = pkin(4) * t1225 - t1299 * pkin(9) + t1159 * t1144 + t1048;
t1292 = t1210 * t971;
t933 = t1301 * pkin(4) - t1054 * pkin(9) - t985;
t935 = -t1299 * pkin(4) - pkin(9) * t1225 - t1207 * t1144 + t986;
t883 = t1210 * t935 - t1215 * t933;
t884 = t1210 * t933 + t1215 * t935;
t840 = t1210 * t884 - t1215 * t883;
t1291 = t1211 * t840;
t1290 = t1212 * t919;
t1289 = t1215 * t971;
t1288 = t1216 * t840;
t1287 = t1217 * t919;
t1286 = qJD(3) * t1208;
t1285 = t1202 * t1099;
t1284 = t1202 * t1210;
t1283 = t1202 * t1215;
t1282 = t1207 * t1159;
t1281 = t1207 * t1211;
t1280 = t1207 * t1216;
t1209 = t1212 ^ 2;
t1277 = t1209 * t1298;
t1030 = t1037 + t1199;
t1276 = t1210 * t1030;
t1275 = t1211 * t1048;
t1109 = t1119 + t1205;
t1274 = t1211 * t1109;
t1100 = t1212 * t1116;
t1191 = t1217 * t1298 * t1212;
t1181 = qJDD(3) + t1191;
t1272 = t1212 * t1181;
t1182 = qJDD(3) - t1191;
t1271 = t1212 * t1182;
t1267 = t1215 * t1030;
t1266 = t1216 * t1048;
t1265 = t1216 * t1109;
t1101 = t1217 * t1116;
t1169 = -0.2e1 * t1254 + t1263;
t1129 = t1217 * t1169;
t1264 = t1217 * t1182;
t1258 = -pkin(2) * t1116 + pkin(7) * t1027;
t1257 = t1209 + t1297;
t841 = t1210 * t883 + t1215 * t884;
t807 = t1211 * t841 + t1288;
t839 = pkin(4) * t840;
t1256 = pkin(3) * t807 + t839;
t964 = t1089 + t989;
t904 = -t1210 * t961 - t1215 * t964;
t906 = t1210 * t964 - t1215 * t961;
t856 = t1211 * t906 + t1216 * t904;
t902 = pkin(4) * t904;
t1255 = pkin(3) * t856 + t902;
t1253 = t1213 * t1037;
t1252 = t1213 * t1119;
t1251 = t1218 * t1037;
t1250 = t1218 * t1119;
t1220 = qJD(3) ^ 2;
t1187 = -t1220 - t1277;
t1140 = -t1212 * t1187 - t1264;
t1167 = 0.2e1 * t1195 + t1270;
t1249 = -pkin(2) * t1167 + pkin(7) * t1140 + t1100;
t1189 = -t1197 - t1220;
t1138 = t1217 * t1189 - t1272;
t1248 = pkin(2) * t1169 + pkin(7) * t1138 - t1101;
t920 = t1211 * t985 + t1216 * t986;
t808 = t1216 * t841 - t1291;
t833 = -pkin(4) * t971 + pkin(9) * t841;
t786 = -pkin(3) * t971 + pkin(8) * t808 - pkin(9) * t1291 + t1216 * t833;
t791 = -pkin(8) * t807 - pkin(9) * t1288 - t1211 * t833;
t794 = -t1212 * t807 + t1217 * t808;
t1247 = -pkin(2) * t971 + pkin(7) * t794 + t1212 * t791 + t1217 * t786;
t960 = (qJD(5) + t1202) * t1099 + t1244;
t1028 = -t1198 - t1095;
t974 = t1215 * t1028 - t1311;
t881 = -pkin(4) * t960 + pkin(9) * t974 - t1289;
t973 = t1210 * t1028 + t1309;
t912 = -pkin(9) * t973 + t1292;
t914 = -t1211 * t973 + t1216 * t974;
t824 = -pkin(3) * t960 + pkin(8) * t914 + t1211 * t912 + t1216 * t881;
t913 = t1211 * t974 + t1216 * t973;
t832 = -pkin(8) * t913 - t1211 * t881 + t1216 * t912;
t869 = -t1212 * t913 + t1217 * t914;
t1246 = -pkin(2) * t960 + pkin(7) * t869 + t1212 * t832 + t1217 * t824;
t1078 = -t1096 - t1198;
t1001 = -t1210 * t1078 - t1267;
t887 = -pkin(4) * t1305 + pkin(9) * t1001 + t1292;
t1000 = t1215 * t1078 - t1276;
t917 = -pkin(9) * t1000 + t1289;
t927 = -t1211 * t1000 + t1216 * t1001;
t829 = -pkin(3) * t1305 + pkin(8) * t927 + t1211 * t917 + t1216 * t887;
t926 = t1216 * t1000 + t1211 * t1001;
t837 = -pkin(8) * t926 - t1211 * t887 + t1216 * t917;
t875 = -t1212 * t926 + t1217 * t927;
t1245 = -pkin(2) * t1305 + pkin(7) * t875 + t1212 * t837 + t1217 * t829;
t1017 = -t1095 - t1096;
t821 = -pkin(4) * t1017 + pkin(9) * t906 + t841;
t825 = -pkin(9) * t904 - t840;
t858 = -t1211 * t904 + t1216 * t906;
t797 = -pkin(3) * t1017 + pkin(8) * t858 + t1211 * t825 + t1216 * t821;
t799 = -pkin(8) * t856 - t1211 * t821 + t1216 * t825;
t820 = -t1212 * t856 + t1217 * t858;
t1241 = -pkin(2) * t1017 + pkin(7) * t820 + t1212 * t799 + t1217 * t797;
t1077 = -t1157 - t1299;
t993 = -t1050 * t1216 + t1211 * t1054;
t886 = -pkin(3) * t1077 + pkin(8) * t993 + t920;
t890 = -pkin(8) * t991 - t919;
t925 = -t1212 * t991 + t1217 * t993;
t1240 = -pkin(2) * t1077 + pkin(7) * t925 + t1212 * t890 + t1217 * t886;
t1049 = (qJD(4) + t1207) * t1159 + t1242;
t1103 = -t1204 - t1299;
t1033 = t1216 * t1103 - t1310;
t939 = -pkin(3) * t1049 + pkin(8) * t1033 - t1266;
t1032 = t1211 * t1103 + t1308;
t977 = -t1212 * t1032 + t1217 * t1033;
t984 = -pkin(8) * t1032 + t1275;
t1239 = -pkin(2) * t1049 + pkin(7) * t977 + t1212 * t984 + t1217 * t939;
t1141 = -t1157 - t1204;
t1058 = -t1211 * t1141 - t1265;
t943 = -pkin(3) * t1300 + pkin(8) * t1058 + t1275;
t1057 = t1216 * t1141 - t1274;
t995 = -pkin(8) * t1057 + t1266;
t998 = -t1212 * t1057 + t1217 * t1058;
t1238 = -pkin(2) * t1300 + pkin(7) * t998 + t1212 * t995 + t1217 * t943;
t1237 = t1213 * t1191;
t1236 = t1218 * t1191;
t1172 = t1257 * t1206;
t1178 = t1197 + t1277;
t1235 = pkin(2) * t1178 + pkin(7) * t1172 + t1027;
t1234 = pkin(3) * t1057 - t986;
t1233 = pkin(4) * t973 - t883;
t1184 = t1214 * qJDD(1) + t1219 * t1221;
t1232 = pkin(5) * t1184 - t1219 * g(1);
t1026 = t1217 * t1091 - t1212 * t1092;
t1231 = t1219 * t1192 - t1214 * t1193;
t1230 = -t1214 * t1192 - t1219 * t1193;
t1229 = pkin(3) * t1032 - t985;
t1228 = pkin(4) * t1000 - t884;
t872 = t1217 * t920 - t1290;
t901 = -pkin(3) * t1048 + pkin(8) * t920;
t1227 = -pkin(2) * t1048 + pkin(7) * t872 - pkin(8) * t1290 + t1217 * t901;
t1224 = pkin(3) * t913 + t1233;
t1222 = pkin(3) * t926 + t1228;
t1188 = t1197 - t1220;
t1186 = t1220 - t1277;
t1185 = -t1219 * qJDD(1) + t1214 * t1221;
t1179 = -t1197 + t1277;
t1173 = t1217 * t1181;
t1165 = -pkin(5) * t1185 + t1214 * g(1);
t1164 = t1257 * t1286;
t1148 = -t1157 + t1204;
t1147 = -t1204 + t1299;
t1146 = t1213 * qJDD(3) + t1218 * t1164;
t1145 = -t1218 * qJDD(3) + t1213 * t1164;
t1143 = t1217 * t1168 - t1209 * t1286;
t1142 = -t1212 * t1226 - t1297 * t1286;
t1139 = -t1212 * t1186 + t1173;
t1137 = t1217 * t1188 - t1271;
t1136 = t1217 * t1187 - t1271;
t1135 = t1217 * t1186 + t1272;
t1134 = t1212 * t1189 + t1173;
t1133 = t1212 * t1188 + t1264;
t1130 = (t1168 + t1195) * t1212;
t1124 = t1218 * t1172 - t1213 * t1178;
t1122 = t1213 * t1172 + t1218 * t1178;
t1121 = -t1212 * t1167 + t1129;
t1120 = t1217 * t1167 + t1212 * t1169;
t1118 = t1157 - t1299;
t1115 = t1218 * t1139 + t1212 * t1269;
t1114 = t1218 * t1137 + t1213 * t1263;
t1113 = t1213 * t1139 - t1212 * t1262;
t1112 = t1213 * t1137 - t1217 * t1262;
t1107 = t1218 * t1143 - t1237;
t1106 = t1218 * t1142 + t1237;
t1105 = t1213 * t1143 + t1236;
t1104 = t1213 * t1142 - t1236;
t1094 = -pkin(1) * t1174 - t1128;
t1093 = -pkin(1) * t1177 - t1127;
t1088 = t1218 * t1140 + t1213 * t1167;
t1087 = t1218 * t1138 - t1213 * t1169;
t1086 = t1213 * t1140 - t1218 * t1167;
t1085 = t1213 * t1138 + t1218 * t1169;
t1084 = -t1096 + t1198;
t1083 = t1095 - t1198;
t1082 = (-t1158 * t1216 + t1159 * t1211) * t1207;
t1081 = (-t1158 * t1211 - t1159 * t1216) * t1207;
t1076 = t1218 * t1121 + t1213 * t1179;
t1075 = t1213 * t1121 - t1218 * t1179;
t1066 = pkin(1) * t1069;
t1065 = pkin(1) * g(1) + pkin(6) * t1243;
t1064 = t1216 * t1147 - t1274;
t1063 = -t1211 * t1148 + t1308;
t1062 = t1211 * t1147 + t1265;
t1061 = t1216 * t1148 + t1310;
t1060 = -pkin(7) * t1136 + t1101;
t1059 = -pkin(7) * t1134 + t1100;
t1056 = -pkin(2) * t1136 + t1092;
t1055 = -pkin(2) * t1134 + t1091;
t1042 = t1216 * t1074 - t1159 * t1281;
t1041 = t1211 * t1074 + t1159 * t1280;
t1040 = t1158 * t1280 + t1211 * t1225;
t1039 = t1158 * t1281 - t1216 * t1225;
t1034 = t1096 - t1095;
t1023 = (-t1097 * t1215 + t1099 * t1210) * t1202;
t1022 = (-t1097 * t1210 - t1099 * t1215) * t1202;
t1021 = -t1212 * t1081 + t1217 * t1082;
t1020 = t1217 * t1081 + t1212 * t1082;
t1019 = t1218 * t1021 + t1213 * t1205;
t1018 = t1213 * t1021 - t1218 * t1205;
t1015 = pkin(1) * t1085 + t1248;
t1014 = pkin(1) * t1086 + t1249;
t1013 = -pkin(6) * t1122 + t1218 * t1026;
t1012 = pkin(6) * t1124 + t1213 * t1026;
t1011 = t1218 * t1027 + t1213 * t1116;
t1010 = t1213 * t1027 - t1218 * t1116;
t1009 = -t1212 * t1062 + t1217 * t1064;
t1008 = -t1212 * t1061 + t1217 * t1063;
t1007 = t1217 * t1062 + t1212 * t1064;
t1006 = t1217 * t1061 + t1212 * t1063;
t1005 = t1215 * t1083 - t1276;
t1004 = -t1210 * t1084 + t1309;
t1003 = t1210 * t1083 + t1267;
t1002 = t1215 * t1084 + t1311;
t997 = t1217 * t1057 + t1212 * t1058;
t992 = -t1216 * t1049 - t1211 * t1300;
t990 = -t1211 * t1049 + t1216 * t1300;
t988 = -t1099 * qJD(5) - t1244;
t987 = pkin(1) * t1122 + t1235;
t981 = -t1212 * t1041 + t1217 * t1042;
t980 = -t1212 * t1039 + t1217 * t1040;
t979 = t1217 * t1041 + t1212 * t1042;
t978 = t1217 * t1039 + t1212 * t1040;
t976 = t1217 * t1032 + t1212 * t1033;
t970 = -pkin(6) * t1086 - t1213 * t1056 + t1218 * t1060;
t969 = -pkin(6) * t1085 - t1213 * t1055 + t1218 * t1059;
t967 = -t1211 * t1022 + t1216 * t1023;
t966 = t1216 * t1022 + t1211 * t1023;
t957 = t1218 * t981 + t1252;
t956 = t1218 * t980 - t1252;
t955 = -t1099 * t1284 + t1215 * t989;
t954 = t1213 * t981 - t1250;
t953 = t1213 * t980 + t1250;
t952 = t1099 * t1283 + t1210 * t989;
t951 = t1097 * t1283 - t1210 * t988;
t950 = t1097 * t1284 + t1215 * t988;
t949 = -pkin(1) * t1136 + pkin(6) * t1088 + t1218 * t1056 + t1213 * t1060;
t948 = -pkin(1) * t1134 + pkin(6) * t1087 + t1218 * t1055 + t1213 * t1059;
t947 = t1218 * t1009 - t1213 * t1050;
t946 = t1218 * t1008 + t1213 * t1054;
t945 = t1213 * t1009 + t1218 * t1050;
t944 = t1213 * t1008 - t1218 * t1054;
t942 = t1213 * t1300 + t1218 * t998;
t941 = t1213 * t998 - t1218 * t1300;
t937 = t1213 * t1049 + t1218 * t977;
t936 = -t1218 * t1049 + t1213 * t977;
t934 = pkin(1) * t1010 + t1258;
t931 = -t1211 * t1003 + t1216 * t1005;
t930 = -t1211 * t1002 + t1216 * t1004;
t929 = t1216 * t1003 + t1211 * t1005;
t928 = t1216 * t1002 + t1211 * t1004;
t924 = -t1212 * t990 + t1217 * t992;
t923 = t1212 * t993 + t1217 * t991;
t922 = t1212 * t992 + t1217 * t990;
t918 = -pkin(6) * t1010 - (pkin(2) * t1213 - pkin(7) * t1218) * t1026;
t916 = t1213 * t1118 + t1218 * t924;
t915 = -t1218 * t1118 + t1213 * t924;
t911 = t1213 * t1077 + t1218 * t925;
t910 = -t1218 * t1077 + t1213 * t925;
t909 = -pkin(2) * t997 - t1234;
t908 = -t1212 * t966 + t1217 * t967;
t907 = t1212 * t967 + t1217 * t966;
t905 = -t1210 * t1305 - t1215 * t960;
t903 = -t1210 * t960 + t1215 * t1305;
t899 = t1213 * t1199 + t1218 * t908;
t898 = -t1218 * t1199 + t1213 * t908;
t897 = -t1211 * t952 + t1216 * t955;
t896 = -t1211 * t950 + t1216 * t951;
t895 = t1211 * t955 + t1216 * t952;
t894 = t1211 * t951 + t1216 * t950;
t893 = -pkin(2) * t976 - t1229;
t892 = pkin(6) * t1011 - (-pkin(2) * t1218 - pkin(7) * t1213 - pkin(1)) * t1026;
t891 = -pkin(2) * t923 - t1295;
t888 = -pkin(7) * t997 - t1212 * t943 + t1217 * t995;
t880 = -t1212 * t929 + t1217 * t931;
t879 = -t1212 * t928 + t1217 * t930;
t878 = t1212 * t931 + t1217 * t929;
t877 = t1212 * t930 + t1217 * t928;
t876 = -pkin(7) * t976 - t1212 * t939 + t1217 * t984;
t874 = t1212 * t927 + t1217 * t926;
t871 = t1212 * t920 + t1287;
t868 = t1212 * t914 + t1217 * t913;
t866 = t1213 * t1048 + t1218 * t872;
t865 = -t1218 * t1048 + t1213 * t872;
t864 = -t1213 * t961 + t1218 * t880;
t863 = t1213 * t964 + t1218 * t879;
t862 = t1213 * t880 + t1218 * t961;
t861 = t1213 * t879 - t1218 * t964;
t860 = t1213 * t1305 + t1218 * t875;
t859 = t1213 * t875 - t1218 * t1305;
t857 = -t1211 * t903 + t1216 * t905;
t855 = t1211 * t905 + t1216 * t903;
t854 = pkin(1) * t941 + t1238;
t853 = -t1212 * t895 + t1217 * t897;
t852 = -t1212 * t894 + t1217 * t896;
t851 = t1212 * t897 + t1217 * t895;
t850 = t1212 * t896 + t1217 * t894;
t849 = pkin(1) * t936 + t1239;
t848 = t1218 * t853 + t1253;
t847 = t1218 * t852 - t1253;
t846 = t1213 * t853 - t1251;
t845 = t1213 * t852 + t1251;
t844 = t1213 * t960 + t1218 * t869;
t843 = t1213 * t869 - t1218 * t960;
t842 = -pkin(2) * t871 - t1296;
t838 = -pkin(6) * t941 - t1213 * t909 + t1218 * t888;
t835 = -pkin(6) * t936 - t1213 * t893 + t1218 * t876;
t834 = -pkin(1) * t997 + pkin(6) * t942 + t1213 * t888 + t1218 * t909;
t830 = -pkin(7) * t923 - t1212 * t886 + t1217 * t890;
t827 = -pkin(7) * t871 - pkin(8) * t1287 - t1212 * t901;
t826 = -pkin(1) * t976 + pkin(6) * t937 + t1213 * t876 + t1218 * t893;
t822 = -pkin(2) * t874 - t1222;
t819 = -t1212 * t855 + t1217 * t857;
t818 = t1212 * t858 + t1217 * t856;
t817 = t1212 * t857 + t1217 * t855;
t815 = t1213 * t1034 + t1218 * t819;
t814 = -t1218 * t1034 + t1213 * t819;
t813 = t1213 * t1017 + t1218 * t820;
t812 = -t1218 * t1017 + t1213 * t820;
t811 = pkin(1) * t910 + t1240;
t810 = -pkin(2) * t868 - t1224;
t809 = -pkin(6) * t910 - t1213 * t891 + t1218 * t830;
t806 = pkin(1) * t865 + t1227;
t805 = -pkin(1) * t923 + pkin(6) * t911 + t1213 * t830 + t1218 * t891;
t804 = -pkin(2) * t818 - t1255;
t803 = -pkin(7) * t874 - t1212 * t829 + t1217 * t837;
t802 = -pkin(6) * t865 - t1213 * t842 + t1218 * t827;
t801 = -pkin(7) * t868 - t1212 * t824 + t1217 * t832;
t800 = -pkin(1) * t871 + pkin(6) * t866 + t1213 * t827 + t1218 * t842;
t795 = pkin(1) * t859 + t1245;
t793 = t1212 * t808 + t1217 * t807;
t789 = t1213 * t971 + t1218 * t794;
t788 = t1213 * t794 - t1218 * t971;
t787 = pkin(1) * t843 + t1246;
t784 = -pkin(6) * t859 - t1213 * t822 + t1218 * t803;
t783 = -pkin(1) * t874 + pkin(6) * t860 + t1213 * t803 + t1218 * t822;
t782 = -pkin(6) * t843 - t1213 * t810 + t1218 * t801;
t781 = -pkin(1) * t868 + pkin(6) * t844 + t1213 * t801 + t1218 * t810;
t780 = -pkin(2) * t793 - t1256;
t779 = -pkin(7) * t818 - t1212 * t797 + t1217 * t799;
t778 = pkin(1) * t812 + t1241;
t777 = -pkin(7) * t793 - t1212 * t786 + t1217 * t791;
t776 = -pkin(6) * t812 - t1213 * t804 + t1218 * t779;
t775 = -pkin(1) * t818 + pkin(6) * t813 + t1213 * t779 + t1218 * t804;
t774 = pkin(1) * t788 + t1247;
t773 = -pkin(6) * t788 - t1213 * t780 + t1218 * t777;
t772 = -pkin(1) * t793 + pkin(6) * t789 + t1213 * t777 + t1218 * t780;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t1193, -t1192, 0, 0, 0, 0, 0, 0, 0, t1206, t1093, t1094, 0, -t1066, t1130, t1120, t1135, t1129, t1133, 0, t1015, t1014, t987, t934, t979, t922, t1006, t978, t1007, t1020, t849, t854, t811, t806, t851, t817, t877, t850, t878, t907, t787, t795, t778, t774; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t1184, 0, t1185, 0, t1232, t1165, -t1231, -pkin(5) * t1231, 0, 0, -t1306, 0, t1123, 0, t1317, -t1318, t1314, pkin(5) * t1314 - pkin(6) * t1268 - t1219 * t1065, -t1219 * t1105 - t1214 * t1107, -t1219 * t1075 - t1214 * t1076, -t1219 * t1113 - t1214 * t1115, -t1219 * t1104 - t1214 * t1106, -t1219 * t1112 - t1214 * t1114, -t1219 * t1145 - t1214 * t1146, -t1214 * t969 - t1219 * t948 - pkin(5) * (-t1214 * t1085 + t1219 * t1087), -t1214 * t970 - t1219 * t949 - pkin(5) * (-t1214 * t1086 + t1219 * t1088), -t1214 * t1013 - t1219 * t1012 - pkin(5) * (-t1214 * t1122 + t1219 * t1124), -t1214 * t918 - t1219 * t892 - pkin(5) * (-t1214 * t1010 + t1219 * t1011), -t1214 * t957 - t1219 * t954, -t1214 * t916 - t1219 * t915, -t1214 * t946 - t1219 * t944, -t1214 * t956 - t1219 * t953, -t1214 * t947 - t1219 * t945, -t1219 * t1018 - t1214 * t1019, -t1214 * t835 - t1219 * t826 - pkin(5) * (-t1214 * t936 + t1219 * t937), -t1214 * t838 - t1219 * t834 - pkin(5) * (-t1214 * t941 + t1219 * t942), -t1214 * t809 - t1219 * t805 - pkin(5) * (-t1214 * t910 + t1219 * t911), -t1214 * t802 - t1219 * t800 - pkin(5) * (-t1214 * t865 + t1219 * t866), -t1214 * t848 - t1219 * t846, -t1214 * t815 - t1219 * t814, -t1214 * t863 - t1219 * t861, -t1214 * t847 - t1219 * t845, -t1214 * t864 - t1219 * t862, -t1214 * t899 - t1219 * t898, -t1214 * t782 - t1219 * t781 - pkin(5) * (-t1214 * t843 + t1219 * t844), -t1214 * t784 - t1219 * t783 - pkin(5) * (-t1214 * t859 + t1219 * t860), -t1214 * t776 - t1219 * t775 - pkin(5) * (-t1214 * t812 + t1219 * t813), -t1214 * t773 - t1219 * t772 - pkin(5) * (-t1214 * t788 + t1219 * t789); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t1185, 0, -t1184, 0, -t1165, t1232, t1230, pkin(5) * t1230, 0, 0, -t1123, 0, -t1306, 0, t1318, t1317, t1315, pkin(5) * t1315 + pkin(6) * t1261 - t1214 * t1065, -t1214 * t1105 + t1219 * t1107, -t1214 * t1075 + t1219 * t1076, -t1214 * t1113 + t1219 * t1115, -t1214 * t1104 + t1219 * t1106, -t1214 * t1112 + t1219 * t1114, -t1214 * t1145 + t1219 * t1146, t1219 * t969 - t1214 * t948 + pkin(5) * (-t1219 * t1085 - t1214 * t1087), t1219 * t970 - t1214 * t949 + pkin(5) * (-t1219 * t1086 - t1214 * t1088), t1219 * t1013 - t1214 * t1012 + pkin(5) * (-t1219 * t1122 - t1214 * t1124), t1219 * t918 - t1214 * t892 + pkin(5) * (-t1219 * t1010 - t1214 * t1011), -t1214 * t954 + t1219 * t957, -t1214 * t915 + t1219 * t916, -t1214 * t944 + t1219 * t946, -t1214 * t953 + t1219 * t956, -t1214 * t945 + t1219 * t947, -t1214 * t1018 + t1219 * t1019, t1219 * t835 - t1214 * t826 + pkin(5) * (-t1214 * t937 - t1219 * t936), t1219 * t838 - t1214 * t834 + pkin(5) * (-t1214 * t942 - t1219 * t941), t1219 * t809 - t1214 * t805 + pkin(5) * (-t1214 * t911 - t1219 * t910), t1219 * t802 - t1214 * t800 + pkin(5) * (-t1214 * t866 - t1219 * t865), -t1214 * t846 + t1219 * t848, -t1214 * t814 + t1219 * t815, -t1214 * t861 + t1219 * t863, -t1214 * t845 + t1219 * t847, -t1214 * t862 + t1219 * t864, -t1214 * t898 + t1219 * t899, t1219 * t782 - t1214 * t781 + pkin(5) * (-t1214 * t844 - t1219 * t843), t1219 * t784 - t1214 * t783 + pkin(5) * (-t1214 * t860 - t1219 * t859), t1219 * t776 - t1214 * t775 + pkin(5) * (-t1214 * t813 - t1219 * t812), t1219 * t773 - t1214 * t772 + pkin(5) * (-t1214 * t789 - t1219 * t788); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1221, 0, 0, -g(1), -t1193, 0, 0, 0, -t1177, 0, -t1174, 0, t1307, t1155, t1069, pkin(6) * t1069, t1107, t1076, t1115, t1106, t1114, t1146, t969, t970, t1013, t918, t957, t916, t946, t956, t947, t1019, t835, t838, t809, t802, t848, t815, t863, t847, t864, t899, t782, t784, t776, t773; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1221, 0, qJDD(1), 0, g(1), 0, t1192, 0, 0, 0, t1174, 0, -t1177, 0, -t1155, t1307, t1243, t1065, t1105, t1075, t1113, t1104, t1112, t1145, t948, t949, t1012, t892, t954, t915, t944, t953, t945, t1018, t826, t834, t805, t800, t846, t814, t861, t845, t862, t898, t781, t783, t775, t772; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1193, -t1192, 0, 0, 0, 0, 0, 0, 0, t1206, t1093, t1094, 0, -t1066, t1130, t1120, t1135, t1129, t1133, 0, t1015, t1014, t987, t934, t979, t922, t1006, t978, t1007, t1020, t849, t854, t811, t806, t851, t817, t877, t850, t878, t907, t787, t795, t778, t774; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1206, 0, -t1298, 0, 0, -g(1), t1127, 0, t1143, t1121, t1139, t1142, t1137, t1164, t1059, t1060, t1026, pkin(7) * t1026, t981, t924, t1008, t980, t1009, t1021, t876, t888, t830, t827, t853, t819, t879, t852, t880, t908, t801, t803, t779, t777; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1298, 0, t1206, 0, g(1), 0, t1128, 0, t1191, -t1179, -t1270, -t1191, -t1263, -qJDD(3), t1055, t1056, 0, pkin(2) * t1026, -t1119, -t1118, -t1054, t1119, t1050, -t1205, t893, t909, t891, t842, -t1037, -t1034, -t964, t1037, t961, -t1199, t810, t822, t804, t780; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1206, -t1127, -t1128, 0, 0, t1130, t1120, t1135, t1129, t1133, 0, t1248, t1249, t1235, t1258, t979, t922, t1006, t978, t1007, t1020, t1239, t1238, t1240, t1227, t851, t817, t877, t850, t878, t907, t1246, t1245, t1241, t1247; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1168, t1169, t1181, -t1195, t1188, t1195, 0, t1116, t1091, 0, t1042, t992, t1063, t1040, t1064, t1082, t984, t995, t890, -pkin(8) * t919, t897, t857, t930, t896, t931, t967, t832, t837, t799, t791; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1254, t1167, t1186, t1226, t1182, -t1254, -t1116, 0, t1092, 0, t1041, t990, t1061, t1039, t1062, t1081, t939, t943, t886, t901, t895, t855, t928, t894, t929, t966, t824, t829, t797, t786; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1191, t1179, t1270, t1191, t1263, qJDD(3), -t1091, -t1092, 0, 0, t1119, t1118, t1054, -t1119, -t1050, t1205, t1229, t1234, t1295, t1296, t1037, t1034, t964, -t1037, -t961, t1199, t1224, t1222, t1255, t1256; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1074, -t1049, t1301, t1150, t1147, -t1150, 0, t1048, t985, 0, t955, t905, t1004, t951, t1005, t1023, t912, t917, t825, -pkin(9) * t840; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1282, t1300, t1148, -t1225, t1109, -t1282, -t1048, 0, t986, 0, t952, t903, t1002, t950, t1003, t1022, t881, t887, t821, t833; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1119, t1118, t1054, -t1119, -t1050, t1205, -t985, -t986, 0, 0, t1037, t1034, t964, -t1037, -t961, t1199, t1233, t1228, t902, t839; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t989, -t960, t1302, t1089, t1083, -t1089, 0, t971, t883, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1285, t1305, t1084, t988, t1030, -t1285, -t971, 0, t884, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1037, t1034, t964, -t1037, -t961, t1199, -t883, -t884, 0, 0;];
m_new_reg = t1;
