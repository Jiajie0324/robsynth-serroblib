% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PRPRP3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d4,theta1,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:34
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PRPRP3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRP3_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRP3_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRP3_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRP3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRPRP3_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:33:52
% EndTime: 2019-12-05 15:33:59
% DurationCPUTime: 6.64s
% Computational Cost: add. (16357->425), mult. (30690->529), div. (0->0), fcn. (18503->8), ass. (0->299)
t739 = sin(qJ(2));
t734 = sin(pkin(7));
t736 = cos(pkin(7));
t702 = t736 * g(1) + t734 * g(2);
t730 = g(3) - qJDD(1);
t741 = cos(qJ(2));
t672 = -t741 * t702 - t739 * t730;
t743 = qJD(2) ^ 2;
t666 = -t743 * pkin(2) + t672;
t733 = sin(pkin(8));
t735 = cos(pkin(8));
t671 = -t739 * t702 + t741 * t730;
t745 = qJDD(2) * pkin(2) - t671;
t598 = t733 * t666 - t735 * t745;
t599 = t735 * t666 + t733 * t745;
t770 = t733 * t598 + t735 * t599;
t539 = t735 * t598 - t733 * t599;
t795 = t741 * t539;
t505 = -t739 * t770 + t795;
t801 = t739 * t539;
t837 = t741 * t770 + t801;
t701 = t734 * g(1) - t736 * g(2);
t693 = -qJDD(3) + t701;
t694 = t733 * qJDD(2) + t735 * t743;
t641 = qJ(3) * t694 - t735 * t693;
t695 = t735 * qJDD(2) - t733 * t743;
t754 = -qJ(3) * t695 - t733 * t693;
t768 = -t739 * t694 + t741 * t695;
t836 = -pkin(5) * t768 + t739 * t641 + t741 * t754;
t738 = sin(qJ(4));
t740 = cos(qJ(4));
t712 = t738 * t743 * t740;
t704 = qJDD(4) + t712;
t822 = pkin(4) * t704;
t630 = t741 * t694 + t739 * t695;
t569 = pkin(5) * t630 + t741 * t641 - t739 * t754;
t785 = qJD(2) * qJD(5);
t779 = t740 * t785;
t715 = 0.2e1 * t779;
t594 = -t743 * pkin(3) + qJDD(2) * pkin(6) + t599;
t583 = t740 * t594 - t738 * t693;
t786 = qJD(2) * qJD(4);
t718 = t738 * t786;
t724 = t740 * qJDD(2);
t689 = t724 - t718;
t787 = qJD(2) * t738;
t703 = qJD(4) * pkin(4) - qJ(5) * t787;
t729 = t740 ^ 2;
t726 = t729 * t743;
t755 = pkin(4) * t726 - t689 * qJ(5) + qJD(4) * t703 - t583;
t541 = t715 - t755;
t728 = t738 ^ 2;
t810 = t728 * t743;
t699 = t726 + t810;
t526 = pkin(4) * t699 + qJ(5) * t724 + t541;
t675 = t740 * t693;
t719 = t740 * t786;
t783 = t738 * qJDD(2);
t688 = t719 + t783;
t748 = t675 + (t688 - t719) * qJ(5) - t822;
t765 = t594 + 0.2e1 * t785;
t533 = (qJ(5) * qJDD(2) + t765) * t738 + t748;
t831 = -t740 * t526 - t738 * t533;
t593 = -qJDD(2) * pkin(3) - t743 * pkin(6) + t598;
t561 = -t689 * pkin(4) - qJ(5) * t726 + t703 * t787 + qJDD(5) + t593;
t742 = qJD(4) ^ 2;
t708 = -t742 - t810;
t553 = -qJ(5) * t708 + t561;
t687 = 0.2e1 * t719 + t783;
t705 = qJDD(4) - t712;
t654 = -pkin(4) * t687 - qJ(5) * t705;
t830 = -t738 * t553 - t740 * t654;
t804 = t738 * t594;
t582 = t675 + t804;
t518 = t738 * t582 + t740 * t583;
t679 = t736 * t701;
t829 = -t734 * t702 + t679;
t710 = -t726 - t742;
t803 = t738 * t704;
t662 = t740 * t710 - t803;
t690 = t724 - 0.2e1 * t718;
t612 = t733 * t662 + t735 * t690;
t614 = t735 * t662 - t733 * t690;
t562 = t741 * t612 + t739 * t614;
t827 = pkin(1) * t562;
t826 = pkin(2) * t539;
t797 = t740 * t704;
t658 = t738 * t710 + t797;
t825 = pkin(3) * t658;
t802 = t738 * t705;
t660 = t740 * t708 - t802;
t824 = pkin(3) * t660;
t536 = t738 * t765 + t748;
t823 = pkin(4) * t536;
t821 = pkin(5) * t562;
t796 = t740 * t705;
t664 = -t738 * t708 - t796;
t613 = t733 * t664 - t735 * t687;
t615 = t735 * t664 + t733 * t687;
t563 = t741 * t613 + t739 * t615;
t820 = pkin(5) * t563;
t788 = t728 + t729;
t696 = t788 * qJDD(2);
t639 = t733 * t696 + t735 * t699;
t642 = t735 * t696 - t733 * t699;
t586 = t741 * t639 + t739 * t642;
t819 = pkin(5) * t586;
t818 = pkin(6) * t658;
t817 = pkin(6) * t660;
t564 = -t739 * t612 + t741 * t614;
t816 = qJ(1) * (t734 * t564 - t736 * t658);
t565 = -t739 * t613 + t741 * t615;
t815 = qJ(1) * (t734 * t565 - t736 * t660);
t587 = -t739 * t639 + t741 * t642;
t814 = qJ(1) * t587;
t813 = qJ(3) * t612;
t812 = qJ(3) * t613;
t811 = qJ(3) * t639;
t809 = t734 * t701;
t807 = t734 * t730;
t806 = t736 * t730;
t805 = t738 * t536;
t588 = t738 * t593;
t798 = t740 * t536;
t589 = t740 * t593;
t794 = -pkin(1) * t658 + pkin(5) * t564;
t793 = -pkin(1) * t660 + pkin(5) * t565;
t792 = -pkin(3) * t593 + pkin(6) * t518;
t791 = pkin(3) * t690 + pkin(6) * t662;
t790 = -pkin(3) * t687 + pkin(6) * t664;
t789 = pkin(3) * t699 + pkin(6) * t696;
t784 = t736 * qJDD(2);
t782 = pkin(4) * t783;
t781 = -t589 + t791;
t611 = pkin(2) * t613;
t780 = t611 + t790;
t778 = t733 * t783;
t777 = t735 * t783;
t776 = -pkin(2) * t658 + qJ(3) * t614;
t775 = -pkin(2) * t660 + qJ(3) * t615;
t757 = -pkin(2) * t694 - t599;
t556 = pkin(1) * t630 - t757;
t774 = -qJ(1) * t768 + t556;
t751 = pkin(2) * t695 - t598;
t557 = -pkin(1) * t768 - t751;
t773 = -qJ(1) * t630 + t557;
t697 = t739 * qJDD(2) + t741 * t743;
t624 = pkin(1) * t697 + t672;
t698 = t741 * qJDD(2) - t739 * t743;
t772 = qJ(1) * t698 - t624;
t625 = -pkin(1) * t698 + t671;
t771 = qJ(1) * t697 - t625;
t769 = t739 * t671 + t741 * t672;
t766 = -t736 * t702 - t809;
t764 = t733 * t712;
t763 = t735 * t712;
t762 = t789 - t831;
t761 = t790 - t830;
t760 = t789 + t518;
t610 = pkin(2) * t612;
t759 = t610 + t781;
t509 = t733 * t518 - t735 * t593;
t758 = pkin(2) * t509 + t792;
t653 = pkin(5) * t697 - t741 * t701;
t756 = -pkin(5) * t698 - t739 * t701;
t517 = t740 * t582 - t738 * t583;
t606 = t741 * t671 - t739 * t672;
t753 = -pkin(1) * t563 - t780;
t629 = pkin(2) * t639;
t752 = -pkin(1) * t586 - t629 - t789;
t508 = t740 * t541 + t805;
t512 = -pkin(4) * t561 + qJ(5) * t541;
t750 = -pkin(3) * t561 + pkin(6) * t508 + qJ(5) * t805 + t740 * t512;
t535 = pkin(4) * t690 + qJ(5) * t710 - t561;
t749 = -qJ(5) * t803 + t740 * t535 + t791;
t747 = pkin(4) * t708 + t755;
t746 = t610 + t749;
t488 = t733 * t508 - t735 * t561;
t744 = pkin(2) * t488 + t750;
t722 = t734 * qJDD(2);
t709 = t726 - t742;
t707 = t742 - t810;
t700 = -t726 + t810;
t685 = t788 * t786;
t670 = t740 * t688 - t728 * t786;
t669 = -t738 * t689 - t729 * t786;
t668 = t733 * qJDD(4) + t735 * t685;
t667 = -t735 * qJDD(4) + t733 * t685;
t663 = -t738 * t707 + t797;
t661 = t740 * t709 - t802;
t659 = t740 * t707 + t803;
t657 = t738 * t709 + t796;
t656 = (t688 + t719) * t738;
t655 = -t740 * t689 + t738 * t719;
t628 = qJ(3) * t642;
t627 = -t738 * t687 + t740 * t690;
t626 = t740 * t687 + t738 * t690;
t623 = t735 * t670 - t764;
t622 = t735 * t669 + t764;
t621 = t733 * t670 + t763;
t620 = t733 * t669 - t763;
t619 = t735 * t663 + t778;
t618 = t735 * t661 + t733 * t724;
t617 = t733 * t663 - t777;
t616 = t733 * t661 - t735 * t724;
t603 = t735 * t627 + t733 * t700;
t602 = t733 * t627 - t735 * t700;
t601 = -t739 * t667 + t741 * t668;
t600 = t741 * t667 + t739 * t668;
t597 = t736 * t601;
t596 = t734 * t601;
t592 = pkin(1) * t701 + pkin(5) * t769;
t585 = pkin(5) * t587;
t584 = t736 * t814;
t581 = -t739 * t621 + t741 * t623;
t580 = -t739 * t620 + t741 * t622;
t579 = t741 * t621 + t739 * t623;
t578 = t741 * t620 + t739 * t622;
t577 = -t739 * t617 + t741 * t619;
t576 = -t739 * t616 + t741 * t618;
t575 = t741 * t617 + t739 * t619;
t574 = t741 * t616 + t739 * t618;
t571 = t589 - t817;
t570 = t588 - t818;
t555 = -t739 * t602 + t741 * t603;
t554 = t741 * t602 + t739 * t603;
t552 = t583 - t824;
t551 = t582 - t825;
t549 = t736 * t581 + t734 * t656;
t548 = t736 * t580 - t734 * t655;
t547 = t734 * t581 - t736 * t656;
t546 = t734 * t580 + t736 * t655;
t545 = t736 * t577 + t734 * t659;
t544 = t736 * t576 + t734 * t657;
t543 = t734 * t577 - t736 * t659;
t542 = t734 * t576 - t736 * t657;
t529 = qJ(1) * (t736 * t565 + t734 * t660);
t528 = qJ(1) * (t736 * t564 + t734 * t658);
t527 = pkin(2) * t693 + qJ(3) * t770;
t524 = t736 * t555 + t734 * t626;
t523 = t734 * t555 - t736 * t626;
t522 = t715 - t747 - t824;
t521 = t536 - t822 - t825;
t520 = -qJ(5) * t797 - t738 * t535 - t818;
t519 = t740 * t553 - t738 * t654 - t817;
t514 = t735 * t517 - t811;
t513 = t733 * t517 + t628;
t510 = t735 * t518 + t733 * t593;
t507 = t738 * t541 - t798;
t501 = -t588 + t753;
t500 = -t759 - t827;
t499 = -t733 * t552 + t735 * t571 - t812;
t498 = -t733 * t551 + t735 * t570 - t813;
t497 = -t738 * t526 + t740 * t533;
t496 = t735 * t552 + t733 * t571 + t775;
t495 = t735 * t551 + t733 * t570 + t776;
t494 = t752 - t518;
t493 = -pkin(4) * t778 + t735 * t497 - t811;
t492 = pkin(4) * t777 + t733 * t497 + t628;
t491 = -t746 - t827;
t490 = t753 + t830;
t489 = t735 * t508 + t733 * t561;
t487 = pkin(1) * t505 + t826;
t486 = -pkin(3) * t507 + t823;
t485 = t735 * t519 - t733 * t522 - t812;
t484 = t735 * t520 - t733 * t521 - t813;
t483 = t752 + t831;
t482 = t733 * t519 + t735 * t522 + t775;
t481 = t733 * t520 + t735 * t521 + t776;
t480 = -t739 * t513 + t741 * t514 - t819;
t479 = t741 * t513 + t739 * t514 + t585;
t478 = -t739 * t509 + t741 * t510;
t477 = t741 * t509 + t739 * t510;
t476 = pkin(5) * t505 + qJ(3) * t795 - t739 * t527;
t475 = pkin(1) * t693 + pkin(5) * t837 + qJ(3) * t801 + t741 * t527;
t474 = -qJ(3) * t509 - (pkin(3) * t733 - pkin(6) * t735) * t517;
t473 = -pkin(6) * t507 + qJ(5) * t798 - t738 * t512;
t472 = -t739 * t496 + t741 * t499 - t820;
t471 = -t739 * t495 + t741 * t498 - t821;
t470 = t741 * t496 + t739 * t499 + t793;
t469 = t741 * t495 + t739 * t498 + t794;
t468 = -t739 * t492 + t741 * t493 - t819;
t467 = t741 * t492 + t739 * t493 + t585;
t466 = -t739 * t488 + t741 * t489;
t465 = t741 * t488 + t739 * t489;
t464 = qJ(3) * t510 - (-pkin(3) * t735 - pkin(6) * t733 - pkin(2)) * t517;
t463 = -t739 * t482 + t741 * t485 - t820;
t462 = -t739 * t481 + t741 * t484 - t821;
t461 = t741 * t482 + t739 * t485 + t793;
t460 = t741 * t481 + t739 * t484 + t794;
t459 = -pkin(1) * t477 - t758;
t458 = -qJ(3) * t488 + t735 * t473 - t733 * t486;
t457 = -pkin(2) * t507 + qJ(3) * t489 + t733 * t473 + t735 * t486;
t456 = -pkin(1) * t465 - t744;
t455 = -pkin(5) * t477 - t739 * t464 + t741 * t474;
t454 = pkin(1) * t517 + pkin(5) * t478 + t741 * t464 + t739 * t474;
t453 = -pkin(5) * t465 - t739 * t457 + t741 * t458;
t452 = -pkin(1) * t507 + pkin(5) * t466 + t741 * t457 + t739 * t458;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t807, -t806, -t829, -qJ(1) * t829, 0, 0, t736 * t698, 0, -t736 * t697, t722, t734 * t771 + t736 * t756, t736 * t653 + t734 * t772, t736 * t606, -qJ(1) * (t734 * t769 + t679) - (t734 * pkin(1) - t736 * pkin(5)) * t606, 0, 0, t736 * t768, 0, -t736 * t630, t722, -t734 * t773 + t736 * t836, t736 * t569 - t734 * t774, t736 * t505, t736 * t476 - t734 * t487 - qJ(1) * (t736 * t693 + t734 * t837), t549, t524, t545, t548, t544, t597, t736 * t471 - t734 * t500 - t816, t736 * t472 - t734 * t501 - t815, t736 * t480 + (-t494 - t814) * t734, t736 * t455 - t734 * t459 - qJ(1) * (t734 * t478 + t517 * t736), t549, t524, t545, t548, t544, t597, t736 * t462 - t734 * t491 - t816, t736 * t463 - t734 * t490 - t815, t736 * t468 + (-t483 - t814) * t734, t736 * t453 - t734 * t456 - qJ(1) * (t734 * t466 - t736 * t507); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t806, -t807, t766, qJ(1) * t766, 0, 0, t734 * t698, 0, -t734 * t697, -t784, t734 * t756 - t736 * t771, t734 * t653 - t736 * t772, t734 * t606, qJ(1) * (t736 * t769 - t809) - (-t736 * pkin(1) - t734 * pkin(5)) * t606, 0, 0, t734 * t768, 0, -t734 * t630, -t784, t734 * t836 + t736 * t773, t734 * t569 + t736 * t774, t734 * t505, t734 * t476 + t736 * t487 + qJ(1) * (-t734 * t693 + t736 * t837), t547, t523, t543, t546, t542, t596, t734 * t471 + t736 * t500 + t528, t734 * t472 + t736 * t501 + t529, t734 * t480 + t736 * t494 + t584, t734 * t455 + t736 * t459 + qJ(1) * (t736 * t478 - t517 * t734), t547, t523, t543, t546, t542, t596, t734 * t462 + t736 * t491 + t528, t734 * t463 + t736 * t490 + t529, t734 * t468 + t736 * t483 + t584, t734 * t453 + t736 * t456 + qJ(1) * (t736 * t466 + t734 * t507); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t701, t702, 0, 0, 0, 0, t697, 0, t698, 0, -t653, t756, t769, t592, 0, 0, t630, 0, t768, 0, -t569, t836, t837, t475, t579, t554, t575, t578, t574, t600, t469, t470, t479, t454, t579, t554, t575, t578, t574, t600, t460, t461, t467, t452; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t730, -t701, 0, 0, 0, t698, 0, -t697, 0, t756, t653, t606, pkin(5) * t606, 0, 0, t768, 0, -t630, 0, t836, t569, t505, t476, t581, t555, t577, t580, t576, t601, t471, t472, t480, t455, t581, t555, t577, t580, t576, t601, t462, t463, t468, t453; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t730, 0, -t702, 0, 0, 0, 0, 0, 0, -qJDD(2), t625, t624, 0, pkin(1) * t606, 0, 0, 0, 0, 0, -qJDD(2), t557, t556, 0, t487, -t656, -t626, -t659, t655, -t657, 0, t500, t501, t494, t459, -t656, -t626, -t659, t655, -t657, 0, t491, t490, t483, t456; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t701, t702, 0, 0, 0, 0, t697, 0, t698, 0, -t653, t756, t769, t592, 0, 0, t630, 0, t768, 0, -t569, t836, t837, t475, t579, t554, t575, t578, t574, t600, t469, t470, t479, t454, t579, t554, t575, t578, t574, t600, t460, t461, t467, t452; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t743, 0, 0, -t701, t671, 0, 0, 0, t695, 0, -t694, 0, t754, t641, t539, qJ(3) * t539, t623, t603, t619, t622, t618, t668, t498, t499, t514, t474, t623, t603, t619, t622, t618, t668, t484, t485, t493, t458; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t743, 0, qJDD(2), 0, t701, 0, t672, 0, 0, 0, t694, 0, t695, 0, -t641, t754, t770, t527, t621, t602, t617, t620, t616, t667, t495, t496, t513, t464, t621, t602, t617, t620, t616, t667, t481, t482, t492, t457; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t671, -t672, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t751, t757, 0, -t826, t656, t626, t659, -t655, t657, 0, t759, t588 + t780, t629 + t760, t758, t656, t626, t659, -t655, t657, 0, t746, t611 + t761, t629 + t762, t744; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t743, 0, 0, -t693, t598, 0, t670, t627, t663, t669, t661, t685, t570, t571, t517, pkin(6) * t517, t670, t627, t663, t669, t661, t685, t520, t519, t497, t473; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t743, 0, qJDD(2), 0, t693, 0, t599, 0, t712, -t700, -t783, -t712, -t724, -qJDD(4), t551, t552, 0, pkin(3) * t517, t712, -t700, -t783, -t712, -t724, -qJDD(4), t521, t522, t782, t486; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t598, -t599, 0, 0, t656, t626, t659, -t655, t657, 0, t781, t588 + t790, t760, t792, t656, t626, t659, -t655, t657, 0, t749, t761, t762, t750; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t688, t690, t704, -t719, t709, t719, 0, t593, t582, 0, t688, t690, t704, -t719, t709, t719, -qJ(5) * t704, t553, t533, qJ(5) * t536; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t718, t687, t707, t689, t705, -t718, -t593, 0, t583, 0, t718, t687, t707, t689, t705, -t718, t535, t654, t526, t512; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t712, t700, t783, t712, t724, qJDD(4), -t582, -t583, 0, 0, -t712, t700, t783, t712, t724, qJDD(4), -0.2e1 * t738 * t785 - t748 - t804 + t822, t747 - 0.2e1 * t779, -t782, -t823; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t688, t690, t704, -t719, t709, t719, 0, t561, t536, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t718, t687, t707, t689, t705, -t718, -t561, 0, t541, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t712, t700, t783, t712, t724, qJDD(4), -t536, -t541, 0, 0;];
m_new_reg = t1;
