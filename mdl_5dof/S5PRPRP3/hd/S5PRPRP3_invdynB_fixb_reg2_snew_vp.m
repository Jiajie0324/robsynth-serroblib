% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRPRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d4,theta1,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:34
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRPRP3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRP3_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRP3_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRP3_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRP3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRPRP3_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:33:44
% EndTime: 2019-12-05 15:33:52
% DurationCPUTime: 4.12s
% Computational Cost: add. (9435->371), mult. (17747->523), div. (0->0), fcn. (10922->8), ass. (0->277)
t368 = sin(pkin(7));
t367 = sin(pkin(8));
t369 = cos(pkin(8));
t377 = qJD(2) ^ 2;
t336 = t367 * qJDD(2) + t369 * t377;
t337 = t369 * qJDD(2) - t367 * t377;
t373 = sin(qJ(2));
t375 = cos(qJ(2));
t388 = -t373 * t336 + t375 * t337;
t451 = t368 * t388;
t370 = cos(pkin(7));
t450 = t370 * t388;
t344 = t370 * g(1) + t368 * g(2);
t365 = g(3) - qJDD(1);
t317 = -t375 * t344 - t373 * t365;
t311 = -t377 * pkin(2) + t317;
t316 = -t373 * t344 + t375 * t365;
t381 = qJDD(2) * pkin(2) - t316;
t249 = t367 * t311 - t369 * t381;
t250 = t369 * t311 + t367 * t381;
t389 = t367 * t249 + t369 * t250;
t195 = t369 * t249 - t367 * t250;
t411 = t375 * t195;
t164 = -t373 * t389 + t411;
t418 = t373 * t195;
t165 = t375 * t389 + t418;
t343 = t368 * g(1) - t370 * g(2);
t335 = -qJDD(3) + t343;
t288 = qJ(3) * t336 - t369 * t335;
t383 = -qJ(3) * t337 - t367 * t335;
t220 = -pkin(5) * t388 + t373 * t288 + t375 * t383;
t444 = t375 * t336 + t373 * t337;
t221 = pkin(5) * t444 + t375 * t288 - t373 * t383;
t372 = sin(qJ(4));
t374 = cos(qJ(4));
t352 = t372 * t377 * t374;
t402 = qJDD(4) + t352;
t448 = t402 * pkin(4);
t326 = t370 * t343;
t290 = -t368 * t344 + t326;
t245 = -t377 * pkin(3) + qJDD(2) * pkin(6) + t250;
t232 = t372 * t245 + t374 * t335;
t406 = qJD(2) * qJD(4);
t396 = t374 * t406;
t404 = t372 * qJDD(2);
t332 = t396 + t404;
t324 = t332 * qJ(5);
t443 = -t324 - t232 + t448;
t376 = qJD(4) ^ 2;
t363 = t372 ^ 2;
t429 = t363 * t377;
t349 = -t376 - t429;
t347 = qJDD(4) - t352;
t419 = t372 * t347;
t305 = t374 * t349 - t419;
t441 = pkin(3) * t305;
t364 = t374 ^ 2;
t361 = t364 * t377;
t351 = -t361 - t376;
t420 = t372 * t402;
t307 = t374 * t351 - t420;
t397 = t372 * t406;
t403 = t374 * qJDD(2);
t334 = -0.2e1 * t397 + t403;
t260 = t367 * t307 + t369 * t334;
t262 = t369 * t307 - t367 * t334;
t216 = t375 * t260 + t373 * t262;
t440 = pkin(5) * t216;
t412 = t374 * t347;
t309 = -t372 * t349 - t412;
t331 = 0.2e1 * t396 + t404;
t261 = t367 * t309 - t369 * t331;
t263 = t369 * t309 + t367 * t331;
t217 = t375 * t261 + t373 * t263;
t439 = pkin(5) * t217;
t408 = t363 + t364;
t338 = t408 * qJDD(2);
t341 = t361 + t429;
t286 = t367 * t338 + t369 * t341;
t289 = t369 * t338 - t367 * t341;
t240 = t375 * t286 + t373 * t289;
t438 = pkin(5) * t240;
t413 = t374 * t402;
t303 = t372 * t351 + t413;
t437 = pkin(6) * t303;
t436 = pkin(6) * t305;
t218 = -t373 * t260 + t375 * t262;
t186 = t368 * t218 - t370 * t303;
t435 = qJ(1) * t186;
t219 = -t373 * t261 + t375 * t263;
t187 = t368 * t219 - t370 * t305;
t434 = qJ(1) * t187;
t241 = -t373 * t286 + t375 * t289;
t433 = qJ(1) * t241;
t432 = qJ(3) * t260;
t431 = qJ(3) * t261;
t430 = qJ(3) * t286;
t340 = t375 * qJDD(2) - t373 * t377;
t428 = t368 * t340;
t427 = t368 * t343;
t425 = t368 * t365;
t236 = t370 * t241;
t424 = t370 * t340;
t423 = t370 * t365;
t192 = (qJ(5) * qJD(4) * t374 - 0.2e1 * qJD(5) * t372) * qJD(2) + t443;
t422 = t372 * t192;
t244 = -qJDD(2) * pkin(3) - t377 * pkin(6) + t249;
t421 = t372 * t244;
t415 = t374 * t192;
t414 = t374 * t244;
t410 = -pkin(1) * t303 + pkin(5) * t218;
t409 = -pkin(1) * t305 + pkin(5) * t219;
t233 = t374 * t245 - t372 * t335;
t407 = qJD(2) * t372;
t405 = t370 * qJDD(2);
t401 = 0.2e1 * qJD(2) * qJD(5);
t399 = t367 * t404;
t398 = t369 * t404;
t395 = -pkin(2) * t303 + qJ(3) * t262;
t394 = -pkin(2) * t305 + qJ(3) * t263;
t393 = pkin(1) * t444 + pkin(2) * t336 - qJ(1) * t388 + t250;
t392 = -pkin(1) * t388 - pkin(2) * t337 - qJ(1) * t444 + t249;
t339 = t373 * qJDD(2) + t375 * t377;
t391 = -pkin(1) * t339 + qJ(1) * t340 - t317;
t390 = pkin(1) * t340 + qJ(1) * t339 - t316;
t257 = t373 * t316 + t375 * t317;
t291 = -t370 * t344 - t427;
t386 = t367 * t352;
t385 = t369 * t352;
t206 = -pkin(3) * t303 + t232;
t298 = pkin(5) * t339 - t375 * t343;
t297 = -pkin(5) * t340 - t373 * t343;
t174 = t374 * t232 - t372 * t233;
t175 = t372 * t232 + t374 * t233;
t256 = t375 * t316 - t373 * t317;
t333 = -t397 + t403;
t345 = qJD(4) * pkin(4) - qJ(5) * t407;
t382 = t333 * qJ(5) - qJD(4) * t345 + t374 * t401 + t233;
t380 = -pkin(1) * t216 - pkin(2) * t260 - pkin(3) * t334 - pkin(6) * t307;
t379 = -pkin(1) * t217 - pkin(2) * t261 + pkin(3) * t331 - pkin(6) * t309;
t378 = -pkin(1) * t240 - pkin(2) * t286 - pkin(3) * t341 - pkin(6) * t338;
t215 = -t333 * pkin(4) - qJ(5) * t361 + t345 * t407 + qJDD(5) + t244;
t358 = t368 * qJDD(2);
t354 = t372 * t401;
t350 = t361 - t376;
t348 = t376 - t429;
t342 = t361 - t429;
t330 = t408 * t406;
t323 = t370 * t339;
t322 = t368 * t339;
t315 = t374 * t332 - t363 * t406;
t314 = -t372 * t333 - t364 * t406;
t313 = t367 * qJDD(4) + t369 * t330;
t312 = -t369 * qJDD(4) + t367 * t330;
t308 = -t372 * t348 + t413;
t306 = t374 * t350 - t419;
t304 = -t374 * t348 - t420;
t302 = -t372 * t350 - t412;
t301 = (-t332 - t396) * t372;
t300 = (-t333 + t397) * t374;
t299 = -pkin(4) * t331 - qJ(5) * t347;
t278 = qJ(3) * t289;
t277 = -t372 * t331 + t374 * t334;
t276 = -t374 * t331 - t372 * t334;
t273 = t370 * t444;
t272 = t368 * t444;
t271 = t369 * t315 - t386;
t270 = t369 * t314 + t386;
t269 = t367 * t315 + t385;
t268 = t367 * t314 - t385;
t267 = t369 * t308 + t399;
t266 = t369 * t306 + t367 * t403;
t265 = t367 * t308 - t398;
t264 = t367 * t306 - t369 * t403;
t254 = t369 * t277 - t367 * t342;
t253 = t367 * t277 + t369 * t342;
t252 = -t373 * t312 + t375 * t313;
t251 = t375 * t312 + t373 * t313;
t248 = t370 * t252;
t247 = t368 * t252;
t239 = t370 * t257 - t427;
t238 = t368 * t257 + t326;
t237 = pkin(5) * t241;
t235 = t368 * t241;
t234 = qJ(1) * t236;
t231 = -t373 * t269 + t375 * t271;
t230 = -t373 * t268 + t375 * t270;
t229 = t375 * t269 + t373 * t271;
t228 = t375 * t268 + t373 * t270;
t227 = -t373 * t265 + t375 * t267;
t226 = -t373 * t264 + t375 * t266;
t225 = t375 * t265 + t373 * t267;
t224 = t375 * t264 + t373 * t266;
t223 = t414 - t436;
t222 = t421 - t437;
t210 = -t373 * t253 + t375 * t254;
t209 = t375 * t253 + t373 * t254;
t208 = -qJ(5) * t349 + t215;
t207 = t233 - t441;
t205 = t370 * t231 - t368 * t301;
t204 = t370 * t230 - t368 * t300;
t203 = t368 * t231 + t370 * t301;
t202 = t368 * t230 + t370 * t300;
t201 = t370 * t227 - t368 * t304;
t200 = t370 * t226 - t368 * t302;
t199 = t368 * t227 + t370 * t304;
t198 = t368 * t226 + t370 * t302;
t197 = -pkin(4) * t361 + t382;
t191 = pkin(4) * t334 + qJ(5) * t351 - t215;
t190 = t354 + (-t396 + t404) * qJ(5) - t443;
t189 = t370 * t219 + t368 * t305;
t188 = t370 * t218 + t368 * t303;
t185 = qJ(1) * t189;
t184 = qJ(1) * t188;
t183 = pkin(2) * t335 + qJ(3) * t389;
t182 = qJ(5) * t403 + (t341 - t361) * pkin(4) + t382;
t181 = t370 * t210 - t368 * t276;
t180 = t368 * t210 + t370 * t276;
t179 = -t441 + (-t349 - t361) * pkin(4) + t382;
t178 = -qJ(5) * t396 + t206 + t324 + t354 - 0.2e1 * t448;
t177 = -qJ(5) * t413 - t372 * t191 - t437;
t176 = t374 * t208 - t372 * t299 - t436;
t172 = t369 * t174 - t430;
t171 = t367 * t174 + t278;
t170 = -pkin(4) * t215 + qJ(5) * t197;
t169 = t369 * t175 + t367 * t244;
t168 = t367 * t175 - t369 * t244;
t167 = t374 * t197 - t422;
t166 = t372 * t197 + t415;
t162 = t379 - t421;
t161 = t380 + t414;
t160 = -t367 * t207 + t369 * t223 - t431;
t159 = -t367 * t206 + t369 * t222 - t432;
t158 = t370 * t165 - t368 * t335;
t157 = t368 * t165 + t370 * t335;
t156 = -t372 * t182 + t374 * t190;
t155 = t369 * t207 + t367 * t223 + t394;
t154 = t369 * t206 + t367 * t222 + t395;
t153 = -t175 + t378;
t152 = -pkin(4) * t399 + t369 * t156 - t430;
t151 = pkin(4) * t398 + t367 * t156 + t278;
t150 = qJ(5) * t420 - t374 * t191 + t380;
t149 = -t372 * t208 - t374 * t299 + t379;
t148 = t369 * t167 + t367 * t215;
t147 = t367 * t167 - t369 * t215;
t146 = pkin(1) * t164 + pkin(2) * t195;
t145 = -pkin(3) * t166 - pkin(4) * t192;
t144 = t369 * t176 - t367 * t179 - t431;
t143 = t369 * t177 - t367 * t178 - t432;
t142 = -t374 * t182 - t372 * t190 + t378;
t141 = t367 * t176 + t369 * t179 + t394;
t140 = t367 * t177 + t369 * t178 + t395;
t139 = -t373 * t171 + t375 * t172 - t438;
t138 = -t373 * t168 + t375 * t169;
t137 = t375 * t168 + t373 * t169;
t136 = pkin(5) * t164 + qJ(3) * t411 - t373 * t183;
t135 = -qJ(3) * t168 - (pkin(3) * t367 - pkin(6) * t369) * t174;
t134 = -pkin(6) * t166 - qJ(5) * t415 - t372 * t170;
t133 = -t373 * t155 + t375 * t160 - t439;
t132 = -t373 * t154 + t375 * t159 - t440;
t131 = t370 * t138 - t174 * t368;
t130 = t368 * t138 + t174 * t370;
t129 = -t373 * t151 + t375 * t152 - t438;
t128 = -t373 * t147 + t375 * t148;
t127 = t375 * t147 + t373 * t148;
t126 = qJ(3) * t169 - (-pkin(3) * t369 - pkin(6) * t367 - pkin(2)) * t174;
t125 = -t373 * t141 + t375 * t144 - t439;
t124 = -t373 * t140 + t375 * t143 - t440;
t123 = -pkin(1) * t137 - pkin(2) * t168 + pkin(3) * t244 - pkin(6) * t175;
t122 = t370 * t128 + t368 * t166;
t121 = t368 * t128 - t370 * t166;
t120 = -qJ(3) * t147 + t369 * t134 - t367 * t145;
t119 = -pkin(2) * t166 + qJ(3) * t148 + t367 * t134 + t369 * t145;
t118 = -pkin(1) * t127 - pkin(2) * t147 + pkin(3) * t215 - pkin(6) * t167 + qJ(5) * t422 - t374 * t170;
t117 = -pkin(5) * t137 - t373 * t126 + t375 * t135;
t116 = -pkin(5) * t127 - t373 * t119 + t375 * t120;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t291, 0, 0, 0, 0, 0, 0, -t323, -t424, 0, t239, 0, 0, 0, 0, 0, 0, -t273, -t450, 0, t158, 0, 0, 0, 0, 0, 0, t188, t189, t236, t131, 0, 0, 0, 0, 0, 0, t188, t189, t236, t122; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t290, 0, 0, 0, 0, 0, 0, -t322, -t428, 0, t238, 0, 0, 0, 0, 0, 0, -t272, -t451, 0, t157, 0, 0, 0, 0, 0, 0, t186, t187, t235, t130, 0, 0, 0, 0, 0, 0, t186, t187, t235, t121; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t365, 0, 0, 0, 0, 0, 0, t340, -t339, 0, -t256, 0, 0, 0, 0, 0, 0, t388, -t444, 0, -t164, 0, 0, 0, 0, 0, 0, t216, t217, t240, t137, 0, 0, 0, 0, 0, 0, t216, t217, t240, t127; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t425, -t423, -t290, -qJ(1) * t290, 0, 0, t424, 0, -t323, t358, t370 * t297 + t390 * t368, t370 * t298 + t391 * t368, t370 * t256, -qJ(1) * t238 - (pkin(1) * t368 - pkin(5) * t370) * t256, 0, 0, t450, 0, -t273, t358, t370 * t220 - t392 * t368, t370 * t221 - t393 * t368, t370 * t164, -qJ(1) * t157 + t370 * t136 - t368 * t146, t205, t181, t201, t204, t200, t248, t370 * t132 - t368 * t161 - t435, t370 * t133 - t368 * t162 - t434, t370 * t139 + (-t153 - t433) * t368, -qJ(1) * t130 + t370 * t117 - t368 * t123, t205, t181, t201, t204, t200, t248, t370 * t124 - t368 * t150 - t435, t370 * t125 - t368 * t149 - t434, t370 * t129 + (-t142 - t433) * t368, -qJ(1) * t121 + t370 * t116 - t368 * t118; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t423, -t425, t291, qJ(1) * t291, 0, 0, t428, 0, -t322, -t405, t368 * t297 - t390 * t370, t368 * t298 - t391 * t370, t368 * t256, qJ(1) * t239 - (-pkin(1) * t370 - pkin(5) * t368) * t256, 0, 0, t451, 0, -t272, -t405, t368 * t220 + t392 * t370, t368 * t221 + t393 * t370, t368 * t164, qJ(1) * t158 + t368 * t136 + t370 * t146, t203, t180, t199, t202, t198, t247, t368 * t132 + t370 * t161 + t184, t368 * t133 + t370 * t162 + t185, t368 * t139 + t370 * t153 + t234, qJ(1) * t131 + t368 * t117 + t370 * t123, t203, t180, t199, t202, t198, t247, t368 * t124 + t370 * t150 + t184, t368 * t125 + t370 * t149 + t185, t368 * t129 + t370 * t142 + t234, qJ(1) * t122 + t368 * t116 + t370 * t118; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t343, t344, 0, 0, 0, 0, t339, 0, t340, 0, -t298, t297, t257, pkin(1) * t343 + pkin(5) * t257, 0, 0, t444, 0, t388, 0, -t221, t220, t165, pkin(1) * t335 + pkin(5) * t165 + qJ(3) * t418 + t375 * t183, t229, t209, t225, t228, t224, t251, t375 * t154 + t373 * t159 + t410, t375 * t155 + t373 * t160 + t409, t375 * t171 + t373 * t172 + t237, pkin(1) * t174 + pkin(5) * t138 + t375 * t126 + t373 * t135, t229, t209, t225, t228, t224, t251, t375 * t140 + t373 * t143 + t410, t375 * t141 + t373 * t144 + t409, t375 * t151 + t373 * t152 + t237, -pkin(1) * t166 + pkin(5) * t128 + t375 * t119 + t373 * t120;];
tauB_reg = t1;
