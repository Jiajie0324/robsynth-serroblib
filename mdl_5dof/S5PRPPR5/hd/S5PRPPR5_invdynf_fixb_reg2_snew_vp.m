% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRPPR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d5,theta1,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:38
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRPPR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPPR5_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPPR5_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPPR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPPR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRPPR5_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:38:48
% EndTime: 2019-12-31 17:38:49
% DurationCPUTime: 1.14s
% Computational Cost: add. (2156->134), mult. (3592->150), div. (0->0), fcn. (1976->8), ass. (0->85)
t737 = sin(qJ(2));
t739 = cos(qJ(2));
t741 = qJD(2) ^ 2;
t709 = t739 * qJDD(2) - t737 * t741;
t732 = sin(pkin(7));
t751 = t732 * t709;
t734 = cos(pkin(7));
t711 = t732 * g(1) - t734 * g(2);
t750 = t732 * t711;
t749 = t734 * t709;
t712 = -t734 * g(1) - t732 * g(2);
t729 = -g(3) + qJDD(1);
t696 = t739 * t712 + t737 * t729;
t743 = qJDD(2) * qJ(3) + (2 * qJD(3) * qJD(2)) + t696;
t682 = (-pkin(2) - pkin(3)) * t741 + t743;
t731 = sin(pkin(8));
t733 = cos(pkin(8));
t695 = -t737 * t712 + t739 * t729;
t690 = -qJDD(2) * pkin(2) - t741 * qJ(3) + qJDD(3) - t695;
t742 = -qJDD(2) * pkin(3) + t690;
t668 = t733 * t682 + t731 * t742;
t736 = sin(qJ(5));
t727 = t736 ^ 2;
t738 = cos(qJ(5));
t728 = t738 ^ 2;
t748 = t727 + t728;
t747 = qJD(2) * qJD(5);
t746 = t736 * qJDD(2);
t745 = t738 * qJDD(2);
t667 = -t731 * t682 + t733 * t742;
t705 = -t731 * qJDD(2) + t733 * t741;
t706 = t733 * qJDD(2) + t731 * t741;
t744 = -t737 * t705 + t739 * t706;
t684 = t739 * t705 + t737 * t706;
t740 = qJD(5) ^ 2;
t717 = t736 * t741 * t738;
t716 = -t728 * t741 - t740;
t715 = -t727 * t741 - t740;
t714 = -qJDD(5) + t717;
t713 = qJDD(5) + t717;
t710 = t748 * t741;
t708 = t737 * qJDD(2) + t739 * t741;
t707 = t748 * qJDD(2);
t704 = qJDD(4) + t711;
t703 = -0.2e1 * t736 * t747 + t745;
t702 = 0.2e1 * t738 * t747 + t746;
t700 = t734 * t711;
t699 = t734 * t708;
t698 = t732 * t708;
t694 = t738 * t714 - t736 * t715;
t693 = -t736 * t713 + t738 * t716;
t692 = t736 * t714 + t738 * t715;
t691 = t738 * t713 + t736 * t716;
t689 = -t733 * t707 - t731 * t710;
t688 = -t731 * t707 + t733 * t710;
t683 = -t741 * pkin(2) + t743;
t678 = t733 * t694 - t731 * t702;
t677 = t733 * t693 + t731 * t703;
t676 = t731 * t694 + t733 * t702;
t675 = t731 * t693 - t733 * t703;
t674 = -t737 * t695 + t739 * t696;
t673 = t739 * t695 + t737 * t696;
t672 = t737 * t688 + t739 * t689;
t671 = -t739 * t688 + t737 * t689;
t670 = t739 * t683 + t737 * t690;
t669 = t737 * t683 - t739 * t690;
t666 = -t741 * pkin(4) - qJDD(2) * pkin(6) + t668;
t665 = qJDD(2) * pkin(4) - t741 * pkin(6) - t667;
t664 = t737 * t676 + t739 * t678;
t663 = t737 * t675 + t739 * t677;
t662 = -t739 * t676 + t737 * t678;
t661 = -t739 * t675 + t737 * t677;
t660 = t738 * t666 + t736 * t704;
t659 = -t736 * t666 + t738 * t704;
t658 = -t731 * t667 + t733 * t668;
t657 = t733 * t667 + t731 * t668;
t656 = -t736 * t659 + t738 * t660;
t655 = t738 * t659 + t736 * t660;
t654 = t733 * t656 + t731 * t665;
t653 = t731 * t656 - t733 * t665;
t652 = t737 * t657 + t739 * t658;
t651 = -t739 * t657 + t737 * t658;
t650 = t737 * t653 + t739 * t654;
t649 = -t739 * t653 + t737 * t654;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t734 * t712 - t750, 0, 0, 0, 0, 0, 0, -t699, -t749, 0, t734 * t674 - t750, 0, 0, 0, 0, 0, 0, -t699, 0, t749, t734 * t670 - t750, 0, 0, 0, 0, 0, 0, -t734 * t684, t734 * t744, 0, t734 * t652 - t732 * t704, 0, 0, 0, 0, 0, 0, t734 * t663 - t732 * t691, t734 * t664 - t732 * t692, t734 * t672, t734 * t650 - t732 * t655; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t732 * t712 + t700, 0, 0, 0, 0, 0, 0, -t698, -t751, 0, t732 * t674 + t700, 0, 0, 0, 0, 0, 0, -t698, 0, t751, t732 * t670 + t700, 0, 0, 0, 0, 0, 0, -t732 * t684, t732 * t744, 0, t732 * t652 + t734 * t704, 0, 0, 0, 0, 0, 0, t732 * t663 + t734 * t691, t732 * t664 + t734 * t692, t732 * t672, t732 * t650 + t734 * t655; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t729, 0, 0, 0, 0, 0, 0, t709, -t708, 0, t673, 0, 0, 0, 0, 0, 0, t709, 0, t708, t669, 0, 0, 0, 0, 0, 0, t744, t684, 0, t651, 0, 0, 0, 0, 0, 0, t661, t662, t671, t649; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t712, 0, 0, 0, 0, 0, 0, -t708, -t709, 0, t674, 0, 0, 0, 0, 0, 0, -t708, 0, t709, t670, 0, 0, 0, 0, 0, 0, -t684, t744, 0, t652, 0, 0, 0, 0, 0, 0, t663, t664, t672, t650; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t711, 0, 0, 0, 0, 0, 0, 0, 0, 0, t711, 0, 0, 0, 0, 0, 0, 0, 0, 0, t711, 0, 0, 0, 0, 0, 0, 0, 0, 0, t704, 0, 0, 0, 0, 0, 0, t691, t692, 0, t655; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t729, 0, 0, 0, 0, 0, 0, t709, -t708, 0, t673, 0, 0, 0, 0, 0, 0, t709, 0, t708, t669, 0, 0, 0, 0, 0, 0, t744, t684, 0, t651, 0, 0, 0, 0, 0, 0, t661, t662, t671, t649; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t741, -qJDD(2), 0, t696, 0, 0, 0, 0, 0, 0, -t741, 0, qJDD(2), t683, 0, 0, 0, 0, 0, 0, -t705, t706, 0, t658, 0, 0, 0, 0, 0, 0, t677, t678, t689, t654; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t741, 0, t695, 0, 0, 0, 0, 0, 0, qJDD(2), 0, t741, -t690, 0, 0, 0, 0, 0, 0, t706, t705, 0, -t657, 0, 0, 0, 0, 0, 0, -t675, -t676, -t688, -t653; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t711, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t711, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t704, 0, 0, 0, 0, 0, 0, -t691, -t692, 0, -t655; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t741, 0, qJDD(2), t683, 0, 0, 0, 0, 0, 0, -t705, t706, 0, t658, 0, 0, 0, 0, 0, 0, t677, t678, t689, t654; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t711, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t704, 0, 0, 0, 0, 0, 0, -t691, -t692, 0, -t655; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(2), 0, -t741, t690, 0, 0, 0, 0, 0, 0, -t706, -t705, 0, t657, 0, 0, 0, 0, 0, 0, t675, t676, t688, t653; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t741, qJDD(2), 0, t668, 0, 0, 0, 0, 0, 0, t693, t694, -t707, t656; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(2), -t741, 0, t667, 0, 0, 0, 0, 0, 0, -t703, t702, t710, -t665; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t704, 0, 0, 0, 0, 0, 0, t691, t692, 0, t655; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t716, t714, -t745, t660; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t713, t715, t746, t659; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t703, -t702, -t710, t665;];
f_new_reg = t1;
