% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPPRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,theta2,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:49
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPPRP2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRP2_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRP2_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRP2_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRP2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRP2_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:49:28
% EndTime: 2019-12-31 17:49:39
% DurationCPUTime: 10.08s
% Computational Cost: add. (17519->452), mult. (39202->629), div. (0->0), fcn. (25570->8), ass. (0->328)
t563 = qJD(4) ^ 2;
t557 = cos(pkin(8));
t561 = cos(qJ(4));
t555 = sin(pkin(8));
t559 = sin(qJ(4));
t627 = t555 * t559;
t511 = (-t557 * t561 + t627) * qJD(1);
t631 = t511 ^ 2;
t495 = t631 - t563;
t576 = t555 * t561 + t557 * t559;
t513 = t576 * qJD(1);
t467 = t513 * t511;
t640 = qJDD(4) + t467;
t609 = t561 * t640;
t404 = t559 * t495 + t609;
t618 = t559 * t640;
t410 = t561 * t495 - t618;
t358 = t555 * t404 - t557 * t410;
t600 = qJDD(1) * t557;
t509 = qJDD(1) * t627 - t561 * t600;
t556 = sin(pkin(7));
t558 = cos(pkin(7));
t338 = t556 * t358 - t558 * t509;
t341 = t558 * t358 + t556 * t509;
t560 = sin(qJ(1));
t562 = cos(qJ(1));
t730 = t562 * t338 + t560 * t341;
t729 = t560 * t338 - t562 * t341;
t508 = t513 ^ 2;
t455 = t563 + t508;
t385 = t561 * t455 + t618;
t415 = t559 * t455 - t609;
t328 = t557 * t385 - t555 * t415;
t728 = pkin(1) * t328;
t727 = qJ(3) * t328;
t362 = t555 * t385 + t557 * t415;
t726 = qJ(3) * t362;
t725 = t556 * t362;
t724 = t558 * t362;
t723 = -pkin(2) * t328 - pkin(3) * t385;
t605 = t513 * qJD(4);
t461 = t509 + 0.2e1 * t605;
t641 = qJDD(4) - t467;
t617 = t559 * t641;
t643 = -t631 - t563;
t651 = t561 * t643 - t617;
t446 = t561 * t641;
t660 = t559 * t643 + t446;
t671 = -t555 * t660 + t557 * t651;
t690 = t556 * t461 + t558 * t671;
t692 = -t558 * t461 + t556 * t671;
t701 = t560 * t690 + t562 * t692;
t722 = pkin(5) * t701;
t702 = -t560 * t692 + t562 * t690;
t721 = pkin(5) * t702;
t435 = -t631 - t508;
t642 = t576 * qJDD(1);
t656 = -t561 * t509 + t559 * t642;
t657 = -t559 * t509 - t561 * t642;
t669 = -t555 * t657 + t557 * t656;
t689 = t556 * t435 + t558 * t669;
t691 = -t558 * t435 + t556 * t669;
t703 = t560 * t689 + t562 * t691;
t720 = pkin(5) * t703;
t704 = -t560 * t691 + t562 * t689;
t719 = pkin(5) * t704;
t496 = -t508 + t563;
t675 = t561 * t496 + t617;
t676 = -t559 * t496 + t446;
t687 = -t555 * t675 + t557 * t676;
t706 = t556 * t642 + t558 * t687;
t707 = t556 * t687 - t558 * t642;
t718 = -t560 * t707 + t562 * t706;
t717 = t560 * t706 + t562 * t707;
t715 = pkin(6) * t385;
t714 = pkin(6) * t415;
t713 = qJ(2) * t691;
t712 = qJ(2) * t692;
t711 = pkin(1) * t691 - pkin(2) * t435 + qJ(3) * t669;
t710 = pkin(1) * t692 - pkin(2) * t461 + qJ(3) * t671;
t668 = t555 * t656 + t557 * t657;
t709 = -pkin(1) * t668 + qJ(2) * t689;
t670 = t555 * t651 + t557 * t660;
t708 = -pkin(1) * t670 + qJ(2) * t690;
t705 = t557 * t404 + t555 * t410;
t698 = qJ(3) * t668;
t697 = qJ(3) * t670;
t504 = qJD(4) * t511;
t570 = t642 - t504;
t661 = t504 - t570;
t696 = t661 * qJ(5);
t293 = -pkin(2) * t668 - pkin(3) * t657;
t695 = -pkin(2) * t670 - pkin(3) * t660;
t688 = t555 * t676 + t557 * t675;
t683 = pkin(6) * t651;
t682 = pkin(6) * t657;
t681 = pkin(6) * t660;
t464 = t508 - t631;
t679 = t556 * t464;
t677 = t558 * t464;
t533 = t562 * g(1) + t560 * g(2);
t630 = qJD(1) ^ 2;
t522 = -t630 * pkin(1) - t533;
t532 = t560 * g(1) - t562 * g(2);
t575 = qJDD(1) * pkin(1) + t532;
t469 = t558 * t522 + t556 * t575;
t662 = -t630 * pkin(2) + qJDD(1) * qJ(3) + 0.2e1 * qJD(1) * qJD(3) + t469;
t468 = t556 * t522 - t558 * t575;
t589 = t556 * t468 + t558 * t469;
t396 = t558 * t468 - t556 * t469;
t607 = t562 * t396;
t674 = -t560 * t589 + t607;
t613 = t560 * t396;
t344 = t562 * t589 + t613;
t599 = t556 * qJDD(1);
t525 = t558 * t630 + t599;
t598 = t558 * qJDD(1);
t526 = -t556 * t630 + t598;
t474 = -t560 * t525 + t562 * t526;
t553 = g(3) - qJDD(2);
t493 = qJ(2) * t525 - t558 * t553;
t579 = -qJ(2) * t526 - t556 * t553;
t673 = -pkin(5) * t474 + t560 * t493 + t562 * t579;
t672 = -pkin(3) * t435 + pkin(6) * t656;
t595 = t556 * t467;
t462 = -t509 - t605;
t593 = t561 * t504;
t574 = -t559 * t462 + t593;
t582 = t561 * t462 + t559 * t504;
t635 = -t555 * t582 + t557 * t574;
t652 = t558 * t635 - t595;
t594 = t558 * t467;
t654 = t556 * t635 + t594;
t667 = -t560 * t654 + t562 * t652;
t666 = t560 * t652 + t562 * t654;
t573 = (-t559 * t511 - t561 * t513) * qJD(4);
t489 = t559 * t605;
t581 = t489 - t593;
t636 = -t555 * t573 + t557 * t581;
t653 = -t558 * qJDD(4) + t556 * t636;
t655 = t556 * qJDD(4) + t558 * t636;
t665 = t560 * t655 + t562 * t653;
t664 = -t560 * t653 + t562 * t655;
t663 = 2 * qJD(5);
t566 = t557 ^ 2;
t547 = t566 * t630;
t564 = t555 ^ 2;
t603 = t564 * t630;
t528 = t547 + t603;
t644 = t562 * t525 + t560 * t526;
t658 = pkin(5) * t644 + t562 * t493 - t560 * t579;
t639 = t630 * (t564 + t566);
t520 = t557 * t639;
t592 = t557 * t598;
t480 = -t556 * t520 + t592;
t482 = t558 * t520 + t557 * t599;
t417 = t562 * t480 - t560 * t482;
t650 = t560 * t480 + t562 * t482;
t539 = t557 * t553;
t604 = t557 * t630;
t400 = -t539 + (pkin(3) * t604 - pkin(6) * qJDD(1) - t662) * t555;
t429 = -t555 * t553 + t662 * t557;
t401 = -pkin(3) * t547 + pkin(6) * t600 + t429;
t347 = t559 * t400 + t561 * t401;
t450 = t511 * pkin(4) - t513 * qJ(5);
t580 = qJDD(4) * qJ(5) + qJD(4) * t663 - t511 * t450 + t347;
t637 = t555 * t581 + t557 * t573;
t634 = t555 * t574 + t557 * t582;
t425 = t559 * t570 + t561 * t605;
t426 = t561 * t570 - t489;
t368 = -t555 * t425 + t557 * t426;
t583 = t558 * t368 + t595;
t584 = t556 * t368 - t594;
t633 = -t560 * t584 + t562 * t583;
t632 = t560 * t583 + t562 * t584;
t629 = pkin(4) * t561;
t554 = qJDD(1) * pkin(2);
t346 = -t561 * t400 + t559 * t401;
t286 = -t561 * t346 + t559 * t347;
t628 = t555 * t286;
t442 = -t630 * qJ(3) + qJDD(3) + t468 - t554;
t626 = t556 * t442;
t623 = t557 * t286;
t622 = t558 * t442;
t427 = -pkin(3) * t600 - t528 * pkin(6) + t442;
t620 = t559 * t427;
t619 = t559 * t661;
t616 = t559 * t461;
t610 = t561 * t427;
t608 = t561 * t461;
t606 = -t435 - t563;
t591 = -qJ(5) * t559 - pkin(3);
t590 = -t442 + t554;
t287 = t559 * t346 + t561 * t347;
t428 = t662 * t555 + t539;
t372 = t555 * t428 + t557 * t429;
t485 = -t560 * t532 - t562 * t533;
t586 = t513 * t450 + qJDD(5) + t346;
t531 = t562 * qJDD(1) - t560 * t630;
t585 = -pkin(5) * t531 - t560 * g(3);
t371 = t557 * t428 - t555 * t429;
t486 = t525 * t557 * t555;
t487 = (-t556 * t604 + t592) * t555;
t578 = t562 * t486 + t560 * t487;
t577 = t560 * t486 - t562 * t487;
t484 = t562 * t532 - t560 * t533;
t572 = -qJDD(4) * pkin(4) + t586;
t569 = -t462 * pkin(4) + t427 + t696;
t568 = t513 * t663 - t569;
t545 = t566 * qJDD(1);
t543 = t564 * qJDD(1);
t530 = t560 * qJDD(1) + t562 * t630;
t529 = t547 - t603;
t524 = t545 - t543;
t523 = t545 + t543;
t519 = t555 * t639;
t505 = -pkin(5) * t530 + t562 * g(3);
t481 = t558 * t519 + t555 * t599;
t478 = t556 * t519 - t555 * t598;
t473 = t558 * t524 - t556 * t529;
t472 = t558 * t523 - t556 * t528;
t471 = t556 * t524 + t558 * t529;
t470 = t556 * t523 + t558 * t528;
t463 = t642 - 0.2e1 * t504;
t418 = -t560 * t478 + t562 * t481;
t416 = t562 * t478 + t560 * t481;
t403 = -t560 * t470 + t562 * t472;
t402 = t562 * t470 + t560 * t472;
t391 = -t559 * t463 - t608;
t389 = t561 * t463 - t616;
t383 = pkin(1) * t553 + qJ(2) * t589;
t378 = t608 - t619;
t377 = t561 * t661 + t616;
t369 = t610 + t715;
t365 = t557 * t425 + t555 * t426;
t354 = -qJ(2) * t478 - t556 * t429 + t557 * t622;
t353 = -qJ(2) * t480 - t556 * t428 + t555 * t622;
t352 = qJ(2) * t481 + t558 * t429 + t557 * t626;
t351 = -qJ(2) * t482 + t558 * t428 + t555 * t626;
t350 = t620 - t681;
t336 = -qJ(2) * t470 + t558 * t371;
t335 = qJ(2) * t472 + t556 * t371;
t334 = -t555 * t389 + t557 * t391;
t331 = -pkin(3) * t463 + t620 + t714;
t318 = pkin(4) * t642 + qJ(5) * t509 + t293;
t317 = t558 * t372 + t626;
t316 = t556 * t372 - t622;
t315 = t556 * t463 + t724;
t313 = -t558 * t463 + t725;
t311 = -pkin(3) * t461 - t610 + t683;
t310 = (pkin(4) * qJD(4) - (2 * qJD(5))) * t513 + t569;
t307 = -t555 * t377 + t557 * t378;
t306 = t558 * t334 + t679;
t305 = t556 * t334 - t677;
t302 = t563 * qJ(5) - t572;
t301 = -t563 * pkin(4) + t580;
t298 = (-t461 - t605) * pkin(4) + t568;
t297 = t556 * t661 - t724;
t296 = -t558 * t661 - t725;
t295 = t558 * t307 - t679;
t294 = t556 * t307 + t677;
t292 = -pkin(4) * t605 + t568 - t696;
t291 = t606 * qJ(5) + t572;
t290 = t606 * pkin(4) + t580;
t285 = -qJ(5) * t608 - t559 * t298 - t681;
t284 = t347 - t723;
t283 = -t560 * t316 + t562 * t317;
t282 = t562 * t316 + t560 * t317;
t281 = -t560 * t313 + t562 * t315;
t279 = t562 * t313 + t560 * t315;
t277 = -pkin(3) * t427 + pkin(6) * t287;
t276 = t561 * t298 + t591 * t461 + t683;
t275 = -t286 - t682;
t274 = pkin(4) * t619 + t561 * t292 - t715;
t273 = t346 + t695;
t270 = -qJ(2) * t316 - (pkin(2) * t556 - qJ(3) * t558) * t371;
t269 = t561 * t301 - t559 * t302;
t268 = t559 * t301 + t561 * t302;
t267 = -t555 * t331 + t557 * t369 + t727;
t266 = t287 + t672;
t265 = -t714 + t559 * t292 - (pkin(3) + t629) * t661;
t262 = -t560 * t296 + t562 * t297;
t261 = t562 * t296 + t560 * t297;
t260 = (-t643 - t563) * qJ(5) + (-qJDD(4) - t641) * pkin(4) + t586 + t695;
t259 = -t555 * t311 + t557 * t350 - t697;
t258 = -qJ(5) * t640 + (-t455 + t563) * pkin(4) - t580 + t723;
t257 = qJ(2) * t317 - (-pkin(2) * t558 - qJ(3) * t556 - pkin(1)) * t371;
t256 = -t559 * t290 + t561 * t291 - t682;
t255 = t557 * t287 - t628;
t254 = t555 * t287 + t623;
t253 = t561 * t290 + t559 * t291 + t672;
t252 = t558 * t255 + t556 * t427;
t251 = t556 * t255 - t558 * t427;
t250 = -pkin(6) * t268 + (pkin(4) * t559 - qJ(5) * t561) * t310;
t249 = -t555 * t276 + t557 * t285 - t697;
t248 = -t555 * t268 + t557 * t269;
t247 = t557 * t268 + t555 * t269;
t246 = -pkin(2) * t254 - pkin(3) * t286;
t245 = -qJ(2) * t313 + t558 * t267 - t556 * t284;
t244 = -t555 * t266 + t557 * t275 - t698;
t243 = -t555 * t265 + t557 * t274 - t727;
t242 = pkin(6) * t269 + (t591 - t629) * t310;
t241 = t558 * t248 + t556 * t310;
t240 = t556 * t248 - t558 * t310;
t239 = qJ(2) * t315 + t556 * t267 + t558 * t284 + t728;
t238 = t558 * t259 - t556 * t273 - t712;
t237 = t556 * t259 + t558 * t273 + t708;
t236 = -pkin(6) * t623 - qJ(3) * t254 - t555 * t277;
t235 = -t555 * t253 + t557 * t256 - t698;
t234 = -t560 * t251 + t562 * t252;
t233 = t562 * t251 + t560 * t252;
t232 = t558 * t244 - t556 * t293 - t713;
t231 = t558 * t249 - t556 * t260 - t712;
t230 = t556 * t244 + t558 * t293 + t709;
t229 = t558 * t235 - t556 * t318 - t713;
t228 = t556 * t249 + t558 * t260 + t708;
t227 = t556 * t235 + t558 * t318 + t709;
t226 = -pkin(2) * t247 - pkin(3) * t268 - pkin(4) * t302 - qJ(5) * t301;
t225 = -qJ(2) * t296 + t558 * t243 - t556 * t258;
t224 = qJ(2) * t297 + t556 * t243 + t558 * t258 - t728;
t223 = -t560 * t240 + t562 * t241;
t222 = t562 * t240 + t560 * t241;
t221 = -qJ(3) * t247 - t555 * t242 + t557 * t250;
t220 = -qJ(2) * t251 + t558 * t236 - t556 * t246;
t219 = -pkin(1) * t254 + qJ(2) * t252 + t556 * t236 + t558 * t246;
t218 = -qJ(2) * t240 + t558 * t221 - t556 * t226;
t217 = -pkin(1) * t247 + qJ(2) * t241 + t556 * t221 + t558 * t226;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t530, -t531, 0, t485, 0, 0, 0, 0, 0, 0, -t644, -t474, 0, t344, 0, 0, 0, 0, 0, 0, -t650, t418, t403, t283, 0, 0, 0, 0, 0, 0, t702, t281, t704, t234, 0, 0, 0, 0, 0, 0, t702, t704, t262, t223; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t531, -t530, 0, t484, 0, 0, 0, 0, 0, 0, t474, -t644, 0, -t674, 0, 0, 0, 0, 0, 0, t417, t416, t402, t282, 0, 0, 0, 0, 0, 0, t701, t279, t703, t233, 0, 0, 0, 0, 0, 0, t701, t703, t261, t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t553, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t371, 0, 0, 0, 0, 0, 0, t670, -t328, t668, t254, 0, 0, 0, 0, 0, 0, t670, t668, t328, t247; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t531, 0, -t530, 0, t585, -t505, -t484, -pkin(5) * t484, 0, 0, t474, 0, -t644, 0, t673, t658, t674, pkin(5) * t674 + qJ(2) * t607 - t560 * t383, -t577, -t560 * t471 + t562 * t473, t418, t577, t650, 0, -pkin(5) * t417 - t560 * t351 + t562 * t353, -pkin(5) * t416 - t560 * t352 + t562 * t354, -pkin(5) * t402 - t560 * t335 + t562 * t336, -pkin(5) * t282 - t560 * t257 + t562 * t270, t633, -t560 * t305 + t562 * t306, t718, t667, t729, t664, -t560 * t237 + t562 * t238 - t722, -pkin(5) * t279 - t560 * t239 + t562 * t245, -t560 * t230 + t562 * t232 - t720, -pkin(5) * t233 - t560 * t219 + t562 * t220, t633, t718, -t560 * t294 + t562 * t295, t664, -t729, t667, -t560 * t228 + t562 * t231 - t722, -t560 * t227 + t562 * t229 - t720, -pkin(5) * t261 - t560 * t224 + t562 * t225, -pkin(5) * t222 - t560 * t217 + t562 * t218; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t530, 0, t531, 0, t505, t585, t485, pkin(5) * t485, 0, 0, t644, 0, t474, 0, -t658, t673, t344, pkin(5) * t344 + qJ(2) * t613 + t562 * t383, t578, t562 * t471 + t560 * t473, t416, -t578, -t417, 0, -pkin(5) * t650 + t562 * t351 + t560 * t353, pkin(5) * t418 + t562 * t352 + t560 * t354, pkin(5) * t403 + t562 * t335 + t560 * t336, pkin(5) * t283 + t562 * t257 + t560 * t270, t632, t562 * t305 + t560 * t306, t717, t666, -t730, t665, t562 * t237 + t560 * t238 + t721, pkin(5) * t281 + t562 * t239 + t560 * t245, t562 * t230 + t560 * t232 + t719, pkin(5) * t234 + t562 * t219 + t560 * t220, t632, t717, t562 * t294 + t560 * t295, t665, t730, t666, t562 * t228 + t560 * t231 + t721, t562 * t227 + t560 * t229 + t719, pkin(5) * t262 + t562 * t224 + t560 * t225, pkin(5) * t223 + t562 * t217 + t560 * t218; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t532, t533, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t526 - t468, -pkin(1) * t525 - t469, 0, -pkin(1) * t396, t543, 0.2e1 * t555 * t600, 0, t545, 0, 0, pkin(1) * t480 - qJ(3) * t520 + t557 * t590, pkin(1) * t478 + qJ(3) * t519 - t555 * t590, pkin(1) * t470 + pkin(2) * t528 + qJ(3) * t523 + t372, pkin(1) * t316 - pkin(2) * t442 + qJ(3) * t372, t365, t557 * t389 + t555 * t391, t688, t634, t705, t637, t557 * t311 + t555 * t350 + t710, pkin(1) * t313 - pkin(2) * t463 + t557 * t331 + t555 * t369 + t726, t557 * t266 + t555 * t275 + t711, pkin(1) * t251 - pkin(2) * t427 - pkin(6) * t628 + qJ(3) * t255 + t557 * t277, t365, t688, t557 * t377 + t555 * t378, t637, -t705, t634, t557 * t276 + t555 * t285 + t710, t557 * t253 + t555 * t256 + t711, pkin(1) * t296 - pkin(2) * t661 + t557 * t265 + t555 * t274 - t726, pkin(1) * t240 - pkin(2) * t310 + qJ(3) * t248 + t557 * t242 + t555 * t250;];
tauB_reg = t1;
