% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S5RRRPR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5]';
% 
% Output:
% MMD_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:36
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S5RRRPR11_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR11_inertiaDJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR11_inertiaDJ_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRPR11_inertiaDJ_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:35:14
% EndTime: 2019-12-31 21:35:22
% DurationCPUTime: 2.47s
% Computational Cost: add. (1936->262), mult. (4657->476), div. (0->0), fcn. (3628->6), ass. (0->145)
t173 = cos(qJ(5));
t132 = qJD(3) * t173;
t92 = cos(qJ(3));
t84 = qJD(3) * t92;
t89 = sin(qJ(5));
t90 = sin(qJ(3));
t186 = t90 * t132 - t89 * t84;
t85 = t90 ^ 2;
t87 = t92 ^ 2;
t165 = t85 - t87;
t176 = pkin(6) * t90;
t178 = pkin(2) * t92;
t113 = pkin(3) + t176 + t178;
t179 = pkin(7) - pkin(8);
t91 = sin(qJ(2));
t185 = t179 * t91 + pkin(1);
t93 = cos(qJ(2));
t98 = t185 * t92 + (pkin(4) + t113) * t93;
t60 = t165 * qJD(3);
t131 = qJD(5) * t173;
t155 = qJD(5) * t89;
t20 = t90 * t131 - t92 * t155 - t186;
t124 = t92 * t132;
t160 = qJD(3) * t90;
t172 = t89 * t90;
t55 = t173 * t92 + t172;
t19 = t55 * qJD(5) - t89 * t160 - t124;
t174 = t91 * pkin(7);
t177 = pkin(2) * t93;
t123 = -t174 - t177;
t114 = -pkin(1) + t123;
t108 = t92 * t114;
t175 = pkin(7) * t93;
t122 = pkin(2) * t91 - t175;
t109 = t122 * qJD(2);
t168 = qJD(3) * t108 + t90 * t109;
t158 = qJD(3) * t93;
t144 = t90 * t158;
t82 = t91 * qJD(2);
t43 = t92 * t82 + t144;
t15 = t43 * pkin(6) - t168;
t163 = qJ(4) * t90;
t180 = pkin(3) + pkin(4);
t184 = -t180 * t92 - t163;
t162 = qJ(4) * t92;
t119 = pkin(3) * t90 - t162;
t112 = pkin(6) + t119;
t36 = t112 * t91;
t157 = qJD(4) * t90;
t41 = t119 * qJD(3) - t157;
t120 = pkin(3) * t92 + t163;
t59 = -pkin(2) - t120;
t183 = qJD(2) * (-t59 * t93 + t174) - qJD(3) * t36 - t41 * t91;
t156 = qJD(4) * t92;
t182 = t120 * qJD(3) - t156;
t169 = t92 * t93;
t80 = pkin(6) * t169;
t166 = t90 * t114 + t80;
t139 = t90 * t82;
t167 = -pkin(6) * t139 - t92 * t109;
t16 = -qJD(3) * t166 - t167;
t181 = 0.2e1 * qJD(4);
t171 = t90 * t93;
t170 = t91 * t92;
t86 = t91 ^ 2;
t164 = -t93 ^ 2 + t86;
t161 = qJD(2) * t92;
t159 = qJD(3) * t91;
t154 = t93 * qJD(2);
t153 = t93 * qJD(4);
t152 = qJ(4) * qJD(2);
t151 = pkin(6) * t171;
t150 = -0.2e1 * pkin(1) * qJD(2);
t149 = -0.2e1 * pkin(2) * qJD(3);
t148 = pkin(3) * t82;
t147 = pkin(7) * t160;
t146 = pkin(7) * t84;
t145 = pkin(6) * t154;
t143 = t92 * t158;
t138 = t90 * t84;
t137 = t91 * t154;
t136 = t92 * t154;
t135 = t173 * t90;
t134 = t91 * t152;
t133 = qJD(2) * t173;
t130 = t164 * qJD(2);
t129 = 0.2e1 * t137;
t128 = t90 * t136;
t127 = t86 * t138;
t126 = t173 * t180;
t28 = -qJ(4) * t93 + t166;
t30 = -t92 * (-pkin(1) - t174) + t113 * t93;
t118 = -t28 * t90 + t30 * t92;
t34 = t108 - t151;
t117 = -t166 * t90 - t34 * t92;
t115 = t179 * t135;
t18 = t90 * t91 * pkin(8) + t28;
t95 = (t80 + (-t177 - t185) * t90) * qJD(3) + (-pkin(8) * t169 - t180 * t91) * qJD(2) + t167;
t96 = -t153 + (pkin(8) * t170 - t151) * qJD(3) + (pkin(8) * t171 + (-t92 * pkin(6) + qJ(4)) * t91) * qJD(2) + t168;
t97 = t173 * t98;
t1 = -qJD(5) * t97 + t18 * t155 - t173 * t96 - t89 * t95;
t110 = -t180 * t90 + t162;
t107 = -pkin(6) + t110;
t58 = t173 * qJ(4) - t89 * t180;
t12 = -t15 + t134 - t153;
t13 = -t148 - t16;
t100 = t118 * qJD(3) + t12 * t92 + t13 * t90;
t99 = t117 * qJD(3) - t15 * t92 - t16 * t90;
t6 = t173 * t18 + t98 * t89;
t94 = t173 * t95 - t89 * t96;
t73 = -0.2e1 * t137;
t72 = -0.2e1 * t138;
t71 = 0.2e1 * t138;
t70 = pkin(7) * t143;
t67 = t179 * t92;
t57 = -t89 * qJ(4) - t126;
t56 = -t89 * t92 + t135;
t52 = pkin(2) - t184;
t45 = t139 - t143;
t44 = t90 * t154 + t91 * t84;
t42 = -t90 * t159 + t136;
t40 = t55 * t91;
t39 = -t91 * t135 + t89 * t170;
t38 = t89 * qJD(4) + t58 * qJD(5);
t37 = qJ(4) * t155 - t173 * qJD(4) + qJD(5) * t126;
t33 = t110 * qJD(3) + t157;
t32 = 0.2e1 * t87 * t137 - 0.2e1 * t127;
t31 = 0.2e1 * t85 * t137 + 0.2e1 * t127;
t29 = t165 * t159 - t128;
t27 = -t90 * t130 + t91 * t143;
t26 = 0.4e1 * t91 * t138 + t165 * t154;
t25 = t179 * t172 + t173 * t67;
t24 = -t89 * t67 + t115;
t23 = t107 * t91;
t22 = 0.2e1 * t91 * t144 + 0.2e1 * t164 * t161;
t21 = -0.2e1 * t91 * t128 + t86 * t60;
t14 = t112 * t154 + t182 * t91;
t11 = t67 * t131 + (-t124 + (-qJD(3) + qJD(5)) * t172) * t179;
t10 = -qJD(5) * t115 + t67 * t155 + t186 * t179;
t9 = t55 * t154 + t20 * t91;
t8 = -t133 * t171 + t89 * t136 + t19 * t91;
t7 = (t184 * qJD(3) + t156) * t91 + t107 * t154;
t5 = -t89 * t18 + t97;
t2 = -t6 * qJD(5) + t94;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t129, -0.2e1 * t130, 0, t73, 0, 0, t91 * t150, t93 * t150, 0, 0, t32, 0.2e1 * t21, t22, t31, 0.2e1 * t27, t73, 0.2e1 * t34 * t82 - 0.2e1 * t16 * t93 + 0.2e1 * (t90 * t129 + t86 * t84) * pkin(6), -0.2e1 * t166 * t82 - 0.2e1 * t15 * t93 + 0.2e1 * (t92 * t129 - t86 * t160) * pkin(6), 0.2e1 * t117 * t154 + 0.2e1 * (t15 * t90 - t16 * t92 + (-t166 * t92 + t34 * t90) * qJD(3)) * t91, 0.2e1 * pkin(6) ^ 2 * t137 - 0.2e1 * t15 * t166 + 0.2e1 * t34 * t16, t32, t22, -0.2e1 * t21, t73, -0.2e1 * t27, t31, 0.2e1 * (qJD(2) * t36 * t90 + t13) * t93 + 0.2e1 * (-qJD(2) * t30 + t14 * t90 + t36 * t84) * t91, 0.2e1 * t118 * t154 + 0.2e1 * (-t12 * t90 + t13 * t92 + (-t28 * t92 - t30 * t90) * qJD(3)) * t91, 0.2e1 * (-t36 * t161 - t12) * t93 + 0.2e1 * (qJD(2) * t28 - t14 * t92 + t36 * t160) * t91, 0.2e1 * t12 * t28 + 0.2e1 * t13 * t30 + 0.2e1 * t14 * t36, 0.2e1 * t40 * t9, -0.2e1 * t39 * t9 - 0.2e1 * t40 * t8, -0.2e1 * t40 * t82 + 0.2e1 * t9 * t93, 0.2e1 * t39 * t8, 0.2e1 * t39 * t82 - 0.2e1 * t8 * t93, t73, 0.2e1 * t2 * t93 + 0.2e1 * t23 * t8 + 0.2e1 * t7 * t39 - 0.2e1 * t5 * t82, 0.2e1 * t1 * t93 + 0.2e1 * t23 * t9 + 0.2e1 * t7 * t40 + 0.2e1 * t6 * t82, 0.2e1 * t1 * t39 - 0.2e1 * t2 * t40 - 0.2e1 * t5 * t9 - 0.2e1 * t6 * t8, -0.2e1 * t1 * t6 + 0.2e1 * t2 * t5 + 0.2e1 * t23 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t154, 0, -t82, 0, -t145, pkin(6) * t82, 0, 0, -t29, -t26, t45, t29, t43, 0, t70 + (t176 - t178) * t159 + (t123 * t90 - t80) * qJD(2), (pkin(6) * t170 + t122 * t90) * qJD(3) + (t92 * t123 + t151) * qJD(2), t99, -pkin(2) * t145 + pkin(7) * t99, -t29, t45, t26, 0, -t43, t29, t70 + (t59 * t159 - t14) * t92 - t183 * t90, t100, (-t14 + (t59 * t91 + t175) * qJD(3)) * t90 + t183 * t92, pkin(7) * t100 + t14 * t59 + t36 * t41, -t19 * t40 + t56 * t9, t19 * t39 - t20 * t40 - t55 * t9 - t56 * t8, -t19 * t93 - t56 * t82, t20 * t39 + t55 * t8, -t20 * t93 + t55 * t82, 0, -t11 * t93 + t23 * t20 - t24 * t82 + t33 * t39 + t52 * t8 + t7 * t55, t10 * t93 - t23 * t19 + t25 * t82 + t33 * t40 + t52 * t9 + t7 * t56, t1 * t55 + t10 * t39 + t11 * t40 + t19 * t5 - t2 * t56 - t20 * t6 - t24 * t9 - t25 * t8, -t1 * t25 - t10 * t6 - t11 * t5 + t2 * t24 + t23 * t33 + t52 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, -0.2e1 * t60, 0, t72, 0, 0, t90 * t149, t92 * t149, 0, 0, t71, 0, 0.2e1 * t60, 0, 0, t72, 0.2e1 * t59 * t160 - 0.2e1 * t41 * t92, 0, -0.2e1 * t41 * t90 - 0.2e1 * t59 * t84, 0.2e1 * t59 * t41, -0.2e1 * t56 * t19, 0.2e1 * t19 * t55 - 0.2e1 * t20 * t56, 0, 0.2e1 * t55 * t20, 0, 0, 0.2e1 * t20 * t52 + 0.2e1 * t33 * t55, -0.2e1 * t19 * t52 + 0.2e1 * t33 * t56, 0.2e1 * t10 * t55 + 0.2e1 * t11 * t56 + 0.2e1 * t19 * t24 - 0.2e1 * t20 * t25, -0.2e1 * t10 * t25 - 0.2e1 * t11 * t24 + 0.2e1 * t33 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, 0, -t44, t82, t16, t15, 0, 0, 0, t42, 0, t82, t44, 0, t16 + 0.2e1 * t148, (-pkin(3) * t154 - qJ(4) * t159) * t92 + (-t93 * t152 + (pkin(3) * qJD(3) - qJD(4)) * t91) * t90, -t15 + 0.2e1 * t134 - 0.2e1 * t153, -pkin(3) * t13 + qJ(4) * t12 + qJD(4) * t28, 0, 0, -t9, 0, t8, t82, t131 * t18 + t155 * t98 - t38 * t93 - t57 * t82 - t94, t37 * t93 + t58 * t82 - t1, t37 * t39 + t38 * t40 - t57 * t9 - t58 * t8, -t1 * t58 + t2 * t57 - t37 * t6 - t38 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, 0, -t160, 0, -t146, t147, 0, 0, 0, t84, 0, 0, t160, 0, -t146, -t182, -t147, -t182 * pkin(7), 0, 0, t19, 0, t20, 0, t11, -t10, t19 * t57 - t20 * t58 + t37 * t55 + t38 * t56, -t10 * t58 - t11 * t57 - t24 * t38 - t25 * t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t181, qJ(4) * t181, 0, 0, 0, 0, 0, 0, 0.2e1 * t38, -0.2e1 * t37, 0, -0.2e1 * t37 * t58 - 0.2e1 * t38 * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t82, t42, 0, t13, 0, 0, 0, 0, 0, 0, -t133 * t91 - t155 * t93, -t131 * t93 + t82 * t89, -t173 * t9 - t89 * t8 + (-t173 * t39 + t40 * t89) * qJD(5), t2 * t173 - t1 * t89 + (t173 * t6 - t5 * t89) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t84, 0, t146, 0, 0, 0, 0, 0, 0, 0, 0, t173 * t19 - t89 * t20 + (-t173 * t55 + t56 * t89) * qJD(5), -t11 * t173 - t10 * t89 + (t173 * t25 - t24 * t89) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t155, t131, 0, -t38 * t173 - t37 * t89 + (t173 * t58 - t57 * t89) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t9, 0, -t8, -t82, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t19, 0, -t20, 0, -t11, t10, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t38, t37, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t155, -t131, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t3;
