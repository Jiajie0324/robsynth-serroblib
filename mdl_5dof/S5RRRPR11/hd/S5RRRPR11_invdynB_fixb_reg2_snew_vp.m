% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRPR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:36
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRPR11_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR11_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR11_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR11_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR11_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRPR11_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:35:26
% EndTime: 2019-12-31 21:35:46
% DurationCPUTime: 14.56s
% Computational Cost: add. (31433->560), mult. (62639->784), div. (0->0), fcn. (41774->8), ass. (0->410)
t695 = sin(qJ(3));
t699 = cos(qJ(3));
t696 = sin(qJ(2));
t749 = qJD(1) * t696;
t654 = t695 * qJD(2) + t699 * t749;
t700 = cos(qJ(2));
t744 = qJD(1) * qJD(2);
t733 = t700 * t744;
t743 = t696 * qJDD(1);
t658 = t733 + t743;
t729 = -t699 * qJDD(2) + t695 * t658;
t747 = t700 * qJD(1);
t680 = -qJD(3) + t747;
t746 = qJD(3) - t680;
t551 = t654 * t746 + t729;
t652 = -t699 * qJD(2) + t695 * t749;
t712 = -t695 * qJDD(2) - t699 * t658;
t705 = t652 * qJD(3) + t712;
t783 = t652 * t680;
t804 = t783 - t705;
t772 = t695 * t804;
t497 = t699 * t551 + t772;
t648 = t654 ^ 2;
t794 = t652 ^ 2;
t611 = t648 - t794;
t471 = t700 * t497 - t696 * t611;
t493 = -t695 * t551 + t699 * t804;
t697 = sin(qJ(1));
t701 = cos(qJ(1));
t878 = t471 * t697 + t493 * t701;
t877 = t471 * t701 - t493 * t697;
t793 = t680 ^ 2;
t629 = t794 - t793;
t683 = t696 * t744;
t741 = t700 * qJDD(1);
t659 = -t683 + t741;
t649 = -qJDD(3) + t659;
t782 = t654 * t652;
t707 = t649 - t782;
t769 = t695 * t707;
t532 = t699 * t629 + t769;
t552 = (qJD(3) + t680) * t654 + t729;
t490 = t700 * t532 - t696 * t552;
t756 = t699 * t707;
t529 = t695 * t629 - t756;
t876 = t490 * t697 - t529 * t701;
t875 = t490 * t701 + t529 * t697;
t803 = t783 + t705;
t832 = -t695 * t552 + t699 * t803;
t805 = t648 + t794;
t831 = -t699 * t552 - t695 * t803;
t847 = -t696 * t805 + t700 * t831;
t856 = t697 * t832 + t701 * t847;
t874 = pkin(5) * t856;
t857 = t697 * t847 - t701 * t832;
t873 = pkin(5) * t857;
t599 = t793 + t648;
t515 = t699 * t599 - t769;
t872 = pkin(1) * t515;
t871 = pkin(2) * t515;
t870 = pkin(6) * t847;
t849 = t696 * t831 + t700 * t805;
t869 = pkin(6) * t849;
t868 = pkin(7) * t515;
t524 = t695 * t599 + t756;
t867 = pkin(7) * t524;
t864 = t696 * t524;
t863 = t697 * t515;
t862 = t700 * t524;
t861 = t701 * t515;
t860 = -pkin(1) * t849 - pkin(2) * t805 - pkin(7) * t831;
t859 = t497 * t696 + t611 * t700;
t858 = t532 * t696 + t552 * t700;
t855 = pkin(7) * t832;
t630 = -t648 + t793;
t730 = t649 + t782;
t768 = t695 * t730;
t819 = -t699 * t630 + t768;
t755 = t699 * t730;
t818 = -t695 * t630 - t755;
t829 = -t696 * t803 + t700 * t818;
t848 = t697 * t829 + t701 * t819;
t846 = -t697 * t819 + t701 * t829;
t802 = -t793 - t794;
t817 = t695 * t802 - t755;
t845 = pkin(1) * t817;
t844 = pkin(2) * t817;
t814 = t699 * t802 + t768;
t843 = pkin(7) * t814;
t842 = pkin(7) * t817;
t841 = qJ(4) * t804;
t838 = t696 * t814;
t837 = t697 * t817;
t835 = t700 * t814;
t834 = t701 * t817;
t830 = t696 * t818 + t700 * t803;
t828 = -2 * qJD(4);
t694 = sin(qJ(5));
t698 = cos(qJ(5));
t602 = -t698 * t652 + t694 * t654;
t604 = t694 * t652 + t698 * t654;
t537 = t604 * t602;
t644 = qJDD(5) + t649;
t806 = -t537 + t644;
t826 = t694 * t806;
t823 = t698 * t806;
t670 = t701 * g(1) + t697 * g(2);
t702 = qJD(1) ^ 2;
t642 = -t702 * pkin(1) + qJDD(1) * pkin(6) - t670;
t789 = pkin(2) * t700;
t722 = -pkin(7) * t696 - t789;
t656 = t722 * qJD(1);
t787 = t700 * g(3);
t792 = qJD(2) ^ 2;
t571 = -qJDD(2) * pkin(2) - t792 * pkin(7) + (qJD(1) * t656 + t642) * t696 + t787;
t596 = t654 * qJD(3) + t729;
t820 = t596 * pkin(3) + t571 - t841;
t777 = t680 * t699;
t626 = t654 * t777;
t778 = t680 * t695;
t737 = t652 * t778;
t716 = -t626 - t737;
t625 = t654 * t778;
t734 = t652 * t777;
t717 = -t625 + t734;
t796 = -t696 * t649 + t700 * t717;
t816 = t697 * t796 + t701 * t716;
t710 = t699 * t596 + t737;
t711 = t695 * t596 - t734;
t735 = t696 * t782;
t797 = t700 * t711 - t735;
t815 = t697 * t797 + t701 * t710;
t813 = -t697 * t716 + t701 * t796;
t812 = -t697 * t710 + t701 * t797;
t502 = -t602 * qJD(5) + t694 * t596 - t698 * t705;
t672 = qJD(5) + t680;
t583 = t672 * t602;
t807 = t502 - t583;
t669 = t697 * g(1) - t701 * g(2);
t641 = qJDD(1) * pkin(1) + t702 * pkin(6) + t669;
t714 = -t659 + t683;
t715 = t658 + t733;
t549 = pkin(2) * t714 - pkin(7) * t715 - t641;
t624 = -t696 * g(3) + t700 * t642;
t572 = -t792 * pkin(2) + qJDD(2) * pkin(7) + t656 * t747 + t624;
t504 = t695 * t549 + t699 * t572;
t606 = t652 * pkin(3) - t654 * qJ(4);
t713 = -t649 * qJ(4) - t652 * t606 + t680 * t828 + t504;
t545 = t695 * t705 + t626;
t546 = -t699 * t705 + t625;
t718 = t700 * t546 + t735;
t800 = t701 * t545 + t697 * t718;
t799 = t700 * t649 + t696 * t717;
t738 = t700 * t782;
t798 = t696 * t711 + t738;
t795 = -t545 * t697 + t701 * t718;
t600 = t602 ^ 2;
t601 = t604 ^ 2;
t671 = t672 ^ 2;
t791 = pkin(3) + pkin(4);
t790 = pkin(2) * t696;
t788 = pkin(3) * t699;
t786 = qJ(4) * t699;
t781 = t654 * t680;
t780 = t672 * t694;
t779 = t672 * t698;
t690 = t696 ^ 2;
t776 = t690 * t702;
t453 = (-pkin(3) * t680 + t828) * t654 + t820;
t721 = t680 * pkin(4) - t654 * pkin(8);
t431 = t596 * pkin(4) + pkin(8) * t794 - t654 * t721 + t453;
t775 = t694 * t431;
t513 = t537 + t644;
t774 = t694 * t513;
t770 = t695 * t571;
t765 = t696 * t641;
t679 = t700 * t702 * t696;
t666 = -t679 + qJDD(2);
t763 = t696 * t666;
t667 = qJDD(2) + t679;
t762 = t696 * t667;
t761 = t698 * t431;
t760 = t698 * t513;
t757 = t699 * t571;
t753 = t700 * t641;
t752 = t700 * t666;
t503 = -t699 * t549 + t695 * t572;
t751 = t805 - t793;
t691 = t700 ^ 2;
t750 = t690 + t691;
t742 = t697 * qJDD(1);
t740 = t701 * qJDD(1);
t739 = t700 * t537;
t736 = t696 * t537;
t732 = qJ(4) * t695 + pkin(2);
t724 = t654 * t606 + qJDD(4) + t503;
t709 = t649 * pkin(3) + t724;
t704 = -qJ(4) * t793 + t709;
t425 = t730 * pkin(4) + pkin(8) * t803 + t704;
t452 = -pkin(3) * t793 + t713;
t430 = -pkin(4) * t794 + t596 * pkin(8) - t680 * t721 + t452;
t383 = -t698 * t425 + t694 * t430;
t731 = -t698 * t596 - t694 * t705;
t623 = t696 * t642 + t787;
t561 = t696 * t623 + t700 * t624;
t616 = -t697 * t669 - t701 * t670;
t727 = t697 * t679;
t726 = t701 * t679;
t663 = -t697 * t702 + t740;
t720 = -pkin(5) * t663 - g(3) * t697;
t719 = t696 * t546 - t738;
t384 = t694 * t425 + t698 * t430;
t349 = -t698 * t383 + t694 * t384;
t350 = t694 * t383 + t698 * t384;
t440 = -t699 * t503 + t695 * t504;
t441 = t695 * t503 + t699 * t504;
t560 = t700 * t623 - t696 * t624;
t615 = t701 * t669 - t697 * t670;
t706 = (-qJD(5) + t672) * t604 - t731;
t703 = 0.2e1 * qJD(4) * t654 - t820;
t688 = t691 * t702;
t676 = -t688 - t792;
t675 = t688 - t792;
t674 = -t776 - t792;
t673 = -t776 + t792;
t665 = t688 - t776;
t664 = t688 + t776;
t662 = t701 * t702 + t742;
t661 = t750 * qJDD(1);
t660 = -0.2e1 * t683 + t741;
t657 = 0.2e1 * t733 + t743;
t651 = t700 * t667;
t650 = t750 * t744;
t637 = -pkin(5) * t662 + t701 * g(3);
t628 = t700 * t658 - t690 * t744;
t627 = -t696 * t659 - t691 * t744;
t622 = -t696 * t674 - t752;
t621 = -t696 * t673 + t651;
t620 = t700 * t676 - t762;
t619 = t700 * t675 - t763;
t618 = t700 * t674 - t763;
t617 = t696 * t676 + t651;
t610 = t701 * t661 - t697 * t664;
t609 = t697 * t661 + t701 * t664;
t605 = -t696 * t657 + t700 * t660;
t580 = -t601 + t671;
t579 = t600 - t671;
t578 = t701 * t622 + t697 * t657;
t577 = t701 * t620 - t697 * t660;
t576 = t697 * t622 - t701 * t657;
t575 = t697 * t620 + t701 * t660;
t574 = -pkin(6) * t618 - t753;
t573 = -pkin(6) * t617 - t765;
t564 = -pkin(1) * t618 + t624;
t563 = -pkin(1) * t617 + t623;
t562 = -t601 - t671;
t557 = t652 * t746 + t712;
t550 = t596 - t781;
t534 = t601 - t600;
t521 = -t671 - t600;
t520 = t701 * t561 - t697 * t641;
t519 = t697 * t561 + t701 * t641;
t511 = (-t602 * t698 + t604 * t694) * t672;
t510 = (t602 * t694 + t604 * t698) * t672;
t505 = -t600 - t601;
t501 = -t604 * qJD(5) - t731;
t492 = t757 + t868;
t487 = t698 * t579 - t774;
t486 = -t694 * t580 + t823;
t485 = -t694 * t579 - t760;
t484 = -t698 * t580 - t826;
t483 = t770 - t842;
t482 = t696 * t550 + t835;
t481 = -t696 * t557 + t862;
t480 = -t700 * t550 + t838;
t479 = t700 * t557 + t864;
t478 = -t694 * t562 - t760;
t477 = t698 * t562 - t774;
t476 = t696 * t551 + t835;
t475 = -t696 * t804 - t862;
t474 = -t700 * t551 + t838;
t473 = t700 * t804 - t864;
t469 = t502 + t583;
t465 = (qJD(5) + t672) * t604 + t731;
t464 = t698 * t502 - t604 * t780;
t463 = -t694 * t502 - t604 * t779;
t462 = -t694 * t501 + t602 * t779;
t461 = -t698 * t501 - t602 * t780;
t460 = t698 * t521 - t826;
t459 = t694 * t521 + t823;
t451 = t504 + t871;
t450 = -t695 * t510 + t699 * t511;
t449 = -t699 * t510 - t695 * t511;
t448 = t503 - t844;
t447 = t700 * t450 - t696 * t644;
t446 = qJ(4) * t751 + t709;
t445 = t701 * t482 + t837;
t444 = t701 * t481 - t863;
t443 = t697 * t482 - t834;
t442 = t697 * t481 + t861;
t439 = pkin(3) * t751 + t713;
t438 = t701 * t476 + t837;
t437 = t701 * t475 + t863;
t436 = t697 * t476 - t834;
t435 = t697 * t475 - t861;
t434 = (-t550 + t781) * pkin(3) + t703;
t433 = pkin(3) * t781 + t703 + t841;
t432 = -pkin(2) * t832 - pkin(3) * t803 + qJ(4) * t552;
t429 = -t695 * t485 + t699 * t487;
t428 = -t695 * t484 + t699 * t486;
t427 = -t699 * t485 - t695 * t487;
t426 = -t699 * t484 - t695 * t486;
t424 = t700 * t441 + t696 * t571;
t423 = t696 * t441 - t700 * t571;
t421 = t695 * t477 + t699 * t478;
t420 = -t699 * t477 + t695 * t478;
t415 = t694 * t469 + t698 * t706;
t414 = -t698 * t465 - t694 * t807;
t413 = -t698 * t469 + t694 * t706;
t412 = t694 * t465 - t698 * t807;
t411 = -pkin(1) * t479 - pkin(2) * t557 - t770 - t867;
t410 = -t844 + (-t802 - t793) * qJ(4) + (t730 + t649) * pkin(3) + t724;
t409 = -t695 * t463 + t699 * t464;
t408 = -t695 * t461 + t699 * t462;
t407 = -t699 * t463 - t695 * t464;
t406 = -t699 * t461 - t695 * t462;
t405 = -pkin(1) * t474 + pkin(2) * t551 + t757 - t843;
t404 = t695 * t459 + t699 * t460;
t403 = -t699 * t459 + t695 * t460;
t402 = -t871 + qJ(4) * t707 + (-t599 + t793) * pkin(3) - t713;
t401 = -t440 - t855;
t400 = t699 * t452 + t695 * t704;
t399 = t695 * t452 - t699 * t704;
t398 = -t695 * t434 - t550 * t786 - t842;
t397 = -pkin(3) * t772 + t699 * t433 - t868;
t396 = t700 * t409 - t736;
t395 = t700 * t408 + t736;
t394 = t700 * t429 - t696 * t706;
t393 = t700 * t428 - t696 * t469;
t392 = t700 * t421 - t696 * t807;
t391 = t696 * t421 + t700 * t807;
t390 = -pkin(6) * t479 - t696 * t451 + t700 * t492;
t389 = -pkin(6) * t474 - t696 * t448 + t700 * t483;
t388 = t700 * t404 - t696 * t465;
t387 = t696 * t404 + t700 * t465;
t386 = t701 * t424 + t697 * t440;
t385 = t697 * t424 - t701 * t440;
t382 = t700 * t400 + t696 * t453;
t381 = t696 * t400 - t700 * t453;
t380 = -t441 + t860;
t379 = -pkin(1) * t423 + pkin(2) * t571 - pkin(7) * t441;
t378 = -pkin(8) * t477 + qJ(4) * t807 - t761;
t377 = -pkin(1) * t480 - t699 * t434 + t550 * t732 - t843;
t376 = -t695 * t439 + t699 * t446 - t855;
t375 = -pkin(1) * t473 + t867 - t695 * t433 + (-pkin(2) - t788) * t804;
t374 = -pkin(8) * t459 + qJ(4) * t465 - t775;
t373 = t700 * t401 + t790 * t832 - t869;
t372 = t695 * t413 + t699 * t415;
t371 = -t695 * t412 + t699 * t414;
t370 = -t699 * t413 + t695 * t415;
t369 = -t699 * t412 - t695 * t414;
t368 = t700 * t371 - t696 * t534;
t367 = -pkin(8) * t478 + t791 * t807 + t775;
t366 = -pkin(7) * t399 + (pkin(3) * t695 - t786) * t453;
t365 = -pkin(2) * t399 + pkin(3) * t704 - qJ(4) * t452;
t364 = -pkin(6) * t423 + (-pkin(7) * t700 + t790) * t440;
t363 = t701 * t392 + t697 * t420;
t362 = t697 * t392 - t701 * t420;
t361 = -pkin(8) * t460 + t791 * t465 - t761;
t360 = t700 * t372 - t696 * t505;
t359 = t696 * t372 + t700 * t505;
t358 = -t699 * t439 - t695 * t446 + t860;
t357 = t701 * t388 + t697 * t403;
t356 = t697 * t388 - t701 * t403;
t355 = -pkin(6) * t480 + t700 * t398 - t696 * t410;
t354 = -pkin(6) * t473 + t700 * t397 - t696 * t402;
t353 = t701 * t382 + t697 * t399;
t352 = t697 * t382 - t701 * t399;
t351 = t700 * t376 - t696 * t432 - t869;
t348 = -pkin(2) * t420 - qJ(4) * t478 + t791 * t477 - t384;
t347 = -pkin(8) * t349 - qJ(4) * t431;
t346 = -pkin(2) * t403 - qJ(4) * t460 + t791 * t459 - t383;
t345 = t701 * t360 + t697 * t370;
t344 = t697 * t360 - t701 * t370;
t343 = -pkin(1) * t381 - pkin(7) * t400 + (t732 + t788) * t453;
t342 = -pkin(8) * t413 + qJ(4) * t505 - t349;
t341 = -pkin(7) * t420 - t695 * t367 + t699 * t378;
t340 = -pkin(2) * t370 - qJ(4) * t415 + t791 * t413;
t339 = -pkin(8) * t415 + t791 * t505 - t350;
t338 = -pkin(8) * t350 - t791 * t431;
t337 = -pkin(7) * t403 - t695 * t361 + t699 * t374;
t336 = -pkin(6) * t381 - t696 * t365 + t700 * t366;
t335 = -pkin(1) * t391 - pkin(2) * t807 - pkin(7) * t421 - t699 * t367 - t695 * t378;
t334 = t695 * t349 + t699 * t350;
t333 = -t699 * t349 + t695 * t350;
t332 = -pkin(1) * t387 - pkin(2) * t465 - pkin(7) * t404 - t699 * t361 - t695 * t374;
t331 = t700 * t334 + t696 * t431;
t330 = t696 * t334 - t700 * t431;
t329 = -pkin(6) * t391 + t700 * t341 - t696 * t348;
t328 = -pkin(6) * t387 + t700 * t337 - t696 * t346;
t327 = -pkin(7) * t370 - t695 * t339 + t699 * t342;
t326 = -pkin(1) * t359 - pkin(2) * t505 - pkin(7) * t372 - t699 * t339 - t695 * t342;
t325 = t701 * t331 + t697 * t333;
t324 = t697 * t331 - t701 * t333;
t323 = -pkin(7) * t333 - t695 * t338 + t699 * t347;
t322 = -pkin(2) * t333 - qJ(4) * t350 + t791 * t349;
t321 = -pkin(6) * t359 + t700 * t327 - t696 * t340;
t320 = -pkin(1) * t330 + pkin(2) * t431 - pkin(7) * t334 - t699 * t338 - t695 * t347;
t319 = -pkin(6) * t330 - t696 * t322 + t700 * t323;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t662, -t663, 0, t616, 0, 0, 0, 0, 0, 0, t577, t578, t610, t520, 0, 0, 0, 0, 0, 0, t438, t444, t856, t386, 0, 0, 0, 0, 0, 0, t445, t856, t437, t353, 0, 0, 0, 0, 0, 0, t357, t363, t345, t325; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t663, -t662, 0, t615, 0, 0, 0, 0, 0, 0, t575, t576, t609, t519, 0, 0, 0, 0, 0, 0, t436, t442, t857, t385, 0, 0, 0, 0, 0, 0, t443, t857, t435, t352, 0, 0, 0, 0, 0, 0, t356, t362, t344, t324; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t617, t618, 0, -t560, 0, 0, 0, 0, 0, 0, t474, t479, t849, t423, 0, 0, 0, 0, 0, 0, t480, t849, t473, t381, 0, 0, 0, 0, 0, 0, t387, t391, t359, t330; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t663, 0, -t662, 0, t720, -t637, -t615, -pkin(5) * t615, t628 * t701 - t727, t605 * t701 - t665 * t697, t621 * t701 + t696 * t742, t627 * t701 + t727, t619 * t701 + t697 * t741, qJDD(2) * t697 + t650 * t701, -pkin(5) * t575 - t563 * t697 + t573 * t701, -pkin(5) * t576 - t564 * t697 + t574 * t701, -pkin(5) * t609 + t560 * t701, -pkin(5) * t519 - (pkin(1) * t697 - pkin(6) * t701) * t560, t795, -t877, t846, t812, t875, t813, -pkin(5) * t436 + t389 * t701 - t405 * t697, -pkin(5) * t442 + t390 * t701 - t411 * t697, t373 * t701 - t380 * t697 - t873, -pkin(5) * t385 + t364 * t701 - t379 * t697, t795, t846, t877, t813, -t875, t812, -pkin(5) * t443 + t355 * t701 - t377 * t697, t351 * t701 - t358 * t697 - t873, -pkin(5) * t435 + t354 * t701 - t375 * t697, -pkin(5) * t352 + t336 * t701 - t343 * t697, t396 * t701 - t407 * t697, t368 * t701 - t369 * t697, t393 * t701 - t426 * t697, t395 * t701 - t406 * t697, t394 * t701 - t427 * t697, t447 * t701 - t449 * t697, -pkin(5) * t356 + t328 * t701 - t332 * t697, -pkin(5) * t362 + t329 * t701 - t335 * t697, -pkin(5) * t344 + t321 * t701 - t326 * t697, -pkin(5) * t324 + t319 * t701 - t320 * t697; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t662, 0, t663, 0, t637, t720, t616, pkin(5) * t616, t628 * t697 + t726, t605 * t697 + t665 * t701, t621 * t697 - t696 * t740, t627 * t697 - t726, t619 * t697 - t700 * t740, -qJDD(2) * t701 + t650 * t697, pkin(5) * t577 + t563 * t701 + t573 * t697, pkin(5) * t578 + t564 * t701 + t574 * t697, pkin(5) * t610 + t560 * t697, pkin(5) * t520 - (-pkin(1) * t701 - pkin(6) * t697) * t560, t800, -t878, t848, t815, t876, t816, pkin(5) * t438 + t389 * t697 + t405 * t701, pkin(5) * t444 + t390 * t697 + t411 * t701, t373 * t697 + t380 * t701 + t874, pkin(5) * t386 + t364 * t697 + t379 * t701, t800, t848, t878, t816, -t876, t815, pkin(5) * t445 + t355 * t697 + t377 * t701, t351 * t697 + t358 * t701 + t874, pkin(5) * t437 + t354 * t697 + t375 * t701, pkin(5) * t353 + t336 * t697 + t343 * t701, t396 * t697 + t407 * t701, t368 * t697 + t369 * t701, t393 * t697 + t426 * t701, t395 * t697 + t406 * t701, t394 * t697 + t427 * t701, t447 * t697 + t449 * t701, pkin(5) * t357 + t328 * t697 + t332 * t701, pkin(5) * t363 + t329 * t697 + t335 * t701, pkin(5) * t345 + t321 * t697 + t326 * t701, pkin(5) * t325 + t319 * t697 + t320 * t701; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t669, t670, 0, 0, t715 * t696, t657 * t700 + t660 * t696, t673 * t700 + t762, -t714 * t700, t675 * t696 + t752, 0, pkin(1) * t660 + pkin(6) * t620 + t753, -pkin(1) * t657 + pkin(6) * t622 - t765, pkin(1) * t664 + pkin(6) * t661 + t561, pkin(1) * t641 + pkin(6) * t561, t719, -t859, t830, t798, t858, t799, pkin(6) * t476 + t448 * t700 + t483 * t696 - t845, pkin(6) * t481 + t451 * t700 + t492 * t696 + t872, t870 + t696 * t401 + (-pkin(1) - t789) * t832, pkin(6) * t424 + (-pkin(1) + t722) * t440, t719, t830, t859, t799, -t858, t798, pkin(6) * t482 + t398 * t696 + t410 * t700 - t845, -pkin(1) * t832 + t376 * t696 + t432 * t700 + t870, pkin(6) * t475 + t397 * t696 + t402 * t700 - t872, -pkin(1) * t399 + pkin(6) * t382 + t365 * t700 + t366 * t696, t409 * t696 + t739, t371 * t696 + t534 * t700, t428 * t696 + t469 * t700, t408 * t696 - t739, t429 * t696 + t700 * t706, t450 * t696 + t644 * t700, -pkin(1) * t403 + pkin(6) * t388 + t337 * t696 + t346 * t700, -pkin(1) * t420 + pkin(6) * t392 + t341 * t696 + t348 * t700, -pkin(1) * t370 + pkin(6) * t360 + t327 * t696 + t340 * t700, -pkin(1) * t333 + pkin(6) * t331 + t322 * t700 + t323 * t696;];
tauB_reg = t1;
