% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S5RRPRR14
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauJ_reg [5x(5*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:40
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S5RRPRR14_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR14_invdynJ_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR14_invdynJ_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR14_invdynJ_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR14_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5RRPRR14_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:38:43
% EndTime: 2019-12-31 20:39:01
% DurationCPUTime: 8.66s
% Computational Cost: add. (48978->525), mult. (112542->775), div. (0->0), fcn. (89939->12), ass. (0->332)
t275 = sin(qJ(5));
t274 = cos(pkin(5));
t266 = qJD(1) * t274 + qJD(2);
t271 = sin(pkin(10));
t273 = cos(pkin(10));
t272 = sin(pkin(5));
t277 = sin(qJ(2));
t333 = qJD(1) * t277;
t320 = t272 * t333;
t242 = t266 * t273 - t271 * t320;
t243 = t271 * t266 + t273 * t320;
t276 = sin(qJ(4));
t279 = cos(qJ(4));
t218 = t242 * t276 + t243 * t279;
t278 = cos(qJ(5));
t280 = cos(qJ(2));
t332 = qJD(1) * t280;
t319 = t272 * t332;
t307 = -qJD(4) + t319;
t193 = t218 * t275 + t278 * t307;
t195 = t278 * t218 - t275 * t307;
t161 = t195 * t193;
t334 = qJD(1) * t272;
t317 = qJD(2) * t334;
t329 = t272 * qJDD(1);
t250 = t277 * t329 + t280 * t317;
t310 = t274 * qJDD(1) + qJDD(2);
t222 = t273 * t250 + t271 * t310;
t313 = t250 * t271 - t273 * t310;
t315 = t276 * t222 + t279 * t313;
t168 = -t218 * qJD(4) - t315;
t167 = qJDD(5) - t168;
t373 = -t161 + t167;
t380 = t275 * t373;
t379 = t278 * t373;
t216 = -t279 * t242 + t243 * t276;
t169 = -t216 * qJD(4) + t222 * t279 - t276 * t313;
t207 = t216 * t307;
t378 = t169 + t207;
t302 = t307 ^ 2;
t260 = t277 * t317;
t306 = t280 * t329 - t260;
t345 = t243 * t242;
t291 = -t306 + t345;
t377 = t271 * t291;
t376 = t273 * t291;
t245 = -qJDD(4) + t306;
t346 = t218 * t216;
t289 = -t245 - t346;
t375 = t276 * t289;
t374 = t279 * t289;
t230 = t242 * t319;
t203 = -t230 - t222;
t231 = t243 * t319;
t372 = t231 + t313;
t253 = t266 * t320;
t371 = -t306 + t253;
t281 = qJD(1) ^ 2;
t366 = sin(qJ(1));
t367 = cos(qJ(1));
t299 = t367 * g(1) + t366 * g(2);
t246 = -t281 * pkin(1) + pkin(7) * t329 - t299;
t298 = t366 * g(1) - t367 * g(2);
t364 = pkin(7) * t272;
t288 = qJDD(1) * pkin(1) + t281 * t364 + t298;
t287 = t274 * t288;
t314 = t277 * t246 - t280 * t287;
t340 = t272 * t280;
t209 = g(3) * t340 + t314;
t341 = t272 * t277;
t286 = -g(3) * t341 + t277 * t287;
t336 = t280 * t246;
t210 = t286 + t336;
t370 = t277 * t209 + t280 * t210;
t213 = qJD(5) + t216;
t316 = t169 * t275 + t278 * t245;
t116 = (qJD(5) - t213) * t195 + t316;
t191 = t193 ^ 2;
t192 = t195 ^ 2;
t211 = t213 ^ 2;
t214 = t216 ^ 2;
t215 = t218 ^ 2;
t239 = t242 ^ 2;
t240 = t243 ^ 2;
t369 = t266 ^ 2;
t268 = t272 ^ 2;
t368 = 2 * qJD(3);
t365 = pkin(4) * t276;
t363 = t274 * g(3);
t311 = t266 * qJ(3) * t332;
t344 = t250 * qJ(3);
t283 = t260 * pkin(2) - t363 - t344 + (-t311 + (-qJDD(1) * t280 + t266 * t333) * pkin(2) - t288) * t272;
t285 = t310 * qJ(3) + t286;
t308 = -t280 * pkin(2) - t277 * qJ(3);
t247 = t308 * t334;
t318 = t247 * t334;
t284 = -t369 * pkin(2) + (t246 + t318) * t280 + t285;
t136 = t242 * t368 + t271 * t283 + t273 * t284;
t223 = -pkin(3) * t319 - pkin(8) * t243;
t123 = -pkin(3) * t239 - pkin(8) * t313 + t223 * t319 + t136;
t328 = t243 * t368;
t135 = t271 * t284 - t273 * t283 + t328;
t282 = t291 * pkin(3) + t203 * pkin(8) - t135;
t72 = t123 * t276 - t279 * t282;
t73 = t279 * t123 + t276 * t282;
t43 = t276 * t73 - t279 * t72;
t362 = t271 * t43;
t361 = t273 * t43;
t179 = pkin(4) * t216 - pkin(9) * t218;
t51 = t245 * pkin(4) - t302 * pkin(9) + t179 * t218 + t72;
t360 = t275 * t51;
t359 = t278 * t51;
t128 = t161 + t167;
t358 = t128 * t275;
t357 = t128 * t278;
t187 = qJDD(3) - t310 * pkin(2) - t369 * qJ(3) + (t280 * g(3) + t247 * t333) * t272 + t314;
t139 = pkin(3) * t313 - t239 * pkin(8) + t243 * t223 + t187;
t356 = t139 * t276;
t355 = t139 * t279;
t174 = t245 - t346;
t354 = t174 * t276;
t353 = t174 * t279;
t352 = t187 * t271;
t351 = t187 * t273;
t204 = t306 + t345;
t350 = t204 * t271;
t349 = t204 * t273;
t348 = t213 * t275;
t347 = t213 * t278;
t343 = t268 * t280;
t342 = t268 * t281;
t324 = t277 * t343;
t259 = t281 * t324;
t249 = t259 + t310;
t338 = t277 * t249;
t248 = -t259 + t310;
t335 = t280 * t248;
t330 = qJD(5) + t213;
t327 = t276 * t161;
t326 = t279 * t161;
t325 = t277 ^ 2 * t342;
t323 = t280 * t346;
t254 = t266 * t319;
t322 = t254 + t250;
t321 = -pkin(4) * t279 - pkin(3);
t52 = -t302 * pkin(4) - t245 * pkin(9) - t216 * t179 + t73;
t300 = t307 * t218;
t78 = -t378 * pkin(9) + (-t168 - t300) * pkin(4) + t139;
t41 = t275 * t52 - t278 * t78;
t42 = t275 * t78 + t278 * t52;
t21 = t275 * t41 + t278 * t42;
t44 = t276 * t72 + t279 * t73;
t90 = t135 * t271 + t273 * t136;
t312 = t340 * t345;
t309 = -pkin(4) * t51 + pkin(9) * t21;
t20 = t275 * t42 - t278 * t41;
t305 = t135 * t273 - t136 * t271;
t304 = -t169 * t278 + t245 * t275;
t303 = qJD(1) * t266 - t274 * t281;
t301 = -pkin(1) + t308;
t117 = -t330 * t195 - t316;
t151 = -t211 - t191;
t87 = t151 * t278 - t380;
t297 = pkin(4) * t117 + pkin(9) * t87 - t359;
t121 = t330 * t193 + t304;
t158 = -t192 - t211;
t92 = -t158 * t275 - t357;
t296 = pkin(4) * t121 + pkin(9) * t92 + t360;
t295 = t276 * t207;
t294 = t276 * t300;
t293 = t279 * t207;
t292 = t279 * t300;
t140 = t191 + t192;
t138 = -qJD(5) * t193 - t304;
t177 = t213 * t193;
t120 = t138 + t177;
t70 = -t116 * t278 + t120 * t275;
t290 = pkin(4) * t140 + pkin(9) * t70 + t21;
t153 = t218 * t319 + t315;
t232 = t272 * t288 + t363;
t265 = t280 ^ 2 * t342;
t252 = -t265 + t325;
t251 = -t265 - t369;
t238 = -t325 - t369;
t236 = t306 * t340;
t229 = -t240 - t265;
t228 = -t240 + t265;
t227 = t239 - t265;
t225 = t253 + t306;
t224 = -t254 + t250;
t212 = -t265 - t239;
t202 = -t230 + t222;
t200 = -t231 + t313;
t199 = -t215 + t302;
t198 = t214 - t302;
t197 = (-t242 * t271 + t243 * t273) * t319;
t196 = -t239 - t240;
t190 = t222 * t271 - t273 * t231;
t189 = t271 * t230 - t273 * t313;
t188 = -t215 - t302;
t184 = -t229 * t271 + t349;
t183 = t227 * t271 - t349;
t182 = t228 * t273 + t377;
t181 = t229 * t273 + t350;
t180 = t215 - t214;
t178 = -t302 - t214;
t173 = -t192 + t211;
t172 = t191 - t211;
t171 = t212 * t273 - t377;
t170 = t212 * t271 + t376;
t166 = t293 - t294;
t165 = t295 + t292;
t164 = -t203 * t271 - t273 * t372;
t162 = -t200 * t271 + t202 * t273;
t160 = t192 - t191;
t159 = -t214 - t215;
t156 = t169 - t207;
t152 = (0.2e1 * qJD(4) - t319) * t218 + t315;
t150 = t198 * t279 + t354;
t149 = -t199 * t276 + t374;
t148 = t198 * t276 - t353;
t147 = t199 * t279 + t375;
t146 = t279 * t169 + t294;
t145 = t276 * t169 - t292;
t144 = -t276 * t168 - t293;
t143 = t279 * t168 - t295;
t142 = -t188 * t276 + t353;
t141 = t188 * t279 + t354;
t137 = -qJD(5) * t195 - t316;
t133 = t178 * t279 - t375;
t132 = t178 * t276 + t374;
t131 = (-t193 * t278 + t195 * t275) * t213;
t130 = (-t193 * t275 - t195 * t278) * t213;
t126 = t165 * t273 + t166 * t271;
t125 = -pkin(2) * t202 + qJ(3) * t184 + t352;
t124 = -pkin(2) * t200 + qJ(3) * t171 - t351;
t119 = t138 - t177;
t115 = t138 * t278 - t195 * t348;
t114 = t138 * t275 + t195 * t347;
t113 = -t137 * t275 + t193 * t347;
t112 = -t137 * t278 - t193 * t348;
t109 = -t153 * t279 + t156 * t276;
t108 = -t152 * t279 - t276 * t378;
t107 = -t153 * t276 - t156 * t279;
t106 = -t152 * t276 + t279 * t378;
t105 = t131 * t279 + t167 * t276;
t104 = t131 * t276 - t167 * t279;
t103 = t148 * t273 + t150 * t271;
t102 = t147 * t273 + t149 * t271;
t101 = t172 * t278 - t358;
t100 = -t173 * t275 + t379;
t99 = t172 * t275 + t357;
t98 = t173 * t278 + t380;
t97 = t145 * t273 + t146 * t271;
t96 = t143 * t273 + t144 * t271;
t95 = -t141 * t271 + t142 * t273;
t94 = t141 * t273 + t142 * t271;
t93 = -pkin(8) * t141 + t355;
t91 = t158 * t278 - t358;
t88 = -pkin(8) * t132 + t356;
t86 = t151 * t275 + t379;
t85 = t115 * t279 + t327;
t84 = t113 * t279 - t327;
t83 = t115 * t276 - t326;
t82 = t113 * t276 + t326;
t81 = -t132 * t271 + t133 * t273;
t80 = t132 * t273 + t133 * t271;
t79 = -pkin(2) * t187 + qJ(3) * t90;
t76 = -pkin(3) * t378 + pkin(8) * t142 + t356;
t75 = -pkin(3) * t152 + pkin(8) * t133 - t355;
t74 = -pkin(2) * t196 + qJ(3) * t164 + t90;
t69 = t117 * t278 - t119 * t275;
t68 = -t116 * t275 - t120 * t278;
t67 = t117 * t275 + t119 * t278;
t66 = t101 * t279 - t116 * t276;
t65 = t100 * t279 + t120 * t276;
t64 = t101 * t276 + t116 * t279;
t63 = t100 * t276 - t120 * t279;
t62 = -t107 * t271 + t109 * t273;
t61 = t107 * t273 + t109 * t271;
t60 = t106 * t273 + t108 * t271;
t59 = t104 * t273 + t105 * t271;
t58 = -t121 * t276 + t279 * t92;
t57 = t121 * t279 + t276 * t92;
t56 = -t117 * t276 + t279 * t87;
t55 = t117 * t279 + t276 * t87;
t54 = t160 * t276 + t279 * t69;
t53 = -t160 * t279 + t276 * t69;
t50 = -t140 * t276 + t279 * t70;
t49 = t140 * t279 + t276 * t70;
t48 = t271 * t85 + t273 * t83;
t47 = t271 * t84 + t273 * t82;
t46 = -pkin(9) * t91 + t359;
t45 = -pkin(9) * t86 + t360;
t39 = t271 * t66 + t273 * t64;
t38 = t271 * t65 + t273 * t63;
t37 = -pkin(3) * t139 + pkin(8) * t44;
t36 = -t271 * t57 + t273 * t58;
t35 = t271 * t58 + t273 * t57;
t34 = -t271 * t55 + t273 * t56;
t33 = t271 * t56 + t273 * t55;
t32 = -pkin(2) * t378 + qJ(3) * t95 + t271 * t93 + t273 * t76;
t31 = t271 * t54 + t273 * t53;
t30 = -pkin(8) * t107 - t43;
t29 = -pkin(2) * t152 + qJ(3) * t81 + t271 * t88 + t273 * t75;
t28 = -t271 * t49 + t273 * t50;
t27 = t271 * t50 + t273 * t49;
t26 = -pkin(3) * t159 + pkin(8) * t109 + t44;
t25 = -pkin(4) * t91 + t42;
t24 = -pkin(4) * t86 + t41;
t23 = t273 * t44 - t362;
t22 = t271 * t44 + t361;
t19 = -pkin(9) * t68 - t20;
t18 = t21 * t279 + t276 * t51;
t17 = t21 * t276 - t279 * t51;
t16 = -pkin(8) * t57 - t25 * t276 + t279 * t46;
t15 = -pkin(8) * t55 - t24 * t276 + t279 * t45;
t14 = -pkin(3) * t91 + pkin(8) * t58 + t25 * t279 + t276 * t46;
t13 = -pkin(3) * t86 + pkin(8) * t56 + t24 * t279 + t276 * t45;
t12 = -pkin(2) * t159 + qJ(3) * t62 + t26 * t273 + t271 * t30;
t11 = -pkin(8) * t49 + t19 * t279 + t68 * t365;
t10 = -pkin(2) * t139 - pkin(8) * t362 + qJ(3) * t23 + t273 * t37;
t9 = pkin(8) * t50 + t19 * t276 + t321 * t68;
t8 = -t17 * t271 + t18 * t273;
t7 = t17 * t273 + t18 * t271;
t6 = -pkin(8) * t17 + (-pkin(9) * t279 + t365) * t20;
t5 = -pkin(2) * t91 + qJ(3) * t36 + t14 * t273 + t16 * t271;
t4 = -pkin(2) * t86 + qJ(3) * t34 + t13 * t273 + t15 * t271;
t3 = pkin(8) * t18 + (-pkin(9) * t276 + t321) * t20;
t2 = -pkin(2) * t68 + qJ(3) * t28 + t11 * t271 + t273 * t9;
t1 = -pkin(2) * t20 + qJ(3) * t8 + t271 * t6 + t273 * t3;
t40 = [0, 0, 0, 0, 0, qJDD(1), t298, t299, 0, 0, (t250 * t272 + t303 * t343) * t277, t274 * t252 + (-t277 * t371 + t280 * t322) * t272, t274 * t224 + (t338 + t280 * (-t325 + t369)) * t272, -t303 * t324 + t236, t274 * t225 + (t277 * (t265 - t369) + t335) * t272, t274 * t310, (-t209 + pkin(1) * (t249 * t280 + t251 * t277)) * t274 + (t280 * t232 - pkin(1) * t371 + pkin(7) * (t251 * t280 - t338)) * t272, -t232 * t341 - t274 * t210 + pkin(1) * (-t272 * t322 + (t280 * t238 - t277 * t248) * t274) + (-t238 * t277 - t335) * t364, pkin(1) * (-t280 * t224 + t277 * t225) * t274 + (t224 * t277 + t225 * t280) * t364 + (pkin(1) * (t265 + t325) + t370) * t272, pkin(1) * (t272 * t232 + (-t209 * t280 + t210 * t277) * t274) + t370 * t364, (t222 * t273 + t231 * t271) * t341 + t312 + t274 * t190, t274 * t162 + (t277 * (-t200 * t273 - t202 * t271) + t280 * (-t240 + t239)) * t272, t274 * t182 + (t277 * (-t228 * t271 + t376) + t280 * t203) * t272, (t230 * t273 + t271 * t313) * t341 - t312 + t274 * t189, t274 * t183 + (t277 * (t227 * t273 + t350) + t280 * t372) * t272, t274 * t197 + t236 + t268 * t277 * (-t242 * t273 - t243 * t271) * t332, (-qJ(3) * t170 + t352) * t341 + (t271 * (t280 * t318 + t285 + t336) - t273 * (-t272 * t311 - t232 - t344) + t328 + (-t271 * t369 - t273 * t371 - t170) * pkin(2)) * t340 + t274 * t124 + pkin(1) * (-t170 * t272 + (t171 * t277 - t200 * t280) * t274) + (t171 * t280 + t200 * t277) * t364, (t125 + pkin(1) * (t184 * t277 - t202 * t280)) * t274 + (t277 * (-qJ(3) * t181 + t351) + t280 * (-pkin(2) * t181 + t136) - pkin(1) * t181 + pkin(7) * (t184 * t280 + t202 * t277)) * t272, (t74 + pkin(1) * (t164 * t277 - t196 * t280)) * t274 + (t277 * t305 + pkin(7) * (t164 * t280 + t196 * t277) + t301 * (t203 * t273 - t271 * t372)) * t272, (t79 + pkin(1) * (-t187 * t280 + t277 * t90)) * t274 + (pkin(7) * (t187 * t277 + t280 * t90) - t301 * t305) * t272, t274 * t97 + (t277 * (-t145 * t271 + t146 * t273) - t323) * t272, t274 * t60 + (t277 * (-t106 * t271 + t108 * t273) - t280 * t180) * t272, t274 * t102 + (t277 * (-t147 * t271 + t149 * t273) - t280 * t156) * t272, t274 * t96 + (t277 * (-t143 * t271 + t144 * t273) + t323) * t272, t274 * t103 + (t277 * (-t148 * t271 + t150 * t273) + t280 * t153) * t272, t274 * t126 + (t277 * (-t165 * t271 + t166 * t273) + t280 * t245) * t272, (t29 + pkin(1) * (-t152 * t280 + t277 * t81)) * t274 + (t277 * (-qJ(3) * t80 - t271 * t75 + t273 * t88) + t280 * (-pkin(2) * t80 - pkin(3) * t132 + t72) - pkin(1) * t80 + pkin(7) * (t152 * t277 + t280 * t81)) * t272, (t32 + pkin(1) * (t277 * t95 - t280 * t378)) * t274 + (t277 * (-qJ(3) * t94 - t271 * t76 + t273 * t93) + t280 * (-pkin(2) * t94 - pkin(3) * t141 + t73) - pkin(1) * t94 + pkin(7) * (t277 * t378 + t280 * t95)) * t272, (t12 + pkin(1) * (-t159 * t280 + t277 * t62)) * t274 + (t277 * (-qJ(3) * t61 - t26 * t271 + t273 * t30) + t280 * (-pkin(2) * t61 - pkin(3) * t107) - pkin(1) * t61 + pkin(7) * (t159 * t277 + t280 * t62)) * t272, (t10 + pkin(1) * (-t139 * t280 + t23 * t277)) * t274 + (t277 * (-pkin(8) * t361 - qJ(3) * t22 - t271 * t37) + t280 * (-pkin(2) * t22 - pkin(3) * t43) - pkin(1) * t22 + pkin(7) * (t139 * t277 + t23 * t280)) * t272, t274 * t48 + (t277 * (-t271 * t83 + t273 * t85) - t280 * t114) * t272, t274 * t31 + (t277 * (-t271 * t53 + t273 * t54) - t280 * t67) * t272, t274 * t38 + (t277 * (-t271 * t63 + t273 * t65) - t280 * t98) * t272, t274 * t47 + (t277 * (-t271 * t82 + t273 * t84) + t280 * t112) * t272, t274 * t39 + (t277 * (-t271 * t64 + t273 * t66) - t280 * t99) * t272, t274 * t59 + (t277 * (-t104 * t271 + t105 * t273) - t280 * t130) * t272, (t4 + pkin(1) * (t277 * t34 - t280 * t86)) * t274 + (t277 * (-qJ(3) * t33 - t13 * t271 + t15 * t273) + t280 * (-pkin(2) * t33 - pkin(3) * t55 - t297) - pkin(1) * t33 + pkin(7) * (t277 * t86 + t280 * t34)) * t272, (t5 + pkin(1) * (t277 * t36 - t280 * t91)) * t274 + (t277 * (-qJ(3) * t35 - t14 * t271 + t16 * t273) + t280 * (-pkin(2) * t35 - pkin(3) * t57 - t296) - pkin(1) * t35 + pkin(7) * (t277 * t91 + t280 * t36)) * t272, (t2 + pkin(1) * (t277 * t28 - t280 * t68)) * t274 + (t277 * (-qJ(3) * t27 + t11 * t273 - t271 * t9) + t280 * (-pkin(2) * t27 - pkin(3) * t49 - t290) - pkin(1) * t27 + pkin(7) * (t277 * t68 + t28 * t280)) * t272, (t1 + pkin(1) * (-t20 * t280 + t277 * t8)) * t274 + (t277 * (-qJ(3) * t7 - t271 * t3 + t273 * t6) + t280 * (-pkin(2) * t7 - pkin(3) * t17 - t309) - pkin(1) * t7 + pkin(7) * (t20 * t277 + t280 * t8)) * t272; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t259, t252, t224, t259, t225, t310, -t209, -t210, 0, 0, t190, t162, t182, t189, t183, t197, t124, t125, t74, t79, t97, t60, t102, t96, t103, t126, t29, t32, t12, t10, t48, t31, t38, t47, t39, t59, t4, t5, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t200, t202, t196, t187, 0, 0, 0, 0, 0, 0, t152, t378, t159, t139, 0, 0, 0, 0, 0, 0, t86, t91, t68, t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t346, t180, t156, -t346, -t153, -t245, -t72, -t73, 0, 0, t114, t67, t98, -t112, t99, t130, t297, t296, t290, t309; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t161, t160, t120, -t161, -t116, t167, -t41, -t42, 0, 0;];
tauJ_reg = t40;
