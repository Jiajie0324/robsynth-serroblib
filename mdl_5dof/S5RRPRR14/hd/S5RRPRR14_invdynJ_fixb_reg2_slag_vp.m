% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S5RRPRR14
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% tau_reg [5x(5*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:40
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S5RRPRR14_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR14_invdynJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR14_invdynJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR14_invdynJ_fixb_reg2_slag_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR14_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5RRPRR14_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:38:44
% EndTime: 2019-12-31 20:39:05
% DurationCPUTime: 10.32s
% Computational Cost: add. (13095->646), mult. (33240->901), div. (0->0), fcn. (26779->14), ass. (0->300)
t251 = sin(pkin(5));
t260 = cos(qJ(2));
t361 = qJD(1) * t260;
t230 = t251 * t361;
t250 = sin(pkin(10));
t252 = cos(pkin(10));
t256 = sin(qJ(4));
t410 = cos(qJ(4));
t282 = -t256 * t250 + t410 * t252;
t143 = t282 * t230;
t331 = qJD(4) * t410;
t356 = qJD(4) * t256;
t186 = t250 * t356 - t252 * t331;
t368 = t186 + t143;
t197 = t410 * t250 + t256 * t252;
t376 = t251 * t260;
t266 = t197 * t376;
t367 = -qJD(1) * t266 + t197 * qJD(4);
t255 = sin(qJ(5));
t259 = cos(qJ(5));
t253 = cos(pkin(5));
t362 = qJD(1) * t253;
t233 = qJD(2) + t362;
t257 = sin(qJ(2));
t363 = qJD(1) * t251;
t334 = t257 * t363;
t161 = t233 * t252 - t250 * t334;
t162 = t233 * t250 + t252 * t334;
t101 = -t410 * t161 + t162 * t256;
t426 = qJD(5) + t101;
t324 = t426 ^ 2;
t348 = qJDD(1) * t253;
t232 = qJDD(2) + t348;
t206 = t252 * t232;
t349 = qJD(1) * qJD(2);
t328 = t260 * t349;
t347 = qJDD(1) * t257;
t279 = t328 + t347;
t267 = t251 * t279;
t124 = t250 * t267 - t206;
t379 = t250 * t232;
t125 = t252 * t267 + t379;
t321 = t410 * t124 + t256 * t125;
t284 = t256 * t161 + t410 * t162;
t414 = qJD(4) * t284;
t51 = t321 + t414;
t49 = qJDD(5) + t51;
t433 = -t255 * t324 + t259 * t49;
t402 = pkin(8) + qJ(3);
t213 = t402 * t250;
t214 = t402 * t252;
t283 = -t410 * t213 - t256 * t214;
t300 = pkin(2) * t257 - qJ(3) * t260;
t179 = t300 * t363;
t408 = pkin(1) * t260;
t344 = t253 * t408;
t180 = -pkin(7) * t334 + qJD(1) * t344;
t110 = t252 * t179 - t250 * t180;
t275 = (-pkin(8) * t252 * t260 + pkin(3) * t257) * t251;
t82 = qJD(1) * t275 + t110;
t111 = t250 * t179 + t252 * t180;
t313 = t250 * t230;
t94 = -pkin(8) * t313 + t111;
t391 = qJD(3) * t282 + qJD(4) * t283 - t256 * t82 - t410 * t94;
t409 = pkin(1) * t257;
t366 = pkin(7) * t376 + t253 * t409;
t181 = t366 * qJD(1);
t144 = t233 * qJ(3) + t181;
t293 = -pkin(2) * t260 - qJ(3) * t257 - pkin(1);
t172 = t293 * t251;
t150 = qJD(1) * t172;
t84 = -t144 * t250 + t252 * t150;
t59 = -pkin(3) * t230 - pkin(8) * t162 + t84;
t85 = t252 * t144 + t250 * t150;
t62 = pkin(8) * t161 + t85;
t29 = t256 * t59 + t410 * t62;
t351 = t230 - qJD(4);
t27 = -pkin(9) * t351 + t29;
t137 = -pkin(2) * t233 + qJD(3) - t180;
t99 = -pkin(3) * t161 + t137;
t37 = pkin(4) * t101 - pkin(9) * t284 + t99;
t10 = t255 * t37 + t259 * t27;
t50 = t256 * t124 - t410 * t125 - t161 * t331 + t162 * t356;
t378 = t251 * t257;
t234 = pkin(7) * t378;
t343 = pkin(1) * qJD(2) * t253;
t315 = qJD(1) * t343;
t342 = pkin(1) * t348;
t314 = t251 * pkin(7) * t328 + qJDD(1) * t234 + t257 * t315 - t260 * t342;
t413 = -pkin(2) * t232 + qJDD(3);
t105 = t314 + t413;
t406 = pkin(3) * t124;
t61 = t105 + t406;
t12 = pkin(4) * t51 + pkin(9) * t50 + t61;
t329 = t257 * t349;
t309 = t251 * t329;
t346 = qJDD(1) * t260;
t229 = t251 * t346;
t345 = qJDD(4) - t229;
t274 = t309 + t345;
t278 = t329 - t346;
t338 = -pkin(7) * t229 - t257 * t342 - t260 * t315;
t116 = -pkin(7) * t309 - t338;
t89 = qJ(3) * t232 + qJD(3) * t233 + t116;
t264 = qJD(2) * t300 - qJD(3) * t257;
t95 = (qJD(1) * t264 + qJDD(1) * t293) * t251;
t55 = -t250 * t89 + t252 * t95;
t32 = pkin(3) * t251 * t278 - t125 * pkin(8) + t55;
t56 = t250 * t95 + t252 * t89;
t38 = -pkin(8) * t124 + t56;
t286 = -t256 * t32 - t59 * t331 + t356 * t62 - t410 * t38;
t5 = pkin(9) * t274 - t286;
t2 = -qJD(5) * t10 + t259 * t12 - t255 * t5;
t432 = t10 * t426 + t2;
t299 = t255 * t27 - t259 * t37;
t1 = -t299 * qJD(5) + t255 * t12 + t259 * t5;
t430 = t299 * t426 + t1;
t431 = t101 ^ 2;
t429 = -pkin(9) * t334 + t391;
t135 = pkin(3) * t313 + t181;
t428 = t367 * pkin(4) + t368 * pkin(9) - t135;
t427 = t101 * t351;
t411 = cos(qJ(1));
t336 = t411 * t257;
t258 = sin(qJ(1));
t372 = t258 * t260;
t189 = t253 * t336 + t372;
t247 = pkin(10) + qJ(4);
t243 = sin(t247);
t244 = cos(t247);
t337 = t251 * t411;
t127 = t189 * t244 - t243 * t337;
t335 = t411 * t260;
t373 = t257 * t258;
t188 = -t253 * t335 + t373;
t425 = t127 * t255 - t188 * t259;
t424 = t127 * t259 + t188 * t255;
t423 = t284 ^ 2;
t246 = t251 ^ 2;
t422 = 0.2e1 * t246;
t421 = pkin(3) * t250;
t318 = t259 * t351;
t76 = t255 * t284 + t318;
t419 = t284 * t76;
t78 = -t255 * t351 + t259 * t284;
t418 = t284 * t78;
t141 = -t256 * t213 + t410 * t214;
t389 = qJD(3) * t197 + qJD(4) * t141 - t256 * t94 + t410 * t82;
t190 = t253 * t372 + t336;
t305 = g(1) * t190 + g(2) * t188;
t415 = g(3) * t376 - t305;
t417 = t415 * t243;
t416 = t284 * t230;
t388 = qJD(5) * t78;
t25 = -t255 * t50 - t259 * t274 + t388;
t183 = t366 * qJD(2);
t326 = t256 * t38 - t410 * t32;
t8 = -qJD(4) * t29 - t326;
t171 = qJ(3) * t253 + t366;
t106 = -t171 * t250 + t252 * t172;
t185 = t250 * t253 + t252 * t378;
t68 = -pkin(3) * t376 - pkin(8) * t185 + t106;
t107 = t252 * t171 + t250 * t172;
t184 = t250 * t378 - t253 * t252;
t81 = -pkin(8) * t184 + t107;
t398 = t256 * t68 + t410 * t81;
t147 = t264 * t251;
t358 = qJD(2) * t257;
t333 = t251 * t358;
t182 = -pkin(7) * t333 + t260 * t343;
t154 = qJD(3) * t253 + t182;
t90 = t252 * t147 - t250 * t154;
t65 = qJD(2) * t275 + t90;
t357 = qJD(2) * t260;
t332 = t251 * t357;
t312 = t250 * t332;
t91 = t250 * t147 + t252 * t154;
t79 = -pkin(8) * t312 + t91;
t16 = -qJD(4) * t398 - t256 * t79 + t410 * t65;
t405 = g(3) * t251;
t403 = t78 * t76;
t354 = qJD(5) * t259;
t401 = -t255 * t25 - t76 * t354;
t242 = pkin(3) * t252 + pkin(2);
t123 = -pkin(4) * t282 - pkin(9) * t197 - t242;
t71 = t123 * t259 - t141 * t255;
t400 = qJD(5) * t71 + t428 * t255 + t429 * t259;
t72 = t123 * t255 + t141 * t259;
t399 = -qJD(5) * t72 - t429 * t255 + t428 * t259;
t355 = qJD(5) * t255;
t24 = qJD(5) * t318 - t255 * t274 + t259 * t50 + t284 * t355;
t397 = t24 * t255;
t396 = t25 * t259;
t395 = t255 * t49;
t394 = t255 * t76;
t393 = t255 * t78;
t392 = t259 * t76;
t390 = pkin(4) * t334 + t389;
t387 = t284 * t101;
t384 = t197 * t255;
t383 = t197 * t259;
t382 = t244 * t255;
t381 = t244 * t259;
t380 = t246 * qJD(1) ^ 2;
t377 = t251 * t258;
t375 = t402 * t257;
t374 = t255 * t260;
t371 = t259 * t260;
t370 = -t188 * t242 + t189 * t402;
t191 = -t253 * t373 + t335;
t369 = -t190 * t242 + t191 * t402;
t365 = t411 * pkin(1) + pkin(7) * t377;
t248 = t257 ^ 2;
t249 = t260 ^ 2;
t364 = t248 - t249;
t360 = qJD(2) * t250;
t359 = qJD(2) * t252;
t353 = qJD(2) - t233;
t350 = qJ(3) * qJDD(1);
t341 = t249 * t380;
t340 = t260 * t380;
t339 = t251 * t371;
t221 = t251 * t374;
t330 = pkin(1) * t422;
t327 = -pkin(1) * t258 + pkin(7) * t337;
t112 = t143 * t255 - t259 * t334;
t323 = t186 * t255 + t112;
t113 = t143 * t259 + t255 * t334;
t322 = t186 * t259 + t113;
t320 = -t189 * t243 - t244 * t337;
t319 = t259 * t426;
t317 = t233 + t362;
t316 = t232 + t348;
t311 = t252 * t332;
t310 = t246 * t249 * t349;
t308 = t257 * t328;
t307 = pkin(4) * t244 + pkin(9) * t243;
t130 = t191 * t243 - t244 * t377;
t306 = g(1) * t320 + g(2) * t130;
t304 = g(1) * t188 - g(2) * t190;
t303 = g(1) * t191 + g(2) * t189;
t302 = g(1) * t189 - g(2) * t191;
t40 = -pkin(9) * t376 + t398;
t114 = t410 * t184 + t185 * t256;
t115 = -t256 * t184 + t410 * t185;
t174 = t234 + (-pkin(2) - t408) * t253;
t121 = t184 * pkin(3) + t174;
t54 = t114 * pkin(4) - t115 * pkin(9) + t121;
t20 = t255 * t54 + t259 * t40;
t19 = -t255 * t40 + t259 * t54;
t298 = t392 + t393;
t297 = t190 * t402 + t191 * t242 + t377 * t421 + t365;
t296 = t161 * t252 - t162 * t250;
t295 = qJD(1) * (-t161 + t359);
t294 = qJD(1) * (-t162 + t360);
t292 = -t105 + t305;
t290 = g(1) * t411 + g(2) * t258;
t28 = -t256 * t62 + t410 * t59;
t41 = -t256 * t81 + t410 * t68;
t287 = -t259 * t24 - t355 * t78;
t96 = t115 * t255 + t339;
t15 = t256 * t65 + t68 * t331 - t356 * t81 + t410 * t79;
t26 = pkin(4) * t351 - t28;
t285 = -pkin(9) * t49 + t26 * t426;
t281 = -t188 * t402 - t189 * t242 + t337 * t421 + t327;
t277 = g(1) * t130 - g(2) * t320 - g(3) * (-t243 * t378 + t244 * t253);
t131 = t191 * t244 + t243 * t377;
t169 = t243 * t253 + t244 * t378;
t276 = -g(1) * t131 - g(2) * t127 - g(3) * t169;
t273 = t197 * t354 - t323;
t272 = -t197 * t355 - t322;
t6 = -pkin(4) * t274 - t8;
t271 = t277 - t6;
t269 = -g(3) * t378 - t303;
t268 = -qJ(3) * t358 + (qJD(3) - t137) * t260;
t265 = -t415 - t314;
t136 = pkin(3) * t312 + t183;
t263 = pkin(9) * qJD(5) * t426 - t271;
t262 = -t265 + t413;
t208 = t257 * t340;
t200 = t242 * t376;
t192 = -t234 + t344;
t170 = (qJDD(1) * t249 - 0.2e1 * t308) * t246;
t97 = t115 * t259 - t221;
t93 = t131 * t259 + t190 * t255;
t92 = -t131 * t255 + t190 * t259;
t74 = qJD(2) * t266 + qJD(4) * t115;
t73 = t184 * t331 - t410 * t311 + (qJD(4) * t185 + t312) * t256;
t57 = pkin(4) * t284 + pkin(9) * t101;
t44 = -qJD(5) * t221 + t115 * t354 - t255 * t73 - t259 * t333;
t43 = qJD(5) * t96 - t255 * t333 + t259 * t73;
t39 = pkin(4) * t376 - t41;
t33 = t74 * pkin(4) + t73 * pkin(9) + t136;
t18 = t255 * t57 + t259 * t28;
t17 = -t255 * t28 + t259 * t57;
t14 = -pkin(4) * t333 - t16;
t13 = pkin(9) * t333 + t15;
t4 = -qJD(5) * t20 - t255 * t13 + t259 * t33;
t3 = qJD(5) * t19 + t259 * t13 + t255 * t33;
t7 = [0, 0, 0, 0, 0, qJDD(1), g(1) * t258 - g(2) * t411, t290, 0, 0, (qJDD(1) * t248 + 0.2e1 * t308) * t246, (t257 * t346 - t349 * t364) * t422, (t257 * t316 + t317 * t357) * t251, t170, (t260 * t316 - t317 * t358) * t251, t232 * t253, -t183 * t233 + t192 * t232 - t253 * t314 - t278 * t330 + t302, -t116 * t253 - t182 * t233 - t232 * t366 - t279 * t330 - t304, ((-qJD(2) * t180 + qJDD(1) * t366 + t116 + (-qJD(2) * t192 + t182) * qJD(1)) * t260 + (-qJD(2) * t181 - qJDD(1) * t192 + t314) * t257 - t290) * t251, t246 * qJDD(1) * pkin(1) ^ 2 - g(1) * t327 - g(2) * t365 + t116 * t366 - t180 * t183 + t181 * t182 - t192 * t314, t125 * t185 + t162 * t311, -t185 * t124 - t125 * t184 + t296 * t332, -t252 * t310 + ((-qJDD(1) * t185 - t125) * t260 + (qJD(1) * t185 + t162) * t358) * t251, t124 * t184 - t161 * t312, t250 * t310 + ((qJDD(1) * t184 + t124) * t260 + (-qJD(1) * t184 + t161) * t358) * t251, t170, t105 * t184 + t174 * t124 - t183 * t161 + t302 * t252 + (-t290 * t250 + (qJD(1) * t106 + t84) * t358 + (-qJD(1) * t90 - qJDD(1) * t106 + t137 * t360 - t55) * t260) * t251, t105 * t185 + t174 * t125 + t183 * t162 - t302 * t250 + (-t290 * t252 + (-qJD(1) * t107 - t85) * t358 + (qJD(1) * t91 + qJDD(1) * t107 + t137 * t359 + t56) * t260) * t251, -t106 * t125 - t107 * t124 + t91 * t161 - t90 * t162 - t56 * t184 - t55 * t185 + (-t250 * t85 - t252 * t84) * t332 + t304, t56 * t107 + t85 * t91 + t55 * t106 + t84 * t90 + t105 * t174 + t137 * t183 - g(1) * (-pkin(2) * t189 - qJ(3) * t188 + t327) - g(2) * (pkin(2) * t191 + qJ(3) * t190 + t365), -t115 * t50 - t284 * t73, t101 * t73 + t114 * t50 - t115 * t51 - t284 * t74, t73 * t351 + t115 * t345 + (t50 * t260 + (qJD(1) * t115 + t284) * t358) * t251, t101 * t74 + t114 * t51, t74 * t351 - t114 * t345 + (t51 * t260 + (-qJD(1) * t114 - t101) * t358) * t251, (-t345 * t260 + (-0.2e1 * t230 + qJD(4)) * t358) * t251, -t16 * t351 + t41 * t345 + t136 * t101 + t121 * t51 + t61 * t114 + t99 * t74 + g(1) * t127 - g(2) * t131 + (-t8 * t260 + (qJD(1) * t41 + t28) * t358) * t251, t15 * t351 - t398 * t345 + t136 * t284 - t121 * t50 + t61 * t115 - t99 * t73 + (-t286 * t260 + (-qJD(1) * t398 - t29) * t358) * t251 + t306, -t101 * t15 + t114 * t286 - t115 * t8 - t16 * t284 + t28 * t73 - t29 * t74 - t398 * t51 + t41 * t50 + t304, -g(1) * t281 - g(2) * t297 + t61 * t121 + t99 * t136 + t29 * t15 + t28 * t16 - t286 * t398 + t8 * t41, -t24 * t97 - t43 * t78, t24 * t96 - t25 * t97 + t43 * t76 - t44 * t78, -t114 * t24 - t426 * t43 + t49 * t97 + t74 * t78, t25 * t96 + t44 * t76, -t114 * t25 - t426 * t44 - t49 * t96 - t74 * t76, t114 * t49 + t426 * t74, g(1) * t424 - g(2) * t93 + t2 * t114 + t14 * t76 + t19 * t49 + t39 * t25 + t26 * t44 - t299 * t74 + t4 * t426 + t6 * t96, -g(1) * t425 - g(2) * t92 - t1 * t114 - t10 * t74 + t14 * t78 - t20 * t49 - t39 * t24 - t26 * t43 - t3 * t426 + t6 * t97, -t1 * t96 - t10 * t44 + t19 * t24 - t2 * t97 - t20 * t25 - t299 * t43 - t3 * t76 - t4 * t78 - t306, t1 * t20 + t10 * t3 + t2 * t19 - t299 * t4 + t6 * t39 + t26 * t14 - g(1) * (-pkin(4) * t127 + pkin(9) * t320 + t281) - g(2) * (pkin(4) * t131 + pkin(9) * t130 + t297); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t208, t364 * t380, (t353 * t361 + t347) * t251, t208, -t334 * t353 + t229, t232, t181 * t233 + t380 * t409 + t265, pkin(1) * t340 + t180 * t233 + (pkin(7) * t349 + g(3)) * t378 + t303 + t338, 0, 0, -t162 * t230 * t252 + t125 * t250, -t250 * t124 + t125 * t252 - t230 * t296, t252 * t341 + (-t250 * t346 + t257 * t294) * t251, -t124 * t252 + t161 * t313, -t250 * t341 + (-t252 * t346 + t257 * t295) * t251, t208, -pkin(2) * t124 + t181 * t161 + t292 * t252 + ((-g(3) * t252 + t250 * t350) * t260 + (t110 * t260 + t250 * t268 - t257 * t84) * qJD(1)) * t251, -pkin(2) * t125 - t181 * t162 - t292 * t250 + ((g(3) * t250 + t252 * t350) * t260 + (-t111 * t260 + t252 * t268 + t257 * t85) * qJD(1)) * t251, t110 * t162 - t111 * t161 + (-qJ(3) * t124 + qJD(3) * t161 + t230 * t84 + t56) * t252 + (qJ(3) * t125 + qJD(3) * t162 + t230 * t85 - t55) * t250 + t269, -t84 * t110 - t85 * t111 - t137 * t181 + (-t250 * t84 + t252 * t85) * qJD(3) + (-t105 - t415) * pkin(2) + (-t55 * t250 + t56 * t252 + t269) * qJ(3), -t50 * t197 - t284 * t368, t101 * t368 - t197 * t51 - t282 * t50 - t284 * t367, t197 * t274 - t284 * t334 + t351 * t368, t101 * t367 - t282 * t51, t101 * t334 + t274 * t282 + t351 * t367, t351 * t334, -t135 * t101 - t242 * t51 - t244 * t415 + t274 * t283 - t28 * t334 - t282 * t61 + t351 * t389 + t367 * t99, -t135 * t284 - t141 * t274 + t61 * t197 + t242 * t50 + t29 * t334 + t351 * t391 - t368 * t99 + t417, -t391 * t101 - t141 * t51 - t8 * t197 + t368 * t28 - t282 * t286 + t283 * t50 + t284 * t389 - t367 * t29 + t269, -t286 * t141 + t8 * t283 - t61 * t242 - t99 * t135 - g(1) * t369 - g(2) * t370 - g(3) * (t251 * t375 + t200) + t391 * t29 - t389 * t28, -t24 * t383 + t272 * t78, t78 * t112 + t113 * t76 + t298 * t186 + (t397 - t396 + (-t259 * t78 + t394) * qJD(5)) * t197, t24 * t282 + t272 * t426 + t367 * t78 + t49 * t383, t25 * t384 + t273 * t76, t25 * t282 - t273 * t426 - t367 * t76 - t49 * t384, -t282 * t49 + t367 * t426, t71 * t49 - t2 * t282 - t283 * t25 + t6 * t384 - g(1) * (-t190 * t381 + t191 * t255) - g(2) * (-t188 * t381 + t189 * t255) + t399 * t426 - t367 * t299 + t390 * t76 - (t244 * t371 + t255 * t257) * t405 + t273 * t26, -t72 * t49 + t1 * t282 + t283 * t24 + t6 * t383 - g(1) * (t190 * t382 + t191 * t259) - g(2) * (t188 * t382 + t189 * t259) - t400 * t426 + t390 * t78 - (-t244 * t374 + t257 * t259) * t405 - t367 * t10 + t272 * t26, t71 * t24 - t72 * t25 - t322 * t299 - t399 * t78 - t400 * t76 + t323 * t10 - t417 + (-t1 * t255 - t2 * t259 + (-t10 * t259 - t255 * t299) * qJD(5)) * t197, t1 * t72 + t2 * t71 - t6 * t283 - g(1) * (-t190 * t307 + t369) - g(2) * (-t188 * t307 + t370) - g(3) * t200 - t399 * t299 + t390 * t26 - (t260 * t307 + t375) * t405 + t400 * t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t206 + (t250 * t347 + t260 * t294) * t251, t379 + (t252 * t347 + t260 * t295) * t251, -t161 ^ 2 - t162 ^ 2, -t161 * t85 + t162 * t84 + t262, 0, 0, 0, 0, 0, 0, t321 + 0.2e1 * t414 - t416, -t50 + t427, -t423 - t431, t101 * t29 + t28 * t284 + t262 + t406, 0, 0, 0, 0, 0, 0, -t419 + t433, -t259 * t324 - t395 - t418, -(t392 - t393) * t101 - t287 + t401, t430 * t255 + t432 * t259 - t26 * t284 + t415; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t387, t423 - t431, -t50 - t427, -t387, -t321 - t416, t274, -t29 * t230 - t284 * t99 + t277 - t326, t99 * t101 - t28 * t351 - t276 + t286, 0, 0, t319 * t78 - t397, -t101 * t298 + t287 + t401, t319 * t426 + t395 - t418, t394 * t426 - t396, t419 + t433, -t426 * t284, -pkin(4) * t25 - t17 * t426 + t255 * t285 - t259 * t263 + t284 * t299 - t29 * t76, pkin(4) * t24 + t10 * t284 + t18 * t426 + t255 * t263 + t259 * t285 - t29 * t78, t17 * t78 + t18 * t76 + ((-t25 + t388) * pkin(9) + t430) * t259 + ((qJD(5) * t76 - t24) * pkin(9) - t432) * t255 + t276, -t10 * t18 + t299 * t17 - t26 * t29 + t271 * pkin(4) + (t1 * t259 - t2 * t255 + (-t10 * t255 + t259 * t299) * qJD(5) + t276) * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t403, -t76 ^ 2 + t78 ^ 2, t426 * t76 - t24, -t403, t426 * t78 - t25, t49, -t26 * t78 - g(1) * t92 + g(2) * t425 - g(3) * (-t169 * t255 - t339) + t432, t26 * t76 + g(1) * t93 + g(2) * t424 - g(3) * (-t169 * t259 + t221) - t430, 0, 0;];
tau_reg = t7;
