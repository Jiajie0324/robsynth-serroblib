% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S5RRPRR14
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% MMD_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:40
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S5RRPRR14_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR14_inertiaDJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR14_inertiaDJ_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5RRPRR14_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:38:38
% EndTime: 2019-12-31 20:38:49
% DurationCPUTime: 3.65s
% Computational Cost: add. (5209->309), mult. (13779->602), div. (0->0), fcn. (13703->10), ass. (0->166)
t173 = pkin(8) + qJ(3);
t192 = cos(qJ(4));
t130 = t173 * t192;
t191 = sin(qJ(4));
t145 = t191 * qJD(3);
t146 = t192 * qJD(3);
t148 = qJD(4) * t191;
t82 = cos(pkin(10));
t67 = t173 * t82;
t80 = sin(pkin(10));
t199 = (-qJD(4) * t130 - t145) * t80 + t146 * t82 - t148 * t67;
t81 = sin(pkin(5));
t86 = cos(qJ(2));
t178 = t81 * t86;
t170 = cos(pkin(5));
t150 = pkin(1) * t170;
t84 = sin(qJ(2));
t71 = t84 * t150;
t57 = pkin(7) * t178 + t71;
t47 = qJ(3) * t170 + t57;
t126 = -pkin(2) * t86 - qJ(3) * t84;
t48 = (-pkin(1) + t126) * t81;
t34 = -t47 * t80 + t48 * t82;
t177 = t82 * t84;
t159 = t81 * t177;
t53 = t170 * t80 + t159;
t106 = pkin(3) * t178 + pkin(8) * t53 - t34;
t147 = t170 * t82;
t179 = t81 * t84;
t113 = t179 * t80 - t147;
t35 = t82 * t47 + t80 * t48;
t96 = -pkin(8) * t113 + t35;
t15 = -t106 * t191 + t192 * t96;
t169 = qJD(2) * t84;
t155 = t81 * t169;
t201 = t106 * t192 + t191 * t96;
t193 = pkin(2) * t84;
t125 = -qJ(3) * t86 + t193;
t168 = qJD(2) * t86;
t154 = t81 * t168;
t138 = t82 * t154;
t142 = t170 * qJD(3);
t167 = qJD(3) * t84;
t111 = pkin(7) * t179 - t150 * t86;
t51 = t111 * qJD(2);
t88 = t80 * (t142 - t51) - t82 * (qJD(2) * t125 - t167) * t81 + pkin(8) * t138 - pkin(3) * t155;
t143 = qJD(2) * t170;
t128 = t86 * t143;
t105 = pkin(1) * t128 + t142;
t101 = t82 * t105;
t156 = t80 * t167;
t162 = pkin(7) * t177;
t90 = t101 + (-t156 + (-t162 + (-t173 * t86 + t193) * t80) * qJD(2)) * t81;
t5 = qJD(4) * t201 + t191 * t88 - t192 * t90;
t107 = t192 * t113;
t37 = t191 * t53 + t107;
t38 = -t113 * t191 + t192 * t53;
t50 = -pkin(2) * t170 + t111;
t42 = pkin(3) * t113 + t50;
t92 = t37 * pkin(4) - t38 * pkin(9) + t42;
t202 = -pkin(9) * t155 - qJD(5) * t92 + t5;
t151 = t192 * t82;
t60 = t191 * t80 - t151;
t61 = t191 * t82 + t192 * t80;
t73 = -pkin(3) * t82 - pkin(2);
t112 = pkin(4) * t60 - pkin(9) * t61 + t73;
t200 = -qJD(5) * t112 - t199;
t83 = sin(qJ(5));
t77 = t83 ^ 2;
t85 = cos(qJ(5));
t78 = t85 ^ 2;
t171 = t77 - t78;
t144 = qJD(5) * t171;
t149 = qJD(4) * t192;
t54 = t148 * t80 - t149 * t82;
t55 = t61 * qJD(4);
t136 = pkin(4) * t55 + pkin(9) * t54;
t166 = qJD(5) * t83;
t129 = t173 * t191;
t45 = -t129 * t80 + t192 * t67;
t10 = -t136 * t83 + t166 * t45 + t200 * t85;
t165 = qJD(5) * t85;
t11 = t136 * t85 - t165 * t45 + t200 * t83;
t23 = t112 * t85 - t45 * t83;
t24 = t112 * t83 + t85 * t45;
t198 = t10 * t83 - t11 * t85 + (t23 * t83 - t24 * t85) * qJD(5);
t13 = -pkin(9) * t178 + t15;
t152 = pkin(3) * t80 + pkin(7);
t25 = qJD(4) * t38 + t154 * t61;
t139 = t80 * t154;
t97 = -qJD(4) * t107 - t139 * t191 - t148 * t53;
t89 = -t97 * pkin(9) + t25 * pkin(4) + (t71 + (-pkin(9) * t151 + t152) * t178) * qJD(2);
t1 = t13 * t166 + t202 * t85 - t83 * t89;
t2 = -t13 * t165 + t202 * t83 + t85 * t89;
t7 = -t83 * t13 + t85 * t92;
t8 = t85 * t13 + t83 * t92;
t197 = t1 * t83 - t2 * t85 + (t7 * t83 - t8 * t85) * qJD(5);
t76 = t82 ^ 2;
t196 = 0.2e1 * t55;
t195 = 0.2e1 * t81;
t194 = 0.2e1 * qJD(2);
t31 = t178 * t85 + t38 * t83;
t94 = -t138 * t192 - t97;
t17 = qJD(5) * t31 - t155 * t83 + t85 * t94;
t190 = t17 * t83;
t158 = t83 * t178;
t18 = -qJD(5) * t158 - t155 * t85 + t165 * t38 - t83 * t94;
t189 = t18 * t85;
t188 = t31 * t83;
t32 = t38 * t85 - t158;
t187 = t32 * t85;
t36 = t82 * t145 + t67 * t149 + (-qJD(4) * t129 + t146) * t80;
t44 = t130 * t80 + t191 * t67;
t186 = t44 * t36;
t185 = t50 * t86;
t184 = t61 * t54;
t183 = t61 * t83;
t182 = t61 * t85;
t75 = t81 ^ 2;
t79 = t86 ^ 2;
t181 = t75 * t79;
t180 = t80 * t84;
t16 = t83 * t18;
t176 = t85 * t25;
t175 = t85 * t54;
t174 = t85 * t55;
t172 = -t165 * t31 - t16;
t164 = 0.2e1 * t37 * t25;
t163 = t60 * t196;
t161 = -0.2e1 * pkin(4) * qJD(5);
t160 = t83 * t175;
t157 = t75 * t168;
t153 = t83 * t165;
t58 = t61 ^ 2;
t141 = t58 * t153;
t140 = t84 * t157;
t74 = t80 ^ 2;
t137 = 0.2e1 * (t74 + t76) * qJD(3);
t135 = pkin(4) * t54 - pkin(9) * t55;
t134 = pkin(4) * t61 + pkin(9) * t60;
t132 = t7 * t85 + t8 * t83;
t127 = t80 * t138;
t123 = t23 * t85 + t24 * t83;
t121 = t25 * t60 + t37 * t55;
t29 = -t80 * t105 + (-t82 * t167 + (pkin(7) * t180 + t125 * t82) * qJD(2)) * t81;
t30 = t101 + (-t156 + (t125 * t80 - t162) * qJD(2)) * t81;
t120 = -t29 * t80 + t30 * t82;
t119 = -t166 * t32 - t17 * t85;
t118 = t165 * t37 + t25 * t83;
t117 = t166 * t37 - t176;
t116 = t165 * t61 - t54 * t83;
t115 = -t166 * t61 - t175;
t114 = t165 * t60 + t55 * t83;
t110 = t81 * t113;
t103 = t81 * (qJD(2) * t126 + qJD(3) * t86);
t102 = -qJD(5) * t132 - t1 * t85 - t2 * t83;
t99 = -qJD(5) * t123 - t10 * t85 - t11 * t83;
t6 = -qJD(4) * t15 - t191 * t90 - t192 * t88;
t63 = -0.2e1 * t140;
t52 = t57 * qJD(2);
t43 = (t152 * t178 + t71) * qJD(2);
t41 = -t166 * t60 + t174;
t27 = t144 * t61 + t160;
t12 = pkin(4) * t178 + t201;
t4 = -pkin(4) * t155 - t6;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t140, (-t84 ^ 2 + t79) * t75 * t194, t128 * t195, t63, -0.2e1 * t143 * t179, 0, -0.2e1 * pkin(1) * t169 * t75 - 0.2e1 * t170 * t52, -0.2e1 * pkin(1) * t157 + 0.2e1 * t170 * t51, (-t51 * t86 + t52 * t84 + (t111 * t86 - t57 * t84) * qJD(2)) * t195, 0.2e1 * t111 * t52 - 0.2e1 * t51 * t57, 0.2e1 * t53 * t138, 0.2e1 * (t76 * t170 + (-t53 - t159) * t80) * t154, (t179 * t53 - t181 * t82) * t194, 0.2e1 * t80 * t110 * t168, (-t110 * t84 + t181 * t80) * t194, t63, -0.2e1 * t52 * t147 + 0.2e1 * (t52 * t180 - t29 * t86 + (t185 * t80 + t34 * t84) * qJD(2)) * t81, 0.2e1 * t52 * t53 + 0.2e1 * (t30 * t86 + (t185 * t82 - t35 * t84) * qJD(2)) * t81, -0.2e1 * t30 * t113 - 0.2e1 * t29 * t53 + 0.2e1 * (-t34 * t82 - t35 * t80) * t154, 0.2e1 * t29 * t34 + 0.2e1 * t30 * t35 + 0.2e1 * t50 * t52, -0.2e1 * t38 * t94, -0.2e1 * t38 * t25 + 0.2e1 * t37 * t94, 0.2e1 * t155 * t38 + 0.2e1 * t178 * t94, t164, (-t169 * t37 + t25 * t86) * t195, t63, 0.2e1 * t42 * t25 + 0.2e1 * t43 * t37 + 0.2e1 * (-t169 * t201 - t6 * t86) * t81, -0.2e1 * t15 * t155 - 0.2e1 * t178 * t5 + 0.2e1 * t43 * t38 - 0.2e1 * t42 * t94, -0.2e1 * t15 * t25 - 0.2e1 * t201 * t94 + 0.2e1 * t5 * t37 - 0.2e1 * t6 * t38, -0.2e1 * t15 * t5 - 0.2e1 * t201 * t6 + 0.2e1 * t42 * t43, -0.2e1 * t32 * t17, 0.2e1 * t17 * t31 - 0.2e1 * t18 * t32, -0.2e1 * t17 * t37 + 0.2e1 * t25 * t32, 0.2e1 * t31 * t18, -0.2e1 * t18 * t37 - 0.2e1 * t25 * t31, t164, 0.2e1 * t12 * t18 + 0.2e1 * t2 * t37 + 0.2e1 * t25 * t7 + 0.2e1 * t31 * t4, 0.2e1 * t1 * t37 - 0.2e1 * t12 * t17 - 0.2e1 * t25 * t8 + 0.2e1 * t32 * t4, 0.2e1 * t1 * t31 + 0.2e1 * t17 * t7 - 0.2e1 * t18 * t8 - 0.2e1 * t2 * t32, -0.2e1 * t1 * t8 + 0.2e1 * t12 * t4 + 0.2e1 * t2 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t154, 0, -t155, 0, -t52, t51, 0, 0, t127, (-t74 + t76) * t154, t80 * t155, -t127, t82 * t155, 0, t103 * t80 - t52 * t82, t103 * t82 + t52 * t80, (-t113 * t82 + t53 * t80) * qJD(3) + t120, -pkin(2) * t52 + (-t34 * t80 + t35 * t82) * qJD(3) + t120 * qJ(3), -t38 * t54 - t61 * t94, -t61 * t25 + t54 * t37 - t38 * t55 + t60 * t94, (t169 * t61 + t54 * t86) * t81, t121, (-t169 * t60 + t55 * t86) * t81, 0, t73 * t25 + t42 * t55 + t43 * t60 + (-t169 * t44 + t36 * t86) * t81, -t155 * t45 + t178 * t199 - t42 * t54 + t43 * t61 - t73 * t94, -t15 * t55 - t199 * t37 - t201 * t54 - t45 * t25 + t36 * t38 - t44 * t94 + t5 * t60 - t6 * t61, t15 * t199 + t201 * t36 + t43 * t73 - t6 * t44 - t5 * t45, t115 * t32 - t17 * t182, (t31 * t85 + t32 * t83) * t54 + (t190 - t189 + (-t187 + t188) * qJD(5)) * t61, t115 * t37 - t17 * t60 + t176 * t61 + t32 * t55, t116 * t31 + t16 * t61, -t116 * t37 - t18 * t60 - t183 * t25 - t31 * t55, t121, t11 * t37 + t116 * t12 + t18 * t44 + t183 * t4 + t2 * t60 + t23 * t25 + t31 * t36 + t55 * t7, t1 * t60 + t10 * t37 + t115 * t12 - t17 * t44 + t182 * t4 - t24 * t25 + t32 * t36 - t55 * t8, t10 * t31 - t11 * t32 + t132 * t54 + t17 * t23 - t18 * t24 + t197 * t61, -t1 * t24 - t10 * t8 + t11 * t7 + t12 * t36 + t2 * t23 + t4 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t137, qJ(3) * t137, -0.2e1 * t184, 0.2e1 * t54 * t60 - 0.2e1 * t55 * t61, 0, t163, 0, 0, t73 * t196, -0.2e1 * t73 * t54, -0.2e1 * t199 * t60 + 0.2e1 * t36 * t61 - 0.2e1 * t44 * t54 - 0.2e1 * t45 * t55, 0.2e1 * t199 * t45 + 0.2e1 * t186, -0.2e1 * t184 * t78 - 0.2e1 * t141, 0.2e1 * t144 * t58 + 0.4e1 * t160 * t61, 0.2e1 * t115 * t60 + 0.2e1 * t174 * t61, -0.2e1 * t184 * t77 + 0.2e1 * t141, -0.2e1 * t116 * t60 - 0.2e1 * t183 * t55, t163, 0.2e1 * t11 * t60 + 0.2e1 * t116 * t44 + 0.2e1 * t183 * t36 + 0.2e1 * t23 * t55, 0.2e1 * t10 * t60 + 0.2e1 * t115 * t44 + 0.2e1 * t182 * t36 - 0.2e1 * t24 * t55, 0.2e1 * t123 * t54 + 0.2e1 * t198 * t61, -0.2e1 * t10 * t24 + 0.2e1 * t11 * t23 + 0.2e1 * t186; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t139, t138, 0, t52, 0, 0, 0, 0, 0, 0, t25, -t94, 0, t43, 0, 0, 0, 0, 0, 0, -t117, -t118, -t119 + t172, -t197; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t55, -t54, 0, 0, 0, 0, 0, 0, 0, 0, t41, -t114, (t77 + t78) * t54, -t198; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t94, 0, -t25, t155, t6, t5, 0, 0, t165 * t32 - t190, t119 + t172, t118, t166 * t31 - t189, -t117, 0, -pkin(4) * t18 - pkin(9) * t118 + t12 * t166 - t4 * t85, pkin(4) * t17 + pkin(9) * t117 + t12 * t165 + t4 * t83, (-t190 - t189 + (t187 + t188) * qJD(5)) * pkin(9) + t102, -pkin(4) * t4 + pkin(9) * t102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t54, 0, -t55, 0, -t36, -t199, 0, 0, -t27, -0.4e1 * t153 * t61 + t171 * t54, t114, t27, t41, 0, -t36 * t85 + t135 * t83 + (-t134 * t85 + t44 * t83) * qJD(5), t36 * t83 + t135 * t85 + (t134 * t83 + t44 * t85) * qJD(5), t99, -pkin(4) * t36 + pkin(9) * t99; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t153, -0.2e1 * t144, 0, -0.2e1 * t153, 0, 0, t83 * t161, t85 * t161, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t17, 0, -t18, t25, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t115, 0, -t116, t55, t11, t10, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t166, -t165, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t165, 0, -t166, 0, -pkin(9) * t165, pkin(9) * t166, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t3;
