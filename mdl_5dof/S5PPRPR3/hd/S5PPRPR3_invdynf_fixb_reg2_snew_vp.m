% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PPRPR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d5,theta1,theta2,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:05
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PPRPR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRPR3_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRPR3_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRPR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRPR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PPRPR3_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:05:39
% EndTime: 2019-12-05 15:05:40
% DurationCPUTime: 1.33s
% Computational Cost: add. (3377->140), mult. (5539->191), div. (0->0), fcn. (4311->10), ass. (0->106)
t811 = sin(pkin(7));
t814 = cos(pkin(7));
t795 = -t814 * g(1) - t811 * g(2);
t810 = sin(pkin(8));
t813 = cos(pkin(8));
t828 = -g(3) + qJDD(1);
t780 = t810 * t795 - t813 * t828;
t837 = t810 * t780;
t816 = sin(qJ(5));
t806 = t816 ^ 2;
t818 = cos(qJ(5));
t807 = t818 ^ 2;
t827 = t806 + t807;
t790 = t827 * qJDD(3);
t821 = qJD(3) ^ 2;
t793 = t827 * t821;
t809 = sin(pkin(9));
t812 = cos(pkin(9));
t771 = t809 * t790 + t812 * t793;
t772 = t812 * t790 - t809 * t793;
t817 = sin(qJ(3));
t819 = cos(qJ(3));
t752 = -t817 * t771 + t819 * t772;
t836 = t813 * t752;
t788 = t812 * qJDD(3) - t809 * t821;
t789 = -t809 * qJDD(3) - t812 * t821;
t768 = t819 * t788 + t817 * t789;
t835 = t813 * t768;
t823 = -t817 * t788 + t819 * t789;
t834 = t813 * t823;
t791 = t817 * qJDD(3) + t819 * t821;
t833 = t813 * t791;
t792 = t819 * qJDD(3) - t817 * t821;
t832 = t813 * t792;
t831 = t813 * t814;
t830 = t814 * t791;
t829 = t814 * t792;
t781 = t813 * t795 + t810 * t828;
t794 = t811 * g(1) - t814 * g(2);
t787 = -qJDD(2) + t794;
t764 = t819 * t781 - t817 * t787;
t762 = -t821 * pkin(3) + t764;
t763 = -t817 * t781 - t819 * t787;
t822 = qJDD(3) * pkin(3) + t763;
t747 = t812 * t762 + t809 * t822;
t826 = qJD(3) * qJD(5);
t825 = t816 * qJDD(3);
t824 = t818 * qJDD(3);
t746 = -t809 * t762 + t812 * t822;
t820 = qJD(5) ^ 2;
t800 = t816 * t821 * t818;
t799 = -t807 * t821 - t820;
t798 = -t806 * t821 - t820;
t797 = -qJDD(5) + t800;
t796 = qJDD(5) + t800;
t786 = -0.2e1 * t816 * t826 + t824;
t785 = 0.2e1 * t818 * t826 + t825;
t784 = t810 * t791;
t783 = t810 * t792;
t779 = qJDD(4) + t780;
t777 = t818 * t797 - t816 * t798;
t776 = -t816 * t796 + t818 * t799;
t775 = t816 * t797 + t818 * t798;
t774 = t818 * t796 + t816 * t799;
t773 = t813 * t780;
t766 = t810 * t823;
t765 = t810 * t768;
t761 = t812 * t777 + t809 * t785;
t760 = t812 * t776 - t809 * t786;
t759 = t809 * t777 - t812 * t785;
t758 = t809 * t776 + t812 * t786;
t754 = t813 * t781 + t837;
t753 = t810 * t781 - t773;
t751 = t819 * t771 + t817 * t772;
t750 = t810 * t752;
t749 = -t817 * t763 + t819 * t764;
t748 = t819 * t763 + t817 * t764;
t745 = -t817 * t759 + t819 * t761;
t744 = -t817 * t758 + t819 * t760;
t743 = t819 * t759 + t817 * t761;
t742 = t819 * t758 + t817 * t760;
t741 = -t821 * pkin(4) + qJDD(3) * pkin(6) + t747;
t740 = -qJDD(3) * pkin(4) - t821 * pkin(6) - t746;
t739 = t813 * t749 + t837;
t738 = t810 * t749 - t773;
t737 = t813 * t745 + t810 * t775;
t736 = t813 * t744 + t810 * t774;
t735 = t810 * t745 - t813 * t775;
t734 = t810 * t744 - t813 * t774;
t733 = t818 * t741 + t816 * t779;
t732 = -t816 * t741 + t818 * t779;
t731 = -t809 * t746 + t812 * t747;
t730 = t812 * t746 + t809 * t747;
t729 = -t816 * t732 + t818 * t733;
t728 = t818 * t732 + t816 * t733;
t727 = t812 * t729 + t809 * t740;
t726 = t809 * t729 - t812 * t740;
t725 = -t817 * t730 + t819 * t731;
t724 = t819 * t730 + t817 * t731;
t723 = t813 * t725 + t810 * t779;
t722 = t810 * t725 - t813 * t779;
t721 = -t817 * t726 + t819 * t727;
t720 = t819 * t726 + t817 * t727;
t719 = t813 * t721 + t810 * t728;
t718 = t810 * t721 - t813 * t728;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t811 * t794 + t814 * t795, 0, 0, 0, 0, 0, 0, 0, 0, 0, t814 * t754 - t811 * t787, 0, 0, 0, 0, 0, 0, t811 * t792 - t813 * t830, -t811 * t791 - t813 * t829, 0, t814 * t739 + t811 * t748, 0, 0, 0, 0, 0, 0, t811 * t768 + t823 * t831, -t768 * t831 + t811 * t823, 0, t814 * t723 + t811 * t724, 0, 0, 0, 0, 0, 0, t814 * t736 + t811 * t742, t814 * t737 + t811 * t743, t811 * t751 + t752 * t831, t814 * t719 + t811 * t720; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t814 * t794 + t811 * t795, 0, 0, 0, 0, 0, 0, 0, 0, 0, t811 * t754 + t814 * t787, 0, 0, 0, 0, 0, 0, -t811 * t833 - t829, -t811 * t832 + t830, 0, t811 * t739 - t814 * t748, 0, 0, 0, 0, 0, 0, -t814 * t768 + t811 * t834, -t811 * t835 - t814 * t823, 0, t811 * t723 - t814 * t724, 0, 0, 0, 0, 0, 0, t811 * t736 - t814 * t742, t811 * t737 - t814 * t743, -t814 * t751 + t811 * t836, t811 * t719 - t814 * t720; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t828, 0, 0, 0, 0, 0, 0, 0, 0, 0, t753, 0, 0, 0, 0, 0, 0, -t784, -t783, 0, t738, 0, 0, 0, 0, 0, 0, t766, -t765, 0, t722, 0, 0, 0, 0, 0, 0, t734, t735, t750, t718; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t795, 0, 0, 0, 0, 0, 0, 0, 0, 0, t754, 0, 0, 0, 0, 0, 0, -t833, -t832, 0, t739, 0, 0, 0, 0, 0, 0, t834, -t835, 0, t723, 0, 0, 0, 0, 0, 0, t736, t737, t836, t719; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t794, 0, 0, 0, 0, 0, 0, 0, 0, 0, t787, 0, 0, 0, 0, 0, 0, -t792, t791, 0, -t748, 0, 0, 0, 0, 0, 0, -t768, -t823, 0, -t724, 0, 0, 0, 0, 0, 0, -t742, -t743, -t751, -t720; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t828, 0, 0, 0, 0, 0, 0, 0, 0, 0, t753, 0, 0, 0, 0, 0, 0, -t784, -t783, 0, t738, 0, 0, 0, 0, 0, 0, t766, -t765, 0, t722, 0, 0, 0, 0, 0, 0, t734, t735, t750, t718; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t781, 0, 0, 0, 0, 0, 0, -t791, -t792, 0, t749, 0, 0, 0, 0, 0, 0, t823, -t768, 0, t725, 0, 0, 0, 0, 0, 0, t744, t745, t752, t721; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t780, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t780, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t779, 0, 0, 0, 0, 0, 0, -t774, -t775, 0, -t728; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t787, 0, 0, 0, 0, 0, 0, t792, -t791, 0, t748, 0, 0, 0, 0, 0, 0, t768, t823, 0, t724, 0, 0, 0, 0, 0, 0, t742, t743, t751, t720; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t821, -qJDD(3), 0, t764, 0, 0, 0, 0, 0, 0, t789, -t788, 0, t731, 0, 0, 0, 0, 0, 0, t760, t761, t772, t727; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t821, 0, t763, 0, 0, 0, 0, 0, 0, t788, t789, 0, t730, 0, 0, 0, 0, 0, 0, t758, t759, t771, t726; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t780, 0, 0, 0, 0, 0, 0, 0, 0, 0, t779, 0, 0, 0, 0, 0, 0, t774, t775, 0, t728; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t821, -qJDD(3), 0, t747, 0, 0, 0, 0, 0, 0, t776, t777, t790, t729; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t821, 0, t746, 0, 0, 0, 0, 0, 0, t786, -t785, t793, -t740; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t779, 0, 0, 0, 0, 0, 0, t774, t775, 0, t728; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t799, t797, t824, t733; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t796, t798, -t825, t732; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t786, t785, -t793, t740;];
f_new_reg = t1;
