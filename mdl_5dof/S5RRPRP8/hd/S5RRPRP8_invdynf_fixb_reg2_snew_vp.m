% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPRP8
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:04
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPRP8_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRP8_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRP8_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRP8_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRP8_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RRPRP8_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:04:48
% EndTime: 2019-12-31 20:04:50
% DurationCPUTime: 1.82s
% Computational Cost: add. (4396->188), mult. (9580->201), div. (0->0), fcn. (5711->6), ass. (0->121)
t1229 = sin(qJ(2));
t1232 = cos(qJ(2));
t1235 = qJD(1) ^ 2;
t1250 = t1232 * t1235;
t1213 = t1229 * t1250;
t1206 = qJDD(2) - t1213;
t1225 = t1229 ^ 2;
t1234 = qJD(2) ^ 2;
t1210 = t1225 * t1235 + t1234;
t1178 = t1232 * t1206 - t1229 * t1210;
t1254 = qJD(2) * t1232;
t1242 = qJD(1) * t1254;
t1246 = t1229 * qJDD(1);
t1197 = 0.2e1 * t1242 + t1246;
t1230 = sin(qJ(1));
t1233 = cos(qJ(1));
t1263 = t1230 * t1178 + t1233 * t1197;
t1262 = t1233 * t1178 - t1230 * t1197;
t1221 = qJD(2) - qJD(4);
t1261 = qJD(4) - t1221;
t1228 = sin(qJ(4));
t1231 = cos(qJ(4));
t1189 = (-t1228 * t1229 - t1231 * t1232) * qJD(1);
t1188 = t1189 ^ 2;
t1255 = qJD(1) * t1232;
t1256 = qJD(1) * t1229;
t1191 = -t1228 * t1255 + t1231 * t1256;
t1260 = t1191 ^ 2;
t1259 = t1221 ^ 2;
t1258 = 2 * qJD(3);
t1257 = t1232 * g(3);
t1253 = t1191 * t1189;
t1226 = t1232 ^ 2;
t1252 = t1226 * t1235;
t1248 = qJD(4) + t1221;
t1209 = -t1233 * g(1) - t1230 * g(2);
t1193 = -t1235 * pkin(1) + qJDD(1) * pkin(6) + t1209;
t1182 = -t1229 * g(3) + t1232 * t1193;
t1196 = (-pkin(2) * t1232 - qJ(3) * t1229) * qJD(1);
t1163 = -t1234 * pkin(2) + qJDD(2) * qJ(3) + qJD(2) * t1258 + t1196 * t1255 + t1182;
t1243 = qJD(2) * t1256;
t1245 = t1232 * qJDD(1);
t1199 = -t1243 + t1245;
t1207 = -qJD(2) * pkin(3) - pkin(7) * t1256;
t1150 = -pkin(3) * t1252 - t1199 * pkin(7) + qJD(2) * t1207 + t1163;
t1198 = t1242 + t1246;
t1238 = -qJDD(2) * pkin(2) - t1234 * qJ(3) + qJDD(3) + t1257;
t1241 = qJD(1) * t1196 + t1193;
t1151 = -qJDD(2) * pkin(3) + (-t1198 + t1242) * pkin(7) + (-pkin(3) * t1250 + t1241) * t1229 + t1238;
t1137 = t1231 * t1150 + t1228 * t1151;
t1247 = t1225 + t1226;
t1244 = -qJDD(2) + qJDD(4);
t1208 = t1230 * g(1) - t1233 * g(2);
t1136 = -t1228 * t1150 + t1231 * t1151;
t1240 = t1228 * t1198 + t1231 * t1199;
t1171 = t1244 + t1253;
t1239 = -t1231 * t1198 + t1228 * t1199;
t1175 = t1229 * t1206 + t1232 * t1210;
t1237 = -t1191 * qJD(4) - t1240;
t1192 = qJDD(1) * pkin(1) + t1235 * pkin(6) + t1208;
t1157 = -t1248 * t1189 + t1239;
t1236 = t1192 + (t1199 - t1243) * pkin(2);
t1146 = t1198 * qJ(3) + t1199 * pkin(3) - pkin(7) * t1252 + (qJ(3) * t1254 + (t1258 + t1207) * t1229) * qJD(1) + t1236;
t1211 = -t1234 - t1252;
t1205 = qJDD(2) + t1213;
t1204 = t1247 * t1235;
t1203 = -t1230 * qJDD(1) - t1233 * t1235;
t1202 = t1233 * qJDD(1) - t1230 * t1235;
t1201 = t1247 * qJDD(1);
t1200 = -0.2e1 * t1243 + t1245;
t1183 = -t1221 * pkin(4) - t1191 * qJ(5);
t1181 = -t1229 * t1193 - t1257;
t1180 = -t1259 - t1260;
t1177 = -t1229 * t1205 + t1232 * t1211;
t1174 = t1232 * t1205 + t1229 * t1211;
t1173 = t1233 * t1201 - t1230 * t1204;
t1172 = t1230 * t1201 + t1233 * t1204;
t1170 = -t1244 + t1253;
t1169 = -t1259 - t1188;
t1168 = t1233 * t1177 - t1230 * t1200;
t1167 = t1230 * t1177 + t1233 * t1200;
t1166 = -t1188 - t1260;
t1165 = t1241 * t1229 + t1238;
t1162 = -t1229 * t1181 + t1232 * t1182;
t1161 = t1232 * t1181 + t1229 * t1182;
t1160 = t1256 * t1258 + (t1198 + t1242) * qJ(3) + t1236;
t1159 = t1231 * t1170 - t1228 * t1180;
t1158 = t1228 * t1170 + t1231 * t1180;
t1156 = t1261 * t1189 - t1239;
t1155 = -t1248 * t1191 - t1240;
t1154 = t1261 * t1191 + t1240;
t1153 = t1231 * t1169 - t1228 * t1171;
t1152 = t1228 * t1169 + t1231 * t1171;
t1145 = t1232 * t1163 + t1229 * t1165;
t1144 = t1229 * t1163 - t1232 * t1165;
t1143 = t1229 * t1158 + t1232 * t1159;
t1142 = -t1232 * t1158 + t1229 * t1159;
t1141 = t1231 * t1155 - t1228 * t1157;
t1140 = t1228 * t1155 + t1231 * t1157;
t1139 = t1229 * t1152 + t1232 * t1153;
t1138 = -t1232 * t1152 + t1229 * t1153;
t1135 = -t1237 * pkin(4) - t1188 * qJ(5) + t1191 * t1183 + qJDD(5) + t1146;
t1134 = t1233 * t1143 - t1230 * t1156;
t1133 = t1230 * t1143 + t1233 * t1156;
t1132 = t1233 * t1139 - t1230 * t1154;
t1131 = t1230 * t1139 + t1233 * t1154;
t1130 = -t1188 * pkin(4) + t1237 * qJ(5) + 0.2e1 * qJD(5) * t1189 + t1221 * t1183 + t1137;
t1129 = t1229 * t1140 + t1232 * t1141;
t1128 = -t1232 * t1140 + t1229 * t1141;
t1127 = t1171 * pkin(4) + t1157 * qJ(5) - 0.2e1 * qJD(5) * t1191 + t1136;
t1126 = -t1228 * t1136 + t1231 * t1137;
t1125 = t1231 * t1136 + t1228 * t1137;
t1124 = t1233 * t1129 - t1230 * t1166;
t1123 = t1230 * t1129 + t1233 * t1166;
t1122 = -t1228 * t1127 + t1231 * t1130;
t1121 = t1231 * t1127 + t1228 * t1130;
t1120 = t1229 * t1125 + t1232 * t1126;
t1119 = -t1232 * t1125 + t1229 * t1126;
t1118 = t1229 * t1121 + t1232 * t1122;
t1117 = -t1232 * t1121 + t1229 * t1122;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1203, -t1202, 0, -t1230 * t1208 + t1233 * t1209, 0, 0, 0, 0, 0, 0, t1168, -t1262, t1173, t1233 * t1162 - t1230 * t1192, 0, 0, 0, 0, 0, 0, t1168, t1173, t1262, t1233 * t1145 - t1230 * t1160, 0, 0, 0, 0, 0, 0, t1132, t1134, t1124, t1233 * t1120 - t1230 * t1146, 0, 0, 0, 0, 0, 0, t1132, t1134, t1124, t1233 * t1118 - t1230 * t1135; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1202, t1203, 0, t1233 * t1208 + t1230 * t1209, 0, 0, 0, 0, 0, 0, t1167, -t1263, t1172, t1230 * t1162 + t1233 * t1192, 0, 0, 0, 0, 0, 0, t1167, t1172, t1263, t1230 * t1145 + t1233 * t1160, 0, 0, 0, 0, 0, 0, t1131, t1133, t1123, t1230 * t1120 + t1233 * t1146, 0, 0, 0, 0, 0, 0, t1131, t1133, t1123, t1230 * t1118 + t1233 * t1135; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1174, -t1175, 0, t1161, 0, 0, 0, 0, 0, 0, t1174, 0, t1175, t1144, 0, 0, 0, 0, 0, 0, t1138, t1142, t1128, t1119, 0, 0, 0, 0, 0, 0, t1138, t1142, t1128, t1117; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1235, -qJDD(1), 0, t1209, 0, 0, 0, 0, 0, 0, t1177, -t1178, t1201, t1162, 0, 0, 0, 0, 0, 0, t1177, t1201, t1178, t1145, 0, 0, 0, 0, 0, 0, t1139, t1143, t1129, t1120, 0, 0, 0, 0, 0, 0, t1139, t1143, t1129, t1118; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1235, 0, t1208, 0, 0, 0, 0, 0, 0, t1200, -t1197, t1204, t1192, 0, 0, 0, 0, 0, 0, t1200, t1204, t1197, t1160, 0, 0, 0, 0, 0, 0, t1154, t1156, t1166, t1146, 0, 0, 0, 0, 0, 0, t1154, t1156, t1166, t1135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1174, -t1175, 0, t1161, 0, 0, 0, 0, 0, 0, t1174, 0, t1175, t1144, 0, 0, 0, 0, 0, 0, t1138, t1142, t1128, t1119, 0, 0, 0, 0, 0, 0, t1138, t1142, t1128, t1117; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1211, -t1206, t1245, t1182, 0, 0, 0, 0, 0, 0, t1211, t1245, t1206, t1163, 0, 0, 0, 0, 0, 0, t1153, t1159, t1141, t1126, 0, 0, 0, 0, 0, 0, t1153, t1159, t1141, t1122; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1205, -t1210, -t1246, t1181, 0, 0, 0, 0, 0, 0, t1205, -t1246, t1210, -t1165, 0, 0, 0, 0, 0, 0, -t1152, -t1158, -t1140, -t1125, 0, 0, 0, 0, 0, 0, -t1152, -t1158, -t1140, -t1121; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1200, t1197, -t1204, -t1192, 0, 0, 0, 0, 0, 0, -t1200, -t1204, -t1197, -t1160, 0, 0, 0, 0, 0, 0, -t1154, -t1156, -t1166, -t1146, 0, 0, 0, 0, 0, 0, -t1154, -t1156, -t1166, -t1135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1211, t1245, t1206, t1163, 0, 0, 0, 0, 0, 0, t1153, t1159, t1141, t1126, 0, 0, 0, 0, 0, 0, t1153, t1159, t1141, t1122; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1200, -t1204, -t1197, -t1160, 0, 0, 0, 0, 0, 0, -t1154, -t1156, -t1166, -t1146, 0, 0, 0, 0, 0, 0, -t1154, -t1156, -t1166, -t1135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1205, t1246, -t1210, t1165, 0, 0, 0, 0, 0, 0, t1152, t1158, t1140, t1125, 0, 0, 0, 0, 0, 0, t1152, t1158, t1140, t1121; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1169, t1170, t1155, t1137, 0, 0, 0, 0, 0, 0, t1169, t1170, t1155, t1130; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1171, t1180, t1157, t1136, 0, 0, 0, 0, 0, 0, t1171, t1180, t1157, t1127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1154, t1156, t1166, t1146, 0, 0, 0, 0, 0, 0, t1154, t1156, t1166, t1135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1169, t1170, t1155, t1130; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1171, t1180, t1157, t1127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1154, t1156, t1166, t1135;];
f_new_reg = t1;
