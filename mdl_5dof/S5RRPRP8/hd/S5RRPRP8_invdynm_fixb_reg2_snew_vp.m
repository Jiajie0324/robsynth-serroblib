% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPRP8
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:04
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPRP8_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRP8_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRP8_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRP8_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRP8_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RRPRP8_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:04:40
% EndTime: 2019-12-31 20:04:48
% DurationCPUTime: 8.56s
% Computational Cost: add. (24282->554), mult. (52721->582), div. (0->0), fcn. (30976->6), ass. (0->373)
t953 = cos(qJ(2));
t956 = qJD(1) ^ 2;
t1033 = t953 * t956;
t950 = sin(qJ(2));
t927 = t950 * t1033;
t918 = qJDD(2) - t927;
t1034 = t953 * t918;
t946 = t950 ^ 2;
t1053 = t946 * t956;
t955 = qJD(2) ^ 2;
t922 = t955 + t1053;
t867 = -t950 * t922 + t1034;
t1014 = t950 * qJDD(1);
t1016 = qJD(1) * qJD(2);
t932 = t953 * t1016;
t908 = 0.2e1 * t932 + t1014;
t951 = sin(qJ(1));
t954 = cos(qJ(1));
t1116 = pkin(5) * (t954 * t867 - t951 * t908);
t1115 = pkin(5) * (t951 * t867 + t954 * t908);
t949 = sin(qJ(4));
t952 = cos(qJ(4));
t892 = (-t949 * t950 - t952 * t953) * qJD(1);
t1020 = qJD(1) * t953;
t1021 = qJD(1) * t950;
t894 = -t949 * t1020 + t952 * t1021;
t1057 = t894 * t892;
t941 = qJDD(2) - qJDD(4);
t1105 = t941 - t1057;
t1114 = t1105 * pkin(4);
t1048 = t949 * t1105;
t1036 = t952 * t1105;
t890 = t892 ^ 2;
t942 = qJD(2) - qJD(4);
t940 = t942 ^ 2;
t832 = -t940 - t890;
t774 = t949 * t832 - t1036;
t775 = t952 * t832 + t1048;
t1099 = -pkin(2) * t774 + qJ(3) * t775;
t772 = pkin(3) * t774;
t909 = t932 + t1014;
t1006 = t950 * t1016;
t935 = t953 * qJDD(1);
t987 = -t935 + t1006;
t823 = t892 * qJD(4) + t952 * t909 + t949 * t987;
t1059 = t892 * t942;
t1092 = t953 ^ 2;
t1032 = t1092 * t956;
t1015 = (qJD(3) * qJD(2));
t936 = 2 * t1015;
t921 = t954 * g(1) + t951 * g(2);
t896 = -t956 * pkin(1) + qJDD(1) * pkin(6) - t921;
t871 = -t950 * g(3) + t953 * t896;
t1082 = pkin(2) * t953;
t991 = -qJ(3) * t950 - t1082;
t906 = t991 * qJD(1);
t985 = -t955 * pkin(2) + qJDD(2) * qJ(3) + t906 * t1020 + t871;
t814 = t936 + t985;
t919 = -qJD(2) * pkin(3) - pkin(7) * t1021;
t770 = -pkin(3) * t1032 + t987 * pkin(7) + qJD(2) * t919 + t814;
t1067 = t953 * g(3);
t982 = -qJDD(2) * pkin(2) - t955 * qJ(3) + qJDD(3) + t1067;
t999 = qJD(1) * t906 + t896;
t957 = -qJDD(2) * pkin(3) + (-t909 + t932) * pkin(7) + (-pkin(3) * t1033 + t999) * t950 + t982;
t725 = t949 * t770 - t952 * t957;
t964 = qJ(5) * t1059 + 0.2e1 * qJD(5) * t894 + t1114 + t725;
t698 = t823 * qJ(5) + t964;
t962 = -t698 - t1114;
t960 = -t772 - t962;
t1113 = t960 + t1099;
t1112 = pkin(6) * t867;
t1043 = t950 * t918;
t861 = t953 * t922 + t1043;
t1109 = pkin(1) * t861;
t1108 = pkin(6) * t861;
t821 = t999 * t950 + t982;
t917 = qJDD(2) + t927;
t925 = -t955 - t1032;
t1107 = pkin(2) * t917 + qJ(3) * t925 - t821;
t1106 = t823 - t1059;
t1012 = t954 * qJDD(1);
t924 = -t955 + t1032;
t865 = -t953 * t924 + t1043;
t1104 = t953 * t1012 + t951 * t865;
t1103 = t954 * t865 - t951 * t935;
t1046 = t950 * t908;
t910 = t935 - 0.2e1 * t1006;
t855 = t953 * t910;
t848 = -t855 + t1046;
t916 = (t946 - t1092) * t956;
t1102 = t951 * t848 + t954 * t916;
t1101 = t954 * t848 - t951 * t916;
t988 = t909 + t932;
t1100 = t988 * qJ(3);
t839 = t1057 + t941;
t1049 = t949 * t839;
t891 = t894 ^ 2;
t869 = -t891 - t940;
t799 = t952 * t869 + t1049;
t1037 = t952 * t839;
t800 = -t949 * t869 + t1037;
t1098 = -pkin(2) * t799 + qJ(3) * t800;
t1097 = -t987 * pkin(3) - pkin(7) * t1032;
t726 = t952 * t770 + t949 * t957;
t688 = -t952 * t725 + t949 * t726;
t857 = t950 * t924 + t1034;
t1001 = t949 * t909 - t952 * t987;
t794 = (qJD(4) + t942) * t894 + t1001;
t1090 = pkin(2) + pkin(3);
t1038 = t952 * t698;
t1019 = qJD(5) * t892;
t883 = 0.2e1 * t1019;
t822 = -t894 * qJD(4) - t1001;
t872 = -t942 * pkin(4) - t894 * qJ(5);
t984 = t890 * pkin(4) - t822 * qJ(5) - t942 * t872 - t726;
t703 = t883 - t984;
t671 = t949 * t703 - t1038;
t1052 = t949 * t698;
t672 = t952 * t703 + t1052;
t696 = pkin(4) * t698;
t1095 = qJ(3) * t672 - t1090 * t671 + t696;
t689 = t949 * t725 + t952 * t726;
t1094 = qJ(3) * t689 - t1090 * t688;
t1093 = -t822 * pkin(4) - t890 * qJ(5) + t894 * t872 + qJDD(5);
t1091 = 2 * qJD(3);
t728 = -t953 * t774 + t950 * t775;
t1089 = pkin(1) * t728;
t744 = -t953 * t799 + t950 * t800;
t1088 = pkin(1) * t744;
t901 = t953 * t917;
t858 = t950 * t925 + t901;
t1087 = pkin(1) * t858;
t793 = (qJD(4) - t942) * t894 + t1001;
t1086 = pkin(2) * t793;
t1085 = pkin(2) * t1106;
t824 = -t890 - t891;
t1084 = pkin(2) * t824;
t798 = t1059 + t823;
t741 = -t794 * t949 - t952 * t798;
t743 = -t794 * t952 + t949 * t798;
t702 = t950 * t741 + t953 * t743;
t1081 = pkin(5) * (t951 * t702 + t954 * t824);
t729 = t950 * t774 + t953 * t775;
t1080 = pkin(5) * (t951 * t729 + t954 * t793);
t745 = t950 * t799 + t953 * t800;
t1079 = pkin(5) * (t1106 * t954 + t951 * t745);
t1044 = t950 * t917;
t864 = t953 * t925 - t1044;
t1078 = pkin(5) * (t951 * t864 + t954 * t910);
t1011 = t946 + t1092;
t912 = t1011 * qJDD(1);
t915 = t1011 * t956;
t1077 = pkin(5) * (t951 * t912 + t954 * t915);
t700 = -t953 * t741 + t950 * t743;
t1076 = pkin(6) * t700;
t1075 = pkin(6) * t728;
t1074 = pkin(6) * t744;
t1073 = pkin(6) * t858;
t1072 = pkin(7) * t688;
t1071 = pkin(7) * t689;
t1070 = pkin(7) * t741;
t1069 = pkin(7) * t774;
t1068 = pkin(7) * t799;
t1065 = qJ(3) * t793;
t1064 = qJ(3) * t1106;
t1063 = qJ(3) * t824;
t1061 = qJ(3) * t953;
t1056 = t942 * t894;
t1055 = t942 * t949;
t1054 = t942 * t952;
t920 = t951 * g(1) - t954 * g(2);
t895 = qJDD(1) * pkin(1) + t956 * pkin(6) + t920;
t965 = -pkin(2) * t1006 + t895;
t764 = t935 * pkin(2) + t909 * qJ(3) + (qJD(2) * t1061 + (-pkin(2) * qJD(2) + t1091 + t919) * t950) * qJD(1) + t965 + t1097;
t1050 = t949 * t764;
t1047 = t950 * t895;
t1045 = t950 * t910;
t760 = t952 * t764;
t1035 = t953 * t895;
t1029 = pkin(1) * t824 + pkin(6) * t702;
t1028 = pkin(1) * t793 + pkin(6) * t729;
t1027 = -pkin(3) * t824 + pkin(7) * t743;
t1026 = pkin(1) * t1106 + pkin(6) * t745;
t1025 = pkin(3) * t793 - pkin(7) * t775;
t1024 = -pkin(3) * t1106 + pkin(7) * t800;
t1023 = pkin(1) * t910 + pkin(6) * t864;
t1022 = pkin(1) * t915 + pkin(6) * t912;
t1013 = t951 * qJDD(1);
t1010 = t951 * t1057;
t1009 = t954 * t1057;
t737 = pkin(3) * t741;
t1008 = -pkin(2) * t741 + qJ(3) * t743 - t737;
t791 = pkin(3) * t799;
t1007 = -t791 + t726;
t1003 = t760 - t1068;
t870 = t950 * t896 + t1067;
t812 = t950 * t870 + t953 * t871;
t1000 = -t951 * t920 - t954 * t921;
t998 = t951 * t927;
t997 = t954 * t927;
t914 = -t951 * t956 + t1012;
t996 = -pkin(5) * t914 - t951 * g(3);
t995 = -t1025 - t760;
t994 = t1024 + t1050;
t993 = t725 - t772;
t992 = -pkin(2) * t821 + qJ(3) * t814;
t990 = pkin(2) * t950 - t1061;
t989 = t1050 - t1069;
t986 = t1007 + t1098;
t811 = t953 * t870 - t950 * t871;
t845 = t953 * t908 + t1045;
t983 = t954 * t920 - t951 * t921;
t665 = -pkin(1) * t700 - t1008;
t981 = t689 + t1027;
t683 = -pkin(4) * t824 - qJ(5) * t794 + t703;
t685 = (t798 + t823) * qJ(5) + t964;
t980 = -t949 * t683 + t952 * t685 - t1070;
t718 = t764 + t1093;
t710 = -qJ(5) * t869 + t718;
t757 = -pkin(4) * t1106 + qJ(5) * t839;
t979 = t952 * t710 - t949 * t757 - t1068;
t978 = -t1070 - t688;
t977 = pkin(4) * t869 + t984;
t976 = t987 * pkin(2);
t975 = t993 + t1099;
t973 = -t791 - t977;
t972 = t952 * t683 + t949 * t685 + t1027;
t971 = t949 * t710 + t952 * t757 + t1024;
t961 = t1021 * t1091 + t965;
t959 = -t976 + t961;
t693 = -pkin(4) * t793 + qJ(5) * t832 - t919 * t1021 - t1093 - t1097 - t1100 - t959;
t970 = qJ(5) * t1048 + t952 * t693 - t1025;
t680 = -pkin(4) * t718 + qJ(5) * t703;
t969 = -pkin(7) * t671 + qJ(5) * t1038 - t949 * t680;
t968 = -pkin(7) * t672 - qJ(5) * t1052 - t952 * t680;
t967 = qJ(5) * t1036 - t949 * t693 - t1069;
t966 = t973 + t1098;
t963 = pkin(2) * t922 + qJ(3) * t918 + t985;
t958 = t961 + t1100;
t923 = -t955 + t1053;
t913 = t954 * t956 + t1013;
t904 = t990 * qJDD(1);
t900 = t1011 * t1016;
t889 = -pkin(5) * t913 + t954 * g(3);
t884 = -0.2e1 * t1019;
t878 = -t891 + t940;
t877 = t890 - t940;
t876 = t951 * qJDD(2) + t954 * t900;
t875 = -t946 * t1016 + t953 * t909;
t874 = -t954 * qJDD(2) + t951 * t900;
t873 = -t1092 * t1016 + t950 * t987;
t866 = t950 * t923 + t901;
t860 = -t953 * t923 + t1044;
t856 = t988 * t950;
t849 = pkin(5) * (t954 * t912 - t951 * t915);
t842 = t891 - t890;
t838 = t954 * t875 - t998;
t837 = t954 * t873 + t998;
t836 = t951 * t875 + t997;
t835 = t951 * t873 - t997;
t834 = t950 * t1013 + t954 * t866;
t833 = -t950 * t1012 + t951 * t866;
t829 = pkin(5) * (t954 * t864 - t951 * t910);
t828 = (-t892 * t952 - t894 * t949) * t942;
t827 = (-t892 * t949 + t894 * t952) * t942;
t826 = -t1035 + t1108;
t825 = -t1047 - t1073;
t820 = t871 + t1109;
t819 = t870 - t1087;
t809 = t1023 + t1035;
t808 = -pkin(1) * t908 - t1047 - t1112;
t807 = qJ(3) * t915 + t821;
t806 = pkin(2) * t915 + t814;
t805 = -t976 + t958;
t804 = t952 * t877 + t1049;
t803 = -t949 * t878 - t1036;
t802 = t949 * t877 - t1037;
t801 = t952 * t878 - t1048;
t784 = pkin(4) * t798;
t783 = pkin(1) * t895 + pkin(6) * t812;
t782 = t894 * t1055 + t952 * t823;
t781 = -t894 * t1054 + t949 * t823;
t780 = t892 * t1054 - t949 * t822;
t779 = -t892 * t1055 - t952 * t822;
t778 = (t910 - t987) * pkin(2) + t958;
t777 = (t908 + t988) * qJ(3) + t959;
t776 = t812 + t1022;
t765 = -t1087 - t1107;
t763 = -(2 * t1015) - t963 - t1109;
t762 = t950 * t827 + t953 * t828;
t761 = -t953 * t827 + t950 * t828;
t759 = t953 * t814 + t950 * t821;
t758 = t950 * t814 - t953 * t821;
t756 = t954 * t762 + t951 * t941;
t755 = t951 * t762 - t954 * t941;
t754 = -pkin(2) * t1046 + t953 * t777 - t1108;
t753 = qJ(3) * t855 - t950 * t778 - t1073;
t752 = -t950 * t806 + t953 * t807;
t751 = t950 * t802 + t953 * t804;
t750 = t950 * t801 + t953 * t803;
t749 = -t953 * t802 + t950 * t804;
t748 = -t953 * t801 + t950 * t803;
t747 = t1112 + t950 * t777 + (pkin(1) + t1082) * t908;
t746 = qJ(3) * t1045 + t953 * t778 + t1023;
t742 = -t1106 * t949 - t952 * t793;
t740 = t1106 * t952 - t949 * t793;
t734 = t953 * t806 + t950 * t807 + t1022;
t733 = t950 * t781 + t953 * t782;
t732 = -t950 * t779 + t953 * t780;
t731 = -t953 * t781 + t950 * t782;
t730 = t953 * t779 + t950 * t780;
t722 = t954 * t733 + t1010;
t721 = t954 * t732 - t1010;
t720 = t951 * t733 - t1009;
t719 = t951 * t732 + t1009;
t717 = t954 * t751 + t951 * t794;
t716 = t954 * t750 - t951 * t798;
t715 = t951 * t751 - t954 * t794;
t714 = t951 * t750 + t954 * t798;
t713 = -pkin(1) * t758 - t992;
t711 = pkin(5) * (-t1106 * t951 + t954 * t745);
t708 = t1003 + t1064;
t706 = pkin(5) * (t954 * t729 - t951 * t793);
t705 = -pkin(6) * t758 - t990 * t805;
t704 = t989 + t1065;
t701 = t950 * t740 + t953 * t742;
t699 = -t953 * t740 + t950 * t742;
t695 = pkin(6) * t759 + (pkin(1) - t991) * t805;
t694 = -t994 + t1085;
t692 = -t995 + t1086;
t691 = t954 * t701 - t951 * t842;
t690 = t951 * t701 + t954 * t842;
t686 = pkin(5) * (t954 * t702 - t951 * t824);
t682 = qJ(3) * t764 - t1072;
t681 = t979 + t1064;
t679 = t967 + t1065;
t678 = -t986 - t1088;
t677 = t978 + t1063;
t676 = t1090 * t764 - t1071;
t675 = -t971 + t1085;
t674 = -t970 + t1086;
t673 = -t975 - t1089;
t670 = -t981 + t1084;
t669 = t884 - t966 - t1088;
t668 = t950 * t688 + t953 * t689;
t667 = -t953 * t688 + t950 * t689;
t666 = -t950 * t694 + t953 * t708 - t1074;
t664 = -t1089 - t1113;
t663 = -t950 * t692 + t953 * t704 - t1075;
t662 = t953 * t694 + t950 * t708 + t1026;
t661 = t665 - t784;
t660 = t953 * t692 + t950 * t704 + t1028;
t659 = t980 + t1063;
t658 = -t972 + t1084;
t657 = t950 * t671 + t953 * t672;
t656 = -t953 * t671 + t950 * t672;
t655 = -t950 * t675 + t953 * t681 - t1074;
t654 = -t950 * t674 + t953 * t679 - t1075;
t653 = t953 * t675 + t950 * t681 + t1026;
t652 = t953 * t674 + t950 * t679 + t1028;
t651 = -t950 * t670 + t953 * t677 - t1076;
t650 = t953 * t670 + t950 * t677 + t1029;
t649 = qJ(3) * t718 + t969;
t648 = -pkin(6) * t667 - t950 * t676 + t953 * t682;
t647 = -pkin(1) * t667 - t1094;
t646 = pkin(1) * t764 + pkin(6) * t668 + t953 * t676 + t950 * t682;
t645 = t1090 * t718 + t968;
t644 = -t950 * t658 + t953 * t659 - t1076;
t643 = t953 * t658 + t950 * t659 + t1029;
t642 = -pkin(1) * t656 - t1095;
t641 = -pkin(6) * t656 - t950 * t645 + t953 * t649;
t640 = pkin(1) * t718 + pkin(6) * t657 + t953 * t645 + t950 * t649;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t914, 0, -t913, 0, t996, -t889, -t983, -pkin(5) * t983, t838, -t1101, t834, t837, -t1103, t876, -t951 * t819 + t954 * t825 - t1078, -t951 * t820 + t954 * t826 + t1115, t954 * t811 - t1077, -pkin(5) * (t951 * t812 + t954 * t895) - (t951 * pkin(1) - t954 * pkin(6)) * t811, t838, t834, t1101, t876, t1103, t837, t954 * t753 - t951 * t765 - t1078, t954 * t752 - t951 * t904 - t1077, t954 * t754 - t951 * t763 - t1115, t954 * t705 - t951 * t713 - pkin(5) * (t951 * t759 + t954 * t805), t722, t691, t716, t721, t717, t756, t954 * t663 - t951 * t673 - t1080, t954 * t666 - t951 * t678 - t1079, t954 * t651 - t951 * t665 - t1081, t954 * t648 - t951 * t647 - pkin(5) * (t951 * t668 + t954 * t764), t722, t691, t716, t721, t717, t756, t954 * t654 - t951 * t664 - t1080, t954 * t655 - t951 * t669 - t1079, t954 * t644 - t951 * t661 - t1081, t954 * t641 - t951 * t642 - pkin(5) * (t951 * t657 + t954 * t718); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t913, 0, t914, 0, t889, t996, t1000, pkin(5) * t1000, t836, -t1102, t833, t835, -t1104, t874, t954 * t819 + t951 * t825 + t829, t954 * t820 + t951 * t826 - t1116, t951 * t811 + t849, pkin(5) * (t954 * t812 - t951 * t895) - (-t954 * pkin(1) - t951 * pkin(6)) * t811, t836, t833, t1102, t874, t1104, t835, t951 * t753 + t954 * t765 + t829, t951 * t752 + t954 * t904 + t849, t951 * t754 + t954 * t763 + t1116, t951 * t705 + t954 * t713 + pkin(5) * (t954 * t759 - t951 * t805), t720, t690, t714, t719, t715, t755, t951 * t663 + t954 * t673 + t706, t951 * t666 + t954 * t678 + t711, t951 * t651 + t954 * t665 + t686, t951 * t648 + t954 * t647 + pkin(5) * (t954 * t668 - t951 * t764), t720, t690, t714, t719, t715, t755, t951 * t654 + t954 * t664 + t706, t951 * t655 + t954 * t669 + t711, t951 * t644 + t954 * t661 + t686, t951 * t641 + t954 * t642 + pkin(5) * (t954 * t657 - t951 * t718); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t920, t921, 0, 0, t856, t845, t860, t855, t857, 0, t809, t808, t776, t783, t856, t860, -t845, 0, -t857, t855, t746, t734, t747, t695, t731, t699, t748, t730, t749, t761, t660, t662, t650, t646, t731, t699, t748, t730, t749, t761, t652, t653, t643, t640; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t956, 0, 0, -g(3), -t920, 0, t875, -t848, t866, t873, -t865, t900, t825, t826, t811, pkin(6) * t811, t875, t866, t848, t900, t865, t873, t753, t752, t754, t705, t733, t701, t750, t732, t751, t762, t663, t666, t651, t648, t733, t701, t750, t732, t751, t762, t654, t655, t644, t641; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t956, 0, qJDD(1), 0, g(3), 0, -t921, 0, t927, -t916, -t1014, -t927, -t935, -qJDD(2), t819, t820, 0, pkin(1) * t811, t927, -t1014, t916, -qJDD(2), t935, -t927, t765, t904, t763, t713, -t1057, t842, t798, t1057, -t794, -t941, t673, t678, t665, t647, -t1057, t842, t798, t1057, -t794, -t941, t664, t669, t661, t642; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t920, t921, 0, 0, t856, t845, t860, t855, t857, 0, t809, t808, t776, t783, t856, t860, -t845, 0, -t857, t855, t746, t734, t747, t695, t731, t699, t748, t730, t749, t761, t660, t662, t650, t646, t731, t699, t748, t730, t749, t761, t652, t653, t643, t640; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t909, t910, t917, -t932, t924, t932, 0, -t895, t870, 0, t909, t917, -t910, t932, -t924, -t932, qJ(3) * t910, t807, t777, qJ(3) * t805, t782, t742, t803, t780, t804, t828, t704, t708, t677, t682, t782, t742, t803, t780, t804, t828, t679, t681, t659, t649; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1006, t908, -t923, -t987, t918, -t1006, t895, 0, t871, 0, t1006, -t923, -t908, -t1006, -t918, -t987, t778, t806, pkin(2) * t908, pkin(2) * t805, -t781, -t740, -t801, t779, -t802, -t827, t692, t694, t670, t676, -t781, -t740, -t801, t779, -t802, -t827, t674, t675, t658, t645; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t927, t916, t1014, t927, t935, qJDD(2), -t870, -t871, 0, 0, -t927, t1014, -t916, qJDD(2), -t935, t927, t1107, -t904, t936 + t963, t992, t1057, -t842, -t798, -t1057, t794, t941, t975, t986, t1008, t1094, t1057, -t842, -t798, -t1057, t794, t941, t1113, t883 + t966, t784 + t1008, t1095; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t909, t917, -t910, t932, -t924, -t932, 0, t821, t805, 0, t782, t742, t803, t780, t804, t828, t989, t1003, t978, -t1072, t782, t742, t803, t780, t804, t828, t967, t979, t980, t969; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t927, t1014, -t916, qJDD(2), -t935, t927, -t821, 0, t814, 0, t1057, -t842, -t798, -t1057, t794, t941, t993, t1007, -t737, -pkin(3) * t688, t1057, -t842, -t798, -t1057, t794, t941, t960, t883 + t973, t784 - t737, -pkin(3) * t671 + t696; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1006, t923, t908, t1006, t918, t987, -t805, -t814, 0, 0, t781, t740, t801, -t779, t802, t827, t995, t994, t981, -pkin(3) * t764 + t1071, t781, t740, t801, -t779, t802, t827, t970, t971, t972, -pkin(3) * t718 - t968; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t823, -t793, -t1105, t1059, t877, -t1059, 0, t764, t725, 0, t823, -t793, -t1105, t1059, t877, -t1059, qJ(5) * t1105, t710, t685, qJ(5) * t698; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1056, t1106, t878, t822, -t839, t1056, -t764, 0, t726, 0, -t1056, t1106, t878, t822, -t839, t1056, t693, t757, t683, t680; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1057, t842, t798, t1057, -t794, -t941, -t725, -t726, 0, 0, -t1057, t842, t798, t1057, -t794, -t941, t962, t884 + t977, -t784, -t696; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t823, -t793, -t1105, t1059, t877, -t1059, 0, t718, t698, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1056, t1106, t878, t822, -t839, t1056, -t718, 0, t703, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1057, t842, t798, t1057, -t794, -t941, -t698, -t703, 0, 0;];
m_new_reg = t1;
