% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:54
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRPR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR4_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR4_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR4_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:54:07
% EndTime: 2019-12-05 17:54:23
% DurationCPUTime: 14.59s
% Computational Cost: add. (54520->600), mult. (119643->917), div. (0->0), fcn. (80292->10), ass. (0->412)
t621 = sin(qJ(1));
t624 = cos(qJ(1));
t593 = t621 * g(2) - t624 * g(3);
t678 = qJD(1) ^ 2;
t579 = -t678 * pkin(1) + t593;
t615 = sin(pkin(8));
t617 = cos(pkin(8));
t594 = t624 * g(2) + t621 * g(3);
t627 = qJDD(1) * pkin(1) + t594;
t532 = t615 * t579 - t617 * t627;
t533 = t617 * t579 + t615 * t627;
t636 = t615 * t532 + t617 * t533;
t469 = t617 * t532 - t615 * t533;
t656 = t624 * t469;
t412 = -t621 * t636 + t656;
t663 = t621 * t469;
t413 = t624 * t636 + t663;
t614 = sin(pkin(9));
t616 = cos(pkin(9));
t623 = cos(qJ(3));
t620 = sin(qJ(3));
t655 = qJD(1) * t620;
t569 = -t616 * t623 * qJD(1) + t614 * t655;
t571 = (t614 * t623 + t616 * t620) * qJD(1);
t531 = t571 * t569;
t682 = qJDD(3) - t531;
t693 = t614 * t682;
t692 = t616 * t682;
t619 = sin(qJ(5));
t622 = cos(qJ(5));
t510 = t622 * t569 + t619 * t571;
t512 = -t619 * t569 + t622 * t571;
t461 = t512 * t510;
t644 = qJDD(3) + qJDD(5);
t684 = -t461 + t644;
t691 = t619 * t684;
t690 = t622 * t684;
t583 = t615 * qJDD(1) + t617 * t678;
t612 = g(1) - qJDD(2);
t559 = qJ(2) * t583 - t617 * t612;
t584 = t617 * qJDD(1) - t615 * t678;
t629 = t621 * t583 - t624 * t584;
t630 = -qJ(2) * t584 - t615 * t612;
t689 = pkin(5) * t629 + t621 * t559 + t624 * t630;
t538 = t624 * t583 + t621 * t584;
t688 = pkin(5) * t538 + t624 * t559 - t621 * t630;
t610 = qJD(3) + qJD(5);
t504 = t610 * t510;
t648 = qJD(1) * qJD(3);
t637 = t623 * t648;
t646 = t620 * qJDD(1);
t581 = t637 + t646;
t638 = t620 * t648;
t645 = t623 * qJDD(1);
t628 = t638 - t645;
t535 = t616 * t581 - t614 * t628;
t634 = t614 * t581 + t616 * t628;
t626 = t510 * qJD(5) - t622 * t535 + t619 * t634;
t683 = -t504 - t626;
t635 = t619 * t535 + t622 * t634;
t407 = (qJD(5) - t610) * t512 + t635;
t508 = t510 ^ 2;
t509 = t512 ^ 2;
t680 = t569 ^ 2;
t568 = t571 ^ 2;
t608 = t610 ^ 2;
t679 = t623 ^ 2;
t677 = t610 * t619;
t676 = t610 * t622;
t514 = -t678 * pkin(2) + qJDD(1) * pkin(6) + t533;
t493 = t620 * t514 + t623 * t612;
t600 = t623 * t678 * t620;
t591 = qJDD(3) + t600;
t457 = (-t581 + t637) * qJ(4) + t591 * pkin(3) - t493;
t495 = t623 * t514 - t620 * t612;
t590 = qJD(3) * pkin(3) - qJ(4) * t655;
t607 = t679 * t678;
t460 = -pkin(3) * t607 - qJ(4) * t628 - qJD(3) * t590 + t495;
t390 = 0.2e1 * qJD(4) * t571 - t616 * t457 + t614 * t460;
t654 = qJD(3) * t569;
t491 = -t535 - t654;
t365 = pkin(4) * t682 + t491 * pkin(7) - t390;
t391 = -0.2e1 * qJD(4) * t569 + t614 * t457 + t616 * t460;
t555 = qJD(3) * pkin(4) - t571 * pkin(7);
t369 = -t680 * pkin(4) - pkin(7) * t634 - qJD(3) * t555 + t391;
t318 = -t622 * t365 + t619 * t369;
t319 = t619 * t365 + t622 * t369;
t283 = -t622 * t318 + t619 * t319;
t675 = t614 * t283;
t513 = -qJDD(1) * pkin(2) - t678 * pkin(6) + t532;
t466 = t628 * pkin(3) - qJ(4) * t607 + t590 * t655 + qJDD(4) + t513;
t674 = t614 * t466;
t526 = qJDD(3) + t531;
t673 = t614 * t526;
t672 = t616 * t283;
t671 = t616 * t466;
t670 = t616 * t526;
t396 = pkin(4) * t634 - t680 * pkin(7) + t571 * t555 + t466;
t669 = t619 * t396;
t454 = t461 + t644;
t668 = t619 * t454;
t337 = -t616 * t390 + t614 * t391;
t667 = t620 * t337;
t666 = t620 * t513;
t665 = t620 * t591;
t592 = qJDD(3) - t600;
t664 = t620 * t592;
t662 = t622 * t396;
t661 = t622 * t454;
t660 = t623 * t337;
t659 = t623 * t513;
t582 = -0.2e1 * t638 + t645;
t658 = t623 * t582;
t657 = t623 * t592;
t653 = qJD(3) * t571;
t652 = qJD(3) * t614;
t651 = qJD(3) * t616;
t611 = t620 ^ 2;
t650 = t611 * t678;
t647 = t617 * qJDD(3);
t643 = t611 + t679;
t642 = t615 * t461;
t641 = t615 * t531;
t640 = t617 * t461;
t639 = t617 * t531;
t284 = t619 * t318 + t622 * t319;
t338 = t614 * t390 + t616 * t391;
t440 = t620 * t493 + t623 * t495;
t633 = t615 * t600;
t632 = t617 * t600;
t586 = t621 * qJDD(1) + t624 * t678;
t631 = pkin(5) * t586 - t624 * g(1);
t439 = t623 * t493 - t620 * t495;
t544 = t624 * t593 - t621 * t594;
t543 = -t621 * t593 - t624 * t594;
t489 = -t634 + t653;
t625 = qJD(3) ^ 2;
t605 = t615 * qJDD(3);
t599 = -t607 - t625;
t598 = t607 - t625;
t597 = -t625 - t650;
t596 = t625 - t650;
t589 = t607 - t650;
t588 = t607 + t650;
t587 = -t624 * qJDD(1) + t621 * t678;
t585 = t643 * qJDD(1);
t580 = 0.2e1 * t637 + t646;
t578 = t623 * t591;
t577 = t643 * t648;
t567 = -pkin(5) * t587 + t621 * g(1);
t562 = -t568 - t625;
t561 = -t568 + t625;
t560 = -t625 + t680;
t554 = t623 * t581 - t611 * t648;
t553 = t620 * t628 - t679 * t648;
t552 = t617 * t577 + t605;
t551 = t615 * t577 - t647;
t550 = -t620 * t597 - t657;
t549 = -t620 * t596 + t578;
t548 = t623 * t599 - t665;
t547 = t623 * t598 - t664;
t546 = t623 * t597 - t664;
t545 = t620 * t599 + t578;
t542 = t617 * t585 - t615 * t588;
t541 = t615 * t585 + t617 * t588;
t536 = -t620 * t580 + t658;
t529 = -t568 + t680;
t524 = -t625 - t680;
t522 = t617 * t554 - t633;
t521 = t617 * t553 + t633;
t520 = t615 * t554 + t632;
t519 = t615 * t553 - t632;
t518 = t617 * t549 + t615 * t646;
t517 = t617 * t547 + t615 * t645;
t516 = t615 * t549 - t617 * t646;
t515 = t615 * t547 - t617 * t645;
t506 = (-t569 * t616 + t571 * t614) * qJD(3);
t505 = (-t569 * t614 - t571 * t616) * qJD(3);
t502 = t617 * t550 + t615 * t580;
t501 = t617 * t548 - t615 * t582;
t500 = t615 * t550 - t617 * t580;
t499 = t615 * t548 + t617 * t582;
t498 = -t509 + t608;
t497 = t508 - t608;
t496 = -t509 - t608;
t494 = t617 * t536 - t615 * t589;
t492 = t615 * t536 + t617 * t589;
t490 = t535 - t654;
t487 = t634 + t653;
t486 = -t568 - t680;
t484 = t616 * t535 - t571 * t652;
t483 = t614 * t535 + t571 * t651;
t482 = t569 * t651 + t614 * t634;
t481 = t569 * t652 - t616 * t634;
t480 = -t614 * t562 - t670;
t479 = -t614 * t561 + t692;
t478 = t616 * t560 - t673;
t477 = t616 * t562 - t673;
t476 = t616 * t561 + t693;
t475 = t614 * t560 + t670;
t474 = -t621 * t541 + t624 * t542;
t473 = -t624 * t541 - t621 * t542;
t472 = -pkin(6) * t546 + t659;
t471 = -pkin(6) * t545 + t666;
t465 = -pkin(2) * t546 + t495;
t464 = -pkin(2) * t545 + t493;
t463 = t616 * t524 - t693;
t462 = t614 * t524 + t692;
t459 = pkin(1) * t612 + qJ(2) * t636;
t458 = -t509 + t508;
t452 = -t608 - t508;
t449 = -t620 * t505 + t623 * t506;
t448 = (-t510 * t622 + t512 * t619) * t610;
t447 = (-t510 * t619 - t512 * t622) * t610;
t446 = -t621 * t500 + t624 * t502;
t445 = -t621 * t499 + t624 * t501;
t444 = -t624 * t500 - t621 * t502;
t443 = -t624 * t499 - t621 * t501;
t442 = t617 * t449 + t605;
t441 = t615 * t449 - t647;
t437 = t616 * t489 - t614 * t491;
t436 = -t616 * t487 - t614 * t490;
t435 = t614 * t489 + t616 * t491;
t434 = -t614 * t487 + t616 * t490;
t432 = -t512 * qJD(5) - t635;
t431 = -t508 - t509;
t430 = -t620 * t483 + t623 * t484;
t429 = -t620 * t481 + t623 * t482;
t428 = -t620 * t477 + t623 * t480;
t427 = -t620 * t476 + t623 * t479;
t426 = -t620 * t475 + t623 * t478;
t425 = t623 * t477 + t620 * t480;
t424 = t622 * t497 - t668;
t423 = -t619 * t498 + t690;
t422 = t619 * t497 + t661;
t421 = t622 * t498 + t691;
t420 = -t619 * t496 - t661;
t419 = t622 * t496 - t668;
t418 = -qJ(2) * t541 + t617 * t439;
t417 = qJ(2) * t542 + t615 * t439;
t416 = -qJ(4) * t477 + t671;
t415 = t617 * t440 + t615 * t513;
t414 = t615 * t440 - t617 * t513;
t411 = -t504 + t626;
t406 = (qJD(5) + t610) * t512 + t635;
t405 = -qJ(4) * t462 + t674;
t404 = t617 * t430 + t641;
t403 = t617 * t429 - t641;
t402 = t615 * t430 - t639;
t401 = t615 * t429 + t639;
t400 = -t512 * t677 - t622 * t626;
t399 = t512 * t676 - t619 * t626;
t398 = -t619 * t432 + t510 * t676;
t397 = t622 * t432 + t510 * t677;
t395 = -t620 * t462 + t623 * t463;
t394 = t623 * t462 + t620 * t463;
t393 = t622 * t452 - t691;
t392 = t619 * t452 + t690;
t389 = t617 * t428 + t615 * t490;
t388 = t617 * t427 - t615 * t491;
t387 = t617 * t426 + t489 * t615;
t386 = t615 * t428 - t617 * t490;
t385 = t615 * t427 + t617 * t491;
t384 = t615 * t426 - t489 * t617;
t382 = -pkin(3) * t490 + qJ(4) * t480 + t674;
t381 = -t614 * t447 + t616 * t448;
t380 = t616 * t447 + t614 * t448;
t379 = -qJ(2) * t500 - t615 * t465 + t617 * t472;
t378 = -qJ(2) * t499 - t615 * t464 + t617 * t471;
t377 = -pkin(3) * t487 + qJ(4) * t463 - t671;
t376 = -t620 * t435 + t623 * t437;
t375 = -t620 * t434 + t623 * t436;
t374 = t623 * t435 + t620 * t437;
t373 = t617 * t395 + t615 * t487;
t372 = t615 * t395 - t617 * t487;
t371 = -pkin(1) * t546 + qJ(2) * t502 + t617 * t465 + t615 * t472;
t370 = -pkin(1) * t545 + qJ(2) * t501 + t617 * t464 + t615 * t471;
t368 = t617 * t375 - t615 * t529;
t367 = t615 * t375 + t617 * t529;
t362 = -t614 * t422 + t616 * t424;
t361 = -t614 * t421 + t616 * t423;
t360 = t616 * t422 + t614 * t424;
t359 = t616 * t421 + t614 * t423;
t358 = t617 * t376 + t615 * t486;
t357 = t615 * t376 - t617 * t486;
t356 = -t614 * t419 + t616 * t420;
t355 = t616 * t419 + t614 * t420;
t354 = -pkin(7) * t419 + t662;
t353 = -t621 * t414 + t624 * t415;
t352 = -t624 * t414 - t621 * t415;
t351 = -t407 * t622 - t619 * t411;
t350 = -t622 * t406 - t619 * t683;
t349 = -t407 * t619 + t622 * t411;
t348 = -t619 * t406 + t622 * t683;
t347 = -t614 * t399 + t616 * t400;
t346 = -t614 * t397 + t616 * t398;
t345 = t616 * t399 + t614 * t400;
t344 = t616 * t397 + t614 * t398;
t343 = -pkin(2) * t374 - pkin(3) * t435;
t342 = -pkin(7) * t392 + t669;
t341 = -t614 * t392 + t616 * t393;
t340 = t616 * t392 + t614 * t393;
t339 = -qJ(2) * t414 - (pkin(2) * t615 - pkin(6) * t617) * t439;
t336 = -pkin(2) * t425 - pkin(3) * t477 + t391;
t335 = -t621 * t386 + t624 * t389;
t334 = -t624 * t386 - t621 * t389;
t333 = -t620 * t380 + t623 * t381;
t332 = t617 * t333 + t615 * t644;
t331 = t615 * t333 - t617 * t644;
t330 = -pkin(2) * t394 - pkin(3) * t462 + t390;
t329 = -t621 * t372 + t624 * t373;
t328 = -t624 * t372 - t621 * t373;
t327 = -pkin(3) * t466 + qJ(4) * t338;
t326 = -pkin(4) * t683 + pkin(7) * t420 + t669;
t325 = -pkin(6) * t425 - t620 * t382 + t623 * t416;
t324 = qJ(2) * t415 - (-pkin(2) * t617 - pkin(6) * t615 - pkin(1)) * t439;
t323 = -qJ(4) * t435 - t337;
t322 = -pkin(4) * t406 + pkin(7) * t393 - t662;
t321 = -pkin(6) * t394 - t620 * t377 + t623 * t405;
t320 = -pkin(3) * t486 + qJ(4) * t437 + t338;
t316 = -t620 * t360 + t623 * t362;
t315 = -t620 * t359 + t623 * t361;
t314 = -t621 * t357 + t624 * t358;
t313 = -t624 * t357 - t621 * t358;
t312 = -t620 * t355 + t623 * t356;
t311 = t623 * t355 + t620 * t356;
t310 = -t614 * t349 + t616 * t351;
t309 = -t614 * t348 + t616 * t350;
t308 = t616 * t349 + t614 * t351;
t307 = t616 * t348 + t614 * t350;
t306 = -t620 * t345 + t623 * t347;
t305 = -t620 * t344 + t623 * t346;
t304 = -t620 * t340 + t623 * t341;
t303 = t623 * t340 + t620 * t341;
t302 = t617 * t316 - t615 * t407;
t301 = t617 * t315 - t615 * t411;
t300 = t615 * t316 + t617 * t407;
t299 = t615 * t315 + t617 * t411;
t298 = t617 * t312 + t615 * t683;
t297 = t615 * t312 - t617 * t683;
t296 = t617 * t306 + t642;
t295 = t617 * t305 - t642;
t294 = t615 * t306 - t640;
t293 = t615 * t305 + t640;
t292 = t623 * t338 - t667;
t291 = t620 * t338 + t660;
t290 = t617 * t292 + t615 * t466;
t289 = t615 * t292 - t617 * t466;
t288 = t617 * t304 + t615 * t406;
t287 = t615 * t304 - t617 * t406;
t286 = -qJ(2) * t386 + t617 * t325 - t615 * t336;
t285 = -qJ(4) * t355 - t614 * t326 + t616 * t354;
t282 = -pkin(2) * t291 - pkin(3) * t337;
t281 = -pkin(1) * t425 + qJ(2) * t389 + t615 * t325 + t617 * t336;
t280 = -qJ(2) * t372 + t617 * t321 - t615 * t330;
t279 = -qJ(4) * t340 - t614 * t322 + t616 * t342;
t278 = -pkin(3) * t683 + qJ(4) * t356 + t616 * t326 + t614 * t354;
t277 = -pkin(4) * t396 + pkin(7) * t284;
t276 = -pkin(6) * t374 - t620 * t320 + t623 * t323;
t275 = -t620 * t308 + t623 * t310;
t274 = -t620 * t307 + t623 * t309;
t273 = t623 * t308 + t620 * t310;
t272 = -pkin(3) * t406 + qJ(4) * t341 + t616 * t322 + t614 * t342;
t271 = -pkin(1) * t394 + qJ(2) * t373 + t615 * t321 + t617 * t330;
t270 = t617 * t274 - t615 * t458;
t269 = t615 * t274 + t617 * t458;
t268 = -pkin(7) * t349 - t283;
t267 = t617 * t275 + t615 * t431;
t266 = t615 * t275 - t617 * t431;
t265 = -t621 * t297 + t624 * t298;
t264 = -t624 * t297 - t621 * t298;
t263 = -pkin(4) * t431 + pkin(7) * t351 + t284;
t262 = -pkin(2) * t311 - pkin(3) * t355 - pkin(4) * t419 + t319;
t261 = -pkin(6) * t291 - qJ(4) * t660 - t620 * t327;
t260 = -t621 * t289 + t624 * t290;
t259 = -t624 * t289 - t621 * t290;
t258 = -t621 * t287 + t624 * t288;
t257 = -t624 * t287 - t621 * t288;
t256 = -pkin(2) * t303 - pkin(3) * t340 - pkin(4) * t392 + t318;
t255 = -qJ(2) * t357 + t617 * t276 - t615 * t343;
t254 = -pkin(1) * t374 + qJ(2) * t358 + t615 * t276 + t617 * t343;
t253 = t616 * t284 - t675;
t252 = t614 * t284 + t672;
t251 = -pkin(2) * t273 - pkin(3) * t308 - pkin(4) * t349;
t250 = -t621 * t266 + t624 * t267;
t249 = -t624 * t266 - t621 * t267;
t248 = -pkin(6) * t311 - t620 * t278 + t623 * t285;
t247 = -pkin(6) * t303 - t620 * t272 + t623 * t279;
t246 = -qJ(4) * t308 - t614 * t263 + t616 * t268;
t245 = -qJ(2) * t289 + t617 * t261 - t615 * t282;
t244 = -pkin(3) * t431 + qJ(4) * t310 + t616 * t263 + t614 * t268;
t243 = -t620 * t252 + t623 * t253;
t242 = t623 * t252 + t620 * t253;
t241 = -pkin(1) * t291 + qJ(2) * t290 + t615 * t261 + t617 * t282;
t240 = -pkin(7) * t672 - qJ(4) * t252 - t614 * t277;
t239 = t617 * t243 + t615 * t396;
t238 = t615 * t243 - t617 * t396;
t237 = -pkin(3) * t396 - pkin(7) * t675 + qJ(4) * t253 + t616 * t277;
t236 = -qJ(2) * t297 + t617 * t248 - t615 * t262;
t235 = -pkin(1) * t311 + qJ(2) * t298 + t615 * t248 + t617 * t262;
t234 = -qJ(2) * t287 + t617 * t247 - t615 * t256;
t233 = -pkin(1) * t303 + qJ(2) * t288 + t615 * t247 + t617 * t256;
t232 = -pkin(2) * t242 - pkin(3) * t252 - pkin(4) * t283;
t231 = -pkin(6) * t273 - t620 * t244 + t623 * t246;
t230 = -t621 * t238 + t624 * t239;
t229 = -t624 * t238 - t621 * t239;
t228 = -qJ(2) * t266 + t617 * t231 - t615 * t251;
t227 = -pkin(1) * t273 + qJ(2) * t267 + t615 * t231 + t617 * t251;
t226 = -pkin(6) * t242 - t620 * t237 + t623 * t240;
t225 = -qJ(2) * t238 + t617 * t226 - t615 * t232;
t224 = -pkin(1) * t242 + qJ(2) * t239 + t615 * t226 + t617 * t232;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t612, 0, 0, 0, 0, 0, 0, t545, t546, 0, -t439, 0, 0, 0, 0, 0, 0, t394, t425, t374, t291, 0, 0, 0, 0, 0, 0, t303, t311, t273, t242; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t587, t586, 0, t543, 0, 0, 0, 0, 0, 0, t629, t538, 0, t412, 0, 0, 0, 0, 0, 0, t443, t444, t473, t352, 0, 0, 0, 0, 0, 0, t328, t334, t313, t259, 0, 0, 0, 0, 0, 0, t257, t264, t249, t229; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t586, t587, 0, t544, 0, 0, 0, 0, 0, 0, -t538, t629, 0, t413, 0, 0, 0, 0, 0, 0, t445, t446, t474, t353, 0, 0, 0, 0, 0, 0, t329, t335, t314, t260, 0, 0, 0, 0, 0, 0, t258, t265, t250, t230; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t594, -t593, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t584 - t532, -pkin(1) * t583 - t533, 0, -pkin(1) * t469, (t581 + t637) * t620, t623 * t580 + t620 * t582, t623 * t596 + t665, t658, t620 * t598 + t657, 0, pkin(1) * t499 + pkin(2) * t582 + pkin(6) * t548 - t659, pkin(1) * t500 - pkin(2) * t580 + pkin(6) * t550 + t666, pkin(1) * t541 + pkin(2) * t588 + pkin(6) * t585 + t440, pkin(1) * t414 - pkin(2) * t513 + pkin(6) * t440, t623 * t483 + t620 * t484, t623 * t434 + t620 * t436, t623 * t476 + t620 * t479, t623 * t481 + t620 * t482, t623 * t475 + t620 * t478, t623 * t505 + t620 * t506, pkin(1) * t372 - pkin(2) * t487 + pkin(6) * t395 + t623 * t377 + t620 * t405, pkin(1) * t386 - pkin(2) * t490 + pkin(6) * t428 + t623 * t382 + t620 * t416, pkin(1) * t357 - pkin(2) * t486 + pkin(6) * t376 + t623 * t320 + t620 * t323, pkin(1) * t289 - pkin(2) * t466 + pkin(6) * t292 - qJ(4) * t667 + t623 * t327, t623 * t345 + t620 * t347, t623 * t307 + t620 * t309, t623 * t359 + t620 * t361, t623 * t344 + t620 * t346, t623 * t360 + t620 * t362, t623 * t380 + t620 * t381, pkin(1) * t287 - pkin(2) * t406 + pkin(6) * t304 + t623 * t272 + t620 * t279, pkin(1) * t297 - pkin(2) * t683 + pkin(6) * t312 + t623 * t278 + t620 * t285, pkin(1) * t266 - pkin(2) * t431 + pkin(6) * t275 + t623 * t244 + t620 * t246, pkin(1) * t238 - pkin(2) * t396 + pkin(6) * t243 + t623 * t237 + t620 * t240; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t586, 0, t587, 0, t631, t567, -t544, -pkin(5) * t544, 0, 0, -t538, 0, t629, 0, t688, -t689, -t413, -pkin(5) * t413 - qJ(2) * t663 - t624 * t459, -t624 * t520 - t621 * t522, -t624 * t492 - t621 * t494, -t624 * t516 - t621 * t518, -t624 * t519 - t621 * t521, -t624 * t515 - t621 * t517, -t624 * t551 - t621 * t552, -pkin(5) * t445 - t624 * t370 - t621 * t378, -pkin(5) * t446 - t624 * t371 - t621 * t379, -pkin(5) * t474 - t624 * t417 - t621 * t418, -pkin(5) * t353 - t624 * t324 - t621 * t339, -t624 * t402 - t621 * t404, -t624 * t367 - t621 * t368, -t624 * t385 - t621 * t388, -t624 * t401 - t621 * t403, -t624 * t384 - t621 * t387, -t624 * t441 - t621 * t442, -pkin(5) * t329 - t624 * t271 - t621 * t280, -pkin(5) * t335 - t624 * t281 - t621 * t286, -pkin(5) * t314 - t624 * t254 - t621 * t255, -pkin(5) * t260 - t624 * t241 - t621 * t245, -t624 * t294 - t621 * t296, -t624 * t269 - t621 * t270, -t624 * t299 - t621 * t301, -t624 * t293 - t621 * t295, -t624 * t300 - t621 * t302, -t624 * t331 - t621 * t332, -pkin(5) * t258 - t624 * t233 - t621 * t234, -pkin(5) * t265 - t624 * t235 - t621 * t236, -pkin(5) * t250 - t624 * t227 - t621 * t228, -pkin(5) * t230 - t624 * t224 - t621 * t225; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t587, 0, -t586, 0, -t567, t631, t543, pkin(5) * t543, 0, 0, -t629, 0, -t538, 0, t689, t688, t412, pkin(5) * t412 + qJ(2) * t656 - t621 * t459, -t621 * t520 + t624 * t522, -t621 * t492 + t624 * t494, -t621 * t516 + t624 * t518, -t621 * t519 + t624 * t521, -t621 * t515 + t624 * t517, -t621 * t551 + t624 * t552, pkin(5) * t443 - t621 * t370 + t624 * t378, pkin(5) * t444 - t621 * t371 + t624 * t379, pkin(5) * t473 - t621 * t417 + t624 * t418, pkin(5) * t352 - t621 * t324 + t624 * t339, -t621 * t402 + t624 * t404, -t621 * t367 + t624 * t368, -t621 * t385 + t624 * t388, -t621 * t401 + t624 * t403, -t621 * t384 + t624 * t387, -t621 * t441 + t624 * t442, pkin(5) * t328 - t621 * t271 + t624 * t280, pkin(5) * t334 - t621 * t281 + t624 * t286, pkin(5) * t313 - t621 * t254 + t624 * t255, pkin(5) * t259 - t621 * t241 + t624 * t245, -t621 * t294 + t624 * t296, -t621 * t269 + t624 * t270, -t621 * t299 + t624 * t301, -t621 * t293 + t624 * t295, -t621 * t300 + t624 * t302, -t621 * t331 + t624 * t332, pkin(5) * t257 - t621 * t233 + t624 * t234, pkin(5) * t264 - t621 * t235 + t624 * t236, pkin(5) * t249 - t621 * t227 + t624 * t228, pkin(5) * t229 - t621 * t224 + t624 * t225;];
tauB_reg = t1;
