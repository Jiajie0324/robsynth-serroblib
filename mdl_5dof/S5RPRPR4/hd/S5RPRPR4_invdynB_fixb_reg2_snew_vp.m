% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:40
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRPR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR4_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR4_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR4_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:39:33
% EndTime: 2020-01-03 11:39:49
% DurationCPUTime: 13.97s
% Computational Cost: add. (54520->602), mult. (119643->917), div. (0->0), fcn. (80292->10), ass. (0->412)
t628 = sin(qJ(1));
t631 = cos(qJ(1));
t596 = t628 * g(2) - t631 * g(3);
t687 = qJD(1) ^ 2;
t582 = -t687 * pkin(1) - t596;
t622 = sin(pkin(8));
t624 = cos(pkin(8));
t597 = t631 * g(2) + t628 * g(3);
t634 = qJDD(1) * pkin(1) - t597;
t532 = t622 * t582 - t624 * t634;
t533 = t624 * t582 + t622 * t634;
t642 = t622 * t532 + t624 * t533;
t469 = t624 * t532 - t622 * t533;
t665 = t631 * t469;
t412 = t628 * t642 - t665;
t672 = t628 * t469;
t705 = t631 * t642 + t672;
t586 = t622 * qJDD(1) + t624 * t687;
t587 = t624 * qJDD(1) - t622 * t687;
t538 = -t631 * t586 - t628 * t587;
t619 = g(1) - qJDD(2);
t559 = qJ(2) * t586 - t624 * t619;
t636 = -qJ(2) * t587 - t622 * t619;
t704 = pkin(5) * t538 - t631 * t559 + t628 * t636;
t621 = sin(pkin(9));
t623 = cos(pkin(9));
t630 = cos(qJ(3));
t627 = sin(qJ(3));
t662 = qJD(1) * t627;
t569 = -t623 * t630 * qJD(1) + t621 * t662;
t571 = (t621 * t630 + t623 * t627) * qJD(1);
t531 = t571 * t569;
t691 = qJDD(3) - t531;
t703 = t621 * t691;
t702 = t623 * t691;
t626 = sin(qJ(5));
t629 = cos(qJ(5));
t510 = t629 * t569 + t626 * t571;
t512 = -t626 * t569 + t629 * t571;
t461 = t512 * t510;
t651 = qJDD(3) + qJDD(5);
t694 = -t461 + t651;
t701 = t626 * t694;
t700 = t629 * t694;
t692 = t628 * t586 - t631 * t587;
t699 = pkin(5) * t692 + t628 * t559 + t631 * t636;
t617 = qJD(3) + qJD(5);
t504 = t617 * t510;
t655 = qJD(1) * qJD(3);
t644 = t630 * t655;
t653 = t627 * qJDD(1);
t584 = t644 + t653;
t645 = t627 * t655;
t652 = t630 * qJDD(1);
t635 = t645 - t652;
t535 = t623 * t584 - t621 * t635;
t640 = t621 * t584 + t623 * t635;
t633 = t510 * qJD(5) - t629 * t535 + t626 * t640;
t693 = -t504 - t633;
t641 = t626 * t535 + t629 * t640;
t407 = (qJD(5) - t617) * t512 + t641;
t508 = t510 ^ 2;
t509 = t512 ^ 2;
t689 = t569 ^ 2;
t568 = t571 ^ 2;
t615 = t617 ^ 2;
t688 = t630 ^ 2;
t686 = t617 * t626;
t685 = t617 * t629;
t514 = -t687 * pkin(2) + qJDD(1) * pkin(6) + t533;
t493 = t627 * t514 + t630 * t619;
t603 = t630 * t687 * t627;
t594 = qJDD(3) + t603;
t457 = (-t584 + t644) * qJ(4) + t594 * pkin(3) - t493;
t495 = t630 * t514 - t627 * t619;
t593 = qJD(3) * pkin(3) - qJ(4) * t662;
t611 = t688 * t687;
t460 = -pkin(3) * t611 - qJ(4) * t635 - qJD(3) * t593 + t495;
t390 = 0.2e1 * qJD(4) * t571 - t623 * t457 + t621 * t460;
t661 = qJD(3) * t569;
t491 = -t535 - t661;
t365 = pkin(4) * t691 + pkin(7) * t491 - t390;
t391 = -0.2e1 * qJD(4) * t569 + t621 * t457 + t623 * t460;
t555 = qJD(3) * pkin(4) - t571 * pkin(7);
t369 = -t689 * pkin(4) - pkin(7) * t640 - qJD(3) * t555 + t391;
t318 = -t629 * t365 + t626 * t369;
t319 = t626 * t365 + t629 * t369;
t283 = -t629 * t318 + t626 * t319;
t684 = t621 * t283;
t513 = -qJDD(1) * pkin(2) - t687 * pkin(6) + t532;
t466 = t635 * pkin(3) - qJ(4) * t611 + t593 * t662 + qJDD(4) + t513;
t683 = t621 * t466;
t526 = qJDD(3) + t531;
t682 = t621 * t526;
t681 = t623 * t283;
t680 = t623 * t466;
t679 = t623 * t526;
t396 = pkin(4) * t640 - t689 * pkin(7) + t571 * t555 + t466;
t678 = t626 * t396;
t454 = t461 + t651;
t677 = t626 * t454;
t337 = -t623 * t390 + t621 * t391;
t676 = t627 * t337;
t675 = t627 * t513;
t674 = t627 * t594;
t595 = qJDD(3) - t603;
t673 = t627 * t595;
t671 = t629 * t396;
t670 = t629 * t454;
t669 = t630 * t337;
t668 = t630 * t513;
t585 = -0.2e1 * t645 + t652;
t667 = t630 * t585;
t666 = t630 * t595;
t660 = qJD(3) * t571;
t659 = qJD(3) * t621;
t658 = qJD(3) * t623;
t618 = t627 ^ 2;
t657 = t618 * t687;
t654 = t624 * qJDD(3);
t650 = t618 + t688;
t649 = t622 * t461;
t648 = t622 * t531;
t647 = t624 * t461;
t646 = t624 * t531;
t589 = -t628 * qJDD(1) - t631 * t687;
t643 = pkin(5) * t589 + t631 * g(1);
t284 = t626 * t318 + t629 * t319;
t338 = t621 * t390 + t623 * t391;
t440 = t627 * t493 + t630 * t495;
t543 = -t628 * t596 - t631 * t597;
t638 = t622 * t603;
t637 = t624 * t603;
t439 = t630 * t493 - t627 * t495;
t544 = t631 * t596 - t628 * t597;
t489 = -t640 + t660;
t632 = qJD(3) ^ 2;
t608 = t622 * qJDD(3);
t602 = -t611 - t632;
t601 = t611 - t632;
t600 = -t632 - t657;
t599 = t632 - t657;
t592 = t611 - t657;
t591 = t611 + t657;
t590 = t631 * qJDD(1) - t628 * t687;
t588 = t650 * qJDD(1);
t583 = 0.2e1 * t644 + t653;
t580 = t630 * t594;
t579 = t650 * t655;
t567 = pkin(5) * t590 + t628 * g(1);
t562 = -t568 - t632;
t561 = -t568 + t632;
t560 = -t632 + t689;
t554 = t630 * t584 - t618 * t655;
t553 = t627 * t635 - t688 * t655;
t552 = t624 * t579 + t608;
t551 = t622 * t579 - t654;
t550 = -t627 * t600 - t666;
t549 = -t627 * t599 + t580;
t548 = t630 * t602 - t674;
t547 = t630 * t601 - t673;
t546 = t630 * t600 - t673;
t545 = t627 * t602 + t580;
t542 = t624 * t588 - t622 * t591;
t541 = t622 * t588 + t624 * t591;
t536 = -t627 * t583 + t667;
t529 = -t568 + t689;
t524 = -t632 - t689;
t522 = t624 * t554 - t638;
t521 = t624 * t553 + t638;
t520 = t622 * t554 + t637;
t519 = t622 * t553 - t637;
t518 = t624 * t549 + t622 * t653;
t517 = t624 * t547 + t622 * t652;
t516 = t622 * t549 - t624 * t653;
t515 = t622 * t547 - t624 * t652;
t506 = (-t569 * t623 + t571 * t621) * qJD(3);
t505 = (-t569 * t621 - t571 * t623) * qJD(3);
t502 = t624 * t550 + t622 * t583;
t501 = t624 * t548 - t622 * t585;
t500 = t622 * t550 - t624 * t583;
t499 = t622 * t548 + t624 * t585;
t498 = -t509 + t615;
t497 = t508 - t615;
t496 = -t509 - t615;
t494 = t624 * t536 - t622 * t592;
t492 = t622 * t536 + t624 * t592;
t490 = t535 - t661;
t487 = t640 + t660;
t486 = -t568 - t689;
t484 = t623 * t535 - t571 * t659;
t483 = t621 * t535 + t571 * t658;
t482 = t569 * t658 + t621 * t640;
t481 = t569 * t659 - t623 * t640;
t480 = -t621 * t562 - t679;
t479 = -t621 * t561 + t702;
t478 = t623 * t560 - t682;
t477 = t623 * t562 - t682;
t476 = t623 * t561 + t703;
t475 = t621 * t560 + t679;
t474 = t628 * t541 - t631 * t542;
t473 = t631 * t541 + t628 * t542;
t472 = -pkin(6) * t546 + t668;
t471 = -pkin(6) * t545 + t675;
t465 = -pkin(2) * t546 + t495;
t464 = -pkin(2) * t545 + t493;
t463 = t623 * t524 - t703;
t462 = t621 * t524 + t702;
t459 = pkin(1) * t619 + qJ(2) * t642;
t458 = -t509 + t508;
t452 = -t615 - t508;
t449 = -t627 * t505 + t630 * t506;
t448 = (-t510 * t629 + t512 * t626) * t617;
t447 = (-t510 * t626 - t512 * t629) * t617;
t446 = t628 * t500 - t631 * t502;
t445 = t628 * t499 - t631 * t501;
t444 = t631 * t500 + t628 * t502;
t443 = t631 * t499 + t628 * t501;
t442 = t624 * t449 + t608;
t441 = t622 * t449 - t654;
t437 = t623 * t489 - t621 * t491;
t436 = -t623 * t487 - t621 * t490;
t435 = t621 * t489 + t623 * t491;
t434 = -t621 * t487 + t623 * t490;
t432 = -t512 * qJD(5) - t641;
t431 = -t508 - t509;
t430 = -t627 * t483 + t630 * t484;
t429 = -t627 * t481 + t630 * t482;
t428 = -t627 * t477 + t630 * t480;
t427 = -t627 * t476 + t630 * t479;
t426 = -t627 * t475 + t630 * t478;
t425 = t630 * t477 + t627 * t480;
t424 = t629 * t497 - t677;
t423 = -t626 * t498 + t700;
t422 = t626 * t497 + t670;
t421 = t629 * t498 + t701;
t420 = -t626 * t496 - t670;
t419 = t629 * t496 - t677;
t418 = -qJ(2) * t541 + t624 * t439;
t417 = qJ(2) * t542 + t622 * t439;
t416 = -qJ(4) * t477 + t680;
t415 = t624 * t440 + t622 * t513;
t414 = t622 * t440 - t624 * t513;
t411 = -t504 + t633;
t406 = (qJD(5) + t617) * t512 + t641;
t405 = -qJ(4) * t462 + t683;
t404 = t624 * t430 + t648;
t403 = t624 * t429 - t648;
t402 = t622 * t430 - t646;
t401 = t622 * t429 + t646;
t400 = -t512 * t686 - t629 * t633;
t399 = t512 * t685 - t626 * t633;
t398 = -t626 * t432 + t510 * t685;
t397 = t629 * t432 + t510 * t686;
t395 = -t627 * t462 + t630 * t463;
t394 = t630 * t462 + t627 * t463;
t393 = t629 * t452 - t701;
t392 = t626 * t452 + t700;
t389 = t624 * t428 + t622 * t490;
t388 = t624 * t427 - t622 * t491;
t387 = t624 * t426 + t489 * t622;
t386 = t622 * t428 - t624 * t490;
t385 = t622 * t427 + t624 * t491;
t384 = t622 * t426 - t489 * t624;
t382 = -pkin(3) * t490 + qJ(4) * t480 + t683;
t381 = -t621 * t447 + t623 * t448;
t380 = t623 * t447 + t621 * t448;
t379 = -qJ(2) * t500 - t622 * t465 + t624 * t472;
t378 = -qJ(2) * t499 - t622 * t464 + t624 * t471;
t377 = -pkin(3) * t487 + qJ(4) * t463 - t680;
t376 = -t627 * t435 + t630 * t437;
t375 = -t627 * t434 + t630 * t436;
t374 = t630 * t435 + t627 * t437;
t373 = t624 * t395 + t622 * t487;
t372 = t622 * t395 - t624 * t487;
t371 = -pkin(1) * t546 + qJ(2) * t502 + t624 * t465 + t622 * t472;
t370 = -pkin(1) * t545 + qJ(2) * t501 + t624 * t464 + t622 * t471;
t368 = t624 * t375 - t622 * t529;
t367 = t622 * t375 + t624 * t529;
t362 = -t621 * t422 + t623 * t424;
t361 = -t621 * t421 + t623 * t423;
t360 = t623 * t422 + t621 * t424;
t359 = t623 * t421 + t621 * t423;
t358 = t624 * t376 + t622 * t486;
t357 = t622 * t376 - t624 * t486;
t356 = -t621 * t419 + t623 * t420;
t355 = t623 * t419 + t621 * t420;
t354 = -pkin(7) * t419 + t671;
t353 = t628 * t414 - t631 * t415;
t352 = t631 * t414 + t628 * t415;
t351 = -t407 * t629 - t626 * t411;
t350 = -t629 * t406 - t626 * t693;
t349 = -t407 * t626 + t629 * t411;
t348 = -t626 * t406 + t629 * t693;
t347 = -t621 * t399 + t623 * t400;
t346 = -t621 * t397 + t623 * t398;
t345 = t623 * t399 + t621 * t400;
t344 = t623 * t397 + t621 * t398;
t343 = -pkin(2) * t374 - pkin(3) * t435;
t342 = -pkin(7) * t392 + t678;
t341 = -t621 * t392 + t623 * t393;
t340 = t623 * t392 + t621 * t393;
t339 = -qJ(2) * t414 - (pkin(2) * t622 - pkin(6) * t624) * t439;
t336 = -pkin(2) * t425 - pkin(3) * t477 + t391;
t335 = t628 * t386 - t631 * t389;
t334 = t631 * t386 + t628 * t389;
t333 = -t627 * t380 + t630 * t381;
t332 = t624 * t333 + t622 * t651;
t331 = t622 * t333 - t624 * t651;
t330 = -pkin(2) * t394 - pkin(3) * t462 + t390;
t329 = t628 * t372 - t631 * t373;
t328 = t631 * t372 + t628 * t373;
t327 = -pkin(3) * t466 + qJ(4) * t338;
t326 = -pkin(4) * t693 + pkin(7) * t420 + t678;
t325 = -pkin(6) * t425 - t627 * t382 + t630 * t416;
t324 = qJ(2) * t415 - (-pkin(2) * t624 - pkin(6) * t622 - pkin(1)) * t439;
t323 = -qJ(4) * t435 - t337;
t322 = -pkin(4) * t406 + pkin(7) * t393 - t671;
t321 = -pkin(6) * t394 - t627 * t377 + t630 * t405;
t320 = -pkin(3) * t486 + qJ(4) * t437 + t338;
t316 = -t627 * t360 + t630 * t362;
t315 = -t627 * t359 + t630 * t361;
t314 = t628 * t357 - t631 * t358;
t313 = t631 * t357 + t628 * t358;
t312 = -t627 * t355 + t630 * t356;
t311 = t630 * t355 + t627 * t356;
t310 = -t621 * t349 + t623 * t351;
t309 = -t621 * t348 + t623 * t350;
t308 = t623 * t349 + t621 * t351;
t307 = t623 * t348 + t621 * t350;
t306 = -t627 * t345 + t630 * t347;
t305 = -t627 * t344 + t630 * t346;
t304 = -t627 * t340 + t630 * t341;
t303 = t630 * t340 + t627 * t341;
t302 = t624 * t316 - t622 * t407;
t301 = t624 * t315 - t622 * t411;
t300 = t622 * t316 + t624 * t407;
t299 = t622 * t315 + t624 * t411;
t298 = t624 * t312 + t622 * t693;
t297 = t622 * t312 - t624 * t693;
t296 = t624 * t306 + t649;
t295 = t624 * t305 - t649;
t294 = t622 * t306 - t647;
t293 = t622 * t305 + t647;
t292 = t630 * t338 - t676;
t291 = t627 * t338 + t669;
t290 = t624 * t292 + t622 * t466;
t289 = t622 * t292 - t624 * t466;
t288 = t624 * t304 + t622 * t406;
t287 = t622 * t304 - t624 * t406;
t286 = -qJ(2) * t386 + t624 * t325 - t622 * t336;
t285 = -qJ(4) * t355 - t621 * t326 + t623 * t354;
t282 = -pkin(2) * t291 - pkin(3) * t337;
t281 = -pkin(1) * t425 + qJ(2) * t389 + t622 * t325 + t624 * t336;
t280 = -qJ(2) * t372 + t624 * t321 - t622 * t330;
t279 = -qJ(4) * t340 - t621 * t322 + t623 * t342;
t278 = -pkin(3) * t693 + qJ(4) * t356 + t623 * t326 + t621 * t354;
t277 = -pkin(4) * t396 + pkin(7) * t284;
t276 = -pkin(6) * t374 - t627 * t320 + t630 * t323;
t275 = -t627 * t308 + t630 * t310;
t274 = -t627 * t307 + t630 * t309;
t273 = t630 * t308 + t627 * t310;
t272 = -pkin(3) * t406 + qJ(4) * t341 + t623 * t322 + t621 * t342;
t271 = -pkin(1) * t394 + qJ(2) * t373 + t622 * t321 + t624 * t330;
t270 = t624 * t274 - t622 * t458;
t269 = t622 * t274 + t624 * t458;
t268 = -pkin(7) * t349 - t283;
t267 = t624 * t275 + t622 * t431;
t266 = t622 * t275 - t624 * t431;
t265 = t628 * t297 - t631 * t298;
t264 = t631 * t297 + t628 * t298;
t263 = -pkin(4) * t431 + pkin(7) * t351 + t284;
t262 = -pkin(2) * t311 - pkin(3) * t355 - pkin(4) * t419 + t319;
t261 = -pkin(6) * t291 - qJ(4) * t669 - t627 * t327;
t260 = t628 * t289 - t631 * t290;
t259 = t631 * t289 + t628 * t290;
t258 = t628 * t287 - t631 * t288;
t257 = t631 * t287 + t628 * t288;
t256 = -pkin(2) * t303 - pkin(3) * t340 - pkin(4) * t392 + t318;
t255 = -qJ(2) * t357 + t624 * t276 - t622 * t343;
t254 = -pkin(1) * t374 + qJ(2) * t358 + t622 * t276 + t624 * t343;
t253 = t623 * t284 - t684;
t252 = t621 * t284 + t681;
t251 = -pkin(2) * t273 - pkin(3) * t308 - pkin(4) * t349;
t250 = t628 * t266 - t631 * t267;
t249 = t631 * t266 + t628 * t267;
t248 = -pkin(6) * t311 - t627 * t278 + t630 * t285;
t247 = -pkin(6) * t303 - t627 * t272 + t630 * t279;
t246 = -qJ(4) * t308 - t621 * t263 + t623 * t268;
t245 = -qJ(2) * t289 + t624 * t261 - t622 * t282;
t244 = -pkin(3) * t431 + qJ(4) * t310 + t623 * t263 + t621 * t268;
t243 = -t627 * t252 + t630 * t253;
t242 = t630 * t252 + t627 * t253;
t241 = -pkin(1) * t291 + qJ(2) * t290 + t622 * t261 + t624 * t282;
t240 = -pkin(7) * t681 - qJ(4) * t252 - t621 * t277;
t239 = t624 * t243 + t622 * t396;
t238 = t622 * t243 - t624 * t396;
t237 = -pkin(3) * t396 - pkin(7) * t684 + qJ(4) * t253 + t623 * t277;
t236 = -qJ(2) * t297 + t624 * t248 - t622 * t262;
t235 = -pkin(1) * t311 + qJ(2) * t298 + t622 * t248 + t624 * t262;
t234 = -qJ(2) * t287 + t624 * t247 - t622 * t256;
t233 = -pkin(1) * t303 + qJ(2) * t288 + t622 * t247 + t624 * t256;
t232 = -pkin(2) * t242 - pkin(3) * t252 - pkin(4) * t283;
t231 = -pkin(6) * t273 - t627 * t244 + t630 * t246;
t230 = t628 * t238 - t631 * t239;
t229 = t631 * t238 + t628 * t239;
t228 = -qJ(2) * t266 + t624 * t231 - t622 * t251;
t227 = -pkin(1) * t273 + qJ(2) * t267 + t622 * t231 + t624 * t251;
t226 = -pkin(6) * t242 - t627 * t237 + t630 * t240;
t225 = -qJ(2) * t238 + t624 * t226 - t622 * t232;
t224 = -pkin(1) * t242 + qJ(2) * t239 + t622 * t226 + t624 * t232;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t619, 0, 0, 0, 0, 0, 0, t545, t546, 0, -t439, 0, 0, 0, 0, 0, 0, t394, t425, t374, t291, 0, 0, 0, 0, 0, 0, t303, t311, t273, t242; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t590, t589, 0, t543, 0, 0, 0, 0, 0, 0, -t692, t538, 0, t412, 0, 0, 0, 0, 0, 0, t443, t444, t473, t352, 0, 0, 0, 0, 0, 0, t328, t334, t313, t259, 0, 0, 0, 0, 0, 0, t257, t264, t249, t229; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t589, t590, 0, t544, 0, 0, 0, 0, 0, 0, -t538, -t692, 0, -t705, 0, 0, 0, 0, 0, 0, t445, t446, t474, t353, 0, 0, 0, 0, 0, 0, t329, t335, t314, t260, 0, 0, 0, 0, 0, 0, t258, t265, t250, t230; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t597, t596, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t587 - t532, -pkin(1) * t586 - t533, 0, -pkin(1) * t469, (t584 + t644) * t627, t630 * t583 + t627 * t585, t630 * t599 + t674, t667, t627 * t601 + t666, 0, pkin(1) * t499 + pkin(2) * t585 + pkin(6) * t548 - t668, pkin(1) * t500 - pkin(2) * t583 + pkin(6) * t550 + t675, pkin(1) * t541 + pkin(2) * t591 + pkin(6) * t588 + t440, pkin(1) * t414 - pkin(2) * t513 + pkin(6) * t440, t630 * t483 + t627 * t484, t630 * t434 + t627 * t436, t630 * t476 + t627 * t479, t630 * t481 + t627 * t482, t630 * t475 + t627 * t478, t630 * t505 + t627 * t506, pkin(1) * t372 - pkin(2) * t487 + pkin(6) * t395 + t630 * t377 + t627 * t405, pkin(1) * t386 - pkin(2) * t490 + pkin(6) * t428 + t630 * t382 + t627 * t416, pkin(1) * t357 - pkin(2) * t486 + pkin(6) * t376 + t630 * t320 + t627 * t323, pkin(1) * t289 - pkin(2) * t466 + pkin(6) * t292 - qJ(4) * t676 + t630 * t327, t630 * t345 + t627 * t347, t630 * t307 + t627 * t309, t630 * t359 + t627 * t361, t630 * t344 + t627 * t346, t630 * t360 + t627 * t362, t630 * t380 + t627 * t381, pkin(1) * t287 - pkin(2) * t406 + pkin(6) * t304 + t630 * t272 + t627 * t279, pkin(1) * t297 - pkin(2) * t693 + pkin(6) * t312 + t630 * t278 + t627 * t285, pkin(1) * t266 - pkin(2) * t431 + pkin(6) * t275 + t630 * t244 + t627 * t246, pkin(1) * t238 - pkin(2) * t396 + pkin(6) * t243 + t630 * t237 + t627 * t240; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t589, 0, t590, 0, t643, -t567, -t544, -pkin(5) * t544, 0, 0, -t538, 0, -t692, 0, t704, t699, t705, pkin(5) * t705 + qJ(2) * t672 + t631 * t459, t631 * t520 + t628 * t522, t631 * t492 + t628 * t494, t631 * t516 + t628 * t518, t631 * t519 + t628 * t521, t631 * t515 + t628 * t517, t631 * t551 + t628 * t552, -pkin(5) * t445 + t631 * t370 + t628 * t378, -pkin(5) * t446 + t631 * t371 + t628 * t379, -pkin(5) * t474 + t631 * t417 + t628 * t418, -pkin(5) * t353 + t631 * t324 + t628 * t339, t631 * t402 + t628 * t404, t631 * t367 + t628 * t368, t631 * t385 + t628 * t388, t631 * t401 + t628 * t403, t631 * t384 + t628 * t387, t631 * t441 + t628 * t442, -pkin(5) * t329 + t631 * t271 + t628 * t280, -pkin(5) * t335 + t631 * t281 + t628 * t286, -pkin(5) * t314 + t631 * t254 + t628 * t255, -pkin(5) * t260 + t631 * t241 + t628 * t245, t631 * t294 + t628 * t296, t631 * t269 + t628 * t270, t631 * t299 + t628 * t301, t631 * t293 + t628 * t295, t631 * t300 + t628 * t302, t631 * t331 + t628 * t332, -pkin(5) * t258 + t631 * t233 + t628 * t234, -pkin(5) * t265 + t631 * t235 + t628 * t236, -pkin(5) * t250 + t631 * t227 + t628 * t228, -pkin(5) * t230 + t631 * t224 + t628 * t225; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t590, 0, -t589, 0, t567, t643, t543, pkin(5) * t543, 0, 0, t692, 0, -t538, 0, -t699, t704, t412, pkin(5) * t412 - qJ(2) * t665 + t628 * t459, t628 * t520 - t631 * t522, t628 * t492 - t631 * t494, t628 * t516 - t631 * t518, t628 * t519 - t631 * t521, t628 * t515 - t631 * t517, t628 * t551 - t631 * t552, pkin(5) * t443 + t628 * t370 - t631 * t378, pkin(5) * t444 + t628 * t371 - t631 * t379, pkin(5) * t473 + t628 * t417 - t631 * t418, pkin(5) * t352 + t628 * t324 - t631 * t339, t628 * t402 - t631 * t404, t628 * t367 - t631 * t368, t628 * t385 - t631 * t388, t628 * t401 - t631 * t403, t628 * t384 - t631 * t387, t628 * t441 - t631 * t442, pkin(5) * t328 + t628 * t271 - t631 * t280, pkin(5) * t334 + t628 * t281 - t631 * t286, pkin(5) * t313 + t628 * t254 - t631 * t255, pkin(5) * t259 + t628 * t241 - t631 * t245, t628 * t294 - t631 * t296, t628 * t269 - t631 * t270, t628 * t299 - t631 * t301, t628 * t293 - t631 * t295, t628 * t300 - t631 * t302, t628 * t331 - t631 * t332, pkin(5) * t257 + t628 * t233 - t631 * t234, pkin(5) * t264 + t628 * t235 - t631 * t236, pkin(5) * t249 + t628 * t227 - t631 * t228, pkin(5) * t229 + t628 * t224 - t631 * t225;];
tauB_reg = t1;
