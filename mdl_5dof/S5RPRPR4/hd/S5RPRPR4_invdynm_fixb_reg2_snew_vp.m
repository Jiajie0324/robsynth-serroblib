% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRPR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:54
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRPR4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR4_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR4_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR4_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR4_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:54:23
% EndTime: 2019-12-05 17:54:43
% DurationCPUTime: 20.66s
% Computational Cost: add. (92771->650), mult. (203831->922), div. (0->0), fcn. (136613->10), ass. (0->450)
t1130 = sin(pkin(9));
t1132 = cos(pkin(9));
t1136 = sin(qJ(3));
t1139 = cos(qJ(3));
t1083 = (t1130 * t1139 + t1132 * t1136) * qJD(1);
t1200 = qJD(1) * t1139;
t1118 = qJD(3) * t1200;
t1181 = t1136 * qJDD(1);
t1094 = t1118 + t1181;
t1223 = qJD(1) ^ 2;
t1114 = t1139 * t1223 * t1136;
t1105 = qJDD(3) + t1114;
t1137 = sin(qJ(1));
t1140 = cos(qJ(1));
t1107 = g(2) * t1137 - g(3) * t1140;
t1091 = -pkin(1) * t1223 + t1107;
t1131 = sin(pkin(8));
t1133 = cos(pkin(8));
t1108 = g(2) * t1140 + g(3) * t1137;
t1143 = qJDD(1) * pkin(1) + t1108;
t1042 = t1133 * t1091 + t1131 * t1143;
t1023 = -pkin(2) * t1223 + qJDD(1) * pkin(6) + t1042;
t1128 = g(1) - qJDD(2);
t997 = t1136 * t1023 + t1128 * t1139;
t957 = (-t1094 + t1118) * qJ(4) + t1105 * pkin(3) - t997;
t1201 = qJD(1) * t1136;
t1104 = qJD(3) * pkin(3) - qJ(4) * t1201;
t1221 = t1139 ^ 2;
t1122 = t1221 * t1223;
t1172 = qJD(3) * t1201;
t1180 = t1139 * qJDD(1);
t1145 = -t1172 + t1180;
t999 = t1023 * t1139 - t1128 * t1136;
t960 = -pkin(3) * t1122 + qJ(4) * t1145 - qJD(3) * t1104 + t999;
t1152 = -0.2e1 * qJD(4) * t1083 - t1130 * t960 + t1132 * t957;
t1141 = qJD(3) ^ 2;
t1082 = t1130 * t1201 - t1132 * t1200;
t1222 = t1082 ^ 2;
t1033 = -t1141 - t1222;
t1040 = t1083 * t1082;
t1225 = qJDD(3) - t1040;
t1235 = t1132 * t1225;
t962 = t1033 * t1130 + t1235;
t1239 = pkin(3) * t962 + t1152;
t1041 = t1091 * t1131 - t1133 * t1143;
t1161 = t1041 * t1131 + t1042 * t1133;
t971 = t1041 * t1133 - t1042 * t1131;
t1204 = t1140 * t971;
t1238 = -t1137 * t1161 + t1204;
t1208 = t1137 * t971;
t1237 = -t1140 * t1161 - t1208;
t1236 = t1130 * t1225;
t1135 = sin(qJ(5));
t1125 = qJDD(3) + qJDD(5);
t1138 = cos(qJ(5));
t1019 = t1082 * t1138 + t1083 * t1135;
t1021 = -t1082 * t1135 + t1083 * t1138;
t961 = t1021 * t1019;
t1229 = -t961 + t1125;
t1234 = t1135 * t1229;
t1233 = t1138 * t1229;
t1097 = qJDD(1) * t1131 + t1133 * t1223;
t1098 = qJDD(1) * t1133 - t1131 * t1223;
t1046 = t1097 * t1137 - t1098 * t1140;
t1070 = qJ(2) * t1097 - t1128 * t1133;
t1151 = -qJ(2) * t1098 - t1128 * t1131;
t1232 = pkin(5) * t1046 + t1137 * t1070 + t1140 * t1151;
t1150 = t1097 * t1140 + t1098 * t1137;
t1231 = pkin(5) * t1150 + t1140 * t1070 - t1137 * t1151;
t943 = t1136 * t997 + t1139 * t999;
t1126 = qJD(3) + qJD(5);
t1010 = t1126 * t1019;
t1043 = t1094 * t1132 + t1130 * t1145;
t1159 = t1094 * t1130 - t1132 * t1145;
t935 = -qJD(5) * t1019 + t1043 * t1138 - t1135 * t1159;
t1230 = -t1010 + t935;
t1078 = qJD(3) * t1082;
t995 = t1078 + t1043;
t1160 = t1135 * t1043 + t1138 * t1159;
t901 = (qJD(5) - t1126) * t1021 + t1160;
t1016 = t1019 ^ 2;
t1017 = t1021 ^ 2;
t1081 = t1083 ^ 2;
t1124 = t1126 ^ 2;
t1198 = qJD(4) * t1082;
t1075 = -0.2e1 * t1198;
t1216 = t1130 * t957 + t1132 * t960;
t878 = t1075 + t1216;
t822 = t1130 * t878 + t1132 * t1152;
t1220 = pkin(3) * t822;
t1199 = qJD(3) * t1083;
t993 = -t1159 + t1199;
t937 = t1130 * t993 - t1132 * t995;
t1219 = pkin(3) * t937;
t849 = pkin(4) * t1225 - pkin(7) * t995 + t1152;
t1066 = qJD(3) * pkin(4) - pkin(7) * t1083;
t852 = -pkin(4) * t1222 - pkin(7) * t1159 - qJD(3) * t1066 + t878;
t804 = t1135 * t852 - t1138 * t849;
t805 = t1135 * t849 + t1138 * t852;
t760 = t1135 * t805 - t1138 * t804;
t1215 = t1130 * t760;
t1022 = -qJDD(1) * pkin(2) - pkin(6) * t1223 + t1041;
t968 = -pkin(3) * t1145 - qJ(4) * t1122 + t1104 * t1201 + qJDD(4) + t1022;
t1214 = t1130 * t968;
t1213 = t1132 * t760;
t1212 = t1132 * t968;
t886 = pkin(4) * t1159 - pkin(7) * t1222 + t1066 * t1083 + t968;
t1211 = t1135 * t886;
t954 = t961 + t1125;
t1210 = t1135 * t954;
t1209 = t1136 * t822;
t1207 = t1138 * t886;
t1206 = t1138 * t954;
t1205 = t1139 * t822;
t1203 = -pkin(2) * t1022 + pkin(6) * t943;
t1202 = qJD(1) * qJD(3);
t1196 = t1082 * t1130;
t1195 = t1082 * t1132;
t1194 = t1083 * t1130;
t1193 = t1083 * t1132;
t1192 = t1126 * t1021;
t1191 = t1126 * t1135;
t1190 = t1126 * t1138;
t1127 = t1136 ^ 2;
t1189 = t1127 * t1223;
t1035 = qJDD(3) + t1040;
t1188 = t1130 * t1035;
t1187 = t1132 * t1035;
t1013 = t1136 * t1022;
t1186 = t1136 * t1105;
t1106 = qJDD(3) - t1114;
t1185 = t1136 * t1106;
t1014 = t1139 * t1022;
t1095 = -0.2e1 * t1172 + t1180;
t1052 = t1139 * t1095;
t1184 = t1139 * t1106;
t1182 = t1133 * qJDD(3);
t1179 = t1127 + t1221;
t761 = t1135 * t804 + t1138 * t805;
t728 = t1130 * t761 + t1213;
t759 = pkin(4) * t760;
t1178 = pkin(3) * t728 + t759;
t905 = t1010 + t935;
t835 = -t1135 * t901 - t1138 * t905;
t837 = t1135 * t905 - t1138 * t901;
t792 = t1130 * t837 + t1132 * t835;
t833 = pkin(4) * t835;
t1177 = pkin(3) * t792 + t833;
t1176 = t1131 * t961;
t1175 = t1131 * t1040;
t1174 = t1133 * t961;
t1173 = t1133 * t1040;
t1111 = -t1141 - t1189;
t1061 = -t1111 * t1136 - t1184;
t1093 = 0.2e1 * t1118 + t1181;
t1171 = -pkin(2) * t1093 + pkin(6) * t1061 + t1013;
t1113 = -t1122 - t1141;
t1059 = t1113 * t1139 - t1186;
t1170 = pkin(2) * t1095 + pkin(6) * t1059 - t1014;
t823 = -t1130 * t1152 + t1132 * t878;
t729 = t1132 * t761 - t1215;
t751 = -pkin(4) * t886 + pkin(7) * t761;
t708 = -pkin(3) * t886 - pkin(7) * t1215 + qJ(4) * t729 + t1132 * t751;
t712 = -pkin(7) * t1213 - qJ(4) * t728 - t1130 * t751;
t716 = -t1136 * t728 + t1139 * t729;
t1168 = -pkin(2) * t886 + pkin(6) * t716 + t1136 * t712 + t1139 * t708;
t933 = -t1016 - t1017;
t736 = -pkin(4) * t933 + pkin(7) * t837 + t761;
t739 = -pkin(7) * t835 - t760;
t794 = -t1130 * t835 + t1132 * t837;
t720 = -pkin(3) * t933 + qJ(4) * t794 + t1130 * t739 + t1132 * t736;
t723 = -qJ(4) * t792 - t1130 * t736 + t1132 * t739;
t749 = -t1136 * t792 + t1139 * t794;
t1167 = -pkin(2) * t933 + pkin(6) * t749 + t1136 * t723 + t1139 * t720;
t952 = -t1124 - t1016;
t881 = t1138 * t952 - t1234;
t900 = (qJD(5) + t1126) * t1021 + t1160;
t808 = -pkin(4) * t900 + pkin(7) * t881 - t1207;
t880 = t1135 * t952 + t1233;
t826 = -t1130 * t880 + t1132 * t881;
t827 = -pkin(7) * t880 + t1211;
t744 = -pkin(3) * t900 + qJ(4) * t826 + t1130 * t827 + t1132 * t808;
t825 = t1130 * t881 + t1132 * t880;
t755 = -qJ(4) * t825 - t1130 * t808 + t1132 * t827;
t785 = -t1136 * t825 + t1139 * t826;
t1166 = -pkin(2) * t900 + pkin(6) * t785 + t1136 * t755 + t1139 * t744;
t1000 = -t1017 - t1124;
t914 = -t1000 * t1135 - t1206;
t813 = -pkin(4) * t1230 + pkin(7) * t914 + t1211;
t913 = t1000 * t1138 - t1210;
t838 = -pkin(7) * t913 + t1207;
t841 = -t1130 * t913 + t1132 * t914;
t753 = -pkin(3) * t1230 + qJ(4) * t841 + t1130 * t838 + t1132 * t813;
t840 = t1130 * t914 + t1132 * t913;
t763 = -qJ(4) * t840 - t1130 * t813 + t1132 * t838;
t797 = -t1136 * t840 + t1139 * t841;
t1165 = -pkin(2) * t1230 + pkin(6) * t797 + t1136 * t763 + t1139 * t753;
t939 = t1130 * t995 + t1132 * t993;
t990 = -t1081 - t1222;
t806 = -pkin(3) * t990 + qJ(4) * t939 + t823;
t810 = -qJ(4) * t937 - t822;
t861 = -t1136 * t937 + t1139 * t939;
t1164 = -pkin(2) * t990 + pkin(6) * t861 + t1136 * t810 + t1139 * t806;
t963 = t1033 * t1132 - t1236;
t991 = t1159 + t1199;
t863 = -pkin(3) * t991 + qJ(4) * t963 - t1212;
t884 = -t1136 * t962 + t1139 * t963;
t897 = -qJ(4) * t962 + t1214;
t1163 = -pkin(2) * t991 + pkin(6) * t884 + t1136 * t897 + t1139 * t863;
t1073 = -t1081 - t1141;
t980 = -t1073 * t1130 - t1187;
t994 = -t1078 + t1043;
t869 = -pkin(3) * t994 + qJ(4) * t980 + t1214;
t977 = t1073 * t1132 - t1188;
t909 = -qJ(4) * t977 + t1212;
t925 = -t1136 * t977 + t1139 * t980;
t1162 = -pkin(2) * t994 + pkin(6) * t925 + t1136 * t909 + t1139 * t869;
t1099 = t1179 * qJDD(1);
t1102 = t1122 + t1189;
t1158 = pkin(2) * t1102 + pkin(6) * t1099 + t943;
t1157 = pkin(3) * t977 - t1216;
t1156 = t1131 * t1114;
t1155 = t1133 * t1114;
t1154 = pkin(4) * t880 - t804;
t1100 = qJDD(1) * t1137 + t1140 * t1223;
t1153 = pkin(5) * t1100 - g(1) * t1140;
t941 = t1136 * t999 - t1139 * t997;
t1149 = t1107 * t1140 - t1108 * t1137;
t1148 = -t1107 * t1137 - t1108 * t1140;
t1147 = pkin(4) * t913 - t805;
t772 = t1139 * t823 - t1209;
t815 = -pkin(3) * t968 + qJ(4) * t823;
t1146 = -pkin(2) * t968 + pkin(6) * t772 - qJ(4) * t1209 + t1139 * t815;
t1144 = pkin(3) * t825 + t1154;
t1142 = pkin(3) * t840 + t1147;
t1120 = t1131 * qJDD(3);
t1112 = t1122 - t1141;
t1110 = t1141 - t1189;
t1103 = -t1122 + t1189;
t1101 = -qJDD(1) * t1140 + t1137 * t1223;
t1090 = t1139 * t1105;
t1089 = t1179 * t1202;
t1080 = -pkin(5) * t1101 + g(1) * t1137;
t1072 = -t1081 + t1141;
t1071 = -t1141 + t1222;
t1065 = t1094 * t1139 - t1127 * t1202;
t1064 = -t1136 * t1145 - t1202 * t1221;
t1063 = t1089 * t1133 + t1120;
t1062 = t1089 * t1131 - t1182;
t1060 = -t1110 * t1136 + t1090;
t1058 = t1112 * t1139 - t1185;
t1057 = t1111 * t1139 - t1185;
t1056 = t1110 * t1139 + t1186;
t1055 = t1113 * t1136 + t1090;
t1054 = t1112 * t1136 + t1184;
t1053 = (t1094 + t1118) * t1136;
t1049 = t1099 * t1133 - t1102 * t1131;
t1048 = t1099 * t1131 + t1102 * t1133;
t1045 = -t1093 * t1136 + t1052;
t1044 = t1093 * t1139 + t1095 * t1136;
t1038 = t1081 - t1222;
t1031 = t1065 * t1133 - t1156;
t1030 = t1064 * t1133 + t1156;
t1029 = t1065 * t1131 + t1155;
t1028 = t1064 * t1131 - t1155;
t1027 = t1060 * t1133 + t1131 * t1181;
t1026 = t1058 * t1133 + t1131 * t1180;
t1025 = t1060 * t1131 - t1133 * t1181;
t1024 = t1058 * t1131 - t1133 * t1180;
t1012 = (t1194 - t1195) * qJD(3);
t1011 = (-t1193 - t1196) * qJD(3);
t1008 = t1061 * t1133 + t1093 * t1131;
t1007 = t1059 * t1133 - t1095 * t1131;
t1006 = t1061 * t1131 - t1093 * t1133;
t1005 = t1059 * t1131 + t1095 * t1133;
t1004 = -pkin(1) * t1097 - t1042;
t1003 = pkin(1) * t1098 - t1041;
t1002 = -t1017 + t1124;
t1001 = t1016 - t1124;
t998 = t1045 * t1133 + t1103 * t1131;
t996 = t1045 * t1131 - t1103 * t1133;
t984 = -qJD(3) * t1194 + t1043 * t1132;
t983 = qJD(3) * t1193 + t1043 * t1130;
t982 = qJD(3) * t1195 + t1130 * t1159;
t981 = qJD(3) * t1196 - t1132 * t1159;
t979 = -t1072 * t1130 + t1235;
t978 = t1071 * t1132 - t1188;
t976 = t1072 * t1132 + t1236;
t975 = t1071 * t1130 + t1187;
t974 = -pkin(6) * t1057 + t1014;
t973 = -pkin(6) * t1055 + t1013;
t967 = pkin(1) * t971;
t966 = -pkin(2) * t1057 + t999;
t965 = -pkin(2) * t1055 + t997;
t959 = pkin(1) * t1128 + qJ(2) * t1161;
t958 = t1017 - t1016;
t949 = -t1011 * t1136 + t1012 * t1139;
t948 = t1011 * t1139 + t1012 * t1136;
t947 = (-t1019 * t1138 + t1021 * t1135) * t1126;
t946 = (-t1019 * t1135 - t1021 * t1138) * t1126;
t945 = t1133 * t949 + t1120;
t944 = t1131 * t949 - t1182;
t938 = -t1130 * t994 - t1132 * t991;
t936 = -t1130 * t991 + t1132 * t994;
t934 = -qJD(5) * t1021 - t1160;
t932 = -t1136 * t983 + t1139 * t984;
t931 = -t1136 * t981 + t1139 * t982;
t930 = t1136 * t984 + t1139 * t983;
t929 = t1136 * t982 + t1139 * t981;
t927 = pkin(1) * t1005 + t1170;
t926 = pkin(1) * t1006 + t1171;
t924 = -t1136 * t976 + t1139 * t979;
t923 = -t1136 * t975 + t1139 * t978;
t922 = t1136 * t980 + t1139 * t977;
t921 = t1136 * t979 + t1139 * t976;
t920 = t1136 * t978 + t1139 * t975;
t918 = t1001 * t1138 - t1210;
t917 = -t1002 * t1135 + t1233;
t916 = t1001 * t1135 + t1206;
t915 = t1002 * t1138 + t1234;
t912 = -qJ(2) * t1048 - t1133 * t941;
t911 = qJ(2) * t1049 - t1131 * t941;
t907 = t1022 * t1131 + t1133 * t943;
t906 = -t1022 * t1133 + t1131 * t943;
t896 = pkin(1) * t1048 + t1158;
t895 = t1133 * t932 + t1175;
t894 = t1133 * t931 - t1175;
t893 = t1131 * t932 - t1173;
t892 = t1131 * t931 + t1173;
t890 = -t1021 * t1191 + t1138 * t935;
t889 = t1021 * t1190 + t1135 * t935;
t888 = t1019 * t1190 - t1135 * t934;
t887 = t1019 * t1191 + t1138 * t934;
t883 = t1136 * t963 + t1139 * t962;
t876 = t1131 * t994 + t1133 * t925;
t875 = t1131 * t995 + t1133 * t924;
t874 = t1131 * t993 + t1133 * t923;
t873 = t1131 * t925 - t1133 * t994;
t872 = t1131 * t924 - t1133 * t995;
t871 = t1131 * t923 - t1133 * t993;
t868 = -t1130 * t946 + t1132 * t947;
t867 = t1130 * t947 + t1132 * t946;
t865 = -qJ(2) * t1006 - t1131 * t966 + t1133 * t974;
t864 = -qJ(2) * t1005 - t1131 * t965 + t1133 * t973;
t860 = -t1136 * t936 + t1139 * t938;
t859 = t1136 * t939 + t1139 * t937;
t858 = t1136 * t938 + t1139 * t936;
t857 = t1131 * t991 + t1133 * t884;
t856 = t1131 * t884 - t1133 * t991;
t854 = -pkin(1) * t1057 + qJ(2) * t1008 + t1131 * t974 + t1133 * t966;
t853 = -pkin(1) * t1055 + qJ(2) * t1007 + t1131 * t973 + t1133 * t965;
t851 = t1038 * t1131 + t1133 * t860;
t850 = -t1038 * t1133 + t1131 * t860;
t847 = -t1130 * t916 + t1132 * t918;
t846 = -t1130 * t915 + t1132 * t917;
t845 = t1130 * t918 + t1132 * t916;
t844 = t1130 * t917 + t1132 * t915;
t843 = t1131 * t990 + t1133 * t861;
t842 = t1131 * t861 - t1133 * t990;
t839 = pkin(1) * t906 + t1203;
t836 = -t1135 * t1230 - t1138 * t900;
t834 = -t1135 * t900 + t1138 * t1230;
t832 = -t1130 * t889 + t1132 * t890;
t831 = -t1130 * t887 + t1132 * t888;
t830 = t1130 * t890 + t1132 * t889;
t829 = t1130 * t888 + t1132 * t887;
t828 = -pkin(2) * t859 - t1219;
t824 = -qJ(2) * t906 + (pkin(2) * t1131 - pkin(6) * t1133) * t941;
t821 = -pkin(2) * t922 + t1075 - t1157;
t820 = -t1136 * t867 + t1139 * t868;
t819 = t1136 * t868 + t1139 * t867;
t818 = t1125 * t1131 + t1133 * t820;
t817 = -t1125 * t1133 + t1131 * t820;
t816 = -pkin(2) * t883 - t1239;
t812 = -pkin(6) * t922 - t1136 * t869 + t1139 * t909;
t811 = qJ(2) * t907 + (-pkin(2) * t1133 - pkin(6) * t1131 - pkin(1)) * t941;
t807 = -pkin(6) * t883 - t1136 * t863 + t1139 * t897;
t801 = -t1136 * t845 + t1139 * t847;
t800 = -t1136 * t844 + t1139 * t846;
t799 = t1136 * t847 + t1139 * t845;
t798 = t1136 * t846 + t1139 * t844;
t796 = t1136 * t841 + t1139 * t840;
t793 = -t1130 * t834 + t1132 * t836;
t791 = t1130 * t836 + t1132 * t834;
t790 = -t1136 * t830 + t1139 * t832;
t789 = -t1136 * t829 + t1139 * t831;
t788 = t1136 * t832 + t1139 * t830;
t787 = t1136 * t831 + t1139 * t829;
t786 = pkin(1) * t873 + t1162;
t784 = t1136 * t826 + t1139 * t825;
t782 = -t1131 * t901 + t1133 * t801;
t781 = t1131 * t905 + t1133 * t800;
t780 = t1131 * t801 + t1133 * t901;
t779 = t1131 * t800 - t1133 * t905;
t778 = t1131 * t1230 + t1133 * t797;
t777 = t1131 * t797 - t1133 * t1230;
t776 = t1133 * t790 + t1176;
t775 = t1133 * t789 - t1176;
t774 = t1131 * t790 - t1174;
t773 = t1131 * t789 + t1174;
t771 = t1136 * t823 + t1205;
t769 = pkin(1) * t856 + t1163;
t768 = t1131 * t968 + t1133 * t772;
t767 = t1131 * t772 - t1133 * t968;
t766 = t1131 * t900 + t1133 * t785;
t765 = t1131 * t785 - t1133 * t900;
t764 = -qJ(2) * t873 - t1131 * t821 + t1133 * t812;
t758 = -pkin(2) * t771 - t1220;
t757 = -pkin(1) * t922 + qJ(2) * t876 + t1131 * t812 + t1133 * t821;
t756 = -qJ(2) * t856 - t1131 * t816 + t1133 * t807;
t750 = -pkin(6) * t859 - t1136 * t806 + t1139 * t810;
t748 = -t1136 * t791 + t1139 * t793;
t747 = t1136 * t794 + t1139 * t792;
t746 = t1136 * t793 + t1139 * t791;
t742 = -pkin(1) * t883 + qJ(2) * t857 + t1131 * t807 + t1133 * t816;
t741 = t1131 * t958 + t1133 * t748;
t740 = t1131 * t748 - t1133 * t958;
t738 = t1131 * t933 + t1133 * t749;
t737 = t1131 * t749 - t1133 * t933;
t735 = -pkin(2) * t796 - t1142;
t734 = pkin(1) * t842 + t1164;
t733 = -pkin(6) * t771 - qJ(4) * t1205 - t1136 * t815;
t732 = -pkin(2) * t784 - t1144;
t731 = -qJ(2) * t842 - t1131 * t828 + t1133 * t750;
t730 = -pkin(1) * t859 + qJ(2) * t843 + t1131 * t750 + t1133 * t828;
t727 = -pkin(2) * t747 - t1177;
t726 = pkin(1) * t767 + t1146;
t725 = -pkin(6) * t796 - t1136 * t753 + t1139 * t763;
t724 = -pkin(6) * t784 - t1136 * t744 + t1139 * t755;
t721 = -qJ(2) * t767 - t1131 * t758 + t1133 * t733;
t718 = pkin(1) * t777 + t1165;
t717 = pkin(1) * t765 + t1166;
t715 = t1136 * t729 + t1139 * t728;
t713 = -pkin(1) * t771 + qJ(2) * t768 + t1131 * t733 + t1133 * t758;
t710 = t1131 * t886 + t1133 * t716;
t709 = t1131 * t716 - t1133 * t886;
t706 = -qJ(2) * t777 - t1131 * t735 + t1133 * t725;
t705 = -pkin(1) * t796 + qJ(2) * t778 + t1131 * t725 + t1133 * t735;
t704 = -qJ(2) * t765 - t1131 * t732 + t1133 * t724;
t703 = -pkin(1) * t784 + qJ(2) * t766 + t1131 * t724 + t1133 * t732;
t702 = -pkin(2) * t715 - t1178;
t701 = -pkin(6) * t747 - t1136 * t720 + t1139 * t723;
t700 = pkin(1) * t737 + t1167;
t699 = -qJ(2) * t737 - t1131 * t727 + t1133 * t701;
t698 = -pkin(1) * t747 + qJ(2) * t738 + t1131 * t701 + t1133 * t727;
t697 = -pkin(6) * t715 - t1136 * t708 + t1139 * t712;
t696 = pkin(1) * t709 + t1168;
t695 = -qJ(2) * t709 - t1131 * t702 + t1133 * t697;
t694 = -pkin(1) * t715 + qJ(2) * t710 + t1131 * t697 + t1133 * t702;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t1108, -t1107, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1003, t1004, 0, -t967, t1053, t1044, t1056, t1052, t1054, 0, t927, t926, t896, t839, t930, t858, t921, t929, t920, t948, t769, t786, t734, t726, t788, t746, t798, t787, t799, t819, t717, t718, t700, t696; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t1100, 0, t1101, 0, t1153, t1080, -t1149, -pkin(5) * t1149, 0, 0, -t1150, 0, t1046, 0, t1231, -t1232, t1237, pkin(5) * t1237 - qJ(2) * t1208 - t1140 * t959, -t1029 * t1140 - t1031 * t1137, -t1137 * t998 - t1140 * t996, -t1025 * t1140 - t1027 * t1137, -t1028 * t1140 - t1030 * t1137, -t1024 * t1140 - t1026 * t1137, -t1062 * t1140 - t1063 * t1137, -t1137 * t864 - t1140 * t853 - pkin(5) * (-t1005 * t1137 + t1007 * t1140), -t1137 * t865 - t1140 * t854 - pkin(5) * (-t1006 * t1137 + t1008 * t1140), -t1137 * t912 - t1140 * t911 - pkin(5) * (-t1048 * t1137 + t1049 * t1140), -t1137 * t824 - t1140 * t811 - pkin(5) * (-t1137 * t906 + t1140 * t907), -t1137 * t895 - t1140 * t893, -t1137 * t851 - t1140 * t850, -t1137 * t875 - t1140 * t872, -t1137 * t894 - t1140 * t892, -t1137 * t874 - t1140 * t871, -t1137 * t945 - t1140 * t944, -t1137 * t756 - t1140 * t742 - pkin(5) * (-t1137 * t856 + t1140 * t857), -t1137 * t764 - t1140 * t757 - pkin(5) * (-t1137 * t873 + t1140 * t876), -t1137 * t731 - t1140 * t730 - pkin(5) * (-t1137 * t842 + t1140 * t843), -t1137 * t721 - t1140 * t713 - pkin(5) * (-t1137 * t767 + t1140 * t768), -t1137 * t776 - t1140 * t774, -t1137 * t741 - t1140 * t740, -t1137 * t781 - t1140 * t779, -t1137 * t775 - t1140 * t773, -t1137 * t782 - t1140 * t780, -t1137 * t818 - t1140 * t817, -t1137 * t704 - t1140 * t703 - pkin(5) * (-t1137 * t765 + t1140 * t766), -t1137 * t706 - t1140 * t705 - pkin(5) * (-t1137 * t777 + t1140 * t778), -t1137 * t699 - t1140 * t698 - pkin(5) * (-t1137 * t737 + t1140 * t738), -t1137 * t695 - t1140 * t694 - pkin(5) * (-t1137 * t709 + t1140 * t710); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t1101, 0, -t1100, 0, -t1080, t1153, t1148, pkin(5) * t1148, 0, 0, -t1046, 0, -t1150, 0, t1232, t1231, t1238, pkin(5) * t1238 + qJ(2) * t1204 - t1137 * t959, -t1029 * t1137 + t1031 * t1140, -t1137 * t996 + t1140 * t998, -t1025 * t1137 + t1027 * t1140, -t1028 * t1137 + t1030 * t1140, -t1024 * t1137 + t1026 * t1140, -t1062 * t1137 + t1063 * t1140, t1140 * t864 - t1137 * t853 + pkin(5) * (-t1005 * t1140 - t1007 * t1137), t1140 * t865 - t1137 * t854 + pkin(5) * (-t1006 * t1140 - t1008 * t1137), t1140 * t912 - t1137 * t911 + pkin(5) * (-t1048 * t1140 - t1049 * t1137), t1140 * t824 - t1137 * t811 + pkin(5) * (-t1137 * t907 - t1140 * t906), -t1137 * t893 + t1140 * t895, -t1137 * t850 + t1140 * t851, -t1137 * t872 + t1140 * t875, -t1137 * t892 + t1140 * t894, -t1137 * t871 + t1140 * t874, -t1137 * t944 + t1140 * t945, t1140 * t756 - t1137 * t742 + pkin(5) * (-t1137 * t857 - t1140 * t856), t1140 * t764 - t1137 * t757 + pkin(5) * (-t1137 * t876 - t1140 * t873), t1140 * t731 - t1137 * t730 + pkin(5) * (-t1137 * t843 - t1140 * t842), t1140 * t721 - t1137 * t713 + pkin(5) * (-t1137 * t768 - t1140 * t767), -t1137 * t774 + t1140 * t776, -t1137 * t740 + t1140 * t741, -t1137 * t779 + t1140 * t781, -t1137 * t773 + t1140 * t775, -t1137 * t780 + t1140 * t782, -t1137 * t817 + t1140 * t818, t1140 * t704 - t1137 * t703 + pkin(5) * (-t1137 * t766 - t1140 * t765), t1140 * t706 - t1137 * t705 + pkin(5) * (-t1137 * t778 - t1140 * t777), t1140 * t699 - t1137 * t698 + pkin(5) * (-t1137 * t738 - t1140 * t737), t1140 * t695 - t1137 * t694 + pkin(5) * (-t1137 * t710 - t1140 * t709); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1223, 0, 0, -g(1), -t1108, 0, 0, 0, t1098, 0, -t1097, 0, t1151, t1070, t971, qJ(2) * t971, t1031, t998, t1027, t1030, t1026, t1063, t864, t865, t912, t824, t895, t851, t875, t894, t874, t945, t756, t764, t731, t721, t776, t741, t781, t775, t782, t818, t704, t706, t699, t695; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1223, 0, qJDD(1), 0, g(1), 0, t1107, 0, 0, 0, t1097, 0, t1098, 0, -t1070, t1151, t1161, t959, t1029, t996, t1025, t1028, t1024, t1062, t853, t854, t911, t811, t893, t850, t872, t892, t871, t944, t742, t757, t730, t713, t774, t740, t779, t773, t780, t817, t703, t705, t698, t694; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1108, -t1107, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1003, t1004, 0, -t967, t1053, t1044, t1056, t1052, t1054, 0, t927, t926, t896, t839, t930, t858, t921, t929, t920, t948, t769, t786, t734, t726, t788, t746, t798, t787, t799, t819, t717, t718, t700, t696; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1223, 0, 0, -t1128, t1041, 0, t1065, t1045, t1060, t1064, t1058, t1089, t973, t974, -t941, -pkin(6) * t941, t932, t860, t924, t931, t923, t949, t807, t812, t750, t733, t790, t748, t800, t789, t801, t820, t724, t725, t701, t697; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1223, 0, qJDD(1), 0, t1128, 0, t1042, 0, t1114, -t1103, -t1181, -t1114, -t1180, -qJDD(3), t965, t966, 0, -pkin(2) * t941, -t1040, -t1038, -t995, t1040, -t993, -qJDD(3), t816, t821, t828, t758, -t961, -t958, -t905, t961, t901, -t1125, t732, t735, t727, t702; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1041, -t1042, 0, 0, t1053, t1044, t1056, t1052, t1054, 0, t1170, t1171, t1158, t1203, t930, t858, t921, t929, t920, t948, t1163, t1162, t1164, t1146, t788, t746, t798, t787, t799, t819, t1166, t1165, t1167, t1168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1094, t1095, t1105, -t1118, t1112, t1118, 0, t1022, t997, 0, t984, t938, t979, t982, t978, t1012, t897, t909, t810, -qJ(4) * t822, t832, t793, t846, t831, t847, t868, t755, t763, t723, t712; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1172, t1093, t1110, t1145, t1106, -t1172, -t1022, 0, t999, 0, t983, t936, t976, t981, t975, t1011, t863, t869, t806, t815, t830, t791, t844, t829, t845, t867, t744, t753, t720, t708; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1114, t1103, t1181, t1114, t1180, qJDD(3), -t997, -t999, 0, 0, t1040, t1038, t995, -t1040, t993, qJDD(3), t1239, t1157 + 0.2e1 * t1198, t1219, t1220, t961, t958, t905, -t961, -t901, t1125, t1144, t1142, t1177, t1178; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1043, -t991, t1225, t1078, t1071, -t1078, 0, t968, -t1152, 0, t890, t836, t917, t888, t918, t947, t827, t838, t739, -pkin(7) * t760; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1199, t994, t1072, -t1159, t1035, -t1199, -t968, 0, t878, 0, t889, t834, t915, t887, t916, t946, t808, t813, t736, t751; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1040, t1038, t995, -t1040, t993, qJDD(3), t1152, -t878, 0, 0, t961, t958, t905, -t961, -t901, t1125, t1154, t1147, t833, t759; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t935, -t900, t1229, t1010, t1001, -t1010, 0, t886, t804, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1192, t1230, t1002, t934, t954, -t1192, -t886, 0, t805, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t961, t958, t905, -t961, -t901, t1125, -t804, -t805, 0, 0;];
m_new_reg = t1;
