% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRPR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:40
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRPR4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR4_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR4_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR4_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR4_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:39:49
% EndTime: 2020-01-03 11:40:07
% DurationCPUTime: 19.04s
% Computational Cost: add. (92771->648), mult. (203831->922), div. (0->0), fcn. (136613->10), ass. (0->450)
t1148 = sin(pkin(9));
t1150 = cos(pkin(9));
t1154 = sin(qJ(3));
t1157 = cos(qJ(3));
t1095 = (t1148 * t1157 + t1150 * t1154) * qJD(1);
t1155 = sin(qJ(1));
t1158 = cos(qJ(1));
t1122 = g(2) * t1155 - g(3) * t1158;
t1242 = qJD(1) ^ 2;
t1106 = -pkin(1) * t1242 - t1122;
t1149 = sin(pkin(8));
t1151 = cos(pkin(8));
t1123 = g(2) * t1158 + g(3) * t1155;
t1161 = qJDD(1) * pkin(1) - t1123;
t1054 = t1151 * t1106 + t1149 * t1161;
t1035 = -pkin(2) * t1242 + qJDD(1) * pkin(6) + t1054;
t1146 = g(1) - qJDD(2);
t1009 = t1154 * t1035 + t1146 * t1157;
t1219 = qJD(1) * t1157;
t1133 = qJD(3) * t1219;
t1198 = t1154 * qJDD(1);
t1109 = t1133 + t1198;
t1129 = t1157 * t1242 * t1154;
t1120 = qJDD(3) + t1129;
t969 = (-t1109 + t1133) * qJ(4) + t1120 * pkin(3) - t1009;
t1011 = t1035 * t1157 - t1146 * t1154;
t1220 = qJD(1) * t1154;
t1119 = qJD(3) * pkin(3) - qJ(4) * t1220;
t1240 = t1157 ^ 2;
t1138 = t1240 * t1242;
t1189 = qJD(3) * t1220;
t1197 = t1157 * qJDD(1);
t1163 = -t1189 + t1197;
t972 = -pkin(3) * t1138 + qJ(4) * t1163 - qJD(3) * t1119 + t1011;
t1168 = -0.2e1 * qJD(4) * t1095 - t1148 * t972 + t1150 * t969;
t1159 = qJD(3) ^ 2;
t1094 = t1148 * t1220 - t1150 * t1219;
t1241 = t1094 ^ 2;
t1045 = -t1159 - t1241;
t1052 = t1095 * t1094;
t1244 = qJDD(3) - t1052;
t1256 = t1150 * t1244;
t974 = t1045 * t1148 + t1256;
t1261 = pkin(3) * t974 + t1168;
t1053 = t1106 * t1149 - t1151 * t1161;
t1179 = t1053 * t1149 + t1054 * t1151;
t983 = t1053 * t1151 - t1054 * t1149;
t1223 = t1158 * t983;
t1260 = t1155 * t1179 - t1223;
t1227 = t1155 * t983;
t1259 = t1158 * t1179 + t1227;
t1112 = qJDD(1) * t1149 + t1151 * t1242;
t1082 = qJ(2) * t1112 - t1146 * t1151;
t1113 = qJDD(1) * t1151 - t1149 * t1242;
t1167 = -qJ(2) * t1113 - t1146 * t1149;
t1245 = -t1112 * t1158 - t1113 * t1155;
t1258 = pkin(5) * t1245 - t1158 * t1082 + t1155 * t1167;
t1257 = t1148 * t1244;
t1153 = sin(qJ(5));
t1143 = qJDD(3) + qJDD(5);
t1156 = cos(qJ(5));
t1031 = t1094 * t1156 + t1095 * t1153;
t1033 = -t1094 * t1153 + t1095 * t1156;
t973 = t1033 * t1031;
t1250 = -t973 + t1143;
t1255 = t1153 * t1250;
t1254 = t1156 * t1250;
t1246 = t1112 * t1155 - t1113 * t1158;
t1253 = pkin(5) * t1246 + t1155 * t1082 + t1158 * t1167;
t955 = t1009 * t1154 + t1011 * t1157;
t1144 = qJD(3) + qJD(5);
t1022 = t1144 * t1031;
t1055 = t1109 * t1150 + t1148 * t1163;
t1177 = t1109 * t1148 - t1150 * t1163;
t947 = -qJD(5) * t1031 + t1055 * t1156 - t1153 * t1177;
t1251 = -t1022 + t947;
t1090 = qJD(3) * t1094;
t1007 = t1090 + t1055;
t1178 = t1153 * t1055 + t1156 * t1177;
t913 = (qJD(5) - t1144) * t1033 + t1178;
t1028 = t1031 ^ 2;
t1029 = t1033 ^ 2;
t1093 = t1095 ^ 2;
t1142 = t1144 ^ 2;
t1217 = qJD(4) * t1094;
t1087 = -0.2e1 * t1217;
t1235 = t1148 * t969 + t1150 * t972;
t890 = t1087 + t1235;
t834 = t1148 * t890 + t1150 * t1168;
t1239 = pkin(3) * t834;
t1218 = qJD(3) * t1095;
t1005 = -t1177 + t1218;
t949 = t1005 * t1148 - t1007 * t1150;
t1238 = pkin(3) * t949;
t861 = pkin(4) * t1244 - pkin(7) * t1007 + t1168;
t1078 = qJD(3) * pkin(4) - pkin(7) * t1095;
t864 = -pkin(4) * t1241 - pkin(7) * t1177 - qJD(3) * t1078 + t890;
t816 = t1153 * t864 - t1156 * t861;
t817 = t1153 * t861 + t1156 * t864;
t772 = t1153 * t817 - t1156 * t816;
t1234 = t1148 * t772;
t1034 = -qJDD(1) * pkin(2) - pkin(6) * t1242 + t1053;
t980 = -pkin(3) * t1163 - qJ(4) * t1138 + t1119 * t1220 + qJDD(4) + t1034;
t1233 = t1148 * t980;
t1232 = t1150 * t772;
t1231 = t1150 * t980;
t898 = pkin(4) * t1177 - pkin(7) * t1241 + t1078 * t1095 + t980;
t1230 = t1153 * t898;
t966 = t973 + t1143;
t1229 = t1153 * t966;
t1228 = t1154 * t834;
t1226 = t1156 * t898;
t1225 = t1156 * t966;
t1224 = t1157 * t834;
t1222 = -pkin(2) * t1034 + pkin(6) * t955;
t1221 = qJD(1) * qJD(3);
t1215 = t1094 * t1148;
t1214 = t1094 * t1150;
t1213 = t1095 * t1148;
t1212 = t1095 * t1150;
t1211 = t1144 * t1033;
t1210 = t1144 * t1153;
t1209 = t1144 * t1156;
t1145 = t1154 ^ 2;
t1208 = t1145 * t1242;
t1047 = qJDD(3) + t1052;
t1207 = t1148 * t1047;
t1206 = t1150 * t1047;
t1025 = t1154 * t1034;
t1205 = t1154 * t1120;
t1121 = qJDD(3) - t1129;
t1204 = t1154 * t1121;
t1026 = t1157 * t1034;
t1110 = -0.2e1 * t1189 + t1197;
t1064 = t1157 * t1110;
t1203 = t1157 * t1121;
t1199 = t1151 * qJDD(3);
t1196 = t1145 + t1240;
t773 = t1153 * t816 + t1156 * t817;
t740 = t1148 * t773 + t1232;
t771 = pkin(4) * t772;
t1195 = pkin(3) * t740 + t771;
t917 = t1022 + t947;
t847 = -t1153 * t913 - t1156 * t917;
t849 = t1153 * t917 - t1156 * t913;
t804 = t1148 * t849 + t1150 * t847;
t845 = pkin(4) * t847;
t1194 = pkin(3) * t804 + t845;
t1193 = t1149 * t973;
t1192 = t1149 * t1052;
t1191 = t1151 * t973;
t1190 = t1151 * t1052;
t1126 = -t1159 - t1208;
t1073 = -t1126 * t1154 - t1203;
t1108 = 0.2e1 * t1133 + t1198;
t1188 = -pkin(2) * t1108 + pkin(6) * t1073 + t1025;
t1128 = -t1138 - t1159;
t1071 = t1128 * t1157 - t1205;
t1187 = pkin(2) * t1110 + pkin(6) * t1071 - t1026;
t1115 = -qJDD(1) * t1155 - t1158 * t1242;
t1186 = pkin(5) * t1115 + g(1) * t1158;
t835 = -t1148 * t1168 + t1150 * t890;
t741 = t1150 * t773 - t1234;
t763 = -pkin(4) * t898 + pkin(7) * t773;
t720 = -pkin(3) * t898 - pkin(7) * t1234 + qJ(4) * t741 + t1150 * t763;
t724 = -pkin(7) * t1232 - qJ(4) * t740 - t1148 * t763;
t728 = -t1154 * t740 + t1157 * t741;
t1184 = -pkin(2) * t898 + pkin(6) * t728 + t1154 * t724 + t1157 * t720;
t945 = -t1028 - t1029;
t748 = -pkin(4) * t945 + pkin(7) * t849 + t773;
t751 = -pkin(7) * t847 - t772;
t806 = -t1148 * t847 + t1150 * t849;
t732 = -pkin(3) * t945 + qJ(4) * t806 + t1148 * t751 + t1150 * t748;
t735 = -qJ(4) * t804 - t1148 * t748 + t1150 * t751;
t761 = -t1154 * t804 + t1157 * t806;
t1183 = -pkin(2) * t945 + pkin(6) * t761 + t1154 * t735 + t1157 * t732;
t964 = -t1142 - t1028;
t893 = t1156 * t964 - t1255;
t912 = (qJD(5) + t1144) * t1033 + t1178;
t820 = -pkin(4) * t912 + pkin(7) * t893 - t1226;
t892 = t1153 * t964 + t1254;
t838 = -t1148 * t892 + t1150 * t893;
t839 = -pkin(7) * t892 + t1230;
t756 = -pkin(3) * t912 + qJ(4) * t838 + t1148 * t839 + t1150 * t820;
t837 = t1148 * t893 + t1150 * t892;
t767 = -qJ(4) * t837 - t1148 * t820 + t1150 * t839;
t797 = -t1154 * t837 + t1157 * t838;
t1182 = -pkin(2) * t912 + pkin(6) * t797 + t1154 * t767 + t1157 * t756;
t1012 = -t1029 - t1142;
t926 = -t1012 * t1153 - t1225;
t825 = -pkin(4) * t1251 + pkin(7) * t926 + t1230;
t925 = t1012 * t1156 - t1229;
t850 = -pkin(7) * t925 + t1226;
t853 = -t1148 * t925 + t1150 * t926;
t765 = -pkin(3) * t1251 + qJ(4) * t853 + t1148 * t850 + t1150 * t825;
t852 = t1148 * t926 + t1150 * t925;
t775 = -qJ(4) * t852 - t1148 * t825 + t1150 * t850;
t809 = -t1154 * t852 + t1157 * t853;
t1181 = -pkin(2) * t1251 + pkin(6) * t809 + t1154 * t775 + t1157 * t765;
t1002 = -t1093 - t1241;
t951 = t1005 * t1150 + t1007 * t1148;
t818 = -pkin(3) * t1002 + qJ(4) * t951 + t835;
t822 = -qJ(4) * t949 - t834;
t873 = -t1154 * t949 + t1157 * t951;
t1180 = -pkin(2) * t1002 + pkin(6) * t873 + t1154 * t822 + t1157 * t818;
t1176 = -t1122 * t1155 - t1123 * t1158;
t1003 = t1177 + t1218;
t975 = t1045 * t1150 - t1257;
t875 = -pkin(3) * t1003 + qJ(4) * t975 - t1231;
t896 = -t1154 * t974 + t1157 * t975;
t909 = -qJ(4) * t974 + t1233;
t1175 = -pkin(2) * t1003 + pkin(6) * t896 + t1154 * t909 + t1157 * t875;
t1006 = -t1090 + t1055;
t1085 = -t1093 - t1159;
t992 = -t1085 * t1148 - t1206;
t881 = -pkin(3) * t1006 + qJ(4) * t992 + t1233;
t989 = t1085 * t1150 - t1207;
t921 = -qJ(4) * t989 + t1231;
t937 = -t1154 * t989 + t1157 * t992;
t1174 = -pkin(2) * t1006 + pkin(6) * t937 + t1154 * t921 + t1157 * t881;
t1114 = t1196 * qJDD(1);
t1117 = t1138 + t1208;
t1173 = pkin(2) * t1117 + pkin(6) * t1114 + t955;
t1172 = pkin(3) * t989 - t1235;
t1171 = t1149 * t1129;
t1170 = t1151 * t1129;
t1169 = pkin(4) * t892 - t816;
t954 = t1009 * t1157 - t1011 * t1154;
t1166 = t1122 * t1158 - t1123 * t1155;
t1165 = pkin(4) * t925 - t817;
t784 = t1157 * t835 - t1228;
t827 = -pkin(3) * t980 + qJ(4) * t835;
t1164 = -pkin(2) * t980 + pkin(6) * t784 - qJ(4) * t1228 + t1157 * t827;
t1162 = pkin(3) * t837 + t1169;
t1160 = pkin(3) * t852 + t1165;
t1135 = t1149 * qJDD(3);
t1127 = t1138 - t1159;
t1125 = t1159 - t1208;
t1118 = -t1138 + t1208;
t1116 = qJDD(1) * t1158 - t1155 * t1242;
t1104 = t1157 * t1120;
t1103 = t1196 * t1221;
t1092 = pkin(5) * t1116 + g(1) * t1155;
t1084 = -t1093 + t1159;
t1083 = -t1159 + t1241;
t1077 = t1109 * t1157 - t1145 * t1221;
t1076 = -t1154 * t1163 - t1221 * t1240;
t1075 = t1103 * t1151 + t1135;
t1074 = t1103 * t1149 - t1199;
t1072 = -t1125 * t1154 + t1104;
t1070 = t1127 * t1157 - t1204;
t1069 = t1126 * t1157 - t1204;
t1068 = t1125 * t1157 + t1205;
t1067 = t1128 * t1154 + t1104;
t1066 = t1127 * t1154 + t1203;
t1065 = (t1109 + t1133) * t1154;
t1061 = t1114 * t1151 - t1117 * t1149;
t1060 = t1114 * t1149 + t1117 * t1151;
t1057 = -t1108 * t1154 + t1064;
t1056 = t1108 * t1157 + t1110 * t1154;
t1050 = -t1093 + t1241;
t1043 = t1077 * t1151 - t1171;
t1042 = t1076 * t1151 + t1171;
t1041 = t1077 * t1149 + t1170;
t1040 = t1076 * t1149 - t1170;
t1039 = t1072 * t1151 + t1149 * t1198;
t1038 = t1070 * t1151 + t1149 * t1197;
t1037 = t1072 * t1149 - t1151 * t1198;
t1036 = t1070 * t1149 - t1151 * t1197;
t1024 = (t1213 - t1214) * qJD(3);
t1023 = (-t1212 - t1215) * qJD(3);
t1020 = t1073 * t1151 + t1108 * t1149;
t1019 = t1071 * t1151 - t1110 * t1149;
t1018 = t1073 * t1149 - t1108 * t1151;
t1017 = t1071 * t1149 + t1110 * t1151;
t1016 = -pkin(1) * t1112 - t1054;
t1015 = pkin(1) * t1113 - t1053;
t1014 = -t1029 + t1142;
t1013 = t1028 - t1142;
t1010 = t1057 * t1151 + t1118 * t1149;
t1008 = t1057 * t1149 - t1118 * t1151;
t996 = -qJD(3) * t1213 + t1055 * t1150;
t995 = qJD(3) * t1212 + t1055 * t1148;
t994 = qJD(3) * t1214 + t1148 * t1177;
t993 = qJD(3) * t1215 - t1150 * t1177;
t991 = -t1084 * t1148 + t1256;
t990 = t1083 * t1150 - t1207;
t988 = t1084 * t1150 + t1257;
t987 = t1083 * t1148 + t1206;
t986 = -pkin(6) * t1069 + t1026;
t985 = -pkin(6) * t1067 + t1025;
t979 = pkin(1) * t983;
t978 = -pkin(2) * t1069 + t1011;
t977 = -pkin(2) * t1067 + t1009;
t971 = pkin(1) * t1146 + qJ(2) * t1179;
t970 = t1029 - t1028;
t961 = -t1023 * t1154 + t1024 * t1157;
t960 = t1023 * t1157 + t1024 * t1154;
t959 = (-t1031 * t1156 + t1033 * t1153) * t1144;
t958 = (-t1031 * t1153 - t1033 * t1156) * t1144;
t957 = t1151 * t961 + t1135;
t956 = t1149 * t961 - t1199;
t950 = -t1003 * t1150 - t1006 * t1148;
t948 = -t1003 * t1148 + t1006 * t1150;
t946 = -qJD(5) * t1033 - t1178;
t944 = -t1154 * t995 + t1157 * t996;
t943 = -t1154 * t993 + t1157 * t994;
t942 = t1154 * t996 + t1157 * t995;
t941 = t1154 * t994 + t1157 * t993;
t939 = pkin(1) * t1017 + t1187;
t938 = pkin(1) * t1018 + t1188;
t936 = -t1154 * t988 + t1157 * t991;
t935 = -t1154 * t987 + t1157 * t990;
t934 = t1154 * t992 + t1157 * t989;
t933 = t1154 * t991 + t1157 * t988;
t932 = t1154 * t990 + t1157 * t987;
t930 = t1013 * t1156 - t1229;
t929 = -t1014 * t1153 + t1254;
t928 = t1013 * t1153 + t1225;
t927 = t1014 * t1156 + t1255;
t924 = -qJ(2) * t1060 + t1151 * t954;
t923 = qJ(2) * t1061 + t1149 * t954;
t919 = t1034 * t1149 + t1151 * t955;
t918 = -t1034 * t1151 + t1149 * t955;
t908 = pkin(1) * t1060 + t1173;
t907 = t1151 * t944 + t1192;
t906 = t1151 * t943 - t1192;
t905 = t1149 * t944 - t1190;
t904 = t1149 * t943 + t1190;
t902 = -t1033 * t1210 + t1156 * t947;
t901 = t1033 * t1209 + t1153 * t947;
t900 = t1031 * t1209 - t1153 * t946;
t899 = t1031 * t1210 + t1156 * t946;
t895 = t1154 * t975 + t1157 * t974;
t888 = t1006 * t1149 + t1151 * t937;
t887 = t1007 * t1149 + t1151 * t936;
t886 = t1005 * t1149 + t1151 * t935;
t885 = -t1006 * t1151 + t1149 * t937;
t884 = -t1007 * t1151 + t1149 * t936;
t883 = -t1005 * t1151 + t1149 * t935;
t880 = -t1148 * t958 + t1150 * t959;
t879 = t1148 * t959 + t1150 * t958;
t877 = -qJ(2) * t1018 - t1149 * t978 + t1151 * t986;
t876 = -qJ(2) * t1017 - t1149 * t977 + t1151 * t985;
t872 = -t1154 * t948 + t1157 * t950;
t871 = t1154 * t951 + t1157 * t949;
t870 = t1154 * t950 + t1157 * t948;
t869 = t1003 * t1149 + t1151 * t896;
t868 = -t1003 * t1151 + t1149 * t896;
t866 = -pkin(1) * t1069 + qJ(2) * t1020 + t1149 * t986 + t1151 * t978;
t865 = -pkin(1) * t1067 + qJ(2) * t1019 + t1149 * t985 + t1151 * t977;
t863 = -t1050 * t1149 + t1151 * t872;
t862 = t1050 * t1151 + t1149 * t872;
t859 = -t1148 * t928 + t1150 * t930;
t858 = -t1148 * t927 + t1150 * t929;
t857 = t1148 * t930 + t1150 * t928;
t856 = t1148 * t929 + t1150 * t927;
t855 = t1002 * t1149 + t1151 * t873;
t854 = -t1002 * t1151 + t1149 * t873;
t851 = pkin(1) * t918 + t1222;
t848 = -t1153 * t1251 - t1156 * t912;
t846 = -t1153 * t912 + t1156 * t1251;
t844 = -t1148 * t901 + t1150 * t902;
t843 = -t1148 * t899 + t1150 * t900;
t842 = t1148 * t902 + t1150 * t901;
t841 = t1148 * t900 + t1150 * t899;
t840 = -pkin(2) * t871 - t1238;
t836 = -qJ(2) * t918 - (pkin(2) * t1149 - pkin(6) * t1151) * t954;
t833 = -pkin(2) * t934 + t1087 - t1172;
t832 = -t1154 * t879 + t1157 * t880;
t831 = t1154 * t880 + t1157 * t879;
t830 = t1143 * t1149 + t1151 * t832;
t829 = -t1143 * t1151 + t1149 * t832;
t828 = -pkin(2) * t895 - t1261;
t824 = -pkin(6) * t934 - t1154 * t881 + t1157 * t921;
t823 = qJ(2) * t919 - (-pkin(2) * t1151 - pkin(6) * t1149 - pkin(1)) * t954;
t819 = -pkin(6) * t895 - t1154 * t875 + t1157 * t909;
t813 = -t1154 * t857 + t1157 * t859;
t812 = -t1154 * t856 + t1157 * t858;
t811 = t1154 * t859 + t1157 * t857;
t810 = t1154 * t858 + t1157 * t856;
t808 = t1154 * t853 + t1157 * t852;
t805 = -t1148 * t846 + t1150 * t848;
t803 = t1148 * t848 + t1150 * t846;
t802 = -t1154 * t842 + t1157 * t844;
t801 = -t1154 * t841 + t1157 * t843;
t800 = t1154 * t844 + t1157 * t842;
t799 = t1154 * t843 + t1157 * t841;
t798 = pkin(1) * t885 + t1174;
t796 = t1154 * t838 + t1157 * t837;
t794 = -t1149 * t913 + t1151 * t813;
t793 = t1149 * t917 + t1151 * t812;
t792 = t1149 * t813 + t1151 * t913;
t791 = t1149 * t812 - t1151 * t917;
t790 = t1149 * t1251 + t1151 * t809;
t789 = t1149 * t809 - t1151 * t1251;
t788 = t1151 * t802 + t1193;
t787 = t1151 * t801 - t1193;
t786 = t1149 * t802 - t1191;
t785 = t1149 * t801 + t1191;
t783 = t1154 * t835 + t1224;
t781 = pkin(1) * t868 + t1175;
t780 = t1149 * t980 + t1151 * t784;
t779 = t1149 * t784 - t1151 * t980;
t778 = t1149 * t912 + t1151 * t797;
t777 = t1149 * t797 - t1151 * t912;
t776 = -qJ(2) * t885 - t1149 * t833 + t1151 * t824;
t770 = -pkin(2) * t783 - t1239;
t769 = -pkin(1) * t934 + qJ(2) * t888 + t1149 * t824 + t1151 * t833;
t768 = -qJ(2) * t868 - t1149 * t828 + t1151 * t819;
t762 = -pkin(6) * t871 - t1154 * t818 + t1157 * t822;
t760 = -t1154 * t803 + t1157 * t805;
t759 = t1154 * t806 + t1157 * t804;
t758 = t1154 * t805 + t1157 * t803;
t754 = -pkin(1) * t895 + qJ(2) * t869 + t1149 * t819 + t1151 * t828;
t753 = t1149 * t970 + t1151 * t760;
t752 = t1149 * t760 - t1151 * t970;
t750 = t1149 * t945 + t1151 * t761;
t749 = t1149 * t761 - t1151 * t945;
t747 = -pkin(2) * t808 - t1160;
t746 = pkin(1) * t854 + t1180;
t745 = -pkin(6) * t783 - qJ(4) * t1224 - t1154 * t827;
t744 = -pkin(2) * t796 - t1162;
t743 = -qJ(2) * t854 - t1149 * t840 + t1151 * t762;
t742 = -pkin(1) * t871 + qJ(2) * t855 + t1149 * t762 + t1151 * t840;
t739 = -pkin(2) * t759 - t1194;
t738 = pkin(1) * t779 + t1164;
t737 = -pkin(6) * t808 - t1154 * t765 + t1157 * t775;
t736 = -pkin(6) * t796 - t1154 * t756 + t1157 * t767;
t733 = -qJ(2) * t779 - t1149 * t770 + t1151 * t745;
t730 = pkin(1) * t789 + t1181;
t729 = pkin(1) * t777 + t1182;
t727 = t1154 * t741 + t1157 * t740;
t725 = -pkin(1) * t783 + qJ(2) * t780 + t1149 * t745 + t1151 * t770;
t722 = t1149 * t898 + t1151 * t728;
t721 = t1149 * t728 - t1151 * t898;
t718 = -qJ(2) * t789 - t1149 * t747 + t1151 * t737;
t717 = -pkin(1) * t808 + qJ(2) * t790 + t1149 * t737 + t1151 * t747;
t716 = -qJ(2) * t777 - t1149 * t744 + t1151 * t736;
t715 = -pkin(1) * t796 + qJ(2) * t778 + t1149 * t736 + t1151 * t744;
t714 = -pkin(2) * t727 - t1195;
t713 = -pkin(6) * t759 - t1154 * t732 + t1157 * t735;
t712 = pkin(1) * t749 + t1183;
t711 = -qJ(2) * t749 - t1149 * t739 + t1151 * t713;
t710 = -pkin(1) * t759 + qJ(2) * t750 + t1149 * t713 + t1151 * t739;
t709 = -pkin(6) * t727 - t1154 * t720 + t1157 * t724;
t708 = pkin(1) * t721 + t1184;
t707 = -qJ(2) * t721 - t1149 * t714 + t1151 * t709;
t706 = -pkin(1) * t727 + qJ(2) * t722 + t1149 * t709 + t1151 * t714;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t1123, t1122, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1015, t1016, 0, -t979, t1065, t1056, t1068, t1064, t1066, 0, t939, t938, t908, t851, t942, t870, t933, t941, t932, t960, t781, t798, t746, t738, t800, t758, t810, t799, t811, t831, t729, t730, t712, t708; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t1115, 0, t1116, 0, t1186, -t1092, -t1166, -pkin(5) * t1166, 0, 0, -t1245, 0, -t1246, 0, t1258, t1253, t1259, pkin(5) * t1259 + qJ(2) * t1227 + t1158 * t971, t1041 * t1158 + t1043 * t1155, t1008 * t1158 + t1010 * t1155, t1037 * t1158 + t1039 * t1155, t1040 * t1158 + t1042 * t1155, t1036 * t1158 + t1038 * t1155, t1074 * t1158 + t1075 * t1155, t1155 * t876 + t1158 * t865 - pkin(5) * (t1017 * t1155 - t1019 * t1158), t1155 * t877 + t1158 * t866 - pkin(5) * (t1018 * t1155 - t1020 * t1158), t1155 * t924 + t1158 * t923 - pkin(5) * (t1060 * t1155 - t1061 * t1158), t1155 * t836 + t1158 * t823 - pkin(5) * (t1155 * t918 - t1158 * t919), t1155 * t907 + t1158 * t905, t1155 * t863 + t1158 * t862, t1155 * t887 + t1158 * t884, t1155 * t906 + t1158 * t904, t1155 * t886 + t1158 * t883, t1155 * t957 + t1158 * t956, t1155 * t768 + t1158 * t754 - pkin(5) * (t1155 * t868 - t1158 * t869), t1155 * t776 + t1158 * t769 - pkin(5) * (t1155 * t885 - t1158 * t888), t1155 * t743 + t1158 * t742 - pkin(5) * (t1155 * t854 - t1158 * t855), t1155 * t733 + t1158 * t725 - pkin(5) * (t1155 * t779 - t1158 * t780), t1155 * t788 + t1158 * t786, t1155 * t753 + t1158 * t752, t1155 * t793 + t1158 * t791, t1155 * t787 + t1158 * t785, t1155 * t794 + t1158 * t792, t1155 * t830 + t1158 * t829, t1155 * t716 + t1158 * t715 - pkin(5) * (t1155 * t777 - t1158 * t778), t1155 * t718 + t1158 * t717 - pkin(5) * (t1155 * t789 - t1158 * t790), t1155 * t711 + t1158 * t710 - pkin(5) * (t1155 * t749 - t1158 * t750), t1155 * t707 + t1158 * t706 - pkin(5) * (t1155 * t721 - t1158 * t722); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t1116, 0, -t1115, 0, t1092, t1186, t1176, pkin(5) * t1176, 0, 0, t1246, 0, -t1245, 0, -t1253, t1258, t1260, pkin(5) * t1260 - qJ(2) * t1223 + t1155 * t971, t1041 * t1155 - t1043 * t1158, t1008 * t1155 - t1010 * t1158, t1037 * t1155 - t1039 * t1158, t1040 * t1155 - t1042 * t1158, t1036 * t1155 - t1038 * t1158, t1074 * t1155 - t1075 * t1158, -t1158 * t876 + t1155 * t865 + pkin(5) * (t1017 * t1158 + t1019 * t1155), -t1158 * t877 + t1155 * t866 + pkin(5) * (t1018 * t1158 + t1020 * t1155), -t1158 * t924 + t1155 * t923 + pkin(5) * (t1060 * t1158 + t1061 * t1155), -t1158 * t836 + t1155 * t823 + pkin(5) * (t1155 * t919 + t1158 * t918), t1155 * t905 - t1158 * t907, t1155 * t862 - t1158 * t863, t1155 * t884 - t1158 * t887, t1155 * t904 - t1158 * t906, t1155 * t883 - t1158 * t886, t1155 * t956 - t1158 * t957, -t1158 * t768 + t1155 * t754 + pkin(5) * (t1155 * t869 + t1158 * t868), -t1158 * t776 + t1155 * t769 + pkin(5) * (t1155 * t888 + t1158 * t885), -t1158 * t743 + t1155 * t742 + pkin(5) * (t1155 * t855 + t1158 * t854), -t1158 * t733 + t1155 * t725 + pkin(5) * (t1155 * t780 + t1158 * t779), t1155 * t786 - t1158 * t788, t1155 * t752 - t1158 * t753, t1155 * t791 - t1158 * t793, t1155 * t785 - t1158 * t787, t1155 * t792 - t1158 * t794, t1155 * t829 - t1158 * t830, -t1158 * t716 + t1155 * t715 + pkin(5) * (t1155 * t778 + t1158 * t777), -t1158 * t718 + t1155 * t717 + pkin(5) * (t1155 * t790 + t1158 * t789), -t1158 * t711 + t1155 * t710 + pkin(5) * (t1155 * t750 + t1158 * t749), -t1158 * t707 + t1155 * t706 + pkin(5) * (t1155 * t722 + t1158 * t721); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1242, 0, 0, -g(1), t1123, 0, 0, 0, t1113, 0, -t1112, 0, t1167, t1082, t983, qJ(2) * t983, t1043, t1010, t1039, t1042, t1038, t1075, t876, t877, t924, t836, t907, t863, t887, t906, t886, t957, t768, t776, t743, t733, t788, t753, t793, t787, t794, t830, t716, t718, t711, t707; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1242, 0, qJDD(1), 0, g(1), 0, -t1122, 0, 0, 0, t1112, 0, t1113, 0, -t1082, t1167, t1179, t971, t1041, t1008, t1037, t1040, t1036, t1074, t865, t866, t923, t823, t905, t862, t884, t904, t883, t956, t754, t769, t742, t725, t786, t752, t791, t785, t792, t829, t715, t717, t710, t706; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1123, t1122, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1015, t1016, 0, -t979, t1065, t1056, t1068, t1064, t1066, 0, t939, t938, t908, t851, t942, t870, t933, t941, t932, t960, t781, t798, t746, t738, t800, t758, t810, t799, t811, t831, t729, t730, t712, t708; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1242, 0, 0, -t1146, t1053, 0, t1077, t1057, t1072, t1076, t1070, t1103, t985, t986, t954, pkin(6) * t954, t944, t872, t936, t943, t935, t961, t819, t824, t762, t745, t802, t760, t812, t801, t813, t832, t736, t737, t713, t709; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1242, 0, qJDD(1), 0, t1146, 0, t1054, 0, t1129, -t1118, -t1198, -t1129, -t1197, -qJDD(3), t977, t978, 0, pkin(2) * t954, -t1052, t1050, -t1007, t1052, -t1005, -qJDD(3), t828, t833, t840, t770, -t973, -t970, -t917, t973, t913, -t1143, t744, t747, t739, t714; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1053, -t1054, 0, 0, t1065, t1056, t1068, t1064, t1066, 0, t1187, t1188, t1173, t1222, t942, t870, t933, t941, t932, t960, t1175, t1174, t1180, t1164, t800, t758, t810, t799, t811, t831, t1182, t1181, t1183, t1184; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1109, t1110, t1120, -t1133, t1127, t1133, 0, t1034, t1009, 0, t996, t950, t991, t994, t990, t1024, t909, t921, t822, -qJ(4) * t834, t844, t805, t858, t843, t859, t880, t767, t775, t735, t724; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1189, t1108, t1125, t1163, t1121, -t1189, -t1034, 0, t1011, 0, t995, t948, t988, t993, t987, t1023, t875, t881, t818, t827, t842, t803, t856, t841, t857, t879, t756, t765, t732, t720; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1129, t1118, t1198, t1129, t1197, qJDD(3), -t1009, -t1011, 0, 0, t1052, -t1050, t1007, -t1052, t1005, qJDD(3), t1261, t1172 + 0.2e1 * t1217, t1238, t1239, t973, t970, t917, -t973, -t913, t1143, t1162, t1160, t1194, t1195; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1055, -t1003, t1244, t1090, t1083, -t1090, 0, t980, -t1168, 0, t902, t848, t929, t900, t930, t959, t839, t850, t751, -pkin(7) * t772; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1218, t1006, t1084, -t1177, t1047, -t1218, -t980, 0, t890, 0, t901, t846, t927, t899, t928, t958, t820, t825, t748, t763; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1052, -t1050, t1007, -t1052, t1005, qJDD(3), t1168, -t890, 0, 0, t973, t970, t917, -t973, -t913, t1143, t1169, t1165, t845, t771; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t947, -t912, t1250, t1022, t1013, -t1022, 0, t898, t816, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1211, t1251, t1014, t946, t966, -t1211, -t898, 0, t817, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t973, t970, t917, -t973, -t913, t1143, -t816, -t817, 0, 0;];
m_new_reg = t1;
