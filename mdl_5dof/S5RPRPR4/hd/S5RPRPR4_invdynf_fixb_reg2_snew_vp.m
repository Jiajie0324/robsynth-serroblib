% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRPR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:54
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRPR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR4_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR4_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR4_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:54:43
% EndTime: 2019-12-05 17:54:46
% DurationCPUTime: 2.86s
% Computational Cost: add. (14440->211), mult. (31717->308), div. (0->0), fcn. (21339->10), ass. (0->175)
t1395 = qJD(3) + qJD(5);
t1440 = qJD(5) + t1395;
t1399 = sin(pkin(9));
t1401 = cos(pkin(9));
t1408 = cos(qJ(3));
t1431 = qJD(1) * t1408;
t1405 = sin(qJ(3));
t1432 = qJD(1) * t1405;
t1362 = t1399 * t1432 - t1401 * t1431;
t1364 = (t1399 * t1408 + t1401 * t1405) * qJD(1);
t1404 = sin(qJ(5));
t1407 = cos(qJ(5));
t1337 = t1407 * t1362 + t1404 * t1364;
t1439 = t1337 ^ 2;
t1339 = -t1404 * t1362 + t1407 * t1364;
t1438 = t1339 ^ 2;
t1437 = t1362 ^ 2;
t1436 = t1364 ^ 2;
t1435 = t1395 ^ 2;
t1434 = t1408 ^ 2;
t1433 = -2 * qJD(4);
t1430 = qJD(3) * t1362;
t1429 = qJD(3) * t1364;
t1428 = t1339 * t1337;
t1427 = t1364 * t1362;
t1411 = qJD(1) ^ 2;
t1426 = t1434 * t1411;
t1425 = qJD(5) - t1395;
t1406 = sin(qJ(1));
t1409 = cos(qJ(1));
t1383 = t1406 * g(2) - t1409 * g(3);
t1370 = -t1411 * pkin(1) + t1383;
t1400 = sin(pkin(8));
t1402 = cos(pkin(8));
t1384 = t1409 * g(2) + t1406 * g(3);
t1413 = qJDD(1) * pkin(1) + t1384;
t1348 = t1402 * t1370 + t1400 * t1413;
t1341 = -t1411 * pkin(2) + qJDD(1) * pkin(6) + t1348;
t1397 = -g(1) + qJDD(2);
t1329 = t1408 * t1341 + t1405 * t1397;
t1424 = t1405 * qJDD(1);
t1423 = t1408 * qJDD(1);
t1388 = t1408 * t1411 * t1405;
t1381 = qJDD(3) + t1388;
t1422 = -qJDD(3) - qJDD(5);
t1396 = t1405 ^ 2;
t1421 = t1396 + t1434;
t1420 = qJD(3) * t1432;
t1419 = qJD(3) * t1431;
t1328 = -t1405 * t1341 + t1408 * t1397;
t1372 = t1419 + t1424;
t1314 = (-t1372 + t1419) * qJ(4) + t1381 * pkin(3) + t1328;
t1380 = qJD(3) * pkin(3) - qJ(4) * t1432;
t1414 = -t1420 + t1423;
t1315 = -pkin(3) * t1426 + t1414 * qJ(4) - qJD(3) * t1380 + t1329;
t1287 = t1399 * t1314 + t1401 * t1315 + t1362 * t1433;
t1349 = t1401 * t1372 + t1399 * t1414;
t1327 = -t1349 - t1430;
t1417 = t1399 * t1372 - t1401 * t1414;
t1418 = -t1404 * t1349 - t1407 * t1417;
t1347 = -t1400 * t1370 + t1402 * t1413;
t1343 = qJDD(3) - t1427;
t1286 = t1401 * t1314 - t1399 * t1315 + t1364 * t1433;
t1374 = -t1400 * qJDD(1) - t1402 * t1411;
t1375 = t1402 * qJDD(1) - t1400 * t1411;
t1416 = t1409 * t1374 - t1406 * t1375;
t1415 = -t1406 * t1374 - t1409 * t1375;
t1340 = -qJDD(1) * pkin(2) - t1411 * pkin(6) - t1347;
t1412 = -t1407 * t1349 + t1404 * t1417;
t1318 = -t1414 * pkin(3) - qJ(4) * t1426 + t1380 * t1432 + qJDD(4) + t1340;
t1410 = qJD(3) ^ 2;
t1387 = -t1410 - t1426;
t1386 = -t1396 * t1411 - t1410;
t1382 = -qJDD(3) + t1388;
t1379 = t1421 * t1411;
t1378 = -t1409 * qJDD(1) + t1406 * t1411;
t1377 = t1406 * qJDD(1) + t1409 * t1411;
t1376 = t1421 * qJDD(1);
t1373 = -0.2e1 * t1420 + t1423;
t1371 = 0.2e1 * t1419 + t1424;
t1357 = -t1410 - t1436;
t1356 = qJD(3) * pkin(4) - t1364 * pkin(7);
t1355 = t1408 * t1382 - t1405 * t1386;
t1354 = -t1405 * t1381 + t1408 * t1387;
t1353 = t1405 * t1382 + t1408 * t1386;
t1352 = t1408 * t1381 + t1405 * t1387;
t1351 = t1402 * t1376 - t1400 * t1379;
t1350 = t1400 * t1376 + t1402 * t1379;
t1344 = -qJDD(3) - t1427;
t1342 = -t1410 - t1437;
t1334 = t1402 * t1355 + t1400 * t1371;
t1333 = t1402 * t1354 - t1400 * t1373;
t1332 = t1400 * t1355 - t1402 * t1371;
t1331 = t1400 * t1354 + t1402 * t1373;
t1330 = -t1435 - t1438;
t1326 = t1349 - t1430;
t1325 = -t1417 + t1429;
t1324 = t1417 + t1429;
t1323 = -t1436 - t1437;
t1322 = t1401 * t1344 - t1399 * t1357;
t1321 = t1399 * t1344 + t1401 * t1357;
t1320 = -t1400 * t1347 + t1402 * t1348;
t1319 = t1402 * t1347 + t1400 * t1348;
t1317 = t1401 * t1342 - t1399 * t1343;
t1316 = t1399 * t1342 + t1401 * t1343;
t1312 = t1422 - t1428;
t1311 = -t1422 - t1428;
t1310 = -t1435 - t1439;
t1307 = -t1405 * t1328 + t1408 * t1329;
t1306 = t1408 * t1328 + t1405 * t1329;
t1305 = t1401 * t1325 - t1399 * t1327;
t1304 = t1399 * t1325 + t1401 * t1327;
t1303 = -t1438 - t1439;
t1302 = -t1405 * t1321 + t1408 * t1322;
t1301 = t1408 * t1321 + t1405 * t1322;
t1300 = t1407 * t1312 - t1404 * t1330;
t1299 = t1404 * t1312 + t1407 * t1330;
t1298 = t1402 * t1307 + t1400 * t1340;
t1297 = t1400 * t1307 - t1402 * t1340;
t1296 = t1425 * t1337 + t1412;
t1295 = -t1440 * t1337 - t1412;
t1294 = -t1425 * t1339 + t1418;
t1293 = t1440 * t1339 - t1418;
t1292 = t1417 * pkin(4) - t1437 * pkin(7) + t1364 * t1356 + t1318;
t1291 = -t1405 * t1316 + t1408 * t1317;
t1290 = t1408 * t1316 + t1405 * t1317;
t1289 = t1407 * t1310 - t1404 * t1311;
t1288 = t1404 * t1310 + t1407 * t1311;
t1285 = t1402 * t1302 + t1400 * t1326;
t1284 = t1400 * t1302 - t1402 * t1326;
t1283 = -t1405 * t1304 + t1408 * t1305;
t1282 = t1408 * t1304 + t1405 * t1305;
t1281 = t1402 * t1291 + t1400 * t1324;
t1280 = t1400 * t1291 - t1402 * t1324;
t1279 = -t1437 * pkin(4) - t1417 * pkin(7) - qJD(3) * t1356 + t1287;
t1278 = t1343 * pkin(4) + t1327 * pkin(7) + t1286;
t1277 = t1402 * t1283 + t1400 * t1323;
t1276 = t1400 * t1283 - t1402 * t1323;
t1275 = -t1399 * t1299 + t1401 * t1300;
t1274 = t1401 * t1299 + t1399 * t1300;
t1273 = t1407 * t1294 - t1404 * t1296;
t1272 = t1404 * t1294 + t1407 * t1296;
t1271 = -t1399 * t1288 + t1401 * t1289;
t1270 = t1401 * t1288 + t1399 * t1289;
t1269 = -t1399 * t1286 + t1401 * t1287;
t1268 = t1401 * t1286 + t1399 * t1287;
t1267 = t1404 * t1278 + t1407 * t1279;
t1266 = t1407 * t1278 - t1404 * t1279;
t1265 = -t1405 * t1274 + t1408 * t1275;
t1264 = t1408 * t1274 + t1405 * t1275;
t1263 = -t1399 * t1272 + t1401 * t1273;
t1262 = t1401 * t1272 + t1399 * t1273;
t1261 = -t1405 * t1270 + t1408 * t1271;
t1260 = t1408 * t1270 + t1405 * t1271;
t1259 = t1402 * t1265 + t1400 * t1295;
t1258 = t1400 * t1265 - t1402 * t1295;
t1257 = -t1405 * t1268 + t1408 * t1269;
t1256 = t1408 * t1268 + t1405 * t1269;
t1255 = t1402 * t1257 + t1400 * t1318;
t1254 = t1400 * t1257 - t1402 * t1318;
t1253 = t1402 * t1261 + t1400 * t1293;
t1252 = t1400 * t1261 - t1402 * t1293;
t1251 = -t1404 * t1266 + t1407 * t1267;
t1250 = t1407 * t1266 + t1404 * t1267;
t1249 = -t1405 * t1262 + t1408 * t1263;
t1248 = t1408 * t1262 + t1405 * t1263;
t1247 = t1402 * t1249 + t1400 * t1303;
t1246 = t1400 * t1249 - t1402 * t1303;
t1245 = -t1399 * t1250 + t1401 * t1251;
t1244 = t1401 * t1250 + t1399 * t1251;
t1243 = -t1405 * t1244 + t1408 * t1245;
t1242 = t1408 * t1244 + t1405 * t1245;
t1241 = t1402 * t1243 + t1400 * t1292;
t1240 = t1400 * t1243 - t1402 * t1292;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1397, 0, 0, 0, 0, 0, 0, t1352, t1353, 0, t1306, 0, 0, 0, 0, 0, 0, t1290, t1301, t1282, t1256, 0, 0, 0, 0, 0, 0, t1260, t1264, t1248, t1242; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1378, t1377, 0, -t1406 * t1383 - t1409 * t1384, 0, 0, 0, 0, 0, 0, t1415, -t1416, 0, -t1409 * t1319 - t1406 * t1320, 0, 0, 0, 0, 0, 0, -t1409 * t1331 - t1406 * t1333, -t1409 * t1332 - t1406 * t1334, -t1409 * t1350 - t1406 * t1351, -t1409 * t1297 - t1406 * t1298, 0, 0, 0, 0, 0, 0, -t1409 * t1280 - t1406 * t1281, -t1409 * t1284 - t1406 * t1285, -t1409 * t1276 - t1406 * t1277, -t1409 * t1254 - t1406 * t1255, 0, 0, 0, 0, 0, 0, -t1409 * t1252 - t1406 * t1253, -t1409 * t1258 - t1406 * t1259, -t1409 * t1246 - t1406 * t1247, -t1409 * t1240 - t1406 * t1241; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1377, t1378, 0, t1409 * t1383 - t1406 * t1384, 0, 0, 0, 0, 0, 0, t1416, t1415, 0, -t1406 * t1319 + t1409 * t1320, 0, 0, 0, 0, 0, 0, -t1406 * t1331 + t1409 * t1333, -t1406 * t1332 + t1409 * t1334, -t1406 * t1350 + t1409 * t1351, -t1406 * t1297 + t1409 * t1298, 0, 0, 0, 0, 0, 0, -t1406 * t1280 + t1409 * t1281, -t1406 * t1284 + t1409 * t1285, -t1406 * t1276 + t1409 * t1277, -t1406 * t1254 + t1409 * t1255, 0, 0, 0, 0, 0, 0, -t1406 * t1252 + t1409 * t1253, -t1406 * t1258 + t1409 * t1259, -t1406 * t1246 + t1409 * t1247, -t1406 * t1240 + t1409 * t1241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1411, -qJDD(1), 0, t1383, 0, 0, 0, 0, 0, 0, t1374, -t1375, 0, t1320, 0, 0, 0, 0, 0, 0, t1333, t1334, t1351, t1298, 0, 0, 0, 0, 0, 0, t1281, t1285, t1277, t1255, 0, 0, 0, 0, 0, 0, t1253, t1259, t1247, t1241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1411, 0, t1384, 0, 0, 0, 0, 0, 0, t1375, t1374, 0, t1319, 0, 0, 0, 0, 0, 0, t1331, t1332, t1350, t1297, 0, 0, 0, 0, 0, 0, t1280, t1284, t1276, t1254, 0, 0, 0, 0, 0, 0, t1252, t1258, t1246, t1240; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1397, 0, 0, 0, 0, 0, 0, t1352, t1353, 0, t1306, 0, 0, 0, 0, 0, 0, t1290, t1301, t1282, t1256, 0, 0, 0, 0, 0, 0, t1260, t1264, t1248, t1242; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1411, -qJDD(1), 0, t1348, 0, 0, 0, 0, 0, 0, t1354, t1355, t1376, t1307, 0, 0, 0, 0, 0, 0, t1291, t1302, t1283, t1257, 0, 0, 0, 0, 0, 0, t1261, t1265, t1249, t1243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1411, 0, t1347, 0, 0, 0, 0, 0, 0, t1373, -t1371, t1379, -t1340, 0, 0, 0, 0, 0, 0, -t1324, -t1326, -t1323, -t1318, 0, 0, 0, 0, 0, 0, -t1293, -t1295, -t1303, -t1292; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1397, 0, 0, 0, 0, 0, 0, t1352, t1353, 0, t1306, 0, 0, 0, 0, 0, 0, t1290, t1301, t1282, t1256, 0, 0, 0, 0, 0, 0, t1260, t1264, t1248, t1242; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1387, t1382, t1423, t1329, 0, 0, 0, 0, 0, 0, t1317, t1322, t1305, t1269, 0, 0, 0, 0, 0, 0, t1271, t1275, t1263, t1245; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1381, t1386, -t1424, t1328, 0, 0, 0, 0, 0, 0, t1316, t1321, t1304, t1268, 0, 0, 0, 0, 0, 0, t1270, t1274, t1262, t1244; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1373, t1371, -t1379, t1340, 0, 0, 0, 0, 0, 0, t1324, t1326, t1323, t1318, 0, 0, 0, 0, 0, 0, t1293, t1295, t1303, t1292; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1342, t1344, t1325, t1287, 0, 0, 0, 0, 0, 0, t1289, t1300, t1273, t1251; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1343, t1357, t1327, t1286, 0, 0, 0, 0, 0, 0, t1288, t1299, t1272, t1250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1324, t1326, t1323, t1318, 0, 0, 0, 0, 0, 0, t1293, t1295, t1303, t1292; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1310, t1312, t1294, t1267; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1311, t1330, t1296, t1266; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1293, t1295, t1303, t1292;];
f_new_reg = t1;
