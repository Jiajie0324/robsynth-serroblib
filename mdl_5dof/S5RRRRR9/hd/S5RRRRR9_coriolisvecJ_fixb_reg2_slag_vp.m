% Calculate inertial parameters regressor of coriolis joint torque vector for
% S5RRRRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4,d5]';
% 
% Output:
% tauc_reg [5x(5*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:31
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S5RRRRR9_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR9_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR9_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRR9_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:29:52
% EndTime: 2019-12-31 22:30:12
% DurationCPUTime: 7.52s
% Computational Cost: add. (11052->497), mult. (26985->700), div. (0->0), fcn. (18768->8), ass. (0->224)
t239 = sin(qJ(2));
t242 = cos(qJ(2));
t254 = pkin(2) * t239 - pkin(7) * t242;
t196 = t254 * qJD(1);
t241 = cos(qJ(3));
t238 = sin(qJ(3));
t292 = qJD(1) * t239;
t267 = t238 * t292;
t147 = pkin(6) * t267 + t196 * t241;
t301 = t241 * t242;
t250 = pkin(3) * t239 - pkin(8) * t301;
t331 = -pkin(8) - pkin(7);
t274 = qJD(3) * t331;
t359 = qJD(1) * t250 - t241 * t274 + t147;
t175 = t238 * t196;
t302 = t239 * t241;
t303 = t238 * t242;
t358 = t175 + (-pkin(6) * t302 - pkin(8) * t303) * qJD(1) - t238 * t274;
t283 = t241 * qJD(2);
t188 = t267 - t283;
t266 = t241 * t292;
t284 = t238 * qJD(2);
t190 = t266 + t284;
t237 = sin(qJ(4));
t240 = cos(qJ(4));
t125 = t188 * t240 + t190 * t237;
t236 = sin(qJ(5));
t252 = -t188 * t237 + t190 * t240;
t330 = cos(qJ(5));
t345 = -t125 * t236 + t252 * t330;
t65 = t125 * t330 + t236 * t252;
t329 = t65 * t345;
t305 = t237 * t238;
t191 = -t240 * t241 + t305;
t279 = qJD(3) + qJD(4);
t282 = t242 * qJD(1);
t286 = qJD(4) * t240;
t288 = qJD(3) * t241;
t296 = -t191 * t282 - t240 * t288 - t241 * t286 + t279 * t305;
t192 = t237 * t241 + t238 * t240;
t138 = t279 * t192;
t295 = -t192 * t282 + t138;
t351 = t345 ^ 2 - t65 ^ 2;
t221 = -qJD(3) + t282;
t212 = -qJD(4) + t221;
t341 = pkin(9) * t252;
t201 = -pkin(2) * t242 - pkin(7) * t239 - pkin(1);
t181 = t201 * qJD(1);
t230 = pkin(6) * t282;
t208 = qJD(2) * pkin(7) + t230;
t133 = t181 * t241 - t208 * t238;
t99 = -pkin(8) * t190 + t133;
t89 = -pkin(3) * t221 + t99;
t134 = t181 * t238 + t208 * t241;
t100 = -pkin(8) * t188 + t134;
t92 = t237 * t100;
t37 = t240 * t89 - t92;
t32 = t37 - t341;
t30 = -pkin(4) * t212 + t32;
t354 = t125 * pkin(9);
t94 = t240 * t100;
t38 = t237 * t89 + t94;
t33 = t38 - t354;
t321 = t236 * t33;
t8 = t30 * t330 - t321;
t276 = t330 * t33;
t9 = t236 * t30 + t276;
t357 = t9 * t345 - t8 * t65;
t281 = qJD(1) * qJD(2);
t264 = t242 * t281;
t280 = qJD(2) * qJD(3);
t145 = qJD(3) * t267 + (-t264 - t280) * t241;
t272 = t242 * t284;
t247 = t239 * t288 + t272;
t146 = qJD(1) * t247 + t238 * t280;
t287 = qJD(4) * t237;
t249 = -t145 * t237 + t146 * t240 - t188 * t287 + t190 * t286;
t265 = qJD(5) * t330;
t285 = qJD(5) * t236;
t52 = t145 * t240 + t146 * t237 + t188 * t286 + t190 * t287;
t20 = t125 * t265 + t236 * t249 + t252 * t285 + t330 * t52;
t205 = -qJD(5) + t212;
t349 = -t205 * t65 - t20;
t224 = t239 * t281;
t199 = t254 * qJD(2);
t182 = qJD(1) * t199;
t257 = pkin(6) * t224;
t81 = -qJD(3) * t134 + t182 * t241 + t238 * t257;
t47 = pkin(3) * t224 + t145 * pkin(8) + t81;
t289 = qJD(3) * t238;
t80 = t181 * t288 + t182 * t238 - t208 * t289 - t241 * t257;
t56 = -pkin(8) * t146 + t80;
t11 = -qJD(4) * t38 - t237 * t56 + t240 * t47;
t6 = pkin(4) * t224 + t52 * pkin(9) + t11;
t261 = t100 * t287 - t237 * t47 - t240 * t56 - t286 * t89;
t7 = -pkin(9) * t249 - t261;
t246 = -t236 * t6 - t265 * t30 + t285 * t33 - t330 * t7;
t229 = pkin(6) * t292;
t322 = qJD(2) * pkin(2);
t207 = t229 - t322;
t150 = pkin(3) * t188 + t207;
t87 = pkin(4) * t125 + t150;
t348 = t65 * t87 + t246;
t209 = t331 * t238;
t210 = t331 * t241;
t324 = -t209 * t286 - t210 * t287 + t237 * t359 + t240 * t358;
t144 = t209 * t237 - t210 * t240;
t323 = qJD(4) * t144 - t237 * t358 + t240 * t359;
t2 = -qJD(5) * t9 - t236 * t7 + t330 * t6;
t335 = -t345 * t87 + t2;
t21 = qJD(5) * t345 - t236 * t52 + t249 * t330;
t333 = -t205 * t345 - t21;
t353 = -pkin(4) * t292 + pkin(9) * t296 - t323;
t352 = pkin(9) * t295 + t324;
t318 = t125 * t252;
t350 = -t125 ^ 2 + t252 ^ 2;
t347 = -t125 * t212 - t52;
t346 = t125 * t150 + t261;
t342 = -0.2e1 * t281;
t340 = t133 * t221 + t80;
t339 = t134 * t221 - t81;
t187 = t241 * t201;
t132 = -pkin(8) * t302 + t187 + (-pkin(6) * t238 - pkin(3)) * t242;
t223 = pkin(6) * t301;
t155 = t201 * t238 + t223;
t304 = t238 * t239;
t139 = -pkin(8) * t304 + t155;
t74 = t132 * t237 + t139 * t240;
t255 = -t230 + (-t238 * t282 + t289) * pkin(3);
t270 = t239 * t289;
t271 = t242 * t283;
t336 = -t270 + t271;
t334 = -t150 * t252 + t11;
t332 = -t212 * t252 - t249;
t233 = t239 * pkin(6);
t143 = t209 * t240 + t210 * t237;
t105 = -pkin(9) * t192 + t143;
t106 = -pkin(9) * t191 + t144;
t57 = t105 * t330 - t106 * t236;
t328 = t57 * qJD(5) + t236 * t353 - t330 * t352;
t58 = t105 * t236 + t106 * t330;
t327 = -t58 * qJD(5) + t236 * t352 + t330 * t353;
t326 = t191 * t265 + t192 * t285 + t236 * t295 + t296 * t330;
t130 = -t191 * t236 + t192 * t330;
t325 = t130 * qJD(5) - t236 * t296 + t295 * t330;
t44 = t240 * t99 - t92;
t227 = pkin(3) * t240 + pkin(4);
t306 = t236 * t237;
t43 = -t237 * t99 - t94;
t34 = t43 + t354;
t35 = t44 - t341;
t320 = -t236 * t34 - t330 * t35 + t227 * t265 + (-t237 * t285 + (t240 * t330 - t306) * qJD(4)) * pkin(3);
t273 = t330 * t237;
t319 = t236 * t35 - t330 * t34 - t227 * t285 + (-t237 * t265 + (-t236 * t240 - t273) * qJD(4)) * pkin(3);
t315 = t145 * t238;
t314 = t146 * t241;
t313 = t188 * t221;
t312 = t190 * t188;
t311 = t190 * t221;
t310 = t207 * t238;
t309 = t207 * t241;
t308 = t221 * t238;
t307 = t221 * t241;
t244 = qJD(1) ^ 2;
t300 = t242 * t244;
t243 = qJD(2) ^ 2;
t299 = t243 * t239;
t298 = t243 * t242;
t297 = pkin(4) * t295 + t255;
t294 = t199 * t241 + t233 * t284;
t200 = pkin(3) * t304 + t233;
t234 = t239 ^ 2;
t293 = -t242 ^ 2 + t234;
t291 = qJD(2) * t239;
t290 = qJD(2) * t242;
t278 = pkin(6) * t303;
t231 = pkin(6) * t290;
t275 = t239 * t300;
t151 = pkin(3) * t247 + t231;
t228 = -pkin(3) * t241 - pkin(2);
t268 = t221 * t288;
t120 = t146 * pkin(3) + pkin(6) * t264;
t260 = pkin(1) * t342;
t73 = t132 * t240 - t139 * t237;
t259 = t188 + t283;
t258 = -t190 + t284;
t256 = t242 * t224;
t253 = -t133 * t241 - t134 * t238;
t251 = qJD(1) * t234 - t221 * t242;
t164 = t191 * t239;
t55 = -pkin(4) * t242 + pkin(9) * t164 + t73;
t163 = t192 * t239;
t59 = -pkin(9) * t163 + t74;
t26 = -t236 * t59 + t330 * t55;
t27 = t236 * t55 + t330 * t59;
t102 = -t163 * t236 - t164 * t330;
t72 = t250 * qJD(2) + (-t223 + (pkin(8) * t239 - t201) * t238) * qJD(3) + t294;
t97 = t238 * t199 + t201 * t288 + (-t239 * t283 - t242 * t289) * pkin(6);
t79 = -pkin(8) * t247 + t97;
t24 = t132 * t286 - t139 * t287 + t237 * t72 + t240 * t79;
t25 = -qJD(4) * t74 - t237 * t79 + t240 * t72;
t170 = pkin(3) * t273 + t227 * t236;
t169 = -pkin(3) * t306 + t227 * t330;
t158 = pkin(4) * t191 + t228;
t154 = t187 - t278;
t148 = -pkin(6) * t266 + t175;
t135 = pkin(4) * t163 + t200;
t129 = t191 * t330 + t192 * t236;
t101 = t163 * t330 - t164 * t236;
t98 = -qJD(3) * t155 + t294;
t91 = pkin(3) * t190 + pkin(4) * t252;
t83 = -t287 * t304 + (t279 * t302 + t272) * t240 + t336 * t237;
t82 = t138 * t239 + t237 * t272 - t240 * t271;
t60 = pkin(4) * t83 + t151;
t36 = pkin(4) * t249 + t120;
t29 = qJD(5) * t102 - t236 * t82 + t330 * t83;
t28 = t163 * t265 - t164 * t285 + t236 * t83 + t330 * t82;
t19 = -pkin(9) * t83 + t24;
t16 = pkin(4) * t291 + t82 * pkin(9) + t25;
t13 = t32 * t330 - t321;
t12 = -t236 * t32 - t276;
t4 = -qJD(5) * t27 + t16 * t330 - t236 * t19;
t3 = qJD(5) * t26 + t16 * t236 + t19 * t330;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t256, t293 * t342, t298, -0.2e1 * t256, -t299, 0, -pkin(6) * t298 + t239 * t260, pkin(6) * t299 + t242 * t260, 0, 0, -t145 * t302 + t190 * t336, (-t188 * t241 - t190 * t238) * t290 + (t315 - t314 + (t188 * t238 - t190 * t241) * qJD(3)) * t239, t221 * t270 + t145 * t242 + (t190 * t239 + t241 * t251) * qJD(2), t146 * t304 + t188 * t247, t239 * t268 + t146 * t242 + (-t188 * t239 - t238 * t251) * qJD(2), (-t221 - t282) * t291, -t98 * t221 - t81 * t242 + (pkin(6) * t146 + t207 * t288) * t239 + ((pkin(6) * t188 + t310) * t242 + (t133 + (t154 + t278) * qJD(1)) * t239) * qJD(2), t97 * t221 + t80 * t242 + (-pkin(6) * t145 - t207 * t289) * t239 + ((pkin(6) * t190 + t309) * t242 + (-t134 + (-t155 + t223) * qJD(1)) * t239) * qJD(2), t154 * t145 - t155 * t146 - t97 * t188 - t98 * t190 + t253 * t290 + (-t238 * t80 - t241 * t81 + (t133 * t238 - t134 * t241) * qJD(3)) * t239, t133 * t98 + t134 * t97 + t81 * t154 + t80 * t155 + (t207 + t229) * t231, t164 * t52 - t252 * t82, t125 * t82 + t163 * t52 + t164 * t249 - t252 * t83, t212 * t82 + t242 * t52 + (-qJD(1) * t164 + t252) * t291, t125 * t83 + t163 * t249, t242 * t249 + t212 * t83 + (-qJD(1) * t163 - t125) * t291, (-t212 - t282) * t291, -t25 * t212 - t11 * t242 + t151 * t125 + t200 * t249 + t120 * t163 + t150 * t83 + (qJD(1) * t73 + t37) * t291, -t261 * t242 - t120 * t164 + t151 * t252 - t150 * t82 - t200 * t52 + t24 * t212 + (-qJD(1) * t74 - t38) * t291, t11 * t164 - t125 * t24 + t163 * t261 - t249 * t74 - t25 * t252 + t37 * t82 - t38 * t83 + t52 * t73, t11 * t73 + t120 * t200 + t150 * t151 + t24 * t38 + t25 * t37 - t261 * t74, -t102 * t20 - t28 * t345, t101 * t20 - t102 * t21 + t28 * t65 - t29 * t345, t20 * t242 + t28 * t205 + (qJD(1) * t102 + t345) * t291, t101 * t21 + t29 * t65, t29 * t205 + t21 * t242 + (-qJD(1) * t101 - t65) * t291, (-t205 - t282) * t291, t36 * t101 + t135 * t21 - t2 * t242 - t4 * t205 + t87 * t29 + t60 * t65 + (qJD(1) * t26 + t8) * t291, -t246 * t242 + t36 * t102 - t135 * t20 + t3 * t205 - t87 * t28 + t60 * t345 + (-qJD(1) * t27 - t9) * t291, t101 * t246 - t102 * t2 + t20 * t26 - t21 * t27 + t28 * t8 - t29 * t9 - t3 * t65 - t345 * t4, t135 * t36 + t2 * t26 - t246 * t27 + t3 * t9 + t4 * t8 + t60 * t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t275, t293 * t244, 0, t275, 0, 0, t244 * pkin(1) * t239, pkin(1) * t300, 0, 0, -t190 * t307 - t315, (-t145 + t313) * t241 + (-t146 + t311) * t238, -t268 + (t221 * t301 + t239 * t258) * qJD(1), -t188 * t308 - t314, t221 * t289 + (-t221 * t303 + t239 * t259) * qJD(1), t221 * t292, -pkin(2) * t146 + t147 * t221 + (pkin(7) * t307 + t310) * qJD(3) + ((-pkin(7) * t284 - t133) * t239 + (-pkin(6) * t259 - t310) * t242) * qJD(1), pkin(2) * t145 - t148 * t221 + (-pkin(7) * t308 + t309) * qJD(3) + ((-pkin(7) * t283 + t134) * t239 + (pkin(6) * t258 - t309) * t242) * qJD(1), t147 * t190 + t148 * t188 + ((qJD(3) * t190 - t146) * pkin(7) + t340) * t241 + ((qJD(3) * t188 - t145) * pkin(7) + t339) * t238, -t133 * t147 - t134 * t148 + (-t207 - t322) * t230 + (qJD(3) * t253 - t81 * t238 + t80 * t241) * pkin(7), -t192 * t52 - t252 * t296, t125 * t296 + t52 * t191 - t192 * t249 - t252 * t295, t296 * t212 + (qJD(2) * t192 - t252) * t292, t125 * t295 + t191 * t249, t295 * t212 + (-qJD(2) * t191 + t125) * t292, t212 * t292, t228 * t249 + t120 * t191 + t323 * t212 + t295 * t150 + t255 * t125 + (qJD(2) * t143 - t37) * t292, t120 * t192 - t228 * t52 - t324 * t212 - t296 * t150 + t255 * t252 + (-qJD(2) * t144 + t38) * t292, -t11 * t192 + t125 * t324 + t143 * t52 - t144 * t249 + t191 * t261 + t252 * t323 - t295 * t38 + t296 * t37, t11 * t143 + t120 * t228 - t144 * t261 + t150 * t255 - t323 * t37 - t324 * t38, -t130 * t20 - t326 * t345, t20 * t129 - t130 * t21 - t325 * t345 + t326 * t65, t326 * t205 + (qJD(2) * t130 - t345) * t292, t129 * t21 + t325 * t65, t325 * t205 + (-qJD(2) * t129 + t65) * t292, t205 * t292, t36 * t129 + t158 * t21 + t325 * t87 + t297 * t65 - t327 * t205 + (qJD(2) * t57 - t8) * t292, t36 * t130 - t158 * t20 - t326 * t87 + t297 * t345 + t328 * t205 + (-qJD(2) * t58 + t9) * t292, t129 * t246 - t2 * t130 + t57 * t20 - t58 * t21 - t325 * t9 + t326 * t8 - t327 * t345 - t328 * t65, t36 * t158 + t2 * t57 - t246 * t58 + t297 * t87 + t327 * t8 + t328 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t312, -t188 ^ 2 + t190 ^ 2, -t145 - t313, -t312, -t146 - t311, t224, -t207 * t190 - t339, t188 * t207 - t340, 0, 0, t318, t350, t347, -t318, t332, t224, t43 * t212 + (-t125 * t190 + t212 * t287 + t224 * t240) * pkin(3) + t334, -t44 * t212 + (-t190 * t252 + t212 * t286 - t224 * t237) * pkin(3) + t346, t38 * t252 + t44 * t125 - t37 * t125 + t43 * t252 + (-t237 * t249 + t240 * t52 + (-t125 * t240 + t237 * t252) * qJD(4)) * pkin(3), -t37 * t43 - t38 * t44 + (-t261 * t237 + t11 * t240 - t150 * t190 + (-t237 * t37 + t240 * t38) * qJD(4)) * pkin(3), t329, t351, t349, -t329, t333, t224, t169 * t224 - t205 * t319 - t91 * t65 + t335, -t170 * t224 + t205 * t320 - t345 * t91 + t348, t169 * t20 - t170 * t21 - t319 * t345 - t320 * t65 + t357, t2 * t169 - t170 * t246 + t319 * t8 + t320 * t9 - t87 * t91; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t318, t350, t347, -t318, t332, t224, -t38 * t212 + t334, -t212 * t37 + t346, 0, 0, t329, t351, t349, -t329, t333, t224, t12 * t205 + (t205 * t285 + t224 * t330 - t252 * t65) * pkin(4) + t335, -t13 * t205 + (t205 * t265 - t224 * t236 - t252 * t345) * pkin(4) + t348, t12 * t345 + t13 * t65 + (t330 * t20 - t21 * t236 + (t236 * t345 - t330 * t65) * qJD(5)) * pkin(4) + t357, -t8 * t12 - t9 * t13 + (t330 * t2 - t246 * t236 - t252 * t87 + (-t236 * t8 + t330 * t9) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t329, t351, t349, -t329, t333, t224, -t205 * t9 + t335, -t205 * t8 + t348, 0, 0;];
tauc_reg = t1;
