% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:31
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRRR9_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR9_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR9_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR9_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR9_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRR9_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:30:10
% EndTime: 2019-12-31 22:30:37
% DurationCPUTime: 16.79s
% Computational Cost: add. (117313->671), mult. (239546->1026), div. (0->0), fcn. (172765->10), ass. (0->468)
t777 = sin(qJ(3));
t782 = cos(qJ(3));
t778 = sin(qJ(2));
t817 = qJD(1) * t778;
t733 = -t782 * qJD(2) + t777 * t817;
t783 = cos(qJ(2));
t816 = t783 * qJD(1);
t762 = -qJD(3) + t816;
t718 = t733 * t762;
t812 = qJD(1) * qJD(2);
t800 = t783 * t812;
t811 = t778 * qJDD(1);
t738 = t800 + t811;
t801 = t733 * qJD(3) - t777 * qJDD(2) - t782 * t738;
t660 = t718 + t801;
t775 = sin(qJ(5));
t765 = t778 * t812;
t809 = t783 * qJDD(1);
t739 = -t765 + t809;
t730 = -qJDD(3) + t739;
t726 = -qJDD(4) + t730;
t721 = -qJDD(5) + t726;
t734 = t777 * qJD(2) + t782 * t817;
t776 = sin(qJ(4));
t781 = cos(qJ(4));
t694 = t781 * t733 + t776 * t734;
t696 = -t776 * t733 + t781 * t734;
t780 = cos(qJ(5));
t639 = t780 * t694 + t775 * t696;
t641 = -t775 * t694 + t780 * t696;
t849 = t641 * t639;
t786 = -t721 - t849;
t863 = t775 * t786;
t848 = t696 * t694;
t787 = -t726 - t848;
t862 = t776 * t787;
t847 = t734 * t733;
t790 = -t730 - t847;
t861 = t777 * t790;
t860 = t780 * t786;
t859 = t781 * t787;
t858 = t782 * t790;
t754 = -qJD(4) + t762;
t747 = -qJD(5) + t754;
t625 = t639 * t747;
t791 = t782 * qJDD(2) - t777 * t738;
t788 = t734 * qJD(3) - t791;
t798 = -t776 * t801 + t781 * t788;
t613 = -t696 * qJD(4) - t798;
t614 = -t694 * qJD(4) - t776 * t788 - t781 * t801;
t789 = t639 * qJD(5) - t775 * t613 - t780 * t614;
t857 = t625 - t789;
t681 = t694 * t754;
t589 = t681 - t614;
t856 = t681 + t614;
t659 = t801 - t718;
t799 = -t780 * t613 + t775 * t614;
t510 = (qJD(5) + t747) * t641 + t799;
t585 = (qJD(4) + t754) * t696 + t798;
t655 = (qJD(3) + t762) * t734 - t791;
t637 = t639 ^ 2;
t638 = t641 ^ 2;
t855 = t694 ^ 2;
t693 = t696 ^ 2;
t854 = t733 ^ 2;
t729 = t734 ^ 2;
t744 = t747 ^ 2;
t753 = t754 ^ 2;
t760 = t762 ^ 2;
t853 = qJD(2) ^ 2;
t852 = pkin(2) * t778;
t851 = pkin(2) * t783;
t850 = t783 * g(3);
t846 = t747 * t775;
t845 = t747 * t780;
t844 = t754 * t776;
t843 = t754 * t781;
t842 = t762 * t777;
t841 = t762 * t782;
t771 = t778 ^ 2;
t785 = qJD(1) ^ 2;
t840 = t771 * t785;
t779 = sin(qJ(1));
t784 = cos(qJ(1));
t752 = t784 * g(1) + t779 * g(2);
t724 = -t785 * pkin(1) + qJDD(1) * pkin(6) - t752;
t795 = -pkin(7) * t778 - t851;
t736 = t795 * qJD(1);
t670 = t850 - qJDD(2) * pkin(2) - t853 * pkin(7) + (qJD(1) * t736 + t724) * t778;
t713 = -t762 * pkin(3) - t734 * pkin(8);
t598 = t788 * pkin(3) - t854 * pkin(8) + t734 * t713 + t670;
t674 = -t754 * pkin(4) - t696 * pkin(9);
t515 = -t613 * pkin(4) - t855 * pkin(9) + t696 * t674 + t598;
t839 = t775 * t515;
t576 = t721 - t849;
t838 = t775 * t576;
t751 = t779 * g(1) - t784 * g(2);
t723 = qJDD(1) * pkin(1) + t785 * pkin(6) + t751;
t792 = -t739 + t765;
t793 = t738 + t800;
t654 = pkin(2) * t792 - pkin(7) * t793 - t723;
t712 = -t778 * g(3) + t783 * t724;
t671 = -t853 * pkin(2) + qJDD(2) * pkin(7) + t736 * t816 + t712;
t615 = -t782 * t654 + t777 * t671;
t562 = t790 * pkin(3) + t660 * pkin(8) - t615;
t616 = t777 * t654 + t782 * t671;
t566 = -t854 * pkin(3) - pkin(8) * t788 + t762 * t713 + t616;
t501 = -t781 * t562 + t776 * t566;
t471 = t787 * pkin(4) + t589 * pkin(9) - t501;
t502 = t776 * t562 + t781 * t566;
t479 = -t855 * pkin(4) + t613 * pkin(9) + t754 * t674 + t502;
t427 = -t780 * t471 + t775 * t479;
t428 = t775 * t471 + t780 * t479;
t393 = -t780 * t427 + t775 * t428;
t837 = t776 * t393;
t836 = t776 * t598;
t627 = t726 - t848;
t835 = t776 * t627;
t447 = -t781 * t501 + t776 * t502;
t834 = t777 * t447;
t833 = t777 * t670;
t684 = t730 - t847;
t832 = t777 * t684;
t831 = t778 * t723;
t761 = t783 * t785 * t778;
t749 = -t761 + qJDD(2);
t830 = t778 * t749;
t750 = qJDD(2) + t761;
t829 = t778 * t750;
t828 = t780 * t515;
t827 = t780 * t576;
t826 = t781 * t393;
t825 = t781 * t598;
t824 = t781 * t627;
t823 = t782 * t447;
t822 = t782 * t670;
t821 = t782 * t684;
t820 = t783 * t723;
t819 = t783 * t749;
t772 = t783 ^ 2;
t818 = t771 + t772;
t810 = t779 * qJDD(1);
t808 = t784 * qJDD(1);
t807 = t778 * t849;
t806 = t778 * t848;
t805 = t778 * t847;
t804 = t783 * t849;
t803 = t783 * t848;
t802 = t783 * t847;
t394 = t775 * t427 + t780 * t428;
t448 = t776 * t501 + t781 * t502;
t711 = t778 * t724 + t850;
t663 = t778 * t711 + t783 * t712;
t704 = -t779 * t751 - t784 * t752;
t797 = t779 * t761;
t796 = t784 * t761;
t743 = -t779 * t785 + t808;
t794 = -pkin(5) * t743 - t779 * g(3);
t555 = -t782 * t615 + t777 * t616;
t556 = t777 * t615 + t782 * t616;
t662 = t783 * t711 - t778 * t712;
t703 = t784 * t751 - t779 * t752;
t769 = t772 * t785;
t759 = -t769 - t853;
t758 = t769 - t853;
t757 = -t840 - t853;
t756 = -t840 + t853;
t746 = t769 - t840;
t745 = t769 + t840;
t742 = t784 * t785 + t810;
t741 = t818 * qJDD(1);
t740 = -0.2e1 * t765 + t809;
t737 = 0.2e1 * t800 + t811;
t732 = t783 * t750;
t731 = t818 * t812;
t720 = -pkin(5) * t742 + t784 * g(3);
t717 = -t729 + t760;
t716 = -t760 + t854;
t715 = t783 * t738 - t771 * t812;
t714 = -t778 * t739 - t772 * t812;
t710 = -t778 * t757 - t819;
t709 = -t778 * t756 + t732;
t708 = t783 * t759 - t829;
t707 = t783 * t758 - t830;
t706 = t783 * t757 - t830;
t705 = t778 * t759 + t732;
t701 = -t729 + t854;
t700 = t784 * t741 - t779 * t745;
t699 = t779 * t741 + t784 * t745;
t698 = -t729 - t760;
t697 = -t778 * t737 + t783 * t740;
t691 = -t760 - t854;
t683 = t729 + t854;
t680 = -t693 + t753;
t679 = -t753 + t855;
t678 = t784 * t710 + t779 * t737;
t677 = t784 * t708 - t779 * t740;
t676 = t779 * t710 - t784 * t737;
t675 = t779 * t708 + t784 * t740;
t673 = -pkin(6) * t706 - t820;
t672 = -pkin(6) * t705 - t831;
t669 = (t733 * t782 - t734 * t777) * t762;
t668 = (-t733 * t777 - t734 * t782) * t762;
t666 = -pkin(1) * t706 + t712;
t665 = -pkin(1) * t705 + t711;
t664 = -t693 - t753;
t656 = (-qJD(3) + t762) * t734 + t791;
t651 = t734 * t842 - t782 * t801;
t650 = t734 * t841 + t777 * t801;
t649 = -t733 * t841 + t777 * t788;
t648 = t733 * t842 + t782 * t788;
t647 = t783 * t669 - t778 * t730;
t646 = -t693 + t855;
t645 = t782 * t716 + t832;
t644 = -t777 * t717 + t858;
t643 = -t777 * t716 + t821;
t642 = -t782 * t717 - t861;
t636 = -t777 * t698 + t821;
t635 = t782 * t698 + t832;
t634 = -t753 - t855;
t633 = t784 * t663 - t779 * t723;
t632 = t779 * t663 + t784 * t723;
t631 = t782 * t691 - t861;
t630 = t777 * t691 + t858;
t624 = -t638 + t744;
t623 = t637 - t744;
t622 = (t694 * t781 - t696 * t776) * t754;
t621 = (t694 * t776 + t696 * t781) * t754;
t620 = -t638 - t744;
t619 = t783 * t651 + t805;
t618 = t783 * t649 - t805;
t617 = -t693 - t855;
t610 = -t655 * t782 - t777 * t660;
t609 = t782 * t656 + t659 * t777;
t608 = -t655 * t777 + t782 * t660;
t607 = -t777 * t656 + t659 * t782;
t606 = -pkin(7) * t635 + t822;
t605 = t783 * t645 - t778 * t655;
t604 = t783 * t644 - t778 * t660;
t603 = t781 * t679 + t835;
t602 = -t776 * t680 + t859;
t601 = t776 * t679 - t824;
t600 = t781 * t680 + t862;
t599 = -pkin(7) * t630 + t833;
t597 = t783 * t636 - t778 * t659;
t596 = t778 * t636 + t783 * t659;
t595 = -t776 * t664 + t824;
t594 = t781 * t664 + t835;
t593 = t783 * t631 - t778 * t656;
t592 = t778 * t631 + t783 * t656;
t591 = t637 - t638;
t590 = t783 * t609 - t778 * t701;
t584 = (qJD(4) - t754) * t696 + t798;
t583 = -t744 - t637;
t582 = t781 * t614 + t696 * t844;
t581 = t776 * t614 - t696 * t843;
t580 = -t776 * t613 - t694 * t843;
t579 = t781 * t613 - t694 * t844;
t575 = t781 * t634 - t862;
t574 = t776 * t634 + t859;
t573 = t783 * t610 - t778 * t683;
t572 = t778 * t610 + t783 * t683;
t571 = (t639 * t780 - t641 * t775) * t747;
t570 = (t639 * t775 + t641 * t780) * t747;
t569 = -pkin(2) * t635 + t616;
t568 = -t777 * t621 + t782 * t622;
t567 = -t782 * t621 - t777 * t622;
t565 = -pkin(2) * t630 + t615;
t563 = t783 * t568 - t778 * t726;
t559 = t784 * t597 + t779 * t635;
t558 = t779 * t597 - t784 * t635;
t557 = -t637 - t638;
t554 = t784 * t593 + t779 * t630;
t553 = t779 * t593 - t784 * t630;
t552 = t780 * t623 + t838;
t551 = -t775 * t624 + t860;
t550 = t775 * t623 - t827;
t549 = t780 * t624 + t863;
t548 = -t775 * t620 + t827;
t547 = t780 * t620 + t838;
t546 = -t777 * t601 + t782 * t603;
t545 = -t777 * t600 + t782 * t602;
t544 = -t782 * t601 - t777 * t603;
t543 = -t782 * t600 - t777 * t602;
t542 = t783 * t556 + t778 * t670;
t541 = t778 * t556 - t783 * t670;
t540 = -pkin(8) * t594 + t825;
t539 = -t777 * t594 + t782 * t595;
t538 = t782 * t594 + t777 * t595;
t537 = t784 * t573 + t779 * t608;
t536 = t779 * t573 - t784 * t608;
t535 = -pkin(8) * t574 + t836;
t533 = -t641 * qJD(5) - t799;
t532 = -t585 * t781 - t776 * t589;
t531 = -t781 * t584 - t776 * t856;
t530 = -t585 * t776 + t781 * t589;
t529 = -t776 * t584 + t781 * t856;
t528 = -pkin(1) * t596 - pkin(2) * t659 - pkin(7) * t636 - t833;
t527 = t780 * t583 - t863;
t526 = t775 * t583 + t860;
t525 = -t777 * t581 + t782 * t582;
t524 = -t777 * t579 + t782 * t580;
t523 = -t782 * t581 - t777 * t582;
t522 = -t782 * t579 - t777 * t580;
t521 = -pkin(1) * t592 - pkin(2) * t656 - pkin(7) * t631 + t822;
t520 = -t777 * t574 + t782 * t575;
t519 = t782 * t574 + t777 * t575;
t518 = -pkin(7) * t608 - t555;
t517 = -t776 * t570 + t781 * t571;
t516 = t781 * t570 + t776 * t571;
t514 = t625 + t789;
t509 = (qJD(5) - t747) * t641 + t799;
t508 = t641 * t846 - t780 * t789;
t507 = -t641 * t845 - t775 * t789;
t506 = -t775 * t533 - t639 * t845;
t505 = t780 * t533 - t639 * t846;
t504 = t783 * t525 + t806;
t503 = t783 * t524 - t806;
t499 = t783 * t546 - t778 * t585;
t498 = t783 * t545 - t778 * t589;
t497 = -pkin(3) * t856 + pkin(8) * t595 + t836;
t496 = t783 * t539 + t778 * t856;
t495 = t778 * t539 - t783 * t856;
t494 = -pkin(6) * t596 - t778 * t569 + t783 * t606;
t493 = -pkin(3) * t584 + pkin(8) * t575 - t825;
t492 = -pkin(6) * t592 - t778 * t565 + t783 * t599;
t491 = t783 * t520 + t778 * t584;
t490 = t778 * t520 - t783 * t584;
t489 = t784 * t542 + t779 * t555;
t488 = t779 * t542 - t784 * t555;
t487 = -t776 * t550 + t781 * t552;
t486 = -t776 * t549 + t781 * t551;
t485 = t781 * t550 + t776 * t552;
t484 = t781 * t549 + t776 * t551;
t483 = -t776 * t547 + t781 * t548;
t482 = t781 * t547 + t776 * t548;
t481 = -pkin(1) * t572 - pkin(2) * t683 - pkin(7) * t610 - t556;
t480 = -pkin(1) * t541 + pkin(2) * t670 - pkin(7) * t556;
t477 = -pkin(9) * t547 + t828;
t476 = -pkin(6) * t572 + t783 * t518 + t608 * t852;
t475 = -t777 * t530 + t782 * t532;
t474 = -t777 * t529 + t782 * t531;
t473 = t782 * t530 + t777 * t532;
t472 = -t782 * t529 - t777 * t531;
t468 = -t776 * t526 + t781 * t527;
t467 = t781 * t526 + t776 * t527;
t466 = -pkin(9) * t526 + t839;
t465 = -t777 * t516 + t782 * t517;
t464 = -t782 * t516 - t777 * t517;
t463 = t783 * t474 - t778 * t646;
t462 = t783 * t465 - t778 * t721;
t461 = -pkin(6) * t541 + (-pkin(7) * t783 + t852) * t555;
t460 = t784 * t496 + t779 * t538;
t459 = t779 * t496 - t784 * t538;
t458 = t783 * t475 + t778 * t617;
t457 = t778 * t475 - t783 * t617;
t456 = -t510 * t780 - t775 * t514;
t455 = -t780 * t509 - t775 * t857;
t454 = -t510 * t775 + t780 * t514;
t453 = -t775 * t509 + t780 * t857;
t452 = -t776 * t507 + t781 * t508;
t451 = -t776 * t505 + t781 * t506;
t450 = t781 * t507 + t776 * t508;
t449 = t781 * t505 + t776 * t506;
t446 = -pkin(2) * t538 - pkin(3) * t594 + t502;
t445 = t784 * t491 + t779 * t519;
t444 = t779 * t491 - t784 * t519;
t443 = -pkin(2) * t519 - pkin(3) * t574 + t501;
t442 = -pkin(3) * t598 + pkin(8) * t448;
t441 = -pkin(2) * t473 - pkin(3) * t530;
t440 = -pkin(7) * t538 - t777 * t497 + t782 * t540;
t439 = -pkin(4) * t857 + pkin(9) * t548 + t839;
t438 = -t777 * t485 + t782 * t487;
t437 = -t777 * t484 + t782 * t486;
t436 = -t782 * t485 - t777 * t487;
t435 = -t782 * t484 - t777 * t486;
t434 = -t777 * t482 + t782 * t483;
t433 = t782 * t482 + t777 * t483;
t432 = -pkin(4) * t509 + pkin(9) * t527 - t828;
t431 = -pkin(7) * t519 - t777 * t493 + t782 * t535;
t430 = -pkin(8) * t530 - t447;
t429 = -pkin(3) * t617 + pkin(8) * t532 + t448;
t425 = -t777 * t467 + t782 * t468;
t424 = t782 * t467 + t777 * t468;
t423 = t784 * t458 + t779 * t473;
t422 = t779 * t458 - t784 * t473;
t421 = t783 * t438 - t778 * t510;
t420 = t783 * t437 - t778 * t514;
t419 = t783 * t434 + t778 * t857;
t418 = t778 * t434 - t783 * t857;
t417 = -t776 * t454 + t781 * t456;
t416 = -t776 * t453 + t781 * t455;
t415 = t781 * t454 + t776 * t456;
t414 = t781 * t453 + t776 * t455;
t413 = -t777 * t450 + t782 * t452;
t412 = -t777 * t449 + t782 * t451;
t411 = -t782 * t450 - t777 * t452;
t410 = -t782 * t449 - t777 * t451;
t409 = -pkin(1) * t495 + pkin(2) * t856 - pkin(7) * t539 - t782 * t497 - t777 * t540;
t408 = t782 * t448 - t834;
t407 = t777 * t448 + t823;
t406 = t783 * t425 + t778 * t509;
t405 = t778 * t425 - t783 * t509;
t404 = -pkin(1) * t490 + pkin(2) * t584 - pkin(7) * t520 - t782 * t493 - t777 * t535;
t403 = t783 * t413 + t807;
t402 = t783 * t412 - t807;
t401 = t783 * t408 + t778 * t598;
t400 = t778 * t408 - t783 * t598;
t399 = -pkin(8) * t482 - t776 * t439 + t781 * t477;
t398 = -pkin(6) * t495 + t783 * t440 - t778 * t446;
t397 = -pkin(8) * t467 - t776 * t432 + t781 * t466;
t396 = -pkin(2) * t407 - pkin(3) * t447;
t395 = -pkin(6) * t490 + t783 * t431 - t778 * t443;
t392 = t784 * t419 + t779 * t433;
t391 = t779 * t419 - t784 * t433;
t390 = -pkin(3) * t857 + pkin(8) * t483 + t781 * t439 + t776 * t477;
t389 = -pkin(3) * t509 + pkin(8) * t468 + t781 * t432 + t776 * t466;
t388 = -pkin(4) * t515 + pkin(9) * t394;
t387 = -pkin(7) * t473 - t777 * t429 + t782 * t430;
t386 = t784 * t406 + t779 * t424;
t385 = t779 * t406 - t784 * t424;
t384 = -pkin(2) * t433 - pkin(3) * t482 - pkin(4) * t547 + t428;
t383 = -t777 * t415 + t782 * t417;
t382 = -t777 * t414 + t782 * t416;
t381 = t782 * t415 + t777 * t417;
t380 = -t782 * t414 - t777 * t416;
t379 = -pkin(9) * t454 - t393;
t378 = t783 * t382 - t778 * t591;
t377 = t783 * t383 + t778 * t557;
t376 = t778 * t383 - t783 * t557;
t375 = -pkin(7) * t407 - pkin(8) * t823 - t777 * t442;
t374 = t784 * t401 + t779 * t407;
t373 = t779 * t401 - t784 * t407;
t372 = -pkin(4) * t557 + pkin(9) * t456 + t394;
t371 = -pkin(2) * t424 - pkin(3) * t467 - pkin(4) * t526 + t427;
t370 = -pkin(1) * t457 + pkin(2) * t617 - pkin(7) * t475 - t782 * t429 - t777 * t430;
t369 = -pkin(6) * t457 + t783 * t387 - t778 * t441;
t368 = t781 * t394 - t837;
t367 = t776 * t394 + t826;
t366 = -pkin(1) * t400 + pkin(2) * t598 - pkin(7) * t408 + pkin(8) * t834 - t782 * t442;
t365 = -pkin(2) * t381 - pkin(3) * t415 - pkin(4) * t454;
t364 = -pkin(7) * t433 - t777 * t390 + t782 * t399;
t363 = t784 * t377 + t779 * t381;
t362 = t779 * t377 - t784 * t381;
t361 = -pkin(7) * t424 - t777 * t389 + t782 * t397;
t360 = -pkin(6) * t400 + t783 * t375 - t778 * t396;
t359 = -pkin(1) * t418 + pkin(2) * t857 - pkin(7) * t434 - t782 * t390 - t777 * t399;
t358 = -pkin(8) * t415 - t776 * t372 + t781 * t379;
t357 = -pkin(3) * t557 + pkin(8) * t417 + t781 * t372 + t776 * t379;
t356 = -pkin(1) * t405 + pkin(2) * t509 - pkin(7) * t425 - t782 * t389 - t777 * t397;
t355 = -t777 * t367 + t782 * t368;
t354 = t782 * t367 + t777 * t368;
t353 = -pkin(6) * t418 + t783 * t364 - t778 * t384;
t352 = -pkin(8) * t367 - pkin(9) * t826 - t776 * t388;
t351 = t783 * t355 + t778 * t515;
t350 = t778 * t355 - t783 * t515;
t349 = -pkin(3) * t515 + pkin(8) * t368 - pkin(9) * t837 + t781 * t388;
t348 = -pkin(6) * t405 + t783 * t361 - t778 * t371;
t347 = -pkin(2) * t354 - pkin(3) * t367 - pkin(4) * t393;
t346 = -pkin(7) * t381 - t777 * t357 + t782 * t358;
t345 = t784 * t351 + t779 * t354;
t344 = t779 * t351 - t784 * t354;
t343 = -pkin(1) * t376 + pkin(2) * t557 - pkin(7) * t383 - t782 * t357 - t777 * t358;
t342 = -pkin(6) * t376 + t783 * t346 - t778 * t365;
t341 = -pkin(7) * t354 - t777 * t349 + t782 * t352;
t340 = -pkin(1) * t350 + pkin(2) * t515 - pkin(7) * t355 - t782 * t349 - t777 * t352;
t339 = -pkin(6) * t350 + t783 * t341 - t778 * t347;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t742, -t743, 0, t704, 0, 0, 0, 0, 0, 0, t677, t678, t700, t633, 0, 0, 0, 0, 0, 0, t554, t559, t537, t489, 0, 0, 0, 0, 0, 0, t445, t460, t423, t374, 0, 0, 0, 0, 0, 0, t386, t392, t363, t345; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t743, -t742, 0, t703, 0, 0, 0, 0, 0, 0, t675, t676, t699, t632, 0, 0, 0, 0, 0, 0, t553, t558, t536, t488, 0, 0, 0, 0, 0, 0, t444, t459, t422, t373, 0, 0, 0, 0, 0, 0, t385, t391, t362, t344; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t705, t706, 0, -t662, 0, 0, 0, 0, 0, 0, t592, t596, t572, t541, 0, 0, 0, 0, 0, 0, t490, t495, t457, t400, 0, 0, 0, 0, 0, 0, t405, t418, t376, t350; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t743, 0, -t742, 0, t794, -t720, -t703, -pkin(5) * t703, t784 * t715 - t797, t784 * t697 - t779 * t746, t784 * t709 + t778 * t810, t784 * t714 + t797, t784 * t707 + t779 * t809, t779 * qJDD(2) + t784 * t731, -pkin(5) * t675 - t779 * t665 + t784 * t672, -pkin(5) * t676 - t779 * t666 + t784 * t673, -pkin(5) * t699 + t784 * t662, -pkin(5) * t632 - (pkin(1) * t779 - pkin(6) * t784) * t662, t784 * t619 - t779 * t650, t784 * t590 - t779 * t607, t784 * t604 - t779 * t642, t784 * t618 - t779 * t648, t784 * t605 - t779 * t643, t784 * t647 - t779 * t668, -pkin(5) * t553 + t784 * t492 - t779 * t521, -pkin(5) * t558 + t784 * t494 - t779 * t528, -pkin(5) * t536 + t784 * t476 - t779 * t481, -pkin(5) * t488 + t784 * t461 - t779 * t480, t784 * t504 - t779 * t523, t784 * t463 - t779 * t472, t784 * t498 - t779 * t543, t784 * t503 - t779 * t522, t784 * t499 - t779 * t544, t784 * t563 - t779 * t567, -pkin(5) * t444 + t784 * t395 - t779 * t404, -pkin(5) * t459 + t784 * t398 - t779 * t409, -pkin(5) * t422 + t784 * t369 - t779 * t370, -pkin(5) * t373 + t784 * t360 - t779 * t366, t784 * t403 - t779 * t411, t784 * t378 - t779 * t380, t784 * t420 - t779 * t435, t784 * t402 - t779 * t410, t784 * t421 - t779 * t436, t784 * t462 - t779 * t464, -pkin(5) * t385 + t784 * t348 - t779 * t356, -pkin(5) * t391 + t784 * t353 - t779 * t359, -pkin(5) * t362 + t784 * t342 - t779 * t343, -pkin(5) * t344 + t784 * t339 - t779 * t340; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t742, 0, t743, 0, t720, t794, t704, pkin(5) * t704, t779 * t715 + t796, t779 * t697 + t784 * t746, t779 * t709 - t778 * t808, t779 * t714 - t796, t779 * t707 - t783 * t808, -t784 * qJDD(2) + t779 * t731, pkin(5) * t677 + t784 * t665 + t779 * t672, pkin(5) * t678 + t784 * t666 + t779 * t673, pkin(5) * t700 + t779 * t662, pkin(5) * t633 - (-pkin(1) * t784 - pkin(6) * t779) * t662, t779 * t619 + t784 * t650, t779 * t590 + t784 * t607, t779 * t604 + t784 * t642, t779 * t618 + t784 * t648, t779 * t605 + t784 * t643, t779 * t647 + t784 * t668, pkin(5) * t554 + t779 * t492 + t784 * t521, pkin(5) * t559 + t779 * t494 + t784 * t528, pkin(5) * t537 + t779 * t476 + t784 * t481, pkin(5) * t489 + t779 * t461 + t784 * t480, t779 * t504 + t784 * t523, t779 * t463 + t784 * t472, t779 * t498 + t784 * t543, t779 * t503 + t784 * t522, t779 * t499 + t784 * t544, t779 * t563 + t784 * t567, pkin(5) * t445 + t779 * t395 + t784 * t404, pkin(5) * t460 + t779 * t398 + t784 * t409, pkin(5) * t423 + t779 * t369 + t784 * t370, pkin(5) * t374 + t779 * t360 + t784 * t366, t779 * t403 + t784 * t411, t779 * t378 + t784 * t380, t779 * t420 + t784 * t435, t779 * t402 + t784 * t410, t779 * t421 + t784 * t436, t779 * t462 + t784 * t464, pkin(5) * t386 + t779 * t348 + t784 * t356, pkin(5) * t392 + t779 * t353 + t784 * t359, pkin(5) * t363 + t779 * t342 + t784 * t343, pkin(5) * t345 + t779 * t339 + t784 * t340; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t751, t752, 0, 0, t793 * t778, t783 * t737 + t778 * t740, t783 * t756 + t829, -t792 * t783, t778 * t758 + t819, 0, pkin(1) * t740 + pkin(6) * t708 + t820, -pkin(1) * t737 + pkin(6) * t710 - t831, pkin(1) * t745 + pkin(6) * t741 + t663, pkin(1) * t723 + pkin(6) * t663, t778 * t651 - t802, t778 * t609 + t783 * t701, t778 * t644 + t783 * t660, t778 * t649 + t802, t778 * t645 + t783 * t655, t778 * t669 + t783 * t730, -pkin(1) * t630 + pkin(6) * t593 + t783 * t565 + t778 * t599, -pkin(1) * t635 + pkin(6) * t597 + t783 * t569 + t778 * t606, pkin(6) * t573 + t778 * t518 + (-pkin(1) - t851) * t608, pkin(6) * t542 + (-pkin(1) + t795) * t555, t778 * t525 - t803, t778 * t474 + t783 * t646, t778 * t545 + t783 * t589, t778 * t524 + t803, t778 * t546 + t783 * t585, t778 * t568 + t783 * t726, -pkin(1) * t519 + pkin(6) * t491 + t778 * t431 + t783 * t443, -pkin(1) * t538 + pkin(6) * t496 + t778 * t440 + t783 * t446, -pkin(1) * t473 + pkin(6) * t458 + t778 * t387 + t783 * t441, -pkin(1) * t407 + pkin(6) * t401 + t778 * t375 + t783 * t396, t778 * t413 - t804, t778 * t382 + t783 * t591, t778 * t437 + t783 * t514, t778 * t412 + t804, t778 * t438 + t783 * t510, t778 * t465 + t783 * t721, -pkin(1) * t424 + pkin(6) * t406 + t778 * t361 + t783 * t371, -pkin(1) * t433 + pkin(6) * t419 + t778 * t364 + t783 * t384, -pkin(1) * t381 + pkin(6) * t377 + t778 * t346 + t783 * t365, -pkin(1) * t354 + pkin(6) * t351 + t778 * t341 + t783 * t347;];
tauB_reg = t1;
