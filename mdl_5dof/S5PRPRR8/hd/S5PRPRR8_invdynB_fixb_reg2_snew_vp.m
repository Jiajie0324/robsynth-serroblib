% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRPRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d4,d5,theta1]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:05
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRPRR8_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRR8_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRR8_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRR8_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRR8_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRPRR8_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:04:32
% EndTime: 2019-12-05 16:04:48
% DurationCPUTime: 8.09s
% Computational Cost: add. (20850->508), mult. (39561->795), div. (0->0), fcn. (27383->10), ass. (0->371)
t451 = cos(qJ(2));
t507 = qJDD(2) * t451;
t448 = sin(qJ(2));
t453 = qJD(2) ^ 2;
t520 = t448 * t453;
t407 = t507 - t520;
t440 = sin(pkin(5));
t387 = t407 * t440;
t442 = cos(pkin(5));
t427 = t442 * qJDD(2);
t389 = -t451 * t427 + t442 * t520;
t439 = sin(pkin(9));
t441 = cos(pkin(9));
t411 = g(1) * t439 - t441 * g(2);
t519 = g(3) - qJDD(1);
t384 = t411 * t440 + t442 * t519;
t533 = t384 * t448;
t309 = (-t387 * t440 + t389 * t442) * pkin(6) - t533;
t509 = qJDD(2) * t448;
t408 = t451 * t453 + t509;
t354 = t389 * t439 - t408 * t441;
t567 = -qJ(1) * t354 - t309 * t439;
t349 = t389 * t441 + t408 * t439;
t566 = -qJ(1) * t349 - t309 * t441;
t386 = t408 * t440;
t388 = t408 * t442;
t532 = t384 * t451;
t312 = (t386 * t440 + t388 * t442) * pkin(6) - t532;
t352 = t388 * t439 - t407 * t441;
t565 = -qJ(1) * t352 - t312 * t439;
t347 = t388 * t441 + t407 * t439;
t564 = -qJ(1) * t347 - t312 * t441;
t446 = sin(qJ(5));
t449 = cos(qJ(5));
t450 = cos(qJ(4));
t515 = qJD(2) * t450;
t398 = -t449 * qJD(4) + t446 * t515;
t400 = qJD(4) * t446 + t449 * t515;
t366 = t400 * t398;
t513 = qJD(2) * qJD(4);
t499 = t450 * t513;
t447 = sin(qJ(4));
t510 = qJDD(2) * t447;
t403 = -t499 - t510;
t458 = qJDD(5) - t403;
t554 = -t366 + t458;
t559 = t446 * t554;
t558 = t449 * t554;
t557 = -t442 * t411 + t440 * t519;
t556 = t439 * t519;
t555 = t441 * t519;
t516 = qJD(2) * t447;
t424 = qJD(5) + t516;
t385 = t424 * t398;
t501 = t447 * t513;
t508 = qJDD(2) * t450;
t404 = -t501 + t508;
t502 = t398 * qJD(5) - t446 * qJDD(4) - t449 * t404;
t321 = t502 + t385;
t496 = -t449 * qJDD(4) + t404 * t446;
t317 = (qJD(5) - t424) * t400 + t496;
t490 = pkin(6) * t408 - t532;
t553 = pkin(1) * t389 + t440 * t490;
t491 = pkin(6) * t407 + t533;
t552 = pkin(1) * t388 + t440 * t491;
t551 = pkin(1) * t387 + t442 * t490;
t550 = -pkin(1) * t386 + t442 * t491;
t394 = t398 ^ 2;
t395 = t400 ^ 2;
t423 = t424 ^ 2;
t549 = 2 * qJD(3);
t548 = -pkin(7) - pkin(2);
t543 = pkin(4) * t447;
t542 = pkin(4) * t450;
t412 = g(1) * t441 + g(2) * t439;
t339 = -t412 * t448 + t557 * t451;
t340 = -t451 * t412 - t557 * t448;
t286 = t339 * t448 + t340 * t451;
t541 = pkin(6) * t286;
t492 = -pkin(8) * t450 + t543;
t401 = t492 * qJD(2);
t452 = qJD(4) ^ 2;
t438 = qJDD(2) * pkin(2);
t470 = qJDD(3) + t339;
t328 = -t453 * qJ(3) - t438 + t470;
t455 = -qJDD(2) * pkin(7) + t328;
t497 = t384 * t447 + t450 * t455;
t273 = -qJDD(4) * pkin(4) - t452 * pkin(8) + t401 * t515 - t497;
t540 = t273 * t446;
t539 = t273 * t449;
t512 = qJDD(2) * qJ(3);
t454 = -t453 * pkin(2) + t340 + t512;
t506 = qJD(2) * t549;
t326 = t454 + t506;
t444 = t453 * pkin(7);
t325 = -t444 + t326;
t538 = t325 * t447;
t537 = t325 * t450;
t337 = t366 + t458;
t536 = t337 * t446;
t535 = t337 * t449;
t534 = t384 * t440;
t435 = t447 ^ 2;
t436 = t450 ^ 2;
t517 = t435 + t436;
t406 = t517 * qJDD(2);
t531 = t406 * t448;
t530 = t406 * t451;
t503 = t447 * t450 * t453;
t413 = qJDD(4) + t503;
t529 = t413 * t447;
t528 = t413 * t450;
t414 = qJDD(4) - t503;
t527 = t414 * t447;
t526 = t414 * t450;
t525 = t424 * t446;
t524 = t424 * t449;
t523 = t435 * t453;
t522 = t436 * t453;
t518 = t450 * t384 - t447 * t455;
t274 = -pkin(4) * t452 + qJDD(4) * pkin(8) - t401 * t516 - t518;
t493 = pkin(8) * t447 + t542;
t282 = -t403 * pkin(4) - t404 * pkin(8) - t444 + (qJD(4) * t493 + t549) * qJD(2) + t454;
t224 = t449 * t274 + t446 * t282;
t511 = qJDD(2) * t440;
t505 = t447 * t366;
t504 = t450 * t366;
t500 = t441 * t511;
t223 = t274 * t446 - t449 * t282;
t190 = t223 * t446 + t449 * t224;
t364 = -t411 * t439 - t441 * t412;
t495 = t448 * t503;
t494 = t451 * t503;
t179 = t190 * t447 - t273 * t450;
t189 = -t223 * t449 + t224 * t446;
t489 = -t179 * t451 + t189 * t448;
t322 = -t385 + t502;
t262 = -t317 * t449 - t322 * t446;
t335 = t394 + t395;
t230 = t262 * t447 + t335 * t450;
t260 = -t317 * t446 + t322 * t449;
t488 = -t230 * t451 + t260 * t448;
t232 = -t447 * t518 + t450 * t497;
t487 = -t232 * t451 + t325 * t448;
t318 = (-qJD(5) - t424) * t400 - t496;
t261 = t318 * t449 + t321 * t446;
t365 = -t395 + t394;
t236 = -t261 * t447 - t365 * t450;
t259 = t318 * t446 - t321 * t449;
t486 = t236 * t451 + t259 * t448;
t355 = -t423 - t394;
t288 = t355 * t449 - t559;
t238 = t288 * t447 + t318 * t450;
t287 = t355 * t446 + t558;
t485 = -t238 * t451 + t287 * t448;
t360 = -t395 - t423;
t296 = -t360 * t446 - t535;
t240 = t296 * t447 + t321 * t450;
t295 = t360 * t449 - t536;
t484 = -t240 * t451 + t295 * t448;
t383 = -t395 + t423;
t305 = -t383 * t446 + t558;
t244 = -t305 * t447 - t322 * t450;
t303 = t383 * t449 + t559;
t483 = t244 * t451 + t303 * t448;
t382 = t394 - t423;
t306 = t382 * t449 - t536;
t245 = -t306 * t447 - t317 * t450;
t304 = t382 * t446 + t535;
t482 = t245 * t451 + t304 * t448;
t345 = -qJD(5) * t400 - t496;
t314 = -t345 * t446 + t398 * t524;
t278 = -t314 * t447 - t504;
t313 = t345 * t449 + t398 * t525;
t481 = t278 * t451 + t313 * t448;
t316 = -t400 * t525 - t449 * t502;
t279 = -t316 * t447 + t504;
t315 = t400 * t524 - t446 * t502;
t480 = t279 * t451 + t315 * t448;
t233 = -t447 * t497 - t450 * t518;
t330 = (-t398 * t449 + t400 * t446) * t424;
t307 = -t330 * t447 + t450 * t458;
t329 = (-t398 * t446 - t400 * t449) * t424;
t479 = t307 * t451 + t329 * t448;
t270 = t326 * t451 + t328 * t448;
t478 = t326 * t448 - t328 * t451;
t285 = t339 * t451 - t340 * t448;
t402 = 0.2e1 * t499 + t510;
t405 = -0.2e1 * t501 + t508;
t358 = t402 * t447 - t405 * t450;
t410 = (-t435 + t436) * t453;
t477 = t358 * t451 + t410 * t448;
t420 = -t452 - t523;
t370 = t420 * t447 + t526;
t476 = -t370 * t451 + t402 * t448;
t422 = -t452 - t522;
t372 = t422 * t450 - t529;
t475 = -t372 * t451 + t405 * t448;
t409 = t517 * t453;
t472 = -t409 * t448 + t530;
t363 = t411 * t441 - t412 * t439;
t397 = t517 * t513;
t471 = qJDD(4) * t448 + t397 * t451;
t419 = -t452 + t523;
t369 = -t419 * t447 - t528;
t469 = t369 * t451 - t447 * t509;
t421 = t452 - t522;
t371 = -t421 * t450 - t527;
t468 = t371 * t451 + t448 * t508;
t379 = -t403 * t450 - t435 * t513;
t467 = t379 * t451 - t495;
t380 = -t404 * t447 - t436 * t513;
t466 = t380 * t451 + t495;
t180 = t190 * t450 + t273 * t447;
t152 = t548 * t180 + (pkin(3) + t493) * t189;
t156 = pkin(3) * t179 - pkin(4) * t273 + pkin(8) * t190 - qJ(3) * t180;
t162 = t179 * t448 + t189 * t451;
t465 = pkin(6) * t162 + t152 * t451 + t156 * t448;
t177 = -pkin(8) * t260 - t189;
t231 = t262 * t450 - t335 * t447;
t161 = -t177 * t447 + (pkin(3) + t542) * t260 + t548 * t231;
t163 = pkin(3) * t230 + pkin(4) * t335 + pkin(8) * t262 - qJ(3) * t231 + t190;
t204 = t230 * t448 + t260 * t451;
t464 = pkin(6) * t204 + t161 * t451 + t163 * t448;
t205 = -pkin(4) * t287 + t223;
t227 = -pkin(8) * t287 + t540;
t239 = t288 * t450 - t318 * t447;
t165 = pkin(3) * t287 - t205 * t450 - t227 * t447 + t548 * t239;
t176 = pkin(3) * t238 + pkin(4) * t318 + pkin(8) * t288 - qJ(3) * t239 - t539;
t214 = t238 * t448 + t287 * t451;
t463 = pkin(6) * t214 + t165 * t451 + t176 * t448;
t207 = -pkin(4) * t295 + t224;
t228 = -pkin(8) * t295 + t539;
t241 = t296 * t450 - t321 * t447;
t167 = pkin(3) * t295 - t207 * t450 - t228 * t447 + t548 * t241;
t178 = pkin(3) * t240 + pkin(4) * t321 + pkin(8) * t296 - qJ(3) * t241 + t540;
t216 = t240 * t448 + t295 * t451;
t462 = pkin(6) * t216 + t167 * t451 + t178 * t448;
t195 = pkin(3) * t325 + t548 * t233;
t202 = pkin(3) * t232 - qJ(3) * t233;
t215 = t232 * t448 + t325 * t451;
t461 = pkin(6) * t215 + t195 * t451 + t202 * t448;
t374 = t420 * t450 - t527;
t248 = pkin(3) * t370 - qJ(3) * t374 + t497;
t257 = pkin(3) * t402 + t548 * t374 + t537;
t333 = t370 * t448 + t402 * t451;
t460 = pkin(6) * t333 + t248 * t448 + t257 * t451;
t377 = -t422 * t447 - t528;
t249 = pkin(3) * t372 - qJ(3) * t377 + t518;
t256 = pkin(3) * t405 + t548 * t377 - t538;
t334 = t372 * t448 + t405 * t451;
t459 = pkin(6) * t334 + t249 * t448 + t256 * t451;
t229 = -pkin(3) * t409 - t233;
t361 = -t409 * t451 - t531;
t457 = -pkin(3) * t531 + pkin(6) * t361 + t229 * t451;
t456 = pkin(6) * t270 + (pkin(2) * t451 + qJ(3) * t448) * t384;
t416 = t439 * t511;
t381 = qJDD(4) * t451 - t397 * t448;
t376 = -t421 * t447 + t526;
t375 = (t404 - t501) * t450;
t373 = t419 * t450 - t529;
t368 = (-t403 + t499) * t447;
t367 = t442 * t384;
t362 = t471 * t442;
t359 = -t402 * t450 - t405 * t447;
t357 = t472 * t442;
t356 = t472 * t440;
t344 = -t379 * t448 - t494;
t343 = -t380 * t448 + t494;
t342 = -t371 * t448 + t450 * t507;
t341 = -t369 * t448 - t447 * t507;
t332 = -0.2e1 * t438 + t470;
t331 = t340 + t506 + 0.2e1 * t512;
t327 = -t358 * t448 + t410 * t451;
t308 = t330 * t450 + t447 * t458;
t302 = -t357 * t439 + t361 * t441;
t301 = t357 * t441 + t361 * t439;
t300 = -t368 * t440 + t442 * t467;
t299 = -t375 * t440 + t442 * t466;
t298 = -t376 * t440 + t442 * t468;
t297 = -t373 * t440 + t442 * t469;
t294 = -t377 * t440 + t442 * t475;
t293 = -t374 * t440 + t442 * t476;
t292 = t377 * t442 + t440 * t475;
t291 = t374 * t442 + t440 * t476;
t284 = -t359 * t440 + t442 * t477;
t283 = t286 * t442;
t281 = t316 * t450 + t505;
t280 = t314 * t450 - t505;
t275 = -pkin(2) * t328 + qJ(3) * t326;
t272 = t339 * t440 - t551;
t271 = t340 * t440 - t550;
t267 = -t332 * t440 + t551;
t266 = t270 * t442;
t265 = -t331 * t440 + t550;
t264 = -t285 * t442 + t534;
t263 = -t285 * t440 - t367;
t258 = -t307 * t448 + t329 * t451;
t255 = qJ(3) * t405 + t548 * t372 + t537;
t254 = qJ(3) * t402 + t548 * t370 + t538;
t253 = -t294 * t439 + t334 * t441;
t252 = -t293 * t439 + t333 * t441;
t251 = t294 * t441 + t334 * t439;
t250 = t293 * t441 + t333 * t439;
t247 = t306 * t450 - t317 * t447;
t246 = t305 * t450 - t322 * t447;
t243 = t442 * t478 + t534;
t242 = t440 * t478 - t367;
t237 = t261 * t450 - t365 * t447;
t235 = -t279 * t448 + t315 * t451;
t234 = -t278 * t448 + t313 * t451;
t226 = -t308 * t440 + t442 * t479;
t225 = -qJ(3) * t409 - t548 * t406 - t232;
t221 = -t245 * t448 + t304 * t451;
t220 = -t244 * t448 + t303 * t451;
t219 = -pkin(1) * t263 + t442 * t541;
t218 = -t264 * t439 + t286 * t441;
t217 = t264 * t441 + t286 * t439;
t213 = (-t263 * t440 - t264 * t442) * pkin(6);
t212 = -t243 * t439 + t270 * t441;
t211 = t243 * t441 + t270 * t439;
t210 = -t281 * t440 + t442 * t480;
t209 = -t280 * t440 + t442 * t481;
t208 = -pkin(3) * t530 - t229 * t448 + (-t356 * t440 - t357 * t442) * pkin(6);
t206 = -t236 * t448 + t259 * t451;
t203 = (-pkin(2) * t448 + qJ(3) * t451) * t384 + (-t242 * t440 - t243 * t442) * pkin(6);
t201 = -t247 * t440 + t442 * t482;
t200 = -t246 * t440 + t442 * t483;
t199 = -t241 * t440 + t442 * t484;
t198 = t241 * t442 + t440 * t484;
t197 = -t239 * t440 + t442 * t485;
t196 = t239 * t442 + t440 * t485;
t194 = qJ(3) * t325 + t548 * t232;
t193 = -t233 * t440 + t442 * t487;
t192 = t233 * t442 + t440 * t487;
t191 = -pkin(1) * t242 - t275 * t440 + t442 * t456;
t188 = t249 * t451 - t256 * t448 + (-t292 * t440 - t294 * t442) * pkin(6);
t187 = t248 * t451 - t257 * t448 + (-t291 * t440 - t293 * t442) * pkin(6);
t186 = -t237 * t440 + t442 * t486;
t185 = -t231 * t440 + t442 * t488;
t184 = t231 * t442 + t440 * t488;
t183 = -pkin(1) * t356 - t225 * t440 + t442 * t457;
t182 = -pkin(1) * t292 - t255 * t440 + t442 * t459;
t181 = -pkin(1) * t291 - t254 * t440 + t442 * t460;
t175 = -t199 * t439 + t216 * t441;
t174 = t199 * t441 + t216 * t439;
t173 = -t197 * t439 + t214 * t441;
t172 = t197 * t441 + t214 * t439;
t171 = -t193 * t439 + t215 * t441;
t170 = t193 * t441 + t215 * t439;
t169 = -t185 * t439 + t204 * t441;
t168 = t185 * t441 + t204 * t439;
t166 = qJ(3) * t295 - t207 * t447 + t228 * t450 + t548 * t240;
t164 = qJ(3) * t287 - t205 * t447 + t227 * t450 + t548 * t238;
t160 = t177 * t450 + (qJ(3) + t543) * t260 + t548 * t230;
t159 = -t180 * t440 + t442 * t489;
t158 = t180 * t442 + t440 * t489;
t157 = -t195 * t448 + t202 * t451 + (-t192 * t440 - t193 * t442) * pkin(6);
t155 = -pkin(1) * t192 - t194 * t440 + t442 * t461;
t154 = -t167 * t448 + t178 * t451 + (-t198 * t440 - t199 * t442) * pkin(6);
t153 = -t165 * t448 + t176 * t451 + (-t196 * t440 - t197 * t442) * pkin(6);
t151 = t548 * t179 + (qJ(3) + t492) * t189;
t150 = -t159 * t439 + t162 * t441;
t149 = t159 * t441 + t162 * t439;
t148 = -pkin(1) * t198 - t166 * t440 + t442 * t462;
t147 = -pkin(1) * t196 - t164 * t440 + t442 * t463;
t146 = -t161 * t448 + t163 * t451 + (-t184 * t440 - t185 * t442) * pkin(6);
t145 = -pkin(1) * t184 - t160 * t440 + t442 * t464;
t144 = -t152 * t448 + t156 * t451 + (-t158 * t440 - t159 * t442) * pkin(6);
t143 = -pkin(1) * t158 - t151 * t440 + t442 * t465;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t364, 0, 0, 0, 0, 0, 0, t354, t352, 0, t218, 0, 0, 0, 0, 0, 0, 0, -t354, -t352, t212, 0, 0, 0, 0, 0, 0, t252, t253, t302, t171, 0, 0, 0, 0, 0, 0, t173, t175, t169, t150; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t363, 0, 0, 0, 0, 0, 0, -t349, -t347, 0, t217, 0, 0, 0, 0, 0, 0, 0, t349, t347, t211, 0, 0, 0, 0, 0, 0, t250, t251, t301, t170, 0, 0, 0, 0, 0, 0, t172, t174, t168, t149; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t519, 0, 0, 0, 0, 0, 0, t387, -t386, 0, t263, 0, 0, 0, 0, 0, 0, 0, -t387, t386, t242, 0, 0, 0, 0, 0, 0, t291, t292, t356, t192, 0, 0, 0, 0, 0, 0, t196, t198, t184, t158; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t556, -t555, -t363, -qJ(1) * t363, 0, 0, -t352, 0, t354, t416, -t272 * t439 - t566, -t271 * t439 - t564, -t283 * t439 + t285 * t441, -qJ(1) * t217 + t213 * t441 - t219 * t439, t416, t352, -t354, 0, 0, 0, -t266 * t439 - t441 * t478, -t267 * t439 + t566, -t265 * t439 + t564, -qJ(1) * t211 - t191 * t439 + t203 * t441, -t299 * t439 + t343 * t441, -t284 * t439 + t327 * t441, -t298 * t439 + t342 * t441, -t300 * t439 + t344 * t441, -t297 * t439 + t341 * t441, -t362 * t439 + t381 * t441, -qJ(1) * t250 - t181 * t439 + t187 * t441, -qJ(1) * t251 - t182 * t439 + t188 * t441, -qJ(1) * t301 - t183 * t439 + t208 * t441, -qJ(1) * t170 - t155 * t439 + t157 * t441, -t210 * t439 + t235 * t441, -t186 * t439 + t206 * t441, -t200 * t439 + t220 * t441, -t209 * t439 + t234 * t441, -t201 * t439 + t221 * t441, -t226 * t439 + t258 * t441, -qJ(1) * t172 - t147 * t439 + t153 * t441, -qJ(1) * t174 - t148 * t439 + t154 * t441, -qJ(1) * t168 - t145 * t439 + t146 * t441, -qJ(1) * t149 - t143 * t439 + t144 * t441; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t555, -t556, t364, qJ(1) * t364, 0, 0, t347, 0, -t349, -t500, t272 * t441 - t567, t271 * t441 - t565, t283 * t441 + t285 * t439, qJ(1) * t218 + t213 * t439 + t219 * t441, -t500, -t347, t349, 0, 0, 0, t266 * t441 - t439 * t478, t267 * t441 + t567, t265 * t441 + t565, qJ(1) * t212 + t191 * t441 + t203 * t439, t299 * t441 + t343 * t439, t284 * t441 + t327 * t439, t298 * t441 + t342 * t439, t300 * t441 + t344 * t439, t297 * t441 + t341 * t439, t362 * t441 + t381 * t439, qJ(1) * t252 + t181 * t441 + t187 * t439, qJ(1) * t253 + t182 * t441 + t188 * t439, qJ(1) * t302 + t183 * t441 + t208 * t439, qJ(1) * t171 + t155 * t441 + t157 * t439, t210 * t441 + t235 * t439, t186 * t441 + t206 * t439, t200 * t441 + t220 * t439, t209 * t441 + t234 * t439, t201 * t441 + t221 * t439, t226 * t441 + t258 * t439, qJ(1) * t173 + t147 * t441 + t153 * t439, qJ(1) * t175 + t148 * t441 + t154 * t439, qJ(1) * t169 + t145 * t441 + t146 * t439, qJ(1) * t150 + t143 * t441 + t144 * t439; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t411, t412, 0, 0, 0, 0, t386, 0, t387, t427, -t339 * t442 - t553, -t340 * t442 - t552, t286 * t440, pkin(1) * t264 + t440 * t541, t427, -t386, -t387, 0, 0, 0, t270 * t440, t332 * t442 + t553, t331 * t442 + t552, pkin(1) * t243 + t275 * t442 + t440 * t456, t375 * t442 + t440 * t466, t359 * t442 + t440 * t477, t376 * t442 + t440 * t468, t368 * t442 + t440 * t467, t373 * t442 + t440 * t469, t471 * t440, pkin(1) * t293 + t254 * t442 + t440 * t460, pkin(1) * t294 + t255 * t442 + t440 * t459, pkin(1) * t357 + t225 * t442 + t440 * t457, pkin(1) * t193 + t194 * t442 + t440 * t461, t281 * t442 + t440 * t480, t237 * t442 + t440 * t486, t246 * t442 + t440 * t483, t280 * t442 + t440 * t481, t247 * t442 + t440 * t482, t308 * t442 + t440 * t479, pkin(1) * t197 + t164 * t442 + t440 * t463, pkin(1) * t199 + t166 * t442 + t440 * t462, pkin(1) * t185 + t160 * t442 + t440 * t464, pkin(1) * t159 + t151 * t442 + t440 * t465;];
tauB_reg = t1;
