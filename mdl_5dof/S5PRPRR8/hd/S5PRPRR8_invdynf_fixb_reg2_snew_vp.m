% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRPRR8
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d2,d4,d5,theta1]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:05
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRPRR8_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRR8_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRR8_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRR8_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRR8_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRPRR8_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:04:59
% EndTime: 2019-12-05 16:05:01
% DurationCPUTime: 2.02s
% Computational Cost: add. (5018->193), mult. (9564->257), div. (0->0), fcn. (6711->10), ass. (0->150)
t1155 = sin(pkin(9));
t1157 = cos(pkin(9));
t1134 = t1155 * g(1) - t1157 * g(2);
t1152 = -g(3) + qJDD(1);
t1156 = sin(pkin(5));
t1158 = cos(pkin(5));
t1210 = t1134 * t1158 + t1152 * t1156;
t1162 = sin(qJ(4));
t1197 = t1162 * qJD(2);
t1144 = qJD(5) + t1197;
t1209 = qJD(5) + t1144;
t1163 = sin(qJ(2));
t1166 = cos(qJ(2));
t1168 = qJD(2) ^ 2;
t1131 = t1166 * qJDD(2) - t1163 * t1168;
t1161 = sin(qJ(5));
t1164 = cos(qJ(5));
t1165 = cos(qJ(4));
t1202 = qJD(2) * t1165;
t1123 = -t1164 * qJD(4) + t1161 * t1202;
t1208 = t1123 ^ 2;
t1125 = t1161 * qJD(4) + t1164 * t1202;
t1207 = t1125 ^ 2;
t1206 = t1144 ^ 2;
t1205 = 2 * qJD(3);
t1204 = t1162 * pkin(4);
t1203 = t1168 * pkin(7);
t1201 = t1125 * t1123;
t1114 = -t1156 * t1134 + t1158 * t1152;
t1198 = t1156 * t1114;
t1195 = qJD(5) - t1144;
t1135 = -t1157 * g(1) - t1155 * g(2);
t1101 = -t1163 * t1135 + t1210 * t1166;
t1095 = -qJDD(2) * pkin(2) - t1168 * qJ(3) + qJDD(3) - t1101;
t1169 = -qJDD(2) * pkin(7) + t1095;
t1080 = t1165 * t1114 + t1162 * t1169;
t1150 = t1162 ^ 2;
t1151 = t1165 ^ 2;
t1194 = t1150 + t1151;
t1193 = t1162 * qJDD(2);
t1192 = t1165 * qJDD(2);
t1190 = qJD(4) * t1197;
t1189 = qJD(4) * t1202;
t1188 = t1165 * t1168 * t1162;
t1102 = t1166 * t1135 + t1210 * t1163;
t1079 = -t1162 * t1114 + t1165 * t1169;
t1128 = -t1190 + t1192;
t1187 = t1164 * qJDD(4) - t1161 * t1128;
t1186 = -t1168 * pkin(2) + t1102;
t1126 = (-pkin(8) * t1165 + t1204) * qJD(2);
t1167 = qJD(4) ^ 2;
t1074 = -t1167 * pkin(4) + qJDD(4) * pkin(8) - t1126 * t1197 + t1080;
t1075 = -t1203 - t1128 * pkin(8) + (qJ(3) + t1204) * qJDD(2) + (t1205 + (0.2e1 * pkin(4) * t1165 + pkin(8) * t1162) * qJD(4)) * qJD(2) + t1186;
t1056 = -t1161 * t1074 + t1164 * t1075;
t1057 = t1164 * t1074 + t1161 * t1075;
t1045 = -t1161 * t1056 + t1164 * t1057;
t1073 = -qJDD(4) * pkin(4) - t1167 * pkin(8) + t1126 * t1202 - t1079;
t1040 = t1162 * t1045 - t1165 * t1073;
t1044 = t1164 * t1056 + t1161 * t1057;
t1185 = -t1040 * t1166 + t1044 * t1163;
t1088 = -t1195 * t1125 + t1187;
t1171 = -t1161 * qJDD(4) - t1164 * t1128;
t1090 = t1195 * t1123 + t1171;
t1069 = t1164 * t1088 - t1161 * t1090;
t1098 = -t1207 - t1208;
t1058 = t1162 * t1069 - t1165 * t1098;
t1068 = t1161 * t1088 + t1164 * t1090;
t1184 = -t1058 * t1166 + t1068 * t1163;
t1060 = t1165 * t1079 + t1162 * t1080;
t1094 = qJDD(2) * qJ(3) + qJD(2) * t1205 + t1186;
t1093 = t1094 - t1203;
t1183 = -t1060 * t1166 + t1093 * t1163;
t1170 = -qJDD(5) - t1189 - t1193;
t1099 = -t1170 - t1201;
t1103 = -t1206 - t1208;
t1078 = -t1161 * t1099 + t1164 * t1103;
t1087 = t1209 * t1125 - t1187;
t1062 = t1162 * t1078 - t1165 * t1087;
t1077 = t1164 * t1099 + t1161 * t1103;
t1182 = -t1062 * t1166 + t1077 * t1163;
t1100 = t1170 - t1201;
t1106 = -t1206 - t1207;
t1086 = t1164 * t1100 - t1161 * t1106;
t1089 = -t1209 * t1123 - t1171;
t1064 = t1162 * t1086 - t1165 * t1089;
t1085 = t1161 * t1100 + t1164 * t1106;
t1181 = -t1064 * t1166 + t1085 * t1163;
t1180 = t1094 * t1163 - t1095 * t1166;
t1179 = t1101 * t1166 + t1102 * t1163;
t1136 = qJDD(4) - t1188;
t1142 = -t1150 * t1168 - t1167;
t1109 = t1165 * t1136 + t1162 * t1142;
t1127 = 0.2e1 * t1189 + t1193;
t1178 = -t1109 * t1166 + t1127 * t1163;
t1137 = -qJDD(4) - t1188;
t1143 = -t1151 * t1168 - t1167;
t1110 = t1162 * t1137 + t1165 * t1143;
t1129 = -0.2e1 * t1190 + t1192;
t1177 = -t1110 * t1166 + t1129 * t1163;
t1132 = t1163 * qJDD(2) + t1166 * t1168;
t1118 = t1132 * t1158;
t1176 = t1157 * t1118 + t1155 * t1131;
t1175 = t1155 * t1118 - t1157 * t1131;
t1119 = t1131 * t1158;
t1174 = -t1157 * t1119 + t1155 * t1132;
t1173 = -t1155 * t1119 - t1157 * t1132;
t1130 = t1194 * qJDD(2);
t1133 = t1194 * t1168;
t1172 = t1130 * t1166 - t1133 * t1163;
t1117 = t1131 * t1156;
t1116 = t1132 * t1156;
t1112 = t1165 * t1137 - t1162 * t1143;
t1111 = -t1162 * t1136 + t1165 * t1142;
t1108 = t1158 * t1114;
t1107 = -t1163 * t1130 - t1166 * t1133;
t1105 = t1172 * t1158;
t1104 = t1172 * t1156;
t1097 = t1163 * t1110 + t1166 * t1129;
t1096 = t1163 * t1109 + t1166 * t1127;
t1084 = -t1156 * t1112 + t1177 * t1158;
t1083 = -t1156 * t1111 + t1178 * t1158;
t1082 = t1158 * t1112 + t1177 * t1156;
t1081 = t1158 * t1111 + t1178 * t1156;
t1076 = -t1163 * t1101 + t1166 * t1102;
t1072 = t1166 * t1094 + t1163 * t1095;
t1071 = t1179 * t1158 - t1198;
t1070 = t1179 * t1156 + t1108;
t1067 = t1180 * t1158 - t1198;
t1066 = t1180 * t1156 + t1108;
t1065 = t1165 * t1086 + t1162 * t1089;
t1063 = t1165 * t1078 + t1162 * t1087;
t1061 = -t1162 * t1079 + t1165 * t1080;
t1059 = t1165 * t1069 + t1162 * t1098;
t1055 = t1163 * t1064 + t1166 * t1085;
t1054 = t1163 * t1060 + t1166 * t1093;
t1053 = t1163 * t1062 + t1166 * t1077;
t1052 = t1163 * t1058 + t1166 * t1068;
t1051 = -t1156 * t1065 + t1181 * t1158;
t1050 = t1158 * t1065 + t1181 * t1156;
t1049 = -t1156 * t1063 + t1182 * t1158;
t1048 = t1158 * t1063 + t1182 * t1156;
t1047 = -t1156 * t1061 + t1183 * t1158;
t1046 = t1158 * t1061 + t1183 * t1156;
t1043 = -t1156 * t1059 + t1184 * t1158;
t1042 = t1158 * t1059 + t1156 * t1184;
t1041 = t1165 * t1045 + t1162 * t1073;
t1039 = t1163 * t1040 + t1166 * t1044;
t1038 = -t1156 * t1041 + t1158 * t1185;
t1037 = t1158 * t1041 + t1156 * t1185;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1155 * t1134 + t1157 * t1135, 0, 0, 0, 0, 0, 0, t1173, t1175, 0, -t1155 * t1071 + t1157 * t1076, 0, 0, 0, 0, 0, 0, 0, -t1173, -t1175, -t1155 * t1067 + t1157 * t1072, 0, 0, 0, 0, 0, 0, -t1155 * t1083 + t1157 * t1096, -t1155 * t1084 + t1157 * t1097, -t1155 * t1105 + t1157 * t1107, -t1155 * t1047 + t1157 * t1054, 0, 0, 0, 0, 0, 0, -t1155 * t1049 + t1157 * t1053, -t1155 * t1051 + t1157 * t1055, -t1155 * t1043 + t1157 * t1052, -t1155 * t1038 + t1157 * t1039; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1157 * t1134 + t1155 * t1135, 0, 0, 0, 0, 0, 0, -t1174, -t1176, 0, t1157 * t1071 + t1155 * t1076, 0, 0, 0, 0, 0, 0, 0, t1174, t1176, t1157 * t1067 + t1155 * t1072, 0, 0, 0, 0, 0, 0, t1157 * t1083 + t1155 * t1096, t1157 * t1084 + t1155 * t1097, t1157 * t1105 + t1155 * t1107, t1157 * t1047 + t1155 * t1054, 0, 0, 0, 0, 0, 0, t1157 * t1049 + t1155 * t1053, t1157 * t1051 + t1155 * t1055, t1157 * t1043 + t1155 * t1052, t1157 * t1038 + t1155 * t1039; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1152, 0, 0, 0, 0, 0, 0, t1117, -t1116, 0, t1070, 0, 0, 0, 0, 0, 0, 0, -t1117, t1116, t1066, 0, 0, 0, 0, 0, 0, t1081, t1082, t1104, t1046, 0, 0, 0, 0, 0, 0, t1048, t1050, t1042, t1037; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1135, 0, 0, 0, 0, 0, 0, -t1132, -t1131, 0, t1076, 0, 0, 0, 0, 0, 0, 0, t1132, t1131, t1072, 0, 0, 0, 0, 0, 0, t1096, t1097, t1107, t1054, 0, 0, 0, 0, 0, 0, t1053, t1055, t1052, t1039; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1134, 0, 0, 0, 0, 0, 0, t1119, -t1118, 0, t1071, 0, 0, 0, 0, 0, 0, 0, -t1119, t1118, t1067, 0, 0, 0, 0, 0, 0, t1083, t1084, t1105, t1047, 0, 0, 0, 0, 0, 0, t1049, t1051, t1043, t1038; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1152, 0, 0, 0, 0, 0, 0, t1117, -t1116, 0, t1070, 0, 0, 0, 0, 0, 0, 0, -t1117, t1116, t1066, 0, 0, 0, 0, 0, 0, t1081, t1082, t1104, t1046, 0, 0, 0, 0, 0, 0, t1048, t1050, t1042, t1037; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1168, -qJDD(2), 0, t1102, 0, 0, 0, 0, 0, 0, 0, t1168, qJDD(2), t1094, 0, 0, 0, 0, 0, 0, t1127, t1129, -t1133, t1093, 0, 0, 0, 0, 0, 0, t1077, t1085, t1068, t1044; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1168, 0, t1101, 0, 0, 0, 0, 0, 0, 0, -qJDD(2), t1168, -t1095, 0, 0, 0, 0, 0, 0, -t1109, -t1110, t1130, -t1060, 0, 0, 0, 0, 0, 0, -t1062, -t1064, -t1058, -t1040; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1114, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1114, 0, 0, 0, 0, 0, 0, t1111, t1112, 0, t1061, 0, 0, 0, 0, 0, 0, t1063, t1065, t1059, t1041; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1114, 0, 0, 0, 0, 0, 0, t1111, t1112, 0, t1061, 0, 0, 0, 0, 0, 0, t1063, t1065, t1059, t1041; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1168, -qJDD(2), -t1094, 0, 0, 0, 0, 0, 0, -t1127, -t1129, t1133, -t1093, 0, 0, 0, 0, 0, 0, -t1077, -t1085, -t1068, -t1044; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1168, t1095, 0, 0, 0, 0, 0, 0, t1109, t1110, -t1130, t1060, 0, 0, 0, 0, 0, 0, t1062, t1064, t1058, t1040; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1142, t1137, -t1193, t1080, 0, 0, 0, 0, 0, 0, t1078, t1086, t1069, t1045; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1136, t1143, -t1192, t1079, 0, 0, 0, 0, 0, 0, -t1087, -t1089, -t1098, -t1073; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1127, t1129, -t1133, t1093, 0, 0, 0, 0, 0, 0, t1077, t1085, t1068, t1044; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1103, t1100, t1088, t1057; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1099, t1106, t1090, t1056; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1087, t1089, t1098, t1073;];
f_new_reg = t1;
