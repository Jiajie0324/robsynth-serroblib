% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRRRP5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d4,theta1]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:49
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRRRP5_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRP5_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRP5_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRP5_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRP5_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRRRP5_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:49:24
% EndTime: 2019-12-05 16:49:33
% DurationCPUTime: 6.64s
% Computational Cost: add. (20671->467), mult. (42941->671), div. (0->0), fcn. (29214->8), ass. (0->345)
t497 = sin(qJ(4));
t500 = cos(qJ(4));
t501 = cos(qJ(3));
t498 = sin(qJ(3));
t534 = qJD(2) * t498;
t449 = -t500 * t501 * qJD(2) + t497 * t534;
t451 = (t497 * t501 + t498 * t500) * qJD(2);
t410 = t451 * t449;
t489 = qJDD(3) + qJDD(4);
t514 = -t489 + t410;
t584 = t514 * pkin(4);
t552 = t497 * t514;
t544 = t500 * t514;
t530 = qJD(2) * qJD(3);
t522 = t498 * t530;
t527 = t501 * qJDD(2);
t507 = 0.2e1 * t522 - t527;
t422 = t507 * t501;
t494 = sin(pkin(8));
t539 = g(3) - qJDD(1);
t583 = t494 * t539;
t495 = cos(pkin(8));
t582 = t495 * t539;
t521 = t501 * t530;
t529 = t498 * qJDD(2);
t463 = t521 + t529;
t508 = t522 - t527;
t385 = -t449 * qJD(4) + t500 * t463 - t497 * t508;
t490 = qJD(3) + qJD(4);
t443 = t490 * t449;
t581 = -t443 + t385;
t470 = t494 * g(1) - t495 * g(2);
t455 = t495 * t470;
t471 = t495 * g(1) + t494 * g(2);
t416 = -t494 * t471 + t455;
t448 = t451 ^ 2;
t488 = t490 ^ 2;
t432 = -t448 - t488;
t405 = t410 + t489;
t553 = t497 * t405;
t370 = t500 * t432 - t553;
t545 = t500 * t405;
t371 = -t497 * t432 - t545;
t324 = t501 * t370 + t498 * t371;
t580 = -pkin(2) * t324 - pkin(3) * t370;
t447 = t449 ^ 2;
t399 = -t488 - t447;
t345 = t497 * t399 - t544;
t346 = t500 * t399 + t552;
t307 = t501 * t345 + t498 * t346;
t579 = -pkin(2) * t307 - pkin(3) * t345;
t513 = t497 * t463 + t500 * t508;
t365 = (qJD(4) - t490) * t451 + t513;
t578 = qJD(2) ^ 2;
t369 = -t443 - t385;
t321 = -t365 * t497 + t500 * t369;
t323 = -t365 * t500 - t497 * t369;
t277 = -t498 * t321 + t501 * t323;
t387 = -t447 - t448;
t499 = sin(qJ(2));
t502 = cos(qJ(2));
t266 = t499 * t277 - t502 * t387;
t573 = pkin(5) * t266;
t308 = -t498 * t345 + t501 * t346;
t364 = (qJD(4) + t490) * t451 + t513;
t283 = t499 * t308 - t502 * t364;
t572 = pkin(5) * t283;
t325 = -t498 * t370 + t501 * t371;
t288 = t499 * t325 - t502 * t581;
t571 = pkin(5) * t288;
t275 = t501 * t321 + t498 * t323;
t570 = pkin(6) * t275;
t569 = pkin(6) * t307;
t568 = pkin(6) * t324;
t567 = pkin(7) * t321;
t566 = pkin(7) * t345;
t565 = pkin(7) * t370;
t267 = t502 * t277 + t499 * t387;
t225 = t494 * t267 - t495 * t275;
t564 = qJ(1) * t225;
t284 = t502 * t308 + t499 * t364;
t245 = t494 * t284 - t495 * t307;
t563 = qJ(1) * t245;
t289 = t502 * t325 + t499 * t581;
t254 = t494 * t289 - t495 * t324;
t562 = qJ(1) * t254;
t561 = t490 * t497;
t560 = t490 * t500;
t526 = t502 * qJDD(2);
t467 = -t499 * t578 + t526;
t559 = t494 * t467;
t558 = t494 * t470;
t556 = t495 * t467;
t441 = -t502 * t471 - t499 * t539;
t419 = -t578 * pkin(2) + qJDD(2) * pkin(6) + t441;
t393 = t498 * t419 + t501 * t470;
t479 = t498 * t578 * t501;
t472 = qJDD(3) + t479;
t355 = (-t463 + t521) * pkin(7) + t472 * pkin(3) - t393;
t396 = t501 * t419 - t498 * t470;
t474 = qJD(3) * pkin(3) - pkin(7) * t534;
t492 = t501 ^ 2;
t486 = t492 * t578;
t360 = -pkin(3) * t486 - pkin(7) * t508 - qJD(3) * t474 + t396;
t310 = -t500 * t355 + t497 * t360;
t523 = t385 * qJ(5) + t310;
t510 = -qJ(5) * t443 - t523;
t533 = qJD(5) * t451;
t278 = t510 - 0.2e1 * t533 - t584;
t555 = t497 * t278;
t440 = -t499 * t471 + t502 * t539;
t418 = -qJDD(2) * pkin(2) - t578 * pkin(6) + t440;
t378 = t508 * pkin(3) - pkin(7) * t486 + t474 * t534 + t418;
t554 = t497 * t378;
t313 = t497 * t355 + t500 * t360;
t271 = -t500 * t310 + t497 * t313;
t551 = t498 * t271;
t550 = t498 * t418;
t549 = t498 * t472;
t473 = qJDD(3) - t479;
t548 = t498 * t473;
t547 = t500 * t278;
t546 = t500 * t378;
t543 = t501 * t271;
t542 = t501 * t418;
t541 = t501 * t472;
t540 = t501 * t473;
t538 = -pkin(1) * t275 + pkin(5) * t267;
t537 = -pkin(1) * t307 + pkin(5) * t284;
t536 = -pkin(1) * t324 + pkin(5) * t289;
t491 = t498 ^ 2;
t535 = t491 + t492;
t532 = t491 * t578;
t528 = t499 * qJDD(2);
t525 = t499 * t410;
t524 = t502 * t410;
t520 = -pkin(3) * t387 + pkin(7) * t323;
t519 = -pkin(3) * t364 + pkin(7) * t346;
t518 = -pkin(3) * t581 + pkin(7) * t371;
t343 = t498 * t393 + t501 * t396;
t465 = t535 * qJDD(2);
t468 = t486 + t532;
t414 = t499 * t465 + t502 * t468;
t415 = t502 * t465 - t499 * t468;
t517 = -pkin(1) * t414 - pkin(2) * t468 - pkin(6) * t465 + qJ(1) * t415 - t343;
t466 = t502 * t578 + t528;
t516 = pkin(1) * t467 + qJ(1) * t466 - t440;
t515 = -pkin(1) * t466 + qJ(1) * t467 - t441;
t272 = t497 * t310 + t500 * t313;
t390 = t499 * t440 + t502 * t441;
t417 = -t495 * t471 - t558;
t512 = t499 * t479;
t511 = t502 * t479;
t242 = -pkin(2) * t275 - pkin(3) * t321;
t421 = pkin(5) * t466 - t502 * t470;
t420 = -pkin(5) * t467 - t499 * t470;
t342 = t501 * t393 - t498 * t396;
t389 = t502 * t440 - t499 * t441;
t384 = -t451 * qJD(4) - t513;
t434 = t490 * pkin(4) - t451 * qJ(5);
t509 = t384 * qJ(5) - 0.2e1 * qJD(5) * t449 - t490 * t434 + t313;
t506 = -pkin(1) * t266 + pkin(2) * t387 - pkin(6) * t277;
t505 = -pkin(1) * t283 + pkin(2) * t364 - pkin(6) * t308;
t504 = -pkin(1) * t288 + pkin(2) * t581 - pkin(6) * t325;
t305 = -t384 * pkin(4) - t447 * qJ(5) + t451 * t434 + qJDD(5) + t378;
t503 = qJD(3) ^ 2;
t478 = -t486 - t503;
t477 = t486 - t503;
t476 = -t503 - t532;
t475 = t503 - t532;
t469 = t486 - t532;
t462 = 0.2e1 * t521 + t529;
t461 = t535 * t530;
t454 = t495 * t466;
t453 = t494 * t466;
t445 = 0.2e1 * t533;
t439 = -t448 + t488;
t438 = t447 - t488;
t437 = t499 * qJDD(3) + t502 * t461;
t436 = t501 * t463 - t491 * t530;
t435 = -t492 * t530 + t498 * t508;
t431 = -t498 * t476 - t540;
t430 = -t498 * t475 + t541;
t429 = t501 * t478 - t549;
t428 = t501 * t477 - t548;
t427 = t501 * t476 - t548;
t426 = -t501 * t475 - t549;
t425 = t498 * t478 + t541;
t424 = -t498 * t477 - t540;
t423 = (-t463 - t521) * t498;
t412 = -t498 * t462 - t422;
t411 = -t501 * t462 + t498 * t507;
t407 = -t448 + t447;
t403 = t502 * t436 - t512;
t402 = t502 * t435 + t512;
t401 = t502 * t430 + t498 * t528;
t400 = t502 * t428 + t499 * t527;
t398 = t502 * t431 + t499 * t462;
t397 = t502 * t429 + t499 * t507;
t395 = t499 * t431 - t502 * t462;
t394 = t499 * t429 - t502 * t507;
t392 = (-t449 * t500 + t451 * t497) * t490;
t391 = (-t449 * t497 - t451 * t500) * t490;
t386 = t502 * t412 - t499 * t469;
t380 = -pkin(6) * t427 + t542;
t379 = -pkin(6) * t425 + t550;
t377 = t500 * t438 - t553;
t376 = -t497 * t439 - t544;
t375 = t497 * t438 + t545;
t374 = t500 * t439 - t552;
t373 = t495 * t390 - t558;
t372 = t494 * t390 + t455;
t362 = -pkin(2) * t427 + t396;
t361 = -pkin(2) * t425 + t393;
t359 = t500 * t385 - t451 * t561;
t358 = t497 * t385 + t451 * t560;
t357 = -t497 * t384 + t449 * t560;
t356 = t500 * t384 + t449 * t561;
t354 = t495 * t398 + t494 * t427;
t353 = t495 * t397 + t494 * t425;
t352 = t494 * t398 - t495 * t427;
t351 = t494 * t397 - t495 * t425;
t340 = -t498 * t391 + t501 * t392;
t339 = -t501 * t391 - t498 * t392;
t338 = -pkin(4) * t581 - qJ(5) * t405;
t337 = t502 * t340 + t499 * t489;
t336 = t499 * t340 - t502 * t489;
t335 = -pkin(1) * t394 + pkin(2) * t507 - pkin(6) * t429 + t542;
t334 = -pkin(1) * t395 + pkin(2) * t462 - pkin(6) * t431 - t550;
t333 = -pkin(5) * t414 + t502 * t342;
t332 = t502 * t343 + t499 * t418;
t331 = t499 * t343 - t502 * t418;
t330 = t546 - t565;
t329 = -t498 * t375 + t501 * t377;
t328 = -t498 * t374 + t501 * t376;
t327 = -t501 * t375 - t498 * t377;
t326 = -t501 * t374 - t498 * t376;
t322 = -t500 * t364 - t497 * t581;
t320 = -t497 * t364 + t500 * t581;
t318 = t554 - t566;
t315 = -t498 * t358 + t501 * t359;
t314 = -t498 * t356 + t501 * t357;
t312 = -t501 * t358 - t498 * t359;
t311 = -t501 * t356 - t498 * t357;
t304 = -pkin(5) * t395 - t499 * t362 + t502 * t380;
t303 = -pkin(5) * t394 - t499 * t361 + t502 * t379;
t302 = -qJ(5) * t432 + t305;
t301 = t502 * t315 + t525;
t300 = t502 * t314 - t525;
t299 = t499 * t315 - t524;
t298 = t499 * t314 + t524;
t297 = t518 + t554;
t296 = t502 * t329 - t499 * t365;
t295 = t502 * t328 - t499 * t369;
t294 = t499 * t329 + t502 * t365;
t293 = t499 * t328 + t502 * t369;
t292 = t519 - t546;
t291 = t495 * t337 - t494 * t339;
t290 = t494 * t337 + t495 * t339;
t286 = t495 * t332 - t342 * t494;
t285 = t494 * t332 + t342 * t495;
t281 = -pkin(1) * t331 + pkin(2) * t418 - pkin(6) * t343;
t280 = -t447 * pkin(4) + t509;
t279 = -pkin(4) * t364 + qJ(5) * t399 - t305;
t276 = -t498 * t320 + t501 * t322;
t274 = -t501 * t320 - t498 * t322;
t270 = -pkin(5) * t331 - (pkin(2) * t499 - pkin(6) * t502) * t342;
t269 = t502 * t276 - t499 * t407;
t268 = t499 * t276 + t502 * t407;
t264 = t445 + (-t369 + t443) * qJ(5) + t584 + t523;
t263 = t495 * t296 - t494 * t327;
t262 = t495 * t295 - t494 * t326;
t261 = t494 * t296 + t495 * t327;
t260 = t494 * t295 + t495 * t326;
t259 = t495 * t301 - t494 * t312;
t258 = t495 * t300 - t494 * t311;
t257 = t494 * t301 + t495 * t312;
t256 = t494 * t300 + t495 * t311;
t255 = t495 * t289 + t494 * t324;
t253 = t313 + t580;
t252 = qJ(1) * t255;
t251 = t500 * t302 - t497 * t338 - t565;
t250 = -pkin(3) * t378 + pkin(7) * t272;
t249 = -qJ(5) * t365 + (-t387 - t447) * pkin(4) + t509;
t248 = qJ(5) * t544 - t497 * t279 - t566;
t247 = t310 + t579;
t246 = t495 * t284 + t494 * t307;
t244 = qJ(1) * t246;
t243 = -pkin(4) * t305 + qJ(5) * t280;
t241 = t497 * t302 + t500 * t338 + t518;
t240 = -t271 - t567;
t239 = qJ(5) * t552 + t500 * t279 + t519;
t238 = -t498 * t297 + t501 * t330 - t568;
t237 = (-t432 - t447) * pkin(4) + t509 + t580;
t236 = -pkin(4) * t369 + t242;
t235 = t272 + t520;
t234 = -t498 * t292 + t501 * t318 - t569;
t233 = t500 * t280 - t555;
t232 = t497 * t280 + t547;
t231 = t445 - t510 + t579 + 0.2e1 * t584;
t230 = t495 * t269 - t494 * t274;
t229 = t494 * t269 + t495 * t274;
t228 = t501 * t272 - t551;
t227 = t498 * t272 + t543;
t226 = t495 * t267 + t494 * t275;
t224 = qJ(1) * t226;
t223 = t502 * t228 + t499 * t378;
t222 = t499 * t228 - t502 * t378;
t221 = -t501 * t297 - t498 * t330 + t504;
t220 = -t501 * t292 - t498 * t318 + t505;
t219 = -t497 * t249 + t500 * t264 - t567;
t218 = t500 * t249 + t497 * t264 + t520;
t217 = -pkin(2) * t227 - pkin(3) * t271;
t216 = -t498 * t241 + t501 * t251 - t568;
t215 = -t498 * t239 + t501 * t248 - t569;
t214 = t502 * t238 - t499 * t253 - t571;
t213 = -t498 * t232 + t501 * t233;
t212 = t501 * t232 + t498 * t233;
t211 = t502 * t234 - t499 * t247 - t572;
t210 = -t501 * t241 - t498 * t251 + t504;
t209 = -t498 * t235 + t501 * t240 - t570;
t208 = -pkin(7) * t232 - qJ(5) * t547 - t497 * t243;
t207 = t502 * t213 + t499 * t305;
t206 = t499 * t213 - t502 * t305;
t205 = -t501 * t239 - t498 * t248 + t505;
t204 = -pkin(6) * t227 - pkin(7) * t543 - t498 * t250;
t203 = t495 * t223 + t494 * t227;
t202 = t494 * t223 - t495 * t227;
t201 = -pkin(3) * t305 + pkin(7) * t233 - qJ(5) * t555 + t500 * t243;
t200 = -t501 * t235 - t498 * t240 + t506;
t199 = t502 * t216 - t499 * t237 - t571;
t198 = t502 * t215 - t499 * t231 - t572;
t197 = -pkin(2) * t212 - pkin(3) * t232 - pkin(4) * t278;
t196 = t502 * t209 - t499 * t242 - t573;
t195 = -t498 * t218 + t501 * t219 - t570;
t194 = -pkin(1) * t222 + pkin(2) * t378 - pkin(6) * t228 + pkin(7) * t551 - t501 * t250;
t193 = t495 * t207 + t494 * t212;
t192 = t494 * t207 - t495 * t212;
t191 = -t501 * t218 - t498 * t219 + t506;
t190 = t502 * t195 - t499 * t236 - t573;
t189 = -pkin(5) * t222 + t502 * t204 - t499 * t217;
t188 = -pkin(6) * t212 - t498 * t201 + t501 * t208;
t187 = -pkin(1) * t206 + pkin(2) * t305 - pkin(6) * t213 - t501 * t201 - t498 * t208;
t186 = -pkin(5) * t206 + t502 * t188 - t499 * t197;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t417, 0, 0, 0, 0, 0, 0, -t454, -t556, 0, t373, 0, 0, 0, 0, 0, 0, t353, t354, t495 * t415, t286, 0, 0, 0, 0, 0, 0, t246, t255, t226, t203, 0, 0, 0, 0, 0, 0, t246, t255, t226, t193; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t416, 0, 0, 0, 0, 0, 0, -t453, -t559, 0, t372, 0, 0, 0, 0, 0, 0, t351, t352, t494 * t415, t285, 0, 0, 0, 0, 0, 0, t245, t254, t225, t202, 0, 0, 0, 0, 0, 0, t245, t254, t225, t192; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t539, 0, 0, 0, 0, 0, 0, t467, -t466, 0, -t389, 0, 0, 0, 0, 0, 0, t394, t395, t414, t331, 0, 0, 0, 0, 0, 0, t283, t288, t266, t222, 0, 0, 0, 0, 0, 0, t283, t288, t266, t206; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t583, -t582, -t416, -qJ(1) * t416, 0, 0, t556, 0, -t454, t494 * qJDD(2), t495 * t420 + t494 * t516, t495 * t421 + t494 * t515, t495 * t389, -qJ(1) * t372 - (pkin(1) * t494 - pkin(5) * t495) * t389, t495 * t403 - t494 * t423, t495 * t386 - t494 * t411, t495 * t401 - t494 * t426, t495 * t402 - t494 * t422, t495 * t400 - t494 * t424, t495 * t437, -qJ(1) * t351 + t495 * t303 - t494 * t335, -qJ(1) * t352 + t495 * t304 - t494 * t334, t495 * t333 - t494 * t517, -qJ(1) * t285 + t495 * t270 - t494 * t281, t259, t230, t262, t258, t263, t291, t495 * t211 - t494 * t220 - t563, t495 * t214 - t494 * t221 - t562, t495 * t196 - t494 * t200 - t564, -qJ(1) * t202 + t495 * t189 - t494 * t194, t259, t230, t262, t258, t263, t291, t495 * t198 - t494 * t205 - t563, t495 * t199 - t494 * t210 - t562, t495 * t190 - t494 * t191 - t564, -qJ(1) * t192 + t495 * t186 - t494 * t187; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t582, -t583, t417, qJ(1) * t417, 0, 0, t559, 0, -t453, -t495 * qJDD(2), t494 * t420 - t495 * t516, t494 * t421 - t495 * t515, t494 * t389, qJ(1) * t373 - (-pkin(1) * t495 - pkin(5) * t494) * t389, t494 * t403 + t495 * t423, t494 * t386 + t495 * t411, t494 * t401 + t495 * t426, t494 * t402 + t495 * t422, t494 * t400 + t495 * t424, t494 * t437, qJ(1) * t353 + t494 * t303 + t495 * t335, qJ(1) * t354 + t494 * t304 + t495 * t334, t494 * t333 + t495 * t517, qJ(1) * t286 + t494 * t270 + t495 * t281, t257, t229, t260, t256, t261, t290, t494 * t211 + t495 * t220 + t244, t494 * t214 + t495 * t221 + t252, t494 * t196 + t495 * t200 + t224, qJ(1) * t203 + t494 * t189 + t495 * t194, t257, t229, t260, t256, t261, t290, t494 * t198 + t495 * t205 + t244, t494 * t199 + t495 * t210 + t252, t494 * t190 + t495 * t191 + t224, qJ(1) * t193 + t494 * t186 + t495 * t187; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t470, t471, 0, 0, 0, 0, t466, 0, t467, 0, -t421, t420, t390, pkin(1) * t470 + pkin(5) * t390, t499 * t436 + t511, t499 * t412 + t502 * t469, t499 * t430 - t498 * t526, t499 * t435 - t511, t499 * t428 - t501 * t526, -t502 * qJDD(3) + t499 * t461, -pkin(1) * t425 + pkin(5) * t397 + t502 * t361 + t499 * t379, -pkin(1) * t427 + pkin(5) * t398 + t502 * t362 + t499 * t380, pkin(5) * t415 + t499 * t342, pkin(5) * t332 - (-pkin(2) * t502 - pkin(6) * t499 - pkin(1)) * t342, t299, t268, t293, t298, t294, t336, t499 * t234 + t502 * t247 + t537, t499 * t238 + t502 * t253 + t536, t499 * t209 + t502 * t242 + t538, -pkin(1) * t227 + pkin(5) * t223 + t499 * t204 + t502 * t217, t299, t268, t293, t298, t294, t336, t499 * t215 + t502 * t231 + t537, t499 * t216 + t502 * t237 + t536, t499 * t195 + t502 * t236 + t538, -pkin(1) * t212 + pkin(5) * t207 + t499 * t188 + t502 * t197;];
tauB_reg = t1;
