% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRRRP5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d4,theta1]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:49
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRRRP5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRP5_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRP5_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRP5_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRP5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRRRP5_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:49:44
% EndTime: 2019-12-05 16:49:46
% DurationCPUTime: 1.92s
% Computational Cost: add. (5936->164), mult. (12380->218), div. (0->0), fcn. (8527->8), ass. (0->130)
t1147 = qJD(3) + qJD(4);
t1183 = qJD(4) + t1147;
t1153 = sin(qJ(4));
t1156 = cos(qJ(4));
t1157 = cos(qJ(3));
t1175 = qJD(2) * t1157;
t1154 = sin(qJ(3));
t1176 = qJD(2) * t1154;
t1116 = t1153 * t1176 - t1156 * t1175;
t1182 = t1116 ^ 2;
t1118 = (t1153 * t1157 + t1154 * t1156) * qJD(2);
t1181 = t1118 ^ 2;
t1180 = t1147 ^ 2;
t1179 = t1157 ^ 2;
t1178 = -2 * qJD(5);
t1177 = -g(3) + qJDD(1);
t1174 = t1118 * t1116;
t1150 = sin(pkin(8));
t1151 = cos(pkin(8));
t1132 = t1150 * g(1) - t1151 * g(2);
t1173 = t1150 * t1132;
t1160 = qJD(2) ^ 2;
t1172 = t1179 * t1160;
t1171 = qJD(4) - t1147;
t1133 = -t1151 * g(1) - t1150 * g(2);
t1155 = sin(qJ(2));
t1158 = cos(qJ(2));
t1113 = t1158 * t1133 + t1155 * t1177;
t1105 = -t1160 * pkin(2) + qJDD(2) * pkin(6) + t1113;
t1092 = -t1154 * t1105 - t1157 * t1132;
t1165 = qJD(3) * t1175;
t1170 = t1154 * qJDD(2);
t1126 = t1165 + t1170;
t1139 = t1154 * t1160 * t1157;
t1134 = qJDD(3) + t1139;
t1079 = (-t1126 + t1165) * pkin(7) + t1134 * pkin(3) + t1092;
t1095 = t1157 * t1105 - t1154 * t1132;
t1136 = qJD(3) * pkin(3) - pkin(7) * t1176;
t1166 = qJD(3) * t1176;
t1169 = t1157 * qJDD(2);
t1162 = -t1166 + t1169;
t1080 = -pkin(3) * t1172 + t1162 * pkin(7) - qJD(3) * t1136 + t1095;
t1065 = t1153 * t1079 + t1156 * t1080;
t1168 = -qJDD(3) - qJDD(4);
t1148 = t1154 ^ 2;
t1167 = t1148 + t1179;
t1064 = t1156 * t1079 - t1153 * t1080;
t1164 = t1153 * t1126 - t1156 * t1162;
t1112 = -t1155 * t1133 + t1158 * t1177;
t1099 = -t1168 - t1174;
t1104 = -qJDD(2) * pkin(2) - t1160 * pkin(6) - t1112;
t1163 = -t1118 * qJD(4) - t1164;
t1161 = -t1156 * t1126 - t1153 * t1162;
t1087 = -t1162 * pkin(3) - pkin(7) * t1172 + t1136 * t1176 + t1104;
t1084 = t1171 * t1116 + t1161;
t1159 = qJD(3) ^ 2;
t1138 = -t1159 - t1172;
t1137 = -t1148 * t1160 - t1159;
t1135 = -qJDD(3) + t1139;
t1131 = t1167 * t1160;
t1130 = t1158 * qJDD(2) - t1155 * t1160;
t1129 = -t1155 * qJDD(2) - t1158 * t1160;
t1128 = t1167 * qJDD(2);
t1127 = -0.2e1 * t1166 + t1169;
t1125 = 0.2e1 * t1165 + t1170;
t1120 = t1151 * t1132;
t1111 = t1147 * pkin(4) - t1118 * qJ(5);
t1110 = -t1180 - t1181;
t1109 = t1157 * t1135 - t1154 * t1137;
t1108 = -t1154 * t1134 + t1157 * t1138;
t1107 = t1154 * t1135 + t1157 * t1137;
t1106 = t1157 * t1134 + t1154 * t1138;
t1103 = t1158 * t1128 - t1155 * t1131;
t1102 = t1155 * t1128 + t1158 * t1131;
t1100 = t1168 - t1174;
t1098 = -t1180 - t1182;
t1097 = t1158 * t1109 + t1155 * t1125;
t1096 = t1158 * t1108 - t1155 * t1127;
t1094 = t1155 * t1109 - t1158 * t1125;
t1093 = t1155 * t1108 + t1158 * t1127;
t1091 = -t1155 * t1112 + t1158 * t1113;
t1090 = t1158 * t1112 + t1155 * t1113;
t1089 = -t1181 - t1182;
t1086 = t1156 * t1100 - t1153 * t1110;
t1085 = t1153 * t1100 + t1156 * t1110;
t1083 = -t1183 * t1116 - t1161;
t1082 = -t1171 * t1118 - t1164;
t1081 = t1183 * t1118 + t1164;
t1075 = t1156 * t1098 - t1153 * t1099;
t1074 = t1153 * t1098 + t1156 * t1099;
t1073 = -t1154 * t1092 + t1157 * t1095;
t1072 = t1157 * t1092 + t1154 * t1095;
t1071 = t1158 * t1073 + t1155 * t1104;
t1070 = t1155 * t1073 - t1158 * t1104;
t1069 = -t1154 * t1085 + t1157 * t1086;
t1068 = t1157 * t1085 + t1154 * t1086;
t1067 = t1156 * t1082 - t1153 * t1084;
t1066 = t1153 * t1082 + t1156 * t1084;
t1063 = -t1154 * t1074 + t1157 * t1075;
t1062 = t1157 * t1074 + t1154 * t1075;
t1061 = -t1163 * pkin(4) - t1182 * qJ(5) + t1118 * t1111 + qJDD(5) + t1087;
t1060 = t1158 * t1069 + t1155 * t1083;
t1059 = t1155 * t1069 - t1158 * t1083;
t1058 = t1158 * t1063 + t1155 * t1081;
t1057 = t1155 * t1063 - t1158 * t1081;
t1056 = -t1147 * t1111 + t1163 * qJ(5) + (-pkin(4) * t1116 + t1178) * t1116 + t1065;
t1055 = t1099 * pkin(4) + t1084 * qJ(5) + t1118 * t1178 + t1064;
t1054 = -t1154 * t1066 + t1157 * t1067;
t1053 = t1157 * t1066 + t1154 * t1067;
t1052 = -t1153 * t1064 + t1156 * t1065;
t1051 = t1156 * t1064 + t1153 * t1065;
t1050 = t1158 * t1054 + t1155 * t1089;
t1049 = t1155 * t1054 - t1158 * t1089;
t1048 = t1151 * t1060 + t1150 * t1068;
t1047 = t1150 * t1060 - t1151 * t1068;
t1046 = t1151 * t1058 + t1150 * t1062;
t1045 = t1150 * t1058 - t1151 * t1062;
t1044 = -t1153 * t1055 + t1156 * t1056;
t1043 = t1156 * t1055 + t1153 * t1056;
t1042 = -t1154 * t1051 + t1157 * t1052;
t1041 = t1157 * t1051 + t1154 * t1052;
t1040 = t1151 * t1050 + t1150 * t1053;
t1039 = t1150 * t1050 - t1151 * t1053;
t1038 = t1158 * t1042 + t1155 * t1087;
t1037 = t1155 * t1042 - t1158 * t1087;
t1036 = -t1154 * t1043 + t1157 * t1044;
t1035 = t1157 * t1043 + t1154 * t1044;
t1034 = t1158 * t1036 + t1155 * t1061;
t1033 = t1155 * t1036 - t1158 * t1061;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1151 * t1133 - t1173, 0, 0, 0, 0, 0, 0, t1151 * t1129, -t1151 * t1130, 0, t1151 * t1091 - t1173, 0, 0, 0, 0, 0, 0, t1151 * t1096 + t1150 * t1106, t1151 * t1097 + t1150 * t1107, t1151 * t1103, t1151 * t1071 + t1150 * t1072, 0, 0, 0, 0, 0, 0, t1046, t1048, t1040, t1151 * t1038 + t1150 * t1041, 0, 0, 0, 0, 0, 0, t1046, t1048, t1040, t1151 * t1034 + t1150 * t1035; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1150 * t1133 + t1120, 0, 0, 0, 0, 0, 0, t1150 * t1129, -t1150 * t1130, 0, t1150 * t1091 + t1120, 0, 0, 0, 0, 0, 0, t1150 * t1096 - t1151 * t1106, t1150 * t1097 - t1151 * t1107, t1150 * t1103, t1150 * t1071 - t1151 * t1072, 0, 0, 0, 0, 0, 0, t1045, t1047, t1039, t1150 * t1038 - t1151 * t1041, 0, 0, 0, 0, 0, 0, t1045, t1047, t1039, t1150 * t1034 - t1151 * t1035; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1177, 0, 0, 0, 0, 0, 0, t1130, t1129, 0, t1090, 0, 0, 0, 0, 0, 0, t1093, t1094, t1102, t1070, 0, 0, 0, 0, 0, 0, t1057, t1059, t1049, t1037, 0, 0, 0, 0, 0, 0, t1057, t1059, t1049, t1033; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1133, 0, 0, 0, 0, 0, 0, t1129, -t1130, 0, t1091, 0, 0, 0, 0, 0, 0, t1096, t1097, t1103, t1071, 0, 0, 0, 0, 0, 0, t1058, t1060, t1050, t1038, 0, 0, 0, 0, 0, 0, t1058, t1060, t1050, t1034; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1132, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1132, 0, 0, 0, 0, 0, 0, -t1106, -t1107, 0, -t1072, 0, 0, 0, 0, 0, 0, -t1062, -t1068, -t1053, -t1041, 0, 0, 0, 0, 0, 0, -t1062, -t1068, -t1053, -t1035; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1177, 0, 0, 0, 0, 0, 0, t1130, t1129, 0, t1090, 0, 0, 0, 0, 0, 0, t1093, t1094, t1102, t1070, 0, 0, 0, 0, 0, 0, t1057, t1059, t1049, t1037, 0, 0, 0, 0, 0, 0, t1057, t1059, t1049, t1033; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1160, -qJDD(2), 0, t1113, 0, 0, 0, 0, 0, 0, t1108, t1109, t1128, t1073, 0, 0, 0, 0, 0, 0, t1063, t1069, t1054, t1042, 0, 0, 0, 0, 0, 0, t1063, t1069, t1054, t1036; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1160, 0, t1112, 0, 0, 0, 0, 0, 0, t1127, -t1125, t1131, -t1104, 0, 0, 0, 0, 0, 0, -t1081, -t1083, -t1089, -t1087, 0, 0, 0, 0, 0, 0, -t1081, -t1083, -t1089, -t1061; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1132, 0, 0, 0, 0, 0, 0, t1106, t1107, 0, t1072, 0, 0, 0, 0, 0, 0, t1062, t1068, t1053, t1041, 0, 0, 0, 0, 0, 0, t1062, t1068, t1053, t1035; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1138, t1135, t1169, t1095, 0, 0, 0, 0, 0, 0, t1075, t1086, t1067, t1052, 0, 0, 0, 0, 0, 0, t1075, t1086, t1067, t1044; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1134, t1137, -t1170, t1092, 0, 0, 0, 0, 0, 0, t1074, t1085, t1066, t1051, 0, 0, 0, 0, 0, 0, t1074, t1085, t1066, t1043; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1127, t1125, -t1131, t1104, 0, 0, 0, 0, 0, 0, t1081, t1083, t1089, t1087, 0, 0, 0, 0, 0, 0, t1081, t1083, t1089, t1061; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1098, t1100, t1082, t1065, 0, 0, 0, 0, 0, 0, t1098, t1100, t1082, t1056; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1099, t1110, t1084, t1064, 0, 0, 0, 0, 0, 0, t1099, t1110, t1084, t1055; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1081, t1083, t1089, t1087, 0, 0, 0, 0, 0, 0, t1081, t1083, t1089, t1061; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1098, t1100, t1082, t1056; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1099, t1110, t1084, t1055; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1081, t1083, t1089, t1061;];
f_new_reg = t1;
