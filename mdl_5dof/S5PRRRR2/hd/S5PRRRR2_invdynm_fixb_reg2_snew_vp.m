% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PRRRR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d3,d4,d5]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:05
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PRRRR2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR2_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR2_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRR2_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRR2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S5PRRRR2_invdynm_fixb_reg2_snew_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:05:01
% EndTime: 2019-12-05 17:05:07
% DurationCPUTime: 6.32s
% Computational Cost: add. (19685->325), mult. (25724->407), div. (0->0), fcn. (15904->8), ass. (0->256)
t628 = qJD(2) + qJD(3);
t624 = qJD(4) + t628;
t622 = t624 ^ 2;
t637 = cos(qJ(4));
t627 = qJDD(2) + qJDD(3);
t623 = qJDD(4) + t627;
t633 = sin(qJ(4));
t701 = t633 * t623;
t585 = t637 * t622 + t701;
t695 = t637 * t623;
t588 = t633 * t622 - t695;
t634 = sin(qJ(3));
t638 = cos(qJ(3));
t521 = t638 * t585 - t634 * t588;
t526 = t634 * t585 + t638 * t588;
t635 = sin(qJ(2));
t639 = cos(qJ(2));
t475 = t639 * t521 - t635 * t526;
t631 = g(3) - qJDD(1);
t564 = pkin(5) * t585 - t637 * t631;
t721 = pkin(5) * t588 - t633 * t631;
t464 = pkin(4) * t521 + t638 * t564 - t634 * t721;
t728 = pkin(4) * t526 + t634 * t564 + t638 * t721;
t667 = t639 * t464 - t635 * t728;
t743 = qJ(1) * t475 + t667;
t729 = t635 * t521 + t639 * t526;
t738 = t635 * t464 + t639 * t728;
t742 = qJ(1) * t729 + t738;
t626 = t628 ^ 2;
t595 = t638 * t626 + t634 * t627;
t598 = t634 * t626 - t638 * t627;
t530 = t639 * t595 - t635 * t598;
t571 = pkin(4) * t595 - t638 * t631;
t722 = pkin(4) * t598 - t634 * t631;
t663 = t639 * t571 - t635 * t722;
t739 = qJ(1) * t530 + t663;
t719 = t635 * t595 + t639 * t598;
t730 = t635 * t571 + t639 * t722;
t735 = qJ(1) * t719 + t730;
t613 = t635 * g(1) - t639 * g(2);
t602 = qJDD(2) * pkin(2) + t613;
t614 = t639 * g(1) + t635 * g(2);
t641 = qJD(2) ^ 2;
t603 = -t641 * pkin(2) - t614;
t543 = t634 * t602 + t638 * t603;
t529 = -t626 * pkin(3) + t543;
t542 = -t638 * t602 + t634 * t603;
t646 = t627 * pkin(3) - t542;
t488 = t633 * t529 - t637 * t646;
t489 = t637 * t529 + t633 * t646;
t666 = t633 * t488 + t637 * t489;
t434 = t637 * t488 - t633 * t489;
t693 = t638 * t434;
t399 = -t634 * t666 + t693;
t699 = t634 * t434;
t723 = t638 * t666 + t699;
t381 = t635 * t399 + t639 * t723;
t383 = t639 * t399 - t635 * t723;
t665 = t634 * t542 + t638 * t543;
t495 = t638 * t542 - t634 * t543;
t691 = t639 * t495;
t438 = -t635 * t665 + t691;
t697 = t635 * t495;
t436 = t639 * t665 + t697;
t483 = t623 * pkin(6) + t489;
t632 = sin(qJ(5));
t636 = cos(qJ(5));
t471 = t632 * t483 + t636 * t631;
t472 = t636 * t483 - t632 * t631;
t428 = t632 * t471 + t636 * t472;
t610 = t639 * qJDD(2) - t635 * t641;
t617 = t635 * t631;
t712 = -qJ(1) * t610 - t617;
t609 = t635 * qJDD(2) + t639 * t641;
t690 = t639 * t631;
t711 = -qJ(1) * t609 + t690;
t710 = pkin(1) * t631;
t709 = pkin(2) * t631;
t427 = t636 * t471 - t632 * t472;
t708 = pkin(6) * t427;
t629 = t632 ^ 2;
t705 = t629 * t622;
t484 = -t622 * pkin(6) + t488;
t481 = t632 * t484;
t608 = t632 * t622 * t636;
t599 = qJDD(5) + t608;
t704 = t632 * t599;
t600 = qJDD(5) - t608;
t703 = t632 * t600;
t702 = t632 * t623;
t482 = t636 * t484;
t696 = t636 * t600;
t615 = t636 * t623;
t630 = t636 ^ 2;
t680 = t629 + t630;
t583 = t680 * t623;
t616 = t630 * t622;
t589 = t616 + t705;
t524 = t637 * t583 - t633 * t589;
t412 = pkin(5) * t524 + t633 * t427;
t520 = t633 * t583 + t637 * t589;
t413 = -pkin(5) * t520 + t637 * t427;
t478 = -t634 * t520 + t638 * t524;
t388 = pkin(4) * t478 + t638 * t412 + t634 * t413;
t474 = t638 * t520 + t634 * t524;
t389 = -pkin(4) * t474 - t634 * t412 + t638 * t413;
t689 = t639 * t388 + t635 * t389;
t431 = pkin(3) * t434;
t688 = -pkin(2) * t399 - t431;
t406 = t633 * t428 - t637 * t484;
t425 = pkin(6) * t428;
t687 = pkin(3) * t406 + t425;
t640 = qJD(5) ^ 2;
t605 = -t640 - t705;
t551 = -t632 * t605 - t696;
t684 = pkin(6) * t551 + t481;
t607 = -t616 - t640;
t549 = t636 * t607 - t704;
t683 = pkin(6) * t549 - t482;
t679 = qJD(5) * t624;
t407 = t637 * t428 + t633 * t484;
t390 = t638 * t406 + t634 * t407;
t678 = pkin(2) * t390 + t687;
t677 = pkin(6) * t583 + t428;
t612 = t636 * t679;
t579 = 0.2e1 * t612 + t702;
t504 = t633 * t551 - t637 * t579;
t676 = pkin(3) * t504 + t684;
t674 = t632 * t679;
t582 = t615 - 0.2e1 * t674;
t503 = t633 * t549 + t637 * t582;
t675 = pkin(3) * t503 + t683;
t375 = pkin(5) * t407 - (-pkin(6) * t633 - pkin(3)) * t427;
t391 = -t634 * t406 + t638 * t407;
t395 = -pkin(5) * t406 + t637 * t708;
t359 = pkin(2) * t427 + pkin(4) * t391 + t638 * t375 + t634 * t395;
t362 = -pkin(4) * t390 - t634 * t375 + t638 * t395;
t673 = -t635 * t359 + t639 * t362;
t591 = t636 * t599;
t545 = t632 * t607 + t591;
t443 = -pkin(6) * t545 + t481;
t505 = t637 * t549 - t633 * t582;
t401 = -pkin(3) * t545 + pkin(5) * t505 + t633 * t443 + t637 * t471;
t408 = -pkin(5) * t503 + t637 * t443 - t633 * t471;
t449 = -t634 * t503 + t638 * t505;
t367 = -pkin(2) * t545 + pkin(4) * t449 + t638 * t401 + t634 * t408;
t447 = t638 * t503 + t634 * t505;
t373 = -pkin(4) * t447 - t634 * t401 + t638 * t408;
t672 = -t635 * t367 + t639 * t373;
t547 = t636 * t605 - t703;
t444 = -pkin(6) * t547 + t482;
t506 = t637 * t551 + t633 * t579;
t402 = -pkin(3) * t547 + pkin(5) * t506 + t633 * t444 + t637 * t472;
t409 = -pkin(5) * t504 + t637 * t444 - t633 * t472;
t450 = -t634 * t504 + t638 * t506;
t368 = -pkin(2) * t547 + pkin(4) * t450 + t638 * t402 + t634 * t409;
t448 = t638 * t504 + t634 * t506;
t374 = -pkin(4) * t448 - t634 * t402 + t638 * t409;
t671 = -t635 * t368 + t639 * t374;
t430 = pkin(3) * t631 + pkin(5) * t666;
t377 = pkin(4) * t723 + pkin(5) * t699 + t638 * t430 + t709;
t380 = pkin(4) * t399 + pkin(5) * t693 - t634 * t430;
t670 = -t635 * t377 + t639 * t380;
t669 = -t635 * t388 + t639 * t389;
t565 = -t635 * t613 - t639 * t614;
t660 = t633 * t608;
t659 = t637 * t608;
t658 = pkin(2) * t447 + t675;
t657 = pkin(2) * t448 + t676;
t656 = pkin(3) * t520 + t677;
t655 = pkin(1) * t427 + t639 * t359 + t635 * t362;
t654 = -pkin(1) * t545 + t639 * t367 + t635 * t373;
t653 = -pkin(1) * t547 + t639 * t368 + t635 * t374;
t652 = t639 * t377 + t635 * t380 + t710;
t651 = -pkin(3) * t588 - t488;
t650 = -pkin(2) * t598 - t542;
t649 = pkin(2) * t474 + t656;
t566 = t639 * t613 - t635 * t614;
t648 = -pkin(2) * t526 + t651;
t491 = pkin(4) * t665 + t709;
t647 = pkin(4) * t691 - t635 * t491;
t645 = -pkin(2) * t595 - t543;
t644 = pkin(4) * t697 + t639 * t491 + t710;
t643 = -pkin(3) * t585 - t489;
t642 = -pkin(2) * t521 + t643;
t606 = t616 - t640;
t604 = t640 - t705;
t590 = -t616 + t705;
t581 = t615 - t674;
t580 = t612 + t702;
t575 = t680 * t679;
t573 = -pkin(1) * t609 + t614;
t572 = pkin(1) * t610 + t613;
t554 = pkin(1) * t566;
t553 = t633 * qJDD(5) + t637 * t575;
t552 = -t637 * qJDD(5) + t633 * t575;
t550 = -t632 * t604 + t591;
t548 = t636 * t606 - t703;
t546 = t636 * t604 + t704;
t544 = t632 * t606 + t696;
t541 = t636 * t580 - t629 * t679;
t540 = -t632 * t581 - t630 * t679;
t536 = (t580 + t612) * t632;
t535 = (t581 - t674) * t636;
t516 = -t632 * t579 + t636 * t582;
t515 = t636 * t579 + t632 * t582;
t514 = t637 * t550 + t632 * t701;
t513 = t637 * t548 + t633 * t615;
t512 = t633 * t550 - t632 * t695;
t511 = t633 * t548 - t636 * t695;
t510 = t637 * t541 - t660;
t509 = t637 * t540 + t660;
t508 = t633 * t541 + t659;
t507 = t633 * t540 - t659;
t500 = -t634 * t552 + t638 * t553;
t499 = t638 * t552 + t634 * t553;
t498 = t637 * t516 + t633 * t590;
t497 = t633 * t516 - t637 * t590;
t492 = pkin(2) * t495;
t486 = -pkin(1) * t719 + t650;
t485 = -pkin(1) * t530 + t645;
t470 = -t634 * t512 + t638 * t514;
t469 = -t634 * t511 + t638 * t513;
t468 = t638 * t512 + t634 * t514;
t467 = t638 * t511 + t634 * t513;
t454 = -t634 * t508 + t638 * t510;
t453 = -t634 * t507 + t638 * t509;
t452 = t638 * t508 + t634 * t510;
t451 = t638 * t507 + t634 * t509;
t442 = -t635 * t499 + t639 * t500;
t441 = t639 * t499 + t635 * t500;
t440 = -t634 * t497 + t638 * t498;
t439 = t638 * t497 + t634 * t498;
t429 = t639 * t474 + t635 * t478;
t424 = -t635 * t468 + t639 * t470;
t423 = -t635 * t467 + t639 * t469;
t422 = t639 * t468 + t635 * t470;
t421 = t639 * t467 + t635 * t469;
t420 = -t635 * t452 + t639 * t454;
t419 = -t635 * t451 + t639 * t453;
t418 = t639 * t452 + t635 * t454;
t417 = t639 * t451 + t635 * t453;
t416 = -pkin(1) * t438 - t492;
t415 = -pkin(1) * t729 + t648;
t414 = -pkin(1) * t475 + t642;
t411 = t639 * t448 + t635 * t450;
t410 = t639 * t447 + t635 * t449;
t404 = -t635 * t439 + t639 * t440;
t403 = t639 * t439 + t635 * t440;
t394 = pkin(1) * t429 + t649;
t393 = pkin(1) * t411 + t657;
t392 = pkin(1) * t410 + t658;
t364 = t639 * t390 + t635 * t391;
t363 = -pkin(1) * t383 + t688;
t357 = pkin(1) * t364 + t678;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, 0, -t631, g(2), qJ(1) * g(2), 0, 0, t610, 0, -t609, 0, t712, -t711, -t566, -qJ(1) * t566, 0, 0, -t719, 0, -t530, 0, t735, t739, t438, qJ(1) * t438 + t647, 0, 0, -t729, 0, -t475, 0, t742, t743, t383, qJ(1) * t383 + t670, t420, t404, t424, t419, t423, t442, -qJ(1) * t410 + t672, -qJ(1) * t411 + t671, -qJ(1) * t429 + t669, -qJ(1) * t364 + t673; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t631, 0, -g(1), -qJ(1) * g(1), 0, 0, t609, 0, t610, 0, t711, t712, t565, qJ(1) * t565 + t710, 0, 0, t530, 0, -t719, 0, -t739, t735, t436, qJ(1) * t436 + t644, 0, 0, t475, 0, -t729, 0, -t743, t742, t381, qJ(1) * t381 + t652, t418, t403, t422, t417, t421, t441, qJ(1) * (-t635 * t447 + t639 * t449) + t654, qJ(1) * (-t635 * t448 + t639 * t450) + t653, qJ(1) * (-t635 * t474 + t639 * t478) + t689, qJ(1) * (-t635 * t390 + t639 * t391) + t655; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(2), t572, t573, 0, t554, 0, 0, 0, 0, 0, t627, t486, t485, 0, t416, 0, 0, 0, 0, 0, t623, t415, t414, 0, t363, t536, t515, t546, t535, t544, 0, t392, t393, t394, t357; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t631, g(2), 0, 0, 0, t610, 0, -t609, 0, -t617, -t690, -t566, 0, 0, 0, -t719, 0, -t530, 0, t730, t663, t438, t647, 0, 0, -t729, 0, -t475, 0, t738, t667, t383, t670, t420, t404, t424, t419, t423, t442, t672, t671, t669, t673; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t631, 0, -g(1), 0, 0, 0, t609, 0, t610, 0, t690, -t617, t565, t710, 0, 0, t530, 0, -t719, 0, -t663, t730, t436, t644, 0, 0, t475, 0, -t729, 0, -t667, t738, t381, t652, t418, t403, t422, t417, t421, t441, t654, t653, t689, t655; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(2), t572, t573, 0, t554, 0, 0, 0, 0, 0, t627, t486, t485, 0, t416, 0, 0, 0, 0, 0, t623, t415, t414, 0, t363, t536, t515, t546, t535, t544, 0, t392, t393, t394, t357; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t641, 0, 0, -t631, -t613, 0, 0, 0, -t598, 0, -t595, 0, t722, t571, t495, pkin(4) * t495, 0, 0, -t526, 0, -t521, 0, t728, t464, t399, t380, t454, t440, t470, t453, t469, t500, t373, t374, t389, t362; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t641, 0, qJDD(2), 0, t631, 0, -t614, 0, 0, 0, t595, 0, -t598, 0, -t571, t722, t665, t491, 0, 0, t521, 0, -t526, 0, -t464, t728, t723, t377, t452, t439, t468, t451, t467, t499, t367, t368, t388, t359; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t613, t614, 0, 0, 0, 0, 0, 0, 0, t627, t650, t645, 0, -t492, 0, 0, 0, 0, 0, t623, t648, t642, 0, t688, t536, t515, t546, t535, t544, 0, t658, t657, t649, t678; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t627, 0, -t626, 0, 0, -t631, t542, 0, 0, 0, -t588, 0, -t585, 0, t721, t564, t434, pkin(5) * t434, t510, t498, t514, t509, t513, t553, t408, t409, t413, t395; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t626, 0, t627, 0, t631, 0, t543, 0, 0, 0, t585, 0, -t588, 0, -t564, t721, t666, t430, t508, t497, t512, t507, t511, t552, t401, t402, t412, t375; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t627, -t542, -t543, 0, 0, 0, 0, 0, 0, 0, t623, t651, t643, 0, -t431, t536, t515, t546, t535, t544, 0, t675, t676, t656, t687; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t623, 0, -t622, 0, 0, -t631, t488, 0, t541, t516, t550, t540, t548, t575, t443, t444, t427, t708; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t622, 0, t623, 0, t631, 0, t489, 0, t608, -t590, -t702, -t608, -t615, -qJDD(5), t471, t472, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t623, -t488, -t489, 0, 0, t536, t515, t546, t535, t544, 0, t683, t684, t677, t425; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t580, t582, t599, -t612, t606, t612, 0, t484, t471, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t674, t579, t604, t581, t600, -t674, -t484, 0, t472, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t608, t590, t702, t608, t615, qJDD(5), -t471, -t472, 0, 0;];
m_new_reg = t1;
