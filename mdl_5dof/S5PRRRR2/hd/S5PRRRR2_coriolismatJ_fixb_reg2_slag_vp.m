% Calculate inertial parameters regressor of coriolis matrix for
% S5PRRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [6x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,d3,d4,d5]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:05
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PRRRR2_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(6,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR2_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR2_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [6 1]), ...
  'S5PRRRR2_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [6x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:04:56
% EndTime: 2019-12-05 17:05:00
% DurationCPUTime: 1.74s
% Computational Cost: add. (916->155), mult. (2427->208), div. (0->0), fcn. (1769->6), ass. (0->125)
t92 = sin(qJ(5));
t90 = t92 ^ 2;
t95 = cos(qJ(5));
t91 = t95 ^ 2;
t116 = t91 / 0.2e1 + t90 / 0.2e1;
t159 = cos(qJ(3));
t96 = cos(qJ(4));
t114 = t159 * t96;
t93 = sin(qJ(4));
t94 = sin(qJ(3));
t155 = t93 * t94;
t70 = (t114 - t155) * pkin(2);
t168 = t116 * t70;
t170 = t168 * pkin(6);
t152 = t90 + t91;
t131 = -qJD(3) - qJD(4);
t110 = qJD(2) - t131;
t84 = t91 - t90;
t169 = t110 * t84;
t160 = t96 * pkin(3);
t127 = -t160 / 0.2e1;
t167 = t127 - t70 / 0.2e1;
t126 = t159 * pkin(2);
t106 = t126 + pkin(3);
t74 = t96 * t106;
t63 = pkin(2) * t155 - t74;
t166 = t63 / 0.2e1;
t162 = t92 / 0.2e1;
t161 = pkin(2) * t94;
t36 = t93 * pkin(3);
t115 = t159 * t93;
t154 = t94 * t96;
t68 = (t115 + t154) * pkin(2);
t158 = t63 * t68;
t157 = t68 * t95;
t156 = t68 * t96;
t100 = t93 * t106;
t64 = pkin(2) * t154 + t100;
t61 = t64 * qJD(4);
t65 = t68 * qJD(3);
t153 = -t65 - t61;
t151 = pkin(3) * qJD(3);
t62 = pkin(6) + t64;
t3 = (-t152 * t62 + t64) * t63;
t150 = t3 * qJD(2);
t26 = t152 * t70;
t4 = t62 * t26 + t158;
t149 = t4 * qJD(2);
t8 = t64 * t70 + t158;
t148 = t8 * qJD(2);
t147 = qJD(3) * t93;
t146 = qJD(4) * t93;
t108 = t36 / 0.2e1 + t64 / 0.2e1;
t99 = -t68 / 0.2e1 + t108;
t10 = t99 * t92;
t145 = t10 * qJD(2);
t11 = t99 * t95;
t144 = t11 * qJD(2);
t107 = t127 + t70 / 0.2e1;
t46 = t63 * t162;
t13 = t107 * t92 + t46;
t143 = t13 * qJD(2);
t47 = t95 * t166;
t15 = t107 * t95 + t47;
t142 = t15 * qJD(2);
t24 = t152 * t63;
t141 = t24 * qJD(2);
t19 = t24 * qJD(4);
t140 = t26 * qJD(2);
t139 = t36 * qJD(2);
t37 = t74 / 0.2e1 + (-t126 / 0.2e1 + pkin(3) / 0.2e1) * t96;
t138 = t37 * qJD(2);
t137 = t63 * qJD(2);
t136 = t64 * qJD(2);
t135 = t68 * qJD(2);
t69 = t152 * t160;
t66 = t69 * qJD(4);
t134 = t70 * qJD(2);
t133 = t92 * qJD(5);
t89 = t95 * qJD(5);
t132 = -qJD(2) - qJD(3);
t130 = pkin(3) * t146;
t129 = pkin(3) * t147;
t128 = t96 * t151;
t125 = t92 * t147;
t124 = t96 * t133;
t123 = t96 * t89;
t122 = t92 * t137;
t121 = t95 * t137;
t120 = t92 * t136;
t119 = t92 * t135;
t86 = pkin(6) + t36;
t113 = t152 * t86;
t112 = t159 * qJD(2);
t111 = t159 * qJD(3);
t109 = t131 * t93;
t105 = t116 * t63;
t104 = t116 * t96;
t103 = t131 * t160;
t97 = t64 * t127 + (t62 * t104 + t93 * t166) * pkin(3) - t86 * t105;
t2 = t97 - t170;
t27 = (t113 - t36) * t160;
t102 = -t2 * qJD(2) - t27 * qJD(3);
t6 = t152 * (-t63 / 0.2e1 - t107);
t101 = -t6 * qJD(2) - t69 * qJD(3);
t85 = t92 * t89;
t83 = t92 * t130;
t73 = t84 * qJD(5);
t67 = t70 * qJD(3);
t60 = t63 * qJD(4);
t59 = t92 * t65;
t50 = t92 * t61;
t38 = t110 * t95 * t92;
t29 = t127 - t74 / 0.2e1 + (t155 - t114 / 0.2e1) * pkin(2);
t28 = -t36 / 0.2e1 - t100 / 0.2e1 + (-t154 - t115 / 0.2e1) * pkin(2);
t25 = t26 * qJD(3);
t23 = 0.2e1 * t47;
t22 = 0.2e1 * t46;
t16 = t167 * t95 + t47;
t14 = t167 * t92 + t46;
t12 = -t157 / 0.2e1 - t108 * t95;
t9 = t108 * t92 + t68 * t162;
t5 = pkin(3) * t104 - t105 + t168;
t1 = t97 + t170;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t133, -t89, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3) * t161, -pkin(2) * t111, 0, 0, 0, 0, 0, 0, 0, 0, t153, -t67 + t60, 0, t8 * qJD(3), t85, t73, 0, -t85, 0, 0, t63 * t133 + t153 * t95, t63 * t89 + t50 + t59, t25 - t19, t4 * qJD(3) + t3 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t132 * t161, (-t112 - t111) * pkin(2), 0, 0, 0, 0, 0, 0, 0, 0, t28 * qJD(4) - t135 - t65, t29 * qJD(4) - t134 - t67, 0, t148 + (t70 * t93 - t156) * t151, t85, t73, 0, -t85, 0, 0, t12 * qJD(4) + t14 * qJD(5) + t132 * t157, t9 * qJD(4) + t16 * qJD(5) + t119 + t59, t5 * qJD(4) + t140 + t25, t149 + (-pkin(3) * t156 + t113 * t70) * qJD(3) + t1 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28 * qJD(3) - t136 - t61, t29 * qJD(3) + t137 + t60, 0, 0, t85, t73, 0, -t85, 0, 0, t12 * qJD(3) + t22 * qJD(5) + (-qJD(2) - qJD(4)) * t95 * t64, t9 * qJD(3) + t23 * qJD(5) + t120 + t50, t5 * qJD(3) - t141 - t19, -pkin(6) * t19 + t1 * qJD(3) + t150; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, t169, t89, -t38, -t133, 0, t14 * qJD(3) + t22 * qJD(4) - t62 * t89 + t122, t16 * qJD(3) + t23 * qJD(4) + t62 * t133 + t121, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t161, pkin(2) * t112, 0, 0, 0, 0, 0, 0, 0, 0, -t36 * qJD(4) + t135, -t37 * qJD(4) + t134, 0, -t148, t85, t73, 0, -t85, 0, 0, -t11 * qJD(4) + t13 * qJD(5) + t95 * t135, t10 * qJD(4) + t15 * qJD(5) - t119, t6 * qJD(4) - t140, t2 * qJD(4) - t149; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t130, -qJD(4) * t160, 0, 0, t85, t73, 0, -t85, 0, 0, (-t95 * t146 - t124) * pkin(3), -pkin(3) * t123 + t83, t66, t27 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, pkin(3) * t109 - t139, t103 - t138, 0, 0, t85, t73, 0, -t85, 0, 0, -t144 + (t95 * t109 - t124) * pkin(3), t145 + t83 + (-t123 + t125) * pkin(3), -t101 + t66, pkin(6) * t66 - t102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, t169, t89, -t38, -t133, 0, t92 * t103 - t86 * t89 + t143, t95 * t103 + t86 * t133 + t142, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t36 * qJD(3) + t136, t37 * qJD(3) - t137, 0, 0, t85, t73, 0, -t85, 0, 0, t11 * qJD(3) + t95 * t136, -t10 * qJD(3) - t120, -t6 * qJD(3) + t141, -t2 * qJD(3) - t150; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t129 + t139, t128 + t138, 0, 0, t85, t73, 0, -t85, 0, 0, t95 * t129 + t144, -pkin(3) * t125 - t145, t101, t102; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t85, t73, 0, -t85, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, t169, t89, -t38, -t133, 0, -pkin(6) * t89, pkin(6) * t133, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t38, -t169, 0, t38, 0, 0, -t13 * qJD(3) - t122, -t15 * qJD(3) - t121, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t38, -t169, 0, t38, 0, 0, t92 * t128 - t143, t95 * t128 - t142, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t38, -t169, 0, t38, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t7;
