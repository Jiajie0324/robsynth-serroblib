% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:02
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPRP7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRP7_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRP7_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRP7_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRP7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPRP7_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:01:45
% EndTime: 2019-12-31 20:02:02
% DurationCPUTime: 17.21s
% Computational Cost: add. (35580->582), mult. (81805->819), div. (0->0), fcn. (56606->8), ass. (0->429)
t749 = sin(pkin(8));
t750 = cos(pkin(8));
t756 = cos(qJ(2));
t811 = qJD(1) * t756;
t753 = sin(qJ(2));
t812 = qJD(1) * t753;
t710 = t749 * t811 + t750 * t812;
t752 = sin(qJ(4));
t755 = cos(qJ(4));
t685 = t752 * qJD(2) + t755 * t710;
t802 = qJD(1) * qJD(2);
t789 = t756 * t802;
t801 = t753 * qJDD(1);
t718 = t789 + t801;
t741 = t756 * qJDD(1);
t790 = t753 * t802;
t719 = t741 - t790;
t672 = t750 * t718 + t749 * t719;
t785 = -t755 * qJDD(2) + t752 * t672;
t708 = t749 * t812 - t750 * t811;
t704 = qJD(4) + t708;
t803 = qJD(4) + t704;
t574 = t803 * t685 + t785;
t683 = -t755 * qJD(2) + t752 * t710;
t772 = -t752 * qJDD(2) - t755 * t672;
t765 = t683 * qJD(4) + t772;
t848 = t683 * t704;
t864 = -t848 - t765;
t834 = t752 * t864;
t504 = t755 * t574 + t834;
t682 = t685 ^ 2;
t853 = t683 ^ 2;
t630 = t682 - t853;
t474 = t749 * t504 + t750 * t630;
t476 = t750 * t504 - t749 * t630;
t430 = t753 * t474 - t756 * t476;
t500 = -t752 * t574 + t755 * t864;
t754 = sin(qJ(1));
t757 = cos(qJ(1));
t953 = t754 * t430 - t757 * t500;
t952 = t757 * t430 + t754 * t500;
t852 = t704 ^ 2;
t648 = t853 - t852;
t635 = t685 * t683;
t784 = t749 * t718 - t750 * t719;
t669 = qJDD(4) + t784;
t866 = t635 + t669;
t832 = t752 * t866;
t553 = t755 * t648 - t832;
t575 = (qJD(4) - t704) * t685 + t785;
t495 = t749 * t553 + t750 * t575;
t499 = t750 * t553 - t749 * t575;
t447 = t753 * t495 - t756 * t499;
t820 = t755 * t866;
t548 = t752 * t648 + t820;
t951 = t754 * t447 + t757 * t548;
t950 = t757 * t447 - t754 * t548;
t863 = -t848 + t765;
t893 = -t752 * t575 + t755 * t863;
t865 = t682 + t853;
t892 = -t755 * t575 - t752 * t863;
t909 = -t749 * t865 + t750 * t892;
t911 = t749 * t892 + t750 * t865;
t922 = -t753 * t911 + t756 * t909;
t939 = t754 * t893 + t757 * t922;
t949 = pkin(5) * t939;
t941 = t754 * t922 - t757 * t893;
t948 = pkin(5) * t941;
t947 = t756 * t474 + t753 * t476;
t946 = t756 * t495 + t753 * t499;
t921 = t753 * t909 + t756 * t911;
t945 = pkin(6) * t921;
t944 = -pkin(1) * t921 - pkin(2) * t911 - pkin(3) * t865 - pkin(7) * t892;
t943 = -pkin(1) * t893 + pkin(6) * t922;
t649 = -t682 + t852;
t867 = -t635 + t669;
t831 = t752 * t867;
t895 = -t755 * t649 - t831;
t819 = t755 * t867;
t894 = -t752 * t649 + t819;
t908 = -t749 * t863 + t750 * t894;
t910 = t749 * t894 + t750 * t863;
t924 = -t753 * t910 + t756 * t908;
t942 = t754 * t924 + t757 * t895;
t940 = -t754 * t895 + t757 * t924;
t606 = t852 + t682;
t531 = t755 * t606 + t832;
t938 = pkin(1) * t531;
t937 = pkin(2) * t531;
t936 = pkin(3) * t531;
t935 = pkin(7) * t531;
t540 = t752 * t606 - t820;
t934 = pkin(7) * t540;
t933 = qJ(3) * t909;
t932 = qJ(3) * t911;
t931 = t749 * t540;
t930 = t750 * t540;
t929 = t754 * t531;
t927 = t757 * t531;
t923 = t753 * t908 + t756 * t910;
t919 = pkin(7) * t893;
t862 = -t852 - t853;
t878 = t752 * t862 + t819;
t907 = pkin(1) * t878;
t906 = pkin(2) * t878;
t905 = pkin(3) * t878;
t877 = t755 * t862 - t831;
t904 = pkin(7) * t877;
t903 = pkin(7) * t878;
t902 = qJ(5) * t864;
t900 = t749 * t877;
t898 = t750 * t877;
t897 = t754 * t878;
t896 = t757 * t878;
t845 = t704 * t755;
t644 = t685 * t845;
t846 = t704 * t752;
t795 = t683 * t846;
t774 = t644 + t795;
t643 = t685 * t846;
t793 = t683 * t845;
t775 = t643 - t793;
t856 = t749 * t669 + t750 * t775;
t859 = -t750 * t669 + t749 * t775;
t875 = -t753 * t859 + t756 * t856;
t891 = t754 * t875 + t757 * t774;
t609 = -t685 * qJD(4) - t785;
t767 = -t755 * t609 - t795;
t768 = -t752 * t609 + t793;
t797 = t749 * t635;
t857 = t750 * t768 - t797;
t796 = t750 * t635;
t858 = t749 * t768 + t796;
t873 = -t753 * t858 + t756 * t857;
t890 = t754 * t873 + t757 * t767;
t889 = -t754 * t774 + t757 * t875;
t888 = -t754 * t767 + t757 * t873;
t887 = 2 * qJD(5);
t670 = t710 * t708;
t861 = qJDD(2) - t670;
t885 = t749 * t861;
t882 = t750 * t861;
t809 = qJD(2) * t710;
t636 = t784 + t809;
t572 = t752 * t765 - t644;
t573 = -t755 * t765 - t643;
t776 = t750 * t573 + t797;
t777 = t749 * t573 - t796;
t855 = -t753 * t777 + t756 * t776;
t879 = t757 * t572 + t754 * t855;
t876 = -t754 * t572 + t757 * t855;
t874 = t753 * t856 + t756 * t859;
t872 = t753 * t857 + t756 * t858;
t729 = t757 * g(1) + t754 * g(2);
t759 = qJD(1) ^ 2;
t764 = -t759 * pkin(1) + qJDD(1) * pkin(6) - t729;
t693 = -t753 * g(3) + t756 * t764;
t747 = t756 ^ 2;
t744 = t747 * t759;
t769 = qJD(2) * pkin(2) - qJ(3) * t812;
t625 = -pkin(2) * t744 + t719 * qJ(3) - qJD(2) * t769 + t693;
t762 = t753 * t764;
t825 = t753 * t759;
t760 = -t762 - t718 * qJ(3) + qJDD(2) * pkin(2) + (pkin(2) * t825 + qJ(3) * t802 - g(3)) * t756;
t544 = -0.2e1 * qJD(3) * t708 + t750 * t625 + t749 * t760;
t661 = t708 * pkin(3) - t710 * pkin(7);
t758 = qJD(2) ^ 2;
t516 = -t758 * pkin(3) + qJDD(2) * pkin(7) - t708 * t661 + t544;
t728 = t754 * g(1) - t757 * g(2);
t770 = qJDD(1) * pkin(1) + t728;
t632 = t719 * pkin(2) + (qJ(3) * t747 + pkin(6)) * t759 - t769 * t812 - qJDD(3) + t770;
t810 = qJD(2) * t708;
t783 = -t672 + t810;
t537 = t636 * pkin(3) + t783 * pkin(7) - t632;
t461 = t755 * t516 + t752 * t537;
t629 = pkin(4) * t683 - qJ(5) * t685;
t773 = t669 * qJ(5) - t683 * t629 + t704 * t887 + t461;
t860 = -t609 * pkin(4) - t902;
t854 = t753 * t776 + t756 * t777;
t706 = t708 ^ 2;
t707 = t710 ^ 2;
t851 = pkin(3) * t749;
t850 = pkin(4) * t755;
t849 = qJ(5) * t755;
t847 = t704 * t685;
t746 = t753 ^ 2;
t844 = t746 * t759;
t842 = t749 * t632;
t665 = qJDD(2) + t670;
t841 = t749 * t665;
t838 = t750 * t632;
t837 = t750 * t665;
t786 = t749 * t625 - t750 * t760;
t771 = -qJDD(2) * pkin(3) - t758 * pkin(7) + t786;
t515 = (0.2e1 * qJD(3) + t661) * t710 + t771;
t836 = t752 * t515;
t806 = qJD(3) * t710;
t543 = t786 + 0.2e1 * t806;
t478 = -t750 * t543 + t749 * t544;
t829 = t753 * t478;
t712 = t759 * pkin(6) + t770;
t828 = t753 * t712;
t737 = t756 * t825;
t726 = qJDD(2) + t737;
t827 = t753 * t726;
t727 = qJDD(2) - t737;
t826 = t753 * t727;
t823 = t755 * t515;
t817 = t756 * t478;
t816 = t756 * t712;
t815 = t756 * t727;
t460 = t752 * t516 - t755 * t537;
t814 = t865 - t852;
t813 = t746 + t747;
t808 = qJD(2) * t749;
t807 = qJD(2) * t750;
t800 = t754 * qJDD(1);
t799 = t757 * qJDD(1);
t798 = t757 * qJDD(2);
t794 = t754 * t670;
t792 = t757 * t670;
t791 = -pkin(3) * t750 - pkin(2);
t788 = qJ(5) * t752 + pkin(3);
t479 = t749 * t543 + t750 * t544;
t692 = t756 * g(3) + t762;
t628 = t753 * t692 + t756 * t693;
t679 = -t754 * t728 - t757 * t729;
t782 = t754 * t737;
t781 = t757 * t737;
t779 = t685 * t629 + qJDD(5) + t460;
t723 = -t754 * t759 + t799;
t778 = -pkin(5) * t723 - t754 * g(3);
t416 = -t755 * t460 + t752 * t461;
t417 = t752 * t460 + t755 * t461;
t627 = t756 * t692 - t753 * t693;
t678 = t757 * t728 - t754 * t729;
t638 = -t784 + t809;
t766 = -t669 * pkin(4) + t779;
t761 = -t710 * t661 + t685 * t887 - t771 - 0.2e1 * t806 - t860;
t739 = t754 * qJDD(2);
t736 = -t744 - t758;
t735 = t744 - t758;
t734 = -t758 - t844;
t733 = t758 - t844;
t725 = t744 - t844;
t724 = t744 + t844;
t722 = t757 * t759 + t800;
t721 = t813 * qJDD(1);
t720 = t741 - 0.2e1 * t790;
t717 = 0.2e1 * t789 + t801;
t715 = t756 * t726;
t714 = t813 * t802;
t705 = -pkin(5) * t722 + t757 * g(3);
t699 = -t707 - t758;
t698 = -t707 + t758;
t697 = t706 - t758;
t695 = t756 * t718 - t746 * t802;
t694 = -t753 * t719 - t747 * t802;
t691 = -t753 * t734 - t815;
t690 = -t753 * t733 + t715;
t689 = t756 * t736 - t827;
t688 = t756 * t735 - t826;
t687 = t756 * t734 - t826;
t686 = t753 * t736 + t715;
t675 = t757 * t721 - t754 * t724;
t674 = t754 * t721 + t757 * t724;
t673 = -t753 * t717 + t756 * t720;
t668 = -t707 + t706;
t662 = -t758 - t706;
t656 = (-t708 * t750 + t710 * t749) * qJD(2);
t655 = (-t708 * t749 - t710 * t750) * qJD(2);
t654 = t757 * t691 + t754 * t717;
t653 = t757 * t689 - t754 * t720;
t652 = t754 * t691 - t757 * t717;
t651 = t754 * t689 + t757 * t720;
t646 = -pkin(6) * t687 - t816;
t645 = -pkin(6) * t686 - t828;
t642 = -pkin(1) * t687 + t693;
t641 = -pkin(1) * t686 + t692;
t640 = -t672 - t810;
t633 = -t706 - t707;
t624 = t750 * t672 - t710 * t808;
t623 = t749 * t672 + t710 * t807;
t622 = t708 * t807 + t749 * t784;
t621 = t708 * t808 - t750 * t784;
t615 = -t749 * t699 - t837;
t614 = -t749 * t698 + t882;
t613 = t750 * t697 - t841;
t612 = t750 * t699 - t841;
t611 = t750 * t698 + t885;
t610 = t749 * t697 + t837;
t602 = t757 * t628 - t754 * t712;
t601 = t754 * t628 + t757 * t712;
t600 = t750 * t662 - t885;
t599 = t749 * t662 + t882;
t587 = -t753 * t655 + t756 * t656;
t586 = t750 * t638 - t749 * t640;
t585 = -t750 * t636 + t749 * t783;
t584 = t749 * t638 + t750 * t640;
t583 = -t749 * t636 - t750 * t783;
t582 = t803 * t683 + t772;
t576 = -t609 + t847;
t567 = -qJ(3) * t612 - t838;
t563 = -t753 * t623 + t756 * t624;
t562 = -t753 * t621 + t756 * t622;
t561 = -t753 * t612 + t756 * t615;
t560 = -t753 * t611 + t756 * t614;
t559 = -t753 * t610 + t756 * t613;
t558 = t756 * t612 + t753 * t615;
t545 = -qJ(3) * t599 - t842;
t530 = -t753 * t599 + t756 * t600;
t529 = t756 * t599 + t753 * t600;
t528 = pkin(2) * t783 + qJ(3) * t615 - t842;
t519 = -pkin(2) * t636 + qJ(3) * t600 + t838;
t518 = t757 * t561 - t754 * t783;
t517 = t754 * t561 + t757 * t783;
t512 = t757 * t530 + t754 * t636;
t511 = -t753 * t584 + t756 * t586;
t510 = -t753 * t583 + t756 * t585;
t509 = t754 * t530 - t757 * t636;
t508 = t756 * t584 + t753 * t586;
t491 = t749 * t576 + t898;
t490 = -t749 * t582 + t930;
t489 = -t750 * t576 + t900;
t488 = t750 * t582 + t931;
t485 = t749 * t574 + t898;
t484 = -t749 * t864 - t930;
t483 = -t750 * t574 + t900;
t482 = t750 * t864 - t931;
t481 = t757 * t511 + t754 * t633;
t480 = t754 * t511 - t757 * t633;
t469 = -pkin(1) * t508 - pkin(2) * t584;
t468 = -pkin(1) * t558 - pkin(2) * t612 + t544;
t467 = pkin(2) * t632 + qJ(3) * t479;
t466 = t823 + t935;
t459 = t836 - t903;
t458 = -pkin(1) * t529 - pkin(2) * t599 + t543;
t457 = -qJ(3) * t584 - t478;
t456 = -pkin(6) * t558 - t753 * t528 + t756 * t567;
t455 = -pkin(2) * t633 + qJ(3) * t586 + t479;
t454 = (pkin(4) * t704 - (2 * qJD(5))) * t685 + t515 + t860;
t453 = -pkin(3) * t893 - pkin(4) * t863 + qJ(5) * t575;
t452 = qJ(5) * t852 - t766;
t451 = -pkin(6) * t529 - t753 * t519 + t756 * t545;
t450 = -pkin(4) * t852 + t773;
t449 = t461 + t936;
t444 = t460 - t905;
t443 = -t753 * t489 + t756 * t491;
t442 = -t753 * t488 + t756 * t490;
t441 = t756 * t489 + t753 * t491;
t440 = t756 * t488 + t753 * t490;
t439 = (-t576 - t847) * pkin(4) + t761;
t438 = -pkin(4) * t847 + t761 + t902;
t437 = -t753 * t483 + t756 * t485;
t436 = -t753 * t482 + t756 * t484;
t435 = t756 * t483 + t753 * t485;
t434 = t756 * t482 + t753 * t484;
t433 = t756 * t479 - t829;
t432 = t753 * t479 + t817;
t431 = t814 * qJ(5) + t766;
t428 = t814 * pkin(4) + t773;
t427 = t757 * t433 - t754 * t632;
t426 = t754 * t433 + t757 * t632;
t421 = t757 * t443 + t897;
t420 = t757 * t442 - t929;
t419 = t754 * t443 - t896;
t418 = t754 * t442 + t927;
t415 = t757 * t437 + t897;
t414 = t757 * t436 + t929;
t413 = t754 * t437 - t896;
t412 = t754 * t436 - t927;
t411 = -t905 + (-t862 - t852) * qJ(5) + (-t867 - t669) * pkin(4) + t779;
t410 = -t936 - qJ(5) * t866 + (-t606 + t852) * pkin(4) - t773;
t409 = -t752 * t439 - t576 * t849 - t903;
t408 = -pkin(4) * t834 + t755 * t438 - t935;
t407 = -pkin(1) * t432 - pkin(2) * t478;
t402 = t750 * t417 + t749 * t515;
t401 = t749 * t417 - t750 * t515;
t400 = -t416 - t919;
t399 = t755 * t450 - t752 * t452;
t398 = t752 * t450 + t755 * t452;
t397 = -pkin(6) * t508 - t753 * t455 + t756 * t457;
t396 = -qJ(3) * t488 - t749 * t449 + t750 * t466;
t395 = -qJ(3) * t483 - t749 * t444 + t750 * t459;
t394 = -pkin(6) * t432 - qJ(3) * t817 - t753 * t467;
t393 = -pkin(1) * t440 - pkin(2) * t488 - pkin(3) * t582 - t836 - t934;
t392 = qJ(3) * t490 + t750 * t449 + t749 * t466 + t937;
t391 = -pkin(1) * t435 - pkin(2) * t483 + pkin(3) * t574 + t823 - t904;
t390 = qJ(3) * t485 + t750 * t444 + t749 * t459 - t906;
t389 = -t752 * t428 + t755 * t431 - t919;
t388 = t750 * t399 + t749 * t454;
t387 = t749 * t399 - t750 * t454;
t386 = t750 * t400 + t851 * t893 - t932;
t385 = t749 * t400 + t791 * t893 + t933;
t384 = -pkin(1) * t441 - pkin(2) * t489 - t755 * t439 + t788 * t576 - t904;
t383 = -pkin(1) * t434 - pkin(2) * t482 + t934 - t752 * t438 + (-pkin(3) - t850) * t864;
t382 = -t753 * t401 + t756 * t402;
t381 = t756 * t401 + t753 * t402;
t380 = -qJ(3) * t489 + t750 * t409 - t749 * t411;
t379 = -pkin(7) * t398 + (pkin(4) * t752 - t849) * t454;
t378 = -qJ(3) * t482 + t750 * t408 - t749 * t410;
t377 = -t417 + t944;
t376 = -pkin(3) * t398 - pkin(4) * t452 - qJ(5) * t450;
t375 = qJ(3) * t491 + t749 * t409 + t750 * t411 - t906;
t374 = qJ(3) * t484 + t749 * t408 + t750 * t410 - t937;
t373 = t750 * t389 - t749 * t453 - t932;
t372 = -qJ(3) * t401 + (-pkin(7) * t750 + t851) * t416;
t371 = -pkin(2) * t893 + t749 * t389 + t750 * t453 + t933;
t370 = -t755 * t428 - t752 * t431 + t944;
t369 = t757 * t382 + t754 * t416;
t368 = t754 * t382 - t757 * t416;
t367 = -t753 * t387 + t756 * t388;
t366 = t756 * t387 + t753 * t388;
t365 = -pkin(6) * t440 - t753 * t392 + t756 * t396;
t364 = -pkin(6) * t435 - t753 * t390 + t756 * t395;
t363 = qJ(3) * t402 + (-pkin(7) * t749 + t791) * t416;
t362 = -pkin(1) * t381 - pkin(2) * t401 + pkin(3) * t515 - pkin(7) * t417;
t361 = -t753 * t385 + t756 * t386 - t945;
t360 = t757 * t367 + t754 * t398;
t359 = t754 * t367 - t757 * t398;
t358 = -pkin(6) * t441 - t753 * t375 + t756 * t380;
t357 = -pkin(6) * t434 - t753 * t374 + t756 * t378;
t356 = -t753 * t371 + t756 * t373 - t945;
t355 = -qJ(3) * t387 - t749 * t376 + t750 * t379;
t354 = -pkin(2) * t398 + qJ(3) * t388 + t750 * t376 + t749 * t379;
t353 = -pkin(1) * t366 - pkin(2) * t387 - pkin(7) * t399 + (t788 + t850) * t454;
t352 = -pkin(6) * t381 - t753 * t363 + t756 * t372;
t351 = -pkin(6) * t366 - t753 * t354 + t756 * t355;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t722, -t723, 0, t679, 0, 0, 0, 0, 0, 0, t653, t654, t675, t602, 0, 0, 0, 0, 0, 0, t512, t518, t481, t427, 0, 0, 0, 0, 0, 0, t415, t420, t939, t369, 0, 0, 0, 0, 0, 0, t421, t939, t414, t360; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t723, -t722, 0, t678, 0, 0, 0, 0, 0, 0, t651, t652, t674, t601, 0, 0, 0, 0, 0, 0, t509, t517, t480, t426, 0, 0, 0, 0, 0, 0, t413, t418, t941, t368, 0, 0, 0, 0, 0, 0, t419, t941, t412, t359; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t686, t687, 0, -t627, 0, 0, 0, 0, 0, 0, t529, t558, t508, t432, 0, 0, 0, 0, 0, 0, t435, t440, t921, t381, 0, 0, 0, 0, 0, 0, t441, t921, t434, t366; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t723, 0, -t722, 0, t778, -t705, -t678, -pkin(5) * t678, t757 * t695 - t782, t757 * t673 - t754 * t725, t757 * t690 + t753 * t800, t757 * t694 + t782, t757 * t688 + t741 * t754, t757 * t714 + t739, -pkin(5) * t651 - t754 * t641 + t757 * t645, -pkin(5) * t652 - t754 * t642 + t757 * t646, -pkin(5) * t674 + t757 * t627, -pkin(5) * t601 - (pkin(1) * t754 - pkin(6) * t757) * t627, t757 * t563 + t794, t757 * t510 - t754 * t668, t757 * t560 - t754 * t640, t757 * t562 - t794, t757 * t559 + t638 * t754, t757 * t587 + t739, -pkin(5) * t509 + t757 * t451 - t754 * t458, -pkin(5) * t517 + t757 * t456 - t754 * t468, -pkin(5) * t480 + t757 * t397 - t754 * t469, -pkin(5) * t426 + t757 * t394 - t754 * t407, t876, t952, t940, t888, -t950, t889, -pkin(5) * t413 + t757 * t364 - t754 * t391, -pkin(5) * t418 + t757 * t365 - t754 * t393, t757 * t361 - t754 * t377 - t948, -pkin(5) * t368 + t757 * t352 - t754 * t362, t876, t940, -t952, t889, t950, t888, -pkin(5) * t419 + t757 * t358 - t754 * t384, t757 * t356 - t754 * t370 - t948, -pkin(5) * t412 + t757 * t357 - t754 * t383, -pkin(5) * t359 + t757 * t351 - t754 * t353; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t722, 0, t723, 0, t705, t778, t679, pkin(5) * t679, t754 * t695 + t781, t754 * t673 + t757 * t725, t754 * t690 - t753 * t799, t754 * t694 - t781, t754 * t688 - t756 * t799, t754 * t714 - t798, pkin(5) * t653 + t757 * t641 + t754 * t645, pkin(5) * t654 + t757 * t642 + t754 * t646, pkin(5) * t675 + t754 * t627, pkin(5) * t602 - (-pkin(1) * t757 - pkin(6) * t754) * t627, t754 * t563 - t792, t754 * t510 + t757 * t668, t754 * t560 + t757 * t640, t754 * t562 + t792, t754 * t559 - t638 * t757, t754 * t587 - t798, pkin(5) * t512 + t754 * t451 + t757 * t458, pkin(5) * t518 + t754 * t456 + t757 * t468, pkin(5) * t481 + t754 * t397 + t757 * t469, pkin(5) * t427 + t754 * t394 + t757 * t407, t879, t953, t942, t890, -t951, t891, pkin(5) * t415 + t754 * t364 + t757 * t391, pkin(5) * t420 + t754 * t365 + t757 * t393, t754 * t361 + t757 * t377 + t949, pkin(5) * t369 + t754 * t352 + t757 * t362, t879, t942, -t953, t891, t951, t890, pkin(5) * t421 + t754 * t358 + t757 * t384, t754 * t356 + t757 * t370 + t949, pkin(5) * t414 + t754 * t357 + t757 * t383, pkin(5) * t360 + t754 * t351 + t757 * t353; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t728, t729, 0, 0, (t718 + t789) * t753, t756 * t717 + t753 * t720, t756 * t733 + t827, (t719 - t790) * t756, t753 * t735 + t815, 0, pkin(1) * t720 + pkin(6) * t689 + t816, -pkin(1) * t717 + pkin(6) * t691 - t828, pkin(1) * t724 + pkin(6) * t721 + t628, pkin(1) * t712 + pkin(6) * t628, t756 * t623 + t753 * t624, t756 * t583 + t753 * t585, t756 * t611 + t753 * t614, t756 * t621 + t753 * t622, t756 * t610 + t753 * t613, t756 * t655 + t753 * t656, -pkin(1) * t636 + pkin(6) * t530 + t756 * t519 + t753 * t545, pkin(1) * t783 + pkin(6) * t561 + t756 * t528 + t753 * t567, -pkin(1) * t633 + pkin(6) * t511 + t756 * t455 + t753 * t457, pkin(1) * t632 + pkin(6) * t433 - qJ(3) * t829 + t756 * t467, t854, -t947, t923, t872, t946, t874, pkin(6) * t437 + t756 * t390 + t753 * t395 - t907, pkin(6) * t442 + t756 * t392 + t753 * t396 + t938, t756 * t385 + t753 * t386 + t943, -pkin(1) * t416 + pkin(6) * t382 + t756 * t363 + t753 * t372, t854, t923, t947, t874, -t946, t872, pkin(6) * t443 + t756 * t375 + t753 * t380 - t907, t756 * t371 + t753 * t373 + t943, pkin(6) * t436 + t756 * t374 + t753 * t378 - t938, -pkin(1) * t398 + pkin(6) * t367 + t756 * t354 + t753 * t355;];
tauB_reg = t1;
