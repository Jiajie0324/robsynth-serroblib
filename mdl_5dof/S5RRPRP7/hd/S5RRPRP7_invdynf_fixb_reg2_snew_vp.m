% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPRP7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:02
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPRP7_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRP7_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRP7_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRP7_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRP7_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPRP7_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:02:23
% EndTime: 2019-12-31 20:02:27
% DurationCPUTime: 4.00s
% Computational Cost: add. (10399->234), mult. (24024->285), div. (0->0), fcn. (16732->8), ass. (0->165)
t1781 = cos(qJ(2));
t1817 = qJD(1) * t1781;
t1802 = qJD(2) * t1817;
t1778 = sin(qJ(2));
t1804 = t1778 * qJDD(1);
t1750 = t1802 + t1804;
t1769 = t1781 * qJDD(1);
t1818 = qJD(1) * t1778;
t1803 = qJD(2) * t1818;
t1751 = t1769 - t1803;
t1774 = sin(pkin(8));
t1775 = cos(pkin(8));
t1797 = t1774 * t1750 - t1775 * t1751;
t1796 = qJDD(4) + t1797;
t1745 = t1774 * t1817 + t1775 * t1818;
t1777 = sin(qJ(4));
t1780 = cos(qJ(4));
t1727 = -t1780 * qJD(2) + t1777 * t1745;
t1729 = t1777 * qJD(2) + t1780 * t1745;
t1813 = t1729 * t1727;
t1684 = t1796 + t1813;
t1726 = t1729 ^ 2;
t1743 = t1774 * t1818 - t1775 * t1817;
t1742 = qJD(4) + t1743;
t1822 = t1742 ^ 2;
t1826 = -t1726 - t1822;
t1663 = t1780 * t1684 + t1777 * t1826;
t1724 = t1775 * t1750 + t1774 * t1751;
t1791 = -t1727 * qJD(4) + t1777 * qJDD(2) + t1780 * t1724;
t1814 = t1727 * t1742;
t1787 = t1791 - t1814;
t1642 = t1774 * t1663 + t1775 * t1787;
t1644 = t1775 * t1663 - t1774 * t1787;
t1629 = t1778 * t1642 - t1781 * t1644;
t1661 = t1777 * t1684 - t1780 * t1826;
t1779 = sin(qJ(1));
t1782 = cos(qJ(1));
t1848 = t1779 * t1629 + t1782 * t1661;
t1847 = t1782 * t1629 - t1779 * t1661;
t1623 = t1781 * t1642 + t1778 * t1644;
t1679 = t1791 + t1814;
t1798 = -t1780 * qJDD(2) + t1777 * t1724;
t1792 = (-qJD(4) + t1742) * t1729 - t1798;
t1824 = -t1780 * t1679 + t1777 * t1792;
t1708 = t1727 ^ 2;
t1690 = t1726 + t1708;
t1823 = t1777 * t1679 + t1780 * t1792;
t1835 = t1775 * t1690 + t1774 * t1823;
t1836 = -t1774 * t1690 + t1775 * t1823;
t1841 = -t1778 * t1835 + t1781 * t1836;
t1846 = t1779 * t1841 - t1782 * t1824;
t1845 = t1779 * t1824 + t1782 * t1841;
t1842 = t1778 * t1836 + t1781 * t1835;
t1685 = t1796 - t1813;
t1825 = -t1822 - t1708;
t1829 = -t1777 * t1685 + t1780 * t1825;
t1840 = t1774 * t1829;
t1839 = t1775 * t1829;
t1830 = t1780 * t1685 + t1777 * t1825;
t1838 = t1779 * t1830;
t1837 = t1782 * t1830;
t1772 = t1781 ^ 2;
t1784 = qJD(1) ^ 2;
t1794 = qJD(2) * pkin(2) - qJ(3) * t1818;
t1759 = t1779 * g(1) - t1782 * g(2);
t1795 = qJDD(1) * pkin(1) + t1759;
t1706 = t1751 * pkin(2) + (t1772 * qJ(3) + pkin(6)) * t1784 - t1794 * t1818 - qJDD(3) + t1795;
t1821 = t1743 ^ 2;
t1820 = t1745 ^ 2;
t1819 = -2 * qJD(3);
t1816 = qJD(2) * t1743;
t1815 = qJD(2) * t1745;
t1812 = t1745 * t1743;
t1811 = t1772 * t1784;
t1808 = t1778 * t1784;
t1760 = -t1782 * g(1) - t1779 * g(2);
t1790 = -t1784 * pkin(1) + qJDD(1) * pkin(6) + t1760;
t1735 = -t1778 * g(3) + t1781 * t1790;
t1702 = -pkin(2) * t1811 + t1751 * qJ(3) - qJD(2) * t1794 + t1735;
t1788 = t1778 * t1790;
t1786 = -t1788 - t1750 * qJ(3) + qJDD(2) * pkin(2) + (qJD(2) * qJ(3) * qJD(1) + pkin(2) * t1808 - g(3)) * t1781;
t1672 = t1775 * t1702 + t1743 * t1819 + t1774 * t1786;
t1718 = t1743 * pkin(3) - t1745 * pkin(7);
t1783 = qJD(2) ^ 2;
t1658 = -t1783 * pkin(3) + qJDD(2) * pkin(7) - t1743 * t1718 + t1672;
t1709 = t1797 + t1815;
t1800 = -t1724 + t1816;
t1785 = t1709 * pkin(3) + t1800 * pkin(7) - t1706;
t1635 = t1780 * t1658 + t1777 * t1785;
t1771 = t1778 ^ 2;
t1805 = t1771 + t1772;
t1634 = -t1777 * t1658 + t1780 * t1785;
t1799 = t1774 * t1702 - t1775 * t1786;
t1793 = -t1729 * qJD(4) - t1798;
t1657 = -qJDD(2) * pkin(3) - t1783 * pkin(7) + ((2 * qJD(3)) + t1718) * t1745 + t1799;
t1766 = t1781 * t1808;
t1765 = -t1783 - t1811;
t1764 = -t1771 * t1784 - t1783;
t1758 = -qJDD(2) + t1766;
t1757 = qJDD(2) + t1766;
t1756 = t1805 * t1784;
t1755 = -t1779 * qJDD(1) - t1782 * t1784;
t1754 = t1782 * qJDD(1) - t1779 * t1784;
t1753 = t1805 * qJDD(1);
t1752 = t1769 - 0.2e1 * t1803;
t1749 = 0.2e1 * t1802 + t1804;
t1747 = t1784 * pkin(6) + t1795;
t1736 = -t1783 - t1820;
t1734 = -t1781 * g(3) - t1788;
t1733 = t1781 * t1758 - t1778 * t1764;
t1732 = -t1778 * t1757 + t1781 * t1765;
t1731 = t1778 * t1758 + t1781 * t1764;
t1730 = t1781 * t1757 + t1778 * t1765;
t1722 = -qJDD(2) - t1812;
t1721 = qJDD(2) - t1812;
t1719 = -t1783 - t1821;
t1712 = -t1724 - t1816;
t1710 = -t1797 + t1815;
t1707 = -t1820 - t1821;
t1705 = t1727 * pkin(4) - t1729 * qJ(5);
t1704 = -t1778 * t1734 + t1781 * t1735;
t1703 = t1781 * t1734 + t1778 * t1735;
t1696 = t1775 * t1722 - t1774 * t1736;
t1695 = t1774 * t1722 + t1775 * t1736;
t1688 = t1775 * t1719 - t1774 * t1721;
t1687 = t1774 * t1719 + t1775 * t1721;
t1683 = t1775 * t1710 - t1774 * t1712;
t1682 = t1774 * t1710 + t1775 * t1712;
t1676 = t1742 * t1729 - t1793;
t1675 = (qJD(4) + t1742) * t1729 + t1798;
t1674 = -t1778 * t1695 + t1781 * t1696;
t1673 = t1781 * t1695 + t1778 * t1696;
t1671 = t1745 * t1819 - t1799;
t1660 = -t1778 * t1687 + t1781 * t1688;
t1659 = t1781 * t1687 + t1778 * t1688;
t1655 = -t1778 * t1682 + t1781 * t1683;
t1654 = t1781 * t1682 + t1778 * t1683;
t1649 = t1774 * t1676 + t1839;
t1647 = -t1775 * t1676 + t1840;
t1645 = t1774 * t1675 + t1839;
t1643 = -t1775 * t1675 + t1840;
t1641 = -t1774 * t1671 + t1775 * t1672;
t1640 = t1775 * t1671 + t1774 * t1672;
t1633 = -t1793 * pkin(4) + (pkin(4) * t1742 - (2 * qJD(5))) * t1729 + t1657 - t1787 * qJ(5);
t1632 = -t1796 * pkin(4) - qJ(5) * t1822 + t1729 * t1705 + qJDD(5) - t1634;
t1631 = -pkin(4) * t1822 + t1796 * qJ(5) + 0.2e1 * qJD(5) * t1742 - t1727 * t1705 + t1635;
t1630 = -t1778 * t1647 + t1781 * t1649;
t1628 = t1781 * t1647 + t1778 * t1649;
t1626 = -t1778 * t1643 + t1781 * t1645;
t1624 = t1781 * t1643 + t1778 * t1645;
t1622 = -t1778 * t1640 + t1781 * t1641;
t1621 = t1781 * t1640 + t1778 * t1641;
t1616 = -t1777 * t1634 + t1780 * t1635;
t1615 = t1780 * t1634 + t1777 * t1635;
t1614 = t1775 * t1616 + t1774 * t1657;
t1613 = t1774 * t1616 - t1775 * t1657;
t1612 = t1780 * t1631 + t1777 * t1632;
t1611 = t1777 * t1631 - t1780 * t1632;
t1610 = t1775 * t1612 + t1774 * t1633;
t1609 = t1774 * t1612 - t1775 * t1633;
t1608 = -t1778 * t1613 + t1781 * t1614;
t1607 = t1781 * t1613 + t1778 * t1614;
t1606 = -t1778 * t1609 + t1781 * t1610;
t1605 = t1781 * t1609 + t1778 * t1610;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1755, -t1754, 0, -t1779 * t1759 + t1782 * t1760, 0, 0, 0, 0, 0, 0, t1782 * t1732 - t1779 * t1752, t1782 * t1733 + t1779 * t1749, t1782 * t1753 - t1779 * t1756, t1782 * t1704 - t1779 * t1747, 0, 0, 0, 0, 0, 0, t1782 * t1660 + t1779 * t1709, t1782 * t1674 - t1779 * t1800, t1782 * t1655 + t1779 * t1707, t1782 * t1622 - t1779 * t1706, 0, 0, 0, 0, 0, 0, t1782 * t1626 + t1838, t1847, t1845, t1782 * t1608 + t1779 * t1615, 0, 0, 0, 0, 0, 0, t1782 * t1630 + t1838, t1845, -t1847, t1782 * t1606 + t1779 * t1611; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1754, t1755, 0, t1782 * t1759 + t1779 * t1760, 0, 0, 0, 0, 0, 0, t1779 * t1732 + t1782 * t1752, t1779 * t1733 - t1782 * t1749, t1779 * t1753 + t1782 * t1756, t1779 * t1704 + t1782 * t1747, 0, 0, 0, 0, 0, 0, t1779 * t1660 - t1782 * t1709, t1779 * t1674 + t1782 * t1800, t1779 * t1655 - t1782 * t1707, t1779 * t1622 + t1782 * t1706, 0, 0, 0, 0, 0, 0, t1779 * t1626 - t1837, t1848, t1846, t1779 * t1608 - t1782 * t1615, 0, 0, 0, 0, 0, 0, t1779 * t1630 - t1837, t1846, -t1848, t1779 * t1606 - t1782 * t1611; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1730, t1731, 0, t1703, 0, 0, 0, 0, 0, 0, t1659, t1673, t1654, t1621, 0, 0, 0, 0, 0, 0, t1624, -t1623, t1842, t1607, 0, 0, 0, 0, 0, 0, t1628, t1842, t1623, t1605; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1784, -qJDD(1), 0, t1760, 0, 0, 0, 0, 0, 0, t1732, t1733, t1753, t1704, 0, 0, 0, 0, 0, 0, t1660, t1674, t1655, t1622, 0, 0, 0, 0, 0, 0, t1626, t1629, t1841, t1608, 0, 0, 0, 0, 0, 0, t1630, t1841, -t1629, t1606; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1784, 0, t1759, 0, 0, 0, 0, 0, 0, t1752, -t1749, t1756, t1747, 0, 0, 0, 0, 0, 0, -t1709, t1800, -t1707, t1706, 0, 0, 0, 0, 0, 0, -t1830, t1661, -t1824, -t1615, 0, 0, 0, 0, 0, 0, -t1830, -t1824, -t1661, -t1611; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1730, t1731, 0, t1703, 0, 0, 0, 0, 0, 0, t1659, t1673, t1654, t1621, 0, 0, 0, 0, 0, 0, t1624, -t1623, t1842, t1607, 0, 0, 0, 0, 0, 0, t1628, t1842, t1623, t1605; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1765, t1758, t1769, t1735, 0, 0, 0, 0, 0, 0, t1688, t1696, t1683, t1641, 0, 0, 0, 0, 0, 0, t1645, -t1644, t1836, t1614, 0, 0, 0, 0, 0, 0, t1649, t1836, t1644, t1610; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1757, t1764, -t1804, t1734, 0, 0, 0, 0, 0, 0, t1687, t1695, t1682, t1640, 0, 0, 0, 0, 0, 0, t1643, -t1642, t1835, t1613, 0, 0, 0, 0, 0, 0, t1647, t1835, t1642, t1609; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1752, t1749, -t1756, -t1747, 0, 0, 0, 0, 0, 0, t1709, -t1800, t1707, -t1706, 0, 0, 0, 0, 0, 0, t1830, -t1661, t1824, t1615, 0, 0, 0, 0, 0, 0, t1830, t1824, t1661, t1611; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1719, t1722, t1710, t1672, 0, 0, 0, 0, 0, 0, t1829, -t1663, t1823, t1616, 0, 0, 0, 0, 0, 0, t1829, t1823, t1663, t1612; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1721, t1736, t1712, t1671, 0, 0, 0, 0, 0, 0, -t1675, -t1787, t1690, -t1657, 0, 0, 0, 0, 0, 0, -t1676, t1690, t1787, -t1633; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1709, -t1800, t1707, -t1706, 0, 0, 0, 0, 0, 0, t1830, -t1661, t1824, t1615, 0, 0, 0, 0, 0, 0, t1830, t1824, t1661, t1611; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1825, -t1684, t1792, t1635, 0, 0, 0, 0, 0, 0, t1825, t1792, t1684, t1631; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1685, t1826, -t1679, t1634, 0, 0, 0, 0, 0, 0, t1685, -t1679, -t1826, -t1632; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1675, t1787, -t1690, t1657, 0, 0, 0, 0, 0, 0, t1676, -t1690, -t1787, t1633; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1825, t1792, t1684, t1631; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1676, -t1690, -t1787, t1633; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1685, t1679, t1826, t1632;];
f_new_reg = t1;
