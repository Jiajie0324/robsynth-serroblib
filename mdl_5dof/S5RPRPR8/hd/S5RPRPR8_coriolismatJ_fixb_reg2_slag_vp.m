% Calculate inertial parameters regressor of coriolis matrix for
% S5RPRPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:22
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RPRPR8_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR8_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR8_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR8_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:22:16
% EndTime: 2019-12-31 18:22:23
% DurationCPUTime: 4.22s
% Computational Cost: add. (5125->296), mult. (10527->450), div. (0->0), fcn. (10629->8), ass. (0->242)
t234 = cos(pkin(9));
t359 = pkin(7) + qJ(4);
t209 = t359 * t234;
t233 = sin(pkin(9));
t278 = t359 * t233;
t364 = sin(qJ(5));
t365 = cos(qJ(5));
t148 = t364 * t209 + t365 * t278;
t149 = t365 * t209 - t364 * t278;
t294 = t364 * t234;
t299 = t365 * t233;
t195 = t299 + t294;
t235 = sin(qJ(3));
t170 = t195 * t235;
t295 = t364 * t233;
t298 = t365 * t234;
t191 = t295 - t298;
t173 = t191 * t235;
t371 = t195 / 0.2e1;
t372 = -t191 / 0.2e1;
t223 = sin(pkin(8)) * pkin(1) + pkin(6);
t236 = cos(qJ(3));
t329 = t236 * t223;
t200 = t234 * t329;
t224 = -cos(pkin(8)) * pkin(1) - pkin(2);
t360 = t236 * pkin(3);
t247 = t224 - t360;
t331 = t235 * qJ(4);
t241 = t247 - t331;
t146 = t233 * t241 + t200;
t332 = t233 * t235;
t112 = -pkin(7) * t332 + t146;
t237 = (-t233 * t223 - pkin(4)) * t236 + (-t359 * t235 + t247) * t234;
t59 = t364 * t112 - t365 * t237;
t60 = t365 * t112 + t364 * t237;
t376 = t149 * t170 / 0.2e1 + t173 * t148 / 0.2e1 - t59 * t371 - t60 * t372;
t229 = t233 ^ 2;
t230 = t234 ^ 2;
t214 = t230 + t229;
t231 = t235 ^ 2;
t232 = t236 ^ 2;
t218 = t232 - t231;
t367 = t236 / 0.2e1;
t271 = t365 * t367;
t368 = -t236 / 0.2e1;
t280 = t195 * t368;
t116 = t233 * t271 + t294 * t367 + t280;
t322 = qJD(1) * t236;
t161 = t173 * t322;
t168 = t173 * qJD(5);
t375 = qJD(3) * t116 + t161 - t168;
t169 = t170 ^ 2;
t374 = t173 ^ 2;
t373 = t195 ^ 2;
t225 = -pkin(4) * t234 - pkin(3);
t370 = t225 / 0.2e1;
t369 = t235 / 0.2e1;
t334 = t195 * t173;
t339 = t170 * t191;
t81 = -t334 + t339;
t366 = t81 * qJD(4);
t363 = pkin(7) * t236;
t362 = t233 * pkin(4);
t361 = t235 * pkin(3);
t172 = t195 * t236;
t212 = t236 * t295;
t175 = t236 * t298 - t212;
t210 = -qJ(4) * t236 + t361;
t153 = -t235 * t223 * t234 + t233 * t210;
t139 = -t233 * t363 + t153;
t296 = t364 * t139;
t199 = t223 * t332;
t152 = t234 * t210 + t199;
t115 = t235 * pkin(4) - t234 * t363 + t152;
t301 = t365 * t115;
t68 = -t296 + t301;
t297 = t364 * t115;
t300 = t365 * t139;
t69 = t300 + t297;
t9 = -t170 * t69 - t172 * t60 + t173 * t68 + t175 * t59;
t357 = t9 * qJD(1);
t17 = -t60 * t170 - t59 * t173;
t356 = qJD(1) * t17;
t277 = t223 + t362;
t183 = t277 * t235;
t33 = -t183 * t170 - t236 * t59;
t355 = qJD(1) * t33;
t34 = t183 * t173 - t236 * t60;
t354 = qJD(1) * t34;
t145 = -t233 * t329 + t234 * t241;
t71 = (t145 * t234 + t146 * t233) * t235;
t351 = qJD(1) * t71;
t94 = t235 * t170 - t236 * t172;
t350 = qJD(1) * t94;
t95 = t173 * t235 + t175 * t236;
t349 = qJD(1) * t95;
t345 = t145 * t236;
t344 = t146 * t236;
t342 = t152 * t235;
t341 = t153 * t235;
t184 = t277 * t236;
t16 = -t184 * t173 + t183 * t175 - t60 * t235 + t236 * t69;
t340 = t16 * qJD(1);
t338 = t172 * t195;
t336 = t173 * t191;
t335 = t195 * t170;
t333 = t229 * t236;
t227 = t235 * t236;
t28 = (t342 + t345) * t234 + (t341 + t344) * t233;
t328 = t28 * qJD(1);
t66 = -t145 * t235 + (t152 - 0.2e1 * t199) * t236;
t327 = t66 * qJD(1);
t67 = t153 * t236 + (-t146 + 0.2e1 * t200) * t235;
t326 = t67 * qJD(1);
t73 = -t175 * t170 + t173 * t172;
t325 = t73 * qJD(1);
t324 = qJD(1) * t170;
t323 = qJD(1) * t173;
t321 = qJD(3) * t195;
t320 = qJD(3) * t225;
t319 = qJD(3) * t234;
t318 = qJD(4) * t236;
t317 = qJD(5) * t195;
t316 = t116 * qJD(1);
t242 = -t294 / 0.2e1 - t299 / 0.2e1;
t118 = (-t195 / 0.2e1 + t242) * t236;
t315 = t118 * qJD(1);
t119 = t191 * t368 + t234 * t271 - t212 / 0.2e1;
t314 = t119 * qJD(1);
t313 = t119 * qJD(3);
t120 = t212 / 0.2e1 + (t372 - t298 / 0.2e1) * t236;
t312 = t120 * qJD(1);
t311 = t120 * qJD(3);
t310 = t170 * qJD(5);
t190 = t214 * t231;
t309 = t190 * qJD(1);
t186 = t191 * qJD(5);
t193 = t218 * t233;
t308 = t193 * qJD(1);
t194 = t218 * t234;
t307 = t194 * qJD(1);
t306 = t214 * qJD(3);
t305 = t218 * qJD(1);
t304 = t235 * qJD(1);
t303 = t235 * qJD(3);
t302 = t236 * qJD(3);
t293 = t170 * t323;
t292 = t191 * t321;
t291 = t191 * t303;
t290 = t223 * t302;
t289 = t233 * t319;
t288 = t235 * t318;
t287 = t195 * t186;
t286 = t224 * t304;
t285 = t224 * t322;
t284 = t234 * t303;
t283 = t235 * t302;
t219 = t236 * t304;
t282 = -t336 / 0.2e1;
t281 = -t335 / 0.2e1;
t279 = t329 / 0.2e1;
t276 = t214 * t236;
t274 = qJD(3) * t118 + t161;
t273 = qJD(4) + t320;
t272 = t234 * t219;
t10 = t183 * t184 - t59 * t68 + t60 * t69;
t6 = -t69 * t173 / 0.2e1 + t60 * t175 / 0.2e1 - t68 * t170 / 0.2e1 + t59 * t172 / 0.2e1 + t184 * t368 + t183 * t369;
t270 = t10 * qJD(1) + t6 * qJD(2);
t65 = t170 * t172 - t173 * t175 - t227;
t269 = t6 * qJD(1) + t65 * qJD(2);
t268 = t233 * t272;
t15 = -t184 * t170 - t183 * t172 + t59 * t235 + t236 * t68;
t267 = t15 * qJD(1);
t26 = (t341 / 0.2e1 + t344 / 0.2e1) * t234 + (-t342 / 0.2e1 - t345 / 0.2e1) * t233 + (t231 / 0.2e1 - t232 / 0.2e1) * t223;
t32 = t223 ^ 2 * t227 + t145 * t152 + t146 * t153;
t266 = t32 * qJD(1) + t26 * qJD(2);
t54 = t334 + t339;
t83 = t169 - t374;
t265 = qJD(1) * t83 + qJD(3) * t54;
t187 = t191 ^ 2;
t98 = t187 - t373;
t264 = qJD(1) * t54 + qJD(3) * t98;
t263 = -t152 * t233 + t153 * t234;
t117 = (t371 + t242) * t236;
t239 = t149 * t367 - t173 * t370 + t183 * t371;
t244 = t301 / 0.2e1 - t296 / 0.2e1;
t20 = -t239 + t244;
t262 = qJD(1) * t20 + qJD(2) * t117;
t240 = t148 * t368 - t170 * t370 + t183 * t372;
t243 = -t300 / 0.2e1 - t297 / 0.2e1;
t21 = -t240 + t243;
t261 = qJD(1) * t21 + qJD(2) * t120;
t154 = t235 * t276 - t227;
t260 = t26 * qJD(1) + t154 * qJD(2);
t103 = t169 + t374;
t259 = qJD(1) * t103 + qJD(3) * t81;
t147 = t187 + t373;
t258 = qJD(1) * t81 + qJD(3) * t147;
t257 = -qJD(3) * t191 - t324;
t256 = t321 - t323;
t255 = (t223 / 0.2e1 + t362 / 0.2e1) * t236;
t253 = t146 * t234 / 0.2e1 - t145 * t233 / 0.2e1;
t132 = t335 / 0.2e1;
t79 = t282 + t132;
t251 = -qJD(3) * t79 + t293;
t133 = t336 / 0.2e1;
t80 = t281 + t133;
t250 = qJD(3) * t80 + t293;
t249 = qJD(1) * t79 + t292;
t248 = -qJD(1) * t80 + t292;
t12 = t255 + t376;
t62 = t148 * t195 - t149 * t191;
t74 = t369 + t282 + t281;
t246 = qJD(1) * t12 + qJD(2) * t74 - qJD(3) * t62;
t177 = (0.1e1 / 0.2e1 - t230 / 0.2e1 - t229 / 0.2e1) * t235;
t204 = t214 * qJ(4);
t63 = t279 - t253;
t245 = qJD(1) * t63 + qJD(2) * t177 - qJD(3) * t204;
t238 = (-t331 - t360) * qJD(3) + t318;
t226 = t303 / 0.2e1;
t220 = t230 * t236;
t217 = t233 * t303;
t188 = t219 - t235 * qJD(5) / 0.2e1;
t182 = t195 * t303;
t178 = (0.1e1 + t214) * t369;
t142 = t175 * t191;
t121 = t242 * t236 + t280;
t102 = t119 * qJD(5);
t101 = t120 * qJD(5);
t82 = -t170 * t322 + t313;
t77 = t80 * qJD(5);
t76 = t79 * qJD(5);
t75 = t133 + t132 + t369;
t64 = t279 + t253;
t61 = -t311 + (-qJD(5) + t322) * t170;
t53 = t54 * qJD(5);
t25 = t26 * qJD(3);
t23 = t239 + t244;
t22 = t240 + t243;
t13 = t255 - t376;
t1 = qJD(3) * t6;
t2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t283, t218 * qJD(3), 0, -t283, 0, 0, t224 * t303, t224 * t302, 0, 0, t230 * t283, -0.2e1 * t234 * t233 * t283, -t194 * qJD(3), t229 * t283, t193 * qJD(3), -t283, -t66 * qJD(3) + t234 * t288, t67 * qJD(3) - t233 * t288, -qJD(3) * t28 + qJD(4) * t190, qJD(3) * t32 - qJD(4) * t71, -(qJD(3) * t175 - t310) * t173, qJD(3) * t73 + qJD(5) * t83, -t95 * qJD(3) + t236 * t310, (qJD(3) * t172 - t168) * t170, -t94 * qJD(3) - t168 * t236, -t283, -t15 * qJD(3) - t34 * qJD(5) - t173 * t318, t16 * qJD(3) + t33 * qJD(5) - t170 * t318, qJD(3) * t9 + qJD(4) * t103, qJD(3) * t10 + qJD(4) * t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t219, t305, t302, -t219, -t303, 0, t286 - t290, t223 * t303 + t285, 0, 0, (t230 * t304 + t289) * t236, -0.2e1 * t268 + (t220 - t333) * qJD(3), t217 - t307, (t229 * t304 - t289) * t236, t284 + t308, -t219, -t200 * qJD(3) + t233 * t238 - t327, t233 * t290 + t234 * t238 + t326, qJD(3) * t263 - t328, (-pkin(3) * t329 + qJ(4) * t263) * qJD(3) + t64 * qJD(4) + t266, t175 * t256 + t77, t325 + (-t142 - t338) * qJD(3) + t53, -t101 + t182 - t349, -t172 * t257 + t76, -qJD(5) * t116 - t291 - t350, -t188, (-t148 * t235 + t172 * t225 + t184 * t191) * qJD(3) - t118 * qJD(4) + t23 * qJD(5) - t267, t340 + (-t149 * t235 + t175 * t225 + t184 * t195) * qJD(3) + t119 * qJD(4) + t22 * qJD(5), t357 + (t148 * t175 - t149 * t172 - t191 * t69 - t195 * t68) * qJD(3) + t366, (-t148 * t68 + t149 * t69 + t184 * t225) * qJD(3) + t13 * qJD(4) + t270; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, (qJD(3) * t233 + t234 * t304) * t236, (-t233 * t304 + t319) * t236, t309, qJD(3) * t64 - t351, 0, 0, 0, 0, 0, 0, -t274, t82, t259, qJD(3) * t13 + t356; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t250, t265, t61, -t251, -t375, t226, qJD(3) * t23 - qJD(5) * t60 - t354, qJD(3) * t22 + qJD(5) * t59 + t355, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t154 * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t303, -t302, 0, 0, 0, 0, 0, 0, 0, 0, -t284, t217, (t220 + t333) * qJD(3), (qJ(4) * t276 - t361) * qJD(3) + t178 * qJD(4) + t260, 0, 0, 0, 0, 0, 0, qJD(5) * t121 + t291, t182 - t102, (-t142 + t338) * qJD(3), (t148 * t172 + t149 * t175 + t225 * t235) * qJD(3) + t75 * qJD(4) + t269; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t178 * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t75; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t121 + t168, t310 - t313, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t219, -t305, 0, t219, 0, 0, -t286, -t285, 0, 0, -t230 * t219, 0.2e1 * t268, t307, -t229 * t219, -t308, t219, t327, -t326, t328, -qJD(4) * t63 - t266, t175 * t323 + t77, t53 - t325, -t102 + t349, -t172 * t324 + t76, -qJD(5) * t118 + t350, t188, -qJD(4) * t116 - qJD(5) * t20 + t267, qJD(4) * t120 - qJD(5) * t21 - t340, -t357 + t366, -qJD(4) * t12 - t270; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(4) * t177 - t260, 0, 0, 0, 0, 0, 0, -qJD(5) * t117, -t101, 0, -qJD(4) * t74 - t269; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t214 * qJD(4), t204 * qJD(4), -t287, t98 * qJD(5), 0, t287, 0, 0, t225 * t317, -t225 * t186, qJD(4) * t147, qJD(4) * t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t306, -t245, 0, 0, 0, 0, 0, 0, -t316, t312, t258, -t246; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t248, t264, -t186 - t314, t249, -t315 - t317, -t304 / 0.2e1, -qJD(5) * t149 + t195 * t320 - t262, qJD(5) * t148 - t191 * t320 - t261, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t272, t233 * t219, -t309, qJD(3) * t63 + t351, 0, 0, 0, 0, 0, 0, t375, t61, -t259, qJD(3) * t12 - t356; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t177 * qJD(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t306, t245, 0, 0, 0, 0, 0, 0, t316 + t317, -t186 - t312, -t258, t246; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t256, t257, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t250, -t265, t82, t251, t274, t226, qJD(3) * t20 + qJD(4) * t173 + t354, qJD(3) * t21 + qJD(4) * t170 - t355, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3) * t117, t311, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t248, -t264, t314, -t249, t315, t304 / 0.2e1, -t195 * t273 + t262, t191 * t273 + t261, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t256, -t257, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t2;
