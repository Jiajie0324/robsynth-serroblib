% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRPR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:22
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRPR8_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR8_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR8_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR8_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR8_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRPR8_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:22:19
% EndTime: 2019-12-31 18:22:33
% DurationCPUTime: 12.16s
% Computational Cost: add. (46246->600), mult. (96537->914), div. (0->0), fcn. (63420->10), ass. (0->411)
t626 = cos(qJ(1));
t623 = sin(qJ(1));
t592 = g(1) * t626 + g(2) * t623;
t627 = qJD(1) ^ 2;
t577 = -pkin(1) * t627 - t592;
t617 = sin(pkin(8));
t619 = cos(pkin(8));
t591 = g(1) * t623 - g(2) * t626;
t631 = qJDD(1) * pkin(1) + t591;
t521 = t617 * t577 - t619 * t631;
t522 = t577 * t619 + t617 * t631;
t640 = t521 * t617 + t522 * t619;
t459 = t521 * t619 - t522 * t617;
t661 = t623 * t459;
t387 = t626 * t640 + t661;
t654 = t626 * t459;
t699 = -t623 * t640 + t654;
t582 = qJDD(1) * t617 + t619 * t627;
t653 = g(3) - qJDD(2);
t550 = -qJ(2) * t582 + t619 * t653;
t583 = qJDD(1) * t619 - t617 * t627;
t685 = -qJ(2) * t583 - t617 * t653;
t686 = t582 * t626 + t583 * t623;
t698 = -pkin(5) * t686 + t550 * t626 + t623 * t685;
t524 = -t582 * t623 + t583 * t626;
t697 = -pkin(5) * t524 - t550 * t623 + t626 * t685;
t616 = sin(pkin(9));
t622 = sin(qJ(3));
t648 = qJD(1) * qJD(3);
t604 = t622 * t648;
t625 = cos(qJ(3));
t646 = t625 * qJDD(1);
t580 = -t604 + t646;
t618 = cos(pkin(9));
t651 = qJD(1) * t622;
t569 = -qJD(3) * t618 + t616 * t651;
t571 = qJD(3) * t616 + t618 * t651;
t677 = t571 * t569;
t630 = -t580 - t677;
t693 = t616 * t630;
t692 = t618 * t630;
t621 = sin(qJ(5));
t572 = -qJDD(5) + t580;
t624 = cos(qJ(5));
t517 = t569 * t624 + t571 * t621;
t519 = -t569 * t621 + t571 * t624;
t678 = t519 * t517;
t629 = -t572 - t678;
t691 = t621 * t629;
t689 = t624 * t629;
t650 = t625 * qJD(1);
t599 = -qJD(5) + t650;
t495 = t517 * t599;
t641 = t625 * t648;
t647 = t622 * qJDD(1);
t579 = t641 + t647;
t546 = qJDD(3) * t616 + t579 * t618;
t637 = -qJDD(3) * t618 + t579 * t616;
t628 = qJD(5) * t517 - t546 * t624 + t621 * t637;
t687 = t495 - t628;
t555 = t569 * t650;
t500 = -t546 + t555;
t556 = t571 * t650;
t498 = -t637 - t556;
t639 = t621 * t546 + t624 * t637;
t411 = (qJD(5) + t599) * t519 + t639;
t515 = t517 ^ 2;
t516 = t519 ^ 2;
t684 = t569 ^ 2;
t568 = t571 ^ 2;
t597 = t599 ^ 2;
t683 = qJD(3) ^ 2;
t682 = pkin(3) * t622;
t681 = pkin(3) * t625;
t676 = t599 * t621;
t675 = t599 * t624;
t612 = t622 ^ 2;
t674 = t612 * t627;
t504 = -qJDD(1) * pkin(2) - pkin(6) * t627 + t521;
t632 = t579 + t641;
t451 = -t632 * qJ(4) + (-t580 + t604) * pkin(3) + t504;
t505 = -pkin(2) * t627 + qJDD(1) * pkin(6) + t522;
t479 = t505 * t625 - t622 * t653;
t633 = -qJ(4) * t622 - t681;
t576 = t633 * qJD(1);
t461 = -pkin(3) * t683 + qJDD(3) * qJ(4) + t576 * t650 + t479;
t381 = 0.2e1 * qJD(4) * t571 - t451 * t618 + t616 * t461;
t357 = pkin(4) * t630 + pkin(7) * t500 - t381;
t382 = -0.2e1 * qJD(4) * t569 + t451 * t616 + t461 * t618;
t547 = -pkin(4) * t650 - pkin(7) * t571;
t361 = -pkin(4) * t684 - pkin(7) * t637 + t547 * t650 + t382;
t306 = -t357 * t624 + t361 * t621;
t307 = t357 * t621 + t361 * t624;
t272 = -t306 * t624 + t307 * t621;
t673 = t616 * t272;
t603 = t625 * t653;
t456 = qJDD(4) + t603 - t683 * qJ(4) - qJDD(3) * pkin(3) + (qJD(1) * t576 + t505) * t622;
t672 = t616 * t456;
t501 = t580 - t677;
t671 = t616 * t501;
t670 = t618 * t272;
t669 = t618 * t456;
t668 = t618 * t501;
t390 = pkin(4) * t637 - pkin(7) * t684 + t571 * t547 + t456;
t667 = t621 * t390;
t443 = t572 - t678;
t666 = t621 * t443;
t665 = t622 * t504;
t664 = t622 * t580;
t598 = t625 * t627 * t622;
t589 = qJDD(3) + t598;
t663 = t622 * t589;
t590 = qJDD(3) - t598;
t662 = t622 * t590;
t658 = t624 * t390;
t657 = t624 * t443;
t656 = t625 * t504;
t655 = t625 * t590;
t613 = t625 ^ 2;
t652 = t612 + t613;
t645 = t622 * t678;
t644 = t622 * t677;
t643 = t625 * t678;
t642 = t625 * t677;
t273 = t306 * t621 + t307 * t624;
t477 = t505 * t622 + t603;
t427 = t477 * t622 + t479 * t625;
t532 = -t591 * t623 - t592 * t626;
t636 = t617 * t598;
t635 = t619 * t598;
t586 = qJDD(1) * t626 - t623 * t627;
t634 = -pkin(5) * t586 - g(3) * t623;
t329 = -t381 * t618 + t382 * t616;
t330 = t381 * t616 + t382 * t618;
t426 = t477 * t625 - t479 * t622;
t531 = t591 * t626 - t592 * t623;
t609 = t613 * t627;
t596 = -t609 - t683;
t595 = t609 - t683;
t594 = -t674 - t683;
t593 = -t674 + t683;
t588 = t609 - t674;
t587 = t609 + t674;
t585 = qJDD(1) * t623 + t626 * t627;
t584 = t652 * qJDD(1);
t581 = -0.2e1 * t604 + t646;
t578 = 0.2e1 * t641 + t647;
t574 = t625 * t589;
t573 = t652 * t648;
t564 = t625 * t580;
t557 = -pkin(5) * t585 + g(3) * t626;
t554 = -t568 - t609;
t553 = -t568 + t609;
t552 = -t609 + t684;
t544 = t579 * t625 - t612 * t648;
t543 = -t613 * t648 - t664;
t542 = qJDD(3) * t617 + t573 * t619;
t541 = -qJDD(3) * t619 + t573 * t617;
t539 = -t594 * t622 - t655;
t538 = -t593 * t622 + t574;
t537 = t596 * t625 - t663;
t536 = t595 * t625 - t662;
t535 = t594 * t625 - t662;
t534 = t596 * t622 + t574;
t530 = t584 * t619 - t587 * t617;
t529 = t584 * t617 + t587 * t619;
t528 = -t568 + t684;
t523 = -t578 * t622 + t581 * t625;
t520 = -t609 - t684;
t513 = t544 * t619 - t636;
t512 = t543 * t619 + t636;
t511 = t544 * t617 + t635;
t510 = t543 * t617 - t635;
t509 = t538 * t619 + t617 * t647;
t508 = t536 * t619 + t617 * t646;
t507 = t538 * t617 - t619 * t647;
t506 = t536 * t617 - t619 * t646;
t499 = t546 + t555;
t497 = t556 - t637;
t492 = t568 + t684;
t491 = (t569 * t618 - t571 * t616) * t650;
t490 = (-t569 * t616 - t571 * t618) * t650;
t489 = -t516 + t597;
t488 = t515 - t597;
t487 = t539 * t619 + t578 * t617;
t486 = t537 * t619 - t581 * t617;
t485 = t539 * t617 - t578 * t619;
t484 = t537 * t617 + t581 * t619;
t483 = t546 * t618 + t556 * t616;
t482 = -t546 * t616 + t556 * t618;
t481 = -t555 * t618 + t616 * t637;
t480 = t555 * t616 + t618 * t637;
t478 = t523 * t619 - t588 * t617;
t476 = t523 * t617 + t588 * t619;
t475 = -t516 - t597;
t473 = t491 * t625 - t664;
t472 = -t529 * t623 + t530 * t626;
t471 = t529 * t626 + t530 * t623;
t470 = t552 * t618 + t671;
t469 = -t553 * t616 + t692;
t468 = -t554 * t616 + t668;
t467 = -t552 * t616 + t668;
t466 = -t553 * t618 - t693;
t465 = t554 * t618 + t671;
t464 = -pkin(6) * t535 + t656;
t463 = -pkin(6) * t534 + t665;
t462 = -t516 + t515;
t455 = -pkin(2) * t535 + t479;
t454 = -pkin(2) * t534 + t477;
t452 = -t597 - t515;
t450 = pkin(1) * t653 + qJ(2) * t640;
t449 = t520 * t618 - t693;
t448 = t520 * t616 + t692;
t447 = t483 * t625 + t644;
t446 = t481 * t625 - t644;
t439 = -qJD(5) * t519 - t639;
t438 = t498 * t618 - t500 * t616;
t437 = t497 * t618 - t499 * t616;
t436 = t498 * t616 + t500 * t618;
t435 = -t497 * t616 - t499 * t618;
t434 = (t517 * t624 - t519 * t621) * t599;
t433 = (t517 * t621 + t519 * t624) * t599;
t432 = -t485 * t623 + t487 * t626;
t431 = -t484 * t623 + t486 * t626;
t430 = t485 * t626 + t487 * t623;
t429 = t484 * t626 + t486 * t623;
t428 = -t515 - t516;
t424 = t473 * t619 - t490 * t617;
t423 = t473 * t617 + t490 * t619;
t422 = t470 * t625 + t498 * t622;
t421 = t469 * t625 - t500 * t622;
t420 = t468 * t625 + t499 * t622;
t419 = t468 * t622 - t499 * t625;
t418 = t437 * t625 - t528 * t622;
t417 = t449 * t625 - t497 * t622;
t416 = t449 * t622 + t497 * t625;
t415 = t495 + t628;
t410 = (qJD(5) - t599) * t519 + t639;
t409 = t488 * t624 + t666;
t408 = -t489 * t621 + t689;
t407 = t488 * t621 - t657;
t406 = t489 * t624 + t691;
t405 = t519 * t676 - t624 * t628;
t404 = -t519 * t675 - t621 * t628;
t403 = -t439 * t621 - t517 * t675;
t402 = t439 * t624 - t517 * t676;
t401 = t447 * t619 - t482 * t617;
t400 = t446 * t619 - t480 * t617;
t399 = t447 * t617 + t482 * t619;
t398 = t446 * t617 + t480 * t619;
t397 = t438 * t625 - t492 * t622;
t396 = t438 * t622 + t492 * t625;
t395 = -t475 * t621 + t657;
t394 = t475 * t624 + t666;
t393 = -qJ(2) * t529 + t426 * t619;
t392 = qJ(2) * t530 + t426 * t617;
t391 = -qJ(4) * t465 + t669;
t389 = t427 * t619 + t504 * t617;
t388 = t427 * t617 - t504 * t619;
t385 = -qJ(4) * t448 + t672;
t384 = t452 * t624 - t691;
t383 = t452 * t621 + t689;
t380 = -t433 * t616 + t434 * t618;
t379 = -t433 * t618 - t434 * t616;
t378 = t422 * t619 - t467 * t617;
t377 = t421 * t619 - t466 * t617;
t376 = t420 * t619 + t465 * t617;
t375 = t422 * t617 + t467 * t619;
t374 = t421 * t617 + t466 * t619;
t373 = t420 * t617 - t465 * t619;
t372 = -qJ(2) * t485 - t455 * t617 + t464 * t619;
t371 = -qJ(2) * t484 - t454 * t617 + t463 * t619;
t370 = t380 * t625 - t572 * t622;
t369 = t417 * t619 + t448 * t617;
t368 = t417 * t617 - t448 * t619;
t367 = t418 * t619 - t435 * t617;
t366 = t418 * t617 + t435 * t619;
t365 = -pkin(1) * t535 + qJ(2) * t487 + t455 * t619 + t464 * t617;
t364 = -pkin(1) * t534 + qJ(2) * t486 + t454 * t619 + t463 * t617;
t363 = t397 * t619 + t436 * t617;
t362 = t397 * t617 - t436 * t619;
t359 = -pkin(3) * t465 + t382;
t358 = -pkin(3) * t448 + t381;
t354 = -t411 * t624 - t415 * t621;
t353 = -t410 * t624 - t621 * t687;
t352 = -t411 * t621 + t415 * t624;
t351 = -t410 * t621 + t624 * t687;
t350 = -t407 * t616 + t409 * t618;
t349 = -t406 * t616 + t408 * t618;
t348 = -t407 * t618 - t409 * t616;
t347 = -t406 * t618 - t408 * t616;
t346 = -t404 * t616 + t405 * t618;
t345 = -t402 * t616 + t403 * t618;
t344 = -t404 * t618 - t405 * t616;
t343 = -t402 * t618 - t403 * t616;
t342 = -t394 * t616 + t395 * t618;
t341 = t394 * t618 + t395 * t616;
t340 = -pkin(7) * t394 + t658;
t339 = -pkin(2) * t419 + pkin(3) * t499 - qJ(4) * t468 - t672;
t338 = -t388 * t623 + t389 * t626;
t337 = t388 * t626 + t389 * t623;
t336 = -pkin(7) * t383 + t667;
t335 = -pkin(2) * t416 - pkin(3) * t497 - qJ(4) * t449 + t669;
t334 = -t383 * t616 + t384 * t618;
t333 = t383 * t618 + t384 * t616;
t332 = t346 * t625 + t645;
t331 = t345 * t625 - t645;
t328 = -qJ(2) * t388 - (pkin(2) * t617 - pkin(6) * t619) * t426;
t327 = -t373 * t623 + t376 * t626;
t326 = t373 * t626 + t376 * t623;
t325 = t370 * t619 - t379 * t617;
t324 = t370 * t617 + t379 * t619;
t323 = t350 * t625 - t411 * t622;
t322 = t349 * t625 - t415 * t622;
t321 = -pkin(4) * t687 + pkin(7) * t395 + t667;
t320 = t342 * t625 + t622 * t687;
t319 = t342 * t622 - t625 * t687;
t318 = -t368 * t623 + t369 * t626;
t317 = t368 * t626 + t369 * t623;
t316 = t330 * t625 + t456 * t622;
t315 = t330 * t622 - t456 * t625;
t314 = -qJ(4) * t436 - t329;
t313 = -pkin(4) * t410 + pkin(7) * t384 - t658;
t312 = -t362 * t623 + t363 * t626;
t311 = t362 * t626 + t363 * t623;
t310 = t334 * t625 + t410 * t622;
t309 = t334 * t622 - t410 * t625;
t308 = qJ(2) * t389 - (-pkin(2) * t619 - pkin(6) * t617 - pkin(1)) * t426;
t304 = -pkin(6) * t419 - t359 * t622 + t391 * t625;
t303 = -t352 * t616 + t354 * t618;
t302 = -t351 * t616 + t353 * t618;
t301 = t352 * t618 + t354 * t616;
t300 = -t351 * t618 - t353 * t616;
t299 = -pkin(6) * t416 - t358 * t622 + t385 * t625;
t298 = t302 * t625 - t462 * t622;
t297 = -pkin(2) * t396 - pkin(3) * t492 - qJ(4) * t438 - t330;
t296 = t332 * t619 - t344 * t617;
t295 = t331 * t619 - t343 * t617;
t294 = t332 * t617 + t344 * t619;
t293 = t331 * t617 + t343 * t619;
t292 = t303 * t625 + t428 * t622;
t291 = t303 * t622 - t428 * t625;
t290 = -pkin(6) * t396 + t314 * t625 + t436 * t682;
t289 = t323 * t619 - t348 * t617;
t288 = t322 * t619 - t347 * t617;
t287 = t323 * t617 + t348 * t619;
t286 = t322 * t617 + t347 * t619;
t285 = t320 * t619 + t341 * t617;
t284 = t320 * t617 - t341 * t619;
t283 = -pkin(3) * t301 - pkin(4) * t352;
t282 = t316 * t619 + t329 * t617;
t281 = t316 * t617 - t329 * t619;
t280 = t310 * t619 + t333 * t617;
t279 = t310 * t617 - t333 * t619;
t278 = -pkin(2) * t315 + pkin(3) * t456 - qJ(4) * t330;
t277 = -pkin(3) * t341 - pkin(4) * t394 + t307;
t276 = -qJ(4) * t341 - t321 * t616 + t340 * t618;
t275 = -qJ(2) * t373 + t304 * t619 - t339 * t617;
t274 = -pkin(3) * t333 - pkin(4) * t383 + t306;
t271 = -qJ(2) * t368 + t299 * t619 - t335 * t617;
t270 = -qJ(4) * t333 - t313 * t616 + t336 * t618;
t269 = -pkin(1) * t419 + qJ(2) * t376 + t304 * t617 + t339 * t619;
t268 = t298 * t619 - t300 * t617;
t267 = t298 * t617 + t300 * t619;
t266 = -pkin(6) * t315 + (-qJ(4) * t625 + t682) * t329;
t265 = -pkin(4) * t390 + pkin(7) * t273;
t264 = t292 * t619 + t301 * t617;
t263 = t292 * t617 - t301 * t619;
t262 = -pkin(1) * t416 + qJ(2) * t369 + t299 * t617 + t335 * t619;
t261 = -pkin(7) * t352 - t272;
t260 = -pkin(4) * t428 + pkin(7) * t354 + t273;
t259 = -t284 * t623 + t285 * t626;
t258 = t284 * t626 + t285 * t623;
t257 = -qJ(2) * t362 + t290 * t619 - t297 * t617;
t256 = -pkin(2) * t319 + pkin(3) * t687 - qJ(4) * t342 - t321 * t618 - t340 * t616;
t255 = -t281 * t623 + t282 * t626;
t254 = t281 * t626 + t282 * t623;
t253 = -t279 * t623 + t280 * t626;
t252 = t279 * t626 + t280 * t623;
t251 = -pkin(1) * t396 + qJ(2) * t363 + t290 * t617 + t297 * t619;
t250 = -pkin(2) * t309 + pkin(3) * t410 - qJ(4) * t334 - t313 * t618 - t336 * t616;
t249 = t273 * t618 - t673;
t248 = t273 * t616 + t670;
t247 = t249 * t625 + t390 * t622;
t246 = t249 * t622 - t390 * t625;
t245 = -pkin(6) * t319 + t276 * t625 - t277 * t622;
t244 = -t263 * t623 + t264 * t626;
t243 = t263 * t626 + t264 * t623;
t242 = -pkin(6) * t309 + t270 * t625 - t274 * t622;
t241 = -qJ(2) * t281 + t266 * t619 - t278 * t617;
t240 = -pkin(3) * t248 - pkin(4) * t272;
t239 = -qJ(4) * t301 - t260 * t616 + t261 * t618;
t238 = -pkin(1) * t315 + qJ(2) * t282 + t266 * t617 + t278 * t619;
t237 = -pkin(2) * t291 + pkin(3) * t428 - qJ(4) * t303 - t260 * t618 - t261 * t616;
t236 = -pkin(7) * t670 - qJ(4) * t248 - t265 * t616;
t235 = t247 * t619 + t248 * t617;
t234 = t247 * t617 - t248 * t619;
t233 = -qJ(2) * t284 + t245 * t619 - t256 * t617;
t232 = -pkin(6) * t291 + t239 * t625 - t283 * t622;
t231 = -pkin(1) * t319 + qJ(2) * t285 + t245 * t617 + t256 * t619;
t230 = -qJ(2) * t279 + t242 * t619 - t250 * t617;
t229 = -pkin(1) * t309 + qJ(2) * t280 + t242 * t617 + t250 * t619;
t228 = -pkin(2) * t246 + pkin(3) * t390 + pkin(7) * t673 - qJ(4) * t249 - t265 * t618;
t227 = -t234 * t623 + t235 * t626;
t226 = t234 * t626 + t235 * t623;
t225 = -pkin(6) * t246 + t236 * t625 - t240 * t622;
t224 = -qJ(2) * t263 + t232 * t619 - t237 * t617;
t223 = -pkin(1) * t291 + qJ(2) * t264 + t232 * t617 + t237 * t619;
t222 = -qJ(2) * t234 + t225 * t619 - t228 * t617;
t221 = -pkin(1) * t246 + qJ(2) * t235 + t225 * t617 + t228 * t619;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t585, -t586, 0, t532, 0, 0, 0, 0, 0, 0, -t686, -t524, 0, t387, 0, 0, 0, 0, 0, 0, t431, t432, t472, t338, 0, 0, 0, 0, 0, 0, t318, t327, t312, t255, 0, 0, 0, 0, 0, 0, t253, t259, t244, t227; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t586, -t585, 0, t531, 0, 0, 0, 0, 0, 0, t524, -t686, 0, -t699, 0, 0, 0, 0, 0, 0, t429, t430, t471, t337, 0, 0, 0, 0, 0, 0, t317, t326, t311, t254, 0, 0, 0, 0, 0, 0, t252, t258, t243, t226; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t653, 0, 0, 0, 0, 0, 0, t534, t535, 0, -t426, 0, 0, 0, 0, 0, 0, t416, t419, t396, t315, 0, 0, 0, 0, 0, 0, t309, t319, t291, t246; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t586, 0, -t585, 0, t634, -t557, -t531, -pkin(5) * t531, 0, 0, t524, 0, -t686, 0, t697, -t698, t699, pkin(5) * t699 + qJ(2) * t654 - t450 * t623, -t511 * t623 + t513 * t626, -t476 * t623 + t478 * t626, -t507 * t623 + t509 * t626, -t510 * t623 + t512 * t626, -t506 * t623 + t508 * t626, -t541 * t623 + t542 * t626, -pkin(5) * t429 - t364 * t623 + t371 * t626, -pkin(5) * t430 - t365 * t623 + t372 * t626, -pkin(5) * t471 - t392 * t623 + t393 * t626, -pkin(5) * t337 - t308 * t623 + t328 * t626, -t399 * t623 + t401 * t626, -t366 * t623 + t367 * t626, -t374 * t623 + t377 * t626, -t398 * t623 + t400 * t626, -t375 * t623 + t378 * t626, -t423 * t623 + t424 * t626, -pkin(5) * t317 - t262 * t623 + t271 * t626, -pkin(5) * t326 - t269 * t623 + t275 * t626, -pkin(5) * t311 - t251 * t623 + t257 * t626, -pkin(5) * t254 - t238 * t623 + t241 * t626, -t294 * t623 + t296 * t626, -t267 * t623 + t268 * t626, -t286 * t623 + t288 * t626, -t293 * t623 + t295 * t626, -t287 * t623 + t289 * t626, -t324 * t623 + t325 * t626, -pkin(5) * t252 - t229 * t623 + t230 * t626, -pkin(5) * t258 - t231 * t623 + t233 * t626, -pkin(5) * t243 - t223 * t623 + t224 * t626, -pkin(5) * t226 - t221 * t623 + t222 * t626; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t585, 0, t586, 0, t557, t634, t532, pkin(5) * t532, 0, 0, t686, 0, t524, 0, t698, t697, t387, pkin(5) * t387 + qJ(2) * t661 + t450 * t626, t511 * t626 + t513 * t623, t476 * t626 + t478 * t623, t507 * t626 + t509 * t623, t510 * t626 + t512 * t623, t506 * t626 + t508 * t623, t541 * t626 + t542 * t623, pkin(5) * t431 + t364 * t626 + t371 * t623, pkin(5) * t432 + t365 * t626 + t372 * t623, pkin(5) * t472 + t392 * t626 + t393 * t623, pkin(5) * t338 + t308 * t626 + t328 * t623, t399 * t626 + t401 * t623, t366 * t626 + t367 * t623, t374 * t626 + t377 * t623, t398 * t626 + t400 * t623, t375 * t626 + t378 * t623, t423 * t626 + t424 * t623, pkin(5) * t318 + t262 * t626 + t271 * t623, pkin(5) * t327 + t269 * t626 + t275 * t623, pkin(5) * t312 + t251 * t626 + t257 * t623, pkin(5) * t255 + t238 * t626 + t241 * t623, t294 * t626 + t296 * t623, t267 * t626 + t268 * t623, t286 * t626 + t288 * t623, t293 * t626 + t295 * t623, t287 * t626 + t289 * t623, t324 * t626 + t325 * t623, pkin(5) * t253 + t229 * t626 + t230 * t623, pkin(5) * t259 + t231 * t626 + t233 * t623, pkin(5) * t244 + t223 * t626 + t224 * t623, pkin(5) * t227 + t221 * t626 + t222 * t623; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t591, t592, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t583 - t521, -pkin(1) * t582 - t522, 0, -pkin(1) * t459, t632 * t622, t578 * t625 + t581 * t622, t593 * t625 + t663, -t622 * t641 + t564, t595 * t622 + t655, 0, pkin(1) * t484 + pkin(2) * t581 + pkin(6) * t537 - t656, pkin(1) * t485 - pkin(2) * t578 + pkin(6) * t539 + t665, pkin(1) * t529 + pkin(2) * t587 + pkin(6) * t584 + t427, pkin(1) * t388 - pkin(2) * t504 + pkin(6) * t427, t483 * t622 - t642, t437 * t622 + t528 * t625, t469 * t622 + t500 * t625, t481 * t622 + t642, t470 * t622 - t498 * t625, t491 * t622 + t564, pkin(1) * t368 - pkin(2) * t448 + pkin(6) * t417 + t358 * t625 + t385 * t622, pkin(1) * t373 - pkin(2) * t465 + pkin(6) * t420 + t359 * t625 + t391 * t622, pkin(1) * t362 + pkin(6) * t397 + t622 * t314 + (-pkin(2) - t681) * t436, pkin(1) * t281 + pkin(6) * t316 + (-pkin(2) + t633) * t329, t346 * t622 - t643, t302 * t622 + t462 * t625, t349 * t622 + t415 * t625, t345 * t622 + t643, t350 * t622 + t411 * t625, t380 * t622 + t572 * t625, pkin(1) * t279 - pkin(2) * t333 + pkin(6) * t310 + t270 * t622 + t274 * t625, pkin(1) * t284 - pkin(2) * t341 + pkin(6) * t320 + t276 * t622 + t277 * t625, pkin(1) * t263 - pkin(2) * t301 + pkin(6) * t292 + t239 * t622 + t283 * t625, pkin(1) * t234 - pkin(2) * t248 + pkin(6) * t247 + t236 * t622 + t240 * t625;];
tauB_reg = t1;
