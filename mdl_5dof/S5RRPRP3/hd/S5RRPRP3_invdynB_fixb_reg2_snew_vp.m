% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPRP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:51
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPRP3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRP3_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRP3_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRP3_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRP3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPRP3_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:51:20
% EndTime: 2019-12-31 19:51:31
% DurationCPUTime: 10.43s
% Computational Cost: add. (27227->455), mult. (39202->633), div. (0->0), fcn. (25570->8), ass. (0->330)
t611 = qJD(4) ^ 2;
t603 = sin(pkin(8));
t604 = cos(pkin(8));
t608 = cos(qJ(4));
t651 = qJD(1) + qJD(2);
t640 = t608 * t651;
t605 = sin(qJ(4));
t642 = t605 * t651;
t560 = t603 * t642 - t604 * t640;
t683 = t560 ^ 2;
t541 = t683 - t611;
t562 = t603 * t640 + t604 * t642;
t516 = t562 * t560;
t690 = qJDD(4) + t516;
t661 = t608 * t690;
t450 = t605 * t541 + t661;
t672 = t605 * t690;
t456 = t608 * t541 - t672;
t402 = t603 * t450 - t604 * t456;
t601 = qJDD(1) + qJDD(2);
t678 = t601 * t604;
t555 = t605 * t603 * t601 - t608 * t678;
t606 = sin(qJ(2));
t609 = cos(qJ(2));
t384 = t606 * t402 - t609 * t555;
t387 = t609 * t402 + t606 * t555;
t607 = sin(qJ(1));
t610 = cos(qJ(1));
t780 = t610 * t384 + t607 * t387;
t779 = t607 * t384 - t610 * t387;
t559 = t562 ^ 2;
t503 = t611 + t559;
t434 = t608 * t503 + t672;
t461 = t605 * t503 - t661;
t376 = t604 * t434 - t603 * t461;
t778 = pkin(1) * t376;
t777 = qJ(3) * t376;
t406 = t603 * t434 + t604 * t461;
t776 = qJ(3) * t406;
t775 = t606 * t406;
t774 = t609 * t406;
t773 = -pkin(2) * t376 - pkin(3) * t434;
t654 = t562 * qJD(4);
t509 = t555 + 0.2e1 * t654;
t691 = qJDD(4) - t516;
t671 = t605 * t691;
t692 = -t683 - t611;
t700 = t608 * t692 - t671;
t493 = t608 * t691;
t706 = t605 * t692 + t493;
t718 = -t603 * t706 + t604 * t700;
t740 = t606 * t509 + t609 * t718;
t742 = -t609 * t509 + t606 * t718;
t751 = t607 * t740 + t610 * t742;
t772 = pkin(5) * t751;
t752 = -t607 * t742 + t610 * t740;
t771 = pkin(5) * t752;
t483 = -t683 - t559;
t693 = (t603 * t608 + t604 * t605) * t601;
t704 = -t608 * t555 + t605 * t693;
t705 = -t605 * t555 - t608 * t693;
t716 = -t603 * t705 + t604 * t704;
t739 = t606 * t483 + t609 * t716;
t741 = -t609 * t483 + t606 * t716;
t753 = t607 * t739 + t610 * t741;
t770 = pkin(5) * t753;
t754 = -t607 * t741 + t610 * t739;
t769 = pkin(5) * t754;
t542 = -t559 + t611;
t721 = t608 * t542 + t671;
t722 = -t605 * t542 + t493;
t737 = -t603 * t721 + t604 * t722;
t756 = t606 * t693 + t609 * t737;
t757 = t606 * t737 - t609 * t693;
t768 = -t607 * t757 + t610 * t756;
t767 = t607 * t756 + t610 * t757;
t765 = pkin(6) * t741;
t764 = pkin(6) * t742;
t763 = pkin(7) * t434;
t762 = pkin(7) * t461;
t761 = pkin(1) * t741 - pkin(2) * t483 + qJ(3) * t716;
t760 = pkin(1) * t742 - pkin(2) * t509 + qJ(3) * t718;
t715 = t603 * t704 + t604 * t705;
t759 = -pkin(1) * t715 + pkin(6) * t739;
t717 = t603 * t700 + t604 * t706;
t758 = -pkin(1) * t717 + pkin(6) * t740;
t755 = t604 * t450 + t603 * t456;
t748 = qJ(3) * t715;
t747 = qJ(3) * t717;
t550 = qJD(4) * t560;
t619 = t693 - t550;
t708 = t550 - t619;
t746 = t708 * qJ(5);
t343 = -pkin(2) * t715 - pkin(3) * t705;
t745 = -pkin(2) * t717 - pkin(3) * t706;
t738 = t603 * t722 + t604 * t721;
t650 = t651 ^ 2;
t664 = t606 * t601;
t574 = t609 * t650 + t664;
t641 = t606 * t650;
t657 = t609 * t601;
t577 = t641 - t657;
t523 = t607 * t574 + t610 * t577;
t554 = pkin(6) * t574 - t609 * g(3);
t707 = pkin(6) * t577 - t606 * g(3);
t736 = pkin(5) * t523 + t607 * t554 + t610 * t707;
t626 = t610 * t574 - t607 * t577;
t735 = pkin(5) * t626 + t610 * t554 - t607 * t707;
t731 = pkin(7) * t700;
t730 = pkin(7) * t705;
t729 = pkin(7) * t706;
t512 = t559 - t683;
t727 = t606 * t512;
t724 = t609 * t512;
t588 = t610 * g(1) + t607 * g(2);
t612 = qJD(1) ^ 2;
t580 = -t612 * pkin(1) - t588;
t587 = t607 * g(1) - t610 * g(2);
t624 = qJDD(1) * pkin(1) + t587;
t533 = t609 * t580 + t606 * t624;
t709 = -t650 * pkin(2) + t601 * qJ(3) + 0.2e1 * qJD(3) * t651 + t533;
t532 = t606 * t580 - t609 * t624;
t643 = t606 * t532 + t609 * t533;
t474 = t609 * t532 - t606 * t533;
t656 = t610 * t474;
t720 = -t607 * t643 + t656;
t663 = t607 * t474;
t415 = t610 * t643 + t663;
t719 = -pkin(3) * t483 + pkin(7) * t704;
t649 = t606 * t516;
t510 = -t555 - t654;
t646 = t608 * t550;
t623 = -t605 * t510 + t646;
t631 = t608 * t510 + t605 * t550;
t687 = -t603 * t631 + t604 * t623;
t699 = t609 * t687 - t649;
t648 = t609 * t516;
t702 = t606 * t687 + t648;
t714 = -t607 * t702 + t610 * t699;
t713 = t607 * t699 + t610 * t702;
t621 = (-t605 * t560 - t608 * t562) * qJD(4);
t539 = t605 * t654;
t630 = t539 - t646;
t688 = -t603 * t621 + t604 * t630;
t701 = -t609 * qJDD(4) + t606 * t688;
t703 = t606 * qJDD(4) + t609 * t688;
t712 = t607 * t703 + t610 * t701;
t711 = -t607 * t701 + t610 * t703;
t710 = 2 * qJD(5);
t615 = t604 ^ 2;
t594 = t615 * t650;
t613 = t603 ^ 2;
t639 = t613 * t650;
t572 = t639 + t594;
t564 = t572 * t604;
t647 = t604 * t657;
t528 = -t606 * t564 + t647;
t530 = t609 * t564 + t604 * t664;
t469 = t610 * t528 - t607 * t530;
t698 = t607 * t528 + t610 * t530;
t681 = t604 * g(3);
t447 = -t681 + (t650 * t604 * pkin(3) - t601 * pkin(7) - t709) * t603;
t486 = -t603 * g(3) + t709 * t604;
t448 = -pkin(3) * t594 + pkin(7) * t678 + t486;
t398 = t605 * t447 + t608 * t448;
t500 = t560 * pkin(4) - t562 * qJ(5);
t629 = qJDD(4) * qJ(5) + qJD(4) * t710 - t560 * t500 + t398;
t689 = t603 * t630 + t604 * t621;
t686 = t603 * t623 + t604 * t631;
t466 = t605 * t619 + t608 * t654;
t467 = t608 * t619 - t539;
t412 = -t603 * t466 + t604 * t467;
t632 = t609 * t412 + t649;
t633 = t606 * t412 - t648;
t685 = -t607 * t633 + t610 * t632;
t684 = t607 * t632 + t610 * t633;
t682 = pkin(4) * t608;
t595 = t601 * pkin(2);
t397 = -t608 * t447 + t605 * t448;
t338 = -t608 * t397 + t605 * t398;
t677 = t603 * t338;
t676 = t603 * t604;
t675 = t604 * t338;
t501 = -t650 * qJ(3) + qJDD(3) + t532 - t595;
t476 = -pkin(3) * t678 - t572 * pkin(7) + t501;
t674 = t605 * t476;
t673 = t605 * t708;
t670 = t605 * t509;
t667 = t606 * t501;
t662 = t608 * t476;
t660 = t608 * t509;
t659 = t609 * t501;
t655 = -t483 - t611;
t645 = -t501 + t595;
t644 = -qJ(5) * t605 - pkin(3);
t339 = t605 * t397 + t608 * t398;
t485 = t709 * t603 + t681;
t422 = t603 * t485 + t604 * t486;
t538 = -t607 * t587 - t610 * t588;
t636 = t562 * t500 + qJDD(5) + t397;
t582 = t610 * qJDD(1) - t607 * t612;
t634 = -pkin(5) * t582 - t607 * g(3);
t421 = t604 * t485 - t603 * t486;
t535 = t574 * t676;
t536 = t603 * t647 - t641 * t676;
t628 = t610 * t535 + t607 * t536;
t627 = t607 * t535 - t610 * t536;
t537 = t610 * t587 - t607 * t588;
t620 = -qJDD(4) * pkin(4) + t636;
t618 = -t510 * pkin(4) + t476 + t746;
t617 = t562 * t710 - t618;
t593 = t615 * t601;
t592 = t613 * t601;
t581 = t607 * qJDD(1) + t610 * t612;
t573 = -t639 + t594;
t568 = t593 - t592;
t567 = t593 + t592;
t566 = -pkin(5) * t581 + t610 * g(3);
t563 = t572 * t603;
t529 = t609 * t563 + t603 * t664;
t526 = t606 * t563 - t603 * t657;
t520 = t609 * t568 - t606 * t573;
t519 = t609 * t567 - t606 * t572;
t518 = t606 * t568 + t609 * t573;
t517 = t606 * t567 + t609 * t572;
t511 = t693 - 0.2e1 * t550;
t470 = -t607 * t526 + t610 * t529;
t468 = t610 * t526 + t607 * t529;
t449 = pkin(1) * g(3) + pkin(6) * t643;
t442 = -t607 * t517 + t610 * t519;
t441 = t610 * t517 + t607 * t519;
t440 = -t605 * t511 - t660;
t438 = t608 * t511 - t670;
t428 = t660 - t673;
t427 = t608 * t708 + t670;
t419 = -pkin(6) * t526 - t606 * t486 + t604 * t659;
t418 = -pkin(6) * t528 - t606 * t485 + t603 * t659;
t417 = pkin(6) * t529 + t609 * t486 + t604 * t667;
t416 = -pkin(6) * t530 + t609 * t485 + t603 * t667;
t413 = t662 + t763;
t409 = t604 * t466 + t603 * t467;
t395 = t674 - t729;
t394 = -pkin(6) * t517 + t609 * t421;
t393 = pkin(6) * t519 + t606 * t421;
t390 = t609 * t422 + t667;
t389 = t606 * t422 - t659;
t382 = -pkin(3) * t511 + t674 + t762;
t381 = -t603 * t438 + t604 * t440;
t366 = pkin(4) * t693 + qJ(5) * t555 + t343;
t365 = t606 * t511 + t774;
t363 = -t609 * t511 + t775;
t361 = -pkin(3) * t509 - t662 + t731;
t360 = (pkin(4) * qJD(4) - (2 * qJD(5))) * t562 + t618;
t357 = t611 * qJ(5) - t620;
t356 = -t611 * pkin(4) + t629;
t355 = -t603 * t427 + t604 * t428;
t354 = t609 * t381 + t727;
t353 = t606 * t381 - t724;
t348 = t606 * t708 - t774;
t347 = -t609 * t708 - t775;
t346 = t617 + (-t509 - t654) * pkin(4);
t345 = t609 * t355 - t727;
t344 = t606 * t355 + t724;
t342 = -pkin(4) * t654 + t617 - t746;
t341 = t655 * qJ(5) + t620;
t340 = t655 * pkin(4) + t629;
t335 = -t607 * t389 + t610 * t390;
t334 = t610 * t389 + t607 * t390;
t333 = t398 - t773;
t332 = -qJ(5) * t660 - t605 * t346 - t729;
t331 = -pkin(3) * t476 + pkin(7) * t339;
t330 = -t607 * t363 + t610 * t365;
t328 = t610 * t363 + t607 * t365;
t326 = -t338 - t730;
t325 = t608 * t346 + t644 * t509 + t731;
t324 = -pkin(6) * t389 - (pkin(2) * t606 - qJ(3) * t609) * t421;
t323 = t397 + t745;
t322 = pkin(4) * t673 + t608 * t342 - t763;
t321 = t608 * t356 - t605 * t357;
t320 = t605 * t356 + t608 * t357;
t319 = t339 + t719;
t316 = -t603 * t382 + t604 * t413 + t777;
t315 = -t762 + t605 * t342 - (pkin(3) + t682) * t708;
t312 = (-t692 - t611) * qJ(5) + (-qJDD(4) - t691) * pkin(4) + t636 + t745;
t311 = -t607 * t347 + t610 * t348;
t310 = t610 * t347 + t607 * t348;
t309 = pkin(6) * t390 - (-pkin(2) * t609 - qJ(3) * t606 - pkin(1)) * t421;
t308 = -t603 * t361 + t604 * t395 - t747;
t307 = -qJ(5) * t690 + (-t503 + t611) * pkin(4) - t629 + t773;
t306 = -t605 * t340 + t608 * t341 - t730;
t305 = t604 * t339 - t677;
t304 = t603 * t339 + t675;
t303 = t608 * t340 + t605 * t341 + t719;
t302 = t609 * t305 + t606 * t476;
t301 = t606 * t305 - t609 * t476;
t300 = -pkin(7) * t320 + (pkin(4) * t605 - qJ(5) * t608) * t360;
t299 = -t603 * t320 + t604 * t321;
t298 = t604 * t320 + t603 * t321;
t297 = -pkin(2) * t304 - pkin(3) * t338;
t296 = -t603 * t325 + t604 * t332 - t747;
t295 = -pkin(6) * t363 + t609 * t316 - t606 * t333;
t294 = -t603 * t319 + t604 * t326 - t748;
t293 = pkin(7) * t321 + (t644 - t682) * t360;
t292 = -t603 * t315 + t604 * t322 - t777;
t291 = t609 * t299 + t606 * t360;
t290 = t606 * t299 - t609 * t360;
t289 = pkin(6) * t365 + t606 * t316 + t609 * t333 + t778;
t288 = t609 * t308 - t606 * t323 - t764;
t287 = -pkin(7) * t675 - qJ(3) * t304 - t603 * t331;
t286 = t606 * t308 + t609 * t323 + t758;
t285 = -t603 * t303 + t604 * t306 - t748;
t284 = -t607 * t301 + t610 * t302;
t283 = t610 * t301 + t607 * t302;
t282 = t609 * t294 - t606 * t343 - t765;
t281 = t609 * t296 - t606 * t312 - t764;
t280 = t606 * t294 + t609 * t343 + t759;
t279 = t609 * t285 - t606 * t366 - t765;
t278 = t606 * t296 + t609 * t312 + t758;
t277 = -pkin(2) * t298 - pkin(3) * t320 - pkin(4) * t357 - qJ(5) * t356;
t276 = t606 * t285 + t609 * t366 + t759;
t275 = -pkin(6) * t347 + t609 * t292 - t606 * t307;
t274 = pkin(6) * t348 + t606 * t292 + t609 * t307 - t778;
t273 = -t607 * t290 + t610 * t291;
t272 = t610 * t290 + t607 * t291;
t271 = -qJ(3) * t298 - t603 * t293 + t604 * t300;
t270 = -pkin(6) * t301 + t609 * t287 - t606 * t297;
t269 = -pkin(1) * t304 + pkin(6) * t302 + t606 * t287 + t609 * t297;
t268 = -pkin(6) * t290 + t609 * t271 - t606 * t277;
t267 = -pkin(1) * t298 + pkin(6) * t291 + t606 * t271 + t609 * t277;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t581, -t582, 0, t538, 0, 0, 0, 0, 0, 0, -t626, t523, 0, t415, 0, 0, 0, 0, 0, 0, -t698, t470, t442, t335, 0, 0, 0, 0, 0, 0, t752, t330, t754, t284, 0, 0, 0, 0, 0, 0, t752, t754, t311, t273; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t582, -t581, 0, t537, 0, 0, 0, 0, 0, 0, -t523, -t626, 0, -t720, 0, 0, 0, 0, 0, 0, t469, t468, t441, t334, 0, 0, 0, 0, 0, 0, t751, t328, t753, t283, 0, 0, 0, 0, 0, 0, t751, t753, t310, t272; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t421, 0, 0, 0, 0, 0, 0, t717, -t376, t715, t304, 0, 0, 0, 0, 0, 0, t717, t715, t376, t298; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t582, 0, -t581, 0, t634, -t566, -t537, -pkin(5) * t537, 0, 0, -t523, 0, -t626, 0, t736, t735, t720, pkin(5) * t720 + pkin(6) * t656 - t607 * t449, -t627, -t607 * t518 + t610 * t520, t470, t627, t698, 0, -pkin(5) * t469 - t607 * t416 + t610 * t418, -pkin(5) * t468 - t607 * t417 + t610 * t419, -pkin(5) * t441 - t607 * t393 + t610 * t394, -pkin(5) * t334 - t607 * t309 + t610 * t324, t685, -t607 * t353 + t610 * t354, t768, t714, t779, t711, -t607 * t286 + t610 * t288 - t772, -pkin(5) * t328 - t607 * t289 + t610 * t295, -t607 * t280 + t610 * t282 - t770, -pkin(5) * t283 - t607 * t269 + t610 * t270, t685, t768, -t607 * t344 + t610 * t345, t711, -t779, t714, -t607 * t278 + t610 * t281 - t772, -t607 * t276 + t610 * t279 - t770, -pkin(5) * t310 - t607 * t274 + t610 * t275, -pkin(5) * t272 - t607 * t267 + t610 * t268; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t581, 0, t582, 0, t566, t634, t538, pkin(5) * t538, 0, 0, t626, 0, -t523, 0, -t735, t736, t415, pkin(5) * t415 + pkin(6) * t663 + t610 * t449, t628, t610 * t518 + t607 * t520, t468, -t628, -t469, 0, -pkin(5) * t698 + t610 * t416 + t607 * t418, pkin(5) * t470 + t610 * t417 + t607 * t419, pkin(5) * t442 + t610 * t393 + t607 * t394, pkin(5) * t335 + t610 * t309 + t607 * t324, t684, t610 * t353 + t607 * t354, t767, t713, -t780, t712, t610 * t286 + t607 * t288 + t771, pkin(5) * t330 + t610 * t289 + t607 * t295, t610 * t280 + t607 * t282 + t769, pkin(5) * t284 + t610 * t269 + t607 * t270, t684, t767, t610 * t344 + t607 * t345, t712, t780, t713, t610 * t278 + t607 * t281 + t771, t610 * t276 + t607 * t279 + t769, pkin(5) * t311 + t610 * t274 + t607 * t275, pkin(5) * t273 + t610 * t267 + t607 * t268; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t587, t588, 0, 0, 0, 0, 0, 0, 0, t601, -pkin(1) * t577 - t532, -pkin(1) * t574 - t533, 0, -pkin(1) * t474, t592, 0.2e1 * t601 * t676, 0, t593, 0, 0, pkin(1) * t528 - qJ(3) * t564 + t645 * t604, pkin(1) * t526 + qJ(3) * t563 - t645 * t603, pkin(1) * t517 + pkin(2) * t572 + qJ(3) * t567 + t422, pkin(1) * t389 - pkin(2) * t501 + qJ(3) * t422, t409, t604 * t438 + t603 * t440, t738, t686, t755, t689, t604 * t361 + t603 * t395 + t760, pkin(1) * t363 - pkin(2) * t511 + t604 * t382 + t603 * t413 + t776, t604 * t319 + t603 * t326 + t761, pkin(1) * t301 - pkin(2) * t476 - pkin(7) * t677 + qJ(3) * t305 + t604 * t331, t409, t738, t604 * t427 + t603 * t428, t689, -t755, t686, t604 * t325 + t603 * t332 + t760, t604 * t303 + t603 * t306 + t761, pkin(1) * t347 - pkin(2) * t708 + t604 * t315 + t603 * t322 - t776, pkin(1) * t290 - pkin(2) * t360 + qJ(3) * t299 + t604 * t293 + t603 * t300;];
tauB_reg = t1;
