% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPRP3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:51
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPRP3_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRP3_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRP3_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRP3_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRP3_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPRP3_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:51:31
% EndTime: 2019-12-31 19:51:45
% DurationCPUTime: 14.98s
% Computational Cost: add. (45891->528), mult. (65733->651), div. (0->0), fcn. (42642->8), ass. (0->368)
t1168 = sin(qJ(1));
t1171 = cos(qJ(1));
t1159 = qJDD(1) + qJDD(2);
t1163 = sin(pkin(8));
t1149 = t1163 * t1159;
t1164 = cos(pkin(8));
t1151 = t1164 * t1159;
t1166 = sin(qJ(4));
t1169 = cos(qJ(4));
t1107 = t1149 * t1166 - t1151 * t1169;
t1167 = sin(qJ(2));
t1170 = cos(qJ(2));
t1172 = qJD(4) ^ 2;
t1229 = qJD(1) + qJD(2);
t1215 = t1169 * t1229;
t1216 = t1166 * t1229;
t1112 = t1163 * t1216 - t1164 * t1215;
t1266 = t1112 ^ 2;
t1091 = t1266 - t1172;
t1114 = t1163 * t1215 + t1164 * t1216;
t1250 = t1114 * t1112;
t1273 = qJDD(4) + t1250;
t1235 = t1169 * t1273;
t990 = t1091 * t1166 + t1235;
t1246 = t1166 * t1273;
t996 = t1091 * t1169 - t1246;
t938 = t1163 * t990 - t1164 * t996;
t913 = -t1170 * t1107 + t1167 * t938;
t916 = t1167 * t1107 + t1170 * t938;
t1357 = t1168 * t916 + t1171 * t913;
t1356 = t1168 * t913 - t1171 * t916;
t1111 = t1114 ^ 2;
t1054 = t1172 + t1111;
t1001 = t1054 * t1166 - t1235;
t977 = t1054 * t1169 + t1246;
t936 = t1001 * t1163 - t1164 * t977;
t1355 = pkin(1) * t936;
t1354 = pkin(2) * t936;
t1353 = qJ(3) * t936;
t942 = t1001 * t1164 + t1163 * t977;
t1352 = qJ(3) * t942;
t1351 = t1167 * t942;
t1350 = t1170 * t942;
t1349 = pkin(3) * t977;
t1348 = pkin(7) * t977;
t1026 = -t1266 - t1111;
t1108 = (t1163 * t1169 + t1164 * t1166) * t1159;
t1287 = -t1107 * t1169 + t1108 * t1166;
t1288 = -t1107 * t1166 - t1108 * t1169;
t1301 = -t1163 * t1288 + t1164 * t1287;
t1323 = -t1026 * t1170 + t1167 * t1301;
t1347 = pkin(1) * t1323;
t1251 = t1114 * qJD(4);
t1060 = t1107 + 0.2e1 * t1251;
t1274 = qJDD(4) - t1250;
t1245 = t1166 * t1274;
t1275 = -t1266 - t1172;
t1283 = t1169 * t1275 - t1245;
t1040 = t1169 * t1274;
t1289 = t1166 * t1275 + t1040;
t1303 = -t1163 * t1289 + t1164 * t1283;
t1325 = -t1060 * t1170 + t1167 * t1303;
t1346 = pkin(1) * t1325;
t1345 = pkin(6) * t1323;
t1344 = pkin(6) * t1325;
t1343 = pkin(7) * t1001;
t1092 = t1111 - t1172;
t1308 = -t1092 * t1169 + t1245;
t1309 = t1092 * t1166 + t1040;
t1319 = -t1163 * t1308 + t1164 * t1309;
t1342 = t1167 * t1319;
t1341 = t1170 * t1319;
t1300 = t1163 * t1287 + t1164 * t1288;
t1321 = t1026 * t1167 + t1170 * t1301;
t1340 = -pkin(1) * t1300 + pkin(6) * t1321;
t1302 = t1163 * t1283 + t1164 * t1289;
t1322 = t1060 * t1167 + t1170 * t1303;
t1339 = -pkin(1) * t1302 + pkin(6) * t1322;
t931 = t1163 * t996 + t1164 * t990;
t1338 = pkin(5) * (-t1168 * t1323 + t1171 * t1321);
t1337 = pkin(5) * (t1168 * t1321 + t1171 * t1323);
t1336 = pkin(5) * (-t1168 * t1325 + t1171 * t1322);
t1335 = pkin(5) * (t1168 * t1322 + t1171 * t1325);
t1332 = pkin(2) * t1300;
t1331 = pkin(2) * t1302;
t1330 = qJ(3) * t1300;
t1329 = qJ(3) * t1302;
t1102 = qJD(4) * t1112;
t1063 = t1108 - t1102;
t1292 = t1102 - t1063;
t1328 = t1292 * qJ(5);
t1327 = -pkin(2) * t1060 + qJ(3) * t1303;
t1326 = -pkin(2) * t1026 + qJ(3) * t1301;
t1226 = t1229 ^ 2;
t1238 = t1167 * t1159;
t1128 = t1170 * t1226 + t1238;
t1106 = pkin(6) * t1128 - g(3) * t1170;
t1231 = t1170 * t1159;
t1131 = t1167 * t1226 - t1231;
t1191 = t1128 * t1171 - t1131 * t1168;
t1290 = pkin(6) * t1131 - g(3) * t1167;
t1324 = pkin(5) * t1191 + t1171 * t1106 - t1168 * t1290;
t1320 = t1163 * t1309 + t1164 * t1308;
t1279 = t1128 * t1168 + t1131 * t1171;
t1318 = pkin(5) * t1279 + t1168 * t1106 + t1171 * t1290;
t1264 = pkin(3) * t1288;
t1316 = pkin(3) * t1289;
t1315 = pkin(7) * t1283;
t1314 = pkin(7) * t1288;
t1313 = pkin(7) * t1289;
t1143 = g(1) * t1171 + g(2) * t1168;
t1173 = qJD(1) ^ 2;
t1134 = -pkin(1) * t1173 - t1143;
t1142 = g(1) * t1168 - g(2) * t1171;
t1187 = qJDD(1) * pkin(1) + t1142;
t1083 = t1167 * t1134 - t1170 * t1187;
t1084 = t1170 * t1134 + t1167 * t1187;
t1212 = t1083 * t1167 + t1084 * t1170;
t1013 = t1083 * t1170 - t1084 * t1167;
t1230 = t1171 * t1013;
t1307 = -t1168 * t1212 + t1230;
t1237 = t1168 * t1013;
t1306 = t1171 * t1212 + t1237;
t1304 = -pkin(3) * t1026 + pkin(7) * t1287;
t1224 = t1167 * t1250;
t1061 = t1107 + t1251;
t1223 = t1169 * t1102;
t1185 = t1061 * t1166 + t1223;
t1252 = t1112 * t1166;
t1197 = qJD(4) * t1252 - t1061 * t1169;
t1270 = -t1163 * t1197 + t1164 * t1185;
t1282 = t1170 * t1270 - t1224;
t1222 = t1170 * t1250;
t1285 = t1167 * t1270 + t1222;
t1299 = -t1168 * t1285 + t1171 * t1282;
t1298 = t1168 * t1282 + t1171 * t1285;
t1249 = t1114 * t1169;
t1184 = (-t1249 - t1252) * qJD(4);
t1089 = t1166 * t1251;
t1196 = t1089 - t1223;
t1271 = -t1163 * t1184 + t1164 * t1196;
t1284 = -qJDD(4) * t1170 + t1167 * t1271;
t1286 = qJDD(4) * t1167 + t1170 * t1271;
t1297 = t1168 * t1286 + t1171 * t1284;
t1296 = -t1168 * t1284 + t1171 * t1286;
t1276 = t1111 - t1266;
t1294 = t1167 * t1276;
t1293 = t1170 * t1276;
t1194 = -pkin(2) * t1226 + qJ(3) * t1159 + 0.2e1 * qJD(3) * t1229 + t1084;
t1291 = t1159 * pkin(7) + t1194;
t1176 = t1164 ^ 2;
t1152 = t1176 * t1226;
t1174 = t1163 ^ 2;
t1214 = t1174 * t1226;
t1126 = t1214 + t1152;
t1118 = t1126 * t1164;
t1221 = t1164 * t1231;
t1079 = -t1118 * t1167 + t1221;
t1081 = t1118 * t1170 + t1164 * t1238;
t1281 = t1079 * t1171 - t1081 * t1168;
t1280 = t1079 * t1168 + t1081 * t1171;
t1260 = t1164 * g(3);
t1028 = t1163 * t1194 + t1260;
t1261 = t1163 * g(3);
t1029 = t1164 * t1194 - t1261;
t960 = t1028 * t1163 + t1029 * t1164;
t1272 = t1163 * t1196 + t1164 * t1184;
t1269 = t1163 * t1185 + t1164 * t1197;
t1006 = qJD(4) * t1249 + t1063 * t1166;
t1007 = t1063 * t1169 - t1089;
t950 = -t1006 * t1163 + t1007 * t1164;
t1198 = t1167 * t950 - t1222;
t1199 = t1170 * t950 + t1224;
t1268 = t1168 * t1199 + t1171 * t1198;
t1267 = -t1168 * t1198 + t1171 * t1199;
t1217 = t1164 * t1226;
t987 = -t1260 + (pkin(3) * t1217 - t1291) * t1163;
t988 = -pkin(3) * t1152 + t1164 * t1291 - t1261;
t927 = t1166 * t988 - t1169 * t987;
t928 = t1166 * t987 + t1169 * t988;
t856 = t1166 * t928 - t1169 * t927;
t1265 = pkin(3) * t856;
t1263 = pkin(4) * t1169;
t1253 = qJD(5) * qJD(4);
t1156 = 0.2e1 * t1253;
t1051 = pkin(4) * t1112 - qJ(5) * t1114;
t1195 = -pkin(4) * t1172 + qJDD(4) * qJ(5) - t1051 * t1112 + t928;
t876 = t1156 + t1195;
t878 = -qJDD(4) * pkin(4) - qJ(5) * t1172 + t1051 * t1114 + qJDD(5) + t927;
t1257 = -pkin(4) * t878 + qJ(5) * t876;
t1256 = t1163 * t856;
t1255 = t1164 * t856;
t1052 = -pkin(2) * t1159 - qJ(3) * t1226 + qJDD(3) + t1083;
t1254 = -pkin(2) * t1052 + qJ(3) * t960;
t1038 = t1163 * t1052;
t1039 = t1164 * t1052;
t1016 = -pkin(3) * t1151 - pkin(7) * t1126 + t1052;
t1248 = t1166 * t1016;
t1247 = t1166 * t1292;
t1244 = t1166 * t1060;
t1241 = t1167 * t1052;
t1236 = t1169 * t1016;
t1234 = t1169 * t1060;
t1233 = t1170 * t1052;
t1228 = -pkin(4) * t1108 - qJ(5) * t1107;
t1225 = t1163 * t1151;
t1220 = pkin(2) * t1151 - qJ(3) * t1118 - t1039;
t1219 = -qJ(5) * t1166 - pkin(3);
t857 = t1166 * t927 + t1169 * t928;
t841 = t1166 * t878 + t1169 * t876;
t1180 = t1061 * pkin(4) + t1016 + t1328;
t882 = (pkin(4) * qJD(4) - 0.2e1 * qJD(5)) * t1114 + t1180;
t810 = pkin(7) * t841 + (t1219 - t1263) * t882;
t840 = t1166 * t876 - t1169 * t878;
t817 = -t1163 * t840 + t1164 * t841;
t819 = -pkin(7) * t840 + (pkin(4) * t1166 - qJ(5) * t1169) * t882;
t1213 = -pkin(2) * t882 + qJ(3) * t817 + t1163 * t819 + t1164 * t810;
t1211 = -t1142 * t1168 - t1143 * t1171;
t858 = -pkin(4) * t1026 + t876;
t859 = -qJ(5) * t1026 + t878;
t825 = t1166 * t859 + t1169 * t858 + t1304;
t830 = -t1166 * t858 + t1169 * t859 - t1314;
t1210 = t1163 * t830 + t1164 * t825 + t1326;
t1178 = 0.2e1 * qJD(5) * t1114 - t1180;
t860 = -pkin(4) * t1251 + t1178 - t1328;
t836 = -t1343 + t1166 * t860 - (pkin(3) + t1263) * t1292;
t843 = pkin(4) * t1247 + t1169 * t860 - t1348;
t1209 = -pkin(2) * t1292 + t1163 * t843 + t1164 * t836 - t1352;
t839 = t1304 + t857;
t849 = -t856 - t1314;
t1208 = t1163 * t849 + t1164 * t839 + t1326;
t864 = (-t1060 - t1251) * pkin(4) + t1178;
t847 = t1060 * t1219 + t1169 * t864 + t1315;
t853 = -qJ(5) * t1234 - t1166 * t864 - t1313;
t1207 = t1163 * t853 + t1164 * t847 + t1327;
t884 = -pkin(3) * t1060 - t1236 + t1315;
t925 = t1248 - t1313;
t1206 = t1163 * t925 + t1164 * t884 + t1327;
t1062 = t1108 - 0.2e1 * t1102;
t911 = -pkin(3) * t1062 + t1248 + t1343;
t952 = t1236 + t1348;
t1205 = -pkin(2) * t1062 + t1163 * t952 + t1164 * t911 + t1352;
t1204 = pkin(3) * t840 + t1257;
t1203 = -t928 - t1349;
t1148 = t1174 * t1159;
t1150 = t1176 * t1159;
t1123 = t1150 + t1148;
t1202 = pkin(2) * t1126 + qJ(3) * t1123 + t960;
t1201 = t1228 + t1264;
t1137 = qJDD(1) * t1171 - t1168 * t1173;
t1200 = -pkin(5) * t1137 - g(3) * t1168;
t1138 = t1163 * t1217;
t959 = t1028 * t1164 - t1029 * t1163;
t1086 = t1128 * t1164 * t1163;
t1087 = -t1138 * t1167 + t1163 * t1221;
t1193 = t1086 * t1171 + t1087 * t1168;
t1192 = t1086 * t1168 - t1087 * t1171;
t1190 = t1142 * t1171 - t1143 * t1168;
t1117 = t1126 * t1163;
t1189 = -pkin(2) * t1149 + qJ(3) * t1117 + t1038;
t1188 = -t927 + t1316;
t828 = t1164 * t857 - t1256;
t851 = -pkin(3) * t1016 + pkin(7) * t857;
t1186 = -pkin(2) * t1016 - pkin(7) * t1256 + qJ(3) * t828 + t1164 * t851;
t1183 = pkin(4) * t1054 + qJ(5) * t1273 + t1195;
t1182 = t1183 + t1349;
t1181 = pkin(4) * t1274 + qJ(5) * t1275 - t878;
t1179 = t1181 + t1316;
t1136 = qJDD(1) * t1168 + t1171 * t1173;
t1135 = 0.2e1 * t1225;
t1127 = t1214 - t1152;
t1124 = t1150 - t1148;
t1121 = -pkin(5) * t1136 + g(3) * t1171;
t1080 = t1117 * t1170 + t1163 * t1238;
t1077 = t1117 * t1167 - t1163 * t1231;
t1073 = t1124 * t1170 + t1127 * t1167;
t1072 = t1123 * t1170 - t1126 * t1167;
t1071 = t1124 * t1167 - t1127 * t1170;
t1070 = t1123 * t1167 + t1126 * t1170;
t1037 = -pkin(1) * t1128 - t1084;
t1036 = -pkin(1) * t1131 - t1083;
t1019 = t1102 + t1063;
t1010 = -t1077 * t1168 + t1080 * t1171;
t1009 = t1077 * t1171 + t1080 * t1168;
t1008 = pkin(1) * t1013;
t989 = pkin(1) * g(3) + pkin(6) * t1212;
t983 = -t1062 * t1166 - t1234;
t981 = t1062 * t1169 - t1244;
t968 = pkin(1) * t1079 + t1220;
t967 = pkin(1) * t1077 + t1189;
t966 = t1234 - t1247;
t965 = t1169 * t1292 + t1244;
t956 = -pkin(6) * t1077 - t1029 * t1167 + t1164 * t1233;
t955 = -pkin(6) * t1079 - t1028 * t1167 + t1163 * t1233;
t954 = pkin(6) * t1080 + t1029 * t1170 + t1164 * t1241;
t953 = -pkin(6) * t1081 + t1028 * t1170 + t1163 * t1241;
t947 = t1006 * t1164 + t1007 * t1163;
t924 = -pkin(6) * t1070 + t1170 * t959;
t923 = pkin(6) * t1072 + t1167 * t959;
t919 = t1170 * t960 + t1241;
t918 = t1167 * t960 - t1233;
t917 = t1108 * t1167 + t1341;
t914 = -t1108 * t1170 + t1342;
t910 = -t1163 * t981 + t1164 * t983;
t908 = t1163 * t983 + t1164 * t981;
t890 = pkin(1) * t1070 + t1202;
t889 = -t1201 - t1332;
t888 = t1062 * t1167 + t1350;
t886 = -t1062 * t1170 + t1351;
t880 = t1019 * t1167 + t1341;
t879 = -t1019 * t1170 + t1342;
t874 = -t1163 * t965 + t1164 * t966;
t873 = t1163 * t966 + t1164 * t965;
t872 = t1170 * t910 + t1294;
t871 = t1167 * t910 - t1293;
t866 = t1167 * t1292 - t1350;
t865 = -t1170 * t1292 - t1351;
t863 = t1170 * t874 - t1294;
t862 = t1167 * t874 + t1293;
t861 = -t1264 - t1332;
t855 = pkin(1) * t918 + t1254;
t854 = -t1203 - t1354;
t846 = -pkin(6) * t918 - (pkin(2) * t1167 - qJ(3) * t1170) * t959;
t844 = -t1188 - t1331;
t837 = -t1163 * t911 + t1164 * t952 - t1353;
t834 = -t1179 - t1331;
t833 = pkin(6) * t919 - (-pkin(2) * t1170 - qJ(3) * t1167 - pkin(1)) * t959;
t832 = -t1163 * t884 + t1164 * t925 - t1329;
t831 = -t1182 - 0.2e1 * t1253 + t1354;
t827 = t1163 * t857 + t1255;
t823 = t1016 * t1167 + t1170 * t828;
t822 = -t1016 * t1170 + t1167 * t828;
t821 = pkin(1) * t886 + t1205;
t820 = t1206 + t1346;
t816 = t1163 * t841 + t1164 * t840;
t814 = -pkin(2) * t827 - t1265;
t813 = -t1163 * t847 + t1164 * t853 - t1329;
t812 = -pkin(6) * t886 - t1167 * t854 + t1170 * t837;
t811 = -t1163 * t839 + t1164 * t849 - t1330;
t808 = -t1163 * t836 + t1164 * t843 + t1353;
t807 = t1167 * t882 + t1170 * t817;
t806 = t1167 * t817 - t1170 * t882;
t805 = t1207 + t1346;
t804 = pkin(6) * t888 + t1167 * t837 + t1170 * t854 - t1355;
t803 = -t1167 * t844 + t1170 * t832 - t1344;
t802 = -pkin(7) * t1255 - qJ(3) * t827 - t1163 * t851;
t801 = t1208 + t1347;
t800 = t1167 * t832 + t1170 * t844 + t1339;
t799 = -t1163 * t825 + t1164 * t830 - t1330;
t798 = pkin(1) * t865 + t1209;
t797 = -t1167 * t861 + t1170 * t811 - t1345;
t796 = t1210 + t1347;
t795 = -t1167 * t834 + t1170 * t813 - t1344;
t794 = t1167 * t811 + t1170 * t861 + t1340;
t793 = -t1167 * t889 + t1170 * t799 - t1345;
t792 = t1167 * t813 + t1170 * t834 + t1339;
t791 = -pkin(2) * t816 - t1204;
t790 = t1167 * t799 + t1170 * t889 + t1340;
t789 = -pkin(6) * t865 - t1167 * t831 + t1170 * t808;
t788 = pkin(1) * t822 + t1186;
t787 = pkin(6) * t866 + t1167 * t808 + t1170 * t831 + t1355;
t786 = -qJ(3) * t816 - t1163 * t810 + t1164 * t819;
t785 = -pkin(6) * t822 - t1167 * t814 + t1170 * t802;
t784 = -pkin(1) * t827 + pkin(6) * t823 + t1167 * t802 + t1170 * t814;
t783 = pkin(1) * t806 + t1213;
t782 = -pkin(6) * t806 - t1167 * t791 + t1170 * t786;
t781 = -pkin(1) * t816 + pkin(6) * t807 + t1167 * t786 + t1170 * t791;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1137, 0, -t1136, 0, t1200, -t1121, -t1190, -pkin(5) * t1190, 0, 0, -t1279, 0, -t1191, 0, t1318, t1324, t1307, pkin(5) * t1307 + pkin(6) * t1230 - t1168 * t989, -t1192, -t1071 * t1168 + t1073 * t1171, t1010, t1192, t1280, 0, -pkin(5) * t1281 - t1168 * t953 + t1171 * t955, -pkin(5) * t1009 - t1168 * t954 + t1171 * t956, t1171 * t924 - t1168 * t923 - pkin(5) * (t1070 * t1171 + t1072 * t1168), t1171 * t846 - t1168 * t833 - pkin(5) * (t1168 * t919 + t1171 * t918), t1267, -t1168 * t871 + t1171 * t872, -t1168 * t914 + t1171 * t917, t1299, t1356, t1296, -t1168 * t800 + t1171 * t803 - t1335, t1171 * t812 - t1168 * t804 - pkin(5) * (t1168 * t888 + t1171 * t886), -t1168 * t794 + t1171 * t797 - t1337, t1171 * t785 - t1168 * t784 - pkin(5) * (t1168 * t823 + t1171 * t822), t1267, -t1168 * t879 + t1171 * t880, -t1168 * t862 + t1171 * t863, t1296, -t1356, t1299, -t1168 * t792 + t1171 * t795 - t1335, -t1168 * t790 + t1171 * t793 - t1337, t1171 * t789 - t1168 * t787 - pkin(5) * (t1168 * t866 + t1171 * t865), t1171 * t782 - t1168 * t781 - pkin(5) * (t1168 * t807 + t1171 * t806); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1136, 0, t1137, 0, t1121, t1200, t1211, pkin(5) * t1211, 0, 0, t1191, 0, -t1279, 0, -t1324, t1318, t1306, pkin(5) * t1306 + pkin(6) * t1237 + t1171 * t989, t1193, t1071 * t1171 + t1073 * t1168, t1009, -t1193, -t1281, 0, -pkin(5) * t1280 + t1168 * t955 + t1171 * t953, pkin(5) * t1010 + t1168 * t956 + t1171 * t954, t1168 * t924 + t1171 * t923 + pkin(5) * (-t1070 * t1168 + t1072 * t1171), t1168 * t846 + t1171 * t833 + pkin(5) * (-t1168 * t918 + t1171 * t919), t1268, t1168 * t872 + t1171 * t871, t1168 * t917 + t1171 * t914, t1298, -t1357, t1297, t1168 * t803 + t1171 * t800 + t1336, t1168 * t812 + t1171 * t804 + pkin(5) * (-t1168 * t886 + t1171 * t888), t1168 * t797 + t1171 * t794 + t1338, t1168 * t785 + t1171 * t784 + pkin(5) * (-t1168 * t822 + t1171 * t823), t1268, t1168 * t880 + t1171 * t879, t1168 * t863 + t1171 * t862, t1297, t1357, t1298, t1168 * t795 + t1171 * t792 + t1336, t1168 * t793 + t1171 * t790 + t1338, t1168 * t789 + t1171 * t787 + pkin(5) * (-t1168 * t865 + t1171 * t866), t1168 * t782 + t1171 * t781 + pkin(5) * (-t1168 * t806 + t1171 * t807); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1142, t1143, 0, 0, 0, 0, 0, 0, 0, t1159, t1036, t1037, 0, -t1008, t1148, t1135, 0, t1150, 0, 0, t968, t967, t890, t855, t947, t908, t1320, t1269, t931, t1272, t820, t821, t801, t788, t947, t1320, t873, t1272, -t931, t1269, t805, t796, t798, t783; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1173, 0, 0, -g(3), -t1142, 0, 0, 0, -t1131, 0, -t1128, 0, t1290, t1106, t1013, pkin(6) * t1013, t1087, t1073, t1080, -t1087, t1081, 0, t955, t956, t924, t846, t1199, t872, t917, t1282, -t916, t1286, t803, t812, t797, t785, t1199, t880, t863, t1286, t916, t1282, t795, t793, t789, t782; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1173, 0, qJDD(1), 0, g(3), 0, -t1143, 0, 0, 0, t1128, 0, -t1131, 0, -t1106, t1290, t1212, t989, t1086, t1071, t1077, -t1086, -t1079, 0, t953, t954, t923, t833, t1198, t871, t914, t1285, -t913, t1284, t800, t804, t794, t784, t1198, t879, t862, t1284, t913, t1285, t792, t790, t787, t781; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1142, t1143, 0, 0, 0, 0, 0, 0, 0, t1159, t1036, t1037, 0, -t1008, t1148, t1135, 0, t1150, 0, 0, t968, t967, t890, t855, t947, t908, t1320, t1269, t931, t1272, t820, t821, t801, t788, t947, t1320, t873, t1272, -t931, t1269, t805, t796, t798, t783; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1159, 0, -t1226, 0, 0, -g(3), t1083, 0, t1225, t1124, t1117, -t1225, t1118, 0, t1038, t1039, t959, qJ(3) * t959, t950, t910, t1319, t1270, -t938, t1271, t832, t837, t811, t802, t950, t1319, t874, t1271, t938, t1270, t813, t799, t808, t786; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1226, 0, t1159, 0, g(3), 0, t1084, 0, t1138, -t1127, -t1149, -t1138, -t1151, 0, t1028, t1029, 0, pkin(2) * t959, -t1250, -t1276, -t1108, t1250, t1107, -qJDD(4), t844, t854, t861, t814, -t1250, -t1019, t1276, -qJDD(4), -t1107, t1250, t834, t889, t831, t791; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1159, -t1083, -t1084, 0, 0, t1148, t1135, 0, t1150, 0, 0, t1220, t1189, t1202, t1254, t947, t908, t1320, t1269, t931, t1272, t1206, t1205, t1208, t1186, t947, t1320, t873, t1272, -t931, t1269, t1207, t1210, t1209, t1213; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1149, t1151, t1138, 0, t1152, 0, 0, t1052, t1028, 0, t1007, t983, t1309, t1185, t996, t1196, t925, t952, t849, -pkin(7) * t856, t1007, t1309, t966, t1196, -t996, t1185, t853, t830, t843, t819; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1149, -t1214, t1151, -t1138, 0, -t1052, 0, t1029, 0, t1006, t981, t1308, t1197, t990, t1184, t884, t911, t839, t851, t1006, t1308, t965, t1184, -t990, t1197, t847, t825, t836, t810; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1138, t1127, t1149, t1138, t1151, 0, -t1028, -t1029, 0, 0, t1250, t1276, t1108, -t1250, -t1107, qJDD(4), t1188, t1203, t1264, t1265, t1250, t1019, -t1276, qJDD(4), t1107, -t1250, t1179, t1201, t1156 + t1182, t1204; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1063, -t1060, t1274, t1102, t1091, -t1102, 0, t1016, t927, 0, t1063, t1274, t1060, -t1102, -t1091, t1102, -qJ(5) * t1060, t859, t860, -qJ(5) * t882; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1251, t1062, -t1092, -t1061, t1273, -t1251, -t1016, 0, t928, 0, t1251, -t1092, t1292, -t1251, -t1273, -t1061, t864, t858, -pkin(4) * t1292, -pkin(4) * t882; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1250, t1276, t1108, -t1250, -t1107, qJDD(4), -t927, -t928, 0, 0, t1250, t1019, -t1276, qJDD(4), t1107, -t1250, t1181, t1228, t1156 + t1183, t1257; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1063, t1274, t1060, -t1102, -t1091, t1102, 0, t878, -t882, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1250, t1019, -t1276, qJDD(4), t1107, -t1250, -t878, 0, t876, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1251, t1092, -t1292, t1251, t1273, t1061, t882, -t876, 0, 0;];
m_new_reg = t1;
