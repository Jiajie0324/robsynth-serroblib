% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRPPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d5,theta1,theta3,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:25
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRPPR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPPR2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPPR2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPPR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPPR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRPPR2_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:25:06
% EndTime: 2019-12-05 15:25:08
% DurationCPUTime: 1.82s
% Computational Cost: add. (5325->155), mult. (10480->236), div. (0->0), fcn. (7367->10), ass. (0->129)
t1062 = qJD(2) ^ 2;
t1051 = sin(pkin(9));
t1046 = t1051 ^ 2;
t1054 = cos(pkin(9));
t1047 = t1054 ^ 2;
t1071 = t1046 + t1047;
t1028 = t1071 * t1062;
t1057 = sin(qJ(5));
t1059 = cos(qJ(5));
t1066 = t1051 * t1059 + t1054 * t1057;
t1013 = t1066 * qJDD(2);
t1078 = qJD(2) * t1054;
t1079 = qJD(2) * t1051;
t1014 = t1057 * t1079 - t1059 * t1078;
t1081 = t1014 ^ 2;
t1016 = t1066 * qJD(2);
t1080 = t1016 ^ 2;
t1077 = t1016 * t1014;
t1076 = t1046 * t1062;
t1075 = t1047 * t1062;
t1053 = sin(pkin(7));
t1056 = cos(pkin(7));
t1031 = t1053 * g(1) - t1056 * g(2);
t1074 = t1053 * t1031;
t1073 = t1054 * t1062;
t1032 = -t1056 * g(1) - t1053 * g(2);
t1049 = -g(3) + qJDD(1);
t1058 = sin(qJ(2));
t1060 = cos(qJ(2));
t1009 = t1060 * t1032 + t1058 * t1049;
t1007 = -t1062 * pkin(2) + t1009;
t1052 = sin(pkin(8));
t1055 = cos(pkin(8));
t1008 = -t1058 * t1032 + t1060 * t1049;
t1065 = qJDD(2) * pkin(2) + t1008;
t984 = t1055 * t1007 + t1052 * t1065;
t1024 = -qJDD(3) + t1031;
t1072 = -0.2e1 * qJD(4) * t1079 - t1054 * t1024;
t1070 = t1051 * qJDD(2);
t1069 = t1052 * qJDD(2);
t1042 = t1054 * qJDD(2);
t1068 = t1055 * qJDD(2);
t978 = -t1062 * pkin(3) + qJDD(2) * qJ(4) + t984;
t966 = 0.2e1 * qJD(4) * t1078 - t1051 * t1024 + t1054 * t978;
t983 = -t1052 * t1007 + t1055 * t1065;
t1026 = -t1052 * t1062 + t1068;
t1027 = -t1055 * t1062 - t1069;
t1067 = -t1058 * t1026 + t1060 * t1027;
t985 = t1059 * t1042 - t1057 * t1070;
t997 = t1060 * t1026 + t1058 * t1027;
t975 = -qJDD(2) * pkin(3) - t1062 * qJ(4) + qJDD(4) - t983;
t1061 = qJD(5) ^ 2;
t1033 = t1051 * t1073;
t1030 = t1060 * qJDD(2) - t1058 * t1062;
t1029 = -t1058 * qJDD(2) - t1060 * t1062;
t1025 = t1071 * qJDD(2);
t1022 = t1056 * t1031;
t1021 = t1054 * t1028;
t1020 = t1051 * t1028;
t1010 = -t1061 - t1080;
t1006 = -t1055 * t1021 - t1052 * t1042;
t1005 = t1055 * t1020 + t1051 * t1069;
t1004 = -t1052 * t1021 + t1054 * t1068;
t1003 = t1052 * t1020 - t1051 * t1068;
t995 = t1055 * t1025 - t1052 * t1028;
t994 = t1052 * t1025 + t1055 * t1028;
t993 = -0.2e1 * t1014 * qJD(5) + t1013;
t992 = 0.2e1 * t1016 * qJD(5) - t985;
t991 = -qJDD(5) - t1077;
t990 = qJDD(5) - t1077;
t989 = -t1061 - t1081;
t988 = -t1058 * t1008 + t1060 * t1009;
t987 = t1060 * t1008 + t1058 * t1009;
t986 = -t1080 - t1081;
t982 = -t1058 * t1004 + t1060 * t1006;
t981 = -t1058 * t1003 + t1060 * t1005;
t980 = t1060 * t1004 + t1058 * t1006;
t979 = t1060 * t1003 + t1058 * t1005;
t977 = -t1057 * t1010 + t1059 * t991;
t976 = t1059 * t1010 + t1057 * t991;
t973 = -t1058 * t994 + t1060 * t995;
t972 = t1058 * t995 + t1060 * t994;
t971 = t1057 * t1013 + t1059 * t985;
t970 = -t1059 * t1013 + t1057 * t985;
t969 = -t1057 * t990 + t1059 * t989;
t968 = t1057 * t989 + t1059 * t990;
t967 = -pkin(4) * t1042 + t975 + (-t1075 - t1076) * pkin(6);
t965 = -t1051 * t978 + t1072;
t964 = -pkin(4) * t1075 + pkin(6) * t1042 + t966;
t963 = (pkin(4) * t1073 - pkin(6) * qJDD(2) - t978) * t1051 + t1072;
t962 = -t1052 * t983 + t1055 * t984;
t961 = t1052 * t984 + t1055 * t983;
t960 = -t1051 * t976 + t1054 * t977;
t959 = t1051 * t977 + t1054 * t976;
t958 = -t1051 * t970 + t1054 * t971;
t957 = t1051 * t971 + t1054 * t970;
t956 = -t1051 * t968 + t1054 * t969;
t955 = t1051 * t969 + t1054 * t968;
t954 = t1052 * t993 + t1055 * t960;
t953 = t1052 * t960 - t1055 * t993;
t952 = -t1051 * t965 + t1054 * t966;
t951 = t1051 * t966 + t1054 * t965;
t950 = t1052 * t992 + t1055 * t956;
t949 = t1052 * t956 - t1055 * t992;
t948 = t1057 * t963 + t1059 * t964;
t947 = -t1057 * t964 + t1059 * t963;
t946 = t1052 * t986 + t1055 * t958;
t945 = t1052 * t958 - t1055 * t986;
t944 = -t1058 * t961 + t1060 * t962;
t943 = t1058 * t962 + t1060 * t961;
t942 = t1052 * t975 + t1055 * t952;
t941 = t1052 * t952 - t1055 * t975;
t940 = -t1058 * t953 + t1060 * t954;
t939 = t1058 * t954 + t1060 * t953;
t938 = -t1058 * t949 + t1060 * t950;
t937 = t1058 * t950 + t1060 * t949;
t936 = -t1057 * t947 + t1059 * t948;
t935 = t1057 * t948 + t1059 * t947;
t934 = -t1058 * t945 + t1060 * t946;
t933 = t1058 * t946 + t1060 * t945;
t932 = -t1058 * t941 + t1060 * t942;
t931 = t1058 * t942 + t1060 * t941;
t930 = -t1051 * t935 + t1054 * t936;
t929 = t1051 * t936 + t1054 * t935;
t928 = t1052 * t967 + t1055 * t930;
t927 = t1052 * t930 - t1055 * t967;
t926 = -t1058 * t927 + t1060 * t928;
t925 = t1058 * t928 + t1060 * t927;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1056 * t1032 - t1074, 0, 0, 0, 0, 0, 0, t1056 * t1029, -t1056 * t1030, 0, t1056 * t988 - t1074, 0, 0, 0, 0, 0, 0, t1056 * t1067, -t1056 * t997, 0, -t1053 * t1024 + t1056 * t944, 0, 0, 0, 0, 0, 0, t1056 * t982, t1056 * t981, t1056 * t973, t1053 * t951 + t1056 * t932, 0, 0, 0, 0, 0, 0, t1053 * t955 + t1056 * t938, t1053 * t959 + t1056 * t940, t1053 * t957 + t1056 * t934, t1053 * t929 + t1056 * t926; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1053 * t1032 + t1022, 0, 0, 0, 0, 0, 0, t1053 * t1029, -t1053 * t1030, 0, t1053 * t988 + t1022, 0, 0, 0, 0, 0, 0, t1053 * t1067, -t1053 * t997, 0, t1056 * t1024 + t1053 * t944, 0, 0, 0, 0, 0, 0, t1053 * t982, t1053 * t981, t1053 * t973, t1053 * t932 - t1056 * t951, 0, 0, 0, 0, 0, 0, t1053 * t938 - t1056 * t955, t1053 * t940 - t1056 * t959, t1053 * t934 - t1056 * t957, t1053 * t926 - t1056 * t929; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1049, 0, 0, 0, 0, 0, 0, t1030, t1029, 0, t987, 0, 0, 0, 0, 0, 0, t997, t1067, 0, t943, 0, 0, 0, 0, 0, 0, t980, t979, t972, t931, 0, 0, 0, 0, 0, 0, t937, t939, t933, t925; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1032, 0, 0, 0, 0, 0, 0, t1029, -t1030, 0, t988, 0, 0, 0, 0, 0, 0, t1067, -t997, 0, t944, 0, 0, 0, 0, 0, 0, t982, t981, t973, t932, 0, 0, 0, 0, 0, 0, t938, t940, t934, t926; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1031, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1031, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1024, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t951, 0, 0, 0, 0, 0, 0, -t955, -t959, -t957, -t929; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1049, 0, 0, 0, 0, 0, 0, t1030, t1029, 0, t987, 0, 0, 0, 0, 0, 0, t997, t1067, 0, t943, 0, 0, 0, 0, 0, 0, t980, t979, t972, t931, 0, 0, 0, 0, 0, 0, t937, t939, t933, t925; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1062, -qJDD(2), 0, t1009, 0, 0, 0, 0, 0, 0, t1027, -t1026, 0, t962, 0, 0, 0, 0, 0, 0, t1006, t1005, t995, t942, 0, 0, 0, 0, 0, 0, t950, t954, t946, t928; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1062, 0, t1008, 0, 0, 0, 0, 0, 0, t1026, t1027, 0, t961, 0, 0, 0, 0, 0, 0, t1004, t1003, t994, t941, 0, 0, 0, 0, 0, 0, t949, t953, t945, t927; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1031, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1024, 0, 0, 0, 0, 0, 0, 0, 0, 0, t951, 0, 0, 0, 0, 0, 0, t955, t959, t957, t929; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1062, -qJDD(2), 0, t984, 0, 0, 0, 0, 0, 0, -t1021, t1020, t1025, t952, 0, 0, 0, 0, 0, 0, t956, t960, t958, t930; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1062, 0, t983, 0, 0, 0, 0, 0, 0, t1042, -t1070, t1028, -t975, 0, 0, 0, 0, 0, 0, -t992, -t993, -t986, -t967; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1024, 0, 0, 0, 0, 0, 0, 0, 0, 0, t951, 0, 0, 0, 0, 0, 0, t955, t959, t957, t929; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1075, t1033, t1042, t966, 0, 0, 0, 0, 0, 0, t969, t977, t971, t936; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1033, -t1076, -t1070, t965, 0, 0, 0, 0, 0, 0, t968, t976, t970, t935; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1042, t1070, -t1028, t975, 0, 0, 0, 0, 0, 0, t992, t993, t986, t967; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t989, t991, t985, t948; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t990, t1010, -t1013, t947; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t992, t993, t986, t967;];
f_new_reg = t1;
