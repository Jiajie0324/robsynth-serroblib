% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRPPR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d5,theta1,theta3,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:25
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRPPR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPPR2_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPPR2_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPPR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPPR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRPPR2_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:24:47
% EndTime: 2019-12-05 15:24:56
% DurationCPUTime: 6.98s
% Computational Cost: add. (19532->434), mult. (38263->676), div. (0->0), fcn. (26616->10), ass. (0->298)
t420 = cos(pkin(9));
t417 = sin(pkin(9));
t413 = t417 ^ 2;
t414 = t420 ^ 2;
t480 = qJD(2) ^ 2;
t482 = t480 * (t413 + t414);
t384 = t420 * t482;
t418 = sin(pkin(8));
t421 = cos(pkin(8));
t454 = t421 * qJDD(2);
t448 = t420 * t454;
t353 = -t418 * t384 + t448;
t455 = t418 * qJDD(2);
t355 = t421 * t384 + t420 * t455;
t424 = sin(qJ(2));
t426 = cos(qJ(2));
t301 = t424 * t353 + t426 * t355;
t419 = sin(pkin(7));
t501 = t419 * t301;
t422 = cos(pkin(7));
t500 = t422 * t301;
t391 = t421 * t480 + t455;
t392 = -t418 * t480 + t454;
t438 = -t424 * t391 + t426 * t392;
t499 = t419 * t438;
t498 = t422 * t438;
t436 = t422 * g(1) + t419 * g(2);
t463 = g(3) - qJDD(1);
t364 = -t424 * t463 - t426 * t436;
t360 = -t480 * pkin(2) + t364;
t363 = -t424 * t436 + t426 * t463;
t430 = qJDD(2) * pkin(2) - t363;
t309 = t421 * t360 + t418 * t430;
t493 = -t480 * pkin(3) + qJDD(2) * qJ(4) + (2 * qJD(2) * qJD(4)) + t309;
t308 = t418 * t360 - t421 * t430;
t439 = t418 * t308 + t421 * t309;
t258 = t421 * t308 - t418 * t309;
t469 = t424 * t258;
t202 = t426 * t439 + t469;
t464 = t426 * t258;
t201 = -t424 * t439 + t464;
t398 = t419 * g(1) - t422 * g(2);
t388 = -qJDD(3) + t398;
t345 = qJ(3) * t391 - t421 * t388;
t435 = -qJ(3) * t392 - t418 * t388;
t269 = -pkin(5) * t438 + t424 * t345 + t426 * t435;
t361 = t391 * t420 * t417;
t459 = t420 * t480;
t362 = (-t418 * t459 + t448) * t417;
t311 = t424 * t361 - t426 * t362;
t497 = t419 * t311;
t496 = t422 * t311;
t423 = sin(qJ(5));
t425 = cos(qJ(5));
t478 = t417 * t423;
t374 = (-t420 * t425 + t478) * qJD(2);
t433 = t417 * t425 + t420 * t423;
t376 = t433 * qJD(2);
t330 = t376 * t374;
t483 = qJDD(5) - t330;
t495 = t423 * t483;
t494 = t425 * t483;
t486 = t426 * t391 + t424 * t392;
t270 = pkin(5) * t486 + t426 * t345 - t424 * t435;
t299 = t426 * t353 - t424 * t355;
t491 = t419 * t463;
t490 = t422 * t463;
t410 = t414 * t480;
t460 = t413 * t480;
t394 = t410 + t460;
t385 = t422 * t398;
t485 = t419 * t436 - t385;
t484 = t433 * qJDD(2);
t370 = t374 ^ 2;
t371 = t376 ^ 2;
t416 = qJDD(2) * pkin(3);
t378 = t420 * t388;
t265 = -t378 + (pkin(4) * t459 - pkin(6) * qJDD(2) - t493) * t417;
t274 = -t417 * t388 + t493 * t420;
t457 = qJDD(2) * t420;
t266 = -pkin(4) * t410 + pkin(6) * t457 + t274;
t210 = -t425 * t265 + t423 * t266;
t211 = t423 * t265 + t425 * t266;
t182 = -t425 * t210 + t423 * t211;
t479 = t417 * t182;
t290 = -t480 * qJ(4) + qJDD(4) + t308 - t416;
t477 = t418 * t290;
t397 = t426 * qJDD(2) - t424 * t480;
t476 = t419 * t397;
t475 = t419 * t398;
t474 = t420 * t182;
t473 = t421 * t290;
t472 = t422 * t397;
t275 = -pkin(4) * t457 - t394 * pkin(6) + t290;
t471 = t423 * t275;
t321 = qJDD(5) + t330;
t470 = t423 * t321;
t466 = t425 * t275;
t465 = t425 * t321;
t462 = t374 * qJD(5);
t461 = t376 * qJD(5);
t456 = t413 * qJDD(2);
t407 = t419 * qJDD(2);
t453 = t422 * qJDD(2);
t451 = t418 * t330;
t450 = t421 * t330;
t449 = t417 * t457;
t447 = -t290 + t416;
t273 = t493 * t417 + t378;
t224 = t417 * t273 + t420 * t274;
t408 = t414 * qJDD(2);
t389 = t408 + t456;
t333 = t418 * t389 + t421 * t394;
t335 = t421 * t389 - t418 * t394;
t282 = t426 * t333 + t424 * t335;
t283 = -t424 * t333 + t426 * t335;
t446 = -pkin(1) * t282 - pkin(2) * t333 - pkin(3) * t394 + qJ(1) * t283 - qJ(4) * t389 - t224;
t383 = t417 * t482;
t351 = t418 * t383 - t417 * t454;
t354 = t421 * t383 + t417 * t455;
t298 = t426 * t351 + t424 * t354;
t300 = -t424 * t351 + t426 * t354;
t445 = -pkin(1) * t298 - pkin(2) * t351 + qJ(1) * t300 - qJ(4) * t383 + t447 * t417;
t444 = -pkin(1) * t299 - pkin(2) * t353 - qJ(1) * t301 + qJ(4) * t384 - t447 * t420;
t443 = pkin(1) * t486 + pkin(2) * t391 - qJ(1) * t438 + t309;
t442 = -pkin(1) * t438 - pkin(2) * t392 - qJ(1) * t486 + t308;
t396 = t424 * qJDD(2) + t426 * t480;
t441 = -pkin(1) * t396 + qJ(1) * t397 - t364;
t440 = pkin(1) * t397 + qJ(1) * t396 - t363;
t183 = t423 * t210 + t425 * t211;
t316 = t424 * t363 + t426 * t364;
t347 = -t422 * t436 - t475;
t358 = pkin(5) * t396 - t426 * t398;
t357 = -pkin(5) * t397 - t424 * t398;
t372 = qJDD(2) * t478 - t425 * t457;
t223 = t420 * t273 - t417 * t274;
t434 = t426 * t361 + t424 * t362;
t315 = t426 * t363 - t424 * t364;
t427 = qJD(5) ^ 2;
t395 = t410 - t460;
t390 = t408 - t456;
t382 = t422 * t396;
t381 = t419 * t396;
t367 = -t371 - t427;
t366 = -t371 + t427;
t365 = t370 - t427;
t336 = t421 * t390 - t418 * t395;
t334 = t418 * t390 + t421 * t395;
t329 = t422 * t486;
t328 = t419 * t486;
t327 = -t371 + t370;
t326 = t484 - t462;
t325 = t484 - 0.2e1 * t462;
t324 = -t372 - t461;
t323 = t372 + 0.2e1 * t461;
t319 = -t427 - t370;
t318 = (-t374 * t425 + t376 * t423) * qJD(5);
t317 = (-t374 * t423 - t376 * t425) * qJD(5);
t313 = -t370 - t371;
t306 = t425 * t326 - t423 * t461;
t305 = t423 * t326 + t425 * t461;
t304 = -t423 * t324 + t425 * t462;
t303 = t425 * t324 + t423 * t462;
t296 = -t423 * t367 - t465;
t295 = -t423 * t366 + t494;
t294 = t425 * t365 - t470;
t293 = t425 * t367 - t470;
t292 = t425 * t366 + t495;
t291 = t423 * t365 + t465;
t289 = t422 * t300;
t288 = t419 * t300;
t286 = t422 * t316 - t475;
t285 = t419 * t316 + t385;
t284 = -t424 * t334 + t426 * t336;
t281 = -t425 * t323 - t423 * t325;
t280 = -t372 * t425 + t423 * t484;
t279 = -t423 * t323 + t425 * t325;
t278 = -t372 * t423 - t425 * t484;
t277 = t425 * t319 - t495;
t276 = t423 * t319 + t494;
t272 = -t417 * t317 + t420 * t318;
t271 = -t420 * t317 - t417 * t318;
t264 = t418 * qJDD(5) + t421 * t272;
t263 = -t421 * qJDD(5) + t418 * t272;
t255 = -t417 * t305 + t420 * t306;
t254 = -t417 * t303 + t420 * t304;
t253 = -t420 * t305 - t417 * t306;
t252 = -t420 * t303 - t417 * t304;
t251 = -t417 * t293 + t420 * t296;
t250 = -t417 * t292 + t420 * t295;
t249 = -t417 * t291 + t420 * t294;
t248 = t420 * t293 + t417 * t296;
t247 = -t420 * t292 - t417 * t295;
t246 = -t420 * t291 - t417 * t294;
t245 = pkin(2) * t388 + qJ(3) * t439;
t244 = -pkin(6) * t293 + t466;
t243 = t421 * t250 + t418 * t484;
t242 = t421 * t249 - t418 * t372;
t241 = t418 * t250 - t421 * t484;
t240 = t418 * t249 + t421 * t372;
t239 = -t417 * t279 + t420 * t281;
t238 = -t417 * t278 + t420 * t280;
t237 = -t420 * t279 - t417 * t281;
t236 = t420 * t278 + t417 * t280;
t235 = -t417 * t276 + t420 * t277;
t234 = t420 * t276 + t417 * t277;
t233 = -pkin(6) * t276 + t471;
t232 = t421 * t255 + t451;
t231 = t421 * t254 - t451;
t230 = t418 * t255 - t450;
t229 = t418 * t254 + t450;
t228 = t421 * t251 + t418 * t325;
t227 = t418 * t251 - t421 * t325;
t221 = -pkin(4) * t325 + pkin(6) * t296 + t471;
t220 = -qJ(3) * t351 - t418 * t274 + t420 * t473;
t219 = -qJ(3) * t353 - t418 * t273 + t417 * t473;
t218 = qJ(3) * t354 + t421 * t274 + t420 * t477;
t217 = -qJ(3) * t355 + t421 * t273 + t417 * t477;
t216 = -pkin(4) * t323 + pkin(6) * t277 - t466;
t215 = t421 * t239 - t418 * t327;
t214 = t418 * t239 + t421 * t327;
t213 = t421 * t235 + t418 * t323;
t212 = t418 * t235 - t421 * t323;
t208 = -t424 * t263 + t426 * t264;
t207 = -qJ(3) * t333 + t421 * t223;
t206 = qJ(3) * t335 + t418 * t223;
t205 = t421 * t238 + t418 * t313;
t204 = t418 * t238 - t421 * t313;
t203 = -pkin(3) * t236 - pkin(4) * t278;
t199 = t421 * t224 + t477;
t198 = t418 * t224 - t473;
t197 = t422 * t202 - t419 * t388;
t196 = t419 * t202 + t422 * t388;
t194 = -t424 * t241 + t426 * t243;
t193 = -t424 * t240 + t426 * t242;
t192 = -t424 * t230 + t426 * t232;
t191 = -t424 * t229 + t426 * t231;
t190 = -t424 * t227 + t426 * t228;
t189 = t426 * t227 + t424 * t228;
t188 = pkin(1) * t201 + pkin(2) * t258;
t187 = -pkin(3) * t248 - pkin(4) * t293 + t211;
t186 = -t424 * t214 + t426 * t215;
t185 = -t424 * t212 + t426 * t213;
t184 = t426 * t212 + t424 * t213;
t181 = -t424 * t204 + t426 * t205;
t180 = t426 * t204 + t424 * t205;
t179 = -pkin(5) * t298 - t424 * t218 + t426 * t220;
t178 = -pkin(5) * t299 - t424 * t217 + t426 * t219;
t177 = -pkin(3) * t234 - pkin(4) * t276 + t210;
t176 = -qJ(4) * t248 - t417 * t221 + t420 * t244;
t175 = t422 * t190 + t419 * t248;
t174 = t419 * t190 - t422 * t248;
t173 = -pkin(6) * t278 - t182;
t172 = pkin(5) * t201 + qJ(3) * t464 - t424 * t245;
t171 = -pkin(4) * t275 + pkin(6) * t183;
t170 = -t424 * t198 + t426 * t199;
t169 = t426 * t198 + t424 * t199;
t168 = -pkin(5) * t282 - t424 * t206 + t426 * t207;
t167 = -qJ(4) * t234 - t417 * t216 + t420 * t233;
t166 = -pkin(4) * t313 + pkin(6) * t280 + t183;
t165 = t422 * t185 + t419 * t234;
t164 = t419 * t185 - t422 * t234;
t163 = t422 * t181 + t419 * t236;
t162 = t419 * t181 - t422 * t236;
t161 = -qJ(3) * t198 - (pkin(3) * t418 - qJ(4) * t421) * t223;
t160 = t422 * t170 - t223 * t419;
t159 = t419 * t170 + t223 * t422;
t158 = qJ(3) * t199 - (-pkin(3) * t421 - qJ(4) * t418 - pkin(2)) * t223;
t157 = t420 * t183 - t479;
t156 = t417 * t183 + t474;
t155 = t421 * t157 + t418 * t275;
t154 = t418 * t157 - t421 * t275;
t153 = -pkin(1) * t169 - pkin(2) * t198 + pkin(3) * t290 - qJ(4) * t224;
t152 = -pkin(1) * t189 - pkin(2) * t227 + pkin(3) * t325 - qJ(4) * t251 - t420 * t221 - t417 * t244;
t151 = -qJ(3) * t227 + t421 * t176 - t418 * t187;
t150 = -pkin(2) * t248 + qJ(3) * t228 + t418 * t176 + t421 * t187;
t149 = -pkin(1) * t184 - pkin(2) * t212 + pkin(3) * t323 - qJ(4) * t235 - t420 * t216 - t417 * t233;
t148 = -qJ(3) * t212 + t421 * t167 - t418 * t177;
t147 = -qJ(4) * t236 - t417 * t166 + t420 * t173;
t146 = -pkin(3) * t156 - pkin(4) * t182;
t145 = -pkin(2) * t234 + qJ(3) * t213 + t418 * t167 + t421 * t177;
t144 = -qJ(3) * t204 + t421 * t147 - t418 * t203;
t143 = -pkin(6) * t474 - qJ(4) * t156 - t417 * t171;
t142 = -pkin(2) * t236 + qJ(3) * t205 + t418 * t147 + t421 * t203;
t141 = -t424 * t154 + t426 * t155;
t140 = t426 * t154 + t424 * t155;
t139 = -pkin(1) * t180 - pkin(2) * t204 + pkin(3) * t313 - qJ(4) * t238 - t420 * t166 - t417 * t173;
t138 = -pkin(5) * t169 - t424 * t158 + t426 * t161;
t137 = -pkin(5) * t189 - t424 * t150 + t426 * t151;
t136 = t422 * t141 + t419 * t156;
t135 = t419 * t141 - t422 * t156;
t134 = -pkin(5) * t184 - t424 * t145 + t426 * t148;
t133 = -pkin(5) * t180 - t424 * t142 + t426 * t144;
t132 = -qJ(3) * t154 + t421 * t143 - t418 * t146;
t131 = -pkin(1) * t140 - pkin(2) * t154 + pkin(3) * t275 + pkin(6) * t479 - qJ(4) * t157 - t420 * t171;
t130 = -pkin(2) * t156 + qJ(3) * t155 + t418 * t143 + t421 * t146;
t129 = -pkin(5) * t140 - t424 * t130 + t426 * t132;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t347, 0, 0, 0, 0, 0, 0, -t382, -t472, 0, t286, 0, 0, 0, 0, 0, 0, -t329, -t498, 0, t197, 0, 0, 0, 0, 0, 0, -t500, t289, t422 * t283, t160, 0, 0, 0, 0, 0, 0, t165, t175, t163, t136; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t485, 0, 0, 0, 0, 0, 0, -t381, -t476, 0, t285, 0, 0, 0, 0, 0, 0, -t328, -t499, 0, t196, 0, 0, 0, 0, 0, 0, -t501, t288, t419 * t283, t159, 0, 0, 0, 0, 0, 0, t164, t174, t162, t135; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t463, 0, 0, 0, 0, 0, 0, t397, -t396, 0, -t315, 0, 0, 0, 0, 0, 0, t438, -t486, 0, -t201, 0, 0, 0, 0, 0, 0, t299, t298, t282, t169, 0, 0, 0, 0, 0, 0, t184, t189, t180, t140; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t491, -t490, t485, qJ(1) * t485, 0, 0, t472, 0, -t382, t407, t422 * t357 + t419 * t440, t422 * t358 + t419 * t441, t422 * t315, -qJ(1) * t285 - (pkin(1) * t419 - pkin(5) * t422) * t315, 0, 0, t498, 0, -t329, t407, t422 * t269 - t419 * t442, t422 * t270 - t443 * t419, t422 * t201, -qJ(1) * t196 + t422 * t172 - t419 * t188, t413 * t407 - t496, t422 * t284 + 0.2e1 * t419 * t449, t289, t414 * t407 + t496, t500, 0, t422 * t178 - t419 * t444, t422 * t179 - t419 * t445, t422 * t168 - t419 * t446, -qJ(1) * t159 + t422 * t138 - t419 * t153, t422 * t192 - t419 * t253, t422 * t186 - t419 * t237, t422 * t194 - t419 * t247, t422 * t191 - t419 * t252, t422 * t193 - t419 * t246, t422 * t208 - t419 * t271, -qJ(1) * t164 + t422 * t134 - t419 * t149, -qJ(1) * t174 + t422 * t137 - t419 * t152, -qJ(1) * t162 + t422 * t133 - t419 * t139, -qJ(1) * t135 + t422 * t129 - t419 * t131; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t490, -t491, t347, qJ(1) * t347, 0, 0, t476, 0, -t381, -t453, t419 * t357 - t422 * t440, t419 * t358 - t422 * t441, t419 * t315, qJ(1) * t286 - (-pkin(1) * t422 - pkin(5) * t419) * t315, 0, 0, t499, 0, -t328, -t453, t419 * t269 + t422 * t442, t419 * t270 + t443 * t422, t419 * t201, qJ(1) * t197 + t419 * t172 + t422 * t188, -t413 * t453 - t497, t419 * t284 - 0.2e1 * t422 * t449, t288, -t414 * t453 + t497, t501, 0, t419 * t178 + t422 * t444, t419 * t179 + t422 * t445, t419 * t168 + t422 * t446, qJ(1) * t160 + t419 * t138 + t422 * t153, t419 * t192 + t422 * t253, t419 * t186 + t422 * t237, t419 * t194 + t422 * t247, t419 * t191 + t422 * t252, t419 * t193 + t422 * t246, t419 * t208 + t422 * t271, qJ(1) * t165 + t419 * t134 + t422 * t149, qJ(1) * t175 + t419 * t137 + t422 * t152, qJ(1) * t163 + t419 * t133 + t422 * t139, qJ(1) * t136 + t419 * t129 + t422 * t131; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t398, t436, 0, 0, 0, 0, t396, 0, t397, 0, -t358, t357, t316, pkin(1) * t398 + pkin(5) * t316, 0, 0, t486, 0, t438, 0, -t270, t269, t202, pkin(1) * t388 + pkin(5) * t202 + qJ(3) * t469 + t426 * t245, t434, t426 * t334 + t424 * t336, t298, -t434, -t299, 0, -pkin(5) * t301 + t426 * t217 + t424 * t219, pkin(5) * t300 + t426 * t218 + t424 * t220, pkin(5) * t283 + t426 * t206 + t424 * t207, pkin(1) * t223 + pkin(5) * t170 + t426 * t158 + t424 * t161, t426 * t230 + t424 * t232, t426 * t214 + t424 * t215, t426 * t241 + t424 * t243, t426 * t229 + t424 * t231, t426 * t240 + t424 * t242, t426 * t263 + t424 * t264, -pkin(1) * t234 + pkin(5) * t185 + t426 * t145 + t424 * t148, -pkin(1) * t248 + pkin(5) * t190 + t426 * t150 + t424 * t151, -pkin(1) * t236 + pkin(5) * t181 + t426 * t142 + t424 * t144, -pkin(1) * t156 + pkin(5) * t141 + t426 * t130 + t424 * t132;];
tauB_reg = t1;
