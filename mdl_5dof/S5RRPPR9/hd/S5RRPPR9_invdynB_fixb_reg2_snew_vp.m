% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPPR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:42
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPPR9_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR9_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR9_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR9_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR9_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RRPPR9_invdynB_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:41:52
% EndTime: 2019-12-31 19:42:00
% DurationCPUTime: 5.66s
% Computational Cost: add. (9159->442), mult. (19789->556), div. (0->0), fcn. (10161->6), ass. (0->299)
t467 = qJD(2) ^ 2;
t462 = sin(qJ(2));
t455 = t462 ^ 2;
t468 = qJD(1) ^ 2;
t550 = t455 * t468;
t435 = t467 + t550;
t465 = cos(qJ(2));
t573 = t465 * t468;
t502 = t462 * t573;
t431 = qJDD(2) - t502;
t530 = t465 * t431;
t379 = -t435 * t462 + t530;
t513 = qJD(1) * qJD(2);
t498 = t465 * t513;
t510 = t462 * qJDD(1);
t419 = 0.2e1 * t498 + t510;
t463 = sin(qJ(1));
t466 = cos(qJ(1));
t329 = t379 * t463 + t466 * t419;
t565 = pkin(5) * t329;
t333 = t379 * t466 - t463 * t419;
t327 = pkin(5) * t333;
t456 = t465 ^ 2;
t549 = t456 * t468;
t437 = t467 + t549;
t430 = qJDD(2) + t502;
t543 = t462 * t430;
t380 = t437 * t465 + t543;
t447 = t462 * t513;
t508 = t465 * qJDD(1);
t422 = -0.2e1 * t447 + t508;
t330 = t380 * t463 - t422 * t466;
t564 = pkin(5) * t330;
t334 = t380 * t466 + t422 * t463;
t328 = pkin(5) * t334;
t409 = t465 * t430;
t376 = -t437 * t462 + t409;
t566 = pkin(1) * t376;
t581 = -qJ(3) * t437 + t566;
t561 = pkin(6) * t376;
t526 = pkin(1) * t419 + pkin(6) * t379;
t542 = t462 * t431;
t372 = t435 * t465 + t542;
t580 = pkin(1) * t372;
t521 = t455 + t456;
t424 = t521 * qJDD(1);
t427 = t521 * t468;
t358 = t424 * t463 + t427 * t466;
t563 = pkin(5) * t358;
t360 = t424 * t466 - t427 * t463;
t357 = pkin(5) * t360;
t562 = pkin(6) * t372;
t461 = sin(qJ(5));
t464 = cos(qJ(5));
t520 = qJD(1) * t465;
t412 = -qJD(2) * t464 + t461 * t520;
t413 = qJD(2) * t461 + t464 * t520;
t364 = t412 * t413;
t420 = t498 + t510;
t404 = qJDD(5) + t420;
t572 = -t364 + t404;
t579 = t461 * t572;
t578 = t464 * t572;
t525 = pkin(1) * t422 - pkin(6) * t380;
t531 = t465 * t422;
t545 = t462 * t419;
t356 = -t531 + t545;
t428 = (t455 - t456) * t468;
t577 = t356 * t463 + t428 * t466;
t576 = t356 * t466 - t428 * t463;
t438 = -t467 + t549;
t382 = -t438 * t465 + t542;
t507 = t466 * qJDD(1);
t575 = t382 * t463 + t465 * t507;
t574 = t382 * t466 - t463 * t508;
t524 = pkin(1) * t427 + pkin(6) * t424;
t375 = t438 * t462 + t530;
t517 = t462 * qJD(1);
t429 = -qJD(2) * pkin(3) - qJ(4) * t517;
t449 = pkin(3) * t549;
t505 = 0.2e1 * qJD(1) * qJD(4);
t571 = -qJD(2) * t429 + t465 * t505 + t449;
t421 = -t447 + t508;
t570 = pkin(3) * t421 - qJ(4) * t549 + qJDD(4);
t432 = t463 * g(1) - g(2) * t466;
t397 = qJDD(1) * pkin(1) + t468 * pkin(6) + t432;
t480 = -pkin(2) * t447 + t397;
t486 = t420 + t498;
t569 = 2 * qJD(3);
t493 = t517 * t569;
t469 = qJ(3) * t486 + t480 + t493;
t292 = (t421 + t422) * pkin(2) + t469;
t433 = g(1) * t466 + g(2) * t463;
t398 = -pkin(1) * t468 + qJDD(1) * pkin(6) - t433;
t488 = -pkin(2) * t465 - qJ(3) * t462;
t417 = t488 * qJD(1);
t494 = qJD(1) * t417 + t398;
t496 = qJDD(2) * pkin(2) + qJ(3) * t467 - qJDD(3);
t559 = t465 * g(3);
t475 = t462 * t494 - t496 + t559;
t402 = t412 ^ 2;
t403 = t413 ^ 2;
t441 = qJD(5) + t517;
t439 = t441 ^ 2;
t568 = pkin(2) + pkin(3);
t567 = pkin(2) + pkin(7);
t560 = t421 * pkin(2);
t558 = pkin(4) + qJ(3);
t557 = qJ(3) * t427;
t555 = qJ(3) * t465;
t554 = t421 * qJ(4);
t553 = t441 * t412;
t552 = t441 * t461;
t551 = t441 * t464;
t522 = g(3) * t462 - t398 * t465;
t501 = pkin(2) * t467 + t522;
t515 = -0.2e1 * qJD(4) + t417;
t516 = t569 + t429;
t471 = qJD(2) * t516 + t515 * t520 - t449 - t501 - t554;
t490 = pkin(4) * t462 + pkin(7) * t465;
t275 = -pkin(7) * t467 + qJDD(2) * t558 - t490 * t573 + t471;
t548 = t461 * t275;
t340 = t364 + t404;
t547 = t461 * t340;
t546 = t462 * t397;
t544 = t462 * t422;
t535 = t464 * t275;
t534 = t464 * t340;
t533 = t465 * t397;
t532 = t465 * t419;
t518 = qJD(2) * t465;
t514 = pkin(3) + t567;
t512 = qJD(3) * qJD(2);
t511 = qJDD(2) * qJ(3);
t509 = t463 * qJDD(1);
t506 = -t403 - t439;
t504 = t462 * t364;
t503 = t465 * t364;
t500 = qJ(4) * t518;
t385 = t462 * t398 + t559;
t316 = t385 * t462 - t465 * t522;
t369 = -t432 * t463 - t433 * t466;
t495 = t516 * t462;
t492 = t463 * t502;
t491 = t466 * t502;
t426 = -t463 * t468 + t507;
t489 = -pkin(5) * t426 - g(3) * t463;
t487 = pkin(2) * t462 - t555;
t351 = qJD(5) * t412 - qJDD(2) * t461 - t421 * t464;
t474 = t480 + t570;
t262 = t567 * t421 + t558 * t420 + (t495 + (-t462 * pkin(7) + t465 * t558) * qJD(2)) * qJD(1) + t474;
t483 = pkin(3) * t430 + t420 * qJ(4) + t496;
t476 = t385 - t483;
t276 = -t467 * pkin(4) - qJDD(2) * pkin(7) + (t500 + (-qJD(1) * t490 + t515) * t462) * qJD(1) + t476;
t237 = -t464 * t262 + t461 * t276;
t238 = t461 * t262 + t464 * t276;
t223 = -t464 * t237 + t461 * t238;
t224 = t461 * t237 + t464 * t238;
t315 = t385 * t465 + t462 * t522;
t354 = t532 + t544;
t368 = t432 * t466 - t433 * t463;
t485 = t464 * qJDD(2) - t461 * t421;
t482 = -t417 * t520 + t501;
t481 = t351 + t553;
t479 = t482 - t511;
t478 = (qJD(5) - t441) * t413 - t485;
t317 = -t479 + 0.2e1 * t512;
t451 = -0.2e1 * t512;
t472 = t451 + (-qJDD(2) - t431) * qJ(3) - t580 + t482;
t470 = t560 + (t419 + t486) * qJ(3) + t480;
t444 = t462 * t505;
t436 = t467 - t550;
t425 = t466 * t468 + t509;
t415 = t487 * qJDD(1);
t408 = t521 * t513;
t395 = -pkin(5) * t425 + g(3) * t466;
t394 = (-t462 * t568 + t555) * qJDD(1);
t392 = -t403 + t439;
t391 = t402 - t439;
t390 = qJDD(2) * t463 + t408 * t466;
t389 = t420 * t465 - t455 * t513;
t388 = -qJDD(2) * t466 + t408 * t463;
t387 = -t421 * t462 - t456 * t513;
t378 = -t436 * t462 + t409;
t373 = t486 * t462;
t371 = t436 * t465 + t543;
t370 = (t421 - t447) * t465;
t367 = -qJ(3) * t422 - qJ(4) * t430;
t362 = t403 - t402;
t352 = -t439 - t402;
t350 = qJD(5) * t413 - t485;
t349 = t389 * t466 - t492;
t348 = t387 * t466 + t492;
t347 = t389 * t463 + t491;
t346 = t387 * t463 - t491;
t344 = t378 * t466 + t462 * t509;
t342 = t378 * t463 - t462 * t507;
t341 = -qJ(4) * t431 + t419 * t568;
t338 = -t402 - t403;
t326 = -t533 + t562;
t325 = -t546 - t561;
t324 = (-t412 * t464 + t413 * t461) * t441;
t323 = (t412 * t461 + t413 * t464) * t441;
t319 = -t522 + t580;
t318 = t385 - t566;
t313 = t351 - t553;
t308 = (-qJD(5) - t441) * t413 + t485;
t306 = t475 + t557;
t305 = pkin(2) * t427 + t317;
t304 = -t351 * t464 - t413 * t552;
t303 = t351 * t461 - t413 * t551;
t302 = t350 * t461 + t412 * t551;
t301 = t350 * t464 - t412 * t552;
t300 = t469 + t560;
t299 = -t324 * t462 + t404 * t465;
t298 = -t391 * t464 + t547;
t297 = t392 * t461 - t578;
t296 = t391 * t461 + t534;
t295 = t392 * t464 + t579;
t294 = -t461 * t506 - t534;
t293 = t464 * t506 - t547;
t291 = t470 + t493;
t290 = t316 * t466 - t397 * t463;
t289 = t316 * t463 + t397 * t466;
t288 = t352 * t464 - t579;
t287 = t352 * t461 + t578;
t286 = (t462 * t515 + t500) * qJD(1) + t476;
t285 = t471 + t511;
t284 = -pkin(2) * t430 + t475 - t581;
t283 = -t304 * t462 + t503;
t282 = -t302 * t462 - t503;
t281 = -pkin(2) * t435 + t472;
t280 = t560 + t420 * qJ(3) + (qJ(3) * t518 + t495) * qJD(1) + t474;
t279 = -t557 + t444 + (-qJ(4) * t513 - g(3)) * t465 + (qJ(4) * qJDD(1) - t494) * t462 + t483;
t278 = t317 * t465 + t462 * t475;
t277 = t317 * t462 - t465 * t475;
t274 = t451 - t568 * t427 + (t421 + t508) * qJ(4) + t479 + t571;
t273 = t308 * t464 + t461 * t481;
t272 = t313 * t461 + t464 * t478;
t271 = -t308 * t461 + t464 * t481;
t270 = -t313 * t464 + t461 * t478;
t269 = qJ(4) * t435 + qJD(1) * t495 + t470 + t570;
t268 = -pkin(2) * t545 + t291 * t465 - t562;
t267 = qJ(3) * t531 - t292 * t462 - t561;
t266 = -t305 * t462 + t306 * t465;
t265 = -t297 * t462 + t313 * t465;
t264 = -t298 * t462 + t465 * t478;
t263 = -pkin(3) * t422 - qJ(4) * t437 - t429 * t517 - t292 - t570;
t261 = t294 * t462 + t465 * t481;
t260 = -t294 * t465 + t462 * t481;
t259 = -t435 * t568 + t472 + t554 + t571;
t258 = t288 * t462 + t308 * t465;
t257 = -t288 * t465 + t308 * t462;
t256 = t444 + t568 * t430 + (-t462 * t417 - t500) * qJD(1) - t476 + t581;
t255 = -t273 * t462 + t362 * t465;
t254 = t272 * t462 + t338 * t465;
t253 = -t272 * t465 + t338 * t462;
t252 = t278 * t466 - t300 * t463;
t251 = t278 * t463 + t300 * t466;
t250 = t285 * t465 + t286 * t462;
t249 = t285 * t462 - t286 * t465;
t248 = qJ(3) * t280 - qJ(4) * t286;
t247 = -t263 * t462 + t367 * t465 + t561;
t246 = t269 * t465 - t341 * t462 - t562;
t245 = -pkin(1) * t277 + pkin(2) * t475 - qJ(3) * t317;
t244 = t261 * t466 - t293 * t463;
t243 = t261 * t463 + t293 * t466;
t242 = -t274 * t462 + t279 * t465;
t241 = t258 * t466 - t287 * t463;
t240 = t258 * t463 + t287 * t466;
t239 = -pkin(6) * t277 - t300 * t487;
t235 = t250 * t466 - t280 * t463;
t234 = t250 * t463 + t280 * t466;
t233 = -qJ(4) * t285 + t280 * t568;
t232 = t254 * t466 - t270 * t463;
t231 = t254 * t463 + t270 * t466;
t230 = -qJ(4) * t272 + t270 * t558;
t229 = -qJ(4) * t481 + t293 * t514 - t535;
t228 = -qJ(4) * t308 + t287 * t514 - t548;
t227 = -pkin(1) * t249 - qJ(3) * t285 + t286 * t568;
t226 = -qJ(4) * t294 + t293 * t558 - t238;
t225 = -qJ(4) * t288 + t287 * t558 - t237;
t222 = -pkin(1) * t260 + t294 * t514 - t481 * t558 + t548;
t221 = -pkin(1) * t257 + t288 * t514 - t308 * t558 - t535;
t220 = t224 * t462 + t275 * t465;
t219 = -t224 * t465 + t275 * t462;
t218 = -pkin(6) * t249 - t233 * t462 + t248 * t465;
t217 = -qJ(4) * t338 + t270 * t514 + t223;
t216 = -pkin(6) * t260 + t226 * t465 - t229 * t462;
t215 = -pkin(6) * t257 + t225 * t465 - t228 * t462;
t214 = -pkin(1) * t253 + t272 * t514 - t338 * t558 + t224;
t213 = t220 * t466 - t223 * t463;
t212 = t220 * t463 + t223 * t466;
t211 = -pkin(6) * t253 - t217 * t462 + t230 * t465;
t210 = -qJ(4) * t224 + t223 * t558;
t209 = -qJ(4) * t275 + t223 * t514;
t208 = -pkin(1) * t219 + t224 * t514 - t275 * t558;
t207 = -pkin(6) * t219 - t209 * t462 + t210 * t465;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t425, -t426, 0, t369, 0, 0, 0, 0, 0, 0, -t334, -t333, t360, t290, 0, 0, 0, 0, 0, 0, -t334, t360, t333, t252, 0, 0, 0, 0, 0, 0, t333, t334, -t360, t235, 0, 0, 0, 0, 0, 0, t241, t244, t232, t213; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t426, -t425, 0, t368, 0, 0, 0, 0, 0, 0, -t330, -t329, t358, t289, 0, 0, 0, 0, 0, 0, -t330, t358, t329, t251, 0, 0, 0, 0, 0, 0, t329, t330, -t358, t234, 0, 0, 0, 0, 0, 0, t240, t243, t231, t212; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t376, -t372, 0, -t315, 0, 0, 0, 0, 0, 0, t376, 0, t372, t277, 0, 0, 0, 0, 0, 0, t372, -t376, 0, t249, 0, 0, 0, 0, 0, 0, t257, t260, t253, t219; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t426, 0, -t425, 0, t489, -t395, -t368, -pkin(5) * t368, t349, -t576, t344, t348, -t574, t390, -t318 * t463 + t325 * t466 + t564, -t319 * t463 + t326 * t466 + t565, t315 * t466 - t563, -pkin(5) * t289 - (pkin(1) * t463 - pkin(6) * t466) * t315, t349, t344, t576, t390, t574, t348, t267 * t466 - t284 * t463 + t564, t266 * t466 - t415 * t463 - t563, t268 * t466 - t281 * t463 - t565, -pkin(5) * t251 + t239 * t466 - t245 * t463, t348, -t576, -t574, t349, t344, t390, t246 * t466 - t259 * t463 - t565, t247 * t466 - t256 * t463 - t564, t242 * t466 - t394 * t463 + t563, -pkin(5) * t234 + t218 * t466 - t227 * t463, t283 * t466 - t303 * t463, t255 * t466 - t271 * t463, t265 * t466 - t295 * t463, t282 * t466 - t301 * t463, t264 * t466 - t296 * t463, t299 * t466 - t323 * t463, -pkin(5) * t240 + t215 * t466 - t221 * t463, -pkin(5) * t243 + t216 * t466 - t222 * t463, -pkin(5) * t231 + t211 * t466 - t214 * t463, -pkin(5) * t212 + t207 * t466 - t208 * t463; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t425, 0, t426, 0, t395, t489, t369, pkin(5) * t369, t347, -t577, t342, t346, -t575, t388, t318 * t466 + t325 * t463 - t328, t319 * t466 + t326 * t463 - t327, t315 * t463 + t357, pkin(5) * t290 - (-pkin(1) * t466 - pkin(6) * t463) * t315, t347, t342, t577, t388, t575, t346, t267 * t463 + t284 * t466 - t328, t266 * t463 + t415 * t466 + t357, t268 * t463 + t281 * t466 + t327, pkin(5) * t252 + t239 * t463 + t245 * t466, t346, -t577, -t575, t347, t342, t388, t246 * t463 + t259 * t466 + t327, t247 * t463 + t256 * t466 + t328, t242 * t463 + t394 * t466 - t357, pkin(5) * t235 + t218 * t463 + t227 * t466, t283 * t463 + t303 * t466, t255 * t463 + t271 * t466, t265 * t463 + t295 * t466, t282 * t463 + t301 * t466, t264 * t463 + t296 * t466, t299 * t463 + t323 * t466, pkin(5) * t241 + t215 * t463 + t221 * t466, pkin(5) * t244 + t216 * t463 + t222 * t466, pkin(5) * t232 + t211 * t463 + t214 * t466, pkin(5) * t213 + t207 * t463 + t208 * t466; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t432, t433, 0, 0, t373, t354, t371, t370, t375, 0, t525 + t533, -t526 - t546, t316 + t524, pkin(1) * t397 + pkin(6) * t316, t373, t371, -t354, 0, -t375, t370, qJ(3) * t544 + t292 * t465 + t525, t305 * t465 + t306 * t462 + t524, pkin(2) * t532 + t291 * t462 + t526, pkin(6) * t278 + (pkin(1) - t488) * t300, t370, t354, t375, t373, t371, 0, t269 * t462 + t341 * t465 + t526, t263 * t465 + t367 * t462 - t525, t274 * t465 + t279 * t462 - t524, pkin(1) * t280 + pkin(6) * t250 + t233 * t465 + t248 * t462, t304 * t465 + t504, t273 * t465 + t362 * t462, t297 * t465 + t313 * t462, t302 * t465 - t504, t298 * t465 + t462 * t478, t324 * t465 + t404 * t462, pkin(1) * t287 + pkin(6) * t258 + t225 * t462 + t228 * t465, pkin(1) * t293 + pkin(6) * t261 + t226 * t462 + t229 * t465, pkin(1) * t270 + pkin(6) * t254 + t217 * t465 + t230 * t462, pkin(1) * t223 + pkin(6) * t220 + t209 * t465 + t210 * t462;];
tauB_reg = t1;
