% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPPRP4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:52
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPPRP4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRP4_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRP4_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRP4_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRP4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPPRP4_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:52:31
% EndTime: 2019-12-31 17:52:32
% DurationCPUTime: 1.19s
% Computational Cost: add. (2047->156), mult. (3865->141), div. (0->0), fcn. (1688->6), ass. (0->81)
t788 = qJD(4) ^ 2;
t786 = cos(qJ(4));
t779 = t786 ^ 2;
t789 = qJD(1) ^ 2;
t803 = t779 * t789;
t768 = -t788 - t803;
t804 = -pkin(1) - pkin(2);
t802 = t786 * t789;
t785 = sin(qJ(1));
t787 = cos(qJ(1));
t766 = -t787 * g(1) - t785 * g(2);
t792 = qJDD(1) * qJ(2) + (2 * qJD(2) * qJD(1)) + t766;
t749 = t804 * t789 + t792;
t781 = sin(pkin(7));
t782 = cos(pkin(7));
t765 = t785 * g(1) - t787 * g(2);
t791 = -t789 * qJ(2) + qJDD(2) - t765;
t790 = t804 * qJDD(1) + t791;
t735 = t782 * t749 + t781 * t790;
t733 = -t789 * pkin(3) - qJDD(1) * pkin(6) + t735;
t780 = g(3) + qJDD(3);
t784 = sin(qJ(4));
t728 = t786 * t733 + t784 * t780;
t778 = t784 ^ 2;
t801 = t778 + t779;
t800 = qJD(1) * t784;
t799 = qJD(1) * qJD(4);
t798 = qJD(1) * qJD(5);
t797 = t784 * qJDD(1);
t796 = t786 * qJDD(1);
t795 = t784 * t799;
t734 = -t781 * t749 + t782 * t790;
t757 = -t781 * qJDD(1) + t782 * t789;
t758 = t782 * qJDD(1) + t781 * t789;
t794 = -t785 * t757 + t787 * t758;
t793 = t787 * t757 + t785 * t758;
t732 = qJDD(1) * pkin(3) - t789 * pkin(6) - t734;
t773 = t786 * t780;
t769 = t784 * t802;
t767 = -t778 * t789 - t788;
t764 = -qJDD(4) + t769;
t763 = qJDD(4) + t769;
t762 = t801 * t789;
t761 = t787 * qJDD(1) - t785 * t789;
t760 = t785 * qJDD(1) + t787 * t789;
t759 = t801 * qJDD(1);
t756 = -0.2e1 * t795 + t796;
t755 = 0.2e1 * t786 * t799 + t797;
t751 = qJDD(1) * pkin(1) - t791;
t750 = -t789 * pkin(1) + t792;
t746 = t786 * t764 - t784 * t767;
t745 = -t784 * t763 + t786 * t768;
t744 = t784 * t764 + t786 * t767;
t743 = t786 * t763 + t784 * t768;
t741 = -t782 * t759 - t781 * t762;
t740 = -t781 * t759 + t782 * t762;
t739 = t782 * t746 - t781 * t755;
t738 = t782 * t745 + t781 * t756;
t737 = t781 * t746 + t782 * t755;
t736 = t781 * t745 - t782 * t756;
t730 = t785 * t740 + t787 * t741;
t729 = -t787 * t740 + t785 * t741;
t727 = -t784 * t733 + t773;
t726 = qJDD(5) - ((qJD(4) * pkin(4)) + qJ(5) * t800) * t800 - (t795 - t796) * pkin(4) - qJ(5) * t803 + t732;
t725 = t785 * t737 + t787 * t739;
t724 = t785 * t736 + t787 * t738;
t723 = -t787 * t737 + t785 * t739;
t722 = -t787 * t736 + t785 * t738;
t721 = t768 * pkin(4) - qJ(5) * t796 - 0.2e1 * t786 * t798 + t728;
t720 = qJDD(4) * pkin(4) + t773 + (pkin(4) * t802 + qJDD(1) * qJ(5) - t733 + (2 * t798)) * t784;
t719 = -t781 * t734 + t782 * t735;
t718 = t782 * t734 + t781 * t735;
t717 = -t784 * t727 + t786 * t728;
t716 = t786 * t727 + t784 * t728;
t715 = t782 * t717 + t781 * t732;
t714 = t781 * t717 - t782 * t732;
t713 = -t784 * t720 + t786 * t721;
t712 = t786 * t720 + t784 * t721;
t711 = t782 * t713 + t781 * t726;
t710 = t781 * t713 - t782 * t726;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t760, -t761, 0, -t785 * t765 + t787 * t766, 0, 0, 0, 0, 0, 0, -t760, 0, t761, t787 * t750 - t785 * t751, 0, 0, 0, 0, 0, 0, -t793, t794, 0, t785 * t718 + t787 * t719, 0, 0, 0, 0, 0, 0, t724, t725, t730, t785 * t714 + t787 * t715, 0, 0, 0, 0, 0, 0, t724, t725, t730, t785 * t710 + t787 * t711; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t761, -t760, 0, t787 * t765 + t785 * t766, 0, 0, 0, 0, 0, 0, t761, 0, t760, t785 * t750 + t787 * t751, 0, 0, 0, 0, 0, 0, t794, t793, 0, -t787 * t718 + t785 * t719, 0, 0, 0, 0, 0, 0, t722, t723, t729, -t787 * t714 + t785 * t715, 0, 0, 0, 0, 0, 0, t722, t723, t729, -t787 * t710 + t785 * t711; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t780, 0, 0, 0, 0, 0, 0, -t743, -t744, 0, -t716, 0, 0, 0, 0, 0, 0, -t743, -t744, 0, -t712; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t789, -qJDD(1), 0, t766, 0, 0, 0, 0, 0, 0, -t789, 0, qJDD(1), t750, 0, 0, 0, 0, 0, 0, -t757, t758, 0, t719, 0, 0, 0, 0, 0, 0, t738, t739, t741, t715, 0, 0, 0, 0, 0, 0, t738, t739, t741, t711; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t789, 0, t765, 0, 0, 0, 0, 0, 0, qJDD(1), 0, t789, t751, 0, 0, 0, 0, 0, 0, t758, t757, 0, -t718, 0, 0, 0, 0, 0, 0, -t736, -t737, -t740, -t714, 0, 0, 0, 0, 0, 0, -t736, -t737, -t740, -t710; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t780, 0, 0, 0, 0, 0, 0, -t743, -t744, 0, -t716, 0, 0, 0, 0, 0, 0, -t743, -t744, 0, -t712; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t789, 0, qJDD(1), t750, 0, 0, 0, 0, 0, 0, -t757, t758, 0, t719, 0, 0, 0, 0, 0, 0, t738, t739, t741, t715, 0, 0, 0, 0, 0, 0, t738, t739, t741, t711; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t780, 0, 0, 0, 0, 0, 0, -t743, -t744, 0, -t716, 0, 0, 0, 0, 0, 0, -t743, -t744, 0, -t712; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), 0, -t789, -t751, 0, 0, 0, 0, 0, 0, -t758, -t757, 0, t718, 0, 0, 0, 0, 0, 0, t736, t737, t740, t714, 0, 0, 0, 0, 0, 0, t736, t737, t740, t710; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t789, qJDD(1), 0, t735, 0, 0, 0, 0, 0, 0, t745, t746, -t759, t717, 0, 0, 0, 0, 0, 0, t745, t746, -t759, t713; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), -t789, 0, t734, 0, 0, 0, 0, 0, 0, -t756, t755, t762, -t732, 0, 0, 0, 0, 0, 0, -t756, t755, t762, -t726; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t780, 0, 0, 0, 0, 0, 0, t743, t744, 0, t716, 0, 0, 0, 0, 0, 0, t743, t744, 0, t712; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t768, t764, -t796, t728, 0, 0, 0, 0, 0, 0, t768, t764, -t796, t721; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t763, t767, t797, t727, 0, 0, 0, 0, 0, 0, t763, t767, t797, t720; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t756, -t755, -t762, t732, 0, 0, 0, 0, 0, 0, t756, -t755, -t762, t726; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t768, t764, -t796, t721; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t763, t767, t797, t720; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t756, -t755, -t762, t726;];
f_new_reg = t1;
