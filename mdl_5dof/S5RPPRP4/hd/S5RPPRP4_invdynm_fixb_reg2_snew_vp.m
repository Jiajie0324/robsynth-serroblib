% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPPRP4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:52
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPPRP4_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRP4_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRP4_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRP4_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRP4_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPPRP4_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:52:27
% EndTime: 2019-12-31 17:52:31
% DurationCPUTime: 4.81s
% Computational Cost: add. (11594->423), mult. (21744->416), div. (0->0), fcn. (9180->6), ass. (0->264)
t592 = sin(qJ(4));
t594 = cos(qJ(4));
t694 = qJD(1) ^ 2;
t567 = t594 * t694 * t592;
t557 = qJDD(4) + t567;
t683 = pkin(4) * t557;
t589 = sin(pkin(7));
t590 = cos(pkin(7));
t550 = -t589 * qJDD(1) + t590 * t694;
t587 = g(3) + qJDD(3);
t525 = qJ(3) * t550 + t590 * t587;
t593 = sin(qJ(1));
t595 = cos(qJ(1));
t551 = t590 * qJDD(1) + t589 * t694;
t629 = qJ(3) * t551 + t589 * t587;
t697 = t595 * t550 + t593 * t551;
t709 = -pkin(5) * t697 + t595 * t525 + t593 * t629;
t583 = 2 * qJD(2) * qJD(1);
t560 = t595 * g(1) + t593 * g(2);
t584 = qJDD(1) * qJ(2);
t624 = t560 - t584;
t693 = pkin(1) + pkin(2);
t520 = -t693 * t694 + t583 - t624;
t559 = t593 * g(1) - t595 * g(2);
t621 = -qJDD(2) + t559;
t601 = -t694 * qJ(2) - t621;
t597 = -t693 * qJDD(1) + t601;
t468 = t589 * t520 - t590 * t597;
t469 = t590 * t520 + t589 * t597;
t430 = t590 * t468 - t589 * t469;
t628 = t589 * t468 + t590 * t469;
t708 = t593 * t430 - t595 * t628;
t707 = t595 * t430 + t593 * t628;
t495 = -t593 * t550 + t595 * t551;
t706 = pkin(5) * t495 + t593 * t525 - t595 * t629;
t647 = qJD(1) * qJD(4);
t576 = t594 * t647;
t645 = t592 * qJDD(1);
t545 = -t576 - t645;
t631 = t545 + t576;
t701 = t631 * qJ(5);
t586 = t594 ^ 2;
t582 = t586 * t694;
t596 = qJD(4) ^ 2;
t566 = -t582 - t596;
t663 = t592 * t557;
t512 = t594 * t566 - t663;
t575 = t592 * t647;
t644 = t594 * qJDD(1);
t546 = -0.2e1 * t575 + t644;
t478 = t589 * t512 - t590 * t546;
t480 = t590 * t512 + t589 * t546;
t700 = -pkin(1) * t478 + qJ(2) * t480;
t585 = t592 ^ 2;
t648 = t585 * t694;
t564 = -t596 - t648;
t558 = qJDD(4) - t567;
t656 = t594 * t558;
t514 = -t592 * t564 - t656;
t544 = 0.2e1 * t576 + t645;
t479 = t589 * t514 + t590 * t544;
t481 = t590 * t514 - t589 * t544;
t699 = -pkin(1) * t479 + qJ(2) * t481;
t650 = -t585 - t586;
t552 = t650 * qJDD(1);
t555 = t582 + t648;
t497 = t589 * t552 + t590 * t555;
t498 = t590 * t552 - t589 * t555;
t698 = -pkin(1) * t497 + qJ(2) * t498;
t657 = t594 * t557;
t508 = t592 * t566 + t657;
t692 = pkin(1) * t508;
t662 = t592 * t558;
t510 = t594 * t564 - t662;
t691 = pkin(1) * t510;
t690 = pkin(2) * t478;
t689 = pkin(2) * t479;
t688 = pkin(2) * t497;
t465 = -t694 * pkin(3) - qJDD(1) * pkin(6) + t469;
t574 = t594 * t587;
t459 = t592 * t465 - t574;
t460 = t594 * t465 + t592 * t587;
t419 = t594 * t459 - t592 * t460;
t687 = pkin(3) * t419;
t686 = pkin(3) * t508;
t685 = pkin(3) * t510;
t646 = qJD(1) * qJD(5);
t600 = -t574 + (t465 - (2 * t646)) * t592 - t683;
t432 = t600 + t701;
t684 = pkin(4) * t432;
t682 = pkin(5) * (-t595 * t478 + t593 * t480);
t681 = pkin(5) * (-t595 * t479 + t593 * t481);
t680 = pkin(5) * (-t595 * t497 + t593 * t498);
t678 = pkin(6) * t508;
t677 = pkin(6) * t510;
t676 = pkin(6) * t590;
t675 = qJ(2) * t508;
t674 = qJ(2) * t510;
t420 = t592 * t459 + t594 * t460;
t464 = qJDD(1) * pkin(3) - t694 * pkin(6) + t468;
t408 = t590 * t420 + t589 * t464;
t673 = qJ(3) * t408;
t672 = qJ(3) * t430;
t671 = qJ(3) * t628;
t670 = qJ(3) * t478;
t669 = qJ(3) * t479;
t668 = qJ(3) * t497;
t667 = qJ(3) * t498;
t666 = qJDD(1) * pkin(1);
t665 = t592 * t432;
t664 = t592 * t464;
t659 = t594 * t432;
t658 = t594 * t464;
t655 = -pkin(2) * t508 + qJ(3) * t480;
t654 = -pkin(2) * t510 + qJ(3) * t481;
t653 = -pkin(3) * t546 + pkin(6) * t512;
t652 = pkin(3) * t544 + pkin(6) * t514;
t651 = pkin(3) * t555 + pkin(6) * t552;
t649 = qJD(1) * t592;
t643 = pkin(4) * t645;
t642 = t594 * t646;
t641 = t589 * t645;
t640 = t590 * t645;
t407 = t589 * t420 - t590 * t464;
t639 = -qJ(3) * t407 - t589 * t687;
t527 = (pkin(1) * qJD(1) - (2 * qJD(2))) * qJD(1) + t624;
t528 = -t601 + t666;
t638 = -t595 * t527 - t593 * t528;
t637 = -t593 * t559 - t595 * t560;
t636 = t589 * t567;
t635 = t590 * t567;
t634 = pkin(3) * t464 - pkin(6) * t420;
t553 = t593 * qJDD(1) + t595 * t694;
t530 = -pkin(5) * t553 + t595 * g(3);
t554 = t595 * qJDD(1) - t593 * t694;
t529 = pkin(5) * t554 + t593 * g(3);
t633 = t653 - t658;
t632 = t652 + t664;
t547 = t575 - t644;
t620 = qJD(4) * pkin(4) + qJ(5) * t649;
t630 = pkin(4) * t582 - t547 * qJ(5) + qJD(4) * t620 - t460;
t627 = t593 * t527 - t595 * t528;
t626 = t595 * t559 - t593 * t560;
t625 = -pkin(3) * t590 - pkin(6) * t589 - pkin(2);
t443 = -t547 * pkin(4) - qJ(5) * t582 - t620 * t649 + qJDD(5) + t464;
t425 = -pkin(4) * t546 + qJ(5) * t566 - t443;
t623 = -qJ(5) * t663 + t594 * t425 + t653;
t622 = t420 + t651;
t572 = -0.2e1 * t642;
t435 = t572 - t630;
t405 = t592 * t435 - t659;
t409 = -pkin(4) * t443 + qJ(5) * t435;
t383 = -pkin(6) * t405 + qJ(5) * t659 - t592 * t409;
t390 = -pkin(3) * t405 + t684;
t406 = t594 * t435 + t665;
t391 = t589 * t406 - t590 * t443;
t619 = -qJ(3) * t391 + t590 * t383 - t589 * t390;
t436 = -qJ(5) * t564 + t443;
t504 = pkin(4) * t544 - qJ(5) * t558;
t414 = t594 * t436 - t592 * t504 - t677;
t606 = pkin(4) * t564 + t630;
t421 = t572 - t606 - t685;
t618 = t590 * t414 - t589 * t421 - t669;
t415 = -qJ(5) * t657 - t592 * t425 - t678;
t417 = t432 - t683 - t686;
t617 = t590 * t415 - t589 * t417 - t670;
t441 = t459 - t686;
t448 = t664 - t678;
t616 = -t589 * t441 + t590 * t448 - t670;
t442 = t460 - t685;
t449 = t658 - t677;
t615 = -t589 * t442 + t590 * t449 - t669;
t614 = -t633 - t690;
t613 = -t632 - t689;
t612 = t589 * t414 + t590 * t421 + t654;
t611 = t589 * t415 + t590 * t417 + t655;
t422 = pkin(4) * t555 - qJ(5) * t644 + t435;
t426 = (t631 - t645) * qJ(5) + t600;
t610 = t594 * t422 + t592 * t426 + t651;
t609 = t592 * t436 + t594 * t504 + t652;
t608 = t590 * t441 + t589 * t448 + t655;
t607 = t590 * t442 + t589 * t449 + t654;
t392 = t590 * t406 + t589 * t443;
t605 = -qJ(3) * t392 - t589 * t383 - t590 * t390;
t604 = -t623 - t690;
t603 = -t622 - t688;
t602 = pkin(3) * t443 - pkin(6) * t406 - qJ(5) * t665 - t594 * t409;
t599 = -t610 - t688;
t598 = -t609 - t689;
t565 = t582 - t596;
t563 = t596 - t648;
t556 = -t582 + t648;
t541 = t650 * t647;
t536 = t621 + 0.2e1 * t666;
t531 = -t560 + t583 + 0.2e1 * t584;
t522 = t594 * t545 + t585 * t647;
t521 = -t592 * t547 + t586 * t647;
t518 = t589 * qJDD(4) + t590 * t541;
t517 = -t590 * qJDD(4) + t589 * t541;
t513 = -t592 * t563 + t657;
t511 = t594 * t565 - t662;
t509 = t594 * t563 + t663;
t507 = t592 * t565 + t656;
t506 = (t545 - t576) * t592;
t505 = (t547 + t575) * t594;
t492 = t592 * t544 - t594 * t546;
t491 = -t594 * t544 - t592 * t546;
t490 = t590 * t522 - t636;
t489 = t590 * t521 + t636;
t488 = t589 * t522 + t635;
t487 = t589 * t521 - t635;
t486 = t590 * t513 - t641;
t485 = t590 * t511 - t589 * t644;
t484 = t589 * t513 + t640;
t483 = t589 * t511 + t590 * t644;
t482 = pkin(1) * t528 - qJ(2) * t527;
t471 = t590 * t492 + t589 * t556;
t470 = t589 * t492 - t590 * t556;
t467 = t593 * t517 + t595 * t518;
t466 = -t595 * t517 + t593 * t518;
t461 = pkin(5) * (t593 * t497 + t595 * t498);
t457 = t593 * t488 + t595 * t490;
t456 = t593 * t487 + t595 * t489;
t455 = -t595 * t488 + t593 * t490;
t454 = -t595 * t487 + t593 * t489;
t453 = t593 * t484 + t595 * t486;
t452 = t593 * t483 + t595 * t485;
t451 = -t595 * t484 + t593 * t486;
t450 = -t595 * t483 + t593 * t485;
t447 = -qJ(2) * t550 + t693 * t551 + t468;
t446 = qJ(2) * t551 + t693 * t550 + t469;
t438 = pkin(5) * (t593 * t479 + t595 * t481);
t437 = pkin(5) * (t593 * t478 + t595 * t480);
t434 = t593 * t470 + t595 * t471;
t433 = -t595 * t470 + t593 * t471;
t424 = qJ(2) * t587 + t672;
t423 = t693 * t587 - t671;
t411 = t590 * t419 - t668;
t410 = t589 * t419 + t667;
t404 = t613 + t699;
t403 = t614 + t700;
t402 = -t592 * t422 + t594 * t426;
t401 = t603 + t698;
t400 = t615 + t674;
t399 = t616 + t675;
t398 = pkin(4) * t641 + t590 * t402 - t668;
t397 = -pkin(4) * t640 + t589 * t402 + t667;
t396 = -t607 + t691;
t395 = -t608 + t692;
t394 = t604 + t700;
t393 = t598 + t699;
t389 = qJ(2) * t628 + t430 * t693;
t388 = t599 + t698;
t387 = t618 + t674;
t386 = t617 + t675;
t385 = -t612 + t691;
t384 = -t611 + t692;
t381 = -(qJ(2) - t676) * t419 + t639;
t380 = -t673 - (pkin(1) - t625) * t419;
t379 = qJ(2) * t408 - t693 * t407 + t634;
t378 = qJ(2) * t405 + t619;
t377 = qJ(2) * t392 - t693 * t391 + t602;
t376 = t693 * t405 + t605;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t554, 0, -t553, 0, -t529, -t530, -t626, -pkin(5) * t626, 0, t554, 0, 0, t553, 0, -t529, t627, t530, pkin(5) * t627 + (-t593 * pkin(1) + t595 * qJ(2)) * g(3), 0, 0, -t495, 0, -t697, 0, -t706, t709, t707, -pkin(5) * t707 - t593 * t423 + t595 * t424, t457, t434, t453, t456, t452, t467, -t593 * t395 + t595 * t399 - t682, -t593 * t396 + t595 * t400 - t681, t593 * t410 + t595 * t411 - t680, t595 * t381 - t593 * t380 - pkin(5) * (-t595 * t407 + t593 * t408), t457, t434, t453, t456, t452, t467, -t593 * t384 + t595 * t386 - t682, -t593 * t385 + t595 * t387 - t681, t593 * t397 + t595 * t398 - t680, t595 * t378 - t593 * t376 - pkin(5) * (-t595 * t391 + t593 * t392); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t553, 0, t554, 0, t530, -t529, t637, pkin(5) * t637, 0, t553, 0, 0, -t554, 0, t530, t638, t529, pkin(5) * t638 + (t595 * pkin(1) + t593 * qJ(2)) * g(3), 0, 0, -t697, 0, t495, 0, t709, t706, t708, -pkin(5) * t708 + t595 * t423 + t593 * t424, t455, t433, t451, t454, t450, t466, t595 * t395 + t593 * t399 + t437, t595 * t396 + t593 * t400 + t438, -t595 * t410 + t593 * t411 + t461, t593 * t381 + t595 * t380 + pkin(5) * (t593 * t407 + t595 * t408), t455, t433, t451, t454, t450, t466, t595 * t384 + t593 * t386 + t437, t595 * t385 + t593 * t387 + t438, -t595 * t397 + t593 * t398 + t461, t593 * t378 + t595 * t376 + pkin(5) * (t593 * t391 + t595 * t392); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t559, t560, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t536, 0, t531, t482, 0, 0, 0, 0, 0, qJDD(1), t447, t446, 0, t389, -t506, -t491, -t509, -t505, -t507, 0, t403, t404, t401, t379, -t506, -t491, -t509, -t505, -t507, 0, t394, t393, t388, t377; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t694, 0, 0, -g(3), -t559, 0, 0, qJDD(1), 0, 0, t694, 0, 0, -t528, g(3), qJ(2) * g(3), 0, 0, -t551, 0, -t550, 0, t629, t525, t430, t424, t490, t471, t486, t489, t485, t518, t399, t400, t411, t381, t490, t471, t486, t489, t485, t518, t386, t387, t398, t378; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t694, 0, qJDD(1), 0, g(3), 0, -t560, 0, 0, t694, 0, 0, -qJDD(1), 0, g(3), -t527, 0, pkin(1) * g(3), 0, 0, -t550, 0, t551, 0, t525, -t629, -t628, t423, -t488, -t470, -t484, -t487, -t483, -t517, t395, t396, -t410, t380, -t488, -t470, -t484, -t487, -t483, -t517, t384, t385, -t397, t376; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t559, t560, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t536, 0, t531, t482, 0, 0, 0, 0, 0, qJDD(1), t447, t446, 0, t389, -t506, -t491, -t509, -t505, -t507, 0, t403, t404, t401, t379, -t506, -t491, -t509, -t505, -t507, 0, t394, t393, t388, t377; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t694, 0, 0, -t528, g(3), 0, 0, 0, -t551, 0, -t550, 0, t629, t525, t430, t672, t490, t471, t486, t489, t485, t518, t616, t615, t411, t419 * t676 + t639, t490, t471, t486, t489, t485, t518, t617, t618, t398, t619; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t528, 0, -t527, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(2) * t551 + t468, pkin(2) * t550 + t469, 0, pkin(2) * t430, -t506, -t491, -t509, -t505, -t507, 0, t614, t613, t603, -pkin(2) * t407 + t634, -t506, -t491, -t509, -t505, -t507, 0, t604, t598, t599, -pkin(2) * t391 + t602; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t694, 0, 0, qJDD(1), 0, -g(3), t527, 0, 0, 0, 0, t550, 0, -t551, 0, -t525, t629, t628, -pkin(2) * t587 + t671, t488, t470, t484, t487, t483, t517, t608, t607, t410, -t419 * t625 + t673, t488, t470, t484, t487, t483, t517, t611, t612, t397, -pkin(2) * t405 - t605; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), 0, -t694, 0, 0, t587, t468, 0, t522, t492, t513, t521, t511, t541, t448, t449, t419, pkin(6) * t419, t522, t492, t513, t521, t511, t541, t415, t414, t402, t383; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t694, 0, -qJDD(1), 0, -t587, 0, t469, 0, t567, -t556, t645, -t567, t644, -qJDD(4), t441, t442, 0, t687, t567, -t556, t645, -t567, t644, -qJDD(4), t417, t421, -t643, t390; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), -t468, -t469, 0, 0, t506, t491, t509, t505, t507, 0, t633, t632, t622, -t634, t506, t491, t509, t505, t507, 0, t623, t609, t610, -t602; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t545, -t546, t557, t576, t565, -t576, 0, t464, t459, 0, t545, -t546, t557, t576, t565, -t576, -qJ(5) * t557, t436, t426, qJ(5) * t432; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t575, -t544, t563, t547, t558, t575, -t464, 0, t460, 0, -t575, -t544, t563, t547, t558, t575, t425, t504, t422, t409; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t567, t556, -t645, t567, -t644, qJDD(4), -t459, -t460, 0, 0, -t567, t556, -t645, t567, -t644, qJDD(4), 0.2e1 * t592 * t646 - t459 + 0.2e1 * t683 - t701, t606 + 0.2e1 * t642, t643, -t684; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t545, -t546, t557, t576, t565, -t576, 0, t443, t432, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t575, -t544, t563, t547, t558, t575, -t443, 0, t435, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t567, t556, -t645, t567, -t644, qJDD(4), -t432, -t435, 0, 0;];
m_new_reg = t1;
