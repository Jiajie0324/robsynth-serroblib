% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRRRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-07-18 13:29
% Revision: 08c8d617a845f5dd194efdf9aca2774760f7818f (2019-07-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRRRR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(2,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'S5PRRRR1_invdynf_fixb_reg2_snew_vp: pkin has to be [2x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-07-18 13:29:11
% EndTime: 2019-07-18 13:29:13
% DurationCPUTime: 1.89s
% Computational Cost: add. (5854->187), mult. (11651->215), div. (0->0), fcn. (9201->8), ass. (0->163)
t1080 = sin(qJ(4));
t1084 = cos(qJ(4));
t1085 = cos(qJ(3));
t1106 = qJD(2) * t1085;
t1081 = sin(qJ(3));
t1107 = qJD(2) * t1081;
t1046 = t1080 * t1107 - t1084 * t1106;
t1045 = qJD(5) + t1046;
t1114 = qJD(5) + t1045;
t1048 = (t1080 * t1085 + t1081 * t1084) * qJD(2);
t1075 = qJD(3) + qJD(4);
t1079 = sin(qJ(5));
t1083 = cos(qJ(5));
t1034 = t1079 * t1048 - t1083 * t1075;
t1113 = t1034 ^ 2;
t1036 = t1083 * t1048 + t1079 * t1075;
t1112 = t1036 ^ 2;
t1111 = t1045 ^ 2;
t1110 = t1046 ^ 2;
t1109 = t1048 ^ 2;
t1108 = t1075 ^ 2;
t1105 = t1036 * t1034;
t1104 = t1048 * t1046;
t1078 = -g(3) + qJDD(1);
t1082 = sin(qJ(2));
t1086 = cos(qJ(2));
t1057 = -t1086 * g(1) + t1082 * t1078;
t1043 = t1081 * g(2) + t1085 * t1057;
t1077 = t1085 ^ 2;
t1087 = qJD(3) ^ 2;
t1088 = qJD(2) ^ 2;
t1065 = -t1077 * t1088 - t1087;
t1031 = pkin(2) * t1065 + t1043;
t1042 = t1085 * g(2) - t1081 * t1057;
t1066 = t1081 * t1088 * t1085;
t1062 = qJDD(3) + t1066;
t1089 = pkin(2) * t1062 + t1042;
t1010 = t1080 * t1031 - t1084 * t1089;
t1103 = t1080 * t1010;
t1056 = t1082 * g(1) + t1086 * t1078;
t1102 = t1082 * t1056;
t1101 = qJD(4) - t1075;
t1100 = qJD(5) - t1045;
t1076 = t1081 ^ 2;
t1099 = t1076 + t1077;
t1098 = t1081 * qJDD(2);
t1097 = qJDD(3) + qJDD(4);
t1096 = qJD(3) * t1107;
t1095 = qJD(3) * t1106;
t1053 = t1095 + t1098;
t1072 = t1085 * qJDD(2);
t1054 = t1072 - t1096;
t1092 = -t1084 * t1053 - t1080 * t1054;
t1015 = -t1046 * qJD(4) - t1092;
t1094 = -t1079 * t1015 + t1083 * t1097;
t1093 = t1080 * t1053 - t1084 * t1054;
t1091 = -t1083 * t1015 - t1079 * t1097;
t1090 = -t1048 * qJD(4) - qJDD(5) - t1093;
t1064 = -t1076 * t1088 - t1087;
t1063 = -qJDD(3) + t1066;
t1061 = t1099 * t1088;
t1060 = t1086 * qJDD(2) - t1082 * t1088;
t1059 = -t1082 * qJDD(2) - t1086 * t1088;
t1058 = t1099 * qJDD(2);
t1055 = t1072 - 0.2e1 * t1096;
t1052 = 0.2e1 * t1095 + t1098;
t1051 = t1086 * t1056;
t1041 = -t1108 - t1109;
t1040 = t1085 * t1063 - t1081 * t1064;
t1039 = -t1081 * t1062 + t1085 * t1065;
t1038 = t1081 * t1063 + t1085 * t1064;
t1037 = t1085 * t1062 + t1081 * t1065;
t1033 = t1086 * t1058 - t1082 * t1061;
t1032 = t1082 * t1058 + t1086 * t1061;
t1030 = t1086 * t1057 - t1102;
t1029 = t1082 * t1057 + t1051;
t1028 = t1056 + (t1054 - t1096) * pkin(2);
t1026 = -t1097 - t1104;
t1025 = t1097 - t1104;
t1024 = -t1108 - t1110;
t1023 = t1086 * t1040 + t1082 * t1052;
t1022 = t1086 * t1039 - t1082 * t1055;
t1021 = t1082 * t1040 - t1086 * t1052;
t1020 = t1082 * t1039 + t1086 * t1055;
t1018 = -t1081 * t1042 + t1085 * t1043;
t1017 = t1085 * t1042 + t1081 * t1043;
t1016 = -t1109 - t1110;
t1014 = -t1111 - t1112;
t1013 = t1086 * t1018 - t1102;
t1012 = t1082 * t1018 + t1051;
t1011 = t1084 * t1031 + t1080 * t1089;
t1009 = t1084 * t1026 - t1080 * t1041;
t1008 = t1080 * t1026 + t1084 * t1041;
t1007 = t1046 * t1101 + t1092;
t1006 = -t1075 * t1046 + t1015;
t1005 = -t1048 * t1101 - t1093;
t1004 = (qJD(4) + t1075) * t1048 + t1093;
t1003 = t1084 * t1010;
t1002 = -t1111 - t1113;
t1001 = t1084 * t1024 - t1080 * t1025;
t1000 = t1080 * t1024 + t1084 * t1025;
t999 = -t1112 - t1113;
t998 = t1090 - t1105;
t997 = -t1090 - t1105;
t996 = t1083 * t1011 - t1079 * t1028;
t995 = -t1079 * t1011 - t1083 * t1028;
t994 = t1034 * t1100 + t1091;
t993 = -t1034 * t1114 - t1091;
t992 = -t1036 * t1100 + t1094;
t991 = t1036 * t1114 - t1094;
t990 = t1084 * t1011 + t1103;
t989 = t1080 * t1011 - t1003;
t988 = -t1081 * t1008 + t1085 * t1009;
t987 = t1085 * t1008 + t1081 * t1009;
t986 = t1084 * t1005 - t1080 * t1007;
t985 = t1080 * t1005 + t1084 * t1007;
t984 = -t1081 * t1000 + t1085 * t1001;
t983 = t1085 * t1000 + t1081 * t1001;
t982 = -t1079 * t1014 + t1083 * t998;
t981 = t1083 * t1014 + t1079 * t998;
t980 = t1083 * t1002 - t1079 * t997;
t979 = t1079 * t1002 + t1083 * t997;
t978 = t1082 * t1006 + t1086 * t988;
t977 = -t1086 * t1006 + t1082 * t988;
t976 = -t1079 * t995 + t1083 * t996;
t975 = t1079 * t996 + t1083 * t995;
t974 = t1082 * t1004 + t1086 * t984;
t973 = -t1086 * t1004 + t1082 * t984;
t972 = -t1079 * t994 + t1083 * t992;
t971 = t1079 * t992 + t1083 * t994;
t970 = -t1081 * t989 + t1085 * t990;
t969 = t1081 * t990 + t1085 * t989;
t968 = t1084 * t976 + t1103;
t967 = t1080 * t976 - t1003;
t966 = -t1081 * t985 + t1085 * t986;
t965 = t1081 * t986 + t1085 * t985;
t964 = t1080 * t993 + t1084 * t982;
t963 = t1080 * t982 - t1084 * t993;
t962 = t1080 * t991 + t1084 * t980;
t961 = t1080 * t980 - t1084 * t991;
t960 = -t1082 * t1028 + t1086 * t970;
t959 = t1086 * t1028 + t1082 * t970;
t958 = t1082 * t1016 + t1086 * t966;
t957 = -t1086 * t1016 + t1082 * t966;
t956 = t1080 * t999 + t1084 * t972;
t955 = t1080 * t972 - t1084 * t999;
t954 = -t1081 * t967 + t1085 * t968;
t953 = t1081 * t968 + t1085 * t967;
t952 = -t1081 * t963 + t1085 * t964;
t951 = t1081 * t964 + t1085 * t963;
t950 = -t1081 * t961 + t1085 * t962;
t949 = t1081 * t962 + t1085 * t961;
t948 = -t1081 * t955 + t1085 * t956;
t947 = t1081 * t956 + t1085 * t955;
t946 = t1082 * t981 + t1086 * t952;
t945 = t1082 * t952 - t1086 * t981;
t944 = t1082 * t975 + t1086 * t954;
t943 = t1082 * t954 - t1086 * t975;
t942 = t1082 * t979 + t1086 * t950;
t941 = t1082 * t950 - t1086 * t979;
t940 = t1082 * t971 + t1086 * t948;
t939 = t1082 * t948 - t1086 * t971;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1059, -t1060, 0, t1030, 0, 0, 0, 0, 0, 0, t1022, t1023, t1033, t1013, 0, 0, 0, 0, 0, 0, t974, t978, t958, t960, 0, 0, 0, 0, 0, 0, t942, t946, t940, t944; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, -t1037, -t1038, 0, -t1017, 0, 0, 0, 0, 0, 0, -t983, -t987, -t965, -t969, 0, 0, 0, 0, 0, 0, -t949, -t951, -t947, -t953; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1078, 0, 0, 0, 0, 0, 0, t1060, t1059, 0, t1029, 0, 0, 0, 0, 0, 0, t1020, t1021, t1032, t1012, 0, 0, 0, 0, 0, 0, t973, t977, t957, t959, 0, 0, 0, 0, 0, 0, t941, t945, t939, t943; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1059, -t1060, 0, t1030, 0, 0, 0, 0, 0, 0, t1022, t1023, t1033, t1013, 0, 0, 0, 0, 0, 0, t974, t978, t958, t960, 0, 0, 0, 0, 0, 0, t942, t946, t940, t944; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, -t1037, -t1038, 0, -t1017, 0, 0, 0, 0, 0, 0, -t983, -t987, -t965, -t969, 0, 0, 0, 0, 0, 0, -t949, -t951, -t947, -t953; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1078, 0, 0, 0, 0, 0, 0, t1060, t1059, 0, t1029, 0, 0, 0, 0, 0, 0, t1020, t1021, t1032, t1012, 0, 0, 0, 0, 0, 0, t973, t977, t957, t959, 0, 0, 0, 0, 0, 0, t941, t945, t939, t943; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1088, -qJDD(2), 0, t1057, 0, 0, 0, 0, 0, 0, t1039, t1040, t1058, t1018, 0, 0, 0, 0, 0, 0, t984, t988, t966, t970, 0, 0, 0, 0, 0, 0, t950, t952, t948, t954; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1088, 0, t1056, 0, 0, 0, 0, 0, 0, t1055, -t1052, t1061, t1056, 0, 0, 0, 0, 0, 0, -t1004, -t1006, -t1016, t1028, 0, 0, 0, 0, 0, 0, -t979, -t981, -t971, -t975; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, g(2), 0, 0, 0, 0, 0, 0, t1037, t1038, 0, t1017, 0, 0, 0, 0, 0, 0, t983, t987, t965, t969, 0, 0, 0, 0, 0, 0, t949, t951, t947, t953; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1065, t1063, t1072, t1043, 0, 0, 0, 0, 0, 0, t1001, t1009, t986, t990, 0, 0, 0, 0, 0, 0, t962, t964, t956, t968; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1062, t1064, -t1098, t1042, 0, 0, 0, 0, 0, 0, t1000, t1008, t985, t989, 0, 0, 0, 0, 0, 0, t961, t963, t955, t967; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1055, t1052, -t1061, -t1056, 0, 0, 0, 0, 0, 0, t1004, t1006, t1016, -t1028, 0, 0, 0, 0, 0, 0, t979, t981, t971, t975; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1024, t1026, t1005, t1011, 0, 0, 0, 0, 0, 0, t980, t982, t972, t976; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1025, t1041, t1007, -t1010, 0, 0, 0, 0, 0, 0, -t991, -t993, -t999, -t1010; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1004, t1006, t1016, -t1028, 0, 0, 0, 0, 0, 0, t979, t981, t971, t975; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1002, t998, t992, t996; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t997, t1014, t994, t995; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t991, t993, t999, t1010;];
f_new_reg  = t1;
