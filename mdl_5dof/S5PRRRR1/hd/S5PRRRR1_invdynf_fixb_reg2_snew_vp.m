% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRRRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:03
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRRRR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(2,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'S5PRRRR1_invdynf_fixb_reg2_snew_vp: pkin has to be [2x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:03:46
% EndTime: 2019-12-05 17:03:48
% DurationCPUTime: 1.90s
% Computational Cost: add. (5854->187), mult. (11651->215), div. (0->0), fcn. (9201->8), ass. (0->163)
t1083 = sin(qJ(4));
t1087 = cos(qJ(4));
t1088 = cos(qJ(3));
t1109 = qJD(2) * t1088;
t1084 = sin(qJ(3));
t1110 = qJD(2) * t1084;
t1049 = t1083 * t1110 - t1087 * t1109;
t1048 = qJD(5) + t1049;
t1117 = qJD(5) + t1048;
t1051 = (t1083 * t1088 + t1084 * t1087) * qJD(2);
t1078 = qJD(3) + qJD(4);
t1082 = sin(qJ(5));
t1086 = cos(qJ(5));
t1037 = t1082 * t1051 - t1086 * t1078;
t1116 = t1037 ^ 2;
t1039 = t1086 * t1051 + t1082 * t1078;
t1115 = t1039 ^ 2;
t1114 = t1048 ^ 2;
t1113 = t1049 ^ 2;
t1112 = t1051 ^ 2;
t1111 = t1078 ^ 2;
t1108 = t1039 * t1037;
t1107 = t1051 * t1049;
t1081 = -g(3) + qJDD(1);
t1085 = sin(qJ(2));
t1089 = cos(qJ(2));
t1060 = -t1089 * g(1) + t1085 * t1081;
t1046 = t1084 * g(2) + t1088 * t1060;
t1080 = t1088 ^ 2;
t1090 = qJD(3) ^ 2;
t1091 = qJD(2) ^ 2;
t1068 = -t1080 * t1091 - t1090;
t1034 = t1068 * pkin(2) + t1046;
t1045 = t1088 * g(2) - t1084 * t1060;
t1069 = t1084 * t1091 * t1088;
t1065 = qJDD(3) + t1069;
t1092 = t1065 * pkin(2) + t1045;
t1013 = t1083 * t1034 - t1087 * t1092;
t1106 = t1083 * t1013;
t1059 = t1085 * g(1) + t1089 * t1081;
t1105 = t1085 * t1059;
t1104 = qJD(4) - t1078;
t1103 = qJD(5) - t1048;
t1079 = t1084 ^ 2;
t1102 = t1079 + t1080;
t1101 = t1084 * qJDD(2);
t1100 = qJDD(3) + qJDD(4);
t1099 = qJD(3) * t1110;
t1098 = qJD(3) * t1109;
t1056 = t1098 + t1101;
t1075 = t1088 * qJDD(2);
t1057 = t1075 - t1099;
t1095 = -t1087 * t1056 - t1083 * t1057;
t1018 = -t1049 * qJD(4) - t1095;
t1097 = -t1082 * t1018 + t1086 * t1100;
t1096 = t1083 * t1056 - t1087 * t1057;
t1094 = -t1086 * t1018 - t1082 * t1100;
t1093 = -t1051 * qJD(4) - qJDD(5) - t1096;
t1067 = -t1079 * t1091 - t1090;
t1066 = -qJDD(3) + t1069;
t1064 = t1102 * t1091;
t1063 = t1089 * qJDD(2) - t1085 * t1091;
t1062 = -t1085 * qJDD(2) - t1089 * t1091;
t1061 = t1102 * qJDD(2);
t1058 = t1075 - 0.2e1 * t1099;
t1055 = 0.2e1 * t1098 + t1101;
t1054 = t1089 * t1059;
t1044 = -t1111 - t1112;
t1043 = t1088 * t1066 - t1084 * t1067;
t1042 = -t1084 * t1065 + t1088 * t1068;
t1041 = t1084 * t1066 + t1088 * t1067;
t1040 = t1088 * t1065 + t1084 * t1068;
t1036 = t1089 * t1061 - t1085 * t1064;
t1035 = t1085 * t1061 + t1089 * t1064;
t1033 = t1089 * t1060 - t1105;
t1032 = t1085 * t1060 + t1054;
t1031 = t1059 + (t1057 - t1099) * pkin(2);
t1029 = -t1100 - t1107;
t1028 = t1100 - t1107;
t1027 = -t1111 - t1113;
t1026 = t1089 * t1043 + t1085 * t1055;
t1025 = t1089 * t1042 - t1085 * t1058;
t1024 = t1085 * t1043 - t1089 * t1055;
t1023 = t1085 * t1042 + t1089 * t1058;
t1021 = -t1084 * t1045 + t1088 * t1046;
t1020 = t1088 * t1045 + t1084 * t1046;
t1019 = -t1112 - t1113;
t1017 = -t1114 - t1115;
t1016 = t1089 * t1021 - t1105;
t1015 = t1085 * t1021 + t1054;
t1014 = t1087 * t1034 + t1083 * t1092;
t1012 = t1087 * t1029 - t1083 * t1044;
t1011 = t1083 * t1029 + t1087 * t1044;
t1010 = t1104 * t1049 + t1095;
t1009 = -t1078 * t1049 + t1018;
t1008 = -t1104 * t1051 - t1096;
t1007 = (qJD(4) + t1078) * t1051 + t1096;
t1006 = t1087 * t1013;
t1005 = -t1114 - t1116;
t1004 = t1087 * t1027 - t1083 * t1028;
t1003 = t1083 * t1027 + t1087 * t1028;
t1002 = -t1115 - t1116;
t1001 = t1093 - t1108;
t1000 = -t1093 - t1108;
t999 = t1086 * t1014 - t1082 * t1031;
t998 = -t1082 * t1014 - t1086 * t1031;
t997 = t1103 * t1037 + t1094;
t996 = -t1117 * t1037 - t1094;
t995 = -t1103 * t1039 + t1097;
t994 = t1117 * t1039 - t1097;
t993 = t1087 * t1014 + t1106;
t992 = t1083 * t1014 - t1006;
t991 = -t1084 * t1011 + t1088 * t1012;
t990 = t1088 * t1011 + t1084 * t1012;
t989 = t1087 * t1008 - t1083 * t1010;
t988 = t1083 * t1008 + t1087 * t1010;
t987 = -t1084 * t1003 + t1088 * t1004;
t986 = t1088 * t1003 + t1084 * t1004;
t985 = t1086 * t1001 - t1082 * t1017;
t984 = t1082 * t1001 + t1086 * t1017;
t983 = -t1082 * t1000 + t1086 * t1005;
t982 = t1086 * t1000 + t1082 * t1005;
t981 = t1085 * t1009 + t1089 * t991;
t980 = -t1089 * t1009 + t1085 * t991;
t979 = -t1082 * t998 + t1086 * t999;
t978 = t1082 * t999 + t1086 * t998;
t977 = t1085 * t1007 + t1089 * t987;
t976 = -t1089 * t1007 + t1085 * t987;
t975 = -t1082 * t997 + t1086 * t995;
t974 = t1082 * t995 + t1086 * t997;
t973 = -t1084 * t992 + t1088 * t993;
t972 = t1084 * t993 + t1088 * t992;
t971 = t1087 * t979 + t1106;
t970 = t1083 * t979 - t1006;
t969 = -t1084 * t988 + t1088 * t989;
t968 = t1084 * t989 + t1088 * t988;
t967 = t1083 * t996 + t1087 * t985;
t966 = t1083 * t985 - t1087 * t996;
t965 = t1083 * t994 + t1087 * t983;
t964 = t1083 * t983 - t1087 * t994;
t963 = -t1085 * t1031 + t1089 * t973;
t962 = t1089 * t1031 + t1085 * t973;
t961 = t1085 * t1019 + t1089 * t969;
t960 = -t1089 * t1019 + t1085 * t969;
t959 = t1083 * t1002 + t1087 * t975;
t958 = -t1087 * t1002 + t1083 * t975;
t957 = -t1084 * t970 + t1088 * t971;
t956 = t1084 * t971 + t1088 * t970;
t955 = -t1084 * t966 + t1088 * t967;
t954 = t1084 * t967 + t1088 * t966;
t953 = -t1084 * t964 + t1088 * t965;
t952 = t1084 * t965 + t1088 * t964;
t951 = -t1084 * t958 + t1088 * t959;
t950 = t1084 * t959 + t1088 * t958;
t949 = t1085 * t984 + t1089 * t955;
t948 = t1085 * t955 - t1089 * t984;
t947 = t1085 * t978 + t1089 * t957;
t946 = t1085 * t957 - t1089 * t978;
t945 = t1085 * t982 + t1089 * t953;
t944 = t1085 * t953 - t1089 * t982;
t943 = t1085 * t974 + t1089 * t951;
t942 = t1085 * t951 - t1089 * t974;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1062, -t1063, 0, t1033, 0, 0, 0, 0, 0, 0, t1025, t1026, t1036, t1016, 0, 0, 0, 0, 0, 0, t977, t981, t961, t963, 0, 0, 0, 0, 0, 0, t945, t949, t943, t947; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, -t1040, -t1041, 0, -t1020, 0, 0, 0, 0, 0, 0, -t986, -t990, -t968, -t972, 0, 0, 0, 0, 0, 0, -t952, -t954, -t950, -t956; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1081, 0, 0, 0, 0, 0, 0, t1063, t1062, 0, t1032, 0, 0, 0, 0, 0, 0, t1023, t1024, t1035, t1015, 0, 0, 0, 0, 0, 0, t976, t980, t960, t962, 0, 0, 0, 0, 0, 0, t944, t948, t942, t946; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1062, -t1063, 0, t1033, 0, 0, 0, 0, 0, 0, t1025, t1026, t1036, t1016, 0, 0, 0, 0, 0, 0, t977, t981, t961, t963, 0, 0, 0, 0, 0, 0, t945, t949, t943, t947; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, -t1040, -t1041, 0, -t1020, 0, 0, 0, 0, 0, 0, -t986, -t990, -t968, -t972, 0, 0, 0, 0, 0, 0, -t952, -t954, -t950, -t956; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1081, 0, 0, 0, 0, 0, 0, t1063, t1062, 0, t1032, 0, 0, 0, 0, 0, 0, t1023, t1024, t1035, t1015, 0, 0, 0, 0, 0, 0, t976, t980, t960, t962, 0, 0, 0, 0, 0, 0, t944, t948, t942, t946; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1091, -qJDD(2), 0, t1060, 0, 0, 0, 0, 0, 0, t1042, t1043, t1061, t1021, 0, 0, 0, 0, 0, 0, t987, t991, t969, t973, 0, 0, 0, 0, 0, 0, t953, t955, t951, t957; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1091, 0, t1059, 0, 0, 0, 0, 0, 0, t1058, -t1055, t1064, t1059, 0, 0, 0, 0, 0, 0, -t1007, -t1009, -t1019, t1031, 0, 0, 0, 0, 0, 0, -t982, -t984, -t974, -t978; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, g(2), 0, 0, 0, 0, 0, 0, t1040, t1041, 0, t1020, 0, 0, 0, 0, 0, 0, t986, t990, t968, t972, 0, 0, 0, 0, 0, 0, t952, t954, t950, t956; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1068, t1066, t1075, t1046, 0, 0, 0, 0, 0, 0, t1004, t1012, t989, t993, 0, 0, 0, 0, 0, 0, t965, t967, t959, t971; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1065, t1067, -t1101, t1045, 0, 0, 0, 0, 0, 0, t1003, t1011, t988, t992, 0, 0, 0, 0, 0, 0, t964, t966, t958, t970; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1058, t1055, -t1064, -t1059, 0, 0, 0, 0, 0, 0, t1007, t1009, t1019, -t1031, 0, 0, 0, 0, 0, 0, t982, t984, t974, t978; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1027, t1029, t1008, t1014, 0, 0, 0, 0, 0, 0, t983, t985, t975, t979; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1028, t1044, t1010, -t1013, 0, 0, 0, 0, 0, 0, -t994, -t996, -t1002, -t1013; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1007, t1009, t1019, -t1031, 0, 0, 0, 0, 0, 0, t982, t984, t974, t978; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1005, t1001, t995, t999; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1000, t1017, t997, t998; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t994, t996, t1002, t1013;];
f_new_reg = t1;
