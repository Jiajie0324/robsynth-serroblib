% Calculate minimal parameter regressor of coriolis matrix for
% S5PRRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x25]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:03
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PRRRR1_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(2,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR1_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR1_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'S5PRRRR1_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [2x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:03:26
% EndTime: 2019-12-05 17:03:31
% DurationCPUTime: 1.75s
% Computational Cost: add. (1314->172), mult. (3940->302), div. (0->0), fcn. (4332->8), ass. (0->185)
t158 = cos(qJ(3));
t261 = sin(qJ(4));
t150 = t261 * t158;
t155 = sin(qJ(3));
t262 = cos(qJ(4));
t151 = t262 * t155;
t132 = -t151 - t150;
t264 = -t132 / 0.2e1;
t208 = t261 * t155;
t209 = t262 * t158;
t130 = t208 - t209;
t214 = qJD(3) + qJD(4);
t276 = t214 * t132;
t178 = t130 * t276;
t277 = 0.2e1 * t132;
t93 = t214 * t130;
t129 = t132 ^ 2;
t213 = -t130 ^ 2 + t129;
t224 = qJD(2) * t158;
t211 = pkin(2) * t224;
t191 = t130 * t211;
t159 = cos(qJ(2));
t164 = -t209 / 0.2e1 + t208 / 0.2e1;
t72 = (-t130 / 0.2e1 + t164) * t159;
t232 = t72 * qJD(1);
t275 = t232 - t191;
t84 = (t130 * t158 - t132 * t155) * pkin(2);
t274 = -qJD(2) * t84 + t232;
t190 = t132 * t211;
t128 = t151 / 0.2e1 + t150 / 0.2e1;
t71 = (t264 - t128) * t159;
t233 = t71 * qJD(1);
t273 = t233 - t190;
t174 = t130 * t155 + t132 * t158;
t83 = t174 * pkin(2);
t272 = -qJD(2) * t83 + t233;
t156 = sin(qJ(2));
t116 = t130 * t156;
t154 = sin(qJ(5));
t249 = t154 * t116;
t157 = cos(qJ(5));
t95 = t157 * t159 - t249;
t172 = (t95 / 0.2e1 + t249 / 0.2e1) * t132;
t115 = t159 * t132;
t252 = t115 * t157;
t9 = -t252 / 0.2e1 + t172;
t256 = t9 * qJD(1);
t61 = t157 * t83;
t271 = -t61 * qJD(2) - t256;
t244 = t157 * t116;
t96 = -t154 * t159 - t244;
t171 = (t96 / 0.2e1 + t244 / 0.2e1) * t132;
t253 = t115 * t154;
t12 = t253 / 0.2e1 + t171;
t251 = t12 * qJD(1);
t260 = pkin(2) * t154;
t60 = t174 * t260;
t270 = t60 * qJD(2) - t251;
t269 = -t154 * t190 + t251;
t268 = t157 * t190 + t256;
t247 = t154 * t157;
t207 = qJD(2) * t247;
t153 = t157 ^ 2;
t265 = t154 ^ 2;
t85 = (-t265 / 0.2e1 + t153 / 0.2e1) * t132;
t267 = t129 * t207 + t214 * t85;
t212 = -t153 + t265;
t58 = -0.2e1 * t132 * t207 + t212 * t214;
t263 = t159 / 0.2e1;
t259 = pkin(2) * t157;
t258 = pkin(2) * t158;
t257 = t155 * pkin(2);
t255 = t95 * t130;
t254 = t96 * t130;
t250 = t132 * t157;
t117 = t159 * t130;
t248 = t154 * t117;
t246 = t156 * t154;
t245 = t156 * t157;
t243 = t157 * t117;
t114 = t132 * t156;
t203 = t114 * t264;
t180 = t156 / 0.2e1 + t203;
t202 = t248 / 0.2e1;
t17 = t202 + t254 / 0.2e1 + t180 * t157;
t242 = t17 * qJD(1);
t201 = t243 / 0.2e1;
t18 = t201 - t255 / 0.2e1 - t180 * t154;
t241 = t18 * qJD(1);
t163 = t261 * t130 / 0.2e1 + t262 * t264;
t160 = t155 / 0.2e1 + t163;
t29 = t160 * t260;
t240 = t29 * qJD(2);
t32 = t160 * t259;
t239 = t32 * qJD(2);
t37 = t213 * t154;
t238 = t37 * qJD(2);
t38 = t213 * t157;
t237 = t38 * qJD(2);
t236 = t213 * qJD(2);
t229 = t85 * qJD(2);
t86 = t154 * t130;
t228 = t86 * qJD(2);
t89 = t157 * t130;
t70 = t89 * qJD(2);
t92 = t212 * t129;
t227 = t92 * qJD(2);
t226 = qJD(2) * t130;
t225 = qJD(2) * t132;
t223 = qJD(5) * t154;
t222 = qJD(5) * t157;
t221 = t128 * qJD(2);
t220 = t132 * qJD(4);
t144 = -t155 ^ 2 + t158 ^ 2;
t219 = t144 * qJD(2);
t218 = t155 * qJD(3);
t217 = t156 * qJD(2);
t216 = t158 * qJD(3);
t215 = t159 * qJD(2);
t210 = qJD(4) * t258;
t206 = t130 * t223;
t205 = t130 * t222;
t97 = t130 * t225;
t149 = t154 * t222;
t204 = t155 * t224;
t200 = qJD(5) * t262;
t199 = qJD(5) * t261;
t198 = t262 * qJD(3);
t197 = t262 * qJD(4);
t196 = t261 * qJD(3);
t195 = t261 * qJD(4);
t193 = t214 * t157;
t192 = t214 * t154;
t189 = qJD(5) + t226;
t188 = pkin(2) * t195;
t187 = pkin(2) * t198;
t186 = pkin(2) * t196;
t183 = t154 * t200;
t182 = t157 * t200;
t181 = t154 * t196;
t179 = t154 * t193;
t177 = t157 * t192;
t173 = t132 * t189;
t170 = t189 * t258;
t169 = t157 * t173;
t44 = -qJD(5) * t128 + t97;
t168 = t179 * t277;
t166 = -t198 - t197;
t165 = -t196 - t195;
t161 = pkin(2) * qJD(3) * (t130 * t262 + t132 * t261);
t142 = t154 * t188;
t138 = t212 * qJD(5);
t90 = t214 * t128;
t74 = -t128 * t159 + t132 * t263;
t73 = t130 * t263 + t159 * t164;
t68 = t85 * qJD(5);
t64 = t72 * qJD(2);
t62 = t71 * qJD(2);
t54 = t222 + t70;
t53 = -t223 - t228;
t42 = t114 * t157;
t41 = t114 * t154;
t31 = t157 * t257 / 0.2e1 - t163 * t259;
t30 = -t154 * t257 / 0.2e1 + t163 * t260;
t28 = t177 - t229;
t27 = -t179 + t229;
t26 = 0.2e1 * t154 * t169;
t25 = -t153 * t97 - t68;
t24 = t74 * qJD(2) + t116 * t214;
t23 = t73 * qJD(2) - t114 * t214;
t22 = qJD(5) * t89 - t237;
t21 = -qJD(5) * t86 + t238;
t20 = -t254 / 0.2e1 + t114 * t250 / 0.2e1 + t202 + t245 / 0.2e1;
t19 = t255 / 0.2e1 + t154 * t203 + t201 - t246 / 0.2e1;
t16 = -t68 + (t153 * t225 - t179) * t130;
t15 = -t154 * t276 + t237;
t14 = -t132 * t193 - t238;
t13 = t212 * t93 + (qJD(5) - t226) * t247 * t277;
t11 = -t253 / 0.2e1 + t171;
t10 = t252 / 0.2e1 + t172;
t4 = t9 * qJD(2);
t3 = t12 * qJD(2);
t2 = t11 * qJD(2) - t42 * qJD(5) - t116 * t192;
t1 = t10 * qJD(2) - t41 * qJD(5) + t116 * t193;
t5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, -t217, -t215, 0, 0, 0, 0, 0, -t158 * t217 - t159 * t218, t155 * t217 - t159 * t216, 0, 0, 0, 0, 0, t130 * t217 + t214 * t74, -t132 * t217 + t214 * t73, 0, 0, 0, 0, 0, ((t245 + t248) * t130 + t132 * t253) * qJD(2) + t20 * qJD(5) + t214 * t10, (-(-t243 + t246) * t130 + t115 * t250) * qJD(2) + t19 * qJD(5) + t214 * t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, -t155 * t215 - t156 * t216, t156 * t218 - t158 * t215, 0, 0, 0, 0, 0, t24, t23, 0, 0, 0, 0, 0, t1, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, t23, 0, 0, 0, 0, 0, t1, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t20 * qJD(2) - t96 * qJD(5) - t214 * t41, t19 * qJD(2) + t95 * qJD(5) - t214 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t214 * t71, -t214 * t72, 0, 0, 0, 0, 0, -t17 * qJD(5) + t214 * t9, -t18 * qJD(5) + t12 * t214; 0, 0, 0, 0, t155 * t216, t144 * qJD(3), 0, 0, 0, 0, 0, t178, -t214 * t213, 0, 0, 0, qJD(3) * t83 + t132 * t210, qJD(3) * t84 + t130 * t210, -t129 * t149 + t153 * t178, t92 * qJD(5) - t130 * t168, t132 * t206 + t214 * t38, t132 * t205 - t214 * t37, -t178, t61 * qJD(3) + (t157 * t220 + t206) * t258, -t60 * qJD(3) + (-t154 * t220 + t205) * t258; 0, 0, 0, 0, t204, t219, t216, -t218, 0, 0, 0, t97, -t236, -t93, t276, 0, -t272, -t274, t16, t13, t15, t14, -t44, t31 * qJD(5) + t154 * t161 - t271, t30 * qJD(5) + t157 * t161 - t270; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, -t236, -t93, t276, 0, -t273, -t275, t16, t13, t15, t14, -t44, t268, t269; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t267, t177 * t277 + t227, t154 * t173, t169, t90, t31 * qJD(3) + t154 * t170 - t242, t30 * qJD(3) + t157 * t170 - t241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, t64, 0, 0, 0, 0, 0, -t4, -t3; 0, 0, 0, 0, -t204, -t219, 0, 0, 0, 0, 0, -t97, t236, 0, 0, 0, t272, t274, t25, t26, t22, t21, t44, -qJD(5) * t32 + t271, qJD(5) * t29 + t270; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t188, -pkin(2) * t197, t149, -t138, 0, 0, 0, (-t157 * t195 - t183) * pkin(2), -pkin(2) * t182 + t142; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t165 * pkin(2), t166 * pkin(2), t149, -t138, 0, 0, 0, (t157 * t165 - t183) * pkin(2), t142 + (t181 - t182) * pkin(2); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, -t58, t54, t53, -t221, -t239 + (t154 * t166 - t157 * t199) * pkin(2), t240 + (t154 * t199 + t157 * t166) * pkin(2); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, t64, 0, 0, 0, 0, 0, -t4, -t3; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t97, t236, 0, 0, 0, t273, t275, t25, t26, t22, t21, t44, -t268, -t269; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t186, t187, t149, -t138, 0, 0, 0, t157 * t186, -pkin(2) * t181; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t149, -t138, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, -t58, t54, t53, -t221, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t17 * qJD(2), t18 * qJD(2); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t267, -t168 - t227, -t154 * t97 - t214 * t89, -t157 * t97 + t214 * t86, t90, qJD(3) * t32 - t154 * t191 + t242, -qJD(3) * t29 - t157 * t191 + t241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, t58, -t70, t228, t221, t154 * t187 + t239, t157 * t187 - t240; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, t58, -t70, t228, t221, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t5;
