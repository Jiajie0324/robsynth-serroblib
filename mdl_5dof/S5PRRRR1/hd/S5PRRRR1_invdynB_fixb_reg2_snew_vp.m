% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-07-18 13:29
% Revision: 08c8d617a845f5dd194efdf9aca2774760f7818f (2019-07-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRRRR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(2,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'S5PRRRR1_invdynB_fixb_reg2_snew_vp: pkin has to be [2x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-07-18 13:28:55
% EndTime: 2019-07-18 13:29:04
% DurationCPUTime: 4.88s
% Computational Cost: add. (7886->368), mult. (15799->572), div. (0->0), fcn. (12385->8), ass. (0->286)
t434 = g(3) - qJDD(1);
t439 = sin(qJ(2));
t443 = cos(qJ(2));
t404 = -g(1) * t443 - t439 * t434;
t438 = sin(qJ(3));
t442 = cos(qJ(3));
t384 = t438 * g(2) + t442 * t404;
t433 = t442 ^ 2;
t445 = qJD(2) ^ 2;
t426 = t433 * t445;
t444 = qJD(3) ^ 2;
t415 = -t426 - t444;
t364 = pkin(2) * t415 + t384;
t437 = sin(qJ(4));
t441 = cos(qJ(4));
t383 = -t442 * g(2) + t438 * t404;
t416 = t438 * t445 * t442;
t410 = qJDD(3) + t416;
t446 = pkin(2) * t410 - t383;
t321 = t364 * t437 - t441 * t446;
t311 = t441 * t321;
t322 = t441 * t364 + t437 * t446;
t276 = -t322 * t437 + t311;
t504 = t276 * t438;
t503 = t276 * t442;
t436 = sin(qJ(5));
t469 = t438 * t441;
t471 = t437 * t442;
t393 = (t469 + t471) * qJD(2);
t431 = qJD(3) + qJD(4);
t440 = cos(qJ(5));
t369 = t393 * t436 - t440 * t431;
t371 = t393 * t440 + t431 * t436;
t331 = t371 * t369;
t463 = qJD(2) * qJD(3);
t454 = t442 * t463;
t462 = qJDD(2) * t438;
t400 = t454 + t462;
t424 = t442 * qJDD(2);
t455 = t438 * t463;
t401 = t424 - t455;
t452 = t437 * t400 - t441 * t401;
t334 = -qJD(4) * t393 - t452;
t448 = qJDD(5) - t334;
t498 = -t331 + t448;
t502 = t436 * t498;
t467 = t441 * t442;
t472 = t437 * t438;
t391 = (-t467 + t472) * qJD(2);
t359 = t393 * t391;
t430 = qJDD(3) + qJDD(4);
t497 = -t359 + t430;
t501 = t437 * t497;
t500 = t440 * t498;
t499 = t441 * t497;
t447 = qJD(4) * t391 - t400 * t441 - t401 * t437;
t302 = -t369 * qJD(5) + t436 * t430 - t440 * t447;
t388 = qJD(5) + t391;
t344 = t388 * t369;
t288 = -t344 + t302;
t386 = t431 * t391;
t496 = -t386 - t447;
t403 = g(1) * t439 - t434 * t443;
t396 = t443 * t403;
t361 = t404 * t439 + t396;
t495 = t401 - t455;
t453 = -t440 * t430 - t436 * t447;
t285 = (qJD(5) - t388) * t371 + t453;
t314 = (qJD(4) - t431) * t393 + t452;
t367 = t369 ^ 2;
t368 = t371 ^ 2;
t387 = t388 ^ 2;
t389 = t391 ^ 2;
t390 = t393 ^ 2;
t429 = t431 ^ 2;
t318 = -t386 + t447;
t270 = -t314 * t437 + t318 * t441;
t494 = pkin(2) * t270;
t493 = pkin(2) * t442;
t492 = t443 * g(2);
t296 = t331 + t448;
t491 = t296 * t436;
t490 = t296 * t440;
t489 = t321 * t437;
t488 = t321 * t440;
t351 = t359 + t430;
t486 = t351 * t437;
t485 = t351 * t441;
t484 = t388 * t436;
t483 = t388 * t440;
t482 = t403 * t439;
t481 = t403 * t442;
t479 = t410 * t438;
t478 = t410 * t442;
t411 = qJDD(3) - t416;
t477 = t411 * t438;
t476 = t411 * t442;
t475 = t431 * t437;
t474 = t431 * t441;
t432 = t438 ^ 2;
t473 = t432 * t445;
t470 = t438 * t439;
t468 = t438 * t443;
t466 = t432 + t433;
t461 = qJDD(2) * t439;
t460 = qJDD(2) * t443;
t459 = t437 * t331;
t458 = t441 * t331;
t457 = t439 * t359;
t456 = t443 * t359;
t277 = t441 * t322 + t489;
t362 = t443 * t404 - t482;
t451 = t439 * t416;
t450 = t443 * t416;
t357 = pkin(2) * t495 + t403;
t291 = t322 * t436 + t440 * t357;
t292 = t322 * t440 - t357 * t436;
t241 = t291 * t440 - t292 * t436;
t242 = t291 * t436 + t292 * t440;
t449 = t383 * t442 - t384 * t438;
t339 = t383 * t438 + t384 * t442;
t435 = qJ(1) * g(2);
t428 = t439 * g(2);
t414 = t426 - t444;
t413 = -t444 - t473;
t412 = t444 - t473;
t409 = t426 - t473;
t408 = t426 + t473;
t407 = -t439 * t445 + t460;
t406 = t443 * t445 + t461;
t405 = t466 * qJDD(2);
t402 = t424 - 0.2e1 * t455;
t399 = 0.2e1 * t454 + t462;
t398 = t466 * t463;
t382 = -t390 + t429;
t381 = t389 - t429;
t380 = t400 * t442 - t432 * t463;
t379 = -t401 * t438 - t433 * t463;
t378 = -t390 - t429;
t377 = -t413 * t438 - t476;
t376 = -t412 * t438 + t478;
t375 = t415 * t442 - t479;
t374 = t414 * t442 - t477;
t373 = -t413 * t442 + t477;
t372 = -t415 * t438 - t478;
t366 = t405 * t443 - t408 * t439;
t365 = t405 * t439 + t408 * t443;
t360 = -t399 * t438 + t402 * t442;
t356 = -t390 + t389;
t349 = -t429 - t389;
t348 = t377 * t443 + t399 * t439;
t347 = t375 * t443 - t402 * t439;
t346 = t377 * t439 - t399 * t443;
t345 = t375 * t439 + t402 * t443;
t343 = -t368 + t387;
t342 = t367 - t387;
t341 = (-t391 * t441 + t393 * t437) * t431;
t340 = (-t391 * t437 - t393 * t441) * t431;
t336 = -t389 - t390;
t330 = -t368 + t367;
t329 = -t368 - t387;
t328 = t381 * t441 - t486;
t327 = -t382 * t437 + t499;
t326 = t381 * t437 + t485;
t325 = t382 * t441 + t501;
t324 = t339 * t443 - t482;
t323 = t339 * t439 + t396;
t320 = -t378 * t437 - t485;
t319 = t378 * t441 - t486;
t313 = (qJD(4) + t431) * t393 + t452;
t310 = -t387 - t367;
t309 = -t393 * t475 - t441 * t447;
t308 = t393 * t474 - t437 * t447;
t307 = -t334 * t437 + t391 * t474;
t306 = t334 * t441 + t391 * t475;
t305 = t349 * t441 - t501;
t304 = t349 * t437 + t499;
t303 = t367 + t368;
t301 = -qJD(5) * t371 - t453;
t300 = (-t369 * t440 + t371 * t436) * t388;
t299 = (t369 * t436 + t371 * t440) * t388;
t298 = -t340 * t438 + t341 * t442;
t294 = -pkin(2) * t313 + t357 * t441;
t293 = -pkin(2) * t496 - t357 * t437;
t289 = -t344 - t302;
t287 = (-qJD(5) - t388) * t371 - t453;
t284 = -t326 * t438 + t328 * t442;
t283 = -t325 * t438 + t327 * t442;
t282 = -pkin(2) * t319 + t322;
t281 = t302 * t440 - t371 * t484;
t280 = -t302 * t436 - t371 * t483;
t279 = -t301 * t436 + t369 * t483;
t278 = -t301 * t440 - t369 * t484;
t274 = -t319 * t438 + t320 * t442;
t273 = -t319 * t442 - t320 * t438;
t272 = -t314 * t441 - t318 * t437;
t271 = -t313 * t441 - t437 * t496;
t269 = -t313 * t437 + t441 * t496;
t268 = -t293 * t438 - t357 * t467;
t267 = -t294 * t438 - t357 * t471;
t266 = -pkin(2) * t304 + t321;
t265 = t300 * t441 + t437 * t448;
t264 = t300 * t437 - t441 * t448;
t263 = t342 * t440 - t491;
t262 = -t343 * t436 + t500;
t261 = -t342 * t436 - t490;
t260 = -t343 * t440 - t502;
t259 = -t308 * t438 + t309 * t442;
t258 = -t306 * t438 + t307 * t442;
t257 = -t304 * t438 + t305 * t442;
t256 = -t304 * t442 - t305 * t438;
t255 = -t329 * t436 - t490;
t254 = t329 * t440 - t491;
t253 = t310 * t440 - t502;
t252 = t310 * t436 + t500;
t251 = -t292 * t437 + t311 * t440;
t250 = -t291 * t437 + t311 * t436;
t249 = -pkin(2) * t336 + t277;
t248 = t281 * t441 + t459;
t247 = t279 * t441 - t459;
t246 = t281 * t437 - t458;
t245 = t279 * t437 + t458;
t244 = t274 * t443 + t439 * t496;
t243 = t274 * t439 - t443 * t496;
t239 = t257 * t443 + t313 * t439;
t238 = t257 * t439 - t313 * t443;
t237 = t287 * t440 - t288 * t436;
t236 = -t285 * t440 - t289 * t436;
t235 = -t287 * t436 - t288 * t440;
t234 = -t285 * t436 + t289 * t440;
t233 = t277 * t442 + t504;
t232 = -t277 * t438 + t503;
t231 = t242 * t441 + t489;
t230 = t242 * t437 - t311;
t229 = -t270 * t438 + t272 * t442;
t228 = -t269 * t438 + t271 * t442;
t227 = -t270 * t442 - t272 * t438;
t226 = t263 * t441 - t285 * t437;
t225 = t262 * t441 - t289 * t437;
t224 = t263 * t437 + t285 * t441;
t223 = t262 * t437 + t289 * t441;
t222 = -t264 * t438 + t265 * t442;
t221 = t255 * t441 + t288 * t437;
t220 = t255 * t437 - t288 * t441;
t219 = t253 * t441 - t287 * t437;
t218 = t253 * t437 + t287 * t441;
t217 = t233 * t443 - t357 * t439;
t216 = t233 * t439 + t357 * t443;
t215 = t237 * t441 - t330 * t437;
t214 = t237 * t437 + t330 * t441;
t213 = -t249 * t438 + t503;
t212 = t229 * t443 + t336 * t439;
t211 = t229 * t439 - t336 * t443;
t210 = -pkin(2) * t254 + t292 * t441 + t437 * t488;
t209 = t236 * t441 - t303 * t437;
t208 = t236 * t437 + t303 * t441;
t207 = -pkin(2) * t252 + t291 * t441 + t436 * t489;
t206 = -pkin(2) * t220 - t321 * t436;
t205 = -pkin(2) * t218 + t488;
t204 = -t246 * t438 + t248 * t442;
t203 = -t245 * t438 + t247 * t442;
t202 = -pkin(2) * t234 + t241 * t437;
t201 = -t210 * t438 + t251 * t442;
t200 = -t207 * t438 + t250 * t442;
t199 = -pkin(2) * t208 - t242;
t198 = -t230 * t438 + t231 * t442;
t197 = -t230 * t442 - t231 * t438;
t196 = -t224 * t438 + t226 * t442;
t195 = -t223 * t438 + t225 * t442;
t194 = -t220 * t438 + t221 * t442;
t193 = -t220 * t442 - t221 * t438;
t192 = -t218 * t438 + t219 * t442;
t191 = -t218 * t442 - t219 * t438;
t190 = -t214 * t438 + t215 * t442;
t189 = -t202 * t438 + t241 * t467;
t188 = -t208 * t438 + t209 * t442;
t187 = -t208 * t442 - t209 * t438;
t186 = t194 * t443 + t254 * t439;
t185 = t194 * t439 - t254 * t443;
t184 = t198 * t443 - t241 * t439;
t183 = t198 * t439 + t241 * t443;
t182 = t192 * t443 + t252 * t439;
t181 = t192 * t439 - t252 * t443;
t180 = t188 * t443 + t234 * t439;
t179 = t188 * t439 - t234 * t443;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t406, -t407, 0, t362, 0, 0, 0, 0, 0, 0, t347, t348, t366, t324, 0, 0, 0, 0, 0, 0, t239, t244, t212, t217, 0, 0, 0, 0, 0, 0, t182, t186, t180, t184; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t372, t373, 0, t449, 0, 0, 0, 0, 0, 0, t256, t273, t227, t232, 0, 0, 0, 0, 0, 0, t191, t193, t187, t197; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t434, 0, 0, 0, 0, 0, 0, t407, -t406, 0, t361, 0, 0, 0, 0, 0, 0, t345, t346, t365, t323, 0, 0, 0, 0, 0, 0, t238, t243, t211, t216, 0, 0, 0, 0, 0, 0, t181, t185, t179, t183; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, 0, -t434, g(2), t435, 0, 0, t407, 0, -t406, 0, t428, t492, -t361, t435, t380 * t443 - t451, t360 * t443 - t409 * t439, t376 * t443 + t438 * t461, t379 * t443 + t451, t374 * t443 + t424 * t439, qJDD(3) * t439 + t398 * t443, -qJ(1) * t372 - t383 * t439 - t396 * t438, -qJ(1) * t373 - t384 * t439 - t396 * t442, t443 * t449, -qJ(1) * t449, t259 * t443 + t457, t228 * t443 - t356 * t439, t283 * t443 - t318 * t439, t258 * t443 - t457, t284 * t443 - t314 * t439, t298 * t443 + t430 * t439, -qJ(1) * t256 - t266 * t439 + t267 * t443, -qJ(1) * t273 + t268 * t443 - t282 * t439, -qJ(1) * t227 + t213 * t443 + t439 * t494, -qJ(1) * t232 + (-t276 * t439 - t357 * t468) * pkin(2), t204 * t443 - t280 * t439, t190 * t443 - t235 * t439, t195 * t443 - t260 * t439, t203 * t443 - t278 * t439, t196 * t443 - t261 * t439, t222 * t443 - t299 * t439, -qJ(1) * t191 + t200 * t443 - t205 * t439, -qJ(1) * t193 + t201 * t443 - t206 * t439, -qJ(1) * t187 + t189 * t443 - t199 * t439, -qJ(1) * t197 + (t230 * t439 - t241 * t468) * pkin(2); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t434, 0, -g(1), -qJ(1) * g(1), 0, 0, 0, 0, 0, -qJDD(2), -pkin(1) * t407 - qJ(1) * t406 - t403, pkin(1) * t406 - qJ(1) * t407 + t404, 0, -pkin(1) * t361 + qJ(1) * t362, (-t400 - t454) * t438, -t399 * t442 - t402 * t438, -t412 * t442 - t479, -t495 * t442, -t414 * t438 - t476, 0, -pkin(1) * t345 + qJ(1) * t347 - t481, -pkin(1) * t346 + qJ(1) * t348 + t403 * t438, -pkin(1) * t365 + qJ(1) * t366 - t339, -pkin(1) * t323 + qJ(1) * t324, -t308 * t442 - t309 * t438, -t269 * t442 - t271 * t438, -t325 * t442 - t327 * t438, -t306 * t442 - t307 * t438, -t326 * t442 - t328 * t438, -t340 * t442 - t341 * t438, -pkin(1) * t238 + qJ(1) * t239 - t294 * t442 + t357 * t472, -pkin(1) * t243 + qJ(1) * t244 - t293 * t442 + t357 * t469, -pkin(1) * t211 + qJ(1) * t212 - t249 * t442 - t504, -pkin(1) * t216 + qJ(1) * t217 - t357 * t493, -t246 * t442 - t248 * t438, -t214 * t442 - t215 * t438, -t223 * t442 - t225 * t438, -t245 * t442 - t247 * t438, -t224 * t442 - t226 * t438, -t264 * t442 - t265 * t438, -pkin(1) * t181 + qJ(1) * t182 - t207 * t442 - t250 * t438, -pkin(1) * t185 + qJ(1) * t186 - t210 * t442 - t251 * t438, -pkin(1) * t179 + qJ(1) * t180 - t202 * t442 - t241 * t469, -pkin(1) * t183 + qJ(1) * t184 - t241 * t493; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, t406, 0, t407, 0, -t492, t428, t362, -pkin(1) * g(2), t380 * t439 + t450, t360 * t439 + t409 * t443, t376 * t439 - t438 * t460, t379 * t439 - t450, t374 * t439 - t424 * t443, -qJDD(3) * t443 + t398 * t439, pkin(1) * t372 + t383 * t443 - t403 * t470, pkin(1) * t373 + t384 * t443 - t439 * t481, t439 * t449, pkin(1) * t449, t259 * t439 - t456, t228 * t439 + t356 * t443, t283 * t439 + t318 * t443, t258 * t439 + t456, t284 * t439 + t314 * t443, t298 * t439 - t430 * t443, pkin(1) * t256 + t266 * t443 + t267 * t439, pkin(1) * t273 + t268 * t439 + t282 * t443, pkin(1) * t227 + t213 * t439 - t443 * t494, pkin(1) * t232 + (t276 * t443 - t357 * t470) * pkin(2), t204 * t439 + t280 * t443, t190 * t439 + t235 * t443, t195 * t439 + t260 * t443, t203 * t439 + t278 * t443, t196 * t439 + t261 * t443, t222 * t439 + t299 * t443, pkin(1) * t191 + t200 * t439 + t205 * t443, pkin(1) * t193 + t201 * t439 + t206 * t443, pkin(1) * t187 + t189 * t439 + t199 * t443, pkin(1) * t197 + (-t230 * t443 - t241 * t470) * pkin(2);];
tauB_reg  = t1;
