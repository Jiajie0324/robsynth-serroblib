% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PRRRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-07-18 13:29
% Revision: 08c8d617a845f5dd194efdf9aca2774760f7818f (2019-07-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PRRRR1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(2,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR1_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR1_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRR1_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRR1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'S5PRRRR1_invdynm_fixb_reg2_snew_vp: pkin has to be [2x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-07-18 13:29:04
% EndTime: 2019-07-18 13:29:11
% DurationCPUTime: 7.34s
% Computational Cost: add. (15562->469), mult. (31325->582), div. (0->0), fcn. (24442->8), ass. (0->375)
t827 = g(3) - qJDD(1);
t832 = sin(qJ(2));
t836 = cos(qJ(2));
t798 = g(1) * t836 + t832 * t827;
t831 = sin(qJ(3));
t835 = cos(qJ(3));
t778 = t831 * g(2) - t835 * t798;
t826 = t835 ^ 2;
t838 = qJD(2) ^ 2;
t819 = t826 * t838;
t837 = qJD(3) ^ 2;
t809 = -t819 - t837;
t752 = pkin(2) * t809 + t778;
t830 = sin(qJ(4));
t834 = cos(qJ(4));
t858 = t835 * g(2) + t831 * t798;
t810 = t831 * t838 * t835;
t881 = qJDD(3) + t810;
t839 = pkin(2) * t881 + t858;
t697 = t752 * t830 - t834 * t839;
t685 = t834 * t697;
t891 = t834 * t752;
t698 = t830 * t839 + t891;
t644 = -t698 * t830 + t685;
t938 = t644 * t835;
t937 = t831 * t644;
t829 = sin(qJ(5));
t897 = t830 * t835;
t788 = (t831 * t834 + t897) * qJD(2);
t824 = qJD(3) + qJD(4);
t833 = cos(qJ(5));
t756 = t788 * t829 - t833 * t824;
t758 = t788 * t833 + t824 * t829;
t706 = t758 * t756;
t883 = qJD(2) * qJD(3);
t817 = t835 * t883;
t882 = t831 * qJDD(2);
t794 = t817 + t882;
t818 = t835 * qJDD(2);
t874 = t831 * t883;
t795 = t818 - t874;
t863 = t830 * t794 - t834 * t795;
t710 = -qJD(4) * t788 - t863;
t707 = qJDD(5) - t710;
t932 = -t706 + t707;
t936 = t829 * t932;
t890 = t834 * t835;
t898 = t830 * t831;
t786 = (-t890 + t898) * qJD(2);
t746 = t788 * t786;
t823 = qJDD(3) + qJDD(4);
t930 = -t746 + t823;
t935 = t830 * t930;
t934 = t833 * t932;
t933 = t834 * t930;
t711 = -qJD(4) * t786 + t794 * t834 + t795 * t830;
t780 = t824 * t786;
t931 = t711 - t780;
t797 = g(1) * t832 - t827 * t836;
t790 = t836 * t797;
t929 = -t798 * t832 + t790;
t928 = t795 - t874;
t688 = (qJD(4) - t824) * t788 + t863;
t754 = t756 ^ 2;
t755 = t758 ^ 2;
t783 = qJD(5) + t786;
t781 = t783 ^ 2;
t784 = t786 ^ 2;
t785 = t788 ^ 2;
t822 = t824 ^ 2;
t927 = pkin(1) * g(2);
t718 = t835 * t778 - t831 * t858;
t926 = pkin(1) * (t718 * t832 + t790);
t925 = pkin(1) * t929;
t745 = pkin(2) * t928 + t797;
t663 = t698 * t829 + t833 * t745;
t664 = t698 * t833 - t745 * t829;
t597 = t663 * t829 + t664 * t833;
t584 = t597 * t830 - t685;
t924 = pkin(2) * t584;
t692 = t711 + t780;
t638 = -t688 * t830 - t692 * t834;
t923 = pkin(2) * t638;
t922 = pkin(2) * t644;
t921 = pkin(2) * t831;
t920 = pkin(2) * t832;
t919 = pkin(2) * t835;
t668 = t706 + t707;
t918 = t668 * t829;
t917 = t668 * t833;
t916 = t697 * t830;
t740 = t746 + t823;
t914 = t740 * t830;
t913 = t740 * t834;
t912 = t783 * t829;
t911 = t783 * t833;
t910 = t788 * t824;
t909 = t797 * t832;
t907 = t881 * t831;
t906 = t881 * t835;
t805 = qJDD(3) - t810;
t905 = t805 * t831;
t904 = t805 * t835;
t903 = t824 * t830;
t902 = t824 * t834;
t825 = t831 ^ 2;
t901 = t825 * t838;
t900 = t829 * t697;
t899 = t830 * t745;
t896 = t831 * t797;
t895 = t831 * t832;
t894 = t833 * t697;
t596 = t663 * t833 - t664 * t829;
t893 = t834 * t596;
t892 = t834 * t745;
t889 = t835 * t797;
t645 = t834 * t698 + t916;
t714 = -t784 - t785;
t611 = -pkin(2) * t714 + t645;
t563 = -t611 * t831 + t938;
t888 = t836 * t563 + t638 * t920;
t880 = t596 * t921;
t887 = t584 * t920 - t836 * t880;
t879 = t745 * t921;
t886 = -t644 * t920 - t836 * t879;
t885 = t825 + t826;
t878 = t830 * t706;
t877 = t834 * t706;
t876 = t832 * t746;
t875 = t836 * t746;
t585 = t597 * t834 + t916;
t535 = -t584 * t831 + t585 * t835;
t594 = t596 * t919;
t873 = -pkin(1) * (t535 * t832 + t596 * t836) - t594;
t587 = t645 * t835 + t937;
t738 = t745 * t919;
t872 = -pkin(1) * (t587 * t832 + t745 * t836) - t738;
t865 = -t829 * t711 + t833 * t823;
t656 = (-qJD(5) + t783) * t758 + t865;
t853 = -t833 * t711 - t829 * t823;
t676 = -qJD(5) * t756 - t853;
t723 = t783 * t756;
t659 = t676 + t723;
t588 = t656 * t829 - t659 * t833;
t545 = -pkin(2) * t588 + t596 * t830;
t523 = -t545 * t831 + t596 * t890;
t590 = t656 * t833 + t659 * t829;
t677 = t754 + t755;
t558 = t590 * t830 + t677 * t834;
t536 = pkin(2) * t558 + t597;
t871 = t836 * t523 + t536 * t832;
t684 = -t781 - t754;
t614 = t684 * t829 + t934;
t557 = -pkin(2) * t614 + t663 * t834 + t830 * t900;
t612 = -t663 * t830 + t685 * t829;
t538 = -t557 * t831 + t612 * t835;
t615 = t684 * t833 - t936;
t675 = -qJD(5) * t758 + t865;
t724 = t758 * t783;
t657 = t675 - t724;
t569 = t615 * t830 + t657 * t834;
t555 = pkin(2) * t569 - t894;
t870 = t836 * t538 + t555 * t832;
t704 = -t755 - t781;
t616 = t704 * t833 - t918;
t560 = -pkin(2) * t616 + t664 * t834 + t830 * t894;
t613 = -t664 * t830 + t685 * t833;
t544 = -t560 * t831 + t613 * t835;
t617 = -t704 * t829 - t917;
t660 = (qJD(5) + t783) * t756 + t853;
t571 = t617 * t830 + t660 * t834;
t556 = pkin(2) * t571 + t900;
t869 = t836 * t544 + t556 * t832;
t729 = -t822 - t784;
t678 = t729 * t830 + t933;
t633 = -pkin(2) * t678 + t697;
t687 = (qJD(4) + t824) * t788 + t863;
t666 = -pkin(2) * t687 + t892;
t634 = -t666 * t831 - t745 * t897;
t868 = -t633 * t832 + t836 * t634;
t665 = -pkin(2) * t931 - t899;
t635 = -t665 * t831 - t745 * t890;
t769 = -t785 - t822;
t693 = t769 * t834 - t914;
t650 = t891 + t830 * t858 + (t830 * t881 - t693) * pkin(2);
t867 = t836 * t635 - t650 * t832;
t866 = t835 * t666 - t745 * t898;
t864 = -t778 * t832 - t835 * t790;
t749 = -t836 * t798 - t909;
t862 = t832 * t810;
t861 = t836 * t810;
t766 = t809 * t835 - t907;
t796 = t818 - 0.2e1 * t874;
t860 = -pkin(1) * (t766 * t832 + t796 * t836) - t889;
t807 = -t837 - t901;
t768 = -t807 * t831 - t904;
t793 = 0.2e1 * t817 + t882;
t859 = -pkin(1) * (t768 * t832 - t793 * t836) + t896;
t856 = t835 * t557 + t831 * t612;
t855 = t835 * t560 + t831 * t613;
t854 = t835 * t611 + t937;
t852 = -t778 * t831 - t835 * t858;
t800 = qJDD(2) * t832 + t836 * t838;
t851 = pkin(1) * t800 - t798;
t679 = t729 * t834 - t935;
t619 = -t678 * t831 + t679 * t835;
t850 = -pkin(1) * (t619 * t832 - t687 * t836) - t866;
t799 = t885 * qJDD(2);
t802 = t819 + t901;
t849 = -pkin(1) * (t799 * t832 + t802 * t836) - t718;
t848 = t835 * t545 + t831 * t893;
t847 = t835 * t665 - t831 * t892;
t846 = -t790 * t831 + t832 * t858;
t801 = qJDD(2) * t836 - t832 * t838;
t845 = -pkin(1) * t801 - t797;
t570 = t615 * t834 - t657 * t830;
t527 = -t569 * t831 + t570 * t835;
t844 = -pkin(1) * (t527 * t832 - t614 * t836) - t856;
t572 = t617 * t834 - t660 * t830;
t529 = -t571 * t831 + t572 * t835;
t843 = -pkin(1) * (t529 * t832 - t616 * t836) - t855;
t640 = -t688 * t834 + t692 * t830;
t583 = -t638 * t831 + t640 * t835;
t842 = -pkin(1) * (t583 * t832 - t714 * t836) - t854;
t559 = t590 * t834 - t677 * t830;
t522 = -t558 * t831 + t559 * t835;
t841 = -pkin(1) * (t522 * t832 - t588 * t836) - t848;
t694 = -t769 * t830 - t913;
t642 = -t693 * t831 + t694 * t835;
t840 = -pkin(1) * (t642 * t832 - t836 * t931) - t847;
t828 = qJ(1) * g(2);
t821 = t836 * g(2);
t820 = t832 * g(2);
t808 = t819 - t837;
t806 = t837 - t901;
t803 = -t819 + t901;
t792 = t885 * t883;
t776 = -t785 + t822;
t775 = t784 - t822;
t774 = qJDD(3) * t832 + t792 * t836;
t773 = t794 * t835 - t825 * t883;
t772 = -qJDD(3) * t836 + t792 * t832;
t771 = -t795 * t831 - t826 * t883;
t767 = -t806 * t831 + t906;
t765 = t808 * t835 - t905;
t764 = -t807 * t835 + t905;
t763 = t806 * t835 + t907;
t762 = -t809 * t831 - t906;
t761 = t808 * t831 + t904;
t760 = (t794 + t817) * t831;
t759 = t928 * t835;
t748 = -t793 * t831 + t796 * t835;
t747 = t793 * t835 + t796 * t831;
t744 = t785 - t784;
t737 = t773 * t836 - t862;
t736 = t771 * t836 + t862;
t735 = t773 * t832 + t861;
t734 = t771 * t832 - t861;
t733 = t767 * t836 + t832 * t882;
t732 = t765 * t836 + t818 * t832;
t731 = t767 * t832 - t836 * t882;
t730 = t765 * t832 - t818 * t836;
t722 = -t755 + t781;
t721 = t754 - t781;
t720 = (-t786 * t834 + t788 * t830) * t824;
t719 = (-t786 * t830 - t788 * t834) * t824;
t715 = pkin(1) * t852;
t713 = t748 * t836 + t803 * t832;
t712 = t748 * t832 - t803 * t836;
t709 = t836 * t852;
t708 = t832 * t852;
t705 = t755 - t754;
t703 = t775 * t834 - t914;
t702 = -t776 * t830 + t933;
t701 = t775 * t830 + t913;
t700 = t776 * t834 + t935;
t696 = pkin(1) * t764 + t778 * t836 - t832 * t889;
t695 = pkin(1) * t762 - t797 * t895 - t836 * t858;
t683 = t711 * t834 - t788 * t903;
t682 = t711 * t830 + t788 * t902;
t681 = -t710 * t830 + t786 * t902;
t680 = t710 * t834 + t786 * t903;
t673 = (-t756 * t833 + t758 * t829) * t783;
t672 = (-t756 * t829 - t758 * t833) * t783;
t671 = -t719 * t831 + t720 * t835;
t670 = t719 * t835 + t720 * t831;
t662 = t671 * t836 + t823 * t832;
t661 = t671 * t832 - t823 * t836;
t658 = t676 - t723;
t655 = -t675 - t724;
t654 = -t701 * t831 + t703 * t835;
t653 = -t700 * t831 + t702 * t835;
t652 = t701 * t835 + t703 * t831;
t651 = t700 * t835 + t702 * t831;
t649 = t676 * t833 - t758 * t912;
t648 = t676 * t829 + t758 * t911;
t647 = -t675 * t829 + t756 * t911;
t646 = -t833 * t675 - t756 * t912;
t641 = -t693 * t835 - t694 * t831;
t639 = -t687 * t834 - t830 * t931;
t637 = -t687 * t830 + t834 * t931;
t629 = t673 * t834 + t707 * t830;
t628 = t673 * t830 - t707 * t834;
t627 = t721 * t833 - t918;
t626 = -t722 * t829 + t934;
t625 = t721 * t829 + t917;
t624 = t722 * t833 + t936;
t623 = -t682 * t831 + t683 * t835;
t622 = -t680 * t831 + t681 * t835;
t621 = t682 * t835 + t683 * t831;
t620 = t680 * t835 + t681 * t831;
t618 = -t678 * t835 - t679 * t831;
t610 = t623 * t836 + t876;
t609 = t622 * t836 - t876;
t608 = t623 * t832 - t875;
t607 = t622 * t832 + t875;
t606 = t649 * t834 + t878;
t605 = t647 * t834 - t878;
t604 = t649 * t830 - t877;
t603 = t647 * t830 + t877;
t602 = t654 * t836 - t688 * t832;
t601 = t653 * t836 + t692 * t832;
t600 = t654 * t832 + t688 * t836;
t599 = t653 * t832 - t692 * t836;
t591 = t657 * t833 - t658 * t829;
t589 = t657 * t829 + t658 * t833;
t586 = -t645 * t831 + t938;
t582 = -t637 * t831 + t639 * t835;
t581 = -t638 * t835 - t640 * t831;
t580 = t637 * t835 + t639 * t831;
t579 = t627 * t834 - t655 * t830;
t578 = t626 * t834 + t659 * t830;
t577 = t627 * t830 + t655 * t834;
t576 = t626 * t830 - t659 * t834;
t574 = -t628 * t831 + t629 * t835;
t573 = t628 * t835 + t629 * t831;
t567 = t591 * t834 + t705 * t830;
t566 = t591 * t830 - t705 * t834;
t565 = t582 * t836 + t744 * t832;
t564 = t582 * t832 - t744 * t836;
t554 = -t604 * t831 + t606 * t835;
t553 = -t603 * t831 + t605 * t835;
t552 = t604 * t835 + t606 * t831;
t551 = t603 * t835 + t605 * t831;
t550 = t574 * t836 + t672 * t832;
t549 = t574 * t832 - t672 * t836;
t548 = pkin(1) * t641 + t635 * t832 + t650 * t836;
t547 = pkin(1) * t618 + t633 * t836 + t634 * t832;
t546 = pkin(1) * t586 + (t644 * t836 - t745 * t895) * pkin(2);
t542 = t554 * t836 + t648 * t832;
t541 = t553 * t836 - t646 * t832;
t540 = t554 * t832 - t648 * t836;
t539 = t553 * t832 + t646 * t836;
t534 = -t584 * t835 - t585 * t831;
t533 = -t577 * t831 + t579 * t835;
t532 = -t576 * t831 + t578 * t835;
t531 = t577 * t835 + t579 * t831;
t530 = t576 * t835 + t578 * t831;
t528 = -t571 * t835 - t572 * t831;
t526 = -t569 * t835 - t570 * t831;
t525 = -t566 * t831 + t567 * t835;
t524 = t566 * t835 + t567 * t831;
t521 = -t558 * t835 - t559 * t831;
t519 = t533 * t836 + t625 * t832;
t518 = t532 * t836 + t624 * t832;
t517 = t533 * t832 - t625 * t836;
t516 = t532 * t832 - t624 * t836;
t515 = pkin(1) * t581 + t563 * t832 - t836 * t923;
t511 = t525 * t836 + t589 * t832;
t510 = t525 * t832 - t589 * t836;
t508 = pkin(1) * t534 + (-t584 * t836 - t596 * t895) * pkin(2);
t507 = pkin(1) * t528 + t544 * t832 - t556 * t836;
t506 = pkin(1) * t526 + t538 * t832 - t555 * t836;
t505 = pkin(1) * t521 + t523 * t832 - t536 * t836;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, 0, -t827, g(2), t828, 0, 0, t801, 0, -t800, 0, t820, t821, -t929, t828, t737, t713, t733, t736, t732, t774, -qJ(1) * t762 + t846, -qJ(1) * t764 + t864, t709, -qJ(1) * t852, t610, t565, t601, t609, t602, t662, -qJ(1) * t618 + t868, -qJ(1) * t641 + t867, -qJ(1) * t581 + t888, -qJ(1) * t586 + t886, t542, t511, t518, t541, t519, t550, -qJ(1) * t526 + t870, -qJ(1) * t528 + t869, -qJ(1) * t521 + t871, -qJ(1) * t534 + t887; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t827, 0, -g(1), -qJ(1) * g(1), 0, 0, 0, 0, 0, -qJDD(2), -qJ(1) * t800 + t845, -qJ(1) * t801 + t851, 0, qJ(1) * t749 - t925, -t760, -t747, -t763, -t759, -t761, 0, qJ(1) * (t766 * t836 - t796 * t832) + t860, qJ(1) * (t768 * t836 + t793 * t832) + t859, qJ(1) * (t799 * t836 - t802 * t832) + t849, qJ(1) * (t718 * t836 - t909) - t926, -t621, -t580, -t651, -t620, -t652, -t670, qJ(1) * (t619 * t836 + t687 * t832) + t850, qJ(1) * (t642 * t836 + t832 * t931) + t840, qJ(1) * (t583 * t836 + t714 * t832) + t842, qJ(1) * (t587 * t836 - t745 * t832) + t872, -t552, -t524, -t530, -t551, -t531, -t573, qJ(1) * (t527 * t836 + t614 * t832) + t844, qJ(1) * (t529 * t836 + t616 * t832) + t843, qJ(1) * (t522 * t836 + t588 * t832) + t841, qJ(1) * (t535 * t836 - t596 * t832) + t873; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, t800, 0, t801, 0, -t821, t820, t749, -t927, t735, t712, t731, t734, t730, t772, t695, t696, t708, t715, t608, t564, t599, t607, t600, t661, t547, t548, t515, t546, t540, t510, t516, t539, t517, t549, t506, t507, t505, t508; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t827, g(2), 0, 0, 0, t801, 0, -t800, 0, t820, t821, -t929, 0, t737, t713, t733, t736, t732, t774, t846, t864, t709, 0, t610, t565, t601, t609, t602, t662, t868, t867, t888, t886, t542, t511, t518, t541, t519, t550, t870, t869, t871, t887; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t827, 0, -g(1), 0, 0, 0, 0, 0, 0, -qJDD(2), t845, t851, 0, -t925, -t760, -t747, -t763, -t759, -t761, 0, t860, t859, t849, -t926, -t621, -t580, -t651, -t620, -t652, -t670, t850, t840, t842, t872, -t552, -t524, -t530, -t551, -t531, -t573, t844, t843, t841, t873; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, t800, 0, t801, 0, -t821, t820, t749, -t927, t735, t712, t731, t734, t730, t772, t695, t696, t708, t715, t608, t564, t599, t607, t600, t661, t547, t548, t515, t546, t540, t510, t516, t539, t517, t549, t506, t507, t505, t508; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t838, 0, 0, g(2), -t797, 0, t773, t748, t767, t771, t765, t792, -t896, -t889, t852, 0, t623, t582, t653, t622, t654, t671, t634, t635, t563, -t879, t554, t525, t532, t553, t533, t574, t538, t544, t523, -t880; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t838, 0, qJDD(2), 0, -g(2), 0, -t798, 0, t810, -t803, -t882, -t810, -t818, -qJDD(3), -t858, t778, 0, 0, -t746, -t744, -t692, t746, t688, -t823, t633, t650, -t923, t922, -t648, -t589, -t624, t646, -t625, -t672, -t555, -t556, -t536, -t924; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t797, t798, 0, 0, t760, t747, t763, t759, t761, 0, t889, -t896, t718, 0, t621, t580, t651, t620, t652, t670, t866, t847, t854, t738, t552, t524, t530, t551, t531, t573, t856, t855, t848, t594; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t794, t796, t881, -t817, t808, t817, 0, -t797, -t858, 0, t683, t639, t702, t681, t703, t720, -t899, -t892, t644, 0, t606, t567, t578, t605, t579, t629, t612, t613, t893, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t874, t793, t806, t795, t805, -t874, t797, 0, t778, 0, t682, t637, t700, t680, t701, t719, t666, t665, t611, pkin(2) * t745, t604, t566, t576, t603, t577, t628, t557, t560, t545, pkin(2) * t596; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t810, t803, t882, t810, t818, qJDD(3), t858, -t778, 0, 0, t746, t744, t692, -t746, -t688, t823, -t633, -t650, t923, -t922, t648, t589, t624, -t646, t625, t672, t555, t556, t536, t924; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t711, -t687, t930, t780, t775, -t780, 0, -t745, t697, 0, t649, t591, t626, t647, t627, t673, t900, t894, t596, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t910, t931, t776, t710, t740, -t910, t745, 0, t698, 0, -t706, -t705, -t659, t706, t655, -t707, t663, t664, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t746, t744, t692, -t746, -t688, t823, -t697, -t698, 0, 0, t648, t589, t624, -t646, t625, t672, -t894, t900, t597, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t676, t657, t932, t723, t721, -t723, 0, t697, t663, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t724, t658, t722, t675, t668, -t724, -t697, 0, t664, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t706, t705, t659, -t706, -t655, t707, -t663, -t664, 0, 0;];
m_new_reg  = t1;
