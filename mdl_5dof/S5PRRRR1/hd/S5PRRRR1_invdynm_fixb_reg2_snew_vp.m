% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PRRRR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:03
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PRRRR1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(2,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR1_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR1_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRR1_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRR1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'S5PRRRR1_invdynm_fixb_reg2_snew_vp: pkin has to be [2x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:03:39
% EndTime: 2019-12-05 17:03:46
% DurationCPUTime: 7.35s
% Computational Cost: add. (15562->469), mult. (31325->581), div. (0->0), fcn. (24442->8), ass. (0->378)
t827 = g(3) - qJDD(1);
t832 = sin(qJ(2));
t836 = cos(qJ(2));
t798 = t836 * g(1) + t832 * t827;
t831 = sin(qJ(3));
t835 = cos(qJ(3));
t778 = t831 * g(2) - t835 * t798;
t826 = t835 ^ 2;
t838 = qJD(2) ^ 2;
t819 = t826 * t838;
t837 = qJD(3) ^ 2;
t809 = -t819 - t837;
t752 = t809 * pkin(2) + t778;
t830 = sin(qJ(4));
t834 = cos(qJ(4));
t858 = t835 * g(2) + t831 * t798;
t810 = t831 * t838 * t835;
t881 = qJDD(3) + t810;
t839 = pkin(2) * t881 + t858;
t697 = t830 * t752 - t834 * t839;
t685 = t834 * t697;
t895 = t834 * t752;
t698 = t830 * t839 + t895;
t644 = -t830 * t698 + t685;
t941 = t831 * t644;
t940 = t835 * t644;
t829 = sin(qJ(5));
t908 = t830 * t835;
t788 = (t831 * t834 + t908) * qJD(2);
t824 = qJD(3) + qJD(4);
t833 = cos(qJ(5));
t756 = t829 * t788 - t833 * t824;
t758 = t833 * t788 + t829 * t824;
t706 = t758 * t756;
t885 = qJD(2) * qJD(3);
t817 = t835 * t885;
t884 = t831 * qJDD(2);
t794 = t817 + t884;
t818 = t835 * qJDD(2);
t874 = t831 * t885;
t795 = t818 - t874;
t863 = t830 * t794 - t834 * t795;
t710 = -t788 * qJD(4) - t863;
t707 = qJDD(5) - t710;
t935 = -t706 + t707;
t939 = t829 * t935;
t894 = t834 * t835;
t909 = t830 * t831;
t786 = (-t894 + t909) * qJD(2);
t746 = t788 * t786;
t823 = qJDD(3) + qJDD(4);
t933 = -t746 + t823;
t938 = t830 * t933;
t937 = t833 * t935;
t936 = t834 * t933;
t711 = -t786 * qJD(4) + t834 * t794 + t830 * t795;
t780 = t824 * t786;
t934 = t711 - t780;
t797 = t832 * g(1) - t836 * t827;
t790 = t836 * t797;
t932 = -t832 * t798 + t790;
t931 = t795 - t874;
t688 = (qJD(4) - t824) * t788 + t863;
t754 = t756 ^ 2;
t755 = t758 ^ 2;
t783 = qJD(5) + t786;
t781 = t783 ^ 2;
t784 = t786 ^ 2;
t785 = t788 ^ 2;
t822 = t824 ^ 2;
t930 = pkin(1) * g(2);
t718 = t835 * t778 - t831 * t858;
t929 = pkin(1) * (t832 * t718 + t790);
t928 = pkin(1) * t932;
t745 = t931 * pkin(2) + t797;
t663 = t829 * t698 + t833 * t745;
t664 = t833 * t698 - t829 * t745;
t597 = t829 * t663 + t833 * t664;
t584 = t830 * t597 - t685;
t927 = pkin(2) * t584;
t692 = t711 + t780;
t638 = -t688 * t830 - t834 * t692;
t926 = pkin(2) * t638;
t925 = pkin(2) * t644;
t924 = pkin(2) * t831;
t923 = pkin(2) * t832;
t922 = pkin(2) * t835;
t921 = t783 * t829;
t920 = t783 * t833;
t919 = t788 * t824;
t918 = t824 * t830;
t917 = t824 * t834;
t825 = t831 ^ 2;
t916 = t825 * t838;
t668 = t706 + t707;
t915 = t829 * t668;
t914 = t829 * t697;
t913 = t830 * t697;
t740 = t746 + t823;
t911 = t830 * t740;
t910 = t830 * t745;
t907 = t831 * t797;
t906 = t831 * t881;
t805 = qJDD(3) - t810;
t905 = t831 * t805;
t596 = t833 * t663 - t829 * t664;
t904 = t832 * t596;
t903 = t832 * t745;
t902 = t832 * t797;
t900 = t833 * t668;
t899 = t833 * t697;
t898 = t834 * t596;
t897 = t834 * t740;
t896 = t834 * t745;
t893 = t835 * t797;
t892 = t835 * t881;
t891 = t835 * t805;
t645 = t834 * t698 + t913;
t714 = -t784 - t785;
t611 = -pkin(2) * t714 + t645;
t563 = -t831 * t611 + t940;
t890 = t836 * t563 + t638 * t923;
t880 = t596 * t924;
t889 = t584 * t923 - t836 * t880;
t879 = t745 * t924;
t888 = -t644 * t923 - t836 * t879;
t887 = t825 + t826;
t883 = t832 * qJDD(2);
t882 = t836 * qJDD(2);
t878 = t830 * t706;
t877 = t832 * t746;
t876 = t834 * t706;
t875 = t836 * t746;
t585 = t834 * t597 + t913;
t535 = -t831 * t584 + t835 * t585;
t594 = t596 * t922;
t873 = -pkin(1) * (t832 * t535 + t596 * t836) - t594;
t587 = t835 * t645 + t941;
t738 = t745 * t922;
t872 = -pkin(1) * (t832 * t587 + t836 * t745) - t738;
t865 = -t829 * t711 + t833 * t823;
t656 = (-qJD(5) + t783) * t758 + t865;
t853 = -t833 * t711 - t829 * t823;
t676 = -t756 * qJD(5) - t853;
t723 = t783 * t756;
t659 = t676 + t723;
t588 = t829 * t656 - t833 * t659;
t545 = -pkin(2) * t588 + t830 * t596;
t523 = -t831 * t545 + t596 * t894;
t590 = t833 * t656 + t829 * t659;
t677 = t754 + t755;
t558 = t830 * t590 + t834 * t677;
t536 = pkin(2) * t558 + t597;
t871 = t836 * t523 + t832 * t536;
t684 = -t781 - t754;
t614 = t829 * t684 + t937;
t557 = -pkin(2) * t614 + t834 * t663 + t829 * t913;
t612 = -t830 * t663 + t829 * t685;
t538 = -t831 * t557 + t835 * t612;
t615 = t833 * t684 - t939;
t675 = -t758 * qJD(5) + t865;
t724 = t758 * t783;
t657 = t675 - t724;
t569 = t830 * t615 + t834 * t657;
t555 = pkin(2) * t569 - t899;
t870 = t836 * t538 + t832 * t555;
t704 = -t755 - t781;
t616 = t833 * t704 - t915;
t560 = -pkin(2) * t616 + t834 * t664 + t830 * t899;
t613 = -t830 * t664 + t833 * t685;
t544 = -t831 * t560 + t835 * t613;
t617 = -t829 * t704 - t900;
t660 = (qJD(5) + t783) * t756 + t853;
t571 = t830 * t617 + t834 * t660;
t556 = pkin(2) * t571 + t914;
t869 = t836 * t544 + t832 * t556;
t729 = -t822 - t784;
t678 = t830 * t729 + t936;
t633 = -pkin(2) * t678 + t697;
t687 = (qJD(4) + t824) * t788 + t863;
t666 = -pkin(2) * t687 + t896;
t634 = -t831 * t666 - t745 * t908;
t868 = -t832 * t633 + t836 * t634;
t665 = -pkin(2) * t934 - t910;
t635 = -t831 * t665 - t745 * t894;
t769 = -t785 - t822;
t693 = t834 * t769 - t911;
t650 = t895 + t830 * t858 + (t830 * t881 - t693) * pkin(2);
t867 = t836 * t635 - t832 * t650;
t866 = t835 * t666 - t745 * t909;
t864 = -t832 * t778 - t835 * t790;
t749 = -t836 * t798 - t902;
t862 = t832 * t810;
t861 = t836 * t810;
t766 = t835 * t809 - t906;
t796 = t818 - 0.2e1 * t874;
t860 = -pkin(1) * (t832 * t766 + t836 * t796) - t893;
t807 = -t837 - t916;
t768 = -t831 * t807 - t891;
t793 = 0.2e1 * t817 + t884;
t859 = -pkin(1) * (t832 * t768 - t836 * t793) + t907;
t856 = t835 * t557 + t831 * t612;
t855 = t835 * t560 + t831 * t613;
t854 = t835 * t611 + t941;
t852 = -t831 * t778 - t835 * t858;
t800 = t836 * t838 + t883;
t851 = pkin(1) * t800 - t798;
t679 = t834 * t729 - t938;
t619 = -t831 * t678 + t835 * t679;
t850 = -pkin(1) * (t832 * t619 - t836 * t687) - t866;
t799 = t887 * qJDD(2);
t802 = t819 + t916;
t849 = -pkin(1) * (t832 * t799 + t836 * t802) - t718;
t848 = t835 * t545 + t831 * t898;
t847 = t835 * t665 - t831 * t896;
t846 = -t831 * t790 + t832 * t858;
t801 = -t832 * t838 + t882;
t845 = -pkin(1) * t801 - t797;
t570 = t834 * t615 - t830 * t657;
t527 = -t831 * t569 + t835 * t570;
t844 = -pkin(1) * (t832 * t527 - t836 * t614) - t856;
t572 = t834 * t617 - t830 * t660;
t529 = -t831 * t571 + t835 * t572;
t843 = -pkin(1) * (t832 * t529 - t836 * t616) - t855;
t640 = -t688 * t834 + t830 * t692;
t583 = -t831 * t638 + t835 * t640;
t842 = -pkin(1) * (t832 * t583 - t836 * t714) - t854;
t559 = t834 * t590 - t830 * t677;
t522 = -t831 * t558 + t835 * t559;
t841 = -pkin(1) * (t832 * t522 - t836 * t588) - t848;
t694 = -t830 * t769 - t897;
t642 = -t831 * t693 + t835 * t694;
t840 = -pkin(1) * (t832 * t642 - t836 * t934) - t847;
t828 = qJ(1) * g(2);
t821 = t836 * g(2);
t820 = t832 * g(2);
t808 = t819 - t837;
t806 = t837 - t916;
t803 = -t819 + t916;
t792 = t887 * t885;
t776 = -t785 + t822;
t775 = t784 - t822;
t774 = t832 * qJDD(3) + t836 * t792;
t773 = t835 * t794 - t825 * t885;
t772 = -t836 * qJDD(3) + t832 * t792;
t771 = -t831 * t795 - t826 * t885;
t767 = -t831 * t806 + t892;
t765 = t835 * t808 - t905;
t764 = -t835 * t807 + t905;
t763 = t835 * t806 + t906;
t762 = -t831 * t809 - t892;
t761 = t831 * t808 + t891;
t760 = (t794 + t817) * t831;
t759 = t931 * t835;
t748 = -t831 * t793 + t835 * t796;
t747 = t835 * t793 + t831 * t796;
t744 = t785 - t784;
t737 = t836 * t773 - t862;
t736 = t836 * t771 + t862;
t735 = t832 * t773 + t861;
t734 = t832 * t771 - t861;
t733 = t836 * t767 + t831 * t883;
t732 = t836 * t765 + t832 * t818;
t731 = t832 * t767 - t831 * t882;
t730 = t832 * t765 - t835 * t882;
t722 = -t755 + t781;
t721 = t754 - t781;
t720 = (-t786 * t834 + t788 * t830) * t824;
t719 = (-t786 * t830 - t788 * t834) * t824;
t715 = pkin(1) * t852;
t713 = t836 * t748 + t832 * t803;
t712 = t832 * t748 - t836 * t803;
t709 = t836 * t852;
t708 = t832 * t852;
t705 = t755 - t754;
t703 = t834 * t775 - t911;
t702 = -t830 * t776 + t936;
t701 = t830 * t775 + t897;
t700 = t834 * t776 + t938;
t696 = pkin(1) * t764 + t836 * t778 - t832 * t893;
t695 = pkin(1) * t762 - t831 * t902 - t836 * t858;
t683 = t834 * t711 - t788 * t918;
t682 = t830 * t711 + t788 * t917;
t681 = -t830 * t710 + t786 * t917;
t680 = t834 * t710 + t786 * t918;
t673 = (-t756 * t833 + t758 * t829) * t783;
t672 = (-t756 * t829 - t758 * t833) * t783;
t671 = -t831 * t719 + t835 * t720;
t670 = t835 * t719 + t831 * t720;
t662 = t836 * t671 + t832 * t823;
t661 = t832 * t671 - t836 * t823;
t658 = t676 - t723;
t655 = -t675 - t724;
t654 = -t831 * t701 + t835 * t703;
t653 = -t831 * t700 + t835 * t702;
t652 = t835 * t701 + t831 * t703;
t651 = t835 * t700 + t831 * t702;
t649 = t833 * t676 - t758 * t921;
t648 = t829 * t676 + t758 * t920;
t647 = -t829 * t675 + t756 * t920;
t646 = -t833 * t675 - t756 * t921;
t641 = -t835 * t693 - t831 * t694;
t639 = -t834 * t687 - t830 * t934;
t637 = -t830 * t687 + t834 * t934;
t629 = t834 * t673 + t830 * t707;
t628 = t830 * t673 - t834 * t707;
t627 = t833 * t721 - t915;
t626 = -t829 * t722 + t937;
t625 = t829 * t721 + t900;
t624 = t833 * t722 + t939;
t623 = -t831 * t682 + t835 * t683;
t622 = -t831 * t680 + t835 * t681;
t621 = t835 * t682 + t831 * t683;
t620 = t835 * t680 + t831 * t681;
t618 = -t835 * t678 - t831 * t679;
t610 = t836 * t623 + t877;
t609 = t836 * t622 - t877;
t608 = t832 * t623 - t875;
t607 = t832 * t622 + t875;
t606 = t834 * t649 + t878;
t605 = t834 * t647 - t878;
t604 = t830 * t649 - t876;
t603 = t830 * t647 + t876;
t602 = t836 * t654 - t832 * t688;
t601 = t836 * t653 + t832 * t692;
t600 = t832 * t654 + t836 * t688;
t599 = t832 * t653 - t836 * t692;
t591 = t833 * t657 - t829 * t658;
t589 = t829 * t657 + t833 * t658;
t586 = -t831 * t645 + t940;
t582 = -t831 * t637 + t835 * t639;
t581 = -t835 * t638 - t831 * t640;
t580 = t835 * t637 + t831 * t639;
t579 = t834 * t627 - t830 * t655;
t578 = t834 * t626 + t830 * t659;
t577 = t830 * t627 + t834 * t655;
t576 = t830 * t626 - t834 * t659;
t574 = -t831 * t628 + t835 * t629;
t573 = t835 * t628 + t831 * t629;
t567 = t834 * t591 + t830 * t705;
t566 = t830 * t591 - t834 * t705;
t565 = t836 * t582 + t832 * t744;
t564 = t832 * t582 - t836 * t744;
t554 = -t831 * t604 + t835 * t606;
t553 = -t831 * t603 + t835 * t605;
t552 = t835 * t604 + t831 * t606;
t551 = t835 * t603 + t831 * t605;
t550 = t836 * t574 + t832 * t672;
t549 = t832 * t574 - t836 * t672;
t548 = pkin(1) * t641 + t832 * t635 + t836 * t650;
t547 = pkin(1) * t618 + t836 * t633 + t832 * t634;
t546 = pkin(1) * t586 + (t644 * t836 - t831 * t903) * pkin(2);
t542 = t836 * t554 + t832 * t648;
t541 = t836 * t553 - t832 * t646;
t540 = t832 * t554 - t836 * t648;
t539 = t832 * t553 + t836 * t646;
t534 = -t835 * t584 - t831 * t585;
t533 = -t831 * t577 + t835 * t579;
t532 = -t831 * t576 + t835 * t578;
t531 = t835 * t577 + t831 * t579;
t530 = t835 * t576 + t831 * t578;
t528 = -t835 * t571 - t831 * t572;
t526 = -t835 * t569 - t831 * t570;
t525 = -t831 * t566 + t835 * t567;
t524 = t835 * t566 + t831 * t567;
t521 = -t835 * t558 - t831 * t559;
t519 = t836 * t533 + t832 * t625;
t518 = t836 * t532 + t832 * t624;
t517 = t832 * t533 - t836 * t625;
t516 = t832 * t532 - t836 * t624;
t515 = pkin(1) * t581 + t832 * t563 - t836 * t926;
t511 = t836 * t525 + t832 * t589;
t510 = t832 * t525 - t836 * t589;
t508 = pkin(1) * t534 + (-t584 * t836 - t831 * t904) * pkin(2);
t507 = pkin(1) * t528 + t832 * t544 - t836 * t556;
t506 = pkin(1) * t526 + t832 * t538 - t836 * t555;
t505 = pkin(1) * t521 + t832 * t523 - t836 * t536;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, 0, -t827, g(2), t828, 0, 0, t801, 0, -t800, 0, t820, t821, -t932, t828, t737, t713, t733, t736, t732, t774, -qJ(1) * t762 + t846, -qJ(1) * t764 + t864, t709, -qJ(1) * t852, t610, t565, t601, t609, t602, t662, -qJ(1) * t618 + t868, -qJ(1) * t641 + t867, -qJ(1) * t581 + t890, -qJ(1) * t586 + t888, t542, t511, t518, t541, t519, t550, -qJ(1) * t526 + t870, -qJ(1) * t528 + t869, -qJ(1) * t521 + t871, -qJ(1) * t534 + t889; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t827, 0, -g(1), -qJ(1) * g(1), 0, 0, 0, 0, 0, -qJDD(2), -qJ(1) * t800 + t845, -qJ(1) * t801 + t851, 0, qJ(1) * t749 - t928, -t760, -t747, -t763, -t759, -t761, 0, qJ(1) * (t836 * t766 - t832 * t796) + t860, qJ(1) * (t836 * t768 + t832 * t793) + t859, qJ(1) * (t836 * t799 - t832 * t802) + t849, qJ(1) * (t836 * t718 - t902) - t929, -t621, -t580, -t651, -t620, -t652, -t670, qJ(1) * (t836 * t619 + t832 * t687) + t850, qJ(1) * (t836 * t642 + t832 * t934) + t840, qJ(1) * (t836 * t583 + t832 * t714) + t842, qJ(1) * (t836 * t587 - t903) + t872, -t552, -t524, -t530, -t551, -t531, -t573, qJ(1) * (t836 * t527 + t832 * t614) + t844, qJ(1) * (t836 * t529 + t832 * t616) + t843, qJ(1) * (t836 * t522 + t832 * t588) + t841, qJ(1) * (t836 * t535 - t904) + t873; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, t800, 0, t801, 0, -t821, t820, t749, -t930, t735, t712, t731, t734, t730, t772, t695, t696, t708, t715, t608, t564, t599, t607, t600, t661, t547, t548, t515, t546, t540, t510, t516, t539, t517, t549, t506, t507, t505, t508; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t827, g(2), 0, 0, 0, t801, 0, -t800, 0, t820, t821, -t932, 0, t737, t713, t733, t736, t732, t774, t846, t864, t709, 0, t610, t565, t601, t609, t602, t662, t868, t867, t890, t888, t542, t511, t518, t541, t519, t550, t870, t869, t871, t889; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t827, 0, -g(1), 0, 0, 0, 0, 0, 0, -qJDD(2), t845, t851, 0, -t928, -t760, -t747, -t763, -t759, -t761, 0, t860, t859, t849, -t929, -t621, -t580, -t651, -t620, -t652, -t670, t850, t840, t842, t872, -t552, -t524, -t530, -t551, -t531, -t573, t844, t843, t841, t873; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, t800, 0, t801, 0, -t821, t820, t749, -t930, t735, t712, t731, t734, t730, t772, t695, t696, t708, t715, t608, t564, t599, t607, t600, t661, t547, t548, t515, t546, t540, t510, t516, t539, t517, t549, t506, t507, t505, t508; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), 0, -t838, 0, 0, g(2), -t797, 0, t773, t748, t767, t771, t765, t792, -t907, -t893, t852, 0, t623, t582, t653, t622, t654, t671, t634, t635, t563, -t879, t554, t525, t532, t553, t533, t574, t538, t544, t523, -t880; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t838, 0, qJDD(2), 0, -g(2), 0, -t798, 0, t810, -t803, -t884, -t810, -t818, -qJDD(3), -t858, t778, 0, 0, -t746, -t744, -t692, t746, t688, -t823, t633, t650, -t926, t925, -t648, -t589, -t624, t646, -t625, -t672, -t555, -t556, -t536, -t927; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t797, t798, 0, 0, t760, t747, t763, t759, t761, 0, t893, -t907, t718, 0, t621, t580, t651, t620, t652, t670, t866, t847, t854, t738, t552, t524, t530, t551, t531, t573, t856, t855, t848, t594; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t794, t796, t881, -t817, t808, t817, 0, -t797, -t858, 0, t683, t639, t702, t681, t703, t720, -t910, -t896, t644, 0, t606, t567, t578, t605, t579, t629, t612, t613, t898, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t874, t793, t806, t795, t805, -t874, t797, 0, t778, 0, t682, t637, t700, t680, t701, t719, t666, t665, t611, pkin(2) * t745, t604, t566, t576, t603, t577, t628, t557, t560, t545, pkin(2) * t596; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t810, t803, t884, t810, t818, qJDD(3), t858, -t778, 0, 0, t746, t744, t692, -t746, -t688, t823, -t633, -t650, t926, -t925, t648, t589, t624, -t646, t625, t672, t555, t556, t536, t927; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t711, -t687, t933, t780, t775, -t780, 0, -t745, t697, 0, t649, t591, t626, t647, t627, t673, t914, t899, t596, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t919, t934, t776, t710, t740, -t919, t745, 0, t698, 0, -t706, -t705, -t659, t706, t655, -t707, t663, t664, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t746, t744, t692, -t746, -t688, t823, -t697, -t698, 0, 0, t648, t589, t624, -t646, t625, t672, -t899, t914, t597, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t676, t657, t935, t723, t721, -t723, 0, t697, t663, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t724, t658, t722, t675, t668, -t724, -t697, 0, t664, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t706, t705, t659, -t706, -t655, t707, -t663, -t664, 0, 0;];
m_new_reg = t1;
