% Calculate inertial parameters regressor of coriolis matrix for
% S5PRRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-07-18 13:29
% Revision: 08c8d617a845f5dd194efdf9aca2774760f7818f (2019-07-16)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PRRRR1_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(2,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR1_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR1_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'S5PRRRR1_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [2x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-07-18 13:28:55
% EndTime: 2019-07-18 13:29:03
% DurationCPUTime: 3.60s
% Computational Cost: add. (2410->250), mult. (7532->405), div. (0->0), fcn. (8325->8), ass. (0->256)
t249 = sin(qJ(3));
t401 = cos(qJ(4));
t322 = t401 * t249;
t248 = sin(qJ(4));
t252 = cos(qJ(3));
t373 = t248 * t252;
t222 = t322 + t373;
t423 = -0.2e1 * t222;
t247 = sin(qJ(5));
t243 = t247 ^ 2;
t251 = cos(qJ(5));
t245 = t251 ^ 2;
t362 = t243 + t245;
t422 = 0.2e1 * t222;
t321 = t401 * t252;
t374 = t248 * t249;
t270 = t321 - t374;
t334 = qJD(3) + qJD(4);
t304 = t270 * t334;
t219 = t222 ^ 2;
t333 = -t270 ^ 2 + t219;
t253 = cos(qJ(2));
t250 = sin(qJ(2));
t204 = t270 * t250;
t377 = t247 * t204;
t167 = t251 * t253 + t377;
t279 = t251 * t204 - t253 * t247;
t421 = t247 * t167 + t279 * t251;
t356 = qJD(2) * t252;
t330 = pkin(2) * t356;
t262 = -t321 / 0.2e1 + t374 / 0.2e1;
t135 = (t270 / 0.2e1 + t262) * t253;
t347 = t135 * qJD(1);
t420 = t270 * t330 + t347;
t381 = t270 * t252;
t148 = (t222 * t249 - t381) * pkin(2);
t419 = -qJD(2) * t148 + t347;
t218 = t322 / 0.2e1 + t373 / 0.2e1;
t134 = (t222 / 0.2e1 - t218) * t253;
t348 = t134 * qJD(1);
t418 = t222 * t330 + t348;
t278 = -t222 * t252 - t249 * t270;
t147 = t278 * pkin(2);
t417 = -qJD(2) * t147 + t348;
t112 = t251 * t147;
t408 = -t167 / 0.2e1;
t273 = (t408 + t377 / 0.2e1) * t222;
t203 = t253 * t222;
t383 = t203 * t251;
t12 = t383 / 0.2e1 + t273;
t390 = t12 * qJD(1);
t416 = -t112 * qJD(2) - t390;
t400 = pkin(2) * t247;
t111 = t278 * t400;
t311 = t203 / 0.2e1;
t407 = -t203 / 0.2e1;
t15 = (t311 + t407) * t247;
t389 = t15 * qJD(1);
t415 = t111 * qJD(2) - t389;
t323 = t401 * t204;
t331 = t401 / 0.2e1;
t202 = t222 * t250;
t384 = t202 * t248;
t405 = -t245 / 0.2e1;
t16 = (-t323 / 0.2e1 + (t405 - t243 / 0.2e1 + 0.1e1 / 0.2e1) * t384 + t421 * t331) * pkin(2);
t26 = (t204 - t421) * t202;
t369 = t26 * qJD(1);
t414 = qJD(3) * t16 + t369;
t110 = t362 * pkin(2) * t381;
t404 = t247 / 0.2e1;
t258 = t251 * t408 + t279 * t404;
t256 = t258 * t270;
t371 = t250 * t251;
t205 = t270 * t253;
t376 = t247 * t205;
t168 = t371 - t376;
t370 = t251 * t205;
t372 = t250 * t247;
t169 = t370 + t372;
t387 = t169 * t251;
t272 = -t387 / 0.2e1 + t168 * t404;
t22 = -t256 + t272;
t382 = t22 * qJD(1);
t413 = qJD(2) * t110 + t382;
t306 = t362 * t249;
t53 = pkin(2) * t222 * t306 - t110;
t412 = -qJD(2) * t53 + t382;
t296 = t247 * t330;
t411 = t222 * t296 + t389;
t295 = t251 * t330;
t410 = -t222 * t295 + t390;
t149 = (t243 / 0.2e1 + t405) * t222;
t375 = t247 * t251;
t320 = qJD(2) * t375;
t44 = t149 * t334 + t219 * t320;
t233 = t245 - t243;
t109 = t233 * t334 + t320 * t423;
t406 = -t270 / 0.2e1;
t403 = t248 / 0.2e1;
t402 = t249 / 0.2e1;
t399 = pkin(2) * t251;
t398 = pkin(2) * t252;
t397 = t16 * qJD(4);
t395 = pkin(2) * qJD(4);
t394 = qJD(3) * pkin(2);
t241 = t250 * t253;
t386 = t202 * t203;
t50 = t204 * t205 - t241 + t386;
t393 = qJD(1) * t50;
t388 = t167 * t270;
t385 = t202 * t222;
t380 = t222 * t247;
t23 = -t167 * t168 + t169 * t279 + t386;
t379 = t23 * qJD(1);
t313 = -t385 / 0.2e1;
t257 = t251 * t313 + t279 * t406;
t271 = -t376 / 0.2e1 + t371 / 0.2e1;
t40 = t257 + t271;
t368 = t40 * qJD(1);
t312 = -t370 / 0.2e1;
t41 = t312 + t388 / 0.2e1 + (-t250 / 0.2e1 + t385 / 0.2e1) * t247;
t367 = t41 * qJD(1);
t264 = t222 * t331 - t270 * t403;
t259 = t402 + t264;
t72 = t259 * t400;
t366 = t72 * qJD(2);
t75 = t259 * t399;
t365 = t75 * qJD(2);
t82 = t333 * t247;
t364 = t82 * qJD(2);
t83 = t333 * t251;
t363 = t83 * qJD(2);
t358 = qJD(2) * t270;
t357 = qJD(2) * t222;
t355 = qJD(3) * t248;
t354 = qJD(4) * t251;
t353 = qJD(5) * t247;
t352 = qJD(5) * t251;
t351 = t333 * qJD(2);
t346 = t149 * qJD(2);
t345 = t149 * qJD(5);
t150 = t247 * t270;
t344 = t150 * qJD(2);
t153 = t251 * t270;
t133 = t153 * qJD(2);
t156 = t233 * t219;
t343 = t156 * qJD(2);
t244 = t249 ^ 2;
t246 = t252 ^ 2;
t305 = (t244 + t246) * t253;
t175 = t250 * t305 - t241;
t342 = t175 * qJD(1);
t263 = t362 * t401;
t217 = t263 * pkin(2);
t341 = t217 * qJD(3);
t340 = t218 * qJD(2);
t234 = t246 - t244;
t339 = t234 * qJD(2);
t338 = t249 * qJD(3);
t337 = t250 * qJD(2);
t336 = t252 * qJD(3);
t335 = t253 * qJD(2);
t329 = t252 * t395;
t328 = t248 * t395;
t327 = pkin(2) * t355;
t326 = -t400 / 0.2e1;
t325 = pkin(2) * t403;
t324 = t203 * t401;
t319 = t252 * t337;
t318 = t247 * t355;
t317 = t270 * t353;
t316 = t270 * t352;
t315 = t270 * t357;
t239 = t247 * t352;
t314 = t249 * t336;
t240 = t249 * t356;
t310 = -t253 * t249 / 0.2e1;
t309 = qJD(5) * t401;
t308 = t401 * qJD(3);
t307 = t401 * qJD(4);
t303 = t334 * t204;
t166 = t334 * t222;
t302 = t334 * t248;
t301 = t334 * t202;
t300 = t334 * t247;
t299 = t334 * t251;
t294 = qJD(5) - t358;
t293 = pkin(2) * t308;
t292 = t219 * t239;
t289 = t247 * t309;
t288 = t251 * t309;
t287 = t324 / 0.2e1;
t286 = t270 * t166;
t285 = t334 * t375;
t284 = t222 * t304;
t283 = t247 * t299;
t280 = -pkin(2) * t324 / 0.2e1;
t255 = t258 * t249;
t18 = (t248 * t272 + t255 + t287) * pkin(2);
t254 = pkin(2) ^ 2;
t197 = t254 * t252 * t306;
t277 = qJD(1) * t18 - qJD(2) * t197;
t172 = (-t401 + t263) * t254 * t248;
t276 = qJD(1) * t16 + qJD(3) * t172;
t275 = t222 * t294;
t274 = t294 * t398;
t269 = t251 * t275;
t92 = qJD(5) * t218 - t315;
t267 = qJD(2) * (-t168 * t251 - t169 * t247);
t69 = (t310 - t205 * t248 / 0.2e1 + t287) * pkin(2);
t266 = -qJD(1) * t69 + t240 * t254;
t265 = t283 * t422;
t261 = -t308 - t307;
t260 = (-t222 * t248 - t270 * t401) * t394;
t232 = t247 * t328;
t227 = t233 * qJD(5);
t214 = t217 * qJD(4);
t154 = t334 * t218;
t137 = -t218 * t253 + t407;
t136 = (t262 + t406) * t253;
t115 = t135 * qJD(2);
t113 = t134 * qJD(2);
t104 = -t133 + t352;
t103 = t344 - t353;
t91 = t202 * t251;
t90 = t202 * t247;
t74 = (-t264 + t402) * t399;
t73 = t249 * t326 + t264 * t400;
t71 = t283 - t346;
t70 = -t285 + t346;
t68 = pkin(2) * t310 + t205 * t325 + t280;
t67 = -0.2e1 * t247 * t269;
t62 = -t245 * t315 - t345;
t61 = -t243 * t315 + t345;
t52 = t137 * qJD(2) - t303;
t51 = t136 * qJD(2) + t301;
t49 = -qJD(5) * t153 - t363;
t48 = qJD(5) * t150 + t364;
t43 = -t257 + t271;
t42 = -t388 / 0.2e1 + t247 * t313 + t312 - t372 / 0.2e1;
t39 = -t345 - (-t245 * t357 - t285) * t270;
t38 = t345 - (-t243 * t357 + t283) * t270;
t36 = t222 * t300 + t363;
t35 = t222 * t299 - t364;
t34 = (-qJD(5) - t358) * t375 * t422 + t233 * t304;
t21 = -t256 - t272;
t17 = t168 * t248 * t326 + pkin(2) * t255 + t325 * t387 + t280;
t14 = t203 * t404 + t247 * t311;
t13 = -t383 / 0.2e1 + t273;
t6 = t12 * qJD(2);
t5 = t15 * qJD(2);
t4 = qJD(2) * t22;
t3 = t14 * qJD(2) + t91 * qJD(5) + t204 * t300;
t2 = t13 * qJD(2) + t90 * qJD(5) - t251 * t303;
t1 = t21 * qJD(2) - t301 * t362;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t175 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t50 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t23 * qJD(2) + t26 * t334; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t337, -t335, 0, 0, 0, 0, 0, 0, 0, 0, -t253 * t338 - t319, t249 * t337 - t253 * t336, qJD(2) * t305, t342, 0, 0, 0, 0, 0, 0, t137 * t334 - t270 * t337, t136 * t334 + t222 * t337, (t203 * t222 + t205 * t270) * qJD(2), -pkin(2) * t319 + qJD(3) * t68 + t393, 0, 0, 0, 0, 0, 0, (-t168 * t270 + t203 * t380) * qJD(2) + t43 * qJD(5) + t334 * t13, (t169 * t270 + t222 * t383) * qJD(2) + t42 * qJD(5) + t334 * t14, t21 * t334 + t222 * t267, t17 * qJD(3) + t267 * t398 + t379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t249 * t335 - t250 * t336, t250 * t338 - t252 * t335, 0, 0, 0, 0, 0, 0, 0, 0, t52, t51, 0, t68 * qJD(2) + (-t323 - t384) * t394, 0, 0, 0, 0, 0, 0, t2, t3, t1, t369 + t17 * qJD(2) + (-t362 * t384 - t323) * t394 + t397; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52, t51, 0, 0, 0, 0, 0, 0, 0, 0, t2, t3, t1, t414; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43 * qJD(2) - qJD(5) * t279 + t334 * t90, t42 * qJD(2) + t167 * qJD(5) + t334 * t91, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t342, 0, 0, 0, 0, 0, 0, -t334 * t134, -t334 * t135, 0, qJD(3) * t69 - t393, 0, 0, 0, 0, 0, 0, -t40 * qJD(5) + t12 * t334, -t41 * qJD(5) + t15 * t334, t22 * t334, qJD(3) * t18 - t379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t314, t234 * qJD(3), 0, -t314, 0, 0, 0, 0, 0, 0, t286, -t334 * t333, 0, -t284, 0, 0, qJD(3) * t147 - t222 * t329, qJD(3) * t148 - t270 * t329, 0, -t254 * t314, t245 * t286 - t292, -t156 * qJD(5) - t265 * t270, t222 * t317 + t334 * t83, t243 * t286 + t292, t222 * t316 - t334 * t82, -t284, t112 * qJD(3) + (-t222 * t354 - t317) * t398, -t111 * qJD(3) + (qJD(4) * t380 - t316) * t398, -qJD(3) * t53 + qJD(4) * t110, -t197 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t240, t339, t336, -t240, -t338, 0, 0, 0, 0, 0, t315, -t351, t304, -t315, -t166, 0, -t417, -t419, t260, -t266, t39, t34, t36, t38, t35, t92, t74 * qJD(5) + t247 * t260 - t416, t73 * qJD(5) + t251 * t260 - t415, t412, t277; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t315, -t351, t304, -t315, -t166, 0, -t418, -t420, 0, 0, t39, t34, t36, t38, t35, t92, t410, t411, t413, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t44, t285 * t423 - t343, -t247 * t275, t44, -t269, t154, t74 * qJD(3) + t247 * t274 - t368, t73 * qJD(3) + t251 * t274 - t367, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, t115, 0, -qJD(2) * t69, 0, 0, 0, 0, 0, 0, -t6, -t5, -t4, -qJD(2) * t18 - t369 + t397; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t240, -t339, 0, t240, 0, 0, 0, 0, 0, 0, -t315, t351, 0, t315, 0, 0, t417, t419, 0, t266, t62, t67, t49, t61, t48, -t92, -qJD(5) * t75 + t416, qJD(5) * t72 + t415, -t412, -t277; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t328, -pkin(2) * t307, 0, 0, t239, t227, 0, -t239, 0, 0, (-t248 * t354 - t289) * pkin(2), -pkin(2) * t288 + t232, t214, t172 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -pkin(2) * t302, t261 * pkin(2), 0, 0, t239, t227, 0, -t239, 0, 0, (-t251 * t302 - t289) * pkin(2), t232 + (-t288 + t318) * pkin(2), t214 + t341, t276; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, t109, t104, t70, t103, -t340, -t365 + (t247 * t261 - t248 * t352) * pkin(2), t366 + (t248 * t353 + t251 * t261) * pkin(2), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, t115, 0, 0, 0, 0, 0, 0, 0, 0, -t6, -t5, -t4, -t414; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t315, t351, 0, t315, 0, 0, t418, t420, 0, 0, t62, t67, t49, t61, t48, -t92, -t410, -t411, -t413, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t327, t293, 0, 0, t239, t227, 0, -t239, 0, 0, t251 * t327, -pkin(2) * t318, -t341, -t276; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t239, t227, 0, -t239, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, t109, t104, t70, t103, -t340, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40 * qJD(2), t41 * qJD(2), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, t265 + t343, t153 * t334 - t247 * t315, -t44, -t150 * t334 - t251 * t315, t154, qJD(3) * t75 + t270 * t296 + t368, -qJD(3) * t72 + t270 * t295 + t367, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, -t109, t133, t71, -t344, t340, t247 * t293 + t365, t251 * t293 - t366, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, -t109, t133, t71, -t344, t340, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg  = t7;
