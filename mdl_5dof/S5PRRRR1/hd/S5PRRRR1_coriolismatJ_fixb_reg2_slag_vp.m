% Calculate inertial parameters regressor of coriolis matrix for
% S5PRRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [2x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a4]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:03
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PRRRR1_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(2,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR1_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR1_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [2 1]), ...
  'S5PRRRR1_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [2x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:03:29
% EndTime: 2019-12-05 17:03:38
% DurationCPUTime: 4.10s
% Computational Cost: add. (2410->253), mult. (7532->400), div. (0->0), fcn. (8325->8), ass. (0->250)
t249 = sin(qJ(3));
t399 = cos(qJ(4));
t319 = t399 * t249;
t248 = sin(qJ(4));
t252 = cos(qJ(3));
t372 = t248 * t252;
t222 = t319 + t372;
t219 = t222 ^ 2;
t247 = sin(qJ(5));
t243 = t247 ^ 2;
t251 = cos(qJ(5));
t245 = t251 ^ 2;
t233 = t245 - t243;
t156 = t233 * t219;
t420 = 0.2e1 * t222;
t331 = qJD(3) + qJD(4);
t419 = t331 * t251;
t421 = t247 * t419;
t265 = t421 * t420;
t422 = t156 * qJD(2) + t265;
t402 = -t245 / 0.2e1;
t149 = (t243 / 0.2e1 + t402) * t222;
t71 = -t149 * qJD(2) + t421;
t359 = t243 + t245;
t318 = t399 * t252;
t373 = t248 * t249;
t270 = t318 - t373;
t301 = t270 * t331;
t330 = -t270 ^ 2 + t219;
t253 = cos(qJ(2));
t250 = sin(qJ(2));
t204 = t270 * t250;
t376 = t247 * t204;
t167 = t253 * t251 + t376;
t279 = t251 * t204 - t253 * t247;
t418 = t247 * t167 + t279 * t251;
t356 = qJD(2) * t252;
t327 = pkin(2) * t356;
t296 = t270 * t327;
t262 = -t318 / 0.2e1 + t373 / 0.2e1;
t135 = (t270 / 0.2e1 + t262) * t253;
t346 = t135 * qJD(1);
t417 = t346 + t296;
t380 = t270 * t252;
t148 = (t222 * t249 - t380) * pkin(2);
t416 = -t148 * qJD(2) + t346;
t295 = t222 * t327;
t218 = t319 / 0.2e1 + t372 / 0.2e1;
t134 = (t222 / 0.2e1 - t218) * t253;
t347 = t134 * qJD(1);
t415 = t347 + t295;
t278 = -t222 * t252 - t249 * t270;
t147 = t278 * pkin(2);
t414 = -t147 * qJD(2) + t347;
t112 = t251 * t147;
t405 = -t167 / 0.2e1;
t273 = (t405 + t376 / 0.2e1) * t222;
t203 = t253 * t222;
t382 = t203 * t251;
t12 = t382 / 0.2e1 + t273;
t390 = t12 * qJD(1);
t413 = -t112 * qJD(2) - t390;
t398 = pkin(2) * t247;
t111 = t278 * t398;
t308 = t203 / 0.2e1;
t404 = -t203 / 0.2e1;
t15 = (t308 + t404) * t247;
t389 = t15 * qJD(1);
t412 = t111 * qJD(2) - t389;
t320 = t399 * t204;
t328 = t399 / 0.2e1;
t202 = t222 * t250;
t383 = t202 * t248;
t16 = (-t320 / 0.2e1 + (t402 - t243 / 0.2e1 + 0.1e1 / 0.2e1) * t383 + t418 * t328) * pkin(2);
t26 = (t204 - t418) * t202;
t368 = t26 * qJD(1);
t411 = t16 * qJD(3) + t368;
t110 = t359 * pkin(2) * t380;
t401 = t247 / 0.2e1;
t258 = t251 * t405 + t279 * t401;
t256 = t258 * t270;
t370 = t250 * t251;
t205 = t270 * t253;
t375 = t247 * t205;
t168 = t370 - t375;
t369 = t251 * t205;
t371 = t250 * t247;
t169 = t369 + t371;
t386 = t169 * t251;
t272 = -t386 / 0.2e1 + t168 * t401;
t22 = -t256 + t272;
t381 = t22 * qJD(1);
t410 = t110 * qJD(2) + t381;
t303 = t359 * t249;
t53 = t222 * pkin(2) * t303 - t110;
t409 = -t53 * qJD(2) + t381;
t408 = t247 * t295 + t389;
t407 = -t251 * t295 + t390;
t374 = t247 * t251;
t317 = qJD(2) * t374;
t44 = t331 * t149 + t219 * t317;
t109 = -0.2e1 * t222 * t317 + t331 * t233;
t403 = -t270 / 0.2e1;
t400 = t249 / 0.2e1;
t397 = pkin(2) * t251;
t396 = pkin(2) * t252;
t395 = t248 * pkin(2);
t394 = t16 * qJD(4);
t392 = pkin(2) * qJD(4);
t391 = qJD(3) * pkin(2);
t387 = t167 * t270;
t385 = t202 * t203;
t384 = t202 * t222;
t379 = t222 * t247;
t23 = -t167 * t168 + t279 * t169 + t385;
t378 = t23 * qJD(1);
t310 = -t384 / 0.2e1;
t257 = t251 * t310 + t279 * t403;
t271 = -t375 / 0.2e1 + t370 / 0.2e1;
t40 = t257 + t271;
t367 = t40 * qJD(1);
t309 = -t369 / 0.2e1;
t41 = t309 + t387 / 0.2e1 + (-t250 / 0.2e1 + t384 / 0.2e1) * t247;
t366 = t41 * qJD(1);
t241 = t250 * t253;
t50 = t204 * t205 - t241 + t385;
t365 = t50 * qJD(1);
t264 = t222 * t328 + t248 * t403;
t259 = t400 + t264;
t72 = t259 * t398;
t363 = t72 * qJD(2);
t75 = t259 * t397;
t362 = t75 * qJD(2);
t82 = t330 * t247;
t361 = t82 * qJD(2);
t83 = t330 * t251;
t360 = t83 * qJD(2);
t358 = qJD(2) * t270;
t357 = qJD(2) * t222;
t355 = qJD(3) * t248;
t354 = qJD(4) * t251;
t353 = qJD(5) * t247;
t352 = qJD(5) * t251;
t351 = t330 * qJD(2);
t342 = t149 * qJD(5);
t150 = t247 * t270;
t341 = t150 * qJD(2);
t153 = t251 * t270;
t133 = t153 * qJD(2);
t244 = t249 ^ 2;
t246 = t252 ^ 2;
t302 = (t244 + t246) * t253;
t175 = t250 * t302 - t241;
t339 = t175 * qJD(1);
t263 = t359 * t399;
t217 = t263 * pkin(2);
t338 = t217 * qJD(3);
t337 = t218 * qJD(2);
t234 = t246 - t244;
t336 = t234 * qJD(2);
t335 = t249 * qJD(3);
t334 = t250 * qJD(2);
t333 = t252 * qJD(3);
t332 = t253 * qJD(2);
t326 = t252 * t392;
t325 = t248 * t392;
t324 = pkin(2) * t355;
t323 = -t398 / 0.2e1;
t322 = t395 / 0.2e1;
t321 = t203 * t399;
t316 = t252 * t334;
t315 = t247 * t355;
t314 = t270 * t353;
t313 = t270 * t352;
t312 = t270 * t357;
t239 = t247 * t352;
t311 = t249 * t333;
t240 = t249 * t356;
t307 = -t253 * t249 / 0.2e1;
t306 = qJD(5) * t399;
t305 = t399 * qJD(3);
t304 = t399 * qJD(4);
t166 = t331 * t222;
t299 = t331 * t202;
t298 = t331 * t247;
t294 = qJD(5) - t358;
t293 = pkin(2) * t305;
t292 = t219 * t239;
t289 = t247 * t306;
t288 = t251 * t306;
t287 = t321 / 0.2e1;
t286 = t270 * t166;
t284 = t222 * t301;
t280 = -pkin(2) * t321 / 0.2e1;
t255 = t258 * t249;
t18 = (t272 * t248 + t255 + t287) * pkin(2);
t254 = pkin(2) ^ 2;
t197 = t254 * t252 * t303;
t277 = t18 * qJD(1) - t197 * qJD(2);
t172 = (-t399 + t263) * t254 * t248;
t276 = t16 * qJD(1) + t172 * qJD(3);
t275 = t222 * t294;
t274 = t294 * t396;
t269 = t251 * t275;
t92 = t218 * qJD(5) - t312;
t267 = qJD(2) * (-t168 * t251 - t169 * t247);
t69 = (t307 - t205 * t248 / 0.2e1 + t287) * pkin(2);
t266 = -t69 * qJD(1) + t254 * t240;
t261 = -t305 - t304;
t260 = (-t222 * t248 - t270 * t399) * t391;
t232 = t247 * t325;
t227 = t233 * qJD(5);
t214 = t217 * qJD(4);
t154 = t331 * t218;
t137 = -t218 * t253 + t404;
t136 = (t262 + t403) * t253;
t115 = t135 * qJD(2);
t113 = t134 * qJD(2);
t104 = -t133 + t352;
t103 = t341 - t353;
t91 = t202 * t251;
t90 = t202 * t247;
t74 = (-t264 + t400) * t397;
t73 = t249 * t323 + t264 * t398;
t68 = pkin(2) * t307 + t205 * t322 + t280;
t67 = -0.2e1 * t247 * t269;
t62 = -t245 * t312 - t342;
t61 = -t243 * t312 + t342;
t52 = t137 * qJD(2) - t331 * t204;
t51 = t136 * qJD(2) + t299;
t49 = -t153 * qJD(5) - t360;
t48 = t150 * qJD(5) + t361;
t43 = -t257 + t271;
t42 = -t387 / 0.2e1 + t247 * t310 + t309 - t371 / 0.2e1;
t39 = -t342 - (-t245 * t357 - t421) * t270;
t38 = t342 - (-t243 * t357 + t421) * t270;
t36 = t222 * t298 + t360;
t35 = t222 * t419 - t361;
t34 = (-qJD(5) - t358) * t374 * t420 + t233 * t301;
t21 = -t256 - t272;
t17 = t168 * t248 * t323 + pkin(2) * t255 + t322 * t386 + t280;
t14 = t203 * t401 + t247 * t308;
t13 = -t382 / 0.2e1 + t273;
t6 = t12 * qJD(2);
t5 = t15 * qJD(2);
t4 = t22 * qJD(2);
t3 = t14 * qJD(2) + t91 * qJD(5) + t204 * t298;
t2 = t13 * qJD(2) + t90 * qJD(5) - t204 * t419;
t1 = t21 * qJD(2) - t359 * t299;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t175 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t50 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t23 * qJD(2) + t26 * t331; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t334, -t332, 0, 0, 0, 0, 0, 0, 0, 0, -t253 * t335 - t316, t249 * t334 - t253 * t333, qJD(2) * t302, t339, 0, 0, 0, 0, 0, 0, t137 * t331 - t270 * t334, t136 * t331 + t222 * t334, (t203 * t222 + t205 * t270) * qJD(2), -pkin(2) * t316 + t68 * qJD(3) + t365, 0, 0, 0, 0, 0, 0, (-t168 * t270 + t203 * t379) * qJD(2) + t43 * qJD(5) + t331 * t13, (t169 * t270 + t222 * t382) * qJD(2) + t42 * qJD(5) + t331 * t14, t21 * t331 + t222 * t267, t17 * qJD(3) + t267 * t396 + t378; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t249 * t332 - t250 * t333, t250 * t335 - t252 * t332, 0, 0, 0, 0, 0, 0, 0, 0, t52, t51, 0, t68 * qJD(2) + (-t320 - t383) * t391, 0, 0, 0, 0, 0, 0, t2, t3, t1, t368 + t17 * qJD(2) + (-t359 * t383 - t320) * t391 + t394; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t52, t51, 0, 0, 0, 0, 0, 0, 0, 0, t2, t3, t1, t411; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43 * qJD(2) - qJD(5) * t279 + t331 * t90, t42 * qJD(2) + t167 * qJD(5) + t331 * t91, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t339, 0, 0, 0, 0, 0, 0, -t331 * t134, -t331 * t135, 0, t69 * qJD(3) - t365, 0, 0, 0, 0, 0, 0, -t40 * qJD(5) + t12 * t331, -t41 * qJD(5) + t15 * t331, t22 * t331, t18 * qJD(3) - t378; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t311, t234 * qJD(3), 0, -t311, 0, 0, 0, 0, 0, 0, t286, -t331 * t330, 0, -t284, 0, 0, t147 * qJD(3) - t222 * t326, t148 * qJD(3) - t270 * t326, 0, -t254 * t311, t245 * t286 - t292, -t156 * qJD(5) - t265 * t270, t222 * t314 + t331 * t83, t243 * t286 + t292, t222 * t313 - t331 * t82, -t284, t112 * qJD(3) + (-t222 * t354 - t314) * t396, -t111 * qJD(3) + (qJD(4) * t379 - t313) * t396, -t53 * qJD(3) + t110 * qJD(4), -t197 * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t240, t336, t333, -t240, -t335, 0, 0, 0, 0, 0, t312, -t351, t301, -t312, -t166, 0, -t414, -t416, t260, -t266, t39, t34, t36, t38, t35, t92, t74 * qJD(5) + t247 * t260 - t413, t73 * qJD(5) + t251 * t260 - t412, t409, t277; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t312, -t351, t301, -t312, -t166, 0, -t415, -t417, 0, 0, t39, t34, t36, t38, t35, t92, t407, t408, t410, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t44, -t422, -t247 * t275, t44, -t269, t154, t74 * qJD(3) + t247 * t274 - t367, t73 * qJD(3) + t251 * t274 - t366, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, t115, 0, -t69 * qJD(2), 0, 0, 0, 0, 0, 0, -t6, -t5, -t4, -t18 * qJD(2) - t368 + t394; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t240, -t336, 0, t240, 0, 0, 0, 0, 0, 0, -t312, t351, 0, t312, 0, 0, t414, t416, 0, t266, t62, t67, t49, t61, t48, -t92, -t75 * qJD(5) + t413, t72 * qJD(5) + t412, -t409, -t277; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t325, -pkin(2) * t304, 0, 0, t239, t227, 0, -t239, 0, 0, (-t248 * t354 - t289) * pkin(2), -pkin(2) * t288 + t232, t214, t172 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t331 * t395, t261 * pkin(2), 0, 0, t239, t227, 0, -t239, 0, 0, (-t248 * t419 - t289) * pkin(2), t232 + (-t288 + t315) * pkin(2), t214 + t338, t276; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, t109, t104, -t71, t103, -t337, -t362 + (t247 * t261 - t248 * t352) * pkin(2), t363 + (t248 * t353 + t251 * t261) * pkin(2), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t113, t115, 0, 0, 0, 0, 0, 0, 0, 0, -t6, -t5, -t4, -t411; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t312, t351, 0, t312, 0, 0, t415, t417, 0, 0, t62, t67, t49, t61, t48, -t92, -t407, -t408, -t410, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t324, t293, 0, 0, t239, t227, 0, -t239, 0, 0, t251 * t324, -pkin(2) * t315, -t338, -t276; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t239, t227, 0, -t239, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, t109, t104, -t71, t103, -t337, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40 * qJD(2), t41 * qJD(2), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t44, t422, t153 * t331 - t247 * t312, -t44, -t150 * t331 - t251 * t312, t154, t75 * qJD(3) + t247 * t296 + t367, -t72 * qJD(3) + t251 * t296 + t366, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t71, -t109, t133, t71, -t341, t337, t247 * t293 + t362, t251 * t293 - t363, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t71, -t109, t133, t71, -t341, t337, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t7;
