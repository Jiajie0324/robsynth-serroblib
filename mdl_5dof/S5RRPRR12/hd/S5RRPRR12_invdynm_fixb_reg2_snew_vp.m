% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPRR12
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:31
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPRR12_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR12_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR12_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR12_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR12_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPRR12_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:30:59
% EndTime: 2019-12-31 20:31:12
% DurationCPUTime: 13.63s
% Computational Cost: add. (49561->654), mult. (103679->780), div. (0->0), fcn. (64647->8), ass. (0->420)
t1078 = cos(qJ(2));
t1171 = qJD(2) * t1078;
t1056 = qJD(1) * t1171;
t1074 = sin(qJ(2));
t1147 = t1074 * qJDD(1);
t1030 = 0.2e1 * t1056 + t1147;
t1075 = sin(qJ(1));
t1079 = cos(qJ(1));
t1080 = qJD(2) ^ 2;
t1068 = t1074 ^ 2;
t1081 = qJD(1) ^ 2;
t1166 = t1068 * t1081;
t1044 = t1080 + t1166;
t1153 = t1078 * t1081;
t1049 = t1074 * t1153;
t1040 = qJDD(2) - t1049;
t1154 = t1078 * t1040;
t994 = -t1074 * t1044 + t1154;
t1227 = pkin(5) * (-t1075 * t1030 + t1079 * t994);
t1226 = pkin(5) * (t1079 * t1030 + t1075 * t994);
t1073 = sin(qJ(4));
t1065 = qJDD(2) - qJDD(4);
t1077 = cos(qJ(4));
t1014 = (t1073 * t1074 + t1077 * t1078) * qJD(1);
t1172 = qJD(1) * t1078;
t1173 = qJD(1) * t1074;
t1016 = -t1073 * t1172 + t1077 * t1173;
t1167 = t1016 * t1014;
t1222 = -t1065 - t1167;
t1225 = t1073 * t1222;
t1224 = t1077 * t1222;
t1223 = pkin(6) * t994;
t1160 = t1074 * t1040;
t988 = t1078 * t1044 + t1160;
t1219 = pkin(1) * t988;
t1218 = pkin(6) * t988;
t1039 = qJDD(2) + t1049;
t1069 = t1078 ^ 2;
t1165 = t1069 * t1081;
t1047 = -t1080 - t1165;
t1186 = t1078 * g(3);
t1093 = -qJDD(2) * pkin(2) - t1080 * qJ(3) + qJDD(3) + t1186;
t1043 = t1079 * g(1) + t1075 * g(2);
t1018 = -t1081 * pkin(1) + qJDD(1) * pkin(6) - t1043;
t1189 = pkin(2) * t1078;
t1108 = -qJ(3) * t1074 - t1189;
t1028 = t1108 * qJD(1);
t1126 = qJD(1) * t1028 + t1018;
t941 = t1126 * t1074 + t1093;
t1217 = pkin(2) * t1039 + qJ(3) * t1047 - t941;
t1150 = qJD(2) - qJD(4);
t1129 = t1014 * t1150;
t1031 = t1056 + t1147;
t1060 = t1078 * qJDD(1);
t1135 = qJD(2) * t1173;
t1105 = -t1060 + t1135;
t943 = -t1014 * qJD(4) + t1077 * t1031 + t1073 * t1105;
t918 = t943 + t1129;
t1072 = sin(qJ(5));
t1076 = cos(qJ(5));
t978 = t1072 * t1016 + t1076 * t1150;
t980 = t1076 * t1016 - t1072 * t1150;
t936 = t980 * t978;
t1125 = t1073 * t1031 - t1077 * t1105;
t942 = -t1016 * qJD(4) - t1125;
t938 = qJDD(5) - t942;
t1210 = -t936 + t938;
t1216 = t1072 * t1210;
t1215 = t1076 * t1210;
t1145 = t1079 * qJDD(1);
t1046 = -t1080 + t1165;
t992 = -t1078 * t1046 + t1160;
t1214 = t1075 * t992 + t1078 * t1145;
t1038 = (t1068 - t1069) * t1081;
t1163 = t1074 * t1030;
t1032 = t1060 - 0.2e1 * t1135;
t982 = t1078 * t1032;
t972 = -t982 + t1163;
t1213 = t1079 * t1038 + t1075 * t972;
t1212 = -t1075 * t1060 + t1079 * t992;
t1211 = -t1075 * t1038 + t1079 * t972;
t1144 = t1150 ^ 2;
t1128 = t1150 * t1016;
t1041 = -qJD(2) * pkin(3) - pkin(7) * t1173;
t1042 = t1075 * g(1) - t1079 * g(2);
t1017 = qJDD(1) * pkin(1) + t1081 * pkin(6) + t1042;
t1086 = -pkin(2) * t1135 + t1017;
t1199 = 2 * qJD(3);
t891 = t1060 * pkin(2) + t1031 * qJ(3) - t1105 * pkin(3) - pkin(7) * t1165 + (qJ(3) * t1171 + (-pkin(2) * qJD(2) + t1041 + t1199) * t1074) * qJD(1) + t1086;
t821 = -t918 * pkin(8) + (-t942 - t1128) * pkin(4) + t891;
t1082 = -qJDD(2) * pkin(3) + (-t1031 + t1056) * pkin(7) + (-pkin(3) * t1153 + t1126) * t1074 + t1093;
t1170 = qJD(3) * qJD(2);
t1061 = 0.2e1 * t1170;
t998 = -t1074 * g(3) + t1078 * t1018;
t1100 = -t1080 * pkin(2) + qJDD(2) * qJ(3) + t1028 * t1172 + t998;
t937 = t1061 + t1100;
t902 = -pkin(3) * t1165 + pkin(7) * t1105 + qJD(2) * t1041 + t937;
t841 = t1073 * t1082 + t1077 * t902;
t966 = t1014 * pkin(4) - t1016 * pkin(8);
t826 = -t1144 * pkin(4) - t1065 * pkin(8) - t1014 * t966 + t841;
t777 = t1072 * t826 - t1076 * t821;
t778 = t1072 * t821 + t1076 * t826;
t748 = t1072 * t777 + t1076 * t778;
t840 = t1073 * t902 - t1077 * t1082;
t790 = t1073 * t841 - t1077 * t840;
t984 = t1074 * t1046 + t1154;
t1010 = qJD(5) + t1014;
t1130 = -t1076 * t1065 - t1072 * t943;
t875 = (-qJD(5) + t1010) * t980 + t1130;
t1104 = t1072 * t1065 - t1076 * t943;
t1087 = -t978 * qJD(5) - t1104;
t953 = t1010 * t978;
t877 = t1087 + t953;
t816 = t1072 * t877 + t1076 * t875;
t975 = t978 ^ 2;
t976 = t980 ^ 2;
t901 = t975 + t976;
t1127 = pkin(4) * t901 + pkin(8) * t816 + t748;
t1198 = pkin(2) + pkin(3);
t788 = t1073 * t816 + t1077 * t901;
t789 = -t1073 * t901 + t1077 * t816;
t1207 = qJ(3) * t789 - t1198 * t788 - t1127;
t1012 = t1014 ^ 2;
t956 = -t1144 - t1012;
t903 = t1073 * t956 + t1224;
t904 = t1077 * t956 - t1225;
t1206 = qJ(3) * t904 - t1198 * t903 + t840;
t825 = t1065 * pkin(4) - t1144 * pkin(8) + t1016 * t966 + t840;
t822 = t1072 * t825;
t885 = t936 + t938;
t1177 = t1076 * t885;
t1008 = t1010 ^ 2;
t928 = -t976 - t1008;
t837 = -t1072 * t928 - t1177;
t878 = (qJD(5) + t1010) * t978 + t1104;
t1143 = pkin(4) * t878 + pkin(8) * t837 + t822;
t797 = t1073 * t837 + t1077 * t878;
t798 = -t1073 * t878 + t1077 * t837;
t1205 = qJ(3) * t798 - t1198 * t797 - t1143;
t823 = t1076 * t825;
t913 = -t1008 - t975;
t834 = t1076 * t913 - t1216;
t896 = -t980 * qJD(5) + t1130;
t954 = t1010 * t980;
t874 = t896 - t954;
t1142 = -pkin(4) * t874 - pkin(8) * t834 + t823;
t794 = t1073 * t834 + t1077 * t874;
t795 = -t1073 * t874 + t1077 * t834;
t1204 = qJ(3) * t795 - t1198 * t794 + t1142;
t963 = -t1167 + t1065;
t1178 = t1073 * t963;
t1013 = t1016 ^ 2;
t996 = -t1013 - t1144;
t920 = t1077 * t996 + t1178;
t1176 = t1077 * t963;
t921 = -t1073 * t996 + t1176;
t1203 = qJ(3) * t921 - t1198 * t920 + t841;
t1183 = pkin(4) * t825 - pkin(8) * t748;
t743 = t1073 * t748 - t1077 * t825;
t744 = t1073 * t825 + t1077 * t748;
t1202 = qJ(3) * t744 - t1198 * t743 + t1183;
t915 = qJD(2) * t1016 + t1125;
t919 = -t1129 + t943;
t856 = -t1073 * t915 - t1077 * t919;
t858 = t1073 * t919 - t1077 * t915;
t1201 = qJ(3) * t858 - t1198 * t856;
t791 = t1073 * t840 + t1077 * t841;
t1200 = qJ(3) * t791 - t1198 * t790;
t1023 = t1078 * t1039;
t985 = t1074 * t1047 + t1023;
t1197 = pkin(1) * t985;
t1161 = t1074 * t1039;
t991 = t1078 * t1047 - t1161;
t1196 = pkin(5) * (t1079 * t1032 + t1075 * t991);
t1148 = t1068 + t1069;
t1034 = t1148 * qJDD(1);
t1037 = t1148 * t1081;
t1195 = pkin(5) * (t1075 * t1034 + t1079 * t1037);
t1194 = pkin(6) * t985;
t1193 = pkin(7) * t744;
t1192 = pkin(7) * t790;
t1191 = pkin(7) * t791;
t1188 = pkin(4) * t1073;
t1187 = pkin(8) * t1077;
t1181 = t1072 * t885;
t1179 = t1073 * t891;
t887 = t1077 * t891;
t1175 = pkin(1) * t1032 + pkin(6) * t991;
t1174 = qJD(1) * qJD(2);
t1169 = t1010 * t1072;
t1168 = t1010 * t1076;
t1164 = t1074 * t1017;
t1162 = t1074 * t1032;
t1155 = t1078 * t1017;
t1149 = pkin(1) * t1037 + pkin(6) * t1034;
t1146 = t1075 * qJDD(1);
t1141 = t1073 * t936;
t1140 = t1077 * t936;
t1139 = pkin(4) * t1077 + pkin(3);
t1138 = t978 * t1169;
t747 = t1072 * t778 - t1076 * t777;
t1137 = -pkin(7) * t743 + t747 * t1188;
t1136 = -pkin(7) * t920 + t887;
t1134 = t1075 * t1167;
t1133 = t1079 * t1167;
t997 = t1074 * t1018 + t1186;
t935 = t1074 * t997 + t1078 * t998;
t1124 = -t1075 * t1042 - t1079 * t1043;
t814 = t1072 * t875 - t1076 * t877;
t742 = -pkin(8) * t814 - t747;
t1123 = -pkin(7) * t788 + t1077 * t742 + t814 * t1188;
t1122 = t1075 * t1049;
t1121 = t1079 * t1049;
t1118 = -pkin(2) * t941 + qJ(3) * t937;
t1036 = -t1075 * t1081 + t1145;
t1117 = -pkin(5) * t1036 - t1075 * g(3);
t1116 = -pkin(7) * t789 - t1073 * t742;
t1115 = -pkin(7) * t903 + t1179;
t1114 = -pkin(7) * t921 - t1179;
t1113 = -pkin(7) * t904 + t887;
t1112 = t1073 * t1129;
t1111 = t1073 * t1128;
t1110 = t1077 * t1129;
t1109 = t1077 * t1128;
t1107 = pkin(2) * t1074 - qJ(3) * t1078;
t1106 = t1031 + t1056;
t933 = t1074 * t998 - t1078 * t997;
t1103 = -pkin(8) * t1073 - t1139;
t969 = t1078 * t1030 + t1162;
t1099 = t1079 * t1042 - t1075 * t1043;
t833 = t1072 * t913 + t1215;
t760 = -pkin(4) * t833 + t777;
t781 = -pkin(8) * t833 + t822;
t1097 = -pkin(7) * t794 - t1073 * t760 + t1077 * t781;
t836 = t1076 * t928 - t1181;
t763 = -pkin(4) * t836 + t778;
t783 = -pkin(8) * t836 + t823;
t1096 = -pkin(7) * t797 - t1073 * t763 + t1077 * t783;
t1095 = -pkin(7) * t856 - t790;
t1094 = -pkin(7) * t858 - t791;
t1091 = t1105 * pkin(2);
t1089 = -pkin(7) * t795 - t1073 * t781 - t1077 * t760;
t1088 = -pkin(7) * t798 - t1073 * t783 - t1077 * t763;
t1085 = pkin(2) * t1044 + qJ(3) * t1040 + t1100;
t1084 = t1173 * t1199 + t1086;
t1083 = qJ(3) * t1106 + t1084;
t1045 = -t1080 + t1166;
t1035 = t1079 * t1081 + t1146;
t1026 = t1107 * qJDD(1);
t1022 = t1148 * t1174;
t1011 = -pkin(5) * t1035 + t1079 * g(3);
t1004 = -t1013 + t1144;
t1003 = t1012 - t1144;
t1002 = t1075 * qJDD(2) + t1079 * t1022;
t1001 = t1078 * t1031 - t1068 * t1174;
t1000 = -t1079 * qJDD(2) + t1075 * t1022;
t999 = -t1069 * t1174 + t1074 * t1105;
t993 = t1074 * t1045 + t1023;
t987 = -t1078 * t1045 + t1161;
t983 = t1106 * t1074;
t973 = pkin(5) * (t1079 * t1034 - t1075 * t1037);
t967 = t1013 - t1012;
t962 = t1079 * t1001 - t1122;
t961 = t1079 * t999 + t1122;
t960 = t1075 * t1001 + t1121;
t959 = t1075 * t999 - t1121;
t958 = t1074 * t1146 + t1079 * t993;
t957 = -t1074 * t1145 + t1075 * t993;
t952 = pkin(5) * (-t1075 * t1032 + t1079 * t991);
t951 = -t976 + t1008;
t950 = t975 - t1008;
t949 = t1110 - t1111;
t948 = t1112 + t1109;
t947 = -t1155 + t1218;
t946 = -t1164 - t1194;
t945 = t980 * t1168;
t944 = -t1012 - t1013;
t940 = t998 + t1219;
t939 = t997 - t1197;
t932 = t976 - t975;
t931 = t1155 + t1175;
t930 = -pkin(1) * t1030 - t1164 - t1223;
t929 = qJ(3) * t1037 + t941;
t927 = pkin(2) * t1037 + t937;
t926 = -t1091 + t1083;
t925 = t1077 * t1003 + t1178;
t924 = -t1073 * t1004 + t1224;
t923 = t1073 * t1003 - t1176;
t922 = t1077 * t1004 + t1225;
t914 = (0.2e1 * qJD(4) - qJD(2)) * t1016 + t1125;
t912 = pkin(1) * t1017 + pkin(6) * t935;
t911 = t1077 * t943 + t1111;
t910 = t1073 * t943 - t1109;
t909 = -t1073 * t942 - t1110;
t908 = -t1077 * t942 + t1112;
t907 = (t1032 - t1105) * pkin(2) + t1083;
t906 = -t1091 + (t1030 + t1106) * qJ(3) + t1084;
t905 = t935 + t1149;
t894 = (t1072 * t980 - t1076 * t978) * t1010;
t893 = -t945 - t1138;
t892 = -t1197 - t1217;
t890 = -t1085 - 0.2e1 * t1170 - t1219;
t889 = t1074 * t948 + t1078 * t949;
t888 = t1074 * t949 - t1078 * t948;
t883 = t1074 * t941 + t1078 * t937;
t882 = t1074 * t937 - t1078 * t941;
t881 = -pkin(2) * t1163 + t1078 * t906 - t1218;
t880 = qJ(3) * t982 - t1074 * t907 - t1194;
t879 = -t1074 * t927 + t1078 * t929;
t876 = t1087 - t953;
t873 = -t896 - t954;
t870 = t1074 * t923 + t1078 * t925;
t869 = t1074 * t922 + t1078 * t924;
t868 = t1074 * t925 - t1078 * t923;
t867 = t1074 * t924 - t1078 * t922;
t866 = t1223 + t1074 * t906 + (pkin(1) + t1189) * t1030;
t865 = qJ(3) * t1162 + t1078 * t907 + t1175;
t864 = t1076 * t1087 - t980 * t1169;
t863 = -t1072 * t1087 - t945;
t862 = -t1072 * t896 + t978 * t1168;
t861 = t1076 * t896 + t1138;
t860 = t1074 * t920 + t1078 * t921;
t859 = t1074 * t921 - t1078 * t920;
t857 = -t1073 * t918 - t1077 * t914;
t855 = -t1073 * t914 + t1077 * t918;
t854 = t1073 * t938 + t1077 * t894;
t853 = t1073 * t894 - t1077 * t938;
t852 = t1074 * t929 + t1078 * t927 + t1149;
t851 = t1076 * t950 - t1181;
t850 = -t1072 * t951 + t1215;
t849 = t1072 * t950 + t1177;
t848 = t1076 * t951 + t1216;
t847 = t1074 * t910 + t1078 * t911;
t846 = -t1074 * t908 + t1078 * t909;
t845 = t1074 * t911 - t1078 * t910;
t844 = t1074 * t909 + t1078 * t908;
t843 = t1074 * t903 + t1078 * t904;
t842 = t1074 * t904 - t1078 * t903;
t831 = t1077 * t864 + t1141;
t830 = t1077 * t862 - t1141;
t829 = t1073 * t864 - t1140;
t828 = t1073 * t862 + t1140;
t827 = -pkin(1) * t882 - t1118;
t820 = qJ(3) * t918 + t1136;
t818 = -pkin(6) * t882 - t1107 * t926;
t817 = qJ(3) * t914 + t1115;
t815 = -t1072 * t876 + t1076 * t874;
t813 = t1072 * t874 + t1076 * t876;
t810 = t1074 * t856 + t1078 * t858;
t809 = t1074 * t855 + t1078 * t857;
t808 = t1074 * t858 - t1078 * t856;
t807 = t1074 * t857 - t1078 * t855;
t806 = -t1073 * t873 + t1077 * t851;
t805 = t1073 * t877 + t1077 * t850;
t804 = t1073 * t851 + t1077 * t873;
t803 = t1073 * t850 - t1077 * t877;
t802 = pkin(6) * t883 + (pkin(1) - t1108) * t926;
t801 = t1198 * t918 + t1114;
t800 = t1074 * t853 + t1078 * t854;
t799 = t1074 * t854 - t1078 * t853;
t796 = t1198 * t914 + t1113;
t793 = t1073 * t932 + t1077 * t815;
t792 = t1073 * t815 - t1077 * t932;
t787 = t1074 * t829 + t1078 * t831;
t786 = t1074 * t828 + t1078 * t830;
t785 = t1074 * t831 - t1078 * t829;
t784 = t1074 * t830 - t1078 * t828;
t779 = qJ(3) * t891 - t1192;
t774 = -pkin(1) * t859 - t1203;
t773 = qJ(3) * t944 + t1095;
t772 = t1198 * t891 - t1191;
t771 = -pkin(1) * t842 - t1206;
t770 = t1198 * t944 + t1094;
t769 = t1074 * t804 + t1078 * t806;
t768 = t1074 * t803 + t1078 * t805;
t767 = t1074 * t806 - t1078 * t804;
t766 = t1074 * t805 - t1078 * t803;
t765 = t1074 * t797 + t1078 * t798;
t764 = t1074 * t798 - t1078 * t797;
t762 = t1074 * t794 + t1078 * t795;
t761 = t1074 * t795 - t1078 * t794;
t759 = t1074 * t792 + t1078 * t793;
t758 = t1074 * t793 - t1078 * t792;
t757 = t1074 * t790 + t1078 * t791;
t756 = t1074 * t791 - t1078 * t790;
t755 = -pkin(6) * t859 - t1074 * t801 + t1078 * t820;
t754 = t1074 * t788 + t1078 * t789;
t753 = t1074 * t789 - t1078 * t788;
t752 = -pkin(1) * t808 - t1201;
t751 = -pkin(6) * t842 - t1074 * t796 + t1078 * t817;
t750 = pkin(1) * t918 + pkin(6) * t860 + t1074 * t820 + t1078 * t801;
t749 = pkin(1) * t914 + pkin(6) * t843 + t1074 * t817 + t1078 * t796;
t740 = -pkin(6) * t808 - t1074 * t770 + t1078 * t773;
t739 = pkin(1) * t944 + pkin(6) * t810 + t1074 * t773 + t1078 * t770;
t738 = qJ(3) * t836 + t1096;
t737 = qJ(3) * t833 + t1097;
t736 = -pkin(6) * t756 - t1074 * t772 + t1078 * t779;
t735 = t1198 * t836 + t1088;
t734 = -pkin(1) * t756 - t1200;
t733 = t1198 * t833 + t1089;
t732 = pkin(1) * t891 + pkin(6) * t757 + t1074 * t779 + t1078 * t772;
t731 = -pkin(1) * t764 - t1205;
t730 = qJ(3) * t814 + t1123;
t729 = -pkin(1) * t761 - t1204;
t728 = t1074 * t743 + t1078 * t744;
t727 = t1074 * t744 - t1078 * t743;
t726 = (pkin(2) + t1139) * t814 + t1116;
t725 = -pkin(1) * t753 - t1207;
t724 = -pkin(6) * t764 - t1074 * t735 + t1078 * t738;
t723 = -pkin(6) * t761 - t1074 * t733 + t1078 * t737;
t722 = (qJ(3) - t1187) * t747 + t1137;
t721 = pkin(1) * t836 + pkin(6) * t765 + t1074 * t738 + t1078 * t735;
t720 = pkin(1) * t833 + pkin(6) * t762 + t1074 * t737 + t1078 * t733;
t719 = -t1193 + (pkin(2) - t1103) * t747;
t718 = -pkin(6) * t753 - t1074 * t726 + t1078 * t730;
t717 = pkin(1) * t814 + pkin(6) * t754 + t1074 * t730 + t1078 * t726;
t716 = -pkin(1) * t727 - t1202;
t715 = -pkin(6) * t727 - t1074 * t719 + t1078 * t722;
t714 = pkin(1) * t747 + pkin(6) * t728 + t1074 * t722 + t1078 * t719;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1036, 0, -t1035, 0, t1117, -t1011, -t1099, -pkin(5) * t1099, t962, -t1211, t958, t961, -t1212, t1002, -t1075 * t939 + t1079 * t946 - t1196, -t1075 * t940 + t1079 * t947 + t1226, -t1079 * t933 - t1195, -pkin(5) * (t1079 * t1017 + t1075 * t935) + (t1075 * pkin(1) - t1079 * pkin(6)) * t933, t962, t958, t1211, t1002, t1212, t961, -t1075 * t892 + t1079 * t880 - t1196, -t1075 * t1026 + t1079 * t879 - t1195, -t1075 * t890 + t1079 * t881 - t1226, t1079 * t818 - t1075 * t827 - pkin(5) * (t1075 * t883 + t1079 * t926), t1079 * t847 - t1134, -t1075 * t967 + t1079 * t809, -t1075 * t919 + t1079 * t869, t1079 * t846 + t1134, t1075 * t915 + t1079 * t870, t1075 * t1065 + t1079 * t889, t1079 * t751 - t1075 * t771 - pkin(5) * (t1075 * t843 + t1079 * t914), t1079 * t755 - t1075 * t774 - pkin(5) * (t1075 * t860 + t1079 * t918), t1079 * t740 - t1075 * t752 - pkin(5) * (t1075 * t810 + t1079 * t944), t1079 * t736 - t1075 * t734 - pkin(5) * (t1075 * t757 + t1079 * t891), t1075 * t863 + t1079 * t787, -t1075 * t813 + t1079 * t759, -t1075 * t848 + t1079 * t768, -t1075 * t861 + t1079 * t786, -t1075 * t849 + t1079 * t769, -t1075 * t893 + t1079 * t800, t1079 * t723 - t1075 * t729 - pkin(5) * (t1075 * t762 + t1079 * t833), t1079 * t724 - t1075 * t731 - pkin(5) * (t1075 * t765 + t1079 * t836), t1079 * t718 - t1075 * t725 - pkin(5) * (t1075 * t754 + t1079 * t814), t1079 * t715 - t1075 * t716 - pkin(5) * (t1075 * t728 + t1079 * t747); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1035, 0, t1036, 0, t1011, t1117, t1124, pkin(5) * t1124, t960, -t1213, t957, t959, -t1214, t1000, t1075 * t946 + t1079 * t939 + t952, t1075 * t947 + t1079 * t940 - t1227, -t1075 * t933 + t973, pkin(5) * (-t1075 * t1017 + t1079 * t935) + (-t1079 * pkin(1) - t1075 * pkin(6)) * t933, t960, t957, t1213, t1000, t1214, t959, t1075 * t880 + t1079 * t892 + t952, t1079 * t1026 + t1075 * t879 + t973, t1075 * t881 + t1079 * t890 + t1227, t1075 * t818 + t1079 * t827 + pkin(5) * (-t1075 * t926 + t1079 * t883), t1075 * t847 + t1133, t1075 * t809 + t1079 * t967, t1075 * t869 + t1079 * t919, t1075 * t846 - t1133, t1075 * t870 - t1079 * t915, -t1079 * t1065 + t1075 * t889, t1075 * t751 + t1079 * t771 + pkin(5) * (-t1075 * t914 + t1079 * t843), t1075 * t755 + t1079 * t774 + pkin(5) * (-t1075 * t918 + t1079 * t860), t1075 * t740 + t1079 * t752 + pkin(5) * (-t1075 * t944 + t1079 * t810), t1075 * t736 + t1079 * t734 + pkin(5) * (-t1075 * t891 + t1079 * t757), t1075 * t787 - t1079 * t863, t1075 * t759 + t1079 * t813, t1075 * t768 + t1079 * t848, t1075 * t786 + t1079 * t861, t1075 * t769 + t1079 * t849, t1075 * t800 + t1079 * t893, t1075 * t723 + t1079 * t729 + pkin(5) * (-t1075 * t833 + t1079 * t762), t1075 * t724 + t1079 * t731 + pkin(5) * (-t1075 * t836 + t1079 * t765), t1075 * t718 + t1079 * t725 + pkin(5) * (-t1075 * t814 + t1079 * t754), t1075 * t715 + t1079 * t716 + pkin(5) * (-t1075 * t747 + t1079 * t728); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1042, t1043, 0, 0, t983, t969, t987, t982, t984, 0, t931, t930, t905, t912, t983, t987, -t969, 0, -t984, t982, t865, t852, t866, t802, t845, t807, t867, t844, t868, t888, t749, t750, t739, t732, t785, t758, t766, t784, t767, t799, t720, t721, t717, t714; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1081, 0, 0, -g(3), -t1042, 0, t1001, -t972, t993, t999, -t992, t1022, t946, t947, -t933, -pkin(6) * t933, t1001, t993, t972, t1022, t992, t999, t880, t879, t881, t818, t847, t809, t869, t846, t870, t889, t751, t755, t740, t736, t787, t759, t768, t786, t769, t800, t723, t724, t718, t715; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1081, 0, qJDD(1), 0, g(3), 0, -t1043, 0, t1049, -t1038, -t1147, -t1049, -t1060, -qJDD(2), t939, t940, 0, -pkin(1) * t933, t1049, -t1147, t1038, -qJDD(2), t1060, -t1049, t892, t1026, t890, t827, t1167, t967, t919, -t1167, -t915, -t1065, t771, t774, t752, t734, -t863, t813, t848, t861, t849, t893, t729, t731, t725, t716; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1042, t1043, 0, 0, t983, t969, t987, t982, t984, 0, t931, t930, t905, t912, t983, t987, -t969, 0, -t984, t982, t865, t852, t866, t802, t845, t807, t867, t844, t868, t888, t749, t750, t739, t732, t785, t758, t766, t784, t767, t799, t720, t721, t717, t714; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1031, t1032, t1039, -t1056, t1046, t1056, 0, -t1017, t997, 0, t1031, t1039, -t1032, t1056, -t1046, -t1056, qJ(3) * t1032, t929, t906, qJ(3) * t926, t911, t857, t924, t909, t925, t949, t817, t820, t773, t779, t831, t793, t805, t830, t806, t854, t737, t738, t730, t722; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1135, t1030, -t1045, -t1105, t1040, -t1135, t1017, 0, t998, 0, t1135, -t1045, -t1030, -t1135, -t1040, -t1105, t907, t927, pkin(2) * t1030, pkin(2) * t926, -t910, -t855, -t922, t908, -t923, -t948, t796, t801, t770, t772, -t829, -t792, -t803, -t828, -t804, -t853, t733, t735, t726, t719; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1049, t1038, t1147, t1049, t1060, qJDD(2), -t997, -t998, 0, 0, -t1049, t1147, -t1038, qJDD(2), -t1060, t1049, t1217, -t1026, t1061 + t1085, t1118, -t1167, -t967, -t919, t1167, t915, t1065, t1206, t1203, t1201, t1200, t863, -t813, -t848, -t861, -t849, -t893, t1204, t1205, t1207, t1202; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1031, t1039, -t1032, t1056, -t1046, -t1056, 0, t941, t926, 0, t911, t857, t924, t909, t925, t949, t1115, t1136, t1095, -t1192, t831, t793, t805, t830, t806, t854, t1097, t1096, t1123, -t1187 * t747 + t1137; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1049, t1147, -t1038, qJDD(2), -t1060, t1049, -t941, 0, t937, 0, -t1167, -t967, -t919, t1167, t915, t1065, -pkin(3) * t903 + t840, -pkin(3) * t920 + t841, -pkin(3) * t856, -pkin(3) * t790, t863, -t813, -t848, -t861, -t849, -t893, -pkin(3) * t794 + t1142, -pkin(3) * t797 - t1143, -pkin(3) * t788 - t1127, -pkin(3) * t743 + t1183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1135, t1045, t1030, t1135, t1040, t1105, -t926, -t937, 0, 0, t910, t855, t922, -t908, t923, t948, -pkin(3) * t914 - t1113, -pkin(3) * t918 - t1114, -pkin(3) * t944 - t1094, -pkin(3) * t891 + t1191, t829, t792, t803, t828, t804, t853, -pkin(3) * t833 - t1089, -pkin(3) * t836 - t1088, -t1139 * t814 - t1116, t1103 * t747 + t1193; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t943, -t914, t1222, -t1129, t1003, t1129, 0, t891, t840, 0, t864, t815, t850, t862, t851, t894, t781, t783, t742, -pkin(8) * t747; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1128, t918, t1004, t942, -t963, t1128, -t891, 0, t841, 0, -t936, -t932, -t877, t936, t873, -t938, t760, t763, -pkin(4) * t814, -pkin(4) * t747; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1167, t967, t919, -t1167, -t915, -t1065, -t840, -t841, 0, 0, -t863, t813, t848, t861, t849, t893, -t1142, t1143, t1127, -t1183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1087, t874, t1210, t953, t950, -t953, 0, t825, t777, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t954, t876, t951, t896, t885, -t954, -t825, 0, t778, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t936, t932, t877, -t936, -t873, t938, -t777, -t778, 0, 0;];
m_new_reg = t1;
