% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPRR12
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:31
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPRR12_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR12_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR12_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR12_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR12_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPRR12_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:31:12
% EndTime: 2019-12-31 20:31:14
% DurationCPUTime: 2.39s
% Computational Cost: add. (8375->235), mult. (17564->270), div. (0->0), fcn. (11083->8), ass. (0->159)
t1373 = sin(qJ(2));
t1377 = cos(qJ(2));
t1380 = qJD(1) ^ 2;
t1400 = t1377 * t1380;
t1351 = t1373 * t1400;
t1344 = qJDD(2) - t1351;
t1368 = t1373 ^ 2;
t1379 = qJD(2) ^ 2;
t1348 = t1368 * t1380 + t1379;
t1318 = t1377 * t1344 - t1373 * t1348;
t1405 = qJD(2) * t1377;
t1392 = qJD(1) * t1405;
t1395 = t1373 * qJDD(1);
t1335 = 0.2e1 * t1392 + t1395;
t1374 = sin(qJ(1));
t1378 = cos(qJ(1));
t1418 = t1374 * t1318 + t1378 * t1335;
t1417 = t1378 * t1318 - t1374 * t1335;
t1372 = sin(qJ(4));
t1376 = cos(qJ(4));
t1327 = (t1372 * t1373 + t1376 * t1377) * qJD(1);
t1326 = qJD(5) + t1327;
t1416 = qJD(5) + t1326;
t1406 = qJD(1) * t1377;
t1407 = qJD(1) * t1373;
t1329 = -t1372 * t1406 + t1376 * t1407;
t1364 = qJD(2) - qJD(4);
t1371 = sin(qJ(5));
t1375 = cos(qJ(5));
t1311 = t1371 * t1329 + t1375 * t1364;
t1415 = t1311 ^ 2;
t1313 = t1375 * t1329 - t1371 * t1364;
t1414 = t1313 ^ 2;
t1413 = t1326 ^ 2;
t1412 = t1327 ^ 2;
t1411 = t1329 ^ 2;
t1410 = t1364 ^ 2;
t1409 = 2 * qJD(3);
t1408 = t1377 * g(3);
t1404 = t1313 * t1311;
t1403 = t1329 * t1327;
t1369 = t1377 ^ 2;
t1402 = t1369 * t1380;
t1398 = qJD(4) + t1364;
t1397 = qJD(5) - t1326;
t1347 = -t1378 * g(1) - t1374 * g(2);
t1331 = -t1380 * pkin(1) + qJDD(1) * pkin(6) + t1347;
t1322 = -t1373 * g(3) + t1377 * t1331;
t1334 = (-pkin(2) * t1377 - qJ(3) * t1373) * qJD(1);
t1298 = -t1379 * pkin(2) + qJDD(2) * qJ(3) + qJD(2) * t1409 + t1334 * t1406 + t1322;
t1358 = qJD(2) * t1407;
t1394 = t1377 * qJDD(1);
t1337 = -t1358 + t1394;
t1345 = -qJD(2) * pkin(3) - pkin(7) * t1407;
t1284 = -pkin(3) * t1402 - t1337 * pkin(7) + qJD(2) * t1345 + t1298;
t1336 = t1392 + t1395;
t1385 = -qJDD(2) * pkin(2) - t1379 * qJ(3) + qJDD(3) + t1408;
t1391 = qJD(1) * t1334 + t1331;
t1381 = -qJDD(2) * pkin(3) + (-t1336 + t1392) * pkin(7) + (-pkin(3) * t1400 + t1391) * t1373 + t1385;
t1264 = t1376 * t1284 + t1372 * t1381;
t1396 = t1368 + t1369;
t1393 = qJDD(2) - qJDD(4);
t1346 = t1374 * g(1) - t1378 * g(2);
t1263 = -t1372 * t1284 + t1376 * t1381;
t1387 = -t1376 * t1336 + t1372 * t1337;
t1300 = -t1327 * qJD(4) - t1387;
t1390 = -t1327 * t1364 - t1300;
t1389 = -t1371 * t1300 - t1375 * t1393;
t1388 = t1372 * t1336 + t1376 * t1337;
t1315 = t1373 * t1344 + t1377 * t1348;
t1384 = -t1375 * t1300 + t1371 * t1393;
t1383 = -t1329 * qJD(4) - qJDD(5) - t1388;
t1288 = (qJD(4) - t1364) * t1329 + t1388;
t1330 = qJDD(1) * pkin(1) + t1380 * pkin(6) + t1346;
t1382 = t1330 + (t1337 - t1358) * pkin(2);
t1279 = t1336 * qJ(3) + t1337 * pkin(3) - pkin(7) * t1402 + (qJ(3) * t1405 + (t1409 + t1345) * t1373) * qJD(1) + t1382;
t1349 = -t1379 - t1402;
t1343 = qJDD(2) + t1351;
t1342 = t1396 * t1380;
t1341 = -t1374 * qJDD(1) - t1378 * t1380;
t1340 = t1378 * qJDD(1) - t1374 * t1380;
t1339 = t1396 * qJDD(1);
t1338 = -0.2e1 * t1358 + t1394;
t1321 = -t1373 * t1331 - t1408;
t1320 = -t1410 - t1411;
t1317 = -t1373 * t1343 + t1377 * t1349;
t1314 = t1377 * t1343 + t1373 * t1349;
t1310 = t1378 * t1339 - t1374 * t1342;
t1309 = t1374 * t1339 + t1378 * t1342;
t1308 = t1327 * pkin(4) - t1329 * pkin(8);
t1307 = -t1393 - t1403;
t1306 = t1393 - t1403;
t1305 = -t1410 - t1412;
t1304 = t1378 * t1317 - t1374 * t1338;
t1303 = t1374 * t1317 + t1378 * t1338;
t1301 = -t1411 - t1412;
t1299 = t1391 * t1373 + t1385;
t1297 = -t1373 * t1321 + t1377 * t1322;
t1296 = t1377 * t1321 + t1373 * t1322;
t1295 = -t1413 - t1414;
t1294 = t1407 * t1409 + (t1336 + t1392) * qJ(3) + t1382;
t1293 = t1376 * t1306 - t1372 * t1320;
t1292 = t1372 * t1306 + t1376 * t1320;
t1291 = t1398 * t1327 + t1387;
t1289 = -t1398 * t1329 - t1388;
t1287 = -t1413 - t1415;
t1286 = t1376 * t1305 - t1372 * t1307;
t1285 = t1372 * t1305 + t1376 * t1307;
t1283 = -t1414 - t1415;
t1278 = t1383 - t1404;
t1277 = -t1383 - t1404;
t1276 = t1377 * t1298 + t1373 * t1299;
t1275 = t1373 * t1298 - t1377 * t1299;
t1274 = t1397 * t1311 + t1384;
t1273 = -t1416 * t1311 - t1384;
t1272 = -t1397 * t1313 + t1389;
t1271 = t1416 * t1313 - t1389;
t1270 = t1373 * t1292 + t1377 * t1293;
t1269 = -t1377 * t1292 + t1373 * t1293;
t1268 = t1376 * t1289 - t1372 * t1291;
t1267 = t1372 * t1289 + t1376 * t1291;
t1266 = t1373 * t1285 + t1377 * t1286;
t1265 = -t1377 * t1285 + t1373 * t1286;
t1262 = t1375 * t1278 - t1371 * t1295;
t1261 = t1371 * t1278 + t1375 * t1295;
t1260 = -t1371 * t1277 + t1375 * t1287;
t1259 = t1375 * t1277 + t1371 * t1287;
t1258 = -t1410 * pkin(4) - t1393 * pkin(8) - t1327 * t1308 + t1264;
t1257 = t1393 * pkin(4) - t1410 * pkin(8) + t1329 * t1308 - t1263;
t1256 = t1288 * pkin(4) + t1390 * pkin(8) + t1279;
t1255 = t1375 * t1272 - t1371 * t1274;
t1254 = t1371 * t1272 + t1375 * t1274;
t1253 = t1373 * t1267 + t1377 * t1268;
t1252 = -t1377 * t1267 + t1373 * t1268;
t1251 = t1376 * t1262 + t1372 * t1273;
t1250 = t1372 * t1262 - t1376 * t1273;
t1249 = t1376 * t1260 + t1372 * t1271;
t1248 = t1372 * t1260 - t1376 * t1271;
t1247 = -t1372 * t1263 + t1376 * t1264;
t1246 = t1376 * t1263 + t1372 * t1264;
t1245 = t1376 * t1255 + t1372 * t1283;
t1244 = t1372 * t1255 - t1376 * t1283;
t1243 = t1371 * t1256 + t1375 * t1258;
t1242 = t1375 * t1256 - t1371 * t1258;
t1241 = t1373 * t1250 + t1377 * t1251;
t1240 = -t1377 * t1250 + t1373 * t1251;
t1239 = t1373 * t1248 + t1377 * t1249;
t1238 = -t1377 * t1248 + t1373 * t1249;
t1237 = t1373 * t1246 + t1377 * t1247;
t1236 = -t1377 * t1246 + t1373 * t1247;
t1235 = t1373 * t1244 + t1377 * t1245;
t1234 = -t1377 * t1244 + t1373 * t1245;
t1233 = -t1371 * t1242 + t1375 * t1243;
t1232 = t1375 * t1242 + t1371 * t1243;
t1231 = t1376 * t1233 + t1372 * t1257;
t1230 = t1372 * t1233 - t1376 * t1257;
t1229 = t1373 * t1230 + t1377 * t1231;
t1228 = -t1377 * t1230 + t1373 * t1231;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1341, -t1340, 0, -t1374 * t1346 + t1378 * t1347, 0, 0, 0, 0, 0, 0, t1304, -t1417, t1310, t1378 * t1297 - t1374 * t1330, 0, 0, 0, 0, 0, 0, t1304, t1310, t1417, t1378 * t1276 - t1374 * t1294, 0, 0, 0, 0, 0, 0, t1378 * t1266 - t1374 * t1288, t1378 * t1270 + t1374 * t1390, t1378 * t1253 - t1374 * t1301, t1378 * t1237 - t1374 * t1279, 0, 0, 0, 0, 0, 0, t1378 * t1239 - t1374 * t1259, t1378 * t1241 - t1374 * t1261, t1378 * t1235 - t1374 * t1254, t1378 * t1229 - t1374 * t1232; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1340, t1341, 0, t1378 * t1346 + t1374 * t1347, 0, 0, 0, 0, 0, 0, t1303, -t1418, t1309, t1374 * t1297 + t1378 * t1330, 0, 0, 0, 0, 0, 0, t1303, t1309, t1418, t1374 * t1276 + t1378 * t1294, 0, 0, 0, 0, 0, 0, t1374 * t1266 + t1378 * t1288, t1374 * t1270 - t1378 * t1390, t1374 * t1253 + t1378 * t1301, t1374 * t1237 + t1378 * t1279, 0, 0, 0, 0, 0, 0, t1374 * t1239 + t1378 * t1259, t1374 * t1241 + t1378 * t1261, t1374 * t1235 + t1378 * t1254, t1374 * t1229 + t1378 * t1232; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1314, -t1315, 0, t1296, 0, 0, 0, 0, 0, 0, t1314, 0, t1315, t1275, 0, 0, 0, 0, 0, 0, t1265, t1269, t1252, t1236, 0, 0, 0, 0, 0, 0, t1238, t1240, t1234, t1228; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1380, -qJDD(1), 0, t1347, 0, 0, 0, 0, 0, 0, t1317, -t1318, t1339, t1297, 0, 0, 0, 0, 0, 0, t1317, t1339, t1318, t1276, 0, 0, 0, 0, 0, 0, t1266, t1270, t1253, t1237, 0, 0, 0, 0, 0, 0, t1239, t1241, t1235, t1229; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1380, 0, t1346, 0, 0, 0, 0, 0, 0, t1338, -t1335, t1342, t1330, 0, 0, 0, 0, 0, 0, t1338, t1342, t1335, t1294, 0, 0, 0, 0, 0, 0, t1288, -t1390, t1301, t1279, 0, 0, 0, 0, 0, 0, t1259, t1261, t1254, t1232; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1314, -t1315, 0, t1296, 0, 0, 0, 0, 0, 0, t1314, 0, t1315, t1275, 0, 0, 0, 0, 0, 0, t1265, t1269, t1252, t1236, 0, 0, 0, 0, 0, 0, t1238, t1240, t1234, t1228; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1349, -t1344, t1394, t1322, 0, 0, 0, 0, 0, 0, t1349, t1394, t1344, t1298, 0, 0, 0, 0, 0, 0, t1286, t1293, t1268, t1247, 0, 0, 0, 0, 0, 0, t1249, t1251, t1245, t1231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1343, -t1348, -t1395, t1321, 0, 0, 0, 0, 0, 0, t1343, -t1395, t1348, -t1299, 0, 0, 0, 0, 0, 0, -t1285, -t1292, -t1267, -t1246, 0, 0, 0, 0, 0, 0, -t1248, -t1250, -t1244, -t1230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1338, t1335, -t1342, -t1330, 0, 0, 0, 0, 0, 0, -t1338, -t1342, -t1335, -t1294, 0, 0, 0, 0, 0, 0, -t1288, t1390, -t1301, -t1279, 0, 0, 0, 0, 0, 0, -t1259, -t1261, -t1254, -t1232; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1349, t1394, t1344, t1298, 0, 0, 0, 0, 0, 0, t1286, t1293, t1268, t1247, 0, 0, 0, 0, 0, 0, t1249, t1251, t1245, t1231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1338, -t1342, -t1335, -t1294, 0, 0, 0, 0, 0, 0, -t1288, t1390, -t1301, -t1279, 0, 0, 0, 0, 0, 0, -t1259, -t1261, -t1254, -t1232; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1343, t1395, -t1348, t1299, 0, 0, 0, 0, 0, 0, t1285, t1292, t1267, t1246, 0, 0, 0, 0, 0, 0, t1248, t1250, t1244, t1230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1305, t1306, t1289, t1264, 0, 0, 0, 0, 0, 0, t1260, t1262, t1255, t1233; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1307, t1320, t1291, t1263, 0, 0, 0, 0, 0, 0, -t1271, -t1273, -t1283, -t1257; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1288, -t1390, t1301, t1279, 0, 0, 0, 0, 0, 0, t1259, t1261, t1254, t1232; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1287, t1278, t1272, t1243; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1277, t1295, t1274, t1242; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1271, t1273, t1283, t1257;];
f_new_reg = t1;
