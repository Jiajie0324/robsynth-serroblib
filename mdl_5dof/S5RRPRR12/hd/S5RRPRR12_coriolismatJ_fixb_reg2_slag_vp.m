% Calculate inertial parameters regressor of coriolis matrix for
% S5RRPRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:31
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RRPRR12_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR12_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR12_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPRR12_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:30:43
% EndTime: 2019-12-31 20:30:56
% DurationCPUTime: 8.56s
% Computational Cost: add. (6697->445), mult. (12638->598), div. (0->0), fcn. (12538->6), ass. (0->343)
t328 = sin(qJ(4));
t332 = cos(qJ(2));
t316 = t332 * t328;
t329 = sin(qJ(2));
t331 = cos(qJ(4));
t489 = t329 * t331;
t286 = -t316 + t489;
t576 = pkin(6) - pkin(7);
t302 = t576 * t332;
t392 = t576 * t329;
t210 = -t302 * t331 - t328 * t392;
t330 = cos(qJ(5));
t587 = t210 * t330;
t327 = sin(qJ(5));
t490 = t329 * qJ(3);
t553 = pkin(2) + pkin(3);
t274 = t332 * t553 + pkin(1) + t490;
t532 = t286 * pkin(8);
t284 = t328 * t329 + t331 * t332;
t535 = t284 * pkin(4);
t376 = -t532 + t535;
t334 = t274 + t376;
t81 = t327 * t334 - t587;
t594 = (t81 + t587) * t286;
t588 = t210 * t327;
t80 = -t330 * t334 - t588;
t593 = (t80 + t588) * t286;
t552 = -t587 / 0.2e1;
t491 = t328 * t302;
t570 = t331 * t392;
t574 = -t570 + t491;
t579 = t574 * t327;
t173 = t579 / 0.2e1;
t174 = -t579 / 0.2e1;
t590 = t173 + t174;
t578 = t574 * t330;
t176 = t578 / 0.2e1;
t177 = -t578 / 0.2e1;
t589 = t176 + t177;
t431 = qJD(2) - qJD(4);
t536 = t210 * pkin(4);
t586 = t210 * t574;
t283 = t286 ^ 2;
t120 = -t284 ^ 2 + t283;
t581 = t120 * t330;
t585 = qJD(1) * t581;
t582 = t120 * t327;
t584 = qJD(1) * t582;
t583 = t431 * t210;
t292 = qJ(3) * t328 + t331 * t553;
t290 = pkin(4) + t292;
t548 = -t290 / 0.2e1;
t540 = t328 / 0.2e1;
t175 = t574 * t540;
t577 = t120 * qJD(1);
t549 = t570 / 0.2e1;
t567 = t431 * t286;
t575 = t284 * t567;
t324 = t327 ^ 2;
t326 = t330 ^ 2;
t482 = t324 + t326;
t573 = 0.2e1 * t286;
t305 = t326 - t324;
t572 = t305 * t431;
t365 = t327 * t81 - t330 * t80;
t569 = t365 * t284;
t568 = t431 * t284;
t214 = (-0.1e1 + t482) * t331 * t328;
t205 = t214 * qJD(3);
t293 = qJ(3) * t331 - t328 * t553;
t291 = -pkin(8) + t293;
t542 = t326 / 0.2e1;
t543 = t324 / 0.2e1;
t393 = t542 + t543;
t378 = t393 * pkin(8);
t544 = t293 / 0.2e1;
t556 = -pkin(4) / 0.2e1;
t50 = (t292 * t393 + t548 + t556) * t328 + (-t291 * t393 + t378 + t544) * t331;
t533 = t286 * pkin(4);
t534 = t284 * pkin(8);
t192 = t533 + t534;
t495 = t327 * t192;
t91 = t495 - t578;
t522 = t91 * t330;
t487 = t330 * t192;
t90 = t487 + t579;
t523 = t90 * t327;
t348 = t522 / 0.2e1 - t523 / 0.2e1;
t502 = t210 * t331;
t402 = t502 / 0.2e1;
t527 = t81 * t330;
t528 = t80 * t327;
t538 = t331 / 0.2e1;
t429 = t175 + (t527 + t528) * t538;
t7 = t328 * t348 + t402 + t429;
t566 = -t7 * qJD(1) + t50 * qJD(2) - t205;
t322 = t332 * qJ(3);
t280 = -t329 * t553 + t322;
t115 = -t192 + t280;
t496 = t327 * t115;
t83 = t578 + t496;
t525 = t83 * t330;
t488 = t330 * t115;
t82 = t488 - t579;
t526 = t82 * t327;
t349 = t525 / 0.2e1 - t526 / 0.2e1;
t287 = t482 * t331;
t440 = t287 * qJD(2);
t564 = -qJD(4) * t287 + t440;
t275 = t489 / 0.2e1 - t316 / 0.2e1;
t476 = qJD(1) * t286;
t409 = t284 * t476;
t563 = qJD(5) * t275 + t409;
t153 = t330 * t284;
t132 = t327 * t153;
t394 = t543 - t326 / 0.2e1;
t146 = t394 * t286;
t449 = t146 * qJD(5);
t562 = -t132 * qJD(4) - t449;
t561 = -t326 * t409 + t449;
t560 = t324 * t409 + t449;
t559 = -t132 * qJD(2) + t449;
t101 = -t331 * t284 + t328 * t286;
t558 = 0.2e1 * t290;
t395 = t292 / 0.2e1 + t548;
t547 = -t291 / 0.2e1;
t396 = t547 + t544;
t557 = t284 * t395 + t286 * t396 - t535 / 0.2e1 + t532 / 0.2e1;
t473 = qJD(1) * t330;
t415 = t327 * t473;
t58 = t146 * t431 - t283 * t415;
t555 = t82 / 0.2e1;
t554 = -t83 / 0.2e1;
t551 = -t210 / 0.2e1;
t550 = -t574 / 0.2e1;
t546 = t291 / 0.2e1;
t545 = -t292 / 0.2e1;
t539 = t330 / 0.2e1;
t537 = t7 * qJD(4);
t531 = t328 * pkin(4);
t5 = (t327 * t83 + t330 * t82) * t286 + t569;
t530 = t5 * qJD(1);
t8 = -t80 * t82 + t81 * t83 + t586;
t529 = t8 * qJD(1);
t9 = (t327 * t91 + t330 * t90) * t286 - t569;
t524 = t9 * qJD(1);
t27 = t365 * t329;
t521 = qJD(1) * t27;
t149 = t327 * t286;
t44 = -t149 * t574 + t284 * t80;
t520 = qJD(1) * t44;
t154 = t330 * t286;
t45 = t154 * t574 - t284 * t81;
t519 = qJD(1) * t45;
t180 = -t502 / 0.2e1;
t93 = t180 + t402;
t518 = qJD(1) * t93;
t96 = -t274 * t286 + t280 * t284;
t517 = qJD(1) * t96;
t97 = t274 * t284 + t280 * t286;
t516 = qJD(1) * t97;
t515 = qJD(3) * t93;
t13 = (-t91 / 0.2e1 + t554) * t330 + (t90 / 0.2e1 + t555) * t327;
t514 = t13 * qJD(1);
t14 = t593 + (t82 + t579) * t284;
t513 = t14 * qJD(1);
t15 = t594 + (-t83 + t578) * t284;
t512 = t15 * qJD(1);
t16 = -t593 + (t90 - t579) * t284;
t511 = t16 * qJD(1);
t17 = -t594 + (-t91 - t578) * t284;
t510 = t17 * qJD(1);
t333 = (-pkin(8) / 0.2e1 + t396) * t286 + (pkin(4) / 0.2e1 + t395) * t284;
t18 = t552 + t587 / 0.2e1 + t333 * t327;
t509 = t18 * qJD(1);
t397 = t551 + t210 / 0.2e1;
t21 = t327 * t397 + t330 * t333;
t508 = t21 * qJD(1);
t346 = t284 * t546 + t286 * t548;
t342 = t115 / 0.2e1 + t346;
t29 = t327 * t342 + t589;
t501 = t29 * qJD(1);
t500 = t290 * t328;
t499 = t292 * t328;
t498 = t293 * t331;
t31 = -t330 * t342 + t590;
t497 = t31 * qJD(1);
t43 = t274 * t280;
t483 = t43 * qJD(1);
t477 = qJD(1) * t284;
t475 = qJD(1) * t327;
t474 = qJD(1) * t329;
t472 = qJD(1) * t332;
t471 = qJD(2) * qJ(3);
t470 = qJD(2) * t327;
t469 = qJD(2) * t330;
t468 = qJD(3) * t287;
t467 = qJD(3) * t328;
t466 = qJD(3) * t329;
t465 = qJD(3) * t331;
t464 = qJD(4) * t274;
t462 = qJD(4) * t327;
t461 = qJD(4) * t330;
t460 = qJD(5) * t327;
t459 = qJD(5) * t330;
t458 = qJD(5) * t331;
t345 = t284 * t540 + t286 * t538;
t341 = t329 / 0.2e1 + t345;
t107 = t341 * t327;
t457 = t107 * qJD(1);
t110 = t341 * t330;
t456 = t110 * qJD(1);
t138 = t482 * t329 * t286;
t451 = t138 * qJD(1);
t450 = t146 * qJD(1);
t147 = t327 * t284;
t448 = t147 * qJD(1);
t447 = t153 * qJD(1);
t161 = t305 * t283;
t446 = t161 * qJD(1);
t366 = -pkin(2) * t332 - t490;
t294 = -pkin(1) + t366;
t297 = pkin(2) * t329 - t322;
t201 = t294 * t332 + t297 * t329;
t445 = t201 * qJD(1);
t202 = -t294 * t329 + t297 * t332;
t444 = t202 * qJD(1);
t204 = t549 - t570 / 0.2e1;
t443 = t204 * qJD(1);
t442 = t275 * qJD(1);
t439 = t305 * qJD(5);
t325 = t329 ^ 2;
t306 = t332 ^ 2 - t325;
t438 = t306 * qJD(1);
t437 = t306 * qJD(2);
t436 = t325 * qJD(1);
t435 = t328 * qJD(2);
t434 = t329 * qJD(2);
t433 = t331 * qJD(2);
t321 = t332 * qJD(2);
t432 = t332 * qJD(3);
t428 = pkin(1) * t474;
t427 = pkin(1) * t472;
t426 = pkin(6) * t321;
t425 = pkin(6) * t434;
t420 = t274 * t477;
t419 = t274 * t476;
t418 = t274 * t474;
t417 = t324 * t476;
t416 = t326 * t476;
t414 = t327 * t469;
t413 = t284 * t466;
t412 = t327 * t461;
t411 = t284 * t460;
t410 = t284 * t459;
t408 = t294 * t297 * qJD(1);
t407 = t294 * t474;
t312 = t327 * t459;
t406 = t284 * t474;
t405 = t286 * t474;
t404 = t284 * t473;
t403 = t331 * t551;
t182 = t482 * t292;
t390 = t431 * t327;
t388 = t431 * t330;
t296 = t431 * t331;
t387 = qJD(5) + t477;
t384 = t327 * t406;
t383 = t329 * t404;
t382 = t286 * t312;
t381 = t283 * t312;
t379 = t286 * t415;
t377 = t556 + t395;
t375 = -0.2e1 * t379;
t374 = 0.2e1 * t379;
t369 = t330 * t390;
t367 = t327 * t388;
t364 = -t525 + t526;
t363 = t522 - t523;
t347 = t210 * t548 + t544 * t574;
t2 = t536 / 0.2e1 + (pkin(8) * t554 + t545 * t81 + t546 * t91) * t330 + (pkin(8) * t555 + t545 * t80 + t547 * t90) * t327 + t347;
t79 = -t182 * t291 + t290 * t293;
t362 = t2 * qJD(1) + t79 * qJD(2);
t350 = -t527 / 0.2e1 - t528 / 0.2e1;
t3 = (t551 + t350) * t331 + (t550 + t349) * t328;
t98 = t287 * t291 + t500;
t361 = qJD(1) * t3 - qJD(2) * t98;
t10 = -t80 * t90 + t81 * t91 - t586;
t359 = t10 * qJD(1) + t7 * qJD(3);
t358 = t284 * t379;
t357 = t284 * t290 + t286 * t291;
t183 = t498 + t499;
t52 = t397 * t331 + (t574 / 0.2e1 + t550) * t328;
t356 = -qJD(1) * t52 + qJD(2) * t183;
t355 = t387 * t330;
t354 = qJD(2) * t290 - t465;
t353 = qJD(2) * t293 + t467;
t352 = qJD(4) * t293 + t467;
t351 = t534 / 0.2e1 + t533 / 0.2e1;
t344 = t192 / 0.2e1 + t351;
t343 = t369 * t573;
t311 = t327 * t435;
t340 = t328 * t462 - t330 * t458 - t311;
t315 = t330 * t435;
t339 = t327 * t458 + t328 * t461 - t315;
t139 = t377 * t327;
t48 = -t330 * t344 + t590;
t338 = pkin(4) * t462 - qJD(1) * t48 + qJD(2) * t139;
t140 = t377 * t330;
t46 = t327 * t344 + t589;
t337 = pkin(4) * t461 - qJD(1) * t46 + qJD(2) * t140;
t336 = qJD(2) * t366 + t432;
t314 = t329 * t321;
t313 = t329 * t472;
t295 = t431 * t328;
t216 = -0.2e1 * t382;
t215 = 0.2e1 * t382;
t159 = t431 * t275;
t142 = t558 * t539;
t141 = t558 * t327 / 0.2e1;
t125 = -t491 + 0.2e1 * t549;
t123 = t375 - t572;
t122 = t374 + t572;
t109 = t329 * t539 - t330 * t345;
t108 = (-t329 / 0.2e1 + t345) * t327;
t100 = -t369 - t450;
t99 = t367 + t450;
t95 = t101 * t330;
t94 = t101 * t327;
t92 = t93 * qJD(4);
t87 = (-t324 / 0.2e1 + t542 - t394) * t284;
t53 = 0.2e1 * t175 + t180 + t403;
t51 = -t498 / 0.2e1 + t500 / 0.2e1 - t531 / 0.2e1 + t331 * t378 + t482 * (-t499 / 0.2e1 + t291 * t538);
t49 = 0.2e1 * t173 + t487 / 0.2e1 - t351 * t330;
t47 = 0.2e1 * t176 - t495 / 0.2e1 + t351 * t327;
t32 = 0.2e1 * t174 + t488 / 0.2e1 - t346 * t330;
t30 = 0.2e1 * t177 - t496 / 0.2e1 + t346 * t327;
t20 = t557 * t330 + t588;
t19 = t557 * t327 + 0.2e1 * t552;
t12 = -t348 + t349;
t4 = t328 * t349 + t403 + t429;
t1 = -t536 / 0.2e1 + t350 * t292 + t348 * t291 + t347 + t349 * pkin(8);
t6 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t314, t437, 0, -t314, 0, 0, -pkin(1) * t434, -pkin(1) * t321, 0, 0, t314, 0, -t437, 0, 0, -t314, -qJD(2) * t202 + t329 * t432, 0, -qJD(2) * t201 + qJD(3) * t325, (qJD(2) * t297 - t466) * t294, t575, t431 * t120, 0, -t575, 0, 0, qJD(2) * t96 + t286 * t464 + t413, qJD(2) * t97 - t284 * t464 + t286 * t466, 0, qJD(2) * t43 + t274 * t466, t326 * t575 - t381, -t161 * qJD(5) - t284 * t343, -t286 * t411 - t431 * t581, t324 * t575 + t381, -t286 * t410 + t431 * t582, -t575, qJD(2) * t14 + qJD(4) * t16 + qJD(5) * t45 + t330 * t413, qJD(2) * t15 + qJD(4) * t17 + qJD(5) * t44 - t327 * t413, -qJD(2) * t5 - qJD(3) * t138 - qJD(4) * t9, qJD(2) * t8 + qJD(3) * t27 + qJD(4) * t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t313, t438, t321, -t313, -t434, 0, -t426 - t428, t425 - t427, 0, 0, t313, t321, -t438, 0, t434, -t313, -t426 - t444, t336, -t425 - t445, pkin(6) * t336 + t408, t409, t577, -t568, -t409, -t567, 0, t517 + t583, qJD(2) * t574 + qJD(4) * t125 + t516, (t292 * t284 + t293 * t286) * qJD(2) + t101 * qJD(3), t483 + (t210 * t292 + t293 * t574) * qJD(2) + t53 * qJD(3), (-t414 + t416) * t284 - t562, t87 * qJD(4) + t215 + (-qJD(2) * t305 + t375) * t284, -qJD(4) * t149 + t286 * t470 - t585, (t414 + t417) * t284 + t562, -qJD(4) * t154 + t286 * t469 + t584, -t563, t513 + (t327 * t357 + t587) * qJD(2) + t94 * qJD(3) + t19 * qJD(4) + t32 * qJD(5), t512 + (t330 * t357 - t588) * qJD(2) + t95 * qJD(3) + t20 * qJD(4) + t30 * qJD(5), qJD(2) * t364 + qJD(4) * t12 - t530, t529 + (t210 * t290 - t291 * t364) * qJD(2) + t4 * qJD(3) + t1 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t313, t321, t436, -t407 + t426, 0, 0, 0, 0, 0, 0, t406, t405, qJD(2) * t101, qJD(2) * t53 + t418 + t92, 0, 0, 0, 0, 0, 0, qJD(2) * t94 + qJD(5) * t109 + t383, qJD(2) * t95 + qJD(5) * t108 - t384, -t451, qJD(2) * t4 + t521 + t537; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t409, -t577, t568, t409, t567, 0, t419 - t583, qJD(2) * t125 + qJD(4) * t574 - t420, 0, t515, (-t412 - t416) * t284 - t559, t87 * qJD(2) + t216 + (-qJD(4) * t305 + t374) * t284, -qJD(2) * t149 + t286 * t462 + t585, (t412 - t417) * t284 + t559, -qJD(2) * t154 + t286 * t461 - t584, t563, t511 + t19 * qJD(2) + (t327 * t376 + t587) * qJD(4) + t49 * qJD(5), t510 + t20 * qJD(2) + (t330 * t376 - t588) * qJD(4) + t47 * qJD(5), qJD(2) * t12 + qJD(4) * t363 - t524, t1 * qJD(2) + (pkin(8) * t363 + t536) * qJD(4) + t359; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, t367 * t573 - t446, -t387 * t149, -t58, -t286 * t355, -t159, qJD(2) * t32 + qJD(3) * t109 + qJD(4) * t49 - qJD(5) * t81 + t519, qJD(2) * t30 + qJD(3) * t108 + qJD(4) * t47 + qJD(5) * t80 + t520, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t313, -t438, 0, t313, 0, 0, t428, t427, 0, 0, -t313, 0, t438, 0, 0, t313, t444, 0, t445, -t408, -t409, -t577, 0, t409, 0, 0, -t517, qJD(4) * t204 - t516, 0, -qJD(3) * t52 - t483, t561, t215 + 0.2e1 * t358, -t410 + t585, -t560, t411 - t584, t563, qJD(4) * t18 + qJD(5) * t31 - t513, qJD(4) * t21 + qJD(5) * t29 - t512, qJD(4) * t13 + t530, -qJD(3) * t3 + qJD(4) * t2 - t529; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(3), qJ(3) * qJD(3), 0, 0, 0, 0, 0, 0, t352, -qJD(4) * t292 + t465, 0, qJD(3) * t183, t312, t439, 0, -t312, 0, 0, -t290 * t460 + t330 * t352, -t290 * t459 - t327 * t352, qJD(4) * t182 - t468, qJD(3) * t98 + qJD(4) * t79; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), t471, 0, 0, 0, 0, 0, 0, t435, t433, 0, t356, 0, 0, 0, 0, 0, 0, t315, -t311, -t440, qJD(4) * t51 + t205 - t361; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t431 * t293, -t292 * t431 + t443, 0, 0, -t312, -t439, 0, t312, 0, 0, t141 * qJD(5) + t293 * t388 + t509, t142 * qJD(5) - t293 * t390 + t508, t182 * t431 + t514, t51 * qJD(3) + (-t293 * pkin(4) - pkin(8) * t182) * qJD(4) + t362; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, t122, -t355, t100, t387 * t327, t442, qJD(4) * t141 - t290 * t470 - t291 * t459 + t497, qJD(4) * t142 - t290 * t469 + t291 * t460 + t501, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t313, 0, -t436, t407, 0, 0, 0, 0, 0, 0, -t406, -t405, 0, qJD(2) * t52 - t418 + t92, 0, 0, 0, 0, 0, 0, -qJD(5) * t110 - t383, qJD(5) * t107 + t384, t451, qJD(2) * t3 - t521 + t537; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(2), -t471, 0, 0, 0, 0, 0, 0, -t295, -t296, 0, -t356, 0, 0, 0, 0, 0, 0, t339, -t340, t564, -qJD(4) * t50 + t361; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t214 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t295, t296, 0, t518, 0, 0, 0, 0, 0, 0, -t339, t340, -t564, (pkin(8) * t287 - t531) * qJD(4) - t566; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t296 * t327 - t328 * t459 - t456, t296 * t330 + t328 * t460 + t457, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t409, t577, 0, -t409, 0, 0, -t419, -qJD(2) * t204 + t420, 0, -t515, -t561, t216 - 0.2e1 * t358, qJD(5) * t153 - t585, t560, -qJD(5) * t147 + t584, -t563, -qJD(2) * t18 + qJD(5) * t48 - t511, -qJD(2) * t21 + qJD(5) * t46 - t510, -qJD(2) * t13 + t524, -qJD(2) * t2 - t359; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t353, qJD(2) * t292 - t443 - t465, 0, 0, -t312, -t439, 0, t312, 0, 0, -t139 * qJD(5) - t330 * t353 - t509, -t140 * qJD(5) + t327 * t353 - t508, -qJD(2) * t182 + t468 - t514, qJD(3) * t50 - t362; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t435, -t433, 0, -t518, 0, 0, 0, 0, 0, 0, -t315, t311, t440, t566; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t312, t439, 0, -t312, 0, 0, -pkin(4) * t460, -pkin(4) * t459, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, t123, t447 + t459, t99, -t448 - t460, -t442, -pkin(8) * t459 - t338, pkin(8) * t460 - t337, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t58, -t343 + t446, -t153 * qJD(4) + (t286 * t475 + t469) * t284, t58, t147 * qJD(4) + (t286 * t473 - t470) * t284, -t159, -qJD(2) * t31 + qJD(3) * t110 - qJD(4) * t48 - t519, -qJD(2) * t29 - qJD(3) * t107 - qJD(4) * t46 - t520, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, t123, t404, t99, -t284 * t475, -t442, t139 * qJD(4) + t327 * t354 - t497, t140 * qJD(4) + t330 * t354 - t501, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t327 * t433 + t456, -t330 * t433 - t457, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t99, t122, -t447, t100, t448, t442, t338, t337, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t6;
