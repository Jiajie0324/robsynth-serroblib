% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRRP9
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:50
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRRP9_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP9_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP9_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP9_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP9_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP9_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:50:00
% EndTime: 2019-12-31 18:50:04
% DurationCPUTime: 3.87s
% Computational Cost: add. (12126->215), mult. (29805->260), div. (0->0), fcn. (22152->8), ass. (0->148)
t1687 = qJDD(3) + qJDD(4);
t1666 = sin(qJ(3));
t1669 = cos(qJ(3));
t1664 = cos(pkin(8));
t1703 = qJD(1) * t1664;
t1663 = sin(pkin(8));
t1704 = qJD(1) * t1663;
t1637 = t1666 * t1704 - t1669 * t1703;
t1681 = t1663 * t1669 + t1664 * t1666;
t1639 = t1681 * qJD(1);
t1665 = sin(qJ(4));
t1668 = cos(qJ(4));
t1614 = t1668 * t1637 + t1665 * t1639;
t1616 = -t1665 * t1637 + t1668 * t1639;
t1702 = t1614 * t1616;
t1586 = t1687 + t1702;
t1613 = t1616 ^ 2;
t1662 = qJD(3) + qJD(4);
t1706 = t1662 ^ 2;
t1713 = -t1613 - t1706;
t1555 = t1665 * t1586 - t1668 * t1713;
t1557 = t1668 * t1586 + t1665 * t1713;
t1538 = t1669 * t1555 + t1666 * t1557;
t1548 = t1666 * t1555 - t1669 * t1557;
t1529 = t1663 * t1538 + t1664 * t1548;
t1667 = sin(qJ(1));
t1670 = cos(qJ(1));
t1657 = t1664 * qJDD(1);
t1690 = t1663 * qJDD(1);
t1599 = t1669 * t1657 - t1666 * t1690;
t1700 = t1639 * qJD(3);
t1624 = t1599 - t1700;
t1701 = t1637 * qJD(3);
t1710 = t1681 * qJDD(1);
t1626 = t1710 - t1701;
t1682 = t1665 * t1624 + t1668 * t1626;
t1677 = -t1614 * qJD(4) + t1682;
t1697 = t1662 * t1614;
t1676 = t1677 - t1697;
t1736 = t1667 * t1529 - t1670 * t1676;
t1735 = t1670 * t1529 + t1667 * t1676;
t1685 = -t1668 * t1624 + t1665 * t1626;
t1692 = qJD(4) + t1662;
t1564 = t1692 * t1616 + t1685;
t1587 = t1687 - t1702;
t1590 = t1614 ^ 2;
t1711 = -t1706 - t1590;
t1718 = -t1665 * t1587 + t1668 * t1711;
t1719 = t1668 * t1587 + t1665 * t1711;
t1720 = t1666 * t1718 + t1669 * t1719;
t1721 = -t1666 * t1719 + t1669 * t1718;
t1727 = -t1663 * t1720 + t1664 * t1721;
t1734 = t1667 * t1564 + t1670 * t1727;
t1733 = -t1670 * t1564 + t1667 * t1727;
t1519 = t1664 * t1538 - t1663 * t1548;
t1580 = t1613 + t1590;
t1569 = t1677 + t1697;
t1678 = (-qJD(4) + t1662) * t1616 - t1685;
t1708 = t1665 * t1569 + t1668 * t1678;
t1709 = -t1668 * t1569 + t1665 * t1678;
t1716 = t1666 * t1708 + t1669 * t1709;
t1717 = -t1666 * t1709 + t1669 * t1708;
t1722 = -t1663 * t1716 + t1664 * t1717;
t1730 = t1670 * t1580 + t1667 * t1722;
t1729 = -t1667 * t1580 + t1670 * t1722;
t1728 = t1663 * t1721 + t1664 * t1720;
t1723 = t1663 * t1717 + t1664 * t1716;
t1672 = qJD(1) ^ 2;
t1660 = t1663 ^ 2;
t1661 = t1664 ^ 2;
t1691 = t1660 + t1661;
t1644 = t1691 * t1672;
t1635 = t1637 ^ 2;
t1707 = t1639 ^ 2;
t1705 = 2 * qJD(5);
t1699 = t1639 * t1637;
t1698 = t1661 * t1672;
t1695 = t1664 * t1672;
t1648 = -t1670 * g(1) - t1667 * g(2);
t1640 = -t1672 * pkin(1) + qJDD(1) * qJ(2) + t1648;
t1686 = -t1664 * g(3) - 0.2e1 * qJD(2) * t1704;
t1605 = (pkin(2) * t1695 - pkin(6) * qJDD(1) - t1640) * t1663 + t1686;
t1628 = -t1663 * g(3) + 0.2e1 * qJD(2) * t1703 + t1664 * t1640;
t1611 = -pkin(2) * t1698 + pkin(6) * t1657 + t1628;
t1582 = t1666 * t1605 + t1669 * t1611;
t1684 = qJD(3) * pkin(3) - t1639 * pkin(7);
t1559 = -t1635 * pkin(3) + t1624 * pkin(7) - qJD(3) * t1684 + t1582;
t1581 = t1669 * t1605 - t1666 * t1611;
t1621 = qJDD(3) - t1699;
t1675 = (-t1626 - t1701) * pkin(7) + t1621 * pkin(3) + t1581;
t1537 = t1668 * t1559 + t1665 * t1675;
t1689 = t1667 * qJDD(1);
t1688 = t1670 * qJDD(1);
t1647 = t1667 * g(1) - t1670 * g(2);
t1536 = -t1665 * t1559 + t1668 * t1675;
t1683 = -qJDD(2) + t1647;
t1620 = (t1664 * pkin(2) + pkin(1)) * qJDD(1) + (t1691 * pkin(6) + qJ(2)) * t1672 + t1683;
t1578 = t1624 * pkin(3) + t1635 * pkin(7) - t1639 * t1684 + t1620;
t1671 = qJD(3) ^ 2;
t1649 = t1663 * t1695;
t1646 = -t1670 * t1672 - t1689;
t1645 = -t1667 * t1672 + t1688;
t1643 = t1691 * qJDD(1);
t1642 = t1664 * t1644;
t1641 = t1663 * t1644;
t1634 = qJDD(1) * pkin(1) + t1672 * qJ(2) + t1683;
t1629 = -t1671 - t1707;
t1627 = -t1663 * t1640 + t1686;
t1625 = t1710 - 0.2e1 * t1701;
t1623 = -t1599 + 0.2e1 * t1700;
t1622 = -qJDD(3) - t1699;
t1619 = -t1671 - t1635;
t1600 = -t1635 - t1707;
t1598 = t1669 * t1622 - t1666 * t1629;
t1597 = t1666 * t1622 + t1669 * t1629;
t1596 = -t1663 * t1627 + t1664 * t1628;
t1595 = t1664 * t1627 + t1663 * t1628;
t1594 = t1669 * t1599 + t1666 * t1710;
t1593 = t1666 * t1599 - t1669 * t1710;
t1592 = t1669 * t1619 - t1666 * t1621;
t1591 = t1666 * t1619 + t1669 * t1621;
t1589 = pkin(4) * t1614 - qJ(5) * t1616;
t1577 = -t1663 * t1597 + t1664 * t1598;
t1576 = t1664 * t1597 + t1663 * t1598;
t1571 = -t1663 * t1593 + t1664 * t1594;
t1570 = t1664 * t1593 + t1663 * t1594;
t1562 = -t1663 * t1591 + t1664 * t1592;
t1561 = t1664 * t1591 + t1663 * t1592;
t1551 = -t1666 * t1581 + t1669 * t1582;
t1550 = t1669 * t1581 + t1666 * t1582;
t1535 = -t1663 * t1550 + t1664 * t1551;
t1534 = t1664 * t1550 + t1663 * t1551;
t1533 = t1616 * t1705 + (-t1692 * t1614 + t1682) * qJ(5) + t1578 - t1564 * pkin(4);
t1532 = -t1687 * pkin(4) - qJ(5) * t1706 + t1616 * t1589 + qJDD(5) - t1536;
t1531 = -pkin(4) * t1706 + t1687 * qJ(5) - t1614 * t1589 + t1662 * t1705 + t1537;
t1518 = -t1665 * t1536 + t1668 * t1537;
t1517 = t1668 * t1536 + t1665 * t1537;
t1516 = t1668 * t1531 + t1665 * t1532;
t1515 = t1665 * t1531 - t1668 * t1532;
t1510 = -t1666 * t1517 + t1669 * t1518;
t1509 = t1669 * t1517 + t1666 * t1518;
t1508 = -t1666 * t1515 + t1669 * t1516;
t1507 = t1669 * t1515 + t1666 * t1516;
t1506 = -t1663 * t1509 + t1664 * t1510;
t1505 = t1664 * t1509 + t1663 * t1510;
t1504 = -t1663 * t1507 + t1664 * t1508;
t1503 = t1664 * t1507 + t1663 * t1508;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1646, -t1645, 0, -t1667 * t1647 + t1670 * t1648, 0, 0, 0, 0, 0, 0, -t1670 * t1642 - t1664 * t1689, t1670 * t1641 + t1663 * t1689, t1670 * t1643 - t1667 * t1644, t1670 * t1596 - t1667 * t1634, 0, 0, 0, 0, 0, 0, t1670 * t1562 + t1667 * t1623, t1670 * t1577 + t1667 * t1625, t1670 * t1571 + t1667 * t1600, t1670 * t1535 - t1667 * t1620, 0, 0, 0, 0, 0, 0, t1734, t1735, t1729, t1670 * t1506 - t1667 * t1578, 0, 0, 0, 0, 0, 0, t1734, t1729, -t1735, t1670 * t1504 - t1667 * t1533; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1645, t1646, 0, t1670 * t1647 + t1667 * t1648, 0, 0, 0, 0, 0, 0, -t1667 * t1642 + t1664 * t1688, t1667 * t1641 - t1663 * t1688, t1667 * t1643 + t1670 * t1644, t1667 * t1596 + t1670 * t1634, 0, 0, 0, 0, 0, 0, t1667 * t1562 - t1670 * t1623, t1667 * t1577 - t1670 * t1625, t1667 * t1571 - t1670 * t1600, t1667 * t1535 + t1670 * t1620, 0, 0, 0, 0, 0, 0, t1733, t1736, t1730, t1667 * t1506 + t1670 * t1578, 0, 0, 0, 0, 0, 0, t1733, t1730, -t1736, t1667 * t1504 + t1670 * t1533; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1595, 0, 0, 0, 0, 0, 0, t1561, t1576, t1570, t1534, 0, 0, 0, 0, 0, 0, t1728, -t1519, t1723, t1505, 0, 0, 0, 0, 0, 0, t1728, t1723, t1519, t1503; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1672, -qJDD(1), 0, t1648, 0, 0, 0, 0, 0, 0, -t1642, t1641, t1643, t1596, 0, 0, 0, 0, 0, 0, t1562, t1577, t1571, t1535, 0, 0, 0, 0, 0, 0, t1727, t1529, t1722, t1506, 0, 0, 0, 0, 0, 0, t1727, t1722, -t1529, t1504; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1672, 0, t1647, 0, 0, 0, 0, 0, 0, t1657, -t1690, t1644, t1634, 0, 0, 0, 0, 0, 0, -t1623, -t1625, -t1600, t1620, 0, 0, 0, 0, 0, 0, -t1564, -t1676, t1580, t1578, 0, 0, 0, 0, 0, 0, -t1564, t1580, t1676, t1533; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1595, 0, 0, 0, 0, 0, 0, t1561, t1576, t1570, t1534, 0, 0, 0, 0, 0, 0, t1728, -t1519, t1723, t1505, 0, 0, 0, 0, 0, 0, t1728, t1723, t1519, t1503; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1698, t1649, t1657, t1628, 0, 0, 0, 0, 0, 0, t1592, t1598, t1594, t1551, 0, 0, 0, 0, 0, 0, t1721, t1548, t1717, t1510, 0, 0, 0, 0, 0, 0, t1721, t1717, -t1548, t1508; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1649, -t1660 * t1672, -t1690, t1627, 0, 0, 0, 0, 0, 0, t1591, t1597, t1593, t1550, 0, 0, 0, 0, 0, 0, t1720, -t1538, t1716, t1509, 0, 0, 0, 0, 0, 0, t1720, t1716, t1538, t1507; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1657, t1690, -t1644, -t1634, 0, 0, 0, 0, 0, 0, t1623, t1625, t1600, -t1620, 0, 0, 0, 0, 0, 0, t1564, t1676, -t1580, -t1578, 0, 0, 0, 0, 0, 0, t1564, -t1580, -t1676, -t1533; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1619, t1622, t1599, t1582, 0, 0, 0, 0, 0, 0, t1718, -t1557, t1708, t1518, 0, 0, 0, 0, 0, 0, t1718, t1708, t1557, t1516; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1621, t1629, -t1710, t1581, 0, 0, 0, 0, 0, 0, t1719, -t1555, t1709, t1517, 0, 0, 0, 0, 0, 0, t1719, t1709, t1555, t1515; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1623, t1625, t1600, -t1620, 0, 0, 0, 0, 0, 0, t1564, t1676, -t1580, -t1578, 0, 0, 0, 0, 0, 0, t1564, -t1580, -t1676, -t1533; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1711, -t1586, t1678, t1537, 0, 0, 0, 0, 0, 0, t1711, t1678, t1586, t1531; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1587, t1713, -t1569, t1536, 0, 0, 0, 0, 0, 0, t1587, -t1569, -t1713, -t1532; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1564, t1676, -t1580, -t1578, 0, 0, 0, 0, 0, 0, t1564, -t1580, -t1676, -t1533; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1711, t1678, t1586, t1531; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1564, -t1580, -t1676, -t1533; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1587, t1569, t1713, t1532;];
f_new_reg = t1;
