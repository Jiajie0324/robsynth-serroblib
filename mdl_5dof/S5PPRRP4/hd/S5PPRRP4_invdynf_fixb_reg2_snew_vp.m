% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PPRRP4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d4,theta1]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:34
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PPRRP4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRRP4_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRRP4_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRRP4_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRRP4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5PPRRP4_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:34:51
% EndTime: 2019-12-31 17:34:52
% DurationCPUTime: 0.99s
% Computational Cost: add. (1333->134), mult. (2736->126), div. (0->0), fcn. (1672->6), ass. (0->76)
t741 = cos(qJ(4));
t733 = t741 ^ 2;
t744 = qJD(3) ^ 2;
t755 = t733 * t744;
t754 = t741 * t744;
t736 = sin(pkin(7));
t737 = cos(pkin(7));
t718 = t736 * g(1) - t737 * g(2);
t713 = -qJDD(2) + t718;
t719 = -t737 * g(1) - t736 * g(2);
t740 = sin(qJ(3));
t742 = cos(qJ(3));
t697 = -t740 * t713 + t742 * t719;
t695 = -t744 * pkin(3) + qJDD(3) * pkin(6) + t697;
t734 = g(3) - qJDD(1);
t739 = sin(qJ(4));
t688 = t741 * t695 + t739 * t734;
t732 = t739 ^ 2;
t753 = t732 + t733;
t752 = qJD(3) * t739;
t751 = t739 * qJDD(3);
t750 = t741 * qJDD(3);
t749 = 0.2e1 * qJD(3) * t741;
t748 = qJD(4) * t752;
t696 = -t742 * t713 - t740 * t719;
t715 = t740 * qJDD(3) + t742 * t744;
t716 = -t742 * qJDD(3) + t740 * t744;
t747 = -t736 * t715 + t737 * t716;
t746 = t737 * t715 + t736 * t716;
t694 = -qJDD(3) * pkin(3) - t744 * pkin(6) - t696;
t745 = -t748 + t750;
t743 = qJD(4) ^ 2;
t729 = t741 * t734;
t725 = t739 * t754;
t724 = -t743 - t755;
t723 = -t732 * t744 - t743;
t722 = -qJDD(4) + t725;
t721 = qJDD(4) + t725;
t720 = qJD(4) * pkin(4) - qJ(5) * t752;
t717 = t753 * t744;
t714 = t753 * qJDD(3);
t712 = -0.2e1 * t748 + t750;
t711 = qJD(4) * t749 + t751;
t708 = t737 * t719;
t707 = t736 * t719;
t703 = t741 * t722 - t739 * t723;
t702 = -t739 * t721 + t741 * t724;
t701 = t739 * t722 + t741 * t723;
t700 = t741 * t721 + t739 * t724;
t699 = t742 * t714 - t740 * t717;
t698 = t740 * t714 + t742 * t717;
t692 = t742 * t703 + t740 * t711;
t691 = t742 * t702 - t740 * t712;
t690 = t740 * t703 - t742 * t711;
t689 = t740 * t702 + t742 * t712;
t687 = -t739 * t695 + t729;
t686 = t736 * t698 + t737 * t699;
t685 = -t737 * t698 + t736 * t699;
t684 = -t740 * t696 + t742 * t697;
t683 = t742 * t696 + t740 * t697;
t682 = -t745 * pkin(4) - qJ(5) * t755 + t720 * t752 + qJDD(5) + t694;
t681 = -pkin(4) * t755 + t745 * qJ(5) - qJD(4) * t720 + qJD(5) * t749 + t688;
t680 = qJDD(4) * pkin(4) + t729 + (pkin(4) * t754 - qJDD(3) * qJ(5) - 0.2e1 * qJD(3) * qJD(5) - t695) * t739;
t679 = t736 * t690 + t737 * t692;
t678 = t736 * t689 + t737 * t691;
t677 = -t737 * t690 + t736 * t692;
t676 = -t737 * t689 + t736 * t691;
t675 = -t739 * t687 + t741 * t688;
t674 = t741 * t687 + t739 * t688;
t673 = t742 * t675 + t740 * t694;
t672 = t740 * t675 - t742 * t694;
t671 = -t739 * t680 + t741 * t681;
t670 = t741 * t680 + t739 * t681;
t669 = t742 * t671 + t740 * t682;
t668 = t740 * t671 - t742 * t682;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t736 * t718 + t708, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t736 * t713 + t708, 0, 0, 0, 0, 0, 0, -t746, t747, 0, t736 * t683 + t737 * t684, 0, 0, 0, 0, 0, 0, t678, t679, t686, t736 * t672 + t737 * t673, 0, 0, 0, 0, 0, 0, t678, t679, t686, t736 * t668 + t737 * t669; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t737 * t718 + t707, 0, 0, 0, 0, 0, 0, 0, 0, 0, t737 * t713 + t707, 0, 0, 0, 0, 0, 0, t747, t746, 0, -t737 * t683 + t736 * t684, 0, 0, 0, 0, 0, 0, t676, t677, t685, -t737 * t672 + t736 * t673, 0, 0, 0, 0, 0, 0, t676, t677, t685, -t737 * t668 + t736 * t669; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t734, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t734, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t734, 0, 0, 0, 0, 0, 0, -t700, -t701, 0, -t674, 0, 0, 0, 0, 0, 0, -t700, -t701, 0, -t670; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t719, 0, 0, 0, 0, 0, 0, 0, 0, 0, t719, 0, 0, 0, 0, 0, 0, -t715, t716, 0, t684, 0, 0, 0, 0, 0, 0, t691, t692, t699, t673, 0, 0, 0, 0, 0, 0, t691, t692, t699, t669; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t718, 0, 0, 0, 0, 0, 0, 0, 0, 0, t713, 0, 0, 0, 0, 0, 0, t716, t715, 0, -t683, 0, 0, 0, 0, 0, 0, -t689, -t690, -t698, -t672, 0, 0, 0, 0, 0, 0, -t689, -t690, -t698, -t668; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t734, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t734, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t734, 0, 0, 0, 0, 0, 0, -t700, -t701, 0, -t674, 0, 0, 0, 0, 0, 0, -t700, -t701, 0, -t670; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t719, 0, 0, 0, 0, 0, 0, -t715, t716, 0, t684, 0, 0, 0, 0, 0, 0, t691, t692, t699, t673, 0, 0, 0, 0, 0, 0, t691, t692, t699, t669; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t734, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t734, 0, 0, 0, 0, 0, 0, -t700, -t701, 0, -t674, 0, 0, 0, 0, 0, 0, -t700, -t701, 0, -t670; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t713, 0, 0, 0, 0, 0, 0, -t716, -t715, 0, t683, 0, 0, 0, 0, 0, 0, t689, t690, t698, t672, 0, 0, 0, 0, 0, 0, t689, t690, t698, t668; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t744, -qJDD(3), 0, t697, 0, 0, 0, 0, 0, 0, t702, t703, t714, t675, 0, 0, 0, 0, 0, 0, t702, t703, t714, t671; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t744, 0, t696, 0, 0, 0, 0, 0, 0, t712, -t711, t717, -t694, 0, 0, 0, 0, 0, 0, t712, -t711, t717, -t682; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t734, 0, 0, 0, 0, 0, 0, t700, t701, 0, t674, 0, 0, 0, 0, 0, 0, t700, t701, 0, t670; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t724, t722, t750, t688, 0, 0, 0, 0, 0, 0, t724, t722, t750, t681; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t721, t723, -t751, t687, 0, 0, 0, 0, 0, 0, t721, t723, -t751, t680; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t712, t711, -t717, t694, 0, 0, 0, 0, 0, 0, -t712, t711, -t717, t682; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t724, t722, t750, t681; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t721, t723, -t751, t680; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t712, t711, -t717, t682;];
f_new_reg = t1;
