% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRPP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,theta2,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:09
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRPP1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPP1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPP1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPP1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPP1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRPP1_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:09:19
% EndTime: 2019-12-31 18:09:32
% DurationCPUTime: 12.79s
% Computational Cost: add. (20838->492), mult. (45559->673), div. (0->0), fcn. (28838->8), ass. (0->360)
t596 = sin(pkin(8));
t598 = cos(pkin(8));
t601 = sin(qJ(3));
t603 = cos(qJ(3));
t549 = (t596 * t603 + t598 * t601) * qJD(1);
t546 = t549 ^ 2;
t605 = qJD(3) ^ 2;
t491 = t605 + t546;
t646 = qJD(1) * t601;
t547 = -t598 * t603 * qJD(1) + t596 * t646;
t503 = t549 * t547;
t686 = qJDD(3) + t503;
t661 = t596 * t686;
t417 = t598 * t491 + t661;
t658 = t598 * t686;
t442 = t596 * t491 - t658;
t381 = t417 * t601 + t442 * t603;
t597 = sin(pkin(7));
t599 = cos(pkin(7));
t542 = qJD(3) * t547;
t639 = qJD(1) * qJD(3);
t629 = t603 * t639;
t636 = t601 * qJDD(1);
t562 = t629 + t636;
t630 = t601 * t639;
t635 = t603 * qJDD(1);
t611 = t630 - t635;
t608 = t598 * t562 - t596 * t611;
t706 = t542 - t608;
t345 = t381 * t597 + t599 * t706;
t351 = t381 * t599 - t597 * t706;
t602 = sin(qJ(1));
t604 = cos(qJ(1));
t290 = t345 * t602 - t351 * t604;
t787 = pkin(5) * t290;
t296 = t345 * t604 + t351 * t602;
t786 = pkin(5) * t296;
t785 = qJ(2) * t345;
t784 = -pkin(1) * t345 - pkin(2) * t706 - pkin(6) * t381;
t355 = t417 * t603 - t442 * t601;
t783 = -pkin(1) * t355 - qJ(2) * t351;
t626 = t596 * t562 + t598 * t611;
t645 = qJD(3) * t549;
t457 = t626 + t645;
t390 = -t457 * t596 - t598 * t706;
t663 = t706 * t596;
t666 = t457 * t598;
t394 = -t666 + t663;
t332 = -t390 * t601 + t394 * t603;
t678 = t547 ^ 2;
t498 = t546 - t678;
t315 = t332 * t597 - t498 * t599;
t317 = t332 * t599 + t498 * t597;
t782 = t315 * t604 + t317 * t602;
t781 = t315 * t602 - t317 * t604;
t532 = t678 - t605;
t431 = t596 * t532 + t658;
t437 = t598 * t532 - t661;
t377 = t431 * t601 - t437 * t603;
t459 = -t626 + t645;
t341 = t377 * t597 + t459 * t599;
t347 = t377 * t599 - t459 * t597;
t780 = t341 * t604 + t347 * t602;
t779 = t341 * t602 - t347 * t604;
t777 = pkin(6) * t355;
t776 = -pkin(2) * t355 - pkin(3) * t417;
t687 = qJDD(3) - t503;
t660 = t596 * t687;
t688 = -t678 - t605;
t697 = t598 * t688 - t660;
t477 = t598 * t687;
t703 = t596 * t688 + t477;
t720 = -t601 * t703 + t603 * t697;
t739 = t457 * t597 + t599 * t720;
t741 = -t599 * t457 + t597 * t720;
t752 = t602 * t739 + t604 * t741;
t774 = pkin(5) * t752;
t753 = -t602 * t741 + t604 * t739;
t773 = pkin(5) * t753;
t455 = -t678 - t546;
t692 = -t542 - t608;
t704 = t459 * t598 - t692 * t596;
t705 = t459 * t596 + t598 * t692;
t718 = -t601 * t705 + t603 * t704;
t738 = t455 * t597 + t599 * t718;
t740 = -t455 * t599 + t597 * t718;
t754 = t602 * t738 + t604 * t740;
t772 = pkin(5) * t754;
t755 = -t602 * t740 + t604 * t738;
t771 = pkin(5) * t755;
t533 = -t546 + t605;
t724 = t598 * t533 + t660;
t725 = -t596 * t533 + t477;
t736 = -t601 * t724 + t603 * t725;
t757 = -t597 * t692 + t599 * t736;
t758 = t597 * t736 + t599 * t692;
t770 = -t602 * t758 + t604 * t757;
t769 = t602 * t757 + t604 * t758;
t767 = qJ(2) * t740;
t766 = qJ(2) * t741;
t765 = qJ(4) * t417;
t764 = qJ(4) * t442;
t763 = pkin(1) * t740 - pkin(2) * t455 + pkin(6) * t718;
t762 = pkin(1) * t741 - pkin(2) * t457 + pkin(6) * t720;
t717 = t601 * t704 + t603 * t705;
t761 = -pkin(1) * t717 + qJ(2) * t738;
t719 = t601 * t697 + t603 * t703;
t760 = -pkin(1) * t719 + qJ(2) * t739;
t759 = t390 * t603 + t394 * t601;
t756 = t431 * t603 + t437 * t601;
t749 = pkin(6) * t717;
t748 = pkin(6) * t719;
t745 = t706 * qJ(5);
t305 = -pkin(2) * t717 - pkin(3) * t705;
t744 = -pkin(2) * t719 - pkin(3) * t703;
t737 = t601 * t725 + t603 * t724;
t732 = qJ(4) * t697;
t731 = qJ(4) * t703;
t730 = qJ(4) * t705;
t575 = t604 * g(1) + t602 * g(2);
t676 = qJD(1) ^ 2;
t560 = -t676 * pkin(1) - t575;
t574 = t602 * g(1) - t604 * g(2);
t614 = qJDD(1) * pkin(1) + t574;
t504 = t597 * t560 - t599 * t614;
t505 = t599 * t560 + t597 * t614;
t627 = t597 * t504 + t599 * t505;
t425 = t599 * t504 - t597 * t505;
t670 = t425 * t602;
t368 = t604 * t627 + t670;
t669 = t425 * t604;
t723 = -t602 * t627 + t669;
t564 = t597 * qJDD(1) + t599 * t676;
t565 = t599 * qJDD(1) - t597 * t676;
t508 = -t602 * t564 + t604 * t565;
t594 = g(3) - qJDD(2);
t531 = qJ(2) * t564 - t599 * t594;
t615 = -qJ(2) * t565 - t597 * t594;
t722 = -pkin(5) * t508 + t531 * t602 + t604 * t615;
t721 = -pkin(3) * t455 + qJ(4) * t704;
t633 = t597 * t503;
t643 = qJD(3) * t598;
t631 = t547 * t643;
t612 = t596 * t626 + t631;
t644 = qJD(3) * t596;
t617 = t547 * t644 - t598 * t626;
t682 = -t601 * t617 + t603 * t612;
t696 = t599 * t682 - t633;
t632 = t599 * t503;
t699 = t597 * t682 + t632;
t716 = -t602 * t699 + t604 * t696;
t715 = t602 * t696 + t604 * t699;
t637 = t599 * qJDD(3);
t610 = (-t547 * t596 - t598 * t549) * qJD(3);
t527 = t549 * t644;
t616 = t527 - t631;
t683 = -t601 * t610 + t603 * t616;
t698 = t597 * t683 - t637;
t586 = t597 * qJDD(3);
t700 = t599 * t683 + t586;
t714 = t602 * t700 + t604 * t698;
t713 = -t602 * t698 + t604 * t700;
t712 = 2 * qJD(5);
t690 = t604 * t564 + t602 * t565;
t701 = pkin(5) * t690 + t531 * t604 - t602 * t615;
t488 = t547 * pkin(4) - t549 * qJ(5);
t479 = -t676 * pkin(2) + qJDD(1) * pkin(6) + t505;
t465 = t601 * t479 + t603 * t594;
t581 = t603 * t676 * t601;
t572 = qJDD(3) + t581;
t413 = (-t562 + t629) * qJ(4) + t572 * pkin(3) - t465;
t467 = t603 * t479 - t601 * t594;
t571 = qJD(3) * pkin(3) - qJ(4) * t646;
t677 = t603 ^ 2;
t589 = t677 * t676;
t415 = -pkin(3) * t589 - qJ(4) * t611 - qJD(3) * t571 + t467;
t649 = t596 * t413 + t598 * t415;
t689 = qJDD(3) * qJ(5) + qJD(3) * t712 - t547 * t488 + t649;
t684 = t601 * t616 + t603 * t610;
t681 = t601 * t612 + t603 * t617;
t447 = t549 * t643 + t596 * t608;
t448 = t598 * t608 - t527;
t387 = -t447 * t601 + t448 * t603;
t618 = t599 * t387 + t633;
t619 = t597 * t387 - t632;
t680 = -t602 * t619 + t604 * t618;
t679 = t602 * t618 + t604 * t619;
t675 = pkin(4) * t598;
t641 = qJD(4) * t549;
t541 = 0.2e1 * t641;
t648 = -t598 * t413 + t596 * t415;
t352 = t541 + t648;
t642 = qJD(4) * t547;
t539 = -0.2e1 * t642;
t353 = t539 + t649;
t301 = -t352 * t598 + t353 * t596;
t674 = t301 * t601;
t673 = t301 * t603;
t478 = -qJDD(1) * pkin(2) - t676 * pkin(6) + t504;
t422 = t611 * pkin(3) - qJ(4) * t589 + t571 * t646 + qJDD(4) + t478;
t672 = t422 * t596;
t671 = t422 * t598;
t657 = t601 * t478;
t656 = t601 * t572;
t573 = qJDD(3) - t581;
t655 = t601 * t573;
t652 = t603 * t478;
t563 = -0.2e1 * t630 + t635;
t651 = t603 * t563;
t650 = t603 * t573;
t647 = -t455 - t605;
t593 = t601 ^ 2;
t640 = t593 * t676;
t634 = t593 + t677;
t628 = -qJ(5) * t596 - pkin(3);
t302 = t352 * t596 + t598 * t353;
t398 = t465 * t601 + t603 * t467;
t515 = -t602 * t574 - t604 * t575;
t623 = t597 * t581;
t622 = t599 * t581;
t621 = t549 * t488 + qJDD(5) + t648;
t568 = t604 * qJDD(1) - t602 * t676;
t620 = -pkin(5) * t568 - g(3) * t602;
t397 = t465 * t603 - t467 * t601;
t514 = t604 * t574 - t602 * t575;
t613 = t539 + t689;
t609 = -qJDD(3) * pkin(4) + t621;
t607 = t626 * pkin(4) + t422 + t745;
t606 = t549 * t712 - t607;
t580 = -t589 - t605;
t579 = t589 - t605;
t578 = -t605 - t640;
t577 = t605 - t640;
t570 = t589 - t640;
t569 = t589 + t640;
t567 = t602 * qJDD(1) + t604 * t676;
t566 = t634 * qJDD(1);
t561 = 0.2e1 * t629 + t636;
t558 = t603 * t572;
t557 = t634 * t639;
t543 = -pkin(5) * t567 + t604 * g(3);
t526 = t603 * t562 - t593 * t639;
t525 = t601 * t611 - t677 * t639;
t524 = t599 * t557 + t586;
t523 = t597 * t557 - t637;
t521 = -t601 * t578 - t650;
t520 = -t601 * t577 + t558;
t519 = t603 * t580 - t656;
t518 = t603 * t579 - t655;
t517 = t603 * t578 - t655;
t516 = t601 * t580 + t558;
t513 = t599 * t566 - t597 * t569;
t512 = t597 * t566 + t599 * t569;
t507 = -t601 * t561 + t651;
t487 = t599 * t526 - t623;
t486 = t599 * t525 + t623;
t485 = t597 * t526 + t622;
t484 = t597 * t525 - t622;
t483 = t599 * t520 + t597 * t636;
t482 = t599 * t518 + t597 * t635;
t481 = t597 * t520 - t599 * t636;
t480 = t597 * t518 - t599 * t635;
t471 = t599 * t521 + t597 * t561;
t470 = t599 * t519 - t597 * t563;
t469 = t597 * t521 - t599 * t561;
t468 = t597 * t519 + t599 * t563;
t466 = t599 * t507 - t597 * t570;
t464 = t597 * t507 + t599 * t570;
t430 = -t602 * t512 + t604 * t513;
t429 = t604 * t512 + t602 * t513;
t428 = -pkin(6) * t517 + t652;
t427 = -pkin(6) * t516 + t657;
t421 = -pkin(2) * t517 + t467;
t420 = -pkin(2) * t516 + t465;
t414 = pkin(1) * t594 + qJ(2) * t627;
t406 = -t469 * t602 + t471 * t604;
t405 = -t468 * t602 + t470 * t604;
t404 = t469 * t604 + t471 * t602;
t403 = t468 * t604 + t470 * t602;
t384 = t447 * t603 + t448 * t601;
t373 = -qJ(2) * t512 + t397 * t599;
t372 = qJ(2) * t513 + t397 * t597;
t371 = t671 + t765;
t370 = t398 * t599 + t478 * t597;
t369 = t398 * t597 - t478 * t599;
t366 = t672 - t731;
t338 = pkin(3) * t706 + t672 + t764;
t337 = (pkin(4) * qJD(3) - (2 * qJD(5))) * t549 + t607;
t336 = -qJ(2) * t469 - t421 * t597 + t428 * t599;
t335 = -qJ(2) * t468 - t420 * t597 + t427 * t599;
t334 = -pkin(3) * t457 - t671 + t732;
t323 = -pkin(1) * t517 + qJ(2) * t471 + t421 * t599 + t428 * t597;
t322 = -pkin(1) * t516 + qJ(2) * t470 + t420 * t599 + t427 * t597;
t321 = t606 + (-t457 - t645) * pkin(4);
t320 = -pkin(4) * t645 + t606 - t745;
t319 = t605 * qJ(5) - t609 - 0.2e1 * t641;
t318 = -pkin(4) * t605 + t613;
t309 = t647 * qJ(5) + t541 + t609;
t308 = t647 * pkin(4) + t613;
t307 = -t369 * t602 + t370 * t604;
t306 = t369 * t604 + t370 * t602;
t304 = -qJ(5) * t666 - t321 * t596 - t731;
t303 = -qJ(2) * t369 - (pkin(2) * t597 - pkin(6) * t599) * t397;
t300 = t353 - t776;
t299 = pkin(4) * t663 + t320 * t598 - t765;
t294 = t598 * t321 + t628 * t457 + t732;
t293 = t352 + t744;
t292 = -pkin(4) * t692 - qJ(5) * t459 + t305;
t291 = -t764 + t596 * t320 - (pkin(3) + t675) * t706;
t286 = -pkin(3) * t422 + qJ(4) * t302;
t285 = -t338 * t601 + t371 * t603 + t777;
t284 = qJ(2) * t370 - (-pkin(2) * t599 - pkin(6) * t597 - pkin(1)) * t397;
t283 = -t301 - t730;
t282 = t541 + (-t688 - t605) * qJ(5) + (-qJDD(3) - t687) * pkin(4) + t621 + t744;
t281 = t318 * t598 - t319 * t596;
t280 = t318 * t596 + t319 * t598;
t279 = -t334 * t601 + t366 * t603 - t748;
t278 = t302 + t721;
t273 = -qJ(5) * t686 + 0.2e1 * t642 + (-t491 + t605) * pkin(4) - t689 + t776;
t272 = -t308 * t596 + t309 * t598 - t730;
t271 = t308 * t598 + t309 * t596 + t721;
t270 = t302 * t603 - t674;
t269 = t302 * t601 + t673;
t268 = t270 * t599 + t422 * t597;
t267 = t270 * t597 - t422 * t599;
t266 = -qJ(4) * t280 + (pkin(4) * t596 - qJ(5) * t598) * t337;
t265 = -t294 * t601 + t304 * t603 - t748;
t264 = -t291 * t601 + t299 * t603 - t777;
t263 = -t280 * t601 + t281 * t603;
t262 = t280 * t603 + t281 * t601;
t261 = t285 * t599 - t300 * t597 - t785;
t260 = qJ(4) * t281 + (t628 - t675) * t337;
t259 = -pkin(2) * t269 - pkin(3) * t301;
t258 = t285 * t597 + t300 * t599 - t783;
t257 = t279 * t599 - t293 * t597 - t766;
t256 = t263 * t599 + t337 * t597;
t255 = t263 * t597 - t337 * t599;
t254 = -t278 * t601 + t283 * t603 - t749;
t253 = t279 * t597 + t293 * t599 + t760;
t252 = -pkin(6) * t269 - qJ(4) * t673 - t286 * t601;
t251 = t265 * t599 - t282 * t597 - t766;
t250 = -t267 * t602 + t268 * t604;
t249 = t267 * t604 + t268 * t602;
t248 = -t271 * t601 + t272 * t603 - t749;
t247 = t265 * t597 + t282 * t599 + t760;
t246 = t264 * t599 - t273 * t597 + t785;
t245 = t254 * t599 - t305 * t597 - t767;
t244 = t264 * t597 + t273 * t599 + t783;
t243 = -pkin(2) * t262 - pkin(3) * t280 - pkin(4) * t319 - qJ(5) * t318;
t242 = t254 * t597 + t305 * t599 + t761;
t241 = t248 * t599 - t292 * t597 - t767;
t240 = -t255 * t602 + t256 * t604;
t239 = t255 * t604 + t256 * t602;
t238 = t248 * t597 + t292 * t599 + t761;
t237 = -pkin(6) * t262 - t260 * t601 + t266 * t603;
t236 = -qJ(2) * t267 + t252 * t599 - t259 * t597;
t235 = -pkin(1) * t269 + qJ(2) * t268 + t252 * t597 + t259 * t599;
t234 = -qJ(2) * t255 + t237 * t599 - t243 * t597;
t233 = -pkin(1) * t262 + qJ(2) * t256 + t237 * t597 + t243 * t599;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t567, -t568, 0, t515, 0, 0, 0, 0, 0, 0, -t690, -t508, 0, t368, 0, 0, 0, 0, 0, 0, t405, t406, t430, t307, 0, 0, 0, 0, 0, 0, t753, -t290, t755, t250, 0, 0, 0, 0, 0, 0, t753, t755, t290, t240; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t568, -t567, 0, t514, 0, 0, 0, 0, 0, 0, t508, -t690, 0, -t723, 0, 0, 0, 0, 0, 0, t403, t404, t429, t306, 0, 0, 0, 0, 0, 0, t752, t296, t754, t249, 0, 0, 0, 0, 0, 0, t752, t754, -t296, t239; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t594, 0, 0, 0, 0, 0, 0, t516, t517, 0, -t397, 0, 0, 0, 0, 0, 0, t719, -t355, t717, t269, 0, 0, 0, 0, 0, 0, t719, t717, t355, t262; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t568, 0, -t567, 0, t620, -t543, -t514, -pkin(5) * t514, 0, 0, t508, 0, -t690, 0, t722, t701, t723, pkin(5) * t723 + qJ(2) * t669 - t414 * t602, -t485 * t602 + t487 * t604, -t464 * t602 + t466 * t604, -t481 * t602 + t483 * t604, -t484 * t602 + t486 * t604, -t480 * t602 + t482 * t604, -t523 * t602 + t524 * t604, -pkin(5) * t403 - t322 * t602 + t335 * t604, -pkin(5) * t404 - t323 * t602 + t336 * t604, -pkin(5) * t429 - t372 * t602 + t373 * t604, -pkin(5) * t306 - t284 * t602 + t303 * t604, t680, -t781, t770, t716, t779, t713, -t253 * t602 + t257 * t604 - t774, -t258 * t602 + t261 * t604 - t786, -t242 * t602 + t245 * t604 - t772, -pkin(5) * t249 - t235 * t602 + t236 * t604, t680, t770, t781, t713, -t779, t716, -t247 * t602 + t251 * t604 - t774, -t238 * t602 + t241 * t604 - t772, -t244 * t602 + t246 * t604 + t786, -pkin(5) * t239 - t233 * t602 + t234 * t604; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t567, 0, t568, 0, t543, t620, t515, pkin(5) * t515, 0, 0, t690, 0, t508, 0, -t701, t722, t368, pkin(5) * t368 + qJ(2) * t670 + t414 * t604, t485 * t604 + t487 * t602, t464 * t604 + t466 * t602, t481 * t604 + t483 * t602, t484 * t604 + t486 * t602, t480 * t604 + t482 * t602, t523 * t604 + t524 * t602, pkin(5) * t405 + t322 * t604 + t335 * t602, pkin(5) * t406 + t323 * t604 + t336 * t602, pkin(5) * t430 + t372 * t604 + t373 * t602, pkin(5) * t307 + t284 * t604 + t303 * t602, t679, t782, t769, t715, -t780, t714, t253 * t604 + t257 * t602 + t773, t258 * t604 + t261 * t602 - t787, t242 * t604 + t245 * t602 + t771, pkin(5) * t250 + t235 * t604 + t236 * t602, t679, t769, -t782, t714, t780, t715, t247 * t604 + t251 * t602 + t773, t238 * t604 + t241 * t602 + t771, t244 * t604 + t246 * t602 + t787, pkin(5) * t240 + t233 * t604 + t234 * t602; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t574, t575, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t565 - t504, -pkin(1) * t564 - t505, 0, -pkin(1) * t425, (t562 + t629) * t601, t561 * t603 + t563 * t601, t577 * t603 + t656, t651, t579 * t601 + t650, 0, pkin(1) * t468 + pkin(2) * t563 + pkin(6) * t519 - t652, pkin(1) * t469 - pkin(2) * t561 + pkin(6) * t521 + t657, pkin(1) * t512 + pkin(2) * t569 + pkin(6) * t566 + t398, pkin(1) * t369 - pkin(2) * t478 + pkin(6) * t398, t384, t759, t737, t681, t756, t684, t334 * t603 + t366 * t601 + t762, t338 * t603 + t371 * t601 - t784, t278 * t603 + t283 * t601 + t763, pkin(1) * t267 - pkin(2) * t422 + pkin(6) * t270 - qJ(4) * t674 + t286 * t603, t384, t737, -t759, t684, -t756, t681, t294 * t603 + t304 * t601 + t762, t271 * t603 + t272 * t601 + t763, t291 * t603 + t299 * t601 + t784, pkin(1) * t255 - pkin(2) * t337 + pkin(6) * t263 + t260 * t603 + t266 * t601;];
tauB_reg = t1;
