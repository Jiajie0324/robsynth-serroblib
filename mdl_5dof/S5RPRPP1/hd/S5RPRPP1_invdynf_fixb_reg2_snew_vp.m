% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRPP1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,theta2,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:09
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRPP1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPP1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPP1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPP1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPP1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRPP1_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:09:48
% EndTime: 2019-12-31 18:09:51
% DurationCPUTime: 2.99s
% Computational Cost: add. (5770->187), mult. (12649->235), div. (0->0), fcn. (8077->8), ass. (0->133)
t1559 = sin(pkin(8));
t1561 = cos(pkin(8));
t1566 = cos(qJ(3));
t1592 = qJD(1) * t1566;
t1564 = sin(qJ(3));
t1593 = qJD(1) * t1564;
t1522 = t1559 * t1593 - t1561 * t1592;
t1524 = (t1559 * t1566 + t1561 * t1564) * qJD(1);
t1590 = t1524 * t1522;
t1499 = qJDD(3) + t1590;
t1521 = t1524 ^ 2;
t1568 = qJD(3) ^ 2;
t1599 = -t1521 - t1568;
t1466 = t1559 * t1499 - t1561 * t1599;
t1468 = t1561 * t1499 + t1559 * t1599;
t1454 = t1564 * t1466 - t1566 * t1468;
t1560 = sin(pkin(7));
t1562 = cos(pkin(7));
t1520 = qJD(3) * t1522;
t1579 = qJD(3) * t1592;
t1583 = t1564 * qJDD(1);
t1533 = t1579 + t1583;
t1580 = qJD(3) * t1593;
t1582 = t1566 * qJDD(1);
t1573 = -t1580 + t1582;
t1571 = t1561 * t1533 + t1559 * t1573;
t1598 = -t1571 + t1520;
t1440 = t1560 * t1454 + t1562 * t1598;
t1442 = t1562 * t1454 - t1560 * t1598;
t1565 = sin(qJ(1));
t1567 = cos(qJ(1));
t1618 = t1567 * t1440 + t1565 * t1442;
t1617 = t1565 * t1440 - t1567 * t1442;
t1577 = -t1559 * t1533 + t1561 * t1573;
t1591 = qJD(3) * t1524;
t1480 = -t1577 + t1591;
t1500 = qJDD(3) - t1590;
t1504 = t1522 ^ 2;
t1600 = -t1504 - t1568;
t1603 = -t1559 * t1500 + t1561 * t1600;
t1604 = t1561 * t1500 + t1559 * t1600;
t1606 = -t1564 * t1604 + t1566 * t1603;
t1613 = t1560 * t1480 + t1562 * t1606;
t1614 = -t1562 * t1480 + t1560 * t1606;
t1616 = -t1565 * t1614 + t1567 * t1613;
t1615 = t1565 * t1613 + t1567 * t1614;
t1446 = t1566 * t1466 + t1564 * t1468;
t1479 = t1521 + t1504;
t1485 = t1520 + t1571;
t1574 = t1577 + t1591;
t1596 = t1559 * t1485 + t1561 * t1574;
t1597 = -t1561 * t1485 + t1559 * t1574;
t1602 = -t1564 * t1597 + t1566 * t1596;
t1607 = -t1560 * t1479 + t1562 * t1602;
t1608 = t1562 * t1479 + t1560 * t1602;
t1612 = -t1565 * t1608 + t1567 * t1607;
t1611 = t1565 * t1607 + t1567 * t1608;
t1605 = t1564 * t1603 + t1566 * t1604;
t1601 = t1564 * t1596 + t1566 * t1597;
t1595 = t1566 ^ 2;
t1594 = -2 * qJD(4);
t1545 = -t1567 * g(1) - t1565 * g(2);
t1569 = qJD(1) ^ 2;
t1531 = -t1569 * pkin(1) + t1545;
t1544 = t1565 * g(1) - t1567 * g(2);
t1572 = qJDD(1) * pkin(1) + t1544;
t1506 = t1562 * t1531 + t1560 * t1572;
t1495 = -t1569 * pkin(2) + qJDD(1) * pkin(6) + t1506;
t1586 = t1564 * t1495;
t1585 = t1564 * t1569;
t1584 = t1595 * t1569;
t1556 = -g(3) + qJDD(2);
t1487 = t1566 * t1495 + t1564 * t1556;
t1555 = t1564 ^ 2;
t1581 = t1555 + t1595;
t1541 = qJD(3) * pkin(3) - qJ(4) * t1593;
t1464 = -pkin(3) * t1584 + t1573 * qJ(4) - qJD(3) * t1541 + t1487;
t1570 = qJDD(3) * pkin(3) - t1533 * qJ(4) - t1586 + (qJ(4) * qJD(1) * qJD(3) + pkin(3) * t1585 + t1556) * t1566;
t1444 = t1561 * t1464 + t1522 * t1594 + t1559 * t1570;
t1578 = t1559 * t1464 - t1561 * t1570;
t1505 = -t1560 * t1531 + t1562 * t1572;
t1535 = -t1560 * qJDD(1) - t1562 * t1569;
t1536 = t1562 * qJDD(1) - t1560 * t1569;
t1576 = t1567 * t1535 - t1565 * t1536;
t1575 = t1565 * t1535 + t1567 * t1536;
t1494 = -qJDD(1) * pkin(2) - t1569 * pkin(6) - t1505;
t1469 = -t1573 * pkin(3) - qJ(4) * t1584 + t1541 * t1593 + qJDD(4) + t1494;
t1549 = t1566 * t1585;
t1548 = -t1568 - t1584;
t1547 = -t1555 * t1569 - t1568;
t1543 = -qJDD(3) + t1549;
t1542 = qJDD(3) + t1549;
t1540 = t1581 * t1569;
t1539 = -t1565 * qJDD(1) - t1567 * t1569;
t1538 = t1567 * qJDD(1) - t1565 * t1569;
t1537 = t1581 * qJDD(1);
t1534 = -0.2e1 * t1580 + t1582;
t1532 = 0.2e1 * t1579 + t1583;
t1512 = t1566 * t1543 - t1564 * t1547;
t1511 = -t1564 * t1542 + t1566 * t1548;
t1510 = t1564 * t1543 + t1566 * t1547;
t1509 = t1566 * t1542 + t1564 * t1548;
t1508 = t1562 * t1537 - t1560 * t1540;
t1507 = t1560 * t1537 + t1562 * t1540;
t1496 = t1522 * pkin(4) - t1524 * qJ(5);
t1491 = t1562 * t1512 + t1560 * t1532;
t1490 = t1562 * t1511 - t1560 * t1534;
t1489 = t1560 * t1512 - t1562 * t1532;
t1488 = t1560 * t1511 + t1562 * t1534;
t1486 = t1566 * t1556 - t1586;
t1471 = -t1560 * t1505 + t1562 * t1506;
t1470 = t1562 * t1505 + t1560 * t1506;
t1460 = -t1564 * t1486 + t1566 * t1487;
t1459 = t1566 * t1486 + t1564 * t1487;
t1450 = t1562 * t1460 + t1560 * t1494;
t1449 = t1560 * t1460 - t1562 * t1494;
t1443 = t1524 * t1594 - t1578;
t1438 = -t1577 * pkin(4) + (pkin(4) * qJD(3) - (2 * qJD(5))) * t1524 + t1469 + t1598 * qJ(5);
t1429 = qJDD(5) - t1568 * qJ(5) - qJDD(3) * pkin(4) + ((2 * qJD(4)) + t1496) * t1524 + t1578;
t1428 = -t1568 * pkin(4) + qJDD(3) * qJ(5) + 0.2e1 * qJD(5) * qJD(3) - t1522 * t1496 + t1444;
t1423 = -t1559 * t1443 + t1561 * t1444;
t1422 = t1561 * t1443 + t1559 * t1444;
t1421 = t1561 * t1428 + t1559 * t1429;
t1420 = t1559 * t1428 - t1561 * t1429;
t1419 = -t1564 * t1422 + t1566 * t1423;
t1418 = t1566 * t1422 + t1564 * t1423;
t1417 = t1562 * t1419 + t1560 * t1469;
t1416 = t1560 * t1419 - t1562 * t1469;
t1415 = -t1564 * t1420 + t1566 * t1421;
t1414 = t1566 * t1420 + t1564 * t1421;
t1413 = t1562 * t1415 + t1560 * t1438;
t1412 = t1560 * t1415 - t1562 * t1438;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1539, -t1538, 0, -t1565 * t1544 + t1567 * t1545, 0, 0, 0, 0, 0, 0, t1576, -t1575, 0, -t1565 * t1470 + t1567 * t1471, 0, 0, 0, 0, 0, 0, -t1565 * t1488 + t1567 * t1490, -t1565 * t1489 + t1567 * t1491, -t1565 * t1507 + t1567 * t1508, -t1565 * t1449 + t1567 * t1450, 0, 0, 0, 0, 0, 0, t1616, -t1617, t1612, -t1565 * t1416 + t1567 * t1417, 0, 0, 0, 0, 0, 0, t1616, t1612, t1617, -t1565 * t1412 + t1567 * t1413; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1538, t1539, 0, t1567 * t1544 + t1565 * t1545, 0, 0, 0, 0, 0, 0, t1575, t1576, 0, t1567 * t1470 + t1565 * t1471, 0, 0, 0, 0, 0, 0, t1567 * t1488 + t1565 * t1490, t1567 * t1489 + t1565 * t1491, t1567 * t1507 + t1565 * t1508, t1567 * t1449 + t1565 * t1450, 0, 0, 0, 0, 0, 0, t1615, t1618, t1611, t1567 * t1416 + t1565 * t1417, 0, 0, 0, 0, 0, 0, t1615, t1611, -t1618, t1567 * t1412 + t1565 * t1413; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1556, 0, 0, 0, 0, 0, 0, t1509, t1510, 0, t1459, 0, 0, 0, 0, 0, 0, t1605, -t1446, t1601, t1418, 0, 0, 0, 0, 0, 0, t1605, t1601, t1446, t1414; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1569, -qJDD(1), 0, t1545, 0, 0, 0, 0, 0, 0, t1535, -t1536, 0, t1471, 0, 0, 0, 0, 0, 0, t1490, t1491, t1508, t1450, 0, 0, 0, 0, 0, 0, t1613, t1442, t1607, t1417, 0, 0, 0, 0, 0, 0, t1613, t1607, -t1442, t1413; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1569, 0, t1544, 0, 0, 0, 0, 0, 0, t1536, t1535, 0, t1470, 0, 0, 0, 0, 0, 0, t1488, t1489, t1507, t1449, 0, 0, 0, 0, 0, 0, t1614, t1440, t1608, t1416, 0, 0, 0, 0, 0, 0, t1614, t1608, -t1440, t1412; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1556, 0, 0, 0, 0, 0, 0, t1509, t1510, 0, t1459, 0, 0, 0, 0, 0, 0, t1605, -t1446, t1601, t1418, 0, 0, 0, 0, 0, 0, t1605, t1601, t1446, t1414; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1569, -qJDD(1), 0, t1506, 0, 0, 0, 0, 0, 0, t1511, t1512, t1537, t1460, 0, 0, 0, 0, 0, 0, t1606, t1454, t1602, t1419, 0, 0, 0, 0, 0, 0, t1606, t1602, -t1454, t1415; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1569, 0, t1505, 0, 0, 0, 0, 0, 0, t1534, -t1532, t1540, -t1494, 0, 0, 0, 0, 0, 0, -t1480, t1598, t1479, -t1469, 0, 0, 0, 0, 0, 0, -t1480, t1479, -t1598, -t1438; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1556, 0, 0, 0, 0, 0, 0, t1509, t1510, 0, t1459, 0, 0, 0, 0, 0, 0, t1605, -t1446, t1601, t1418, 0, 0, 0, 0, 0, 0, t1605, t1601, t1446, t1414; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1548, t1543, t1582, t1487, 0, 0, 0, 0, 0, 0, t1603, -t1468, t1596, t1423, 0, 0, 0, 0, 0, 0, t1603, t1596, t1468, t1421; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1542, t1547, -t1583, t1486, 0, 0, 0, 0, 0, 0, t1604, -t1466, t1597, t1422, 0, 0, 0, 0, 0, 0, t1604, t1597, t1466, t1420; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1534, t1532, -t1540, t1494, 0, 0, 0, 0, 0, 0, t1480, -t1598, -t1479, t1469, 0, 0, 0, 0, 0, 0, t1480, -t1479, t1598, t1438; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1600, -t1499, t1574, t1444, 0, 0, 0, 0, 0, 0, t1600, t1574, t1499, t1428; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1500, t1599, -t1485, t1443, 0, 0, 0, 0, 0, 0, t1500, -t1485, -t1599, -t1429; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1480, -t1598, -t1479, t1469, 0, 0, 0, 0, 0, 0, t1480, -t1479, t1598, t1438; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1600, t1574, t1499, t1428; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1480, -t1479, t1598, t1438; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1500, t1485, t1599, t1429;];
f_new_reg = t1;
