% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PPRPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d5,theta1,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:03
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PPRPR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRPR2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRPR2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRPR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRPR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PPRPR2_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:03:36
% EndTime: 2019-12-05 15:03:37
% DurationCPUTime: 1.32s
% Computational Cost: add. (1693->121), mult. (2877->142), div. (0->0), fcn. (2122->8), ass. (0->82)
t767 = sin(pkin(7));
t772 = sin(qJ(3));
t774 = cos(qJ(3));
t776 = qJD(3) ^ 2;
t751 = t774 * qJDD(3) - t772 * t776;
t752 = t772 * qJDD(3) + t774 * t776;
t766 = sin(pkin(8));
t768 = cos(pkin(8));
t781 = t766 * t751 + t768 * t752;
t797 = t767 * t781;
t783 = t768 * t751 - t766 * t752;
t796 = t767 * t783;
t769 = cos(pkin(7));
t795 = t769 * t781;
t794 = t769 * t783;
t754 = t767 * g(1) - t769 * g(2);
t748 = -qJDD(2) + t754;
t791 = t767 * t748;
t771 = sin(qJ(5));
t762 = t771 ^ 2;
t773 = cos(qJ(5));
t763 = t773 ^ 2;
t788 = t762 + t763;
t787 = qJD(3) * qJD(5);
t786 = t771 * qJDD(3);
t785 = t773 * qJDD(3);
t784 = t773 * t776 * t771;
t755 = -t769 * g(1) - t767 * g(2);
t764 = -g(3) + qJDD(1);
t738 = -t766 * t755 + t768 * t764;
t739 = t768 * t755 + t766 * t764;
t717 = t774 * t738 - t772 * t739;
t775 = qJD(5) ^ 2;
t779 = -t763 * t776 - t775;
t778 = qJDD(5) - t784;
t714 = -qJDD(3) * pkin(3) - t776 * qJ(4) + qJDD(4) - t717;
t712 = -qJDD(3) * pkin(6) + t714;
t777 = t773 * t712 + t771 * t748;
t718 = t772 * t738 + t774 * t739;
t713 = -t776 * pkin(3) + qJDD(3) * qJ(4) + (2 * qJD(4) * qJD(3)) + t718;
t757 = -t762 * t776 - t775;
t756 = -qJDD(5) - t784;
t753 = t788 * t776;
t750 = t788 * qJDD(3);
t747 = -0.2e1 * t771 * t787 + t785;
t746 = 0.2e1 * t773 * t787 + t786;
t740 = t769 * t748;
t736 = t773 * t756 - t771 * t779;
t735 = t773 * t757 - t771 * t778;
t734 = t771 * t756 + t773 * t779;
t733 = t771 * t757 + t773 * t778;
t732 = -t772 * t750 - t774 * t753;
t731 = t774 * t750 - t772 * t753;
t722 = t772 * t734 + t774 * t747;
t721 = t772 * t733 + t774 * t746;
t720 = -t774 * t734 + t772 * t747;
t719 = -t774 * t733 + t772 * t746;
t716 = -t766 * t738 + t768 * t739;
t715 = t768 * t738 + t766 * t739;
t711 = -t776 * pkin(6) + t713;
t710 = -t766 * t731 + t768 * t732;
t709 = t768 * t731 + t766 * t732;
t708 = t771 * t712 - t773 * t748;
t706 = -t766 * t720 + t768 * t722;
t705 = -t766 * t719 + t768 * t721;
t704 = t768 * t720 + t766 * t722;
t703 = t768 * t719 + t766 * t721;
t702 = -t772 * t717 + t774 * t718;
t701 = t774 * t717 + t772 * t718;
t700 = t774 * t713 + t772 * t714;
t699 = t772 * t713 - t774 * t714;
t698 = t773 * t708 - t771 * t777;
t697 = t771 * t708 + t773 * t777;
t696 = -t766 * t701 + t768 * t702;
t695 = t768 * t701 + t766 * t702;
t694 = t772 * t697 + t774 * t711;
t693 = -t774 * t697 + t772 * t711;
t692 = -t766 * t699 + t768 * t700;
t691 = t768 * t699 + t766 * t700;
t690 = -t766 * t693 + t768 * t694;
t689 = t768 * t693 + t766 * t694;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t767 * t754 + t769 * t755, 0, 0, 0, 0, 0, 0, 0, 0, 0, t769 * t716 - t791, 0, 0, 0, 0, 0, 0, -t795, -t794, 0, t769 * t696 - t791, 0, 0, 0, 0, 0, 0, 0, t795, t794, t769 * t692 - t791, 0, 0, 0, 0, 0, 0, t769 * t705 + t767 * t735, t769 * t706 + t767 * t736, t769 * t710, t769 * t690 + t767 * t698; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t769 * t754 + t767 * t755, 0, 0, 0, 0, 0, 0, 0, 0, 0, t767 * t716 + t740, 0, 0, 0, 0, 0, 0, -t797, -t796, 0, t767 * t696 + t740, 0, 0, 0, 0, 0, 0, 0, t797, t796, t767 * t692 + t740, 0, 0, 0, 0, 0, 0, t767 * t705 - t769 * t735, t767 * t706 - t769 * t736, t767 * t710, t767 * t690 - t769 * t698; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t764, 0, 0, 0, 0, 0, 0, 0, 0, 0, t715, 0, 0, 0, 0, 0, 0, t783, -t781, 0, t695, 0, 0, 0, 0, 0, 0, 0, -t783, t781, t691, 0, 0, 0, 0, 0, 0, t703, t704, t709, t689; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t755, 0, 0, 0, 0, 0, 0, 0, 0, 0, t716, 0, 0, 0, 0, 0, 0, -t781, -t783, 0, t696, 0, 0, 0, 0, 0, 0, 0, t781, t783, t692, 0, 0, 0, 0, 0, 0, t705, t706, t710, t690; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t754, 0, 0, 0, 0, 0, 0, 0, 0, 0, t748, 0, 0, 0, 0, 0, 0, 0, 0, 0, t748, 0, 0, 0, 0, 0, 0, 0, 0, 0, t748, 0, 0, 0, 0, 0, 0, -t735, -t736, 0, -t698; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t764, 0, 0, 0, 0, 0, 0, 0, 0, 0, t715, 0, 0, 0, 0, 0, 0, t783, -t781, 0, t695, 0, 0, 0, 0, 0, 0, 0, -t783, t781, t691, 0, 0, 0, 0, 0, 0, t703, t704, t709, t689; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t739, 0, 0, 0, 0, 0, 0, -t752, -t751, 0, t702, 0, 0, 0, 0, 0, 0, 0, t752, t751, t700, 0, 0, 0, 0, 0, 0, t721, t722, t732, t694; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t738, 0, 0, 0, 0, 0, 0, t751, -t752, 0, t701, 0, 0, 0, 0, 0, 0, 0, -t751, t752, t699, 0, 0, 0, 0, 0, 0, t719, t720, t731, t693; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t748, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t748, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t748, 0, 0, 0, 0, 0, 0, t735, t736, 0, t698; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t776, -qJDD(3), 0, t718, 0, 0, 0, 0, 0, 0, 0, t776, qJDD(3), t713, 0, 0, 0, 0, 0, 0, t746, t747, -t753, t711; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t776, 0, t717, 0, 0, 0, 0, 0, 0, 0, -qJDD(3), t776, -t714, 0, 0, 0, 0, 0, 0, -t733, -t734, t750, -t697; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t748, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t748, 0, 0, 0, 0, 0, 0, t735, t736, 0, t698; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t748, 0, 0, 0, 0, 0, 0, t735, t736, 0, t698; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t776, -qJDD(3), -t713, 0, 0, 0, 0, 0, 0, -t746, -t747, t753, -t711; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t776, t714, 0, 0, 0, 0, 0, 0, t733, t734, -t750, t697; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t757, t756, -t786, t708; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t778, t779, -t785, t777; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t746, t747, -t753, t711;];
f_new_reg = t1;
