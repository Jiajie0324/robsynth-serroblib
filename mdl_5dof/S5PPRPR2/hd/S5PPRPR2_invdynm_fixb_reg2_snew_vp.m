% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PPRPR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d5,theta1,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:03
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PPRPR2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRPR2_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRPR2_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRPR2_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRPR2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PPRPR2_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:03:30
% EndTime: 2019-12-05 15:03:36
% DurationCPUTime: 6.02s
% Computational Cost: add. (10255->373), mult. (17241->449), div. (0->0), fcn. (12102->8), ass. (0->241)
t564 = sin(pkin(7));
t566 = cos(pkin(7));
t542 = g(1) * t564 - g(2) * t566;
t534 = -qJDD(2) + t542;
t570 = sin(qJ(3));
t574 = qJD(3) ^ 2;
t572 = cos(qJ(3));
t621 = t572 * qJDD(3);
t538 = -t570 * t574 + t621;
t486 = pkin(5) * t538 + t534 * t570;
t563 = sin(pkin(8));
t565 = cos(pkin(8));
t622 = t570 * qJDD(3);
t539 = t572 * t574 + t622;
t605 = t538 * t563 + t539 * t565;
t618 = -pkin(5) * t539 + t534 * t572;
t684 = -qJ(2) * t605 - t486 * t563 + t565 * t618;
t688 = t564 * t684;
t687 = t566 * t684;
t607 = t538 * t565 - t539 * t563;
t418 = qJ(2) * t607 + t486 * t565 + t563 * t618;
t686 = t418 * t564;
t685 = t418 * t566;
t682 = pkin(1) * t605;
t681 = pkin(1) * t607;
t680 = qJ(1) * t605;
t679 = qJ(1) * t607;
t677 = t564 * t605;
t676 = t564 * t607;
t675 = t566 * t605;
t674 = t566 * t607;
t543 = g(1) * t566 + g(2) * t564;
t629 = g(3) - qJDD(1);
t510 = -t543 * t563 + t565 * t629;
t511 = -t543 * t565 - t563 * t629;
t458 = t510 * t572 + t511 * t570;
t592 = t510 * t570 - t511 * t572;
t609 = t458 * t570 - t572 * t592;
t406 = t458 * t572 + t570 * t592;
t649 = t563 * t406;
t673 = t565 * t609 + t649;
t643 = t565 * t406;
t387 = -t563 * t609 + t643;
t578 = (2 * qJD(4) * qJD(3)) - t592;
t625 = qJDD(3) * qJ(4);
t448 = -pkin(3) * t574 + t578 + t625;
t562 = qJDD(3) * pkin(3);
t593 = qJDD(4) + t458;
t450 = -qJ(4) * t574 - t562 + t593;
t400 = t448 * t570 - t450 * t572;
t610 = t448 * t572 + t450 * t570;
t670 = -t400 * t563 + t565 * t610;
t378 = t400 * t565 + t563 * t610;
t665 = t564 * t629;
t662 = t566 * t629;
t447 = -qJDD(3) * pkin(6) + t450;
t569 = sin(qJ(5));
t571 = cos(qJ(5));
t436 = -t447 * t571 - t534 * t569;
t437 = t447 * t569 - t534 * t571;
t392 = -t436 * t571 + t437 * t569;
t659 = -pkin(3) - pkin(6);
t658 = pkin(2) * t406;
t657 = pkin(2) * t539;
t656 = pkin(4) * t392;
t445 = -pkin(6) * t574 + t448;
t655 = pkin(4) * t445;
t560 = t569 ^ 2;
t561 = t571 ^ 2;
t627 = t560 + t561;
t537 = t627 * qJDD(3);
t654 = pkin(4) * t537;
t652 = pkin(6) * t392;
t651 = t560 * t574;
t650 = t561 * t574;
t512 = t563 * t534;
t644 = t564 * t534;
t515 = t565 * t534;
t516 = t566 * t534;
t637 = t569 * t445;
t548 = t571 * t574 * t569;
t544 = qJDD(5) + t548;
t636 = t569 * t544;
t545 = qJDD(5) - t548;
t635 = t569 * t545;
t634 = t570 * t537;
t439 = t571 * t445;
t633 = t571 * t544;
t632 = t571 * t545;
t630 = t572 * t537;
t628 = -pkin(3) * t450 + qJ(4) * t448;
t626 = qJD(3) * qJD(5);
t624 = t566 * qJDD(3);
t623 = t569 * qJDD(3);
t553 = t571 * qJDD(3);
t620 = t569 * t626;
t619 = t571 * t626;
t573 = qJD(5) ^ 2;
t602 = -t573 - t650;
t499 = t571 * t602 - t636;
t616 = -pkin(6) * t499 + t439;
t540 = t627 * t574;
t484 = -t540 * t570 + t630;
t485 = -t540 * t572 - t634;
t441 = t484 * t565 + t485 * t563;
t587 = pkin(6) * t537 - t392;
t579 = pkin(3) * t537 - qJ(4) * t540 + t587;
t576 = pkin(2) * t484 + t579;
t374 = -pkin(1) * t441 - t576;
t442 = -t484 * t563 + t485 * t565;
t615 = qJ(1) * t442 + t374;
t575 = t578 + t657;
t410 = -t575 - 0.2e1 * t625 - t682;
t614 = t410 + t679;
t589 = pkin(2) * t538 - t458;
t583 = qJDD(4) - t589;
t411 = 0.2e1 * t562 - t583 + t681;
t613 = t411 + t680;
t582 = -t592 + t657;
t424 = t582 + t682;
t612 = t424 - t679;
t425 = -t589 - t681;
t611 = t425 - t680;
t608 = t510 * t563 + t511 * t565;
t603 = -t542 * t564 - t543 * t566;
t601 = t573 - t650;
t600 = t570 * t548;
t599 = t572 * t548;
t598 = pkin(2) * t400 + t628;
t597 = -pkin(3) * t392 + qJ(4) * t445 - t652;
t531 = 0.2e1 * t619 + t623;
t596 = pkin(4) * t531 + t439;
t533 = t553 - 0.2e1 * t620;
t595 = pkin(4) * t533 - t637;
t547 = -t573 - t651;
t497 = t547 * t569 + t632;
t594 = -pkin(6) * t497 + t637;
t393 = t436 * t569 + t437 * t571;
t456 = t510 * t565 - t511 * t563;
t591 = t542 * t566 - t543 * t564;
t590 = -pkin(3) * t499 + qJ(4) * t533 + t616;
t588 = -pkin(4) * t497 + t436;
t381 = -t392 * t572 + t445 * t570;
t586 = pkin(2) * t381 + t597;
t585 = -t619 - t623;
t584 = -pkin(3) * t497 + qJ(4) * t531 + t594;
t581 = -pkin(4) * t499 + t437;
t463 = -t499 * t572 + t533 * t570;
t580 = pkin(2) * t463 + t590;
t462 = -t497 * t572 + t531 * t570;
t577 = pkin(2) * t462 + t584;
t558 = -0.2e1 * t562;
t556 = 0.2e1 * t625;
t552 = t564 * qJDD(3);
t546 = -t573 + t651;
t541 = (-t560 + t561) * t574;
t532 = t553 - t620;
t528 = pkin(1) * t534;
t526 = t627 * t626;
t509 = qJDD(5) * t572 - t526 * t570;
t508 = qJDD(5) * t570 + t526 * t572;
t507 = t532 * t569 + t561 * t626;
t506 = t560 * t626 + t571 * t585;
t504 = -t569 * t602 - t633;
t503 = -t569 * t601 + t632;
t502 = (t532 - t620) * t571;
t501 = t547 * t571 - t635;
t500 = t546 * t571 - t636;
t498 = t571 * t601 + t635;
t496 = t546 * t569 + t633;
t495 = (-t585 + t619) * t569;
t475 = -t531 * t571 - t533 * t569;
t474 = -t531 * t569 + t533 * t571;
t473 = t506 * t570 - t599;
t472 = t507 * t570 + t599;
t471 = -t506 * t572 - t600;
t470 = -t507 * t572 + t600;
t469 = t498 * t570 + t571 * t621;
t468 = t496 * t570 - t569 * t621;
t467 = -t498 * t572 + t553 * t570;
t466 = -t496 * t572 - t569 * t622;
t465 = t499 * t570 + t533 * t572;
t464 = t497 * t570 + t531 * t572;
t461 = t474 * t570 + t541 * t572;
t460 = -t474 * t572 + t541 * t570;
t453 = -t508 * t563 + t509 * t565;
t452 = t508 * t565 + t509 * t563;
t438 = qJ(2) * t608 + t528;
t435 = -t471 * t563 + t473 * t565;
t434 = -t470 * t563 + t472 * t565;
t433 = t471 * t565 + t473 * t563;
t432 = t470 * t565 + t472 * t563;
t431 = -t467 * t563 + t469 * t565;
t430 = -t466 * t563 + t468 * t565;
t429 = t467 * t565 + t469 * t563;
t428 = t466 * t565 + t468 * t563;
t415 = -t463 * t563 + t465 * t565;
t414 = -t462 * t563 + t464 * t565;
t413 = t463 * t565 + t465 * t563;
t412 = t462 * t565 + t464 * t563;
t409 = -t460 * t563 + t461 * t565;
t408 = t460 * t565 + t461 * t563;
t403 = pkin(2) * t534 + pkin(5) * t609;
t398 = -qJ(4) * t504 - t581;
t397 = t501 * t659 + t596;
t396 = -qJ(4) * t501 - t588;
t395 = t504 * t659 + t595;
t394 = -pkin(5) * t400 + (-pkin(3) * t570 + qJ(4) * t572) * t534;
t390 = pkin(5) * t610 + (pkin(3) * t572 + qJ(4) * t570 + pkin(2)) * t534;
t389 = pkin(4) * t540 + t393;
t384 = -pkin(4) * t630 - pkin(5) * t484 + t389 * t570;
t383 = -pkin(4) * t634 + pkin(5) * t485 - t389 * t572;
t382 = t392 * t570 + t445 * t572;
t376 = -pkin(1) * t413 - t580;
t375 = -pkin(1) * t412 - t577;
t373 = -pkin(5) * t463 - t395 * t570 + t398 * t572;
t372 = -pkin(5) * t462 + t396 * t572 - t397 * t570;
t371 = pkin(1) * t387 + t658;
t370 = -qJ(4) * t393 + t656;
t369 = -pkin(2) * t504 + pkin(5) * t465 + t395 * t572 + t398 * t570;
t368 = -pkin(2) * t501 + pkin(5) * t464 + t396 * t570 + t397 * t572;
t367 = t393 * t659 + t655;
t366 = pkin(5) * t643 + qJ(2) * t387 - t403 * t563;
t365 = pkin(5) * t649 + qJ(2) * t673 + t403 * t565 + t528;
t364 = -t381 * t563 + t382 * t565;
t363 = t381 * t565 + t382 * t563;
t362 = -pkin(1) * t378 - t598;
t361 = -qJ(2) * t441 - t383 * t563 + t384 * t565;
t360 = qJ(2) * t442 + t383 * t565 + t384 * t563;
t359 = -qJ(2) * t378 - t390 * t563 + t394 * t565;
t358 = qJ(2) * t670 + t390 * t565 + t394 * t563 + t528;
t357 = -qJ(2) * t413 - t369 * t563 + t373 * t565;
t356 = -qJ(2) * t412 - t368 * t563 + t372 * t565;
t355 = -pkin(1) * t504 + qJ(2) * t415 + t369 * t565 + t373 * t563;
t354 = -pkin(1) * t501 + qJ(2) * t414 + t368 * t565 + t372 * t563;
t353 = -pkin(5) * t381 - t367 * t570 + t370 * t572;
t352 = -pkin(1) * t363 - t586;
t351 = -pkin(2) * t393 + pkin(5) * t382 + t367 * t572 + t370 * t570;
t350 = -qJ(2) * t363 - t351 * t563 + t353 * t565;
t349 = -pkin(1) * t393 + qJ(2) * t364 + t351 * t565 + t353 * t563;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t665, -t662, -t591, -qJ(1) * t591, 0, 0, 0, 0, 0, 0, -t510 * t564 - t516 * t563, -t511 * t564 - t516 * t565, t566 * t456, -qJ(1) * (t564 * t608 + t516) - (pkin(1) * t564 - qJ(2) * t566) * t456, 0, 0, t674, 0, -t675, t552, -t564 * t611 - t685, -t564 * t612 - t687, t566 * t387, t566 * t366 - t564 * t371 - qJ(1) * (t564 * t673 + t516), t552, -t674, t675, 0, 0, 0, -t566 * t378, -t564 * t613 + t685, -t564 * t614 + t687, t566 * t359 - t564 * t362 - qJ(1) * (t564 * t670 + t516), t434 * t566 + t502 * t564, t409 * t566 + t475 * t564, t431 * t566 + t503 * t564, t435 * t566 + t495 * t564, t430 * t566 + t500 * t564, t566 * t453, t566 * t356 - t564 * t375 - qJ(1) * (t414 * t564 - t501 * t566), t566 * t357 - t564 * t376 - qJ(1) * (t415 * t564 - t504 * t566), t566 * t361 - t564 * t615, t566 * t350 - t564 * t352 - qJ(1) * (t364 * t564 - t393 * t566); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t662, -t665, t603, qJ(1) * t603, 0, 0, 0, 0, 0, 0, t510 * t566 - t563 * t644, t511 * t566 - t515 * t564, t564 * t456, qJ(1) * (t566 * t608 - t644) - (-pkin(1) * t566 - qJ(2) * t564) * t456, 0, 0, t676, 0, -t677, -t624, t566 * t611 - t686, t566 * t612 - t688, t564 * t387, t564 * t366 + t566 * t371 + qJ(1) * (t566 * t673 - t644), -t624, -t676, t677, 0, 0, 0, -t564 * t378, t566 * t613 + t686, t566 * t614 + t688, t564 * t359 + t566 * t362 + qJ(1) * (t566 * t670 - t644), t434 * t564 - t502 * t566, t409 * t564 - t475 * t566, t431 * t564 - t503 * t566, t435 * t564 - t495 * t566, t430 * t564 - t500 * t566, t564 * t453, t564 * t356 + t566 * t375 + qJ(1) * (t414 * t566 + t501 * t564), t564 * t357 + t566 * t376 + qJ(1) * (t415 * t566 + t504 * t564), t564 * t361 + t566 * t615, t564 * t350 + t566 * t352 + qJ(1) * (t364 * t566 + t393 * t564); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t542, t543, 0, 0, 0, 0, 0, 0, 0, 0, t515, -t512, t608, t438, 0, 0, t605, 0, t607, 0, t684, -t418, t673, t365, 0, -t605, -t607, 0, 0, 0, t670, -t684, t418, t358, t432, t408, t429, t433, t428, t452, t354, t355, t360, t349; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t629, -t542, 0, 0, 0, 0, 0, 0, 0, -t512, -t515, t456, qJ(2) * t456, 0, 0, t607, 0, -t605, 0, -t418, -t684, t387, t366, 0, -t607, t605, 0, 0, 0, -t378, t418, t684, t359, t434, t409, t431, t435, t430, t453, t356, t357, t361, t350; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t629, 0, -t543, 0, 0, 0, 0, 0, 0, 0, t510, t511, 0, pkin(1) * t456, 0, 0, 0, 0, 0, -qJDD(3), t425, t424, 0, t371, -qJDD(3), 0, 0, 0, 0, 0, 0, t411, t410, t362, -t502, -t475, -t503, -t495, -t500, 0, t375, t376, t374, t352; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t542, t543, 0, 0, 0, 0, 0, 0, 0, 0, t515, -t512, t608, t438, 0, 0, t605, 0, t607, 0, t684, -t418, t673, t365, 0, -t605, -t607, 0, 0, 0, t670, -t684, t418, t358, t432, t408, t429, t433, t428, t452, t354, t355, t360, t349; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t534, t510, 0, 0, 0, t538, 0, -t539, 0, -t486, -t618, t406, pkin(5) * t406, 0, -t538, t539, 0, 0, 0, -t400, t486, t618, t394, t472, t461, t469, t473, t468, t509, t372, t373, t384, t353; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t534, 0, t511, 0, 0, 0, t539, 0, t538, 0, t618, -t486, t609, t403, 0, -t539, -t538, 0, 0, 0, t610, -t618, t486, t390, t470, t460, t467, t471, t466, t508, t368, t369, t383, t351; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t510, -t511, 0, 0, 0, 0, 0, 0, 0, qJDD(3), t589, -t582, 0, -t658, qJDD(3), 0, 0, 0, 0, 0, 0, t558 + t583, t556 + t575, t598, t502, t475, t503, t495, t500, 0, t577, t580, t576, t586; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), 0, -t574, 0, 0, -t534, t458, 0, 0, -qJDD(3), t574, 0, 0, 0, t450, 0, t534, qJ(4) * t534, t548, t541, t553, -t548, -t623, qJDD(5), t396, t398, -t654, t370; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t574, 0, qJDD(3), 0, t534, 0, -t592, 0, 0, -t574, -qJDD(3), 0, 0, 0, t448, -t534, 0, pkin(3) * t534, -t507, -t474, -t498, -t506, -t496, t526, t397, t395, -t389, t367; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t458, t592, 0, 0, qJDD(3), 0, 0, 0, 0, 0, 0, t558 + t593, t556 + t578, t628, t502, t475, t503, t495, t500, 0, t584, t590, t579, t597; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), 0, 0, 0, 0, 0, 0, t450, t448, 0, t502, t475, t503, t495, t500, 0, t594, t616, t587, -t652; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t574, 0, 0, 0, -t450, 0, -t534, 0, -t548, -t541, -t553, t548, t623, -qJDD(5), t588, t581, t654, -t656; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t574, qJDD(3), 0, 0, 0, -t448, t534, 0, 0, t507, t474, t498, t506, t496, -t526, pkin(6) * t501 - t596, pkin(6) * t504 - t595, t389, pkin(6) * t393 - t655; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t532, -t531, t545, t620, t546, -t620, 0, t445, t436, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t619, t533, t601, t585, t544, -t619, -t445, 0, t437, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t548, t541, t553, -t548, -t623, qJDD(5), -t436, -t437, 0, 0;];
m_new_reg = t1;
