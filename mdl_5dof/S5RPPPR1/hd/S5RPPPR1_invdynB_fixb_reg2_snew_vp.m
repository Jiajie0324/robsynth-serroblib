% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPPPR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d5,theta2,theta3,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:21
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPPPR1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPPR1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPPR1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPPR1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPPR1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPPPR1_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:20:44
% EndTime: 2020-01-03 11:20:55
% DurationCPUTime: 10.92s
% Computational Cost: add. (31526->555), mult. (75833->857), div. (0->0), fcn. (48937->10), ass. (0->397)
t565 = sin(qJ(1));
t567 = cos(qJ(1));
t531 = t565 * g(2) - t567 * g(3);
t568 = qJD(1) ^ 2;
t516 = -t568 * pkin(1) - t531;
t560 = sin(pkin(7));
t563 = cos(pkin(7));
t532 = t567 * g(2) + t565 * g(3);
t573 = qJDD(1) * pkin(1) - t532;
t455 = t560 * t516 - t563 * t573;
t456 = t563 * t516 + t560 * t573;
t588 = t560 * t455 + t563 * t456;
t400 = t563 * t455 - t560 * t456;
t618 = t567 * t400;
t345 = t565 * t588 - t618;
t621 = t565 * t400;
t662 = t567 * t588 + t621;
t607 = t560 * qJDD(1);
t519 = t563 * t568 + t607;
t615 = g(1) - qJDD(2);
t491 = -qJ(2) * t519 + t563 * t615;
t605 = t563 * qJDD(1);
t520 = -t560 * t568 + t605;
t647 = -qJ(2) * t520 - t560 * t615;
t648 = t565 * t519 - t567 * t520;
t661 = -pkin(5) * t648 + t565 * t491 - t567 * t647;
t466 = -t567 * t519 - t565 * t520;
t660 = pkin(5) * t466 + t567 * t491 + t565 * t647;
t557 = qJDD(1) * pkin(2);
t439 = -t568 * qJ(3) + qJDD(3) + t455 - t557;
t559 = sin(pkin(8));
t562 = cos(pkin(8));
t644 = pkin(3) * t562;
t582 = -qJ(4) * t559 - t644;
t614 = qJD(1) * t559;
t658 = -0.2e1 * qJD(4) * t614 + qJDD(1) * t582 + t439;
t558 = sin(pkin(9));
t561 = cos(pkin(9));
t564 = sin(qJ(5));
t566 = cos(qJ(5));
t578 = t558 * t566 + t561 * t564;
t575 = t578 * t559;
t486 = qJD(1) * t575;
t609 = qJDD(1) * t559;
t593 = t558 * t609;
t632 = t559 * t561;
t598 = t566 * t632;
t436 = -t486 * qJD(5) + qJDD(1) * t598 - t564 * t593;
t613 = t562 * qJD(1);
t537 = -qJD(5) + t613;
t641 = t486 * t537;
t657 = t436 + t641;
t440 = -t568 * pkin(2) + qJDD(1) * qJ(3) + t456;
t646 = 2 * qJD(3);
t656 = qJD(1) * t646 + t440;
t553 = t559 ^ 2;
t555 = t562 ^ 2;
t625 = t562 * t568;
t513 = (t553 + t555) * t625;
t591 = t562 * t605;
t471 = -t560 * t513 + t591;
t606 = t562 * qJDD(1);
t592 = t560 * t606;
t473 = t563 * t513 + t592;
t418 = t567 * t471 - t565 * t473;
t420 = t565 * t471 + t567 * t473;
t488 = -t558 * t564 * t614 + qJD(1) * t598;
t653 = (qJD(5) + t537) * t488;
t536 = -qJDD(5) + t606;
t640 = t488 * t486;
t574 = -t536 - t640;
t652 = t564 * t574;
t650 = t566 * t574;
t484 = t486 ^ 2;
t485 = t488 ^ 2;
t535 = t537 ^ 2;
t645 = pkin(3) * t559;
t639 = t537 * t564;
t638 = t537 * t566;
t637 = t553 * t568;
t425 = -t559 * t615 + t656 * t562;
t514 = t582 * qJD(1);
t394 = t514 * t613 + t425;
t576 = t658 * t561;
t577 = -pkin(4) * t562 - pkin(6) * t632;
t631 = t559 * t562;
t330 = t577 * qJDD(1) + (-t394 + (-pkin(4) * t553 * t561 + pkin(6) * t631) * t568) * t558 + t576;
t348 = t561 * t394 + t658 * t558;
t505 = t577 * qJD(1);
t551 = t558 ^ 2;
t534 = t551 * t637;
t331 = -pkin(4) * t534 - pkin(6) * t593 + t505 * t613 + t348;
t284 = -t566 * t330 + t564 * t331;
t285 = t564 * t330 + t566 * t331;
t246 = -t566 * t284 + t564 * t285;
t636 = t558 * t246;
t542 = t562 * t615;
t604 = qJDD(4) + t542;
t612 = t646 + t514;
t393 = (qJD(1) * t612 + t440) * t559 + t604;
t635 = t558 * t393;
t601 = t558 * t561 * t568;
t521 = t553 * t601;
t497 = -t521 + t606;
t634 = t558 * t497;
t498 = -t521 - t606;
t633 = t558 * t498;
t630 = t560 * t439;
t629 = t561 * t246;
t628 = t561 * t393;
t627 = t561 * t497;
t626 = t561 * t498;
t624 = t563 * t439;
t610 = qJDD(1) * t558;
t364 = -pkin(6) * t534 + (pkin(4) * t610 + t440 + (t505 * t561 + t612) * qJD(1)) * t559 + t604;
t623 = t564 * t364;
t428 = t536 - t640;
t622 = t564 * t428;
t620 = t566 * t364;
t619 = t566 * t428;
t608 = qJDD(1) * t561;
t554 = t561 ^ 2;
t602 = t554 * t637;
t600 = t558 * t625;
t599 = t559 * t640;
t597 = t559 * t625;
t596 = t561 * t625;
t595 = t562 * t640;
t594 = t558 * t608;
t527 = -t565 * qJDD(1) - t567 * t568;
t590 = pkin(5) * t527 + t567 * g(1);
t589 = -t439 + t557;
t247 = t564 * t284 + t566 * t285;
t424 = t656 * t559 + t542;
t363 = t559 * t424 + t562 * t425;
t475 = -t565 * t531 - t567 * t532;
t552 = t559 * t553;
t585 = t552 * t601;
t584 = t558 * t596;
t583 = t559 * t591;
t581 = t553 * t584;
t347 = t558 * t394 - t576;
t299 = -t561 * t347 + t558 * t348;
t300 = t558 * t347 + t561 * t348;
t362 = t562 * t424 - t559 * t425;
t480 = t519 * t631;
t481 = -t560 * t597 + t583;
t580 = t567 * t480 + t565 * t481;
t579 = t565 * t480 - t567 * t481;
t476 = t567 * t531 - t565 * t532;
t572 = qJDD(1) * t575;
t571 = t578 * t609;
t546 = t555 * t568;
t544 = t555 * qJDD(1);
t543 = t553 * qJDD(1);
t528 = t567 * qJDD(1) - t565 * t568;
t524 = t546 - t637;
t523 = t546 + t637;
t518 = t544 - t543;
t517 = t544 + t543;
t512 = -t546 - t602;
t511 = t546 - t602;
t510 = (t555 * t559 + t552) * t568;
t509 = -t534 - t546;
t508 = t534 - t546;
t501 = pkin(5) * t528 + t565 * g(1);
t500 = t534 - t602;
t499 = t534 + t602;
t496 = (t600 - t608) * t559;
t495 = (t600 + t608) * t559;
t494 = (t596 - t610) * t559;
t493 = (t596 + t610) * t559;
t483 = (-t551 - t554) * t597;
t482 = (qJDD(1) * t554 + t584) * t559;
t479 = (t554 * t625 - t594) * t559;
t478 = (t551 * t625 + t594) * t559;
t477 = (qJDD(1) * t551 - t584) * t559;
t472 = t563 * t510 + t559 * t607;
t469 = t560 * t510 - t559 * t605;
t462 = t563 * t518 - t560 * t524;
t461 = t563 * t517 - t560 * t523;
t460 = t560 * t518 + t563 * t524;
t459 = t560 * t517 + t563 * t523;
t458 = -t485 + t535;
t457 = t484 - t535;
t453 = t562 * t482 + t585;
t452 = t562 * t477 - t585;
t451 = -t560 * t483 - t583;
t450 = t563 * t483 - t559 * t592;
t449 = -t485 - t535;
t448 = -t558 * t511 + t626;
t447 = -t558 * t512 + t627;
t446 = t561 * t509 - t633;
t445 = t561 * t508 + t634;
t444 = -t561 * t511 - t633;
t443 = t561 * t512 + t634;
t442 = t558 * t509 + t626;
t441 = -t558 * t508 + t627;
t437 = -t485 + t484;
t435 = -t488 * qJD(5) - t572;
t434 = -t561 * t493 - t558 * t496;
t433 = t561 * t494 - t558 * t495;
t432 = -t558 * t493 + t561 * t496;
t431 = -t558 * t494 - t561 * t495;
t426 = -t535 - t484;
t419 = t565 * t469 - t567 * t472;
t417 = t567 * t469 + t565 * t472;
t416 = (t486 * t566 - t488 * t564) * t537;
t415 = (t486 * t564 + t488 * t566) * t537;
t414 = t562 * t448 - t559 * t496;
t413 = t562 * t447 + t559 * t495;
t412 = t562 * t446 - t559 * t494;
t411 = t562 * t445 - t559 * t493;
t410 = t559 * t447 - t562 * t495;
t409 = t559 * t446 + t562 * t494;
t408 = t565 * t459 - t567 * t461;
t407 = t567 * t459 + t565 * t461;
t406 = -t484 - t485;
t405 = t563 * t453 - t560 * t479;
t404 = t563 * t452 - t560 * t478;
t403 = t560 * t453 + t563 * t479;
t402 = t560 * t452 + t563 * t478;
t399 = t562 * t434 - t559 * t499;
t398 = t562 * t433 - t559 * t500;
t395 = t559 * t434 + t562 * t499;
t392 = -t436 + t641;
t389 = -t572 - t653;
t388 = t571 + t653;
t387 = (qJD(5) - t537) * t488 + t571;
t385 = pkin(1) * t615 + qJ(2) * t588;
t384 = t566 * t436 + t488 * t639;
t383 = t564 * t436 - t488 * t638;
t382 = -t564 * t435 - t486 * t638;
t381 = t566 * t435 - t486 * t639;
t380 = t566 * t457 + t622;
t379 = -t564 * t458 + t650;
t378 = t564 * t457 - t619;
t377 = t566 * t458 + t652;
t376 = -t564 * t449 + t619;
t375 = t566 * t449 + t622;
t374 = t566 * t426 - t652;
t373 = t564 * t426 + t650;
t372 = t563 * t414 - t560 * t444;
t371 = t563 * t413 + t560 * t443;
t370 = t563 * t412 + t560 * t442;
t369 = t563 * t411 - t560 * t441;
t368 = t560 * t414 + t563 * t444;
t367 = t560 * t413 - t563 * t443;
t366 = t560 * t412 - t563 * t442;
t365 = t560 * t411 + t563 * t441;
t360 = -qJ(4) * t443 + t628;
t359 = -qJ(4) * t442 + t635;
t358 = t563 * t399 + t560 * t432;
t357 = t563 * t398 - t560 * t431;
t356 = t560 * t399 - t563 * t432;
t355 = t560 * t398 + t563 * t431;
t354 = -qJ(2) * t469 - t560 * t425 + t562 * t624;
t353 = -qJ(2) * t471 - t560 * t424 + t559 * t624;
t352 = qJ(2) * t472 + t563 * t425 + t562 * t630;
t351 = -qJ(2) * t473 + t563 * t424 + t559 * t630;
t350 = -t558 * t415 + t561 * t416;
t349 = -t561 * t415 - t558 * t416;
t344 = t562 * t350 - t559 * t536;
t343 = -qJ(2) * t459 + t563 * t362;
t342 = qJ(2) * t461 + t560 * t362;
t341 = t566 * t389 - t564 * t392;
t340 = -t566 * t387 - t564 * t657;
t339 = t564 * t389 + t566 * t392;
t338 = -t564 * t387 + t566 * t657;
t337 = t563 * t363 + t630;
t336 = t560 * t363 - t624;
t335 = -t558 * t383 + t561 * t384;
t334 = -t558 * t381 + t561 * t382;
t333 = -t561 * t383 - t558 * t384;
t332 = -t561 * t381 - t558 * t382;
t329 = -pkin(3) * t443 + t348;
t328 = -pkin(3) * t442 + t347;
t324 = -t558 * t378 + t561 * t380;
t323 = -t558 * t377 + t561 * t379;
t322 = -t561 * t378 - t558 * t380;
t321 = -t561 * t377 - t558 * t379;
t320 = -t558 * t375 + t561 * t376;
t319 = t561 * t375 + t558 * t376;
t318 = -pkin(2) * t409 - pkin(3) * t494 - qJ(4) * t446 + t628;
t317 = -pkin(2) * t410 + pkin(3) * t495 - qJ(4) * t447 - t635;
t316 = -pkin(6) * t375 + t620;
t315 = t562 * t335 + t599;
t314 = t562 * t334 - t599;
t313 = -t558 * t373 + t561 * t374;
t312 = t561 * t373 + t558 * t374;
t311 = t565 * t367 - t567 * t371;
t310 = t565 * t366 - t567 * t370;
t309 = t567 * t367 + t565 * t371;
t308 = t567 * t366 + t565 * t370;
t307 = -pkin(6) * t373 + t623;
t306 = t565 * t356 - t567 * t358;
t305 = t567 * t356 + t565 * t358;
t304 = t562 * t324 - t559 * t388;
t303 = t562 * t323 - t559 * t392;
t302 = t562 * t320 + t559 * t657;
t301 = t559 * t320 - t562 * t657;
t298 = -pkin(4) * t657 + pkin(6) * t376 + t623;
t297 = t563 * t344 - t560 * t349;
t296 = t560 * t344 + t563 * t349;
t295 = -pkin(4) * t387 + pkin(6) * t374 - t620;
t294 = t562 * t313 + t559 * t387;
t293 = t559 * t313 - t562 * t387;
t292 = -t558 * t339 + t561 * t341;
t291 = -t558 * t338 + t561 * t340;
t290 = t561 * t339 + t558 * t341;
t289 = -t561 * t338 - t558 * t340;
t288 = t565 * t336 - t567 * t337;
t287 = t567 * t336 + t565 * t337;
t286 = -qJ(4) * t432 - t299;
t282 = t562 * t300 + t559 * t393;
t281 = t559 * t300 - t562 * t393;
t280 = t562 * t291 - t559 * t437;
t279 = -qJ(3) * t410 - t559 * t329 + t562 * t360;
t278 = -qJ(3) * t409 - t559 * t328 + t562 * t359;
t277 = t562 * t292 + t559 * t406;
t276 = t559 * t292 - t562 * t406;
t275 = t563 * t315 - t560 * t333;
t274 = t563 * t314 - t560 * t332;
t273 = t560 * t315 + t563 * t333;
t272 = t560 * t314 + t563 * t332;
t271 = -qJ(2) * t336 - (pkin(2) * t560 - qJ(3) * t563) * t362;
t270 = -pkin(2) * t395 - pkin(3) * t499 - qJ(4) * t434 - t300;
t269 = t563 * t304 - t560 * t322;
t268 = t563 * t303 - t560 * t321;
t267 = t560 * t304 + t563 * t322;
t266 = t560 * t303 + t563 * t321;
t265 = -qJ(3) * t395 + t562 * t286 + t432 * t645;
t264 = -pkin(3) * t290 - pkin(4) * t339;
t263 = t563 * t302 + t560 * t319;
t262 = t560 * t302 - t563 * t319;
t261 = qJ(2) * t337 - (-pkin(2) * t563 - qJ(3) * t560 - pkin(1)) * t362;
t260 = t563 * t294 + t560 * t312;
t259 = t560 * t294 - t563 * t312;
t258 = -pkin(3) * t319 - pkin(4) * t375 + t285;
t257 = t563 * t282 + t560 * t299;
t256 = t560 * t282 - t563 * t299;
t255 = -qJ(2) * t367 + t563 * t279 - t560 * t317;
t254 = -qJ(2) * t366 + t563 * t278 - t560 * t318;
t253 = t563 * t280 - t560 * t289;
t252 = t560 * t280 + t563 * t289;
t251 = -pkin(3) * t312 - pkin(4) * t373 + t284;
t250 = -qJ(4) * t319 - t558 * t298 + t561 * t316;
t249 = t563 * t277 + t560 * t290;
t248 = t560 * t277 - t563 * t290;
t245 = -pkin(2) * t281 + pkin(3) * t393 - qJ(4) * t300;
t244 = -pkin(1) * t410 + qJ(2) * t371 + t560 * t279 + t563 * t317;
t243 = -pkin(1) * t409 + qJ(2) * t370 + t560 * t278 + t563 * t318;
t242 = -qJ(4) * t312 - t558 * t295 + t561 * t307;
t241 = -pkin(4) * t364 + pkin(6) * t247;
t240 = -pkin(6) * t339 - t246;
t239 = -pkin(4) * t406 + pkin(6) * t341 + t247;
t238 = -qJ(3) * t281 + (-qJ(4) * t562 + t645) * t299;
t237 = t565 * t262 - t567 * t263;
t236 = t567 * t262 + t565 * t263;
t235 = -qJ(2) * t356 + t563 * t265 - t560 * t270;
t234 = -pkin(2) * t301 + pkin(3) * t657 - qJ(4) * t320 - t561 * t298 - t558 * t316;
t233 = t565 * t259 - t567 * t260;
t232 = t567 * t259 + t565 * t260;
t231 = -pkin(1) * t395 + qJ(2) * t358 + t560 * t265 + t563 * t270;
t230 = -pkin(2) * t293 + pkin(3) * t387 - qJ(4) * t313 - t561 * t295 - t558 * t307;
t229 = t565 * t256 - t567 * t257;
t228 = t567 * t256 + t565 * t257;
t227 = t565 * t248 - t567 * t249;
t226 = t567 * t248 + t565 * t249;
t225 = t561 * t247 - t636;
t224 = t558 * t247 + t629;
t223 = t562 * t225 + t559 * t364;
t222 = t559 * t225 - t562 * t364;
t221 = -qJ(3) * t301 + t562 * t250 - t559 * t258;
t220 = -qJ(3) * t293 + t562 * t242 - t559 * t251;
t219 = -qJ(4) * t290 - t558 * t239 + t561 * t240;
t218 = -pkin(3) * t224 - pkin(4) * t246;
t217 = -qJ(2) * t256 + t563 * t238 - t560 * t245;
t216 = -pkin(2) * t276 + pkin(3) * t406 - qJ(4) * t292 - t561 * t239 - t558 * t240;
t215 = -pkin(1) * t281 + qJ(2) * t257 + t560 * t238 + t563 * t245;
t214 = -qJ(3) * t276 + t562 * t219 - t559 * t264;
t213 = -pkin(6) * t629 - qJ(4) * t224 - t558 * t241;
t212 = t563 * t223 + t560 * t224;
t211 = t560 * t223 - t563 * t224;
t210 = -qJ(2) * t262 + t563 * t221 - t560 * t234;
t209 = -qJ(2) * t259 + t563 * t220 - t560 * t230;
t208 = -pkin(1) * t301 + qJ(2) * t263 + t560 * t221 + t563 * t234;
t207 = -pkin(1) * t293 + qJ(2) * t260 + t560 * t220 + t563 * t230;
t206 = -pkin(2) * t222 + pkin(3) * t364 + pkin(6) * t636 - qJ(4) * t225 - t561 * t241;
t205 = t565 * t211 - t567 * t212;
t204 = t567 * t211 + t565 * t212;
t203 = -qJ(2) * t248 + t563 * t214 - t560 * t216;
t202 = -pkin(1) * t276 + qJ(2) * t249 + t560 * t214 + t563 * t216;
t201 = -qJ(3) * t222 + t562 * t213 - t559 * t218;
t200 = -qJ(2) * t211 + t563 * t201 - t560 * t206;
t199 = -pkin(1) * t222 + qJ(2) * t212 + t560 * t201 + t563 * t206;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t615, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t362, 0, 0, 0, 0, 0, 0, t409, t410, t395, t281, 0, 0, 0, 0, 0, 0, t293, t301, t276, t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t528, t527, 0, t475, 0, 0, 0, 0, 0, 0, -t648, t466, 0, t345, 0, 0, 0, 0, 0, 0, t418, t417, t407, t287, 0, 0, 0, 0, 0, 0, t308, t309, t305, t228, 0, 0, 0, 0, 0, 0, t232, t236, t226, t204; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t527, t528, 0, t476, 0, 0, 0, 0, 0, 0, -t466, -t648, 0, -t662, 0, 0, 0, 0, 0, 0, t420, t419, t408, t288, 0, 0, 0, 0, 0, 0, t310, t311, t306, t229, 0, 0, 0, 0, 0, 0, t233, t237, t227, t205; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t532, t531, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t520 - t455, -pkin(1) * t519 - t456, 0, -pkin(1) * t400, t543, 0.2e1 * t559 * t606, 0, t544, 0, 0, pkin(1) * t471 - qJ(3) * t513 + t562 * t589, pkin(1) * t469 + qJ(3) * t510 - t559 * t589, pkin(1) * t459 + pkin(2) * t523 + qJ(3) * t517 + t363, pkin(1) * t336 - pkin(2) * t439 + qJ(3) * t363, t559 * t482 - t581, t559 * t433 + t562 * t500, t559 * t448 + t562 * t496, t559 * t477 + t581, t559 * t445 + t562 * t493, t544, pkin(1) * t366 - pkin(2) * t442 + qJ(3) * t412 + t562 * t328 + t559 * t359, pkin(1) * t367 - pkin(2) * t443 + qJ(3) * t413 + t562 * t329 + t559 * t360, pkin(1) * t356 + qJ(3) * t399 + t559 * t286 + (-pkin(2) - t644) * t432, pkin(1) * t256 + qJ(3) * t282 + (-pkin(2) + t582) * t299, t559 * t335 - t595, t559 * t291 + t562 * t437, t559 * t323 + t562 * t392, t559 * t334 + t595, t559 * t324 + t562 * t388, t559 * t350 + t562 * t536, pkin(1) * t259 - pkin(2) * t312 + qJ(3) * t294 + t559 * t242 + t562 * t251, pkin(1) * t262 - pkin(2) * t319 + qJ(3) * t302 + t559 * t250 + t562 * t258, pkin(1) * t248 - pkin(2) * t290 + qJ(3) * t277 + t559 * t219 + t562 * t264, pkin(1) * t211 - pkin(2) * t224 + qJ(3) * t223 + t559 * t213 + t562 * t218; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t527, 0, t528, 0, t590, -t501, -t476, -pkin(5) * t476, 0, 0, -t466, 0, -t648, 0, t660, -t661, t662, pkin(5) * t662 + qJ(2) * t621 + t567 * t385, t580, t567 * t460 + t565 * t462, t417, -t580, -t418, 0, -pkin(5) * t420 + t567 * t351 + t565 * t353, -pkin(5) * t419 + t567 * t352 + t565 * t354, -pkin(5) * t408 + t567 * t342 + t565 * t343, -pkin(5) * t288 + t567 * t261 + t565 * t271, t567 * t403 + t565 * t405, t567 * t355 + t565 * t357, t567 * t368 + t565 * t372, t567 * t402 + t565 * t404, t567 * t365 + t565 * t369, t567 * t450 + t565 * t451, -pkin(5) * t310 + t567 * t243 + t565 * t254, -pkin(5) * t311 + t567 * t244 + t565 * t255, -pkin(5) * t306 + t567 * t231 + t565 * t235, -pkin(5) * t229 + t567 * t215 + t565 * t217, t567 * t273 + t565 * t275, t567 * t252 + t565 * t253, t567 * t266 + t565 * t268, t567 * t272 + t565 * t274, t567 * t267 + t565 * t269, t567 * t296 + t565 * t297, -pkin(5) * t233 + t567 * t207 + t565 * t209, -pkin(5) * t237 + t567 * t208 + t565 * t210, -pkin(5) * t227 + t567 * t202 + t565 * t203, -pkin(5) * t205 + t567 * t199 + t565 * t200; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t528, 0, -t527, 0, t501, t590, t475, pkin(5) * t475, 0, 0, t648, 0, -t466, 0, t661, t660, t345, pkin(5) * t345 - qJ(2) * t618 + t565 * t385, t579, t565 * t460 - t567 * t462, t419, -t579, -t420, 0, pkin(5) * t418 + t565 * t351 - t567 * t353, pkin(5) * t417 + t565 * t352 - t567 * t354, pkin(5) * t407 + t565 * t342 - t567 * t343, pkin(5) * t287 + t565 * t261 - t567 * t271, t565 * t403 - t567 * t405, t565 * t355 - t567 * t357, t565 * t368 - t567 * t372, t565 * t402 - t567 * t404, t565 * t365 - t567 * t369, t565 * t450 - t567 * t451, pkin(5) * t308 + t565 * t243 - t567 * t254, pkin(5) * t309 + t565 * t244 - t567 * t255, pkin(5) * t305 + t565 * t231 - t567 * t235, pkin(5) * t228 + t565 * t215 - t567 * t217, t565 * t273 - t567 * t275, t565 * t252 - t567 * t253, t565 * t266 - t567 * t268, t565 * t272 - t567 * t274, t565 * t267 - t567 * t269, t565 * t296 - t567 * t297, pkin(5) * t232 + t565 * t207 - t567 * t209, pkin(5) * t236 + t565 * t208 - t567 * t210, pkin(5) * t226 + t565 * t202 - t567 * t203, pkin(5) * t204 + t565 * t199 - t567 * t200;];
tauB_reg = t1;
