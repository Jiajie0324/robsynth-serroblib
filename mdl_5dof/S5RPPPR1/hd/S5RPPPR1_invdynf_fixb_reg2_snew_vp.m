% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPPPR1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d5,theta2,theta3,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:29
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPPPR1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPPR1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPPR1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPPR1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPPR1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPPPR1_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:29:43
% EndTime: 2019-12-05 17:29:45
% DurationCPUTime: 2.78s
% Computational Cost: add. (8459->207), mult. (20431->312), div. (0->0), fcn. (13226->10), ass. (0->174)
t1335 = sin(qJ(1));
t1337 = cos(qJ(1));
t1307 = t1335 * g(2) - t1337 * g(3);
t1338 = qJD(1) ^ 2;
t1295 = -t1338 * pkin(1) + t1307;
t1330 = sin(pkin(7));
t1333 = cos(pkin(7));
t1308 = t1337 * g(2) + t1335 * g(3);
t1348 = qJDD(1) * pkin(1) + t1308;
t1267 = -t1330 * t1295 + t1333 * t1348;
t1260 = -qJDD(1) * pkin(2) - t1338 * qJ(3) + qJDD(3) - t1267;
t1329 = sin(pkin(8));
t1332 = cos(pkin(8));
t1347 = -pkin(3) * t1332 - qJ(4) * t1329;
t1371 = qJD(1) * t1329;
t1355 = -0.2e1 * t1371;
t1378 = qJD(4) * t1355 + t1347 * qJDD(1) + t1260;
t1323 = t1329 ^ 2;
t1325 = t1332 ^ 2;
t1362 = t1323 + t1325;
t1300 = t1362 * t1338;
t1367 = t1332 * qJD(1);
t1311 = -qJD(5) + t1367;
t1377 = qJD(5) - t1311;
t1328 = sin(pkin(9));
t1331 = cos(pkin(9));
t1334 = sin(qJ(5));
t1336 = cos(qJ(5));
t1344 = t1328 * t1336 + t1331 * t1334;
t1341 = t1344 * t1329;
t1276 = qJD(1) * t1341;
t1376 = t1276 ^ 2;
t1368 = t1329 * t1331;
t1352 = t1336 * t1368;
t1278 = -t1334 * t1328 * t1371 + qJD(1) * t1352;
t1375 = t1278 ^ 2;
t1374 = t1311 ^ 2;
t1373 = 2 * qJD(3);
t1372 = -g(1) + qJDD(2);
t1370 = t1278 * t1276;
t1369 = t1323 * t1338;
t1366 = t1332 * t1338;
t1294 = t1347 * qJD(1);
t1365 = t1373 + t1294;
t1364 = qJD(5) + t1311;
t1363 = t1378 * t1331;
t1268 = t1333 * t1295 + t1330 * t1348;
t1361 = qJDD(1) * t1331;
t1360 = t1329 * qJDD(1);
t1359 = t1330 * qJDD(1);
t1317 = t1332 * qJDD(1);
t1358 = t1333 * qJDD(1);
t1316 = t1332 * t1372;
t1357 = qJDD(4) - t1316;
t1356 = t1317 - qJDD(5);
t1322 = t1328 ^ 2;
t1354 = t1322 * t1369;
t1353 = t1328 * t1366;
t1310 = t1329 * t1366;
t1261 = -t1338 * pkin(2) + qJDD(1) * qJ(3) + t1268;
t1252 = t1332 * t1261 + t1329 * t1372 + t1367 * t1373;
t1239 = t1294 * t1367 + t1252;
t1219 = t1331 * t1239 + t1378 * t1328;
t1351 = t1328 * t1360;
t1349 = t1328 * t1331 * t1369;
t1297 = -t1333 * t1338 - t1359;
t1298 = -t1330 * t1338 + t1358;
t1346 = t1337 * t1297 - t1335 * t1298;
t1345 = -t1335 * t1297 - t1337 * t1298;
t1343 = -pkin(4) * t1332 - pkin(6) * t1368;
t1342 = -qJDD(1) * t1352 + t1334 * t1351;
t1324 = t1331 ^ 2;
t1304 = -t1337 * qJDD(1) + t1335 * t1338;
t1303 = t1335 * qJDD(1) + t1337 * t1338;
t1299 = t1331 * t1310;
t1296 = t1362 * qJDD(1);
t1293 = t1332 * t1300;
t1292 = (-t1323 * t1324 - t1325) * t1338;
t1291 = t1329 * t1300;
t1290 = (-t1322 * t1323 - t1325) * t1338;
t1289 = t1343 * qJD(1);
t1285 = (t1322 + t1324) * t1369;
t1284 = -t1317 - t1349;
t1283 = t1317 - t1349;
t1282 = (t1353 - t1361) * t1329;
t1281 = (t1353 + t1361) * t1329;
t1280 = -t1299 - t1351;
t1279 = -t1299 + t1351;
t1275 = -t1333 * t1293 - t1330 * t1317;
t1274 = t1333 * t1291 + t1329 * t1359;
t1273 = -t1330 * t1293 + t1332 * t1358;
t1272 = t1330 * t1291 - t1329 * t1358;
t1270 = t1333 * t1296 - t1330 * t1300;
t1269 = t1330 * t1296 + t1333 * t1300;
t1266 = -t1374 - t1375;
t1265 = t1331 * t1283 - t1328 * t1292;
t1264 = -t1328 * t1284 + t1331 * t1290;
t1263 = t1328 * t1283 + t1331 * t1292;
t1262 = t1331 * t1284 + t1328 * t1290;
t1258 = t1331 * t1280 - t1328 * t1282;
t1257 = t1328 * t1280 + t1331 * t1282;
t1256 = -t1356 - t1370;
t1255 = t1356 - t1370;
t1253 = -t1374 - t1376;
t1251 = qJD(3) * t1355 - t1329 * t1261 + t1316;
t1248 = t1332 * t1265 + t1329 * t1281;
t1247 = t1332 * t1264 + t1329 * t1279;
t1246 = t1329 * t1265 - t1332 * t1281;
t1245 = t1329 * t1264 - t1332 * t1279;
t1244 = -t1375 - t1376;
t1243 = -t1330 * t1267 + t1333 * t1268;
t1242 = t1332 * t1258 - t1329 * t1285;
t1241 = t1333 * t1267 + t1330 * t1268;
t1240 = t1329 * t1258 + t1332 * t1285;
t1238 = (t1365 * qJD(1) + t1261) * t1329 + t1357;
t1237 = t1364 * t1276 + t1342;
t1236 = -t1377 * t1276 - t1342;
t1235 = -qJDD(1) * t1341 - t1364 * t1278;
t1234 = t1377 * t1278 + t1344 * t1360;
t1232 = t1336 * t1255 - t1334 * t1266;
t1231 = t1334 * t1255 + t1336 * t1266;
t1230 = t1336 * t1253 - t1334 * t1256;
t1229 = t1334 * t1253 + t1336 * t1256;
t1228 = t1333 * t1248 + t1330 * t1263;
t1227 = t1333 * t1247 + t1330 * t1262;
t1226 = t1330 * t1248 - t1333 * t1263;
t1225 = t1330 * t1247 - t1333 * t1262;
t1224 = -pkin(6) * t1354 + (pkin(4) * qJDD(1) * t1328 + t1261 + (t1289 * t1331 + t1365) * qJD(1)) * t1329 + t1357;
t1223 = -t1329 * t1251 + t1332 * t1252;
t1222 = t1332 * t1251 + t1329 * t1252;
t1221 = t1333 * t1242 + t1330 * t1257;
t1220 = t1330 * t1242 - t1333 * t1257;
t1218 = -t1328 * t1239 + t1363;
t1217 = t1336 * t1235 - t1334 * t1237;
t1216 = t1334 * t1235 + t1336 * t1237;
t1215 = t1333 * t1223 + t1330 * t1260;
t1214 = t1330 * t1223 - t1333 * t1260;
t1213 = -pkin(4) * t1354 - pkin(6) * t1351 + t1289 * t1367 + t1219;
t1212 = t1343 * qJDD(1) + (-t1239 + (-pkin(4) * t1323 * t1331 + pkin(6) * t1329 * t1332) * t1338) * t1328 + t1363;
t1211 = -t1328 * t1231 + t1331 * t1232;
t1210 = t1331 * t1231 + t1328 * t1232;
t1209 = -t1328 * t1229 + t1331 * t1230;
t1208 = t1331 * t1229 + t1328 * t1230;
t1207 = t1332 * t1211 + t1329 * t1236;
t1206 = t1329 * t1211 - t1332 * t1236;
t1205 = -t1328 * t1218 + t1331 * t1219;
t1204 = t1331 * t1218 + t1328 * t1219;
t1203 = t1332 * t1209 + t1329 * t1234;
t1202 = t1329 * t1209 - t1332 * t1234;
t1201 = -t1328 * t1216 + t1331 * t1217;
t1200 = t1331 * t1216 + t1328 * t1217;
t1199 = t1334 * t1212 + t1336 * t1213;
t1198 = t1336 * t1212 - t1334 * t1213;
t1197 = t1332 * t1205 + t1329 * t1238;
t1196 = t1329 * t1205 - t1332 * t1238;
t1195 = t1332 * t1201 + t1329 * t1244;
t1194 = t1329 * t1201 - t1332 * t1244;
t1193 = t1333 * t1207 + t1330 * t1210;
t1192 = t1330 * t1207 - t1333 * t1210;
t1191 = t1333 * t1203 + t1330 * t1208;
t1190 = t1330 * t1203 - t1333 * t1208;
t1189 = t1333 * t1197 + t1330 * t1204;
t1188 = t1330 * t1197 - t1333 * t1204;
t1187 = t1333 * t1195 + t1330 * t1200;
t1186 = t1330 * t1195 - t1333 * t1200;
t1185 = -t1334 * t1198 + t1336 * t1199;
t1184 = t1336 * t1198 + t1334 * t1199;
t1183 = -t1328 * t1184 + t1331 * t1185;
t1182 = t1331 * t1184 + t1328 * t1185;
t1181 = t1332 * t1183 + t1329 * t1224;
t1180 = t1329 * t1183 - t1332 * t1224;
t1179 = t1333 * t1181 + t1330 * t1182;
t1178 = t1330 * t1181 - t1333 * t1182;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1372, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1222, 0, 0, 0, 0, 0, 0, t1245, t1246, t1240, t1196, 0, 0, 0, 0, 0, 0, t1202, t1206, t1194, t1180; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1304, t1303, 0, -t1335 * t1307 - t1337 * t1308, 0, 0, 0, 0, 0, 0, t1345, -t1346, 0, -t1337 * t1241 - t1335 * t1243, 0, 0, 0, 0, 0, 0, -t1337 * t1273 - t1335 * t1275, -t1337 * t1272 - t1335 * t1274, -t1337 * t1269 - t1335 * t1270, -t1337 * t1214 - t1335 * t1215, 0, 0, 0, 0, 0, 0, -t1337 * t1225 - t1335 * t1227, -t1337 * t1226 - t1335 * t1228, -t1337 * t1220 - t1335 * t1221, -t1337 * t1188 - t1335 * t1189, 0, 0, 0, 0, 0, 0, -t1337 * t1190 - t1335 * t1191, -t1337 * t1192 - t1335 * t1193, -t1337 * t1186 - t1335 * t1187, -t1337 * t1178 - t1335 * t1179; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1303, t1304, 0, t1337 * t1307 - t1335 * t1308, 0, 0, 0, 0, 0, 0, t1346, t1345, 0, -t1335 * t1241 + t1337 * t1243, 0, 0, 0, 0, 0, 0, -t1335 * t1273 + t1337 * t1275, -t1335 * t1272 + t1337 * t1274, -t1335 * t1269 + t1337 * t1270, -t1335 * t1214 + t1337 * t1215, 0, 0, 0, 0, 0, 0, -t1335 * t1225 + t1337 * t1227, -t1335 * t1226 + t1337 * t1228, -t1335 * t1220 + t1337 * t1221, -t1335 * t1188 + t1337 * t1189, 0, 0, 0, 0, 0, 0, -t1335 * t1190 + t1337 * t1191, -t1335 * t1192 + t1337 * t1193, -t1335 * t1186 + t1337 * t1187, -t1335 * t1178 + t1337 * t1179; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1338, -qJDD(1), 0, t1307, 0, 0, 0, 0, 0, 0, t1297, -t1298, 0, t1243, 0, 0, 0, 0, 0, 0, t1275, t1274, t1270, t1215, 0, 0, 0, 0, 0, 0, t1227, t1228, t1221, t1189, 0, 0, 0, 0, 0, 0, t1191, t1193, t1187, t1179; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1338, 0, t1308, 0, 0, 0, 0, 0, 0, t1298, t1297, 0, t1241, 0, 0, 0, 0, 0, 0, t1273, t1272, t1269, t1214, 0, 0, 0, 0, 0, 0, t1225, t1226, t1220, t1188, 0, 0, 0, 0, 0, 0, t1190, t1192, t1186, t1178; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1372, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1222, 0, 0, 0, 0, 0, 0, t1245, t1246, t1240, t1196, 0, 0, 0, 0, 0, 0, t1202, t1206, t1194, t1180; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1338, -qJDD(1), 0, t1268, 0, 0, 0, 0, 0, 0, -t1293, t1291, t1296, t1223, 0, 0, 0, 0, 0, 0, t1247, t1248, t1242, t1197, 0, 0, 0, 0, 0, 0, t1203, t1207, t1195, t1181; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1338, 0, t1267, 0, 0, 0, 0, 0, 0, t1317, -t1360, t1300, -t1260, 0, 0, 0, 0, 0, 0, -t1262, -t1263, -t1257, -t1204, 0, 0, 0, 0, 0, 0, -t1208, -t1210, -t1200, -t1182; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1372, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1222, 0, 0, 0, 0, 0, 0, t1245, t1246, t1240, t1196, 0, 0, 0, 0, 0, 0, t1202, t1206, t1194, t1180; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1325 * t1338, t1310, t1317, t1252, 0, 0, 0, 0, 0, 0, t1264, t1265, t1258, t1205, 0, 0, 0, 0, 0, 0, t1209, t1211, t1201, t1183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1310, -t1369, -t1360, t1251, 0, 0, 0, 0, 0, 0, -t1279, -t1281, t1285, -t1238, 0, 0, 0, 0, 0, 0, -t1234, -t1236, -t1244, -t1224; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1317, t1360, -t1300, t1260, 0, 0, 0, 0, 0, 0, t1262, t1263, t1257, t1204, 0, 0, 0, 0, 0, 0, t1208, t1210, t1200, t1182; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1290, t1283, t1280, t1219, 0, 0, 0, 0, 0, 0, t1230, t1232, t1217, t1185; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1284, t1292, t1282, t1218, 0, 0, 0, 0, 0, 0, t1229, t1231, t1216, t1184; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1279, t1281, -t1285, t1238, 0, 0, 0, 0, 0, 0, t1234, t1236, t1244, t1224; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1253, t1255, t1235, t1199; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1256, t1266, t1237, t1198; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1234, t1236, t1244, t1224;];
f_new_reg = t1;
