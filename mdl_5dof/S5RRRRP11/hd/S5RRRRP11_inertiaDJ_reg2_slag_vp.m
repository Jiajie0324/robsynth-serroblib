% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S5RRRRP11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d4]';
% 
% Output:
% MMD_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:20
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S5RRRRP11_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP11_inertiaDJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP11_inertiaDJ_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRP11_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:18:32
% EndTime: 2019-12-31 22:18:45
% DurationCPUTime: 4.22s
% Computational Cost: add. (4075->357), mult. (11380->649), div. (0->0), fcn. (10344->8), ass. (0->193)
t115 = sin(qJ(3));
t114 = sin(qJ(4));
t117 = cos(qJ(4));
t113 = sin(pkin(5));
t119 = cos(qJ(2));
t210 = t113 * t119;
t118 = cos(qJ(3));
t116 = sin(qJ(2));
t211 = t113 * t116;
t213 = cos(pkin(5));
t74 = t115 * t213 + t118 * t211;
t43 = t114 * t74 + t117 * t210;
t44 = -t114 * t210 + t117 * t74;
t152 = t114 * t44 + t117 * t43;
t202 = qJD(3) * t118;
t206 = qJD(2) * t116;
t176 = t113 * t206;
t200 = qJD(4) * t114;
t205 = qJD(2) * t119;
t175 = t113 * t205;
t186 = t115 * t211;
t42 = -qJD(3) * t186 + (qJD(3) * t213 + t175) * t118;
t244 = -qJD(4) * t210 + t42;
t24 = t114 * t176 + t117 * t244 - t74 * t200;
t218 = t24 * t114;
t106 = qJD(4) * t117;
t23 = t74 * t106 + t114 * t244 - t117 * t176;
t219 = t23 * t117;
t220 = t117 * t44;
t221 = t114 * t43;
t246 = (qJD(4) * (-t220 + t221) - t218 - t219) * t115 - t152 * t202;
t41 = qJD(3) * t74 + t115 * t175;
t73 = -t118 * t213 + t186;
t31 = -t117 * t41 + t200 * t73;
t245 = pkin(9) * t31;
t109 = t114 ^ 2;
t111 = t117 ^ 2;
t209 = t109 - t111;
t91 = t209 * qJD(4);
t229 = pkin(9) * t115;
t163 = -pkin(3) * t118 - t229;
t147 = -pkin(2) + t163;
t138 = t117 * t147;
t228 = pkin(9) * t118;
t162 = pkin(3) * t115 - t228;
t139 = t162 * qJD(3);
t198 = qJD(4) * t118;
t179 = t114 * t198;
t203 = qJD(3) * t117;
t76 = t115 * t203 + t179;
t36 = pkin(8) * t76 - qJD(4) * t138 - t114 * t139;
t156 = pkin(4) * t114 - qJ(5) * t117;
t146 = pkin(8) + t156;
t69 = t146 * t115;
t72 = qJD(4) * t156 - t114 * qJD(5);
t157 = pkin(4) * t117 + qJ(5) * t114;
t86 = -pkin(3) - t157;
t242 = qJD(3) * (-t118 * t86 + t229) - qJD(4) * t69 - t115 * t72;
t185 = pkin(1) * t213;
t82 = pkin(7) * t210 + t116 * t185;
t71 = t82 * qJD(2);
t123 = pkin(3) * t41 - pkin(9) * t42 + t71;
t107 = qJD(3) * t115;
t164 = pkin(2) * t116 - pkin(8) * t119;
t207 = qJD(2) * t113;
t136 = t164 * t207;
t67 = pkin(8) * t213 + t82;
t68 = (-pkin(2) * t119 - pkin(8) * t116 - pkin(1)) * t113;
t172 = qJD(2) * t213;
t165 = t119 * t172;
t70 = -pkin(1) * t165 + pkin(7) * t176;
t18 = t107 * t67 - t115 * t136 + t118 * t70 - t202 * t68;
t131 = pkin(9) * t176 - t18;
t81 = -pkin(7) * t211 + t119 * t185;
t66 = -pkin(2) * t213 - t81;
t122 = pkin(3) * t73 - pkin(9) * t74 + t66;
t39 = t115 * t68 + t118 * t67;
t30 = -pkin(9) * t210 + t39;
t225 = t114 * t122 + t117 * t30;
t4 = -qJD(4) * t225 - t114 * t131 + t117 * t123;
t217 = t24 * t117;
t240 = qJD(4) * t152 + t114 * t23 - t217;
t239 = qJD(4) * t157 - t117 * qJD(5);
t183 = t114 * t107;
t230 = pkin(8) * t118;
t104 = t117 * t230;
t214 = t114 * t147 + t104;
t37 = pkin(8) * t183 - qJD(4) * t214 + t117 * t139;
t204 = qJD(3) * t114;
t32 = t106 * t73 + t114 * t41;
t238 = t115 * (qJD(3) * t43 + t32) + t118 * (t204 * t73 - t23);
t237 = 0.2e1 * t113;
t236 = 0.2e1 * qJD(5);
t235 = pkin(9) * t24;
t234 = t41 * pkin(4);
t233 = pkin(3) * t117;
t232 = pkin(8) * t113;
t231 = pkin(8) * t114;
t212 = qJD(5) * t73;
t222 = qJ(5) * t41;
t121 = t117 * t122;
t3 = -qJD(4) * t121 - t114 * t123 - t117 * t131 + t200 * t30;
t1 = t212 - t3 + t222;
t227 = t1 * t117;
t226 = t3 * t117;
t216 = t41 * t118;
t215 = t42 * t115;
t110 = t115 ^ 2;
t208 = -t118 ^ 2 + t110;
t201 = qJD(3) * t119;
t199 = qJD(4) * t115;
t196 = t118 * qJD(5);
t195 = 0.2e1 * t43 * t23;
t40 = 0.2e1 * t73 * t41;
t194 = -0.2e1 * pkin(2) * qJD(3);
t193 = -0.2e1 * pkin(3) * qJD(4);
t192 = -t107 * t68 + t115 * t70 - t202 * t67;
t191 = t114 * t230;
t190 = pkin(4) * t107;
t189 = pkin(8) * t202;
t188 = pkin(9) * t200;
t187 = pkin(9) * t106;
t108 = t113 ^ 2;
t184 = t108 * t205;
t182 = qJ(5) * t107;
t181 = t117 * t202;
t178 = t115 * t106;
t177 = t117 * t198;
t174 = t114 * t106;
t173 = t115 * t202;
t38 = -t115 * t67 + t118 * t68;
t171 = t208 * qJD(3);
t170 = 0.2e1 * t173;
t169 = t110 * t174;
t168 = t116 * t184;
t167 = t114 * t181;
t29 = pkin(3) * t210 - t38;
t161 = t23 * t44 + t24 * t43;
t160 = t23 * t73 + t41 * t43;
t11 = -t114 * t30 + t121;
t10 = -t73 * pkin(4) - t11;
t9 = qJ(5) * t73 + t225;
t158 = t10 * t117 - t114 * t9;
t155 = -t11 * t117 - t114 * t225;
t49 = -qJ(5) * t118 + t214;
t51 = -t117 * (-pkin(2) - t229) + (pkin(4) + t231 + t233) * t118;
t150 = -t114 * t49 + t117 * t51;
t63 = t138 - t191;
t149 = -t114 * t214 - t117 * t63;
t13 = pkin(4) * t43 - qJ(5) * t44 + t29;
t17 = (-t116 * pkin(3) - t118 * t164) * t207 - t192;
t5 = t23 * pkin(4) - t24 * qJ(5) - t44 * qJD(5) + t17;
t145 = -t106 * t13 - t5 * t114;
t144 = -t5 * t117 + t13 * t200;
t33 = t107 * t73 - t216;
t143 = t106 * t29 + t17 * t114;
t142 = -t17 * t117 + t200 * t29;
t141 = t200 * t43 - t219;
t140 = (t220 + t221) * pkin(9);
t137 = t32 * pkin(9);
t135 = t115 * t201 + t118 * t206;
t134 = t115 * t206 - t118 * t201;
t19 = t118 * t136 + t192;
t128 = -t19 * t115 - t18 * t118 + (-t115 * t39 - t118 * t38) * qJD(3);
t27 = -t36 + t182 - t196;
t34 = -t190 - t37;
t127 = qJD(4) * t150 + t34 * t114 + t27 * t117;
t126 = qJD(4) * t149 - t37 * t114 - t36 * t117;
t125 = t43 * t178 + (t115 * t23 + t202 * t43) * t114;
t99 = -0.2e1 * t173;
t98 = -0.2e1 * t174;
t97 = 0.2e1 * t174;
t96 = pkin(9) * t177;
t85 = -0.2e1 * t168;
t78 = -t177 + t183;
t77 = t114 * t202 + t178;
t75 = -t114 * t199 + t181;
t56 = 0.2e1 * t111 * t173 - 0.2e1 * t169;
t55 = 0.2e1 * t109 * t173 + 0.2e1 * t169;
t50 = t199 * t209 - t167;
t48 = -t114 * t171 + t115 * t177;
t47 = 0.4e1 * t115 * t174 + t202 * t209;
t46 = 0.2e1 * t115 * t179 + 0.2e1 * t203 * t208;
t45 = t110 * t91 - 0.2e1 * t115 * t167;
t35 = t115 * t239 + t146 * t202;
t22 = pkin(9) * t219;
t15 = 0.2e1 * t44 * t24;
t14 = t106 * t44 + t218;
t8 = 0.2e1 * t24 * t73 + 0.2e1 * t41 * t44;
t7 = t44 * t181 + (-t200 * t44 + t217) * t115;
t6 = (t203 * t73 - t24) * t118 + (qJD(3) * t44 - t31) * t115;
t2 = -t234 - t4;
t12 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t168, 0.2e1 * (-t116 ^ 2 + t119 ^ 2) * t108 * qJD(2), t165 * t237, t85, -0.2e1 * t172 * t211, 0, -0.2e1 * pkin(1) * t108 * t206 - 0.2e1 * t213 * t71, -0.2e1 * pkin(1) * t184 + 0.2e1 * t213 * t70, (t116 * t71 - t119 * t70 + (-t116 * t82 - t119 * t81) * qJD(2)) * t237, -0.2e1 * t70 * t82 - 0.2e1 * t71 * t81, 0.2e1 * t74 * t42, -0.2e1 * t41 * t74 - 0.2e1 * t42 * t73, (-t119 * t42 + t206 * t74) * t237, t40, (t119 * t41 - t206 * t73) * t237, t85, 0.2e1 * t66 * t41 + 0.2e1 * t71 * t73 + 0.2e1 * (-t119 * t19 + t206 * t38) * t113, 0.2e1 * t66 * t42 + 0.2e1 * t71 * t74 + 0.2e1 * (-t119 * t18 - t206 * t39) * t113, 0.2e1 * t18 * t73 - 0.2e1 * t19 * t74 - 0.2e1 * t38 * t42 - 0.2e1 * t39 * t41, -0.2e1 * t18 * t39 + 0.2e1 * t19 * t38 + 0.2e1 * t66 * t71, t15, -0.2e1 * t161, t8, t195, -0.2e1 * t160, t40, 0.2e1 * t11 * t41 + 0.2e1 * t17 * t43 + 0.2e1 * t23 * t29 + 0.2e1 * t4 * t73, 0.2e1 * t17 * t44 - 0.2e1 * t225 * t41 + 0.2e1 * t24 * t29 + 0.2e1 * t3 * t73, -0.2e1 * t11 * t24 - 0.2e1 * t225 * t23 + 0.2e1 * t3 * t43 - 0.2e1 * t4 * t44, 0.2e1 * t11 * t4 + 0.2e1 * t17 * t29 - 0.2e1 * t225 * t3, t15, t8, 0.2e1 * t161, t40, 0.2e1 * t160, t195, -0.2e1 * t10 * t41 + 0.2e1 * t13 * t23 - 0.2e1 * t2 * t73 + 0.2e1 * t43 * t5, -0.2e1 * t1 * t43 + 0.2e1 * t10 * t24 + 0.2e1 * t2 * t44 - 0.2e1 * t23 * t9, 0.2e1 * t1 * t73 - 0.2e1 * t13 * t24 + 0.2e1 * t41 * t9 - 0.2e1 * t44 * t5, 0.2e1 * t1 * t9 + 0.2e1 * t10 * t2 + 0.2e1 * t13 * t5; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t175, 0, -t176, 0, -t71, t70, 0, 0, t202 * t74 + t215, -t115 * t41 + t42 * t118 + (-t115 * t74 - t118 * t73) * qJD(3), t134 * t113, t33, t135 * t113, 0, -pkin(2) * t41 + t107 * t66 - t71 * t118 - t134 * t232, -pkin(2) * t42 + t71 * t115 - t135 * t232 + t202 * t66, (t215 - t216 + (t115 * t73 + t118 * t74) * qJD(3)) * pkin(8) + t128, -t71 * pkin(2) + pkin(8) * t128, t7, t246, t6, t125, -t238, t33, t37 * t73 + t63 * t41 + (-t4 + (pkin(8) * t43 + t114 * t29) * qJD(3)) * t118 + (pkin(8) * t23 + qJD(3) * t11 + t143) * t115, t36 * t73 - t214 * t41 + (-t3 + (pkin(8) * t44 + t117 * t29) * qJD(3)) * t118 + (pkin(8) * t24 - qJD(3) * t225 - t142) * t115, -t214 * t23 - t63 * t24 + t36 * t43 - t37 * t44 + t155 * t202 + (t114 * t3 - t117 * t4 + (t11 * t114 - t117 * t225) * qJD(4)) * t115, t11 * t37 - t225 * t36 - t3 * t214 + t4 * t63 + (t115 * t17 + t202 * t29) * pkin(8), t7, t6, -t246, t33, t238, t125, t69 * t23 - t34 * t73 + t35 * t43 - t51 * t41 + (t13 * t204 + t2) * t118 + (-qJD(3) * t10 - t145) * t115, -t49 * t23 + t51 * t24 - t27 * t43 + t34 * t44 + t158 * t202 + (-t1 * t114 + t117 * t2 + (-t10 * t114 - t117 * t9) * qJD(4)) * t115, -t69 * t24 + t27 * t73 - t35 * t44 + t49 * t41 + (-t13 * t203 - t1) * t118 + (qJD(3) * t9 + t144) * t115, t1 * t49 + t10 * t34 + t13 * t35 + t2 * t51 + t27 * t9 + t5 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t170, -0.2e1 * t171, 0, t99, 0, 0, t115 * t194, t118 * t194, 0, 0, t56, 0.2e1 * t45, t46, t55, 0.2e1 * t48, t99, 0.2e1 * t63 * t107 - 0.2e1 * t37 * t118 + 0.2e1 * (t106 * t110 + t114 * t170) * pkin(8), -0.2e1 * t214 * t107 - 0.2e1 * t36 * t118 + 0.2e1 * (-t110 * t200 + t117 * t170) * pkin(8), 0.2e1 * t149 * t202 + 0.2e1 * (t114 * t36 - t117 * t37 + (t114 * t63 - t117 * t214) * qJD(4)) * t115, 0.2e1 * pkin(8) ^ 2 * t173 - 0.2e1 * t214 * t36 + 0.2e1 * t37 * t63, t56, t46, -0.2e1 * t45, t99, -0.2e1 * t48, t55, 0.2e1 * (t204 * t69 + t34) * t118 + 0.2e1 * (-qJD(3) * t51 + t106 * t69 + t35 * t114) * t115, 0.2e1 * t150 * t202 + 0.2e1 * (-t114 * t27 + t117 * t34 + (-t114 * t51 - t117 * t49) * qJD(4)) * t115, 0.2e1 * (-t203 * t69 - t27) * t118 + 0.2e1 * (qJD(3) * t49 - t35 * t117 + t200 * t69) * t115, 0.2e1 * t27 * t49 + 0.2e1 * t34 * t51 + 0.2e1 * t35 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, 0, -t41, t176, t19, t18, 0, 0, t14, -t240, t32, t141, -t31, 0, -pkin(3) * t23 - t137 + t142, -pkin(3) * t24 + t143 + t245, -t226 - t22 + (-t4 + t235) * t114 + (t140 + t155) * qJD(4), -t17 * pkin(3) + (qJD(4) * t155 - t4 * t114 - t226) * pkin(9), t14, t32, t240, 0, t31, t141, t86 * t23 + t72 * t43 - t137 + t144, t227 - t22 + (t2 + t235) * t114 + (t140 + t158) * qJD(4), -t86 * t24 - t72 * t44 + t145 - t245, t13 * t72 + t5 * t86 + (qJD(4) * t158 + t2 * t114 + t227) * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t202, 0, -t107, 0, -t189, pkin(8) * t107, 0, 0, -t50, -t47, t78, t50, t76, 0, t96 + (t231 - t233) * t199 + (t114 * t163 - t104) * qJD(3), (pkin(8) * t115 * t117 + t114 * t162) * qJD(4) + (t117 * t163 + t191) * qJD(3), t126, -pkin(3) * t189 + pkin(9) * t126, -t50, t78, t47, 0, -t76, t50, t96 + (t199 * t86 - t35) * t117 - t242 * t114, t127, (-t35 + (t115 * t86 + t228) * qJD(4)) * t114 + t242 * t117, pkin(9) * t127 + t35 * t86 + t69 * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, -0.2e1 * t91, 0, t98, 0, 0, t114 * t193, t117 * t193, 0, 0, t97, 0, 0.2e1 * t91, 0, 0, t98, -0.2e1 * t117 * t72 + 0.2e1 * t200 * t86, 0, -0.2e1 * t106 * t86 - 0.2e1 * t114 * t72, 0.2e1 * t86 * t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t24, 0, -t23, t41, t4, t3, 0, 0, 0, t24, 0, t41, t23, 0, t4 + 0.2e1 * t234, -pkin(4) * t24 - qJ(5) * t23 - qJD(5) * t43, 0.2e1 * t212 - t3 + 0.2e1 * t222, -pkin(4) * t2 + qJ(5) * t1 + qJD(5) * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t75, 0, -t77, t107, t37, t36, 0, 0, 0, t75, 0, t107, t77, 0, t37 + 0.2e1 * t190, (-pkin(4) * t202 - qJ(5) * t199) * t117 + (-qJ(5) * t202 + (pkin(4) * qJD(4) - qJD(5)) * t115) * t114, -t36 + 0.2e1 * t182 - 0.2e1 * t196, -pkin(4) * t34 + qJ(5) * t27 + qJD(5) * t49; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t106, 0, -t200, 0, -t187, t188, 0, 0, 0, t106, 0, 0, t200, 0, -t187, -t239, -t188, -t239 * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t236, qJ(5) * t236; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t41, t24, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t107, t75, 0, t34; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t106, 0, t187; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t12;
