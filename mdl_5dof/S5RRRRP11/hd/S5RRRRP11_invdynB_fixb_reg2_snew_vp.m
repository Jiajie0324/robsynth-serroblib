% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRRP11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:20
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRRP11_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP11_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP11_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP11_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP11_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRP11_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:18:55
% EndTime: 2019-12-31 22:19:38
% DurationCPUTime: 36.06s
% Computational Cost: add. (94621->705), mult. (204648->1078), div. (0->0), fcn. (160299->10), ass. (0->547)
t909 = cos(qJ(2));
t1019 = qJD(1) * t909;
t901 = sin(pkin(5));
t891 = t901 * t1019;
t1014 = t891 - qJD(3);
t902 = cos(pkin(5));
t893 = t902 * qJD(1) + qJD(2);
t904 = sin(qJ(3));
t908 = cos(qJ(3));
t905 = sin(qJ(2));
t1020 = qJD(1) * t905;
t998 = t901 * t1020;
t862 = t904 * t893 + t908 * t998;
t903 = sin(qJ(4));
t907 = cos(qJ(4));
t834 = t1014 * t907 + t903 * t862;
t836 = -t1014 * t903 + t907 * t862;
t794 = t836 * t834;
t1012 = qJDD(1) * t905;
t1013 = qJD(1) * qJD(2);
t869 = (t1013 * t909 + t1012) * t901;
t892 = t902 * qJDD(1) + qJDD(2);
t994 = t904 * t869 - t908 * t892;
t815 = -t862 * qJD(3) - t994;
t814 = qJDD(4) - t815;
t1086 = t794 + t814;
t1049 = t903 * t1086;
t860 = -t908 * t893 + t904 * t998;
t856 = qJD(4) + t860;
t1073 = t856 ^ 2;
t1074 = t834 ^ 2;
t803 = t1074 - t1073;
t692 = t907 * t803 - t1049;
t816 = -t860 * qJD(3) + t908 * t869 + t904 * t892;
t1011 = qJDD(1) * t909;
t938 = t1013 * t905 - t1011;
t925 = t938 * t901;
t921 = qJDD(3) + t925;
t996 = t903 * t816 - t907 * t921;
t713 = (qJD(4) - t856) * t836 + t996;
t619 = t904 * t692 + t908 * t713;
t623 = t908 * t692 - t904 * t713;
t1034 = t907 * t1086;
t687 = t903 * t803 + t1034;
t962 = t623 * t905 - t687 * t909;
t546 = -t901 * t619 + t902 * t962;
t577 = t909 * t623 + t905 * t687;
t906 = sin(qJ(1));
t910 = cos(qJ(1));
t1207 = t906 * t546 - t910 * t577;
t1064 = t834 * t856;
t915 = -t907 * t816 - t903 * t921;
t914 = -t834 * qJD(4) - t915;
t1105 = t1064 - t914;
t1051 = t903 * t1105;
t1015 = qJD(4) + t856;
t712 = t1015 * t836 + t996;
t628 = t907 * t712 - t1051;
t833 = t836 ^ 2;
t791 = t833 - t1074;
t599 = t904 * t628 + t908 * t791;
t601 = t908 * t628 - t904 * t791;
t624 = -t1105 * t907 - t903 * t712;
t972 = t601 * t905 + t624 * t909;
t525 = -t901 * t599 + t902 * t972;
t555 = t909 * t601 - t905 * t624;
t1206 = t906 * t525 - t910 * t555;
t1205 = t910 * t546 + t906 * t577;
t1204 = t910 * t525 + t906 * t555;
t1199 = t902 * t619 + t901 * t962;
t1198 = t902 * t599 + t901 * t972;
t1085 = -t1064 - t914;
t1121 = t907 * t1085 - t903 * t713;
t1083 = t833 + t1074;
t1120 = -t903 * t1085 - t907 * t713;
t1142 = -t1083 * t904 + t1120 * t908;
t1157 = t1121 * t905 + t1142 * t909;
t1143 = t1083 * t908 + t1120 * t904;
t1158 = -t1121 * t909 + t1142 * t905;
t1176 = -t1143 * t901 + t1158 * t902;
t1188 = t1157 * t906 + t1176 * t910;
t1197 = pkin(6) * t1188;
t1189 = t1157 * t910 - t1176 * t906;
t1196 = pkin(6) * t1189;
t1195 = pkin(1) * t1176;
t1177 = t1143 * t902 + t1158 * t901;
t1194 = pkin(1) * t1177;
t1087 = -t794 + t814;
t1048 = t903 * t1087;
t804 = -t833 + t1073;
t1123 = -t907 * t804 - t1048;
t1033 = t907 * t1087;
t1122 = -t903 * t804 + t1033;
t1144 = -t1085 * t904 + t1122 * t908;
t1155 = -t1123 * t905 + t1144 * t909;
t1145 = t1085 * t908 + t1122 * t904;
t1156 = t1123 * t909 + t1144 * t905;
t1178 = -t1145 * t901 + t1156 * t902;
t1187 = t1155 * t910 - t1178 * t906;
t1186 = t1155 * t906 + t1178 * t910;
t1185 = (-t1176 * t902 - t1177 * t901) * pkin(7);
t1184 = pkin(7) * t1157;
t1179 = t1145 * t902 + t1156 * t901;
t785 = -t833 - t1073;
t674 = t907 * t785 - t1049;
t1175 = pkin(2) * t674;
t1174 = pkin(3) * t674;
t670 = t903 * t785 + t1034;
t1173 = pkin(9) * t670;
t1172 = pkin(9) * t674;
t1171 = pkin(8) * t1142;
t1170 = pkin(8) * t1143;
t1169 = t674 * t909;
t1167 = t904 * t670;
t1166 = t905 * t674;
t1164 = t908 * t670;
t1159 = -pkin(2) * t1143 - pkin(3) * t1083 - pkin(9) * t1120;
t1154 = pkin(9) * t1121;
t1151 = qJ(5) * t1105;
t1061 = t856 * t907;
t1002 = t834 * t1061;
t1062 = t856 * t903;
t800 = t836 * t1062;
t985 = t800 - t1002;
t1077 = t904 * t814 + t908 * t985;
t1006 = t834 * t1062;
t801 = t836 * t1061;
t984 = t801 + t1006;
t1100 = t1077 * t909 - t905 * t984;
t1081 = -t908 * t814 + t904 * t985;
t1101 = t1077 * t905 + t909 * t984;
t1116 = -t1081 * t901 + t1101 * t902;
t1141 = t1100 * t910 - t1116 * t906;
t1140 = t1100 * t906 + t1116 * t910;
t1005 = t904 * t794;
t749 = -t836 * qJD(4) - t996;
t943 = -t903 * t749 + t1002;
t1079 = t908 * t943 - t1005;
t942 = -t907 * t749 - t1006;
t1098 = t1079 * t909 - t905 * t942;
t1001 = t908 * t794;
t1080 = t904 * t943 + t1001;
t1099 = t1079 * t905 + t909 * t942;
t1118 = -t1080 * t901 + t1099 * t902;
t1139 = t1098 * t910 - t1118 * t906;
t1138 = t1098 * t906 + t1118 * t910;
t1082 = -t1073 - t1074;
t1103 = t1082 * t903 + t1033;
t1137 = pkin(2) * t1103;
t1136 = pkin(3) * t1103;
t1102 = t1082 * t907 - t1048;
t1135 = pkin(9) * t1102;
t1134 = pkin(9) * t1103;
t1127 = t1102 * t904;
t1126 = t1102 * t908;
t1125 = t1103 * t905;
t1124 = t1103 * t909;
t1119 = t1080 * t902 + t1099 * t901;
t1117 = t1081 * t902 + t1101 * t901;
t1115 = 2 * qJD(5);
t846 = t860 * t1014;
t981 = t908 * t846;
t993 = t1014 * t862;
t982 = t904 * t993;
t798 = t981 - t982;
t1104 = t905 * t798 - t909 * t921;
t1054 = t902 * t909;
t710 = -t903 * t914 - t801;
t711 = t907 * t914 - t800;
t986 = t908 * t711 + t1005;
t987 = t904 * t711 - t1001;
t1076 = t902 * t905 * t986 + t710 * t1054 - t901 * t987;
t1078 = -t905 * t710 + t909 * t986;
t1097 = t1076 * t910 + t1078 * t906;
t1096 = -t1076 * t906 + t1078 * t910;
t1010 = t1014 ^ 2;
t898 = t901 ^ 2;
t1095 = t898 * t909;
t1060 = t862 * t860;
t917 = t921 - t1060;
t1094 = t904 * t917;
t1091 = t908 * t917;
t781 = t846 + t816;
t877 = t893 * t891;
t842 = t877 + t869;
t1021 = qJD(1) * t901;
t1072 = t893 ^ 2;
t1068 = pkin(7) * t901;
t888 = t910 * g(1) + t906 * g(2);
t911 = qJD(1) ^ 2;
t865 = -t911 * pkin(1) + qJDD(1) * t1068 - t888;
t1066 = t909 * pkin(2);
t989 = -pkin(8) * t905 - t1066;
t868 = t989 * t1021;
t1057 = t901 * t905;
t887 = t906 * g(1) - t910 * g(2);
t923 = qJDD(1) * pkin(1) + t911 * t1068 + t887;
t920 = t902 * t923;
t916 = -g(3) * t1057 + t905 * t920;
t770 = t892 * pkin(8) - t1072 * pkin(2) + (t1021 * t868 + t865) * t909 + t916;
t1067 = t902 * g(3);
t1017 = qJD(2) + t893;
t992 = qJD(1) * t1017;
t913 = -t869 * pkin(8) - t1067 + (-t893 * pkin(8) * t1019 + (t905 * t992 - t1011) * pkin(2) - t923) * t901;
t695 = t908 * t770 + t904 * t913;
t823 = t860 * pkin(3) - t862 * pkin(9);
t649 = -pkin(3) * t1010 + pkin(9) * t921 - t860 * t823 + t695;
t995 = t905 * t865 - t909 * t920;
t769 = -t892 * pkin(2) - t1072 * pkin(8) + (t909 * g(3) + t1020 * t868) * t901 + t995;
t653 = -t781 * pkin(9) + (-t815 - t993) * pkin(3) + t769;
t580 = t907 * t649 + t903 * t653;
t790 = t834 * pkin(4) - t836 * qJ(5);
t977 = t814 * qJ(5) + t1115 * t856 - t834 * t790 + t580;
t1056 = t901 * t909;
t1075 = t710 * t1056 + t1057 * t986 + t902 * t987;
t858 = t860 ^ 2;
t859 = t862 ^ 2;
t1071 = pkin(2) * t905;
t1070 = pkin(3) * t904;
t1069 = pkin(4) * t907;
t1065 = qJ(5) * t907;
t1063 = t856 * t836;
t1059 = t892 * t901;
t1058 = t898 * t911;
t694 = t904 * t770 - t908 * t913;
t648 = -t921 * pkin(3) - t1010 * pkin(9) + t862 * t823 + t694;
t1053 = t903 * t648;
t1045 = t904 * t769;
t806 = -t921 - t1060;
t1044 = t904 * t806;
t848 = t901 * t923 + t1067;
t1040 = t905 * t848;
t1025 = t909 * t911;
t1003 = t905 * t1025;
t886 = t898 * t1003;
t866 = t886 + t892;
t1039 = t905 * t866;
t867 = -t886 + t892;
t1038 = t905 * t867;
t1037 = t907 * t648;
t1030 = t908 * t769;
t1029 = t908 * t806;
t1028 = t909 * t848;
t1027 = t909 * t866;
t1026 = t909 * t867;
t579 = t903 * t649 - t907 * t653;
t1024 = t1083 - t1073;
t899 = t905 ^ 2;
t900 = t909 ^ 2;
t1023 = t899 + t900;
t1022 = qJD(1) * t893;
t1009 = t909 * t1060;
t1008 = t899 * t1058;
t1007 = t900 * t1058;
t1004 = t905 * t1060;
t1000 = -pkin(3) * t908 - pkin(2);
t999 = t893 * t1021;
t997 = qJ(5) * t903 + pkin(3);
t615 = t904 * t694 + t908 * t695;
t851 = -t906 * t887 - t910 * t888;
t990 = t836 * t790 + qJDD(5) + t579;
t885 = t910 * qJDD(1) - t906 * t911;
t988 = -pkin(6) * t885 - t906 * g(3);
t983 = t904 * t846;
t980 = t908 * t993;
t855 = -t1008 - t1072;
t822 = -t905 * t855 - t1026;
t979 = pkin(7) * t822 - t1040;
t873 = -t1007 - t1072;
t829 = t909 * t873 - t1039;
t978 = pkin(7) * t829 + t1028;
t559 = -pkin(4) * t1073 + t977;
t939 = -t814 * pkin(4) + t990;
t560 = qJ(5) * t1073 - t939;
t511 = t907 * t559 - t903 * t560;
t919 = -t749 * pkin(4) + t1151 + t648;
t566 = (pkin(4) * t856 - (2 * qJD(5))) * t836 + t919;
t487 = t908 * t511 + t904 * t566;
t510 = t903 * t559 + t907 * t560;
t976 = t487 * t905 - t510 * t909;
t532 = t903 * t579 + t907 * t580;
t514 = t908 * t532 + t904 * t648;
t531 = -t907 * t579 + t903 * t580;
t975 = t514 * t905 - t531 * t909;
t607 = t1105 * t904 + t1164;
t970 = t607 * t905 + t1169;
t608 = t904 * t712 + t1126;
t969 = t608 * t905 - t1124;
t720 = t1015 * t834 + t915;
t612 = -t904 * t720 - t1164;
t968 = t612 * t905 - t1169;
t714 = -t749 + t1063;
t613 = t904 * t714 + t1126;
t967 = t613 * t905 - t1124;
t966 = t615 * t905 - t769 * t909;
t614 = -t908 * t694 + t904 * t695;
t779 = (-0.2e1 * qJD(3) + t891) * t862 - t994;
t723 = t908 * t779 - t904 * t781;
t825 = -t859 + t858;
t957 = t723 * t905 + t825 * t909;
t778 = t891 * t862 + t994;
t783 = -t816 + t846;
t724 = -t778 * t908 - t904 * t783;
t799 = t858 + t859;
t956 = t724 * t905 + t799 * t909;
t819 = -t1010 - t858;
t747 = t908 * t819 - t1094;
t955 = t747 * t905 + t779 * t909;
t826 = -t859 - t1010;
t756 = -t904 * t826 + t1029;
t954 = t756 * t905 - t781 * t909;
t840 = -t859 + t1010;
t759 = -t904 * t840 + t1091;
t953 = t759 * t905 + t783 * t909;
t839 = t858 - t1010;
t760 = t908 * t839 + t1044;
t952 = t760 * t905 + t778 * t909;
t820 = g(3) * t1056 + t995;
t821 = t909 * t865 + t916;
t951 = -t909 * t820 + t905 * t821;
t754 = t905 * t820 + t909 * t821;
t876 = t893 * t998;
t845 = -t876 - t925;
t950 = t842 * t909 + t845 * t905;
t843 = -t877 + t869;
t844 = t876 - t925;
t949 = -t843 * t909 + t844 * t905;
t948 = t855 * t909 - t1038;
t871 = -t1008 + t1072;
t947 = t871 * t909 + t1039;
t946 = t873 * t905 + t1027;
t872 = t1007 - t1072;
t945 = t872 * t905 + t1026;
t850 = t910 * t887 - t906 * t888;
t944 = -t902 * t911 + t1022;
t773 = -t904 * t815 - t981;
t941 = t773 * t905 + t1009;
t775 = t908 * t816 + t982;
t940 = t775 * t905 - t1009;
t475 = -pkin(3) * t510 - pkin(4) * t560 - qJ(5) * t559;
t477 = -pkin(9) * t510 + (pkin(4) * t903 - t1065) * t566;
t486 = t904 * t511 - t908 * t566;
t453 = -pkin(8) * t486 - t904 * t475 + t908 * t477;
t463 = -pkin(2) * t486 - pkin(9) * t511 + (t997 + t1069) * t566;
t469 = t909 * t487 + t905 * t510;
t937 = pkin(7) * t469 + t453 * t905 + t463 * t909;
t513 = t904 * t532 - t908 * t648;
t471 = -pkin(8) * t513 + (-pkin(9) * t908 + t1070) * t531;
t479 = -pkin(2) * t513 + pkin(3) * t648 - pkin(9) * t532;
t484 = t909 * t514 + t905 * t531;
t936 = pkin(7) * t484 + t471 * t905 + t479 * t909;
t547 = t1024 * pkin(4) + t977;
t550 = t1024 * qJ(5) + t939;
t492 = -t903 * t547 + t907 * t550 - t1154;
t565 = -pkin(3) * t1121 - pkin(4) * t1085 + qJ(5) * t713;
t472 = t908 * t492 - t904 * t565 - t1170;
t480 = -t907 * t547 - t903 * t550 + t1159;
t935 = t472 * t905 + t480 * t909 + t1184;
t918 = t1115 * t836 - t919;
t551 = -pkin(4) * t1063 - t1151 + t918;
t523 = pkin(4) * t1051 + t907 * t551 + t1172;
t527 = t1174 - qJ(5) * t1086 + (t785 + t1073) * pkin(4) - t977;
t605 = -t1105 * t908 + t1167;
t476 = -pkin(8) * t605 + t908 * t523 - t904 * t527;
t497 = -pkin(2) * t605 - t1173 - t903 * t551 - (-pkin(3) - t1069) * t1105;
t569 = t909 * t607 - t1166;
t934 = pkin(7) * t569 + t476 * t905 + t497 * t909;
t552 = (-t714 - t1063) * pkin(4) + t918;
t524 = -t714 * t1065 - t903 * t552 - t1134;
t529 = -t1136 + (-t1082 - t1073) * qJ(5) + (-t1087 - t814) * pkin(4) + t990;
t611 = -t908 * t714 + t1127;
t478 = -pkin(8) * t611 + t908 * t524 - t904 * t529;
t498 = -pkin(2) * t611 - t907 * t552 + t714 * t997 - t1135;
t573 = t909 * t613 + t1125;
t933 = pkin(7) * t573 + t478 * t905 + t498 * t909;
t512 = -t531 - t1154;
t485 = t1070 * t1121 + t908 * t512 - t1170;
t493 = t1159 - t532;
t932 = t485 * t905 + t493 * t909 + t1184;
t557 = t579 - t1136;
t583 = t1053 - t1134;
t606 = -t908 * t712 + t1127;
t503 = -pkin(8) * t606 - t904 * t557 + t908 * t583;
t533 = -pkin(2) * t606 + pkin(3) * t712 + t1037 - t1135;
t570 = t909 * t608 + t1125;
t931 = pkin(7) * t570 + t503 * t905 + t533 * t909;
t558 = t580 - t1174;
t588 = t1037 - t1172;
t610 = t908 * t720 - t1167;
t504 = -pkin(8) * t610 - t904 * t558 + t908 * t588;
t534 = -pkin(2) * t610 - pkin(3) * t720 - t1053 + t1173;
t572 = t909 * t612 + t1166;
t930 = pkin(7) * t572 + t504 * t905 + t534 * t909;
t746 = t904 * t819 + t1091;
t638 = -pkin(2) * t746 + t694;
t678 = -pkin(8) * t746 + t1045;
t681 = t909 * t747 - t905 * t779;
t929 = pkin(7) * t681 + t638 * t909 + t678 * t905;
t755 = t908 * t826 + t1044;
t641 = -pkin(2) * t755 + t695;
t682 = -pkin(8) * t755 + t1030;
t683 = t909 * t756 + t781 * t905;
t928 = pkin(7) * t683 + t641 * t909 + t682 * t905;
t795 = t905 * t843 + t909 * t844;
t927 = pkin(7) * t795 + t754;
t722 = -t778 * t904 + t908 * t783;
t578 = -pkin(8) * t722 - t614;
t665 = t909 * t724 - t905 * t799;
t926 = pkin(7) * t665 - t722 * t1066 + t578 * t905;
t589 = t909 * t615 + t905 * t769;
t924 = pkin(7) * t589 + t614 * t989;
t897 = t901 * t898;
t884 = t906 * qJDD(1) + t910 * t911;
t875 = t1023 * t1058;
t874 = (t899 - t900) * t1058;
t870 = -pkin(6) * t884 + t910 * g(3);
t847 = t1023 * t999;
t841 = (t909 * t992 + t1012) * t901;
t838 = t909 * t869 - t899 * t999;
t837 = (-t1022 * t900 + t905 * t938) * t901;
t828 = t909 * t872 - t1038;
t827 = -t905 * t871 + t1027;
t818 = (t897 * t1025 + t842 * t902) * t905;
t817 = -t897 * t1003 + (-t1017 * t1020 + t1011) * t901 * t1054;
t797 = t983 + t980;
t796 = -t905 * t842 + t909 * t845;
t789 = t901 * t845 + t902 * t946;
t788 = -t901 * t844 + t902 * t945;
t787 = -t901 * t843 + t902 * t947;
t786 = -t902 * t845 + t901 * t946;
t777 = -t901 * t841 + t902 * t948;
t776 = t902 * t841 + t901 * t948;
t774 = t904 * t816 - t980;
t772 = t908 * t815 - t983;
t771 = t909 * t798 + t905 * t921;
t768 = -t901 * t874 + t902 * t950;
t767 = t901 * t875 + t902 * t949;
t766 = -t902 * t875 + t901 * t949;
t758 = t904 * t839 - t1029;
t757 = t908 * t840 + t1094;
t740 = -t906 * t789 + t910 * t829;
t739 = t910 * t789 + t906 * t829;
t733 = t909 * t775 + t1004;
t732 = t909 * t773 - t1004;
t731 = -t906 * t777 + t910 * t822;
t730 = t910 * t777 + t906 * t822;
t729 = t901 * t848 + t902 * t951;
t728 = -t902 * t848 + t901 * t951;
t727 = t1104 * t902 - t901 * t797;
t726 = -t906 * t767 + t910 * t795;
t725 = t910 * t767 + t906 * t795;
t721 = t904 * t779 + t908 * t781;
t697 = t909 * t760 - t905 * t778;
t696 = t909 * t759 - t905 * t783;
t684 = -t1040 + (-t786 * t901 - t789 * t902) * pkin(7);
t680 = -t1028 + (-t776 * t901 - t777 * t902) * pkin(7);
t679 = -pkin(1) * t786 + t901 * t820 + t902 * t978;
t673 = t909 * t723 - t905 * t825;
t672 = -pkin(1) * t776 + t901 * t821 + t902 * t979;
t667 = -t901 * t774 + t902 * t940;
t666 = -t901 * t772 + t902 * t941;
t664 = t902 * pkin(7) * t754 - pkin(1) * t728;
t663 = -t906 * t729 + t910 * t754;
t662 = t910 * t729 + t906 * t754;
t650 = -pkin(1) * t766 + t902 * t927;
t647 = -pkin(2) * t781 + pkin(8) * t756 + t1045;
t644 = -t901 * t758 + t902 * t952;
t643 = -t901 * t757 + t902 * t953;
t642 = (-t728 * t901 - t729 * t902) * pkin(7);
t640 = pkin(2) * t779 + pkin(8) * t747 - t1030;
t639 = (-t766 * t901 - t767 * t902) * pkin(7) - t951;
t637 = -t901 * t755 + t902 * t954;
t636 = t902 * t755 + t901 * t954;
t633 = -t901 * t746 + t902 * t955;
t632 = t902 * t746 + t901 * t955;
t609 = -t901 * t721 + t902 * t957;
t604 = -t901 * t722 + t902 * t956;
t603 = t902 * t722 + t901 * t956;
t590 = -pkin(2) * t769 + pkin(8) * t615;
t585 = -t906 * t637 + t910 * t683;
t584 = t910 * t637 + t906 * t683;
t582 = -t906 * t633 + t910 * t681;
t581 = t910 * t633 + t906 * t681;
t571 = pkin(2) * t799 + pkin(8) * t724 + t615;
t568 = -t906 * t604 + t910 * t665;
t567 = t910 * t604 + t906 * t665;
t549 = -t901 * t614 + t902 * t966;
t548 = t902 * t614 + t901 * t966;
t542 = -t901 * t611 + t902 * t967;
t541 = -t901 * t610 + t902 * t968;
t540 = t902 * t611 + t901 * t967;
t539 = t902 * t610 + t901 * t968;
t538 = -t901 * t606 + t902 * t969;
t537 = -t901 * t605 + t902 * t970;
t536 = t902 * t606 + t901 * t969;
t535 = t902 * t605 + t901 * t970;
t530 = -t905 * t641 + t909 * t682 + (-t636 * t901 - t637 * t902) * pkin(7);
t528 = -t905 * t638 + t909 * t678 + (-t632 * t901 - t633 * t902) * pkin(7);
t522 = -pkin(1) * t636 - t901 * t647 + t902 * t928;
t517 = -t906 * t549 + t910 * t589;
t516 = t910 * t549 + t906 * t589;
t515 = -pkin(1) * t632 - t901 * t640 + t902 * t929;
t509 = t722 * t1071 + t909 * t578 + (-t603 * t901 - t604 * t902) * pkin(7);
t508 = -t906 * t542 + t910 * t573;
t507 = -t906 * t541 + t910 * t572;
t506 = t910 * t542 + t906 * t573;
t505 = t910 * t541 + t906 * t572;
t502 = -t906 * t538 + t910 * t570;
t501 = -t906 * t537 + t910 * t569;
t500 = t910 * t538 + t906 * t570;
t499 = t910 * t537 + t906 * t569;
t496 = pkin(8) * t612 + t908 * t558 + t904 * t588 - t1175;
t495 = pkin(8) * t608 + t908 * t557 + t904 * t583 - t1137;
t494 = -pkin(1) * t603 - t901 * t571 + t902 * t926;
t483 = (-pkin(8) * t909 + t1071) * t614 + (-t548 * t901 - t549 * t902) * pkin(7);
t482 = -pkin(1) * t548 - t901 * t590 + t902 * t924;
t481 = t1000 * t1121 + t904 * t512 + t1171;
t474 = pkin(8) * t613 + t904 * t524 + t908 * t529 - t1137;
t473 = pkin(8) * t607 + t904 * t523 + t908 * t527 + t1175;
t470 = -pkin(2) * t1121 + t904 * t492 + t908 * t565 + t1171;
t468 = -t901 * t513 + t902 * t975;
t467 = t902 * t513 + t901 * t975;
t466 = pkin(8) * t514 + (-pkin(9) * t904 + t1000) * t531;
t465 = t909 * t504 - t905 * t534 + (-t539 * t901 - t541 * t902) * pkin(7);
t464 = t909 * t503 - t905 * t533 + (-t536 * t901 - t538 * t902) * pkin(7);
t462 = -t901 * t486 + t902 * t976;
t461 = t902 * t486 + t901 * t976;
t460 = -pkin(1) * t539 - t901 * t496 + t902 * t930;
t459 = -t906 * t468 + t910 * t484;
t458 = t910 * t468 + t906 * t484;
t457 = -pkin(1) * t536 - t901 * t495 + t902 * t931;
t456 = t909 * t478 - t905 * t498 + (-t540 * t901 - t542 * t902) * pkin(7);
t455 = t909 * t476 - t905 * t497 + (-t535 * t901 - t537 * t902) * pkin(7);
t454 = t909 * t485 - t905 * t493 + t1185;
t452 = t909 * t472 - t905 * t480 + t1185;
t451 = -t901 * t481 + t902 * t932 - t1194;
t450 = -pkin(1) * t540 - t901 * t474 + t902 * t933;
t449 = -pkin(1) * t535 - t901 * t473 + t902 * t934;
t448 = -pkin(2) * t510 + pkin(8) * t487 + t908 * t475 + t904 * t477;
t447 = -t906 * t462 + t910 * t469;
t446 = t910 * t462 + t906 * t469;
t445 = -t901 * t470 + t902 * t935 - t1194;
t444 = t909 * t471 - t905 * t479 + (-t467 * t901 - t468 * t902) * pkin(7);
t443 = -pkin(1) * t467 - t901 * t466 + t902 * t936;
t442 = t909 * t453 - t905 * t463 + (-t461 * t901 - t462 * t902) * pkin(7);
t441 = -pkin(1) * t461 - t901 * t448 + t902 * t937;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t884, -t885, 0, t851, 0, 0, 0, 0, 0, 0, t740, t731, t726, t663, 0, 0, 0, 0, 0, 0, t582, t585, t568, t517, 0, 0, 0, 0, 0, 0, t502, t507, t1189, t459, 0, 0, 0, 0, 0, 0, t508, t1189, t501, t447; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t885, -t884, 0, t850, 0, 0, 0, 0, 0, 0, t739, t730, t725, t662, 0, 0, 0, 0, 0, 0, t581, t584, t567, t516, 0, 0, 0, 0, 0, 0, t500, t505, t1188, t458, 0, 0, 0, 0, 0, 0, t506, t1188, t499, t446; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t786, t776, t766, t728, 0, 0, 0, 0, 0, 0, t632, t636, t603, t548, 0, 0, 0, 0, 0, 0, t536, t539, t1177, t467, 0, 0, 0, 0, 0, 0, t540, t1177, t535, t461; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t885, 0, -t884, 0, t988, -t870, -t850, -pkin(6) * t850, -t906 * t818 + t910 * t838, -t906 * t768 + t910 * t796, -t906 * t787 + t910 * t827, -t906 * t817 + t910 * t837, -t906 * t788 + t910 * t828, t1059 * t906 + t910 * t847, -pkin(6) * t739 - t906 * t679 + t910 * t684, -pkin(6) * t730 - t906 * t672 + t910 * t680, -pkin(6) * t725 + t910 * t639 - t906 * t650, -pkin(6) * t662 + t910 * t642 - t906 * t664, -t906 * t667 + t910 * t733, -t906 * t609 + t910 * t673, -t906 * t643 + t910 * t696, -t906 * t666 + t910 * t732, -t906 * t644 + t910 * t697, -t906 * t727 + t910 * t771, -pkin(6) * t581 - t906 * t515 + t910 * t528, -pkin(6) * t584 - t906 * t522 + t910 * t530, -pkin(6) * t567 - t906 * t494 + t910 * t509, -pkin(6) * t516 - t906 * t482 + t910 * t483, t1096, t1206, t1187, t1139, -t1207, t1141, -pkin(6) * t500 - t906 * t457 + t910 * t464, -pkin(6) * t505 - t906 * t460 + t910 * t465, -t906 * t451 + t910 * t454 - t1197, -pkin(6) * t458 - t906 * t443 + t910 * t444, t1096, t1187, -t1206, t1141, t1207, t1139, -pkin(6) * t506 - t906 * t450 + t910 * t456, -t906 * t445 + t910 * t452 - t1197, -pkin(6) * t499 - t906 * t449 + t910 * t455, -pkin(6) * t446 - t906 * t441 + t910 * t442; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t884, 0, t885, 0, t870, t988, t851, pkin(6) * t851, t910 * t818 + t906 * t838, t910 * t768 + t906 * t796, t910 * t787 + t906 * t827, t910 * t817 + t906 * t837, t910 * t788 + t906 * t828, -t1059 * t910 + t906 * t847, pkin(6) * t740 + t910 * t679 + t906 * t684, pkin(6) * t731 + t910 * t672 + t906 * t680, pkin(6) * t726 + t906 * t639 + t910 * t650, pkin(6) * t663 + t906 * t642 + t910 * t664, t910 * t667 + t906 * t733, t910 * t609 + t906 * t673, t910 * t643 + t906 * t696, t910 * t666 + t906 * t732, t910 * t644 + t906 * t697, t910 * t727 + t906 * t771, pkin(6) * t582 + t910 * t515 + t906 * t528, pkin(6) * t585 + t910 * t522 + t906 * t530, pkin(6) * t568 + t910 * t494 + t906 * t509, pkin(6) * t517 + t910 * t482 + t906 * t483, t1097, -t1204, t1186, t1138, t1205, t1140, pkin(6) * t502 + t910 * t457 + t906 * t464, pkin(6) * t507 + t910 * t460 + t906 * t465, t910 * t451 + t906 * t454 + t1196, pkin(6) * t459 + t910 * t443 + t906 * t444, t1097, t1186, t1204, t1140, -t1205, t1138, pkin(6) * t508 + t910 * t450 + t906 * t456, t910 * t445 + t906 * t452 + t1196, pkin(6) * t501 + t910 * t449 + t906 * t455, pkin(6) * t447 + t910 * t441 + t906 * t442; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t887, t888, 0, 0, (t944 * t1095 + t869 * t901) * t905, t902 * t874 + t901 * t950, t902 * t843 + t901 * t947, (-t905 * t944 - t938) * t1095, t902 * t844 + t901 * t945, t902 * t892, pkin(1) * t789 - t902 * t820 + t901 * t978, pkin(1) * t777 - t902 * t821 + t901 * t979, pkin(1) * t767 + t901 * t927, pkin(1) * t729 + t1068 * t754, t902 * t774 + t901 * t940, t902 * t721 + t901 * t957, t902 * t757 + t901 * t953, t902 * t772 + t901 * t941, t902 * t758 + t901 * t952, t1104 * t901 + t902 * t797, pkin(1) * t633 + t902 * t640 + t901 * t929, pkin(1) * t637 + t902 * t647 + t901 * t928, pkin(1) * t604 + t902 * t571 + t901 * t926, pkin(1) * t549 + t902 * t590 + t901 * t924, t1075, -t1198, t1179, t1119, t1199, t1117, pkin(1) * t538 + t902 * t495 + t901 * t931, pkin(1) * t541 + t902 * t496 + t901 * t930, t902 * t481 + t901 * t932 + t1195, pkin(1) * t468 + t902 * t466 + t901 * t936, t1075, t1179, t1198, t1117, -t1199, t1119, pkin(1) * t542 + t902 * t474 + t901 * t933, t902 * t470 + t901 * t935 + t1195, pkin(1) * t537 + t902 * t473 + t901 * t934, pkin(1) * t462 + t902 * t448 + t901 * t937;];
tauB_reg = t1;
