% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S5RRRRP11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d4]';
% 
% Output:
% tau_reg [5x(5*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:20
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S5RRRRP11_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP11_invdynJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP11_invdynJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP11_invdynJ_fixb_reg2_slag_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP11_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRP11_invdynJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:18:38
% EndTime: 2019-12-31 22:19:00
% DurationCPUTime: 10.74s
% Computational Cost: add. (10645->695), mult. (26891->904), div. (0->0), fcn. (20933->10), ass. (0->305)
t253 = cos(qJ(3));
t431 = pkin(8) * t253;
t248 = sin(pkin(5));
t250 = sin(qJ(3));
t251 = sin(qJ(2));
t413 = cos(pkin(5));
t353 = t413 * qJD(1);
t304 = t353 + qJD(2);
t285 = qJD(3) * t304;
t348 = t413 * qJDD(1);
t299 = t348 + qJDD(2);
t254 = cos(qJ(2));
t382 = t250 * qJD(2);
t362 = t254 * t382;
t378 = t251 * qJDD(1);
t387 = qJD(3) * t253;
t76 = t248 * (qJD(1) * (t251 * t387 + t362) + t250 * t378) + t250 * t285 - t253 * t299;
t71 = qJDD(4) + t76;
t389 = qJD(3) * t250;
t461 = pkin(8) * t389;
t369 = pkin(1) * t413;
t241 = t251 * t369;
t326 = pkin(3) * t250 - pkin(9) * t253;
t400 = t248 * t254;
t460 = -qJD(4) * t431 - (t241 + (pkin(7) + t326) * t400) * qJD(1) + t326 * qJD(3);
t391 = qJD(1) * t248;
t233 = t254 * t391;
t316 = t233 - qJD(3);
t381 = qJD(1) * qJD(2);
t357 = t254 * t381;
t291 = t357 + t378;
t262 = t248 * t291 + t285;
t365 = t251 * t391;
t340 = t250 * t365;
t275 = qJD(3) * t340 - t250 * t299;
t448 = t262 * t253 - t275;
t459 = -qJD(4) * t316 + t448;
t339 = t250 * t233;
t458 = t339 - t389;
t401 = t248 * t251;
t199 = -pkin(7) * t401 + t254 * t369;
t184 = qJD(2) * t199;
t153 = -t253 * t304 + t340;
t147 = qJD(4) + t153;
t435 = cos(qJ(1));
t330 = t413 * t435;
t434 = sin(qJ(1));
t195 = t251 * t330 + t434 * t254;
t368 = t248 * t435;
t130 = t195 * t253 - t250 * t368;
t194 = t434 * t251 - t254 * t330;
t249 = sin(qJ(4));
t252 = cos(qJ(4));
t85 = t130 * t249 - t194 * t252;
t86 = t130 * t252 + t194 * t249;
t155 = t250 * t304 + t253 * t365;
t113 = t155 * t249 + t252 * t316;
t115 = t252 * t155 - t249 * t316;
t338 = t253 * t233;
t144 = t249 * t338 - t252 * t365;
t397 = t252 * t254;
t157 = (t249 * t251 + t253 * t397) * t248;
t145 = qJD(1) * t157;
t358 = t251 * t381;
t335 = t248 * t358;
t380 = qJDD(1) * t254;
t232 = t248 * t380;
t377 = qJDD(3) - t232;
t284 = t335 + t377;
t152 = t252 * t284;
t39 = qJD(4) * t115 + t448 * t249 - t152;
t419 = t252 * t39;
t386 = qJD(4) * t249;
t38 = t155 * t386 - t249 * t284 - t252 * t459;
t421 = t249 * t38;
t457 = t250 * ((t113 * t249 - t115 * t252) * qJD(4) - t419 + t421) - (t113 * t252 + t115 * t249) * t387 + t113 * t145 + t115 * t144;
t322 = t249 * t387 - t144;
t385 = qJD(4) * t252;
t420 = t249 * t71;
t456 = -t322 * t147 + t250 * (t113 * t316 - t147 * t385 - t420) + t253 * t39;
t350 = t115 * t147;
t411 = t113 * t147;
t455 = (t39 + t350) * t249 + (t38 + t411) * t252;
t245 = t248 ^ 2;
t454 = 0.2e1 * t245;
t433 = pkin(3) * t253;
t214 = -pkin(9) * t250 - pkin(2) - t433;
t388 = qJD(3) * t252;
t337 = pkin(1) * t353;
t180 = -pkin(7) * t365 + t254 * t337;
t327 = pkin(2) * t251 - pkin(8) * t254;
t181 = t327 * t391;
t107 = t253 * t180 + t250 * t181;
t84 = pkin(9) * t365 + t107;
t425 = -t250 * t388 * pkin(8) + t214 * t385 + t460 * t249 - t252 * t84;
t451 = t155 * t316;
t450 = t107 + t461;
t192 = t250 * t401 - t413 * t253;
t363 = qJD(2) * t400;
t126 = -qJD(3) * t192 + t253 * t363;
t449 = -qJD(4) * t400 + t126;
t447 = (qJDD(2) + 0.2e1 * t348) * t248;
t446 = t338 - t387;
t394 = pkin(7) * t400 + t241;
t172 = t413 * pkin(8) + t394;
t318 = pkin(4) * t252 + qJ(5) * t249;
t185 = t394 * qJD(2);
t138 = qJD(2) * pkin(8) + qJD(1) * t172;
t302 = -pkin(2) * t254 - pkin(8) * t251 - pkin(1);
t146 = t302 * t391;
t74 = -t250 * t138 + t253 * t146;
t66 = pkin(3) * t316 - t74;
t29 = t113 * pkin(4) - t115 * qJ(5) + t66;
t436 = pkin(9) * t71;
t445 = t147 * t29 - t436;
t171 = -t413 * pkin(2) - t199;
t186 = t192 * pkin(3);
t193 = t413 * t250 + t253 * t401;
t79 = -t193 * pkin(9) + t171 + t186;
t395 = pkin(2) * t400 + pkin(8) * t401;
t173 = -pkin(1) * t248 - t395;
t103 = t253 * t172 + t250 * t173;
t81 = -pkin(9) * t400 + t103;
t428 = t249 * t79 + t252 * t81;
t390 = qJD(2) * t251;
t364 = t248 * t390;
t296 = t327 * qJD(2);
t182 = t248 * t296;
t55 = -t172 * t389 + t173 * t387 + t250 * t182 + t253 * t184;
t51 = pkin(9) * t364 + t55;
t125 = qJD(3) * t193 + t248 * t362;
t59 = t125 * pkin(3) - t126 * pkin(9) + t185;
t11 = -qJD(4) * t428 - t249 * t51 + t252 * t59;
t415 = -t214 * t386 + (t84 + t461) * t249 + t460 * t252;
t439 = t115 ^ 2;
t438 = t147 ^ 2;
t255 = qJD(1) ^ 2;
t437 = pkin(4) * t71;
t430 = pkin(9) * t115;
t101 = pkin(3) * t155 + pkin(9) * t153;
t45 = t249 * t101 + t252 * t74;
t429 = -qJ(5) * t458 - qJD(5) * t253 + t425;
t427 = pkin(4) * t458 - t415;
t317 = pkin(4) * t249 - qJ(5) * t252;
t298 = pkin(8) + t317;
t106 = -t250 * t180 + t181 * t253;
t83 = -pkin(3) * t365 - t106;
t426 = -pkin(4) * t144 + qJ(5) * t145 - t83 + (qJD(4) * t318 - qJD(5) * t252) * t250 + t298 * t387;
t424 = qJ(5) * t71;
t137 = -pkin(2) * t304 - t180;
t65 = t153 * pkin(3) - t155 * pkin(9) + t137;
t75 = t253 * t138 + t250 * t146;
t67 = -pkin(9) * t316 + t75;
t31 = t249 * t65 + t252 * t67;
t23 = qJ(5) * t147 + t31;
t423 = t147 * t23;
t422 = t147 * t31;
t418 = t252 * t71;
t416 = t253 * t76;
t414 = -qJD(5) * t249 + t147 * t317 - t75;
t410 = t115 * t113;
t409 = t147 * t155;
t408 = t155 * t153;
t406 = t194 * t250;
t329 = t413 * t434;
t196 = t435 * t251 + t254 * t329;
t404 = t196 * t250;
t403 = t214 * t252;
t402 = t245 * t255;
t399 = t249 * t253;
t398 = t252 * t253;
t30 = -t249 * t67 + t252 * t65;
t396 = qJD(5) - t30;
t165 = pkin(8) * t398 + t249 * t214;
t367 = t248 * t434;
t393 = t435 * pkin(1) + pkin(7) * t367;
t246 = t251 ^ 2;
t247 = t254 ^ 2;
t392 = t246 - t247;
t383 = t155 * qJD(3);
t237 = pkin(3) * t400;
t375 = t254 * t402;
t374 = t250 * t400;
t373 = t249 * t400;
t187 = t194 * pkin(2);
t372 = -pkin(9) * t406 - t194 * t433 - t187;
t189 = t196 * pkin(2);
t371 = -pkin(9) * t404 - t196 * t433 - t189;
t300 = qJD(2) * t337;
t332 = pkin(1) * t348;
t370 = pkin(7) * t232 + t251 * t332 + t254 * t300;
t360 = t113 ^ 2 - t439;
t359 = pkin(1) * t454;
t356 = t248 * t378;
t104 = (qJD(1) * t296 + qJDD(1) * t302) * t248;
t117 = -pkin(7) * t335 + t370;
t97 = pkin(8) * t299 + t117;
t292 = -t250 * t104 + t138 * t389 - t146 * t387 - t253 * t97;
t20 = pkin(9) * t284 - t292;
t343 = t251 * t300 - t254 * t332 + (t248 * t357 + t356) * pkin(7);
t98 = -pkin(2) * t299 + t343;
t26 = t76 * pkin(3) - pkin(9) * t448 + t98;
t354 = t249 * t20 - t252 * t26 + t67 * t385 + t65 * t386;
t102 = -t250 * t172 + t173 * t253;
t352 = -t195 * t250 - t253 * t368;
t351 = t254 * t316;
t349 = t147 * t249;
t347 = -t253 * t104 + t138 * t387 + t146 * t389 + t250 * t97;
t346 = qJD(3) * t316;
t344 = t251 * t375;
t342 = pkin(9) * t374 + t253 * t237 + t395;
t336 = t251 * t357;
t197 = -t251 * t329 + t435 * t254;
t134 = t197 * t253 + t250 * t367;
t89 = t134 * t249 - t196 * t252;
t334 = g(1) * t85 - g(2) * t89;
t90 = t134 * t252 + t196 * t249;
t333 = g(1) * t86 - g(2) * t90;
t331 = -t434 * pkin(1) + pkin(7) * t368;
t328 = t248 * t255 * t413;
t133 = t197 * t250 - t253 * t367;
t325 = g(1) * t352 + g(2) * t133;
t324 = -g(1) * t194 + g(2) * t196;
t323 = g(1) * t197 + g(2) * t195;
t80 = -t102 + t237;
t321 = t252 * t387 - t145;
t320 = (qJD(4) * t113 - t38) * pkin(9);
t127 = t193 * t249 + t248 * t397;
t128 = t193 * t252 - t373;
t319 = -pkin(4) * t127 + qJ(5) * t128;
t62 = t193 * t385 + t449 * t249 - t252 * t364;
t315 = t113 * t62 + t127 * t39;
t22 = -pkin(4) * t147 + t396;
t314 = t22 * t252 - t23 * t249;
t313 = -t249 * t31 - t252 * t30;
t41 = -t249 * t81 + t252 * t79;
t44 = t101 * t252 - t249 * t74;
t309 = -t113 * t155 - t418;
t303 = 0.2e1 * t353 + qJD(2);
t301 = t197 * pkin(2) + pkin(8) * t196 + t393;
t56 = -t172 * t387 - t173 * t389 + t182 * t253 - t250 * t184;
t3 = t252 * t20 + t249 * t26 + t65 * t385 - t386 * t67;
t10 = t249 * t59 + t252 * t51 + t79 * t385 - t386 * t81;
t295 = t147 * t66 - t436;
t293 = t316 * t250;
t290 = g(1) * t435 + g(2) * t434;
t108 = -t194 * t399 - t195 * t252;
t110 = -t196 * t399 - t197 * t252;
t156 = -t252 * t401 + t253 * t373;
t289 = g(1) * t110 + g(2) * t108 + g(3) * t156;
t109 = -t194 * t398 + t195 * t249;
t111 = -t196 * t398 + t197 * t249;
t288 = -g(1) * t111 - g(2) * t109 - g(3) * t157;
t287 = g(1) * t133 - g(2) * t352 + g(3) * t192;
t286 = -g(1) * t134 - g(2) * t130 - g(3) * t193;
t281 = t113 * t349 - t419;
t280 = -t195 * pkin(2) - t194 * pkin(8) + t331;
t279 = -pkin(9) * t419 + t286;
t278 = g(1) * t196 + g(2) * t194 - g(3) * t400;
t276 = t134 * pkin(3) + pkin(9) * t133 + t301;
t274 = t250 * t347 - t253 * t292 - t323;
t63 = -t193 * t386 + t249 * t364 + t449 * t252;
t272 = t113 * t63 + t115 * t62 - t127 * t38 + t128 * t39;
t271 = t113 * t125 + t127 * t71 + t147 * t62 + t192 * t39;
t52 = -pkin(3) * t364 - t56;
t270 = g(1) * t89 + g(2) * t85 + g(3) * t127 - t354;
t269 = pkin(9) * qJD(4) * t147 - t287;
t268 = -pkin(3) * t130 + pkin(9) * t352 + t280;
t21 = -pkin(3) * t284 + t347;
t5 = t39 * pkin(4) + t38 * qJ(5) - t115 * qJD(5) + t21;
t267 = -t269 - t5;
t266 = t21 + t269;
t265 = -g(1) * t90 - g(2) * t86 - g(3) * t128 + t3;
t264 = t115 * t29 + qJDD(5) - t270;
t263 = t249 * t250 * t39 + (t250 * t385 + t322) * t113;
t256 = t155 * t385 + t249 * t459 - t152 - t350;
t209 = -pkin(3) - t318;
t183 = t394 * qJD(1);
t174 = t298 * t250;
t164 = -pkin(8) * t399 + t403;
t140 = -t403 + (pkin(8) * t249 + pkin(4)) * t253;
t139 = -qJ(5) * t253 + t165;
t122 = t133 * pkin(3);
t120 = t352 * pkin(3);
t58 = pkin(4) * t115 + qJ(5) * t113;
t43 = -t319 + t80;
t40 = -t147 * t293 - t253 * t71;
t36 = t125 * t147 + t192 * t71;
t35 = -pkin(4) * t192 - t41;
t34 = qJ(5) * t192 + t428;
t33 = -pkin(4) * t155 - t44;
t32 = qJ(5) * t155 + t45;
t17 = -t38 + t411;
t16 = -t115 * t155 + t438 * t252 + t420;
t15 = t252 * t350 - t421;
t14 = t115 * t63 - t128 * t38;
t13 = pkin(4) * t62 - qJ(5) * t63 - qJD(5) * t128 + t52;
t12 = -t250 * t252 * t38 + (-t250 * t386 + t321) * t115;
t9 = -pkin(4) * t125 - t11;
t8 = qJ(5) * t125 + qJD(5) * t192 + t10;
t7 = t253 * t38 + t321 * t147 + (-t115 * t316 - t147 * t386 + t418) * t250;
t6 = t115 * t125 + t128 * t71 + t147 * t63 - t192 * t38;
t2 = qJDD(5) + t354 - t437;
t1 = qJD(5) * t147 + t3 + t424;
t4 = [0, 0, 0, 0, 0, qJDD(1), g(1) * t434 - g(2) * t435, t290, 0, 0, (qJDD(1) * t246 + 0.2e1 * t336) * t245, (t254 * t378 - t381 * t392) * t454, t251 * t447 + t303 * t363, (qJDD(1) * t247 - 0.2e1 * t336) * t245, t254 * t447 - t303 * t364, t299 * t413, -t185 * t304 + t199 * t299 - t343 * t413 + g(1) * t195 - g(2) * t197 + (-t358 + t380) * t359, -t117 * t413 - t184 * t304 - t291 * t359 - t299 * t394 + t324, ((-t180 * qJD(2) + qJDD(1) * t394 + t117) * t254 + (-qJD(2) * t183 - qJDD(1) * t199 + t343) * t251 - t290) * t248, t245 * qJDD(1) * pkin(1) ^ 2 - g(1) * t331 - g(2) * t393 + t117 * t394 - t180 * t185 + t183 * t184 - t199 * t343, t155 * t126 + t448 * t193, -t155 * t125 - t126 * t153 - t448 * t192 - t193 * t76, -t126 * t316 + t193 * t377 + ((qJD(1) * t193 + t155) * t390 - t448 * t254) * t248, t125 * t153 + t192 * t76, t125 * t316 - t192 * t377 + (t76 * t254 + (-qJD(1) * t192 - t153) * t390) * t248, (-t377 * t254 + (-t233 - t316) * t390) * t248, -t56 * t316 + t102 * t377 + t185 * t153 + t171 * t76 + t98 * t192 + t137 * t125 + g(1) * t130 - g(2) * t134 + (t347 * t254 + (qJD(1) * t102 + t74) * t390) * t248, -t103 * t284 + t137 * t126 + t185 * t155 + t171 * t448 + t98 * t193 - t292 * t400 + t316 * t55 - t364 * t75 + t325, -t102 * t448 - t103 * t76 - t75 * t125 - t74 * t126 - t55 * t153 - t56 * t155 + t192 * t292 + t193 * t347 - t324, -g(1) * t280 - g(2) * t301 - t102 * t347 - t103 * t292 + t137 * t185 + t98 * t171 + t75 * t55 + t74 * t56, t14, -t272, t6, t315, -t271, t36, t11 * t147 + t113 * t52 + t125 * t30 + t127 * t21 - t192 * t354 + t39 * t80 + t41 * t71 + t62 * t66 + t333, -t10 * t147 + t115 * t52 - t125 * t31 + t128 * t21 - t192 * t3 - t38 * t80 - t428 * t71 + t63 * t66 - t334, -t10 * t113 - t11 * t115 - t127 * t3 + t128 * t354 - t30 * t63 - t31 * t62 + t38 * t41 - t39 * t428 - t325, -g(1) * t268 - g(2) * t276 + t31 * t10 + t30 * t11 + t21 * t80 + t3 * t428 - t354 * t41 + t66 * t52, t14, t6, t272, t36, t271, t315, t113 * t13 - t125 * t22 + t127 * t5 - t147 * t9 - t192 * t2 + t29 * t62 - t35 * t71 + t39 * t43 + t333, -t1 * t127 - t113 * t8 + t115 * t9 + t128 * t2 + t22 * t63 - t23 * t62 - t34 * t39 - t35 * t38 - t325, t1 * t192 - t115 * t13 + t125 * t23 - t128 * t5 + t147 * t8 - t29 * t63 + t34 * t71 + t38 * t43 + t334, t1 * t34 + t23 * t8 + t5 * t43 + t29 * t13 + t2 * t35 + t22 * t9 - g(1) * (-pkin(4) * t86 - qJ(5) * t85 + t268) - g(2) * (pkin(4) * t90 + qJ(5) * t89 + t276); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t344, t392 * t402, -t254 * t328 + t356, t344, t251 * t328 + t232, t299, pkin(1) * t251 * t402 + t183 * t304 + t278 - t343, pkin(1) * t375 + t180 * t304 + (pkin(7) * t381 + g(3)) * t401 + t323 - t370, 0, 0, -t275 * t250 + (t250 * t262 - t451) * t253, t155 * t339 + t253 * t448 + (-t383 - t76) * t250 + t446 * t153, -t253 * t346 + t250 * t377 + (t253 * t351 + (-t155 + t382) * t251) * t391, -t153 * t293 - t416, t250 * t346 + t253 * t377 + (-t250 * t351 + (qJD(2) * t253 + t153) * t251) * t391, t316 * t365, -pkin(2) * t76 + t106 * t316 - t74 * t365 - t183 * t153 + (-pkin(8) * t284 - t137 * t316) * t250 + (pkin(8) * t346 + t278 - t98) * t253, -pkin(2) * t448 - g(1) * t404 - g(2) * t406 + g(3) * t374 - t446 * t137 - t183 * t155 + t98 * t250 - t284 * t431 - t450 * t316 + t365 * t75, -g(3) * t401 + t106 * t155 + t383 * t431 + t274 + t458 * t75 + t446 * t74 + t450 * t153 + (t250 * t448 - t416) * pkin(8), -t98 * pkin(2) - t75 * t107 - t74 * t106 - t137 * t183 + g(1) * t189 + g(2) * t187 - g(3) * t395 + ((-t75 * t250 - t74 * t253) * qJD(3) + t274) * pkin(8), t12, t457, t7, t263, t456, t40, -t113 * t83 - t144 * t66 + t164 * t71 + t415 * t147 + (t354 + (pkin(8) * t113 + t249 * t66) * qJD(3)) * t253 + (pkin(8) * t39 + t21 * t249 - t30 * t316 + t385 * t66) * t250 + t288, -t115 * t83 - t145 * t66 - t165 * t71 - t425 * t147 + (t3 + (pkin(8) * t115 + t252 * t66) * qJD(3)) * t253 + (-pkin(8) * t38 + t21 * t252 + t31 * t316 - t386 * t66) * t250 + t289, t144 * t31 + t145 * t30 + t164 * t38 - t165 * t39 - t415 * t115 - t425 * t113 + t313 * t387 + (-t249 * t3 + t252 * t354 + (t249 * t30 - t252 * t31) * qJD(4) + t278) * t250, t3 * t165 - t354 * t164 - t66 * t83 - g(1) * t371 - g(2) * t372 - g(3) * t342 + t425 * t31 + t415 * t30 + (t21 * t250 + t387 * t66 - t323) * pkin(8), t12, t7, -t457, t40, -t456, t263, -t140 * t71 - t144 * t29 + t174 * t39 + (qJD(3) * t249 * t29 + t2) * t253 - t427 * t147 + t426 * t113 + (t22 * t316 + t249 * t5 + t29 * t385) * t250 + t288, -t139 * t39 - t140 * t38 + t144 * t23 - t145 * t22 + t427 * t115 - t429 * t113 + t314 * t387 + (-t1 * t249 + t2 * t252 + (-t22 * t249 - t23 * t252) * qJD(4) + t278) * t250, t139 * t71 + t145 * t29 + t174 * t38 + (-t29 * t388 - t1) * t253 + t429 * t147 - t426 * t115 + (-t23 * t316 - t252 * t5 + t29 * t386) * t250 - t289, t1 * t139 + t5 * t174 + t2 * t140 - g(1) * (pkin(4) * t111 + t197 * pkin(8) + qJ(5) * t110 + t371) - g(2) * (pkin(4) * t109 + pkin(8) * t195 + qJ(5) * t108 + t372) - g(3) * (pkin(4) * t157 + qJ(5) * t156 + t342) + t426 * t29 + t429 * t23 + t427 * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t408, -t153 ^ 2 + t155 ^ 2, -t153 * t316 + t448, -t408, -t76 - t451, t284, -t137 * t155 - t316 * t75 + t287 - t347, t137 * t153 - t316 * t74 - t286 + t292, 0, 0, t15, -t455, t16, t281, -t438 * t249 - t309, -t409, -pkin(3) * t39 - t113 * t75 - t147 * t44 - t155 * t30 + t249 * t295 - t252 * t266, pkin(3) * t38 - t115 * t75 + t147 * t45 + t155 * t31 + t249 * t266 + t252 * t295, t113 * t45 + t115 * t44 + (-t153 * t30 + t3 + (-t30 + t430) * qJD(4)) * t252 + (t320 + t354 - t422) * t249 + t279, -t21 * pkin(3) + g(1) * t122 - g(2) * t120 + g(3) * t186 - t30 * t44 - t31 * t45 - t66 * t75 + (qJD(4) * t313 + t249 * t354 + t3 * t252 + t286) * pkin(9), t15, t16, t455, -t409, t147 * t349 + t309, t281, t414 * t113 + t147 * t33 + t155 * t22 + t209 * t39 + t249 * t445 + t267 * t252, t113 * t32 - t115 * t33 + (t153 * t22 + t1 + (t22 + t430) * qJD(4)) * t252 + (t2 + t320 - t423) * t249 + t279, -t414 * t115 - t147 * t32 - t155 * t23 + t209 * t38 + t267 * t249 - t252 * t445, t5 * t209 - t23 * t32 - t22 * t33 - g(1) * (-t133 * t318 - t122) - g(2) * (t318 * t352 + t120) - g(3) * (-t192 * t318 - t186) + t414 * t29 + (qJD(4) * t314 + t1 * t252 + t2 * t249 + t286) * pkin(9); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t410, -t360, t17, -t410, -t256, t71, -t115 * t66 + t270 + t422, t113 * t66 + t147 * t30 - t265, 0, 0, t410, t17, t360, t71, t256, -t410, -t113 * t58 - t264 + t422 + 0.2e1 * t437, pkin(4) * t38 - qJ(5) * t39 + (t23 - t31) * t115 + (t22 - t396) * t113, 0.2e1 * t424 - t113 * t29 + t115 * t58 + (0.2e1 * qJD(5) - t30) * t147 + t265, t1 * qJ(5) - t2 * pkin(4) - t29 * t58 - t22 * t31 - g(1) * (-pkin(4) * t89 + qJ(5) * t90) - g(2) * (-pkin(4) * t85 + qJ(5) * t86) - g(3) * t319 + t396 * t23; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t410 - t71, t17, -t438 - t439, t264 - t423 - t437;];
tau_reg = t4;
