% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRRP11
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:20
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRRP11_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP11_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP11_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP11_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP11_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRRP11_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:20:18
% EndTime: 2019-12-31 22:20:24
% DurationCPUTime: 6.61s
% Computational Cost: add. (22811->268), mult. (49439->366), div. (0->0), fcn. (38861->10), ass. (0->208)
t2181 = sin(qJ(3));
t2185 = cos(qJ(3));
t2179 = cos(pkin(5));
t2239 = t2179 * qJD(1);
t2226 = qJD(2) + t2239;
t2178 = sin(pkin(5));
t2182 = sin(qJ(2));
t2240 = t2178 * t2182;
t2228 = qJD(1) * t2240;
t2150 = t2181 * t2226 + t2185 * t2228;
t2186 = cos(qJ(2));
t2234 = t2186 * qJD(1);
t2227 = t2178 * t2234;
t2231 = qJDD(1) * t2178;
t2157 = qJD(2) * t2227 + t2182 * t2231;
t2229 = t2179 * qJDD(1) + qJDD(2);
t2222 = t2181 * t2157 - t2185 * t2229;
t2199 = t2150 * qJD(3) + qJDD(4) + t2222;
t2167 = -qJD(3) + t2227;
t2180 = sin(qJ(4));
t2184 = cos(qJ(4));
t2132 = t2180 * t2150 + t2184 * t2167;
t2134 = t2184 * t2150 - t2180 * t2167;
t2243 = t2134 * t2132;
t2078 = t2199 + t2243;
t2131 = t2134 ^ 2;
t2148 = t2181 * t2228 - t2185 * t2226;
t2146 = qJD(4) + t2148;
t2251 = t2146 ^ 2;
t2255 = -t2131 - t2251;
t2057 = t2184 * t2078 + t2180 * t2255;
t2200 = -t2185 * t2157 - t2181 * t2229;
t2121 = -t2148 * qJD(3) - t2200;
t2230 = qJDD(1) * t2186;
t2245 = qJD(1) * t2182;
t2256 = (qJD(2) * t2245 - t2230) * t2178;
t2195 = qJDD(3) + t2256;
t2192 = -t2132 * qJD(4) + t2184 * t2121 + t2180 * t2195;
t2244 = t2132 * t2146;
t2191 = t2192 - t2244;
t2031 = t2181 * t2057 + t2185 * t2191;
t2033 = t2185 * t2057 - t2181 * t2191;
t2055 = t2180 * t2078 - t2184 * t2255;
t2215 = t2033 * t2182 - t2055 * t2186;
t2005 = -t2178 * t2031 + t2215 * t2179;
t2018 = t2186 * t2033 + t2182 * t2055;
t2183 = sin(qJ(1));
t2187 = cos(qJ(1));
t2288 = t2183 * t2005 - t2187 * t2018;
t2287 = t2187 * t2005 + t2183 * t2018;
t2003 = t2179 * t2031 + t2215 * t2178;
t2071 = t2192 + t2244;
t2225 = t2180 * t2121 - t2184 * t2195;
t2198 = (-qJD(4) + t2146) * t2134 - t2225;
t2253 = -t2184 * t2071 + t2180 * t2198;
t2110 = t2132 ^ 2;
t2086 = t2131 + t2110;
t2252 = t2180 * t2071 + t2184 * t2198;
t2266 = -t2181 * t2086 + t2185 * t2252;
t2271 = t2182 * t2253 + t2186 * t2266;
t2265 = t2185 * t2086 + t2181 * t2252;
t2272 = t2182 * t2266 - t2186 * t2253;
t2277 = -t2178 * t2265 + t2179 * t2272;
t2282 = -t2183 * t2277 + t2187 * t2271;
t2281 = t2183 * t2271 + t2187 * t2277;
t2278 = t2178 * t2272 + t2179 * t2265;
t2079 = t2199 - t2243;
t2254 = -t2251 - t2110;
t2259 = -t2180 * t2079 + t2184 * t2254;
t2270 = t2181 * t2259;
t2260 = t2184 * t2079 + t2180 * t2254;
t2269 = t2182 * t2260;
t2268 = t2185 * t2259;
t2267 = t2186 * t2260;
t2221 = t2226 ^ 2;
t2250 = t2148 ^ 2;
t2249 = t2150 ^ 2;
t2248 = t2167 ^ 2;
t2247 = t2179 * g(3);
t2246 = t2186 * g(3);
t2242 = t2150 * t2148;
t2188 = qJD(1) ^ 2;
t2241 = t2178 ^ 2 * t2188;
t2233 = qJD(3) + t2167;
t2156 = (-t2186 * pkin(2) - pkin(8) * t2182) * t2178 * qJD(1);
t2169 = -t2187 * g(1) - t2183 * g(2);
t2153 = -t2188 * pkin(1) + pkin(7) * t2231 + t2169;
t2168 = t2183 * g(1) - t2187 * g(2);
t2194 = t2188 * t2178 * pkin(7) + qJDD(1) * pkin(1) + t2168;
t2193 = t2179 * t2194;
t2232 = t2186 * t2153 + t2182 * t2193;
t2098 = t2229 * pkin(8) - t2221 * pkin(2) + (-t2182 * g(3) + t2156 * t2234) * t2178 + t2232;
t2220 = qJD(1) * t2226;
t2203 = t2186 * t2220;
t2189 = -t2157 * pkin(8) - t2247 + (-pkin(8) * t2203 + (-t2230 + (0.2e1 * qJD(2) + t2239) * t2245) * pkin(2) - t2194) * t2178;
t2066 = t2185 * t2098 + t2181 * t2189;
t2126 = t2148 * pkin(3) - t2150 * pkin(9);
t2051 = -t2248 * pkin(3) + pkin(9) * t2195 - t2148 * t2126 + t2066;
t2223 = t2182 * t2153 - t2186 * t2193;
t2097 = -t2229 * pkin(2) - t2221 * pkin(8) + (t2156 * t2245 + t2246) * t2178 + t2223;
t2101 = (qJD(3) - t2167) * t2150 + t2222;
t2224 = -t2148 * t2167 - t2121;
t2190 = t2101 * pkin(3) + t2224 * pkin(9) + t2097;
t2023 = t2184 * t2051 + t2180 * t2190;
t2022 = -t2180 * t2051 + t2184 * t2190;
t2065 = -t2181 * t2098 + t2185 * t2189;
t2109 = t2132 * pkin(4) - t2134 * qJ(5);
t2015 = -pkin(4) * t2251 + qJ(5) * t2199 + 0.2e1 * qJD(5) * t2146 - t2132 * t2109 + t2023;
t2016 = -pkin(4) * t2199 - qJ(5) * t2251 + t2134 * t2109 + qJDD(5) - t2022;
t1994 = t2184 * t2015 + t2180 * t2016;
t2050 = -t2195 * pkin(3) - t2248 * pkin(9) + t2150 * t2126 - t2065;
t2202 = -t2134 * qJD(4) - t2225;
t2017 = -t2202 * pkin(4) + (pkin(4) * t2146 - 0.2e1 * qJD(5)) * t2134 + t2050 - t2191 * qJ(5);
t1992 = t2185 * t1994 + t2181 * t2017;
t1993 = t2180 * t2015 - t2184 * t2016;
t2219 = t1992 * t2182 - t1993 * t2186;
t2002 = -t2180 * t2022 + t2184 * t2023;
t1996 = t2185 * t2002 + t2181 * t2050;
t2001 = t2184 * t2022 + t2180 * t2023;
t2218 = t1996 * t2182 - t2001 * t2186;
t2067 = (qJD(4) + t2146) * t2134 + t2225;
t2034 = t2181 * t2067 + t2268;
t2214 = t2034 * t2182 - t2267;
t2068 = t2146 * t2134 - t2202;
t2038 = t2181 * t2068 + t2268;
t2212 = t2038 * t2182 - t2267;
t2040 = -t2181 * t2065 + t2185 * t2066;
t2211 = t2040 * t2182 - t2097 * t2186;
t2102 = -t2233 * t2150 - t2222;
t2104 = t2233 * t2148 + t2200;
t2075 = t2185 * t2102 - t2181 * t2104;
t2112 = -t2249 - t2250;
t2210 = t2075 * t2182 - t2112 * t2186;
t2115 = t2195 - t2242;
t2122 = -t2248 - t2250;
t2083 = -t2181 * t2115 + t2185 * t2122;
t2209 = t2083 * t2182 - t2101 * t2186;
t2114 = -t2242 - t2195;
t2128 = -t2248 - t2249;
t2089 = t2185 * t2114 - t2181 * t2128;
t2208 = t2089 * t2182 + t2186 * t2224;
t2123 = -t2178 * t2246 - t2223;
t2124 = -g(3) * t2240 + t2232;
t2207 = t2123 * t2186 + t2124 * t2182;
t2136 = t2178 * t2203 - t2157;
t2160 = t2220 * t2240;
t2137 = t2160 - t2256;
t2206 = t2136 * t2186 + t2137 * t2182;
t2176 = t2182 ^ 2;
t2145 = -t2176 * t2241 - t2221;
t2166 = t2186 * t2182 * t2241;
t2155 = t2166 - t2229;
t2205 = t2145 * t2186 + t2155 * t2182;
t2154 = t2166 + t2229;
t2177 = t2186 ^ 2;
t2158 = -t2177 * t2241 - t2221;
t2204 = t2154 * t2186 + t2158 * t2182;
t2165 = -t2183 * qJDD(1) - t2187 * t2188;
t2164 = t2187 * qJDD(1) - t2183 * t2188;
t2159 = (-t2176 - t2177) * t2241;
t2140 = -t2178 * t2194 - t2247;
t2138 = t2160 + t2256;
t2135 = t2226 * t2227 + t2157;
t2129 = -t2182 * t2154 + t2186 * t2158;
t2125 = -t2182 * t2145 + t2186 * t2155;
t2111 = -t2182 * t2136 + t2186 * t2137;
t2108 = -t2178 * t2138 + t2179 * t2204;
t2107 = t2179 * t2138 + t2178 * t2204;
t2100 = -t2178 * t2135 + t2179 * t2205;
t2099 = t2179 * t2135 + t2178 * t2205;
t2096 = -t2178 * t2159 + t2179 * t2206;
t2095 = t2179 * t2159 + t2178 * t2206;
t2088 = t2181 * t2114 + t2185 * t2128;
t2087 = -t2182 * t2123 + t2186 * t2124;
t2082 = t2185 * t2115 + t2181 * t2122;
t2077 = -t2178 * t2140 + t2179 * t2207;
t2076 = t2179 * t2140 + t2178 * t2207;
t2074 = t2181 * t2102 + t2185 * t2104;
t2064 = t2186 * t2089 - t2182 * t2224;
t2063 = t2186 * t2083 + t2182 * t2101;
t2054 = t2186 * t2075 + t2182 * t2112;
t2048 = -t2178 * t2088 + t2179 * t2208;
t2047 = t2179 * t2088 + t2178 * t2208;
t2046 = -t2178 * t2082 + t2179 * t2209;
t2045 = t2179 * t2082 + t2178 * t2209;
t2039 = t2185 * t2065 + t2181 * t2066;
t2036 = -t2185 * t2068 + t2270;
t2032 = -t2185 * t2067 + t2270;
t2030 = -t2178 * t2074 + t2179 * t2210;
t2029 = t2179 * t2074 + t2178 * t2210;
t2024 = t2186 * t2040 + t2182 * t2097;
t2021 = t2186 * t2038 + t2269;
t2019 = t2186 * t2034 + t2269;
t2012 = -t2178 * t2039 + t2179 * t2211;
t2011 = t2179 * t2039 + t2178 * t2211;
t2010 = -t2178 * t2036 + t2179 * t2212;
t2008 = t2179 * t2036 + t2178 * t2212;
t2006 = -t2178 * t2032 + t2214 * t2179;
t2004 = t2179 * t2032 + t2214 * t2178;
t1995 = t2181 * t2002 - t2185 * t2050;
t1991 = t2181 * t1994 - t2185 * t2017;
t1990 = t2186 * t1996 + t2182 * t2001;
t1989 = t2186 * t1992 + t2182 * t1993;
t1988 = -t2178 * t1995 + t2218 * t2179;
t1987 = t2179 * t1995 + t2218 * t2178;
t1986 = -t2178 * t1991 + t2219 * t2179;
t1985 = t2179 * t1991 + t2219 * t2178;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2165, -t2164, 0, -t2183 * t2168 + t2187 * t2169, 0, 0, 0, 0, 0, 0, -t2183 * t2108 + t2187 * t2129, -t2183 * t2100 + t2187 * t2125, -t2183 * t2096 + t2187 * t2111, -t2183 * t2077 + t2187 * t2087, 0, 0, 0, 0, 0, 0, -t2183 * t2046 + t2187 * t2063, -t2183 * t2048 + t2187 * t2064, -t2183 * t2030 + t2187 * t2054, -t2183 * t2012 + t2187 * t2024, 0, 0, 0, 0, 0, 0, -t2183 * t2006 + t2187 * t2019, t2288, t2282, -t2183 * t1988 + t2187 * t1990, 0, 0, 0, 0, 0, 0, -t2183 * t2010 + t2187 * t2021, t2282, -t2288, -t2183 * t1986 + t2187 * t1989; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2164, t2165, 0, t2187 * t2168 + t2183 * t2169, 0, 0, 0, 0, 0, 0, t2187 * t2108 + t2183 * t2129, t2187 * t2100 + t2183 * t2125, t2187 * t2096 + t2183 * t2111, t2187 * t2077 + t2183 * t2087, 0, 0, 0, 0, 0, 0, t2187 * t2046 + t2183 * t2063, t2187 * t2048 + t2183 * t2064, t2187 * t2030 + t2183 * t2054, t2187 * t2012 + t2183 * t2024, 0, 0, 0, 0, 0, 0, t2187 * t2006 + t2183 * t2019, -t2287, t2281, t2187 * t1988 + t2183 * t1990, 0, 0, 0, 0, 0, 0, t2187 * t2010 + t2183 * t2021, t2281, t2287, t2187 * t1986 + t2183 * t1989; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2107, t2099, t2095, t2076, 0, 0, 0, 0, 0, 0, t2045, t2047, t2029, t2011, 0, 0, 0, 0, 0, 0, t2004, -t2003, t2278, t1987, 0, 0, 0, 0, 0, 0, t2008, t2278, t2003, t1985; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2188, -qJDD(1), 0, t2169, 0, 0, 0, 0, 0, 0, t2129, t2125, t2111, t2087, 0, 0, 0, 0, 0, 0, t2063, t2064, t2054, t2024, 0, 0, 0, 0, 0, 0, t2019, -t2018, t2271, t1990, 0, 0, 0, 0, 0, 0, t2021, t2271, t2018, t1989; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2188, 0, t2168, 0, 0, 0, 0, 0, 0, t2108, t2100, t2096, t2077, 0, 0, 0, 0, 0, 0, t2046, t2048, t2030, t2012, 0, 0, 0, 0, 0, 0, t2006, -t2005, t2277, t1988, 0, 0, 0, 0, 0, 0, t2010, t2277, t2005, t1986; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2107, t2099, t2095, t2076, 0, 0, 0, 0, 0, 0, t2045, t2047, t2029, t2011, 0, 0, 0, 0, 0, 0, t2004, -t2003, t2278, t1987, 0, 0, 0, 0, 0, 0, t2008, t2278, t2003, t1985; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2158, t2155, t2137, t2124, 0, 0, 0, 0, 0, 0, t2083, t2089, t2075, t2040, 0, 0, 0, 0, 0, 0, t2034, -t2033, t2266, t1996, 0, 0, 0, 0, 0, 0, t2038, t2266, t2033, t1992; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2154, t2145, t2136, t2123, 0, 0, 0, 0, 0, 0, -t2101, t2224, -t2112, -t2097, 0, 0, 0, 0, 0, 0, -t2260, t2055, -t2253, -t2001, 0, 0, 0, 0, 0, 0, -t2260, -t2253, -t2055, -t1993; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2138, t2135, t2159, t2140, 0, 0, 0, 0, 0, 0, t2082, t2088, t2074, t2039, 0, 0, 0, 0, 0, 0, t2032, -t2031, t2265, t1995, 0, 0, 0, 0, 0, 0, t2036, t2265, t2031, t1991; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2122, t2114, t2102, t2066, 0, 0, 0, 0, 0, 0, t2259, -t2057, t2252, t2002, 0, 0, 0, 0, 0, 0, t2259, t2252, t2057, t1994; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2115, t2128, t2104, t2065, 0, 0, 0, 0, 0, 0, -t2067, -t2191, t2086, -t2050, 0, 0, 0, 0, 0, 0, -t2068, t2086, t2191, -t2017; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2101, -t2224, t2112, t2097, 0, 0, 0, 0, 0, 0, t2260, -t2055, t2253, t2001, 0, 0, 0, 0, 0, 0, t2260, t2253, t2055, t1993; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2254, -t2078, t2198, t2023, 0, 0, 0, 0, 0, 0, t2254, t2198, t2078, t2015; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2079, t2255, -t2071, t2022, 0, 0, 0, 0, 0, 0, t2079, -t2071, -t2255, -t2016; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2067, t2191, -t2086, t2050, 0, 0, 0, 0, 0, 0, t2068, -t2086, -t2191, t2017; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2254, t2198, t2078, t2015; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2068, -t2086, -t2191, t2017; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2079, t2071, t2255, t2016;];
f_new_reg = t1;
