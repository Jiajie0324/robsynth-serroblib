% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRPP7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:06
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRPP7_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPP7_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPP7_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPP7_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPP7_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RRRPP7_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:06:35
% EndTime: 2019-12-31 21:06:38
% DurationCPUTime: 3.13s
% Computational Cost: add. (4807->226), mult. (9702->206), div. (0->0), fcn. (6261->6), ass. (0->123)
t1668 = cos(qJ(2));
t1691 = t1668 * qJD(1);
t1654 = -qJD(3) + t1691;
t1631 = t1654 ^ 2;
t1664 = sin(qJ(3));
t1667 = cos(qJ(3));
t1665 = sin(qJ(2));
t1701 = qJD(1) * t1665;
t1636 = t1664 * qJD(2) + t1667 * t1701;
t1633 = t1636 ^ 2;
t1607 = t1633 + t1631;
t1634 = -t1667 * qJD(2) + t1664 * t1701;
t1609 = t1636 * t1634;
t1657 = qJD(2) * t1701;
t1687 = t1668 * qJDD(1);
t1683 = t1657 - t1687;
t1682 = -qJDD(3) - t1683;
t1678 = -t1682 + t1609;
t1568 = t1664 * t1607 - t1667 * t1678;
t1685 = qJD(2) * t1691;
t1688 = t1665 * qJDD(1);
t1680 = t1685 + t1688;
t1674 = -t1634 * qJD(3) + t1664 * qJDD(2) + t1667 * t1680;
t1700 = t1654 * t1634;
t1672 = t1674 + t1700;
t1548 = t1668 * t1568 + t1665 * t1672;
t1666 = sin(qJ(1));
t1669 = cos(qJ(1));
t1732 = t1667 * t1607 + t1664 * t1678;
t1746 = t1666 * t1548 + t1669 * t1732;
t1745 = t1669 * t1548 - t1666 * t1732;
t1677 = -t1667 * qJDD(2) + t1664 * t1680;
t1576 = (qJD(3) + t1654) * t1636 + t1677;
t1673 = t1674 - t1700;
t1554 = t1667 * t1576 - t1664 * t1673;
t1705 = t1634 ^ 2;
t1592 = t1633 + t1705;
t1536 = t1668 * t1554 + t1665 * t1592;
t1551 = t1664 * t1576 + t1667 * t1673;
t1744 = t1666 * t1536 - t1669 * t1551;
t1743 = t1669 * t1536 + t1666 * t1551;
t1545 = t1665 * t1568 - t1668 * t1672;
t1533 = t1665 * t1554 - t1668 * t1592;
t1676 = t1636 * qJD(3) + t1677;
t1575 = -t1636 * t1654 + t1676;
t1710 = -t1705 - t1631;
t1712 = t1609 + t1682;
t1724 = t1664 * t1712 + t1667 * t1710;
t1734 = t1668 * t1724;
t1729 = t1665 * t1575 + t1734;
t1725 = t1664 * t1710 - t1667 * t1712;
t1733 = t1669 * t1725;
t1738 = t1666 * t1729 - t1733;
t1735 = t1666 * t1725;
t1737 = t1669 * t1729 + t1735;
t1736 = t1665 * t1724;
t1731 = -t1668 * t1575 + t1736;
t1713 = qJD(3) - t1654;
t1706 = qJD(2) ^ 2;
t1711 = -qJDD(2) * pkin(2) - t1706 * pkin(7);
t1709 = t1676 * pkin(3) - t1672 * qJ(4);
t1704 = -2 * qJD(4);
t1703 = t1668 * g(3);
t1702 = t1636 * qJ(5);
t1648 = -t1669 * g(1) - t1666 * g(2);
t1670 = qJD(1) ^ 2;
t1627 = -t1670 * pkin(1) + qJDD(1) * pkin(6) + t1648;
t1615 = -t1665 * g(3) + t1668 * t1627;
t1637 = (-t1668 * pkin(2) - t1665 * pkin(7)) * qJD(1);
t1588 = -t1706 * pkin(2) + qJDD(2) * pkin(7) + t1637 * t1691 + t1615;
t1647 = t1666 * g(1) - t1669 * g(2);
t1626 = qJDD(1) * pkin(1) + t1670 * pkin(6) + t1647;
t1638 = 0.2e1 * t1685 + t1688;
t1671 = (t1683 + t1657) * pkin(2) - t1638 * pkin(7) - t1626;
t1558 = t1667 * t1588 + t1664 * t1671;
t1660 = t1665 ^ 2;
t1661 = t1668 ^ 2;
t1689 = t1660 + t1661;
t1684 = -t1654 * pkin(3) + t1704;
t1557 = -t1664 * t1588 + t1667 * t1671;
t1614 = -t1665 * t1627 - t1703;
t1605 = t1634 * pkin(3) - t1636 * qJ(4);
t1681 = -t1682 * qJ(4) - t1634 * t1605 + t1654 * t1704 + t1558;
t1679 = t1682 * pkin(3) - t1631 * qJ(4) + qJDD(4) - t1557;
t1587 = t1703 + (qJD(1) * t1637 + t1627) * t1665 + t1711;
t1653 = t1668 * t1670 * t1665;
t1651 = -t1661 * t1670 - t1706;
t1650 = -t1660 * t1670 - t1706;
t1645 = -qJDD(2) + t1653;
t1644 = qJDD(2) + t1653;
t1643 = t1689 * t1670;
t1642 = -t1666 * qJDD(1) - t1669 * t1670;
t1641 = t1669 * qJDD(1) - t1666 * t1670;
t1640 = t1689 * qJDD(1);
t1639 = -0.2e1 * t1657 + t1687;
t1613 = t1668 * t1645 - t1665 * t1650;
t1612 = -t1665 * t1644 + t1668 * t1651;
t1611 = t1665 * t1645 + t1668 * t1650;
t1610 = t1668 * t1644 + t1665 * t1651;
t1585 = -t1665 * t1614 + t1668 * t1615;
t1584 = t1668 * t1614 + t1665 * t1615;
t1577 = t1713 * t1636 + t1677;
t1544 = t1665 * t1577 + t1734;
t1541 = -t1668 * t1577 + t1736;
t1532 = t1636 * t1605 + t1679;
t1531 = t1684 * t1636 + t1587 + t1709;
t1530 = -t1631 * pkin(3) + t1681;
t1529 = -t1664 * t1557 + t1667 * t1558;
t1528 = t1667 * t1557 + t1664 * t1558;
t1527 = t1677 * pkin(4) + t1705 * qJ(5) + t1637 * t1701 - qJDD(5) - t1614 + (t1713 * pkin(4) + t1684 + t1702) * t1636 + t1709 + t1711;
t1526 = t1668 * t1529 + t1665 * t1587;
t1525 = t1665 * t1529 - t1668 * t1587;
t1524 = -t1705 * pkin(4) + t1676 * qJ(5) + 0.2e1 * qJD(5) * t1634 + (t1702 + (-pkin(3) - pkin(4)) * t1654) * t1654 + t1681;
t1523 = t1682 * pkin(4) + (pkin(4) * t1634 - 0.2e1 * qJD(5) + t1605) * t1636 + t1679 - t1673 * qJ(5);
t1522 = t1667 * t1530 + t1664 * t1532;
t1521 = t1664 * t1530 - t1667 * t1532;
t1520 = t1668 * t1522 + t1665 * t1531;
t1519 = t1665 * t1522 - t1668 * t1531;
t1518 = t1664 * t1523 + t1667 * t1524;
t1517 = -t1667 * t1523 + t1664 * t1524;
t1516 = t1668 * t1518 + t1665 * t1527;
t1515 = t1665 * t1518 - t1668 * t1527;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1642, -t1641, 0, -t1666 * t1647 + t1669 * t1648, 0, 0, 0, 0, 0, 0, t1669 * t1612 - t1666 * t1639, t1669 * t1613 + t1666 * t1638, t1669 * t1640 - t1666 * t1643, t1669 * t1585 - t1666 * t1626, 0, 0, 0, 0, 0, 0, t1669 * t1544 + t1735, t1745, -t1743, t1669 * t1526 + t1666 * t1528, 0, 0, 0, 0, 0, 0, t1737, -t1743, -t1745, t1669 * t1520 + t1666 * t1521, 0, 0, 0, 0, 0, 0, t1737, -t1745, t1743, t1669 * t1516 + t1666 * t1517; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1641, t1642, 0, t1669 * t1647 + t1666 * t1648, 0, 0, 0, 0, 0, 0, t1666 * t1612 + t1669 * t1639, t1666 * t1613 - t1669 * t1638, t1666 * t1640 + t1669 * t1643, t1666 * t1585 + t1669 * t1626, 0, 0, 0, 0, 0, 0, t1666 * t1544 - t1733, t1746, -t1744, t1666 * t1526 - t1669 * t1528, 0, 0, 0, 0, 0, 0, t1738, -t1744, -t1746, t1666 * t1520 - t1669 * t1521, 0, 0, 0, 0, 0, 0, t1738, -t1746, t1744, t1666 * t1516 - t1669 * t1517; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1610, t1611, 0, t1584, 0, 0, 0, 0, 0, 0, t1541, t1545, -t1533, t1525, 0, 0, 0, 0, 0, 0, t1731, -t1533, -t1545, t1519, 0, 0, 0, 0, 0, 0, t1731, -t1545, t1533, t1515; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1670, -qJDD(1), 0, t1648, 0, 0, 0, 0, 0, 0, t1612, t1613, t1640, t1585, 0, 0, 0, 0, 0, 0, t1544, t1548, -t1536, t1526, 0, 0, 0, 0, 0, 0, t1729, -t1536, -t1548, t1520, 0, 0, 0, 0, 0, 0, t1729, -t1548, t1536, t1516; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1670, 0, t1647, 0, 0, 0, 0, 0, 0, t1639, -t1638, t1643, t1626, 0, 0, 0, 0, 0, 0, -t1725, t1732, t1551, -t1528, 0, 0, 0, 0, 0, 0, -t1725, t1551, -t1732, -t1521, 0, 0, 0, 0, 0, 0, -t1725, -t1732, -t1551, -t1517; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1610, t1611, 0, t1584, 0, 0, 0, 0, 0, 0, t1541, t1545, -t1533, t1525, 0, 0, 0, 0, 0, 0, t1731, -t1533, -t1545, t1519, 0, 0, 0, 0, 0, 0, t1731, -t1545, t1533, t1515; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1651, t1645, t1687, t1615, 0, 0, 0, 0, 0, 0, t1724, t1568, -t1554, t1529, 0, 0, 0, 0, 0, 0, t1724, -t1554, -t1568, t1522, 0, 0, 0, 0, 0, 0, t1724, -t1568, t1554, t1518; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1644, t1650, -t1688, t1614, 0, 0, 0, 0, 0, 0, -t1577, -t1672, t1592, -t1587, 0, 0, 0, 0, 0, 0, -t1575, t1592, t1672, -t1531, 0, 0, 0, 0, 0, 0, -t1575, t1672, -t1592, -t1527; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1639, t1638, -t1643, -t1626, 0, 0, 0, 0, 0, 0, t1725, -t1732, -t1551, t1528, 0, 0, 0, 0, 0, 0, t1725, -t1551, t1732, t1521, 0, 0, 0, 0, 0, 0, t1725, t1732, t1551, t1517; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1710, -t1678, -t1576, t1558, 0, 0, 0, 0, 0, 0, t1710, -t1576, t1678, t1530, 0, 0, 0, 0, 0, 0, t1710, t1678, t1576, t1524; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1712, -t1607, -t1673, t1557, 0, 0, 0, 0, 0, 0, -t1712, -t1673, t1607, -t1532, 0, 0, 0, 0, 0, 0, -t1712, t1607, t1673, -t1523; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1577, t1672, -t1592, t1587, 0, 0, 0, 0, 0, 0, t1575, -t1592, -t1672, t1531, 0, 0, 0, 0, 0, 0, t1575, -t1672, t1592, t1527; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1710, -t1576, t1678, t1530, 0, 0, 0, 0, 0, 0, t1710, t1678, t1576, t1524; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1575, -t1592, -t1672, t1531, 0, 0, 0, 0, 0, 0, t1575, -t1672, t1592, t1527; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1712, t1673, -t1607, t1532, 0, 0, 0, 0, 0, 0, t1712, -t1607, -t1673, t1523; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1710, t1678, t1576, t1524; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1712, -t1607, -t1673, t1523; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1575, t1672, -t1592, -t1527;];
f_new_reg = t1;
