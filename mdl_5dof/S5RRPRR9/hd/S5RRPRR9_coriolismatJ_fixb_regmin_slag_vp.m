% Calculate minimal parameter regressor of coriolis matrix for
% S5RRPRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x26]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:22
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RRPRR9_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR9_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR9_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR9_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:22:00
% EndTime: 2019-12-31 20:22:12
% DurationCPUTime: 4.94s
% Computational Cost: add. (5097->328), mult. (10681->484), div. (0->0), fcn. (12135->8), ass. (0->292)
t243 = sin(pkin(9));
t246 = sin(qJ(2));
t249 = cos(qJ(2));
t380 = cos(pkin(9));
t220 = t243 * t246 - t249 * t380;
t411 = -t220 / 0.2e1;
t286 = t380 * t246;
t356 = t243 * t249;
t222 = t286 + t356;
t245 = sin(qJ(4));
t247 = cos(qJ(5));
t353 = t247 * t245;
t244 = sin(qJ(5));
t248 = cos(qJ(4));
t355 = t244 * t248;
t228 = t353 + t355;
t103 = t228 * t222;
t152 = t245 * t222;
t400 = -qJ(3) - pkin(6);
t230 = t400 * t246;
t231 = t400 * t249;
t176 = -t230 * t380 - t231 * t243;
t122 = pkin(4) * t152 + t176;
t352 = t247 * t248;
t226 = t244 * t245 - t352;
t237 = pkin(2) * t243 + pkin(7);
t401 = pkin(8) + t237;
t216 = t401 * t245;
t217 = t401 * t248;
t272 = -t216 * t247 - t217 * t244;
t238 = -pkin(2) * t380 - pkin(3);
t229 = -pkin(4) * t248 + t238;
t429 = -t229 / 0.2e1;
t427 = t103 * t429 - t122 * t226 / 0.2e1 + t272 * t411;
t409 = t228 / 0.2e1;
t426 = t176 * t248;
t428 = t426 / 0.2e1;
t307 = qJD(4) + qJD(5);
t131 = t152 * t244 - t222 * t352;
t146 = -t216 * t244 + t217 * t247;
t424 = t122 * t409 + t131 * t429 + t146 * t411;
t149 = t245 * t220;
t402 = t246 * pkin(2);
t155 = pkin(3) * t222 + pkin(7) * t220 + t402;
t137 = t245 * t155;
t341 = -t137 + t426;
t77 = pkin(8) * t149 - t341;
t383 = t247 * t77;
t297 = -t383 / 0.2e1;
t138 = t248 * t155;
t154 = t248 * t220;
t354 = t176 * t245;
t403 = t222 * pkin(4);
t63 = pkin(8) * t154 + t138 + t354 + t403;
t390 = t244 * t63;
t269 = -t390 / 0.2e1 + t297;
t12 = t269 - t427;
t415 = t230 * t243 - t231 * t380;
t367 = t415 * t245;
t366 = t415 * t248;
t335 = qJD(1) * t222;
t167 = t220 * t335;
t215 = t286 / 0.2e1 + t356 / 0.2e1;
t417 = qJD(4) * t215 + t167;
t387 = t244 * t77;
t298 = -t387 / 0.2e1;
t386 = t247 * t63;
t268 = t298 + t386 / 0.2e1;
t11 = t268 - t424;
t423 = t307 * t146;
t422 = t307 * t272;
t419 = t220 * t307;
t418 = t226 * t307;
t218 = t220 ^ 2;
t219 = t222 ^ 2;
t416 = -t219 - t218;
t414 = qJD(5) * t215 + t417;
t241 = t245 ^ 2;
t242 = t248 ^ 2;
t234 = t242 - t241;
t284 = 0.2e1 * t248 * t152;
t255 = qJD(1) * t284 - qJD(2) * t234;
t404 = t220 * pkin(4);
t360 = t222 * t248;
t296 = -pkin(2) * t249 - pkin(1);
t147 = pkin(3) * t220 - pkin(7) * t222 + t296;
t90 = -t147 * t248 + t367;
t75 = -pkin(8) * t360 - t90;
t62 = t75 + t404;
t61 = t247 * t62;
t413 = -t61 / 0.2e1;
t412 = -t62 / 0.2e1;
t410 = -t222 / 0.2e1;
t408 = t245 / 0.2e1;
t407 = t247 / 0.2e1;
t406 = -t248 / 0.2e1;
t405 = pkin(4) * t245;
t36 = t103 * t226 + t131 * t228;
t399 = t307 * t36;
t56 = -t103 * t409 + t131 * t226 / 0.2e1;
t398 = t307 * t56;
t266 = t355 / 0.2e1 + t353 / 0.2e1;
t92 = (t409 + t266) * t220;
t397 = t307 * t92;
t97 = t220 * t266 + t228 * t411;
t396 = t307 * t97;
t395 = pkin(4) * qJD(4);
t394 = pkin(4) * qJD(5);
t393 = qJD(2) * pkin(2);
t121 = -pkin(4) * t149 + t415;
t132 = t228 * t220;
t91 = t147 * t245 + t366;
t76 = -pkin(8) * t152 + t91;
t388 = t244 * t76;
t27 = -t61 + t388;
t1 = (t386 - t387) * t220 - t27 * t222 + t121 * t103 - t122 * t132;
t392 = t1 * qJD(1);
t135 = t226 * t220;
t384 = t247 * t76;
t28 = t244 * t62 + t384;
t2 = -(t383 + t390) * t220 - t28 * t222 - t121 * t131 + t122 * t135;
t391 = t2 * qJD(1);
t389 = t244 * t75;
t385 = t247 * t75;
t301 = -t404 / 0.2e1;
t279 = t301 + t75 / 0.2e1;
t7 = (t412 + t279) * t244;
t382 = t7 * qJD(1);
t9 = t247 * t279 + t413;
t381 = t9 * qJD(1);
t379 = t122 * t131;
t378 = t122 * t103;
t375 = t131 * t222;
t374 = t132 * t220;
t373 = t135 * t220;
t305 = pkin(4) * t360;
t31 = -t384 - t389;
t15 = t103 * t305 + t220 * t31 - t379;
t370 = t15 * qJD(1);
t32 = t385 - t388;
t16 = -t131 * t305 - t220 * t32 - t378;
t369 = t16 * qJD(1);
t17 = t220 * t27 - t378;
t368 = t17 * qJD(1);
t18 = -t220 * t28 - t379;
t364 = t18 * qJD(1);
t21 = (-t90 + t367) * t222 + t138 * t220;
t363 = t21 * qJD(1);
t22 = (-t91 + t366) * t222 + (t341 - t426) * t220;
t362 = t22 * qJD(1);
t361 = t222 * t103;
t37 = -t103 * t135 - t131 * t132;
t350 = t37 * qJD(1);
t44 = -t152 * t176 + t220 * t90;
t349 = t44 * qJD(1);
t45 = t176 * t360 - t220 * t91;
t348 = t45 * qJD(1);
t48 = t296 * t402;
t347 = t48 * qJD(1);
t52 = -t361 + t374;
t346 = t52 * qJD(1);
t53 = t361 + t374;
t345 = t53 * qJD(1);
t54 = t373 - t375;
t344 = t54 * qJD(1);
t55 = -t373 - t375;
t343 = t55 * qJD(1);
t78 = t176 * t222 - t220 * t415;
t342 = t78 * qJD(1);
t80 = t92 * qJD(1);
t288 = t135 / 0.2e1;
t290 = t247 * t411;
t299 = t244 * t149;
t338 = t299 / 0.2e1 + t248 * t290;
t93 = t288 + t338;
t81 = t93 * qJD(1);
t289 = -t135 / 0.2e1;
t339 = -t299 / 0.2e1 + t154 * t407;
t94 = t289 + t339;
t83 = t94 * qJD(1);
t337 = qJD(1) * t131;
t336 = qJD(1) * t220;
t334 = qJD(1) * t248;
t333 = qJD(1) * t249;
t332 = qJD(2) * t222;
t331 = qJD(2) * t228;
t330 = qJD(2) * t229;
t329 = qJD(2) * t245;
t328 = qJD(2) * t248;
t327 = qJD(3) * t248;
t326 = qJD(4) * t245;
t325 = qJD(4) * t248;
t324 = qJD(5) * t229;
t100 = t222 * t226;
t323 = t100 * qJD(1);
t322 = t103 * qJD(1);
t306 = t219 - t218;
t116 = t306 * t245;
t321 = t116 * qJD(1);
t117 = t416 * t245;
t320 = t117 * qJD(1);
t118 = t306 * t248;
t319 = t118 * qJD(1);
t254 = t243 * t411 + t380 * t410;
t125 = (-t246 / 0.2e1 + t254) * pkin(2);
t318 = t125 * qJD(1);
t317 = t149 * qJD(1);
t316 = t152 * qJD(1);
t315 = t154 * qJD(1);
t157 = t416 * t248;
t314 = t157 * qJD(1);
t313 = t416 * qJD(1);
t312 = t215 * qJD(1);
t235 = -t246 ^ 2 + t249 ^ 2;
t310 = t235 * qJD(1);
t309 = t246 * qJD(2);
t308 = t249 * qJD(2);
t304 = pkin(1) * t246 * qJD(1);
t303 = pkin(1) * t333;
t302 = -t405 / 0.2e1;
t300 = t403 / 0.2e1;
t295 = t220 * t325;
t166 = t220 * t332;
t294 = t245 * t325;
t293 = t245 * t328;
t292 = t246 * t333;
t291 = t222 * t334;
t287 = -t137 / 0.2e1 + t428;
t285 = pkin(4) * t307;
t282 = t307 * t228;
t281 = t248 * t300;
t280 = -qJD(4) - t336;
t278 = t300 + t63 / 0.2e1;
t276 = qJD(2) * t284;
t275 = qJD(5) - t280;
t126 = t226 * t405 + t228 * t229;
t4 = (-t103 * t408 + (t226 * t406 + t407) * t222) * pkin(4) + t11;
t274 = qJD(1) * t4 - qJD(2) * t126;
t127 = -t226 * t229 + t228 * t405;
t3 = (t131 * t408 + (-t244 / 0.2e1 + t228 * t406) * t222) * pkin(4) + t12;
t273 = qJD(1) * t3 - qJD(2) * t127;
t49 = t103 ^ 2 - t131 ^ 2;
t19 = qJD(1) * t49 + qJD(2) * t36;
t271 = -t220 * t238 - t222 * t237;
t128 = t226 ^ 2 - t228 ^ 2;
t25 = qJD(1) * t36 + qJD(2) * t128;
t270 = t280 * t248;
t267 = t237 * t220 / 0.2e1 + t238 * t410;
t265 = qJD(1) * t11 - t228 * t330;
t264 = qJD(1) * t12 + t226 * t330;
t30 = -qJD(2) * t56 - t103 * t337;
t43 = -qJD(1) * t56 + t226 * t331;
t253 = t267 * t248;
t40 = -t138 / 0.2e1 - t253;
t263 = -qJD(1) * t40 - t238 * t329;
t252 = t267 * t245 + t428;
t38 = t252 - t287;
t262 = -qJD(1) * t38 - t238 * t328;
t261 = t222 * t270;
t148 = (t241 / 0.2e1 - t242 / 0.2e1) * t222;
t260 = -qJD(1) * t148 + t293;
t257 = t219 * t245 * t334 + qJD(2) * t148;
t156 = t234 * t219;
t256 = qJD(1) * t156 + t276;
t211 = t215 * qJD(2);
t208 = t222 * t328;
t142 = t149 * qJD(4);
t141 = t148 * qJD(4);
t124 = t402 / 0.2e1 + t254 * pkin(2);
t123 = -t317 - t326;
t96 = t288 + t339;
t95 = t289 + t338;
t89 = t97 * qJD(3);
t84 = t96 * qJD(3);
t82 = t94 * qJD(3);
t79 = t92 * qJD(3);
t66 = -t282 - t80;
t65 = -t83 + t418;
t64 = -t81 - t418;
t47 = qJD(2) * t93 + t103 * t336;
t46 = qJD(2) * t92 - t131 * t336;
t41 = t176 * t408 + t354 / 0.2e1 + t138 / 0.2e1 - t253;
t39 = t252 + t287;
t24 = t95 * qJD(2) - t103 * t275;
t23 = t97 * qJD(2) + t131 * t275;
t14 = t268 + t424;
t13 = t269 + t427;
t10 = pkin(4) * t290 + t388 + t413 - t385 / 0.2e1;
t8 = -t384 - t389 / 0.2e1 + (t301 + t412) * t244;
t6 = t131 * t302 + t228 * t281 - t278 * t244 + t297 + t427;
t5 = -t103 * t302 + t226 * t281 + t247 * t278 + t298 + t424;
t20 = [0, 0, 0, t246 * t308, t235 * qJD(2), 0, 0, 0, -pkin(1) * t309, -pkin(1) * t308, -t416 * qJD(3), qJD(2) * t48 + qJD(3) * t78, -t166 * t242 - t219 * t294, -qJD(4) * t156 + t220 * t276, -t220 * t222 * t326 + qJD(2) * t118, -qJD(2) * t116 - t222 * t295, t166, qJD(2) * t21 - qJD(3) * t117 + qJD(4) * t45, qJD(2) * t22 - qJD(3) * t157 + qJD(4) * t44, (-qJD(2) * t135 + t103 * t307) * t131, t37 * qJD(2) + t307 * t49, t54 * qJD(2) - t103 * t419, t52 * qJD(2) + t131 * t419, t166, qJD(2) * t1 + qJD(3) * t53 + qJD(4) * t15 + qJD(5) * t18, qJD(2) * t2 + qJD(3) * t55 + qJD(4) * t16 + qJD(5) * t17; 0, 0, 0, t292, t310, t308, -t309, 0, -pkin(6) * t308 - t304, pkin(6) * t309 - t303, (t220 * t380 - t222 * t243) * t393, t347 + (-t176 * t243 - t380 * t415) * t393 + t124 * qJD(3), -t141 + (-t242 * t335 - t293) * t220, t220 * t255 - 0.2e1 * t222 * t294, t222 * t329 + t319, t208 - t321, t417, t363 + (t245 * t271 - t366) * qJD(2) + t41 * qJD(4), t362 + (t248 * t271 + t367) * qJD(2) + t39 * qJD(4), (t331 - t337) * t135 + t398, t350 + (t132 * t228 - t135 * t226) * qJD(2) + t399, t222 * t331 + t307 * t95 + t344, -t226 * t332 + t346 + t396, t414, t392 + (t121 * t226 - t132 * t229 + t222 * t272) * qJD(2) + t5 * qJD(4) + t14 * qJD(5), t391 + (t121 * t228 + t135 * t229 - t146 * t222) * qJD(2) + t6 * qJD(4) + t13 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t313, qJD(2) * t124 + t342, 0, 0, 0, 0, 0, -t320, -t314, 0, 0, 0, 0, 0, t345 + t396, t307 * t96 + t343; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t257, -t256, t280 * t152, t261, t211, qJD(2) * t41 - qJD(4) * t91 + t348, qJD(2) * t39 + qJD(4) * t90 + t349, -t30, t19, t24, t23, t211, qJD(2) * t5 + qJD(4) * t31 + qJD(5) * t8 + t370 + t89, qJD(2) * t6 - qJD(4) * t32 + qJD(5) * t10 + t369 + t84; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t30, t19, t24, t23, t211, qJD(2) * t14 + qJD(4) * t8 - qJD(5) * t28 + t364 + t89, qJD(2) * t13 + qJD(4) * t10 + qJD(5) * t27 + t368 + t84; 0, 0, 0, -t292, -t310, 0, 0, 0, t304, t303, 0, qJD(3) * t125 - t347, t167 * t242 - t141, 0.2e1 * t245 * t261, qJD(4) * t154 - t319, -t142 + t321, -t417, qJD(4) * t40 - t222 * t327 - t363, qJD(3) * t152 + qJD(4) * t38 - t362, t135 * t337 + t398, -t350 + t399, -t307 * t93 - t344, -t346 - t397, -t414, qJD(3) * t100 - qJD(4) * t4 - qJD(5) * t11 - t392, qJD(3) * t103 - qJD(4) * t3 - qJD(5) * t12 - t391; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t294, t234 * qJD(4), 0, 0, 0, t238 * t326, t238 * t325, -t226 * t282, t307 * t128, 0, 0, 0, qJD(4) * t126 + t228 * t324, qJD(4) * t127 - t226 * t324; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t318, 0, 0, 0, 0, 0, -t291, t316, 0, 0, 0, 0, 0, t323, t322; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t260, -t255, t315 + t325, t123, -t312, -t237 * t325 - t263, t237 * t326 - t262, -t43, t25, t64, t66, -t312, -t274 - t423, -t273 - t422; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t43, t25, t64, t66, -t312, -t265 - t423, -t264 - t422; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t313, -qJD(2) * t125 - t342, 0, 0, 0, 0, 0, -t142 + t208 + t320, -qJD(2) * t152 - t295 + t314, 0, 0, 0, 0, 0, -qJD(2) * t100 - t345 - t397, -t103 * qJD(2) - t307 * t94 - t343; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t318, 0, 0, 0, 0, 0, t291, -t316, 0, 0, 0, 0, 0, -t323, -t322; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t123, t270, 0, 0, 0, 0, 0, t66, t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t66, t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t257, t256, -qJD(2) * t154 + t167 * t245, qJD(2) * t149 + t220 * t291, t211, -qJD(2) * t40 + qJD(3) * t149 - t348, -qJD(2) * t38 + t220 * t327 - t349, t30, -t19, t47, t46, t211, qJD(2) * t4 + qJD(5) * t7 - t370 + t79, qJD(2) * t3 + qJD(5) * t9 - t369 + t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t260, t255, -t315, t317, t312, t263, t262, t43, -t25, t81, t80, t312, t274, t273; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t317, t220 * t334, 0, 0, 0, 0, 0, t80, t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t244 * t394, -t247 * t394; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t244 * t285 + t382, -t247 * t285 + t381; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, -t19, t47, t46, t211, qJD(2) * t11 - qJD(4) * t7 - t364 + t79, qJD(2) * t12 - qJD(4) * t9 - t368 + t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t43, -t25, t81, t80, t312, t265, t264; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t80, t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t244 * t395 - t382, t247 * t395 - t381; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t20;
