% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPRR9
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:22
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPRR9_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR9_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR9_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR9_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR9_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR9_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:22:48
% EndTime: 2019-12-31 20:22:51
% DurationCPUTime: 3.64s
% Computational Cost: add. (22992->258), mult. (52879->356), div. (0->0), fcn. (37888->10), ass. (0->205)
t1600 = sin(pkin(9));
t1601 = cos(pkin(9));
t1609 = cos(qJ(2));
t1644 = qJD(1) * t1609;
t1605 = sin(qJ(2));
t1645 = qJD(1) * t1605;
t1568 = t1600 * t1645 - t1601 * t1644;
t1567 = qJD(4) + t1568;
t1563 = qJD(5) + t1567;
t1655 = qJD(5) + t1563;
t1594 = t1609 * qJDD(1);
t1631 = qJD(2) * t1645;
t1576 = t1594 - t1631;
t1598 = t1609 ^ 2;
t1612 = qJD(1) ^ 2;
t1620 = qJD(2) * pkin(2) - qJ(3) * t1645;
t1606 = sin(qJ(1));
t1610 = cos(qJ(1));
t1584 = t1606 * g(1) - t1610 * g(2);
t1621 = qJDD(1) * pkin(1) + t1584;
t1538 = t1576 * pkin(2) + (t1598 * qJ(3) + pkin(6)) * t1612 - t1620 * t1645 - qJDD(3) + t1621;
t1570 = t1600 * t1644 + t1601 * t1645;
t1604 = sin(qJ(4));
t1608 = cos(qJ(4));
t1553 = -t1608 * qJD(2) + t1604 * t1570;
t1555 = t1604 * qJD(2) + t1608 * t1570;
t1603 = sin(qJ(5));
t1607 = cos(qJ(5));
t1532 = t1607 * t1553 + t1603 * t1555;
t1654 = t1532 ^ 2;
t1534 = -t1603 * t1553 + t1607 * t1555;
t1653 = t1534 ^ 2;
t1652 = t1553 ^ 2;
t1651 = t1555 ^ 2;
t1650 = t1563 ^ 2;
t1649 = t1567 ^ 2;
t1648 = t1568 ^ 2;
t1647 = t1570 ^ 2;
t1646 = -2 * qJD(3);
t1643 = qJD(2) * t1568;
t1642 = qJD(2) * t1570;
t1641 = t1534 * t1532;
t1640 = t1555 * t1553;
t1639 = t1567 * t1553;
t1638 = t1570 * t1568;
t1637 = t1598 * t1612;
t1636 = t1605 * t1612;
t1635 = qJD(4) - t1567;
t1634 = qJD(5) - t1563;
t1585 = -t1610 * g(1) - t1606 * g(2);
t1617 = -t1612 * pkin(1) + qJDD(1) * pkin(6) + t1585;
t1561 = -t1605 * g(3) + t1609 * t1617;
t1535 = -pkin(2) * t1637 + t1576 * qJ(3) - qJD(2) * t1620 + t1561;
t1630 = qJD(2) * t1644;
t1632 = t1605 * qJDD(1);
t1575 = t1630 + t1632;
t1615 = t1605 * t1617;
t1613 = -t1615 - t1575 * qJ(3) + qJDD(2) * pkin(2) + (qJD(2) * qJ(3) * qJD(1) + pkin(2) * t1636 - g(3)) * t1609;
t1505 = t1601 * t1535 + t1568 * t1646 + t1600 * t1613;
t1546 = t1568 * pkin(3) - t1570 * pkin(7);
t1611 = qJD(2) ^ 2;
t1491 = -t1611 * pkin(3) + qJDD(2) * pkin(7) - t1568 * t1546 + t1505;
t1624 = t1600 * t1575 - t1601 * t1576;
t1540 = t1624 + t1642;
t1550 = t1601 * t1575 + t1600 * t1576;
t1628 = -t1550 + t1643;
t1499 = t1540 * pkin(3) + t1628 * pkin(7) - t1538;
t1468 = t1608 * t1491 + t1604 * t1499;
t1597 = t1605 ^ 2;
t1633 = t1597 + t1598;
t1467 = -t1604 * t1491 + t1608 * t1499;
t1622 = -t1604 * qJDD(2) - t1608 * t1550;
t1525 = -t1553 * qJD(4) - t1622;
t1625 = -t1608 * qJDD(2) + t1604 * t1550;
t1618 = t1555 * qJD(4) + t1625;
t1627 = -t1603 * t1525 - t1607 * t1618;
t1626 = t1600 * t1535 - t1601 * t1613;
t1623 = qJDD(4) + t1624;
t1619 = -qJDD(5) - t1623;
t1516 = t1623 - t1640;
t1490 = -qJDD(2) * pkin(3) - t1611 * pkin(7) + ((2 * qJD(3)) + t1546) * t1570 + t1626;
t1614 = -t1607 * t1525 + t1603 * t1618;
t1591 = t1609 * t1636;
t1590 = -t1611 - t1637;
t1589 = -t1597 * t1612 - t1611;
t1583 = -qJDD(2) + t1591;
t1582 = qJDD(2) + t1591;
t1581 = t1633 * t1612;
t1580 = -t1606 * qJDD(1) - t1610 * t1612;
t1579 = t1610 * qJDD(1) - t1606 * t1612;
t1578 = t1633 * qJDD(1);
t1577 = t1594 - 0.2e1 * t1631;
t1574 = 0.2e1 * t1630 + t1632;
t1572 = t1612 * pkin(6) + t1621;
t1562 = -t1611 - t1647;
t1560 = -t1609 * g(3) - t1615;
t1559 = t1609 * t1583 - t1605 * t1589;
t1558 = -t1605 * t1582 + t1609 * t1590;
t1557 = t1605 * t1583 + t1609 * t1589;
t1556 = t1609 * t1582 + t1605 * t1590;
t1549 = -qJDD(2) - t1638;
t1548 = qJDD(2) - t1638;
t1547 = -t1611 - t1648;
t1544 = t1567 * pkin(4) - t1555 * pkin(8);
t1543 = -t1550 - t1643;
t1541 = -t1624 + t1642;
t1539 = -t1647 - t1648;
t1537 = -t1605 * t1560 + t1609 * t1561;
t1536 = t1609 * t1560 + t1605 * t1561;
t1528 = -t1649 - t1651;
t1527 = t1601 * t1549 - t1600 * t1562;
t1526 = t1600 * t1549 + t1601 * t1562;
t1523 = -t1649 - t1652;
t1520 = -t1651 - t1652;
t1519 = t1601 * t1547 - t1600 * t1548;
t1518 = t1600 * t1547 + t1601 * t1548;
t1517 = -t1623 - t1640;
t1515 = -t1650 - t1653;
t1514 = t1601 * t1541 - t1600 * t1543;
t1513 = t1600 * t1541 + t1601 * t1543;
t1512 = t1635 * t1553 + t1622;
t1511 = t1525 - t1639;
t1510 = -t1635 * t1555 - t1625;
t1509 = (qJD(4) + t1567) * t1555 + t1625;
t1508 = -t1605 * t1526 + t1609 * t1527;
t1507 = t1609 * t1526 + t1605 * t1527;
t1506 = -t1650 - t1654;
t1504 = t1570 * t1646 - t1626;
t1503 = t1619 - t1641;
t1502 = -t1619 - t1641;
t1501 = t1608 * t1517 - t1604 * t1528;
t1500 = t1604 * t1517 + t1608 * t1528;
t1496 = -t1604 * t1516 + t1608 * t1523;
t1495 = t1608 * t1516 + t1604 * t1523;
t1494 = -t1605 * t1518 + t1609 * t1519;
t1493 = t1609 * t1518 + t1605 * t1519;
t1492 = -t1653 - t1654;
t1488 = -t1605 * t1513 + t1609 * t1514;
t1487 = t1609 * t1513 + t1605 * t1514;
t1486 = t1608 * t1510 - t1604 * t1512;
t1485 = t1604 * t1510 + t1608 * t1512;
t1484 = t1607 * t1503 - t1603 * t1515;
t1483 = t1603 * t1503 + t1607 * t1515;
t1482 = t1601 * t1501 + t1600 * t1511;
t1481 = t1600 * t1501 - t1601 * t1511;
t1480 = t1634 * t1532 + t1614;
t1479 = -t1655 * t1532 - t1614;
t1478 = -t1634 * t1534 + t1627;
t1477 = t1655 * t1534 - t1627;
t1476 = t1601 * t1496 + t1600 * t1509;
t1475 = t1600 * t1496 - t1601 * t1509;
t1474 = -t1600 * t1504 + t1601 * t1505;
t1473 = t1601 * t1504 + t1600 * t1505;
t1472 = -t1603 * t1502 + t1607 * t1506;
t1471 = t1607 * t1502 + t1603 * t1506;
t1470 = t1601 * t1486 + t1600 * t1520;
t1469 = t1600 * t1486 - t1601 * t1520;
t1466 = t1618 * pkin(4) - t1652 * pkin(8) + t1555 * t1544 + t1490;
t1465 = -t1604 * t1483 + t1608 * t1484;
t1464 = t1608 * t1483 + t1604 * t1484;
t1463 = -t1652 * pkin(4) - t1618 * pkin(8) - t1567 * t1544 + t1468;
t1462 = -t1605 * t1481 + t1609 * t1482;
t1461 = t1609 * t1481 + t1605 * t1482;
t1460 = (-t1525 - t1639) * pkin(8) + t1516 * pkin(4) + t1467;
t1459 = t1607 * t1478 - t1603 * t1480;
t1458 = t1603 * t1478 + t1607 * t1480;
t1457 = -t1605 * t1475 + t1609 * t1476;
t1456 = t1609 * t1475 + t1605 * t1476;
t1455 = -t1605 * t1473 + t1609 * t1474;
t1454 = t1609 * t1473 + t1605 * t1474;
t1453 = -t1604 * t1471 + t1608 * t1472;
t1452 = t1608 * t1471 + t1604 * t1472;
t1451 = -t1605 * t1469 + t1609 * t1470;
t1450 = t1609 * t1469 + t1605 * t1470;
t1449 = -t1604 * t1467 + t1608 * t1468;
t1448 = t1608 * t1467 + t1604 * t1468;
t1447 = t1601 * t1465 + t1600 * t1479;
t1446 = t1600 * t1465 - t1601 * t1479;
t1445 = t1601 * t1453 + t1600 * t1477;
t1444 = t1600 * t1453 - t1601 * t1477;
t1443 = t1601 * t1449 + t1600 * t1490;
t1442 = t1600 * t1449 - t1601 * t1490;
t1441 = t1603 * t1460 + t1607 * t1463;
t1440 = t1607 * t1460 - t1603 * t1463;
t1439 = -t1604 * t1458 + t1608 * t1459;
t1438 = t1608 * t1458 + t1604 * t1459;
t1437 = t1601 * t1439 + t1600 * t1492;
t1436 = t1600 * t1439 - t1601 * t1492;
t1435 = -t1605 * t1446 + t1609 * t1447;
t1434 = t1609 * t1446 + t1605 * t1447;
t1433 = -t1605 * t1444 + t1609 * t1445;
t1432 = t1609 * t1444 + t1605 * t1445;
t1431 = -t1605 * t1442 + t1609 * t1443;
t1430 = t1609 * t1442 + t1605 * t1443;
t1429 = -t1603 * t1440 + t1607 * t1441;
t1428 = t1607 * t1440 + t1603 * t1441;
t1427 = -t1605 * t1436 + t1609 * t1437;
t1426 = t1609 * t1436 + t1605 * t1437;
t1425 = -t1604 * t1428 + t1608 * t1429;
t1424 = t1608 * t1428 + t1604 * t1429;
t1423 = t1601 * t1425 + t1600 * t1466;
t1422 = t1600 * t1425 - t1601 * t1466;
t1421 = -t1605 * t1422 + t1609 * t1423;
t1420 = t1609 * t1422 + t1605 * t1423;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1580, -t1579, 0, -t1606 * t1584 + t1610 * t1585, 0, 0, 0, 0, 0, 0, t1610 * t1558 - t1606 * t1577, t1610 * t1559 + t1606 * t1574, t1610 * t1578 - t1606 * t1581, t1610 * t1537 - t1606 * t1572, 0, 0, 0, 0, 0, 0, t1610 * t1494 + t1606 * t1540, t1610 * t1508 - t1606 * t1628, t1610 * t1488 + t1606 * t1539, t1610 * t1455 - t1606 * t1538, 0, 0, 0, 0, 0, 0, t1610 * t1457 + t1606 * t1495, t1610 * t1462 + t1606 * t1500, t1610 * t1451 + t1606 * t1485, t1610 * t1431 + t1606 * t1448, 0, 0, 0, 0, 0, 0, t1610 * t1433 + t1606 * t1452, t1610 * t1435 + t1606 * t1464, t1610 * t1427 + t1606 * t1438, t1610 * t1421 + t1606 * t1424; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1579, t1580, 0, t1610 * t1584 + t1606 * t1585, 0, 0, 0, 0, 0, 0, t1606 * t1558 + t1610 * t1577, t1606 * t1559 - t1610 * t1574, t1606 * t1578 + t1610 * t1581, t1606 * t1537 + t1610 * t1572, 0, 0, 0, 0, 0, 0, t1606 * t1494 - t1610 * t1540, t1606 * t1508 + t1610 * t1628, t1606 * t1488 - t1610 * t1539, t1606 * t1455 + t1610 * t1538, 0, 0, 0, 0, 0, 0, t1606 * t1457 - t1610 * t1495, t1606 * t1462 - t1610 * t1500, t1606 * t1451 - t1610 * t1485, t1606 * t1431 - t1610 * t1448, 0, 0, 0, 0, 0, 0, t1606 * t1433 - t1610 * t1452, t1606 * t1435 - t1610 * t1464, t1606 * t1427 - t1610 * t1438, t1606 * t1421 - t1610 * t1424; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1556, t1557, 0, t1536, 0, 0, 0, 0, 0, 0, t1493, t1507, t1487, t1454, 0, 0, 0, 0, 0, 0, t1456, t1461, t1450, t1430, 0, 0, 0, 0, 0, 0, t1432, t1434, t1426, t1420; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1612, -qJDD(1), 0, t1585, 0, 0, 0, 0, 0, 0, t1558, t1559, t1578, t1537, 0, 0, 0, 0, 0, 0, t1494, t1508, t1488, t1455, 0, 0, 0, 0, 0, 0, t1457, t1462, t1451, t1431, 0, 0, 0, 0, 0, 0, t1433, t1435, t1427, t1421; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1612, 0, t1584, 0, 0, 0, 0, 0, 0, t1577, -t1574, t1581, t1572, 0, 0, 0, 0, 0, 0, -t1540, t1628, -t1539, t1538, 0, 0, 0, 0, 0, 0, -t1495, -t1500, -t1485, -t1448, 0, 0, 0, 0, 0, 0, -t1452, -t1464, -t1438, -t1424; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1556, t1557, 0, t1536, 0, 0, 0, 0, 0, 0, t1493, t1507, t1487, t1454, 0, 0, 0, 0, 0, 0, t1456, t1461, t1450, t1430, 0, 0, 0, 0, 0, 0, t1432, t1434, t1426, t1420; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1590, t1583, t1594, t1561, 0, 0, 0, 0, 0, 0, t1519, t1527, t1514, t1474, 0, 0, 0, 0, 0, 0, t1476, t1482, t1470, t1443, 0, 0, 0, 0, 0, 0, t1445, t1447, t1437, t1423; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1582, t1589, -t1632, t1560, 0, 0, 0, 0, 0, 0, t1518, t1526, t1513, t1473, 0, 0, 0, 0, 0, 0, t1475, t1481, t1469, t1442, 0, 0, 0, 0, 0, 0, t1444, t1446, t1436, t1422; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1577, t1574, -t1581, -t1572, 0, 0, 0, 0, 0, 0, t1540, -t1628, t1539, -t1538, 0, 0, 0, 0, 0, 0, t1495, t1500, t1485, t1448, 0, 0, 0, 0, 0, 0, t1452, t1464, t1438, t1424; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1547, t1549, t1541, t1505, 0, 0, 0, 0, 0, 0, t1496, t1501, t1486, t1449, 0, 0, 0, 0, 0, 0, t1453, t1465, t1439, t1425; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1548, t1562, t1543, t1504, 0, 0, 0, 0, 0, 0, -t1509, -t1511, -t1520, -t1490, 0, 0, 0, 0, 0, 0, -t1477, -t1479, -t1492, -t1466; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1540, -t1628, t1539, -t1538, 0, 0, 0, 0, 0, 0, t1495, t1500, t1485, t1448, 0, 0, 0, 0, 0, 0, t1452, t1464, t1438, t1424; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1523, t1517, t1510, t1468, 0, 0, 0, 0, 0, 0, t1472, t1484, t1459, t1429; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1516, t1528, t1512, t1467, 0, 0, 0, 0, 0, 0, t1471, t1483, t1458, t1428; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1509, t1511, t1520, t1490, 0, 0, 0, 0, 0, 0, t1477, t1479, t1492, t1466; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1506, t1503, t1478, t1441; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1502, t1515, t1480, t1440; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1477, t1479, t1492, t1466;];
f_new_reg = t1;
