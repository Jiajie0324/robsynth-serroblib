% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 20:22
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPRR9_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR9_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR9_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR9_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR9_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR9_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 20:22:13
% EndTime: 2019-12-31 20:22:29
% DurationCPUTime: 15.19s
% Computational Cost: add. (82964->671), mult. (190351->1029), div. (0->0), fcn. (135934->10), ass. (0->468)
t747 = sin(pkin(9));
t748 = cos(pkin(9));
t756 = cos(qJ(2));
t797 = qJD(1) * t756;
t752 = sin(qJ(2));
t798 = qJD(1) * t752;
t705 = t747 * t798 - t748 * t797;
t707 = t747 * t797 + t748 * t798;
t666 = t707 * t705;
t830 = qJDD(2) - t666;
t839 = t747 * t830;
t838 = t748 * t830;
t750 = sin(qJ(5));
t751 = sin(qJ(4));
t755 = cos(qJ(4));
t679 = -t755 * qJD(2) + t751 * t707;
t681 = t751 * qJD(2) + t755 * t707;
t754 = cos(qJ(5));
t626 = t754 * t679 + t750 * t681;
t629 = -t750 * t679 + t754 * t681;
t579 = t629 * t626;
t790 = qJD(1) * qJD(2);
t777 = t756 * t790;
t788 = t752 * qJDD(1);
t715 = t777 + t788;
t739 = t756 * qJDD(1);
t778 = t752 * t790;
t716 = t739 - t778;
t772 = t747 * t715 - t748 * t716;
t665 = qJDD(4) + t772;
t765 = qJDD(5) + t665;
t833 = -t579 + t765;
t837 = t750 * t833;
t637 = t681 * t679;
t831 = -t637 + t665;
t836 = t751 * t831;
t835 = t754 * t833;
t834 = t755 * t831;
t795 = qJD(2) * t707;
t638 = t772 + t795;
t701 = qJD(4) + t705;
t696 = qJD(5) + t701;
t604 = t696 * t626;
t668 = t748 * t715 + t747 * t716;
t773 = -t755 * qJDD(2) + t751 * t668;
t609 = -t681 * qJD(4) - t773;
t610 = -t679 * qJD(4) + t751 * qJDD(2) + t755 * t668;
t764 = t626 * qJD(5) - t750 * t609 - t754 * t610;
t832 = -t604 - t764;
t656 = t701 * t679;
t584 = -t656 - t610;
t583 = -t656 + t610;
t775 = -t754 * t609 + t750 * t610;
t501 = (qJD(5) - t696) * t629 + t775;
t580 = (qJD(4) - t701) * t681 + t773;
t745 = t756 ^ 2;
t759 = qJD(1) ^ 2;
t766 = qJD(2) * pkin(2) - qJ(3) * t798;
t753 = sin(qJ(1));
t757 = cos(qJ(1));
t725 = t753 * g(1) - t757 * g(2);
t767 = qJDD(1) * pkin(1) + t725;
t635 = t716 * pkin(2) + (qJ(3) * t745 + pkin(6)) * t759 - t766 * t798 - qJDD(3) + t767;
t621 = t626 ^ 2;
t622 = t629 ^ 2;
t829 = t679 ^ 2;
t678 = t681 ^ 2;
t695 = t696 ^ 2;
t700 = t701 ^ 2;
t703 = t705 ^ 2;
t704 = t707 ^ 2;
t828 = 2 * qJD(3);
t827 = pkin(3) * t747;
t726 = t757 * g(1) + t753 * g(2);
t763 = -t759 * pkin(1) + qJDD(1) * pkin(6) - t726;
t689 = -t752 * g(3) + t756 * t763;
t742 = t745 * t759;
t630 = -pkin(2) * t742 + t716 * qJ(3) - qJD(2) * t766 + t689;
t761 = t752 * t763;
t804 = t752 * t759;
t760 = -t761 - t715 * qJ(3) + qJDD(2) * pkin(2) + (pkin(2) * t804 + qJ(3) * t790 - g(3)) * t756;
t558 = -0.2e1 * qJD(3) * t705 + t748 * t630 + t747 * t760;
t657 = t705 * pkin(3) - t707 * pkin(7);
t758 = qJD(2) ^ 2;
t532 = -t758 * pkin(3) + qJDD(2) * pkin(7) - t705 * t657 + t558;
t796 = qJD(2) * t705;
t771 = -t668 + t796;
t550 = t638 * pkin(3) + t771 * pkin(7) - t635;
t474 = t751 * t532 - t755 * t550;
t450 = pkin(4) * t831 + t584 * pkin(8) - t474;
t475 = t755 * t532 + t751 * t550;
t645 = t701 * pkin(4) - t681 * pkin(8);
t455 = -pkin(4) * t829 + pkin(8) * t609 - t645 * t701 + t475;
t397 = -t754 * t450 + t455 * t750;
t398 = t750 * t450 + t754 * t455;
t360 = -t397 * t754 + t398 * t750;
t826 = t360 * t751;
t825 = t360 * t755;
t774 = t747 * t630 - t748 * t760;
t531 = -qJDD(2) * pkin(3) - t758 * pkin(7) + (t828 + t657) * t707 + t774;
t472 = -t609 * pkin(4) - pkin(8) * t829 + t681 * t645 + t531;
t824 = t472 * t750;
t823 = t472 * t754;
t557 = t707 * t828 + t774;
t494 = -t557 * t748 + t558 * t747;
t822 = t494 * t752;
t821 = t494 * t756;
t820 = t531 * t751;
t819 = t531 * t755;
t818 = t696 * t750;
t817 = t696 * t754;
t816 = t701 * t751;
t815 = t701 * t755;
t744 = t752 ^ 2;
t814 = t744 * t759;
t813 = t747 * t635;
t660 = qJDD(2) + t666;
t812 = t747 * t660;
t811 = t748 * t635;
t810 = t748 * t660;
t554 = t579 + t765;
t809 = t750 * t554;
t595 = t637 + t665;
t808 = t751 * t595;
t709 = t759 * pkin(6) + t767;
t807 = t752 * t709;
t734 = t756 * t804;
t723 = qJDD(2) + t734;
t806 = t752 * t723;
t724 = qJDD(2) - t734;
t805 = t752 * t724;
t803 = t754 * t554;
t802 = t755 * t595;
t801 = t756 * t709;
t800 = t756 * t724;
t799 = t744 + t745;
t794 = qJD(2) * t747;
t793 = qJD(2) * t748;
t789 = qJDD(2) * t757;
t787 = t753 * qJDD(1);
t786 = t757 * qJDD(1);
t785 = t747 * t579;
t784 = t748 * t579;
t783 = t753 * t666;
t782 = t757 * t666;
t781 = t747 * t637;
t780 = t748 * t637;
t779 = -pkin(3) * t748 - pkin(2);
t361 = t397 * t750 + t754 * t398;
t495 = t557 * t747 + t748 * t558;
t688 = t756 * g(3) + t761;
t633 = t752 * t688 + t756 * t689;
t677 = -t753 * t725 - t757 * t726;
t770 = t753 * t734;
t769 = t757 * t734;
t720 = -t753 * t759 + t786;
t768 = -pkin(5) * t720 - g(3) * t753;
t419 = -t474 * t755 + t475 * t751;
t420 = t474 * t751 + t475 * t755;
t632 = t756 * t688 - t752 * t689;
t676 = t757 * t725 - t753 * t726;
t640 = -t772 + t795;
t737 = t753 * qJDD(2);
t733 = -t742 - t758;
t732 = t742 - t758;
t731 = -t758 - t814;
t730 = t758 - t814;
t722 = t742 - t814;
t721 = t742 + t814;
t719 = t757 * t759 + t787;
t718 = t799 * qJDD(1);
t717 = t739 - 0.2e1 * t778;
t714 = 0.2e1 * t777 + t788;
t712 = t756 * t723;
t711 = t799 * t790;
t702 = -pkin(5) * t719 + t757 * g(3);
t694 = -t704 - t758;
t693 = -t704 + t758;
t692 = t703 - t758;
t691 = t756 * t715 - t744 * t790;
t690 = -t752 * t716 - t745 * t790;
t687 = -t752 * t731 - t800;
t686 = -t752 * t730 + t712;
t685 = t756 * t733 - t806;
t684 = t756 * t732 - t805;
t683 = t756 * t731 - t805;
t682 = t752 * t733 + t712;
t672 = t757 * t718 - t753 * t721;
t671 = t753 * t718 + t757 * t721;
t669 = -t752 * t714 + t756 * t717;
t664 = -t704 + t703;
t658 = -t758 - t703;
t655 = (-t705 * t748 + t707 * t747) * qJD(2);
t654 = (-t705 * t747 - t707 * t748) * qJD(2);
t653 = t757 * t687 + t753 * t714;
t652 = t757 * t685 - t753 * t717;
t651 = t753 * t687 - t757 * t714;
t650 = t753 * t685 + t757 * t717;
t649 = -t678 + t700;
t648 = -t700 + t829;
t647 = -pkin(6) * t683 - t801;
t646 = -pkin(6) * t682 - t807;
t644 = -pkin(1) * t683 + t689;
t643 = -pkin(1) * t682 + t688;
t642 = -t668 - t796;
t636 = -t703 - t704;
t634 = -t678 + t829;
t628 = t748 * t668 - t707 * t794;
t625 = t747 * t668 + t707 * t793;
t624 = t705 * t793 + t747 * t772;
t623 = t705 * t794 - t748 * t772;
t617 = -t678 - t700;
t616 = -t747 * t694 - t810;
t615 = -t747 * t693 + t838;
t614 = t748 * t692 - t812;
t613 = t748 * t694 - t812;
t612 = t748 * t693 + t839;
t611 = t747 * t692 + t810;
t607 = -t700 - t829;
t603 = t678 + t829;
t602 = t757 * t633 - t753 * t709;
t601 = t753 * t633 + t757 * t709;
t600 = -t622 + t695;
t599 = t621 - t695;
t598 = t748 * t658 - t839;
t597 = t747 * t658 + t838;
t593 = (-t679 * t755 + t681 * t751) * t701;
t592 = (t679 * t751 + t681 * t755) * t701;
t591 = -t752 * t654 + t756 * t655;
t590 = -t622 - t695;
t589 = t748 * t640 - t747 * t642;
t588 = -t748 * t638 + t747 * t771;
t587 = t747 * t640 + t748 * t642;
t586 = -t747 * t638 - t748 * t771;
t581 = (-qJD(4) - t701) * t681 - t773;
t578 = -t622 + t621;
t577 = t755 * t610 - t681 * t816;
t576 = -t751 * t610 - t681 * t815;
t575 = -t751 * t609 + t679 * t815;
t574 = -t755 * t609 - t679 * t816;
t573 = -qJ(3) * t613 - t811;
t572 = -t752 * t625 + t756 * t628;
t571 = -t752 * t623 + t756 * t624;
t570 = -t752 * t613 + t756 * t616;
t569 = -t752 * t612 + t756 * t615;
t568 = -t752 * t611 + t756 * t614;
t567 = t756 * t613 + t752 * t616;
t566 = t748 * t593 + t747 * t665;
t565 = t747 * t593 - t748 * t665;
t564 = -t695 - t621;
t563 = t755 * t648 - t808;
t562 = -t751 * t649 + t834;
t561 = -t751 * t648 - t802;
t560 = -t755 * t649 - t836;
t559 = -qJ(3) * t597 - t813;
t552 = -t751 * t617 - t802;
t551 = t755 * t617 - t808;
t547 = (-t626 * t754 + t629 * t750) * t696;
t546 = (-t626 * t750 - t629 * t754) * t696;
t545 = t755 * t607 - t836;
t544 = t751 * t607 + t834;
t543 = -t752 * t597 + t756 * t598;
t542 = t756 * t597 + t752 * t598;
t541 = pkin(2) * t771 + qJ(3) * t616 - t813;
t540 = -t621 - t622;
t539 = t748 * t577 + t781;
t538 = t748 * t575 - t781;
t537 = t747 * t577 - t780;
t536 = t747 * t575 + t780;
t535 = -pkin(2) * t638 + qJ(3) * t598 + t811;
t534 = t757 * t570 - t753 * t771;
t533 = t753 * t570 + t757 * t771;
t528 = -t629 * qJD(5) - t775;
t527 = t757 * t543 + t753 * t638;
t526 = -t752 * t587 + t756 * t589;
t525 = -t752 * t586 + t756 * t588;
t524 = t753 * t543 - t757 * t638;
t523 = t756 * t587 + t752 * t589;
t522 = -t580 * t755 - t751 * t584;
t521 = t755 * t581 - t751 * t583;
t520 = -t580 * t751 + t755 * t584;
t519 = -t751 * t581 - t755 * t583;
t518 = t754 * t599 - t809;
t517 = -t750 * t600 + t835;
t516 = t750 * t599 + t803;
t515 = t754 * t600 + t837;
t514 = -t750 * t590 - t803;
t513 = t748 * t563 - t747 * t580;
t512 = t748 * t562 - t747 * t584;
t511 = t754 * t590 - t809;
t510 = t747 * t563 + t748 * t580;
t509 = t747 * t562 + t748 * t584;
t508 = t748 * t552 + t583 * t747;
t507 = t747 * t552 - t583 * t748;
t506 = -t752 * t565 + t756 * t566;
t505 = -t604 + t764;
t500 = (qJD(5) + t696) * t629 + t775;
t499 = t545 * t748 - t581 * t747;
t498 = t545 * t747 + t581 * t748;
t497 = t526 * t757 + t636 * t753;
t496 = t526 * t753 - t636 * t757;
t493 = -t629 * t818 - t754 * t764;
t492 = t629 * t817 - t750 * t764;
t491 = -t528 * t750 + t626 * t817;
t490 = t528 * t754 + t626 * t818;
t489 = t521 * t748 - t634 * t747;
t488 = t521 * t747 + t634 * t748;
t487 = t564 * t754 - t837;
t486 = t564 * t750 + t835;
t485 = t522 * t748 - t603 * t747;
t484 = t522 * t747 + t603 * t748;
t483 = -t546 * t751 + t547 * t755;
t482 = -t546 * t755 - t547 * t751;
t481 = -pkin(1) * t523 - pkin(2) * t587;
t480 = -pkin(1) * t567 - pkin(2) * t613 + t558;
t479 = pkin(2) * t635 + qJ(3) * t495;
t478 = -pkin(7) * t551 + t819;
t477 = -t537 * t752 + t539 * t756;
t476 = -t536 * t752 + t538 * t756;
t473 = -pkin(7) * t544 + t820;
t471 = t483 * t748 + t747 * t765;
t470 = t483 * t747 - t748 * t765;
t469 = -pkin(1) * t542 - pkin(2) * t597 + t557;
t468 = -qJ(3) * t587 - t494;
t467 = -pkin(6) * t567 - t541 * t752 + t573 * t756;
t466 = -pkin(2) * t636 + qJ(3) * t589 + t495;
t465 = -t516 * t751 + t518 * t755;
t464 = -t515 * t751 + t517 * t755;
t463 = -t516 * t755 - t518 * t751;
t462 = -t515 * t755 - t517 * t751;
t461 = -pkin(6) * t542 - t535 * t752 + t559 * t756;
t460 = -pkin(3) * t551 + t475;
t459 = -t510 * t752 + t513 * t756;
t458 = -t509 * t752 + t512 * t756;
t457 = -t511 * t751 + t514 * t755;
t456 = t511 * t755 + t514 * t751;
t454 = -pkin(3) * t544 + t474;
t452 = -t507 * t752 + t508 * t756;
t451 = t507 * t756 + t508 * t752;
t447 = -t501 * t754 - t505 * t750;
t446 = -t500 * t754 - t750 * t832;
t445 = -t501 * t750 + t505 * t754;
t444 = -t500 * t750 + t754 * t832;
t443 = -t498 * t752 + t499 * t756;
t442 = t498 * t756 + t499 * t752;
t441 = t495 * t756 - t822;
t440 = t495 * t752 + t821;
t439 = -t492 * t751 + t493 * t755;
t438 = -t490 * t751 + t491 * t755;
t437 = -t492 * t755 - t493 * t751;
t436 = -t490 * t755 - t491 * t751;
t435 = -t488 * t752 + t489 * t756;
t434 = -t486 * t751 + t487 * t755;
t433 = t486 * t755 + t487 * t751;
t432 = -pkin(8) * t511 + t823;
t431 = t441 * t757 - t635 * t753;
t430 = t441 * t753 + t635 * t757;
t429 = -t484 * t752 + t485 * t756;
t428 = t484 * t756 + t485 * t752;
t427 = -pkin(8) * t486 + t824;
t426 = t439 * t748 + t785;
t425 = t438 * t748 - t785;
t424 = t439 * t747 - t784;
t423 = t438 * t747 + t784;
t422 = t452 * t757 + t551 * t753;
t421 = t452 * t753 - t551 * t757;
t418 = t443 * t757 + t544 * t753;
t417 = t443 * t753 - t544 * t757;
t416 = -t470 * t752 + t471 * t756;
t415 = t465 * t748 - t501 * t747;
t414 = t464 * t748 - t505 * t747;
t413 = t465 * t747 + t501 * t748;
t412 = t464 * t747 + t505 * t748;
t411 = t457 * t748 + t747 * t832;
t410 = t457 * t747 - t748 * t832;
t409 = -pkin(1) * t440 - pkin(2) * t494;
t408 = t429 * t757 + t520 * t753;
t407 = t429 * t753 - t520 * t757;
t406 = t434 * t748 + t500 * t747;
t405 = t434 * t747 - t500 * t748;
t404 = -pkin(4) * t832 + pkin(8) * t514 + t824;
t403 = t420 * t748 + t531 * t747;
t402 = t420 * t747 - t531 * t748;
t401 = -pkin(4) * t500 + pkin(8) * t487 - t823;
t400 = -pkin(7) * t520 - t419;
t399 = -pkin(6) * t523 - t466 * t752 + t468 * t756;
t395 = -t445 * t751 + t447 * t755;
t394 = -t444 * t751 + t446 * t755;
t393 = t445 * t755 + t447 * t751;
t392 = -t444 * t755 - t446 * t751;
t391 = -qJ(3) * t507 - t460 * t747 + t478 * t748;
t390 = -qJ(3) * t498 - t454 * t747 + t473 * t748;
t389 = -pkin(6) * t440 - qJ(3) * t821 - t479 * t752;
t388 = t394 * t748 - t578 * t747;
t387 = t394 * t747 + t578 * t748;
t386 = -pkin(1) * t451 - pkin(2) * t507 + pkin(3) * t583 - pkin(7) * t552 - t820;
t385 = -pkin(2) * t551 + qJ(3) * t508 + t460 * t748 + t478 * t747;
t384 = t395 * t748 + t540 * t747;
t383 = t395 * t747 - t540 * t748;
t382 = -pkin(1) * t442 - pkin(2) * t498 - pkin(3) * t581 - pkin(7) * t545 + t819;
t381 = -pkin(2) * t544 + qJ(3) * t499 + t454 * t748 + t473 * t747;
t380 = -t424 * t752 + t426 * t756;
t379 = -t423 * t752 + t425 * t756;
t378 = -qJ(3) * t484 + t400 * t748 + t520 * t827;
t377 = -t413 * t752 + t415 * t756;
t376 = -t412 * t752 + t414 * t756;
t375 = -t410 * t752 + t411 * t756;
t374 = t410 * t756 + t411 * t752;
t373 = -pkin(3) * t393 - pkin(4) * t445;
t372 = qJ(3) * t485 + t747 * t400 + t520 * t779;
t371 = -t405 * t752 + t406 * t756;
t370 = t405 * t756 + t406 * t752;
t369 = -pkin(3) * t456 - pkin(4) * t511 + t398;
t368 = -t402 * t752 + t403 * t756;
t367 = t402 * t756 + t403 * t752;
t366 = -pkin(3) * t433 - pkin(4) * t486 + t397;
t365 = -pkin(1) * t428 - pkin(2) * t484 - pkin(3) * t603 - pkin(7) * t522 - t420;
t364 = -pkin(7) * t456 - t404 * t751 + t432 * t755;
t363 = t375 * t757 + t456 * t753;
t362 = t375 * t753 - t456 * t757;
t359 = -pkin(7) * t433 - t401 * t751 + t427 * t755;
t358 = t371 * t757 + t433 * t753;
t357 = t371 * t753 - t433 * t757;
t356 = -qJ(3) * t402 + (-pkin(7) * t748 + t827) * t419;
t355 = -t387 * t752 + t388 * t756;
t354 = -pkin(4) * t472 + pkin(8) * t361;
t353 = t368 * t757 + t419 * t753;
t352 = t368 * t753 - t419 * t757;
t351 = -t383 * t752 + t384 * t756;
t350 = t383 * t756 + t384 * t752;
t349 = -pkin(8) * t445 - t360;
t348 = -pkin(4) * t540 + pkin(8) * t447 + t361;
t347 = -pkin(6) * t451 - t385 * t752 + t391 * t756;
t346 = -pkin(6) * t442 - t381 * t752 + t390 * t756;
t345 = qJ(3) * t403 + (-pkin(7) * t747 + t779) * t419;
t344 = -pkin(1) * t367 - pkin(2) * t402 + pkin(3) * t531 - pkin(7) * t420;
t343 = t351 * t757 + t393 * t753;
t342 = t351 * t753 - t393 * t757;
t341 = -pkin(6) * t428 - t372 * t752 + t378 * t756;
t340 = t361 * t755 - t826;
t339 = t361 * t751 + t825;
t338 = -qJ(3) * t410 + t364 * t748 - t369 * t747;
t337 = t340 * t748 + t472 * t747;
t336 = t340 * t747 - t472 * t748;
t335 = -pkin(1) * t374 - pkin(2) * t410 + pkin(3) * t832 - pkin(7) * t457 - t404 * t755 - t432 * t751;
t334 = -qJ(3) * t405 + t359 * t748 - t366 * t747;
t333 = -pkin(1) * t370 - pkin(2) * t405 + pkin(3) * t500 - pkin(7) * t434 - t401 * t755 - t427 * t751;
t332 = -pkin(2) * t456 + qJ(3) * t411 + t364 * t747 + t369 * t748;
t331 = -pkin(2) * t433 + qJ(3) * t406 + t359 * t747 + t366 * t748;
t330 = -pkin(3) * t339 - pkin(4) * t360;
t329 = -pkin(7) * t393 - t348 * t751 + t349 * t755;
t328 = -pkin(6) * t367 - t345 * t752 + t356 * t756;
t327 = -pkin(7) * t339 - pkin(8) * t825 - t354 * t751;
t326 = -t336 * t752 + t337 * t756;
t325 = t336 * t756 + t337 * t752;
t324 = -qJ(3) * t383 + t329 * t748 - t373 * t747;
t323 = -pkin(1) * t350 - pkin(2) * t383 + pkin(3) * t540 - pkin(7) * t395 - t348 * t755 - t349 * t751;
t322 = -pkin(2) * t393 + qJ(3) * t384 + t329 * t747 + t373 * t748;
t321 = -pkin(6) * t374 - t332 * t752 + t338 * t756;
t320 = -pkin(6) * t370 - t331 * t752 + t334 * t756;
t319 = t326 * t757 + t339 * t753;
t318 = t326 * t753 - t339 * t757;
t317 = -qJ(3) * t336 + t327 * t748 - t330 * t747;
t316 = -pkin(6) * t350 - t322 * t752 + t324 * t756;
t315 = -pkin(1) * t325 - pkin(2) * t336 + pkin(3) * t472 - pkin(7) * t340 + pkin(8) * t826 - t354 * t755;
t314 = -pkin(2) * t339 + qJ(3) * t337 + t327 * t747 + t330 * t748;
t313 = -pkin(6) * t325 - t314 * t752 + t317 * t756;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t719, -t720, 0, t677, 0, 0, 0, 0, 0, 0, t652, t653, t672, t602, 0, 0, 0, 0, 0, 0, t527, t534, t497, t431, 0, 0, 0, 0, 0, 0, t418, t422, t408, t353, 0, 0, 0, 0, 0, 0, t358, t363, t343, t319; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t720, -t719, 0, t676, 0, 0, 0, 0, 0, 0, t650, t651, t671, t601, 0, 0, 0, 0, 0, 0, t524, t533, t496, t430, 0, 0, 0, 0, 0, 0, t417, t421, t407, t352, 0, 0, 0, 0, 0, 0, t357, t362, t342, t318; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t682, t683, 0, -t632, 0, 0, 0, 0, 0, 0, t542, t567, t523, t440, 0, 0, 0, 0, 0, 0, t442, t451, t428, t367, 0, 0, 0, 0, 0, 0, t370, t374, t350, t325; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t720, 0, -t719, 0, t768, -t702, -t676, -pkin(5) * t676, t691 * t757 - t770, t669 * t757 - t722 * t753, t686 * t757 + t752 * t787, t690 * t757 + t770, t684 * t757 + t739 * t753, t711 * t757 + t737, -pkin(5) * t650 - t643 * t753 + t646 * t757, -pkin(5) * t651 - t644 * t753 + t647 * t757, -pkin(5) * t671 + t632 * t757, -pkin(5) * t601 - (pkin(1) * t753 - pkin(6) * t757) * t632, t572 * t757 + t783, t525 * t757 - t664 * t753, t569 * t757 - t642 * t753, t571 * t757 - t783, t568 * t757 + t640 * t753, t591 * t757 + t737, -pkin(5) * t524 + t461 * t757 - t469 * t753, -pkin(5) * t533 + t467 * t757 - t480 * t753, -pkin(5) * t496 + t399 * t757 - t481 * t753, -pkin(5) * t430 + t389 * t757 - t409 * t753, t477 * t757 - t576 * t753, t435 * t757 - t519 * t753, t458 * t757 - t560 * t753, t476 * t757 - t574 * t753, t459 * t757 - t561 * t753, t506 * t757 - t592 * t753, -pkin(5) * t417 + t346 * t757 - t382 * t753, -pkin(5) * t421 + t347 * t757 - t386 * t753, -pkin(5) * t407 + t341 * t757 - t365 * t753, -pkin(5) * t352 + t328 * t757 - t344 * t753, t380 * t757 - t437 * t753, t355 * t757 - t392 * t753, t376 * t757 - t462 * t753, t379 * t757 - t436 * t753, t377 * t757 - t463 * t753, t416 * t757 - t482 * t753, -pkin(5) * t357 + t320 * t757 - t333 * t753, -pkin(5) * t362 + t321 * t757 - t335 * t753, -pkin(5) * t342 + t316 * t757 - t323 * t753, -pkin(5) * t318 + t313 * t757 - t315 * t753; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t719, 0, t720, 0, t702, t768, t677, pkin(5) * t677, t691 * t753 + t769, t669 * t753 + t722 * t757, t686 * t753 - t752 * t786, t690 * t753 - t769, t684 * t753 - t756 * t786, t711 * t753 - t789, pkin(5) * t652 + t643 * t757 + t646 * t753, pkin(5) * t653 + t644 * t757 + t647 * t753, pkin(5) * t672 + t632 * t753, pkin(5) * t602 - (-pkin(1) * t757 - pkin(6) * t753) * t632, t572 * t753 - t782, t525 * t753 + t664 * t757, t569 * t753 + t642 * t757, t571 * t753 + t782, t568 * t753 - t640 * t757, t591 * t753 - t789, pkin(5) * t527 + t461 * t753 + t469 * t757, pkin(5) * t534 + t467 * t753 + t480 * t757, pkin(5) * t497 + t399 * t753 + t481 * t757, pkin(5) * t431 + t389 * t753 + t409 * t757, t477 * t753 + t576 * t757, t435 * t753 + t519 * t757, t458 * t753 + t560 * t757, t476 * t753 + t574 * t757, t459 * t753 + t561 * t757, t506 * t753 + t592 * t757, pkin(5) * t418 + t346 * t753 + t382 * t757, pkin(5) * t422 + t347 * t753 + t386 * t757, pkin(5) * t408 + t341 * t753 + t365 * t757, pkin(5) * t353 + t328 * t753 + t344 * t757, t380 * t753 + t437 * t757, t355 * t753 + t392 * t757, t376 * t753 + t462 * t757, t379 * t753 + t436 * t757, t377 * t753 + t463 * t757, t416 * t753 + t482 * t757, pkin(5) * t358 + t320 * t753 + t333 * t757, pkin(5) * t363 + t321 * t753 + t335 * t757, pkin(5) * t343 + t316 * t753 + t323 * t757, pkin(5) * t319 + t313 * t753 + t315 * t757; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t725, t726, 0, 0, (t715 + t777) * t752, t714 * t756 + t717 * t752, t730 * t756 + t806, (t716 - t778) * t756, t732 * t752 + t800, 0, pkin(1) * t717 + pkin(6) * t685 + t801, -pkin(1) * t714 + pkin(6) * t687 - t807, pkin(1) * t721 + pkin(6) * t718 + t633, pkin(1) * t709 + pkin(6) * t633, t625 * t756 + t628 * t752, t586 * t756 + t588 * t752, t612 * t756 + t615 * t752, t623 * t756 + t624 * t752, t611 * t756 + t614 * t752, t654 * t756 + t655 * t752, -pkin(1) * t638 + pkin(6) * t543 + t535 * t756 + t559 * t752, pkin(1) * t771 + pkin(6) * t570 + t541 * t756 + t573 * t752, -pkin(1) * t636 + pkin(6) * t526 + t466 * t756 + t468 * t752, pkin(1) * t635 + pkin(6) * t441 - qJ(3) * t822 + t479 * t756, t537 * t756 + t539 * t752, t488 * t756 + t489 * t752, t509 * t756 + t512 * t752, t536 * t756 + t538 * t752, t510 * t756 + t513 * t752, t565 * t756 + t566 * t752, -pkin(1) * t544 + pkin(6) * t443 + t381 * t756 + t390 * t752, -pkin(1) * t551 + pkin(6) * t452 + t385 * t756 + t391 * t752, -pkin(1) * t520 + pkin(6) * t429 + t372 * t756 + t378 * t752, -pkin(1) * t419 + pkin(6) * t368 + t345 * t756 + t356 * t752, t424 * t756 + t426 * t752, t387 * t756 + t388 * t752, t412 * t756 + t414 * t752, t423 * t756 + t425 * t752, t413 * t756 + t415 * t752, t470 * t756 + t471 * t752, -pkin(1) * t433 + pkin(6) * t371 + t331 * t756 + t334 * t752, -pkin(1) * t456 + pkin(6) * t375 + t332 * t756 + t338 * t752, -pkin(1) * t393 + pkin(6) * t351 + t322 * t756 + t324 * t752, -pkin(1) * t339 + pkin(6) * t326 + t314 * t756 + t317 * t752;];
tauB_reg = t1;
