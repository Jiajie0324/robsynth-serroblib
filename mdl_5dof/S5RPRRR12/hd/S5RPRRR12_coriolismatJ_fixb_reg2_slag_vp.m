% Calculate inertial parameters regressor of coriolis matrix for
% S5RPRRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:13
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RPRRR12_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR12_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR12_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRR12_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:13:14
% EndTime: 2019-12-31 19:13:22
% DurationCPUTime: 5.32s
% Computational Cost: add. (7070->361), mult. (12507->485), div. (0->0), fcn. (12952->6), ass. (0->279)
t316 = sin(qJ(4));
t317 = sin(qJ(3));
t303 = t316 * t317;
t319 = cos(qJ(4));
t320 = cos(qJ(3));
t433 = t319 * t320;
t288 = -t303 + t433;
t285 = t288 ^ 2;
t315 = sin(qJ(5));
t313 = t315 ^ 2;
t318 = cos(qJ(5));
t314 = t318 ^ 2;
t297 = t314 - t313;
t200 = t297 * t285;
t398 = qJD(3) + qJD(4);
t498 = t398 * t318;
t510 = t315 * t498;
t330 = 0.2e1 * t510 * t288;
t514 = -t200 * qJD(1) - t330;
t321 = -pkin(1) - pkin(6);
t501 = -pkin(7) + t321;
t289 = t501 * t317;
t283 = t319 * t289;
t374 = t501 * t320;
t363 = t316 * t374;
t497 = t283 + t363;
t506 = t497 * t318;
t488 = -t506 / 0.2e1;
t483 = t313 / 0.2e1;
t176 = (t483 - t314 / 0.2e1) * t288;
t128 = -t176 * qJD(1) + t510;
t302 = pkin(3) * t317 + qJ(2);
t473 = t288 * pkin(8);
t286 = t316 * t320 + t317 * t319;
t476 = t286 * pkin(4);
t360 = -t473 + t476;
t327 = t302 + t360;
t507 = t497 * t315;
t103 = -t318 * t327 + t507;
t513 = (-t103 + t507) * t288;
t104 = t315 * t327 + t506;
t512 = (-t104 + t506) * t288;
t479 = t318 / 0.2e1;
t481 = t315 / 0.2e1;
t340 = t103 * t481 + t104 * t479;
t486 = -t497 / 0.2e1;
t511 = (t486 + t340) * t288;
t477 = t497 * pkin(4);
t371 = t316 * t289 - t319 * t374;
t509 = t371 * t315;
t508 = t371 * t318;
t449 = t371 * t497;
t471 = t319 * pkin(3);
t305 = -pkin(4) - t471;
t444 = t286 * t305;
t505 = -t444 / 0.2e1 + t476 / 0.2e1;
t504 = t398 * t371;
t502 = 0.2e1 * t315;
t500 = t286 * t398;
t441 = t288 * t316;
t443 = t286 * t319;
t466 = qJD(3) * pkin(3);
t499 = (-t441 + t443) * t466;
t491 = t286 ^ 2;
t396 = t285 - t491;
t428 = t313 + t314;
t472 = t316 * pkin(3);
t304 = pkin(8) + t472;
t442 = t288 * t304;
t496 = -t442 / 0.2e1 + (-t443 / 0.2e1 + t441 / 0.2e1) * pkin(3) + t505;
t495 = t285 / 0.2e1 + t491 / 0.2e1;
t86 = (-0.1e1 + t428) * t288 * t286;
t430 = t86 * qJD(2);
t474 = t288 * pkin(4);
t475 = t286 * pkin(8);
t217 = t474 + t475;
t439 = t315 * t217;
t115 = t439 - t508;
t455 = t115 * t318;
t435 = t318 * t217;
t114 = t435 + t509;
t456 = t114 * t315;
t338 = t455 / 0.2e1 - t456 / 0.2e1;
t487 = t371 / 0.2e1;
t6 = t511 + (t487 + t338) * t286;
t494 = t6 * qJD(1) + t430;
t478 = pkin(3) * t320;
t197 = t217 + t478;
t440 = t315 * t197;
t110 = -t508 + t440;
t457 = t110 * t318;
t436 = t318 * t197;
t109 = t436 + t509;
t458 = t109 * t315;
t339 = -t457 / 0.2e1 + t458 / 0.2e1;
t4 = t511 + (t487 - t339) * t286;
t493 = t4 * qJD(1) + t430;
t383 = qJD(1) * t315 * t318;
t74 = t398 * t176 + t285 * t383;
t152 = -0.2e1 * t288 * t383 + t398 * t297;
t490 = pkin(4) / 0.2e1;
t489 = pkin(8) / 0.2e1;
t378 = -t283 / 0.2e1;
t485 = -t305 / 0.2e1;
t484 = t305 / 0.2e1;
t482 = -t315 / 0.2e1;
t480 = -t318 / 0.2e1;
t376 = -t371 / 0.2e1 + t487;
t377 = t497 / 0.2e1 + t486;
t32 = t376 * t286 + t377 * t288;
t470 = t32 * qJD(3);
t468 = pkin(3) * qJD(4);
t467 = pkin(4) * qJD(4);
t350 = t103 * t318 - t104 * t315;
t333 = t350 * t286;
t7 = (t109 * t318 + t110 * t315) * t288 + t333;
t463 = t7 * qJD(1);
t9 = (t114 * t318 + t115 * t315) * t288 + t333;
t462 = t9 * qJD(1);
t461 = qJD(1) * t350;
t183 = t315 * t288;
t54 = t103 * t286 - t183 * t371;
t460 = qJD(1) * t54;
t184 = t318 * t288;
t55 = -t104 * t286 + t184 * t371;
t459 = qJD(1) * t55;
t14 = t513 + (t109 - t509) * t286;
t454 = t14 * qJD(1);
t15 = t512 + (-t110 - t508) * t286;
t453 = t15 * qJD(1);
t16 = t513 + (t114 - t509) * t286;
t452 = t16 * qJD(1);
t17 = t512 + (-t115 - t508) * t286;
t451 = t17 * qJD(1);
t390 = -t471 / 0.2e1;
t362 = t390 + t485;
t323 = (-t304 / 0.2e1 + t472 / 0.2e1 + t489) * t288 + (-pkin(4) / 0.2e1 + t362) * t286;
t20 = t488 + t506 / 0.2e1 + t323 * t315;
t450 = t20 * qJD(1);
t432 = t32 * qJD(1);
t160 = t286 * t478 + t288 * t302;
t427 = qJD(1) * t160;
t161 = -t286 * t302 + t288 * t478;
t426 = qJD(1) * t161;
t425 = qJD(1) * t302;
t424 = qJD(2) * t286;
t423 = qJD(3) * t305;
t422 = qJD(4) * t302;
t421 = qJD(5) * t315;
t420 = qJD(5) * t318;
t343 = 0.1e1 / 0.2e1 + t495;
t116 = t343 * t315;
t419 = t116 * qJD(1);
t129 = t343 * t318;
t418 = t129 * qJD(1);
t131 = t396 * t315;
t417 = t131 * qJD(1);
t132 = t396 * t318;
t416 = t132 * qJD(1);
t415 = t396 * qJD(1);
t413 = t176 * qJD(5);
t177 = t315 * t286;
t412 = t177 * qJD(1);
t181 = t318 * t286;
t167 = t181 * qJD(1);
t201 = t428 * t288;
t410 = t201 * qJD(1);
t205 = t378 + t283 / 0.2e1;
t409 = t205 * qJD(1);
t282 = t433 / 0.2e1 - t303 / 0.2e1;
t408 = t282 * qJD(1);
t407 = t286 * qJD(1);
t406 = t288 * qJD(1);
t296 = t317 ^ 2 - t320 ^ 2;
t405 = t296 * qJD(1);
t404 = t317 * qJD(1);
t403 = t317 * qJD(3);
t402 = t320 * qJD(1);
t401 = t320 * qJD(3);
t397 = t4 * qJD(3) + t6 * qJD(4);
t395 = t316 * t466;
t394 = t316 * t468;
t391 = pkin(8) * t482;
t389 = qJ(2) * t404;
t388 = qJ(2) * t402;
t387 = t302 * t407;
t386 = t315 * t407;
t385 = t318 * t407;
t384 = t302 * t406;
t382 = t286 * t421;
t381 = t286 * t420;
t380 = t286 * t406;
t300 = t315 * t420;
t379 = t317 * t401;
t375 = t314 / 0.2e1 + t483;
t373 = pkin(3) * t398;
t372 = t428 * t319;
t207 = t398 * t288;
t368 = t398 * t315;
t366 = t285 * t300;
t361 = t316 * t373;
t359 = t375 * t304;
t358 = t375 * t319;
t357 = t286 * t207;
t355 = t288 * t500;
t8 = -t103 * t109 + t104 * t110 + t449;
t353 = t8 * qJD(1) + t4 * qJD(2);
t10 = -t103 * t114 + t104 * t115 + t449;
t352 = t10 * qJD(1) + t6 * qJD(2);
t56 = t302 * t478;
t351 = t56 * qJD(1) + t32 * qJD(2);
t349 = t457 - t458;
t348 = t455 - t456;
t347 = -t442 - t444;
t12 = (t115 / 0.2e1 - t110 / 0.2e1) * t318 + (-t114 / 0.2e1 + t109 / 0.2e1) * t315;
t281 = pkin(3) * t372;
t345 = -qJD(1) * t12 - qJD(3) * t281;
t344 = t288 * (-qJD(5) - t407);
t342 = t475 / 0.2e1 + t474 / 0.2e1;
t341 = t490 + t362;
t337 = t304 * t286 / 0.2e1 + t288 * t485;
t328 = t197 / 0.2e1 + t337;
t47 = t376 * t315 - t328 * t318;
t336 = -qJD(1) * t47 - t315 * t423;
t45 = t328 * t315 + t376 * t318;
t335 = -qJD(1) * t45 - t318 * t423;
t334 = t318 * t344;
t135 = qJD(5) * t282 + t380;
t23 = t377 * t315 + t323 * t318;
t332 = -qJD(1) * t23 - t315 * t395;
t331 = t217 / 0.2e1 + t342;
t171 = (t304 * t372 + t305 * t316) * pkin(3);
t322 = t338 * t304 + (t316 * t487 + t340 * t319) * pkin(3) + t497 * t484;
t2 = t477 / 0.2e1 + t339 * pkin(8) + t322;
t30 = (pkin(3) * t358 + t484 + t490) * t286 + (-t472 / 0.2e1 + t359 - t375 * pkin(8)) * t288;
t329 = t2 * qJD(1) + t30 * qJD(2) + t171 * qJD(3);
t238 = t341 * t315;
t51 = t331 * t318;
t326 = qJD(1) * t51 + qJD(3) * t238 + t315 * t467;
t239 = t341 * t318;
t49 = t331 * t315;
t325 = -qJD(1) * t49 + qJD(3) * t239 + t318 * t467;
t312 = qJ(2) * qJD(2);
t311 = qJD(1) * qJ(2);
t301 = t317 * t402;
t295 = t315 * t394;
t292 = t297 * qJD(5);
t273 = t281 * qJD(4);
t241 = pkin(4) * t480 + t305 * t479 + t318 * t390;
t240 = pkin(4) * t482 + t305 * t481 + t315 * t390;
t198 = t398 * t282;
t149 = t167 + t420;
t148 = -t412 - t421;
t134 = 0.2e1 * t378 - t363;
t130 = t479 + (t285 + t491) * t480;
t123 = t334 * t502;
t117 = t495 * t315 + t482;
t113 = t314 * t380 - t413;
t112 = t313 * t380 + t413;
t105 = t398 * t201;
t85 = qJD(5) * t181 - t416;
t84 = -qJD(5) * t177 + t417;
t72 = -t413 + (-t314 * t406 - t510) * t286;
t71 = t413 + (-t313 * t406 + t510) * t286;
t63 = t288 * t368 + t416;
t62 = t288 * t498 - t417;
t57 = (-qJD(5) + t407) * t184 * t502 - t297 * t500;
t53 = -t183 * qJD(5) - t286 * t498;
t52 = t509 + t435 / 0.2e1 - t342 * t318;
t50 = t508 - t439 / 0.2e1 + t342 * t315;
t48 = t509 + t436 / 0.2e1 - t337 * t318;
t46 = t508 - t440 / 0.2e1 + t337 * t315;
t29 = t288 * t359 + (-t441 / 0.2e1 + t286 * t358) * pkin(3) + t428 * t473 / 0.2e1 - t505;
t22 = t507 - pkin(8) * t184 / 0.2e1 + t496 * t318;
t21 = t288 * t391 + t496 * t315 + 0.2e1 * t488;
t19 = -t184 * qJD(5) + t286 * t368;
t11 = t338 - t339;
t1 = t457 * t489 + t109 * t391 - t477 / 0.2e1 + t322;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), t312, -t379, t296 * qJD(3), 0, t379, 0, 0, qJ(2) * t401 + qJD(2) * t317, -qJ(2) * t403 + qJD(2) * t320, 0, t312, -t357, -t398 * t396, 0, t355, 0, 0, qJD(3) * t160 + t288 * t422 + t424, qJD(2) * t288 + qJD(3) * t161 - t286 * t422, 0, qJD(2) * t302 + qJD(3) * t56, -t314 * t357 - t366, -t200 * qJD(5) + t286 * t330, t132 * t398 - t288 * t382, -t313 * t357 + t366, -t131 * t398 - t288 * t381, t355, qJD(3) * t14 + qJD(4) * t16 + qJD(5) * t55 + t318 * t424, qJD(3) * t15 + qJD(4) * t17 + qJD(5) * t54 - t315 * t424, -qJD(2) * t201 - qJD(3) * t7 - qJD(4) * t9, -qJD(2) * t350 + qJD(3) * t8 + qJD(4) * t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(1), t311, 0, 0, 0, 0, 0, 0, t404, t402, 0, t311, 0, 0, 0, 0, 0, 0, t407, t406, 0, t425 + t470, 0, 0, 0, 0, 0, 0, qJD(5) * t130 + t385, qJD(5) * t117 - t386, -t410, t397 - t461; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t301, t405, -t403, t301, -t401, 0, -t321 * t403 + t388, -t321 * t401 - t389, 0, 0, -t380, -t415, -t500, t380, -t207, 0, -qJD(3) * t497 + qJD(4) * t134 + t427, t426 + t504, t499, (-t316 * t371 - t319 * t497) * t466 + t351, t72, t57, t63, t71, t62, t135, t454 + (t315 * t347 - t506) * qJD(3) + t21 * qJD(4) + t48 * qJD(5), t453 + (t318 * t347 + t507) * qJD(3) + t22 * qJD(4) + t46 * qJD(5), qJD(3) * t349 + t11 * qJD(4) - t463, (t304 * t349 + t305 * t497) * qJD(3) + t1 * qJD(4) + t353; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t380, -t415, -t500, t380, -t207, 0, qJD(3) * t134 - qJD(4) * t497 + t384, -t387 + t504, 0, 0, t72, t57, t63, t71, t62, t135, t452 + t21 * qJD(3) + (t315 * t360 - t506) * qJD(4) + t52 * qJD(5), t451 + t22 * qJD(3) + (t318 * t360 + t507) * qJD(4) + t50 * qJD(5), t11 * qJD(3) + qJD(4) * t348 - t462, t1 * qJD(3) + (pkin(8) * t348 - t477) * qJD(4) + t352; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t74, t514, t315 * t344, t74, t334, t198, qJD(2) * t130 + qJD(3) * t48 + qJD(4) * t52 - qJD(5) * t104 + t459, qJD(2) * t117 + qJD(3) * t46 + qJD(4) * t50 + qJD(5) * t103 + t460, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(1), -t311, 0, 0, 0, 0, 0, 0, -t404, -t402, 0, -t311, 0, 0, 0, 0, 0, 0, -t407, -t406, 0, -t425 + t470, 0, 0, 0, 0, 0, 0, -qJD(5) * t129 - t385, qJD(5) * t116 + t386, t410, t397 + t461; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t398 * t86; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t403, -t401, 0, 0, 0, 0, 0, 0, 0, 0, -t500, -t207, 0, t432 - t499, 0, 0, 0, 0, 0, 0, t53, t19, t105, (t201 * t304 + t444) * qJD(3) + t29 * qJD(4) + t493; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t500, -t207, 0, 0, 0, 0, 0, 0, 0, 0, t53, t19, t105, t29 * qJD(3) + (pkin(8) * t201 - t476) * qJD(4) + t494; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t183 * t398 - t381 - t418, -t184 * t398 + t382 + t419, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t301, -t405, 0, -t301, 0, 0, -t388, t389, 0, 0, t380, t415, 0, -t380, 0, 0, qJD(4) * t205 - t427, -t426, 0, -t351, t113, t123, t85, t112, t84, -t135, qJD(4) * t20 + qJD(5) * t47 - t454, qJD(4) * t23 + qJD(5) * t45 - t453, qJD(4) * t12 + t463, qJD(4) * t2 - t353; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t432, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(4) * t30 - t493; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t394, -t319 * t468, 0, 0, t300, t292, 0, -t300, 0, 0, t305 * t421 - t318 * t394, t305 * t420 + t295, t273, t171 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t361 + t409, -t319 * t373, 0, 0, t300, t292, 0, -t300, 0, 0, t240 * qJD(5) - t318 * t361 + t450, qJD(5) * t241 + t295 - t332, t273 - t345, (-pkin(4) * t316 + pkin(8) * t372) * t468 + t329; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t128, t152, t149, -t128, t148, -t408, qJD(4) * t240 - t304 * t420 - t336, qJD(4) * t241 + t304 * t421 - t335, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t380, t415, 0, -t380, 0, 0, -qJD(3) * t205 - t384, t387, 0, 0, t113, t123, t85, t112, t84, -t135, -qJD(3) * t20 - qJD(5) * t51 - t452, -qJD(3) * t23 + qJD(5) * t49 - t451, -qJD(3) * t12 + t462, -qJD(3) * t2 - t352; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3) * t30 - t494; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t395 - t409, t319 * t466, 0, 0, t300, t292, 0, -t300, 0, 0, -qJD(5) * t238 + t318 * t395 - t450, -qJD(5) * t239 + t332, t345, -t329; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t300, t292, 0, -t300, 0, 0, -pkin(4) * t421, -pkin(4) * t420, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t128, t152, t149, -t128, t148, -t408, -pkin(8) * t420 - t326, pkin(8) * t421 - t325, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74, -t514, -t181 * t398 + t315 * t380, -t74, t177 * t398 + t318 * t380, t198, qJD(2) * t129 - qJD(3) * t47 + qJD(4) * t51 - t459, -qJD(2) * t116 - qJD(3) * t45 - qJD(4) * t49 - t460, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t418, -t419, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t128, -t152, -t167, t128, t412, t408, qJD(4) * t238 + t336, qJD(4) * t239 + t335, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t128, -t152, -t167, t128, t412, t408, t326, t325, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t3;
