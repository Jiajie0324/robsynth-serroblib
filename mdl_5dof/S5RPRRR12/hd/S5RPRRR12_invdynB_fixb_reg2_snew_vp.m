% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRRR12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:13
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRRR12_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR12_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR12_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR12_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR12_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRR12_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:13:16
% EndTime: 2019-12-31 19:13:26
% DurationCPUTime: 8.20s
% Computational Cost: add. (24858->492), mult. (49577->716), div. (0->0), fcn. (33032->8), ass. (0->330)
t529 = sin(qJ(4));
t523 = qJDD(3) + qJDD(4);
t530 = sin(qJ(3));
t533 = cos(qJ(4));
t534 = cos(qJ(3));
t489 = (t529 * t534 + t530 * t533) * qJD(1);
t572 = qJD(1) * t534;
t491 = -t529 * t530 * qJD(1) + t533 * t572;
t599 = t491 * t489;
t610 = t523 - t599;
t612 = t529 * t610;
t611 = t533 * t610;
t569 = qJD(1) * qJD(3);
t555 = t534 * t569;
t567 = t530 * qJDD(1);
t497 = -t555 - t567;
t556 = t530 * t569;
t565 = t534 * qJDD(1);
t498 = -t556 + t565;
t546 = t529 * t497 + t533 * t498;
t430 = -t489 * qJD(4) + t546;
t524 = qJD(3) + qJD(4);
t598 = t524 * t489;
t409 = t430 - t598;
t528 = sin(qJ(5));
t532 = cos(qJ(5));
t458 = t528 * t491 - t532 * t524;
t460 = t532 * t491 + t528 * t524;
t426 = t460 * t458;
t553 = -t533 * t497 + t529 * t498;
t429 = -t491 * qJD(4) - t553;
t541 = qJDD(5) - t429;
t607 = -t426 + t541;
t609 = t528 * t607;
t608 = t532 * t607;
t393 = -t458 * qJD(5) + t532 * t430 + t528 * t523;
t482 = qJD(5) + t489;
t436 = t482 * t458;
t375 = -t436 + t393;
t554 = t528 * t430 - t532 * t523;
t372 = (qJD(5) - t482) * t460 + t554;
t526 = t530 ^ 2;
t537 = qJD(1) ^ 2;
t543 = qJD(3) * pkin(3) - pkin(7) * t572;
t531 = sin(qJ(1));
t535 = cos(qJ(1));
t508 = t535 * g(1) + t531 * g(2);
t525 = qJDD(1) * qJ(2);
t544 = t508 - t525;
t604 = pkin(6) + pkin(1);
t606 = -t497 * pkin(3) - (pkin(7) * t526 + t604) * t537 + t543 * t572 - t544;
t456 = t458 ^ 2;
t457 = t460 ^ 2;
t480 = t482 ^ 2;
t487 = t489 ^ 2;
t488 = t491 ^ 2;
t605 = t524 ^ 2;
t603 = pkin(4) * t529;
t602 = qJDD(1) * pkin(1);
t601 = t482 * t528;
t600 = t482 * t532;
t597 = t524 * t529;
t596 = t524 * t533;
t595 = t526 * t537;
t527 = t534 ^ 2;
t594 = t527 * t537;
t507 = t531 * g(1) - t535 * g(2);
t547 = qJDD(2) - t507;
t542 = -t537 * qJ(2) + t547;
t477 = -t604 * qJDD(1) + t542;
t452 = -t534 * g(3) + t530 * t477;
t423 = -pkin(3) * t595 + t497 * pkin(7) - qJD(3) * t543 + t452;
t575 = t534 * t537;
t578 = t534 * t477;
t538 = qJDD(3) * pkin(3) - t498 * pkin(7) + t578 + (-pkin(3) * t575 - pkin(7) * t569 + g(3)) * t530;
t380 = t529 * t423 - t533 * t538;
t447 = t489 * pkin(4) - t491 * pkin(8);
t341 = -t523 * pkin(4) - t605 * pkin(8) + t491 * t447 + t380;
t593 = t528 * t341;
t383 = t426 + t541;
t592 = t528 * t383;
t568 = qJD(2) * qJD(1);
t563 = -0.2e1 * t568;
t424 = t563 - t606;
t591 = t529 * t424;
t445 = t523 + t599;
t590 = t529 * t445;
t381 = t533 * t423 + t529 * t538;
t325 = -t533 * t380 + t529 * t381;
t589 = t530 * t325;
t472 = t604 * t537 + t544 + t563;
t588 = t530 * t472;
t561 = t530 * t575;
t505 = qJDD(3) + t561;
t587 = t530 * t505;
t506 = qJDD(3) - t561;
t586 = t530 * t506;
t573 = t526 + t527;
t500 = t573 * qJDD(1);
t585 = t531 * t500;
t584 = t532 * t341;
t583 = t532 * t383;
t582 = t533 * t424;
t581 = t533 * t445;
t580 = t534 * t325;
t579 = t534 * t472;
t577 = t534 * t505;
t576 = t534 * t506;
t574 = t535 * t500;
t521 = 0.2e1 * t568;
t339 = t521 - t409 * pkin(8) + (t524 * t491 - t429) * pkin(4) + t606;
t342 = -t605 * pkin(4) + t523 * pkin(8) - t489 * t447 + t381;
t299 = t528 * t339 + t532 * t342;
t571 = qJD(4) + t524;
t566 = t531 * qJDD(1);
t564 = t535 * qJDD(1);
t562 = t529 * t426;
t560 = t531 * t599;
t559 = t533 * t426;
t558 = t535 * t599;
t557 = -pkin(4) * t533 - pkin(3);
t298 = -t532 * t339 + t528 * t342;
t272 = t528 * t298 + t532 * t299;
t326 = t529 * t380 + t533 * t381;
t479 = -t537 * pkin(1) + t521 - t544;
t481 = -t542 + t602;
t440 = t535 * t479 - t531 * t481;
t462 = -t531 * t507 - t535 * t508;
t551 = t531 * t561;
t550 = t535 * t561;
t501 = -t531 * t537 + t564;
t549 = pkin(5) * t501 + t531 * g(3);
t502 = t535 * t537 + t566;
t548 = -pkin(5) * t502 + t535 * g(3);
t451 = t530 * g(3) + t578;
t271 = -t532 * t298 + t528 * t299;
t413 = t534 * t451 + t530 * t452;
t414 = -t530 * t451 + t534 * t452;
t437 = t531 * t479 + t535 * t481;
t461 = t535 * t507 - t531 * t508;
t540 = (-qJD(4) + t524) * t491 - t553;
t536 = qJD(3) ^ 2;
t512 = -t536 - t594;
t511 = t536 - t594;
t510 = -t536 - t595;
t509 = -t536 + t595;
t504 = (-t526 + t527) * t537;
t503 = t573 * t537;
t499 = -0.2e1 * t556 + t565;
t496 = 0.2e1 * t555 + t567;
t494 = t573 * t569;
t476 = -t488 + t605;
t475 = t487 - t605;
t474 = -t530 * t498 - t527 * t569;
t473 = -t534 * t497 - t526 * t569;
t469 = -t488 - t605;
t468 = -t530 * t512 - t577;
t467 = t534 * t510 - t586;
t466 = t534 * t512 - t587;
t465 = -t534 * t511 - t586;
t464 = t530 * t510 + t576;
t463 = -t530 * t509 - t577;
t455 = -t535 * t503 - t585;
t454 = -t531 * t503 + t574;
t450 = t530 * t496 - t534 * t499;
t448 = t488 - t487;
t443 = -t605 - t487;
t442 = t531 * t466 + t535 * t499;
t441 = t531 * t464 + t535 * t496;
t439 = -t535 * t466 + t531 * t499;
t438 = -t535 * t464 + t531 * t496;
t435 = -t457 + t480;
t434 = t456 - t480;
t433 = (-t489 * t533 + t491 * t529) * t524;
t432 = (-t489 * t529 - t491 * t533) * t524;
t431 = -t487 - t488;
t425 = -t457 + t456;
t422 = -t457 - t480;
t418 = t533 * t475 - t590;
t417 = -t529 * t476 + t611;
t416 = t529 * t475 + t581;
t415 = t533 * t476 + t612;
t412 = -t529 * t469 - t581;
t411 = t533 * t469 - t590;
t410 = t430 + t598;
t408 = -t571 * t489 + t546;
t405 = t571 * t491 + t553;
t404 = -t480 - t456;
t403 = t533 * t430 - t491 * t597;
t402 = t529 * t430 + t491 * t596;
t401 = -t529 * t429 + t489 * t596;
t400 = t533 * t429 + t489 * t597;
t399 = -pkin(2) * t503 - t414;
t398 = t533 * t443 - t612;
t397 = t529 * t443 + t611;
t396 = t456 + t457;
t395 = pkin(2) * t466 - qJ(2) * t468 - t452;
t394 = pkin(2) * t464 - qJ(2) * t467 + t451;
t392 = -t460 * qJD(5) - t554;
t391 = pkin(2) * t496 - t604 * t467 - t579;
t390 = pkin(2) * t499 - t604 * t468 + t588;
t389 = (-t458 * t532 + t460 * t528) * t482;
t388 = (-t458 * t528 - t460 * t532) * t482;
t387 = t531 * t413 - t535 * t472;
t386 = -t535 * t413 - t531 * t472;
t385 = -t534 * t432 - t530 * t433;
t379 = -pkin(7) * t411 - t582;
t376 = -t436 - t393;
t373 = (-qJD(5) - t482) * t460 - t554;
t371 = pkin(2) * t413 - qJ(2) * t414;
t370 = -t534 * t416 - t530 * t418;
t369 = -t534 * t415 - t530 * t417;
t368 = t532 * t393 - t460 * t601;
t367 = t528 * t393 + t460 * t600;
t366 = -t528 * t392 + t458 * t600;
t365 = t532 * t392 + t458 * t601;
t364 = -pkin(7) * t397 - t591;
t363 = -t530 * t411 + t534 * t412;
t362 = t534 * t411 + t530 * t412;
t361 = t529 * t410 + t533 * t540;
t360 = -t533 * t405 - t529 * t409;
t359 = -t533 * t410 + t529 * t540;
t358 = -t529 * t405 + t533 * t409;
t357 = t533 * t389 + t529 * t541;
t356 = t529 * t389 - t533 * t541;
t355 = t532 * t434 - t592;
t354 = -t528 * t435 + t608;
t353 = t528 * t434 + t583;
t352 = t532 * t435 + t609;
t351 = -pkin(2) * t472 - t604 * t414;
t350 = -t534 * t402 - t530 * t403;
t349 = -t534 * t400 - t530 * t401;
t348 = -t530 * t397 + t534 * t398;
t347 = t534 * t397 + t530 * t398;
t346 = -t528 * t422 - t583;
t345 = t532 * t422 - t592;
t344 = t532 * t404 - t609;
t343 = t528 * t404 + t608;
t338 = -pkin(3) * t408 + pkin(7) * t412 - t591;
t337 = t533 * t368 + t562;
t336 = t533 * t366 - t562;
t335 = t529 * t368 - t559;
t334 = t529 * t366 + t559;
t331 = -pkin(3) * t405 + pkin(7) * t398 + t582;
t330 = t531 * t362 + t535 * t408;
t329 = -t535 * t362 + t531 * t408;
t328 = t531 * t347 + t535 * t405;
t327 = -t535 * t347 + t531 * t405;
t324 = -t372 * t532 - t528 * t376;
t323 = t532 * t373 - t528 * t375;
t322 = -t372 * t528 + t532 * t376;
t321 = t528 * t373 + t532 * t375;
t320 = -t530 * t359 + t534 * t361;
t319 = t534 * t359 + t530 * t361;
t318 = -t534 * t358 - t530 * t360;
t317 = t533 * t355 - t529 * t372;
t316 = t533 * t354 - t529 * t376;
t315 = t529 * t355 + t533 * t372;
t314 = t529 * t354 + t533 * t376;
t313 = -t534 * t356 - t530 * t357;
t312 = t533 * t346 + t375 * t529;
t311 = t529 * t346 - t375 * t533;
t310 = pkin(3) * t424 + pkin(7) * t326;
t309 = t533 * t344 - t529 * t373;
t308 = t529 * t344 + t533 * t373;
t307 = t533 * t323 - t529 * t425;
t306 = t529 * t323 + t533 * t425;
t305 = t531 * t319 + t535 * t431;
t304 = -t535 * t319 + t531 * t431;
t303 = t533 * t324 - t529 * t396;
t302 = t529 * t324 + t533 * t396;
t301 = -pkin(8) * t345 + t584;
t300 = -pkin(8) * t343 + t593;
t296 = -t534 * t335 - t530 * t337;
t295 = -t534 * t334 - t530 * t336;
t294 = -pkin(7) * t359 - t325;
t293 = -pkin(3) * t431 + pkin(7) * t361 + t326;
t292 = pkin(2) * t362 + pkin(3) * t411 - qJ(2) * t363 - t381;
t291 = t534 * t326 - t589;
t290 = t530 * t326 + t580;
t289 = pkin(2) * t347 + pkin(3) * t397 - qJ(2) * t348 - t380;
t288 = -pkin(4) * t345 + t299;
t287 = -pkin(4) * t343 + t298;
t286 = t531 * t290 - t535 * t424;
t285 = -t535 * t290 - t531 * t424;
t284 = -t534 * t315 - t530 * t317;
t283 = -t534 * t314 - t530 * t316;
t282 = -t530 * t311 + t534 * t312;
t281 = t534 * t311 + t530 * t312;
t280 = -t530 * t308 + t534 * t309;
t279 = t534 * t308 + t530 * t309;
t278 = -t534 * t306 - t530 * t307;
t277 = pkin(2) * t408 - t534 * t338 - t604 * t363 - t530 * t379;
t276 = -t530 * t302 + t534 * t303;
t275 = t534 * t302 + t530 * t303;
t274 = pkin(2) * t319 + pkin(3) * t359 - qJ(2) * t320;
t273 = pkin(2) * t405 - t534 * t331 - t604 * t348 - t530 * t364;
t270 = t531 * t281 + t535 * t345;
t269 = -t535 * t281 + t531 * t345;
t268 = t531 * t279 + t535 * t343;
t267 = -t535 * t279 + t531 * t343;
t266 = t533 * t272 + t529 * t341;
t265 = t529 * t272 - t533 * t341;
t264 = t531 * t275 + t535 * t322;
t263 = -t535 * t275 + t531 * t322;
t262 = -pkin(8) * t322 - t271;
t261 = -pkin(7) * t311 - t529 * t288 + t533 * t301;
t260 = -pkin(7) * t308 - t529 * t287 + t533 * t300;
t259 = pkin(2) * t290 + pkin(3) * t325 - qJ(2) * t291;
t258 = -pkin(3) * t345 + pkin(7) * t312 + t533 * t288 + t529 * t301;
t257 = -pkin(3) * t343 + pkin(7) * t309 + t533 * t287 + t529 * t300;
t256 = pkin(2) * t431 - t534 * t293 - t530 * t294 - t604 * t320;
t255 = -pkin(7) * t302 + t533 * t262 + t322 * t603;
t254 = -pkin(2) * t424 + pkin(7) * t589 - t604 * t291 - t534 * t310;
t253 = pkin(7) * t303 + t529 * t262 + t557 * t322;
t252 = -t530 * t265 + t534 * t266;
t251 = t534 * t265 + t530 * t266;
t250 = pkin(2) * t281 + pkin(3) * t311 - pkin(4) * t375 + pkin(8) * t346 - qJ(2) * t282 + t593;
t249 = pkin(2) * t279 + pkin(3) * t308 + pkin(4) * t373 + pkin(8) * t344 - qJ(2) * t280 - t584;
t248 = -pkin(7) * t265 + (-pkin(8) * t533 + t603) * t271;
t247 = t531 * t251 + t535 * t271;
t246 = -t535 * t251 + t531 * t271;
t245 = pkin(2) * t275 + pkin(3) * t302 + pkin(4) * t396 + pkin(8) * t324 - qJ(2) * t276 + t272;
t244 = pkin(7) * t266 + (-pkin(8) * t529 + t557) * t271;
t243 = pkin(2) * t345 - t534 * t258 - t530 * t261 - t604 * t282;
t242 = pkin(2) * t343 - t534 * t257 - t530 * t260 - t604 * t280;
t241 = pkin(2) * t322 - t534 * t253 - t530 * t255 - t604 * t276;
t240 = pkin(2) * t251 + pkin(3) * t265 - pkin(4) * t341 + pkin(8) * t272 - qJ(2) * t252;
t239 = pkin(2) * t271 - t534 * t244 - t530 * t248 - t604 * t252;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t502, -t501, 0, t462, 0, 0, 0, 0, 0, 0, 0, t502, t501, t440, 0, 0, 0, 0, 0, 0, t441, t442, t455, t387, 0, 0, 0, 0, 0, 0, t328, t330, t305, t286, 0, 0, 0, 0, 0, 0, t268, t270, t264, t247; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t501, -t502, 0, t461, 0, 0, 0, 0, 0, 0, 0, -t501, t502, t437, 0, 0, 0, 0, 0, 0, t438, t439, t454, t386, 0, 0, 0, 0, 0, 0, t327, t329, t304, t285, 0, 0, 0, 0, 0, 0, t267, t269, t263, t246; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t467, t468, 0, t414, 0, 0, 0, 0, 0, 0, t348, t363, t320, t291, 0, 0, 0, 0, 0, 0, t280, t282, t276, t252; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t501, 0, -t502, 0, -t549, -t548, -t461, -pkin(5) * t461, 0, -t501, t502, 0, 0, 0, -t437, t549, t548, -pkin(5) * t437 + (-pkin(1) * t531 + qJ(2) * t535) * g(3), -t531 * t474 + t550, -t531 * t450 + t535 * t504, -t531 * t465 + t534 * t564, -t531 * t473 - t550, -t531 * t463 - t530 * t564, t535 * qJDD(3) - t531 * t494, -pkin(5) * t438 - t531 * t391 + t535 * t394, -pkin(5) * t439 - t531 * t390 + t535 * t395, -pkin(2) * t574 - pkin(5) * t454 - t531 * t399, -pkin(5) * t386 - t531 * t351 + t535 * t371, -t531 * t350 + t558, -t531 * t318 + t535 * t448, -t531 * t369 + t535 * t410, -t531 * t349 - t558, -t531 * t370 + t535 * t540, -t531 * t385 + t535 * t523, -pkin(5) * t327 - t531 * t273 + t535 * t289, -pkin(5) * t329 - t531 * t277 + t535 * t292, -pkin(5) * t304 - t531 * t256 + t535 * t274, -pkin(5) * t285 - t531 * t254 + t535 * t259, -t531 * t296 + t535 * t367, -t531 * t278 + t535 * t321, -t531 * t283 + t535 * t352, -t531 * t295 + t535 * t365, -t531 * t284 + t535 * t353, -t531 * t313 + t535 * t388, -pkin(5) * t267 - t531 * t242 + t535 * t249, -pkin(5) * t269 - t531 * t243 + t535 * t250, -pkin(5) * t263 - t531 * t241 + t535 * t245, -pkin(5) * t246 - t531 * t239 + t535 * t240; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t502, 0, t501, 0, t548, -t549, t462, pkin(5) * t462, 0, -t502, -t501, 0, 0, 0, t440, -t548, t549, pkin(5) * t440 + (pkin(1) * t535 + qJ(2) * t531) * g(3), t535 * t474 + t551, t535 * t450 + t531 * t504, t535 * t465 + t531 * t565, t535 * t473 - t551, t535 * t463 - t530 * t566, t531 * qJDD(3) + t535 * t494, pkin(5) * t441 + t535 * t391 + t531 * t394, pkin(5) * t442 + t535 * t390 + t531 * t395, -pkin(2) * t585 + pkin(5) * t455 + t535 * t399, pkin(5) * t387 + t535 * t351 + t531 * t371, t535 * t350 + t560, t535 * t318 + t531 * t448, t535 * t369 + t531 * t410, t535 * t349 - t560, t535 * t370 + t531 * t540, t535 * t385 + t531 * t523, pkin(5) * t328 + t535 * t273 + t531 * t289, pkin(5) * t330 + t535 * t277 + t531 * t292, pkin(5) * t305 + t535 * t256 + t531 * t274, pkin(5) * t286 + t535 * t254 + t531 * t259, t535 * t296 + t531 * t367, t535 * t278 + t531 * t321, t535 * t283 + t531 * t352, t535 * t295 + t531 * t365, t535 * t284 + t531 * t353, t535 * t313 + t531 * t388, pkin(5) * t268 + t535 * t242 + t531 * t249, pkin(5) * t270 + t535 * t243 + t531 * t250, pkin(5) * t264 + t535 * t241 + t531 * t245, pkin(5) * t247 + t535 * t239 + t531 * t240; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t507, t508, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t547 - 0.2e1 * t602, -t508 + t521 + 0.2e1 * t525, pkin(1) * t481 + qJ(2) * t479, (t498 - t556) * t534, -t534 * t496 - t530 * t499, -t530 * t511 + t576, (-t497 + t555) * t530, t534 * t509 - t587, 0, qJ(2) * t496 - t604 * t464 - t588, qJ(2) * t499 - t604 * t466 - t579, -qJ(2) * t503 + t604 * t500 - t413, -qJ(2) * t472 - t604 * t413, -t530 * t402 + t534 * t403, -t530 * t358 + t534 * t360, -t530 * t415 + t534 * t417, -t530 * t400 + t534 * t401, -t530 * t416 + t534 * t418, -t530 * t432 + t534 * t433, qJ(2) * t405 - t530 * t331 - t604 * t347 + t534 * t364, qJ(2) * t408 - t530 * t338 - t604 * t362 + t534 * t379, qJ(2) * t431 - t530 * t293 + t534 * t294 - t604 * t319, -pkin(7) * t580 - qJ(2) * t424 - t604 * t290 - t530 * t310, -t530 * t335 + t534 * t337, -t530 * t306 + t534 * t307, -t530 * t314 + t534 * t316, -t530 * t334 + t534 * t336, -t530 * t315 + t534 * t317, -t530 * t356 + t534 * t357, qJ(2) * t343 - t530 * t257 + t534 * t260 - t604 * t279, qJ(2) * t345 - t530 * t258 + t534 * t261 - t604 * t281, qJ(2) * t322 - t530 * t253 + t534 * t255 - t604 * t275, qJ(2) * t271 - t530 * t244 + t534 * t248 - t604 * t251;];
tauB_reg = t1;
