% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRRR12
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:13
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRRR12_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR12_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR12_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR12_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR12_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRR12_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:13:26
% EndTime: 2019-12-31 19:13:38
% DurationCPUTime: 12.47s
% Computational Cost: add. (50571->594), mult. (100920->745), div. (0->0), fcn. (66963->8), ass. (0->383)
t935 = sin(qJ(4));
t936 = sin(qJ(3));
t939 = cos(qJ(4));
t940 = cos(qJ(3));
t892 = (t935 * t940 + t936 * t939) * qJD(1);
t1018 = qJD(1) * t940;
t894 = -t935 * t936 * qJD(1) + t939 * t1018;
t1033 = t894 * t892;
t929 = qJDD(3) + qJDD(4);
t1057 = t929 - t1033;
t1059 = t1057 * t935;
t1058 = t1057 * t939;
t930 = qJD(3) + qJD(4);
t1026 = t930 * t892;
t1017 = qJD(1) * qJD(3);
t1003 = t940 * t1017;
t1015 = t936 * qJDD(1);
t901 = -t1003 - t1015;
t1004 = t936 * t1017;
t925 = t940 * qJDD(1);
t902 = t925 - t1004;
t833 = -qJD(4) * t892 + t901 * t935 + t902 * t939;
t813 = t833 - t1026;
t880 = t930 * t894;
t989 = t939 * t901 - t902 * t935;
t964 = qJD(4) * t894 - t989;
t809 = t880 + t964;
t934 = sin(qJ(5));
t938 = cos(qJ(5));
t856 = t894 * t934 - t938 * t930;
t858 = t894 * t938 + t930 * t934;
t830 = t858 * t856;
t831 = qJDD(5) + t964;
t1054 = -t830 + t831;
t1056 = t1054 * t934;
t1055 = t1054 * t938;
t1051 = pkin(6) + pkin(1);
t932 = t936 ^ 2;
t943 = qJD(1) ^ 2;
t966 = qJD(3) * pkin(3) - pkin(7) * t1018;
t937 = sin(qJ(1));
t941 = cos(qJ(1));
t912 = g(1) * t941 + g(2) * t937;
t931 = qJDD(1) * qJ(2);
t967 = t912 - t931;
t1053 = -pkin(3) * t901 + t966 * t1018 - (pkin(7) * t932 + t1051) * t943 - t967;
t1016 = qJD(2) * qJD(1);
t927 = 0.2e1 * t1016;
t724 = pkin(4) * t809 - pkin(8) * t813 + t1053 + t927;
t1052 = t930 ^ 2;
t1023 = t932 * t943;
t911 = g(1) * t937 - t941 * g(2);
t979 = qJDD(2) - t911;
t959 = -qJ(2) * t943 + t979;
t947 = -t1051 * qJDD(1) + t959;
t853 = t940 * g(3) - t936 * t947;
t827 = -pkin(3) * t1023 + t901 * pkin(7) - qJD(3) * t966 - t853;
t1021 = t940 * t943;
t946 = t940 * t947;
t944 = t946 - t902 * pkin(7) + qJDD(3) * pkin(3) + (-pkin(3) * t1021 - pkin(7) * t1017 + g(3)) * t936;
t780 = t939 * t827 + t935 * t944;
t846 = pkin(4) * t892 - pkin(8) * t894;
t729 = -pkin(4) * t1052 + pkin(8) * t929 - t846 * t892 + t780;
t683 = -t938 * t724 + t729 * t934;
t684 = t724 * t934 + t729 * t938;
t650 = t934 * t683 + t938 * t684;
t852 = t936 * g(3) + t946;
t817 = t940 * t852 - t853 * t936;
t854 = t856 ^ 2;
t855 = t858 ^ 2;
t884 = qJD(5) + t892;
t882 = t884 ^ 2;
t890 = t892 ^ 2;
t891 = t894 ^ 2;
t1050 = pkin(2) * t817;
t1014 = -0.2e1 * t1016;
t949 = t967 + t1014;
t873 = t1051 * t943 + t949;
t1049 = pkin(2) * t873;
t933 = t940 ^ 2;
t1019 = t932 + t933;
t904 = t1019 * qJDD(1);
t1048 = pkin(2) * t904;
t1047 = pkin(4) * t935;
t1046 = qJDD(1) * pkin(1);
t779 = t827 * t935 - t939 * t944;
t715 = -t779 * t939 + t780 * t935;
t1045 = t715 * t936;
t1044 = t715 * t940;
t782 = t830 + t831;
t1043 = t782 * t934;
t1042 = t782 * t938;
t828 = t1014 - t1053;
t1041 = t828 * t935;
t1040 = t828 * t939;
t844 = t1033 + t929;
t1039 = t844 * t935;
t1038 = t844 * t939;
t1036 = t873 * t936;
t1035 = t884 * t934;
t1034 = t884 * t938;
t1032 = t904 * t937;
t1031 = t904 * t941;
t918 = t936 * t1021;
t909 = qJDD(3) + t918;
t1030 = t909 * t936;
t1029 = t909 * t940;
t910 = qJDD(3) - t918;
t1028 = t910 * t936;
t1027 = t910 * t940;
t1025 = t930 * t935;
t1024 = t930 * t939;
t1022 = t933 * t943;
t728 = -t929 * pkin(4) - t1052 * pkin(8) + t846 * t894 + t779;
t725 = t934 * t728;
t726 = t938 * t728;
t859 = t940 * t873;
t1020 = -pkin(4) * t728 + pkin(8) * t650;
t1013 = t935 * t830;
t1012 = t939 * t830;
t1011 = t937 * t1033;
t1010 = t941 * t1033;
t826 = -t855 - t882;
t735 = -t826 * t934 - t1042;
t974 = -t833 * t938 - t929 * t934;
t775 = (qJD(5) + t884) * t856 + t974;
t1009 = pkin(4) * t775 + pkin(8) * t735 + t725;
t807 = -t882 - t854;
t732 = t807 * t938 - t1056;
t840 = t884 * t858;
t992 = -t833 * t934 + t938 * t929;
t963 = qJD(5) * t858 - t992;
t771 = -t840 - t963;
t1008 = pkin(4) * t771 + pkin(8) * t732 - t726;
t646 = t650 * t935 - t728 * t939;
t1007 = pkin(3) * t646 + t1020;
t870 = -t891 - t1052;
t815 = t870 * t939 - t1039;
t1006 = pkin(3) * t815 - t780;
t1005 = -pkin(4) * t939 - pkin(3);
t716 = t779 * t935 + t939 * t780;
t671 = t716 * t936 + t1044;
t714 = pkin(3) * t715;
t1002 = -pkin(2) * t671 - t714;
t811 = (-qJD(4) + t930) * t894 + t989;
t814 = t833 + t1026;
t752 = t811 * t935 - t814 * t939;
t754 = t811 * t939 + t814 * t935;
t706 = t752 * t940 + t754 * t936;
t750 = pkin(3) * t752;
t1001 = -pkin(2) * t706 - t750;
t647 = t650 * t939 + t728 * t935;
t649 = -t683 * t938 + t684 * t934;
t622 = pkin(7) * t647 + (-pkin(8) * t935 + t1005) * t649;
t625 = -pkin(7) * t646 + (-pkin(8) * t939 + t1047) * t649;
t1000 = -t622 * t936 + t940 * t625;
t772 = (-qJD(5) + t884) * t858 + t992;
t794 = -qJD(5) * t856 - t974;
t839 = t884 * t856;
t774 = t794 + t839;
t711 = t772 * t934 - t774 * t938;
t644 = -pkin(8) * t711 - t649;
t713 = t772 * t938 + t774 * t934;
t798 = t854 + t855;
t689 = t713 * t939 - t798 * t935;
t630 = pkin(7) * t689 + t1005 * t711 + t644 * t935;
t688 = t713 * t935 + t798 * t939;
t634 = -pkin(7) * t688 + t711 * t1047 + t644 * t939;
t999 = -t630 * t936 + t940 * t634;
t731 = t807 * t934 + t1055;
t668 = -pkin(4) * t731 + t683;
t685 = -pkin(8) * t731 + t725;
t694 = t732 * t939 - t771 * t935;
t637 = -pkin(3) * t731 + pkin(7) * t694 + t668 * t939 + t685 * t935;
t693 = t732 * t935 + t771 * t939;
t641 = -pkin(7) * t693 - t668 * t935 + t685 * t939;
t998 = -t637 * t936 + t940 * t641;
t734 = t826 * t938 - t1043;
t669 = -pkin(4) * t734 + t684;
t686 = -pkin(8) * t734 + t726;
t698 = t735 * t939 - t775 * t935;
t638 = -pkin(3) * t734 + pkin(7) * t698 + t669 * t939 + t686 * t935;
t697 = t735 * t935 + t775 * t939;
t643 = -pkin(7) * t697 - t669 * t935 + t686 * t939;
t997 = -t638 * t936 + t940 * t643;
t834 = -t890 - t891;
t674 = -pkin(3) * t834 + pkin(7) * t754 + t716;
t676 = -pkin(7) * t752 - t715;
t996 = -t674 * t936 + t940 * t676;
t842 = -t1052 - t890;
t801 = t842 * t939 - t1059;
t717 = -pkin(3) * t809 + pkin(7) * t801 + t1040;
t800 = t842 * t935 + t1058;
t758 = -pkin(7) * t800 - t1041;
t995 = -t717 * t936 + t940 * t758;
t816 = -t870 * t935 - t1038;
t723 = -pkin(3) * t813 + pkin(7) * t816 - t1041;
t778 = -pkin(7) * t815 - t1040;
t994 = -t723 * t936 + t940 * t778;
t881 = pkin(1) * t943 + t949;
t883 = -t959 + t1046;
t990 = -t941 * t881 - t883 * t937;
t988 = -t911 * t937 - t941 * t912;
t986 = t937 * t918;
t985 = t941 * t918;
t984 = pkin(4) * t798 + pkin(8) * t713 + t650;
t983 = pkin(3) * t697 + t1009;
t982 = pkin(3) * t693 + t1008;
t905 = qJDD(1) * t941 - t937 * t943;
t981 = pkin(5) * t905 + g(3) * t937;
t906 = qJDD(1) * t937 + t941 * t943;
t980 = -pkin(5) * t906 + g(3) * t941;
t978 = pkin(3) * t800 - t779;
t900 = 0.2e1 * t1003 + t1015;
t977 = pkin(2) * t900 - t859;
t903 = t925 - 0.2e1 * t1004;
t976 = pkin(2) * t903 + t1036;
t975 = pkin(3) * t688 + t984;
t818 = -t852 * t936 - t853 * t940;
t973 = t881 * t937 - t883 * t941;
t972 = t911 * t941 - t912 * t937;
t628 = t646 * t940 + t647 * t936;
t970 = -pkin(2) * t628 - t1007;
t756 = t815 * t940 + t816 * t936;
t969 = -pkin(2) * t756 - t1006;
t942 = qJD(3) ^ 2;
t916 = -t942 - t1022;
t864 = t916 * t940 - t1030;
t968 = -pkin(2) * t864 - t853;
t695 = pkin(3) * t828 + pkin(7) * t716;
t965 = -pkin(7) * t1044 - t695 * t936;
t660 = t693 * t940 + t694 * t936;
t962 = -pkin(2) * t660 - t982;
t662 = t697 * t940 + t698 * t936;
t961 = -pkin(2) * t662 - t983;
t736 = t800 * t940 + t801 * t936;
t960 = -pkin(2) * t736 - t978;
t654 = t688 * t940 + t689 * t936;
t958 = -pkin(2) * t654 - t975;
t957 = pkin(2) * t649 - t622 * t940 - t625 * t936;
t956 = pkin(2) * t711 - t630 * t940 - t634 * t936;
t955 = pkin(2) * t731 - t637 * t940 - t641 * t936;
t954 = pkin(2) * t734 - t638 * t940 - t643 * t936;
t953 = pkin(2) * t834 - t674 * t940 - t676 * t936;
t952 = pkin(2) * t809 - t717 * t940 - t758 * t936;
t951 = pkin(2) * t813 - t723 * t940 - t778 * t936;
t950 = -pkin(2) * t828 + pkin(7) * t1045 - t695 * t940;
t914 = -t942 - t1023;
t862 = t914 * t936 + t1027;
t945 = -pkin(2) * t862 - t852;
t915 = t942 - t1022;
t913 = -t942 + t1023;
t908 = (-t932 + t933) * t943;
t907 = t1019 * t943;
t898 = t1019 * t1017;
t897 = t979 - 0.2e1 * t1046;
t889 = -t912 + t927 + 0.2e1 * t931;
t877 = -t891 + t1052;
t876 = t890 - t1052;
t875 = t933 * t1017 + t902 * t936;
t874 = t932 * t1017 + t901 * t940;
t869 = -t916 * t936 - t1029;
t868 = -t915 * t936 + t1027;
t867 = (t902 - t1004) * t940;
t866 = t914 * t940 - t1028;
t865 = t913 * t940 - t1030;
t863 = t915 * t940 + t1028;
t861 = t913 * t936 + t1029;
t860 = (-t901 + t1003) * t936;
t851 = -t900 * t940 - t903 * t936;
t850 = -t900 * t936 + t903 * t940;
t847 = t891 - t890;
t841 = pkin(1) * t883 - qJ(2) * t881;
t838 = -t855 + t882;
t837 = t854 - t882;
t836 = (-t892 * t939 + t894 * t935) * t930;
t835 = (-t892 * t935 - t894 * t939) * t930;
t829 = t855 - t854;
t822 = t876 * t939 - t1039;
t821 = -t877 * t935 + t1058;
t820 = t876 * t935 + t1038;
t819 = t877 * t939 + t1059;
t810 = -t880 + t964;
t806 = -t894 * t1025 + t833 * t939;
t805 = t894 * t1024 + t833 * t935;
t804 = t892 * t1024 + t935 * t964;
t803 = t892 * t1025 - t939 * t964;
t802 = pkin(2) * t907 + t818;
t797 = -qJ(2) * t869 - t968;
t796 = -qJ(2) * t866 - t945;
t792 = -t1051 * t866 + t977;
t791 = -t1051 * t869 + t976;
t790 = qJ(2) * t903 - t1051 * t864 - t859;
t789 = qJ(2) * t900 - t1051 * t862 - t1036;
t788 = (-t856 * t938 + t858 * t934) * t884;
t787 = (-t856 * t934 - t858 * t938) * t884;
t786 = -t835 * t936 + t836 * t940;
t785 = t835 * t940 + t836 * t936;
t784 = -qJ(2) * t907 + t1051 * t904 - t817;
t773 = t794 - t839;
t770 = -t840 + t963;
t769 = -qJ(2) * t818 + t1050;
t766 = -t820 * t936 + t822 * t940;
t765 = -t819 * t936 + t821 * t940;
t764 = t820 * t940 + t822 * t936;
t763 = t819 * t940 + t821 * t936;
t762 = -t858 * t1035 + t794 * t938;
t761 = t858 * t1034 + t794 * t934;
t760 = t856 * t1034 + t934 * t963;
t759 = -t856 * t1035 + t938 * t963;
t757 = -t815 * t936 + t816 * t940;
t753 = -t809 * t939 - t813 * t935;
t751 = -t809 * t935 + t813 * t939;
t749 = t788 * t939 + t831 * t935;
t748 = t788 * t935 - t831 * t939;
t747 = t837 * t938 - t1043;
t746 = -t838 * t934 + t1055;
t745 = t837 * t934 + t1042;
t744 = t838 * t938 + t1056;
t743 = -t1051 * t818 - t1049;
t742 = -t805 * t936 + t806 * t940;
t741 = -t803 * t936 + t804 * t940;
t740 = t805 * t940 + t806 * t936;
t739 = t803 * t940 + t804 * t936;
t738 = -qJ(2) * t873 - t1051 * t817;
t737 = -t800 * t936 + t801 * t940;
t722 = t762 * t939 + t1013;
t721 = t760 * t939 - t1013;
t720 = t762 * t935 - t1012;
t719 = t760 * t935 + t1012;
t712 = t771 * t938 - t773 * t934;
t710 = t771 * t934 + t773 * t938;
t708 = -t752 * t936 + t754 * t940;
t707 = -t751 * t936 + t753 * t940;
t705 = t751 * t940 + t753 * t936;
t704 = t747 * t939 - t770 * t935;
t703 = t746 * t939 + t774 * t935;
t702 = t747 * t935 + t770 * t939;
t701 = t746 * t935 - t774 * t939;
t700 = -t748 * t936 + t749 * t940;
t699 = t748 * t940 + t749 * t936;
t691 = t712 * t939 + t829 * t935;
t690 = t712 * t935 - t829 * t939;
t680 = -t720 * t936 + t722 * t940;
t679 = -t719 * t936 + t721 * t940;
t678 = t720 * t940 + t722 * t936;
t677 = t719 * t940 + t721 * t936;
t673 = -qJ(2) * t757 - t969;
t672 = t716 * t940 - t1045;
t670 = -qJ(2) * t737 - t960;
t667 = -t702 * t936 + t704 * t940;
t666 = -t701 * t936 + t703 * t940;
t665 = t702 * t940 + t704 * t936;
t664 = t701 * t940 + t703 * t936;
t663 = -t697 * t936 + t698 * t940;
t661 = -t693 * t936 + t694 * t940;
t659 = -t690 * t936 + t691 * t940;
t658 = t690 * t940 + t691 * t936;
t657 = -t1051 * t757 + t951;
t656 = qJ(2) * t813 - t1051 * t756 + t994;
t655 = -t688 * t936 + t689 * t940;
t653 = -qJ(2) * t708 - t1001;
t652 = -t1051 * t737 + t952;
t651 = qJ(2) * t809 - t1051 * t736 + t995;
t639 = -qJ(2) * t672 - t1002;
t636 = -t1051 * t708 + t953;
t635 = qJ(2) * t834 - t1051 * t706 + t996;
t633 = -t1051 * t672 + t950;
t632 = -qJ(2) * t828 - t1051 * t671 + t965;
t629 = -t646 * t936 + t647 * t940;
t627 = -qJ(2) * t663 - t961;
t626 = -qJ(2) * t661 - t962;
t623 = -qJ(2) * t655 - t958;
t621 = -t1051 * t663 + t954;
t620 = qJ(2) * t734 - t1051 * t662 + t997;
t619 = -t1051 * t661 + t955;
t618 = qJ(2) * t731 - t1051 * t660 + t998;
t617 = -t1051 * t655 + t956;
t616 = qJ(2) * t711 - t1051 * t654 + t999;
t615 = -qJ(2) * t629 - t970;
t614 = -t1051 * t629 + t957;
t613 = qJ(2) * t649 - t1051 * t628 + t1000;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t905, 0, -t906, 0, -t981, -t980, -t972, -pkin(5) * t972, 0, -t905, t906, 0, 0, 0, t973, t981, t980, pkin(5) * t973 + (-t937 * pkin(1) + t941 * qJ(2)) * g(3), t875 * t937 + t985, t850 * t937 + t908 * t941, t863 * t937 + t925 * t941, t874 * t937 - t985, -t1015 * t941 + t861 * t937, qJDD(3) * t941 - t898 * t937, t941 * t796 - t937 * t792 - pkin(5) * (-t862 * t941 + t900 * t937), t941 * t797 - t937 * t791 - pkin(5) * (-t864 * t941 + t903 * t937), -pkin(2) * t1031 + t937 * t802 - pkin(5) * (-t907 * t937 + t1031), t941 * t769 - t937 * t743 - pkin(5) * (-t817 * t941 - t873 * t937), t740 * t937 + t1010, t705 * t937 + t847 * t941, t763 * t937 + t814 * t941, t739 * t937 - t1010, t764 * t937 - t810 * t941, t785 * t937 + t929 * t941, t941 * t670 - t937 * t652 - pkin(5) * (-t736 * t941 + t809 * t937), t941 * t673 - t937 * t657 - pkin(5) * (-t756 * t941 + t813 * t937), t941 * t653 - t937 * t636 - pkin(5) * (-t706 * t941 + t834 * t937), t941 * t639 - t937 * t633 - pkin(5) * (-t671 * t941 - t828 * t937), t678 * t937 + t761 * t941, t658 * t937 + t710 * t941, t664 * t937 + t744 * t941, t677 * t937 - t759 * t941, t665 * t937 + t745 * t941, t699 * t937 + t787 * t941, t941 * t626 - t937 * t619 - pkin(5) * (-t660 * t941 + t731 * t937), t941 * t627 - t937 * t621 - pkin(5) * (-t662 * t941 + t734 * t937), t941 * t623 - t937 * t617 - pkin(5) * (-t654 * t941 + t711 * t937), t941 * t615 - t937 * t614 - pkin(5) * (-t628 * t941 + t649 * t937); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t906, 0, t905, 0, t980, -t981, t988, pkin(5) * t988, 0, -t906, -t905, 0, 0, 0, t990, -t980, t981, pkin(5) * t990 + (t941 * pkin(1) + t937 * qJ(2)) * g(3), -t875 * t941 + t986, -t850 * t941 + t908 * t937, -t863 * t941 + t925 * t937, -t874 * t941 - t986, -t1015 * t937 - t861 * t941, qJDD(3) * t937 + t898 * t941, t937 * t796 + t941 * t792 + pkin(5) * (t862 * t937 + t900 * t941), t937 * t797 + t941 * t791 + pkin(5) * (t864 * t937 + t903 * t941), -pkin(2) * t1032 - t941 * t802 + pkin(5) * (-t907 * t941 - t1032), t937 * t769 + t941 * t743 + pkin(5) * (t817 * t937 - t873 * t941), -t740 * t941 + t1011, -t705 * t941 + t847 * t937, -t763 * t941 + t814 * t937, -t739 * t941 - t1011, -t764 * t941 - t810 * t937, -t785 * t941 + t929 * t937, t937 * t670 + t941 * t652 + pkin(5) * (t736 * t937 + t809 * t941), t937 * t673 + t941 * t657 + pkin(5) * (t756 * t937 + t813 * t941), t937 * t653 + t941 * t636 + pkin(5) * (t706 * t937 + t834 * t941), t937 * t639 + t941 * t633 + pkin(5) * (t671 * t937 - t828 * t941), -t678 * t941 + t761 * t937, -t658 * t941 + t710 * t937, -t664 * t941 + t744 * t937, -t677 * t941 - t759 * t937, -t665 * t941 + t745 * t937, -t699 * t941 + t787 * t937, t937 * t626 + t941 * t619 + pkin(5) * (t660 * t937 + t731 * t941), t937 * t627 + t941 * t621 + pkin(5) * (t662 * t937 + t941 * t734), t937 * t623 + t941 * t617 + pkin(5) * (t654 * t937 + t711 * t941), t937 * t615 + t941 * t614 + pkin(5) * (t628 * t937 + t941 * t649); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t911, t912, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t897, t889, t841, t867, t851, t868, t860, t865, 0, t789, t790, t784, t738, t742, t707, t765, t741, t766, t786, t651, t656, t635, t632, t680, t659, t666, t679, t667, t700, t618, t620, t616, t613; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t943, 0, 0, -g(3), -t911, 0, 0, -qJDD(1), t943, 0, 0, 0, -t883, 0, g(3), qJ(2) * g(3), t918, t908, t925, -t918, -t1015, qJDD(3), t796, t797, -t1048, t769, t1033, t847, t814, -t1033, -t810, t929, t670, t673, t653, t639, t761, t710, t744, -t759, t745, t787, t626, t627, t623, t615; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t943, 0, qJDD(1), 0, g(3), 0, -t912, 0, 0, -t943, -qJDD(1), 0, 0, 0, -t881, -g(3), 0, pkin(1) * g(3), -t875, -t850, -t863, -t874, -t861, t898, t792, t791, -t802, t743, -t740, -t705, -t763, -t739, -t764, -t785, t652, t657, t636, t633, -t678, -t658, -t664, -t677, -t665, -t699, t619, t621, t617, t614; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t911, t912, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t897, t889, t841, t867, t851, t868, t860, t865, 0, t789, t790, t784, t738, t742, t707, t765, t741, t766, t786, t651, t656, t635, t632, t680, t659, t666, t679, t667, t700, t618, t620, t616, t613; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t883, -t881, 0, t867, t851, t868, t860, t865, 0, -pkin(6) * t862 - t1036, -pkin(6) * t864 - t859, pkin(6) * t904 - t817, -pkin(6) * t817, t742, t707, t765, t741, t766, t786, -pkin(6) * t736 + t995, -pkin(6) * t756 + t994, -pkin(6) * t706 + t996, -pkin(6) * t671 + t965, t680, t659, t666, t679, t667, t700, -pkin(6) * t660 + t998, -pkin(6) * t662 + t997, -pkin(6) * t654 + t999, -pkin(6) * t628 + t1000; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t943, 0, 0, 0, t883, 0, -g(3), 0, -t918, -t908, -t925, t918, t1015, -qJDD(3), t945, t968, t1048, -t1050, -t1033, -t847, -t814, t1033, t810, -t929, t960, t969, t1001, t1002, -t761, -t710, -t744, t759, -t745, -t787, t962, t961, t958, t970; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t943, qJDD(1), 0, 0, 0, t881, g(3), 0, 0, t875, t850, t863, t874, t861, -t898, pkin(6) * t866 - t977, pkin(6) * t869 - t976, t802, pkin(6) * t818 + t1049, t740, t705, t763, t739, t764, t785, pkin(6) * t737 - t952, pkin(6) * t757 - t951, pkin(6) * t708 - t953, pkin(6) * t672 - t950, t678, t658, t664, t677, t665, t699, pkin(6) * t661 - t955, pkin(6) * t663 - t954, pkin(6) * t655 - t956, pkin(6) * t629 - t957; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t902, -t900, t910, t1004, t913, -t1004, 0, -t873, -t852, 0, t806, t753, t821, t804, t822, t836, t758, t778, t676, -pkin(7) * t715, t722, t691, t703, t721, t704, t749, t641, t643, t634, t625; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1003, t903, t915, t901, t909, -t1003, t873, 0, -t853, 0, t805, t751, t819, t803, t820, t835, t717, t723, t674, t695, t720, t690, t701, t719, t702, t748, t637, t638, t630, t622; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t918, t908, t925, -t918, -t1015, qJDD(3), t852, t853, 0, 0, t1033, t847, t814, -t1033, -t810, t929, t978, t1006, t750, t714, t761, t710, t744, -t759, t745, t787, t982, t983, t975, t1007; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t833, -t809, t1057, t1026, t876, -t1026, 0, -t828, t779, 0, t762, t712, t746, t760, t747, t788, t685, t686, t644, -pkin(8) * t649; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t880, t813, t877, -t964, t844, -t880, t828, 0, t780, 0, -t830, -t829, -t774, t830, t770, -t831, t668, t669, -pkin(4) * t711, -pkin(4) * t649; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1033, t847, t814, -t1033, -t810, t929, -t779, -t780, 0, 0, t761, t710, t744, -t759, t745, t787, t1008, t1009, t984, t1020; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t794, t771, t1054, t839, t837, -t839, 0, t728, t683, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t840, t773, t838, -t963, t782, -t840, -t728, 0, t684, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t830, t829, t774, -t830, -t770, t831, -t683, -t684, 0, 0;];
m_new_reg = t1;
