% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRPR9
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:25
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRPR9_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR9_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR9_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR9_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR9_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRPR9_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:25:03
% EndTime: 2019-12-31 18:25:05
% DurationCPUTime: 2.15s
% Computational Cost: add. (4177->203), mult. (8513->228), div. (0->0), fcn. (4877->8), ass. (0->138)
t1286 = sin(qJ(3));
t1289 = cos(qJ(3));
t1292 = qJD(1) ^ 2;
t1315 = t1289 * t1292;
t1266 = t1286 * t1315;
t1257 = qJDD(3) + t1266;
t1291 = qJD(3) ^ 2;
t1277 = t1289 ^ 2;
t1322 = t1277 * t1292;
t1263 = -t1291 - t1322;
t1233 = t1286 * t1257 - t1289 * t1263;
t1317 = t1286 * qJD(1);
t1272 = qJD(3) * t1317;
t1310 = t1289 * qJDD(1);
t1250 = -0.2e1 * t1272 + t1310;
t1281 = sin(pkin(8));
t1282 = cos(pkin(8));
t1210 = t1281 * t1233 - t1282 * t1250;
t1214 = t1282 * t1233 + t1281 * t1250;
t1287 = sin(qJ(1));
t1290 = cos(qJ(1));
t1332 = t1290 * t1210 + t1287 * t1214;
t1331 = t1287 * t1210 - t1290 * t1214;
t1258 = qJDD(3) - t1266;
t1276 = t1286 ^ 2;
t1262 = -t1276 * t1292 - t1291;
t1234 = t1289 * t1258 + t1286 * t1262;
t1324 = qJD(1) * t1289;
t1309 = qJD(3) * t1324;
t1311 = t1286 * qJDD(1);
t1248 = 0.2e1 * t1309 + t1311;
t1211 = t1281 * t1234 + t1282 * t1248;
t1215 = t1282 * t1234 - t1281 * t1248;
t1330 = t1290 * t1211 + t1287 * t1215;
t1329 = t1287 * t1211 - t1290 * t1215;
t1285 = sin(qJ(5));
t1288 = cos(qJ(5));
t1243 = t1285 * qJD(3) + t1288 * t1324;
t1328 = t1243 ^ 2;
t1245 = t1288 * qJD(3) - t1285 * t1324;
t1327 = t1245 ^ 2;
t1267 = qJD(5) + t1317;
t1326 = t1267 ^ 2;
t1325 = 2 * qJD(4);
t1323 = t1245 * t1243;
t1278 = -g(3) + qJDD(2);
t1316 = t1286 * t1278;
t1314 = qJD(5) - t1267;
t1313 = qJD(5) + t1267;
t1261 = -t1290 * g(1) - t1287 * g(2);
t1247 = -t1292 * pkin(1) + t1261;
t1260 = t1287 * g(1) - t1290 * g(2);
t1298 = qJDD(1) * pkin(1) + t1260;
t1224 = t1282 * t1247 + t1281 * t1298;
t1312 = t1276 + t1277;
t1308 = -t1326 - t1327;
t1307 = pkin(3) * qJD(3) - (2 * qJD(4));
t1221 = -t1292 * pkin(2) + qJDD(1) * pkin(6) + t1224;
t1306 = t1292 * (-pkin(3) * t1289 - qJ(4) * t1286) + t1221;
t1223 = -t1281 * t1247 + t1282 * t1298;
t1251 = -t1281 * qJDD(1) - t1282 * t1292;
t1252 = t1282 * qJDD(1) - t1281 * t1292;
t1305 = t1290 * t1251 - t1287 * t1252;
t1249 = -t1272 + t1310;
t1304 = -t1285 * qJDD(3) - t1288 * t1249;
t1271 = t1289 * t1278;
t1303 = -qJDD(3) * pkin(3) - t1291 * qJ(4) + qJDD(4) - t1271;
t1259 = pkin(4) * t1317 - qJD(3) * pkin(7);
t1220 = -qJDD(1) * pkin(2) - t1292 * pkin(6) - t1223;
t1299 = t1309 + t1311;
t1296 = -t1249 * pkin(3) + t1220 + (-t1299 - t1309) * qJ(4);
t1187 = -pkin(4) * t1322 - t1249 * pkin(7) + (-t1259 + t1307) * t1317 + t1296;
t1189 = -qJDD(3) * pkin(7) + (qJDD(1) * pkin(4) - pkin(7) * t1315 + t1306) * t1286 + t1303;
t1302 = -t1285 * t1187 + t1288 * t1189;
t1301 = t1287 * t1251 + t1290 * t1252;
t1228 = t1289 * t1257 + t1286 * t1263;
t1230 = t1286 * t1258 - t1289 * t1262;
t1300 = -t1288 * qJDD(3) + t1285 * t1249;
t1297 = -qJDD(5) - t1299;
t1295 = t1314 * t1243 + t1300;
t1294 = -t1297 - t1323;
t1293 = -t1291 * pkin(3) + qJDD(3) * qJ(4) + t1306 * t1289 + t1316;
t1256 = t1312 * t1292;
t1255 = -t1287 * qJDD(1) - t1290 * t1292;
t1254 = t1290 * qJDD(1) - t1287 * t1292;
t1253 = t1312 * qJDD(1);
t1227 = t1282 * t1253 - t1281 * t1256;
t1226 = t1281 * t1253 + t1282 * t1256;
t1222 = -t1326 - t1328;
t1219 = t1297 - t1323;
t1218 = -t1327 - t1328;
t1208 = t1289 * t1221 + t1316;
t1207 = -t1286 * t1221 + t1271;
t1206 = -t1313 * t1243 - t1300;
t1205 = -t1314 * t1245 + t1304;
t1204 = t1313 * t1245 - t1304;
t1202 = -t1287 * t1226 + t1290 * t1227;
t1201 = t1290 * t1226 + t1287 * t1227;
t1200 = -t1281 * t1223 + t1282 * t1224;
t1199 = t1282 * t1223 + t1281 * t1224;
t1198 = t1306 * t1286 + t1303;
t1197 = t1288 * t1219 - t1285 * t1308;
t1196 = t1285 * t1219 + t1288 * t1308;
t1195 = qJD(3) * t1325 + t1293;
t1194 = t1288 * t1222 - t1285 * t1294;
t1193 = t1285 * t1222 + t1288 * t1294;
t1192 = t1307 * t1317 + t1296;
t1191 = -t1286 * t1207 + t1289 * t1208;
t1190 = t1289 * t1207 + t1286 * t1208;
t1188 = -pkin(7) * t1322 + t1249 * pkin(4) + (t1325 + t1259) * qJD(3) + t1293;
t1186 = t1288 * t1205 - t1285 * t1295;
t1185 = t1285 * t1205 + t1288 * t1295;
t1184 = t1286 * t1196 + t1289 * t1206;
t1183 = -t1289 * t1196 + t1286 * t1206;
t1182 = t1286 * t1193 + t1289 * t1204;
t1181 = -t1289 * t1193 + t1286 * t1204;
t1180 = t1282 * t1191 + t1281 * t1220;
t1179 = t1281 * t1191 - t1282 * t1220;
t1178 = t1289 * t1195 + t1286 * t1198;
t1177 = t1286 * t1195 - t1289 * t1198;
t1176 = t1286 * t1185 + t1289 * t1218;
t1175 = -t1289 * t1185 + t1286 * t1218;
t1174 = t1282 * t1184 + t1281 * t1197;
t1173 = t1281 * t1184 - t1282 * t1197;
t1172 = t1288 * t1187 + t1285 * t1189;
t1171 = t1282 * t1182 + t1281 * t1194;
t1170 = t1281 * t1182 - t1282 * t1194;
t1168 = t1282 * t1178 + t1281 * t1192;
t1167 = t1281 * t1178 - t1282 * t1192;
t1166 = t1282 * t1176 + t1281 * t1186;
t1165 = t1281 * t1176 - t1282 * t1186;
t1164 = t1288 * t1172 - t1285 * t1302;
t1163 = t1285 * t1172 + t1288 * t1302;
t1162 = t1286 * t1163 + t1289 * t1188;
t1161 = -t1289 * t1163 + t1286 * t1188;
t1160 = t1282 * t1162 + t1281 * t1164;
t1159 = t1281 * t1162 - t1282 * t1164;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1255, -t1254, 0, -t1287 * t1260 + t1290 * t1261, 0, 0, 0, 0, 0, 0, t1305, -t1301, 0, -t1287 * t1199 + t1290 * t1200, 0, 0, 0, 0, 0, 0, t1331, t1329, t1202, -t1287 * t1179 + t1290 * t1180, 0, 0, 0, 0, 0, 0, t1202, -t1331, -t1329, -t1287 * t1167 + t1290 * t1168, 0, 0, 0, 0, 0, 0, -t1287 * t1170 + t1290 * t1171, -t1287 * t1173 + t1290 * t1174, -t1287 * t1165 + t1290 * t1166, -t1287 * t1159 + t1290 * t1160; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1254, t1255, 0, t1290 * t1260 + t1287 * t1261, 0, 0, 0, 0, 0, 0, t1301, t1305, 0, t1290 * t1199 + t1287 * t1200, 0, 0, 0, 0, 0, 0, -t1332, -t1330, t1201, t1290 * t1179 + t1287 * t1180, 0, 0, 0, 0, 0, 0, t1201, t1332, t1330, t1290 * t1167 + t1287 * t1168, 0, 0, 0, 0, 0, 0, t1290 * t1170 + t1287 * t1171, t1290 * t1173 + t1287 * t1174, t1290 * t1165 + t1287 * t1166, t1290 * t1159 + t1287 * t1160; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1278, 0, 0, 0, 0, 0, 0, t1228, -t1230, 0, t1190, 0, 0, 0, 0, 0, 0, 0, -t1228, t1230, t1177, 0, 0, 0, 0, 0, 0, t1181, t1183, t1175, t1161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1292, -qJDD(1), 0, t1261, 0, 0, 0, 0, 0, 0, t1251, -t1252, 0, t1200, 0, 0, 0, 0, 0, 0, -t1214, -t1215, t1227, t1180, 0, 0, 0, 0, 0, 0, t1227, t1214, t1215, t1168, 0, 0, 0, 0, 0, 0, t1171, t1174, t1166, t1160; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1292, 0, t1260, 0, 0, 0, 0, 0, 0, t1252, t1251, 0, t1199, 0, 0, 0, 0, 0, 0, -t1210, -t1211, t1226, t1179, 0, 0, 0, 0, 0, 0, t1226, t1210, t1211, t1167, 0, 0, 0, 0, 0, 0, t1170, t1173, t1165, t1159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1278, 0, 0, 0, 0, 0, 0, t1228, -t1230, 0, t1190, 0, 0, 0, 0, 0, 0, 0, -t1228, t1230, t1177, 0, 0, 0, 0, 0, 0, t1181, t1183, t1175, t1161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1292, -qJDD(1), 0, t1224, 0, 0, 0, 0, 0, 0, -t1233, -t1234, t1253, t1191, 0, 0, 0, 0, 0, 0, t1253, t1233, t1234, t1178, 0, 0, 0, 0, 0, 0, t1182, t1184, t1176, t1162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1292, 0, t1223, 0, 0, 0, 0, 0, 0, t1250, -t1248, t1256, -t1220, 0, 0, 0, 0, 0, 0, t1256, -t1250, t1248, -t1192, 0, 0, 0, 0, 0, 0, -t1194, -t1197, -t1186, -t1164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1278, 0, 0, 0, 0, 0, 0, t1228, -t1230, 0, t1190, 0, 0, 0, 0, 0, 0, 0, -t1228, t1230, t1177, 0, 0, 0, 0, 0, 0, t1181, t1183, t1175, t1161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1263, -t1258, t1310, t1208, 0, 0, 0, 0, 0, 0, t1310, -t1263, t1258, t1195, 0, 0, 0, 0, 0, 0, t1204, t1206, t1218, t1188; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1257, t1262, -t1311, t1207, 0, 0, 0, 0, 0, 0, -t1311, -t1257, -t1262, -t1198, 0, 0, 0, 0, 0, 0, -t1193, -t1196, -t1185, -t1163; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1250, t1248, -t1256, t1220, 0, 0, 0, 0, 0, 0, -t1256, t1250, -t1248, t1192, 0, 0, 0, 0, 0, 0, t1194, t1197, t1186, t1164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1256, t1250, -t1248, t1192, 0, 0, 0, 0, 0, 0, t1194, t1197, t1186, t1164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1310, t1263, -t1258, -t1195, 0, 0, 0, 0, 0, 0, -t1204, -t1206, -t1218, -t1188; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1311, t1257, t1262, t1198, 0, 0, 0, 0, 0, 0, t1193, t1196, t1185, t1163; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1222, t1219, t1205, t1172; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1294, t1308, t1295, t1302; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1204, t1206, t1218, t1188;];
f_new_reg = t1;
