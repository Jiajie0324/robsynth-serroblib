% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRPR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d5,theta2]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:25
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRPR9_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRPR9_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRPR9_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRPR9_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRPR9_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRPR9_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:24:42
% EndTime: 2019-12-31 18:24:52
% DurationCPUTime: 8.44s
% Computational Cost: add. (15151->480), mult. (30678->660), div. (0->0), fcn. (17362->8), ass. (0->336)
t520 = sin(qJ(3));
t510 = t520 ^ 2;
t526 = qJD(1) ^ 2;
t504 = t510 * t526;
t525 = qJD(3) ^ 2;
t489 = -t504 - t525;
t523 = cos(qJ(3));
t554 = t523 * t526 * t520;
t484 = qJDD(3) - t554;
t567 = t523 * t484;
t429 = t520 * t489 + t567;
t561 = qJD(1) * qJD(3);
t547 = t523 * t561;
t559 = t520 * qJDD(1);
t471 = 0.2e1 * t547 + t559;
t515 = sin(pkin(8));
t516 = cos(pkin(8));
t371 = t515 * t429 + t516 * t471;
t375 = t516 * t429 - t515 * t471;
t521 = sin(qJ(1));
t524 = cos(qJ(1));
t311 = t524 * t371 + t521 * t375;
t634 = pkin(5) * t311;
t316 = t521 * t371 - t524 * t375;
t633 = pkin(5) * t316;
t511 = t523 ^ 2;
t506 = t511 * t526;
t491 = -t506 - t525;
t483 = qJDD(3) + t554;
t580 = t520 * t483;
t426 = -t523 * t491 + t580;
t548 = t520 * t561;
t558 = t523 * qJDD(1);
t474 = -0.2e1 * t548 + t558;
t370 = t515 * t426 - t516 * t474;
t374 = t516 * t426 + t515 * t474;
t310 = t524 * t370 + t521 * t374;
t632 = pkin(5) * t310;
t313 = t521 * t370 - t524 * t374;
t631 = pkin(5) * t313;
t630 = qJ(2) * t371;
t629 = pkin(1) * t371 + pkin(6) * t429;
t579 = t520 * t484;
t422 = -t523 * t489 + t579;
t628 = -pkin(1) * t422 + qJ(2) * t375;
t488 = -t504 + t525;
t568 = t523 * t483;
t428 = -t520 * t488 + t568;
t387 = t515 * t428 - t516 * t559;
t391 = t516 * t428 + t515 * t559;
t627 = t387 * t524 + t391 * t521;
t626 = t521 * t387 - t524 * t391;
t625 = qJ(2) * t370;
t624 = pkin(1) * t370 + pkin(6) * t426;
t420 = t520 * t491 + t568;
t623 = pkin(1) * t420 + qJ(2) * t374;
t490 = t506 - t525;
t427 = -t523 * t490 + t579;
t386 = t515 * t427 + t516 * t558;
t390 = t516 * t427 - t515 * t558;
t622 = t386 * t524 + t390 * t521;
t621 = t521 * t386 - t524 * t390;
t619 = pkin(2) * t420;
t618 = pkin(6) * t420;
t487 = t524 * g(1) + t521 * g(2);
t469 = -t526 * pkin(1) - t487;
t486 = t521 * g(1) - t524 * g(2);
t534 = qJDD(1) * pkin(1) + t486;
t401 = t515 * t469 - t516 * t534;
t402 = t516 * t469 + t515 * t534;
t545 = t515 * t401 + t516 * t402;
t337 = t516 * t401 - t515 * t402;
t566 = t524 * t337;
t616 = -t521 * t545 + t566;
t575 = t337 * t521;
t278 = t524 * t545 + t575;
t476 = t515 * qJDD(1) + t516 * t526;
t477 = t516 * qJDD(1) - t515 * t526;
t408 = -t521 * t476 + t524 * t477;
t512 = g(3) - qJDD(2);
t441 = qJ(2) * t476 - t516 * t512;
t537 = -qJ(2) * t477 - t515 * t512;
t615 = -pkin(5) * t408 + t441 * t521 + t524 * t537;
t613 = pkin(2) * t422;
t612 = pkin(6) * t422;
t519 = sin(qJ(5));
t522 = cos(qJ(5));
t563 = qJD(1) * t523;
t463 = t519 * qJD(3) + t522 * t563;
t465 = t522 * qJD(3) - t519 * t563;
t415 = t465 * t463;
t472 = t547 + t559;
t455 = qJDD(5) + t472;
t602 = -t415 + t455;
t610 = t519 * t602;
t609 = t522 * t602;
t608 = t472 + t547;
t601 = t524 * t476 + t521 * t477;
t606 = pkin(5) * t601 + t524 * t441 - t521 * t537;
t600 = t490 * t520 + t567;
t453 = t463 ^ 2;
t454 = t465 ^ 2;
t562 = t520 * qJD(1);
t495 = qJD(5) + t562;
t492 = t495 ^ 2;
t598 = -2 * qJD(4);
t597 = pkin(3) + pkin(7);
t596 = pkin(3) * t523;
t564 = t510 + t511;
t478 = t564 * qJDD(1);
t481 = t504 + t506;
t412 = t515 * t478 + t516 * t481;
t413 = t516 * t478 - t515 * t481;
t347 = t524 * t412 + t521 * t413;
t595 = pkin(5) * t347;
t594 = qJ(2) * t412;
t593 = qJ(4) * t520;
t591 = t495 * t463;
t590 = t495 * t519;
t589 = t495 * t522;
t473 = -t548 + t558;
t485 = pkin(4) * t562 - qJD(3) * pkin(7);
t539 = -t593 - t596;
t468 = t539 * qJD(1);
t384 = -t526 * pkin(2) + qJDD(1) * pkin(6) + t402;
t565 = -t523 * t384 + t520 * t512;
t532 = t525 * pkin(3) - t468 * t563 + t565;
t560 = qJDD(3) * qJ(4);
t300 = t560 + t473 * pkin(4) - pkin(7) * t506 + ((2 * qJD(4)) + t485) * qJD(3) - t532;
t584 = t519 * t300;
t382 = t415 + t455;
t583 = t519 * t382;
t383 = -qJDD(1) * pkin(2) - t526 * pkin(6) + t401;
t582 = t520 * t383;
t581 = t520 * t471;
t572 = t522 * t300;
t571 = t522 * t382;
t570 = t523 * t383;
t569 = t523 * t474;
t364 = t520 * t384 + t523 * t512;
t557 = -t454 - t492;
t556 = t520 * t415;
t555 = t523 * t415;
t553 = pkin(1) * t412 + pkin(2) * t481 + pkin(6) * t478;
t399 = -t463 * qJD(5) + t522 * qJDD(3) - t519 * t473;
t546 = pkin(3) * qJD(3) + t598;
t305 = t520 * t364 - t523 * t565;
t417 = -t521 * t486 - t524 * t487;
t543 = t519 * qJDD(3) + t522 * t473;
t542 = t515 * t554;
t541 = t516 * t554;
t480 = t524 * qJDD(1) - t521 * t526;
t540 = -pkin(5) * t480 - t521 * g(3);
t538 = pkin(3) * t520 - qJ(4) * t523;
t530 = -t473 * pkin(3) - qJ(4) * t608 + t383;
t299 = -pkin(4) * t506 - t473 * pkin(7) + (-t485 + t546) * t562 + t530;
t533 = -qJDD(3) * pkin(3) - t525 * qJ(4) + t468 * t562 + qJDD(4) + t364;
t301 = -t483 * pkin(7) + (t472 - t547) * pkin(4) + t533;
t255 = t519 * t299 - t522 * t301;
t256 = t522 * t299 + t519 * t301;
t225 = -t522 * t255 + t519 * t256;
t226 = t519 * t255 + t522 * t256;
t304 = t523 * t364 + t520 * t565;
t536 = t488 * t523 + t580;
t416 = t524 * t486 - t521 * t487;
t535 = t399 - t591;
t531 = (-qJD(5) + t495) * t465 - t543;
t529 = qJD(3) * t598 + t532;
t329 = -t529 + t560;
t527 = t562 * t598 + t530;
t482 = -t504 + t506;
t479 = t521 * qJDD(1) + t524 * t526;
t466 = t538 * qJDD(1);
t458 = t564 * t561;
t443 = -pkin(5) * t479 + t524 * g(3);
t437 = -t454 + t492;
t436 = t453 - t492;
t435 = t523 * t472 - t510 * t561;
t434 = -t520 * t473 - t511 * t561;
t433 = t515 * qJDD(3) + t516 * t458;
t432 = -t516 * qJDD(3) + t515 * t458;
t419 = t608 * t520;
t418 = (t473 - t548) * t523;
t414 = t454 - t453;
t406 = qJ(2) * t413;
t405 = t569 - t581;
t404 = t523 * t471 + t520 * t474;
t400 = -t492 - t453;
t398 = -t465 * qJD(5) - t543;
t396 = t516 * t435 - t542;
t395 = t516 * t434 + t542;
t394 = t515 * t435 + t541;
t393 = t515 * t434 - t541;
t380 = -t453 - t454;
t368 = (t463 * t522 - t465 * t519) * t495;
t367 = (t463 * t519 + t465 * t522) * t495;
t365 = t516 * t405 - t515 * t482;
t363 = t515 * t405 + t516 * t482;
t361 = -t521 * t432 + t524 * t433;
t360 = t524 * t432 + t521 * t433;
t359 = t399 + t591;
t354 = (qJD(5) + t495) * t465 + t543;
t352 = -t519 * t399 - t465 * t589;
t351 = t519 * t398 - t463 * t589;
t350 = -t522 * t399 + t465 * t590;
t349 = -t522 * t398 - t463 * t590;
t348 = -t521 * t412 + t524 * t413;
t346 = pkin(5) * t348;
t345 = -t520 * t367 + t523 * t455;
t344 = t570 + t612;
t343 = t582 - t618;
t342 = t519 * t437 - t609;
t341 = -t519 * t436 - t571;
t340 = -t522 * t436 + t583;
t339 = -t522 * t437 - t610;
t333 = -t565 + t613;
t332 = t364 - t619;
t331 = -t519 * t557 - t571;
t330 = t522 * t557 - t583;
t328 = pkin(1) * t512 + qJ(2) * t545;
t327 = -t521 * t394 + t524 * t396;
t326 = -t521 * t393 + t524 * t395;
t325 = t524 * t394 + t521 * t396;
t324 = t524 * t393 + t521 * t395;
t323 = t522 * t400 - t610;
t322 = t519 * t400 + t609;
t321 = t546 * t562 + t530;
t320 = qJ(4) * t481 + t533;
t319 = pkin(3) * t481 + t329;
t318 = -t520 * t352 + t555;
t317 = -t520 * t349 - t555;
t308 = (-t474 + t548) * pkin(3) + t527;
t307 = -pkin(3) * t548 + qJ(4) * t471 - t527;
t306 = -t521 * t363 + t524 * t365;
t303 = t524 * t363 + t521 * t365;
t298 = t519 * t359 + t522 * t531;
t297 = t522 * t354 + t519 * t535;
t296 = -t522 * t359 + t519 * t531;
t295 = t519 * t354 - t522 * t535;
t294 = pkin(3) * t483 + qJ(4) * t491 - t533 + t619;
t293 = t516 * t345 - t515 * t368;
t292 = t515 * t345 + t516 * t368;
t291 = -t613 + pkin(3) * t489 + (-qJDD(3) - t484) * qJ(4) + t529;
t290 = -t520 * t339 + t523 * t359;
t289 = -t520 * t341 + t523 * t531;
t288 = t520 * t330 + t523 * t535;
t287 = -t523 * t330 + t520 * t535;
t286 = t516 * t304 - t594;
t285 = t515 * t304 + t406;
t284 = t520 * t322 + t523 * t354;
t283 = -t523 * t322 + t520 * t354;
t282 = -pkin(3) * t581 + t523 * t307 - t612;
t281 = -qJ(4) * t569 - t520 * t308 + t618;
t280 = t516 * t305 + t515 * t383;
t279 = t515 * t305 - t516 * t383;
t276 = -t520 * t295 + t523 * t414;
t275 = t523 * t329 + t520 * t533;
t274 = t520 * t329 - t523 * t533;
t273 = t516 * t318 - t515 * t350;
t272 = t516 * t317 - t515 * t351;
t271 = t515 * t318 + t516 * t350;
t270 = t515 * t317 + t516 * t351;
t269 = t520 * t296 + t523 * t380;
t268 = -t523 * t296 + t520 * t380;
t267 = -t520 * t319 + t523 * t320;
t266 = -t515 * t333 + t516 * t344 + t630;
t265 = -t515 * t332 + t516 * t343 + t625;
t264 = t516 * t290 - t515 * t342;
t263 = t516 * t289 - t515 * t340;
t262 = t515 * t290 + t516 * t342;
t261 = t515 * t289 + t516 * t340;
t260 = t516 * t288 + t515 * t331;
t259 = t515 * t288 - t516 * t331;
t258 = t516 * t333 + t515 * t344 - t628;
t257 = t516 * t332 + t515 * t343 - t623;
t254 = t516 * t267 - t515 * t466 - t594;
t253 = t515 * t267 + t516 * t466 + t406;
t252 = t516 * t284 + t515 * t323;
t251 = t515 * t284 - t516 * t323;
t249 = pkin(4) * t296 - qJ(4) * t298;
t248 = t516 * t275 + t515 * t321;
t247 = t515 * t275 - t516 * t321;
t246 = t516 * t276 - t515 * t297;
t245 = t515 * t276 + t516 * t297;
t244 = t516 * t269 + t515 * t298;
t243 = t515 * t269 - t516 * t298;
t242 = -t521 * t279 + t524 * t280;
t241 = t524 * t279 + t521 * t280;
t240 = -pkin(2) * t274 + pkin(3) * t533 - qJ(4) * t329;
t239 = t516 * t281 - t515 * t294 - t625;
t238 = pkin(4) * t535 - t597 * t331 - t584;
t237 = t516 * t282 - t515 * t291 - t630;
t236 = pkin(4) * t354 - t597 * t323 + t572;
t235 = -pkin(6) * t274 + t321 * t538;
t234 = t515 * t281 + t516 * t294 + t623;
t233 = t515 * t282 + t516 * t291 + t628;
t232 = -qJ(2) * t279 - (pkin(2) * t515 - pkin(6) * t516) * t304;
t231 = pkin(4) * t330 - qJ(4) * t331 - t256;
t230 = pkin(4) * t322 - qJ(4) * t323 - t255;
t229 = -t521 * t259 + t524 * t260;
t228 = t524 * t259 + t521 * t260;
t227 = -pkin(2) * t287 - qJ(4) * t535 + t597 * t330 - t572;
t224 = -t521 * t251 + t524 * t252;
t223 = t524 * t251 + t521 * t252;
t222 = -pkin(2) * t283 - qJ(4) * t354 + t597 * t322 - t584;
t221 = qJ(2) * t280 - (-pkin(2) * t516 - pkin(6) * t515 - pkin(1)) * t304;
t220 = -t521 * t247 + t524 * t248;
t219 = t524 * t247 + t521 * t248;
t218 = t520 * t225 + t523 * t300;
t217 = -t523 * t225 + t520 * t300;
t216 = -t521 * t243 + t524 * t244;
t215 = t524 * t243 + t521 * t244;
t214 = pkin(4) * t380 - t597 * t298 - t226;
t213 = -pkin(6) * t287 + t523 * t231 - t520 * t238;
t212 = -pkin(6) * t283 + t523 * t230 - t520 * t236;
t211 = -qJ(2) * t247 + t516 * t235 - t515 * t240;
t210 = -pkin(2) * t268 - qJ(4) * t380 + t597 * t296 + t225;
t209 = pkin(4) * t225 - qJ(4) * t226;
t208 = pkin(4) * t300 - t597 * t226;
t207 = t516 * t218 + t515 * t226;
t206 = t515 * t218 - t516 * t226;
t205 = -pkin(1) * t274 + qJ(2) * t248 + t515 * t235 + t516 * t240;
t204 = -pkin(6) * t268 - t520 * t214 + t523 * t249;
t203 = -qJ(2) * t259 + t516 * t213 - t515 * t227;
t202 = -qJ(2) * t251 + t516 * t212 - t515 * t222;
t201 = -pkin(2) * t217 - qJ(4) * t300 + t597 * t225;
t200 = -pkin(1) * t287 + qJ(2) * t260 + t515 * t213 + t516 * t227;
t199 = -pkin(1) * t283 + qJ(2) * t252 + t515 * t212 + t516 * t222;
t198 = -t521 * t206 + t524 * t207;
t197 = t524 * t206 + t521 * t207;
t196 = -qJ(2) * t243 + t516 * t204 - t515 * t210;
t195 = -pkin(1) * t268 + qJ(2) * t244 + t515 * t204 + t516 * t210;
t194 = -pkin(6) * t217 - t520 * t208 + t523 * t209;
t193 = -qJ(2) * t206 + t516 * t194 - t515 * t201;
t192 = -pkin(1) * t217 + qJ(2) * t207 + t515 * t194 + t516 * t201;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t479, -t480, 0, t417, 0, 0, 0, 0, 0, 0, -t601, -t408, 0, t278, 0, 0, 0, 0, 0, 0, t313, t316, t348, t242, 0, 0, 0, 0, 0, 0, t348, -t313, -t316, t220, 0, 0, 0, 0, 0, 0, t224, t229, t216, t198; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t480, -t479, 0, t416, 0, 0, 0, 0, 0, 0, t408, -t601, 0, -t616, 0, 0, 0, 0, 0, 0, -t310, -t311, t347, t241, 0, 0, 0, 0, 0, 0, t347, t310, t311, t219, 0, 0, 0, 0, 0, 0, t223, t228, t215, t197; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t512, 0, 0, 0, 0, 0, 0, t420, -t422, 0, -t304, 0, 0, 0, 0, 0, 0, 0, -t420, t422, t274, 0, 0, 0, 0, 0, 0, t283, t287, t268, t217; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t480, 0, -t479, 0, t540, -t443, -t416, -pkin(5) * t416, 0, 0, t408, 0, -t601, 0, t615, t606, t616, pkin(5) * t616 + qJ(2) * t566 - t521 * t328, t327, t306, -t626, t326, t621, t361, -t521 * t257 + t524 * t265 + t632, -t521 * t258 + t524 * t266 + t634, -t521 * t285 + t524 * t286 - t595, -pkin(5) * t241 - t521 * t221 + t524 * t232, t361, t626, -t621, t327, t306, t326, -t521 * t253 + t524 * t254 - t595, -t521 * t234 + t524 * t239 - t632, -t521 * t233 + t524 * t237 - t634, -pkin(5) * t219 - t521 * t205 + t524 * t211, -t521 * t271 + t524 * t273, -t521 * t245 + t524 * t246, -t521 * t262 + t524 * t264, -t521 * t270 + t524 * t272, -t521 * t261 + t524 * t263, -t521 * t292 + t524 * t293, -pkin(5) * t223 - t521 * t199 + t524 * t202, -pkin(5) * t228 - t521 * t200 + t524 * t203, -pkin(5) * t215 - t521 * t195 + t524 * t196, -pkin(5) * t197 - t192 * t521 + t193 * t524; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t479, 0, t480, 0, t443, t540, t417, pkin(5) * t417, 0, 0, t601, 0, t408, 0, -t606, t615, t278, pkin(5) * t278 + qJ(2) * t575 + t328 * t524, t325, t303, t627, t324, -t622, t360, t257 * t524 + t265 * t521 + t631, t258 * t524 + t266 * t521 + t633, t285 * t524 + t286 * t521 + t346, pkin(5) * t242 + t221 * t524 + t232 * t521, t360, -t627, t622, t325, t303, t324, t253 * t524 + t254 * t521 + t346, t234 * t524 + t239 * t521 - t631, t233 * t524 + t237 * t521 - t633, pkin(5) * t220 + t205 * t524 + t211 * t521, t271 * t524 + t273 * t521, t245 * t524 + t246 * t521, t262 * t524 + t264 * t521, t270 * t524 + t272 * t521, t261 * t524 + t263 * t521, t292 * t524 + t293 * t521, pkin(5) * t224 + t199 * t524 + t202 * t521, pkin(5) * t229 + t200 * t524 + t203 * t521, pkin(5) * t216 + t195 * t524 + t196 * t521, pkin(5) * t198 + t192 * t524 + t193 * t521; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t486, t487, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t477 - t401, -pkin(1) * t476 - t402, 0, -pkin(1) * t337, t419, t404, t536, t418, t600, 0, pkin(2) * t474 - t570 - t624, -pkin(2) * t471 + t582 - t629, t305 + t553, pkin(1) * t279 - pkin(2) * t383 + pkin(6) * t305, 0, -t536, -t600, t419, t404, t418, t319 * t523 + t320 * t520 + t553, t523 * t308 + (-pkin(2) - t593) * t474 + t624, t520 * t307 + (pkin(2) + t596) * t471 + t629, pkin(1) * t247 + pkin(6) * t275 + (-pkin(2) + t539) * t321, t352 * t523 + t556, t295 * t523 + t414 * t520, t339 * t523 + t359 * t520, t349 * t523 - t556, t341 * t523 + t520 * t531, t367 * t523 + t455 * t520, pkin(1) * t251 - pkin(2) * t323 + pkin(6) * t284 + t230 * t520 + t236 * t523, pkin(1) * t259 - pkin(2) * t331 + pkin(6) * t288 + t231 * t520 + t238 * t523, pkin(1) * t243 - pkin(2) * t298 + pkin(6) * t269 + t214 * t523 + t249 * t520, pkin(1) * t206 - pkin(2) * t226 + pkin(6) * t218 + t208 * t523 + t209 * t520;];
tauB_reg = t1;
