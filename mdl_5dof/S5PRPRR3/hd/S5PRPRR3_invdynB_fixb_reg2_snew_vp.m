% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRPRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d4,d5,theta1,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:48
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRPRR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRR3_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRR3_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRPRR3_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:47:40
% EndTime: 2019-12-05 15:47:57
% DurationCPUTime: 8.78s
% Computational Cost: add. (23677->496), mult. (44051->764), div. (0->0), fcn. (30040->10), ass. (0->339)
t469 = sin(pkin(8));
t468 = sin(pkin(9));
t470 = cos(pkin(9));
t480 = qJD(2) ^ 2;
t435 = t468 * qJDD(2) + t470 * t480;
t436 = t470 * qJDD(2) - t468 * t480;
t475 = sin(qJ(2));
t478 = cos(qJ(2));
t489 = -t475 * t435 + t478 * t436;
t544 = t469 * t489;
t471 = cos(pkin(8));
t543 = t471 * t489;
t466 = g(3) - qJDD(1);
t485 = t471 * g(1) + t469 * g(2);
t410 = -t475 * t466 - t478 * t485;
t402 = -t480 * pkin(2) + t410;
t409 = t478 * t466 - t475 * t485;
t481 = qJDD(2) * pkin(2) - t409;
t335 = t468 * t402 - t470 * t481;
t336 = t470 * t402 + t468 * t481;
t491 = t468 * t335 + t470 * t336;
t278 = t470 * t335 - t468 * t336;
t508 = t478 * t278;
t227 = -t475 * t491 + t508;
t517 = t475 * t278;
t228 = t478 * t491 + t517;
t442 = t469 * g(1) - t471 * g(2);
t434 = -qJDD(3) + t442;
t381 = qJ(3) * t435 - t470 * t434;
t484 = -qJ(3) * t436 - t468 * t434;
t298 = -pkin(5) * t489 + t475 * t381 + t478 * t484;
t473 = sin(qJ(5));
t476 = cos(qJ(5));
t477 = cos(qJ(4));
t474 = sin(qJ(4));
t506 = qJD(2) * t474;
t415 = -t476 * t477 * qJD(2) + t473 * t506;
t417 = (t473 * t477 + t474 * t476) * qJD(2);
t369 = t417 * t415;
t501 = qJDD(4) + qJDD(5);
t536 = -t369 + t501;
t542 = t473 * t536;
t541 = t476 * t536;
t534 = t478 * t435 + t475 * t436;
t299 = pkin(5) * t534 + t478 * t381 - t475 * t484;
t463 = qJD(4) + qJD(5);
t412 = t463 * t415;
t504 = qJD(2) * qJD(4);
t497 = t477 * t504;
t502 = t474 * qJDD(2);
t431 = t497 + t502;
t457 = t477 * qJDD(2);
t498 = t474 * t504;
t432 = t457 - t498;
t482 = t415 * qJD(5) - t476 * t431 - t473 * t432;
t535 = -t412 - t482;
t425 = t471 * t442;
t533 = t469 * t485 - t425;
t490 = t473 * t431 - t476 * t432;
t316 = (qJD(5) - t463) * t417 + t490;
t413 = t415 ^ 2;
t414 = t417 ^ 2;
t461 = t463 ^ 2;
t531 = t463 * t473;
t530 = t463 * t476;
t464 = t474 ^ 2;
t529 = t464 * t480;
t465 = t477 ^ 2;
t459 = t465 * t480;
t439 = t478 * qJDD(2) - t475 * t480;
t528 = t469 * t439;
t527 = t469 * t442;
t526 = t469 * t466;
t525 = t471 * t439;
t524 = t471 * t466;
t332 = -qJDD(2) * pkin(3) - t480 * pkin(6) + t335;
t445 = qJD(4) * pkin(4) - pkin(7) * t506;
t300 = -t432 * pkin(4) - pkin(7) * t459 + t445 * t506 + t332;
t523 = t473 * t300;
t362 = t369 + t501;
t522 = t473 * t362;
t333 = -t480 * pkin(3) + qJDD(2) * pkin(6) + t336;
t307 = t474 * t333 + t477 * t434;
t450 = t474 * t480 * t477;
t443 = qJDD(4) + t450;
t283 = (-t431 + t497) * pkin(7) + t443 * pkin(4) - t307;
t308 = t477 * t333 - t474 * t434;
t284 = -pkin(4) * t459 + t432 * pkin(7) - qJD(4) * t445 + t308;
t235 = -t476 * t283 + t473 * t284;
t236 = t473 * t283 + t476 * t284;
t197 = -t476 * t235 + t473 * t236;
t521 = t474 * t197;
t520 = t474 * t332;
t519 = t474 * t443;
t444 = qJDD(4) - t450;
t518 = t474 * t444;
t514 = t476 * t300;
t513 = t476 * t362;
t512 = t477 * t197;
t511 = t477 * t332;
t510 = t477 * t443;
t509 = t477 * t444;
t507 = t464 + t465;
t503 = t471 * qJDD(2);
t500 = t468 * t369;
t499 = t470 * t369;
t254 = t474 * t307 + t477 * t308;
t437 = t507 * qJDD(2);
t440 = t459 + t529;
t379 = t468 * t437 + t470 * t440;
t382 = t470 * t437 - t468 * t440;
t325 = t478 * t379 + t475 * t382;
t326 = -t475 * t379 + t478 * t382;
t496 = -pkin(1) * t325 - pkin(2) * t379 - pkin(3) * t440 - pkin(6) * t437 + qJ(1) * t326 - t254;
t495 = pkin(1) * t534 + pkin(2) * t435 - qJ(1) * t489 + t336;
t494 = -pkin(1) * t489 - pkin(2) * t436 - qJ(1) * t534 + t335;
t438 = t475 * qJDD(2) + t478 * t480;
t493 = -pkin(1) * t438 + qJ(1) * t439 - t410;
t492 = pkin(1) * t439 + qJ(1) * t438 - t409;
t198 = t473 * t235 + t476 * t236;
t345 = t475 * t409 + t478 * t410;
t384 = -t471 * t485 - t527;
t487 = t468 * t450;
t486 = t470 * t450;
t389 = pkin(5) * t438 - t478 * t442;
t388 = -pkin(5) * t439 - t475 * t442;
t253 = t477 * t307 - t474 * t308;
t344 = t478 * t409 - t475 * t410;
t479 = qJD(4) ^ 2;
t455 = t469 * qJDD(2);
t449 = -t459 - t479;
t448 = t459 - t479;
t447 = -t479 - t529;
t446 = t479 - t529;
t441 = t459 - t529;
t433 = t457 - 0.2e1 * t498;
t430 = 0.2e1 * t497 + t502;
t429 = t507 * t504;
t424 = t471 * t438;
t423 = t469 * t438;
t408 = -t414 + t461;
t407 = t413 - t461;
t406 = t477 * t431 - t464 * t504;
t405 = -t474 * t432 - t465 * t504;
t404 = t468 * qJDD(4) + t470 * t429;
t403 = -t470 * qJDD(4) + t468 * t429;
t400 = -t414 - t461;
t399 = -t474 * t447 - t509;
t398 = -t474 * t446 + t510;
t397 = t477 * t449 - t519;
t396 = t477 * t448 - t518;
t395 = t477 * t447 - t518;
t394 = -t477 * t446 - t519;
t393 = t474 * t449 + t510;
t392 = -t474 * t448 - t509;
t391 = (-t431 - t497) * t474;
t390 = (-t432 + t498) * t477;
t371 = -t474 * t430 + t477 * t433;
t370 = -t477 * t430 - t474 * t433;
t366 = -t414 + t413;
t365 = t471 * t534;
t364 = t469 * t534;
t360 = -t461 - t413;
t359 = t470 * t406 - t487;
t358 = t470 * t405 + t487;
t357 = t468 * t406 + t486;
t356 = t468 * t405 - t486;
t355 = t470 * t398 + t468 * t502;
t354 = t470 * t396 + t468 * t457;
t353 = t468 * t398 - t470 * t502;
t352 = t468 * t396 - t470 * t457;
t351 = t470 * t399 + t468 * t430;
t350 = t470 * t397 - t468 * t433;
t349 = t468 * t399 - t470 * t430;
t348 = t468 * t397 + t470 * t433;
t347 = (-t415 * t476 + t417 * t473) * t463;
t346 = (-t415 * t473 - t417 * t476) * t463;
t342 = -t413 - t414;
t340 = -t417 * qJD(5) - t490;
t339 = t470 * t371 - t468 * t441;
t338 = t468 * t371 + t470 * t441;
t337 = -t475 * t403 + t478 * t404;
t331 = t476 * t407 - t522;
t330 = -t473 * t408 + t541;
t329 = t473 * t407 + t513;
t328 = t476 * t408 + t542;
t324 = t471 * t345 - t527;
t323 = t469 * t345 + t425;
t322 = -t473 * t400 - t513;
t321 = t476 * t400 - t522;
t320 = -t412 + t482;
t315 = (qJD(5) + t463) * t417 + t490;
t314 = -t417 * t531 - t476 * t482;
t313 = t417 * t530 - t473 * t482;
t312 = -t473 * t340 + t415 * t530;
t311 = t476 * t340 + t415 * t531;
t310 = t476 * t360 - t542;
t309 = t473 * t360 + t541;
t306 = -t475 * t357 + t478 * t359;
t305 = -t475 * t356 + t478 * t358;
t304 = -t475 * t353 + t478 * t355;
t303 = -t475 * t352 + t478 * t354;
t302 = -pkin(6) * t395 + t511;
t301 = -pkin(6) * t393 + t520;
t297 = -t475 * t349 + t478 * t351;
t296 = -t475 * t348 + t478 * t350;
t295 = t478 * t349 + t475 * t351;
t294 = t478 * t348 + t475 * t350;
t293 = -t474 * t346 + t477 * t347;
t292 = -t477 * t346 - t474 * t347;
t289 = -t475 * t338 + t478 * t339;
t288 = -pkin(3) * t395 + t308;
t287 = -pkin(3) * t393 + t307;
t286 = t470 * t293 + t468 * t501;
t285 = t468 * t293 - t470 * t501;
t275 = t471 * t297 + t469 * t395;
t274 = t471 * t296 + t469 * t393;
t273 = t469 * t297 - t471 * t395;
t272 = t469 * t296 - t471 * t393;
t271 = pkin(2) * t434 + qJ(3) * t491;
t270 = -t474 * t329 + t477 * t331;
t269 = -t474 * t328 + t477 * t330;
t268 = -t477 * t329 - t474 * t331;
t267 = -t477 * t328 - t474 * t330;
t266 = -t474 * t321 + t477 * t322;
t265 = t477 * t321 + t474 * t322;
t264 = -t316 * t476 - t473 * t320;
t263 = -t476 * t315 - t473 * t535;
t262 = -t316 * t473 + t476 * t320;
t261 = -t473 * t315 + t476 * t535;
t260 = -t474 * t313 + t477 * t314;
t259 = -t474 * t311 + t477 * t312;
t258 = -t477 * t313 - t474 * t314;
t257 = -t477 * t311 - t474 * t312;
t256 = -t474 * t309 + t477 * t310;
t255 = t477 * t309 + t474 * t310;
t252 = -pkin(7) * t321 + t514;
t250 = -pkin(7) * t309 + t523;
t249 = t470 * t260 + t500;
t248 = t470 * t259 - t500;
t247 = t468 * t260 - t499;
t246 = t468 * t259 + t499;
t245 = -qJ(3) * t379 + t470 * t253;
t244 = qJ(3) * t382 + t468 * t253;
t243 = t470 * t270 - t468 * t316;
t242 = t470 * t269 - t468 * t320;
t241 = t468 * t270 + t470 * t316;
t240 = t468 * t269 + t470 * t320;
t239 = t470 * t266 + t468 * t535;
t238 = t468 * t266 - t470 * t535;
t237 = -t475 * t285 + t478 * t286;
t233 = t470 * t254 + t468 * t332;
t232 = t468 * t254 - t470 * t332;
t231 = -pkin(4) * t535 + pkin(7) * t322 + t523;
t230 = t470 * t256 + t468 * t315;
t229 = t468 * t256 - t470 * t315;
t225 = -pkin(1) * t295 - pkin(2) * t349 + pkin(3) * t430 - pkin(6) * t399 - t520;
t224 = -pkin(1) * t294 - pkin(2) * t348 - pkin(3) * t433 - pkin(6) * t397 + t511;
t223 = -pkin(4) * t315 + pkin(7) * t310 - t514;
t222 = -qJ(3) * t349 - t468 * t288 + t470 * t302;
t221 = -qJ(3) * t348 - t468 * t287 + t470 * t301;
t220 = t471 * t228 - t469 * t434;
t219 = t469 * t228 + t471 * t434;
t218 = -pkin(2) * t395 + qJ(3) * t351 + t470 * t288 + t468 * t302;
t217 = -pkin(2) * t393 + qJ(3) * t350 + t470 * t287 + t468 * t301;
t215 = -t474 * t262 + t477 * t264;
t214 = -t474 * t261 + t477 * t263;
t213 = t477 * t262 + t474 * t264;
t212 = -t477 * t261 - t474 * t263;
t211 = t470 * t214 - t468 * t366;
t210 = t468 * t214 + t470 * t366;
t209 = t470 * t215 + t468 * t342;
t208 = t468 * t215 - t470 * t342;
t207 = pkin(1) * t227 + pkin(2) * t278;
t206 = -t475 * t247 + t478 * t249;
t205 = -t475 * t246 + t478 * t248;
t204 = -t475 * t241 + t478 * t243;
t203 = -t475 * t240 + t478 * t242;
t202 = -pkin(3) * t213 - pkin(4) * t262;
t201 = -pkin(3) * t265 - pkin(4) * t321 + t236;
t200 = -t475 * t238 + t478 * t239;
t199 = t478 * t238 + t475 * t239;
t196 = -pkin(3) * t255 - pkin(4) * t309 + t235;
t195 = -pkin(5) * t325 - t475 * t244 + t478 * t245;
t194 = -t475 * t232 + t478 * t233;
t193 = t478 * t232 + t475 * t233;
t192 = -t475 * t229 + t478 * t230;
t191 = t478 * t229 + t475 * t230;
t190 = pkin(5) * t227 + qJ(3) * t508 - t475 * t271;
t189 = -pkin(6) * t265 - t474 * t231 + t477 * t252;
t188 = -pkin(4) * t300 + pkin(7) * t198;
t187 = -qJ(3) * t232 - (pkin(3) * t468 - pkin(6) * t470) * t253;
t186 = t471 * t200 + t469 * t265;
t185 = t469 * t200 - t471 * t265;
t184 = -pkin(6) * t255 - t474 * t223 + t477 * t250;
t183 = -pkin(7) * t262 - t197;
t182 = -pkin(5) * t295 - t475 * t218 + t478 * t222;
t181 = -pkin(5) * t294 - t475 * t217 + t478 * t221;
t180 = t471 * t194 - t253 * t469;
t179 = t469 * t194 + t253 * t471;
t178 = -pkin(4) * t342 + pkin(7) * t264 + t198;
t177 = t471 * t192 + t469 * t255;
t176 = t469 * t192 - t471 * t255;
t175 = -t475 * t210 + t478 * t211;
t174 = -t475 * t208 + t478 * t209;
t173 = t478 * t208 + t475 * t209;
t172 = qJ(3) * t233 - (-pkin(3) * t470 - pkin(6) * t468 - pkin(2)) * t253;
t171 = t477 * t198 - t521;
t170 = t474 * t198 + t512;
t169 = -pkin(1) * t193 - pkin(2) * t232 + pkin(3) * t332 - pkin(6) * t254;
t168 = t471 * t174 + t469 * t213;
t167 = t469 * t174 - t471 * t213;
t166 = t470 * t171 + t468 * t300;
t165 = t468 * t171 - t470 * t300;
t164 = -qJ(3) * t238 + t470 * t189 - t468 * t201;
t163 = -pkin(1) * t199 - pkin(2) * t238 + pkin(3) * t535 - pkin(6) * t266 - t477 * t231 - t474 * t252;
t162 = -qJ(3) * t229 + t470 * t184 - t468 * t196;
t161 = -pkin(2) * t265 + qJ(3) * t239 + t468 * t189 + t470 * t201;
t160 = -pkin(3) * t170 - pkin(4) * t197;
t159 = -pkin(1) * t191 - pkin(2) * t229 + pkin(3) * t315 - pkin(6) * t256 - t477 * t223 - t474 * t250;
t158 = -pkin(2) * t255 + qJ(3) * t230 + t468 * t184 + t470 * t196;
t157 = -pkin(6) * t213 - t474 * t178 + t477 * t183;
t156 = -pkin(5) * t193 - t475 * t172 + t478 * t187;
t155 = -pkin(6) * t170 - pkin(7) * t512 - t474 * t188;
t154 = -t475 * t165 + t478 * t166;
t153 = t478 * t165 + t475 * t166;
t152 = -qJ(3) * t208 + t470 * t157 - t468 * t202;
t151 = -pkin(2) * t213 + qJ(3) * t209 + t468 * t157 + t470 * t202;
t150 = -pkin(1) * t173 - pkin(2) * t208 + pkin(3) * t342 - pkin(6) * t215 - t477 * t178 - t474 * t183;
t149 = t471 * t154 + t469 * t170;
t148 = t469 * t154 - t471 * t170;
t147 = -pkin(5) * t199 - t475 * t161 + t478 * t164;
t146 = -pkin(5) * t191 - t475 * t158 + t478 * t162;
t145 = -qJ(3) * t165 + t470 * t155 - t468 * t160;
t144 = -pkin(1) * t153 - pkin(2) * t165 + pkin(3) * t300 - pkin(6) * t171 + pkin(7) * t521 - t477 * t188;
t143 = -pkin(2) * t170 + qJ(3) * t166 + t468 * t155 + t470 * t160;
t142 = -pkin(5) * t173 - t475 * t151 + t478 * t152;
t141 = -pkin(5) * t153 - t475 * t143 + t478 * t145;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t384, 0, 0, 0, 0, 0, 0, -t424, -t525, 0, t324, 0, 0, 0, 0, 0, 0, -t365, -t543, 0, t220, 0, 0, 0, 0, 0, 0, t274, t275, t471 * t326, t180, 0, 0, 0, 0, 0, 0, t177, t186, t168, t149; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t533, 0, 0, 0, 0, 0, 0, -t423, -t528, 0, t323, 0, 0, 0, 0, 0, 0, -t364, -t544, 0, t219, 0, 0, 0, 0, 0, 0, t272, t273, t469 * t326, t179, 0, 0, 0, 0, 0, 0, t176, t185, t167, t148; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t466, 0, 0, 0, 0, 0, 0, t439, -t438, 0, -t344, 0, 0, 0, 0, 0, 0, t489, -t534, 0, -t227, 0, 0, 0, 0, 0, 0, t294, t295, t325, t193, 0, 0, 0, 0, 0, 0, t191, t199, t173, t153; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t526, -t524, t533, qJ(1) * t533, 0, 0, t525, 0, -t424, t455, t471 * t388 + t469 * t492, t471 * t389 + t469 * t493, t471 * t344, -qJ(1) * t323 - (pkin(1) * t469 - pkin(5) * t471) * t344, 0, 0, t543, 0, -t365, t455, t471 * t298 - t469 * t494, t471 * t299 - t469 * t495, t471 * t227, -qJ(1) * t219 + t471 * t190 - t469 * t207, t471 * t306 - t469 * t391, t471 * t289 - t469 * t370, t471 * t304 - t469 * t394, t471 * t305 - t469 * t390, t471 * t303 - t469 * t392, t471 * t337, -qJ(1) * t272 + t471 * t181 - t469 * t224, -qJ(1) * t273 + t471 * t182 - t469 * t225, t471 * t195 - t469 * t496, -qJ(1) * t179 + t471 * t156 - t469 * t169, t471 * t206 - t469 * t258, t471 * t175 - t469 * t212, t471 * t203 - t469 * t267, t471 * t205 - t469 * t257, t471 * t204 - t469 * t268, t471 * t237 - t469 * t292, -qJ(1) * t176 + t471 * t146 - t469 * t159, -qJ(1) * t185 + t471 * t147 - t469 * t163, -qJ(1) * t167 + t471 * t142 - t469 * t150, -qJ(1) * t148 + t471 * t141 - t469 * t144; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t524, -t526, t384, qJ(1) * t384, 0, 0, t528, 0, -t423, -t503, t469 * t388 - t471 * t492, t469 * t389 - t471 * t493, t469 * t344, qJ(1) * t324 - (-pkin(1) * t471 - pkin(5) * t469) * t344, 0, 0, t544, 0, -t364, -t503, t469 * t298 + t471 * t494, t469 * t299 + t471 * t495, t469 * t227, qJ(1) * t220 + t469 * t190 + t471 * t207, t469 * t306 + t471 * t391, t469 * t289 + t471 * t370, t469 * t304 + t471 * t394, t469 * t305 + t471 * t390, t469 * t303 + t471 * t392, t469 * t337, qJ(1) * t274 + t469 * t181 + t471 * t224, qJ(1) * t275 + t469 * t182 + t471 * t225, t469 * t195 + t471 * t496, qJ(1) * t180 + t469 * t156 + t471 * t169, t469 * t206 + t471 * t258, t469 * t175 + t471 * t212, t469 * t203 + t471 * t267, t469 * t205 + t471 * t257, t469 * t204 + t471 * t268, t469 * t237 + t471 * t292, qJ(1) * t177 + t469 * t146 + t471 * t159, qJ(1) * t186 + t469 * t147 + t471 * t163, qJ(1) * t168 + t469 * t142 + t471 * t150, qJ(1) * t149 + t469 * t141 + t471 * t144; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t442, t485, 0, 0, 0, 0, t438, 0, t439, 0, -t389, t388, t345, pkin(1) * t442 + pkin(5) * t345, 0, 0, t534, 0, t489, 0, -t299, t298, t228, pkin(1) * t434 + pkin(5) * t228 + qJ(3) * t517 + t478 * t271, t478 * t357 + t475 * t359, t478 * t338 + t475 * t339, t478 * t353 + t475 * t355, t478 * t356 + t475 * t358, t478 * t352 + t475 * t354, t478 * t403 + t475 * t404, -pkin(1) * t393 + pkin(5) * t296 + t478 * t217 + t475 * t221, -pkin(1) * t395 + pkin(5) * t297 + t478 * t218 + t475 * t222, pkin(5) * t326 + t478 * t244 + t475 * t245, pkin(1) * t253 + pkin(5) * t194 + t478 * t172 + t475 * t187, t478 * t247 + t475 * t249, t478 * t210 + t475 * t211, t478 * t240 + t475 * t242, t478 * t246 + t475 * t248, t478 * t241 + t475 * t243, t478 * t285 + t475 * t286, -pkin(1) * t255 + pkin(5) * t192 + t478 * t158 + t475 * t162, -pkin(1) * t265 + pkin(5) * t200 + t478 * t161 + t475 * t164, -pkin(1) * t213 + pkin(5) * t174 + t478 * t151 + t475 * t152, -pkin(1) * t170 + pkin(5) * t154 + t478 * t143 + t475 * t145;];
tauB_reg = t1;
