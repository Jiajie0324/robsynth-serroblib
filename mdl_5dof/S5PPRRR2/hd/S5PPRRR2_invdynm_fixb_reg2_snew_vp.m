% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5PPRRR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d4,d5,theta1,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:15
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5PPRRR2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRRR2_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRRR2_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRRR2_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRRR2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PPRRR2_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:15:05
% EndTime: 2019-12-05 15:15:15
% DurationCPUTime: 10.60s
% Computational Cost: add. (38876->524), mult. (73373->753), div. (0->0), fcn. (52936->10), ass. (0->357)
t864 = sin(pkin(9));
t862 = g(3) - qJDD(1);
t866 = cos(pkin(9));
t865 = sin(pkin(8));
t867 = cos(pkin(8));
t921 = t867 * g(1) + t865 * g(2);
t803 = -t864 * t862 - t866 * t921;
t871 = sin(qJ(3));
t874 = cos(qJ(3));
t899 = t866 * t862 - t864 * t921;
t741 = t871 * t803 + t874 * t899;
t742 = t874 * t803 - t871 * t899;
t903 = t871 * t741 + t874 * t742;
t668 = t874 * t741 - t871 * t742;
t934 = t866 * t668;
t618 = -t864 * t903 + t934;
t940 = t864 * t668;
t960 = t866 * t903 + t940;
t840 = t865 * g(1) - t867 * g(2);
t834 = -qJDD(2) + t840;
t915 = t871 * qJDD(3);
t947 = qJD(3) ^ 2;
t836 = t874 * t947 + t915;
t781 = pkin(5) * t836 - t874 * t834;
t913 = t874 * qJDD(3);
t837 = -t871 * t947 + t913;
t889 = -pkin(5) * t837 - t871 * t834;
t901 = -t864 * t836 + t866 * t837;
t959 = -qJ(2) * t901 + t864 * t781 + t866 * t889;
t869 = sin(qJ(5));
t872 = cos(qJ(5));
t873 = cos(qJ(4));
t870 = sin(qJ(4));
t920 = qJD(3) * t870;
t810 = -t872 * t873 * qJD(3) + t869 * t920;
t812 = (t869 * t873 + t870 * t872) * qJD(3);
t767 = t812 * t810;
t859 = qJDD(4) + qJDD(5);
t952 = -t767 + t859;
t958 = t869 * t952;
t957 = t872 * t952;
t770 = t866 * t836 + t864 * t837;
t685 = qJ(2) * t770 + t866 * t781 - t864 * t889;
t732 = -t947 * pkin(3) + qJDD(3) * pkin(6) + t742;
t708 = t870 * t732 + t873 * t834;
t709 = t873 * t732 - t870 * t834;
t650 = t870 * t708 + t873 * t709;
t917 = qJD(3) * qJD(4);
t851 = t873 * t917;
t916 = t870 * qJDD(3);
t831 = t851 + t916;
t907 = t870 * t917;
t914 = t873 * qJDD(3);
t878 = t907 - t914;
t744 = -t810 * qJD(5) + t872 * t831 - t869 * t878;
t860 = qJD(4) + qJD(5);
t807 = t860 * t810;
t951 = -t807 + t744;
t950 = t866 * t803 + t864 * t899;
t902 = t869 * t831 + t872 * t878;
t713 = (qJD(5) - t860) * t812 + t902;
t738 = -t864 * t803 + t866 * t899;
t808 = t810 ^ 2;
t809 = t812 ^ 2;
t858 = t860 ^ 2;
t948 = t873 ^ 2;
t946 = pkin(2) * t668;
t848 = t870 * t947 * t873;
t841 = qJDD(4) + t848;
t670 = (-t831 + t851) * pkin(7) + t841 * pkin(4) - t708;
t843 = qJD(4) * pkin(4) - pkin(7) * t920;
t854 = t948 * t947;
t673 = -pkin(4) * t854 - pkin(7) * t878 - qJD(4) * t843 + t709;
t622 = -t872 * t670 + t869 * t673;
t623 = t869 * t670 + t872 * t673;
t576 = -t872 * t622 + t869 * t623;
t945 = pkin(4) * t576;
t717 = t807 + t744;
t653 = -t713 * t869 - t872 * t717;
t944 = pkin(4) * t653;
t943 = t812 * t860;
t942 = t860 * t869;
t941 = t860 * t872;
t813 = t864 * t834;
t936 = t865 * t834;
t935 = t865 * t862;
t814 = t866 * t834;
t815 = t867 * t834;
t933 = t867 * t862;
t731 = -qJDD(3) * pkin(3) - t947 * pkin(6) + t741;
t689 = pkin(4) * t878 - pkin(7) * t854 + t843 * t920 + t731;
t932 = t869 * t689;
t764 = t767 + t859;
t931 = t869 * t764;
t930 = t870 * t576;
t727 = t870 * t731;
t929 = t870 * t841;
t842 = qJDD(4) - t848;
t928 = t870 * t842;
t927 = t872 * t689;
t926 = t872 * t764;
t925 = t873 * t576;
t728 = t873 * t731;
t924 = t873 * t841;
t923 = t873 * t842;
t922 = -pkin(3) * t731 + pkin(6) * t650;
t861 = t870 ^ 2;
t919 = t861 * t947;
t912 = t861 + t948;
t911 = t871 * t767;
t910 = t874 * t767;
t875 = qJD(4) ^ 2;
t845 = -t875 - t919;
t794 = -t870 * t845 - t923;
t830 = 0.2e1 * t851 + t916;
t909 = -pkin(3) * t830 + pkin(6) * t794 + t727;
t847 = -t854 - t875;
t792 = t873 * t847 - t929;
t832 = -0.2e1 * t907 + t914;
t908 = pkin(3) * t832 + pkin(6) * t792 - t728;
t835 = t912 * qJDD(3);
t838 = t854 + t919;
t776 = t871 * t835 + t874 * t838;
t777 = t874 * t835 - t871 * t838;
t721 = t866 * t776 + t864 * t777;
t894 = pkin(3) * t838 + pkin(6) * t835 + t650;
t880 = pkin(2) * t776 + t894;
t600 = -pkin(1) * t721 - t880;
t722 = -t864 * t776 + t866 * t777;
t906 = qJ(1) * t722 + t600;
t890 = -pkin(2) * t836 - t742;
t686 = pkin(1) * t770 - t890;
t905 = -qJ(1) * t901 + t686;
t886 = pkin(2) * t837 - t741;
t687 = -pkin(1) * t901 - t886;
t904 = -qJ(1) * t770 + t687;
t577 = t869 * t622 + t872 * t623;
t898 = -t865 * t840 - t867 * t921;
t655 = -t713 * t872 + t869 * t717;
t747 = -t808 - t809;
t555 = -pkin(4) * t747 + pkin(7) * t655 + t577;
t562 = -pkin(7) * t653 - t576;
t599 = -t870 * t653 + t873 * t655;
t897 = -pkin(3) * t747 + pkin(6) * t599 + t873 * t555 + t870 * t562;
t754 = -t858 - t808;
t701 = t872 * t754 - t958;
t712 = (qJD(5) + t860) * t812 + t902;
t604 = -pkin(4) * t712 + pkin(7) * t701 - t927;
t700 = t869 * t754 + t957;
t637 = -pkin(7) * t700 + t932;
t640 = -t870 * t700 + t873 * t701;
t896 = -pkin(3) * t712 + pkin(6) * t640 + t873 * t604 + t870 * t637;
t795 = -t809 - t858;
t719 = -t869 * t795 - t926;
t612 = -pkin(4) * t951 + pkin(7) * t719 + t932;
t718 = t872 * t795 - t931;
t642 = -pkin(7) * t718 + t927;
t657 = -t870 * t718 + t873 * t719;
t895 = -pkin(3) * t951 + pkin(6) * t657 + t873 * t612 + t870 * t642;
t893 = t871 * t848;
t892 = t874 * t848;
t620 = t871 * t650 - t874 * t731;
t891 = pkin(2) * t620 + t922;
t649 = t873 * t708 - t870 * t709;
t751 = t871 * t794 - t874 * t830;
t888 = pkin(2) * t751 + t909;
t750 = t871 * t792 + t874 * t832;
t887 = pkin(2) * t750 + t908;
t885 = pkin(4) * t700 - t622;
t547 = t873 * t577 - t930;
t566 = -pkin(4) * t689 + pkin(7) * t577;
t884 = -pkin(3) * t689 + pkin(6) * t547 - pkin(7) * t930 + t873 * t566;
t590 = t871 * t599 - t874 * t747;
t883 = pkin(2) * t590 + t897;
t607 = t871 * t640 - t874 * t712;
t882 = pkin(2) * t607 + t896;
t624 = t871 * t657 - t874 * t951;
t881 = pkin(2) * t624 + t895;
t879 = -t867 * t840 + t865 * t921;
t877 = pkin(4) * t718 - t623;
t543 = t871 * t547 - t874 * t689;
t876 = pkin(2) * t543 + t884;
t846 = t854 - t875;
t844 = t875 - t919;
t839 = -t854 + t919;
t828 = pkin(1) * t834;
t827 = t912 * t917;
t805 = -t809 + t858;
t804 = t808 - t858;
t802 = t871 * qJDD(4) + t874 * t827;
t801 = t873 * t831 - t861 * t917;
t800 = -t874 * qJDD(4) + t871 * t827;
t799 = t870 * t878 - t948 * t917;
t793 = -t870 * t844 + t924;
t791 = t873 * t846 - t928;
t790 = t873 * t845 - t928;
t789 = t873 * t844 + t929;
t788 = t870 * t847 + t924;
t787 = t870 * t846 + t923;
t786 = (t831 + t851) * t870;
t785 = t851 * t870 + t873 * t878;
t769 = -t870 * t830 + t873 * t832;
t768 = t873 * t830 + t870 * t832;
t766 = t809 - t808;
t762 = t874 * t801 - t893;
t761 = t874 * t799 + t893;
t760 = t871 * t801 + t892;
t759 = t871 * t799 - t892;
t758 = t874 * t793 + t870 * t915;
t757 = t874 * t791 + t871 * t914;
t756 = t871 * t793 - t870 * t913;
t755 = t871 * t791 - t873 * t913;
t753 = t874 * t794 + t871 * t830;
t752 = t874 * t792 - t871 * t832;
t749 = (-t810 * t872 + t812 * t869) * t860;
t748 = (-t810 * t869 - t812 * t872) * t860;
t746 = t874 * t769 + t871 * t839;
t745 = t871 * t769 - t874 * t839;
t743 = -t812 * qJD(5) - t902;
t735 = -t864 * t800 + t866 * t802;
t734 = t866 * t800 + t864 * t802;
t726 = t872 * t804 - t931;
t725 = -t869 * t805 + t957;
t724 = t869 * t804 + t926;
t723 = t872 * t805 + t958;
t720 = qJ(2) * t950 + t828;
t707 = t872 * t744 - t812 * t942;
t706 = t869 * t744 + t812 * t941;
t705 = -t869 * t743 + t810 * t941;
t704 = t872 * t743 + t810 * t942;
t699 = -t864 * t760 + t866 * t762;
t698 = -t864 * t759 + t866 * t761;
t697 = t866 * t760 + t864 * t762;
t696 = t866 * t759 + t864 * t761;
t695 = -t864 * t756 + t866 * t758;
t694 = -t864 * t755 + t866 * t757;
t693 = t866 * t756 + t864 * t758;
t692 = t866 * t755 + t864 * t757;
t691 = -pkin(6) * t790 + t728;
t690 = -pkin(6) * t788 + t727;
t681 = -t864 * t751 + t866 * t753;
t680 = -t864 * t750 + t866 * t752;
t679 = t866 * t751 + t864 * t753;
t678 = t866 * t750 + t864 * t752;
t677 = -t870 * t748 + t873 * t749;
t676 = t873 * t748 + t870 * t749;
t675 = -pkin(3) * t790 + t709;
t674 = -pkin(3) * t788 + t708;
t672 = -t864 * t745 + t866 * t746;
t671 = t866 * t745 + t864 * t746;
t665 = t874 * t677 + t871 * t859;
t664 = t871 * t677 - t874 * t859;
t662 = pkin(2) * t834 + pkin(5) * t903;
t661 = -t870 * t724 + t873 * t726;
t660 = -t870 * t723 + t873 * t725;
t659 = t873 * t724 + t870 * t726;
t658 = t873 * t723 + t870 * t725;
t656 = t873 * t718 + t870 * t719;
t654 = -t872 * t712 - t869 * t951;
t652 = -t869 * t712 + t872 * t951;
t647 = -t870 * t706 + t873 * t707;
t646 = -t870 * t704 + t873 * t705;
t645 = t873 * t706 + t870 * t707;
t644 = t873 * t704 + t870 * t705;
t639 = t873 * t700 + t870 * t701;
t635 = -pkin(5) * t776 + t874 * t649;
t634 = pkin(5) * t777 + t871 * t649;
t633 = t874 * t647 + t911;
t632 = t874 * t646 - t911;
t631 = t871 * t647 - t910;
t630 = t871 * t646 + t910;
t629 = t874 * t661 - t871 * t713;
t628 = t874 * t660 + t871 * t717;
t627 = t871 * t661 + t874 * t713;
t626 = t871 * t660 - t874 * t717;
t625 = t874 * t657 + t871 * t951;
t621 = t874 * t650 + t871 * t731;
t614 = -t864 * t664 + t866 * t665;
t613 = t866 * t664 + t864 * t665;
t610 = -pkin(5) * t751 - t871 * t675 + t874 * t691;
t609 = -pkin(5) * t750 - t871 * t674 + t874 * t690;
t608 = t874 * t640 + t871 * t712;
t606 = -pkin(1) * t679 - t888;
t605 = -pkin(1) * t678 - t887;
t602 = -pkin(2) * t790 + pkin(5) * t753 + t874 * t675 + t871 * t691;
t601 = -pkin(2) * t788 + pkin(5) * t752 + t874 * t674 + t871 * t690;
t598 = -t870 * t652 + t873 * t654;
t597 = t873 * t653 + t870 * t655;
t596 = t873 * t652 + t870 * t654;
t594 = pkin(1) * t618 + t946;
t593 = t874 * t598 + t871 * t766;
t592 = t871 * t598 - t874 * t766;
t591 = t874 * t599 + t871 * t747;
t589 = -t864 * t631 + t866 * t633;
t588 = -t864 * t630 + t866 * t632;
t587 = t866 * t631 + t864 * t633;
t586 = t866 * t630 + t864 * t632;
t585 = -t864 * t627 + t866 * t629;
t584 = -t864 * t626 + t866 * t628;
t583 = t866 * t627 + t864 * t629;
t582 = t866 * t626 + t864 * t628;
t581 = -pkin(3) * t656 - t877;
t580 = -pkin(3) * t597 - t944;
t579 = -t864 * t624 + t866 * t625;
t578 = t866 * t624 + t864 * t625;
t575 = -t864 * t620 + t866 * t621;
t574 = t866 * t620 + t864 * t621;
t573 = -qJ(2) * t721 - t864 * t634 + t866 * t635;
t572 = qJ(2) * t722 + t866 * t634 + t864 * t635;
t571 = pkin(5) * t934 + qJ(2) * t618 - t864 * t662;
t570 = -pkin(3) * t639 - t885;
t569 = pkin(5) * t940 + qJ(2) * t960 + t866 * t662 + t828;
t568 = -t864 * t607 + t866 * t608;
t567 = t866 * t607 + t864 * t608;
t564 = -pkin(5) * t620 - (pkin(3) * t871 - pkin(6) * t874) * t649;
t563 = -pkin(6) * t656 - t870 * t612 + t873 * t642;
t561 = -pkin(6) * t639 - t870 * t604 + t873 * t637;
t559 = -qJ(2) * t679 - t864 * t602 + t866 * t610;
t558 = -qJ(2) * t678 - t864 * t601 + t866 * t609;
t557 = -pkin(1) * t790 + qJ(2) * t681 + t866 * t602 + t864 * t610;
t556 = -pkin(1) * t788 + qJ(2) * t680 + t866 * t601 + t864 * t609;
t553 = -t864 * t592 + t866 * t593;
t552 = t866 * t592 + t864 * t593;
t551 = pkin(5) * t621 - (-pkin(3) * t874 - pkin(6) * t871 - pkin(2)) * t649;
t550 = -t864 * t590 + t866 * t591;
t549 = t866 * t590 + t864 * t591;
t548 = -pkin(1) * t574 - t891;
t546 = t870 * t577 + t925;
t544 = t874 * t547 + t871 * t689;
t542 = -pkin(5) * t624 + t874 * t563 - t871 * t581;
t541 = -pkin(1) * t578 - t881;
t540 = -pkin(5) * t607 + t874 * t561 - t871 * t570;
t539 = -pkin(3) * t546 - t945;
t538 = -pkin(2) * t656 + pkin(5) * t625 + t871 * t563 + t874 * t581;
t537 = -pkin(1) * t567 - t882;
t536 = -pkin(2) * t639 + pkin(5) * t608 + t871 * t561 + t874 * t570;
t535 = -pkin(6) * t597 - t870 * t555 + t873 * t562;
t534 = -qJ(2) * t574 - t864 * t551 + t866 * t564;
t533 = pkin(1) * t649 + qJ(2) * t575 + t866 * t551 + t864 * t564;
t532 = -pkin(6) * t546 - pkin(7) * t925 - t870 * t566;
t531 = -t864 * t543 + t866 * t544;
t530 = t866 * t543 + t864 * t544;
t529 = -pkin(5) * t590 + t874 * t535 - t871 * t580;
t528 = -pkin(2) * t597 + pkin(5) * t591 + t871 * t535 + t874 * t580;
t527 = -pkin(1) * t549 - t883;
t526 = -qJ(2) * t578 - t864 * t538 + t866 * t542;
t525 = -pkin(1) * t656 + qJ(2) * t579 + t866 * t538 + t864 * t542;
t524 = -qJ(2) * t567 - t864 * t536 + t866 * t540;
t523 = -pkin(1) * t639 + qJ(2) * t568 + t866 * t536 + t864 * t540;
t522 = -pkin(5) * t543 + t874 * t532 - t871 * t539;
t521 = -pkin(1) * t530 - t876;
t520 = -pkin(2) * t546 + pkin(5) * t544 + t871 * t532 + t874 * t539;
t519 = -qJ(2) * t549 - t864 * t528 + t866 * t529;
t518 = -pkin(1) * t597 + qJ(2) * t550 + t866 * t528 + t864 * t529;
t517 = -qJ(2) * t530 - t864 * t520 + t866 * t522;
t516 = -pkin(1) * t546 + qJ(2) * t531 + t866 * t520 + t864 * t522;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t935, -t933, t879, qJ(1) * t879, 0, 0, 0, 0, 0, 0, -t864 * t815 - t865 * t899, -t865 * t803 - t866 * t815, t867 * t738, -qJ(1) * (t865 * t950 + t815) - (t865 * pkin(1) - t867 * qJ(2)) * t738, 0, 0, t867 * t901, 0, -t867 * t770, t865 * qJDD(3), -t865 * t904 + t867 * t959, t867 * t685 - t865 * t905, t867 * t618, t867 * t571 - t865 * t594 - qJ(1) * (t865 * t960 + t815), t867 * t699 + t865 * t786, t867 * t672 + t865 * t768, t867 * t695 + t865 * t789, t867 * t698 - t865 * t785, t867 * t694 + t865 * t787, t867 * t735, t867 * t558 - t865 * t605 - qJ(1) * (t865 * t680 - t867 * t788), t867 * t559 - t865 * t606 - qJ(1) * (t865 * t681 - t867 * t790), t867 * t573 - t865 * t906, t867 * t534 - t865 * t548 - qJ(1) * (t865 * t575 + t649 * t867), t867 * t589 + t865 * t645, t867 * t553 + t865 * t596, t867 * t584 + t865 * t658, t867 * t588 + t865 * t644, t867 * t585 + t865 * t659, t867 * t614 + t865 * t676, t867 * t524 - t865 * t537 - qJ(1) * (t865 * t568 - t867 * t639), t867 * t526 - t865 * t541 - qJ(1) * (t865 * t579 - t867 * t656), t867 * t519 - t865 * t527 - qJ(1) * (t865 * t550 - t867 * t597), t867 * t517 - t865 * t521 - qJ(1) * (t865 * t531 - t867 * t546); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t933, -t935, t898, qJ(1) * t898, 0, 0, 0, 0, 0, 0, -t864 * t936 + t867 * t899, t867 * t803 - t865 * t814, t865 * t738, qJ(1) * (t867 * t950 - t936) - (-t867 * pkin(1) - t865 * qJ(2)) * t738, 0, 0, t865 * t901, 0, -t865 * t770, -t867 * qJDD(3), t865 * t959 + t867 * t904, t865 * t685 + t867 * t905, t865 * t618, t865 * t571 + t867 * t594 + qJ(1) * (t867 * t960 - t936), t865 * t699 - t867 * t786, t865 * t672 - t867 * t768, t865 * t695 - t867 * t789, t865 * t698 + t867 * t785, t865 * t694 - t867 * t787, t865 * t735, t865 * t558 + t867 * t605 + qJ(1) * (t867 * t680 + t865 * t788), t865 * t559 + t867 * t606 + qJ(1) * (t867 * t681 + t865 * t790), t865 * t573 + t867 * t906, t865 * t534 + t867 * t548 + qJ(1) * (t867 * t575 - t649 * t865), t865 * t589 - t867 * t645, t865 * t553 - t867 * t596, t865 * t584 - t867 * t658, t865 * t588 - t867 * t644, t865 * t585 - t867 * t659, t865 * t614 - t867 * t676, t865 * t524 + t867 * t537 + qJ(1) * (t867 * t568 + t865 * t639), t865 * t526 + t867 * t541 + qJ(1) * (t867 * t579 + t865 * t656), t865 * t519 + t867 * t527 + qJ(1) * (t867 * t550 + t865 * t597), t865 * t517 + t867 * t521 + qJ(1) * (t867 * t531 + t865 * t546); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t840, t921, 0, 0, 0, 0, 0, 0, 0, 0, t814, -t813, t950, t720, 0, 0, t770, 0, t901, 0, -t685, t959, t960, t569, t697, t671, t693, t696, t692, t734, t556, t557, t572, t533, t587, t552, t582, t586, t583, t613, t523, t525, t518, t516; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t862, -t840, 0, 0, 0, 0, 0, 0, 0, -t813, -t814, t738, qJ(2) * t738, 0, 0, t901, 0, -t770, 0, t959, t685, t618, t571, t699, t672, t695, t698, t694, t735, t558, t559, t573, t534, t589, t553, t584, t588, t585, t614, t524, t526, t519, t517; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t862, 0, -t921, 0, 0, 0, 0, 0, 0, 0, t899, t803, 0, pkin(1) * t738, 0, 0, 0, 0, 0, -qJDD(3), t687, t686, 0, t594, -t786, -t768, -t789, t785, -t787, 0, t605, t606, t600, t548, -t645, -t596, -t658, -t644, -t659, -t676, t537, t541, t527, t521; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t840, t921, 0, 0, 0, 0, 0, 0, 0, 0, t814, -t813, t950, t720, 0, 0, t770, 0, t901, 0, -t685, t959, t960, t569, t697, t671, t693, t696, t692, t734, t556, t557, t572, t533, t587, t552, t582, t586, t583, t613, t523, t525, t518, t516; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t834, t899, 0, 0, 0, t837, 0, -t836, 0, t889, t781, t668, pkin(5) * t668, t762, t746, t758, t761, t757, t802, t609, t610, t635, t564, t633, t593, t628, t632, t629, t665, t540, t542, t529, t522; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t834, 0, t803, 0, 0, 0, t836, 0, t837, 0, -t781, t889, t903, t662, t760, t745, t756, t759, t755, t800, t601, t602, t634, t551, t631, t592, t626, t630, t627, t664, t536, t538, t528, t520; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t899, -t803, 0, 0, 0, 0, 0, 0, 0, qJDD(3), t886, t890, 0, -t946, t786, t768, t789, -t785, t787, 0, t887, t888, t880, t891, t645, t596, t658, t644, t659, t676, t882, t881, t883, t876; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), 0, -t947, 0, 0, -t834, t741, 0, t801, t769, t793, t799, t791, t827, t690, t691, t649, pkin(6) * t649, t647, t598, t660, t646, t661, t677, t561, t563, t535, t532; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t947, 0, qJDD(3), 0, t834, 0, t742, 0, t848, -t839, -t916, -t848, -t914, -qJDD(4), t674, t675, 0, pkin(3) * t649, -t767, -t766, -t717, t767, t713, -t859, t570, t581, t580, t539; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t741, -t742, 0, 0, t786, t768, t789, -t785, t787, 0, t908, t909, t894, t922, t645, t596, t658, t644, t659, t676, t896, t895, t897, t884; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t831, t832, t841, -t851, t846, t851, 0, t731, t708, 0, t707, t654, t725, t705, t726, t749, t637, t642, t562, -pkin(7) * t576; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t907, t830, t844, -t878, t842, -t907, -t731, 0, t709, 0, t706, t652, t723, t704, t724, t748, t604, t612, t555, t566; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t848, t839, t916, t848, t914, qJDD(4), -t708, -t709, 0, 0, t767, t766, t717, -t767, -t713, t859, t885, t877, t944, t945; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t744, -t712, t952, t807, t804, -t807, 0, t689, t622, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t943, t951, t805, t743, t764, -t943, -t689, 0, t623, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t767, t766, t717, -t767, -t713, t859, -t622, -t623, 0, 0;];
m_new_reg = t1;
