% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PPRRR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d4,d5,theta1,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:15
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PPRRR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRRR2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRRR2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRRR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRRR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PPRRR2_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:15:15
% EndTime: 2019-12-05 15:15:17
% DurationCPUTime: 1.83s
% Computational Cost: add. (5942->165), mult. (11244->240), div. (0->0), fcn. (8273->10), ass. (0->139)
t1082 = qJD(4) + qJD(5);
t1119 = qJD(5) + t1082;
t1092 = sin(qJ(5));
t1095 = cos(qJ(5));
t1096 = cos(qJ(4));
t1114 = qJD(3) * t1096;
t1093 = sin(qJ(4));
t1115 = qJD(3) * t1093;
t1051 = t1092 * t1115 - t1095 * t1114;
t1118 = t1051 ^ 2;
t1053 = (t1092 * t1096 + t1093 * t1095) * qJD(3);
t1117 = t1053 ^ 2;
t1116 = t1082 ^ 2;
t1113 = t1053 * t1051;
t1084 = t1096 ^ 2;
t1099 = qJD(3) ^ 2;
t1112 = t1084 * t1099;
t1088 = sin(pkin(8));
t1090 = cos(pkin(8));
t1068 = t1088 * g(1) - t1090 * g(2);
t1063 = -qJDD(2) + t1068;
t1111 = t1088 * t1063;
t1110 = qJD(5) - t1082;
t1069 = -t1090 * g(1) - t1088 * g(2);
t1085 = -g(3) + qJDD(1);
t1087 = sin(pkin(9));
t1089 = cos(pkin(9));
t1049 = t1089 * t1069 + t1087 * t1085;
t1094 = sin(qJ(3));
t1097 = cos(qJ(3));
t1101 = -t1087 * t1069 + t1089 * t1085;
t1026 = t1097 * t1049 + t1094 * t1101;
t1022 = -t1099 * pkin(3) + qJDD(3) * pkin(6) + t1026;
t1011 = t1096 * t1022 - t1093 * t1063;
t1083 = t1093 ^ 2;
t1109 = t1083 + t1084;
t1108 = t1093 * qJDD(3);
t1075 = t1093 * t1099 * t1096;
t1070 = qJDD(4) + t1075;
t1107 = -qJDD(4) - qJDD(5);
t1106 = qJD(4) * t1115;
t1105 = qJD(4) * t1114;
t1010 = -t1093 * t1022 - t1096 * t1063;
t1025 = -t1094 * t1049 + t1097 * t1101;
t1061 = t1105 + t1108;
t1079 = t1096 * qJDD(3);
t1102 = -t1079 + t1106;
t1104 = -t1092 * t1061 - t1095 * t1102;
t1065 = t1097 * qJDD(3) - t1094 * t1099;
t1066 = -t1094 * qJDD(3) - t1097 * t1099;
t1103 = -t1087 * t1065 + t1089 * t1066;
t1036 = t1089 * t1065 + t1087 * t1066;
t1021 = -qJDD(3) * pkin(3) - t1099 * pkin(6) - t1025;
t1100 = -t1095 * t1061 + t1092 * t1102;
t1098 = qJD(4) ^ 2;
t1074 = -t1098 - t1112;
t1073 = -t1083 * t1099 - t1098;
t1072 = qJD(4) * pkin(4) - pkin(7) * t1115;
t1071 = -qJDD(4) + t1075;
t1067 = t1109 * t1099;
t1064 = t1109 * qJDD(3);
t1062 = t1079 - 0.2e1 * t1106;
t1060 = 0.2e1 * t1105 + t1108;
t1054 = t1090 * t1063;
t1045 = -t1116 - t1117;
t1044 = t1096 * t1071 - t1093 * t1073;
t1043 = -t1093 * t1070 + t1096 * t1074;
t1042 = t1093 * t1071 + t1096 * t1073;
t1041 = t1096 * t1070 + t1093 * t1074;
t1040 = t1097 * t1064 - t1094 * t1067;
t1039 = t1094 * t1064 + t1097 * t1067;
t1034 = t1107 - t1113;
t1033 = -t1107 - t1113;
t1032 = -t1116 - t1118;
t1031 = t1097 * t1044 + t1094 * t1060;
t1030 = t1097 * t1043 - t1094 * t1062;
t1029 = t1094 * t1044 - t1097 * t1060;
t1028 = t1094 * t1043 + t1097 * t1062;
t1027 = -t1117 - t1118;
t1024 = t1089 * t1049 - t1087 * t1101;
t1023 = t1087 * t1049 + t1089 * t1101;
t1019 = -t1087 * t1039 + t1089 * t1040;
t1018 = t1089 * t1039 + t1087 * t1040;
t1017 = t1095 * t1034 - t1092 * t1045;
t1016 = t1092 * t1034 + t1095 * t1045;
t1015 = t1051 * t1110 + t1100;
t1014 = -t1119 * t1051 - t1100;
t1013 = -t1053 * t1110 + t1104;
t1012 = t1119 * t1053 - t1104;
t1009 = t1095 * t1032 - t1092 * t1033;
t1008 = t1092 * t1032 + t1095 * t1033;
t1007 = pkin(4) * t1102 - pkin(7) * t1112 + t1072 * t1115 + t1021;
t1006 = -t1087 * t1029 + t1089 * t1031;
t1005 = -t1087 * t1028 + t1089 * t1030;
t1004 = t1089 * t1029 + t1087 * t1031;
t1003 = t1089 * t1028 + t1087 * t1030;
t1002 = -pkin(4) * t1112 - pkin(7) * t1102 - qJD(4) * t1072 + t1011;
t1001 = (-t1061 + t1105) * pkin(7) + t1070 * pkin(4) + t1010;
t1000 = -t1094 * t1025 + t1097 * t1026;
t999 = t1097 * t1025 + t1094 * t1026;
t998 = -t1093 * t1016 + t1096 * t1017;
t997 = t1096 * t1016 + t1093 * t1017;
t996 = t1095 * t1013 - t1092 * t1015;
t995 = t1092 * t1013 + t1095 * t1015;
t994 = -t1093 * t1010 + t1096 * t1011;
t993 = t1096 * t1010 + t1093 * t1011;
t992 = -t1093 * t1008 + t1096 * t1009;
t991 = t1096 * t1008 + t1093 * t1009;
t990 = t1094 * t1014 + t1097 * t998;
t989 = -t1097 * t1014 + t1094 * t998;
t988 = t1092 * t1001 + t1095 * t1002;
t987 = t1095 * t1001 - t1092 * t1002;
t986 = t1094 * t1021 + t1097 * t994;
t985 = -t1097 * t1021 + t1094 * t994;
t984 = t1089 * t1000 - t1087 * t999;
t983 = t1087 * t1000 + t1089 * t999;
t982 = t1094 * t1012 + t1097 * t992;
t981 = -t1097 * t1012 + t1094 * t992;
t980 = -t1093 * t995 + t1096 * t996;
t979 = t1093 * t996 + t1096 * t995;
t978 = t1094 * t1027 + t1097 * t980;
t977 = -t1097 * t1027 + t1094 * t980;
t976 = -t1087 * t989 + t1089 * t990;
t975 = t1087 * t990 + t1089 * t989;
t974 = -t1092 * t987 + t1095 * t988;
t973 = t1092 * t988 + t1095 * t987;
t972 = -t1087 * t985 + t1089 * t986;
t971 = t1087 * t986 + t1089 * t985;
t970 = -t1087 * t981 + t1089 * t982;
t969 = t1087 * t982 + t1089 * t981;
t968 = -t1087 * t977 + t1089 * t978;
t967 = t1087 * t978 + t1089 * t977;
t966 = -t1093 * t973 + t1096 * t974;
t965 = t1093 * t974 + t1096 * t973;
t964 = t1094 * t1007 + t1097 * t966;
t963 = -t1097 * t1007 + t1094 * t966;
t962 = -t1087 * t963 + t1089 * t964;
t961 = t1087 * t964 + t1089 * t963;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1088 * t1068 + t1090 * t1069, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1090 * t1024 - t1111, 0, 0, 0, 0, 0, 0, t1090 * t1103, -t1090 * t1036, 0, t1090 * t984 - t1111, 0, 0, 0, 0, 0, 0, t1090 * t1005 + t1088 * t1041, t1090 * t1006 + t1088 * t1042, t1090 * t1019, t1088 * t993 + t1090 * t972, 0, 0, 0, 0, 0, 0, t1088 * t991 + t1090 * t970, t1088 * t997 + t1090 * t976, t1088 * t979 + t1090 * t968, t1088 * t965 + t1090 * t962; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1090 * t1068 + t1088 * t1069, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1088 * t1024 + t1054, 0, 0, 0, 0, 0, 0, t1088 * t1103, -t1088 * t1036, 0, t1088 * t984 + t1054, 0, 0, 0, 0, 0, 0, t1088 * t1005 - t1090 * t1041, t1088 * t1006 - t1090 * t1042, t1088 * t1019, t1088 * t972 - t1090 * t993, 0, 0, 0, 0, 0, 0, t1088 * t970 - t1090 * t991, t1088 * t976 - t1090 * t997, t1088 * t968 - t1090 * t979, t1088 * t962 - t1090 * t965; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1085, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1023, 0, 0, 0, 0, 0, 0, t1036, t1103, 0, t983, 0, 0, 0, 0, 0, 0, t1003, t1004, t1018, t971, 0, 0, 0, 0, 0, 0, t969, t975, t967, t961; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1069, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1024, 0, 0, 0, 0, 0, 0, t1103, -t1036, 0, t984, 0, 0, 0, 0, 0, 0, t1005, t1006, t1019, t972, 0, 0, 0, 0, 0, 0, t970, t976, t968, t962; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1068, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1063, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1063, 0, 0, 0, 0, 0, 0, -t1041, -t1042, 0, -t993, 0, 0, 0, 0, 0, 0, -t991, -t997, -t979, -t965; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1085, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1023, 0, 0, 0, 0, 0, 0, t1036, t1103, 0, t983, 0, 0, 0, 0, 0, 0, t1003, t1004, t1018, t971, 0, 0, 0, 0, 0, 0, t969, t975, t967, t961; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1049, 0, 0, 0, 0, 0, 0, t1066, -t1065, 0, t1000, 0, 0, 0, 0, 0, 0, t1030, t1031, t1040, t986, 0, 0, 0, 0, 0, 0, t982, t990, t978, t964; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1101, 0, 0, 0, 0, 0, 0, t1065, t1066, 0, t999, 0, 0, 0, 0, 0, 0, t1028, t1029, t1039, t985, 0, 0, 0, 0, 0, 0, t981, t989, t977, t963; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1063, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1063, 0, 0, 0, 0, 0, 0, t1041, t1042, 0, t993, 0, 0, 0, 0, 0, 0, t991, t997, t979, t965; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1099, -qJDD(3), 0, t1026, 0, 0, 0, 0, 0, 0, t1043, t1044, t1064, t994, 0, 0, 0, 0, 0, 0, t992, t998, t980, t966; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(3), -t1099, 0, t1025, 0, 0, 0, 0, 0, 0, t1062, -t1060, t1067, -t1021, 0, 0, 0, 0, 0, 0, -t1012, -t1014, -t1027, -t1007; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1063, 0, 0, 0, 0, 0, 0, t1041, t1042, 0, t993, 0, 0, 0, 0, 0, 0, t991, t997, t979, t965; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1074, t1071, t1079, t1011, 0, 0, 0, 0, 0, 0, t1009, t1017, t996, t974; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1070, t1073, -t1108, t1010, 0, 0, 0, 0, 0, 0, t1008, t1016, t995, t973; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1062, t1060, -t1067, t1021, 0, 0, 0, 0, 0, 0, t1012, t1014, t1027, t1007; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1032, t1034, t1013, t988; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1033, t1045, t1015, t987; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1012, t1014, t1027, t1007;];
f_new_reg = t1;
