% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PPRRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d3,d4,d5,theta1,theta2]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:15
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PPRRR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PPRRR2_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PPRRR2_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PPRRR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PPRRR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PPRRR2_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:14:53
% EndTime: 2019-12-05 15:15:05
% DurationCPUTime: 7.95s
% Computational Cost: add. (21863->479), mult. (41269->747), div. (0->0), fcn. (29974->10), ass. (0->329)
t444 = sin(pkin(8));
t453 = cos(qJ(3));
t455 = qJD(3) ^ 2;
t450 = sin(qJ(3));
t474 = t450 * qJDD(3);
t415 = t453 * t455 + t474;
t473 = t453 * qJDD(3);
t416 = -t450 * t455 + t473;
t443 = sin(pkin(9));
t445 = cos(pkin(9));
t462 = -t443 * t415 + t445 * t416;
t515 = t444 * t462;
t446 = cos(pkin(8));
t514 = t446 * t462;
t420 = t446 * g(1) + t444 * g(2);
t441 = g(3) - qJDD(1);
t388 = -t445 * t420 - t443 * t441;
t460 = -t443 * t420 + t445 * t441;
t325 = t450 * t388 + t453 * t460;
t326 = t453 * t388 - t450 * t460;
t464 = t450 * t325 + t453 * t326;
t269 = t453 * t325 - t450 * t326;
t494 = t445 * t269;
t218 = -t443 * t464 + t494;
t500 = t443 * t269;
t219 = t445 * t464 + t500;
t419 = t444 * g(1) - t446 * g(2);
t413 = -qJDD(2) + t419;
t368 = pkin(5) * t415 - t453 * t413;
t457 = -pkin(5) * t416 - t450 * t413;
t282 = -qJ(2) * t462 + t443 * t368 + t445 * t457;
t448 = sin(qJ(5));
t451 = cos(qJ(5));
t452 = cos(qJ(4));
t449 = sin(qJ(4));
t478 = qJD(3) * t449;
t395 = -t451 * t452 * qJD(3) + t448 * t478;
t397 = (t448 * t452 + t449 * t451) * qJD(3);
t353 = t397 * t395;
t472 = qJDD(4) + qJDD(5);
t507 = -t353 + t472;
t513 = t448 * t507;
t512 = t451 * t507;
t505 = t445 * t415 + t443 * t416;
t283 = qJ(2) * t505 + t445 * t368 - t443 * t457;
t438 = qJD(4) + qJD(5);
t392 = t438 * t395;
t476 = qJD(3) * qJD(4);
t468 = t452 * t476;
t475 = t449 * qJDD(3);
t410 = t468 + t475;
t432 = t452 * qJDD(3);
t469 = t449 * t476;
t411 = t432 - t469;
t456 = t395 * qJD(5) - t451 * t410 - t448 * t411;
t506 = -t392 - t456;
t324 = t445 * t388 + t443 * t460;
t463 = t448 * t410 - t451 * t411;
t304 = (qJD(5) - t438) * t397 + t463;
t323 = -t443 * t388 + t445 * t460;
t393 = t395 ^ 2;
t394 = t397 ^ 2;
t436 = t438 ^ 2;
t503 = t438 * t448;
t502 = t438 * t451;
t439 = t449 ^ 2;
t501 = t439 * t455;
t440 = t452 ^ 2;
t434 = t440 * t455;
t496 = t444 * t413;
t495 = t444 * t441;
t493 = t445 * t413;
t398 = t446 * t413;
t492 = t446 * t441;
t318 = -qJDD(3) * pkin(3) - t455 * pkin(6) + t325;
t423 = qJD(4) * pkin(4) - pkin(7) * t478;
t286 = -t411 * pkin(4) - pkin(7) * t434 + t423 * t478 + t318;
t491 = t448 * t286;
t348 = t353 + t472;
t490 = t448 * t348;
t319 = -t455 * pkin(3) + qJDD(3) * pkin(6) + t326;
t299 = t449 * t319 + t452 * t413;
t428 = t449 * t455 * t452;
t421 = qJDD(4) + t428;
t271 = (-t410 + t468) * pkin(7) + t421 * pkin(4) - t299;
t300 = t452 * t319 - t449 * t413;
t273 = -pkin(4) * t434 + t411 * pkin(7) - qJD(4) * t423 + t300;
t222 = -t451 * t271 + t448 * t273;
t223 = t448 * t271 + t451 * t273;
t183 = -t451 * t222 + t448 * t223;
t489 = t449 * t183;
t488 = t449 * t318;
t487 = t449 * t421;
t422 = qJDD(4) - t428;
t486 = t449 * t422;
t485 = t451 * t286;
t484 = t451 * t348;
t483 = t452 * t183;
t482 = t452 * t318;
t481 = t452 * t421;
t480 = t452 * t422;
t479 = t439 + t440;
t471 = t450 * t353;
t470 = t453 * t353;
t246 = t449 * t299 + t452 * t300;
t414 = t479 * qJDD(3);
t417 = t434 + t501;
t361 = t450 * t414 + t453 * t417;
t362 = t453 * t414 - t450 * t417;
t311 = t445 * t361 + t443 * t362;
t312 = -t443 * t361 + t445 * t362;
t467 = -pkin(1) * t311 - pkin(2) * t361 - pkin(3) * t417 - pkin(6) * t414 + qJ(1) * t312 - t246;
t466 = pkin(1) * t505 + pkin(2) * t415 - qJ(1) * t462 + t326;
t465 = -pkin(1) * t462 - pkin(2) * t416 - qJ(1) * t505 + t325;
t184 = t448 * t222 + t451 * t223;
t364 = -t444 * t419 - t446 * t420;
t459 = t450 * t428;
t458 = t453 * t428;
t245 = t452 * t299 - t449 * t300;
t363 = t446 * t419 - t444 * t420;
t454 = qJD(4) ^ 2;
t427 = -t434 - t454;
t426 = t434 - t454;
t425 = -t454 - t501;
t424 = t454 - t501;
t418 = t434 - t501;
t412 = t432 - 0.2e1 * t469;
t409 = 0.2e1 * t468 + t475;
t408 = pkin(1) * t413;
t407 = t479 * t476;
t390 = -t394 + t436;
t389 = t393 - t436;
t387 = t450 * qJDD(4) + t453 * t407;
t386 = t452 * t410 - t439 * t476;
t385 = -t453 * qJDD(4) + t450 * t407;
t384 = -t449 * t411 - t440 * t476;
t380 = -t394 - t436;
t379 = -t449 * t425 - t480;
t378 = -t449 * t424 + t481;
t377 = t452 * t427 - t487;
t376 = t452 * t426 - t486;
t375 = t452 * t425 - t486;
t374 = -t452 * t424 - t487;
t373 = t449 * t427 + t481;
t372 = -t449 * t426 - t480;
t371 = (-t410 - t468) * t449;
t370 = (-t411 + t469) * t452;
t355 = -t449 * t409 + t452 * t412;
t354 = -t452 * t409 - t449 * t412;
t352 = t446 * t505;
t351 = t444 * t505;
t350 = -t394 + t393;
t346 = t453 * t386 - t459;
t345 = t453 * t384 + t459;
t344 = t450 * t386 + t458;
t343 = t450 * t384 - t458;
t342 = t453 * t378 + t449 * t474;
t341 = t453 * t376 + t432 * t450;
t340 = t450 * t378 - t449 * t473;
t339 = t450 * t376 - t452 * t473;
t338 = -t436 - t393;
t337 = t453 * t379 + t450 * t409;
t336 = t453 * t377 - t450 * t412;
t335 = t450 * t379 - t453 * t409;
t334 = t450 * t377 + t453 * t412;
t333 = (-t395 * t451 + t397 * t448) * t438;
t332 = (-t395 * t448 - t397 * t451) * t438;
t331 = -t393 - t394;
t330 = t453 * t355 - t450 * t418;
t329 = t450 * t355 + t453 * t418;
t327 = -t397 * qJD(5) - t463;
t321 = -t443 * t385 + t445 * t387;
t316 = t451 * t389 - t490;
t315 = -t448 * t390 + t512;
t314 = t448 * t389 + t484;
t313 = t451 * t390 + t513;
t310 = -t448 * t380 - t484;
t309 = t451 * t380 - t490;
t308 = -t392 + t456;
t303 = (qJD(5) + t438) * t397 + t463;
t302 = t446 * t324 - t496;
t301 = t444 * t324 + t398;
t298 = -t397 * t503 - t451 * t456;
t297 = t397 * t502 - t448 * t456;
t296 = -t448 * t327 + t395 * t502;
t295 = t451 * t327 + t395 * t503;
t294 = t451 * t338 - t513;
t293 = t448 * t338 + t512;
t292 = -t443 * t344 + t445 * t346;
t291 = -t443 * t343 + t445 * t345;
t290 = -t443 * t340 + t445 * t342;
t289 = -t443 * t339 + t445 * t341;
t288 = -pkin(6) * t375 + t482;
t287 = -pkin(6) * t373 + t488;
t281 = -t443 * t335 + t445 * t337;
t280 = -t443 * t334 + t445 * t336;
t279 = t445 * t335 + t443 * t337;
t278 = t445 * t334 + t443 * t336;
t277 = -t449 * t332 + t452 * t333;
t276 = -t452 * t332 - t449 * t333;
t275 = -pkin(3) * t375 + t300;
t274 = -pkin(3) * t373 + t299;
t272 = -t443 * t329 + t445 * t330;
t265 = t453 * t277 + t450 * t472;
t264 = t450 * t277 - t453 * t472;
t261 = pkin(2) * t413 + pkin(5) * t464;
t260 = t446 * t281 + t444 * t375;
t259 = t446 * t280 + t444 * t373;
t258 = t444 * t281 - t446 * t375;
t257 = t444 * t280 - t446 * t373;
t256 = -t449 * t314 + t452 * t316;
t255 = -t449 * t313 + t452 * t315;
t254 = -t452 * t314 - t449 * t316;
t253 = -t452 * t313 - t449 * t315;
t252 = -t449 * t309 + t452 * t310;
t251 = t452 * t309 + t449 * t310;
t250 = -t304 * t451 - t448 * t308;
t249 = -t451 * t303 - t448 * t506;
t248 = -t304 * t448 + t451 * t308;
t247 = -t448 * t303 + t451 * t506;
t243 = -t449 * t297 + t452 * t298;
t242 = -t449 * t295 + t452 * t296;
t241 = -t452 * t297 - t449 * t298;
t240 = -t452 * t295 - t449 * t296;
t239 = -pkin(7) * t309 + t485;
t238 = -t449 * t293 + t452 * t294;
t237 = t452 * t293 + t449 * t294;
t236 = -pkin(7) * t293 + t491;
t235 = -pkin(5) * t361 + t453 * t245;
t234 = pkin(5) * t362 + t450 * t245;
t233 = t453 * t243 + t471;
t232 = t453 * t242 - t471;
t231 = t450 * t243 - t470;
t230 = t450 * t242 + t470;
t229 = t453 * t256 - t450 * t304;
t228 = t453 * t255 - t450 * t308;
t227 = t450 * t256 + t453 * t304;
t226 = t450 * t255 + t453 * t308;
t225 = t453 * t252 + t450 * t506;
t224 = t450 * t252 - t453 * t506;
t221 = t453 * t246 + t450 * t318;
t220 = t450 * t246 - t453 * t318;
t215 = -t443 * t264 + t445 * t265;
t214 = -pkin(4) * t506 + pkin(7) * t310 + t491;
t213 = -pkin(5) * t335 - t450 * t275 + t453 * t288;
t212 = -pkin(5) * t334 - t450 * t274 + t453 * t287;
t211 = t446 * t219 - t496;
t210 = t444 * t219 + t398;
t209 = t453 * t238 + t450 * t303;
t208 = t450 * t238 - t453 * t303;
t207 = -pkin(1) * t279 - pkin(2) * t335 + pkin(3) * t409 - pkin(6) * t379 - t488;
t206 = -pkin(1) * t278 - pkin(2) * t334 - pkin(3) * t412 - pkin(6) * t377 + t482;
t205 = -pkin(4) * t303 + pkin(7) * t294 - t485;
t204 = -pkin(2) * t375 + pkin(5) * t337 + t453 * t275 + t450 * t288;
t203 = -pkin(2) * t373 + pkin(5) * t336 + t453 * t274 + t450 * t287;
t201 = -t449 * t248 + t452 * t250;
t200 = -t449 * t247 + t452 * t249;
t199 = t452 * t248 + t449 * t250;
t198 = -t452 * t247 - t449 * t249;
t197 = pkin(1) * t218 + pkin(2) * t269;
t196 = t453 * t200 - t450 * t350;
t195 = t450 * t200 + t453 * t350;
t194 = t453 * t201 + t450 * t331;
t193 = t450 * t201 - t453 * t331;
t192 = -t443 * t231 + t445 * t233;
t191 = -t443 * t230 + t445 * t232;
t190 = -t443 * t227 + t445 * t229;
t189 = -t443 * t226 + t445 * t228;
t188 = -pkin(3) * t251 - pkin(4) * t309 + t223;
t187 = -pkin(3) * t199 - pkin(4) * t248;
t186 = -t443 * t224 + t445 * t225;
t185 = t445 * t224 + t443 * t225;
t182 = -t443 * t220 + t445 * t221;
t181 = t445 * t220 + t443 * t221;
t180 = -qJ(2) * t311 - t443 * t234 + t445 * t235;
t179 = pkin(5) * t494 + qJ(2) * t218 - t443 * t261;
t178 = -pkin(3) * t237 - pkin(4) * t293 + t222;
t177 = -t443 * t208 + t445 * t209;
t176 = t445 * t208 + t443 * t209;
t175 = -pkin(4) * t286 + pkin(7) * t184;
t174 = -pkin(5) * t220 - (pkin(3) * t450 - pkin(6) * t453) * t245;
t173 = -pkin(6) * t251 - t449 * t214 + t452 * t239;
t172 = -pkin(7) * t248 - t183;
t171 = -pkin(6) * t237 - t449 * t205 + t452 * t236;
t170 = t446 * t186 + t444 * t251;
t169 = t444 * t186 - t446 * t251;
t168 = -qJ(2) * t279 - t443 * t204 + t445 * t213;
t167 = -qJ(2) * t278 - t443 * t203 + t445 * t212;
t166 = t446 * t182 - t245 * t444;
t165 = t444 * t182 + t245 * t446;
t164 = -pkin(4) * t331 + pkin(7) * t250 + t184;
t163 = t446 * t177 + t444 * t237;
t162 = t444 * t177 - t446 * t237;
t161 = -t443 * t195 + t445 * t196;
t160 = pkin(5) * t221 - (-pkin(3) * t453 - pkin(6) * t450 - pkin(2)) * t245;
t159 = -t443 * t193 + t445 * t194;
t158 = t445 * t193 + t443 * t194;
t157 = -pkin(1) * t181 - pkin(2) * t220 + pkin(3) * t318 - pkin(6) * t246;
t156 = t452 * t184 - t489;
t155 = t449 * t184 + t483;
t154 = t453 * t156 + t450 * t286;
t153 = t450 * t156 - t453 * t286;
t152 = t446 * t159 + t444 * t199;
t151 = t444 * t159 - t446 * t199;
t150 = -pkin(5) * t224 + t453 * t173 - t450 * t188;
t149 = -pkin(1) * t185 - pkin(2) * t224 + pkin(3) * t506 - pkin(6) * t252 - t452 * t214 - t449 * t239;
t148 = -pkin(5) * t208 + t453 * t171 - t450 * t178;
t147 = -pkin(3) * t155 - pkin(4) * t183;
t146 = -pkin(2) * t251 + pkin(5) * t225 + t450 * t173 + t453 * t188;
t145 = -pkin(1) * t176 - pkin(2) * t208 + pkin(3) * t303 - pkin(6) * t238 - t452 * t205 - t449 * t236;
t144 = -pkin(2) * t237 + pkin(5) * t209 + t450 * t171 + t453 * t178;
t143 = -pkin(6) * t199 - t449 * t164 + t452 * t172;
t142 = -qJ(2) * t181 - t443 * t160 + t445 * t174;
t141 = -pkin(6) * t155 - pkin(7) * t483 - t449 * t175;
t140 = -t443 * t153 + t445 * t154;
t139 = t445 * t153 + t443 * t154;
t138 = -pkin(5) * t193 + t453 * t143 - t450 * t187;
t137 = -pkin(2) * t199 + pkin(5) * t194 + t450 * t143 + t453 * t187;
t136 = -pkin(1) * t158 - pkin(2) * t193 + pkin(3) * t331 - pkin(6) * t201 - t452 * t164 - t449 * t172;
t135 = t446 * t140 + t444 * t155;
t134 = t444 * t140 - t446 * t155;
t133 = -qJ(2) * t185 - t443 * t146 + t445 * t150;
t132 = -qJ(2) * t176 - t443 * t144 + t445 * t148;
t131 = -pkin(5) * t153 + t453 * t141 - t450 * t147;
t130 = -pkin(1) * t139 - pkin(2) * t153 + pkin(3) * t286 - pkin(6) * t156 + pkin(7) * t489 - t452 * t175;
t129 = -pkin(2) * t155 + pkin(5) * t154 + t450 * t141 + t453 * t147;
t128 = -qJ(2) * t158 - t443 * t137 + t445 * t138;
t127 = -qJ(2) * t139 - t443 * t129 + t445 * t131;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t364, 0, 0, 0, 0, 0, 0, 0, 0, 0, t302, 0, 0, 0, 0, 0, 0, -t352, -t514, 0, t211, 0, 0, 0, 0, 0, 0, t259, t260, t446 * t312, t166, 0, 0, 0, 0, 0, 0, t163, t170, t152, t135; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t363, 0, 0, 0, 0, 0, 0, 0, 0, 0, t301, 0, 0, 0, 0, 0, 0, -t351, -t515, 0, t210, 0, 0, 0, 0, 0, 0, t257, t258, t444 * t312, t165, 0, 0, 0, 0, 0, 0, t162, t169, t151, t134; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t441, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t323, 0, 0, 0, 0, 0, 0, t462, -t505, 0, -t218, 0, 0, 0, 0, 0, 0, t278, t279, t311, t181, 0, 0, 0, 0, 0, 0, t176, t185, t158, t139; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t495, -t492, -t363, -qJ(1) * t363, 0, 0, 0, 0, 0, 0, -t443 * t398 - t444 * t460, -t444 * t388 - t445 * t398, t446 * t323, -qJ(1) * t301 - (pkin(1) * t444 - qJ(2) * t446) * t323, 0, 0, t514, 0, -t352, t444 * qJDD(3), t446 * t282 - t444 * t465, t446 * t283 - t444 * t466, t446 * t218, -qJ(1) * t210 + t446 * t179 - t444 * t197, t446 * t292 - t444 * t371, t446 * t272 - t444 * t354, t446 * t290 - t444 * t374, t446 * t291 - t444 * t370, t446 * t289 - t444 * t372, t446 * t321, -qJ(1) * t257 + t446 * t167 - t444 * t206, -qJ(1) * t258 + t446 * t168 - t444 * t207, t446 * t180 - t444 * t467, -qJ(1) * t165 + t446 * t142 - t444 * t157, t446 * t192 - t444 * t241, t446 * t161 - t444 * t198, t446 * t189 - t444 * t253, t446 * t191 - t444 * t240, t446 * t190 - t444 * t254, t446 * t215 - t444 * t276, -qJ(1) * t162 + t446 * t132 - t444 * t145, -qJ(1) * t169 + t446 * t133 - t444 * t149, -qJ(1) * t151 + t446 * t128 - t444 * t136, -qJ(1) * t134 + t446 * t127 - t444 * t130; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t492, -t495, t364, qJ(1) * t364, 0, 0, 0, 0, 0, 0, -t443 * t496 + t446 * t460, t446 * t388 - t444 * t493, t444 * t323, qJ(1) * t302 - (-pkin(1) * t446 - qJ(2) * t444) * t323, 0, 0, t515, 0, -t351, -t446 * qJDD(3), t444 * t282 + t446 * t465, t444 * t283 + t446 * t466, t444 * t218, qJ(1) * t211 + t444 * t179 + t446 * t197, t444 * t292 + t446 * t371, t444 * t272 + t446 * t354, t444 * t290 + t446 * t374, t444 * t291 + t446 * t370, t444 * t289 + t446 * t372, t444 * t321, qJ(1) * t259 + t444 * t167 + t446 * t206, qJ(1) * t260 + t444 * t168 + t446 * t207, t444 * t180 + t446 * t467, qJ(1) * t166 + t444 * t142 + t446 * t157, t444 * t192 + t446 * t241, t444 * t161 + t446 * t198, t444 * t189 + t446 * t253, t444 * t191 + t446 * t240, t444 * t190 + t446 * t254, t444 * t215 + t446 * t276, qJ(1) * t163 + t444 * t132 + t446 * t145, qJ(1) * t170 + t444 * t133 + t446 * t149, qJ(1) * t152 + t444 * t128 + t446 * t136, qJ(1) * t135 + t444 * t127 + t446 * t130; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t419, t420, 0, 0, 0, 0, 0, 0, 0, 0, t493, -t443 * t413, t324, qJ(2) * t324 + t408, 0, 0, t505, 0, t462, 0, -t283, t282, t219, pkin(5) * t500 + qJ(2) * t219 + t445 * t261 + t408, t445 * t344 + t443 * t346, t445 * t329 + t443 * t330, t445 * t340 + t443 * t342, t445 * t343 + t443 * t345, t445 * t339 + t443 * t341, t445 * t385 + t443 * t387, -pkin(1) * t373 + qJ(2) * t280 + t445 * t203 + t443 * t212, -pkin(1) * t375 + qJ(2) * t281 + t445 * t204 + t443 * t213, qJ(2) * t312 + t445 * t234 + t443 * t235, pkin(1) * t245 + qJ(2) * t182 + t445 * t160 + t443 * t174, t445 * t231 + t443 * t233, t445 * t195 + t443 * t196, t445 * t226 + t443 * t228, t445 * t230 + t443 * t232, t445 * t227 + t443 * t229, t445 * t264 + t443 * t265, -pkin(1) * t237 + qJ(2) * t177 + t445 * t144 + t443 * t148, -pkin(1) * t251 + qJ(2) * t186 + t445 * t146 + t443 * t150, -pkin(1) * t199 + qJ(2) * t159 + t445 * t137 + t443 * t138, -pkin(1) * t155 + qJ(2) * t140 + t445 * t129 + t443 * t131;];
tauB_reg = t1;
