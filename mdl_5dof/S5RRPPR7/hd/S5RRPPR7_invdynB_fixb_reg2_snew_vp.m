% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:37
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPPR7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR7_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR7_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR7_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPPR7_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:36:33
% EndTime: 2019-12-31 19:36:50
% DurationCPUTime: 16.63s
% Computational Cost: add. (27532->551), mult. (64713->772), div. (0->0), fcn. (43358->8), ass. (0->396)
t692 = qJD(2) ^ 2;
t683 = sin(pkin(8));
t684 = cos(pkin(8));
t687 = sin(qJ(2));
t690 = cos(qJ(2));
t645 = (t683 * t690 + t684 * t687) * qJD(1);
t774 = t645 ^ 2;
t623 = t774 + t692;
t739 = qJD(1) * t687;
t643 = -t684 * t690 * qJD(1) + t683 * t739;
t768 = t645 * t643;
t808 = qJDD(2) + t768;
t827 = t683 * t808;
t520 = t684 * t623 + t827;
t825 = t684 * t808;
t526 = -t683 * t623 + t825;
t475 = t687 * t520 - t690 * t526;
t734 = qJD(1) * qJD(2);
t721 = t690 * t734;
t732 = t687 * qJDD(1);
t655 = t721 + t732;
t722 = t687 * t734;
t730 = t690 * qJDD(1);
t703 = t722 - t730;
t595 = t684 * t655 - t683 * t703;
t633 = t643 * qJD(2);
t558 = -t633 + t595;
t688 = sin(qJ(1));
t691 = cos(qJ(1));
t440 = t688 * t475 - t691 * t558;
t872 = pkin(5) * t440;
t442 = t691 * t475 + t688 * t558;
t871 = pkin(5) * t442;
t624 = t774 - t692;
t809 = qJDD(2) - t768;
t826 = t683 * t809;
t522 = t684 * t624 - t826;
t824 = t684 * t809;
t527 = t683 * t624 + t824;
t473 = t687 * t522 + t690 * t527;
t784 = t633 + t595;
t870 = t688 * t473 - t691 * t784;
t869 = t691 * t473 + t688 * t784;
t468 = t690 * t520 + t687 * t526;
t868 = pkin(6) * t468;
t867 = -pkin(1) * t468 - pkin(2) * t520;
t866 = pkin(1) * t558 - pkin(6) * t475;
t775 = t643 ^ 2;
t619 = t775 - t692;
t518 = t683 * t619 + t825;
t525 = -t684 * t619 + t827;
t471 = t687 * t518 + t690 * t525;
t594 = t683 * t655 + t684 * t703;
t738 = qJD(2) * t645;
t554 = t594 - t738;
t865 = t688 * t471 - t691 * t554;
t864 = t691 * t471 + t688 * t554;
t576 = -t692 - t775;
t507 = t683 * t576 + t824;
t510 = -t684 * t576 + t826;
t453 = t687 * t507 + t690 * t510;
t810 = t594 + t738;
t430 = t688 * t453 + t691 * t810;
t863 = pkin(5) * t430;
t436 = t691 * t453 - t688 * t810;
t862 = pkin(5) * t436;
t782 = -t775 - t774;
t832 = -t684 * t554 + t683 * t784;
t833 = -t683 * t554 - t684 * t784;
t840 = -t687 * t833 + t690 * t832;
t850 = t688 * t782 + t691 * t840;
t861 = pkin(5) * t850;
t852 = t688 * t840 - t691 * t782;
t860 = pkin(5) * t852;
t859 = t690 * t522 - t687 * t527;
t839 = t687 * t832 + t690 * t833;
t857 = pkin(6) * t839;
t856 = qJ(3) * t520;
t855 = qJ(3) * t526;
t396 = -pkin(1) * t839 - pkin(2) * t833;
t854 = -pkin(1) * t782 + pkin(6) * t840;
t783 = -t774 + t775;
t821 = t684 * t558 - t683 * t810;
t760 = t684 * t810;
t765 = t683 * t558;
t834 = -t760 - t765;
t841 = -t687 * t821 + t690 * t834;
t853 = t688 * t841 + t691 * t783;
t851 = -t688 * t783 + t691 * t841;
t849 = t690 * t518 - t687 * t525;
t450 = t690 * t507 - t687 * t510;
t847 = pkin(6) * t450;
t846 = qJ(3) * t833;
t845 = -pkin(1) * t450 - pkin(2) * t507;
t844 = pkin(1) * t810 + pkin(6) * t453;
t843 = -pkin(2) * t782 + qJ(3) * t832;
t842 = t687 * t834 + t690 * t821;
t829 = qJ(3) * t507;
t828 = qJ(3) * t510;
t787 = qJ(4) * t558;
t807 = 2 * qJD(4);
t686 = sin(qJ(5));
t689 = cos(qJ(5));
t605 = t686 * qJD(2) - t689 * t643;
t607 = t689 * qJD(2) + t686 * t643;
t552 = t607 * t605;
t590 = qJDD(5) + t595;
t786 = -t552 + t590;
t802 = t686 * t786;
t798 = t689 * t786;
t681 = t690 ^ 2;
t693 = qJD(1) ^ 2;
t664 = t688 * g(1) - t691 * g(2);
t706 = qJDD(1) * pkin(1) + t664;
t549 = (t681 * qJ(3) + pkin(6)) * t693 - pkin(2) * t703 - qJDD(3) - (qJD(2) * pkin(2) - qJ(3) * t739) * t739 + t706;
t794 = pkin(3) * t738 - t645 * t807 - t549;
t673 = t688 * qJDD(2);
t701 = (-t643 * t683 - t645 * t684) * qJD(2);
t702 = (-t643 * t684 + t645 * t683) * qJD(2);
t780 = -t687 * t701 + t690 * t702;
t793 = t691 * t780 + t673;
t723 = t691 * t768;
t710 = t684 * t595 - t683 * t738;
t712 = t683 * t595 + t684 * t738;
t777 = -t687 * t712 + t690 * t710;
t792 = t688 * t777 - t723;
t704 = t683 * t594 + t633 * t684;
t711 = -t684 * t594 + t633 * t683;
t779 = -t687 * t711 + t690 * t704;
t791 = t688 * t779 + t723;
t728 = t691 * qJDD(2);
t790 = t688 * t780 - t728;
t724 = t688 * t768;
t789 = t691 * t777 + t724;
t788 = t691 * t779 - t724;
t676 = t681 * t693;
t670 = -t676 - t692;
t781 = t687 * t702 + t690 * t701;
t778 = t687 * t704 + t690 * t711;
t776 = t687 * t710 + t690 * t712;
t603 = t605 ^ 2;
t604 = t607 ^ 2;
t637 = qJD(5) + t645;
t635 = t637 ^ 2;
t773 = pkin(3) + pkin(7);
t772 = pkin(3) * t684;
t771 = t637 * t605;
t770 = t637 * t686;
t769 = t637 * t689;
t680 = t687 ^ 2;
t767 = t680 * t693;
t766 = t683 * t549;
t761 = t684 * t549;
t618 = t645 * pkin(4) - qJD(2) * pkin(7);
t737 = qJD(3) * t643;
t628 = -0.2e1 * t737;
t575 = t643 * pkin(3) - t645 * qJ(4);
t749 = t687 * t693;
t665 = t691 * g(1) + t688 * g(2);
t649 = -t693 * pkin(1) + qJDD(1) * pkin(6) - t665;
t752 = t687 * t649;
t542 = qJDD(2) * pkin(2) - t655 * qJ(3) - t752 + (pkin(2) * t749 + qJ(3) * t734 - g(3)) * t690;
t615 = -t687 * g(3) + t690 * t649;
t543 = t670 * pkin(2) + qJ(3) * t730 + t615;
t742 = t683 * t542 + t684 * t543;
t708 = -t692 * pkin(3) - t643 * t575 + t742;
t698 = qJDD(2) * qJ(4) + t628 + t708;
t410 = -t594 * pkin(4) - t775 * pkin(7) + (t807 + t618) * qJD(2) + t698;
t756 = t686 * t410;
t506 = t552 + t590;
t755 = t686 * t506;
t736 = qJD(3) * t645;
t631 = 0.2e1 * t736;
t741 = -t684 * t542 + t683 * t543;
t459 = t631 + t741;
t460 = t628 + t742;
t402 = -t684 * t459 + t683 * t460;
t754 = t687 * t402;
t648 = t693 * pkin(6) + t706;
t753 = t687 * t648;
t671 = t690 * t749;
t662 = qJDD(2) + t671;
t751 = t687 * t662;
t663 = qJDD(2) - t671;
t750 = t687 * t663;
t748 = t689 * t410;
t747 = t689 * t506;
t746 = t690 * t402;
t745 = t690 * t648;
t656 = -0.2e1 * t722 + t730;
t744 = t690 * t656;
t743 = t690 * t663;
t740 = t680 + t681;
t733 = qJD(4) * qJD(2);
t731 = t688 * qJDD(1);
t729 = t691 * qJDD(1);
t727 = -t604 - t635;
t726 = t683 * t552;
t725 = t684 * t552;
t516 = -t605 * qJD(5) + t689 * qJDD(2) + t686 * t594;
t720 = qJ(4) * t683 + pkin(2);
t403 = t683 * t459 + t684 * t460;
t614 = t690 * g(3) + t752;
t546 = t687 * t614 + t690 * t615;
t602 = -t688 * t664 - t691 * t665;
t716 = t686 * qJDD(2) - t689 * t594;
t715 = t688 * t671;
t714 = t691 * t671;
t659 = -t688 * t693 + t729;
t713 = -pkin(5) * t659 - t688 * g(3);
t705 = qJDD(2) * pkin(3) + t692 * qJ(4) - t645 * t575 - qJDD(4) - t741;
t700 = t631 - t705;
t401 = pkin(4) * t784 - pkin(7) * t809 + t700;
t694 = -t787 + t794;
t414 = -pkin(4) * t775 + t773 * t594 - t645 * t618 + t694;
t371 = -t689 * t401 + t686 * t414;
t372 = t686 * t401 + t689 * t414;
t337 = -t689 * t371 + t686 * t372;
t338 = t686 * t371 + t689 * t372;
t545 = t690 * t614 - t687 * t615;
t601 = t691 * t664 - t688 * t665;
t707 = t516 - t771;
t438 = -0.2e1 * t736 + t705;
t699 = (-qJD(5) + t637) * t607 - t716;
t437 = t698 + 0.2e1 * t733;
t695 = -t594 * pkin(3) - t794;
t669 = t676 - t692;
t668 = -t692 - t767;
t667 = t692 - t767;
t661 = t676 - t767;
t660 = t676 + t767;
t658 = t691 * t693 + t731;
t657 = t740 * qJDD(1);
t654 = 0.2e1 * t721 + t732;
t652 = t690 * t662;
t651 = t740 * t734;
t638 = -pkin(5) * t658 + t691 * g(3);
t617 = t690 * t655 - t680 * t734;
t616 = -t681 * t734 + t687 * t703;
t613 = -t687 * t668 - t743;
t612 = -t687 * t667 + t652;
t611 = t690 * t670 - t751;
t610 = t690 * t669 - t750;
t609 = t690 * t668 - t750;
t608 = t687 * t670 + t652;
t598 = t691 * t657 - t688 * t660;
t597 = t688 * t657 + t691 * t660;
t596 = -t687 * t654 + t744;
t570 = t691 * t613 + t688 * t654;
t569 = t691 * t611 - t688 * t656;
t568 = t688 * t613 - t691 * t654;
t567 = t688 * t611 + t691 * t656;
t566 = -t604 + t635;
t565 = t603 - t635;
t564 = -pkin(6) * t609 - t745;
t563 = -pkin(6) * t608 - t753;
t562 = -pkin(1) * t609 + t615;
t561 = -pkin(1) * t608 + t614;
t548 = t604 - t603;
t515 = -t607 * qJD(5) - t716;
t514 = -t635 - t603;
t513 = -t603 - t604;
t512 = t691 * t546 - t688 * t648;
t511 = t688 * t546 + t691 * t648;
t503 = (t605 * t689 - t607 * t686) * t637;
t502 = (t605 * t686 + t607 * t689) * t637;
t490 = t516 + t771;
t486 = (qJD(5) + t637) * t607 + t716;
t484 = -t689 * t516 + t607 * t770;
t483 = -t686 * t516 - t607 * t769;
t482 = t686 * t515 - t605 * t769;
t481 = -t689 * t515 - t605 * t770;
t480 = -t761 + t856;
t467 = -t683 * t502 + t684 * t590;
t466 = t684 * t502 + t683 * t590;
t465 = -t689 * t565 + t755;
t464 = t686 * t566 - t798;
t463 = -t686 * t565 - t747;
t462 = -t689 * t566 - t802;
t461 = -t766 - t829;
t457 = -t686 * t727 - t747;
t456 = t689 * t727 - t755;
t455 = t689 * t514 - t802;
t454 = t686 * t514 + t798;
t449 = -pkin(2) * t558 - t766 - t855;
t448 = t695 + t787;
t447 = -t683 * t483 + t725;
t446 = -t683 * t481 - t725;
t445 = t684 * t483 + t726;
t444 = t684 * t481 - t726;
t443 = -pkin(2) * t810 + t761 - t828;
t426 = (t594 + t810) * pkin(3) + t694;
t425 = t695 + 0.2e1 * t787;
t424 = t686 * t490 + t689 * t699;
t423 = t689 * t486 + t686 * t707;
t422 = -t689 * t490 + t686 * t699;
t421 = t686 * t486 - t689 * t707;
t420 = -qJ(4) * t782 + t700;
t419 = -pkin(3) * t782 + t437;
t418 = -t683 * t462 + t684 * t490;
t417 = -t683 * t463 + t684 * t699;
t416 = t684 * t462 + t683 * t490;
t415 = t684 * t463 + t683 * t699;
t413 = t683 * t456 + t684 * t707;
t412 = -t684 * t456 + t683 * t707;
t411 = -t687 * t466 + t690 * t467;
t409 = t683 * t454 + t684 * t486;
t408 = -t684 * t454 + t683 * t486;
t400 = -t683 * t421 + t684 * t548;
t399 = t684 * t421 + t683 * t548;
t398 = t683 * t422 + t684 * t513;
t397 = -t684 * t422 + t683 * t513;
t395 = t460 - t867;
t394 = pkin(2) * t549 + qJ(3) * t403;
t393 = -pkin(3) * t765 + t684 * t425 - t856;
t392 = -t687 * t445 + t690 * t447;
t391 = -t687 * t444 + t690 * t446;
t390 = qJ(4) * t760 - t683 * t426 + t829;
t389 = t459 + t845;
t388 = -t402 - t846;
t387 = t855 + t683 * t425 + (pkin(2) + t772) * t558;
t386 = t684 * t437 - t683 * t438;
t385 = t683 * t437 + t684 * t438;
t384 = t684 * t426 + t720 * t810 + t828;
t383 = -t687 * t449 + t690 * t480 + t868;
t382 = pkin(3) * t784 + qJ(4) * t554 + t396;
t381 = t403 + t843;
t380 = -pkin(3) * t623 + 0.2e1 * t737 - 0.2e1 * t733 + (-qJDD(2) - t808) * qJ(4) - t708 + t867;
t379 = pkin(4) * t422 - qJ(4) * t424;
t378 = -t687 * t443 + t690 * t461 - t847;
t377 = -t687 * t416 + t690 * t418;
t376 = -t687 * t415 + t690 * t417;
t375 = pkin(3) * t809 + qJ(4) * t576 + t438 - t845;
t374 = -t687 * t412 + t690 * t413;
t373 = t690 * t412 + t687 * t413;
t369 = -t687 * t408 + t690 * t409;
t368 = t690 * t408 + t687 * t409;
t367 = t690 * t403 - t754;
t366 = t687 * t403 + t746;
t365 = -t687 * t399 + t690 * t400;
t364 = -t683 * t419 + t684 * t420 - t846;
t363 = t691 * t367 - t688 * t549;
t362 = t688 * t367 + t691 * t549;
t361 = -t687 * t397 + t690 * t398;
t360 = t690 * t397 + t687 * t398;
t359 = t684 * t419 + t683 * t420 + t843;
t358 = pkin(4) * t707 - t773 * t457 - t756;
t357 = t691 * t374 + t688 * t457;
t356 = t688 * t374 - t691 * t457;
t355 = pkin(4) * t486 - t773 * t455 + t748;
t354 = t691 * t369 + t688 * t455;
t353 = t688 * t369 - t691 * t455;
t352 = -qJ(3) * t385 + (-pkin(3) * t683 + qJ(4) * t684) * t448;
t351 = -t687 * t385 + t690 * t386;
t350 = t690 * t385 + t687 * t386;
t349 = -pkin(1) * t366 - pkin(2) * t402;
t348 = pkin(4) * t456 - qJ(4) * t457 - t372;
t347 = t691 * t361 + t688 * t424;
t346 = t688 * t361 - t691 * t424;
t345 = pkin(4) * t454 - qJ(4) * t455 - t371;
t344 = -t687 * t387 + t690 * t393 - t868;
t343 = qJ(3) * t386 + (t720 + t772) * t448;
t342 = -t687 * t384 + t690 * t390 + t847;
t341 = t691 * t351 - t688 * t448;
t340 = t688 * t351 + t691 * t448;
t339 = -t687 * t381 + t690 * t388 - t857;
t336 = -pkin(6) * t366 - qJ(3) * t746 - t687 * t394;
t335 = t683 * t337 + t684 * t410;
t334 = -t684 * t337 + t683 * t410;
t333 = -t687 * t359 + t690 * t364 - t857;
t332 = -pkin(1) * t373 - pkin(2) * t412 - qJ(4) * t707 + t773 * t456 - t748;
t331 = -pkin(1) * t368 - pkin(2) * t408 - qJ(4) * t486 + t773 * t454 - t756;
t330 = -pkin(1) * t350 - pkin(2) * t385 - pkin(3) * t438 - qJ(4) * t437;
t329 = pkin(4) * t513 - t773 * t424 - t338;
t328 = -qJ(3) * t412 + t684 * t348 - t683 * t358;
t327 = -qJ(3) * t408 + t684 * t345 - t683 * t355;
t326 = -pkin(2) * t457 + qJ(3) * t413 + t683 * t348 + t684 * t358;
t325 = -pkin(2) * t455 + qJ(3) * t409 + t683 * t345 + t684 * t355;
t324 = pkin(4) * t337 - qJ(4) * t338;
t323 = -qJ(3) * t397 - t683 * t329 + t684 * t379;
t322 = pkin(4) * t410 - t773 * t338;
t321 = -pkin(6) * t350 - t687 * t343 + t690 * t352;
t320 = -pkin(1) * t360 - pkin(2) * t397 - qJ(4) * t513 + t773 * t422 + t337;
t319 = -pkin(2) * t424 + qJ(3) * t398 + t684 * t329 + t683 * t379;
t318 = -t687 * t334 + t690 * t335;
t317 = t690 * t334 + t687 * t335;
t316 = t691 * t318 + t688 * t338;
t315 = t688 * t318 - t691 * t338;
t314 = -pkin(6) * t373 - t687 * t326 + t690 * t328;
t313 = -pkin(6) * t368 - t687 * t325 + t690 * t327;
t312 = -pkin(6) * t360 - t687 * t319 + t690 * t323;
t311 = -qJ(3) * t334 - t683 * t322 + t684 * t324;
t310 = -pkin(1) * t317 - pkin(2) * t334 - qJ(4) * t410 + t773 * t337;
t309 = -pkin(2) * t338 + qJ(3) * t335 + t684 * t322 + t683 * t324;
t308 = -pkin(6) * t317 - t687 * t309 + t690 * t311;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t658, -t659, 0, t602, 0, 0, 0, 0, 0, 0, t569, t570, t598, t512, 0, 0, 0, 0, 0, 0, -t436, t442, t850, t363, 0, 0, 0, 0, 0, 0, t850, t436, -t442, t341, 0, 0, 0, 0, 0, 0, t354, t357, t347, t316; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t659, -t658, 0, t601, 0, 0, 0, 0, 0, 0, t567, t568, t597, t511, 0, 0, 0, 0, 0, 0, -t430, t440, t852, t362, 0, 0, 0, 0, 0, 0, t852, t430, -t440, t340, 0, 0, 0, 0, 0, 0, t353, t356, t346, t315; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t608, t609, 0, -t545, 0, 0, 0, 0, 0, 0, t450, -t468, t839, t366, 0, 0, 0, 0, 0, 0, t839, -t450, t468, t350, 0, 0, 0, 0, 0, 0, t368, t373, t360, t317; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t659, 0, -t658, 0, t713, -t638, -t601, -pkin(5) * t601, t691 * t617 - t715, t691 * t596 - t688 * t661, t691 * t612 + t687 * t731, t691 * t616 + t715, t691 * t610 + t688 * t730, t691 * t651 + t673, -pkin(5) * t567 - t688 * t561 + t691 * t563, -pkin(5) * t568 - t688 * t562 + t691 * t564, -pkin(5) * t597 + t691 * t545, -pkin(5) * t511 - (pkin(1) * t688 - pkin(6) * t691) * t545, t789, t851, t869, t788, -t864, t793, t691 * t378 - t688 * t389 + t863, t691 * t383 - t688 * t395 - t872, t691 * t339 - t688 * t396 - t860, -pkin(5) * t362 + t691 * t336 - t688 * t349, t793, -t869, t864, t789, t851, t788, t691 * t333 - t688 * t382 - t860, t691 * t342 - t688 * t375 - t863, t691 * t344 - t688 * t380 + t872, -pkin(5) * t340 + t691 * t321 - t688 * t330, t691 * t392 - t688 * t484, t691 * t365 - t688 * t423, t691 * t377 - t688 * t464, t691 * t391 - t688 * t482, t691 * t376 - t688 * t465, t691 * t411 - t688 * t503, -pkin(5) * t353 + t691 * t313 - t688 * t331, -pkin(5) * t356 + t691 * t314 - t688 * t332, -pkin(5) * t346 + t691 * t312 - t688 * t320, -pkin(5) * t315 + t691 * t308 - t688 * t310; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t658, 0, t659, 0, t638, t713, t602, pkin(5) * t602, t688 * t617 + t714, t688 * t596 + t691 * t661, t688 * t612 - t687 * t729, t688 * t616 - t714, t688 * t610 - t690 * t729, t688 * t651 - t728, pkin(5) * t569 + t691 * t561 + t688 * t563, pkin(5) * t570 + t691 * t562 + t688 * t564, pkin(5) * t598 + t688 * t545, pkin(5) * t512 - (-pkin(1) * t691 - pkin(6) * t688) * t545, t792, t853, t870, t791, -t865, t790, t688 * t378 + t691 * t389 - t862, t688 * t383 + t691 * t395 + t871, t688 * t339 + t691 * t396 + t861, pkin(5) * t363 + t688 * t336 + t691 * t349, t790, -t870, t865, t792, t853, t791, t688 * t333 + t691 * t382 + t861, t688 * t342 + t691 * t375 + t862, t688 * t344 + t691 * t380 - t871, pkin(5) * t341 + t688 * t321 + t691 * t330, t688 * t392 + t691 * t484, t688 * t365 + t691 * t423, t688 * t377 + t691 * t464, t688 * t391 + t691 * t482, t688 * t376 + t691 * t465, t688 * t411 + t691 * t503, pkin(5) * t354 + t688 * t313 + t691 * t331, pkin(5) * t357 + t688 * t314 + t691 * t332, pkin(5) * t347 + t688 * t312 + t691 * t320, pkin(5) * t316 + t688 * t308 + t691 * t310; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t664, t665, 0, 0, (t655 + t721) * t687, t690 * t654 + t687 * t656, t690 * t667 + t751, t744, t687 * t669 + t743, 0, pkin(1) * t656 + pkin(6) * t611 + t745, -pkin(1) * t654 + pkin(6) * t613 - t753, pkin(1) * t660 + pkin(6) * t657 + t546, pkin(1) * t648 + pkin(6) * t546, t776, t842, -t859, t778, t849, t781, t690 * t443 + t687 * t461 - t844, t690 * t449 + t687 * t480 - t866, t690 * t381 + t687 * t388 + t854, pkin(1) * t549 + pkin(6) * t367 - qJ(3) * t754 + t690 * t394, t781, t859, -t849, t776, t842, t778, t690 * t359 + t687 * t364 + t854, t690 * t384 + t687 * t390 + t844, t690 * t387 + t687 * t393 + t866, pkin(1) * t448 + pkin(6) * t351 + t690 * t343 + t687 * t352, t690 * t445 + t687 * t447, t690 * t399 + t687 * t400, t690 * t416 + t687 * t418, t690 * t444 + t687 * t446, t690 * t415 + t687 * t417, t690 * t466 + t687 * t467, -pkin(1) * t455 + pkin(6) * t369 + t690 * t325 + t687 * t327, -pkin(1) * t457 + pkin(6) * t374 + t690 * t326 + t687 * t328, -pkin(1) * t424 + pkin(6) * t361 + t690 * t319 + t687 * t323, -pkin(1) * t338 + pkin(6) * t318 + t690 * t309 + t687 * t311;];
tauB_reg = t1;
