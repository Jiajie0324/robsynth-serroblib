% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPPR7
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d5,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:37
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPPR7_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPR7_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPR7_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPR7_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPR7_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPPR7_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:37:11
% EndTime: 2019-12-31 19:37:14
% DurationCPUTime: 3.59s
% Computational Cost: add. (7990->239), mult. (18896->274), div. (0->0), fcn. (12744->8), ass. (0->161)
t1659 = sin(qJ(1));
t1662 = cos(qJ(1));
t1654 = sin(pkin(8));
t1655 = cos(pkin(8));
t1661 = cos(qJ(2));
t1701 = qJD(1) * t1661;
t1658 = sin(qJ(2));
t1702 = qJD(1) * t1658;
t1622 = t1654 * t1702 - t1655 * t1701;
t1621 = t1622 ^ 2;
t1624 = (t1654 * t1661 + t1655 * t1658) * qJD(1);
t1705 = t1624 ^ 2;
t1710 = -t1621 - t1705;
t1684 = qJD(2) * t1701;
t1686 = t1658 * qJDD(1);
t1631 = t1684 + t1686;
t1647 = t1661 * qJDD(1);
t1685 = qJD(2) * t1702;
t1632 = t1647 - t1685;
t1599 = t1654 * t1631 - t1655 * t1632;
t1700 = qJD(2) * t1624;
t1584 = t1599 - t1700;
t1600 = t1655 * t1631 + t1654 * t1632;
t1697 = t1622 * qJD(2);
t1587 = t1600 + t1697;
t1721 = -t1655 * t1584 + t1654 * t1587;
t1722 = -t1654 * t1584 - t1655 * t1587;
t1726 = -t1658 * t1722 + t1661 * t1721;
t1730 = t1659 * t1726 - t1662 * t1710;
t1729 = t1659 * t1710 + t1662 * t1726;
t1696 = t1624 * t1622;
t1596 = -qJDD(2) - t1696;
t1663 = qJD(2) ^ 2;
t1612 = t1663 + t1705;
t1572 = t1654 * t1596 - t1655 * t1612;
t1574 = t1655 * t1596 + t1654 * t1612;
t1552 = t1658 * t1572 - t1661 * t1574;
t1681 = -t1600 + t1697;
t1728 = t1659 * t1552 - t1662 * t1681;
t1727 = t1662 * t1552 + t1659 * t1681;
t1725 = t1658 * t1721 + t1661 * t1722;
t1592 = -t1663 - t1621;
t1678 = qJDD(2) - t1696;
t1564 = t1654 * t1592 + t1655 * t1678;
t1567 = -t1655 * t1592 + t1654 * t1678;
t1543 = t1658 * t1564 + t1661 * t1567;
t1718 = t1599 + t1700;
t1724 = t1659 * t1543 + t1662 * t1718;
t1723 = t1662 * t1543 - t1659 * t1718;
t1551 = t1661 * t1572 + t1658 * t1574;
t1540 = t1661 * t1564 - t1658 * t1567;
t1652 = t1661 ^ 2;
t1664 = qJD(1) ^ 2;
t1672 = qJD(2) * pkin(2) - qJ(3) * t1702;
t1640 = t1659 * g(1) - t1662 * g(2);
t1673 = qJDD(1) * pkin(1) + t1640;
t1580 = t1632 * pkin(2) + (qJ(3) * t1652 + pkin(6)) * t1664 - t1672 * t1702 - qJDD(3) + t1673;
t1713 = pkin(3) * t1700 + t1681 * qJ(4) - 0.2e1 * qJD(4) * t1624 - t1580;
t1657 = sin(qJ(5));
t1660 = cos(qJ(5));
t1601 = t1657 * qJD(2) - t1660 * t1622;
t1708 = t1601 ^ 2;
t1603 = t1660 * qJD(2) + t1657 * t1622;
t1707 = t1603 ^ 2;
t1620 = qJD(5) + t1624;
t1706 = t1620 ^ 2;
t1704 = 2 * qJD(3);
t1703 = 0.2e1 * qJD(4);
t1698 = t1603 * t1601;
t1695 = t1652 * t1664;
t1641 = -t1662 * g(1) - t1659 * g(2);
t1628 = -t1664 * pkin(1) + qJDD(1) * pkin(6) + t1641;
t1692 = t1658 * t1628;
t1691 = t1658 * t1664;
t1690 = t1622 * pkin(3) - t1624 * qJ(4) + t1704;
t1689 = qJD(5) - t1620;
t1688 = qJD(5) + t1620;
t1651 = t1658 ^ 2;
t1687 = t1651 + t1652;
t1683 = -t1706 - t1707;
t1609 = -t1658 * g(3) + t1661 * t1628;
t1576 = qJDD(2) * pkin(2) - t1631 * qJ(3) - t1692 + (qJD(2) * qJ(3) * qJD(1) + pkin(2) * t1691 - g(3)) * t1661;
t1577 = -pkin(2) * t1695 + t1632 * qJ(3) - qJD(2) * t1672 + t1609;
t1680 = -t1655 * t1576 + t1654 * t1577;
t1679 = -t1657 * qJDD(2) + t1660 * t1599;
t1670 = -qJDD(2) * pkin(3) - t1663 * qJ(4) + qJDD(4) + t1680;
t1522 = -qJDD(2) * pkin(7) + t1587 * pkin(4) + (pkin(7) * t1622 + t1690) * t1624 + t1670;
t1610 = t1624 * pkin(4) - qJD(2) * pkin(7);
t1530 = -t1621 * pkin(4) - t1624 * t1610 + (pkin(3) + pkin(7)) * t1599 + t1713;
t1677 = t1660 * t1522 - t1657 * t1530;
t1676 = t1654 * t1576 + t1655 * t1577;
t1674 = -t1660 * qJDD(2) - t1657 * t1599;
t1671 = -qJDD(5) - t1600;
t1668 = -t1671 - t1698;
t1667 = t1689 * t1601 + t1674;
t1665 = -t1663 * pkin(3) + qJDD(2) * qJ(4) - t1690 * t1622 + t1676;
t1645 = t1661 * t1691;
t1644 = -t1663 - t1695;
t1643 = -t1651 * t1664 - t1663;
t1639 = -qJDD(2) + t1645;
t1638 = qJDD(2) + t1645;
t1637 = t1687 * t1664;
t1636 = -t1659 * qJDD(1) - t1662 * t1664;
t1635 = t1662 * qJDD(1) - t1659 * t1664;
t1634 = t1687 * qJDD(1);
t1633 = t1647 - 0.2e1 * t1685;
t1630 = 0.2e1 * t1684 + t1686;
t1627 = t1664 * pkin(6) + t1673;
t1608 = -t1661 * g(3) - t1692;
t1607 = t1661 * t1639 - t1658 * t1643;
t1606 = -t1658 * t1638 + t1661 * t1644;
t1605 = t1658 * t1639 + t1661 * t1643;
t1604 = t1661 * t1638 + t1658 * t1644;
t1579 = -t1658 * t1608 + t1661 * t1609;
t1578 = t1661 * t1608 + t1658 * t1609;
t1569 = -t1706 - t1708;
t1568 = -t1707 - t1708;
t1563 = t1671 - t1698;
t1557 = -t1688 * t1601 - t1674;
t1556 = -t1689 * t1603 + t1679;
t1555 = t1688 * t1603 - t1679;
t1549 = -0.2e1 * qJD(3) * t1622 + t1676;
t1548 = -t1624 * t1704 - t1680;
t1547 = t1660 * t1563 - t1657 * t1683;
t1546 = t1657 * t1563 + t1660 * t1683;
t1545 = t1660 * t1569 - t1657 * t1668;
t1544 = t1657 * t1569 + t1660 * t1668;
t1539 = -t1599 * pkin(3) - t1713;
t1538 = t1690 * t1624 + t1670;
t1537 = qJD(2) * t1703 + t1665;
t1532 = t1660 * t1556 - t1657 * t1667;
t1531 = t1657 * t1556 + t1660 * t1667;
t1529 = t1654 * t1546 + t1655 * t1557;
t1528 = -t1655 * t1546 + t1654 * t1557;
t1527 = -t1599 * pkin(4) - t1621 * pkin(7) + (t1703 + t1610) * qJD(2) + t1665;
t1526 = t1654 * t1544 + t1655 * t1555;
t1525 = -t1655 * t1544 + t1654 * t1555;
t1524 = -t1654 * t1548 + t1655 * t1549;
t1523 = t1655 * t1548 + t1654 * t1549;
t1521 = t1654 * t1531 + t1655 * t1568;
t1520 = -t1655 * t1531 + t1654 * t1568;
t1519 = t1655 * t1537 + t1654 * t1538;
t1518 = t1654 * t1537 - t1655 * t1538;
t1517 = -t1658 * t1528 + t1661 * t1529;
t1516 = t1661 * t1528 + t1658 * t1529;
t1515 = t1657 * t1522 + t1660 * t1530;
t1513 = -t1658 * t1525 + t1661 * t1526;
t1512 = t1661 * t1525 + t1658 * t1526;
t1511 = -t1658 * t1523 + t1661 * t1524;
t1510 = t1661 * t1523 + t1658 * t1524;
t1509 = -t1658 * t1520 + t1661 * t1521;
t1508 = t1661 * t1520 + t1658 * t1521;
t1507 = -t1658 * t1518 + t1661 * t1519;
t1506 = t1661 * t1518 + t1658 * t1519;
t1505 = t1660 * t1515 - t1657 * t1677;
t1504 = t1657 * t1515 + t1660 * t1677;
t1503 = t1654 * t1504 + t1655 * t1527;
t1502 = -t1655 * t1504 + t1654 * t1527;
t1501 = -t1658 * t1502 + t1661 * t1503;
t1500 = t1661 * t1502 + t1658 * t1503;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1636, -t1635, 0, -t1659 * t1640 + t1662 * t1641, 0, 0, 0, 0, 0, 0, t1662 * t1606 - t1659 * t1633, t1662 * t1607 + t1659 * t1630, t1662 * t1634 - t1659 * t1637, t1662 * t1579 - t1659 * t1627, 0, 0, 0, 0, 0, 0, -t1723, -t1727, t1729, t1662 * t1511 - t1659 * t1580, 0, 0, 0, 0, 0, 0, t1729, t1723, t1727, t1662 * t1507 - t1659 * t1539, 0, 0, 0, 0, 0, 0, t1662 * t1513 + t1659 * t1545, t1662 * t1517 + t1659 * t1547, t1662 * t1509 + t1659 * t1532, t1662 * t1501 + t1659 * t1505; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1635, t1636, 0, t1662 * t1640 + t1659 * t1641, 0, 0, 0, 0, 0, 0, t1659 * t1606 + t1662 * t1633, t1659 * t1607 - t1662 * t1630, t1659 * t1634 + t1662 * t1637, t1659 * t1579 + t1662 * t1627, 0, 0, 0, 0, 0, 0, -t1724, -t1728, t1730, t1659 * t1511 + t1662 * t1580, 0, 0, 0, 0, 0, 0, t1730, t1724, t1728, t1659 * t1507 + t1662 * t1539, 0, 0, 0, 0, 0, 0, t1659 * t1513 - t1662 * t1545, t1659 * t1517 - t1662 * t1547, t1659 * t1509 - t1662 * t1532, t1659 * t1501 - t1662 * t1505; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1604, t1605, 0, t1578, 0, 0, 0, 0, 0, 0, t1540, t1551, t1725, t1510, 0, 0, 0, 0, 0, 0, t1725, -t1540, -t1551, t1506, 0, 0, 0, 0, 0, 0, t1512, t1516, t1508, t1500; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1664, -qJDD(1), 0, t1641, 0, 0, 0, 0, 0, 0, t1606, t1607, t1634, t1579, 0, 0, 0, 0, 0, 0, -t1543, -t1552, t1726, t1511, 0, 0, 0, 0, 0, 0, t1726, t1543, t1552, t1507, 0, 0, 0, 0, 0, 0, t1513, t1517, t1509, t1501; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1664, 0, t1640, 0, 0, 0, 0, 0, 0, t1633, -t1630, t1637, t1627, 0, 0, 0, 0, 0, 0, -t1718, t1681, -t1710, t1580, 0, 0, 0, 0, 0, 0, -t1710, t1718, -t1681, t1539, 0, 0, 0, 0, 0, 0, -t1545, -t1547, -t1532, -t1505; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1604, t1605, 0, t1578, 0, 0, 0, 0, 0, 0, t1540, t1551, t1725, t1510, 0, 0, 0, 0, 0, 0, t1725, -t1540, -t1551, t1506, 0, 0, 0, 0, 0, 0, t1512, t1516, t1508, t1500; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1644, t1639, t1647, t1609, 0, 0, 0, 0, 0, 0, -t1567, t1574, t1721, t1524, 0, 0, 0, 0, 0, 0, t1721, t1567, -t1574, t1519, 0, 0, 0, 0, 0, 0, t1526, t1529, t1521, t1503; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1638, t1643, -t1686, t1608, 0, 0, 0, 0, 0, 0, t1564, t1572, t1722, t1523, 0, 0, 0, 0, 0, 0, t1722, -t1564, -t1572, t1518, 0, 0, 0, 0, 0, 0, t1525, t1528, t1520, t1502; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1633, t1630, -t1637, -t1627, 0, 0, 0, 0, 0, 0, t1718, -t1681, t1710, -t1580, 0, 0, 0, 0, 0, 0, t1710, -t1718, t1681, -t1539, 0, 0, 0, 0, 0, 0, t1545, t1547, t1532, t1505; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1592, t1596, -t1584, t1549, 0, 0, 0, 0, 0, 0, -t1584, -t1592, -t1596, t1537, 0, 0, 0, 0, 0, 0, t1555, t1557, t1568, t1527; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1678, -t1612, -t1587, t1548, 0, 0, 0, 0, 0, 0, -t1587, -t1678, t1612, -t1538, 0, 0, 0, 0, 0, 0, -t1544, -t1546, -t1531, -t1504; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1718, -t1681, t1710, -t1580, 0, 0, 0, 0, 0, 0, t1710, -t1718, t1681, -t1539, 0, 0, 0, 0, 0, 0, t1545, t1547, t1532, t1505; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1710, -t1718, t1681, -t1539, 0, 0, 0, 0, 0, 0, t1545, t1547, t1532, t1505; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1584, t1592, t1596, -t1537, 0, 0, 0, 0, 0, 0, -t1555, -t1557, -t1568, -t1527; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1587, t1678, -t1612, t1538, 0, 0, 0, 0, 0, 0, t1544, t1546, t1531, t1504; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1569, t1563, t1556, t1515; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1668, t1683, t1667, t1677; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1555, t1557, t1568, t1527;];
f_new_reg = t1;
