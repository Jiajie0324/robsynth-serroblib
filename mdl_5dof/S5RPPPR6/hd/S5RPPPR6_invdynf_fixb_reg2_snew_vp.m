% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPPPR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d5,theta2,theta4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:48
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPPPR6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPPR6_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPPR6_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPPR6_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPPR6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPPR6_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:48:13
% EndTime: 2019-12-31 17:48:15
% DurationCPUTime: 1.97s
% Computational Cost: add. (4301->220), mult. (11642->260), div. (0->0), fcn. (7153->8), ass. (0->158)
t1209 = qJD(1) ^ 2;
t1202 = sin(pkin(7));
t1198 = t1202 ^ 2;
t1204 = cos(pkin(7));
t1200 = t1204 ^ 2;
t1240 = t1198 + t1200;
t1264 = t1240 * t1209;
t1205 = sin(qJ(5));
t1207 = cos(qJ(5));
t1201 = sin(pkin(8));
t1248 = t1201 * t1204;
t1263 = -t1202 * t1205 + t1207 * t1248;
t1221 = t1202 * t1207 + t1205 * t1248;
t1164 = t1221 * qJD(1);
t1261 = t1164 ^ 2;
t1165 = t1263 * qJD(1);
t1260 = t1165 ^ 2;
t1203 = cos(pkin(8));
t1252 = qJD(1) * t1204;
t1230 = t1203 * t1252;
t1182 = qJD(5) + t1230;
t1259 = t1182 ^ 2;
t1258 = -2 * qJD(4);
t1257 = t1204 * g(3);
t1256 = pkin(3) * qJDD(1);
t1255 = qJ(3) * t1202;
t1254 = t1209 * qJ(2);
t1226 = -pkin(2) * t1204 - t1255;
t1176 = t1226 * qJD(1);
t1253 = qJD(1) * t1176;
t1251 = t1164 * t1165;
t1250 = t1198 * t1209;
t1249 = t1200 * t1209;
t1246 = t1202 * t1209;
t1245 = t1203 * t1209;
t1244 = t1204 * t1209;
t1243 = qJD(5) - t1182;
t1242 = qJD(5) + t1182;
t1178 = t1200 * t1201 * t1245;
t1193 = t1202 * qJDD(1);
t1241 = t1193 + t1178;
t1239 = qJDD(1) * t1201;
t1238 = qJDD(1) * t1203;
t1194 = t1204 * qJDD(1);
t1206 = sin(qJ(1));
t1237 = t1206 * qJDD(1);
t1208 = cos(qJ(1));
t1236 = t1208 * qJDD(1);
t1235 = -0.2e1 * qJD(1) * t1202;
t1234 = 0.2e1 * t1252;
t1233 = t1201 * t1246;
t1231 = t1202 * t1245;
t1186 = -t1208 * g(1) - t1206 * g(2);
t1172 = -t1209 * pkin(1) + qJDD(1) * qJ(2) + t1186;
t1222 = t1172 + ((2 * qJD(2)) + t1176) * qJD(1);
t1229 = qJDD(3) + t1257;
t1135 = (-qJ(4) * t1244 + t1222 + t1256) * t1202 + t1229;
t1185 = t1206 * g(1) - t1208 * g(2);
t1227 = qJDD(2) - t1185;
t1212 = qJD(3) * t1235 + t1227;
t1140 = (-t1240 * pkin(3) - qJ(2)) * t1209 + (-t1255 - pkin(1) + (-pkin(2) - qJ(4)) * t1204) * qJDD(1) + t1212;
t1111 = t1201 * t1135 + t1203 * t1140 + t1230 * t1258;
t1155 = -t1202 * g(3) + qJD(2) * t1234 + t1204 * t1172;
t1228 = pkin(4) * t1203 + pkin(6) * t1201;
t1130 = t1203 * t1135;
t1225 = t1130 + (qJD(4) * t1234 - t1140) * t1201;
t1224 = -t1203 * t1194 - qJDD(5);
t1197 = t1201 ^ 2;
t1223 = (-t1197 * t1200 - t1198) * t1209;
t1173 = t1202 * t1264;
t1220 = -t1206 * t1173 + t1202 * t1236;
t1219 = t1208 * t1173 + t1202 * t1237;
t1175 = t1204 * t1264;
t1218 = -t1206 * t1175 + t1204 * t1236;
t1217 = t1208 * t1175 + t1204 * t1237;
t1216 = -qJ(4) * t1249 + qJDD(4) + t1155;
t1215 = (-t1231 + t1239) * t1204;
t1214 = t1263 * qJDD(1);
t1213 = t1221 * qJDD(1);
t1199 = t1203 ^ 2;
t1187 = t1202 * t1244;
t1181 = -t1208 * t1209 - t1237;
t1180 = -t1206 * t1209 + t1236;
t1177 = t1240 * qJDD(1);
t1174 = (-t1199 * t1200 - t1198) * t1209;
t1171 = (t1197 + t1199) * t1249;
t1170 = -t1193 + t1178;
t1169 = qJDD(1) * pkin(1) - t1227 + t1254;
t1167 = t1228 * t1252;
t1162 = (-t1233 - t1238) * t1204;
t1161 = (-t1233 + t1238) * t1204;
t1160 = (t1231 + t1239) * t1204;
t1157 = t1208 * t1177 - t1206 * t1264;
t1156 = t1206 * t1177 + t1208 * t1264;
t1154 = qJD(2) * t1235 - t1202 * t1172 - t1257;
t1153 = t1254 + (pkin(1) - t1226) * qJDD(1) - t1212;
t1152 = t1203 * t1170 - t1201 * t1223;
t1151 = t1203 * t1174 - t1201 * t1241;
t1150 = t1201 * t1170 + t1203 * t1223;
t1149 = t1201 * t1174 + t1203 * t1241;
t1148 = -t1259 - t1260;
t1147 = t1203 * t1162 - t1201 * t1215;
t1146 = t1201 * t1162 + t1203 * t1215;
t1145 = t1176 * t1252 + t1155;
t1144 = t1224 - t1251;
t1143 = -t1224 - t1251;
t1142 = -t1259 - t1261;
t1141 = t1222 * t1202 + t1229;
t1138 = -t1260 - t1261;
t1136 = (t1253 + t1256) * t1204 + t1216;
t1134 = t1202 * t1149 + t1204 * t1161;
t1133 = t1202 * t1150 - t1204 * t1160;
t1132 = -t1204 * t1149 + t1202 * t1161;
t1131 = -t1204 * t1150 - t1202 * t1160;
t1128 = -t1202 * t1154 + t1204 * t1155;
t1127 = t1204 * t1154 + t1202 * t1155;
t1126 = -t1243 * t1164 + t1214;
t1125 = -t1242 * t1164 + t1214;
t1124 = t1242 * t1165 + t1213;
t1123 = t1243 * t1165 + t1213;
t1122 = t1202 * t1146 - t1204 * t1171;
t1121 = -t1204 * t1146 - t1202 * t1171;
t1118 = t1207 * t1144 - t1205 * t1148;
t1117 = t1205 * t1144 + t1207 * t1148;
t1116 = (t1253 + (-pkin(4) * t1201 + pkin(6) * t1203) * t1246 + (pkin(3) + t1228) * qJDD(1)) * t1204 + t1216;
t1115 = t1207 * t1142 - t1205 * t1143;
t1114 = t1205 * t1142 + t1207 * t1143;
t1113 = t1202 * t1141 + t1204 * t1145;
t1112 = -t1204 * t1141 + t1202 * t1145;
t1109 = t1207 * t1123 - t1205 * t1126;
t1108 = t1205 * t1123 + t1207 * t1126;
t1107 = t1203 * t1118 - t1201 * t1125;
t1106 = t1201 * t1118 + t1203 * t1125;
t1105 = -pkin(4) * t1250 + pkin(6) * t1193 - t1167 * t1230 + t1111;
t1104 = -pkin(4) * t1193 - pkin(6) * t1250 - t1130 + (t1140 + (t1258 - t1167) * t1252) * t1201;
t1102 = t1203 * t1115 - t1201 * t1124;
t1101 = t1201 * t1115 + t1203 * t1124;
t1100 = t1203 * t1109 + t1201 * t1138;
t1099 = t1201 * t1109 - t1203 * t1138;
t1098 = t1202 * t1106 + t1204 * t1117;
t1097 = -t1204 * t1106 + t1202 * t1117;
t1096 = t1203 * t1111 - t1201 * t1225;
t1095 = t1201 * t1111 + t1203 * t1225;
t1094 = t1207 * t1105 + t1205 * t1116;
t1093 = -t1205 * t1105 + t1207 * t1116;
t1092 = t1202 * t1101 + t1204 * t1114;
t1091 = -t1204 * t1101 + t1202 * t1114;
t1090 = t1202 * t1095 + t1204 * t1136;
t1089 = -t1204 * t1095 + t1202 * t1136;
t1088 = t1202 * t1099 + t1204 * t1108;
t1087 = -t1204 * t1099 + t1202 * t1108;
t1086 = -t1205 * t1093 + t1207 * t1094;
t1085 = t1207 * t1093 + t1205 * t1094;
t1084 = t1203 * t1086 + t1201 * t1104;
t1083 = t1201 * t1086 - t1203 * t1104;
t1082 = t1202 * t1083 + t1204 * t1085;
t1081 = -t1204 * t1083 + t1202 * t1085;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1181, -t1180, 0, -t1206 * t1185 + t1208 * t1186, 0, 0, 0, 0, 0, 0, -t1217, t1219, t1157, t1208 * t1128 - t1206 * t1169, 0, 0, 0, 0, 0, 0, t1157, t1217, -t1219, t1208 * t1113 - t1206 * t1153, 0, 0, 0, 0, 0, 0, t1208 * t1134 + t1206 * t1151, t1208 * t1133 + t1206 * t1152, t1208 * t1122 + t1206 * t1147, t1208 * t1090 + t1206 * t1096, 0, 0, 0, 0, 0, 0, t1208 * t1092 + t1206 * t1102, t1208 * t1098 + t1206 * t1107, t1208 * t1088 + t1206 * t1100, t1208 * t1082 + t1206 * t1084; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1180, t1181, 0, t1208 * t1185 + t1206 * t1186, 0, 0, 0, 0, 0, 0, t1218, -t1220, t1156, t1206 * t1128 + t1208 * t1169, 0, 0, 0, 0, 0, 0, t1156, -t1218, t1220, t1206 * t1113 + t1208 * t1153, 0, 0, 0, 0, 0, 0, t1206 * t1134 - t1208 * t1151, t1206 * t1133 - t1208 * t1152, t1206 * t1122 - t1208 * t1147, t1206 * t1090 - t1208 * t1096, 0, 0, 0, 0, 0, 0, t1206 * t1092 - t1208 * t1102, t1206 * t1098 - t1208 * t1107, t1206 * t1088 - t1208 * t1100, t1206 * t1082 - t1208 * t1084; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1127, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1112, 0, 0, 0, 0, 0, 0, t1132, t1131, t1121, t1089, 0, 0, 0, 0, 0, 0, t1091, t1097, t1087, t1081; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1209, -qJDD(1), 0, t1186, 0, 0, 0, 0, 0, 0, -t1175, t1173, t1177, t1128, 0, 0, 0, 0, 0, 0, t1177, t1175, -t1173, t1113, 0, 0, 0, 0, 0, 0, t1134, t1133, t1122, t1090, 0, 0, 0, 0, 0, 0, t1092, t1098, t1088, t1082; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1209, 0, t1185, 0, 0, 0, 0, 0, 0, t1194, -t1193, t1264, t1169, 0, 0, 0, 0, 0, 0, t1264, -t1194, t1193, t1153, 0, 0, 0, 0, 0, 0, -t1151, -t1152, -t1147, -t1096, 0, 0, 0, 0, 0, 0, -t1102, -t1107, -t1100, -t1084; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1127, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1112, 0, 0, 0, 0, 0, 0, t1132, t1131, t1121, t1089, 0, 0, 0, 0, 0, 0, t1091, t1097, t1087, t1081; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1249, t1187, t1194, t1155, 0, 0, 0, 0, 0, 0, t1194, t1249, -t1187, t1145, 0, 0, 0, 0, 0, 0, t1161, -t1160, -t1171, t1136, 0, 0, 0, 0, 0, 0, t1114, t1117, t1108, t1085; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1187, -t1250, -t1193, t1154, 0, 0, 0, 0, 0, 0, -t1193, -t1187, t1250, -t1141, 0, 0, 0, 0, 0, 0, -t1149, -t1150, -t1146, -t1095, 0, 0, 0, 0, 0, 0, -t1101, -t1106, -t1099, -t1083; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1194, t1193, -t1264, -t1169, 0, 0, 0, 0, 0, 0, -t1264, t1194, -t1193, -t1153, 0, 0, 0, 0, 0, 0, t1151, t1152, t1147, t1096, 0, 0, 0, 0, 0, 0, t1102, t1107, t1100, t1084; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1264, t1194, -t1193, -t1153, 0, 0, 0, 0, 0, 0, t1151, t1152, t1147, t1096, 0, 0, 0, 0, 0, 0, t1102, t1107, t1100, t1084; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1194, -t1249, t1187, -t1145, 0, 0, 0, 0, 0, 0, -t1161, t1160, t1171, -t1136, 0, 0, 0, 0, 0, 0, -t1114, -t1117, -t1108, -t1085; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1193, t1187, -t1250, t1141, 0, 0, 0, 0, 0, 0, t1149, t1150, t1146, t1095, 0, 0, 0, 0, 0, 0, t1101, t1106, t1099, t1083; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1174, t1170, t1162, t1111, 0, 0, 0, 0, 0, 0, t1115, t1118, t1109, t1086; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1241, t1223, t1215, t1225, 0, 0, 0, 0, 0, 0, t1124, t1125, -t1138, -t1104; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1161, -t1160, -t1171, t1136, 0, 0, 0, 0, 0, 0, t1114, t1117, t1108, t1085; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1142, t1144, t1123, t1094; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1143, t1148, t1126, t1093; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1124, -t1125, t1138, t1104;];
f_new_reg = t1;
