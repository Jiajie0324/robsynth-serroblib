% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPPPR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d5,theta2,theta4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 17:48
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPPPR6_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPPR6_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPPR6_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPPR6_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPPR6_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPPR6_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 17:48:03
% EndTime: 2019-12-31 17:48:13
% DurationCPUTime: 10.64s
% Computational Cost: add. (26242->607), mult. (70093->743), div. (0->0), fcn. (42549->8), ass. (0->389)
t1080 = 2 * qJD(2);
t934 = cos(qJ(1));
t1010 = t934 * qJDD(1);
t928 = sin(pkin(7));
t935 = qJD(1) ^ 2;
t1029 = t928 * t935;
t923 = t928 ^ 2;
t930 = cos(pkin(7));
t926 = t930 ^ 2;
t1069 = t923 + t926;
t878 = t1069 * t1029;
t932 = sin(qJ(1));
t841 = t928 * t1010 - t932 * t878;
t1079 = pkin(5) * t841;
t925 = t930 * t926;
t881 = (t923 * t930 + t925) * t935;
t993 = t930 * t1010;
t843 = -t932 * t881 + t993;
t1078 = pkin(5) * t843;
t1011 = t932 * qJDD(1);
t844 = t928 * t1011 + t934 * t878;
t1077 = pkin(5) * t844;
t994 = t930 * t1011;
t846 = t934 * t881 + t994;
t1076 = pkin(5) * t846;
t927 = sin(pkin(8));
t931 = sin(qJ(5));
t933 = cos(qJ(5));
t953 = t927 * t930 * t931 + t928 * t933;
t865 = t953 * qJD(1);
t1015 = t930 * qJD(1);
t1016 = qJD(1) * t928;
t866 = t933 * t927 * t1015 - t931 * t1016;
t823 = t865 * t866;
t918 = t930 * qJDD(1);
t929 = cos(pkin(8));
t995 = t929 * t918;
t894 = qJDD(5) + t995;
t1070 = -t823 + t894;
t1075 = t1070 * t931;
t1074 = t1070 * t933;
t1047 = pkin(2) + qJ(4);
t998 = qJD(3) * t1016;
t909 = -0.2e1 * t998;
t901 = t932 * g(1) - t934 * g(2);
t969 = qJDD(2) - t901;
t1043 = qJ(3) * t928;
t991 = -pkin(1) - t1043;
t794 = t909 + (-t1069 * pkin(3) - qJ(2)) * t935 + (-t1047 * t930 + t991) * qJDD(1) + t969;
t1025 = t930 * t935;
t902 = t934 * g(1) + t932 * g(2);
t876 = -t935 * pkin(1) + qJDD(1) * qJ(2) - t902;
t1057 = pkin(2) * t930;
t966 = -t1043 - t1057;
t884 = t966 * qJD(1);
t955 = t876 + (t1080 + t884) * qJD(1);
t942 = pkin(3) * qJDD(1) + t955;
t1048 = t930 * g(3);
t987 = qJDD(3) + t1048;
t938 = (-qJ(4) * t1025 + t942) * t928 + t987;
t999 = qJD(4) * t1015;
t718 = (t794 - 0.2e1 * t999) * t927 - t929 * t938;
t1026 = t929 * t935;
t1006 = t927 * t1026;
t889 = t926 * t1006;
t916 = t928 * qJDD(1);
t871 = t916 + t889;
t1028 = t929 * t871;
t924 = t929 ^ 2;
t1036 = t924 * t926;
t880 = (-t923 - t1036) * t935;
t817 = t927 * t880 + t1028;
t1073 = -pkin(3) * t817 + t718;
t980 = qJD(1) * t1080 + t876;
t919 = t926 * t935;
t1037 = t923 * t935;
t1018 = t929 * t794 + t927 * t938;
t975 = t929 * t999;
t900 = -0.2e1 * t975;
t719 = t900 + t1018;
t1051 = pkin(4) * t929;
t971 = pkin(6) * t927 + t1051;
t946 = t971 * t919;
t697 = -pkin(4) * t1037 + pkin(6) * t916 - t929 * t946 + t719;
t1049 = pkin(6) * t929;
t1052 = pkin(4) * t927;
t958 = pkin(3) + t971;
t920 = t928 * g(3);
t992 = -qJ(4) * t919 + qJDD(4) - t920;
t731 = ((t1049 - t1052) * t1029 + t958 * qJDD(1) + t955) * t930 + t992;
t663 = t931 * t697 - t933 * t731;
t664 = t933 * t697 + t931 * t731;
t639 = -t933 * t663 + t931 * t664;
t1072 = t958 * t639;
t640 = t931 * t663 + t933 * t664;
t897 = t929 * t1015 + qJD(5);
t835 = t897 * t865;
t996 = t927 * t918;
t948 = -t865 * qJD(5) - t931 * t916 + t933 * t996;
t765 = t948 - t835;
t1068 = -qJD(1) * t884 - t980;
t1067 = -t929 * t718 + t927 * t719;
t766 = t835 + t948;
t1041 = t897 * t866;
t941 = t866 * qJD(5) + qJDD(1) * t953;
t939 = t941 - t1041;
t712 = t933 * t766 + t931 * t939;
t633 = -pkin(6) * t712 - t639;
t1020 = t712 * t1052 + t929 * t633;
t714 = -t931 * t766 + t933 * t939;
t863 = t865 ^ 2;
t864 = t866 ^ 2;
t792 = t863 + t864;
t680 = t927 * t714 + t929 * t792;
t1066 = qJ(3) * t712 - t1047 * t680 + t1020;
t892 = t897 ^ 2;
t796 = -t892 - t863;
t730 = t933 * t796 - t1075;
t764 = t941 + t1041;
t690 = t927 * t730 + t929 * t764;
t729 = t931 * t796 + t1074;
t649 = -pkin(4) * t729 + t663;
t696 = -pkin(4) * t916 - pkin(6) * t1037 - t927 * t946 + t718;
t693 = t931 * t696;
t662 = -pkin(6) * t729 + t693;
t985 = t927 * t649 - t929 * t662;
t1065 = qJ(3) * t729 - t1047 * t690 - t985;
t798 = t823 + t894;
t1022 = t933 * t798;
t810 = -t864 - t892;
t735 = -t931 * t810 - t1022;
t698 = t927 * t735 + t929 * t765;
t1024 = t931 * t798;
t734 = t933 * t810 - t1024;
t650 = -pkin(4) * t734 + t664;
t694 = t933 * t696;
t670 = -pkin(6) * t734 + t694;
t984 = t927 * t650 - t929 * t670;
t1064 = qJ(3) * t734 - t1047 * t698 - t984;
t1005 = t928 * t1026;
t1013 = qJDD(1) * t927;
t860 = (-t1005 + t1013) * t930;
t1007 = t927 * t1029;
t1012 = qJDD(1) * t929;
t861 = (t1007 + t1012) * t930;
t803 = t929 * t860 - t927 * t861;
t922 = t927 ^ 2;
t989 = (t922 + t924) * t935;
t873 = t926 * t989;
t1063 = -qJ(3) * t873 - t1047 * t803 - t1067;
t788 = t930 * t942 + t992;
t1033 = t927 * t788;
t862 = (-t1007 + t1012) * t930;
t1062 = qJ(3) * t862 - t1047 * t817 + t1033;
t782 = t929 * t788;
t872 = t916 - t889;
t1031 = t927 * t872;
t1038 = t922 * t926;
t961 = (-t923 - t1038) * t935;
t820 = t929 * t961 - t1031;
t859 = (t1005 + t1013) * t930;
t1061 = -qJ(3) * t859 - t1047 * t820 + t782;
t1060 = -(pkin(3) + t1051) * t712 + t927 * t633;
t1059 = qJ(3) * t788 - t1047 * t1067;
t629 = t927 * t640 - t929 * t696;
t637 = t639 * t1052;
t1058 = -t1047 * t629 - (-qJ(3) + t1049) * t639 + t637;
t1056 = pkin(3) * t1067;
t1055 = pkin(3) * t788;
t1054 = pkin(3) * t803;
t915 = t923 * qJDD(1);
t917 = t926 * qJDD(1);
t887 = t917 + t915;
t890 = t919 + t1037;
t1050 = pkin(5) * (t932 * t887 + t934 * t890);
t1046 = qJ(2) * t878;
t1045 = qJ(2) * t881;
t1042 = qJDD(1) * pkin(1);
t1040 = t897 * t931;
t1039 = t897 * t933;
t1032 = t927 * t871;
t1030 = t928 * t930;
t1027 = t929 * t872;
t947 = t935 * qJ(2) - t969;
t870 = t947 + t1042;
t1023 = t932 * t870;
t1021 = t934 * t870;
t1019 = -pkin(4) * t696 + pkin(6) * t640;
t1017 = pkin(1) * t890 + qJ(2) * t887;
t1008 = t927 * t823;
t1004 = t929 * t823;
t906 = t928 * t1025;
t1003 = pkin(4) * t765 + pkin(6) * t735 + t693;
t1002 = pkin(4) * t764 + pkin(6) * t730 - t694;
t1001 = pkin(1) + t1057;
t997 = t927 * t1012;
t988 = t870 + t1042;
t832 = t980 * t928 + t1048;
t833 = t980 * t930 - t920;
t770 = t928 * t832 + t930 * t833;
t982 = -t932 * t901 - t934 * t902;
t979 = t925 * t1006;
t978 = t927 * t906;
t977 = t929 * t906;
t976 = pkin(4) * t792 + pkin(6) * t714 + t640;
t974 = t928 * t993;
t973 = -pkin(3) * t629 - t1019;
t972 = -pkin(3) * t820 + t1018;
t896 = -t932 * t935 + t1010;
t970 = -pkin(5) * t896 - t932 * g(3);
t795 = t928 * t955 + t987;
t800 = t930 * t955 - t920;
t967 = -pkin(2) * t795 + qJ(3) * t800;
t965 = pkin(2) * t928 - qJ(3) * t930;
t964 = -pkin(3) * t859 - t1033;
t963 = pkin(3) * t862 + t782;
t962 = t928 * t889;
t666 = t927 * t718 + t929 * t719;
t769 = t930 * t832 - t928 * t833;
t959 = t934 * t901 - t932 * t902;
t957 = -pkin(3) * t690 - t1002;
t956 = -pkin(3) * t698 - t1003;
t895 = t934 * t935 + t1011;
t954 = pkin(1) - t966;
t949 = -pkin(3) * t680 - t976;
t945 = pkin(3) * t729 - t929 * t649 - t927 * t662;
t944 = pkin(3) * t734 - t929 * t650 - t927 * t670;
t943 = -pkin(3) * t873 - t666;
t940 = t947 + 0.2e1 * t998;
t904 = t928 * t918;
t903 = 0.2e1 * t904;
t891 = -t919 + t1037;
t888 = t917 - t915;
t882 = t965 * qJDD(1);
t879 = (-t923 + t1036) * t935;
t877 = (t923 - t1038) * t935;
t875 = -pkin(5) * t895 + t934 * g(3);
t874 = (t922 - t924) * t919;
t856 = -t932 * t906 + t974;
t855 = t895 * t1030;
t854 = t989 * t1030;
t853 = (qJDD(1) * t922 + t927 * t1005) * t930;
t852 = (t924 * t1029 + t997) * t930;
t851 = (-t922 * t1029 + t997) * t930;
t850 = -t924 * t918 + t927 * t977;
t838 = t934 * t888 + t932 * t891;
t837 = t932 * t888 - t934 * t891;
t834 = pkin(5) * (t934 * t887 - t932 * t890);
t831 = -t864 + t892;
t830 = t863 - t892;
t828 = t909 + (t991 - 0.2e1 * t1057) * qJDD(1) - t947;
t827 = qJDD(1) * t954 + t940;
t826 = (t1001 + 0.2e1 * t1043) * qJDD(1) + t940;
t825 = -t928 * t853 - t979;
t824 = t928 * t850 + t979;
t822 = -t927 * t961 - t1027;
t821 = t929 * t880 - t1032;
t819 = -t929 * t879 + t1031;
t818 = t929 * t877 + t1032;
t816 = t927 * t879 + t1027;
t815 = t927 * t877 - t1028;
t814 = t864 - t863;
t812 = t930 * t853 - t962;
t811 = -t930 * t850 + t962;
t809 = t988 * t930 - t1045;
t808 = -t988 * t928 + t1046;
t806 = -pkin(2) * t915 + t930 * t826;
t805 = -qJ(3) * t917 - t928 * t828;
t804 = -t927 * t860 - t929 * t861;
t802 = -t929 * t859 - t927 * t862;
t801 = -t927 * t859 + t929 * t862;
t790 = pkin(2) * t890 + t800;
t787 = qJ(3) * t890 + t795;
t786 = -pkin(2) * t1037 + t920 + (qJ(3) * t1029 + t1068) * t930;
t785 = (t865 * t933 - t866 * t931) * t897;
t784 = (t865 * t931 + t866 * t933) * t897;
t783 = -qJ(3) * t919 - t987 + (pkin(2) * t1025 + t1068) * t928;
t781 = t928 * t816 - t930 * t861;
t780 = t928 * t817 + t930 * t862;
t779 = t928 * t820 - t930 * t859;
t778 = t928 * t818 - t930 * t860;
t777 = -t930 * t816 - t928 * t861;
t776 = -t930 * t817 + t928 * t862;
t775 = -t930 * t820 - t928 * t859;
t774 = -t930 * t818 - t928 * t860;
t761 = -t1046 + (t1001 * qJDD(1) + t826) * t928;
t760 = t1045 + (t991 * qJDD(1) + t828) * t930;
t757 = t928 * t803 - t930 * t873;
t756 = t928 * t802 + t930 * t874;
t755 = -t930 * t803 - t928 * t873;
t754 = -t930 * t802 + t928 * t874;
t751 = t866 * t1040 - t933 * t948;
t750 = -t866 * t1039 - t931 * t948;
t749 = -t865 * t1039 - t931 * t941;
t748 = t865 * t1040 - t933 * t941;
t745 = t927 * t785 - t929 * t894;
t744 = -t929 * t785 - t927 * t894;
t743 = t933 * t830 - t1024;
t742 = -t931 * t831 + t1074;
t741 = t931 * t830 + t1022;
t740 = t933 * t831 + t1075;
t739 = pkin(1) * t870 + qJ(2) * t770;
t736 = t770 + t1017;
t732 = -qJ(3) * t804 + t1054;
t728 = t928 * t795 + t930 * t800;
t727 = -t930 * t795 + t928 * t800;
t724 = t927 * t751 - t1004;
t723 = t927 * t749 + t1004;
t722 = -t929 * t749 + t1008;
t721 = -t929 * t751 - t1008;
t720 = t930 * t787 - t928 * t790;
t715 = t933 * t764 + t765 * t931;
t713 = t931 * t764 - t765 * t933;
t708 = t928 * t745 + t930 * t784;
t707 = -t930 * t745 + t928 * t784;
t706 = t928 * t787 + t930 * t790 + t1017;
t705 = t927 * t743 - t929 * t939;
t704 = t927 * t742 + t929 * t766;
t703 = -t929 * t742 + t927 * t766;
t702 = -t929 * t743 - t927 * t939;
t701 = -t1047 * t821 + t963;
t700 = -t1047 * t822 + t964;
t699 = t929 * t735 - t927 * t765;
t691 = t929 * t730 - t927 * t764;
t689 = -qJ(2) * t727 - t827 * t965;
t688 = -t929 * t715 - t927 * t814;
t687 = t927 * t715 - t929 * t814;
t686 = t928 * t724 + t930 * t750;
t685 = t928 * t723 - t930 * t748;
t684 = -t930 * t724 + t928 * t750;
t683 = -t930 * t723 - t928 * t748;
t682 = -pkin(1) * t727 - t967;
t681 = t929 * t714 - t927 * t792;
t679 = -qJ(3) * t822 - t972 + 0.2e1 * t975;
t678 = -qJ(3) * t821 - t1073;
t677 = qJ(2) * t728 + t827 * t954;
t676 = -pkin(1) * t776 - t1062;
t675 = -pkin(1) * t775 - t1061;
t674 = t928 * t705 + t930 * t741;
t673 = t928 * t704 + t930 * t740;
t672 = -t930 * t705 + t928 * t741;
t671 = -t930 * t704 + t928 * t740;
t669 = t928 * t698 + t930 * t734;
t668 = -t930 * t698 + t928 * t734;
t658 = t928 * t690 + t930 * t729;
t657 = -t930 * t690 + t928 * t729;
t656 = t928 * t687 + t930 * t713;
t655 = -t930 * t687 + t928 * t713;
t654 = t1067 * t928 + t930 * t788;
t653 = -t1067 * t930 + t928 * t788;
t652 = t928 * t680 + t930 * t712;
t651 = -t930 * t680 + t928 * t712;
t648 = -t1047 * t804 + t943;
t647 = -qJ(2) * t775 + t930 * t679 - t928 * t700;
t646 = -qJ(2) * t776 + t930 * t678 - t928 * t701;
t645 = -pkin(1) * t755 - t1063;
t644 = -pkin(1) * t822 + qJ(2) * t779 + t928 * t679 + t930 * t700;
t643 = -pkin(1) * t821 + qJ(2) * t780 + t928 * t678 + t930 * t701;
t642 = -qJ(3) * t666 + t1056;
t641 = -qJ(2) * t755 - t928 * t648 + t930 * t732;
t636 = -pkin(1) * t804 + qJ(2) * t757 + t930 * t648 + t928 * t732;
t635 = -t1047 * t666 + t1055;
t634 = -qJ(3) * t699 - t956;
t632 = -qJ(3) * t691 - t957;
t630 = t929 * t640 + t927 * t696;
t628 = -pkin(1) * t653 - t1059;
t627 = -t1047 * t699 + t944;
t626 = -t1047 * t691 + t945;
t625 = -qJ(3) * t681 - t949;
t624 = t928 * t629 + t930 * t639;
t623 = -t930 * t629 + t928 * t639;
t622 = -pkin(1) * t668 - t1064;
t621 = -t1047 * t681 - t1060;
t620 = -pkin(1) * t657 - t1065;
t619 = -qJ(2) * t653 - t928 * t635 + t930 * t642;
t618 = -pkin(1) * t651 - t1066;
t617 = -pkin(1) * t666 + qJ(2) * t654 + t930 * t635 + t928 * t642;
t616 = -qJ(2) * t668 - t928 * t627 + t930 * t634;
t615 = -qJ(2) * t657 - t928 * t626 + t930 * t632;
t614 = -qJ(3) * t630 - t973;
t613 = -pkin(1) * t699 + qJ(2) * t669 + t930 * t627 + t928 * t634;
t612 = -pkin(1) * t691 + qJ(2) * t658 + t930 * t626 + t928 * t632;
t611 = -qJ(2) * t651 - t928 * t621 + t930 * t625;
t610 = -pkin(1) * t681 + qJ(2) * t652 + t930 * t621 + t928 * t625;
t609 = -t1047 * t630 + t1072;
t608 = -pkin(1) * t623 - t1058;
t607 = -qJ(2) * t623 - t928 * t609 + t930 * t614;
t606 = -pkin(1) * t630 + qJ(2) * t624 + t930 * t609 + t928 * t614;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t896, 0, -t895, 0, t970, -t875, -t959, -pkin(5) * t959, t856, t838, t844, -t856, t846, 0, -t928 * t1021 - t932 * t832 - t1078, -t930 * t1021 - t932 * t833 + t1079, t934 * t769 - t1050, -pkin(5) * (t932 * t770 + t1021) - (t932 * pkin(1) - t934 * qJ(2)) * t769, 0, -t844, -t846, t856, t838, -t856, t934 * t720 - t932 * t882 - t1050, -t932 * t783 + t934 * t805 + t1078, -t932 * t786 + t934 * t806 - t1079, t934 * t689 - t932 * t682 - pkin(5) * (t932 * t728 + t934 * t827), t934 * t825 - t932 * t851, t934 * t756 - t932 * t801, t934 * t778 - t932 * t815, t934 * t824 + t932 * t852, t934 * t781 - t932 * t819, -t932 * t854 + t974, t934 * t646 - t932 * t676 - pkin(5) * (t932 * t780 - t934 * t821), t934 * t647 - t932 * t675 - pkin(5) * (t932 * t779 - t934 * t822), t934 * t641 - t932 * t645 - pkin(5) * (t932 * t757 - t934 * t804), t934 * t619 - t932 * t628 - pkin(5) * (t932 * t654 - t934 * t666), t934 * t686 - t932 * t721, t934 * t656 - t932 * t688, t934 * t673 - t932 * t703, t934 * t685 - t932 * t722, t934 * t674 - t932 * t702, t934 * t708 - t932 * t744, t934 * t615 - t932 * t620 - pkin(5) * (t932 * t658 - t934 * t691), t934 * t616 - t932 * t622 - pkin(5) * (t932 * t669 - t934 * t699), t934 * t611 - t932 * t618 - pkin(5) * (t932 * t652 - t934 * t681), t934 * t607 - t932 * t608 - pkin(5) * (t932 * t624 - t934 * t630); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t895, 0, t896, 0, t875, t970, t982, pkin(5) * t982, t855, t837, -t841, -t855, -t843, 0, -t928 * t1023 + t934 * t832 - t1076, -t930 * t1023 + t934 * t833 + t1077, t932 * t769 + t834, pkin(5) * (t934 * t770 - t1023) - (-t934 * pkin(1) - t932 * qJ(2)) * t769, 0, t841, t843, t855, t837, -t855, t932 * t720 + t934 * t882 + t834, t934 * t783 + t932 * t805 + t1076, t934 * t786 + t932 * t806 - t1077, t932 * t689 + t934 * t682 + pkin(5) * (t934 * t728 - t932 * t827), t932 * t825 + t934 * t851, t932 * t756 + t934 * t801, t932 * t778 + t934 * t815, t932 * t824 - t934 * t852, t932 * t781 + t934 * t819, t934 * t854 + t928 * t994, t932 * t646 + t934 * t676 + pkin(5) * (t934 * t780 + t932 * t821), t932 * t647 + t934 * t675 + pkin(5) * (t934 * t779 + t932 * t822), t932 * t641 + t934 * t645 + pkin(5) * (t934 * t757 + t932 * t804), t932 * t619 + t934 * t628 + pkin(5) * (t934 * t654 + t932 * t666), t932 * t686 + t934 * t721, t932 * t656 + t934 * t688, t932 * t673 + t934 * t703, t932 * t685 + t934 * t722, t932 * t674 + t934 * t702, t932 * t708 + t934 * t744, t932 * t615 + t934 * t620 + pkin(5) * (t934 * t658 + t932 * t691), t932 * t616 + t934 * t622 + pkin(5) * (t934 * t669 + t932 * t699), t932 * t611 + t934 * t618 + pkin(5) * (t934 * t652 + t932 * t681), t932 * t607 + t934 * t608 + pkin(5) * (t934 * t624 + t932 * t630); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t901, t902, 0, 0, t915, t903, 0, t917, 0, 0, t809, t808, t736, t739, 0, 0, 0, t915, t903, t917, t706, t760, t761, t677, t812, t754, t774, t811, t777, t915, t643, t644, t636, t617, t684, t655, t671, t683, t672, t707, t612, t613, t610, t606; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t935, 0, 0, -g(3), -t901, 0, t904, t888, t878, -t904, t881, 0, -t928 * t870, -t930 * t870, t769, qJ(2) * t769, 0, -t878, -t881, t904, t888, -t904, t720, t805, t806, t689, t825, t756, t778, t824, t781, t904, t646, t647, t641, t619, t686, t656, t673, t685, t674, t708, t615, t616, t611, t607; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t935, 0, qJDD(1), 0, g(3), 0, -t902, 0, t906, -t891, -t916, -t906, -t918, 0, t832, t833, 0, pkin(1) * t769, 0, t916, t918, t906, -t891, -t906, t882, t783, t786, t682, t851, t801, t815, -t852, t819, t854, t676, t675, t645, t628, t721, t688, t703, t722, t702, t744, t620, t622, t618, t608; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t901, t902, 0, 0, t915, t903, 0, t917, 0, 0, t809, t808, t736, t739, 0, 0, 0, t915, t903, t917, t706, t760, t761, t677, t812, t754, t774, t811, t777, t915, t643, t644, t636, t617, t684, t655, t671, t683, t672, t707, t612, t613, t610, t606; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t916, t918, t906, 0, t919, 0, 0, -t870, t832, 0, 0, -t906, -t919, t916, t918, 0, t787, -qJ(3) * t918, t826, qJ(3) * t827, -t889, t874, -t860, t889, -t861, t916, t678, t679, t732, t642, t750, t713, t740, -t748, t741, t784, t632, t634, t625, t614; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t916, -t1037, t918, -t906, 0, t870, 0, t833, 0, 0, t1037, t906, 0, t916, t918, t790, t828, pkin(2) * t916, pkin(2) * t827, t853, -t802, -t818, -t850, -t816, 0, t701, t700, t648, t635, -t724, -t687, -t704, -t723, -t705, -t745, t626, t627, t621, t609; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t906, t891, t916, t906, t918, 0, -t832, -t833, 0, 0, 0, -t916, -t918, -t906, t891, t906, -t882, -t783, -t786, t967, -t851, -t801, -t815, t852, -t819, -t854, t1062, t1061, t1063, t1059, -t721, -t688, -t703, -t722, -t702, -t744, t1065, t1064, t1066, t1058; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t916, -t918, -t906, t891, t906, 0, t795, t800, 0, -t851, -t801, -t815, t852, -t819, -t854, -qJ(4) * t817 + t1033, -qJ(4) * t820 + t782, -qJ(4) * t803 - t1067, -qJ(4) * t1067, -t721, -t688, -t703, -t722, -t702, -t744, -qJ(4) * t690 - t985, -qJ(4) * t698 - t984, -qJ(4) * t680 + t1020, -qJ(4) * t629 - t1049 * t639 + t637; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t906, t919, -t916, -t918, 0, -t795, 0, -t827, 0, t889, -t874, t860, -t889, t861, -t916, t1073, t900 + t972, -t1054, -t1056, -t750, -t713, -t740, t748, -t741, -t784, t957, t956, t949, t973; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1037, -t906, 0, -t916, -t918, -t800, t827, 0, 0, -t853, t802, t818, t850, t816, 0, qJ(4) * t821 - t963, qJ(4) * t822 - t964, qJ(4) * t804 - t943, qJ(4) * t666 - t1055, t724, t687, t704, t723, t705, t745, qJ(4) * t691 - t945, qJ(4) * t699 - t944, qJ(4) * t681 + t1060, qJ(4) * t630 - t1072; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t996, -t862, t871, t977, t879, -t977, 0, t788, t718, 0, t751, t715, t742, t749, t743, t785, t662, t670, t633, -pkin(6) * t639; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t978, -t859, t877, -t995, t872, t978, -t788, 0, t719, 0, -t823, -t814, t766, t823, -t939, -t894, t649, t650, -pkin(4) * t712, -pkin(4) * t639; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t889, t874, -t860, t889, -t861, t916, -t718, -t719, 0, 0, t750, t713, t740, -t748, t741, t784, t1002, t1003, t976, t1019; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t948, t764, t1070, -t835, t830, t835, 0, t696, t663, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1041, -t765, t831, t941, t798, t1041, -t696, 0, t664, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t823, t814, -t766, -t823, t939, t894, -t663, -t664, 0, 0;];
m_new_reg = t1;
