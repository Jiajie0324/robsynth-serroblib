% Calculate vector of inverse dynamics joint torques for
% S5RRRRR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d4,d5]';
% MDP [31x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S5RRRRR11_convert_par2_MPV_fixb.m
% 
% Output:
% tau [5x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:45
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S5RRRRR11_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1),zeros(31,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR11_invdynJ_fixb_mdp_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR11_invdynJ_fixb_mdp_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR11_invdynJ_fixb_mdp_slag_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR11_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5RRRRR11_invdynJ_fixb_mdp_slag_vp: pkin has to be [10x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [31 1]), ...
  'S5RRRRR11_invdynJ_fixb_mdp_slag_vp: MDP has to be [31x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:44:09
% EndTime: 2019-12-31 22:44:32
% DurationCPUTime: 13.89s
% Computational Cost: add. (8117->665), mult. (19793->918), div. (0->0), fcn. (16013->14), ass. (0->275)
t655 = sin(pkin(5));
t665 = cos(qJ(2));
t756 = qJD(1) * t665;
t729 = t655 * t756;
t626 = -qJD(3) + t729;
t660 = sin(qJ(2));
t656 = cos(pkin(5));
t757 = qJD(1) * t656;
t740 = pkin(1) * t757;
t587 = pkin(7) * t729 + t660 * t740;
t659 = sin(qJ(3));
t664 = cos(qJ(3));
t835 = t587 + t626 * (pkin(3) * t659 - pkin(9) * t664);
t658 = sin(qJ(4));
t663 = cos(qJ(4));
t758 = qJD(1) * t655;
t730 = t660 * t758;
t561 = t658 * t664 * t729 - t663 * t730;
t751 = qJD(3) * t664;
t830 = -t658 * t751 + t561;
t775 = t664 * t665;
t562 = (t658 * t660 + t663 * t775) * t758;
t697 = t663 * t751 - t562;
t749 = qJD(4) * t658;
t834 = -t659 * t749 + t697;
t710 = qJD(2) + t757;
t573 = t659 * t710 + t664 * t730;
t529 = t573 * t658 + t663 * t626;
t662 = cos(qJ(5));
t531 = t573 * t663 - t626 * t658;
t657 = sin(qJ(5));
t800 = t531 * t657;
t460 = t662 * t529 + t800;
t704 = t659 * t730;
t571 = -t664 * t710 + t704;
t564 = qJD(4) + t571;
t557 = qJD(5) + t564;
t833 = t460 * t557;
t690 = t529 * t657 - t662 * t531;
t832 = t557 * t690;
t748 = qJD(4) * t663;
t831 = t659 * t748 - t830;
t818 = qJD(4) + qJD(5);
t829 = t571 + t818;
t743 = qJDD(1) * t660;
t719 = t655 * t743;
t745 = qJD(1) * qJD(2);
t720 = t665 * t745;
t828 = -t655 * t720 - t719;
t584 = -pkin(7) * t730 + t665 * t740;
t555 = -pkin(2) * t710 - t584;
t475 = t571 * pkin(3) - t573 * pkin(9) + t555;
t556 = pkin(8) * t710 + t587;
t689 = -pkin(2) * t665 - pkin(8) * t660 - pkin(1);
t582 = t689 * t655;
t563 = qJD(1) * t582;
t493 = t664 * t556 + t659 * t563;
t478 = -pkin(9) * t626 + t493;
t445 = t475 * t658 + t478 * t663;
t434 = -pkin(10) * t529 + t445;
t747 = qJD(5) * t657;
t432 = t434 * t747;
t492 = -t659 * t556 + t563 * t664;
t477 = pkin(3) * t626 - t492;
t455 = pkin(4) * t529 + t477;
t814 = cos(qJ(1));
t731 = t814 * t665;
t661 = sin(qJ(1));
t778 = t660 * t661;
t597 = -t656 * t778 + t731;
t786 = t655 * t659;
t549 = t597 * t664 + t661 * t786;
t732 = t814 * t660;
t777 = t661 * t665;
t596 = t656 * t777 + t732;
t654 = qJ(4) + qJ(5);
t649 = sin(t654);
t650 = cos(t654);
t504 = t549 * t650 + t596 * t649;
t784 = t655 * t664;
t593 = t656 * t659 + t660 * t784;
t783 = t655 * t665;
t595 = t656 * t732 + t777;
t546 = t595 * t664 - t814 * t786;
t594 = -t656 * t731 + t778;
t824 = t546 * t650 + t594 * t649;
t827 = t455 * t460 + g(1) * t504 + g(2) * t824 - g(3) * (-t593 * t650 + t649 * t783) + t432;
t503 = -t549 * t649 + t596 * t650;
t825 = t546 * t649 - t594 * t650;
t826 = t455 * t690 - g(3) * (-t593 * t649 - t650 * t783) + g(2) * t825 - g(1) * t503;
t823 = t546 * t658 - t594 * t663;
t822 = t546 * t663 + t594 * t658;
t744 = qJDD(1) * t656;
t640 = qJDD(2) + t744;
t688 = qJD(3) * t710;
t754 = qJD(2) * t665;
t726 = t659 * t754;
t495 = -t664 * t640 + t655 * (qJD(1) * (t660 * t751 + t726) + t659 * t743) + t659 * t688;
t489 = qJDD(4) + t495;
t485 = qJDD(5) + t489;
t821 = t485 * MDP(29) + (-t460 ^ 2 + t690 ^ 2) * MDP(26) - t460 * MDP(25) * t690;
t606 = t657 * t663 + t658 * t662;
t590 = t606 * t659;
t785 = t655 * t660;
t641 = pkin(7) * t785;
t580 = t641 + (-pkin(1) * t665 - pkin(2)) * t656;
t592 = -t656 * t664 + t659 * t785;
t506 = pkin(3) * t592 - pkin(9) * t593 + t580;
t813 = pkin(1) * t660;
t762 = pkin(7) * t783 + t656 * t813;
t581 = pkin(8) * t656 + t762;
t767 = t664 * t581 + t659 * t582;
t508 = -pkin(9) * t783 + t767;
t771 = t658 * t506 + t663 * t508;
t753 = qJD(3) * t659;
t812 = pkin(8) * t658;
t820 = -t663 * t835 + t753 * t812;
t700 = pkin(2) * t660 - pkin(8) * t665;
t585 = t700 * t758;
t765 = t664 * t584 + t659 * t585;
t510 = pkin(9) * t730 + t765;
t620 = -pkin(3) * t664 - pkin(9) * t659 - pkin(2);
t819 = t663 * t510 - t620 * t748 + t658 * t835;
t494 = -qJD(3) * t704 + t659 * t640 + (t688 - t828) * t664;
t742 = qJDD(1) * t665;
t639 = t655 * t742;
t721 = t660 * t745;
t703 = t655 * t721;
t583 = qJDD(3) - t639 + t703;
t453 = qJD(4) * t531 + t494 * t658 - t663 * t583;
t452 = t663 * t494 - t573 * t749 + t658 * t583 - t626 * t748;
t716 = t452 * t657 + t662 * t453;
t427 = -qJD(5) * t690 + t716;
t666 = qJD(1) ^ 2;
t815 = pkin(9) + pkin(10);
t808 = pkin(8) * qJD(3);
t444 = t663 * t475 - t478 * t658;
t433 = -pkin(10) * t531 + t444;
t431 = pkin(4) * t564 + t433;
t807 = t431 * t662;
t806 = t434 * t662;
t805 = t452 * t658;
t804 = t489 * t658;
t803 = t489 * t663;
t802 = t529 * t564;
t801 = t531 * t564;
t799 = t571 * t626;
t798 = t571 * t658;
t797 = t573 * t626;
t792 = t595 * t659;
t791 = t626 * t659;
t790 = t640 * MDP(8);
t789 = t649 * t664;
t788 = t650 * t664;
t651 = t655 ^ 2;
t787 = t651 * t666;
t782 = t656 * t665;
t707 = qJD(2) * t740;
t739 = pkin(1) * t744;
t735 = -pkin(7) * t639 - t660 * t739 - t665 * t707;
t672 = -pkin(7) * t703 - t735;
t519 = pkin(8) * t640 + t672;
t686 = t700 * qJD(2);
t522 = (qJD(1) * t686 + qJDD(1) * t689) * t655;
t683 = t664 * t519 + t659 * t522 - t556 * t753 + t563 * t751;
t436 = pkin(9) * t583 + t683;
t705 = pkin(7) * t828 - t660 * t707 + t665 * t739;
t520 = -pkin(2) * t640 - t705;
t441 = pkin(3) * t495 - pkin(9) * t494 + t520;
t421 = -qJD(4) * t445 - t658 * t436 + t663 * t441;
t418 = pkin(4) * t489 - pkin(10) * t452 + t421;
t781 = t657 * t418;
t780 = t658 * t659;
t779 = t659 * t663;
t776 = t663 * t664;
t521 = pkin(3) * t573 + pkin(9) * t571;
t774 = t663 * t492 + t658 * t521;
t605 = t657 * t658 - t662 * t663;
t773 = t561 * t657 - t562 * t662 - t590 * t818 - t605 * t751;
t772 = -t747 * t780 + (t779 * t818 - t830) * t662 + t834 * t657;
t769 = t829 * t605;
t768 = t829 * t606;
t574 = t659 * t584;
t509 = -pkin(3) * t730 - t585 * t664 + t574;
t766 = pkin(4) * t831 + pkin(8) * t751 - t509;
t645 = pkin(8) * t776;
t761 = t658 * t620 + t645;
t652 = t660 ^ 2;
t760 = -t665 ^ 2 + t652;
t755 = qJD(2) * t660;
t752 = qJD(3) * t663;
t750 = qJD(4) * t564;
t746 = qJD(5) * t662;
t741 = 0.2e1 * t651;
t738 = t665 * t787;
t737 = t658 * t783;
t736 = t662 * t452 - t657 * t453 - t529 * t746;
t734 = qJD(4) * t815;
t733 = t664 * t814;
t728 = t659 * t756;
t727 = t655 * t755;
t722 = t655 * t656 * t666;
t681 = -t663 * t436 - t658 * t441 - t475 * t748 + t478 * t749;
t419 = -pkin(10) * t453 - t681;
t717 = t662 * t418 - t657 * t419;
t715 = t663 * t506 - t508 * t658;
t713 = -t659 * t581 + t582 * t664;
t712 = t564 * t663;
t711 = qJD(5) * t431 + t419;
t709 = qJD(2) + 0.2e1 * t757;
t708 = t640 + t744;
t706 = t659 * t519 - t664 * t522 + t556 * t751 + t563 * t753;
t701 = -t493 + (t749 + t798) * pkin(4);
t698 = g(1) * t597 + g(2) * t595;
t507 = pkin(3) * t783 - t713;
t516 = t663 * t521;
t628 = t815 * t663;
t696 = pkin(4) * t573 + qJD(5) * t628 - t492 * t658 + t516 + (pkin(10) * t571 + t734) * t663;
t627 = t815 * t658;
t695 = pkin(10) * t798 + qJD(5) * t627 + t658 * t734 + t774;
t552 = -pkin(10) * t780 + t761;
t694 = pkin(4) * t655 * t728 - pkin(10) * t562 + qJD(5) * t552 - t510 * t658 - (pkin(4) * t659 - pkin(10) * t776) * qJD(3) - (-t645 + (pkin(10) * t659 - t620) * t658) * qJD(4) - t820;
t603 = t663 * t620;
t535 = -pkin(10) * t779 + t603 + (-pkin(4) - t812) * t664;
t693 = -qJD(5) * t535 - (-t659 * t752 - t664 * t749) * pkin(8) + t819 + t831 * pkin(10);
t424 = t431 * t657 + t806;
t544 = t593 * t663 - t737;
t442 = pkin(4) * t592 - pkin(10) * t544 + t715;
t543 = t593 * t658 + t663 * t783;
t446 = -pkin(10) * t543 + t771;
t692 = t442 * t662 - t446 * t657;
t691 = t442 * t657 + t446 * t662;
t479 = t662 * t543 + t544 * t657;
t480 = -t543 * t657 + t544 * t662;
t586 = t655 * t686;
t588 = (pkin(1) * t782 - t641) * qJD(2);
t687 = -t581 * t751 - t582 * t753 + t586 * t664 - t659 * t588;
t437 = -pkin(3) * t583 + t706;
t684 = -pkin(9) * t489 + t477 * t564;
t682 = -t581 * t753 + t582 * t751 + t659 * t586 + t664 * t588;
t457 = pkin(9) * t727 + t682;
t541 = qJD(3) * t593 + t655 * t726;
t542 = -qJD(3) * t592 + t754 * t784;
t589 = t762 * qJD(2);
t468 = pkin(3) * t541 - pkin(9) * t542 + t589;
t680 = t663 * t457 + t658 * t468 + t506 * t748 - t508 * t749;
t426 = -t531 * t747 + t736;
t548 = -t597 * t659 + t661 * t784;
t679 = g(1) * t548 + g(2) * (-t655 * t733 - t792) - g(3) * t592;
t676 = -g(1) * t596 - g(2) * t594 + g(3) * t783;
t675 = -g(3) * t785 - t698;
t671 = -t520 - t676;
t670 = -pkin(8) * t583 - t555 * t626;
t458 = -pkin(3) * t727 - t687;
t669 = -qJD(4) * t771 - t457 * t658 + t663 * t468;
t416 = -qJD(5) * t424 + t717;
t668 = pkin(8) * t750 + t676;
t667 = pkin(9) * t750 + t437 + t679;
t648 = -pkin(4) * t663 - pkin(3);
t611 = (pkin(4) * t658 + pkin(8)) * t659;
t591 = t605 * t659;
t512 = t549 * t663 + t596 * t658;
t511 = -t549 * t658 + t596 * t663;
t474 = -qJD(4) * t543 + t542 * t663 + t658 * t727;
t473 = -qJD(4) * t737 + t542 * t658 + t593 * t748 - t663 * t727;
t464 = pkin(4) * t543 + t507;
t438 = pkin(4) * t473 + t458;
t430 = qJD(5) * t480 + t662 * t473 + t474 * t657;
t429 = -qJD(5) * t479 - t473 * t657 + t474 * t662;
t428 = pkin(4) * t453 + t437;
t425 = -pkin(10) * t473 + t680;
t423 = -t434 * t657 + t807;
t422 = pkin(4) * t541 - pkin(10) * t474 + t669;
t415 = t711 * t662 - t432 + t781;
t1 = [(g(1) * t822 - g(2) * t512 + t421 * t592 + t437 * t543 + t444 * t541 + t507 * t453 + t458 * t529 + t477 * t473 + t715 * t489 + t669 * t564) * MDP(23) + (-g(1) * t823 - g(2) * t511 + t437 * t544 - t445 * t541 + t507 * t452 + t458 * t531 + t477 * t474 - t771 * t489 - t680 * t564 + t681 * t592) * MDP(24) + (t438 * t460 + t464 * t427 + t428 * t479 + t455 * t430 + (-qJD(5) * t691 + t422 * t662 - t425 * t657) * t557 + t692 * t485 + t416 * t592 + t423 * t541 + g(1) * t824 - g(2) * t504) * MDP(30) + (-t438 * t690 + t464 * t426 + t428 * t480 + t455 * t429 - (qJD(5) * t692 + t422 * t657 + t425 * t662) * t557 - t691 * t485 - t415 * t592 - t424 * t541 - g(1) * t825 - g(2) * t503) * MDP(31) + (g(1) * t661 - g(2) * t814) * MDP(2) + (g(1) * t814 + g(2) * t661) * MDP(3) + (0.2e1 * (t660 * t742 - t745 * t760) * MDP(5) + (qJDD(1) * t652 + 0.2e1 * t660 * t720) * MDP(4)) * t651 + (-t589 * t710 - t641 * t640 + t705 * t656 + g(1) * t595 - g(2) * t597 + (t640 * t782 + (-t721 + t742) * t741) * pkin(1)) * MDP(9) + (-t588 * t710 - t762 * t640 - t672 * t656 - g(1) * t594 + g(2) * t596 + (-t720 - t743) * pkin(1) * t741) * MDP(10) + (t426 * t592 + t429 * t557 + t480 * t485 - t541 * t690) * MDP(27) + (t426 * t480 - t429 * t690) * MDP(25) + (-t426 * t479 - t427 * t480 - t429 * t460 + t430 * t690) * MDP(26) + (g(1) * t546 - g(2) * t549 + t580 * t495 + t520 * t592 + t555 * t541 + t589 * t571 + t713 * t583 - t687 * t626) * MDP(16) + (-g(1) * t792 - g(2) * t548 + t580 * t494 + t520 * t593 + t555 * t542 + t589 * t573 - t767 * t583 + t682 * t626) * MDP(17) + ((-g(1) * t733 - t493 * t755 + t665 * t683) * MDP(17) + (t495 * t665 - t571 * t755) * MDP(14) + (t492 * t755 + t665 * t706) * MDP(16) + (-t494 * t665 + t573 * t755) * MDP(13) + (t660 * t708 + t709 * t754) * MDP(6) + (t665 * t708 - t709 * t755) * MDP(7) + (-t583 * t665 - t626 * t755) * MDP(15)) * t655 + (-t494 * t592 - t495 * t593 - t541 * t573 - t542 * t571) * MDP(12) + (t494 * t593 + t542 * t573) * MDP(11) + (t489 * t592 + t541 * t564) * MDP(22) + (-t453 * t592 - t473 * t564 - t489 * t543 - t529 * t541) * MDP(21) + (t452 * t592 + t474 * t564 + t489 * t544 + t531 * t541) * MDP(20) + (t485 * t592 + t541 * t557) * MDP(29) + (-t427 * t592 - t430 * t557 - t460 * t541 - t479 * t485) * MDP(28) + t656 * t790 + (-t542 * t626 + t583 * t593) * MDP(13) + (t541 * t626 - t583 * t592) * MDP(14) + qJDD(1) * MDP(1) + (t452 * t544 + t474 * t531) * MDP(18) + (-t452 * t543 - t453 * t544 - t473 * t531 - t474 * t529) * MDP(19); (-t761 * t489 - t509 * t531 - t477 * t562 + t819 * t564 + t675 * t663 + (-t681 + (pkin(8) * t531 + t477 * t663) * qJD(3) + t668 * t658) * t664 + (-t477 * t749 + t437 * t663 + t626 * t445 + (t564 * t752 + t452) * pkin(8)) * t659) * MDP(24) + (t453 * t664 + t830 * t564 + (t529 * t626 - t564 * t748 - t804) * t659) * MDP(21) + (t587 * t710 + t787 * t813 - t676 + t705) * MDP(9) + (-pkin(2) * t494 - t765 * t626 + t493 * t730 - t587 * t573 + t670 * t664 + (-t626 * t808 - t671) * t659) * MDP(17) + (-t492 * t730 - pkin(2) * t495 - t587 * t571 - t574 * t626 + t670 * t659 + ((t585 + t808) * t626 + t671) * t664) * MDP(16) + (t529 * t562 + t531 * t561 + (-t529 * t663 - t531 * t658) * t751 + (-t805 - t453 * t663 + (t529 * t658 - t531 * t663) * qJD(4)) * t659) * MDP(19) + (-t452 * t664 + t697 * t564 + (-t531 * t626 - t564 * t749 + t803) * t659) * MDP(20) + (t494 * t659 - t664 * t797) * MDP(11) + ((t494 + t799) * t664 + (-t495 + t797) * t659) * MDP(12) + (t452 * t779 + t531 * t834) * MDP(18) + (pkin(1) * t738 + t584 * t710 + (pkin(7) * t745 + g(3)) * t785 + t698 + t735) * MDP(10) + t760 * MDP(5) * t787 + (-t477 * t561 + t603 * t489 - t509 * t529 + t820 * t564 + ((-qJD(4) * t620 + t510) * t564 + t675) * t658 + (t477 * t658 * qJD(3) - t421 + (qJD(3) * t529 - t804) * pkin(8) - t668 * t663) * t664 + (pkin(8) * t453 + t437 * t658 - t444 * t626 + t477 * t748) * t659) * MDP(23) + (t611 * t426 - t428 * t591 - (t535 * t657 + t552 * t662) * t485 + t415 * t664 - t424 * t753 - g(1) * (t596 * t789 + t597 * t650) - g(2) * (t594 * t789 + t595 * t650) + (t657 * t694 + t662 * t693) * t557 - t766 * t690 + t773 * t455 + (t424 * t728 - g(3) * (-t649 * t775 + t650 * t660)) * t655) * MDP(31) + (-t426 * t591 - t690 * t773) * MDP(25) + (-t426 * t590 + t427 * t591 - t460 * t773 + t690 * t772) * MDP(26) + (-t489 * t664 - t564 * t791) * MDP(22) + (-t485 * t664 - t557 * t791) * MDP(29) + (-t426 * t664 - t485 * t591 + t557 * t773 + t690 * t791) * MDP(27) + (t611 * t427 + t428 * t590 + (t535 * t662 - t552 * t657) * t485 - t416 * t664 + t423 * t753 - g(1) * (-t596 * t788 + t597 * t649) - g(2) * (-t594 * t788 + t595 * t649) + (t657 * t693 - t662 * t694) * t557 + t766 * t460 + t772 * t455 + (-t423 * t728 - g(3) * (t649 * t660 + t650 * t775)) * t655) * MDP(30) + (t626 * t753 + t583 * t664 + (t571 * t660 - t665 * t791) * t758) * MDP(14) + (t427 * t664 + t460 * t791 - t485 * t590 - t557 * t772) * MDP(28) + (-t665 * t722 + t719) * MDP(6) + (t660 * t722 + t639) * MDP(7) + t790 + (-t626 * t751 + t583 * t659 + (-t573 * t660 + t626 * t775) * t758) * MDP(13) - t660 * MDP(4) * t738 + t626 * MDP(15) * t730; -t571 ^ 2 * MDP(12) + (t494 - t799) * MDP(13) + (-t495 - t797) * MDP(14) + t583 * MDP(15) + (-t493 * t626 - t679 - t706) * MDP(16) + (g(1) * t549 + g(2) * t546 + g(3) * t593 - t492 * t626 + t555 * t571 - t683) * MDP(17) + (t531 * t712 + t805) * MDP(18) + ((t452 - t802) * t663 + (-t453 - t801) * t658) * MDP(19) + (t564 * t712 + t804) * MDP(20) + (-t564 ^ 2 * t658 + t803) * MDP(21) + (-pkin(3) * t453 - t493 * t529 - t516 * t564 + (t492 * t564 + t684) * t658 - t667 * t663) * MDP(23) + (-pkin(3) * t452 - t493 * t531 + t564 * t774 + t658 * t667 + t663 * t684) * MDP(24) + (t426 * t606 + t690 * t769) * MDP(25) + (-t426 * t605 - t427 * t606 + t460 * t769 + t690 * t768) * MDP(26) + (t485 * t606 - t557 * t769) * MDP(27) + (-t485 * t605 - t557 * t768) * MDP(28) + (t648 * t427 + t428 * t605 + (-t627 * t662 - t628 * t657) * t485 + (t657 * t695 - t662 * t696) * t557 + t701 * t460 + t768 * t455 - t679 * t650) * MDP(30) + (t648 * t426 + t428 * t606 - (-t627 * t657 + t628 * t662) * t485 + (t657 * t696 + t662 * t695) * t557 - t701 * t690 - t769 * t455 + t679 * t649) * MDP(31) + (MDP(11) * t571 + MDP(12) * t573 - MDP(16) * t555 - MDP(20) * t531 + MDP(21) * t529 - MDP(22) * t564 - MDP(23) * t444 + MDP(24) * t445 + MDP(27) * t690 + MDP(28) * t460 - MDP(29) * t557 - MDP(30) * t423 + MDP(31) * t424) * t573; t531 * t529 * MDP(18) + (-t529 ^ 2 + t531 ^ 2) * MDP(19) + (t452 + t802) * MDP(20) + (-t453 + t801) * MDP(21) + t489 * MDP(22) + (-g(1) * t511 + g(2) * t823 + g(3) * t543 + t445 * t564 - t477 * t531 + t421) * MDP(23) + (g(1) * t512 + g(2) * t822 + g(3) * t544 + t444 * t564 + t477 * t529 + t681) * MDP(24) + (t426 + t833) * MDP(27) + (-t427 - t832) * MDP(28) + (-(-t433 * t657 - t806) * t557 + (-t460 * t531 + t485 * t662 - t557 * t747) * pkin(4) + t416 + t826) * MDP(30) + ((-t434 * t557 - t418) * t657 + (t433 * t557 - t711) * t662 + (-t485 * t657 + t531 * t690 - t557 * t746) * pkin(4) + t827) * MDP(31) + t821; (t736 + t833) * MDP(27) + (-t716 - t832) * MDP(28) + (t424 * t557 + t717 + t826) * MDP(30) + (-t662 * t419 + t423 * t557 - t781 + t827) * MDP(31) + (-MDP(27) * t800 + MDP(28) * t690 - MDP(30) * t424 - MDP(31) * t807) * qJD(5) + t821;];
tau = t1;
