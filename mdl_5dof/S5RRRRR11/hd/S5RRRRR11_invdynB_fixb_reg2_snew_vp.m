% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRRR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d4,d5]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:45
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRRR11_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR11_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR11_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR11_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR11_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5RRRRR11_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:44:10
% EndTime: 2019-12-31 22:44:52
% DurationCPUTime: 31.31s
% Computational Cost: add. (223728->808), mult. (480619->1320), div. (0->0), fcn. (383684->12), ass. (0->593)
t889 = cos(pkin(5));
t880 = qJD(1) * t889 + qJD(2);
t892 = sin(qJ(3));
t897 = cos(qJ(3));
t888 = sin(pkin(5));
t893 = sin(qJ(2));
t988 = qJD(1) * t893;
t970 = t888 * t988;
t846 = t880 * t892 + t897 * t970;
t898 = cos(qJ(2));
t987 = qJD(1) * t898;
t969 = t888 * t987;
t873 = -qJD(3) + t969;
t891 = sin(qJ(4));
t896 = cos(qJ(4));
t815 = t846 * t891 + t896 * t873;
t844 = -t897 * t880 + t892 * t970;
t839 = qJD(4) + t844;
t793 = t839 * t815;
t984 = qJDD(1) * t893;
t855 = (qJD(2) * t987 + t984) * t888;
t879 = qJDD(1) * t889 + qJDD(2);
t798 = -t844 * qJD(3) + t897 * t855 + t892 * t879;
t876 = qJD(2) * t970;
t983 = qJDD(1) * t898;
t961 = t888 * t983 - t876;
t850 = -qJDD(3) + t961;
t974 = t815 * qJD(4) - t896 * t798 + t891 * t850;
t705 = -t793 + t974;
t817 = t846 * t896 - t873 * t891;
t781 = t817 * t815;
t973 = t846 * qJD(3) + t892 * t855 - t897 * t879;
t796 = qJDD(4) + t973;
t1032 = -t781 + t796;
t1041 = t1032 * t891;
t1040 = t1032 * t896;
t890 = sin(qJ(5));
t895 = cos(qJ(5));
t773 = t895 * t815 + t817 * t890;
t775 = -t815 * t890 + t817 * t895;
t715 = t775 * t773;
t924 = qJDD(5) + t796;
t1034 = -t715 + t924;
t1039 = t1034 * t890;
t1038 = t1034 * t895;
t1003 = t846 * t873;
t1037 = t973 - t1003;
t1004 = t844 * t846;
t907 = -t850 - t1004;
t1036 = t892 * t907;
t1035 = t897 * t907;
t834 = qJD(5) + t839;
t742 = t834 * t773;
t967 = t891 * t798 + t896 * t850;
t734 = -qJD(4) * t817 - t967;
t909 = qJD(5) * t773 - t734 * t890 + t895 * t974;
t1033 = -t742 - t909;
t827 = t844 * t873;
t767 = t827 + t798;
t863 = t880 * t969;
t823 = t863 + t855;
t706 = t974 + t793;
t968 = -t895 * t734 - t890 * t974;
t606 = (qJD(5) - t834) * t775 + t968;
t701 = (qJD(4) - t839) * t817 + t967;
t771 = t773 ^ 2;
t772 = t775 ^ 2;
t1031 = t815 ^ 2;
t814 = t817 ^ 2;
t832 = t834 ^ 2;
t837 = t839 ^ 2;
t842 = t844 ^ 2;
t843 = t846 ^ 2;
t1030 = t873 ^ 2;
t1029 = t880 ^ 2;
t1028 = pkin(2) * t893;
t1027 = pkin(2) * t898;
t1026 = pkin(3) * t892;
t1025 = pkin(7) * t888;
t1024 = g(3) * t898;
t1023 = t889 * g(3);
t894 = sin(qJ(1));
t899 = cos(qJ(1));
t875 = g(1) * t899 + g(2) * t894;
t900 = qJD(1) ^ 2;
t851 = -pkin(1) * t900 + qJDD(1) * t1025 - t875;
t965 = -pkin(8) * t893 - t1027;
t989 = qJD(1) * t888;
t854 = t965 * t989;
t874 = t894 * g(1) - t899 * g(2);
t905 = qJDD(1) * pkin(1) + t900 * t1025 + t874;
t904 = t889 * t905;
t903 = (-g(3) * t888 + t904) * t893;
t756 = t879 * pkin(8) - t1029 * pkin(2) + (t854 * t989 + t851) * t898 + t903;
t921 = t880 * t988 - t983;
t902 = t876 * pkin(2) - t855 * pkin(8) - t1023 + (-t880 * pkin(8) * t987 + pkin(2) * t921 - t905) * t888;
t691 = t897 * t756 + t892 * t902;
t805 = pkin(3) * t844 - pkin(9) * t846;
t651 = -pkin(3) * t1030 - pkin(9) * t850 - t805 * t844 + t691;
t966 = t851 * t893 - t898 * t904;
t755 = -t879 * pkin(2) - t1029 * pkin(8) + (t854 * t988 + t1024) * t888 + t966;
t655 = t1037 * pkin(3) - t767 * pkin(9) + t755;
t577 = t651 * t891 - t896 * t655;
t548 = t1032 * pkin(4) + t705 * pkin(10) - t577;
t578 = t896 * t651 + t891 * t655;
t787 = pkin(4) * t839 - pkin(10) * t817;
t558 = -pkin(4) * t1031 + pkin(10) * t734 - t787 * t839 + t578;
t495 = -t895 * t548 + t558 * t890;
t496 = t890 * t548 + t895 * t558;
t451 = -t495 * t895 + t496 * t890;
t1022 = t451 * t891;
t1021 = t451 * t896;
t690 = t756 * t892 - t897 * t902;
t650 = t850 * pkin(3) - t1030 * pkin(9) + t805 * t846 + t690;
t581 = -t734 * pkin(4) - t1031 * pkin(10) + t787 * t817 + t650;
t1020 = t581 * t890;
t1019 = t581 * t895;
t1018 = t650 * t891;
t1017 = t650 * t896;
t674 = t715 + t924;
t1016 = t674 * t890;
t1015 = t674 * t895;
t723 = t781 + t796;
t1014 = t723 * t891;
t1013 = t723 * t896;
t1012 = t755 * t892;
t1011 = t755 * t897;
t790 = t850 - t1004;
t1010 = t790 * t892;
t1009 = t790 * t897;
t1008 = t834 * t890;
t1007 = t834 * t895;
t1006 = t839 * t891;
t1005 = t839 * t896;
t991 = t898 * t900;
t885 = t888 ^ 2;
t995 = t885 * t893;
t872 = t991 * t995;
t852 = t872 + t879;
t1002 = t852 * t893;
t1001 = t852 * t898;
t853 = -t872 + t879;
t1000 = t853 * t893;
t999 = t853 * t898;
t998 = t873 * t892;
t997 = t873 * t897;
t996 = t879 * t888;
t994 = t885 * t900;
t829 = t888 * t905 + t1023;
t993 = t893 * t829;
t992 = t898 * t829;
t886 = t893 ^ 2;
t887 = t898 ^ 2;
t990 = t886 + t887;
t982 = t892 * t715;
t981 = t897 * t715;
t980 = t892 * t781;
t979 = t897 * t781;
t978 = t893 * t1004;
t977 = t898 * t1004;
t976 = t886 * t994;
t975 = t887 * t994;
t972 = -pkin(3) * t897 - pkin(2);
t971 = t880 * t989;
t452 = t495 * t890 + t895 * t496;
t619 = t690 * t892 + t897 * t691;
t831 = -t874 * t894 - t899 * t875;
t871 = qJDD(1) * t899 - t894 * t900;
t964 = -pkin(6) * t871 - g(3) * t894;
t838 = -t976 - t1029;
t804 = -t838 * t893 - t999;
t963 = pkin(7) * t804 - t993;
t859 = -t975 - t1029;
t811 = t859 * t898 - t1002;
t962 = pkin(7) * t811 + t992;
t424 = t452 * t896 - t1022;
t420 = t424 * t897 + t581 * t892;
t423 = t452 * t891 + t1021;
t960 = t420 * t893 - t423 * t898;
t610 = -t742 + t909;
t550 = -t606 * t890 + t610 * t895;
t552 = -t606 * t895 - t610 * t890;
t492 = -t550 * t891 + t552 * t896;
t664 = -t771 - t772;
t476 = t492 * t897 + t664 * t892;
t490 = t550 * t896 + t552 * t891;
t959 = t476 * t893 - t490 * t898;
t605 = (qJD(5) + t834) * t775 + t968;
t549 = t1033 * t895 - t605 * t890;
t551 = -t1033 * t890 - t605 * t895;
t491 = -t549 * t891 + t551 * t896;
t714 = -t772 + t771;
t482 = t491 * t897 - t714 * t892;
t489 = -t549 * t896 - t551 * t891;
t958 = t482 * t893 + t489 * t898;
t520 = t577 * t891 + t578 * t896;
t503 = t520 * t897 + t650 * t892;
t519 = -t577 * t896 + t578 * t891;
t957 = t503 * t893 - t519 * t898;
t694 = -t832 - t771;
t613 = t694 * t890 + t1038;
t614 = t694 * t895 - t1039;
t555 = -t613 * t891 + t614 * t896;
t513 = t555 * t897 + t605 * t892;
t554 = t613 * t896 + t614 * t891;
t956 = t513 * t893 - t554 * t898;
t725 = -t772 - t832;
t628 = t725 * t895 - t1016;
t629 = -t725 * t890 - t1015;
t564 = -t628 * t891 + t629 * t896;
t518 = t1033 * t892 + t564 * t897;
t563 = t628 * t896 + t629 * t891;
t955 = t518 * t893 - t563 * t898;
t741 = -t772 + t832;
t632 = t741 * t895 + t1039;
t634 = -t741 * t890 + t1038;
t569 = -t632 * t891 + t634 * t896;
t524 = t569 * t897 - t610 * t892;
t567 = -t632 * t896 - t634 * t891;
t954 = t524 * t893 + t567 * t898;
t740 = t771 - t832;
t633 = t740 * t890 + t1015;
t635 = t740 * t895 - t1016;
t570 = -t633 * t891 + t635 * t896;
t525 = t570 * t897 - t606 * t892;
t568 = -t633 * t896 - t635 * t891;
t953 = t525 * t893 + t568 * t898;
t636 = -qJD(5) * t775 - t968;
t599 = t773 * t1008 + t636 * t895;
t600 = t773 * t1007 - t636 * t890;
t544 = -t599 * t891 + t600 * t896;
t531 = t544 * t897 - t982;
t542 = -t599 * t896 - t600 * t891;
t952 = t531 * t893 + t542 * t898;
t601 = t775 * t1007 - t890 * t909;
t602 = -t775 * t1008 - t895 * t909;
t545 = -t601 * t891 + t602 * t896;
t532 = t545 * t897 + t982;
t543 = -t601 * t896 - t602 * t891;
t951 = t532 * t893 + t543 * t898;
t677 = (-t773 * t890 - t775 * t895) * t834;
t678 = (-t773 * t895 + t775 * t890) * t834;
t598 = -t677 * t891 + t678 * t896;
t588 = t598 * t897 + t892 * t924;
t597 = -t677 * t896 - t678 * t891;
t950 = t588 * t893 + t597 * t898;
t627 = -t701 * t896 - t705 * t891;
t736 = t814 + t1031;
t592 = t627 * t897 - t736 * t892;
t625 = -t701 * t891 + t705 * t896;
t949 = t592 * t893 - t625 * t898;
t702 = (-qJD(4) - t839) * t817 - t967;
t626 = t702 * t896 + t706 * t891;
t780 = -t814 + t1031;
t596 = t626 * t897 - t780 * t892;
t624 = -t702 * t891 + t706 * t896;
t948 = t596 * t893 + t624 * t898;
t748 = -t837 - t1031;
t668 = t748 * t896 - t1041;
t612 = t668 * t897 - t702 * t892;
t667 = t748 * t891 + t1040;
t947 = t612 * t893 - t667 * t898;
t770 = -t814 - t837;
t672 = -t770 * t891 - t1013;
t617 = t672 * t897 - t706 * t892;
t671 = t770 * t896 - t1014;
t946 = t617 * t893 - t671 * t898;
t945 = t619 * t893 - t755 * t898;
t789 = -t814 + t837;
t687 = -t789 * t891 + t1040;
t622 = t687 * t897 - t705 * t892;
t685 = -t789 * t896 - t1041;
t944 = t622 * t893 + t685 * t898;
t788 = -t837 + t1031;
t688 = t788 * t896 - t1014;
t623 = t688 * t897 - t701 * t892;
t686 = -t788 * t891 - t1013;
t943 = t623 * t893 + t686 * t898;
t698 = t815 * t1005 - t734 * t891;
t658 = t698 * t897 - t980;
t697 = -t815 * t1006 - t734 * t896;
t942 = t658 * t893 + t697 * t898;
t700 = -t817 * t1006 - t896 * t974;
t659 = t700 * t897 + t980;
t699 = -t817 * t1005 + t891 * t974;
t941 = t659 * t893 + t699 * t898;
t618 = -t690 * t897 + t691 * t892;
t729 = (-t815 * t896 + t817 * t891) * t839;
t696 = t729 * t897 + t796 * t892;
t728 = (t815 * t891 + t817 * t896) * t839;
t940 = t696 * t893 + t728 * t898;
t709 = -t1037 * t897 - t767 * t892;
t806 = -t843 + t842;
t939 = t709 * t893 + t806 * t898;
t764 = t973 + t1003;
t769 = t827 - t798;
t710 = -t764 * t897 - t769 * t892;
t786 = t842 + t843;
t938 = t710 * t893 + t786 * t898;
t801 = -t1030 - t842;
t732 = t801 * t897 - t1036;
t937 = -t1037 * t898 + t732 * t893;
t807 = -t843 - t1030;
t739 = -t807 * t892 + t1009;
t936 = t739 * t893 - t767 * t898;
t821 = -t843 + t1030;
t746 = -t821 * t892 + t1035;
t935 = t746 * t893 + t769 * t898;
t820 = t842 - t1030;
t747 = t820 * t897 + t1010;
t934 = t747 * t893 + t764 * t898;
t785 = (t844 * t897 - t846 * t892) * t873;
t933 = t785 * t893 + t850 * t898;
t802 = t888 * t1024 + t966;
t803 = t898 * t851 + t903;
t932 = -t898 * t802 + t893 * t803;
t737 = t802 * t893 + t803 * t898;
t862 = t880 * t970;
t826 = -t862 + t961;
t931 = t823 * t898 + t826 * t893;
t824 = -t863 + t855;
t825 = t862 + t961;
t930 = -t824 * t898 + t825 * t893;
t929 = t838 * t898 - t1000;
t857 = -t976 + t1029;
t928 = t857 * t898 + t1002;
t927 = t859 * t893 + t1001;
t858 = t975 - t1029;
t926 = t858 * t893 + t999;
t830 = t874 * t899 - t875 * t894;
t925 = qJD(1) * t880 - t889 * t900;
t759 = -t844 * t997 + t892 * t973;
t923 = t759 * t893 + t977;
t761 = t798 * t897 + t846 * t998;
t922 = t761 * t893 - t977;
t445 = -pkin(4) * t581 + pkin(10) * t452;
t409 = -pkin(9) * t423 - pkin(10) * t1021 - t445 * t891;
t412 = -pkin(3) * t423 - pkin(4) * t451;
t419 = t424 * t892 - t581 * t897;
t396 = -pkin(8) * t419 + t409 * t897 - t412 * t892;
t399 = -pkin(2) * t419 + pkin(3) * t581 - pkin(9) * t424 + pkin(10) * t1022 - t445 * t896;
t408 = t420 * t898 + t423 * t893;
t920 = pkin(7) * t408 + t396 * t893 + t399 * t898;
t441 = -pkin(4) * t664 + pkin(10) * t552 + t452;
t442 = -pkin(10) * t550 - t451;
t411 = -pkin(9) * t490 - t441 * t891 + t442 * t896;
t466 = -pkin(3) * t490 - pkin(4) * t550;
t475 = t492 * t892 - t664 * t897;
t406 = -pkin(8) * t475 + t411 * t897 - t466 * t892;
t410 = -pkin(2) * t475 + pkin(3) * t664 - pkin(9) * t492 - t441 * t896 - t442 * t891;
t446 = t476 * t898 + t490 * t893;
t919 = pkin(7) * t446 + t406 * t893 + t410 * t898;
t505 = -pkin(4) * t605 + pkin(10) * t614 - t1019;
t537 = -pkin(10) * t613 + t1020;
t453 = -pkin(9) * t554 - t505 * t891 + t537 * t896;
t459 = -pkin(3) * t554 - pkin(4) * t613 + t495;
t512 = t555 * t892 - t605 * t897;
t418 = -pkin(8) * t512 + t453 * t897 - t459 * t892;
t438 = -pkin(2) * t512 + pkin(3) * t605 - pkin(9) * t555 - t505 * t896 - t537 * t891;
t472 = t513 * t898 + t554 * t893;
t918 = pkin(7) * t472 + t418 * t893 + t438 * t898;
t511 = -pkin(4) * t1033 + pkin(10) * t629 + t1020;
t539 = -pkin(10) * t628 + t1019;
t458 = -pkin(9) * t563 - t511 * t891 + t539 * t896;
t463 = -pkin(3) * t563 - pkin(4) * t628 + t496;
t517 = -t1033 * t897 + t564 * t892;
t422 = -pkin(8) * t517 + t458 * t897 - t463 * t892;
t440 = -pkin(2) * t517 + pkin(3) * t1033 - pkin(9) * t564 - t511 * t896 - t539 * t891;
t483 = t518 * t898 + t563 * t893;
t917 = pkin(7) * t483 + t422 * t893 + t440 * t898;
t502 = t520 * t892 - t650 * t897;
t447 = -pkin(8) * t502 + (-pkin(9) * t897 + t1026) * t519;
t462 = -pkin(2) * t502 + pkin(3) * t650 - pkin(9) * t520;
t468 = t503 * t898 + t519 * t893;
t916 = pkin(7) * t468 + t447 * t893 + t462 * t898;
t500 = -pkin(9) * t625 - t519;
t591 = t627 * t892 + t736 * t897;
t469 = -pkin(8) * t591 + t625 * t1026 + t500 * t897;
t473 = -pkin(2) * t591 - pkin(3) * t736 - pkin(9) * t627 - t520;
t553 = t592 * t898 + t625 * t893;
t915 = pkin(7) * t553 + t469 * t893 + t473 * t898;
t559 = -pkin(3) * t667 + t577;
t582 = -pkin(9) * t667 + t1018;
t611 = t668 * t892 + t702 * t897;
t488 = -pkin(8) * t611 - t559 * t892 + t582 * t897;
t521 = -pkin(2) * t611 - pkin(3) * t702 - pkin(9) * t668 + t1017;
t571 = t612 * t898 + t667 * t893;
t914 = pkin(7) * t571 + t488 * t893 + t521 * t898;
t560 = -pkin(3) * t671 + t578;
t586 = -pkin(9) * t671 + t1017;
t616 = t672 * t892 + t706 * t897;
t493 = -pkin(8) * t616 - t560 * t892 + t586 * t897;
t526 = -pkin(2) * t616 - pkin(3) * t706 - pkin(9) * t672 - t1018;
t573 = t617 * t898 + t671 * t893;
t913 = pkin(7) * t573 + t493 * t893 + t526 * t898;
t731 = t801 * t892 + t1035;
t641 = -pkin(2) * t731 + t690;
t676 = -pkin(8) * t731 + t1012;
t681 = t1037 * t893 + t732 * t898;
t912 = pkin(7) * t681 + t641 * t898 + t676 * t893;
t738 = t807 * t897 + t1010;
t644 = -pkin(2) * t738 + t691;
t682 = -pkin(8) * t738 + t1011;
t683 = t739 * t898 + t767 * t893;
t911 = pkin(7) * t683 + t644 * t898 + t682 * t893;
t782 = t824 * t893 + t825 * t898;
t910 = pkin(7) * t782 + t737;
t708 = -t764 * t892 + t769 * t897;
t576 = -pkin(8) * t708 - t618;
t663 = t710 * t898 - t786 * t893;
t908 = pkin(7) * t663 - t708 * t1027 + t576 * t893;
t589 = t619 * t898 + t755 * t893;
t906 = pkin(7) * t589 + t618 * t965;
t884 = t888 * t885;
t870 = qJDD(1) * t894 + t899 * t900;
t861 = t990 * t994;
t860 = (t886 - t887) * t994;
t856 = -pkin(6) * t870 + g(3) * t899;
t828 = t990 * t971;
t822 = (t984 + (qJD(2) + t880) * t987) * t888;
t819 = t855 * t898 - t886 * t971;
t818 = -t887 * t971 - t893 * t961;
t810 = t858 * t898 - t1000;
t809 = -t857 * t893 + t1001;
t800 = (t823 * t889 + t884 * t991) * t893;
t799 = (-t884 * t900 * t893 + (-t888 * t921 - t876) * t889) * t898;
t784 = (t844 * t892 + t846 * t897) * t873;
t783 = -t823 * t893 + t826 * t898;
t779 = t888 * t826 + t889 * t927;
t778 = -t888 * t825 + t889 * t926;
t777 = -t888 * t824 + t889 * t928;
t776 = -t889 * t826 + t888 * t927;
t763 = -t888 * t822 + t889 * t929;
t762 = t889 * t822 + t888 * t929;
t760 = t798 * t892 - t846 * t997;
t758 = -t844 * t998 - t897 * t973;
t757 = t785 * t898 - t850 * t893;
t754 = -t888 * t860 + t889 * t931;
t753 = t888 * t861 + t889 * t930;
t752 = -t889 * t861 + t888 * t930;
t745 = t820 * t892 - t1009;
t744 = t821 * t897 + t1036;
t727 = -t779 * t894 + t811 * t899;
t726 = t779 * t899 + t811 * t894;
t721 = t761 * t898 + t978;
t720 = t759 * t898 - t978;
t719 = -t763 * t894 + t804 * t899;
t718 = t763 * t899 + t804 * t894;
t717 = t888 * t829 + t889 * t932;
t716 = -t889 * t829 + t888 * t932;
t713 = -t888 * t784 + t889 * t933;
t712 = -t753 * t894 + t782 * t899;
t711 = t753 * t899 + t782 * t894;
t707 = -t1037 * t892 + t767 * t897;
t695 = t729 * t892 - t796 * t897;
t693 = t747 * t898 - t764 * t893;
t692 = t746 * t898 - t769 * t893;
t684 = -t993 + (-t776 * t888 - t779 * t889) * pkin(7);
t680 = -t992 + (-t762 * t888 - t763 * t889) * pkin(7);
t679 = -pkin(1) * t776 + t888 * t802 + t889 * t962;
t670 = t709 * t898 - t806 * t893;
t669 = -pkin(1) * t762 + t888 * t803 + t889 * t963;
t666 = -t888 * t760 + t889 * t922;
t665 = -t888 * t758 + t889 * t923;
t662 = pkin(7) * t737 * t889 - pkin(1) * t716;
t661 = -t717 * t894 + t737 * t899;
t660 = t717 * t899 + t737 * t894;
t657 = t700 * t892 - t979;
t656 = t698 * t892 + t979;
t652 = -pkin(1) * t752 + t889 * t910;
t649 = -pkin(2) * t767 + pkin(8) * t739 + t1012;
t647 = -t888 * t745 + t889 * t934;
t646 = -t888 * t744 + t889 * t935;
t645 = (-t716 * t888 - t717 * t889) * pkin(7);
t643 = -pkin(2) * t1037 + pkin(8) * t732 - t1011;
t642 = (-t752 * t888 - t753 * t889) * pkin(7) - t932;
t640 = -t888 * t738 + t889 * t936;
t639 = t889 * t738 + t888 * t936;
t638 = t696 * t898 - t728 * t893;
t631 = -t888 * t731 + t889 * t937;
t630 = t889 * t731 + t888 * t937;
t621 = t688 * t892 + t701 * t897;
t620 = t687 * t892 + t705 * t897;
t615 = -t888 * t707 + t889 * t939;
t604 = -t888 * t708 + t889 * t938;
t603 = t889 * t708 + t888 * t938;
t595 = t626 * t892 + t780 * t897;
t594 = t659 * t898 - t699 * t893;
t593 = t658 * t898 - t697 * t893;
t590 = -pkin(2) * t755 + pkin(8) * t619;
t587 = t598 * t892 - t897 * t924;
t585 = -t888 * t695 + t889 * t940;
t584 = -t640 * t894 + t683 * t899;
t583 = t640 * t899 + t683 * t894;
t580 = -t631 * t894 + t681 * t899;
t579 = t631 * t899 + t681 * t894;
t575 = t623 * t898 - t686 * t893;
t574 = t622 * t898 - t685 * t893;
t572 = pkin(2) * t786 + pkin(8) * t710 + t619;
t566 = -t604 * t894 + t663 * t899;
t565 = t604 * t899 + t663 * t894;
t562 = -t888 * t657 + t889 * t941;
t561 = -t888 * t656 + t889 * t942;
t556 = t596 * t898 - t624 * t893;
t541 = -t888 * t618 + t889 * t945;
t540 = t889 * t618 + t888 * t945;
t538 = t588 * t898 - t597 * t893;
t536 = -t888 * t621 + t889 * t943;
t535 = -t888 * t620 + t889 * t944;
t534 = -t888 * t616 + t889 * t946;
t533 = t889 * t616 + t888 * t946;
t530 = t545 * t892 - t981;
t529 = t544 * t892 + t981;
t528 = -t888 * t611 + t889 * t947;
t527 = t889 * t611 + t888 * t947;
t523 = t570 * t892 + t606 * t897;
t522 = t569 * t892 + t610 * t897;
t516 = -t893 * t644 + t898 * t682 + (-t639 * t888 - t640 * t889) * pkin(7);
t515 = -t893 * t641 + t898 * t676 + (-t630 * t888 - t631 * t889) * pkin(7);
t514 = -t888 * t595 + t889 * t948;
t510 = -pkin(1) * t639 - t888 * t649 + t889 * t911;
t509 = -t888 * t591 + t889 * t949;
t508 = t889 * t591 + t888 * t949;
t507 = -t541 * t894 + t589 * t899;
t506 = t541 * t899 + t589 * t894;
t504 = -pkin(1) * t630 - t888 * t643 + t889 * t912;
t501 = -t888 * t587 + t889 * t950;
t499 = t708 * t1028 + t898 * t576 + (-t603 * t888 - t604 * t889) * pkin(7);
t498 = -t534 * t894 + t573 * t899;
t497 = t534 * t899 + t573 * t894;
t487 = -t528 * t894 + t571 * t899;
t486 = t528 * t899 + t571 * t894;
t485 = t525 * t898 - t568 * t893;
t484 = t524 * t898 - t567 * t893;
t481 = t491 * t892 + t714 * t897;
t480 = -pkin(2) * t671 + pkin(8) * t617 + t560 * t897 + t586 * t892;
t479 = t532 * t898 - t543 * t893;
t478 = t531 * t898 - t542 * t893;
t477 = -pkin(2) * t667 + pkin(8) * t612 + t559 * t897 + t582 * t892;
t474 = -pkin(1) * t603 - t572 * t888 + t889 * t908;
t471 = -t509 * t894 + t553 * t899;
t470 = t509 * t899 + t553 * t894;
t467 = (-pkin(8) * t898 + t1028) * t618 + (-t540 * t888 - t541 * t889) * pkin(7);
t465 = -pkin(1) * t540 - t888 * t590 + t889 * t906;
t464 = pkin(8) * t592 + t892 * t500 + t625 * t972;
t461 = -t888 * t523 + t889 * t953;
t460 = -t888 * t522 + t889 * t954;
t457 = -t888 * t530 + t889 * t951;
t456 = -t888 * t529 + t889 * t952;
t455 = -t888 * t517 + t889 * t955;
t454 = t889 * t517 + t888 * t955;
t450 = -t888 * t512 + t889 * t956;
t449 = t889 * t512 + t888 * t956;
t448 = t482 * t898 - t489 * t893;
t444 = -t888 * t502 + t889 * t957;
t443 = t889 * t502 + t888 * t957;
t439 = pkin(8) * t503 + (-pkin(9) * t892 + t972) * t519;
t437 = t898 * t493 - t893 * t526 + (-t533 * t888 - t534 * t889) * pkin(7);
t436 = -t455 * t894 + t483 * t899;
t435 = t455 * t899 + t483 * t894;
t434 = t898 * t488 - t893 * t521 + (-t527 * t888 - t528 * t889) * pkin(7);
t433 = -t450 * t894 + t472 * t899;
t432 = t450 * t899 + t472 * t894;
t431 = -t888 * t481 + t889 * t958;
t430 = -t888 * t475 + t889 * t959;
t429 = t889 * t475 + t888 * t959;
t428 = -pkin(1) * t533 - t888 * t480 + t889 * t913;
t427 = -t444 * t894 + t468 * t899;
t426 = t444 * t899 + t468 * t894;
t425 = -pkin(1) * t527 - t888 * t477 + t889 * t914;
t421 = t898 * t469 - t893 * t473 + (-t508 * t888 - t509 * t889) * pkin(7);
t417 = -pkin(2) * t563 + pkin(8) * t518 + t458 * t892 + t463 * t897;
t416 = -pkin(2) * t554 + pkin(8) * t513 + t453 * t892 + t459 * t897;
t415 = -pkin(1) * t508 - t888 * t464 + t889 * t915;
t414 = -t430 * t894 + t446 * t899;
t413 = t430 * t899 + t446 * t894;
t407 = t898 * t447 - t893 * t462 + (-t443 * t888 - t444 * t889) * pkin(7);
t405 = -pkin(2) * t490 + pkin(8) * t476 + t411 * t892 + t466 * t897;
t404 = t898 * t422 - t893 * t440 + (-t454 * t888 - t455 * t889) * pkin(7);
t403 = -pkin(1) * t443 - t888 * t439 + t889 * t916;
t402 = t898 * t418 - t893 * t438 + (-t449 * t888 - t450 * t889) * pkin(7);
t401 = -t888 * t419 + t889 * t960;
t400 = t889 * t419 + t888 * t960;
t398 = -pkin(1) * t454 - t888 * t417 + t889 * t917;
t397 = -pkin(1) * t449 - t888 * t416 + t889 * t918;
t395 = -t401 * t894 + t408 * t899;
t394 = t401 * t899 + t408 * t894;
t393 = -pkin(2) * t423 + pkin(8) * t420 + t409 * t892 + t412 * t897;
t392 = t898 * t406 - t893 * t410 + (-t429 * t888 - t430 * t889) * pkin(7);
t391 = -pkin(1) * t429 - t888 * t405 + t889 * t919;
t390 = t898 * t396 - t893 * t399 + (-t400 * t888 - t401 * t889) * pkin(7);
t389 = -pkin(1) * t400 - t888 * t393 + t889 * t920;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t870, -t871, 0, t831, 0, 0, 0, 0, 0, 0, t727, t719, t712, t661, 0, 0, 0, 0, 0, 0, t580, t584, t566, t507, 0, 0, 0, 0, 0, 0, t487, t498, t471, t427, 0, 0, 0, 0, 0, 0, t433, t436, t414, t395; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t871, -t870, 0, t830, 0, 0, 0, 0, 0, 0, t726, t718, t711, t660, 0, 0, 0, 0, 0, 0, t579, t583, t565, t506, 0, 0, 0, 0, 0, 0, t486, t497, t470, t426, 0, 0, 0, 0, 0, 0, t432, t435, t413, t394; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t776, t762, t752, t716, 0, 0, 0, 0, 0, 0, t630, t639, t603, t540, 0, 0, 0, 0, 0, 0, t527, t533, t508, t443, 0, 0, 0, 0, 0, 0, t449, t454, t429, t400; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t871, 0, -t870, 0, t964, -t856, -t830, -pkin(6) * t830, -t800 * t894 + t819 * t899, -t754 * t894 + t783 * t899, -t777 * t894 + t809 * t899, -t799 * t894 + t818 * t899, -t778 * t894 + t810 * t899, t828 * t899 + t894 * t996, -pkin(6) * t726 - t679 * t894 + t684 * t899, -pkin(6) * t718 - t669 * t894 + t680 * t899, -pkin(6) * t711 + t642 * t899 - t652 * t894, -pkin(6) * t660 + t645 * t899 - t662 * t894, -t666 * t894 + t721 * t899, -t615 * t894 + t670 * t899, -t646 * t894 + t692 * t899, -t665 * t894 + t720 * t899, -t647 * t894 + t693 * t899, -t713 * t894 + t757 * t899, -pkin(6) * t579 - t504 * t894 + t515 * t899, -pkin(6) * t583 - t510 * t894 + t516 * t899, -pkin(6) * t565 - t474 * t894 + t499 * t899, -pkin(6) * t506 - t465 * t894 + t467 * t899, -t562 * t894 + t594 * t899, -t514 * t894 + t556 * t899, -t535 * t894 + t574 * t899, -t561 * t894 + t593 * t899, -t536 * t894 + t575 * t899, -t585 * t894 + t638 * t899, -pkin(6) * t486 - t425 * t894 + t434 * t899, -pkin(6) * t497 - t428 * t894 + t437 * t899, -pkin(6) * t470 - t415 * t894 + t421 * t899, -pkin(6) * t426 - t403 * t894 + t407 * t899, -t457 * t894 + t479 * t899, -t431 * t894 + t448 * t899, -t460 * t894 + t484 * t899, -t456 * t894 + t478 * t899, -t461 * t894 + t485 * t899, -t501 * t894 + t538 * t899, -pkin(6) * t432 - t397 * t894 + t402 * t899, -pkin(6) * t435 - t398 * t894 + t404 * t899, -pkin(6) * t413 - t391 * t894 + t392 * t899, -pkin(6) * t394 - t389 * t894 + t390 * t899; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t870, 0, t871, 0, t856, t964, t831, pkin(6) * t831, t800 * t899 + t819 * t894, t754 * t899 + t783 * t894, t777 * t899 + t809 * t894, t799 * t899 + t818 * t894, t778 * t899 + t810 * t894, t828 * t894 - t899 * t996, pkin(6) * t727 + t679 * t899 + t684 * t894, pkin(6) * t719 + t669 * t899 + t680 * t894, pkin(6) * t712 + t642 * t894 + t652 * t899, pkin(6) * t661 + t645 * t894 + t662 * t899, t666 * t899 + t721 * t894, t615 * t899 + t670 * t894, t646 * t899 + t692 * t894, t665 * t899 + t720 * t894, t647 * t899 + t693 * t894, t713 * t899 + t757 * t894, pkin(6) * t580 + t504 * t899 + t515 * t894, pkin(6) * t584 + t510 * t899 + t516 * t894, pkin(6) * t566 + t474 * t899 + t499 * t894, pkin(6) * t507 + t465 * t899 + t467 * t894, t562 * t899 + t594 * t894, t514 * t899 + t556 * t894, t535 * t899 + t574 * t894, t561 * t899 + t593 * t894, t536 * t899 + t575 * t894, t585 * t899 + t638 * t894, pkin(6) * t487 + t425 * t899 + t434 * t894, pkin(6) * t498 + t428 * t899 + t437 * t894, pkin(6) * t471 + t415 * t899 + t421 * t894, pkin(6) * t427 + t403 * t899 + t407 * t894, t457 * t899 + t479 * t894, t431 * t899 + t448 * t894, t460 * t899 + t484 * t894, t456 * t899 + t478 * t894, t461 * t899 + t485 * t894, t501 * t899 + t538 * t894, pkin(6) * t433 + t397 * t899 + t402 * t894, pkin(6) * t436 + t398 * t899 + t404 * t894, pkin(6) * t414 + t391 * t899 + t392 * t894, pkin(6) * t395 + t389 * t899 + t390 * t894; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t874, t875, 0, 0, (t885 * t898 * t925 + t855 * t888) * t893, t889 * t860 + t888 * t931, t889 * t824 + t888 * t928, (t888 * t961 - t925 * t995) * t898, t889 * t825 + t888 * t926, t889 * t879, pkin(1) * t779 - t889 * t802 + t888 * t962, pkin(1) * t763 - t889 * t803 + t888 * t963, pkin(1) * t753 + t888 * t910, pkin(1) * t717 + t737 * t1025, t889 * t760 + t888 * t922, t889 * t707 + t888 * t939, t889 * t744 + t888 * t935, t889 * t758 + t888 * t923, t889 * t745 + t888 * t934, t889 * t784 + t888 * t933, pkin(1) * t631 + t889 * t643 + t888 * t912, pkin(1) * t640 + t889 * t649 + t888 * t911, pkin(1) * t604 + t572 * t889 + t888 * t908, pkin(1) * t541 + t590 * t889 + t888 * t906, t889 * t657 + t888 * t941, t889 * t595 + t888 * t948, t889 * t620 + t888 * t944, t889 * t656 + t888 * t942, t889 * t621 + t888 * t943, t889 * t695 + t888 * t940, pkin(1) * t528 + t889 * t477 + t888 * t914, pkin(1) * t534 + t889 * t480 + t888 * t913, pkin(1) * t509 + t889 * t464 + t888 * t915, pkin(1) * t444 + t889 * t439 + t888 * t916, t889 * t530 + t888 * t951, t889 * t481 + t888 * t958, t889 * t522 + t888 * t954, t889 * t529 + t888 * t952, t889 * t523 + t888 * t953, t889 * t587 + t888 * t950, pkin(1) * t450 + t889 * t416 + t888 * t918, pkin(1) * t455 + t889 * t417 + t888 * t917, pkin(1) * t430 + t889 * t405 + t888 * t919, pkin(1) * t401 + t889 * t393 + t888 * t920;];
tauB_reg = t1;
