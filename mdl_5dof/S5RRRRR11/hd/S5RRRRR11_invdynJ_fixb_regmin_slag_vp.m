% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S5RRRRR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d4,d5]';
% 
% Output:
% tau_reg [5x31]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:45
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S5RRRRR11_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR11_invdynJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR11_invdynJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR11_invdynJ_fixb_regmin_slag_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR11_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5RRRRR11_invdynJ_fixb_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:43:46
% EndTime: 2019-12-31 22:44:09
% DurationCPUTime: 9.22s
% Computational Cost: add. (8029->568), mult. (19692->819), div. (0->0), fcn. (16013->14), ass. (0->270)
t240 = sin(pkin(5));
t250 = cos(qJ(2));
t341 = qJD(1) * t250;
t315 = t240 * t341;
t211 = -qJD(3) + t315;
t245 = sin(qJ(2));
t241 = cos(pkin(5));
t342 = qJD(1) * t241;
t325 = pkin(1) * t342;
t172 = pkin(7) * t315 + t245 * t325;
t244 = sin(qJ(3));
t249 = cos(qJ(3));
t414 = t172 + t211 * (pkin(3) * t244 - pkin(9) * t249);
t243 = sin(qJ(4));
t248 = cos(qJ(4));
t343 = qJD(1) * t240;
t316 = t245 * t343;
t146 = t243 * t249 * t315 - t248 * t316;
t336 = qJD(3) * t249;
t410 = -t243 * t336 + t146;
t351 = t249 * t250;
t147 = (t243 * t245 + t248 * t351) * t343;
t280 = t248 * t336 - t147;
t334 = qJD(4) * t243;
t413 = -t244 * t334 + t280;
t296 = qJD(2) + t342;
t158 = t244 * t296 + t249 * t316;
t114 = t158 * t243 + t248 * t211;
t116 = t158 * t248 - t211 * t243;
t242 = sin(qJ(5));
t247 = cos(qJ(5));
t277 = t114 * t242 - t247 * t116;
t46 = t247 * t114 + t116 * t242;
t412 = t277 * t46;
t333 = qJD(4) * t248;
t411 = t244 * t333 - t410;
t291 = t244 * t316;
t156 = -t249 * t296 + t291;
t396 = qJD(4) + qJD(5);
t409 = t156 + t396;
t327 = t245 * qJDD(1);
t305 = t240 * t327;
t330 = qJD(1) * qJD(2);
t306 = t250 * t330;
t408 = -t240 * t306 - t305;
t407 = t277 ^ 2 - t46 ^ 2;
t331 = qJD(5) * t247;
t332 = qJD(5) * t242;
t328 = qJDD(1) * t250;
t224 = t240 * t328;
t307 = t245 * t330;
t290 = t240 * t307;
t168 = qJDD(3) - t224 + t290;
t329 = qJDD(1) * t241;
t225 = qJDD(2) + t329;
t275 = qJD(3) * t296;
t79 = -qJD(3) * t291 + t244 * t225 + (t275 - t408) * t249;
t38 = -t158 * t334 + t243 * t168 - t211 * t333 + t248 * t79;
t39 = qJD(4) * t116 - t248 * t168 + t243 * t79;
t12 = -t114 * t331 - t116 * t332 - t242 * t39 + t247 * t38;
t149 = qJD(4) + t156;
t142 = qJD(5) + t149;
t406 = t142 * t46 + t12;
t359 = t240 * t249;
t178 = t241 * t244 + t245 * t359;
t169 = -pkin(7) * t316 + t250 * t325;
t140 = -t296 * pkin(2) - t169;
t61 = t156 * pkin(3) - t158 * pkin(9) + t140;
t141 = t296 * pkin(8) + t172;
t276 = -pkin(2) * t250 - pkin(8) * t245 - pkin(1);
t167 = t276 * t240;
t148 = qJD(1) * t167;
t78 = t249 * t141 + t244 * t148;
t64 = -pkin(9) * t211 + t78;
t31 = t243 * t61 + t248 * t64;
t20 = -pkin(10) * t114 + t31;
t18 = t20 * t332;
t239 = qJ(4) + qJ(5);
t234 = sin(t239);
t235 = cos(t239);
t358 = t240 * t250;
t392 = cos(qJ(1));
t318 = t392 * t245;
t246 = sin(qJ(1));
t353 = t246 * t250;
t180 = t241 * t318 + t353;
t361 = t240 * t244;
t131 = t180 * t249 - t392 * t361;
t317 = t392 * t250;
t354 = t245 * t246;
t179 = -t241 * t317 + t354;
t402 = t131 * t235 + t179 * t234;
t77 = -t244 * t141 + t148 * t249;
t63 = pkin(3) * t211 - t77;
t41 = pkin(4) * t114 + t63;
t182 = -t241 * t354 + t317;
t134 = t182 * t249 + t246 * t361;
t181 = t241 * t353 + t318;
t89 = t134 * t235 + t181 * t234;
t405 = t41 * t46 + g(1) * t89 + g(2) * t402 - g(3) * (-t178 * t235 + t234 * t358) + t18;
t30 = -t243 * t64 + t248 * t61;
t19 = -pkin(10) * t116 + t30;
t17 = pkin(4) * t149 + t19;
t384 = t20 * t247;
t10 = t17 * t242 + t384;
t293 = qJD(2) * t325;
t324 = pkin(1) * t329;
t321 = -pkin(7) * t224 - t245 * t324 - t250 * t293;
t259 = -pkin(7) * t290 - t321;
t104 = pkin(8) * t225 + t259;
t285 = pkin(2) * t245 - pkin(8) * t250;
t271 = t285 * qJD(2);
t107 = (qJD(1) * t271 + qJDD(1) * t276) * t240;
t338 = qJD(3) * t244;
t268 = t249 * t104 + t244 * t107 - t141 * t338 + t148 * t336;
t22 = pkin(9) * t168 + t268;
t292 = pkin(7) * t408 - t245 * t293 + t250 * t324;
t105 = -pkin(2) * t225 - t292;
t339 = qJD(2) * t250;
t312 = t244 * t339;
t80 = -t249 * t225 + (qJD(1) * (t245 * t336 + t312) + t244 * t327) * t240 + t244 * t275;
t27 = pkin(3) * t80 - pkin(9) * t79 + t105;
t7 = -qJD(4) * t31 - t243 * t22 + t248 * t27;
t74 = qJDD(4) + t80;
t4 = pkin(4) * t74 - pkin(10) * t38 + t7;
t273 = -t248 * t22 - t243 * t27 - t61 * t333 + t64 * t334;
t5 = -pkin(10) * t39 - t273;
t2 = -qJD(5) * t10 - t242 * t5 + t247 * t4;
t403 = t131 * t234 - t179 * t235;
t88 = -t134 * t234 + t181 * t235;
t404 = t41 * t277 - g(1) * t88 + g(2) * t403 - g(3) * (-t178 * t234 - t235 * t358) + t2;
t401 = t131 * t243 - t179 * t248;
t400 = t131 * t248 + t179 * t243;
t255 = qJD(5) * t277 - t242 * t38 - t247 * t39;
t399 = -t142 * t277 + t255;
t236 = t240 ^ 2;
t326 = 0.2e1 * t236;
t191 = t242 * t248 + t243 * t247;
t175 = t191 * t244;
t390 = pkin(8) * t243;
t398 = -t414 * t248 + t338 * t390;
t205 = -pkin(3) * t249 - pkin(9) * t244 - pkin(2);
t170 = t285 * t343;
t349 = t249 * t169 + t244 * t170;
t95 = pkin(9) * t316 + t349;
t397 = -t205 * t333 + t414 * t243 + t248 * t95;
t303 = qJD(5) * t17 + t5;
t395 = t242 * t4 + t303 * t247;
t251 = qJD(1) ^ 2;
t393 = pkin(9) + pkin(10);
t391 = pkin(1) * t245;
t190 = t242 * t243 - t247 * t248;
t388 = t146 * t242 - t147 * t247 - t396 * t175 - t190 * t336;
t355 = t244 * t248;
t356 = t243 * t244;
t387 = -t332 * t356 + (t396 * t355 - t410) * t247 + t413 * t242;
t360 = t240 * t245;
t226 = pkin(7) * t360;
t165 = t226 + (-pkin(1) * t250 - pkin(2)) * t241;
t177 = -t241 * t249 + t244 * t360;
t91 = pkin(3) * t177 - pkin(9) * t178 + t165;
t346 = pkin(7) * t358 + t241 * t391;
t166 = pkin(8) * t241 + t346;
t350 = t249 * t166 + t244 * t167;
t93 = -pkin(9) * t358 + t350;
t386 = t243 * t91 + t248 * t93;
t385 = pkin(8) * qJD(3);
t383 = t243 * t38;
t382 = t243 * t74;
t381 = t248 * t74;
t380 = t409 * t190;
t379 = t409 * t191;
t159 = t244 * t169;
t94 = -pkin(3) * t316 - t170 * t249 + t159;
t378 = pkin(4) * t411 + pkin(8) * t336 - t94;
t106 = pkin(3) * t158 + pkin(9) * t156;
t377 = t243 * t106 + t248 * t77;
t375 = t114 * t149;
t374 = t116 * t149;
t373 = t156 * t211;
t372 = t156 * t243;
t371 = t158 * t211;
t366 = t180 * t244;
t365 = t211 * t244;
t364 = t234 * t249;
t363 = t235 * t249;
t362 = t236 * t251;
t357 = t241 * t250;
t352 = t248 * t249;
t230 = pkin(8) * t352;
t345 = t243 * t205 + t230;
t237 = t245 ^ 2;
t344 = -t250 ^ 2 + t237;
t340 = qJD(2) * t245;
t337 = qJD(3) * t248;
t335 = qJD(4) * t149;
t323 = t250 * t362;
t322 = t243 * t358;
t320 = qJD(4) * t393;
t319 = t249 * t392;
t314 = t244 * t341;
t313 = t240 * t340;
t310 = t240 * t241 * t251;
t301 = -t243 * t93 + t248 * t91;
t299 = -t244 * t166 + t167 * t249;
t298 = t149 * t248;
t297 = t244 * t104 - t249 * t107 + t141 * t336 + t148 * t338;
t295 = qJD(2) + 0.2e1 * t342;
t294 = t225 + t329;
t288 = -t78 + (t334 + t372) * pkin(4);
t188 = t248 * t205;
t120 = -pkin(10) * t355 + t188 + (-pkin(4) - t390) * t249;
t287 = -qJD(5) * t120 - (-t244 * t337 - t249 * t334) * pkin(8) + t397 + t411 * pkin(10);
t137 = -pkin(10) * t356 + t345;
t286 = pkin(4) * t240 * t314 - pkin(10) * t147 + qJD(5) * t137 - t243 * t95 - (pkin(4) * t244 - pkin(10) * t352) * qJD(3) - (-t230 + (pkin(10) * t244 - t205) * t243) * qJD(4) - t398;
t283 = g(1) * t182 + g(2) * t180;
t212 = t393 * t243;
t282 = pkin(10) * t372 + qJD(5) * t212 + t243 * t320 + t377;
t101 = t248 * t106;
t213 = t393 * t248;
t281 = pkin(4) * t158 + qJD(5) * t213 - t243 * t77 + t101 + (pkin(10) * t156 + t320) * t248;
t92 = pkin(3) * t358 - t299;
t129 = t178 * t248 - t322;
t28 = pkin(4) * t177 - pkin(10) * t129 + t301;
t128 = t178 * t243 + t248 * t358;
t32 = -pkin(10) * t128 + t386;
t279 = -t242 * t32 + t247 * t28;
t278 = t242 * t28 + t247 * t32;
t65 = t247 * t128 + t129 * t242;
t66 = -t128 * t242 + t129 * t247;
t171 = t240 * t271;
t173 = (pkin(1) * t357 - t226) * qJD(2);
t274 = -t166 * t336 - t167 * t338 + t171 * t249 - t244 * t173;
t267 = -t166 * t338 + t167 * t336 + t244 * t171 + t249 * t173;
t43 = pkin(9) * t313 + t267;
t126 = qJD(3) * t178 + t240 * t312;
t127 = -qJD(3) * t177 + t339 * t359;
t174 = t346 * qJD(2);
t54 = pkin(3) * t126 - pkin(9) * t127 + t174;
t272 = t243 * t54 + t248 * t43 + t91 * t333 - t93 * t334;
t23 = -pkin(3) * t168 + t297;
t270 = -pkin(9) * t74 + t149 * t63;
t133 = -t182 * t244 + t246 * t359;
t266 = g(1) * t133 + g(2) * (-t240 * t319 - t366) - g(3) * t177;
t262 = -g(1) * t181 - g(2) * t179 + g(3) * t358;
t261 = -g(3) * t360 - t283;
t258 = -t105 - t262;
t257 = -pkin(8) * t168 - t140 * t211;
t44 = -pkin(3) * t313 - t274;
t256 = -t386 * qJD(4) - t243 * t43 + t248 * t54;
t254 = pkin(9) * t335 + t23 + t266;
t253 = pkin(8) * t335 + t262;
t233 = -pkin(4) * t248 - pkin(3);
t196 = (pkin(4) * t243 + pkin(8)) * t244;
t176 = t190 * t244;
t97 = t134 * t248 + t181 * t243;
t96 = -t134 * t243 + t181 * t248;
t70 = qJDD(5) + t74;
t60 = -qJD(4) * t128 + t127 * t248 + t243 * t313;
t59 = -qJD(4) * t322 + t127 * t243 + t178 * t333 - t248 * t313;
t50 = pkin(4) * t128 + t92;
t24 = pkin(4) * t59 + t44;
t16 = qJD(5) * t66 + t242 * t60 + t247 * t59;
t15 = -qJD(5) * t65 - t242 * t59 + t247 * t60;
t14 = pkin(4) * t39 + t23;
t11 = -pkin(10) * t59 + t272;
t9 = t17 * t247 - t20 * t242;
t8 = pkin(4) * t126 - pkin(10) * t60 + t256;
t1 = -t18 + t395;
t3 = [qJDD(1), g(1) * t246 - g(2) * t392, g(1) * t392 + g(2) * t246, (qJDD(1) * t237 + 0.2e1 * t245 * t306) * t236, (t250 * t327 - t344 * t330) * t326, (t294 * t245 + t295 * t339) * t240, (t294 * t250 - t295 * t340) * t240, t225 * t241, -t174 * t296 - t226 * t225 + t292 * t241 + g(1) * t180 - g(2) * t182 + (t225 * t357 + (-t307 + t328) * t326) * pkin(1), -t173 * t296 - t346 * t225 - t259 * t241 - g(1) * t179 + g(2) * t181 + (-t306 - t327) * pkin(1) * t326, t127 * t158 + t178 * t79, -t126 * t158 - t127 * t156 - t177 * t79 - t178 * t80, -t127 * t211 + t168 * t178 + (t158 * t340 - t250 * t79) * t240, t126 * t211 - t168 * t177 + (-t156 * t340 + t250 * t80) * t240, (-t168 * t250 - t211 * t340) * t240, -t274 * t211 + t299 * t168 + t174 * t156 + t165 * t80 + t105 * t177 + t140 * t126 + g(1) * t131 - g(2) * t134 + (t250 * t297 + t340 * t77) * t240, t267 * t211 - t350 * t168 + t174 * t158 + t165 * t79 + t105 * t178 + t140 * t127 - g(1) * t366 - g(2) * t133 + (-g(1) * t319 + t250 * t268 - t340 * t78) * t240, t116 * t60 + t129 * t38, -t114 * t60 - t116 * t59 - t128 * t38 - t129 * t39, t116 * t126 + t129 * t74 + t149 * t60 + t177 * t38, -t114 * t126 - t128 * t74 - t149 * t59 - t177 * t39, t126 * t149 + t177 * t74, g(1) * t400 - g(2) * t97 + t44 * t114 + t30 * t126 + t23 * t128 + t256 * t149 + t7 * t177 + t301 * t74 + t92 * t39 + t63 * t59, -g(1) * t401 - g(2) * t96 + t44 * t116 - t31 * t126 + t23 * t129 - t272 * t149 + t273 * t177 + t92 * t38 - t386 * t74 + t63 * t60, t12 * t66 - t15 * t277, -t12 * t65 - t15 * t46 + t16 * t277 + t255 * t66, t12 * t177 - t126 * t277 + t142 * t15 + t66 * t70, -t126 * t46 - t142 * t16 + t177 * t255 - t65 * t70, t126 * t142 + t177 * t70, t24 * t46 - t50 * t255 + t14 * t65 + t41 * t16 + (-qJD(5) * t278 - t11 * t242 + t247 * t8) * t142 + t279 * t70 + t2 * t177 + t9 * t126 + g(1) * t402 - g(2) * t89, -t24 * t277 + t50 * t12 + t14 * t66 + t41 * t15 - (qJD(5) * t279 + t11 * t247 + t242 * t8) * t142 - t278 * t70 - t1 * t177 - t10 * t126 - g(1) * t403 - g(2) * t88; 0, 0, 0, -t245 * t323, t344 * t362, -t250 * t310 + t305, t245 * t310 + t224, t225, t172 * t296 + t362 * t391 - t262 + t292, pkin(1) * t323 + t169 * t296 + (pkin(7) * t330 + g(3)) * t360 + t283 + t321, t244 * t79 - t249 * t371, (t79 + t373) * t249 + (-t80 + t371) * t244, -t211 * t336 + t168 * t244 + (-t158 * t245 + t211 * t351) * t343, t211 * t338 + t168 * t249 + (t156 * t245 - t250 * t365) * t343, t211 * t316, -t77 * t316 - pkin(2) * t80 - t172 * t156 - t159 * t211 + t257 * t244 + ((t170 + t385) * t211 + t258) * t249, -pkin(2) * t79 - t349 * t211 + t78 * t316 - t172 * t158 + t257 * t249 + (-t211 * t385 - t258) * t244, t413 * t116 + t38 * t355, t114 * t147 + t116 * t146 + (-t114 * t248 - t116 * t243) * t336 + (-t383 - t248 * t39 + (t114 * t243 - t116 * t248) * qJD(4)) * t244, -t249 * t38 + t280 * t149 + (-t116 * t211 - t149 * t334 + t381) * t244, t249 * t39 + t410 * t149 + (t114 * t211 - t149 * t333 - t382) * t244, -t149 * t365 - t249 * t74, -t94 * t114 - t63 * t146 + t188 * t74 + t398 * t149 + ((-qJD(4) * t205 + t95) * t149 + t261) * t243 + (t63 * t243 * qJD(3) - t7 + (qJD(3) * t114 - t382) * pkin(8) - t253 * t248) * t249 + (pkin(8) * t39 - t211 * t30 + t23 * t243 + t333 * t63) * t244, -t345 * t74 - t94 * t116 - t63 * t147 + t397 * t149 + t261 * t248 + (-t273 + (pkin(8) * t116 + t248 * t63) * qJD(3) + t253 * t243) * t249 + (-t63 * t334 + t23 * t248 + t211 * t31 + (t149 * t337 + t38) * pkin(8)) * t244, -t12 * t176 - t277 * t388, -t12 * t175 - t176 * t255 + t277 * t387 - t388 * t46, -t12 * t249 + t388 * t142 - t176 * t70 + t277 * t365, -t387 * t142 - t175 * t70 - t249 * t255 + t46 * t365, -t142 * t365 - t249 * t70, -t196 * t255 + t14 * t175 + (t120 * t247 - t137 * t242) * t70 - t2 * t249 + t9 * t338 - g(1) * (-t181 * t363 + t182 * t234) - g(2) * (-t179 * t363 + t180 * t234) + t378 * t46 + t387 * t41 + (t242 * t287 - t247 * t286) * t142 + (-t9 * t314 - g(3) * (t234 * t245 + t235 * t351)) * t240, t196 * t12 - t14 * t176 - (t120 * t242 + t137 * t247) * t70 + t1 * t249 - t10 * t338 - g(1) * (t181 * t364 + t182 * t235) - g(2) * (t179 * t364 + t180 * t235) - t378 * t277 + t388 * t41 + (t242 * t286 + t247 * t287) * t142 + (t10 * t314 - g(3) * (-t234 * t351 + t235 * t245)) * t240; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t158 * t156, -t156 ^ 2 + t158 ^ 2, t79 - t373, -t371 - t80, t168, -t140 * t158 - t211 * t78 - t266 - t297, g(1) * t134 + g(2) * t131 + g(3) * t178 + t140 * t156 - t211 * t77 - t268, t116 * t298 + t383, (t38 - t375) * t248 + (-t39 - t374) * t243, -t116 * t158 + t149 * t298 + t382, -t149 ^ 2 * t243 + t114 * t158 + t381, -t149 * t158, -pkin(3) * t39 - t101 * t149 - t78 * t114 - t30 * t158 + (t77 * t149 + t270) * t243 - t254 * t248, -pkin(3) * t38 - t78 * t116 + t149 * t377 + t31 * t158 + t254 * t243 + t248 * t270, t12 * t191 + t277 * t380, -t12 * t190 + t191 * t255 + t277 * t379 + t380 * t46, -t142 * t380 + t158 * t277 + t191 * t70, -t142 * t379 + t158 * t46 - t190 * t70, -t142 * t158, -t233 * t255 + t14 * t190 + (-t212 * t247 - t213 * t242) * t70 - t9 * t158 + t288 * t46 + t379 * t41 + (t242 * t282 - t247 * t281) * t142 - t266 * t235, t233 * t12 + t14 * t191 - (-t242 * t212 + t213 * t247) * t70 + t10 * t158 - t288 * t277 - t380 * t41 + (t242 * t281 + t247 * t282) * t142 + t266 * t234; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t116 * t114, -t114 ^ 2 + t116 ^ 2, t38 + t375, t374 - t39, t74, -g(1) * t96 + g(2) * t401 + g(3) * t128 - t63 * t116 + t31 * t149 + t7, g(1) * t97 + g(2) * t400 + g(3) * t129 + t63 * t114 + t30 * t149 + t273, -t412, t407, t406, t399, t70, -(-t19 * t242 - t384) * t142 + (-t116 * t46 - t142 * t332 + t247 * t70) * pkin(4) + t404, (-t142 * t20 - t4) * t242 + (t142 * t19 - t303) * t247 + (t116 * t277 - t142 * t331 - t242 * t70) * pkin(4) + t405; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t412, t407, t406, t399, t70, t10 * t142 + t404, t142 * t9 - t395 + t405;];
tau_reg = t3;
