% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S5RRRRR11
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,d1,d2,d3,d4,d5]';
% 
% Output:
% tauJ_reg [5x(5*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 22:45
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S5RRRRR11_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRR11_invdynJ_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRR11_invdynJ_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRR11_invdynJ_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRR11_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S5RRRRR11_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 22:43:49
% EndTime: 2019-12-31 22:44:10
% DurationCPUTime: 9.15s
% Computational Cost: add. (60438->530), mult. (129753->786), div. (0->0), fcn. (103486->12), ass. (0->342)
t278 = sin(qJ(5));
t277 = cos(pkin(5));
t338 = qJD(1) * t277;
t271 = qJD(2) + t338;
t280 = sin(qJ(3));
t284 = cos(qJ(3));
t276 = sin(pkin(5));
t281 = sin(qJ(2));
t337 = qJD(1) * t281;
t320 = t276 * t337;
t247 = t271 * t280 + t284 * t320;
t285 = cos(qJ(2));
t336 = qJD(1) * t285;
t319 = t276 * t336;
t263 = -qJD(3) + t319;
t279 = sin(qJ(4));
t283 = cos(qJ(4));
t228 = t247 * t279 + t283 * t263;
t229 = t247 * t283 - t263 * t279;
t282 = cos(qJ(5));
t201 = t282 * t228 + t229 * t278;
t203 = -t228 * t278 + t229 * t282;
t163 = t203 * t201;
t339 = qJD(1) * t276;
t316 = qJD(2) * t339;
t328 = qJDD(1) * t276;
t253 = t281 * t328 + t285 * t316;
t270 = qJDD(1) * t277 + qJDD(2);
t313 = t253 * t280 - t284 * t270;
t217 = -qJD(3) * t247 - t313;
t216 = qJDD(4) - t217;
t215 = qJDD(5) + t216;
t381 = -t163 + t215;
t388 = t278 * t381;
t205 = t229 * t228;
t379 = -t205 + t216;
t387 = t279 * t379;
t386 = t282 * t381;
t385 = t283 * t379;
t273 = t276 ^ 2;
t384 = t273 * (-t271 + t338);
t264 = t281 * t316;
t309 = t285 * t328 - t264;
t304 = -qJDD(3) + t309;
t245 = -t284 * t271 + t280 * t320;
t348 = t247 * t245;
t297 = -t304 - t348;
t383 = t280 * t297;
t382 = t284 * t297;
t307 = -t253 * t284 - t270 * t280;
t218 = -qJD(3) * t245 - t307;
t292 = -t283 * t218 + t279 * t304;
t174 = -t228 * qJD(4) - t292;
t291 = -t279 * t218 - t283 * t304;
t289 = t229 * qJD(4) - t291;
t119 = -t201 * qJD(5) + t282 * t174 - t278 * t289;
t242 = qJD(4) + t245;
t239 = qJD(5) + t242;
t180 = t239 * t201;
t380 = -t180 + t119;
t214 = t242 * t228;
t157 = t214 + t174;
t235 = t245 * t263;
t195 = t218 + t235;
t371 = sin(qJ(1));
t372 = cos(qJ(1));
t303 = g(1) * t372 + g(2) * t371;
t375 = qJD(1) ^ 2;
t249 = -pkin(1) * t375 + pkin(7) * t328 - t303;
t302 = g(1) * t371 - g(2) * t372;
t334 = t276 * t375;
t290 = qJDD(1) * pkin(1) + pkin(7) * t334 + t302;
t288 = t277 * t290;
t314 = t281 * t249 - t285 * t288;
t344 = t276 * t285;
t220 = g(3) * t344 + t314;
t345 = t276 * t281;
t287 = -g(3) * t345 + t281 * t288;
t221 = t285 * t249 + t287;
t378 = t281 * t220 + t285 * t221;
t315 = t174 * t278 + t282 * t289;
t93 = (qJD(5) - t239) * t203 + t315;
t153 = (qJD(4) - t242) * t229 - t291;
t192 = (qJD(3) + t263) * t247 + t313;
t199 = t201 ^ 2;
t200 = t203 ^ 2;
t377 = t228 ^ 2;
t227 = t229 ^ 2;
t237 = t239 ^ 2;
t240 = t242 ^ 2;
t243 = t245 ^ 2;
t244 = t247 ^ 2;
t376 = t263 ^ 2;
t269 = t271 ^ 2;
t367 = t285 * pkin(2);
t310 = -t281 * pkin(8) - t367;
t252 = t310 * t339;
t189 = t270 * pkin(8) - t269 * pkin(2) + (t252 * t339 + t249) * t285 + t287;
t368 = t277 * g(3);
t286 = t264 * pkin(2) - t253 * pkin(8) - t368 + ((-pkin(1) - t367) * qJDD(1) + (-pkin(7) * t339 + (pkin(2) * t281 - pkin(8) * t285) * t271) * qJD(1) - t302) * t276;
t146 = t284 * t189 + t280 * t286;
t222 = pkin(3) * t245 - pkin(9) * t247;
t124 = -pkin(3) * t376 - pkin(9) * t304 - t245 * t222 + t146;
t188 = -t270 * pkin(2) - t269 * pkin(8) + (g(3) * t285 + t252 * t337) * t276 + t314;
t127 = -t195 * pkin(9) + (-t247 * t263 - t217) * pkin(3) + t188;
t76 = t124 * t279 - t283 * t127;
t58 = pkin(4) * t379 - t157 * pkin(10) - t76;
t208 = pkin(4) * t242 - pkin(10) * t229;
t77 = t283 * t124 + t279 * t127;
t65 = -pkin(4) * t377 - pkin(10) * t289 - t242 * t208 + t77;
t34 = t278 * t65 - t282 * t58;
t35 = t278 * t58 + t282 * t65;
t16 = t278 * t35 - t282 * t34;
t374 = pkin(4) * t16;
t96 = t180 + t119;
t60 = -t278 * t93 - t282 * t96;
t373 = pkin(4) * t60;
t370 = pkin(3) * t280;
t369 = t276 * pkin(7);
t366 = t16 * t279;
t365 = t16 * t283;
t145 = t189 * t280 - t284 * t286;
t123 = t304 * pkin(3) - t376 * pkin(9) + t222 * t247 + t145;
t78 = pkin(4) * t289 - pkin(10) * t377 + t208 * t229 + t123;
t364 = t278 * t78;
t363 = t282 * t78;
t362 = t123 * t279;
t361 = t123 * t283;
t136 = t163 + t215;
t360 = t136 * t278;
t359 = t136 * t282;
t165 = t205 + t216;
t358 = t165 * t279;
t357 = t165 * t283;
t356 = t188 * t280;
t355 = t188 * t284;
t211 = t304 - t348;
t354 = t211 * t280;
t353 = t211 * t284;
t352 = t239 * t278;
t351 = t239 * t282;
t350 = t242 * t279;
t349 = t242 * t283;
t347 = t263 * t280;
t346 = t263 * t284;
t335 = t273 * t375;
t262 = t285 * t281 * t335;
t250 = t262 + t270;
t342 = t281 * t250;
t251 = -t262 + t270;
t340 = t285 * t251;
t333 = qJD(3) - t263;
t330 = qJD(4) + t242;
t327 = t280 * t163;
t326 = t284 * t163;
t325 = t280 * t205;
t324 = t284 * t205;
t323 = t285 * t348;
t257 = t271 * t319;
t322 = t257 + t253;
t321 = -pkin(3) * t284 - pkin(2);
t274 = t281 ^ 2;
t318 = t274 * t335;
t275 = t285 ^ 2;
t317 = t275 * t335;
t17 = t278 * t34 + t282 * t35;
t46 = t279 * t76 + t283 * t77;
t105 = t145 * t280 + t284 * t146;
t311 = -pkin(3) * t123 + pkin(9) * t46;
t45 = t279 * t77 - t283 * t76;
t308 = t145 * t284 - t146 * t280;
t306 = -pkin(1) + t310;
t147 = -t237 - t199;
t100 = t147 * t278 + t386;
t305 = pkin(4) * t100 - t34;
t184 = -t240 - t377;
t132 = t184 * t283 - t387;
t154 = -t229 * t330 + t291;
t301 = pkin(3) * t154 + pkin(9) * t132 - t361;
t198 = -t227 - t240;
t134 = -t198 * t279 - t357;
t158 = t228 * t330 + t292;
t300 = pkin(3) * t158 + pkin(9) * t134 + t362;
t167 = -t200 - t237;
t112 = t167 * t282 - t360;
t299 = pkin(4) * t112 - t35;
t111 = -t153 * t283 + t157 * t279;
t175 = t227 + t377;
t298 = pkin(3) * t175 + pkin(9) * t111 + t46;
t101 = t147 * t282 - t388;
t92 = (qJD(5) + t239) * t203 + t315;
t39 = -pkin(4) * t92 + pkin(10) * t101 - t363;
t51 = -pkin(10) * t100 + t364;
t64 = -t100 * t279 + t101 * t283;
t296 = -pkin(3) * t92 + pkin(9) * t64 + t279 * t51 + t283 * t39;
t113 = -t167 * t278 - t359;
t40 = -pkin(4) * t380 + pkin(10) * t113 + t364;
t52 = -pkin(10) * t112 + t363;
t69 = -t112 * t279 + t113 * t283;
t295 = -pkin(3) * t380 + pkin(9) * t69 + t279 * t52 + t283 * t40;
t130 = -t199 - t200;
t62 = t278 * t96 - t282 * t93;
t13 = -pkin(4) * t130 + pkin(10) * t62 + t17;
t14 = -pkin(10) * t60 - t16;
t32 = -t279 * t60 + t283 * t62;
t294 = -pkin(3) * t130 + pkin(9) * t32 + t13 * t283 + t14 * t279;
t11 = t17 * t283 - t366;
t15 = -pkin(4) * t78 + pkin(10) * t17;
t293 = -pkin(3) * t78 + pkin(9) * t11 - pkin(10) * t366 + t15 * t283;
t256 = t271 * t320;
t255 = (t274 - t275) * t335;
t254 = -t269 - t317;
t241 = -t318 - t269;
t236 = t276 * t290 + t368;
t234 = -t256 + t309;
t233 = t256 + t309;
t232 = -t257 + t253;
t231 = -t244 + t376;
t230 = t243 - t376;
t224 = -t244 - t376;
t223 = t244 - t243;
t219 = -t376 - t243;
t210 = -t227 + t240;
t209 = -t240 + t377;
t207 = t243 + t244;
t206 = (t245 * t280 + t247 * t284) * t263;
t204 = t227 - t377;
t197 = t245 * t333 + t307;
t196 = t218 - t235;
t193 = -t247 * t333 - t313;
t191 = t218 * t280 - t247 * t346;
t190 = t217 * t284 - t245 * t347;
t183 = t230 * t280 - t353;
t182 = t231 * t284 + t383;
t179 = -t200 + t237;
t178 = t199 - t237;
t177 = -t224 * t280 + t353;
t176 = t224 * t284 + t354;
t172 = t219 * t284 - t383;
t171 = t219 * t280 + t382;
t169 = (-t228 * t283 + t229 * t279) * t242;
t168 = (-t228 * t279 - t229 * t283) * t242;
t162 = t200 - t199;
t161 = -t192 * t284 + t196 * t280;
t159 = t193 * t280 + t195 * t284;
t156 = -t214 + t174;
t152 = t174 * t283 - t229 * t350;
t151 = t174 * t279 + t229 * t349;
t150 = t228 * t349 + t279 * t289;
t149 = -t228 * t350 + t283 * t289;
t148 = t169 * t280 - t216 * t284;
t143 = t209 * t283 - t358;
t142 = -t210 * t279 + t385;
t141 = t209 * t279 + t357;
t140 = t210 * t283 + t387;
t139 = (-t201 * t282 + t203 * t278) * t239;
t138 = (-t201 * t278 - t203 * t282) * t239;
t133 = t198 * t283 - t358;
t131 = t184 * t279 + t385;
t129 = t152 * t280 - t324;
t128 = t150 * t280 + t324;
t122 = pkin(2) * t197 + pkin(8) * t177 + t356;
t120 = pkin(2) * t193 + pkin(8) * t172 - t355;
t118 = -qJD(5) * t203 - t315;
t117 = t178 * t282 - t360;
t116 = -t179 * t278 + t386;
t115 = t178 * t278 + t359;
t114 = t179 * t282 + t388;
t110 = t154 * t283 - t156 * t279;
t109 = -t153 * t279 - t157 * t283;
t108 = t154 * t279 + t156 * t283;
t107 = t143 * t280 + t153 * t284;
t106 = t142 * t280 - t157 * t284;
t103 = t134 * t284 - t158 * t280;
t102 = t134 * t280 + t158 * t284;
t99 = t132 * t284 - t154 * t280;
t98 = t132 * t280 + t154 * t284;
t91 = t119 * t282 - t203 * t352;
t90 = t119 * t278 + t203 * t351;
t89 = -t118 * t278 + t201 * t351;
t88 = t118 * t282 + t201 * t352;
t87 = -t138 * t279 + t139 * t283;
t86 = t138 * t283 + t139 * t279;
t85 = t110 * t280 - t204 * t284;
t84 = t111 * t284 - t175 * t280;
t83 = t111 * t280 + t175 * t284;
t82 = -pkin(2) * t188 + pkin(8) * t105;
t81 = -t215 * t284 + t280 * t87;
t80 = -pkin(9) * t133 + t361;
t79 = -pkin(9) * t131 + t362;
t74 = pkin(2) * t207 + pkin(8) * t161 + t105;
t73 = -t115 * t279 + t117 * t283;
t72 = -t114 * t279 + t116 * t283;
t71 = t115 * t283 + t117 * t279;
t70 = t114 * t283 + t116 * t279;
t68 = t112 * t283 + t113 * t279;
t67 = -pkin(3) * t133 + t77;
t66 = -pkin(3) * t131 + t76;
t63 = t100 * t283 + t101 * t279;
t61 = -t278 * t380 - t282 * t92;
t59 = -t278 * t92 + t282 * t380;
t56 = -t279 * t90 + t283 * t91;
t55 = -t279 * t88 + t283 * t89;
t54 = t279 * t91 + t283 * t90;
t53 = t279 * t89 + t283 * t88;
t50 = t280 * t56 - t326;
t49 = t280 * t55 + t326;
t48 = t280 * t73 + t284 * t93;
t47 = t280 * t72 - t284 * t96;
t44 = t280 * t380 + t284 * t69;
t43 = t280 * t69 - t284 * t380;
t42 = t280 * t92 + t284 * t64;
t41 = t280 * t64 - t284 * t92;
t38 = t123 * t280 + t284 * t46;
t37 = -t123 * t284 + t280 * t46;
t36 = -pkin(9) * t109 - t45;
t31 = -t279 * t59 + t283 * t61;
t30 = t279 * t62 + t283 * t60;
t29 = t279 * t61 + t283 * t59;
t28 = -t162 * t284 + t280 * t31;
t27 = -pkin(2) * t133 + pkin(8) * t103 + t280 * t80 + t284 * t67;
t26 = -pkin(2) * t131 + pkin(8) * t99 + t280 * t79 + t284 * t66;
t25 = t130 * t280 + t284 * t32;
t24 = -t130 * t284 + t280 * t32;
t23 = -pkin(3) * t30 - t373;
t22 = pkin(8) * t84 + t109 * t321 + t280 * t36;
t21 = -pkin(3) * t68 - t299;
t20 = -pkin(3) * t63 - t305;
t19 = -pkin(9) * t68 - t279 * t40 + t283 * t52;
t18 = -pkin(9) * t63 - t279 * t39 + t283 * t51;
t12 = pkin(8) * t38 + (-pkin(9) * t280 + t321) * t45;
t10 = t17 * t279 + t365;
t9 = t11 * t284 + t280 * t78;
t8 = t11 * t280 - t284 * t78;
t7 = -pkin(2) * t68 + pkin(8) * t44 + t19 * t280 + t21 * t284;
t6 = -pkin(2) * t63 + pkin(8) * t42 + t18 * t280 + t20 * t284;
t5 = -pkin(3) * t10 - t374;
t4 = -pkin(9) * t30 - t13 * t279 + t14 * t283;
t3 = -pkin(9) * t10 - pkin(10) * t365 - t15 * t279;
t2 = -pkin(2) * t30 + pkin(8) * t25 + t23 * t284 + t280 * t4;
t1 = -pkin(2) * t10 + pkin(8) * t9 + t280 * t3 + t284 * t5;
t33 = [0, 0, 0, 0, 0, qJDD(1), t302, t303, 0, 0, (t253 * t276 - t336 * t384) * t281, t277 * t255 + (t281 * t234 + t285 * t322) * t276, t277 * t232 + (t342 + t285 * (t269 - t318)) * t276, (t276 * t309 + t337 * t384) * t285, t277 * t233 + (t281 * (-t269 + t317) + t340) * t276, t277 * t270, (-t220 + pkin(1) * (t250 * t285 + t254 * t281)) * t277 + (t285 * t236 + pkin(1) * t234 + pkin(7) * (t254 * t285 - t342)) * t276, -t236 * t345 - t277 * t221 + pkin(1) * (-t276 * t322 + (t241 * t285 - t251 * t281) * t277) + (-t281 * t241 - t340) * t369, pkin(1) * ((-t232 * t285 + t233 * t281) * t277 - (-t274 - t275) * t273 * t334) + (t281 * t232 + t233 * t285) * t369 + t378 * t276, pkin(1) * (t276 * t236 + (-t220 * t285 + t221 * t281) * t277) + t378 * t369, t277 * t191 + (t281 * (t218 * t284 + t247 * t347) - t323) * t276, t277 * t159 + (t281 * (t193 * t284 - t195 * t280) - t285 * t223) * t276, t277 * t182 + (t281 * (-t231 * t280 + t382) - t285 * t196) * t276, t277 * t190 + (t281 * (-t217 * t280 - t245 * t346) + t323) * t276, t277 * t183 + (t281 * (t230 * t284 + t354) + t285 * t192) * t276, t304 * t344 + t277 * t206 + (t245 * t284 - t247 * t280) * t263 * t345, (t120 + pkin(1) * (t172 * t281 + t193 * t285)) * t277 + (t281 * (-pkin(8) * t171 + t356) + t285 * (-pkin(2) * t171 + t145) - pkin(1) * t171 + pkin(7) * (t172 * t285 - t281 * t193)) * t276, (t122 + pkin(1) * (t177 * t281 + t197 * t285)) * t277 + (t281 * (-pkin(8) * t176 + t355) + t285 * (-pkin(2) * t176 + t146) - pkin(1) * t176 + pkin(7) * (t177 * t285 - t281 * t197)) * t276, (t74 + pkin(1) * (t161 * t281 + t207 * t285)) * t277 + (t281 * t308 + pkin(7) * (t161 * t285 - t281 * t207) + t306 * (-t192 * t280 - t196 * t284)) * t276, (t82 + pkin(1) * (t105 * t281 - t188 * t285)) * t277 + (pkin(7) * (t105 * t285 + t281 * t188) - t306 * t308) * t276, t277 * t129 + (t281 * (t152 * t284 + t325) - t285 * t151) * t276, t277 * t85 + (t281 * (t110 * t284 + t204 * t280) - t285 * t108) * t276, t277 * t106 + (t281 * (t142 * t284 + t157 * t280) - t285 * t140) * t276, t277 * t128 + (t281 * (t150 * t284 - t325) + t285 * t149) * t276, t277 * t107 + (t281 * (t143 * t284 - t153 * t280) - t285 * t141) * t276, t277 * t148 + (t281 * (t169 * t284 + t216 * t280) - t285 * t168) * t276, (t26 + pkin(1) * (-t131 * t285 + t281 * t99)) * t277 + (t281 * (-pkin(8) * t98 - t280 * t66 + t284 * t79) + t285 * (-pkin(2) * t98 - t301) - pkin(1) * t98 + pkin(7) * (t281 * t131 + t285 * t99)) * t276, (t27 + pkin(1) * (t103 * t281 - t133 * t285)) * t277 + (t281 * (-pkin(8) * t102 - t280 * t67 + t284 * t80) + t285 * (-pkin(2) * t102 - t300) - pkin(1) * t102 + pkin(7) * (t103 * t285 + t281 * t133)) * t276, (t22 + pkin(1) * (-t109 * t285 + t281 * t84)) * t277 + (t281 * (-pkin(8) * t83 + t109 * t370 + t284 * t36) + t285 * (-pkin(2) * t83 - t298) - pkin(1) * t83 + pkin(7) * (t281 * t109 + t285 * t84)) * t276, (t12 + pkin(1) * (t281 * t38 - t285 * t45)) * t277 + (t281 * (-pkin(8) * t37 + (-pkin(9) * t284 + t370) * t45) + t285 * (-pkin(2) * t37 - t311) - pkin(1) * t37 + pkin(7) * (t281 * t45 + t285 * t38)) * t276, t277 * t50 + (t281 * (t284 * t56 + t327) - t285 * t54) * t276, t277 * t28 + (t281 * (t162 * t280 + t284 * t31) - t285 * t29) * t276, t277 * t47 + (t281 * (t280 * t96 + t284 * t72) - t285 * t70) * t276, t277 * t49 + (t281 * (t284 * t55 - t327) - t285 * t53) * t276, t277 * t48 + (t281 * (-t280 * t93 + t284 * t73) - t285 * t71) * t276, t277 * t81 + (t281 * (t215 * t280 + t284 * t87) - t285 * t86) * t276, (t6 + pkin(1) * (t281 * t42 - t285 * t63)) * t277 + (t281 * (-pkin(8) * t41 + t18 * t284 - t20 * t280) + t285 * (-pkin(2) * t41 - t296) - pkin(1) * t41 + pkin(7) * (t281 * t63 + t285 * t42)) * t276, (t7 + pkin(1) * (t281 * t44 - t285 * t68)) * t277 + (t281 * (-pkin(8) * t43 + t19 * t284 - t21 * t280) + t285 * (-pkin(2) * t43 - t295) - pkin(1) * t43 + pkin(7) * (t281 * t68 + t285 * t44)) * t276, (t2 + pkin(1) * (t25 * t281 - t285 * t30)) * t277 + (t281 * (-pkin(8) * t24 - t23 * t280 + t284 * t4) + t285 * (-pkin(2) * t24 - t294) - pkin(1) * t24 + pkin(7) * (t25 * t285 + t281 * t30)) * t276, (t1 + pkin(1) * (-t10 * t285 + t281 * t9)) * t277 + (t281 * (-pkin(8) * t8 - t280 * t5 + t284 * t3) + t285 * (-pkin(2) * t8 - t293) - pkin(1) * t8 + pkin(7) * (t281 * t10 + t285 * t9)) * t276; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t262, t255, t232, t262, t233, t270, -t220, -t221, 0, 0, t191, t159, t182, t190, t183, t206, t120, t122, t74, t82, t129, t85, t106, t128, t107, t148, t26, t27, t22, t12, t50, t28, t47, t49, t48, t81, t6, t7, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t348, t223, t196, -t348, -t192, -t304, -t145, -t146, 0, 0, t151, t108, t140, -t149, t141, t168, t301, t300, t298, t311, t54, t29, t70, t53, t71, t86, t296, t295, t294, t293; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t205, t204, t157, -t205, -t153, t216, -t76, -t77, 0, 0, t163, t162, t96, -t163, -t93, t215, t305, t299, t373, t374; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t163, t162, t96, -t163, -t93, t215, -t34, -t35, 0, 0;];
tauJ_reg = t33;
