% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRRRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,alpha3,d2,d3,d4,d5,theta1]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:27
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRRRR10_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR10_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR10_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRRR10_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRRR10_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S5PRRRR10_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:26:23
% EndTime: 2019-12-05 17:26:57
% DurationCPUTime: 27.62s
% Computational Cost: add. (180057->815), mult. (375685->1385), div. (0->0), fcn. (303769->14), ass. (0->609)
t774 = sin(qJ(5));
t772 = cos(pkin(6));
t760 = qJD(2) * t772 + qJD(3);
t775 = sin(qJ(4));
t779 = cos(qJ(4));
t769 = sin(pkin(6));
t776 = sin(qJ(3));
t900 = qJD(2) * t776;
t884 = t769 * t900;
t724 = t760 * t775 + t779 * t884;
t780 = cos(qJ(3));
t899 = qJD(2) * t780;
t883 = t769 * t899;
t754 = -qJD(4) + t883;
t778 = cos(qJ(5));
t691 = t724 * t774 + t778 * t754;
t693 = t724 * t778 - t754 * t774;
t651 = t693 * t691;
t896 = qJDD(2) * t776;
t732 = (qJD(3) * t899 + t896) * t769;
t759 = qJDD(2) * t772 + qJDD(3);
t887 = t724 * qJD(4) + t775 * t732 - t779 * t759;
t879 = qJDD(5) + t887;
t941 = -t651 + t879;
t948 = t774 * t941;
t947 = t778 * t941;
t777 = sin(qJ(2));
t781 = cos(qJ(2));
t773 = cos(pkin(5));
t771 = cos(pkin(11));
t762 = t771 * g(2);
t768 = sin(pkin(11));
t882 = g(1) * t768 - t762;
t767 = g(3) - qJDD(1);
t770 = sin(pkin(5));
t909 = t770 * t767;
t790 = t773 * t882 - t909;
t877 = g(1) * t771 + g(2) * t768;
t687 = -t777 * t877 - t781 * t790;
t782 = qJD(2) ^ 2;
t933 = pkin(8) * t769;
t786 = qJDD(2) * pkin(2) + t782 * t933 - t687;
t744 = t770 * t882;
t880 = t767 * t773 + t744;
t946 = -t769 * t880 + t772 * t786;
t920 = t724 * t754;
t945 = t887 - t920;
t688 = t777 * t790 - t781 * t877;
t643 = t687 * t777 + t688 * t781;
t944 = t643 * t770;
t756 = qJD(3) * t884;
t895 = qJDD(2) * t780;
t873 = t769 * t895 - t756;
t728 = -qJDD(4) + t873;
t722 = -t779 * t760 + t775 * t884;
t921 = t722 * t724;
t788 = -t728 - t921;
t943 = t775 * t788;
t871 = t777 * t880;
t942 = t779 * t788;
t870 = t781 * t880;
t670 = -t722 * qJD(4) + t779 * t732 + t775 * t759;
t707 = t722 * t754;
t638 = t707 + t670;
t742 = t760 * t884;
t940 = t742 - t873;
t743 = t760 * t883;
t703 = t743 + t732;
t717 = qJD(5) + t722;
t666 = t717 * t691;
t888 = t691 * qJD(5) - t778 * t670 + t774 * t728;
t576 = t888 + t666;
t881 = t774 * t670 + t778 * t728;
t571 = (qJD(5) - t717) * t693 + t881;
t710 = -t768 * t882 - t771 * t877;
t678 = -t782 * pkin(2) + qJDD(2) * t933 + t688;
t599 = t780 * t678 + t946 * t776;
t689 = t691 ^ 2;
t690 = t693 ^ 2;
t715 = t717 ^ 2;
t720 = t722 ^ 2;
t721 = t724 ^ 2;
t939 = t754 ^ 2;
t938 = t760 ^ 2;
t937 = pkin(3) * t776;
t936 = pkin(3) * t780;
t935 = pkin(4) * t775;
t934 = pkin(7) * t773;
t878 = -pkin(9) * t776 - t936;
t901 = qJD(2) * t769;
t731 = t878 * t901;
t583 = -t938 * pkin(3) + t759 * pkin(9) + t731 * t883 + t599;
t652 = t769 * t786 + t772 * t880;
t784 = t940 * pkin(3) - t703 * pkin(9) - t652;
t516 = t583 * t775 - t779 * t784;
t680 = pkin(4) * t722 - pkin(10) * t724;
t481 = t728 * pkin(4) - t939 * pkin(10) + t680 * t724 + t516;
t932 = t481 * t774;
t931 = t481 * t778;
t903 = t946 * t780;
t582 = -t759 * pkin(3) - t938 * pkin(9) + (t731 * t901 + t678) * t776 - t903;
t930 = t582 * t775;
t929 = t582 * t779;
t596 = t651 + t879;
t928 = t596 * t774;
t927 = t596 * t778;
t663 = t728 - t921;
t926 = t663 * t775;
t925 = t663 * t779;
t885 = t760 * t901;
t765 = t776 ^ 2;
t766 = t780 ^ 2;
t902 = t765 + t766;
t708 = t902 * t885;
t924 = t708 * t777;
t923 = t717 * t774;
t922 = t717 * t778;
t904 = t780 * t782;
t764 = t769 ^ 2;
t913 = t764 * t776;
t753 = t904 * t913;
t729 = t753 + t759;
t919 = t729 * t776;
t918 = t729 * t780;
t730 = -t753 + t759;
t917 = t730 * t776;
t916 = t730 * t780;
t915 = t754 * t775;
t914 = t754 * t779;
t912 = t764 * t782;
t911 = t768 * t767;
t910 = t769 * t781;
t908 = t771 * t767;
t907 = t776 * t652;
t906 = t780 * t652;
t517 = t779 * t583 + t775 * t784;
t482 = -pkin(4) * t939 - pkin(10) * t728 - t680 * t722 + t517;
t509 = t945 * pkin(4) - t638 * pkin(10) + t582;
t435 = t778 * t482 + t774 * t509;
t897 = qJDD(2) * t770;
t894 = t775 * t651;
t893 = t779 * t651;
t892 = t776 * t921;
t891 = t780 * t921;
t890 = t765 * t912;
t889 = t766 * t912;
t886 = -pkin(4) * t779 - pkin(3);
t434 = t482 * t774 - t778 * t509;
t446 = t516 * t775 + t779 * t517;
t716 = -t890 - t938;
t677 = -t716 * t776 - t916;
t876 = pkin(8) * t677 - t907;
t735 = -t889 - t938;
t685 = t735 * t780 - t919;
t875 = pkin(8) * t685 + t906;
t874 = g(2) * t768 ^ 2 + t762 * t771;
t383 = t434 * t774 + t435 * t778;
t363 = t383 * t775 - t481 * t779;
t364 = t383 * t779 + t481 * t775;
t382 = -t434 * t778 + t435 * t774;
t868 = t364 * t776 - t382 * t780;
t324 = -t769 * t363 + t772 * t868;
t342 = t364 * t780 + t382 * t776;
t869 = t324 * t781 + t342 * t777;
t445 = -t516 * t779 + t517 * t775;
t858 = t446 * t776 - t582 * t780;
t387 = -t769 * t445 + t772 * t858;
t429 = t446 * t780 + t582 * t776;
t867 = t387 * t781 + t429 * t777;
t575 = -t666 + t888;
t499 = -t571 * t778 - t575 * t774;
t609 = t689 + t690;
t462 = t499 * t775 + t609 * t779;
t463 = t499 * t779 - t609 * t775;
t497 = -t571 * t774 + t575 * t778;
t856 = t463 * t776 - t497 * t780;
t396 = -t769 * t462 + t772 * t856;
t424 = t463 * t780 + t497 * t776;
t866 = t396 * t781 + t424 * t777;
t573 = (-qJD(5) - t717) * t693 - t881;
t500 = t573 * t778 + t576 * t774;
t650 = -t690 + t689;
t470 = t500 * t775 + t650 * t779;
t471 = t500 * t779 - t650 * t775;
t498 = -t573 * t774 + t576 * t778;
t855 = t471 * t776 + t498 * t780;
t399 = -t769 * t470 + t772 * t855;
t431 = t471 * t780 - t498 * t776;
t865 = t399 * t781 + t431 * t777;
t620 = -t715 - t689;
t545 = t620 * t778 - t948;
t478 = t545 * t775 + t573 * t779;
t479 = t545 * t779 - t573 * t775;
t544 = t620 * t774 + t947;
t853 = t479 * t776 - t544 * t780;
t408 = -t769 * t478 + t772 * t853;
t442 = t479 * t780 + t544 * t776;
t864 = t408 * t781 + t442 * t777;
t641 = -t690 - t715;
t549 = -t641 * t774 - t927;
t485 = t549 * t775 + t576 * t779;
t486 = t549 * t779 - t576 * t775;
t548 = t641 * t778 - t928;
t851 = t486 * t776 - t548 * t780;
t411 = -t769 * t485 + t772 * t851;
t450 = t486 * t780 + t548 * t776;
t863 = t411 * t781 + t450 * t777;
t662 = -t690 + t715;
t561 = -t662 * t774 + t947;
t491 = t561 * t775 + t575 * t779;
t493 = t561 * t779 - t575 * t775;
t559 = -t662 * t778 - t948;
t850 = t493 * t776 + t559 * t780;
t417 = -t769 * t491 + t772 * t850;
t454 = t493 * t780 - t559 * t776;
t862 = t417 * t781 + t454 * t777;
t661 = t689 - t715;
t562 = t661 * t778 - t928;
t492 = t562 * t775 + t571 * t779;
t494 = t562 * t779 - t571 * t775;
t560 = -t661 * t774 - t927;
t849 = t494 * t776 + t560 * t780;
t418 = -t769 * t492 + t772 * t849;
t455 = t494 * t780 - t560 * t776;
t861 = t418 * t781 + t455 * t777;
t607 = -qJD(5) * t693 - t881;
t568 = -t607 * t774 + t691 * t922;
t530 = t568 * t775 + t893;
t532 = t568 * t779 - t894;
t567 = -t607 * t778 - t691 * t923;
t843 = t532 * t776 + t567 * t780;
t438 = -t769 * t530 + t772 * t843;
t465 = t532 * t780 - t567 * t776;
t860 = t438 * t781 + t465 * t777;
t570 = -t693 * t923 - t778 * t888;
t531 = t570 * t775 - t893;
t533 = t570 * t779 + t894;
t569 = -t693 * t922 + t774 * t888;
t842 = t533 * t776 + t569 * t780;
t439 = -t769 * t531 + t772 * t842;
t466 = t533 * t780 - t569 * t776;
t859 = t439 * t781 + t466 * t777;
t604 = (-t691 * t778 + t693 * t774) * t717;
t565 = t604 * t775 - t779 * t879;
t566 = t604 * t779 + t775 * t879;
t603 = (t691 * t774 + t693 * t778) * t717;
t839 = t566 * t776 + t603 * t780;
t459 = -t769 * t565 + t772 * t839;
t515 = t566 * t780 - t603 * t776;
t857 = t459 * t781 + t515 * t777;
t635 = t887 + t920;
t640 = t707 - t670;
t578 = -t635 * t775 + t640 * t779;
t580 = -t635 * t779 - t640 * t775;
t660 = t720 + t721;
t837 = t580 * t776 + t660 * t780;
t476 = -t769 * t578 + t772 * t837;
t537 = t580 * t780 - t660 * t776;
t854 = t476 * t781 + t537 * t777;
t577 = t638 * t779 - t775 * t945;
t579 = -t638 * t775 - t779 * t945;
t681 = -t721 + t720;
t838 = t579 * t776 + t681 * t780;
t484 = -t769 * t577 + t772 * t838;
t547 = t579 * t780 - t681 * t776;
t852 = t484 * t781 + t547 * t777;
t598 = t678 * t776 - t903;
t835 = -t780 * t598 + t776 * t599;
t506 = t769 * t652 + t772 * t835;
t534 = t598 * t776 + t599 * t780;
t848 = t506 * t781 + t534 * t777;
t675 = -t939 - t720;
t605 = t675 * t775 + t942;
t606 = t675 * t779 - t943;
t834 = t606 * t776 - t780 * t945;
t511 = -t769 * t605 + t772 * t834;
t554 = t606 * t780 + t776 * t945;
t847 = t511 * t781 + t554 * t777;
t682 = -t721 - t939;
t612 = t682 * t779 + t926;
t613 = -t682 * t775 + t925;
t833 = t613 * t776 - t638 * t780;
t519 = -t769 * t612 + t772 * t833;
t558 = t613 * t780 + t638 * t776;
t846 = t519 * t781 + t558 * t777;
t701 = -t721 + t939;
t616 = t701 * t779 + t943;
t618 = -t701 * t775 + t942;
t832 = t618 * t776 + t640 * t780;
t522 = -t769 * t616 + t772 * t832;
t563 = t618 * t780 - t640 * t776;
t845 = t522 * t781 + t563 * t777;
t700 = t720 - t939;
t617 = t700 * t775 - t925;
t619 = t700 * t779 + t926;
t831 = t619 * t776 + t635 * t780;
t523 = -t769 * t617 + t772 * t831;
t564 = t619 * t780 - t635 * t776;
t844 = t523 * t781 + t564 * t777;
t628 = -t722 * t915 - t779 * t887;
t629 = -t722 * t914 + t775 * t887;
t811 = t629 * t776 + t891;
t540 = -t769 * t628 + t772 * t811;
t593 = t629 * t780 - t892;
t841 = t540 * t781 + t593 * t777;
t630 = t670 * t775 - t724 * t914;
t631 = t670 * t779 + t724 * t915;
t810 = t631 * t776 - t891;
t541 = -t769 * t630 + t772 * t810;
t594 = t631 * t780 + t892;
t840 = t541 * t781 + t594 * t777;
t655 = (t722 * t775 + t724 * t779) * t754;
t656 = (t722 * t779 - t724 * t775) * t754;
t824 = t656 * t776 + t728 * t780;
t587 = -t769 * t655 + t772 * t824;
t627 = t656 * t780 - t728 * t776;
t836 = t587 * t781 + t627 * t777;
t741 = t902 * t912;
t704 = -t743 + t732;
t705 = t742 + t873;
t820 = -t704 * t780 + t705 * t776;
t625 = t769 * t741 + t772 * t820;
t653 = t704 * t776 + t705 * t780;
t830 = t625 * t781 + t653 * t777;
t740 = (t765 - t766) * t912;
t821 = t703 * t780 - t776 * t940;
t626 = -t769 * t740 + t772 * t821;
t654 = -t703 * t776 - t780 * t940;
t829 = t626 * t781 + t654 * t777;
t702 = (t896 + (qJD(3) + t760) * t899) * t769;
t819 = t716 * t780 - t917;
t634 = -t769 * t702 + t772 * t819;
t828 = t634 * t781 + t677 * t777;
t733 = -t890 + t938;
t818 = t733 * t780 + t919;
t647 = -t769 * t704 + t772 * t818;
t683 = -t733 * t776 + t918;
t827 = t647 * t781 + t683 * t777;
t734 = t889 - t938;
t816 = t734 * t776 + t916;
t648 = -t769 * t705 + t772 * t816;
t684 = t734 * t780 - t917;
t826 = t648 * t781 + t684 * t777;
t817 = t735 * t776 + t918;
t649 = -t769 * t940 + t772 * t817;
t825 = t649 * t781 + t685 * t777;
t763 = t769 * t764;
t671 = (-t763 * t776 * t782 + (-t756 + (-t760 * t900 + t895) * t769) * t772) * t780;
t694 = -t766 * t885 - t776 * t873;
t823 = t671 * t781 + t694 * t777;
t674 = (t703 * t772 + t763 * t904) * t776;
t695 = t732 * t780 - t765 * t885;
t822 = t674 * t781 + t695 * t777;
t642 = t687 * t781 - t688 * t777;
t813 = qJDD(2) * t777 + t781 * t782;
t738 = t813 * t773;
t751 = qJDD(2) * t781 - t777 * t782;
t815 = t738 * t771 + t751 * t768;
t698 = t738 * t768 - t751 * t771;
t814 = qJD(2) * t760 - t772 * t782;
t315 = pkin(9) * t364 + (-pkin(10) * t775 + t886) * t382;
t323 = t772 * t363 + t769 * t868;
t326 = -pkin(9) * t363 + (-pkin(10) * t779 + t935) * t382;
t336 = -pkin(3) * t363 + pkin(4) * t481 - pkin(10) * t383;
t797 = pkin(8) * t342 + t326 * t776 + t336 * t780;
t294 = -pkin(2) * t323 - t769 * t315 + t772 * t797;
t298 = t780 * t326 - t776 * t336 + (-t323 * t769 - t324 * t772) * pkin(8);
t307 = -t324 * t777 + t342 * t781;
t809 = pkin(7) * t307 + t294 * t781 + t298 * t777;
t367 = -pkin(10) * t497 - t382;
t345 = pkin(9) * t463 + t775 * t367 + t497 * t886;
t395 = t772 * t462 + t769 * t856;
t348 = -pkin(9) * t462 + t367 * t779 + t497 * t935;
t355 = -pkin(3) * t462 - pkin(4) * t609 - pkin(10) * t499 - t383;
t796 = pkin(8) * t424 + t348 * t776 + t355 * t780;
t306 = -pkin(2) * t395 - t769 * t345 + t772 * t796;
t309 = t780 * t348 - t776 * t355 + (-t395 * t769 - t396 * t772) * pkin(8);
t359 = -t396 * t777 + t424 * t781;
t808 = pkin(7) * t359 + t306 * t781 + t309 * t777;
t413 = -pkin(4) * t544 + t434;
t443 = -pkin(10) * t544 + t932;
t356 = -pkin(3) * t544 + pkin(9) * t479 + t413 * t779 + t443 * t775;
t407 = t772 * t478 + t769 * t853;
t361 = -pkin(9) * t478 - t413 * t775 + t443 * t779;
t400 = -pkin(3) * t478 - pkin(4) * t573 - pkin(10) * t545 + t931;
t795 = pkin(8) * t442 + t361 * t776 + t400 * t780;
t311 = -pkin(2) * t407 - t769 * t356 + t772 * t795;
t322 = t780 * t361 - t776 * t400 + (-t407 * t769 - t408 * t772) * pkin(8);
t372 = -t408 * t777 + t442 * t781;
t807 = pkin(7) * t372 + t311 * t781 + t322 * t777;
t414 = -pkin(4) * t548 + t435;
t447 = -pkin(10) * t548 + t931;
t358 = -pkin(3) * t548 + pkin(9) * t486 + t414 * t779 + t447 * t775;
t410 = t772 * t485 + t769 * t851;
t362 = -pkin(9) * t485 - t414 * t775 + t447 * t779;
t401 = -pkin(3) * t485 - pkin(4) * t576 - pkin(10) * t549 - t932;
t794 = pkin(8) * t450 + t362 * t776 + t401 * t780;
t313 = -pkin(2) * t410 - t769 * t358 + t772 * t794;
t325 = t780 * t362 - t776 * t401 + (-t410 * t769 - t411 * t772) * pkin(8);
t375 = -t411 * t777 + t450 * t781;
t806 = pkin(7) * t375 + t313 * t781 + t325 * t777;
t386 = t772 * t445 + t769 * t858;
t430 = -pkin(3) * t582 + pkin(9) * t446;
t787 = pkin(8) * t429 + t445 * t878;
t334 = -pkin(2) * t386 - t430 * t769 + t772 * t787;
t335 = (-pkin(9) * t780 + t937) * t445 + (-t386 * t769 - t387 * t772) * pkin(8);
t357 = -t387 * t777 + t429 * t781;
t805 = pkin(7) * t357 + t334 * t781 + t335 * t777;
t423 = pkin(3) * t660 + pkin(9) * t580 + t446;
t475 = t772 * t578 + t769 * t837;
t428 = -pkin(9) * t578 - t445;
t789 = pkin(8) * t537 + t428 * t776 - t578 * t936;
t352 = -pkin(2) * t475 - t423 * t769 + t772 * t789;
t368 = t578 * t937 + t780 * t428 + (-t475 * t769 - t476 * t772) * pkin(8);
t441 = -t476 * t777 + t537 * t781;
t804 = pkin(7) * t441 + t352 * t781 + t368 * t777;
t495 = -pkin(3) * t945 + pkin(9) * t606 - t929;
t510 = t772 * t605 + t769 * t834;
t472 = -pkin(3) * t605 + t516;
t524 = -pkin(9) * t605 + t930;
t793 = pkin(8) * t554 + t472 * t780 + t524 * t776;
t374 = -pkin(2) * t510 - t495 * t769 + t772 * t793;
t389 = -t776 * t472 + t780 * t524 + (-t510 * t769 - t511 * t772) * pkin(8);
t456 = -t511 * t777 + t554 * t781;
t803 = pkin(7) * t456 + t374 * t781 + t389 * t777;
t496 = -pkin(3) * t638 + pkin(9) * t613 + t930;
t518 = t772 * t612 + t769 * t833;
t477 = -pkin(3) * t612 + t517;
t525 = -pkin(9) * t612 + t929;
t792 = pkin(8) * t558 + t477 * t780 + t525 * t776;
t377 = -pkin(2) * t518 - t496 * t769 + t772 * t792;
t394 = -t776 * t477 + t780 * t525 + (-t518 * t769 - t519 * t772) * pkin(8);
t457 = -t519 * t777 + t558 * t781;
t802 = pkin(7) * t457 + t377 * t781 + t394 * t777;
t505 = -t772 * t652 + t769 * t835;
t440 = (-t505 * t769 - t506 * t772) * pkin(8);
t451 = -t506 * t777 + t534 * t781;
t452 = pkin(8) * t534 * t772 - pkin(2) * t505;
t801 = pkin(7) * t451 + t440 * t777 + t452 * t781;
t623 = -t772 * t741 + t769 * t820;
t464 = (-t623 * t769 - t625 * t772) * pkin(8) - t835;
t791 = pkin(8) * t653 + t534;
t474 = -pkin(2) * t623 + t772 * t791;
t584 = -t625 * t777 + t653 * t781;
t800 = pkin(7) * t584 + t464 * t777 + t474 * t781;
t633 = t772 * t702 + t769 * t819;
t502 = -pkin(2) * t633 + t769 * t599 + t772 * t876;
t535 = -t906 + (-t633 * t769 - t634 * t772) * pkin(8);
t592 = -t634 * t777 + t677 * t781;
t799 = pkin(7) * t592 + t502 * t781 + t535 * t777;
t646 = t769 * t817 + t772 * t940;
t513 = -pkin(2) * t646 + t769 * t598 + t772 * t875;
t536 = -t907 + (-t646 * t769 - t649 * t772) * pkin(8);
t602 = -t649 * t777 + t685 * t781;
t798 = pkin(7) * t602 + t513 * t781 + t536 * t777;
t739 = t751 * t773;
t737 = t751 * t770;
t736 = t813 * t770;
t699 = -t739 * t768 - t771 * t813;
t697 = t739 * t771 - t768 * t813;
t679 = t759 * t769 * t777 + t708 * t781;
t673 = (t764 * t780 * t814 + t732 * t769) * t776;
t672 = (t769 * t873 - t814 * t913) * t780;
t659 = -t870 + (t736 * t770 + t738 * t773) * pkin(7);
t658 = -t871 + (-t737 * t770 - t739 * t773) * pkin(7);
t657 = t773 * t924 + (-t770 * t772 - t773 * t910) * t759;
t645 = t772 * t705 + t769 * t816;
t644 = t772 * t704 + t769 * t818;
t632 = t643 * t773;
t624 = t772 * t740 + t769 * t821;
t622 = -t674 * t777 + t695 * t781;
t621 = -t671 * t777 + t694 * t781;
t615 = -pkin(1) * t737 + t770 * t687 + t773 * t870 - t813 * t934;
t614 = pkin(1) * t736 + t770 * t688 - t751 * t934 - t773 * t871;
t611 = t770 * t744 + (-t642 + t909) * t773;
t610 = -t642 * t770 - t773 * t880;
t601 = -t648 * t777 + t684 * t781;
t600 = -t647 * t777 + t683 * t781;
t589 = -t770 * t673 + t773 * t822;
t588 = -t770 * t672 + t773 * t823;
t586 = t772 * t655 + t769 * t824;
t585 = -t626 * t777 + t654 * t781;
t557 = -pkin(1) * t610 + t643 * t934;
t556 = -t611 * t768 + t643 * t771;
t555 = t611 * t771 + t643 * t768;
t553 = -t770 * t646 + t773 * t825;
t552 = -t770 * t645 + t773 * t826;
t551 = -t770 * t644 + t773 * t827;
t550 = t773 * t646 + t770 * t825;
t546 = (-t610 * t770 - t611 * t773) * pkin(7);
t543 = -t770 * t633 + t773 * t828;
t542 = t773 * t633 + t770 * t828;
t539 = t772 * t630 + t769 * t810;
t538 = t772 * t628 + t769 * t811;
t529 = -t587 * t777 + t627 * t781;
t528 = -t770 * t624 + t773 * t829;
t527 = -t770 * t623 + t773 * t830;
t526 = t773 * t623 + t770 * t830;
t521 = t772 * t617 + t769 * t831;
t520 = t772 * t616 + t769 * t832;
t512 = pkin(2) * t649 - t772 * t598 + t769 * t875;
t504 = -t553 * t768 + t602 * t771;
t503 = t553 * t771 + t602 * t768;
t501 = pkin(2) * t634 - t772 * t599 + t769 * t876;
t490 = -t543 * t768 + t592 * t771;
t489 = t543 * t771 + t592 * t768;
t488 = -t541 * t777 + t594 * t781;
t487 = -t540 * t777 + t593 * t781;
t483 = t772 * t577 + t769 * t838;
t473 = pkin(2) * t625 + t769 * t791;
t469 = -t770 * t586 + t773 * t836;
t468 = -t527 * t768 + t584 * t771;
t467 = t527 * t771 + t584 * t768;
t461 = -t523 * t777 + t564 * t781;
t460 = -t522 * t777 + t563 * t781;
t458 = t772 * t565 + t769 * t839;
t453 = pkin(2) * t506 + t534 * t933;
t449 = -t770 * t539 + t773 * t840;
t448 = -t770 * t538 + t773 * t841;
t444 = -t484 * t777 + t547 * t781;
t437 = t772 * t531 + t769 * t842;
t436 = t772 * t530 + t769 * t843;
t433 = -t770 * t521 + t773 * t844;
t432 = -t770 * t520 + t773 * t845;
t427 = -t459 * t777 + t515 * t781;
t426 = -t770 * t518 + t773 * t846;
t425 = t773 * t518 + t770 * t846;
t422 = -t770 * t510 + t773 * t847;
t421 = t773 * t510 + t770 * t847;
t420 = -t770 * t505 + t773 * t848;
t419 = t773 * t505 + t770 * t848;
t416 = t772 * t492 + t769 * t849;
t415 = t772 * t491 + t769 * t850;
t412 = -t777 * t513 + t781 * t536 + (-t550 * t770 - t553 * t773) * pkin(7);
t409 = -t770 * t483 + t773 * t852;
t406 = -t777 * t502 + t781 * t535 + (-t542 * t770 - t543 * t773) * pkin(7);
t405 = -t770 * t475 + t773 * t854;
t404 = t773 * t475 + t770 * t854;
t403 = -t439 * t777 + t466 * t781;
t402 = -t438 * t777 + t465 * t781;
t398 = t772 * t470 + t769 * t855;
t397 = -pkin(1) * t550 - t770 * t512 + t773 * t798;
t393 = -pkin(1) * t542 - t770 * t501 + t773 * t799;
t392 = -t770 * t458 + t773 * t857;
t391 = -t426 * t768 + t457 * t771;
t390 = t426 * t771 + t457 * t768;
t388 = t781 * t464 - t777 * t474 + (-t526 * t770 - t527 * t773) * pkin(7);
t385 = -t422 * t768 + t456 * t771;
t384 = t422 * t771 + t456 * t768;
t381 = -t418 * t777 + t455 * t781;
t380 = -t417 * t777 + t454 * t781;
t379 = -t420 * t768 + t451 * t771;
t378 = t420 * t771 + t451 * t768;
t376 = pkin(2) * t519 + t496 * t772 + t769 * t792;
t373 = pkin(2) * t511 + t495 * t772 + t769 * t793;
t371 = -pkin(1) * t526 - t770 * t473 + t773 * t800;
t370 = -t405 * t768 + t441 * t771;
t369 = t405 * t771 + t441 * t768;
t366 = -t770 * t437 + t773 * t859;
t365 = -t770 * t436 + t773 * t860;
t360 = -t399 * t777 + t431 * t781;
t354 = -t770 * t416 + t773 * t861;
t353 = -t770 * t415 + t773 * t862;
t351 = pkin(2) * t476 + t423 * t772 + t769 * t789;
t350 = -t770 * t410 + t773 * t863;
t349 = t773 * t410 + t770 * t863;
t347 = -t770 * t407 + t773 * t864;
t346 = t773 * t407 + t770 * t864;
t344 = t781 * t440 - t777 * t452 + (-t419 * t770 - t420 * t773) * pkin(7);
t343 = -t770 * t398 + t773 * t865;
t341 = -t770 * t395 + t773 * t866;
t340 = t773 * t395 + t770 * t866;
t339 = -pkin(1) * t419 - t770 * t453 + t773 * t801;
t338 = -t770 * t386 + t773 * t867;
t337 = t773 * t386 + t770 * t867;
t333 = pkin(2) * t387 + t430 * t772 + t769 * t787;
t332 = -t350 * t768 + t375 * t771;
t331 = t350 * t771 + t375 * t768;
t330 = -t347 * t768 + t372 * t771;
t329 = t347 * t771 + t372 * t768;
t328 = -t777 * t377 + t781 * t394 + (-t425 * t770 - t426 * t773) * pkin(7);
t327 = -t777 * t374 + t781 * t389 + (-t421 * t770 - t422 * t773) * pkin(7);
t321 = -t341 * t768 + t359 * t771;
t320 = t341 * t771 + t359 * t768;
t319 = -pkin(1) * t425 - t770 * t376 + t773 * t802;
t318 = -t338 * t768 + t357 * t771;
t317 = t338 * t771 + t357 * t768;
t316 = -pkin(1) * t421 - t770 * t373 + t773 * t803;
t314 = -t777 * t352 + t781 * t368 + (-t404 * t770 - t405 * t773) * pkin(7);
t312 = pkin(2) * t411 + t358 * t772 + t769 * t794;
t310 = pkin(2) * t408 + t772 * t356 + t769 * t795;
t308 = -pkin(1) * t404 - t770 * t351 + t773 * t804;
t305 = pkin(2) * t396 + t772 * t345 + t769 * t796;
t304 = -t770 * t323 + t773 * t869;
t303 = t773 * t323 + t770 * t869;
t302 = -t777 * t334 + t781 * t335 + (-t337 * t770 - t338 * t773) * pkin(7);
t301 = -t777 * t313 + t781 * t325 + (-t349 * t770 - t350 * t773) * pkin(7);
t300 = -t777 * t311 + t781 * t322 + (-t346 * t770 - t347 * t773) * pkin(7);
t299 = -pkin(1) * t337 - t770 * t333 + t773 * t805;
t297 = -t304 * t768 + t307 * t771;
t296 = t304 * t771 + t307 * t768;
t295 = -pkin(1) * t349 - t770 * t312 + t773 * t806;
t293 = pkin(2) * t324 + t772 * t315 + t769 * t797;
t292 = -pkin(1) * t346 - t770 * t310 + t773 * t807;
t291 = -t777 * t306 + t781 * t309 + (-t340 * t770 - t341 * t773) * pkin(7);
t290 = -pkin(1) * t340 - t770 * t305 + t773 * t808;
t289 = -t777 * t294 + t781 * t298 + (-t303 * t770 - t304 * t773) * pkin(7);
t288 = -pkin(1) * t303 - t770 * t293 + t773 * t809;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t710, 0, 0, 0, 0, 0, 0, t699, t698, 0, t556, 0, 0, 0, 0, 0, 0, t504, t490, t468, t379, 0, 0, 0, 0, 0, 0, t385, t391, t370, t318, 0, 0, 0, 0, 0, 0, t330, t332, t321, t297; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t874, 0, 0, 0, 0, 0, 0, t697, -t815, 0, t555, 0, 0, 0, 0, 0, 0, t503, t489, t467, t378, 0, 0, 0, 0, 0, 0, t384, t390, t369, t317, 0, 0, 0, 0, 0, 0, t329, t331, t320, t296; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t767, 0, 0, 0, 0, 0, 0, t737, -t736, 0, t610, 0, 0, 0, 0, 0, 0, t550, t542, t526, t419, 0, 0, 0, 0, 0, 0, t421, t425, t404, t337, 0, 0, 0, 0, 0, 0, t346, t349, t340, t303; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t911, -t908, t874, qJ(1) * t874, 0, 0, -t698, 0, t699, t768 * t897, -qJ(1) * t697 - t615 * t768 + t658 * t771, qJ(1) * t815 - t614 * t768 + t659 * t771, -t632 * t768 + t642 * t771, -qJ(1) * t555 + t546 * t771 - t557 * t768, -t589 * t768 + t622 * t771, -t528 * t768 + t585 * t771, -t551 * t768 + t600 * t771, -t588 * t768 + t621 * t771, -t552 * t768 + t601 * t771, -t657 * t768 + t679 * t771, -qJ(1) * t503 - t397 * t768 + t412 * t771, -qJ(1) * t489 - t393 * t768 + t406 * t771, -qJ(1) * t467 - t371 * t768 + t388 * t771, -qJ(1) * t378 - t339 * t768 + t344 * t771, -t449 * t768 + t488 * t771, -t409 * t768 + t444 * t771, -t432 * t768 + t460 * t771, -t448 * t768 + t487 * t771, -t433 * t768 + t461 * t771, -t469 * t768 + t529 * t771, -qJ(1) * t384 - t316 * t768 + t327 * t771, -qJ(1) * t390 - t319 * t768 + t328 * t771, -qJ(1) * t369 - t308 * t768 + t314 * t771, -qJ(1) * t317 - t299 * t768 + t302 * t771, -t366 * t768 + t403 * t771, -t343 * t768 + t360 * t771, -t353 * t768 + t380 * t771, -t365 * t768 + t402 * t771, -t354 * t768 + t381 * t771, -t392 * t768 + t427 * t771, -qJ(1) * t329 - t292 * t768 + t300 * t771, -qJ(1) * t331 - t295 * t768 + t301 * t771, -qJ(1) * t320 - t290 * t768 + t291 * t771, -qJ(1) * t296 - t288 * t768 + t289 * t771; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t908, -t911, t710, qJ(1) * t710, 0, 0, t815, 0, t697, -t771 * t897, qJ(1) * t699 + t615 * t771 + t658 * t768, qJ(1) * t698 + t614 * t771 + t659 * t768, t632 * t771 + t642 * t768, qJ(1) * t556 + t546 * t768 + t557 * t771, t589 * t771 + t622 * t768, t528 * t771 + t585 * t768, t551 * t771 + t600 * t768, t588 * t771 + t621 * t768, t552 * t771 + t601 * t768, t657 * t771 + t679 * t768, qJ(1) * t504 + t397 * t771 + t412 * t768, qJ(1) * t490 + t393 * t771 + t406 * t768, qJ(1) * t468 + t371 * t771 + t388 * t768, qJ(1) * t379 + t339 * t771 + t344 * t768, t449 * t771 + t488 * t768, t409 * t771 + t444 * t768, t432 * t771 + t460 * t768, t448 * t771 + t487 * t768, t433 * t771 + t461 * t768, t469 * t771 + t529 * t768, qJ(1) * t385 + t316 * t771 + t327 * t768, qJ(1) * t391 + t319 * t771 + t328 * t768, qJ(1) * t370 + t308 * t771 + t314 * t768, qJ(1) * t318 + t299 * t771 + t302 * t768, t366 * t771 + t403 * t768, t343 * t771 + t360 * t768, t353 * t771 + t380 * t768, t365 * t771 + t402 * t768, t354 * t771 + t381 * t768, t392 * t771 + t427 * t768, qJ(1) * t330 + t292 * t771 + t300 * t768, qJ(1) * t332 + t295 * t771 + t301 * t768, qJ(1) * t321 + t290 * t771 + t291 * t768, qJ(1) * t297 + t288 * t771 + t289 * t768; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t882, t877, 0, 0, 0, 0, t736, 0, t737, t773 * qJDD(2), pkin(1) * t739 - t773 * t687 + (-pkin(7) * t813 + t870) * t770, -pkin(1) * t738 - t773 * t688 + (-pkin(7) * t751 - t871) * t770, t944, pkin(1) * t611 + pkin(7) * t944, t773 * t673 + t770 * t822, t773 * t624 + t770 * t829, t773 * t644 + t770 * t827, t773 * t672 + t770 * t823, t773 * t645 + t770 * t826, t770 * t924 + (-t770 * t910 + t772 * t773) * t759, pkin(1) * t553 + t773 * t512 + t770 * t798, pkin(1) * t543 + t773 * t501 + t770 * t799, pkin(1) * t527 + t773 * t473 + t770 * t800, pkin(1) * t420 + t773 * t453 + t770 * t801, t773 * t539 + t770 * t840, t773 * t483 + t770 * t852, t773 * t520 + t770 * t845, t773 * t538 + t770 * t841, t773 * t521 + t770 * t844, t773 * t586 + t770 * t836, pkin(1) * t422 + t773 * t373 + t770 * t803, pkin(1) * t426 + t773 * t376 + t770 * t802, pkin(1) * t405 + t773 * t351 + t770 * t804, pkin(1) * t338 + t773 * t333 + t770 * t805, t773 * t437 + t770 * t859, t773 * t398 + t770 * t865, t773 * t415 + t770 * t862, t773 * t436 + t770 * t860, t773 * t416 + t770 * t861, t773 * t458 + t770 * t857, pkin(1) * t347 + t773 * t310 + t770 * t807, pkin(1) * t350 + t773 * t312 + t770 * t806, pkin(1) * t341 + t773 * t305 + t770 * t808, pkin(1) * t304 + t773 * t293 + t770 * t809;];
tauB_reg = t1;
