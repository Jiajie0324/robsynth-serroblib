% Calculate inertial parameters regressor of coriolis matrix for
% S5PRRRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha2,alpha3,d2,d3,d4,d5,theta1]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:27
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PRRRR10_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRRR10_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRRR10_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S5PRRRR10_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:26:13
% EndTime: 2019-12-05 17:26:53
% DurationCPUTime: 26.46s
% Computational Cost: add. (15489->888), mult. (43260->1328), div. (0->0), fcn. (48325->12), ass. (0->604)
t652 = sin(qJ(2));
t998 = sin(pkin(5));
t819 = t652 * t998;
t648 = sin(pkin(6));
t654 = cos(qJ(4));
t948 = t648 * t654;
t607 = t819 * t948;
t655 = cos(qJ(3));
t651 = sin(qJ(3));
t999 = cos(pkin(6));
t776 = t999 * t998;
t738 = t652 * t776;
t705 = t651 * t738;
t1011 = cos(qJ(2));
t787 = t998 * t1011;
t544 = t655 * t787 - t705;
t650 = sin(qJ(4));
t961 = t544 * t650;
t444 = -t607 + t961;
t1034 = -t444 / 0.2e1;
t653 = cos(qJ(5));
t1014 = t653 / 0.2e1;
t649 = sin(qJ(5));
t1018 = -t649 / 0.2e1;
t704 = t655 * t738;
t543 = t651 * t787 + t704;
t963 = t543 * t653;
t791 = t650 * t819;
t751 = t648 * t791;
t960 = t544 * t654;
t445 = t751 + t960;
t978 = t445 * t649;
t308 = t963 - t978;
t965 = t543 * t649;
t977 = t445 * t653;
t309 = t965 + t977;
t1050 = t309 * t1014 + t308 * t1018;
t1067 = pkin(4) * t1034 + t1050 * pkin(10);
t924 = t653 * t655;
t866 = t648 * t924;
t820 = t650 * t999;
t585 = t651 * t948 + t820;
t940 = t649 * t585;
t498 = t866 + t940;
t942 = t649 * t498;
t947 = t648 * t655;
t868 = t649 * t947;
t928 = t653 * t585;
t500 = -t868 + t928;
t967 = t500 * t653;
t306 = -t942 / 0.2e1 + t967 / 0.2e1;
t1066 = t306 * qJD(5);
t1012 = t654 / 0.2e1;
t1017 = -t650 / 0.2e1;
t949 = t648 * t651;
t583 = t650 * t949 - t654 * t999;
t838 = t583 * t1017;
t710 = t585 * t1012 + t838;
t1065 = t710 * qJD(4);
t643 = t649 ^ 2;
t645 = t653 ^ 2;
t589 = (t643 / 0.2e1 - t645 / 0.2e1) * t650;
t968 = t500 * t649;
t843 = -t968 / 0.2e1;
t970 = t498 * t653;
t713 = -t970 / 0.2e1 + t843;
t689 = t713 * t650;
t644 = t650 ^ 2;
t926 = t653 * t644;
t1064 = t649 * qJD(3) * t926 - qJD(2) * t689 + t589 * qJD(4);
t880 = t654 * qJD(3);
t635 = t650 * t880;
t811 = qJD(2) * t710 + t635;
t888 = t583 * qJD(2);
t1063 = -qJD(3) * t710 + t585 * t888;
t913 = qJD(2) * t500;
t1062 = -qJD(3) * t689 - qJD(4) * t306 + t498 * t913;
t907 = qJD(4) * t653;
t634 = t649 * t907;
t1061 = -qJD(2) * t306 + t589 * qJD(3) - t634;
t1000 = cos(pkin(5));
t665 = t1000 * t999 - t648 * t787;
t662 = t665 * t648;
t740 = -t787 / 0.2e1;
t1060 = t662 / 0.2e1 + t740;
t1059 = t1000 * t648 + t1011 * t776;
t422 = t653 * t583;
t827 = -t422 / 0.2e1;
t966 = t500 * t654;
t1058 = t650 * t827 + t966 / 0.2e1;
t938 = t649 * t650;
t832 = -t938 / 0.2e1;
t969 = t498 * t654;
t698 = t583 * t832 + t969 / 0.2e1;
t630 = t645 - t643;
t1053 = qJD(4) * t630;
t1052 = t689 * qJD(5);
t1047 = t583 ^ 2;
t784 = -pkin(3) * t655 - pkin(9) * t651;
t754 = -pkin(2) + t784;
t864 = pkin(2) * t999;
t805 = t651 * t864;
t588 = pkin(8) * t947 + t805;
t570 = t999 * pkin(9) + t588;
t923 = t654 * t570;
t356 = t923 + (-t655 * pkin(10) + t650 * t754) * t648;
t586 = pkin(8) * t949 - t655 * t864;
t569 = -t999 * pkin(3) + t586;
t783 = t583 * pkin(4) - t585 * pkin(10);
t663 = t569 + t783;
t166 = t356 * t649 - t653 * t663;
t1046 = -t166 / 0.2e1;
t167 = t653 * t356 + t649 * t663;
t1045 = t167 / 0.2e1;
t790 = t651 * t819;
t494 = -t1059 * t655 + t790;
t974 = t494 * t649;
t789 = t655 * t819;
t495 = t1059 * t651 + t789;
t350 = t495 * t654 + t650 * t665;
t988 = t350 * t653;
t221 = t974 + t988;
t1044 = -t221 / 0.2e1;
t1005 = t583 * pkin(10);
t461 = pkin(4) * t585 + t1005;
t931 = t653 * t461;
t706 = t754 * t648;
t392 = t650 * t570 - t654 * t706;
t946 = t649 * t392;
t233 = t931 + t946;
t1043 = -t233 / 0.2e1;
t933 = t653 * t392;
t944 = t649 * t461;
t234 = -t933 + t944;
t1042 = t234 / 0.2e1;
t1002 = t654 * pkin(10);
t1004 = t650 * pkin(4);
t621 = -t1002 + t1004;
t469 = t805 + (pkin(8) + t621) * t947;
t930 = t653 * t469;
t587 = (pkin(3) * t651 - pkin(9) * t655) * t648;
t574 = t650 * t587;
t575 = t654 * t586;
t443 = -t575 + t574;
t398 = pkin(10) * t949 + t443;
t945 = t649 * t398;
t243 = t930 - t945;
t1041 = -t243 / 0.2e1;
t932 = t653 * t398;
t943 = t649 * t469;
t244 = t932 + t943;
t1040 = t244 / 0.2e1;
t1039 = t308 / 0.2e1;
t1038 = -t309 / 0.2e1;
t349 = t495 * t650 - t654 * t665;
t1037 = -t349 / 0.2e1;
t1036 = t350 / 0.2e1;
t355 = pkin(4) * t947 + t392;
t1035 = t355 / 0.2e1;
t1033 = -t498 / 0.2e1;
t1032 = t498 / 0.2e1;
t1031 = -t500 / 0.2e1;
t624 = t653 * t949;
t549 = t654 * t868 - t624;
t1030 = -t549 / 0.2e1;
t1029 = t549 / 0.2e1;
t921 = t654 * t655;
t937 = t649 * t651;
t550 = (t653 * t921 + t937) * t648;
t1028 = -t550 / 0.2e1;
t1027 = t550 / 0.2e1;
t638 = pkin(9) * t938;
t927 = t653 * t621;
t562 = t638 + t927;
t1026 = t562 / 0.2e1;
t934 = t650 * t653;
t878 = pkin(9) * t934;
t939 = t649 * t621;
t563 = -t878 + t939;
t1025 = t563 / 0.2e1;
t1024 = t569 / 0.2e1;
t1023 = -t583 / 0.2e1;
t1022 = t583 / 0.2e1;
t1021 = -t585 / 0.2e1;
t1020 = t585 / 0.2e1;
t1019 = t624 / 0.2e1;
t1016 = t650 / 0.2e1;
t1015 = -t653 / 0.2e1;
t1013 = -t654 / 0.2e1;
t642 = t648 ^ 2;
t1010 = pkin(2) * t642;
t1009 = pkin(9) * t494;
t1008 = pkin(9) * t650;
t1006 = t543 * pkin(3);
t1003 = t654 * pkin(9);
t1001 = -qJD(5) / 0.2e1;
t973 = t494 * t653;
t989 = t350 * t649;
t220 = -t973 + t989;
t997 = t220 * t654;
t996 = t221 * t654;
t994 = t308 * t654;
t992 = t309 * t654;
t991 = t349 * t444;
t990 = t349 * t650;
t987 = t355 * t649;
t986 = t355 * t653;
t922 = t654 * t587;
t935 = t650 * t586;
t442 = t922 + t935;
t397 = -pkin(4) * t949 - t442;
t985 = t397 * t649;
t984 = t397 * t653;
t936 = t649 * t654;
t971 = t495 * t653;
t294 = t494 * t936 + t971;
t925 = t653 * t654;
t972 = t495 * t649;
t295 = -t494 * t925 + t972;
t301 = t494 * t650;
t41 = -t220 * t294 + t221 * t295 - t349 * t301;
t983 = t41 * qJD(1);
t43 = -t220 * t308 + t221 * t309 + t991;
t982 = t43 * qJD(1);
t44 = (-t220 * t649 - t221 * t653 + t350) * t349;
t981 = t44 * qJD(1);
t980 = t444 * t649;
t979 = t444 * t653;
t976 = t494 * t543;
t975 = t494 * t583;
t964 = t543 * t650;
t962 = t543 * t654;
t959 = t549 * t653;
t958 = t550 * t649;
t782 = -pkin(4) * t654 - pkin(10) * t650;
t753 = -pkin(3) + t782;
t879 = pkin(9) * t936;
t551 = -t653 * t753 + t879;
t957 = t551 * t654;
t877 = pkin(9) * t925;
t552 = t649 * t753 + t877;
t956 = t552 * t654;
t955 = t569 * t654;
t954 = t583 * t654;
t953 = t585 * t650;
t647 = t655 ^ 2;
t952 = t642 * t647;
t951 = t642 * t655;
t950 = t644 * t649;
t941 = t649 * t551;
t418 = t649 * t583;
t929 = t653 * t552;
t78 = (-t350 * t654 + t495 - t990) * t494;
t920 = t78 * qJD(1);
t79 = t350 * t445 + t976 + t991;
t919 = t79 * qJD(1);
t646 = t654 ^ 2;
t631 = t646 - t644;
t830 = t936 / 0.2e1;
t681 = t498 * t830 + t643 * t838;
t251 = t959 / 0.2e1 + t681;
t918 = qJD(2) * t251;
t826 = t925 / 0.2e1;
t680 = t500 * t826 + t645 * t838;
t253 = -t958 / 0.2e1 + t680;
t917 = qJD(2) * t253;
t260 = -t1047 * t649 + t498 * t585;
t916 = qJD(2) * t260;
t261 = -t1047 * t653 + t500 * t585;
t915 = qJD(2) * t261;
t914 = qJD(2) * t498;
t912 = qJD(2) * t648;
t911 = qJD(3) * t494;
t910 = qJD(3) * t648;
t909 = qJD(4) * t649;
t908 = qJD(4) * t650;
t906 = qJD(4) * t654;
t905 = qJD(5) * t583;
t904 = qJD(5) * t649;
t903 = qJD(5) * t653;
t902 = qJD(5) * t654;
t521 = t422 * t938;
t125 = t521 + (-t969 / 0.2e1 + t1028) * t653 + (-t966 / 0.2e1 + t1029) * t649;
t901 = t125 * qJD(2);
t134 = t495 * t544 + t662 * t819 + t976;
t900 = t134 * qJD(1);
t197 = -t498 * t550 - t500 * t549;
t899 = t197 * qJD(2);
t759 = t968 + t970;
t213 = t759 * t583;
t898 = t213 * qJD(2);
t835 = -t947 / 0.2e1;
t796 = t649 * t835;
t829 = t934 / 0.2e1;
t265 = t1019 + t583 * t829 + (t796 + t1031) * t654;
t897 = t265 * qJD(2);
t825 = t924 / 0.2e1;
t677 = (t654 * t825 + t937 / 0.2e1) * t648;
t266 = t677 - t698;
t896 = t266 * qJD(2);
t869 = t650 * t947;
t274 = -t498 * t869 - t549 * t583;
t895 = t274 * qJD(2);
t275 = t500 * t869 + t550 * t583;
t894 = t275 * qJD(2);
t335 = -t953 - t954;
t375 = t335 * t947;
t893 = t375 * qJD(2);
t892 = t418 * qJD(2);
t891 = t422 * qJD(2);
t486 = -t583 * t949 + t650 * t952;
t890 = t486 * qJD(2);
t487 = -t585 * t949 + t654 * t952;
t889 = t487 * qJD(2);
t887 = t583 * qJD(4);
t886 = t585 * qJD(4);
t883 = t589 * qJD(5);
t594 = (-t651 ^ 2 + t647) * t642;
t882 = t594 * qJD(2);
t881 = t650 * qJD(3);
t876 = pkin(3) * t1021;
t875 = pkin(4) * t1032;
t874 = pkin(4) * t1031;
t873 = t1008 / 0.2e1;
t872 = t494 * pkin(4) / 0.2e1;
t871 = t1003 / 0.2e1;
t870 = t651 * t951;
t867 = t583 * t936;
t865 = t583 * t925;
t862 = t498 * t888;
t861 = t500 * t888;
t859 = t655 * t912;
t858 = t655 * t910;
t857 = t649 * t881;
t856 = t653 * t881;
t855 = qJD(4) * t947;
t854 = t649 * t902;
t853 = t653 * t902;
t852 = t651 * t910;
t851 = t649 * t903;
t850 = t650 * t906;
t849 = t349 * t1012;
t848 = t350 * t1017;
t847 = -t980 / 0.2e1;
t846 = -t979 / 0.2e1;
t845 = -t494 * t355 / 0.2e1;
t842 = t500 * t1016;
t840 = -t959 / 0.2e1;
t839 = t958 / 0.2e1;
t837 = -t949 / 0.2e1;
t836 = t949 / 0.2e1;
t834 = t947 / 0.2e1;
t833 = t418 / 0.2e1;
t831 = t938 / 0.2e1;
t828 = -t932 / 0.2e1;
t824 = t1035 - t392 / 0.2e1;
t823 = t574 / 0.2e1 - t575 / 0.2e1;
t822 = t494 * t999;
t821 = t495 * t999;
t817 = (-t643 - t645) * t349;
t816 = t999 * qJD(2);
t809 = t444 * t873;
t808 = pkin(9) * t834;
t807 = -qJD(5) - t888;
t806 = -qJD(5) + t880;
t804 = t650 * t634;
t803 = t644 * t851;
t802 = qJD(3) * t870;
t801 = t650 * t859;
t800 = t649 * t856;
t799 = t654 * t859;
t798 = t650 * t835;
t797 = t650 * t834;
t795 = t649 * t834;
t793 = t648 * t825;
t788 = t1005 / 0.2e1 + t461 / 0.2e1;
t786 = t648 * t816;
t785 = t999 * t910;
t781 = 0.2e1 * t800;
t780 = t495 / 0.2e1 - t990 / 0.2e1;
t779 = t607 / 0.2e1 - t961 / 0.2e1;
t778 = t974 / 0.2e1 + t1044;
t777 = t973 / 0.2e1 + t220 / 0.2e1;
t775 = pkin(10) * t798;
t774 = -qJD(4) + t859;
t660 = t220 * t1041 + t221 * t1040 + t294 * t1046 + t295 * t1045 + t349 * t397 / 0.2e1;
t719 = t552 * t1038 + t551 * t1039;
t2 = (pkin(9) * t1034 + t845) * t650 + t660 + t719;
t29 = -t166 * t243 + t167 * t244 + t355 * t397;
t773 = t2 * qJD(1) + t29 * qJD(2);
t393 = t650 * t706 + t923;
t26 = -t166 * t233 + t167 * t234 + t355 * t393;
t659 = (t167 * t1015 + t166 * t1018 + t393 / 0.2e1) * t349 + t220 * t1043 + t221 * t1042 + t350 * t1035;
t4 = t659 - t1067;
t772 = t4 * qJD(1) + t26 * qJD(2);
t664 = t220 * t1027 + t221 * t1030 + t294 * t1031 + t295 * t1033;
t690 = (t308 * t1015 + t309 * t1018) * t650;
t14 = t690 - t664;
t28 = t166 * t550 - t167 * t549 - t243 * t500 - t244 * t498;
t771 = -t14 * qJD(1) + t28 * qJD(2);
t658 = (t393 * t1013 + t392 * t1017 + t588 / 0.2e1) * t494 + t442 * t1037 + t443 * t1036 + t495 * t1024;
t714 = t445 * t1013 + t444 * t1017;
t17 = t1006 / 0.2e1 + t714 * pkin(9) + t658;
t96 = -t392 * t442 + t393 * t443 + t569 * t588;
t770 = t17 * qJD(1) + t96 * qJD(2);
t717 = t220 * t1023 + t349 * t1032;
t726 = t221 * t1022 + t349 * t1031;
t25 = (t1038 + t717) * t653 + (t1039 + t726) * t649;
t27 = -t233 * t500 - t234 * t498 + (-t166 * t653 + t167 * t649) * t583;
t769 = t25 * qJD(1) + t27 * qJD(2);
t697 = t494 * t1033 + t220 * t835;
t722 = t294 * t1022 + t349 * t1029;
t37 = t994 / 0.2e1 + (t847 + t697) * t650 + t722;
t52 = -t166 * t869 + t243 * t583 + t355 * t549 + t397 * t498;
t768 = t37 * qJD(1) + t52 * qJD(2);
t696 = t494 * t1031 + t221 * t835;
t721 = t295 * t1023 + t349 * t1027;
t40 = -t992 / 0.2e1 + (t846 + t696) * t650 + t721;
t53 = -t167 * t869 - t244 * t583 + t355 * t550 + t397 * t500;
t767 = t40 * qJD(1) + t53 * qJD(2);
t46 = -t166 * t585 + t393 * t498 + (t233 - t987) * t583;
t727 = t220 * t1021 + t350 * t1032;
t48 = t979 / 0.2e1 + t727;
t766 = t48 * qJD(1) + t46 * qJD(2);
t47 = -t167 * t585 + t393 * t500 + (-t234 - t986) * t583;
t725 = t221 * t1021 + t500 * t1036;
t51 = t847 + t725;
t765 = t51 * qJD(1) + t47 * qJD(2);
t695 = t494 * t1021 + t350 * t835;
t701 = t975 / 0.2e1 + t349 * t834;
t66 = (-t445 / 0.2e1 + t701) * t654 + (t1034 + t695) * t650;
t85 = -t442 * t585 - t443 * t583 + (t392 * t654 - t393 * t650) * t947;
t764 = t66 * qJD(1) + t85 * qJD(2);
t716 = -t978 / 0.2e1 + t963 / 0.2e1;
t71 = t716 + t726;
t91 = -t167 * t583 + t355 * t500;
t763 = qJD(1) * t71 - qJD(2) * t91;
t715 = -t977 / 0.2e1 - t965 / 0.2e1;
t72 = t715 + t717;
t90 = t166 * t583 - t355 * t498;
t762 = qJD(1) * t72 - qJD(2) * t90;
t761 = -t233 * t649 + t234 * t653;
t760 = -t442 * t650 + t443 * t654;
t758 = -t562 * t649 + t563 * t653;
t757 = t816 + qJD(3);
t118 = t392 * t949 + t442 * t947 - t569 * t869 - t588 * t583;
t700 = t495 * t1022 + t349 * t837;
t86 = t962 / 0.2e1 + t700;
t756 = t86 * qJD(1) - t118 * qJD(2);
t119 = t588 * t585 + (-t393 * t651 + (t443 + t955) * t655) * t648;
t699 = t495 * t1020 + t350 * t837;
t89 = -t964 / 0.2e1 + t699;
t755 = t89 * qJD(1) + t119 * qJD(2);
t752 = t806 * t650;
t120 = -t975 / 0.2e1 + t960 / 0.2e1 + (t655 * t1037 + t791 / 0.2e1) * t648;
t231 = -t392 * t947 - t569 * t583;
t750 = -qJD(1) * t120 - qJD(2) * t231;
t122 = -t695 - t779;
t232 = -t393 * t947 - t569 * t585;
t749 = -qJD(1) * t122 + qJD(2) * t232;
t657 = t740 - t662 / 0.2e1;
t683 = -t704 / 0.2e1;
t256 = t683 + t821 / 0.2e1 + t657 * t651;
t505 = -t651 * t1010 - t588 * t999;
t748 = qJD(1) * t256 - qJD(2) * t505;
t684 = t705 / 0.2e1;
t257 = t684 - t822 / 0.2e1 + t657 * t655;
t504 = pkin(2) * t951 - t586 * t999;
t747 = qJD(1) * t257 + qJD(2) * t504;
t170 = -t865 + (t795 - t928 / 0.2e1 + t1031) * t650;
t606 = t646 * t653 - t926;
t746 = -qJD(2) * t170 - qJD(3) * t606;
t171 = t867 + (t793 + t940 / 0.2e1 + t1032) * t650;
t605 = t631 * t649;
t745 = -qJD(2) * t171 + qJD(3) * t605;
t377 = -t585 ^ 2 + t1047;
t744 = qJD(2) * t377 + qJD(3) * t335;
t743 = qJD(2) * t335 + qJD(3) * t631;
t742 = -t880 + t888;
t741 = qJD(2) * t585 + t881;
t739 = t1002 / 0.2e1 - t1004 / 0.2e1;
t737 = pkin(4) * t1030 - t984 / 0.2e1;
t736 = pkin(4) * t1028 + t985 / 0.2e1;
t735 = pkin(9) * t1031 - t986 / 0.2e1;
t576 = t654 * t836 + t820 / 0.2e1;
t734 = t576 * qJD(2) + t881 / 0.2e1;
t733 = t648 * t784;
t667 = pkin(3) * t1022 + t955 / 0.2e1 + pkin(9) * t798;
t226 = t667 + t823;
t732 = pkin(3) * t880 - qJD(2) * t226;
t228 = t876 + (t808 - t587 / 0.2e1) * t654 + (t1024 - t586 / 0.2e1) * t650;
t731 = pkin(3) * t881 - qJD(2) * t228;
t730 = t166 * t1013 + t551 * t1022;
t729 = t167 * t1012 + t552 * t1023;
t728 = t220 * t1026 + t563 * t1044;
t724 = t221 * t649 / 0.2e1 + t220 * t1015;
t723 = t244 * t1014 + t243 * t1018;
t720 = t295 * t1014 + t294 * t1018;
t712 = t552 * t1020 + t563 * t1022;
t711 = t498 * t1025 + t500 * t1026;
t709 = -t945 / 0.2e1 + t930 / 0.2e1;
t702 = t650 * t1001 + t811;
t694 = -t621 / 0.2e1 + t739;
t693 = t720 * pkin(10);
t11 = t650 * t872 + pkin(9) * t848 + t693 + (t929 / 0.2e1 + t941 / 0.2e1 - t1003 / 0.2e1) * t349 + t728;
t230 = pkin(9) ^ 2 * t650 * t654 - t551 * t562 + t552 * t563;
t656 = t167 * t1025 + t552 * t1042 + t551 * t1043 + t562 * t1046 + t355 * t871 + t393 * t873;
t666 = t723 * pkin(10) - t397 * pkin(4) / 0.2e1;
t9 = -t656 + t666;
t692 = -t11 * qJD(1) - t9 * qJD(2) + t230 * qJD(3);
t185 = (t562 * t650 - t957) * t653 + (t563 * t650 + t956) * t649;
t5 = (pkin(10) * t1030 + t233 * t1016 + t1040 + t730) * t653 + (pkin(10) * t1027 + t234 * t1016 + t1041 + t729) * t649 + t711;
t56 = (t997 / 0.2e1 - t295 / 0.2e1) * t653 + (-t996 / 0.2e1 + t294 / 0.2e1) * t649;
t691 = t56 * qJD(1) - t5 * qJD(2) - t185 * qJD(3);
t671 = t166 * t1016 + t551 * t1020 + t562 * t1023;
t679 = pkin(10) * t835 + pkin(9) * t1022 - t393 / 0.2e1;
t20 = (t233 / 0.2e1 + pkin(9) * t1033) * t654 + (t355 * t1013 + t679 * t650) * t649 + t671 + t737;
t347 = t551 * t650 + (t562 - 0.2e1 * t638) * t654;
t62 = (-t989 / 0.2e1 + t777) * t650;
t688 = -t62 * qJD(1) - t20 * qJD(2) - t347 * qJD(3);
t21 = (-t234 / 0.2e1 + t735) * t654 + (t679 * t653 + t1045) * t650 + t712 + t736;
t348 = t563 * t654 + (-t552 + 0.2e1 * t877) * t650;
t61 = (-t988 / 0.2e1 - t778) * t650;
t687 = -t61 * qJD(1) - t21 * qJD(2) + t348 * qJD(3);
t490 = -pkin(9) * t950 - t957;
t670 = t498 * t873 - t730;
t58 = t828 + (-t469 / 0.2e1 + t355 * t1016) * t649 + t670;
t81 = -t780 * t649 + t777 * t654;
t686 = qJD(1) * t81 + qJD(2) * t58 - qJD(3) * t490;
t491 = -pkin(9) * t926 - t956;
t57 = t650 * t735 + t709 - t729;
t80 = t780 * t653 + t778 * t654;
t685 = qJD(1) * t80 + qJD(2) * t57 + qJD(3) * t491;
t184 = (-t942 + t967) * t650;
t240 = t498 ^ 2 - t500 ^ 2;
t682 = qJD(2) * t240 - qJD(3) * t184 - qJD(4) * t759;
t496 = t694 * t649;
t98 = t788 * t649 + t824 * t653 + t875;
t678 = pkin(4) * t907 - qJD(2) * t98 + qJD(3) * t496;
t100 = t824 * t649 - t788 * t653 + t874;
t497 = t694 * t653;
t676 = pkin(4) * t909 - qJD(2) * t100 - qJD(3) * t497;
t675 = (t650 * t858 + t886) * t583;
t672 = qJD(5) * t576 + t1063;
t604 = t630 * t644;
t669 = qJD(2) * t184 + qJD(3) * t604 + 0.2e1 * t804;
t668 = qJD(2) * t759 - t1053 + t781;
t640 = t908 / 0.2e1;
t622 = qJD(3) * t836;
t617 = qJD(2) * t870;
t611 = -0.2e1 * t650 * t851;
t571 = qJD(4) * t837 + t617;
t493 = qJD(3) * t797 + t576 * qJD(4);
t468 = t644 * t1009;
t460 = t638 + t927 / 0.2e1 + t739 * t653;
t459 = t878 - t939 / 0.2e1 - t739 * t649;
t327 = t335 * qJD(4);
t303 = t494 * t654;
t268 = t654 * t796 + t1019 + t1058;
t267 = t677 + t698;
t259 = -t821 / 0.2e1 + t683 + t1060 * t651;
t258 = t822 / 0.2e1 + t684 + t1060 * t655;
t252 = t839 + t680;
t250 = t840 + t681;
t229 = t654 * t808 + t876 + t569 * t1016 + t935 / 0.2e1 + t922 / 0.2e1;
t227 = t667 - t823;
t199 = t759 * qJD(5);
t183 = t184 * qJD(5);
t173 = t585 * t829 + t650 * t795 + t842 + t865;
t172 = t498 * t1017 + t585 * t832 + t650 * t793 - t867;
t158 = t349 * t653;
t156 = t349 * t649;
t124 = t550 * t1014 + t549 * t1018 + t713 * t654 + t521;
t123 = -t695 + t779;
t121 = -t960 / 0.2e1 - t751 / 0.2e1 - t701;
t101 = pkin(10) * t827 + t874 + t987 / 0.2e1 + t946 / 0.2e1 + t931 / 0.2e1;
t99 = pkin(10) * t833 + t875 + t986 / 0.2e1 + t933 / 0.2e1 - t944 / 0.2e1;
t88 = t964 / 0.2e1 + t699;
t87 = -t962 / 0.2e1 + t700;
t83 = t996 / 0.2e1 + t349 * t829 + t494 * t830 + t971 / 0.2e1;
t82 = -t997 / 0.2e1 + t349 * t832 + t494 * t826 - t972 / 0.2e1;
t74 = t716 - t726;
t73 = t715 - t717;
t65 = (t848 + t849) * t947 + (t954 / 0.2e1 - t953 / 0.2e1) * t494 - t714;
t64 = t221 * t1017 + t350 * t829 + t494 * t832;
t63 = t220 * t1017 + t350 * t831 + t494 * t829;
t60 = pkin(9) * t842 + t355 * t829 + t709 + t729;
t59 = t355 * t832 + t828 - t943 / 0.2e1 - t670;
t55 = -t654 * t724 + t720;
t50 = t980 / 0.2e1 + t725;
t49 = t846 + t727;
t39 = t992 / 0.2e1 + t444 * t829 + t696 * t650 + t721;
t38 = -t994 / 0.2e1 + t444 * t831 + t697 * t650 + t722;
t24 = t724 * t583 + (t970 / 0.2e1 + t843) * t349 + t1050;
t23 = t1058 * pkin(9) + t234 * t1012 + t167 * t1017 + t355 * t826 + t393 * t829 + t653 * t775 - t712 + t736;
t22 = t698 * pkin(9) + t233 * t1013 + t355 * t830 + t393 * t831 + t649 * t775 - t671 + t737;
t16 = t445 * t871 + t809 - t1006 / 0.2e1 + t658;
t15 = t690 + t664;
t12 = pkin(9) * t849 + (pkin(9) * t1036 + t872) * t650 + t693 - t728 + (t929 + t941) * t1037;
t10 = t656 + t666;
t6 = t552 * t833 + t234 * t832 - t167 * t936 / 0.2e1 + t551 * t827 + t934 * t1043 + t166 * t826 + (t840 + t839) * pkin(10) - t711 + t723;
t3 = t659 + t1067;
t1 = t650 * t845 + t660 - t719 + t809;
t7 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t134, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t79 + qJD(3) * t78, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t43 + qJD(3) * t41 + qJD(4) * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(2) * t819, -qJD(2) * t787, 0, 0, 0, 0, 0, 0, 0, 0, (-t543 * t999 - t642 * t789) * qJD(2) + t259 * qJD(3), (-t544 * t999 + t642 * t790) * qJD(2) + t258 * qJD(3), (t543 * t651 + t544 * t655) * t912, t900 + (-t819 * t1010 + t543 * t586 + t544 * t588) * qJD(2), 0, 0, 0, 0, 0, 0, (t444 * t947 + t543 * t583) * qJD(2) + t87 * qJD(3) + t123 * qJD(4), (t445 * t947 + t543 * t585) * qJD(2) + t88 * qJD(3) + t121 * qJD(4), (t444 * t585 - t445 * t583) * qJD(2) + t65 * qJD(3), t919 + (t392 * t444 + t393 * t445 + t543 * t569) * qJD(2) + t16 * qJD(3), 0, 0, 0, 0, 0, 0, (t308 * t583 + t444 * t498) * qJD(2) + t38 * qJD(3) + t49 * qJD(4) + t74 * qJD(5), (-t309 * t583 + t444 * t500) * qJD(2) + t39 * qJD(3) + t50 * qJD(4) + t73 * qJD(5), (-t308 * t500 - t309 * t498) * qJD(2) + t15 * qJD(3) + t24 * qJD(4), t982 + (-t166 * t308 + t167 * t309 + t355 * t444) * qJD(2) + t1 * qJD(3) + t3 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t259 - qJD(3) * t495, qJD(2) * t258 + t911, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t87 + qJD(4) * t301 - t495 * t880, qJD(2) * t88 + qJD(4) * t303 + t495 * t881, t65 * qJD(2) + (-t644 - t646) * t911, t920 + t16 * qJD(2) + (-pkin(3) * t495 - t1009 * t646 - t468) * qJD(3), 0, 0, 0, 0, 0, 0, t38 * qJD(2) + (-t294 * t654 - t494 * t950) * qJD(3) + t63 * qJD(4) + t83 * qJD(5), t39 * qJD(2) + (t295 * t654 - t494 * t926) * qJD(3) + t64 * qJD(4) + t82 * qJD(5), t15 * qJD(2) + t55 * qJD(4) + (-t294 * t653 - t295 * t649) * t881, t983 + t1 * qJD(2) + (-t294 * t551 + t295 * t552 - t468) * qJD(3) + t12 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t123 + qJD(3) * t301 - qJD(4) * t350, qJD(2) * t121 + qJD(3) * t303 + qJD(4) * t349, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t49 + qJD(3) * t63 + qJD(5) * t156 - t350 * t907, qJD(2) * t50 + qJD(3) * t64 + qJD(5) * t158 + t350 * t909, t24 * qJD(2) + t55 * qJD(3) + qJD(4) * t817, t981 + t3 * qJD(2) + t12 * qJD(3) + (-t350 * pkin(4) + pkin(10) * t817) * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t74 + qJD(3) * t83 + qJD(4) * t156 - qJD(5) * t221, qJD(2) * t73 + qJD(3) * t82 + qJD(4) * t158 + qJD(5) * t220, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t256 * qJD(3), -t257 * qJD(3), 0, -t900, 0, 0, 0, 0, 0, 0, qJD(3) * t86 + qJD(4) * t122, qJD(3) * t89 + qJD(4) * t120, qJD(3) * t66, qJD(3) * t17 - t919, 0, 0, 0, 0, 0, 0, qJD(3) * t37 + qJD(4) * t48 - qJD(5) * t71, qJD(3) * t40 + qJD(4) * t51 - qJD(5) * t72, -qJD(3) * t14 + qJD(4) * t25, qJD(3) * t2 + qJD(4) * t4 - t982; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t802, t594 * qJD(3), t655 * t785, -t802, -t651 * t785, 0, t505 * qJD(3), -t504 * qJD(3), 0, 0, (t654 * t858 - t887) * t585, qJD(3) * t375 + qJD(4) * t377, -t487 * qJD(3) + t583 * t855, t675, t486 * qJD(3) + t585 * t855, -t802, -qJD(3) * t118 - qJD(4) * t232, qJD(3) * t119 + qJD(4) * t231, qJD(3) * t85, qJD(3) * t96, (qJD(3) * t550 - qJD(5) * t498 - t653 * t887) * t500, qJD(3) * t197 + qJD(4) * t213 + qJD(5) * t240, qJD(3) * t275 + qJD(4) * t261 - t498 * t905, (qJD(3) * t549 + qJD(5) * t500 - t649 * t887) * t498, qJD(3) * t274 - qJD(4) * t260 - t500 * t905, t675, qJD(3) * t52 + qJD(4) * t46 + qJD(5) * t91, qJD(3) * t53 + qJD(4) * t47 + qJD(5) * t90, qJD(3) * t28 + qJD(4) * t27, qJD(3) * t29 + qJD(4) * t26; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t617, t882, t757 * t947, -t617, -t757 * t949, 0, -qJD(3) * t588 - t748, qJD(3) * t586 - t747, 0, 0, t648 * t741 * t921 + t1065, t631 * t858 + t327 + t893, t650 * t852 - t889, t742 * t869 - t1065, t654 * t852 + t890, -t571, (-t588 * t654 + t650 * t733) * qJD(3) + t229 * qJD(4) + t756, (t588 * t650 + t654 * t733) * qJD(3) + t227 * qJD(4) + t755, qJD(3) * t760 + t764, (-t588 * pkin(3) + pkin(9) * t760) * qJD(3) + t770, qJD(4) * t252 + t1052 + (t856 + t913) * t550, t899 + t124 * qJD(4) - t183 + (-t958 - t959) * t881, t894 + (-t550 * t654 + t644 * t866) * qJD(3) + t173 * qJD(4) + t267 * qJD(5), qJD(4) * t250 - t1052 + (t857 + t914) * t549, t895 + (t549 * t654 - t644 * t868) * qJD(3) + t172 * qJD(4) + t268 * qJD(5), -t1065 + (qJD(5) / 0.2e1 + t742) * t869, -t243 * t880 + t22 * qJD(4) + t60 * qJD(5) + (pkin(9) * t549 - t551 * t947 + t985) * t881 + t768, t244 * t880 + t23 * qJD(4) + t59 * qJD(5) + (pkin(9) * t550 - t552 * t947 + t984) * t881 + t767, (-t549 * t552 + t550 * t551 + (-t243 * t653 - t244 * t649) * t650) * qJD(3) + t6 * qJD(4) + t771, (t1008 * t397 - t243 * t551 + t244 * t552) * qJD(3) + t10 * qJD(4) + t773; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1063, t744, t774 * t583, t1063, t774 * t585, t622, qJD(3) * t229 - qJD(4) * t393 - t749, qJD(3) * t227 + qJD(4) * t392 - t750, 0, 0, qJD(3) * t252 + t1066 + (-t909 - t913) * t422, t124 * qJD(3) - t630 * t887 - t199 + t898, qJD(3) * t173 + t649 * t886 + t915, qJD(3) * t250 - t1066 + (t907 - t914) * t418, qJD(3) * t172 + t653 * t886 - t916, t672, t22 * qJD(3) + (-t393 * t653 + t649 * t783) * qJD(4) + t101 * qJD(5) + t766, t23 * qJD(3) + (t393 * t649 + t653 * t783) * qJD(4) + t99 * qJD(5) + t765, t6 * qJD(3) + qJD(4) * t761 + t769, t10 * qJD(3) + (-t393 * pkin(4) + pkin(10) * t761) * qJD(4) + t772; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1062, t682, qJD(3) * t267 + t498 * t807, t1062, qJD(3) * t268 + t500 * t807, t493, qJD(3) * t60 + qJD(4) * t101 - qJD(5) * t167 - t763, qJD(3) * t59 + qJD(4) * t99 + qJD(5) * t166 - t762, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t256 * qJD(2), t257 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, -qJD(2) * t86, -qJD(2) * t89, -qJD(2) * t66, -qJD(2) * t17 - t920, 0, 0, 0, 0, 0, 0, -qJD(2) * t37 - qJD(4) * t62 - qJD(5) * t80, -qJD(2) * t40 - qJD(4) * t61 - qJD(5) * t81, qJD(2) * t14 + qJD(4) * t56, -qJD(2) * t2 - qJD(4) * t11 - t983; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t617, -t882, -t655 * t786, t617, t651 * t786, 0, t748, t747, 0, 0, -t585 * t799 + t1065, t327 - t893, -t654 * t855 + t889, -t583 * t801 - t1065, t650 * t855 - t890, t571, qJD(4) * t228 - t756, qJD(4) * t226 - t755, -t764, -t770, qJD(4) * t253 - t550 * t913 + t1052, qJD(4) * t125 - t183 - t899, -qJD(4) * t170 - qJD(5) * t266 - t894, qJD(4) * t251 - t549 * t914 - t1052, -qJD(4) * t171 - qJD(5) * t265 - t895, -t1065 + (-t888 + t1001) * t869, -qJD(4) * t20 - qJD(5) * t57 - t768, -qJD(4) * t21 - qJD(5) * t58 - t767, -qJD(4) * t5 - t771, -qJD(4) * t9 - t773; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t850, t631 * qJD(4), 0, -t850, 0, 0, -pkin(3) * t908, -pkin(3) * t906, 0, 0, t645 * t850 - t803, -qJD(5) * t604 - 0.2e1 * t654 * t804, -qJD(4) * t606 + t650 * t854, t643 * t850 + t803, qJD(4) * t605 + t650 * t853, -t850, -qJD(4) * t347 - qJD(5) * t491, qJD(4) * t348 + qJD(5) * t490, -qJD(4) * t185, qJD(4) * t230; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t811, t743, -t774 * t654, -t811, t774 * t650, qJD(2) * t837, -pkin(9) * t906 - t731, pkin(9) * t908 - t732, 0, 0, t917 - t883 + (t645 * t881 + t634) * t654, t901 + t611 + (-0.2e1 * t800 + t1053) * t654, t649 * t908 + t746, t918 + t883 + (t643 * t881 - t634) * t654, t650 * t907 + t745, -t702, (t649 * t782 - t877) * qJD(4) + t460 * qJD(5) + t688, (t653 * t782 + t879) * qJD(4) + t459 * qJD(5) + t687, qJD(4) * t758 + t691, (-pkin(4) * t1003 + pkin(10) * t758) * qJD(4) + t692; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1064, -t669, t649 * t752 - t896, t1064, t653 * t752 - t897, qJD(2) * t798 + t640, qJD(4) * t460 - qJD(5) * t552 - t685, qJD(4) * t459 + qJD(5) * t551 - t686, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(2) * t122, -qJD(2) * t120, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(2) * t48 + qJD(3) * t62, -qJD(2) * t51 + qJD(3) * t61, -qJD(2) * t25 - qJD(3) * t56, -qJD(2) * t4 + qJD(3) * t11 - t981; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1063, -t744, -t742 * t947, -t1063, -t741 * t947, t622, -qJD(3) * t228 + t749, -qJD(3) * t226 + t750, 0, 0, -qJD(3) * t253 + t653 * t861 + t1066, -qJD(3) * t125 - t199 - t898, qJD(3) * t170 + qJD(5) * t422 - t915, -qJD(3) * t251 + t649 * t862 - t1066, qJD(3) * t171 - qJD(5) * t418 + t916, -t672, qJD(3) * t20 + qJD(5) * t100 - t766, qJD(3) * t21 + qJD(5) * t98 - t765, qJD(3) * t5 - t769, qJD(3) * t9 - t772; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t811, -t743, t799, t811, -t801, qJD(2) * t836, t731, t732, 0, 0, -t635 * t645 - t883 - t917, t654 * t781 + t611 - t901, -t746 - t853, -t635 * t643 + t883 - t918, -t745 + t854, t702, qJD(5) * t497 - t688, -qJD(5) * t496 - t687, -t691, -t692; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t851, t630 * qJD(5), 0, -t851, 0, 0, -pkin(4) * t904, -pkin(4) * t903, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1061, -t668, -t653 * t806 + t891, t1061, t649 * t806 - t892, -t734, -pkin(10) * t903 - t676, pkin(10) * t904 - t678, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t71 + qJD(3) * t80, qJD(2) * t72 + qJD(3) * t81, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1062, -t682, qJD(3) * t266 - qJD(4) * t422 + t862, -t1062, qJD(3) * t265 + qJD(4) * t418 + t861, t493, qJD(3) * t57 - qJD(4) * t100 + t763, qJD(3) * t58 - qJD(4) * t98 + t762, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1064, t669, t896 + (-t857 + t907) * t654, -t1064, t897 + (-t856 - t909) * t654, qJD(2) * t797 + t640, -qJD(4) * t497 + t685, qJD(4) * t496 + t686, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1061, t668, t653 * t880 - t891, -t1061, -t649 * t880 + t892, t734, t676, t678, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t7;
