% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPPRR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:40
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPPRR2_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR2_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR2_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR2_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR2_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRR2_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:40:15
% EndTime: 2019-12-05 17:40:28
% DurationCPUTime: 13.11s
% Computational Cost: add. (50552->548), mult. (116151->691), div. (0->0), fcn. (82199->8), ass. (0->350)
t844 = sin(qJ(4));
t841 = sin(pkin(8));
t842 = cos(pkin(8));
t847 = cos(qJ(4));
t878 = t841 * t847 + t842 * t844;
t806 = t878 * qJD(1);
t808 = (-t841 * t844 + t842 * t847) * qJD(1);
t939 = t808 * t806;
t953 = qJDD(4) - t939;
t955 = t844 * t953;
t954 = t847 * t953;
t843 = sin(qJ(5));
t846 = cos(qJ(5));
t762 = t846 * t806 + t843 * t808;
t764 = -t843 * t806 + t846 * t808;
t718 = t764 * t762;
t836 = qJDD(4) + qJDD(5);
t949 = -t718 + t836;
t952 = t843 * t949;
t951 = t846 * t949;
t850 = qJD(1) ^ 2;
t837 = t841 ^ 2;
t838 = t842 ^ 2;
t915 = t837 + t838;
t950 = t915 * t850;
t831 = t842 * qJDD(1);
t909 = t841 * qJDD(1);
t804 = t847 * t831 - t844 * t909;
t914 = t806 * qJD(4);
t775 = -t914 + t804;
t913 = t808 * qJD(4);
t947 = t878 * qJDD(1);
t854 = -t947 - t913;
t700 = -t762 * qJD(5) + t846 * t775 + t843 * t854;
t839 = qJD(4) + qJD(5);
t753 = t839 * t762;
t948 = -t753 + t700;
t845 = sin(qJ(1));
t848 = cos(qJ(1));
t819 = t845 * g(1) - t848 * g(2);
t883 = qJDD(2) - t819;
t869 = -t850 * qJ(2) + t883;
t941 = -qJ(3) - pkin(1);
t853 = t941 * qJDD(1) + t869;
t912 = qJD(3) * qJD(1);
t906 = -0.2e1 * t912;
t942 = t841 * g(3);
t767 = t942 + (t853 + t906) * t842;
t768 = t842 * g(3) + (-t853 + 0.2e1 * t912) * t841;
t716 = t842 * t767 - t841 * t768;
t801 = t806 ^ 2;
t849 = qJD(4) ^ 2;
t769 = -t801 - t849;
t759 = t762 ^ 2;
t760 = t764 ^ 2;
t802 = t808 ^ 2;
t835 = t839 ^ 2;
t945 = pkin(2) * t716;
t840 = qJDD(1) * qJ(2);
t820 = t848 * g(1) + t845 * g(2);
t860 = -0.2e1 * qJD(2) * qJD(1) + t820;
t857 = -t840 + t860;
t855 = -qJDD(3) + t857;
t784 = -t941 * t850 + t855;
t944 = pkin(2) * t784;
t813 = t915 * qJDD(1);
t943 = pkin(2) * t813;
t940 = qJDD(1) * pkin(1);
t938 = t837 * t850;
t937 = t839 * t843;
t936 = t839 * t846;
t746 = t942 + (t906 + (-pkin(3) * t841 - qJ(2)) * t850 + (-pkin(6) + t941) * qJDD(1) + t883) * t842;
t749 = -pkin(3) * t938 - pkin(6) * t909 - t768;
t704 = -t847 * t746 + t844 * t749;
t705 = t844 * t746 + t847 * t749;
t646 = -t847 * t704 + t844 * t705;
t935 = t841 * t646;
t933 = t841 * t784;
t932 = t841 * t842;
t931 = t842 * t646;
t780 = t842 * t784;
t757 = -pkin(3) * t909 + (t915 * pkin(6) - t941) * t850 + t855;
t684 = t854 * pkin(4) - t808 * (qJD(4) * pkin(4) - t808 * pkin(7)) + t801 * pkin(7) + t757;
t930 = t843 * t684;
t713 = t718 + t836;
t929 = t843 * t713;
t649 = (-t775 - t914) * pkin(7) + t953 * pkin(4) - t704;
t654 = t769 * pkin(4) - pkin(7) * t947 + t705;
t618 = -t846 * t649 + t843 * t654;
t619 = t843 * t649 + t846 * t654;
t585 = -t846 * t618 + t843 * t619;
t928 = t844 * t585;
t927 = t844 * t757;
t771 = qJDD(4) + t939;
t926 = t844 * t771;
t925 = t845 * t813;
t924 = t846 * t684;
t923 = t846 * t713;
t922 = t847 * t585;
t921 = t847 * t757;
t920 = t847 * t771;
t919 = t848 * t813;
t586 = t843 * t618 + t846 * t619;
t564 = t844 * t586 + t922;
t584 = pkin(4) * t585;
t918 = pkin(3) * t564 + t584;
t890 = -t843 * t775 + t846 * t854;
t667 = (-qJD(5) + t839) * t764 + t890;
t670 = t753 + t700;
t630 = t843 * t667 - t846 * t670;
t632 = t846 * t667 + t843 * t670;
t595 = t847 * t630 + t844 * t632;
t628 = pkin(4) * t630;
t917 = pkin(3) * t595 + t628;
t916 = t837 - t838;
t911 = t837 * qJDD(1);
t910 = t838 * qJDD(1);
t908 = t845 * qJDD(1);
t907 = t848 * qJDD(1);
t905 = t845 * t718;
t904 = t845 * t939;
t903 = t848 * t718;
t902 = t848 * t939;
t790 = -t802 - t849;
t732 = t847 * t790 - t926;
t901 = pkin(3) * t732 - t705;
t647 = t844 * t704 + t847 * t705;
t610 = t841 * t647 + t931;
t645 = pkin(3) * t646;
t900 = -pkin(2) * t610 - t645;
t723 = -t847 * t804 - t844 * t947;
t725 = t844 * t804 - t847 * t947;
t672 = t842 * t723 + t841 * t725;
t722 = pkin(3) * t723;
t899 = -pkin(2) * t672 - t722;
t565 = t847 * t586 - t928;
t583 = pkin(4) * t684 + pkin(7) * t586;
t553 = pkin(3) * t684 + pkin(6) * t565 - pkin(7) * t928 + t847 * t583;
t555 = -pkin(6) * t564 - pkin(7) * t922 - t844 * t583;
t898 = -t841 * t553 + t842 * t555;
t697 = -t759 - t760;
t573 = -pkin(4) * t697 + pkin(7) * t632 + t586;
t578 = -pkin(7) * t630 - t585;
t597 = -t844 * t630 + t847 * t632;
t558 = -pkin(3) * t697 + pkin(6) * t597 + t847 * t573 + t844 * t578;
t560 = -pkin(6) * t595 - t844 * t573 + t847 * t578;
t897 = -t841 * t558 + t842 * t560;
t711 = -t835 - t759;
t657 = t846 * t711 - t952;
t754 = t839 * t764;
t873 = t764 * qJD(5) - t890;
t665 = t754 + t873;
t609 = -pkin(4) * t665 + pkin(7) * t657 + t924;
t656 = t843 * t711 + t951;
t622 = -t844 * t656 + t847 * t657;
t633 = -pkin(7) * t656 - t930;
t572 = -pkin(3) * t665 + pkin(6) * t622 + t847 * t609 + t844 * t633;
t621 = t847 * t656 + t844 * t657;
t576 = -pkin(6) * t621 - t844 * t609 + t847 * t633;
t896 = -t841 * t572 + t842 * t576;
t748 = -t760 - t835;
t679 = -t843 * t748 - t923;
t612 = -pkin(4) * t948 + pkin(7) * t679 - t930;
t678 = t846 * t748 - t929;
t638 = -t844 * t678 + t847 * t679;
t643 = -pkin(7) * t678 - t924;
t574 = -pkin(3) * t948 + pkin(6) * t638 + t847 * t612 + t844 * t643;
t637 = t847 * t678 + t844 * t679;
t582 = -pkin(6) * t637 - t844 * t612 + t847 * t643;
t895 = -t841 * t574 + t842 * t582;
t747 = -t801 - t802;
t623 = -pkin(3) * t747 + pkin(6) * t725 + t647;
t635 = -pkin(6) * t723 - t646;
t894 = -t841 * t623 + t842 * t635;
t721 = t847 * t769 - t955;
t773 = t947 + 0.2e1 * t913;
t671 = -pkin(3) * t773 + pkin(6) * t721 + t921;
t720 = t844 * t769 + t954;
t696 = -pkin(6) * t720 - t927;
t893 = -t841 * t671 + t842 * t696;
t735 = -t844 * t790 - t920;
t774 = -0.2e1 * t914 + t804;
t676 = -pkin(3) * t774 + pkin(6) * t735 - t927;
t703 = -pkin(6) * t732 - t921;
t892 = -t841 * t676 + t842 * t703;
t792 = t850 * pkin(1) + t857;
t796 = -t869 + t940;
t889 = -t848 * t792 - t845 * t796;
t888 = -t845 * t819 - t848 * t820;
t556 = t842 * t564 + t841 * t565;
t887 = -pkin(2) * t556 - t918;
t569 = t842 * t595 + t841 * t597;
t886 = -pkin(2) * t569 - t917;
t817 = -t845 * t850 + t907;
t885 = pkin(5) * t817 + t845 * g(3);
t818 = t848 * t850 + t908;
t884 = -pkin(5) * t818 + t848 * g(3);
t882 = pkin(4) * t656 - t618;
t881 = pkin(3) * t720 - t704;
t717 = -t841 * t767 - t842 * t768;
t880 = t845 * t792 - t848 * t796;
t879 = t848 * t819 - t845 * t820;
t687 = t842 * t732 + t841 * t735;
t877 = -pkin(2) * t687 - t901;
t876 = pkin(3) * t621 + t882;
t644 = pkin(3) * t757 + pkin(6) * t647;
t875 = -pkin(6) * t931 - t841 * t644;
t874 = pkin(4) * t678 - t619;
t811 = t841 * t950;
t872 = -t845 * t811 + t841 * t907;
t871 = t848 * t811 + t841 * t908;
t662 = t842 * t720 + t841 * t721;
t870 = -pkin(2) * t662 - t881;
t868 = pkin(3) * t637 + t874;
t867 = -pkin(2) * t684 - t842 * t553 - t841 * t555;
t866 = pkin(2) * t697 - t842 * t558 - t841 * t560;
t865 = pkin(2) * t665 - t842 * t572 - t841 * t576;
t864 = pkin(2) * t948 - t842 * t574 - t841 * t582;
t863 = pkin(2) * t747 - t842 * t623 - t841 * t635;
t862 = pkin(2) * t773 - t842 * t671 - t841 * t696;
t861 = pkin(2) * t774 - t842 * t676 - t841 * t703;
t587 = t842 * t621 + t841 * t622;
t859 = -pkin(2) * t587 - t876;
t858 = -pkin(2) * t757 + pkin(6) * t935 - t842 * t644;
t600 = t842 * t637 + t841 * t638;
t856 = -pkin(2) * t600 - t868;
t823 = t850 * t932;
t822 = t841 * t831;
t821 = -0.2e1 * t822;
t816 = t916 * t850;
t814 = t916 * qJDD(1);
t810 = t842 * t950;
t809 = t883 - 0.2e1 * t940;
t805 = 0.2e1 * t840 - t860;
t789 = -t802 + t849;
t788 = t801 - t849;
t787 = t818 * t932;
t786 = t817 * t932;
t782 = -t845 * t810 + t842 * t907;
t781 = t848 * t810 + t842 * t908;
t778 = t802 - t801;
t777 = -pkin(2) * t909 + t780;
t776 = -pkin(2) * t831 - t933;
t758 = pkin(1) * t796 - qJ(2) * t792;
t756 = (-t847 * t806 + t844 * t808) * qJD(4);
t755 = (-t844 * t806 - t847 * t808) * qJD(4);
t751 = -t760 + t835;
t750 = t759 - t835;
t744 = -pkin(2) * t811 + t767;
t743 = -pkin(2) * t810 + t768;
t739 = t847 * t775 - t844 * t913;
t738 = t844 * t775 + t847 * t913;
t737 = -t844 * t854 + t847 * t914;
t736 = t844 * t914 + t847 * t854;
t734 = -t844 * t789 + t954;
t733 = t847 * t788 - t926;
t731 = t847 * t789 + t955;
t730 = t844 * t788 + t920;
t728 = qJ(2) * t831 - t941 * t810 - t780;
t727 = (-t784 + t840) * t841 - t941 * t811;
t726 = -t847 * t773 - t844 * t774;
t724 = -t844 * t773 + t847 * t774;
t715 = t760 - t759;
t710 = pkin(2) * t950 + t717;
t709 = -t841 * t755 + t842 * t756;
t708 = t842 * t755 + t841 * t756;
t707 = (-t762 * t846 + t764 * t843) * t839;
t706 = (-t762 * t843 - t764 * t846) * t839;
t698 = -qJ(2) * t950 - t941 * t813 - t716;
t695 = -t841 * t738 + t842 * t739;
t694 = -t841 * t736 + t842 * t737;
t693 = t842 * t738 + t841 * t739;
t692 = t842 * t736 + t841 * t737;
t690 = -t841 * t732 + t842 * t735;
t689 = -t841 * t731 + t842 * t734;
t688 = -t841 * t730 + t842 * t733;
t686 = t842 * t731 + t841 * t734;
t685 = t842 * t730 + t841 * t733;
t683 = t846 * t750 - t929;
t682 = -t843 * t751 + t951;
t681 = t843 * t750 + t923;
t680 = t846 * t751 + t952;
t675 = -t841 * t724 + t842 * t726;
t674 = -t841 * t723 + t842 * t725;
t673 = t842 * t724 + t841 * t726;
t666 = -t754 + t873;
t664 = -qJ(2) * t717 + t945;
t663 = -t841 * t720 + t842 * t721;
t661 = t846 * t700 - t764 * t937;
t660 = t843 * t700 + t764 * t936;
t659 = t762 * t936 + t843 * t873;
t658 = t762 * t937 - t846 * t873;
t653 = t941 * t717 - t944;
t652 = -qJ(2) * t784 + t941 * t716;
t651 = -t844 * t706 + t847 * t707;
t650 = t847 * t706 + t844 * t707;
t642 = -t844 * t681 + t847 * t683;
t641 = -t844 * t680 + t847 * t682;
t640 = t847 * t681 + t844 * t683;
t639 = t847 * t680 + t844 * t682;
t631 = -t846 * t665 - t843 * t948;
t629 = -t843 * t665 + t846 * t948;
t627 = -t844 * t660 + t847 * t661;
t626 = -t844 * t658 + t847 * t659;
t625 = t847 * t660 + t844 * t661;
t624 = t847 * t658 + t844 * t659;
t616 = -t841 * t650 + t842 * t651;
t615 = t842 * t650 + t841 * t651;
t614 = -qJ(2) * t674 - t899;
t613 = -qJ(2) * t690 - t877;
t611 = t842 * t647 - t935;
t608 = -qJ(2) * t663 - t870;
t607 = -t841 * t640 + t842 * t642;
t606 = -t841 * t639 + t842 * t641;
t605 = t842 * t640 + t841 * t642;
t604 = t842 * t639 + t841 * t641;
t603 = t941 * t690 + t861;
t602 = qJ(2) * t774 + t941 * t687 + t892;
t601 = -t841 * t637 + t842 * t638;
t599 = t941 * t663 + t862;
t598 = qJ(2) * t773 + t941 * t662 + t893;
t596 = -t844 * t629 + t847 * t631;
t594 = t847 * t629 + t844 * t631;
t592 = -t841 * t625 + t842 * t627;
t591 = -t841 * t624 + t842 * t626;
t590 = t842 * t625 + t841 * t627;
t589 = t842 * t624 + t841 * t626;
t588 = -t841 * t621 + t842 * t622;
t580 = t941 * t674 + t863;
t579 = qJ(2) * t747 + t941 * t672 + t894;
t577 = -qJ(2) * t611 - t900;
t571 = -t841 * t595 + t842 * t597;
t570 = -t841 * t594 + t842 * t596;
t568 = t842 * t594 + t841 * t596;
t567 = t941 * t611 + t858;
t566 = -qJ(2) * t757 + t941 * t610 + t875;
t562 = -qJ(2) * t601 - t856;
t561 = -qJ(2) * t588 - t859;
t557 = -t841 * t564 + t842 * t565;
t552 = t941 * t601 + t864;
t551 = qJ(2) * t948 + t941 * t600 + t895;
t550 = -qJ(2) * t571 - t886;
t549 = t941 * t588 + t865;
t548 = qJ(2) * t665 + t941 * t587 + t896;
t547 = -qJ(2) * t557 - t887;
t546 = t941 * t571 + t866;
t545 = qJ(2) * t697 + t941 * t569 + t897;
t544 = t941 * t557 + t867;
t543 = -qJ(2) * t684 + t941 * t556 + t898;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t817, 0, -t818, 0, -t885, -t884, -t879, -pkin(5) * t879, 0, -t817, t818, 0, 0, 0, t880, t885, t884, pkin(5) * t880 + (-t845 * pkin(1) + t848 * qJ(2)) * g(3), t787, -t845 * t814 - t848 * t816, t782, -t787, -t872, 0, -pkin(5) * t871 + t848 * t744 + t845 * t777, -pkin(5) * t781 + t848 * t743 + t845 * t776, -pkin(2) * t919 + t845 * t710 - pkin(5) * (-t845 * t950 + t919), t848 * t664 - t845 * t653 - pkin(5) * (-t848 * t716 - t845 * t784), t845 * t693 + t902, t845 * t673 + t848 * t778, t845 * t686 + t848 * t804, t845 * t692 - t902, t845 * t685 - t848 * t947, t848 * qJDD(4) + t845 * t708, t848 * t608 - t845 * t599 - pkin(5) * (-t848 * t662 + t845 * t773), t848 * t613 - t845 * t603 - pkin(5) * (-t848 * t687 + t845 * t774), t848 * t614 - t845 * t580 - pkin(5) * (-t848 * t672 + t845 * t747), t848 * t577 - t845 * t567 - pkin(5) * (-t848 * t610 - t845 * t757), t845 * t590 + t903, t845 * t568 + t848 * t715, t845 * t604 + t848 * t670, t845 * t589 - t903, t845 * t605 - t848 * t666, t845 * t615 + t848 * t836, t848 * t561 - t845 * t549 - pkin(5) * (-t848 * t587 + t845 * t665), t848 * t562 - t845 * t552 - pkin(5) * (-t848 * t600 + t845 * t948), t848 * t550 - t845 * t546 - pkin(5) * (-t848 * t569 + t845 * t697), t848 * t547 - t845 * t544 - pkin(5) * (-t848 * t556 - t845 * t684); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t818, 0, t817, 0, t884, -t885, t888, pkin(5) * t888, 0, -t818, -t817, 0, 0, 0, t889, -t884, t885, pkin(5) * t889 + (t848 * pkin(1) + t845 * qJ(2)) * g(3), -t786, t848 * t814 - t845 * t816, t781, t786, -t871, 0, pkin(5) * t872 + t845 * t744 - t848 * t777, pkin(5) * t782 + t845 * t743 - t848 * t776, -pkin(2) * t925 - t848 * t710 + pkin(5) * (-t848 * t950 - t925), t845 * t664 + t848 * t653 + pkin(5) * (t845 * t716 - t848 * t784), -t848 * t693 + t904, -t848 * t673 + t845 * t778, -t848 * t686 + t845 * t804, -t848 * t692 - t904, -t848 * t685 - t845 * t947, t845 * qJDD(4) - t848 * t708, t845 * t608 + t848 * t599 + pkin(5) * (t845 * t662 + t848 * t773), t845 * t613 + t848 * t603 + pkin(5) * (t845 * t687 + t848 * t774), t845 * t614 + t848 * t580 + pkin(5) * (t845 * t672 + t848 * t747), t845 * t577 + t848 * t567 + pkin(5) * (t845 * t610 - t848 * t757), -t848 * t590 + t905, -t848 * t568 + t845 * t715, -t848 * t604 + t845 * t670, -t848 * t589 - t905, -t848 * t605 - t845 * t666, -t848 * t615 + t845 * t836, t845 * t561 + t848 * t549 + pkin(5) * (t845 * t587 + t848 * t665), t845 * t562 + t848 * t552 + pkin(5) * (t845 * t600 + t848 * t948), t845 * t550 + t848 * t546 + pkin(5) * (t845 * t569 + t848 * t697), t845 * t547 + t848 * t544 + pkin(5) * (t845 * t556 - t848 * t684); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t819, t820, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t809, t805, t758, t910, t821, 0, t911, 0, 0, t727, t728, t698, t652, t695, t675, t689, t694, t688, t709, t598, t602, t579, t566, t592, t570, t606, t591, t607, t616, t548, t551, t545, t543; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t850, 0, 0, -g(3), -t819, 0, 0, -qJDD(1), t850, 0, 0, 0, -t796, 0, g(3), qJ(2) * g(3), t823, -t816, t831, -t823, -t909, 0, t744, t743, -t943, t664, t939, t778, t804, -t939, -t947, qJDD(4), t608, t613, t614, t577, t718, t715, t670, -t718, -t666, t836, t561, t562, t550, t547; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t850, 0, qJDD(1), 0, g(3), 0, -t820, 0, 0, -t850, -qJDD(1), 0, 0, 0, -t792, -g(3), 0, pkin(1) * g(3), -t822, t814, t810, t822, -t811, 0, -t777, -t776, -t710, t653, -t693, -t673, -t686, -t692, -t685, -t708, t599, t603, t580, t567, -t590, -t568, -t604, -t589, -t605, -t615, t549, t552, t546, t544; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t819, t820, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t809, t805, t758, t910, t821, 0, t911, 0, 0, t727, t728, t698, t652, t695, t675, t689, t694, t688, t709, t598, t602, t579, t566, t592, t570, t606, t591, t607, t616, t548, t551, t545, t543; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t796, -t792, 0, t910, t821, 0, t911, 0, 0, qJ(3) * t811 - t933, qJ(3) * t810 - t780, qJ(3) * t813 - t716, -qJ(3) * t716, t695, t675, t689, t694, t688, t709, -qJ(3) * t662 + t893, -qJ(3) * t687 + t892, -qJ(3) * t672 + t894, -qJ(3) * t610 + t875, t592, t570, t606, t591, t607, t616, -qJ(3) * t587 + t896, -qJ(3) * t600 + t895, -qJ(3) * t569 + t897, -qJ(3) * t556 + t898; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t850, 0, 0, 0, t796, 0, -g(3), 0, -t823, t816, -t831, t823, t909, 0, -t744, -t743, t943, -t945, -t939, -t778, -t804, t939, t947, -qJDD(4), t870, t877, t899, t900, -t718, -t715, -t670, t718, t666, -t836, t859, t856, t886, t887; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t850, qJDD(1), 0, 0, 0, t792, g(3), 0, 0, t822, -t814, -t810, -t822, t811, 0, t777, t776, t710, qJ(3) * t717 + t944, t693, t673, t686, t692, t685, t708, qJ(3) * t663 - t862, qJ(3) * t690 - t861, qJ(3) * t674 - t863, qJ(3) * t611 - t858, t590, t568, t604, t589, t605, t615, qJ(3) * t588 - t865, qJ(3) * t601 - t864, qJ(3) * t571 - t866, qJ(3) * t557 - t867; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t831, -t909, -t823, 0, t938, 0, 0, -t784, -t767, 0, t739, t726, t734, t737, t733, t756, t696, t703, t635, -pkin(6) * t646, t627, t596, t641, t626, t642, t651, t576, t582, t560, t555; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t831, -t838 * t850, -t909, t823, 0, t784, 0, -t768, 0, t738, t724, t731, t736, t730, t755, t671, t676, t623, t644, t625, t594, t639, t624, t640, t650, t572, t574, t558, t553; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t823, -t816, t831, -t823, -t909, 0, t767, t768, 0, 0, t939, t778, t804, -t939, -t947, qJDD(4), t881, t901, t722, t645, t718, t715, t670, -t718, -t666, t836, t876, t868, t917, t918; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t775, -t773, t953, t914, t788, -t914, 0, -t757, t704, 0, t661, t631, t682, t659, t683, t707, t633, t643, t578, -pkin(7) * t585; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t913, t774, t789, t854, t771, -t913, t757, 0, t705, 0, t660, t629, t680, t658, t681, t706, t609, t612, t573, t583; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t939, t778, t804, -t939, -t947, qJDD(4), -t704, -t705, 0, 0, t718, t715, t670, -t718, -t666, t836, t882, t874, t628, t584; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t700, -t665, t949, t753, t750, -t753, 0, -t684, t618, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t754, t948, t751, -t873, t713, -t754, t684, 0, t619, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t718, t715, t670, -t718, -t666, t836, -t618, -t619, 0, 0;];
m_new_reg = t1;
