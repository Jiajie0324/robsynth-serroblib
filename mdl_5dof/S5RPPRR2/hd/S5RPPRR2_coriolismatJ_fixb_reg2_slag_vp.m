% Calculate inertial parameters regressor of coriolis matrix for
% S5RPPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta3]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:40
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RPPRR2_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR2_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR2_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRR2_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:40:04
% EndTime: 2019-12-05 17:40:09
% DurationCPUTime: 2.18s
% Computational Cost: add. (4320->146), mult. (7232->190), div. (0->0), fcn. (8493->6), ass. (0->127)
t254 = qJD(4) + qJD(5);
t153 = sin(pkin(8));
t154 = cos(pkin(8));
t227 = sin(qJ(4));
t229 = cos(qJ(4));
t140 = -t227 * t153 + t229 * t154;
t228 = cos(qJ(5));
t127 = t228 * t140;
t138 = t229 * t153 + t227 * t154;
t156 = sin(qJ(5));
t217 = t156 * t138;
t234 = t127 - t217;
t220 = t234 ^ 2;
t126 = t228 * t138;
t216 = t156 * t140;
t235 = t126 + t216;
t221 = t235 ^ 2;
t248 = -t220 + t221;
t253 = t248 * qJD(1);
t223 = qJD(4) * pkin(4);
t249 = (t156 * t234 - t228 * t235) * t223;
t155 = -pkin(1) - qJ(3);
t224 = -pkin(6) + t155;
t165 = t224 * t227;
t166 = t224 * t229;
t109 = t153 * t165 - t154 * t166;
t88 = -t140 * pkin(7) - t109;
t110 = t153 * t166 + t154 * t165;
t89 = -t138 * pkin(7) + t110;
t46 = -t156 * t89 + t228 * t88;
t247 = t254 * t46;
t239 = t234 * qJD(1);
t242 = t235 * t239;
t193 = t234 * qJD(5);
t199 = t234 * qJD(4);
t241 = t193 + t199;
t195 = t235 * qJD(4);
t197 = t235 * qJD(5);
t50 = -t195 - t197;
t240 = qJD(3) * t235;
t238 = t235 * qJD(1);
t231 = -t234 / 0.2e1;
t157 = t156 * t88;
t181 = -t157 / 0.2e1;
t182 = t228 * t89;
t47 = t182 + t157;
t136 = t138 ^ 2;
t233 = t140 ^ 2;
t230 = -t235 / 0.2e1;
t169 = -t126 / 0.2e1;
t168 = t127 / 0.2e1;
t226 = pkin(4) * t156;
t225 = t140 * pkin(4);
t11 = -t230 * t234 + t231 * t235;
t219 = t11 * qJD(1);
t12 = -t234 * t46 - t235 * t47;
t218 = t12 * qJD(1);
t159 = t230 * t235 + t231 * t234;
t23 = -0.1e1 / 0.2e1 + t159;
t214 = t23 * qJD(1);
t26 = t220 + t221;
t213 = t26 * qJD(1);
t145 = t153 * pkin(3) + qJ(2);
t118 = t138 * pkin(4) + t145;
t39 = -t118 * t234 - t225 * t235;
t211 = t39 * qJD(1);
t40 = t118 * t235 - t225 * t234;
t210 = t40 * qJD(1);
t158 = t156 * t230 + t228 * t231;
t48 = (-t140 / 0.2e1 + t158) * pkin(4);
t208 = t48 * qJD(1);
t51 = t109 * t140 - t110 * t138;
t207 = t51 * qJD(1);
t167 = -t136 / 0.2e1 - t233 / 0.2e1;
t67 = -0.1e1 / 0.2e1 + t167;
t206 = t67 * qJD(1);
t74 = 0.2e1 * t168 - t217;
t204 = t74 * qJD(1);
t90 = t136 - t233;
t203 = t90 * qJD(1);
t149 = t153 ^ 2;
t150 = t154 ^ 2;
t144 = t149 + t150;
t101 = t168 - t127 / 0.2e1;
t202 = t101 * qJD(1);
t201 = t101 * qJD(5);
t111 = t136 + t233;
t192 = t111 * qJD(1);
t191 = t118 * qJD(1);
t137 = t144 * t155;
t190 = t137 * qJD(1);
t189 = t138 * qJD(1);
t130 = t138 * qJD(4);
t188 = t140 * qJD(1);
t133 = t140 * qJD(4);
t173 = -t149 / 0.2e1 - t150 / 0.2e1;
t143 = -0.1e1 / 0.2e1 + t173;
t187 = t143 * qJD(1);
t186 = t144 * qJD(1);
t185 = t145 * qJD(1);
t184 = t153 * qJD(1);
t183 = t154 * qJD(1);
t180 = t234 * t238;
t177 = t235 * t191;
t176 = t234 * t191;
t175 = t138 * t188;
t174 = t138 * t133;
t172 = t228 * qJD(4);
t171 = t228 * qJD(5);
t170 = qJD(3) + t185;
t8 = t118 * t225;
t164 = t8 * qJD(1);
t163 = t11 * qJD(2);
t100 = t169 + t126 / 0.2e1;
t15 = t181 + t157 / 0.2e1;
t161 = -t15 * qJD(1) + t100 * qJD(2);
t160 = t74 * qJD(5) + t199;
t152 = qJ(2) * qJD(2);
t151 = qJD(1) * qJ(2);
t142 = 0.1e1 / 0.2e1 + t173;
t73 = 0.2e1 * t169 - t216;
t66 = 0.1e1 / 0.2e1 + t167;
t49 = t225 / 0.2e1 + t158 * pkin(4);
t22 = 0.1e1 / 0.2e1 + t159;
t18 = -t182 + 0.2e1 * t181;
t1 = t11 * qJD(4);
t2 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), t152, 0, 0, 0, 0, 0, 0, qJD(2) * t153, qJD(2) * t154, t144 * qJD(3), -t137 * qJD(3) + t152, -t174, t90 * qJD(4), 0, t174, 0, 0, qJD(2) * t138 + t145 * t133, qJD(2) * t140 - t145 * t130, t111 * qJD(3), t145 * qJD(2) + t51 * qJD(3), t50 * t234, t254 * t248, 0, t241 * t235, 0, 0, qJD(2) * t235 - t39 * qJD(4) + t118 * t193, qJD(2) * t234 - t40 * qJD(4) - t118 * t197, t26 * qJD(3), t118 * qJD(2) + t12 * qJD(3) + t8 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(1), t151, 0, 0, 0, 0, 0, 0, t184, t183, 0, t142 * qJD(3) + t151, 0, 0, 0, 0, 0, 0, t189, t188, 0, t66 * qJD(3) + t185, 0, 0, 0, 0, 0, 0, t238, t239, t1, t22 * qJD(3) + t191; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t186, t142 * qJD(2) - t190, 0, 0, 0, 0, 0, 0, 0, 0, t192, t66 * qJD(2) + t207, 0, 0, 0, 0, 0, 0, t201, 0, t213, t22 * qJD(2) + t49 * qJD(4) + t218; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t175, t203, -t130, t175, -t133, 0, -t110 * qJD(4) + t140 * t185, t109 * qJD(4) - t138 * t185, 0, 0, -t242, t253, t50, t180, -t160, 0, -qJD(4) * t47 + t18 * qJD(5) - t211, -t210 - t247, t163 - t249, t49 * qJD(3) + (t156 * t46 - t228 * t47) * t223 + t164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t242, t253, t50, t242, -t74 * qJD(4) - t193, 0, t101 * qJD(3) + t18 * qJD(4) - t47 * qJD(5) + t176, -t177 - t247, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(1), -t151, 0, 0, 0, 0, 0, 0, -t184, -t183, 0, t143 * qJD(3) - t151, 0, 0, 0, 0, 0, 0, -t189, -t188, 0, t67 * qJD(3) - t185, 0, 0, 0, 0, 0, 0, -t238, -t239, t1, t23 * qJD(3) - t191; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t187, 0, 0, 0, 0, 0, 0, 0, 0, 0, t206, 0, 0, 0, 0, 0, 0, 0, 0, 0, t214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t130, -t133, 0, 0, 0, 0, 0, 0, 0, 0, t73 * qJD(5) - t195, -t241, t219, t249; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t73 * qJD(4) - t197, -t241, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t186, -t143 * qJD(2) + t190, 0, 0, 0, 0, 0, 0, t133, -t130, -t192, -t67 * qJD(2) - t207, 0, 0, 0, 0, 0, 0, t160, t50, -t213, -t23 * qJD(2) - t48 * qJD(4) - t218; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t187, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t206, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t214; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t188, -t189, 0, 0, 0, 0, 0, 0, 0, 0, t239, -t238, 0, -t208; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t204, -t238, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t175, -t203, 0, -t175, 0, 0, -t170 * t140, t170 * t138, 0, 0, t242, -t253, 0, -t180, -t201, 0, -qJD(3) * t234 - t15 * qJD(5) + t211, t210 + t240, -t163, t48 * qJD(3) - t164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100 * qJD(5), 0, -t219, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t188, t189, 0, 0, 0, 0, 0, 0, 0, 0, -t239, t238, 0, t208; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(5) * t226, -pkin(4) * t171, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t202, 0, -t226 * t254 + t161, (-t172 - t171) * pkin(4), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t242, -t253, 0, -t242, t101 * qJD(4), 0, -t74 * qJD(3) + t15 * qJD(4) - t176, t177 + t240, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t100 * qJD(4), 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t204, t238, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t202, 0, t156 * t223 - t161, pkin(4) * t172, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t2;
