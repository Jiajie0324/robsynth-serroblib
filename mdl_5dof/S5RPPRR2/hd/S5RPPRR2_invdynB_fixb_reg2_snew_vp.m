% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPPRR2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:40
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPPRR2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR2_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR2_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR2_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRR2_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:40:06
% EndTime: 2019-12-05 17:40:15
% DurationCPUTime: 7.87s
% Computational Cost: add. (25180->446), mult. (57686->664), div. (0->0), fcn. (40846->8), ass. (0->299)
t472 = sin(qJ(4));
t469 = sin(pkin(8));
t470 = cos(pkin(8));
t475 = cos(qJ(4));
t486 = t469 * t475 + t470 * t472;
t441 = t486 * qJD(1);
t443 = (-t469 * t472 + t470 * t475) * qJD(1);
t529 = t443 * t441;
t540 = qJDD(4) - t529;
t542 = t472 * t540;
t541 = t475 * t540;
t478 = qJD(1) ^ 2;
t473 = sin(qJ(1));
t476 = cos(qJ(1));
t453 = t473 * g(1) - t476 * g(2);
t489 = qJDD(2) - t453;
t483 = -t478 * qJ(2) + t489;
t531 = -qJ(3) - pkin(1);
t492 = -0.2e1 * qJD(1) * qJD(3) + t531 * qJDD(1) + t483;
t471 = sin(qJ(5));
t474 = cos(qJ(5));
t393 = t474 * t441 + t471 * t443;
t395 = -t471 * t441 + t474 * t443;
t356 = t395 * t393;
t464 = qJDD(4) + qJDD(5);
t535 = -t356 + t464;
t538 = t471 * t535;
t537 = t474 * t535;
t465 = t469 ^ 2;
t466 = t470 ^ 2;
t510 = t465 + t466;
t536 = t510 * t478;
t399 = -t470 * g(3) + t492 * t469;
t484 = t486 * qJDD(1);
t391 = t393 ^ 2;
t392 = t395 ^ 2;
t437 = t441 ^ 2;
t438 = t443 ^ 2;
t467 = qJD(4) + qJD(5);
t463 = t467 ^ 2;
t533 = pkin(3) * t478;
t532 = t469 * g(3);
t530 = qJDD(1) * pkin(1);
t528 = t467 * t471;
t527 = t467 * t474;
t379 = t532 + (-pkin(6) * qJDD(1) - t469 * t533 + t492) * t470;
t504 = qJDD(1) * t469;
t382 = -pkin(6) * t504 - t465 * t533 + t399;
t343 = -t475 * t379 + t472 * t382;
t344 = t472 * t379 + t475 * t382;
t288 = -t475 * t343 + t472 * t344;
t526 = t469 * t288;
t525 = t469 * t470;
t524 = t470 * t288;
t454 = t476 * g(1) + t473 * g(2);
t468 = qJDD(1) * qJ(2);
t485 = t454 - t468;
t505 = qJD(2) * qJD(1);
t481 = -qJDD(3) + t485 - 0.2e1 * t505;
t390 = -pkin(3) * t504 + (pkin(6) * t510 - t531) * t478 + t481;
t508 = t443 * qJD(4);
t405 = -t484 - t508;
t488 = qJD(4) * pkin(4) - t443 * pkin(7);
t328 = t405 * pkin(4) + t437 * pkin(7) - t443 * t488 + t390;
t523 = t471 * t328;
t351 = t356 + t464;
t522 = t471 * t351;
t503 = qJDD(1) * t470;
t440 = -t472 * t504 + t475 * t503;
t509 = t441 * qJD(4);
t407 = t440 - t509;
t295 = (-t407 - t509) * pkin(7) + t540 * pkin(4) - t343;
t299 = -t437 * pkin(4) + t405 * pkin(7) - qJD(4) * t488 + t344;
t265 = -t474 * t295 + t471 * t299;
t266 = t471 * t295 + t474 * t299;
t236 = -t474 * t265 + t471 * t266;
t521 = t472 * t236;
t520 = t472 * t390;
t402 = qJDD(4) + t529;
t519 = t472 * t402;
t447 = t510 * qJDD(1);
t518 = t473 * t447;
t517 = t474 * t328;
t516 = t474 * t351;
t515 = t475 * t236;
t514 = t475 * t390;
t513 = t475 * t402;
t512 = t476 * t447;
t511 = t465 - t466;
t507 = qJD(5) + t467;
t502 = t473 * qJDD(1);
t501 = t476 * qJDD(1);
t500 = t473 * t356;
t499 = t473 * t529;
t498 = t476 * t356;
t497 = t476 * t529;
t237 = t471 * t265 + t474 * t266;
t289 = t472 * t343 + t475 * t344;
t494 = -t474 * t405 + t471 * t407;
t461 = 0.2e1 * t505;
t430 = -t478 * pkin(1) + t461 - t485;
t432 = -t483 + t530;
t387 = t476 * t430 - t473 * t432;
t419 = -t473 * t453 - t476 * t454;
t421 = -t531 * t478 + t481;
t493 = -t421 + t468;
t451 = -t473 * t478 + t501;
t491 = pkin(5) * t451 + t473 * g(3);
t452 = t476 * t478 + t502;
t490 = -pkin(5) * t452 + t476 * g(3);
t398 = t470 * t492 + t532;
t354 = t470 * t398 + t469 * t399;
t355 = -t469 * t398 + t470 * t399;
t487 = t471 * t405 + t474 * t407;
t386 = t473 * t430 + t476 * t432;
t418 = t476 * t453 - t473 * t454;
t445 = t469 * t536;
t416 = -t473 * t445 + t469 * t501;
t414 = t476 * t445 + t469 * t502;
t482 = (-qJD(5) + t467) * t395 - t494;
t338 = -t393 * qJD(5) + t487;
t477 = qJD(4) ^ 2;
t450 = t511 * t478;
t448 = t511 * qJDD(1);
t444 = t470 * t536;
t428 = -t438 - t477;
t427 = -t438 + t477;
t426 = t437 - t477;
t424 = t452 * t525;
t423 = t451 * t525;
t417 = -t473 * t444 + t470 * t501;
t415 = t476 * t444 + t470 * t502;
t413 = -t476 * t536 - t518;
t412 = -t473 * t536 + t512;
t410 = t438 - t437;
t409 = pkin(2) * t504 - t470 * t421;
t408 = pkin(2) * t503 + t469 * t421;
t406 = t440 - 0.2e1 * t509;
t404 = 0.2e1 * t508 + t484;
t400 = -t477 - t437;
t389 = (-t441 * t475 + t443 * t472) * qJD(4);
t388 = (-t441 * t472 - t443 * t475) * qJD(4);
t385 = t467 * t393;
t384 = -t392 + t463;
t383 = t391 - t463;
t381 = -t392 - t463;
t380 = -t437 - t438;
t377 = -pkin(2) * t445 + t398;
t376 = -pkin(2) * t444 - t399;
t372 = t475 * t407 - t472 * t508;
t371 = t472 * t407 + t475 * t508;
t370 = -t472 * t405 + t475 * t509;
t369 = t475 * t405 + t472 * t509;
t368 = -t472 * t428 - t513;
t367 = -t472 * t427 + t541;
t366 = t475 * t426 - t519;
t365 = t475 * t428 - t519;
t364 = t475 * t427 + t542;
t363 = t472 * t426 + t513;
t362 = -t475 * t404 - t472 * t406;
t361 = t472 * t440 - t475 * t484;
t360 = -t472 * t404 + t475 * t406;
t359 = -t475 * t440 - t472 * t484;
t358 = t475 * t400 - t542;
t357 = t472 * t400 + t541;
t353 = t392 - t391;
t349 = -t463 - t391;
t348 = -pkin(2) * t536 - t355;
t347 = -t470 * t388 - t469 * t389;
t346 = (-t393 * t474 + t395 * t471) * t467;
t345 = (-t393 * t471 - t395 * t474) * t467;
t342 = -pkin(6) * t365 - t514;
t340 = t473 * t354 - t476 * t421;
t339 = -t476 * t354 - t473 * t421;
t337 = -t395 * qJD(5) - t494;
t336 = -t391 - t392;
t335 = -pkin(6) * t357 - t520;
t334 = -t470 * t371 - t469 * t372;
t333 = -t470 * t369 - t469 * t370;
t332 = -t469 * t365 + t470 * t368;
t331 = t470 * t365 + t469 * t368;
t330 = -t470 * t364 - t469 * t367;
t329 = -t470 * t363 - t469 * t366;
t327 = t474 * t383 - t522;
t326 = -t471 * t384 + t537;
t325 = t471 * t383 + t516;
t324 = t474 * t384 + t538;
t323 = -t471 * t381 - t516;
t322 = t474 * t381 - t522;
t321 = -pkin(3) * t406 + pkin(6) * t368 - t520;
t320 = -t469 * t359 + t470 * t361;
t319 = -t470 * t360 - t469 * t362;
t318 = t470 * t359 + t469 * t361;
t317 = -pkin(3) * t404 + pkin(6) * t358 + t514;
t316 = t338 + t385;
t315 = t338 - t385;
t314 = -t393 * t507 + t487;
t311 = t395 * t507 + t494;
t310 = pkin(2) * t354 - qJ(2) * t355;
t309 = -t469 * t357 + t470 * t358;
t308 = t470 * t357 + t469 * t358;
t307 = t474 * t338 - t395 * t528;
t306 = t471 * t338 + t395 * t527;
t305 = -t471 * t337 + t393 * t527;
t304 = t474 * t337 + t393 * t528;
t303 = t473 * t331 + t476 * t406;
t302 = -t476 * t331 + t473 * t406;
t301 = t474 * t349 - t538;
t300 = t471 * t349 + t537;
t298 = -pkin(2) * t421 + t531 * t355;
t297 = -t472 * t345 + t475 * t346;
t296 = t475 * t345 + t472 * t346;
t293 = t473 * t308 + t476 * t404;
t292 = -t476 * t308 + t473 * t404;
t291 = t473 * t318 + t476 * t380;
t290 = -t476 * t318 + t473 * t380;
t287 = pkin(3) * t390 + pkin(6) * t289;
t286 = -pkin(7) * t322 - t517;
t285 = -t472 * t325 + t475 * t327;
t284 = -t472 * t324 + t475 * t326;
t283 = t475 * t325 + t472 * t327;
t282 = t475 * t324 + t472 * t326;
t281 = -t472 * t322 + t475 * t323;
t280 = t475 * t322 + t472 * t323;
t279 = -pkin(6) * t359 - t288;
t278 = -pkin(7) * t300 - t523;
t277 = t471 * t316 + t474 * t482;
t276 = -t474 * t311 - t471 * t315;
t275 = -t474 * t316 + t471 * t482;
t274 = -t471 * t311 + t474 * t315;
t273 = -t472 * t306 + t475 * t307;
t272 = -t472 * t304 + t475 * t305;
t271 = t475 * t306 + t472 * t307;
t270 = t475 * t304 + t472 * t305;
t269 = -pkin(3) * t380 + pkin(6) * t361 + t289;
t268 = -t472 * t300 + t475 * t301;
t267 = t475 * t300 + t472 * t301;
t263 = -t470 * t296 - t469 * t297;
t262 = pkin(2) * t318 + pkin(3) * t359 - qJ(2) * t320;
t261 = pkin(2) * t331 + pkin(3) * t365 - qJ(2) * t332 - t344;
t260 = -pkin(4) * t314 + pkin(7) * t323 - t523;
t259 = t470 * t289 - t526;
t258 = t469 * t289 + t524;
t257 = -pkin(4) * t311 + pkin(7) * t301 + t517;
t256 = t473 * t258 - t476 * t390;
t255 = -t476 * t258 - t473 * t390;
t254 = pkin(2) * t308 + pkin(3) * t357 - qJ(2) * t309 - t343;
t253 = -t470 * t283 - t469 * t285;
t252 = -t470 * t282 - t469 * t284;
t251 = pkin(2) * t406 - t470 * t321 + t531 * t332 - t469 * t342;
t250 = -t469 * t280 + t470 * t281;
t249 = t470 * t280 + t469 * t281;
t248 = pkin(2) * t404 + t531 * t309 - t470 * t317 - t469 * t335;
t247 = -t472 * t275 + t475 * t277;
t246 = -t472 * t274 + t475 * t276;
t245 = t475 * t275 + t472 * t277;
t244 = t475 * t274 + t472 * t276;
t243 = -t470 * t271 - t469 * t273;
t242 = -t470 * t270 - t469 * t272;
t241 = -t469 * t267 + t470 * t268;
t240 = t470 * t267 + t469 * t268;
t239 = t473 * t249 + t476 * t314;
t238 = -t476 * t249 + t473 * t314;
t235 = t473 * t240 + t476 * t311;
t234 = -t476 * t240 + t473 * t311;
t233 = pkin(4) * t328 + pkin(7) * t237;
t232 = -pkin(6) * t280 - t472 * t260 + t475 * t286;
t231 = pkin(2) * t380 - t470 * t269 - t469 * t279 + t531 * t320;
t230 = -pkin(7) * t275 - t236;
t229 = pkin(2) * t258 + pkin(3) * t288 - qJ(2) * t259;
t228 = -pkin(6) * t267 - t472 * t257 + t475 * t278;
t227 = -pkin(3) * t314 + pkin(6) * t281 + t475 * t260 + t472 * t286;
t226 = -pkin(4) * t336 + pkin(7) * t277 + t237;
t225 = -pkin(3) * t311 + pkin(6) * t268 + t475 * t257 + t472 * t278;
t224 = -t469 * t245 + t470 * t247;
t223 = t470 * t245 + t469 * t247;
t222 = -t470 * t244 - t469 * t246;
t221 = -pkin(2) * t390 + pkin(6) * t526 + t531 * t259 - t470 * t287;
t220 = t473 * t223 + t476 * t336;
t219 = -t476 * t223 + t473 * t336;
t218 = t475 * t237 - t521;
t217 = t472 * t237 + t515;
t216 = pkin(2) * t249 + pkin(3) * t280 + pkin(4) * t322 - qJ(2) * t250 - t266;
t215 = pkin(2) * t240 + pkin(3) * t267 + pkin(4) * t300 - qJ(2) * t241 - t265;
t214 = -pkin(6) * t245 - t472 * t226 + t475 * t230;
t213 = -pkin(3) * t336 + pkin(6) * t247 + t475 * t226 + t472 * t230;
t212 = -t469 * t217 + t470 * t218;
t211 = t470 * t217 + t469 * t218;
t210 = -pkin(6) * t217 - pkin(7) * t515 - t472 * t233;
t209 = t473 * t211 - t476 * t328;
t208 = -t476 * t211 - t473 * t328;
t207 = pkin(3) * t328 + pkin(6) * t218 - pkin(7) * t521 + t475 * t233;
t206 = pkin(2) * t314 - t470 * t227 - t469 * t232 + t531 * t250;
t205 = pkin(2) * t223 + pkin(3) * t245 + pkin(4) * t275 - qJ(2) * t224;
t204 = pkin(2) * t311 - t470 * t225 - t469 * t228 + t531 * t241;
t203 = pkin(2) * t211 + pkin(3) * t217 + pkin(4) * t236 - qJ(2) * t212;
t202 = pkin(2) * t336 - t470 * t213 - t469 * t214 + t531 * t224;
t201 = -pkin(2) * t328 - t470 * t207 - t469 * t210 + t531 * t212;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t452, -t451, 0, t419, 0, 0, 0, 0, 0, 0, 0, t452, t451, t387, 0, 0, 0, 0, 0, 0, t416, t417, t413, t340, 0, 0, 0, 0, 0, 0, t293, t303, t291, t256, 0, 0, 0, 0, 0, 0, t235, t239, t220, t209; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t451, -t452, 0, t418, 0, 0, 0, 0, 0, 0, 0, -t451, t452, t386, 0, 0, 0, 0, 0, 0, t414, t415, t412, t339, 0, 0, 0, 0, 0, 0, t292, t302, t290, t255, 0, 0, 0, 0, 0, 0, t234, t238, t219, t208; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t355, 0, 0, 0, 0, 0, 0, t309, t332, t320, t259, 0, 0, 0, 0, 0, 0, t241, t250, t224, t212; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t451, 0, -t452, 0, -t491, -t490, -t418, -pkin(5) * t418, 0, -t451, t452, 0, 0, 0, -t386, t491, t490, -pkin(5) * t386 + (-pkin(1) * t473 + qJ(2) * t476) * g(3), t424, -t473 * t448 - t476 * t450, t417, -t424, -t416, 0, -pkin(5) * t414 + t476 * t377 - t473 * t409, -pkin(5) * t415 + t476 * t376 - t473 * t408, -pkin(2) * t512 - pkin(5) * t412 - t473 * t348, -pkin(5) * t339 - t473 * t298 + t476 * t310, -t473 * t334 + t497, -t473 * t319 + t476 * t410, -t473 * t330 + t476 * t440, -t473 * t333 - t497, -t473 * t329 - t476 * t484, t476 * qJDD(4) - t473 * t347, -pkin(5) * t292 - t473 * t248 + t476 * t254, -pkin(5) * t302 - t473 * t251 + t476 * t261, -pkin(5) * t290 - t473 * t231 + t476 * t262, -pkin(5) * t255 - t473 * t221 + t476 * t229, -t473 * t243 + t498, -t473 * t222 + t476 * t353, -t473 * t252 + t476 * t316, -t473 * t242 - t498, -t473 * t253 + t476 * t482, -t473 * t263 + t476 * t464, -pkin(5) * t234 - t473 * t204 + t476 * t215, -pkin(5) * t238 - t473 * t206 + t476 * t216, -pkin(5) * t219 - t473 * t202 + t476 * t205, -pkin(5) * t208 - t473 * t201 + t476 * t203; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t452, 0, t451, 0, t490, -t491, t419, pkin(5) * t419, 0, -t452, -t451, 0, 0, 0, t387, -t490, t491, pkin(5) * t387 + (pkin(1) * t476 + qJ(2) * t473) * g(3), -t423, t476 * t448 - t473 * t450, t415, t423, -t414, 0, pkin(5) * t416 + t473 * t377 + t476 * t409, pkin(5) * t417 + t473 * t376 + t476 * t408, -pkin(2) * t518 + pkin(5) * t413 + t476 * t348, pkin(5) * t340 + t476 * t298 + t473 * t310, t476 * t334 + t499, t476 * t319 + t473 * t410, t476 * t330 + t473 * t440, t476 * t333 - t499, t476 * t329 - t473 * t484, t473 * qJDD(4) + t476 * t347, pkin(5) * t293 + t476 * t248 + t473 * t254, pkin(5) * t303 + t476 * t251 + t473 * t261, pkin(5) * t291 + t476 * t231 + t473 * t262, pkin(5) * t256 + t476 * t221 + t473 * t229, t476 * t243 + t500, t476 * t222 + t473 * t353, t476 * t252 + t473 * t316, t476 * t242 - t500, t476 * t253 + t473 * t482, t476 * t263 + t473 * t464, pkin(5) * t235 + t476 * t204 + t473 * t215, pkin(5) * t239 + t476 * t206 + t473 * t216, pkin(5) * t220 + t476 * t202 + t473 * t205, pkin(5) * t209 + t476 * t201 + t473 * t203; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t453, t454, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t489 - 0.2e1 * t530, -t454 + t461 + 0.2e1 * t468, pkin(1) * t432 + qJ(2) * t430, t466 * qJDD(1), -0.2e1 * t469 * t503, 0, t465 * qJDD(1), 0, 0, -t531 * t445 + t493 * t469, -t531 * t444 + t493 * t470, -qJ(2) * t536 - t531 * t447 - t354, -qJ(2) * t421 + t531 * t354, -t469 * t371 + t470 * t372, -t469 * t360 + t470 * t362, -t469 * t364 + t470 * t367, -t469 * t369 + t470 * t370, -t469 * t363 + t470 * t366, -t469 * t388 + t470 * t389, qJ(2) * t404 + t531 * t308 - t469 * t317 + t470 * t335, qJ(2) * t406 - t469 * t321 + t531 * t331 + t470 * t342, qJ(2) * t380 - t469 * t269 + t470 * t279 + t531 * t318, -pkin(6) * t524 - qJ(2) * t390 + t531 * t258 - t469 * t287, -t469 * t271 + t470 * t273, -t469 * t244 + t470 * t246, -t469 * t282 + t470 * t284, -t469 * t270 + t470 * t272, -t469 * t283 + t470 * t285, -t469 * t296 + t470 * t297, qJ(2) * t311 - t469 * t225 + t470 * t228 + t531 * t240, qJ(2) * t314 - t469 * t227 + t470 * t232 + t531 * t249, qJ(2) * t336 - t469 * t213 + t470 * t214 + t531 * t223, -qJ(2) * t328 - t469 * t207 + t470 * t210 + t531 * t211;];
tauB_reg = t1;
