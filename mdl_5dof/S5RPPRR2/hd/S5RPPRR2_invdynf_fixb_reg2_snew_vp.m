% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPPRR2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 17:40
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPPRR2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR2_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR2_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR2_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRR2_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 17:40:28
% EndTime: 2019-12-05 17:40:30
% DurationCPUTime: 2.44s
% Computational Cost: add. (8289->198), mult. (18995->233), div. (0->0), fcn. (13495->8), ass. (0->133)
t1076 = sin(qJ(1));
t1079 = cos(qJ(1));
t1055 = t1076 * g(1) - t1079 * g(2);
t1081 = qJD(1) ^ 2;
t1086 = -t1081 * qJ(2) + qJDD(2) - t1055;
t1106 = -qJ(3) - pkin(1);
t1107 = -2 * qJD(1);
t1114 = (qJD(3) * t1107) + t1106 * qJDD(1) + t1086;
t1072 = sin(pkin(8));
t1068 = t1072 ^ 2;
t1073 = cos(pkin(8));
t1069 = t1073 ^ 2;
t1097 = t1068 + t1069;
t1113 = t1097 * t1081;
t1075 = sin(qJ(4));
t1078 = cos(qJ(4));
t1087 = t1072 * t1078 + t1073 * t1075;
t1015 = t1087 * qJDD(1);
t1046 = t1087 * qJD(1);
t1048 = (-t1072 * t1075 + t1073 * t1078) * qJD(1);
t1074 = sin(qJ(5));
t1077 = cos(qJ(5));
t1022 = t1077 * t1046 + t1074 * t1048;
t1111 = t1022 ^ 2;
t1024 = -t1074 * t1046 + t1077 * t1048;
t1110 = t1024 ^ 2;
t1044 = t1046 ^ 2;
t1109 = t1048 ^ 2;
t1070 = qJD(4) + qJD(5);
t1108 = t1070 ^ 2;
t1105 = t1024 * t1022;
t1104 = t1046 * qJD(4);
t1103 = t1048 * qJD(4);
t1102 = t1048 * t1046;
t1101 = t1068 * t1081;
t1100 = t1072 * t1081;
t1099 = qJD(5) - t1070;
t1098 = qJD(5) + t1070;
t1027 = t1072 * g(3) + t1114 * t1073;
t1017 = (-pkin(3) * t1100 - qJDD(1) * pkin(6)) * t1073 + t1027;
t1028 = -t1073 * g(3) + t1114 * t1072;
t1062 = t1072 * qJDD(1);
t1020 = -pkin(3) * t1101 - pkin(6) * t1062 + t1028;
t1001 = t1075 * t1017 + t1078 * t1020;
t1063 = t1073 * qJDD(1);
t1096 = t1076 * qJDD(1);
t1095 = t1079 * qJDD(1);
t1094 = -qJDD(4) - qJDD(5);
t1092 = t1073 * t1100;
t1000 = t1078 * t1017 - t1075 * t1020;
t1033 = -t1015 - t1103;
t1089 = -t1075 * t1062 + t1078 * t1063;
t1035 = t1089 - t1104;
t1091 = t1077 * t1033 - t1074 * t1035;
t1030 = qJDD(4) - t1102;
t1090 = qJD(4) * pkin(4) - t1048 * pkin(7);
t1056 = -t1079 * g(1) - t1076 * g(2);
t1088 = -t1074 * t1033 - t1077 * t1035;
t1085 = -qJDD(1) * qJ(2) + (qJD(2) * t1107) - t1056;
t1084 = -qJDD(3) + t1085;
t1021 = -pkin(3) * t1062 + (t1097 * pkin(6) - t1106) * t1081 + t1084;
t1080 = qJD(4) ^ 2;
t1054 = t1079 * t1081 + t1096;
t1053 = -t1076 * t1081 + t1095;
t1051 = t1097 * qJDD(1);
t1050 = t1072 * t1113;
t1049 = t1073 * t1113;
t1043 = qJDD(1) * pkin(1) - t1086;
t1042 = t1081 * pkin(1) + t1085;
t1040 = -t1080 - t1109;
t1038 = -t1106 * t1081 + t1084;
t1034 = t1089 - 0.2e1 * t1104;
t1032 = 0.2e1 * t1103 + t1015;
t1031 = -qJDD(4) - t1102;
t1029 = -t1080 - t1044;
t1019 = -t1108 - t1110;
t1018 = -t1044 - t1109;
t1012 = t1078 * t1031 - t1075 * t1040;
t1011 = t1075 * t1031 + t1078 * t1040;
t1010 = -t1078 * t1015 + t1075 * t1089;
t1009 = -t1075 * t1015 - t1078 * t1089;
t1008 = t1078 * t1029 - t1075 * t1030;
t1007 = t1075 * t1029 + t1078 * t1030;
t1006 = -t1072 * t1027 + t1073 * t1028;
t1005 = t1073 * t1027 + t1072 * t1028;
t1004 = t1094 - t1105;
t1003 = -t1094 - t1105;
t1002 = -t1108 - t1111;
t999 = -t1110 - t1111;
t998 = -t1072 * t1011 + t1073 * t1012;
t997 = t1073 * t1011 + t1072 * t1012;
t996 = t1033 * pkin(4) + t1044 * pkin(7) - t1048 * t1090 + t1021;
t995 = t1077 * t1004 - t1074 * t1019;
t994 = t1074 * t1004 + t1077 * t1019;
t993 = -t1072 * t1009 + t1073 * t1010;
t992 = t1073 * t1009 + t1072 * t1010;
t991 = t1099 * t1022 + t1088;
t990 = -t1098 * t1022 - t1088;
t989 = -t1099 * t1024 + t1091;
t988 = t1098 * t1024 - t1091;
t987 = -t1072 * t1007 + t1073 * t1008;
t986 = t1073 * t1007 + t1072 * t1008;
t985 = t1077 * t1002 - t1074 * t1003;
t984 = t1074 * t1002 + t1077 * t1003;
t983 = -t1044 * pkin(4) + t1033 * pkin(7) - qJD(4) * t1090 + t1001;
t982 = (-t1035 - t1104) * pkin(7) + t1030 * pkin(4) + t1000;
t981 = -t1075 * t1000 + t1078 * t1001;
t980 = t1078 * t1000 + t1075 * t1001;
t979 = -t1075 * t994 + t1078 * t995;
t978 = t1075 * t995 + t1078 * t994;
t977 = -t1074 * t991 + t1077 * t989;
t976 = t1074 * t989 + t1077 * t991;
t975 = -t1075 * t984 + t1078 * t985;
t974 = t1075 * t985 + t1078 * t984;
t973 = t1074 * t982 + t1077 * t983;
t972 = -t1074 * t983 + t1077 * t982;
t971 = -t1072 * t980 + t1073 * t981;
t970 = t1072 * t981 + t1073 * t980;
t969 = -t1072 * t978 + t1073 * t979;
t968 = t1072 * t979 + t1073 * t978;
t967 = -t1075 * t976 + t1078 * t977;
t966 = t1075 * t977 + t1078 * t976;
t965 = -t1072 * t974 + t1073 * t975;
t964 = t1072 * t975 + t1073 * t974;
t963 = -t1074 * t972 + t1077 * t973;
t962 = t1074 * t973 + t1077 * t972;
t961 = -t1072 * t966 + t1073 * t967;
t960 = t1072 * t967 + t1073 * t966;
t959 = -t1075 * t962 + t1078 * t963;
t958 = t1075 * t963 + t1078 * t962;
t957 = -t1072 * t958 + t1073 * t959;
t956 = t1072 * t959 + t1073 * t958;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1054, -t1053, 0, -t1076 * t1055 + t1079 * t1056, 0, 0, 0, 0, 0, 0, 0, t1054, t1053, -t1079 * t1042 - t1076 * t1043, 0, 0, 0, 0, 0, 0, -t1076 * t1050 + t1072 * t1095, -t1076 * t1049 + t1073 * t1095, -t1076 * t1051 - t1079 * t1113, t1076 * t1005 - t1079 * t1038, 0, 0, 0, 0, 0, 0, t1079 * t1032 + t1076 * t986, t1079 * t1034 + t1076 * t997, t1079 * t1018 + t1076 * t992, -t1079 * t1021 + t1076 * t970, 0, 0, 0, 0, 0, 0, t1076 * t964 + t1079 * t988, t1076 * t968 + t1079 * t990, t1076 * t960 + t1079 * t999, t1076 * t956 - t1079 * t996; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1053, -t1054, 0, t1079 * t1055 + t1076 * t1056, 0, 0, 0, 0, 0, 0, 0, -t1053, t1054, -t1076 * t1042 + t1079 * t1043, 0, 0, 0, 0, 0, 0, t1079 * t1050 + t1072 * t1096, t1079 * t1049 + t1073 * t1096, t1079 * t1051 - t1076 * t1113, -t1079 * t1005 - t1076 * t1038, 0, 0, 0, 0, 0, 0, t1076 * t1032 - t1079 * t986, t1076 * t1034 - t1079 * t997, t1076 * t1018 - t1079 * t992, -t1076 * t1021 - t1079 * t970, 0, 0, 0, 0, 0, 0, t1076 * t988 - t1079 * t964, t1076 * t990 - t1079 * t968, t1076 * t999 - t1079 * t960, -t1076 * t996 - t1079 * t956; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1006, 0, 0, 0, 0, 0, 0, t987, t998, t993, t971, 0, 0, 0, 0, 0, 0, t965, t969, t961, t957; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1081, -qJDD(1), 0, t1056, 0, 0, 0, 0, 0, 0, 0, t1081, qJDD(1), -t1042, 0, 0, 0, 0, 0, 0, t1062, t1063, -t1113, -t1038, 0, 0, 0, 0, 0, 0, t1032, t1034, t1018, -t1021, 0, 0, 0, 0, 0, 0, t988, t990, t999, -t996; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1081, 0, t1055, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), t1081, t1043, 0, 0, 0, 0, 0, 0, t1050, t1049, t1051, -t1005, 0, 0, 0, 0, 0, 0, -t986, -t997, -t992, -t970, 0, 0, 0, 0, 0, 0, -t964, -t968, -t960, -t956; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1006, 0, 0, 0, 0, 0, 0, t987, t998, t993, t971, 0, 0, 0, 0, 0, 0, t965, t969, t961, t957; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1006, 0, 0, 0, 0, 0, 0, t987, t998, t993, t971, 0, 0, 0, 0, 0, 0, t965, t969, t961, t957; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1081, -qJDD(1), t1042, 0, 0, 0, 0, 0, 0, -t1062, -t1063, t1113, t1038, 0, 0, 0, 0, 0, 0, -t1032, -t1034, -t1018, t1021, 0, 0, 0, 0, 0, 0, -t988, -t990, -t999, t996; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1081, -t1043, 0, 0, 0, 0, 0, 0, -t1050, -t1049, -t1051, t1005, 0, 0, 0, 0, 0, 0, t986, t997, t992, t970, 0, 0, 0, 0, 0, 0, t964, t968, t960, t956; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1101, -t1092, -t1062, t1028, 0, 0, 0, 0, 0, 0, t1008, t1012, t1010, t981, 0, 0, 0, 0, 0, 0, t975, t979, t967, t959; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1092, -t1069 * t1081, -t1063, t1027, 0, 0, 0, 0, 0, 0, t1007, t1011, t1009, t980, 0, 0, 0, 0, 0, 0, t974, t978, t966, t958; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1062, t1063, -t1113, -t1038, 0, 0, 0, 0, 0, 0, t1032, t1034, t1018, -t1021, 0, 0, 0, 0, 0, 0, t988, t990, t999, -t996; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1029, t1031, -t1015, t1001, 0, 0, 0, 0, 0, 0, t985, t995, t977, t963; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1030, t1040, -t1089, t1000, 0, 0, 0, 0, 0, 0, t984, t994, t976, t962; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1032, t1034, t1018, -t1021, 0, 0, 0, 0, 0, 0, t988, t990, t999, -t996; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1002, t1004, t989, t973; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1003, t1019, t991, t972; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t988, t990, t999, -t996;];
f_new_reg = t1;
