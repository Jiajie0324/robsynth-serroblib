% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRRRP1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:46
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRRRP1_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP1_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP1_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP1_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP1_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRRP1_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:46:23
% EndTime: 2019-12-05 18:46:37
% DurationCPUTime: 14.83s
% Computational Cost: add. (96604->626), mult. (215573->797), div. (0->0), fcn. (154815->8), ass. (0->436)
t1148 = sin(qJ(3));
t1152 = cos(qJ(3));
t1153 = cos(qJ(2));
t1227 = qJD(1) * t1153;
t1149 = sin(qJ(2));
t1228 = qJD(1) * t1149;
t1103 = t1148 * t1228 - t1152 * t1227;
t1105 = (t1148 * t1153 + t1149 * t1152) * qJD(1);
t1147 = sin(qJ(4));
t1151 = cos(qJ(4));
t1065 = t1151 * t1103 + t1147 * t1105;
t1067 = -t1147 * t1103 + t1151 * t1105;
t1010 = t1067 * t1065;
t1143 = qJDD(2) + qJDD(3);
t1136 = qJDD(4) + t1143;
t1267 = t1010 - t1136;
t1273 = pkin(4) * t1267;
t1144 = qJD(2) + qJD(3);
t1137 = qJD(4) + t1144;
t1055 = t1137 * t1065;
t1134 = qJD(2) * t1227;
t1202 = t1149 * qJDD(1);
t1114 = t1134 + t1202;
t1138 = t1153 * qJDD(1);
t1190 = qJD(2) * t1228;
t1115 = t1138 - t1190;
t1044 = -t1103 * qJD(3) + t1152 * t1114 + t1148 * t1115;
t1095 = t1144 * t1103;
t1021 = t1044 + t1095;
t1073 = t1105 * t1103;
t1262 = -t1073 + t1143;
t1156 = qJD(1) ^ 2;
t1211 = t1149 * t1156;
t1150 = sin(qJ(1));
t1154 = cos(qJ(1));
t1125 = t1154 * g(1) + t1150 * g(2);
t1107 = -t1156 * pkin(1) + qJDD(1) * pkin(6) - t1125;
t1214 = t1149 * t1107;
t1229 = qJD(1) * qJD(2);
t1033 = qJDD(2) * pkin(2) - t1114 * pkin(7) - t1214 + (pkin(2) * t1211 + pkin(7) * t1229 - g(3)) * t1153;
t1089 = -t1149 * g(3) + t1153 * t1107;
t1146 = t1153 ^ 2;
t1140 = t1146 * t1156;
t1170 = qJD(2) * pkin(2) - pkin(7) * t1228;
t1037 = -pkin(2) * t1140 + t1115 * pkin(7) - qJD(2) * t1170 + t1089;
t993 = -t1152 * t1033 + t1148 * t1037;
t936 = t1262 * pkin(3) - t1021 * pkin(8) - t993;
t1101 = t1103 ^ 2;
t1183 = t1148 * t1114 - t1152 * t1115;
t1167 = t1105 * qJD(3) + t1183;
t1175 = t1144 * pkin(3) - t1105 * pkin(8);
t994 = t1148 * t1033 + t1152 * t1037;
t938 = -t1101 * pkin(3) - pkin(8) * t1167 - t1144 * t1175 + t994;
t890 = t1147 * t938 - t1151 * t936;
t1161 = qJ(5) * t1055 + 0.2e1 * qJD(5) * t1067 + t1273 + t890;
t969 = -t1065 * qJD(4) + t1151 * t1044 - t1147 * t1167;
t862 = t969 * qJ(5) + t1161;
t1160 = -t862 - t1273;
t1063 = t1065 ^ 2;
t1135 = t1137 ^ 2;
t1001 = -t1135 - t1063;
t1209 = t1151 * t1267;
t958 = t1147 * t1001 - t1209;
t957 = pkin(3) * t958;
t1159 = t1160 + t957;
t1218 = t1147 * t1267;
t959 = t1151 * t1001 + t1218;
t913 = t1148 * t959 + t1152 * t958;
t912 = pkin(2) * t913;
t1272 = t1159 + t912;
t1064 = t1067 ^ 2;
t1041 = -t1064 - t1135;
t1047 = t1137 * pkin(4) - t1067 * qJ(5);
t1184 = -t1147 * t1044 - t1151 * t1167;
t1166 = t1067 * qJD(4) - t1184;
t891 = t1147 * t936 + t1151 * t938;
t868 = -t1063 * pkin(4) - qJ(5) * t1166 - 0.2e1 * qJD(5) * t1065 - t1137 * t1047 + t891;
t1164 = pkin(4) * t1041 - t868;
t1003 = t1010 + t1136;
t1219 = t1147 * t1003;
t978 = t1151 * t1041 - t1219;
t977 = pkin(3) * t978;
t1163 = t977 + t1164;
t1210 = t1151 * t1003;
t979 = -t1147 * t1041 - t1210;
t925 = t1148 * t979 + t1152 * t978;
t924 = pkin(2) * t925;
t1271 = t924 + t1163;
t1124 = t1150 * g(1) - t1154 * g(2);
t1169 = qJDD(1) * pkin(1) + t1124;
t1046 = t1115 * pkin(2) - t1170 * t1228 + t1169 + (t1146 * pkin(7) + pkin(6)) * t1156;
t966 = -pkin(3) * t1167 + t1101 * pkin(8) - t1105 * t1175 + t1046;
t1157 = -t1067 * t1047 - qJDD(5) + t966;
t1270 = t1166 * pkin(4) - t1157;
t1269 = t1148 * t1262;
t1268 = t1152 * t1262;
t1266 = -t1055 + t969;
t1263 = t1044 - t1095;
t1017 = (qJD(3) - t1144) * t1105 + t1183;
t1102 = t1105 ^ 2;
t1142 = t1144 ^ 2;
t914 = -t1148 * t958 + t1152 * t959;
t870 = t1149 * t914 + t1153 * t913;
t1261 = pkin(1) * t870;
t926 = -t1148 * t978 + t1152 * t979;
t874 = t1149 * t926 + t1153 * t925;
t1260 = pkin(1) * t874;
t932 = t1148 * t994 - t1152 * t993;
t1259 = pkin(2) * t932;
t971 = -t1017 * t1148 - t1152 * t1021;
t1258 = pkin(2) * t971;
t952 = (-qJD(4) + t1137) * t1067 + t1184;
t954 = t1055 + t969;
t907 = t1147 * t952 - t1151 * t954;
t909 = t1147 * t954 + t1151 * t952;
t858 = t1148 * t909 + t1152 * t907;
t860 = -t1148 * t907 + t1152 * t909;
t817 = -t1149 * t858 + t1153 * t860;
t992 = -t1063 - t1064;
t1257 = pkin(5) * (t1150 * t817 - t1154 * t992);
t871 = -t1149 * t913 + t1153 * t914;
t1056 = t1137 * t1067;
t950 = t1056 + t1166;
t1256 = pkin(5) * (t1150 * t871 - t1154 * t950);
t875 = -t1149 * t925 + t1153 * t926;
t1255 = pkin(5) * (t1150 * t875 - t1154 * t1266);
t815 = t1149 * t860 + t1153 * t858;
t1254 = pkin(6) * t815;
t1253 = pkin(6) * t870;
t1252 = pkin(6) * t874;
t1251 = pkin(7) * t858;
t1250 = pkin(7) * t913;
t1249 = pkin(7) * t925;
t1248 = pkin(8) * t907;
t1247 = pkin(8) * t958;
t1246 = pkin(8) * t978;
t1243 = -pkin(1) * t992 + pkin(6) * t817;
t856 = pkin(2) * t858;
t904 = pkin(3) * t907;
t1242 = t856 + t904;
t1233 = t1151 * t862;
t819 = t1147 * t868 - t1233;
t861 = pkin(4) * t862;
t1241 = pkin(3) * t819 - t861;
t1240 = -pkin(1) * t950 + pkin(6) * t871;
t1239 = -pkin(1) * t1266 + pkin(6) * t875;
t947 = pkin(4) * t954;
t1238 = -t947 + t904;
t1237 = t1147 * t862;
t1236 = t1147 * t966;
t843 = t1147 * t891 - t1151 * t890;
t1235 = t1148 * t843;
t1234 = t1149 * t932;
t1232 = t1151 * t966;
t1231 = t1152 * t843;
t1230 = t1153 * t932;
t1224 = t1137 * t1147;
t1223 = t1137 * t1151;
t1222 = t1144 * t1105;
t1221 = t1144 * t1148;
t1220 = t1144 * t1152;
t1217 = t1148 * t1046;
t1070 = t1073 + t1143;
t1216 = t1148 * t1070;
t1106 = t1156 * pkin(6) + t1169;
t1215 = t1149 * t1106;
t1131 = t1153 * t1211;
t1122 = qJDD(2) + t1131;
t1213 = t1149 * t1122;
t1123 = qJDD(2) - t1131;
t1212 = t1149 * t1123;
t1208 = t1152 * t1046;
t1207 = t1152 * t1070;
t1206 = t1153 * t1106;
t1205 = t1153 * t1123;
t1145 = t1149 ^ 2;
t1203 = t1145 + t1146;
t1201 = t1150 * qJDD(1);
t1200 = t1154 * qJDD(1);
t1199 = t977 - t891;
t844 = t1147 * t890 + t1151 * t891;
t805 = t1148 * t844 + t1231;
t842 = pkin(3) * t843;
t1197 = pkin(2) * t805 + t842;
t1196 = -pkin(2) * t992 + pkin(7) * t860;
t1195 = -pkin(2) * t950 + pkin(7) * t914;
t1194 = -pkin(2) * t1266 + pkin(7) * t926;
t1193 = -pkin(3) * t992 + pkin(8) * t909;
t1192 = -pkin(3) * t950 + pkin(8) * t959;
t1191 = -pkin(3) * t1266 + pkin(8) * t979;
t1189 = t1150 * t1010;
t1188 = t1150 * t1073;
t1187 = t1154 * t1010;
t1186 = t1154 * t1073;
t933 = t1148 * t993 + t1152 * t994;
t1185 = t924 + t1199;
t1088 = t1153 * g(3) + t1214;
t1036 = t1149 * t1088 + t1153 * t1089;
t1182 = -t1150 * t1124 - t1154 * t1125;
t797 = -pkin(1) * t815 - t1242;
t820 = t1151 * t868 + t1237;
t793 = t1148 * t820 + t1152 * t819;
t1181 = pkin(2) * t793 + t1241;
t1180 = t1150 * t1131;
t1179 = t1154 * t1131;
t1087 = -t1102 - t1142;
t1022 = t1152 * t1087 - t1216;
t1178 = pkin(2) * t1022 - t994;
t1177 = t890 - t957;
t1119 = -t1150 * t1156 + t1200;
t1174 = -pkin(5) * t1119 - t1150 * g(3);
t1035 = t1153 * t1088 - t1149 * t1089;
t1172 = t1154 * t1124 - t1150 * t1125;
t1171 = t1177 - t912;
t1068 = -t1142 - t1101;
t1005 = t1148 * t1068 + t1268;
t1168 = pkin(2) * t1005 - t993;
t1155 = qJD(2) ^ 2;
t1139 = t1145 * t1156;
t1129 = -t1140 - t1155;
t1128 = t1140 - t1155;
t1127 = -t1139 - t1155;
t1126 = -t1139 + t1155;
t1121 = t1140 - t1139;
t1120 = t1139 + t1140;
t1118 = t1154 * t1156 + t1201;
t1117 = t1203 * qJDD(1);
t1116 = t1138 - 0.2e1 * t1190;
t1113 = 0.2e1 * t1134 + t1202;
t1111 = t1153 * t1122;
t1110 = t1203 * t1229;
t1100 = -pkin(5) * t1118 + t1154 * g(3);
t1093 = -t1102 + t1142;
t1092 = t1101 - t1142;
t1091 = t1153 * t1114 - t1145 * t1229;
t1090 = -t1149 * t1115 - t1146 * t1229;
t1086 = -t1149 * t1127 - t1205;
t1085 = -t1149 * t1126 + t1111;
t1084 = t1153 * t1129 - t1213;
t1083 = t1153 * t1128 - t1212;
t1082 = t1153 * t1127 - t1212;
t1081 = t1153 * t1126 + t1213;
t1080 = t1149 * t1129 + t1111;
t1079 = t1149 * t1128 + t1205;
t1078 = (t1114 + t1134) * t1149;
t1077 = (t1115 - t1190) * t1153;
t1075 = -t1149 * t1113 + t1153 * t1116;
t1074 = t1153 * t1113 + t1149 * t1116;
t1072 = t1102 - t1101;
t1053 = -t1064 + t1135;
t1052 = t1063 - t1135;
t1051 = (-t1103 * t1152 + t1105 * t1148) * t1144;
t1050 = (-t1103 * t1148 - t1105 * t1152) * t1144;
t1049 = -pkin(6) * t1082 - t1206;
t1048 = -pkin(6) * t1080 - t1215;
t1045 = -t1101 - t1102;
t1043 = -pkin(1) * t1082 + t1089;
t1042 = -pkin(1) * t1080 + t1088;
t1029 = pkin(1) * t1116 + pkin(6) * t1084 + t1206;
t1028 = -pkin(1) * t1113 + pkin(6) * t1086 - t1215;
t1027 = t1152 * t1092 - t1216;
t1026 = -t1148 * t1093 + t1268;
t1025 = t1148 * t1092 + t1207;
t1024 = t1152 * t1093 + t1269;
t1023 = -t1148 * t1087 - t1207;
t1016 = (qJD(3) + t1144) * t1105 + t1183;
t1015 = pkin(1) * t1106 + pkin(6) * t1036;
t1014 = t1152 * t1044 - t1105 * t1221;
t1013 = t1148 * t1044 + t1105 * t1220;
t1012 = t1103 * t1220 + t1148 * t1167;
t1011 = t1103 * t1221 - t1152 * t1167;
t1008 = pkin(1) * t1120 + pkin(6) * t1117 + t1036;
t1007 = t1064 - t1063;
t1006 = t1152 * t1068 - t1269;
t998 = (-t1065 * t1151 + t1067 * t1147) * t1137;
t997 = (-t1065 * t1147 - t1067 * t1151) * t1137;
t996 = -t1149 * t1050 + t1153 * t1051;
t995 = t1153 * t1050 + t1149 * t1051;
t989 = -pkin(7) * t1022 - t1208;
t988 = -pkin(7) * t1005 - t1217;
t987 = -t1149 * t1025 + t1153 * t1027;
t986 = -t1149 * t1024 + t1153 * t1026;
t985 = t1153 * t1025 + t1149 * t1027;
t984 = t1153 * t1024 + t1149 * t1026;
t983 = t1151 * t1052 - t1219;
t982 = -t1147 * t1053 - t1209;
t981 = t1147 * t1052 + t1210;
t980 = t1151 * t1053 - t1218;
t975 = -t1149 * t1022 + t1153 * t1023;
t974 = t1153 * t1022 + t1149 * t1023;
t973 = -t1017 * t1152 + t1148 * t1021;
t972 = -t1152 * t1016 - t1148 * t1263;
t970 = -t1148 * t1016 + t1152 * t1263;
t965 = -t1149 * t1013 + t1153 * t1014;
t964 = -t1149 * t1011 + t1153 * t1012;
t963 = t1153 * t1013 + t1149 * t1014;
t962 = t1153 * t1011 + t1149 * t1012;
t961 = -t1149 * t1005 + t1153 * t1006;
t960 = t1153 * t1005 + t1149 * t1006;
t951 = -t1056 + t1166;
t946 = -pkin(2) * t1263 + pkin(7) * t1023 - t1217;
t945 = -t1148 * t997 + t1152 * t998;
t944 = t1148 * t998 + t1152 * t997;
t943 = -t1067 * t1224 + t1151 * t969;
t942 = t1067 * t1223 + t1147 * t969;
t941 = t1065 * t1223 + t1147 * t1166;
t940 = t1065 * t1224 - t1151 * t1166;
t939 = -pkin(2) * t1016 + pkin(7) * t1006 + t1208;
t931 = -pkin(4) * t1266 - qJ(5) * t1003;
t930 = -t1148 * t981 + t1152 * t983;
t929 = -t1148 * t980 + t1152 * t982;
t928 = t1148 * t983 + t1152 * t981;
t927 = t1148 * t982 + t1152 * t980;
t922 = pkin(2) * t1046 + pkin(7) * t933;
t921 = -t1149 * t971 + t1153 * t973;
t920 = -t1149 * t970 + t1153 * t972;
t919 = t1149 * t973 + t1153 * t971;
t918 = t1149 * t972 + t1153 * t970;
t917 = -t1232 - t1246;
t916 = -pkin(1) * t974 - t1178;
t915 = -t1236 - t1247;
t910 = -pkin(1) * t960 - t1168;
t908 = -t1147 * t1266 - t1151 * t950;
t906 = -t1147 * t950 + t1151 * t1266;
t905 = -pkin(7) * t971 - t932;
t902 = -t1149 * t944 + t1153 * t945;
t901 = t1149 * t945 + t1153 * t944;
t900 = -t1148 * t942 + t1152 * t943;
t899 = -t1148 * t940 + t1152 * t941;
t898 = t1148 * t943 + t1152 * t942;
t897 = t1148 * t941 + t1152 * t940;
t896 = t1150 * t1136 + t1154 * t902;
t895 = -t1154 * t1136 + t1150 * t902;
t894 = t1063 * qJ(5) - t1270;
t893 = -pkin(2) * t1045 + pkin(7) * t973 + t933;
t892 = -pkin(1) * t919 - t1258;
t888 = -pkin(6) * t974 - t1149 * t946 + t1153 * t989;
t887 = (-t1063 - t1041) * qJ(5) + t1270;
t886 = t1153 * t933 - t1234;
t885 = t1149 * t933 + t1230;
t884 = t1191 - t1236;
t883 = -pkin(6) * t960 - t1149 * t939 + t1153 * t988;
t882 = t1192 + t1232;
t881 = -pkin(1) * t1263 + pkin(6) * t975 + t1149 * t989 + t1153 * t946;
t880 = -t1149 * t928 + t1153 * t930;
t879 = -t1149 * t927 + t1153 * t929;
t878 = t1149 * t930 + t1153 * t928;
t877 = t1149 * t929 + t1153 * t927;
t876 = -pkin(1) * t1016 + pkin(6) * t961 + t1149 * t988 + t1153 * t939;
t872 = t1157 + (-t1166 - t950) * pkin(4) + (t1063 + t1001) * qJ(5);
t867 = -pkin(1) * t885 - t1259;
t866 = -t1150 * t951 + t1154 * t880;
t865 = t1150 * t954 + t1154 * t879;
t864 = t1150 * t880 + t1154 * t951;
t863 = t1150 * t879 - t1154 * t954;
t859 = -t1148 * t906 + t1152 * t908;
t857 = t1148 * t908 + t1152 * t906;
t853 = pkin(5) * (t1150 * t1266 + t1154 * t875);
t852 = -t1149 * t898 + t1153 * t900;
t851 = -t1149 * t897 + t1153 * t899;
t850 = t1149 * t900 + t1153 * t898;
t849 = t1149 * t899 + t1153 * t897;
t848 = t1154 * t852 + t1189;
t847 = t1154 * t851 - t1189;
t846 = t1150 * t852 - t1187;
t845 = t1150 * t851 + t1187;
t841 = -t1147 * t931 + t1151 * t887 - t1246;
t839 = pkin(5) * (t1150 * t950 + t1154 * t871);
t838 = (t954 + t969) * qJ(5) + t1161;
t837 = qJ(5) * t1209 - t1147 * t872 - t1247;
t836 = -pkin(6) * t885 - pkin(7) * t1230 - t1149 * t922;
t835 = -pkin(4) * t992 + qJ(5) * t952 + t868;
t834 = pkin(3) * t966 + pkin(8) * t844;
t833 = pkin(1) * t1046 + pkin(6) * t886 - pkin(7) * t1234 + t1153 * t922;
t832 = -t1148 * t884 + t1152 * t917 - t1249;
t831 = t1147 * t887 + t1151 * t931 + t1191;
t830 = -pkin(6) * t919 - t1149 * t893 + t1153 * t905;
t829 = pkin(4) * t894 + qJ(5) * t868;
t828 = qJ(5) * t1218 + t1151 * t872 + t1192;
t827 = -pkin(1) * t1045 + pkin(6) * t921 + t1149 * t905 + t1153 * t893;
t826 = -t1148 * t882 + t1152 * t915 - t1250;
t825 = t1148 * t917 + t1152 * t884 + t1194;
t824 = -t843 - t1248;
t823 = t1193 + t844;
t822 = t1148 * t915 + t1152 * t882 + t1195;
t821 = -t1185 - t1260;
t816 = -t1149 * t857 + t1153 * t859;
t814 = t1149 * t859 + t1153 * t857;
t812 = t1150 * t1007 + t1154 * t816;
t811 = -t1154 * t1007 + t1150 * t816;
t809 = pkin(5) * (t1150 * t992 + t1154 * t817);
t808 = t1171 - t1261;
t807 = -t1260 - t1271;
t806 = t1152 * t844 - t1235;
t804 = -t1261 - t1272;
t803 = -t1148 * t831 + t1152 * t841 - t1249;
t802 = -t1147 * t835 + t1151 * t838 - t1248;
t801 = t1148 * t841 + t1152 * t831 + t1194;
t800 = t1147 * t838 + t1151 * t835 + t1193;
t799 = -t1148 * t828 + t1152 * t837 - t1250;
t798 = t1148 * t837 + t1152 * t828 + t1195;
t796 = t797 + t947;
t795 = -t1149 * t825 + t1153 * t832 - t1252;
t794 = -t1148 * t819 + t1152 * t820;
t792 = t1149 * t832 + t1153 * t825 + t1239;
t791 = -t1149 * t822 + t1153 * t826 - t1253;
t790 = -pkin(8) * t819 + qJ(5) * t1233 - t1147 * t829;
t789 = -t1148 * t823 + t1152 * t824 - t1251;
t788 = t1149 * t826 + t1153 * t822 + t1240;
t787 = t1148 * t824 + t1152 * t823 + t1196;
t786 = -t1149 * t805 + t1153 * t806;
t785 = t1149 * t806 + t1153 * t805;
t784 = -pkin(7) * t805 - pkin(8) * t1231 - t1148 * t834;
t783 = pkin(3) * t894 + pkin(8) * t820 + qJ(5) * t1237 + t1151 * t829;
t782 = pkin(2) * t966 + pkin(7) * t806 - pkin(8) * t1235 + t1152 * t834;
t781 = -t1149 * t801 + t1153 * t803 - t1252;
t780 = t1149 * t803 + t1153 * t801 + t1239;
t779 = -t1148 * t800 + t1152 * t802 - t1251;
t778 = t1148 * t802 + t1152 * t800 + t1196;
t777 = -t1149 * t798 + t1153 * t799 - t1253;
t776 = -t1149 * t793 + t1153 * t794;
t775 = t1149 * t794 + t1153 * t793;
t774 = t1149 * t799 + t1153 * t798 + t1240;
t773 = -pkin(1) * t785 - t1197;
t772 = -t1149 * t787 + t1153 * t789 - t1254;
t771 = t1149 * t789 + t1153 * t787 + t1243;
t770 = -pkin(7) * t793 - t1148 * t783 + t1152 * t790;
t769 = pkin(2) * t894 + pkin(7) * t794 + t1148 * t790 + t1152 * t783;
t768 = -pkin(1) * t775 - t1181;
t767 = -pkin(6) * t785 - t1149 * t782 + t1153 * t784;
t766 = pkin(1) * t966 + pkin(6) * t786 + t1149 * t784 + t1153 * t782;
t765 = -t1149 * t778 + t1153 * t779 - t1254;
t764 = t1149 * t779 + t1153 * t778 + t1243;
t763 = -pkin(6) * t775 - t1149 * t769 + t1153 * t770;
t762 = pkin(1) * t894 + pkin(6) * t776 + t1149 * t770 + t1153 * t769;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1119, 0, -t1118, 0, t1174, -t1100, -t1172, -pkin(5) * t1172, t1154 * t1091 - t1180, t1154 * t1075 - t1150 * t1121, t1154 * t1085 + t1149 * t1201, t1154 * t1090 + t1180, t1154 * t1083 + t1150 * t1138, t1150 * qJDD(2) + t1154 * t1110, t1154 * t1048 - t1150 * t1042 - pkin(5) * (t1150 * t1084 + t1154 * t1116), t1154 * t1049 - t1150 * t1043 - pkin(5) * (t1150 * t1086 - t1154 * t1113), t1154 * t1035 - pkin(5) * (t1150 * t1117 + t1154 * t1120), -pkin(5) * (t1150 * t1036 + t1154 * t1106) - (t1150 * pkin(1) - t1154 * pkin(6)) * t1035, t1154 * t965 + t1188, t1150 * t1072 + t1154 * t920, t1150 * t1021 + t1154 * t986, t1154 * t964 - t1188, -t1150 * t1017 + t1154 * t987, t1150 * t1143 + t1154 * t996, t1154 * t883 - t1150 * t910 - pkin(5) * (-t1154 * t1016 + t1150 * t961), t1154 * t888 - t1150 * t916 - pkin(5) * (t1150 * t975 - t1154 * t1263), t1154 * t830 - t1150 * t892 - pkin(5) * (-t1154 * t1045 + t1150 * t921), t1154 * t836 - t1150 * t867 - pkin(5) * (t1154 * t1046 + t1150 * t886), t848, t812, t865, t847, t866, t896, -t1150 * t808 + t1154 * t791 - t1256, -t1150 * t821 + t1154 * t795 - t1255, -t1150 * t797 + t1154 * t772 - t1257, t1154 * t767 - t1150 * t773 - pkin(5) * (t1150 * t786 + t1154 * t966), t848, t812, t865, t847, t866, t896, -t1150 * t804 + t1154 * t777 - t1256, -t1150 * t807 + t1154 * t781 - t1255, -t1150 * t796 + t1154 * t765 - t1257, t1154 * t763 - t1150 * t768 - pkin(5) * (t1150 * t776 + t1154 * t894); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1118, 0, t1119, 0, t1100, t1174, t1182, pkin(5) * t1182, t1150 * t1091 + t1179, t1150 * t1075 + t1154 * t1121, t1150 * t1085 - t1149 * t1200, t1150 * t1090 - t1179, t1150 * t1083 - t1153 * t1200, -t1154 * qJDD(2) + t1150 * t1110, t1150 * t1048 + t1154 * t1042 + pkin(5) * (t1154 * t1084 - t1150 * t1116), t1150 * t1049 + t1154 * t1043 + pkin(5) * (t1154 * t1086 + t1150 * t1113), t1150 * t1035 + pkin(5) * (t1154 * t1117 - t1150 * t1120), pkin(5) * (t1154 * t1036 - t1150 * t1106) - (-t1154 * pkin(1) - t1150 * pkin(6)) * t1035, t1150 * t965 - t1186, -t1154 * t1072 + t1150 * t920, -t1154 * t1021 + t1150 * t986, t1150 * t964 + t1186, t1154 * t1017 + t1150 * t987, -t1154 * t1143 + t1150 * t996, t1150 * t883 + t1154 * t910 + pkin(5) * (t1150 * t1016 + t1154 * t961), t1150 * t888 + t1154 * t916 + pkin(5) * (t1150 * t1263 + t1154 * t975), t1150 * t830 + t1154 * t892 + pkin(5) * (t1150 * t1045 + t1154 * t921), t1150 * t836 + t1154 * t867 + pkin(5) * (-t1150 * t1046 + t1154 * t886), t846, t811, t863, t845, t864, t895, t1150 * t791 + t1154 * t808 + t839, t1150 * t795 + t1154 * t821 + t853, t1150 * t772 + t1154 * t797 + t809, t1150 * t767 + t1154 * t773 + pkin(5) * (-t1150 * t966 + t1154 * t786), t846, t811, t863, t845, t864, t895, t1150 * t777 + t1154 * t804 + t839, t1150 * t781 + t1154 * t807 + t853, t1150 * t765 + t1154 * t796 + t809, t1150 * t763 + t1154 * t768 + pkin(5) * (-t1150 * t894 + t1154 * t776); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1124, t1125, 0, 0, t1078, t1074, t1081, t1077, t1079, 0, t1029, t1028, t1008, t1015, t963, t918, t984, t962, t985, t995, t876, t881, t827, t833, t850, t814, t877, t849, t878, t901, t788, t792, t771, t766, t850, t814, t877, t849, t878, t901, t774, t780, t764, t762; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1156, 0, 0, -g(3), -t1124, 0, t1091, t1075, t1085, t1090, t1083, t1110, t1048, t1049, t1035, pkin(6) * t1035, t965, t920, t986, t964, t987, t996, t883, t888, t830, t836, t852, t816, t879, t851, t880, t902, t791, t795, t772, t767, t852, t816, t879, t851, t880, t902, t777, t781, t765, t763; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1156, 0, qJDD(1), 0, g(3), 0, -t1125, 0, t1131, t1121, -t1202, -t1131, -t1138, -qJDD(2), t1042, t1043, 0, pkin(1) * t1035, -t1073, -t1072, -t1021, t1073, t1017, -t1143, t910, t916, t892, t867, -t1010, -t1007, -t954, t1010, t951, -t1136, t808, t821, t797, t773, -t1010, -t1007, -t954, t1010, t951, -t1136, t804, t807, t796, t768; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1124, t1125, 0, 0, t1078, t1074, t1081, t1077, t1079, 0, t1029, t1028, t1008, t1015, t963, t918, t984, t962, t985, t995, t876, t881, t827, t833, t850, t814, t877, t849, t878, t901, t788, t792, t771, t766, t850, t814, t877, t849, t878, t901, t774, t780, t764, t762; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1114, t1116, t1122, -t1134, t1128, t1134, 0, -t1106, t1088, 0, t1014, t972, t1026, t1012, t1027, t1051, t988, t989, t905, -pkin(7) * t932, t900, t859, t929, t899, t930, t945, t826, t832, t789, t784, t900, t859, t929, t899, t930, t945, t799, t803, t779, t770; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1190, t1113, t1126, t1115, t1123, -t1190, t1106, 0, t1089, 0, t1013, t970, t1024, t1011, t1025, t1050, t939, t946, t893, t922, t898, t857, t927, t897, t928, t944, t822, t825, t787, t782, t898, t857, t927, t897, t928, t944, t798, t801, t778, t769; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1131, -t1121, t1202, t1131, t1138, qJDD(2), -t1088, -t1089, 0, 0, t1073, t1072, t1021, -t1073, -t1017, t1143, t1168, t1178, t1258, t1259, t1010, t1007, t954, -t1010, -t951, t1136, -t1171, t1185, t1242, t1197, t1010, t1007, t954, -t1010, -t951, t1136, t1272, t1271, t856 + t1238, t1181; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1044, -t1016, t1262, t1095, t1092, -t1095, 0, -t1046, t993, 0, t943, t908, t982, t941, t983, t998, t915, t917, t824, -pkin(8) * t843, t943, t908, t982, t941, t983, t998, t837, t841, t802, t790; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1222, t1263, t1093, -t1167, t1070, -t1222, t1046, 0, t994, 0, t942, t906, t980, t940, t981, t997, t882, t884, t823, t834, t942, t906, t980, t940, t981, t997, t828, t831, t800, t783; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1073, t1072, t1021, -t1073, -t1017, t1143, -t993, -t994, 0, 0, t1010, t1007, t954, -t1010, -t951, t1136, -t1177, t1199, t904, t842, t1010, t1007, t954, -t1010, -t951, t1136, t1159, t1163, t1238, t1241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t969, -t950, -t1267, t1055, t1052, -t1055, 0, -t966, t890, 0, t969, -t950, -t1267, t1055, t1052, -t1055, qJ(5) * t1267, t887, t838, qJ(5) * t862; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1056, t1266, t1053, -t1166, t1003, -t1056, t966, 0, t891, 0, t1056, t1266, t1053, -t1166, t1003, -t1056, t872, t931, t835, t829; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1010, t1007, t954, -t1010, -t951, t1136, -t890, -t891, 0, 0, t1010, t1007, t954, -t1010, -t951, t1136, t1160, t1164, -t947, -t861; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t969, -t950, -t1267, t1055, t1052, -t1055, 0, -t894, t862, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1056, t1266, t1053, -t1166, t1003, -t1056, t894, 0, t868, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1010, t1007, t954, -t1010, -t951, t1136, -t862, -t868, 0, 0;];
m_new_reg = t1;
