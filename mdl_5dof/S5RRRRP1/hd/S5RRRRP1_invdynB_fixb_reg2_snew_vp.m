% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:46
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRRP1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRRP1_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:46:11
% EndTime: 2019-12-05 18:46:23
% DurationCPUTime: 10.39s
% Computational Cost: add. (56378->552), mult. (125479->792), div. (0->0), fcn. (90030->8), ass. (0->408)
t657 = sin(qJ(4));
t658 = sin(qJ(3));
t662 = cos(qJ(3));
t663 = cos(qJ(2));
t659 = sin(qJ(2));
t704 = qJD(1) * t659;
t616 = t662 * t663 * qJD(1) - t658 * t704;
t617 = (t658 * t663 + t659 * t662) * qJD(1);
t661 = cos(qJ(4));
t581 = -t661 * t616 + t657 * t617;
t583 = t657 * t616 + t661 * t617;
t528 = t583 * t581;
t653 = qJDD(2) + qJDD(3);
t646 = qJDD(4) + t653;
t680 = -t646 + t528;
t728 = t680 * t657;
t727 = t680 * t661;
t700 = qJD(1) * qJD(2);
t688 = t663 * t700;
t699 = t659 * qJDD(1);
t626 = t688 + t699;
t648 = t663 * qJDD(1);
t689 = t659 * t700;
t627 = t648 - t689;
t679 = t658 * t626 - t662 * t627;
t559 = -qJD(3) * t617 - t679;
t560 = qJD(3) * t616 + t626 * t662 + t627 * t658;
t681 = -t661 * t559 + t657 * t560;
t493 = -qJD(4) * t583 - t681;
t656 = t663 ^ 2;
t666 = qJD(1) ^ 2;
t660 = sin(qJ(1));
t664 = cos(qJ(1));
t636 = t660 * g(1) - t664 * g(2);
t672 = qJDD(1) * pkin(1) + t636;
t673 = qJD(2) * pkin(2) - pkin(7) * t704;
t562 = t627 * pkin(2) - t673 * t704 + t672 + (pkin(7) * t656 + pkin(6)) * t666;
t614 = t616 ^ 2;
t654 = qJD(2) + qJD(3);
t675 = t654 * pkin(3) - t617 * pkin(8);
t490 = t559 * pkin(3) + t614 * pkin(8) - t617 * t675 + t562;
t647 = qJD(4) + t654;
t563 = pkin(4) * t647 - qJ(5) * t583;
t667 = -t583 * t563 - qJDD(5) + t490;
t761 = t493 * pkin(4) + t667;
t760 = t680 * pkin(4);
t589 = t616 * t617;
t755 = t589 + t653;
t759 = t658 * t755;
t758 = t662 * t755;
t610 = t654 * t616;
t540 = -t560 + t610;
t757 = t560 + t610;
t570 = t647 * t581;
t670 = qJD(4) * t581 - t559 * t657 - t560 * t661;
t756 = -t570 - t670;
t753 = t493 * qJ(5) - 0.2e1 * qJD(5) * t581 - t647 * t563;
t711 = t659 * t666;
t637 = t664 * g(1) + t660 * g(2);
t619 = -t666 * pkin(1) + qJDD(1) * pkin(6) - t637;
t714 = t659 * t619;
t550 = qJDD(2) * pkin(2) - t626 * pkin(7) - t714 + (pkin(2) * t711 + pkin(7) * t700 - g(3)) * t663;
t604 = -t659 * g(3) + t663 * t619;
t650 = t656 * t666;
t554 = -pkin(2) * t650 + t627 * pkin(7) - qJD(2) * t673 + t604;
t515 = -t662 * t550 + t658 * t554;
t461 = pkin(3) * t755 + pkin(8) * t540 - t515;
t516 = t658 * t550 + t662 * t554;
t466 = -t614 * pkin(3) + t559 * pkin(8) - t654 * t675 + t516;
t415 = -t661 * t461 + t657 * t466;
t492 = t670 * qJ(5);
t752 = t415 - t492 + t760;
t478 = (qJD(4) - t647) * t583 + t681;
t536 = (qJD(3) - t654) * t617 + t679;
t579 = t581 ^ 2;
t580 = t583 ^ 2;
t615 = t617 ^ 2;
t645 = t647 ^ 2;
t652 = t654 ^ 2;
t482 = -t570 + t670;
t431 = -t478 * t657 + t482 * t661;
t433 = -t478 * t661 - t482 * t657;
t384 = t431 * t662 + t433 * t658;
t386 = -t431 * t658 + t433 * t662;
t346 = -t384 * t659 + t386 * t663;
t514 = -t579 - t580;
t338 = t346 * t660 - t514 * t664;
t751 = pkin(5) * t338;
t521 = -t645 - t579;
t484 = t521 * t657 - t727;
t485 = t521 * t661 + t728;
t436 = t484 * t662 + t485 * t658;
t437 = -t484 * t658 + t485 * t662;
t396 = -t436 * t659 + t437 * t663;
t477 = (qJD(4) + t647) * t583 + t681;
t366 = t396 * t660 - t477 * t664;
t750 = pkin(5) * t366;
t556 = -t580 - t645;
t523 = t528 + t646;
t730 = t523 * t657;
t502 = t556 * t661 - t730;
t729 = t523 * t661;
t503 = -t556 * t657 - t729;
t448 = t502 * t662 + t503 * t658;
t449 = -t502 * t658 + t503 * t662;
t400 = -t448 * t659 + t449 * t663;
t380 = t400 * t660 - t664 * t756;
t749 = pkin(5) * t380;
t344 = t384 * t663 + t386 * t659;
t748 = pkin(6) * t344;
t395 = t436 * t663 + t437 * t659;
t747 = pkin(6) * t395;
t399 = t448 * t663 + t449 * t659;
t746 = pkin(6) * t399;
t745 = pkin(7) * t384;
t744 = pkin(7) * t436;
t743 = pkin(7) * t448;
t742 = pkin(8) * t431;
t741 = pkin(8) * t484;
t740 = pkin(8) * t502;
t416 = t657 * t461 + t661 * t466;
t369 = -t415 * t661 + t416 * t657;
t738 = t369 * t658;
t737 = t369 * t662;
t692 = qJ(5) * t570;
t703 = qJD(5) * t583;
t387 = -t692 - 0.2e1 * t703 - t752;
t736 = t387 * t657;
t735 = t387 * t661;
t457 = -t515 * t662 + t516 * t658;
t734 = t457 * t659;
t733 = t457 * t663;
t732 = t490 * t657;
t731 = t490 * t661;
t726 = t562 * t658;
t725 = t562 * t662;
t586 = -t589 + t653;
t724 = t586 * t658;
t723 = t586 * t662;
t618 = t666 * pkin(6) + t672;
t722 = t618 * t659;
t721 = t618 * t663;
t719 = t647 * t657;
t718 = t647 * t661;
t717 = t654 * t658;
t716 = t654 * t662;
t655 = t659 ^ 2;
t715 = t655 * t666;
t643 = t663 * t711;
t634 = qJDD(2) + t643;
t713 = t659 * t634;
t635 = qJDD(2) - t643;
t712 = t659 * t635;
t710 = t663 * t635;
t709 = -pkin(1) * t514 + pkin(6) * t346;
t708 = -pkin(1) * t477 + pkin(6) * t396;
t707 = -pkin(1) * t756 + pkin(6) * t400;
t706 = -t556 - t579;
t705 = t655 + t656;
t698 = t660 * qJDD(1);
t697 = t664 * qJDD(1);
t696 = t660 * t528;
t695 = t664 * t528;
t694 = t660 * t589;
t693 = t664 * t589;
t687 = -pkin(2) * t514 + pkin(7) * t386;
t686 = -pkin(2) * t477 + pkin(7) * t437;
t685 = -pkin(2) * t756 + pkin(7) * t449;
t684 = -pkin(3) * t514 + pkin(8) * t433;
t683 = -pkin(3) * t477 + pkin(8) * t485;
t682 = -pkin(3) * t756 + pkin(8) * t503;
t370 = t415 * t657 + t661 * t416;
t458 = t515 * t658 + t662 * t516;
t603 = t663 * g(3) + t714;
t553 = t603 * t659 + t663 * t604;
t595 = -t660 * t636 - t664 * t637;
t678 = t660 * t643;
t677 = t664 * t643;
t631 = -t660 * t666 + t697;
t674 = -pkin(5) * t631 - g(3) * t660;
t552 = t603 * t663 - t604 * t659;
t594 = t664 * t636 - t660 * t637;
t671 = t416 + t753;
t325 = -pkin(1) * t344 - pkin(2) * t384 - pkin(3) * t431;
t336 = -pkin(1) * t395 - pkin(2) * t436 - pkin(3) * t484 + t415;
t349 = -pkin(1) * t399 - pkin(2) * t448 - pkin(3) * t502 + t416;
t665 = qJD(2) ^ 2;
t641 = -t650 - t665;
t640 = t650 - t665;
t639 = -t665 - t715;
t638 = t665 - t715;
t633 = t650 - t715;
t632 = t650 + t715;
t630 = t664 * t666 + t698;
t629 = t705 * qJDD(1);
t628 = t648 - 0.2e1 * t689;
t625 = 0.2e1 * t688 + t699;
t623 = t663 * t634;
t622 = t705 * t700;
t613 = -pkin(5) * t630 + t664 * g(3);
t608 = -t615 + t652;
t607 = t614 - t652;
t606 = t663 * t626 - t655 * t700;
t605 = -t659 * t627 - t656 * t700;
t602 = -t615 - t652;
t601 = -t659 * t639 - t710;
t600 = -t659 * t638 + t623;
t599 = t663 * t641 - t713;
t598 = t663 * t640 - t712;
t597 = t663 * t639 - t712;
t596 = t659 * t641 + t623;
t592 = t664 * t629 - t660 * t632;
t591 = t660 * t629 + t664 * t632;
t590 = -t659 * t625 + t663 * t628;
t588 = -t615 + t614;
t584 = -t652 - t614;
t577 = 0.2e1 * t703;
t575 = t664 * t601 + t660 * t625;
t574 = t664 * t599 - t660 * t628;
t573 = t660 * t601 - t664 * t625;
t572 = t660 * t599 + t664 * t628;
t569 = -t580 + t645;
t568 = t579 - t645;
t567 = (t616 * t662 + t617 * t658) * t654;
t566 = (t616 * t658 - t617 * t662) * t654;
t565 = -pkin(6) * t597 - t721;
t564 = -pkin(6) * t596 - t722;
t561 = -t614 - t615;
t558 = -pkin(1) * t597 + t604;
t557 = -pkin(1) * t596 + t603;
t546 = t607 * t662 - t724;
t545 = -t608 * t658 + t758;
t544 = t607 * t658 + t723;
t543 = t608 * t662 + t759;
t542 = -t602 * t658 - t723;
t541 = t602 * t662 - t724;
t535 = (qJD(3) + t654) * t617 + t679;
t534 = t560 * t662 - t617 * t717;
t533 = t560 * t658 + t617 * t716;
t532 = -t559 * t658 - t616 * t716;
t531 = t559 * t662 - t616 * t717;
t530 = t553 * t664 - t618 * t660;
t529 = t553 * t660 + t618 * t664;
t527 = -t580 + t579;
t526 = t584 * t662 - t759;
t525 = t584 * t658 + t758;
t519 = (-t581 * t661 + t583 * t657) * t647;
t518 = (-t581 * t657 - t583 * t661) * t647;
t517 = -t566 * t659 + t567 * t663;
t511 = -pkin(7) * t541 - t725;
t510 = -pkin(7) * t525 - t726;
t509 = -t544 * t659 + t546 * t663;
t508 = -t543 * t659 + t545 * t663;
t507 = t568 * t661 - t730;
t506 = -t569 * t657 - t727;
t505 = t568 * t657 + t729;
t504 = t569 * t661 - t728;
t500 = -t541 * t659 + t542 * t663;
t499 = t541 * t663 + t542 * t659;
t498 = -t536 * t662 - t540 * t658;
t497 = -t535 * t662 - t658 * t757;
t496 = -t536 * t658 + t540 * t662;
t495 = -t535 * t658 + t662 * t757;
t489 = -t533 * t659 + t534 * t663;
t488 = -t531 * t659 + t532 * t663;
t487 = -t525 * t659 + t526 * t663;
t486 = t525 * t663 + t526 * t659;
t474 = -pkin(2) * t757 + pkin(7) * t542 - t726;
t473 = -t518 * t658 + t519 * t662;
t472 = t518 * t662 + t519 * t658;
t471 = -t583 * t719 - t661 * t670;
t470 = t583 * t718 - t657 * t670;
t469 = -t493 * t657 + t581 * t718;
t468 = t493 * t661 + t581 * t719;
t467 = -pkin(2) * t535 + pkin(7) * t526 + t725;
t463 = t500 * t664 + t660 * t757;
t462 = t500 * t660 - t664 * t757;
t456 = t487 * t664 + t535 * t660;
t455 = t487 * t660 - t535 * t664;
t454 = -pkin(4) * t756 - qJ(5) * t523;
t453 = -t505 * t658 + t507 * t662;
t452 = -t504 * t658 + t506 * t662;
t451 = t505 * t662 + t507 * t658;
t450 = t504 * t662 + t506 * t658;
t446 = pkin(2) * t562 + pkin(7) * t458;
t445 = -t496 * t659 + t498 * t663;
t444 = -t495 * t659 + t497 * t663;
t443 = t496 * t663 + t498 * t659;
t442 = -t731 - t740;
t441 = -pkin(1) * t499 - pkin(2) * t541 + t516;
t440 = -t732 - t741;
t439 = t445 * t664 + t561 * t660;
t438 = t445 * t660 - t561 * t664;
t434 = -pkin(1) * t486 - pkin(2) * t525 + t515;
t432 = -t477 * t661 - t657 * t756;
t430 = -t477 * t657 + t661 * t756;
t429 = -pkin(7) * t496 - t457;
t427 = -t472 * t659 + t473 * t663;
t426 = t472 * t663 + t473 * t659;
t425 = -t470 * t658 + t471 * t662;
t424 = -t468 * t658 + t469 * t662;
t423 = t470 * t662 + t471 * t658;
t422 = t468 * t662 + t469 * t658;
t421 = t427 * t664 + t646 * t660;
t420 = t427 * t660 - t646 * t664;
t419 = t579 * qJ(5) + t761;
t418 = -pkin(2) * t561 + pkin(7) * t498 + t458;
t417 = -pkin(1) * t443 - pkin(2) * t496;
t413 = -pkin(6) * t499 - t474 * t659 + t511 * t663;
t412 = qJ(5) * t706 - t761;
t411 = t458 * t663 - t734;
t410 = t458 * t659 + t733;
t409 = t682 - t732;
t408 = -pkin(6) * t486 - t467 * t659 + t510 * t663;
t407 = t683 + t731;
t406 = t411 * t664 - t562 * t660;
t405 = t411 * t660 + t562 * t664;
t404 = -t451 * t659 + t453 * t663;
t403 = -t450 * t659 + t452 * t663;
t402 = t451 * t663 + t453 * t659;
t401 = t450 * t663 + t452 * t659;
t397 = t667 + (-t477 + t493) * pkin(4) + (t521 + t579) * qJ(5);
t393 = -pkin(4) * t579 + t671;
t392 = -pkin(1) * t410 - pkin(2) * t457;
t391 = t404 * t664 - t478 * t660;
t390 = t403 * t664 - t482 * t660;
t389 = t404 * t660 + t478 * t664;
t388 = t403 * t660 + t482 * t664;
t385 = -t430 * t658 + t432 * t662;
t383 = t430 * t662 + t432 * t658;
t381 = t400 * t664 + t660 * t756;
t379 = pkin(5) * t381;
t378 = -t423 * t659 + t425 * t663;
t377 = -t422 * t659 + t424 * t663;
t376 = t423 * t663 + t425 * t659;
t375 = t422 * t663 + t424 * t659;
t374 = t378 * t664 + t696;
t373 = t377 * t664 - t696;
t372 = t378 * t660 - t695;
t371 = t377 * t660 + t695;
t368 = t412 * t661 - t454 * t657 - t740;
t367 = t396 * t664 + t477 * t660;
t365 = pkin(5) * t367;
t364 = t577 + (-t482 + t570) * qJ(5) + t752;
t363 = qJ(5) * t727 - t397 * t657 - t741;
t362 = -pkin(6) * t410 - pkin(7) * t733 - t446 * t659;
t361 = -qJ(5) * t478 + (-t514 - t579) * pkin(4) + t671;
t360 = pkin(3) * t490 + pkin(8) * t370;
t359 = -t409 * t658 + t442 * t662 - t743;
t358 = t412 * t657 + t454 * t661 + t682;
t357 = -pkin(6) * t443 - t418 * t659 + t429 * t663;
t356 = pkin(4) * t419 + qJ(5) * t393;
t355 = qJ(5) * t728 + t397 * t661 + t683;
t354 = -t407 * t658 + t440 * t662 - t744;
t353 = t409 * t662 + t442 * t658 + t685;
t352 = -t369 - t742;
t351 = t370 + t684;
t350 = t407 * t662 + t440 * t658 + t686;
t348 = t393 * t661 - t736;
t347 = t393 * t657 + t735;
t345 = -t383 * t659 + t385 * t663;
t343 = t383 * t663 + t385 * t659;
t341 = t345 * t664 - t527 * t660;
t340 = t345 * t660 + t527 * t664;
t339 = t346 * t664 + t514 * t660;
t337 = pkin(5) * t339;
t335 = pkin(4) * t706 + t349 + t753;
t334 = t370 * t662 - t738;
t333 = t370 * t658 + t737;
t332 = t336 - t492 + t577 + t692 + 0.2e1 * t760;
t331 = -t358 * t658 + t368 * t662 - t743;
t330 = -t361 * t657 + t364 * t661 - t742;
t329 = t358 * t662 + t368 * t658 + t685;
t328 = t361 * t661 + t364 * t657 + t684;
t327 = -t355 * t658 + t363 * t662 - t744;
t326 = t355 * t662 + t363 * t658 + t686;
t324 = -pkin(4) * t482 + t325;
t323 = -t353 * t659 + t359 * t663 - t746;
t322 = -t347 * t658 + t348 * t662;
t321 = t347 * t662 + t348 * t658;
t320 = -t350 * t659 + t354 * t663 - t747;
t319 = -pkin(8) * t347 - qJ(5) * t735 - t356 * t657;
t318 = -t351 * t658 + t352 * t662 - t745;
t317 = t351 * t662 + t352 * t658 + t687;
t316 = -t333 * t659 + t334 * t663;
t315 = t333 * t663 + t334 * t659;
t314 = -pkin(7) * t333 - pkin(8) * t737 - t360 * t658;
t313 = t316 * t664 - t490 * t660;
t312 = t316 * t660 + t490 * t664;
t311 = pkin(3) * t419 + pkin(8) * t348 - qJ(5) * t736 + t356 * t661;
t310 = pkin(2) * t490 + pkin(7) * t334 - pkin(8) * t738 + t360 * t662;
t309 = -t329 * t659 + t331 * t663 - t746;
t308 = -t328 * t658 + t330 * t662 - t745;
t307 = t328 * t662 + t330 * t658 + t687;
t306 = -t326 * t659 + t327 * t663 - t747;
t305 = -t321 * t659 + t322 * t663;
t304 = t321 * t663 + t322 * t659;
t303 = -pkin(1) * t315 - pkin(2) * t333 - pkin(3) * t369;
t302 = t305 * t664 - t419 * t660;
t301 = t305 * t660 + t419 * t664;
t300 = -t317 * t659 + t318 * t663 - t748;
t299 = -pkin(7) * t321 - t311 * t658 + t319 * t662;
t298 = pkin(2) * t419 + pkin(7) * t322 + t311 * t662 + t319 * t658;
t297 = -pkin(1) * t304 - pkin(2) * t321 - pkin(3) * t347 - pkin(4) * t387;
t296 = -pkin(6) * t315 - t310 * t659 + t314 * t663;
t295 = -t307 * t659 + t308 * t663 - t748;
t294 = -pkin(6) * t304 - t298 * t659 + t299 * t663;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t630, -t631, 0, t595, 0, 0, 0, 0, 0, 0, t574, t575, t592, t530, 0, 0, 0, 0, 0, 0, t456, t463, t439, t406, 0, 0, 0, 0, 0, 0, t367, t381, t339, t313, 0, 0, 0, 0, 0, 0, t367, t381, t339, t302; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t631, -t630, 0, t594, 0, 0, 0, 0, 0, 0, t572, t573, t591, t529, 0, 0, 0, 0, 0, 0, t455, t462, t438, t405, 0, 0, 0, 0, 0, 0, t366, t380, t338, t312, 0, 0, 0, 0, 0, 0, t366, t380, t338, t301; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t596, t597, 0, -t552, 0, 0, 0, 0, 0, 0, t486, t499, t443, t410, 0, 0, 0, 0, 0, 0, t395, t399, t344, t315, 0, 0, 0, 0, 0, 0, t395, t399, t344, t304; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t631, 0, -t630, 0, t674, -t613, -t594, -pkin(5) * t594, t606 * t664 - t678, t590 * t664 - t633 * t660, t600 * t664 + t659 * t698, t605 * t664 + t678, t598 * t664 + t648 * t660, qJDD(2) * t660 + t622 * t664, -pkin(5) * t572 - t557 * t660 + t564 * t664, -pkin(5) * t573 - t558 * t660 + t565 * t664, -pkin(5) * t591 + t552 * t664, -pkin(5) * t529 - (pkin(1) * t660 - pkin(6) * t664) * t552, t489 * t664 - t694, t444 * t664 - t588 * t660, t508 * t664 - t540 * t660, t488 * t664 + t694, t509 * t664 - t536 * t660, t517 * t664 + t653 * t660, -pkin(5) * t455 + t408 * t664 - t434 * t660, -pkin(5) * t462 + t413 * t664 - t441 * t660, -pkin(5) * t438 + t357 * t664 - t417 * t660, -pkin(5) * t405 + t362 * t664 - t392 * t660, t374, t341, t390, t373, t391, t421, t320 * t664 - t336 * t660 - t750, t323 * t664 - t349 * t660 - t749, t300 * t664 - t325 * t660 - t751, -pkin(5) * t312 + t296 * t664 - t303 * t660, t374, t341, t390, t373, t391, t421, t306 * t664 - t332 * t660 - t750, t309 * t664 - t335 * t660 - t749, t295 * t664 - t324 * t660 - t751, -pkin(5) * t301 + t294 * t664 - t297 * t660; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t630, 0, t631, 0, t613, t674, t595, pkin(5) * t595, t606 * t660 + t677, t590 * t660 + t633 * t664, t600 * t660 - t659 * t697, t605 * t660 - t677, t598 * t660 - t663 * t697, -qJDD(2) * t664 + t622 * t660, pkin(5) * t574 + t557 * t664 + t564 * t660, pkin(5) * t575 + t558 * t664 + t565 * t660, pkin(5) * t592 + t552 * t660, pkin(5) * t530 - (-pkin(1) * t664 - pkin(6) * t660) * t552, t489 * t660 + t693, t444 * t660 + t588 * t664, t508 * t660 + t540 * t664, t488 * t660 - t693, t509 * t660 + t536 * t664, t517 * t660 - t653 * t664, pkin(5) * t456 + t408 * t660 + t434 * t664, pkin(5) * t463 + t413 * t660 + t441 * t664, pkin(5) * t439 + t357 * t660 + t417 * t664, pkin(5) * t406 + t362 * t660 + t392 * t664, t372, t340, t388, t371, t389, t420, t320 * t660 + t336 * t664 + t365, t323 * t660 + t349 * t664 + t379, t300 * t660 + t325 * t664 + t337, pkin(5) * t313 + t296 * t660 + t303 * t664, t372, t340, t388, t371, t389, t420, t306 * t660 + t332 * t664 + t365, t309 * t660 + t335 * t664 + t379, t295 * t660 + t324 * t664 + t337, pkin(5) * t302 + t294 * t660 + t297 * t664; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t636, t637, 0, 0, (t626 + t688) * t659, t625 * t663 + t628 * t659, t638 * t663 + t713, (t627 - t689) * t663, t640 * t659 + t710, 0, pkin(1) * t628 + pkin(6) * t599 + t721, -pkin(1) * t625 + pkin(6) * t601 - t722, pkin(1) * t632 + pkin(6) * t629 + t553, pkin(1) * t618 + pkin(6) * t553, t533 * t663 + t534 * t659, t495 * t663 + t497 * t659, t543 * t663 + t545 * t659, t531 * t663 + t532 * t659, t544 * t663 + t546 * t659, t566 * t663 + t567 * t659, -pkin(1) * t535 + pkin(6) * t487 + t467 * t663 + t510 * t659, -pkin(1) * t757 + pkin(6) * t500 + t474 * t663 + t511 * t659, -pkin(1) * t561 + pkin(6) * t445 + t418 * t663 + t429 * t659, pkin(1) * t562 + pkin(6) * t411 - pkin(7) * t734 + t446 * t663, t376, t343, t401, t375, t402, t426, t350 * t663 + t354 * t659 + t708, t353 * t663 + t359 * t659 + t707, t317 * t663 + t318 * t659 + t709, pkin(1) * t490 + pkin(6) * t316 + t310 * t663 + t314 * t659, t376, t343, t401, t375, t402, t426, t326 * t663 + t327 * t659 + t708, t329 * t663 + t331 * t659 + t707, t307 * t663 + t308 * t659 + t709, pkin(1) * t419 + pkin(6) * t305 + t298 * t663 + t299 * t659;];
tauB_reg = t1;
