% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRRRP1
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d4]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:46
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRRRP1_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRRP1_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRRP1_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRRP1_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRRP1_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRRRP1_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:46:37
% EndTime: 2019-12-05 18:46:40
% DurationCPUTime: 2.80s
% Computational Cost: add. (16222->207), mult. (36046->276), div. (0->0), fcn. (25838->8), ass. (0->163)
t1413 = qJD(2) + qJD(3);
t1410 = qJD(4) + t1413;
t1455 = qJD(4) + t1410;
t1417 = sin(qJ(3));
t1421 = cos(qJ(3));
t1422 = cos(qJ(2));
t1448 = qJD(1) * t1422;
t1418 = sin(qJ(2));
t1449 = qJD(1) * t1418;
t1386 = t1417 * t1449 - t1421 * t1448;
t1388 = (t1417 * t1422 + t1418 * t1421) * qJD(1);
t1416 = sin(qJ(4));
t1420 = cos(qJ(4));
t1369 = t1420 * t1386 + t1388 * t1416;
t1368 = t1369 ^ 2;
t1371 = -t1386 * t1416 + t1388 * t1420;
t1454 = t1371 ^ 2;
t1385 = t1386 ^ 2;
t1453 = t1388 ^ 2;
t1452 = t1410 ^ 2;
t1451 = t1413 ^ 2;
t1450 = -2 * qJD(5);
t1447 = t1371 * t1369;
t1446 = t1388 * t1386;
t1445 = t1413 * t1386;
t1415 = t1422 ^ 2;
t1425 = qJD(1) ^ 2;
t1444 = t1415 * t1425;
t1419 = sin(qJ(1));
t1423 = cos(qJ(1));
t1404 = -g(1) * t1423 - g(2) * t1419;
t1390 = -pkin(1) * t1425 + qJDD(1) * pkin(6) + t1404;
t1443 = t1418 * t1390;
t1442 = t1418 * t1425;
t1441 = qJD(3) - t1413;
t1440 = qJD(4) - t1410;
t1435 = qJD(2) * t1448;
t1438 = t1418 * qJDD(1);
t1394 = t1435 + t1438;
t1356 = qJDD(2) * pkin(2) - t1394 * pkin(7) - t1443 + (pkin(7) * qJD(1) * qJD(2) + pkin(2) * t1442 - g(3)) * t1422;
t1381 = -t1418 * g(3) + t1422 * t1390;
t1411 = t1422 * qJDD(1);
t1436 = qJD(2) * t1449;
t1395 = t1411 - t1436;
t1427 = qJD(2) * pkin(2) - pkin(7) * t1449;
t1359 = -pkin(2) * t1444 + t1395 * pkin(7) - qJD(2) * t1427 + t1381;
t1339 = t1421 * t1356 - t1417 * t1359;
t1428 = -t1421 * t1394 - t1417 * t1395;
t1363 = -qJD(3) * t1386 - t1428;
t1437 = qJDD(2) + qJDD(3);
t1373 = t1437 - t1446;
t1319 = (-t1363 - t1445) * pkin(8) + t1373 * pkin(3) + t1339;
t1340 = t1417 * t1356 + t1421 * t1359;
t1432 = t1417 * t1394 - t1421 * t1395;
t1362 = -qJD(3) * t1388 - t1432;
t1431 = pkin(3) * t1413 - pkin(8) * t1388;
t1321 = -t1385 * pkin(3) + t1362 * pkin(8) - t1413 * t1431 + t1340;
t1305 = t1416 * t1319 + t1420 * t1321;
t1414 = t1418 ^ 2;
t1439 = t1414 + t1415;
t1403 = t1419 * g(1) - t1423 * g(2);
t1434 = -qJDD(4) - t1437;
t1304 = t1420 * t1319 - t1416 * t1321;
t1433 = -t1420 * t1362 + t1416 * t1363;
t1430 = pkin(4) * t1410 - qJ(5) * t1371;
t1429 = -t1416 * t1362 - t1420 * t1363;
t1426 = qJDD(1) * pkin(1) + t1403;
t1343 = -t1434 - t1447;
t1325 = t1369 * t1440 + t1429;
t1365 = t1395 * pkin(2) - t1427 * t1449 + (pkin(7) * t1415 + pkin(6)) * t1425 + t1426;
t1330 = t1362 * pkin(3) + t1385 * pkin(8) - t1388 * t1431 + t1365;
t1424 = qJD(2) ^ 2;
t1408 = t1422 * t1442;
t1406 = -t1424 - t1444;
t1405 = -t1414 * t1425 - t1424;
t1402 = -qJDD(2) + t1408;
t1401 = qJDD(2) + t1408;
t1400 = t1439 * t1425;
t1399 = -qJDD(1) * t1419 - t1423 * t1425;
t1398 = qJDD(1) * t1423 - t1419 * t1425;
t1397 = t1439 * qJDD(1);
t1396 = t1411 - 0.2e1 * t1436;
t1393 = 0.2e1 * t1435 + t1438;
t1389 = pkin(6) * t1425 + t1426;
t1380 = -t1422 * g(3) - t1443;
t1379 = -t1451 - t1453;
t1378 = t1402 * t1422 - t1405 * t1418;
t1377 = -t1401 * t1418 + t1406 * t1422;
t1376 = t1402 * t1418 + t1405 * t1422;
t1375 = t1401 * t1422 + t1406 * t1418;
t1374 = -t1437 - t1446;
t1372 = -t1451 - t1385;
t1364 = -t1385 - t1453;
t1361 = -t1452 - t1454;
t1358 = -t1380 * t1418 + t1381 * t1422;
t1357 = t1380 * t1422 + t1381 * t1418;
t1352 = t1374 * t1421 - t1379 * t1417;
t1351 = t1374 * t1417 + t1379 * t1421;
t1350 = t1386 * t1441 + t1428;
t1349 = t1363 - t1445;
t1348 = -t1388 * t1441 - t1432;
t1347 = (qJD(3) + t1413) * t1388 + t1432;
t1346 = t1372 * t1421 - t1373 * t1417;
t1345 = t1372 * t1417 + t1373 * t1421;
t1344 = t1434 - t1447;
t1342 = -t1452 - t1368;
t1338 = -t1368 - t1454;
t1337 = t1344 * t1420 - t1361 * t1416;
t1336 = t1344 * t1416 + t1361 * t1420;
t1335 = -t1351 * t1418 + t1352 * t1422;
t1334 = t1351 * t1422 + t1352 * t1418;
t1333 = t1348 * t1421 - t1350 * t1417;
t1332 = t1348 * t1417 + t1350 * t1421;
t1331 = -qJD(4) * t1371 - t1433;
t1329 = -t1345 * t1418 + t1346 * t1422;
t1328 = t1345 * t1422 + t1346 * t1418;
t1327 = t1342 * t1420 - t1343 * t1416;
t1326 = t1342 * t1416 + t1343 * t1420;
t1324 = -t1369 * t1455 - t1429;
t1323 = -t1371 * t1440 - t1433;
t1322 = t1371 * t1455 + t1433;
t1316 = -t1339 * t1417 + t1340 * t1421;
t1315 = t1339 * t1421 + t1340 * t1417;
t1314 = -t1336 * t1417 + t1337 * t1421;
t1313 = t1336 * t1421 + t1337 * t1417;
t1312 = -t1332 * t1418 + t1333 * t1422;
t1311 = t1332 * t1422 + t1333 * t1418;
t1310 = -t1326 * t1417 + t1327 * t1421;
t1309 = t1326 * t1421 + t1327 * t1417;
t1308 = t1323 * t1420 - t1325 * t1416;
t1307 = t1323 * t1416 + t1325 * t1420;
t1306 = t1331 * pkin(4) + t1368 * qJ(5) - t1371 * t1430 - qJDD(5) + t1330;
t1303 = -t1315 * t1418 + t1316 * t1422;
t1302 = t1315 * t1422 + t1316 * t1418;
t1301 = -t1313 * t1418 + t1314 * t1422;
t1300 = t1313 * t1422 + t1314 * t1418;
t1299 = -t1309 * t1418 + t1310 * t1422;
t1298 = t1309 * t1422 + t1310 * t1418;
t1297 = -t1368 * pkin(4) + t1331 * qJ(5) + t1369 * t1450 - t1410 * t1430 + t1305;
t1296 = pkin(4) * t1343 + qJ(5) * t1325 + t1371 * t1450 + t1304;
t1295 = -t1307 * t1417 + t1308 * t1421;
t1294 = t1307 * t1421 + t1308 * t1417;
t1293 = t1301 * t1423 + t1324 * t1419;
t1292 = t1301 * t1419 - t1324 * t1423;
t1291 = -t1304 * t1416 + t1305 * t1420;
t1290 = t1304 * t1420 + t1305 * t1416;
t1289 = t1299 * t1423 + t1322 * t1419;
t1288 = t1299 * t1419 - t1322 * t1423;
t1287 = -t1296 * t1416 + t1297 * t1420;
t1286 = t1296 * t1420 + t1297 * t1416;
t1285 = -t1294 * t1418 + t1295 * t1422;
t1284 = t1294 * t1422 + t1295 * t1418;
t1283 = t1285 * t1423 + t1338 * t1419;
t1282 = t1285 * t1419 - t1338 * t1423;
t1281 = -t1290 * t1417 + t1291 * t1421;
t1280 = t1290 * t1421 + t1291 * t1417;
t1279 = -t1286 * t1417 + t1287 * t1421;
t1278 = t1286 * t1421 + t1287 * t1417;
t1277 = -t1280 * t1418 + t1281 * t1422;
t1276 = t1280 * t1422 + t1281 * t1418;
t1275 = -t1278 * t1418 + t1279 * t1422;
t1274 = t1278 * t1422 + t1279 * t1418;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1399, -t1398, 0, -t1403 * t1419 + t1404 * t1423, 0, 0, 0, 0, 0, 0, t1377 * t1423 - t1396 * t1419, t1378 * t1423 + t1393 * t1419, t1397 * t1423 - t1400 * t1419, t1358 * t1423 - t1389 * t1419, 0, 0, 0, 0, 0, 0, t1329 * t1423 + t1347 * t1419, t1335 * t1423 + t1349 * t1419, t1312 * t1423 + t1364 * t1419, t1303 * t1423 - t1365 * t1419, 0, 0, 0, 0, 0, 0, t1289, t1293, t1283, t1277 * t1423 - t1330 * t1419, 0, 0, 0, 0, 0, 0, t1289, t1293, t1283, t1275 * t1423 - t1306 * t1419; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1398, t1399, 0, t1403 * t1423 + t1404 * t1419, 0, 0, 0, 0, 0, 0, t1377 * t1419 + t1396 * t1423, t1378 * t1419 - t1393 * t1423, t1397 * t1419 + t1400 * t1423, t1358 * t1419 + t1389 * t1423, 0, 0, 0, 0, 0, 0, t1329 * t1419 - t1347 * t1423, t1335 * t1419 - t1349 * t1423, t1312 * t1419 - t1364 * t1423, t1303 * t1419 + t1365 * t1423, 0, 0, 0, 0, 0, 0, t1288, t1292, t1282, t1277 * t1419 + t1330 * t1423, 0, 0, 0, 0, 0, 0, t1288, t1292, t1282, t1275 * t1419 + t1306 * t1423; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1375, t1376, 0, t1357, 0, 0, 0, 0, 0, 0, t1328, t1334, t1311, t1302, 0, 0, 0, 0, 0, 0, t1298, t1300, t1284, t1276, 0, 0, 0, 0, 0, 0, t1298, t1300, t1284, t1274; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1425, -qJDD(1), 0, t1404, 0, 0, 0, 0, 0, 0, t1377, t1378, t1397, t1358, 0, 0, 0, 0, 0, 0, t1329, t1335, t1312, t1303, 0, 0, 0, 0, 0, 0, t1299, t1301, t1285, t1277, 0, 0, 0, 0, 0, 0, t1299, t1301, t1285, t1275; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1425, 0, t1403, 0, 0, 0, 0, 0, 0, t1396, -t1393, t1400, t1389, 0, 0, 0, 0, 0, 0, -t1347, -t1349, -t1364, t1365, 0, 0, 0, 0, 0, 0, -t1322, -t1324, -t1338, t1330, 0, 0, 0, 0, 0, 0, -t1322, -t1324, -t1338, t1306; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1375, t1376, 0, t1357, 0, 0, 0, 0, 0, 0, t1328, t1334, t1311, t1302, 0, 0, 0, 0, 0, 0, t1298, t1300, t1284, t1276, 0, 0, 0, 0, 0, 0, t1298, t1300, t1284, t1274; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1406, t1402, t1411, t1381, 0, 0, 0, 0, 0, 0, t1346, t1352, t1333, t1316, 0, 0, 0, 0, 0, 0, t1310, t1314, t1295, t1281, 0, 0, 0, 0, 0, 0, t1310, t1314, t1295, t1279; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1401, t1405, -t1438, t1380, 0, 0, 0, 0, 0, 0, t1345, t1351, t1332, t1315, 0, 0, 0, 0, 0, 0, t1309, t1313, t1294, t1280, 0, 0, 0, 0, 0, 0, t1309, t1313, t1294, t1278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1396, t1393, -t1400, -t1389, 0, 0, 0, 0, 0, 0, t1347, t1349, t1364, -t1365, 0, 0, 0, 0, 0, 0, t1322, t1324, t1338, -t1330, 0, 0, 0, 0, 0, 0, t1322, t1324, t1338, -t1306; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1372, t1374, t1348, t1340, 0, 0, 0, 0, 0, 0, t1327, t1337, t1308, t1291, 0, 0, 0, 0, 0, 0, t1327, t1337, t1308, t1287; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1373, t1379, t1350, t1339, 0, 0, 0, 0, 0, 0, t1326, t1336, t1307, t1290, 0, 0, 0, 0, 0, 0, t1326, t1336, t1307, t1286; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1347, t1349, t1364, -t1365, 0, 0, 0, 0, 0, 0, t1322, t1324, t1338, -t1330, 0, 0, 0, 0, 0, 0, t1322, t1324, t1338, -t1306; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1342, t1344, t1323, t1305, 0, 0, 0, 0, 0, 0, t1342, t1344, t1323, t1297; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1343, t1361, t1325, t1304, 0, 0, 0, 0, 0, 0, t1343, t1361, t1325, t1296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1322, t1324, t1338, -t1330, 0, 0, 0, 0, 0, 0, t1322, t1324, t1338, -t1306; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1342, t1344, t1323, t1297; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1343, t1361, t1325, t1296; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1322, t1324, t1338, -t1306;];
f_new_reg = t1;
