% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5PRPRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d4,d5,theta1,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:55
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5PRPRR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRR5_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRR5_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRPRR5_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:55:18
% EndTime: 2019-12-05 15:55:20
% DurationCPUTime: 2.65s
% Computational Cost: add. (11649->194), mult. (27011->284), div. (0->0), fcn. (20255->10), ass. (0->163)
t1267 = qJD(2) ^ 2;
t1258 = cos(pkin(9));
t1252 = t1258 ^ 2;
t1256 = sin(pkin(9));
t1268 = t1256 ^ 2;
t1280 = t1252 + t1268;
t1234 = t1280 * t1267;
t1253 = qJD(4) + qJD(5);
t1300 = qJD(5) + t1253;
t1261 = sin(qJ(4));
t1264 = cos(qJ(4));
t1274 = t1256 * t1264 + t1258 * t1261;
t1299 = t1274 * qJDD(2);
t1291 = qJD(2) * t1258;
t1292 = qJD(2) * t1256;
t1224 = t1261 * t1292 - t1264 * t1291;
t1226 = t1274 * qJD(2);
t1260 = sin(qJ(5));
t1263 = cos(qJ(5));
t1195 = t1263 * t1224 + t1260 * t1226;
t1298 = t1195 ^ 2;
t1197 = -t1260 * t1224 + t1263 * t1226;
t1297 = t1197 ^ 2;
t1296 = t1224 ^ 2;
t1295 = t1226 ^ 2;
t1294 = t1253 ^ 2;
t1293 = -g(3) + qJDD(1);
t1290 = t1197 * t1195;
t1289 = t1224 * qJD(4);
t1288 = t1226 * qJD(4);
t1287 = t1226 * t1224;
t1286 = t1252 * t1267;
t1257 = sin(pkin(8));
t1259 = cos(pkin(8));
t1237 = t1257 * g(1) - t1259 * g(2);
t1285 = t1257 * t1237;
t1284 = t1258 * t1267;
t1283 = t1268 * t1267;
t1282 = qJD(5) - t1253;
t1238 = -t1259 * g(1) - t1257 * g(2);
t1262 = sin(qJ(2));
t1265 = cos(qJ(2));
t1217 = t1265 * t1238 + t1262 * t1293;
t1210 = -t1267 * pkin(2) + qJDD(2) * qJ(3) + t1217;
t1281 = -0.2e1 * qJD(3) * t1292 - t1258 * t1237;
t1182 = (pkin(3) * t1284 - pkin(6) * qJDD(2) - t1210) * t1256 + t1281;
t1188 = 0.2e1 * qJD(3) * t1291 + t1258 * t1210 - t1256 * t1237;
t1249 = t1258 * qJDD(2);
t1183 = -pkin(3) * t1286 + pkin(6) * t1249 + t1188;
t1166 = t1261 * t1182 + t1264 * t1183;
t1279 = t1256 * qJDD(2);
t1278 = t1262 * qJDD(2);
t1277 = t1265 * qJDD(2);
t1276 = -qJDD(4) - qJDD(5);
t1165 = t1264 * t1182 - t1261 * t1183;
t1205 = t1299 - t1289;
t1186 = t1264 * t1249 - t1261 * t1279;
t1272 = -t1186 + t1288;
t1275 = -t1260 * t1205 - t1263 * t1272;
t1216 = -t1262 * t1238 + t1265 * t1293;
t1201 = qJDD(4) - t1287;
t1209 = -qJDD(2) * pkin(2) - t1267 * qJ(3) + qJDD(3) - t1216;
t1193 = -pkin(3) * t1249 + t1209 + (-t1283 - t1286) * pkin(6);
t1271 = -t1263 * t1205 + t1260 * t1272;
t1266 = qJD(4) ^ 2;
t1239 = t1256 * t1284;
t1236 = -t1262 * t1267 + t1277;
t1235 = -t1265 * t1267 - t1278;
t1233 = t1280 * qJDD(2);
t1231 = t1259 * t1237;
t1228 = t1258 * t1234;
t1227 = t1256 * t1234;
t1218 = -t1266 - t1295;
t1215 = qJD(4) * pkin(4) - t1226 * pkin(7);
t1214 = -t1265 * t1228 - t1258 * t1278;
t1213 = t1265 * t1227 + t1256 * t1278;
t1212 = -t1262 * t1228 + t1258 * t1277;
t1211 = t1262 * t1227 - t1256 * t1277;
t1208 = t1265 * t1233 - t1262 * t1234;
t1207 = t1262 * t1233 + t1265 * t1234;
t1204 = t1299 - 0.2e1 * t1289;
t1203 = -t1186 + 0.2e1 * t1288;
t1202 = -qJDD(4) - t1287;
t1200 = -t1266 - t1296;
t1192 = -t1262 * t1216 + t1265 * t1217;
t1191 = t1265 * t1216 + t1262 * t1217;
t1190 = -t1294 - t1297;
t1189 = -t1295 - t1296;
t1187 = -t1256 * t1210 + t1281;
t1185 = t1264 * t1202 - t1261 * t1218;
t1184 = t1261 * t1202 + t1264 * t1218;
t1178 = t1264 * t1186 + t1261 * t1299;
t1177 = t1261 * t1186 - t1264 * t1299;
t1176 = t1264 * t1200 - t1261 * t1201;
t1175 = t1261 * t1200 + t1264 * t1201;
t1174 = t1276 - t1290;
t1173 = -t1276 - t1290;
t1172 = -t1294 - t1298;
t1171 = -t1256 * t1187 + t1258 * t1188;
t1170 = t1258 * t1187 + t1256 * t1188;
t1169 = -t1297 - t1298;
t1168 = -t1256 * t1184 + t1258 * t1185;
t1167 = t1258 * t1184 + t1256 * t1185;
t1164 = t1272 * pkin(4) - t1296 * pkin(7) + t1226 * t1215 + t1193;
t1163 = t1263 * t1174 - t1260 * t1190;
t1162 = t1260 * t1174 + t1263 * t1190;
t1161 = t1265 * t1171 + t1262 * t1209;
t1160 = t1262 * t1171 - t1265 * t1209;
t1159 = -t1256 * t1177 + t1258 * t1178;
t1158 = t1258 * t1177 + t1256 * t1178;
t1157 = t1282 * t1195 + t1271;
t1156 = -t1300 * t1195 - t1271;
t1155 = -t1282 * t1197 + t1275;
t1154 = t1300 * t1197 - t1275;
t1153 = -t1256 * t1175 + t1258 * t1176;
t1152 = t1258 * t1175 + t1256 * t1176;
t1151 = t1265 * t1168 + t1262 * t1204;
t1150 = t1262 * t1168 - t1265 * t1204;
t1149 = t1263 * t1172 - t1260 * t1173;
t1148 = t1260 * t1172 + t1263 * t1173;
t1147 = t1265 * t1153 + t1262 * t1203;
t1146 = t1262 * t1153 - t1265 * t1203;
t1145 = -t1296 * pkin(4) - t1272 * pkin(7) - qJD(4) * t1215 + t1166;
t1144 = t1265 * t1159 + t1262 * t1189;
t1143 = t1262 * t1159 - t1265 * t1189;
t1142 = (-t1205 - t1289) * pkin(7) + t1201 * pkin(4) + t1165;
t1141 = -t1261 * t1165 + t1264 * t1166;
t1140 = t1264 * t1165 + t1261 * t1166;
t1139 = -t1261 * t1162 + t1264 * t1163;
t1138 = t1264 * t1162 + t1261 * t1163;
t1137 = t1263 * t1155 - t1260 * t1157;
t1136 = t1260 * t1155 + t1263 * t1157;
t1135 = -t1261 * t1148 + t1264 * t1149;
t1134 = t1264 * t1148 + t1261 * t1149;
t1133 = t1260 * t1142 + t1263 * t1145;
t1132 = t1263 * t1142 - t1260 * t1145;
t1131 = -t1256 * t1140 + t1258 * t1141;
t1130 = t1258 * t1140 + t1256 * t1141;
t1129 = -t1256 * t1138 + t1258 * t1139;
t1128 = t1258 * t1138 + t1256 * t1139;
t1127 = t1265 * t1131 + t1262 * t1193;
t1126 = t1262 * t1131 - t1265 * t1193;
t1125 = -t1261 * t1136 + t1264 * t1137;
t1124 = t1264 * t1136 + t1261 * t1137;
t1123 = -t1256 * t1134 + t1258 * t1135;
t1122 = t1258 * t1134 + t1256 * t1135;
t1121 = t1265 * t1129 + t1262 * t1156;
t1120 = t1262 * t1129 - t1265 * t1156;
t1119 = t1265 * t1123 + t1262 * t1154;
t1118 = t1262 * t1123 - t1265 * t1154;
t1117 = -t1260 * t1132 + t1263 * t1133;
t1116 = t1263 * t1132 + t1260 * t1133;
t1115 = -t1256 * t1124 + t1258 * t1125;
t1114 = t1258 * t1124 + t1256 * t1125;
t1113 = t1265 * t1115 + t1262 * t1169;
t1112 = t1262 * t1115 - t1265 * t1169;
t1111 = -t1261 * t1116 + t1264 * t1117;
t1110 = t1264 * t1116 + t1261 * t1117;
t1109 = -t1256 * t1110 + t1258 * t1111;
t1108 = t1258 * t1110 + t1256 * t1111;
t1107 = t1265 * t1109 + t1262 * t1164;
t1106 = t1262 * t1109 - t1265 * t1164;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1259 * t1238 - t1285, 0, 0, 0, 0, 0, 0, t1259 * t1235, -t1259 * t1236, 0, t1259 * t1192 - t1285, 0, 0, 0, 0, 0, 0, t1259 * t1214, t1259 * t1213, t1259 * t1208, t1259 * t1161 + t1257 * t1170, 0, 0, 0, 0, 0, 0, t1259 * t1147 + t1257 * t1152, t1259 * t1151 + t1257 * t1167, t1259 * t1144 + t1257 * t1158, t1259 * t1127 + t1257 * t1130, 0, 0, 0, 0, 0, 0, t1259 * t1119 + t1257 * t1122, t1259 * t1121 + t1257 * t1128, t1259 * t1113 + t1257 * t1114, t1259 * t1107 + t1257 * t1108; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1257 * t1238 + t1231, 0, 0, 0, 0, 0, 0, t1257 * t1235, -t1257 * t1236, 0, t1257 * t1192 + t1231, 0, 0, 0, 0, 0, 0, t1257 * t1214, t1257 * t1213, t1257 * t1208, t1257 * t1161 - t1259 * t1170, 0, 0, 0, 0, 0, 0, t1257 * t1147 - t1259 * t1152, t1257 * t1151 - t1259 * t1167, t1257 * t1144 - t1259 * t1158, t1257 * t1127 - t1259 * t1130, 0, 0, 0, 0, 0, 0, t1257 * t1119 - t1259 * t1122, t1257 * t1121 - t1259 * t1128, t1257 * t1113 - t1259 * t1114, t1257 * t1107 - t1259 * t1108; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1293, 0, 0, 0, 0, 0, 0, t1236, t1235, 0, t1191, 0, 0, 0, 0, 0, 0, t1212, t1211, t1207, t1160, 0, 0, 0, 0, 0, 0, t1146, t1150, t1143, t1126, 0, 0, 0, 0, 0, 0, t1118, t1120, t1112, t1106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1238, 0, 0, 0, 0, 0, 0, t1235, -t1236, 0, t1192, 0, 0, 0, 0, 0, 0, t1214, t1213, t1208, t1161, 0, 0, 0, 0, 0, 0, t1147, t1151, t1144, t1127, 0, 0, 0, 0, 0, 0, t1119, t1121, t1113, t1107; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1237, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1237, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1170, 0, 0, 0, 0, 0, 0, -t1152, -t1167, -t1158, -t1130, 0, 0, 0, 0, 0, 0, -t1122, -t1128, -t1114, -t1108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1293, 0, 0, 0, 0, 0, 0, t1236, t1235, 0, t1191, 0, 0, 0, 0, 0, 0, t1212, t1211, t1207, t1160, 0, 0, 0, 0, 0, 0, t1146, t1150, t1143, t1126, 0, 0, 0, 0, 0, 0, t1118, t1120, t1112, t1106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1267, -qJDD(2), 0, t1217, 0, 0, 0, 0, 0, 0, -t1228, t1227, t1233, t1171, 0, 0, 0, 0, 0, 0, t1153, t1168, t1159, t1131, 0, 0, 0, 0, 0, 0, t1123, t1129, t1115, t1109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t1267, 0, t1216, 0, 0, 0, 0, 0, 0, t1249, -t1279, t1234, -t1209, 0, 0, 0, 0, 0, 0, -t1203, -t1204, -t1189, -t1193, 0, 0, 0, 0, 0, 0, -t1154, -t1156, -t1169, -t1164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1237, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1170, 0, 0, 0, 0, 0, 0, t1152, t1167, t1158, t1130, 0, 0, 0, 0, 0, 0, t1122, t1128, t1114, t1108; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1286, t1239, t1249, t1188, 0, 0, 0, 0, 0, 0, t1176, t1185, t1178, t1141, 0, 0, 0, 0, 0, 0, t1135, t1139, t1125, t1111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1239, -t1283, -t1279, t1187, 0, 0, 0, 0, 0, 0, t1175, t1184, t1177, t1140, 0, 0, 0, 0, 0, 0, t1134, t1138, t1124, t1110; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1249, t1279, -t1234, t1209, 0, 0, 0, 0, 0, 0, t1203, t1204, t1189, t1193, 0, 0, 0, 0, 0, 0, t1154, t1156, t1169, t1164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1200, t1202, t1186, t1166, 0, 0, 0, 0, 0, 0, t1149, t1163, t1137, t1117; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1201, t1218, -t1299, t1165, 0, 0, 0, 0, 0, 0, t1148, t1162, t1136, t1116; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1203, t1204, t1189, t1193, 0, 0, 0, 0, 0, 0, t1154, t1156, t1169, t1164; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1172, t1174, t1155, t1133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1173, t1190, t1157, t1132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1154, t1156, t1169, t1164;];
f_new_reg = t1;
