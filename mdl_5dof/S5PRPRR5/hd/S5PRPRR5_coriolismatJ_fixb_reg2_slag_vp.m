% Calculate inertial parameters regressor of coriolis matrix for
% S5PRPRR5
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d4,d5,theta1,theta3]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:55
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PRPRR5_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRR5_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRR5_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRPRR5_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:54:48
% EndTime: 2019-12-05 15:54:55
% DurationCPUTime: 3.00s
% Computational Cost: add. (4022->179), mult. (9197->287), div. (0->0), fcn. (10656->8), ass. (0->168)
t318 = qJD(4) + qJD(5);
t196 = cos(qJ(2));
t192 = cos(pkin(9));
t287 = cos(qJ(4));
t236 = t287 * t192;
t191 = sin(pkin(9));
t194 = sin(qJ(4));
t272 = t194 * t191;
t207 = t236 - t272;
t158 = t207 * t196;
t286 = cos(qJ(5));
t233 = t286 * t158;
t193 = sin(qJ(5));
t237 = t287 * t191;
t271 = t194 * t192;
t174 = t237 + t271;
t266 = t196 * t174;
t275 = t193 * t266;
t202 = t275 / 0.2e1 - t233 / 0.2e1;
t130 = t193 * t174 - t207 * t286;
t305 = t196 * t130;
t311 = -t305 / 0.2e1 + t202;
t323 = qJD(1) * t311;
t234 = t286 * t266;
t274 = t193 * t158;
t201 = -t274 / 0.2e1 - t234 / 0.2e1;
t167 = t286 * t174;
t273 = t193 * t207;
t299 = t167 + t273;
t304 = t196 * t299;
t312 = t304 / 0.2e1 + t201;
t322 = qJD(1) * t312;
t321 = t311 * qJD(2);
t320 = t312 * qJD(2);
t279 = t299 ^ 2;
t280 = t130 ^ 2;
t315 = -t279 + t280;
t319 = t315 * qJD(2);
t195 = sin(qJ(2));
t155 = t174 * t195;
t157 = t207 * t195;
t109 = -t193 * t155 + t286 * t157;
t313 = -t304 / 0.2e1 + t201;
t317 = qJD(2) * t313 - t109 * t318;
t220 = t286 * t155 + t193 * t157;
t310 = t305 / 0.2e1 + t202;
t316 = qJD(2) * t310 + t318 * t220;
t283 = pkin(6) + qJ(3);
t224 = t283 * t192;
t225 = t283 * t191;
t141 = t194 * t224 + t287 * t225;
t111 = -t174 * pkin(7) - t141;
t142 = -t194 * t225 + t287 * t224;
t112 = pkin(7) * t207 + t142;
t52 = t286 * t111 - t193 * t112;
t309 = t318 * t52;
t308 = t109 / 0.2e1;
t250 = t299 * qJD(2);
t306 = t130 * t250;
t248 = t130 * qJD(5);
t54 = -t130 * qJD(4) - t248;
t303 = qJD(2) * t130;
t302 = qJD(3) * t130;
t198 = t193 * t111;
t227 = -t198 / 0.2e1;
t189 = t191 ^ 2;
t190 = t192 ^ 2;
t182 = t190 + t189;
t235 = t286 * t112;
t53 = t235 + t198;
t297 = t174 ^ 2;
t294 = -t109 / 0.2e1;
t293 = -t299 / 0.2e1;
t218 = t167 / 0.2e1;
t292 = -t207 / 0.2e1;
t291 = -t174 / 0.2e1;
t290 = t193 / 0.2e1;
t289 = t195 / 0.2e1;
t12 = t109 * t293 + t299 * t308;
t288 = t12 * qJD(4);
t285 = pkin(4) * t193;
t284 = t174 * pkin(4);
t282 = qJD(4) * pkin(4);
t281 = t12 * qJD(2);
t18 = t227 + t198 / 0.2e1;
t278 = t18 * qJD(2);
t107 = -t234 - t274;
t110 = t233 - t275;
t187 = t195 * t196;
t22 = -t107 * t220 + t109 * t110 - t187;
t265 = t22 * qJD(1);
t36 = t279 + t280;
t263 = t36 * qJD(2);
t203 = -t130 * t290 + t286 * t293;
t48 = (t291 + t203) * pkin(4);
t260 = t48 * qJD(2);
t64 = t155 * t266 + t157 * t158 - t187;
t259 = t64 * qJD(1);
t85 = 0.2e1 * t218 + t273;
t257 = t85 * qJD(2);
t186 = -t192 * pkin(3) - pkin(2);
t153 = -pkin(4) * t207 + t186;
t256 = qJD(2) * t153;
t170 = t207 ^ 2;
t113 = t170 - t297;
t255 = t113 * qJD(2);
t200 = -t271 / 0.2e1 - t237 / 0.2e1;
t123 = (t174 / 0.2e1 + t200) * t196;
t254 = t123 * qJD(1);
t199 = -t236 / 0.2e1 + t272 / 0.2e1;
t124 = (t207 / 0.2e1 + t199) * t196;
t253 = t124 * qJD(1);
t128 = t218 - t167 / 0.2e1;
t252 = t128 * qJD(2);
t251 = t128 * qJD(5);
t249 = t299 * qJD(4);
t245 = t299 * qJD(5);
t140 = t170 + t297;
t244 = t140 * qJD(2);
t221 = t182 * t196;
t143 = t195 * t221 - t187;
t243 = t143 * qJD(1);
t242 = t207 * qJD(2);
t169 = t207 * qJD(4);
t241 = t174 * qJD(2);
t240 = t174 * qJD(4);
t239 = t182 * qJD(2);
t238 = t195 * qJD(2);
t230 = t299 * t303;
t229 = t207 * t241;
t228 = t207 * t240;
t226 = -t266 / 0.2e1;
t223 = t286 * qJD(4);
t222 = t286 * qJD(5);
t219 = qJD(2) * t186 + qJD(3);
t197 = (t294 + t308) * t52;
t204 = t110 * t290 + t107 * t286 / 0.2e1;
t1 = (t266 / 0.2e1 + t204) * pkin(4) + t197;
t7 = t153 * t284;
t217 = -t1 * qJD(1) + t7 * qJD(2);
t216 = t12 * qJD(1);
t13 = -t130 * t53 - t299 * t52;
t209 = -t130 * t294 + t220 * t293;
t26 = t289 + t209;
t215 = t26 * qJD(1) - t13 * qJD(2);
t41 = -t130 * t284 - t153 * t299;
t214 = t41 * qJD(2) + t322;
t42 = t130 * t153 - t284 * t299;
t213 = t42 * qJD(2) + t323;
t55 = t141 * t174 + t142 * t207;
t208 = t155 * t291 + t157 * t292;
t78 = t289 + t208;
t212 = t78 * qJD(1) - t55 * qJD(2);
t211 = t85 * qJD(5) + t249;
t159 = (0.1e1 / 0.2e1 - t190 / 0.2e1 - t189 / 0.2e1) * t195;
t176 = t182 * qJ(3);
t210 = t159 * qJD(1) - t176 * qJD(2);
t206 = t130 * t256 + t323;
t205 = -t256 * t299 + t322;
t160 = (0.1e1 + t182) * t289;
t126 = t200 * t196 + t226;
t125 = (t199 + t292) * t196;
t79 = t289 - t208;
t49 = t284 / 0.2e1 + t203 * pkin(4);
t27 = t289 - t209;
t21 = -t235 + 0.2e1 * t227;
t2 = -t197 + (t204 + t226) * pkin(4);
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t143 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t64 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t22 * qJD(2); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t238, -t196 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, -t192 * t238, t191 * t238, qJD(2) * t221, t243 + (-t195 * pkin(2) + qJ(3) * t221) * qJD(2) + t160 * qJD(3), 0, 0, 0, 0, 0, 0, t126 * qJD(4) - t207 * t238, t125 * qJD(4) + t174 * t238, (t158 * t207 + t174 * t266) * qJD(2), t259 + (t141 * t266 + t158 * t142 + t195 * t186) * qJD(2) + t79 * qJD(3), 0, 0, 0, 0, 0, 0, t130 * t238 + t318 * t313, t238 * t299 + t318 * t310, (-t107 * t299 - t110 * t130) * qJD(2) + t288, t265 + (t107 * t52 + t110 * t53 + t195 * t153) * qJD(2) + t27 * qJD(3) + t2 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t160 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t79 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t27 * qJD(2); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t126 * qJD(2) - t157 * qJD(4), t125 * qJD(2) + t155 * qJD(4), 0, 0, 0, 0, 0, 0, 0, 0, t317, t316, t281, t2 * qJD(2) + (-t109 * t286 - t193 * t220) * t282; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t317, t316, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t159 * qJD(3) - t243, 0, 0, 0, 0, 0, 0, -t123 * qJD(4), -t124 * qJD(4), 0, -t78 * qJD(3) - t259, 0, 0, 0, 0, 0, 0, -t318 * t312, -t318 * t311, t288, -t26 * qJD(3) - t1 * qJD(4) - t265; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t182 * qJD(3), t176 * qJD(3), t228, t113 * qJD(4), 0, -t228, 0, 0, t186 * t240, t186 * t169, t140 * qJD(3), t55 * qJD(3), t54 * t299, t318 * t315, 0, (t245 + t249) * t130, 0, 0, -t41 * qJD(4) + t153 * t245, -t42 * qJD(4) - t153 * t248, t36 * qJD(3), t13 * qJD(3) + t7 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t239, -t210, 0, 0, 0, 0, 0, 0, 0, 0, t244, -t212, 0, 0, 0, 0, 0, 0, t251, 0, t263, t49 * qJD(4) - t215; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t229, t255, t169, -t229, -t240, 0, -t142 * qJD(4) + t186 * t241 - t254, t141 * qJD(4) + t186 * t242 - t253, 0, 0, -t230, t319, t54, t306, -t211, 0, -qJD(4) * t53 + t21 * qJD(5) - t214, -t213 - t309, (t130 * t286 - t193 * t299) * t282 + t216, t49 * qJD(3) + (t193 * t52 - t286 * t53) * t282 + t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t306, t319, t54, t306, -t85 * qJD(4) - t245, 0, t128 * qJD(3) + t21 * qJD(4) - t53 * qJD(5) - t205, -t206 - t309, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t159 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t78 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t26 * qJD(2); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t239, t210, 0, 0, 0, 0, 0, 0, t240, t169, -t244, t212, 0, 0, 0, 0, 0, 0, t211, t54, -t263, -t48 * qJD(4) + t215; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t241, t242, 0, 0, 0, 0, 0, 0, 0, 0, t250, -t303, 0, -t260; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t257, -t303, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t123 * qJD(2), t124 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, t320, t321, -t281, t1 * qJD(2); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t229, -t255, 0, t229, 0, 0, -t174 * t219 + t254, -t207 * t219 + t253, 0, 0, t230, -t319, 0, -t306, -t251, 0, -qJD(3) * t299 - t18 * qJD(5) + t214, t213 + t302, -t216, t48 * qJD(3) - t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t241, -t242, 0, 0, 0, 0, 0, 0, 0, 0, -t250, t303, 0, t260; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(5) * t285, -pkin(4) * t222, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t252, 0, -t285 * t318 - t278, (-t223 - t222) * pkin(4), 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t320, t321, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t306, -t319, 0, -t306, t128 * qJD(4), 0, -t85 * qJD(3) + t18 * qJD(4) + t205, t206 + t302, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t257, t303, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t252, 0, t193 * t282 + t278, pkin(4) * t223, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t3;
