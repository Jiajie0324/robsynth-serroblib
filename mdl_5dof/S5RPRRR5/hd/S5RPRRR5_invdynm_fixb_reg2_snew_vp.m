% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:17
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRRR5_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR5_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR5_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR5_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR5_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR5_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:16:51
% EndTime: 2019-12-05 18:17:07
% DurationCPUTime: 16.93s
% Computational Cost: add. (72022->545), mult. (100093->769), div. (0->0), fcn. (62071->10), ass. (0->380)
t1003 = cos(qJ(1));
t1002 = cos(qJ(3));
t989 = qJDD(1) + qJDD(3);
t1049 = t1002 * t989;
t991 = qJD(1) + qJD(3);
t987 = t991 ^ 2;
t998 = sin(qJ(3));
t957 = -t998 * t987 + t1049;
t993 = g(1) - qJDD(2);
t1090 = -pkin(6) * t957 - t998 * t993;
t1061 = t998 * t989;
t955 = t1002 * t987 + t1061;
t994 = sin(pkin(9));
t995 = cos(pkin(9));
t895 = t994 * t955 - t995 * t957;
t929 = pkin(6) * t955 - t1002 * t993;
t1098 = qJ(2) * t895 + t1090 * t995 + t994 * t929;
t891 = t995 * t955 + t994 * t957;
t813 = qJ(2) * t891 - t1090 * t994 + t995 * t929;
t999 = sin(qJ(1));
t836 = t1003 * t895 + t999 * t891;
t1108 = pkin(5) * t836 + t1003 * t1098 + t999 * t813;
t1099 = t1003 * t891 - t999 * t895;
t1107 = pkin(5) * t1099 + t1003 * t813 - t1098 * t999;
t975 = t1003 * g(2) + t999 * g(3);
t1011 = qJDD(1) * pkin(1) + t975;
t1005 = qJD(1) ^ 2;
t974 = t999 * g(2) - t1003 * g(3);
t1015 = t1005 * pkin(1) - t974;
t1008 = t995 * t1011 + t994 * t1015;
t1007 = qJDD(1) * pkin(2) + t1008;
t902 = t994 * t1011 - t995 * t1015;
t900 = -t1005 * pkin(2) + t902;
t844 = -t1002 * t1007 + t998 * t900;
t845 = t1002 * t900 + t998 * t1007;
t1038 = t1002 * t845 + t998 * t844;
t773 = t1002 * t844 - t998 * t845;
t1069 = t994 * t773;
t1094 = t1038 * t995 + t1069;
t1068 = t995 * t773;
t713 = -t1038 * t994 + t1068;
t1105 = t1003 * t1094 + t999 * t713;
t1104 = t1003 * t713 - t1094 * t999;
t1037 = -t1008 * t994 + t995 * t902;
t853 = -t1008 * t995 - t994 * t902;
t1047 = t1003 * t853;
t1095 = -t1037 * t999 + t1047;
t1059 = t999 * t853;
t1093 = -t1003 * t1037 - t1059;
t1000 = cos(qJ(5));
t1001 = cos(qJ(4));
t1050 = t1001 * t991;
t997 = sin(qJ(4));
t1071 = t991 * t997;
t996 = sin(qJ(5));
t936 = -t1000 * t1050 + t996 * t1071;
t938 = (t1000 * t997 + t1001 * t996) * t991;
t886 = t938 * t936;
t988 = qJDD(4) + qJDD(5);
t1087 = -t886 + t988;
t1092 = t1087 * t996;
t1091 = t1000 * t1087;
t964 = t994 * qJDD(1) + t995 * t1005;
t965 = t995 * qJDD(1) - t994 * t1005;
t1019 = t1003 * t965 - t999 * t964;
t1020 = -qJ(2) * t965 - t994 * t993;
t933 = qJ(2) * t964 - t995 * t993;
t1089 = pkin(5) * t1019 - t1003 * t1020 - t999 * t933;
t1018 = t1003 * t964 + t999 * t965;
t1088 = pkin(5) * t1018 + t1003 * t933 - t1020 * t999;
t827 = -t987 * pkin(3) + t989 * pkin(7) + t845;
t802 = t1001 * t993 + t997 * t827;
t803 = t1001 * t827 - t997 * t993;
t754 = t1001 * t803 + t997 * t802;
t1057 = qJD(4) * t991;
t1039 = t997 * t1057;
t1051 = t1001 * t989;
t1012 = t1039 - t1051;
t1062 = t997 * t989;
t977 = qJD(4) * t1050;
t950 = t977 + t1062;
t857 = -t936 * qJD(5) + t1000 * t950 - t996 * t1012;
t990 = qJD(4) + qJD(5);
t925 = t990 * t936;
t1086 = -t925 + t857;
t1036 = t1000 * t1012 + t996 * t950;
t831 = (qJD(5) - t990) * t938 + t1036;
t934 = t936 ^ 2;
t935 = t938 ^ 2;
t986 = t990 ^ 2;
t1077 = t1001 ^ 2;
t1076 = pkin(1) * t993;
t973 = t1001 * t987 * t997;
t961 = qJDD(4) + t973;
t780 = (-t950 + t977) * pkin(8) + t961 * pkin(4) - t802;
t963 = qJD(4) * pkin(4) - pkin(8) * t1071;
t979 = t1077 * t987;
t781 = -pkin(4) * t979 - t1012 * pkin(8) - qJD(4) * t963 + t803;
t730 = -t1000 * t780 + t996 * t781;
t731 = t1000 * t781 + t996 * t780;
t683 = -t1000 * t730 + t996 * t731;
t1075 = pkin(4) * t683;
t835 = t925 + t857;
t763 = -t1000 * t835 - t831 * t996;
t1074 = pkin(4) * t763;
t1073 = t990 * t938;
t1072 = t990 * t996;
t992 = t997 ^ 2;
t1070 = t992 * t987;
t826 = -t989 * pkin(3) - t987 * pkin(7) + t844;
t785 = t1012 * pkin(4) - pkin(8) * t979 + t963 * t1071 + t826;
t1067 = t996 * t785;
t879 = t886 + t988;
t1066 = t996 * t879;
t1065 = t997 * t683;
t818 = t997 * t826;
t1064 = t997 * t961;
t962 = qJDD(4) - t973;
t1063 = t997 * t962;
t1058 = -pkin(3) * t826 + pkin(7) * t754;
t1056 = t1000 * t785;
t1055 = t1000 * t879;
t1054 = t1000 * t990;
t1053 = t1001 * t683;
t819 = t1001 * t826;
t951 = -0.2e1 * t1039 + t1051;
t903 = t1001 * t951;
t1052 = t1001 * t962;
t1045 = t992 + t1077;
t1044 = t998 * t886;
t1004 = qJD(4) ^ 2;
t969 = -t1004 - t1070;
t916 = -t997 * t969 - t1052;
t949 = 0.2e1 * t977 + t1062;
t1043 = -pkin(3) * t949 + pkin(7) * t916 + t818;
t971 = -t979 - t1004;
t914 = t1001 * t971 - t1064;
t1042 = pkin(3) * t951 + pkin(7) * t914 - t819;
t724 = -t1002 * t826 + t998 * t754;
t1041 = pkin(2) * t724 + t1058;
t1040 = t1002 * t886;
t684 = t1000 * t731 + t996 * t730;
t765 = -t1000 * t831 + t996 * t835;
t860 = -t934 - t935;
t662 = -pkin(4) * t860 + pkin(8) * t765 + t684;
t669 = -pkin(8) * t763 - t683;
t707 = t1001 * t765 - t997 * t763;
t1034 = -pkin(3) * t860 + pkin(7) * t707 + t1001 * t662 + t997 * t669;
t873 = -t986 - t934;
t809 = t1000 * t873 - t1092;
t830 = (qJD(5) + t990) * t938 + t1036;
t716 = -pkin(4) * t830 + pkin(8) * t809 - t1056;
t808 = t996 * t873 + t1091;
t748 = -pkin(8) * t808 + t1067;
t757 = t1001 * t809 - t997 * t808;
t1033 = -pkin(3) * t830 + pkin(7) * t757 + t1001 * t716 + t997 * t748;
t917 = -t935 - t986;
t843 = -t996 * t917 - t1055;
t722 = -pkin(4) * t1086 + pkin(8) * t843 + t1067;
t842 = t1000 * t917 - t1066;
t750 = -pkin(8) * t842 + t1056;
t769 = t1001 * t843 - t997 * t842;
t1032 = -pkin(3) * t1086 + pkin(7) * t769 + t1001 * t722 + t997 * t750;
t953 = t1045 * t989;
t959 = t979 + t1070;
t1031 = pkin(3) * t959 + pkin(7) * t953 + t754;
t868 = -t1002 * t949 + t998 * t916;
t1030 = pkin(2) * t868 + t1043;
t867 = t1002 * t951 + t998 * t914;
t1029 = pkin(2) * t867 + t1042;
t1028 = t998 * t973;
t1027 = t1002 * t973;
t1026 = pkin(2) * t957 - t844;
t966 = t999 * qJDD(1) + t1003 * t1005;
t1025 = pkin(5) * t966 - t1003 * g(1);
t699 = -t1002 * t860 + t998 * t707;
t1024 = pkin(2) * t699 + t1034;
t727 = -t1002 * t830 + t998 * t757;
t1023 = pkin(2) * t727 + t1033;
t734 = -t1002 * t1086 + t998 * t769;
t1022 = pkin(2) * t734 + t1032;
t897 = t1002 * t959 + t998 * t953;
t1021 = pkin(2) * t897 + t1031;
t753 = t1001 * t802 - t997 * t803;
t1017 = -t1003 * t975 - t999 * t974;
t1016 = t1003 * t974 - t999 * t975;
t1014 = pkin(4) * t808 - t730;
t655 = t1001 * t684 - t1065;
t672 = -pkin(4) * t785 + pkin(8) * t684;
t1013 = -pkin(3) * t785 + pkin(7) * t655 - pkin(8) * t1065 + t1001 * t672;
t650 = -t1002 * t785 + t998 * t655;
t1010 = pkin(2) * t650 + t1013;
t1009 = pkin(4) * t842 - t731;
t1006 = -pkin(2) * t955 - t845;
t970 = t979 - t1004;
t968 = t1004 - t1070;
t967 = -t1003 * qJDD(1) + t999 * t1005;
t960 = -t979 + t1070;
t954 = t1001 * t961;
t945 = -pkin(5) * t967 + t999 * g(1);
t944 = t1045 * t1057;
t923 = -t935 + t986;
t922 = t934 - t986;
t921 = t998 * qJDD(4) + t1002 * t944;
t920 = -t1002 * qJDD(4) + t998 * t944;
t919 = t1001 * t950 - t992 * t1057;
t918 = t997 * t1012 - t1077 * t1057;
t915 = -t997 * t968 + t954;
t913 = t1001 * t970 - t1063;
t912 = t1001 * t969 - t1063;
t911 = t1001 * t968 + t1064;
t910 = t997 * t971 + t954;
t909 = t997 * t970 + t1052;
t904 = (t950 + t977) * t997;
t898 = t1002 * t953 - t998 * t959;
t888 = -t997 * t949 + t903;
t887 = t1001 * t949 + t997 * t951;
t885 = t935 - t934;
t884 = t1002 * t915 + t997 * t1061;
t883 = t1002 * t913 + t998 * t1051;
t882 = -t997 * t1049 + t998 * t915;
t881 = -t1001 * t1049 + t998 * t913;
t877 = t1002 * t919 - t1028;
t876 = t1002 * t918 + t1028;
t875 = t998 * t919 + t1027;
t874 = t998 * t918 - t1027;
t872 = pkin(1) * t965 + t1008;
t871 = -pkin(1) * t964 - t902;
t870 = t1002 * t916 + t998 * t949;
t869 = t1002 * t914 - t998 * t951;
t866 = (-t1000 * t936 + t938 * t996) * t990;
t865 = (-t1000 * t938 - t936 * t996) * t990;
t862 = -t994 * t920 + t995 * t921;
t861 = t995 * t920 + t994 * t921;
t859 = t1002 * t888 + t998 * t960;
t858 = -t1002 * t960 + t998 * t888;
t856 = -t938 * qJD(5) - t1036;
t850 = pkin(1) * t853;
t849 = t1000 * t922 - t1066;
t848 = -t996 * t923 + t1091;
t847 = t996 * t922 + t1055;
t846 = t1000 * t923 + t1092;
t841 = qJ(2) * t1037 + t1076;
t839 = -t994 * t897 + t995 * t898;
t838 = t995 * t897 + t994 * t898;
t824 = t1000 * t857 - t938 * t1072;
t823 = t938 * t1054 + t996 * t857;
t822 = t936 * t1054 - t996 * t856;
t821 = t1000 * t856 + t936 * t1072;
t817 = -t994 * t882 + t995 * t884;
t816 = -t994 * t881 + t995 * t883;
t815 = t995 * t882 + t994 * t884;
t814 = t995 * t881 + t994 * t883;
t807 = -t994 * t875 + t995 * t877;
t806 = -t994 * t874 + t995 * t876;
t805 = t995 * t875 + t994 * t877;
t804 = t995 * t874 + t994 * t876;
t799 = -t994 * t868 + t995 * t870;
t798 = -t994 * t867 + t995 * t869;
t797 = t995 * t868 + t994 * t870;
t796 = t995 * t867 + t994 * t869;
t795 = t1001 * t866 - t997 * t865;
t794 = t1001 * t865 + t997 * t866;
t793 = -pkin(7) * t912 + t819;
t792 = -pkin(7) * t910 + t818;
t791 = t1002 * t795 + t998 * t988;
t790 = -t1002 * t988 + t998 * t795;
t789 = -pkin(3) * t912 + t803;
t788 = -pkin(3) * t910 + t802;
t787 = -t994 * t858 + t995 * t859;
t786 = t995 * t858 + t994 * t859;
t784 = -pkin(1) * t895 + t1026;
t783 = -pkin(1) * t891 + t1006;
t778 = t1001 * t849 - t997 * t847;
t777 = t1001 * t848 - t997 * t846;
t776 = t1001 * t847 + t997 * t849;
t775 = t1001 * t846 + t997 * t848;
t770 = pkin(2) * t773;
t768 = t1001 * t842 + t997 * t843;
t766 = pkin(2) * t993 + pkin(6) * t1038;
t764 = -t1000 * t830 - t1086 * t996;
t762 = t1000 * t1086 - t996 * t830;
t761 = t1001 * t824 - t997 * t823;
t760 = t1001 * t822 - t997 * t821;
t759 = t1001 * t823 + t997 * t824;
t758 = t1001 * t821 + t997 * t822;
t756 = t1001 * t808 + t997 * t809;
t746 = t1002 * t761 + t1044;
t745 = t1002 * t760 - t1044;
t744 = t998 * t761 - t1040;
t743 = t998 * t760 + t1040;
t742 = -pkin(6) * t897 + t1002 * t753;
t741 = pkin(6) * t898 + t998 * t753;
t740 = t1002 * t778 - t998 * t831;
t739 = t1002 * t777 + t998 * t835;
t738 = t1002 * t831 + t998 * t778;
t737 = -t1002 * t835 + t998 * t777;
t736 = t1002 * t769 + t1086 * t998;
t735 = -t994 * t790 + t995 * t791;
t733 = t995 * t790 + t994 * t791;
t728 = t1002 * t757 + t998 * t830;
t725 = t1002 * t754 + t998 * t826;
t720 = pkin(1) * t797 + t1030;
t719 = pkin(1) * t796 + t1029;
t718 = -pkin(6) * t868 + t1002 * t793 - t998 * t789;
t717 = -pkin(6) * t867 + t1002 * t792 - t998 * t788;
t710 = -pkin(2) * t912 + pkin(6) * t870 + t1002 * t789 + t998 * t793;
t709 = -pkin(2) * t910 + pkin(6) * t869 + t1002 * t788 + t998 * t792;
t708 = pkin(1) * t838 + t1021;
t706 = t1001 * t764 - t997 * t762;
t705 = t1001 * t763 + t997 * t765;
t704 = t1001 * t762 + t997 * t764;
t702 = t1002 * t706 + t998 * t885;
t701 = -t1002 * t885 + t998 * t706;
t700 = t1002 * t707 + t998 * t860;
t697 = -t994 * t744 + t995 * t746;
t696 = -t994 * t743 + t995 * t745;
t695 = t995 * t744 + t994 * t746;
t694 = t995 * t743 + t994 * t745;
t693 = -pkin(1) * t713 - t770;
t692 = -t994 * t738 + t995 * t740;
t691 = -t994 * t737 + t995 * t739;
t690 = t995 * t738 + t994 * t740;
t689 = t995 * t737 + t994 * t739;
t688 = -t994 * t734 + t995 * t736;
t687 = t995 * t734 + t994 * t736;
t686 = -pkin(3) * t768 - t1009;
t685 = -pkin(3) * t705 - t1074;
t682 = -pkin(3) * t756 - t1014;
t681 = -qJ(2) * t838 - t994 * t741 + t995 * t742;
t680 = qJ(2) * t839 + t995 * t741 + t994 * t742;
t679 = -t994 * t727 + t995 * t728;
t678 = t995 * t727 + t994 * t728;
t677 = -t994 * t724 + t995 * t725;
t676 = t995 * t724 + t994 * t725;
t675 = pkin(6) * t1068 + qJ(2) * t713 - t994 * t766;
t674 = pkin(6) * t1069 + qJ(2) * t1094 + t995 * t766 + t1076;
t673 = -pkin(7) * t768 + t1001 * t750 - t997 * t722;
t670 = -pkin(6) * t724 - (pkin(3) * t998 - pkin(7) * t1002) * t753;
t667 = -pkin(7) * t756 + t1001 * t748 - t997 * t716;
t666 = -qJ(2) * t797 - t994 * t710 + t995 * t718;
t665 = -qJ(2) * t796 - t994 * t709 + t995 * t717;
t664 = -pkin(1) * t912 + qJ(2) * t799 + t995 * t710 + t994 * t718;
t663 = -pkin(1) * t910 + qJ(2) * t798 + t995 * t709 + t994 * t717;
t660 = -t994 * t701 + t995 * t702;
t659 = t995 * t701 + t994 * t702;
t658 = -t994 * t699 + t995 * t700;
t657 = t995 * t699 + t994 * t700;
t656 = pkin(6) * t725 - (-pkin(3) * t1002 - pkin(7) * t998 - pkin(2)) * t753;
t654 = t997 * t684 + t1053;
t652 = pkin(1) * t676 + t1041;
t651 = t1002 * t655 + t998 * t785;
t648 = -pkin(6) * t734 + t1002 * t673 - t998 * t686;
t647 = pkin(1) * t687 + t1022;
t646 = -pkin(6) * t727 + t1002 * t667 - t998 * t682;
t645 = -pkin(2) * t768 + pkin(6) * t736 + t1002 * t686 + t998 * t673;
t644 = pkin(1) * t678 + t1023;
t643 = -pkin(3) * t654 - t1075;
t642 = -pkin(2) * t756 + pkin(6) * t728 + t1002 * t682 + t998 * t667;
t641 = -pkin(7) * t705 + t1001 * t669 - t997 * t662;
t640 = -qJ(2) * t676 - t994 * t656 + t995 * t670;
t639 = -pkin(7) * t654 - pkin(8) * t1053 - t997 * t672;
t638 = pkin(1) * t753 + qJ(2) * t677 + t995 * t656 + t994 * t670;
t637 = -t994 * t650 + t995 * t651;
t636 = t995 * t650 + t994 * t651;
t635 = -pkin(6) * t699 + t1002 * t641 - t998 * t685;
t634 = -pkin(2) * t705 + pkin(6) * t700 + t1002 * t685 + t998 * t641;
t633 = pkin(1) * t657 + t1024;
t632 = -qJ(2) * t687 - t994 * t645 + t995 * t648;
t631 = -pkin(1) * t768 + qJ(2) * t688 + t995 * t645 + t994 * t648;
t630 = -qJ(2) * t678 - t994 * t642 + t995 * t646;
t629 = -pkin(1) * t756 + qJ(2) * t679 + t995 * t642 + t994 * t646;
t628 = -pkin(6) * t650 + t1002 * t639 - t998 * t643;
t627 = pkin(1) * t636 + t1010;
t626 = -pkin(2) * t654 + pkin(6) * t651 + t1002 * t643 + t998 * t639;
t625 = -qJ(2) * t657 - t994 * t634 + t995 * t635;
t624 = -pkin(1) * t705 + qJ(2) * t658 + t995 * t634 + t994 * t635;
t623 = -qJ(2) * t636 - t994 * t626 + t995 * t628;
t622 = -pkin(1) * t654 + qJ(2) * t637 + t995 * t626 + t994 * t628;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t975, -t974, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t872, t871, 0, -t850, 0, 0, 0, 0, 0, t989, t784, t783, 0, t693, t904, t887, t911, t903, t909, 0, t719, t720, t708, t652, t759, t704, t775, t758, t776, t794, t644, t647, t633, t627; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t966, 0, t967, 0, t1025, t945, -t1016, -pkin(5) * t1016, 0, 0, -t1018, 0, -t1019, 0, t1088, t1089, t1093, pkin(5) * t1093 - qJ(2) * t1059 - t1003 * t841, 0, 0, -t1099, 0, t836, 0, t1107, -t1108, -t1105, -pkin(5) * t1105 - t1003 * t674 - t999 * t675, -t1003 * t805 - t999 * t807, -t1003 * t786 - t999 * t787, -t1003 * t815 - t999 * t817, -t1003 * t804 - t999 * t806, -t1003 * t814 - t999 * t816, -t1003 * t861 - t999 * t862, -t999 * t665 - t1003 * t663 - pkin(5) * (t1003 * t798 - t999 * t796), -t999 * t666 - t1003 * t664 - pkin(5) * (t1003 * t799 - t999 * t797), -t999 * t681 - t1003 * t680 - pkin(5) * (t1003 * t839 - t999 * t838), -t999 * t640 - t1003 * t638 - pkin(5) * (t1003 * t677 - t999 * t676), -t1003 * t695 - t999 * t697, -t1003 * t659 - t999 * t660, -t1003 * t689 - t999 * t691, -t1003 * t694 - t999 * t696, -t1003 * t690 - t999 * t692, -t1003 * t733 - t999 * t735, -t999 * t630 - t1003 * t629 - pkin(5) * (t1003 * t679 - t999 * t678), -t999 * t632 - t1003 * t631 - pkin(5) * (t1003 * t688 - t999 * t687), -t999 * t625 - t1003 * t624 - pkin(5) * (t1003 * t658 - t999 * t657), -t999 * t623 - t1003 * t622 - pkin(5) * (t1003 * t637 - t999 * t636); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t967, 0, -t966, 0, -t945, t1025, t1017, pkin(5) * t1017, 0, 0, t1019, 0, -t1018, 0, -t1089, t1088, t1095, pkin(5) * t1095 + qJ(2) * t1047 - t999 * t841, 0, 0, -t836, 0, -t1099, 0, t1108, t1107, t1104, pkin(5) * t1104 + t1003 * t675 - t999 * t674, t1003 * t807 - t999 * t805, t1003 * t787 - t999 * t786, t1003 * t817 - t999 * t815, t1003 * t806 - t999 * t804, t1003 * t816 - t999 * t814, t1003 * t862 - t999 * t861, t1003 * t665 - t999 * t663 + pkin(5) * (-t1003 * t796 - t999 * t798), t1003 * t666 - t999 * t664 + pkin(5) * (-t1003 * t797 - t999 * t799), t1003 * t681 - t999 * t680 + pkin(5) * (-t1003 * t838 - t999 * t839), t1003 * t640 - t999 * t638 + pkin(5) * (-t1003 * t676 - t999 * t677), t1003 * t697 - t999 * t695, t1003 * t660 - t999 * t659, t1003 * t691 - t999 * t689, t1003 * t696 - t999 * t694, t1003 * t692 - t999 * t690, t1003 * t735 - t999 * t733, t1003 * t630 - t999 * t629 + pkin(5) * (-t1003 * t678 - t999 * t679), t1003 * t632 - t999 * t631 + pkin(5) * (-t1003 * t687 - t999 * t688), t1003 * t625 - t999 * t624 + pkin(5) * (-t1003 * t657 - t999 * t658), t1003 * t623 - t999 * t622 + pkin(5) * (-t1003 * t636 - t999 * t637); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1005, 0, 0, -g(1), -t975, 0, 0, 0, t965, 0, -t964, 0, t1020, t933, t853, qJ(2) * t853, 0, 0, -t895, 0, -t891, 0, t1098, t813, t713, t675, t807, t787, t817, t806, t816, t862, t665, t666, t681, t640, t697, t660, t691, t696, t692, t735, t630, t632, t625, t623; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1005, 0, qJDD(1), 0, g(1), 0, t974, 0, 0, 0, t964, 0, t965, 0, -t933, t1020, t1037, t841, 0, 0, t891, 0, -t895, 0, -t813, t1098, t1094, t674, t805, t786, t815, t804, t814, t861, t663, t664, t680, t638, t695, t659, t689, t694, t690, t733, t629, t631, t624, t622; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t975, -t974, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t872, t871, 0, -t850, 0, 0, 0, 0, 0, t989, t784, t783, 0, t693, t904, t887, t911, t903, t909, 0, t719, t720, t708, t652, t759, t704, t775, t758, t776, t794, t644, t647, t633, t627; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1005, 0, 0, -t993, -t1008, 0, 0, 0, t957, 0, -t955, 0, t1090, t929, t773, pkin(6) * t773, t877, t859, t884, t876, t883, t921, t717, t718, t742, t670, t746, t702, t739, t745, t740, t791, t646, t648, t635, t628; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1005, 0, qJDD(1), 0, t993, 0, t902, 0, 0, 0, t955, 0, t957, 0, -t929, t1090, t1038, t766, t875, t858, t882, t874, t881, t920, t709, t710, t741, t656, t744, t701, t737, t743, t738, t790, t642, t645, t634, t626; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1008, -t902, 0, 0, 0, 0, 0, 0, 0, t989, t1026, t1006, 0, -t770, t904, t887, t911, t903, t909, 0, t1029, t1030, t1021, t1041, t759, t704, t775, t758, t776, t794, t1023, t1022, t1024, t1010; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t989, 0, -t987, 0, 0, -t993, t844, 0, t919, t888, t915, t918, t913, t944, t792, t793, t753, pkin(7) * t753, t761, t706, t777, t760, t778, t795, t667, t673, t641, t639; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t987, 0, t989, 0, t993, 0, t845, 0, t973, -t960, -t1062, -t973, -t1051, -qJDD(4), t788, t789, 0, pkin(3) * t753, -t886, -t885, -t835, t886, t831, -t988, t682, t686, t685, t643; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t989, -t844, -t845, 0, 0, t904, t887, t911, t903, t909, 0, t1042, t1043, t1031, t1058, t759, t704, t775, t758, t776, t794, t1033, t1032, t1034, t1013; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t950, t951, t961, -t977, t970, t977, 0, t826, t802, 0, t824, t764, t848, t822, t849, t866, t748, t750, t669, -pkin(8) * t683; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1039, t949, t968, -t1012, t962, -t1039, -t826, 0, t803, 0, t823, t762, t846, t821, t847, t865, t716, t722, t662, t672; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t973, t960, t1062, t973, t1051, qJDD(4), -t802, -t803, 0, 0, t886, t885, t835, -t886, -t831, t988, t1014, t1009, t1074, t1075; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t857, -t830, t1087, t925, t922, -t925, 0, t785, t730, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1073, t1086, t923, t856, t879, -t1073, -t785, 0, t731, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t886, t885, t835, -t886, -t831, t988, -t730, -t731, 0, 0;];
m_new_reg = t1;
