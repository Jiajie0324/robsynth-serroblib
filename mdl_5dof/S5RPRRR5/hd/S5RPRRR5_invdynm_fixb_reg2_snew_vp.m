% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPRRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:54
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPRRR5_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR5_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR5_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR5_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR5_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR5_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:54:27
% EndTime: 2020-01-03 11:54:42
% DurationCPUTime: 15.72s
% Computational Cost: add. (72022->546), mult. (100093->769), div. (0->0), fcn. (62071->10), ass. (0->380)
t1015 = sin(qJ(1));
t1019 = cos(qJ(1));
t1010 = sin(pkin(9));
t1011 = cos(pkin(9));
t1009 = g(1) - qJDD(2);
t1014 = sin(qJ(3));
t1007 = qJD(1) + qJD(3);
t1003 = t1007 ^ 2;
t1005 = qJDD(1) + qJDD(3);
t1018 = cos(qJ(3));
t1062 = t1018 * t1005;
t968 = t1014 * t1003 - t1062;
t1109 = pkin(6) * t968 - t1014 * t1009;
t1065 = t1014 * t1005;
t965 = t1018 * t1003 + t1065;
t905 = t1010 * t965 + t1011 * t968;
t939 = pkin(6) * t965 - t1018 * t1009;
t1117 = qJ(2) * t905 + t1010 * t939 + t1011 * t1109;
t902 = t1010 * t968 - t1011 * t965;
t1118 = t1015 * t902 - t1019 * t905;
t820 = qJ(2) * t902 + t1010 * t1109 - t1011 * t939;
t1127 = pkin(5) * t1118 + t1015 * t820 - t1019 * t1117;
t1119 = t1015 * t905 + t1019 * t902;
t1126 = pkin(5) * t1119 + t1015 * t1117 + t1019 * t820;
t988 = t1019 * g(2) + t1015 * g(3);
t1027 = qJDD(1) * pkin(1) - t988;
t1021 = qJD(1) ^ 2;
t987 = t1015 * g(2) - t1019 * g(3);
t1031 = t1021 * pkin(1) + t987;
t1024 = t1010 * t1031 + t1011 * t1027;
t1023 = qJDD(1) * pkin(2) + t1024;
t912 = t1010 * t1027 - t1011 * t1031;
t910 = -t1021 * pkin(2) + t912;
t854 = t1014 * t910 - t1018 * t1023;
t855 = t1014 * t1023 + t1018 * t910;
t1048 = t1014 * t854 + t1018 * t855;
t782 = t1014 * t855 - t1018 * t854;
t1087 = t1010 * t782;
t1113 = t1011 * t1048 - t1087;
t1086 = t1011 * t782;
t723 = -t1010 * t1048 - t1086;
t1123 = t1015 * t723 + t1019 * t1113;
t1122 = t1015 * t1113 - t1019 * t723;
t1051 = -t1010 * t1024 + t1011 * t912;
t862 = t1010 * t912 + t1011 * t1024;
t1075 = t1019 * t862;
t1114 = t1015 * t1051 + t1075;
t1080 = t1015 * t862;
t1112 = t1019 * t1051 - t1080;
t1012 = sin(qJ(5));
t1004 = qJDD(4) + qJDD(5);
t1016 = cos(qJ(5));
t1017 = cos(qJ(4));
t1068 = t1007 * t1017;
t1013 = sin(qJ(4));
t1069 = t1007 * t1013;
t946 = t1012 * t1069 - t1016 * t1068;
t948 = (t1012 * t1017 + t1013 * t1016) * t1007;
t896 = t948 * t946;
t1103 = -t896 + t1004;
t1111 = t1012 * t1103;
t1110 = t1016 * t1103;
t978 = t1011 * qJDD(1) - t1010 * t1021;
t1033 = -qJ(2) * t978 - t1010 * t1009;
t977 = t1010 * qJDD(1) + t1011 * t1021;
t917 = -t1015 * t977 + t1019 * t978;
t943 = qJ(2) * t977 - t1011 * t1009;
t1108 = -pkin(5) * t917 + t1015 * t943 + t1019 * t1033;
t918 = t1015 * t978 + t1019 * t977;
t1106 = -pkin(5) * t918 + t1015 * t1033 - t1019 * t943;
t837 = -t1003 * pkin(3) + t1005 * pkin(7) + t855;
t812 = t1017 * t1009 + t1013 * t837;
t813 = -t1013 * t1009 + t1017 * t837;
t764 = t1013 * t812 + t1017 * t813;
t1053 = qJD(4) * t1069;
t1063 = t1017 * t1005;
t1028 = t1053 - t1063;
t1066 = t1013 * t1005;
t990 = qJD(4) * t1068;
t960 = t990 + t1066;
t867 = -t946 * qJD(5) - t1012 * t1028 + t1016 * t960;
t1006 = qJD(4) + qJD(5);
t935 = t1006 * t946;
t1104 = -t935 + t867;
t1049 = t1012 * t960 + t1016 * t1028;
t841 = (qJD(5) - t1006) * t948 + t1049;
t944 = t946 ^ 2;
t945 = t948 ^ 2;
t1002 = t1006 ^ 2;
t1094 = t1017 ^ 2;
t986 = t1017 * t1003 * t1013;
t974 = qJDD(4) + t986;
t790 = (-t960 + t990) * pkin(8) + t974 * pkin(4) - t812;
t976 = qJD(4) * pkin(4) - pkin(8) * t1069;
t992 = t1094 * t1003;
t791 = -pkin(4) * t992 - pkin(8) * t1028 - qJD(4) * t976 + t813;
t740 = t1012 * t791 - t1016 * t790;
t741 = t1012 * t790 + t1016 * t791;
t693 = t1012 * t741 - t1016 * t740;
t1093 = pkin(4) * t693;
t845 = t935 + t867;
t773 = -t1012 * t841 - t1016 * t845;
t1092 = pkin(4) * t773;
t1090 = pkin(1) * t1009;
t836 = -t1005 * pkin(3) - t1003 * pkin(7) + t854;
t1089 = -pkin(3) * t836 + pkin(7) * t764;
t1088 = t1006 * t948;
t795 = pkin(4) * t1028 - pkin(8) * t992 + t976 * t1069 + t836;
t1085 = t1012 * t795;
t889 = t896 + t1004;
t1084 = t1012 * t889;
t1083 = t1013 * t693;
t828 = t1013 * t836;
t1082 = t1013 * t974;
t975 = qJDD(4) - t986;
t1081 = t1013 * t975;
t1079 = t1016 * t795;
t1078 = t1016 * t889;
t1077 = t1017 * t693;
t829 = t1017 * t836;
t961 = -0.2e1 * t1053 + t1063;
t914 = t1017 * t961;
t1076 = t1017 * t975;
t1072 = qJD(4) * t1007;
t1071 = t1006 * t1012;
t1070 = t1006 * t1016;
t1008 = t1013 ^ 2;
t1067 = t1008 * t1003;
t1059 = t1008 + t1094;
t1020 = qJD(4) ^ 2;
t982 = -t1020 - t1067;
t926 = -t1013 * t982 - t1076;
t959 = 0.2e1 * t990 + t1066;
t1058 = -pkin(3) * t959 + pkin(7) * t926 + t828;
t984 = -t992 - t1020;
t923 = t1017 * t984 - t1082;
t1057 = pkin(3) * t961 + pkin(7) * t923 - t829;
t734 = t1014 * t764 - t1018 * t836;
t1056 = pkin(2) * t734 + t1089;
t1055 = t1014 * t896;
t1054 = t1018 * t896;
t979 = -t1015 * qJDD(1) - t1019 * t1021;
t1052 = pkin(5) * t979 + t1019 * g(1);
t694 = t1012 * t740 + t1016 * t741;
t1047 = -t1015 * t987 - t1019 * t988;
t775 = t1012 * t845 - t1016 * t841;
t870 = -t944 - t945;
t672 = -pkin(4) * t870 + pkin(8) * t775 + t694;
t679 = -pkin(8) * t773 - t693;
t717 = -t1013 * t773 + t1017 * t775;
t1046 = -pkin(3) * t870 + pkin(7) * t717 + t1013 * t679 + t1017 * t672;
t883 = -t1002 - t944;
t819 = t1016 * t883 - t1111;
t840 = (qJD(5) + t1006) * t948 + t1049;
t726 = -pkin(4) * t840 + pkin(8) * t819 - t1079;
t818 = t1012 * t883 + t1110;
t758 = -pkin(8) * t818 + t1085;
t767 = -t1013 * t818 + t1017 * t819;
t1045 = -pkin(3) * t840 + pkin(7) * t767 + t1013 * t758 + t1017 * t726;
t927 = -t945 - t1002;
t853 = -t1012 * t927 - t1078;
t732 = -pkin(4) * t1104 + pkin(8) * t853 + t1085;
t852 = t1016 * t927 - t1084;
t760 = -pkin(8) * t852 + t1079;
t779 = -t1013 * t852 + t1017 * t853;
t1044 = -pkin(3) * t1104 + pkin(7) * t779 + t1013 * t760 + t1017 * t732;
t963 = t1059 * t1005;
t969 = t992 + t1067;
t1043 = pkin(3) * t969 + pkin(7) * t963 + t764;
t878 = t1014 * t926 - t1018 * t959;
t1042 = pkin(2) * t878 + t1058;
t877 = t1014 * t923 + t1018 * t961;
t1041 = pkin(2) * t877 + t1057;
t1040 = t1014 * t986;
t1039 = t1018 * t986;
t1038 = -pkin(2) * t968 - t854;
t709 = t1014 * t717 - t1018 * t870;
t1037 = pkin(2) * t709 + t1046;
t737 = t1014 * t767 - t1018 * t840;
t1036 = pkin(2) * t737 + t1045;
t744 = t1014 * t779 - t1018 * t1104;
t1035 = pkin(2) * t744 + t1044;
t907 = t1014 * t963 + t1018 * t969;
t1034 = pkin(2) * t907 + t1043;
t762 = t1013 * t813 - t1017 * t812;
t1032 = t1015 * t988 - t1019 * t987;
t1030 = pkin(4) * t818 - t740;
t665 = t1017 * t694 - t1083;
t682 = -pkin(4) * t795 + pkin(8) * t694;
t1029 = -pkin(3) * t795 + pkin(7) * t665 - pkin(8) * t1083 + t1017 * t682;
t660 = t1014 * t665 - t1018 * t795;
t1026 = pkin(2) * t660 + t1029;
t1025 = pkin(4) * t852 - t741;
t1022 = -pkin(2) * t965 - t855;
t983 = t992 - t1020;
t981 = t1020 - t1067;
t980 = t1019 * qJDD(1) - t1015 * t1021;
t970 = -t992 + t1067;
t964 = t1017 * t974;
t955 = pkin(5) * t980 + t1015 * g(1);
t954 = t1059 * t1072;
t933 = -t945 + t1002;
t932 = t944 - t1002;
t931 = t1014 * qJDD(4) + t1018 * t954;
t930 = -t1018 * qJDD(4) + t1014 * t954;
t929 = -t1008 * t1072 + t1017 * t960;
t928 = t1013 * t1028 - t1094 * t1072;
t925 = t1013 * t983 + t1076;
t924 = -t1013 * t981 + t964;
t922 = t1017 * t983 - t1081;
t921 = t1017 * t981 + t1082;
t920 = t1017 * t982 - t1081;
t919 = t1013 * t984 + t964;
t913 = (t960 + t990) * t1013;
t908 = -t1014 * t969 + t1018 * t963;
t898 = -t1013 * t959 + t914;
t897 = t1013 * t961 + t1017 * t959;
t895 = t945 - t944;
t894 = t1013 * t1065 + t1018 * t924;
t893 = t1014 * t1063 + t1018 * t922;
t892 = -t1013 * t1062 + t1014 * t924;
t891 = t1014 * t922 - t1017 * t1062;
t887 = t1018 * t929 - t1040;
t886 = t1018 * t928 + t1040;
t885 = t1014 * t929 + t1039;
t884 = t1014 * t928 - t1039;
t882 = pkin(1) * t978 + t1024;
t881 = -pkin(1) * t977 - t912;
t880 = t1014 * t959 + t1018 * t926;
t879 = -t1014 * t961 + t1018 * t923;
t876 = (t1012 * t948 - t1016 * t946) * t1006;
t875 = (-t1012 * t946 - t1016 * t948) * t1006;
t872 = -t1010 * t930 + t1011 * t931;
t871 = t1010 * t931 + t1011 * t930;
t869 = t1014 * t970 + t1018 * t898;
t868 = t1014 * t898 - t1018 * t970;
t866 = -t948 * qJD(5) - t1049;
t860 = pkin(1) * t862;
t859 = t1016 * t932 - t1084;
t858 = -t1012 * t933 + t1110;
t857 = t1012 * t932 + t1078;
t856 = t1016 * t933 + t1111;
t851 = qJ(2) * t1051 + t1090;
t849 = -t1010 * t907 + t1011 * t908;
t848 = t1010 * t908 + t1011 * t907;
t834 = t1016 * t867 - t948 * t1071;
t833 = t1012 * t867 + t948 * t1070;
t832 = -t1012 * t866 + t946 * t1070;
t831 = t1016 * t866 + t946 * t1071;
t827 = -t1010 * t892 + t1011 * t894;
t826 = -t1010 * t891 + t1011 * t893;
t825 = t1010 * t894 + t1011 * t892;
t824 = t1010 * t893 + t1011 * t891;
t817 = -t1010 * t885 + t1011 * t887;
t816 = -t1010 * t884 + t1011 * t886;
t815 = t1010 * t887 + t1011 * t885;
t814 = t1010 * t886 + t1011 * t884;
t809 = -t1010 * t878 + t1011 * t880;
t808 = -t1010 * t877 + t1011 * t879;
t807 = t1010 * t880 + t1011 * t878;
t806 = t1010 * t879 + t1011 * t877;
t805 = -t1013 * t875 + t1017 * t876;
t804 = t1013 * t876 + t1017 * t875;
t803 = -pkin(7) * t920 + t829;
t802 = -pkin(7) * t919 + t828;
t801 = t1014 * t1004 + t1018 * t805;
t800 = -t1018 * t1004 + t1014 * t805;
t799 = -pkin(3) * t920 + t813;
t798 = -pkin(3) * t919 + t812;
t797 = -t1010 * t868 + t1011 * t869;
t796 = t1010 * t869 + t1011 * t868;
t794 = -pkin(1) * t905 + t1038;
t793 = pkin(1) * t902 + t1022;
t788 = -t1013 * t857 + t1017 * t859;
t787 = -t1013 * t856 + t1017 * t858;
t786 = t1013 * t859 + t1017 * t857;
t785 = t1013 * t858 + t1017 * t856;
t780 = pkin(2) * t782;
t778 = t1013 * t853 + t1017 * t852;
t776 = pkin(2) * t1009 + pkin(6) * t1048;
t774 = -t1012 * t1104 - t1016 * t840;
t772 = -t1012 * t840 + t1016 * t1104;
t771 = -t1013 * t833 + t1017 * t834;
t770 = t1013 * t834 + t1017 * t833;
t769 = -t1013 * t831 + t1017 * t832;
t768 = t1013 * t832 + t1017 * t831;
t766 = t1013 * t819 + t1017 * t818;
t756 = t1018 * t771 + t1055;
t755 = t1018 * t769 - t1055;
t754 = t1014 * t771 - t1054;
t753 = t1014 * t769 + t1054;
t752 = -pkin(6) * t907 - t1018 * t762;
t751 = pkin(6) * t908 - t1014 * t762;
t750 = -t1014 * t841 + t1018 * t788;
t749 = t1014 * t845 + t1018 * t787;
t748 = t1014 * t788 + t1018 * t841;
t747 = t1014 * t787 - t1018 * t845;
t746 = t1014 * t1104 + t1018 * t779;
t745 = -t1010 * t800 + t1011 * t801;
t743 = t1010 * t801 + t1011 * t800;
t738 = t1014 * t840 + t1018 * t767;
t735 = t1014 * t836 + t1018 * t764;
t730 = pkin(1) * t807 + t1042;
t729 = pkin(1) * t806 + t1041;
t728 = -pkin(6) * t878 - t1014 * t799 + t1018 * t803;
t727 = -pkin(6) * t877 - t1014 * t798 + t1018 * t802;
t720 = -pkin(2) * t920 + pkin(6) * t880 + t1014 * t803 + t1018 * t799;
t719 = -pkin(2) * t919 + pkin(6) * t879 + t1014 * t802 + t1018 * t798;
t718 = pkin(1) * t848 + t1034;
t716 = -t1013 * t772 + t1017 * t774;
t715 = t1013 * t774 + t1017 * t772;
t714 = t1013 * t775 + t1017 * t773;
t712 = t1014 * t895 + t1018 * t716;
t711 = t1014 * t716 - t1018 * t895;
t710 = t1014 * t870 + t1018 * t717;
t707 = -t1010 * t754 + t1011 * t756;
t706 = -t1010 * t753 + t1011 * t755;
t705 = t1010 * t756 + t1011 * t754;
t704 = t1010 * t755 + t1011 * t753;
t703 = -pkin(1) * t723 + t780;
t702 = -t1010 * t748 + t1011 * t750;
t701 = -t1010 * t747 + t1011 * t749;
t700 = t1010 * t750 + t1011 * t748;
t699 = t1010 * t749 + t1011 * t747;
t698 = -t1010 * t744 + t1011 * t746;
t697 = t1010 * t746 + t1011 * t744;
t696 = -pkin(3) * t778 - t1025;
t695 = -pkin(3) * t714 - t1092;
t692 = -pkin(3) * t766 - t1030;
t691 = -qJ(2) * t848 - t1010 * t751 + t1011 * t752;
t690 = qJ(2) * t849 + t1010 * t752 + t1011 * t751;
t689 = -t1010 * t737 + t1011 * t738;
t688 = t1010 * t738 + t1011 * t737;
t687 = -t1010 * t734 + t1011 * t735;
t686 = t1010 * t735 + t1011 * t734;
t685 = -pkin(6) * t1086 + qJ(2) * t723 - t1010 * t776;
t684 = -pkin(6) * t1087 + qJ(2) * t1113 + t1011 * t776 + t1090;
t683 = -pkin(7) * t778 - t1013 * t732 + t1017 * t760;
t680 = -pkin(6) * t734 + (pkin(3) * t1014 - pkin(7) * t1018) * t762;
t677 = -pkin(7) * t766 - t1013 * t726 + t1017 * t758;
t676 = -qJ(2) * t807 - t1010 * t720 + t1011 * t728;
t675 = -qJ(2) * t806 - t1010 * t719 + t1011 * t727;
t674 = -pkin(1) * t920 + qJ(2) * t809 + t1010 * t728 + t1011 * t720;
t673 = -pkin(1) * t919 + qJ(2) * t808 + t1010 * t727 + t1011 * t719;
t670 = -t1010 * t711 + t1011 * t712;
t669 = t1010 * t712 + t1011 * t711;
t668 = -t1010 * t709 + t1011 * t710;
t667 = t1010 * t710 + t1011 * t709;
t666 = pkin(6) * t735 + (-pkin(3) * t1018 - pkin(7) * t1014 - pkin(2)) * t762;
t664 = t1013 * t694 + t1077;
t662 = pkin(1) * t686 + t1056;
t661 = t1014 * t795 + t1018 * t665;
t658 = -pkin(6) * t744 - t1014 * t696 + t1018 * t683;
t657 = pkin(1) * t697 + t1035;
t656 = -pkin(6) * t737 - t1014 * t692 + t1018 * t677;
t655 = -pkin(2) * t778 + pkin(6) * t746 + t1014 * t683 + t1018 * t696;
t654 = pkin(1) * t688 + t1036;
t653 = -pkin(3) * t664 - t1093;
t652 = -pkin(2) * t766 + pkin(6) * t738 + t1014 * t677 + t1018 * t692;
t651 = -pkin(7) * t714 - t1013 * t672 + t1017 * t679;
t650 = -qJ(2) * t686 - t1010 * t666 + t1011 * t680;
t649 = -pkin(7) * t664 - pkin(8) * t1077 - t1013 * t682;
t648 = -pkin(1) * t762 + qJ(2) * t687 + t1010 * t680 + t1011 * t666;
t647 = -t1010 * t660 + t1011 * t661;
t646 = t1010 * t661 + t1011 * t660;
t645 = -pkin(6) * t709 - t1014 * t695 + t1018 * t651;
t644 = -pkin(2) * t714 + pkin(6) * t710 + t1014 * t651 + t1018 * t695;
t643 = pkin(1) * t667 + t1037;
t642 = -qJ(2) * t697 - t1010 * t655 + t1011 * t658;
t641 = -pkin(1) * t778 + qJ(2) * t698 + t1010 * t658 + t1011 * t655;
t640 = -qJ(2) * t688 - t1010 * t652 + t1011 * t656;
t639 = -pkin(1) * t766 + qJ(2) * t689 + t1010 * t656 + t1011 * t652;
t638 = -pkin(6) * t660 - t1014 * t653 + t1018 * t649;
t637 = pkin(1) * t646 + t1026;
t636 = -pkin(2) * t664 + pkin(6) * t661 + t1014 * t649 + t1018 * t653;
t635 = -qJ(2) * t667 - t1010 * t644 + t1011 * t645;
t634 = -pkin(1) * t714 + qJ(2) * t668 + t1010 * t645 + t1011 * t644;
t633 = -qJ(2) * t646 - t1010 * t636 + t1011 * t638;
t632 = -pkin(1) * t664 + qJ(2) * t647 + t1010 * t638 + t1011 * t636;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t988, t987, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t882, t881, 0, t860, 0, 0, 0, 0, 0, t1005, t794, t793, 0, t703, t913, t897, t921, t914, t925, 0, t729, t730, t718, t662, t770, t715, t785, t768, t786, t804, t654, t657, t643, t637; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t979, 0, t980, 0, t1052, -t955, t1032, pkin(5) * t1032, 0, 0, t918, 0, t917, 0, t1106, t1108, t1112, pkin(5) * t1112 - qJ(2) * t1080 + t1019 * t851, 0, 0, -t1119, 0, t1118, 0, t1126, -t1127, t1123, pkin(5) * t1123 + t1015 * t685 + t1019 * t684, t1015 * t817 + t1019 * t815, t1015 * t797 + t1019 * t796, t1015 * t827 + t1019 * t825, t1015 * t816 + t1019 * t814, t1015 * t826 + t1019 * t824, t1015 * t872 + t1019 * t871, t1015 * t675 + t1019 * t673 - pkin(5) * (t1015 * t806 - t1019 * t808), t1015 * t676 + t1019 * t674 - pkin(5) * (t1015 * t807 - t1019 * t809), t1015 * t691 + t1019 * t690 - pkin(5) * (t1015 * t848 - t1019 * t849), t1015 * t650 + t1019 * t648 - pkin(5) * (t1015 * t686 - t1019 * t687), t1015 * t707 + t1019 * t705, t1015 * t670 + t1019 * t669, t1015 * t701 + t1019 * t699, t1015 * t706 + t1019 * t704, t1015 * t702 + t1019 * t700, t1015 * t745 + t1019 * t743, t1015 * t640 + t1019 * t639 - pkin(5) * (t1015 * t688 - t1019 * t689), t1015 * t642 + t1019 * t641 - pkin(5) * (t1015 * t697 - t1019 * t698), t1015 * t635 + t1019 * t634 - pkin(5) * (t1015 * t667 - t1019 * t668), t1015 * t633 + t1019 * t632 - pkin(5) * (t1015 * t646 - t1019 * t647); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t980, 0, -t979, 0, t955, t1052, t1047, pkin(5) * t1047, 0, 0, -t917, 0, t918, 0, -t1108, t1106, t1114, pkin(5) * t1114 + qJ(2) * t1075 + t1015 * t851, 0, 0, -t1118, 0, -t1119, 0, t1127, t1126, t1122, pkin(5) * t1122 + t1015 * t684 - t1019 * t685, t1015 * t815 - t1019 * t817, t1015 * t796 - t1019 * t797, t1015 * t825 - t1019 * t827, t1015 * t814 - t1019 * t816, t1015 * t824 - t1019 * t826, t1015 * t871 - t1019 * t872, -t1019 * t675 + t1015 * t673 + pkin(5) * (t1015 * t808 + t1019 * t806), -t1019 * t676 + t1015 * t674 + pkin(5) * (t1015 * t809 + t1019 * t807), -t1019 * t691 + t1015 * t690 + pkin(5) * (t1015 * t849 + t1019 * t848), -t1019 * t650 + t1015 * t648 + pkin(5) * (t1015 * t687 + t1019 * t686), t1015 * t705 - t1019 * t707, t1015 * t669 - t1019 * t670, t1015 * t699 - t1019 * t701, t1015 * t704 - t1019 * t706, t1015 * t700 - t1019 * t702, t1015 * t743 - t1019 * t745, -t1019 * t640 + t1015 * t639 + pkin(5) * (t1015 * t689 + t1019 * t688), -t1019 * t642 + t1015 * t641 + pkin(5) * (t1015 * t698 + t1019 * t697), -t1019 * t635 + t1015 * t634 + pkin(5) * (t1015 * t668 + t1019 * t667), -t1019 * t633 + t1015 * t632 + pkin(5) * (t1015 * t647 + t1019 * t646); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1021, 0, 0, -g(1), t988, 0, 0, 0, t978, 0, -t977, 0, t1033, t943, -t862, -qJ(2) * t862, 0, 0, -t905, 0, t902, 0, t1117, -t820, t723, t685, t817, t797, t827, t816, t826, t872, t675, t676, t691, t650, t707, t670, t701, t706, t702, t745, t640, t642, t635, t633; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1021, 0, qJDD(1), 0, g(1), 0, -t987, 0, 0, 0, t977, 0, t978, 0, -t943, t1033, t1051, t851, 0, 0, -t902, 0, -t905, 0, t820, t1117, t1113, t684, t815, t796, t825, t814, t824, t871, t673, t674, t690, t648, t705, t669, t699, t704, t700, t743, t639, t641, t634, t632; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t988, t987, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t882, t881, 0, t860, 0, 0, 0, 0, 0, t1005, t794, t793, 0, t703, t913, t897, t921, t914, t925, 0, t729, t730, t718, t662, t770, t715, t785, t768, t786, t804, t654, t657, t643, t637; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1021, 0, 0, -t1009, -t1024, 0, 0, 0, -t968, 0, -t965, 0, t1109, t939, -t782, -pkin(6) * t782, t887, t869, t894, t886, t893, t931, t727, t728, t752, t680, t756, t712, t749, t755, t750, t801, t656, t658, t645, t638; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1021, 0, qJDD(1), 0, t1009, 0, t912, 0, 0, 0, t965, 0, -t968, 0, -t939, t1109, t1048, t776, t885, t868, t892, t884, t891, t930, t719, t720, t751, t666, t754, t711, t747, t753, t748, t800, t652, t655, t644, t636; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1024, -t912, 0, 0, 0, 0, 0, 0, 0, t1005, t1038, t1022, 0, t780, t913, t897, t921, t914, t925, 0, t1041, t1042, t1034, t1056, t770, t715, t785, t768, t786, t804, t1036, t1035, t1037, t1026; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1005, 0, -t1003, 0, 0, -t1009, t854, 0, t929, t898, t924, t928, t922, t954, t802, t803, -t762, -pkin(7) * t762, t771, t716, t787, t769, t788, t805, t677, t683, t651, t649; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1003, 0, t1005, 0, t1009, 0, t855, 0, t986, -t970, -t1066, -t986, -t1063, -qJDD(4), t798, t799, 0, -pkin(3) * t762, -t896, -t895, -t845, t896, t841, -t1004, t692, t696, t695, t653; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1005, -t854, -t855, 0, 0, t913, t897, t921, t914, t925, 0, t1057, t1058, t1043, t1089, t770, t715, t785, t768, t786, t804, t1045, t1044, t1046, t1029; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t960, t961, t974, -t990, t983, t990, 0, t836, t812, 0, t834, t774, t858, t832, t859, t876, t758, t760, t679, -pkin(8) * t693; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1053, t959, t981, -t1028, t975, -t1053, -t836, 0, t813, 0, t833, t772, t856, t831, t857, t875, t726, t732, t672, t682; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t986, t970, t1066, t986, t1063, qJDD(4), -t812, -t813, 0, 0, t896, t895, t845, -t896, -t841, t1004, t1030, t1025, t1092, t1093; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t867, -t840, t1103, t935, t932, -t935, 0, t795, t740, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1088, t1104, t933, t866, t889, -t1088, -t795, 0, t741, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t896, t895, t845, -t896, -t841, t1004, -t740, -t741, 0, 0;];
m_new_reg = t1;
