% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 11:54
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRRR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR5_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR5_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR5_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 11:54:42
% EndTime: 2020-01-03 11:54:45
% DurationCPUTime: 2.77s
% Computational Cost: add. (10884->180), mult. (15217->261), div. (0->0), fcn. (9583->10), ass. (0->151)
t1261 = qJD(1) + qJD(3);
t1258 = t1261 ^ 2;
t1259 = qJDD(1) + qJDD(3);
t1269 = sin(qJ(3));
t1273 = cos(qJ(3));
t1233 = t1269 * t1258 - t1273 * t1259;
t1265 = sin(pkin(9));
t1266 = cos(pkin(9));
t1281 = -t1273 * t1258 - t1269 * t1259;
t1207 = t1266 * t1233 - t1265 * t1281;
t1270 = sin(qJ(1));
t1274 = cos(qJ(1));
t1302 = t1265 * t1233 + t1266 * t1281;
t1306 = t1270 * t1207 + t1274 * t1302;
t1305 = -t1274 * t1207 + t1270 * t1302;
t1260 = qJD(4) + qJD(5);
t1299 = qJD(5) + t1260;
t1267 = sin(qJ(5));
t1271 = cos(qJ(5));
t1272 = cos(qJ(4));
t1293 = t1261 * t1272;
t1268 = sin(qJ(4));
t1294 = t1261 * t1268;
t1220 = t1267 * t1294 - t1271 * t1293;
t1298 = t1220 ^ 2;
t1222 = (t1267 * t1272 + t1268 * t1271) * t1261;
t1297 = t1222 ^ 2;
t1296 = t1260 ^ 2;
t1295 = t1222 * t1220;
t1263 = t1272 ^ 2;
t1292 = t1263 * t1258;
t1291 = t1268 * t1259;
t1290 = qJD(5) - t1260;
t1249 = -t1274 * g(2) - t1270 * g(3);
t1279 = qJDD(1) * pkin(1) + t1249;
t1248 = -t1270 * g(2) + t1274 * g(3);
t1276 = qJD(1) ^ 2;
t1280 = -t1276 * pkin(1) + t1248;
t1213 = t1265 * t1279 + t1266 * t1280;
t1211 = -t1276 * pkin(2) + t1213;
t1212 = -t1265 * t1280 + t1266 * t1279;
t1277 = qJDD(1) * pkin(2) + t1212;
t1191 = t1273 * t1211 + t1269 * t1277;
t1181 = -t1258 * pkin(3) + t1259 * pkin(7) + t1191;
t1264 = -g(1) + qJDD(2);
t1176 = t1272 * t1181 + t1268 * t1264;
t1262 = t1268 ^ 2;
t1289 = t1262 + t1263;
t1247 = t1272 * t1258 * t1268;
t1237 = qJDD(4) + t1247;
t1288 = -qJDD(4) - qJDD(5);
t1287 = qJD(4) * t1294;
t1286 = qJD(4) * t1293;
t1175 = -t1268 * t1181 + t1272 * t1264;
t1190 = -t1269 * t1211 + t1273 * t1277;
t1226 = t1286 + t1291;
t1252 = t1272 * t1259;
t1283 = -t1252 + t1287;
t1285 = -t1267 * t1226 - t1271 * t1283;
t1240 = -t1265 * qJDD(1) - t1266 * t1276;
t1241 = t1266 * qJDD(1) - t1265 * t1276;
t1284 = t1270 * t1240 + t1274 * t1241;
t1282 = t1274 * t1240 - t1270 * t1241;
t1180 = -t1259 * pkin(3) - t1258 * pkin(7) - t1190;
t1278 = -t1271 * t1226 + t1267 * t1283;
t1275 = qJD(4) ^ 2;
t1245 = -t1275 - t1292;
t1244 = -t1262 * t1258 - t1275;
t1243 = t1274 * qJDD(1) - t1270 * t1276;
t1242 = -t1270 * qJDD(1) - t1274 * t1276;
t1239 = qJD(4) * pkin(4) - pkin(8) * t1294;
t1238 = -qJDD(4) + t1247;
t1235 = t1289 * t1258;
t1230 = t1289 * t1259;
t1227 = t1252 - 0.2e1 * t1287;
t1225 = 0.2e1 * t1286 + t1291;
t1218 = -t1296 - t1297;
t1217 = t1272 * t1238 - t1268 * t1244;
t1216 = -t1268 * t1237 + t1272 * t1245;
t1215 = t1268 * t1238 + t1272 * t1244;
t1214 = t1272 * t1237 + t1268 * t1245;
t1210 = t1273 * t1230 - t1269 * t1235;
t1209 = t1269 * t1230 + t1273 * t1235;
t1201 = t1288 - t1295;
t1200 = -t1288 - t1295;
t1199 = -t1296 - t1298;
t1198 = t1273 * t1217 + t1269 * t1225;
t1197 = t1273 * t1216 - t1269 * t1227;
t1196 = t1269 * t1217 - t1273 * t1225;
t1195 = t1269 * t1216 + t1273 * t1227;
t1194 = -t1297 - t1298;
t1193 = -t1265 * t1212 + t1266 * t1213;
t1192 = t1266 * t1212 + t1265 * t1213;
t1189 = t1271 * t1201 - t1267 * t1218;
t1188 = t1267 * t1201 + t1271 * t1218;
t1187 = -t1265 * t1209 + t1266 * t1210;
t1186 = t1266 * t1209 + t1265 * t1210;
t1185 = t1290 * t1220 + t1278;
t1184 = -t1299 * t1220 - t1278;
t1183 = -t1290 * t1222 + t1285;
t1182 = t1299 * t1222 - t1285;
t1178 = t1271 * t1199 - t1267 * t1200;
t1177 = t1267 * t1199 + t1271 * t1200;
t1174 = -t1265 * t1196 + t1266 * t1198;
t1173 = -t1265 * t1195 + t1266 * t1197;
t1172 = t1266 * t1196 + t1265 * t1198;
t1171 = t1266 * t1195 + t1265 * t1197;
t1170 = t1283 * pkin(4) - pkin(8) * t1292 + t1239 * t1294 + t1180;
t1169 = -pkin(4) * t1292 - t1283 * pkin(8) - qJD(4) * t1239 + t1176;
t1168 = (-t1226 + t1286) * pkin(8) + t1237 * pkin(4) + t1175;
t1167 = -t1269 * t1190 + t1273 * t1191;
t1166 = t1273 * t1190 + t1269 * t1191;
t1165 = -t1268 * t1188 + t1272 * t1189;
t1164 = t1272 * t1188 + t1268 * t1189;
t1163 = t1271 * t1183 - t1267 * t1185;
t1162 = t1267 * t1183 + t1271 * t1185;
t1161 = -t1268 * t1177 + t1272 * t1178;
t1160 = t1272 * t1177 + t1268 * t1178;
t1159 = -t1268 * t1175 + t1272 * t1176;
t1158 = t1272 * t1175 + t1268 * t1176;
t1157 = t1273 * t1165 + t1269 * t1184;
t1156 = t1269 * t1165 - t1273 * t1184;
t1155 = t1267 * t1168 + t1271 * t1169;
t1154 = t1271 * t1168 - t1267 * t1169;
t1153 = t1273 * t1161 + t1269 * t1182;
t1152 = t1269 * t1161 - t1273 * t1182;
t1151 = t1273 * t1159 + t1269 * t1180;
t1150 = t1269 * t1159 - t1273 * t1180;
t1149 = -t1265 * t1166 + t1266 * t1167;
t1148 = t1266 * t1166 + t1265 * t1167;
t1147 = -t1268 * t1162 + t1272 * t1163;
t1146 = t1272 * t1162 + t1268 * t1163;
t1145 = t1273 * t1147 + t1269 * t1194;
t1144 = t1269 * t1147 - t1273 * t1194;
t1143 = -t1265 * t1156 + t1266 * t1157;
t1142 = t1266 * t1156 + t1265 * t1157;
t1141 = -t1267 * t1154 + t1271 * t1155;
t1140 = t1271 * t1154 + t1267 * t1155;
t1139 = -t1265 * t1152 + t1266 * t1153;
t1138 = t1266 * t1152 + t1265 * t1153;
t1137 = -t1265 * t1150 + t1266 * t1151;
t1136 = t1266 * t1150 + t1265 * t1151;
t1135 = -t1265 * t1144 + t1266 * t1145;
t1134 = t1266 * t1144 + t1265 * t1145;
t1133 = -t1268 * t1140 + t1272 * t1141;
t1132 = t1272 * t1140 + t1268 * t1141;
t1131 = t1273 * t1133 + t1269 * t1170;
t1130 = t1269 * t1133 - t1273 * t1170;
t1129 = -t1265 * t1130 + t1266 * t1131;
t1128 = t1266 * t1130 + t1265 * t1131;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1264, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1264, 0, 0, 0, 0, 0, 0, t1214, t1215, 0, t1158, 0, 0, 0, 0, 0, 0, t1160, t1164, t1146, t1132; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1243, t1242, 0, t1270 * t1248 + t1274 * t1249, 0, 0, 0, 0, 0, 0, t1284, t1282, 0, t1274 * t1192 + t1270 * t1193, 0, 0, 0, 0, 0, 0, t1305, t1306, 0, t1274 * t1148 + t1270 * t1149, 0, 0, 0, 0, 0, 0, t1274 * t1171 + t1270 * t1173, t1274 * t1172 + t1270 * t1174, t1274 * t1186 + t1270 * t1187, t1274 * t1136 + t1270 * t1137, 0, 0, 0, 0, 0, 0, t1274 * t1138 + t1270 * t1139, t1274 * t1142 + t1270 * t1143, t1274 * t1134 + t1270 * t1135, t1274 * t1128 + t1270 * t1129; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1242, t1243, 0, -t1274 * t1248 + t1270 * t1249, 0, 0, 0, 0, 0, 0, -t1282, t1284, 0, t1270 * t1192 - t1274 * t1193, 0, 0, 0, 0, 0, 0, -t1306, t1305, 0, t1270 * t1148 - t1274 * t1149, 0, 0, 0, 0, 0, 0, t1270 * t1171 - t1274 * t1173, t1270 * t1172 - t1274 * t1174, t1270 * t1186 - t1274 * t1187, t1270 * t1136 - t1274 * t1137, 0, 0, 0, 0, 0, 0, t1270 * t1138 - t1274 * t1139, t1270 * t1142 - t1274 * t1143, t1270 * t1134 - t1274 * t1135, t1270 * t1128 - t1274 * t1129; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1276, -qJDD(1), 0, t1248, 0, 0, 0, 0, 0, 0, t1240, -t1241, 0, t1193, 0, 0, 0, 0, 0, 0, t1302, t1207, 0, t1149, 0, 0, 0, 0, 0, 0, t1173, t1174, t1187, t1137, 0, 0, 0, 0, 0, 0, t1139, t1143, t1135, t1129; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1276, 0, t1249, 0, 0, 0, 0, 0, 0, t1241, t1240, 0, t1192, 0, 0, 0, 0, 0, 0, -t1207, t1302, 0, t1148, 0, 0, 0, 0, 0, 0, t1171, t1172, t1186, t1136, 0, 0, 0, 0, 0, 0, t1138, t1142, t1134, t1128; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1264, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1264, 0, 0, 0, 0, 0, 0, t1214, t1215, 0, t1158, 0, 0, 0, 0, 0, 0, t1160, t1164, t1146, t1132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1276, -qJDD(1), 0, t1213, 0, 0, 0, 0, 0, 0, t1281, t1233, 0, t1167, 0, 0, 0, 0, 0, 0, t1197, t1198, t1210, t1151, 0, 0, 0, 0, 0, 0, t1153, t1157, t1145, t1131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1276, 0, t1212, 0, 0, 0, 0, 0, 0, -t1233, t1281, 0, t1166, 0, 0, 0, 0, 0, 0, t1195, t1196, t1209, t1150, 0, 0, 0, 0, 0, 0, t1152, t1156, t1144, t1130; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1264, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1264, 0, 0, 0, 0, 0, 0, t1214, t1215, 0, t1158, 0, 0, 0, 0, 0, 0, t1160, t1164, t1146, t1132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1258, -t1259, 0, t1191, 0, 0, 0, 0, 0, 0, t1216, t1217, t1230, t1159, 0, 0, 0, 0, 0, 0, t1161, t1165, t1147, t1133; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1259, -t1258, 0, t1190, 0, 0, 0, 0, 0, 0, t1227, -t1225, t1235, -t1180, 0, 0, 0, 0, 0, 0, -t1182, -t1184, -t1194, -t1170; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1264, 0, 0, 0, 0, 0, 0, t1214, t1215, 0, t1158, 0, 0, 0, 0, 0, 0, t1160, t1164, t1146, t1132; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1245, t1238, t1252, t1176, 0, 0, 0, 0, 0, 0, t1178, t1189, t1163, t1141; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1237, t1244, -t1291, t1175, 0, 0, 0, 0, 0, 0, t1177, t1188, t1162, t1140; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1227, t1225, -t1235, t1180, 0, 0, 0, 0, 0, 0, t1182, t1184, t1194, t1170; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1199, t1201, t1183, t1155; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1200, t1218, t1185, t1154; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1182, t1184, t1194, t1170;];
f_new_reg = t1;
