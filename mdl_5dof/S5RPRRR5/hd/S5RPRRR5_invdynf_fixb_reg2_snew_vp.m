% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRRR5
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:17
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRRR5_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR5_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR5_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR5_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR5_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR5_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:17:07
% EndTime: 2019-12-05 18:17:09
% DurationCPUTime: 2.65s
% Computational Cost: add. (10884->180), mult. (15217->261), div. (0->0), fcn. (9583->10), ass. (0->151)
t1241 = qJD(1) + qJD(3);
t1238 = t1241 ^ 2;
t1239 = qJDD(1) + qJDD(3);
t1249 = sin(qJ(3));
t1253 = cos(qJ(3));
t1214 = t1249 * t1238 - t1253 * t1239;
t1245 = sin(pkin(9));
t1246 = cos(pkin(9));
t1261 = -t1253 * t1238 - t1249 * t1239;
t1188 = t1246 * t1214 - t1245 * t1261;
t1250 = sin(qJ(1));
t1254 = cos(qJ(1));
t1282 = t1245 * t1214 + t1246 * t1261;
t1286 = t1250 * t1188 + t1254 * t1282;
t1285 = t1254 * t1188 - t1250 * t1282;
t1240 = qJD(4) + qJD(5);
t1279 = qJD(5) + t1240;
t1247 = sin(qJ(5));
t1251 = cos(qJ(5));
t1252 = cos(qJ(4));
t1273 = t1241 * t1252;
t1248 = sin(qJ(4));
t1274 = t1241 * t1248;
t1201 = t1247 * t1274 - t1251 * t1273;
t1278 = t1201 ^ 2;
t1203 = (t1247 * t1252 + t1248 * t1251) * t1241;
t1277 = t1203 ^ 2;
t1276 = t1240 ^ 2;
t1275 = t1203 * t1201;
t1243 = t1252 ^ 2;
t1272 = t1243 * t1238;
t1271 = t1248 * t1239;
t1270 = qJD(5) - t1240;
t1229 = t1254 * g(2) + t1250 * g(3);
t1259 = qJDD(1) * pkin(1) + t1229;
t1228 = t1250 * g(2) - t1254 * g(3);
t1256 = qJD(1) ^ 2;
t1260 = -t1256 * pkin(1) + t1228;
t1194 = t1245 * t1259 + t1246 * t1260;
t1192 = -t1256 * pkin(2) + t1194;
t1193 = -t1245 * t1260 + t1246 * t1259;
t1257 = qJDD(1) * pkin(2) + t1193;
t1172 = t1253 * t1192 + t1249 * t1257;
t1162 = -t1238 * pkin(3) + t1239 * pkin(7) + t1172;
t1244 = -g(1) + qJDD(2);
t1157 = t1252 * t1162 + t1248 * t1244;
t1242 = t1248 ^ 2;
t1269 = t1242 + t1243;
t1227 = t1252 * t1238 * t1248;
t1217 = qJDD(4) + t1227;
t1268 = -qJDD(4) - qJDD(5);
t1267 = qJD(4) * t1274;
t1266 = qJD(4) * t1273;
t1156 = -t1248 * t1162 + t1252 * t1244;
t1171 = -t1249 * t1192 + t1253 * t1257;
t1207 = t1266 + t1271;
t1232 = t1252 * t1239;
t1264 = -t1232 + t1267;
t1265 = -t1247 * t1207 - t1251 * t1264;
t1220 = -t1245 * qJDD(1) - t1246 * t1256;
t1221 = t1246 * qJDD(1) - t1245 * t1256;
t1263 = t1254 * t1220 - t1250 * t1221;
t1262 = -t1250 * t1220 - t1254 * t1221;
t1161 = -t1239 * pkin(3) - t1238 * pkin(7) - t1171;
t1258 = -t1251 * t1207 + t1247 * t1264;
t1255 = qJD(4) ^ 2;
t1225 = -t1255 - t1272;
t1224 = -t1242 * t1238 - t1255;
t1223 = -t1254 * qJDD(1) + t1250 * t1256;
t1222 = t1250 * qJDD(1) + t1254 * t1256;
t1219 = qJD(4) * pkin(4) - pkin(8) * t1274;
t1218 = -qJDD(4) + t1227;
t1216 = t1269 * t1238;
t1211 = t1269 * t1239;
t1208 = t1232 - 0.2e1 * t1267;
t1206 = 0.2e1 * t1266 + t1271;
t1199 = -t1276 - t1277;
t1198 = t1252 * t1218 - t1248 * t1224;
t1197 = -t1248 * t1217 + t1252 * t1225;
t1196 = t1248 * t1218 + t1252 * t1224;
t1195 = t1252 * t1217 + t1248 * t1225;
t1191 = t1253 * t1211 - t1249 * t1216;
t1190 = t1249 * t1211 + t1253 * t1216;
t1182 = t1268 - t1275;
t1181 = -t1268 - t1275;
t1180 = -t1276 - t1278;
t1179 = t1253 * t1198 + t1249 * t1206;
t1178 = t1253 * t1197 - t1249 * t1208;
t1177 = t1249 * t1198 - t1253 * t1206;
t1176 = t1249 * t1197 + t1253 * t1208;
t1175 = -t1277 - t1278;
t1174 = -t1245 * t1193 + t1246 * t1194;
t1173 = t1246 * t1193 + t1245 * t1194;
t1170 = t1251 * t1182 - t1247 * t1199;
t1169 = t1247 * t1182 + t1251 * t1199;
t1168 = -t1245 * t1190 + t1246 * t1191;
t1167 = t1246 * t1190 + t1245 * t1191;
t1166 = t1270 * t1201 + t1258;
t1165 = -t1279 * t1201 - t1258;
t1164 = -t1270 * t1203 + t1265;
t1163 = t1279 * t1203 - t1265;
t1159 = t1251 * t1180 - t1247 * t1181;
t1158 = t1247 * t1180 + t1251 * t1181;
t1155 = -t1245 * t1177 + t1246 * t1179;
t1154 = -t1245 * t1176 + t1246 * t1178;
t1153 = t1246 * t1177 + t1245 * t1179;
t1152 = t1246 * t1176 + t1245 * t1178;
t1151 = t1264 * pkin(4) - pkin(8) * t1272 + t1219 * t1274 + t1161;
t1150 = -pkin(4) * t1272 - t1264 * pkin(8) - qJD(4) * t1219 + t1157;
t1149 = (-t1207 + t1266) * pkin(8) + t1217 * pkin(4) + t1156;
t1148 = -t1249 * t1171 + t1253 * t1172;
t1147 = t1253 * t1171 + t1249 * t1172;
t1146 = -t1248 * t1169 + t1252 * t1170;
t1145 = t1252 * t1169 + t1248 * t1170;
t1144 = t1251 * t1164 - t1247 * t1166;
t1143 = t1247 * t1164 + t1251 * t1166;
t1142 = -t1248 * t1158 + t1252 * t1159;
t1141 = t1252 * t1158 + t1248 * t1159;
t1140 = -t1248 * t1156 + t1252 * t1157;
t1139 = t1252 * t1156 + t1248 * t1157;
t1138 = t1253 * t1146 + t1249 * t1165;
t1137 = t1249 * t1146 - t1253 * t1165;
t1136 = t1247 * t1149 + t1251 * t1150;
t1135 = t1251 * t1149 - t1247 * t1150;
t1134 = t1253 * t1142 + t1249 * t1163;
t1133 = t1249 * t1142 - t1253 * t1163;
t1132 = t1253 * t1140 + t1249 * t1161;
t1131 = t1249 * t1140 - t1253 * t1161;
t1130 = -t1245 * t1147 + t1246 * t1148;
t1129 = t1246 * t1147 + t1245 * t1148;
t1128 = -t1248 * t1143 + t1252 * t1144;
t1127 = t1252 * t1143 + t1248 * t1144;
t1126 = t1253 * t1128 + t1249 * t1175;
t1125 = t1249 * t1128 - t1253 * t1175;
t1124 = -t1245 * t1137 + t1246 * t1138;
t1123 = t1246 * t1137 + t1245 * t1138;
t1122 = -t1247 * t1135 + t1251 * t1136;
t1121 = t1251 * t1135 + t1247 * t1136;
t1120 = -t1245 * t1133 + t1246 * t1134;
t1119 = t1246 * t1133 + t1245 * t1134;
t1118 = -t1245 * t1131 + t1246 * t1132;
t1117 = t1246 * t1131 + t1245 * t1132;
t1116 = -t1245 * t1125 + t1246 * t1126;
t1115 = t1246 * t1125 + t1245 * t1126;
t1114 = -t1248 * t1121 + t1252 * t1122;
t1113 = t1252 * t1121 + t1248 * t1122;
t1112 = t1253 * t1114 + t1249 * t1151;
t1111 = t1249 * t1114 - t1253 * t1151;
t1110 = -t1245 * t1111 + t1246 * t1112;
t1109 = t1246 * t1111 + t1245 * t1112;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1244, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1244, 0, 0, 0, 0, 0, 0, t1195, t1196, 0, t1139, 0, 0, 0, 0, 0, 0, t1141, t1145, t1127, t1113; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1223, t1222, 0, -t1250 * t1228 - t1254 * t1229, 0, 0, 0, 0, 0, 0, t1262, -t1263, 0, -t1254 * t1173 - t1250 * t1174, 0, 0, 0, 0, 0, 0, t1285, -t1286, 0, -t1254 * t1129 - t1250 * t1130, 0, 0, 0, 0, 0, 0, -t1254 * t1152 - t1250 * t1154, -t1254 * t1153 - t1250 * t1155, -t1254 * t1167 - t1250 * t1168, -t1254 * t1117 - t1250 * t1118, 0, 0, 0, 0, 0, 0, -t1254 * t1119 - t1250 * t1120, -t1254 * t1123 - t1250 * t1124, -t1254 * t1115 - t1250 * t1116, -t1254 * t1109 - t1250 * t1110; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1222, t1223, 0, t1254 * t1228 - t1250 * t1229, 0, 0, 0, 0, 0, 0, t1263, t1262, 0, -t1250 * t1173 + t1254 * t1174, 0, 0, 0, 0, 0, 0, t1286, t1285, 0, -t1250 * t1129 + t1254 * t1130, 0, 0, 0, 0, 0, 0, -t1250 * t1152 + t1254 * t1154, -t1250 * t1153 + t1254 * t1155, -t1250 * t1167 + t1254 * t1168, -t1250 * t1117 + t1254 * t1118, 0, 0, 0, 0, 0, 0, -t1250 * t1119 + t1254 * t1120, -t1250 * t1123 + t1254 * t1124, -t1250 * t1115 + t1254 * t1116, -t1250 * t1109 + t1254 * t1110; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1256, -qJDD(1), 0, t1228, 0, 0, 0, 0, 0, 0, t1220, -t1221, 0, t1174, 0, 0, 0, 0, 0, 0, t1282, t1188, 0, t1130, 0, 0, 0, 0, 0, 0, t1154, t1155, t1168, t1118, 0, 0, 0, 0, 0, 0, t1120, t1124, t1116, t1110; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1256, 0, t1229, 0, 0, 0, 0, 0, 0, t1221, t1220, 0, t1173, 0, 0, 0, 0, 0, 0, -t1188, t1282, 0, t1129, 0, 0, 0, 0, 0, 0, t1152, t1153, t1167, t1117, 0, 0, 0, 0, 0, 0, t1119, t1123, t1115, t1109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1244, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1244, 0, 0, 0, 0, 0, 0, t1195, t1196, 0, t1139, 0, 0, 0, 0, 0, 0, t1141, t1145, t1127, t1113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1256, -qJDD(1), 0, t1194, 0, 0, 0, 0, 0, 0, t1261, t1214, 0, t1148, 0, 0, 0, 0, 0, 0, t1178, t1179, t1191, t1132, 0, 0, 0, 0, 0, 0, t1134, t1138, t1126, t1112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1256, 0, t1193, 0, 0, 0, 0, 0, 0, -t1214, t1261, 0, t1147, 0, 0, 0, 0, 0, 0, t1176, t1177, t1190, t1131, 0, 0, 0, 0, 0, 0, t1133, t1137, t1125, t1111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1244, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1244, 0, 0, 0, 0, 0, 0, t1195, t1196, 0, t1139, 0, 0, 0, 0, 0, 0, t1141, t1145, t1127, t1113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1238, -t1239, 0, t1172, 0, 0, 0, 0, 0, 0, t1197, t1198, t1211, t1140, 0, 0, 0, 0, 0, 0, t1142, t1146, t1128, t1114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1239, -t1238, 0, t1171, 0, 0, 0, 0, 0, 0, t1208, -t1206, t1216, -t1161, 0, 0, 0, 0, 0, 0, -t1163, -t1165, -t1175, -t1151; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1244, 0, 0, 0, 0, 0, 0, t1195, t1196, 0, t1139, 0, 0, 0, 0, 0, 0, t1141, t1145, t1127, t1113; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1225, t1218, t1232, t1157, 0, 0, 0, 0, 0, 0, t1159, t1170, t1144, t1122; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1217, t1224, -t1271, t1156, 0, 0, 0, 0, 0, 0, t1158, t1169, t1143, t1121; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1208, t1206, -t1216, t1161, 0, 0, 0, 0, 0, 0, t1163, t1165, t1175, t1151; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1180, t1182, t1164, t1136; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1181, t1199, t1166, t1135; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1163, t1165, t1175, t1151;];
f_new_reg = t1;
