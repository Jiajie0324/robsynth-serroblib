% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d5,theta1,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:24
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRRPR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPR4_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPR4_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRPR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRPR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRRPR4_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:23:32
% EndTime: 2019-12-05 16:23:47
% DurationCPUTime: 11.48s
% Computational Cost: add. (47158->587), mult. (105726->909), div. (0->0), fcn. (74513->10), ass. (0->405)
t595 = sin(pkin(9));
t597 = cos(pkin(9));
t604 = cos(qJ(3));
t601 = sin(qJ(3));
t635 = qJD(2) * t601;
t550 = -t597 * t604 * qJD(2) + t595 * t635;
t552 = (t595 * t604 + t597 * t601) * qJD(2);
t509 = t552 * t550;
t664 = qJDD(3) - t509;
t672 = t595 * t664;
t671 = t597 * t664;
t600 = sin(qJ(5));
t603 = cos(qJ(5));
t495 = t603 * t550 + t600 * t552;
t497 = -t600 * t550 + t603 * t552;
t441 = t497 * t495;
t624 = qJDD(3) + qJDD(5);
t666 = -t441 + t624;
t670 = t600 * t666;
t669 = t603 * t666;
t630 = qJD(2) * qJD(3);
t618 = t601 * t630;
t627 = t604 * qJDD(2);
t608 = 0.2e1 * t618 - t627;
t525 = t608 * t604;
t596 = sin(pkin(8));
t636 = g(3) - qJDD(1);
t668 = t596 * t636;
t598 = cos(pkin(8));
t667 = t598 * t636;
t592 = qJD(3) + qJD(5);
t484 = t592 * t495;
t617 = t604 * t630;
t629 = t601 * qJDD(2);
t564 = t617 + t629;
t609 = t618 - t627;
t513 = t597 * t564 - t595 * t609;
t612 = t595 * t564 + t597 * t609;
t607 = t495 * qJD(5) - t603 * t513 + t600 * t612;
t665 = -t484 - t607;
t571 = t596 * g(1) - t598 * g(2);
t556 = t598 * t571;
t572 = t598 * g(1) + t596 * g(2);
t519 = -t596 * t572 + t556;
t613 = t600 * t513 + t603 * t612;
t391 = (qJD(5) - t592) * t497 + t613;
t493 = t495 ^ 2;
t494 = t497 ^ 2;
t663 = t550 ^ 2;
t549 = t552 ^ 2;
t590 = t592 ^ 2;
t662 = t604 ^ 2;
t661 = qJD(2) ^ 2;
t660 = t592 * t600;
t659 = t592 * t603;
t602 = sin(qJ(2));
t605 = cos(qJ(2));
t541 = -t605 * t572 - t602 * t636;
t522 = -pkin(2) * t661 + qJDD(2) * pkin(6) + t541;
t485 = t601 * t522 + t604 * t571;
t581 = t601 * t661 * t604;
t574 = qJDD(3) + t581;
t451 = (-t564 + t617) * qJ(4) + t574 * pkin(3) - t485;
t488 = t604 * t522 - t601 * t571;
t573 = qJD(3) * pkin(3) - qJ(4) * t635;
t588 = t662 * t661;
t452 = -pkin(3) * t588 - qJ(4) * t609 - qJD(3) * t573 + t488;
t378 = 0.2e1 * qJD(4) * t552 - t597 * t451 + t595 * t452;
t634 = t550 * qJD(3);
t475 = -t513 - t634;
t354 = pkin(4) * t664 + pkin(7) * t475 - t378;
t379 = -0.2e1 * qJD(4) * t550 + t595 * t451 + t597 * t452;
t539 = qJD(3) * pkin(4) - t552 * pkin(7);
t358 = -pkin(4) * t663 - pkin(7) * t612 - qJD(3) * t539 + t379;
t308 = -t603 * t354 + t600 * t358;
t309 = t600 * t354 + t603 * t358;
t273 = -t603 * t308 + t600 * t309;
t658 = t595 * t273;
t540 = -t602 * t572 + t605 * t636;
t521 = -qJDD(2) * pkin(2) - t661 * pkin(6) + t540;
t463 = t609 * pkin(3) - qJ(4) * t588 + t573 * t635 + qJDD(4) + t521;
t657 = t595 * t463;
t504 = qJDD(3) + t509;
t656 = t595 * t504;
t626 = t605 * qJDD(2);
t568 = -t602 * t661 + t626;
t655 = t596 * t568;
t654 = t596 * t571;
t652 = t597 * t273;
t651 = t597 * t463;
t650 = t597 * t504;
t649 = t598 * t568;
t396 = pkin(4) * t612 - pkin(7) * t663 + t552 * t539 + t463;
t648 = t600 * t396;
t438 = t441 + t624;
t647 = t600 * t438;
t326 = -t597 * t378 + t595 * t379;
t646 = t601 * t326;
t645 = t601 * t521;
t644 = t601 * t574;
t575 = qJDD(3) - t581;
t643 = t601 * t575;
t642 = t603 * t396;
t641 = t603 * t438;
t640 = t604 * t326;
t639 = t604 * t521;
t638 = t604 * t574;
t637 = t604 * t575;
t633 = t552 * qJD(3);
t593 = t601 ^ 2;
t632 = t593 * t661;
t628 = t602 * qJDD(2);
t625 = t605 * qJDD(3);
t623 = t593 + t662;
t622 = t602 * t441;
t621 = t602 * t509;
t620 = t605 * t441;
t619 = t605 * t509;
t431 = t601 * t485 + t604 * t488;
t566 = t623 * qJDD(2);
t569 = t588 + t632;
t517 = t602 * t566 + t605 * t569;
t518 = t605 * t566 - t602 * t569;
t616 = -pkin(1) * t517 - pkin(2) * t569 - pkin(6) * t566 + qJ(1) * t518 - t431;
t567 = t605 * t661 + t628;
t615 = pkin(1) * t568 + qJ(1) * t567 - t540;
t614 = -pkin(1) * t567 + qJ(1) * t568 - t541;
t274 = t600 * t308 + t603 * t309;
t327 = t595 * t378 + t597 * t379;
t480 = t602 * t540 + t605 * t541;
t520 = -t598 * t572 - t654;
t611 = t602 * t581;
t610 = t605 * t581;
t524 = pkin(5) * t567 - t605 * t571;
t523 = -pkin(5) * t568 - t602 * t571;
t430 = t604 * t485 - t601 * t488;
t479 = t605 * t540 - t602 * t541;
t473 = -t612 + t633;
t606 = qJD(3) ^ 2;
t586 = t602 * qJDD(3);
t580 = -t588 - t606;
t579 = t588 - t606;
t578 = -t606 - t632;
t577 = t606 - t632;
t570 = t588 - t632;
t563 = 0.2e1 * t617 + t629;
t562 = t623 * t630;
t555 = t598 * t567;
t554 = t596 * t567;
t544 = -t549 - t606;
t543 = -t549 + t606;
t542 = -t606 + t663;
t538 = t605 * t562 + t586;
t537 = t604 * t564 - t593 * t630;
t536 = t601 * t609 - t630 * t662;
t534 = -t601 * t578 - t637;
t533 = -t601 * t577 + t638;
t532 = t604 * t580 - t644;
t531 = t604 * t579 - t643;
t530 = t604 * t578 - t643;
t529 = -t604 * t577 - t644;
t528 = t601 * t580 + t638;
t527 = -t601 * t579 - t637;
t526 = (-t564 - t617) * t601;
t515 = -t601 * t563 - t525;
t514 = -t604 * t563 + t601 * t608;
t507 = -t549 + t663;
t502 = -t606 - t663;
t501 = t605 * t537 - t611;
t500 = t605 * t536 + t611;
t499 = t605 * t533 + t601 * t628;
t498 = t605 * t531 + t602 * t627;
t492 = (-t550 * t597 + t552 * t595) * qJD(3);
t491 = (-t550 * t595 - t552 * t597) * qJD(3);
t490 = t605 * t534 + t602 * t563;
t489 = t605 * t532 + t602 * t608;
t487 = t602 * t534 - t605 * t563;
t486 = t602 * t532 - t605 * t608;
t482 = -t494 + t590;
t481 = t493 - t590;
t477 = t605 * t515 - t602 * t570;
t476 = -t494 - t590;
t474 = t513 - t634;
t471 = t612 + t633;
t470 = -t549 - t663;
t469 = -pkin(6) * t530 + t639;
t468 = -pkin(6) * t528 + t645;
t467 = t597 * t513 - t595 * t633;
t466 = t595 * t513 + t597 * t633;
t465 = t595 * t612 + t597 * t634;
t464 = t595 * t634 - t597 * t612;
t462 = -t595 * t544 - t650;
t461 = -t595 * t543 + t671;
t460 = t597 * t542 - t656;
t459 = t597 * t544 - t656;
t458 = t597 * t543 + t672;
t457 = t595 * t542 + t650;
t456 = t598 * t480 - t654;
t455 = t596 * t480 + t556;
t454 = -pkin(2) * t530 + t488;
t453 = -pkin(2) * t528 + t485;
t450 = t598 * t490 + t596 * t530;
t449 = t598 * t489 + t596 * t528;
t448 = t596 * t490 - t598 * t530;
t447 = t596 * t489 - t598 * t528;
t445 = t597 * t502 - t672;
t444 = t595 * t502 + t671;
t440 = -t494 + t493;
t436 = -t590 - t493;
t435 = -t601 * t491 + t604 * t492;
t434 = -t604 * t491 - t601 * t492;
t433 = (-t495 * t603 + t497 * t600) * t592;
t432 = (-t495 * t600 - t497 * t603) * t592;
t428 = t605 * t435 + t586;
t427 = t597 * t473 - t595 * t475;
t426 = -t597 * t471 - t595 * t474;
t425 = t595 * t473 + t597 * t475;
t424 = -t595 * t471 + t597 * t474;
t422 = -t497 * qJD(5) - t613;
t421 = -pkin(1) * t486 + pkin(2) * t608 - pkin(6) * t532 + t639;
t420 = -pkin(1) * t487 + pkin(2) * t563 - pkin(6) * t534 - t645;
t419 = -t493 - t494;
t418 = -t601 * t466 + t604 * t467;
t417 = -t601 * t464 + t604 * t465;
t416 = -t604 * t466 - t601 * t467;
t415 = -t604 * t464 - t601 * t465;
t414 = -pkin(5) * t517 + t605 * t430;
t413 = t605 * t431 + t602 * t521;
t412 = t602 * t431 - t605 * t521;
t411 = -qJ(4) * t459 + t651;
t410 = -t601 * t459 + t604 * t462;
t409 = -t601 * t458 + t604 * t461;
t408 = -t601 * t457 + t604 * t460;
t407 = t604 * t459 + t601 * t462;
t406 = -t604 * t458 - t601 * t461;
t405 = -t604 * t457 - t601 * t460;
t404 = t603 * t481 - t647;
t403 = -t600 * t482 + t669;
t402 = t600 * t481 + t641;
t401 = t603 * t482 + t670;
t400 = -t600 * t476 - t641;
t399 = t603 * t476 - t647;
t398 = -qJ(4) * t444 + t657;
t395 = -t484 + t607;
t390 = (qJD(5) + t592) * t497 + t613;
t389 = t605 * t418 + t621;
t388 = t605 * t417 - t621;
t387 = -t497 * t660 - t603 * t607;
t386 = t497 * t659 - t600 * t607;
t385 = -t600 * t422 + t495 * t659;
t384 = t603 * t422 + t495 * t660;
t383 = -t601 * t444 + t604 * t445;
t382 = t604 * t444 + t601 * t445;
t381 = t603 * t436 - t670;
t380 = t600 * t436 + t669;
t377 = -pkin(5) * t487 - t602 * t454 + t605 * t469;
t376 = -pkin(5) * t486 - t602 * t453 + t605 * t468;
t374 = -pkin(3) * t474 + qJ(4) * t462 + t657;
t373 = t605 * t410 + t602 * t474;
t372 = t605 * t409 - t602 * t475;
t371 = t605 * t408 + t473 * t602;
t370 = t602 * t410 - t605 * t474;
t369 = -t595 * t432 + t597 * t433;
t368 = t597 * t432 + t595 * t433;
t367 = -pkin(3) * t471 + qJ(4) * t445 - t651;
t366 = t605 * t383 + t602 * t471;
t365 = -t601 * t425 + t604 * t427;
t364 = -t601 * t424 + t604 * t426;
t363 = t602 * t383 - t605 * t471;
t362 = t604 * t425 + t601 * t427;
t361 = -t604 * t424 - t601 * t426;
t360 = t598 * t413 - t430 * t596;
t359 = t596 * t413 + t430 * t598;
t356 = -pkin(1) * t412 + pkin(2) * t521 - pkin(6) * t431;
t355 = t605 * t364 - t602 * t507;
t351 = t605 * t365 + t602 * t470;
t350 = t602 * t365 - t605 * t470;
t349 = -t595 * t402 + t597 * t404;
t348 = -t595 * t401 + t597 * t403;
t347 = t597 * t402 + t595 * t404;
t346 = t597 * t401 + t595 * t403;
t345 = -t595 * t399 + t597 * t400;
t344 = t597 * t399 + t595 * t400;
t343 = -pkin(7) * t399 + t642;
t342 = -t391 * t603 - t600 * t395;
t341 = -t603 * t390 - t600 * t665;
t340 = -t391 * t600 + t603 * t395;
t339 = -t600 * t390 + t603 * t665;
t338 = -pkin(5) * t412 - (pkin(2) * t602 - pkin(6) * t605) * t430;
t337 = t598 * t373 + t596 * t407;
t336 = t596 * t373 - t598 * t407;
t335 = -pkin(7) * t380 + t648;
t334 = -t595 * t386 + t597 * t387;
t333 = -t595 * t384 + t597 * t385;
t332 = t597 * t386 + t595 * t387;
t331 = t597 * t384 + t595 * t385;
t330 = -pkin(2) * t362 - pkin(3) * t425;
t329 = -t595 * t380 + t597 * t381;
t328 = t597 * t380 + t595 * t381;
t325 = -pkin(2) * t407 - pkin(3) * t459 + t379;
t324 = t598 * t366 + t596 * t382;
t323 = t596 * t366 - t598 * t382;
t322 = -t601 * t368 + t604 * t369;
t321 = -t604 * t368 - t601 * t369;
t320 = t605 * t322 + t602 * t624;
t319 = -pkin(2) * t382 - pkin(3) * t444 + t378;
t318 = -pkin(3) * t463 + qJ(4) * t327;
t317 = -pkin(4) * t665 + pkin(7) * t400 + t648;
t316 = -pkin(6) * t407 - t601 * t374 + t604 * t411;
t315 = -qJ(4) * t425 - t326;
t314 = -pkin(4) * t390 + pkin(7) * t381 - t642;
t313 = t598 * t351 + t596 * t362;
t312 = t596 * t351 - t598 * t362;
t311 = -pkin(6) * t382 - t601 * t367 + t604 * t398;
t310 = -pkin(3) * t470 + qJ(4) * t427 + t327;
t306 = -t601 * t347 + t604 * t349;
t305 = -t601 * t346 + t604 * t348;
t304 = -t604 * t347 - t601 * t349;
t303 = -t604 * t346 - t601 * t348;
t302 = -t601 * t344 + t604 * t345;
t301 = t604 * t344 + t601 * t345;
t300 = -t595 * t340 + t597 * t342;
t299 = -t595 * t339 + t597 * t341;
t298 = t597 * t340 + t595 * t342;
t297 = t597 * t339 + t595 * t341;
t296 = -t601 * t332 + t604 * t334;
t295 = -t601 * t331 + t604 * t333;
t294 = -t604 * t332 - t601 * t334;
t293 = -t604 * t331 - t601 * t333;
t292 = -pkin(1) * t370 + pkin(2) * t474 - pkin(6) * t410 - t604 * t374 - t601 * t411;
t291 = -t601 * t328 + t604 * t329;
t290 = t604 * t328 + t601 * t329;
t289 = t604 * t327 - t646;
t288 = t601 * t327 + t640;
t287 = t605 * t306 - t602 * t391;
t286 = t605 * t305 - t602 * t395;
t285 = t605 * t302 + t602 * t665;
t284 = t602 * t302 - t605 * t665;
t283 = t605 * t296 + t622;
t282 = t605 * t295 - t622;
t281 = -pkin(1) * t363 + pkin(2) * t471 - pkin(6) * t383 - t604 * t367 - t601 * t398;
t280 = t605 * t289 + t602 * t463;
t279 = t602 * t289 - t605 * t463;
t278 = t605 * t291 + t602 * t390;
t277 = t602 * t291 - t605 * t390;
t276 = -pkin(5) * t370 + t605 * t316 - t602 * t325;
t275 = -qJ(4) * t344 - t595 * t317 + t597 * t343;
t272 = -pkin(2) * t288 - pkin(3) * t326;
t271 = -pkin(5) * t363 + t605 * t311 - t602 * t319;
t270 = -qJ(4) * t328 - t595 * t314 + t597 * t335;
t269 = -pkin(3) * t665 + qJ(4) * t345 + t597 * t317 + t595 * t343;
t268 = -pkin(4) * t396 + pkin(7) * t274;
t267 = -pkin(6) * t362 - t601 * t310 + t604 * t315;
t266 = -t601 * t298 + t604 * t300;
t265 = -t601 * t297 + t604 * t299;
t264 = t604 * t298 + t601 * t300;
t263 = -t604 * t297 - t601 * t299;
t262 = t598 * t285 + t596 * t301;
t261 = t596 * t285 - t598 * t301;
t260 = -pkin(3) * t390 + qJ(4) * t329 + t597 * t314 + t595 * t335;
t259 = -pkin(7) * t340 - t273;
t258 = t605 * t265 - t602 * t440;
t257 = t605 * t266 + t602 * t419;
t256 = t602 * t266 - t605 * t419;
t255 = -pkin(4) * t419 + pkin(7) * t342 + t274;
t254 = -pkin(6) * t288 - qJ(4) * t640 - t601 * t318;
t253 = t598 * t280 + t596 * t288;
t252 = t596 * t280 - t598 * t288;
t251 = -pkin(2) * t301 - pkin(3) * t344 - pkin(4) * t399 + t309;
t250 = -pkin(1) * t350 + pkin(2) * t470 - pkin(6) * t365 - t604 * t310 - t601 * t315;
t249 = t598 * t278 + t596 * t290;
t248 = t596 * t278 - t598 * t290;
t247 = -pkin(2) * t290 - pkin(3) * t328 - pkin(4) * t380 + t308;
t246 = -pkin(5) * t350 + t605 * t267 - t602 * t330;
t245 = t597 * t274 - t658;
t244 = t595 * t274 + t652;
t243 = -pkin(2) * t264 - pkin(3) * t298 - pkin(4) * t340;
t242 = -pkin(1) * t279 + pkin(2) * t463 - pkin(6) * t289 + qJ(4) * t646 - t604 * t318;
t241 = t598 * t257 + t596 * t264;
t240 = t596 * t257 - t598 * t264;
t239 = -pkin(6) * t301 - t601 * t269 + t604 * t275;
t238 = -pkin(6) * t290 - t601 * t260 + t604 * t270;
t237 = -pkin(5) * t279 + t605 * t254 - t602 * t272;
t236 = -qJ(4) * t298 - t595 * t255 + t597 * t259;
t235 = -pkin(3) * t419 + qJ(4) * t300 + t597 * t255 + t595 * t259;
t234 = -pkin(1) * t284 + pkin(2) * t665 - pkin(6) * t302 - t604 * t269 - t601 * t275;
t233 = -t601 * t244 + t604 * t245;
t232 = t604 * t244 + t601 * t245;
t231 = -pkin(1) * t277 + pkin(2) * t390 - pkin(6) * t291 - t604 * t260 - t601 * t270;
t230 = -pkin(7) * t652 - qJ(4) * t244 - t595 * t268;
t229 = t605 * t233 + t602 * t396;
t228 = t602 * t233 - t605 * t396;
t227 = -pkin(3) * t396 - pkin(7) * t658 + qJ(4) * t245 + t597 * t268;
t226 = -pkin(5) * t284 + t605 * t239 - t602 * t251;
t225 = -pkin(5) * t277 + t605 * t238 - t602 * t247;
t224 = -pkin(2) * t232 - pkin(3) * t244 - pkin(4) * t273;
t223 = -pkin(6) * t264 - t601 * t235 + t604 * t236;
t222 = t598 * t229 + t596 * t232;
t221 = t596 * t229 - t598 * t232;
t220 = -pkin(1) * t256 + pkin(2) * t419 - pkin(6) * t266 - t604 * t235 - t601 * t236;
t219 = -pkin(5) * t256 + t605 * t223 - t602 * t243;
t218 = -pkin(6) * t232 - t601 * t227 + t604 * t230;
t217 = -pkin(1) * t228 + pkin(2) * t396 - pkin(6) * t233 - t604 * t227 - t601 * t230;
t216 = -pkin(5) * t228 + t605 * t218 - t602 * t224;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t520, 0, 0, 0, 0, 0, 0, -t555, -t649, 0, t456, 0, 0, 0, 0, 0, 0, t449, t450, t598 * t518, t360, 0, 0, 0, 0, 0, 0, t324, t337, t313, t253, 0, 0, 0, 0, 0, 0, t249, t262, t241, t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t519, 0, 0, 0, 0, 0, 0, -t554, -t655, 0, t455, 0, 0, 0, 0, 0, 0, t447, t448, t596 * t518, t359, 0, 0, 0, 0, 0, 0, t323, t336, t312, t252, 0, 0, 0, 0, 0, 0, t248, t261, t240, t221; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t636, 0, 0, 0, 0, 0, 0, t568, -t567, 0, -t479, 0, 0, 0, 0, 0, 0, t486, t487, t517, t412, 0, 0, 0, 0, 0, 0, t363, t370, t350, t279, 0, 0, 0, 0, 0, 0, t277, t284, t256, t228; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t668, -t667, -t519, -qJ(1) * t519, 0, 0, t649, 0, -t555, t596 * qJDD(2), t598 * t523 + t596 * t615, t598 * t524 + t596 * t614, t598 * t479, -qJ(1) * t455 - (pkin(1) * t596 - pkin(5) * t598) * t479, t598 * t501 - t596 * t526, t598 * t477 - t596 * t514, t598 * t499 - t596 * t529, t598 * t500 - t596 * t525, t598 * t498 - t596 * t527, t598 * t538, -qJ(1) * t447 + t598 * t376 - t596 * t421, -qJ(1) * t448 + t598 * t377 - t596 * t420, t598 * t414 - t596 * t616, -qJ(1) * t359 + t598 * t338 - t596 * t356, t598 * t389 - t596 * t416, t598 * t355 - t596 * t361, t598 * t372 - t596 * t406, t598 * t388 - t596 * t415, t598 * t371 - t596 * t405, t598 * t428 - t596 * t434, -qJ(1) * t323 + t598 * t271 - t596 * t281, -qJ(1) * t336 + t598 * t276 - t596 * t292, -qJ(1) * t312 + t598 * t246 - t596 * t250, -qJ(1) * t252 + t598 * t237 - t596 * t242, t598 * t283 - t596 * t294, t598 * t258 - t596 * t263, t598 * t286 - t596 * t303, t598 * t282 - t596 * t293, t598 * t287 - t596 * t304, t598 * t320 - t596 * t321, -qJ(1) * t248 + t598 * t225 - t596 * t231, -qJ(1) * t261 + t598 * t226 - t596 * t234, -qJ(1) * t240 + t598 * t219 - t596 * t220, -qJ(1) * t221 + t598 * t216 - t596 * t217; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t667, -t668, t520, qJ(1) * t520, 0, 0, t655, 0, -t554, -t598 * qJDD(2), t596 * t523 - t598 * t615, t596 * t524 - t598 * t614, t596 * t479, qJ(1) * t456 - (-pkin(1) * t598 - pkin(5) * t596) * t479, t596 * t501 + t598 * t526, t596 * t477 + t598 * t514, t596 * t499 + t598 * t529, t596 * t500 + t598 * t525, t596 * t498 + t598 * t527, t596 * t538, qJ(1) * t449 + t596 * t376 + t598 * t421, qJ(1) * t450 + t596 * t377 + t598 * t420, t596 * t414 + t598 * t616, qJ(1) * t360 + t596 * t338 + t598 * t356, t596 * t389 + t598 * t416, t596 * t355 + t598 * t361, t596 * t372 + t598 * t406, t596 * t388 + t598 * t415, t596 * t371 + t598 * t405, t596 * t428 + t598 * t434, qJ(1) * t324 + t596 * t271 + t598 * t281, qJ(1) * t337 + t596 * t276 + t598 * t292, qJ(1) * t313 + t596 * t246 + t598 * t250, qJ(1) * t253 + t596 * t237 + t598 * t242, t596 * t283 + t598 * t294, t596 * t258 + t598 * t263, t596 * t286 + t598 * t303, t596 * t282 + t598 * t293, t596 * t287 + t598 * t304, t596 * t320 + t598 * t321, qJ(1) * t249 + t596 * t225 + t598 * t231, qJ(1) * t262 + t596 * t226 + t598 * t234, qJ(1) * t241 + t596 * t219 + t598 * t220, qJ(1) * t222 + t596 * t216 + t598 * t217; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t571, t572, 0, 0, 0, 0, t567, 0, t568, 0, -t524, t523, t480, pkin(1) * t571 + pkin(5) * t480, t602 * t537 + t610, t602 * t515 + t605 * t570, t602 * t533 - t601 * t626, t602 * t536 - t610, t602 * t531 - t604 * t626, t602 * t562 - t625, -pkin(1) * t528 + pkin(5) * t489 + t605 * t453 + t602 * t468, -pkin(1) * t530 + pkin(5) * t490 + t605 * t454 + t602 * t469, pkin(5) * t518 + t602 * t430, pkin(5) * t413 - (-pkin(2) * t605 - pkin(6) * t602 - pkin(1)) * t430, t602 * t418 - t619, t602 * t364 + t605 * t507, t602 * t409 + t605 * t475, t602 * t417 + t619, t602 * t408 - t473 * t605, t602 * t435 - t625, -pkin(1) * t382 + pkin(5) * t366 + t602 * t311 + t605 * t319, -pkin(1) * t407 + pkin(5) * t373 + t602 * t316 + t605 * t325, -pkin(1) * t362 + pkin(5) * t351 + t602 * t267 + t605 * t330, -pkin(1) * t288 + pkin(5) * t280 + t602 * t254 + t605 * t272, t602 * t296 - t620, t602 * t265 + t605 * t440, t602 * t305 + t605 * t395, t602 * t295 + t620, t602 * t306 + t605 * t391, t602 * t322 - t605 * t624, -pkin(1) * t290 + pkin(5) * t278 + t602 * t238 + t605 * t247, -pkin(1) * t301 + pkin(5) * t285 + t602 * t239 + t605 * t251, -pkin(1) * t264 + pkin(5) * t257 + t602 * t223 + t605 * t243, -pkin(1) * t232 + pkin(5) * t229 + t602 * t218 + t605 * t224;];
tauB_reg = t1;
