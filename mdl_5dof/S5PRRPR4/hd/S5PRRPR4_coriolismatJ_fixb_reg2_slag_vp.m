% Calculate inertial parameters regressor of coriolis matrix for
% S5PRRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,d5,theta1,theta4]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:24
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PRRPR4_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPR4_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPR4_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5PRRPR4_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:23:29
% EndTime: 2019-12-05 16:23:39
% DurationCPUTime: 4.77s
% Computational Cost: add. (4614->210), mult. (10382->328), div. (0->0), fcn. (11877->8), ass. (0->192)
t371 = qJD(3) + qJD(5);
t213 = sin(pkin(9));
t214 = cos(pkin(9));
t216 = sin(qJ(3));
t325 = -qJ(4) - pkin(6);
t256 = t325 * t216;
t218 = cos(qJ(3));
t347 = t325 * t218;
t154 = t213 * t256 - t214 * t347;
t316 = t214 * t218;
t319 = t213 * t216;
t344 = t316 - t319;
t123 = -pkin(7) * t344 - t154;
t215 = sin(qJ(5));
t330 = cos(qJ(5));
t317 = t214 * t216;
t318 = t213 * t218;
t192 = t317 + t318;
t353 = t213 * t347 + t214 * t256;
t366 = -t192 * pkin(7) + t353;
t382 = t330 * t123 - t215 * t366;
t383 = t371 * t382;
t377 = t330 * t366;
t381 = t215 * t123;
t56 = t377 + t381;
t340 = -t377 / 0.2e1;
t219 = cos(qJ(2));
t177 = t219 * t344;
t264 = t330 * t177;
t175 = t219 * t192;
t312 = t215 * t175;
t225 = t312 / 0.2e1 - t264 / 0.2e1;
t140 = t215 * t192 - t330 * t344;
t358 = t219 * t140;
t363 = -t358 / 0.2e1 + t225;
t376 = qJD(1) * t363;
t265 = t330 * t175;
t311 = t215 * t177;
t224 = -t311 / 0.2e1 - t265 / 0.2e1;
t186 = t330 * t192;
t310 = t215 * t344;
t345 = t186 + t310;
t357 = t219 * t345;
t364 = t357 / 0.2e1 + t224;
t375 = qJD(1) * t364;
t374 = qJD(2) * t363;
t373 = qJD(2) * t364;
t320 = t140 ^ 2;
t322 = t345 ^ 2;
t367 = t320 - t322;
t372 = t367 * qJD(2);
t217 = sin(qJ(2));
t174 = t192 * t217;
t176 = t344 * t217;
t118 = -t215 * t174 + t330 * t176;
t365 = -t357 / 0.2e1 + t224;
t370 = qJD(2) * t365 - t371 * t118;
t252 = t330 * t174 + t215 * t176;
t362 = t358 / 0.2e1 + t225;
t369 = qJD(2) * t362 + t371 * t252;
t361 = t118 / 0.2e1;
t283 = t345 * qJD(2);
t360 = t140 * t283;
t58 = t371 * t140;
t355 = qJD(4) * t140;
t354 = t140 * qJD(2);
t349 = -t214 / 0.2e1;
t341 = t192 ^ 2;
t338 = -t345 / 0.2e1;
t269 = pkin(3) * t214 + pkin(4);
t329 = pkin(3) * t213;
t184 = t215 * t269 + t330 * t329;
t336 = -t184 / 0.2e1;
t249 = t186 / 0.2e1;
t335 = t344 / 0.2e1;
t334 = -t344 / 0.2e1;
t333 = t192 / 0.2e1;
t332 = t217 / 0.2e1;
t331 = -t219 / 0.2e1;
t328 = t192 * pkin(4);
t326 = t216 * pkin(3);
t14 = t118 * t338 + t345 * t361;
t324 = t14 * qJD(3);
t323 = qJD(3) * pkin(3);
t321 = t14 * qJD(2);
t305 = t219 * t216;
t116 = -t265 - t311;
t119 = t264 - t312;
t207 = t217 * t219;
t22 = -t116 * t252 + t118 * t119 - t207;
t304 = t22 * qJD(1);
t32 = t320 + t322;
t301 = t32 * qJD(2);
t183 = t215 * t329 - t330 * t269;
t234 = -t140 * t336 + t183 * t338;
t209 = t326 / 0.2e1;
t251 = t209 + t328 / 0.2e1;
t44 = t234 + t251;
t299 = t44 * qJD(2);
t68 = t174 * t175 + t176 * t177 - t207;
t297 = t68 * qJD(1);
t98 = 0.2e1 * t249 + t310;
t295 = t98 * qJD(2);
t208 = -pkin(3) * t218 - pkin(2);
t168 = -pkin(4) * t344 + t208;
t294 = qJD(2) * t168;
t293 = qJD(2) * t218;
t292 = qJD(3) * t345;
t289 = qJD(5) * t345;
t288 = qJD(5) * t168;
t231 = t192 * t349 + t213 * t335;
t121 = (-t216 / 0.2e1 + t231) * pkin(3);
t287 = t121 * qJD(2);
t189 = t344 ^ 2;
t122 = t189 - t341;
t286 = t122 * qJD(2);
t138 = t249 - t186 / 0.2e1;
t285 = t138 * qJD(2);
t284 = t138 * qJD(5);
t150 = t189 + t341;
t281 = t150 * qJD(2);
t211 = t216 ^ 2;
t212 = t218 ^ 2;
t253 = (t211 + t212) * t219;
t158 = t217 * t253 - t207;
t280 = t158 * qJD(1);
t279 = t344 * qJD(2);
t278 = t192 * qJD(2);
t277 = t192 * qJD(3);
t204 = t212 - t211;
t276 = t204 * qJD(2);
t275 = t216 * qJD(3);
t274 = t217 * qJD(2);
t273 = t218 * qJD(3);
t272 = t219 * qJD(2);
t271 = pkin(2) * t216 * qJD(2);
t270 = pkin(2) * t293;
t261 = t345 * t354;
t260 = t344 * t278;
t259 = t344 * t277;
t258 = t216 * t273;
t169 = t326 + t328;
t221 = t169 * t331;
t235 = t116 * t183 / 0.2e1 + t119 * t336;
t2 = t221 + t235;
t9 = t168 * t169;
t248 = t2 * qJD(1) + t9 * qJD(2);
t247 = t14 * qJD(1);
t17 = t140 * t382 - t345 * t56;
t236 = t140 * t361 + t252 * t338;
t30 = t332 + t236;
t246 = qJD(1) * t30 - qJD(2) * t17;
t232 = t177 * t213 / 0.2e1 + t175 * t349;
t18 = (t305 / 0.2e1 + t232) * pkin(3);
t46 = t208 * t326;
t245 = -t18 * qJD(1) + t46 * qJD(2);
t47 = t140 * t169 + t168 * t345;
t244 = qJD(2) * t47 - t375;
t48 = -t140 * t168 + t169 * t345;
t243 = qJD(2) * t48 - t376;
t67 = t154 * t344 - t192 * t353;
t233 = -t174 * t333 + t176 * t334;
t81 = t332 + t233;
t242 = -qJD(1) * t81 + qJD(2) * t67;
t24 = t340 + t377 / 0.2e1;
t241 = -qJD(2) * t24 - qJD(3) * t183;
t240 = qJD(3) * t184;
t239 = qJD(5) * t98 + t292;
t130 = t192 * t208 - t326 * t344;
t230 = -t318 / 0.2e1 - t317 / 0.2e1;
t133 = (t333 + t230) * t219;
t238 = -qJD(1) * t133 + qJD(2) * t130;
t131 = t192 * t326 + t208 * t344;
t229 = -t316 / 0.2e1 + t319 / 0.2e1;
t134 = (t335 + t229) * t219;
t237 = -qJD(1) * t134 + qJD(2) * t131;
t228 = t140 * t294 + t376;
t227 = -t294 * t345 + t375;
t205 = t216 * t293;
t188 = t344 * qJD(3);
t171 = t184 * qJD(5);
t170 = t183 * qJD(5);
t136 = t192 * t331 + t230 * t219;
t135 = (t229 + t334) * t219;
t120 = pkin(3) * t231 + t209;
t82 = t332 - t233;
t45 = -t234 + t251;
t31 = t332 - t236;
t25 = -t381 + 0.2e1 * t340;
t19 = (-t305 / 0.2e1 + t232) * pkin(3);
t1 = t221 - t235;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t158 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t68, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t274, -t272, 0, 0, 0, 0, 0, 0, 0, 0, -t218 * t274 - t219 * t275, t216 * t274 - t219 * t273, qJD(2) * t253, t280 + (-t217 * pkin(2) + pkin(6) * t253) * qJD(2), 0, 0, 0, 0, 0, 0, qJD(3) * t136 - t274 * t344, qJD(3) * t135 + t192 * t274, (t175 * t192 + t177 * t344) * qJD(2), t297 + (t154 * t177 - t175 * t353 + t208 * t217) * qJD(2) + t19 * qJD(3) + t82 * qJD(4), 0, 0, 0, 0, 0, 0, t140 * t274 + t365 * t371, t274 * t345 + t362 * t371, (-t116 * t345 - t119 * t140) * qJD(2) + t324, t304 + (t116 * t56 - t119 * t382 + t168 * t217) * qJD(2) + t1 * qJD(3) + t31 * qJD(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t216 * t272 - t217 * t273, t217 * t275 - t218 * t272, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2) * t136 - qJD(3) * t176, qJD(2) * t135 + qJD(3) * t174, 0, t19 * qJD(2) + (-t174 * t213 - t176 * t214) * t323, 0, 0, 0, 0, 0, 0, t370, t369, t321, t1 * qJD(2) + (t118 * t183 - t184 * t252) * qJD(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t31 * qJD(2); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t370, t369, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t280, 0, 0, 0, 0, 0, 0, -t133 * qJD(3), -t134 * qJD(3), 0, -qJD(3) * t18 - qJD(4) * t81 - t297, 0, 0, 0, 0, 0, 0, -t371 * t364, -t371 * t363, t324, qJD(3) * t2 - qJD(4) * t30 - t304; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t258, t204 * qJD(3), 0, -t258, 0, 0, -pkin(2) * t275, -pkin(2) * t273, 0, 0, t259, t122 * qJD(3), 0, -t259, 0, 0, t130 * qJD(3), t131 * qJD(3), qJD(4) * t150, qJD(3) * t46 + qJD(4) * t67, -t58 * t345, t371 * t367, 0, (t289 + t292) * t140, 0, 0, qJD(3) * t47 + t288 * t345, qJD(3) * t48 - t140 * t288, qJD(4) * t32, qJD(3) * t9 + qJD(4) * t17; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t205, t276, t273, -t205, -t275, 0, -pkin(6) * t273 - t271, pkin(6) * t275 - t270, 0, 0, t260, t286, t188, -t260, -t277, 0, -qJD(3) * t154 + t238, -qJD(3) * t353 + t237, (-t192 * t213 - t214 * t344) * t323, t120 * qJD(4) + (-t154 * t214 + t213 * t353) * t323 + t245, -t261, t372, -t58, t360, -t239, 0, t244 + t383, -qJD(3) * t56 + qJD(5) * t25 + t243, (-t140 * t183 - t184 * t345) * qJD(3) + t247, (-t183 * t382 + t184 * t56) * qJD(3) + t45 * qJD(4) + t248; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t281, qJD(3) * t120 + t242, 0, 0, 0, 0, 0, 0, t284, 0, t301, qJD(3) * t45 - t246; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t360, t372, -t58, t360, -qJD(3) * t98 - t289, 0, qJD(4) * t138 - t227 + t383, qJD(3) * t25 - qJD(5) * t56 - t228, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t133 * qJD(2), t134 * qJD(2), 0, qJD(2) * t18, 0, 0, 0, 0, 0, 0, t373, t374, -t321, -qJD(2) * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t205, -t276, 0, t205, 0, 0, t271, t270, 0, 0, -t260, -t286, 0, t260, 0, 0, -qJD(4) * t192 - t238, -qJD(4) * t344 - t237, 0, qJD(4) * t121 - t245, t261, -t372, 0, -t360, -t284, 0, -qJD(4) * t345 - t244, qJD(5) * t24 - t243 + t355, -t247, -qJD(4) * t44 - t248; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t171, t170, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t278, -t279, 0, t287, 0, 0, 0, 0, 0, 0, -t283, t354, 0, -t299; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t285, 0, -t171 - t240, t170 - t241, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t81 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t30 * qJD(2); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t277, t188, -t281, -qJD(3) * t121 - t242, 0, 0, 0, 0, 0, 0, t239, -t58, -t301, qJD(3) * t44 + t246; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t278, t279, 0, -t287, 0, 0, 0, 0, 0, 0, t283, -t354, 0, t299; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t295, -t354, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t373, t374, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t360, -t372, 0, -t360, t138 * qJD(3), 0, -qJD(4) * t98 + t227, -qJD(3) * t24 + t228 + t355, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t285, 0, t240, t241, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t295, t354, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t3;
