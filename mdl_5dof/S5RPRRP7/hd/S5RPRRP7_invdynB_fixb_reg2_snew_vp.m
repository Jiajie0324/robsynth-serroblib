% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRRP7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,theta2]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:46
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRRP7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRP7_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRP7_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRP7_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRP7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPRRP7_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:45:44
% EndTime: 2019-12-31 18:45:57
% DurationCPUTime: 12.34s
% Computational Cost: add. (20840->511), mult. (40410->706), div. (0->0), fcn. (25561->8), ass. (0->373)
t624 = sin(qJ(4));
t627 = cos(qJ(4));
t625 = sin(qJ(3));
t672 = qJD(1) * t625;
t577 = qJD(3) * t624 + t627 * t672;
t628 = cos(qJ(3));
t667 = qJD(1) * qJD(3);
t659 = t628 * t667;
t666 = qJDD(1) * t625;
t582 = t659 + t666;
t655 = -t627 * qJDD(3) + t582 * t624;
t671 = qJD(1) * t628;
t603 = -qJD(4) + t671;
t669 = qJD(4) - t603;
t472 = t669 * t577 + t655;
t575 = -t627 * qJD(3) + t624 * t672;
t639 = -qJDD(3) * t624 - t582 * t627;
t632 = qJD(4) * t575 + t639;
t684 = t575 * t603;
t724 = t684 - t632;
t697 = t724 * t624;
t411 = t472 * t627 + t697;
t571 = t577 ^ 2;
t713 = t575 ^ 2;
t531 = t571 - t713;
t382 = t411 * t628 - t531 * t625;
t407 = -t472 * t624 + t627 * t724;
t620 = sin(pkin(8));
t621 = cos(pkin(8));
t333 = t382 * t620 + t407 * t621;
t335 = t382 * t621 - t407 * t620;
t626 = sin(qJ(1));
t629 = cos(qJ(1));
t816 = t333 * t629 + t335 * t626;
t815 = t333 * t626 - t335 * t629;
t712 = t603 ^ 2;
t548 = t713 - t712;
t608 = t625 * t667;
t665 = qJDD(1) * t628;
t583 = -t608 + t665;
t572 = -qJDD(4) + t583;
t685 = t575 * t577;
t633 = t572 - t685;
t694 = t633 * t624;
t455 = t548 * t627 + t694;
t473 = (qJD(4) + t603) * t577 + t655;
t401 = t455 * t628 - t473 * t625;
t693 = t633 * t627;
t451 = t548 * t624 - t693;
t358 = t401 * t620 - t451 * t621;
t362 = t401 * t621 + t451 * t620;
t814 = t358 * t629 + t362 * t626;
t813 = t358 * t626 - t362 * t629;
t723 = t684 + t632;
t760 = -t473 * t624 + t723 * t627;
t725 = t571 + t713;
t759 = -t473 * t627 - t723 * t624;
t776 = -t625 * t725 + t628 * t759;
t788 = t620 * t760 + t621 * t776;
t789 = t620 * t776 - t621 * t760;
t806 = t626 * t788 + t629 * t789;
t812 = pkin(5) * t806;
t807 = -t626 * t789 + t629 * t788;
t811 = pkin(5) * t807;
t810 = qJ(2) * t789;
t809 = pkin(1) * t789 + pkin(6) * t776;
t777 = t625 * t759 + t628 * t725;
t808 = -pkin(1) * t777 + qJ(2) * t788;
t518 = t712 + t571;
t428 = t518 * t627 - t694;
t804 = pkin(2) * t428;
t803 = pkin(3) * t428;
t801 = pkin(6) * t777;
t800 = pkin(7) * t428;
t436 = t518 * t624 + t693;
t799 = pkin(7) * t436;
t798 = t428 * t620;
t797 = t428 * t621;
t796 = t436 * t625;
t795 = t436 * t628;
t792 = -pkin(2) * t777 - pkin(3) * t725 - pkin(7) * t759;
t791 = t411 * t625 + t531 * t628;
t790 = t455 * t625 + t473 * t628;
t549 = -t571 + t712;
t634 = -t572 - t685;
t692 = t634 * t624;
t745 = -t549 * t627 - t692;
t691 = t634 * t627;
t744 = -t549 * t624 + t691;
t757 = -t625 * t723 + t628 * t744;
t778 = -t620 * t745 + t621 * t757;
t779 = t620 * t757 + t621 * t745;
t787 = -t626 * t779 + t629 * t778;
t786 = t626 * t778 + t629 * t779;
t785 = pkin(7) * t760;
t722 = -t712 - t713;
t737 = t624 * t722 + t691;
t775 = pkin(2) * t737;
t774 = pkin(3) * t737;
t736 = t627 * t722 - t692;
t773 = pkin(7) * t736;
t772 = pkin(7) * t737;
t771 = qJ(5) * t724;
t768 = t620 * t737;
t766 = t621 * t737;
t764 = t625 * t736;
t763 = t628 * t736;
t596 = g(1) * t629 + g(2) * t626;
t630 = qJD(1) ^ 2;
t579 = -pkin(1) * t630 - t596;
t595 = g(1) * t626 - t629 * g(2);
t638 = qJDD(1) * pkin(1) + t595;
t519 = t579 * t620 - t621 * t638;
t520 = t621 * t579 + t620 * t638;
t657 = t519 * t620 + t621 * t520;
t444 = t519 * t621 - t520 * t620;
t706 = t444 * t626;
t385 = t629 * t657 + t706;
t705 = t444 * t629;
t762 = -t626 * t657 + t705;
t585 = qJDD(1) * t620 + t621 * t630;
t586 = qJDD(1) * t621 - t620 * t630;
t523 = -t585 * t626 + t629 * t586;
t617 = g(3) - qJDD(2);
t555 = qJ(2) * t585 - t617 * t621;
t640 = -qJ(2) * t586 - t617 * t620;
t761 = -pkin(5) * t523 + t555 * t626 + t629 * t640;
t758 = t625 * t744 + t628 * t723;
t516 = -qJD(4) * t577 - t655;
t677 = t603 * t624;
t662 = t575 * t677;
t636 = -t516 * t627 + t662;
t676 = t603 * t627;
t661 = t575 * t676;
t637 = -t516 * t624 - t661;
t664 = t625 * t685;
t716 = t628 * t637 - t664;
t738 = -t620 * t636 + t621 * t716;
t740 = t620 * t716 + t621 * t636;
t756 = -t626 * t740 + t629 * t738;
t755 = t626 * t738 + t629 * t740;
t543 = t577 * t676;
t644 = -t543 - t662;
t542 = t577 * t677;
t645 = -t542 + t661;
t715 = -t572 * t625 + t628 * t645;
t739 = -t620 * t644 + t621 * t715;
t741 = t620 * t715 + t621 * t644;
t754 = -t626 * t741 + t629 * t739;
t753 = t626 * t739 + t629 * t741;
t752 = -2 * qJD(5);
t504 = -pkin(2) * t630 + qJDD(1) * pkin(6) + t520;
t709 = pkin(3) * t628;
t649 = -pkin(7) * t625 - t709;
t580 = t649 * qJD(1);
t607 = t628 * t617;
t711 = qJD(3) ^ 2;
t446 = (qJD(1) * t580 + t504) * t625 - qJDD(3) * pkin(3) - t711 * pkin(7) + t607;
t746 = -t516 * pkin(4) + t446 - t771;
t726 = t629 * t585 + t586 * t626;
t742 = pkin(5) * t726 + t555 * t629 - t626 * t640;
t469 = t624 * t632 + t543;
t470 = -t627 * t632 + t542;
t646 = t628 * t470 + t664;
t718 = -t469 * t620 + t621 * t646;
t720 = t621 * t469 + t620 * t646;
t735 = -t626 * t720 + t629 * t718;
t734 = t626 * t718 + t629 * t720;
t503 = -qJDD(1) * pkin(2) - t630 * pkin(6) + t519;
t642 = -t583 + t608;
t643 = t582 + t659;
t433 = t642 * pkin(3) - t643 * pkin(7) + t503;
t484 = t628 * t504 - t625 * t617;
t447 = -t711 * pkin(3) + qJDD(3) * pkin(7) + t580 * t671 + t484;
t381 = t624 * t433 + t627 * t447;
t522 = pkin(4) * t575 - qJ(5) * t577;
t641 = -t572 * qJ(5) - t575 * t522 + t603 * t752 + t381;
t719 = t628 * t572 + t625 * t645;
t663 = t628 * t685;
t717 = t625 * t637 + t663;
t710 = pkin(3) * t625;
t708 = pkin(4) * t627;
t707 = qJ(5) * t627;
t704 = t446 * t624;
t703 = t446 * t627;
t690 = t503 * t625;
t689 = t503 * t628;
t683 = t577 * t603;
t602 = t628 * t630 * t625;
t592 = qJDD(3) + t602;
t680 = t592 * t625;
t593 = qJDD(3) - t602;
t679 = t593 * t625;
t678 = t593 * t628;
t615 = t625 ^ 2;
t675 = t615 * t630;
t380 = -t627 * t433 + t624 * t447;
t674 = t725 - t712;
t616 = t628 ^ 2;
t673 = t615 + t616;
t658 = qJ(5) * t624 + pkin(3);
t482 = t504 * t625 + t607;
t417 = t482 * t625 + t628 * t484;
t535 = -t595 * t626 - t629 * t596;
t653 = t620 * t602;
t652 = t621 * t602;
t650 = t577 * t522 + qJDD(5) + t380;
t589 = qJDD(1) * t629 - t626 * t630;
t648 = -pkin(5) * t589 - g(3) * t626;
t647 = t625 * t470 - t663;
t325 = -t380 * t627 + t381 * t624;
t326 = t380 * t624 + t381 * t627;
t416 = t482 * t628 - t484 * t625;
t534 = t595 * t629 - t596 * t626;
t635 = pkin(4) * t572 + t650;
t631 = 0.2e1 * qJD(5) * t577 - t746;
t613 = t616 * t630;
t600 = -t613 - t711;
t599 = t613 - t711;
t598 = -t675 - t711;
t597 = -t675 + t711;
t591 = t613 - t675;
t590 = t613 + t675;
t588 = qJDD(1) * t626 + t629 * t630;
t587 = t673 * qJDD(1);
t584 = -0.2e1 * t608 + t665;
t581 = 0.2e1 * t659 + t666;
t574 = t628 * t592;
t573 = t673 * t667;
t559 = -pkin(5) * t588 + g(3) * t629;
t547 = t582 * t628 - t615 * t667;
t546 = -t583 * t625 - t616 * t667;
t545 = qJDD(3) * t620 + t573 * t621;
t544 = -qJDD(3) * t621 + t573 * t620;
t541 = -t598 * t625 - t678;
t540 = -t597 * t625 + t574;
t539 = t600 * t628 - t680;
t538 = t599 * t628 - t679;
t537 = t598 * t628 - t679;
t536 = t600 * t625 + t574;
t528 = t587 * t621 - t590 * t620;
t527 = t587 * t620 + t590 * t621;
t521 = -t581 * t625 + t584 * t628;
t514 = t547 * t621 - t653;
t513 = t546 * t621 + t653;
t512 = t547 * t620 + t652;
t511 = t546 * t620 - t652;
t510 = t540 * t621 + t620 * t666;
t509 = t538 * t621 + t620 * t665;
t508 = t540 * t620 - t621 * t666;
t507 = t538 * t620 - t621 * t665;
t492 = t541 * t621 + t581 * t620;
t491 = t539 * t621 - t584 * t620;
t490 = t541 * t620 - t581 * t621;
t489 = t539 * t620 + t584 * t621;
t483 = t521 * t621 - t591 * t620;
t481 = t521 * t620 + t591 * t621;
t478 = t669 * t575 + t639;
t471 = -t516 - t683;
t464 = -t527 * t626 + t528 * t629;
t463 = t527 * t629 + t528 * t626;
t457 = -pkin(6) * t537 + t689;
t452 = -pkin(6) * t536 + t690;
t439 = -pkin(2) * t537 + t484;
t438 = -pkin(2) * t536 + t482;
t432 = pkin(1) * t617 + qJ(2) * t657;
t421 = -t490 * t626 + t492 * t629;
t420 = -t489 * t626 + t491 * t629;
t419 = t490 * t629 + t492 * t626;
t418 = t489 * t629 + t491 * t626;
t398 = t471 * t625 + t763;
t397 = -t478 * t625 + t795;
t396 = -t471 * t628 + t764;
t395 = t478 * t628 + t796;
t394 = -qJ(2) * t527 + t416 * t621;
t393 = qJ(2) * t528 + t416 * t620;
t392 = t472 * t625 + t763;
t391 = -t625 * t724 - t795;
t390 = -t472 * t628 + t764;
t389 = t628 * t724 - t796;
t388 = t417 * t621 + t503 * t620;
t387 = t417 * t620 - t503 * t621;
t386 = t703 + t800;
t379 = t704 - t772;
t366 = -qJ(2) * t490 - t439 * t620 + t457 * t621;
t365 = -qJ(2) * t489 - t438 * t620 + t452 * t621;
t364 = (-pkin(4) * t603 + t752) * t577 + t746;
t355 = t398 * t621 + t768;
t354 = t397 * t621 - t798;
t353 = t398 * t620 - t766;
t352 = t397 * t620 + t797;
t351 = -pkin(1) * t537 + qJ(2) * t492 + t439 * t621 + t457 * t620;
t350 = -pkin(1) * t536 + qJ(2) * t491 + t438 * t621 + t452 * t620;
t349 = qJ(5) * t712 - t635;
t348 = t392 * t621 + t768;
t347 = t391 * t621 + t798;
t346 = t392 * t620 - t766;
t345 = t391 * t620 - t797;
t344 = -pkin(4) * t712 + t641;
t343 = t381 + t803;
t342 = -pkin(3) * t760 - pkin(4) * t723 + qJ(5) * t473;
t341 = t380 - t774;
t340 = (-t471 + t683) * pkin(4) + t631;
t339 = pkin(4) * t683 + t631 + t771;
t338 = t674 * qJ(5) + t635;
t337 = t674 * pkin(4) + t641;
t328 = -t387 * t626 + t388 * t629;
t327 = t387 * t629 + t388 * t626;
t324 = -pkin(2) * t395 - pkin(3) * t478 - t704 - t799;
t323 = -pkin(2) * t390 + pkin(3) * t472 + t703 - t773;
t322 = -qJ(2) * t387 - (pkin(2) * t620 - pkin(6) * t621) * t416;
t321 = -t774 + (-t722 - t712) * qJ(5) + (-t634 + t572) * pkin(4) + t650;
t320 = -t803 + qJ(5) * t633 + (-t518 + t712) * pkin(4) - t641;
t319 = -t340 * t624 - t471 * t707 - t772;
t318 = t326 * t628 + t446 * t625;
t317 = t326 * t625 - t446 * t628;
t316 = -pkin(4) * t697 + t339 * t627 - t800;
t315 = -t325 - t785;
t314 = -t353 * t626 + t355 * t629;
t313 = -t352 * t626 + t354 * t629;
t312 = t353 * t629 + t355 * t626;
t311 = t352 * t629 + t354 * t626;
t310 = t344 * t627 - t349 * t624;
t309 = t344 * t624 + t349 * t627;
t308 = -t346 * t626 + t348 * t629;
t307 = -t345 * t626 + t347 * t629;
t306 = t346 * t629 + t348 * t626;
t305 = t345 * t629 + t347 * t626;
t304 = qJ(2) * t388 - (-pkin(2) * t621 - pkin(6) * t620 - pkin(1)) * t416;
t303 = -pkin(6) * t395 - t343 * t625 + t386 * t628;
t302 = -pkin(6) * t390 - t341 * t625 + t379 * t628;
t297 = -pkin(2) * t396 - t340 * t627 + t658 * t471 - t773;
t296 = -pkin(2) * t389 + t799 - t339 * t624 + (-pkin(3) - t708) * t724;
t295 = -t326 + t792;
t294 = -t337 * t624 + t338 * t627 - t785;
t293 = t310 * t628 + t364 * t625;
t292 = t310 * t625 - t364 * t628;
t291 = t318 * t621 + t325 * t620;
t290 = t318 * t620 - t325 * t621;
t289 = t315 * t628 + t710 * t760 - t801;
t288 = -pkin(2) * t317 + pkin(3) * t446 - pkin(7) * t326;
t287 = -t337 * t627 - t338 * t624 + t792;
t286 = -pkin(7) * t309 + (pkin(4) * t624 - t707) * t364;
t285 = -pkin(6) * t396 + t319 * t628 - t321 * t625;
t284 = -pkin(3) * t309 - pkin(4) * t349 - qJ(5) * t344;
t283 = -pkin(6) * t389 + t316 * t628 - t320 * t625;
t282 = -pkin(6) * t317 + (-pkin(7) * t628 + t710) * t325;
t281 = t294 * t628 - t342 * t625 - t801;
t280 = -qJ(2) * t352 + t303 * t621 - t324 * t620;
t279 = t293 * t621 + t309 * t620;
t278 = t293 * t620 - t309 * t621;
t277 = -qJ(2) * t346 + t302 * t621 - t323 * t620;
t276 = -pkin(1) * t395 + qJ(2) * t354 + t303 * t620 + t324 * t621;
t275 = -pkin(1) * t390 + qJ(2) * t348 + t302 * t620 + t323 * t621;
t274 = -t290 * t626 + t291 * t629;
t273 = t290 * t629 + t291 * t626;
t272 = t289 * t621 - t295 * t620 - t810;
t271 = -qJ(2) * t353 + t285 * t621 - t297 * t620;
t270 = -pkin(2) * t292 - pkin(7) * t310 + (t658 + t708) * t364;
t269 = -qJ(2) * t345 + t283 * t621 - t296 * t620;
t268 = t289 * t620 + t295 * t621 + t808;
t267 = -pkin(1) * t396 + qJ(2) * t355 + t285 * t620 + t297 * t621;
t266 = -pkin(1) * t389 + qJ(2) * t347 + t283 * t620 + t296 * t621;
t265 = t281 * t621 - t287 * t620 - t810;
t264 = -t278 * t626 + t279 * t629;
t263 = t278 * t629 + t279 * t626;
t262 = t281 * t620 + t287 * t621 + t808;
t261 = -pkin(6) * t292 - t284 * t625 + t286 * t628;
t260 = -qJ(2) * t290 + t282 * t621 - t288 * t620;
t259 = -pkin(1) * t317 + qJ(2) * t291 + t282 * t620 + t288 * t621;
t258 = -qJ(2) * t278 + t261 * t621 - t270 * t620;
t257 = -pkin(1) * t292 + qJ(2) * t279 + t261 * t620 + t270 * t621;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t588, -t589, 0, t535, 0, 0, 0, 0, 0, 0, -t726, -t523, 0, t385, 0, 0, 0, 0, 0, 0, t420, t421, t464, t328, 0, 0, 0, 0, 0, 0, t308, t313, t807, t274, 0, 0, 0, 0, 0, 0, t314, t807, t307, t264; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t589, -t588, 0, t534, 0, 0, 0, 0, 0, 0, t523, -t726, 0, -t762, 0, 0, 0, 0, 0, 0, t418, t419, t463, t327, 0, 0, 0, 0, 0, 0, t306, t311, t806, t273, 0, 0, 0, 0, 0, 0, t312, t806, t305, t263; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t617, 0, 0, 0, 0, 0, 0, t536, t537, 0, -t416, 0, 0, 0, 0, 0, 0, t390, t395, t777, t317, 0, 0, 0, 0, 0, 0, t396, t777, t389, t292; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t589, 0, -t588, 0, t648, -t559, -t534, -pkin(5) * t534, 0, 0, t523, 0, -t726, 0, t761, t742, t762, pkin(5) * t762 + qJ(2) * t705 - t432 * t626, -t512 * t626 + t514 * t629, -t481 * t626 + t483 * t629, -t508 * t626 + t510 * t629, -t511 * t626 + t513 * t629, -t507 * t626 + t509 * t629, -t544 * t626 + t545 * t629, -pkin(5) * t418 - t350 * t626 + t365 * t629, -pkin(5) * t419 - t351 * t626 + t366 * t629, -pkin(5) * t463 - t393 * t626 + t394 * t629, -pkin(5) * t327 - t304 * t626 + t322 * t629, t735, t815, t787, t756, -t813, t754, -pkin(5) * t306 - t275 * t626 + t277 * t629, -pkin(5) * t311 - t276 * t626 + t280 * t629, -t268 * t626 + t272 * t629 - t812, -pkin(5) * t273 - t259 * t626 + t260 * t629, t735, t787, -t815, t754, t813, t756, -pkin(5) * t312 - t267 * t626 + t271 * t629, -t262 * t626 + t265 * t629 - t812, -pkin(5) * t305 - t266 * t626 + t269 * t629, -pkin(5) * t263 - t257 * t626 + t258 * t629; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t588, 0, t589, 0, t559, t648, t535, pkin(5) * t535, 0, 0, t726, 0, t523, 0, -t742, t761, t385, pkin(5) * t385 + qJ(2) * t706 + t432 * t629, t512 * t629 + t514 * t626, t481 * t629 + t483 * t626, t508 * t629 + t510 * t626, t511 * t629 + t513 * t626, t507 * t629 + t509 * t626, t544 * t629 + t545 * t626, pkin(5) * t420 + t350 * t629 + t365 * t626, pkin(5) * t421 + t351 * t629 + t366 * t626, pkin(5) * t464 + t393 * t629 + t394 * t626, pkin(5) * t328 + t304 * t629 + t322 * t626, t734, -t816, t786, t755, t814, t753, pkin(5) * t308 + t275 * t629 + t277 * t626, pkin(5) * t313 + t276 * t629 + t280 * t626, t268 * t629 + t272 * t626 + t811, pkin(5) * t274 + t259 * t629 + t260 * t626, t734, t786, t816, t753, -t814, t755, pkin(5) * t314 + t267 * t629 + t271 * t626, t262 * t629 + t265 * t626 + t811, pkin(5) * t307 + t266 * t629 + t269 * t626, pkin(5) * t264 + t257 * t629 + t258 * t626; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t595, t596, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t586 - t519, -pkin(1) * t585 - t520, 0, -pkin(1) * t444, t643 * t625, t581 * t628 + t584 * t625, t597 * t628 + t680, -t642 * t628, t599 * t625 + t678, 0, pkin(1) * t489 + pkin(2) * t584 + pkin(6) * t539 - t689, pkin(1) * t490 - pkin(2) * t581 + pkin(6) * t541 + t690, pkin(1) * t527 + pkin(2) * t590 + pkin(6) * t587 + t417, pkin(1) * t387 - pkin(2) * t503 + pkin(6) * t417, t647, -t791, t758, t717, t790, t719, pkin(1) * t346 + pkin(6) * t392 + t341 * t628 + t379 * t625 - t775, pkin(1) * t352 + pkin(6) * t397 + t343 * t628 + t386 * t625 + t804, t315 * t625 + (-pkin(2) - t709) * t760 + t809, pkin(1) * t290 + pkin(6) * t318 + (-pkin(2) + t649) * t325, t647, t758, t791, t719, -t790, t717, pkin(1) * t353 + pkin(6) * t398 + t319 * t625 + t321 * t628 - t775, -pkin(2) * t760 + t294 * t625 + t342 * t628 + t809, pkin(1) * t345 + pkin(6) * t391 + t316 * t625 + t320 * t628 - t804, pkin(1) * t278 - pkin(2) * t309 + pkin(6) * t293 + t284 * t628 + t286 * t625;];
tauB_reg = t1;
