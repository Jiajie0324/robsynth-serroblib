% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPPRR11
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:06
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPPRR11_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR11_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR11_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR11_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR11_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPPRR11_invdynf_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:06:06
% EndTime: 2019-12-31 18:06:07
% DurationCPUTime: 1.33s
% Computational Cost: add. (2310->173), mult. (4383->167), div. (0->0), fcn. (2416->6), ass. (0->97)
t797 = sin(qJ(4));
t817 = t797 * qJD(1);
t783 = qJD(5) + t817;
t828 = qJD(5) + t783;
t803 = qJD(1) ^ 2;
t798 = sin(qJ(1));
t801 = cos(qJ(1));
t780 = -t801 * g(1) - t798 * g(2);
t805 = -qJDD(1) * qJ(2) - 0.2e1 * qJD(2) * qJD(1) - t780;
t821 = pkin(1) + qJ(3);
t762 = t821 * t803 - qJDD(3) + t805;
t796 = sin(qJ(5));
t799 = cos(qJ(5));
t800 = cos(qJ(4));
t818 = qJD(1) * t800;
t766 = -t799 * qJD(4) + t796 * t818;
t827 = t766 ^ 2;
t768 = t796 * qJD(4) + t799 * t818;
t826 = t768 ^ 2;
t825 = t783 ^ 2;
t824 = 2 * qJD(3);
t823 = t797 * pkin(4);
t822 = t797 * g(3);
t820 = t768 * t766;
t793 = t797 ^ 2;
t794 = t800 ^ 2;
t819 = t793 + t794;
t816 = qJD(5) - t783;
t815 = qJD(1) * qJD(4);
t814 = t797 * qJDD(1);
t813 = t800 * qJDD(1);
t812 = t797 * t803 * t800;
t811 = t797 * t815;
t810 = t800 * t815;
t779 = t798 * g(1) - t801 * g(2);
t756 = -qJDD(1) * pkin(6) - t762;
t751 = -t800 * g(3) + t797 * t756;
t771 = -t811 + t813;
t809 = t799 * qJDD(4) - t796 * t771;
t808 = -t796 * qJDD(4) - t799 * t771;
t807 = t803 * qJ(2) - qJDD(2) + t779;
t806 = -qJDD(5) - t810 - t814;
t761 = qJD(1) * t824 + t821 * qJDD(1) + t807;
t802 = qJD(4) ^ 2;
t795 = t803 * pkin(6);
t782 = -t794 * t803 - t802;
t781 = -t793 * t803 - t802;
t778 = -qJDD(4) - t812;
t777 = qJDD(4) - t812;
t776 = t819 * t803;
t775 = t798 * qJDD(1) + t801 * t803;
t774 = t801 * qJDD(1) - t798 * t803;
t773 = t819 * qJDD(1);
t772 = -0.2e1 * t811 + t813;
t770 = 0.2e1 * t810 + t814;
t769 = (-pkin(7) * t800 + t823) * qJD(1);
t765 = qJDD(1) * pkin(1) + t807;
t764 = t803 * pkin(1) + t805;
t760 = t800 * t778 - t797 * t782;
t759 = -t797 * t777 + t800 * t781;
t758 = t797 * t778 + t800 * t782;
t757 = t800 * t777 + t797 * t781;
t755 = -t795 + t761;
t754 = -t825 - t826;
t752 = -t825 - t827;
t750 = t800 * t756 + t822;
t749 = t806 - t820;
t748 = -t806 - t820;
t747 = -t826 - t827;
t746 = t816 * t766 + t808;
t745 = -t828 * t766 - t808;
t744 = -t816 * t768 + t809;
t743 = t828 * t768 - t809;
t742 = -t802 * pkin(4) + qJDD(4) * pkin(7) - t769 * t817 + t751;
t741 = qJDD(4) * pkin(4) + t802 * pkin(7) + t822 + (-qJD(1) * t769 + t756) * t800;
t740 = -t771 * pkin(7) - t795 + (t821 + t823) * qJDD(1) + (t824 + (0.2e1 * pkin(4) * t800 + pkin(7) * t797) * qJD(4)) * qJD(1) + t807;
t739 = t799 * t749 - t796 * t754;
t738 = t796 * t749 + t799 * t754;
t737 = -t797 * t750 + t800 * t751;
t736 = t800 * t750 + t797 * t751;
t735 = -t796 * t748 + t799 * t752;
t734 = t799 * t748 + t796 * t752;
t733 = t799 * t744 - t796 * t746;
t732 = t796 * t744 + t799 * t746;
t731 = t796 * t740 + t799 * t742;
t730 = t799 * t740 - t796 * t742;
t729 = t800 * t739 + t797 * t745;
t728 = t797 * t739 - t800 * t745;
t727 = t800 * t735 + t797 * t743;
t726 = t797 * t735 - t800 * t743;
t725 = t800 * t733 + t797 * t747;
t724 = t797 * t733 - t800 * t747;
t723 = -t796 * t730 + t799 * t731;
t722 = t799 * t730 + t796 * t731;
t721 = t800 * t723 - t797 * t741;
t720 = t797 * t723 + t800 * t741;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t775, -t774, 0, -t798 * t779 + t801 * t780, 0, 0, 0, 0, 0, 0, 0, t775, t774, -t801 * t764 - t798 * t765, 0, 0, 0, 0, 0, 0, 0, t774, -t775, -t798 * t761 - t801 * t762, 0, 0, 0, 0, 0, 0, t801 * t757 - t798 * t770, t801 * t758 - t798 * t772, -t801 * t773 + t798 * t776, t801 * t736 - t798 * t755, 0, 0, 0, 0, 0, 0, t801 * t726 - t798 * t734, t801 * t728 - t798 * t738, t801 * t724 - t798 * t732, t801 * t720 - t798 * t722; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t774, -t775, 0, t801 * t779 + t798 * t780, 0, 0, 0, 0, 0, 0, 0, -t774, t775, -t798 * t764 + t801 * t765, 0, 0, 0, 0, 0, 0, 0, t775, t774, t801 * t761 - t798 * t762, 0, 0, 0, 0, 0, 0, t798 * t757 + t801 * t770, t798 * t758 + t801 * t772, -t798 * t773 - t801 * t776, t798 * t736 + t801 * t755, 0, 0, 0, 0, 0, 0, t798 * t726 + t801 * t734, t798 * t728 + t801 * t738, t798 * t724 + t801 * t732, t798 * t720 + t801 * t722; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t759, t760, 0, t737, 0, 0, 0, 0, 0, 0, t727, t729, t725, t721; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t803, -qJDD(1), 0, t780, 0, 0, 0, 0, 0, 0, 0, t803, qJDD(1), -t764, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t803, -t762, 0, 0, 0, 0, 0, 0, t757, t758, -t773, t736, 0, 0, 0, 0, 0, 0, t726, t728, t724, t720; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t803, 0, t779, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), t803, t765, 0, 0, 0, 0, 0, 0, 0, t803, qJDD(1), t761, 0, 0, 0, 0, 0, 0, t770, t772, -t776, t755, 0, 0, 0, 0, 0, 0, t734, t738, t732, t722; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t759, t760, 0, t737, 0, 0, 0, 0, 0, 0, t727, t729, t725, t721; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t759, t760, 0, t737, 0, 0, 0, 0, 0, 0, t727, t729, t725, t721; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t803, -qJDD(1), t764, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), t803, t762, 0, 0, 0, 0, 0, 0, -t757, -t758, t773, -t736, 0, 0, 0, 0, 0, 0, -t726, -t728, -t724, -t720; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t803, -t765, 0, 0, 0, 0, 0, 0, 0, -t803, -qJDD(1), -t761, 0, 0, 0, 0, 0, 0, -t770, -t772, t776, -t755, 0, 0, 0, 0, 0, 0, -t734, -t738, -t732, -t722; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t759, t760, 0, t737, 0, 0, 0, 0, 0, 0, t727, t729, t725, t721; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t803, -qJDD(1), -t761, 0, 0, 0, 0, 0, 0, -t770, -t772, t776, -t755, 0, 0, 0, 0, 0, 0, -t734, -t738, -t732, -t722; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t803, -t762, 0, 0, 0, 0, 0, 0, t757, t758, -t773, t736, 0, 0, 0, 0, 0, 0, t726, t728, t724, t720; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t781, t778, -t814, t751, 0, 0, 0, 0, 0, 0, t735, t739, t733, t723; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t777, t782, -t813, t750, 0, 0, 0, 0, 0, 0, -t743, -t745, -t747, t741; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t770, t772, -t776, t755, 0, 0, 0, 0, 0, 0, t734, t738, t732, t722; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t752, t749, t744, t731; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t748, t754, t746, t730; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t743, t745, t747, -t741;];
f_new_reg = t1;
