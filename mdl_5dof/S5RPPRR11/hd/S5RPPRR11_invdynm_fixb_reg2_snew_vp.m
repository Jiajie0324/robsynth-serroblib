% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPPRR11
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [7x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:06
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPPRR11_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(7,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR11_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR11_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR11_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR11_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [7 1]), ...
  'S5RPPRR11_invdynm_fixb_reg2_snew_vp: pkin has to be [7x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:06:01
% EndTime: 2019-12-31 18:06:06
% DurationCPUTime: 5.08s
% Computational Cost: add. (13258->452), mult. (25123->488), div. (0->0), fcn. (13548->6), ass. (0->275)
t605 = sin(qJ(5));
t608 = cos(qJ(5));
t609 = cos(qJ(4));
t676 = qJD(1) * t609;
t559 = -t608 * qJD(4) + t605 * t676;
t561 = t605 * qJD(4) + t608 * t676;
t519 = t561 * t559;
t675 = qJD(1) * qJD(4);
t658 = t609 * t675;
t606 = sin(qJ(4));
t673 = t606 * qJDD(1);
t565 = -t658 - t673;
t555 = qJDD(5) - t565;
t715 = -t519 + t555;
t719 = t605 * t715;
t718 = t608 * t715;
t613 = qJD(1) ^ 2;
t695 = pkin(1) + qJ(3);
t717 = t695 * t613;
t599 = qJDD(1) * qJ(2);
t607 = sin(qJ(1));
t610 = cos(qJ(1));
t578 = t610 * g(1) + t607 * g(2);
t627 = 0.2e1 * qJD(2) * qJD(1) - t578;
t618 = qJDD(3) + t627;
t616 = t599 + t618;
t517 = -qJDD(1) * pkin(6) + t616 - t717;
t501 = t606 * g(3) + t609 * t517;
t502 = t609 * g(3) - t606 * t517;
t457 = t609 * t501 - t606 * t502;
t704 = pkin(2) + pkin(3);
t716 = t704 * t457;
t659 = t606 * t675;
t671 = t609 * qJDD(1);
t566 = -t659 + t671;
t603 = t613 * pkin(6);
t577 = t607 * g(1) - t610 * g(2);
t636 = -qJDD(2) + t577;
t617 = t613 * qJ(2) + t636;
t614 = t695 * qJDD(1) + t617;
t701 = pkin(4) * t609;
t639 = pkin(7) * t606 + t701;
t705 = 2 * qJD(3);
t468 = -t565 * pkin(4) - t566 * pkin(7) - t603 + (qJD(4) * t639 + t705) * qJD(1) + t614;
t612 = qJD(4) ^ 2;
t697 = pkin(7) * t609;
t702 = pkin(4) * t606;
t623 = t613 * (-t697 + t702);
t479 = -t612 * pkin(4) + qJDD(4) * pkin(7) - t606 * t623 - t502;
t428 = -t608 * t468 + t605 * t479;
t429 = t605 * t468 + t608 * t479;
t400 = t605 * t428 + t608 * t429;
t458 = -t606 * t501 - t609 * t502;
t669 = qJD(1) * t705;
t714 = 0.2e1 * qJDD(1) * qJ(3) + t669;
t478 = qJDD(4) * pkin(4) + t612 * pkin(7) - t609 * t623 + t501;
t393 = t606 * t400 + t609 * t478;
t679 = pkin(4) * t478 + pkin(7) * t400;
t713 = -t704 * t393 - t679;
t399 = -t608 * t428 + t605 * t429;
t394 = t609 * t400 - t606 * t478;
t680 = pkin(3) * t399 - pkin(6) * t394;
t712 = t399 * (pkin(2) + t639) + t680;
t586 = t606 * qJD(1) + qJD(5);
t648 = t608 * qJDD(4) - t605 * t566;
t484 = (-qJD(5) + t586) * t561 + t648;
t628 = -t605 * qJDD(4) - t608 * t566;
t500 = -t559 * qJD(5) - t628;
t541 = t586 * t559;
t486 = t500 + t541;
t441 = t608 * t484 + t605 * t486;
t553 = t559 ^ 2;
t554 = t561 ^ 2;
t491 = t553 + t554;
t408 = t606 * t441 + t609 * t491;
t643 = pkin(4) * t491 + pkin(7) * t441 + t400;
t711 = -t704 * t408 - t643;
t584 = t586 ^ 2;
t503 = -t584 - t553;
t454 = t608 * t503 - t719;
t542 = t586 * t561;
t622 = t561 * qJD(5) - t648;
t483 = -t542 - t622;
t416 = t606 * t454 + t609 * t483;
t476 = t608 * t478;
t664 = pkin(4) * t483 + pkin(7) * t454 + t476;
t710 = -t704 * t416 - t664;
t513 = -t554 - t584;
t494 = t519 + t555;
t685 = t608 * t494;
t462 = -t605 * t513 - t685;
t487 = (qJD(5) + t586) * t559 + t628;
t424 = t606 * t462 + t609 * t487;
t475 = t605 * t478;
t665 = -pkin(4) * t487 - pkin(7) * t462 + t475;
t709 = -t704 * t424 + t665;
t439 = t605 * t484 - t608 * t486;
t391 = -pkin(7) * t439 - t399;
t409 = t609 * t441 - t606 * t491;
t666 = pkin(3) * t439 - pkin(6) * t409 - t606 * t391;
t708 = (pkin(2) + t701) * t439 + t666;
t600 = t606 ^ 2;
t690 = t600 * t613;
t581 = -t612 - t690;
t585 = t606 * t613 * t609;
t576 = qJDD(4) - t585;
t682 = t609 * t576;
t525 = t606 * t581 + t682;
t707 = -t704 * t525 - t501;
t601 = t609 ^ 2;
t592 = t601 * t613;
t583 = -t592 - t612;
t575 = qJDD(4) + t585;
t687 = t606 * t575;
t527 = t609 * t583 - t687;
t706 = -t704 * t527 - t502;
t533 = t614 + t669;
t703 = pkin(2) * t533;
t670 = t610 * qJDD(1);
t571 = -t607 * t613 + t670;
t700 = pkin(5) * t571;
t672 = t607 * qJDD(1);
t572 = t610 * t613 + t672;
t699 = pkin(5) * t572;
t698 = pkin(6) * t457;
t696 = t613 * pkin(1);
t694 = qJ(2) - pkin(6);
t693 = qJDD(1) * pkin(1);
t692 = t586 * t605;
t691 = t586 * t608;
t689 = t605 * t494;
t516 = -t603 + t533;
t507 = t606 * t516;
t686 = t606 * t576;
t684 = t609 * t516;
t683 = t609 * t575;
t681 = t609 * t391 + t439 * t702;
t678 = -pkin(3) * t516 + pkin(6) * t458;
t677 = t600 + t601;
t668 = t606 * t519;
t667 = t609 * t519;
t574 = t592 + t690;
t663 = pkin(3) * t574 + t458;
t532 = -t606 * t583 - t683;
t567 = -0.2e1 * t659 + t671;
t662 = -pkin(3) * t567 + pkin(6) * t532 + t507;
t529 = t609 * t581 - t686;
t564 = 0.2e1 * t658 + t673;
t661 = -pkin(3) * t564 + pkin(6) * t529 - t684;
t396 = t399 * t702;
t657 = -pkin(6) * t393 + t396;
t656 = -pkin(6) * t527 + t684;
t655 = qJ(3) - t697;
t453 = t605 * t503 + t718;
t404 = -pkin(4) * t453 + t428;
t415 = -pkin(7) * t453 - t475;
t654 = -t606 * t404 + t609 * t415;
t461 = t608 * t513 - t689;
t406 = -pkin(4) * t461 + t429;
t423 = -pkin(7) * t461 - t476;
t653 = -t606 * t406 + t609 * t423;
t615 = -t599 - t627;
t534 = -qJDD(3) + t615 + t717;
t651 = -t607 * t533 - t610 * t534;
t543 = t615 + t696;
t545 = t617 + t693;
t650 = -t610 * t543 - t607 * t545;
t649 = -t607 * t577 - t610 * t578;
t647 = t607 * t585;
t646 = t610 * t585;
t417 = t609 * t454 - t606 * t483;
t645 = -pkin(3) * t453 + pkin(6) * t417 + t609 * t404 + t606 * t415;
t425 = t609 * t462 - t606 * t487;
t644 = -pkin(3) * t461 + pkin(6) * t425 + t609 * t406 + t606 * t423;
t642 = pkin(2) * t516 - t678;
t641 = -pkin(6) * t408 + t681;
t640 = pkin(2) * t534 - qJ(3) * g(3);
t638 = t607 * g(3) + t700;
t637 = t610 * g(3) - t699;
t635 = -pkin(6) * t525 + t507;
t634 = t610 * t533 - t607 * t534;
t633 = t607 * t543 - t610 * t545;
t632 = t610 * t577 - t607 * t578;
t630 = pkin(2) * t567 - t662;
t629 = pkin(2) * t564 - t661;
t626 = -pkin(6) * t416 + t654;
t625 = -pkin(6) * t424 + t653;
t570 = t677 * qJDD(1);
t624 = pkin(6) * t570 - t457;
t621 = pkin(2) * t453 - t645;
t620 = pkin(2) * t461 - t644;
t593 = pkin(2) * t613 - g(3);
t619 = -pkin(2) * t672 - t610 * t593 - t699;
t552 = -t636 - 0.2e1 * t693;
t611 = pkin(1) * g(3);
t604 = qJ(2) * g(3);
t602 = pkin(2) * qJDD(1);
t595 = 0.2e1 * t599;
t582 = -t592 + t612;
t580 = -t612 + t690;
t573 = -t592 + t690;
t563 = pkin(3) * t570;
t558 = t677 * t675;
t551 = t595 + t627;
t544 = t595 + t618;
t540 = -t552 + t714;
t539 = -t554 + t584;
t538 = t553 - t584;
t537 = t606 * t566 + t601 * t675;
t536 = t609 * t565 + t600 * t675;
t531 = -t606 * t582 + t682;
t530 = (t566 - t659) * t609;
t528 = t609 * t580 - t687;
t526 = t609 * t582 + t686;
t524 = t606 * t580 + t683;
t523 = (-t565 + t658) * t606;
t522 = pkin(2) * t570 + t563;
t518 = -pkin(2) * t670 + t607 * t593 - t700;
t514 = t554 - t553;
t511 = t604 - t703;
t506 = -t609 * t564 - t606 * t567;
t505 = -t606 * t564 + t609 * t567;
t504 = t611 - t640;
t492 = pkin(1) * t545 - qJ(2) * t543;
t489 = (-t559 * t608 + t561 * t605) * t586;
t488 = (-t559 * t605 - t561 * t608) * t586;
t485 = t500 - t541;
t482 = -t542 + t622;
t474 = t608 * t500 - t561 * t692;
t473 = t605 * t500 + t561 * t691;
t472 = t559 * t691 + t605 * t622;
t471 = -t559 * t692 + t608 * t622;
t470 = t609 * t489 + t606 * t555;
t469 = t606 * t489 - t609 * t555;
t467 = t608 * t538 - t689;
t466 = -t605 * t539 + t718;
t465 = t605 * t538 + t685;
t464 = t608 * t539 + t719;
t456 = -qJ(2) * t534 + t695 * t533;
t450 = t609 * t474 + t668;
t449 = t609 * t472 - t668;
t448 = t606 * t474 - t667;
t447 = t606 * t472 + t667;
t446 = -pkin(2) * t574 - t663;
t445 = -qJ(2) * t532 - t630;
t444 = -qJ(2) * t529 - t629;
t443 = t694 * t527 + t695 * t567 + t684;
t442 = t694 * t525 + t695 * t564 + t507;
t440 = t608 * t483 - t605 * t485;
t438 = t605 * t483 + t608 * t485;
t434 = -t694 * t570 - t695 * t574 - t457;
t433 = t609 * t467 - t606 * t482;
t432 = t609 * t466 + t606 * t486;
t431 = t606 * t467 + t609 * t482;
t430 = t606 * t466 - t609 * t486;
t422 = -t695 * t532 - t706;
t421 = -t695 * t529 - t707;
t411 = t609 * t440 + t606 * t514;
t410 = t606 * t440 - t609 * t514;
t403 = -qJ(2) * t458 - t642;
t402 = t694 * t457 + t695 * t516;
t395 = -t695 * t458 + t716;
t388 = -t695 * t425 - t709;
t387 = -t695 * t417 - t710;
t386 = -qJ(2) * t425 - t620;
t385 = t694 * t424 + t695 * t461 + t653;
t384 = -qJ(2) * t417 - t621;
t383 = t694 * t416 + t695 * t453 + t654;
t382 = -qJ(2) * t409 - t708;
t381 = t694 * t408 + t695 * t439 + t681;
t380 = -t695 * t409 - t711;
t379 = -t695 * t394 - t713;
t378 = -qJ(2) * t394 - t712;
t377 = t396 + t694 * t393 + (pkin(1) + t655) * t399;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t571, 0, -t572, 0, -t638, -t637, -t632, -pkin(5) * t632, 0, -t571, t572, 0, 0, 0, t633, t638, t637, pkin(5) * t633 + (-t607 * pkin(1) + t610 * qJ(2)) * g(3), 0, t572, t571, 0, 0, 0, -t634, t619, t518, -pkin(5) * t634 - t607 * t504 + t610 * t511, t610 * t537 - t647, t610 * t505 + t607 * t573, t610 * t526 - t607 * t671, t610 * t536 + t647, t610 * t524 + t606 * t672, -t607 * qJDD(4) - t610 * t558, t610 * t444 - t607 * t421 - pkin(5) * (t607 * t525 + t610 * t564), t610 * t445 - t607 * t422 - pkin(5) * (t607 * t527 + t610 * t567), -t610 * t446 + t607 * t522 - pkin(5) * (-t607 * t570 - t610 * t574), t610 * t403 - t607 * t395 - pkin(5) * (t607 * t457 + t610 * t516), t610 * t448 - t607 * t473, t610 * t410 - t607 * t438, t610 * t430 - t607 * t464, t610 * t447 + t607 * t471, t610 * t431 - t607 * t465, t610 * t469 - t607 * t488, t610 * t384 - t607 * t387 - pkin(5) * (t607 * t416 + t610 * t453), t610 * t386 - t607 * t388 - pkin(5) * (t607 * t424 + t610 * t461), t610 * t382 - t607 * t380 - pkin(5) * (t607 * t408 + t610 * t439), t610 * t378 - t607 * t379 - pkin(5) * (t607 * t393 + t610 * t399); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t572, 0, t571, 0, t637, -t638, t649, pkin(5) * t649, 0, -t572, -t571, 0, 0, 0, t650, -t637, t638, pkin(5) * t650 + (t610 * pkin(1) + t607 * qJ(2)) * g(3), 0, -t571, t572, 0, 0, 0, t651, -t518, t619, pkin(5) * t651 + t610 * t504 + t607 * t511, t607 * t537 + t646, t607 * t505 - t610 * t573, t607 * t526 + t609 * t670, t607 * t536 - t646, t607 * t524 - t606 * t670, t610 * qJDD(4) - t607 * t558, t607 * t444 + t610 * t421 + pkin(5) * (t610 * t525 - t607 * t564), t607 * t445 + t610 * t422 + pkin(5) * (t610 * t527 - t607 * t567), -t607 * t446 - t610 * t522 + pkin(5) * (-t610 * t570 + t607 * t574), t607 * t403 + t610 * t395 + pkin(5) * (t610 * t457 - t607 * t516), t607 * t448 + t610 * t473, t607 * t410 + t610 * t438, t607 * t430 + t610 * t464, t607 * t447 - t610 * t471, t607 * t431 + t610 * t465, t607 * t469 + t610 * t488, t607 * t384 + t610 * t387 + pkin(5) * (t610 * t416 - t607 * t453), t607 * t386 + t610 * t388 + pkin(5) * (t610 * t424 - t607 * t461), t607 * t382 + t610 * t380 + pkin(5) * (t610 * t408 - t607 * t439), t607 * t378 + t610 * t379 + pkin(5) * (t610 * t393 - t607 * t399); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t577, t578, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t552, t551, t492, qJDD(1), 0, 0, 0, 0, 0, 0, t544, t540, t456, t530, t506, t531, t523, t528, 0, t442, t443, t434, t402, t450, t411, t432, t449, t433, t470, t383, t385, t381, t377; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t613, 0, 0, -g(3), -t577, 0, 0, -qJDD(1), t613, 0, 0, 0, -t545, 0, g(3), t604, 0, t613, qJDD(1), 0, 0, 0, -t533, -t593, -t602, t511, t537, t505, t526, t536, t524, -t558, t444, t445, -t446, t403, t448, t410, t430, t447, t431, t469, t384, t386, t382, t378; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t613, 0, qJDD(1), 0, g(3), 0, -t578, 0, 0, -t613, -qJDD(1), 0, 0, 0, -t543, -g(3), 0, t611, 0, -qJDD(1), t613, 0, 0, 0, -t534, t602, -t593, t504, t585, -t573, t671, -t585, -t673, qJDD(4), t421, t422, -t522, t395, t473, t438, t464, -t471, t465, t488, t387, t388, t380, t379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t577, t578, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t552, t551, t492, qJDD(1), 0, 0, 0, 0, 0, 0, t544, t540, t456, t530, t506, t531, t523, t528, 0, t442, t443, t434, t402, t450, t411, t432, t449, t433, t470, t383, t385, t381, t377; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t545, -t543, 0, qJDD(1), 0, 0, 0, 0, 0, 0, t616 - t696, t545 + t714, qJ(3) * t533, t530, t506, t531, t523, t528, 0, qJ(3) * t564 + t635, qJ(3) * t567 + t656, -qJ(3) * t574 + t624, qJ(3) * t516 - t698, t450, t411, t432, t449, t433, t470, qJ(3) * t453 + t626, qJ(3) * t461 + t625, qJ(3) * t439 + t641, t399 * t655 + t657; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t613, 0, 0, 0, t545, 0, -g(3), 0, 0, -t613, -qJDD(1), 0, 0, 0, t533, t593, t602, t703, -t537, -t505, -t526, -t536, -t524, t558, t629, t630, t446, t642, -t448, -t410, -t430, -t447, -t431, -t469, t621, t620, t708, t712; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t613, qJDD(1), 0, 0, 0, t543, g(3), 0, 0, 0, qJDD(1), -t613, 0, 0, 0, t534, -t602, t593, t640, -t585, t573, -t671, t585, t673, -qJDD(4), qJ(3) * t529 + t707, qJ(3) * t532 + t706, t522, qJ(3) * t458 - t716, -t473, -t438, -t464, t471, -t465, -t488, qJ(3) * t417 + t710, qJ(3) * t425 + t709, qJ(3) * t409 + t711, qJ(3) * t394 + t713; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t534, t533, 0, t530, t506, t531, t523, t528, 0, t635, t656, t624, -t698, t450, t411, t432, t449, t433, t470, t626, t625, t641, -t399 * t697 + t657; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t613, 0, 0, 0, t534, 0, -g(3), 0, -t585, t573, -t671, t585, t673, -qJDD(4), -pkin(3) * t525 - t501, -pkin(3) * t527 - t502, t563, -pkin(3) * t457, -t473, -t438, -t464, t471, -t465, -t488, -pkin(3) * t416 - t664, -pkin(3) * t424 + t665, -pkin(3) * t408 - t643, -pkin(3) * t393 - t679; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t613, qJDD(1), 0, 0, 0, -t533, g(3), 0, 0, t537, t505, t526, t536, t524, -t558, t661, t662, t663, t678, t448, t410, t430, t447, t431, t469, t645, t644, -t439 * t701 - t666, -t399 * t639 - t680; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t566, -t564, t576, t659, t580, -t659, 0, t516, -t501, 0, t474, t440, t466, t472, t467, t489, t415, t423, t391, -pkin(7) * t399; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t658, t567, t582, t565, t575, -t658, -t516, 0, -t502, 0, -t519, -t514, -t486, t519, t482, -t555, t404, t406, -pkin(4) * t439, -pkin(4) * t399; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t585, -t573, t671, -t585, -t673, qJDD(4), t501, t502, 0, 0, t473, t438, t464, -t471, t465, t488, t664, -t665, t643, t679; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t500, t483, t715, t541, t538, -t541, 0, -t478, t428, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t542, t485, t539, -t622, t494, -t542, t478, 0, t429, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t519, t514, t486, -t519, -t482, t555, -t428, -t429, 0, 0;];
m_new_reg = t1;
