% Calculate inertial parameters regressor of coriolis matrix for
% S5RPPRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:04
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RPPRR10_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR10_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR10_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRR10_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:04:23
% EndTime: 2019-12-31 18:04:27
% DurationCPUTime: 2.29s
% Computational Cost: add. (3259->157), mult. (6477->222), div. (0->0), fcn. (7375->6), ass. (0->138)
t249 = qJD(4) + qJD(5);
t154 = sin(pkin(8));
t155 = cos(pkin(8));
t158 = cos(qJ(4));
t230 = sin(qJ(4));
t133 = t154 * t158 - t155 * t230;
t157 = cos(qJ(5));
t126 = t157 * t133;
t131 = t154 * t230 + t155 * t158;
t156 = sin(qJ(5));
t219 = t156 * t131;
t238 = t126 - t219;
t241 = t238 ^ 2;
t125 = t157 * t131;
t218 = t156 * t133;
t239 = t125 + t218;
t245 = t239 ^ 2;
t247 = -t241 + t245;
t248 = t247 * qJD(1);
t228 = -pkin(6) + qJ(2);
t141 = t228 * t155;
t169 = t228 * t154;
t107 = t230 * t141 - t158 * t169;
t78 = -t133 * pkin(7) - t107;
t108 = t158 * t141 + t230 * t169;
t79 = -t131 * pkin(7) + t108;
t40 = -t156 * t79 + t157 * t78;
t246 = t249 * t40;
t244 = -t238 / 0.2e1;
t236 = t238 * qJD(1);
t243 = t239 * t236;
t118 = t126 / 0.2e1;
t232 = -t126 / 0.2e1;
t237 = t232 + t118;
t242 = t237 * qJD(4);
t159 = t156 * t78;
t180 = -t159 / 0.2e1;
t240 = t238 / 0.2e1;
t224 = t157 * t79;
t38 = -t224 - t159;
t194 = t238 * qJD(5);
t235 = t131 ^ 2;
t234 = t133 ^ 2;
t116 = -t125 / 0.2e1;
t117 = t125 / 0.2e1;
t231 = -t154 / 0.2e1;
t229 = t133 * pkin(4);
t227 = pkin(4) * qJD(5);
t226 = qJD(4) * pkin(4);
t10 = t238 * t40 - t239 * t38;
t222 = t10 * qJD(1);
t135 = t156 * t158 + t157 * t230;
t13 = (t244 + t240) * t135;
t221 = t13 * qJD(1);
t15 = t180 + t159 / 0.2e1;
t220 = t15 * qJD(1);
t20 = -t241 - t245;
t216 = t20 * qJD(1);
t139 = -t155 * pkin(2) - t154 * qJ(3) - pkin(1);
t128 = t155 * pkin(3) - t139;
t104 = t131 * pkin(4) + t128;
t22 = -t104 * t238 - t229 * t239;
t214 = t22 * qJD(1);
t23 = t104 * t239 - t229 * t238;
t213 = t23 * qJD(1);
t134 = -t156 * t230 + t157 * t158;
t162 = t134 * t244 - t239 * t135 / 0.2e1;
t33 = t231 + t162;
t211 = t33 * qJD(1);
t161 = t239 * t156 / 0.2e1 + t157 * t240;
t36 = (t133 / 0.2e1 + t161) * pkin(4);
t210 = t36 * qJD(1);
t42 = -t107 * t133 + t108 * t131;
t209 = t42 * qJD(1);
t45 = -t219 + 0.2e1 * t118;
t208 = t45 * qJD(1);
t114 = -t218 / 0.2e1;
t166 = 0.2e1 * t114;
t47 = 0.2e1 * t116 + t166;
t207 = t47 * qJD(1);
t53 = -t234 - t235;
t206 = t53 * qJD(1);
t59 = t218 + 0.2e1 * t117;
t204 = t59 * qJD(1);
t80 = -t234 + t235;
t203 = t80 * qJD(1);
t160 = -t131 * t230 / 0.2e1 - t133 * t158 / 0.2e1;
t86 = t231 + t160;
t202 = t86 * qJD(1);
t91 = t114 + t218 / 0.2e1;
t201 = t91 * qJD(1);
t200 = t237 * qJD(1);
t199 = t238 * qJD(4);
t198 = t239 * qJD(5);
t92 = t117 + t116;
t152 = t154 ^ 2;
t145 = t155 ^ 2 + t152;
t196 = qJD(1) * t104;
t195 = t239 * qJD(4);
t193 = t131 * qJD(1);
t192 = t131 * qJD(4);
t191 = t133 * qJD(1);
t129 = t133 * qJD(4);
t140 = t145 * qJ(2);
t190 = t140 * qJD(1);
t189 = t145 * qJD(1);
t188 = t152 * qJD(1);
t187 = t154 * qJD(1);
t186 = t154 * qJD(3);
t182 = t239 * t196;
t181 = t239 * t187;
t178 = t238 * t196;
t177 = t104 * t187;
t176 = t128 * t187;
t175 = t131 * t191;
t174 = t131 * t129;
t173 = t238 * t187;
t172 = t131 * t187;
t171 = t133 * t187;
t170 = t155 * t187;
t168 = pkin(4) * t249;
t167 = qJD(1) * t128 - qJD(2);
t7 = t104 * t229;
t165 = t7 * qJD(1);
t164 = t13 * qJD(3);
t142 = t145 * qJD(2);
t136 = t140 * qJD(2);
t106 = t249 * t134;
t105 = t249 * t135;
t85 = t231 - t160;
t60 = 0.2e1 * t232 + t219;
t58 = -t125 + t166;
t48 = t91 + t92;
t37 = -t229 / 0.2e1 + t161 * pkin(4);
t32 = t231 - t162;
t18 = -t224 + 0.2e1 * t180;
t8 = t13 * qJD(4);
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t142, t136, 0, 0, 0, 0, 0, 0, t155 * t186, t142, t152 * qJD(3), -t139 * t186 + t136, -t174, t80 * qJD(4), 0, t174, 0, 0, t128 * t129 + t131 * t186, -t128 * t192 + t133 * t186, t53 * qJD(2), t42 * qJD(2) + t128 * t186, (-t195 - t198) * t238, t249 * t247, 0, (t194 + t199) * t239, 0, 0, -t22 * qJD(4) + t104 * t194 + t186 * t239, -t23 * qJD(4) - t104 * t198 + t186 * t238, t20 * qJD(2), t10 * qJD(2) + t7 * qJD(4) + t104 * t186; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t189, t190, 0, 0, 0, 0, 0, 0, 0, t189, 0, t190, 0, 0, 0, 0, 0, 0, 0, 0, t206, t85 * qJD(3) + t209, 0, 0, 0, 0, 0, 0, t242, t48 * qJD(4) + t92 * qJD(5), t216, t32 * qJD(3) + t37 * qJD(4) + t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t170, 0, t188, -t139 * t187, 0, 0, 0, 0, 0, 0, t172, t171, 0, t85 * qJD(2) + t176, 0, 0, 0, 0, 0, 0, t181, t173, t8, t32 * qJD(2) + t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t175, t203, -t192, t175, -t129, 0, -t108 * qJD(4) + t128 * t191, t107 * qJD(4) - t128 * t193, 0, 0, -t243, t248, t58 * qJD(5) - t195, t243, t60 * qJD(5) - t199, 0, qJD(2) * t237 + t38 * qJD(4) + t18 * qJD(5) - t214, t48 * qJD(2) - t213 - t246, (-t156 * t238 + t157 * t239) * t226 + t164, t37 * qJD(2) + (t156 * t40 + t157 * t38) * t226 + t165; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t243, t248, t58 * qJD(4) - t198, t243, t60 * qJD(4) - t194, 0, t18 * qJD(4) + qJD(5) * t38 + t178, t92 * qJD(2) - t182 - t246, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t189, -t190, 0, 0, 0, 0, 0, 0, 0, -t189, 0, -t190 - t186, 0, 0, 0, 0, 0, 0, -t129, t192, -t206, t86 * qJD(3) - t209, 0, 0, 0, 0, 0, 0, -t45 * qJD(4) - t194, -t47 * qJD(4) + t59 * qJD(5), -t216, t33 * qJD(3) - t36 * qJD(4) - t222; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t187, 0, 0, 0, 0, 0, 0, 0, 0, 0, t202, 0, 0, 0, 0, 0, 0, 0, 0, 0, t211; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t191, t193, 0, 0, 0, 0, 0, 0, 0, 0, -t208, -t207, 0, -t210; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t236, t204, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t170, 0, -t188, (qJD(1) * t139 + qJD(2)) * t154, 0, 0, 0, 0, 0, 0, -t172, -t171, 0, -t86 * qJD(2) - t176, 0, 0, 0, 0, 0, 0, -t181, -t173, t8, -t33 * qJD(2) - t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t187, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t202, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t211; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t230 * qJD(4), -t158 * qJD(4), 0, 0, 0, 0, 0, 0, 0, 0, -t105, -t106, t221, (t134 * t156 - t135 * t157) * t226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t105, -t106, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t175, -t203, 0, -t175, 0, 0, -t167 * t133, t167 * t131, 0, 0, t243, -t248, t91 * qJD(5), -t243, t237 * qJD(5), 0, t45 * qJD(2) - t15 * qJD(5) + t214, t47 * qJD(2) + t213, -t164, t36 * qJD(2) - t165; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t191, -t193, 0, 0, 0, 0, 0, 0, 0, 0, t208, t207, 0, t210; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t221, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t156 * t227, -t157 * t227, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t201, 0, t200, 0, -t156 * t168 - t220, -t157 * t168, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t243, -t248, -t91 * qJD(4), -t243, -t242, 0, qJD(2) * t238 + t15 * qJD(4) - t178, -t59 * qJD(2) + t182, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t236, -t204, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t201, 0, -t200, 0, t156 * t226 + t220, t157 * t226, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t1;
