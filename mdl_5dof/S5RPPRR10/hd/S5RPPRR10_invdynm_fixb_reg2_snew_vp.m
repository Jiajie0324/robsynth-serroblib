% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPPRR10
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:04
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPPRR10_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR10_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR10_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR10_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR10_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRR10_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:04:32
% EndTime: 2019-12-31 18:04:42
% DurationCPUTime: 10.00s
% Computational Cost: add. (43261->587), mult. (106360->728), div. (0->0), fcn. (74364->8), ass. (0->368)
t1022 = 2 * qJD(2);
t910 = qJD(1) ^ 2;
t901 = sin(pkin(8));
t911 = t901 ^ 2;
t902 = cos(pkin(8));
t913 = t902 ^ 2;
t1012 = t910 * (t911 + t913);
t860 = t901 * t1012;
t905 = sin(qJ(1));
t908 = cos(qJ(1));
t964 = t908 * qJDD(1);
t926 = -t905 * t860 + t901 * t964;
t1021 = pkin(5) * t926;
t895 = t913 * t910;
t972 = t911 * t910;
t869 = t895 + t972;
t904 = sin(qJ(4));
t907 = cos(qJ(4));
t936 = t901 * t904 + t902 * t907;
t856 = t936 * qJD(1);
t969 = qJD(1) * t901;
t857 = -t904 * t902 * qJD(1) + t907 * t969;
t830 = t857 * t856;
t1013 = qJDD(4) - t830;
t1020 = t1013 * t904;
t1019 = t1013 * t907;
t903 = sin(qJ(5));
t906 = cos(qJ(5));
t813 = t906 * t856 + t903 * t857;
t815 = -t903 * t856 + t906 * t857;
t763 = t815 * t813;
t899 = qJDD(4) + qJDD(5);
t1016 = -t763 + t899;
t1018 = t1016 * t903;
t1017 = t1016 * t906;
t876 = t908 * g(1) + t905 * g(2);
t859 = -t910 * pkin(1) + qJDD(1) * qJ(2) - t876;
t1001 = pkin(2) * t902;
t991 = qJ(3) * t901;
t943 = -t991 - t1001;
t864 = t943 * qJD(1);
t935 = t859 + (t1022 + t864) * qJD(1);
t919 = -pkin(6) * qJDD(1) + t935;
t995 = t902 * g(3);
t953 = qJDD(3) + t995;
t985 = t902 * t910;
t778 = (-pkin(3) * t985 + t919) * t901 + t953;
t896 = t901 * g(3);
t789 = -pkin(3) * t895 + t902 * t919 - t896;
t734 = -t907 * t778 + t904 * t789;
t735 = t904 * t778 + t907 * t789;
t688 = -t907 * t734 + t904 * t735;
t849 = t856 * qJD(4);
t892 = t901 * qJDD(1);
t894 = t902 * qJDD(1);
t855 = t907 * t892 - t904 * t894;
t827 = -t849 + t855;
t1014 = t936 * qJDD(1);
t968 = t857 * qJD(4);
t916 = t1014 + t968;
t749 = -t813 * qJD(5) + t906 * t827 - t903 * t916;
t900 = qJD(4) + qJD(5);
t806 = t900 * t813;
t1015 = -t806 + t749;
t948 = qJD(1) * t1022 + t859;
t950 = t903 * t827 + t906 * t916;
t713 = (qJD(5) - t900) * t815 + t950;
t1002 = pkin(2) + pkin(3);
t693 = (-t827 - t849) * pkin(7) + t1013 * pkin(4) - t734;
t1003 = t856 ^ 2;
t842 = qJD(4) * pkin(4) - t857 * pkin(7);
t696 = -t1003 * pkin(4) - pkin(7) * t916 - qJD(4) * t842 + t735;
t659 = -t906 * t693 + t903 * t696;
t660 = t903 * t693 + t906 * t696;
t630 = t903 * t659 + t906 * t660;
t629 = -t906 * t659 + t903 * t660;
t975 = t907 * t629;
t609 = t904 * t630 + t975;
t982 = t904 * t629;
t610 = t907 * t630 - t982;
t628 = pkin(4) * t629;
t1011 = qJ(3) * t610 - t1002 * t609 - t628;
t717 = t806 + t749;
t675 = -t713 * t903 - t906 * t717;
t677 = -t713 * t906 + t903 * t717;
t638 = t907 * t675 + t904 * t677;
t640 = -t904 * t675 + t907 * t677;
t673 = pkin(4) * t675;
t1010 = qJ(3) * t640 - t1002 * t638 - t673;
t811 = t813 ^ 2;
t898 = t900 ^ 2;
t758 = -t898 - t811;
t703 = t903 * t758 + t1017;
t704 = t906 * t758 - t1018;
t666 = t907 * t703 + t904 * t704;
t667 = -t904 * t703 + t907 * t704;
t945 = -pkin(4) * t703 + t659;
t1009 = qJ(3) * t667 - t1002 * t666 + t945;
t812 = t815 ^ 2;
t800 = -t812 - t898;
t760 = t763 + t899;
t983 = t903 * t760;
t726 = t906 * t800 - t983;
t976 = t906 * t760;
t727 = -t903 * t800 - t976;
t682 = t907 * t726 + t904 * t727;
t683 = -t904 * t726 + t907 * t727;
t958 = -pkin(4) * t726 + t660;
t1008 = qJ(3) * t683 - t1002 * t682 + t958;
t689 = t904 * t734 + t907 * t735;
t1007 = qJ(3) * t689 - t1002 * t688;
t909 = qJD(4) ^ 2;
t821 = -t909 - t1003;
t764 = t904 * t821 + t1019;
t765 = t907 * t821 - t1020;
t1006 = qJ(3) * t765 - t1002 * t764 + t734;
t766 = -t1014 * t904 - t907 * t855;
t768 = -t1014 * t907 + t904 * t855;
t1005 = qJ(3) * t768 - t1002 * t766;
t853 = t857 ^ 2;
t845 = -t853 - t909;
t823 = qJDD(4) + t830;
t979 = t904 * t823;
t784 = t907 * t845 - t979;
t974 = t907 * t823;
t787 = -t904 * t845 - t974;
t1004 = qJ(3) * t787 - t1002 * t784 + t735;
t891 = t911 * qJDD(1);
t893 = t913 * qJDD(1);
t867 = t893 + t891;
t1000 = pkin(5) * (t905 * t867 + t908 * t869);
t861 = t902 * t1012;
t956 = t902 * t964;
t837 = -t905 * t861 + t956;
t999 = pkin(5) * t837;
t965 = t905 * qJDD(1);
t838 = t908 * t860 + t901 * t965;
t998 = pkin(5) * t838;
t997 = pkin(6) * t688;
t996 = pkin(6) * t689;
t994 = qJ(2) * t860;
t990 = qJDD(1) * pkin(1);
t989 = t900 * t815;
t988 = t900 * t903;
t987 = t900 * t906;
t875 = t905 * g(1) - t908 * g(2);
t924 = t910 * qJ(2) - qJDD(2) + t875;
t851 = t924 + t990;
t986 = t902 * t851;
t915 = 0.2e1 * qJD(3) * t969 + t924;
t955 = pkin(1) + t991;
t795 = (t1002 * t902 + t955) * qJDD(1) + t915 - t869 * pkin(6);
t724 = pkin(4) * t916 - t1003 * pkin(7) + t857 * t842 + t795;
t984 = t903 * t724;
t980 = t904 * t795;
t978 = t905 * t851;
t977 = t906 * t724;
t794 = t907 * t795;
t973 = t908 * t851;
t971 = pkin(1) * t869 + qJ(2) * t867;
t970 = pkin(1) * t894 - qJ(2) * t861;
t963 = pkin(2) * t892;
t880 = t901 * t985;
t962 = t905 * t763;
t961 = t905 * t830;
t960 = t908 * t763;
t959 = t908 * t830;
t957 = pkin(1) + t1001;
t954 = -pkin(6) * t784 + t794;
t831 = t901 * t948 + t995;
t832 = t902 * t948 - t896;
t774 = t901 * t831 + t902 * t832;
t949 = -t905 * t875 - t908 * t876;
t873 = -t905 * t910 + t964;
t947 = -pkin(5) * t873 - t905 * g(3);
t797 = t901 * t935 + t953;
t799 = t902 * t935 - t896;
t944 = -pkin(2) * t797 + qJ(3) * t799;
t942 = -pkin(6) * t764 + t980;
t941 = -pkin(6) * t765 + t794;
t940 = -pkin(6) * t787 - t980;
t773 = t902 * t831 - t901 * t832;
t868 = t893 - t891;
t870 = -t895 + t972;
t939 = t908 * t868 + t905 * t870;
t938 = t905 * t868 - t908 * t870;
t937 = t908 * t875 - t905 * t876;
t872 = t908 * t910 + t965;
t934 = pkin(1) - t943;
t747 = -t811 - t812;
t614 = -pkin(4) * t747 + pkin(7) * t677 + t630;
t623 = -pkin(7) * t675 - t629;
t932 = -pkin(6) * t638 - t904 * t614 + t907 * t623;
t712 = (qJD(5) + t900) * t815 + t950;
t654 = -pkin(4) * t712 + pkin(7) * t704 - t977;
t679 = -pkin(7) * t703 + t984;
t931 = -pkin(6) * t666 - t904 * t654 + t907 * t679;
t657 = -pkin(4) * t1015 + pkin(7) * t727 + t984;
t681 = -pkin(7) * t726 + t977;
t930 = -pkin(6) * t682 - t904 * t657 + t907 * t681;
t929 = -pkin(6) * t766 - t688;
t928 = -pkin(6) * t768 - t689;
t925 = t908 * t861 + t902 * t965;
t922 = -pkin(6) * t640 - t907 * t614 - t904 * t623;
t921 = -pkin(6) * t667 - t907 * t654 - t904 * t679;
t920 = -pkin(6) * t683 - t907 * t657 - t904 * t681;
t626 = -pkin(4) * t724 + pkin(7) * t630;
t918 = -pkin(6) * t609 - pkin(7) * t975 - t904 * t626;
t917 = -pkin(6) * t610 + pkin(7) * t982 - t907 * t626;
t886 = qJ(3) * t894;
t879 = t901 * t894;
t878 = -0.2e1 * t879;
t877 = 0.2e1 * t879;
t862 = -t886 + t963;
t852 = -pkin(5) * t872 + t908 * g(3);
t844 = -t853 + t909;
t843 = -t909 + t1003;
t841 = -t905 * t880 + t901 * t956;
t840 = t872 * t902 * t901;
t835 = pkin(5) * t925;
t833 = pkin(5) * (t908 * t867 - t905 * t869);
t829 = t853 - t1003;
t826 = -0.2e1 * t849 + t855;
t825 = t1014 + 0.2e1 * t968;
t819 = qJDD(1) * t934 + t915;
t818 = (t955 + 0.2e1 * t1001) * qJDD(1) + t915;
t817 = (t957 + 0.2e1 * t991) * qJDD(1) + t915;
t810 = (-t907 * t856 + t904 * t857) * qJD(4);
t809 = (-t904 * t856 - t907 * t857) * qJD(4);
t808 = t970 + t986;
t807 = t994 + (-t851 - t990) * t901;
t804 = -t812 + t898;
t803 = t811 - t898;
t802 = -pkin(2) * t891 + t902 * t817;
t801 = qJ(3) * t893 - t901 * t818;
t798 = -t853 - t1003;
t793 = t907 * t827 - t904 * t968;
t792 = t904 * t827 + t907 * t968;
t791 = t907 * t849 + t904 * t916;
t790 = -t904 * t849 + t907 * t916;
t788 = pkin(2) * t869 + t799;
t786 = -t904 * t844 + t1019;
t785 = t907 * t843 - t979;
t783 = t907 * t844 + t1020;
t782 = t904 * t843 + t974;
t781 = qJ(3) * t869 + t797;
t780 = pkin(2) * t972 - qJ(3) * t880 + t799;
t777 = -qJ(3) * t895 - t953 + (pkin(2) * t985 - qJD(1) * t864 - t948) * t901;
t771 = -t994 + (t957 * qJDD(1) + t817) * t901;
t770 = (qJ(3) * t892 + t818) * t902 + t970;
t769 = -t907 * t825 - t904 * t826;
t767 = -t904 * t825 + t907 * t826;
t762 = t812 - t811;
t757 = pkin(1) * t851 + qJ(2) * t774;
t756 = t901 * t809 + t902 * t810;
t755 = -t902 * t809 + t901 * t810;
t754 = (-t813 * t906 + t815 * t903) * t900;
t753 = (-t813 * t903 - t815 * t906) * t900;
t752 = t774 + t971;
t751 = t901 * t797 + t902 * t799;
t750 = -t902 * t797 + t901 * t799;
t748 = -t815 * qJD(5) - t950;
t746 = t901 * t792 + t902 * t793;
t745 = -t901 * t790 + t902 * t791;
t744 = -t902 * t792 + t901 * t793;
t743 = t902 * t790 + t901 * t791;
t742 = t901 * t784 + t902 * t787;
t741 = t901 * t783 + t902 * t786;
t740 = t901 * t782 + t902 * t785;
t739 = -t902 * t784 + t901 * t787;
t738 = -t902 * t783 + t901 * t786;
t737 = -t902 * t782 + t901 * t785;
t736 = t902 * t781 - t901 * t788;
t733 = t906 * t803 - t983;
t732 = -t903 * t804 + t1017;
t731 = t903 * t803 + t976;
t730 = t906 * t804 + t1018;
t723 = t901 * t781 + t902 * t788 + t971;
t722 = qJ(3) * t826 + t954;
t721 = t901 * t767 + t902 * t769;
t720 = t901 * t766 + t902 * t768;
t719 = -t902 * t767 + t901 * t769;
t718 = -t902 * t766 + t901 * t768;
t711 = t901 * t764 + t902 * t765;
t710 = -t902 * t764 + t901 * t765;
t709 = t906 * t749 - t815 * t988;
t708 = t903 * t749 + t815 * t987;
t707 = -t903 * t748 + t813 * t987;
t706 = t906 * t748 + t813 * t988;
t705 = qJ(3) * t825 + t942;
t701 = -qJ(2) * t750 + (-pkin(2) * t901 + qJ(3) * t902) * t819;
t700 = -t904 * t753 + t907 * t754;
t699 = t907 * t753 + t904 * t754;
t698 = t1002 * t826 + t940;
t697 = t1002 * t825 + t941;
t695 = -pkin(1) * t750 - t944;
t690 = qJ(2) * t751 + t819 * t934;
t687 = -t904 * t731 + t907 * t733;
t686 = -t904 * t730 + t907 * t732;
t685 = t907 * t731 + t904 * t733;
t684 = t907 * t730 + t904 * t732;
t676 = -t1015 * t903 - t906 * t712;
t674 = t1015 * t906 - t903 * t712;
t672 = qJ(3) * t795 - t997;
t671 = -t904 * t708 + t907 * t709;
t670 = -t904 * t706 + t907 * t707;
t669 = t907 * t708 + t904 * t709;
t668 = t907 * t706 + t904 * t707;
t665 = t1002 * t795 - t996;
t664 = t901 * t699 + t902 * t700;
t663 = -t902 * t699 + t901 * t700;
t662 = -pkin(1) * t718 - t1005;
t661 = qJ(3) * t798 + t929;
t656 = t1002 * t798 + t928;
t655 = -pkin(1) * t739 - t1004;
t653 = -qJ(2) * t739 - t901 * t698 + t902 * t722;
t652 = pkin(1) * t826 + qJ(2) * t742 + t902 * t698 + t901 * t722;
t651 = -pkin(1) * t710 - t1006;
t650 = t901 * t688 + t902 * t689;
t649 = -t902 * t688 + t901 * t689;
t648 = -qJ(2) * t710 - t901 * t697 + t902 * t705;
t647 = t901 * t685 + t902 * t687;
t646 = t901 * t684 + t902 * t686;
t645 = -t902 * t685 + t901 * t687;
t644 = -t902 * t684 + t901 * t686;
t643 = t901 * t682 + t902 * t683;
t642 = -t902 * t682 + t901 * t683;
t641 = pkin(1) * t825 + qJ(2) * t711 + t902 * t697 + t901 * t705;
t639 = -t904 * t674 + t907 * t676;
t637 = t907 * t674 + t904 * t676;
t636 = t901 * t669 + t902 * t671;
t635 = t901 * t668 + t902 * t670;
t634 = -t902 * t669 + t901 * t671;
t633 = -t902 * t668 + t901 * t670;
t632 = t901 * t666 + t902 * t667;
t631 = -t902 * t666 + t901 * t667;
t627 = -qJ(2) * t718 - t901 * t656 + t902 * t661;
t625 = pkin(1) * t798 + qJ(2) * t720 + t902 * t656 + t901 * t661;
t624 = qJ(3) * t1015 + t930;
t621 = -qJ(2) * t649 - t901 * t665 + t902 * t672;
t620 = pkin(1) * t795 + qJ(2) * t650 + t902 * t665 + t901 * t672;
t619 = t901 * t638 + t902 * t640;
t618 = t901 * t637 + t902 * t639;
t617 = -t902 * t638 + t901 * t640;
t616 = -t902 * t637 + t901 * t639;
t615 = qJ(3) * t712 + t931;
t613 = t1002 * t1015 + t920;
t612 = -pkin(1) * t649 - t1007;
t611 = t1002 * t712 + t921;
t608 = -pkin(1) * t642 - t1008;
t607 = -pkin(1) * t631 - t1009;
t606 = -qJ(2) * t642 - t901 * t613 + t902 * t624;
t605 = pkin(1) * t1015 + qJ(2) * t643 + t902 * t613 + t901 * t624;
t604 = qJ(3) * t747 + t932;
t603 = t1002 * t747 + t922;
t602 = -qJ(2) * t631 - t901 * t611 + t902 * t615;
t601 = t901 * t609 + t902 * t610;
t600 = -t902 * t609 + t901 * t610;
t599 = -pkin(1) * t617 - t1010;
t598 = pkin(1) * t712 + qJ(2) * t632 + t902 * t611 + t901 * t615;
t597 = qJ(3) * t724 + t918;
t596 = t1002 * t724 + t917;
t595 = -qJ(2) * t617 - t901 * t603 + t902 * t604;
t594 = pkin(1) * t747 + qJ(2) * t619 + t902 * t603 + t901 * t604;
t593 = -pkin(1) * t600 - t1011;
t592 = -qJ(2) * t600 - t901 * t596 + t902 * t597;
t591 = pkin(1) * t724 + qJ(2) * t601 + t902 * t596 + t901 * t597;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t873, 0, -t872, 0, t947, -t852, -t937, -pkin(5) * t937, t841, t939, t838, -t841, t925, 0, -t905 * t831 - t901 * t973 - t999, -t905 * t832 - t902 * t973 + t1021, t908 * t773 - t1000, -pkin(5) * (t905 * t774 + t973) - (t905 * pkin(1) - t908 * qJ(2)) * t773, t841, t838, -t939, 0, -t925, -t841, t905 * t777 + t908 * t801 - t999, t908 * t736 - t905 * t862 - t1000, t905 * t780 + t908 * t802 - t1021, t908 * t701 - t905 * t695 - pkin(5) * (t905 * t751 + t908 * t819), t908 * t746 - t961, t908 * t721 - t905 * t829, t908 * t741 - t905 * t855, t908 * t745 + t961, t1014 * t905 + t908 * t740, -t905 * qJDD(4) + t908 * t756, t908 * t648 - t905 * t651 - pkin(5) * (t905 * t711 + t908 * t825), t908 * t653 - t905 * t655 - pkin(5) * (t905 * t742 + t908 * t826), t908 * t627 - t905 * t662 - pkin(5) * (t905 * t720 + t908 * t798), t908 * t621 - t905 * t612 - pkin(5) * (t905 * t650 + t908 * t795), t908 * t636 - t962, t908 * t618 - t905 * t762, t908 * t646 - t905 * t717, t908 * t635 + t962, t908 * t647 + t905 * t713, t908 * t664 - t905 * t899, t908 * t602 - t905 * t607 - pkin(5) * (t905 * t632 + t908 * t712), t908 * t606 - t905 * t608 - pkin(5) * (t1015 * t908 + t905 * t643), t908 * t595 - t905 * t599 - pkin(5) * (t905 * t619 + t908 * t747), t908 * t592 - t905 * t593 - pkin(5) * (t905 * t601 + t908 * t724); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t872, 0, t873, 0, t852, t947, t949, pkin(5) * t949, t840, t938, -t926, -t840, -t837, 0, t908 * t831 - t901 * t978 - t835, t908 * t832 - t902 * t978 + t998, t905 * t773 + t833, pkin(5) * (t908 * t774 - t978) - (-t908 * pkin(1) - t905 * qJ(2)) * t773, t840, -t926, -t938, 0, t837, -t840, -t908 * t777 + t905 * t801 - t835, t905 * t736 + t908 * t862 + t833, -t908 * t780 + t905 * t802 - t998, t905 * t701 + t908 * t695 + pkin(5) * (t908 * t751 - t905 * t819), t905 * t746 + t959, t905 * t721 + t908 * t829, t905 * t741 + t908 * t855, t905 * t745 - t959, -t1014 * t908 + t905 * t740, t908 * qJDD(4) + t905 * t756, t905 * t648 + t908 * t651 + pkin(5) * (t908 * t711 - t905 * t825), t905 * t653 + t908 * t655 + pkin(5) * (t908 * t742 - t905 * t826), t905 * t627 + t908 * t662 + pkin(5) * (t908 * t720 - t905 * t798), t905 * t621 + t908 * t612 + pkin(5) * (t908 * t650 - t905 * t795), t905 * t636 + t960, t905 * t618 + t908 * t762, t905 * t646 + t908 * t717, t905 * t635 - t960, t905 * t647 - t908 * t713, t905 * t664 + t908 * t899, t905 * t602 + t908 * t607 + pkin(5) * (t908 * t632 - t905 * t712), t905 * t606 + t908 * t608 + pkin(5) * (-t1015 * t905 + t908 * t643), t905 * t595 + t908 * t599 + pkin(5) * (t908 * t619 - t905 * t747), t905 * t592 + t908 * t593 + pkin(5) * (t908 * t601 - t905 * t724); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t875, t876, 0, 0, t891, t877, 0, t893, 0, 0, t808, t807, t752, t757, t891, 0, t878, 0, 0, t893, t770, t723, t771, t690, t744, t719, t738, t743, t737, t755, t641, t652, t625, t620, t634, t616, t644, t633, t645, t663, t598, t605, t594, t591; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t910, 0, 0, -g(3), -t875, 0, t879, t868, t860, -t879, t861, 0, -t901 * t851, -t986, t773, qJ(2) * t773, t879, t860, -t868, 0, -t861, -t879, t801, t736, t802, t701, t746, t721, t741, t745, t740, t756, t648, t653, t627, t621, t636, t618, t646, t635, t647, t664, t602, t606, t595, t592; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t910, 0, qJDD(1), 0, g(3), 0, -t876, 0, t880, -t870, -t892, -t880, -t894, 0, t831, t832, 0, pkin(1) * t773, t880, -t892, t870, 0, t894, -t880, -t777, t862, -t780, t695, t830, t829, t855, -t830, -t1014, qJDD(4), t651, t655, t662, t612, t763, t762, t717, -t763, -t713, t899, t607, t608, t599, t593; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t875, t876, 0, 0, t891, t877, 0, t893, 0, 0, t808, t807, t752, t757, t891, 0, t878, 0, 0, t893, t770, t723, t771, t690, t744, t719, t738, t743, t737, t755, t641, t652, t625, t620, t634, t616, t644, t633, t645, t663, t598, t605, t594, t591; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t892, t894, t880, 0, t895, 0, 0, -t851, t831, 0, t892, t880, -t894, 0, -t895, 0, t886, t781, t817, qJ(3) * t819, t793, t769, t786, t791, t785, t810, t705, t722, t661, t672, t671, t639, t686, t670, t687, t700, t615, t624, t604, t597; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t892, -t972, t894, -t880, 0, t851, 0, t832, 0, 0, -t972, -t892, 0, t880, t894, t818, t788, t963, pkin(2) * t819, -t792, -t767, -t783, t790, -t782, -t809, t697, t698, t656, t665, -t669, -t637, -t684, -t668, -t685, -t699, t611, t613, t603, t596; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t880, t870, t892, t880, t894, 0, -t831, -t832, 0, 0, -t880, t892, -t870, 0, -t894, t880, t777, -t862, t780, t944, -t830, -t829, -t855, t830, t1014, -qJDD(4), t1006, t1004, t1005, t1007, -t763, -t762, -t717, t763, t713, -t899, t1009, t1008, t1010, t1011; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t892, t880, -t894, 0, -t895, 0, 0, t797, t819, 0, t793, t769, t786, t791, t785, t810, t942, t954, t929, -t997, t671, t639, t686, t670, t687, t700, t931, t930, t932, t918; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t880, t892, -t870, 0, -t894, t880, -t797, 0, t799, 0, -t830, -t829, -t855, t830, t1014, -qJDD(4), -pkin(3) * t764 + t734, -pkin(3) * t784 + t735, -pkin(3) * t766, -pkin(3) * t688, -t763, -t762, -t717, t763, t713, -t899, -pkin(3) * t666 + t945, -pkin(3) * t682 + t958, -pkin(3) * t638 - t673, -pkin(3) * t609 - t628; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t972, t892, 0, -t880, -t894, -t819, -t799, 0, 0, t792, t767, t783, -t790, t782, t809, -pkin(3) * t825 - t941, -pkin(3) * t826 - t940, -pkin(3) * t798 - t928, -pkin(3) * t795 + t996, t669, t637, t684, t668, t685, t699, -pkin(3) * t712 - t921, -pkin(3) * t1015 - t920, -pkin(3) * t747 - t922, -pkin(3) * t724 - t917; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t827, -t825, t1013, t849, t843, -t849, 0, t795, t734, 0, t709, t676, t732, t707, t733, t754, t679, t681, t623, -pkin(7) * t629; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t968, t826, t844, -t916, t823, -t968, -t795, 0, t735, 0, t708, t674, t730, t706, t731, t753, t654, t657, t614, t626; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t830, t829, t855, -t830, -t1014, qJDD(4), -t734, -t735, 0, 0, t763, t762, t717, -t763, -t713, t899, -t945, -t958, t673, t628; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t749, -t712, t1016, t806, t803, -t806, 0, t724, t659, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t989, t1015, t804, t748, t760, -t989, -t724, 0, t660, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t763, t762, t717, -t763, -t713, t899, -t659, -t660, 0, 0;];
m_new_reg = t1;
