% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPPRR10
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:04
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPPRR10_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR10_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR10_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR10_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR10_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRR10_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:04:42
% EndTime: 2019-12-31 18:04:44
% DurationCPUTime: 2.11s
% Computational Cost: add. (7644->212), mult. (18855->246), div. (0->0), fcn. (13203->8), ass. (0->149)
t1160 = qJD(1) ^ 2;
t1151 = sin(pkin(8));
t1148 = t1151 ^ 2;
t1152 = cos(pkin(8));
t1149 = t1152 ^ 2;
t1177 = t1148 + t1149;
t1132 = t1177 * t1160;
t1150 = qJD(4) + qJD(5);
t1195 = qJD(5) + t1150;
t1154 = sin(qJ(4));
t1157 = cos(qJ(4));
t1167 = t1151 * t1154 + t1152 * t1157;
t1088 = t1167 * qJDD(1);
t1124 = t1167 * qJD(1);
t1186 = qJD(1) * t1152;
t1187 = qJD(1) * t1151;
t1126 = -t1154 * t1186 + t1157 * t1187;
t1153 = sin(qJ(5));
t1156 = cos(qJ(5));
t1094 = t1156 * t1124 + t1153 * t1126;
t1194 = t1094 ^ 2;
t1096 = -t1153 * t1124 + t1156 * t1126;
t1193 = t1096 ^ 2;
t1122 = t1124 ^ 2;
t1192 = t1126 ^ 2;
t1191 = t1150 ^ 2;
t1190 = 2 * qJD(2);
t1189 = t1152 * g(3);
t1188 = qJ(3) * t1151;
t1185 = t1096 * t1094;
t1184 = t1124 * qJD(4);
t1183 = t1126 * qJD(4);
t1182 = t1126 * t1124;
t1181 = t1148 * t1160;
t1180 = t1149 * t1160;
t1179 = t1152 * t1160;
t1178 = qJD(5) - t1150;
t1155 = sin(qJ(1));
t1158 = cos(qJ(1));
t1136 = -t1158 * g(1) - t1155 * g(2);
t1127 = -t1160 * pkin(1) + qJDD(1) * qJ(2) + t1136;
t1171 = -pkin(2) * t1152 - t1188;
t1130 = t1171 * qJD(1);
t1169 = t1127 + (t1190 + t1130) * qJD(1);
t1173 = qJDD(3) + t1189;
t1082 = (-pkin(3) * t1179 - pkin(6) * qJDD(1) + t1169) * t1151 + t1173;
t1108 = -t1151 * g(3) + t1152 * t1127 + t1186 * t1190;
t1091 = t1130 * t1186 + t1108;
t1146 = t1152 * qJDD(1);
t1086 = -pkin(3) * t1180 - pkin(6) * t1146 + t1091;
t1065 = t1154 * t1082 + t1157 * t1086;
t1145 = t1151 * qJDD(1);
t1176 = t1155 * qJDD(1);
t1175 = t1158 * qJDD(1);
t1174 = -qJDD(4) - qJDD(5);
t1135 = t1155 * g(1) - t1158 * g(2);
t1064 = t1157 * t1082 - t1154 * t1086;
t1104 = -t1088 - t1183;
t1170 = t1157 * t1145 - t1154 * t1146;
t1106 = t1170 - t1184;
t1172 = t1156 * t1104 - t1153 * t1106;
t1101 = qJDD(4) - t1182;
t1168 = -t1153 * t1104 - t1156 * t1106;
t1128 = t1151 * t1132;
t1166 = -t1155 * t1128 + t1151 * t1175;
t1165 = t1158 * t1128 + t1151 * t1176;
t1164 = t1160 * qJ(2) - qJDD(2) + t1135;
t1163 = 0.2e1 * qJD(3) * t1187 + t1164;
t1087 = (t1188 + pkin(1) + (pkin(2) + pkin(3)) * t1152) * qJDD(1) + t1163 + (-t1181 - t1180) * pkin(6);
t1159 = qJD(4) ^ 2;
t1137 = t1151 * t1179;
t1134 = -t1158 * t1160 - t1176;
t1133 = -t1155 * t1160 + t1175;
t1131 = t1177 * qJDD(1);
t1129 = t1152 * t1132;
t1121 = qJDD(1) * pkin(1) + t1164;
t1114 = -t1159 - t1192;
t1113 = qJD(4) * pkin(4) - t1126 * pkin(7);
t1112 = -t1158 * t1129 - t1152 * t1176;
t1111 = -t1155 * t1129 + t1152 * t1175;
t1110 = t1158 * t1131 - t1155 * t1132;
t1109 = t1155 * t1131 + t1158 * t1132;
t1107 = -0.2e1 * qJD(2) * t1187 - t1151 * t1127 - t1189;
t1105 = t1170 - 0.2e1 * t1184;
t1103 = 0.2e1 * t1183 + t1088;
t1102 = -qJDD(4) - t1182;
t1100 = -t1159 - t1122;
t1098 = (pkin(1) - t1171) * qJDD(1) + t1163;
t1092 = -t1191 - t1193;
t1090 = -t1122 - t1192;
t1089 = t1169 * t1151 + t1173;
t1085 = t1157 * t1102 - t1154 * t1114;
t1084 = t1154 * t1102 + t1157 * t1114;
t1079 = -t1151 * t1107 + t1152 * t1108;
t1078 = t1152 * t1107 + t1151 * t1108;
t1077 = -t1157 * t1088 + t1154 * t1170;
t1076 = -t1154 * t1088 - t1157 * t1170;
t1075 = t1157 * t1100 - t1154 * t1101;
t1074 = t1154 * t1100 + t1157 * t1101;
t1073 = t1174 - t1185;
t1072 = -t1174 - t1185;
t1071 = -t1191 - t1194;
t1070 = t1151 * t1089 + t1152 * t1091;
t1069 = -t1152 * t1089 + t1151 * t1091;
t1068 = -t1193 - t1194;
t1067 = t1151 * t1084 + t1152 * t1085;
t1066 = -t1152 * t1084 + t1151 * t1085;
t1063 = t1156 * t1073 - t1153 * t1092;
t1062 = t1153 * t1073 + t1156 * t1092;
t1061 = -t1104 * pkin(4) - t1122 * pkin(7) + t1126 * t1113 + t1087;
t1060 = t1151 * t1076 + t1152 * t1077;
t1059 = -t1152 * t1076 + t1151 * t1077;
t1058 = t1178 * t1094 + t1168;
t1057 = -t1195 * t1094 - t1168;
t1056 = -t1178 * t1096 + t1172;
t1055 = t1195 * t1096 - t1172;
t1054 = t1151 * t1074 + t1152 * t1075;
t1053 = -t1152 * t1074 + t1151 * t1075;
t1052 = t1156 * t1071 - t1153 * t1072;
t1051 = t1153 * t1071 + t1156 * t1072;
t1050 = -t1122 * pkin(4) + t1104 * pkin(7) - qJD(4) * t1113 + t1065;
t1049 = (-t1106 - t1184) * pkin(7) + t1101 * pkin(4) + t1064;
t1048 = -t1154 * t1064 + t1157 * t1065;
t1047 = t1157 * t1064 + t1154 * t1065;
t1046 = -t1154 * t1062 + t1157 * t1063;
t1045 = t1157 * t1062 + t1154 * t1063;
t1044 = t1156 * t1056 - t1153 * t1058;
t1043 = t1153 * t1056 + t1156 * t1058;
t1042 = -t1154 * t1051 + t1157 * t1052;
t1041 = t1157 * t1051 + t1154 * t1052;
t1040 = t1153 * t1049 + t1156 * t1050;
t1039 = t1156 * t1049 - t1153 * t1050;
t1038 = t1151 * t1047 + t1152 * t1048;
t1037 = -t1152 * t1047 + t1151 * t1048;
t1036 = t1151 * t1045 + t1152 * t1046;
t1035 = -t1152 * t1045 + t1151 * t1046;
t1034 = -t1154 * t1043 + t1157 * t1044;
t1033 = t1157 * t1043 + t1154 * t1044;
t1032 = t1151 * t1041 + t1152 * t1042;
t1031 = -t1152 * t1041 + t1151 * t1042;
t1030 = -t1153 * t1039 + t1156 * t1040;
t1029 = t1156 * t1039 + t1153 * t1040;
t1028 = t1151 * t1033 + t1152 * t1034;
t1027 = -t1152 * t1033 + t1151 * t1034;
t1026 = -t1154 * t1029 + t1157 * t1030;
t1025 = t1157 * t1029 + t1154 * t1030;
t1024 = t1151 * t1025 + t1152 * t1026;
t1023 = -t1152 * t1025 + t1151 * t1026;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1134, -t1133, 0, -t1155 * t1135 + t1158 * t1136, 0, 0, 0, 0, 0, 0, t1112, t1165, t1110, t1158 * t1079 - t1155 * t1121, 0, 0, 0, 0, 0, 0, t1112, t1110, -t1165, t1158 * t1070 - t1155 * t1098, 0, 0, 0, 0, 0, 0, t1158 * t1054 - t1155 * t1103, t1158 * t1067 - t1155 * t1105, t1158 * t1060 - t1155 * t1090, t1158 * t1038 - t1155 * t1087, 0, 0, 0, 0, 0, 0, t1158 * t1032 - t1155 * t1055, t1158 * t1036 - t1155 * t1057, t1158 * t1028 - t1155 * t1068, t1158 * t1024 - t1155 * t1061; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1133, t1134, 0, t1158 * t1135 + t1155 * t1136, 0, 0, 0, 0, 0, 0, t1111, -t1166, t1109, t1155 * t1079 + t1158 * t1121, 0, 0, 0, 0, 0, 0, t1111, t1109, t1166, t1155 * t1070 + t1158 * t1098, 0, 0, 0, 0, 0, 0, t1155 * t1054 + t1158 * t1103, t1155 * t1067 + t1158 * t1105, t1155 * t1060 + t1158 * t1090, t1155 * t1038 + t1158 * t1087, 0, 0, 0, 0, 0, 0, t1155 * t1032 + t1158 * t1055, t1155 * t1036 + t1158 * t1057, t1155 * t1028 + t1158 * t1068, t1155 * t1024 + t1158 * t1061; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1078, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1069, 0, 0, 0, 0, 0, 0, t1053, t1066, t1059, t1037, 0, 0, 0, 0, 0, 0, t1031, t1035, t1027, t1023; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1160, -qJDD(1), 0, t1136, 0, 0, 0, 0, 0, 0, -t1129, t1128, t1131, t1079, 0, 0, 0, 0, 0, 0, -t1129, t1131, -t1128, t1070, 0, 0, 0, 0, 0, 0, t1054, t1067, t1060, t1038, 0, 0, 0, 0, 0, 0, t1032, t1036, t1028, t1024; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1160, 0, t1135, 0, 0, 0, 0, 0, 0, t1146, -t1145, t1132, t1121, 0, 0, 0, 0, 0, 0, t1146, t1132, t1145, t1098, 0, 0, 0, 0, 0, 0, t1103, t1105, t1090, t1087, 0, 0, 0, 0, 0, 0, t1055, t1057, t1068, t1061; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1078, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1069, 0, 0, 0, 0, 0, 0, t1053, t1066, t1059, t1037, 0, 0, 0, 0, 0, 0, t1031, t1035, t1027, t1023; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1180, t1137, t1146, t1108, 0, 0, 0, 0, 0, 0, -t1180, t1146, -t1137, t1091, 0, 0, 0, 0, 0, 0, t1075, t1085, t1077, t1048, 0, 0, 0, 0, 0, 0, t1042, t1046, t1034, t1026; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1137, -t1181, -t1145, t1107, 0, 0, 0, 0, 0, 0, t1137, -t1145, t1181, -t1089, 0, 0, 0, 0, 0, 0, -t1074, -t1084, -t1076, -t1047, 0, 0, 0, 0, 0, 0, -t1041, -t1045, -t1033, -t1025; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1146, t1145, -t1132, -t1121, 0, 0, 0, 0, 0, 0, -t1146, -t1132, -t1145, -t1098, 0, 0, 0, 0, 0, 0, -t1103, -t1105, -t1090, -t1087, 0, 0, 0, 0, 0, 0, -t1055, -t1057, -t1068, -t1061; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1180, t1146, -t1137, t1091, 0, 0, 0, 0, 0, 0, t1075, t1085, t1077, t1048, 0, 0, 0, 0, 0, 0, t1042, t1046, t1034, t1026; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1146, -t1132, -t1145, -t1098, 0, 0, 0, 0, 0, 0, -t1103, -t1105, -t1090, -t1087, 0, 0, 0, 0, 0, 0, -t1055, -t1057, -t1068, -t1061; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1137, t1145, -t1181, t1089, 0, 0, 0, 0, 0, 0, t1074, t1084, t1076, t1047, 0, 0, 0, 0, 0, 0, t1041, t1045, t1033, t1025; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1100, t1102, -t1088, t1065, 0, 0, 0, 0, 0, 0, t1052, t1063, t1044, t1030; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1101, t1114, -t1170, t1064, 0, 0, 0, 0, 0, 0, t1051, t1062, t1043, t1029; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1103, t1105, t1090, t1087, 0, 0, 0, 0, 0, 0, t1055, t1057, t1068, t1061; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1071, t1073, t1056, t1040; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1072, t1092, t1058, t1039; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1055, t1057, t1068, t1061;];
f_new_reg = t1;
