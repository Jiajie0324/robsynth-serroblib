% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPPP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,alpha3,d1,d2,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:25
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPPP1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPPP1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPPP1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPPP1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPPP1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPPP1_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:24:46
% EndTime: 2019-12-31 19:25:07
% DurationCPUTime: 21.22s
% Computational Cost: add. (40588->567), mult. (104754->775), div. (0->0), fcn. (76213->8), ass. (0->444)
t820 = sin(pkin(8));
t822 = cos(pkin(8));
t824 = sin(qJ(2));
t826 = cos(qJ(2));
t821 = sin(pkin(5));
t899 = qJD(2) * t821;
t823 = cos(pkin(5));
t924 = t820 * t823;
t754 = t820 * t899 - (-t822 * t824 - t826 * t924) * qJD(1);
t956 = t754 ^ 2;
t901 = qJD(1) * t824;
t900 = qJD(1) * t826;
t967 = t823 * t900 + t899;
t752 = t820 * t901 - t822 * t967;
t957 = t752 ^ 2;
t693 = t957 - t956;
t894 = qJD(1) * qJD(2);
t878 = t826 * t894;
t892 = t824 * qJDD(1);
t791 = t878 + t892;
t814 = t826 * qJDD(1);
t879 = t824 * t894;
t792 = t814 - t879;
t893 = qJDD(2) * t821;
t913 = t822 * t823;
t727 = t820 * t791 - t792 * t913 - t822 * t893;
t784 = -t823 * qJD(2) + t821 * t900;
t737 = t754 * t784;
t661 = t727 - t737;
t1034 = t661 * t820;
t856 = t792 * t823 + t893;
t728 = t822 * t791 + t820 * t856;
t939 = t752 * t784;
t970 = t728 + t939;
t861 = t970 * t822 - t1034;
t1105 = t823 * t693 - t821 * t861;
t577 = t821 * t693 + t823 * t861;
t1031 = t822 * t661;
t599 = t820 * t970 + t1031;
t1134 = -t824 * t577 - t826 * t599;
t825 = sin(qJ(1));
t827 = cos(qJ(1));
t1132 = t827 * t1105 + t1134 * t825;
t1131 = -t825 * t1105 + t1134 * t827;
t1133 = t826 * t577 - t824 * t599;
t783 = t784 ^ 2;
t698 = -t956 - t783;
t875 = -t823 * qJDD(2) + t821 * t792;
t937 = t754 * t752;
t852 = t875 - t937;
t981 = t820 * t852;
t859 = t698 * t822 + t981;
t578 = t821 * t859 + t823 * t970;
t1130 = pkin(1) * t578;
t1093 = pkin(2) * t578;
t1003 = t821 * t970;
t1043 = -t698 * t913 - t852 * t924 + t1003;
t980 = t822 * t852;
t1018 = t820 * t698 - t980;
t1052 = t1018 * t826;
t1074 = -t1043 * t824 + t1052;
t1124 = t825 * t578;
t1098 = t1074 * t827 - t1124;
t1129 = pkin(6) * t1098;
t1122 = t827 * t578;
t1099 = t1074 * t825 + t1122;
t1128 = pkin(6) * t1099;
t1006 = t821 * t661;
t851 = t875 + t937;
t968 = -t783 - t957;
t1045 = -t851 * t913 + t924 * t968 - t1006;
t927 = t820 * t851;
t1025 = t822 * t968 + t927;
t1048 = t1025 * t826;
t1072 = -t1045 * t824 + t1048;
t916 = t822 * t851;
t857 = -t968 * t820 + t916;
t1042 = t823 * t661 - t821 * t857;
t1086 = t1042 * t825;
t1100 = t1072 * t827 + t1086;
t1127 = pkin(6) * t1100;
t1085 = t1042 * t827;
t1101 = t1072 * t825 - t1085;
t1126 = pkin(6) * t1101;
t965 = -t956 - t957;
t966 = -t939 + t728;
t971 = t727 + t737;
t1011 = t823 * t965 + (-t971 * t820 - t966 * t822) * t821;
t1026 = t820 * t966 - t822 * t971;
t1000 = t823 * t966;
t998 = t823 * t971;
t1062 = -t1000 * t822 - t820 * t998 - t821 * t965;
t1070 = t1026 * t826 - t1062 * t824;
t1102 = t1011 * t825 + t1070 * t827;
t1118 = pkin(6) * t1102;
t1103 = -t1011 * t827 + t1070 * t825;
t1117 = pkin(6) * t1103;
t1125 = t578 * t821;
t730 = -t956 + t783;
t860 = -t730 * t822 + t927;
t584 = -t821 * t860 + t1000;
t1123 = t825 * t584;
t1121 = t827 * t584;
t729 = t957 - t783;
t1017 = t729 * t820 - t980;
t1020 = t1017 * t821 - t998;
t1120 = t1020 * t825;
t1119 = t1020 * t827;
t1097 = pkin(1) * t1042;
t1095 = pkin(2) * t1042;
t1069 = t1026 * t824 + t1062 * t826;
t1091 = pkin(7) * t1069;
t1049 = t1025 * t824;
t1071 = t1045 * t826 + t1049;
t1116 = pkin(7) * t1071;
t1053 = t1018 * t824;
t1073 = t1043 * t826 + t1053;
t1115 = pkin(7) * t1073;
t626 = t820 * t730 + t916;
t1114 = t824 * t626;
t1112 = t826 * t626;
t1110 = t1042 * t821;
t1082 = -pkin(1) * t1069 - pkin(2) * t1062;
t1109 = -pkin(1) * t1071 - pkin(2) * t1045;
t1108 = -pkin(1) * t1073 - pkin(2) * t1043;
t1081 = -pkin(1) * t1011 + pkin(7) * t1070;
t1107 = pkin(7) * t1072 - t1097;
t1106 = pkin(7) * t1074 + t1130;
t629 = t822 * t729 + t981;
t1089 = t824 * t629;
t1087 = t826 * t629;
t1061 = qJ(3) * t1018;
t922 = t821 * t966;
t1023 = t730 * t913 - t851 * t924 - t922;
t1038 = -t1023 * t824 - t1112;
t1078 = t1038 * t825 - t1121;
t1077 = t1038 * t827 + t1123;
t923 = t821 * t971;
t1022 = -t729 * t924 + t852 * t913 - t923;
t1041 = -t1022 * t824 - t1087;
t1076 = t1041 * t825 + t1119;
t1075 = t1041 * t827 - t1120;
t1035 = (-t1011 * t821 - t1062 * t823) * qJ(3);
t1068 = (-t1045 * t823 - t1110) * qJ(3);
t1067 = (-t1043 * t823 + t1125) * qJ(3);
t1065 = pkin(2) * t1011;
t1060 = qJ(3) * t1025;
t1059 = qJ(3) * t1026;
t1040 = t1022 * t826 - t1089;
t1039 = t1023 * t826 - t1114;
t1010 = pkin(3) * t661;
t1007 = qJ(4) * t970;
t936 = t754 * t820;
t720 = t784 * t936;
t938 = t752 * t822;
t882 = t784 * t938;
t871 = -t720 + t882;
t888 = t784 * t924;
t712 = t752 * t888;
t886 = t784 * t913;
t713 = t754 * t886;
t972 = t821 * t875 + t712 + t713;
t997 = t824 * t972;
t987 = t826 * t871 - t997;
t925 = t820 * t821;
t889 = t784 * t925;
t710 = t752 * t889;
t921 = t821 * t822;
t887 = t784 * t921;
t711 = t754 * t887;
t973 = t823 * t875 - t710 - t711;
t994 = t827 * t973;
t1016 = t825 * t987 + t994;
t996 = t825 * t973;
t1015 = t827 * t987 - t996;
t1014 = (-t698 - t783) * pkin(3) - qJ(4) * t852;
t1009 = qJ(4) * t965;
t1008 = qJ(4) * t968;
t995 = t826 * t972;
t992 = (-t965 - t783) * pkin(3);
t934 = t754 * t823;
t881 = t752 * t934;
t884 = t728 * t925;
t841 = t711 - t881 - t884;
t903 = t822 * t728 + t720;
t641 = t826 * t903;
t706 = t728 * t924;
t935 = t754 * t821;
t885 = t752 * t935;
t855 = t706 - t713 - t885;
t959 = -t824 * t855 + t641;
t986 = t825 * t959 + t827 * t841;
t883 = t727 * t921;
t842 = t710 + t881 + t883;
t853 = t820 * t727 - t882;
t640 = t826 * t853;
t708 = t727 * t913;
t854 = -t708 - t712 + t885;
t960 = -t824 * t854 + t640;
t985 = t825 * t960 + t827 * t842;
t984 = t824 * t871 + t995;
t983 = -t825 * t841 + t827 * t959;
t982 = -t825 * t842 + t827 * t960;
t638 = t824 * t853;
t639 = t824 * t903;
t897 = qJD(4) * t754;
t741 = 0.2e1 * t897;
t896 = qJD(5) * t752;
t969 = -0.2e1 * t896 + t741;
t964 = t728 * pkin(4) + t851 * qJ(5);
t778 = t967 * qJ(3);
t803 = t827 * g(1) + t825 * g(2);
t829 = qJD(1) ^ 2;
t781 = -t829 * pkin(1) + qJDD(1) * pkin(7) - t803;
t949 = qJ(3) * t821;
t782 = (-pkin(2) * t826 - t824 * t949) * qJD(1);
t948 = qJ(3) * t823;
t952 = t826 * g(3);
t676 = -t791 * t948 + qJDD(2) * pkin(2) - t952 + qJD(2) * t778 + (-qJD(1) * t782 - t781) * t824;
t766 = -t824 * g(3) + t826 * t781;
t788 = qJD(2) * pkin(2) - t901 * t948;
t677 = qJ(3) * t856 - qJD(2) * t788 + t782 * t900 + t766;
t802 = t825 * g(1) - t827 * g(2);
t780 = qJDD(1) * pkin(1) + t829 * pkin(7) + t802;
t831 = -t791 * t949 - t792 * pkin(2) + (-t778 * t826 + t788 * t824) * qJD(1) - t780;
t830 = t821 * t831;
t551 = -0.2e1 * qJD(3) * t752 + t676 * t924 + t822 * t677 + t820 * t830;
t692 = t752 * pkin(3) - t754 * qJ(4);
t850 = -qJ(4) * t875 - 0.2e1 * qJD(4) * t784 - t752 * t692 + t551;
t953 = t783 * pkin(3);
t526 = t850 - t953;
t870 = -t676 * t913 + t820 * t677 - t822 * t830;
t843 = pkin(3) * t875 - t783 * qJ(4) + qJDD(4) + t870;
t898 = qJD(3) * t754;
t530 = -t754 * t692 - t843 - 0.2e1 * t898;
t479 = t822 * t526 - t820 * t530;
t740 = -0.2e1 * t897;
t605 = t821 * t676 - t823 * t831 - qJDD(3);
t838 = t1007 + t605 - t1010;
t543 = t740 - t838;
t954 = pkin(3) * t822;
t963 = t543 * (qJ(4) * t820 + t954) - qJ(3) * t479;
t962 = t826 * t854 + t638;
t961 = t826 * t855 + t639;
t955 = pkin(3) * t820;
t951 = pkin(3) + qJ(5);
t818 = t824 ^ 2;
t933 = t818 * t829;
t932 = t820 * t605;
t920 = t822 * t605;
t908 = t824 * t780;
t810 = t826 * t829 * t824;
t800 = qJDD(2) + t810;
t907 = t824 * t800;
t801 = qJDD(2) - t810;
t906 = t824 * t801;
t905 = t826 * t780;
t904 = t826 * t801;
t819 = t826 ^ 2;
t902 = t818 + t819;
t895 = qJD(5) * t784;
t891 = t825 * qJDD(1);
t890 = t827 * qJDD(1);
t765 = t824 * t781 + t952;
t703 = t824 * t765 + t826 * t766;
t758 = -t825 * t802 - t827 * t803;
t874 = t825 * t810;
t873 = t827 * t810;
t797 = -t825 * t829 + t890;
t872 = -pkin(6) * t797 - t825 * g(3);
t868 = t920 + t1060;
t867 = -t932 - t1061;
t835 = (0.2e1 * qJD(3) + t692) * t754 + t843;
t832 = t835 + t964;
t510 = (-pkin(4) * t752 + 0.2e1 * qJD(5)) * t784 + t832;
t718 = t754 * pkin(4) + t784 * qJ(5);
t837 = -t784 * t718 + qJDD(5) + t850;
t836 = -t727 * pkin(4) + t837;
t514 = -qJ(5) * t957 + t836 - t953;
t866 = -t510 * t822 + t514 * t820;
t865 = t526 * t820 + t530 * t822;
t550 = t870 + 0.2e1 * t898;
t864 = -t822 * t550 + t820 * t551;
t511 = t820 * t550 + t822 * t551;
t702 = t826 * t765 - t824 * t766;
t757 = t827 * t802 - t825 * t803;
t834 = pkin(4) * t957 + t754 * t718 + t838;
t833 = t727 * qJ(5) - t834;
t515 = t740 + t833 + 0.2e1 * t896;
t456 = pkin(4) * t514 - t951 * t515;
t472 = t820 * t510 + t822 * t514;
t473 = pkin(4) * t510 - qJ(4) * t515;
t849 = qJ(3) * t472 + t456 * t822 + t473 * t820;
t482 = (-t965 - t957) * qJ(5) + (-t971 - t727) * pkin(4) + t992 + t837;
t488 = -t1009 + 0.2e1 * t895 + (t966 - t939) * pkin(4) + t832;
t848 = t482 * t822 + t488 * t820 + t1059;
t485 = -t1010 + pkin(4) * t968 + (-t661 - t727) * qJ(5) + t834 + t969;
t607 = pkin(4) * t851 - qJ(4) * t661;
t847 = t485 * t822 + t607 * t820 + t1060;
t495 = pkin(4) * t698 + t1007 - t833 + t969;
t565 = -pkin(4) * t852 + t951 * t970;
t846 = t495 * t820 + t565 * t822 + t1061;
t516 = t992 + t850;
t517 = t835 - t1009;
t845 = t516 * t822 + t517 * t820 + t1059;
t844 = t511 + t1059;
t518 = t741 + t838 + t1007;
t840 = -t518 * t820 - t954 * t970 - t1061;
t519 = t543 + t1010;
t839 = -qJ(4) * t1034 - t519 * t822 + t1060;
t828 = qJD(2) ^ 2;
t816 = t819 * t829;
t809 = -t816 - t828;
t808 = t816 - t828;
t807 = -t828 - t933;
t806 = t828 - t933;
t799 = t816 - t933;
t798 = t816 + t933;
t796 = t827 * t829 + t891;
t795 = t902 * qJDD(1);
t793 = t814 - 0.2e1 * t879;
t790 = 0.2e1 * t878 + t892;
t787 = t826 * t800;
t786 = t902 * t894;
t775 = -pkin(6) * t796 + t827 * g(3);
t771 = t826 * t791 - t818 * t894;
t770 = -t824 * t792 - t819 * t894;
t764 = -t824 * t807 - t904;
t763 = -t824 * t806 + t787;
t762 = t826 * t809 - t907;
t761 = t826 * t808 - t906;
t760 = t826 * t807 - t906;
t759 = t824 * t809 + t787;
t747 = t827 * t795 - t825 * t798;
t746 = t825 * t795 + t827 * t798;
t738 = -t824 * t790 + t826 * t793;
t726 = t827 * t764 + t825 * t790;
t725 = t827 * t762 - t825 * t793;
t724 = t825 * t764 - t827 * t790;
t723 = t825 * t762 + t827 * t793;
t717 = -pkin(7) * t760 - t905;
t716 = -pkin(7) * t759 - t908;
t705 = -pkin(1) * t760 + t766;
t704 = -pkin(1) * t759 + t765;
t681 = t827 * t703 - t825 * t780;
t680 = t825 * t703 + t827 * t780;
t658 = qJ(4) * t971;
t651 = (-t936 + t938) * t784;
t619 = t706 + (-t752 * t821 - t886) * t754;
t616 = -t884 + (-t752 * t823 + t887) * t754;
t613 = -t708 + (-t888 + t935) * t752;
t610 = t883 + (t889 + t934) * t752;
t606 = -pkin(3) * t966 - t658;
t597 = t826 * t651 - t997;
t593 = t1017 * t823 + t923;
t590 = t823 * t860 + t922;
t581 = t823 * t859 - t1003;
t571 = t823 * t857 + t1006;
t564 = -t824 * t619 + t641;
t561 = -t824 * t613 + t640;
t558 = -t951 * t966 - t658;
t547 = -t824 * t593 + t1087;
t544 = -t824 * t590 + t1112;
t540 = -t824 * t581 - t1052;
t537 = t826 * t581 - t1053;
t536 = -t824 * t571 - t1048;
t533 = t826 * t571 - t1049;
t513 = pkin(3) * t851 - t1008 + t835;
t512 = t850 + t1014;
t507 = t827 * t540 + t1124;
t504 = t825 * t540 - t1122;
t503 = -t920 + (-t581 * t823 - t1125) * qJ(3);
t502 = t827 * t536 - t1086;
t499 = t825 * t536 + t1085;
t496 = -t932 + t1068;
t487 = t821 * t605 + t823 * t864;
t486 = -t823 * t605 + t821 * t864;
t484 = (-t698 - t957) * qJ(5) + t836 + t1014;
t483 = pkin(4) * t939 - t851 * t951 + t1008 + t530 - 0.2e1 * t895 - t964;
t481 = pkin(3) * t530 + qJ(4) * t526;
t480 = t821 * t551 + t823 * t867 - t1093;
t478 = t821 * t550 + t823 * t868 - t1095;
t477 = t822 * t518 - t970 * t955 + t1067;
t476 = t823 * t844 - t1065;
t475 = qJ(4) * t1031 - t820 * t519 + (-t571 * t823 + t1110) * qJ(3);
t474 = t1035 - t864;
t471 = -pkin(1) * t537 - pkin(2) * t581 + t823 * t551 - t821 * t867;
t470 = -t821 * t543 + t823 * t865;
t469 = t823 * t543 + t821 * t865;
t468 = t823 * t550 - t821 * t868 + t1109;
t467 = -pkin(2) * t486 + t511 * t948;
t466 = -t824 * t487 + t826 * t511;
t465 = t826 * t487 + t824 * t511;
t464 = -t820 * t485 + t822 * t607 + t1068;
t463 = t822 * t495 - t820 * t565 + t1067;
t462 = -t821 * t844 + t1082;
t461 = -t821 * t512 - t823 * t840 + t1093;
t460 = -t821 * t513 - t823 * t839 + t1095;
t459 = (-t486 * t821 - t487 * t823) * qJ(3);
t458 = -t820 * t516 + t822 * t517 + t1035;
t457 = -t821 * t606 + t823 * t845 - t1065;
t455 = -t821 * t515 + t823 * t866;
t454 = t823 * t515 + t821 * t866;
t453 = qJ(4) * t514 - t951 * t510;
t452 = -t823 * t512 + t821 * t840 + t1108;
t451 = -pkin(7) * t537 - t824 * t480 + t826 * t503;
t450 = -pkin(1) * t533 - pkin(2) * t571 - t823 * t513 + t821 * t839;
t449 = -t824 * t478 + t826 * t496 - t1116;
t448 = -t824 * t470 + t826 * t479;
t447 = t826 * t470 + t824 * t479;
t446 = -t823 * t606 - t821 * t845 + t1082;
t445 = -t820 * t482 + t822 * t488 + t1035;
t444 = -t821 * t483 + t823 * t847 - t1095;
t443 = t827 * t466 + t825 * t486;
t442 = t825 * t466 - t827 * t486;
t441 = -t821 * t484 + t823 * t846 + t1093;
t440 = -t821 * t558 + t823 * t848 - t1065;
t439 = -t823 * t483 - t821 * t847 + t1109;
t438 = -t823 * t484 - t821 * t846 + t1108;
t437 = t826 * t474 - t824 * t476 - t1091;
t436 = -pkin(1) * t465 - pkin(2) * t487 - t511 * t949;
t435 = -t823 * t558 - t821 * t848 + t1082;
t434 = -t824 * t455 + t826 * t472;
t433 = t826 * t455 + t824 * t472;
t432 = -t824 * t461 + t826 * t477 - t1115;
t431 = -pkin(7) * t533 - t824 * t460 + t826 * t475;
t430 = (-qJ(4) * t822 + t955) * t543 + (-t469 * t821 - t470 * t823) * qJ(3);
t429 = t827 * t448 + t825 * t469;
t428 = t825 * t448 - t827 * t469;
t427 = -t824 * t457 + t826 * t458 - t1091;
t426 = -pkin(2) * t469 - t821 * t481 - t823 * t963;
t425 = -t824 * t444 + t826 * t464 - t1116;
t424 = -t824 * t441 + t826 * t463 - t1115;
t423 = -pkin(7) * t465 + t826 * t459 - t824 * t467;
t422 = t827 * t434 + t825 * t454;
t421 = t825 * t434 - t827 * t454;
t420 = -t824 * t440 + t826 * t445 - t1091;
t419 = -pkin(1) * t447 - pkin(2) * t470 - t823 * t481 + t821 * t963;
t418 = -t820 * t456 + t822 * t473 + (-t454 * t821 - t455 * t823) * qJ(3);
t417 = -pkin(2) * t454 - t821 * t453 + t823 * t849;
t416 = -pkin(7) * t447 - t824 * t426 + t826 * t430;
t415 = -pkin(1) * t433 - pkin(2) * t455 - t823 * t453 - t821 * t849;
t414 = -pkin(7) * t433 - t824 * t417 + t826 * t418;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t796, -t797, 0, t758, 0, 0, 0, 0, 0, 0, t725, t726, t747, t681, 0, 0, 0, 0, 0, 0, t1100, t507, t1102, t443, 0, 0, 0, 0, 0, 0, t1102, t502, t1098, t429, 0, 0, 0, 0, 0, 0, t1102, t1098, t1100, t422; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t797, -t796, 0, t757, 0, 0, 0, 0, 0, 0, t723, t724, t746, t680, 0, 0, 0, 0, 0, 0, t1101, t504, t1103, t442, 0, 0, 0, 0, 0, 0, t1103, t499, t1099, t428, 0, 0, 0, 0, 0, 0, t1103, t1099, t1101, t421; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t759, t760, 0, -t702, 0, 0, 0, 0, 0, 0, t1071, t537, t1069, t465, 0, 0, 0, 0, 0, 0, t1069, t533, t1073, t447, 0, 0, 0, 0, 0, 0, t1069, t1073, t1071, t433; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t797, 0, -t796, 0, t872, -t775, -t757, -pkin(6) * t757, t827 * t771 - t874, t827 * t738 - t825 * t799, t827 * t763 + t824 * t891, t827 * t770 + t874, t827 * t761 + t814 * t825, t825 * qJDD(2) + t827 * t786, -pkin(6) * t723 - t825 * t704 + t827 * t716, -pkin(6) * t724 - t825 * t705 + t827 * t717, -pkin(6) * t746 + t827 * t702, -pkin(6) * t680 - (pkin(1) * t825 - pkin(7) * t827) * t702, t983, t1131, t1077, t827 * t561 - t825 * t610, t827 * t547 + t1120, t1015, t827 * t449 - t825 * t468 - t1126, -pkin(6) * t504 + t827 * t451 - t825 * t471, t827 * t437 - t825 * t462 - t1117, -pkin(6) * t442 + t827 * t423 - t825 * t436, t827 * t597 - t996, t827 * t544 - t1123, t1075, t827 * t564 - t825 * t616, t1131, t982, t827 * t427 - t825 * t446 - t1117, -pkin(6) * t499 + t827 * t431 - t825 * t450, t827 * t432 - t825 * t452 - t1128, -pkin(6) * t428 + t827 * t416 - t825 * t419, t1015, t1075, t1077, t982, -t1131, t983, t827 * t420 - t825 * t435 - t1117, t827 * t424 - t825 * t438 - t1128, t827 * t425 - t825 * t439 - t1126, -pkin(6) * t421 + t827 * t414 - t825 * t415; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t796, 0, t797, 0, t775, t872, t758, pkin(6) * t758, t825 * t771 + t873, t825 * t738 + t827 * t799, t825 * t763 - t824 * t890, t825 * t770 - t873, t825 * t761 - t826 * t890, -t827 * qJDD(2) + t825 * t786, pkin(6) * t725 + t827 * t704 + t825 * t716, pkin(6) * t726 + t827 * t705 + t825 * t717, pkin(6) * t747 + t825 * t702, pkin(6) * t681 - (-pkin(1) * t827 - pkin(7) * t825) * t702, t986, t1132, t1078, t825 * t561 + t827 * t610, t825 * t547 - t1119, t1016, t825 * t449 + t827 * t468 + t1127, pkin(6) * t507 + t825 * t451 + t827 * t471, t825 * t437 + t827 * t462 + t1118, pkin(6) * t443 + t825 * t423 + t827 * t436, t825 * t597 + t994, t825 * t544 + t1121, t1076, t825 * t564 + t827 * t616, t1132, t985, t825 * t427 + t827 * t446 + t1118, pkin(6) * t502 + t825 * t431 + t827 * t450, t825 * t432 + t827 * t452 + t1129, pkin(6) * t429 + t825 * t416 + t827 * t419, t1016, t1076, t1078, t985, -t1132, t986, t825 * t420 + t827 * t435 + t1118, t825 * t424 + t827 * t438 + t1129, t825 * t425 + t827 * t439 + t1127, pkin(6) * t422 + t825 * t414 + t827 * t415; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t802, t803, 0, 0, (t791 + t878) * t824, t826 * t790 + t824 * t793, t826 * t806 + t907, (t792 - t879) * t826, t824 * t808 + t904, 0, pkin(1) * t793 + pkin(7) * t762 + t905, -pkin(1) * t790 + pkin(7) * t764 - t908, pkin(1) * t798 + pkin(7) * t795 + t703, pkin(1) * t780 + pkin(7) * t703, t961, t1133, t1039, t826 * t613 + t638, t826 * t593 + t1089, t984, t826 * t478 + t824 * t496 + t1107, pkin(7) * t540 + t826 * t480 + t824 * t503 - t1130, t824 * t474 + t826 * t476 + t1081, -pkin(1) * t486 + pkin(7) * t466 + t824 * t459 + t826 * t467, t824 * t651 + t995, t826 * t590 + t1114, t1040, t826 * t619 + t639, t1133, t962, t826 * t457 + t824 * t458 + t1081, pkin(7) * t536 + t826 * t460 + t824 * t475 + t1097, t826 * t461 + t824 * t477 + t1106, -pkin(1) * t469 + pkin(7) * t448 + t826 * t426 + t824 * t430, t984, t1040, t1039, t962, -t1133, t961, t826 * t440 + t824 * t445 + t1081, t826 * t441 + t824 * t463 + t1106, t826 * t444 + t824 * t464 + t1107, -pkin(1) * t454 + pkin(7) * t434 + t826 * t417 + t824 * t418;];
tauB_reg = t1;
