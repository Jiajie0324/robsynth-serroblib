% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RPPRR9
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:03
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RPPRR9_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR9_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR9_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR9_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR9_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRR9_invdynm_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:02:59
% EndTime: 2019-12-31 18:03:06
% DurationCPUTime: 7.30s
% Computational Cost: add. (26585->527), mult. (48126->620), div. (0->0), fcn. (25038->8), ass. (0->311)
t723 = sin(pkin(8));
t724 = cos(pkin(8));
t733 = qJD(1) ^ 2;
t688 = -t723 * qJDD(1) + t724 * t733;
t721 = g(3) + qJDD(3);
t663 = qJ(3) * t688 + t724 * t721;
t729 = sin(qJ(1));
t732 = cos(qJ(1));
t689 = t724 * qJDD(1) + t723 * t733;
t765 = qJ(3) * t689 + t723 * t721;
t814 = t732 * t688 + t729 * t689;
t826 = -pkin(5) * t814 + t732 * t663 + t729 * t765;
t727 = sin(qJ(5));
t730 = cos(qJ(5));
t728 = sin(qJ(4));
t784 = qJD(1) * t728;
t680 = t730 * qJD(4) + t727 * t784;
t681 = -t727 * qJD(4) + t730 * t784;
t639 = t680 * t681;
t783 = qJD(1) * qJD(4);
t709 = t728 * t783;
t731 = cos(qJ(4));
t780 = t731 * qJDD(1);
t687 = t709 - t780;
t678 = qJDD(5) - t687;
t815 = -t639 + t678;
t825 = t727 * t815;
t824 = t730 * t815;
t808 = pkin(4) * t731;
t823 = pkin(7) * t728 + t808;
t782 = qJD(2) * qJD(1);
t716 = 0.2e1 * t782;
t698 = t732 * g(1) + t729 * g(2);
t718 = qJDD(1) * qJ(2);
t759 = -t698 + t718;
t811 = pkin(1) + pkin(2);
t656 = -t811 * t733 + t716 + t759;
t697 = t729 * g(1) - t732 * g(2);
t768 = -qJDD(2) + t697;
t746 = -t733 * qJ(2) - t768;
t734 = -t811 * qJDD(1) + t746;
t605 = t723 * t656 - t724 * t734;
t606 = t724 * t656 + t723 * t734;
t561 = t724 * t605 - t723 * t606;
t764 = t723 * t605 + t724 * t606;
t822 = t729 * t561 - t732 * t764;
t821 = t732 * t561 + t729 * t764;
t633 = -t729 * t688 + t732 * t689;
t820 = pkin(5) * t633 + t729 * t663 - t732 * t765;
t676 = t680 ^ 2;
t677 = t681 ^ 2;
t705 = t731 * qJD(1) + qJD(5);
t703 = t705 ^ 2;
t812 = qJD(4) ^ 2;
t598 = -t733 * pkin(3) - qJDD(1) * pkin(6) + t606;
t590 = t728 * t598 - t731 * t721;
t591 = t731 * t598 + t728 * t721;
t542 = t731 * t590 - t728 * t591;
t810 = pkin(3) * t542;
t809 = pkin(4) * t728;
t806 = pkin(6) * t724;
t543 = t728 * t590 + t731 * t591;
t597 = qJDD(1) * pkin(3) - t733 * pkin(6) + t605;
t522 = t724 * t543 + t723 * t597;
t804 = qJ(3) * t522;
t803 = qJ(3) * t561;
t802 = qJ(3) * t764;
t801 = qJDD(1) * pkin(1);
t800 = t705 * t727;
t799 = t705 * t730;
t719 = t728 ^ 2;
t798 = t719 * t733;
t752 = t733 * t823;
t573 = -qJDD(4) * pkin(4) - t812 * pkin(7) - t728 * t752 + t590;
t797 = t727 * t573;
t618 = t639 + t678;
t796 = t727 * t618;
t795 = t728 * t597;
t704 = t731 * t733 * t728;
t695 = qJDD(4) + t704;
t794 = t728 * t695;
t696 = qJDD(4) - t704;
t793 = t728 * t696;
t790 = t730 * t573;
t789 = t730 * t618;
t788 = t731 * t597;
t787 = t731 * t695;
t786 = t731 * t696;
t720 = t731 ^ 2;
t785 = -t719 - t720;
t781 = t728 * qJDD(1);
t779 = t728 * t639;
t778 = t731 * t639;
t777 = t731 * t783;
t521 = t723 * t543 - t724 * t597;
t776 = -qJ(3) * t521 - t723 * t810;
t766 = t687 + t709;
t685 = -t777 - t781;
t767 = -t685 + t777;
t564 = -pkin(4) * t766 + pkin(7) * t767 + t597;
t574 = -t812 * pkin(4) + qJDD(4) * pkin(7) - t731 * t752 + t591;
t524 = -t730 * t564 + t727 * t574;
t525 = t727 * t564 + t730 * t574;
t496 = t727 * t524 + t730 * t525;
t667 = t733 * pkin(1) - t759 - 0.2e1 * t782;
t668 = -t746 + t801;
t775 = -t732 * t667 - t729 * t668;
t774 = -t729 * t697 - t732 * t698;
t773 = t730 * qJDD(4) - t727 * t685;
t772 = t723 * t704;
t771 = t724 * t704;
t770 = pkin(3) * t597 - pkin(6) * t543;
t769 = -pkin(4) * t573 + pkin(7) * t496;
t691 = t729 * qJDD(1) + t732 * t733;
t670 = -pkin(5) * t691 + t732 * g(3);
t692 = t732 * qJDD(1) - t729 * t733;
t669 = pkin(5) * t692 + t729 * g(3);
t495 = -t730 * t524 + t727 * t525;
t763 = t729 * t667 - t732 * t668;
t762 = t732 * t697 - t729 * t698;
t761 = -pkin(3) * t724 - pkin(6) * t723 - pkin(2);
t760 = -t727 * qJDD(4) - t730 * t685;
t491 = t728 * t496 - t731 * t573;
t476 = -pkin(6) * t491 + (-pkin(7) * t731 + t809) * t495;
t477 = -pkin(3) * t491 - t769;
t492 = t731 * t496 + t728 * t573;
t478 = t723 * t492 - t724 * t495;
t758 = -qJ(3) * t478 + t724 * t476 - t723 * t477;
t600 = (qJD(5) - t705) * t681 + t773;
t629 = t680 * qJD(5) - t760;
t665 = t705 * t680;
t603 = t629 - t665;
t554 = t727 * t600 - t730 * t603;
t490 = -pkin(7) * t554 - t495;
t556 = t730 * t600 + t727 * t603;
t615 = t676 + t677;
t530 = t728 * t556 + t731 * t615;
t482 = -pkin(6) * t530 + t731 * t490 + t554 * t809;
t737 = pkin(4) * t615 + pkin(7) * t556 + t496;
t484 = -pkin(3) * t530 - t737;
t531 = t731 * t556 - t728 * t615;
t500 = t723 * t531 - t724 * t554;
t757 = -qJ(3) * t500 + t724 * t482 - t723 * t484;
t630 = -t703 - t676;
t579 = t727 * t630 + t824;
t506 = -pkin(4) * t579 + t524;
t526 = -pkin(7) * t579 + t797;
t580 = t730 * t630 - t825;
t628 = t681 * qJD(5) + t773;
t666 = t705 * t681;
t601 = t628 + t666;
t539 = t728 * t580 + t731 * t601;
t487 = -pkin(6) * t539 - t728 * t506 + t731 * t526;
t748 = pkin(4) * t601 + pkin(7) * t580 - t790;
t497 = -pkin(3) * t539 - t748;
t540 = t731 * t580 - t728 * t601;
t513 = t723 * t540 - t724 * t579;
t756 = -qJ(3) * t513 + t724 * t487 - t723 * t497;
t637 = -t677 - t703;
t581 = t730 * t637 - t796;
t507 = -pkin(4) * t581 + t525;
t529 = -pkin(7) * t581 + t790;
t582 = -t727 * t637 - t789;
t604 = (-qJD(5) - t705) * t680 + t760;
t544 = t728 * t582 + t731 * t604;
t489 = -pkin(6) * t544 - t728 * t507 + t731 * t529;
t747 = pkin(4) * t604 + pkin(7) * t582 + t797;
t498 = -pkin(3) * t544 - t747;
t545 = t731 * t582 - t728 * t604;
t515 = t723 * t545 - t724 * t581;
t755 = -qJ(3) * t515 + t724 * t489 - t723 * t498;
t715 = t720 * t733;
t702 = -t715 - t812;
t644 = t728 * t702 + t787;
t569 = -pkin(3) * t644 + t590;
t577 = -pkin(6) * t644 + t795;
t648 = t731 * t702 - t794;
t686 = 0.2e1 * t709 - t780;
t611 = t723 * t648 + t724 * t686;
t754 = -qJ(3) * t611 - t723 * t569 + t724 * t577;
t700 = -t798 - t812;
t646 = t731 * t700 - t793;
t570 = -pkin(3) * t646 + t591;
t578 = -pkin(6) * t646 + t788;
t650 = -t728 * t700 - t786;
t684 = 0.2e1 * t777 + t781;
t612 = t723 * t650 + t724 * t684;
t753 = -qJ(3) * t612 - t723 * t570 + t724 * t578;
t751 = -pkin(6) * t492 + (pkin(3) + t823) * t495;
t750 = pkin(3) * t686 + pkin(6) * t648 - t788;
t749 = pkin(3) * t684 + pkin(6) * t650 + t795;
t479 = t724 * t492 + t723 * t495;
t745 = -qJ(3) * t479 - t723 * t476 - t724 * t477;
t501 = t724 * t531 + t723 * t554;
t744 = -qJ(3) * t501 - t723 * t482 - t724 * t484;
t514 = t724 * t540 + t723 * t579;
t743 = -qJ(3) * t514 - t723 * t487 - t724 * t497;
t516 = t724 * t545 + t723 * t581;
t742 = -qJ(3) * t516 - t723 * t489 - t724 * t498;
t613 = t724 * t648 - t723 * t686;
t741 = -qJ(3) * t613 - t724 * t569 - t723 * t577;
t614 = t724 * t650 - t723 * t684;
t740 = -qJ(3) * t614 - t724 * t570 - t723 * t578;
t739 = -pkin(6) * t531 - t728 * t490 + (pkin(3) + t808) * t554;
t690 = t785 * qJDD(1);
t693 = t715 + t798;
t738 = pkin(3) * t693 + pkin(6) * t690 + t543;
t736 = pkin(3) * t579 - pkin(6) * t540 - t731 * t506 - t728 * t526;
t735 = pkin(3) * t581 - pkin(6) * t545 - t731 * t507 - t728 * t529;
t701 = t715 - t812;
t699 = -t798 + t812;
t694 = -t715 + t798;
t679 = t785 * t783;
t675 = t768 + 0.2e1 * t801;
t672 = -t698 + t716 + 0.2e1 * t718;
t660 = -t677 + t703;
t659 = t676 - t703;
t658 = t731 * t685 + t719 * t783;
t657 = -t728 * t687 + t720 * t783;
t654 = t723 * qJDD(4) + t724 * t679;
t653 = -t724 * qJDD(4) + t723 * t679;
t649 = -t728 * t699 + t787;
t647 = t731 * t701 - t793;
t645 = t731 * t699 + t794;
t643 = t728 * t701 + t786;
t642 = t767 * t728;
t641 = t766 * t731;
t638 = t677 - t676;
t636 = t724 * t690 - t723 * t693;
t635 = t723 * t690 + t724 * t693;
t632 = t728 * t684 + t731 * t686;
t631 = -t731 * t684 + t728 * t686;
t627 = t724 * t658 - t772;
t626 = t724 * t657 + t772;
t625 = t723 * t658 + t771;
t624 = t723 * t657 - t771;
t623 = t724 * t649 - t723 * t781;
t622 = t724 * t647 - t723 * t780;
t621 = t723 * t649 + t724 * t781;
t620 = t723 * t647 + t724 * t780;
t616 = pkin(1) * t668 - qJ(2) * t667;
t610 = (t680 * t730 - t681 * t727) * t705;
t609 = (t680 * t727 + t681 * t730) * t705;
t608 = t724 * t632 + t723 * t694;
t607 = t723 * t632 - t724 * t694;
t602 = t629 + t665;
t599 = -t628 + t666;
t595 = t730 * t629 + t681 * t800;
t594 = t727 * t629 - t681 * t799;
t593 = -t727 * t628 - t680 * t799;
t592 = -t730 * t628 + t680 * t800;
t589 = t731 * t610 + t728 * t678;
t588 = t728 * t610 - t731 * t678;
t587 = t730 * t659 - t796;
t586 = -t727 * t660 + t824;
t585 = t727 * t659 + t789;
t584 = t730 * t660 + t825;
t576 = -qJ(2) * t688 + t811 * t689 + t605;
t575 = qJ(2) * t689 + t811 * t688 + t606;
t568 = t731 * t595 + t779;
t567 = t731 * t593 - t779;
t566 = t728 * t595 - t778;
t565 = t728 * t593 + t778;
t558 = qJ(2) * t721 + t803;
t557 = t730 * t601 - t727 * t602;
t555 = t727 * t601 + t730 * t602;
t553 = t811 * t721 - t802;
t552 = t724 * t589 + t723 * t609;
t551 = t723 * t589 - t724 * t609;
t549 = t731 * t587 - t728 * t599;
t548 = t731 * t586 + t728 * t603;
t547 = t728 * t587 + t731 * t599;
t546 = t728 * t586 - t731 * t603;
t537 = t731 * t557 + t728 * t638;
t536 = t728 * t557 - t731 * t638;
t535 = t724 * t568 + t723 * t594;
t534 = t724 * t567 - t723 * t592;
t533 = t723 * t568 - t724 * t594;
t532 = t723 * t567 + t724 * t592;
t528 = -qJ(3) * t635 + t724 * t542;
t527 = qJ(3) * t636 + t723 * t542;
t520 = t724 * t549 + t723 * t585;
t519 = t724 * t548 + t723 * t584;
t518 = t723 * t549 - t724 * t585;
t517 = t723 * t548 - t724 * t584;
t512 = qJ(2) * t614 - t811 * t612 - t749;
t511 = qJ(2) * t613 - t811 * t611 - t750;
t510 = qJ(2) * t636 - t811 * t635 - t738;
t509 = qJ(2) * t646 + t753;
t508 = qJ(2) * t644 + t754;
t505 = t724 * t537 + t723 * t555;
t504 = t723 * t537 - t724 * t555;
t503 = t811 * t646 + t740;
t502 = t811 * t644 + t741;
t499 = qJ(2) * t764 + t561 * t811;
t485 = -(qJ(2) - t806) * t542 + t776;
t483 = -t804 - (pkin(1) - t761) * t542;
t480 = qJ(2) * t522 - t811 * t521 + t770;
t474 = qJ(2) * t544 + t755;
t473 = qJ(2) * t516 - t811 * t515 + t735;
t472 = qJ(2) * t539 + t756;
t471 = qJ(2) * t514 - t811 * t513 + t736;
t470 = t811 * t544 + t742;
t469 = t811 * t539 + t743;
t468 = qJ(2) * t501 - t811 * t500 + t739;
t467 = qJ(2) * t530 + t757;
t466 = t811 * t530 + t744;
t465 = qJ(2) * t491 + t758;
t464 = t811 * t491 + t745;
t463 = qJ(2) * t479 - t811 * t478 + t751;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t692, 0, -t691, 0, -t669, -t670, -t762, -pkin(5) * t762, 0, t692, 0, 0, t691, 0, -t669, t763, t670, pkin(5) * t763 + (-t729 * pkin(1) + t732 * qJ(2)) * g(3), 0, 0, -t633, 0, -t814, 0, -t820, t826, t821, -pkin(5) * t821 - t729 * t553 + t732 * t558, t729 * t625 + t732 * t627, t729 * t607 + t732 * t608, t729 * t621 + t732 * t623, t729 * t624 + t732 * t626, t729 * t620 + t732 * t622, t729 * t653 + t732 * t654, t732 * t508 - t729 * t502 - pkin(5) * (-t732 * t611 + t729 * t613), t732 * t509 - t729 * t503 - pkin(5) * (-t732 * t612 + t729 * t614), t732 * t528 + t729 * t527 - pkin(5) * (-t732 * t635 + t729 * t636), t732 * t485 - t729 * t483 - pkin(5) * (-t732 * t521 + t729 * t522), t729 * t533 + t732 * t535, t729 * t504 + t732 * t505, t729 * t517 + t732 * t519, t729 * t532 + t732 * t534, t729 * t518 + t732 * t520, t729 * t551 + t732 * t552, t732 * t472 - t729 * t469 - pkin(5) * (-t732 * t513 + t729 * t514), t732 * t474 - t729 * t470 - pkin(5) * (-t732 * t515 + t729 * t516), t732 * t467 - t729 * t466 - pkin(5) * (-t732 * t500 + t729 * t501), t732 * t465 - t729 * t464 - pkin(5) * (-t732 * t478 + t729 * t479); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t691, 0, t692, 0, t670, -t669, t774, pkin(5) * t774, 0, t691, 0, 0, -t692, 0, t670, t775, t669, pkin(5) * t775 + (t732 * pkin(1) + t729 * qJ(2)) * g(3), 0, 0, -t814, 0, t633, 0, t826, t820, t822, -pkin(5) * t822 + t732 * t553 + t729 * t558, -t732 * t625 + t729 * t627, -t732 * t607 + t729 * t608, -t732 * t621 + t729 * t623, -t732 * t624 + t729 * t626, -t732 * t620 + t729 * t622, -t732 * t653 + t729 * t654, t729 * t508 + t732 * t502 + pkin(5) * (t729 * t611 + t732 * t613), t729 * t509 + t732 * t503 + pkin(5) * (t729 * t612 + t732 * t614), t729 * t528 - t732 * t527 + pkin(5) * (t729 * t635 + t732 * t636), t729 * t485 + t732 * t483 + pkin(5) * (t729 * t521 + t732 * t522), -t732 * t533 + t729 * t535, -t732 * t504 + t729 * t505, -t732 * t517 + t729 * t519, -t732 * t532 + t729 * t534, -t732 * t518 + t729 * t520, -t732 * t551 + t729 * t552, t729 * t472 + t732 * t469 + pkin(5) * (t729 * t513 + t732 * t514), t729 * t474 + t732 * t470 + pkin(5) * (t729 * t515 + t732 * t516), t729 * t467 + t732 * t466 + pkin(5) * (t729 * t500 + t732 * t501), t729 * t465 + t732 * t464 + pkin(5) * (t729 * t478 + t732 * t479); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t697, t698, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t675, 0, t672, t616, 0, 0, 0, 0, 0, qJDD(1), t576, t575, 0, t499, t642, -t631, -t645, -t641, -t643, 0, t511, t512, t510, t480, -t566, -t536, -t546, -t565, -t547, -t588, t471, t473, t468, t463; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t733, 0, 0, -g(3), -t697, 0, 0, qJDD(1), 0, 0, t733, 0, 0, -t668, g(3), qJ(2) * g(3), 0, 0, -t689, 0, -t688, 0, t765, t663, t561, t558, t627, t608, t623, t626, t622, t654, t508, t509, t528, t485, t535, t505, t519, t534, t520, t552, t472, t474, t467, t465; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t733, 0, qJDD(1), 0, g(3), 0, -t698, 0, 0, t733, 0, 0, -qJDD(1), 0, g(3), -t667, 0, pkin(1) * g(3), 0, 0, -t688, 0, t689, 0, t663, -t765, -t764, t553, -t625, -t607, -t621, -t624, -t620, -t653, t502, t503, -t527, t483, -t533, -t504, -t517, -t532, -t518, -t551, t469, t470, t466, t464; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t697, t698, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t675, 0, t672, t616, 0, 0, 0, 0, 0, qJDD(1), t576, t575, 0, t499, t642, -t631, -t645, -t641, -t643, 0, t511, t512, t510, t480, -t566, -t536, -t546, -t565, -t547, -t588, t471, t473, t468, t463; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t733, 0, 0, -t668, g(3), 0, 0, 0, -t689, 0, -t688, 0, t765, t663, t561, t803, t627, t608, t623, t626, t622, t654, t754, t753, t528, t542 * t806 + t776, t535, t505, t519, t534, t520, t552, t756, t755, t757, t758; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t668, 0, -t667, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(2) * t689 + t605, pkin(2) * t688 + t606, 0, pkin(2) * t561, t642, -t631, -t645, -t641, -t643, 0, -pkin(2) * t611 - t750, -pkin(2) * t612 - t749, -pkin(2) * t635 - t738, -pkin(2) * t521 + t770, -t566, -t536, -t546, -t565, -t547, -t588, -pkin(2) * t513 + t736, -pkin(2) * t515 + t735, -pkin(2) * t500 + t739, -pkin(2) * t478 + t751; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t733, 0, 0, qJDD(1), 0, -g(3), t667, 0, 0, 0, 0, t688, 0, -t689, 0, -t663, t765, t764, -pkin(2) * t721 + t802, t625, t607, t621, t624, t620, t653, -pkin(2) * t644 - t741, -pkin(2) * t646 - t740, t527, -t542 * t761 + t804, t533, t504, t517, t532, t518, t551, -pkin(2) * t539 - t743, -pkin(2) * t544 - t742, -pkin(2) * t530 - t744, -pkin(2) * t491 - t745; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), 0, -t733, 0, 0, t721, t605, 0, t658, t632, t649, t657, t647, t679, t577, t578, t542, pkin(6) * t542, t568, t537, t548, t567, t549, t589, t487, t489, t482, t476; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t733, 0, -qJDD(1), 0, -t721, 0, t606, 0, t704, -t694, t781, -t704, t780, -qJDD(4), t569, t570, 0, t810, -t594, -t555, -t584, t592, -t585, -t609, t497, t498, t484, t477; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), -t605, -t606, 0, 0, -t642, t631, t645, t641, t643, 0, t750, t749, t738, -t770, t566, t536, t546, t565, t547, t588, -t736, -t735, -t739, -t751; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t685, t686, t695, t777, t701, -t777, 0, t597, t590, 0, t595, t557, t586, t593, t587, t610, t526, t529, t490, -pkin(7) * t495; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t709, -t684, t699, t687, t696, t709, -t597, 0, t591, 0, -t639, -t638, -t603, t639, t599, -t678, t506, t507, -pkin(4) * t554, -pkin(4) * t495; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t704, t694, -t781, t704, -t780, qJDD(4), -t590, -t591, 0, 0, t594, t555, t584, -t592, t585, t609, t748, t747, t737, t769; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t629, t601, t815, -t665, t659, t665, 0, t573, t524, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t666, t602, t660, t628, t618, t666, -t573, 0, t525, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t639, t638, t603, -t639, -t599, t678, -t524, -t525, 0, 0;];
m_new_reg = t1;
