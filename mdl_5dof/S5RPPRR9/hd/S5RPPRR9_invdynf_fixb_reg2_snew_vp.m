% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPPRR9
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:03
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPPRR9_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR9_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR9_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR9_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR9_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRR9_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:03:06
% EndTime: 2019-12-31 18:03:07
% DurationCPUTime: 1.52s
% Computational Cost: add. (4518->202), mult. (8206->209), div. (0->0), fcn. (4332->8), ass. (0->120)
t939 = cos(qJ(4));
t916 = t939 * qJD(1) + qJD(5);
t965 = qJD(5) + t916;
t935 = sin(qJ(5));
t938 = cos(qJ(5));
t936 = sin(qJ(4));
t958 = qJD(1) * t936;
t897 = t938 * qJD(4) + t935 * t958;
t964 = t897 ^ 2;
t898 = -t935 * qJD(4) + t938 * t958;
t963 = t898 ^ 2;
t962 = t916 ^ 2;
t942 = qJD(1) ^ 2;
t961 = -pkin(1) - pkin(2);
t960 = t897 * t898;
t937 = sin(qJ(1));
t940 = cos(qJ(1));
t912 = -t940 * g(1) - t937 * g(2);
t945 = qJDD(1) * qJ(2) + 0.2e1 * qJD(2) * qJD(1) + t912;
t891 = t961 * t942 + t945;
t931 = sin(pkin(8));
t932 = cos(pkin(8));
t911 = t937 * g(1) - t940 * g(2);
t944 = -t942 * qJ(2) + qJDD(2) - t911;
t943 = t961 * qJDD(1) + t944;
t872 = t932 * t891 + t931 * t943;
t866 = -t942 * pkin(3) - qJDD(1) * pkin(6) + t872;
t929 = g(3) + qJDD(3);
t863 = t939 * t866 + t936 * t929;
t927 = t936 ^ 2;
t928 = t939 ^ 2;
t959 = t927 + t928;
t957 = qJD(5) - t916;
t956 = qJD(1) * qJD(4);
t955 = t936 * qJDD(1);
t954 = t939 * qJDD(1);
t920 = t936 * t956;
t953 = t939 * t956;
t862 = -t936 * t866 + t939 * t929;
t871 = -t931 * t891 + t932 * t943;
t903 = -t931 * qJDD(1) + t932 * t942;
t904 = t932 * qJDD(1) + t931 * t942;
t952 = -t937 * t903 + t940 * t904;
t901 = -t953 - t955;
t951 = t938 * qJDD(4) - t935 * t901;
t950 = -t920 + t954;
t949 = t940 * t903 + t937 * t904;
t948 = -qJDD(5) - t950;
t947 = -t935 * qJDD(4) - t938 * t901;
t946 = t942 * (pkin(4) * t939 + pkin(7) * t936);
t865 = qJDD(1) * pkin(3) - t942 * pkin(6) - t871;
t941 = qJD(4) ^ 2;
t915 = t939 * t942 * t936;
t914 = -t928 * t942 - t941;
t913 = -t927 * t942 - t941;
t910 = -qJDD(4) + t915;
t909 = qJDD(4) + t915;
t908 = t959 * t942;
t907 = t940 * qJDD(1) - t937 * t942;
t906 = t937 * qJDD(1) + t940 * t942;
t905 = t959 * qJDD(1);
t902 = -0.2e1 * t920 + t954;
t900 = 0.2e1 * t953 + t955;
t894 = qJDD(1) * pkin(1) - t944;
t893 = -t942 * pkin(1) + t945;
t888 = t939 * t910 - t936 * t913;
t887 = -t936 * t909 + t939 * t914;
t886 = t936 * t910 + t939 * t913;
t885 = t939 * t909 + t936 * t914;
t883 = -t962 - t963;
t882 = -t932 * t905 - t931 * t908;
t881 = -t931 * t905 + t932 * t908;
t880 = -t962 - t964;
t879 = t948 - t960;
t878 = -t948 - t960;
t877 = -t963 - t964;
t876 = t932 * t888 - t931 * t900;
t875 = t932 * t887 + t931 * t902;
t874 = t931 * t888 + t932 * t900;
t873 = t931 * t887 - t932 * t902;
t870 = -t957 * t897 + t947;
t869 = t965 * t897 - t947;
t868 = t957 * t898 + t951;
t867 = -t965 * t898 - t951;
t861 = t938 * t879 - t935 * t883;
t860 = t935 * t879 + t938 * t883;
t859 = -t935 * t878 + t938 * t880;
t858 = t938 * t878 + t935 * t880;
t857 = -t941 * pkin(4) + qJDD(4) * pkin(7) - t939 * t946 + t863;
t856 = -qJDD(4) * pkin(4) - t941 * pkin(7) - t936 * t946 - t862;
t855 = (-t901 + t953) * pkin(7) + (t950 - t920) * pkin(4) + t865;
t854 = -t931 * t871 + t932 * t872;
t853 = t932 * t871 + t931 * t872;
t852 = t938 * t868 - t935 * t870;
t851 = t935 * t868 + t938 * t870;
t850 = t939 * t861 + t936 * t869;
t849 = t936 * t861 - t939 * t869;
t848 = -t936 * t862 + t939 * t863;
t847 = t939 * t862 + t936 * t863;
t846 = t939 * t859 + t936 * t867;
t845 = t936 * t859 - t939 * t867;
t844 = t939 * t852 + t936 * t877;
t843 = t936 * t852 - t939 * t877;
t842 = t935 * t855 + t938 * t857;
t841 = t938 * t855 - t935 * t857;
t840 = t932 * t848 + t931 * t865;
t839 = t931 * t848 - t932 * t865;
t838 = t932 * t850 + t931 * t860;
t837 = t931 * t850 - t932 * t860;
t836 = t932 * t846 + t931 * t858;
t835 = t931 * t846 - t932 * t858;
t834 = t932 * t844 + t931 * t851;
t833 = t931 * t844 - t932 * t851;
t832 = -t935 * t841 + t938 * t842;
t831 = t938 * t841 + t935 * t842;
t830 = t939 * t832 + t936 * t856;
t829 = t936 * t832 - t939 * t856;
t828 = t932 * t830 + t931 * t831;
t827 = t931 * t830 - t932 * t831;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t906, -t907, 0, -t937 * t911 + t940 * t912, 0, 0, 0, 0, 0, 0, -t906, 0, t907, t940 * t893 - t937 * t894, 0, 0, 0, 0, 0, 0, -t949, t952, 0, t937 * t853 + t940 * t854, 0, 0, 0, 0, 0, 0, t937 * t873 + t940 * t875, t937 * t874 + t940 * t876, t937 * t881 + t940 * t882, t937 * t839 + t940 * t840, 0, 0, 0, 0, 0, 0, t937 * t835 + t940 * t836, t937 * t837 + t940 * t838, t937 * t833 + t940 * t834, t937 * t827 + t940 * t828; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t907, -t906, 0, t940 * t911 + t937 * t912, 0, 0, 0, 0, 0, 0, t907, 0, t906, t937 * t893 + t940 * t894, 0, 0, 0, 0, 0, 0, t952, t949, 0, -t940 * t853 + t937 * t854, 0, 0, 0, 0, 0, 0, -t940 * t873 + t937 * t875, -t940 * t874 + t937 * t876, -t940 * t881 + t937 * t882, -t940 * t839 + t937 * t840, 0, 0, 0, 0, 0, 0, -t940 * t835 + t937 * t836, -t940 * t837 + t937 * t838, -t940 * t833 + t937 * t834, -t940 * t827 + t937 * t828; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t929, 0, 0, 0, 0, 0, 0, -t885, -t886, 0, -t847, 0, 0, 0, 0, 0, 0, -t845, -t849, -t843, -t829; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t942, -qJDD(1), 0, t912, 0, 0, 0, 0, 0, 0, -t942, 0, qJDD(1), t893, 0, 0, 0, 0, 0, 0, -t903, t904, 0, t854, 0, 0, 0, 0, 0, 0, t875, t876, t882, t840, 0, 0, 0, 0, 0, 0, t836, t838, t834, t828; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t942, 0, t911, 0, 0, 0, 0, 0, 0, qJDD(1), 0, t942, t894, 0, 0, 0, 0, 0, 0, t904, t903, 0, -t853, 0, 0, 0, 0, 0, 0, -t873, -t874, -t881, -t839, 0, 0, 0, 0, 0, 0, -t835, -t837, -t833, -t827; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t929, 0, 0, 0, 0, 0, 0, -t885, -t886, 0, -t847, 0, 0, 0, 0, 0, 0, -t845, -t849, -t843, -t829; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t942, 0, qJDD(1), t893, 0, 0, 0, 0, 0, 0, -t903, t904, 0, t854, 0, 0, 0, 0, 0, 0, t875, t876, t882, t840, 0, 0, 0, 0, 0, 0, t836, t838, t834, t828; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t929, 0, 0, 0, 0, 0, 0, -t885, -t886, 0, -t847, 0, 0, 0, 0, 0, 0, -t845, -t849, -t843, -t829; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), 0, -t942, -t894, 0, 0, 0, 0, 0, 0, -t904, -t903, 0, t853, 0, 0, 0, 0, 0, 0, t873, t874, t881, t839, 0, 0, 0, 0, 0, 0, t835, t837, t833, t827; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t942, qJDD(1), 0, t872, 0, 0, 0, 0, 0, 0, t887, t888, -t905, t848, 0, 0, 0, 0, 0, 0, t846, t850, t844, t830; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(1), -t942, 0, t871, 0, 0, 0, 0, 0, 0, -t902, t900, t908, -t865, 0, 0, 0, 0, 0, 0, -t858, -t860, -t851, -t831; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t929, 0, 0, 0, 0, 0, 0, t885, t886, 0, t847, 0, 0, 0, 0, 0, 0, t845, t849, t843, t829; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t914, t910, -t954, t863, 0, 0, 0, 0, 0, 0, t859, t861, t852, t832; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t909, t913, t955, t862, 0, 0, 0, 0, 0, 0, -t867, -t869, -t877, -t856; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t902, -t900, -t908, t865, 0, 0, 0, 0, 0, 0, t858, t860, t851, t831; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t880, t879, t868, t842; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t878, t883, t870, t841; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t867, t869, t877, t856;];
f_new_reg = t1;
