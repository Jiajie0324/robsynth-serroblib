% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPPRR9
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 18:03
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPPRR9_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPPRR9_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPPRR9_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPPRR9_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPPRR9_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RPPRR9_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 18:02:52
% EndTime: 2019-12-31 18:02:59
% DurationCPUTime: 4.80s
% Computational Cost: add. (13542->414), mult. (24554->591), div. (0->0), fcn. (12914->8), ass. (0->266)
t399 = sin(pkin(8));
t400 = cos(pkin(8));
t410 = qJD(1) ^ 2;
t364 = -t399 * qJDD(1) + t400 * t410;
t365 = t400 * qJDD(1) + t399 * t410;
t405 = sin(qJ(1));
t408 = cos(qJ(1));
t310 = t408 * t364 + t405 * t365;
t397 = g(3) + qJDD(3);
t339 = qJ(3) * t365 + t399 * t397;
t417 = qJ(3) * t364 + t400 * t397;
t462 = -pkin(5) * t310 + t405 * t339 + t408 * t417;
t403 = sin(qJ(5));
t406 = cos(qJ(5));
t404 = sin(qJ(4));
t433 = qJD(1) * t404;
t356 = t406 * qJD(4) + t403 * t433;
t357 = -t403 * qJD(4) + t406 * t433;
t318 = t356 * t357;
t431 = qJD(1) * qJD(4);
t385 = t404 * t431;
t407 = cos(qJ(4));
t429 = t407 * qJDD(1);
t363 = t385 - t429;
t416 = qJDD(5) - t363;
t455 = -t318 + t416;
t461 = t403 * t455;
t460 = t406 * t455;
t425 = -t405 * t364 + t408 * t365;
t458 = -pkin(5) * t425 + t408 * t339 - t405 * t417;
t394 = qJDD(1) * qJ(2);
t374 = t408 * g(1) + t405 * g(2);
t415 = 0.2e1 * qJD(2) * qJD(1) - t374;
t413 = t394 + t415;
t453 = pkin(1) + pkin(2);
t333 = -t453 * t410 + t413;
t373 = t405 * g(1) - t408 * g(2);
t420 = -qJDD(2) + t373;
t412 = -t410 * qJ(2) - t420;
t411 = -t453 * qJDD(1) + t412;
t282 = t399 * t333 - t400 * t411;
t283 = t400 * t333 + t399 * t411;
t238 = t400 * t282 - t399 * t283;
t239 = t399 * t282 + t400 * t283;
t196 = t408 * t238 + t405 * t239;
t457 = t405 * t238 - t408 * t239;
t426 = t407 * t431;
t430 = t404 * qJDD(1);
t361 = -t426 - t430;
t307 = t356 * qJD(5) + t403 * qJDD(4) + t406 * t361;
t381 = t407 * qJD(1) + qJD(5);
t342 = t381 * t356;
t279 = t342 + t307;
t424 = -t406 * qJDD(4) + t403 * t361;
t277 = (qJD(5) - t381) * t357 - t424;
t352 = t356 ^ 2;
t353 = t357 ^ 2;
t379 = t381 ^ 2;
t452 = pkin(4) * t404;
t451 = pkin(4) * t407;
t450 = qJDD(1) * pkin(1);
t449 = t381 * t403;
t448 = t381 * t406;
t395 = t404 ^ 2;
t447 = t395 * t410;
t275 = -t410 * pkin(3) - qJDD(1) * pkin(6) + t283;
t265 = t404 * t275 - t407 * t397;
t409 = qJD(4) ^ 2;
t421 = pkin(7) * t404 + t451;
t414 = t410 * t421;
t252 = -qJDD(4) * pkin(4) - t409 * pkin(7) - t404 * t414 + t265;
t446 = t403 * t252;
t296 = t318 + t416;
t445 = t403 * t296;
t274 = qJDD(1) * pkin(3) - t410 * pkin(6) + t282;
t444 = t404 * t274;
t380 = t407 * t410 * t404;
t371 = qJDD(4) + t380;
t443 = t404 * t371;
t372 = qJDD(4) - t380;
t442 = t404 * t372;
t439 = t406 * t252;
t438 = t406 * t296;
t437 = t407 * t274;
t436 = t407 * t371;
t435 = t407 * t372;
t418 = -t363 - t385;
t419 = -t361 + t426;
t242 = t418 * pkin(4) + t419 * pkin(7) + t274;
t266 = t407 * t275 + t404 * t397;
t253 = -t409 * pkin(4) + qJDD(4) * pkin(7) - t407 * t414 + t266;
t207 = t403 * t242 + t406 * t253;
t396 = t407 ^ 2;
t434 = -t395 - t396;
t428 = t404 * t318;
t427 = t407 * t318;
t206 = -t406 * t242 + t403 * t253;
t343 = -t410 * pkin(1) + t413;
t344 = -t412 + t450;
t293 = t408 * t343 - t405 * t344;
t321 = -t405 * t373 - t408 * t374;
t423 = t399 * t380;
t422 = t400 * t380;
t367 = t405 * qJDD(1) + t408 * t410;
t346 = -pkin(5) * t367 + t408 * g(3);
t368 = t408 * qJDD(1) - t405 * t410;
t345 = pkin(5) * t368 + t405 * g(3);
t180 = -t406 * t206 + t403 * t207;
t181 = t403 * t206 + t406 * t207;
t222 = t407 * t265 - t404 * t266;
t223 = t404 * t265 + t407 * t266;
t292 = t405 * t343 + t408 * t344;
t320 = t408 * t373 - t405 * t374;
t391 = t396 * t410;
t378 = -t391 - t409;
t377 = t391 - t409;
t376 = -t409 - t447;
t375 = t409 - t447;
t370 = t391 - t447;
t369 = t391 + t447;
t366 = t434 * qJDD(1);
t362 = 0.2e1 * t385 - t429;
t360 = 0.2e1 * t426 + t430;
t355 = t434 * t431;
t337 = -t353 + t379;
t336 = t352 - t379;
t335 = t407 * t361 + t395 * t431;
t334 = -t404 * t363 + t396 * t431;
t331 = t399 * qJDD(4) + t400 * t355;
t330 = t400 * qJDD(4) - t399 * t355;
t327 = -t404 * t376 - t435;
t326 = -t404 * t375 + t436;
t325 = t407 * t378 - t443;
t324 = t407 * t377 - t442;
t323 = t407 * t376 - t442;
t322 = t404 * t378 + t436;
t317 = -t353 + t352;
t316 = -t353 - t379;
t315 = t400 * t366 - t399 * t369;
t314 = t399 * t366 + t400 * t369;
t309 = t404 * t360 + t407 * t362;
t308 = -t379 - t352;
t306 = t357 * qJD(5) - t424;
t305 = t400 * t335 - t423;
t304 = t400 * t334 + t423;
t303 = -t399 * t335 - t422;
t302 = -t399 * t334 + t422;
t301 = t400 * t326 - t399 * t430;
t300 = t400 * t324 - t399 * t429;
t299 = -t399 * t326 - t400 * t430;
t298 = -t399 * t324 - t400 * t429;
t294 = t352 + t353;
t291 = t400 * t327 - t399 * t360;
t290 = t400 * t325 - t399 * t362;
t289 = t399 * t327 + t400 * t360;
t288 = t399 * t325 + t400 * t362;
t287 = (t356 * t406 - t357 * t403) * t381;
t286 = (-t356 * t403 - t357 * t406) * t381;
t285 = t400 * t309 - t399 * t370;
t284 = -t399 * t309 - t400 * t370;
t281 = t342 - t307;
t278 = (qJD(5) + t381) * t357 - t424;
t272 = t406 * t307 + t357 * t449;
t271 = -t403 * t307 + t357 * t448;
t270 = -t403 * t306 - t356 * t448;
t269 = -t406 * t306 + t356 * t449;
t268 = t405 * t314 + t408 * t315;
t267 = -t408 * t314 + t405 * t315;
t264 = t407 * t287 + t404 * t416;
t263 = t406 * t336 - t445;
t262 = -t403 * t337 + t460;
t261 = -t403 * t336 - t438;
t260 = -t406 * t337 - t461;
t259 = -t403 * t316 - t438;
t258 = t406 * t316 - t445;
t257 = t406 * t308 - t461;
t256 = t403 * t308 + t460;
t255 = -pkin(6) * t323 + t437;
t254 = -pkin(6) * t322 + t444;
t250 = -pkin(3) * t323 + t266;
t249 = -pkin(3) * t322 + t265;
t248 = t407 * t272 + t428;
t247 = t407 * t270 - t428;
t246 = t405 * t289 + t408 * t291;
t245 = t405 * t288 + t408 * t290;
t244 = -t408 * t289 + t405 * t291;
t243 = -t408 * t288 + t405 * t290;
t235 = qJ(2) * t397 + qJ(3) * t238;
t234 = t406 * t278 - t403 * t279;
t233 = t406 * t277 - t403 * t281;
t232 = -t403 * t278 - t406 * t279;
t231 = t403 * t277 + t406 * t281;
t230 = -qJ(3) * t239 + t453 * t397;
t229 = t400 * t264 - t399 * t286;
t228 = -t399 * t264 - t400 * t286;
t227 = t407 * t263 + t277 * t404;
t226 = t407 * t262 - t404 * t281;
t225 = t407 * t259 + t279 * t404;
t224 = t404 * t259 - t279 * t407;
t220 = t407 * t257 - t404 * t278;
t219 = t404 * t257 + t407 * t278;
t218 = t407 * t234 - t404 * t317;
t217 = t400 * t248 - t399 * t271;
t216 = t400 * t247 - t399 * t269;
t215 = -t399 * t248 - t400 * t271;
t214 = -t399 * t247 - t400 * t269;
t213 = t407 * t233 - t404 * t294;
t212 = t404 * t233 + t407 * t294;
t211 = -pkin(7) * t258 + t439;
t210 = -qJ(3) * t314 + t400 * t222;
t209 = -qJ(3) * t315 - t399 * t222;
t208 = -pkin(7) * t256 + t446;
t205 = t400 * t223 + t399 * t274;
t204 = t399 * t223 - t400 * t274;
t203 = t400 * t227 - t399 * t261;
t202 = t400 * t226 - t399 * t260;
t201 = -t399 * t227 - t400 * t261;
t200 = -t399 * t226 - t400 * t260;
t199 = t400 * t225 + t399 * t258;
t198 = t399 * t225 - t400 * t258;
t195 = t400 * t220 + t399 * t256;
t194 = t399 * t220 - t400 * t256;
t193 = qJ(2) * t323 - qJ(3) * t289 - t399 * t250 + t400 * t255;
t192 = qJ(2) * t322 - qJ(3) * t288 - t399 * t249 + t400 * t254;
t191 = -pkin(4) * t258 + t207;
t190 = -pkin(4) * t256 + t206;
t189 = t400 * t218 - t399 * t232;
t188 = -t399 * t218 - t400 * t232;
t187 = -qJ(3) * t291 - t400 * t250 - t399 * t255 + t453 * t323;
t186 = -qJ(3) * t290 - t400 * t249 - t399 * t254 + t453 * t322;
t185 = t400 * t213 + t399 * t231;
t184 = t399 * t213 - t400 * t231;
t183 = -pkin(3) * t224 + pkin(4) * t279 - pkin(7) * t259 - t446;
t182 = -pkin(3) * t219 - pkin(4) * t278 - pkin(7) * t257 + t439;
t179 = t405 * t204 + t408 * t205;
t178 = -t408 * t204 + t405 * t205;
t177 = t405 * t198 + t408 * t199;
t176 = -t408 * t198 + t405 * t199;
t175 = t405 * t194 + t408 * t195;
t174 = -t408 * t194 + t405 * t195;
t173 = t407 * t181 + t404 * t252;
t172 = t404 * t181 - t407 * t252;
t171 = -pkin(7) * t231 - t180;
t170 = -pkin(6) * t224 - t404 * t191 + t407 * t211;
t169 = t405 * t184 + t408 * t185;
t168 = -t408 * t184 + t405 * t185;
t167 = -pkin(6) * t219 - t404 * t190 + t407 * t208;
t166 = -qJ(3) * t204 - (pkin(3) * t399 - pkin(6) * t400 + qJ(2)) * t222;
t165 = -pkin(3) * t212 - pkin(4) * t294 - pkin(7) * t233 - t181;
t164 = -qJ(3) * t205 - (pkin(3) * t400 + pkin(6) * t399 + t453) * t222;
t163 = -pkin(6) * t212 + t407 * t171 + t231 * t452;
t162 = t400 * t173 + t399 * t180;
t161 = t399 * t173 - t400 * t180;
t160 = -pkin(3) * t172 + pkin(4) * t252 - pkin(7) * t181;
t159 = -pkin(6) * t172 + (-pkin(7) * t407 + t452) * t180;
t158 = qJ(2) * t224 - qJ(3) * t198 + t400 * t170 - t399 * t183;
t157 = qJ(2) * t219 - qJ(3) * t194 + t400 * t167 - t399 * t182;
t156 = -qJ(3) * t199 - t399 * t170 - t400 * t183 + t453 * t224;
t155 = -qJ(3) * t195 - t399 * t167 - t400 * t182 + t453 * t219;
t154 = t405 * t161 + t408 * t162;
t153 = -t408 * t161 + t405 * t162;
t152 = qJ(2) * t212 - qJ(3) * t184 + t400 * t163 - t399 * t165;
t151 = -qJ(3) * t185 - t399 * t163 - t400 * t165 + t453 * t212;
t150 = qJ(2) * t172 - qJ(3) * t161 + t400 * t159 - t399 * t160;
t149 = -qJ(3) * t162 - t399 * t159 - t400 * t160 + t453 * t172;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t367, -t368, 0, t321, 0, 0, 0, 0, 0, 0, -t367, 0, t368, t293, 0, 0, 0, 0, 0, 0, -t310, t425, 0, -t457, 0, 0, 0, 0, 0, 0, t245, t246, t268, t179, 0, 0, 0, 0, 0, 0, t175, t177, t169, t154; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t368, -t367, 0, t320, 0, 0, 0, 0, 0, 0, t368, 0, t367, t292, 0, 0, 0, 0, 0, 0, t425, t310, 0, t196, 0, 0, 0, 0, 0, 0, t243, t244, t267, t178, 0, 0, 0, 0, 0, 0, t174, t176, t168, t153; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t397, 0, 0, 0, 0, 0, 0, -t322, -t323, 0, t222, 0, 0, 0, 0, 0, 0, -t219, -t224, -t212, -t172; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t368, 0, -t367, 0, -t345, -t346, -t320, -pkin(5) * t320, 0, t368, 0, 0, t367, 0, -t345, -t292, t346, -pkin(5) * t292 + (-pkin(1) * t405 + qJ(2) * t408) * g(3), 0, 0, -t425, 0, -t310, 0, t458, t462, t196, -pkin(5) * t196 - t405 * t230 + t408 * t235, -t405 * t303 + t408 * t305, -t405 * t284 + t408 * t285, -t405 * t299 + t408 * t301, -t405 * t302 + t408 * t304, -t405 * t298 + t408 * t300, -t405 * t330 + t408 * t331, -pkin(5) * t243 - t405 * t186 + t408 * t192, -pkin(5) * t244 - t405 * t187 + t408 * t193, -pkin(5) * t267 - t405 * t209 + t408 * t210, -pkin(5) * t178 - t405 * t164 + t408 * t166, -t405 * t215 + t408 * t217, -t405 * t188 + t408 * t189, -t405 * t200 + t408 * t202, -t405 * t214 + t408 * t216, -t405 * t201 + t408 * t203, -t405 * t228 + t408 * t229, -pkin(5) * t174 - t405 * t155 + t408 * t157, -pkin(5) * t176 - t405 * t156 + t408 * t158, -pkin(5) * t168 - t405 * t151 + t408 * t152, -pkin(5) * t153 - t405 * t149 + t408 * t150; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t367, 0, t368, 0, t346, -t345, t321, pkin(5) * t321, 0, t367, 0, 0, -t368, 0, t346, t293, t345, pkin(5) * t293 + (pkin(1) * t408 + qJ(2) * t405) * g(3), 0, 0, -t310, 0, t425, 0, t462, -t458, t457, -pkin(5) * t457 + t408 * t230 + t405 * t235, t408 * t303 + t405 * t305, t408 * t284 + t405 * t285, t408 * t299 + t405 * t301, t408 * t302 + t405 * t304, t408 * t298 + t405 * t300, t408 * t330 + t405 * t331, pkin(5) * t245 + t408 * t186 + t405 * t192, pkin(5) * t246 + t408 * t187 + t405 * t193, pkin(5) * t268 + t408 * t209 + t405 * t210, pkin(5) * t179 + t408 * t164 + t405 * t166, t408 * t215 + t405 * t217, t408 * t188 + t405 * t189, t408 * t200 + t405 * t202, t408 * t214 + t405 * t216, t408 * t201 + t405 * t203, t408 * t228 + t405 * t229, pkin(5) * t175 + t408 * t155 + t405 * t157, pkin(5) * t177 + t408 * t156 + t405 * t158, pkin(5) * t169 + t408 * t151 + t405 * t152, pkin(5) * t154 + t408 * t149 + t405 * t150; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t373, t374, 0, 0, 0, 0, 0, qJDD(1), 0, 0, t420 + 0.2e1 * t450, 0, 0.2e1 * t394 + t415, pkin(1) * t344 + qJ(2) * t343, 0, 0, 0, 0, 0, qJDD(1), -qJ(2) * t364 + t453 * t365 + t282, qJ(2) * t365 + t453 * t364 + t283, 0, qJ(2) * t239 + t238 * t453, t419 * t404, t407 * t360 - t404 * t362, -t407 * t375 - t443, t418 * t407, -t404 * t377 - t435, 0, -pkin(3) * t362 - pkin(6) * t325 + qJ(2) * t290 - t453 * t288 + t437, -pkin(3) * t360 - pkin(6) * t327 + qJ(2) * t291 - t453 * t289 - t444, -pkin(3) * t369 - pkin(6) * t366 + qJ(2) * t315 - t453 * t314 - t223, pkin(3) * t274 - pkin(6) * t223 + qJ(2) * t205 - t453 * t204, -t404 * t272 + t427, -t404 * t234 - t407 * t317, -t404 * t262 - t407 * t281, -t404 * t270 - t427, -t404 * t263 + t277 * t407, -t404 * t287 + t407 * t416, pkin(3) * t256 - pkin(6) * t220 + qJ(2) * t195 - t407 * t190 - t453 * t194 - t404 * t208, pkin(3) * t258 - pkin(6) * t225 + qJ(2) * t199 - t407 * t191 - t453 * t198 - t404 * t211, -pkin(6) * t213 + qJ(2) * t185 - t404 * t171 + (pkin(3) + t451) * t231 - t453 * t184, -pkin(6) * t173 + qJ(2) * t162 - t453 * t161 + (pkin(3) + t421) * t180;];
tauB_reg = t1;
