% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:59
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPRP6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRP6_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRP6_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRP6_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRP6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPRP6_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:58:37
% EndTime: 2019-12-31 19:58:47
% DurationCPUTime: 9.19s
% Computational Cost: add. (36270->552), mult. (83671->792), div. (0->0), fcn. (58022->8), ass. (0->408)
t650 = sin(qJ(4));
t647 = sin(pkin(8));
t648 = cos(pkin(8));
t654 = cos(qJ(2));
t704 = qJD(1) * t654;
t651 = sin(qJ(2));
t705 = qJD(1) * t651;
t608 = t647 * t704 + t648 * t705;
t653 = cos(qJ(4));
t582 = -t653 * qJD(2) + t650 * t608;
t584 = t650 * qJD(2) + t653 * t608;
t540 = t584 * t582;
t696 = qJD(1) * qJD(2);
t684 = t654 * t696;
t695 = t651 * qJDD(1);
t616 = t684 + t695;
t639 = t654 * qJDD(1);
t685 = t651 * t696;
t617 = t639 - t685;
t677 = t647 * t616 - t648 * t617;
t567 = qJDD(4) + t677;
t679 = -t567 + t540;
t723 = t650 * t679;
t714 = t653 * t679;
t751 = t679 * pkin(4);
t606 = t647 * t705 - t648 * t704;
t568 = t608 * t606;
t749 = qJDD(2) - t568;
t753 = t647 * t749;
t752 = t648 * t749;
t702 = qJD(2) * t608;
t541 = t677 + t702;
t602 = qJD(4) + t606;
t559 = t602 * t582;
t570 = t648 * t616 + t647 * t617;
t666 = t582 * qJD(4) - t650 * qJDD(2) - t653 * t570;
t750 = -t559 - t666;
t678 = -t653 * qJDD(2) + t650 * t570;
t493 = (qJD(4) - t602) * t584 + t678;
t645 = t654 ^ 2;
t657 = qJD(1) ^ 2;
t669 = qJD(2) * pkin(2) - qJ(3) * t705;
t652 = sin(qJ(1));
t655 = cos(qJ(1));
t626 = t652 * g(1) - t655 * g(2);
t670 = qJDD(1) * pkin(1) + t626;
t538 = t617 * pkin(2) + (qJ(3) * t645 + pkin(6)) * t657 - t669 * t705 - qJDD(3) + t670;
t580 = t582 ^ 2;
t581 = t584 ^ 2;
t601 = t602 ^ 2;
t604 = t606 ^ 2;
t605 = t608 ^ 2;
t513 = -t601 - t580;
t463 = t650 * t513 - t714;
t748 = pkin(3) * t463;
t525 = -t581 - t601;
t506 = t540 + t567;
t724 = t650 * t506;
t469 = t653 * t525 - t724;
t747 = pkin(3) * t469;
t746 = pkin(3) * t647;
t497 = -t559 + t666;
t441 = -t493 * t653 - t650 * t497;
t512 = -t580 - t581;
t417 = t647 * t441 - t648 * t512;
t418 = t648 * t441 + t647 * t512;
t369 = -t651 * t417 + t654 * t418;
t439 = -t493 * t650 + t653 * t497;
t344 = t652 * t369 - t655 * t439;
t745 = pkin(5) * t344;
t464 = t653 * t513 + t723;
t492 = (qJD(4) + t602) * t584 + t678;
t426 = t647 * t464 - t648 * t492;
t427 = t648 * t464 + t647 * t492;
t379 = -t651 * t426 + t654 * t427;
t355 = t652 * t379 - t655 * t463;
t744 = pkin(5) * t355;
t715 = t653 * t506;
t470 = -t650 * t525 - t715;
t431 = t647 * t470 - t648 * t750;
t432 = t648 * t470 + t647 * t750;
t382 = -t651 * t431 + t654 * t432;
t360 = t652 * t382 - t655 * t469;
t743 = pkin(5) * t360;
t368 = t654 * t417 + t651 * t418;
t742 = pkin(6) * t368;
t378 = t654 * t426 + t651 * t427;
t741 = pkin(6) * t378;
t381 = t654 * t431 + t651 * t432;
t740 = pkin(6) * t381;
t739 = pkin(7) * t439;
t738 = pkin(7) * t463;
t737 = pkin(7) * t469;
t736 = qJ(3) * t417;
t735 = qJ(3) * t426;
t734 = qJ(3) * t431;
t733 = t602 * t650;
t732 = t602 * t653;
t644 = t651 ^ 2;
t731 = t644 * t657;
t642 = t645 * t657;
t730 = t647 * t538;
t564 = qJDD(2) + t568;
t729 = t647 * t564;
t728 = t648 * t538;
t727 = t648 * t564;
t627 = t655 * g(1) + t652 * g(2);
t662 = -t657 * pkin(1) + qJDD(1) * pkin(6) - t627;
t592 = -t651 * g(3) + t654 * t662;
t533 = -pkin(2) * t642 + t617 * qJ(3) - qJD(2) * t669 + t592;
t660 = t651 * t662;
t718 = t651 * t657;
t658 = -t660 - t616 * qJ(3) + qJDD(2) * pkin(2) + (pkin(2) * t718 + qJ(3) * t696 - g(3)) * t654;
t473 = -0.2e1 * qJD(3) * t606 + t648 * t533 + t647 * t658;
t561 = t606 * pkin(3) - t608 * pkin(7);
t656 = qJD(2) ^ 2;
t451 = -t656 * pkin(3) + qJDD(2) * pkin(7) - t606 * t561 + t473;
t703 = qJD(2) * t606;
t675 = -t570 + t703;
t467 = t541 * pkin(3) + t675 * pkin(7) - t538;
t707 = -t650 * t451 + t653 * t467;
t687 = -qJ(5) * t666 - t707;
t668 = -qJ(5) * t559 - t687;
t698 = qJD(5) * t584;
t372 = t668 - 0.2e1 * t698 - t751;
t726 = t650 * t372;
t680 = t647 * t533 - t648 * t658;
t671 = -qJDD(2) * pkin(3) - t656 * pkin(7) + t680;
t676 = (0.2e1 * qJD(3) + t561) * t608;
t450 = t676 + t671;
t725 = t650 * t450;
t699 = qJD(3) * t608;
t472 = t680 + 0.2e1 * t699;
t421 = -t648 * t472 + t647 * t473;
t722 = t651 * t421;
t610 = t657 * pkin(6) + t670;
t721 = t651 * t610;
t635 = t654 * t718;
t624 = qJDD(2) + t635;
t720 = t651 * t624;
t625 = qJDD(2) - t635;
t719 = t651 * t625;
t717 = t653 * t372;
t716 = t653 * t450;
t713 = t654 * t421;
t712 = t654 * t610;
t711 = t654 * t625;
t710 = -pkin(1) * t439 + pkin(6) * t369;
t709 = -pkin(1) * t463 + pkin(6) * t379;
t708 = -pkin(1) * t469 + pkin(6) * t382;
t406 = t653 * t451 + t650 * t467;
t706 = t644 + t645;
t701 = qJD(2) * t647;
t700 = qJD(2) * t648;
t694 = t652 * qJDD(1);
t693 = t655 * qJDD(1);
t692 = t655 * qJDD(2);
t691 = t647 * t540;
t690 = t648 * t540;
t689 = t652 * t568;
t688 = t655 * t568;
t686 = -pkin(3) * t648 - pkin(2);
t683 = -pkin(2) * t463 + qJ(3) * t427;
t682 = -pkin(2) * t469 + qJ(3) * t432;
t422 = t647 * t472 + t648 * t473;
t591 = t654 * g(3) + t660;
t536 = t651 * t591 + t654 * t592;
t579 = -t652 * t626 - t655 * t627;
t674 = t652 * t635;
t673 = t655 * t635;
t621 = -t652 * t657 + t693;
t672 = -pkin(5) * t621 - t652 * g(3);
t357 = t650 * t406 + t653 * t707;
t358 = t653 * t406 - t650 * t707;
t535 = t654 * t591 - t651 * t592;
t578 = t655 * t626 - t652 * t627;
t543 = -t677 + t702;
t517 = -t584 * qJD(4) - t678;
t548 = t602 * pkin(4) - t584 * qJ(5);
t667 = t517 * qJ(5) - 0.2e1 * qJD(5) * t582 - t602 * t548 + t406;
t665 = -pkin(1) * t368 - pkin(2) * t417 + pkin(3) * t512 - pkin(7) * t441;
t664 = -pkin(1) * t378 - pkin(2) * t426 + pkin(3) * t492 - pkin(7) * t464;
t663 = -pkin(1) * t381 - pkin(2) * t431 + pkin(3) * t750 - pkin(7) * t470;
t659 = -t517 * pkin(4) - t580 * qJ(5) + t584 * t548 + qJDD(5) + t671;
t403 = t676 + t659;
t637 = t652 * qJDD(2);
t634 = -t642 - t656;
t633 = t642 - t656;
t632 = -t656 - t731;
t631 = t656 - t731;
t623 = t642 - t731;
t622 = t642 + t731;
t620 = t655 * t657 + t694;
t619 = t706 * qJDD(1);
t618 = t639 - 0.2e1 * t685;
t615 = 0.2e1 * t684 + t695;
t613 = t654 * t624;
t612 = t706 * t696;
t603 = -pkin(5) * t620 + t655 * g(3);
t597 = -t605 - t656;
t596 = -t605 + t656;
t595 = t604 - t656;
t594 = t654 * t616 - t644 * t696;
t593 = -t651 * t617 - t645 * t696;
t590 = -t651 * t632 - t711;
t589 = -t651 * t631 + t613;
t588 = t654 * t634 - t720;
t587 = t654 * t633 - t719;
t586 = t654 * t632 - t719;
t585 = t651 * t634 + t613;
t575 = 0.2e1 * t698;
t573 = t655 * t619 - t652 * t622;
t572 = t652 * t619 + t655 * t622;
t571 = -t651 * t615 + t654 * t618;
t566 = t604 - t605;
t562 = -t656 - t604;
t558 = (-t606 * t648 + t608 * t647) * qJD(2);
t557 = (-t606 * t647 - t608 * t648) * qJD(2);
t556 = t655 * t590 + t652 * t615;
t555 = t655 * t588 - t652 * t618;
t554 = t652 * t590 - t655 * t615;
t553 = t652 * t588 + t655 * t618;
t552 = -t581 + t601;
t551 = t580 - t601;
t550 = -pkin(6) * t586 - t712;
t549 = -pkin(6) * t585 - t721;
t547 = -pkin(1) * t586 + t592;
t546 = -pkin(1) * t585 + t591;
t545 = -t570 - t703;
t539 = -t604 - t605;
t537 = -t581 + t580;
t532 = t648 * t570 - t608 * t701;
t531 = t647 * t570 + t608 * t700;
t530 = t606 * t700 + t647 * t677;
t529 = t606 * t701 - t648 * t677;
t524 = -t647 * t597 - t727;
t523 = -t647 * t596 + t752;
t522 = t648 * t595 - t729;
t521 = t648 * t597 - t729;
t520 = t648 * t596 + t753;
t519 = t647 * t595 + t727;
t511 = t655 * t536 - t652 * t610;
t510 = t652 * t536 + t655 * t610;
t509 = t648 * t562 - t753;
t508 = t647 * t562 + t752;
t504 = (-t582 * t653 + t584 * t650) * t602;
t503 = (t582 * t650 + t584 * t653) * t602;
t502 = -t651 * t557 + t654 * t558;
t501 = t648 * t543 - t647 * t545;
t500 = -t648 * t541 + t647 * t675;
t499 = t647 * t543 + t648 * t545;
t498 = -t647 * t541 - t648 * t675;
t491 = -t584 * t733 - t653 * t666;
t490 = -t584 * t732 + t650 * t666;
t489 = -t650 * t517 + t582 * t732;
t488 = -t653 * t517 - t582 * t733;
t487 = -qJ(3) * t521 - t728;
t486 = -t651 * t531 + t654 * t532;
t485 = -t651 * t529 + t654 * t530;
t484 = -t651 * t521 + t654 * t524;
t483 = -t651 * t520 + t654 * t523;
t482 = -t651 * t519 + t654 * t522;
t481 = t654 * t521 + t651 * t524;
t480 = t648 * t504 + t647 * t567;
t479 = t647 * t504 - t648 * t567;
t478 = t653 * t551 - t724;
t477 = -t650 * t552 - t714;
t476 = -t650 * t551 - t715;
t475 = -t653 * t552 + t723;
t474 = -qJ(3) * t508 - t730;
t461 = -t651 * t508 + t654 * t509;
t460 = t654 * t508 + t651 * t509;
t459 = pkin(2) * t675 + qJ(3) * t524 - t730;
t458 = t648 * t491 + t691;
t457 = t648 * t489 - t691;
t456 = t647 * t491 - t690;
t455 = t647 * t489 + t690;
t454 = -pkin(2) * t541 + qJ(3) * t509 + t728;
t453 = t655 * t484 - t652 * t675;
t452 = t652 * t484 + t655 * t675;
t449 = -pkin(4) * t750 - qJ(5) * t506;
t446 = t655 * t461 + t652 * t541;
t445 = -t651 * t499 + t654 * t501;
t444 = -t651 * t498 + t654 * t500;
t443 = t652 * t461 - t655 * t541;
t442 = t654 * t499 + t651 * t501;
t440 = -t653 * t492 - t650 * t750;
t438 = t650 * t492 - t653 * t750;
t436 = t648 * t478 - t647 * t493;
t435 = t648 * t477 - t647 * t497;
t434 = t647 * t478 + t648 * t493;
t433 = t647 * t477 + t648 * t497;
t429 = -t651 * t479 + t654 * t480;
t428 = t654 * t479 + t651 * t480;
t425 = t655 * t445 + t652 * t539;
t424 = t652 * t445 - t655 * t539;
t420 = t648 * t440 - t647 * t537;
t419 = t647 * t440 + t648 * t537;
t416 = qJ(3) * t418;
t415 = -pkin(1) * t442 - pkin(2) * t499;
t414 = -pkin(1) * t481 - pkin(2) * t521 + t473;
t413 = pkin(2) * t538 + qJ(3) * t422;
t412 = -pkin(3) * t439 - pkin(4) * t497;
t411 = t716 - t737;
t410 = -t651 * t456 + t654 * t458;
t409 = -t651 * t455 + t654 * t457;
t408 = t654 * t456 + t651 * t458;
t407 = t654 * t455 + t651 * t457;
t404 = t725 - t738;
t402 = t655 * t429 - t652 * t503;
t401 = t652 * t429 + t655 * t503;
t400 = -pkin(1) * t460 - pkin(2) * t508 + t472;
t399 = -qJ(3) * t499 - t421;
t398 = -qJ(5) * t525 + t403;
t397 = -pkin(6) * t481 - t651 * t459 + t654 * t487;
t396 = -pkin(2) * t539 + qJ(3) * t501 + t422;
t395 = t655 * t410 - t652 * t490;
t394 = t655 * t409 - t652 * t488;
t393 = t652 * t410 + t655 * t490;
t392 = t652 * t409 + t655 * t488;
t391 = -pkin(6) * t460 - t651 * t454 + t654 * t474;
t390 = t406 - t747;
t389 = -t651 * t434 + t654 * t436;
t388 = -t651 * t433 + t654 * t435;
t387 = t654 * t434 + t651 * t436;
t386 = t654 * t433 + t651 * t435;
t385 = -t707 - t748;
t384 = -t580 * pkin(4) + t667;
t383 = -pkin(4) * t492 + qJ(5) * t513 - t608 * t561 - t659 - 0.2e1 * t699;
t376 = t654 * t422 - t722;
t375 = t651 * t422 + t713;
t374 = -t651 * t419 + t654 * t420;
t373 = t654 * t419 + t651 * t420;
t371 = t655 * t376 - t652 * t538;
t370 = t652 * t376 + t655 * t538;
t366 = t655 * t389 - t652 * t476;
t365 = t655 * t388 - t652 * t475;
t364 = t652 * t389 + t655 * t476;
t363 = t652 * t388 + t655 * t475;
t362 = t575 + (-t497 + t559) * qJ(5) + t751 + t687;
t361 = t655 * t382 + t652 * t469;
t359 = pkin(5) * t361;
t356 = t655 * t379 + t652 * t463;
t354 = pkin(5) * t356;
t353 = -qJ(5) * t493 + (-t512 - t580) * pkin(4) + t667;
t352 = -t747 + (-t525 - t580) * pkin(4) + t667;
t351 = t653 * t398 - t650 * t449 - t737;
t350 = qJ(5) * t714 - t650 * t383 - t738;
t349 = t655 * t374 - t652 * t438;
t348 = t652 * t374 + t655 * t438;
t347 = t575 - t668 - t748 + 0.2e1 * t751;
t346 = -pkin(1) * t375 - pkin(2) * t421;
t345 = t655 * t369 + t652 * t439;
t343 = pkin(5) * t345;
t342 = -pkin(4) * t403 + qJ(5) * t384;
t341 = t648 * t358 + t647 * t450;
t340 = t647 * t358 - t648 * t450;
t339 = -t357 - t739;
t338 = -pkin(6) * t442 - t651 * t396 + t654 * t399;
t337 = t653 * t384 - t726;
t336 = t650 * t384 + t717;
t335 = -t647 * t390 + t648 * t411 - t734;
t334 = -t647 * t385 + t648 * t404 - t735;
t333 = -pkin(6) * t375 - qJ(3) * t713 - t651 * t413;
t332 = t663 - t725;
t331 = t648 * t390 + t647 * t411 + t682;
t330 = t664 + t716;
t329 = t648 * t385 + t647 * t404 + t683;
t328 = t648 * t339 + t439 * t746 - t736;
t327 = t648 * t337 + t647 * t403;
t326 = t647 * t337 - t648 * t403;
t325 = -t650 * t353 + t653 * t362 - t739;
t324 = -pkin(3) * t336 - pkin(4) * t372;
t323 = -t650 * t398 - t653 * t449 + t663;
t322 = t647 * t339 + t686 * t439 + t416;
t321 = -qJ(5) * t723 - t653 * t383 + t664;
t320 = t648 * t351 - t647 * t352 - t734;
t319 = -t651 * t340 + t654 * t341;
t318 = t654 * t340 + t651 * t341;
t317 = -t647 * t347 + t648 * t350 - t735;
t316 = -t358 + t665;
t315 = t647 * t351 + t648 * t352 + t682;
t314 = t648 * t347 + t647 * t350 + t683;
t313 = t648 * t325 - t647 * t412 - t736;
t312 = -qJ(3) * t340 + (-pkin(7) * t648 + t746) * t357;
t311 = -pkin(2) * t439 + t647 * t325 + t648 * t412 + t416;
t310 = t655 * t319 + t652 * t357;
t309 = t652 * t319 - t655 * t357;
t308 = -pkin(7) * t336 - qJ(5) * t717 - t650 * t342;
t307 = -t653 * t353 - t650 * t362 + t665;
t306 = -t651 * t331 + t654 * t335 - t740;
t305 = -t651 * t326 + t654 * t327;
t304 = t654 * t326 + t651 * t327;
t303 = -t651 * t329 + t654 * t334 - t741;
t302 = qJ(3) * t341 + (-pkin(7) * t647 + t686) * t357;
t301 = -pkin(1) * t318 - pkin(2) * t340 + pkin(3) * t450 - pkin(7) * t358;
t300 = -t651 * t322 + t654 * t328 - t742;
t299 = t655 * t305 + t652 * t336;
t298 = t652 * t305 - t655 * t336;
t297 = -t651 * t315 + t654 * t320 - t740;
t296 = -t651 * t314 + t654 * t317 - t741;
t295 = -t651 * t311 + t654 * t313 - t742;
t294 = -qJ(3) * t326 + t648 * t308 - t647 * t324;
t293 = -pkin(2) * t336 + qJ(3) * t327 + t647 * t308 + t648 * t324;
t292 = -pkin(6) * t318 - t651 * t302 + t654 * t312;
t291 = -pkin(1) * t304 - pkin(2) * t326 + pkin(3) * t403 - pkin(7) * t337 + qJ(5) * t726 - t653 * t342;
t290 = -pkin(6) * t304 - t651 * t293 + t654 * t294;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t620, -t621, 0, t579, 0, 0, 0, 0, 0, 0, t555, t556, t573, t511, 0, 0, 0, 0, 0, 0, t446, t453, t425, t371, 0, 0, 0, 0, 0, 0, t356, t361, t345, t310, 0, 0, 0, 0, 0, 0, t356, t361, t345, t299; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t621, -t620, 0, t578, 0, 0, 0, 0, 0, 0, t553, t554, t572, t510, 0, 0, 0, 0, 0, 0, t443, t452, t424, t370, 0, 0, 0, 0, 0, 0, t355, t360, t344, t309, 0, 0, 0, 0, 0, 0, t355, t360, t344, t298; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t585, t586, 0, -t535, 0, 0, 0, 0, 0, 0, t460, t481, t442, t375, 0, 0, 0, 0, 0, 0, t378, t381, t368, t318, 0, 0, 0, 0, 0, 0, t378, t381, t368, t304; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t621, 0, -t620, 0, t672, -t603, -t578, -pkin(5) * t578, t655 * t594 - t674, t655 * t571 - t652 * t623, t655 * t589 + t651 * t694, t655 * t593 + t674, t655 * t587 + t639 * t652, t655 * t612 + t637, -pkin(5) * t553 - t652 * t546 + t655 * t549, -pkin(5) * t554 - t652 * t547 + t655 * t550, -pkin(5) * t572 + t655 * t535, -pkin(5) * t510 - (pkin(1) * t652 - pkin(6) * t655) * t535, t655 * t486 + t689, t655 * t444 - t652 * t566, t655 * t483 - t652 * t545, t655 * t485 - t689, t655 * t482 + t543 * t652, t655 * t502 + t637, -pkin(5) * t443 + t655 * t391 - t652 * t400, -pkin(5) * t452 + t655 * t397 - t652 * t414, -pkin(5) * t424 + t655 * t338 - t652 * t415, -pkin(5) * t370 + t655 * t333 - t652 * t346, t395, t349, t365, t394, t366, t402, t655 * t303 - t652 * t330 - t744, t655 * t306 - t652 * t332 - t743, t655 * t300 - t652 * t316 - t745, -pkin(5) * t309 + t655 * t292 - t652 * t301, t395, t349, t365, t394, t366, t402, t655 * t296 - t652 * t321 - t744, t655 * t297 - t652 * t323 - t743, t655 * t295 - t652 * t307 - t745, -pkin(5) * t298 + t655 * t290 - t652 * t291; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t620, 0, t621, 0, t603, t672, t579, pkin(5) * t579, t652 * t594 + t673, t652 * t571 + t655 * t623, t652 * t589 - t651 * t693, t652 * t593 - t673, t652 * t587 - t654 * t693, t652 * t612 - t692, pkin(5) * t555 + t655 * t546 + t652 * t549, pkin(5) * t556 + t655 * t547 + t652 * t550, pkin(5) * t573 + t652 * t535, pkin(5) * t511 - (-pkin(1) * t655 - pkin(6) * t652) * t535, t652 * t486 - t688, t652 * t444 + t655 * t566, t652 * t483 + t655 * t545, t652 * t485 + t688, t652 * t482 - t543 * t655, t652 * t502 - t692, pkin(5) * t446 + t652 * t391 + t655 * t400, pkin(5) * t453 + t652 * t397 + t655 * t414, pkin(5) * t425 + t652 * t338 + t655 * t415, pkin(5) * t371 + t652 * t333 + t655 * t346, t393, t348, t363, t392, t364, t401, t652 * t303 + t655 * t330 + t354, t652 * t306 + t655 * t332 + t359, t652 * t300 + t655 * t316 + t343, pkin(5) * t310 + t652 * t292 + t655 * t301, t393, t348, t363, t392, t364, t401, t652 * t296 + t655 * t321 + t354, t652 * t297 + t655 * t323 + t359, t652 * t295 + t655 * t307 + t343, pkin(5) * t299 + t652 * t290 + t655 * t291; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t626, t627, 0, 0, (t616 + t684) * t651, t654 * t615 + t651 * t618, t654 * t631 + t720, (t617 - t685) * t654, t651 * t633 + t711, 0, pkin(1) * t618 + pkin(6) * t588 + t712, -pkin(1) * t615 + pkin(6) * t590 - t721, pkin(1) * t622 + pkin(6) * t619 + t536, pkin(1) * t610 + pkin(6) * t536, t654 * t531 + t651 * t532, t654 * t498 + t651 * t500, t654 * t520 + t651 * t523, t654 * t529 + t651 * t530, t654 * t519 + t651 * t522, t654 * t557 + t651 * t558, -pkin(1) * t541 + pkin(6) * t461 + t654 * t454 + t651 * t474, pkin(1) * t675 + pkin(6) * t484 + t654 * t459 + t651 * t487, -pkin(1) * t539 + pkin(6) * t445 + t654 * t396 + t651 * t399, pkin(1) * t538 + pkin(6) * t376 - qJ(3) * t722 + t654 * t413, t408, t373, t386, t407, t387, t428, t654 * t329 + t651 * t334 + t709, t654 * t331 + t651 * t335 + t708, t654 * t322 + t651 * t328 + t710, -pkin(1) * t357 + pkin(6) * t319 + t654 * t302 + t651 * t312, t408, t373, t386, t407, t387, t428, t654 * t314 + t651 * t317 + t709, t654 * t315 + t651 * t320 + t708, t654 * t311 + t651 * t313 + t710, -pkin(1) * t336 + pkin(6) * t305 + t654 * t293 + t651 * t294;];
tauB_reg = t1;
