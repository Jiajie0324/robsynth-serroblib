% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPRP6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:59
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPRP6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRP6_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRP6_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRP6_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRP6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5RRPRP6_invdynf_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:59:01
% EndTime: 2019-12-31 19:59:03
% DurationCPUTime: 2.43s
% Computational Cost: add. (10504->208), mult. (24359->274), div. (0->0), fcn. (17022->8), ass. (0->160)
t1416 = sin(pkin(8));
t1417 = cos(pkin(8));
t1423 = cos(qJ(2));
t1452 = qJD(1) * t1423;
t1420 = sin(qJ(2));
t1453 = qJD(1) * t1420;
t1384 = t1416 * t1453 - t1417 * t1452;
t1383 = qJD(4) + t1384;
t1461 = qJD(4) + t1383;
t1410 = t1423 * qJDD(1);
t1442 = qJD(2) * t1453;
t1392 = t1410 - t1442;
t1414 = t1423 ^ 2;
t1426 = qJD(1) ^ 2;
t1432 = qJD(2) * pkin(2) - qJ(3) * t1453;
t1421 = sin(qJ(1));
t1424 = cos(qJ(1));
t1400 = t1421 * g(1) - t1424 * g(2);
t1433 = qJDD(1) * pkin(1) + t1400;
t1356 = t1392 * pkin(2) + (t1414 * qJ(3) + pkin(6)) * t1426 - t1432 * t1453 - qJDD(3) + t1433;
t1386 = t1416 * t1452 + t1417 * t1453;
t1419 = sin(qJ(4));
t1422 = cos(qJ(4));
t1370 = -t1422 * qJD(2) + t1419 * t1386;
t1460 = t1370 ^ 2;
t1372 = t1419 * qJD(2) + t1422 * t1386;
t1459 = t1372 ^ 2;
t1458 = t1383 ^ 2;
t1457 = t1384 ^ 2;
t1456 = t1386 ^ 2;
t1455 = -2 * qJD(3);
t1454 = -2 * qJD(5);
t1451 = qJD(2) * t1384;
t1450 = qJD(2) * t1386;
t1449 = t1372 * t1370;
t1448 = t1386 * t1384;
t1447 = t1414 * t1426;
t1446 = t1420 * t1426;
t1445 = qJD(4) - t1383;
t1401 = -t1424 * g(1) - t1421 * g(2);
t1430 = -t1426 * pkin(1) + qJDD(1) * pkin(6) + t1401;
t1378 = -t1420 * g(3) + t1423 * t1430;
t1353 = -pkin(2) * t1447 + t1392 * qJ(3) - qJD(2) * t1432 + t1378;
t1441 = qJD(2) * t1452;
t1443 = t1420 * qJDD(1);
t1391 = t1441 + t1443;
t1428 = t1420 * t1430;
t1427 = -t1428 - t1391 * qJ(3) + qJDD(2) * pkin(2) + (qJD(2) * qJ(3) * qJD(1) + pkin(2) * t1446 - g(3)) * t1423;
t1331 = t1417 * t1353 + t1384 * t1455 + t1416 * t1427;
t1364 = t1384 * pkin(3) - t1386 * pkin(7);
t1425 = qJD(2) ^ 2;
t1320 = -t1425 * pkin(3) + qJDD(2) * pkin(7) - t1384 * t1364 + t1331;
t1436 = t1416 * t1391 - t1417 * t1392;
t1358 = t1436 + t1450;
t1368 = t1417 * t1391 + t1416 * t1392;
t1439 = -t1368 + t1451;
t1327 = t1358 * pkin(3) + t1439 * pkin(7) - t1356;
t1305 = t1422 * t1320 + t1419 * t1327;
t1413 = t1420 ^ 2;
t1444 = t1413 + t1414;
t1304 = -t1419 * t1320 + t1422 * t1327;
t1438 = t1416 * t1353 - t1417 * t1427;
t1437 = -t1422 * qJDD(2) + t1419 * t1368;
t1435 = -qJDD(4) - t1436;
t1434 = -t1419 * qJDD(2) - t1422 * t1368;
t1431 = -t1372 * qJD(4) - t1437;
t1340 = -t1435 - t1449;
t1337 = t1445 * t1370 + t1434;
t1319 = -qJDD(2) * pkin(3) - t1425 * pkin(7) + ((2 * qJD(3)) + t1364) * t1386 + t1438;
t1407 = t1423 * t1446;
t1406 = -t1425 - t1447;
t1405 = -t1413 * t1426 - t1425;
t1399 = -qJDD(2) + t1407;
t1398 = qJDD(2) + t1407;
t1397 = t1444 * t1426;
t1396 = -t1421 * qJDD(1) - t1424 * t1426;
t1395 = t1424 * qJDD(1) - t1421 * t1426;
t1394 = t1444 * qJDD(1);
t1393 = t1410 - 0.2e1 * t1442;
t1390 = 0.2e1 * t1441 + t1443;
t1388 = t1426 * pkin(6) + t1433;
t1379 = -t1425 - t1456;
t1377 = -t1423 * g(3) - t1428;
t1376 = t1423 * t1399 - t1420 * t1405;
t1375 = -t1420 * t1398 + t1423 * t1406;
t1374 = t1420 * t1399 + t1423 * t1405;
t1373 = t1423 * t1398 + t1420 * t1406;
t1367 = -qJDD(2) - t1448;
t1366 = qJDD(2) - t1448;
t1365 = -t1425 - t1457;
t1362 = t1383 * pkin(4) - t1372 * qJ(5);
t1361 = -t1368 - t1451;
t1359 = -t1436 + t1450;
t1357 = -t1456 - t1457;
t1355 = -t1420 * t1377 + t1423 * t1378;
t1354 = t1423 * t1377 + t1420 * t1378;
t1349 = -t1458 - t1459;
t1348 = t1417 * t1367 - t1416 * t1379;
t1347 = t1416 * t1367 + t1417 * t1379;
t1345 = -t1458 - t1460;
t1344 = -t1459 - t1460;
t1343 = t1417 * t1365 - t1416 * t1366;
t1342 = t1416 * t1365 + t1417 * t1366;
t1341 = t1435 - t1449;
t1339 = t1417 * t1359 - t1416 * t1361;
t1338 = t1416 * t1359 + t1417 * t1361;
t1336 = -t1461 * t1370 - t1434;
t1335 = -t1445 * t1372 - t1437;
t1334 = t1461 * t1372 + t1437;
t1333 = -t1420 * t1347 + t1423 * t1348;
t1332 = t1423 * t1347 + t1420 * t1348;
t1330 = t1386 * t1455 - t1438;
t1329 = t1422 * t1341 - t1419 * t1349;
t1328 = t1419 * t1341 + t1422 * t1349;
t1324 = -t1419 * t1340 + t1422 * t1345;
t1323 = t1422 * t1340 + t1419 * t1345;
t1322 = -t1420 * t1342 + t1423 * t1343;
t1321 = t1423 * t1342 + t1420 * t1343;
t1317 = -t1420 * t1338 + t1423 * t1339;
t1316 = t1423 * t1338 + t1420 * t1339;
t1315 = t1422 * t1335 - t1419 * t1337;
t1314 = t1419 * t1335 + t1422 * t1337;
t1313 = t1417 * t1329 + t1416 * t1336;
t1312 = t1416 * t1329 - t1417 * t1336;
t1311 = t1417 * t1324 + t1416 * t1334;
t1310 = t1416 * t1324 - t1417 * t1334;
t1309 = -t1416 * t1330 + t1417 * t1331;
t1308 = t1417 * t1330 + t1416 * t1331;
t1307 = t1417 * t1315 + t1416 * t1344;
t1306 = t1416 * t1315 - t1417 * t1344;
t1303 = -t1431 * pkin(4) - t1460 * qJ(5) + t1372 * t1362 + qJDD(5) + t1319;
t1302 = -t1383 * t1362 + t1431 * qJ(5) + (-pkin(4) * t1370 + t1454) * t1370 + t1305;
t1301 = -t1420 * t1312 + t1423 * t1313;
t1300 = t1423 * t1312 + t1420 * t1313;
t1299 = -t1420 * t1310 + t1423 * t1311;
t1298 = t1423 * t1310 + t1420 * t1311;
t1297 = -t1420 * t1308 + t1423 * t1309;
t1296 = t1423 * t1308 + t1420 * t1309;
t1295 = t1340 * pkin(4) + t1337 * qJ(5) + t1372 * t1454 + t1304;
t1294 = -t1420 * t1306 + t1423 * t1307;
t1293 = t1423 * t1306 + t1420 * t1307;
t1292 = t1424 * t1301 + t1421 * t1328;
t1291 = t1421 * t1301 - t1424 * t1328;
t1290 = -t1419 * t1304 + t1422 * t1305;
t1289 = t1422 * t1304 + t1419 * t1305;
t1288 = t1424 * t1299 + t1421 * t1323;
t1287 = t1421 * t1299 - t1424 * t1323;
t1286 = t1424 * t1294 + t1421 * t1314;
t1285 = t1421 * t1294 - t1424 * t1314;
t1284 = t1417 * t1290 + t1416 * t1319;
t1283 = t1416 * t1290 - t1417 * t1319;
t1282 = -t1419 * t1295 + t1422 * t1302;
t1281 = t1422 * t1295 + t1419 * t1302;
t1280 = t1417 * t1282 + t1416 * t1303;
t1279 = t1416 * t1282 - t1417 * t1303;
t1278 = -t1420 * t1283 + t1423 * t1284;
t1277 = t1423 * t1283 + t1420 * t1284;
t1276 = -t1420 * t1279 + t1423 * t1280;
t1275 = t1423 * t1279 + t1420 * t1280;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1396, -t1395, 0, -t1421 * t1400 + t1424 * t1401, 0, 0, 0, 0, 0, 0, t1424 * t1375 - t1421 * t1393, t1424 * t1376 + t1421 * t1390, t1424 * t1394 - t1421 * t1397, t1424 * t1355 - t1421 * t1388, 0, 0, 0, 0, 0, 0, t1424 * t1322 + t1421 * t1358, t1424 * t1333 - t1421 * t1439, t1424 * t1317 + t1421 * t1357, t1424 * t1297 - t1421 * t1356, 0, 0, 0, 0, 0, 0, t1288, t1292, t1286, t1424 * t1278 + t1421 * t1289, 0, 0, 0, 0, 0, 0, t1288, t1292, t1286, t1424 * t1276 + t1421 * t1281; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1395, t1396, 0, t1424 * t1400 + t1421 * t1401, 0, 0, 0, 0, 0, 0, t1421 * t1375 + t1424 * t1393, t1421 * t1376 - t1424 * t1390, t1421 * t1394 + t1424 * t1397, t1421 * t1355 + t1424 * t1388, 0, 0, 0, 0, 0, 0, t1421 * t1322 - t1424 * t1358, t1421 * t1333 + t1424 * t1439, t1421 * t1317 - t1424 * t1357, t1421 * t1297 + t1424 * t1356, 0, 0, 0, 0, 0, 0, t1287, t1291, t1285, t1421 * t1278 - t1424 * t1289, 0, 0, 0, 0, 0, 0, t1287, t1291, t1285, t1421 * t1276 - t1424 * t1281; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1373, t1374, 0, t1354, 0, 0, 0, 0, 0, 0, t1321, t1332, t1316, t1296, 0, 0, 0, 0, 0, 0, t1298, t1300, t1293, t1277, 0, 0, 0, 0, 0, 0, t1298, t1300, t1293, t1275; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1426, -qJDD(1), 0, t1401, 0, 0, 0, 0, 0, 0, t1375, t1376, t1394, t1355, 0, 0, 0, 0, 0, 0, t1322, t1333, t1317, t1297, 0, 0, 0, 0, 0, 0, t1299, t1301, t1294, t1278, 0, 0, 0, 0, 0, 0, t1299, t1301, t1294, t1276; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1426, 0, t1400, 0, 0, 0, 0, 0, 0, t1393, -t1390, t1397, t1388, 0, 0, 0, 0, 0, 0, -t1358, t1439, -t1357, t1356, 0, 0, 0, 0, 0, 0, -t1323, -t1328, -t1314, -t1289, 0, 0, 0, 0, 0, 0, -t1323, -t1328, -t1314, -t1281; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1373, t1374, 0, t1354, 0, 0, 0, 0, 0, 0, t1321, t1332, t1316, t1296, 0, 0, 0, 0, 0, 0, t1298, t1300, t1293, t1277, 0, 0, 0, 0, 0, 0, t1298, t1300, t1293, t1275; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1406, t1399, t1410, t1378, 0, 0, 0, 0, 0, 0, t1343, t1348, t1339, t1309, 0, 0, 0, 0, 0, 0, t1311, t1313, t1307, t1284, 0, 0, 0, 0, 0, 0, t1311, t1313, t1307, t1280; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1398, t1405, -t1443, t1377, 0, 0, 0, 0, 0, 0, t1342, t1347, t1338, t1308, 0, 0, 0, 0, 0, 0, t1310, t1312, t1306, t1283, 0, 0, 0, 0, 0, 0, t1310, t1312, t1306, t1279; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1393, t1390, -t1397, -t1388, 0, 0, 0, 0, 0, 0, t1358, -t1439, t1357, -t1356, 0, 0, 0, 0, 0, 0, t1323, t1328, t1314, t1289, 0, 0, 0, 0, 0, 0, t1323, t1328, t1314, t1281; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1365, t1367, t1359, t1331, 0, 0, 0, 0, 0, 0, t1324, t1329, t1315, t1290, 0, 0, 0, 0, 0, 0, t1324, t1329, t1315, t1282; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1366, t1379, t1361, t1330, 0, 0, 0, 0, 0, 0, -t1334, -t1336, -t1344, -t1319, 0, 0, 0, 0, 0, 0, -t1334, -t1336, -t1344, -t1303; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1358, -t1439, t1357, -t1356, 0, 0, 0, 0, 0, 0, t1323, t1328, t1314, t1289, 0, 0, 0, 0, 0, 0, t1323, t1328, t1314, t1281; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1345, t1341, t1335, t1305, 0, 0, 0, 0, 0, 0, t1345, t1341, t1335, t1302; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1340, t1349, t1337, t1304, 0, 0, 0, 0, 0, 0, t1340, t1349, t1337, t1295; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1334, t1336, t1344, t1319, 0, 0, 0, 0, 0, 0, t1334, t1336, t1344, t1303; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1345, t1341, t1335, t1302; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1340, t1349, t1337, t1295; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1334, t1336, t1344, t1303;];
f_new_reg = t1;
