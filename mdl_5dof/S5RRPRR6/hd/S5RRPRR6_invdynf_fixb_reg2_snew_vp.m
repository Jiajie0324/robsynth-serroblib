% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RRPRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 12:06
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RRPRR6_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR6_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR6_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR6_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR6_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR6_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 12:06:29
% EndTime: 2020-01-03 12:06:31
% DurationCPUTime: 2.61s
% Computational Cost: add. (14984->219), mult. (20966->315), div. (0->0), fcn. (13752->10), ass. (0->180)
t1381 = qJD(1) + qJD(2);
t1377 = t1381 ^ 2;
t1388 = sin(qJ(2));
t1378 = qJDD(1) + qJDD(2);
t1392 = cos(qJ(2));
t1414 = t1392 * t1378;
t1356 = t1388 * t1377 - t1414;
t1389 = sin(qJ(1));
t1393 = cos(qJ(1));
t1415 = t1388 * t1378;
t1400 = -t1392 * t1377 - t1415;
t1436 = t1389 * t1356 + t1393 * t1400;
t1435 = -t1393 * t1356 + t1389 * t1400;
t1384 = sin(pkin(9));
t1379 = t1384 ^ 2;
t1385 = cos(pkin(9));
t1380 = t1385 ^ 2;
t1411 = t1379 + t1380;
t1353 = t1411 * t1377;
t1416 = t1385 * t1381;
t1367 = -qJD(4) + t1416;
t1361 = -qJD(5) + t1367;
t1432 = qJD(5) - t1361;
t1386 = sin(qJ(5));
t1387 = sin(qJ(4));
t1390 = cos(qJ(5));
t1391 = cos(qJ(4));
t1421 = t1381 * t1384;
t1335 = (-t1386 * t1391 - t1387 * t1390) * t1421;
t1431 = t1335 ^ 2;
t1417 = t1384 * t1391;
t1406 = t1381 * t1417;
t1420 = t1381 * t1387;
t1407 = t1384 * t1420;
t1337 = -t1386 * t1407 + t1390 * t1406;
t1430 = t1337 ^ 2;
t1429 = t1361 ^ 2;
t1428 = t1367 ^ 2;
t1427 = 2 * qJD(3);
t1426 = t1385 * g(1);
t1425 = t1337 * t1335;
t1424 = t1378 * t1387;
t1423 = t1378 * t1391;
t1422 = t1379 * t1377;
t1419 = t1381 * t1391;
t1418 = t1384 * t1378;
t1401 = -pkin(3) * t1385 - pkin(7) * t1384;
t1348 = t1401 * t1381;
t1413 = t1427 + t1348;
t1412 = qJD(5) + t1361;
t1371 = -t1389 * g(2) + t1393 * g(3);
t1394 = qJD(1) ^ 2;
t1359 = -t1394 * pkin(1) + t1371;
t1372 = -t1393 * g(2) - t1389 * g(3);
t1399 = qJDD(1) * pkin(1) + t1372;
t1333 = t1392 * t1359 + t1388 * t1399;
t1320 = -t1377 * pkin(2) + t1378 * qJ(3) + t1333;
t1312 = -t1384 * g(1) + t1385 * t1320 + t1416 * t1427;
t1301 = t1348 * t1416 + t1312;
t1332 = -t1388 * t1359 + t1392 * t1399;
t1319 = -t1378 * pkin(2) - t1377 * qJ(3) + qJDD(3) - t1332;
t1310 = t1401 * t1378 + t1319;
t1279 = t1391 * t1301 + t1387 * t1310;
t1373 = t1385 * t1378;
t1410 = t1373 - qJDD(4);
t1409 = t1367 * t1420;
t1408 = t1391 * t1422;
t1382 = t1387 ^ 2;
t1405 = t1382 * t1422;
t1404 = -qJDD(5) + t1410;
t1360 = qJD(4) * t1407;
t1343 = t1378 * t1417 - t1360;
t1398 = (-qJD(4) * t1419 - t1424) * t1384;
t1403 = -t1386 * t1343 + t1390 * t1398;
t1402 = t1387 * t1408;
t1397 = -t1390 * t1343 - t1386 * t1398;
t1383 = t1391 ^ 2;
t1366 = t1385 * t1377 * t1384;
t1365 = t1393 * qJDD(1) - t1389 * t1394;
t1364 = -t1389 * qJDD(1) - t1393 * t1394;
t1349 = t1411 * t1378;
t1347 = t1385 * t1353;
t1346 = t1384 * t1353;
t1345 = (t1382 + t1383) * t1422;
t1344 = -t1405 - t1428;
t1342 = -t1367 * pkin(4) - pkin(8) * t1406;
t1341 = -t1402 - t1410;
t1340 = -t1402 + t1410;
t1334 = -t1383 * t1422 - t1428;
t1331 = -t1392 * t1347 - t1385 * t1415;
t1330 = t1392 * t1346 + t1384 * t1415;
t1329 = -t1388 * t1347 + t1385 * t1414;
t1328 = t1388 * t1346 - t1384 * t1414;
t1326 = t1392 * t1349 - t1388 * t1353;
t1325 = t1388 * t1349 + t1392 * t1353;
t1324 = t1360 + (t1409 - t1423) * t1384;
t1323 = -t1360 + (t1409 + t1423) * t1384;
t1322 = (-t1424 + (-qJD(4) - t1367) * t1419) * t1384;
t1321 = (t1424 + (qJD(4) - t1367) * t1419) * t1384;
t1317 = -t1429 - t1430;
t1316 = -t1387 * t1341 + t1391 * t1344;
t1315 = t1391 * t1341 + t1387 * t1344;
t1314 = -t1387 * t1334 + t1391 * t1340;
t1313 = t1391 * t1334 + t1387 * t1340;
t1311 = -0.2e1 * qJD(3) * t1421 - t1384 * t1320 - t1426;
t1309 = -t1404 + t1425;
t1308 = t1404 + t1425;
t1307 = -t1429 - t1431;
t1306 = t1391 * t1310;
t1304 = -t1388 * t1332 + t1392 * t1333;
t1303 = t1392 * t1332 + t1388 * t1333;
t1302 = -t1430 - t1431;
t1300 = t1426 + (t1413 * t1381 + t1320) * t1384;
t1298 = t1391 * t1322 - t1387 * t1324;
t1297 = t1387 * t1322 + t1391 * t1324;
t1296 = t1385 * t1316 + t1384 * t1321;
t1295 = t1384 * t1316 - t1385 * t1321;
t1294 = t1385 * t1314 + t1384 * t1323;
t1293 = t1384 * t1314 - t1385 * t1323;
t1292 = -t1412 * t1335 + t1397;
t1291 = t1432 * t1335 - t1397;
t1290 = -t1412 * t1337 + t1403;
t1289 = t1432 * t1337 - t1403;
t1288 = t1385 * t1298 - t1384 * t1345;
t1287 = t1384 * t1298 + t1385 * t1345;
t1286 = t1390 * t1308 - t1386 * t1317;
t1285 = t1386 * t1308 + t1390 * t1317;
t1284 = -t1384 * t1311 + t1385 * t1312;
t1283 = t1385 * t1311 + t1384 * t1312;
t1282 = t1390 * t1307 - t1386 * t1309;
t1281 = t1386 * t1307 + t1390 * t1309;
t1280 = t1426 - pkin(4) * t1398 - pkin(8) * t1405 + (t1320 + (t1342 * t1391 + t1413) * t1381) * t1384;
t1278 = -t1387 * t1301 + t1306;
t1277 = t1392 * t1296 + t1388 * t1315;
t1276 = t1388 * t1296 - t1392 * t1315;
t1275 = t1392 * t1294 + t1388 * t1313;
t1274 = t1388 * t1294 - t1392 * t1313;
t1273 = t1392 * t1284 + t1388 * t1319;
t1272 = t1388 * t1284 - t1392 * t1319;
t1271 = t1392 * t1288 + t1388 * t1297;
t1270 = t1388 * t1288 - t1392 * t1297;
t1269 = -pkin(4) * t1405 + pkin(8) * t1398 + t1367 * t1342 + t1279;
t1268 = t1306 - t1343 * pkin(8) - t1410 * pkin(4) + (t1367 * pkin(8) * t1421 - pkin(4) * t1408 - t1301) * t1387;
t1267 = t1390 * t1290 - t1386 * t1292;
t1266 = t1386 * t1290 + t1390 * t1292;
t1265 = -t1387 * t1285 + t1391 * t1286;
t1264 = t1391 * t1285 + t1387 * t1286;
t1263 = -t1387 * t1281 + t1391 * t1282;
t1262 = t1391 * t1281 + t1387 * t1282;
t1261 = -t1387 * t1278 + t1391 * t1279;
t1260 = t1391 * t1278 + t1387 * t1279;
t1259 = t1385 * t1265 + t1384 * t1291;
t1258 = t1384 * t1265 - t1385 * t1291;
t1257 = t1385 * t1263 + t1384 * t1289;
t1256 = t1384 * t1263 - t1385 * t1289;
t1255 = t1385 * t1261 + t1384 * t1300;
t1254 = t1384 * t1261 - t1385 * t1300;
t1253 = t1386 * t1268 + t1390 * t1269;
t1252 = t1390 * t1268 - t1386 * t1269;
t1251 = -t1387 * t1266 + t1391 * t1267;
t1250 = t1391 * t1266 + t1387 * t1267;
t1249 = t1385 * t1251 + t1384 * t1302;
t1248 = t1384 * t1251 - t1385 * t1302;
t1247 = t1392 * t1259 + t1388 * t1264;
t1246 = t1388 * t1259 - t1392 * t1264;
t1245 = t1392 * t1257 + t1388 * t1262;
t1244 = t1388 * t1257 - t1392 * t1262;
t1243 = t1392 * t1255 + t1388 * t1260;
t1242 = t1388 * t1255 - t1392 * t1260;
t1241 = -t1386 * t1252 + t1390 * t1253;
t1240 = t1390 * t1252 + t1386 * t1253;
t1239 = t1392 * t1249 + t1388 * t1250;
t1238 = t1388 * t1249 - t1392 * t1250;
t1237 = -t1387 * t1240 + t1391 * t1241;
t1236 = t1391 * t1240 + t1387 * t1241;
t1235 = t1385 * t1237 + t1384 * t1280;
t1234 = t1384 * t1237 - t1385 * t1280;
t1233 = t1392 * t1235 + t1388 * t1236;
t1232 = t1388 * t1235 - t1392 * t1236;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1283, 0, 0, 0, 0, 0, 0, t1295, t1293, t1287, t1254, 0, 0, 0, 0, 0, 0, t1256, t1258, t1248, t1234; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1365, t1364, 0, t1389 * t1371 + t1393 * t1372, 0, 0, 0, 0, 0, 0, t1435, t1436, 0, t1393 * t1303 + t1389 * t1304, 0, 0, 0, 0, 0, 0, t1393 * t1329 + t1389 * t1331, t1393 * t1328 + t1389 * t1330, t1393 * t1325 + t1389 * t1326, t1393 * t1272 + t1389 * t1273, 0, 0, 0, 0, 0, 0, t1393 * t1276 + t1389 * t1277, t1393 * t1274 + t1389 * t1275, t1393 * t1270 + t1389 * t1271, t1393 * t1242 + t1389 * t1243, 0, 0, 0, 0, 0, 0, t1393 * t1244 + t1389 * t1245, t1393 * t1246 + t1389 * t1247, t1393 * t1238 + t1389 * t1239, t1393 * t1232 + t1389 * t1233; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t1364, t1365, 0, -t1393 * t1371 + t1389 * t1372, 0, 0, 0, 0, 0, 0, -t1436, t1435, 0, t1389 * t1303 - t1393 * t1304, 0, 0, 0, 0, 0, 0, t1389 * t1329 - t1393 * t1331, t1389 * t1328 - t1393 * t1330, t1389 * t1325 - t1393 * t1326, t1389 * t1272 - t1393 * t1273, 0, 0, 0, 0, 0, 0, t1389 * t1276 - t1393 * t1277, t1389 * t1274 - t1393 * t1275, t1389 * t1270 - t1393 * t1271, t1389 * t1242 - t1393 * t1243, 0, 0, 0, 0, 0, 0, t1389 * t1244 - t1393 * t1245, t1389 * t1246 - t1393 * t1247, t1389 * t1238 - t1393 * t1239, t1389 * t1232 - t1393 * t1233; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1394, -qJDD(1), 0, t1371, 0, 0, 0, 0, 0, 0, t1400, t1356, 0, t1304, 0, 0, 0, 0, 0, 0, t1331, t1330, t1326, t1273, 0, 0, 0, 0, 0, 0, t1277, t1275, t1271, t1243, 0, 0, 0, 0, 0, 0, t1245, t1247, t1239, t1233; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1394, 0, t1372, 0, 0, 0, 0, 0, 0, -t1356, t1400, 0, t1303, 0, 0, 0, 0, 0, 0, t1329, t1328, t1325, t1272, 0, 0, 0, 0, 0, 0, t1276, t1274, t1270, t1242, 0, 0, 0, 0, 0, 0, t1244, t1246, t1238, t1232; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1283, 0, 0, 0, 0, 0, 0, t1295, t1293, t1287, t1254, 0, 0, 0, 0, 0, 0, t1256, t1258, t1248, t1234; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1377, -t1378, 0, t1333, 0, 0, 0, 0, 0, 0, -t1347, t1346, t1349, t1284, 0, 0, 0, 0, 0, 0, t1296, t1294, t1288, t1255, 0, 0, 0, 0, 0, 0, t1257, t1259, t1249, t1235; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1378, -t1377, 0, t1332, 0, 0, 0, 0, 0, 0, t1373, -t1418, t1353, -t1319, 0, 0, 0, 0, 0, 0, -t1315, -t1313, -t1297, -t1260, 0, 0, 0, 0, 0, 0, -t1262, -t1264, -t1250, -t1236; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1283, 0, 0, 0, 0, 0, 0, t1295, t1293, t1287, t1254, 0, 0, 0, 0, 0, 0, t1256, t1258, t1248, t1234; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1380 * t1377, t1366, t1373, t1312, 0, 0, 0, 0, 0, 0, t1316, t1314, t1298, t1261, 0, 0, 0, 0, 0, 0, t1263, t1265, t1251, t1237; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1366, -t1422, -t1418, t1311, 0, 0, 0, 0, 0, 0, -t1321, -t1323, t1345, -t1300, 0, 0, 0, 0, 0, 0, -t1289, -t1291, -t1302, -t1280; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1373, t1418, -t1353, t1319, 0, 0, 0, 0, 0, 0, t1315, t1313, t1297, t1260, 0, 0, 0, 0, 0, 0, t1262, t1264, t1250, t1236; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1344, t1340, t1322, t1279, 0, 0, 0, 0, 0, 0, t1282, t1286, t1267, t1241; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1341, t1334, t1324, t1278, 0, 0, 0, 0, 0, 0, t1281, t1285, t1266, t1240; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1321, t1323, -t1345, t1300, 0, 0, 0, 0, 0, 0, t1289, t1291, t1302, t1280; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1307, t1308, t1290, t1253; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1309, t1317, t1292, t1252; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1289, t1291, t1302, t1280;];
f_new_reg = t1;
