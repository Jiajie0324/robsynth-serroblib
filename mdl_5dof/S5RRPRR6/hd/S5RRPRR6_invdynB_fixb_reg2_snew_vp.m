% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:36
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPRR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR6_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR6_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR6_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:36:19
% EndTime: 2019-12-05 18:36:34
% DurationCPUTime: 13.54s
% Computational Cost: add. (55564->555), mult. (77966->850), div. (0->0), fcn. (50965->10), ass. (0->391)
t609 = qJD(1) + qJD(2);
t604 = t609 ^ 2;
t620 = cos(qJ(2));
t605 = qJDD(1) + qJDD(2);
t616 = sin(qJ(2));
t659 = t616 * t605;
t573 = t620 * t604 + t659;
t555 = pkin(6) * t573 - t620 * g(1);
t617 = sin(qJ(1));
t621 = cos(qJ(1));
t650 = t620 * t605;
t660 = t616 * t604;
t576 = -t650 + t660;
t690 = t617 * t573 + t621 * t576;
t693 = pkin(6) * t576 - t616 * g(1);
t700 = pkin(5) * t690 + t617 * t555 + t621 * t693;
t522 = t621 * t573 - t617 * t576;
t699 = pkin(5) * t522 + t621 * t555 - t617 * t693;
t597 = t617 * g(2) - t621 * g(3);
t622 = qJD(1) ^ 2;
t580 = -t622 * pkin(1) + t597;
t598 = t621 * g(2) + t617 * g(3);
t626 = qJDD(1) * pkin(1) + t598;
t533 = t616 * t580 - t620 * t626;
t534 = t620 * t580 + t616 * t626;
t636 = t616 * t533 + t620 * t534;
t475 = t620 * t533 - t616 * t534;
t649 = t621 * t475;
t413 = -t617 * t636 + t649;
t658 = t617 * t475;
t697 = -t621 * t636 - t658;
t614 = sin(qJ(5));
t615 = sin(qJ(4));
t618 = cos(qJ(5));
t619 = cos(qJ(4));
t612 = sin(pkin(9));
t672 = t609 * t612;
t540 = (-t614 * t619 - t615 * t618) * t672;
t550 = (qJD(4) * t609 * t619 + t605 * t615) * t612;
t643 = t615 * t672;
t670 = t612 * t619;
t551 = -qJD(4) * t643 + t605 * t670;
t466 = t540 * qJD(5) - t614 * t550 + t618 * t551;
t613 = cos(pkin(9));
t668 = t613 * t609;
t593 = -qJD(4) + t668;
t584 = -qJD(5) + t593;
t678 = t540 * t584;
t695 = t466 - t678;
t507 = -t604 * pkin(2) + t605 * qJ(3) + t534;
t684 = 2 * qJD(3);
t694 = t609 * t684 + t507;
t607 = t612 ^ 2;
t608 = t613 ^ 2;
t563 = (t607 + t608) * t613 * t604;
t638 = t613 * t650;
t529 = -t616 * t563 + t638;
t531 = t620 * t563 + t613 * t659;
t692 = t621 * t529 - t617 * t531;
t691 = t617 * t529 + t621 * t531;
t669 = t613 * t605;
t591 = -qJDD(4) + t669;
t581 = -qJDD(5) + t591;
t642 = t609 * t670;
t542 = -t614 * t643 + t618 * t642;
t677 = t542 * t540;
t625 = -t581 + t677;
t689 = t614 * t625;
t561 = t593 * t642;
t509 = t561 - t550;
t688 = t615 * t509;
t686 = t618 * t625;
t633 = t593 * t643;
t510 = t551 + t633;
t502 = t619 * t510;
t635 = t618 * t550 + t614 * t551;
t439 = (qJD(5) + t584) * t542 + t635;
t538 = t540 ^ 2;
t539 = t542 ^ 2;
t582 = t584 ^ 2;
t590 = t593 ^ 2;
t683 = pkin(3) * t612;
t682 = pkin(3) * t613;
t602 = t605 * pkin(2);
t681 = t613 * g(1);
t676 = t584 * t614;
t675 = t584 * t618;
t674 = t591 * t612;
t673 = t607 * t604;
t671 = t612 * t613;
t549 = -t593 * pkin(4) - pkin(8) * t642;
t610 = t615 ^ 2;
t592 = t610 * t673;
t632 = -pkin(7) * t612 - t682;
t564 = t632 * t609;
t648 = t684 + t564;
t411 = t681 + t550 * pkin(4) - pkin(8) * t592 + (t507 + (t549 * t619 + t648) * t609) * t612;
t667 = t614 * t411;
t483 = t581 + t677;
t666 = t614 * t483;
t488 = -t612 * g(1) + t694 * t613;
t460 = t564 * t668 + t488;
t506 = -t604 * qJ(3) + qJDD(3) + t533 - t602;
t486 = t632 * t605 + t506;
t480 = t619 * t486;
t645 = t593 * t672;
t386 = -t591 * pkin(4) - t551 * pkin(8) + t480 + (-pkin(4) * t619 * t673 + pkin(8) * t645 - t460) * t615;
t410 = t619 * t460 + t615 * t486;
t387 = -pkin(4) * t592 - t550 * pkin(8) + t593 * t549 + t410;
t336 = -t618 * t386 + t614 * t387;
t337 = t614 * t386 + t618 * t387;
t302 = -t618 * t336 + t614 * t337;
t665 = t615 * t302;
t459 = t681 + (t648 * t609 + t507) * t612;
t664 = t615 * t459;
t644 = t604 * t615 * t619;
t579 = t607 * t644;
t547 = -t579 + t591;
t663 = t615 * t547;
t548 = -t579 - t591;
t662 = t615 * t548;
t661 = t616 * t506;
t657 = t618 * t411;
t656 = t618 * t483;
t655 = t619 * t302;
t654 = t619 * t459;
t653 = t619 * t547;
t652 = t619 * t548;
t651 = t620 * t506;
t611 = t619 ^ 2;
t641 = t611 * t673;
t640 = t612 * t677;
t639 = t613 * t677;
t637 = -t506 + t602;
t303 = t614 * t336 + t618 * t337;
t409 = t615 * t460 - t480;
t487 = t694 * t612 + t681;
t424 = t612 * t487 + t613 * t488;
t606 = t612 * t607;
t634 = t606 * t644;
t587 = t617 * qJDD(1) + t621 * t622;
t631 = pkin(5) * t587 - t621 * g(1);
t630 = t613 * t579;
t359 = -t619 * t409 + t615 * t410;
t362 = t615 * t409 + t619 * t410;
t423 = t613 * t487 - t612 * t488;
t536 = t573 * t671;
t537 = t612 * t638 - t660 * t671;
t629 = t621 * t536 + t617 * t537;
t628 = t617 * t536 - t621 * t537;
t544 = t621 * t597 - t617 * t598;
t543 = -t617 * t597 - t621 * t598;
t601 = t608 * t604;
t600 = t608 * t605;
t599 = t607 * t605;
t588 = -t621 * qJDD(1) + t617 * t622;
t572 = t601 - t673;
t571 = t601 + t673;
t567 = t600 - t599;
t566 = t600 + t599;
t565 = -pkin(5) * t588 + t617 * g(1);
t562 = (t608 * t612 + t606) * t604;
t560 = t592 - t641;
t559 = t592 + t641;
t558 = t590 - t641;
t557 = -t592 - t590;
t556 = t592 - t590;
t535 = -t641 - t590;
t530 = t620 * t562 + t612 * t659;
t527 = t616 * t562 - t612 * t650;
t519 = t620 * t567 - t616 * t572;
t518 = t620 * t566 - t616 * t571;
t517 = t616 * t567 + t620 * t572;
t516 = t616 * t566 + t620 * t571;
t515 = -t539 + t582;
t514 = t538 - t582;
t513 = (-t610 - t611) * t645;
t512 = t633 - t551;
t508 = t561 + t550;
t505 = -t615 * t551 + t611 * t645;
t504 = t619 * t550 + t610 * t645;
t500 = -t539 - t582;
t499 = t619 * t557 - t662;
t498 = t619 * t556 + t663;
t497 = -t615 * t558 + t652;
t496 = t615 * t557 + t652;
t495 = -t615 * t556 + t653;
t494 = -t619 * t558 - t662;
t493 = -t539 + t538;
t492 = -t616 * t513 - t620 * t674;
t491 = t620 * t513 - t616 * t674;
t490 = -t615 * t535 + t653;
t489 = t619 * t535 + t663;
t481 = -t582 - t538;
t478 = t613 * t502 + t634;
t477 = -t613 * t688 - t634;
t471 = -t617 * t527 + t621 * t530;
t469 = -t621 * t527 - t617 * t530;
t468 = pkin(1) * g(1) + pkin(6) * t636;
t467 = -t538 - t539;
t465 = -t542 * qJD(5) - t635;
t464 = (-t540 * t618 - t542 * t614) * t584;
t463 = (-t540 * t614 + t542 * t618) * t584;
t462 = -t617 * t516 + t621 * t518;
t461 = -t621 * t516 - t617 * t518;
t457 = t619 * t509 - t615 * t510;
t456 = -t619 * t508 - t615 * t512;
t455 = -t502 - t688;
t454 = -t615 * t508 + t619 * t512;
t453 = t613 * t499 - t612 * t509;
t452 = t613 * t498 - t612 * t508;
t451 = t613 * t497 - t612 * t512;
t450 = t612 * t499 + t613 * t509;
t449 = t613 * t490 + t510 * t612;
t448 = t612 * t490 - t510 * t613;
t447 = t618 * t514 + t666;
t446 = -t614 * t515 + t686;
t445 = t614 * t514 - t656;
t444 = t618 * t515 + t689;
t443 = -t466 - t678;
t438 = (qJD(5) - t584) * t542 + t635;
t437 = t620 * t478 - t616 * t505;
t436 = t620 * t477 - t616 * t504;
t435 = t616 * t478 + t620 * t505;
t434 = t616 * t477 + t620 * t504;
t433 = t613 * t457 - t612 * t560;
t432 = t613 * t456 - t612 * t559;
t431 = t612 * t456 + t613 * t559;
t430 = -t614 * t500 + t656;
t429 = t618 * t500 + t666;
t428 = t618 * t466 + t542 * t676;
t427 = t614 * t466 - t542 * t675;
t426 = -t614 * t465 + t540 * t675;
t425 = t618 * t465 + t540 * t676;
t421 = t618 * t481 - t689;
t420 = t614 * t481 + t686;
t419 = -pkin(7) * t496 + t664;
t418 = -pkin(6) * t527 - t616 * t488 + t613 * t651;
t417 = -pkin(6) * t529 - t616 * t487 + t612 * t651;
t416 = pkin(6) * t530 + t620 * t488 + t613 * t661;
t415 = -pkin(6) * t531 + t620 * t487 + t612 * t661;
t412 = -pkin(7) * t489 + t654;
t408 = t620 * t453 + t616 * t496;
t407 = t620 * t452 - t616 * t495;
t406 = t620 * t451 - t616 * t494;
t405 = t616 * t453 - t620 * t496;
t404 = t616 * t452 + t620 * t495;
t403 = t616 * t451 + t620 * t494;
t402 = -t615 * t463 + t619 * t464;
t401 = -t619 * t463 - t615 * t464;
t400 = -pkin(6) * t516 + t620 * t423;
t399 = pkin(6) * t518 + t616 * t423;
t398 = t620 * t449 + t616 * t489;
t397 = t616 * t449 - t620 * t489;
t396 = t620 * t424 + t661;
t395 = t616 * t424 - t651;
t394 = t613 * t402 - t612 * t581;
t393 = -pkin(3) * t496 + t409;
t392 = -pkin(3) * t489 + t410;
t391 = t620 * t433 - t616 * t455;
t390 = t620 * t432 + t616 * t454;
t389 = t616 * t433 + t620 * t455;
t388 = t616 * t432 - t620 * t454;
t382 = -t615 * t445 + t619 * t447;
t381 = -t615 * t444 + t619 * t446;
t380 = -t619 * t445 - t615 * t447;
t379 = -t619 * t444 - t615 * t446;
t378 = -t439 * t618 - t614 * t443;
t377 = -t618 * t438 - t614 * t695;
t376 = -t439 * t614 + t618 * t443;
t375 = -t614 * t438 + t618 * t695;
t374 = -t615 * t429 + t619 * t430;
t373 = t619 * t429 + t615 * t430;
t372 = -t615 * t427 + t619 * t428;
t371 = -t615 * t425 + t619 * t426;
t370 = -t619 * t427 - t615 * t428;
t369 = -t619 * t425 - t615 * t426;
t368 = -pkin(8) * t429 + t657;
t367 = -t615 * t420 + t619 * t421;
t366 = t619 * t420 + t615 * t421;
t365 = -pkin(2) * t450 - pkin(3) * t509 - pkin(7) * t499 + t654;
t364 = -pkin(8) * t420 + t667;
t363 = -pkin(2) * t448 + pkin(3) * t510 - pkin(7) * t490 - t664;
t361 = t613 * t372 - t640;
t360 = t613 * t371 + t640;
t358 = -t617 * t405 + t621 * t408;
t357 = -t621 * t405 - t617 * t408;
t356 = t613 * t382 - t612 * t439;
t355 = t613 * t381 - t612 * t443;
t354 = -t617 * t397 + t621 * t398;
t353 = -t621 * t397 - t617 * t398;
t352 = t620 * t394 - t616 * t401;
t351 = t616 * t394 + t620 * t401;
t350 = -t617 * t395 + t621 * t396;
t349 = -t621 * t395 - t617 * t396;
t348 = t613 * t374 + t612 * t695;
t347 = t612 * t374 - t613 * t695;
t346 = -pkin(4) * t695 + pkin(8) * t430 + t667;
t345 = t613 * t367 + t612 * t438;
t344 = t612 * t367 - t613 * t438;
t343 = -pkin(7) * t454 - t359;
t342 = t613 * t362 + t612 * t459;
t341 = t612 * t362 - t613 * t459;
t340 = -pkin(4) * t438 + pkin(8) * t421 - t657;
t339 = -t617 * t388 + t621 * t390;
t338 = -t621 * t388 - t617 * t390;
t335 = -pkin(6) * t395 - (pkin(2) * t616 - qJ(3) * t620) * t423;
t333 = -qJ(3) * t450 - t612 * t393 + t613 * t419;
t332 = -qJ(3) * t448 - t612 * t392 + t613 * t412;
t331 = -t615 * t376 + t619 * t378;
t330 = -t615 * t375 + t619 * t377;
t329 = t619 * t376 + t615 * t378;
t328 = -t619 * t375 - t615 * t377;
t327 = -pkin(2) * t431 - pkin(3) * t559 - pkin(7) * t456 - t362;
t326 = t613 * t330 - t612 * t493;
t325 = t620 * t361 - t616 * t370;
t324 = t620 * t360 - t616 * t369;
t323 = t616 * t361 + t620 * t370;
t322 = t616 * t360 + t620 * t369;
t321 = t613 * t331 + t612 * t467;
t320 = t612 * t331 - t613 * t467;
t319 = pkin(6) * t396 - (-pkin(2) * t620 - qJ(3) * t616 - pkin(1)) * t423;
t318 = t620 * t356 - t616 * t380;
t317 = t620 * t355 - t616 * t379;
t316 = t616 * t356 + t620 * t380;
t315 = t616 * t355 + t620 * t379;
t314 = -qJ(3) * t431 + t613 * t343 + t454 * t683;
t313 = t620 * t348 + t616 * t373;
t312 = t616 * t348 - t620 * t373;
t311 = t620 * t345 + t616 * t366;
t310 = t616 * t345 - t620 * t366;
t309 = t620 * t342 + t616 * t359;
t308 = t616 * t342 - t620 * t359;
t307 = -pkin(3) * t329 - pkin(4) * t376;
t306 = -pkin(2) * t341 + pkin(3) * t459 - pkin(7) * t362;
t305 = -pkin(3) * t373 - pkin(4) * t429 + t337;
t304 = -pkin(3) * t366 - pkin(4) * t420 + t336;
t301 = -pkin(6) * t405 + t620 * t333 - t616 * t365;
t300 = -pkin(7) * t373 - t615 * t346 + t619 * t368;
t299 = -pkin(6) * t397 + t620 * t332 - t616 * t363;
t298 = -pkin(7) * t366 - t615 * t340 + t619 * t364;
t297 = -pkin(1) * t450 + pkin(6) * t408 + t616 * t333 + t620 * t365;
t296 = -qJ(3) * t341 + (-pkin(7) * t613 + t683) * t359;
t295 = t620 * t326 - t616 * t328;
t294 = t616 * t326 + t620 * t328;
t293 = -pkin(4) * t411 + pkin(8) * t303;
t292 = t620 * t321 + t616 * t329;
t291 = t616 * t321 - t620 * t329;
t290 = -pkin(1) * t448 + pkin(6) * t398 + t616 * t332 + t620 * t363;
t289 = -pkin(8) * t376 - t302;
t288 = -pkin(4) * t467 + pkin(8) * t378 + t303;
t287 = -t617 * t312 + t621 * t313;
t286 = -t621 * t312 - t617 * t313;
t285 = -t617 * t310 + t621 * t311;
t284 = -t621 * t310 - t617 * t311;
t283 = -pkin(6) * t388 + t620 * t314 - t616 * t327;
t282 = -pkin(2) * t347 + pkin(3) * t695 - pkin(7) * t374 - t619 * t346 - t615 * t368;
t281 = -t617 * t308 + t621 * t309;
t280 = -t621 * t308 - t617 * t309;
t279 = -pkin(2) * t344 + pkin(3) * t438 - pkin(7) * t367 - t619 * t340 - t615 * t364;
t278 = -pkin(1) * t431 + pkin(6) * t390 + t616 * t314 + t620 * t327;
t277 = t619 * t303 - t665;
t276 = t615 * t303 + t655;
t275 = t613 * t277 + t612 * t411;
t274 = t612 * t277 - t613 * t411;
t273 = -qJ(3) * t347 + t613 * t300 - t612 * t305;
t272 = -t617 * t291 + t621 * t292;
t271 = -t621 * t291 - t617 * t292;
t270 = -qJ(3) * t344 + t613 * t298 - t612 * t304;
t269 = -pkin(6) * t308 + t620 * t296 - t616 * t306;
t268 = -pkin(3) * t276 - pkin(4) * t302;
t267 = -pkin(7) * t329 - t615 * t288 + t619 * t289;
t266 = -pkin(1) * t341 + pkin(6) * t309 + t616 * t296 + t620 * t306;
t265 = -pkin(2) * t320 + pkin(3) * t467 - pkin(7) * t331 - t619 * t288 - t615 * t289;
t264 = -pkin(7) * t276 - pkin(8) * t655 - t615 * t293;
t263 = t620 * t275 + t616 * t276;
t262 = t616 * t275 - t620 * t276;
t261 = -pkin(6) * t312 + t620 * t273 - t616 * t282;
t260 = -qJ(3) * t320 + t613 * t267 - t612 * t307;
t259 = -pkin(6) * t310 + t620 * t270 - t616 * t279;
t258 = -pkin(1) * t347 + pkin(6) * t313 + t616 * t273 + t620 * t282;
t257 = -pkin(1) * t344 + pkin(6) * t311 + t616 * t270 + t620 * t279;
t256 = -pkin(2) * t274 + pkin(3) * t411 - pkin(7) * t277 + pkin(8) * t665 - t619 * t293;
t255 = -t617 * t262 + t621 * t263;
t254 = -t621 * t262 - t617 * t263;
t253 = -qJ(3) * t274 + t613 * t264 - t612 * t268;
t252 = -pkin(6) * t291 + t620 * t260 - t616 * t265;
t251 = -pkin(1) * t320 + pkin(6) * t292 + t616 * t260 + t620 * t265;
t250 = -pkin(6) * t262 + t620 * t253 - t616 * t256;
t249 = -pkin(1) * t274 + pkin(6) * t263 + t616 * t253 + t620 * t256;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t423, 0, 0, 0, 0, 0, 0, t450, t448, t431, t341, 0, 0, 0, 0, 0, 0, t344, t347, t320, t274; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t588, t587, 0, t543, 0, 0, 0, 0, 0, 0, t690, t522, 0, t413, 0, 0, 0, 0, 0, 0, -t692, t469, t461, t349, 0, 0, 0, 0, 0, 0, t357, t353, t338, t280, 0, 0, 0, 0, 0, 0, t284, t286, t271, t254; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t587, t588, 0, t544, 0, 0, 0, 0, 0, 0, -t522, t690, 0, -t697, 0, 0, 0, 0, 0, 0, -t691, t471, t462, t350, 0, 0, 0, 0, 0, 0, t358, t354, t339, t281, 0, 0, 0, 0, 0, 0, t285, t287, t272, t255; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t598, -t597, 0, 0, 0, 0, 0, 0, 0, t605, -pkin(1) * t576 - t533, -pkin(1) * t573 - t534, 0, -pkin(1) * t475, t599, 0.2e1 * t612 * t669, 0, t600, 0, 0, pkin(1) * t529 - qJ(3) * t563 + t613 * t637, pkin(1) * t527 + qJ(3) * t562 - t612 * t637, pkin(1) * t516 + pkin(2) * t571 + qJ(3) * t566 + t424, pkin(1) * t395 - pkin(2) * t506 + qJ(3) * t424, t612 * t502 - t630, t612 * t457 + t613 * t560, t612 * t497 + t613 * t512, -t612 * t688 + t630, t612 * t498 + t613 * t508, t613 * t591, pkin(1) * t405 - pkin(2) * t496 + qJ(3) * t453 + t613 * t393 + t612 * t419, pkin(1) * t397 - pkin(2) * t489 + qJ(3) * t449 + t613 * t392 + t612 * t412, pkin(1) * t388 + qJ(3) * t432 + t612 * t343 + (-pkin(2) - t682) * t454, pkin(1) * t308 + qJ(3) * t342 + (-pkin(2) + t632) * t359, t612 * t372 + t639, t612 * t330 + t613 * t493, t612 * t381 + t613 * t443, t612 * t371 - t639, t612 * t382 + t613 * t439, t612 * t402 + t613 * t581, pkin(1) * t310 - pkin(2) * t366 + qJ(3) * t345 + t612 * t298 + t613 * t304, pkin(1) * t312 - pkin(2) * t373 + qJ(3) * t348 + t612 * t300 + t613 * t305, pkin(1) * t291 - pkin(2) * t329 + qJ(3) * t321 + t612 * t267 + t613 * t307, pkin(1) * t262 - pkin(2) * t276 + qJ(3) * t275 + t612 * t264 + t613 * t268; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t587, 0, t588, 0, t631, t565, -t544, -pkin(5) * t544, 0, 0, -t522, 0, t690, 0, t699, -t700, t697, pkin(5) * t697 - pkin(6) * t658 - t621 * t468, -t629, -t621 * t517 - t617 * t519, t469, t629, t692, 0, pkin(5) * t691 - t621 * t415 - t617 * t417, -pkin(5) * t471 - t621 * t416 - t617 * t418, -pkin(5) * t462 - t621 * t399 - t617 * t400, -pkin(5) * t350 - t621 * t319 - t617 * t335, -t621 * t435 - t617 * t437, -t621 * t389 - t617 * t391, -t621 * t403 - t617 * t406, -t621 * t434 - t617 * t436, -t621 * t404 - t617 * t407, -t621 * t491 - t617 * t492, -pkin(5) * t358 - t621 * t297 - t617 * t301, -pkin(5) * t354 - t621 * t290 - t617 * t299, -pkin(5) * t339 - t621 * t278 - t617 * t283, -pkin(5) * t281 - t621 * t266 - t617 * t269, -t621 * t323 - t617 * t325, -t621 * t294 - t617 * t295, -t621 * t315 - t617 * t317, -t621 * t322 - t617 * t324, -t621 * t316 - t617 * t318, -t621 * t351 - t617 * t352, -pkin(5) * t285 - t621 * t257 - t617 * t259, -pkin(5) * t287 - t621 * t258 - t617 * t261, -pkin(5) * t272 - t621 * t251 - t617 * t252, -pkin(5) * t255 - t621 * t249 - t617 * t250; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t588, 0, -t587, 0, -t565, t631, t543, pkin(5) * t543, 0, 0, -t690, 0, -t522, 0, t700, t699, t413, pkin(5) * t413 + pkin(6) * t649 - t617 * t468, -t628, -t617 * t517 + t621 * t519, t471, t628, t691, 0, -pkin(5) * t692 - t617 * t415 + t621 * t417, pkin(5) * t469 - t617 * t416 + t621 * t418, pkin(5) * t461 - t617 * t399 + t621 * t400, pkin(5) * t349 - t617 * t319 + t621 * t335, -t617 * t435 + t621 * t437, -t617 * t389 + t621 * t391, -t617 * t403 + t621 * t406, -t617 * t434 + t621 * t436, -t617 * t404 + t621 * t407, -t617 * t491 + t621 * t492, pkin(5) * t357 - t617 * t297 + t621 * t301, pkin(5) * t353 - t617 * t290 + t621 * t299, pkin(5) * t338 - t617 * t278 + t621 * t283, pkin(5) * t280 - t617 * t266 + t621 * t269, -t617 * t323 + t621 * t325, -t617 * t294 + t621 * t295, -t617 * t315 + t621 * t317, -t617 * t322 + t621 * t324, -t617 * t316 + t621 * t318, -t617 * t351 + t621 * t352, pkin(5) * t284 - t617 * t257 + t621 * t259, pkin(5) * t286 - t617 * t258 + t621 * t261, pkin(5) * t271 - t617 * t251 + t621 * t252, pkin(5) * t254 - t617 * t249 + t621 * t250;];
tauB_reg = t1;
