% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2020-01-03 12:06
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRPRR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR6_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR6_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR6_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2020-01-03 12:06:02
% EndTime: 2020-01-03 12:06:14
% DurationCPUTime: 10.93s
% Computational Cost: add. (55564->555), mult. (77966->850), div. (0->0), fcn. (50965->10), ass. (0->391)
t613 = qJD(1) + qJD(2);
t608 = t613 ^ 2;
t624 = cos(qJ(2));
t609 = qJDD(1) + qJDD(2);
t620 = sin(qJ(2));
t663 = t620 * t609;
t572 = t608 * t624 + t663;
t654 = t624 * t609;
t664 = t620 * t608;
t575 = -t654 + t664;
t621 = sin(qJ(1));
t625 = cos(qJ(1));
t523 = t572 * t625 - t575 * t621;
t553 = pkin(6) * t572 - g(1) * t624;
t695 = pkin(6) * t575 - g(1) * t620;
t702 = -pkin(5) * t523 - t553 * t625 + t621 * t695;
t631 = t572 * t621 + t575 * t625;
t701 = pkin(5) * t631 + t553 * t621 + t625 * t695;
t597 = g(2) * t621 - g(3) * t625;
t689 = qJD(1) ^ 2;
t580 = -pkin(1) * t689 - t597;
t598 = g(2) * t625 + g(3) * t621;
t629 = qJDD(1) * pkin(1) - t598;
t531 = t620 * t580 - t624 * t629;
t532 = t580 * t624 + t620 * t629;
t639 = t531 * t620 + t532 * t624;
t473 = t531 * t624 - t532 * t620;
t653 = t625 * t473;
t411 = t621 * t639 - t653;
t662 = t621 * t473;
t698 = t625 * t639 + t662;
t618 = sin(qJ(5));
t619 = sin(qJ(4));
t622 = cos(qJ(5));
t623 = cos(qJ(4));
t616 = sin(pkin(9));
t676 = t613 * t616;
t538 = (-t618 * t623 - t619 * t622) * t676;
t548 = (qJD(4) * t613 * t623 + t609 * t619) * t616;
t647 = t619 * t676;
t674 = t616 * t623;
t549 = -qJD(4) * t647 + t609 * t674;
t464 = qJD(5) * t538 - t548 * t618 + t549 * t622;
t617 = cos(pkin(9));
t672 = t617 * t613;
t593 = -qJD(4) + t672;
t584 = -qJD(5) + t593;
t682 = t538 * t584;
t697 = t464 - t682;
t505 = -pkin(2) * t608 + qJ(3) * t609 + t532;
t688 = 2 * qJD(3);
t696 = t613 * t688 + t505;
t611 = t616 ^ 2;
t612 = t617 ^ 2;
t561 = (t611 + t612) * t617 * t608;
t642 = t617 * t654;
t527 = -t561 * t620 + t642;
t529 = t561 * t624 + t617 * t663;
t468 = t527 * t625 - t529 * t621;
t470 = t527 * t621 + t529 * t625;
t673 = t617 * t609;
t591 = -qJDD(4) + t673;
t581 = -qJDD(5) + t591;
t646 = t613 * t674;
t540 = -t618 * t647 + t622 * t646;
t681 = t540 * t538;
t628 = -t581 + t681;
t694 = t618 * t628;
t559 = t593 * t646;
t507 = t559 - t548;
t693 = t619 * t507;
t691 = t622 * t628;
t636 = t593 * t647;
t508 = t549 + t636;
t500 = t623 * t508;
t638 = t548 * t622 + t618 * t549;
t437 = (qJD(5) + t584) * t540 + t638;
t536 = t538 ^ 2;
t537 = t540 ^ 2;
t582 = t584 ^ 2;
t590 = t593 ^ 2;
t687 = pkin(3) * t616;
t686 = pkin(3) * t617;
t602 = t609 * pkin(2);
t685 = t617 * g(1);
t680 = t584 * t618;
t679 = t584 * t622;
t678 = t591 * t616;
t677 = t611 * t608;
t675 = t616 * t617;
t547 = -pkin(4) * t593 - pkin(8) * t646;
t614 = t619 ^ 2;
t592 = t614 * t677;
t635 = -pkin(7) * t616 - t686;
t563 = t635 * t613;
t652 = t688 + t563;
t409 = t685 + t548 * pkin(4) - pkin(8) * t592 + (t505 + (t547 * t623 + t652) * t613) * t616;
t671 = t618 * t409;
t481 = t581 + t681;
t670 = t618 * t481;
t486 = -t616 * g(1) + t617 * t696;
t458 = t563 * t672 + t486;
t504 = -qJ(3) * t608 + qJDD(3) + t531 - t602;
t484 = t609 * t635 + t504;
t478 = t623 * t484;
t649 = t593 * t676;
t384 = -t591 * pkin(4) - t549 * pkin(8) + t478 + (-pkin(4) * t623 * t677 + pkin(8) * t649 - t458) * t619;
t408 = t458 * t623 + t484 * t619;
t385 = -pkin(4) * t592 - pkin(8) * t548 + t547 * t593 + t408;
t334 = -t384 * t622 + t385 * t618;
t335 = t384 * t618 + t385 * t622;
t300 = -t334 * t622 + t335 * t618;
t669 = t619 * t300;
t457 = t685 + (t613 * t652 + t505) * t616;
t668 = t619 * t457;
t648 = t608 * t619 * t623;
t578 = t611 * t648;
t545 = -t578 + t591;
t667 = t619 * t545;
t546 = -t578 - t591;
t666 = t619 * t546;
t665 = t620 * t504;
t661 = t622 * t409;
t660 = t622 * t481;
t659 = t623 * t300;
t658 = t623 * t457;
t657 = t623 * t545;
t656 = t623 * t546;
t655 = t624 * t504;
t615 = t623 ^ 2;
t645 = t615 * t677;
t644 = t616 * t681;
t643 = t617 * t681;
t641 = -t504 + t602;
t587 = -qJDD(1) * t621 - t625 * t689;
t640 = pkin(5) * t587 + g(1) * t625;
t301 = t334 * t618 + t335 * t622;
t407 = t619 * t458 - t478;
t485 = t616 * t696 + t685;
t422 = t485 * t616 + t486 * t617;
t541 = -t597 * t621 - t598 * t625;
t610 = t616 * t611;
t637 = t610 * t648;
t634 = t617 * t578;
t357 = -t407 * t623 + t408 * t619;
t360 = t407 * t619 + t408 * t623;
t421 = t485 * t617 - t486 * t616;
t534 = t572 * t675;
t535 = t616 * t642 - t664 * t675;
t633 = t534 * t625 + t535 * t621;
t632 = t534 * t621 - t535 * t625;
t542 = t597 * t625 - t598 * t621;
t601 = t612 * t608;
t600 = t612 * t609;
t599 = t611 * t609;
t588 = qJDD(1) * t625 - t621 * t689;
t571 = t601 - t677;
t570 = t601 + t677;
t566 = t600 - t599;
t565 = t600 + t599;
t564 = pkin(5) * t588 + g(1) * t621;
t560 = (t612 * t616 + t610) * t608;
t558 = t592 - t645;
t557 = t592 + t645;
t556 = t590 - t645;
t555 = -t592 - t590;
t554 = t592 - t590;
t533 = -t645 - t590;
t528 = t560 * t624 + t616 * t663;
t525 = t560 * t620 - t616 * t654;
t517 = t566 * t624 - t571 * t620;
t516 = t565 * t624 - t570 * t620;
t515 = t566 * t620 + t571 * t624;
t514 = t565 * t620 + t570 * t624;
t513 = -t537 + t582;
t512 = t536 - t582;
t511 = (-t614 - t615) * t649;
t510 = t636 - t549;
t506 = t559 + t548;
t503 = -t549 * t619 + t615 * t649;
t502 = t548 * t623 + t614 * t649;
t498 = -t537 - t582;
t497 = t555 * t623 - t666;
t496 = t554 * t623 + t667;
t495 = -t556 * t619 + t656;
t494 = t555 * t619 + t656;
t493 = -t554 * t619 + t657;
t492 = -t556 * t623 - t666;
t491 = -t537 + t536;
t490 = -t511 * t620 - t624 * t678;
t489 = t511 * t624 - t620 * t678;
t488 = -t533 * t619 + t657;
t487 = t533 * t623 + t667;
t479 = -t582 - t536;
t476 = t500 * t617 + t637;
t475 = -t617 * t693 - t637;
t469 = t525 * t621 - t528 * t625;
t467 = t525 * t625 + t528 * t621;
t466 = pkin(1) * g(1) + pkin(6) * t639;
t465 = -t536 - t537;
t463 = -qJD(5) * t540 - t638;
t462 = (-t538 * t622 - t540 * t618) * t584;
t461 = (-t538 * t618 + t540 * t622) * t584;
t460 = t514 * t621 - t516 * t625;
t459 = t514 * t625 + t516 * t621;
t455 = t507 * t623 - t508 * t619;
t454 = -t506 * t623 - t510 * t619;
t453 = -t500 - t693;
t452 = -t506 * t619 + t510 * t623;
t451 = t497 * t617 - t507 * t616;
t450 = t496 * t617 - t506 * t616;
t449 = t495 * t617 - t510 * t616;
t448 = t497 * t616 + t507 * t617;
t447 = t488 * t617 + t508 * t616;
t446 = t488 * t616 - t508 * t617;
t445 = t512 * t622 + t670;
t444 = -t513 * t618 + t691;
t443 = t512 * t618 - t660;
t442 = t513 * t622 + t694;
t441 = -t464 - t682;
t436 = (qJD(5) - t584) * t540 + t638;
t435 = t476 * t624 - t503 * t620;
t434 = t475 * t624 - t502 * t620;
t433 = t476 * t620 + t503 * t624;
t432 = t475 * t620 + t502 * t624;
t431 = t455 * t617 - t558 * t616;
t430 = t454 * t617 - t557 * t616;
t429 = t454 * t616 + t557 * t617;
t428 = -t498 * t618 + t660;
t427 = t498 * t622 + t670;
t426 = t464 * t622 + t540 * t680;
t425 = t464 * t618 - t540 * t679;
t424 = -t463 * t618 + t538 * t679;
t423 = t463 * t622 + t538 * t680;
t419 = t479 * t622 - t694;
t418 = t479 * t618 + t691;
t417 = -pkin(7) * t494 + t668;
t416 = -pkin(6) * t525 - t486 * t620 + t617 * t655;
t415 = -pkin(6) * t527 - t485 * t620 + t616 * t655;
t414 = pkin(6) * t528 + t486 * t624 + t617 * t665;
t413 = -pkin(6) * t529 + t485 * t624 + t616 * t665;
t410 = -pkin(7) * t487 + t658;
t406 = t451 * t624 + t494 * t620;
t405 = t450 * t624 - t493 * t620;
t404 = t449 * t624 - t492 * t620;
t403 = t451 * t620 - t494 * t624;
t402 = t450 * t620 + t493 * t624;
t401 = t449 * t620 + t492 * t624;
t400 = -t461 * t619 + t462 * t623;
t399 = -t461 * t623 - t462 * t619;
t398 = -pkin(6) * t514 + t421 * t624;
t397 = pkin(6) * t516 + t421 * t620;
t396 = t447 * t624 + t487 * t620;
t395 = t447 * t620 - t487 * t624;
t394 = t422 * t624 + t665;
t393 = t422 * t620 - t655;
t392 = t400 * t617 - t581 * t616;
t391 = -pkin(3) * t494 + t407;
t390 = -pkin(3) * t487 + t408;
t389 = t431 * t624 - t453 * t620;
t388 = t430 * t624 + t452 * t620;
t387 = t431 * t620 + t453 * t624;
t386 = t430 * t620 - t452 * t624;
t380 = -t443 * t619 + t445 * t623;
t379 = -t442 * t619 + t444 * t623;
t378 = -t443 * t623 - t445 * t619;
t377 = -t442 * t623 - t444 * t619;
t376 = -t437 * t622 - t441 * t618;
t375 = -t436 * t622 - t618 * t697;
t374 = -t437 * t618 + t441 * t622;
t373 = -t436 * t618 + t622 * t697;
t372 = -t427 * t619 + t428 * t623;
t371 = t427 * t623 + t428 * t619;
t370 = -t425 * t619 + t426 * t623;
t369 = -t423 * t619 + t424 * t623;
t368 = -t425 * t623 - t426 * t619;
t367 = -t423 * t623 - t424 * t619;
t366 = -pkin(8) * t427 + t661;
t365 = -t418 * t619 + t419 * t623;
t364 = t418 * t623 + t419 * t619;
t363 = -pkin(2) * t448 - pkin(3) * t507 - pkin(7) * t497 + t658;
t362 = -pkin(8) * t418 + t671;
t361 = -pkin(2) * t446 + pkin(3) * t508 - pkin(7) * t488 - t668;
t359 = t370 * t617 - t644;
t358 = t369 * t617 + t644;
t356 = t403 * t621 - t406 * t625;
t355 = t403 * t625 + t406 * t621;
t354 = t380 * t617 - t437 * t616;
t353 = t379 * t617 - t441 * t616;
t352 = t395 * t621 - t396 * t625;
t351 = t395 * t625 + t396 * t621;
t350 = t392 * t624 - t399 * t620;
t349 = t392 * t620 + t399 * t624;
t348 = t393 * t621 - t394 * t625;
t347 = t393 * t625 + t394 * t621;
t346 = t372 * t617 + t616 * t697;
t345 = t372 * t616 - t617 * t697;
t344 = -pkin(4) * t697 + pkin(8) * t428 + t671;
t343 = t365 * t617 + t436 * t616;
t342 = t365 * t616 - t436 * t617;
t341 = -pkin(7) * t452 - t357;
t340 = t360 * t617 + t457 * t616;
t339 = t360 * t616 - t457 * t617;
t338 = -pkin(4) * t436 + pkin(8) * t419 - t661;
t337 = t386 * t621 - t388 * t625;
t336 = t386 * t625 + t388 * t621;
t333 = -pkin(6) * t393 - (pkin(2) * t620 - qJ(3) * t624) * t421;
t331 = -qJ(3) * t448 - t391 * t616 + t417 * t617;
t330 = -qJ(3) * t446 - t390 * t616 + t410 * t617;
t329 = -t374 * t619 + t376 * t623;
t328 = -t373 * t619 + t375 * t623;
t327 = t374 * t623 + t376 * t619;
t326 = -t373 * t623 - t375 * t619;
t325 = -pkin(2) * t429 - pkin(3) * t557 - pkin(7) * t454 - t360;
t324 = t328 * t617 - t491 * t616;
t323 = t359 * t624 - t368 * t620;
t322 = t358 * t624 - t367 * t620;
t321 = t359 * t620 + t368 * t624;
t320 = t358 * t620 + t367 * t624;
t319 = t329 * t617 + t465 * t616;
t318 = t329 * t616 - t465 * t617;
t317 = pkin(6) * t394 - (-pkin(2) * t624 - qJ(3) * t620 - pkin(1)) * t421;
t316 = t354 * t624 - t378 * t620;
t315 = t353 * t624 - t377 * t620;
t314 = t354 * t620 + t378 * t624;
t313 = t353 * t620 + t377 * t624;
t312 = -qJ(3) * t429 + t341 * t617 + t452 * t687;
t311 = t346 * t624 + t371 * t620;
t310 = t346 * t620 - t371 * t624;
t309 = t343 * t624 + t364 * t620;
t308 = t343 * t620 - t364 * t624;
t307 = t340 * t624 + t357 * t620;
t306 = t340 * t620 - t357 * t624;
t305 = -pkin(3) * t327 - pkin(4) * t374;
t304 = -pkin(2) * t339 + pkin(3) * t457 - pkin(7) * t360;
t303 = -pkin(3) * t371 - pkin(4) * t427 + t335;
t302 = -pkin(3) * t364 - pkin(4) * t418 + t334;
t299 = -pkin(6) * t403 + t331 * t624 - t363 * t620;
t298 = -pkin(7) * t371 - t344 * t619 + t366 * t623;
t297 = -pkin(6) * t395 + t330 * t624 - t361 * t620;
t296 = -pkin(7) * t364 - t338 * t619 + t362 * t623;
t295 = -pkin(1) * t448 + pkin(6) * t406 + t331 * t620 + t363 * t624;
t294 = -qJ(3) * t339 + (-pkin(7) * t617 + t687) * t357;
t293 = t324 * t624 - t326 * t620;
t292 = t324 * t620 + t326 * t624;
t291 = -pkin(4) * t409 + pkin(8) * t301;
t290 = t319 * t624 + t327 * t620;
t289 = t319 * t620 - t327 * t624;
t288 = -pkin(1) * t446 + pkin(6) * t396 + t330 * t620 + t361 * t624;
t287 = -pkin(8) * t374 - t300;
t286 = -pkin(4) * t465 + pkin(8) * t376 + t301;
t285 = t310 * t621 - t311 * t625;
t284 = t310 * t625 + t311 * t621;
t283 = t308 * t621 - t309 * t625;
t282 = t308 * t625 + t309 * t621;
t281 = -pkin(6) * t386 + t312 * t624 - t325 * t620;
t280 = -pkin(2) * t345 + pkin(3) * t697 - pkin(7) * t372 - t344 * t623 - t366 * t619;
t279 = t306 * t621 - t307 * t625;
t278 = t306 * t625 + t307 * t621;
t277 = -pkin(2) * t342 + pkin(3) * t436 - pkin(7) * t365 - t338 * t623 - t362 * t619;
t276 = -pkin(1) * t429 + pkin(6) * t388 + t312 * t620 + t325 * t624;
t275 = t301 * t623 - t669;
t274 = t301 * t619 + t659;
t273 = t275 * t617 + t409 * t616;
t272 = t275 * t616 - t409 * t617;
t271 = -qJ(3) * t345 + t298 * t617 - t303 * t616;
t270 = t289 * t621 - t290 * t625;
t269 = t289 * t625 + t290 * t621;
t268 = -qJ(3) * t342 + t296 * t617 - t302 * t616;
t267 = -pkin(6) * t306 + t294 * t624 - t304 * t620;
t266 = -pkin(3) * t274 - pkin(4) * t300;
t265 = -pkin(7) * t327 - t286 * t619 + t287 * t623;
t264 = -pkin(1) * t339 + pkin(6) * t307 + t294 * t620 + t304 * t624;
t263 = -pkin(2) * t318 + pkin(3) * t465 - pkin(7) * t329 - t286 * t623 - t287 * t619;
t262 = -pkin(7) * t274 - pkin(8) * t659 - t291 * t619;
t261 = t273 * t624 + t274 * t620;
t260 = t273 * t620 - t274 * t624;
t259 = -pkin(6) * t310 + t271 * t624 - t280 * t620;
t258 = -qJ(3) * t318 + t265 * t617 - t305 * t616;
t257 = -pkin(6) * t308 + t268 * t624 - t277 * t620;
t256 = -pkin(1) * t345 + pkin(6) * t311 + t271 * t620 + t280 * t624;
t255 = -pkin(1) * t342 + pkin(6) * t309 + t268 * t620 + t277 * t624;
t254 = -pkin(2) * t272 + pkin(3) * t409 - pkin(7) * t275 + pkin(8) * t669 - t291 * t623;
t253 = t260 * t621 - t261 * t625;
t252 = t260 * t625 + t261 * t621;
t251 = -qJ(3) * t272 + t262 * t617 - t266 * t616;
t250 = -pkin(6) * t289 + t258 * t624 - t263 * t620;
t249 = -pkin(1) * t318 + pkin(6) * t290 + t258 * t620 + t263 * t624;
t248 = -pkin(6) * t260 + t251 * t624 - t254 * t620;
t247 = -pkin(1) * t272 + pkin(6) * t261 + t251 * t620 + t254 * t624;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t421, 0, 0, 0, 0, 0, 0, t448, t446, t429, t339, 0, 0, 0, 0, 0, 0, t342, t345, t318, t272; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t588, t587, 0, t541, 0, 0, 0, 0, 0, 0, -t631, -t523, 0, t411, 0, 0, 0, 0, 0, 0, t468, t467, t459, t347, 0, 0, 0, 0, 0, 0, t355, t351, t336, t278, 0, 0, 0, 0, 0, 0, t282, t284, t269, t252; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, -t587, t588, 0, t542, 0, 0, 0, 0, 0, 0, t523, -t631, 0, -t698, 0, 0, 0, 0, 0, 0, t470, t469, t460, t348, 0, 0, 0, 0, 0, 0, t356, t352, t337, t279, 0, 0, 0, 0, 0, 0, t283, t285, t270, t253; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), -t598, t597, 0, 0, 0, 0, 0, 0, 0, t609, -pkin(1) * t575 - t531, -pkin(1) * t572 - t532, 0, -pkin(1) * t473, t599, 0.2e1 * t616 * t673, 0, t600, 0, 0, pkin(1) * t527 - qJ(3) * t561 + t617 * t641, pkin(1) * t525 + qJ(3) * t560 - t616 * t641, pkin(1) * t514 + pkin(2) * t570 + qJ(3) * t565 + t422, pkin(1) * t393 - pkin(2) * t504 + qJ(3) * t422, t500 * t616 - t634, t455 * t616 + t558 * t617, t495 * t616 + t510 * t617, -t616 * t693 + t634, t496 * t616 + t506 * t617, t617 * t591, pkin(1) * t403 - pkin(2) * t494 + qJ(3) * t451 + t391 * t617 + t417 * t616, pkin(1) * t395 - pkin(2) * t487 + qJ(3) * t447 + t390 * t617 + t410 * t616, pkin(1) * t386 + qJ(3) * t430 + t616 * t341 + (-pkin(2) - t686) * t452, pkin(1) * t306 + qJ(3) * t340 + (-pkin(2) + t635) * t357, t370 * t616 + t643, t328 * t616 + t491 * t617, t379 * t616 + t441 * t617, t369 * t616 - t643, t380 * t616 + t437 * t617, t400 * t616 + t581 * t617, pkin(1) * t308 - pkin(2) * t364 + qJ(3) * t343 + t296 * t616 + t302 * t617, pkin(1) * t310 - pkin(2) * t371 + qJ(3) * t346 + t298 * t616 + t303 * t617, pkin(1) * t289 - pkin(2) * t327 + qJ(3) * t319 + t265 * t616 + t305 * t617, pkin(1) * t260 - pkin(2) * t274 + qJ(3) * t273 + t262 * t616 + t266 * t617; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t587, 0, t588, 0, t640, -t564, -t542, -pkin(5) * t542, 0, 0, t523, 0, -t631, 0, t702, t701, t698, pkin(5) * t698 + pkin(6) * t662 + t466 * t625, t633, t515 * t625 + t517 * t621, t467, -t633, -t468, 0, -pkin(5) * t470 + t413 * t625 + t415 * t621, -pkin(5) * t469 + t414 * t625 + t416 * t621, -pkin(5) * t460 + t397 * t625 + t398 * t621, -pkin(5) * t348 + t317 * t625 + t333 * t621, t433 * t625 + t435 * t621, t387 * t625 + t389 * t621, t401 * t625 + t404 * t621, t432 * t625 + t434 * t621, t402 * t625 + t405 * t621, t489 * t625 + t490 * t621, -pkin(5) * t356 + t295 * t625 + t299 * t621, -pkin(5) * t352 + t288 * t625 + t297 * t621, -pkin(5) * t337 + t276 * t625 + t281 * t621, -pkin(5) * t279 + t264 * t625 + t267 * t621, t321 * t625 + t323 * t621, t292 * t625 + t293 * t621, t313 * t625 + t315 * t621, t320 * t625 + t322 * t621, t314 * t625 + t316 * t621, t349 * t625 + t350 * t621, -pkin(5) * t283 + t255 * t625 + t257 * t621, -pkin(5) * t285 + t256 * t625 + t259 * t621, -pkin(5) * t270 + t249 * t625 + t250 * t621, -pkin(5) * t253 + t247 * t625 + t248 * t621; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t588, 0, -t587, 0, t564, t640, t541, pkin(5) * t541, 0, 0, t631, 0, t523, 0, -t701, t702, t411, pkin(5) * t411 - pkin(6) * t653 + t466 * t621, t632, t515 * t621 - t517 * t625, t469, -t632, -t470, 0, pkin(5) * t468 + t413 * t621 - t415 * t625, pkin(5) * t467 + t414 * t621 - t416 * t625, pkin(5) * t459 + t397 * t621 - t398 * t625, pkin(5) * t347 + t317 * t621 - t333 * t625, t433 * t621 - t435 * t625, t387 * t621 - t389 * t625, t401 * t621 - t404 * t625, t432 * t621 - t434 * t625, t402 * t621 - t405 * t625, t489 * t621 - t490 * t625, pkin(5) * t355 + t295 * t621 - t299 * t625, pkin(5) * t351 + t288 * t621 - t297 * t625, pkin(5) * t336 + t276 * t621 - t281 * t625, pkin(5) * t278 + t264 * t621 - t267 * t625, t321 * t621 - t323 * t625, t292 * t621 - t293 * t625, t313 * t621 - t315 * t625, t320 * t621 - t322 * t625, t314 * t621 - t316 * t625, t349 * t621 - t350 * t625, pkin(5) * t282 + t255 * t621 - t257 * t625, pkin(5) * t284 + t256 * t621 - t259 * t625, pkin(5) * t269 + t249 * t621 - t250 * t625, pkin(5) * t252 + t247 * t621 - t248 * t625;];
tauB_reg = t1;
