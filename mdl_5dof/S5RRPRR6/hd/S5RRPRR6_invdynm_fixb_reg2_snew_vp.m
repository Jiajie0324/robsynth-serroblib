% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S5RRPRR6
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
%
% Output:
% m_new_reg [(3*6)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:36
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S5RRPRR6_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR6_invdynm_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR6_invdynm_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRPRR6_invdynm_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRPRR6_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR6_invdynm_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:36:34
% EndTime: 2019-12-05 18:36:51
% DurationCPUTime: 18.18s
% Computational Cost: add. (94132->627), mult. (131905->873), div. (0->0), fcn. (85974->10), ass. (0->434)
t1096 = qJD(1) + qJD(2);
t1092 = t1096 ^ 2;
t1106 = cos(qJ(2));
t1093 = qJDD(1) + qJDD(2);
t1102 = sin(qJ(2));
t1166 = t1102 * t1093;
t1057 = t1092 * t1106 + t1166;
t1162 = t1106 * t1093;
t1060 = t1092 * t1102 - t1162;
t1103 = sin(qJ(1));
t1107 = cos(qJ(1));
t1009 = t1057 * t1103 + t1060 * t1107;
t1037 = pkin(6) * t1057 - g(1) * t1106;
t1212 = pkin(6) * t1060 - g(1) * t1102;
t1223 = pkin(5) * t1009 + t1103 * t1037 + t1107 * t1212;
t1209 = t1057 * t1107 - t1060 * t1103;
t1222 = pkin(5) * t1209 + t1107 * t1037 - t1103 * t1212;
t1100 = sin(qJ(5));
t1099 = cos(pkin(9));
t1169 = t1099 * t1093;
t1077 = -qJDD(4) + t1169;
t1066 = -qJDD(5) + t1077;
t1101 = sin(qJ(4));
t1104 = cos(qJ(5));
t1105 = cos(qJ(4));
t1098 = sin(pkin(9));
t1175 = t1096 * t1098;
t1025 = (-t1100 * t1105 - t1101 * t1104) * t1175;
t1174 = t1096 * t1105;
t1154 = t1098 * t1174;
t1172 = t1098 * t1101;
t1155 = t1096 * t1172;
t1027 = -t1100 * t1155 + t1104 * t1154;
t1182 = t1027 * t1025;
t1213 = -t1066 + t1182;
t1221 = t1100 * t1213;
t1219 = t1104 * t1213;
t1082 = g(2) * t1103 - g(3) * t1107;
t1108 = qJD(1) ^ 2;
t1065 = -pkin(1) * t1108 + t1082;
t1083 = g(2) * t1107 + g(3) * t1103;
t1120 = qJDD(1) * pkin(1) + t1083;
t1018 = t1102 * t1065 - t1106 * t1120;
t1019 = t1106 * t1065 + t1102 * t1120;
t1141 = t1018 * t1102 + t1019 * t1106;
t952 = t1018 * t1106 - t1019 * t1102;
t1184 = t1107 * t952;
t1218 = -t1103 * t1141 + t1184;
t1190 = t1103 * t952;
t1217 = t1107 * t1141 + t1190;
t1079 = t1096 * t1099 - qJD(4);
t1070 = -qJD(5) + t1079;
t1183 = t1025 * t1070;
t1069 = qJD(4) * t1155;
t1163 = t1105 * t1093;
t1033 = t1098 * t1163 - t1069;
t1177 = t1093 * t1101;
t1124 = qJD(4) * t1174 + t1177;
t1117 = t1124 * t1098;
t944 = t1025 * qJD(5) + t1104 * t1033 - t1100 * t1117;
t1214 = t944 - t1183;
t1095 = t1098 ^ 2;
t1110 = t1099 ^ 2;
t1047 = (t1095 + t1110) * t1099 * t1092;
t1149 = t1099 * t1162;
t1014 = -t1047 * t1102 + t1149;
t1016 = t1047 * t1106 + t1099 * t1166;
t1211 = t1014 * t1107 - t1016 * t1103;
t1210 = t1014 * t1103 + t1016 * t1107;
t1205 = 2 * qJD(3);
t994 = -pkin(2) * t1092 + qJ(3) * t1093 + t1019;
t1148 = t1096 * t1205 + t994;
t1199 = t1099 * g(1);
t968 = t1098 * t1148 + t1199;
t1200 = t1098 * g(1);
t969 = t1099 * t1148 - t1200;
t895 = t1098 * t968 + t1099 * t969;
t1140 = t1100 * t1033 + t1104 * t1117;
t912 = (qJD(5) + t1070) * t1027 + t1140;
t1178 = t1079 * t1096;
t1158 = t1101 * t1178;
t998 = t1098 * (t1158 + t1163) - t1069;
t1023 = t1025 ^ 2;
t1024 = t1027 ^ 2;
t1067 = t1070 ^ 2;
t1076 = t1079 ^ 2;
t1206 = t1101 ^ 2;
t1157 = t1079 * t1175;
t1176 = t1095 * t1092;
t1201 = pkin(3) * t1099;
t1135 = -pkin(7) * t1098 - t1201;
t1161 = t1096 * t1135 + t1205;
t1133 = t1096 * t1161 + t994;
t940 = t1099 * t1133 - t1200;
t993 = -pkin(2) * t1093 - qJ(3) * t1092 + qJDD(3) + t1018;
t966 = t1093 * t1135 + t993;
t959 = t1105 * t966;
t851 = -t1077 * pkin(4) - t1033 * pkin(8) + t959 + (-pkin(4) * t1105 * t1176 + pkin(8) * t1157 - t940) * t1101;
t1032 = -pkin(4) * t1079 - pkin(8) * t1154;
t1078 = t1206 * t1176;
t881 = t1101 * t966 + t1105 * t940;
t852 = -pkin(4) * t1078 - pkin(8) * t1117 + t1079 * t1032 + t881;
t799 = t1100 * t852 - t1104 * t851;
t800 = t1100 * t851 + t1104 * t852;
t757 = t1100 * t800 - t1104 * t799;
t1204 = pkin(4) * t757;
t915 = t1183 + t944;
t843 = -t1100 * t912 - t1104 * t915;
t1203 = pkin(4) * t843;
t1202 = pkin(3) * t1098;
t1196 = -pkin(2) * t993 + qJ(3) * t895;
t988 = t1098 * t993;
t989 = t1099 * t993;
t882 = t1199 + pkin(4) * t1117 - pkin(8) * t1078 + (t994 + (t1032 * t1105 + t1161) * t1096) * t1098;
t1195 = t1100 * t882;
t963 = t1066 + t1182;
t1194 = t1100 * t963;
t1193 = t1101 * t757;
t939 = t1098 * t1133 + t1199;
t1192 = t1101 * t939;
t1191 = t1102 * t993;
t1189 = t1104 * t882;
t1188 = t1104 * t963;
t1187 = t1105 * t757;
t1186 = t1105 * t939;
t1185 = t1106 * t993;
t1181 = t1070 * t1027;
t1180 = t1070 * t1100;
t1179 = t1070 * t1104;
t1086 = t1098 * t1093;
t1173 = t1098 * t1099;
t1171 = t1098 * t1102;
t1170 = t1098 * t1106;
t1156 = t1092 * t1101 * t1105;
t1064 = t1095 * t1156;
t1030 = -t1064 + t1077;
t1168 = t1101 * t1030;
t1031 = -t1064 - t1077;
t1167 = t1101 * t1031;
t1165 = t1105 * t1030;
t1164 = t1105 * t1031;
t1159 = pkin(2) * t1169 - qJ(3) * t1047 - t989;
t1097 = t1105 ^ 2;
t1153 = t1097 * t1176;
t1152 = t1098 * t1182;
t1151 = t1098 * t1169;
t1150 = t1099 * t1182;
t1075 = t1092 * t1173;
t758 = t1100 * t799 + t1104 * t800;
t880 = t1101 * t940 - t959;
t827 = t1101 * t880 + t1105 * t881;
t734 = t1101 * t758 + t1187;
t745 = -pkin(4) * t882 + pkin(8) * t758;
t717 = -pkin(7) * t734 - pkin(8) * t1187 - t1101 * t745;
t725 = -pkin(3) * t734 - t1204;
t735 = t1105 * t758 - t1193;
t732 = t1098 * t882 + t1099 * t735;
t1147 = -pkin(2) * t734 + qJ(3) * t732 + t1098 * t717 + t1099 * t725;
t845 = t1100 * t915 - t1104 * t912;
t945 = -t1023 - t1024;
t740 = -pkin(4) * t945 + pkin(8) * t845 + t758;
t741 = -pkin(8) * t843 - t757;
t792 = t1101 * t845 + t1105 * t843;
t723 = -pkin(7) * t792 - t1101 * t740 + t1105 * t741;
t765 = -pkin(3) * t792 - t1203;
t794 = -t1101 * t843 + t1105 * t845;
t782 = t1098 * t945 + t1099 * t794;
t1146 = -pkin(2) * t792 + qJ(3) * t782 + t1098 * t723 + t1099 * t765;
t960 = -t1067 - t1023;
t891 = t1104 * t960 - t1221;
t911 = (qJD(5) - t1070) * t1027 + t1140;
t801 = -pkin(4) * t911 + pkin(8) * t891 - t1189;
t890 = t1100 * t960 + t1219;
t829 = -pkin(8) * t890 + t1195;
t832 = t1101 * t891 + t1105 * t890;
t751 = -pkin(7) * t832 - t1101 * t801 + t1105 * t829;
t1126 = pkin(4) * t890 - t799;
t760 = -pkin(3) * t832 - t1126;
t833 = -t1101 * t890 + t1105 * t891;
t809 = t1098 * t911 + t1099 * t833;
t1145 = -pkin(2) * t832 + qJ(3) * t809 + t1098 * t751 + t1099 * t760;
t983 = -t1024 - t1067;
t902 = -t1100 * t983 + t1188;
t810 = -pkin(4) * t1214 + pkin(8) * t902 + t1195;
t901 = t1104 * t983 + t1194;
t834 = -pkin(8) * t901 + t1189;
t840 = t1101 * t902 + t1105 * t901;
t755 = -pkin(7) * t840 - t1101 * t810 + t1105 * t834;
t1119 = pkin(4) * t901 - t800;
t762 = -pkin(3) * t840 - t1119;
t841 = -t1101 * t901 + t1105 * t902;
t813 = t1098 * t1214 + t1099 * t841;
t1144 = -pkin(2) * t840 + qJ(3) * t813 + t1098 * t755 + t1099 * t762;
t1020 = -t1153 - t1076;
t970 = t1020 * t1105 + t1168;
t858 = -pkin(3) * t970 + t881;
t883 = -pkin(7) * t970 + t1186;
t971 = -t1020 * t1101 + t1165;
t925 = t1098 * t998 + t1099 * t971;
t1143 = -pkin(2) * t970 + qJ(3) * t925 + t1098 * t883 + t1099 * t858;
t1039 = -t1078 - t1076;
t979 = t1039 * t1101 + t1164;
t860 = -pkin(3) * t979 + t880;
t889 = -pkin(7) * t979 + t1192;
t982 = t1039 * t1105 - t1167;
t1045 = t1079 * t1154;
t996 = t1045 - t1117;
t932 = -t1098 * t996 + t1099 * t982;
t1142 = -pkin(2) * t979 + qJ(3) * t932 + t1098 * t889 + t1099 * t860;
t1085 = t1095 * t1093;
t1087 = t1110 * t1093;
t1052 = t1087 + t1085;
t1088 = t1110 * t1092;
t1055 = t1088 + t1176;
t1139 = pkin(2) * t1055 + qJ(3) * t1052 + t895;
t1094 = t1098 * t1095;
t1138 = t1094 * t1156;
t1137 = t1079 * t1155;
t1136 = -pkin(3) * t939 + pkin(7) * t827;
t1073 = qJDD(1) * t1103 + t1107 * t1108;
t1134 = pkin(5) * t1073 - g(1) * t1107;
t893 = t1098 * t969 - t1099 * t968;
t824 = t1101 * t881 - t1105 * t880;
t1132 = t1099 * t1064;
t1021 = t1057 * t1173;
t1022 = -t1075 * t1102 + t1098 * t1149;
t1131 = t1021 * t1107 + t1022 * t1103;
t1130 = t1021 * t1103 - t1022 * t1107;
t1129 = t1082 * t1107 - t1083 * t1103;
t1128 = -t1082 * t1103 - t1083 * t1107;
t1046 = (t1098 * t1110 + t1094) * t1092;
t1127 = -pkin(2) * t1086 + qJ(3) * t1046 + t988;
t995 = t1045 + t1117;
t997 = -t1069 + (-t1158 + t1163) * t1098;
t934 = -t1101 * t995 - t1105 * t997;
t806 = -pkin(7) * t934 - t824;
t1041 = t1078 + t1153;
t936 = t1101 * t997 - t1105 * t995;
t905 = -t1041 * t1098 + t1099 * t936;
t1125 = qJ(3) * t905 + t1098 * t806 + (-pkin(2) - t1201) * t934;
t1122 = -pkin(3) * t998 + pkin(7) * t971 + t1192;
t1121 = pkin(3) * t996 + pkin(7) * t982 - t1186;
t1118 = pkin(3) * t1041 + pkin(7) * t936 + t827;
t805 = t1098 * t939 + t1099 * t827;
t1116 = qJ(3) * t805 + (-pkin(2) + t1135) * t824;
t1115 = -pkin(3) * t945 + pkin(7) * t794 + t1101 * t741 + t1105 * t740;
t1114 = -pkin(3) * t911 + pkin(7) * t833 + t1101 * t829 + t1105 * t801;
t1113 = -pkin(3) * t1214 + pkin(7) * t841 + t1101 * t834 + t1105 * t810;
t1112 = -pkin(3) * t882 + pkin(7) * t735 - pkin(8) * t1193 + t1105 * t745;
t1074 = -qJDD(1) * t1107 + t1103 * t1108;
t1068 = 0.2e1 * t1151;
t1061 = t1099 * t1077;
t1056 = -t1088 + t1176;
t1053 = t1087 - t1085;
t1050 = -pkin(5) * t1074 + g(1) * t1103;
t1042 = -t1078 + t1153;
t1040 = t1076 - t1153;
t1038 = t1078 - t1076;
t1015 = t1046 * t1106 + t1098 * t1166;
t1012 = t1046 * t1102 - t1098 * t1162;
t1006 = t1053 * t1106 + t1056 * t1102;
t1005 = t1052 * t1106 - t1055 * t1102;
t1004 = t1053 * t1102 - t1056 * t1106;
t1003 = t1052 * t1102 + t1055 * t1106;
t1002 = -t1024 + t1067;
t1001 = t1023 - t1067;
t1000 = (-t1097 - t1206) * t1157;
t992 = t1033 * t1101 - t1097 * t1157;
t991 = (-t1105 * t1124 - t1178 * t1206) * t1098;
t987 = (t1033 + t1137) * t1105;
t986 = (t1177 + (qJD(4) - t1079) * t1174) * t1172;
t985 = -pkin(1) * t1057 - t1019;
t984 = -pkin(1) * t1060 - t1018;
t981 = t1038 * t1105 + t1168;
t980 = -t1040 * t1101 + t1164;
t978 = t1038 * t1101 - t1165;
t977 = t1040 * t1105 + t1167;
t974 = t1024 - t1023;
t973 = -t1000 * t1102 - t1077 * t1170;
t972 = t1000 * t1106 - t1077 * t1171;
t957 = t1099 * t987 + t1138;
t956 = t1099 * t986 - t1138;
t955 = t1098 * t987 - t1132;
t954 = t1098 * t986 + t1132;
t949 = -t1012 * t1103 + t1015 * t1107;
t948 = -t1012 * t1107 - t1015 * t1103;
t947 = pkin(1) * t952;
t946 = pkin(1) * g(1) + pkin(6) * t1141;
t943 = -qJD(5) * t1027 - t1140;
t942 = (-t1025 * t1104 - t1027 * t1100) * t1070;
t941 = (-t1025 * t1100 + t1027 * t1104) * t1070;
t937 = -t1101 * t998 + t1105 * t996;
t935 = t1101 * t996 + t1105 * t998;
t931 = -t1098 * t995 + t1099 * t981;
t930 = t1098 * t997 + t1099 * t980;
t929 = t1098 * t982 + t1099 * t996;
t928 = t1098 * t981 + t1099 * t995;
t927 = t1098 * t980 - t1099 * t997;
t924 = t1098 * t971 - t1099 * t998;
t923 = t1001 * t1104 + t1194;
t922 = -t1002 * t1100 + t1219;
t921 = t1001 * t1100 - t1188;
t920 = t1002 * t1104 + t1221;
t918 = pkin(1) * t1014 + t1159;
t917 = pkin(1) * t1012 + t1127;
t910 = t1102 * t992 + t1106 * t957;
t909 = t1102 * t991 + t1106 * t956;
t908 = t1102 * t957 - t1106 * t992;
t907 = t1102 * t956 - t1106 * t991;
t906 = t1042 * t1098 + t1099 * t937;
t904 = -t1042 * t1099 + t1098 * t937;
t903 = t1041 * t1099 + t1098 * t936;
t899 = t1027 * t1180 + t1104 * t944;
t898 = -t1027 * t1179 + t1100 * t944;
t897 = t1025 * t1179 - t1100 * t943;
t896 = t1025 * t1180 + t1104 * t943;
t887 = -pkin(6) * t1012 + t1099 * t1185 - t1102 * t969;
t886 = -pkin(6) * t1014 - t1102 * t968 + t1170 * t993;
t885 = pkin(6) * t1015 + t1099 * t1191 + t1106 * t969;
t884 = -pkin(6) * t1016 + t1106 * t968 + t1171 * t993;
t877 = t1102 * t979 + t1106 * t932;
t876 = t1102 * t978 + t1106 * t931;
t875 = t1102 * t977 + t1106 * t930;
t874 = t1102 * t932 - t1106 * t979;
t873 = t1102 * t931 - t1106 * t978;
t872 = t1102 * t930 - t1106 * t977;
t871 = -t1101 * t941 + t1105 * t942;
t870 = t1101 * t942 + t1105 * t941;
t869 = -pkin(6) * t1003 - t1106 * t893;
t868 = pkin(6) * t1005 - t1102 * t893;
t867 = t1102 * t970 + t1106 * t925;
t866 = t1102 * t925 - t1106 * t970;
t865 = t1106 * t895 + t1191;
t864 = t1102 * t895 - t1185;
t863 = -t1066 * t1098 + t1099 * t871;
t862 = t1066 * t1099 + t1098 * t871;
t861 = pkin(1) * t1003 + t1139;
t857 = t1102 * t935 + t1106 * t906;
t856 = t1102 * t934 + t1106 * t905;
t855 = t1102 * t906 - t1106 * t935;
t854 = t1102 * t905 - t1106 * t934;
t849 = -t1101 * t921 + t1105 * t923;
t848 = -t1101 * t920 + t1105 * t922;
t847 = t1101 * t923 + t1105 * t921;
t846 = t1101 * t922 + t1105 * t920;
t844 = -t1100 * t1214 - t1104 * t911;
t842 = -t1100 * t911 + t1104 * t1214;
t838 = -t1101 * t898 + t1105 * t899;
t837 = -t1101 * t896 + t1105 * t897;
t836 = t1101 * t899 + t1105 * t898;
t835 = t1101 * t897 + t1105 * t896;
t830 = -pkin(2) * t929 - t1121;
t828 = -pkin(2) * t924 - t1122;
t826 = t1099 * t838 - t1152;
t825 = t1099 * t837 + t1152;
t823 = t1098 * t838 + t1150;
t822 = t1098 * t837 - t1150;
t820 = -t1098 * t912 + t1099 * t849;
t819 = t1098 * t915 + t1099 * t848;
t818 = t1098 * t849 + t1099 * t912;
t817 = t1098 * t848 - t1099 * t915;
t816 = pkin(1) * t864 + t1196;
t815 = t1102 * t870 + t1106 * t863;
t814 = t1102 * t863 - t1106 * t870;
t812 = t1098 * t841 - t1099 * t1214;
t808 = t1098 * t833 - t1099 * t911;
t804 = t1098 * t827 - t1099 * t939;
t798 = -pkin(6) * t864 + (pkin(2) * t1102 - qJ(3) * t1106) * t893;
t796 = -qJ(3) * t929 - t1098 * t860 + t1099 * t889;
t795 = -qJ(3) * t924 - t1098 * t858 + t1099 * t883;
t793 = -t1101 * t842 + t1105 * t844;
t791 = t1101 * t844 + t1105 * t842;
t789 = -pkin(2) * t903 - t1118;
t788 = t1098 * t974 + t1099 * t793;
t787 = t1098 * t793 - t1099 * t974;
t786 = t1102 * t836 + t1106 * t826;
t785 = t1102 * t835 + t1106 * t825;
t784 = t1102 * t826 - t1106 * t836;
t783 = t1102 * t825 - t1106 * t835;
t781 = t1098 * t794 - t1099 * t945;
t779 = pkin(6) * t865 + (-pkin(2) * t1106 - qJ(3) * t1102 - pkin(1)) * t893;
t778 = t1102 * t847 + t1106 * t820;
t777 = t1102 * t846 + t1106 * t819;
t776 = t1102 * t820 - t1106 * t847;
t775 = t1102 * t819 - t1106 * t846;
t774 = -qJ(3) * t903 + t1099 * t806 + t1202 * t934;
t773 = t1102 * t840 + t1106 * t813;
t772 = t1102 * t813 - t1106 * t840;
t771 = pkin(1) * t874 + t1142;
t770 = t1102 * t832 + t1106 * t809;
t769 = t1102 * t809 - t1106 * t832;
t768 = pkin(1) * t866 + t1143;
t767 = t1102 * t824 + t1106 * t805;
t766 = t1102 * t805 - t1106 * t824;
t763 = -pkin(2) * t804 - t1136;
t756 = -pkin(6) * t874 - t1102 * t830 + t1106 * t796;
t753 = pkin(1) * t854 + t1125;
t752 = -pkin(6) * t866 - t1102 * t828 + t1106 * t795;
t749 = -pkin(1) * t929 + pkin(6) * t877 + t1102 * t796 + t1106 * t830;
t748 = -qJ(3) * t804 + (-pkin(7) * t1099 + t1202) * t824;
t747 = t1102 * t791 + t1106 * t788;
t746 = t1102 * t788 - t1106 * t791;
t744 = t1102 * t792 + t1106 * t782;
t743 = t1102 * t782 - t1106 * t792;
t742 = -pkin(1) * t924 + pkin(6) * t867 + t1102 * t795 + t1106 * t828;
t739 = -pkin(6) * t854 - t1102 * t789 + t1106 * t774;
t738 = -pkin(2) * t812 - t1113;
t737 = -pkin(2) * t808 - t1114;
t736 = -pkin(1) * t903 + pkin(6) * t856 + t1102 * t774 + t1106 * t789;
t731 = t1098 * t735 - t1099 * t882;
t729 = pkin(1) * t766 + t1116;
t728 = -qJ(3) * t812 - t1098 * t762 + t1099 * t755;
t727 = -qJ(3) * t808 - t1098 * t760 + t1099 * t751;
t726 = -pkin(6) * t766 - t1102 * t763 + t1106 * t748;
t721 = -pkin(1) * t804 + pkin(6) * t767 + t1102 * t748 + t1106 * t763;
t720 = pkin(1) * t772 + t1144;
t719 = pkin(1) * t769 + t1145;
t718 = -pkin(2) * t781 - t1115;
t715 = t1102 * t734 + t1106 * t732;
t714 = t1102 * t732 - t1106 * t734;
t713 = -pkin(6) * t772 - t1102 * t738 + t1106 * t728;
t712 = -qJ(3) * t781 - t1098 * t765 + t1099 * t723;
t711 = -pkin(6) * t769 - t1102 * t737 + t1106 * t727;
t710 = -pkin(1) * t812 + pkin(6) * t773 + t1102 * t728 + t1106 * t738;
t709 = -pkin(1) * t808 + pkin(6) * t770 + t1102 * t727 + t1106 * t737;
t708 = pkin(1) * t743 + t1146;
t707 = -pkin(2) * t731 - t1112;
t706 = -qJ(3) * t731 - t1098 * t725 + t1099 * t717;
t705 = -pkin(6) * t743 - t1102 * t718 + t1106 * t712;
t704 = -pkin(1) * t781 + pkin(6) * t744 + t1102 * t712 + t1106 * t718;
t703 = pkin(1) * t714 + t1147;
t702 = -pkin(6) * t714 - t1102 * t707 + t1106 * t706;
t701 = -pkin(1) * t731 + pkin(6) * t715 + t1102 * t706 + t1106 * t707;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, qJDD(1), t1083, -t1082, 0, 0, 0, 0, 0, 0, 0, t1093, t984, t985, 0, -t947, t1085, t1068, 0, t1087, 0, 0, t918, t917, t861, t816, t955, t904, t927, t954, t928, t1061, t771, t768, t753, t729, t823, t787, t817, t822, t818, t862, t719, t720, t708, t703; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, -t1073, 0, t1074, 0, t1134, t1050, -t1129, -pkin(5) * t1129, 0, 0, -t1209, 0, t1009, 0, t1222, -t1223, -t1217, -pkin(5) * t1217 - pkin(6) * t1190 - t1107 * t946, -t1131, -t1004 * t1107 - t1006 * t1103, t948, t1131, t1211, 0, pkin(5) * t1210 - t1103 * t886 - t1107 * t884, -pkin(5) * t949 - t1103 * t887 - t1107 * t885, -t1103 * t869 - t1107 * t868 - pkin(5) * (-t1003 * t1103 + t1005 * t1107), -t1103 * t798 - t1107 * t779 - pkin(5) * (-t1103 * t864 + t1107 * t865), -t1103 * t910 - t1107 * t908, -t1103 * t857 - t1107 * t855, -t1103 * t875 - t1107 * t872, -t1103 * t909 - t1107 * t907, -t1103 * t876 - t1107 * t873, -t1103 * t973 - t1107 * t972, -t1103 * t756 - t1107 * t749 - pkin(5) * (-t1103 * t874 + t1107 * t877), -t1103 * t752 - t1107 * t742 - pkin(5) * (-t1103 * t866 + t1107 * t867), -t1103 * t739 - t1107 * t736 - pkin(5) * (-t1103 * t854 + t1107 * t856), -t1103 * t726 - t1107 * t721 - pkin(5) * (-t1103 * t766 + t1107 * t767), -t1103 * t786 - t1107 * t784, -t1103 * t747 - t1107 * t746, -t1103 * t777 - t1107 * t775, -t1103 * t785 - t1107 * t783, -t1103 * t778 - t1107 * t776, -t1103 * t815 - t1107 * t814, -t1103 * t711 - t1107 * t709 - pkin(5) * (-t1103 * t769 + t1107 * t770), -t1103 * t713 - t1107 * t710 - pkin(5) * (-t1103 * t772 + t1107 * t773), -t1103 * t705 - t1107 * t704 - pkin(5) * (-t1103 * t743 + t1107 * t744), -t1103 * t702 - t1107 * t701 - pkin(5) * (-t1103 * t714 + t1107 * t715); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, -t1074, 0, -t1073, 0, -t1050, t1134, t1128, pkin(5) * t1128, 0, 0, -t1009, 0, -t1209, 0, t1223, t1222, t1218, pkin(5) * t1218 + pkin(6) * t1184 - t1103 * t946, -t1130, -t1004 * t1103 + t1006 * t1107, t949, t1130, t1210, 0, -pkin(5) * t1211 - t1103 * t884 + t1107 * t886, pkin(5) * t948 - t1103 * t885 + t1107 * t887, t1107 * t869 - t1103 * t868 + pkin(5) * (-t1003 * t1107 - t1005 * t1103), t1107 * t798 - t1103 * t779 + pkin(5) * (-t1103 * t865 - t1107 * t864), -t1103 * t908 + t1107 * t910, -t1103 * t855 + t1107 * t857, -t1103 * t872 + t1107 * t875, -t1103 * t907 + t1107 * t909, -t1103 * t873 + t1107 * t876, -t1103 * t972 + t1107 * t973, t1107 * t756 - t1103 * t749 + pkin(5) * (-t1103 * t877 - t1107 * t874), t1107 * t752 - t1103 * t742 + pkin(5) * (-t1103 * t867 - t1107 * t866), t1107 * t739 - t1103 * t736 + pkin(5) * (-t1103 * t856 - t1107 * t854), t1107 * t726 - t1103 * t721 + pkin(5) * (-t1103 * t767 - t1107 * t766), -t1103 * t784 + t1107 * t786, -t1103 * t746 + t1107 * t747, -t1103 * t775 + t1107 * t777, -t1103 * t783 + t1107 * t785, -t1103 * t776 + t1107 * t778, -t1103 * t814 + t1107 * t815, t1107 * t711 - t1103 * t709 + pkin(5) * (-t1103 * t770 - t1107 * t769), t1107 * t713 - t1103 * t710 + pkin(5) * (-t1103 * t773 - t1107 * t772), t1107 * t705 - t1103 * t704 + pkin(5) * (-t1103 * t744 - t1107 * t743), t1107 * t702 - t1103 * t701 + pkin(5) * (-t1103 * t715 - t1107 * t714); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t1108, 0, 0, -g(1), -t1083, 0, 0, 0, -t1060, 0, -t1057, 0, t1212, t1037, t952, pkin(6) * t952, t1022, t1006, t1015, -t1022, t1016, 0, t886, t887, t869, t798, t910, t857, t875, t909, t876, t973, t756, t752, t739, t726, t786, t747, t777, t785, t778, t815, t711, t713, t705, t702; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1108, 0, qJDD(1), 0, g(1), 0, t1082, 0, 0, 0, t1057, 0, -t1060, 0, -t1037, t1212, t1141, t946, t1021, t1004, t1012, -t1021, -t1014, 0, t884, t885, t868, t779, t908, t855, t872, t907, t873, t972, t749, t742, t736, t721, t784, t746, t775, t783, t776, t814, t709, t710, t704, t701; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1083, -t1082, 0, 0, 0, 0, 0, 0, 0, t1093, t984, t985, 0, -t947, t1085, t1068, 0, t1087, 0, 0, t918, t917, t861, t816, t955, t904, t927, t954, t928, t1061, t771, t768, t753, t729, t823, t787, t817, t822, t818, t862, t719, t720, t708, t703; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1093, 0, -t1092, 0, 0, -g(1), t1018, 0, t1151, t1053, t1046, -t1151, t1047, 0, t988, t989, -t893, -qJ(3) * t893, t957, t906, t930, t956, t931, -t1098 * t1077, t796, t795, t774, t748, t826, t788, t819, t825, t820, t863, t727, t728, t712, t706; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1092, 0, t1093, 0, g(1), 0, t1019, 0, t1075, -t1056, -t1086, -t1075, -t1169, 0, t968, t969, 0, -pkin(2) * t893, -t992, -t935, -t977, -t991, -t978, t1000, t830, t828, t789, t763, -t836, -t791, -t846, -t835, -t847, -t870, t737, t738, t718, t707; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1093, -t1018, -t1019, 0, 0, t1085, t1068, 0, t1087, 0, 0, t1159, t1127, t1139, t1196, t955, t904, t927, t954, t928, t1061, t1142, t1143, t1125, t1116, t823, t787, t817, t822, t818, t862, t1145, t1144, t1146, t1147; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1086, t1169, t1075, 0, t1088, 0, 0, t993, t968, 0, t987, t937, t980, t986, t981, 0, t889, t883, t806, -pkin(7) * t824, t838, t793, t848, t837, t849, t871, t751, t755, t723, t717; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1086, -t1176, t1169, -t1075, 0, -t993, 0, t969, 0, -t1064, -t1042, -t997, t1064, t995, t1077, t860, t858, -pkin(3) * t934, -pkin(3) * t824, t1182, -t974, -t915, -t1182, t912, t1066, t760, t762, t765, t725; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1075, t1056, t1086, t1075, t1169, 0, -t968, -t969, 0, 0, t992, t935, t977, t991, t978, -t1000, t1121, t1122, t1118, t1136, t836, t791, t846, t835, t847, t870, t1114, t1113, t1115, t1112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1033, t996, t1031, -t1137, t1038, t1137, 0, t939, t880, 0, t899, t844, t922, t897, t923, t942, t829, t834, t741, -pkin(8) * t757; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1045, t998, t1040, -t1117, -t1030, t1045, -t939, 0, t881, 0, t898, t842, t920, t896, t921, t941, t801, t810, t740, t745; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1064, t1042, t997, -t1064, -t995, -t1077, -t880, -t881, 0, 0, -t1182, t974, t915, t1182, -t912, -t1066, t1126, t1119, t1203, t1204; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t944, -t911, t1213, t1183, t1001, -t1183, 0, t882, t799, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1181, t1214, t1002, t943, -t963, t1181, -t882, 0, t800, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1182, t974, t915, t1182, -t912, -t1066, -t799, -t800, 0, 0;];
m_new_reg = t1;
