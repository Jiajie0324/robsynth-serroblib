% Calculate minimal parameter regressor of coriolis matrix for
% S5RRPRR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d4,d5,theta3]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x24]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 18:36
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RRPRR6_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRPRR6_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRPRR6_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRPRR6_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 18:36:13
% EndTime: 2019-12-05 18:36:20
% DurationCPUTime: 2.67s
% Computational Cost: add. (3089->306), mult. (7179->383), div. (0->0), fcn. (6821->8), ass. (0->269)
t201 = sin(pkin(9));
t199 = t201 ^ 2;
t202 = cos(pkin(9));
t200 = t202 ^ 2;
t205 = sin(qJ(2));
t333 = t205 * pkin(1);
t196 = qJ(3) + t333;
t342 = qJ(3) + t196;
t351 = t342 * (t200 / 0.2e1 + t199 / 0.2e1);
t273 = qJD(1) + qJD(2);
t203 = sin(qJ(5));
t204 = sin(qJ(4));
t197 = t203 * t204;
t206 = cos(qJ(5));
t207 = cos(qJ(4));
t292 = t206 * t207;
t341 = t197 - t292;
t150 = t341 * t201;
t293 = t206 * t204;
t301 = t203 * t207;
t225 = -t293 - t301;
t151 = t225 * t201;
t64 = -t150 ^ 2 + t151 ^ 2;
t349 = t273 * t64;
t307 = t201 * t151;
t75 = t200 * t225 + t307;
t348 = t273 * t75;
t76 = -t201 * t150 - t341 * t200;
t347 = t273 * t76;
t99 = t225 * t202;
t50 = t273 * t99;
t253 = qJ(3) / 0.2e1 + t196 / 0.2e1;
t346 = t253 * t199;
t255 = t197 / 0.2e1;
t100 = (-t292 + 0.2e1 * t255) * t202;
t51 = t273 * t100;
t191 = t200 + t199;
t167 = t191 * t204;
t123 = t273 * t167;
t168 = t191 * t207;
t124 = t273 * t168;
t169 = (t204 ^ 2 - t207 ^ 2) * t199;
t345 = t273 * t169;
t344 = t273 * t191;
t343 = t273 * t202;
t272 = qJD(4) + qJD(5);
t334 = pkin(4) * t204;
t234 = (t196 + t334) * t201;
t103 = t150 * t234;
t235 = (qJ(3) + t334) * t201;
t120 = t150 * t235;
t339 = t103 / 0.2e1 + t120 / 0.2e1;
t336 = t202 / 0.2e1;
t335 = pkin(2) * t205;
t208 = cos(qJ(2));
t332 = t208 * pkin(1);
t270 = t201 * t332;
t290 = t207 * t205;
t298 = t204 * t208;
t156 = (-t202 * t298 + t290) * pkin(1);
t295 = t206 * t156;
t291 = t207 * t202;
t262 = t208 * t291;
t299 = t204 * t205;
t157 = (t262 + t299) * pkin(1);
t302 = t203 * t157;
t56 = (t295 - t302) * t202 + t151 * t270;
t73 = t75 * qJD(3);
t331 = -t56 * qJD(2) - t73;
t294 = t206 * t157;
t303 = t203 * t156;
t57 = (t294 + t303) * t202 - t150 * t270;
t74 = t76 * qJD(3);
t330 = t57 * qJD(2) + t74;
t329 = pkin(1) * qJD(1);
t328 = pkin(1) * qJD(2);
t327 = pkin(4) * qJD(4);
t326 = pkin(4) * qJD(5);
t174 = -t202 * pkin(3) - t201 * pkin(7) - pkin(2);
t163 = t174 - t332;
t153 = t207 * t163;
t300 = t204 * t202;
t236 = t196 * t300 - t153;
t306 = t201 * t207;
t268 = pkin(8) * t306;
t92 = -t236 - t268;
t325 = t203 * t92;
t127 = -t204 * t163 - t196 * t291;
t192 = t204 * t201 * pkin(8);
t93 = -t127 - t192;
t324 = t203 * t93;
t323 = t206 * t92;
t322 = t206 * t93;
t83 = -t268 + t153 + (-t196 * t204 - pkin(4)) * t202;
t44 = -t206 * t83 + t324;
t321 = t44 * t202;
t45 = -t203 * t83 - t322;
t320 = t45 * t202;
t46 = -t322 - t325;
t319 = t46 * t202;
t47 = t323 - t324;
t318 = t47 * t202;
t164 = t207 * t174;
t115 = -t268 + t164 + (-qJ(3) * t204 - pkin(4)) * t202;
t138 = -qJ(3) * t291 - t204 * t174;
t131 = -t138 - t192;
t304 = t203 * t131;
t60 = -t206 * t115 + t304;
t317 = t60 * t202;
t296 = t206 * t131;
t61 = -t203 * t115 - t296;
t316 = t61 * t202;
t237 = qJ(3) * t300 - t164;
t130 = -t237 - t268;
t305 = t203 * t130;
t62 = -t296 - t305;
t315 = t62 * t202;
t297 = t206 * t130;
t63 = t297 - t304;
t314 = t63 * t202;
t313 = t127 * t202;
t312 = t138 * t202;
t269 = pkin(4) * t306;
t136 = t151 * t269;
t17 = t103 + t136 + t319;
t311 = t17 * qJD(1);
t137 = t150 * t269;
t218 = t151 * t234;
t18 = -t137 + t218 + t318;
t310 = t18 * qJD(1);
t309 = t199 * t204;
t308 = t199 * t207;
t23 = t218 - t321;
t289 = t23 * qJD(1);
t24 = t103 + t320;
t288 = t24 * qJD(1);
t287 = t56 * qJD(1);
t286 = t57 * qJD(1);
t106 = t236 * t202;
t65 = t196 * t309 + t106;
t285 = t65 * qJD(1);
t66 = t196 * t308 - t313;
t284 = t66 * qJD(1);
t149 = t191 * t196;
t98 = (-t335 + (t149 - t333) * t208) * pkin(1);
t283 = t98 * qJD(1);
t271 = t199 * t332;
t121 = -t156 * t202 + t204 * t271;
t159 = t167 * qJD(3);
t282 = t121 * qJD(2) + t159;
t122 = t157 * t202 + t207 * t271;
t160 = t168 * qJD(3);
t281 = t122 * qJD(2) + t160;
t248 = t191 * t208;
t162 = pkin(1) * t248;
t182 = t191 * qJD(3);
t280 = t162 * qJD(2) + t182;
t279 = qJD(3) * t202;
t278 = qJD(4) * t202;
t277 = t121 * qJD(1);
t276 = t122 * qJD(1);
t275 = t149 * qJD(1);
t274 = t162 * qJD(1);
t267 = t205 * t328;
t266 = t205 * t329;
t265 = pkin(4) * t336;
t264 = t333 / 0.2e1;
t263 = t204 * t308;
t261 = t204 * t278;
t260 = t207 * t278;
t259 = t204 * t279;
t258 = t207 * t279;
t254 = -t298 / 0.2e1;
t134 = t237 * t202;
t252 = t106 / 0.2e1 + t134 / 0.2e1;
t250 = pkin(1) * t273;
t249 = pkin(4) * t272;
t244 = t272 * t151;
t243 = t201 * t266;
t242 = qJD(4) * t263;
t241 = -t262 / 0.2e1;
t240 = t265 - t83 / 0.2e1;
t239 = t265 - t115 / 0.2e1;
t238 = t205 * t250;
t233 = t204 * t343;
t232 = t207 * t343;
t216 = -t302 / 0.2e1 + t295 / 0.2e1;
t210 = t216 + t339;
t1 = t136 + (t62 / 0.2e1 + t46 / 0.2e1) * t202 + t210;
t25 = t120 + t136 + t315;
t231 = t1 * qJD(1) + t25 * qJD(2);
t217 = t130 / 0.2e1 + t239;
t19 = t217 * t203;
t220 = t92 / 0.2e1 + t240;
t9 = t220 * t203;
t230 = t9 * qJD(1) + t19 * qJD(2);
t215 = -t294 / 0.2e1 - t303 / 0.2e1;
t209 = -(t253 + t334) * t307 + t215;
t2 = t137 + (-t63 / 0.2e1 - t47 / 0.2e1) * t202 + t209;
t219 = t151 * t235;
t26 = -t137 + t219 + t314;
t229 = t2 * qJD(1) - t26 * qJD(2);
t32 = t219 - t317;
t6 = (t60 / 0.2e1 + t44 / 0.2e1) * t202 + t209;
t228 = t6 * qJD(1) - t32 * qJD(2);
t33 = t120 + t316;
t5 = (t61 / 0.2e1 + t45 / 0.2e1) * t202 + t210;
t227 = t5 * qJD(1) + t33 * qJD(2);
t11 = t220 * t206;
t21 = t217 * t206;
t226 = t11 * qJD(1) + t21 * qJD(2);
t107 = qJ(3) * t309 + t134;
t35 = pkin(1) * t241 + (-t333 / 0.2e1 + t346) * t204 + t252;
t224 = -t35 * qJD(1) - t107 * qJD(2);
t108 = qJ(3) * t308 - t312;
t34 = (t264 - t346) * t207 + (pkin(1) * t254 + t138 / 0.2e1 + t127 / 0.2e1) * t202;
t223 = -t34 * qJD(1) + t108 * qJD(2);
t177 = t191 * qJ(3);
t96 = t264 - t351;
t222 = t96 * qJD(1) - t177 * qJD(2);
t221 = -qJD(4) + t343;
t214 = t221 * t204;
t213 = t221 * t207;
t212 = t219 / 0.2e1 + t218 / 0.2e1 + t215;
t211 = t216 - t339;
t188 = t201 * t267;
t176 = t201 * t260;
t175 = t201 * t261;
t161 = t169 * qJD(4);
t146 = t273 * t263;
t141 = t201 * t232;
t140 = t201 * t233;
t129 = t201 * t213;
t128 = t201 * t214;
t102 = -t99 / 0.2e1 + (-t301 / 0.2e1 - t293 / 0.2e1) * t202;
t101 = -t341 * t336 + (-t292 / 0.2e1 + t255) * t202;
t97 = t264 + t351;
t89 = t102 * qJD(3);
t88 = t101 * qJD(3);
t87 = t100 * qJD(3);
t86 = t99 * qJD(3);
t85 = t260 - t124;
t84 = t261 - t123;
t70 = t151 * t343;
t69 = t202 * t244;
t68 = t150 * t343;
t67 = t272 * t202 * t150;
t49 = t273 * t151 * t150;
t48 = t150 * t244;
t43 = (-qJD(5) + t221) * t151;
t42 = (-t343 + t272) * t150;
t37 = -t312 / 0.2e1 - t313 / 0.2e1 + (t202 * t254 + t290 / 0.2e1) * pkin(1) + t342 * t308 / 0.2e1;
t36 = (t241 - t299 / 0.2e1) * pkin(1) - t252 - t342 * t309 / 0.2e1;
t31 = t272 * t225 - t50;
t30 = t272 * t341 - t51;
t27 = t272 * t64;
t22 = t304 - t297 / 0.2e1 + t239 * t206;
t20 = -t296 - t305 / 0.2e1 + t239 * t203;
t16 = -t272 * t100 - t347;
t15 = t272 * t101 + t347;
t14 = t272 * t102 - t348;
t13 = -t272 * t99 + t348;
t12 = t324 - t323 / 0.2e1 + t240 * t206;
t10 = -t322 - t325 / 0.2e1 + t240 * t203;
t8 = -t316 / 0.2e1 - t320 / 0.2e1 + t211;
t7 = -t317 / 0.2e1 - t321 / 0.2e1 + t212;
t4 = t314 / 0.2e1 + t318 / 0.2e1 - t137 + t212;
t3 = -t315 / 0.2e1 - t319 / 0.2e1 - t136 + t211;
t28 = [0, 0, 0, 0, -t267, -t208 * t328, -t202 * t267, t188, t280, t98 * qJD(2) + t149 * qJD(3), -t242, t161, t175, t176, 0, t66 * qJD(4) + t282, -t65 * qJD(4) + t281, -t48, t27, -t69, -t67, 0, -t17 * qJD(4) - t24 * qJD(5) + t331, t18 * qJD(4) + t23 * qJD(5) + t330; 0, 0, 0, 0, -t238, -t208 * t250, -t202 * t238, t188 + t243, t274 + t280, t283 + t97 * qJD(3) + (qJ(3) * t248 - t335) * t328, -t242, t161, t175, t176, 0, t37 * qJD(4) + t277 + t282, t36 * qJD(4) + t276 + t281, -t48, t27, -t69, -t67, 0, t3 * qJD(4) + t8 * qJD(5) - t287 + t331, t4 * qJD(4) + t7 * qJD(5) + t286 + t330; 0, 0, 0, 0, 0, 0, 0, 0, t344, t97 * qJD(2) + t275, 0, 0, 0, 0, 0, t123, t124, 0, 0, 0, 0, 0, t14, t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t146, t345, t128, t129, 0, t37 * qJD(2) + t127 * qJD(4) + t284, t36 * qJD(2) + qJD(4) * t236 - t285, -t49, t349, -t43, t42, 0, t3 * qJD(2) + t46 * qJD(4) + t10 * qJD(5) - t311 + t89, t4 * qJD(2) - t47 * qJD(4) + t12 * qJD(5) + t310 + t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t49, t349, -t43, t42, 0, t8 * qJD(2) + t10 * qJD(4) + t45 * qJD(5) - t288 + t89, t7 * qJD(2) + t12 * qJD(4) + t44 * qJD(5) + t289 + t88; 0, 0, 0, 0, t266, t208 * t329, t202 * t266, -t243, t182 - t274, -t96 * qJD(3) - t283, -t242, t161, t175, t176, 0, -t34 * qJD(4) + t159 - t277, -t35 * qJD(4) + t160 - t276, -t48, t27, -t69, -t67, 0, -t1 * qJD(4) - t5 * qJD(5) + t287 - t73, -t2 * qJD(4) - t6 * qJD(5) - t286 + t74; 0, 0, 0, 0, 0, 0, 0, 0, t182, t177 * qJD(3), -t242, t161, t175, t176, 0, t108 * qJD(4) + t159, -t107 * qJD(4) + t160, -t48, t27, -t69, -t67, 0, -t25 * qJD(4) - t33 * qJD(5) - t73, t26 * qJD(4) + t32 * qJD(5) + t74; 0, 0, 0, 0, 0, 0, 0, 0, t344, -t222, 0, 0, 0, 0, 0, t123, t124, 0, 0, 0, 0, 0, t14, t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t146, t345, t128, t129, 0, t138 * qJD(4) + t223, qJD(4) * t237 + t224, -t49, t349, -t43, t42, 0, t62 * qJD(4) + t20 * qJD(5) - t231 + t89, -t63 * qJD(4) + t22 * qJD(5) - t229 + t88; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t49, t349, -t43, t42, 0, t20 * qJD(4) + t61 * qJD(5) - t227 + t89, t22 * qJD(4) + t60 * qJD(5) - t228 + t88; 0, 0, 0, 0, 0, 0, 0, 0, -t344, t96 * qJD(2) - t275, 0, 0, 0, 0, 0, t84, t85, 0, 0, 0, 0, 0, t13, t16; 0, 0, 0, 0, 0, 0, 0, 0, -t344, t222, 0, 0, 0, 0, 0, t84, t85, 0, 0, 0, 0, 0, t13, t16; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t214, t213, 0, 0, 0, 0, 0, t31, t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31, t30; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t146, -t345, -t140, -t141, 0, t34 * qJD(2) - t259 - t284, t35 * qJD(2) - t258 + t285, t49, -t349, t70, t68, 0, t1 * qJD(2) + t9 * qJD(5) + t311 + t86, t2 * qJD(2) + t11 * qJD(5) - t310 + t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t146, -t345, -t140, -t141, 0, -t223 - t259, -t224 - t258, t49, -t349, t70, t68, 0, t19 * qJD(5) + t231 + t86, t21 * qJD(5) + t229 + t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t233, -t232, 0, 0, 0, 0, 0, t50, t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t203 * t326, -t206 * t326; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t203 * t249 + t230, -t206 * t249 + t226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, -t349, t70, t68, 0, t5 * qJD(2) - t9 * qJD(4) + t288 + t86, t6 * qJD(2) - t11 * qJD(4) - t289 + t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, -t349, t70, t68, 0, -t19 * qJD(4) + t227 + t86, -t21 * qJD(4) + t228 + t87; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t50, t51; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t203 * t327 - t230, t206 * t327 - t226; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t28;
