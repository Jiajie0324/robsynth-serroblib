% Calculate minimal parameter regressor of coriolis matrix for
% S5RPRRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x28]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:11
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5RPRRR10_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR10_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR10_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR10_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:10:48
% EndTime: 2019-12-31 19:10:58
% DurationCPUTime: 4.33s
% Computational Cost: add. (4727->319), mult. (10168->453), div. (0->0), fcn. (11655->8), ass. (0->277)
t234 = sin(pkin(9));
t235 = cos(pkin(9));
t238 = sin(qJ(3));
t381 = cos(qJ(3));
t211 = t238 * t234 - t381 * t235;
t386 = -t211 / 0.2e1;
t285 = t381 * t234;
t333 = t238 * t235;
t213 = t285 + t333;
t237 = sin(qJ(4));
t239 = cos(qJ(5));
t332 = t239 * t237;
t236 = sin(qJ(5));
t240 = cos(qJ(4));
t336 = t236 * t240;
t216 = t332 + t336;
t100 = t213 * t216;
t139 = t237 * t213;
t375 = pkin(6) + qJ(2);
t218 = t375 * t234;
t219 = t375 * t235;
t166 = t381 * t218 + t238 * t219;
t110 = pkin(4) * t139 + t166;
t331 = t239 * t240;
t214 = t236 * t237 - t331;
t387 = pkin(7) + pkin(8);
t220 = t387 * t237;
t221 = t387 * t240;
t261 = -t239 * t220 - t236 * t221;
t229 = -t240 * pkin(4) - pkin(3);
t402 = -t229 / 0.2e1;
t401 = t100 * t402 - t110 * t214 / 0.2e1 + t261 * t386;
t385 = t216 / 0.2e1;
t294 = qJD(4) + qJD(5);
t123 = t139 * t236 - t213 * t331;
t171 = -t236 * t220 + t239 * t221;
t399 = t110 * t385 + t123 * t402 + t171 * t386;
t137 = t237 * t211;
t377 = t213 * pkin(3);
t378 = t211 * pkin(7);
t156 = t377 + t378;
t147 = t237 * t156;
t155 = t166 * t240;
t321 = t155 - t147;
t75 = pkin(8) * t137 - t321;
t359 = t239 * t75;
t286 = -t359 / 0.2e1;
t142 = t240 * t211;
t148 = t240 * t156;
t347 = t166 * t237;
t376 = t213 * pkin(4);
t64 = pkin(8) * t142 + t148 + t347 + t376;
t366 = t236 * t64;
t258 = -t366 / 0.2e1 + t286;
t14 = t258 - t401;
t298 = t213 * qJD(1);
t158 = t211 * t298;
t203 = t285 / 0.2e1 + t333 / 0.2e1;
t392 = t203 * qJD(4) + t158;
t363 = t236 * t75;
t287 = -t363 / 0.2e1;
t362 = t239 * t64;
t257 = t287 + t362 / 0.2e1;
t13 = t257 - t399;
t398 = t294 * t171;
t397 = t294 * t261;
t394 = t211 * t294;
t393 = t214 * t294;
t204 = t211 ^ 2;
t205 = t213 ^ 2;
t391 = -t205 - t204;
t293 = t205 - t204;
t390 = t203 * qJD(5) + t392;
t232 = t237 ^ 2;
t233 = t240 ^ 2;
t225 = t233 - t232;
t334 = t237 * t240;
t275 = 0.2e1 * t213 * t334;
t244 = qJD(1) * t275 - t225 * qJD(3);
t379 = t211 * pkin(4);
t340 = t213 * t240;
t227 = -t235 * pkin(2) - pkin(1);
t267 = t211 * pkin(3) - t213 * pkin(7);
t135 = t227 + t267;
t167 = -t238 * t218 + t381 * t219;
t335 = t237 * t167;
t76 = -t240 * t135 + t335;
t71 = -pkin(8) * t340 - t76;
t58 = t71 + t379;
t57 = t239 * t58;
t389 = -t57 / 0.2e1;
t388 = -t58 / 0.2e1;
t384 = t237 / 0.2e1;
t383 = t239 / 0.2e1;
t382 = -t240 / 0.2e1;
t380 = pkin(4) * t237;
t35 = t100 * t214 + t216 * t123;
t374 = t294 * t35;
t56 = -t100 * t385 + t123 * t214 / 0.2e1;
t373 = t294 * t56;
t254 = t336 / 0.2e1 + t332 / 0.2e1;
t89 = (t385 + t254) * t211;
t372 = t294 * t89;
t94 = t254 * t211 + t216 * t386;
t371 = t294 * t94;
t370 = pkin(4) * qJD(4);
t369 = pkin(4) * qJD(5);
t111 = -pkin(4) * t137 + t167;
t124 = t216 * t211;
t330 = t240 * t167;
t77 = t237 * t135 + t330;
t72 = -pkin(8) * t139 + t77;
t364 = t236 * t72;
t27 = -t57 + t364;
t1 = (t362 - t363) * t211 - t27 * t213 + t111 * t100 - t110 * t124;
t368 = t1 * qJD(1);
t127 = t214 * t211;
t360 = t239 * t72;
t28 = t236 * t58 + t360;
t2 = -(t359 + t366) * t211 - t28 * t213 - t111 * t123 + t110 * t127;
t367 = t2 * qJD(1);
t365 = t236 * t71;
t361 = t239 * t71;
t290 = -t379 / 0.2e1;
t269 = t290 + t71 / 0.2e1;
t7 = (t388 + t269) * t236;
t358 = t7 * qJD(1);
t9 = t269 * t239 + t389;
t357 = t9 * qJD(1);
t292 = pkin(4) * t340;
t31 = -t360 - t365;
t355 = t110 * t123;
t11 = t100 * t292 + t31 * t211 - t355;
t356 = t11 * qJD(1);
t354 = t110 * t100;
t32 = t361 - t364;
t12 = -t123 * t292 - t32 * t211 - t354;
t351 = t12 * qJD(1);
t350 = t123 * t213;
t349 = t124 * t211;
t348 = t127 * t211;
t17 = t27 * t211 - t354;
t346 = t17 * qJD(1);
t18 = -t28 * t211 - t355;
t343 = t18 * qJD(1);
t21 = t148 * t211 + (-t76 + t335) * t213;
t342 = t21 * qJD(1);
t341 = t213 * t100;
t22 = (-t77 + t330) * t213 + (t321 - t155) * t211;
t339 = t22 * qJD(1);
t36 = -t100 * t127 - t123 * t124;
t329 = t36 * qJD(1);
t43 = -t139 * t166 + t76 * t211;
t328 = t43 * qJD(1);
t44 = t166 * t340 - t77 * t211;
t327 = t44 * qJD(1);
t52 = -t341 + t349;
t326 = t52 * qJD(1);
t53 = t341 + t349;
t325 = t53 * qJD(1);
t54 = t348 - t350;
t324 = t54 * qJD(1);
t55 = -t348 - t350;
t323 = t55 * qJD(1);
t79 = t89 * qJD(1);
t278 = t127 / 0.2e1;
t280 = t239 * t386;
t288 = t236 * t137;
t319 = t288 / 0.2e1 + t240 * t280;
t90 = t278 + t319;
t80 = t90 * qJD(1);
t279 = -t127 / 0.2e1;
t320 = -t288 / 0.2e1 + t142 * t383;
t91 = t279 + t320;
t82 = t91 * qJD(1);
t98 = t213 * t214;
t322 = t98 * qJD(1);
t222 = t234 ^ 2 + t235 ^ 2;
t318 = qJD(1) * t123;
t317 = qJD(2) * t240;
t316 = qJD(3) * t216;
t315 = qJD(3) * t229;
t314 = qJD(3) * t240;
t313 = qJD(4) * t237;
t312 = qJD(4) * t240;
t311 = qJD(5) * t229;
t310 = t100 * qJD(1);
t105 = t293 * t237;
t309 = t105 * qJD(1);
t106 = t391 * t237;
t308 = t106 * qJD(1);
t107 = t293 * t240;
t307 = t107 * qJD(1);
t306 = t293 * qJD(1);
t305 = t137 * qJD(1);
t304 = t139 * qJD(1);
t303 = t142 * qJD(1);
t146 = t391 * t240;
t302 = t146 * qJD(1);
t301 = t203 * qJD(1);
t299 = t211 * qJD(1);
t202 = t211 * qJD(3);
t297 = t213 * qJD(3);
t217 = t222 * qJ(2);
t296 = t217 * qJD(1);
t295 = t222 * qJD(1);
t291 = -t380 / 0.2e1;
t289 = t376 / 0.2e1;
t284 = t211 * t312;
t157 = t211 * t297;
t283 = t237 * t312;
t282 = t237 * t314;
t281 = t240 * t298;
t277 = t147 / 0.2e1 - t155 / 0.2e1;
t276 = pkin(4) * t294;
t273 = t294 * t216;
t272 = t240 * t289;
t271 = qJD(1) * t227 + qJD(2);
t270 = -qJD(4) - t299;
t268 = t289 + t64 / 0.2e1;
t265 = qJD(3) * t275;
t264 = qJD(5) - t270;
t133 = t214 * t380 + t229 * t216;
t4 = (-t100 * t384 + (t214 * t382 + t383) * t213) * pkin(4) + t13;
t263 = t4 * qJD(1) - t133 * qJD(3);
t134 = -t229 * t214 + t216 * t380;
t3 = (t123 * t384 + (-t236 / 0.2e1 + t216 * t382) * t213) * pkin(4) + t14;
t262 = t3 * qJD(1) - t134 * qJD(3);
t47 = t100 ^ 2 - t123 ^ 2;
t19 = t47 * qJD(1) + t35 * qJD(3);
t120 = t214 ^ 2 - t216 ^ 2;
t25 = t35 * qJD(1) + t120 * qJD(3);
t260 = t270 * t240;
t259 = t378 / 0.2e1 + t377 / 0.2e1;
t247 = t259 * t240;
t41 = -t148 / 0.2e1 - t247;
t256 = pkin(3) * t237 * qJD(3) - t41 * qJD(1);
t243 = t259 * t237 + t155 / 0.2e1;
t39 = t243 + t277;
t255 = pkin(3) * t314 - t39 * qJD(1);
t30 = -t56 * qJD(3) - t100 * t318;
t253 = t13 * qJD(1) - t216 * t315;
t252 = t14 * qJD(1) + t214 * t315;
t38 = -t56 * qJD(1) + t214 * t316;
t251 = t213 * t260;
t136 = (t232 / 0.2e1 - t233 / 0.2e1) * t213;
t250 = -t136 * qJD(1) + t282;
t246 = qJD(1) * t205 * t334 + t136 * qJD(3);
t145 = t225 * t205;
t245 = t145 * qJD(1) + t265;
t198 = t203 * qJD(3);
t195 = t240 * t297;
t130 = t137 * qJD(4);
t129 = t136 * qJD(4);
t114 = -t305 - t313;
t93 = t278 + t320;
t92 = t279 + t319;
t88 = t94 * qJD(2);
t83 = t93 * qJD(2);
t81 = t91 * qJD(2);
t78 = t89 * qJD(2);
t63 = -t273 - t79;
t62 = -t82 + t393;
t61 = -t80 - t393;
t46 = t90 * qJD(3) + t100 * t299;
t45 = t89 * qJD(3) - t123 * t299;
t42 = t347 + t148 / 0.2e1 - t247;
t40 = t243 - t277;
t24 = t92 * qJD(3) - t100 * t264;
t23 = t94 * qJD(3) + t123 * t264;
t16 = t257 + t399;
t15 = t258 + t401;
t10 = pkin(4) * t280 + t364 + t389 - t361 / 0.2e1;
t8 = -t360 - t365 / 0.2e1 + (t290 + t388) * t236;
t6 = t123 * t291 + t216 * t272 - t268 * t236 + t286 + t401;
t5 = -t100 * t291 + t214 * t272 + t268 * t239 + t287 + t399;
t20 = [0, 0, 0, 0, 0, t222 * qJD(2), t217 * qJD(2), -t157, -t293 * qJD(3), 0, 0, 0, t227 * t297, -t227 * t202, -t157 * t233 - t205 * t283, -t145 * qJD(4) + t211 * t265, -t211 * t213 * t313 + t107 * qJD(3), -t105 * qJD(3) - t213 * t284, t157, -t106 * qJD(2) + t21 * qJD(3) + t44 * qJD(4), -t146 * qJD(2) + t22 * qJD(3) + t43 * qJD(4), (-qJD(3) * t127 + t100 * t294) * t123, t36 * qJD(3) + t294 * t47, t54 * qJD(3) - t100 * t394, t52 * qJD(3) + t123 * t394, t157, t53 * qJD(2) + t1 * qJD(3) + t11 * qJD(4) + t18 * qJD(5), t55 * qJD(2) + t2 * qJD(3) + t12 * qJD(4) + t17 * qJD(5); 0, 0, 0, 0, 0, t295, t296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t308, -t302, 0, 0, 0, 0, 0, t325 + t371, t294 * t93 + t323; 0, 0, 0, 0, 0, 0, 0, -t158, -t306, -t202, -t297, 0, -t167 * qJD(3) + t227 * t298, t166 * qJD(3) - t227 * t299, -t129 + (-t233 * t298 - t282) * t211, t244 * t211 - 0.2e1 * t213 * t283, t237 * t297 + t307, t195 - t309, t392, t342 + (t237 * t267 - t330) * qJD(3) + t42 * qJD(4), t339 + (t240 * t267 + t335) * qJD(3) + t40 * qJD(4), (t316 - t318) * t127 + t373, t329 + (t216 * t124 - t127 * t214) * qJD(3) + t374, t216 * t297 + t294 * t92 + t324, -t214 * t297 + t326 + t371, t390, t368 + (t111 * t214 - t229 * t124 + t213 * t261) * qJD(3) + t5 * qJD(4) + t16 * qJD(5), t367 + (t111 * t216 + t229 * t127 - t171 * t213) * qJD(3) + t6 * qJD(4) + t15 * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t246, -t245, t270 * t139, t251, t198, t42 * qJD(3) - t77 * qJD(4) + t327, t40 * qJD(3) + t76 * qJD(4) + t328, -t30, t19, t24, t23, t198, t5 * qJD(3) + t31 * qJD(4) + t8 * qJD(5) + t356 + t88, t6 * qJD(3) - t32 * qJD(4) + t10 * qJD(5) + t351 + t83; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t30, t19, t24, t23, t198, t16 * qJD(3) + t8 * qJD(4) - t28 * qJD(5) + t343 + t88, t15 * qJD(3) + t10 * qJD(4) + t27 * qJD(5) + t346 + t83; 0, 0, 0, 0, 0, -t295, -t296, 0, 0, 0, 0, 0, t297, -t202, 0, 0, 0, 0, 0, -t130 + t195 + t308, -t139 * qJD(3) - t284 + t302, 0, 0, 0, 0, 0, -t98 * qJD(3) - t325 - t372, -t100 * qJD(3) - t294 * t91 - t323; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t298, -t299, 0, 0, 0, 0, 0, t281, -t304, 0, 0, 0, 0, 0, -t322, -t310; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t114, t260, 0, 0, 0, 0, 0, t63, t62; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t63, t62; 0, 0, 0, 0, 0, 0, 0, t158, t306, 0, 0, 0, -t271 * t213, t271 * t211, t158 * t233 - t129, 0.2e1 * t237 * t251, t142 * qJD(4) - t307, -t130 + t309, -t392, t41 * qJD(4) - t213 * t317 - t342, t139 * qJD(2) + t39 * qJD(4) - t339, t127 * t318 + t373, -t329 + t374, -t294 * t90 - t324, -t326 - t372, -t390, t98 * qJD(2) - t4 * qJD(4) - t13 * qJD(5) - t368, t100 * qJD(2) - t3 * qJD(4) - t14 * qJD(5) - t367; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t298, t299, 0, 0, 0, 0, 0, -t281, t304, 0, 0, 0, 0, 0, t322, t310; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t283, t225 * qJD(4), 0, 0, 0, -pkin(3) * t313, -pkin(3) * t312, -t214 * t273, t294 * t120, 0, 0, 0, t133 * qJD(4) + t216 * t311, t134 * qJD(4) - t214 * t311; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t250, -t244, t303 + t312, t114, -t301, -pkin(7) * t312 - t256, pkin(7) * t313 - t255, -t38, t25, t61, t63, -t301, -t263 - t398, -t262 - t397; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t38, t25, t61, t63, -t301, -t253 - t398, -t252 - t397; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t246, t245, -t142 * qJD(3) + t158 * t237, t137 * qJD(3) + t211 * t281, t198, t137 * qJD(2) - t41 * qJD(3) - t327, -t39 * qJD(3) + t211 * t317 - t328, t30, -t19, t46, t45, t198, t4 * qJD(3) + t7 * qJD(5) - t356 + t78, t3 * qJD(3) + t9 * qJD(5) - t351 + t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t305, t240 * t299, 0, 0, 0, 0, 0, t79, t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t250, t244, -t303, t305, t301, t256, t255, t38, -t25, t80, t79, t301, t263, t262; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t236 * t369, -t239 * t369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t236 * t276 + t358, -t239 * t276 + t357; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t30, -t19, t46, t45, t198, t13 * qJD(3) - t7 * qJD(4) - t343 + t78, t14 * qJD(3) - t9 * qJD(4) - t346 + t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, t82; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38, -t25, t80, t79, t301, t253, t252; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t236 * t370 - t358, t239 * t370 - t357; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t20;
