% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S5RPRRR10
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
%
% Output:
% f_new_reg [(3*6)x(6*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:11
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S5RPRRR10_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR10_invdynf_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR10_invdynf_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR10_invdynf_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR10_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR10_invdynf_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:11:33
% EndTime: 2019-12-31 19:11:36
% DurationCPUTime: 3.73s
% Computational Cost: add. (21012->249), mult. (50163->339), div. (0->0), fcn. (37966->10), ass. (0->194)
t1537 = qJD(1) ^ 2;
t1532 = sin(qJ(1));
t1536 = cos(qJ(1));
t1513 = t1532 * g(1) - t1536 * g(2);
t1551 = -qJDD(2) + t1513;
t1527 = cos(pkin(9));
t1555 = pkin(2) * t1527 + pkin(1);
t1526 = sin(pkin(9));
t1523 = t1526 ^ 2;
t1524 = t1527 ^ 2;
t1560 = t1523 + t1524;
t1482 = t1555 * qJDD(1) + (t1560 * pkin(6) + qJ(2)) * t1537 + t1551;
t1510 = t1560 * t1537;
t1531 = sin(qJ(3));
t1535 = cos(qJ(3));
t1504 = (t1526 * t1531 - t1527 * t1535) * qJD(1);
t1501 = qJD(4) + t1504;
t1497 = qJD(5) + t1501;
t1583 = qJD(5) + t1497;
t1549 = t1526 * t1535 + t1527 * t1531;
t1582 = t1549 * qJDD(1);
t1579 = qJD(3) ^ 2;
t1506 = t1549 * qJD(1);
t1530 = sin(qJ(4));
t1534 = cos(qJ(4));
t1492 = -t1534 * qJD(3) + t1530 * t1506;
t1494 = t1530 * qJD(3) + t1534 * t1506;
t1529 = sin(qJ(5));
t1533 = cos(qJ(5));
t1469 = t1533 * t1492 + t1529 * t1494;
t1578 = t1469 ^ 2;
t1471 = -t1529 * t1492 + t1533 * t1494;
t1577 = t1471 ^ 2;
t1576 = t1492 ^ 2;
t1575 = t1494 ^ 2;
t1574 = t1497 ^ 2;
t1573 = t1501 ^ 2;
t1572 = t1504 ^ 2;
t1571 = t1506 ^ 2;
t1570 = t1527 * g(3);
t1569 = qJD(2) * qJD(1);
t1568 = t1471 * t1469;
t1567 = t1494 * t1492;
t1566 = t1501 * t1492;
t1565 = t1504 * qJD(3);
t1500 = t1506 * qJD(3);
t1564 = t1506 * t1504;
t1563 = t1524 * t1537;
t1562 = qJD(4) - t1501;
t1561 = qJD(5) - t1497;
t1552 = t1536 * g(1) + t1532 * g(2);
t1542 = -t1537 * pkin(1) + qJDD(1) * qJ(2) - t1552;
t1489 = -t1526 * g(3) + (t1542 + 0.2e1 * t1569) * t1527;
t1519 = t1527 * qJDD(1);
t1478 = -pkin(2) * t1563 + pkin(6) * t1519 + t1489;
t1556 = -0.2e1 * t1569;
t1540 = -t1570 + (t1556 + t1555 * t1537 + (-pkin(6) - qJ(2)) * qJDD(1) + t1552) * t1526;
t1451 = t1535 * t1478 + t1531 * t1540;
t1480 = t1504 * pkin(3) - t1506 * pkin(7);
t1436 = -t1579 * pkin(3) + qJDD(3) * pkin(7) - t1504 * t1480 + t1451;
t1487 = t1582 - t1565;
t1559 = t1526 * qJDD(1);
t1550 = -t1535 * t1519 + t1531 * t1559;
t1547 = t1500 + t1550;
t1441 = (-t1487 + t1565) * pkin(7) + (t1547 + t1500) * pkin(3) - t1482;
t1408 = t1534 * t1436 + t1530 * t1441;
t1558 = t1532 * qJDD(1);
t1557 = t1536 * qJDD(1);
t1407 = -t1530 * t1436 + t1534 * t1441;
t1548 = -t1530 * qJDD(3) - t1534 * t1487;
t1462 = -t1492 * qJD(4) - t1548;
t1553 = -t1534 * qJDD(3) + t1530 * t1487;
t1546 = t1494 * qJD(4) + t1553;
t1554 = -t1529 * t1462 - t1533 * t1546;
t1450 = -t1531 * t1478 + t1535 * t1540;
t1544 = qJDD(4) + t1547;
t1543 = -qJDD(5) - t1544;
t1435 = -qJDD(3) * pkin(3) - t1579 * pkin(7) + t1506 * t1480 - t1450;
t1452 = t1544 - t1567;
t1541 = -t1533 * t1462 + t1529 * t1546;
t1515 = t1527 * t1537 * t1526;
t1512 = -t1536 * t1537 - t1558;
t1511 = -t1532 * t1537 + t1557;
t1509 = t1560 * qJDD(1);
t1508 = t1527 * t1510;
t1507 = t1526 * t1510;
t1502 = qJDD(1) * pkin(1) + t1537 * qJ(2) + t1551;
t1495 = -t1571 - t1579;
t1488 = -t1570 + (-t1542 + t1556) * t1526;
t1486 = t1582 - 0.2e1 * t1565;
t1485 = 0.2e1 * t1500 + t1550;
t1484 = -qJDD(3) - t1564;
t1483 = qJDD(3) - t1564;
t1481 = -t1572 - t1579;
t1477 = t1501 * pkin(4) - t1494 * pkin(8);
t1473 = -t1571 - t1572;
t1472 = -t1547 + t1500;
t1468 = -t1573 - t1575;
t1467 = t1535 * t1484 - t1531 * t1495;
t1466 = t1531 * t1484 + t1535 * t1495;
t1465 = -t1573 - t1576;
t1464 = -t1526 * t1488 + t1527 * t1489;
t1463 = t1527 * t1488 + t1526 * t1489;
t1458 = -t1575 - t1576;
t1457 = t1535 * t1472 + t1531 * t1582;
t1456 = t1531 * t1472 - t1535 * t1582;
t1455 = t1535 * t1481 - t1531 * t1483;
t1454 = t1531 * t1481 + t1535 * t1483;
t1453 = -t1544 - t1567;
t1449 = -t1574 - t1577;
t1448 = t1562 * t1492 + t1548;
t1447 = t1462 - t1566;
t1446 = -t1562 * t1494 - t1553;
t1445 = (qJD(4) + t1501) * t1494 + t1553;
t1444 = -t1526 * t1466 + t1527 * t1467;
t1443 = t1527 * t1466 + t1526 * t1467;
t1442 = -t1574 - t1578;
t1438 = t1543 - t1568;
t1437 = -t1543 - t1568;
t1434 = t1534 * t1453 - t1530 * t1468;
t1433 = t1530 * t1453 + t1534 * t1468;
t1431 = -t1526 * t1456 + t1527 * t1457;
t1430 = t1527 * t1456 + t1526 * t1457;
t1429 = -t1530 * t1452 + t1534 * t1465;
t1428 = t1534 * t1452 + t1530 * t1465;
t1427 = -t1526 * t1454 + t1527 * t1455;
t1426 = t1527 * t1454 + t1526 * t1455;
t1425 = -t1577 - t1578;
t1424 = -t1531 * t1450 + t1535 * t1451;
t1423 = t1535 * t1450 + t1531 * t1451;
t1422 = t1534 * t1446 - t1530 * t1448;
t1421 = t1530 * t1446 + t1534 * t1448;
t1420 = t1533 * t1438 - t1529 * t1449;
t1419 = t1529 * t1438 + t1533 * t1449;
t1418 = t1535 * t1434 + t1531 * t1447;
t1417 = t1531 * t1434 - t1535 * t1447;
t1416 = t1535 * t1429 + t1531 * t1445;
t1415 = t1531 * t1429 - t1535 * t1445;
t1414 = t1561 * t1469 + t1541;
t1413 = -t1583 * t1469 - t1541;
t1412 = -t1561 * t1471 + t1554;
t1411 = t1583 * t1471 - t1554;
t1410 = -t1529 * t1437 + t1533 * t1442;
t1409 = t1533 * t1437 + t1529 * t1442;
t1406 = t1535 * t1422 + t1531 * t1458;
t1405 = t1531 * t1422 - t1535 * t1458;
t1404 = t1546 * pkin(4) - t1576 * pkin(8) + t1494 * t1477 + t1435;
t1403 = -t1526 * t1423 + t1527 * t1424;
t1402 = t1527 * t1423 + t1526 * t1424;
t1401 = -t1576 * pkin(4) - t1546 * pkin(8) - t1501 * t1477 + t1408;
t1400 = (-t1462 - t1566) * pkin(8) + t1452 * pkin(4) + t1407;
t1399 = -t1530 * t1419 + t1534 * t1420;
t1398 = t1534 * t1419 + t1530 * t1420;
t1397 = -t1526 * t1417 + t1527 * t1418;
t1396 = t1527 * t1417 + t1526 * t1418;
t1395 = t1533 * t1412 - t1529 * t1414;
t1394 = t1529 * t1412 + t1533 * t1414;
t1393 = -t1526 * t1415 + t1527 * t1416;
t1392 = t1527 * t1415 + t1526 * t1416;
t1391 = -t1530 * t1409 + t1534 * t1410;
t1390 = t1534 * t1409 + t1530 * t1410;
t1389 = -t1530 * t1407 + t1534 * t1408;
t1388 = t1534 * t1407 + t1530 * t1408;
t1387 = -t1526 * t1405 + t1527 * t1406;
t1386 = t1527 * t1405 + t1526 * t1406;
t1385 = t1535 * t1389 + t1531 * t1435;
t1384 = t1531 * t1389 - t1535 * t1435;
t1383 = t1535 * t1399 + t1531 * t1413;
t1382 = t1531 * t1399 - t1535 * t1413;
t1381 = t1535 * t1391 + t1531 * t1411;
t1380 = t1531 * t1391 - t1535 * t1411;
t1379 = t1529 * t1400 + t1533 * t1401;
t1378 = t1533 * t1400 - t1529 * t1401;
t1377 = -t1530 * t1394 + t1534 * t1395;
t1376 = t1534 * t1394 + t1530 * t1395;
t1375 = t1535 * t1377 + t1531 * t1425;
t1374 = t1531 * t1377 - t1535 * t1425;
t1373 = -t1526 * t1384 + t1527 * t1385;
t1372 = t1527 * t1384 + t1526 * t1385;
t1371 = -t1526 * t1382 + t1527 * t1383;
t1370 = t1527 * t1382 + t1526 * t1383;
t1369 = -t1526 * t1380 + t1527 * t1381;
t1368 = t1527 * t1380 + t1526 * t1381;
t1367 = -t1529 * t1378 + t1533 * t1379;
t1366 = t1533 * t1378 + t1529 * t1379;
t1365 = -t1526 * t1374 + t1527 * t1375;
t1364 = t1527 * t1374 + t1526 * t1375;
t1363 = -t1530 * t1366 + t1534 * t1367;
t1362 = t1534 * t1366 + t1530 * t1367;
t1361 = t1535 * t1363 + t1531 * t1404;
t1360 = t1531 * t1363 - t1535 * t1404;
t1359 = -t1526 * t1360 + t1527 * t1361;
t1358 = t1527 * t1360 + t1526 * t1361;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t1512, -t1511, 0, -t1532 * t1513 - t1536 * t1552, 0, 0, 0, 0, 0, 0, -t1536 * t1508 - t1527 * t1558, t1536 * t1507 + t1526 * t1558, t1536 * t1509 - t1532 * t1510, t1536 * t1464 - t1532 * t1502, 0, 0, 0, 0, 0, 0, t1536 * t1427 + t1532 * t1485, t1536 * t1444 + t1532 * t1486, t1536 * t1431 + t1532 * t1473, t1536 * t1403 - t1532 * t1482, 0, 0, 0, 0, 0, 0, t1536 * t1393 + t1532 * t1428, t1536 * t1397 + t1532 * t1433, t1536 * t1387 + t1532 * t1421, t1536 * t1373 + t1532 * t1388, 0, 0, 0, 0, 0, 0, t1536 * t1369 + t1532 * t1390, t1536 * t1371 + t1532 * t1398, t1536 * t1365 + t1532 * t1376, t1536 * t1359 + t1532 * t1362; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1511, t1512, 0, t1536 * t1513 - t1532 * t1552, 0, 0, 0, 0, 0, 0, -t1532 * t1508 + t1527 * t1557, t1532 * t1507 - t1526 * t1557, t1532 * t1509 + t1536 * t1510, t1532 * t1464 + t1536 * t1502, 0, 0, 0, 0, 0, 0, t1532 * t1427 - t1536 * t1485, t1532 * t1444 - t1536 * t1486, t1532 * t1431 - t1536 * t1473, t1532 * t1403 + t1536 * t1482, 0, 0, 0, 0, 0, 0, t1532 * t1393 - t1536 * t1428, t1532 * t1397 - t1536 * t1433, t1532 * t1387 - t1536 * t1421, t1532 * t1373 - t1536 * t1388, 0, 0, 0, 0, 0, 0, t1532 * t1369 - t1536 * t1390, t1532 * t1371 - t1536 * t1398, t1532 * t1365 - t1536 * t1376, t1532 * t1359 - t1536 * t1362; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1463, 0, 0, 0, 0, 0, 0, t1426, t1443, t1430, t1402, 0, 0, 0, 0, 0, 0, t1392, t1396, t1386, t1372, 0, 0, 0, 0, 0, 0, t1368, t1370, t1364, t1358; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1537, -qJDD(1), 0, -t1552, 0, 0, 0, 0, 0, 0, -t1508, t1507, t1509, t1464, 0, 0, 0, 0, 0, 0, t1427, t1444, t1431, t1403, 0, 0, 0, 0, 0, 0, t1393, t1397, t1387, t1373, 0, 0, 0, 0, 0, 0, t1369, t1371, t1365, t1359; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t1537, 0, t1513, 0, 0, 0, 0, 0, 0, t1519, -t1559, t1510, t1502, 0, 0, 0, 0, 0, 0, -t1485, -t1486, -t1473, t1482, 0, 0, 0, 0, 0, 0, -t1428, -t1433, -t1421, -t1388, 0, 0, 0, 0, 0, 0, -t1390, -t1398, -t1376, -t1362; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t1463, 0, 0, 0, 0, 0, 0, t1426, t1443, t1430, t1402, 0, 0, 0, 0, 0, 0, t1392, t1396, t1386, t1372, 0, 0, 0, 0, 0, 0, t1368, t1370, t1364, t1358; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1563, t1515, t1519, t1489, 0, 0, 0, 0, 0, 0, t1455, t1467, t1457, t1424, 0, 0, 0, 0, 0, 0, t1416, t1418, t1406, t1385, 0, 0, 0, 0, 0, 0, t1381, t1383, t1375, t1361; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1515, -t1523 * t1537, -t1559, t1488, 0, 0, 0, 0, 0, 0, t1454, t1466, t1456, t1423, 0, 0, 0, 0, 0, 0, t1415, t1417, t1405, t1384, 0, 0, 0, 0, 0, 0, t1380, t1382, t1374, t1360; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1519, t1559, -t1510, -t1502, 0, 0, 0, 0, 0, 0, t1485, t1486, t1473, -t1482, 0, 0, 0, 0, 0, 0, t1428, t1433, t1421, t1388, 0, 0, 0, 0, 0, 0, t1390, t1398, t1376, t1362; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1481, t1484, t1472, t1451, 0, 0, 0, 0, 0, 0, t1429, t1434, t1422, t1389, 0, 0, 0, 0, 0, 0, t1391, t1399, t1377, t1363; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1483, t1495, -t1582, t1450, 0, 0, 0, 0, 0, 0, -t1445, -t1447, -t1458, -t1435, 0, 0, 0, 0, 0, 0, -t1411, -t1413, -t1425, -t1404; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1485, t1486, t1473, -t1482, 0, 0, 0, 0, 0, 0, t1428, t1433, t1421, t1388, 0, 0, 0, 0, 0, 0, t1390, t1398, t1376, t1362; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1465, t1453, t1446, t1408, 0, 0, 0, 0, 0, 0, t1410, t1420, t1395, t1367; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1452, t1468, t1448, t1407, 0, 0, 0, 0, 0, 0, t1409, t1419, t1394, t1366; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1445, t1447, t1458, t1435, 0, 0, 0, 0, 0, 0, t1411, t1413, t1425, t1404; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1442, t1438, t1412, t1379; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1437, t1449, t1414, t1378; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t1411, t1413, t1425, t1404;];
f_new_reg = t1;
