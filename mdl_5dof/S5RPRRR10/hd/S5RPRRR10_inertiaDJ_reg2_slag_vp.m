% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S5RPRRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
% 
% Output:
% MMD_reg [((5+1)*5/2)x(5*10)]
%   inertial parameter regressor of inertia matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:11
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S5RPRRR10_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR10_inertiaDJ_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR10_inertiaDJ_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR10_inertiaDJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:10:45
% EndTime: 2019-12-31 19:10:51
% DurationCPUTime: 1.88s
% Computational Cost: add. (3238->206), mult. (7291->390), div. (0->0), fcn. (7134->8), ass. (0->114)
t143 = cos(qJ(3));
t109 = t143 * qJD(2);
t73 = sin(qJ(3));
t123 = t73 * qJD(2);
t127 = qJD(3) * t73;
t131 = pkin(6) + qJ(2);
t70 = cos(pkin(9));
t56 = t131 * t70;
t69 = sin(pkin(9));
t96 = t131 * t143;
t80 = (-qJD(3) * t96 - t123) * t69 + t70 * t109 - t56 * t127;
t52 = -t143 * t70 + t73 * t69;
t53 = t143 * t69 + t73 * t70;
t62 = -t70 * pkin(2) - pkin(1);
t87 = t52 * pkin(3) - t53 * pkin(7) + t62;
t152 = -qJD(4) * t87 - t80;
t110 = qJD(3) * t143;
t45 = -t70 * t110 + t69 * t127;
t46 = t53 * qJD(3);
t111 = t73 * t131;
t86 = -t69 * t111 + t143 * t56;
t151 = t46 * pkin(3) + t45 * pkin(7) - qJD(4) * t86;
t142 = cos(qJ(5));
t107 = t142 * qJD(5);
t150 = t142 * qJD(4) + t107;
t74 = cos(qJ(4));
t125 = qJD(4) * t74;
t72 = sin(qJ(4));
t135 = t72 * t45;
t90 = t53 * t125 - t135;
t126 = qJD(4) * t72;
t116 = t53 * t126;
t133 = t74 * t45;
t149 = t116 + t133;
t67 = t72 ^ 2;
t68 = t74 ^ 2;
t128 = t67 - t68;
t106 = qJD(4) * t128;
t148 = qJD(4) + qJD(5);
t17 = -t72 * t86 + t74 * t87;
t18 = t72 * t87 + t74 * t86;
t8 = -t151 * t72 + t152 * t74;
t9 = t151 * t74 + t152 * t72;
t147 = t8 * t72 - t9 * t74 + (t17 * t72 - t18 * t74) * qJD(4);
t146 = 0.2e1 * t46;
t145 = -pkin(8) - pkin(7);
t144 = t46 * pkin(4);
t24 = t56 * t110 + t70 * t123 + (-qJD(3) * t111 + t109) * t69;
t38 = t73 * t56 + t69 * t96;
t141 = t38 * t24;
t140 = t53 * t45;
t139 = t53 * t72;
t113 = t142 * t72;
t71 = sin(qJ(5));
t55 = t71 * t74 + t113;
t37 = t148 * t55;
t112 = t142 * t74;
t136 = t71 * t72;
t54 = -t112 + t136;
t138 = t54 * t37;
t36 = t148 * t136 - t150 * t74;
t137 = t55 * t36;
t134 = t72 * t46;
t132 = t74 * t53;
t121 = t53 * t136;
t12 = -t45 * t113 - t71 * t116 - qJD(5) * t121 + (t150 * t53 - t45 * t71) * t74;
t30 = t55 * t53;
t130 = -t55 * t12 + t36 * t30;
t124 = qJD(5) * t71;
t35 = t52 * t146;
t122 = -0.2e1 * pkin(3) * qJD(4);
t120 = t72 * t133;
t119 = pkin(4) * t126;
t118 = pkin(4) * t124;
t117 = t71 * t145;
t114 = t72 * t125;
t105 = t72 * t117;
t49 = t53 ^ 2;
t104 = t49 * t114;
t103 = pkin(4) * t107;
t102 = 0.2e1 * (t69 ^ 2 + t70 ^ 2) * qJD(2);
t101 = t145 * t142;
t99 = pkin(3) * t45 - pkin(7) * t46;
t98 = pkin(3) * t53 + pkin(7) * t52;
t11 = t45 * t112 - t71 * t135 + t37 * t53;
t31 = t53 * t112 - t121;
t95 = -t54 * t11 + t31 * t37;
t94 = t17 * t74 + t18 * t72;
t92 = t36 * t52 - t55 * t46;
t91 = t72 * t101;
t88 = t52 * t125 + t134;
t14 = -pkin(8) * t139 + t18;
t75 = t149 * pkin(8) + t144 + t9;
t78 = t52 * pkin(4) - pkin(8) * t132 + t17;
t76 = t142 * t78;
t79 = -t90 * pkin(8) - t8;
t1 = -qJD(5) * t76 + t14 * t124 - t142 * t79 - t71 * t75;
t57 = t145 * t74;
t40 = -t142 * t57 + t105;
t81 = -t94 * qJD(4) - t9 * t72 - t8 * t74;
t77 = t71 * t78;
t2 = -qJD(5) * t77 - t14 * t107 + t142 * t75 - t71 * t79;
t64 = -t74 * pkin(4) - pkin(3);
t39 = t71 * t57 + t91;
t33 = -t52 * t126 + t74 * t46;
t25 = pkin(4) * t139 + t38;
t22 = t53 * t106 + t120;
t21 = -t40 * qJD(5) + (t74 * t101 - t105) * qJD(4);
t20 = -t117 * t125 - t57 * t124 - t148 * t91;
t16 = -t37 * t52 - t54 * t46;
t15 = t90 * pkin(4) + t24;
t7 = t142 * t14 + t77;
t6 = -t71 * t14 + t76;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t102, qJ(2) * t102, -0.2e1 * t140, 0.2e1 * t45 * t52 - 0.2e1 * t53 * t46, 0, t35, 0, 0, t62 * t146, -0.2e1 * t62 * t45, 0.2e1 * t24 * t53 - 0.2e1 * t38 * t45 - 0.2e1 * t86 * t46 - 0.2e1 * t80 * t52, 0.2e1 * t86 * t80 + 0.2e1 * t141, -0.2e1 * t68 * t140 - 0.2e1 * t104, 0.2e1 * t49 * t106 + 0.4e1 * t53 * t120, 0.2e1 * t46 * t132 - 0.2e1 * t149 * t52, -0.2e1 * t67 * t140 + 0.2e1 * t104, -0.2e1 * t53 * t134 - 0.2e1 * t90 * t52, t35, 0.2e1 * t24 * t139 + 0.2e1 * t17 * t46 + 0.2e1 * t90 * t38 + 0.2e1 * t9 * t52, 0.2e1 * t24 * t132 - 0.2e1 * t149 * t38 - 0.2e1 * t18 * t46 + 0.2e1 * t8 * t52, 0.2e1 * t147 * t53 + 0.2e1 * t94 * t45, 0.2e1 * t17 * t9 - 0.2e1 * t18 * t8 + 0.2e1 * t141, -0.2e1 * t31 * t11, 0.2e1 * t11 * t30 - 0.2e1 * t31 * t12, -0.2e1 * t11 * t52 + 0.2e1 * t31 * t46, 0.2e1 * t30 * t12, -0.2e1 * t12 * t52 - 0.2e1 * t30 * t46, t35, 0.2e1 * t25 * t12 + 0.2e1 * t15 * t30 + 0.2e1 * t2 * t52 + 0.2e1 * t6 * t46, 0.2e1 * t1 * t52 - 0.2e1 * t25 * t11 + 0.2e1 * t15 * t31 - 0.2e1 * t7 * t46, 0.2e1 * t1 * t30 + 0.2e1 * t6 * t11 - 0.2e1 * t7 * t12 - 0.2e1 * t2 * t31, -0.2e1 * t7 * t1 + 0.2e1 * t25 * t15 + 0.2e1 * t6 * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t46, -t45, 0, 0, 0, 0, 0, 0, 0, 0, t33, -t88, (t67 + t68) * t45, -t147, 0, 0, 0, 0, 0, 0, t16, t92, t95 + t130, -t1 * t55 - t2 * t54 - t7 * t36 - t6 * t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t137 + 0.2e1 * t138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t45, 0, -t46, 0, -t24, -t80, 0, 0, -t22, -0.4e1 * t53 * t114 + t128 * t45, t88, t22, t33, 0, -t24 * t74 + t99 * t72 + (t38 * t72 - t98 * t74) * qJD(4), t24 * t72 + t99 * t74 + (t38 * t74 + t98 * t72) * qJD(4), t81, -t24 * pkin(3) + t81 * pkin(7), -t11 * t55 - t31 * t36, -t95 + t130, -t92, t12 * t54 + t30 * t37, t16, 0, t30 * t119 + t64 * t12 + t15 * t54 + t21 * t52 + t25 * t37 + t39 * t46, -t64 * t11 + t31 * t119 + t15 * t55 + t20 * t52 - t25 * t36 - t40 * t46, t1 * t54 + t39 * t11 - t40 * t12 - t2 * t55 + t20 * t30 - t21 * t31 + t6 * t36 - t7 * t37, -t1 * t40 + t25 * t119 + t15 * t64 + t2 * t39 - t7 * t20 + t6 * t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t55 * t20 - t54 * t21 - t36 * t40 - t37 * t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t114, -0.2e1 * t106, 0, -0.2e1 * t114, 0, 0, t72 * t122, t74 * t122, 0, 0, -0.2e1 * t137, 0.2e1 * t54 * t36 - 0.2e1 * t55 * t37, 0, 0.2e1 * t138, 0, 0, 0.2e1 * t54 * t119 + 0.2e1 * t64 * t37, 0.2e1 * t55 * t119 - 0.2e1 * t64 * t36, 0.2e1 * t20 * t54 - 0.2e1 * t21 * t55 + 0.2e1 * t39 * t36 - 0.2e1 * t40 * t37, 0.2e1 * t64 * t119 - 0.2e1 * t40 * t20 + 0.2e1 * t39 * t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t149, 0, -t90, t46, t9, t8, 0, 0, 0, 0, -t11, 0, -t12, t46, -t52 * t118 + t142 * t144 + t2, (-t52 * t107 - t46 * t71) * pkin(4) + t1, (t142 * t11 - t12 * t71 + (-t142 * t30 + t31 * t71) * qJD(5)) * pkin(4), (t142 * t2 - t1 * t71 + (t142 * t7 - t6 * t71) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t126, -t125, 0, 0, 0, 0, 0, 0, 0, 0, -t37, t36, 0, (-t142 * t37 - t36 * t71 + (t142 * t55 + t54 * t71) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t125, 0, -t126, 0, -pkin(7) * t125, pkin(7) * t126, 0, 0, 0, 0, -t36, 0, -t37, 0, t21, t20, (t142 * t36 - t37 * t71 + (-t142 * t54 + t55 * t71) * qJD(5)) * pkin(4), (t142 * t21 - t20 * t71 + (t142 * t40 - t39 * t71) * qJD(5)) * pkin(4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t118, -0.2e1 * t103, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11, 0, -t12, t46, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t37, t36, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t36, 0, -t37, 0, t21, t20, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t118, -t103, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg = t3;
