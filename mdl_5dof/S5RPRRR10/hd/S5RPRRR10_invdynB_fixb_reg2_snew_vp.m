% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RPRRR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d3,d4,d5,theta2]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 19:11
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RPRRR10_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RPRRR10_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RPRRR10_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RPRRR10_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RPRRR10_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RPRRR10_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 19:10:59
% EndTime: 2019-12-31 19:11:16
% DurationCPUTime: 15.21s
% Computational Cost: add. (75916->634), mult. (180750->977), div. (0->0), fcn. (136346->10), ass. (0->438)
t722 = sin(qJ(1));
t726 = cos(qJ(1));
t701 = t726 * g(1) + t722 * g(2);
t806 = -(2 * qJD(2) * qJD(1)) + t701;
t719 = sin(qJ(5));
t716 = sin(pkin(9));
t717 = cos(pkin(9));
t721 = sin(qJ(3));
t725 = cos(qJ(3));
t736 = t716 * t725 + t717 * t721;
t690 = t736 * qJD(1);
t720 = sin(qJ(4));
t724 = cos(qJ(4));
t667 = -t724 * qJD(3) + t690 * t720;
t669 = qJD(3) * t720 + t690 * t724;
t723 = cos(qJ(5));
t620 = t723 * t667 + t669 * t719;
t622 = -t667 * t719 + t669 * t723;
t568 = t622 * t620;
t754 = qJDD(1) * t717;
t761 = t716 * t721;
t686 = qJDD(1) * t761 - t725 * t754;
t758 = t690 * qJD(3);
t647 = -t686 - t758;
t639 = qJDD(4) - t647;
t731 = qJDD(5) + t639;
t798 = -t568 + t731;
t805 = t719 * t798;
t626 = t669 * t667;
t796 = -t626 + t639;
t804 = t720 * t796;
t688 = (-t717 * t725 + t761) * qJD(1);
t652 = t690 * t688;
t794 = qJDD(3) - t652;
t803 = t721 * t794;
t802 = t723 * t798;
t801 = t724 * t796;
t800 = t725 * t794;
t681 = qJD(4) + t688;
t634 = t681 * t667;
t759 = t688 * qJD(3);
t795 = t736 * qJDD(1);
t649 = t795 - t759;
t744 = t667 * qJD(4) - t720 * qJDD(3) - t724 * t649;
t573 = -t634 + t744;
t727 = qJD(1) ^ 2;
t799 = -(t727 * pkin(1)) + qJDD(1) * qJ(2) - t806;
t700 = g(1) * t722 - t726 * g(2);
t737 = -qJDD(2) + t700;
t743 = pkin(2) * t717 + pkin(1);
t713 = t716 ^ 2;
t714 = t717 ^ 2;
t760 = t713 + t714;
t642 = t743 * qJDD(1) + (t760 * pkin(6) + qJ(2)) * t727 + t737;
t677 = qJD(5) + t681;
t597 = t677 * t620;
t739 = -t724 * qJDD(3) + t720 * t649;
t601 = -qJD(4) * t669 - t739;
t733 = qJD(5) * t620 - t601 * t719 + t723 * t744;
t797 = -t597 - t733;
t574 = t744 + t634;
t792 = t727 * t760;
t740 = -t723 * t601 - t719 * t744;
t485 = (qJD(5) - t677) * t622 + t740;
t569 = (qJD(4) - t681) * t669 + t739;
t618 = t620 ^ 2;
t619 = t622 ^ 2;
t790 = t667 ^ 2;
t666 = t669 ^ 2;
t675 = t677 ^ 2;
t680 = t681 ^ 2;
t684 = t688 ^ 2;
t685 = t690 ^ 2;
t789 = qJD(3) ^ 2;
t788 = pkin(3) * t721;
t787 = t717 * g(3);
t786 = qJDD(1) * pkin(1);
t654 = -g(3) * t716 + t717 * t799;
t707 = t714 * t727;
t633 = -pkin(2) * t707 + pkin(6) * t754 + t654;
t730 = -t787 + (t743 * t727 + (-pkin(6) - qJ(2)) * qJDD(1) + t806) * t716;
t579 = t725 * t633 + t721 * t730;
t640 = pkin(3) * t688 - pkin(7) * t690;
t540 = -t789 * pkin(3) + qJDD(3) * pkin(7) - t640 * t688 + t579;
t547 = (-t649 + t759) * pkin(7) + (-t647 + t758) * pkin(3) - t642;
t473 = t540 * t720 - t724 * t547;
t445 = t796 * pkin(4) + t573 * pkin(8) - t473;
t474 = t724 * t540 + t720 * t547;
t630 = pkin(4) * t681 - pkin(8) * t669;
t452 = -pkin(4) * t790 + pkin(8) * t601 - t630 * t681 + t474;
t389 = -t723 * t445 + t452 * t719;
t390 = t719 * t445 + t723 * t452;
t356 = -t389 * t723 + t390 * t719;
t785 = t356 * t720;
t784 = t356 * t724;
t578 = t633 * t721 - t725 * t730;
t539 = -qJDD(3) * pkin(3) - t789 * pkin(7) + t640 * t690 + t578;
t468 = -t601 * pkin(4) - t790 * pkin(8) + t630 * t669 + t539;
t783 = t468 * t719;
t782 = t468 * t723;
t518 = -t578 * t725 + t579 * t721;
t781 = t518 * t716;
t780 = t518 * t717;
t779 = t539 * t720;
t778 = t539 * t724;
t543 = t568 + t731;
t777 = t543 * t719;
t776 = t543 * t723;
t586 = t626 + t639;
t775 = t586 * t720;
t774 = t586 * t724;
t773 = t642 * t721;
t772 = t642 * t725;
t644 = qJDD(3) + t652;
t771 = t644 * t721;
t770 = t644 * t725;
t769 = t677 * t719;
t768 = t677 * t723;
t767 = t681 * t720;
t766 = t681 * t724;
t682 = qJ(2) * t727 + t737 + t786;
t765 = t682 * t722;
t764 = t682 * t726;
t763 = t713 * t727;
t762 = t716 * t717;
t753 = qJDD(1) * t722;
t752 = qJDD(1) * t726;
t750 = t721 * t568;
t749 = t725 * t568;
t748 = t721 * t626;
t747 = t725 * t626;
t746 = t722 * t652;
t745 = t726 * t652;
t742 = -pkin(3) * t725 - pkin(2);
t741 = t682 + t786;
t357 = t389 * t719 + t723 * t390;
t519 = t578 * t721 + t725 * t579;
t653 = t716 * t799 + t787;
t605 = t653 * t716 + t717 * t654;
t665 = -t700 * t722 - t726 * t701;
t699 = -t722 * t727 + t752;
t738 = -pkin(5) * t699 - g(3) * t722;
t420 = -t473 * t724 + t474 * t720;
t421 = t473 * t720 + t474 * t724;
t604 = t653 * t717 - t654 * t716;
t664 = t700 * t726 - t701 * t722;
t698 = t726 * t727 + t753;
t692 = t717 * t792;
t661 = -t692 * t722 + t717 * t752;
t735 = t692 * t726 + t717 * t753;
t706 = t714 * qJDD(1);
t705 = t713 * qJDD(1);
t697 = t707 - t763;
t696 = t707 + t763;
t695 = t706 - t705;
t694 = t706 + t705;
t691 = t716 * t792;
t683 = -pkin(5) * t698 + g(3) * t726;
t674 = -t685 - t789;
t673 = -t685 + t789;
t672 = t684 - t789;
t671 = t699 * t762;
t670 = t698 * t762;
t662 = t691 * t726 + t716 * t753;
t660 = t691 * t722 - t716 * t752;
t656 = t694 * t726 - t696 * t722;
t655 = t694 * t722 + t696 * t726;
t651 = -t685 + t684;
t648 = t795 - 0.2e1 * t759;
t646 = t686 + 0.2e1 * t758;
t641 = -t789 - t684;
t636 = (-t688 * t725 + t690 * t721) * qJD(3);
t635 = (-t688 * t721 - t690 * t725) * qJD(3);
t632 = -t666 + t680;
t631 = -t680 + t790;
t625 = -t684 - t685;
t624 = -t666 + t790;
t617 = t649 * t725 - t721 * t758;
t616 = t649 * t721 + t725 * t758;
t615 = -t647 * t721 + t725 * t759;
t614 = t647 * t725 + t721 * t759;
t613 = -t666 - t680;
t612 = -t674 * t721 - t770;
t611 = -t673 * t721 + t800;
t610 = t672 * t725 - t771;
t609 = t674 * t725 - t771;
t608 = t673 * t725 + t803;
t607 = t672 * t721 + t770;
t606 = -t680 - t790;
t596 = t666 + t790;
t595 = -t646 * t725 - t648 * t721;
t594 = -t686 * t725 + t721 * t795;
t593 = -t646 * t721 + t648 * t725;
t592 = -t686 * t721 - t725 * t795;
t591 = -t619 + t675;
t590 = t618 - t675;
t589 = t641 * t725 - t803;
t588 = t641 * t721 + t800;
t584 = (-t667 * t724 + t669 * t720) * t681;
t583 = (t667 * t720 + t669 * t724) * t681;
t582 = -t635 * t716 + t636 * t717;
t581 = t605 * t726 - t765;
t580 = t605 * t722 + t764;
t577 = -t619 - t675;
t575 = -pkin(6) * t609 - t772;
t570 = (-qJD(4) - t681) * t669 - t739;
t567 = -t619 + t618;
t566 = -pkin(6) * t588 - t773;
t565 = -t669 * t767 - t724 * t744;
t564 = -t669 * t766 + t720 * t744;
t563 = -t601 * t720 + t667 * t766;
t562 = -t601 * t724 - t667 * t767;
t561 = -t616 * t716 + t617 * t717;
t560 = -t614 * t716 + t615 * t717;
t559 = -t609 * t716 + t612 * t717;
t558 = -t608 * t716 + t611 * t717;
t557 = -t607 * t716 + t610 * t717;
t556 = t609 * t717 + t612 * t716;
t555 = -t675 - t618;
t554 = t584 * t725 + t639 * t721;
t553 = t584 * t721 - t639 * t725;
t552 = t631 * t724 - t775;
t551 = -t632 * t720 + t801;
t550 = -t631 * t720 - t774;
t549 = -t632 * t724 - t804;
t548 = -pkin(2) * t648 + pkin(6) * t612 - t773;
t541 = -pkin(2) * t646 + pkin(6) * t589 + t772;
t538 = -t613 * t720 - t774;
t537 = t613 * t724 - t775;
t535 = (-t620 * t723 + t622 * t719) * t677;
t534 = (-t620 * t719 - t622 * t723) * t677;
t533 = -t593 * t716 + t595 * t717;
t532 = -t592 * t716 + t594 * t717;
t531 = t592 * t717 + t594 * t716;
t530 = t606 * t724 - t804;
t529 = t606 * t720 + t801;
t528 = -t588 * t716 + t589 * t717;
t527 = t588 * t717 + t589 * t716;
t526 = -t618 - t619;
t525 = t559 * t726 + t648 * t722;
t524 = t559 * t722 - t648 * t726;
t523 = t565 * t725 + t748;
t522 = t563 * t725 - t748;
t521 = t565 * t721 - t747;
t520 = t563 * t721 + t747;
t517 = t528 * t726 + t646 * t722;
t516 = t528 * t722 - t646 * t726;
t514 = -qJD(5) * t622 - t740;
t513 = t532 * t726 + t625 * t722;
t512 = t532 * t722 - t625 * t726;
t511 = -t569 * t724 - t573 * t720;
t510 = t570 * t724 + t574 * t720;
t509 = -t569 * t720 + t573 * t724;
t508 = -t570 * t720 + t574 * t724;
t507 = t590 * t723 - t777;
t506 = -t591 * t719 + t802;
t505 = t590 * t719 + t776;
t504 = t591 * t723 + t805;
t503 = pkin(2) * t642 + pkin(6) * t519;
t502 = -pkin(1) * t531 - pkin(2) * t592;
t501 = -t577 * t719 - t776;
t500 = t577 * t723 - t777;
t499 = t552 * t725 - t569 * t721;
t498 = t551 * t725 - t573 * t721;
t497 = t552 * t721 + t569 * t725;
t496 = t551 * t721 + t573 * t725;
t495 = t538 * t725 - t574 * t721;
t494 = t538 * t721 + t574 * t725;
t493 = -pkin(6) * t592 - t518;
t492 = -t553 * t716 + t554 * t717;
t491 = t530 * t725 - t570 * t721;
t490 = t530 * t721 + t570 * t725;
t489 = -t597 + t733;
t484 = (qJD(5) + t677) * t622 + t740;
t483 = -t622 * t769 - t723 * t733;
t482 = t622 * t768 - t719 * t733;
t481 = -t514 * t719 + t620 * t768;
t480 = t514 * t723 + t620 * t769;
t479 = t510 * t725 - t624 * t721;
t478 = t510 * t721 + t624 * t725;
t477 = -pkin(1) * t556 - pkin(2) * t609 + t579;
t476 = t555 * t723 - t805;
t475 = t555 * t719 + t802;
t472 = -pkin(7) * t537 + t778;
t471 = t511 * t725 - t596 * t721;
t470 = t511 * t721 + t596 * t725;
t469 = -pkin(7) * t529 + t779;
t467 = -t534 * t720 + t535 * t724;
t466 = -t534 * t724 - t535 * t720;
t465 = -pkin(2) * t625 + pkin(6) * t594 + t519;
t464 = -pkin(1) * t527 - pkin(2) * t588 + t578;
t463 = -t521 * t716 + t523 * t717;
t462 = -t520 * t716 + t522 * t717;
t461 = t467 * t725 + t721 * t731;
t460 = t467 * t721 - t725 * t731;
t459 = -qJ(2) * t556 - t548 * t716 + t575 * t717;
t458 = t519 * t717 - t781;
t457 = t519 * t716 + t780;
t456 = -qJ(2) * t527 - t541 * t716 + t566 * t717;
t455 = t458 * t726 - t642 * t722;
t454 = t458 * t722 + t642 * t726;
t453 = -pkin(3) * t537 + t474;
t451 = -pkin(3) * t529 + t473;
t449 = -t505 * t720 + t507 * t724;
t448 = -t504 * t720 + t506 * t724;
t447 = -t505 * t724 - t507 * t720;
t446 = -t504 * t724 - t506 * t720;
t442 = -t500 * t720 + t501 * t724;
t441 = t500 * t724 + t501 * t720;
t440 = -t497 * t716 + t499 * t717;
t439 = -t496 * t716 + t498 * t717;
t438 = -t494 * t716 + t495 * t717;
t437 = t494 * t717 + t495 * t716;
t436 = -t485 * t723 - t489 * t719;
t435 = -t484 * t723 - t719 * t797;
t434 = -t485 * t719 + t489 * t723;
t433 = -t484 * t719 + t723 * t797;
t432 = -t490 * t716 + t491 * t717;
t431 = t490 * t717 + t491 * t716;
t430 = -pkin(8) * t500 + t782;
t429 = -t482 * t720 + t483 * t724;
t428 = -t480 * t720 + t481 * t724;
t427 = -t482 * t724 - t483 * t720;
t426 = -t480 * t724 - t481 * t720;
t425 = -t478 * t716 + t479 * t717;
t424 = -t475 * t720 + t476 * t724;
t423 = t475 * t724 + t476 * t720;
t422 = -pkin(1) * t457 - pkin(2) * t518;
t419 = -pkin(8) * t475 + t783;
t418 = -t470 * t716 + t471 * t717;
t417 = t470 * t717 + t471 * t716;
t416 = t429 * t725 + t750;
t415 = t428 * t725 - t750;
t414 = t429 * t721 - t749;
t413 = t428 * t721 + t749;
t412 = t438 * t726 + t537 * t722;
t411 = t438 * t722 - t537 * t726;
t410 = t432 * t726 + t529 * t722;
t409 = t432 * t722 - t529 * t726;
t408 = -t460 * t716 + t461 * t717;
t407 = t449 * t725 - t485 * t721;
t406 = t448 * t725 - t489 * t721;
t405 = t449 * t721 + t485 * t725;
t404 = t448 * t721 + t489 * t725;
t403 = -qJ(2) * t531 - t465 * t716 + t493 * t717;
t402 = t421 * t725 + t539 * t721;
t401 = t421 * t721 - t539 * t725;
t400 = t442 * t725 + t721 * t797;
t399 = t442 * t721 - t725 * t797;
t398 = -pkin(6) * t780 - qJ(2) * t457 - t503 * t716;
t397 = -pkin(7) * t509 - t420;
t396 = -pkin(4) * t797 + pkin(8) * t501 + t783;
t395 = t418 * t726 + t509 * t722;
t394 = t418 * t722 - t509 * t726;
t393 = t424 * t725 + t484 * t721;
t392 = t424 * t721 - t484 * t725;
t391 = -pkin(4) * t484 + pkin(8) * t476 - t782;
t387 = -pkin(6) * t494 - t453 * t721 + t472 * t725;
t386 = -pkin(6) * t490 - t451 * t721 + t469 * t725;
t385 = -t434 * t720 + t436 * t724;
t384 = -t433 * t720 + t435 * t724;
t383 = t434 * t724 + t436 * t720;
t382 = -t433 * t724 - t435 * t720;
t381 = -pkin(2) * t537 + pkin(6) * t495 + t453 * t725 + t472 * t721;
t380 = -pkin(2) * t529 + pkin(6) * t491 + t451 * t725 + t469 * t721;
t379 = -pkin(1) * t437 - pkin(2) * t494 - pkin(3) * t574 - pkin(7) * t538 - t779;
t378 = t384 * t725 - t567 * t721;
t377 = t384 * t721 + t567 * t725;
t376 = -pkin(1) * t431 - pkin(2) * t490 - pkin(3) * t570 - pkin(7) * t530 + t778;
t375 = t385 * t725 + t526 * t721;
t374 = t385 * t721 - t526 * t725;
t373 = -pkin(6) * t470 + t397 * t725 + t509 * t788;
t372 = -t414 * t716 + t416 * t717;
t371 = -t413 * t716 + t415 * t717;
t370 = -t405 * t716 + t407 * t717;
t369 = -t404 * t716 + t406 * t717;
t368 = -t401 * t716 + t402 * t717;
t367 = t401 * t717 + t402 * t716;
t366 = -t399 * t716 + t400 * t717;
t365 = t399 * t717 + t400 * t716;
t364 = pkin(6) * t471 + t397 * t721 + t742 * t509;
t363 = -pkin(3) * t383 - pkin(4) * t434;
t362 = -pkin(3) * t441 - pkin(4) * t500 + t390;
t361 = -t392 * t716 + t393 * t717;
t360 = t392 * t717 + t393 * t716;
t359 = -pkin(3) * t423 - pkin(4) * t475 + t389;
t358 = -pkin(1) * t417 - pkin(2) * t470 - pkin(3) * t596 - pkin(7) * t511 - t421;
t355 = -pkin(7) * t441 - t396 * t720 + t430 * t724;
t354 = -pkin(6) * t401 + (-pkin(7) * t725 + t788) * t420;
t353 = -pkin(7) * t423 - t391 * t720 + t419 * t724;
t352 = t366 * t726 + t441 * t722;
t351 = t366 * t722 - t441 * t726;
t350 = t368 * t726 + t420 * t722;
t349 = t368 * t722 - t420 * t726;
t348 = -pkin(4) * t468 + pkin(8) * t357;
t347 = t361 * t726 + t423 * t722;
t346 = t361 * t722 - t423 * t726;
t345 = -pkin(8) * t434 - t356;
t344 = -t377 * t716 + t378 * t717;
t343 = pkin(6) * t402 + (-pkin(7) * t721 + t742) * t420;
t342 = -t374 * t716 + t375 * t717;
t341 = t374 * t717 + t375 * t716;
t340 = -pkin(4) * t526 + pkin(8) * t436 + t357;
t339 = -qJ(2) * t437 - t381 * t716 + t387 * t717;
t338 = -qJ(2) * t431 - t380 * t716 + t386 * t717;
t337 = -pkin(1) * t367 - pkin(2) * t401 + pkin(3) * t539 - pkin(7) * t421;
t336 = -qJ(2) * t417 - t364 * t716 + t373 * t717;
t335 = t342 * t726 + t383 * t722;
t334 = t342 * t722 - t383 * t726;
t333 = t357 * t724 - t785;
t332 = t357 * t720 + t784;
t331 = t333 * t725 + t468 * t721;
t330 = t333 * t721 - t468 * t725;
t329 = -pkin(6) * t399 + t355 * t725 - t362 * t721;
t328 = -pkin(1) * t365 - pkin(2) * t399 + pkin(3) * t797 - pkin(7) * t442 - t396 * t724 - t430 * t720;
t327 = -pkin(6) * t392 + t353 * t725 - t359 * t721;
t326 = -pkin(1) * t360 - pkin(2) * t392 + pkin(3) * t484 - pkin(7) * t424 - t391 * t724 - t419 * t720;
t325 = -pkin(2) * t441 + pkin(6) * t400 + t355 * t721 + t362 * t725;
t324 = -pkin(2) * t423 + pkin(6) * t393 + t353 * t721 + t359 * t725;
t323 = -pkin(3) * t332 - pkin(4) * t356;
t322 = -qJ(2) * t367 - t343 * t716 + t354 * t717;
t321 = -pkin(7) * t383 - t340 * t720 + t345 * t724;
t320 = -pkin(7) * t332 - pkin(8) * t784 - t348 * t720;
t319 = -t330 * t716 + t331 * t717;
t318 = t330 * t717 + t331 * t716;
t317 = -pkin(6) * t374 + t321 * t725 - t363 * t721;
t316 = -pkin(1) * t341 - pkin(2) * t374 + pkin(3) * t526 - pkin(7) * t385 - t340 * t724 - t345 * t720;
t315 = -pkin(2) * t383 + pkin(6) * t375 + t321 * t721 + t363 * t725;
t314 = -qJ(2) * t365 - t325 * t716 + t329 * t717;
t313 = -qJ(2) * t360 - t324 * t716 + t327 * t717;
t312 = t319 * t726 + t332 * t722;
t311 = t319 * t722 - t332 * t726;
t310 = -pkin(6) * t330 + t320 * t725 - t323 * t721;
t309 = -pkin(1) * t318 - pkin(2) * t330 + pkin(3) * t468 - pkin(7) * t333 + pkin(8) * t785 - t348 * t724;
t308 = -pkin(2) * t332 + pkin(6) * t331 + t320 * t721 + t323 * t725;
t307 = -qJ(2) * t341 - t315 * t716 + t317 * t717;
t306 = -qJ(2) * t318 - t308 * t716 + t310 * t717;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t698, -t699, 0, t665, 0, 0, 0, 0, 0, 0, -t735, t662, t656, t581, 0, 0, 0, 0, 0, 0, t517, t525, t513, t455, 0, 0, 0, 0, 0, 0, t410, t412, t395, t350, 0, 0, 0, 0, 0, 0, t347, t352, t335, t312; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t699, -t698, 0, t664, 0, 0, 0, 0, 0, 0, t661, t660, t655, t580, 0, 0, 0, 0, 0, 0, t516, t524, t512, t454, 0, 0, 0, 0, 0, 0, t409, t411, t394, t349, 0, 0, 0, 0, 0, 0, t346, t351, t334, t311; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t604, 0, 0, 0, 0, 0, 0, t527, t556, t531, t457, 0, 0, 0, 0, 0, 0, t431, t437, t417, t367, 0, 0, 0, 0, 0, 0, t360, t365, t341, t318; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t699, 0, -t698, 0, t738, -t683, -t664, -pkin(5) * t664, t671, t695 * t726 - t697 * t722, t662, -t671, t735, 0, -pkin(5) * t661 - t653 * t722 - t716 * t764, -pkin(5) * t660 - t654 * t722 - t717 * t764, -pkin(5) * t655 + t604 * t726, -pkin(5) * t580 - (pkin(1) * t722 - qJ(2) * t726) * t604, t561 * t726 + t746, t533 * t726 - t651 * t722, t558 * t726 + t722 * t795, t560 * t726 - t746, t557 * t726 - t686 * t722, qJDD(3) * t722 + t582 * t726, -pkin(5) * t516 + t456 * t726 - t464 * t722, -pkin(5) * t524 + t459 * t726 - t477 * t722, -pkin(5) * t512 + t403 * t726 - t502 * t722, -pkin(5) * t454 + t398 * t726 - t422 * t722, t463 * t726 - t564 * t722, t425 * t726 - t508 * t722, t439 * t726 - t549 * t722, t462 * t726 - t562 * t722, t440 * t726 - t550 * t722, t492 * t726 - t583 * t722, -pkin(5) * t409 + t338 * t726 - t376 * t722, -pkin(5) * t411 + t339 * t726 - t379 * t722, -pkin(5) * t394 + t336 * t726 - t358 * t722, -pkin(5) * t349 + t322 * t726 - t337 * t722, t372 * t726 - t427 * t722, t344 * t726 - t382 * t722, t369 * t726 - t446 * t722, t371 * t726 - t426 * t722, t370 * t726 - t447 * t722, t408 * t726 - t466 * t722, -pkin(5) * t346 + t313 * t726 - t326 * t722, -pkin(5) * t351 + t314 * t726 - t328 * t722, -pkin(5) * t334 + t307 * t726 - t316 * t722, -pkin(5) * t311 + t306 * t726 - t309 * t722; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t698, 0, t699, 0, t683, t738, t665, pkin(5) * t665, t670, t695 * t722 + t697 * t726, t660, -t670, -t661, 0, -pkin(5) * t735 + t653 * t726 - t716 * t765, pkin(5) * t662 + t654 * t726 - t717 * t765, pkin(5) * t656 + t604 * t722, pkin(5) * t581 - (-pkin(1) * t726 - qJ(2) * t722) * t604, t561 * t722 - t745, t533 * t722 + t651 * t726, t558 * t722 - t726 * t795, t560 * t722 + t745, t557 * t722 + t686 * t726, -qJDD(3) * t726 + t582 * t722, pkin(5) * t517 + t456 * t722 + t464 * t726, pkin(5) * t525 + t459 * t722 + t477 * t726, pkin(5) * t513 + t403 * t722 + t502 * t726, pkin(5) * t455 + t398 * t722 + t422 * t726, t463 * t722 + t564 * t726, t425 * t722 + t508 * t726, t439 * t722 + t549 * t726, t462 * t722 + t562 * t726, t440 * t722 + t550 * t726, t492 * t722 + t583 * t726, pkin(5) * t410 + t338 * t722 + t376 * t726, pkin(5) * t412 + t339 * t722 + t379 * t726, pkin(5) * t395 + t336 * t722 + t358 * t726, pkin(5) * t350 + t322 * t722 + t337 * t726, t372 * t722 + t427 * t726, t344 * t722 + t382 * t726, t369 * t722 + t446 * t726, t371 * t722 + t426 * t726, t370 * t722 + t447 * t726, t408 * t722 + t466 * t726, pkin(5) * t347 + t313 * t722 + t326 * t726, pkin(5) * t352 + t314 * t722 + t328 * t726, pkin(5) * t335 + t307 * t722 + t316 * t726, pkin(5) * t312 + t306 * t722 + t309 * t726; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t700, t701, 0, 0, t705, 0.2e1 * t716 * t754, 0, t706, 0, 0, -qJ(2) * t692 + t717 * t741, qJ(2) * t691 - t716 * t741, pkin(1) * t696 + qJ(2) * t694 + t605, pkin(1) * t682 + qJ(2) * t605, t616 * t717 + t617 * t716, t593 * t717 + t595 * t716, t608 * t717 + t611 * t716, t614 * t717 + t615 * t716, t607 * t717 + t610 * t716, t635 * t717 + t636 * t716, -pkin(1) * t646 + qJ(2) * t528 + t541 * t717 + t566 * t716, -pkin(1) * t648 + qJ(2) * t559 + t548 * t717 + t575 * t716, -pkin(1) * t625 + qJ(2) * t532 + t465 * t717 + t493 * t716, pkin(1) * t642 - pkin(6) * t781 + qJ(2) * t458 + t503 * t717, t521 * t717 + t523 * t716, t478 * t717 + t479 * t716, t496 * t717 + t498 * t716, t520 * t717 + t522 * t716, t497 * t717 + t499 * t716, t553 * t717 + t554 * t716, -pkin(1) * t529 + qJ(2) * t432 + t380 * t717 + t386 * t716, -pkin(1) * t537 + qJ(2) * t438 + t381 * t717 + t387 * t716, -pkin(1) * t509 + qJ(2) * t418 + t364 * t717 + t373 * t716, -pkin(1) * t420 + qJ(2) * t368 + t343 * t717 + t354 * t716, t414 * t717 + t416 * t716, t377 * t717 + t378 * t716, t404 * t717 + t406 * t716, t413 * t717 + t415 * t716, t405 * t717 + t407 * t716, t460 * t717 + t461 * t716, -pkin(1) * t423 + qJ(2) * t361 + t324 * t717 + t327 * t716, -pkin(1) * t441 + qJ(2) * t366 + t325 * t717 + t329 * t716, -pkin(1) * t383 + qJ(2) * t342 + t315 * t717 + t317 * t716, -pkin(1) * t332 + qJ(2) * t319 + t308 * t717 + t310 * t716;];
tauB_reg = t1;
