% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRPRP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d4,theta1,theta3]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 15:29
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRPRP1_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRPRP1_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRPRP1_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRPRP1_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRPRP1_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRPRP1_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 15:28:46
% EndTime: 2019-12-05 15:28:58
% DurationCPUTime: 10.55s
% Computational Cost: add. (15776->444), mult. (36564->622), div. (0->0), fcn. (25546->8), ass. (0->325)
t537 = qJD(4) ^ 2;
t531 = cos(pkin(8));
t535 = cos(qJ(4));
t529 = sin(pkin(8));
t533 = sin(qJ(4));
t587 = t529 * t533;
t490 = (-t531 * t535 + t587) * qJD(2);
t612 = t490 ^ 2;
t471 = t612 - t537;
t551 = t529 * t535 + t531 * t533;
t492 = t551 * qJD(2);
t446 = t492 * t490;
t621 = qJDD(4) + t446;
t601 = t621 * t535;
t380 = t471 * t533 + t601;
t602 = t621 * t533;
t386 = t471 * t535 - t602;
t332 = t380 * t529 - t386 * t531;
t576 = qJDD(2) * t531;
t488 = qJDD(2) * t587 - t535 * t576;
t534 = sin(qJ(2));
t536 = cos(qJ(2));
t314 = t332 * t534 - t488 * t536;
t317 = t332 * t536 + t488 * t534;
t530 = sin(pkin(7));
t532 = cos(pkin(7));
t711 = t314 * t532 + t317 * t530;
t710 = t314 * t530 - t317 * t532;
t487 = t492 ^ 2;
t432 = t537 + t487;
t364 = t432 * t535 + t602;
t391 = t432 * t533 - t601;
t306 = t364 * t531 - t391 * t529;
t709 = pkin(1) * t306;
t708 = qJ(3) * t306;
t336 = t364 * t529 + t391 * t531;
t707 = qJ(3) * t336;
t706 = t336 * t534;
t705 = t336 * t536;
t704 = -pkin(2) * t306 - pkin(3) * t364;
t580 = t492 * qJD(4);
t439 = t488 + 0.2e1 * t580;
t622 = qJDD(4) - t446;
t600 = t622 * t533;
t624 = -t612 - t537;
t633 = t535 * t624 - t600;
t423 = t535 * t622;
t641 = t533 * t624 + t423;
t652 = -t529 * t641 + t531 * t633;
t671 = t439 * t534 + t536 * t652;
t673 = -t536 * t439 + t534 * t652;
t682 = t530 * t671 + t532 * t673;
t703 = qJ(1) * t682;
t683 = -t530 * t673 + t532 * t671;
t702 = qJ(1) * t683;
t415 = -t612 - t487;
t623 = t551 * qJDD(2);
t637 = -t488 * t535 + t623 * t533;
t640 = -t488 * t533 - t535 * t623;
t650 = -t529 * t640 + t531 * t637;
t670 = t415 * t534 + t536 * t650;
t672 = -t415 * t536 + t534 * t650;
t684 = t530 * t670 + t532 * t672;
t701 = qJ(1) * t684;
t685 = -t530 * t672 + t532 * t670;
t700 = qJ(1) * t685;
t472 = -t487 + t537;
t656 = t535 * t472 + t600;
t657 = -t472 * t533 + t423;
t668 = -t529 * t656 + t531 * t657;
t687 = t623 * t534 + t536 * t668;
t688 = t534 * t668 - t623 * t536;
t699 = -t530 * t688 + t532 * t687;
t698 = t530 * t687 + t532 * t688;
t696 = pkin(5) * t672;
t695 = pkin(5) * t673;
t694 = pkin(6) * t364;
t693 = pkin(6) * t391;
t692 = pkin(1) * t672 - pkin(2) * t415 + qJ(3) * t650;
t691 = pkin(1) * t673 - pkin(2) * t439 + qJ(3) * t652;
t649 = t529 * t637 + t531 * t640;
t690 = -pkin(1) * t649 + pkin(5) * t670;
t651 = t529 * t633 + t531 * t641;
t689 = -pkin(1) * t651 + pkin(5) * t671;
t686 = t380 * t531 + t386 * t529;
t679 = qJ(3) * t649;
t678 = qJ(3) * t651;
t484 = qJD(4) * t490;
t544 = t623 - t484;
t642 = t484 - t544;
t677 = t642 * qJ(5);
t272 = -pkin(2) * t649 - pkin(3) * t640;
t676 = -pkin(2) * t651 - pkin(3) * t641;
t669 = t529 * t657 + t531 * t656;
t664 = pkin(6) * t633;
t663 = pkin(6) * t640;
t662 = pkin(6) * t641;
t442 = t487 - t612;
t659 = t442 * t534;
t658 = t442 * t536;
t508 = g(1) * t532 + g(2) * t530;
t566 = g(1) * t530 - t532 * g(2);
t582 = t536 * t508 - t534 * t566;
t611 = qJD(2) ^ 2;
t643 = -t611 * pkin(2) + qJDD(2) * qJ(3) + 0.2e1 * qJD(2) * qJD(3) - t582;
t562 = t534 * t508 + t536 * t566;
t564 = -t534 * t562 - t536 * t582;
t394 = t534 * t582 - t536 * t562;
t607 = t394 * t530;
t338 = t532 * t564 + t607;
t606 = t394 * t532;
t655 = -t530 * t564 + t606;
t575 = qJDD(2) * t534;
t506 = t611 * t536 + t575;
t574 = qJDD(2) * t536;
t579 = t534 * t611;
t507 = t574 - t579;
t453 = -t506 * t530 + t532 * t507;
t527 = g(3) - qJDD(1);
t480 = pkin(5) * t506 - t527 * t536;
t555 = -pkin(5) * t507 - t527 * t534;
t654 = -qJ(1) * t453 + t480 * t530 + t532 * t555;
t653 = -pkin(3) * t415 + pkin(6) * t637;
t571 = t534 * t446;
t440 = -t488 - t580;
t569 = t535 * t484;
t550 = -t440 * t533 + t569;
t557 = t535 * t440 + t533 * t484;
t616 = -t529 * t557 + t531 * t550;
t632 = t536 * t616 - t571;
t570 = t536 * t446;
t635 = t534 * t616 + t570;
t648 = -t530 * t635 + t532 * t632;
t647 = t530 * t632 + t532 * t635;
t549 = (-t490 * t533 - t492 * t535) * qJD(4);
t469 = t533 * t580;
t556 = t469 - t569;
t617 = -t529 * t549 + t531 * t556;
t634 = -qJDD(4) * t536 + t534 * t617;
t636 = t534 * qJDD(4) + t536 * t617;
t646 = t530 * t636 + t532 * t634;
t645 = -t530 * t634 + t532 * t636;
t644 = 2 * qJD(5);
t540 = t531 ^ 2;
t520 = t540 * t611;
t538 = t529 ^ 2;
t581 = t611 * t538;
t503 = t520 + t581;
t625 = t532 * t506 + t507 * t530;
t638 = qJ(1) * t625 + t480 * t532 - t530 * t555;
t620 = t611 * (t538 + t540);
t496 = t531 * t620;
t462 = -t496 * t534 + t531 * t574;
t464 = t496 * t536 + t531 * t575;
t401 = t462 * t532 - t464 * t530;
t631 = t462 * t530 + t464 * t532;
t514 = t531 * t527;
t378 = -t514 + (pkin(3) * t611 * t531 - pkin(6) * qJDD(2) - t643) * t529;
t414 = -t529 * t527 + t643 * t531;
t379 = -pkin(3) * t520 + pkin(6) * t576 + t414;
t328 = t533 * t378 + t535 * t379;
t428 = pkin(4) * t490 - qJ(5) * t492;
t554 = qJDD(4) * qJ(5) + qJD(4) * t644 - t490 * t428 + t328;
t457 = -t532 * t508 - t530 * t566;
t456 = -t530 * t508 + t532 * t566;
t618 = t529 * t556 + t531 * t549;
t615 = t529 * t550 + t531 * t557;
t402 = t533 * t544 + t535 * t580;
t405 = t535 * t544 - t469;
t344 = -t402 * t529 + t405 * t531;
t558 = t536 * t344 + t571;
t559 = t534 * t344 - t570;
t614 = -t530 * t559 + t532 * t558;
t613 = t530 * t558 + t532 * t559;
t610 = pkin(4) * t535;
t528 = qJDD(2) * pkin(2);
t327 = -t535 * t378 + t533 * t379;
t268 = -t327 * t535 + t328 * t533;
t609 = t268 * t529;
t608 = t268 * t531;
t547 = t611 * qJ(3) - qJDD(3) + t528 + t562;
t545 = pkin(3) * t576 + t503 * pkin(6) + t547;
t605 = t545 * t533;
t604 = t545 * t535;
t603 = t642 * t533;
t599 = t547 * t534;
t598 = t547 * t536;
t597 = t439 * t533;
t595 = t439 * t535;
t588 = t529 * t531;
t585 = t530 * t527;
t584 = t532 * t527;
t583 = -t415 - t537;
t568 = t529 * t576;
t567 = -qJ(5) * t533 - pkin(3);
t565 = t547 + t528;
t269 = t327 * t533 + t535 * t328;
t413 = t643 * t529 + t514;
t352 = t413 * t529 + t531 * t414;
t560 = t492 * t428 + qJDD(5) + t327;
t351 = t413 * t531 - t414 * t529;
t467 = t506 * t588;
t468 = t536 * t568 - t579 * t588;
t553 = t467 * t532 + t468 * t530;
t552 = t467 * t530 - t468 * t532;
t548 = -qJDD(4) * pkin(4) + t560;
t543 = -t440 * pkin(4) - t545 + t677;
t542 = t492 * t644 - t543;
t519 = t540 * qJDD(2);
t518 = t538 * qJDD(2);
t504 = t520 - t581;
t502 = t519 - t518;
t501 = t519 + t518;
t495 = t529 * t620;
t463 = t495 * t536 + t529 * t575;
t460 = t495 * t534 - t529 * t574;
t451 = t502 * t536 - t504 * t534;
t450 = t501 * t536 - t503 * t534;
t449 = t502 * t534 + t504 * t536;
t448 = t501 * t534 + t503 * t536;
t441 = t623 - 0.2e1 * t484;
t403 = -t460 * t530 + t463 * t532;
t400 = t460 * t532 + t463 * t530;
t375 = -t448 * t530 + t450 * t532;
t374 = t448 * t532 + t450 * t530;
t373 = pkin(1) * t527 + pkin(5) * t564;
t370 = -t441 * t533 - t595;
t368 = t441 * t535 - t597;
t358 = t595 - t603;
t357 = t535 * t642 + t597;
t349 = -t604 + t694;
t348 = -pkin(5) * t460 - t414 * t534 - t531 * t598;
t347 = -pkin(5) * t462 - t413 * t534 - t529 * t598;
t346 = pkin(5) * t463 + t414 * t536 - t531 * t599;
t345 = -pkin(5) * t464 + t413 * t536 - t529 * t599;
t341 = t402 * t531 + t405 * t529;
t326 = -t605 - t662;
t324 = -pkin(5) * t448 + t351 * t536;
t323 = pkin(5) * t450 + t351 * t534;
t320 = t352 * t536 - t599;
t319 = t352 * t534 + t598;
t312 = -pkin(3) * t441 - t605 + t693;
t311 = -t368 * t529 + t370 * t531;
t296 = pkin(4) * t623 + qJ(5) * t488 + t272;
t295 = -pkin(3) * t439 + t604 + t664;
t294 = t441 * t534 + t705;
t292 = -t441 * t536 + t706;
t290 = (pkin(4) * qJD(4) - (2 * qJD(5))) * t492 + t543;
t287 = -t357 * t529 + t358 * t531;
t286 = t537 * qJ(5) - t548;
t285 = -pkin(4) * t537 + t554;
t284 = t311 * t536 + t659;
t283 = t311 * t534 - t658;
t280 = (-t439 - t580) * pkin(4) + t542;
t277 = t534 * t642 - t705;
t276 = -t536 * t642 - t706;
t275 = -pkin(4) * t580 + t542 - t677;
t274 = t287 * t536 - t659;
t273 = t287 * t534 + t658;
t271 = t583 * qJ(5) + t548;
t270 = t583 * pkin(4) + t554;
t265 = -t319 * t530 + t320 * t532;
t264 = t319 * t532 + t320 * t530;
t263 = -qJ(5) * t595 - t280 * t533 - t662;
t262 = t328 - t704;
t261 = pkin(3) * t545 + pkin(6) * t269;
t260 = -t292 * t530 + t294 * t532;
t258 = t292 * t532 + t294 * t530;
t256 = -t268 - t663;
t255 = t535 * t280 + t567 * t439 + t664;
t254 = pkin(4) * t603 + t275 * t535 - t694;
t253 = t327 + t676;
t252 = -pkin(5) * t319 - (pkin(2) * t534 - qJ(3) * t536) * t351;
t251 = t285 * t535 - t286 * t533;
t250 = t285 * t533 + t286 * t535;
t249 = t269 + t653;
t248 = -t312 * t529 + t349 * t531 + t708;
t245 = -t693 + t533 * t275 - (pkin(3) + t610) * t642;
t242 = (-t624 - t537) * qJ(5) + (-qJDD(4) - t622) * pkin(4) + t560 + t676;
t241 = -t276 * t530 + t277 * t532;
t240 = t276 * t532 + t277 * t530;
t239 = -t295 * t529 + t326 * t531 - t678;
t238 = pkin(5) * t320 - (-pkin(2) * t536 - qJ(3) * t534 - pkin(1)) * t351;
t237 = -qJ(5) * t621 + (-t432 + t537) * pkin(4) - t554 + t704;
t236 = -t270 * t533 + t271 * t535 - t663;
t235 = t269 * t531 - t609;
t234 = t269 * t529 + t608;
t233 = t270 * t535 + t271 * t533 + t653;
t232 = t235 * t536 - t534 * t545;
t231 = t235 * t534 + t536 * t545;
t230 = -pkin(6) * t250 + (pkin(4) * t533 - qJ(5) * t535) * t290;
t229 = -t250 * t529 + t251 * t531;
t228 = t250 * t531 + t251 * t529;
t227 = -t255 * t529 + t263 * t531 - t678;
t226 = -pkin(2) * t234 - pkin(3) * t268;
t225 = -pkin(5) * t292 + t248 * t536 - t262 * t534;
t224 = -t249 * t529 + t256 * t531 - t679;
t223 = pkin(6) * t251 + (t567 - t610) * t290;
t222 = -t245 * t529 + t254 * t531 - t708;
t221 = t229 * t536 + t290 * t534;
t220 = t229 * t534 - t290 * t536;
t219 = pkin(5) * t294 + t248 * t534 + t262 * t536 + t709;
t218 = t239 * t536 - t253 * t534 - t695;
t217 = -pkin(6) * t608 - qJ(3) * t234 - t261 * t529;
t216 = t239 * t534 + t253 * t536 + t689;
t215 = -t233 * t529 + t236 * t531 - t679;
t214 = -t231 * t530 + t232 * t532;
t213 = t231 * t532 + t232 * t530;
t212 = t224 * t536 - t272 * t534 - t696;
t211 = t227 * t536 - t242 * t534 - t695;
t210 = t224 * t534 + t272 * t536 + t690;
t209 = t215 * t536 - t296 * t534 - t696;
t208 = t227 * t534 + t242 * t536 + t689;
t207 = -pkin(2) * t228 - pkin(3) * t250 - pkin(4) * t286 - qJ(5) * t285;
t206 = t215 * t534 + t296 * t536 + t690;
t205 = -pkin(5) * t276 + t222 * t536 - t237 * t534;
t204 = pkin(5) * t277 + t222 * t534 + t237 * t536 - t709;
t203 = -t220 * t530 + t221 * t532;
t202 = t220 * t532 + t221 * t530;
t201 = -qJ(3) * t228 - t223 * t529 + t230 * t531;
t200 = -pkin(5) * t231 + t217 * t536 - t226 * t534;
t199 = -pkin(1) * t234 + pkin(5) * t232 + t217 * t534 + t226 * t536;
t198 = -pkin(5) * t220 + t201 * t536 - t207 * t534;
t197 = -pkin(1) * t228 + pkin(5) * t221 + t201 * t534 + t207 * t536;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t457, 0, 0, 0, 0, 0, 0, -t625, -t453, 0, t338, 0, 0, 0, 0, 0, 0, -t631, t403, t375, t265, 0, 0, 0, 0, 0, 0, t683, t260, t685, t214, 0, 0, 0, 0, 0, 0, t683, t685, t241, t203; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t456, 0, 0, 0, 0, 0, 0, t453, -t625, 0, -t655, 0, 0, 0, 0, 0, 0, t401, t400, t374, t264, 0, 0, 0, 0, 0, 0, t682, t258, t684, t213, 0, 0, 0, 0, 0, 0, t682, t684, t240, t202; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t527, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t527, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t351, 0, 0, 0, 0, 0, 0, t651, -t306, t649, t234, 0, 0, 0, 0, 0, 0, t651, t649, t306, t228; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t585, -t584, -t456, -qJ(1) * t456, 0, 0, t453, 0, -t625, 0, t654, t638, t655, pkin(5) * t606 + qJ(1) * t655 - t373 * t530, -t552, -t449 * t530 + t451 * t532, t403, t552, t631, 0, -qJ(1) * t401 - t345 * t530 + t347 * t532, -qJ(1) * t400 - t346 * t530 + t348 * t532, -qJ(1) * t374 - t323 * t530 + t324 * t532, -qJ(1) * t264 - t238 * t530 + t252 * t532, t614, -t283 * t530 + t284 * t532, t699, t648, t710, t645, -t216 * t530 + t218 * t532 - t703, -qJ(1) * t258 - t219 * t530 + t225 * t532, -t210 * t530 + t212 * t532 - t701, -qJ(1) * t213 - t199 * t530 + t200 * t532, t614, t699, -t273 * t530 + t274 * t532, t645, -t710, t648, -t208 * t530 + t211 * t532 - t703, -t206 * t530 + t209 * t532 - t701, -qJ(1) * t240 - t204 * t530 + t205 * t532, -qJ(1) * t202 - t197 * t530 + t198 * t532; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t584, -t585, t457, qJ(1) * t457, 0, 0, t625, 0, t453, 0, -t638, t654, t338, pkin(5) * t607 + qJ(1) * t338 + t373 * t532, t553, t449 * t532 + t451 * t530, t400, -t553, -t401, 0, -qJ(1) * t631 + t345 * t532 + t347 * t530, qJ(1) * t403 + t346 * t532 + t348 * t530, qJ(1) * t375 + t323 * t532 + t324 * t530, qJ(1) * t265 + t238 * t532 + t252 * t530, t613, t283 * t532 + t284 * t530, t698, t647, -t711, t646, t216 * t532 + t218 * t530 + t702, qJ(1) * t260 + t219 * t532 + t225 * t530, t210 * t532 + t212 * t530 + t700, qJ(1) * t214 + t199 * t532 + t200 * t530, t613, t698, t273 * t532 + t274 * t530, t646, t711, t647, t208 * t532 + t211 * t530 + t702, t206 * t532 + t209 * t530 + t700, qJ(1) * t241 + t204 * t532 + t205 * t530, qJ(1) * t203 + t197 * t532 + t198 * t530; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t566, t508, 0, 0, 0, 0, 0, 0, 0, qJDD(2), pkin(1) * t507 + t562, -pkin(1) * t506 + t582, 0, -pkin(1) * t394, t518, 0.2e1 * t568, 0, t519, 0, 0, pkin(1) * t462 - qJ(3) * t496 + t565 * t531, pkin(1) * t460 + qJ(3) * t495 - t565 * t529, pkin(1) * t448 + pkin(2) * t503 + qJ(3) * t501 + t352, pkin(1) * t319 + pkin(2) * t547 + qJ(3) * t352, t341, t368 * t531 + t370 * t529, t669, t615, t686, t618, t295 * t531 + t326 * t529 + t691, pkin(1) * t292 - pkin(2) * t441 + t312 * t531 + t349 * t529 + t707, t249 * t531 + t256 * t529 + t692, pkin(1) * t231 + pkin(2) * t545 - pkin(6) * t609 + qJ(3) * t235 + t261 * t531, t341, t669, t357 * t531 + t358 * t529, t618, -t686, t615, t255 * t531 + t263 * t529 + t691, t233 * t531 + t236 * t529 + t692, pkin(1) * t276 - pkin(2) * t642 + t245 * t531 + t254 * t529 - t707, pkin(1) * t220 - pkin(2) * t290 + qJ(3) * t229 + t223 * t531 + t230 * t529;];
tauB_reg = t1;
