% Calculate inertial parameters regressor of coriolis matrix for
% S5PRRPP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,theta1,theta4]';
% 
% Output:
% cmat_reg [(5*5)x(5*10)]
%   inertial parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:14
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PRRPP3_coriolismatJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPP3_coriolismatJ_fixb_reg2_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPP3_coriolismatJ_fixb_reg2_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRRPP3_coriolismatJ_fixb_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:13:40
% EndTime: 2019-12-05 16:13:50
% DurationCPUTime: 4.06s
% Computational Cost: add. (1544->298), mult. (4045->427), div. (0->0), fcn. (3795->6), ass. (0->246)
t183 = sin(pkin(8));
t361 = t183 / 0.2e1;
t184 = cos(pkin(8));
t186 = sin(qJ(2));
t174 = t186 * t184;
t187 = cos(qJ(3));
t188 = cos(qJ(2));
t293 = t188 * t183;
t113 = t187 * t293 - t174;
t292 = t188 * t184;
t298 = t186 * t183;
t114 = t187 * t292 + t298;
t360 = t113 * t361 + t114 * t184 / 0.2e1;
t230 = t360 * qJ(4);
t179 = t183 ^ 2;
t180 = t184 ^ 2;
t161 = t180 + t179;
t139 = t161 * qJ(4);
t294 = t187 * t186;
t246 = t294 / 0.2e1;
t112 = t184 * t294 - t293;
t311 = t112 * t184;
t111 = t183 * t294 + t292;
t312 = t111 * t183;
t336 = -t311 / 0.2e1 - t312 / 0.2e1;
t193 = t246 + t336;
t359 = -qJD(1) * t193 + t139 * qJD(3);
t185 = sin(qJ(3));
t291 = t188 * t185;
t169 = t291 / 0.2e1;
t324 = -t183 / 0.2e1;
t328 = t111 / 0.2e1;
t206 = t112 * t324 + t184 * t328;
t194 = t206 * t185 + t169;
t181 = t185 ^ 2;
t297 = t186 * t188;
t198 = t111 * t113 + t112 * t114 + t181 * t297;
t338 = t198 * qJD(1);
t358 = t194 * qJD(4) + t338;
t320 = -t188 / 0.2e1;
t195 = (t320 + t206) * t185;
t357 = qJD(4) * t195 - t338;
t323 = -t184 / 0.2e1;
t301 = t185 * qJ(4);
t316 = t187 * pkin(3);
t234 = -t301 - t316;
t141 = -pkin(2) + t234;
t315 = t187 * pkin(6);
t171 = t183 * t315;
t85 = t184 * t141 - t171;
t302 = t184 * t187;
t172 = pkin(6) * t302;
t86 = t183 * t141 + t172;
t207 = t86 * t323 + t85 * t361;
t260 = t315 / 0.2e1;
t26 = t260 + t207;
t356 = -t26 * qJD(2) + t359;
t305 = t184 * qJ(5);
t317 = t183 * pkin(4);
t197 = (pkin(6) / 0.2e1 - t305 / 0.2e1 + t317 / 0.2e1) * t187;
t67 = -t187 * qJ(5) + t86;
t68 = t187 * pkin(4) - t85;
t208 = t67 * t323 + t68 * t324;
t15 = t197 + t208;
t355 = -t15 * qJD(2) + t359;
t267 = t185 * qJD(3);
t256 = t184 * t267;
t182 = t187 ^ 2;
t307 = t181 * t183;
t129 = -t182 * t183 + t307;
t274 = t129 * qJD(2);
t354 = t274 - t256;
t296 = t187 * qJ(4);
t153 = t185 * pkin(3) - t296;
t131 = t183 * t153;
t303 = t184 * t185;
t90 = -pkin(6) * t303 + t131;
t23 = t90 * t187 + (-t86 + 0.2e1 * t172) * t185;
t327 = -t112 / 0.2e1;
t211 = t184 * t246 + t327;
t49 = (-t293 / 0.2e1 + t211) * t185;
t285 = t49 * qJD(1);
t353 = -t23 * qJD(2) - t285;
t213 = pkin(6) - t305 + t317;
t103 = t213 * t187;
t102 = t213 * t185;
t295 = t187 * t102;
t215 = t185 * t103 + t295;
t69 = t131 + (-pkin(6) * t184 + qJ(5)) * t185;
t8 = t215 * t184 - t67 * t185 + t69 * t187;
t352 = t8 * qJD(2) + t285;
t248 = t187 * t327;
t189 = (t187 * t328 - t114 / 0.2e1) * t184 + (t248 - t113 / 0.2e1) * t183;
t351 = qJD(1) * t189;
t329 = -t111 / 0.2e1;
t212 = t183 * t246 + t329;
t191 = (t292 / 0.2e1 + t212) * t185;
t350 = qJD(1) * t191;
t348 = qJD(1) * t195;
t347 = qJD(2) * t198;
t346 = qJD(4) * t193;
t344 = t161 * qJD(3);
t265 = t187 * qJD(3);
t343 = t189 * qJD(2);
t342 = t189 * qJD(3);
t341 = t191 * qJD(2);
t340 = t191 * qJD(3);
t204 = t246 - t336;
t337 = t204 * qJD(4);
t190 = t206 * t187 + t360;
t300 = t185 * t186;
t335 = qJD(2) * t190 - t300 * t344;
t244 = -t291 / 0.2e1;
t196 = t184 * t244 + t212 * t185;
t249 = t186 * t265;
t334 = qJD(2) * t196 - t184 * t249;
t280 = qJD(2) * t185;
t333 = qJD(3) * t190 + (t113 * t184 - t114 * t183) * t280;
t332 = qJD(3) * t196 + (t113 * t187 + t181 * t293) * qJD(2);
t331 = -qJD(2) * t195 + qJD(3) * t193;
t330 = qJD(2) * t194 + qJD(3) * t204;
t326 = t112 / 0.2e1;
t325 = -t174 / 0.2e1;
t322 = -t185 / 0.2e1;
t321 = t185 / 0.2e1;
t319 = pkin(6) * t183;
t318 = pkin(6) * t188;
t314 = t67 * t187;
t137 = -t184 * pkin(4) - t183 * qJ(5) - pkin(3);
t17 = pkin(4) * t322 + (pkin(6) * t322 + t102 / 0.2e1) * t183 + (-t153 / 0.2e1 + t296 / 0.2e1 + t137 * t321) * t184;
t308 = t17 * qJD(2);
t306 = t183 * t185;
t304 = t184 * t153;
t299 = t185 * t187;
t159 = t186 ^ 2 * t299;
t24 = -t159 + (t111 * t298 + t112 * t174) * t185;
t287 = t24 * qJD(1);
t25 = -t159 + (t311 + t312) * t300;
t286 = t25 * qJD(1);
t284 = t49 * qJD(2);
t283 = t49 * qJD(3);
t281 = t181 + t182;
t74 = (-0.1e1 + t281) * t297;
t282 = t74 * qJD(1);
t167 = t182 - t181;
t279 = qJD(2) * t187;
t278 = qJD(4) * t187;
t277 = qJD(5) * t184;
t127 = t161 * t181;
t276 = t127 * qJD(2);
t275 = (t179 - t180) * t265;
t273 = t129 * qJD(3);
t130 = t167 * t184;
t121 = t130 * qJD(2);
t270 = t167 * qJD(2);
t269 = t183 * qJD(3);
t268 = t183 * qJD(5);
t266 = t186 * qJD(2);
t264 = t188 * qJD(2);
t263 = pkin(6) * t306;
t262 = pkin(2) * t280;
t261 = pkin(2) * t279;
t259 = t181 * t174;
t165 = t183 * t278;
t258 = t184 * t268;
t257 = t184 * t269;
t255 = t184 * t280;
t254 = qJD(4) * t303;
t253 = t184 * t279;
t252 = t185 * t265;
t251 = t185 * t268;
t250 = t186 * t267;
t170 = t185 * t279;
t245 = t293 / 0.2e1;
t242 = t179 * t170;
t241 = t180 * t170;
t240 = t184 * qJD(2) * t307;
t239 = t183 * t256;
t237 = t183 * t170;
t236 = t185 * t165;
t235 = t184 * t170;
t201 = t103 / 0.2e1 + t208;
t70 = -t304 + (-pkin(4) - t319) * t185;
t210 = t69 * t326 + t70 * t328;
t2 = t102 * t246 - t230 + (t137 * t320 + t201 * t186) * t185 + t210;
t5 = t102 * t103 + t67 * t69 + t68 * t70;
t233 = t2 * qJD(1) + t5 * qJD(2);
t232 = t70 * t183 + t69 * t184;
t89 = t263 + t304;
t231 = -t89 * t183 + t90 * t184;
t10 = pkin(6) ^ 2 * t299 + t85 * t89 + t86 * t90;
t192 = (t207 + t315) * t186;
t209 = t90 * t326 + t89 * t329;
t4 = -t230 + (t188 * pkin(3) / 0.2e1 + t192) * t185 + t209;
t229 = t4 * qJD(1) + t10 * qJD(2);
t6 = -t68 * t302 - t70 * t303 + (t185 * t69 + t314) * t183;
t228 = -t6 * qJD(2) + t351;
t7 = (t185 * t89 + t187 * t85) * t184 + (t185 * t90 + t187 * t86) * t183;
t227 = t7 * qJD(2) - t351;
t9 = t215 * t183 - t68 * t185 + t70 * t187;
t226 = t9 * qJD(2) + t350;
t225 = t187 * t239;
t224 = t183 * t235;
t223 = -t137 * t187 + t301;
t21 = -t68 * t303 + t67 * t306;
t221 = -t21 * qJD(2) + t348;
t22 = -t85 * t185 + (t89 - 0.2e1 * t263) * t187;
t220 = t22 * qJD(2) - t350;
t28 = (t183 * t86 + t184 * t85) * t185;
t218 = qJD(2) * t28 - t348;
t29 = t102 * t303 + t314;
t38 = t325 + t259 / 0.2e1 + (t245 + t326) * t187;
t217 = -t38 * qJD(1) - t29 * qJD(2);
t48 = t183 * t169 + t211 * t185;
t216 = qJD(2) * (t114 * t187 + t181 * t292) + qJD(3) * t48;
t108 = (-0.1e1 / 0.2e1 + t179 / 0.2e1 - t180 / 0.2e1) * t185;
t205 = -t108 * qJD(2) + t257;
t126 = t255 + t269;
t203 = t48 * qJD(2) + t183 * t249;
t142 = t180 * t181 + t182;
t202 = t142 * qJD(2) + t239;
t173 = t181 * t318;
t150 = t161 * qJD(4);
t149 = t187 * t254;
t148 = t180 * t252;
t147 = t179 * t252;
t138 = t184 * t251;
t134 = t139 * qJD(4);
t124 = -0.2e1 * t224;
t123 = 0.2e1 * t224;
t120 = t130 * qJD(3);
t115 = t127 * qJD(4);
t110 = t179 * qJD(3) + t183 * t255;
t109 = t179 * t322 + t180 * t321 + t322;
t105 = t126 * t187;
t104 = -t184 * t265 + t237;
t88 = (t180 * t280 + t257) * t187;
t87 = (t179 * t280 - t257) * t187;
t75 = t183 * t267 - t121;
t39 = t248 - t259 / 0.2e1 + t187 * t245 + t325;
t27 = t260 - t207;
t18 = t296 * t323 - t137 * t303 / 0.2e1 + t102 * t324 - t304 / 0.2e1 + (-t319 / 0.2e1 - pkin(4) / 0.2e1) * t185;
t16 = t197 - t208;
t3 = pkin(3) * t244 + t185 * t192 + t209 + t230;
t1 = t137 * t169 + (t295 / 0.2e1 + t201 * t185) * t186 + t210 + t230;
t11 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t74 * qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3) * t24 + t347, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3) * t25 + t347; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t266, -t264, 0, 0, 0, 0, 0, 0, 0, 0, -t187 * t266 - t188 * t267, t185 * t266 - t188 * t265, t281 * t264, t282 + (-t186 * pkin(2) + t182 * t318 + t173) * qJD(2), 0, 0, 0, 0, 0, 0, t332, t216, t333, (-t113 * t85 + t114 * t86 + t173) * qJD(2) + t3 * qJD(3) + t358, 0, 0, 0, 0, 0, 0, t332, t333, -t216, (t102 * t291 + t113 * t68 + t114 * t67) * qJD(2) + t1 * qJD(3) + t39 * qJD(5) + t358; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t185 * t264 - t249, -t187 * t264 + t250, 0, 0, 0, 0, 0, 0, 0, 0, t334, t203, t335, -t287 + t3 * qJD(2) + t337 + (-t161 * t301 - t316) * qJD(3) * t186, 0, 0, 0, 0, 0, 0, t334, t335, -t203, -t286 + t1 * qJD(2) + t337 + (t137 * t265 + (-qJ(4) * t344 - t268) * t185) * t186; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t330, 0, 0, 0, 0, 0, 0, 0, 0, 0, t330; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39 * qJD(2) - t183 * t250; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t282, 0, 0, 0, 0, 0, 0, t340, t283, t342, qJD(3) * t4 + t357, 0, 0, 0, 0, 0, 0, t340, t342, -t283, qJD(3) * t2 - qJD(5) * t38 + t357; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t252, t167 * qJD(3), 0, -t252, 0, 0, -pkin(2) * t267, -pkin(2) * t265, 0, 0, t148, -0.2e1 * t225, -t120, t147, -t273, -t252, -t22 * qJD(3) + t149, t23 * qJD(3) - t236, -t7 * qJD(3) + t115, qJD(3) * t10 - qJD(4) * t28, t148, -t120, 0.2e1 * t225, -t252, t273, t147, t9 * qJD(3) - t181 * t258 + t149, -t6 * qJD(3) + t187 * t251 + t115, -t8 * qJD(3) + t142 * qJD(5) + t236, qJD(3) * t5 - qJD(4) * t21 - qJD(5) * t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t170, t270, t265, -t170, -t267, 0, -pkin(6) * t265 - t262, pkin(6) * t267 - t261, 0, 0, t88, t124 - t275, t75, t87, -t354, -t170, (t183 * t234 - t172) * qJD(3) + t165 - t220, t171 * qJD(3) + (qJD(3) * t234 + t278) * t184 - t353, qJD(3) * t231 - t227, (-pkin(3) * t315 + qJ(4) * t231) * qJD(3) + t27 * qJD(4) + t229, t88, t75, t123 + t275, -t170, t354, t87, (-t103 * t184 - t183 * t223) * qJD(3) + t165 + t109 * qJD(5) + t226, qJD(3) * t232 + t228, -t103 * t269 + t138 + (qJD(3) * t223 - t278) * t184 - t352, (qJ(4) * t232 + t103 * t137) * qJD(3) + t16 * qJD(4) + t18 * qJD(5) + t233; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105, -t104, t276, qJD(3) * t27 - t218, 0, 0, 0, 0, 0, 0, t105, t276, t104, qJD(3) * t16 + t221; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t109 * qJD(3) - t240, t237, t202, qJD(3) * t18 + t217; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t341, -t284, -t343, -qJD(2) * t4 + t287 - t346, 0, 0, 0, 0, 0, 0, -t341, -t343, t284, -qJD(2) * t2 + t286 - t346; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t170, -t270, 0, t170, 0, 0, t262, t261, 0, 0, -t241, t123, t121, -t242, t274, t170, t220, t353, t227, -qJD(4) * t26 - t229, -t241, t121, t124, t170, -t274, -t242, -t108 * qJD(5) - t226, -t187 * t277 - t228, t138 + t352, -qJD(4) * t15 - qJD(5) * t17 - t233; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t150, t134, 0, 0, 0, 0, 0, 0, t258, t150, t179 * qJD(5), -t137 * t268 + t134; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t344, t356, 0, 0, 0, 0, 0, 0, 0, t344, 0, t355; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t205, -t253, t110, -t137 * t269 - t308; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t331, 0, 0, 0, 0, 0, 0, 0, 0, 0, t331; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t235, t237, -t276, qJD(3) * t26 + t218, 0, 0, 0, 0, 0, 0, -t235, -t276, -t237, t15 * qJD(3) - t185 * t277 - t221; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t344, -t356, 0, 0, 0, 0, 0, 0, 0, -t344, 0, -t268 - t355; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38 * qJD(2); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t108 * qJD(3) + t240, -t104, -t202, t17 * qJD(3) - t217 + t254; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t205, t253, -t110, t308 + (t137 * qJD(3) + qJD(4)) * t183; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t11;
