% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5PRRPP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,theta1,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:14
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5PRRPP3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPP3_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPP3_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5PRRPP3_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5PRRPP3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRRPP3_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:13:43
% EndTime: 2019-12-05 16:14:02
% DurationCPUTime: 15.19s
% Computational Cost: add. (15495->483), mult. (33221->671), div. (0->0), fcn. (21570->8), ass. (0->357)
t582 = sin(pkin(8));
t584 = cos(pkin(8));
t587 = sin(qJ(3));
t634 = qJD(2) * t587;
t541 = t582 * qJD(3) + t584 * t634;
t535 = t541 ^ 2;
t589 = cos(qJ(3));
t578 = t589 ^ 2;
t591 = qJD(2) ^ 2;
t575 = t578 * t591;
t484 = t575 + t535;
t629 = qJD(2) * qJD(3);
t571 = t587 * t629;
t626 = t589 * qJDD(2);
t551 = -t571 + t626;
t539 = -t584 * qJD(3) + t582 * t634;
t672 = t541 * t539;
t599 = t551 - t672;
t656 = t584 * t599;
t427 = t582 * t484 + t656;
t633 = qJD(2) * t589;
t527 = t539 * t633;
t621 = t589 * t629;
t628 = t587 * qJDD(2);
t550 = t621 + t628;
t604 = t582 * qJDD(3) + t584 * t550;
t688 = t527 + t604;
t377 = t589 * t427 + t587 * t688;
t666 = t582 * t599;
t404 = t584 * t484 - t666;
t588 = sin(qJ(2));
t590 = cos(qJ(2));
t335 = t590 * t377 - t588 * t404;
t371 = t587 * t427 - t589 * t688;
t583 = sin(pkin(7));
t585 = cos(pkin(7));
t307 = t583 * t335 - t585 * t371;
t812 = qJ(1) * t307;
t309 = t585 * t335 + t583 * t371;
t811 = qJ(1) * t309;
t333 = t588 * t377 + t590 * t404;
t810 = pkin(5) * t333;
t809 = pkin(1) * t333 + pkin(2) * t404 + pkin(6) * t377;
t808 = pkin(1) * t371 - pkin(5) * t335;
t528 = t541 * t633;
t615 = -t584 * qJDD(3) + t582 * t550;
t707 = -t615 + t528;
t658 = t584 * t707;
t668 = t582 * t688;
t394 = t658 - t668;
t677 = t539 ^ 2;
t491 = t535 - t677;
t368 = t589 * t394 + t587 * t491;
t388 = t582 * t707 + t584 * t688;
t326 = t590 * t368 + t588 * t388;
t365 = t587 * t394 - t589 * t491;
t807 = t583 * t326 - t585 * t365;
t806 = t585 * t326 + t583 * t365;
t523 = t677 - t575;
t432 = t584 * t523 + t666;
t469 = -t615 - t528;
t382 = t589 * t432 + t587 * t469;
t424 = t582 * t523 - t656;
t340 = t590 * t382 + t588 * t424;
t374 = t587 * t432 - t589 * t469;
t805 = t583 * t340 - t585 * t374;
t804 = t585 * t340 + t583 * t374;
t802 = pkin(6) * t371;
t687 = t535 + t677;
t689 = t527 - t604;
t727 = t584 * t469 - t582 * t689;
t744 = t587 * t727 + t589 * t687;
t728 = t582 * t469 + t584 * t689;
t741 = -t587 * t687 + t589 * t727;
t760 = t588 * t728 + t590 * t741;
t783 = t583 * t744 + t585 * t760;
t801 = qJ(1) * t783;
t784 = t583 * t760 - t585 * t744;
t800 = qJ(1) * t784;
t793 = pkin(2) * t371 + qJ(4) * t427;
t791 = t588 * t368 - t590 * t388;
t790 = t588 * t382 - t590 * t424;
t761 = t588 * t741 - t590 * t728;
t789 = pkin(5) * t761;
t600 = -t551 - t672;
t665 = t582 * t600;
t685 = -t677 - t575;
t702 = t584 * t685 - t665;
t722 = t587 * t702 + t589 * t707;
t655 = t584 * t600;
t704 = t582 * t685 + t655;
t720 = -t587 * t707 + t589 * t702;
t739 = t588 * t704 + t590 * t720;
t763 = t583 * t722 + t585 * t739;
t788 = qJ(1) * t763;
t765 = t583 * t739 - t585 * t722;
t787 = qJ(1) * t765;
t786 = -pkin(1) * t761 - pkin(6) * t741;
t785 = -pkin(1) * t744 + pkin(5) * t760;
t780 = pkin(3) * t404;
t742 = t588 * t720 - t590 * t704;
t779 = pkin(5) * t742;
t777 = pkin(6) * t744;
t776 = qJ(4) * t404;
t768 = -pkin(1) * t742 + pkin(2) * t704 - pkin(6) * t720;
t767 = -pkin(2) * t744 - pkin(3) * t687 - qJ(4) * t727;
t766 = -pkin(1) * t722 + pkin(5) * t739;
t524 = -t535 + t575;
t705 = -t582 * t524 + t655;
t721 = -t587 * t705 - t589 * t689;
t706 = -t584 * t524 - t665;
t719 = -t587 * t689 + t589 * t705;
t740 = -t588 * t706 + t590 * t719;
t764 = t583 * t740 + t585 * t721;
t762 = -t583 * t721 + t585 * t740;
t758 = pkin(6) * t722;
t757 = t707 * pkin(4);
t756 = qJ(4) * t728;
t747 = -pkin(2) * t722 - qJ(4) * t702;
t743 = t588 * t719 + t590 * t706;
t737 = pkin(3) * t704;
t735 = qJ(4) * t704;
t594 = (t539 * t584 - t541 * t582) * t633;
t683 = -t589 * t551 - t587 * t594;
t593 = (-t539 * t582 - t541 * t584) * t633;
t647 = t587 * t551;
t681 = t589 * t594 - t647;
t697 = -t588 * t593 + t590 * t681;
t726 = t583 * t697 + t585 * t683;
t596 = -t584 * t527 + t582 * t615;
t623 = t589 * t672;
t682 = -t587 * t596 - t623;
t595 = t527 * t582 + t584 * t615;
t624 = t587 * t672;
t680 = t589 * t596 - t624;
t698 = -t588 * t595 + t590 * t680;
t725 = t583 * t698 + t585 * t682;
t724 = -t583 * t683 + t585 * t697;
t723 = -t583 * t682 + t585 * t698;
t452 = t582 * t528 + t584 * t604;
t601 = -t587 * t452 + t623;
t451 = t584 * t528 - t582 * t604;
t608 = t589 * t452 + t624;
t679 = -t588 * t451 + t590 * t608;
t703 = t583 * t679 + t585 * t601;
t701 = -t583 * t601 + t585 * t679;
t700 = t588 * t680 + t590 * t595;
t699 = t588 * t681 + t590 * t593;
t559 = t585 * g(1) + t583 * g(2);
t579 = g(3) - qJDD(1);
t520 = -t590 * t559 - t588 * t579;
t499 = -t591 * pkin(2) + qJDD(2) * pkin(6) + t520;
t674 = pkin(3) * t589;
t607 = -qJ(4) * t587 - t674;
t548 = t607 * qJD(2);
t690 = (qJD(2) * t548 + t499) * t587;
t558 = t583 * g(1) - t585 * g(2);
t542 = t585 * t558;
t495 = -t583 * t559 + t542;
t487 = t539 * pkin(4) - t541 * qJ(5);
t519 = -t588 * t559 + t590 * t579;
t498 = -qJDD(2) * pkin(2) - t591 * pkin(6) + t519;
t605 = -t551 + t571;
t606 = -t550 - t621;
t419 = pkin(3) * t605 + qJ(4) * t606 + t498;
t458 = t589 * t499 - t587 * t558;
t676 = qJD(3) ^ 2;
t420 = -t676 * pkin(3) + qJDD(3) * qJ(4) + t548 * t633 + t458;
t637 = t582 * t419 + t584 * t420;
t686 = -t551 * qJ(5) - 0.2e1 * qJD(5) * t633 - t539 * t487 + t637;
t684 = t590 * t451 + t588 * t608;
t545 = t589 * t558;
t610 = -qJDD(3) * pkin(3) - t676 * qJ(4) + qJDD(4) + t545;
t597 = t604 * qJ(5) - t610 + t757;
t648 = t587 * t499;
t678 = -(qJ(5) * t539 * t589 - t548 * t587) * qJD(2) - t597 + t648;
t675 = pkin(3) * t587;
t673 = pkin(4) * t584;
t577 = t587 ^ 2;
t671 = t577 * t591;
t418 = t610 + t690;
t670 = t582 * t418;
t625 = t590 * qJDD(2);
t555 = -t588 * t591 + t625;
t663 = t583 * t555;
t662 = t583 * t558;
t660 = t583 * t579;
t659 = t584 * t418;
t653 = t585 * t555;
t652 = t585 * t579;
t649 = t587 * t498;
t566 = t587 * t591 * t589;
t560 = qJDD(3) + t566;
t646 = t587 * t560;
t561 = qJDD(3) - t566;
t645 = t587 * t561;
t641 = t589 * t498;
t639 = t589 * t560;
t638 = t589 * t561;
t636 = -t584 * t419 + t582 * t420;
t635 = t577 + t578;
t632 = qJD(4) * t539;
t631 = qJD(4) * t541;
t630 = qJD(5) * t541;
t627 = t588 * qJDD(2);
t532 = 0.2e1 * t631;
t345 = t532 + t636;
t530 = -0.2e1 * t632;
t346 = t530 + t637;
t620 = qJ(5) * t582 + pkin(3);
t455 = t545 + t648;
t387 = t587 * t455 + t589 * t458;
t553 = t635 * qJDD(2);
t556 = t575 + t671;
t493 = t588 * t553 + t590 * t556;
t494 = t590 * t553 - t588 * t556;
t619 = -pkin(1) * t493 - pkin(2) * t556 - pkin(6) * t553 + qJ(1) * t494 - t387;
t554 = t590 * t591 + t627;
t618 = pkin(1) * t555 + qJ(1) * t554 - t519;
t617 = -pkin(1) * t554 + qJ(1) * t555 - t520;
t616 = t687 - t575;
t446 = t588 * t519 + t590 * t520;
t496 = -t585 * t559 - t662;
t613 = t588 * t566;
t612 = t590 * t566;
t609 = t541 * t487 + qJDD(5) + t636;
t501 = pkin(5) * t554 - t590 * t558;
t500 = -pkin(5) * t555 - t588 * t558;
t305 = -t584 * t345 + t582 * t346;
t306 = t582 * t345 + t584 * t346;
t386 = t589 * t455 - t587 * t458;
t445 = t590 * t519 - t588 * t520;
t603 = t530 + t686;
t598 = t551 * pkin(4) + t609;
t565 = -t575 - t676;
t564 = t575 - t676;
t563 = -t671 - t676;
t562 = -t671 + t676;
t557 = t575 - t671;
t552 = -0.2e1 * t571 + t626;
t549 = 0.2e1 * t621 + t628;
t547 = t635 * t629;
t537 = t585 * t554;
t536 = t583 * t554;
t529 = 0.2e1 * t630;
t517 = t588 * qJDD(3) + t590 * t547;
t516 = t589 * t550 - t577 * t629;
t515 = -t578 * t629 - t647;
t511 = -t587 * t563 - t638;
t510 = -t587 * t562 + t639;
t509 = t589 * t565 - t646;
t508 = t589 * t564 - t645;
t507 = t589 * t563 - t645;
t506 = -t589 * t562 - t646;
t505 = t587 * t565 + t639;
t504 = -t587 * t564 - t638;
t503 = t606 * t587;
t502 = t605 * t589;
t489 = -t587 * t549 + t589 * t552;
t488 = -t589 * t549 - t587 * t552;
t482 = t590 * t516 - t613;
t481 = t590 * t515 + t613;
t480 = t590 * t510 + t587 * t627;
t479 = t590 * t508 + t588 * t626;
t460 = t590 * t511 + t588 * t549;
t459 = t590 * t509 - t588 * t552;
t457 = t588 * t511 - t590 * t549;
t456 = t588 * t509 + t590 * t552;
t443 = t590 * t489 - t588 * t557;
t440 = -pkin(6) * t507 + t641;
t439 = -pkin(6) * t505 + t649;
t434 = t585 * t446 - t662;
t433 = t583 * t446 + t542;
t417 = -pkin(2) * t507 + t458;
t416 = -pkin(2) * t505 + t455;
t411 = t585 * t460 + t583 * t507;
t410 = t585 * t459 + t583 * t505;
t409 = t583 * t460 - t585 * t507;
t408 = t583 * t459 - t585 * t505;
t370 = -pkin(1) * t456 - pkin(2) * t552 - pkin(6) * t509 + t641;
t369 = -pkin(1) * t457 + pkin(2) * t549 - pkin(6) * t511 - t649;
t360 = -pkin(5) * t493 + t590 * t386;
t359 = t590 * t387 + t588 * t498;
t358 = t588 * t387 - t590 * t498;
t349 = t659 + t776;
t347 = t670 - t735;
t344 = -0.2e1 * t630 + t678;
t343 = -pkin(3) * t728 - pkin(4) * t689 - qJ(5) * t469;
t342 = -pkin(5) * t457 - t588 * t417 + t590 * t440;
t341 = -pkin(5) * t456 - t588 * t416 + t590 * t439;
t332 = t529 - t678 + t757;
t331 = t529 - t690 + (t688 + t527) * qJ(5) + t597;
t324 = qJ(5) * t575 - t598 - 0.2e1 * t631;
t323 = t346 + t780;
t322 = -pkin(4) * t575 + t603;
t321 = t585 * t359 - t386 * t583;
t320 = t583 * t359 + t386 * t585;
t315 = t345 - t737;
t314 = -pkin(1) * t358 + pkin(2) * t498 - pkin(6) * t387;
t313 = t616 * qJ(5) + t532 + t598;
t312 = t616 * pkin(4) + t603;
t311 = pkin(3) * t688 - t670 - t793;
t304 = -pkin(3) * t707 + t659 + t747;
t303 = qJ(5) * t658 - t582 * t332 - t735;
t302 = -pkin(5) * t358 - (pkin(2) * t588 - pkin(6) * t590) * t386;
t301 = -pkin(4) * t668 + t584 * t331 - t776;
t296 = -t737 + t532 + (-t685 - t575) * qJ(5) + (-t600 + t551) * pkin(4) + t609;
t291 = -t780 + qJ(5) * t599 + 0.2e1 * t632 + (-t484 + t575) * pkin(4) - t686;
t290 = t589 * t306 + t587 * t418;
t289 = t587 * t306 - t589 * t418;
t288 = -t305 - t756;
t287 = t584 * t322 - t582 * t324;
t286 = t582 * t322 + t584 * t324;
t285 = -t584 * t332 - t620 * t707 + t747;
t284 = -t587 * t323 + t589 * t349 - t802;
t283 = -t582 * t331 + (-pkin(3) - t673) * t688 + t793;
t282 = -t587 * t315 + t589 * t347 - t758;
t281 = -t306 + t767;
t280 = t589 * t287 + t587 * t344;
t279 = t587 * t287 - t589 * t344;
t278 = -t582 * t312 + t584 * t313 - t756;
t277 = t589 * t288 + t675 * t728 - t777;
t276 = t590 * t290 + t588 * t305;
t275 = t588 * t290 - t590 * t305;
t274 = -t589 * t323 - t587 * t349 - t809;
t273 = -pkin(2) * t289 + pkin(3) * t418 - qJ(4) * t306;
t272 = -t587 * t296 + t589 * t303 - t758;
t271 = -qJ(4) * t286 + (pkin(4) * t582 - qJ(5) * t584) * t344;
t270 = -t584 * t312 - t582 * t313 + t767;
t269 = -t589 * t315 - t587 * t347 + t768;
t268 = -t587 * t291 + t589 * t301 + t802;
t267 = -pkin(3) * t286 - pkin(4) * t324 - qJ(5) * t322;
t266 = t589 * t278 - t587 * t343 - t777;
t265 = -t587 * t288 + (pkin(2) + t674) * t728 + t786;
t264 = t590 * t284 - t588 * t311 - t810;
t263 = -pkin(6) * t289 + (-qJ(4) * t589 + t675) * t305;
t262 = -t589 * t296 - t587 * t303 + t768;
t261 = t590 * t282 - t588 * t304 - t779;
t260 = t590 * t280 + t588 * t286;
t259 = t588 * t280 - t590 * t286;
t258 = t585 * t276 + t583 * t289;
t257 = t583 * t276 - t585 * t289;
t256 = -t589 * t291 - t587 * t301 + t809;
t255 = pkin(2) * t728 - t587 * t278 - t589 * t343 + t786;
t254 = t590 * t277 - t588 * t281 - t789;
t253 = t590 * t272 - t588 * t285 - t779;
t252 = t590 * t268 - t588 * t283 + t810;
t251 = -pkin(2) * t279 - qJ(4) * t287 + (t620 + t673) * t344;
t250 = t585 * t260 + t583 * t279;
t249 = t583 * t260 - t585 * t279;
t248 = t590 * t266 - t588 * t270 - t789;
t247 = -pkin(1) * t275 - pkin(6) * t290 + (pkin(2) - t607) * t305;
t246 = -pkin(6) * t279 - t587 * t267 + t589 * t271;
t245 = -pkin(5) * t275 + t590 * t263 - t588 * t273;
t244 = -pkin(1) * t259 + pkin(2) * t286 - pkin(6) * t280 - t589 * t267 - t587 * t271;
t243 = -pkin(5) * t259 + t590 * t246 - t588 * t251;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t496, 0, 0, 0, 0, 0, 0, -t537, -t653, 0, t434, 0, 0, 0, 0, 0, 0, t410, t411, t585 * t494, t321, 0, 0, 0, 0, 0, 0, t763, t309, t783, t258, 0, 0, 0, 0, 0, 0, t763, t783, -t309, t250; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t495, 0, 0, 0, 0, 0, 0, -t536, -t663, 0, t433, 0, 0, 0, 0, 0, 0, t408, t409, t583 * t494, t320, 0, 0, 0, 0, 0, 0, t765, t307, t784, t257, 0, 0, 0, 0, 0, 0, t765, t784, -t307, t249; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t579, 0, 0, 0, 0, 0, 0, t555, -t554, 0, -t445, 0, 0, 0, 0, 0, 0, t456, t457, t493, t358, 0, 0, 0, 0, 0, 0, t742, t333, t761, t275, 0, 0, 0, 0, 0, 0, t742, t761, -t333, t259; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t660, -t652, -t495, -qJ(1) * t495, 0, 0, t653, 0, -t537, t583 * qJDD(2), t585 * t500 + t583 * t618, t585 * t501 + t583 * t617, t585 * t445, -qJ(1) * t433 - (pkin(1) * t583 - pkin(5) * t585) * t445, t585 * t482 - t583 * t503, t585 * t443 - t583 * t488, t585 * t480 - t583 * t506, t585 * t481 - t583 * t502, t585 * t479 - t583 * t504, t585 * t517, -qJ(1) * t408 + t585 * t341 - t583 * t370, -qJ(1) * t409 + t585 * t342 - t583 * t369, t585 * t360 - t583 * t619, -qJ(1) * t320 + t585 * t302 - t583 * t314, t701, t806, t762, t723, t804, t724, t585 * t261 - t583 * t269 - t787, t585 * t264 - t583 * t274 - t812, t585 * t254 - t583 * t265 - t800, -qJ(1) * t257 + t585 * t245 - t583 * t247, t701, t762, -t806, t724, -t804, t723, t585 * t253 - t583 * t262 - t787, t585 * t248 - t583 * t255 - t800, t585 * t252 - t583 * t256 + t812, -qJ(1) * t249 + t585 * t243 - t583 * t244; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t652, -t660, t496, qJ(1) * t496, 0, 0, t663, 0, -t536, -t585 * qJDD(2), t583 * t500 - t585 * t618, t583 * t501 - t585 * t617, t583 * t445, qJ(1) * t434 - (-pkin(1) * t585 - pkin(5) * t583) * t445, t583 * t482 + t585 * t503, t583 * t443 + t585 * t488, t583 * t480 + t585 * t506, t583 * t481 + t585 * t502, t583 * t479 + t585 * t504, t583 * t517, qJ(1) * t410 + t583 * t341 + t585 * t370, qJ(1) * t411 + t583 * t342 + t585 * t369, t583 * t360 + t585 * t619, qJ(1) * t321 + t583 * t302 + t585 * t314, t703, t807, t764, t725, t805, t726, t583 * t261 + t585 * t269 + t788, t583 * t264 + t585 * t274 + t811, t583 * t254 + t585 * t265 + t801, qJ(1) * t258 + t583 * t245 + t585 * t247, t703, t764, -t807, t726, -t805, t725, t583 * t253 + t585 * t262 + t788, t583 * t248 + t585 * t255 + t801, t583 * t252 + t585 * t256 - t811, qJ(1) * t250 + t583 * t243 + t585 * t244; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t558, t559, 0, 0, 0, 0, t554, 0, t555, 0, -t501, t500, t446, pkin(1) * t558 + pkin(5) * t446, t588 * t516 + t612, t588 * t489 + t590 * t557, t588 * t510 - t587 * t625, t588 * t515 - t612, t588 * t508 - t589 * t625, -t590 * qJDD(3) + t588 * t547, -pkin(1) * t505 + pkin(5) * t459 + t590 * t416 + t588 * t439, -pkin(1) * t507 + pkin(5) * t460 + t590 * t417 + t588 * t440, pkin(5) * t494 + t588 * t386, pkin(5) * t359 - (-pkin(2) * t590 - pkin(6) * t588 - pkin(1)) * t386, t684, t791, t743, t700, t790, t699, t588 * t282 + t590 * t304 + t766, t588 * t284 + t590 * t311 - t808, t588 * t277 + t590 * t281 + t785, -pkin(1) * t289 + pkin(5) * t276 + t588 * t263 + t590 * t273, t684, t743, -t791, t699, -t790, t700, t588 * t272 + t590 * t285 + t766, t588 * t266 + t590 * t270 + t785, t588 * t268 + t590 * t283 + t808, -pkin(1) * t279 + pkin(5) * t260 + t588 * t246 + t590 * t251;];
tauB_reg = t1;
