% Calculate minimal parameter regressor of coriolis matrix for
% S5PRRPP3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d2,d3,theta1,theta4]';
% 
% Output:
% cmat_reg [(5*%NQJ)%x19]
%   minimal parameter regressor of coriolis matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-05 16:14
% Revision: 77da58f92bca3eff71542919beafa37024070d86 (2019-12-05)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function cmat_reg = S5PRRPP3_coriolismatJ_fixb_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5PRRPP3_coriolismatJ_fixb_regmin_slag_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5PRRPP3_coriolismatJ_fixb_regmin_slag_vp: qJD has to be [5x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S5PRRPP3_coriolismatJ_fixb_regmin_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From coriolismat_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-05 16:13:35
% EndTime: 2019-12-05 16:13:46
% DurationCPUTime: 2.73s
% Computational Cost: add. (1500->269), mult. (3822->395), div. (0->0), fcn. (3608->6), ass. (0->218)
t165 = sin(pkin(8));
t329 = t165 / 0.2e1;
t166 = cos(pkin(8));
t168 = sin(qJ(2));
t157 = t168 * t166;
t169 = cos(qJ(3));
t170 = cos(qJ(2));
t264 = t170 * t165;
t109 = t169 * t264 - t157;
t263 = t170 * t166;
t268 = t168 * t165;
t110 = t169 * t263 + t268;
t328 = t110 * t166 / 0.2e1 + t109 * t329;
t209 = t328 * qJ(4);
t161 = t165 ^ 2;
t162 = t166 ^ 2;
t146 = t162 + t161;
t126 = t146 * qJ(4);
t266 = t169 * t168;
t223 = t266 / 0.2e1;
t108 = t166 * t266 - t264;
t280 = t108 * t166;
t107 = t165 * t266 + t263;
t281 = t107 * t165;
t305 = -t280 / 0.2e1 - t281 / 0.2e1;
t175 = t223 + t305;
t327 = -qJD(1) * t175 + t126 * qJD(3);
t167 = sin(qJ(3));
t262 = t170 * t167;
t154 = t262 / 0.2e1;
t293 = -t165 / 0.2e1;
t297 = t107 / 0.2e1;
t188 = t108 * t293 + t166 * t297;
t176 = t188 * t167 + t154;
t163 = t167 ^ 2;
t277 = t163 * t170;
t180 = t107 * t109 + t108 * t110 + t168 * t277;
t307 = t180 * qJD(1);
t326 = t176 * qJD(4) + t307;
t289 = -t170 / 0.2e1;
t177 = (t289 + t188) * t167;
t325 = qJD(4) * t177 - t307;
t292 = -t166 / 0.2e1;
t271 = t167 * qJ(4);
t286 = t169 * pkin(3);
t214 = -t271 - t286;
t128 = -pkin(2) + t214;
t285 = t169 * pkin(6);
t155 = t165 * t285;
t83 = t166 * t128 - t155;
t272 = t166 * t169;
t156 = pkin(6) * t272;
t84 = t165 * t128 + t156;
t189 = t84 * t292 + t83 * t329;
t236 = t285 / 0.2e1;
t26 = t236 + t189;
t324 = -t26 * qJD(2) + t327;
t275 = t166 * qJ(5);
t287 = t165 * pkin(4);
t179 = (pkin(6) / 0.2e1 - t275 / 0.2e1 + t287 / 0.2e1) * t169;
t67 = -t169 * qJ(5) + t84;
t68 = t169 * pkin(4) - t83;
t190 = t67 * t292 + t68 * t293;
t15 = t179 + t190;
t323 = -t15 * qJD(2) + t327;
t267 = t169 * qJ(4);
t138 = t167 * pkin(3) - t267;
t118 = t165 * t138;
t273 = t166 * t167;
t86 = -pkin(6) * t273 + t118;
t23 = t86 * t169 + (-t84 + 0.2e1 * t156) * t167;
t296 = -t108 / 0.2e1;
t193 = t166 * t223 + t296;
t49 = (-t264 / 0.2e1 + t193) * t167;
t256 = t49 * qJD(1);
t322 = -t23 * qJD(2) - t256;
t195 = pkin(6) - t275 + t287;
t98 = t195 * t167;
t284 = t169 * t98;
t99 = t195 * t169;
t210 = t167 * t99 + t284;
t69 = t118 + (-pkin(6) * t166 + qJ(5)) * t167;
t8 = t210 * t166 - t67 * t167 + t69 * t169;
t321 = t8 * qJD(2) + t256;
t225 = t169 * t296;
t171 = (t169 * t297 - t110 / 0.2e1) * t166 + (t225 - t109 / 0.2e1) * t165;
t320 = qJD(1) * t171;
t298 = -t107 / 0.2e1;
t194 = t165 * t223 + t298;
t173 = (t263 / 0.2e1 + t194) * t167;
t319 = qJD(1) * t173;
t317 = qJD(1) * t177;
t316 = qJD(2) * t180;
t315 = qJD(4) * t175;
t313 = t146 * qJD(3);
t312 = t171 * qJD(2);
t311 = t171 * qJD(3);
t310 = t173 * qJD(2);
t309 = t173 * qJD(3);
t186 = t223 - t305;
t306 = t186 * qJD(4);
t172 = t188 * t169 + t328;
t270 = t167 * t168;
t304 = qJD(2) * t172 - t270 * t313;
t221 = -t262 / 0.2e1;
t178 = t166 * t221 + t194 * t167;
t241 = t169 * qJD(3);
t226 = t168 * t241;
t303 = qJD(2) * t178 - t166 * t226;
t253 = qJD(2) * t167;
t302 = qJD(3) * t172 + (t109 * t166 - t110 * t165) * t253;
t301 = qJD(3) * t178 + (t109 * t169 + t163 * t264) * qJD(2);
t300 = -qJD(2) * t177 + qJD(3) * t175;
t299 = qJD(2) * t176 + qJD(3) * t186;
t295 = t108 / 0.2e1;
t294 = -t157 / 0.2e1;
t291 = -t167 / 0.2e1;
t290 = t167 / 0.2e1;
t288 = pkin(6) * t165;
t283 = t67 * t169;
t276 = t165 * t167;
t274 = t166 * t138;
t269 = t167 * t169;
t124 = -t166 * pkin(4) - t165 * qJ(5) - pkin(3);
t17 = pkin(4) * t291 + (pkin(6) * t291 + t98 / 0.2e1) * t165 + (-t138 / 0.2e1 + t267 / 0.2e1 + t124 * t290) * t166;
t265 = t17 * qJD(2);
t144 = t168 ^ 2 * t269;
t24 = -t144 + (t107 * t268 + t108 * t157) * t167;
t258 = t24 * qJD(1);
t25 = -t144 + (t280 + t281) * t270;
t257 = t25 * qJD(1);
t255 = t49 * qJD(2);
t254 = t49 * qJD(3);
t252 = qJD(2) * t169;
t251 = qJD(4) * t169;
t250 = qJD(5) * t166;
t117 = t146 * t163;
t249 = t117 * qJD(2);
t164 = t169 ^ 2;
t152 = t164 - t163;
t246 = t152 * qJD(2);
t245 = t165 * qJD(3);
t244 = t165 * qJD(5);
t243 = t167 * qJD(3);
t242 = t168 * qJD(2);
t240 = t170 * qJD(2);
t239 = pkin(6) * t276;
t238 = pkin(2) * t253;
t237 = pkin(2) * t252;
t235 = t163 * t157;
t150 = t165 * t251;
t234 = t166 * t244;
t233 = t166 * t245;
t232 = t166 * t253;
t231 = qJD(4) * t273;
t230 = t166 * t252;
t229 = t167 * t244;
t228 = t168 * t243;
t227 = t167 * t252;
t222 = t264 / 0.2e1;
t219 = t165 * t227;
t218 = t167 * t150;
t217 = t166 * t163 * t165 * qJD(2);
t216 = t166 * t227;
t184 = t99 / 0.2e1 + t190;
t70 = -t274 + (-pkin(4) - t288) * t167;
t192 = t69 * t295 + t70 * t297;
t2 = t98 * t223 - t209 + (t124 * t289 + t184 * t168) * t167 + t192;
t5 = t67 * t69 + t68 * t70 + t98 * t99;
t213 = t2 * qJD(1) + t5 * qJD(2);
t212 = t70 * t165 + t69 * t166;
t85 = t239 + t274;
t211 = -t85 * t165 + t86 * t166;
t10 = pkin(6) ^ 2 * t269 + t83 * t85 + t84 * t86;
t174 = (t189 + t285) * t168;
t191 = t86 * t295 + t85 * t298;
t4 = -t209 + (t170 * pkin(3) / 0.2e1 + t174) * t167 + t191;
t208 = t4 * qJD(1) + t10 * qJD(2);
t6 = -t68 * t272 - t70 * t273 + (t167 * t69 + t283) * t165;
t207 = -t6 * qJD(2) + t320;
t7 = (t167 * t85 + t169 * t83) * t166 + (t167 * t86 + t169 * t84) * t165;
t206 = t7 * qJD(2) - t320;
t9 = t210 * t165 - t68 * t167 + t70 * t169;
t205 = t9 * qJD(2) + t319;
t204 = -t124 * t169 + t271;
t21 = -t68 * t273 + t67 * t276;
t202 = -t21 * qJD(2) + t317;
t22 = -t83 * t167 + (t85 - 0.2e1 * t239) * t169;
t201 = t22 * qJD(2) - t319;
t28 = (t165 * t84 + t166 * t83) * t167;
t199 = t28 * qJD(2) - t317;
t29 = t98 * t273 + t283;
t38 = t294 + t235 / 0.2e1 + (t222 + t295) * t169;
t198 = -t38 * qJD(1) - t29 * qJD(2);
t48 = t165 * t154 + t193 * t167;
t197 = (t110 * t169 + t163 * t263) * qJD(2) + t48 * qJD(3);
t104 = (-0.1e1 / 0.2e1 + t161 / 0.2e1 - t162 / 0.2e1) * t167;
t187 = -t104 * qJD(2) + t233;
t116 = t232 + t245;
t185 = t48 * qJD(2) + t165 * t226;
t129 = t162 * t163 + t164;
t183 = t129 * qJD(2) + t167 * t233;
t135 = t146 * qJD(4);
t134 = t169 * t231;
t125 = t166 * t229;
t121 = t126 * qJD(4);
t111 = t117 * qJD(4);
t106 = t161 * qJD(3) + t165 * t232;
t105 = t161 * t291 + t162 * t290 + t291;
t101 = t116 * t169;
t100 = -t166 * t241 + t219;
t39 = t225 - t235 / 0.2e1 + t169 * t222 + t294;
t27 = t236 - t189;
t18 = t267 * t292 - t124 * t273 / 0.2e1 + t98 * t293 - t274 / 0.2e1 + (-t288 / 0.2e1 - pkin(4) / 0.2e1) * t167;
t16 = t179 - t190;
t3 = pkin(3) * t221 + t167 * t174 + t191 + t209;
t1 = t124 * t154 + (t284 / 0.2e1 + t184 * t167) * t168 + t192 + t209;
t11 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t24 * qJD(3) + t316, 0, 0, 0, -t25 * qJD(3) + t316; 0, 0, -t242, -t240, 0, 0, 0, 0, 0, -t169 * t242 - t170 * t243, t167 * t242 - t170 * t241, t301, t197, t302, (pkin(6) * t277 - t109 * t83 + t110 * t84) * qJD(2) + t3 * qJD(3) + t326, t301, t302, -t197, (t109 * t68 + t110 * t67 + t262 * t98) * qJD(2) + t1 * qJD(3) + t39 * qJD(5) + t326; 0, 0, 0, 0, 0, 0, 0, 0, 0, -t167 * t240 - t226, -t169 * t240 + t228, t303, t185, t304, -t258 + t3 * qJD(2) + t306 + (-t146 * t271 - t286) * qJD(3) * t168, t303, t304, -t185, -t257 + t1 * qJD(2) + t306 + (t124 * t241 + (-qJ(4) * t313 - t244) * t167) * t168; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t299, 0, 0, 0, t299; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39 * qJD(2) - t165 * t228; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t309, t254, t311, t4 * qJD(3) + t325, t309, t311, -t254, t2 * qJD(3) - t38 * qJD(5) + t325; 0, 0, 0, 0, t167 * t241, t152 * qJD(3), 0, 0, 0, -pkin(2) * t243, -pkin(2) * t241, -t22 * qJD(3) + t134, t23 * qJD(3) - t218, -t7 * qJD(3) + t111, t10 * qJD(3) - t28 * qJD(4), t9 * qJD(3) - t163 * t234 + t134, -t6 * qJD(3) + t169 * t229 + t111, -t8 * qJD(3) + t129 * qJD(5) + t218, t5 * qJD(3) - t21 * qJD(4) - t29 * qJD(5); 0, 0, 0, 0, t227, t246, t241, -t243, 0, -pkin(6) * t241 - t238, pkin(6) * t243 - t237, (t165 * t214 - t156) * qJD(3) + t150 - t201, t155 * qJD(3) + (qJD(3) * t214 + t251) * t166 - t322, qJD(3) * t211 - t206, (-pkin(3) * t285 + qJ(4) * t211) * qJD(3) + t27 * qJD(4) + t208, (-t165 * t204 - t99 * t166) * qJD(3) + t150 + t105 * qJD(5) + t205, qJD(3) * t212 + t207, -t99 * t245 + t125 + (qJD(3) * t204 - t251) * t166 - t321, (qJ(4) * t212 + t99 * t124) * qJD(3) + t16 * qJD(4) + t18 * qJD(5) + t213; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t101, -t100, t249, t27 * qJD(3) - t199, t101, t249, t100, t16 * qJD(3) + t202; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105 * qJD(3) - t217, t219, t183, t18 * qJD(3) + t198; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t310, -t255, -t312, -t4 * qJD(2) + t258 - t315, -t310, -t312, t255, -t2 * qJD(2) + t257 - t315; 0, 0, 0, 0, -t227, -t246, 0, 0, 0, t238, t237, t201, t322, t206, -t26 * qJD(4) - t208, -t104 * qJD(5) - t205, -t169 * t250 - t207, t125 + t321, -t15 * qJD(4) - t17 * qJD(5) - t213; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t135, t121, t234, t135, t161 * qJD(5), -t124 * t244 + t121; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t313, t324, 0, t313, 0, t323; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t187, -t230, t106, -t124 * t245 - t265; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t300, 0, 0, 0, t300; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t216, t219, -t249, t26 * qJD(3) + t199, -t216, -t249, -t219, t15 * qJD(3) - t167 * t250 - t202; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t313, -t324, 0, -t313, 0, -t244 - t323; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t116; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t38 * qJD(2); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104 * qJD(3) + t217, -t100, -t183, t17 * qJD(3) - t198 + t231; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t187, t230, -t106, t265 + (t124 * qJD(3) + qJD(4)) * t165; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t116; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
cmat_reg = t11;
