% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S5RRRPR7
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [5x1]
%   Generalized joint coordinates (joint angles)
% qJD [5x1]
%   Generalized joint velocities
% qJDD [5x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,d1,d2,d3,d5,theta4]';
% 
% Output:
% tauB_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-12-31 21:18
% Revision: 9bd3e9fa678258af3b32f1bcc8622e39ff85504d (2019-12-30)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S5RRRPR7_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(5,1),zeros(5,1),zeros(5,1),zeros(3,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [5 1]), ...
  'S5RRRPR7_invdynB_fixb_reg2_snew_vp: qJ has to be [5x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [5 1]), ...
  'S5RRRPR7_invdynB_fixb_reg2_snew_vp: qJD has to be [5x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [5 1]), ...
  'S5RRRPR7_invdynB_fixb_reg2_snew_vp: qJDD has to be [5x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S5RRRPR7_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S5RRRPR7_invdynB_fixb_reg2_snew_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-12-31 21:17:33
% EndTime: 2019-12-31 21:17:50
% DurationCPUTime: 15.62s
% Computational Cost: add. (94518->671), mult. (198347->1031), div. (0->0), fcn. (142106->10), ass. (0->465)
t793 = sin(pkin(9));
t796 = sin(qJ(3));
t797 = sin(qJ(2));
t800 = cos(qJ(3));
t801 = cos(qJ(2));
t754 = (t796 * t801 + t797 * t800) * qJD(1);
t790 = qJD(2) + qJD(3);
t794 = cos(pkin(9));
t724 = t793 * t754 - t794 * t790;
t726 = t794 * t754 + t793 * t790;
t682 = t726 * t724;
t833 = qJD(1) * qJD(2);
t819 = t801 * t833;
t832 = t797 * qJDD(1);
t762 = t819 + t832;
t786 = t801 * qJDD(1);
t820 = t797 * t833;
t763 = t786 - t820;
t817 = t796 * t762 - t800 * t763;
t692 = t754 * qJD(3) + t817;
t875 = -t682 + t692;
t884 = t793 * t875;
t883 = t794 * t875;
t795 = sin(qJ(5));
t799 = cos(qJ(5));
t672 = t799 * t724 + t795 * t726;
t674 = -t795 * t724 + t799 * t726;
t620 = t674 * t672;
t811 = qJDD(5) + t692;
t877 = -t620 + t811;
t882 = t795 * t877;
t836 = qJD(1) * t797;
t752 = -t800 * t801 * qJD(1) + t796 * t836;
t715 = t754 * t752;
t829 = qJDD(2) + qJDD(3);
t874 = -t715 + t829;
t881 = t796 * t874;
t880 = t799 * t877;
t879 = t800 * t874;
t744 = t790 * t752;
t810 = t752 * qJD(3) - t800 * t762 - t796 * t763;
t878 = t810 + t744;
t747 = qJD(5) + t752;
t647 = t747 * t672;
t675 = t793 * t810 + t794 * t829;
t676 = t793 * t829 - t794 * t810;
t809 = t672 * qJD(5) - t795 * t675 - t799 * t676;
t876 = -t647 - t809;
t707 = t752 * t724;
t633 = -t707 - t676;
t632 = -t707 + t676;
t818 = -t799 * t675 + t795 * t676;
t552 = (qJD(5) - t747) * t674 + t818;
t657 = (qJD(3) - t790) * t754 + t817;
t792 = t801 ^ 2;
t804 = qJD(1) ^ 2;
t798 = sin(qJ(1));
t802 = cos(qJ(1));
t772 = t798 * g(1) - t802 * g(2);
t812 = qJDD(1) * pkin(1) + t772;
t813 = qJD(2) * pkin(2) - pkin(7) * t836;
t695 = t763 * pkin(2) + (pkin(7) * t792 + pkin(6)) * t804 - t813 * t836 + t812;
t669 = t672 ^ 2;
t670 = t674 ^ 2;
t872 = t724 ^ 2;
t723 = t726 ^ 2;
t746 = t747 ^ 2;
t871 = t752 ^ 2;
t751 = t754 ^ 2;
t870 = t790 ^ 2;
t869 = pkin(3) * t796;
t868 = t747 * t795;
t867 = t747 * t799;
t866 = t752 * t726;
t865 = t752 * t793;
t864 = t752 * t794;
t863 = t790 * t796;
t862 = t790 * t800;
t791 = t797 ^ 2;
t861 = t791 * t804;
t788 = t792 * t804;
t581 = t878 * qJ(4) + (t790 * t754 + t692) * pkin(3) - t695;
t773 = t802 * g(1) + t798 * g(2);
t807 = -t804 * pkin(1) + qJDD(1) * pkin(6) - t773;
t738 = -t797 * g(3) + t801 * t807;
t686 = -pkin(2) * t788 + t763 * pkin(7) - qJD(2) * t813 + t738;
t806 = t797 * t807;
t845 = t797 * t804;
t805 = -t806 - t762 * pkin(7) + qJDD(2) * pkin(2) + (pkin(2) * t845 + pkin(7) * t833 - g(3)) * t801;
t624 = t800 * t686 + t796 * t805;
t712 = pkin(3) * t752 - qJ(4) * t754;
t587 = -t870 * pkin(3) + qJ(4) * t829 - t752 * t712 + t624;
t514 = 0.2e1 * qJD(4) * t726 - t794 * t581 + t793 * t587;
t480 = pkin(4) * t875 + t633 * pkin(8) - t514;
t515 = -0.2e1 * qJD(4) * t724 + t793 * t581 + t794 * t587;
t696 = pkin(4) * t752 - pkin(8) * t726;
t495 = -pkin(4) * t872 + pkin(8) * t675 - t696 * t752 + t515;
t437 = -t799 * t480 + t795 * t495;
t438 = t795 * t480 + t799 * t495;
t404 = -t799 * t437 + t795 * t438;
t860 = t793 * t404;
t623 = t796 * t686 - t800 * t805;
t586 = -t829 * pkin(3) - t870 * qJ(4) + t754 * t712 + qJDD(4) + t623;
t859 = t793 * t586;
t636 = t682 + t692;
t858 = t793 * t636;
t857 = t794 * t404;
t856 = t794 * t586;
t855 = t794 * t636;
t526 = -t675 * pkin(4) - t872 * pkin(8) + t726 * t696 + t586;
t854 = t795 * t526;
t589 = t620 + t811;
t853 = t795 * t589;
t852 = t796 * t692;
t851 = t796 * t695;
t710 = t715 + t829;
t850 = t796 * t710;
t567 = -t800 * t623 + t796 * t624;
t849 = t797 * t567;
t755 = t804 * pkin(6) + t812;
t848 = t797 * t755;
t781 = t801 * t845;
t770 = qJDD(2) + t781;
t847 = t797 * t770;
t771 = qJDD(2) - t781;
t846 = t797 * t771;
t844 = t799 * t526;
t843 = t799 * t589;
t842 = t800 * t695;
t841 = t800 * t710;
t840 = t801 * t567;
t839 = t801 * t755;
t838 = t801 * t771;
t837 = t791 + t792;
t831 = t798 * qJDD(1);
t830 = t802 * qJDD(1);
t828 = t796 * t620;
t827 = t796 * t682;
t826 = t798 * t715;
t825 = t800 * t620;
t824 = t800 * t682;
t823 = t802 * t715;
t822 = -pkin(3) * t800 - pkin(2);
t405 = t795 * t437 + t799 * t438;
t568 = t796 * t623 + t800 * t624;
t737 = t801 * g(3) + t806;
t685 = t797 * t737 + t801 * t738;
t729 = -t798 * t772 - t802 * t773;
t816 = t798 * t781;
t815 = t802 * t781;
t767 = -t798 * t804 + t830;
t814 = -pkin(5) * t767 - t798 * g(3);
t456 = -t794 * t514 + t793 * t515;
t457 = t793 * t514 + t794 * t515;
t684 = t801 * t737 - t797 * t738;
t728 = t802 * t772 - t798 * t773;
t629 = -t675 - t866;
t803 = qJD(2) ^ 2;
t777 = -t788 - t803;
t776 = t788 - t803;
t775 = -t803 - t861;
t774 = t803 - t861;
t769 = t788 - t861;
t768 = t788 + t861;
t766 = t802 * t804 + t831;
t765 = t837 * qJDD(1);
t764 = t786 - 0.2e1 * t820;
t761 = 0.2e1 * t819 + t832;
t759 = t801 * t770;
t758 = t837 * t833;
t748 = -pkin(5) * t766 + t802 * g(3);
t742 = -t751 + t870;
t741 = t871 - t870;
t740 = t801 * t762 - t791 * t833;
t739 = -t797 * t763 - t792 * t833;
t736 = -t751 - t870;
t735 = -t797 * t775 - t838;
t734 = -t797 * t774 + t759;
t733 = t801 * t777 - t847;
t732 = t801 * t776 - t846;
t731 = t801 * t775 - t846;
t730 = t797 * t777 + t759;
t722 = t802 * t765 - t798 * t768;
t721 = t798 * t765 + t802 * t768;
t716 = -t797 * t761 + t801 * t764;
t713 = -t751 + t871;
t708 = -t871 - t870;
t706 = t802 * t735 + t798 * t761;
t705 = t802 * t733 - t798 * t764;
t704 = t798 * t735 - t802 * t761;
t703 = t798 * t733 + t802 * t764;
t702 = -t723 + t871;
t701 = -t871 + t872;
t700 = (-t752 * t800 + t754 * t796) * t790;
t699 = (-t752 * t796 - t754 * t800) * t790;
t698 = -pkin(6) * t731 - t839;
t697 = -pkin(6) * t730 - t848;
t694 = -t871 - t751;
t691 = -pkin(1) * t731 + t738;
t690 = -pkin(1) * t730 + t737;
t688 = t800 * t692;
t681 = -t723 + t872;
t677 = -t723 - t871;
t667 = t800 * t741 - t850;
t666 = -t796 * t742 + t879;
t665 = t796 * t741 + t841;
t664 = t800 * t742 + t881;
t663 = -t796 * t736 - t841;
t662 = t800 * t736 - t850;
t661 = -t744 + t810;
t656 = (qJD(3) + t790) * t754 + t817;
t655 = -t871 - t872;
t654 = -t754 * t863 - t800 * t810;
t653 = t754 * t862 - t796 * t810;
t652 = t752 * t862 + t852;
t651 = t752 * t863 - t688;
t650 = t802 * t685 - t798 * t755;
t649 = t798 * t685 + t802 * t755;
t646 = t800 * t708 - t881;
t645 = t796 * t708 + t879;
t644 = -t670 + t746;
t643 = t669 - t746;
t642 = t723 + t872;
t641 = (-t724 * t794 + t726 * t793) * t752;
t640 = (t724 * t793 + t726 * t794) * t752;
t639 = -t670 - t746;
t638 = -t797 * t699 + t801 * t700;
t630 = t675 - t866;
t628 = t794 * t676 - t726 * t865;
t627 = -t793 * t676 - t726 * t864;
t626 = -t793 * t675 + t724 * t864;
t625 = -t794 * t675 - t724 * t865;
t621 = -pkin(7) * t662 - t842;
t619 = -t670 + t669;
t618 = -pkin(7) * t645 - t851;
t617 = -t797 * t665 + t801 * t667;
t616 = -t797 * t664 + t801 * t666;
t615 = -t746 - t669;
t614 = -t797 * t662 + t801 * t663;
t613 = t801 * t662 + t797 * t663;
t612 = -t657 * t800 - t796 * t661;
t611 = -t800 * t656 + t796 * t878;
t610 = -t657 * t796 + t800 * t661;
t609 = -t796 * t656 - t800 * t878;
t608 = t800 * t641 + t852;
t607 = t796 * t641 - t688;
t606 = t794 * t701 - t858;
t605 = -t793 * t702 + t883;
t604 = -t793 * t701 - t855;
t603 = -t794 * t702 - t884;
t602 = -t797 * t653 + t801 * t654;
t601 = -t797 * t651 + t801 * t652;
t600 = (-t672 * t799 + t674 * t795) * t747;
t599 = (-t672 * t795 - t674 * t799) * t747;
t598 = -t797 * t645 + t801 * t646;
t597 = t801 * t645 + t797 * t646;
t596 = -t793 * t677 - t855;
t595 = t794 * t677 - t858;
t594 = t800 * t628 + t827;
t593 = t800 * t626 - t827;
t592 = t796 * t628 - t824;
t591 = t796 * t626 + t824;
t584 = t794 * t655 - t884;
t583 = t793 * t655 + t883;
t582 = -t669 - t670;
t580 = pkin(2) * t878 + pkin(7) * t663 - t851;
t578 = -t674 * qJD(5) - t818;
t575 = -pkin(2) * t656 + pkin(7) * t646 + t842;
t574 = -t629 * t794 - t793 * t633;
t573 = t794 * t630 - t793 * t632;
t572 = -t629 * t793 + t794 * t633;
t571 = -t793 * t630 - t794 * t632;
t570 = t802 * t614 - t798 * t878;
t569 = t798 * t614 + t802 * t878;
t566 = t802 * t598 + t798 * t656;
t565 = t798 * t598 - t802 * t656;
t564 = t799 * t643 - t853;
t563 = -t795 * t644 + t880;
t562 = t795 * t643 + t843;
t561 = t799 * t644 + t882;
t560 = t800 * t606 - t796 * t629;
t559 = t800 * t605 - t796 * t633;
t558 = t796 * t606 + t800 * t629;
t557 = t796 * t605 + t800 * t633;
t556 = -t647 + t809;
t551 = (qJD(5) + t747) * t674 + t818;
t550 = -t674 * t868 - t799 * t809;
t549 = t674 * t867 - t795 * t809;
t548 = -t795 * t578 + t672 * t867;
t547 = t799 * t578 + t672 * t868;
t546 = -t795 * t639 - t843;
t545 = t799 * t639 - t853;
t544 = t800 * t573 - t796 * t681;
t543 = t796 * t573 + t800 * t681;
t542 = t800 * t596 + t632 * t796;
t541 = t796 * t596 - t632 * t800;
t540 = pkin(2) * t695 + pkin(7) * t568;
t539 = t800 * t584 - t796 * t630;
t538 = t796 * t584 + t800 * t630;
t537 = -t797 * t610 + t801 * t612;
t536 = -t797 * t609 + t801 * t611;
t535 = t801 * t610 + t797 * t612;
t534 = -t797 * t607 + t801 * t608;
t533 = t800 * t574 - t796 * t642;
t532 = t796 * t574 + t800 * t642;
t531 = t799 * t615 - t882;
t530 = t795 * t615 + t880;
t529 = -pkin(1) * t613 - pkin(2) * t662 + t624;
t528 = -t793 * t599 + t794 * t600;
t527 = -t794 * t599 - t793 * t600;
t525 = t802 * t537 + t798 * t694;
t524 = t798 * t537 - t802 * t694;
t523 = -t797 * t592 + t801 * t594;
t522 = -t797 * t591 + t801 * t593;
t521 = -qJ(4) * t595 + t856;
t520 = -pkin(1) * t597 - pkin(2) * t645 + t623;
t519 = -qJ(4) * t583 + t859;
t518 = -pkin(7) * t610 - t567;
t517 = t800 * t528 + t796 * t811;
t516 = t796 * t528 - t800 * t811;
t513 = -pkin(2) * t694 + pkin(7) * t612 + t568;
t512 = -pkin(1) * t535 - pkin(2) * t610;
t511 = -pkin(6) * t613 - t797 * t580 + t801 * t621;
t510 = t801 * t568 - t849;
t509 = t797 * t568 + t840;
t508 = -pkin(6) * t597 - t797 * t575 + t801 * t618;
t507 = -t793 * t562 + t794 * t564;
t506 = -t793 * t561 + t794 * t563;
t505 = -t794 * t562 - t793 * t564;
t504 = -t794 * t561 - t793 * t563;
t503 = -t797 * t558 + t801 * t560;
t502 = -t797 * t557 + t801 * t559;
t501 = t802 * t510 - t798 * t695;
t500 = t798 * t510 + t802 * t695;
t499 = -t552 * t799 - t795 * t556;
t498 = -t799 * t551 - t795 * t876;
t497 = -t552 * t795 + t799 * t556;
t496 = -t795 * t551 + t799 * t876;
t493 = -t793 * t549 + t794 * t550;
t492 = -t793 * t547 + t794 * t548;
t491 = -t794 * t549 - t793 * t550;
t490 = -t794 * t547 - t793 * t548;
t489 = -t793 * t545 + t794 * t546;
t488 = t794 * t545 + t793 * t546;
t487 = -t797 * t543 + t801 * t544;
t486 = -t797 * t541 + t801 * t542;
t485 = t801 * t541 + t797 * t542;
t484 = -pkin(3) * t595 + t515;
t483 = -pkin(3) * t583 + t514;
t482 = -t797 * t538 + t801 * t539;
t481 = t801 * t538 + t797 * t539;
t479 = -t797 * t532 + t801 * t533;
t478 = t801 * t532 + t797 * t533;
t475 = -pkin(8) * t545 + t844;
t474 = -t793 * t530 + t794 * t531;
t473 = t794 * t530 + t793 * t531;
t472 = -pkin(8) * t530 + t854;
t471 = t800 * t493 + t828;
t470 = t800 * t492 - t828;
t469 = t796 * t493 - t825;
t468 = t796 * t492 + t825;
t467 = -pkin(1) * t509 - pkin(2) * t567;
t466 = t802 * t486 + t798 * t595;
t465 = t798 * t486 - t802 * t595;
t464 = t802 * t482 + t798 * t583;
t463 = t798 * t482 - t802 * t583;
t462 = -t797 * t516 + t801 * t517;
t461 = t800 * t507 - t796 * t552;
t460 = t800 * t506 - t796 * t556;
t459 = t796 * t507 + t800 * t552;
t458 = t796 * t506 + t800 * t556;
t455 = t802 * t479 + t798 * t572;
t454 = t798 * t479 - t802 * t572;
t453 = t800 * t489 + t796 * t876;
t452 = t796 * t489 - t800 * t876;
t451 = -pkin(4) * t876 + pkin(8) * t546 + t854;
t450 = t800 * t474 + t796 * t551;
t449 = t796 * t474 - t800 * t551;
t448 = -pkin(4) * t551 + pkin(8) * t531 - t844;
t447 = t800 * t457 + t796 * t586;
t446 = t796 * t457 - t800 * t586;
t445 = -pkin(6) * t509 - pkin(7) * t840 - t797 * t540;
t444 = -qJ(4) * t572 - t456;
t443 = -t793 * t497 + t794 * t499;
t442 = -t793 * t496 + t794 * t498;
t441 = t794 * t497 + t793 * t499;
t440 = -t794 * t496 - t793 * t498;
t439 = -pkin(6) * t535 - t797 * t513 + t801 * t518;
t435 = -pkin(7) * t541 - t796 * t484 + t800 * t521;
t434 = t800 * t442 - t796 * t619;
t433 = t796 * t442 + t800 * t619;
t432 = -pkin(7) * t538 - t796 * t483 + t800 * t519;
t431 = t800 * t443 + t796 * t582;
t430 = t796 * t443 - t800 * t582;
t429 = -pkin(1) * t485 - pkin(2) * t541 + pkin(3) * t632 - qJ(4) * t596 - t859;
t428 = -pkin(1) * t481 - pkin(2) * t538 - pkin(3) * t630 - qJ(4) * t584 + t856;
t427 = -t797 * t469 + t801 * t471;
t426 = -t797 * t468 + t801 * t470;
t425 = -pkin(2) * t595 + pkin(7) * t542 + t800 * t484 + t796 * t521;
t424 = -pkin(2) * t583 + pkin(7) * t539 + t800 * t483 + t796 * t519;
t423 = -pkin(7) * t532 + t800 * t444 + t572 * t869;
t422 = -t797 * t459 + t801 * t461;
t421 = -t797 * t458 + t801 * t460;
t420 = -pkin(3) * t441 - pkin(4) * t497;
t419 = -t797 * t452 + t801 * t453;
t418 = t801 * t452 + t797 * t453;
t417 = pkin(7) * t533 + t796 * t444 + t572 * t822;
t416 = -t797 * t449 + t801 * t450;
t415 = t801 * t449 + t797 * t450;
t414 = -t797 * t446 + t801 * t447;
t413 = t801 * t446 + t797 * t447;
t412 = -pkin(3) * t488 - pkin(4) * t545 + t438;
t411 = -pkin(1) * t478 - pkin(2) * t532 - pkin(3) * t642 - qJ(4) * t574 - t457;
t410 = -qJ(4) * t488 - t793 * t451 + t794 * t475;
t409 = -pkin(3) * t473 - pkin(4) * t530 + t437;
t408 = t802 * t419 + t798 * t488;
t407 = t798 * t419 - t802 * t488;
t406 = -qJ(4) * t473 - t793 * t448 + t794 * t472;
t403 = -t797 * t433 + t801 * t434;
t402 = t802 * t416 + t798 * t473;
t401 = t798 * t416 - t802 * t473;
t400 = -t797 * t430 + t801 * t431;
t399 = t801 * t430 + t797 * t431;
t398 = -pkin(7) * t446 + (-qJ(4) * t800 + t869) * t456;
t397 = -pkin(4) * t526 + pkin(8) * t405;
t396 = t802 * t414 + t798 * t456;
t395 = t798 * t414 - t802 * t456;
t394 = -pkin(8) * t497 - t404;
t393 = -pkin(4) * t582 + pkin(8) * t499 + t405;
t392 = -pkin(6) * t485 - t797 * t425 + t801 * t435;
t391 = -pkin(6) * t481 - t797 * t424 + t801 * t432;
t390 = pkin(7) * t447 + (-qJ(4) * t796 + t822) * t456;
t389 = t802 * t400 + t798 * t441;
t388 = t798 * t400 - t802 * t441;
t387 = -pkin(6) * t478 - t797 * t417 + t801 * t423;
t386 = -pkin(1) * t413 - pkin(2) * t446 + pkin(3) * t586 - qJ(4) * t457;
t385 = t794 * t405 - t860;
t384 = t793 * t405 + t857;
t383 = -pkin(1) * t418 - pkin(2) * t452 + pkin(3) * t876 - qJ(4) * t489 - t794 * t451 - t793 * t475;
t382 = -pkin(7) * t452 + t800 * t410 - t796 * t412;
t381 = t800 * t385 + t796 * t526;
t380 = t796 * t385 - t800 * t526;
t379 = -pkin(1) * t415 - pkin(2) * t449 + pkin(3) * t551 - qJ(4) * t474 - t794 * t448 - t793 * t472;
t378 = -pkin(7) * t449 + t800 * t406 - t796 * t409;
t377 = -pkin(2) * t488 + pkin(7) * t453 + t796 * t410 + t800 * t412;
t376 = -pkin(2) * t473 + pkin(7) * t450 + t796 * t406 + t800 * t409;
t375 = -pkin(3) * t384 - pkin(4) * t404;
t374 = -qJ(4) * t441 - t793 * t393 + t794 * t394;
t373 = -pkin(6) * t413 - t797 * t390 + t801 * t398;
t372 = -pkin(8) * t857 - qJ(4) * t384 - t793 * t397;
t371 = -pkin(7) * t430 + t800 * t374 - t796 * t420;
t370 = -t797 * t380 + t801 * t381;
t369 = t801 * t380 + t797 * t381;
t368 = -pkin(2) * t441 + pkin(7) * t431 + t796 * t374 + t800 * t420;
t367 = -pkin(1) * t399 - pkin(2) * t430 + pkin(3) * t582 - qJ(4) * t443 - t794 * t393 - t793 * t394;
t366 = -pkin(6) * t418 - t797 * t377 + t801 * t382;
t365 = -pkin(6) * t415 - t797 * t376 + t801 * t378;
t364 = t802 * t370 + t798 * t384;
t363 = t798 * t370 - t802 * t384;
t362 = -pkin(7) * t380 + t800 * t372 - t796 * t375;
t361 = -pkin(6) * t399 - t797 * t368 + t801 * t371;
t360 = -pkin(1) * t369 - pkin(2) * t380 + pkin(3) * t526 + pkin(8) * t860 - qJ(4) * t385 - t794 * t397;
t359 = -pkin(2) * t384 + pkin(7) * t381 + t796 * t372 + t800 * t375;
t358 = -pkin(6) * t369 - t797 * t359 + t801 * t362;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t766, -t767, 0, t729, 0, 0, 0, 0, 0, 0, t705, t706, t722, t650, 0, 0, 0, 0, 0, 0, t566, t570, t525, t501, 0, 0, 0, 0, 0, 0, t464, t466, t455, t396, 0, 0, 0, 0, 0, 0, t402, t408, t389, t364; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t767, -t766, 0, t728, 0, 0, 0, 0, 0, 0, t703, t704, t721, t649, 0, 0, 0, 0, 0, 0, t565, t569, t524, t500, 0, 0, 0, 0, 0, 0, t463, t465, t454, t395, 0, 0, 0, 0, 0, 0, t401, t407, t388, t363; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t730, t731, 0, -t684, 0, 0, 0, 0, 0, 0, t597, t613, t535, t509, 0, 0, 0, 0, 0, 0, t481, t485, t478, t413, 0, 0, 0, 0, 0, 0, t415, t418, t399, t369; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t767, 0, -t766, 0, t814, -t748, -t728, -pkin(5) * t728, t802 * t740 - t816, t802 * t716 - t798 * t769, t802 * t734 + t797 * t831, t802 * t739 + t816, t802 * t732 + t786 * t798, t798 * qJDD(2) + t802 * t758, -pkin(5) * t703 - t798 * t690 + t802 * t697, -pkin(5) * t704 - t798 * t691 + t802 * t698, -pkin(5) * t721 + t802 * t684, -pkin(5) * t649 - (pkin(1) * t798 - pkin(6) * t802) * t684, t802 * t602 + t826, t802 * t536 - t798 * t713, t802 * t616 - t798 * t661, t802 * t601 - t826, t802 * t617 - t798 * t657, t802 * t638 + t798 * t829, -pkin(5) * t565 + t802 * t508 - t798 * t520, -pkin(5) * t569 + t802 * t511 - t798 * t529, -pkin(5) * t524 + t802 * t439 - t798 * t512, -pkin(5) * t500 + t802 * t445 - t798 * t467, t802 * t523 - t798 * t627, t802 * t487 - t798 * t571, t802 * t502 - t798 * t603, t802 * t522 - t798 * t625, t802 * t503 - t798 * t604, t802 * t534 - t798 * t640, -pkin(5) * t463 + t802 * t391 - t798 * t428, -pkin(5) * t465 + t802 * t392 - t798 * t429, -pkin(5) * t454 + t802 * t387 - t798 * t411, -pkin(5) * t395 + t802 * t373 - t798 * t386, t802 * t427 - t798 * t491, t802 * t403 - t798 * t440, t802 * t421 - t798 * t504, t802 * t426 - t798 * t490, t802 * t422 - t798 * t505, t802 * t462 - t798 * t527, -pkin(5) * t401 + t802 * t365 - t798 * t379, -pkin(5) * t407 + t802 * t366 - t798 * t383, -pkin(5) * t388 + t802 * t361 - t798 * t367, -pkin(5) * t363 + t802 * t358 - t798 * t360; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t766, 0, t767, 0, t748, t814, t729, pkin(5) * t729, t798 * t740 + t815, t798 * t716 + t802 * t769, t798 * t734 - t797 * t830, t798 * t739 - t815, t798 * t732 - t801 * t830, -t802 * qJDD(2) + t798 * t758, pkin(5) * t705 + t802 * t690 + t798 * t697, pkin(5) * t706 + t802 * t691 + t798 * t698, pkin(5) * t722 + t798 * t684, pkin(5) * t650 - (-pkin(1) * t802 - pkin(6) * t798) * t684, t798 * t602 - t823, t798 * t536 + t802 * t713, t798 * t616 + t802 * t661, t798 * t601 + t823, t798 * t617 + t802 * t657, t798 * t638 - t802 * t829, pkin(5) * t566 + t798 * t508 + t802 * t520, pkin(5) * t570 + t798 * t511 + t802 * t529, pkin(5) * t525 + t798 * t439 + t802 * t512, pkin(5) * t501 + t798 * t445 + t802 * t467, t798 * t523 + t802 * t627, t798 * t487 + t802 * t571, t798 * t502 + t802 * t603, t798 * t522 + t802 * t625, t798 * t503 + t802 * t604, t798 * t534 + t802 * t640, pkin(5) * t464 + t798 * t391 + t802 * t428, pkin(5) * t466 + t798 * t392 + t802 * t429, pkin(5) * t455 + t798 * t387 + t802 * t411, pkin(5) * t396 + t798 * t373 + t802 * t386, t798 * t427 + t802 * t491, t798 * t403 + t802 * t440, t798 * t421 + t802 * t504, t798 * t426 + t802 * t490, t798 * t422 + t802 * t505, t798 * t462 + t802 * t527, pkin(5) * t402 + t798 * t365 + t802 * t379, pkin(5) * t408 + t798 * t366 + t802 * t383, pkin(5) * t389 + t798 * t361 + t802 * t367, pkin(5) * t364 + t798 * t358 + t802 * t360; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t772, t773, 0, 0, (t762 + t819) * t797, t801 * t761 + t797 * t764, t801 * t774 + t847, (t763 - t820) * t801, t797 * t776 + t838, 0, pkin(1) * t764 + pkin(6) * t733 + t839, -pkin(1) * t761 + pkin(6) * t735 - t848, pkin(1) * t768 + pkin(6) * t765 + t685, pkin(1) * t755 + pkin(6) * t685, t801 * t653 + t797 * t654, t801 * t609 + t797 * t611, t801 * t664 + t797 * t666, t801 * t651 + t797 * t652, t801 * t665 + t797 * t667, t801 * t699 + t797 * t700, -pkin(1) * t656 + pkin(6) * t598 + t801 * t575 + t797 * t618, pkin(1) * t878 + pkin(6) * t614 + t801 * t580 + t797 * t621, -pkin(1) * t694 + pkin(6) * t537 + t801 * t513 + t797 * t518, pkin(1) * t695 + pkin(6) * t510 - pkin(7) * t849 + t801 * t540, t801 * t592 + t797 * t594, t801 * t543 + t797 * t544, t801 * t557 + t797 * t559, t801 * t591 + t797 * t593, t801 * t558 + t797 * t560, t801 * t607 + t797 * t608, -pkin(1) * t583 + pkin(6) * t482 + t801 * t424 + t797 * t432, -pkin(1) * t595 + pkin(6) * t486 + t801 * t425 + t797 * t435, -pkin(1) * t572 + pkin(6) * t479 + t801 * t417 + t797 * t423, -pkin(1) * t456 + pkin(6) * t414 + t801 * t390 + t797 * t398, t801 * t469 + t797 * t471, t801 * t433 + t797 * t434, t801 * t458 + t797 * t460, t801 * t468 + t797 * t470, t801 * t459 + t797 * t461, t801 * t516 + t797 * t517, -pkin(1) * t473 + pkin(6) * t416 + t801 * t376 + t797 * t378, -pkin(1) * t488 + pkin(6) * t419 + t801 * t377 + t797 * t382, -pkin(1) * t441 + pkin(6) * t400 + t801 * t368 + t797 * t371, -pkin(1) * t384 + pkin(6) * t370 + t801 * t359 + t797 * t362;];
tauB_reg = t1;
