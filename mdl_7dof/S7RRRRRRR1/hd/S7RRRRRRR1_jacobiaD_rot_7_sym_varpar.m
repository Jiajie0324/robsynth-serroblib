% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für Segment Nr. 7 (0=Basis) von
% S7RRRRRRR1
% Use Code from Maple symbolic Code Generation
%
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
%
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
%
% Input:
% qJ [7x1]
%   Generalized joint coordinates (joint angles)
% qJD [7x1]
%   Generalized joint velocities
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[d1,d3,d5,d7]';
%
% Output:
% JaD_rot [3x7]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-02-26 22:54
% Revision: d75aae1ac561373cd3be920984c3df29a1c2ecc8 (2019-02-26)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S7RRRRRRR1_jacobiaD_rot_7_sym_varpar(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(7,1),zeros(7,1),zeros(4,1)}
assert(isreal(qJ) && all(size(qJ) == [7 1]), ...
  'S7RRRRRRR1_jacobiaD_rot_7_sym_varpar: qJ has to be [7x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [7 1]), ...
  'S7RRRRRRR1_jacobiaD_rot_7_sym_varpar: qJD has to be [7x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'S7RRRRRRR1_jacobiaD_rot_7_sym_varpar: pkin has to be [4x1] (double)');

%% Symbolic Calculation
% From jacobiaD_rot_7_floatb_twist_matlab.m
% OptimizationMode: 2
% StartTime: 2019-02-26 22:54:33
% EndTime: 2019-02-26 22:54:44
% DurationCPUTime: 11.77s
% Computational Cost: add. (34439->421), mult. (96643->757), div. (1497->12), fcn. (121102->17), ass. (0->284)
t618 = sin(qJ(4));
t620 = sin(qJ(2));
t625 = cos(qJ(2));
t619 = sin(qJ(3));
t624 = cos(qJ(3));
t792 = sin(qJ(1));
t712 = t792 * qJD(3);
t690 = t619 * t712;
t719 = qJD(2) * t792;
t691 = t624 * t719;
t794 = cos(qJ(1));
t717 = t794 * qJD(3);
t721 = qJD(1) * t792;
t722 = qJD(1) * t794;
t641 = t624 * (t625 * t722 + t717) - t619 * t721 - t620 * t691 - t625 * t690;
t725 = t792 * t624;
t727 = t794 * t619;
t662 = t625 * t725 + t727;
t793 = cos(qJ(4));
t698 = t793 * t792;
t676 = qJD(4) * t698;
t528 = t641 * t793 - t618 * (qJD(4) * t662 - t620 * t722 - t625 * t719) + t620 * t676;
t663 = t625 * t727 + t725;
t697 = t619 * t719;
t567 = qJD(1) * t663 + qJD(3) * t662 - t620 * t697;
t617 = sin(qJ(5));
t623 = cos(qJ(5));
t731 = t618 * t792;
t700 = t620 * t731;
t581 = t662 * t793 + t700;
t613 = t792 * t619;
t726 = t794 * t624;
t595 = t613 * t625 - t726;
t810 = -t581 * t617 - t595 * t623;
t492 = qJD(5) * t810 + t528 * t623 - t567 * t617;
t616 = sin(qJ(6));
t622 = cos(qJ(6));
t677 = qJD(2) * t698;
t699 = t794 * t793;
t680 = qJD(1) * t699;
t633 = qJD(4) * t581 + t618 * t641 - t620 * t680 - t625 * t677;
t557 = t581 * t623 - t595 * t617;
t608 = t620 * t698;
t644 = t618 * t662 - t608;
t815 = t557 * t616 - t622 * t644;
t475 = -qJD(6) * t815 + t492 * t622 + t616 * t633;
t534 = t557 * t622 + t616 * t644;
t474 = qJD(6) * t534 + t492 * t616 - t622 * t633;
t814 = -qJD(5) * t557 - t528 * t617 - t567 * t623;
t675 = t625 * t726 - t613;
t732 = t618 * t794;
t701 = t620 * t732;
t585 = t675 * t793 + t701;
t768 = t663 * t617;
t562 = t585 * t623 - t768;
t609 = t620 * t699;
t657 = t618 * t675 - t609;
t539 = t562 * t622 + t616 * t657;
t561 = t585 * t617 + t623 * t663;
t615 = sin(qJ(7));
t621 = cos(qJ(7));
t507 = t539 * t615 + t561 * t621;
t809 = 0.2e1 * t507;
t808 = -t625 * t721 - t712;
t531 = t815 ^ 2;
t730 = t620 * t793;
t761 = t625 * t618;
t594 = t624 * t730 - t761;
t763 = t619 * t620;
t580 = t594 * t623 - t617 * t763;
t728 = t625 * t793;
t762 = t620 * t624;
t593 = t618 * t762 + t728;
t682 = t580 * t616 - t593 * t622;
t552 = 0.1e1 / t682 ^ 2;
t513 = t531 * t552 + 0.1e1;
t775 = t815 * t552;
t551 = 0.1e1 / t682;
t757 = qJD(3) * t624;
t759 = qJD(2) * t625;
t651 = -qJD(5) * t594 - t619 * t759 - t620 * t757;
t715 = t793 * qJD(2);
t718 = qJD(4) * t793;
t659 = t624 * t715 - t718;
t714 = t793 * qJD(3);
t693 = t619 * t714;
t795 = -t693 + (-qJD(4) * t624 + qJD(2)) * t618;
t565 = t620 * t795 + t659 * t625;
t754 = qJD(5) * t619;
t687 = t620 * t754 - t565;
t526 = t617 * t651 - t623 * t687;
t555 = -t580 * t622 - t593 * t616;
t658 = t624 * t718 - t715;
t704 = qJD(2) * t624 - qJD(4);
t758 = qJD(3) * t619;
t564 = t658 * t620 + (-t620 * t758 + t625 * t704) * t618;
t487 = qJD(6) * t555 - t526 * t616 + t564 * t622;
t805 = t487 * t552;
t782 = t551 * t805;
t788 = (t474 * t775 + t531 * t782) / t513 ^ 2;
t806 = -0.2e1 * t788;
t579 = -t594 * t617 - t623 * t763;
t668 = -t551 * t810 + t579 * t775;
t804 = t616 * t668;
t803 = (qJD(4) * t623 - qJD(6)) * t618;
t720 = qJD(2) * t794;
t655 = t620 * t721 - t625 * t720;
t678 = qJD(4) * t699;
t612 = t619 * t722;
t694 = t625 * t717;
t695 = t624 * t720;
t684 = -t619 * t694 - t620 * t695 + t624 * t808 - t612;
t527 = t684 * t793 + t620 * t678 + (-qJD(4) * t675 - t655) * t618;
t649 = t623 * t657;
t802 = qJD(6) * t649 + t527;
t511 = 0.1e1 / t513;
t674 = -t474 * t551 - t487 * t775;
t456 = t674 * t511;
t514 = atan2(t815, -t682);
t509 = sin(t514);
t510 = cos(t514);
t683 = t509 * t682 + t510 * t815;
t448 = t456 * t683 + t474 * t509 + t487 * t510;
t471 = t509 * t815 - t510 * t682;
t469 = 0.1e1 / t471 ^ 2;
t537 = t562 * t616 - t622 * t657;
t532 = t537 ^ 2;
t467 = t469 * t532 + 0.1e1;
t465 = 0.1e1 / t467;
t468 = 0.1e1 / t471;
t566 = (-t694 - t722) * t624 + (t620 * t720 - t808) * t619;
t490 = -qJD(5) * t561 + t527 * t623 + t566 * t617;
t679 = qJD(2) * t699;
t681 = qJD(1) * t698;
t797 = qJD(4) * t585 + t618 * t684 + t620 * t681 - t625 * t679;
t472 = qJD(6) * t539 + t490 * t616 - t622 * t797;
t784 = t469 * t537;
t470 = t468 * t469;
t790 = t448 * t470;
t791 = (t472 * t784 - t532 * t790) / t467 ^ 2;
t749 = -0.2e1 * t791;
t710 = t468 * t749;
t801 = -t448 * t465 * t469 + t710;
t648 = qJD(5) * t657;
t800 = -t585 * qJD(6) - t617 * t648 + t623 * t797;
t744 = -0.2e1 * t470 * t537;
t708 = t448 * t744;
t709 = t469 * t749;
t785 = t469 * t472;
t799 = t537 * t709 + (t708 + t785) * t465;
t591 = -t609 * t624 + t625 * t732;
t798 = qJD(5) * t591 + t619 * t655 - t717 * t762;
t508 = t539 * t621 - t561 * t615;
t502 = 0.1e1 / t508;
t503 = 0.1e1 / t508 ^ 2;
t473 = -qJD(6) * t537 + t490 * t622 + t616 * t797;
t489 = qJD(5) * t562 + t527 * t617 - t566 * t623;
t458 = qJD(7) * t508 + t473 * t615 + t489 * t621;
t501 = t507 ^ 2;
t485 = t501 * t503 + 0.1e1;
t780 = t503 * t507;
t751 = qJD(7) * t507;
t459 = t473 * t621 - t489 * t615 - t751;
t787 = t459 * t502 * t503;
t789 = (t458 * t780 - t501 * t787) / t485 ^ 2;
t786 = t465 * t468;
t483 = 0.1e1 / t485;
t783 = t483 * t503;
t781 = t502 * t615;
t779 = t507 * t621;
t778 = t509 * t537;
t777 = t510 * t537;
t776 = t815 * t551;
t774 = t561 * t616;
t773 = t561 * t622;
t767 = t663 * t618;
t766 = t616 * t623;
t765 = t617 * t619;
t764 = t618 * t622;
t755 = qJD(5) * t617;
t753 = qJD(6) * t616;
t752 = qJD(6) * t622;
t748 = 0.2e1 * t791;
t747 = -0.2e1 * t789;
t746 = 0.2e1 * t789;
t745 = 0.2e1 * t788;
t742 = t503 * t789;
t741 = t458 * t783;
t740 = t507 * t787;
t738 = t465 * t784;
t737 = t469 * t778;
t736 = t469 * t777;
t735 = t815 * t782;
t734 = t619 * t764;
t729 = t623 * t793;
t724 = t616 * t755;
t723 = t623 * t754;
t716 = t794 * qJD(4);
t713 = t793 * qJD(5);
t711 = t792 * qJD(4);
t707 = t551 * t806;
t706 = 0.2e1 * t740;
t705 = -0.2e1 * t735;
t702 = t620 * t727;
t696 = t622 * t718;
t638 = qJD(4) * t767 - qJD(5) * t675 + t566 * t793;
t653 = -t663 * t713 + t684;
t686 = -qJD(6) * t767 - t617 * t653 + t623 * t638;
t685 = qJD(7) * t773 - t490;
t506 = -t534 * t621 - t615 * t810;
t505 = -t534 * t615 + t621 * t810;
t571 = -t617 * t675 - t663 * t729;
t547 = t571 * t622 - t616 * t767;
t570 = t623 * t675 - t768 * t793;
t516 = t547 * t621 - t570 * t615;
t515 = t547 * t615 + t570 * t621;
t575 = t591 * t623 + t617 * t702;
t590 = -t624 * t701 - t625 * t699;
t550 = t575 * t622 + t590 * t616;
t574 = t591 * t617 - t623 * t702;
t520 = t550 * t621 - t574 * t615;
t519 = t550 * t615 + t574 * t621;
t549 = -t575 * t616 + t590 * t622;
t673 = t503 * t779 - t781;
t672 = t534 * t551 + t555 * t775;
t643 = t623 * t644;
t542 = -t581 * t622 - t616 * t643;
t568 = t593 * t766 + t594 * t622;
t671 = t542 * t551 + t568 * t775;
t569 = -t595 * t729 - t617 * t662;
t545 = t569 * t616 + t595 * t764;
t665 = -t617 * t624 - t619 * t729;
t588 = t665 * t620;
t572 = -t588 * t616 - t620 * t734;
t670 = t545 * t551 + t572 * t775;
t589 = -t608 * t624 + t625 * t731;
t573 = t613 * t617 * t620 + t589 * t623;
t548 = t573 * t616 - (-t624 * t700 - t625 * t698) * t622;
t597 = t620 * t618 + t624 * t728;
t584 = t597 * t623 - t625 * t765;
t596 = t624 * t761 - t730;
t560 = -t584 * t616 + t596 * t622;
t669 = t548 * t551 + t560 * t775;
t666 = qJD(5) * t702 + (-t618 * t721 - t624 * t679 + t678) * t625 + (t624 * t681 + t794 * t693 + (t624 * t716 - t720) * t618) * t620;
t664 = t509 + (-t510 * t776 - t509) * t511;
t656 = -qJD(7) * t562 - t489 * t622 + t561 * t753;
t652 = -qJD(6) * t571 + t566 * t618 - t663 * t718;
t650 = t617 * t657;
t647 = -t618 * t722 - t676;
t642 = qJD(7) * t650 + t616 * t802 - t622 * t800;
t544 = t585 * t616 - t622 * t649;
t632 = t544 * qJD(7) - t617 * t797 - t623 * t648;
t540 = t625 * t681 + (-t624 * t678 + t679) * t620 + ((-t695 + t716) * t625 + (t619 * t717 + t624 * t721) * t620) * t618;
t525 = t617 * t687 + t623 * t651;
t522 = t544 * t621 + t615 * t650;
t518 = -t562 * t615 - t621 * t773;
t517 = t562 * t621 - t615 * t773;
t500 = -t617 * t798 + t666 * t623;
t499 = t666 * t617 + t623 * t798;
t498 = -t588 * t752 + (-t616 * t665 - t734) * t759 + ((-qJD(3) * t764 - (-t714 - qJD(5)) * t766) * t624 + (-t696 + (-t803 + (-t713 - qJD(3)) * t617) * t616) * t619) * t620;
t496 = t617 * t638 + t623 * t653;
t495 = (qJD(6) * t593 * t623 + t565) * t622 + (-qJD(6) * t594 + t564 * t623 - t593 * t755) * t616;
t488 = qJD(6) * t682 - t526 * t622 - t564 * t616;
t486 = t597 * t724 + (-t584 * t622 - t596 * t616) * qJD(6) + (-(qJD(2) * t765 - t623 * t659) * t616 - t704 * t764) * t620 + (-(-t617 * t757 + t623 * t795 - t723) * t616 + (-t618 * t758 + t658) * t622) * t625;
t482 = (-t641 * t617 + (-qJD(5) * t662 - t567 * t793) * t623) * t616 + (qJD(6) * t569 + t567 * t618) * t622 + (t696 + (t617 * t713 + t803) * t616) * t595;
t481 = t616 * t652 + t622 * t686;
t480 = -t528 * t622 + t581 * t753 - t633 * t766 - t643 * t752 + t644 * t724;
t478 = -t589 * t724 + t573 * t752 + (-(-t680 + (-t691 + t711) * t618) * t622 + ((-t624 * t677 - t647) * t623 + t617 * t697 - qJD(6) * t698) * t616) * t625 + (((-t618 * t719 + t690 * t793) * t623 + t617 * t612 + t792 * t723) * t616 - (t618 * t690 + t677) * t622 + (-t647 * t622 + ((t618 * t711 - t680) * t623 + t617 * t712 - qJD(6) * t731) * t616) * t624) * t620;
t477 = qJD(6) * t549 + t500 * t622 + t540 * t616;
t464 = t511 * t804;
t463 = t670 * t511;
t462 = t671 * t511;
t461 = t669 * t511;
t460 = t672 * t511;
t455 = t664 * t537;
t454 = (t509 * t810 - t510 * t579) * t616 + t683 * t464;
t451 = -t461 * t683 + t509 * t548 + t510 * t560;
t450 = -t460 * t683 + t509 * t534 + t510 * t555;
t446 = t670 * t745 + (t572 * t705 - t482 * t551 + (-t474 * t572 - t487 * t545 - t498 * t815) * t552) * t511;
t445 = t671 * t745 + (t568 * t705 - t480 * t551 + (-t474 * t568 - t487 * t542 - t495 * t815) * t552) * t511;
t444 = t669 * t745 + (t560 * t705 - t478 * t551 + (-t474 * t560 - t486 * t815 - t487 * t548) * t552) * t511;
t443 = t672 * t745 + (t555 * t705 - t475 * t551 + (-t474 * t555 - t487 * t534 - t488 * t815) * t552) * t511;
t442 = t804 * t806 + (t668 * t752 + (0.2e1 * t579 * t735 - t814 * t551 + (t474 * t579 - t487 * t810 + t525 * t815) * t552) * t616) * t511;
t1 = [-t537 * t707 + (-t472 * t551 - t537 * t805) * t511, t444, t446, t445, t442, t443, 0; t815 * t710 + (t474 * t468 + (-t448 * t815 + t455 * t472) * t469) * t465 + (t455 * t709 + (-0.2e1 * t455 * t790 + (t456 * t511 * t776 + t745) * t737 + (-t815 * t707 + t456 + (-t456 + t674) * t511) * t736 + t664 * t785) * t465) * t537 (-t451 * t784 - t468 * t549) * t748 + ((-qJD(6) * t550 - t500 * t616 + t540 * t622) * t468 + t451 * t708 + (-t549 * t448 + t451 * t472 + (t444 * t815 - t461 * t474 + t486 + (-t461 * t682 + t548) * t456) * t777 + (t444 * t682 + t461 * t487 + t478 + (t461 * t815 - t560) * t456) * t778) * t469) * t465 (-t616 * t686 + t622 * t652) * t786 + ((t446 * t815 - t463 * t474 + t498 + (-t463 * t682 + t545) * t456) * t510 + (t446 * t682 + t463 * t487 + t482 + (t463 * t815 - t572) * t456) * t509) * t738 + t801 * (-t571 * t616 - t663 * t764) + t799 * (-t463 * t683 + t509 * t545 + t510 * t572) ((t445 * t815 - t462 * t474 + t495 + (-t462 * t682 + t542) * t456) * t510 + (t445 * t682 + t462 * t487 + t480 + (t462 * t815 - t568) * t456) * t509) * t738 + t801 * (t585 * t622 + t616 * t649) + t799 * (-t462 * t683 + t509 * t542 + t510 * t568) + (t616 * t800 + t622 * t802) * t786 (-t454 * t784 - t468 * t774) * t748 + (t454 * t785 + (t489 * t616 + t561 * t752) * t468 + (t454 * t744 - t469 * t774) * t448 + (-t579 * t752 + t442 * t815 + t464 * t474 - t525 * t616 + (t464 * t682 + t616 * t810) * t456) * t736 + (t810 * t752 + t442 * t682 - t464 * t487 + t814 * t616 + (-t464 * t815 + t579 * t616) * t456) * t737) * t465 (-t450 * t784 + t468 * t539) * t748 + (t450 * t708 - t473 * t468 + (t539 * t448 + t450 * t472 + (t443 * t815 - t460 * t474 + t488 + (-t460 * t682 + t534) * t456) * t777 + (t443 * t682 + t460 * t487 + t475 + (t460 * t815 - t555) * t456) * t778) * t469) * t465, 0; (-t502 * t505 + t506 * t780) * t746 + ((qJD(7) * t506 - t475 * t615 + t621 * t814) * t502 + t506 * t706 + (-t505 * t459 - (-qJD(7) * t505 - t475 * t621 - t615 * t814) * t507 - t506 * t458) * t503) * t483 (-t502 * t519 + t520 * t780) * t746 + ((qJD(7) * t520 + t477 * t615 + t499 * t621) * t502 + t520 * t706 + (-t519 * t459 - (-qJD(7) * t519 + t477 * t621 - t499 * t615) * t507 - t520 * t458) * t503) * t483 (-t502 * t515 + t516 * t780) * t746 + ((qJD(7) * t516 + t481 * t615 + t496 * t621) * t502 + t516 * t706 + (-t515 * t459 - (-qJD(7) * t515 + t481 * t621 - t496 * t615) * t507 - t516 * t458) * t503) * t483 (t742 * t809 - t741) * t522 + (-t459 * t783 + t502 * t747) * (t544 * t615 - t621 * t650) + ((t615 * t642 + t621 * t632) * t502 - (-t615 * t632 + t621 * t642) * t780 + t522 * t706) * t483 (-t502 * t517 + t518 * t780) * t746 + (t518 * t706 - t685 * t502 * t621 + t656 * t781 + (-t507 * t615 * t685 - t518 * t458 - t517 * t459 - t656 * t779) * t503) * t483, t673 * t537 * t747 + (t673 * t472 + ((-qJD(7) * t502 - 0.2e1 * t740) * t621 + (t458 * t621 + (t459 - t751) * t615) * t503) * t537) * t483, t747 + (t741 + (-t483 * t787 - t742) * t507) * t809;];
JaD_rot  = t1;
