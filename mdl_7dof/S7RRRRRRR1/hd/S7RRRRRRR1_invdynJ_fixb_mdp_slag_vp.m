% Calculate vector of inverse dynamics joint torques for
% S7RRRRRRR1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [7x1]
%   Generalized joint coordinates (joint angles)
% qJD [7x1]
%   Generalized joint velocities
% qJDD [7x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[d1,d3,d5,d7]';
% MDP [45x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S7RRRRRRR1_convert_par2_MPV_fixb.m
% 
% Output:
% tau [7x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 08:31
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S7RRRRRRR1_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(7,1),zeros(7,1),zeros(7,1),zeros(3,1),zeros(4,1),zeros(45,1)}
assert(isreal(qJ) && all(size(qJ) == [7 1]), ...
  'S7RRRRRRR1_invdynJ_fixb_mdp_slag_vp: qJ has to be [7x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [7 1]), ...
  'S7RRRRRRR1_invdynJ_fixb_mdp_slag_vp: qJD has to be [7x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [7 1]), ...
  'S7RRRRRRR1_invdynJ_fixb_mdp_slag_vp: qJDD has to be [7x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S7RRRRRRR1_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'S7RRRRRRR1_invdynJ_fixb_mdp_slag_vp: pkin has to be [4x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [45 1]), ...
  'S7RRRRRRR1_invdynJ_fixb_mdp_slag_vp: MDP has to be [45x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 07:44:53
% EndTime: 2019-03-10 07:46:51
% DurationCPUTime: 75.17s
% Computational Cost: add. (24858->1256), mult. (54897->1773), div. (0->0), fcn. (46069->14), ass. (0->471)
t952 = sin(qJ(4));
t1172 = qJD(4) * t952;
t953 = sin(qJ(3));
t1123 = t953 * t1172;
t960 = cos(qJ(3));
t1173 = qJD(3) * t960;
t959 = cos(qJ(4));
t1125 = t959 * t1173;
t1016 = -t1123 + t1125;
t961 = cos(qJ(2));
t1198 = t960 * t961;
t954 = sin(qJ(2));
t1224 = t952 * t954;
t903 = t1198 * t959 + t1224;
t887 = t903 * qJD(1);
t1317 = -t1016 - t887;
t1178 = qJD(1) * t961;
t1133 = t953 * t1178;
t958 = cos(qJ(5));
t1171 = qJD(4) * t958;
t1174 = qJD(3) * t959;
t1205 = t958 * t960;
t951 = sin(qJ(5));
t1182 = (-qJD(5) - t1174) * t1205 + (t952 * t1171 + (qJD(5) * t959 + qJD(3)) * t951) * t953 + t1133 * t951 - t887 * t958;
t1131 = t960 * t1178;
t1144 = pkin(2) * t1173;
t1316 = -pkin(2) * t1131 + pkin(3) * t1317 - t1144;
t1135 = -pkin(2) * t959 - pkin(3);
t1086 = t953 * t1135;
t1127 = t953 * t1174;
t1169 = qJD(4) * t960;
t1175 = qJD(3) * t953;
t1315 = pkin(3) * t1175 + (t1169 * t952 + t1127) * pkin(2) - t1086 * t1178;
t1170 = qJD(4) * t959;
t1015 = -t953 * t1170 - t952 * t1173;
t1179 = qJD(1) * t954;
t886 = t1131 * t952 - t1179 * t959;
t1273 = t886 - t1015;
t1206 = t958 * t959;
t1037 = t1206 * t953 + t951 * t960;
t1314 = -qJD(6) * t1037 + t1273;
t1161 = qJD(6) * t952;
t1313 = -t953 * t1161 + t1182;
t962 = cos(qJ(1));
t1216 = t953 * t962;
t955 = sin(qJ(1));
t898 = t1198 * t955 + t1216;
t851 = t1224 * t955 + t898 * t959;
t1197 = t962 * t960;
t1212 = t955 * t953;
t897 = t1212 * t961 - t1197;
t784 = t851 * t958 - t897 * t951;
t1215 = t954 * t959;
t850 = -t955 * t1215 + t898 * t952;
t950 = sin(qJ(6));
t957 = cos(qJ(6));
t1312 = t784 * t950 - t850 * t957;
t1311 = t784 * t957 + t850 * t950;
t1149 = qJDD(1) * t954;
t1000 = qJD(2) * (-qJD(3) + t1178) + t1149;
t1151 = qJD(1) * qJD(3);
t1106 = t954 * t1151;
t1059 = qJDD(2) + t1106;
t813 = (t1000 * t953 + t1059 * t960) * pkin(2);
t911 = t1135 * t960;
t1263 = pkin(3) * t959;
t913 = (pkin(2) + t1263) * t953;
t840 = t911 * t951 - t913 * t958;
t1306 = qJD(5) * t840 - t1315 * t958 + t1316 * t951;
t1163 = qJD(5) * t958;
t1113 = t957 * t1163;
t1208 = t957 * t958;
t944 = t953 * qJD(2);
t1079 = t960 * t1179 - t944;
t1091 = qJD(3) + t1178;
t858 = t1079 * t952 + t1091 * t959;
t1051 = t952 * t1091;
t860 = t1079 * t959 - t1051;
t761 = -t1208 * t858 + t860 * t950;
t1310 = -t761 + t1113;
t1146 = t961 * qJDD(1);
t1152 = qJD(1) * qJD(2);
t908 = t1152 * t954 - qJDD(3) - t1146;
t975 = t1000 * t960 - t1059 * t953;
t732 = -qJD(4) * t1051 + (qJD(4) * t1079 - t908) * t959 + t952 * t975;
t1309 = -qJDD(5) - t732;
t1126 = t954 * t1173;
t1017 = t961 * t944 + t1126;
t1191 = t1313 * t957 - t1314 * t950;
t930 = t953 * t1179;
t945 = t960 * qJD(2);
t1029 = t930 + t945;
t1164 = qJD(5) * t957;
t1116 = t951 * t1164;
t1158 = qJD(6) * t958;
t1207 = t957 * t959;
t1232 = t950 * t952;
t829 = -t1029 * t1206 - t1079 * t951;
t1184 = t1029 * t1232 - t829 * t957 + (qJD(6) - t1171) * t1207 + (t1116 + (-qJD(4) + t1158) * t950) * t952;
t1201 = t959 * t960;
t1219 = t953 * t958;
t1181 = t1219 * qJD(3) + t1037 * qJD(5) + t1133 * t958 + (qJD(3) * t1201 - t1123 + t887) * t951;
t987 = qJD(5) + t858;
t982 = qJD(4) * t987;
t978 = t959 * t982;
t1305 = t1309 * t952 - t978;
t1154 = qJD(4) - t1029;
t798 = t1154 * t951 + t958 * t860;
t837 = t957 * t987;
t745 = t798 * t950 - t837;
t1153 = qJD(7) - t745;
t747 = t957 * t798 + t950 * t987;
t888 = t958 * t1154;
t796 = t860 * t951 - t888;
t790 = qJD(6) + t796;
t949 = sin(qJ(7));
t956 = cos(qJ(7));
t694 = t747 * t949 + t790 * t956;
t1304 = t1153 * t694;
t696 = t747 * t956 - t949 * t790;
t1303 = t1153 * t696;
t1279 = qJD(3) * t1154;
t1302 = t1279 * t959;
t1162 = qJD(6) * t950;
t1112 = t951 * t1162;
t1301 = -t1112 + t1310;
t1124 = t951 * t1170;
t1013 = t952 * t1163 + t1124;
t1228 = t951 * t959;
t828 = -t1029 * t1228 + t1079 * t958;
t1004 = t1013 + t828;
t907 = t1029 * pkin(2);
t1120 = t907 * t1170;
t946 = t952 ^ 2;
t1300 = 0.2e1 * t952 * t1120 + t813 * t946;
t1227 = t952 * t813;
t1299 = t1120 + t1227;
t1298 = qJD(2) * qJD(3) - t1149;
t1275 = -t1029 * t952 + t1172;
t1202 = t959 * t907;
t830 = pkin(3) * t1154 - t1202;
t906 = t1079 * pkin(2);
t991 = pkin(3) * t860 + t906;
t744 = t958 * t830 - t951 * t991;
t1038 = t1232 * t907 - t744 * t957;
t1223 = t952 * t957;
t1101 = t952 * t908 + t959 * t975;
t731 = -qJD(4) * t858 + t1101;
t1107 = t961 * t1152;
t1147 = t953 * qJDD(2);
t1265 = pkin(2) * t960;
t814 = qJD(2) * t1144 + (-t1107 - t1149) * t1265 + (t1106 * t953 + t1147) * pkin(2);
t702 = -pkin(3) * t731 + t814;
t1204 = t959 * t813;
t1008 = -t960 * qJDD(2) + t1298 * t953;
t822 = -qJD(1) * t1017 + t1008;
t821 = -qJDD(4) - t822;
t711 = -pkin(3) * t821 + t1172 * t907 - t1204;
t1058 = t951 * t702 + t958 * t711;
t743 = t951 * t830 + t958 * t991;
t672 = -qJD(5) * t743 + t1058;
t660 = qJD(6) * t1038 - t957 * t1120 - t813 * t1223 - t672 * t950;
t1213 = t954 * t962;
t905 = t1197 * t961 - t1212;
t857 = t1213 * t952 + t905 * t959;
t904 = -t1216 * t961 - t955 * t960;
t789 = t857 * t958 + t904 * t951;
t856 = -t1213 * t959 + t905 * t952;
t741 = -t789 * t950 + t856 * t957;
t1220 = t953 * t954;
t1142 = t951 * t1220;
t896 = t1201 * t954 - t952 * t961;
t849 = t896 * t958 - t1142;
t1200 = t959 * t961;
t1214 = t954 * t960;
t895 = t1214 * t952 + t1200;
t781 = t849 * t950 - t895 * t957;
t1007 = -g(1) * t741 + g(2) * t1312 + g(3) * t781 + t660;
t1285 = t1153 ^ 2;
t1296 = pkin(4) * t1285 + t1007;
t1243 = t858 * t958;
t760 = -t1243 * t950 - t957 * t860;
t1295 = t1163 * t950 - t760;
t1294 = t851 * t951 + t897 * t958;
t1159 = qJD(6) * t957;
t1166 = qJD(5) * t951;
t1222 = t952 * t958;
t1244 = t858 * t951;
t777 = pkin(3) * t1244 + t1222 * t907;
t748 = -t1202 * t957 - t777 * t950;
t1293 = -t748 + (-t1159 * t958 + t1166 * t950) * pkin(3);
t1291 = t796 * t987;
t841 = t911 * t958 + t913 * t951;
t1189 = qJD(5) * t841 + t1315 * t951 + t1316 * t958;
t1290 = MDP(36) * t790;
t1287 = t1091 * t858;
t1102 = t951 * t731 + t958 * t821;
t684 = qJD(5) * t798 + t1102;
t682 = qJDD(6) + t684;
t1286 = t682 * MDP(36);
t1284 = t744 * MDP(31);
t1266 = pkin(2) * t952;
t1094 = t1175 * t1266;
t1283 = -t950 * t1094 + t1162 * t841 + t1306 * t957;
t809 = (t945 - qJD(4)) * t1200 + (-t1127 + (qJD(2) - t1169) * t952) * t954;
t1281 = -qJD(5) * t1220 + t809;
t1280 = qJD(3) * t1091;
t1165 = qJD(5) * t952;
t1238 = t907 * t952;
t1277 = -t907 * t1165 - t858 * t1238;
t1218 = t953 * t959;
t894 = t951 * t1218 - t1205;
t1231 = t951 * t952;
t966 = t958 * t1309;
t981 = qJD(5) * t987;
t1274 = -t981 * t1231 - t952 * t966 + t958 * t978;
t1121 = t954 * t1170;
t1087 = t953 * t1121;
t1272 = -pkin(2) * t1087 - t1017 * t1266;
t1088 = t952 * t1133;
t1064 = pkin(2) * t1088;
t1119 = t959 * t1169;
t1271 = -pkin(2) * t1119 + t1064 + t1094;
t1022 = g(1) * t856 + g(2) * t850 + g(3) * t895;
t1270 = t1079 * t907;
t1084 = g(1) * t962 + g(2) * t955;
t1001 = -g(3) * t961 + t1084 * t954;
t1269 = t1120 + t1022;
t683 = qJD(5) * t888 - t1166 * t860 + t958 * t731 - t951 * t821;
t667 = qJD(6) * t837 - t1162 * t798 - t1309 * t950 + t957 * t683;
t1104 = t1309 * t957 + t950 * t683;
t668 = qJD(6) * t747 + t1104;
t1268 = t667 * MDP(34) - t668 * MDP(35) + t1286;
t1267 = t683 * MDP(25) - t684 * MDP(26) - MDP(27) * t1309 - MDP(31) * t1299;
t1261 = g(2) * t1311;
t1260 = g(2) * t1294;
t665 = t956 * t667;
t655 = -qJD(7) * t694 - t682 * t949 + t665;
t1256 = t655 * t949;
t1255 = t667 * t950;
t1254 = t682 * t957;
t1253 = t683 * t951;
t1252 = t696 * t956;
t1247 = t796 * t957;
t1251 = (-pkin(4) * t1247 + t744) * t1153;
t1250 = t731 * t952;
t1249 = t745 * t790;
t1248 = t747 * t790;
t1246 = t798 * t958;
t1242 = t860 * t959;
t1239 = t906 * t952;
t666 = -qJDD(7) + t668;
t1236 = t949 * t666;
t1235 = t949 * t951;
t1234 = t950 * t682;
t1233 = t950 * t951;
t1230 = t951 * t956;
t1229 = t951 * t957;
t1226 = t952 * t821;
t1225 = t952 * t953;
t1221 = t953 * t908;
t1217 = t953 * t961;
t1211 = t956 * t666;
t1210 = t956 * t957;
t1209 = t956 * t958;
t1203 = t959 * t821;
t1199 = t960 * t908;
t847 = -t1037 * t957 - t1225 * t950;
t779 = t847 * t949 - t894 * t956;
t1196 = -qJD(7) * t779 + t1181 * t949 + t1191 * t956;
t1157 = qJD(7) * t949;
t1195 = t894 * t1157 + (qJD(7) * t847 - t1181) * t956 + t1191 * t949;
t1194 = -t841 * t1159 + (-t957 * t1119 + (t1162 * t960 + t1175 * t957) * t952) * pkin(2) + t1064 * t957 + t1306 * t950;
t900 = -t1208 * t952 + t950 * t959;
t1193 = (qJD(7) * t1231 + t1184) * t956 + (-qJD(7) * t900 + t1004) * t949;
t846 = t1231 * t949 + t900 * t956;
t1192 = qJD(7) * t846 - t1004 * t956 + t1184 * t949;
t1190 = t1313 * t950 + t1314 * t957;
t833 = -pkin(3) * t1079 - t906 * t959;
t838 = t1029 * t1263 + t907;
t752 = t833 * t958 + t838 * t951;
t1188 = -t906 * t1232 + t957 * t752;
t1187 = -t950 * t1202 + t957 * t777;
t1160 = qJD(6) * t956;
t1186 = -t1235 * t858 - t761 * t956 + (qJD(7) + t1164) * t1209 + (-t950 * t1160 + (-qJD(7) * t957 - qJD(5)) * t949) * t951;
t899 = t1210 * t951 + t949 * t958;
t1185 = t899 * qJD(7) + t987 * t1230 + (qJD(5) * t1208 - t1112 - t761) * t949;
t1110 = t952 * t1159;
t1012 = t1170 * t950 + t1110;
t1117 = t951 * t1165;
t1183 = t1012 * t958 - t1162 * t959 - t1172 * t957 + t1223 * t1029 + (-t1117 + t829) * t950;
t947 = t954 ^ 2;
t1180 = -t961 ^ 2 + t947;
t1177 = qJD(2) * t954;
t1176 = qJD(2) * t961;
t1168 = qJD(5) * t747;
t1167 = qJD(5) * t950;
t1156 = qJD(7) * t956;
t1155 = t1029 * qJD(2);
t1148 = qJDD(1) * t960;
t1145 = t952 * t1265;
t1143 = t950 * t1231;
t1139 = t952 * t1220;
t1138 = t953 * t1223;
t1137 = t954 * t1219;
t1136 = t953 * t1213;
t1134 = pkin(3) * t957 + pkin(4);
t1128 = t954 * t1175;
t1118 = qJD(5) * t907 * t946;
t659 = -t907 * t1110 - t1162 * t744 - t1299 * t950 + t957 * t672;
t657 = -pkin(4) * t682 + t659;
t1105 = -t657 + t1261;
t1103 = -t958 * t702 + t951 * t711;
t1098 = t790 * t957;
t1097 = pkin(2) * t1139;
t673 = qJD(5) * t744 + t1103;
t658 = t667 * pkin(4) + t673;
t690 = -pkin(4) * t790 - t1038;
t1096 = -qJD(7) * t690 - t658;
t1095 = qJD(7) * t747 + t682;
t1090 = t950 * t1139;
t1089 = t954 * t1138;
t776 = pkin(3) * t1243 - t1231 * t907;
t1081 = t961 * t1154;
t1078 = t1164 * t790 + t667;
t1077 = t1167 * t790 + t668;
t862 = -pkin(2) * t1214 - pkin(3) * t896;
t890 = t954 * t1086;
t1055 = t862 * t958 - t890 * t951;
t1018 = t945 * t961 - t1128;
t759 = -pkin(2) * t1018 - pkin(3) * t809;
t792 = -t1017 * pkin(3) + (-t954 * t1125 + (t1172 * t954 - t1176 * t959) * t953) * pkin(2);
t687 = qJD(5) * t1055 + t759 * t951 + t792 * t958;
t794 = t862 * t951 + t890 * t958;
t1075 = -t1162 * t794 + t957 * t687;
t709 = -t1210 * t796 - t798 * t949;
t1074 = -t1159 * t956 + t709;
t765 = pkin(4) * t847 + t840;
t1073 = pkin(4) * t1181 - qJD(7) * t765 - t1012 * t1265 + t1064 * t950 - t1283;
t1053 = -t1145 * t950 + t957 * t841;
t764 = pkin(4) * t894 + t1053;
t1072 = pkin(4) * t1191 + qJD(7) * t764 + t1189;
t861 = -pkin(3) * t1222 + pkin(4) * t900;
t1071 = -qJD(7) * t861 - t1188 + (t952 * t1113 + (-t1161 * t950 + t1170 * t957) * t951) * pkin(3) + t1004 * pkin(4);
t1014 = -t1170 * t958 + t1117;
t751 = t833 * t951 - t838 * t958;
t889 = t1134 * t1231;
t1070 = pkin(3) * t1014 + pkin(4) * t1184 + qJD(7) * t889 - t751;
t910 = t1134 * t958;
t1069 = pkin(3) * t1163 + pkin(4) * t1301 + qJD(7) * t910 + t776;
t912 = (pkin(4) * t957 + pkin(3)) * t951;
t1068 = -qJD(7) * t912 - t1187 + (-t1158 * t950 - t1116) * pkin(3) + (-t1244 - t1166) * pkin(4);
t1066 = qJD(4) * t1154;
t1060 = qJD(6) * t1089;
t689 = pkin(4) * t747 + t743;
t669 = -t689 * t956 - t690 * t949;
t782 = t849 * t957 + t895 * t950;
t716 = pkin(4) * t782 - t1055;
t778 = t957 * t794;
t848 = t896 * t951 + t1137;
t726 = -pkin(2) * t1090 - pkin(4) * t848 + t778;
t1057 = -t716 * t956 - t726 * t949;
t1056 = t716 * t949 - t726 * t956;
t736 = t782 * t949 + t848 * t956;
t1054 = -t906 * t953 + t907 * t960;
t1052 = t907 * t1091;
t1050 = t961 * t1091;
t1049 = t1091 * t860;
t1048 = qJD(1) * t1091;
t1047 = qJD(2) * t1091;
t1044 = qJD(3) * t1029 + t1147;
t1042 = t1154 * t1172;
t1041 = t959 * t1066;
t1040 = t952 * t1279;
t1039 = t1096 + t1260;
t1036 = t954 * t1079;
t1035 = t1079 * t960;
t1034 = -t1159 * t790 - t1234;
t1033 = -t1162 * t790 + t1254;
t1032 = t1153 * t1156 - t1236;
t1031 = t1153 * t1157 + t1211;
t1028 = t961 * t1047;
t1027 = t961 * t1048;
t1025 = t1148 * t954 - t1147;
t788 = t857 * t951 - t904 * t958;
t1024 = g(1) * t788 + g(3) * t848 + t1260;
t1023 = g(1) * t789 + g(2) * t784 + g(3) * t849;
t1021 = g(1) * t857 + g(2) * t851 + g(3) * t896;
t1020 = t1052 - t814;
t1019 = t961 * t1035;
t1010 = (-pkin(2) * t821 + qJD(3) * t906 - t813) * t960;
t1009 = pkin(4) * t666;
t1006 = t1024 - t673;
t1003 = t1159 * t951 + t1295;
t1002 = -g(1) * t904 + g(2) * t897 + g(3) * t1220 + t814;
t999 = t1041 - t1226;
t998 = qJD(5) * t745 + t1034;
t997 = (-pkin(4) * t798 - t743 * t957) * t1153 + t1023;
t996 = -t1280 * t960 + t1221;
t995 = qJD(5) * t896 + t1017;
t993 = -pkin(4) * qJD(6) * t1153 + t1024;
t990 = -t1029 * t1154 + t1066;
t989 = qJD(1) * t1081 + t1279;
t688 = qJD(5) * t794 - t759 * t958 + t792 * t951;
t988 = t1280 + t1027;
t986 = -t1013 * t950 - t1110 * t951;
t985 = pkin(3) * t987;
t983 = t952 * t987;
t980 = qJD(5) * t985;
t979 = t958 * t981;
t972 = t858 * t987 + t981;
t969 = pkin(3) * t1309;
t968 = t951 * t1309;
t963 = qJD(2) ^ 2;
t902 = t1198 * t952 - t1215;
t893 = t1222 * t950 + t1207;
t892 = t1229 * t949 - t1209;
t876 = t896 * t962;
t875 = t895 * t962;
t874 = t896 * t955;
t873 = t895 * t955;
t872 = t1037 * t954;
t871 = t894 * t954;
t855 = -t1217 * t951 + t903 * t958;
t854 = t1217 * t958 + t903 * t951;
t845 = -t1037 * t950 + t1138;
t844 = -t1230 * t952 + t900 * t949;
t827 = t1136 * t951 - t876 * t958;
t826 = -t1136 * t958 - t876 * t951;
t825 = t1142 * t955 - t874 * t958;
t824 = -t1137 * t955 - t874 * t951;
t823 = -t872 * t957 - t1090;
t819 = t1206 * t904 - t905 * t951;
t818 = t1228 * t904 + t905 * t958;
t817 = -t1206 * t897 - t898 * t951;
t816 = -t1228 * t897 + t898 * t958;
t815 = -t1208 * t895 + t896 * t950;
t810 = -t1145 * t957 - t841 * t950;
t808 = -t952 * t1128 - t961 * t1172 - t959 * t1177 + (t1176 * t952 + t1121) * t960;
t787 = t855 * t957 + t902 * t950;
t780 = t847 * t956 + t894 * t949;
t774 = t790 * t1157;
t763 = t827 * t957 - t875 * t950;
t762 = t825 * t957 - t873 * t950;
t757 = -pkin(2) * t1089 - t794 * t950;
t756 = t1232 * t904 + t819 * t957;
t755 = -t1232 * t897 + t817 * t957;
t754 = -t1208 * t856 + t857 * t950;
t753 = -t1208 * t850 + t851 * t950;
t742 = t789 * t957 + t856 * t950;
t737 = t782 * t956 - t848 * t949;
t725 = -t1223 * t906 - t752 * t950;
t722 = t1281 * t958 - t995 * t951;
t721 = t1281 * t951 + t958 * t995;
t708 = -t1247 * t949 + t798 * t956;
t705 = -t1223 * t907 - t744 * t950;
t693 = t742 * t956 - t788 * t949;
t692 = -t742 * t949 - t788 * t956;
t685 = t689 * t1157;
t679 = -qJD(6) * t781 + t722 * t957 + t808 * t950;
t678 = qJD(6) * t782 + t722 * t950 - t808 * t957;
t674 = -t794 * t1159 - t687 * t950 + (-t957 * t1087 + (-t957 * t1126 + (t1162 * t954 - t1176 * t957) * t953) * t952) * pkin(2);
t670 = -t689 * t949 + t690 * t956;
t664 = pkin(4) * t679 + t688;
t663 = -pkin(4) * t721 + (-t1060 + (-t1017 * t952 - t1087) * t950) * pkin(2) + t1075;
t662 = -qJD(7) * t736 + t679 * t956 - t721 * t949;
t661 = t679 * t949 - t848 * t1157 + (qJD(7) * t782 + t721) * t956;
t656 = t1095 * t956 + t667 * t949 - t774;
t654 = t1096 * t956 - t949 * t657 + t685;
t653 = qJD(7) * t669 + t956 * t657 - t949 * t658;
t1 = [t721 * t1290 + (-t1075 * t790 - t778 * t682 + t1038 * t721 + t688 * t747 - t1055 * t667 + t673 * t782 + t743 * t679 - g(1) * t1312 - g(2) * t741 + (t790 * t1060 + (t790 * t1087 + (t1017 * t790 + t1220 * t682) * t952) * t950) * pkin(2)) * MDP(38) + (-t684 * t895 - t721 * t987) * MDP(28) + t1267 * t849 + 0.2e1 * (t1146 * t954 - t1152 * t1180) * MDP(5) + (t906 * t1177 + g(1) * t898 - g(2) * t905 + t814 * t961 + (-t960 * t1028 + (t1280 * t953 + t1199) * t954) * pkin(2)) * MDP(16) + (-t678 * t790 - t682 * t781 - t721 * t745) * MDP(35) + (-t1279 * t1214 + (-qJD(2) * t1081 + t821 * t954) * t953) * MDP(22) + (-MDP(10) * t954 + MDP(9) * t961 + MDP(2)) * (g(1) * t955 - g(2) * t962) + (qJD(2) * t1019 - t1036 * t1175 + t1214 * t975) * MDP(11) + (t679 * t790 + t682 * t782 + t721 * t747) * MDP(34) + (g(1) * t784 - g(2) * t789 - t1055 * t1309 - t1097 * t684 - t1238 * t721 - t673 * t895 - t688 * t987 - t743 * t808) * MDP(30) + (-t1309 * t895 + t808 * t987) * MDP(29) + (-g(1) * t1294 + g(2) * t788 - t1097 * t683 - t1238 * t722 + t1309 * t794 - t672 * t895 - t687 * t987 - t744 * t808) * MDP(31) + (-t1017 * t860 + t1154 * t809 - t1220 * t731 - t896 * t821) * MDP(20) + (t1017 * t858 - t1154 * t808 + t1220 * t732 + t895 * t821) * MDP(21) + (-t683 * MDP(26) + MDP(28) * t1309 - MDP(30) * t1299 + t660 * MDP(37) - t659 * MDP(38) + t1268) * t848 + (g(1) * t851 - g(2) * t857 - t906 * t808 + t814 * t895 + (-t907 * t1225 + (t1154 * t1225 - t960 * t858) * pkin(2)) * t1176 + (-t813 * t1225 + t1015 * t907 + ((t1040 - t732) * t960 + (t858 * qJD(3) + t999) * t953) * pkin(2)) * t954) * MDP(23) + (-g(1) * t850 + g(2) * t856 - t906 * t809 + t814 * t896 + (-t953 * t1202 + (t1154 * t1218 - t960 * t860) * pkin(2)) * t1176 + (-t953 * t1204 - t1016 * t907 + ((-t731 + t1302) * t960 + (t860 * qJD(3) - t1042 - t1203) * t953) * pkin(2)) * t954) * MDP(24) + (t722 * MDP(25) - t721 * MDP(26) + t808 * MDP(27) + MDP(31) * t1272) * t798 + (-t722 * MDP(26) - t808 * MDP(28) + MDP(30) * t1272) * t796 + ((qJD(7) * t1056 - t663 * t949 - t664 * t956) * t1153 - t1057 * t666 - t654 * t781 - t669 * t678 + t674 * t694 + t757 * t656 + t660 * t736 + t705 * t661 - g(1) * (t1294 * t949 - t1311 * t956) - g(2) * t693) * MDP(44) + (-(qJD(7) * t1057 + t663 * t956 - t664 * t949) * t1153 - t1056 * t666 + t653 * t781 + t670 * t678 + t674 * t696 + t757 * t655 + t660 * t737 + t705 * t662 - g(1) * (t1294 * t956 + t1311 * t949) - g(2) * t692) * MDP(45) + (g(1) * t1311 - g(2) * t742 - t1055 * t668 + t673 * t781 + t674 * t790 + t678 * t743 + t682 * t757 + t688 * t745 + t705 * t721) * MDP(37) + (-t907 * t1177 - g(1) * t897 - g(2) * t904 + t813 * t961 + (t1280 * t1214 + (qJD(2) * t1050 - t954 * t908) * t953) * pkin(2)) * MDP(17) + (-t1153 * t678 + t666 * t781) * MDP(43) + (-t1153 * t661 + t656 * t781 + t666 * t736 + t678 * t694) * MDP(42) + (t1153 * t662 - t655 * t781 - t666 * t737 - t678 * t696) * MDP(41) + (qJDD(1) * t947 + 0.2e1 * t1107 * t954) * MDP(4) + (t683 * t895 + t722 * t987) * MDP(27) + t1084 * MDP(3) + qJDD(1) * MDP(1) + (qJDD(2) * t954 + t961 * t963) * MDP(6) + (qJDD(2) * t961 - t954 * t963) * MDP(7) + (-t1047 * t954 - t908 * t961) * MDP(15) + (-t731 * t895 - t732 * t896 - t808 * t860 - t809 * t858) * MDP(19) + (t731 * t896 + t809 * t860) * MDP(18) + (-t667 * t781 - t668 * t782 - t678 * t747 - t679 * t745) * MDP(33) + (t667 * t782 + t679 * t747) * MDP(32) + (-t655 * t736 - t656 * t737 - t661 * t696 - t662 * t694) * MDP(40) + (t655 * t737 + t662 * t696) * MDP(39) + ((-t961 * t1155 + (-qJD(3) * t1079 + t822) * t954) * t960 + (t944 * t1176 + ((t1151 * t953 - t1148) * t954 + (qJD(3) - 0.2e1 * t1178) * t945 + t1044) * t954) * t953) * MDP(12) + (-t953 * t1028 + t822 * t961 + (t996 + t1155) * t954) * MDP(14) + ((-qJD(3) ^ 2 * t953 - qJD(2) * t1079 - t1199) * t954 + (0.2e1 * qJD(1) * t1018 + t1025) * t961) * MDP(13); t1273 * t1284 + (t858 * t887 + t860 * t886 + (t858 * t959 + t860 * t952) * t1173 + (t1250 + t732 * t959 + (-t858 * t952 + t1242) * qJD(4)) * t953) * MDP(19) + (MDP(30) * t1181 - MDP(31) * t1182) * t1238 - t1267 * t1037 + (-t1029 * t1179 + t953 * t988 + t1199) * MDP(14) + (-pkin(2) * t1199 + t907 * t1179 + ((-qJD(1) * t1050 - t1280) * pkin(2) - t1001) * t953) * MDP(17) + (t1182 * MDP(27) + t1181 * MDP(28) - t886 * MDP(29) - t1189 * MDP(30) + MDP(31) * t1306) * t987 + (-t1181 * t790 - t682 * t894) * MDP(36) + (t1196 * t696 + t655 * t780) * MDP(39) + (-t1195 * t696 - t1196 * t694 - t655 * t779 - t656 * t780) * MDP(40) + (-pkin(2) * t1221 - t906 * t1179 + (pkin(2) * t988 + t1001) * t960) * MDP(16) + (-g(1) * t763 - g(2) * t762 - g(3) * t787 - t1181 * t705 + t1189 * t745 + t1194 * t790 - t660 * t894 + t668 * t840 + t673 * t845 + t682 * t810) * MDP(37) + ((-t1091 * t944 - t822) * t953 + (t1298 * t960 + (0.2e1 * t1128 + (t1029 + t930 - t945) * t961) * qJD(1) + t1044) * t960) * MDP(12) + (MDP(30) * t1273 + t1190 * MDP(37) + t1191 * MDP(38)) * t743 + (-t1182 * MDP(26) + MDP(28) * t1273 + MDP(30) * t1271) * t796 + (t1182 * MDP(25) + t1181 * MDP(26) - MDP(27) * t1273 + MDP(31) * t1271) * t798 + (-t887 * t1154 + (-t731 - t1302) * t960 + (t1066 * t952 + t1049 + t1203) * t953) * MDP(20) + (g(1) * t876 + g(2) * t874 - g(3) * t903 + t906 * t886 - t1054 * t1170 + (t953 * t732 + (t1041 + t1287) * t960) * pkin(2) + (t1010 + (-pkin(2) * t989 + t1020) * t953) * t952) * MDP(23) + (t1181 * t745 - t1190 * t790 + t668 * t894 - t682 * t845) * MDP(35) + (-MDP(4) * t954 * t961 + MDP(5) * t1180) * qJD(1) ^ 2 + (t1191 * t747 + t667 * t847) * MDP(32) + (-t1181 * t747 + t1191 * t790 - t667 * t894 + t682 * t847) * MDP(34) + (-t1190 * t747 - t1191 * t745 - t667 * t845 - t668 * t847) * MDP(33) + (-t1173 * t983 + t1305 * t953) * MDP(29) + (MDP(26) * t894 - MDP(27) * t1225 - MDP(31) * t1145) * t683 + (t1225 * t684 - t1309 * t894) * MDP(28) + (-g(1) * t827 - g(2) * t825 - g(3) * t855 - t1145 * t684 + t1225 * t673 + t1299 * t894 + t1309 * t840) * MDP(30) + (g(1) * t826 + g(2) * t824 + g(3) * t854 + t1225 * t672 + t1309 * t841) * MDP(31) + (t886 * t1154 + (t1040 + t732) * t960 + (t999 - t1287) * t953) * MDP(21) + (-g(1) * t875 - g(2) * t873 + g(3) * t902 + t906 * t887 + t1054 * t1172 + (t953 * t731 + (-t1042 + t1049) * t960) * pkin(2) + (t1010 + ((-t1154 * t1178 - t1279) * pkin(2) + t1020) * t953) * t959) * MDP(24) + (-t1053 * t682 + t659 * t894 + t840 * t667 + t673 * t847 - g(1) * (-t827 * t950 - t875 * t957) - g(2) * (-t825 * t950 - t873 * t957) - g(3) * (-t855 * t950 + t902 * t957) + ((t960 * t1110 + (-t1088 + t1119) * t950) * pkin(2) + t1283) * t790 + t1189 * t747 - t1181 * t1038) * MDP(38) + (t1153 * t1196 - t1190 * t696 - t655 * t845 - t666 * t780) * MDP(41) + (-t1153 * t1190 + t666 * t845) * MDP(43) + (-t1153 * t1195 + t1190 * t694 + t656 * t845 + t666 * t779) * MDP(42) + (-(-t764 * t949 - t765 * t956) * t666 - t654 * t845 + t810 * t656 + t660 * t779 - g(1) * (t763 * t956 - t826 * t949) - g(2) * (t762 * t956 - t824 * t949) - g(3) * (t787 * t956 - t854 * t949) - (t1072 * t956 + t1073 * t949) * t1153 + t1195 * t705 + t1194 * t694 - t1190 * t669) * MDP(44) + ((t764 * t956 - t765 * t949) * t666 + t653 * t845 + t810 * t655 + t660 * t780 - g(1) * (-t763 * t949 - t826 * t956) - g(2) * (-t762 * t949 - t824 * t956) - g(3) * (-t787 * t949 - t854 * t956) - (-t1072 * t949 + t1073 * t956) * t1153 + t1196 * t705 + t1194 * t696 + t1190 * t670) * MDP(45) + (-t731 * t1218 + t1317 * t860) * MDP(18) + MDP(7) * t1146 + MDP(6) * t1149 + (-(t1107 * t960 + t1025) * t953 - qJD(1) * t1019 + (t1029 * t953 - t1035) * qJD(3)) * MDP(11) + (g(3) * t954 + t1084 * t961) * MDP(10) + qJDD(2) * MDP(8) + (qJD(1) * t1036 - t1027 * t960 + t996) * MDP(13) + t1001 * MDP(9) + t954 * MDP(15) * t1048 + (t821 * t960 + t953 * t989) * MDP(22); (-t959 * t990 + t1226) * MDP(20) + (t952 * t990 + t1203) * MDP(21) + (t796 * t829 + t798 * t828 + (t796 * t958 + t798 * t951) * t1170 + (t1253 + t684 * t958 + (-t796 * t951 + t1246) * qJD(5)) * t952) * MDP(26) + (-t1154 * t1242 - t1250) * MDP(18) - t1029 ^ 2 * MDP(12) + (t1029 * t1091 + t975) * MDP(13) + (-t1004 * t790 - t1231 * t682) * MDP(36) + (-t1004 * t747 + t1184 * t790 - t1231 * t667 + t682 * t900) * MDP(34) + (t1004 * t745 + t1183 * t790 + t1231 * t668 + t682 * t893) * MDP(35) + (-t683 * t1222 + (t1014 - t829) * t798) * MDP(25) + (-t1275 * t798 + t683 * t959 - t829 * t987 - t1274) * MDP(27) + (t1274 * MDP(30) + ((-t1229 * t790 - t747 * t958) * t1170 + (-t1078 * t958 + (-t1033 + t1168) * t951) * t952) * MDP(38) + ((-t1233 * t790 - t745 * t958) * t1170 + (-t1077 * t958 + t951 * t998) * t952) * MDP(37) + (-t1143 * t656 + t694 * t986) * MDP(44) + (-t1143 * t655 + t696 * t986) * MDP(45)) * pkin(3) + (g(1) * t818 + g(2) * t816 - g(3) * t871 - t1118 * t951 - t1124 * t985 - t1222 * t980 + t1231 * t969 + t1238 * t829 + t1239 * t798 + t1275 * t744 + t1300 * t958 - t672 * t959 + t752 * t987) * MDP(31) + (-g(1) * t819 - g(2) * t817 + g(3) * t872 + t1118 * t958 + t1238 * t828 + t1239 * t796 + t1275 * t743 + t1300 * t951 - t673 * t959 + t751 * t987) * MDP(30) + (t1193 * t696 + t655 * t846) * MDP(39) + (-t1192 * t696 - t1193 * t694 - t655 * t844 - t656 * t846) * MDP(40) + (t1275 * t796 - t1305 * t951 - t684 * t959 + t828 * t987 + t952 * t979) * MDP(28) + ((t1154 * t858 - t731) * t959 + (t1154 * t860 + t732) * t952) * MDP(19) + (t1029 * t983 - t1309 * t959 - t952 * t982) * MDP(29) + (MDP(11) * t1029 + MDP(12) * t1079 + MDP(20) * t860 - MDP(21) * t858 + MDP(22) * t1154) * t1079 + (t1002 * t959 + t1270 * t952 - t907 * t858) * MDP(23) + (-t1002 * t952 + t1270 * t959 - t907 * t860) * MDP(24) + (-t944 * qJD(3) + (t1079 - t944) * t1178 + t1008) * MDP(14) + (t659 * t1231 + t673 * t900 + t1188 * t790 - t751 * t747 - g(1) * (t1223 * t904 - t819 * t950) - g(2) * (-t1223 * t897 - t817 * t950) - g(3) * (t872 * t950 - t1089) + t1184 * t743 - t1004 * t1038) * MDP(38) + (-t1153 * t1192 - t1183 * t694 - t656 * t893 + t666 * t844) * MDP(42) + (t1153 * t1193 + t1183 * t696 + t655 * t893 - t666 * t846) * MDP(41) + (t1153 * t1183 - t666 * t893) * MDP(43) + (-(-t861 * t956 - t889 * t949) * t666 + t654 * t893 + t660 * t844 - t725 * t694 - g(1) * (t756 * t956 - t818 * t949) - g(2) * (t755 * t956 - t816 * t949) - g(3) * (t823 * t956 + t871 * t949) - (t1070 * t956 + t1071 * t949) * t1153 + t1192 * t705 + t1183 * t669) * MDP(44) + ((-t861 * t949 + t889 * t956) * t666 - t653 * t893 + t660 * t846 - t725 * t696 - g(1) * (-t756 * t949 - t818 * t956) - g(2) * (-t755 * t949 - t816 * t956) - g(3) * (-t823 * t949 + t871 * t956) - (-t1070 * t949 + t1071 * t956) * t1153 + t1193 * t705 - t1183 * t670) * MDP(45) + (t1184 * t747 + t667 * t900) * MDP(32) + (t1183 * t747 - t1184 * t745 + t667 * t893 - t668 * t900) * MDP(33) + (-g(1) * t756 - g(2) * t755 - g(3) * t823 - t1004 * t705 - t1183 * t743 - t660 * t1231 - t673 * t893 - t725 * t790 - t745 * t751) * MDP(37) + (-t1052 + t1002) * MDP(16) + (g(1) * t905 + g(2) * t898 + g(3) * t1214 - t906 * t1091 + t813) * MDP(17) - t908 * MDP(15); (-t1021 * t957 - t743 * t761 + t776 * t747) * MDP(38) + (t1246 * t987 + t1253) * MDP(25) + (t1202 * t798 + t777 * t987) * MDP(31) + (-t1029 * t858 + t1101) * MDP(20) - t858 ^ 2 * MDP(19) - t968 * MDP(27) + (t972 * MDP(27) + (t969 + t1277) * MDP(31) + t1269 * MDP(30) + (-t1022 * t950 + t743 * t1164 + t659) * MDP(38) + (t1167 * t743 - t660) * MDP(37) + (t683 - t1291) * MDP(26) + ((t1168 - t1254) * MDP(38) + t998 * MDP(37) + (MDP(38) * qJD(6) * t790 - MDP(44) * t656 - MDP(45) * t655) * t950) * pkin(3) - t1268) * t958 + (t745 * t761 + t747 * t760 + (-t745 * t957 - t747 * t950) * t1163) * MDP(33) + (t667 * t1229 + t1301 * t747) * MDP(32) + (t1186 * t696 + t655 * t899) * MDP(39) + (-t1185 * t696 - t1186 * t694 - t655 * t892 - t656 * t899) * MDP(40) + (-g(1) * t754 - g(2) * t753 - g(3) * t815 - t743 * t760 + t745 * t776) * MDP(37) + (-t1029 * t1238 - t906 * t858 + t1021 + t1204) * MDP(24) + (-t972 * MDP(28) + (-t1227 + t980 - t1269) * MDP(31) + t1277 * MDP(30) + (t1159 * t670 + t653 * t950) * MDP(45) + (-t1159 * t669 - t654 * t950) * MDP(44) + (pkin(3) * t1078 + t1038 * t987 - t1162 * t743 + t673 * t957) * MDP(38) + (-t1255 - t668 * t957 + (t745 * t950 - t747 * t957) * qJD(6)) * MDP(33) + (pkin(3) * t1077 + t1159 * t743 + t673 * t950 + t705 * t987) * MDP(37) + t987 * t1290 + (t747 * t987 + t1033) * MDP(34) + (-t798 * t987 - t684) * MDP(26) + (-t745 * t987 + t1034) * MDP(35)) * t951 + (t1029 * t1202 + t1022 + t1227) * MDP(23) - t966 * MDP(28) + (MDP(34) * t1310 - MDP(35) * t1295 - t748 * MDP(37) + t1187 * MDP(38)) * t790 + (MDP(18) * t858 + MDP(19) * t860 + MDP(21) * t1154 + t906 * MDP(23) - t798 * MDP(27) + t796 * MDP(28) - MDP(29) * t987 + t743 * MDP(30) + t1284) * t860 - t732 * MDP(21) + (t1202 * t796 + t1222 * t813 - t776 * t987 + (t968 - t979) * pkin(3)) * MDP(30) + (-t1003 * t696 + t1153 * t1186 - t1233 * t655 - t666 * t899) * MDP(41) + (-t1003 * t1153 + t1233 * t666) * MDP(43) + (t1003 * t694 - t1153 * t1185 + t1233 * t656 + t666 * t892) * MDP(42) + ((t910 * t956 - t912 * t949) * t666 + t660 * t899 - g(1) * (t1230 * t856 - t754 * t949) - g(2) * (t1230 * t850 - t753 * t949) - g(3) * (t1230 * t895 - t815 * t949) - (t1068 * t956 - t1069 * t949) * t1153 + t1186 * t705 + t1295 * t670 + t1293 * t696) * MDP(45) + (-(-t910 * t949 - t912 * t956) * t666 + t660 * t892 - g(1) * (t1235 * t856 + t754 * t956) - g(2) * (t1235 * t850 + t753 * t956) - g(3) * (t1235 * t895 + t815 * t956) - (t1068 * t949 + t1069 * t956) * t1153 + t1185 * t705 - t1295 * t669 + t1293 * t694) * MDP(44) - t821 * MDP(22); -t796 ^ 2 * MDP(26) + (t683 + t1291) * MDP(27) - t1102 * MDP(28) - t1309 * MDP(29) + (t744 * t858 + t1024 - t1103) * MDP(30) + (-t796 * t1238 - t743 * t858 + t1023 - t1058) * MDP(31) + (t1098 * t747 + t1255) * MDP(32) + ((t667 - t1249) * t957 + (-t668 - t1248) * t950) * MDP(33) + (t1098 * t790 + t1234) * MDP(34) + (-t790 ^ 2 * t950 + t1254) * MDP(35) + (t1006 * t957 - t744 * t745) * MDP(37) + (-t1006 * t950 - t744 * t747) * MDP(38) + (t655 * t950 * t956 + (-t1157 * t950 - t1074) * t696) * MDP(39) + (t694 * t709 + t696 * t708 + (-t694 * t956 - t696 * t949) * t1159 + (-t1256 - t656 * t956 + (t694 * t949 - t1252) * qJD(7)) * t950) * MDP(40) + (t655 * t957 - t1074 * t1153 + (-t696 * t790 - t1031) * t950) * MDP(41) + (-t656 * t957 - (t1159 * t949 - t708) * t1153 + (t694 * t790 - t1032) * t950) * MDP(42) + (-t1153 * t790 * t950 - t666 * t957) * MDP(43) + (t956 * t1251 - t705 * t708 + t997 * t949 + (t705 * t949 * qJD(6) + t956 * t993 + t654) * t957 + (pkin(4) * t1031 + t1156 * t705 + t949 * t660 - t669 * t790 - t743 * t694) * t950) * MDP(44) + (-t949 * t1251 - t705 * t709 + t997 * t956 + (t1160 * t705 - t949 * t993 - t653) * t957 + (pkin(4) * t1032 - t1157 * t705 + t660 * t956 + t670 * t790 - t743 * t696) * t950) * MDP(45) + (MDP(25) * t796 + MDP(26) * t798 + MDP(28) * t858 + MDP(30) * t1238 - MDP(34) * t747 + MDP(35) * t745 - MDP(37) * t705 - MDP(38) * t1038 - t1290) * t798; -t745 ^ 2 * MDP(33) + (t667 + t1249) * MDP(34) + (-t1104 + t1248) * MDP(35) + t1286 + (-t1038 * t790 + t1007) * MDP(37) + (g(1) * t742 + g(3) * t782 + t705 * t790 + t743 * t745 + t1261 - t659) * MDP(38) + (-t1153 * t1252 - t1256) * MDP(39) + ((-t655 + t1304) * t956 + (t656 + t1303) * t949) * MDP(40) + (-t1285 * t956 + t1236) * MDP(41) + (t1285 * t949 + t1211) * MDP(42) + (-t1009 * t949 - t1038 * t694 + t1296 * t956) * MDP(44) + (-t1009 * t956 - t1038 * t696 - t1296 * t949) * MDP(45) + (MDP(32) * t745 + MDP(33) * t747 - MDP(35) * qJD(6) - MDP(37) * t743 + MDP(41) * t696 - MDP(42) * t694 + MDP(43) * t1153 + MDP(44) * t669 - MDP(45) * t670) * t747; t696 * t694 * MDP(39) + (-t694 ^ 2 + t696 ^ 2) * MDP(40) + (t665 + t1304) * MDP(41) + (t774 + t1303) * MDP(42) - t666 * MDP(43) + (-g(1) * t692 + g(3) * t736 + t1153 * t670 - t705 * t696 + t685) * MDP(44) + (g(1) * t693 + g(3) * t737 + t1153 * t669 + t705 * t694) * MDP(45) + (-MDP(41) * t1095 - t667 * MDP(42) + MDP(44) * t1105 - MDP(45) * t1039) * t949 + (-qJD(7) * t790 * MDP(41) - t1095 * MDP(42) + t1039 * MDP(44) + (qJD(7) * t689 + t1105) * MDP(45)) * t956;];
tau  = t1;
