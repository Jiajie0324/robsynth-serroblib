% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S7RRRRRRR1
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [7x1]
%   Generalized joint coordinates (joint angles)
% qJD [7x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S7RRRRRRR1_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[d1,d3,d5,d7]';
% 
% Output:
% JaD_rot [3x7]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 17:10
% Revision: eb1f267a533306f0f157b6776e21de13647fd8af (2019-10-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S7RRRRRRR1_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(7,1),zeros(7,1),uint8(0),zeros(4,1)}
assert(isreal(qJ) && all(size(qJ) == [7 1]), ...
  'S7RRRRRRR1_jacobiaD_rot_sym_varpar: qJ has to be [7x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [7 1]), ...
  'S7RRRRRRR1_jacobiaD_rot_sym_varpar: qJD has to be [7x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S7RRRRRRR1_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'S7RRRRRRR1_jacobiaD_rot_sym_varpar: pkin has to be [4x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 17:10:04
	% EndTime: 2019-10-10 17:10:04
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 17:10:04
	% EndTime: 2019-10-10 17:10:04
	% DurationCPUTime: 0.03s
	% Computational Cost: add. (9->0), mult. (37->0), div. (15->0), fcn. (22->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 17:10:04
	% EndTime: 2019-10-10 17:10:04
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 17:10:04
	% EndTime: 2019-10-10 17:10:05
	% DurationCPUTime: 0.99s
	% Computational Cost: add. (624->92), mult. (2519->212), div. (480->12), fcn. (2968->9), ass. (0->92)
	t123 = sin(qJ(1));
	t116 = t123 ^ 2;
	t122 = sin(qJ(2));
	t115 = t122 ^ 2;
	t125 = cos(qJ(2));
	t118 = 0.1e1 / t125 ^ 2;
	t168 = t115 * t118;
	t111 = t116 * t168 + 0.1e1;
	t114 = t122 * t115;
	t117 = 0.1e1 / t125;
	t167 = t117 * t122;
	t134 = qJD(2) * (t114 * t117 * t118 + t167);
	t126 = cos(qJ(1));
	t159 = qJD(1) * t126;
	t146 = t123 * t159;
	t175 = 0.1e1 / t111 ^ 2 * (t116 * t134 + t146 * t168);
	t188 = -0.2e1 * t175;
	t108 = 0.1e1 / t111;
	t142 = 0.1e1 + t168;
	t185 = t123 * t142;
	t96 = t108 * t185;
	t187 = -t123 * t96 + 0.1e1;
	t121 = sin(qJ(3));
	t124 = cos(qJ(3));
	t161 = t125 * t126;
	t148 = t124 * t161;
	t105 = -t123 * t121 + t148;
	t100 = 0.1e1 / t105 ^ 2;
	t163 = t123 * t124;
	t104 = t121 * t161 + t163;
	t170 = t104 * t124;
	t99 = 0.1e1 / t105;
	t174 = t121 * t99;
	t135 = t100 * t170 - t174;
	t98 = t104 ^ 2;
	t97 = t100 * t98 + 0.1e1;
	t94 = 0.1e1 / t97;
	t186 = t135 * t94;
	t139 = qJD(1) * t125 + qJD(3);
	t156 = qJD(2) * t126;
	t184 = t122 * t156 + t139 * t123;
	t164 = t123 * t122;
	t110 = atan2(t164, t125);
	t107 = cos(t110);
	t106 = sin(t110);
	t150 = t106 * t164;
	t92 = t107 * t125 + t150;
	t89 = 0.1e1 / t92;
	t90 = 0.1e1 / t92 ^ 2;
	t183 = t108 - 0.1e1;
	t120 = t126 ^ 2;
	t157 = qJD(2) * t125;
	t151 = t90 * t157;
	t147 = t122 * t159;
	t158 = qJD(2) * t123;
	t169 = t107 * t122;
	t145 = t118 * t158;
	t83 = ((t123 * t157 + t147) * t117 + t115 * t145) * t108;
	t78 = (t123 * t83 - qJD(2)) * t169 + (t147 + (-t83 + t158) * t125) * t106;
	t181 = t78 * t89 * t90;
	t88 = t115 * t120 * t90 + 0.1e1;
	t182 = (t120 * t122 * t151 + (-t120 * t181 - t90 * t146) * t115) / t88 ^ 2;
	t171 = t100 * t104;
	t140 = qJD(3) * t125 + qJD(1);
	t166 = t121 * t126;
	t85 = -t184 * t124 - t140 * t166;
	t177 = t99 * t100 * t85;
	t84 = -qJD(3) * t148 + t184 * t121 - t124 * t159;
	t180 = (-t84 * t171 - t98 * t177) / t97 ^ 2;
	t86 = 0.1e1 / t88;
	t179 = t86 * t90;
	t178 = t89 * t86;
	t172 = qJD(2) * t96;
	t165 = t122 * t126;
	t162 = t123 * t125;
	t160 = qJD(1) * t123;
	t155 = -0.2e1 * t181;
	t154 = -0.2e1 * t180;
	t153 = t89 * t182;
	t152 = t104 * t177;
	t149 = t108 * t115 * t117;
	t143 = -0.2e1 * t90 * t182;
	t141 = t117 * t188;
	t138 = t123 * t149;
	t137 = t142 * t126;
	t136 = t139 * t126;
	t103 = -t124 * t162 - t166;
	t102 = -t121 * t162 + t124 * t126;
	t82 = (-t183 * t122 * t106 + t107 * t138) * t126;
	t81 = -t187 * t169 + (t123 - t96) * t125 * t106;
	t79 = t185 * t188 + (qJD(1) * t137 + 0.2e1 * t123 * t134) * t108;
	t1 = [t141 * t165 + (qJD(2) * t137 - t160 * t167) * t108, t79, 0, 0, 0, 0, 0; (t157 * t178 + (-0.2e1 * t153 + (-qJD(1) * t82 - t78) * t179) * t122) * t123 + (t82 * t143 * t122 + (t82 * t151 + (t82 * t155 + ((0.2e1 * t122 * t175 - t83 * t138 - t183 * t157) * t106 + (t115 * t123 * t141 + t122 * t83 + (t114 * t145 + (-t83 + 0.2e1 * t158) * t122) * t108) * t107) * t90 * t126) * t122 + (t89 + ((-t116 + t120) * t107 * t149 + t183 * t150) * t90) * t122 * qJD(1)) * t86) * t126, (t160 * t178 + (0.2e1 * t153 + (qJD(2) * t81 + t78) * t179) * t126) * t125 + (t81 * t126 * t143 + (t89 * t156 + ((t123 * t79 + t159 * t96) * t107 + (t187 * t83 - t158 + t172) * t106) * t90 * t165 + (t126 * t155 - t90 * t160) * t81) * t86 + ((-t79 + t159) * t106 + (-t83 * t96 - qJD(2) + (t83 + t172) * t123) * t107) * t161 * t179) * t122, 0, 0, 0, 0, 0; 0.2e1 * (-t102 * t99 + t103 * t171) * t180 + (0.2e1 * t103 * t152 - t140 * t99 * t163 + (t122 * t158 - t136) * t174 + (-t102 * t85 + t103 * t84 + t136 * t170 - (qJD(2) * t122 * t124 + t140 * t121) * t104 * t123) * t100) * t94, t125 * t156 * t186 + (-t160 * t186 + (t135 * t154 + ((-qJD(3) * t99 - 0.2e1 * t152) * t124 + (-t124 * t84 + (-qJD(3) * t104 + t85) * t121) * t100) * t94) * t126) * t122, t154 + 0.2e1 * (-t100 * t84 * t94 + (-t100 * t180 - t94 * t177) * t104) * t104, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 17:10:04
	% EndTime: 2019-10-10 17:10:06
	% DurationCPUTime: 1.72s
	% Computational Cost: add. (2534->146), mult. (7495->313), div. (1129->14), fcn. (9361->11), ass. (0->130)
	t197 = cos(qJ(3));
	t193 = sin(qJ(3));
	t199 = cos(qJ(1));
	t252 = t199 * t193;
	t195 = sin(qJ(1));
	t198 = cos(qJ(2));
	t254 = t195 * t198;
	t173 = t197 * t254 + t252;
	t174 = t195 * t197 + t198 * t252;
	t194 = sin(qJ(2));
	t257 = t194 * t195;
	t227 = qJD(2) * t257;
	t152 = t174 * qJD(1) + t173 * qJD(3) - t193 * t227;
	t230 = t193 * t254;
	t251 = t199 * t197;
	t172 = t230 - t251;
	t170 = t172 ^ 2;
	t187 = 0.1e1 / t193 ^ 2;
	t190 = 0.1e1 / t194 ^ 2;
	t261 = t187 * t190;
	t167 = t170 * t261 + 0.1e1;
	t186 = 0.1e1 / t193;
	t188 = t186 * t187;
	t189 = 0.1e1 / t194;
	t191 = t189 * t190;
	t232 = t172 * t261;
	t244 = qJD(3) * t197;
	t247 = qJD(2) * t198;
	t281 = (t152 * t232 + (-t187 * t191 * t247 - t188 * t190 * t244) * t170) / t167 ^ 2;
	t260 = t187 * t197;
	t216 = t172 * t260 - t173 * t186;
	t280 = t189 * t216;
	t255 = t194 * t199;
	t176 = -t195 * t193 + t198 * t251;
	t192 = sin(qJ(4));
	t196 = cos(qJ(4));
	t161 = t176 * t196 + t192 * t255;
	t156 = 0.1e1 / t161 ^ 2;
	t160 = t176 * t192 - t196 * t255;
	t253 = t196 * t160;
	t155 = 0.1e1 / t161;
	t259 = t192 * t155;
	t217 = -t156 * t253 + t259;
	t279 = -qJD(4) * t197 + qJD(2);
	t278 = -0.2e1 * t281;
	t258 = t194 * t193;
	t164 = atan2(t172, -t258);
	t163 = cos(t164);
	t162 = sin(t164);
	t268 = t162 * t172;
	t146 = -t163 * t258 + t268;
	t142 = 0.1e1 / t146;
	t143 = 0.1e1 / t146 ^ 2;
	t171 = t174 ^ 2;
	t141 = t171 * t143 + 0.1e1;
	t223 = qJD(1) * t198 + qJD(3);
	t246 = qJD(2) * t199;
	t212 = t194 * t246 + t223 * t195;
	t243 = qJD(3) * t198;
	t226 = t197 * t243;
	t248 = qJD(1) * t199;
	t150 = t212 * t193 - t197 * t248 - t199 * t226;
	t271 = t150 * t143;
	t165 = 0.1e1 / t167;
	t213 = -t193 * t247 - t194 * t244;
	t262 = t186 * t189;
	t235 = t152 * t262;
	t134 = (-t213 * t232 - t235) * t165;
	t211 = -t134 * t172 - t213;
	t129 = (t134 * t258 + t152) * t162 - t211 * t163;
	t144 = t142 * t143;
	t276 = t129 * t144;
	t277 = (-t171 * t276 - t174 * t271) / t141 ^ 2;
	t249 = qJD(1) * t195;
	t209 = qJD(4) * t176 + t194 * t249 - t198 * t246;
	t151 = (qJD(1) + t243) * t252 + t212 * t197;
	t242 = qJD(4) * t194;
	t220 = t199 * t242 - t151;
	t136 = t220 * t192 + t209 * t196;
	t154 = t160 ^ 2;
	t149 = t154 * t156 + 0.1e1;
	t270 = t156 * t160;
	t137 = -t209 * t192 + t220 * t196;
	t157 = t155 * t156;
	t273 = t137 * t157;
	t275 = (t136 * t270 - t154 * t273) / t149 ^ 2;
	t274 = t136 * t156;
	t272 = t143 * t174;
	t256 = t194 * t197;
	t215 = -t192 * t198 + t196 * t256;
	t169 = t215 * t199;
	t269 = t160 * t169;
	t267 = t162 * t174;
	t266 = t162 * t194;
	t265 = t163 * t172;
	t264 = t163 * t174;
	t263 = t163 * t198;
	t231 = t186 * t190 * t198;
	t218 = t172 * t231 + t195;
	t145 = t218 * t165;
	t250 = t145 - t195;
	t245 = qJD(3) * t193;
	t240 = -0.2e1 * t277;
	t239 = 0.2e1 * t275;
	t238 = 0.2e1 * t281;
	t237 = -0.2e1 * t144 * t174;
	t236 = t143 * t267;
	t234 = t160 * t273;
	t233 = t172 * t262;
	t228 = t190 * t247;
	t225 = t142 * t240;
	t224 = t143 * t240;
	t221 = t238 * t262;
	t153 = -qJD(3) * t230 - t193 * t249 - t197 * t227 + t223 * t251;
	t219 = -t195 * t242 - t153;
	t214 = t192 * t256 + t196 * t198;
	t210 = -qJD(4) * t173 + t194 * t248 + t195 * t247;
	t208 = t150 * t262 + (t187 * t189 * t244 + t186 * t228) * t174;
	t168 = t214 * t199;
	t159 = -t173 * t196 - t192 * t257;
	t158 = -t173 * t192 + t196 * t257;
	t147 = 0.1e1 / t149;
	t139 = 0.1e1 / t141;
	t138 = t165 * t280;
	t133 = (t162 + (-t163 * t233 - t162) * t165) * t174;
	t132 = t145 * t265 + (t250 * t266 - t263) * t193;
	t130 = -t163 * t256 + t162 * t173 + (t162 * t258 + t265) * t138;
	t128 = t218 * t278 + (t152 * t231 + t248 + (-t226 * t261 + (-0.2e1 * t191 * t198 ^ 2 - t189) * t186 * qJD(2)) * t172) * t165;
	t126 = t278 * t280 + (-t216 * t228 + (t152 * t260 - t153 * t186 + (t173 * t260 + (-0.2e1 * t188 * t197 ^ 2 - t186) * t172) * qJD(3)) * t189) * t165;
	t1 = [t208 * t165 + t174 * t221, t128, t126, 0, 0, 0, 0; t172 * t225 + (t152 * t142 + (-t129 * t172 - t133 * t150) * t143) * t139 + (t133 * t224 + (-0.2e1 * t133 * t276 + (t150 * t165 - t150 + (t134 * t165 * t233 + t238) * t174) * t143 * t162 + ((t172 * t221 + t134) * t272 + ((-t134 - t235) * t174 + t208 * t172) * t143 * t165) * t163) * t139) * t174, t132 * t174 * t224 + ((t128 * t265 + (-t134 * t268 + t152 * t163) * t145) * t272 + (t129 * t237 - t271) * t132 + (t142 * t255 + (t145 * t266 - t162 * t257 - t263) * t272) * t244) * t139 + (t225 * t255 + ((t142 * t246 + (t250 * qJD(2) + t134) * t236) * t198 + (-t142 * t249 + (-t199 * t129 + (t128 - t248) * t267 + (t250 * t134 + qJD(2)) * t264) * t143) * t194) * t139) * t193, 0.2e1 * (-t130 * t272 + t142 * t176) * t277 + (-t130 * t271 + t151 * t142 + (t130 * t237 + t176 * t143) * t129 + (-t197 * t247 + t194 * t245 + t126 * t172 + t138 * t152 + (t138 * t258 + t173) * t134) * t143 * t264 + (t153 + (t126 * t193 + t134 * t197) * t194 + t211 * t138) * t236) * t139, 0, 0, 0, 0; (-t155 * t158 + t159 * t270) * t239 + (0.2e1 * t159 * t234 + t219 * t259 + t210 * t155 * t196 + (t210 * t160 * t192 - t159 * t136 - t158 * t137 - t219 * t253) * t156) * t147, (t155 * t168 - t156 * t269) * t239 + (t169 * t274 + (t168 * t156 - 0.2e1 * t157 * t269) * t137 + (t214 * t155 - t215 * t270) * t249 + (((t192 * t245 + t279 * t196) * t155 - (-t279 * t192 + t196 * t245) * t270) * t194 + t217 * t198 * (-qJD(2) * t197 + qJD(4))) * t199) * t147, t217 * t174 * t239 + (t217 * t150 + ((-qJD(4) * t155 - 0.2e1 * t234) * t196 + (t136 * t196 + (-qJD(4) * t160 + t137) * t192) * t156) * t174) * t147, -0.2e1 * t275 + 0.2e1 * (t147 * t274 + (-t147 * t273 - t156 * t275) * t160) * t160, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 17:10:05
	% EndTime: 2019-10-10 17:10:09
	% DurationCPUTime: 3.56s
	% Computational Cost: add. (6638->201), mult. (19789->386), div. (992->12), fcn. (24542->13), ass. (0->158)
	t307 = sin(qJ(4));
	t308 = sin(qJ(3));
	t309 = sin(qJ(2));
	t375 = qJD(3) * t309;
	t314 = cos(qJ(2));
	t313 = cos(qJ(3));
	t344 = qJD(2) * t313 - qJD(4);
	t411 = t344 * t314;
	t417 = (-t308 * t375 + t411) * t307;
	t310 = sin(qJ(1));
	t377 = qJD(2) * t314;
	t315 = cos(qJ(1));
	t382 = t309 * t315;
	t416 = qJD(1) * t382 + t310 * t377;
	t312 = cos(qJ(4));
	t345 = qJD(4) * t313 - qJD(2);
	t414 = (qJD(3) * t308 * t312 + t307 * t345) * t309 - t312 * t411;
	t380 = t313 * t314;
	t386 = t308 * t315;
	t291 = t310 * t380 + t386;
	t384 = t309 * t312;
	t274 = t291 * t307 - t310 * t384;
	t383 = t309 * t313;
	t288 = t307 * t383 + t312 * t314;
	t267 = atan2(-t274, t288);
	t255 = sin(t267);
	t256 = cos(t267);
	t236 = -t255 * t274 + t256 * t288;
	t234 = 0.1e1 / t236 ^ 2;
	t379 = t315 * t313;
	t381 = t310 * t308;
	t294 = t314 * t379 - t381;
	t279 = t294 * t307 - t312 * t382;
	t273 = t279 ^ 2;
	t232 = t234 * t273 + 0.1e1;
	t346 = qJD(1) * t314 + qJD(3);
	t376 = qJD(2) * t315;
	t323 = t309 * t376 + t310 * t346;
	t374 = qJD(3) * t314;
	t347 = qJD(1) + t374;
	t263 = t313 * t323 + t347 * t386;
	t280 = t294 * t312 + t307 * t382;
	t378 = qJD(1) * t310;
	t329 = t309 * t378 - t314 * t376;
	t240 = qJD(4) * t280 - t263 * t307 + t329 * t312;
	t400 = t240 * t234;
	t272 = t274 ^ 2;
	t286 = 0.1e1 / t288 ^ 2;
	t266 = t272 * t286 + 0.1e1;
	t257 = 0.1e1 / t266;
	t352 = t308 * t374;
	t385 = t309 * t310;
	t357 = qJD(2) * t385;
	t265 = -t308 * t378 - t310 * t352 - t313 * t357 + t346 * t379;
	t276 = t291 * t312 + t307 * t385;
	t242 = qJD(4) * t276 + t265 * t307 - t416 * t312;
	t339 = t345 * t312;
	t260 = t309 * t339 + t417;
	t285 = 0.1e1 / t288;
	t390 = t274 * t286;
	t335 = -t242 * t285 + t260 * t390;
	t223 = t335 * t257;
	t340 = -t255 * t288 - t256 * t274;
	t217 = t223 * t340 - t242 * t255 + t256 * t260;
	t233 = 0.1e1 / t236;
	t235 = t233 * t234;
	t405 = t217 * t235;
	t370 = 0.2e1 * (-t273 * t405 + t279 * t400) / t232 ^ 2;
	t413 = t260 * t286;
	t290 = t314 * t381 - t379;
	t387 = t308 * t309;
	t361 = t274 * t387;
	t330 = -t285 * t290 + t286 * t361;
	t412 = t307 * t330;
	t289 = -t307 * t314 + t312 * t383;
	t283 = t289 * t315;
	t351 = t313 * t375;
	t409 = -qJD(5) * t283 + t308 * t329 - t315 * t351;
	t373 = qJD(4) * t309;
	t243 = t307 * (-qJD(4) * t291 + t416) + t312 * (t310 * t373 + t265);
	t306 = sin(qJ(5));
	t311 = cos(qJ(5));
	t331 = t310 * t313 + t314 * t386;
	t254 = t280 * t311 - t306 * t331;
	t248 = 0.1e1 / t254;
	t249 = 0.1e1 / t254 ^ 2;
	t408 = -0.2e1 * t274;
	t407 = 0.2e1 * t279;
	t241 = (t315 * t373 - t263) * t312 + (-qJD(4) * t294 - t329) * t307;
	t262 = t308 * t323 - t347 * t379;
	t225 = qJD(5) * t254 + t241 * t306 - t262 * t311;
	t253 = t280 * t306 + t311 * t331;
	t247 = t253 ^ 2;
	t239 = t247 * t249 + 0.1e1;
	t397 = t249 * t253;
	t371 = qJD(5) * t253;
	t226 = t241 * t311 + t262 * t306 - t371;
	t402 = t226 * t248 * t249;
	t404 = (t225 * t397 - t247 * t402) / t239 ^ 2;
	t392 = t285 * t413;
	t403 = (t242 * t390 - t272 * t392) / t266 ^ 2;
	t401 = t234 * t279;
	t399 = t248 * t306;
	t398 = t248 * t311;
	t396 = t253 * t306;
	t395 = t253 * t311;
	t394 = t255 * t279;
	t393 = t256 * t279;
	t391 = t274 * t285;
	t389 = t331 * t307;
	t388 = t331 * t312;
	t372 = qJD(4) * t312;
	t369 = -0.2e1 * t404;
	t368 = 0.2e1 * t404;
	t367 = -0.2e1 * t403;
	t366 = t235 * t407;
	t365 = t285 * t403;
	t364 = t253 * t402;
	t363 = t234 * t394;
	t362 = t234 * t393;
	t360 = t308 * t382;
	t350 = 0.2e1 * t364;
	t349 = t392 * t408;
	t348 = t217 * t366;
	t341 = -qJD(5) * t388 - t263;
	t252 = -t276 * t311 + t290 * t306;
	t251 = -t276 * t306 - t290 * t311;
	t336 = qJD(5) * t360 + t289 * t378 + t414 * t315;
	t334 = t395 * t249 - t399;
	t333 = -t276 * t285 + t289 * t390;
	t281 = t288 * t310;
	t292 = t307 * t380 - t384;
	t332 = t281 * t285 + t292 * t390;
	t328 = -t308 * t377 - t351;
	t326 = -t255 + (t256 * t391 + t255) * t257;
	t325 = qJD(1) * t288;
	t324 = qJD(4) * t389 - qJD(5) * t294 + t262 * t312;
	t282 = t288 * t315;
	t271 = -t283 * t311 + t306 * t360;
	t270 = -t283 * t306 - t311 * t360;
	t269 = -t294 * t306 - t311 * t388;
	t268 = t294 * t311 - t306 * t388;
	t264 = qJD(1) * t331 + qJD(3) * t291 - t308 * t357;
	t259 = t314 * t339 + (-t309 * t344 - t352) * t307;
	t246 = t260 * t310 + t315 * t325;
	t237 = 0.1e1 / t239;
	t230 = 0.1e1 / t232;
	t229 = t257 * t412;
	t228 = t332 * t257;
	t227 = t333 * t257;
	t222 = t326 * t279;
	t221 = (t255 * t290 - t256 * t387) * t307 - t340 * t229;
	t219 = t228 * t340 + t255 * t281 + t256 * t292;
	t218 = t227 * t340 - t255 * t276 + t256 * t289;
	t216 = t332 * t367 + (t292 * t349 + t246 * t285 + (t242 * t292 + t259 * t274 - t260 * t281) * t286) * t257;
	t214 = t333 * t367 + (t289 * t349 - t243 * t285 + (t242 * t289 + t260 * t276 - t274 * t414) * t286) * t257;
	t213 = 0.2e1 * t403 * t412 + (-t330 * t372 + (0.2e1 * t361 * t392 + t264 * t285 + (-t242 * t387 - t260 * t290 + t274 * t328) * t286) * t307) * t257;
	t1 = [t365 * t407 + (-t240 * t285 + t279 * t413) * t257, t216, t213, t214, 0, 0, 0; t274 * t233 * t370 + (-t242 * t233 + (t217 * t274 - t222 * t240) * t234) * t230 + (t222 * t234 * t370 + (0.2e1 * t222 * t405 - (-t223 * t257 * t391 + t367) * t363 - (t365 * t408 - t223 + (t223 - t335) * t257) * t362 - t326 * t400) * t230) * t279, (t219 * t401 + t233 * t282) * t370 + (t219 * t348 + (t282 * t217 - t219 * t240 - (-t216 * t274 - t228 * t242 + t259 + (-t228 * t288 + t281) * t223) * t393 - (-t216 * t288 - t228 * t260 + t246 + (t228 * t274 - t292) * t223) * t394) * t234 + (t310 * t325 + (-t345 * t384 - t417) * t315) * t233) * t230, (t221 * t401 + t233 * t389) * t370 + (-t221 * t400 + (t262 * t307 - t331 * t372) * t233 + (t221 * t366 + t234 * t389) * t217 - (t290 * t372 - t213 * t288 + t229 * t260 + t264 * t307 + (-t229 * t274 + t307 * t387) * t223) * t363 - (-t372 * t387 - t213 * t274 - (-t223 * t288 - t242) * t229 + (t223 * t290 + t328) * t307) * t362) * t230, (t218 * t401 - t233 * t280) * t370 + (t218 * t348 + t241 * t233 + (-t280 * t217 - t218 * t240 - (-t214 * t274 - t227 * t242 - t414 + (-t227 * t288 - t276) * t223) * t393 - (-t214 * t288 - t227 * t260 - t243 + (t227 * t274 - t289) * t223) * t394) * t234) * t230, 0, 0, 0; (-t248 * t251 + t252 * t397) * t368 + ((qJD(5) * t252 - t243 * t306 - t264 * t311) * t248 + t252 * t350 + (-t251 * t226 - (-qJD(5) * t251 - t243 * t311 + t264 * t306) * t253 - t252 * t225) * t249) * t237, (-t248 * t270 + t271 * t397) * t368 + (t271 * t350 + t336 * t399 + t409 * t398 + (-t271 * t225 - t270 * t226 - t336 * t395 + t409 * t396) * t249) * t237, (-t248 * t268 + t269 * t397) * t368 + (t269 * t350 + t341 * t398 + t324 * t399 + (-t269 * t225 - t268 * t226 - t324 * t395 + t341 * t396) * t249) * t237, t334 * t279 * t369 + (t334 * t240 + ((-qJD(5) * t248 - 0.2e1 * t364) * t311 + (t225 * t311 + (t226 - t371) * t306) * t249) * t279) * t237, t369 + 0.2e1 * (t225 * t237 * t249 + (-t237 * t402 - t249 * t404) * t253) * t253, 0, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 17:10:06
	% EndTime: 2019-10-10 17:10:13
	% DurationCPUTime: 7.33s
	% Computational Cost: add. (15691->282), mult. (45225->517), div. (1240->12), fcn. (56295->15), ass. (0->212)
	t448 = sin(qJ(3));
	t454 = cos(qJ(3));
	t455 = cos(qJ(2));
	t504 = qJD(1) * t455 + qJD(3);
	t449 = sin(qJ(2));
	t450 = sin(qJ(1));
	t558 = t449 * t450;
	t519 = qJD(2) * t558;
	t456 = cos(qJ(1));
	t551 = t454 * t456;
	t542 = qJD(3) * t455;
	t549 = qJD(1) * t450;
	t596 = -t450 * t542 - t549;
	t398 = t596 * t448 - t454 * t519 + t504 * t551;
	t552 = t454 * t455;
	t559 = t448 * t456;
	t427 = t450 * t552 + t559;
	t447 = sin(qJ(4));
	t453 = cos(qJ(4));
	t540 = qJD(4) * t449;
	t547 = qJD(2) * t455;
	t548 = qJD(1) * t456;
	t595 = t449 * t548 + t450 * t547;
	t357 = (-qJD(4) * t427 + t595) * t447 + (t450 * t540 + t398) * t453;
	t412 = t427 * t453 + t447 * t558;
	t446 = sin(qJ(5));
	t452 = cos(qJ(5));
	t554 = t450 * t448;
	t506 = -t455 * t554 + t551;
	t385 = t412 * t446 - t506 * t452;
	t550 = t455 * t456;
	t523 = t448 * t550;
	t545 = qJD(3) * t448;
	t473 = -qJD(1) * t523 + t448 * t519 + t596 * t454 - t456 * t545;
	t343 = t385 * qJD(5) - t357 * t452 - t473 * t446;
	t495 = t506 * t446;
	t387 = t412 * t452 + t495;
	t341 = t387 * qJD(5) + t357 * t446 - t473 * t452;
	t383 = t385 ^ 2;
	t556 = t449 * t454;
	t426 = -t447 * t455 + t453 * t556;
	t560 = t448 * t452;
	t522 = t449 * t560;
	t409 = t426 * t446 + t522;
	t407 = 0.1e1 / t409 ^ 2;
	t375 = t383 * t407 + 0.1e1;
	t373 = 0.1e1 / t375;
	t543 = qJD(3) * t454;
	t515 = t449 * t543;
	t469 = qJD(5) * t426 + t448 * t547 + t515;
	t502 = qJD(2) * t454 - qJD(4);
	t553 = t453 * t455;
	t544 = qJD(3) * t453;
	t561 = t448 * t449;
	t503 = qJD(4) * t454 - qJD(2);
	t587 = t503 * t447;
	t599 = qJD(5) * t561 + (t448 * t544 + t587) * t449;
	t497 = t502 * t553 - t599;
	t352 = t497 * t446 + t469 * t452;
	t406 = 0.1e1 / t409;
	t565 = t385 * t407;
	t489 = -t341 * t406 + t352 * t565;
	t324 = t489 * t373;
	t376 = atan2(-t385, t409);
	t368 = sin(t376);
	t369 = cos(t376);
	t494 = -t368 * t409 - t369 * t385;
	t317 = t494 * t324 - t368 * t341 + t369 * t352;
	t338 = -t368 * t385 + t369 * t409;
	t336 = 0.1e1 / t338 ^ 2;
	t604 = t317 * t336;
	t546 = qJD(2) * t456;
	t471 = t449 * t546 + t504 * t450;
	t505 = qJD(1) + t542;
	t397 = t471 * t454 + t505 * t559;
	t429 = t454 * t550 - t554;
	t480 = t449 * t549 - t455 * t546;
	t355 = (t456 * t540 - t397) * t453 + (-qJD(4) * t429 - t480) * t447;
	t555 = t449 * t456;
	t417 = t429 * t453 + t447 * t555;
	t481 = t450 * t454 + t523;
	t477 = t481 * t446;
	t391 = t417 * t452 - t477;
	t396 = t471 * t448 - t505 * t551;
	t339 = t391 * qJD(5) + t355 * t446 - t396 * t452;
	t476 = t481 * t452;
	t390 = t417 * t446 + t476;
	t581 = 0.2e1 * t390;
	t335 = 0.1e1 / t338;
	t597 = t335 * t604;
	t510 = t581 * t597;
	t603 = -t336 * t339 + t510;
	t501 = qJD(5) + t544;
	t600 = (t501 * t448 + t587) * t446 - t452 * t543;
	t416 = t429 * t447 - t453 * t555;
	t445 = sin(qJ(6));
	t451 = cos(qJ(6));
	t366 = t391 * t445 - t416 * t451;
	t598 = 0.2e1 * t366;
	t592 = t352 * t407;
	t482 = t447 * t556 + t553;
	t557 = t449 * t453;
	t507 = -t427 * t447 + t450 * t557;
	t484 = -t406 * t507 - t482 * t565;
	t591 = t446 * t484;
	t384 = t390 ^ 2;
	t334 = t336 * t384 + 0.1e1;
	t332 = 0.1e1 / t334;
	t575 = t336 * t390;
	t580 = (t339 * t575 - t384 * t597) / t334 ^ 2;
	t585 = -t332 * t604 - 0.2e1 * t335 * t580;
	t536 = 0.2e1 * t580;
	t584 = t603 * t332 + t536 * t575;
	t421 = t426 * t456;
	t583 = -qJD(5) * t421 + t480 * t448 - t456 * t515;
	t367 = t391 * t451 + t416 * t445;
	t361 = 0.1e1 / t367;
	t362 = 0.1e1 / t367 ^ 2;
	t582 = -0.2e1 * t385;
	t572 = t406 * t592;
	t579 = (t341 * t565 - t383 * t572) / t375 ^ 2;
	t340 = -t390 * qJD(5) + t355 * t452 + t396 * t446;
	t354 = t417 * qJD(4) - t397 * t447 + t453 * t480;
	t537 = qJD(6) * t366;
	t327 = t340 * t451 + t354 * t445 - t537;
	t578 = t327 * t361 * t362;
	t577 = t332 * t335;
	t360 = t366 ^ 2;
	t346 = t360 * t362 + 0.1e1;
	t344 = 0.1e1 / t346;
	t574 = t344 * t362;
	t326 = t367 * qJD(6) + t340 * t445 - t354 * t451;
	t570 = t362 * t366;
	t573 = 0.1e1 / t346 ^ 2 * (t326 * t570 - t360 * t578);
	t571 = t361 * t445;
	t569 = t366 * t451;
	t568 = t368 * t390;
	t567 = t369 * t390;
	t566 = t385 * t406;
	t564 = t416 * t446;
	t563 = t416 * t452;
	t562 = t446 * t453;
	t541 = qJD(4) * t447;
	t539 = qJD(5) * t452;
	t538 = qJD(5) * t453;
	t535 = -0.2e1 * t579;
	t533 = -0.2e1 * t573;
	t532 = 0.2e1 * t573;
	t530 = t362 * t573;
	t529 = t406 * t579;
	t528 = t326 * t574;
	t527 = t366 * t578;
	t525 = t332 * t575;
	t524 = t446 * t561;
	t509 = 0.2e1 * t527;
	t508 = t572 * t582;
	t496 = qJD(6) * t563 + t355;
	t365 = -t387 * t451 + t445 * t507;
	t364 = -t387 * t445 - t451 * t507;
	t404 = -t421 * t452 + t456 * t524;
	t420 = t482 * t456;
	t382 = t404 * t451 - t420 * t445;
	t381 = t404 * t445 + t420 * t451;
	t491 = t502 * t455;
	t490 = t426 * t549 + (-t453 * t491 + t599) * t456;
	t488 = t362 * t569 - t571;
	t410 = t426 * t452 - t524;
	t487 = -t387 * t406 + t410 * t565;
	t399 = t427 * t452 + t453 * t495;
	t483 = -t448 * t562 + t452 * t454;
	t418 = t483 * t449;
	t486 = -t399 * t406 + t418 * t565;
	t419 = t426 * t450;
	t402 = -t419 * t446 - t450 * t522;
	t428 = t447 * t449 + t453 * t552;
	t415 = t428 * t446 + t455 * t560;
	t485 = -t402 * t406 + t415 * t565;
	t478 = t447 * t481;
	t475 = -t368 + (t369 * t566 + t368) * t373;
	t474 = qJD(4) * t481;
	t472 = qJD(5) * t564 + qJD(6) * t417 - t354 * t452;
	t464 = -t429 * qJD(5) + t396 * t453 + t447 * t474;
	t467 = -t481 * t538 - t397;
	t468 = -qJD(6) * t478 - t467 * t446 + t464 * t452;
	t466 = -qJD(2) * t560 - t502 * t562;
	t465 = -t412 * qJD(4) - t398 * t447 + t595 * t453;
	t401 = -t429 * t446 - t453 * t476;
	t463 = t401 * qJD(6) - t396 * t447 + t453 * t474;
	t394 = -t503 * t557 + (t449 * t545 - t491) * t447;
	t403 = -t421 * t446 - t456 * t522;
	t380 = t401 * t451 - t445 * t478;
	t378 = t417 * t445 - t451 * t563;
	t377 = -t417 * t451 - t445 * t563;
	t371 = t394 * t456 + t482 * t549;
	t370 = t483 * t547 + ((-qJD(3) - t538) * t560 + (t448 * t541 - t501 * t454) * t446) * t449;
	t353 = -t469 * t446 + t497 * t452;
	t351 = t428 * t539 + t466 * t449 - t600 * t455;
	t350 = -t419 * t539 - t409 * t548 + (t600 * t449 + t466 * t455) * t450;
	t349 = -t446 * t583 + t490 * t452;
	t348 = (t506 * t538 + t398) * t452 + (-t427 * qJD(5) + t473 * t453 - t506 * t541) * t446;
	t331 = t373 * t591;
	t330 = t486 * t373;
	t329 = t485 * t373;
	t328 = t487 * t373;
	t322 = (-t368 * t507 - t369 * t482) * t446 + t494 * t331;
	t320 = t494 * t329 - t368 * t402 + t369 * t415;
	t318 = t494 * t328 - t368 * t387 + t369 * t410;
	t316 = t486 * t535 + (t418 * t508 - t348 * t406 + (t341 * t418 + t352 * t399 + t370 * t385) * t407) * t373;
	t314 = t485 * t535 + (t415 * t508 - t350 * t406 + (t341 * t415 + t351 * t385 + t352 * t402) * t407) * t373;
	t313 = t487 * t535 + (t410 * t508 + t343 * t406 + (t341 * t410 + t352 * t387 + t353 * t385) * t407) * t373;
	t312 = t535 * t591 + (t484 * t539 + (-t482 * t508 - t465 * t406 + (-t341 * t482 + t352 * t507 + t385 * t394) * t407) * t446) * t373;
	t1 = [t529 * t581 + (-t339 * t406 + t390 * t592) * t373, t314, t316, t312, t313, 0, 0; -t341 * t577 - (t475 * t339 + ((-t324 * t373 * t566 + t535) * t368 + (t529 * t582 - t324 + (t324 - t489) * t373) * t369) * t390) * t525 - t585 * t385 + t584 * t475 * t390, (t320 * t575 - t335 * t403) * t536 + (t320 * t510 + (-t403 * t317 - t320 * t339 - (-t314 * t385 - t329 * t341 + t351 + (-t329 * t409 - t402) * t324) * t567 - (-t314 * t409 - t329 * t352 - t350 + (t329 * t385 - t415) * t324) * t568) * t336 + (t490 * t446 + t452 * t583) * t335) * t332, (t464 * t446 + t467 * t452) * t577 - ((-t316 * t385 - t330 * t341 + t370 + (-t330 * t409 - t399) * t324) * t369 + (-t316 * t409 - t330 * t352 - t348 + (t330 * t385 - t418) * t324) * t368) * t525 + t585 * (t429 * t452 - t453 * t477) + t584 * (t494 * t330 - t368 * t399 + t369 * t418), (t322 * t575 + t335 * t564) * t536 + ((-t354 * t446 - t416 * t539) * t335 + t603 * t322 + (t564 * t317 - (-t482 * t539 - t312 * t385 - t331 * t341 + t394 * t446 + (-t331 * t409 - t446 * t507) * t324) * t567 - (-t507 * t539 - t312 * t409 - t331 * t352 - t465 * t446 + (t331 * t385 + t446 * t482) * t324) * t568) * t336) * t332, (t318 * t575 - t335 * t391) * t536 + (t318 * t510 + t340 * t335 + (-t391 * t317 - t318 * t339 - (-t313 * t385 - t328 * t341 + t353 + (-t328 * t409 - t387) * t324) * t567 - (-t313 * t409 - t328 * t352 + t343 + (t328 * t385 - t410) * t324) * t568) * t336) * t332, 0, 0; (-t361 * t364 + t365 * t570) * t532 + ((t365 * qJD(6) + t343 * t445 - t451 * t465) * t361 + t365 * t509 + (-t364 * t327 - (-t364 * qJD(6) + t343 * t451 + t445 * t465) * t366 - t365 * t326) * t362) * t344, (-t361 * t381 + t382 * t570) * t532 + ((t382 * qJD(6) + t349 * t445 - t371 * t451) * t361 + t382 * t509 + (-t381 * t327 - (-t381 * qJD(6) + t349 * t451 + t371 * t445) * t366 - t382 * t326) * t362) * t344, (t530 * t598 - t528) * t380 + (-t327 * t574 + t361 * t533) * (t401 * t445 + t451 * t478) + ((t468 * t445 + t463 * t451) * t361 - (-t463 * t445 + t468 * t451) * t570 + t380 * t509) * t344, (-t361 * t377 + t378 * t570) * t532 + (t378 * t509 - t496 * t361 * t451 + t472 * t571 + (-t496 * t366 * t445 - t378 * t326 - t377 * t327 - t472 * t569) * t362) * t344, t488 * t390 * t533 + (t488 * t339 + ((-qJD(6) * t361 - 0.2e1 * t527) * t451 + (t326 * t451 + (t327 - t537) * t445) * t362) * t390) * t344, t533 + (t528 + (-t344 * t578 - t530) * t366) * t598, 0;];
	JaD_rot = t1;
elseif link_index == 7
	%% Symbolic Calculation
	% From jacobiaD_rot_7_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 17:10:09
	% EndTime: 2019-10-10 17:10:26
	% DurationCPUTime: 18.23s
	% Computational Cost: add. (34439->421), mult. (96643->757), div. (1497->12), fcn. (121102->17), ass. (0->284)
	t618 = sin(qJ(4));
	t620 = sin(qJ(2));
	t625 = cos(qJ(2));
	t619 = sin(qJ(3));
	t624 = cos(qJ(3));
	t792 = sin(qJ(1));
	t712 = t792 * qJD(3);
	t690 = t619 * t712;
	t719 = qJD(2) * t792;
	t691 = t624 * t719;
	t794 = cos(qJ(1));
	t717 = t794 * qJD(3);
	t721 = qJD(1) * t792;
	t722 = qJD(1) * t794;
	t641 = (t625 * t722 + t717) * t624 - t619 * t721 - t620 * t691 - t625 * t690;
	t725 = t792 * t624;
	t727 = t794 * t619;
	t662 = t625 * t725 + t727;
	t793 = cos(qJ(4));
	t698 = t793 * t792;
	t676 = qJD(4) * t698;
	t528 = t641 * t793 - t618 * (t662 * qJD(4) - t620 * t722 - t625 * t719) + t620 * t676;
	t663 = t625 * t727 + t725;
	t697 = t619 * t719;
	t567 = t663 * qJD(1) + t662 * qJD(3) - t620 * t697;
	t617 = sin(qJ(5));
	t623 = cos(qJ(5));
	t731 = t618 * t792;
	t700 = t620 * t731;
	t581 = t662 * t793 + t700;
	t613 = t792 * t619;
	t726 = t794 * t624;
	t595 = t625 * t613 - t726;
	t810 = -t581 * t617 - t595 * t623;
	t492 = qJD(5) * t810 + t528 * t623 - t567 * t617;
	t616 = sin(qJ(6));
	t622 = cos(qJ(6));
	t677 = qJD(2) * t698;
	t699 = t794 * t793;
	t680 = qJD(1) * t699;
	t633 = t581 * qJD(4) + t641 * t618 - t620 * t680 - t625 * t677;
	t557 = t581 * t623 - t595 * t617;
	t608 = t620 * t698;
	t644 = t662 * t618 - t608;
	t815 = t557 * t616 - t644 * t622;
	t475 = -qJD(6) * t815 + t492 * t622 + t633 * t616;
	t534 = t557 * t622 + t644 * t616;
	t474 = t534 * qJD(6) + t492 * t616 - t633 * t622;
	t814 = -t557 * qJD(5) - t528 * t617 - t567 * t623;
	t675 = t625 * t726 - t613;
	t732 = t618 * t794;
	t701 = t620 * t732;
	t585 = t675 * t793 + t701;
	t769 = t663 * t617;
	t562 = t585 * t623 - t769;
	t609 = t620 * t699;
	t657 = t675 * t618 - t609;
	t539 = t562 * t622 + t657 * t616;
	t561 = t585 * t617 + t623 * t663;
	t615 = sin(qJ(7));
	t621 = cos(qJ(7));
	t507 = t539 * t615 + t561 * t621;
	t809 = 0.2e1 * t507;
	t808 = -t625 * t721 - t712;
	t531 = t815 ^ 2;
	t730 = t620 * t793;
	t761 = t625 * t618;
	t594 = t624 * t730 - t761;
	t763 = t619 * t620;
	t580 = t594 * t623 - t617 * t763;
	t728 = t625 * t793;
	t762 = t620 * t624;
	t593 = t618 * t762 + t728;
	t682 = t580 * t616 - t593 * t622;
	t552 = 0.1e1 / t682 ^ 2;
	t513 = t531 * t552 + 0.1e1;
	t776 = t815 * t552;
	t551 = 0.1e1 / t682;
	t757 = qJD(3) * t624;
	t759 = qJD(2) * t625;
	t651 = -qJD(5) * t594 - t619 * t759 - t620 * t757;
	t715 = t793 * qJD(2);
	t718 = qJD(4) * t793;
	t659 = t624 * t715 - t718;
	t714 = t793 * qJD(3);
	t693 = t619 * t714;
	t795 = -t693 + (-qJD(4) * t624 + qJD(2)) * t618;
	t565 = t620 * t795 + t659 * t625;
	t754 = qJD(5) * t619;
	t687 = t620 * t754 - t565;
	t526 = t651 * t617 - t687 * t623;
	t555 = -t580 * t622 - t593 * t616;
	t658 = t624 * t718 - t715;
	t704 = qJD(2) * t624 - qJD(4);
	t758 = qJD(3) * t619;
	t564 = t658 * t620 + (-t620 * t758 + t704 * t625) * t618;
	t487 = t555 * qJD(6) - t526 * t616 + t564 * t622;
	t805 = t487 * t552;
	t782 = t551 * t805;
	t788 = (t474 * t776 + t531 * t782) / t513 ^ 2;
	t806 = -0.2e1 * t788;
	t579 = -t594 * t617 - t623 * t763;
	t668 = -t551 * t810 + t579 * t776;
	t804 = t616 * t668;
	t803 = (qJD(4) * t623 - qJD(6)) * t618;
	t720 = qJD(2) * t794;
	t654 = -t620 * t721 + t625 * t720;
	t678 = qJD(4) * t699;
	t612 = t619 * t722;
	t694 = t625 * t717;
	t695 = t624 * t720;
	t684 = -t619 * t694 - t620 * t695 + t808 * t624 - t612;
	t527 = t684 * t793 + t620 * t678 + (-t675 * qJD(4) + t654) * t618;
	t649 = t623 * t657;
	t802 = qJD(6) * t649 + t527;
	t511 = 0.1e1 / t513;
	t674 = -t474 * t551 - t487 * t776;
	t456 = t674 * t511;
	t514 = atan2(t815, -t682);
	t509 = sin(t514);
	t510 = cos(t514);
	t683 = t509 * t682 + t510 * t815;
	t448 = t683 * t456 + t474 * t509 + t487 * t510;
	t471 = t509 * t815 - t510 * t682;
	t469 = 0.1e1 / t471 ^ 2;
	t537 = t562 * t616 - t657 * t622;
	t532 = t537 ^ 2;
	t467 = t469 * t532 + 0.1e1;
	t465 = 0.1e1 / t467;
	t468 = 0.1e1 / t471;
	t566 = (-t694 - t722) * t624 + (t620 * t720 - t808) * t619;
	t490 = -t561 * qJD(5) + t527 * t623 + t566 * t617;
	t679 = qJD(2) * t699;
	t681 = qJD(1) * t698;
	t797 = t585 * qJD(4) + t684 * t618 + t620 * t681 - t625 * t679;
	t472 = t539 * qJD(6) + t490 * t616 - t622 * t797;
	t784 = t469 * t537;
	t470 = t468 * t469;
	t790 = t448 * t470;
	t791 = (t472 * t784 - t532 * t790) / t467 ^ 2;
	t749 = -0.2e1 * t791;
	t710 = t468 * t749;
	t801 = -t448 * t465 * t469 + t710;
	t648 = qJD(5) * t657;
	t800 = -t585 * qJD(6) - t617 * t648 + t623 * t797;
	t744 = -0.2e1 * t470 * t537;
	t708 = t448 * t744;
	t709 = t469 * t749;
	t785 = t469 * t472;
	t799 = t537 * t709 + (t708 + t785) * t465;
	t591 = -t624 * t609 + t625 * t732;
	t798 = -qJD(5) * t591 + t654 * t619 + t717 * t762;
	t508 = t539 * t621 - t561 * t615;
	t502 = 0.1e1 / t508;
	t503 = 0.1e1 / t508 ^ 2;
	t473 = -t537 * qJD(6) + t490 * t622 + t616 * t797;
	t489 = t562 * qJD(5) + t527 * t617 - t566 * t623;
	t458 = t508 * qJD(7) + t473 * t615 + t489 * t621;
	t501 = t507 ^ 2;
	t485 = t501 * t503 + 0.1e1;
	t781 = t503 * t507;
	t751 = qJD(7) * t507;
	t459 = t473 * t621 - t489 * t615 - t751;
	t787 = t459 * t502 * t503;
	t789 = (t458 * t781 - t501 * t787) / t485 ^ 2;
	t786 = t465 * t468;
	t483 = 0.1e1 / t485;
	t783 = t483 * t503;
	t780 = t507 * t621;
	t779 = t509 * t537;
	t778 = t510 * t537;
	t777 = t815 * t551;
	t775 = t561 * t616;
	t774 = t561 * t622;
	t768 = t663 * t618;
	t767 = t615 * t502;
	t766 = t616 * t623;
	t765 = t617 * t619;
	t764 = t618 * t622;
	t755 = qJD(5) * t617;
	t753 = qJD(6) * t616;
	t752 = qJD(6) * t622;
	t748 = 0.2e1 * t791;
	t747 = -0.2e1 * t789;
	t746 = 0.2e1 * t789;
	t745 = 0.2e1 * t788;
	t742 = t503 * t789;
	t741 = t458 * t783;
	t739 = t465 * t784;
	t738 = t469 * t779;
	t737 = t469 * t778;
	t736 = t815 * t782;
	t735 = t507 * t787;
	t734 = t619 * t764;
	t729 = t623 * t793;
	t724 = t616 * t755;
	t723 = t623 * t754;
	t716 = t794 * qJD(4);
	t713 = t793 * qJD(5);
	t711 = t792 * qJD(4);
	t707 = t551 * t806;
	t706 = -0.2e1 * t736;
	t705 = 0.2e1 * t735;
	t702 = t620 * t727;
	t696 = t622 * t718;
	t638 = qJD(4) * t768 - t675 * qJD(5) + t566 * t793;
	t653 = -t663 * t713 + t684;
	t686 = -qJD(6) * t768 - t653 * t617 + t638 * t623;
	t685 = qJD(7) * t774 - t490;
	t506 = -t534 * t621 - t615 * t810;
	t505 = -t534 * t615 + t621 * t810;
	t571 = -t675 * t617 - t663 * t729;
	t547 = t571 * t622 - t616 * t768;
	t570 = t675 * t623 - t793 * t769;
	t516 = t547 * t621 - t570 * t615;
	t515 = t547 * t615 + t570 * t621;
	t575 = t591 * t623 + t617 * t702;
	t590 = -t624 * t701 - t625 * t699;
	t550 = t575 * t622 + t590 * t616;
	t574 = t591 * t617 - t623 * t702;
	t520 = t550 * t621 - t574 * t615;
	t519 = t550 * t615 + t574 * t621;
	t549 = -t575 * t616 + t590 * t622;
	t673 = t503 * t780 - t767;
	t672 = t534 * t551 + t555 * t776;
	t643 = t623 * t644;
	t542 = -t581 * t622 - t616 * t643;
	t568 = t593 * t766 + t594 * t622;
	t671 = t542 * t551 + t568 * t776;
	t569 = -t595 * t729 - t662 * t617;
	t545 = t569 * t616 + t595 * t764;
	t665 = -t617 * t624 - t619 * t729;
	t588 = t665 * t620;
	t572 = -t588 * t616 - t620 * t734;
	t670 = t545 * t551 + t572 * t776;
	t589 = -t624 * t608 + t625 * t731;
	t573 = t620 * t617 * t613 + t589 * t623;
	t548 = t573 * t616 - (-t624 * t700 - t625 * t698) * t622;
	t597 = t620 * t618 + t624 * t728;
	t584 = t597 * t623 - t625 * t765;
	t596 = t624 * t761 - t730;
	t560 = -t584 * t616 + t596 * t622;
	t669 = t548 * t551 + t560 * t776;
	t666 = qJD(5) * t702 + (-t618 * t721 - t624 * t679 + t678) * t625 + (t794 * t693 + t624 * t681 + (t624 * t716 - t720) * t618) * t620;
	t664 = t509 + (-t510 * t777 - t509) * t511;
	t656 = -qJD(7) * t562 - t489 * t622 + t561 * t753;
	t652 = -qJD(6) * t571 + t566 * t618 - t663 * t718;
	t650 = t617 * t657;
	t647 = -t618 * t722 - t676;
	t642 = qJD(7) * t650 + t802 * t616 - t800 * t622;
	t544 = t585 * t616 - t622 * t649;
	t632 = t544 * qJD(7) - t617 * t797 - t623 * t648;
	t540 = t625 * t681 + (-t624 * t678 + t679) * t620 + ((-t695 + t716) * t625 + (t619 * t717 + t624 * t721) * t620) * t618;
	t525 = t687 * t617 + t651 * t623;
	t522 = t544 * t621 + t615 * t650;
	t518 = -t562 * t615 - t621 * t774;
	t517 = t562 * t621 - t615 * t774;
	t500 = t617 * t798 + t666 * t623;
	t499 = t666 * t617 - t623 * t798;
	t498 = -t588 * t752 + (-t665 * t616 - t734) * t759 + ((-qJD(3) * t764 - (-t714 - qJD(5)) * t766) * t624 + (-t696 + (-t803 + (-t713 - qJD(3)) * t617) * t616) * t619) * t620;
	t496 = t638 * t617 + t653 * t623;
	t495 = (qJD(6) * t593 * t623 + t565) * t622 + (-qJD(6) * t594 + t564 * t623 - t593 * t755) * t616;
	t488 = t682 * qJD(6) - t526 * t622 - t564 * t616;
	t486 = t597 * t724 + (-t584 * t622 - t596 * t616) * qJD(6) + (-(qJD(2) * t765 - t659 * t623) * t616 - t704 * t764) * t620 + (-(-t617 * t757 + t623 * t795 - t723) * t616 + (-t618 * t758 + t658) * t622) * t625;
	t482 = (-t641 * t617 + (-t662 * qJD(5) - t567 * t793) * t623) * t616 + (qJD(6) * t569 + t567 * t618) * t622 + (t696 + (t617 * t713 + t803) * t616) * t595;
	t481 = t652 * t616 + t686 * t622;
	t480 = -t528 * t622 + t581 * t753 - t633 * t766 - t643 * t752 + t644 * t724;
	t478 = -t589 * t724 + t573 * t752 + (-(-t680 + (-t691 + t711) * t618) * t622 + ((-t624 * t677 - t647) * t623 + t617 * t697 - qJD(6) * t698) * t616) * t625 + (((-t618 * t719 + t793 * t690) * t623 + t617 * t612 + t792 * t723) * t616 - (t618 * t690 + t677) * t622 + (-t647 * t622 + ((t618 * t711 - t680) * t623 + t617 * t712 - qJD(6) * t731) * t616) * t624) * t620;
	t477 = t549 * qJD(6) + t500 * t622 + t540 * t616;
	t464 = t511 * t804;
	t463 = t670 * t511;
	t462 = t671 * t511;
	t461 = t669 * t511;
	t460 = t672 * t511;
	t455 = t664 * t537;
	t454 = (t509 * t810 - t510 * t579) * t616 + t683 * t464;
	t451 = -t683 * t461 + t509 * t548 + t510 * t560;
	t450 = -t683 * t460 + t509 * t534 + t510 * t555;
	t446 = t670 * t745 + (t572 * t706 - t482 * t551 + (-t474 * t572 - t487 * t545 - t498 * t815) * t552) * t511;
	t445 = t671 * t745 + (t568 * t706 - t480 * t551 + (-t474 * t568 - t487 * t542 - t495 * t815) * t552) * t511;
	t444 = t669 * t745 + (t560 * t706 - t478 * t551 + (-t474 * t560 - t486 * t815 - t487 * t548) * t552) * t511;
	t443 = t672 * t745 + (t555 * t706 - t475 * t551 + (-t474 * t555 - t487 * t534 - t488 * t815) * t552) * t511;
	t442 = t804 * t806 + (t668 * t752 + (0.2e1 * t579 * t736 - t814 * t551 + (t474 * t579 - t487 * t810 + t525 * t815) * t552) * t616) * t511;
	t1 = [-t537 * t707 + (-t472 * t551 - t537 * t805) * t511, t444, t446, t445, t442, t443, 0; t815 * t710 + (t474 * t468 + (-t448 * t815 + t455 * t472) * t469) * t465 + (t455 * t709 + (-0.2e1 * t455 * t790 + (t456 * t511 * t777 + t745) * t738 + (-t815 * t707 + t456 + (-t456 + t674) * t511) * t737 + t664 * t785) * t465) * t537, (-t451 * t784 - t468 * t549) * t748 + ((-t550 * qJD(6) - t500 * t616 + t540 * t622) * t468 + t451 * t708 + (-t549 * t448 + t451 * t472 + (t444 * t815 - t461 * t474 + t486 + (-t461 * t682 + t548) * t456) * t778 + (t444 * t682 + t461 * t487 + t478 + (t461 * t815 - t560) * t456) * t779) * t469) * t465, (-t616 * t686 + t622 * t652) * t786 + ((t446 * t815 - t463 * t474 + t498 + (-t463 * t682 + t545) * t456) * t510 + (t446 * t682 + t463 * t487 + t482 + (t463 * t815 - t572) * t456) * t509) * t739 + t801 * (-t571 * t616 - t663 * t764) + t799 * (-t683 * t463 + t509 * t545 + t510 * t572), ((t445 * t815 - t462 * t474 + t495 + (-t462 * t682 + t542) * t456) * t510 + (t445 * t682 + t462 * t487 + t480 + (t462 * t815 - t568) * t456) * t509) * t739 + t801 * (t585 * t622 + t616 * t649) + t799 * (-t683 * t462 + t509 * t542 + t510 * t568) + (t800 * t616 + t802 * t622) * t786, (-t454 * t784 - t468 * t775) * t748 + (t454 * t785 + (t489 * t616 + t561 * t752) * t468 + (t454 * t744 - t469 * t775) * t448 + (-t579 * t752 + t442 * t815 + t464 * t474 - t525 * t616 + (t464 * t682 + t616 * t810) * t456) * t737 + (t810 * t752 + t442 * t682 - t464 * t487 + t814 * t616 + (-t464 * t815 + t579 * t616) * t456) * t738) * t465, (-t450 * t784 + t468 * t539) * t748 + (t450 * t708 - t473 * t468 + (t539 * t448 + t450 * t472 + (t443 * t815 - t460 * t474 + t488 + (-t460 * t682 + t534) * t456) * t778 + (t443 * t682 + t460 * t487 + t475 + (t460 * t815 - t555) * t456) * t779) * t469) * t465, 0; (-t502 * t505 + t506 * t781) * t746 + ((t506 * qJD(7) - t475 * t615 + t621 * t814) * t502 + t506 * t705 + (-t505 * t459 - (-t505 * qJD(7) - t475 * t621 - t615 * t814) * t507 - t506 * t458) * t503) * t483, (-t502 * t519 + t520 * t781) * t746 + ((qJD(7) * t520 + t477 * t615 + t499 * t621) * t502 + t520 * t705 + (-t519 * t459 - (-qJD(7) * t519 + t477 * t621 - t499 * t615) * t507 - t520 * t458) * t503) * t483, (-t502 * t515 + t516 * t781) * t746 + ((qJD(7) * t516 + t481 * t615 + t496 * t621) * t502 + t516 * t705 + (-t515 * t459 - (-qJD(7) * t515 + t481 * t621 - t496 * t615) * t507 - t516 * t458) * t503) * t483, (t742 * t809 - t741) * t522 + (-t459 * t783 + t502 * t747) * (t544 * t615 - t621 * t650) + ((t615 * t642 + t621 * t632) * t502 - (-t615 * t632 + t621 * t642) * t781 + t522 * t705) * t483, (-t502 * t517 + t518 * t781) * t746 + (t518 * t705 - t685 * t502 * t621 + t656 * t767 + (-t507 * t615 * t685 - t518 * t458 - t517 * t459 - t656 * t780) * t503) * t483, t673 * t537 * t747 + (t673 * t472 + ((-qJD(7) * t502 - 0.2e1 * t735) * t621 + (t458 * t621 + (t459 - t751) * t615) * t503) * t537) * t483, t747 + (t741 + (-t483 * t787 - t742) * t507) * t809;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,7);
end