% Zeitableitung der Rotationsmatrix-Jacobi-Matrix für beliebiges Segment von
% S7RRRRRRR1
% Use Code from Maple symbolic Code Generation
% 
% Rotationsmatrix-Jacobi-Matrix: Differentieller Zusammenhang zwischen
% gestapelter Endeffektor-Rotationsmatrix und verallgemeinerten Koordinaten.
% Zeitableitung: Die Gradientenmatrix wird nochmal nach der Zeit abgeleitet.
% 
% Input:
% qJ [7x1]
%   Generalized joint coordinates (joint angles)
% qJD [7x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt. (0=Basis).
%   Siehe auch: bsp_3T1R_fkine_fixb_rotmat_mdh_sym_varpar.m
% pkin [4x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[d1,d3,d5,d7]';
% 
% Output:
% JRD_rot [9x7]
%   Zeitableitung der Jacobi-Matrix der Endeffektor-Rotationsmatrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 17:10
% Revision: eb1f267a533306f0f157b6776e21de13647fd8af (2019-10-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JRD_rot = S7RRRRRRR1_jacobiRD_rot_sym_varpar(qJ, qJD, link_index, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(7,1),zeros(7,1),uint8(0),zeros(4,1)}
assert(isreal(qJ) && all(size(qJ) == [7 1]), ...
  'S7RRRRRRR1_jacobiRD_rot_sym_varpar: qJ has to be [7x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [7 1]), ...
  'S7RRRRRRR1_jacobiRD_rot_sym_varpar: qJD has to be [7x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S7RRRRRRR1_jacobiRD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [4 1]), ...
  'S7RRRRRRR1_jacobiRD_rot_sym_varpar: pkin has to be [4x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiRD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 17:10:04
	% EndTime: 2019-10-10 17:10:04
	% DurationCPUTime: 0.05s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiRD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 17:10:04
	% EndTime: 2019-10-10 17:10:04
	% DurationCPUTime: 0.06s
	% Computational Cost: add. (3->3), mult. (4->2), div. (0->0), fcn. (4->2), ass. (0->3)
	t31 = qJD(1) * sin(qJ(1));
	t30 = qJD(1) * cos(qJ(1));
	t1 = [-t30, 0, 0, 0, 0, 0, 0; -t31, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; t31, 0, 0, 0, 0, 0, 0; -t30, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiRD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 17:10:04
	% EndTime: 2019-10-10 17:10:04
	% DurationCPUTime: 0.04s
	% Computational Cost: add. (11->9), mult. (36->13), div. (0->0), fcn. (36->4), ass. (0->14)
	t31 = sin(qJ(1));
	t38 = qJD(1) * t31;
	t33 = cos(qJ(1));
	t37 = qJD(1) * t33;
	t30 = sin(qJ(2));
	t36 = qJD(2) * t30;
	t32 = cos(qJ(2));
	t35 = qJD(2) * t32;
	t34 = qJD(2) * t33;
	t29 = t31 * t36 - t32 * t37;
	t28 = t30 * t37 + t31 * t35;
	t27 = t30 * t34 + t32 * t38;
	t26 = t30 * t38 - t32 * t34;
	t1 = [t29, t26, 0, 0, 0, 0, 0; -t27, -t28, 0, 0, 0, 0, 0; 0, -t36, 0, 0, 0, 0, 0; t28, t27, 0, 0, 0, 0, 0; t26, t29, 0, 0, 0, 0, 0; 0, -t35, 0, 0, 0, 0, 0; -t38, 0, 0, 0, 0, 0, 0; t37, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiRD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 17:10:05
	% EndTime: 2019-10-10 17:10:06
	% DurationCPUTime: 0.12s
	% Computational Cost: add. (49->26), mult. (173->50), div. (0->0), fcn. (173->6), ass. (0->33)
	t225 = cos(qJ(3));
	t227 = cos(qJ(1));
	t249 = t225 * t227;
	t224 = sin(qJ(1));
	t248 = qJD(1) * t224;
	t226 = cos(qJ(2));
	t247 = qJD(1) * t226;
	t246 = qJD(1) * t227;
	t223 = sin(qJ(2));
	t245 = qJD(2) * t223;
	t244 = qJD(2) * t226;
	t243 = qJD(2) * t227;
	t222 = sin(qJ(3));
	t242 = qJD(3) * t222;
	t241 = qJD(3) * t223;
	t240 = qJD(3) * t226;
	t239 = t225 * t245;
	t238 = t225 * t241;
	t237 = t224 * t245;
	t236 = t224 * t244;
	t235 = t223 * t243;
	t234 = t226 * t243;
	t233 = qJD(1) + t240;
	t232 = qJD(3) + t247;
	t231 = t233 * t222;
	t230 = t223 * t246 + t236;
	t229 = t223 * t248 - t234;
	t228 = t232 * t224 + t235;
	t221 = -t232 * t249 + (t231 + t239) * t224;
	t220 = t233 * t225 * t224 + (t232 * t227 - t237) * t222;
	t219 = t228 * t225 + t227 * t231;
	t218 = t228 * t222 - t233 * t249;
	t1 = [t221, -t225 * t234 + (t225 * t248 + t227 * t242) * t223, t218, 0, 0, 0, 0; -t219, -t225 * t236 + (t224 * t242 - t225 * t246) * t223, -t220, 0, 0, 0, 0; 0, -t222 * t240 - t239, -t222 * t244 - t238, 0, 0, 0, 0; t220, -t229 * t222 + t227 * t238, t219, 0, 0, 0, 0; t218, t230 * t222 + t224 * t238, t221, 0, 0, 0, 0; 0, t222 * t245 - t225 * t240, t222 * t241 - t225 * t244, 0, 0, 0, 0; t230, t224 * t247 + t235, 0, 0, 0, 0, 0; t229, -t226 * t246 + t237, 0, 0, 0, 0, 0; 0, -t244, 0, 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiRD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 17:10:07
	% EndTime: 2019-10-10 17:10:07
	% DurationCPUTime: 0.45s
	% Computational Cost: add. (162->55), mult. (548->106), div. (0->0), fcn. (560->8), ass. (0->56)
	t363 = sin(qJ(4));
	t365 = sin(qJ(2));
	t367 = cos(qJ(4));
	t369 = cos(qJ(2));
	t368 = cos(qJ(3));
	t386 = qJD(2) * t368 - qJD(4);
	t382 = t386 * t369;
	t387 = qJD(4) * t368 - qJD(2);
	t364 = sin(qJ(3));
	t398 = qJD(3) * t365;
	t390 = t364 * t398;
	t373 = t387 * t367 * t365 + (t382 - t390) * t363;
	t397 = qJD(3) * t369;
	t392 = t364 * t397;
	t410 = t386 * t365 + t392;
	t370 = cos(qJ(1));
	t405 = t370 * t364;
	t366 = sin(qJ(1));
	t406 = t366 * t369;
	t356 = t368 * t406 + t405;
	t400 = qJD(2) * t369;
	t402 = qJD(1) * t370;
	t378 = t365 * t402 + t366 * t400;
	t375 = -qJD(4) * t356 + t378;
	t388 = qJD(1) * t369 + qJD(3);
	t401 = qJD(2) * t365;
	t393 = t366 * t401;
	t403 = qJD(1) * t366;
	t404 = t370 * t368;
	t354 = -t364 * t403 - t366 * t392 - t368 * t393 + t388 * t404;
	t395 = qJD(4) * t365;
	t384 = t366 * t395 + t354;
	t409 = t384 * t363 - t375 * t367;
	t407 = t365 * t368;
	t399 = qJD(2) * t370;
	t396 = qJD(4) * t363;
	t394 = qJD(4) * t367;
	t391 = t368 * t398;
	t389 = qJD(1) + t397;
	t376 = t365 * t399 + t388 * t366;
	t352 = t376 * t368 + t389 * t405;
	t385 = t370 * t395 - t352;
	t383 = t387 * t369;
	t381 = -t363 * t369 + t367 * t407;
	t380 = t363 * t407 + t367 * t369;
	t379 = t366 * t368 + t369 * t405;
	t377 = -t365 * t403 + t369 * t399;
	t374 = -qJD(4) * (-t366 * t364 + t369 * t404) + t377;
	t372 = -t367 * t382 + (qJD(3) * t364 * t367 + t387 * t363) * t365;
	t371 = -t375 * t363 - t384 * t367;
	t355 = -t364 * t406 + t404;
	t353 = t379 * qJD(1) + t356 * qJD(3) - t364 * t393;
	t351 = t376 * t364 - t389 * t404;
	t350 = t374 * t363 + t385 * t367;
	t349 = -t385 * t363 + t374 * t367;
	t1 = [t371, t372 * t370 + t381 * t403, t351 * t367 + t379 * t396, t349, 0, 0, 0; t350, t372 * t366 - t381 * t402, -t353 * t367 - t355 * t396, -t409, 0, 0, 0; 0, -t363 * t383 - t410 * t367, -t367 * t391 + (t363 * t395 - t367 * t400) * t364, -t373, 0, 0, 0; t409, t373 * t370 - t380 * t403, -t351 * t363 + t379 * t394, -t350, 0, 0, 0; t349, t373 * t366 + t380 * t402, t353 * t363 - t355 * t394, t371, 0, 0, 0; 0, t410 * t363 - t367 * t383, t365 * t364 * t394 + (t364 * t400 + t391) * t363, t372, 0, 0, 0; t353, t377 * t364 + t370 * t391, t352, 0, 0, 0, 0; t351, t378 * t364 + t366 * t391, -t354, 0, 0, 0, 0; 0, t364 * t401 - t368 * t397, -t368 * t400 + t390, 0, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiRD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 17:10:10
	% EndTime: 2019-10-10 17:10:11
	% DurationCPUTime: 1.07s
	% Computational Cost: add. (438->109), mult. (1411->201), div. (0->0), fcn. (1483->10), ass. (0->93)
	t593 = sin(qJ(3));
	t594 = sin(qJ(2));
	t592 = sin(qJ(4));
	t598 = cos(qJ(3));
	t628 = qJD(4) * t598 - qJD(2);
	t619 = t628 * t592;
	t597 = cos(qJ(4));
	t648 = qJD(3) * t597;
	t676 = t594 * (t593 * t648 + t619);
	t595 = sin(qJ(1));
	t599 = cos(qJ(2));
	t629 = qJD(1) * t599 + qJD(3);
	t647 = qJD(3) * t599;
	t633 = t593 * t647;
	t652 = qJD(2) * t594;
	t637 = t595 * t652;
	t654 = qJD(1) * t595;
	t600 = cos(qJ(1));
	t655 = t600 * t598;
	t567 = -t593 * t654 - t595 * t633 - t598 * t637 + t629 * t655;
	t656 = t600 * t593;
	t659 = t595 * t599;
	t578 = t598 * t659 + t656;
	t651 = qJD(2) * t599;
	t653 = qJD(1) * t600;
	t613 = t594 * t653 + t595 * t651;
	t645 = qJD(4) * t594;
	t557 = (-qJD(4) * t578 + t613) * t592 + (t595 * t645 + t567) * t597;
	t614 = t595 * t598 + t599 * t656;
	t566 = t614 * qJD(1) + t578 * qJD(3) - t593 * t637;
	t663 = t594 * t592;
	t569 = t578 * t597 + t595 * t663;
	t577 = t593 * t659 - t655;
	t591 = sin(qJ(5));
	t596 = cos(qJ(5));
	t675 = -t557 * t596 + t566 * t591 + (t569 * t591 + t577 * t596) * qJD(5);
	t674 = qJD(5) * (t569 * t596 - t577 * t591) + t557 * t591 + t566 * t596;
	t627 = qJD(2) * t598 - qJD(4);
	t618 = t627 * t599;
	t642 = qJD(5) * t593;
	t631 = t594 * t642;
	t673 = -t597 * t618 + t631 + t676;
	t650 = qJD(2) * t600;
	t612 = -t594 * t654 + t599 * t650;
	t661 = t594 * t598;
	t576 = -t599 * t592 + t597 * t661;
	t669 = qJD(5) * t576;
	t664 = t593 * t597;
	t662 = t594 * t597;
	t660 = t594 * t600;
	t658 = t596 * t598;
	t657 = t599 * t597;
	t649 = qJD(3) * t594;
	t646 = qJD(4) * t592;
	t644 = qJD(4) * t597;
	t643 = qJD(5) * t591;
	t641 = qJD(5) * t596;
	t640 = qJD(5) * t597;
	t632 = t598 * t649;
	t630 = qJD(1) + t647;
	t626 = qJD(3) + t640;
	t625 = qJD(5) + t648;
	t607 = -t627 * t594 - t633;
	t623 = -t607 * t597 + (t619 + t642) * t599;
	t563 = t627 * t657 - t676;
	t622 = -t563 + t631;
	t608 = t594 * t650 + t629 * t595;
	t565 = t608 * t598 + t630 * t656;
	t621 = t614 * t640 + t565;
	t620 = t577 * t640 - t567;
	t617 = t576 * t654 + t600 * t673;
	t574 = t576 * t600;
	t616 = -qJD(1) * t574 + t595 * t673;
	t581 = -t595 * t593 + t599 * t655;
	t572 = t581 * t597 + t592 * t660;
	t615 = t592 * t661 + t657;
	t611 = -t593 * t651 - t632;
	t564 = t608 * t593 - t630 * t655;
	t610 = qJD(5) * t581 - t564 * t597 - t614 * t646;
	t609 = -qJD(5) * t578 - t566 * t597 + t577 * t646;
	t605 = -t611 + t669;
	t604 = -qJD(5) * (t598 * t657 + t663) + t593 * t652 - t598 * t647;
	t556 = -t569 * qJD(4) - t567 * t592 + t597 * t613;
	t603 = t613 * t593 + (t632 + t669) * t595;
	t602 = qJD(5) * t574 + t612 * t593 + t600 * t632;
	t562 = -t628 * t662 + (t593 * t649 - t618) * t592;
	t571 = -t581 * t592 + t597 * t660;
	t568 = -t578 * t592 + t595 * t662;
	t555 = (t600 * t645 - t565) * t597 + (-qJD(4) * t581 + t612) * t592;
	t554 = t572 * qJD(4) - t565 * t592 - t612 * t597;
	t553 = t555 * t596 + t564 * t591 + (-t572 * t591 - t596 * t614) * qJD(5);
	t552 = -t555 * t591 + t564 * t596 + (-t572 * t596 + t591 * t614) * qJD(5);
	t1 = [t675, t602 * t591 + t617 * t596, t621 * t591 - t610 * t596, -t554 * t596 - t571 * t643, t552, 0, 0; t553, t603 * t591 + t616 * t596, t620 * t591 + t609 * t596, t556 * t596 - t568 * t643, -t674, 0, 0; 0, t604 * t591 - t623 * t596, (-t591 * t598 - t596 * t664) * t651 + (-t625 * t658 + (t626 * t591 + t596 * t646) * t593) * t594, t562 * t596 + t615 * t643, t622 * t591 - t605 * t596, 0, 0; t674, -t617 * t591 + t602 * t596, t610 * t591 + t621 * t596, t554 * t591 - t571 * t641, -t553, 0, 0; t552, -t616 * t591 + t603 * t596, -t609 * t591 + t620 * t596, -t556 * t591 - t568 * t641, t675, 0, 0; 0, t623 * t591 + t604 * t596, (t591 * t664 - t658) * t651 + (t626 * t596 * t593 + (-t593 * t646 + t625 * t598) * t591) * t594, -t562 * t591 + t615 * t641, t605 * t591 + t622 * t596, 0, 0; t556, t562 * t600 + t615 * t654, t564 * t592 - t614 * t644, t555, 0, 0, 0; t554, t562 * t595 - t615 * t653, -t566 * t592 - t577 * t644, t557, 0, 0, 0; 0, t607 * t592 + t628 * t657, -t594 * t593 * t644 + t611 * t592, t563, 0, 0, 0;];
	JRD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiRD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 17:10:18
	% EndTime: 2019-10-10 17:10:21
	% DurationCPUTime: 3.32s
	% Computational Cost: add. (1050->188), mult. (3268->339), div. (0->0), fcn. (3531->12), ass. (0->143)
	t888 = sin(qJ(3));
	t890 = sin(qJ(1));
	t894 = cos(qJ(3));
	t895 = cos(qJ(2));
	t939 = qJD(1) * t895 + qJD(3);
	t964 = qJD(3) * t895;
	t944 = t888 * t964;
	t889 = sin(qJ(2));
	t969 = qJD(2) * t889;
	t949 = t890 * t969;
	t970 = qJD(1) * t890;
	t896 = cos(qJ(1));
	t971 = t896 * t894;
	t844 = -t888 * t970 - t890 * t944 - t894 * t949 + t939 * t971;
	t972 = t896 * t888;
	t976 = t890 * t895;
	t866 = t894 * t976 + t972;
	t887 = sin(qJ(4));
	t893 = cos(qJ(4));
	t968 = qJD(2) * t895;
	t977 = t889 * t896;
	t916 = qJD(1) * t977 + t890 * t968;
	t962 = qJD(4) * t889;
	t823 = (-qJD(4) * t866 + t916) * t887 + (t890 * t962 + t844) * t893;
	t917 = t890 * t894 + t895 * t972;
	t843 = t917 * qJD(1) + t866 * qJD(3) - t888 * t949;
	t886 = sin(qJ(5));
	t892 = cos(qJ(5));
	t980 = t889 * t887;
	t852 = t866 * t893 + t890 * t980;
	t865 = t888 * t976 - t971;
	t990 = t852 * t886 + t865 * t892;
	t812 = t990 * qJD(5) - t823 * t892 + t843 * t886;
	t822 = t852 * qJD(4) + t844 * t887 - t916 * t893;
	t832 = t852 * t892 - t865 * t886;
	t979 = t889 * t893;
	t851 = t866 * t887 - t890 * t979;
	t885 = sin(qJ(6));
	t891 = cos(qJ(6));
	t1004 = t812 * t891 + (t832 * t885 - t851 * t891) * qJD(6) - t822 * t885;
	t1003 = t812 * t885 - (t832 * t891 + t851 * t885) * qJD(6) + t822 * t891;
	t810 = -t832 * qJD(5) - t823 * t886 - t843 * t892;
	t938 = qJD(4) * t894 - qJD(2);
	t924 = t938 * t887;
	t965 = qJD(3) * t893;
	t997 = (t888 * t965 + t924) * t889;
	t937 = qJD(2) * t894 - qJD(4);
	t923 = t937 * t895;
	t959 = qJD(5) * t888;
	t942 = t889 * t959;
	t992 = -t893 * t923 + t942 + t997;
	t967 = qJD(2) * t896;
	t915 = t889 * t970 - t895 * t967;
	t974 = t895 * t887;
	t978 = t889 * t894;
	t864 = t893 * t978 - t974;
	t862 = t864 * t896;
	t966 = qJD(3) * t889;
	t943 = t894 * t966;
	t989 = -qJD(5) * t862 + t915 * t888 - t896 * t943;
	t860 = t864 * t890;
	t988 = qJD(5) * t860 + t916 * t888 + t890 * t943;
	t983 = t886 * t888;
	t982 = t888 * t889;
	t981 = t888 * t892;
	t975 = t892 * t893;
	t973 = t895 * t893;
	t963 = qJD(4) * t887;
	t961 = qJD(4) * t893;
	t960 = qJD(5) * t886;
	t958 = qJD(5) * t892;
	t957 = qJD(5) * t893;
	t956 = qJD(6) * t885;
	t955 = qJD(6) * t887;
	t954 = qJD(6) * t891;
	t953 = qJD(6) * t892;
	t952 = t886 * t982;
	t946 = t888 * t966;
	t941 = t889 * t961;
	t940 = qJD(1) + t964;
	t936 = qJD(3) + t957;
	t903 = -t937 * t889 - t944;
	t933 = t903 * t893 + (-t924 - t959) * t895;
	t840 = t937 * t973 - t997;
	t932 = -t840 + t942;
	t904 = t889 * t967 + t939 * t890;
	t842 = t904 * t894 + t940 * t972;
	t931 = -t917 * t957 - t842;
	t930 = t865 * t957 - t844;
	t841 = t904 * t888 - t940 * t971;
	t870 = -t890 * t888 + t895 * t971;
	t911 = -qJD(5) * t870 + t841 * t893 + t917 * t963;
	t929 = -t931 * t886 + t911 * t892 - t917 * t955;
	t910 = -qJD(5) * t866 - t843 * t893 + t865 * t963;
	t928 = t865 * t955 - t930 * t886 - t910 * t892;
	t821 = (t896 * t962 - t842) * t893 + (-qJD(4) * t870 - t915) * t887;
	t856 = t870 * t887 - t893 * t977;
	t927 = t856 * t953 + t821;
	t926 = t851 * t953 + t823;
	t863 = t887 * t978 + t973;
	t925 = t863 * t953 + t840;
	t857 = t870 * t893 + t887 * t977;
	t835 = t857 * t892 - t886 * t917;
	t834 = -t857 * t886 - t892 * t917;
	t922 = (-qJD(5) - t965) * t894;
	t921 = t864 * t970 + t992 * t896;
	t920 = -qJD(1) * t862 + t992 * t890;
	t918 = -t886 * t894 - t888 * t975;
	t919 = t955 * t982 - t918 * t968 - (t892 * t922 + (t936 * t886 + t892 * t963) * t888) * t889;
	t914 = -t888 * t968 - t943;
	t861 = t863 * t896;
	t909 = -qJD(6) * (-t870 * t886 - t917 * t975) + t841 * t887 - t917 * t961;
	t908 = -qJD(6) * (-t865 * t975 - t866 * t886) - t843 * t887 - t865 * t961;
	t820 = t857 * qJD(4) - t842 * t887 + t915 * t893;
	t907 = qJD(6) * t857 - t820 * t892 + t856 * t960;
	t906 = qJD(6) * t852 - t822 * t892 + t851 * t960;
	t839 = -t887 * t946 - t895 * t963 - t893 * t969 + (t887 * t968 + t941) * t894;
	t905 = qJD(6) * t864 - t839 * t892 + t863 * t960;
	t901 = -qJD(5) * t864 + t914;
	t868 = t894 * t973 + t980;
	t900 = -qJD(5) * t868 + t888 * t969 - t894 * t964;
	t899 = -qJD(6) * t889 * t918 + t914 * t887 - t888 * t941;
	t898 = -t938 * t979 + (-t923 + t946) * t887;
	t867 = t894 * t974 - t979;
	t859 = t863 * t890;
	t855 = t868 * t892 - t895 * t983;
	t850 = t864 * t892 - t952;
	t849 = -t864 * t886 - t889 * t981;
	t848 = -t862 * t892 + t896 * t952;
	t847 = -t860 * t892 + t890 * t952;
	t837 = t903 * t887 + t938 * t973;
	t829 = -qJD(1) * t861 + t898 * t890;
	t827 = t863 * t970 + t898 * t896;
	t819 = t901 * t886 - t932 * t892;
	t818 = t932 * t886 + t901 * t892;
	t817 = t900 * t886 + t933 * t892;
	t816 = t988 * t886 + t920 * t892;
	t815 = -t989 * t886 + t921 * t892;
	t809 = t834 * qJD(5) + t821 * t892 + t841 * t886;
	t808 = t835 * qJD(5) + t821 * t886 - t841 * t892;
	t807 = t809 * t891 + t820 * t885 + (-t835 * t885 + t856 * t891) * qJD(6);
	t806 = -t809 * t885 + t820 * t891 + (-t835 * t891 - t856 * t885) * qJD(6);
	t1 = [t1004, t815 * t891 + t827 * t885 + (-t848 * t885 - t861 * t891) * qJD(6), t909 * t885 + t929 * t891, t927 * t885 + t907 * t891, -t808 * t891 - t834 * t956, t806, 0; t807, t816 * t891 + t829 * t885 + (-t847 * t885 - t859 * t891) * qJD(6), t908 * t885 - t928 * t891, t926 * t885 + t906 * t891, t810 * t891 + t956 * t990, t1003, 0; 0, t817 * t891 + t837 * t885 + (-t855 * t885 + t867 * t891) * qJD(6), t899 * t885 - t919 * t891, t925 * t885 + t905 * t891, t818 * t891 - t849 * t956, -t819 * t885 + t839 * t891 + (-t850 * t891 - t863 * t885) * qJD(6), 0; -t1003, -t815 * t885 + t827 * t891 + (-t848 * t891 + t861 * t885) * qJD(6), -t929 * t885 + t909 * t891, -t907 * t885 + t927 * t891, t808 * t885 - t834 * t954, -t807, 0; t806, -t816 * t885 + t829 * t891 + (-t847 * t891 + t859 * t885) * qJD(6), t928 * t885 + t908 * t891, -t906 * t885 + t926 * t891, -t810 * t885 + t954 * t990, t1004, 0; 0, -t817 * t885 + t837 * t891 + (-t855 * t891 - t867 * t885) * qJD(6), t919 * t885 + t899 * t891, -t905 * t885 + t925 * t891, -t818 * t885 - t849 * t954, -t819 * t891 - t839 * t885 + (t850 * t885 - t863 * t891) * qJD(6), 0; t810, t921 * t886 + t989 * t892, t911 * t886 + t931 * t892, -t820 * t886 - t856 * t958, t809, 0, 0; t808, t920 * t886 - t988 * t892, t910 * t886 - t930 * t892, -t822 * t886 - t851 * t958, -t812, 0, 0; 0, t933 * t886 - t900 * t892, (t892 * t894 - t893 * t983) * t968 + (-t936 * t981 + (t888 * t963 + t922) * t886) * t889, -t839 * t886 - t863 * t958, t819, 0, 0;];
	JRD_rot = t1;
elseif link_index == 7
	%% Symbolic Calculation
	% From jacobiRD_rot_7_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 17:10:35
	% EndTime: 2019-10-10 17:10:43
	% DurationCPUTime: 8.39s
	% Computational Cost: add. (2341->288), mult. (7112->517), div. (0->0), fcn. (7879->14), ass. (0->211)
	t1260 = cos(qJ(2));
	t1316 = qJD(1) * t1260 + qJD(3);
	t1252 = sin(qJ(3));
	t1254 = sin(qJ(1));
	t1338 = t1254 * t1260;
	t1319 = t1252 * t1338;
	t1253 = sin(qJ(2));
	t1259 = cos(qJ(3));
	t1339 = t1254 * t1259;
	t1320 = t1253 * t1339;
	t1261 = cos(qJ(1));
	t1331 = t1261 * t1259;
	t1340 = t1254 * t1252;
	t1196 = -qJD(1) * t1340 - qJD(2) * t1320 - qJD(3) * t1319 + t1316 * t1331;
	t1332 = t1261 * t1252;
	t1335 = t1259 * t1260;
	t1228 = t1254 * t1335 + t1332;
	t1251 = sin(qJ(4));
	t1258 = cos(qJ(4));
	t1330 = qJD(2) * t1338;
	t1341 = t1253 * t1261;
	t1287 = qJD(1) * t1341 + t1330;
	t1344 = t1253 * t1254;
	t1158 = t1251 * (-qJD(4) * t1228 + t1287) + t1258 * (qJD(4) * t1344 + t1196);
	t1210 = t1228 * t1258 + t1251 * t1344;
	t1227 = t1319 - t1331;
	t1250 = sin(qJ(5));
	t1257 = cos(qJ(5));
	t1180 = t1210 * t1250 + t1227 * t1257;
	t1288 = t1260 * t1332 + t1339;
	t1324 = t1253 * t1340;
	t1195 = qJD(1) * t1288 - qJD(2) * t1324 + qJD(3) * t1228;
	t1140 = qJD(5) * t1180 - t1158 * t1257 + t1195 * t1250;
	t1318 = t1258 * t1341;
	t1157 = -qJD(1) * t1318 + qJD(4) * t1210 + t1196 * t1251 - t1258 * t1330;
	t1249 = sin(qJ(6));
	t1256 = cos(qJ(6));
	t1181 = t1210 * t1257 - t1227 * t1250;
	t1343 = t1253 * t1258;
	t1241 = t1254 * t1343;
	t1209 = t1228 * t1251 - t1241;
	t1385 = t1181 * t1249 - t1209 * t1256;
	t1125 = t1385 * qJD(6) + t1140 * t1256 - t1157 * t1249;
	t1137 = qJD(5) * t1181 + t1158 * t1250 + t1195 * t1257;
	t1162 = t1181 * t1256 + t1209 * t1249;
	t1248 = sin(qJ(7));
	t1255 = cos(qJ(7));
	t1394 = t1125 * t1248 - (t1162 * t1255 - t1180 * t1248) * qJD(7) - t1137 * t1255;
	t1393 = t1125 * t1255 + t1137 * t1248 + (t1162 * t1248 + t1180 * t1255) * qJD(7);
	t1389 = qJD(6) * t1162 - t1140 * t1249 - t1157 * t1256;
	t1315 = qJD(4) * t1259 - qJD(2);
	t1296 = t1315 * t1251;
	t1347 = t1252 * t1258;
	t1382 = (qJD(3) * t1347 + t1296) * t1253;
	t1334 = t1260 * t1251;
	t1342 = t1253 * t1259;
	t1226 = t1258 * t1342 - t1334;
	t1222 = t1226 * t1261;
	t1373 = qJD(2) * t1260;
	t1329 = t1261 * t1373;
	t1286 = qJD(1) * t1344 - t1329;
	t1327 = qJD(3) * t1342;
	t1376 = -qJD(5) * t1222 + t1252 * t1286 - t1261 * t1327;
	t1220 = t1226 * t1254;
	t1375 = qJD(3) * t1320 + qJD(5) * t1220 + t1252 * t1287;
	t1374 = qJD(1) * t1254;
	t1372 = qJD(4) * t1251;
	t1371 = qJD(6) * t1249;
	t1370 = qJD(7) * t1248;
	t1369 = qJD(7) * t1255;
	t1368 = t1180 * t1256;
	t1232 = t1260 * t1331 - t1340;
	t1216 = t1232 * t1258 + t1251 * t1341;
	t1185 = t1216 * t1250 + t1257 * t1288;
	t1367 = t1185 * t1256;
	t1348 = t1252 * t1257;
	t1321 = t1253 * t1348;
	t1207 = t1226 * t1250 + t1321;
	t1364 = t1207 * t1256;
	t1363 = t1209 * t1250;
	t1362 = t1209 * t1257;
	t1215 = t1232 * t1251 - t1318;
	t1361 = t1215 * t1250;
	t1360 = t1215 * t1257;
	t1333 = t1260 * t1258;
	t1225 = t1251 * t1342 + t1333;
	t1359 = t1225 * t1250;
	t1358 = t1225 * t1257;
	t1356 = t1227 * t1251;
	t1354 = t1227 * t1258;
	t1353 = t1288 * t1251;
	t1352 = t1288 * t1258;
	t1351 = t1249 * t1251;
	t1350 = t1250 * t1258;
	t1349 = t1252 * t1253;
	t1346 = t1252 * t1260;
	t1345 = t1253 * t1251;
	t1337 = t1256 * t1257;
	t1336 = t1257 * t1258;
	t1326 = qJD(5) * t1349;
	t1325 = t1252 * t1345;
	t1323 = qJD(4) * t1343;
	t1322 = t1250 * t1349;
	t1317 = qJD(3) * t1260 + qJD(1);
	t1314 = qJD(2) * t1259 - qJD(4);
	t1313 = qJD(5) * t1258 + qJD(3);
	t1268 = -qJD(3) * t1346 - t1253 * t1314;
	t1311 = -qJD(5) * t1346 + t1258 * t1268 - t1260 * t1296;
	t1269 = qJD(2) * t1341 + t1316 * t1254;
	t1194 = t1269 * t1259 + t1317 * t1332;
	t1310 = -qJD(5) * t1352 - t1194;
	t1309 = qJD(5) * t1354 - t1196;
	t1193 = t1269 * t1252 - t1317 * t1331;
	t1282 = qJD(4) * t1353 - qJD(5) * t1232 + t1193 * t1258;
	t1308 = -qJD(6) * t1353 - t1250 * t1310 + t1257 * t1282;
	t1281 = qJD(4) * t1356 - qJD(5) * t1228 - t1195 * t1258;
	t1307 = qJD(6) * t1356 - t1250 * t1309 - t1257 * t1281;
	t1156 = (qJD(4) * t1341 - t1194) * t1258 + (-qJD(4) * t1232 - t1286) * t1251;
	t1306 = qJD(6) * t1360 + t1156;
	t1305 = qJD(6) * t1362 + t1158;
	t1192 = t1314 * t1333 - t1382;
	t1304 = qJD(6) * t1358 + t1192;
	t1155 = qJD(1) * t1241 + t1216 * qJD(4) - t1194 * t1251 - t1258 * t1329;
	t1278 = qJD(5) * t1361 + qJD(6) * t1216 - t1155 * t1257;
	t1303 = qJD(7) * t1361 + t1249 * t1306 + t1256 * t1278;
	t1277 = qJD(5) * t1363 + qJD(6) * t1210 - t1157 * t1257;
	t1302 = qJD(7) * t1363 + t1249 * t1305 + t1256 * t1277;
	t1136 = -qJD(5) * t1185 + t1156 * t1257 + t1193 * t1250;
	t1301 = qJD(7) * t1367 - t1136;
	t1300 = qJD(7) * t1368 + t1140;
	t1191 = -qJD(3) * t1325 - qJD(4) * t1334 - qJD(2) * t1343 + (qJD(2) * t1334 + t1323) * t1259;
	t1276 = qJD(5) * t1359 + qJD(6) * t1226 - t1191 * t1257;
	t1299 = qJD(7) * t1359 + t1249 * t1304 + t1256 * t1276;
	t1285 = -qJD(2) * t1346 - t1327;
	t1266 = qJD(5) * t1226 - t1285;
	t1154 = (t1192 - t1326) * t1257 - t1266 * t1250;
	t1298 = qJD(7) * t1364 - t1154;
	t1295 = t1314 * t1260;
	t1294 = (-qJD(3) * t1258 - qJD(5)) * t1259;
	t1186 = t1216 * t1257 - t1250 * t1288;
	t1165 = t1186 * t1256 + t1215 * t1249;
	t1164 = -t1186 * t1249 + t1215 * t1256;
	t1204 = -t1220 * t1257 + t1254 * t1322;
	t1219 = t1225 * t1254;
	t1176 = t1204 * t1256 - t1219 * t1249;
	t1206 = -t1222 * t1257 + t1261 * t1322;
	t1221 = t1225 * t1261;
	t1177 = t1206 * t1256 - t1221 * t1249;
	t1208 = t1226 * t1257 - t1322;
	t1179 = t1208 * t1256 + t1225 * t1249;
	t1178 = -t1208 * t1249 + t1225 * t1256;
	t1230 = t1259 * t1333 + t1345;
	t1214 = t1230 * t1257 - t1250 * t1346;
	t1229 = t1259 * t1334 - t1343;
	t1184 = t1214 * t1256 + t1229 * t1249;
	t1262 = -t1258 * t1295 + t1382;
	t1293 = t1226 * t1374 + (t1262 + t1326) * t1261;
	t1292 = -qJD(1) * t1222 + qJD(5) * t1324 + t1254 * t1262;
	t1290 = -t1250 * t1259 - t1252 * t1336;
	t1291 = qJD(6) * t1325 - t1290 * t1373 - (t1257 * t1294 + (t1250 * t1313 + t1257 * t1372) * t1252) * t1253;
	t1289 = -t1250 * t1347 + t1257 * t1259;
	t1201 = -t1232 * t1250 - t1288 * t1336;
	t1280 = -qJD(4) * t1352 - qJD(6) * t1201 + t1193 * t1251;
	t1199 = -t1227 * t1336 - t1228 * t1250;
	t1279 = -qJD(4) * t1354 - qJD(6) * t1199 - t1195 * t1251;
	t1275 = qJD(5) * t1360 - qJD(7) * (-t1215 * t1337 + t1216 * t1249) + t1155 * t1250;
	t1274 = qJD(5) * t1362 - qJD(7) * (-t1209 * t1337 + t1210 * t1249) + t1157 * t1250;
	t1273 = qJD(5) * t1358 - qJD(7) * (-t1225 * t1337 + t1226 * t1249) + t1191 * t1250;
	t1135 = qJD(5) * t1186 + t1156 * t1250 - t1193 * t1257;
	t1272 = -qJD(7) * t1186 - t1135 * t1256 + t1185 * t1371;
	t1271 = -qJD(7) * t1181 - t1137 * t1256 + t1180 * t1371;
	t1153 = -qJD(5) * t1322 + t1192 * t1250 + t1257 * t1266;
	t1270 = -qJD(7) * t1208 - t1153 * t1256 + t1207 * t1371;
	t1265 = qJD(2) * t1349 - qJD(3) * t1335 - qJD(5) * t1230;
	t1218 = t1290 * t1253;
	t1264 = -qJD(6) * t1218 + t1251 * t1285 - t1252 * t1323;
	t1263 = -t1315 * t1343 + (qJD(3) * t1349 - t1295) * t1251;
	t1217 = t1289 * t1253;
	t1213 = t1230 * t1250 + t1257 * t1346;
	t1205 = -t1222 * t1250 - t1261 * t1321;
	t1203 = -t1220 * t1250 - t1254 * t1321;
	t1202 = t1218 * t1256 - t1249 * t1325;
	t1200 = t1232 * t1257 - t1288 * t1350;
	t1198 = -t1227 * t1350 + t1228 * t1257;
	t1189 = t1268 * t1251 + t1315 * t1333;
	t1175 = t1201 * t1256 - t1288 * t1351;
	t1174 = t1199 * t1256 - t1227 * t1351;
	t1170 = -qJD(1) * t1221 + t1254 * t1263;
	t1168 = t1225 * t1374 + t1261 * t1263;
	t1166 = t1289 * t1373 + (-t1313 * t1348 + (t1252 * t1372 + t1294) * t1250) * t1253;
	t1152 = t1250 * t1265 + t1257 * t1311;
	t1151 = t1250 * t1311 - t1257 * t1265;
	t1150 = t1375 * t1250 + t1292 * t1257;
	t1149 = t1292 * t1250 - t1375 * t1257;
	t1148 = -t1376 * t1250 + t1293 * t1257;
	t1147 = t1293 * t1250 + t1376 * t1257;
	t1146 = t1249 * t1264 - t1256 * t1291;
	t1144 = t1250 * t1281 - t1257 * t1309;
	t1142 = t1250 * t1282 + t1257 * t1310;
	t1134 = qJD(6) * t1178 + t1154 * t1256 + t1191 * t1249;
	t1133 = -qJD(6) * t1179 - t1154 * t1249 + t1191 * t1256;
	t1132 = t1152 * t1256 + t1189 * t1249 + (-t1214 * t1249 + t1229 * t1256) * qJD(6);
	t1131 = t1249 * t1279 - t1256 * t1307;
	t1130 = t1249 * t1280 + t1256 * t1308;
	t1127 = t1150 * t1256 + t1170 * t1249 + (-t1204 * t1249 - t1219 * t1256) * qJD(6);
	t1126 = t1148 * t1256 + t1168 * t1249 + (-t1206 * t1249 - t1221 * t1256) * qJD(6);
	t1122 = qJD(6) * t1164 + t1136 * t1256 + t1155 * t1249;
	t1121 = -qJD(6) * t1165 - t1136 * t1249 + t1155 * t1256;
	t1120 = t1122 * t1255 - t1135 * t1248 + (-t1165 * t1248 - t1185 * t1255) * qJD(7);
	t1119 = -t1122 * t1248 - t1135 * t1255 + (-t1165 * t1255 + t1185 * t1248) * qJD(7);
	t1 = [t1393, t1126 * t1255 - t1147 * t1248 + (-t1177 * t1248 - t1205 * t1255) * qJD(7), t1130 * t1255 - t1142 * t1248 + (-t1175 * t1248 - t1200 * t1255) * qJD(7), t1248 * t1275 + t1255 * t1303, t1248 * t1301 + t1255 * t1272, t1121 * t1255 - t1164 * t1370, t1119; t1120, t1127 * t1255 - t1149 * t1248 + (-t1176 * t1248 - t1203 * t1255) * qJD(7), t1131 * t1255 - t1144 * t1248 + (-t1174 * t1248 - t1198 * t1255) * qJD(7), t1248 * t1274 + t1255 * t1302, t1248 * t1300 + t1255 * t1271, -t1255 * t1389 + t1370 * t1385, t1394; 0, t1132 * t1255 - t1151 * t1248 + (-t1184 * t1248 - t1213 * t1255) * qJD(7), t1146 * t1255 - t1166 * t1248 + (-t1202 * t1248 - t1217 * t1255) * qJD(7), t1248 * t1273 + t1255 * t1299, t1248 * t1298 + t1255 * t1270, t1133 * t1255 - t1178 * t1370, -t1134 * t1248 - t1153 * t1255 + (-t1179 * t1255 + t1207 * t1248) * qJD(7); -t1394, -t1126 * t1248 - t1147 * t1255 + (-t1177 * t1255 + t1205 * t1248) * qJD(7), -t1130 * t1248 - t1142 * t1255 + (-t1175 * t1255 + t1200 * t1248) * qJD(7), -t1248 * t1303 + t1255 * t1275, -t1248 * t1272 + t1255 * t1301, -t1121 * t1248 - t1164 * t1369, -t1120; t1119, -t1127 * t1248 - t1149 * t1255 + (-t1176 * t1255 + t1203 * t1248) * qJD(7), -t1131 * t1248 - t1144 * t1255 + (-t1174 * t1255 + t1198 * t1248) * qJD(7), -t1248 * t1302 + t1255 * t1274, -t1248 * t1271 + t1255 * t1300, t1248 * t1389 + t1369 * t1385, t1393; 0, -t1132 * t1248 - t1151 * t1255 + (-t1184 * t1255 + t1213 * t1248) * qJD(7), -t1146 * t1248 - t1166 * t1255 + (-t1202 * t1255 + t1217 * t1248) * qJD(7), -t1248 * t1299 + t1255 * t1273, -t1248 * t1270 + t1255 * t1298, -t1133 * t1248 - t1178 * t1369, -t1134 * t1255 + t1153 * t1248 + (t1179 * t1248 + t1207 * t1255) * qJD(7); t1389, -qJD(6) * t1177 - t1148 * t1249 + t1168 * t1256, -t1249 * t1308 + t1256 * t1280, -t1249 * t1278 + t1256 * t1306, qJD(6) * t1367 + t1135 * t1249, -t1122, 0; t1121, -qJD(6) * t1176 - t1150 * t1249 + t1170 * t1256, t1249 * t1307 + t1256 * t1279, -t1249 * t1277 + t1256 * t1305, qJD(6) * t1368 + t1137 * t1249, t1125, 0; 0, -qJD(6) * t1184 - t1152 * t1249 + t1189 * t1256, t1249 * t1291 + t1256 * t1264, -t1249 * t1276 + t1256 * t1304, qJD(6) * t1364 + t1153 * t1249, -t1134, 0;];
	JRD_rot = t1;
else
	JRD_rot=NaN(9,7);
end