% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta3,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 13:41
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRPR4_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR4_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR4_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR4_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR4_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRPR4_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 13:38:31
% EndTime: 2019-05-06 13:39:50
% DurationCPUTime: 70.90s
% Computational Cost: add. (685880->1116), mult. (1829313->1817), div. (0->0), fcn. (1479221->14), ass. (0->806)
t1232 = sin(pkin(12));
t1233 = sin(pkin(11));
t1236 = cos(pkin(11));
t1234 = sin(pkin(6));
t1244 = cos(qJ(2));
t1394 = qJD(1) * t1244;
t1351 = t1234 * t1394;
t1240 = sin(qJ(2));
t1367 = t1234 * t1240;
t1352 = qJD(1) * t1367;
t1191 = t1233 * t1351 + t1236 * t1352;
t1237 = cos(pkin(6));
t1223 = qJD(1) * t1237 + qJD(2);
t1239 = sin(qJ(4));
t1243 = cos(qJ(4));
t1163 = -t1239 * t1191 + t1223 * t1243;
t1164 = t1191 * t1243 + t1223 * t1239;
t1235 = cos(pkin(12));
t1107 = -t1235 * t1163 + t1164 * t1232;
t1109 = t1232 * t1163 + t1235 * t1164;
t1036 = t1109 * t1107;
t1357 = qJDD(1) * t1240;
t1197 = (qJD(2) * t1394 + t1357) * t1234;
t1358 = qJDD(1) * t1234;
t1198 = -qJD(2) * t1352 + t1244 * t1358;
t1331 = t1197 * t1233 - t1236 * t1198;
t1148 = qJDD(4) + t1331;
t1419 = -t1036 + t1148;
t1431 = t1232 * t1419;
t1430 = t1235 * t1419;
t1238 = sin(qJ(6));
t1150 = t1236 * t1197 + t1233 * t1198;
t1356 = t1237 * qJDD(1) + qJDD(2);
t1332 = t1239 * t1150 - t1243 * t1356;
t1087 = -qJD(4) * t1164 - t1332;
t1088 = t1163 * qJD(4) + t1243 * t1150 + t1239 * t1356;
t1334 = -t1235 * t1087 + t1088 * t1232;
t1325 = qJDD(6) + t1334;
t1189 = t1233 * t1352 - t1236 * t1351;
t1185 = qJD(4) + t1189;
t1242 = cos(qJ(6));
t1069 = t1109 * t1238 - t1242 * t1185;
t1071 = t1109 * t1242 + t1185 * t1238;
t994 = t1071 * t1069;
t1424 = t1325 - t994;
t1429 = t1238 * t1424;
t1115 = t1163 * t1164;
t1418 = t1115 + t1148;
t1428 = t1239 * t1418;
t1427 = t1242 * t1424;
t1426 = t1243 * t1418;
t1375 = t1191 * t1223;
t1425 = t1331 + t1375;
t1384 = t1109 * t1185;
t963 = t1334 + t1384;
t1229 = t1234 ^ 2;
t1246 = qJD(1) ^ 2;
t1366 = t1237 * t1246;
t1395 = qJD(1) * t1223;
t1423 = t1229 * (-t1366 + t1395);
t1376 = t1189 * t1191;
t1326 = t1356 - t1376;
t1422 = t1233 * t1326;
t1421 = t1236 * t1326;
t1206 = t1223 * t1352;
t1170 = t1198 - t1206;
t1420 = t1237 * t1170;
t1012 = t1087 * t1232 + t1088 * t1235;
t1077 = t1185 * t1107;
t965 = t1012 - t1077;
t1130 = t1185 * t1163;
t1041 = t1130 - t1088;
t1039 = t1130 + t1088;
t1174 = t1223 * t1189;
t1417 = -t1174 + t1150;
t1207 = t1223 * t1351;
t1167 = t1207 + t1197;
t1104 = qJD(6) + t1107;
t1015 = t1104 * t1069;
t1339 = t1069 * qJD(6) - t1242 * t1012 - t1238 * t1148;
t897 = t1339 + t1015;
t1241 = sin(qJ(1));
t1245 = cos(qJ(1));
t1218 = g(1) * t1241 - t1245 * g(2);
t1276 = qJDD(1) * pkin(1) + t1218;
t1408 = pkin(8) * t1234;
t1256 = t1246 * t1408 + t1276;
t1253 = t1237 * t1256;
t1219 = g(1) * t1245 + g(2) * t1241;
t1254 = -pkin(1) * t1246 + pkin(8) * t1358 - t1219;
t1134 = -g(3) * t1367 + t1240 * t1253 + t1244 * t1254;
t1274 = pkin(2) * t1223 - qJ(3) * t1352;
t1231 = t1244 ^ 2;
t1368 = t1229 * t1246;
t1343 = t1231 * t1368;
t1074 = -pkin(2) * t1343 + t1198 * qJ(3) - t1223 * t1274 + t1134;
t1252 = t1240 * t1254;
t1364 = t1240 * t1246;
t1342 = t1229 * t1364;
t1249 = -t1252 - t1197 * qJ(3) + t1356 * pkin(2) + (t1237 * t1276 + pkin(2) * t1342 + (pkin(8) * t1366 + qJ(3) * t1395 - g(3)) * t1234) * t1244;
t982 = -0.2e1 * qJD(3) * t1189 + t1236 * t1074 + t1233 * t1249;
t1336 = t1238 * t1012 - t1242 * t1148;
t892 = (qJD(6) - t1104) * t1071 + t1336;
t1042 = (qJD(4) - t1185) * t1164 + t1332;
t1175 = t1237 * g(3) + t1234 * t1256;
t1103 = t1198 * pkin(2) + qJ(3) * t1343 - t1274 * t1352 - qJDD(3) + t1175;
t1416 = -pkin(9) * t1417 - t1103;
t1067 = t1069 ^ 2;
t1068 = t1071 ^ 2;
t1102 = t1104 ^ 2;
t1105 = t1107 ^ 2;
t1106 = t1109 ^ 2;
t1160 = t1163 ^ 2;
t1161 = t1164 ^ 2;
t1415 = t1185 ^ 2;
t1187 = t1189 ^ 2;
t1188 = t1191 ^ 2;
t1205 = t1223 ^ 2;
t1414 = 0.2e1 * qJD(3);
t1413 = 2 * qJD(5);
t1412 = pkin(2) * t1234;
t1411 = pkin(2) * t1237;
t1410 = pkin(3) * t1233;
t1409 = pkin(5) * t1232;
t1030 = pkin(5) * t1107 - pkin(10) * t1109;
t1250 = pkin(3) * t1425 + t1416;
t1143 = pkin(3) * t1189 - pkin(9) * t1191;
t1255 = pkin(9) * t1356 - t1189 * t1143 + t982;
t1251 = -pkin(3) * t1205 + t1255;
t884 = t1239 * t1251 - t1243 * t1250;
t1248 = pkin(4) * t1418 + qJ(5) * t1041 - t884;
t1127 = pkin(4) * t1185 - qJ(5) * t1164;
t885 = t1239 * t1250 + t1243 * t1251;
t842 = -pkin(4) * t1160 + qJ(5) * t1087 - t1127 * t1185 + t885;
t752 = -0.2e1 * qJD(5) * t1107 + t1232 * t1248 + t1235 * t842;
t739 = -pkin(5) * t1415 + pkin(10) * t1148 - t1030 * t1107 + t752;
t1335 = t1233 * t1074 - t1236 * t1249;
t942 = -t1356 * pkin(3) - t1205 * pkin(9) + (t1414 + t1143) * t1191 + t1335;
t886 = -t1087 * pkin(4) - t1160 * qJ(5) + t1164 * t1127 + qJDD(5) + t942;
t798 = pkin(5) * t963 - pkin(10) * t965 + t886;
t688 = t1238 * t798 + t1242 * t739;
t1407 = t1232 * t886;
t1406 = t1235 * t886;
t1338 = t1232 * t842 - t1235 * t1248;
t738 = -t1148 * pkin(5) - t1415 * pkin(10) + (t1413 + t1030) * t1109 + t1338;
t1405 = t1238 * t738;
t915 = t1325 + t994;
t1404 = t1238 * t915;
t751 = t1109 * t1413 + t1338;
t680 = t1232 * t752 - t1235 * t751;
t1403 = t1239 * t680;
t1402 = t1239 * t942;
t981 = t1191 * t1414 + t1335;
t901 = t1233 * t982 - t1236 * t981;
t1401 = t1240 * t901;
t1400 = t1242 * t738;
t1399 = t1242 * t915;
t1398 = t1243 * t680;
t1397 = t1243 * t942;
t1396 = t1244 * t901;
t1004 = t1036 + t1148;
t1392 = t1004 * t1232;
t1391 = t1004 * t1235;
t1059 = -t1115 + t1148;
t1390 = t1059 * t1239;
t1389 = t1059 * t1243;
t1388 = t1103 * t1233;
t1387 = t1103 * t1236;
t1386 = t1104 * t1238;
t1385 = t1104 * t1242;
t1138 = -t1356 - t1376;
t1383 = t1138 * t1233;
t1382 = t1138 * t1236;
t1381 = t1148 * t1233;
t1380 = t1185 * t1232;
t1379 = t1185 * t1235;
t1378 = t1185 * t1239;
t1377 = t1185 * t1243;
t1217 = t1244 * t1342;
t1195 = t1217 + t1356;
t1374 = t1195 * t1240;
t1373 = t1195 * t1244;
t1196 = -t1217 + t1356;
t1372 = t1196 * t1240;
t1371 = t1196 * t1244;
t1370 = t1223 * t1233;
t1369 = t1223 * t1236;
t1365 = t1240 * t1175;
t1363 = t1244 * t1175;
t1230 = t1240 ^ 2;
t1359 = t1230 + t1231;
t1355 = -pkin(3) * t1236 - pkin(2);
t1354 = -pkin(5) * t1235 - pkin(4);
t1353 = t1234 * t1395;
t1350 = t1232 * t994;
t1349 = t1235 * t994;
t1348 = t1233 * t1036;
t1347 = t1236 * t1036;
t1346 = t1233 * t1115;
t1345 = t1236 * t1115;
t1344 = t1230 * t1368;
t1341 = t1234 * t1376;
t1340 = t1237 * t1376;
t681 = t1232 * t751 + t1235 * t752;
t902 = t1233 * t981 + t1236 * t982;
t687 = t1238 * t739 - t1242 * t798;
t800 = t1239 * t884 + t1243 * t885;
t1179 = -t1218 * t1241 - t1245 * t1219;
t1330 = t1234 * t1356;
t1216 = qJDD(1) * t1245 - t1241 * t1246;
t1329 = -pkin(7) * t1216 - g(3) * t1241;
t1186 = -t1205 - t1344;
t1139 = -t1186 * t1240 - t1371;
t1328 = pkin(8) * t1139 - t1365;
t1202 = -t1343 - t1205;
t1153 = t1202 * t1244 - t1374;
t1327 = pkin(8) * t1153 + t1363;
t645 = t1238 * t688 - t1242 * t687;
t646 = t1238 * t687 + t1242 * t688;
t799 = t1239 * t885 - t1243 * t884;
t618 = t1232 * t646 - t1235 * t738;
t619 = t1232 * t738 + t1235 * t646;
t593 = -t1239 * t618 + t1243 * t619;
t575 = t1233 * t593 - t1236 * t645;
t576 = t1233 * t645 + t1236 * t593;
t1324 = t1240 * t576 + t1244 * t575;
t640 = t1243 * t681 - t1403;
t628 = t1233 * t640 - t1236 * t886;
t629 = t1233 * t886 + t1236 * t640;
t1323 = t1240 * t629 + t1244 * t628;
t896 = -t1015 + t1339;
t805 = -t1238 * t896 - t1242 * t892;
t943 = t1067 + t1068;
t769 = t1232 * t805 + t1235 * t943;
t770 = -t1232 * t943 + t1235 * t805;
t702 = -t1239 * t769 + t1243 * t770;
t803 = -t1238 * t892 + t1242 * t896;
t672 = t1233 * t702 - t1236 * t803;
t673 = t1233 * t803 + t1236 * t702;
t1322 = t1240 * t673 + t1244 * t672;
t893 = (-qJD(6) - t1104) * t1071 - t1336;
t804 = t1238 * t897 + t1242 * t893;
t991 = -t1068 + t1067;
t775 = t1232 * t804 + t1235 * t991;
t776 = -t1232 * t991 + t1235 * t804;
t711 = -t1239 * t775 + t1243 * t776;
t802 = -t1238 * t893 + t1242 * t897;
t676 = t1233 * t711 + t1236 * t802;
t677 = -t1233 * t802 + t1236 * t711;
t1321 = t1240 * t677 + t1244 * t676;
t962 = -t1102 - t1067;
t851 = t1242 * t962 - t1429;
t778 = t1232 * t851 + t1235 * t893;
t779 = -t1232 * t893 + t1235 * t851;
t713 = -t1239 * t778 + t1243 * t779;
t850 = t1238 * t962 + t1427;
t682 = t1233 * t713 - t1236 * t850;
t683 = t1233 * t850 + t1236 * t713;
t1320 = t1240 * t683 + t1244 * t682;
t972 = -t1068 - t1102;
t858 = -t1238 * t972 - t1399;
t781 = t1232 * t858 + t1235 * t897;
t782 = -t1232 * t897 + t1235 * t858;
t718 = -t1239 * t781 + t1243 * t782;
t857 = t1242 * t972 - t1404;
t685 = t1233 * t718 - t1236 * t857;
t686 = t1233 * t857 + t1236 * t718;
t1319 = t1240 * t686 + t1244 * t685;
t1014 = -t1068 + t1102;
t874 = -t1014 * t1238 + t1427;
t792 = t1232 * t874 + t1235 * t896;
t794 = -t1232 * t896 + t1235 * t874;
t721 = -t1239 * t792 + t1243 * t794;
t872 = -t1014 * t1242 - t1429;
t693 = t1233 * t721 + t1236 * t872;
t695 = -t1233 * t872 + t1236 * t721;
t1318 = t1240 * t695 + t1244 * t693;
t1013 = t1067 - t1102;
t875 = t1013 * t1242 - t1404;
t793 = t1232 * t875 + t1235 * t892;
t795 = -t1232 * t892 + t1235 * t875;
t722 = -t1239 * t793 + t1243 * t795;
t873 = -t1013 * t1238 - t1399;
t694 = t1233 * t722 + t1236 * t873;
t696 = -t1233 * t873 + t1236 * t722;
t1317 = t1240 * t696 + t1244 * t694;
t930 = -qJD(6) * t1071 - t1336;
t888 = t1069 * t1385 - t1238 * t930;
t843 = t1232 * t888 + t1349;
t845 = t1235 * t888 - t1350;
t762 = -t1239 * t843 + t1243 * t845;
t887 = -t1069 * t1386 - t1242 * t930;
t729 = t1233 * t762 + t1236 * t887;
t731 = -t1233 * t887 + t1236 * t762;
t1316 = t1240 * t731 + t1244 * t729;
t890 = -t1071 * t1386 - t1242 * t1339;
t844 = t1232 * t890 - t1349;
t846 = t1235 * t890 + t1350;
t763 = -t1239 * t844 + t1243 * t846;
t889 = -t1071 * t1385 + t1238 * t1339;
t730 = t1233 * t763 + t1236 * t889;
t732 = -t1233 * t889 + t1236 * t763;
t1315 = t1240 * t732 + t1244 * t730;
t922 = (-t1069 * t1242 + t1071 * t1238) * t1104;
t880 = t1232 * t922 - t1235 * t1325;
t881 = t1232 * t1325 + t1235 * t922;
t791 = -t1239 * t880 + t1243 * t881;
t921 = (t1069 * t1238 + t1071 * t1242) * t1104;
t756 = t1233 * t791 + t1236 * t921;
t757 = -t1233 * t921 + t1236 * t791;
t1314 = t1240 * t757 + t1244 * t756;
t764 = t1233 * t800 - t1236 * t942;
t765 = t1233 * t942 + t1236 * t800;
t1313 = t1240 * t765 + t1244 * t764;
t967 = -t1012 - t1077;
t968 = t1334 - t1384;
t877 = -t1232 * t968 + t1235 * t967;
t879 = -t1232 * t967 - t1235 * t968;
t786 = -t1239 * t877 + t1243 * t879;
t983 = -t1105 - t1106;
t766 = t1233 * t786 - t1236 * t983;
t767 = t1233 * t983 + t1236 * t786;
t1312 = t1240 * t767 + t1244 * t766;
t1031 = -t1106 + t1105;
t876 = -t1232 * t963 + t1235 * t965;
t878 = -t1232 * t965 - t1235 * t963;
t785 = -t1239 * t876 + t1243 * t878;
t772 = t1031 * t1236 + t1233 * t785;
t773 = -t1031 * t1233 + t1236 * t785;
t1311 = t1240 * t773 + t1244 * t772;
t1023 = -t1415 - t1105;
t919 = t1023 * t1232 + t1430;
t920 = t1023 * t1235 - t1431;
t835 = -t1239 * t919 + t1243 * t920;
t807 = t1233 * t835 - t1236 * t963;
t808 = t1233 * t963 + t1236 * t835;
t1310 = t1240 * t808 + t1244 * t807;
t1055 = -t1106 - t1415;
t939 = t1055 * t1235 - t1392;
t940 = -t1055 * t1232 - t1391;
t860 = -t1239 * t939 + t1243 * t940;
t817 = t1233 * t860 - t1236 * t965;
t818 = t1233 * t965 + t1236 * t860;
t1309 = t1240 * t818 + t1244 * t817;
t1076 = -t1106 + t1415;
t944 = t1076 * t1235 + t1431;
t946 = -t1076 * t1232 + t1430;
t866 = -t1239 * t944 + t1243 * t946;
t823 = t1233 * t866 + t1236 * t967;
t825 = -t1233 * t967 + t1236 * t866;
t1308 = t1240 * t825 + t1244 * t823;
t1075 = t1105 - t1415;
t945 = t1075 * t1232 + t1391;
t947 = t1075 * t1235 - t1392;
t867 = -t1239 * t945 + t1243 * t947;
t824 = t1233 * t867 + t1236 * t968;
t826 = -t1233 * t968 + t1236 * t867;
t1307 = t1240 * t826 + t1244 * t824;
t957 = t1107 * t1380 - t1235 * t1334;
t958 = t1107 * t1379 + t1232 * t1334;
t870 = -t1239 * t957 + t1243 * t958;
t838 = t1233 * t870 + t1347;
t840 = t1236 * t870 - t1348;
t1306 = t1240 * t840 + t1244 * t838;
t959 = t1012 * t1232 + t1109 * t1379;
t960 = t1012 * t1235 - t1109 * t1380;
t871 = -t1239 * t959 + t1243 * t960;
t839 = t1233 * t871 - t1347;
t841 = t1236 * t871 + t1348;
t1305 = t1240 * t841 + t1244 * t839;
t1304 = t1240 * t902 + t1396;
t1140 = t1236 * t1148;
t1000 = (-t1107 * t1235 + t1109 * t1232) * t1185;
t999 = (-t1107 * t1232 - t1109 * t1235) * t1185;
t913 = t1000 * t1243 - t1239 * t999;
t908 = t1233 * t913 - t1140;
t909 = t1236 * t913 + t1381;
t1303 = t1240 * t909 + t1244 * t908;
t1073 = t1160 + t1161;
t951 = -t1041 * t1239 - t1042 * t1243;
t910 = t1073 * t1236 + t1233 * t951;
t911 = -t1073 * t1233 + t1236 * t951;
t1302 = t1240 * t911 + t1244 * t910;
t1114 = -t1161 + t1160;
t1037 = (-qJD(4) - t1185) * t1164 - t1332;
t950 = t1037 * t1243 - t1039 * t1239;
t917 = t1114 * t1236 + t1233 * t950;
t918 = -t1114 * t1233 + t1236 * t950;
t1301 = t1240 * t918 + t1244 * t917;
t1082 = -t1415 - t1160;
t993 = t1082 * t1243 - t1428;
t925 = t1037 * t1236 + t1233 * t993;
t926 = -t1037 * t1233 + t1236 * t993;
t1300 = t1240 * t926 + t1244 * t925;
t1095 = -t1161 - t1415;
t1002 = -t1095 * t1239 - t1389;
t927 = t1002 * t1233 - t1039 * t1236;
t928 = t1002 * t1236 + t1039 * t1233;
t1299 = t1240 * t928 + t1244 * t927;
t1129 = -t1161 + t1415;
t1020 = -t1129 * t1239 + t1426;
t934 = t1020 * t1233 + t1041 * t1236;
t936 = t1020 * t1236 - t1041 * t1233;
t1298 = t1240 * t936 + t1244 * t934;
t1128 = t1160 - t1415;
t1021 = t1128 * t1243 - t1390;
t935 = t1021 * t1233 + t1042 * t1236;
t937 = t1021 * t1236 - t1042 * t1233;
t1297 = t1240 * t937 + t1244 * t935;
t1033 = -t1087 * t1239 - t1163 * t1377;
t984 = t1033 * t1233 - t1345;
t986 = t1033 * t1236 + t1346;
t1296 = t1240 * t986 + t1244 * t984;
t1035 = t1088 * t1243 - t1164 * t1378;
t985 = t1035 * t1233 + t1345;
t987 = t1035 * t1236 - t1346;
t1295 = t1240 * t987 + t1244 * t985;
t1057 = (t1163 * t1243 + t1164 * t1239) * t1185;
t1024 = t1057 * t1233 - t1140;
t1025 = t1057 * t1236 + t1381;
t1293 = t1024 * t1244 + t1025 * t1240;
t1044 = -t1233 * t1425 + t1236 * t1417;
t1046 = -t1233 * t1417 - t1236 * t1425;
t1292 = t1044 * t1244 + t1046 * t1240;
t1120 = t1174 + t1150;
t1275 = -t1331 + t1375;
t1045 = -t1120 * t1236 + t1233 * t1275;
t1047 = t1120 * t1233 + t1236 * t1275;
t1291 = t1045 * t1244 + t1047 * t1240;
t1135 = -t1205 - t1187;
t1063 = t1135 * t1233 + t1421;
t1064 = t1135 * t1236 - t1422;
t1290 = t1063 * t1244 + t1064 * t1240;
t1158 = -t1188 - t1205;
t1080 = t1158 * t1236 + t1383;
t1081 = -t1158 * t1233 + t1382;
t1289 = t1080 * t1244 + t1081 * t1240;
t1172 = -t1188 + t1205;
t1089 = t1172 * t1236 + t1422;
t1091 = -t1172 * t1233 + t1421;
t1288 = t1089 * t1244 + t1091 * t1240;
t1171 = t1187 - t1205;
t1090 = t1171 * t1233 - t1382;
t1092 = t1171 * t1236 + t1383;
t1287 = t1090 * t1244 + t1092 * t1240;
t1110 = t1189 * t1370 - t1236 * t1331;
t1111 = t1189 * t1369 + t1233 * t1331;
t1286 = t1110 * t1244 + t1111 * t1240;
t1112 = t1150 * t1233 + t1191 * t1369;
t1113 = t1150 * t1236 - t1191 * t1370;
t1285 = t1112 * t1244 + t1113 * t1240;
t1125 = (-t1189 * t1233 - t1191 * t1236) * t1223;
t1126 = (-t1189 * t1236 + t1191 * t1233) * t1223;
t1284 = t1125 * t1244 + t1126 * t1240;
t1133 = t1252 + (t1234 * g(3) - t1253) * t1244;
t1283 = -t1244 * t1133 + t1240 * t1134;
t1061 = t1133 * t1240 + t1134 * t1244;
t1282 = t1167 * t1244 + t1170 * t1240;
t1168 = -t1207 + t1197;
t1169 = t1198 + t1206;
t1281 = -t1168 * t1244 + t1169 * t1240;
t1280 = t1186 * t1244 - t1372;
t1200 = -t1344 + t1205;
t1279 = t1200 * t1244 + t1374;
t1278 = t1202 * t1240 + t1373;
t1201 = t1343 - t1205;
t1277 = t1201 * t1240 + t1371;
t1178 = t1218 * t1245 - t1219 * t1241;
t572 = qJ(5) * t619 + (-pkin(10) * t1232 + t1354) * t645;
t583 = -qJ(5) * t618 + (-pkin(10) * t1235 + t1409) * t645;
t592 = t1239 * t619 + t1243 * t618;
t554 = -pkin(9) * t592 - t1239 * t572 + t1243 * t583;
t565 = -pkin(3) * t592 - pkin(4) * t618 + pkin(5) * t738 - pkin(10) * t646;
t541 = -pkin(2) * t592 + qJ(3) * t576 + t1233 * t554 + t1236 * t565;
t544 = -qJ(3) * t575 - t1233 * t565 + t1236 * t554;
t557 = -t1240 * t575 + t1244 * t576;
t1273 = pkin(8) * t557 + t1240 * t544 + t1244 * t541;
t627 = -pkin(10) * t803 - t645;
t604 = qJ(5) * t770 + t1232 * t627 + t1354 * t803;
t609 = -qJ(5) * t769 + t1235 * t627 + t1409 * t803;
t701 = t1239 * t770 + t1243 * t769;
t574 = -pkin(9) * t701 - t1239 * t604 + t1243 * t609;
t602 = -pkin(3) * t701 - pkin(4) * t769 - pkin(5) * t943 - pkin(10) * t805 - t646;
t559 = -pkin(2) * t701 + qJ(3) * t673 + t1233 * t574 + t1236 * t602;
t560 = -qJ(3) * t672 - t1233 * t602 + t1236 * t574;
t622 = -t1240 * t672 + t1244 * t673;
t1272 = pkin(8) * t622 + t1240 * t560 + t1244 * t559;
t639 = t1239 * t681 + t1398;
t671 = -pkin(4) * t886 + qJ(5) * t681;
t599 = -pkin(9) * t639 - qJ(5) * t1398 - t1239 * t671;
t607 = -pkin(3) * t639 - pkin(4) * t680;
t561 = -pkin(2) * t639 + qJ(3) * t629 + t1233 * t599 + t1236 * t607;
t567 = -qJ(3) * t628 - t1233 * t607 + t1236 * t599;
t598 = -t1240 * t628 + t1244 * t629;
t1271 = pkin(8) * t598 + t1240 * t567 + t1244 * t561;
t674 = -pkin(5) * t850 + t687;
t705 = -pkin(10) * t850 + t1405;
t616 = -pkin(4) * t850 + qJ(5) * t779 + t1232 * t705 + t1235 * t674;
t623 = -qJ(5) * t778 - t1232 * t674 + t1235 * t705;
t712 = t1239 * t779 + t1243 * t778;
t585 = -pkin(9) * t712 - t1239 * t616 + t1243 * t623;
t631 = -pkin(3) * t712 - pkin(4) * t778 - pkin(5) * t893 - pkin(10) * t851 + t1400;
t566 = -pkin(2) * t712 + qJ(3) * t683 + t1233 * t585 + t1236 * t631;
t569 = -qJ(3) * t682 - t1233 * t631 + t1236 * t585;
t641 = -t1240 * t682 + t1244 * t683;
t1270 = pkin(8) * t641 + t1240 * t569 + t1244 * t566;
t675 = -pkin(5) * t857 + t688;
t707 = -pkin(10) * t857 + t1400;
t617 = -pkin(4) * t857 + qJ(5) * t782 + t1232 * t707 + t1235 * t675;
t624 = -qJ(5) * t781 - t1232 * t675 + t1235 * t707;
t717 = t1239 * t782 + t1243 * t781;
t587 = -pkin(9) * t717 - t1239 * t617 + t1243 * t624;
t637 = -pkin(3) * t717 - pkin(4) * t781 - pkin(5) * t897 - pkin(10) * t858 - t1405;
t568 = -pkin(2) * t717 + qJ(3) * t686 + t1233 * t587 + t1236 * t637;
t570 = -qJ(3) * t685 - t1233 * t637 + t1236 * t587;
t644 = -t1240 * t685 + t1244 * t686;
t1269 = pkin(8) * t644 + t1240 * t570 + t1244 * t568;
t661 = -pkin(4) * t983 + qJ(5) * t879 + t681;
t669 = -qJ(5) * t877 - t680;
t784 = t1239 * t879 + t1243 * t877;
t610 = -pkin(9) * t784 - t1239 * t661 + t1243 * t669;
t746 = -pkin(3) * t784 - pkin(4) * t877;
t600 = -pkin(2) * t784 + qJ(3) * t767 + t1233 * t610 + t1236 * t746;
t601 = -qJ(3) * t766 - t1233 * t746 + t1236 * t610;
t699 = -t1240 * t766 + t1244 * t767;
t1268 = pkin(8) * t699 + t1240 * t601 + t1244 * t600;
t780 = -pkin(4) * t963 + qJ(5) * t920 - t1406;
t820 = -qJ(5) * t919 + t1407;
t834 = t1239 * t920 + t1243 * t919;
t690 = -pkin(9) * t834 - t1239 * t780 + t1243 * t820;
t700 = -pkin(3) * t834 - pkin(4) * t919 + t751;
t625 = -pkin(2) * t834 + qJ(3) * t808 + t1233 * t690 + t1236 * t700;
t638 = -qJ(3) * t807 - t1233 * t700 + t1236 * t690;
t725 = -t1240 * t807 + t1244 * t808;
t1267 = pkin(8) * t725 + t1240 * t638 + t1244 * t625;
t787 = -pkin(4) * t965 + qJ(5) * t940 + t1407;
t827 = -qJ(5) * t939 + t1406;
t859 = t1239 * t940 + t1243 * t939;
t703 = -pkin(9) * t859 - t1239 * t787 + t1243 * t827;
t706 = -pkin(3) * t859 - pkin(4) * t939 + t752;
t630 = -pkin(2) * t859 + qJ(3) * t818 + t1233 * t703 + t1236 * t706;
t643 = -qJ(3) * t817 - t1233 * t706 + t1236 * t703;
t741 = -t1240 * t817 + t1244 * t818;
t1266 = pkin(8) * t741 + t1240 * t643 + t1244 * t630;
t656 = qJ(3) * t765 + (-pkin(9) * t1233 + t1355) * t799;
t678 = -qJ(3) * t764 + (-pkin(9) * t1236 + t1410) * t799;
t697 = -t1240 * t764 + t1244 * t765;
t1265 = pkin(8) * t697 + t1240 * t678 + t1244 * t656;
t949 = t1041 * t1243 - t1042 * t1239;
t768 = -pkin(9) * t949 - t799;
t716 = qJ(3) * t911 + t1233 * t768 + t1355 * t949;
t724 = -qJ(3) * t910 + t1236 * t768 + t1410 * t949;
t830 = -t1240 * t910 + t1244 * t911;
t1264 = pkin(8) * t830 + t1240 * t724 + t1244 * t716;
t992 = t1082 * t1239 + t1426;
t837 = t1239 * t1255 - t1243 * t1416 + (-t1205 * t1239 - t1243 * t1425 - t992) * pkin(3);
t891 = -pkin(9) * t992 + t1402;
t742 = -pkin(2) * t992 + qJ(3) * t926 + t1233 * t891 + t1236 * t837;
t749 = -qJ(3) * t925 - t1233 * t837 + t1236 * t891;
t848 = -t1240 * t925 + t1244 * t926;
t1263 = pkin(8) * t848 + t1240 * t749 + t1244 * t742;
t1001 = t1095 * t1243 - t1390;
t847 = -pkin(3) * t1001 + t885;
t900 = -pkin(9) * t1001 + t1397;
t743 = -pkin(2) * t1001 + qJ(3) * t928 + t1233 * t900 + t1236 * t847;
t755 = -qJ(3) * t927 - t1233 * t847 + t1236 * t900;
t849 = -t1240 * t927 + t1244 * t928;
t1262 = pkin(8) * t849 + t1240 * t755 + t1244 * t743;
t1124 = -t1187 - t1188;
t852 = -pkin(2) * t1124 + qJ(3) * t1047 + t902;
t863 = -qJ(3) * t1045 - t901;
t956 = -t1045 * t1240 + t1047 * t1244;
t1261 = pkin(8) * t956 + t1240 * t863 + t1244 * t852;
t1010 = -qJ(3) * t1063 - t1388;
t973 = -pkin(2) * t1425 + qJ(3) * t1064 + t1387;
t990 = -t1063 * t1240 + t1064 * t1244;
t1260 = pkin(8) * t990 + t1010 * t1240 + t1244 * t973;
t1008 = -t1080 * t1240 + t1081 * t1244;
t1022 = -qJ(3) * t1080 - t1387;
t979 = -pkin(2) * t1417 + qJ(3) * t1081 - t1388;
t1259 = pkin(8) * t1008 + t1022 * t1240 + t1244 * t979;
t1122 = t1168 * t1240 + t1169 * t1244;
t1258 = pkin(8) * t1122 + t1061;
t814 = t1244 * t902 - t1401;
t882 = pkin(2) * t1103 + qJ(3) * t902;
t1257 = pkin(8) * t814 - qJ(3) * t1401 + t1244 * t882;
t1228 = t1234 * t1229;
t1215 = qJDD(1) * t1241 + t1245 * t1246;
t1209 = t1237 * t1356;
t1204 = t1359 * t1368;
t1203 = (t1230 - t1231) * t1368;
t1199 = -pkin(7) * t1215 + g(3) * t1245;
t1173 = t1359 * t1353;
t1166 = (t1357 + (qJD(2) + t1223) * t1394) * t1234;
t1165 = t1197 * t1244 - t1230 * t1353;
t1162 = -t1198 * t1240 - t1231 * t1353;
t1152 = t1201 * t1244 - t1372;
t1151 = -t1200 * t1240 + t1373;
t1147 = t1188 - t1187;
t1132 = (t1228 * t1244 * t1246 + t1167 * t1237) * t1240;
t1131 = (-t1228 * t1364 + t1420) * t1244;
t1123 = -t1167 * t1240 + t1170 * t1244;
t1101 = t1234 * t1170 + t1237 * t1278;
t1100 = -t1234 * t1169 + t1237 * t1277;
t1099 = -t1234 * t1168 + t1237 * t1279;
t1098 = t1234 * t1278 - t1420;
t1094 = -t1234 * t1166 + t1237 * t1280;
t1093 = t1237 * t1166 + t1234 * t1280;
t1086 = -t1234 * t1203 + t1237 * t1282;
t1085 = t1234 * t1204 + t1237 * t1281;
t1084 = -t1237 * t1204 + t1234 * t1281;
t1056 = (t1163 * t1239 - t1164 * t1243) * t1185;
t1054 = -t1101 * t1241 + t1153 * t1245;
t1053 = t1101 * t1245 + t1153 * t1241;
t1052 = -t1125 * t1240 + t1126 * t1244;
t1051 = -t1094 * t1241 + t1139 * t1245;
t1050 = t1094 * t1245 + t1139 * t1241;
t1049 = t1234 * t1175 + t1237 * t1283;
t1048 = -t1237 * t1175 + t1234 * t1283;
t1043 = t1237 * t1284 - t1330;
t1034 = t1088 * t1239 + t1164 * t1377;
t1032 = t1087 * t1243 - t1163 * t1378;
t1029 = -t1112 * t1240 + t1113 * t1244;
t1028 = -t1110 * t1240 + t1111 * t1244;
t1027 = -t1085 * t1241 + t1122 * t1245;
t1026 = t1085 * t1245 + t1122 * t1241;
t1019 = t1128 * t1239 + t1389;
t1018 = t1129 * t1243 + t1428;
t1017 = -t1090 * t1240 + t1092 * t1244;
t1016 = -t1089 * t1240 + t1091 * t1244;
t1006 = -t1365 + (-t1098 * t1234 - t1101 * t1237) * pkin(8);
t998 = -t1363 + (-t1093 * t1234 - t1094 * t1237) * pkin(8);
t997 = t1237 * t1285 - t1341;
t996 = t1237 * t1286 + t1341;
t995 = -pkin(1) * t1098 + t1234 * t1133 + t1237 * t1327;
t989 = -pkin(1) * t1093 + t1234 * t1134 + t1237 * t1328;
t978 = -t1234 * t1275 + t1237 * t1287;
t977 = -t1234 * t1120 + t1237 * t1288;
t976 = pkin(8) * t1061 * t1237 - pkin(1) * t1048;
t975 = -t1049 * t1241 + t1061 * t1245;
t974 = t1049 * t1245 + t1061 * t1241;
t971 = -t1234 * t1417 + t1237 * t1289;
t970 = t1234 * t1289 + t1237 * t1417;
t969 = -pkin(1) * t1084 + t1237 * t1258;
t961 = (-t1048 * t1234 - t1049 * t1237) * pkin(8);
t955 = -t1044 * t1240 + t1046 * t1244;
t954 = -t1234 * t1425 + t1237 * t1290;
t953 = t1234 * t1290 + t1237 * t1425;
t952 = (-t1084 * t1234 - t1085 * t1237) * pkin(8) - t1283;
t948 = t1037 * t1239 + t1039 * t1243;
t938 = pkin(2) * t1080 - t982;
t933 = pkin(2) * t1063 - t981;
t932 = -t1024 * t1240 + t1025 * t1244;
t929 = -t1234 * t1147 + t1237 * t1292;
t924 = -t1234 * t1124 + t1237 * t1291;
t923 = t1237 * t1124 + t1234 * t1291;
t912 = t1000 * t1239 + t1243 * t999;
t907 = -t1240 * t985 + t1244 * t987;
t906 = -t1240 * t984 + t1244 * t986;
t905 = t1008 * t1245 - t1241 * t971;
t904 = t1008 * t1241 + t1245 * t971;
t903 = -t1234 * t1056 + t1237 * t1293;
t899 = -t1241 * t954 + t1245 * t990;
t898 = t1241 * t990 + t1245 * t954;
t869 = t1239 * t960 + t1243 * t959;
t868 = t1239 * t958 + t1243 * t957;
t865 = t1239 * t947 + t1243 * t945;
t864 = t1239 * t946 + t1243 * t944;
t862 = -t1234 * t1034 + t1237 * t1295;
t861 = -t1234 * t1032 + t1237 * t1296;
t856 = -t1240 * t935 + t1244 * t937;
t855 = -t1240 * t934 + t1244 * t936;
t854 = -t1241 * t924 + t1245 * t956;
t853 = t1241 * t956 + t1245 * t924;
t833 = -t1240 * t917 + t1244 * t918;
t829 = -t1234 * t1019 + t1237 * t1297;
t828 = -t1234 * t1018 + t1237 * t1298;
t822 = -t1234 * t1001 + t1237 * t1299;
t821 = t1237 * t1001 + t1234 * t1299;
t819 = -t1240 * t908 + t1244 * t909;
t816 = -t1234 * t992 + t1237 * t1300;
t815 = t1234 * t1300 + t1237 * t992;
t813 = t1244 * t1022 - t1240 * t979 + (-t1234 * t970 - t1237 * t971) * pkin(8);
t812 = pkin(2) * t927 - pkin(3) * t1039 + pkin(9) * t1002 + t1402;
t811 = t1234 * t1103 + t1237 * t1304;
t810 = -t1237 * t1103 + t1234 * t1304;
t809 = pkin(2) * t925 + pkin(3) * t1037 + pkin(9) * t993 - t1397;
t806 = t1244 * t1010 - t1240 * t973 + (-t1234 * t953 - t1237 * t954) * pkin(8);
t801 = -t1234 * t948 + t1237 * t1301;
t790 = t1239 * t881 + t1243 * t880;
t789 = -t1234 * t949 + t1237 * t1302;
t788 = t1234 * t1302 + t1237 * t949;
t783 = t1239 * t878 + t1243 * t876;
t777 = -pkin(1) * t970 - t1234 * t938 + t1237 * t1259;
t774 = -pkin(1) * t953 - t1234 * t933 + t1237 * t1260;
t771 = -t1234 * t912 + t1237 * t1303;
t761 = t1239 * t846 + t1243 * t844;
t760 = t1239 * t845 + t1243 * t843;
t759 = -t1240 * t839 + t1244 * t841;
t758 = -t1240 * t838 + t1244 * t840;
t754 = -t1241 * t822 + t1245 * t849;
t753 = t1241 * t849 + t1245 * t822;
t748 = -t1241 * t816 + t1245 * t848;
t747 = t1241 * t848 + t1245 * t816;
t745 = -t1240 * t824 + t1244 * t826;
t744 = -t1240 * t823 + t1244 * t825;
t740 = pkin(2) * t910 + pkin(3) * t1073 + pkin(9) * t951 + t800;
t736 = -t1241 * t789 + t1245 * t830;
t735 = t1241 * t830 + t1245 * t789;
t734 = -t1241 * t811 + t1245 * t814;
t733 = t1241 * t814 + t1245 * t811;
t728 = -t1240 * t852 + t1244 * t863 + (-t1234 * t923 - t1237 * t924) * pkin(8);
t727 = -t1234 * t869 + t1237 * t1305;
t726 = -t1234 * t868 + t1237 * t1306;
t723 = -pkin(1) * t923 - t1045 * t1412 + t1237 * t1261;
t720 = t1239 * t795 + t1243 * t793;
t719 = t1239 * t794 + t1243 * t792;
t715 = -t1234 * t865 + t1237 * t1307;
t714 = -t1234 * t864 + t1237 * t1308;
t710 = t1239 * t776 + t1243 * t775;
t709 = -t1234 * t859 + t1237 * t1309;
t708 = t1234 * t1309 + t1237 * t859;
t704 = -t1240 * t772 + t1244 * t773;
t698 = pkin(2) * t764 - pkin(3) * t942 + pkin(9) * t800;
t692 = -t1234 * t834 + t1237 * t1310;
t691 = t1234 * t1310 + t1237 * t834;
t689 = -t1240 * t756 + t1244 * t757;
t684 = -qJ(3) * t1396 - t1240 * t882 + (-t1234 * t810 - t1237 * t811) * pkin(8);
t679 = -pkin(1) * t810 + t1237 * t1257 - t1412 * t901;
t670 = -t1234 * t783 + t1237 * t1311;
t668 = pkin(2) * t817 - pkin(3) * t965 + pkin(9) * t860 + t1239 * t827 + t1243 * t787;
t667 = -t1234 * t799 + t1237 * t1313;
t666 = t1234 * t1313 + t1237 * t799;
t665 = -t1234 * t784 + t1237 * t1312;
t664 = t1234 * t1312 + t1237 * t784;
t663 = -t1240 * t730 + t1244 * t732;
t662 = -t1240 * t729 + t1244 * t731;
t660 = -t1234 * t790 + t1237 * t1314;
t659 = pkin(2) * t807 - pkin(3) * t963 + pkin(9) * t835 + t1239 * t820 + t1243 * t780;
t658 = -t1241 * t709 + t1245 * t741;
t657 = t1241 * t741 + t1245 * t709;
t655 = -t1241 * t692 + t1245 * t725;
t654 = t1241 * t725 + t1245 * t692;
t653 = -t1240 * t743 + t1244 * t755 + (-t1234 * t821 - t1237 * t822) * pkin(8);
t652 = -t1240 * t742 + t1244 * t749 + (-t1234 * t815 - t1237 * t816) * pkin(8);
t651 = -t1234 * t761 + t1237 * t1315;
t650 = -t1234 * t760 + t1237 * t1316;
t649 = -t1240 * t694 + t1244 * t696;
t648 = -t1240 * t693 + t1244 * t695;
t647 = -pkin(1) * t821 - t1234 * t812 + t1237 * t1262;
t642 = -pkin(1) * t815 - t1234 * t809 + t1237 * t1263;
t636 = -t1241 * t667 + t1245 * t697;
t635 = t1241 * t697 + t1245 * t667;
t634 = -t1241 * t665 + t1245 * t699;
t633 = t1241 * t699 + t1245 * t665;
t632 = -t1240 * t716 + t1244 * t724 + (-t1234 * t788 - t1237 * t789) * pkin(8);
t626 = -t1240 * t676 + t1244 * t677;
t621 = -t1234 * t720 + t1237 * t1317;
t620 = -t1234 * t719 + t1237 * t1318;
t615 = -pkin(1) * t788 - t1234 * t740 + t1237 * t1264;
t614 = -t1234 * t717 + t1237 * t1319;
t613 = t1234 * t1319 + t1237 * t717;
t612 = -t1234 * t712 + t1237 * t1320;
t611 = t1234 * t1320 + t1237 * t712;
t608 = -t1234 * t710 + t1237 * t1321;
t606 = -t1234 * t701 + t1237 * t1322;
t605 = t1234 * t1322 + t1237 * t701;
t603 = pkin(2) * t766 - pkin(3) * t983 + pkin(9) * t786 + t1239 * t669 + t1243 * t661;
t597 = -t1241 * t614 + t1245 * t644;
t596 = t1241 * t644 + t1245 * t614;
t595 = -t1241 * t612 + t1245 * t641;
t594 = t1241 * t641 + t1245 * t612;
t591 = -t1240 * t656 + t1244 * t678 + (-t1234 * t666 - t1237 * t667) * pkin(8);
t590 = -pkin(1) * t666 - t1234 * t698 + t1237 * t1265;
t589 = -t1241 * t606 + t1245 * t622;
t588 = t1241 * t622 + t1245 * t606;
t586 = -t1240 * t630 + t1244 * t643 + (-t1234 * t708 - t1237 * t709) * pkin(8);
t584 = -t1240 * t625 + t1244 * t638 + (-t1234 * t691 - t1237 * t692) * pkin(8);
t582 = -t1234 * t639 + t1237 * t1323;
t581 = t1234 * t1323 + t1237 * t639;
t580 = pkin(2) * t628 - pkin(3) * t886 + pkin(9) * t640 - qJ(5) * t1403 + t1243 * t671;
t579 = -pkin(1) * t708 - t1234 * t668 + t1237 * t1266;
t578 = pkin(2) * t685 - pkin(3) * t857 + pkin(9) * t718 + t1239 * t624 + t1243 * t617;
t577 = pkin(2) * t682 - pkin(3) * t850 + pkin(9) * t713 + t1239 * t623 + t1243 * t616;
t573 = -pkin(1) * t691 - t1234 * t659 + t1237 * t1267;
t571 = pkin(2) * t672 - pkin(3) * t803 + pkin(9) * t702 + t1239 * t609 + t1243 * t604;
t564 = -t1240 * t600 + t1244 * t601 + (-t1234 * t664 - t1237 * t665) * pkin(8);
t563 = -t1241 * t582 + t1245 * t598;
t562 = t1241 * t598 + t1245 * t582;
t558 = -pkin(1) * t664 - t1234 * t603 + t1237 * t1268;
t556 = -t1234 * t592 + t1237 * t1324;
t555 = t1234 * t1324 + t1237 * t592;
t553 = -t1240 * t568 + t1244 * t570 + (-t1234 * t613 - t1237 * t614) * pkin(8);
t552 = -t1240 * t566 + t1244 * t569 + (-t1234 * t611 - t1237 * t612) * pkin(8);
t551 = pkin(2) * t575 - pkin(3) * t645 + pkin(9) * t593 + t1239 * t583 + t1243 * t572;
t550 = -pkin(1) * t613 - t1234 * t578 + t1237 * t1269;
t549 = -pkin(1) * t611 - t1234 * t577 + t1237 * t1270;
t548 = -t1240 * t559 + t1244 * t560 + (-t1234 * t605 - t1237 * t606) * pkin(8);
t547 = -t1241 * t556 + t1245 * t557;
t546 = t1241 * t557 + t1245 * t556;
t545 = -t1240 * t561 + t1244 * t567 + (-t1234 * t581 - t1237 * t582) * pkin(8);
t543 = -pkin(1) * t581 - t1234 * t580 + t1237 * t1271;
t542 = -pkin(1) * t605 - t1234 * t571 + t1237 * t1272;
t540 = -t1240 * t541 + t1244 * t544 + (-t1234 * t555 - t1237 * t556) * pkin(8);
t539 = -pkin(1) * t555 - t1234 * t551 + t1237 * t1273;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1215, -t1216, 0, t1179, 0, 0, 0, 0, 0, 0, t1054, t1051, t1027, t975, 0, 0, 0, 0, 0, 0, t899, t905, t854, t734, 0, 0, 0, 0, 0, 0, t748, t754, t736, t636, 0, 0, 0, 0, 0, 0, t655, t658, t634, t563, 0, 0, 0, 0, 0, 0, t595, t597, t589, t547; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1216, -t1215, 0, t1178, 0, 0, 0, 0, 0, 0, t1053, t1050, t1026, t974, 0, 0, 0, 0, 0, 0, t898, t904, t853, t733, 0, 0, 0, 0, 0, 0, t747, t753, t735, t635, 0, 0, 0, 0, 0, 0, t654, t657, t633, t562, 0, 0, 0, 0, 0, 0, t594, t596, t588, t546; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1098, t1093, t1084, t1048, 0, 0, 0, 0, 0, 0, t953, t970, t923, t810, 0, 0, 0, 0, 0, 0, t815, t821, t788, t666, 0, 0, 0, 0, 0, 0, t691, t708, t664, t581, 0, 0, 0, 0, 0, 0, t611, t613, t605, t555; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1216, 0, -t1215, 0, t1329, -t1199, -t1178, -pkin(7) * t1178, -t1132 * t1241 + t1165 * t1245, -t1086 * t1241 + t1123 * t1245, -t1099 * t1241 + t1151 * t1245, -t1131 * t1241 + t1162 * t1245, -t1100 * t1241 + t1152 * t1245, t1245 * t1173 + t1241 * t1330, -pkin(7) * t1053 + t1006 * t1245 - t1241 * t995, -pkin(7) * t1050 - t1241 * t989 + t1245 * t998, -pkin(7) * t1026 - t1241 * t969 + t1245 * t952, -pkin(7) * t974 - t1241 * t976 + t1245 * t961, t1029 * t1245 - t1241 * t997, -t1241 * t929 + t1245 * t955, t1016 * t1245 - t1241 * t977, t1028 * t1245 - t1241 * t996, t1017 * t1245 - t1241 * t978, -t1043 * t1241 + t1052 * t1245, -pkin(7) * t898 - t1241 * t774 + t1245 * t806, -pkin(7) * t904 - t1241 * t777 + t1245 * t813, -pkin(7) * t853 - t1241 * t723 + t1245 * t728, -pkin(7) * t733 - t1241 * t679 + t1245 * t684, -t1241 * t862 + t1245 * t907, -t1241 * t801 + t1245 * t833, -t1241 * t828 + t1245 * t855, -t1241 * t861 + t1245 * t906, -t1241 * t829 + t1245 * t856, -t1241 * t903 + t1245 * t932, -pkin(7) * t747 - t1241 * t642 + t1245 * t652, -pkin(7) * t753 - t1241 * t647 + t1245 * t653, -pkin(7) * t735 - t1241 * t615 + t1245 * t632, -pkin(7) * t635 - t1241 * t590 + t1245 * t591, -t1241 * t727 + t1245 * t759, -t1241 * t670 + t1245 * t704, -t1241 * t714 + t1245 * t744, -t1241 * t726 + t1245 * t758, -t1241 * t715 + t1245 * t745, -t1241 * t771 + t1245 * t819, -pkin(7) * t654 - t1241 * t573 + t1245 * t584, -pkin(7) * t657 - t1241 * t579 + t1245 * t586, -pkin(7) * t633 - t1241 * t558 + t1245 * t564, -pkin(7) * t562 - t1241 * t543 + t1245 * t545, -t1241 * t651 + t1245 * t663, -t1241 * t608 + t1245 * t626, -t1241 * t620 + t1245 * t648, -t1241 * t650 + t1245 * t662, -t1241 * t621 + t1245 * t649, -t1241 * t660 + t1245 * t689, -pkin(7) * t594 - t1241 * t549 + t1245 * t552, -pkin(7) * t596 - t1241 * t550 + t1245 * t553, -pkin(7) * t588 - t1241 * t542 + t1245 * t548, -pkin(7) * t546 - t1241 * t539 + t1245 * t540; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1215, 0, t1216, 0, t1199, t1329, t1179, pkin(7) * t1179, t1132 * t1245 + t1165 * t1241, t1086 * t1245 + t1123 * t1241, t1099 * t1245 + t1151 * t1241, t1131 * t1245 + t1162 * t1241, t1100 * t1245 + t1152 * t1241, t1241 * t1173 - t1245 * t1330, pkin(7) * t1054 + t1006 * t1241 + t1245 * t995, pkin(7) * t1051 + t1241 * t998 + t1245 * t989, pkin(7) * t1027 + t1241 * t952 + t1245 * t969, pkin(7) * t975 + t1241 * t961 + t1245 * t976, t1029 * t1241 + t1245 * t997, t1241 * t955 + t1245 * t929, t1016 * t1241 + t1245 * t977, t1028 * t1241 + t1245 * t996, t1017 * t1241 + t1245 * t978, t1043 * t1245 + t1052 * t1241, pkin(7) * t899 + t1241 * t806 + t1245 * t774, pkin(7) * t905 + t1241 * t813 + t1245 * t777, pkin(7) * t854 + t1241 * t728 + t1245 * t723, pkin(7) * t734 + t1241 * t684 + t1245 * t679, t1241 * t907 + t1245 * t862, t1241 * t833 + t1245 * t801, t1241 * t855 + t1245 * t828, t1241 * t906 + t1245 * t861, t1241 * t856 + t1245 * t829, t1241 * t932 + t1245 * t903, pkin(7) * t748 + t1241 * t652 + t1245 * t642, pkin(7) * t754 + t1241 * t653 + t1245 * t647, pkin(7) * t736 + t1241 * t632 + t1245 * t615, pkin(7) * t636 + t1241 * t591 + t1245 * t590, t1241 * t759 + t1245 * t727, t1241 * t704 + t1245 * t670, t1241 * t744 + t1245 * t714, t1241 * t758 + t1245 * t726, t1241 * t745 + t1245 * t715, t1241 * t819 + t1245 * t771, pkin(7) * t655 + t1241 * t584 + t1245 * t573, pkin(7) * t658 + t1241 * t586 + t1245 * t579, pkin(7) * t634 + t1241 * t564 + t1245 * t558, pkin(7) * t563 + t1241 * t545 + t1245 * t543, t1241 * t663 + t1245 * t651, t1241 * t626 + t1245 * t608, t1241 * t648 + t1245 * t620, t1241 * t662 + t1245 * t650, t1241 * t649 + t1245 * t621, t1241 * t689 + t1245 * t660, pkin(7) * t595 + t1241 * t552 + t1245 * t549, pkin(7) * t597 + t1241 * t553 + t1245 * t550, pkin(7) * t589 + t1241 * t548 + t1245 * t542, pkin(7) * t547 + t1241 * t540 + t1245 * t539; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1218, t1219, 0, 0, (t1197 * t1234 + t1244 * t1423) * t1240, t1237 * t1203 + t1234 * t1282, t1237 * t1168 + t1234 * t1279, (t1198 * t1234 - t1240 * t1423) * t1244, t1237 * t1169 + t1234 * t1277, t1209, pkin(1) * t1101 - t1237 * t1133 + t1234 * t1327, pkin(1) * t1094 - t1237 * t1134 + t1234 * t1328, pkin(1) * t1085 + t1234 * t1258, pkin(1) * t1049 + t1061 * t1408, t1234 * t1285 + t1340, t1237 * t1147 + t1234 * t1292, t1237 * t1120 + t1234 * t1288, t1234 * t1286 - t1340, t1234 * t1287 + t1237 * t1275, t1234 * t1284 + t1209, pkin(1) * t954 + t1234 * t1260 + t1237 * t933, pkin(1) * t971 + t1234 * t1259 + t1237 * t938, pkin(1) * t924 + t1045 * t1411 + t1234 * t1261, pkin(1) * t811 + t1234 * t1257 + t1411 * t901, t1237 * t1034 + t1234 * t1295, t1234 * t1301 + t1237 * t948, t1237 * t1018 + t1234 * t1298, t1237 * t1032 + t1234 * t1296, t1237 * t1019 + t1234 * t1297, t1237 * t1056 + t1234 * t1293, pkin(1) * t816 + t1234 * t1263 + t1237 * t809, pkin(1) * t822 + t1234 * t1262 + t1237 * t812, pkin(1) * t789 + t1234 * t1264 + t1237 * t740, pkin(1) * t667 + t1234 * t1265 + t1237 * t698, t1234 * t1305 + t1237 * t869, t1234 * t1311 + t1237 * t783, t1234 * t1308 + t1237 * t864, t1234 * t1306 + t1237 * t868, t1234 * t1307 + t1237 * t865, t1234 * t1303 + t1237 * t912, pkin(1) * t692 + t1234 * t1267 + t1237 * t659, pkin(1) * t709 + t1234 * t1266 + t1237 * t668, pkin(1) * t665 + t1234 * t1268 + t1237 * t603, pkin(1) * t582 + t1234 * t1271 + t1237 * t580, t1234 * t1315 + t1237 * t761, t1234 * t1321 + t1237 * t710, t1234 * t1318 + t1237 * t719, t1234 * t1316 + t1237 * t760, t1234 * t1317 + t1237 * t720, t1234 * t1314 + t1237 * t790, pkin(1) * t612 + t1234 * t1270 + t1237 * t577, pkin(1) * t614 + t1234 * t1269 + t1237 * t578, pkin(1) * t606 + t1234 * t1272 + t1237 * t571, pkin(1) * t556 + t1234 * t1273 + t1237 * t551;];
tauB_reg  = t1;
