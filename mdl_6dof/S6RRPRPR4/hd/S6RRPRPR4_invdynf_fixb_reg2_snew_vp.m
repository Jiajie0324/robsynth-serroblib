% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRPR4
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta3,theta5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 13:41
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRPR4_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR4_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR4_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR4_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR4_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRPR4_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 13:41:26
% EndTime: 2019-05-06 13:41:38
% DurationCPUTime: 12.85s
% Computational Cost: add. (136781->373), mult. (365195->579), div. (0->0), fcn. (295585->14), ass. (0->322)
t2697 = sin(pkin(11));
t2700 = cos(pkin(11));
t2704 = sin(qJ(2));
t2708 = cos(qJ(2));
t2698 = sin(pkin(6));
t2767 = qJD(1) * t2698;
t2661 = (t2697 * t2708 + t2700 * t2704) * t2767;
t2701 = cos(pkin(6));
t2690 = qJD(1) * t2701 + qJD(2);
t2703 = sin(qJ(4));
t2707 = cos(qJ(4));
t2642 = t2661 * t2703 - t2690 * t2707;
t2644 = t2661 * t2707 + t2690 * t2703;
t2696 = sin(pkin(12));
t2699 = cos(pkin(12));
t2615 = t2642 * t2699 + t2644 * t2696;
t2614 = qJD(6) + t2615;
t2779 = qJD(6) + t2614;
t2748 = t2708 * t2767;
t2751 = qJDD(1) * t2698;
t2671 = qJD(2) * t2748 + t2704 * t2751;
t2756 = t2698 * t2704;
t2749 = qJD(1) * t2756;
t2672 = -qJD(2) * t2749 + t2708 * t2751;
t2636 = t2671 * t2700 + t2672 * t2697;
t2659 = t2697 * t2749 - t2700 * t2748;
t2759 = t2659 * t2690;
t2620 = t2636 - t2759;
t2617 = -t2642 * t2696 + t2644 * t2699;
t2657 = qJD(4) + t2659;
t2702 = sin(qJ(6));
t2706 = cos(qJ(6));
t2590 = t2617 * t2702 - t2657 * t2706;
t2778 = t2590 ^ 2;
t2592 = t2617 * t2706 + t2657 * t2702;
t2777 = t2592 ^ 2;
t2776 = t2614 ^ 2;
t2775 = t2615 ^ 2;
t2774 = t2617 ^ 2;
t2641 = t2642 ^ 2;
t2773 = t2644 ^ 2;
t2772 = t2657 ^ 2;
t2771 = t2659 ^ 2;
t2770 = t2661 ^ 2;
t2675 = t2690 ^ 2;
t2769 = -2 * qJD(3);
t2768 = -2 * qJD(5);
t2766 = t2590 * t2592;
t2765 = t2615 * t2617;
t2764 = t2617 * t2657;
t2763 = t2642 * t2644;
t2762 = t2657 * t2615;
t2761 = t2657 * t2642;
t2760 = t2659 * t2661;
t2758 = t2661 * t2690;
t2710 = qJD(1) ^ 2;
t2757 = t2698 ^ 2 * t2710;
t2705 = sin(qJ(1));
t2709 = cos(qJ(1));
t2683 = g(1) * t2705 - g(2) * t2709;
t2668 = pkin(8) * t2698 * t2710 + qJDD(1) * pkin(1) + t2683;
t2755 = t2701 * t2668;
t2754 = qJD(6) - t2614;
t2684 = -g(1) * t2709 - g(2) * t2705;
t2714 = -pkin(1) * t2710 + pkin(8) * t2751 + t2684;
t2627 = -g(3) * t2756 + t2704 * t2755 + t2708 * t2714;
t2667 = pkin(2) * t2690 - qJ(3) * t2749;
t2695 = t2708 ^ 2;
t2747 = t2695 * t2757;
t2595 = -pkin(2) * t2747 + qJ(3) * t2672 - t2667 * t2690 + t2627;
t2713 = t2704 * t2714;
t2746 = t2704 * t2757;
t2750 = qJDD(1) * t2701 + qJDD(2);
t2711 = -t2713 - t2671 * qJ(3) + t2750 * pkin(2) + (pkin(2) * t2746 + t2755 + (qJ(3) * qJD(1) * t2690 - g(3)) * t2698) * t2708;
t2558 = t2595 * t2700 + t2659 * t2769 + t2697 * t2711;
t2633 = pkin(3) * t2659 - pkin(9) * t2661;
t2542 = -pkin(3) * t2675 + pkin(9) * t2750 - t2633 * t2659 + t2558;
t2649 = -t2701 * g(3) - t2698 * t2668;
t2613 = -t2672 * pkin(2) - qJ(3) * t2747 + t2667 * t2749 + qJDD(3) + t2649;
t2752 = t2671 * t2697 - t2672 * t2700;
t2618 = t2752 + t2758;
t2562 = pkin(3) * t2618 - pkin(9) * t2620 + t2613;
t2518 = t2542 * t2707 + t2562 * t2703;
t2753 = -t2657 + qJD(4);
t2739 = t2703 * t2636 - t2707 * t2750;
t2604 = -qJD(4) * t2644 - t2739;
t2624 = pkin(4) * t2657 - qJ(5) * t2644;
t2506 = -pkin(4) * t2641 + qJ(5) * t2604 - t2624 * t2657 + t2518;
t2517 = -t2703 * t2542 + t2707 * t2562;
t2745 = qJDD(4) + t2752;
t2583 = t2745 - t2763;
t2716 = -t2707 * t2636 - t2703 * t2750;
t2605 = -t2642 * qJD(4) - t2716;
t2712 = (-t2605 - t2761) * qJ(5) + t2583 * pkin(4) + t2517;
t2469 = t2506 * t2699 + t2615 * t2768 + t2696 * t2712;
t2744 = t2696 * t2506 - t2699 * t2712;
t2570 = t2604 * t2696 + t2605 * t2699;
t2743 = -t2570 + t2762;
t2742 = -t2702 * t2570 + t2706 * t2745;
t2741 = t2697 * t2595 - t2700 * t2711;
t2740 = -t2604 * t2699 + t2605 * t2696;
t2738 = t2690 * t2748;
t2737 = -qJDD(6) - t2740;
t2573 = pkin(5) * t2615 - pkin(10) * t2617;
t2466 = -pkin(5) * t2772 + pkin(10) * t2745 - t2573 * t2615 + t2469;
t2541 = -t2750 * pkin(3) - t2675 * pkin(9) + ((2 * qJD(3)) + t2633) * t2661 + t2741;
t2519 = -pkin(4) * t2604 - qJ(5) * t2641 + t2644 * t2624 + qJDD(5) + t2541;
t2550 = t2740 + t2764;
t2484 = pkin(5) * t2550 + pkin(10) * t2743 + t2519;
t2450 = -t2466 * t2702 + t2484 * t2706;
t2451 = t2466 * t2706 + t2484 * t2702;
t2437 = -t2450 * t2702 + t2451 * t2706;
t2465 = -t2745 * pkin(5) - t2772 * pkin(10) + ((2 * qJD(5)) + t2573) * t2617 + t2744;
t2427 = t2437 * t2696 - t2465 * t2699;
t2428 = t2437 * t2699 + t2465 * t2696;
t2419 = -t2427 * t2703 + t2428 * t2707;
t2436 = t2450 * t2706 + t2451 * t2702;
t2414 = t2419 * t2697 - t2436 * t2700;
t2415 = t2419 * t2700 + t2436 * t2697;
t2736 = t2414 * t2708 + t2415 * t2704;
t2468 = t2617 * t2768 - t2744;
t2444 = t2468 * t2699 + t2469 * t2696;
t2445 = -t2468 * t2696 + t2469 * t2699;
t2433 = -t2444 * t2703 + t2445 * t2707;
t2430 = t2433 * t2697 - t2519 * t2700;
t2431 = t2433 * t2700 + t2519 * t2697;
t2735 = t2430 * t2708 + t2431 * t2704;
t2521 = -t2592 * t2754 + t2742;
t2715 = -t2706 * t2570 - t2702 * t2745;
t2523 = t2590 * t2754 + t2715;
t2488 = t2521 * t2706 - t2523 * t2702;
t2543 = -t2777 - t2778;
t2474 = t2488 * t2696 - t2543 * t2699;
t2475 = t2488 * t2699 + t2543 * t2696;
t2457 = -t2474 * t2703 + t2475 * t2707;
t2487 = t2521 * t2702 + t2523 * t2706;
t2442 = t2457 * t2697 - t2487 * t2700;
t2443 = t2457 * t2700 + t2487 * t2697;
t2734 = t2442 * t2708 + t2443 * t2704;
t2528 = -t2737 - t2766;
t2549 = -t2776 - t2778;
t2510 = -t2528 * t2702 + t2549 * t2706;
t2520 = t2592 * t2779 - t2742;
t2476 = t2510 * t2696 - t2520 * t2699;
t2477 = t2510 * t2699 + t2520 * t2696;
t2461 = -t2476 * t2703 + t2477 * t2707;
t2509 = t2528 * t2706 + t2549 * t2702;
t2446 = t2461 * t2697 - t2509 * t2700;
t2447 = t2461 * t2700 + t2509 * t2697;
t2733 = t2446 * t2708 + t2447 * t2704;
t2529 = t2737 - t2766;
t2556 = -t2776 - t2777;
t2512 = t2529 * t2706 - t2556 * t2702;
t2522 = -t2590 * t2779 - t2715;
t2478 = t2512 * t2696 - t2522 * t2699;
t2479 = t2512 * t2699 + t2522 * t2696;
t2463 = -t2478 * t2703 + t2479 * t2707;
t2511 = t2529 * t2702 + t2556 * t2706;
t2448 = t2463 * t2697 - t2511 * t2700;
t2449 = t2463 * t2700 + t2511 * t2697;
t2732 = t2448 * t2708 + t2449 * t2704;
t2486 = -t2517 * t2703 + t2518 * t2707;
t2470 = t2486 * t2697 - t2541 * t2700;
t2471 = t2486 * t2700 + t2541 * t2697;
t2731 = t2470 * t2708 + t2471 * t2704;
t2551 = -t2740 + t2764;
t2553 = -t2570 - t2762;
t2515 = t2551 * t2696 + t2553 * t2699;
t2516 = t2551 * t2699 - t2553 * t2696;
t2481 = -t2515 * t2703 + t2516 * t2707;
t2559 = -t2774 - t2775;
t2472 = t2481 * t2697 - t2559 * t2700;
t2473 = t2481 * t2700 + t2559 * t2697;
t2730 = t2472 * t2708 + t2473 * t2704;
t2567 = t2745 - t2765;
t2572 = -t2772 - t2775;
t2530 = t2567 * t2699 + t2572 * t2696;
t2531 = -t2567 * t2696 + t2572 * t2699;
t2504 = -t2530 * t2703 + t2531 * t2707;
t2489 = t2504 * t2697 - t2550 * t2700;
t2490 = t2504 * t2700 + t2550 * t2697;
t2729 = t2489 * t2708 + t2490 * t2704;
t2568 = -t2745 - t2765;
t2582 = -t2772 - t2774;
t2538 = t2568 * t2696 + t2582 * t2699;
t2539 = t2568 * t2699 - t2582 * t2696;
t2514 = -t2538 * t2703 + t2539 * t2707;
t2496 = t2514 * t2697 + t2700 * t2743;
t2497 = t2514 * t2700 - t2697 * t2743;
t2728 = t2496 * t2708 + t2497 * t2704;
t2557 = t2661 * t2769 - t2741;
t2524 = t2557 * t2700 + t2558 * t2697;
t2525 = -t2557 * t2697 + t2558 * t2700;
t2727 = t2524 * t2708 + t2525 * t2704;
t2575 = -t2644 * t2753 - t2739;
t2577 = t2642 * t2753 + t2716;
t2545 = t2575 * t2707 - t2577 * t2703;
t2594 = -t2641 - t2773;
t2526 = t2545 * t2697 - t2594 * t2700;
t2527 = t2545 * t2700 + t2594 * t2697;
t2726 = t2526 * t2708 + t2527 * t2704;
t2600 = -t2772 - t2641;
t2564 = -t2583 * t2703 + t2600 * t2707;
t2574 = (qJD(4) + t2657) * t2644 + t2739;
t2534 = t2564 * t2697 - t2574 * t2700;
t2535 = t2564 * t2700 + t2574 * t2697;
t2725 = t2534 * t2708 + t2535 * t2704;
t2584 = -t2745 - t2763;
t2608 = -t2772 - t2773;
t2566 = t2584 * t2707 - t2608 * t2703;
t2576 = t2605 - t2761;
t2536 = t2566 * t2697 - t2576 * t2700;
t2537 = t2566 * t2700 + t2576 * t2697;
t2724 = t2536 * t2708 + t2537 * t2704;
t2619 = -t2752 + t2758;
t2621 = -t2636 - t2759;
t2578 = t2619 * t2697 + t2621 * t2700;
t2579 = t2619 * t2700 - t2621 * t2697;
t2723 = t2578 * t2708 + t2579 * t2704;
t2628 = -t2675 - t2771;
t2629 = t2750 - t2760;
t2586 = t2628 * t2697 + t2629 * t2700;
t2587 = t2628 * t2700 - t2629 * t2697;
t2722 = t2586 * t2708 + t2587 * t2704;
t2630 = -t2750 - t2760;
t2639 = -t2675 - t2770;
t2598 = t2630 * t2697 + t2639 * t2700;
t2599 = t2630 * t2700 - t2639 * t2697;
t2721 = t2598 * t2708 + t2599 * t2704;
t2626 = -t2713 + (-g(3) * t2698 + t2755) * t2708;
t2720 = t2626 * t2708 + t2627 * t2704;
t2646 = t2738 - t2671;
t2676 = t2690 * t2749;
t2647 = t2672 + t2676;
t2719 = t2646 * t2708 + t2647 * t2704;
t2694 = t2704 ^ 2;
t2658 = -t2694 * t2757 - t2675;
t2682 = t2708 * t2746;
t2670 = t2682 - t2750;
t2718 = t2658 * t2708 + t2670 * t2704;
t2669 = t2682 + t2750;
t2673 = -t2747 - t2675;
t2717 = t2669 * t2708 + t2673 * t2704;
t2681 = -qJDD(1) * t2705 - t2709 * t2710;
t2680 = qJDD(1) * t2709 - t2705 * t2710;
t2674 = (-t2694 - t2695) * t2757;
t2648 = -t2672 + t2676;
t2645 = t2738 + t2671;
t2637 = -t2669 * t2704 + t2673 * t2708;
t2631 = -t2658 * t2704 + t2670 * t2708;
t2623 = -t2770 - t2771;
t2622 = -t2646 * t2704 + t2647 * t2708;
t2612 = -t2698 * t2648 + t2701 * t2717;
t2611 = t2701 * t2648 + t2698 * t2717;
t2607 = -t2698 * t2645 + t2701 * t2718;
t2606 = t2701 * t2645 + t2698 * t2718;
t2603 = -t2698 * t2674 + t2701 * t2719;
t2602 = t2701 * t2674 + t2698 * t2719;
t2585 = -t2626 * t2704 + t2627 * t2708;
t2581 = -t2698 * t2649 + t2701 * t2720;
t2580 = t2701 * t2649 + t2698 * t2720;
t2569 = -t2598 * t2704 + t2599 * t2708;
t2565 = t2584 * t2703 + t2608 * t2707;
t2563 = t2583 * t2707 + t2600 * t2703;
t2561 = -t2586 * t2704 + t2587 * t2708;
t2555 = -t2698 * t2620 + t2701 * t2721;
t2554 = t2701 * t2620 + t2698 * t2721;
t2548 = -t2578 * t2704 + t2579 * t2708;
t2547 = -t2698 * t2618 + t2701 * t2722;
t2546 = t2701 * t2618 + t2698 * t2722;
t2544 = t2575 * t2703 + t2577 * t2707;
t2533 = -t2698 * t2623 + t2701 * t2723;
t2532 = t2701 * t2623 + t2698 * t2723;
t2513 = t2538 * t2707 + t2539 * t2703;
t2508 = -t2536 * t2704 + t2537 * t2708;
t2507 = -t2534 * t2704 + t2535 * t2708;
t2503 = t2530 * t2707 + t2531 * t2703;
t2500 = -t2526 * t2704 + t2527 * t2708;
t2499 = -t2698 * t2565 + t2701 * t2724;
t2498 = t2701 * t2565 + t2698 * t2724;
t2495 = -t2698 * t2563 + t2701 * t2725;
t2494 = t2701 * t2563 + t2698 * t2725;
t2493 = -t2524 * t2704 + t2525 * t2708;
t2492 = -t2698 * t2613 + t2701 * t2727;
t2491 = t2701 * t2613 + t2698 * t2727;
t2485 = t2517 * t2707 + t2518 * t2703;
t2483 = -t2698 * t2544 + t2701 * t2726;
t2482 = t2701 * t2544 + t2698 * t2726;
t2480 = t2515 * t2707 + t2516 * t2703;
t2467 = -t2496 * t2704 + t2497 * t2708;
t2464 = -t2489 * t2704 + t2490 * t2708;
t2462 = t2478 * t2707 + t2479 * t2703;
t2460 = t2476 * t2707 + t2477 * t2703;
t2459 = -t2698 * t2513 + t2701 * t2728;
t2458 = t2701 * t2513 + t2698 * t2728;
t2456 = t2474 * t2707 + t2475 * t2703;
t2455 = -t2472 * t2704 + t2473 * t2708;
t2454 = -t2470 * t2704 + t2471 * t2708;
t2453 = -t2698 * t2503 + t2701 * t2729;
t2452 = t2701 * t2503 + t2698 * t2729;
t2441 = -t2698 * t2485 + t2701 * t2731;
t2440 = t2701 * t2485 + t2698 * t2731;
t2439 = -t2698 * t2480 + t2701 * t2730;
t2438 = t2701 * t2480 + t2698 * t2730;
t2435 = -t2448 * t2704 + t2449 * t2708;
t2434 = -t2446 * t2704 + t2447 * t2708;
t2432 = t2444 * t2707 + t2445 * t2703;
t2429 = -t2442 * t2704 + t2443 * t2708;
t2426 = -t2698 * t2462 + t2701 * t2732;
t2425 = t2701 * t2462 + t2698 * t2732;
t2424 = -t2698 * t2460 + t2701 * t2733;
t2423 = t2701 * t2460 + t2698 * t2733;
t2422 = -t2698 * t2456 + t2701 * t2734;
t2421 = t2701 * t2456 + t2698 * t2734;
t2420 = -t2430 * t2704 + t2431 * t2708;
t2418 = t2427 * t2707 + t2428 * t2703;
t2417 = -t2698 * t2432 + t2701 * t2735;
t2416 = t2701 * t2432 + t2698 * t2735;
t2413 = -t2414 * t2704 + t2415 * t2708;
t2412 = -t2698 * t2418 + t2701 * t2736;
t2411 = t2701 * t2418 + t2698 * t2736;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2681, -t2680, 0, -t2683 * t2705 + t2684 * t2709, 0, 0, 0, 0, 0, 0, -t2612 * t2705 + t2637 * t2709, -t2607 * t2705 + t2631 * t2709, -t2603 * t2705 + t2622 * t2709, -t2581 * t2705 + t2585 * t2709, 0, 0, 0, 0, 0, 0, -t2547 * t2705 + t2561 * t2709, -t2555 * t2705 + t2569 * t2709, -t2533 * t2705 + t2548 * t2709, -t2492 * t2705 + t2493 * t2709, 0, 0, 0, 0, 0, 0, -t2495 * t2705 + t2507 * t2709, -t2499 * t2705 + t2508 * t2709, -t2483 * t2705 + t2500 * t2709, -t2441 * t2705 + t2454 * t2709, 0, 0, 0, 0, 0, 0, -t2453 * t2705 + t2464 * t2709, -t2459 * t2705 + t2467 * t2709, -t2439 * t2705 + t2455 * t2709, -t2417 * t2705 + t2420 * t2709, 0, 0, 0, 0, 0, 0, -t2424 * t2705 + t2434 * t2709, -t2426 * t2705 + t2435 * t2709, -t2422 * t2705 + t2429 * t2709, -t2412 * t2705 + t2413 * t2709; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2680, t2681, 0, t2683 * t2709 + t2684 * t2705, 0, 0, 0, 0, 0, 0, t2612 * t2709 + t2637 * t2705, t2607 * t2709 + t2631 * t2705, t2603 * t2709 + t2622 * t2705, t2581 * t2709 + t2585 * t2705, 0, 0, 0, 0, 0, 0, t2547 * t2709 + t2561 * t2705, t2555 * t2709 + t2569 * t2705, t2533 * t2709 + t2548 * t2705, t2492 * t2709 + t2493 * t2705, 0, 0, 0, 0, 0, 0, t2495 * t2709 + t2507 * t2705, t2499 * t2709 + t2508 * t2705, t2483 * t2709 + t2500 * t2705, t2441 * t2709 + t2454 * t2705, 0, 0, 0, 0, 0, 0, t2453 * t2709 + t2464 * t2705, t2459 * t2709 + t2467 * t2705, t2439 * t2709 + t2455 * t2705, t2417 * t2709 + t2420 * t2705, 0, 0, 0, 0, 0, 0, t2424 * t2709 + t2434 * t2705, t2426 * t2709 + t2435 * t2705, t2422 * t2709 + t2429 * t2705, t2412 * t2709 + t2413 * t2705; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2611, t2606, t2602, t2580, 0, 0, 0, 0, 0, 0, t2546, t2554, t2532, t2491, 0, 0, 0, 0, 0, 0, t2494, t2498, t2482, t2440, 0, 0, 0, 0, 0, 0, t2452, t2458, t2438, t2416, 0, 0, 0, 0, 0, 0, t2423, t2425, t2421, t2411; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2710, -qJDD(1), 0, t2684, 0, 0, 0, 0, 0, 0, t2637, t2631, t2622, t2585, 0, 0, 0, 0, 0, 0, t2561, t2569, t2548, t2493, 0, 0, 0, 0, 0, 0, t2507, t2508, t2500, t2454, 0, 0, 0, 0, 0, 0, t2464, t2467, t2455, t2420, 0, 0, 0, 0, 0, 0, t2434, t2435, t2429, t2413; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2710, 0, t2683, 0, 0, 0, 0, 0, 0, t2612, t2607, t2603, t2581, 0, 0, 0, 0, 0, 0, t2547, t2555, t2533, t2492, 0, 0, 0, 0, 0, 0, t2495, t2499, t2483, t2441, 0, 0, 0, 0, 0, 0, t2453, t2459, t2439, t2417, 0, 0, 0, 0, 0, 0, t2424, t2426, t2422, t2412; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2611, t2606, t2602, t2580, 0, 0, 0, 0, 0, 0, t2546, t2554, t2532, t2491, 0, 0, 0, 0, 0, 0, t2494, t2498, t2482, t2440, 0, 0, 0, 0, 0, 0, t2452, t2458, t2438, t2416, 0, 0, 0, 0, 0, 0, t2423, t2425, t2421, t2411; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2673, t2670, t2647, t2627, 0, 0, 0, 0, 0, 0, t2587, t2599, t2579, t2525, 0, 0, 0, 0, 0, 0, t2535, t2537, t2527, t2471, 0, 0, 0, 0, 0, 0, t2490, t2497, t2473, t2431, 0, 0, 0, 0, 0, 0, t2447, t2449, t2443, t2415; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2669, t2658, t2646, t2626, 0, 0, 0, 0, 0, 0, t2586, t2598, t2578, t2524, 0, 0, 0, 0, 0, 0, t2534, t2536, t2526, t2470, 0, 0, 0, 0, 0, 0, t2489, t2496, t2472, t2430, 0, 0, 0, 0, 0, 0, t2446, t2448, t2442, t2414; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2648, t2645, t2674, t2649, 0, 0, 0, 0, 0, 0, t2618, t2620, t2623, t2613, 0, 0, 0, 0, 0, 0, t2563, t2565, t2544, t2485, 0, 0, 0, 0, 0, 0, t2503, t2513, t2480, t2432, 0, 0, 0, 0, 0, 0, t2460, t2462, t2456, t2418; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2628, t2630, t2619, t2558, 0, 0, 0, 0, 0, 0, t2564, t2566, t2545, t2486, 0, 0, 0, 0, 0, 0, t2504, t2514, t2481, t2433, 0, 0, 0, 0, 0, 0, t2461, t2463, t2457, t2419; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2629, t2639, t2621, t2557, 0, 0, 0, 0, 0, 0, -t2574, -t2576, -t2594, -t2541, 0, 0, 0, 0, 0, 0, -t2550, t2743, -t2559, -t2519, 0, 0, 0, 0, 0, 0, -t2509, -t2511, -t2487, -t2436; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2618, t2620, t2623, t2613, 0, 0, 0, 0, 0, 0, t2563, t2565, t2544, t2485, 0, 0, 0, 0, 0, 0, t2503, t2513, t2480, t2432, 0, 0, 0, 0, 0, 0, t2460, t2462, t2456, t2418; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2600, t2584, t2575, t2518, 0, 0, 0, 0, 0, 0, t2531, t2539, t2516, t2445, 0, 0, 0, 0, 0, 0, t2477, t2479, t2475, t2428; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2583, t2608, t2577, t2517, 0, 0, 0, 0, 0, 0, t2530, t2538, t2515, t2444, 0, 0, 0, 0, 0, 0, t2476, t2478, t2474, t2427; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2574, t2576, t2594, t2541, 0, 0, 0, 0, 0, 0, t2550, -t2743, t2559, t2519, 0, 0, 0, 0, 0, 0, t2509, t2511, t2487, t2436; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2572, t2568, t2551, t2469, 0, 0, 0, 0, 0, 0, t2510, t2512, t2488, t2437; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2567, t2582, t2553, t2468, 0, 0, 0, 0, 0, 0, -t2520, -t2522, -t2543, -t2465; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2550, -t2743, t2559, t2519, 0, 0, 0, 0, 0, 0, t2509, t2511, t2487, t2436; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2549, t2529, t2521, t2451; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2528, t2556, t2523, t2450; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2520, t2522, t2543, t2465;];
f_new_reg  = t1;
