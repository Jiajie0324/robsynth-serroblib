% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPRPR4
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta3,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 10:27
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRPR4_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR4_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR4_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR4_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR4_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRPRPR4_invdynJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 10:26:26
% EndTime: 2019-03-09 10:27:00
% DurationCPUTime: 21.91s
% Computational Cost: add. (28753->854), mult. (81362->1119), div. (0->0), fcn. (67285->16), ass. (0->395)
t336 = sin(pkin(11));
t337 = sin(pkin(6));
t346 = cos(qJ(2));
t522 = cos(pkin(11));
t427 = t346 * t522;
t403 = t337 * t427;
t342 = sin(qJ(2));
t466 = qJD(1) * t342;
t440 = t337 * t466;
t255 = -qJD(1) * t403 + t336 * t440;
t247 = qJD(4) + t255;
t338 = cos(pkin(6));
t484 = t338 * t342;
t316 = pkin(1) * t484;
t486 = t337 * t346;
t535 = pkin(8) + qJ(3);
t236 = (t486 * t535 + t316) * qJD(1);
t227 = t336 * t236;
t318 = t338 * t346 * pkin(1);
t310 = qJD(1) * t318;
t437 = t535 * t342;
t408 = t337 * t437;
t235 = -qJD(1) * t408 + t310;
t156 = t235 * t522 - t227;
t282 = -t346 * t336 - t342 * t522;
t360 = qJD(1) * t282;
t259 = t337 * t360;
t177 = pkin(2) * t440 - pkin(3) * t259 + pkin(9) * t255;
t341 = sin(qJ(4));
t345 = cos(qJ(4));
t100 = t345 * t156 + t341 * t177;
t543 = pkin(2) * t336;
t324 = pkin(9) + t543;
t474 = qJ(5) + t324;
t418 = qJD(4) * t474;
t499 = t255 * t341;
t576 = -qJ(5) * t499 + qJD(5) * t345 - t341 * t418 - t100;
t99 = -t156 * t341 + t345 * t177;
t575 = pkin(4) * t259 - qJD(5) * t341 - t99 + (-qJ(5) * t255 - t418) * t345;
t335 = sin(pkin(12));
t521 = cos(pkin(12));
t379 = -t335 * t341 + t345 * t521;
t574 = t247 * t379;
t463 = qJD(4) * t341;
t573 = t463 + t499;
t281 = t335 * t345 + t341 * t521;
t471 = t247 * t281;
t523 = t575 * t335 + t576 * t521;
t426 = t522 * t236;
t155 = t235 * t336 + t426;
t402 = t573 * pkin(4) - t155;
t340 = sin(qJ(6));
t344 = cos(qJ(6));
t422 = t259 * t340 + t574 * t344;
t467 = qJD(1) * t338;
t313 = qJD(2) + t467;
t219 = -t259 * t345 + t313 * t341;
t220 = pkin(2) * t313 + t235;
t141 = t336 * t220 + t426;
t136 = pkin(9) * t313 + t141;
t328 = t346 * pkin(2) + pkin(1);
t269 = -qJD(1) * t328 * t337 + qJD(3);
t151 = pkin(3) * t255 + pkin(9) * t259 + t269;
t91 = -t136 * t341 + t345 * t151;
t73 = -qJ(5) * t219 + t91;
t63 = pkin(4) * t247 + t73;
t217 = -t259 * t341 - t313 * t345;
t92 = t136 * t345 + t151 * t341;
t74 = -qJ(5) * t217 + t92;
t71 = t521 * t74;
t33 = t335 * t63 + t71;
t31 = pkin(10) * t247 + t33;
t140 = t220 * t522 - t227;
t135 = -t313 * pkin(3) - t140;
t106 = t217 * pkin(4) + qJD(5) + t135;
t129 = t521 * t217 + t219 * t335;
t380 = -t335 * t217 + t219 * t521;
t54 = t129 * pkin(5) - pkin(10) * t380 + t106;
t14 = t31 * t344 + t340 * t54;
t456 = qJDD(1) * t338;
t312 = qJDD(2) + t456;
t400 = qJD(2) * t427;
t457 = qJD(1) * qJD(2);
t434 = t342 * t457;
t407 = t337 * t434;
t560 = t336 * t407 + (-qJD(1) * t400 + qJDD(1) * t282) * t337;
t566 = -t345 * t312 - t341 * t560;
t117 = qJD(4) * t219 + t566;
t552 = pkin(4) * t117 + qJDD(5);
t542 = pkin(3) * t312;
t449 = pkin(1) * t456;
t309 = t346 * t449;
t435 = t338 * t457;
t410 = pkin(1) * t435;
t377 = -t342 * t410 + t309;
t429 = qJD(2) * t535;
t464 = qJD(3) * t342;
t139 = pkin(2) * t312 + (-qJDD(1) * t437 + (-t346 * t429 - t464) * qJD(1)) * t337 + t377;
t365 = qJD(3) * t346 - t342 * t429;
t454 = qJDD(1) * t346;
t431 = t337 * t454;
t442 = pkin(8) * t431 + t342 * t449 + t346 * t410;
t148 = (qJ(3) * t454 + qJD(1) * t365) * t337 + t442;
t89 = t522 * t139 - t336 * t148;
t83 = -t89 - t542;
t57 = t83 + t552;
t462 = qJD(4) * t345;
t116 = -t259 * t463 - t341 * t312 - t313 * t462 + t345 * t560;
t67 = -t116 * t335 + t521 * t117;
t68 = -t116 * t521 - t335 * t117;
t16 = pkin(5) * t67 - pkin(10) * t68 + t57;
t290 = qJDD(1) * t403;
t359 = qJD(2) * t282;
t455 = qJDD(1) * t342;
t432 = t336 * t455;
t190 = -t290 + (-qJD(1) * t359 + t432) * t337;
t189 = qJDD(4) + t190;
t453 = pkin(2) * t407 + qJDD(3);
t544 = pkin(1) * t337;
t105 = -pkin(2) * t431 + t190 * pkin(3) + pkin(9) * t560 - qJDD(1) * t544 + t453;
t90 = t336 * t139 + t522 * t148;
t84 = pkin(9) * t312 + t90;
t29 = -qJD(4) * t92 + t345 * t105 - t341 * t84;
t19 = pkin(4) * t189 + qJ(5) * t116 - qJD(5) * t219 + t29;
t383 = -t341 * t105 + t136 * t463 - t151 * t462 - t345 * t84;
t25 = -qJ(5) * t117 - qJD(5) * t217 - t383;
t8 = t335 * t19 + t521 * t25;
t6 = pkin(10) * t189 + t8;
t2 = -qJD(6) * t14 + t344 * t16 - t340 * t6;
t563 = qJD(6) + t129;
t572 = t14 * t563 + t2;
t391 = t31 * t340 - t344 * t54;
t1 = -t391 * qJD(6) + t340 * t16 + t344 * t6;
t571 = t391 * t563 + t1;
t343 = sin(qJ(1));
t347 = cos(qJ(1));
t482 = t342 * t336;
t381 = t427 - t482;
t470 = t282 * t338;
t205 = -t343 * t381 + t347 * t470;
t210 = t343 * t470 + t347 * t381;
t262 = t282 * t337;
t570 = g(1) * t210 - g(2) * t205 - g(3) * t262;
t569 = pkin(10) * t259 + t523;
t568 = t471 * pkin(5) - pkin(10) * t574 + t402;
t567 = t129 * t380;
t565 = -t91 * t247 - t383;
t461 = qJD(6) * t340;
t367 = t281 * t461 - t422;
t416 = t344 * t563;
t66 = qJDD(6) + t67;
t564 = -t340 * t66 - t416 * t563;
t332 = qJ(4) + pkin(12);
t329 = sin(t332);
t330 = cos(t332);
t485 = t337 * t347;
t170 = -t205 * t330 - t329 * t485;
t362 = t338 * t381;
t206 = t343 * t282 + t347 * t362;
t562 = t170 * t340 + t206 * t344;
t561 = t170 * t344 - t206 * t340;
t331 = t337 ^ 2;
t559 = 0.2e1 * t331;
t524 = t576 * t335 - t575 * t521;
t558 = t92 * t247 + t29;
t111 = t247 * t340 + t344 * t380;
t414 = t563 * t340;
t557 = t111 * t414;
t417 = t247 * t341;
t555 = t219 * t417;
t209 = t282 * t347 - t343 * t362;
t261 = t337 * t482 - t403;
t369 = g(1) * t209 + g(2) * t206 - g(3) * t261;
t553 = t369 * t329;
t233 = pkin(2) * t338 + t318 - t408;
t469 = pkin(8) * t486 + t316;
t250 = qJ(3) * t486 + t469;
t166 = t336 * t233 + t522 * t250;
t153 = pkin(9) * t338 + t166;
t314 = pkin(2) * t486;
t388 = -pkin(3) * t261 - pkin(9) * t262 + t314;
t179 = -t388 - t544;
t102 = t345 * t153 + t341 * t179;
t267 = t469 * qJD(2);
t109 = -t344 * t247 + t340 * t380;
t425 = -t344 * t189 + t340 * t68;
t43 = qJD(6) * t111 + t425;
t551 = -t109 * t471 + t379 * t43;
t423 = t344 * t259 - t340 * t574;
t460 = qJD(6) * t344;
t368 = t281 * t460 - t423;
t42 = -t340 * t189 - t247 * t460 - t344 * t68 + t380 * t461;
t493 = t281 * t340;
t550 = -t111 * t368 + t42 * t493;
t492 = t281 * t344;
t549 = -t367 * t563 + t66 * t492;
t548 = t189 * t281 + t247 * t574;
t547 = t379 * t68 - t380 * t471;
t545 = t259 ^ 2;
t478 = t343 * t346;
t480 = t342 * t347;
t274 = -t338 * t478 - t480;
t540 = g(1) * t274;
t539 = g(1) * t343;
t537 = g(3) * t346;
t536 = t345 * pkin(4);
t483 = t338 * t345;
t495 = t262 * t341;
t230 = -t483 - t495;
t465 = qJD(2) * t342;
t439 = t337 * t465;
t257 = t336 * t439 - t337 * t400;
t164 = -qJD(4) * t230 - t257 * t345;
t231 = -t262 * t345 + t338 * t341;
t258 = t337 * t359;
t311 = qJD(2) * t318;
t221 = t337 * t365 + t311;
t438 = t535 * t337;
t222 = -t337 * t464 + (-t346 * t438 - t316) * qJD(2);
t138 = t221 * t522 + t336 * t222;
t412 = pkin(2) * t439;
t178 = -pkin(3) * t258 + pkin(9) * t257 + t412;
t56 = -qJD(4) * t102 - t138 * t341 + t345 * t178;
t40 = -pkin(4) * t258 - qJ(5) * t164 - qJD(5) * t231 + t56;
t163 = qJD(4) * t231 - t257 * t341;
t55 = t345 * t138 - t153 * t463 + t341 * t178 + t179 * t462;
t49 = -qJ(5) * t163 - qJD(5) * t230 + t55;
t12 = t335 * t40 + t521 * t49;
t441 = t522 * pkin(2);
t326 = -t441 - pkin(3);
t295 = t326 - t536;
t204 = -pkin(5) * t379 - t281 * pkin(10) + t295;
t278 = t474 * t345;
t424 = t474 * t341;
t216 = t278 * t521 - t335 * t424;
t125 = t204 * t344 - t216 * t340;
t534 = qJD(6) * t125 + t568 * t340 + t569 * t344;
t126 = t204 * t340 + t216 * t344;
t533 = -qJD(6) * t126 - t569 * t340 + t568 * t344;
t101 = -t153 * t341 + t345 * t179;
t79 = pkin(4) * t261 - qJ(5) * t231 + t101;
t87 = -qJ(5) * t230 + t102;
t51 = t335 * t79 + t521 * t87;
t530 = t335 * t74;
t526 = -t109 * t460 - t340 * t43;
t525 = -t259 * pkin(5) + t524;
t520 = t109 * t380;
t519 = t109 * t129;
t518 = t111 * t109;
t517 = t111 * t380;
t516 = t380 ^ 2;
t515 = t380 * t247;
t514 = t129 ^ 2;
t513 = t129 * t259;
t512 = t129 * t247;
t511 = t380 * t259;
t509 = t189 * t341;
t506 = t210 * t341;
t505 = t217 * t255;
t504 = t217 * t259;
t503 = t219 * t217;
t502 = t219 * t259;
t501 = t247 * t259;
t500 = t255 * t313;
t498 = t259 * t255;
t497 = t259 * t313;
t496 = t261 * t340;
t491 = t330 * t340;
t490 = t330 * t344;
t489 = t331 * qJD(1) ^ 2;
t488 = t337 * t342;
t487 = t337 * t343;
t481 = t342 * t343;
t476 = t346 * t347;
t473 = -t341 * t117 - t217 * t462;
t333 = t342 ^ 2;
t334 = t346 ^ 2;
t468 = t333 - t334;
t459 = qJD(2) - t313;
t448 = t346 * t489;
t447 = t341 * t487;
t446 = t345 * t487;
t445 = t345 * t485;
t444 = t338 * t476;
t306 = t341 * t485;
t327 = pkin(3) + t536;
t339 = -qJ(5) - pkin(9);
t443 = -t261 * t327 + t262 * t339 + t314;
t436 = pkin(1) * t559;
t433 = t346 * t457;
t430 = g(2) * t485 - g(3) * t338;
t7 = t521 * t19 - t335 * t25;
t421 = t205 * t329 - t330 * t485;
t420 = -t205 * t345 - t306;
t137 = t221 * t336 - t522 * t222;
t268 = pkin(2) * t484 - t438;
t419 = -t268 * t343 + t347 * t328;
t415 = t247 * t345;
t413 = t313 + t467;
t411 = t312 + t456;
t409 = t342 * t448;
t406 = t342 * t433;
t301 = pkin(2) * t444;
t405 = -pkin(2) * t481 + t301;
t404 = t471 * t111 + t42 * t379;
t401 = -t129 * t574 - t281 * t67;
t399 = pkin(5) * t330 + pkin(10) * t329;
t173 = t210 * t329 - t330 * t487;
t398 = -g(1) * t421 - g(2) * t173;
t397 = g(1) * t206 - g(2) * t209;
t396 = g(1) * t347 + g(2) * t343;
t395 = t379 * t189 - t471 * t247;
t392 = t328 * qJDD(1);
t46 = pkin(10) * t261 + t51;
t165 = t233 * t522 - t336 * t250;
t152 = -t338 * pkin(3) - t165;
t121 = t230 * pkin(4) + t152;
t145 = t230 * t521 + t231 * t335;
t146 = -t335 * t230 + t231 * t521;
t60 = t145 * pkin(5) - t146 * pkin(10) + t121;
t21 = t340 * t60 + t344 * t46;
t20 = -t340 * t46 + t344 * t60;
t120 = t146 * t344 + t496;
t390 = -t268 * t347 - t328 * t343;
t389 = t344 * t66 + (-t129 * t340 - t461) * t563;
t386 = t345 * t189 - t573 * t247;
t93 = pkin(4) * t163 + t137;
t385 = -t205 * t341 + t445;
t11 = -t335 * t49 + t40 * t521;
t32 = t521 * t63 - t530;
t50 = -t335 * t87 + t521 * t79;
t384 = t205 * t339 + t206 * t327 + t405;
t30 = -t247 * pkin(5) - t32;
t323 = pkin(4) * t335 + pkin(10);
t382 = t30 * t563 - t323 * t66;
t376 = -g(1) * t487 + t430;
t375 = pkin(4) * t447 + t209 * t339 + t210 * t327 + t419;
t374 = -t433 - t455;
t373 = t135 * t247 - t189 * t324;
t223 = t262 * t329 + t330 * t338;
t372 = g(1) * t173 - g(2) * t421 - g(3) * t223;
t174 = t210 * t330 + t329 * t487;
t224 = -t262 * t330 + t329 * t338;
t371 = -g(1) * t174 - g(2) * t170 - g(3) * t224;
t366 = t274 * pkin(2);
t364 = t374 * pkin(8);
t361 = pkin(4) * t306 + t205 * t327 - t206 * t339 + t390;
t358 = t367 * t109 - t43 * t492;
t357 = -t369 + t89;
t356 = t209 * t327 - t210 * t339 + t366;
t5 = -pkin(5) * t189 - t7;
t355 = qJD(6) * t323 * t563 - t372 + t5;
t354 = qJD(4) * t247 * t324 + t369 + t83;
t353 = t1 * t344 - t2 * t340 + (-t14 * t340 + t344 * t391) * qJD(6);
t352 = -t368 * t563 - t493 * t66;
t325 = -pkin(4) * t521 - pkin(5);
t317 = pkin(4) * t483;
t299 = pkin(4) * t446;
t289 = t312 * t338;
t283 = -t314 - t544;
t276 = -pkin(8) * t488 + t318;
t275 = -t338 * t481 + t476;
t273 = -t338 * t480 - t478;
t272 = -t444 + t481;
t266 = -pkin(8) * t439 + t311;
t265 = t469 * qJD(1);
t264 = -pkin(8) * t440 + t310;
t253 = t261 * t344;
t249 = t255 ^ 2;
t234 = -t337 * t392 + t453;
t215 = t278 * t335 + t424 * t521;
t213 = t337 * t364 + t377;
t212 = -pkin(8) * t407 + t442;
t181 = t210 * t345 + t447;
t180 = t446 - t506;
t119 = t146 * t340 - t253;
t113 = t174 * t344 - t209 * t340;
t112 = -t174 * t340 - t209 * t344;
t108 = t189 * t261 - t247 * t258;
t104 = -t335 * t163 + t164 * t521;
t103 = t163 * t521 + t164 * t335;
t70 = pkin(4) * t219 + pkin(5) * t380 + pkin(10) * t129;
t59 = qJD(6) * t120 + t104 * t340 + t258 * t344;
t58 = -t344 * t104 + t146 * t461 + t258 * t340 - t261 * t460;
t45 = -t261 * pkin(5) - t50;
t38 = t521 * t73 - t530;
t37 = t335 * t73 + t71;
t36 = pkin(5) * t103 - pkin(10) * t104 + t93;
t23 = t340 * t70 + t344 * t38;
t22 = -t340 * t38 + t344 * t70;
t10 = -pkin(10) * t258 + t12;
t9 = t258 * pkin(5) - t11;
t4 = -qJD(6) * t21 - t10 * t340 + t344 * t36;
t3 = qJD(6) * t20 + t10 * t344 + t340 * t36;
t13 = [0, 0, 0, 0, 0, qJDD(1), -g(2) * t347 + t539, t396, 0, 0 (qJDD(1) * t333 + 0.2e1 * t406) * t331 (t342 * t454 - t457 * t468) * t559 (qJD(2) * t346 * t413 + t342 * t411) * t337 (qJDD(1) * t334 - 0.2e1 * t406) * t331 (t346 * t411 - t413 * t465) * t337, t289, -g(1) * t273 - g(2) * t275 + t213 * t338 - t267 * t313 + t276 * t312 + (-t434 + t454) * t436, -g(1) * t272 - g(2) * t274 - t212 * t338 - t266 * t313 - t312 * t469 + t374 * t436 ((-qJD(2) * t264 + qJDD(1) * t469 + t212 + (-qJD(2) * t276 + t266) * qJD(1)) * t346 + (-qJD(2) * t265 - qJDD(1) * t276 - t213) * t342 - t396) * t337, t212 * t469 + t265 * t266 + t213 * t276 - t264 * t267 + t331 * qJDD(1) * pkin(1) ^ 2 - g(1) * (-pkin(1) * t343 + pkin(8) * t485) - g(2) * (pkin(1) * t347 + pkin(8) * t487) t259 * t257 + t262 * t560, t262 * t190 + t257 * t255 - t259 * t258 + t261 * t560, -t257 * t313 - t262 * t312 - t338 * t560, t190 * t261 - t255 * t258, -t190 * t338 + t258 * t313 - t261 * t312, t289, -g(1) * t205 - g(2) * t210 - t137 * t313 + t165 * t312 + t190 * t283 + t234 * t261 + t255 * t412 - t258 * t269 + t338 * t89, -t138 * t313 - t166 * t312 - t234 * t262 - t269 * t257 - t259 * t412 - t283 * t560 - t90 * t338 + t397, -g(1) * t485 - g(2) * t487 - t137 * t259 - t138 * t255 + t140 * t257 + t141 * t258 + t165 * t560 - t166 * t190 - t90 * t261 + t89 * t262, -g(1) * t390 - g(2) * t419 - t140 * t137 + t141 * t138 + t89 * t165 + t90 * t166 + t234 * t283 + t269 * t412, -t116 * t231 + t164 * t219, t116 * t230 - t117 * t231 - t163 * t219 - t164 * t217, -t116 * t261 + t164 * t247 + t189 * t231 - t219 * t258, t117 * t230 + t163 * t217, -t117 * t261 - t163 * t247 - t189 * t230 + t217 * t258, t108, g(1) * t420 - g(2) * t181 + t101 * t189 + t152 * t117 + t135 * t163 + t137 * t217 + t83 * t230 + t56 * t247 - t91 * t258 + t29 * t261, -g(1) * t385 - g(2) * t180 - t102 * t189 - t152 * t116 + t135 * t164 + t137 * t219 + t83 * t231 - t55 * t247 + t92 * t258 + t261 * t383, t101 * t116 - t102 * t117 - t163 * t92 - t164 * t91 - t217 * t55 - t219 * t56 + t230 * t383 - t231 * t29 - t397, -t383 * t102 + t92 * t55 + t29 * t101 + t91 * t56 + t83 * t152 + t135 * t137 - g(1) * (pkin(3) * t205 + pkin(9) * t206 + t390) - g(2) * (pkin(3) * t210 - pkin(9) * t209 + t419) t104 * t380 + t146 * t68, -t103 * t380 - t104 * t129 - t145 * t68 - t146 * t67, t104 * t247 + t146 * t189 - t258 * t380 + t261 * t68, t103 * t129 + t145 * t67, -t103 * t247 + t129 * t258 - t145 * t189 - t261 * t67, t108, g(1) * t170 - g(2) * t174 + t103 * t106 + t11 * t247 + t121 * t67 + t129 * t93 + t145 * t57 + t189 * t50 - t258 * t32 + t261 * t7, t104 * t106 - t12 * t247 + t121 * t68 + t146 * t57 - t189 * t51 + t258 * t33 - t261 * t8 + t380 * t93 - t398, -t103 * t33 - t104 * t32 - t11 * t380 - t12 * t129 - t145 * t8 - t146 * t7 - t50 * t68 - t51 * t67 - t397, -g(1) * t361 - g(2) * t375 + t106 * t93 + t32 * t11 + t33 * t12 + t57 * t121 + t7 * t50 + t8 * t51, -t111 * t58 - t120 * t42, t109 * t58 - t111 * t59 + t119 * t42 - t120 * t43, t103 * t111 + t120 * t66 - t145 * t42 - t563 * t58, t109 * t59 + t119 * t43, -t103 * t109 - t119 * t66 - t145 * t43 - t563 * t59, t103 * t563 + t145 * t66, g(1) * t561 - g(2) * t113 - t391 * t103 + t9 * t109 + t5 * t119 + t2 * t145 + t20 * t66 + t30 * t59 + t4 * t563 + t45 * t43, -g(1) * t562 - g(2) * t112 - t1 * t145 - t14 * t103 + t9 * t111 + t5 * t120 - t21 * t66 - t3 * t563 - t30 * t58 - t45 * t42, -t1 * t119 - t109 * t3 - t111 * t4 - t120 * t2 - t14 * t59 + t20 * t42 - t21 * t43 - t391 * t58 + t398, t1 * t21 + t14 * t3 + t2 * t20 - t391 * t4 + t5 * t45 + t30 * t9 - g(1) * (-pkin(5) * t170 + pkin(10) * t421 + t361) - g(2) * (pkin(5) * t174 + pkin(10) * t173 + t375); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t409, t468 * t489 (qJD(1) * t346 * t459 + t455) * t337, t409 (-t459 * t466 + t454) * t337, t312, -t540 + g(2) * t272 + t265 * t313 + t309 + (-t435 + t489) * t342 * pkin(1) + (t364 - t537) * t337, pkin(1) * t448 + g(1) * t275 - g(2) * t273 + t264 * t313 + (pkin(8) * t457 + g(3)) * t488 - t442, 0, 0, -t498, -t249 + t545, -t560 + t500, t498, -t497 + t290 + (qJD(2) * t360 - t432) * t337, t312, t155 * t313 + t269 * t259 + (-t255 * t440 + t312 * t522) * pkin(2) + t357, t156 * t313 + t255 * t269 + (t259 * t440 - t312 * t336) * pkin(2) + t570 - t90, -t190 * t543 + t560 * t441 + (-t141 + t155) * t259 + (-t140 + t156) * t255, -g(2) * t301 + t140 * t155 - t141 * t156 + (t90 * t336 + t89 * t522 - t540 + g(2) * t481 + (-t269 * t466 - t537) * t337) * pkin(2), -t116 * t341 + t219 * t415 (-t116 - t505) * t345 - t555 + t473, t247 * t415 + t502 + t509, -t117 * t345 + t217 * t417, t386 - t504, t501, t117 * t326 - t155 * t217 - t247 * t99 + t259 * t91 + t341 * t373 - t345 * t354, t100 * t247 - t116 * t326 - t155 * t219 - t259 * t92 + t341 * t354 + t345 * t373, t100 * t217 + t219 * t99 + (-t117 * t324 - t255 * t91 - t383 + (t219 * t324 - t91) * qJD(4)) * t345 + (-t116 * t324 - t255 * t92 - t29 + (t217 * t324 - t92) * qJD(4)) * t341 - t570, t83 * t326 - t92 * t100 - t91 * t99 - t135 * t155 - g(1) * (pkin(3) * t209 + pkin(9) * t210 + t366) - g(2) * (pkin(3) * t206 - pkin(9) * t205 + t405) - g(3) * t388 + (-t383 * t345 - t29 * t341 + (-t341 * t92 - t345 * t91) * qJD(4)) * t324, t281 * t68 + t380 * t574, t401 + t547, t511 + t548, t129 * t471 - t379 * t67, t395 - t513, t501, t106 * t471 + t129 * t402 - t189 * t215 - t247 * t524 + t259 * t32 + t295 * t67 - t330 * t369 - t379 * t57, t106 * t574 - t189 * t216 - t247 * t523 - t259 * t33 + t281 * t57 + t295 * t68 + t380 * t402 + t553, -t129 * t523 + t215 * t68 - t216 * t67 - t281 * t7 - t32 * t574 - t33 * t471 + t379 * t8 + t380 * t524 - t570, -g(1) * t356 - g(2) * t384 - g(3) * t443 + t106 * t402 - t7 * t215 + t8 * t216 + t57 * t295 - t32 * t524 + t33 * t523, -t111 * t367 - t42 * t492, t358 + t550, t404 + t549, t109 * t368 + t43 * t493, t352 + t551, -t379 * t66 + t471 * t563, t125 * t66 - t2 * t379 + t215 * t43 + t5 * t493 - g(1) * (t209 * t490 + t210 * t340) - g(2) * (-t205 * t340 + t206 * t490) - g(3) * (-t261 * t490 - t262 * t340) - t471 * t391 + t533 * t563 + t525 * t109 + t368 * t30, -t126 * t66 + t1 * t379 - t215 * t42 + t5 * t492 - g(1) * (-t209 * t491 + t210 * t344) - g(2) * (-t205 * t344 - t206 * t491) - g(3) * (t261 * t491 - t262 * t344) - t471 * t14 - t534 * t563 + t525 * t111 - t367 * t30, t125 * t42 - t126 * t43 + t423 * t14 + t422 * t391 - t533 * t111 - t534 * t109 - t553 + (-t1 * t340 - t2 * t344 + (-t14 * t344 - t340 * t391) * qJD(6)) * t281, t1 * t126 + t2 * t125 + t5 * t215 - g(1) * (t209 * t399 + t356) - g(2) * (t206 * t399 + t384) - g(3) * (-t261 * t399 + t443) + t525 * t30 + t534 * t14 - t533 * t391; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t190 - t497, -t560 - t500, -t249 - t545, -t140 * t259 + t141 * t255 + (-t392 - t539) * t337 + t430 + t453, 0, 0, 0, 0, 0, 0, t386 + t504, -t247 ^ 2 * t345 + t502 - t509 (t116 - t505) * t345 + t555 + t473, t135 * t259 + t565 * t341 + t558 * t345 + t376, 0, 0, 0, 0, 0, 0, t395 + t513, t511 - t548, t401 - t547, t106 * t259 + t281 * t8 - t32 * t471 + t33 * t574 + t379 * t7 + t376, 0, 0, 0, 0, 0, 0, t352 - t551, t404 - t549, t358 - t550, t14 * t422 + t281 * t353 + t30 * t471 - t379 * t5 - t391 * t423 + t376; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t503, -t217 ^ 2 + t219 ^ 2, t217 * t247 - t116, -t503, t219 * t247 + t259 * t462 - t313 * t463 - t566, t189, -g(1) * t180 + g(2) * t385 + g(3) * t230 - t135 * t219 + t558, g(1) * t181 + g(2) * t420 + g(3) * t231 + t135 * t217 - t565, 0, 0, t567, -t514 + t516, t68 + t512, -t567, -t67 + t515, t189, -t106 * t380 + t37 * t247 + (-t129 * t219 + t189 * t521) * pkin(4) + t372 + t7, t106 * t129 + t247 * t38 + (-t189 * t335 - t219 * t380) * pkin(4) - t371 - t8 (-t335 * t67 - t521 * t68) * pkin(4) + (t33 - t37) * t380 + (t38 - t32) * t129, -g(1) * t299 - g(3) * t317 + t32 * t37 - t33 * t38 + (g(2) * t445 - t106 * t219 + t8 * t335 + t341 * t570 + t7 * t521) * pkin(4), t111 * t416 - t340 * t42 (-t42 - t519) * t344 - t557 + t526, -t517 - t564, t109 * t414 - t344 * t43, t389 + t520, -t563 * t380, -t109 * t37 - t22 * t563 + t325 * t43 + t340 * t382 - t344 * t355 + t380 * t391, -t111 * t37 + t14 * t380 + t23 * t563 - t325 * t42 + t340 * t355 + t344 * t382, t109 * t23 + t111 * t22 + (t391 * t129 - t323 * t43 + t1 + (t111 * t323 + t391) * qJD(6)) * t344 + (-t129 * t14 - t323 * t42 - t2 + (t109 * t323 - t14) * qJD(6)) * t340 + t371, t5 * t325 - t14 * t23 + t391 * t22 - t30 * t37 - g(1) * (-pkin(4) * t506 - pkin(5) * t173 + pkin(10) * t174 + t299) - g(2) * (-pkin(4) * t385 + pkin(5) * t421 + pkin(10) * t170) - g(3) * (pkin(4) * t495 + pkin(5) * t223 + pkin(10) * t224 + t317) + t353 * t323; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t67 + t515, t68 - t512, -t514 - t516, t129 * t33 + t32 * t380 - t357 - t542 + t552, 0, 0, 0, 0, 0, 0, t389 - t520, -t517 + t564 (t42 - t519) * t344 + t557 + t526, -t380 * t30 + t340 * t571 + t344 * t572 + t369; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t518, -t109 ^ 2 + t111 ^ 2, t109 * t563 - t42, -t518, -t425 + (-qJD(6) + t563) * t111, t66, -t30 * t111 - g(1) * t112 + g(2) * t562 - g(3) * (-t224 * t340 + t253) + t572, t30 * t109 + g(1) * t113 + g(2) * t561 - g(3) * (-t224 * t344 - t496) - t571, 0, 0;];
tau_reg  = t13;
