% Calculate vector of inverse dynamics joint torques for
% S6RRRPRR13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d5,d6,theta4]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRPRR13_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 20:11
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRPRR13_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR13_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR13_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR13_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR13_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRPRR13_invdynJ_fixb_mdp_slag_vp: pkin has to be [13x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRPRR13_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 20:06:13
% EndTime: 2019-03-09 20:07:08
% DurationCPUTime: 39.49s
% Computational Cost: add. (32439->979), mult. (92720->1332), div. (0->0), fcn. (79451->18), ass. (0->388)
t1006 = cos(qJ(3));
t1136 = qJD(3) * t1006;
t999 = cos(pkin(7));
t1111 = t999 * t1136;
t1002 = sin(qJ(3));
t1150 = t1002 * t999;
t996 = sin(pkin(7));
t1151 = t1002 * t996;
t1003 = sin(qJ(2));
t1186 = pkin(10) * t999;
t997 = sin(pkin(6));
t1075 = (-pkin(9) - t1186) * t997;
t1052 = t1003 * t1075;
t1007 = cos(qJ(2));
t1183 = cos(pkin(6));
t1121 = pkin(1) * t1183;
t984 = t1007 * t1121;
t975 = qJD(1) * t984;
t892 = qJD(1) * t1052 + t975;
t983 = t1003 * t1121;
t1017 = t1007 * t1075 - t983;
t893 = t1017 * qJD(1);
t1187 = pkin(10) * t996;
t1051 = pkin(2) * t1003 - t1007 * t1187;
t927 = t1051 * t997 * qJD(1);
t1223 = pkin(2) * t1111 - t1006 * t892 - t893 * t1150 - t927 * t1151;
t1000 = sin(qJ(6));
t1004 = cos(qJ(6));
t1001 = sin(qJ(5));
t1005 = cos(qJ(5));
t1098 = t1183 * qJD(1);
t1063 = t1098 + qJD(2);
t1043 = t996 * t1063;
t1145 = t1007 * t997;
t1116 = qJD(1) * t1145;
t1014 = t999 * t1116 + t1043;
t1129 = t1003 * t1006;
t1106 = t997 * t1129;
t863 = qJD(1) * t1106 + t1002 * t1014;
t995 = sin(pkin(13));
t853 = t995 * t863;
t914 = -t1063 * t999 + t1116 * t996 - qJD(3);
t998 = cos(pkin(13));
t1096 = t914 * t998 + t853;
t794 = t1005 * t1096;
t803 = t863 * t998 - t914 * t995;
t732 = t1001 * t803 + t794;
t730 = qJD(6) + t732;
t1219 = t730 ^ 2;
t1126 = qJDD(1) * t1007;
t1101 = t997 * t1126;
t1078 = t999 * t1101;
t1131 = t1002 * t1003;
t1109 = t997 * t1131;
t1079 = qJD(1) * t1109;
t1202 = t1006 * t1014 - t1079;
t1127 = qJDD(1) * t1003;
t1102 = t997 * t1127;
t1138 = qJD(2) * t1007;
t1103 = qJD(1) * t1138;
t1204 = t997 * t1103 + t1102;
t1094 = t1183 * qJDD(1);
t978 = t1094 + qJDD(2);
t765 = -qJD(2) * t999 * t1079 + qJD(3) * t1202 + t1002 * t1078 + t1006 * t1204 + t978 * t1151;
t1139 = qJD(2) * t1003;
t1104 = qJD(1) * t1139;
t1077 = t997 * t1104;
t867 = t978 * t999 + qJDD(3) + (t1077 - t1101) * t996;
t726 = t995 * t765 - t867 * t998;
t727 = t765 * t998 + t867 * t995;
t1089 = t1001 * t727 + t1005 * t726;
t1212 = -t1001 * t1096 + t1005 * t803;
t655 = qJD(5) * t1212 + t1089;
t653 = qJDD(6) + t655;
t1222 = -t1000 * t1219 + t1004 * t653;
t814 = -t893 * t996 + t999 * t927;
t1130 = t1002 * t1007;
t1046 = t1129 * t999 + t1130;
t925 = t1046 * t997;
t912 = qJD(1) * t925;
t1128 = t1006 * t1007;
t1044 = -t1131 * t999 + t1128;
t926 = t1044 * t997;
t913 = qJD(1) * t926;
t1221 = -pkin(3) * t912 + qJ(4) * t913 - t814 + (-qJD(4) * t1002 + (pkin(3) * t1002 - qJ(4) * t1006) * qJD(3)) * t996;
t1149 = t1003 * t997;
t1117 = qJD(1) * t1149;
t1084 = t996 * t1117;
t1137 = qJD(3) * t1002;
t1114 = t996 * t1137;
t1220 = pkin(10) * t1114 + qJ(4) * t1084 - qJD(4) * t999 - t1223;
t858 = qJD(5) - t1202;
t1218 = t732 * t858;
t1112 = t996 * t1136;
t845 = -t1084 * t998 + t913 * t995;
t1217 = t995 * t1112 - t845;
t1165 = t1220 * t995 + t1221 * t998;
t1164 = -t1220 * t998 + t1221 * t995;
t1008 = cos(qJ(1));
t1144 = t1008 * t997;
t1118 = t996 * t1144;
t1099 = t1008 * t1183;
t1190 = sin(qJ(1));
t940 = t1003 * t1190 - t1007 * t1099;
t941 = t1003 * t1099 + t1007 * t1190;
t828 = t1002 * t1118 - t1006 * t941 + t1150 * t940;
t897 = t1144 * t999 - t940 * t996;
t992 = pkin(13) + qJ(5);
t989 = sin(t992);
t990 = cos(t992);
t769 = t828 * t990 + t897 * t989;
t1146 = t1006 * t999;
t825 = t1002 * t941 + t1006 * t1118 + t1146 * t940;
t1216 = t1000 * t769 + t1004 * t825;
t1215 = -t1000 * t825 + t1004 * t769;
t1185 = pkin(11) * t998;
t846 = t1084 * t995 + t913 * t998;
t1210 = pkin(4) * t912 - pkin(11) * t846 - (pkin(4) * t1002 - t1006 * t1185) * t996 * qJD(3) - t1165;
t1214 = pkin(11) * t1217 - t1164;
t1113 = t999 * t1137;
t1213 = pkin(2) * t1113 + pkin(10) * t1112 - t1002 * t892;
t991 = t997 ^ 2;
t1211 = 0.2e1 * pkin(1) * t991;
t935 = t1151 * t995 - t998 * t999;
t937 = t1151 * t998 + t995 * t999;
t856 = t1001 * t937 + t1005 * t935;
t952 = t1001 * t995 - t1005 * t998;
t1168 = -qJD(5) * t856 + t1001 * t845 - t1005 * t846 - t1112 * t952;
t857 = -t1001 * t935 + t1005 * t937;
t953 = t1001 * t998 + t1005 * t995;
t1167 = qJD(5) * t857 - t1001 * t846 - t1005 * t845 + t1112 * t953;
t1161 = pkin(3) * t1084 - (-t893 * t999 - t927 * t996) * t1006 + t1213;
t775 = t952 * t1202;
t938 = t952 * qJD(5);
t1160 = -t938 + t775;
t1159 = t858 * t953;
t1067 = -t912 + t1114;
t1074 = t1183 * t1190;
t1021 = t1008 * t1003 + t1007 * t1074;
t1018 = t1021 * t1006;
t1120 = t997 * t1190;
t1085 = t996 * t1120;
t942 = -t1003 * t1074 + t1007 * t1008;
t829 = t1002 * t942 - t1006 * t1085 + t1018 * t999;
t1105 = t1183 * t996;
t1072 = t1006 * t1105;
t1108 = t999 * t1128;
t884 = -t1108 * t997 - t1072 + t1109;
t1040 = g(1) * t829 + g(2) * t825 + g(3) * t884;
t1024 = t1040 * t990;
t1019 = pkin(2) * t1183 + t1052;
t859 = qJD(2) * pkin(2) + qJD(1) * t1019 + t975;
t1050 = pkin(2) * t1007 + t1003 * t1187;
t1047 = -pkin(1) - t1050;
t919 = t1047 * t997;
t906 = qJD(1) * t919;
t793 = -t859 * t996 + t999 * t906;
t723 = -pkin(3) * t1202 - qJ(4) * t863 + t793;
t1025 = pkin(9) * t1145 + t983;
t854 = pkin(10) * t1014 + qJD(1) * t1025;
t749 = t1006 * t854 + t859 * t1150 + t906 * t1151;
t729 = -qJ(4) * t914 + t749;
t679 = t998 * t723 - t729 * t995;
t659 = -pkin(4) * t1202 - pkin(11) * t803 + t679;
t680 = t995 * t723 + t998 * t729;
t667 = -pkin(11) * t1096 + t680;
t631 = -t1001 * t667 + t1005 * t659;
t629 = -pkin(5) * t858 - t631;
t1178 = t1202 * t995;
t711 = pkin(4) * t1178 + t749;
t988 = -pkin(4) * t998 - pkin(3);
t872 = pkin(5) * t952 - pkin(12) * t953 + t988;
t1184 = pkin(11) + qJ(4);
t965 = t1184 * t995;
t966 = t1184 * t998;
t902 = -t1001 * t965 + t1005 * t966;
t1203 = -t629 * qJD(6) * t953 + (-pkin(5) * t1159 + pkin(12) * t1160 + qJD(6) * t902 + t711) * t730 - t872 * t653 - t1024;
t1011 = qJD(2) * t1046 + qJD(3) * (t1130 * t999 + t1129);
t1147 = t1006 * t996;
t766 = -t1006 * t1078 + t1043 * t1137 - t978 * t1147 + (qJD(1) * t1011 + t1002 * t1127) * t997;
t1201 = t828 * t989 - t897 * t990;
t1162 = pkin(4) * t1217 + t1161;
t748 = -t1002 * t854 + t1006 * (t859 * t999 + t906 * t996);
t780 = pkin(3) * t863 - qJ(4) * t1202;
t704 = -t748 * t995 + t998 * t780;
t685 = pkin(4) * t863 - t1185 * t1202 + t704;
t705 = t998 * t748 + t995 * t780;
t694 = -pkin(11) * t1178 + t705;
t1200 = -qJD(4) * t953 - qJD(5) * t902 + t1001 * t694 - t1005 * t685;
t901 = t1001 * t966 + t1005 * t965;
t1199 = qJD(4) * t952 + qJD(5) * t901 + t1001 * t685 + t1005 * t694;
t1031 = t1145 * t999 + t1105;
t885 = t1002 * t1031 + t1106;
t936 = t1145 * t996 - t1183 * t999;
t820 = t885 * t995 + t936 * t998;
t821 = t885 * t998 - t936 * t995;
t754 = -t1001 * t820 + t1005 * t821;
t877 = t884 * t1004;
t1198 = -t1000 * t754 + t877;
t1134 = qJD(5) * t1005;
t1135 = qJD(5) * t1001;
t1158 = pkin(2) * t1150 + pkin(10) * t1147;
t930 = qJ(4) * t999 + t1158;
t931 = (-pkin(3) * t1006 - qJ(4) * t1002 - pkin(2)) * t996;
t832 = -t930 * t995 + t998 * t931;
t792 = -pkin(4) * t1147 - pkin(11) * t937 + t832;
t833 = t998 * t930 + t995 * t931;
t806 = -pkin(11) * t935 + t833;
t1197 = t1001 * t1210 + t1214 * t1005 - t792 * t1134 + t1135 * t806;
t1196 = -t1104 + t1126;
t1195 = -pkin(3) * t867 + qJDD(4);
t1080 = pkin(1) * t1094;
t967 = t975 * qJD(2);
t1122 = pkin(9) * t1101 + t1003 * t1080 + t967;
t1023 = -pkin(9) * t1077 + t1122;
t790 = (t1196 * t997 * t999 + t978 * t996) * pkin(10) + t1023;
t1034 = -t1103 - t1127;
t1026 = t1034 * pkin(9);
t1140 = qJD(1) * qJD(2);
t1027 = t1007 * t1080 - t1140 * t983;
t795 = t978 * pkin(2) + (t1034 * t1186 + t1026) * t997 + t1027;
t1033 = t1051 * qJD(2);
t831 = (qJD(1) * t1033 + qJDD(1) * t1047) * t997;
t672 = t1006 * t790 + t859 * t1111 + t906 * t1112 - t1137 * t854 + t795 * t1150 + t831 * t1151;
t662 = qJ(4) * t867 - qJD(4) * t914 + t672;
t740 = -t795 * t996 + t999 * t831;
t665 = pkin(3) * t766 - qJ(4) * t765 - qJD(4) * t863 + t740;
t633 = -t662 * t995 + t998 * t665;
t625 = pkin(4) * t766 - pkin(11) * t727 + t633;
t634 = t998 * t662 + t995 * t665;
t627 = -pkin(11) * t726 + t634;
t632 = t1001 * t659 + t1005 * t667;
t616 = -qJD(5) * t632 - t1001 * t627 + t1005 * t625;
t1142 = t942 * t1006;
t830 = t1142 + (-t1021 * t999 + t1085) * t1002;
t899 = t1021 * t996 + t1120 * t999;
t770 = -t830 * t989 + t899 * t990;
t1041 = g(1) * t770 + g(2) * t1201 + g(3) * (-t885 * t989 - t936 * t990);
t763 = qJDD(5) + t766;
t614 = -pkin(5) * t763 - t616;
t1194 = (pkin(5) * t1212 + pkin(12) * t730) * t730 + t1041 + t614;
t889 = t984 + t1019;
t808 = -t889 * t996 + t999 * t919;
t744 = pkin(3) * t884 - qJ(4) * t885 + t808;
t879 = pkin(10) * t1031 + t1025;
t1124 = t1006 * t879 + t889 * t1150 + t919 * t1151;
t751 = -qJ(4) * t936 + t1124;
t692 = t998 * t744 - t751 * t995;
t671 = pkin(4) * t884 - pkin(11) * t821 + t692;
t693 = t995 * t744 + t998 * t751;
t676 = -pkin(11) * t820 + t693;
t1055 = t1001 * t671 + t1005 * t676;
t976 = qJD(2) * t984;
t895 = qJD(2) * t1052 + t976;
t896 = t1017 * qJD(2);
t928 = t997 * t1033;
t1022 = t1006 * t895 + t889 * t1111 + t919 * t1112 - t1137 * t879 + t896 * t1150 + t928 * t1151;
t1115 = t997 * t1139;
t1083 = t996 * t1115;
t696 = qJ(4) * t1083 - qJD(4) * t936 + t1022;
t812 = t1011 * t997 + t1105 * t1137;
t813 = qJD(3) * t1072 + ((t1108 - t1131) * qJD(3) + t1044 * qJD(2)) * t997;
t815 = -t896 * t996 + t999 * t928;
t703 = pkin(3) * t812 - qJ(4) * t813 - qJD(4) * t885 + t815;
t656 = -t696 * t995 + t998 * t703;
t788 = t1083 * t995 + t813 * t998;
t644 = pkin(4) * t812 - pkin(11) * t788 + t656;
t657 = t998 * t696 + t995 * t703;
t787 = -t1083 * t998 + t813 * t995;
t647 = -pkin(11) * t787 + t657;
t1191 = -qJD(5) * t1055 - t1001 * t647 + t1005 * t644;
t1009 = qJD(1) ^ 2;
t1182 = qJ(4) * t766;
t1154 = t1000 * t1212;
t706 = -t1004 * t858 + t1154;
t1181 = t706 * t730;
t708 = t1000 * t858 + t1004 * t1212;
t1180 = t708 * t730;
t1179 = t749 * t914;
t1176 = t978 * MDP(8);
t1175 = t989 * t996;
t1174 = t990 * t996;
t1166 = t1001 * t792 + t1005 * t806;
t1173 = -pkin(5) * t1067 + qJD(5) * t1166 - t1001 * t1214 + t1210 * t1005;
t823 = t1000 * t857 + t1004 * t1147;
t1170 = -qJD(6) * t823 + t1000 * t1067 + t1004 * t1168;
t1110 = t1000 * t1147;
t1132 = qJD(6) * t1004;
t1169 = -qJD(6) * t1110 + t1000 * t1168 - t1004 * t1067 + t1132 * t857;
t1163 = pkin(5) * t863 - t1200;
t993 = t1003 ^ 2;
t1157 = -t1007 ^ 2 + t993;
t654 = -qJD(5) * t794 - t1001 * t726 + t1005 * t727 - t1135 * t803;
t1125 = t1000 * t763 + t1004 * t654 + t858 * t1132;
t1133 = qJD(6) * t1000;
t635 = -t1133 * t1212 + t1125;
t1156 = t1000 * t635;
t1155 = t1000 * t653;
t1152 = t1000 * t884;
t1148 = t1004 * t953;
t1143 = t1009 * t991;
t728 = t914 * pkin(3) + qJD(4) - t748;
t1141 = -qJD(4) + t728;
t1119 = t996 * t1149;
t1107 = t1007 * t1143;
t615 = t1001 * t625 + t1005 * t627 + t659 * t1134 - t1135 * t667;
t613 = pkin(12) * t763 + t615;
t1049 = t1002 * t790 + t859 * t1113 + t906 * t1114 + t854 * t1136 - t795 * t1146 - t831 * t1147;
t666 = t1049 + t1195;
t646 = pkin(4) * t726 + t666;
t620 = pkin(5) * t655 - pkin(12) * t654 + t646;
t1093 = -t1000 * t613 + t1004 * t620;
t1092 = t1000 * t654 - t1004 * t763;
t738 = -t1000 * t775 - t1004 * t863;
t1091 = t1000 * t938 + t738;
t739 = t1000 * t863 - t1004 * t775;
t1088 = t1004 * t938 + t739;
t1087 = t1004 * t730;
t1086 = -t1002 * t895 - t889 * t1113 - t919 * t1114 - t879 * t1136;
t1073 = t997 * t1009 * t1183;
t1071 = g(1) * t825 - g(2) * t829;
t979 = pkin(10) * t1151;
t933 = t979 + (-pkin(2) * t1006 - pkin(3)) * t999;
t860 = pkin(4) * t935 + t933;
t750 = pkin(5) * t856 - pkin(12) * t857 + t860;
t1070 = -pkin(12) * t1067 - qJD(6) * t750 + t1197;
t719 = -pkin(12) * t1147 + t1166;
t1068 = -pkin(5) * t1167 + pkin(12) * t1168 + qJD(6) * t719 - t1162;
t1065 = t889 * t999 + t919 * t996;
t1064 = t896 * t999 + t928 * t996;
t1062 = 0.2e1 * t1098 + qJD(2);
t1061 = t1000 * t620 + t1004 * t613;
t630 = pkin(12) * t858 + t632;
t699 = pkin(4) * t1096 + t728;
t648 = t732 * pkin(5) - pkin(12) * t1212 + t699;
t622 = t1000 * t648 + t1004 * t630;
t1060 = t1000 * t630 - t1004 * t648;
t638 = pkin(12) * t884 + t1055;
t870 = t1002 * t879;
t752 = pkin(3) * t936 - t1006 * t1065 + t870;
t709 = pkin(4) * t820 + t752;
t753 = t1001 * t821 + t1005 * t820;
t660 = pkin(5) * t753 - pkin(12) * t754 + t709;
t1059 = t1000 * t660 + t1004 * t638;
t1058 = -t1000 * t638 + t1004 * t660;
t713 = t1004 * t754 + t1152;
t1056 = -t1001 * t676 + t1005 * t671;
t1053 = -t1001 * t806 + t1005 * t792;
t1042 = t997 * (t1094 + t978);
t1039 = -g(1) * t830 + g(2) * t828 - g(3) * t885;
t849 = -t1002 * t940 + t1146 * t941;
t851 = -t1002 * t1021 + t1142 * t999;
t1038 = g(1) * t851 + g(2) * t849 + g(3) * t925;
t850 = -t1006 * t940 - t1150 * t941;
t852 = -t1150 * t942 - t1018;
t1037 = g(1) * t852 + g(2) * t850 + g(3) * t926;
t1036 = t1001 * t644 + t1005 * t647 + t671 * t1134 - t1135 * t676;
t1032 = -t1133 * t953 - t1088;
t1029 = t1040 - t666;
t1028 = g(1) * t942 + g(2) * t941 + g(3) * t1149;
t1020 = -pkin(12) * t653 + (t629 + t631) * t730;
t1015 = t1136 * t728 - t1028;
t1013 = t1040 - t1049;
t1012 = t1063 * t1025;
t702 = -pkin(3) * t1083 - t1006 * t1064 - t1086;
t686 = pkin(4) * t787 + t702;
t1010 = t614 * t953 - t629 * t938 - t902 * t653 + (pkin(12) * t863 - qJD(6) * t872 + t1199) * t730 + t1039;
t848 = t1119 * t989 + t926 * t990;
t824 = t1004 * t857 - t1110;
t810 = t885 * t990 - t936 * t989;
t797 = t1175 * t942 + t852 * t990;
t796 = t1175 * t941 + t850 * t990;
t771 = t830 * t990 + t899 * t989;
t718 = pkin(5) * t1147 - t1053;
t717 = t1000 * t829 + t1004 * t771;
t716 = -t1000 * t771 + t1004 * t829;
t688 = qJD(5) * t754 + t1001 * t788 + t1005 * t787;
t687 = -qJD(5) * t753 - t1001 * t787 + t1005 * t788;
t650 = qJD(6) * t713 + t1000 * t687 - t812 * t1004;
t649 = qJD(6) * t1198 + t1000 * t812 + t1004 * t687;
t637 = -pkin(5) * t884 - t1056;
t636 = qJD(6) * t708 + t1092;
t628 = pkin(5) * t688 - pkin(12) * t687 + t686;
t618 = -pkin(5) * t812 - t1191;
t617 = pkin(12) * t812 + t1036;
t612 = -qJD(6) * t622 + t1093;
t611 = -qJD(6) * t1060 + t1061;
t1 = [(t1022 * t914 - t1083 * t749 - t1124 * t867 + t672 * t936 + t740 * t885 + t808 * t765 + t793 * t813 + t815 * t863 - t1071) * MDP(17) + t1183 * t1176 + (g(1) * t1190 - g(2) * t1008) * MDP(2) + (g(1) * t1008 + g(2) * t1190) * MDP(3) + (0.2e1 * (t1003 * t1126 - t1140 * t1157) * MDP(5) + (qJDD(1) * t993 + 0.2e1 * t1003 * t1103) * MDP(4)) * t991 + ((-qJD(6) * t1059 - t1000 * t617 + t1004 * t628) * t730 + t1058 * t653 + t612 * t753 - t1060 * t688 + t618 * t706 + t637 * t636 - t614 * t1198 + t629 * t650 - g(1) * t1215 - g(2) * t717) * MDP(34) + (-(qJD(6) * t1058 + t1000 * t628 + t1004 * t617) * t730 - t1059 * t653 - t611 * t753 - t622 * t688 + t618 * t708 + t637 * t635 + t614 * t713 + t629 * t649 + g(1) * t1216 - g(2) * t716) * MDP(35) + (-t1096 * t657 - t633 * t821 - t634 * t820 - t656 * t803 - t679 * t788 - t680 * t787 - t692 * t727 - t693 * t726 + t1071) * MDP(20) + (t634 * t693 + t680 * t657 + t633 * t692 + t679 * t656 + t666 * t752 + t728 * t702 - g(1) * (-pkin(1) * t1190 - t941 * pkin(2) + t828 * pkin(3) + pkin(9) * t1144 + pkin(10) * t897 - qJ(4) * t825) - g(2) * (t1008 * pkin(1) + t942 * pkin(2) + t830 * pkin(3) + pkin(9) * t1120 + pkin(10) * t899 + t829 * qJ(4))) * MDP(21) + (-g(1) * t769 - g(2) * t771 + t1056 * t763 + t1191 * t858 + t616 * t884 + t631 * t812 + t646 * t753 + t709 * t655 + t686 * t732 + t699 * t688) * MDP(27) + (-t1086 * t914 - t870 * t867 + t1049 * t936 + t748 * t1083 - t815 * t1202 + t808 * t766 + t740 * t884 + t793 * t812 - g(1) * t828 - g(2) * t830 + (-t1064 * t914 + t1065 * t867) * t1006) * MDP(16) + (t657 * t1202 - t693 * t766 - t634 * t884 - t680 * t812 + t702 * t803 + t752 * t727 + t666 * t821 + t728 * t788 - g(1) * (-t828 * t995 + t897 * t998) - g(2) * (-t830 * t995 + t899 * t998)) * MDP(19) + (t1083 * t1202 + t766 * t936 + t812 * t914 - t867 * t884) * MDP(14) + (t1202 * t813 - t765 * t884 - t766 * t885 - t812 * t863) * MDP(12) + (t1007 * t1042 - t1062 * t1115) * MDP(7) + (-t1083 * t914 - t867 * t936) * MDP(15) + (t1083 * t863 - t765 * t936 - t813 * t914 + t867 * t885) * MDP(13) + (g(1) * t1201 - g(2) * t770 - t1036 * t858 - t1055 * t763 + t1212 * t686 - t615 * t884 - t632 * t812 + t646 * t754 + t709 * t654 + t699 * t687) * MDP(28) + (t1212 * t812 + t654 * t884 + t687 * t858 + t754 * t763) * MDP(24) + (-t1212 * t688 - t654 * t753 - t655 * t754 - t687 * t732) * MDP(23) + (t1212 * t687 + t654 * t754) * MDP(22) + (-t656 * t1202 + t692 * t766 + t633 * t884 + t679 * t812 + t702 * t1096 + t752 * t726 + t666 * t820 + t728 * t787 - g(1) * (t828 * t998 + t897 * t995) - g(2) * (t830 * t998 + t899 * t995)) * MDP(18) + (t1062 * t1138 * t997 + t1003 * t1042) * MDP(6) + (t1198 * t653 - t636 * t753 - t650 * t730 - t688 * t706) * MDP(32) + (t1198 * t635 - t636 * t713 - t649 * t706 - t650 * t708) * MDP(30) + (t765 * t885 + t813 * t863) * MDP(11) + (t763 * t884 + t812 * t858) * MDP(26) + (-t655 * t884 - t688 * t858 - t732 * t812 - t753 * t763) * MDP(25) + (t635 * t753 + t649 * t730 + t653 * t713 + t688 * t708) * MDP(31) + (t653 * t753 + t688 * t730) * MDP(33) + (t635 * t713 + t649 * t708) * MDP(29) + qJDD(1) * MDP(1) + (-qJD(2) * t1012 + (-pkin(9) * t1149 + t984) * t978 + (t1026 * t997 + t1027) * t1183 + g(1) * t941 - g(2) * t942 + t1196 * t1211) * MDP(9) + (-(-pkin(9) * t1115 + t976) * t1063 - t1025 * t978 - t1023 * t1183 - g(1) * t940 + g(2) * t1021 + t1034 * t1211) * MDP(10); (t1167 * t730 + t653 * t856) * MDP(33) + (-t1067 * t732 + t1147 * t655 - t1167 * t858 - t763 * t856) * MDP(25) + (t765 * t1151 + (-t913 + t1112) * t863) * MDP(11) + (t765 * t999 + t913 * t914 + (t1002 * t867 - t1117 * t863 - t1136 * t914) * t996) * MDP(13) + (t634 * t833 + t633 * t832 + t666 * t933 - g(1) * (-pkin(2) * t1021 + t852 * pkin(3) + t851 * qJ(4) + t1187 * t942) - g(2) * (-pkin(2) * t940 + pkin(3) * t850 + qJ(4) * t849 + t1187 * t941) - g(3) * (pkin(3) * t926 + qJ(4) * t925 + t1050 * t997) + t1161 * t728 + t1164 * t680 + t1165 * t679) * MDP(21) + (pkin(1) * t1107 + (-pkin(9) * t1117 + t975) * t1098 + t967 + t1028 - t1122) * MDP(10) + t1157 * MDP(5) * t1143 - t1003 * MDP(4) * t1107 + (pkin(1) * t1003 * t1143 - pkin(9) * t1204 + g(1) * t1021 + g(2) * t940 - g(3) * t1145 + qJD(1) * t1012 + t1027) * MDP(9) + ((-t1000 * t719 + t1004 * t750) * t653 + t612 * t856 + t718 * t636 + t614 * t823 - g(1) * (t1000 * t851 + t1004 * t797) - g(2) * (t1000 * t849 + t1004 * t796) - g(3) * (t1000 * t925 + t1004 * t848) + (t1000 * t1070 - t1004 * t1068) * t730 + t1173 * t706 + t1169 * t629 - t1167 * t1060) * MDP(34) + (t1053 * t763 - t616 * t1147 + t860 * t655 + t646 * t856 - g(1) * t797 - g(2) * t796 - g(3) * t848 + ((-qJD(5) * t806 - t1210) * t1005 + (-qJD(5) * t792 + t1214) * t1001) * t858 + t1162 * t732 + t1167 * t699 + t1067 * t631) * MDP(27) + (-t1167 * t706 - t1169 * t730 - t636 * t856 - t653 * t823) * MDP(32) + (t1167 * t708 + t1170 * t730 + t635 * t856 + t653 * t824) * MDP(31) + (t1170 * t708 + t635 * t824) * MDP(29) + (-t1169 * t708 - t1170 * t706 - t635 * t823 - t636 * t824) * MDP(30) + (-(t1000 * t750 + t1004 * t719) * t653 - t611 * t856 + t718 * t635 + t614 * t824 - g(1) * (-t1000 * t797 + t1004 * t851) - g(2) * (-t1000 * t796 + t1004 * t849) - g(3) * (-t1000 * t848 + t1004 * t925) + (t1000 * t1068 + t1004 * t1070) * t730 + t1173 * t708 + t1170 * t629 - t1167 * t622) * MDP(35) + (t1067 * t858 - t1147 * t763) * MDP(26) + (t1168 * t1212 + t654 * t857) * MDP(22) + (t1067 * t1212 - t1147 * t654 + t1168 * t858 + t763 * t857) * MDP(24) + (-t1167 * t1212 - t1168 * t732 - t654 * t856 - t655 * t857) * MDP(23) + (-t1166 * t763 + t615 * t1147 + t860 * t654 + t646 * t857 - g(1) * (t1174 * t942 - t852 * t989) - g(2) * (t1174 * t941 - t850 * t989) - g(3) * (t1119 * t990 - t926 * t989) + t1197 * t858 + t1162 * t1212 + t1168 * t699 - t1067 * t632) * MDP(28) + (t666 * t937 + t680 * t912 + t933 * t727 - t728 * t846 - t833 * t766 + t1164 * t1202 + t1161 * t803 + t1037 * t995 + (t634 * t1006 + t1015 * t998 - t1137 * t680) * t996) * MDP(19) + (t666 * t935 - t679 * t912 + t933 * t726 - t728 * t845 + t832 * t766 - t1165 * t1202 + t1161 * t853 + (t1161 * t914 - t1037) * t998 + (-t633 * t1006 + t1015 * t995 + t1137 * t679) * t996) * MDP(18) + (-t1202 * t913 + t863 * t912 + (-t1002 * t766 + t1006 * t765 + (-t1002 * t863 + t1006 * t1202) * qJD(3)) * t996) * MDP(12) + (-t766 * t999 - t912 * t914 + (t1006 * t867 - t1117 * t1202 + t1137 * t914) * t996) * MDP(14) + ((pkin(2) * t1146 - t979) * t867 - t1049 * t999 + t814 * t1202 - t793 * t912 + (t1146 * t893 + t1213) * t914 + (-t748 * t1117 + t793 * t1137 - pkin(2) * t766 + (t914 * t927 - t740) * t1006) * t996 - t1037) * MDP(16) + (t1084 * t914 + t867 * t999) * MDP(15) + (t1003 * t1073 + t1101) * MDP(7) + (-t1007 * t1073 + t1102) * MDP(6) + t1176 + (-t1158 * t867 - t672 * t999 - t814 * t863 - t793 * t913 + t1223 * t914 + (t749 * t1117 - pkin(2) * t765 + t740 * t1002 + (-pkin(10) * t1002 * t914 + t1006 * t793) * qJD(3)) * t996 + t1038) * MDP(17) + (-t833 * t726 - t634 * t935 - t832 * t727 - t633 * t937 + t680 * t845 + t679 * t846 - t1165 * t803 + (-t679 * t998 - t680 * t995) * t1112 - t1038 - t1164 * t1096) * MDP(20); (-t995 * t1182 - pkin(3) * t726 - t749 * t853 - (t1141 * t995 - t704) * t1202 + (t1029 - t1179) * t998) * MDP(18) + (-t998 * t1182 - pkin(3) * t727 - t749 * t803 - (t1141 * t998 + t705) * t1202 - t1029 * t995) * MDP(19) + (t1091 * t708 + t1088 * t706 + (-t1156 - t1004 * t636 + (t1000 * t706 - t1004 * t708) * qJD(6)) * t953) * MDP(30) + (t1013 - t1179) * MDP(16) - t766 * MDP(14) + (t1032 * t708 + t1148 * t635) * MDP(29) + (-t1202 * t793 - t748 * t914 - t1039 - t672) * MDP(17) + (-t679 * t704 - t680 * t705 - t728 * t749 + (-t679 * t995 + t680 * t998) * qJD(4) + t1029 * pkin(3) + (-t633 * t995 + t634 * t998 + t1039) * qJ(4)) * MDP(21) + (t704 * t803 + t705 * t853 + (-qJ(4) * t726 - qJD(4) * t1096 + t1202 * t679 + t705 * t914 + t634) * t998 + (qJ(4) * t727 + qJD(4) * t803 + t1202 * t680 - t633) * t995 + t1039) * MDP(20) + (t1032 * t730 + t1148 * t653 + t1159 * t708 + t635 * t952) * MDP(31) + (t1159 * t699 + t1200 * t858 + t646 * t952 + t988 * t655 - t711 * t732 - t901 * t763 + t1024) * MDP(27) + (t1159 * t730 + t653 * t952) * MDP(33) + (-t953 * t1155 - t636 * t952 - t1159 * t706 + (-t1132 * t953 + t1091) * t730) * MDP(32) + (-t1159 * t858 - t763 * t952) * MDP(25) + (t1160 * t858 + t763 * t953) * MDP(24) + (t1160 * t1212 + t654 * t953) * MDP(22) + (-t1159 * t1212 - t1160 * t732 - t654 * t952 - t655 * t953) * MDP(23) + (t1010 * t1000 - t1004 * t1203 - t1159 * t1060 + t1163 * t706 + t612 * t952 - t629 * t738 + t901 * t636) * MDP(34) + (t1000 * t1203 + t1010 * t1004 - t1159 * t622 + t1163 * t708 - t611 * t952 - t629 * t739 + t901 * t635) * MDP(35) + (t1202 * t914 + t765) * MDP(13) + (-t1040 * t989 + t1160 * t699 + t1199 * t858 - t1212 * t711 + t646 * t953 + t988 * t654 - t902 * t763) * MDP(28) + t867 * MDP(15) - t1202 ^ 2 * MDP(12) + (-MDP(11) * t1202 + MDP(12) * t863 - MDP(14) * t914 - MDP(16) * t793 - MDP(18) * t679 + MDP(19) * t680 - MDP(24) * t1212 + MDP(25) * t732 - MDP(26) * t858 - MDP(27) * t631 + MDP(28) * t632) * t863; (-t1202 * t803 + t726) * MDP(18) + (t1096 * t1202 + t727) * MDP(19) + (-t1096 ^ 2 - t803 ^ 2) * MDP(20) + (t1096 * t680 + t679 * t803 - t1013 + t1195) * MDP(21) + (t1212 * t858 + t655) * MDP(27) + (t654 - t1218) * MDP(28) + (-t1212 * t706 + t1222) * MDP(34) + (-t1004 * t1219 - t1212 * t708 - t1155) * MDP(35); -t732 ^ 2 * MDP(23) + (t654 + t1218) * MDP(24) - t1089 * MDP(25) + t763 * MDP(26) + (t632 * t858 - t1041 + t616) * MDP(27) + (g(1) * t771 - g(2) * t769 + g(3) * t810 + t631 * t858 + t699 * t732 - t615) * MDP(28) + (t1087 * t708 + t1156) * MDP(29) + ((t635 - t1181) * t1004 + (-t636 - t1180) * t1000) * MDP(30) + (t1087 * t730 + t1155) * MDP(31) + t1222 * MDP(32) + (-pkin(5) * t636 + t1020 * t1000 - t1004 * t1194 - t632 * t706) * MDP(34) + (-pkin(5) * t635 + t1000 * t1194 + t1020 * t1004 - t632 * t708) * MDP(35) + (t732 * MDP(22) + (-qJD(5) + t858) * MDP(25) - t699 * MDP(27) - t708 * MDP(31) + t706 * MDP(32) - t730 * MDP(33) + t1060 * MDP(34) + t622 * MDP(35) + MDP(23) * t1212) * t1212; t708 * t706 * MDP(29) + (-t706 ^ 2 + t708 ^ 2) * MDP(30) + (t1125 + t1181) * MDP(31) + (-t1092 + t1180) * MDP(32) + t653 * MDP(33) + (t622 * t730 - t629 * t708 - g(1) * t716 - g(2) * t1216 - g(3) * (-t1000 * t810 + t877) + t1093) * MDP(34) + (-t1060 * t730 + t629 * t706 + g(1) * t717 - g(2) * t1215 - g(3) * (-t1004 * t810 - t1152) - t1061) * MDP(35) + (-MDP(31) * t1154 - MDP(32) * t708 - MDP(34) * t622 + MDP(35) * t1060) * qJD(6);];
tau  = t1;
