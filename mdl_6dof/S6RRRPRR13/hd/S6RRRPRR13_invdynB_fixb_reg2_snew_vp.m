% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRRPRR13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-07 15:59
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRRPRR13_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR13_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR13_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRPRR13_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRPRR13_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRPRR13_invdynB_fixb_reg2_snew_vp: pkin has to be [13x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-07 15:50:30
% EndTime: 2019-05-07 15:54:00
% DurationCPUTime: 211.25s
% Computational Cost: add. (2253095->1288), mult. (5643260->2151), div. (0->0), fcn. (4816772->16), ass. (0->946)
t1432 = sin(pkin(7));
t1435 = cos(pkin(7));
t1436 = cos(pkin(6));
t1685 = qJD(1) * t1436;
t1423 = qJD(2) + t1685;
t1422 = t1423 ^ 2;
t1433 = sin(pkin(6));
t1440 = sin(qJ(2));
t1445 = cos(qJ(2));
t1441 = sin(qJ(1));
t1446 = cos(qJ(1));
t1419 = t1441 * g(1) - t1446 * g(2);
t1518 = qJDD(1) * pkin(1) + t1419;
t1492 = t1436 * t1518;
t1693 = pkin(10) * t1440;
t1519 = -pkin(2) * t1445 - t1432 * t1693;
t1508 = t1519 * t1433;
t1420 = g(1) * t1446 + t1441 * g(2);
t1706 = qJD(1) ^ 2;
t1692 = t1706 * pkin(1);
t1510 = t1420 + t1692;
t1611 = qJDD(1) * t1436 + qJDD(2);
t1587 = t1611 * pkin(2);
t1694 = pkin(10) * t1435;
t1629 = -pkin(9) - t1694;
t1634 = qJDD(1) * t1440;
t1643 = t1435 * t1445;
t1695 = pkin(10) * t1432;
t1696 = pkin(9) * t1436;
t1453 = t1422 * t1695 + t1440 * t1510 + t1445 * t1492 + t1587 + (-t1445 * g(3) + t1629 * t1634 + ((-qJD(2) + t1423) * pkin(10) * t1643 + qJD(1) * (-t1440 * t1508 + t1445 * t1696)) * qJD(1)) * t1433;
t1648 = t1433 * t1440;
t1627 = qJD(1) * t1648;
t1421 = qJD(2) * t1627;
t1429 = t1440 ^ 2;
t1430 = t1445 ^ 2;
t1635 = t1429 + t1430;
t1639 = qJD(2) + t1423;
t1652 = t1423 * t1440;
t1686 = qJD(1) * t1433;
t1691 = t1436 * g(3);
t1455 = t1421 * pkin(2) - t1691 + ((-pkin(1) + t1519) * qJDD(1) + (pkin(2) * t1652 - pkin(9) * t1686 + (-t1639 * t1445 * t1432 - t1435 * t1635 * t1686) * pkin(10)) * qJD(1) - t1419) * t1433;
t1240 = t1432 * t1453 - t1435 * t1455;
t1439 = sin(qJ(3));
t1444 = cos(qJ(3));
t1647 = t1433 * t1445;
t1626 = qJD(1) * t1647;
t1609 = t1435 * t1626;
t1649 = t1432 * t1444;
t1381 = -t1423 * t1649 + t1439 * t1627 - t1444 * t1609;
t1633 = qJDD(1) * t1445;
t1603 = t1433 * t1633 - t1421;
t1461 = t1432 * t1611 + t1435 * t1603;
t1684 = qJD(1) * t1445;
t1511 = qJD(2) * t1684 + t1634;
t1474 = t1511 * t1433;
t1458 = t1439 * t1461 + t1444 * t1474;
t1339 = -t1381 * qJD(3) + t1458;
t1610 = t1432 * t1626;
t1646 = t1435 * t1423;
t1398 = -qJD(3) + t1610 - t1646;
t1363 = t1381 * t1398;
t1294 = t1363 + t1339;
t1730 = -t1294 * qJ(4) - t1240;
t1431 = sin(pkin(13));
t1650 = t1432 * t1439;
t1383 = t1423 * t1650 + (t1439 * t1643 + t1440 * t1444) * t1686;
t1434 = cos(pkin(13));
t1359 = -t1431 * t1383 - t1398 * t1434;
t1360 = t1383 * t1434 - t1398 * t1431;
t1315 = t1359 * t1360;
t1463 = -t1439 * t1474 + t1444 * t1461;
t1338 = t1383 * qJD(3) - t1463;
t1710 = t1315 + t1338;
t1725 = t1431 * t1710;
t1724 = t1434 * t1710;
t1437 = sin(qJ(6));
t1438 = sin(qJ(5));
t1443 = cos(qJ(5));
t1308 = t1359 * t1438 + t1360 * t1443;
t1375 = qJD(5) + t1381;
t1442 = cos(qJ(6));
t1274 = t1308 * t1437 - t1442 * t1375;
t1276 = t1308 * t1442 + t1375 * t1437;
t1213 = t1276 * t1274;
t1467 = -t1432 * t1603 + t1435 * t1611 + qJDD(3);
t1312 = -t1339 * t1431 + t1434 * t1467;
t1313 = t1434 * t1339 + t1431 * t1467;
t1613 = -t1443 * t1312 + t1313 * t1438;
t1193 = -qJD(5) * t1308 - t1613;
t1477 = qJDD(6) - t1193;
t1713 = -t1213 + t1477;
t1723 = t1437 * t1713;
t1306 = -t1443 * t1359 + t1360 * t1438;
t1239 = t1308 * t1306;
t1337 = qJDD(5) + t1338;
t1712 = -t1239 + t1337;
t1722 = t1438 * t1712;
t1721 = t1442 * t1713;
t1720 = t1443 * t1712;
t1719 = t1432 * t1455 + t1435 * t1453;
t1279 = t1375 * t1306;
t1476 = qJD(5) * t1306 - t1312 * t1438 - t1313 * t1443;
t1718 = t1476 + t1279;
t1428 = t1433 ^ 2;
t1716 = t1428 * t1440;
t1660 = t1383 * t1381;
t1462 = t1467 - t1660;
t1715 = t1439 * t1462;
t1714 = t1444 * t1462;
t1329 = t1381 * t1359;
t1256 = t1329 - t1313;
t1255 = t1329 + t1313;
t1300 = qJD(6) + t1306;
t1228 = t1300 * t1274;
t1616 = t1274 * qJD(6) - t1437 * t1337 + t1442 * t1476;
t1107 = t1616 + t1228;
t1614 = -t1442 * t1337 - t1437 * t1476;
t1102 = (qJD(6) - t1300) * t1276 + t1614;
t1160 = (qJD(5) - t1375) * t1308 + t1613;
t1272 = t1274 ^ 2;
t1273 = t1276 ^ 2;
t1299 = t1300 ^ 2;
t1302 = t1306 ^ 2;
t1303 = t1308 ^ 2;
t1705 = t1359 ^ 2;
t1358 = t1360 ^ 2;
t1704 = t1375 ^ 2;
t1703 = t1381 ^ 2;
t1380 = t1383 ^ 2;
t1702 = t1398 ^ 2;
t1701 = 2 * qJD(4);
t1700 = pkin(3) * t1439;
t1699 = pkin(3) * t1444;
t1698 = pkin(5) * t1438;
t1697 = pkin(9) * t1433;
t1350 = pkin(3) * t1381 - qJ(4) * t1383;
t1424 = g(3) * t1648;
t1475 = qJDD(1) * t1697 - t1420;
t1642 = t1436 * t1440;
t1309 = t1445 * t1475 + t1440 * t1492 - t1424 - pkin(2) * t1422 + t1461 * pkin(10) + (-pkin(1) * t1684 + (t1646 * t1693 + (pkin(9) * t1642 + t1445 * t1508) * qJD(1)) * t1433) * qJD(1);
t1640 = t1444 * t1309;
t1450 = qJ(4) * t1467 - t1381 * t1350 + t1439 * t1719 + t1640;
t1449 = -pkin(3) * t1702 + t1450;
t1657 = t1398 * t1383;
t1612 = t1338 - t1657;
t1451 = t1612 * pkin(3) + t1730;
t1064 = t1359 * t1701 + t1431 * t1451 + t1434 * t1449;
t1326 = pkin(4) * t1381 - pkin(11) * t1360;
t1035 = -pkin(4) * t1705 + pkin(11) * t1312 - t1326 * t1381 + t1064;
t1632 = t1360 * t1701;
t1063 = t1431 * t1449 - t1434 * t1451 + t1632;
t1448 = pkin(4) * t1710 + pkin(11) * t1256 - t1063;
t946 = t1035 * t1438 - t1443 * t1448;
t947 = t1443 * t1035 + t1438 * t1448;
t874 = t1438 * t947 - t1443 * t946;
t1690 = t1431 * t874;
t1689 = t1434 * t874;
t1237 = pkin(5) * t1306 - pkin(12) * t1308;
t940 = -t1337 * pkin(5) - pkin(12) * t1704 + t1237 * t1308 + t946;
t1688 = t1437 * t940;
t1687 = t1442 * t940;
t1195 = t1309 * t1439 - t1444 * t1719;
t1166 = -t1467 * pkin(3) - t1702 * qJ(4) + t1350 * t1383 + qJDD(4) + t1195;
t1118 = -t1312 * pkin(4) - t1705 * pkin(11) + t1326 * t1360 + t1166;
t1002 = t1718 * pkin(12) + (t1308 * t1375 - t1193) * pkin(5) + t1118;
t941 = -pkin(5) * t1704 + pkin(12) * t1337 - t1237 * t1306 + t947;
t877 = t1437 * t1002 + t1442 * t941;
t1683 = t1118 * t1438;
t1682 = t1118 * t1443;
t1131 = t1213 + t1477;
t1681 = t1131 * t1437;
t1680 = t1131 * t1442;
t1679 = t1166 * t1431;
t1678 = t1166 * t1434;
t1206 = t1239 + t1337;
t1677 = t1206 * t1438;
t1676 = t1206 * t1443;
t1675 = t1240 * t1439;
t1674 = t1240 * t1444;
t1259 = -t1315 + t1338;
t1673 = t1259 * t1431;
t1672 = t1259 * t1434;
t1671 = t1300 * t1437;
t1670 = t1300 * t1442;
t1323 = -t1467 - t1660;
t1669 = t1323 * t1439;
t1668 = t1323 * t1444;
t1667 = t1338 * t1439;
t1666 = t1360 * t1381;
t1665 = t1375 * t1438;
t1664 = t1375 * t1443;
t1663 = t1381 * t1431;
t1662 = t1381 * t1434;
t1661 = t1381 * t1444;
t1468 = t1697 * t1706 + t1518;
t1393 = t1433 * t1468 + t1691;
t1659 = t1393 * t1440;
t1658 = t1393 * t1445;
t1641 = t1440 * t1706;
t1617 = t1445 * t1641;
t1418 = t1428 * t1617;
t1400 = t1418 + t1611;
t1656 = t1400 * t1440;
t1655 = t1400 * t1445;
t1401 = -t1418 + t1611;
t1654 = t1401 * t1440;
t1653 = t1401 * t1445;
t1651 = t1428 * t1706;
t1645 = t1435 * t1439;
t1644 = t1435 * t1444;
t1638 = qJD(3) - t1398;
t1630 = -pkin(5) * t1443 - pkin(4);
t1628 = t1423 * t1686;
t1625 = t1429 * t1651;
t1624 = t1430 * t1651;
t1623 = t1438 * t1213;
t1622 = t1443 * t1213;
t1621 = t1439 * t1239;
t1620 = t1444 * t1239;
t1619 = t1439 * t1315;
t1618 = t1444 * t1315;
t875 = t1438 * t946 + t1443 * t947;
t876 = -t1442 * t1002 + t1437 * t941;
t1615 = -t1423 + t1685;
t981 = t1063 * t1431 + t1434 * t1064;
t1395 = -t1419 * t1441 - t1446 * t1420;
t1417 = qJDD(1) * t1446 - t1441 * t1706;
t1608 = -pkin(8) * t1417 - g(3) * t1441;
t1399 = -t1625 - t1422;
t1368 = -t1399 * t1440 - t1653;
t1607 = pkin(9) * t1368 - t1659;
t1405 = -t1422 - t1624;
t1372 = t1405 * t1445 - t1656;
t1606 = pkin(9) * t1372 + t1658;
t1336 = -t1703 - t1702;
t1267 = t1336 * t1444 - t1715;
t1605 = pkin(10) * t1267 + t1674;
t1345 = -t1380 - t1702;
t1270 = -t1345 * t1439 + t1668;
t1604 = pkin(10) * t1270 - t1675;
t832 = t1437 * t877 - t1442 * t876;
t833 = t1437 * t876 + t1442 * t877;
t807 = t1438 * t833 - t1443 * t940;
t808 = t1438 * t940 + t1443 * t833;
t763 = -t1431 * t807 + t1434 * t808;
t1602 = t1439 * t763 - t1444 * t832;
t762 = t1431 * t808 + t1434 * t807;
t730 = -t1432 * t762 + t1435 * t1602;
t750 = t1439 * t832 + t1444 * t763;
t1601 = t1440 * t750 + t1445 * t730;
t823 = t1434 * t875 - t1690;
t1572 = -t1118 * t1444 + t1439 * t823;
t822 = t1431 * t875 + t1689;
t768 = -t1432 * t822 + t1435 * t1572;
t818 = t1118 * t1439 + t1444 * t823;
t1600 = t1440 * t818 + t1445 * t768;
t1106 = -t1228 + t1616;
t1008 = -t1102 * t1437 + t1106 * t1442;
t1010 = -t1102 * t1442 - t1106 * t1437;
t1176 = t1272 + t1273;
t978 = t1010 * t1438 + t1176 * t1443;
t979 = t1010 * t1443 - t1176 * t1438;
t896 = -t1431 * t978 + t1434 * t979;
t1585 = -t1008 * t1444 + t1439 * t896;
t895 = t1431 * t979 + t1434 * t978;
t831 = -t1432 * t895 + t1435 * t1585;
t863 = t1008 * t1439 + t1444 * t896;
t1599 = t1440 * t863 + t1445 * t831;
t1103 = (-qJD(6) - t1300) * t1276 - t1614;
t1007 = -t1103 * t1437 + t1107 * t1442;
t1009 = t1103 * t1442 + t1107 * t1437;
t1212 = -t1273 + t1272;
t984 = t1009 * t1438 + t1212 * t1443;
t985 = t1009 * t1443 - t1212 * t1438;
t914 = -t1431 * t984 + t1434 * t985;
t1586 = t1007 * t1444 + t1439 * t914;
t913 = t1431 * t985 + t1434 * t984;
t835 = -t1432 * t913 + t1435 * t1586;
t866 = -t1007 * t1439 + t1444 * t914;
t1598 = t1440 * t866 + t1445 * t835;
t1181 = -t1299 - t1272;
t1054 = t1181 * t1437 + t1721;
t1055 = t1181 * t1442 - t1723;
t991 = t1055 * t1438 + t1103 * t1443;
t992 = t1055 * t1443 - t1103 * t1438;
t918 = -t1431 * t991 + t1434 * t992;
t1578 = -t1054 * t1444 + t1439 * t918;
t917 = t1431 * t992 + t1434 * t991;
t838 = -t1432 * t917 + t1435 * t1578;
t878 = t1054 * t1439 + t1444 * t918;
t1597 = t1440 * t878 + t1445 * t838;
t1187 = -t1273 - t1299;
t1058 = t1187 * t1442 - t1681;
t1059 = -t1187 * t1437 - t1680;
t993 = t1059 * t1438 + t1107 * t1443;
t994 = t1059 * t1443 - t1107 * t1438;
t921 = -t1431 * t993 + t1434 * t994;
t1577 = -t1058 * t1444 + t1439 * t921;
t920 = t1431 * t994 + t1434 * t993;
t842 = -t1432 * t920 + t1435 * t1577;
t880 = t1058 * t1439 + t1444 * t921;
t1596 = t1440 * t880 + t1445 * t842;
t1227 = -t1273 + t1299;
t1086 = -t1227 * t1442 - t1723;
t1088 = -t1227 * t1437 + t1721;
t1003 = t1088 * t1438 + t1106 * t1443;
t1005 = t1088 * t1443 - t1106 * t1438;
t928 = -t1003 * t1431 + t1005 * t1434;
t1576 = t1086 * t1444 + t1439 * t928;
t926 = t1003 * t1434 + t1005 * t1431;
t846 = -t1432 * t926 + t1435 * t1576;
t888 = -t1086 * t1439 + t1444 * t928;
t1595 = t1440 * t888 + t1445 * t846;
t1226 = t1272 - t1299;
t1087 = -t1226 * t1437 - t1680;
t1089 = t1226 * t1442 - t1681;
t1004 = t1089 * t1438 + t1102 * t1443;
t1006 = t1089 * t1443 - t1102 * t1438;
t929 = -t1004 * t1431 + t1006 * t1434;
t1575 = t1087 * t1444 + t1439 * t929;
t927 = t1004 * t1434 + t1006 * t1431;
t847 = -t1432 * t927 + t1435 * t1575;
t889 = -t1087 * t1439 + t1444 * t929;
t1594 = t1440 * t889 + t1445 * t847;
t1137 = -qJD(6) * t1276 - t1614;
t1098 = -t1137 * t1442 - t1274 * t1671;
t1099 = -t1137 * t1437 + t1274 * t1670;
t1047 = t1099 * t1438 + t1622;
t1049 = t1099 * t1443 - t1623;
t966 = -t1047 * t1431 + t1049 * t1434;
t1574 = t1098 * t1444 + t1439 * t966;
t964 = t1047 * t1434 + t1049 * t1431;
t872 = -t1432 * t964 + t1435 * t1574;
t937 = -t1098 * t1439 + t1444 * t966;
t1593 = t1440 * t937 + t1445 * t872;
t1100 = -t1276 * t1670 + t1437 * t1616;
t1101 = -t1276 * t1671 - t1442 * t1616;
t1048 = t1101 * t1438 - t1622;
t1050 = t1101 * t1443 + t1623;
t967 = -t1048 * t1431 + t1050 * t1434;
t1573 = t1100 * t1444 + t1439 * t967;
t965 = t1048 * t1434 + t1050 * t1431;
t873 = -t1432 * t965 + t1435 * t1573;
t938 = -t1100 * t1439 + t1444 * t967;
t1592 = t1440 * t938 + t1445 * t873;
t1570 = -t1166 * t1444 + t1439 * t981;
t980 = -t1063 * t1434 + t1064 * t1431;
t886 = -t1432 * t980 + t1435 * t1570;
t949 = t1166 * t1439 + t1444 * t981;
t1591 = t1440 * t949 + t1445 * t886;
t1192 = -t1302 - t1303;
t1164 = -t1279 + t1476;
t1074 = -t1160 * t1438 + t1164 * t1443;
t1076 = -t1160 * t1443 - t1164 * t1438;
t989 = -t1074 * t1431 + t1076 * t1434;
t1569 = -t1192 * t1444 + t1439 * t989;
t987 = t1074 * t1434 + t1076 * t1431;
t898 = -t1432 * t987 + t1435 * t1569;
t968 = t1192 * t1439 + t1444 * t989;
t1590 = t1440 * t968 + t1445 * t898;
t1238 = -t1303 + t1302;
t1159 = (qJD(5) + t1375) * t1308 + t1613;
t1073 = -t1159 * t1438 - t1443 * t1718;
t1075 = -t1159 * t1443 + t1438 * t1718;
t988 = -t1073 * t1431 + t1075 * t1434;
t1568 = t1238 * t1444 + t1439 * t988;
t986 = t1073 * t1434 + t1075 * t1431;
t904 = -t1432 * t986 + t1435 * t1568;
t975 = -t1238 * t1439 + t1444 * t988;
t1589 = t1440 * t975 + t1445 * t904;
t1144 = (t1274 * t1437 + t1276 * t1442) * t1300;
t1145 = (-t1274 * t1442 + t1276 * t1437) * t1300;
t1094 = t1145 * t1438 - t1443 * t1477;
t1095 = t1145 * t1443 + t1438 * t1477;
t998 = -t1094 * t1431 + t1095 * t1434;
t1571 = t1144 * t1444 + t1439 * t998;
t997 = t1094 * t1434 + t1095 * t1431;
t909 = -t1432 * t997 + t1435 * t1571;
t963 = -t1144 * t1439 + t1444 * t998;
t1588 = t1440 * t963 + t1445 * t909;
t1229 = -t1704 - t1302;
t1139 = t1229 * t1438 + t1720;
t1140 = t1229 * t1443 - t1722;
t1052 = -t1139 * t1431 + t1140 * t1434;
t1011 = t1052 * t1444 + t1159 * t1439;
t1051 = t1139 * t1434 + t1140 * t1431;
t1566 = t1052 * t1439 - t1159 * t1444;
t944 = -t1051 * t1432 + t1435 * t1566;
t1584 = t1011 * t1440 + t1445 * t944;
t1262 = -t1303 - t1704;
t1157 = t1262 * t1443 - t1677;
t1158 = -t1262 * t1438 - t1676;
t1072 = -t1157 * t1431 + t1158 * t1434;
t1018 = t1072 * t1444 - t1439 * t1718;
t1071 = t1157 * t1434 + t1158 * t1431;
t1565 = t1072 * t1439 + t1444 * t1718;
t956 = -t1071 * t1432 + t1435 * t1565;
t1583 = t1018 * t1440 + t1445 * t956;
t1278 = -t1303 + t1704;
t1172 = t1278 * t1443 + t1722;
t1174 = -t1278 * t1438 + t1720;
t1083 = -t1172 * t1431 + t1174 * t1434;
t1020 = t1083 * t1444 - t1164 * t1439;
t1081 = t1172 * t1434 + t1174 * t1431;
t1563 = t1083 * t1439 + t1164 * t1444;
t961 = -t1081 * t1432 + t1435 * t1563;
t1582 = t1020 * t1440 + t1445 * t961;
t1277 = t1302 - t1704;
t1173 = t1277 * t1438 + t1676;
t1175 = t1277 * t1443 - t1677;
t1084 = -t1173 * t1431 + t1175 * t1434;
t1021 = t1084 * t1444 - t1160 * t1439;
t1082 = t1173 * t1434 + t1175 * t1431;
t1562 = t1084 * t1439 + t1160 * t1444;
t962 = -t1082 * t1432 + t1435 * t1562;
t1581 = t1021 * t1440 + t1445 * t962;
t1153 = t1193 * t1443 + t1306 * t1665;
t1154 = -t1193 * t1438 + t1306 * t1664;
t1068 = -t1153 * t1431 + t1154 * t1434;
t1043 = t1068 * t1444 - t1621;
t1066 = t1153 * t1434 + t1154 * t1431;
t1517 = t1068 * t1439 + t1620;
t973 = -t1066 * t1432 + t1435 * t1517;
t1580 = t1043 * t1440 + t1445 * t973;
t1155 = t1308 * t1664 - t1438 * t1476;
t1156 = -t1308 * t1665 - t1443 * t1476;
t1069 = -t1155 * t1431 + t1156 * t1434;
t1044 = t1069 * t1444 + t1621;
t1067 = t1155 * t1434 + t1156 * t1431;
t1516 = t1069 * t1439 - t1620;
t974 = -t1067 * t1432 + t1435 * t1516;
t1579 = t1044 * t1440 + t1445 * t974;
t1214 = (-t1306 * t1438 - t1308 * t1443) * t1375;
t1215 = (-t1306 * t1443 + t1308 * t1438) * t1375;
t1134 = t1214 * t1434 + t1215 * t1431;
t1135 = -t1214 * t1431 + t1215 * t1434;
t1555 = t1135 * t1439 - t1337 * t1444;
t1038 = -t1134 * t1432 + t1435 * t1555;
t1129 = t1135 * t1444 + t1337 * t1439;
t1567 = t1038 * t1445 + t1129 * t1440;
t1252 = -t1312 - t1666;
t1183 = -t1252 * t1431 + t1256 * t1434;
t1185 = -t1252 * t1434 - t1256 * t1431;
t1268 = t1358 + t1705;
t1550 = t1185 * t1439 + t1268 * t1444;
t1080 = -t1183 * t1432 + t1435 * t1550;
t1141 = t1185 * t1444 - t1268 * t1439;
t1564 = t1080 * t1445 + t1141 * t1440;
t1253 = t1312 - t1666;
t1182 = t1253 * t1431 + t1255 * t1434;
t1184 = t1253 * t1434 - t1255 * t1431;
t1314 = -t1358 + t1705;
t1551 = t1184 * t1439 + t1314 * t1444;
t1091 = -t1182 * t1432 + t1435 * t1551;
t1151 = t1184 * t1444 - t1314 * t1439;
t1561 = t1091 * t1445 + t1151 * t1440;
t1464 = t1436 * t1468;
t1486 = t1423 * t1432 + t1609;
t1469 = qJD(1) * t1486;
t1196 = t1640 + (t1435 * (-g(3) * t1647 + t1445 * t1464 + t1587) + t1432 * (-pkin(2) * t1603 - t1393) + (t1435 * (-qJD(2) * t1609 + t1423 * t1486) + t1432 * (-qJD(2) * t1610 - t1469 * t1647)) * pkin(10) + (t1435 * t1510 + (pkin(2) * t1469 + (-t1432 ^ 2 * pkin(10) + t1435 * t1629) * qJDD(1)) * t1433) * t1440) * t1439;
t1548 = -t1195 * t1444 + t1196 * t1439;
t1093 = t1240 * t1432 + t1435 * t1548;
t1128 = t1195 * t1439 + t1196 * t1444;
t1560 = t1093 * t1445 + t1128 * t1440;
t1283 = -t1703 - t1705;
t1199 = t1283 * t1431 + t1724;
t1200 = t1283 * t1434 - t1725;
t1547 = t1200 * t1439 + t1253 * t1444;
t1097 = -t1199 * t1432 + t1435 * t1547;
t1146 = t1200 * t1444 - t1253 * t1439;
t1559 = t1097 * t1445 + t1146 * t1440;
t1301 = -t1358 - t1703;
t1208 = t1301 * t1434 - t1673;
t1209 = -t1301 * t1431 - t1672;
t1545 = t1209 * t1439 - t1255 * t1444;
t1112 = -t1208 * t1432 + t1435 * t1545;
t1152 = t1209 * t1444 + t1255 * t1439;
t1558 = t1112 * t1445 + t1152 * t1440;
t1328 = -t1358 + t1703;
t1218 = t1328 * t1434 + t1725;
t1220 = -t1328 * t1431 + t1724;
t1542 = t1220 * t1439 + t1256 * t1444;
t1121 = -t1218 * t1432 + t1435 * t1542;
t1169 = t1220 * t1444 - t1256 * t1439;
t1557 = t1121 * t1445 + t1169 * t1440;
t1327 = -t1703 + t1705;
t1219 = t1327 * t1431 + t1672;
t1221 = t1327 * t1434 - t1673;
t1541 = t1221 * t1439 + t1252 * t1444;
t1122 = -t1219 * t1432 + t1435 * t1541;
t1170 = t1221 * t1444 - t1252 * t1439;
t1556 = t1122 * t1445 + t1170 * t1440;
t1244 = t1312 * t1434 - t1359 * t1663;
t1245 = -t1312 * t1431 - t1359 * t1662;
t1515 = t1245 * t1439 - t1618;
t1149 = -t1244 * t1432 + t1435 * t1515;
t1203 = t1245 * t1444 + t1619;
t1554 = t1149 * t1445 + t1203 * t1440;
t1246 = t1313 * t1431 + t1360 * t1662;
t1247 = t1313 * t1434 - t1360 * t1663;
t1514 = t1247 * t1439 + t1618;
t1150 = -t1246 * t1432 + t1435 * t1514;
t1204 = t1247 * t1444 - t1619;
t1553 = t1150 * t1445 + t1204 * t1440;
t1264 = (t1359 * t1431 - t1360 * t1434) * t1381;
t1265 = (t1359 * t1434 + t1360 * t1431) * t1381;
t1331 = t1338 * t1644;
t1178 = -t1264 * t1432 + t1265 * t1645 - t1331;
t1232 = t1265 * t1444 + t1667;
t1552 = t1178 * t1445 + t1232 * t1440;
t1321 = -t1703 - t1380;
t1295 = -t1363 + t1339;
t1459 = (-qJD(3) - t1398) * t1383 + t1463;
t1534 = -t1295 * t1444 + t1439 * t1459;
t1189 = -t1321 * t1432 + t1435 * t1534;
t1231 = t1295 * t1439 + t1444 * t1459;
t1549 = t1189 * t1445 + t1231 * t1440;
t1351 = t1380 - t1703;
t1290 = t1383 * t1638 - t1463;
t1535 = -t1290 * t1439 + t1294 * t1444;
t1202 = -t1351 * t1432 + t1435 * t1535;
t1230 = -t1290 * t1444 - t1294 * t1439;
t1546 = t1202 * t1445 + t1230 * t1440;
t1530 = t1336 * t1439 + t1714;
t1211 = -t1290 * t1432 + t1435 * t1530;
t1544 = t1211 * t1445 + t1267 * t1440;
t1293 = -t1381 * t1638 + t1458;
t1533 = t1345 * t1444 + t1669;
t1217 = -t1293 * t1432 + t1435 * t1533;
t1543 = t1217 * t1445 + t1270 * t1440;
t1362 = -t1380 + t1702;
t1531 = t1362 * t1444 + t1715;
t1224 = -t1295 * t1432 + t1435 * t1531;
t1281 = -t1362 * t1439 + t1714;
t1540 = t1224 * t1445 + t1281 * t1440;
t1361 = t1703 - t1702;
t1532 = t1361 * t1439 - t1668;
t1225 = -t1432 * t1459 + t1435 * t1532;
t1282 = t1361 * t1444 + t1669;
t1539 = t1225 * t1445 + t1282 * t1440;
t1249 = -t1331 + (t1383 * t1432 - t1398 * t1645) * t1381;
t1288 = -t1398 * t1661 + t1667;
t1538 = t1249 * t1445 + t1288 * t1440;
t1251 = t1339 * t1645 + (-t1381 * t1432 - t1398 * t1644) * t1383;
t1289 = t1339 * t1444 + t1439 * t1657;
t1537 = t1251 * t1445 + t1289 * t1440;
t1509 = t1398 * (t1381 * t1439 + t1383 * t1444);
t1287 = -t1432 * t1467 + t1435 * t1509;
t1320 = (-t1383 * t1439 + t1661) * t1398;
t1536 = t1287 * t1445 + t1320 * t1440;
t1465 = t1475 - t1692;
t1366 = t1440 * t1465 + (t1433 * g(3) - t1464) * t1445;
t1367 = t1440 * t1464 + t1445 * t1465 - t1424;
t1529 = -t1366 * t1445 + t1367 * t1440;
t1322 = t1366 * t1440 + t1367 * t1445;
t1409 = t1423 * t1626;
t1388 = t1409 + t1474;
t1408 = t1423 * t1627;
t1391 = -t1408 + t1603;
t1528 = t1388 * t1445 + t1391 * t1440;
t1389 = -t1409 + t1474;
t1390 = t1408 + t1603;
t1527 = -t1389 * t1445 + t1390 * t1440;
t1526 = t1399 * t1445 - t1654;
t1403 = t1422 - t1625;
t1525 = t1403 * t1445 + t1656;
t1524 = t1405 * t1440 + t1655;
t1404 = -t1422 + t1624;
t1523 = t1404 * t1440 + t1653;
t1394 = t1419 * t1446 - t1441 * t1420;
t1520 = t1433 * t1611;
t743 = pkin(11) * t808 + (-pkin(12) * t1438 + t1630) * t832;
t754 = -pkin(11) * t807 + (-pkin(12) * t1443 + t1698) * t832;
t715 = -qJ(4) * t762 - t1431 * t743 + t1434 * t754;
t737 = -pkin(3) * t762 - pkin(4) * t807 + pkin(5) * t940 - pkin(12) * t833;
t1498 = pkin(10) * t750 + t1439 * t715 + t1444 * t737;
t712 = -pkin(3) * t832 + qJ(4) * t763 + t1431 * t754 + t1434 * t743;
t729 = t1432 * t1602 + t1435 * t762;
t698 = -pkin(2) * t729 - t1432 * t712 + t1435 * t1498;
t701 = -t1439 * t737 + t1444 * t715 + (-t1432 * t729 - t1435 * t730) * pkin(10);
t716 = -t1440 * t730 + t1445 * t750;
t1507 = pkin(9) * t716 + t1440 * t701 + t1445 * t698;
t819 = -pkin(12) * t1008 - t832;
t783 = pkin(11) * t979 + t1008 * t1630 + t1438 * t819;
t793 = -pkin(11) * t978 + t1008 * t1698 + t1443 * t819;
t747 = -qJ(4) * t895 - t1431 * t783 + t1434 * t793;
t778 = -pkin(3) * t895 - pkin(4) * t978 - pkin(5) * t1176 - pkin(12) * t1010 - t833;
t1497 = pkin(10) * t863 + t1439 * t747 + t1444 * t778;
t746 = -pkin(3) * t1008 + qJ(4) * t896 + t1431 * t793 + t1434 * t783;
t830 = t1432 * t1585 + t1435 * t895;
t714 = -pkin(2) * t830 - t1432 * t746 + t1435 * t1497;
t727 = -t1439 * t778 + t1444 * t747 + (-t1432 * t830 - t1435 * t831) * pkin(10);
t788 = -t1440 * t831 + t1445 * t863;
t1506 = pkin(9) * t788 + t1440 * t727 + t1445 * t714;
t860 = -pkin(4) * t1118 + pkin(11) * t875;
t769 = -pkin(11) * t1689 - qJ(4) * t822 - t1431 * t860;
t789 = -pkin(3) * t822 - pkin(4) * t874;
t1494 = pkin(10) * t818 + t1439 * t769 + t1444 * t789;
t765 = -pkin(3) * t1118 - pkin(11) * t1690 + qJ(4) * t823 + t1434 * t860;
t767 = t1432 * t1572 + t1435 * t822;
t718 = -pkin(2) * t767 - t1432 * t765 + t1435 * t1494;
t724 = -t1439 * t789 + t1444 * t769 + (-t1432 * t767 - t1435 * t768) * pkin(10);
t753 = -t1440 * t768 + t1445 * t818;
t1505 = pkin(9) * t753 + t1440 * t724 + t1445 * t718;
t864 = -pkin(5) * t1054 + t876;
t899 = -pkin(12) * t1054 + t1688;
t803 = -pkin(4) * t1054 + pkin(11) * t992 + t1438 * t899 + t1443 * t864;
t812 = -pkin(11) * t991 - t1438 * t864 + t1443 * t899;
t757 = -qJ(4) * t917 - t1431 * t803 + t1434 * t812;
t824 = -pkin(3) * t917 - pkin(4) * t991 - pkin(5) * t1103 - pkin(12) * t1055 + t1687;
t1496 = pkin(10) * t878 + t1439 * t757 + t1444 * t824;
t755 = -pkin(3) * t1054 + qJ(4) * t918 + t1431 * t812 + t1434 * t803;
t837 = t1432 * t1578 + t1435 * t917;
t723 = -pkin(2) * t837 - t1432 * t755 + t1435 * t1496;
t732 = -t1439 * t824 + t1444 * t757 + (-t1432 * t837 - t1435 * t838) * pkin(10);
t800 = -t1440 * t838 + t1445 * t878;
t1504 = pkin(9) * t800 + t1440 * t732 + t1445 * t723;
t865 = -pkin(5) * t1058 + t877;
t901 = -pkin(12) * t1058 + t1687;
t806 = -pkin(4) * t1058 + pkin(11) * t994 + t1438 * t901 + t1443 * t865;
t813 = -pkin(11) * t993 - t1438 * t865 + t1443 * t901;
t758 = -qJ(4) * t920 - t1431 * t806 + t1434 * t813;
t825 = -pkin(3) * t920 - pkin(4) * t993 - pkin(5) * t1107 - pkin(12) * t1059 - t1688;
t1495 = pkin(10) * t880 + t1439 * t758 + t1444 * t825;
t756 = -pkin(3) * t1058 + qJ(4) * t921 + t1431 * t813 + t1434 * t806;
t841 = t1432 * t1577 + t1435 * t920;
t726 = -pkin(2) * t841 - t1432 * t756 + t1435 * t1495;
t734 = -t1439 * t825 + t1444 * t758 + (-t1432 * t841 - t1435 * t842) * pkin(10);
t801 = -t1440 * t842 + t1445 * t880;
t1503 = pkin(9) * t801 + t1440 * t734 + t1445 * t726;
t853 = -pkin(4) * t1192 + pkin(11) * t1076 + t875;
t858 = -pkin(11) * t1074 - t874;
t794 = -qJ(4) * t987 - t1431 * t853 + t1434 * t858;
t942 = -pkin(3) * t987 - pkin(4) * t1074;
t1493 = pkin(10) * t968 + t1439 * t794 + t1444 * t942;
t791 = -pkin(3) * t1192 + qJ(4) * t989 + t1431 * t858 + t1434 * t853;
t897 = t1432 * t1569 + t1435 * t987;
t745 = -pkin(2) * t897 - t1432 * t791 + t1435 * t1493;
t759 = -t1439 * t942 + t1444 * t794 + (-t1432 * t897 - t1435 * t898) * pkin(10);
t854 = -t1440 * t898 + t1445 * t968;
t1502 = pkin(9) * t854 + t1440 * t759 + t1445 * t745;
t893 = -pkin(3) * t1051 - pkin(4) * t1139 + t946;
t1028 = -pkin(11) * t1139 + t1683;
t995 = -pkin(4) * t1159 + pkin(11) * t1140 - t1682;
t894 = -qJ(4) * t1051 + t1028 * t1434 - t1431 * t995;
t1488 = pkin(10) * t1011 + t1439 * t894 + t1444 * t893;
t879 = -pkin(3) * t1159 + qJ(4) * t1052 + t1028 * t1431 + t1434 * t995;
t943 = t1051 * t1435 + t1432 * t1566;
t780 = -pkin(2) * t943 - t1432 * t879 + t1435 * t1488;
t795 = -t1439 * t893 + t1444 * t894 + (-t1432 * t943 - t1435 * t944) * pkin(10);
t892 = t1011 * t1445 - t1440 * t944;
t1501 = pkin(9) * t892 + t1440 * t795 + t1445 * t780;
t902 = -pkin(3) * t1071 - pkin(4) * t1157 + t947;
t1036 = -pkin(11) * t1157 + t1682;
t999 = pkin(4) * t1718 + pkin(11) * t1158 + t1683;
t912 = -qJ(4) * t1071 + t1036 * t1434 - t1431 * t999;
t1487 = pkin(10) * t1018 + t1439 * t912 + t1444 * t902;
t887 = pkin(3) * t1718 + qJ(4) * t1072 + t1036 * t1431 + t1434 * t999;
t955 = t1071 * t1435 + t1432 * t1565;
t787 = -pkin(2) * t955 - t1432 * t887 + t1435 * t1487;
t804 = -t1439 * t902 + t1444 * t912 + (-t1432 * t955 - t1435 * t956) * pkin(10);
t915 = t1018 * t1445 - t1440 * t956;
t1500 = pkin(9) * t915 + t1440 * t804 + t1445 * t787;
t1470 = pkin(10) * t949 + (-qJ(4) * t1439 - t1699) * t980;
t885 = t1432 * t1570 + t1435 * t980;
t950 = -pkin(3) * t1166 + qJ(4) * t981;
t799 = -pkin(2) * t885 - t1432 * t950 + t1435 * t1470;
t802 = (-qJ(4) * t1444 + t1700) * t980 + (-t1432 * t885 - t1435 * t886) * pkin(10);
t850 = -t1440 * t886 + t1445 * t949;
t1499 = pkin(9) * t850 + t1440 * t802 + t1445 * t799;
t1017 = -t1080 * t1440 + t1141 * t1445;
t1079 = t1183 * t1435 + t1432 * t1550;
t957 = -qJ(4) * t1183 - t980;
t1473 = pkin(10) * t1141 - t1183 * t1699 + t1439 * t957;
t948 = pkin(3) * t1268 + qJ(4) * t1185 + t981;
t852 = -pkin(2) * t1079 - t1432 * t948 + t1435 * t1473;
t881 = t1183 * t1700 + t1444 * t957 + (-t1079 * t1432 - t1080 * t1435) * pkin(10);
t1491 = pkin(9) * t1017 + t1440 * t881 + t1445 * t852;
t1022 = -t1097 * t1440 + t1146 * t1445;
t1065 = pkin(3) * t1253 + qJ(4) * t1200 - t1678;
t1096 = t1199 * t1435 + t1432 * t1547;
t1029 = t1431 * t1450 - t1434 * t1730 + t1632 + (-t1431 * t1702 - t1434 * t1612 - t1199) * pkin(3);
t1113 = -qJ(4) * t1199 + t1679;
t1480 = pkin(10) * t1146 + t1029 * t1444 + t1113 * t1439;
t884 = -pkin(2) * t1096 - t1065 * t1432 + t1435 * t1480;
t916 = -t1029 * t1439 + t1113 * t1444 + (-t1096 * t1432 - t1097 * t1435) * pkin(10);
t1490 = pkin(9) * t1022 + t1440 * t916 + t1445 * t884;
t1030 = -t1112 * t1440 + t1152 * t1445;
t1070 = -pkin(3) * t1255 + qJ(4) * t1209 + t1679;
t1111 = t1208 * t1435 + t1432 * t1545;
t1031 = -pkin(3) * t1208 + t1064;
t1115 = -qJ(4) * t1208 + t1678;
t1479 = pkin(10) * t1152 + t1031 * t1444 + t1115 * t1439;
t891 = -pkin(2) * t1111 - t1070 * t1432 + t1435 * t1479;
t919 = -t1031 * t1439 + t1115 * t1444 + (-t1111 * t1432 - t1112 * t1435) * pkin(10);
t1489 = pkin(9) * t1030 + t1440 * t919 + t1445 * t891;
t1012 = -t1093 * t1440 + t1128 * t1445;
t1092 = -t1240 * t1435 + t1432 * t1548;
t1013 = -pkin(2) * t1092 + t1128 * t1694;
t996 = (-t1092 * t1432 - t1093 * t1435) * pkin(10);
t1485 = pkin(9) * t1012 + t1013 * t1445 + t1440 * t996;
t1188 = t1321 * t1435 + t1432 * t1534;
t1025 = (-t1188 * t1432 - t1189 * t1435) * pkin(10) - t1548;
t1478 = pkin(10) * t1231 + t1128;
t1033 = -pkin(2) * t1188 + t1435 * t1478;
t1133 = -t1189 * t1440 + t1231 * t1445;
t1484 = pkin(9) * t1133 + t1025 * t1440 + t1033 * t1445;
t1210 = t1290 * t1435 + t1432 * t1530;
t1057 = -pkin(2) * t1210 + t1195 * t1432 + t1435 * t1605;
t1110 = -t1675 + (-t1210 * t1432 - t1211 * t1435) * pkin(10);
t1167 = -t1211 * t1440 + t1267 * t1445;
t1483 = pkin(9) * t1167 + t1057 * t1445 + t1110 * t1440;
t1216 = t1293 * t1435 + t1432 * t1533;
t1061 = -pkin(2) * t1216 + t1196 * t1432 + t1435 * t1604;
t1114 = -t1674 + (-t1216 * t1432 - t1217 * t1435) * pkin(10);
t1171 = -t1217 * t1440 + t1270 * t1445;
t1482 = pkin(9) * t1171 + t1061 * t1445 + t1114 * t1440;
t1354 = t1389 * t1440 + t1390 * t1445;
t1481 = pkin(9) * t1354 + t1322;
t1387 = (t1639 * t1684 + t1634) * t1433;
t1427 = t1433 * t1428;
t1416 = t1441 * qJDD(1) + t1446 * t1706;
t1407 = t1635 * t1651;
t1406 = (t1429 - t1430) * t1651;
t1402 = -pkin(8) * t1416 + g(3) * t1446;
t1392 = t1635 * t1628;
t1385 = (-t1429 * t1423 * qJD(1) + t1445 * t1511) * t1433;
t1384 = -t1430 * t1628 - t1440 * t1603;
t1371 = t1404 * t1445 - t1654;
t1370 = -t1403 * t1440 + t1655;
t1365 = t1387 * t1642 + t1427 * t1617;
t1364 = (-t1427 * t1641 + (-t1421 + (-qJD(1) * t1652 + t1633) * t1433) * t1436) * t1445;
t1355 = -t1388 * t1440 + t1391 * t1445;
t1349 = t1391 * t1433 + t1436 * t1524;
t1348 = -t1390 * t1433 + t1436 * t1523;
t1347 = -t1389 * t1433 + t1436 * t1525;
t1346 = -t1391 * t1436 + t1433 * t1524;
t1344 = -t1387 * t1433 + t1436 * t1526;
t1343 = t1387 * t1436 + t1433 * t1526;
t1342 = -t1406 * t1433 + t1436 * t1528;
t1341 = t1407 * t1433 + t1436 * t1527;
t1340 = -t1407 * t1436 + t1433 * t1527;
t1330 = t1338 * t1649;
t1319 = -t1441 * t1349 + t1372 * t1446;
t1318 = t1349 * t1446 + t1441 * t1372;
t1305 = -t1441 * t1344 + t1368 * t1446;
t1304 = t1344 * t1446 + t1441 * t1368;
t1297 = t1393 * t1433 + t1436 * t1529;
t1296 = -t1393 * t1436 + t1433 * t1529;
t1286 = t1432 * t1509 + t1435 * t1467;
t1285 = -t1441 * t1341 + t1354 * t1446;
t1284 = t1341 * t1446 + t1441 * t1354;
t1269 = -t1659 + (-t1346 * t1433 - t1349 * t1436) * pkin(9);
t1266 = -t1658 + (-t1343 * t1433 - t1344 * t1436) * pkin(9);
t1263 = -pkin(1) * t1346 + t1366 * t1433 + t1436 * t1606;
t1261 = -pkin(1) * t1343 + t1367 * t1433 + t1436 * t1607;
t1250 = t1339 * t1650 + (t1381 * t1435 - t1398 * t1649) * t1383;
t1248 = -t1330 + (-t1383 * t1435 - t1398 * t1650) * t1381;
t1243 = -pkin(1) * t1296 + t1322 * t1696;
t1242 = -t1441 * t1297 + t1322 * t1446;
t1241 = t1297 * t1446 + t1441 * t1322;
t1236 = -pkin(1) * t1340 + t1436 * t1481;
t1235 = -t1287 * t1440 + t1320 * t1445;
t1234 = (-t1296 * t1433 - t1297 * t1436) * pkin(9);
t1233 = (-t1340 * t1433 - t1341 * t1436) * pkin(9) - t1529;
t1223 = t1432 * t1532 + t1435 * t1459;
t1222 = t1295 * t1435 + t1432 * t1531;
t1201 = t1351 * t1435 + t1432 * t1535;
t1198 = -t1251 * t1440 + t1289 * t1445;
t1197 = -t1249 * t1440 + t1288 * t1445;
t1186 = -t1286 * t1433 + t1436 * t1536;
t1180 = -t1225 * t1440 + t1282 * t1445;
t1179 = -t1224 * t1440 + t1281 * t1445;
t1177 = t1264 * t1435 + t1265 * t1650 - t1330;
t1148 = t1246 * t1435 + t1432 * t1514;
t1147 = t1244 * t1435 + t1432 * t1515;
t1143 = -t1250 * t1433 + t1436 * t1537;
t1142 = -t1248 * t1433 + t1436 * t1538;
t1136 = -t1202 * t1440 + t1230 * t1445;
t1127 = -t1178 * t1440 + t1232 * t1445;
t1126 = -t1223 * t1433 + t1436 * t1539;
t1125 = -t1222 * t1433 + t1436 * t1540;
t1124 = -t1216 * t1433 + t1436 * t1543;
t1123 = t1216 * t1436 + t1433 * t1543;
t1120 = t1219 * t1435 + t1432 * t1541;
t1119 = t1218 * t1435 + t1432 * t1542;
t1117 = -t1210 * t1433 + t1436 * t1544;
t1116 = t1210 * t1436 + t1433 * t1544;
t1109 = -t1150 * t1440 + t1204 * t1445;
t1108 = -t1149 * t1440 + t1203 * t1445;
t1090 = t1182 * t1435 + t1432 * t1551;
t1085 = -t1201 * t1433 + t1436 * t1546;
t1078 = -t1188 * t1433 + t1436 * t1549;
t1077 = t1188 * t1436 + t1433 * t1549;
t1060 = pkin(2) * t1217 - t1196 * t1435 + t1432 * t1604;
t1056 = pkin(2) * t1211 - t1195 * t1435 + t1432 * t1605;
t1053 = -t1177 * t1433 + t1436 * t1552;
t1046 = -t1441 * t1124 + t1171 * t1446;
t1045 = t1124 * t1446 + t1441 * t1171;
t1042 = -t1122 * t1440 + t1170 * t1445;
t1041 = -t1121 * t1440 + t1169 * t1445;
t1040 = -t1441 * t1117 + t1167 * t1446;
t1039 = t1117 * t1446 + t1441 * t1167;
t1037 = t1134 * t1435 + t1432 * t1555;
t1032 = pkin(2) * t1189 + t1432 * t1478;
t1027 = -t1148 * t1433 + t1436 * t1553;
t1026 = -t1147 * t1433 + t1436 * t1554;
t1019 = -t1091 * t1440 + t1151 * t1445;
t1016 = -t1441 * t1078 + t1133 * t1446;
t1015 = t1078 * t1446 + t1441 * t1133;
t1014 = pkin(2) * t1093 + t1128 * t1695;
t990 = -t1038 * t1440 + t1129 * t1445;
t983 = -t1120 * t1433 + t1436 * t1556;
t982 = -t1119 * t1433 + t1436 * t1557;
t977 = -t1111 * t1433 + t1436 * t1558;
t976 = t1111 * t1436 + t1433 * t1558;
t972 = t1067 * t1435 + t1432 * t1516;
t971 = t1066 * t1435 + t1432 * t1517;
t970 = -t1096 * t1433 + t1436 * t1559;
t969 = t1096 * t1436 + t1433 * t1559;
t960 = t1082 * t1435 + t1432 * t1562;
t959 = t1081 * t1435 + t1432 * t1563;
t958 = -t1090 * t1433 + t1436 * t1561;
t954 = -t1079 * t1433 + t1436 * t1564;
t953 = t1079 * t1436 + t1433 * t1564;
t952 = -t1092 * t1433 + t1436 * t1560;
t951 = t1092 * t1436 + t1433 * t1560;
t936 = -t1037 * t1433 + t1436 * t1567;
t935 = -t1061 * t1440 + t1114 * t1445 + (-t1123 * t1433 - t1124 * t1436) * pkin(9);
t934 = t1044 * t1445 - t1440 * t974;
t933 = t1043 * t1445 - t1440 * t973;
t932 = -t1057 * t1440 + t1110 * t1445 + (-t1116 * t1433 - t1117 * t1436) * pkin(9);
t931 = t1030 * t1446 - t1441 * t977;
t930 = t1441 * t1030 + t1446 * t977;
t925 = t1022 * t1446 - t1441 * t970;
t924 = t1441 * t1022 + t1446 * t970;
t923 = t1021 * t1445 - t1440 * t962;
t922 = t1020 * t1445 - t1440 * t961;
t911 = t1017 * t1446 - t1441 * t954;
t910 = t1441 * t1017 + t1446 * t954;
t908 = t1432 * t1571 + t1435 * t997;
t907 = -pkin(1) * t1123 - t1060 * t1433 + t1436 * t1482;
t906 = t1012 * t1446 - t1441 * t952;
t905 = t1441 * t1012 + t1446 * t952;
t903 = t1432 * t1568 + t1435 * t986;
t900 = -pkin(1) * t1116 - t1056 * t1433 + t1436 * t1483;
t890 = pkin(2) * t1112 + t1070 * t1435 + t1432 * t1479;
t883 = pkin(2) * t1097 + t1065 * t1435 + t1432 * t1480;
t882 = t1025 * t1445 - t1033 * t1440 + (-t1077 * t1433 - t1078 * t1436) * pkin(9);
t871 = t1432 * t1573 + t1435 * t965;
t870 = t1432 * t1574 + t1435 * t964;
t869 = -pkin(1) * t1077 - t1032 * t1433 + t1436 * t1484;
t868 = -t1433 * t972 + t1436 * t1579;
t867 = -t1433 * t971 + t1436 * t1580;
t862 = -t1433 * t960 + t1436 * t1581;
t861 = -t1433 * t959 + t1436 * t1582;
t859 = -t1440 * t904 + t1445 * t975;
t857 = -t1440 * t909 + t1445 * t963;
t856 = -t1433 * t955 + t1436 * t1583;
t855 = t1433 * t1583 + t1436 * t955;
t851 = pkin(2) * t1080 + t1432 * t1473 + t1435 * t948;
t849 = -t1433 * t943 + t1436 * t1584;
t848 = t1433 * t1584 + t1436 * t943;
t845 = t1432 * t1575 + t1435 * t927;
t844 = t1432 * t1576 + t1435 * t926;
t843 = -t1013 * t1440 + t1445 * t996 + (-t1433 * t951 - t1436 * t952) * pkin(9);
t840 = -t1440 * t873 + t1445 * t938;
t839 = -t1440 * t872 + t1445 * t937;
t836 = -pkin(1) * t951 - t1014 * t1433 + t1436 * t1485;
t834 = t1432 * t1586 + t1435 * t913;
t829 = -t1441 * t856 + t1446 * t915;
t828 = t1441 * t915 + t1446 * t856;
t827 = -t1433 * t908 + t1436 * t1588;
t826 = -t1433 * t903 + t1436 * t1589;
t821 = -t1433 * t897 + t1436 * t1590;
t820 = t1433 * t1590 + t1436 * t897;
t817 = -t1433 * t885 + t1436 * t1591;
t816 = t1433 * t1591 + t1436 * t885;
t815 = -t1441 * t849 + t1446 * t892;
t814 = t1441 * t892 + t1446 * t849;
t811 = -t1440 * t847 + t1445 * t889;
t810 = -t1440 * t846 + t1445 * t888;
t809 = -t1440 * t891 + t1445 * t919 + (-t1433 * t976 - t1436 * t977) * pkin(9);
t805 = -t1440 * t884 + t1445 * t916 + (-t1433 * t969 - t1436 * t970) * pkin(9);
t798 = pkin(2) * t886 + t1432 * t1470 + t1435 * t950;
t797 = -t1433 * t871 + t1436 * t1592;
t796 = -t1433 * t870 + t1436 * t1593;
t792 = -t1440 * t835 + t1445 * t866;
t790 = -pkin(1) * t976 - t1433 * t890 + t1436 * t1489;
t786 = pkin(2) * t956 + t1432 * t1487 + t1435 * t887;
t785 = -t1440 * t852 + t1445 * t881 + (-t1433 * t953 - t1436 * t954) * pkin(9);
t784 = -pkin(1) * t969 - t1433 * t883 + t1436 * t1490;
t782 = -t1441 * t821 + t1446 * t854;
t781 = t1441 * t854 + t1446 * t821;
t779 = pkin(2) * t944 + t1432 * t1488 + t1435 * t879;
t777 = -t1441 * t817 + t1446 * t850;
t776 = t1441 * t850 + t1446 * t817;
t775 = -t1433 * t845 + t1436 * t1594;
t774 = -t1433 * t844 + t1436 * t1595;
t773 = -t1433 * t841 + t1436 * t1596;
t772 = t1433 * t1596 + t1436 * t841;
t771 = -t1433 * t837 + t1436 * t1597;
t770 = t1433 * t1597 + t1436 * t837;
t766 = -pkin(1) * t953 - t1433 * t851 + t1436 * t1491;
t764 = -t1433 * t834 + t1436 * t1598;
t761 = -t1433 * t830 + t1436 * t1599;
t760 = t1433 * t1599 + t1436 * t830;
t752 = -t1441 * t773 + t1446 * t801;
t751 = t1441 * t801 + t1446 * t773;
t749 = -t1441 * t771 + t1446 * t800;
t748 = t1441 * t800 + t1446 * t771;
t744 = pkin(2) * t898 + t1432 * t1493 + t1435 * t791;
t742 = -t1440 * t787 + t1445 * t804 + (-t1433 * t855 - t1436 * t856) * pkin(9);
t741 = -t1441 * t761 + t1446 * t788;
t740 = t1441 * t788 + t1446 * t761;
t739 = -t1440 * t780 + t1445 * t795 + (-t1433 * t848 - t1436 * t849) * pkin(9);
t738 = -t1440 * t799 + t1445 * t802 + (-t1433 * t816 - t1436 * t817) * pkin(9);
t736 = -t1433 * t767 + t1436 * t1600;
t735 = t1433 * t1600 + t1436 * t767;
t733 = -pkin(1) * t855 - t1433 * t786 + t1436 * t1500;
t731 = -pkin(1) * t816 - t1433 * t798 + t1436 * t1499;
t728 = -pkin(1) * t848 - t1433 * t779 + t1436 * t1501;
t725 = pkin(2) * t842 + t1432 * t1495 + t1435 * t756;
t722 = pkin(2) * t838 + t1432 * t1496 + t1435 * t755;
t721 = -t1440 * t745 + t1445 * t759 + (-t1433 * t820 - t1436 * t821) * pkin(9);
t720 = -t1441 * t736 + t1446 * t753;
t719 = t1441 * t753 + t1446 * t736;
t717 = pkin(2) * t768 + t1432 * t1494 + t1435 * t765;
t713 = pkin(2) * t831 + t1432 * t1497 + t1435 * t746;
t711 = -pkin(1) * t820 - t1433 * t744 + t1436 * t1502;
t710 = -t1433 * t729 + t1436 * t1601;
t709 = t1433 * t1601 + t1436 * t729;
t708 = -t1440 * t726 + t1445 * t734 + (-t1433 * t772 - t1436 * t773) * pkin(9);
t707 = -t1440 * t723 + t1445 * t732 + (-t1433 * t770 - t1436 * t771) * pkin(9);
t706 = -t1440 * t714 + t1445 * t727 + (-t1433 * t760 - t1436 * t761) * pkin(9);
t705 = -pkin(1) * t772 - t1433 * t725 + t1436 * t1503;
t704 = -t1441 * t710 + t1446 * t716;
t703 = t1441 * t716 + t1446 * t710;
t702 = -pkin(1) * t770 - t1433 * t722 + t1436 * t1504;
t700 = -t1440 * t718 + t1445 * t724 + (-t1433 * t735 - t1436 * t736) * pkin(9);
t699 = -pkin(1) * t760 - t1433 * t713 + t1436 * t1506;
t697 = pkin(2) * t730 + t1432 * t1498 + t1435 * t712;
t696 = -pkin(1) * t735 - t1433 * t717 + t1436 * t1505;
t695 = -t1440 * t698 + t1445 * t701 + (-t1433 * t709 - t1436 * t710) * pkin(9);
t694 = -pkin(1) * t709 - t1433 * t697 + t1436 * t1507;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1416, -t1417, 0, t1395, 0, 0, 0, 0, 0, 0, t1319, t1305, t1285, t1242, 0, 0, 0, 0, 0, 0, t1040, t1046, t1016, t906, 0, 0, 0, 0, 0, 0, t925, t931, t911, t777, 0, 0, 0, 0, 0, 0, t815, t829, t782, t720, 0, 0, 0, 0, 0, 0, t749, t752, t741, t704; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1417, -t1416, 0, t1394, 0, 0, 0, 0, 0, 0, t1318, t1304, t1284, t1241, 0, 0, 0, 0, 0, 0, t1039, t1045, t1015, t905, 0, 0, 0, 0, 0, 0, t924, t930, t910, t776, 0, 0, 0, 0, 0, 0, t814, t828, t781, t719, 0, 0, 0, 0, 0, 0, t748, t751, t740, t703; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1346, t1343, t1340, t1296, 0, 0, 0, 0, 0, 0, t1116, t1123, t1077, t951, 0, 0, 0, 0, 0, 0, t969, t976, t953, t816, 0, 0, 0, 0, 0, 0, t848, t855, t820, t735, 0, 0, 0, 0, 0, 0, t770, t772, t760, t709; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1417, 0, -t1416, 0, t1608, -t1402, -t1394, -pkin(8) * t1394, -t1441 * t1365 + t1385 * t1446, -t1441 * t1342 + t1355 * t1446, -t1441 * t1347 + t1370 * t1446, -t1441 * t1364 + t1384 * t1446, -t1441 * t1348 + t1371 * t1446, t1446 * t1392 + t1441 * t1520, -pkin(8) * t1318 - t1441 * t1263 + t1269 * t1446, -pkin(8) * t1304 - t1441 * t1261 + t1266 * t1446, -pkin(8) * t1284 + t1233 * t1446 - t1441 * t1236, -pkin(8) * t1241 + t1234 * t1446 - t1441 * t1243, -t1441 * t1143 + t1198 * t1446, -t1441 * t1085 + t1136 * t1446, -t1441 * t1125 + t1179 * t1446, -t1441 * t1142 + t1197 * t1446, -t1441 * t1126 + t1180 * t1446, -t1441 * t1186 + t1235 * t1446, -pkin(8) * t1039 - t1441 * t900 + t1446 * t932, -pkin(8) * t1045 - t1441 * t907 + t1446 * t935, -pkin(8) * t1015 - t1441 * t869 + t1446 * t882, -pkin(8) * t905 - t1441 * t836 + t1446 * t843, -t1441 * t1027 + t1109 * t1446, t1019 * t1446 - t1441 * t958, t1041 * t1446 - t1441 * t982, -t1441 * t1026 + t1108 * t1446, t1042 * t1446 - t1441 * t983, -t1441 * t1053 + t1127 * t1446, -pkin(8) * t924 - t1441 * t784 + t1446 * t805, -pkin(8) * t930 - t1441 * t790 + t1446 * t809, -pkin(8) * t910 - t1441 * t766 + t1446 * t785, -pkin(8) * t776 - t1441 * t731 + t1446 * t738, -t1441 * t868 + t1446 * t934, -t1441 * t826 + t1446 * t859, -t1441 * t861 + t1446 * t922, -t1441 * t867 + t1446 * t933, -t1441 * t862 + t1446 * t923, -t1441 * t936 + t1446 * t990, -pkin(8) * t814 - t1441 * t728 + t1446 * t739, -pkin(8) * t828 - t1441 * t733 + t1446 * t742, -pkin(8) * t781 - t1441 * t711 + t1446 * t721, -pkin(8) * t719 - t1441 * t696 + t1446 * t700, -t1441 * t797 + t1446 * t840, -t1441 * t764 + t1446 * t792, -t1441 * t774 + t1446 * t810, -t1441 * t796 + t1446 * t839, -t1441 * t775 + t1446 * t811, -t1441 * t827 + t1446 * t857, -pkin(8) * t748 - t1441 * t702 + t1446 * t707, -pkin(8) * t751 - t1441 * t705 + t1446 * t708, -pkin(8) * t740 - t1441 * t699 + t1446 * t706, -pkin(8) * t703 - t1441 * t694 + t1446 * t695; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1416, 0, t1417, 0, t1402, t1608, t1395, pkin(8) * t1395, t1365 * t1446 + t1441 * t1385, t1342 * t1446 + t1441 * t1355, t1347 * t1446 + t1441 * t1370, t1364 * t1446 + t1441 * t1384, t1348 * t1446 + t1441 * t1371, t1441 * t1392 - t1446 * t1520, pkin(8) * t1319 + t1263 * t1446 + t1441 * t1269, pkin(8) * t1305 + t1261 * t1446 + t1441 * t1266, pkin(8) * t1285 + t1441 * t1233 + t1236 * t1446, pkin(8) * t1242 + t1441 * t1234 + t1243 * t1446, t1143 * t1446 + t1441 * t1198, t1085 * t1446 + t1441 * t1136, t1125 * t1446 + t1441 * t1179, t1142 * t1446 + t1441 * t1197, t1126 * t1446 + t1441 * t1180, t1186 * t1446 + t1441 * t1235, pkin(8) * t1040 + t1441 * t932 + t1446 * t900, pkin(8) * t1046 + t1441 * t935 + t1446 * t907, pkin(8) * t1016 + t1441 * t882 + t1446 * t869, pkin(8) * t906 + t1441 * t843 + t1446 * t836, t1027 * t1446 + t1441 * t1109, t1441 * t1019 + t1446 * t958, t1441 * t1041 + t1446 * t982, t1026 * t1446 + t1441 * t1108, t1441 * t1042 + t1446 * t983, t1053 * t1446 + t1441 * t1127, pkin(8) * t925 + t1441 * t805 + t1446 * t784, pkin(8) * t931 + t1441 * t809 + t1446 * t790, pkin(8) * t911 + t1441 * t785 + t1446 * t766, pkin(8) * t777 + t1441 * t738 + t1446 * t731, t1441 * t934 + t1446 * t868, t1441 * t859 + t1446 * t826, t1441 * t922 + t1446 * t861, t1441 * t933 + t1446 * t867, t1441 * t923 + t1446 * t862, t1441 * t990 + t1446 * t936, pkin(8) * t815 + t1441 * t739 + t1446 * t728, pkin(8) * t829 + t1441 * t742 + t1446 * t733, pkin(8) * t782 + t1441 * t721 + t1446 * t711, pkin(8) * t720 + t1441 * t700 + t1446 * t696, t1441 * t840 + t1446 * t797, t1441 * t792 + t1446 * t764, t1441 * t810 + t1446 * t774, t1441 * t839 + t1446 * t796, t1441 * t811 + t1446 * t775, t1441 * t857 + t1446 * t827, pkin(8) * t749 + t1441 * t707 + t1446 * t702, pkin(8) * t752 + t1441 * t708 + t1446 * t705, pkin(8) * t741 + t1441 * t706 + t1446 * t699, pkin(8) * t704 + t1441 * t695 + t1446 * t694; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1419, t1420, 0, 0, (t1634 + (qJD(2) - t1615) * t1684) * t1716, t1406 * t1436 + t1433 * t1528, t1389 * t1436 + t1433 * t1525, (qJD(1) * t1615 * t1716 + t1433 * t1603) * t1445, t1390 * t1436 + t1433 * t1523, t1436 * t1611, pkin(1) * t1349 - t1366 * t1436 + t1433 * t1606, pkin(1) * t1344 - t1367 * t1436 + t1433 * t1607, pkin(1) * t1341 + t1433 * t1481, pkin(1) * t1297 + t1322 * t1697, t1250 * t1436 + t1433 * t1537, t1201 * t1436 + t1433 * t1546, t1222 * t1436 + t1433 * t1540, t1248 * t1436 + t1433 * t1538, t1223 * t1436 + t1433 * t1539, t1286 * t1436 + t1433 * t1536, pkin(1) * t1117 + t1056 * t1436 + t1433 * t1483, pkin(1) * t1124 + t1060 * t1436 + t1433 * t1482, pkin(1) * t1078 + t1032 * t1436 + t1433 * t1484, pkin(1) * t952 + t1014 * t1436 + t1433 * t1485, t1148 * t1436 + t1433 * t1553, t1090 * t1436 + t1433 * t1561, t1119 * t1436 + t1433 * t1557, t1147 * t1436 + t1433 * t1554, t1120 * t1436 + t1433 * t1556, t1177 * t1436 + t1433 * t1552, pkin(1) * t970 + t1433 * t1490 + t1436 * t883, pkin(1) * t977 + t1433 * t1489 + t1436 * t890, pkin(1) * t954 + t1433 * t1491 + t1436 * t851, pkin(1) * t817 + t1433 * t1499 + t1436 * t798, t1433 * t1579 + t1436 * t972, t1433 * t1589 + t1436 * t903, t1433 * t1582 + t1436 * t959, t1433 * t1580 + t1436 * t971, t1433 * t1581 + t1436 * t960, t1037 * t1436 + t1433 * t1567, pkin(1) * t849 + t1433 * t1501 + t1436 * t779, pkin(1) * t856 + t1433 * t1500 + t1436 * t786, pkin(1) * t821 + t1433 * t1502 + t1436 * t744, pkin(1) * t736 + t1433 * t1505 + t1436 * t717, t1433 * t1592 + t1436 * t871, t1433 * t1598 + t1436 * t834, t1433 * t1595 + t1436 * t844, t1433 * t1593 + t1436 * t870, t1433 * t1594 + t1436 * t845, t1433 * t1588 + t1436 * t908, pkin(1) * t771 + t1433 * t1504 + t1436 * t722, pkin(1) * t773 + t1433 * t1503 + t1436 * t725, pkin(1) * t761 + t1433 * t1506 + t1436 * t713, pkin(1) * t710 + t1433 * t1507 + t1436 * t697;];
tauB_reg  = t1;
