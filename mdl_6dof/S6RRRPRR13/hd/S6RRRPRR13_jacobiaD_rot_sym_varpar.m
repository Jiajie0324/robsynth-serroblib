% Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix für beliebiges Segment von
% S6RRRPRR13
% Use Code from Maple symbolic Code Generation
% 
% analytische Jacobi-Matrix: Differentieller Zusammenhang zwischen
% Endeffektorposition und verallgemeinerten Koordinaten.
% Zeitableitung der Winkeldarstellung des Endeffektors in Basis-Koordinaten
% 
% Winkeldarstellung: Euler-XYZ-Winkel, rotx(alpha)*roty(beta)*rotz(gamma)
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% link_index [1x1 uint8]
%   Index des Segmentes, auf dem der Punkt C liegt.
%   Wie in S6RRRPRR13_fkine_fixb_rotmat_mdh_sym_varpar.m (1=Basis).
% pkin [13x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d5,d6,theta4]';
% 
% Output:
% JaD_rot [3x6]
%   Zeitableitung der rotatorischen Teilmatrix der analytischen Jacobi-Matrix

% Quelle: HybrDyn-Toolbox
% Datum: 2019-10-10 12:14
% Revision: eb1f267a533306f0f157b6776e21de13647fd8af (2019-10-10)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function JaD_rot = S6RRRPRR13_jacobiaD_rot_sym_varpar(qJ, qJD, link_index, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),uint8(0),zeros(13,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRPRR13_jacobiaD_rot_sym_varpar: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRPRR13_jacobiaD_rot_sym_varpar: qJD has to be [6x1] (double)');
assert(isa(link_index,'uint8') && all(size(link_index) == [1 1]), ...
	'S6RRRPRR13_jacobiaD_rot_sym_varpar: link_index has to be [1x1] uint8');
assert(isreal(pkin) && all(size(pkin) == [13 1]), ...
  'S6RRRPRR13_jacobiaD_rot_sym_varpar: pkin has to be [13x1] (double)');
if link_index == 0
	%% Symbolic Calculation
	% From jacobiaD_rot_0_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:14:17
	% EndTime: 2019-10-10 12:14:17
	% DurationCPUTime: 0.01s
	% Computational Cost: add. (0->0), mult. (0->0), div. (0->0), fcn. (0->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 1
	%% Symbolic Calculation
	% From jacobiaD_rot_1_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:14:17
	% EndTime: 2019-10-10 12:14:17
	% DurationCPUTime: 0.02s
	% Computational Cost: add. (9->0), mult. (37->0), div. (15->0), fcn. (22->0), ass. (0->1)
	t1 = [0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 2
	%% Symbolic Calculation
	% From jacobiaD_rot_2_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:14:17
	% EndTime: 2019-10-10 12:14:18
	% DurationCPUTime: 0.41s
	% Computational Cost: add. (215->39), mult. (853->106), div. (126->12), fcn. (1047->9), ass. (0->54)
	t99 = sin(pkin(6));
	t93 = t99 ^ 2;
	t100 = cos(pkin(6));
	t95 = 0.1e1 / t100 ^ 2;
	t104 = cos(qJ(1));
	t98 = t104 ^ 2;
	t89 = t98 * t93 * t95 + 0.1e1;
	t102 = sin(qJ(1));
	t97 = t102 ^ 2;
	t126 = 0.1e1 / t89 ^ 2 * t97;
	t131 = t126 * t95;
	t122 = t104 * t99;
	t88 = atan2(t122, t100);
	t84 = sin(t88);
	t85 = cos(t88);
	t72 = t85 * t100 + t84 * t122;
	t67 = 0.1e1 / t72;
	t103 = cos(qJ(2));
	t118 = t104 * t103;
	t101 = sin(qJ(2));
	t121 = t102 * t101;
	t113 = t100 * t121 - t118;
	t77 = 0.1e1 / t113;
	t94 = 0.1e1 / t100;
	t68 = 0.1e1 / t72 ^ 2;
	t78 = 0.1e1 / t113 ^ 2;
	t119 = t104 * t101;
	t120 = t102 * t103;
	t81 = -t100 * t119 - t120;
	t82 = t100 * t120 + t119;
	t71 = t81 * qJD(1) - t82 * qJD(2);
	t128 = t71 * t77 * t78;
	t115 = t100 * t118;
	t70 = -qJD(1) * t115 - qJD(2) * t118 + (qJD(2) * t100 + qJD(1)) * t121;
	t129 = t70 * t78;
	t76 = t82 ^ 2;
	t75 = t76 * t78 + 0.1e1;
	t130 = (t76 * t128 - t82 * t129) / t75 ^ 2;
	t127 = t81 * t82;
	t125 = t93 * t94;
	t124 = t102 * t68;
	t123 = t104 * t68;
	t117 = qJD(1) * t104;
	t86 = 0.1e1 / t89;
	t116 = (t86 - 0.1e1) * t99;
	t114 = -0.2e1 * t94 * t131;
	t80 = t115 - t121;
	t63 = (-t104 * t85 * t86 * t125 + t84 * t116) * t102;
	t92 = t99 * t93;
	t73 = 0.1e1 / t75;
	t69 = t67 * t68;
	t66 = t97 * t93 * t68 + 0.1e1;
	t62 = qJD(1) * t63;
	t1 = [(-t86 * t94 * t99 + t92 * t114) * t117, 0, 0, 0, 0, 0; (0.2e1 * (-t104 * t67 + t63 * t124) / t66 ^ 2 * (-t62 * t69 * t97 + t117 * t124) * t93 + ((0.2e1 * t102 * t63 * t69 - t123) * t62 + (-t63 * t123 + (-t67 + (-t92 * t131 - t116) * t84 * t123 - (t93 ^ 2 * t98 * t114 + (-t126 + (0.2e1 * t97 - t98) * t86) * t125) * t68 * t85) * t102) * qJD(1)) / t66) * t99, 0, 0, 0, 0, 0; 0.2e1 * (t78 * t127 + t77 * t80) * t130 + (-(-t82 * qJD(1) + t81 * qJD(2)) * t77 - 0.2e1 * t127 * t128 + (-t80 * t71 - (t113 * qJD(1) - t80 * qJD(2)) * t82 + t81 * t70) * t78) * t73, -0.2e1 * t130 + 0.2e1 * (-t73 * t129 + (t73 * t128 - t78 * t130) * t82) * t82, 0, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 3
	%% Symbolic Calculation
	% From jacobiaD_rot_3_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:14:18
	% EndTime: 2019-10-10 12:14:19
	% DurationCPUTime: 1.23s
	% Computational Cost: add. (2555->103), mult. (7918->233), div. (442->12), fcn. (10062->13), ass. (0->106)
	t218 = sin(pkin(6));
	t219 = cos(pkin(7));
	t220 = cos(pkin(6));
	t217 = sin(pkin(7));
	t225 = cos(qJ(2));
	t268 = t217 * t225;
	t206 = -t218 * t268 + t220 * t219;
	t203 = 0.1e1 / t206;
	t222 = sin(qJ(2));
	t226 = cos(qJ(1));
	t260 = t226 * t222;
	t223 = sin(qJ(1));
	t261 = t223 * t225;
	t238 = t220 * t260 + t261;
	t267 = t218 * t222;
	t204 = 0.1e1 / t206 ^ 2;
	t259 = t226 * t225;
	t262 = t223 * t222;
	t207 = -t220 * t259 + t262;
	t265 = t218 * t226;
	t242 = -t207 * t217 + t219 * t265;
	t272 = t242 * t204;
	t284 = t217 * (t203 * t238 + t267 * t272);
	t189 = atan2(t242, t206);
	t184 = sin(t189);
	t185 = cos(t189);
	t170 = t184 * t242 + t185 * t206;
	t167 = 0.1e1 / t170;
	t221 = sin(qJ(3));
	t224 = cos(qJ(3));
	t237 = t220 * t262 - t259;
	t239 = t220 * t261 + t260;
	t266 = t218 * t223;
	t252 = t217 * t266;
	t240 = -t219 * t239 + t252;
	t181 = t221 * t240 - t224 * t237;
	t175 = 0.1e1 / t181;
	t168 = 0.1e1 / t170 ^ 2;
	t176 = 0.1e1 / t181 ^ 2;
	t200 = -t217 * t239 - t219 * t266;
	t197 = t200 ^ 2;
	t163 = t197 * t168 + 0.1e1;
	t192 = qJD(1) * t207 + qJD(2) * t237;
	t258 = qJD(1) * t218;
	t249 = t226 * t258;
	t182 = t192 * t217 - t219 * t249;
	t276 = t182 * t168;
	t196 = t242 ^ 2;
	t188 = t196 * t204 + 0.1e1;
	t186 = 0.1e1 / t188;
	t194 = qJD(1) * t239 + qJD(2) * t238;
	t250 = t223 * t258;
	t183 = -t194 * t217 - t219 * t250;
	t257 = qJD(2) * t218;
	t269 = t217 * t222;
	t245 = t257 * t269;
	t244 = t204 * t245;
	t233 = t183 * t203 - t242 * t244;
	t159 = t233 * t186;
	t243 = -t184 * t206 + t185 * t242;
	t155 = t159 * t243 + t184 * t183 + t185 * t245;
	t282 = t155 * t167 * t168;
	t283 = (-t197 * t282 + t200 * t276) / t163 ^ 2;
	t193 = qJD(1) * t238 + qJD(2) * t239;
	t235 = t192 * t219 + t217 * t249;
	t165 = qJD(3) * t181 - t193 * t221 - t224 * t235;
	t263 = t219 * t224;
	t270 = t237 * t221;
	t180 = -t224 * t252 + t239 * t263 - t270;
	t174 = t180 ^ 2;
	t173 = t174 * t176 + 0.1e1;
	t277 = t176 * t180;
	t166 = -t193 * t224 + t235 * t221 + (t224 * t240 + t270) * qJD(3);
	t279 = t166 * t175 * t176;
	t281 = (t165 * t277 - t174 * t279) / t173 ^ 2;
	t205 = t203 * t204;
	t280 = (-t196 * t205 * t245 + t183 * t272) / t188 ^ 2;
	t278 = t168 * t200;
	t275 = t184 * t200;
	t274 = t185 * t200;
	t273 = t242 * t203;
	t271 = t238 * t221;
	t264 = t219 * t221;
	t256 = -0.2e1 * t283;
	t255 = -0.2e1 * t282;
	t254 = 0.2e1 * t281;
	t253 = 0.2e1 * t280;
	t251 = t217 * t265;
	t248 = -0.2e1 * t203 * t280;
	t247 = 0.2e1 * t180 * t279;
	t246 = t217 * t250;
	t241 = t207 * t219 + t251;
	t190 = -t221 * t239 - t237 * t263;
	t191 = -t224 * t239 + t237 * t264;
	t234 = t184 + (t185 * t273 - t184) * t186;
	t179 = t221 * t241 - t224 * t238;
	t216 = t217 ^ 2;
	t195 = qJD(1) * t237 + qJD(2) * t207;
	t178 = -t224 * t241 - t271;
	t171 = 0.1e1 / t173;
	t161 = 0.1e1 / t163;
	t160 = t186 * t284;
	t158 = t234 * t200;
	t156 = (-t184 * t238 + t185 * t267) * t217 - t243 * t160;
	t154 = t253 * t284 + (t195 * t203 * t217 + (-t183 * t204 * t269 + (t204 * t238 * t216 * t222 + (0.2e1 * t205 * t216 * t218 * t222 ^ 2 - t204 * t268) * t242) * qJD(2)) * t218) * t186;
	t1 = [t200 * t248 + (t182 * t203 - t200 * t244) * t186, t154, 0, 0, 0, 0; t242 * t167 * t256 + (t183 * t167 + (-t155 * t242 + t158 * t182) * t168) * t161 + ((t158 * t255 + t234 * t276) * t161 + (t158 * t256 + ((-t159 * t186 * t273 + t253) * t275 + (t242 * t248 + t159 + (-t159 + t233) * t186) * t274) * t161) * t168) * t200, 0.2e1 * (t167 * t217 * t237 - t156 * t278) * t283 + ((t243 * t154 - (-t159 * t170 + t183 * t185) * t160) * t278 + (t200 * t255 + t276) * t156 + (-t193 * t167 + (t237 * t155 + (-t159 * t238 + t225 * t257) * t274 + (t195 + (qJD(2) * t160 - t159) * t267) * t275) * t168) * t217) * t161, 0, 0, 0, 0; (-t175 * t178 + t179 * t277) * t254 + ((-t194 * t263 + t195 * t221 + t224 * t246) * t175 + t179 * t247 + (-t178 * t166 - (t194 * t264 + t195 * t224 - t221 * t246) * t180 - t179 * t165) * t176 + (t179 * t175 - (t207 * t263 + t224 * t251 + t271) * t277) * qJD(3)) * t171, (-t175 * t190 + t191 * t277) * t254 + ((qJD(3) * t191 + t192 * t221 - t193 * t263) * t175 + t191 * t247 + (-t190 * t166 - (-qJD(3) * t190 + t192 * t224 + t193 * t264) * t180 - t191 * t165) * t176) * t171, -0.2e1 * t281 + 0.2e1 * (t165 * t176 * t171 + (-t171 * t279 - t176 * t281) * t180) * t180, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 4
	%% Symbolic Calculation
	% From jacobiaD_rot_4_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:14:18
	% EndTime: 2019-10-10 12:14:21
	% DurationCPUTime: 2.86s
	% Computational Cost: add. (7376->164), mult. (23291->306), div. (681->12), fcn. (29052->15), ass. (0->154)
	t301 = cos(pkin(7));
	t303 = sin(qJ(3));
	t394 = sin(qJ(2));
	t395 = sin(qJ(1));
	t297 = t395 * t394;
	t302 = cos(pkin(6));
	t341 = t302 * t297;
	t304 = cos(qJ(2));
	t305 = cos(qJ(1));
	t375 = t305 * t304;
	t324 = t341 - t375;
	t359 = t395 * t304;
	t361 = t305 * t394;
	t325 = t302 * t359 + t361;
	t299 = sin(pkin(6));
	t363 = t299 * t395;
	t393 = sin(pkin(7));
	t339 = t393 * t363;
	t396 = cos(qJ(3));
	t263 = -t324 * t396 + (-t325 * t301 + t339) * t303;
	t350 = t301 * t363;
	t281 = t325 * t393 + t350;
	t298 = sin(pkin(13));
	t300 = cos(pkin(13));
	t243 = t263 * t298 - t281 * t300;
	t286 = t302 * t361 + t359;
	t272 = t286 * qJD(1) + t325 * qJD(2);
	t355 = t303 * t393;
	t379 = t299 * t305;
	t293 = t355 * t379;
	t403 = -t302 * t375 + t297;
	t314 = t403 * qJD(1) + t324 * qJD(2);
	t313 = t314 * t303;
	t319 = t325 * t396;
	t331 = t396 * t339;
	t401 = -t301 * t319 + t303 * t324 + t331;
	t231 = qJD(1) * t293 + t401 * qJD(3) - t272 * t396 + t301 * t313;
	t366 = t301 * t379;
	t264 = qJD(1) * t366 - t314 * t393;
	t226 = t231 * t300 + t264 * t298;
	t244 = t263 * t300 + t281 * t298;
	t238 = 0.1e1 / t244;
	t239 = 0.1e1 / t244 ^ 2;
	t386 = t226 * t238 * t239;
	t352 = 0.2e1 * t243 * t386;
	t349 = t394 * t396;
	t376 = t303 * t304;
	t322 = t301 * t349 + t376;
	t327 = t301 * t376 + t349;
	t348 = t302 * t355;
	t253 = qJD(3) * t348 + (t322 * qJD(2) + t327 * qJD(3)) * t299;
	t358 = t394 * t303;
	t360 = t396 * t304;
	t326 = t301 * t360 - t358;
	t347 = t396 * t393;
	t340 = t302 * t347;
	t278 = -t326 * t299 - t340;
	t276 = 0.1e1 / t278 ^ 2;
	t404 = t253 * t276;
	t333 = t347 * t379;
	t320 = -t286 * t303 - t333;
	t332 = t403 * t396;
	t328 = t301 * t332;
	t257 = t328 - t320;
	t255 = t257 ^ 2;
	t249 = t255 * t276 + 0.1e1;
	t247 = 0.1e1 / t249;
	t337 = t403 * t303;
	t364 = t286 * t396;
	t317 = -t301 * t337 + t364;
	t273 = t325 * qJD(1) + t286 * qJD(2);
	t274 = -qJD(1) * t341 - qJD(2) * t297 + (qJD(2) * t302 + qJD(1)) * t375;
	t362 = t301 * t396;
	t321 = -qJD(1) * t331 - qJD(3) * t293 + t273 * t362 + t274 * t303;
	t232 = t317 * qJD(3) + t321;
	t275 = 0.1e1 / t278;
	t382 = t257 * t276;
	t336 = -t232 * t275 + t253 * t382;
	t214 = t336 * t247;
	t250 = atan2(-t257, t278);
	t245 = sin(t250);
	t246 = cos(t250);
	t342 = -t245 * t278 - t246 * t257;
	t209 = t342 * t214 - t232 * t245 + t246 * t253;
	t224 = -t245 * t257 + t246 * t278;
	t221 = 0.1e1 / t224;
	t222 = 0.1e1 / t224 ^ 2;
	t256 = t401 ^ 2;
	t220 = t222 * t256 + 0.1e1;
	t218 = 0.1e1 / t220;
	t388 = t218 * t222;
	t312 = t314 * t396;
	t230 = -qJD(1) * t333 + t263 * qJD(3) - t272 * t303 - t301 * t312;
	t387 = t222 * t401;
	t391 = t209 * t221 * t222;
	t392 = (-t230 * t387 - t256 * t391) / t220 ^ 2;
	t402 = -t209 * t388 - 0.2e1 * t221 * t392;
	t397 = -0.2e1 * t401;
	t353 = t391 * t397;
	t374 = 0.2e1 * t392;
	t400 = t218 * t353 - t230 * t388 - t374 * t387;
	t399 = (qJD(1) * t339 - t286 * qJD(3) - t273 * t301) * t303 - qJD(3) * t333 + t274 * t396;
	t398 = -0.2e1 * t257;
	t384 = t275 * t404;
	t390 = (t232 * t382 - t255 * t384) / t249 ^ 2;
	t389 = t218 * t221;
	t385 = t239 * t243;
	t383 = t257 * t275;
	t380 = t298 * t238;
	t378 = t300 * t243;
	t377 = t301 * t303;
	t225 = t231 * t298 - t264 * t300;
	t237 = t243 ^ 2;
	t229 = t237 * t239 + 0.1e1;
	t373 = 0.2e1 * (t225 * t385 - t237 * t386) / t229 ^ 2;
	t372 = -0.2e1 * t390;
	t370 = t275 * t390;
	t368 = t218 * t387;
	t357 = t298 * t393;
	t356 = t300 * t393;
	t351 = t384 * t398;
	t338 = t301 * t403;
	t259 = -t293 + t317;
	t279 = t327 * t299 + t348;
	t335 = -t259 * t275 + t279 * t382;
	t269 = t286 * t362 - t337;
	t285 = t322 * t299;
	t334 = -t269 * t275 + t285 * t382;
	t330 = -t245 + (t246 * t383 + t245) * t247;
	t329 = t396 * t338;
	t323 = -t301 * t358 + t360;
	t318 = t303 * t338 - t364;
	t270 = -t325 * t303 - t324 * t362;
	t271 = t324 * t377 - t319;
	t280 = -t393 * t403 + t366;
	t266 = (t326 * qJD(2) + t323 * qJD(3)) * t299;
	t265 = -qJD(1) * t350 - t273 * t393;
	t261 = t293 + t318;
	t254 = qJD(3) * t340 + (t323 * qJD(2) + t326 * qJD(3)) * t299;
	t252 = t271 * t300 - t324 * t357;
	t251 = t271 * t298 + t324 * t356;
	t242 = t261 * t300 + t280 * t298;
	t241 = t261 * t298 - t280 * t300;
	t236 = t274 * t362 - t273 * t303 + (-t286 * t377 - t332) * qJD(3);
	t235 = -t270 * qJD(3) + t272 * t377 + t312;
	t234 = qJD(3) * t329 - t399;
	t233 = -qJD(3) * t328 + t399;
	t227 = 0.1e1 / t229;
	t217 = t334 * t247;
	t216 = t335 * t247;
	t210 = t342 * t216 - t245 * t259 + t246 * t279;
	t208 = t334 * t372 + (t285 * t351 - t236 * t275 + (t232 * t285 + t253 * t269 + t257 * t266) * t276) * t247;
	t207 = t335 * t372 + (t279 * t351 - t233 * t275 + (t232 * t279 + t253 * t259 + t254 * t257) * t276) * t247;
	t1 = [t370 * t397 + (-t230 * t275 - t401 * t404) * t247, t208, t207, 0, 0, 0; (t318 * qJD(3) - t321) * t389 + (t330 * t230 - ((-t214 * t247 * t383 + t372) * t245 + (t370 * t398 - t214 + (t214 - t336) * t247) * t246) * t401) * t368 + t402 * (-t329 + t320) - t400 * t330 * t401, (t271 * qJD(3) - t272 * t362 + t313) * t389 + ((-t208 * t257 - t217 * t232 + t266 + (-t217 * t278 - t269) * t214) * t246 + (-t208 * t278 - t217 * t253 - t236 + (t217 * t257 - t285) * t214) * t245) * t368 + t402 * t270 + t400 * (t342 * t217 - t245 * t269 + t246 * t285), (-t210 * t387 - t221 * t263) * t374 + (t210 * t353 + t231 * t221 + (-t263 * t209 - t210 * t230 - (-(-t207 * t257 - t216 * t232 + t254 + (-t216 * t278 - t259) * t214) * t246 - (-t207 * t278 - t216 * t253 - t233 + (t216 * t257 - t279) * t214) * t245) * t401) * t222) * t218, 0, 0, 0; (-t238 * t241 + t242 * t385) * t373 + ((t234 * t298 - t265 * t300) * t238 + t242 * t352 + (-t241 * t226 - (t234 * t300 + t265 * t298) * t243 - t242 * t225) * t239) * t227, (-t238 * t251 + t252 * t385) * t373 + ((t235 * t298 + t272 * t356) * t238 + t252 * t352 + (-t251 * t226 - (t235 * t300 - t272 * t357) * t243 - t252 * t225) * t239) * t227, -(-t239 * t378 + t380) * t401 * t373 + (t401 * t300 * t352 - t230 * t380 + (t230 * t378 - (t225 * t300 + t226 * t298) * t401) * t239) * t227, 0, 0, 0;];
	JaD_rot = t1;
elseif link_index == 5
	%% Symbolic Calculation
	% From jacobiaD_rot_5_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:14:18
	% EndTime: 2019-10-10 12:14:21
	% DurationCPUTime: 2.97s
	% Computational Cost: add. (8441->175), mult. (25165->321), div. (705->12), fcn. (31370->15), ass. (0->162)
	t348 = cos(pkin(7));
	t349 = sin(qJ(3));
	t445 = cos(pkin(6));
	t446 = sin(qJ(2));
	t397 = t445 * t446;
	t447 = sin(qJ(1));
	t383 = t447 * t397;
	t350 = cos(qJ(2));
	t351 = cos(qJ(1));
	t426 = t351 * t350;
	t366 = t383 - t426;
	t407 = t350 * t445;
	t367 = t351 * t446 + t447 * t407;
	t347 = sin(pkin(6));
	t444 = sin(pkin(7));
	t408 = t347 * t444;
	t391 = t447 * t408;
	t448 = cos(qJ(3));
	t308 = -t366 * t448 + (-t367 * t348 + t391) * t349;
	t429 = t347 * t348;
	t401 = t447 * t429;
	t327 = t367 * t444 + t401;
	t346 = pkin(13) + qJ(5);
	t344 = sin(t346);
	t345 = cos(t346);
	t288 = t308 * t344 - t327 * t345;
	t457 = 0.2e1 * t288;
	t332 = t447 * t350 + t351 * t397;
	t399 = t351 * t408;
	t384 = t448 * t399;
	t368 = -t332 * t349 - t384;
	t343 = t447 * t446;
	t389 = -t351 * t407 + t343;
	t372 = t389 * t448;
	t370 = t348 * t372;
	t302 = t370 - t368;
	t300 = t302 ^ 2;
	t410 = t446 * t349;
	t411 = t448 * t350;
	t375 = t348 * t411 - t410;
	t393 = t445 * t444;
	t382 = t448 * t393;
	t324 = -t375 * t347 - t382;
	t322 = 0.1e1 / t324 ^ 2;
	t294 = t300 * t322 + 0.1e1;
	t292 = 0.1e1 / t294;
	t380 = t389 * t349;
	t413 = t332 * t448;
	t362 = -t348 * t380 + t413;
	t318 = t367 * qJD(1) + t332 * qJD(2);
	t319 = -qJD(1) * t383 - qJD(2) * t343 + (qJD(2) * t445 + qJD(1)) * t426;
	t339 = t349 * t399;
	t378 = t448 * t391;
	t412 = t348 * t448;
	t371 = -qJD(1) * t378 - qJD(3) * t339 + t318 * t412 + t319 * t349;
	t277 = t362 * qJD(3) + t371;
	t400 = t446 * t448;
	t427 = t349 * t350;
	t373 = t348 * t400 + t427;
	t376 = t348 * t427 + t400;
	t390 = t349 * t393;
	t298 = qJD(3) * t390 + (t373 * qJD(2) + t376 * qJD(3)) * t347;
	t321 = 0.1e1 / t324;
	t431 = t302 * t322;
	t388 = -t277 * t321 + t298 * t431;
	t259 = t388 * t292;
	t295 = atan2(-t302, t324);
	t290 = sin(t295);
	t291 = cos(t295);
	t392 = -t290 * t324 - t291 * t302;
	t254 = t392 * t259 - t277 * t290 + t291 * t298;
	t271 = -t290 * t302 + t291 * t324;
	t269 = 0.1e1 / t271 ^ 2;
	t456 = t254 * t269;
	t455 = t298 * t322;
	t365 = t367 * t448;
	t453 = -t348 * t365 + t349 * t366 + t378;
	t301 = t453 ^ 2;
	t265 = t269 * t301 + 0.1e1;
	t263 = 0.1e1 / t265;
	t268 = 0.1e1 / t271;
	t317 = t332 * qJD(1) + t367 * qJD(2);
	t360 = t389 * qJD(1) + t366 * qJD(2);
	t358 = t360 * t448;
	t275 = -qJD(1) * t384 + t308 * qJD(3) - t317 * t349 - t348 * t358;
	t435 = t275 * t269;
	t442 = t268 * t456;
	t443 = (-t301 * t442 - t435 * t453) / t265 ^ 2;
	t454 = -t263 * t456 - 0.2e1 * t268 * t443;
	t449 = -0.2e1 * t453;
	t404 = t442 * t449;
	t424 = 0.2e1 * t443;
	t437 = t269 * t453;
	t452 = -t424 * t437 + (t404 - t435) * t263;
	t451 = -(qJD(1) * t391 - t332 * qJD(3) - t318 * t348) * t349 + qJD(3) * t384 - t319 * t448;
	t289 = t308 * t345 + t327 * t344;
	t283 = 0.1e1 / t289;
	t284 = 0.1e1 / t289 ^ 2;
	t450 = -0.2e1 * t302;
	t359 = t360 * t349;
	t276 = qJD(1) * t339 + t453 * qJD(3) - t317 * t448 + t348 * t359;
	t414 = t351 * t429;
	t309 = qJD(1) * t414 - t360 * t444;
	t266 = t289 * qJD(5) + t276 * t344 - t309 * t345;
	t282 = t288 ^ 2;
	t274 = t282 * t284 + 0.1e1;
	t434 = t284 * t288;
	t425 = qJD(5) * t288;
	t267 = t276 * t345 + t309 * t344 - t425;
	t438 = t267 * t283 * t284;
	t441 = (t266 * t434 - t282 * t438) / t274 ^ 2;
	t433 = t321 * t455;
	t440 = (t277 * t431 - t300 * t433) / t294 ^ 2;
	t439 = t263 * t268;
	t272 = 0.1e1 / t274;
	t436 = t272 * t284;
	t432 = t302 * t321;
	t428 = t348 * t349;
	t423 = -0.2e1 * t441;
	t422 = -0.2e1 * t440;
	t420 = t284 * t441;
	t419 = t321 * t440;
	t417 = t263 * t437;
	t416 = t266 * t436;
	t415 = t288 * t438;
	t409 = t366 * t444;
	t406 = t444 * t317;
	t403 = 0.2e1 * t415;
	t402 = t433 * t450;
	t381 = t348 * t389;
	t363 = t349 * t381 - t413;
	t306 = t339 + t363;
	t326 = -t389 * t444 + t414;
	t287 = t306 * t345 + t326 * t344;
	t286 = t306 * t344 - t326 * t345;
	t387 = -t344 * t283 + t345 * t434;
	t304 = -t339 + t362;
	t325 = t376 * t347 + t390;
	t386 = -t304 * t321 + t325 * t431;
	t314 = t332 * t412 - t380;
	t331 = t373 * t347;
	t385 = -t314 * t321 + t331 * t431;
	t316 = t366 * t428 - t365;
	t297 = t316 * t345 - t344 * t409;
	t379 = -t316 * t344 - t345 * t409;
	t377 = -t290 + (t291 * t432 + t290) * t292;
	t374 = -t348 * t410 + t411;
	t369 = t448 * t381;
	t315 = -t367 * t349 - t366 * t412;
	t311 = (t375 * qJD(2) + t374 * qJD(3)) * t347;
	t310 = -qJD(1) * t401 - t318 * t444;
	t299 = qJD(3) * t382 + (t374 * qJD(2) + t375 * qJD(3)) * t347;
	t281 = t319 * t412 - t318 * t349 + (-t332 * t428 - t372) * qJD(3);
	t280 = -t315 * qJD(3) + t317 * t428 + t358;
	t279 = qJD(3) * t369 + t451;
	t278 = -qJD(3) * t370 - t451;
	t262 = t385 * t292;
	t261 = t386 * t292;
	t255 = t392 * t261 - t290 * t304 + t291 * t325;
	t253 = t385 * t422 + (t331 * t402 - t281 * t321 + (t277 * t331 + t298 * t314 + t302 * t311) * t322) * t292;
	t252 = t386 * t422 + (t325 * t402 - t278 * t321 + (t277 * t325 + t298 * t304 + t299 * t302) * t322) * t292;
	t1 = [t419 * t449 + (-t275 * t321 - t453 * t455) * t292, t253, t252, 0, 0, 0; (t363 * qJD(3) - t371) * t439 + (t377 * t275 - ((-t259 * t292 * t432 + t422) * t290 + (t419 * t450 - t259 + (t259 - t388) * t292) * t291) * t453) * t417 + t454 * (-t369 + t368) - t452 * t377 * t453, (t316 * qJD(3) - t317 * t412 + t359) * t439 + ((-t253 * t302 - t262 * t277 + t311 + (-t262 * t324 - t314) * t259) * t291 + (-t253 * t324 - t262 * t298 - t281 + (t262 * t302 - t331) * t259) * t290) * t417 + t454 * t315 + t452 * (t392 * t262 - t290 * t314 + t291 * t331), (-t255 * t437 - t268 * t308) * t424 + (t255 * t404 + t276 * t268 + (-t308 * t254 - t255 * t275 - (-(-t252 * t302 - t261 * t277 + t299 + (-t261 * t324 - t304) * t259) * t291 - (-t252 * t324 - t261 * t298 - t278 + (t261 * t302 - t325) * t259) * t290) * t453) * t269) * t263, 0, 0, 0; 0.2e1 * (-t283 * t286 + t287 * t434) * t441 + ((t287 * qJD(5) + t279 * t344 - t310 * t345) * t283 + t287 * t403 + (-t286 * t267 - (-t286 * qJD(5) + t279 * t345 + t310 * t344) * t288 - t287 * t266) * t284) * t272, (t420 * t457 - t416) * t297 - (-t267 * t436 + t283 * t423) * t379 + ((t297 * qJD(5) + t280 * t344 + t345 * t406) * t283 - (t379 * qJD(5) + t280 * t345 - t344 * t406) * t434 + t297 * t403) * t272, -t387 * t453 * t423 + (t387 * t275 - ((-qJD(5) * t283 - 0.2e1 * t415) * t345 + (t266 * t345 + (t267 - t425) * t344) * t284) * t453) * t272, 0, t423 + (t416 + (-t272 * t438 - t420) * t288) * t457, 0;];
	JaD_rot = t1;
elseif link_index == 6
	%% Symbolic Calculation
	% From jacobiaD_rot_6_floatb_twist_matlab.m
	% OptimizationMode: 2
	% StartTime: 2019-10-10 12:14:20
	% EndTime: 2019-10-10 12:14:28
	% DurationCPUTime: 8.71s
	% Computational Cost: add. (25275->242), mult. (59163->460), div. (983->12), fcn. (74815->17), ass. (0->188)
	t579 = cos(pkin(6));
	t580 = sin(qJ(2));
	t528 = t579 * t580;
	t475 = cos(qJ(2));
	t581 = sin(qJ(1));
	t542 = t581 * t475;
	t582 = cos(qJ(1));
	t457 = t582 * t528 + t542;
	t494 = t579 * t542 + t582 * t580;
	t447 = t494 * qJD(1) + t457 * qJD(2);
	t466 = t581 * t580;
	t509 = t581 * t528;
	t529 = t579 * t582;
	t448 = -qJD(1) * t509 - qJD(2) * t466 + (t582 * qJD(1) + qJD(2) * t529) * t475;
	t472 = sin(qJ(3));
	t474 = cos(qJ(3));
	t470 = sin(pkin(6));
	t577 = sin(pkin(7));
	t539 = t470 * t577;
	t517 = t581 * t539;
	t507 = qJD(1) * t517;
	t578 = cos(pkin(7));
	t520 = t582 * t539;
	t505 = -t475 * t529 + t466;
	t589 = t505 * t578;
	t486 = t589 + t520;
	t585 = t457 * t472 + t486 * t474;
	t402 = t585 * qJD(3) - (-t447 * t578 + t507) * t472 - t448 * t474;
	t557 = t457 * t474;
	t437 = t486 * t472 - t557;
	t469 = pkin(13) + qJ(5);
	t467 = sin(t469);
	t468 = cos(t469);
	t540 = t470 * t578;
	t521 = t582 * t540;
	t487 = t505 * t577 - t521;
	t417 = t437 * t467 + t487 * t468;
	t518 = t581 * t540;
	t492 = qJD(1) * t518 + t447 * t577;
	t379 = t417 * qJD(5) - t402 * t468 + t492 * t467;
	t418 = t437 * t468 - t487 * t467;
	t598 = t418 * qJD(5) + t402 * t467 + t492 * t468;
	t595 = -t494 * t578 + t517;
	t537 = t474 * t578;
	t554 = qJD(3) * t472;
	t592 = (t472 * t589 - t557) * qJD(3) - t447 * t537 - t448 * t472 + t474 * t507 + t520 * t554;
	t536 = t475 * t578;
	t502 = t472 * t536 + t580 * t474;
	t524 = t577 * t579;
	t452 = t502 * t470 + t472 * t524;
	t456 = -t475 * t539 + t579 * t578;
	t428 = t452 * t468 + t456 * t467;
	t527 = t578 * t580;
	t500 = -t472 * t527 + t474 * t475;
	t501 = -t580 * t472 + t474 * t536;
	t516 = qJD(3) * t524;
	t430 = t474 * t516 + (t500 * qJD(2) + t501 * qJD(3)) * t470;
	t526 = t577 * t580;
	t522 = t470 * t526;
	t506 = qJD(2) * t522;
	t403 = t428 * qJD(5) + t430 * t467 - t468 * t506;
	t427 = t452 * t467 - t456 * t468;
	t425 = 0.1e1 / t427 ^ 2;
	t591 = t403 * t425;
	t424 = 0.1e1 / t427;
	t451 = t501 * t470 + t474 * t524;
	t563 = t417 * t425;
	t511 = t424 * t585 - t451 * t563;
	t590 = t467 * t511;
	t493 = -t582 * t475 + t509;
	t484 = t505 * qJD(1) + t493 * qJD(2);
	t588 = qJD(1) * t520 + t484 * t578;
	t587 = t595 * t474;
	t392 = atan2(t417, t427);
	t383 = sin(t392);
	t384 = cos(t392);
	t372 = t383 * t417 + t384 * t427;
	t369 = 0.1e1 / t372;
	t439 = t595 * t472 - t493 * t474;
	t485 = t494 * t577 + t518;
	t420 = t439 * t468 + t485 * t467;
	t473 = cos(qJ(6));
	t438 = -t472 * t493 - t587;
	t471 = sin(qJ(6));
	t561 = t438 * t471;
	t396 = t420 * t473 + t561;
	t389 = 0.1e1 / t396;
	t370 = 0.1e1 / t372 ^ 2;
	t390 = 0.1e1 / t396 ^ 2;
	t584 = 0.2e1 * t417;
	t419 = t439 * t467 - t485 * t468;
	t583 = 0.2e1 * t419;
	t413 = t419 ^ 2;
	t368 = t413 * t370 + 0.1e1;
	t446 = t457 * qJD(1) + t494 * qJD(2);
	t398 = t587 * qJD(3) - t446 * t474 + t588 * t472 + t493 * t554;
	t482 = qJD(1) * t521 - t484 * t577;
	t376 = t420 * qJD(5) + t398 * t467 - t482 * t468;
	t569 = t376 * t370;
	t412 = t417 ^ 2;
	t387 = t412 * t425 + 0.1e1;
	t385 = 0.1e1 / t387;
	t515 = -t403 * t563 + t424 * t598;
	t359 = t515 * t385;
	t523 = -t383 * t427 + t384 * t417;
	t353 = t523 * t359 + t383 * t598 + t384 * t403;
	t371 = t369 * t370;
	t575 = t353 * t371;
	t576 = (-t413 * t575 + t419 * t569) / t368 ^ 2;
	t377 = -t419 * qJD(5) + t398 * t468 + t482 * t467;
	t397 = t439 * qJD(3) - t446 * t472 - t588 * t474;
	t363 = t396 * qJD(6) + t377 * t471 - t397 * t473;
	t560 = t438 * t473;
	t395 = t420 * t471 - t560;
	t388 = t395 ^ 2;
	t375 = t388 * t390 + 0.1e1;
	t566 = t390 * t395;
	t552 = qJD(6) * t395;
	t364 = t377 * t473 + t397 * t471 - t552;
	t571 = t364 * t389 * t390;
	t573 = (t363 * t566 - t388 * t571) / t375 ^ 2;
	t565 = t424 * t591;
	t572 = (-t412 * t565 + t563 * t598) / t387 ^ 2;
	t570 = t370 * t419;
	t568 = t383 * t419;
	t567 = t384 * t419;
	t564 = t417 * t424;
	t562 = t438 * t467;
	t556 = t471 * t389;
	t555 = t473 * t395;
	t553 = qJD(5) * t468;
	t551 = 0.2e1 * t576;
	t550 = -0.2e1 * t573;
	t549 = 0.2e1 * t573;
	t548 = -0.2e1 * t572;
	t547 = t371 * t583;
	t546 = t424 * t572;
	t545 = t370 * t568;
	t544 = t370 * t567;
	t543 = t395 * t571;
	t541 = t467 * t577;
	t538 = t472 * t578;
	t535 = t577 * t468;
	t534 = -0.2e1 * t369 * t576;
	t533 = t370 * t551;
	t532 = t353 * t547;
	t531 = 0.2e1 * t543;
	t530 = t565 * t584;
	t525 = qJD(6) * t438 * t468 + t398;
	t394 = t418 * t473 - t471 * t585;
	t393 = t418 * t471 + t473 * t585;
	t445 = -t494 * t474 + t493 * t538;
	t423 = t445 * t468 - t493 * t541;
	t444 = -t494 * t472 - t493 * t537;
	t408 = t423 * t473 + t444 * t471;
	t407 = t423 * t471 - t444 * t473;
	t514 = t390 * t555 - t556;
	t513 = t418 * t424 - t428 * t563;
	t443 = -t457 * t538 - t505 * t474;
	t421 = t443 * t467 - t457 * t535;
	t455 = t500 * t470;
	t442 = t455 * t467 - t468 * t522;
	t512 = -t421 * t424 - t442 * t563;
	t504 = -t445 * t467 - t493 * t535;
	t503 = -t383 + (-t384 * t564 + t383) * t385;
	t499 = -t472 * t475 - t474 * t527;
	t498 = qJD(5) * t562 + qJD(6) * t439 - t397 * t468;
	t429 = -t472 * t516 + (t499 * qJD(2) - t502 * qJD(3)) * t470;
	t411 = t455 * t553 + ((t499 * qJD(3) + qJD(5) * t526) * t467 + (-t502 * t467 - t475 * t535) * qJD(2)) * t470;
	t410 = t439 * t471 - t468 * t560;
	t409 = -t439 * t473 - t468 * t561;
	t406 = -t444 * qJD(3) + t446 * t538 + t484 * t474;
	t405 = t445 * qJD(3) - t446 * t537 + t484 * t472;
	t404 = -t427 * qJD(5) + t430 * t468 + t467 * t506;
	t382 = (-t448 * t538 - t447 * t474 + (-t457 * t537 + t505 * t472) * qJD(3)) * t467 + t443 * t553 - t448 * t535 + t457 * qJD(5) * t541;
	t381 = t504 * qJD(5) + t406 * t468 - t446 * t541;
	t373 = 0.1e1 / t375;
	t366 = 0.1e1 / t368;
	t365 = t385 * t590;
	t362 = t512 * t385;
	t361 = t513 * t385;
	t358 = t503 * t419;
	t356 = (t383 * t585 + t384 * t451) * t467 + t523 * t365;
	t354 = t523 * t361 + t383 * t418 + t384 * t428;
	t352 = t512 * t548 + (t442 * t530 - t382 * t424 + (t403 * t421 - t411 * t417 - t442 * t598) * t425) * t385;
	t350 = t513 * t548 + (t428 * t530 - t379 * t424 + (-t403 * t418 - t404 * t417 - t428 * t598) * t425) * t385;
	t349 = t548 * t590 + (t511 * t553 + (t451 * t530 - t592 * t424 + (-t403 * t585 - t417 * t429 - t451 * t598) * t425) * t467) * t385;
	t1 = [t546 * t583 + (-t376 * t424 + t419 * t591) * t385, t352, t349, 0, t350, 0; t417 * t534 + (t598 * t369 + (-t417 * t353 - t358 * t376) * t370) * t366 + (t358 * t533 + (0.2e1 * t358 * t575 - (t359 * t385 * t564 + t548) * t545 - (t546 * t584 - t359 + (t359 - t515) * t385) * t544 - t503 * t569) * t366) * t419, -t504 * t534 + ((t423 * qJD(5) + t406 * t467 + t446 * t535) * t369 + t504 * t370 * t353 - ((t352 * t417 + t362 * t598 + t411 + (-t362 * t427 - t421) * t359) * t384 + (-t352 * t427 - t362 * t403 - t382 + (-t362 * t417 - t442) * t359) * t383) * t570) * t366 + (t419 * t533 + (-t569 + t532) * t366) * (t523 * t362 - t383 * t421 + t384 * t442), (t356 * t570 + t369 * t562) * t551 + (-t356 * t569 + (-t397 * t467 - t438 * t553) * t369 + (t356 * t547 + t370 * t562) * t353 - (t451 * t553 + t349 * t417 + t365 * t598 + t429 * t467 + (-t365 * t427 + t467 * t585) * t359) * t544 - (t585 * t553 - t349 * t427 - t365 * t403 - t592 * t467 + (-t365 * t417 - t451 * t467) * t359) * t545) * t366, 0, (t354 * t570 - t369 * t420) * t551 + (t354 * t532 + t377 * t369 + (-t420 * t353 - t354 * t376 - (t350 * t417 + t361 * t598 + t404 + (-t361 * t427 + t418) * t359) * t567 - (-t350 * t427 - t361 * t403 - t379 + (-t361 * t417 - t428) * t359) * t568) * t370) * t366, 0; (-t389 * t393 + t394 * t566) * t549 + ((t394 * qJD(6) - t379 * t471 - t473 * t592) * t389 + t394 * t531 + (-t393 * t364 - (-t393 * qJD(6) - t379 * t473 + t471 * t592) * t395 - t394 * t363) * t390) * t373, (-t389 * t407 + t408 * t566) * t549 + ((t408 * qJD(6) + t381 * t471 - t405 * t473) * t389 + t408 * t531 + (-t407 * t364 - (-t407 * qJD(6) + t381 * t473 + t405 * t471) * t395 - t408 * t363) * t390) * t373, (-t389 * t409 + t410 * t566) * t549 + (t410 * t531 - t525 * t389 * t473 + t498 * t556 + (-t525 * t395 * t471 - t410 * t363 - t409 * t364 - t498 * t555) * t390) * t373, 0, t514 * t419 * t550 + (t514 * t376 + ((-qJD(6) * t389 - 0.2e1 * t543) * t473 + (t363 * t473 + (t364 - t552) * t471) * t390) * t419) * t373, t550 + 0.2e1 * (t363 * t390 * t373 + (-t373 * t571 - t390 * t573) * t395) * t395;];
	JaD_rot = t1;
else
	JaD_rot=NaN(3,6);
end