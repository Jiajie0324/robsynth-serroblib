% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta2,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 05:18
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRPR6_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR6_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR6_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR6_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR6_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRPR6_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 05:17:51
% EndTime: 2019-03-09 05:18:11
% DurationCPUTime: 12.47s
% Computational Cost: add. (21692->685), mult. (52049->857), div. (0->0), fcn. (41140->18), ass. (0->316)
t304 = sin(pkin(10));
t306 = cos(pkin(10));
t311 = sin(qJ(3));
t454 = cos(qJ(3));
t256 = t304 * t454 + t311 * t306;
t248 = t256 * qJD(1);
t310 = sin(qJ(4));
t313 = cos(qJ(4));
t196 = -t313 * qJD(3) + t248 * t310;
t383 = qJD(3) * t310;
t198 = t248 * t313 + t383;
t303 = sin(pkin(11));
t305 = cos(pkin(11));
t141 = t196 * t305 + t303 * t198;
t309 = sin(qJ(6));
t345 = -t196 * t303 + t305 * t198;
t453 = cos(qJ(6));
t368 = qJD(6) * t453;
t379 = qJD(6) * t309;
t381 = qJD(4) * t310;
t329 = t256 * qJDD(1);
t371 = t454 * t306;
t335 = -t311 * t304 + t371;
t482 = t335 * qJD(1);
t485 = qJD(3) * t482;
t317 = t329 + t485;
t475 = -qJD(3) * qJD(4) - t317;
t132 = -t310 * qJDD(3) + t248 * t381 + t313 * t475;
t380 = qJD(4) * t313;
t349 = -t313 * qJDD(3) + t248 * t380;
t133 = t310 * t329 + (qJD(4) + t482) * t383 + t349;
t68 = -t132 * t303 + t305 * t133;
t69 = -t132 * t305 - t133 * t303;
t23 = t141 * t368 + t309 * t68 + t345 * t379 - t453 * t69;
t232 = qJD(4) - t482;
t226 = qJD(6) + t232;
t75 = t141 * t453 + t309 * t345;
t435 = t226 * t75;
t491 = -t23 + t435;
t179 = pkin(3) * t248 - pkin(8) * t482;
t439 = pkin(7) + qJ(2);
t270 = t439 * t306;
t261 = qJD(1) * t270;
t244 = t311 * t261;
t269 = t439 * t304;
t260 = qJD(1) * t269;
t186 = -t260 * t454 - t244;
t123 = t310 * t179 + t313 * t186;
t307 = -qJ(5) - pkin(8);
t364 = qJD(4) * t307;
t404 = t482 * t310;
t490 = qJ(5) * t404 + qJD(5) * t313 + t310 * t364 - t123;
t122 = t313 * t179 - t186 * t310;
t489 = -pkin(4) * t248 - qJD(5) * t310 - t122 + (qJ(5) * t482 + t364) * t313;
t378 = qJD(1) * qJD(2);
t457 = qJDD(1) * t439 + t378;
t221 = t457 * t304;
t222 = t457 * t306;
t369 = qJD(3) * t454;
t382 = qJD(3) * t311;
t121 = -t454 * t221 - t311 * t222 + t260 * t382 - t261 * t369;
t116 = -qJDD(3) * pkin(3) - t121;
t301 = pkin(10) + qJ(3);
t289 = sin(t301);
t291 = cos(t301);
t312 = sin(qJ(1));
t314 = cos(qJ(1));
t352 = g(1) * t314 + g(2) * t312;
t327 = -g(3) * t291 + t352 * t289;
t324 = -t116 + t327;
t488 = -pkin(8) * qJD(4) * t232 + t324;
t441 = t75 ^ 2;
t474 = -t309 * t141 + t345 * t453;
t442 = t474 ^ 2;
t487 = -t441 + t442;
t440 = t75 * t474;
t255 = t303 * t313 + t305 * t310;
t153 = t255 * t482;
t486 = -t255 * qJD(4) + t153;
t464 = -t303 * t310 + t305 * t313;
t247 = t464 * qJD(4);
t386 = -t464 * t482 + t247;
t285 = t306 * pkin(2) + pkin(1);
t268 = -qJD(1) * t285 + qJD(2);
t150 = -pkin(3) * t482 - pkin(8) * t248 + t268;
t187 = -t311 * t260 + t261 * t454;
t178 = qJD(3) * pkin(8) + t187;
t103 = t313 * t150 - t178 * t310;
t85 = -qJ(5) * t198 + t103;
t72 = pkin(4) * t232 + t85;
t104 = t150 * t310 + t178 * t313;
t86 = -qJ(5) * t196 + t104;
t79 = t303 * t86;
t42 = t305 * t72 - t79;
t473 = pkin(9) * t345;
t30 = pkin(5) * t232 + t42 - t473;
t432 = t305 * t86;
t43 = t303 * t72 + t432;
t480 = pkin(9) * t141;
t32 = t43 - t480;
t251 = t256 * qJD(3);
t376 = t304 * qJDD(1);
t348 = -qJDD(1) * t371 + t311 * t376;
t182 = qJD(1) * t251 + t348;
t176 = qJDD(4) + t182;
t423 = qJDD(1) * pkin(1);
t288 = qJDD(2) - t423;
t375 = t306 * qJDD(1);
t119 = -pkin(2) * t375 + t182 * pkin(3) - pkin(8) * t317 + t288;
t110 = t313 * t119;
t372 = t311 * t221 - t454 * t222 + t260 * t369;
t120 = -t261 * t382 - t372;
t115 = qJDD(3) * pkin(8) + t120;
t40 = -qJD(4) * t104 - t115 * t310 + t110;
t27 = pkin(4) * t176 + qJ(5) * t132 - qJD(5) * t198 + t40;
t39 = t313 * t115 + t310 * t119 + t150 * t380 - t178 * t381;
t29 = -qJ(5) * t133 - qJD(5) * t196 + t39;
t8 = t305 * t27 - t29 * t303;
t6 = pkin(5) * t176 - pkin(9) * t69 + t8;
t9 = t303 * t27 + t305 * t29;
t7 = -pkin(9) * t68 + t9;
t1 = t30 * t368 + t309 * t6 - t32 * t379 + t453 * t7;
t302 = qJ(4) + pkin(11);
t295 = qJ(6) + t302;
t282 = sin(t295);
t283 = cos(t295);
t399 = t291 * t312;
t200 = t282 * t314 - t283 * t399;
t398 = t291 * t314;
t202 = t282 * t312 + t283 * t398;
t444 = g(3) * t289;
t177 = -qJD(3) * pkin(3) - t186;
t134 = t196 * pkin(4) + qJD(5) + t177;
t73 = t141 * pkin(5) + t134;
t484 = g(1) * t202 - g(2) * t200 + t283 * t444 + t73 * t75 - t1;
t428 = -t303 * t490 + t305 * t489;
t427 = t303 * t489 + t305 * t490;
t24 = qJD(6) * t474 + t309 * t69 + t453 * t68;
t431 = t474 * t226;
t483 = -t24 + t431;
t199 = t282 * t399 + t283 * t314;
t11 = t309 * t30 + t32 * t453;
t2 = -qJD(6) * t11 - t309 * t7 + t453 * t6;
t201 = -t282 * t398 + t283 * t312;
t481 = -g(1) * t201 + g(2) * t199 + t282 * t444 - t474 * t73 + t2;
t430 = t255 * t379 - t309 * t486 - t368 * t464 - t386 * t453;
t185 = t255 * t453 + t309 * t464;
t429 = qJD(6) * t185 + t309 * t386 - t453 * t486;
t479 = -pkin(5) * t248 - pkin(9) * t386 + t428;
t478 = pkin(9) * t486 + t427;
t477 = t141 * t345;
t476 = -g(1) * t312 + g(2) * t314;
t339 = -t288 - t476;
t250 = t304 * t382 - t306 * t369;
t370 = t256 * t380;
t334 = -t250 * t310 + t370;
t347 = -t103 * t232 + t39;
t421 = t104 * t232;
t472 = t40 + t421;
t361 = t232 * t310;
t471 = t198 * t361;
t181 = -pkin(3) * t335 - pkin(8) * t256 - t285;
t193 = -t311 * t269 + t270 * t454;
t188 = t313 * t193;
t131 = t310 * t181 + t188;
t466 = -t454 * t269 - t311 * t270;
t388 = t313 * t314;
t393 = t310 * t312;
t233 = t291 * t393 + t388;
t389 = t312 * t313;
t392 = t310 * t314;
t235 = -t291 * t392 + t389;
t463 = -g(1) * t235 + g(2) * t233;
t461 = qJ(2) * qJDD(1);
t184 = t255 * t309 - t453 * t464;
t460 = t184 * t23 - t429 * t474;
t173 = qJDD(6) + t176;
t459 = t173 * t185 - t226 * t430;
t458 = -t176 * t255 - t232 * t386;
t325 = -t352 * t291 - t444;
t456 = t248 ^ 2;
t455 = pkin(5) * t68;
t452 = pkin(4) * t303;
t451 = pkin(4) * t313;
t273 = t314 * t285;
t446 = g(2) * t273;
t443 = t310 * pkin(4);
t340 = qJ(5) * t250 - qJD(5) * t256;
t151 = t335 * qJD(2) + qJD(3) * t466;
t180 = pkin(3) * t251 + pkin(8) * t250;
t362 = -t151 * t310 + t313 * t180;
t50 = pkin(4) * t251 + t340 * t313 + (-t188 + (qJ(5) * t256 - t181) * t310) * qJD(4) + t362;
t373 = t313 * t151 + t310 * t180 + t181 * t380;
t54 = -qJ(5) * t370 + (-qJD(4) * t193 + t340) * t310 + t373;
t21 = t303 * t50 + t305 * t54;
t271 = t307 * t310;
t272 = t307 * t313;
t194 = t305 * t271 + t272 * t303;
t160 = -pkin(9) * t255 + t194;
t195 = t303 * t271 - t305 * t272;
t161 = pkin(9) * t464 + t195;
t98 = t160 * t453 - t309 * t161;
t438 = qJD(6) * t98 + t309 * t479 + t453 * t478;
t99 = t309 * t160 + t161 * t453;
t437 = -qJD(6) * t99 - t309 * t478 + t453 * t479;
t47 = t305 * t85 - t79;
t401 = t256 * t310;
t105 = -qJ(5) * t401 + t131;
t130 = t313 * t181 - t193 * t310;
t400 = t256 * t313;
t90 = -pkin(4) * t335 - qJ(5) * t400 + t130;
t58 = t305 * t105 + t303 * t90;
t434 = t248 * t75;
t433 = t248 * t474;
t144 = pkin(4) * t404 + t187;
t426 = -t153 * pkin(5) - t144 + (pkin(5) * t255 + t443) * qJD(4);
t284 = pkin(4) * t305 + pkin(5);
t238 = t284 * t453 - t309 * t452;
t46 = -t303 * t85 - t432;
t34 = t46 + t480;
t35 = t47 - t473;
t425 = t238 * qJD(6) - t309 * t34 - t35 * t453;
t239 = t309 * t284 + t452 * t453;
t424 = -t239 * qJD(6) + t309 * t35 - t34 * t453;
t420 = t132 * t310;
t419 = t133 * t313;
t418 = t345 ^ 2;
t417 = t345 * t232;
t416 = t141 ^ 2;
t415 = t141 * t248;
t414 = t141 * t232;
t413 = t345 * t248;
t410 = t176 * t310;
t409 = t196 * t482;
t408 = t196 * t248;
t407 = t198 * t196;
t406 = t198 * t248;
t405 = t232 * t248;
t403 = t248 * t482;
t292 = cos(t302);
t397 = t292 * t312;
t396 = t292 * t314;
t128 = t310 * t133;
t165 = t313 * t176;
t387 = -t196 * t380 - t128;
t290 = sin(t302);
t266 = pkin(5) * t290 + t443;
t385 = t266 + t439;
t299 = t304 ^ 2;
t300 = t306 ^ 2;
t384 = t299 + t300;
t287 = pkin(3) + t451;
t267 = pkin(5) * t292 + t451;
t367 = t439 + t443;
t20 = -t303 * t54 + t305 * t50;
t57 = -t105 * t303 + t305 * t90;
t363 = t384 * qJD(1) ^ 2;
t360 = t232 * t313;
t359 = -t185 * t24 + t430 * t75;
t358 = 0.2e1 * t384;
t357 = t476 * t289;
t356 = -t184 * t173 - t226 * t429;
t355 = pkin(4) * t381 - t144;
t354 = -t141 * t386 - t255 * t68;
t353 = pkin(3) * t291 + pkin(8) * t289;
t350 = t176 * t464 + t232 * t486;
t155 = pkin(4) * t401 - t466;
t346 = t103 * t313 + t104 * t310;
t264 = pkin(3) + t267;
t298 = -pkin(9) + t307;
t344 = t264 * t291 - t289 * t298;
t342 = t287 * t291 - t289 * t307;
t338 = t165 + (-t381 + t404) * t232;
t164 = t464 * t256;
t44 = -pkin(5) * t335 - pkin(9) * t164 + t57;
t163 = t255 * t256;
t45 = -pkin(9) * t163 + t58;
t18 = -t309 * t45 + t44 * t453;
t19 = t309 * t44 + t45 * t453;
t112 = -t309 * t163 + t164 * t453;
t333 = -t250 * t313 - t256 * t381;
t332 = -pkin(8) * t176 + t177 * t232;
t265 = -qJDD(1) * t285 + qJDD(2);
t328 = t339 + t423;
t64 = pkin(4) * t133 + qJDD(5) + t116;
t323 = t358 * t378 - t352;
t321 = -t345 * t486 - t464 * t69;
t152 = qJD(2) * t256 + qJD(3) * t193;
t318 = t64 - t327;
t118 = pkin(4) * t334 + t152;
t242 = t482 ^ 2;
t236 = t291 * t388 + t393;
t234 = -t291 * t389 + t392;
t213 = -pkin(5) * t464 - t287;
t212 = t290 * t312 + t291 * t396;
t211 = -t290 * t398 + t397;
t210 = t290 * t314 - t291 * t397;
t209 = t290 * t399 + t396;
t117 = -t176 * t335 + t232 * t251;
t114 = pkin(4) * t198 + pkin(5) * t345;
t113 = pkin(5) * t163 + t155;
t111 = t163 * t453 + t164 * t309;
t108 = qJD(4) * t163 + t250 * t464;
t107 = -t247 * t256 + t250 * t255;
t63 = -qJD(4) * t131 + t362;
t62 = -t193 * t381 + t373;
t60 = -t107 * pkin(5) + t118;
t38 = qJD(6) * t112 - t107 * t453 - t309 * t108;
t37 = -t309 * t107 + t108 * t453 + t163 * t368 + t164 * t379;
t33 = t64 + t455;
t17 = pkin(9) * t107 + t21;
t14 = pkin(5) * t251 + pkin(9) * t108 + t20;
t10 = t30 * t453 - t309 * t32;
t4 = -qJD(6) * t19 + t14 * t453 - t309 * t17;
t3 = qJD(6) * t18 + t309 * t14 + t17 * t453;
t5 = [0, 0, 0, 0, 0, qJDD(1), -t476, t352, 0, 0, t299 * qJDD(1), 0.2e1 * t304 * t375, 0, t300 * qJDD(1), 0, 0, t328 * t306, -t328 * t304, t358 * t461 + t323, pkin(1) * t339 + (t384 * t461 + t323) * qJ(2), -t248 * t250 + t256 * t317, -t256 * t182 - t248 * t251 - t250 * t482 + t317 * t335, -qJD(3) * t250 + qJDD(3) * t256, -t182 * t335 - t251 * t482, -qJD(3) * t251 + qJDD(3) * t335, 0, -qJD(3) * t152 + qJDD(3) * t466 - t182 * t285 + t251 * t268 - t265 * t335 - t291 * t476, -t151 * qJD(3) - t193 * qJDD(3) - t268 * t250 + t265 * t256 - t285 * t317 + t357, t120 * t335 - t121 * t256 + t151 * t482 + t152 * t248 - t193 * t182 + t186 * t250 - t187 * t251 - t317 * t466 - t352, t120 * t193 + t187 * t151 + t121 * t466 - t186 * t152 - t265 * t285 - g(1) * (-t285 * t312 + t314 * t439) - g(2) * (t312 * t439 + t273) -t132 * t400 + t198 * t333 (t196 * t313 + t198 * t310) * t250 + (t420 - t419 + (t196 * t310 - t198 * t313) * qJD(4)) * t256, t132 * t335 + t165 * t256 + t198 * t251 + t232 * t333, t128 * t256 + t196 * t334, t133 * t335 - t176 * t401 - t196 * t251 - t232 * t334, t117, -g(1) * t234 - g(2) * t236 + t103 * t251 + t116 * t401 + t130 * t176 - t133 * t466 + t152 * t196 + t177 * t334 + t232 * t63 - t335 * t40, -g(1) * t233 - g(2) * t235 - t104 * t251 + t116 * t400 - t131 * t176 + t132 * t466 + t152 * t198 + t177 * t333 - t232 * t62 + t335 * t39, t130 * t132 - t131 * t133 - t196 * t62 - t198 * t63 + t346 * t250 + (-t310 * t39 - t313 * t40 + (t103 * t310 - t104 * t313) * qJD(4)) * t256 - t357, -t446 + t103 * t63 + t104 * t62 - t116 * t466 + t40 * t130 + t39 * t131 + t177 * t152 + (-g(1) * t439 - g(2) * t353) * t314 + (-g(1) * (-t285 - t353) - g(2) * t439) * t312, -t108 * t345 + t164 * t69, t107 * t345 + t108 * t141 - t163 * t69 - t164 * t68, -t108 * t232 + t164 * t176 + t251 * t345 - t335 * t69, -t107 * t141 + t163 * t68, t107 * t232 - t141 * t251 - t163 * t176 + t335 * t68, t117, -g(1) * t210 - g(2) * t212 - t107 * t134 + t118 * t141 + t155 * t68 + t163 * t64 + t176 * t57 + t20 * t232 + t251 * t42 - t335 * t8, -g(1) * t209 - g(2) * t211 - t108 * t134 + t118 * t345 + t155 * t69 + t164 * t64 - t176 * t58 - t21 * t232 - t251 * t43 + t335 * t9, t107 * t43 + t108 * t42 - t141 * t21 - t163 * t9 - t164 * t8 - t20 * t345 - t57 * t69 - t58 * t68 - t357, -t446 + t134 * t118 + t64 * t155 + t42 * t20 + t43 * t21 + t8 * t57 + t9 * t58 + (-g(1) * t367 - g(2) * t342) * t314 + (-g(1) * (-t285 - t342) - g(2) * t367) * t312, -t112 * t23 - t37 * t474, t111 * t23 - t112 * t24 + t37 * t75 - t38 * t474, t112 * t173 - t226 * t37 + t23 * t335 + t251 * t474, t111 * t24 + t38 * t75, -t111 * t173 - t226 * t38 + t24 * t335 - t251 * t75, -t173 * t335 + t226 * t251, -g(1) * t200 - g(2) * t202 + t10 * t251 + t111 * t33 + t113 * t24 + t173 * t18 - t2 * t335 + t226 * t4 + t38 * t73 + t60 * t75, -g(1) * t199 - g(2) * t201 + t1 * t335 - t11 * t251 + t112 * t33 - t113 * t23 - t173 * t19 - t226 * t3 - t37 * t73 + t474 * t60, -t1 * t111 + t10 * t37 - t11 * t38 - t112 * t2 + t18 * t23 - t19 * t24 - t3 * t75 - t4 * t474 - t357, -t446 + t1 * t19 + t10 * t4 + t11 * t3 + t33 * t113 + t2 * t18 + t73 * t60 + (-g(1) * t385 - g(2) * t344) * t314 + (-g(1) * (-t285 - t344) - g(2) * t385) * t312; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t375, t376, -t363, -qJ(2) * t363 - t339, 0, 0, 0, 0, 0, 0, 0.2e1 * t248 * qJD(3) + t348, t329 + 0.2e1 * t485, -t242 - t456, t186 * t248 - t187 * t482 + t265 + t476, 0, 0, 0, 0, 0, 0, t338 - t408, -t232 ^ 2 * t313 - t406 - t410 (t132 + t409) * t313 + t471 + t387, -t177 * t248 + t347 * t310 + t313 * t472 + t476, 0, 0, 0, 0, 0, 0, t350 - t415, -t413 + t458, t321 + t354, -t134 * t248 + t9 * t255 + t386 * t43 + t42 * t486 + t464 * t8 + t476, 0, 0, 0, 0, 0, 0, t356 - t434, -t433 - t459, t359 - t460, t1 * t185 - t10 * t429 - t11 * t430 - t184 * t2 - t248 * t73 + t476; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t403, -t242 + t456, t329, t403, -t348, qJDD(3), qJD(3) * t187 - t248 * t268 + t121 + t327, -t482 * t268 + (t186 + t244) * qJD(3) + t372 - t325, 0, 0, t198 * t360 - t420 (-t132 + t409) * t313 - t471 + t387, t232 * t360 - t406 + t410, t196 * t361 - t419, t338 + t408, -t405, -pkin(3) * t133 - t103 * t248 - t122 * t232 - t187 * t196 + t332 * t310 + t313 * t488, pkin(3) * t132 + t104 * t248 + t123 * t232 - t187 * t198 - t310 * t488 + t332 * t313, t122 * t198 + t123 * t196 + ((qJD(4) * t198 - t133) * pkin(8) + t347) * t313 + ((qJD(4) * t196 - t132) * pkin(8) - t472) * t310 + t325, -t103 * t122 - t104 * t123 - t177 * t187 + t324 * pkin(3) + (-qJD(4) * t346 - t40 * t310 + t39 * t313 + t325) * pkin(8), t255 * t69 + t345 * t386, -t321 + t354, -t413 - t458, -t141 * t486 - t464 * t68, t350 + t415, -t405, -t134 * t153 - t144 * t141 + t194 * t176 - t42 * t248 - t64 * t464 - t287 * t68 + t428 * t232 + t327 * t292 + (t134 * t255 + t141 * t443) * qJD(4), t134 * t386 - t176 * t195 - t232 * t427 + t248 * t43 + t255 * t64 - t287 * t69 - t290 * t327 + t345 * t355, -t141 * t427 - t194 * t69 - t195 * t68 - t8 * t255 - t345 * t428 - t386 * t42 + t43 * t486 + t464 * t9 + t325, -g(3) * t342 + t134 * t355 + t8 * t194 + t9 * t195 - t64 * t287 + t42 * t428 + t427 * t43 + t352 * (t287 * t289 + t291 * t307) -t185 * t23 - t430 * t474, t359 + t460, -t433 + t459, t184 * t24 + t429 * t75, t356 + t434, -t226 * t248, -t10 * t248 + t173 * t98 + t184 * t33 + t213 * t24 + t226 * t437 + t283 * t327 + t426 * t75 + t429 * t73, t11 * t248 - t173 * t99 + t185 * t33 - t213 * t23 - t226 * t438 - t282 * t327 + t426 * t474 - t430 * t73, -t1 * t184 + t10 * t430 - t11 * t429 - t185 * t2 + t23 * t98 - t24 * t99 - t437 * t474 - t438 * t75 + t325, -g(3) * t344 + t1 * t99 + t437 * t10 + t11 * t438 + t2 * t98 + t33 * t213 + t426 * t73 + t352 * (t264 * t289 + t291 * t298); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t407, -t196 ^ 2 + t198 ^ 2, t196 * t232 - t132, -t407, t198 * t232 + t310 * t475 - t349, t176, -t178 * t380 + t421 - t177 * t198 + t110 + (-qJD(4) * t150 - t115 + t444) * t310 + t463, g(1) * t236 - g(2) * t234 + t177 * t196 + t313 * t444 - t347, 0, 0, t477, -t416 + t418, t69 + t414, -t477, -t68 + t417, t176, t290 * t444 - g(1) * t211 + g(2) * t209 - t134 * t345 - t232 * t46 + (-t141 * t198 + t176 * t305) * pkin(4) + t8, t292 * t444 + g(1) * t212 - g(2) * t210 + t134 * t141 + t232 * t47 + (-t176 * t303 - t198 * t345) * pkin(4) - t9 (-t303 * t68 - t305 * t69) * pkin(4) + (t43 + t46) * t345 + (t47 - t42) * t141, -t42 * t46 - t43 * t47 + (-t134 * t198 + t9 * t303 + t8 * t305 + t310 * t444 + t463) * pkin(4), t440, t487, t491, -t440, t483, t173, -t114 * t75 + t238 * t173 + t226 * t424 + t481, -t114 * t474 - t239 * t173 - t226 * t425 + t484, t23 * t238 - t239 * t24 + (t11 - t424) * t474 + (-t10 - t425) * t75, t1 * t239 + t2 * t238 - t73 * t114 - g(1) * (-t266 * t398 + t267 * t312) - g(2) * (-t266 * t399 - t267 * t314) + t266 * t444 + t425 * t11 + t424 * t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t68 + t417, t69 - t414, -t416 - t418, t141 * t43 + t345 * t42 + t318, 0, 0, 0, 0, 0, 0, t24 + t431, -t23 - t435, -t441 - t442, t10 * t474 + t11 * t75 + t318 + t455; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t440, t487, t491, -t440, t483, t173, t11 * t226 + t481, t10 * t226 + t484, 0, 0;];
tau_reg  = t5;
