% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RPRRPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta2,theta5]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 22:53
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RPRRPR6_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR6_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR6_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR6_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR6_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRPR6_invdynJ_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 22:50:51
% EndTime: 2019-05-05 22:51:17
% DurationCPUTime: 14.22s
% Computational Cost: add. (115562->634), mult. (279934->937), div. (0->0), fcn. (218888->12), ass. (0->388)
t345 = cos(qJ(3));
t338 = cos(pkin(10));
t390 = qJD(1) * t338;
t336 = sin(pkin(10));
t342 = sin(qJ(3));
t397 = t336 * t342;
t321 = qJD(1) * t397 - t345 * t390;
t316 = qJD(4) + t321;
t435 = t316 ^ 2;
t396 = t338 * t342;
t358 = t336 * t345 + t396;
t323 = t358 * qJD(1);
t341 = sin(qJ(4));
t344 = cos(qJ(4));
t306 = -t344 * qJD(3) + t323 * t341;
t307 = qJD(3) * t341 + t323 * t344;
t335 = sin(pkin(11));
t337 = cos(pkin(11));
t273 = t337 * t306 + t307 * t335;
t437 = t273 ^ 2;
t227 = -t435 - t437;
t275 = -t306 * t335 + t307 * t337;
t236 = t275 * t273;
t380 = t338 * qJDD(1);
t381 = t336 * qJDD(1);
t360 = t342 * t381 - t345 * t380;
t385 = t323 * qJD(3);
t297 = -t360 - t385;
t288 = qJDD(4) - t297;
t443 = -t236 + t288;
t454 = t337 * t443;
t166 = t227 * t335 + t454;
t289 = pkin(3) * t321 - pkin(8) * t323;
t429 = sin(qJ(1));
t430 = cos(qJ(1));
t354 = g(1) * t430 + g(2) * t429;
t373 = pkin(2) * t338 + pkin(1);
t446 = pkin(7) + qJ(2);
t349 = (-t446 * qJDD(1) + (qJD(1) * t373 - (2 * qJD(2))) * qJD(1) + t354) * t336;
t426 = t338 * g(3);
t348 = t349 - t426;
t333 = t338 ^ 2;
t350 = qJDD(1) * qJ(2) - t354;
t432 = 2 * qJD(2);
t434 = qJD(1) ^ 2;
t363 = -g(3) * t336 + t338 * (-pkin(1) * t434 + t350) + t390 * t432;
t284 = -pkin(2) * t333 * t434 + pkin(7) * t380 + t363;
t393 = t345 * t284;
t433 = qJD(3) ^ 2;
t211 = -pkin(3) * t433 + qJDD(3) * pkin(8) - t321 * t289 + t342 * t348 + t393;
t362 = g(1) * t429 - t430 * g(2);
t355 = -qJDD(2) + t362;
t332 = t336 ^ 2;
t391 = t332 + t333;
t292 = t373 * qJDD(1) + (pkin(7) * t391 + qJ(2)) * t434 + t355;
t320 = t358 * qJDD(1);
t386 = t321 * qJD(3);
t299 = t320 - t386;
t220 = (-t299 + t386) * pkin(8) + (-t297 + t385) * pkin(3) - t292;
t164 = t341 * t211 - t344 * t220;
t356 = -t341 * qJDD(3) - t344 * t299;
t263 = -qJD(4) * t306 - t356;
t285 = t316 * t306;
t241 = t263 + t285;
t279 = t307 * t306;
t441 = -t279 + t288;
t135 = pkin(4) * t441 - qJ(5) * t241 - t164;
t165 = t344 * t211 + t341 * t220;
t281 = pkin(4) * t316 - qJ(5) * t307;
t357 = t344 * qJDD(3) - t341 * t299;
t352 = -qJD(4) * t307 + t357;
t436 = t306 ^ 2;
t140 = -pkin(4) * t436 + qJ(5) * t352 - t316 * t281 + t165;
t361 = -0.2e1 * qJD(5) * t275 + t337 * t135 - t335 * t140;
t456 = pkin(4) * t166 + t361;
t455 = t335 * t443;
t340 = sin(qJ(6));
t343 = cos(qJ(6));
t230 = t343 * t273 + t275 * t340;
t232 = -t273 * t340 + t275 * t343;
t181 = t232 * t230;
t287 = qJDD(6) + t288;
t445 = -t181 + t287;
t453 = t340 * t445;
t452 = t341 * t441;
t301 = t323 * t321;
t440 = -t301 + qJDD(3);
t451 = t342 * t440;
t450 = t343 * t445;
t449 = t344 * t441;
t448 = t345 * t440;
t389 = t434 * qJ(2);
t421 = qJDD(1) * pkin(1);
t317 = t355 + t389 + t421;
t447 = t389 * t391 - t317 - t421;
t217 = t337 * t263 + t335 * t352;
t368 = t263 * t335 - t337 * t352;
t155 = -t230 * qJD(6) + t343 * t217 - t340 * t368;
t313 = qJD(6) + t316;
t223 = t313 * t230;
t444 = -t223 + t155;
t259 = t316 * t273;
t442 = -t259 + t217;
t197 = t259 + t217;
t369 = t340 * t217 + t343 * t368;
t124 = (qJD(6) - t313) * t232 + t369;
t237 = (qJD(4) - t316) * t307 - t357;
t228 = t230 ^ 2;
t229 = t232 ^ 2;
t272 = t275 ^ 2;
t305 = t307 ^ 2;
t311 = t313 ^ 2;
t318 = t321 ^ 2;
t319 = t323 ^ 2;
t388 = qJD(5) * t273;
t269 = -0.2e1 * t388;
t392 = t335 * t135 + t337 * t140;
t91 = t269 + t392;
t58 = t335 * t91 + t337 * t361;
t431 = pkin(4) * t58;
t407 = t275 * t316;
t194 = t368 - t407;
t145 = -t194 * t335 - t197 * t337;
t428 = pkin(4) * t145;
t71 = pkin(5) * t443 - pkin(9) * t197 + t361;
t251 = pkin(5) * t316 - pkin(9) * t275;
t73 = -pkin(5) * t437 - pkin(9) * t368 - t316 * t251 + t91;
t43 = t340 * t73 - t343 * t71;
t44 = t340 * t71 + t343 * t73;
t25 = t340 * t44 - t343 * t43;
t425 = t25 * t335;
t424 = t25 * t337;
t423 = t341 * t58;
t422 = t344 * t58;
t244 = t342 * t284 - t345 * t348;
t210 = -qJDD(3) * pkin(3) - t433 * pkin(8) + t323 * t289 + t244;
t157 = -t352 * pkin(4) - t436 * qJ(5) + t307 * t281 + qJDD(5) + t210;
t110 = pkin(5) * t368 - pkin(9) * t437 + t275 * t251 + t157;
t420 = t110 * t340;
t419 = t110 * t343;
t418 = t157 * t335;
t417 = t157 * t337;
t171 = t181 + t287;
t416 = t171 * t340;
t415 = t171 * t343;
t245 = -g(3) * t396 + t342 * t349 + t393;
t199 = -t244 * t345 + t342 * t245;
t414 = t199 * t336;
t413 = t210 * t341;
t412 = t210 * t344;
t213 = t236 + t288;
t411 = t213 * t335;
t410 = t213 * t337;
t249 = t279 + t288;
t409 = t249 * t341;
t408 = t249 * t344;
t406 = t292 * t342;
t405 = t292 * t345;
t293 = qJDD(3) + t301;
t404 = t293 * t345;
t403 = t313 * t340;
t402 = t313 * t343;
t401 = t316 * t335;
t400 = t316 * t337;
t399 = t316 * t341;
t398 = t316 * t344;
t395 = t342 * t288;
t394 = t342 * t293;
t383 = qJD(4) + t316;
t379 = t345 * t181;
t378 = t345 * t236;
t377 = t345 * t279;
t376 = t342 * t181;
t375 = t342 * t236;
t374 = t342 * t279;
t372 = -pkin(3) * t345 - pkin(2);
t59 = -t335 * t361 + t337 * t91;
t26 = t340 * t43 + t343 * t44;
t113 = t164 * t341 + t344 * t165;
t200 = t244 * t342 + t345 * t245;
t367 = t336 * (t426 + ((-pkin(1) * qJD(1) + t432) * qJD(1) + t350) * t336) + t338 * t363;
t12 = t26 * t335 + t424;
t366 = pkin(4) * t12 + pkin(5) * t25;
t127 = t223 + t155;
t81 = -t124 * t340 - t127 * t343;
t83 = -t124 * t343 + t127 * t340;
t53 = t335 * t83 + t337 * t81;
t365 = pkin(4) * t53 + pkin(5) * t81;
t246 = -t272 - t435;
t178 = t246 * t337 - t411;
t364 = pkin(4) * t178 - t392;
t112 = -t164 * t344 + t165 * t341;
t177 = -t311 - t228;
t129 = t177 * t340 + t450;
t130 = t177 * t343 - t453;
t85 = t129 * t337 + t130 * t335;
t353 = pkin(4) * t85 + pkin(5) * t129 - t43;
t204 = -t229 - t311;
t148 = t204 * t343 - t416;
t149 = -t204 * t340 - t415;
t95 = t148 * t337 + t149 * t335;
t351 = pkin(4) * t95 + pkin(5) * t148 - t44;
t329 = t333 * qJDD(1);
t328 = t332 * qJDD(1);
t324 = t391 * t434;
t310 = -t319 + t433;
t309 = -t319 - t433;
t308 = t318 - t433;
t298 = t320 - 0.2e1 * t386;
t296 = t360 + 0.2e1 * t385;
t290 = -t433 - t318;
t286 = t345 * t288;
t283 = -t305 + t435;
t282 = -t435 + t436;
t278 = -t318 - t319;
t277 = t305 - t436;
t267 = -t305 - t435;
t266 = -t342 * t309 - t404;
t265 = t309 * t345 - t394;
t264 = -t435 - t436;
t258 = t305 + t436;
t257 = t342 * t320 - t345 * t360;
t256 = -t320 * t345 - t342 * t360;
t255 = -t272 + t435;
t254 = -t435 + t437;
t253 = t290 * t345 - t451;
t252 = t342 * t290 + t448;
t247 = (-t306 * t344 + t307 * t341) * t316;
t242 = t306 * t383 + t356;
t240 = t263 - t285;
t238 = -t307 * t383 + t357;
t235 = t272 - t437;
t234 = t263 * t344 - t307 * t399;
t233 = t306 * t398 - t341 * t352;
t226 = t282 * t344 - t409;
t225 = -t283 * t341 + t449;
t222 = -t229 + t311;
t221 = t228 - t311;
t209 = -t267 * t341 - t408;
t208 = t267 * t344 - t409;
t207 = (-t273 * t337 + t275 * t335) * t316;
t206 = (-t273 * t335 - t275 * t337) * t316;
t203 = t264 * t344 - t452;
t202 = t264 * t341 + t449;
t201 = -t272 - t437;
t193 = t368 + t407;
t192 = t217 * t337 - t275 * t401;
t191 = t217 * t335 + t275 * t400;
t190 = t273 * t400 + t335 * t368;
t189 = t273 * t401 - t337 * t368;
t188 = -t237 * t344 + t241 * t341;
t187 = t238 * t344 - t240 * t341;
t186 = -t237 * t341 - t241 * t344;
t185 = t254 * t337 - t411;
t184 = -t255 * t335 + t454;
t183 = t254 * t335 + t410;
t182 = t255 * t337 + t455;
t180 = t229 - t228;
t179 = -t246 * t335 - t410;
t176 = t209 * t345 - t342 * t242;
t175 = t342 * t209 + t242 * t345;
t174 = t203 * t345 - t342 * t238;
t173 = t342 * t203 + t238 * t345;
t169 = (-t230 * t343 + t232 * t340) * t313;
t168 = (-t230 * t340 - t232 * t343) * t313;
t167 = t227 * t337 - t455;
t162 = -pkin(8) * t208 + t412;
t161 = t188 * t345 - t342 * t258;
t160 = t342 * t188 + t258 * t345;
t159 = -pkin(8) * t202 + t413;
t158 = -t206 * t341 + t207 * t344;
t156 = -t228 - t229;
t154 = -qJD(6) * t232 - t369;
t153 = t221 * t343 - t416;
t152 = -t222 * t340 + t450;
t151 = t221 * t340 + t415;
t150 = t222 * t343 + t453;
t147 = -t194 * t337 + t197 * t335;
t146 = -t193 * t337 - t335 * t442;
t144 = -t193 * t335 + t337 * t442;
t143 = -pkin(3) * t208 + t165;
t142 = -t191 * t341 + t192 * t344;
t141 = -t189 * t341 + t190 * t344;
t139 = -pkin(3) * t202 + t164;
t137 = -t183 * t341 + t185 * t344;
t136 = -t182 * t341 + t184 * t344;
t132 = -t178 * t341 + t179 * t344;
t131 = t178 * t344 + t179 * t341;
t123 = (qJD(6) + t313) * t232 + t369;
t122 = t155 * t343 - t232 * t403;
t121 = t155 * t340 + t232 * t402;
t120 = -t154 * t340 + t230 * t402;
t119 = t154 * t343 + t230 * t403;
t118 = -qJ(5) * t178 + t417;
t117 = -t168 * t335 + t169 * t337;
t116 = t168 * t337 + t169 * t335;
t115 = -t166 * t341 + t167 * t344;
t114 = t166 * t344 + t167 * t341;
t111 = -qJ(5) * t166 + t418;
t109 = t132 * t345 + t342 * t442;
t108 = t342 * t132 - t345 * t442;
t105 = -pkin(4) * t442 + qJ(5) * t179 + t418;
t104 = t115 * t345 + t342 * t193;
t103 = t342 * t115 - t193 * t345;
t102 = -pkin(4) * t193 + qJ(5) * t167 - t417;
t101 = -pkin(8) * t186 - t112;
t100 = -t151 * t335 + t153 * t337;
t99 = -t150 * t335 + t152 * t337;
t98 = t151 * t337 + t153 * t335;
t97 = t150 * t337 + t152 * t335;
t96 = -t148 * t335 + t149 * t337;
t94 = -t145 * t341 + t147 * t344;
t93 = -t144 * t341 + t146 * t344;
t92 = t145 * t344 + t147 * t341;
t88 = t342 * t201 + t345 * t94;
t87 = -t201 * t345 + t342 * t94;
t86 = -t129 * t335 + t130 * t337;
t84 = -pkin(9) * t148 + t419;
t82 = -t123 * t343 - t340 * t444;
t80 = -t123 * t340 + t343 * t444;
t79 = -t121 * t335 + t122 * t337;
t78 = -t119 * t335 + t120 * t337;
t77 = t121 * t337 + t122 * t335;
t76 = t119 * t337 + t120 * t335;
t75 = -t116 * t341 + t117 * t344;
t74 = -pkin(9) * t129 + t420;
t72 = -pkin(3) * t92 - t428;
t69 = -pkin(5) * t444 + pkin(9) * t149 + t420;
t68 = t100 * t344 - t341 * t98;
t67 = -t341 * t97 + t344 * t99;
t66 = -pkin(5) * t123 + pkin(9) * t130 - t419;
t65 = -pkin(3) * t131 + t269 - t364;
t64 = -t341 * t95 + t344 * t96;
t63 = t341 * t96 + t344 * t95;
t62 = -pkin(8) * t131 - t105 * t341 + t118 * t344;
t61 = -pkin(3) * t114 - t456;
t60 = -pkin(8) * t114 - t102 * t341 + t111 * t344;
t57 = -t341 * t85 + t344 * t86;
t56 = t341 * t86 + t344 * t85;
t55 = -t335 * t81 + t337 * t83;
t54 = -t335 * t80 + t337 * t82;
t52 = t335 * t82 + t337 * t80;
t51 = -t341 * t77 + t344 * t79;
t50 = -t341 * t76 + t344 * t78;
t49 = t342 * t444 + t345 * t64;
t48 = t342 * t64 - t345 * t444;
t47 = -pkin(4) * t157 + qJ(5) * t59;
t46 = -qJ(5) * t145 - t58;
t45 = -pkin(4) * t201 + qJ(5) * t147 + t59;
t41 = t342 * t123 + t345 * t57;
t40 = -t123 * t345 + t342 * t57;
t39 = -qJ(5) * t95 - t335 * t69 + t337 * t84;
t38 = -qJ(5) * t85 - t335 * t66 + t337 * t74;
t37 = t344 * t59 - t423;
t36 = t341 * t59 + t422;
t35 = -pkin(4) * t444 + qJ(5) * t96 + t335 * t84 + t337 * t69;
t34 = t342 * t157 + t345 * t37;
t33 = -t157 * t345 + t342 * t37;
t32 = -t341 * t53 + t344 * t55;
t31 = -t341 * t52 + t344 * t54;
t30 = t341 * t55 + t344 * t53;
t29 = -pkin(4) * t123 + qJ(5) * t86 + t335 * t74 + t337 * t66;
t28 = t342 * t156 + t32 * t345;
t27 = -t156 * t345 + t342 * t32;
t24 = -pkin(3) * t63 - t351;
t23 = -pkin(8) * t92 - t341 * t45 + t344 * t46;
t22 = -pkin(5) * t110 + pkin(9) * t26;
t21 = -pkin(3) * t36 - t431;
t20 = -pkin(3) * t56 - t353;
t19 = -pkin(9) * t81 - t25;
t18 = -pkin(5) * t156 + pkin(9) * t83 + t26;
t17 = -pkin(3) * t30 - t365;
t16 = -pkin(8) * t36 - qJ(5) * t422 - t341 * t47;
t15 = -pkin(8) * t63 - t341 * t35 + t344 * t39;
t14 = -pkin(8) * t56 - t29 * t341 + t344 * t38;
t13 = t26 * t337 - t425;
t11 = -qJ(5) * t53 - t18 * t335 + t19 * t337;
t10 = -pkin(4) * t156 + qJ(5) * t55 + t18 * t337 + t19 * t335;
t9 = -t12 * t341 + t13 * t344;
t8 = t12 * t344 + t13 * t341;
t7 = -pkin(9) * t424 - qJ(5) * t12 - t22 * t335;
t6 = t342 * t110 + t345 * t9;
t5 = -t110 * t345 + t342 * t9;
t4 = -pkin(4) * t110 - pkin(9) * t425 + qJ(5) * t13 + t22 * t337;
t3 = -pkin(8) * t30 - t10 * t341 + t11 * t344;
t2 = -pkin(3) * t8 - t366;
t1 = -pkin(8) * t8 - t341 * t4 + t344 * t7;
t42 = [0, 0, 0, 0, 0, qJDD(1), t362, t354, 0, 0, t328, 0.2e1 * t336 * t380, 0, t329, 0, 0, -t447 * t338, t447 * t336, pkin(1) * t324 + qJ(2) * (t329 + t328) + t367, pkin(1) * t317 + qJ(2) * t367, t336 * (t299 * t345 - t342 * t385) + t338 * (t342 * t299 + t345 * t385), t336 * (-t296 * t345 - t342 * t298) + t338 * (-t342 * t296 + t298 * t345), t336 * (-t342 * t310 + t448) + t338 * (t310 * t345 + t451), t336 * (-t342 * t297 + t345 * t386) + t338 * (t297 * t345 + t342 * t386), t336 * (t308 * t345 - t394) + t338 * (t342 * t308 + t404), (t336 * (-t321 * t345 + t323 * t342) + t338 * (-t321 * t342 - t323 * t345)) * qJD(3), t336 * (-pkin(7) * t252 - t406) + t338 * (-pkin(2) * t296 + pkin(7) * t253 + t405) - pkin(1) * t296 + qJ(2) * (-t252 * t336 + t253 * t338), t336 * (-pkin(7) * t265 - t405) + t338 * (-pkin(2) * t298 + pkin(7) * t266 - t406) - pkin(1) * t298 + qJ(2) * (-t265 * t336 + t266 * t338), t336 * (-pkin(7) * t256 - t199) + t338 * (-pkin(2) * t278 + pkin(7) * t257 + t200) - pkin(1) * t278 + qJ(2) * (-t256 * t336 + t257 * t338), -pkin(7) * t414 + t338 * (pkin(2) * t292 + pkin(7) * t200) + pkin(1) * t292 + qJ(2) * (t200 * t338 - t414), t336 * (t234 * t345 + t374) + t338 * (t342 * t234 - t377), t336 * (t187 * t345 + t342 * t277) + t338 * (t342 * t187 - t277 * t345), t336 * (t225 * t345 + t342 * t241) + t338 * (t342 * t225 - t241 * t345), t336 * (t233 * t345 - t374) + t338 * (t342 * t233 + t377), t336 * (t226 * t345 - t342 * t237) + t338 * (t342 * t226 + t237 * t345), t336 * (t247 * t345 + t395) + t338 * (t247 * t342 - t286), t336 * (-pkin(7) * t173 - t342 * t139 + t159 * t345) + t338 * (-pkin(2) * t202 + pkin(7) * t174 + t139 * t345 + t342 * t159) - pkin(1) * t202 + qJ(2) * (-t173 * t336 + t174 * t338), t336 * (-pkin(7) * t175 - t342 * t143 + t162 * t345) + t338 * (-pkin(2) * t208 + pkin(7) * t176 + t143 * t345 + t342 * t162) - pkin(1) * t208 + qJ(2) * (-t175 * t336 + t176 * t338), t336 * (-pkin(7) * t160 + t101 * t345) + t338 * (pkin(7) * t161 + t342 * t101) + qJ(2) * (-t160 * t336 + t161 * t338) + (pkin(3) * t397 + t338 * t372 - pkin(1)) * t186, (t336 * (pkin(3) * t342 - pkin(8) * t345) + t338 * (-pkin(8) * t342 + t372) - pkin(1)) * t112 + t446 * (-(t342 * t113 - t210 * t345) * t336 + (t113 * t345 + t342 * t210) * t338), t336 * (t142 * t345 + t375) + t338 * (t342 * t142 - t378), t336 * (t342 * t235 + t345 * t93) + t338 * (-t235 * t345 + t342 * t93), t336 * (t136 * t345 + t342 * t197) + t338 * (t342 * t136 - t197 * t345), t336 * (t141 * t345 - t375) + t338 * (t342 * t141 + t378), t336 * (t137 * t345 - t342 * t194) + t338 * (t342 * t137 + t194 * t345), t336 * (t158 * t345 + t395) + t338 * (t158 * t342 - t286), t336 * (-pkin(7) * t103 - t342 * t61 + t345 * t60) + t338 * (-pkin(2) * t114 + pkin(7) * t104 + t342 * t60 + t345 * t61) - pkin(1) * t114 + qJ(2) * (-t103 * t336 + t104 * t338), t336 * (-pkin(7) * t108 - t342 * t65 + t345 * t62) + t338 * (-pkin(2) * t131 + pkin(7) * t109 + t342 * t62 + t345 * t65) - pkin(1) * t131 + qJ(2) * (-t108 * t336 + t109 * t338), t336 * (-pkin(7) * t87 + t23 * t345 - t342 * t72) + t338 * (-pkin(2) * t92 + pkin(7) * t88 + t342 * t23 + t345 * t72) - pkin(1) * t92 + qJ(2) * (-t336 * t87 + t338 * t88), t336 * (-pkin(7) * t33 + t16 * t345 - t342 * t21) + t338 * (-pkin(2) * t36 + pkin(7) * t34 + t342 * t16 + t21 * t345) - pkin(1) * t36 + qJ(2) * (-t33 * t336 + t338 * t34), t336 * (t345 * t51 + t376) + t338 * (t342 * t51 - t379), t336 * (t342 * t180 + t31 * t345) + t338 * (-t180 * t345 + t342 * t31), t336 * (t342 * t127 + t345 * t67) + t338 * (-t127 * t345 + t342 * t67), t336 * (t345 * t50 - t376) + t338 * (t342 * t50 + t379), t336 * (-t342 * t124 + t345 * t68) + t338 * (t124 * t345 + t342 * t68), t336 * (t342 * t287 + t345 * t75) + t338 * (-t287 * t345 + t342 * t75), t336 * (-pkin(7) * t40 + t14 * t345 - t342 * t20) + t338 * (-pkin(2) * t56 + pkin(7) * t41 + t342 * t14 + t20 * t345) - pkin(1) * t56 + qJ(2) * (-t336 * t40 + t338 * t41), t336 * (-pkin(7) * t48 + t15 * t345 - t342 * t24) + t338 * (-pkin(2) * t63 + pkin(7) * t49 + t342 * t15 + t24 * t345) - pkin(1) * t63 + qJ(2) * (-t336 * t48 + t338 * t49), t336 * (-pkin(7) * t27 - t342 * t17 + t3 * t345) + t338 * (-pkin(2) * t30 + pkin(7) * t28 + t17 * t345 + t342 * t3) - pkin(1) * t30 + qJ(2) * (-t27 * t336 + t28 * t338), t336 * (-pkin(7) * t5 + t1 * t345 - t342 * t2) + t338 * (-pkin(2) * t8 + pkin(7) * t6 + t342 * t1 + t2 * t345) - pkin(1) * t8 + qJ(2) * (-t336 * t5 + t338 * t6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t380, t381, -t324, -t317, 0, 0, 0, 0, 0, 0, t296, t298, t278, -t292, 0, 0, 0, 0, 0, 0, t202, t208, t186, t112, 0, 0, 0, 0, 0, 0, t114, t131, t92, t36, 0, 0, 0, 0, 0, 0, t56, t63, t30, t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t301, t319 - t318, t320, -t301, -t360, qJDD(3), -t244, -t245, 0, 0, t263 * t341 + t307 * t398, t238 * t341 + t240 * t344, t283 * t344 + t452, t306 * t399 + t344 * t352, t282 * t341 + t408, (-t306 * t341 - t307 * t344) * t316, pkin(3) * t238 + pkin(8) * t203 - t412, pkin(3) * t242 + pkin(8) * t209 + t413, pkin(3) * t258 + pkin(8) * t188 + t113, -pkin(3) * t210 + pkin(8) * t113, t191 * t344 + t192 * t341, t144 * t344 + t146 * t341, t182 * t344 + t184 * t341, t189 * t344 + t190 * t341, t183 * t344 + t185 * t341, t206 * t344 + t207 * t341, -pkin(3) * t193 + pkin(8) * t115 + t102 * t344 + t111 * t341, -pkin(3) * t442 + pkin(8) * t132 + t105 * t344 + t118 * t341, -pkin(3) * t201 + pkin(8) * t94 + t341 * t46 + t344 * t45, -pkin(3) * t157 + pkin(8) * t37 - qJ(5) * t423 + t344 * t47, t341 * t79 + t344 * t77, t341 * t54 + t344 * t52, t341 * t99 + t344 * t97, t341 * t78 + t344 * t76, t100 * t341 + t344 * t98, t116 * t344 + t117 * t341, -pkin(3) * t123 + pkin(8) * t57 + t29 * t344 + t341 * t38, -pkin(3) * t444 + pkin(8) * t64 + t341 * t39 + t344 * t35, -pkin(3) * t156 + pkin(8) * t32 + t10 * t344 + t11 * t341, -pkin(3) * t110 + pkin(8) * t9 + t341 * t7 + t344 * t4; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t279, t277, t241, -t279, -t237, t288, -t164, -t165, 0, 0, t236, t235, t197, -t236, -t194, t288, t456, t364 + 0.2e1 * t388, t428, t431, t181, t180, t127, -t181, -t124, t287, t353, t351, t365, t366; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t193, t442, t201, t157, 0, 0, 0, 0, 0, 0, t123, t444, t156, t110; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t181, t180, t127, -t181, -t124, t287, -t43, -t44, 0, 0;];
tauJ_reg  = t42;
