% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RPRRPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta2,theta5]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 05:18
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RPRRPR6_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR6_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR6_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRPR6_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 05:17:53
% EndTime: 2019-03-09 05:18:07
% DurationCPUTime: 8.06s
% Computational Cost: add. (18081->529), mult. (46525->701), div. (0->0), fcn. (36592->10), ass. (0->241)
t261 = cos(pkin(10));
t364 = cos(qJ(3));
t299 = qJD(1) * t364;
t259 = sin(pkin(10));
t264 = sin(qJ(3));
t313 = t264 * t259;
t223 = qJD(1) * t313 - t261 * t299;
t312 = t264 * t261;
t234 = t259 * t364 + t312;
t226 = t234 * qJD(1);
t172 = pkin(3) * t226 + pkin(8) * t223;
t263 = sin(qJ(4));
t265 = cos(qJ(4));
t357 = pkin(7) + qJ(2);
t241 = t357 * t259;
t238 = qJD(1) * t241;
t242 = t357 * t261;
t239 = qJD(1) * t242;
t372 = -t238 * t364 - t239 * t264;
t114 = t172 * t263 + t265 * t372;
t356 = -qJ(5) - pkin(8);
t295 = qJD(4) * t356;
t323 = t223 * t263;
t392 = -qJ(5) * t323 + t265 * qJD(5) + t263 * t295 - t114;
t113 = t172 * t265 - t263 * t372;
t391 = -pkin(4) * t226 - t263 * qJD(5) - t113 + (-qJ(5) * t223 + t295) * t265;
t190 = -qJD(3) * t265 + t226 * t263;
t192 = qJD(3) * t263 + t226 * t265;
t258 = sin(pkin(11));
t260 = cos(pkin(11));
t128 = t190 * t260 + t192 * t258;
t262 = sin(qJ(6));
t283 = -t190 * t258 + t192 * t260;
t363 = cos(qJ(6));
t297 = qJD(6) * t363;
t305 = qJD(6) * t262;
t307 = qJD(4) * t263;
t278 = t261 * t364 - t313;
t369 = t278 * qJD(1);
t270 = qJD(3) * t369;
t380 = qJD(3) * qJD(4) + t270;
t139 = t226 * t307 - t265 * t380;
t306 = qJD(4) * t265;
t140 = t226 * t306 + t263 * t380;
t85 = -t139 * t258 + t140 * t260;
t86 = -t139 * t260 - t140 * t258;
t23 = t128 * t297 + t262 * t85 + t283 * t305 - t363 * t86;
t214 = qJD(4) + t223;
t208 = qJD(6) + t214;
t68 = t128 * t363 + t262 * t283;
t352 = t208 * t68;
t390 = -t23 + t352;
t359 = t68 ^ 2;
t379 = -t128 * t262 + t283 * t363;
t360 = t379 ^ 2;
t389 = -t359 + t360;
t358 = t68 * t379;
t233 = t258 * t265 + t260 * t263;
t147 = t233 * t223;
t373 = qJD(4) * t233 + t147;
t370 = -t258 * t263 + t260 * t265;
t225 = t370 * qJD(4);
t388 = -t223 * t370 - t225;
t378 = pkin(9) * t283;
t252 = -pkin(2) * t261 - pkin(1);
t240 = qJD(1) * t252 + qJD(2);
t144 = pkin(3) * t223 - pkin(8) * t226 + t240;
t179 = -t238 * t264 + t239 * t364;
t171 = qJD(3) * pkin(8) + t179;
t103 = t144 * t265 - t171 * t263;
t79 = -qJ(5) * t192 + t103;
t65 = pkin(4) * t214 + t79;
t104 = t144 * t263 + t171 * t265;
t80 = -qJ(5) * t190 + t104;
t73 = t258 * t80;
t39 = t260 * t65 - t73;
t25 = pkin(5) * t214 - t378 + t39;
t384 = pkin(9) * t128;
t350 = t260 * t80;
t40 = t258 * t65 + t350;
t27 = t40 - t384;
t229 = t234 * qJD(3);
t209 = qJD(1) * t229;
t271 = t278 * qJD(2);
t132 = qJD(1) * t271 + qJD(3) * t372;
t158 = t209 * pkin(3) - pkin(8) * t270;
t59 = -qJD(4) * t104 - t263 * t132 + t158 * t265;
t32 = t209 * pkin(4) + t139 * qJ(5) - t192 * qJD(5) + t59;
t58 = t132 * t265 + t144 * t306 + t158 * t263 - t171 * t307;
t35 = -qJ(5) * t140 - qJD(5) * t190 + t58;
t12 = -t258 * t35 + t260 * t32;
t6 = pkin(5) * t209 - pkin(9) * t86 + t12;
t13 = t258 * t32 + t260 * t35;
t7 = -pkin(9) * t85 + t13;
t269 = -t25 * t297 - t262 * t6 + t27 * t305 - t363 * t7;
t170 = -qJD(3) * pkin(3) - t372;
t121 = pkin(4) * t190 + qJD(5) + t170;
t66 = pkin(5) * t128 + t121;
t387 = t66 * t68 + t269;
t343 = -t258 * t392 + t260 * t391;
t342 = t258 * t391 + t260 * t392;
t24 = qJD(6) * t379 + t262 * t86 + t363 * t85;
t349 = t379 * t208;
t386 = -t24 + t349;
t9 = t25 * t262 + t27 * t363;
t2 = -qJD(6) * t9 - t262 * t7 + t363 * t6;
t385 = -t379 * t66 + t2;
t345 = t233 * t305 + t262 * t373 - t297 * t370 + t363 * t388;
t177 = t233 * t363 + t262 * t370;
t344 = t177 * qJD(6) - t262 * t388 + t363 * t373;
t383 = pkin(5) * t226 - pkin(9) * t388 - t343;
t382 = -pkin(9) * t373 + t342;
t381 = t128 * t283;
t298 = qJD(3) * t364;
t308 = qJD(3) * t264;
t228 = t259 * t308 - t261 * t298;
t300 = t234 * t306;
t277 = -t228 * t263 + t300;
t285 = -t103 * t214 + t58;
t377 = t104 * t214 + t59;
t292 = t214 * t263;
t376 = t192 * t292;
t174 = -pkin(3) * t278 - pkin(8) * t234 + t252;
t187 = -t241 * t264 + t242 * t364;
t182 = t265 * t187;
t119 = t174 * t263 + t182;
t371 = -t241 * t364 - t242 * t264;
t176 = t233 * t262 - t363 * t370;
t368 = t176 * t23 - t344 * t379;
t367 = t177 * t209 - t208 * t345;
t366 = -t233 * t209 + t214 * t388;
t365 = t226 ^ 2;
t362 = pkin(4) * t258;
t361 = t263 * pkin(4);
t243 = t356 * t263;
t244 = t356 * t265;
t188 = t243 * t260 + t244 * t258;
t156 = -pkin(9) * t233 + t188;
t189 = t243 * t258 - t244 * t260;
t157 = pkin(9) * t370 + t189;
t99 = t156 * t262 + t157 * t363;
t355 = t99 * qJD(6) + t262 * t382 + t363 * t383;
t98 = t156 * t363 - t157 * t262;
t354 = -t98 * qJD(6) + t262 * t383 - t363 * t382;
t282 = qJ(5) * t228 - qJD(5) * t234;
t145 = qJD(3) * t371 + t271;
t173 = pkin(3) * t229 + pkin(8) * t228;
t293 = -t263 * t145 + t173 * t265;
t47 = t229 * pkin(4) + t282 * t265 + (-t182 + (qJ(5) * t234 - t174) * t263) * qJD(4) + t293;
t302 = t145 * t265 + t173 * t263 + t174 * t306;
t51 = -qJ(5) * t300 + (-qJD(4) * t187 + t282) * t263 + t302;
t21 = t258 * t47 + t260 * t51;
t44 = t260 * t79 - t73;
t319 = t234 * t263;
t105 = -qJ(5) * t319 + t119;
t118 = t174 * t265 - t187 * t263;
t318 = t234 * t265;
t90 = -pkin(4) * t278 - qJ(5) * t318 + t118;
t56 = t105 * t260 + t258 * t90;
t351 = t226 * t68;
t348 = t379 * t226;
t251 = pkin(4) * t260 + pkin(5);
t217 = t251 * t262 + t362 * t363;
t43 = -t258 * t79 - t350;
t28 = t43 + t384;
t29 = t44 - t378;
t347 = qJD(6) * t217 - t262 * t29 + t28 * t363;
t216 = t251 * t363 - t262 * t362;
t346 = -qJD(6) * t216 + t262 * t28 + t29 * t363;
t134 = -pkin(4) * t323 + t179;
t341 = t147 * pkin(5) - t134 + (pkin(5) * t233 + t361) * qJD(4);
t338 = t283 ^ 2;
t337 = t283 * t214;
t336 = t128 ^ 2;
t335 = t128 * t226;
t334 = t128 * t214;
t333 = t283 * t226;
t304 = qJD(1) * qJD(2);
t133 = qJD(2) * t259 * t299 - t238 * t308 + t239 * t298 + t304 * t312;
t332 = t133 * t371;
t331 = t139 * t263;
t330 = t140 * t265;
t328 = t190 * t223;
t327 = t190 * t226;
t326 = t192 * t190;
t325 = t192 * t226;
t180 = t209 * t278;
t324 = t214 * t226;
t322 = t226 * t223;
t137 = t263 * t140;
t315 = t263 * t209;
t196 = t265 * t209;
t311 = -t190 * t306 - t137;
t309 = t259 ^ 2 + t261 ^ 2;
t254 = -pkin(4) * t265 - pkin(3);
t20 = -t258 * t51 + t260 * t47;
t55 = -t105 * t258 + t260 * t90;
t294 = t309 * qJD(1) ^ 2;
t291 = t214 * t265;
t290 = -t177 * t24 + t345 * t68;
t289 = -t176 * t209 - t208 * t344;
t288 = pkin(4) * t307 - t134;
t287 = t128 * t388 - t233 * t85;
t286 = t209 * t370 - t214 * t373;
t149 = pkin(4) * t319 - t371;
t284 = t103 * t265 + t104 * t263;
t281 = 0.2e1 * t309 * t304;
t280 = t196 + (-t307 - t323) * t214;
t161 = t370 * t234;
t41 = -pkin(5) * t278 - pkin(9) * t161 + t55;
t160 = t233 * t234;
t42 = -pkin(9) * t160 + t56;
t18 = -t262 * t42 + t363 * t41;
t19 = t262 * t41 + t363 * t42;
t109 = -t160 * t262 + t161 * t363;
t276 = -t228 * t265 - t234 * t307;
t89 = pkin(4) * t140 + t133;
t275 = -pkin(8) * t209 + t170 * t214;
t54 = pkin(5) * t85 + t89;
t267 = t283 * t373 - t370 * t86;
t146 = qJD(2) * t234 + qJD(3) * t187;
t112 = pkin(4) * t277 + t146;
t220 = t223 ^ 2;
t197 = -pkin(5) * t370 + t254;
t120 = t214 * t229 - t180;
t111 = pkin(4) * t192 + pkin(5) * t283;
t110 = pkin(5) * t160 + t149;
t108 = t160 * t363 + t161 * t262;
t107 = qJD(4) * t160 + t228 * t370;
t106 = -t225 * t234 + t228 * t233;
t62 = -qJD(4) * t119 + t293;
t61 = -t187 * t307 + t302;
t60 = -t106 * pkin(5) + t112;
t37 = qJD(6) * t109 - t106 * t363 - t262 * t107;
t36 = -t106 * t262 + t107 * t363 + t160 * t297 + t161 * t305;
t17 = pkin(9) * t106 + t21;
t14 = pkin(5) * t229 + pkin(9) * t107 + t20;
t8 = t25 * t363 - t262 * t27;
t4 = -qJD(6) * t19 + t14 * t363 - t17 * t262;
t3 = qJD(6) * t18 + t14 * t262 + t17 * t363;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t281, qJ(2) * t281, -t226 * t228 + t234 * t270, -t234 * t209 + t228 * t223 - t226 * t229 + t270 * t278, -t228 * qJD(3), t223 * t229 - t180, -t229 * qJD(3), 0, -qJD(3) * t146 + t209 * t252 + t229 * t240, -t145 * qJD(3) - t240 * t228 + t252 * t270, t132 * t278 + t133 * t234 - t145 * t223 + t146 * t226 - t179 * t229 - t187 * t209 + t228 * t372 - t270 * t371, t132 * t187 + t145 * t179 - t146 * t372 - t332, -t139 * t318 + t192 * t276 (t190 * t265 + t192 * t263) * t228 + (t331 - t330 + (t190 * t263 - t192 * t265) * qJD(4)) * t234, t139 * t278 + t192 * t229 + t196 * t234 + t214 * t276, t137 * t234 + t190 * t277, t140 * t278 - t190 * t229 - t214 * t277 - t234 * t315, t120, t103 * t229 + t118 * t209 + t133 * t319 - t140 * t371 + t146 * t190 + t170 * t277 + t62 * t214 - t278 * t59, -t104 * t229 - t119 * t209 + t133 * t318 + t139 * t371 + t146 * t192 + t170 * t276 - t61 * t214 + t278 * t58, t118 * t139 - t119 * t140 - t61 * t190 - t62 * t192 + t284 * t228 + (-t58 * t263 - t59 * t265 + (t103 * t263 - t104 * t265) * qJD(4)) * t234, t103 * t62 + t104 * t61 + t118 * t59 + t119 * t58 + t146 * t170 - t332, -t107 * t283 + t161 * t86, t106 * t283 + t107 * t128 - t160 * t86 - t161 * t85, -t107 * t214 + t161 * t209 + t229 * t283 - t278 * t86, -t106 * t128 + t160 * t85, t106 * t214 - t128 * t229 - t160 * t209 + t278 * t85, t120, -t106 * t121 + t112 * t128 - t12 * t278 + t149 * t85 + t160 * t89 + t20 * t214 + t209 * t55 + t229 * t39, -t107 * t121 + t112 * t283 + t13 * t278 + t149 * t86 + t161 * t89 - t209 * t56 - t21 * t214 - t229 * t40, t106 * t40 + t107 * t39 - t12 * t161 - t128 * t21 - t13 * t160 - t20 * t283 - t55 * t86 - t56 * t85, t112 * t121 + t12 * t55 + t13 * t56 + t149 * t89 + t20 * t39 + t21 * t40, -t109 * t23 - t36 * t379, t108 * t23 - t109 * t24 + t36 * t68 - t37 * t379, t109 * t209 - t208 * t36 + t229 * t379 + t23 * t278, t108 * t24 + t37 * t68, -t108 * t209 - t208 * t37 - t229 * t68 + t24 * t278, t208 * t229 - t180, t108 * t54 + t110 * t24 + t18 * t209 - t2 * t278 + t208 * t4 + t229 * t8 + t37 * t66 + t60 * t68, t109 * t54 - t110 * t23 - t19 * t209 - t208 * t3 - t229 * t9 - t269 * t278 - t36 * t66 + t379 * t60, t108 * t269 - t109 * t2 + t18 * t23 - t19 * t24 - t3 * t68 + t36 * t8 - t37 * t9 - t379 * t4, t110 * t54 + t18 * t2 - t19 * t269 + t3 * t9 + t4 * t8 + t60 * t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t294, -qJ(2) * t294, 0, 0, 0, 0, 0, 0, 0.2e1 * t226 * qJD(3) (-t223 + t369) * qJD(3), -t220 - t365, t179 * t223 + t226 * t372, 0, 0, 0, 0, 0, 0, t280 - t327, -t214 ^ 2 * t265 - t315 - t325 (t139 - t328) * t265 + t376 + t311, -t170 * t226 + t263 * t285 + t265 * t377, 0, 0, 0, 0, 0, 0, t286 - t335, -t333 + t366, t267 + t287, t12 * t370 - t121 * t226 + t13 * t233 - t373 * t39 - t388 * t40, 0, 0, 0, 0, 0, 0, t289 - t351, -t348 - t367, t290 - t368, -t2 * t176 - t177 * t269 - t66 * t226 - t344 * t8 - t345 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t322, -t220 + t365 (t223 + t369) * qJD(3), -t322, 0, 0, qJD(3) * t179 - t226 * t240 - t133, -qJD(2) * t369 + t240 * t223, 0, 0, t192 * t291 - t331 (-t139 - t328) * t265 - t376 + t311, t214 * t291 + t315 - t325, t190 * t292 - t330, t280 + t327, -t324, -pkin(3) * t140 - t103 * t226 - t133 * t265 - t179 * t190 + (-pkin(8) * t306 - t113) * t214 + t275 * t263, pkin(3) * t139 + t104 * t226 + t133 * t263 - t179 * t192 + (pkin(8) * t307 + t114) * t214 + t275 * t265, t113 * t192 + t114 * t190 + ((qJD(4) * t192 - t140) * pkin(8) + t285) * t265 + ((qJD(4) * t190 - t139) * pkin(8) - t377) * t263, -t133 * pkin(3) - t103 * t113 - t104 * t114 - t170 * t179 + (-qJD(4) * t284 - t59 * t263 + t58 * t265) * pkin(8), t86 * t233 - t283 * t388, -t267 + t287, -t333 - t366, t128 * t373 - t370 * t85, t286 + t335, -t324, t121 * t147 - t134 * t128 + t188 * t209 - t39 * t226 - t89 * t370 + t254 * t85 + t343 * t214 + (t121 * t233 + t128 * t361) * qJD(4), -t121 * t388 - t189 * t209 - t214 * t342 + t40 * t226 + t89 * t233 + t254 * t86 + t283 * t288, -t12 * t233 - t128 * t342 + t13 * t370 - t188 * t86 - t189 * t85 - t283 * t343 - t373 * t40 + t388 * t39, t12 * t188 + t121 * t288 + t13 * t189 + t89 * t254 + t342 * t40 + t343 * t39, -t23 * t177 - t345 * t379, t290 + t368, -t348 + t367, t24 * t176 + t344 * t68, t289 + t351, -t208 * t226, t54 * t176 + t197 * t24 - t208 * t355 + t98 * t209 - t8 * t226 + t341 * t68 + t344 * t66, t54 * t177 - t197 * t23 + t208 * t354 - t99 * t209 + t9 * t226 + t341 * t379 - t345 * t66, t176 * t269 - t2 * t177 + t98 * t23 - t99 * t24 - t344 * t9 + t345 * t8 + t354 * t68 + t355 * t379, t54 * t197 + t2 * t98 - t269 * t99 + t341 * t66 - t354 * t9 - t355 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t326, -t190 ^ 2 + t192 ^ 2, t190 * t214 - t139, -t326, t192 * t214 - t140, t209, -t170 * t192 + t377, t170 * t190 - t285, 0, 0, t381, -t336 + t338, t86 + t334, -t381, -t85 + t337, t209, -t121 * t283 - t43 * t214 + (-t128 * t192 + t209 * t260) * pkin(4) + t12, t121 * t128 + t44 * t214 + (-t192 * t283 - t209 * t258) * pkin(4) - t13 (-t258 * t85 - t260 * t86) * pkin(4) + (t40 + t43) * t283 + (t44 - t39) * t128, -t39 * t43 - t40 * t44 + (t12 * t260 - t121 * t192 + t13 * t258) * pkin(4), t358, t389, t390, -t358, t386, t209, -t111 * t68 - t208 * t347 + t216 * t209 + t385, -t111 * t379 + t208 * t346 - t209 * t217 + t387, t216 * t23 - t217 * t24 + (t347 + t9) * t379 + (t346 - t8) * t68, -t66 * t111 + t2 * t216 - t217 * t269 - t346 * t9 - t347 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t85 + t337, t86 - t334, -t336 - t338, t128 * t40 + t283 * t39 + t89, 0, 0, 0, 0, 0, 0, t24 + t349, -t23 - t352, -t359 - t360, t379 * t8 + t68 * t9 + t54; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t358, t389, t390, -t358, t386, t209, t9 * t208 + t385, t208 * t8 + t387, 0, 0;];
tauc_reg  = t1;
