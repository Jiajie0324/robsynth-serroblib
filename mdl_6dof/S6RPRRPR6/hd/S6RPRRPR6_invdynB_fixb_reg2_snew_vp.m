% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRPR6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d4,d6,theta2,theta5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 22:53
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRPR6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRPR6_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRPR6_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRPR6_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRPR6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RPRRPR6_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 22:51:17
% EndTime: 2019-05-05 22:51:58
% DurationCPUTime: 41.00s
% Computational Cost: add. (385172->910), mult. (932868->1418), div. (0->0), fcn. (729416->12), ass. (0->627)
t1047 = sin(pkin(11));
t1048 = sin(pkin(10));
t1050 = cos(pkin(10));
t1054 = sin(qJ(3));
t1058 = cos(qJ(3));
t1068 = t1048 * t1058 + t1050 * t1054;
t1022 = t1068 * qJD(1);
t1053 = sin(qJ(4));
t1057 = cos(qJ(4));
t1000 = -t1057 * qJD(3) + t1022 * t1053;
t1001 = qJD(3) * t1053 + t1022 * t1057;
t1049 = cos(pkin(11));
t951 = t1049 * t1000 + t1001 * t1047;
t953 = -t1000 * t1047 + t1001 * t1049;
t896 = t953 * t951;
t1087 = qJDD(1) * t1050;
t1092 = t1048 * t1054;
t1018 = qJDD(1) * t1092 - t1058 * t1087;
t1096 = t1022 * qJD(3);
t980 = -t1018 - t1096;
t971 = qJDD(4) - t980;
t1150 = -t896 + t971;
t1159 = t1047 * t1150;
t1158 = t1049 * t1150;
t1052 = sin(qJ(6));
t1063 = qJDD(6) + t971;
t1056 = cos(qJ(6));
t887 = t1052 * t953 + t1056 * t951;
t889 = -t1052 * t951 + t1056 * t953;
t807 = t889 * t887;
t1147 = t1063 - t807;
t1157 = t1052 * t1147;
t957 = t1001 * t1000;
t1148 = -t957 + t971;
t1156 = t1053 * t1148;
t1108 = qJD(1) * t1050;
t1020 = qJD(1) * t1092 - t1058 * t1108;
t985 = t1022 * t1020;
t1146 = -t985 + qJDD(3);
t1155 = t1054 * t1146;
t1154 = t1056 * t1147;
t1153 = t1057 * t1148;
t1152 = t1058 * t1146;
t1055 = sin(qJ(1));
t1059 = cos(qJ(1));
t1032 = t1055 * g(1) - t1059 * g(2);
t1070 = -qJDD(2) + t1032;
t1080 = pkin(2) * t1050 + pkin(1);
t1044 = t1048 ^ 2;
t1045 = t1050 ^ 2;
t1088 = t1044 + t1045;
t1140 = qJD(1) ^ 2;
t975 = t1080 * qJDD(1) + (pkin(7) * t1088 + qJ(2)) * t1140 + t1070;
t1099 = t1020 * qJD(3);
t1145 = t1068 * qJDD(1);
t982 = t1145 - t1099;
t1069 = t1057 * qJDD(3) - t1053 * t982;
t1064 = qJD(4) * t1001 - t1069;
t930 = -t1000 * qJD(4) + t1053 * qJDD(3) + t1057 * t982;
t1073 = t1047 * t930 + t1049 * t1064;
t863 = -t1047 * t1064 + t1049 * t930;
t763 = -qJD(6) * t887 - t1052 * t1073 + t1056 * t863;
t1013 = qJD(4) + t1020;
t1009 = qJD(6) + t1013;
t869 = t1009 * t887;
t1151 = t763 - t869;
t926 = t1013 * t951;
t827 = -t926 - t863;
t1149 = -t926 + t863;
t965 = t1013 * t1000;
t901 = -t965 - t930;
t900 = -t965 + t930;
t1072 = t1052 * t863 + t1056 * t1073;
t721 = (qJD(6) - t1009) * t889 + t1072;
t1143 = t1140 * t1088;
t897 = (qJD(4) - t1013) * t1001 - t1069;
t885 = t887 ^ 2;
t886 = t889 ^ 2;
t1141 = t951 ^ 2;
t950 = t953 ^ 2;
t1139 = qJD(3) ^ 2;
t1138 = t1000 ^ 2;
t999 = t1001 ^ 2;
t1007 = t1009 ^ 2;
t1137 = t1013 ^ 2;
t1016 = t1020 ^ 2;
t1017 = t1022 ^ 2;
t1136 = 2 * qJD(2);
t1135 = pkin(3) * t1054;
t1134 = t1050 * g(3);
t1133 = qJDD(1) * pkin(1);
t1033 = t1059 * g(1) + t1055 * g(2);
t1062 = -t1134 + ((-pkin(7) - qJ(2)) * qJDD(1) + (qJD(1) * t1080 - (2 * qJD(2))) * qJD(1) + t1033) * t1048;
t1039 = t1045 * t1140;
t1065 = qJDD(1) * qJ(2) - t1033;
t987 = -g(3) * t1048 + t1050 * (-pkin(1) * t1140 + t1065) + t1108 * t1136;
t964 = -pkin(2) * t1039 + pkin(7) * t1087 + t987;
t906 = t1054 * t1062 + t1058 * t964;
t972 = pkin(3) * t1020 - pkin(8) * t1022;
t855 = -pkin(3) * t1139 + qJDD(3) * pkin(8) - t1020 * t972 + t906;
t866 = (-t982 + t1099) * pkin(8) + (-t980 + t1096) * pkin(3) - t975;
t781 = t1053 * t855 - t1057 * t866;
t736 = pkin(4) * t1148 + qJ(5) * t901 - t781;
t782 = t1053 * t866 + t1057 * t855;
t960 = pkin(4) * t1013 - qJ(5) * t1001;
t743 = -pkin(4) * t1138 - qJ(5) * t1064 - t1013 * t960 + t782;
t661 = 0.2e1 * qJD(5) * t953 + t1047 * t743 - t1049 * t736;
t629 = pkin(5) * t1150 + pkin(9) * t827 - t661;
t662 = -0.2e1 * qJD(5) * t951 + t1047 * t736 + t1049 * t743;
t916 = pkin(5) * t1013 - pkin(9) * t953;
t633 = -pkin(5) * t1141 - pkin(9) * t1073 - t1013 * t916 + t662;
t567 = t1052 * t629 + t1056 * t633;
t1132 = t1013 * t953;
t566 = t1052 * t633 - t1056 * t629;
t527 = t1052 * t567 - t1056 * t566;
t1131 = t1047 * t527;
t905 = t1054 * t964 - t1058 * t1062;
t854 = -qJDD(3) * pkin(3) - t1139 * pkin(8) + t1022 * t972 + t905;
t774 = t1064 * pkin(4) - t1138 * qJ(5) + t1001 * t960 + qJDD(5) + t854;
t1130 = t1047 * t774;
t858 = t896 + t971;
t1129 = t1047 * t858;
t832 = t1054 * t906 - t1058 * t905;
t1128 = t1048 * t832;
t1127 = t1049 * t527;
t1126 = t1049 * t774;
t1125 = t1049 * t858;
t1124 = t1050 * t832;
t697 = pkin(5) * t1073 - pkin(9) * t1141 + t916 * t953 + t774;
t1123 = t1052 * t697;
t791 = t1063 + t807;
t1122 = t1052 * t791;
t599 = t1047 * t662 - t1049 * t661;
t1121 = t1053 * t599;
t1120 = t1053 * t854;
t914 = t957 + t971;
t1119 = t1053 * t914;
t1118 = t1054 * t971;
t1117 = t1054 * t975;
t976 = qJDD(3) + t985;
t1116 = t1054 * t976;
t1115 = t1056 * t697;
t1114 = t1056 * t791;
t1113 = t1057 * t599;
t1112 = t1057 * t854;
t1111 = t1057 * t914;
t1110 = t1058 * t975;
t1109 = t1058 * t976;
t1107 = t1140 * t1044;
t1106 = t1009 * t1052;
t1105 = t1009 * t1056;
t1104 = t1013 * t1047;
t1103 = t1013 * t1049;
t1102 = t1013 * t1053;
t1101 = t1013 * t1057;
t1014 = qJ(2) * t1140 + t1070 + t1133;
t1100 = t1014 * t1059;
t1098 = t1020 * t1054;
t1097 = t1020 * t1058;
t1095 = t1022 * t1054;
t1094 = t1022 * t1058;
t1093 = t1048 * t1050;
t1091 = t1055 * t1014;
t1086 = qJDD(1) * t1059;
t1085 = t1055 * qJDD(1);
t1084 = t1054 * t807;
t1083 = t1054 * t896;
t1082 = t1058 * t807;
t1081 = t1058 * t896;
t1079 = -pkin(3) * t1058 - pkin(2);
t1078 = t1054 * t957;
t1077 = t1058 * t957;
t1076 = t1059 * t985;
t1075 = t1055 * t985;
t1074 = t1014 + t1133;
t600 = t1047 * t661 + t1049 * t662;
t986 = t1134 + ((-pkin(1) * qJD(1) + t1136) * qJD(1) + t1065) * t1048;
t933 = t1048 * t986 + t1050 * t987;
t528 = t1052 * t566 + t1056 * t567;
t833 = t1054 * t905 + t1058 * t906;
t998 = -t1032 * t1055 - t1059 * t1033;
t1031 = -t1055 * t1140 + t1086;
t1071 = -pkin(6) * t1031 - g(3) * t1055;
t931 = t1048 * t987 - t1050 * t986;
t701 = t1053 * t782 - t1057 * t781;
t702 = t1053 * t781 + t1057 * t782;
t997 = t1032 * t1059 - t1055 * t1033;
t1030 = t1059 * t1140 + t1085;
t824 = -t1073 + t1132;
t1024 = t1050 * t1143;
t994 = -t1055 * t1024 + t1050 * t1086;
t1067 = t1024 * t1059 + t1050 * t1085;
t1038 = t1045 * qJDD(1);
t1037 = t1044 * qJDD(1);
t1029 = t1039 - t1107;
t1028 = t1039 + t1107;
t1027 = t1038 - t1037;
t1026 = t1038 + t1037;
t1023 = t1048 * t1143;
t1015 = -pkin(6) * t1030 + g(3) * t1059;
t1006 = -t1017 + t1139;
t1005 = -t1017 - t1139;
t1004 = t1016 - t1139;
t1003 = t1031 * t1093;
t1002 = t1030 * t1093;
t995 = t1023 * t1059 + t1048 * t1085;
t993 = t1055 * t1023 - t1048 * t1086;
t989 = t1026 * t1059 - t1055 * t1028;
t988 = t1055 * t1026 + t1028 * t1059;
t984 = -t1017 + t1016;
t981 = t1145 - 0.2e1 * t1099;
t979 = t1018 + 0.2e1 * t1096;
t973 = -t1016 - t1139;
t968 = t1058 * t971;
t967 = (t1095 - t1097) * qJD(3);
t966 = (-t1094 - t1098) * qJD(3);
t963 = -t999 + t1137;
t962 = -t1137 + t1138;
t956 = -t1016 - t1017;
t955 = -t999 + t1138;
t948 = -qJD(3) * t1095 + t1058 * t982;
t947 = qJD(3) * t1094 + t1054 * t982;
t946 = qJD(3) * t1097 - t1054 * t980;
t945 = qJD(3) * t1098 + t1058 * t980;
t941 = -t999 - t1137;
t940 = -t1005 * t1054 - t1109;
t939 = -t1006 * t1054 + t1152;
t938 = t1004 * t1058 - t1116;
t937 = t1005 * t1058 - t1116;
t936 = t1006 * t1058 + t1155;
t935 = t1004 * t1054 + t1109;
t934 = -t1137 - t1138;
t925 = t999 + t1138;
t924 = -t1054 * t981 - t1058 * t979;
t923 = -t1018 * t1058 + t1054 * t1145;
t922 = -t1054 * t979 + t1058 * t981;
t921 = -t1018 * t1054 - t1058 * t1145;
t920 = -t950 + t1137;
t919 = -t1137 + t1141;
t918 = t1058 * t973 - t1155;
t917 = t1054 * t973 + t1152;
t912 = (-t1000 * t1057 + t1001 * t1053) * t1013;
t911 = (t1000 * t1053 + t1001 * t1057) * t1013;
t910 = -t1048 * t966 + t1050 * t967;
t909 = t1059 * t933 - t1091;
t908 = t1055 * t933 + t1100;
t907 = -t950 - t1137;
t903 = -pkin(7) * t937 - t1110;
t898 = (-qJD(4) - t1013) * t1001 + t1069;
t895 = -t950 + t1141;
t894 = -pkin(7) * t917 - t1117;
t893 = -t1001 * t1102 + t1057 * t930;
t892 = -t1001 * t1101 - t1053 * t930;
t891 = t1000 * t1101 + t1053 * t1064;
t890 = -t1000 * t1102 + t1057 * t1064;
t884 = -t1048 * t947 + t1050 * t948;
t883 = -t1048 * t945 + t1050 * t946;
t882 = -t1048 * t937 + t1050 * t940;
t881 = -t1048 * t936 + t1050 * t939;
t880 = -t1048 * t935 + t1050 * t938;
t879 = t1048 * t940 + t1050 * t937;
t878 = -t1137 - t1141;
t877 = t1058 * t912 + t1118;
t876 = t1054 * t912 - t968;
t875 = t1057 * t962 - t1119;
t874 = -t1053 * t963 + t1153;
t873 = -t1053 * t962 - t1111;
t872 = -t1057 * t963 - t1156;
t871 = -pkin(2) * t981 + pkin(7) * t940 - t1117;
t868 = -t886 + t1007;
t867 = t885 - t1007;
t856 = -pkin(2) * t979 + pkin(7) * t918 + t1110;
t853 = -t1053 * t941 - t1111;
t852 = t1057 * t941 - t1119;
t851 = (t1047 * t953 - t1049 * t951) * t1013;
t850 = (-t1047 * t951 - t1049 * t953) * t1013;
t848 = -t1048 * t922 + t1050 * t924;
t847 = -t1048 * t921 + t1050 * t923;
t846 = t1048 * t923 + t1050 * t921;
t845 = -t886 - t1007;
t844 = t1057 * t934 - t1156;
t843 = t1053 * t934 + t1153;
t842 = -t1048 * t917 + t1050 * t918;
t841 = t1048 * t918 + t1050 * t917;
t840 = t1055 * t981 + t1059 * t882;
t839 = t1055 * t882 - t1059 * t981;
t838 = -t950 - t1141;
t837 = t1058 * t893 + t1078;
t836 = t1058 * t891 - t1078;
t835 = t1054 * t893 - t1077;
t834 = t1054 * t891 + t1077;
t831 = t1055 * t979 + t1059 * t842;
t830 = t1055 * t842 - t1059 * t979;
t829 = t1055 * t956 + t1059 * t847;
t828 = t1055 * t847 - t1059 * t956;
t822 = t1073 + t1132;
t821 = t1049 * t863 - t1104 * t953;
t820 = t1047 * t863 + t1103 * t953;
t819 = t1047 * t1073 + t1103 * t951;
t818 = -t1049 * t1073 + t1104 * t951;
t817 = -t1053 * t901 - t1057 * t897;
t816 = -t1053 * t900 + t1057 * t898;
t815 = -t1053 * t897 + t1057 * t901;
t814 = -t1053 * t898 - t1057 * t900;
t813 = t1049 * t919 - t1129;
t812 = -t1047 * t920 + t1158;
t811 = t1047 * t919 + t1125;
t810 = t1049 * t920 + t1159;
t809 = pkin(2) * t975 + pkin(7) * t833;
t808 = -pkin(1) * t846 - pkin(2) * t921;
t806 = -t886 + t885;
t805 = -t1047 * t907 - t1125;
t804 = t1049 * t907 - t1129;
t803 = -t1054 * t897 + t1058 * t875;
t802 = -t1054 * t901 + t1058 * t874;
t801 = t1054 * t875 + t1058 * t897;
t800 = t1054 * t874 + t1058 * t901;
t799 = -t1007 - t885;
t798 = t1054 * t900 + t1058 * t853;
t797 = t1054 * t853 - t1058 * t900;
t796 = -pkin(7) * t921 - t832;
t795 = -t1048 * t876 + t1050 * t877;
t794 = -t1054 * t898 + t1058 * t844;
t793 = t1054 * t844 + t1058 * t898;
t789 = (t1052 * t889 - t1056 * t887) * t1009;
t788 = (-t1052 * t887 - t1056 * t889) * t1009;
t787 = -t1054 * t955 + t1058 * t816;
t786 = t1054 * t816 + t1058 * t955;
t785 = -pkin(1) * t879 - pkin(2) * t937 + t906;
t784 = t1049 * t878 - t1159;
t783 = t1047 * t878 + t1158;
t780 = -pkin(8) * t852 + t1112;
t779 = -t1054 * t925 + t1058 * t817;
t778 = t1054 * t817 + t1058 * t925;
t777 = -pkin(8) * t843 + t1120;
t776 = -t1053 * t850 + t1057 * t851;
t775 = -t1053 * t851 - t1057 * t850;
t773 = -pkin(2) * t956 + pkin(7) * t923 + t833;
t772 = -pkin(1) * t841 - pkin(2) * t917 + t905;
t771 = -t1048 * t835 + t1050 * t837;
t770 = -t1048 * t834 + t1050 * t836;
t769 = t1058 * t776 + t1118;
t768 = t1054 * t776 - t968;
t767 = -t885 - t886;
t766 = -qJ(2) * t879 - t1048 * t871 + t1050 * t903;
t765 = t1050 * t833 - t1128;
t764 = t1048 * t833 + t1124;
t762 = -qJD(6) * t889 - t1072;
t761 = t1056 * t867 - t1122;
t760 = -t1052 * t868 + t1154;
t759 = t1052 * t867 + t1114;
t758 = t1056 * t868 + t1157;
t757 = -qJ(2) * t841 - t1048 * t856 + t1050 * t894;
t756 = -t1055 * t975 + t1059 * t765;
t755 = t1055 * t765 + t1059 * t975;
t754 = -t1052 * t845 - t1114;
t753 = t1056 * t845 - t1122;
t752 = -t1047 * t827 + t1049 * t824;
t751 = -t1047 * t1149 - t1049 * t822;
t750 = t1047 * t824 + t1049 * t827;
t749 = -t1047 * t822 + t1049 * t1149;
t748 = -pkin(3) * t852 + t782;
t747 = -t1053 * t820 + t1057 * t821;
t746 = -t1053 * t818 + t1057 * t819;
t745 = -t1053 * t821 - t1057 * t820;
t744 = -t1053 * t819 - t1057 * t818;
t742 = -pkin(3) * t843 + t781;
t740 = -t1053 * t811 + t1057 * t813;
t739 = -t1053 * t810 + t1057 * t812;
t738 = -t1053 * t813 - t1057 * t811;
t737 = -t1053 * t812 - t1057 * t810;
t733 = -t1053 * t804 + t1057 * t805;
t732 = t1053 * t805 + t1057 * t804;
t731 = -t1048 * t801 + t1050 * t803;
t730 = -t1048 * t800 + t1050 * t802;
t729 = t1056 * t799 - t1157;
t728 = t1052 * t799 + t1154;
t727 = -t1048 * t797 + t1050 * t798;
t726 = t1048 * t798 + t1050 * t797;
t725 = -t763 - t869;
t720 = (qJD(6) + t1009) * t889 + t1072;
t719 = -t1048 * t793 + t1050 * t794;
t718 = t1048 * t794 + t1050 * t793;
t717 = t1056 * t763 - t1106 * t889;
t716 = t1052 * t763 + t1105 * t889;
t715 = -t1052 * t762 + t1105 * t887;
t714 = t1056 * t762 + t1106 * t887;
t713 = -qJ(5) * t804 + t1126;
t712 = -t1047 * t788 + t1049 * t789;
t711 = t1047 * t789 + t1049 * t788;
t710 = t1058 * t747 + t1083;
t709 = t1058 * t746 - t1083;
t708 = t1054 * t747 - t1081;
t707 = t1054 * t746 + t1081;
t706 = -t1048 * t786 + t1050 * t787;
t705 = -t1053 * t783 + t1057 * t784;
t704 = t1053 * t784 + t1057 * t783;
t703 = -pkin(1) * t764 - pkin(2) * t832;
t700 = -qJ(5) * t783 + t1130;
t699 = -t1048 * t778 + t1050 * t779;
t698 = t1048 * t779 + t1050 * t778;
t696 = t1054 * t824 + t1058 * t740;
t695 = -t1054 * t827 + t1058 * t739;
t694 = t1054 * t740 - t1058 * t824;
t693 = t1054 * t739 + t1058 * t827;
t692 = t1055 * t852 + t1059 * t727;
t691 = t1055 * t727 - t1059 * t852;
t690 = -t1048 * t768 + t1050 * t769;
t689 = t1055 * t843 + t1059 * t719;
t688 = t1055 * t719 - t1059 * t843;
t687 = t1054 * t1149 + t1058 * t733;
t686 = t1054 * t733 - t1058 * t1149;
t685 = -qJ(2) * t846 - t1048 * t773 + t1050 * t796;
t684 = t1054 * t854 + t1058 * t702;
t683 = t1054 * t702 - t1058 * t854;
t682 = -pkin(4) * t1149 + qJ(5) * t805 + t1130;
t681 = t1054 * t822 + t1058 * t705;
t680 = t1054 * t705 - t1058 * t822;
t679 = -pkin(4) * t822 + qJ(5) * t784 - t1126;
t678 = -pkin(7) * t1124 - qJ(2) * t764 - t1048 * t809;
t677 = -pkin(8) * t815 - t701;
t676 = -t1047 * t759 + t1049 * t761;
t675 = -t1047 * t758 + t1049 * t760;
t674 = t1047 * t761 + t1049 * t759;
t673 = t1047 * t760 + t1049 * t758;
t672 = t1055 * t815 + t1059 * t699;
t671 = t1055 * t699 - t1059 * t815;
t670 = -t1047 * t753 + t1049 * t754;
t669 = t1047 * t754 + t1049 * t753;
t668 = -t1053 * t750 + t1057 * t752;
t667 = -t1053 * t749 + t1057 * t751;
t666 = t1053 * t752 + t1057 * t750;
t665 = -t1053 * t751 - t1057 * t749;
t664 = -t1054 * t895 + t1058 * t667;
t663 = t1054 * t667 + t1058 * t895;
t659 = -pkin(7) * t797 - t1054 * t748 + t1058 * t780;
t658 = -pkin(7) * t793 - t1054 * t742 + t1058 * t777;
t657 = t1054 * t838 + t1058 * t668;
t656 = t1054 * t668 - t1058 * t838;
t655 = -t1047 * t728 + t1049 * t729;
t654 = t1047 * t729 + t1049 * t728;
t653 = -pkin(9) * t753 + t1115;
t652 = -t1052 * t725 - t1056 * t721;
t651 = -t1052 * t1151 - t1056 * t720;
t650 = -t1052 * t721 + t1056 * t725;
t649 = -t1052 * t720 + t1056 * t1151;
t648 = -t1047 * t716 + t1049 * t717;
t647 = -t1047 * t714 + t1049 * t715;
t646 = t1047 * t717 + t1049 * t716;
t645 = t1047 * t715 + t1049 * t714;
t644 = -t1053 * t711 + t1057 * t712;
t643 = -t1053 * t712 - t1057 * t711;
t642 = -t1048 * t708 + t1050 * t710;
t641 = -t1048 * t707 + t1050 * t709;
t640 = -pkin(2) * t852 + pkin(7) * t798 + t1054 * t780 + t1058 * t748;
t639 = t1054 * t1063 + t1058 * t644;
t638 = t1054 * t644 - t1058 * t1063;
t637 = -pkin(9) * t728 + t1123;
t636 = -pkin(2) * t843 + pkin(7) * t794 + t1054 * t777 + t1058 * t742;
t635 = -pkin(1) * t726 - pkin(2) * t797 + pkin(3) * t900 - pkin(8) * t853 - t1120;
t634 = -pkin(1) * t718 - pkin(2) * t793 - pkin(3) * t898 - pkin(8) * t844 + t1112;
t631 = -pkin(3) * t666 - pkin(4) * t750;
t630 = -pkin(7) * t778 + t1058 * t677 + t1135 * t815;
t628 = -t1048 * t694 + t1050 * t696;
t627 = -t1048 * t693 + t1050 * t695;
t624 = -t1048 * t686 + t1050 * t687;
t623 = t1048 * t687 + t1050 * t686;
t622 = -t1048 * t683 + t1050 * t684;
t621 = t1048 * t684 + t1050 * t683;
t620 = pkin(7) * t779 + t1054 * t677 + t1079 * t815;
t619 = -t1048 * t680 + t1050 * t681;
t618 = t1048 * t681 + t1050 * t680;
t617 = -pkin(5) * t1151 + pkin(9) * t754 + t1123;
t616 = -t1053 * t674 + t1057 * t676;
t615 = -t1053 * t673 + t1057 * t675;
t614 = -t1053 * t676 - t1057 * t674;
t613 = -t1053 * t675 - t1057 * t673;
t612 = -pkin(5) * t720 + pkin(9) * t729 - t1115;
t611 = -pkin(3) * t732 - pkin(4) * t804 + t662;
t610 = -t1053 * t669 + t1057 * t670;
t609 = t1053 * t670 + t1057 * t669;
t608 = -pkin(1) * t698 - pkin(2) * t778 - pkin(3) * t925 - pkin(8) * t817 - t702;
t607 = -pkin(8) * t732 - t1053 * t682 + t1057 * t713;
t606 = -pkin(3) * t704 - pkin(4) * t783 + t661;
t605 = t1055 * t732 + t1059 * t624;
t604 = t1055 * t624 - t1059 * t732;
t603 = -pkin(7) * t683 + (-pkin(8) * t1058 + t1135) * t701;
t602 = -pkin(8) * t704 - t1053 * t679 + t1057 * t700;
t601 = -t1048 * t663 + t1050 * t664;
t598 = t1055 * t701 + t1059 * t622;
t597 = t1055 * t622 - t1059 * t701;
t596 = -t1048 * t656 + t1050 * t657;
t595 = t1048 * t657 + t1050 * t656;
t594 = -t1053 * t654 + t1057 * t655;
t593 = t1053 * t655 + t1057 * t654;
t592 = t1055 * t704 + t1059 * t619;
t591 = t1055 * t619 - t1059 * t704;
t590 = -t1047 * t650 + t1049 * t652;
t589 = -t1047 * t649 + t1049 * t651;
t588 = t1047 * t652 + t1049 * t650;
t587 = t1047 * t651 + t1049 * t649;
t586 = -t1053 * t646 + t1057 * t648;
t585 = -t1053 * t645 + t1057 * t647;
t584 = -t1053 * t648 - t1057 * t646;
t583 = -t1053 * t647 - t1057 * t645;
t582 = -t1054 * t721 + t1058 * t616;
t581 = -t1054 * t725 + t1058 * t615;
t580 = t1054 * t616 + t1058 * t721;
t579 = t1054 * t615 + t1058 * t725;
t578 = t1054 * t1151 + t1058 * t610;
t577 = t1054 * t610 - t1058 * t1151;
t576 = -pkin(4) * t774 + qJ(5) * t600;
t575 = -t1048 * t638 + t1050 * t639;
t574 = -qJ(5) * t750 - t599;
t573 = t1058 * t586 + t1084;
t572 = t1058 * t585 - t1084;
t571 = t1054 * t586 - t1082;
t570 = t1054 * t585 + t1082;
t569 = pkin(7) * t684 + (-pkin(8) * t1054 + t1079) * t701;
t568 = -pkin(4) * t838 + qJ(5) * t752 + t600;
t564 = t1054 * t720 + t1058 * t594;
t563 = t1054 * t594 - t1058 * t720;
t562 = -qJ(2) * t726 - t1048 * t640 + t1050 * t659;
t561 = -qJ(2) * t718 - t1048 * t636 + t1050 * t658;
t560 = t1055 * t666 + t1059 * t596;
t559 = t1055 * t596 - t1059 * t666;
t558 = -pkin(1) * t621 - pkin(2) * t683 + pkin(3) * t854 - pkin(8) * t702;
t557 = -qJ(2) * t698 - t1048 * t620 + t1050 * t630;
t556 = -qJ(5) * t669 - t1047 * t617 + t1049 * t653;
t555 = -qJ(5) * t654 - t1047 * t612 + t1049 * t637;
t554 = t1057 * t600 - t1121;
t553 = t1053 * t600 + t1113;
t552 = -pkin(4) * t1151 + qJ(5) * t670 + t1047 * t653 + t1049 * t617;
t551 = -pkin(1) * t623 - pkin(2) * t686 + pkin(3) * t1149 - pkin(8) * t733 - t1053 * t713 - t1057 * t682;
t550 = -pkin(7) * t686 - t1054 * t611 + t1058 * t607;
t549 = t1054 * t774 + t1058 * t554;
t548 = t1054 * t554 - t1058 * t774;
t547 = -t1053 * t588 + t1057 * t590;
t546 = -t1053 * t587 + t1057 * t589;
t545 = t1053 * t590 + t1057 * t588;
t544 = -t1053 * t589 - t1057 * t587;
t543 = -t1048 * t580 + t1050 * t582;
t542 = -t1048 * t579 + t1050 * t581;
t541 = -pkin(4) * t720 + qJ(5) * t655 + t1047 * t637 + t1049 * t612;
t540 = -pkin(1) * t618 - pkin(2) * t680 + pkin(3) * t822 - pkin(8) * t705 - t1053 * t700 - t1057 * t679;
t539 = -t1048 * t577 + t1050 * t578;
t538 = t1048 * t578 + t1050 * t577;
t537 = -pkin(7) * t680 - t1054 * t606 + t1058 * t602;
t536 = -t1054 * t806 + t1058 * t546;
t535 = t1054 * t546 + t1058 * t806;
t534 = t1054 * t767 + t1058 * t547;
t533 = t1054 * t547 - t1058 * t767;
t532 = -pkin(2) * t732 + pkin(7) * t687 + t1054 * t607 + t1058 * t611;
t531 = -t1048 * t571 + t1050 * t573;
t530 = -t1048 * t570 + t1050 * t572;
t529 = -pkin(2) * t704 + pkin(7) * t681 + t1054 * t602 + t1058 * t606;
t526 = -t1048 * t563 + t1050 * t564;
t525 = t1048 * t564 + t1050 * t563;
t524 = -pkin(3) * t609 - pkin(4) * t669 - pkin(5) * t753 + t567;
t523 = -pkin(8) * t666 - t1053 * t568 + t1057 * t574;
t522 = -pkin(5) * t697 + pkin(9) * t528;
t521 = -qJ(2) * t621 - t1048 * t569 + t1050 * t603;
t520 = -pkin(3) * t553 - pkin(4) * t599;
t519 = t1055 * t609 + t1059 * t539;
t518 = t1055 * t539 - t1059 * t609;
t517 = -pkin(3) * t593 - pkin(4) * t654 - pkin(5) * t728 + t566;
t516 = -pkin(9) * t650 - t527;
t515 = -pkin(5) * t767 + pkin(9) * t652 + t528;
t514 = t1055 * t593 + t1059 * t526;
t513 = t1055 * t526 - t1059 * t593;
t512 = -pkin(3) * t545 - pkin(4) * t588 - pkin(5) * t650;
t511 = -pkin(7) * t656 - t1054 * t631 + t1058 * t523;
t510 = -pkin(8) * t553 - qJ(5) * t1113 - t1053 * t576;
t509 = -t1048 * t548 + t1050 * t549;
t508 = t1048 * t549 + t1050 * t548;
t507 = -pkin(2) * t666 + pkin(7) * t657 + t1054 * t523 + t1058 * t631;
t506 = -pkin(1) * t595 - pkin(2) * t656 + pkin(3) * t838 - pkin(8) * t668 - t1053 * t574 - t1057 * t568;
t505 = -t1048 * t535 + t1050 * t536;
t504 = -pkin(8) * t609 - t1053 * t552 + t1057 * t556;
t503 = -t1048 * t533 + t1050 * t534;
t502 = t1048 * t534 + t1050 * t533;
t501 = -qJ(2) * t623 - t1048 * t532 + t1050 * t550;
t500 = -pkin(8) * t593 - t1053 * t541 + t1057 * t555;
t499 = t1049 * t528 - t1131;
t498 = t1047 * t528 + t1127;
t497 = -qJ(2) * t618 - t1048 * t529 + t1050 * t537;
t496 = t1055 * t553 + t1059 * t509;
t495 = t1055 * t509 - t1059 * t553;
t494 = t1055 * t545 + t1059 * t503;
t493 = t1055 * t503 - t1059 * t545;
t492 = -qJ(5) * t588 - t1047 * t515 + t1049 * t516;
t491 = -pkin(4) * t767 + qJ(5) * t590 + t1047 * t516 + t1049 * t515;
t490 = -pkin(1) * t538 - pkin(2) * t577 + pkin(3) * t1151 - pkin(8) * t610 - t1053 * t556 - t1057 * t552;
t489 = -pkin(7) * t577 - t1054 * t524 + t1058 * t504;
t488 = -pkin(7) * t548 - t1054 * t520 + t1058 * t510;
t487 = -pkin(2) * t609 + pkin(7) * t578 + t1054 * t504 + t1058 * t524;
t486 = -pkin(1) * t525 - pkin(2) * t563 + pkin(3) * t720 - pkin(8) * t594 - t1053 * t555 - t1057 * t541;
t485 = -qJ(2) * t595 - t1048 * t507 + t1050 * t511;
t484 = -pkin(7) * t563 - t1054 * t517 + t1058 * t500;
t483 = -t1053 * t498 + t1057 * t499;
t482 = t1053 * t499 + t1057 * t498;
t481 = -pkin(1) * t508 - pkin(2) * t548 + pkin(3) * t774 - pkin(8) * t554 + qJ(5) * t1121 - t1057 * t576;
t480 = -pkin(2) * t593 + pkin(7) * t564 + t1054 * t500 + t1058 * t517;
t479 = -pkin(9) * t1127 - qJ(5) * t498 - t1047 * t522;
t478 = t1054 * t697 + t1058 * t483;
t477 = t1054 * t483 - t1058 * t697;
t476 = -pkin(4) * t697 - pkin(9) * t1131 + qJ(5) * t499 + t1049 * t522;
t475 = -pkin(2) * t553 + pkin(7) * t549 + t1054 * t510 + t1058 * t520;
t474 = -pkin(8) * t545 - t1053 * t491 + t1057 * t492;
t473 = -pkin(3) * t482 - pkin(4) * t498 - pkin(5) * t527;
t472 = -qJ(2) * t538 - t1048 * t487 + t1050 * t489;
t471 = -t1048 * t477 + t1050 * t478;
t470 = t1048 * t478 + t1050 * t477;
t469 = -qJ(2) * t525 - t1048 * t480 + t1050 * t484;
t468 = -pkin(7) * t533 - t1054 * t512 + t1058 * t474;
t467 = -pkin(1) * t502 - pkin(2) * t533 + pkin(3) * t767 - pkin(8) * t547 - t1053 * t492 - t1057 * t491;
t466 = -qJ(2) * t508 - t1048 * t475 + t1050 * t488;
t465 = -pkin(2) * t545 + pkin(7) * t534 + t1054 * t474 + t1058 * t512;
t464 = t1055 * t482 + t1059 * t471;
t463 = t1055 * t471 - t1059 * t482;
t462 = -pkin(8) * t482 - t1053 * t476 + t1057 * t479;
t461 = -qJ(2) * t502 - t1048 * t465 + t1050 * t468;
t460 = -pkin(7) * t477 - t1054 * t473 + t1058 * t462;
t459 = -pkin(1) * t470 - pkin(2) * t477 + pkin(3) * t697 - pkin(8) * t483 - t1053 * t479 - t1057 * t476;
t458 = -pkin(2) * t482 + pkin(7) * t478 + t1054 * t462 + t1058 * t473;
t457 = -qJ(2) * t470 - t1048 * t458 + t1050 * t460;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1030, -t1031, 0, t998, 0, 0, 0, 0, 0, 0, -t1067, t995, t989, t909, 0, 0, 0, 0, 0, 0, t831, t840, t829, t756, 0, 0, 0, 0, 0, 0, t689, t692, t672, t598, 0, 0, 0, 0, 0, 0, t592, t605, t560, t496, 0, 0, 0, 0, 0, 0, t514, t519, t494, t464; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1031, -t1030, 0, t997, 0, 0, 0, 0, 0, 0, t994, t993, t988, t908, 0, 0, 0, 0, 0, 0, t830, t839, t828, t755, 0, 0, 0, 0, 0, 0, t688, t691, t671, t597, 0, 0, 0, 0, 0, 0, t591, t604, t559, t495, 0, 0, 0, 0, 0, 0, t513, t518, t493, t463; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t931, 0, 0, 0, 0, 0, 0, t841, t879, t846, t764, 0, 0, 0, 0, 0, 0, t718, t726, t698, t621, 0, 0, 0, 0, 0, 0, t618, t623, t595, t508, 0, 0, 0, 0, 0, 0, t525, t538, t502, t470; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1031, 0, -t1030, 0, t1071, -t1015, -t997, -pkin(6) * t997, t1003, t1027 * t1059 - t1055 * t1029, t995, -t1003, t1067, 0, -pkin(6) * t994 - t1048 * t1100 - t1055 * t986, -pkin(6) * t993 - t1050 * t1100 - t1055 * t987, -pkin(6) * t988 - t1059 * t931, -pkin(6) * t908 + (pkin(1) * t1055 - qJ(2) * t1059) * t931, t1059 * t884 + t1075, -t1055 * t984 + t1059 * t848, t1055 * t1145 + t1059 * t881, t1059 * t883 - t1075, -t1055 * t1018 + t1059 * t880, t1055 * qJDD(3) + t1059 * t910, -pkin(6) * t830 - t1055 * t772 + t1059 * t757, -pkin(6) * t839 - t1055 * t785 + t1059 * t766, -pkin(6) * t828 - t1055 * t808 + t1059 * t685, -pkin(6) * t755 - t1055 * t703 + t1059 * t678, -t1055 * t892 + t1059 * t771, -t1055 * t814 + t1059 * t706, -t1055 * t872 + t1059 * t730, -t1055 * t890 + t1059 * t770, -t1055 * t873 + t1059 * t731, -t1055 * t911 + t1059 * t795, -pkin(6) * t688 - t1055 * t634 + t1059 * t561, -pkin(6) * t691 - t1055 * t635 + t1059 * t562, -pkin(6) * t671 - t1055 * t608 + t1059 * t557, -pkin(6) * t597 - t1055 * t558 + t1059 * t521, -t1055 * t745 + t1059 * t642, -t1055 * t665 + t1059 * t601, -t1055 * t737 + t1059 * t627, -t1055 * t744 + t1059 * t641, -t1055 * t738 + t1059 * t628, -t1055 * t775 + t1059 * t690, -pkin(6) * t591 - t1055 * t540 + t1059 * t497, -pkin(6) * t604 - t1055 * t551 + t1059 * t501, -pkin(6) * t559 - t1055 * t506 + t1059 * t485, -pkin(6) * t495 - t1055 * t481 + t1059 * t466, -t1055 * t584 + t1059 * t531, -t1055 * t544 + t1059 * t505, -t1055 * t613 + t1059 * t542, -t1055 * t583 + t1059 * t530, -t1055 * t614 + t1059 * t543, -t1055 * t643 + t1059 * t575, -pkin(6) * t513 - t1055 * t486 + t1059 * t469, -pkin(6) * t518 - t1055 * t490 + t1059 * t472, -pkin(6) * t493 - t1055 * t467 + t1059 * t461, -pkin(6) * t463 - t1055 * t459 + t1059 * t457; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1030, 0, t1031, 0, t1015, t1071, t998, pkin(6) * t998, t1002, t1055 * t1027 + t1029 * t1059, t993, -t1002, -t994, 0, -pkin(6) * t1067 - t1048 * t1091 + t1059 * t986, pkin(6) * t995 - t1050 * t1091 + t1059 * t987, pkin(6) * t989 - t1055 * t931, pkin(6) * t909 + (-pkin(1) * t1059 - qJ(2) * t1055) * t931, t1055 * t884 - t1076, t1055 * t848 + t1059 * t984, t1055 * t881 - t1059 * t1145, t1055 * t883 + t1076, t1018 * t1059 + t1055 * t880, -qJDD(3) * t1059 + t1055 * t910, pkin(6) * t831 + t1055 * t757 + t1059 * t772, pkin(6) * t840 + t1055 * t766 + t1059 * t785, pkin(6) * t829 + t1055 * t685 + t1059 * t808, pkin(6) * t756 + t1055 * t678 + t1059 * t703, t1055 * t771 + t1059 * t892, t1055 * t706 + t1059 * t814, t1055 * t730 + t1059 * t872, t1055 * t770 + t1059 * t890, t1055 * t731 + t1059 * t873, t1055 * t795 + t1059 * t911, pkin(6) * t689 + t1055 * t561 + t1059 * t634, pkin(6) * t692 + t1055 * t562 + t1059 * t635, pkin(6) * t672 + t1055 * t557 + t1059 * t608, pkin(6) * t598 + t1055 * t521 + t1059 * t558, t1055 * t642 + t1059 * t745, t1055 * t601 + t1059 * t665, t1055 * t627 + t1059 * t737, t1055 * t641 + t1059 * t744, t1055 * t628 + t1059 * t738, t1055 * t690 + t1059 * t775, pkin(6) * t592 + t1055 * t497 + t1059 * t540, pkin(6) * t605 + t1055 * t501 + t1059 * t551, pkin(6) * t560 + t1055 * t485 + t1059 * t506, pkin(6) * t496 + t1055 * t466 + t1059 * t481, t1055 * t531 + t1059 * t584, t1055 * t505 + t1059 * t544, t1055 * t542 + t1059 * t613, t1055 * t530 + t1059 * t583, t1055 * t543 + t1059 * t614, t1055 * t575 + t1059 * t643, pkin(6) * t514 + t1055 * t469 + t1059 * t486, pkin(6) * t519 + t1055 * t472 + t1059 * t490, pkin(6) * t494 + t1055 * t461 + t1059 * t467, pkin(6) * t464 + t1055 * t457 + t1059 * t459; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1032, t1033, 0, 0, t1037, 0.2e1 * t1048 * t1087, 0, t1038, 0, 0, -qJ(2) * t1024 + t1050 * t1074, qJ(2) * t1023 - t1048 * t1074, pkin(1) * t1028 + qJ(2) * t1026 + t933, pkin(1) * t1014 + qJ(2) * t933, t1048 * t948 + t1050 * t947, t1048 * t924 + t1050 * t922, t1048 * t939 + t1050 * t936, t1048 * t946 + t1050 * t945, t1048 * t938 + t1050 * t935, t1048 * t967 + t1050 * t966, -pkin(1) * t979 + qJ(2) * t842 + t1048 * t894 + t1050 * t856, -pkin(1) * t981 + qJ(2) * t882 + t1048 * t903 + t1050 * t871, -pkin(1) * t956 + qJ(2) * t847 + t1048 * t796 + t1050 * t773, pkin(1) * t975 - pkin(7) * t1128 + qJ(2) * t765 + t1050 * t809, t1048 * t837 + t1050 * t835, t1048 * t787 + t1050 * t786, t1048 * t802 + t1050 * t800, t1048 * t836 + t1050 * t834, t1048 * t803 + t1050 * t801, t1048 * t877 + t1050 * t876, -pkin(1) * t843 + qJ(2) * t719 + t1048 * t658 + t1050 * t636, -pkin(1) * t852 + qJ(2) * t727 + t1048 * t659 + t1050 * t640, -pkin(1) * t815 + qJ(2) * t699 + t1048 * t630 + t1050 * t620, -pkin(1) * t701 + qJ(2) * t622 + t1048 * t603 + t1050 * t569, t1048 * t710 + t1050 * t708, t1048 * t664 + t1050 * t663, t1048 * t695 + t1050 * t693, t1048 * t709 + t1050 * t707, t1048 * t696 + t1050 * t694, t1048 * t769 + t1050 * t768, -pkin(1) * t704 + qJ(2) * t619 + t1048 * t537 + t1050 * t529, -pkin(1) * t732 + qJ(2) * t624 + t1048 * t550 + t1050 * t532, -pkin(1) * t666 + qJ(2) * t596 + t1048 * t511 + t1050 * t507, -pkin(1) * t553 + qJ(2) * t509 + t1048 * t488 + t1050 * t475, t1048 * t573 + t1050 * t571, t1048 * t536 + t1050 * t535, t1048 * t581 + t1050 * t579, t1048 * t572 + t1050 * t570, t1048 * t582 + t1050 * t580, t1048 * t639 + t1050 * t638, -pkin(1) * t593 + qJ(2) * t526 + t1048 * t484 + t1050 * t480, -pkin(1) * t609 + qJ(2) * t539 + t1048 * t489 + t1050 * t487, -pkin(1) * t545 + qJ(2) * t503 + t1048 * t468 + t1050 * t465, -pkin(1) * t482 + qJ(2) * t471 + t1048 * t460 + t1050 * t458;];
tauB_reg  = t1;
