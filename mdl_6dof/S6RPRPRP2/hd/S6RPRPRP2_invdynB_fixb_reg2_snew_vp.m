% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRPRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta2,theta4]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 17:36
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRPRP2_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP2_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP2_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRP2_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRP2_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRP2_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 17:34:39
% EndTime: 2019-05-05 17:35:14
% DurationCPUTime: 36.63s
% Computational Cost: add. (85221->775), mult. (185910->1117), div. (0->0), fcn. (126733->10), ass. (0->548)
t923 = sin(pkin(10));
t925 = cos(pkin(10));
t933 = cos(qJ(3));
t986 = qJD(1) * t933;
t930 = sin(qJ(3));
t987 = qJD(1) * t930;
t873 = t923 * t986 + t925 * t987;
t929 = sin(qJ(5));
t932 = cos(qJ(5));
t843 = -t932 * qJD(3) + t873 * t929;
t976 = qJD(1) * qJD(3);
t965 = t933 * t976;
t975 = qJDD(1) * t930;
t884 = t965 + t975;
t913 = t933 * qJDD(1);
t966 = t930 * t976;
t885 = t913 - t966;
t829 = t884 * t925 + t885 * t923;
t946 = -t929 * qJDD(3) - t932 * t829;
t940 = qJD(5) * t843 + t946;
t871 = t923 * t987 - t925 * t986;
t867 = qJD(5) + t871;
t999 = t843 * t867;
t1045 = -t999 - t940;
t1017 = t1045 * t929;
t845 = qJD(3) * t929 + t873 * t932;
t961 = -t932 * qJDD(3) + t929 * t829;
t977 = qJD(5) + t867;
t702 = t845 * t977 + t961;
t620 = -t702 * t932 - t1017;
t1032 = t843 ^ 2;
t842 = t845 ^ 2;
t775 = t842 - t1032;
t585 = t620 * t923 - t775 * t925;
t587 = t620 * t925 + t775 * t923;
t523 = t585 * t930 - t587 * t933;
t614 = t1045 * t932 - t702 * t929;
t924 = sin(pkin(9));
t926 = cos(pkin(9));
t490 = t523 * t924 + t614 * t926;
t492 = t523 * t926 - t614 * t924;
t931 = sin(qJ(1));
t934 = cos(qJ(1));
t1155 = t490 * t934 + t492 * t931;
t1154 = t490 * t931 - t492 * t934;
t779 = t845 * t843;
t960 = t884 * t923 - t925 * t885;
t824 = qJDD(5) + t960;
t1047 = t779 + t824;
t1014 = t1047 * t929;
t1031 = t867 ^ 2;
t792 = t1032 - t1031;
t682 = t792 * t932 - t1014;
t703 = (qJD(5) - t867) * t845 + t961;
t605 = t682 * t923 + t703 * t925;
t609 = t682 * t925 - t703 * t923;
t540 = t605 * t930 - t609 * t933;
t1013 = t1047 * t932;
t677 = t792 * t929 + t1013;
t507 = t540 * t924 + t677 * t926;
t511 = t540 * t926 - t677 * t924;
t1153 = t507 * t934 + t511 * t931;
t1152 = t507 * t931 - t511 * t934;
t1044 = -t999 + t940;
t1081 = t1044 * t932 - t703 * t929;
t1043 = t842 + t1032;
t1080 = -t1044 * t929 - t703 * t932;
t1101 = -t1043 * t923 + t1080 * t925;
t1102 = t1043 * t925 + t1080 * t923;
t1118 = t1101 * t933 - t1102 * t930;
t1133 = t1081 * t924 + t1118 * t926;
t1134 = -t1081 * t926 + t1118 * t924;
t1143 = t1133 * t931 + t1134 * t934;
t1151 = pkin(6) * t1143;
t1144 = t1133 * t934 - t1134 * t931;
t1150 = pkin(6) * t1144;
t1149 = qJ(2) * t1134;
t1148 = pkin(1) * t1134 - pkin(2) * t1081 + pkin(7) * t1118;
t1117 = t1101 * t930 + t1102 * t933;
t1147 = -pkin(1) * t1117 + qJ(2) * t1133;
t1146 = t585 * t933 + t587 * t930;
t1145 = t605 * t933 + t609 * t930;
t1048 = -t779 + t824;
t1012 = t1048 * t929;
t793 = -t842 + t1031;
t1085 = -t793 * t932 - t1012;
t1011 = t1048 * t932;
t1084 = -t793 * t929 + t1011;
t1103 = -t1044 * t923 + t1084 * t925;
t1104 = t1044 * t925 + t1084 * t923;
t1116 = t1103 * t933 - t1104 * t930;
t1135 = -t1085 * t924 + t1116 * t926;
t1136 = t1085 * t926 + t1116 * t924;
t1142 = t1135 * t934 - t1136 * t931;
t1141 = t1135 * t931 + t1136 * t934;
t1139 = pkin(7) * t1117;
t1138 = -pkin(2) * t1117 - pkin(3) * t1102 - pkin(4) * t1043 - pkin(8) * t1080;
t768 = -t842 - t1031;
t666 = t768 * t932 - t1014;
t1132 = pkin(2) * t666;
t1131 = pkin(3) * t666;
t1130 = pkin(4) * t666;
t661 = t768 * t929 + t1013;
t1129 = pkin(8) * t661;
t1128 = pkin(8) * t666;
t1127 = t661 * t923;
t1126 = t661 * t925;
t1125 = t666 * t924;
t1124 = t666 * t926;
t1121 = qJ(4) * t1101;
t1120 = qJ(4) * t1102;
t1115 = t1103 * t930 + t1104 * t933;
t1113 = pkin(8) * t1081;
t1110 = qJ(6) * t1045;
t758 = -qJD(5) * t845 - t961;
t996 = t867 * t932;
t970 = t843 * t996;
t943 = -t758 * t929 + t970;
t973 = t923 * t779;
t1037 = t925 * t943 - t973;
t972 = t925 * t779;
t1038 = t923 * t943 + t972;
t1057 = t1037 * t933 - t1038 * t930;
t997 = t867 * t929;
t971 = t843 * t997;
t942 = -t758 * t932 - t971;
t1076 = t1057 * t926 - t924 * t942;
t1078 = t1057 * t924 + t926 * t942;
t1100 = t1076 * t934 - t1078 * t931;
t1099 = t1076 * t931 + t1078 * t934;
t789 = t845 * t997;
t950 = t789 - t970;
t1036 = t824 * t923 + t925 * t950;
t1039 = -t925 * t824 + t923 * t950;
t1059 = t1036 * t933 - t1039 * t930;
t790 = t845 * t996;
t949 = t790 + t971;
t1077 = t1059 * t926 - t924 * t949;
t1079 = t1059 * t924 + t926 * t949;
t1098 = t1077 * t934 - t1079 * t931;
t1097 = t1077 * t931 + t1079 * t934;
t1041 = -t1031 - t1032;
t1062 = t1041 * t929 + t1011;
t1096 = pkin(2) * t1062;
t1095 = pkin(3) * t1062;
t1094 = pkin(4) * t1062;
t1061 = t1041 * t932 - t1012;
t1093 = pkin(8) * t1061;
t1092 = pkin(8) * t1062;
t1089 = t1061 * t923;
t1088 = t1061 * t925;
t1087 = t1062 * t924;
t1086 = t1062 * t926;
t1030 = qJD(1) ^ 2;
t898 = g(1) * t934 + g(2) * t931;
t882 = -pkin(1) * t1030 - t898;
t897 = g(1) * t931 - t934 * g(2);
t944 = qJDD(1) * pkin(1) + t897;
t826 = t924 * t882 - t926 * t944;
t827 = t926 * t882 + t924 * t944;
t750 = t826 * t926 - t827 * t924;
t1008 = t750 * t931;
t962 = t826 * t924 + t926 * t827;
t665 = t934 * t962 + t1008;
t1007 = t750 * t934;
t1083 = -t931 * t962 + t1007;
t887 = qJDD(1) * t924 + t1030 * t926;
t888 = qJDD(1) * t926 - t1030 * t924;
t831 = -t887 * t931 + t934 * t888;
t920 = g(3) - qJDD(2);
t859 = qJ(2) * t887 - t920 * t926;
t947 = -qJ(2) * t888 - t920 * t924;
t1082 = -pkin(6) * t831 + t859 * t931 + t934 * t947;
t701 = -t932 * t940 - t789;
t951 = t925 * t701 + t973;
t952 = t923 * t701 - t972;
t1034 = -t930 * t952 + t933 * t951;
t700 = t929 * t940 - t790;
t1060 = t1034 * t926 - t700 * t924;
t1065 = t1034 * t924 + t926 * t700;
t1075 = t1060 * t934 - t1065 * t931;
t1074 = t1060 * t931 + t1065 * t934;
t1073 = 2 * qJD(6);
t983 = qJD(3) * t873;
t780 = t960 + t983;
t825 = t873 * t871;
t1042 = qJDD(3) - t825;
t1071 = t1042 * t923;
t1070 = t1042 * t925;
t1046 = t934 * t887 + t888 * t931;
t1064 = pkin(6) * t1046 + t859 * t934 - t931 * t947;
t1058 = t1036 * t930 + t1039 * t933;
t1056 = t1037 * t930 + t1038 * t933;
t939 = qJDD(1) * pkin(7) + t827;
t937 = -pkin(2) * t1030 + t939;
t788 = -t930 * t920 + t933 * t937;
t894 = qJD(3) * pkin(3) - qJ(4) * t987;
t919 = t933 ^ 2;
t916 = t919 * t1030;
t738 = -pkin(3) * t916 + qJ(4) * t885 - qJD(3) * t894 + t788;
t990 = t933 * t920;
t936 = -t930 * t939 - t990 - t884 * qJ(4) + qJDD(3) * pkin(3) + (qJD(3) * t933 * qJ(4) + (pkin(3) * t933 + pkin(2)) * t987) * qJD(1);
t641 = -0.2e1 * qJD(4) * t871 + t925 * t738 + t923 * t936;
t815 = pkin(4) * t871 - pkin(8) * t873;
t935 = qJD(3) ^ 2;
t613 = -pkin(4) * t935 + qJDD(3) * pkin(8) - t815 * t871 + t641;
t805 = -qJDD(1) * pkin(2) - t1030 * pkin(7) + t826;
t747 = -t885 * pkin(3) - qJ(4) * t916 + t894 * t987 + qJDD(4) + t805;
t984 = qJD(3) * t871;
t958 = -t829 + t984;
t644 = pkin(4) * t780 + t958 * pkin(8) + t747;
t560 = t932 * t613 + t929 * t644;
t773 = pkin(5) * t843 - qJ(6) * t845;
t948 = t824 * qJ(6) + t1073 * t867 - t843 * t773 + t560;
t1040 = -t758 * pkin(5) - t1110;
t1033 = t930 * t951 + t933 * t952;
t869 = t871 ^ 2;
t870 = t873 ^ 2;
t1029 = pkin(4) * t923;
t1028 = pkin(5) * t932;
t1027 = qJ(6) * t932;
t963 = t923 * t738 - t925 * t936;
t980 = qJD(4) * t873;
t640 = t963 + 0.2e1 * t980;
t566 = -t640 * t925 + t641 * t923;
t1026 = t566 * t930;
t1025 = t566 * t933;
t945 = -qJDD(3) * pkin(4) - t935 * pkin(8) + t963;
t612 = (0.2e1 * qJD(4) + t815) * t873 + t945;
t1024 = t612 * t929;
t1023 = t612 * t932;
t1010 = t747 * t923;
t1009 = t747 * t925;
t1004 = t805 * t930;
t1003 = t805 * t933;
t820 = qJDD(3) + t825;
t1002 = t820 * t923;
t1001 = t820 * t925;
t998 = t867 * t845;
t906 = t933 * t1030 * t930;
t895 = qJDD(3) + t906;
t993 = t895 * t930;
t896 = qJDD(3) - t906;
t992 = t896 * t930;
t991 = t896 * t933;
t559 = t929 * t613 - t932 * t644;
t989 = t1043 - t1031;
t918 = t930 ^ 2;
t988 = t918 + t919;
t985 = t1030 * t918;
t982 = qJD(3) * t923;
t981 = qJD(3) * t925;
t974 = qJDD(3) * t926;
t969 = t924 * t825;
t968 = t926 * t825;
t967 = -pkin(4) * t925 - pkin(3);
t964 = qJ(6) * t929 + pkin(4);
t567 = t640 * t923 + t925 * t641;
t786 = t930 * t937 + t990;
t717 = t786 * t930 + t933 * t788;
t839 = -t897 * t931 - t934 * t898;
t956 = t924 * t906;
t955 = t926 * t906;
t954 = t845 * t773 + qJDD(6) + t559;
t891 = qJDD(1) * t934 - t1030 * t931;
t953 = -pkin(6) * t891 - g(3) * t931;
t481 = -t559 * t932 + t560 * t929;
t482 = t559 * t929 + t560 * t932;
t716 = t786 * t933 - t788 * t930;
t838 = t897 * t934 - t898 * t931;
t782 = -t960 + t983;
t941 = -t824 * pkin(5) + t954;
t938 = t1073 * t845 - t873 * t815 - t1040 - t945 - 0.2e1 * t980;
t910 = t924 * qJDD(3);
t905 = -t916 - t935;
t904 = t916 - t935;
t903 = -t935 - t985;
t902 = t935 - t985;
t893 = t916 - t985;
t892 = t916 + t985;
t890 = qJDD(1) * t931 + t1030 * t934;
t889 = t988 * qJDD(1);
t886 = t913 - 0.2e1 * t966;
t883 = 0.2e1 * t965 + t975;
t880 = t933 * t895;
t879 = t988 * t976;
t868 = -pkin(6) * t890 + g(3) * t934;
t863 = -t870 - t935;
t862 = -t870 + t935;
t861 = t869 - t935;
t855 = t884 * t933 - t918 * t976;
t854 = -t885 * t930 - t919 * t976;
t853 = t879 * t926 + t910;
t852 = t879 * t924 - t974;
t851 = -t903 * t930 - t991;
t850 = -t902 * t930 + t880;
t849 = t905 * t933 - t993;
t848 = t904 * t933 - t992;
t847 = t903 * t933 - t992;
t846 = t905 * t930 + t880;
t836 = t889 * t926 - t892 * t924;
t835 = t889 * t924 + t892 * t926;
t830 = -t883 * t930 + t886 * t933;
t823 = t869 - t870;
t817 = -t935 - t869;
t814 = t855 * t926 - t956;
t813 = t854 * t926 + t956;
t812 = t855 * t924 + t955;
t811 = t854 * t924 - t955;
t809 = t850 * t926 + t924 * t975;
t808 = t848 * t926 + t913 * t924;
t807 = t850 * t924 - t926 * t975;
t806 = t848 * t924 - t913 * t926;
t800 = (-t871 * t925 + t873 * t923) * qJD(3);
t799 = (-t871 * t923 - t873 * t925) * qJD(3);
t797 = t851 * t926 + t883 * t924;
t796 = t849 * t926 - t886 * t924;
t795 = t851 * t924 - t883 * t926;
t794 = t849 * t924 + t886 * t926;
t787 = t830 * t926 - t893 * t924;
t785 = t830 * t924 + t893 * t926;
t784 = -t829 - t984;
t777 = -t869 - t870;
t772 = t829 * t925 - t873 * t982;
t771 = t829 * t923 + t873 * t981;
t770 = t871 * t981 + t923 * t960;
t769 = t871 * t982 - t925 * t960;
t766 = -t863 * t923 - t1001;
t765 = -t862 * t923 + t1070;
t764 = t861 * t925 - t1002;
t763 = t863 * t925 - t1002;
t762 = t862 * t925 + t1071;
t761 = t861 * t923 + t1001;
t760 = -t835 * t931 + t836 * t934;
t759 = t835 * t934 + t836 * t931;
t757 = -pkin(7) * t847 + t1003;
t756 = -pkin(7) * t846 + t1004;
t746 = -pkin(2) * t847 + t788;
t745 = -pkin(2) * t846 + t786;
t742 = t817 * t925 - t1071;
t741 = t817 * t923 + t1070;
t737 = pkin(1) * t920 + qJ(2) * t962;
t724 = -t799 * t930 + t800 * t933;
t723 = -t795 * t931 + t797 * t934;
t722 = -t794 * t931 + t796 * t934;
t721 = t795 * t934 + t797 * t931;
t720 = t794 * t934 + t796 * t931;
t719 = t724 * t926 + t910;
t718 = t724 * t924 - t974;
t714 = t782 * t925 - t784 * t923;
t713 = -t780 * t925 + t923 * t958;
t712 = t782 * t923 + t784 * t925;
t711 = -t780 * t923 - t925 * t958;
t710 = t843 * t977 + t946;
t704 = -t758 + t998;
t692 = -t771 * t930 + t772 * t933;
t691 = -t769 * t930 + t770 * t933;
t690 = -t763 * t930 + t766 * t933;
t689 = -t762 * t930 + t765 * t933;
t688 = -t761 * t930 + t764 * t933;
t687 = t763 * t933 + t766 * t930;
t674 = -qJ(2) * t835 + t716 * t926;
t673 = qJ(2) * t836 + t716 * t924;
t672 = -qJ(4) * t763 + t1009;
t671 = t717 * t926 + t805 * t924;
t670 = t717 * t924 - t805 * t926;
t663 = -qJ(4) * t741 + t1010;
t658 = t692 * t926 + t969;
t657 = t691 * t926 - t969;
t656 = t692 * t924 - t968;
t655 = t691 * t924 + t968;
t654 = -t741 * t930 + t742 * t933;
t653 = t741 * t933 + t742 * t930;
t639 = t690 * t926 - t924 * t958;
t638 = t689 * t926 - t784 * t924;
t637 = t688 * t926 + t782 * t924;
t636 = t690 * t924 + t926 * t958;
t635 = t689 * t924 + t784 * t926;
t634 = t688 * t924 - t782 * t926;
t632 = pkin(3) * t958 + qJ(4) * t766 + t1010;
t631 = -qJ(2) * t795 - t746 * t924 + t757 * t926;
t630 = -qJ(2) * t794 - t745 * t924 + t756 * t926;
t629 = -pkin(3) * t780 + qJ(4) * t742 - t1009;
t628 = -t712 * t930 + t714 * t933;
t627 = -t711 * t930 + t713 * t933;
t626 = t712 * t933 + t714 * t930;
t625 = t654 * t926 + t780 * t924;
t624 = t654 * t924 - t780 * t926;
t623 = -pkin(1) * t847 + qJ(2) * t797 + t746 * t926 + t757 * t924;
t622 = -pkin(1) * t846 + qJ(2) * t796 + t745 * t926 + t756 * t924;
t601 = t627 * t926 - t823 * t924;
t600 = t627 * t924 + t823 * t926;
t599 = t704 * t923 + t1088;
t598 = -t710 * t923 - t1126;
t597 = -t704 * t925 + t1089;
t596 = t710 * t925 - t1127;
t593 = t702 * t923 + t1088;
t592 = -t1045 * t923 + t1126;
t591 = -t702 * t925 + t1089;
t590 = t1045 * t925 + t1127;
t589 = t628 * t926 + t777 * t924;
t588 = t628 * t924 - t777 * t926;
t583 = -t670 * t931 + t671 * t934;
t582 = t670 * t934 + t671 * t931;
t577 = -pkin(2) * t626 - pkin(3) * t712;
t568 = -qJ(2) * t670 - (pkin(2) * t924 - pkin(7) * t926) * t716;
t565 = -pkin(2) * t687 - pkin(3) * t763 + t641;
t564 = -t636 * t931 + t639 * t934;
t563 = t636 * t934 + t639 * t931;
t562 = t1023 - t1128;
t561 = t1024 - t1092;
t558 = -pkin(2) * t653 - pkin(3) * t741 + t640;
t557 = -t624 * t931 + t625 * t934;
t556 = t624 * t934 + t625 * t931;
t555 = -pkin(4) * t1081 - pkin(5) * t1044 + qJ(6) * t703;
t554 = -pkin(3) * t747 + qJ(4) * t567;
t553 = -pkin(7) * t687 - t632 * t930 + t672 * t933;
t552 = qJ(2) * t671 - (-pkin(2) * t926 - pkin(7) * t924 - pkin(1)) * t716;
t543 = -qJ(4) * t712 - t566;
t542 = (pkin(5) * t867 - (2 * qJD(6))) * t845 + t612 + t1040;
t537 = -pkin(7) * t653 - t629 * t930 + t663 * t933;
t536 = -pkin(3) * t777 + qJ(4) * t714 + t567;
t535 = -t597 * t930 + t599 * t933;
t534 = -t596 * t930 + t598 * t933;
t533 = t597 * t933 + t599 * t930;
t532 = t596 * t933 + t598 * t930;
t531 = -t591 * t930 + t593 * t933;
t530 = -t590 * t930 + t592 * t933;
t529 = t591 * t933 + t593 * t930;
t528 = t590 * t933 + t592 * t930;
t527 = qJ(6) * t1031 - t941;
t526 = -t588 * t931 + t589 * t934;
t525 = t588 * t934 + t589 * t931;
t522 = -pkin(5) * t1031 + t948;
t521 = t560 - t1130;
t520 = t559 - t1094;
t519 = (-t704 - t998) * pkin(5) + t938;
t518 = -pkin(5) * t998 + t1110 + t938;
t513 = qJ(6) * t989 + t941;
t504 = pkin(5) * t989 + t948;
t503 = t535 * t926 + t1087;
t502 = t534 * t926 + t1125;
t501 = t535 * t924 - t1086;
t500 = t534 * t924 - t1124;
t499 = t531 * t926 + t1087;
t498 = t530 * t926 - t1125;
t497 = t531 * t924 - t1086;
t496 = t530 * t924 + t1124;
t495 = t567 * t933 - t1026;
t494 = t567 * t930 + t1025;
t489 = t495 * t926 + t747 * t924;
t488 = t495 * t924 - t747 * t926;
t483 = -t1094 + (-t1041 - t1031) * qJ(6) + (-t1048 - t824) * pkin(5) + t954;
t480 = -t1027 * t704 - t519 * t929 - t1092;
t479 = -pkin(5) * t1017 + t518 * t932 + t1128;
t478 = t1130 - qJ(6) * t1047 + (t768 + t1031) * pkin(5) - t948;
t477 = -qJ(2) * t636 + t553 * t926 - t565 * t924;
t476 = -t481 - t1113;
t475 = t482 * t925 + t612 * t923;
t474 = t482 * t923 - t612 * t925;
t473 = t522 * t932 - t527 * t929;
t472 = t522 * t929 + t527 * t932;
t471 = -pkin(2) * t494 - pkin(3) * t566;
t470 = -pkin(1) * t687 + qJ(2) * t639 + t553 * t924 + t565 * t926;
t469 = -qJ(2) * t624 + t537 * t926 - t558 * t924;
t468 = -pkin(7) * t626 - t536 * t930 + t543 * t933;
t467 = -qJ(4) * t596 - t521 * t923 + t562 * t925;
t466 = -qJ(4) * t591 - t520 * t923 + t561 * t925;
t465 = -pkin(2) * t532 - pkin(3) * t596 - pkin(4) * t710 - t1024 + t1129;
t464 = -pkin(2) * t529 - pkin(3) * t591 + pkin(4) * t702 + t1023 - t1093;
t463 = -pkin(1) * t653 + qJ(2) * t625 + t537 * t924 + t558 * t926;
t462 = qJ(4) * t598 + t521 * t925 + t562 * t923 - t1131;
t461 = -t501 * t931 + t503 * t934;
t460 = -t500 * t931 + t502 * t934;
t459 = t501 * t934 + t503 * t931;
t458 = t500 * t934 + t502 * t931;
t457 = qJ(4) * t593 + t520 * t925 + t561 * t923 - t1095;
t456 = -t497 * t931 + t499 * t934;
t455 = -t496 * t931 + t498 * t934;
t454 = t497 * t934 + t499 * t931;
t453 = t496 * t934 + t498 * t931;
t452 = -t504 * t929 + t513 * t932 - t1113;
t451 = -pkin(7) * t494 - qJ(4) * t1025 - t554 * t930;
t450 = t1029 * t1081 + t476 * t925 - t1120;
t449 = t473 * t925 + t542 * t923;
t448 = t473 * t923 - t542 * t925;
t447 = -t488 * t931 + t489 * t934;
t446 = t488 * t934 + t489 * t931;
t441 = -pkin(2) * t533 - pkin(3) * t597 - t932 * t519 + t704 * t964 - t1093;
t440 = -pkin(2) * t528 - pkin(3) * t590 - t1129 - t929 * t518 + (-pkin(4) - t1028) * t1045;
t439 = t1081 * t967 + t923 * t476 + t1121;
t438 = -qJ(2) * t588 + t468 * t926 - t577 * t924;
t437 = -qJ(4) * t597 + t480 * t925 - t483 * t923;
t436 = -qJ(4) * t590 - t478 * t923 + t479 * t925;
t435 = -pkin(1) * t626 + qJ(2) * t589 + t468 * t924 + t577 * t926;
t434 = t1138 - t482;
t433 = -pkin(8) * t472 + (pkin(5) * t929 - t1027) * t542;
t432 = qJ(4) * t599 + t480 * t923 + t483 * t925 - t1095;
t431 = qJ(4) * t592 + t478 * t925 + t479 * t923 + t1131;
t430 = -t474 * t930 + t475 * t933;
t429 = t474 * t933 + t475 * t930;
t428 = -pkin(4) * t472 - pkin(5) * t527 - qJ(6) * t522;
t427 = t452 * t925 - t555 * t923 - t1120;
t426 = -pkin(3) * t1081 + t452 * t923 + t555 * t925 + t1121;
t425 = -t504 * t932 - t513 * t929 + t1138;
t424 = -qJ(4) * t474 + (-pkin(8) * t925 + t1029) * t481;
t423 = t430 * t926 + t481 * t924;
t422 = t430 * t924 - t481 * t926;
t421 = -pkin(7) * t532 - t462 * t930 + t467 * t933;
t420 = -pkin(7) * t529 - t457 * t930 + t466 * t933;
t419 = -t448 * t930 + t449 * t933;
t418 = t448 * t933 + t449 * t930;
t417 = -qJ(2) * t488 + t451 * t926 - t471 * t924;
t416 = qJ(4) * t475 + (-pkin(8) * t923 + t967) * t481;
t415 = -t439 * t930 + t450 * t933 - t1139;
t414 = -pkin(1) * t494 + qJ(2) * t489 + t451 * t924 + t471 * t926;
t413 = -pkin(2) * t429 - pkin(3) * t474 + pkin(4) * t612 - pkin(8) * t482;
t412 = t419 * t926 + t472 * t924;
t411 = t419 * t924 - t472 * t926;
t410 = -pkin(7) * t533 - t432 * t930 + t437 * t933;
t409 = -pkin(7) * t528 - t431 * t930 + t436 * t933;
t408 = -qJ(2) * t500 + t421 * t926 - t465 * t924;
t407 = -qJ(2) * t497 + t420 * t926 - t464 * t924;
t406 = -t426 * t930 + t427 * t933 - t1139;
t405 = -pkin(1) * t532 + qJ(2) * t502 + t421 * t924 + t465 * t926;
t404 = -pkin(1) * t529 + qJ(2) * t499 + t420 * t924 + t464 * t926;
t403 = -qJ(4) * t448 - t428 * t923 + t433 * t925;
t402 = -t422 * t931 + t423 * t934;
t401 = t422 * t934 + t423 * t931;
t400 = t415 * t926 - t434 * t924 - t1149;
t399 = -pkin(3) * t472 + qJ(4) * t449 + t428 * t925 + t433 * t923;
t398 = -qJ(2) * t501 + t410 * t926 - t441 * t924;
t397 = -qJ(2) * t496 + t409 * t926 - t440 * t924;
t396 = -pkin(2) * t418 - pkin(3) * t448 - pkin(8) * t473 + (t964 + t1028) * t542;
t395 = t415 * t924 + t434 * t926 + t1147;
t394 = -pkin(1) * t533 + qJ(2) * t503 + t410 * t924 + t441 * t926;
t393 = -pkin(1) * t528 + qJ(2) * t498 + t409 * t924 + t440 * t926;
t392 = -pkin(7) * t429 - t416 * t930 + t424 * t933;
t391 = t406 * t926 - t425 * t924 - t1149;
t390 = -t411 * t931 + t412 * t934;
t389 = t411 * t934 + t412 * t931;
t388 = t406 * t924 + t425 * t926 + t1147;
t387 = -qJ(2) * t422 + t392 * t926 - t413 * t924;
t386 = -pkin(7) * t418 - t399 * t930 + t403 * t933;
t385 = -pkin(1) * t429 + qJ(2) * t423 + t392 * t924 + t413 * t926;
t384 = -qJ(2) * t411 + t386 * t926 - t396 * t924;
t383 = -pkin(1) * t418 + qJ(2) * t412 + t386 * t924 + t396 * t926;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t890, -t891, 0, t839, 0, 0, 0, 0, 0, 0, -t1046, -t831, 0, t665, 0, 0, 0, 0, 0, 0, t722, t723, t760, t583, 0, 0, 0, 0, 0, 0, t557, t564, t526, t447, 0, 0, 0, 0, 0, 0, t456, t460, t1144, t402, 0, 0, 0, 0, 0, 0, t461, t1144, t455, t390; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t891, -t890, 0, t838, 0, 0, 0, 0, 0, 0, t831, -t1046, 0, -t1083, 0, 0, 0, 0, 0, 0, t720, t721, t759, t582, 0, 0, 0, 0, 0, 0, t556, t563, t525, t446, 0, 0, 0, 0, 0, 0, t454, t458, t1143, t401, 0, 0, 0, 0, 0, 0, t459, t1143, t453, t389; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t920, 0, 0, 0, 0, 0, 0, t846, t847, 0, -t716, 0, 0, 0, 0, 0, 0, t653, t687, t626, t494, 0, 0, 0, 0, 0, 0, t529, t532, t1117, t429, 0, 0, 0, 0, 0, 0, t533, t1117, t528, t418; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t891, 0, -t890, 0, t953, -t868, -t838, -pkin(6) * t838, 0, 0, t831, 0, -t1046, 0, t1082, t1064, t1083, pkin(6) * t1083 + qJ(2) * t1007 - t737 * t931, -t812 * t931 + t814 * t934, -t785 * t931 + t787 * t934, -t807 * t931 + t809 * t934, -t811 * t931 + t813 * t934, -t806 * t931 + t808 * t934, -t852 * t931 + t853 * t934, -pkin(6) * t720 - t622 * t931 + t630 * t934, -pkin(6) * t721 - t623 * t931 + t631 * t934, -pkin(6) * t759 - t673 * t931 + t674 * t934, -pkin(6) * t582 - t552 * t931 + t568 * t934, -t656 * t931 + t658 * t934, -t600 * t931 + t601 * t934, -t635 * t931 + t638 * t934, -t655 * t931 + t657 * t934, -t634 * t931 + t637 * t934, -t718 * t931 + t719 * t934, -pkin(6) * t556 - t463 * t931 + t469 * t934, -pkin(6) * t563 - t470 * t931 + t477 * t934, -pkin(6) * t525 - t435 * t931 + t438 * t934, -pkin(6) * t446 - t414 * t931 + t417 * t934, t1075, t1154, t1142, t1100, t1152, t1098, -pkin(6) * t454 - t404 * t931 + t407 * t934, -pkin(6) * t458 - t405 * t931 + t408 * t934, -t395 * t931 + t400 * t934 - t1151, -pkin(6) * t401 - t385 * t931 + t387 * t934, t1075, t1142, -t1154, t1098, -t1152, t1100, -pkin(6) * t459 - t394 * t931 + t398 * t934, -t388 * t931 + t391 * t934 - t1151, -pkin(6) * t453 - t393 * t931 + t397 * t934, -pkin(6) * t389 - t383 * t931 + t384 * t934; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t890, 0, t891, 0, t868, t953, t839, pkin(6) * t839, 0, 0, t1046, 0, t831, 0, -t1064, t1082, t665, pkin(6) * t665 + qJ(2) * t1008 + t737 * t934, t812 * t934 + t814 * t931, t785 * t934 + t787 * t931, t807 * t934 + t809 * t931, t811 * t934 + t813 * t931, t806 * t934 + t808 * t931, t852 * t934 + t853 * t931, pkin(6) * t722 + t622 * t934 + t630 * t931, pkin(6) * t723 + t623 * t934 + t631 * t931, pkin(6) * t760 + t673 * t934 + t674 * t931, pkin(6) * t583 + t552 * t934 + t568 * t931, t656 * t934 + t658 * t931, t600 * t934 + t601 * t931, t635 * t934 + t638 * t931, t655 * t934 + t657 * t931, t634 * t934 + t637 * t931, t718 * t934 + t719 * t931, pkin(6) * t557 + t463 * t934 + t469 * t931, pkin(6) * t564 + t470 * t934 + t477 * t931, pkin(6) * t526 + t435 * t934 + t438 * t931, pkin(6) * t447 + t414 * t934 + t417 * t931, t1074, -t1155, t1141, t1099, -t1153, t1097, pkin(6) * t456 + t404 * t934 + t407 * t931, pkin(6) * t460 + t405 * t934 + t408 * t931, t395 * t934 + t400 * t931 + t1150, pkin(6) * t402 + t385 * t934 + t387 * t931, t1074, t1141, t1155, t1097, t1153, t1099, pkin(6) * t461 + t394 * t934 + t398 * t931, t388 * t934 + t391 * t931 + t1150, pkin(6) * t455 + t393 * t934 + t397 * t931, pkin(6) * t390 + t383 * t934 + t384 * t931; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t897, t898, 0, 0, 0, 0, 0, 0, 0, qJDD(1), pkin(1) * t888 - t826, -pkin(1) * t887 - t827, 0, -pkin(1) * t750, (t884 + t965) * t930, t883 * t933 + t886 * t930, t902 * t933 + t993, (t885 - t966) * t933, t904 * t930 + t991, 0, pkin(1) * t794 + pkin(2) * t886 + pkin(7) * t849 - t1003, pkin(1) * t795 - pkin(2) * t883 + pkin(7) * t851 + t1004, pkin(1) * t835 + pkin(2) * t892 + pkin(7) * t889 + t717, pkin(1) * t670 - pkin(2) * t805 + pkin(7) * t717, t771 * t933 + t772 * t930, t711 * t933 + t713 * t930, t762 * t933 + t765 * t930, t769 * t933 + t770 * t930, t761 * t933 + t764 * t930, t799 * t933 + t800 * t930, pkin(1) * t624 - pkin(2) * t780 + pkin(7) * t654 + t629 * t933 + t663 * t930, pkin(1) * t636 + pkin(2) * t958 + pkin(7) * t690 + t632 * t933 + t672 * t930, pkin(1) * t588 - pkin(2) * t777 + pkin(7) * t628 + t536 * t933 + t543 * t930, pkin(1) * t488 - pkin(2) * t747 + pkin(7) * t495 - qJ(4) * t1026 + t554 * t933, t1033, t1146, t1115, t1056, t1145, t1058, pkin(1) * t497 + pkin(7) * t531 + t457 * t933 + t466 * t930 - t1096, pkin(1) * t500 + pkin(7) * t534 + t462 * t933 + t467 * t930 - t1132, t439 * t933 + t450 * t930 + t1148, pkin(1) * t422 - pkin(2) * t481 + pkin(7) * t430 + t416 * t933 + t424 * t930, t1033, t1115, -t1146, t1058, -t1145, t1056, pkin(1) * t501 + pkin(7) * t535 + t432 * t933 + t437 * t930 - t1096, t426 * t933 + t427 * t930 + t1148, pkin(1) * t496 + pkin(7) * t530 + t431 * t933 + t436 * t930 + t1132, pkin(1) * t411 - pkin(2) * t472 + pkin(7) * t419 + t399 * t933 + t403 * t930;];
tauB_reg  = t1;
