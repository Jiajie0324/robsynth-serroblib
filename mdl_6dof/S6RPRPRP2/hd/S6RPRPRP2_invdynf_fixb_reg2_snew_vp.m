% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRPRP2
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta2,theta4]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 17:36
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRPRP2_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP2_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP2_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRP2_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRP2_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRP2_invdynf_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 17:35:59
% EndTime: 2019-05-05 17:36:07
% DurationCPUTime: 8.38s
% Computational Cost: add. (21058->281), mult. (46071->362), div. (0->0), fcn. (31576->10), ass. (0->205)
t2276 = cos(qJ(3));
t2311 = qJD(1) * t2276;
t2296 = qJD(3) * t2311;
t2273 = sin(qJ(3));
t2298 = t2273 * qJDD(1);
t2235 = t2296 + t2298;
t2260 = t2276 * qJDD(1);
t2312 = qJD(1) * t2273;
t2297 = qJD(3) * t2312;
t2236 = t2260 - t2297;
t2266 = sin(pkin(10));
t2268 = cos(pkin(10));
t2292 = t2235 * t2266 - t2268 * t2236;
t2290 = qJDD(5) + t2292;
t2228 = t2266 * t2311 + t2268 * t2312;
t2272 = sin(qJ(5));
t2275 = cos(qJ(5));
t2213 = -qJD(3) * t2275 + t2228 * t2272;
t2215 = qJD(3) * t2272 + t2228 * t2275;
t2304 = t2213 * t2215;
t2161 = t2290 + t2304;
t2212 = t2215 ^ 2;
t2226 = t2266 * t2312 - t2268 * t2311;
t2225 = qJD(5) + t2226;
t2316 = t2225 ^ 2;
t2320 = -t2212 - t2316;
t2137 = t2161 * t2275 + t2272 * t2320;
t2208 = t2235 * t2268 + t2236 * t2266;
t2285 = -qJD(5) * t2213 + qJDD(3) * t2272 + t2208 * t2275;
t2303 = t2213 * t2225;
t2284 = t2285 - t2303;
t2108 = t2137 * t2266 + t2268 * t2284;
t2110 = t2137 * t2268 - t2266 * t2284;
t2095 = t2108 * t2273 - t2110 * t2276;
t2135 = t2161 * t2272 - t2275 * t2320;
t2267 = sin(pkin(9));
t2269 = cos(pkin(9));
t2079 = t2095 * t2267 + t2135 * t2269;
t2081 = t2095 * t2269 - t2135 * t2267;
t2274 = sin(qJ(1));
t2277 = cos(qJ(1));
t2344 = t2079 * t2277 + t2081 * t2274;
t2343 = t2079 * t2274 - t2081 * t2277;
t2089 = t2108 * t2276 + t2110 * t2273;
t2151 = t2285 + t2303;
t2293 = -t2275 * qJDD(3) + t2272 * t2208;
t2286 = (-qJD(5) + t2225) * t2215 - t2293;
t2318 = -t2151 * t2275 + t2272 * t2286;
t2182 = t2213 ^ 2;
t2168 = t2212 + t2182;
t2317 = t2151 * t2272 + t2275 * t2286;
t2329 = t2168 * t2268 + t2266 * t2317;
t2330 = -t2168 * t2266 + t2268 * t2317;
t2335 = -t2273 * t2329 + t2276 * t2330;
t2339 = t2267 * t2318 + t2269 * t2335;
t2340 = t2267 * t2335 - t2269 * t2318;
t2342 = -t2274 * t2340 + t2277 * t2339;
t2341 = t2274 * t2339 + t2277 * t2340;
t2336 = t2273 * t2330 + t2276 * t2329;
t2162 = t2290 - t2304;
t2319 = -t2316 - t2182;
t2323 = -t2162 * t2272 + t2275 * t2319;
t2334 = t2266 * t2323;
t2324 = t2162 * t2275 + t2272 * t2319;
t2333 = t2267 * t2324;
t2332 = t2268 * t2323;
t2331 = t2269 * t2324;
t2315 = t2226 ^ 2;
t2314 = t2228 ^ 2;
t2313 = -2 * qJD(4);
t2310 = qJD(3) * t2226;
t2309 = qJD(3) * t2228;
t2302 = t2226 * t2228;
t2262 = t2276 ^ 2;
t2279 = qJD(1) ^ 2;
t2301 = t2262 * t2279;
t2300 = t2273 * t2279;
t2263 = -g(3) + qJDD(2);
t2248 = -g(1) * t2277 - g(2) * t2274;
t2233 = -pkin(1) * t2279 + t2248;
t2247 = g(1) * t2274 - g(2) * t2277;
t2287 = qJDD(1) * pkin(1) + t2247;
t2207 = t2269 * t2233 + t2267 * t2287;
t2283 = -t2279 * pkin(2) + qJDD(1) * pkin(7) + t2207;
t2188 = t2273 * t2263 + t2276 * t2283;
t2244 = qJD(3) * pkin(3) - qJ(4) * t2312;
t2164 = -pkin(3) * t2301 + qJ(4) * t2236 - qJD(3) * t2244 + t2188;
t2282 = t2273 * t2283;
t2280 = -t2282 - t2235 * qJ(4) + qJDD(3) * pkin(3) + (qJ(4) * qJD(1) * qJD(3) + pkin(3) * t2300 + t2263) * t2276;
t2130 = t2268 * t2164 + t2226 * t2313 + t2266 * t2280;
t2200 = pkin(4) * t2226 - pkin(8) * t2228;
t2278 = qJD(3) ^ 2;
t2118 = -pkin(4) * t2278 + qJDD(3) * pkin(8) - t2200 * t2226 + t2130;
t2206 = -t2267 * t2233 + t2269 * t2287;
t2199 = -qJDD(1) * pkin(2) - t2279 * pkin(7) - t2206;
t2169 = -t2236 * pkin(3) - qJ(4) * t2301 + t2244 * t2312 + qJDD(4) + t2199;
t2183 = t2292 + t2309;
t2295 = -t2208 + t2310;
t2281 = pkin(4) * t2183 + pkin(8) * t2295 + t2169;
t2099 = t2275 * t2118 + t2272 * t2281;
t2261 = t2273 ^ 2;
t2299 = t2261 + t2262;
t2098 = -t2272 * t2118 + t2275 * t2281;
t2294 = t2266 * t2164 - t2268 * t2280;
t2238 = -qJDD(1) * t2267 - t2269 * t2279;
t2239 = qJDD(1) * t2269 - t2267 * t2279;
t2291 = t2277 * t2238 - t2239 * t2274;
t2289 = t2238 * t2274 + t2239 * t2277;
t2288 = -qJD(5) * t2215 - t2293;
t2117 = -qJDD(3) * pkin(4) - t2278 * pkin(8) + ((2 * qJD(4)) + t2200) * t2228 + t2294;
t2254 = t2276 * t2300;
t2253 = -t2278 - t2301;
t2252 = -t2261 * t2279 - t2278;
t2246 = -qJDD(3) + t2254;
t2245 = qJDD(3) + t2254;
t2243 = t2299 * t2279;
t2242 = -qJDD(1) * t2274 - t2277 * t2279;
t2241 = qJDD(1) * t2277 - t2274 * t2279;
t2240 = t2299 * qJDD(1);
t2237 = t2260 - 0.2e1 * t2297;
t2234 = 0.2e1 * t2296 + t2298;
t2220 = -t2278 - t2314;
t2219 = t2246 * t2276 - t2252 * t2273;
t2218 = -t2245 * t2273 + t2253 * t2276;
t2217 = t2246 * t2273 + t2252 * t2276;
t2216 = t2245 * t2276 + t2253 * t2273;
t2210 = t2240 * t2269 - t2243 * t2267;
t2209 = t2240 * t2267 + t2243 * t2269;
t2204 = -qJDD(3) - t2302;
t2203 = qJDD(3) - t2302;
t2201 = -t2278 - t2315;
t2192 = t2219 * t2269 + t2234 * t2267;
t2191 = t2218 * t2269 - t2237 * t2267;
t2190 = t2219 * t2267 - t2234 * t2269;
t2189 = t2218 * t2267 + t2237 * t2269;
t2187 = t2276 * t2263 - t2282;
t2186 = -t2208 - t2310;
t2184 = -t2292 + t2309;
t2181 = -t2314 - t2315;
t2180 = pkin(5) * t2213 - qJ(6) * t2215;
t2177 = t2204 * t2268 - t2220 * t2266;
t2176 = t2204 * t2266 + t2220 * t2268;
t2171 = -t2206 * t2267 + t2207 * t2269;
t2170 = t2206 * t2269 + t2207 * t2267;
t2166 = t2201 * t2268 - t2203 * t2266;
t2165 = t2201 * t2266 + t2203 * t2268;
t2157 = -t2187 * t2273 + t2188 * t2276;
t2156 = t2187 * t2276 + t2188 * t2273;
t2155 = t2184 * t2268 - t2186 * t2266;
t2154 = t2184 * t2266 + t2186 * t2268;
t2148 = t2225 * t2215 - t2288;
t2147 = (qJD(5) + t2225) * t2215 + t2293;
t2146 = -t2176 * t2273 + t2177 * t2276;
t2145 = t2176 * t2276 + t2177 * t2273;
t2144 = t2157 * t2269 + t2199 * t2267;
t2143 = t2157 * t2267 - t2199 * t2269;
t2134 = -t2165 * t2273 + t2166 * t2276;
t2133 = t2165 * t2276 + t2166 * t2273;
t2129 = t2228 * t2313 - t2294;
t2128 = t2146 * t2269 - t2267 * t2295;
t2127 = t2146 * t2267 + t2269 * t2295;
t2126 = -t2154 * t2273 + t2155 * t2276;
t2125 = t2154 * t2276 + t2155 * t2273;
t2124 = t2134 * t2269 + t2183 * t2267;
t2123 = t2134 * t2267 - t2183 * t2269;
t2115 = t2148 * t2266 + t2332;
t2113 = -t2148 * t2268 + t2334;
t2111 = t2147 * t2266 + t2332;
t2109 = -t2147 * t2268 + t2334;
t2107 = t2126 * t2269 + t2181 * t2267;
t2106 = t2126 * t2267 - t2181 * t2269;
t2101 = -t2129 * t2266 + t2130 * t2268;
t2100 = t2129 * t2268 + t2130 * t2266;
t2097 = -t2288 * pkin(5) + (pkin(5) * t2225 - (2 * qJD(6))) * t2215 + t2117 - t2284 * qJ(6);
t2096 = -t2113 * t2273 + t2115 * t2276;
t2094 = t2113 * t2276 + t2115 * t2273;
t2092 = -t2109 * t2273 + t2111 * t2276;
t2090 = t2109 * t2276 + t2111 * t2273;
t2088 = -pkin(5) * t2290 - qJ(6) * t2316 + t2215 * t2180 + qJDD(6) - t2098;
t2087 = -pkin(5) * t2316 + qJ(6) * t2290 + 0.2e1 * qJD(6) * t2225 - t2213 * t2180 + t2099;
t2082 = t2096 * t2269 + t2333;
t2080 = t2096 * t2267 - t2331;
t2078 = t2092 * t2269 + t2333;
t2076 = t2092 * t2267 - t2331;
t2074 = -t2100 * t2273 + t2101 * t2276;
t2073 = t2100 * t2276 + t2101 * t2273;
t2072 = t2074 * t2269 + t2169 * t2267;
t2071 = t2074 * t2267 - t2169 * t2269;
t2066 = -t2098 * t2272 + t2099 * t2275;
t2065 = t2098 * t2275 + t2099 * t2272;
t2064 = t2066 * t2268 + t2117 * t2266;
t2063 = t2066 * t2266 - t2117 * t2268;
t2062 = t2087 * t2275 + t2088 * t2272;
t2061 = t2087 * t2272 - t2088 * t2275;
t2060 = t2062 * t2268 + t2097 * t2266;
t2059 = t2062 * t2266 - t2097 * t2268;
t2058 = -t2063 * t2273 + t2064 * t2276;
t2057 = t2063 * t2276 + t2064 * t2273;
t2056 = t2058 * t2269 + t2065 * t2267;
t2055 = t2058 * t2267 - t2065 * t2269;
t2054 = -t2059 * t2273 + t2060 * t2276;
t2053 = t2059 * t2276 + t2060 * t2273;
t2052 = t2054 * t2269 + t2061 * t2267;
t2051 = t2054 * t2267 - t2061 * t2269;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2242, -t2241, 0, -t2247 * t2274 + t2248 * t2277, 0, 0, 0, 0, 0, 0, t2291, -t2289, 0, -t2170 * t2274 + t2171 * t2277, 0, 0, 0, 0, 0, 0, -t2189 * t2274 + t2191 * t2277, -t2190 * t2274 + t2192 * t2277, -t2209 * t2274 + t2210 * t2277, -t2143 * t2274 + t2144 * t2277, 0, 0, 0, 0, 0, 0, -t2123 * t2274 + t2124 * t2277, -t2127 * t2274 + t2128 * t2277, -t2106 * t2274 + t2107 * t2277, -t2071 * t2274 + t2072 * t2277, 0, 0, 0, 0, 0, 0, -t2076 * t2274 + t2078 * t2277, -t2343, t2342, -t2055 * t2274 + t2056 * t2277, 0, 0, 0, 0, 0, 0, -t2080 * t2274 + t2082 * t2277, t2342, t2343, -t2051 * t2274 + t2052 * t2277; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2241, t2242, 0, t2247 * t2277 + t2248 * t2274, 0, 0, 0, 0, 0, 0, t2289, t2291, 0, t2170 * t2277 + t2171 * t2274, 0, 0, 0, 0, 0, 0, t2189 * t2277 + t2191 * t2274, t2190 * t2277 + t2192 * t2274, t2209 * t2277 + t2210 * t2274, t2143 * t2277 + t2144 * t2274, 0, 0, 0, 0, 0, 0, t2123 * t2277 + t2124 * t2274, t2127 * t2277 + t2128 * t2274, t2106 * t2277 + t2107 * t2274, t2071 * t2277 + t2072 * t2274, 0, 0, 0, 0, 0, 0, t2076 * t2277 + t2078 * t2274, t2344, t2341, t2055 * t2277 + t2056 * t2274, 0, 0, 0, 0, 0, 0, t2080 * t2277 + t2082 * t2274, t2341, -t2344, t2051 * t2277 + t2052 * t2274; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2263, 0, 0, 0, 0, 0, 0, t2216, t2217, 0, t2156, 0, 0, 0, 0, 0, 0, t2133, t2145, t2125, t2073, 0, 0, 0, 0, 0, 0, t2090, -t2089, t2336, t2057, 0, 0, 0, 0, 0, 0, t2094, t2336, t2089, t2053; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2279, -qJDD(1), 0, t2248, 0, 0, 0, 0, 0, 0, t2238, -t2239, 0, t2171, 0, 0, 0, 0, 0, 0, t2191, t2192, t2210, t2144, 0, 0, 0, 0, 0, 0, t2124, t2128, t2107, t2072, 0, 0, 0, 0, 0, 0, t2078, t2081, t2339, t2056, 0, 0, 0, 0, 0, 0, t2082, t2339, -t2081, t2052; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2279, 0, t2247, 0, 0, 0, 0, 0, 0, t2239, t2238, 0, t2170, 0, 0, 0, 0, 0, 0, t2189, t2190, t2209, t2143, 0, 0, 0, 0, 0, 0, t2123, t2127, t2106, t2071, 0, 0, 0, 0, 0, 0, t2076, t2079, t2340, t2055, 0, 0, 0, 0, 0, 0, t2080, t2340, -t2079, t2051; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, t2263, 0, 0, 0, 0, 0, 0, t2216, t2217, 0, t2156, 0, 0, 0, 0, 0, 0, t2133, t2145, t2125, t2073, 0, 0, 0, 0, 0, 0, t2090, -t2089, t2336, t2057, 0, 0, 0, 0, 0, 0, t2094, t2336, t2089, t2053; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2279, -qJDD(1), 0, t2207, 0, 0, 0, 0, 0, 0, t2218, t2219, t2240, t2157, 0, 0, 0, 0, 0, 0, t2134, t2146, t2126, t2074, 0, 0, 0, 0, 0, 0, t2092, t2095, t2335, t2058, 0, 0, 0, 0, 0, 0, t2096, t2335, -t2095, t2054; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2279, 0, t2206, 0, 0, 0, 0, 0, 0, t2237, -t2234, t2243, -t2199, 0, 0, 0, 0, 0, 0, -t2183, t2295, -t2181, -t2169, 0, 0, 0, 0, 0, 0, -t2324, t2135, -t2318, -t2065, 0, 0, 0, 0, 0, 0, -t2324, -t2318, -t2135, -t2061; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2263, 0, 0, 0, 0, 0, 0, t2216, t2217, 0, t2156, 0, 0, 0, 0, 0, 0, t2133, t2145, t2125, t2073, 0, 0, 0, 0, 0, 0, t2090, -t2089, t2336, t2057, 0, 0, 0, 0, 0, 0, t2094, t2336, t2089, t2053; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2253, t2246, t2260, t2188, 0, 0, 0, 0, 0, 0, t2166, t2177, t2155, t2101, 0, 0, 0, 0, 0, 0, t2111, -t2110, t2330, t2064, 0, 0, 0, 0, 0, 0, t2115, t2330, t2110, t2060; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2245, t2252, -t2298, t2187, 0, 0, 0, 0, 0, 0, t2165, t2176, t2154, t2100, 0, 0, 0, 0, 0, 0, t2109, -t2108, t2329, t2063, 0, 0, 0, 0, 0, 0, t2113, t2329, t2108, t2059; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2237, t2234, -t2243, t2199, 0, 0, 0, 0, 0, 0, t2183, -t2295, t2181, t2169, 0, 0, 0, 0, 0, 0, t2324, -t2135, t2318, t2065, 0, 0, 0, 0, 0, 0, t2324, t2318, t2135, t2061; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2201, t2204, t2184, t2130, 0, 0, 0, 0, 0, 0, t2323, -t2137, t2317, t2066, 0, 0, 0, 0, 0, 0, t2323, t2317, t2137, t2062; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2203, t2220, t2186, t2129, 0, 0, 0, 0, 0, 0, -t2147, -t2284, t2168, -t2117, 0, 0, 0, 0, 0, 0, -t2148, t2168, t2284, -t2097; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2183, -t2295, t2181, t2169, 0, 0, 0, 0, 0, 0, t2324, -t2135, t2318, t2065, 0, 0, 0, 0, 0, 0, t2324, t2318, t2135, t2061; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2319, -t2161, t2286, t2099, 0, 0, 0, 0, 0, 0, t2319, t2286, t2161, t2087; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2162, t2320, -t2151, t2098, 0, 0, 0, 0, 0, 0, t2162, -t2151, -t2320, -t2088; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2147, t2284, -t2168, t2117, 0, 0, 0, 0, 0, 0, t2148, -t2168, -t2284, t2097; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2319, t2286, t2161, t2087; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2148, -t2168, -t2284, t2097; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2162, t2151, t2320, t2088;];
f_new_reg  = t1;
