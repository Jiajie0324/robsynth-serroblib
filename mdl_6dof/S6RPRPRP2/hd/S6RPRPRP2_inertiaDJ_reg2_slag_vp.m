% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPRPRP2
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d3,d5,theta2,theta4]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 03:06
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRPRP2_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRP2_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRP2_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RPRPRP2_inertiaDJ_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 03:06:13
% EndTime: 2019-03-09 03:06:18
% DurationCPUTime: 1.79s
% Computational Cost: add. (2383->175), mult. (4986->305), div. (0->0), fcn. (4568->8), ass. (0->117)
t79 = cos(qJ(5));
t77 = sin(qJ(5));
t98 = t79 * pkin(5) + t77 * qJ(6);
t145 = t98 * qJD(5) - t79 * qJD(6);
t123 = cos(pkin(10));
t80 = cos(qJ(3));
t105 = t123 * t80;
t78 = sin(qJ(3));
t119 = t78 * qJD(3);
t75 = sin(pkin(10));
t54 = qJD(3) * t105 - t75 * t119;
t106 = t123 * t78;
t59 = t75 * t80 + t106;
t97 = pkin(5) * t77 - qJ(6) * t79;
t151 = -t145 * t59 - t97 * t54;
t73 = t77 ^ 2;
t46 = t73 * t54;
t74 = t79 ^ 2;
t47 = t74 * t54;
t150 = t46 + t47;
t61 = (t73 - t74) * qJD(5);
t67 = sin(pkin(9)) * pkin(1) + pkin(7);
t124 = qJ(4) + t67;
t133 = t75 * t78;
t56 = t124 * t80;
t33 = t123 * t56 - t124 * t133;
t58 = -t105 + t133;
t69 = -cos(pkin(9)) * pkin(1) - pkin(2);
t60 = -t80 * pkin(3) + t69;
t87 = -t58 * pkin(4) + t59 * pkin(8) - t60;
t148 = t79 * t33 - t77 * t87;
t53 = t59 * qJD(3);
t147 = -t59 * t53 - t54 * t58;
t104 = qJD(3) * t124;
t44 = t80 * qJD(4) - t78 * t104;
t89 = -t78 * qJD(4) - t80 * t104;
t21 = t123 * t44 + t75 * t89;
t71 = qJD(5) * t77;
t84 = t79 * t87;
t113 = pkin(3) * t119;
t88 = t53 * pkin(4) - t54 * pkin(8) + t113;
t3 = qJD(5) * t84 - t79 * t21 + t33 * t71 - t77 * t88;
t4 = -qJD(5) * t148 - t77 * t21 + t79 * t88;
t11 = -t77 * t33 - t84;
t95 = t11 * t77 - t148 * t79;
t146 = t95 * qJD(5) + t3 * t77 - t4 * t79;
t121 = t58 * qJD(6);
t125 = t53 * qJ(6);
t1 = t121 - t3 + t125;
t6 = qJ(6) * t58 + t148;
t8 = -t58 * pkin(5) - t11;
t100 = t6 * t79 + t77 * t8;
t141 = t53 * pkin(5);
t2 = -t141 - t4;
t144 = t100 * qJD(5) + t1 * t77 - t2 * t79;
t143 = 0.2e1 * qJD(3);
t142 = 0.2e1 * qJD(6);
t20 = -t123 * t89 + t75 * t44;
t32 = t124 * t106 + t75 * t56;
t140 = t32 * t20;
t66 = t75 * pkin(3) + pkin(8);
t139 = t53 * t66;
t138 = t58 * t53;
t137 = t58 * t66;
t136 = t59 * t54;
t135 = t59 * t77;
t134 = t59 * t79;
t132 = t77 * t53;
t131 = t79 * t53;
t130 = t79 * t54;
t129 = t58 * t130 + t59 * t131;
t127 = t150 * t66;
t72 = qJD(5) * t79;
t120 = t77 * qJD(6);
t117 = t80 * qJD(3);
t38 = 0.2e1 * t138;
t116 = t77 * t130;
t115 = t69 * t143;
t68 = -t123 * pkin(3) - pkin(4);
t114 = 0.2e1 * qJD(5) * t68;
t112 = t59 * t71;
t111 = t66 * t71;
t110 = t66 * t72;
t109 = t77 * t72;
t108 = t78 * t117;
t57 = t59 ^ 2;
t103 = t57 * t109;
t99 = -t6 * t77 + t79 * t8;
t96 = -t11 * t79 - t148 * t77;
t94 = t20 * t58 + t32 * t53;
t92 = t54 * t68 - t139;
t91 = -t59 * t68 + t137;
t30 = t58 * t72 + t132;
t28 = t58 * t71 - t131;
t31 = t77 * t54 + t59 * t72;
t29 = t112 - t130;
t5 = -t151 + t20;
t55 = -t98 + t68;
t90 = -t5 + (t55 * t59 - t137) * qJD(5);
t13 = t97 * t59 + t32;
t52 = -pkin(5) * t71 + qJ(6) * t72 + t120;
t85 = qJD(5) * t13 - t52 * t59 + t54 * t55 - t139;
t83 = t99 * qJD(5) + t1 * t79 + t2 * t77;
t82 = t96 * qJD(5) - t3 * t79 - t4 * t77;
t63 = -0.2e1 * t109;
t62 = 0.2e1 * t109;
t35 = t59 * t47;
t34 = t59 * t46;
t18 = 0.2e1 * t35 - 0.2e1 * t103;
t17 = 0.2e1 * t34 + 0.2e1 * t103;
t16 = t59 * t61 - t116;
t15 = 0.4e1 * t59 * t109 + t46 - t47;
t14 = -0.2e1 * t59 * t116 + t57 * t61;
t10 = t59 * t132 + t31 * t58;
t9 = 0.2e1 * t34 + 0.2e1 * t35 + 0.2e1 * t138;
t7 = -0.2e1 * t58 * t112 + 0.2e1 * t129;
t12 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t108 (-t78 ^ 2 + t80 ^ 2) * t143, 0, -0.2e1 * t108, 0, 0, t78 * t115, t80 * t115, 0, 0, 0.2e1 * t136, 0.2e1 * t147, 0, t38, 0, 0, 0.2e1 * t58 * t113 + 0.2e1 * t60 * t53, 0.2e1 * t59 * t113 + 0.2e1 * t60 * t54, 0.2e1 * t20 * t59 - 0.2e1 * t21 * t58 + 0.2e1 * t32 * t54 - 0.2e1 * t33 * t53, 0.2e1 * t60 * t113 + 0.2e1 * t33 * t21 + 0.2e1 * t140, t18, 0.2e1 * t14, t7, t17, -0.2e1 * t10, t38, 0.2e1 * t11 * t53 + 0.2e1 * t20 * t135 + 0.2e1 * t31 * t32 + 0.2e1 * t4 * t58, 0.2e1 * t20 * t134 - 0.2e1 * t148 * t53 - 0.2e1 * t29 * t32 + 0.2e1 * t3 * t58, 0.2e1 * t146 * t59 + 0.2e1 * t96 * t54, 0.2e1 * t11 * t4 - 0.2e1 * t148 * t3 + 0.2e1 * t140, t18, t7, -0.2e1 * t14, t38, 0.2e1 * t10, t17, 0.2e1 * t31 * t13 + 0.2e1 * t5 * t135 - 0.2e1 * t2 * t58 - 0.2e1 * t8 * t53, -0.2e1 * t144 * t59 + 0.2e1 * t99 * t54, 0.2e1 * t1 * t58 + 0.2e1 * t29 * t13 - 0.2e1 * t5 * t134 + 0.2e1 * t6 * t53, 0.2e1 * t1 * t6 + 0.2e1 * t13 * t5 + 0.2e1 * t2 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t21 * t59 + t33 * t54 + t94, 0, 0, 0, 0, 0, 0, 0, t147 * t79 + t129, 0, -t95 * t54 + t82 * t59 + t94, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100 * t54 + t13 * t53 + t5 * t58 + t83 * t59; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t136 + 0.2e1 * t138, 0, 0, 0, 0, 0, 0, 0, 0, 0, t9, 0, 0, 0, 0, 0, 0, 0, 0, 0, t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t117, 0, -t119, 0, -t67 * t117, t67 * t119, 0, 0, 0, 0, t54, 0, -t53, 0, -t20, -t21 (-t123 * t54 - t53 * t75) * pkin(3) (-t123 * t20 + t21 * t75) * pkin(3), -t16, -t15, t30, t16, -t28, 0, -t20 * t79 + t92 * t77 + (t32 * t77 - t91 * t79) * qJD(5), t20 * t77 + t92 * t79 + (t32 * t79 + t91 * t77) * qJD(5), t82, t20 * t68 + t82 * t66, -t16, t30, t15, 0, t28, t16, t85 * t77 + t90 * t79, t83, t90 * t77 - t85 * t79, -t13 * t52 + t5 * t55 + t83 * t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t119, -t117, 0, 0, 0, 0, 0, 0, 0, 0, -t53, -t54, 0 (-t123 * t53 + t54 * t75) * pkin(3), 0, 0, 0, 0, 0, 0, t28, t30, t150, t53 * t68 + t127, 0, 0, 0, 0, 0, 0, t28, t150, -t30, -t52 * t58 + t53 * t55 + t127; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, -0.2e1 * t61, 0, t63, 0, 0, t77 * t114, t79 * t114, 0, 0, t62, 0, 0.2e1 * t61, 0, 0, t63, 0.2e1 * t52 * t79 + 0.2e1 * t55 * t71, 0, 0.2e1 * t52 * t77 - 0.2e1 * t55 * t72, -0.2e1 * t55 * t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t53, t54, 0, t113, 0, 0, 0, 0, 0, 0, -t28, -t30, -t150, -t146, 0, 0, 0, 0, 0, 0, -t28, -t150, t30, t144; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t29, 0, -t31, t53, t4, t3, 0, 0, 0, -t29, 0, t53, t31, 0, t4 + 0.2e1 * t141, -t98 * t54 + (t97 * qJD(5) - t120) * t59, 0.2e1 * t121 - t3 + 0.2e1 * t125, -pkin(5) * t2 + qJ(6) * t1 + qJD(6) * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t31, t29, 0, 0, 0, 0, 0, 0, 0, 0, -t31, 0, -t29, t151; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, 0, -t71, 0, -t110, t111, 0, 0, 0, t72, 0, 0, t71, 0, -t110, -t145, -t111, -t145 * t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t71, -t72, 0, 0, 0, 0, 0, 0, 0, 0, -t71, 0, t72, t52; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t142, qJ(6) * t142; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t53, -t29, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t72, 0, t110; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t12;
