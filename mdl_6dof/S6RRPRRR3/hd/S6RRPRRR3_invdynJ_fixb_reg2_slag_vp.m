% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:26
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRRR3_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR3_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR3_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR3_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR3_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR3_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 13:25:27
% EndTime: 2019-03-09 13:25:55
% DurationCPUTime: 15.91s
% Computational Cost: add. (29350->777), mult. (68297->987), div. (0->0), fcn. (52335->18), ass. (0->343)
t340 = cos(qJ(5));
t341 = cos(qJ(4));
t336 = sin(qJ(5));
t337 = sin(qJ(4));
t439 = t336 * t337;
t284 = -t340 * t341 + t439;
t342 = cos(qJ(2));
t469 = cos(pkin(11));
t396 = t469 * t342;
t303 = qJD(1) * t396;
t333 = sin(pkin(11));
t338 = sin(qJ(2));
t423 = qJD(1) * t338;
t268 = t333 * t423 - t303;
t438 = t336 * t341;
t285 = t337 * t340 + t438;
t168 = t285 * t268;
t369 = t285 * qJD(4);
t353 = t285 * qJD(5) + t369;
t352 = t168 + t353;
t282 = t333 * t342 + t338 * t469;
t271 = t282 * qJD(1);
t417 = t341 * qJD(2);
t224 = t271 * t337 - t417;
t226 = qJD(2) * t337 + t271 * t341;
t379 = -t224 * t336 + t340 * t226;
t416 = qJD(1) * qJD(2);
t403 = t338 * t416;
t356 = qJDD(1) * t282 - t333 * t403;
t205 = qJD(2) * t303 + t356;
t422 = qJD(4) * t337;
t140 = -qJD(4) * t417 - t337 * qJDD(2) - t341 * t205 + t271 * t422;
t394 = -t341 * qJDD(2) + t205 * t337;
t141 = qJD(4) * t226 + t394;
t419 = qJD(5) * t340;
t420 = qJD(5) * t336;
t64 = t340 * t140 + t336 * t141 + t224 * t419 + t226 * t420;
t539 = t284 * t64 - t352 * t379;
t175 = pkin(2) * t423 + pkin(3) * t271 + pkin(8) * t268;
t334 = -qJ(3) - pkin(7);
t298 = t334 * t342;
t287 = qJD(1) * t298;
t274 = t333 * t287;
t297 = t334 * t338;
t286 = qJD(1) * t297;
t212 = t286 * t469 + t274;
t126 = t341 * t175 - t212 * t337;
t308 = pkin(2) * t333 + pkin(8);
t482 = pkin(9) + t308;
t398 = qJD(4) * t482;
t538 = pkin(4) * t271 + t126 + (pkin(9) * t268 + t398) * t341;
t127 = t337 * t175 + t341 * t212;
t453 = t268 * t337;
t537 = pkin(9) * t453 + t337 * t398 + t127;
t150 = t340 * t224 + t226 * t336;
t335 = sin(qJ(6));
t499 = cos(qJ(6));
t521 = -t335 * t150 + t379 * t499;
t90 = t499 * t150 + t335 * t379;
t483 = t90 * t521;
t413 = qJD(4) + qJD(5);
t421 = qJD(4) * t341;
t427 = t284 * t268 - t340 * t421 - t341 * t419 + t413 * t439;
t527 = t521 ^ 2 - t90 ^ 2;
t254 = qJD(4) + t268;
t247 = qJD(5) + t254;
t497 = pkin(2) * t342;
t317 = pkin(1) + t497;
t295 = -qJD(1) * t317 + qJD(3);
t162 = pkin(3) * t268 - pkin(8) * t271 + t295;
t479 = qJD(2) * pkin(2);
t278 = t286 + t479;
t397 = t469 * t287;
t203 = t333 * t278 - t397;
t187 = qJD(2) * pkin(8) + t203;
t115 = t341 * t162 - t187 * t337;
t96 = -pkin(9) * t226 + t115;
t74 = pkin(4) * t254 + t96;
t116 = t162 * t337 + t187 * t341;
t97 = -pkin(9) * t224 + t116;
t85 = t336 * t97;
t47 = t340 * t74 - t85;
t517 = pkin(10) * t379;
t39 = t47 - t517;
t35 = pkin(5) * t247 + t39;
t87 = t340 * t97;
t48 = t336 * t74 + t87;
t531 = pkin(10) * t150;
t40 = t48 - t531;
t474 = t335 * t40;
t12 = t35 * t499 - t474;
t411 = t499 * t40;
t13 = t335 * t35 + t411;
t536 = -t12 * t90 + t13 * t521;
t376 = -t336 * t140 + t141 * t340 - t224 * t420 + t226 * t419;
t404 = qJD(6) * t499;
t418 = qJD(6) * t335;
t23 = t150 * t404 + t335 * t376 + t379 * t418 + t499 * t64;
t243 = qJD(6) + t247;
t525 = t243 * t90 - t23;
t270 = t282 * qJD(2);
t415 = t338 * qJDD(1);
t381 = -qJDD(1) * t396 + t333 * t415;
t204 = qJD(1) * t270 + t381;
t195 = qJDD(4) + t204;
t190 = qJDD(5) + t195;
t250 = pkin(2) * t403 - qJDD(1) * t317 + qJDD(3);
t117 = pkin(3) * t204 - pkin(8) * t205 + t250;
t114 = t341 * t117;
t399 = qJD(2) * t334;
t264 = -qJD(3) * t338 + t342 * t399;
t194 = qJDD(2) * pkin(2) + qJD(1) * t264 + qJDD(1) * t297;
t263 = qJD(3) * t342 + t338 * t399;
t209 = qJD(1) * t263 - qJDD(1) * t298;
t134 = t333 * t194 + t469 * t209;
t130 = qJDD(2) * pkin(8) + t134;
t46 = -qJD(4) * t116 - t130 * t337 + t114;
t29 = pkin(4) * t195 + pkin(9) * t140 + t46;
t45 = t337 * t117 + t341 * t130 + t162 * t421 - t187 * t422;
t34 = -pkin(9) * t141 + t45;
t9 = -qJD(5) * t48 + t340 * t29 - t336 * t34;
t6 = pkin(5) * t190 + pkin(10) * t64 + t9;
t8 = t336 * t29 + t340 * t34 + t74 * t419 - t97 * t420;
t7 = -pkin(10) * t376 + t8;
t1 = t335 * t6 + t35 * t404 - t40 * t418 + t499 * t7;
t332 = qJ(4) + qJ(5);
t325 = qJ(6) + t332;
t313 = sin(t325);
t314 = cos(t325);
t343 = cos(qJ(1));
t328 = qJ(2) + pkin(11);
t319 = cos(t328);
t339 = sin(qJ(1));
t447 = t319 * t339;
t229 = t313 * t343 - t314 * t447;
t446 = t319 * t343;
t231 = t313 * t339 + t314 * t446;
t318 = sin(t328);
t487 = g(3) * t318;
t202 = t278 * t469 + t274;
t186 = -qJD(2) * pkin(3) - t202;
t144 = t224 * pkin(4) + t186;
t80 = t150 * pkin(5) + t144;
t524 = g(1) * t231 - g(2) * t229 + t314 * t487 + t80 * t90 - t1;
t279 = t482 * t337;
t280 = t482 * t341;
t197 = -t336 * t279 + t340 * t280;
t472 = -qJD(5) * t197 + t537 * t336 - t340 * t538;
t533 = t279 * t419 + t336 * t538 + t537 * t340;
t428 = -t469 * t194 + t333 * t209;
t129 = -qJDD(2) * pkin(3) + t428;
t384 = g(1) * t343 + g(2) * t339;
t362 = -g(3) * t319 + t318 * t384;
t532 = -qJD(4) * t254 * t308 - t129 + t362;
t24 = qJD(6) * t521 - t335 * t64 + t499 * t376;
t505 = t243 * t521 - t24;
t2 = -qJD(6) * t13 - t335 * t7 + t499 * t6;
t228 = t313 * t447 + t314 * t343;
t230 = -t313 * t446 + t314 * t339;
t507 = -g(1) * t230 + g(2) * t228 + t313 * t487 - t521 * t80 + t2;
t530 = -pkin(5) * t271 + pkin(10) * t427 + t472;
t440 = t336 * t280;
t496 = pkin(10) * t285;
t529 = -(-t440 - t496) * qJD(5) + t533 + (t168 + t369) * pkin(10);
t462 = t150 * t379;
t432 = t284 * t404 + t285 * t418 + t335 * t352 + t427 * t499;
t213 = -t335 * t284 + t285 * t499;
t431 = qJD(6) * t213 - t335 * t427 + t352 * t499;
t528 = -g(1) * t339 + g(2) * t343;
t370 = -t333 * t338 + t396;
t273 = t370 * qJD(2);
t451 = t273 * t337;
t372 = t282 * t421 + t451;
t526 = -t150 ^ 2 + t379 ^ 2;
t523 = t150 * t247 - t64;
t324 = cos(t332);
t443 = t324 * t339;
t323 = sin(t332);
t444 = t323 * t343;
t234 = -t319 * t443 + t444;
t442 = t324 * t343;
t445 = t323 * t339;
t236 = t319 * t442 + t445;
t522 = g(1) * t236 - g(2) * t234 + t144 * t150 + t324 * t487 - t8;
t210 = t286 * t333 - t397;
t154 = -pkin(4) * t453 + t210;
t484 = t337 * pkin(4);
t520 = t484 * qJD(4) - t154;
t516 = -t115 * t254 + t45;
t393 = t254 * t337;
t515 = t226 * t393;
t201 = -pkin(3) * t370 - pkin(8) * t282 - t317;
t223 = t333 * t297 - t298 * t469;
t142 = t341 * t201 - t223 * t337;
t448 = t282 * t341;
t108 = -pkin(4) * t370 - pkin(9) * t448 + t142;
t214 = t341 * t223;
t143 = t337 * t201 + t214;
t449 = t282 * t337;
t120 = -pkin(9) * t449 + t143;
t68 = t336 * t108 + t340 * t120;
t433 = t341 * t343;
t437 = t337 * t339;
t255 = t319 * t437 + t433;
t435 = t339 * t341;
t436 = t337 * t343;
t257 = -t319 * t436 + t435;
t510 = -g(1) * t257 + g(2) * t255;
t233 = t319 * t445 + t442;
t235 = -t319 * t444 + t443;
t508 = -g(1) * t235 + g(2) * t233 + t323 * t487;
t506 = -t144 * t379 + t508 + t9;
t181 = qJDD(6) + t190;
t504 = t181 * t213 - t243 * t432;
t503 = t247 * t379 - t376;
t502 = t190 * t285 - t247 * t427;
t360 = -t384 * t319 - t487;
t211 = t284 * t499 + t285 * t335;
t501 = t211 * t23 - t431 * t521;
t500 = t271 ^ 2;
t344 = -pkin(9) - pkin(8);
t498 = pkin(2) * t338;
t301 = t343 * t317;
t489 = g(2) * t301;
t485 = g(3) * t342;
t196 = -t340 * t279 - t440;
t157 = t196 - t496;
t158 = -pkin(10) * t284 + t197;
t100 = t157 * t499 - t335 * t158;
t481 = qJD(6) * t100 + t530 * t335 - t529 * t499;
t101 = t335 * t157 + t158 * t499;
t480 = -qJD(6) * t101 + t529 * t335 + t530 * t499;
t51 = t340 * t96 - t85;
t477 = t271 * t90;
t476 = t271 * t521;
t473 = -t280 * t420 - t533;
t315 = pkin(4) * t340 + pkin(5);
t50 = -t336 * t96 - t87;
t41 = t50 + t531;
t42 = t51 - t517;
t441 = t335 * t336;
t471 = -t335 * t41 - t499 * t42 + t315 * t404 + (-t336 * t418 + (t340 * t499 - t441) * qJD(5)) * pkin(4);
t408 = t499 * t336;
t470 = t335 * t42 - t499 * t41 - t315 * t418 + (-t336 * t404 + (-t335 * t340 - t408) * qJD(5)) * pkin(4);
t468 = pkin(7) * qJDD(1);
t466 = t116 * t254;
t465 = t140 * t337;
t464 = t141 * t341;
t463 = t150 * t271;
t461 = t379 * t271;
t458 = t195 * t337;
t457 = t224 * t268;
t456 = t224 * t271;
t455 = t226 * t224;
t454 = t226 * t271;
t452 = t271 * t268;
t450 = t273 * t341;
t137 = t337 * t141;
t180 = t341 * t195;
t430 = -t224 * t421 - t137;
t429 = pkin(5) * t352 + t520;
t291 = pkin(5) * t323 + t484;
t426 = t291 - t334;
t326 = t341 * pkin(4);
t292 = pkin(5) * t324 + t326;
t330 = t338 ^ 2;
t331 = t342 ^ 2;
t425 = t330 - t331;
t424 = t330 + t331;
t414 = t342 * qJDD(1);
t412 = t338 * t479;
t346 = qJD(1) ^ 2;
t410 = t338 * t346 * t342;
t406 = t282 * t422;
t402 = -t334 + t484;
t67 = t340 * t108 - t120 * t336;
t174 = t263 * t469 + t333 * t264;
t176 = pkin(3) * t270 - pkin(8) * t273 + t412;
t395 = -t174 * t337 + t341 * t176;
t173 = t263 * t333 - t469 * t264;
t222 = -t469 * t297 - t298 * t333;
t392 = t254 * t341;
t391 = -t213 * t24 + t432 * t90;
t390 = t342 * t403;
t389 = t528 * t318;
t309 = -pkin(2) * t469 - pkin(3);
t388 = pkin(4) * t422 - t154;
t387 = -t211 * t181 - t431 * t243;
t386 = t150 * t427 - t285 * t376;
t385 = pkin(3) * t319 + pkin(8) * t318;
t382 = -t284 * t190 - t247 * t352;
t170 = pkin(4) * t449 + t222;
t380 = -t115 * t341 - t116 * t337;
t290 = pkin(3) + t292;
t329 = -pkin(10) + t344;
t378 = t290 * t319 - t318 * t329;
t316 = t326 + pkin(3);
t377 = t316 * t319 - t318 * t344;
t296 = -t326 + t309;
t128 = pkin(4) * t372 + t173;
t375 = t180 + (-t422 - t453) * t254;
t183 = t284 * t282;
t49 = -pkin(5) * t370 + pkin(10) * t183 + t67;
t182 = t285 * t282;
t52 = -pkin(10) * t182 + t68;
t25 = -t335 * t52 + t49 * t499;
t26 = t335 * t49 + t499 * t52;
t374 = -0.2e1 * pkin(1) * t416 - pkin(7) * qJDD(2);
t122 = -t335 * t182 - t183 * t499;
t371 = -t406 + t450;
t59 = -pkin(9) * t450 + pkin(4) * t270 + (-t214 + (pkin(9) * t282 - t201) * t337) * qJD(4) + t395;
t69 = t341 * t174 + t337 * t176 + t201 * t421 - t223 * t422;
t66 = -pkin(9) * t372 + t69;
t16 = t108 * t419 - t120 * t420 + t336 * t59 + t340 * t66;
t366 = t186 * t254 - t195 * t308;
t71 = t141 * pkin(4) + t129;
t345 = qJD(2) ^ 2;
t358 = 0.2e1 * qJDD(1) * pkin(1) - pkin(7) * t345 - t528;
t357 = pkin(1) * t346 + t384 - t468;
t17 = -qJD(5) * t68 - t336 * t66 + t340 * t59;
t267 = pkin(4) * t408 + t335 * t315;
t266 = -pkin(4) * t441 + t315 * t499;
t265 = t268 ^ 2;
t258 = t319 * t433 + t437;
t256 = -t319 * t435 + t436;
t227 = t284 * pkin(5) + t296;
t124 = pkin(5) * t182 + t170;
t123 = pkin(4) * t226 + pkin(5) * t379;
t121 = t182 * t499 - t183 * t335;
t79 = t273 * t438 - t336 * t406 - t420 * t449 + (t413 * t448 + t451) * t340;
t78 = t273 * t284 + t282 * t353;
t70 = -qJD(4) * t143 + t395;
t63 = pkin(5) * t79 + t128;
t32 = qJD(6) * t122 - t335 * t78 + t499 * t79;
t31 = t182 * t404 - t183 * t418 + t335 * t79 + t499 * t78;
t30 = pkin(5) * t376 + t71;
t15 = t39 * t499 - t474;
t14 = -t335 * t39 - t411;
t11 = -pkin(10) * t79 + t16;
t10 = pkin(5) * t270 + pkin(10) * t78 + t17;
t4 = -qJD(6) * t26 + t10 * t499 - t335 * t11;
t3 = qJD(6) * t25 + t335 * t10 + t11 * t499;
t5 = [0, 0, 0, 0, 0, qJDD(1), -t528, t384, 0, 0, qJDD(1) * t330 + 0.2e1 * t390, 0.2e1 * t338 * t414 - 0.2e1 * t416 * t425, qJDD(2) * t338 + t342 * t345, qJDD(1) * t331 - 0.2e1 * t390, qJDD(2) * t342 - t338 * t345, 0, t338 * t374 + t342 * t358, -t338 * t358 + t342 * t374, 0.2e1 * t424 * t468 - t384, -g(1) * (-pkin(1) * t339 + pkin(7) * t343) - g(2) * (pkin(1) * t343 + pkin(7) * t339) + (pkin(7) ^ 2 * t424 + pkin(1) ^ 2) * qJDD(1), t205 * t282 + t271 * t273, -t204 * t282 + t205 * t370 - t268 * t273 - t270 * t271, qJD(2) * t273 + qJDD(2) * t282, -t204 * t370 + t268 * t270, -qJD(2) * t270 + qJDD(2) * t370, 0, -qJDD(2) * t222 - t204 * t317 - t250 * t370 + t270 * t295 - t528 * t319 + (t268 * t498 - t173) * qJD(2), -qJDD(2) * t223 - t205 * t317 + t250 * t282 + t273 * t295 + (t271 * t498 - t174) * qJD(2) + t389, t134 * t370 + t173 * t271 - t174 * t268 - t202 * t273 - t203 * t270 - t204 * t223 + t205 * t222 + t282 * t428 - t384, t134 * t223 + t203 * t174 + t428 * t222 - t202 * t173 - t250 * t317 + t295 * t412 - g(1) * (-t317 * t339 - t334 * t343) - g(2) * (-t334 * t339 + t301) -t140 * t448 + t226 * t371 (-t224 * t341 - t226 * t337) * t273 + (t465 - t464 + (t224 * t337 - t226 * t341) * qJD(4)) * t282, t140 * t370 + t180 * t282 + t226 * t270 + t254 * t371, t137 * t282 + t224 * t372, t141 * t370 - t195 * t449 - t224 * t270 - t254 * t372, -t195 * t370 + t254 * t270, -g(1) * t256 - g(2) * t258 + t115 * t270 + t129 * t449 + t141 * t222 + t142 * t195 + t173 * t224 + t186 * t372 + t254 * t70 - t370 * t46, -g(1) * t255 - g(2) * t257 - t116 * t270 + t129 * t448 - t140 * t222 - t143 * t195 + t173 * t226 + t186 * t371 - t254 * t69 + t370 * t45, t140 * t142 - t141 * t143 - t224 * t69 - t226 * t70 + t380 * t273 + (-t337 * t45 - t341 * t46 + (t115 * t337 - t116 * t341) * qJD(4)) * t282 - t389, -t489 + t115 * t70 + t116 * t69 + t129 * t222 + t46 * t142 + t45 * t143 + t186 * t173 + (g(1) * t334 - g(2) * t385) * t343 + (-g(1) * (-t317 - t385) + g(2) * t334) * t339, t183 * t64 - t379 * t78, t78 * t150 + t64 * t182 + t183 * t376 - t379 * t79, -t183 * t190 - t247 * t78 + t270 * t379 + t370 * t64, t150 * t79 + t182 * t376, -t150 * t270 - t182 * t190 - t79 * t247 + t370 * t376, -t190 * t370 + t247 * t270, -g(1) * t234 - g(2) * t236 + t128 * t150 + t144 * t79 + t17 * t247 + t170 * t376 + t71 * t182 + t67 * t190 + t47 * t270 - t370 * t9, -g(1) * t233 - g(2) * t235 + t128 * t379 - t144 * t78 - t16 * t247 - t170 * t64 - t183 * t71 - t190 * t68 - t270 * t48 + t370 * t8, -t16 * t150 - t17 * t379 - t8 * t182 + t9 * t183 - t376 * t68 + t47 * t78 - t48 * t79 + t67 * t64 - t389, -t489 + t144 * t128 + t48 * t16 + t47 * t17 + t71 * t170 + t9 * t67 + t8 * t68 + (-g(1) * t402 - g(2) * t377) * t343 + (-g(1) * (-t317 - t377) - g(2) * t402) * t339, -t122 * t23 - t31 * t521, t121 * t23 - t122 * t24 + t31 * t90 - t32 * t521, t122 * t181 + t23 * t370 - t243 * t31 + t270 * t521, t121 * t24 + t32 * t90, -t121 * t181 + t24 * t370 - t243 * t32 - t270 * t90, -t181 * t370 + t243 * t270, -g(1) * t229 - g(2) * t231 + t12 * t270 + t121 * t30 + t124 * t24 + t181 * t25 - t2 * t370 + t243 * t4 + t32 * t80 + t63 * t90, -g(1) * t228 - g(2) * t230 + t1 * t370 + t122 * t30 - t124 * t23 - t13 * t270 - t181 * t26 - t243 * t3 - t31 * t80 + t521 * t63, -t1 * t121 + t12 * t31 - t122 * t2 - t13 * t32 + t23 * t25 - t24 * t26 - t3 * t90 - t4 * t521 - t389, -t489 + t1 * t26 + t12 * t4 + t30 * t124 + t13 * t3 + t2 * t25 + t80 * t63 + (-g(1) * t426 - g(2) * t378) * t343 + (-g(1) * (-t317 - t378) - g(2) * t426) * t339; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t410, t425 * t346, t415, t410, t414, qJDD(2), t338 * t357 - t485, g(3) * t338 + t342 * t357, 0, 0, t452, -t265 + t500 (t303 + t268) * qJD(2) + t356, -t452, -t381, qJDD(2), t210 * qJD(2) - t295 * t271 + (qJDD(2) * t469 - t268 * t423) * pkin(2) + t362 - t428, qJD(2) * t212 + t268 * t295 + (-qJDD(2) * t333 - t271 * t423) * pkin(2) - t134 - t360 (t203 - t210) * t271 + (-t202 + t212) * t268 + (-t204 * t333 - t205 * t469) * pkin(2), t202 * t210 - t203 * t212 + (-t469 * t428 - t485 + t134 * t333 + (-qJD(1) * t295 + t384) * t338) * pkin(2), t226 * t392 - t465 (-t140 - t457) * t341 - t515 + t430, t254 * t392 - t454 + t458, t224 * t393 - t464, t375 + t456, -t254 * t271, -t115 * t271 - t126 * t254 + t141 * t309 - t210 * t224 + t366 * t337 + t341 * t532, t116 * t271 + t127 * t254 - t140 * t309 - t210 * t226 - t337 * t532 + t366 * t341, t126 * t226 + t127 * t224 + (-t115 * t268 - t141 * t308 + t45 + (t226 * t308 - t115) * qJD(4)) * t341 + (-t116 * t268 - t140 * t308 - t46 + (t224 * t308 - t116) * qJD(4)) * t337 + t360, t129 * t309 - t116 * t127 - t115 * t126 - t186 * t210 - g(3) * (t385 + t497) + (qJD(4) * t380 - t46 * t337 + t45 * t341) * t308 + t384 * (pkin(3) * t318 - pkin(8) * t319 + t498) -t285 * t64 - t379 * t427, t386 + t539, -t461 + t502, t150 * t352 + t284 * t376, t382 + t463, -t247 * t271, t352 * t144 + t150 * t520 + t196 * t190 + t472 * t247 - t47 * t271 + t71 * t284 + t296 * t376 + t362 * t324, -t144 * t427 - t190 * t197 - t247 * t473 + t271 * t48 + t285 * t71 - t296 * t64 - t323 * t362 + t379 * t388, -t150 * t473 + t196 * t64 - t197 * t376 - t8 * t284 - t9 * t285 - t352 * t48 - t379 * t472 + t427 * t47 + t360, t8 * t197 + t9 * t196 + t71 * t296 - g(3) * (t377 + t497) + t473 * t48 + t472 * t47 + t388 * t144 + t384 * (t316 * t318 + t319 * t344 + t498) -t213 * t23 - t432 * t521, t391 + t501, -t476 + t504, t211 * t24 + t431 * t90, t387 + t477, -t243 * t271, t100 * t181 - t12 * t271 + t211 * t30 + t227 * t24 + t243 * t480 + t314 * t362 + t429 * t90 + t431 * t80, -t101 * t181 + t13 * t271 + t213 * t30 - t227 * t23 - t243 * t481 - t313 * t362 + t429 * t521 - t432 * t80, -t1 * t211 + t100 * t23 - t101 * t24 + t12 * t432 - t13 * t431 - t2 * t213 - t480 * t521 - t481 * t90 + t360, t1 * t101 + t2 * t100 + t30 * t227 - g(3) * (t378 + t497) + t429 * t80 + t481 * t13 + t480 * t12 + t384 * (t290 * t318 + t319 * t329 + t498); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * qJD(2) * t271 + t381 (t303 - t268) * qJD(2) + t356, -t265 - t500, t202 * t271 + t203 * t268 + t250 + t528, 0, 0, 0, 0, 0, 0, t375 - t456, -t254 ^ 2 * t341 - t454 - t458 (t140 - t457) * t341 + t515 + t430, -t186 * t271 + (t46 + t466) * t341 + t516 * t337 + t528, 0, 0, 0, 0, 0, 0, t382 - t463, -t461 - t502, t386 - t539, -t144 * t271 - t9 * t284 + t8 * t285 - t352 * t47 - t427 * t48 + t528, 0, 0, 0, 0, 0, 0, t387 - t477, -t476 - t504, t391 - t501, t1 * t213 - t12 * t431 - t13 * t432 - t2 * t211 - t271 * t80 + t528; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t455, -t224 ^ 2 + t226 ^ 2, t224 * t254 - t140, -t455, -t394 + (-qJD(4) + t254) * t226, t195, -t187 * t421 + t466 - t186 * t226 + t114 + (-qJD(4) * t162 - t130 + t487) * t337 + t510, g(1) * t258 - g(2) * t256 + t186 * t224 + t341 * t487 - t516, 0, 0, t462, t526, t523, -t462, t503, t190, -t247 * t50 + (-t150 * t226 + t190 * t340 - t247 * t420) * pkin(4) + t506, t247 * t51 + (-t190 * t336 - t226 * t379 - t247 * t419) * pkin(4) + t522, t48 * t379 + t51 * t150 - t47 * t150 + t50 * t379 + (-t336 * t376 + t340 * t64 + (-t150 * t340 + t336 * t379) * qJD(5)) * pkin(4), -t47 * t50 - t48 * t51 + (t8 * t336 + t9 * t340 - t144 * t226 + t337 * t487 + (-t336 * t47 + t340 * t48) * qJD(5) + t510) * pkin(4), t483, t527, t525, -t483, t505, t181, -t123 * t90 + t266 * t181 + t243 * t470 + t507, -t123 * t521 - t267 * t181 - t243 * t471 + t524, t23 * t266 - t24 * t267 - t470 * t521 - t471 * t90 + t536, t1 * t267 + t2 * t266 - t80 * t123 - g(1) * (-t291 * t446 + t292 * t339) - g(2) * (-t291 * t447 - t292 * t343) + t291 * t487 + t471 * t13 + t470 * t12; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t462, t526, t523, -t462, t503, t190, t247 * t48 + t506, t247 * t47 + t522, 0, 0, t483, t527, t525, -t483, t505, t181, -t14 * t243 + (t181 * t499 - t243 * t418 - t379 * t90) * pkin(5) + t507, t15 * t243 + (-t181 * t335 - t243 * t404 - t379 * t521) * pkin(5) + t524, t14 * t521 + t15 * t90 + (t499 * t23 - t24 * t335 + (t335 * t521 - t499 * t90) * qJD(6)) * pkin(5) + t536, -t12 * t14 - t13 * t15 + (t1 * t335 + t2 * t499 - t80 * t379 + (-t12 * t335 + t13 * t499) * qJD(6) + t508) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t483, t527, t525, -t483, t505, t181, t13 * t243 + t507, t12 * t243 + t524, 0, 0;];
tau_reg  = t5;
