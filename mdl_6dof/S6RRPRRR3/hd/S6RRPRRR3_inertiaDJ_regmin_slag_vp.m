% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRPRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x33]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:26
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPRRR3_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR3_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR3_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR3_inertiaDJ_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 13:25:29
% EndTime: 2019-03-09 13:25:35
% DurationCPUTime: 2.38s
% Computational Cost: add. (5018->260), mult. (11336->452), div. (0->0), fcn. (11480->10), ass. (0->158)
t121 = sin(pkin(11));
t125 = sin(qJ(2));
t129 = cos(qJ(2));
t187 = cos(pkin(11));
t100 = t121 * t129 + t125 * t187;
t128 = cos(qJ(4));
t176 = qJD(4) * t128;
t124 = sin(qJ(4));
t147 = t187 * t129;
t179 = qJD(2) * t125;
t94 = qJD(2) * t147 - t121 * t179;
t192 = t124 * t94;
t206 = t100 * t176 + t192;
t205 = qJD(5) * t128 + t176;
t127 = cos(qJ(5));
t123 = sin(qJ(5));
t183 = t123 * t128;
t102 = t124 * t127 + t183;
t55 = t102 * t100;
t116 = t123 * t124;
t204 = t127 * t128 - t116;
t170 = qJD(4) + qJD(5);
t203 = 0.2e1 * qJD(4);
t99 = t121 * t125 - t147;
t202 = pkin(4) * t99;
t201 = pkin(5) * t99;
t93 = t100 * qJD(2);
t200 = t93 * pkin(5);
t199 = pkin(4) * t127;
t114 = pkin(2) * t121 + pkin(8);
t198 = pkin(9) + t114;
t197 = -qJ(3) - pkin(7);
t162 = -pkin(2) * t129 - pkin(1);
t63 = pkin(3) * t99 - pkin(8) * t100 + t162;
t104 = t197 * t125;
t105 = t197 * t129;
t73 = t104 * t121 - t105 * t187;
t151 = -t124 * t73 + t128 * t63;
t185 = t100 * t128;
t34 = -pkin(9) * t185 + t151 + t202;
t186 = t100 * t124;
t70 = t128 * t73;
t195 = t124 * t63 + t70;
t36 = -pkin(9) * t186 + t195;
t35 = t127 * t36;
t196 = t123 * t34 + t35;
t96 = t198 * t124;
t97 = t198 * t128;
t194 = -t123 * t96 + t127 * t97;
t193 = t123 * t93;
t126 = cos(qJ(6));
t14 = -pkin(10) * t55 + t196;
t191 = t126 * t14;
t190 = t128 * t94;
t150 = qJD(2) * t197;
t91 = t129 * qJD(3) + t125 * t150;
t92 = -t125 * qJD(3) + t129 * t150;
t51 = t121 * t91 - t187 * t92;
t189 = t51 * t124;
t188 = t51 * t128;
t122 = sin(qJ(6));
t184 = t122 * t123;
t182 = t124 * t128;
t120 = t128 ^ 2;
t180 = t124 ^ 2 - t120;
t178 = qJD(2) * t129;
t177 = qJD(4) * t124;
t175 = qJD(5) * t123;
t174 = qJD(5) * t127;
t172 = qJD(6) * t122;
t171 = qJD(6) * t126;
t169 = -0.2e1 * pkin(1) * qJD(2);
t115 = -pkin(2) * t187 - pkin(3);
t168 = t115 * t203;
t118 = pkin(2) * t179;
t167 = pkin(4) * t177;
t166 = pkin(4) * t175;
t165 = pkin(4) * t174;
t164 = pkin(5) * t172;
t163 = pkin(5) * t171;
t154 = -t123 * t36 + t127 * t34;
t56 = t204 * t100;
t12 = -pkin(10) * t56 + t154 + t201;
t161 = -t12 - t201;
t25 = -t170 * t55 + t204 * t94;
t52 = t121 * t92 + t187 * t91;
t53 = pkin(3) * t93 - pkin(8) * t94 + t118;
t152 = -t124 * t52 + t128 * t53;
t17 = -pkin(9) * t190 + t93 * pkin(4) + (-t70 + (pkin(9) * t100 - t63) * t124) * qJD(4) + t152;
t22 = -t124 * t53 - t128 * t52 - t176 * t63 + t177 * t73;
t20 = -pkin(9) * t206 - t22;
t155 = -t123 * t20 + t127 * t17;
t7 = -qJD(5) * t196 + t155;
t4 = -t25 * pkin(10) + t200 + t7;
t159 = t100 * t177;
t26 = t94 * t183 - t123 * t159 - t175 * t186 + (t170 * t185 + t192) * t127;
t6 = -t123 * t17 - t127 * t20 - t174 * t34 + t175 * t36;
t5 = -pkin(10) * t26 - t6;
t160 = -t122 * t5 + t126 * t4;
t157 = t124 * t176;
t156 = -qJD(6) * t12 - t5;
t153 = -t123 * t97 - t127 * t96;
t149 = qJD(4) * t198;
t117 = pkin(5) + t199;
t148 = qJD(6) * (-pkin(5) - t117);
t146 = -0.4e1 * t100 * t182;
t72 = -t104 * t187 - t105 * t121;
t144 = t180 * qJD(4);
t143 = t123 * t205 + t124 * t174 + t127 * t177;
t49 = pkin(4) * t186 + t72;
t135 = t126 * t204;
t71 = t170 * t116 - t127 * t205;
t32 = -qJD(6) * t135 + t102 * t172 + t122 * t143 + t126 * t71;
t68 = t126 * t102 + t122 * t204;
t142 = t32 * t99 - t68 * t93;
t141 = t102 * t93 - t71 * t99;
t140 = -t114 * t93 + t115 * t94;
t139 = t12 * t122 + t191;
t44 = -pkin(10) * t102 + t153;
t45 = pkin(10) * t204 + t194;
t138 = t122 * t45 - t126 * t44;
t137 = t122 * t44 + t126 * t45;
t37 = t122 * t56 + t126 * t55;
t38 = -t122 * t55 + t126 * t56;
t136 = t100 * t115 - t114 * t99;
t40 = pkin(4) * t206 + t51;
t133 = t124 * t93 + t176 * t99;
t59 = t128 * t93 - t177 * t99;
t89 = t124 * t149;
t90 = t128 * t149;
t41 = t123 * t90 + t127 * t89 + t174 * t96 + t175 * t97;
t103 = -t128 * pkin(4) + t115;
t2 = -qJD(6) * t139 + t160;
t42 = -qJD(5) * t194 + t123 * t89 - t127 * t90;
t131 = (t123 * t172 + (-t126 * t127 + t184) * qJD(5)) * pkin(4);
t130 = (-t123 * t171 + (-t122 * t127 - t123 * t126) * qJD(5)) * pkin(4);
t98 = t100 ^ 2;
t74 = -pkin(5) * t204 + t103;
t69 = 0.2e1 * t99 * t93;
t67 = t102 * t122 - t135;
t62 = -t117 * t172 + t130;
t61 = -t117 * t171 + t131;
t60 = pkin(5) * t143 + t167;
t43 = -t143 * t99 + t204 * t93;
t39 = pkin(5) * t55 + t49;
t33 = qJD(6) * t68 - t122 * t71 + t126 * t143;
t28 = t71 * pkin(10) + t42;
t27 = -pkin(10) * t143 - t41;
t23 = -qJD(4) * t195 + t152;
t21 = -t33 * t99 - t67 * t93;
t18 = pkin(5) * t26 + t40;
t13 = t14 * t172;
t11 = -qJD(6) * t137 - t122 * t27 + t126 * t28;
t10 = qJD(6) * t138 - t122 * t28 - t126 * t27;
t9 = qJD(6) * t38 + t122 * t25 + t126 * t26;
t8 = -qJD(6) * t37 - t122 * t26 + t126 * t25;
t1 = -t122 * t4 + t126 * t156 + t13;
t3 = [0, 0, 0, 0.2e1 * t125 * t178, 0.2e1 * (-t125 ^ 2 + t129 ^ 2) * qJD(2), 0, 0, 0, t125 * t169, t129 * t169, 0.2e1 * t100 * t51 - 0.2e1 * t52 * t99 + 0.2e1 * t72 * t94 - 0.2e1 * t73 * t93, 0.2e1 * t118 * t162 + 0.2e1 * t72 * t51 + 0.2e1 * t73 * t52, 0.2e1 * t100 * t120 * t94 - 0.2e1 * t157 * t98, t180 * t203 * t98 + t146 * t94, 0.2e1 * t100 * t59 + 0.2e1 * t190 * t99, -0.2e1 * t100 * t133 - 0.2e1 * t192 * t99, t69, 0.2e1 * t23 * t99 + 0.2e1 * t151 * t93 + 0.2e1 * t72 * t192 + 0.2e1 * (t176 * t72 + t189) * t100, 0.2e1 * t22 * t99 - 0.2e1 * t195 * t93 + 0.2e1 * t72 * t190 + 0.2e1 * (-t177 * t72 + t188) * t100, 0.2e1 * t56 * t25, -0.2e1 * t25 * t55 - 0.2e1 * t26 * t56, 0.2e1 * t25 * t99 + 0.2e1 * t56 * t93, -0.2e1 * t26 * t99 - 0.2e1 * t55 * t93, t69, 0.2e1 * t154 * t93 + 0.2e1 * t26 * t49 + 0.2e1 * t40 * t55 + 0.2e1 * t7 * t99, -0.2e1 * t196 * t93 + 0.2e1 * t25 * t49 + 0.2e1 * t40 * t56 + 0.2e1 * t6 * t99, 0.2e1 * t38 * t8, -0.2e1 * t37 * t8 - 0.2e1 * t38 * t9, 0.2e1 * t38 * t93 + 0.2e1 * t8 * t99, -0.2e1 * t37 * t93 - 0.2e1 * t9 * t99, t69, 0.2e1 * t2 * t99 + 0.2e1 * (t12 * t126 - t122 * t14) * t93 + 0.2e1 * t18 * t37 + 0.2e1 * t39 * t9, 0.2e1 * t1 * t99 - 0.2e1 * t139 * t93 + 0.2e1 * t18 * t38 + 0.2e1 * t39 * t8; 0, 0, 0, 0, 0, t178, -t179, 0, -pkin(7) * t178, pkin(7) * t179 (-t121 * t93 - t187 * t94) * pkin(2) (t121 * t52 - t187 * t51) * pkin(2), -t100 * t144 + t182 * t94, qJD(4) * t146 - t180 * t94, t133, t59, 0, -t188 + t140 * t124 + (t124 * t72 + t128 * t136) * qJD(4), t189 + t140 * t128 + (-t124 * t136 + t128 * t72) * qJD(4), t102 * t25 - t56 * t71, -t102 * t26 - t143 * t56 + t204 * t25 + t55 * t71, t141, t43, 0, t103 * t26 + t143 * t49 + t153 * t93 + t167 * t55 - t204 * t40 + t42 * t99, t102 * t40 + t103 * t25 + t167 * t56 - t194 * t93 + t41 * t99 - t49 * t71, -t32 * t38 + t68 * t8, t32 * t37 - t33 * t38 - t67 * t8 - t68 * t9, -t142, t21, 0, t11 * t99 - t138 * t93 + t18 * t67 + t33 * t39 + t37 * t60 + t74 * t9, t10 * t99 - t137 * t93 + t18 * t68 - t32 * t39 + t38 * t60 + t74 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t157, -0.2e1 * t144, 0, 0, 0, t124 * t168, t128 * t168, -0.2e1 * t102 * t71, -0.2e1 * t102 * t143 - 0.2e1 * t204 * t71, 0, 0, 0, 0.2e1 * t103 * t143 - 0.2e1 * t167 * t204, 0.2e1 * t102 * t167 - 0.2e1 * t103 * t71, -0.2e1 * t68 * t32, 0.2e1 * t32 * t67 - 0.2e1 * t33 * t68, 0, 0, 0, 0.2e1 * t33 * t74 + 0.2e1 * t60 * t67, -0.2e1 * t32 * t74 + 0.2e1 * t60 * t68; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t118, 0, 0, 0, 0, 0, t59, -t133, 0, 0, 0, 0, 0, t43, -t141, 0, 0, 0, 0, 0, t21, t142; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t159 + t190, -t206, t93, t23, t22, 0, 0, t25, -t26, t93, t93 * t199 + (-t35 + (-t34 - t202) * t123) * qJD(5) + t155 (-t174 * t99 - t193) * pkin(4) + t6, 0, 0, t8, -t9, t93, t62 * t99 + (-pkin(4) * t184 + t117 * t126) * t93 + t2, t61 * t99 + t13 + (-t117 * t93 - t4) * t122 + (-pkin(4) * t193 + t156) * t126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t176, -t177, 0, -t114 * t176, t114 * t177, 0, 0, -t71, -t143, 0, t42, t41, 0, 0, -t32, -t33, 0, t11, t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t177, -t176, 0, 0, 0, 0, 0, -t143, t71, 0, 0, 0, 0, 0, -t33, t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t166, -0.2e1 * t165, 0, 0, 0, 0, 0, 0.2e1 * t62, 0.2e1 * t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t25, -t26, t93, t7, t6, 0, 0, t8, -t9, t93, t126 * t200 + (t122 * t161 - t191) * qJD(6) + t160, t13 + (-t4 - t200) * t122 + (qJD(6) * t161 - t5) * t126; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t71, -t143, 0, t42, t41, 0, 0, -t32, -t33, 0, t11, t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t143, t71, 0, 0, 0, 0, 0, -t33, t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t166, -t165, 0, 0, 0, 0, 0, t122 * t148 + t130, t126 * t148 + t131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t164, -0.2e1 * t163; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t8, -t9, t93, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, -t33, 0, t11, t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t33, t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, t61; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t164, -t163; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
