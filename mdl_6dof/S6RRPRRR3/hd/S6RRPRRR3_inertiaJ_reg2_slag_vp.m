% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRPRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:26
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRPRRR3_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR3_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR3_inertiaJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
t101 = -qJ(3) - pkin(7);
t87 = cos(qJ(2));
t64 = t101 * t87;
t78 = sin(pkin(11));
t79 = cos(pkin(11));
t83 = sin(qJ(2));
t95 = t101 * t83;
t38 = -t78 * t64 - t79 * t95;
t126 = t38 ^ 2;
t54 = t78 * t83 - t79 * t87;
t52 = t54 ^ 2;
t81 = sin(qJ(5));
t82 = sin(qJ(4));
t85 = cos(qJ(5));
t86 = cos(qJ(4));
t60 = t81 * t82 - t85 * t86;
t116 = t79 * pkin(2);
t69 = -pkin(3) - t116;
t63 = -t86 * pkin(4) + t69;
t42 = t60 * pkin(5) + t63;
t125 = 0.2e1 * t42;
t124 = -0.2e1 * t54;
t123 = 0.2e1 * t54;
t122 = 0.2e1 * t63;
t71 = -t87 * pkin(2) - pkin(1);
t121 = 0.2e1 * t71;
t120 = 0.2e1 * t87;
t119 = t54 * pkin(4);
t118 = t54 * pkin(5);
t117 = t78 * pkin(2);
t80 = sin(qJ(6));
t115 = t80 * pkin(5);
t114 = t81 * pkin(4);
t84 = cos(qJ(6));
t72 = t84 * pkin(5);
t56 = t78 * t87 + t79 * t83;
t62 = t81 * t86 + t85 * t82;
t26 = t62 * t56;
t40 = -t79 * t64 + t78 * t95;
t103 = t86 * t40;
t32 = t54 * pkin(3) - t56 * pkin(8) + t71;
t13 = t103 + (-pkin(9) * t56 + t32) * t82;
t104 = t85 * t13;
t102 = t86 * t56;
t18 = t86 * t32 - t82 * t40;
t12 = -pkin(9) * t102 + t119 + t18;
t7 = t81 * t12 + t104;
t5 = -t26 * pkin(10) + t7;
t113 = t84 * t5;
t73 = t85 * pkin(4);
t68 = pkin(8) + t117;
t112 = pkin(9) + t68;
t106 = t82 * t56;
t28 = t85 * t102 - t81 * t106;
t16 = -t80 * t26 + t84 * t28;
t35 = t84 * t60 + t80 * t62;
t111 = t16 * t35;
t110 = t28 * t60;
t37 = -t80 * t60 + t84 * t62;
t109 = t37 * t54;
t108 = t62 * t54;
t107 = t82 * t54;
t105 = t82 * t86;
t74 = t82 ^ 2;
t76 = t86 ^ 2;
t100 = t74 + t76;
t75 = t83 ^ 2;
t77 = t87 ^ 2;
t99 = t75 + t77;
t98 = t56 * t124;
t97 = t84 * t114;
t96 = t82 * t102;
t6 = t85 * t12 - t81 * t13;
t4 = -t28 * pkin(10) + t118 + t6;
t1 = t84 * t4 - t80 * t5;
t50 = t112 * t82;
t51 = t112 * t86;
t30 = -t85 * t50 - t81 * t51;
t70 = t73 + pkin(5);
t46 = -t80 * t114 + t84 * t70;
t24 = pkin(4) * t106 + t38;
t2 = t80 * t4 + t113;
t19 = t82 * t32 + t103;
t94 = t18 * t86 + t19 * t82;
t93 = -t18 * t82 + t19 * t86;
t31 = -t81 * t50 + t85 * t51;
t92 = -t54 * t68 + t56 * t69;
t58 = t62 ^ 2;
t57 = t60 ^ 2;
t53 = t56 ^ 2;
t48 = t86 * t54;
t47 = t80 * t70 + t97;
t41 = t60 * t54;
t34 = t37 ^ 2;
t33 = t35 ^ 2;
t23 = t35 * t54;
t22 = -t60 * pkin(10) + t31;
t21 = -t62 * pkin(10) + t30;
t20 = t62 * t26;
t17 = t26 * pkin(5) + t24;
t14 = t84 * t26 + t80 * t28;
t10 = t80 * t21 + t84 * t22;
t9 = t84 * t21 - t80 * t22;
t8 = t37 * t14;
t3 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t75, t83 * t120, 0, t77, 0, 0, pkin(1) * t120, -0.2e1 * pkin(1) * t83, 0.2e1 * t99 * pkin(7), t99 * pkin(7) ^ 2 + pkin(1) ^ 2, t53, t98, 0, t52, 0, 0, t54 * t121, t56 * t121, 0.2e1 * t38 * t56 - 0.2e1 * t40 * t54, t40 ^ 2 + t71 ^ 2 + t126, t76 * t53, -0.2e1 * t53 * t105, t102 * t123, t74 * t53, t82 * t98, t52, 0.2e1 * t38 * t106 + 0.2e1 * t18 * t54, 0.2e1 * t38 * t102 - 0.2e1 * t19 * t54, -0.2e1 * t94 * t56, t18 ^ 2 + t19 ^ 2 + t126, t28 ^ 2, -0.2e1 * t28 * t26, t28 * t123, t26 ^ 2, -t26 * t123, t52, 0.2e1 * t24 * t26 + 0.2e1 * t6 * t54, 0.2e1 * t24 * t28 - 0.2e1 * t7 * t54, -0.2e1 * t7 * t26 - 0.2e1 * t6 * t28, t24 ^ 2 + t6 ^ 2 + t7 ^ 2, t16 ^ 2, -0.2e1 * t16 * t14, t16 * t123, t14 ^ 2, t14 * t124, t52, 0.2e1 * t1 * t54 + 0.2e1 * t17 * t14, 0.2e1 * t17 * t16 - 0.2e1 * t2 * t54, -0.2e1 * t1 * t16 - 0.2e1 * t2 * t14, t1 ^ 2 + t17 ^ 2 + t2 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t83, 0, t87, 0, -t83 * pkin(7), -t87 * pkin(7), 0, 0, 0, 0, t56, 0, -t54, 0, -t38, -t40 (-t54 * t78 - t56 * t79) * pkin(2) (-t38 * t79 + t40 * t78) * pkin(2), t96 (-t74 + t76) * t56, t107, -t96, t48, 0, -t38 * t86 + t92 * t82, t38 * t82 + t92 * t86, t93, t38 * t69 + t93 * t68, t28 * t62, -t20 - t110, t108, t26 * t60, -t41, 0, t24 * t60 + t63 * t26 + t30 * t54, t24 * t62 + t63 * t28 - t31 * t54, -t31 * t26 - t30 * t28 - t6 * t62 - t7 * t60, t24 * t63 + t6 * t30 + t7 * t31, t16 * t37, -t8 - t111, t109, t14 * t35, -t23, 0, t42 * t14 + t17 * t35 + t9 * t54, -t10 * t54 + t42 * t16 + t17 * t37, -t1 * t37 - t10 * t14 - t9 * t16 - t2 * t35, t1 * t9 + t2 * t10 + t17 * t42; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t116, -0.2e1 * t117, 0 (t78 ^ 2 + t79 ^ 2) * pkin(2) ^ 2, t74, 0.2e1 * t105, 0, t76, 0, 0, -0.2e1 * t69 * t86, 0.2e1 * t69 * t82, 0.2e1 * t100 * t68, t100 * t68 ^ 2 + t69 ^ 2, t58, -0.2e1 * t62 * t60, 0, t57, 0, 0, t60 * t122, t62 * t122, -0.2e1 * t30 * t62 - 0.2e1 * t31 * t60, t30 ^ 2 + t31 ^ 2 + t63 ^ 2, t34, -0.2e1 * t37 * t35, 0, t33, 0, 0, t35 * t125, t37 * t125, -0.2e1 * t10 * t35 - 0.2e1 * t9 * t37, t10 ^ 2 + t42 ^ 2 + t9 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t54, t56, 0, t71, 0, 0, 0, 0, 0, 0, t48, -t107, -t100 * t56, t94, 0, 0, 0, 0, 0, 0, -t41, -t108, -t20 + t110, -t6 * t60 + t7 * t62, 0, 0, 0, 0, 0, 0, -t23, -t109, -t8 + t111, -t1 * t35 + t2 * t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t30 * t60 + t31 * t62, 0, 0, 0, 0, 0, 0, 0, 0, 0, t10 * t37 - t9 * t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, t100, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58 + t57, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34 + t33; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t102, 0, -t106, t54, t18, -t19, 0, 0, 0, 0, t28, 0, -t26, t54, t54 * t73 + t6, -t104 + (-t12 - t119) * t81 (-t26 * t81 - t28 * t85) * pkin(4) (t6 * t85 + t7 * t81) * pkin(4), 0, 0, t16, 0, -t14, t54, t46 * t54 + t1, -t47 * t54 - t2, -t47 * t14 - t46 * t16, t1 * t46 + t2 * t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t82, 0, t86, 0, -t82 * t68, -t86 * t68, 0, 0, 0, 0, t62, 0, -t60, 0, t30, -t31 (-t60 * t81 - t62 * t85) * pkin(4) (t30 * t85 + t31 * t81) * pkin(4), 0, 0, t37, 0, -t35, 0, t9, -t10, -t47 * t35 - t46 * t37, t10 * t47 + t9 * t46; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t86, -t82, 0, 0, 0, 0, 0, 0, 0, 0, -t60, -t62, 0 (-t60 * t85 + t62 * t81) * pkin(4), 0, 0, 0, 0, 0, 0, -t35, -t37, 0, -t35 * t46 + t37 * t47; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t73, -0.2e1 * t114, 0 (t81 ^ 2 + t85 ^ 2) * pkin(4) ^ 2, 0, 0, 0, 0, 0, 1, 0.2e1 * t46, -0.2e1 * t47, 0, t46 ^ 2 + t47 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t28, 0, -t26, t54, t6, -t7, 0, 0, 0, 0, t16, 0, -t14, t54, t54 * t72 + t1, -t113 + (-t4 - t118) * t80 (-t14 * t80 - t16 * t84) * pkin(5) (t1 * t84 + t2 * t80) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t62, 0, -t60, 0, t30, -t31, 0, 0, 0, 0, t37, 0, -t35, 0, t9, -t10 (-t35 * t80 - t37 * t84) * pkin(5) (t10 * t80 + t84 * t9) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t60, -t62, 0, 0, 0, 0, 0, 0, 0, 0, -t35, -t37, 0 (-t35 * t84 + t37 * t80) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t73, -t114, 0, 0, 0, 0, 0, 0, 0, 1, t46 + t72, -t97 + (-pkin(5) - t70) * t80, 0 (t46 * t84 + t47 * t80) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t72, -0.2e1 * t115, 0 (t80 ^ 2 + t84 ^ 2) * pkin(5) ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t16, 0, -t14, t54, t1, -t2, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t37, 0, -t35, 0, t9, -t10, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t35, -t37, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t46, -t47, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t72, -t115, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0;];
MM_reg  = t3;
