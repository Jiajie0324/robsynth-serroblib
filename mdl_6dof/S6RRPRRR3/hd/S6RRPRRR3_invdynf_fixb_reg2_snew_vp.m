% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRRR3
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6,theta3]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 20:23
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRRR3_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR3_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR3_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRR3_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRR3_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR3_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 20:23:37
% EndTime: 2019-05-06 20:23:47
% DurationCPUTime: 9.78s
% Computational Cost: add. (106781->345), mult. (246107->484), div. (0->0), fcn. (184094->12), ass. (0->276)
t2262 = sin(pkin(11));
t2263 = cos(pkin(11));
t2273 = cos(qJ(2));
t2314 = qJD(1) * t2273;
t2268 = sin(qJ(2));
t2315 = qJD(1) * t2268;
t2229 = t2262 * t2315 - t2263 * t2314;
t2228 = qJD(4) + t2229;
t2224 = qJD(5) + t2228;
t2222 = qJD(6) + t2224;
t2329 = qJD(6) + t2222;
t2256 = t2273 * qJDD(1);
t2297 = qJD(2) * t2315;
t2238 = t2256 - t2297;
t2260 = t2273 ^ 2;
t2275 = qJD(1) ^ 2;
t2284 = qJD(2) * pkin(2) - qJ(3) * t2315;
t2269 = sin(qJ(1));
t2274 = cos(qJ(1));
t2246 = t2269 * g(1) - t2274 * g(2);
t2285 = qJDD(1) * pkin(1) + t2246;
t2199 = t2238 * pkin(2) + (qJ(3) * t2260 + pkin(7)) * t2275 - t2284 * t2315 - qJDD(3) + t2285;
t2328 = qJD(2) ^ 2;
t2231 = t2262 * t2314 + t2263 * t2315;
t2267 = sin(qJ(4));
t2272 = cos(qJ(4));
t2214 = -t2272 * qJD(2) + t2231 * t2267;
t2215 = qJD(2) * t2267 + t2231 * t2272;
t2266 = sin(qJ(5));
t2271 = cos(qJ(5));
t2193 = t2271 * t2214 + t2215 * t2266;
t2195 = -t2214 * t2266 + t2215 * t2271;
t2265 = sin(qJ(6));
t2270 = cos(qJ(6));
t2164 = t2270 * t2193 + t2195 * t2265;
t2327 = t2164 ^ 2;
t2166 = -t2193 * t2265 + t2195 * t2270;
t2326 = t2166 ^ 2;
t2325 = t2193 ^ 2;
t2324 = t2195 ^ 2;
t2323 = t2214 ^ 2;
t2322 = t2215 ^ 2;
t2321 = t2222 ^ 2;
t2320 = t2224 ^ 2;
t2319 = t2228 ^ 2;
t2318 = t2229 ^ 2;
t2317 = t2231 ^ 2;
t2316 = -2 * qJD(3);
t2313 = qJD(2) * t2229;
t2312 = qJD(2) * t2231;
t2311 = t2164 * t2166;
t2310 = t2193 * t2195;
t2309 = t2214 * t2215;
t2308 = t2224 * t2193;
t2307 = t2228 * t2214;
t2306 = t2229 * t2231;
t2305 = t2260 * t2275;
t2304 = t2268 * t2275;
t2303 = qJD(4) - t2228;
t2302 = qJD(5) - t2224;
t2301 = qJD(6) - t2222;
t2247 = -g(1) * t2274 - g(2) * t2269;
t2281 = -pkin(1) * t2275 + qJDD(1) * pkin(7) + t2247;
t2221 = -t2268 * g(3) + t2273 * t2281;
t2196 = -pkin(2) * t2305 + t2238 * qJ(3) - qJD(2) * t2284 + t2221;
t2296 = qJD(2) * t2314;
t2298 = t2268 * qJDD(1);
t2237 = t2296 + t2298;
t2279 = t2268 * t2281;
t2276 = -t2279 - t2237 * qJ(3) + qJDD(2) * pkin(2) + (qJ(3) * qJD(1) * qJD(2) + pkin(2) * t2304 - g(3)) * t2273;
t2160 = t2263 * t2196 + t2229 * t2316 + t2262 * t2276;
t2207 = pkin(3) * t2229 - pkin(8) * t2231;
t2144 = -pkin(3) * t2328 + qJDD(2) * pkin(8) - t2207 * t2229 + t2160;
t2300 = t2262 * t2237 - t2263 * t2238;
t2201 = t2300 + t2312;
t2211 = t2237 * t2263 + t2238 * t2262;
t2293 = -t2211 + t2313;
t2153 = pkin(3) * t2201 + pkin(8) * t2293 - t2199;
t2114 = -t2267 * t2144 + t2272 * t2153;
t2294 = -qJDD(4) - t2300;
t2174 = -t2294 - t2309;
t2287 = -t2267 * qJDD(2) - t2272 * t2211;
t2184 = -qJD(4) * t2214 - t2287;
t2101 = (-t2184 - t2307) * pkin(9) + t2174 * pkin(4) + t2114;
t2115 = t2272 * t2144 + t2267 * t2153;
t2205 = pkin(4) * t2228 - pkin(9) * t2215;
t2289 = -t2272 * qJDD(2) + t2267 * t2211;
t2283 = -qJD(4) * t2215 - t2289;
t2107 = -pkin(4) * t2323 + pkin(9) * t2283 - t2228 * t2205 + t2115;
t2073 = t2266 * t2101 + t2271 * t2107;
t2259 = t2268 ^ 2;
t2299 = t2259 + t2260;
t2072 = t2271 * t2101 - t2266 * t2107;
t2277 = -t2271 * t2184 - t2266 * t2283;
t2141 = -t2193 * qJD(5) - t2277;
t2291 = t2266 * t2184 - t2271 * t2283;
t2282 = qJD(5) * t2195 + t2291;
t2292 = -t2265 * t2141 - t2270 * t2282;
t2290 = t2262 * t2196 - t2263 * t2276;
t2288 = -qJDD(5) + t2294;
t2286 = -qJDD(6) + t2288;
t2156 = -t2288 - t2310;
t2143 = -qJDD(2) * pkin(3) - t2328 * pkin(8) + ((2 * qJD(3)) + t2207) * t2231 + t2290;
t2278 = -t2270 * t2141 + t2265 * t2282;
t2113 = -t2283 * pkin(4) - t2323 * pkin(9) + t2215 * t2205 + t2143;
t2253 = t2273 * t2304;
t2252 = -t2305 - t2328;
t2251 = -t2259 * t2275 - t2328;
t2245 = -qJDD(2) + t2253;
t2244 = qJDD(2) + t2253;
t2243 = t2299 * t2275;
t2242 = -qJDD(1) * t2269 - t2274 * t2275;
t2241 = qJDD(1) * t2274 - t2269 * t2275;
t2240 = t2299 * qJDD(1);
t2239 = t2256 - 0.2e1 * t2297;
t2236 = 0.2e1 * t2296 + t2298;
t2234 = t2275 * pkin(7) + t2285;
t2223 = -t2317 - t2328;
t2220 = -t2273 * g(3) - t2279;
t2219 = t2245 * t2273 - t2251 * t2268;
t2218 = -t2244 * t2268 + t2252 * t2273;
t2217 = t2245 * t2268 + t2251 * t2273;
t2216 = t2244 * t2273 + t2252 * t2268;
t2210 = -qJDD(2) - t2306;
t2209 = qJDD(2) - t2306;
t2208 = -t2318 - t2328;
t2204 = -t2211 - t2313;
t2202 = -t2300 + t2312;
t2200 = -t2317 - t2318;
t2198 = -t2220 * t2268 + t2221 * t2273;
t2197 = t2220 * t2273 + t2221 * t2268;
t2187 = -t2319 - t2322;
t2186 = t2210 * t2263 - t2223 * t2262;
t2185 = t2210 * t2262 + t2223 * t2263;
t2182 = -t2319 - t2323;
t2179 = -t2322 - t2323;
t2178 = t2208 * t2263 - t2209 * t2262;
t2177 = t2208 * t2262 + t2209 * t2263;
t2176 = pkin(5) * t2224 - pkin(10) * t2195;
t2175 = t2294 - t2309;
t2173 = -t2320 - t2324;
t2172 = t2202 * t2263 - t2204 * t2262;
t2171 = t2202 * t2262 + t2204 * t2263;
t2170 = t2214 * t2303 + t2287;
t2169 = t2184 - t2307;
t2168 = -t2215 * t2303 - t2289;
t2167 = (qJD(4) + t2228) * t2215 + t2289;
t2163 = -t2185 * t2268 + t2186 * t2273;
t2162 = t2185 * t2273 + t2186 * t2268;
t2161 = -t2320 - t2325;
t2159 = t2231 * t2316 - t2290;
t2157 = t2288 - t2310;
t2155 = t2175 * t2272 - t2187 * t2267;
t2154 = t2175 * t2267 + t2187 * t2272;
t2150 = -t2174 * t2267 + t2182 * t2272;
t2149 = t2174 * t2272 + t2182 * t2267;
t2148 = -t2321 - t2326;
t2147 = -t2177 * t2268 + t2178 * t2273;
t2146 = t2177 * t2273 + t2178 * t2268;
t2145 = -t2324 - t2325;
t2138 = -t2171 * t2268 + t2172 * t2273;
t2137 = t2171 * t2273 + t2172 * t2268;
t2136 = t2168 * t2272 - t2170 * t2267;
t2135 = t2168 * t2267 + t2170 * t2272;
t2134 = t2157 * t2271 - t2173 * t2266;
t2133 = t2157 * t2266 + t2173 * t2271;
t2132 = -t2321 - t2327;
t2131 = t2155 * t2263 + t2169 * t2262;
t2130 = t2155 * t2262 - t2169 * t2263;
t2129 = t2193 * t2302 + t2277;
t2128 = t2141 - t2308;
t2127 = -t2195 * t2302 - t2291;
t2126 = (qJD(5) + t2224) * t2195 + t2291;
t2125 = t2150 * t2263 + t2167 * t2262;
t2124 = t2150 * t2262 - t2167 * t2263;
t2123 = t2286 - t2311;
t2122 = -t2286 - t2311;
t2121 = -t2159 * t2262 + t2160 * t2263;
t2120 = t2159 * t2263 + t2160 * t2262;
t2119 = -t2156 * t2266 + t2161 * t2271;
t2118 = t2156 * t2271 + t2161 * t2266;
t2117 = t2136 * t2263 + t2179 * t2262;
t2116 = t2136 * t2262 - t2179 * t2263;
t2112 = -t2326 - t2327;
t2111 = t2123 * t2270 - t2148 * t2265;
t2110 = t2123 * t2265 + t2148 * t2270;
t2109 = -t2133 * t2267 + t2134 * t2272;
t2108 = t2133 * t2272 + t2134 * t2267;
t2105 = -t2130 * t2268 + t2131 * t2273;
t2104 = t2130 * t2273 + t2131 * t2268;
t2103 = -t2122 * t2265 + t2132 * t2270;
t2102 = t2122 * t2270 + t2132 * t2265;
t2098 = t2127 * t2271 - t2129 * t2266;
t2097 = t2127 * t2266 + t2129 * t2271;
t2096 = -t2124 * t2268 + t2125 * t2273;
t2095 = t2124 * t2273 + t2125 * t2268;
t2094 = -t2120 * t2268 + t2121 * t2273;
t2093 = t2120 * t2273 + t2121 * t2268;
t2092 = -t2118 * t2267 + t2119 * t2272;
t2091 = t2118 * t2272 + t2119 * t2267;
t2090 = -t2116 * t2268 + t2117 * t2273;
t2089 = t2116 * t2273 + t2117 * t2268;
t2088 = t2164 * t2301 + t2278;
t2087 = -t2164 * t2329 - t2278;
t2086 = -t2166 * t2301 + t2292;
t2085 = t2166 * t2329 - t2292;
t2084 = -t2114 * t2267 + t2115 * t2272;
t2083 = t2114 * t2272 + t2115 * t2267;
t2082 = pkin(5) * t2282 - pkin(10) * t2325 + t2195 * t2176 + t2113;
t2081 = t2109 * t2263 + t2128 * t2262;
t2080 = t2109 * t2262 - t2128 * t2263;
t2079 = t2092 * t2263 + t2126 * t2262;
t2078 = t2092 * t2262 - t2126 * t2263;
t2077 = -t2110 * t2266 + t2111 * t2271;
t2076 = t2110 * t2271 + t2111 * t2266;
t2075 = t2084 * t2263 + t2143 * t2262;
t2074 = t2084 * t2262 - t2143 * t2263;
t2071 = -t2102 * t2266 + t2103 * t2271;
t2070 = t2102 * t2271 + t2103 * t2266;
t2069 = -t2097 * t2267 + t2098 * t2272;
t2068 = t2097 * t2272 + t2098 * t2267;
t2067 = t2069 * t2263 + t2145 * t2262;
t2066 = t2069 * t2262 - t2145 * t2263;
t2065 = t2086 * t2270 - t2088 * t2265;
t2064 = t2086 * t2265 + t2088 * t2270;
t2063 = -pkin(5) * t2325 - pkin(10) * t2282 - t2224 * t2176 + t2073;
t2062 = (-t2141 - t2308) * pkin(10) + t2156 * pkin(5) + t2072;
t2061 = -t2080 * t2268 + t2081 * t2273;
t2060 = t2080 * t2273 + t2081 * t2268;
t2059 = -t2078 * t2268 + t2079 * t2273;
t2058 = t2078 * t2273 + t2079 * t2268;
t2057 = -t2076 * t2267 + t2077 * t2272;
t2056 = t2076 * t2272 + t2077 * t2267;
t2055 = -t2074 * t2268 + t2075 * t2273;
t2054 = t2074 * t2273 + t2075 * t2268;
t2053 = -t2072 * t2266 + t2073 * t2271;
t2052 = t2072 * t2271 + t2073 * t2266;
t2051 = -t2070 * t2267 + t2071 * t2272;
t2050 = t2070 * t2272 + t2071 * t2267;
t2049 = t2057 * t2263 + t2087 * t2262;
t2048 = t2057 * t2262 - t2087 * t2263;
t2047 = -t2066 * t2268 + t2067 * t2273;
t2046 = t2066 * t2273 + t2067 * t2268;
t2045 = -t2064 * t2266 + t2065 * t2271;
t2044 = t2064 * t2271 + t2065 * t2266;
t2043 = t2051 * t2263 + t2085 * t2262;
t2042 = t2051 * t2262 - t2085 * t2263;
t2041 = t2062 * t2265 + t2063 * t2270;
t2040 = t2062 * t2270 - t2063 * t2265;
t2039 = -t2052 * t2267 + t2053 * t2272;
t2038 = t2052 * t2272 + t2053 * t2267;
t2037 = t2039 * t2263 + t2113 * t2262;
t2036 = t2039 * t2262 - t2113 * t2263;
t2035 = -t2048 * t2268 + t2049 * t2273;
t2034 = t2048 * t2273 + t2049 * t2268;
t2033 = -t2044 * t2267 + t2045 * t2272;
t2032 = t2044 * t2272 + t2045 * t2267;
t2031 = t2033 * t2263 + t2112 * t2262;
t2030 = t2033 * t2262 - t2112 * t2263;
t2029 = -t2042 * t2268 + t2043 * t2273;
t2028 = t2042 * t2273 + t2043 * t2268;
t2027 = -t2040 * t2265 + t2041 * t2270;
t2026 = t2040 * t2270 + t2041 * t2265;
t2025 = -t2036 * t2268 + t2037 * t2273;
t2024 = t2036 * t2273 + t2037 * t2268;
t2023 = -t2030 * t2268 + t2031 * t2273;
t2022 = t2030 * t2273 + t2031 * t2268;
t2021 = -t2026 * t2266 + t2027 * t2271;
t2020 = t2026 * t2271 + t2027 * t2266;
t2019 = -t2020 * t2267 + t2021 * t2272;
t2018 = t2020 * t2272 + t2021 * t2267;
t2017 = t2019 * t2263 + t2082 * t2262;
t2016 = t2019 * t2262 - t2082 * t2263;
t2015 = -t2016 * t2268 + t2017 * t2273;
t2014 = t2016 * t2273 + t2017 * t2268;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2242, -t2241, 0, -t2246 * t2269 + t2247 * t2274, 0, 0, 0, 0, 0, 0, t2218 * t2274 - t2239 * t2269, t2219 * t2274 + t2236 * t2269, t2240 * t2274 - t2243 * t2269, t2198 * t2274 - t2234 * t2269, 0, 0, 0, 0, 0, 0, t2147 * t2274 + t2201 * t2269, t2163 * t2274 - t2269 * t2293, t2138 * t2274 + t2200 * t2269, t2094 * t2274 - t2199 * t2269, 0, 0, 0, 0, 0, 0, t2096 * t2274 + t2149 * t2269, t2105 * t2274 + t2154 * t2269, t2090 * t2274 + t2135 * t2269, t2055 * t2274 + t2083 * t2269, 0, 0, 0, 0, 0, 0, t2059 * t2274 + t2091 * t2269, t2061 * t2274 + t2108 * t2269, t2047 * t2274 + t2068 * t2269, t2025 * t2274 + t2038 * t2269, 0, 0, 0, 0, 0, 0, t2029 * t2274 + t2050 * t2269, t2035 * t2274 + t2056 * t2269, t2023 * t2274 + t2032 * t2269, t2015 * t2274 + t2018 * t2269; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2241, t2242, 0, t2246 * t2274 + t2247 * t2269, 0, 0, 0, 0, 0, 0, t2218 * t2269 + t2239 * t2274, t2219 * t2269 - t2236 * t2274, t2240 * t2269 + t2243 * t2274, t2198 * t2269 + t2234 * t2274, 0, 0, 0, 0, 0, 0, t2147 * t2269 - t2201 * t2274, t2163 * t2269 + t2274 * t2293, t2138 * t2269 - t2200 * t2274, t2094 * t2269 + t2199 * t2274, 0, 0, 0, 0, 0, 0, t2096 * t2269 - t2149 * t2274, t2105 * t2269 - t2154 * t2274, t2090 * t2269 - t2135 * t2274, t2055 * t2269 - t2083 * t2274, 0, 0, 0, 0, 0, 0, t2059 * t2269 - t2091 * t2274, t2061 * t2269 - t2108 * t2274, t2047 * t2269 - t2068 * t2274, t2025 * t2269 - t2038 * t2274, 0, 0, 0, 0, 0, 0, t2029 * t2269 - t2050 * t2274, t2035 * t2269 - t2056 * t2274, t2023 * t2269 - t2032 * t2274, t2015 * t2269 - t2018 * t2274; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2216, t2217, 0, t2197, 0, 0, 0, 0, 0, 0, t2146, t2162, t2137, t2093, 0, 0, 0, 0, 0, 0, t2095, t2104, t2089, t2054, 0, 0, 0, 0, 0, 0, t2058, t2060, t2046, t2024, 0, 0, 0, 0, 0, 0, t2028, t2034, t2022, t2014; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2275, -qJDD(1), 0, t2247, 0, 0, 0, 0, 0, 0, t2218, t2219, t2240, t2198, 0, 0, 0, 0, 0, 0, t2147, t2163, t2138, t2094, 0, 0, 0, 0, 0, 0, t2096, t2105, t2090, t2055, 0, 0, 0, 0, 0, 0, t2059, t2061, t2047, t2025, 0, 0, 0, 0, 0, 0, t2029, t2035, t2023, t2015; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2275, 0, t2246, 0, 0, 0, 0, 0, 0, t2239, -t2236, t2243, t2234, 0, 0, 0, 0, 0, 0, -t2201, t2293, -t2200, t2199, 0, 0, 0, 0, 0, 0, -t2149, -t2154, -t2135, -t2083, 0, 0, 0, 0, 0, 0, -t2091, -t2108, -t2068, -t2038, 0, 0, 0, 0, 0, 0, -t2050, -t2056, -t2032, -t2018; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2216, t2217, 0, t2197, 0, 0, 0, 0, 0, 0, t2146, t2162, t2137, t2093, 0, 0, 0, 0, 0, 0, t2095, t2104, t2089, t2054, 0, 0, 0, 0, 0, 0, t2058, t2060, t2046, t2024, 0, 0, 0, 0, 0, 0, t2028, t2034, t2022, t2014; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2252, t2245, t2256, t2221, 0, 0, 0, 0, 0, 0, t2178, t2186, t2172, t2121, 0, 0, 0, 0, 0, 0, t2125, t2131, t2117, t2075, 0, 0, 0, 0, 0, 0, t2079, t2081, t2067, t2037, 0, 0, 0, 0, 0, 0, t2043, t2049, t2031, t2017; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2244, t2251, -t2298, t2220, 0, 0, 0, 0, 0, 0, t2177, t2185, t2171, t2120, 0, 0, 0, 0, 0, 0, t2124, t2130, t2116, t2074, 0, 0, 0, 0, 0, 0, t2078, t2080, t2066, t2036, 0, 0, 0, 0, 0, 0, t2042, t2048, t2030, t2016; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2239, t2236, -t2243, -t2234, 0, 0, 0, 0, 0, 0, t2201, -t2293, t2200, -t2199, 0, 0, 0, 0, 0, 0, t2149, t2154, t2135, t2083, 0, 0, 0, 0, 0, 0, t2091, t2108, t2068, t2038, 0, 0, 0, 0, 0, 0, t2050, t2056, t2032, t2018; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2208, t2210, t2202, t2160, 0, 0, 0, 0, 0, 0, t2150, t2155, t2136, t2084, 0, 0, 0, 0, 0, 0, t2092, t2109, t2069, t2039, 0, 0, 0, 0, 0, 0, t2051, t2057, t2033, t2019; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2209, t2223, t2204, t2159, 0, 0, 0, 0, 0, 0, -t2167, -t2169, -t2179, -t2143, 0, 0, 0, 0, 0, 0, -t2126, -t2128, -t2145, -t2113, 0, 0, 0, 0, 0, 0, -t2085, -t2087, -t2112, -t2082; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2201, -t2293, t2200, -t2199, 0, 0, 0, 0, 0, 0, t2149, t2154, t2135, t2083, 0, 0, 0, 0, 0, 0, t2091, t2108, t2068, t2038, 0, 0, 0, 0, 0, 0, t2050, t2056, t2032, t2018; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2182, t2175, t2168, t2115, 0, 0, 0, 0, 0, 0, t2119, t2134, t2098, t2053, 0, 0, 0, 0, 0, 0, t2071, t2077, t2045, t2021; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2174, t2187, t2170, t2114, 0, 0, 0, 0, 0, 0, t2118, t2133, t2097, t2052, 0, 0, 0, 0, 0, 0, t2070, t2076, t2044, t2020; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2167, t2169, t2179, t2143, 0, 0, 0, 0, 0, 0, t2126, t2128, t2145, t2113, 0, 0, 0, 0, 0, 0, t2085, t2087, t2112, t2082; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2161, t2157, t2127, t2073, 0, 0, 0, 0, 0, 0, t2103, t2111, t2065, t2027; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2156, t2173, t2129, t2072, 0, 0, 0, 0, 0, 0, t2102, t2110, t2064, t2026; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2126, t2128, t2145, t2113, 0, 0, 0, 0, 0, 0, t2085, t2087, t2112, t2082; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2132, t2123, t2086, t2041; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2122, t2148, t2088, t2040; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2085, t2087, t2112, t2082;];
f_new_reg  = t1;
