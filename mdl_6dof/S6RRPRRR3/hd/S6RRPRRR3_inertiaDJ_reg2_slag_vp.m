% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RRPRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,d5,d6,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 13:26
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPRRR3_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRR3_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRR3_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRR3_inertiaDJ_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 13:25:19
% EndTime: 2019-03-09 13:25:37
% DurationCPUTime: 6.82s
% Computational Cost: add. (13311->396), mult. (28619->698), div. (0->0), fcn. (28914->10), ass. (0->181)
t256 = sin(qJ(5));
t214 = t256 * qJD(4);
t218 = qJD(5) * t256;
t267 = t214 + t218;
t258 = cos(qJ(5));
t215 = t258 * qJD(5);
t266 = -t258 * qJD(4) - t215;
t129 = sin(qJ(4));
t241 = sin(pkin(11));
t195 = t241 * pkin(2) + pkin(8);
t188 = pkin(9) + t195;
t171 = t188 * t258;
t131 = cos(qJ(4));
t182 = t131 * t188;
t265 = t129 * t171 + t256 * t182;
t130 = sin(qJ(2));
t132 = cos(qJ(2));
t242 = cos(pkin(11));
t109 = t242 * t130 + t241 * t132;
t108 = t241 * t130 - t242 * t132;
t184 = t108 * qJD(2);
t176 = t129 * t184;
t233 = qJD(4) * t131;
t264 = t109 * t233 - t176;
t111 = t258 * t129 + t256 * t131;
t263 = -0.4e1 * t109;
t170 = t188 * t256;
t68 = -t129 * t170 + t258 * t182;
t250 = -qJ(3) - pkin(7);
t213 = qJD(2) * t250;
t173 = -t130 * qJD(3) + t132 * t213;
t174 = qJD(3) * t132 + t130 * t213;
t144 = t241 * t173 + t242 * t174;
t125 = -pkin(2) * t132 - pkin(1);
t179 = t108 * pkin(3) - t109 * pkin(8) + t125;
t262 = -qJD(4) * t179 - t144;
t105 = t109 * qJD(2);
t153 = t108 * t250;
t236 = qJD(2) * t130;
t228 = pkin(2) * t236;
t261 = -t105 * pkin(3) - pkin(8) * t184 + qJD(4) * t153 - t228;
t175 = t131 * t184;
t234 = qJD(4) * t129;
t155 = -t109 * t234 - t175;
t126 = t129 ^ 2;
t127 = t131 ^ 2;
t206 = qJD(4) * (t126 - t127);
t166 = t184 * t256;
t167 = t184 * t258;
t224 = t258 * t131;
t201 = t109 * t224;
t207 = -t129 * t167 - t131 * t166 + (qJD(4) + qJD(5)) * t201;
t240 = t109 * t129;
t260 = -t267 * t240 + t207;
t24 = t261 * t129 + t262 * t131;
t25 = t262 * t129 - t261 * t131;
t52 = -t129 * t153 + t131 * t179;
t53 = t129 * t179 + t131 * t153;
t259 = t24 * t129 - t25 * t131 + (t129 * t52 - t131 * t53) * qJD(4);
t202 = -t266 * t129 + t267 * t131;
t257 = cos(qJ(6));
t128 = sin(qJ(6));
t255 = pkin(4) * t128;
t254 = t105 * pkin(5);
t124 = t256 * t129;
t193 = t124 - t224;
t75 = t257 * t111 - t128 * t193;
t197 = t129 * t214;
t78 = t129 * t218 + t266 * t131 + t197;
t41 = t75 * qJD(6) - t128 * t78 + t257 * t202;
t180 = t257 * t193;
t74 = t111 * t128 + t180;
t253 = t74 * t41;
t232 = qJD(6) * t128;
t40 = qJD(6) * t180 + t111 * t232 + t128 * t202 + t257 * t78;
t252 = t75 * t40;
t62 = -t242 * t173 + t241 * t174;
t79 = t109 * t250;
t251 = t79 * t62;
t32 = t202 * t109 - t129 * t166 + t131 * t167;
t246 = t111 * t109;
t63 = -t109 * t124 + t201;
t45 = -t128 * t246 + t257 * t63;
t12 = t45 * qJD(6) - t128 * t32 + t257 * t260;
t196 = t257 * t246;
t44 = t128 * t63 + t196;
t249 = -t75 * t12 + t40 * t44;
t248 = -t111 * t260 + t78 * t246;
t138 = -t131 * t109 * pkin(9) + t108 * pkin(4) + t52;
t38 = t256 * t138;
t43 = -pkin(9) * t240 + t53;
t21 = t258 * t43 + t38;
t245 = t111 * t78;
t244 = t62 * t129;
t243 = t62 * t131;
t239 = t129 * t105;
t238 = t131 * t105;
t235 = qJD(2) * t132;
t231 = -0.2e1 * pkin(1) * qJD(2);
t76 = 0.2e1 * t108 * t105;
t123 = -t242 * pkin(2) - pkin(3);
t230 = 0.2e1 * qJD(4) * t123;
t229 = t258 * pkin(4);
t227 = pkin(4) * t234;
t226 = pkin(5) * t232;
t220 = t129 * t233;
t219 = t130 * t235;
t217 = qJD(6) * t257;
t208 = -0.2e1 * t226;
t205 = pkin(4) * t215;
t204 = pkin(4) * t218;
t203 = pkin(5) * t217;
t107 = t109 ^ 2;
t200 = t107 * t220;
t199 = t229 + pkin(5);
t198 = t257 * t256;
t39 = t258 * t138;
t20 = -t256 * t43 + t39;
t11 = qJD(6) * t196 + t128 * t260 + t63 * t232 + t257 * t32;
t194 = -t11 * t74 + t41 * t45;
t192 = t105 * t75 - t108 * t40;
t189 = t105 * t111 - t108 * t78;
t134 = t105 * pkin(4) - t155 * pkin(9) + t25;
t135 = -pkin(9) * t264 - t24;
t7 = -qJD(5) * t38 + t258 * t134 - t256 * t135 - t43 * t215;
t133 = t32 * pkin(10) + t254 + t7;
t6 = -qJD(5) * t39 - t256 * t134 - t258 * t135 + t43 * t218;
t141 = -pkin(10) * t260 - t6;
t163 = t108 * pkin(5) - t63 * pkin(10) + t20;
t156 = t257 * t163;
t16 = -t246 * pkin(10) + t21;
t1 = -qJD(6) * t156 - t128 * t133 - t257 * t141 + t16 * t232;
t187 = t129 * t195;
t186 = t131 * t195;
t185 = qJD(4) * t195;
t183 = t108 * t233 + t239;
t113 = -t131 * pkin(4) + t123;
t181 = t257 * t199;
t178 = t126 * t184;
t177 = t127 * t184;
t57 = pkin(4) * t240 - t79;
t168 = t129 * t175;
t162 = qJD(4) * t171;
t161 = qJD(4) * t170;
t160 = t195 * t108 - t123 * t109;
t158 = t193 * t202;
t157 = t128 * t163;
t69 = -qJD(6) * t181 - t257 * t205 + (t256 * qJD(6) + t218) * t255;
t152 = -t193 * t32 + t63 * t202;
t48 = t265 * qJD(5) + t129 * t162 + t131 * t161;
t47 = t264 * pkin(4) + t62;
t9 = t257 * t16 + t157;
t147 = -t195 * t105 - t123 * t184;
t146 = t202 * pkin(10) + t48;
t145 = -t111 * pkin(10) - t265;
t143 = t128 * t145;
t142 = (qJD(5) + qJD(6)) * (-t128 * t258 - t198) * pkin(4);
t140 = t257 * t145;
t139 = -t128 * t141 + t257 * t133;
t49 = -t68 * qJD(5) + t129 * t161 - t131 * t162;
t137 = -qJD(6) * t157 - t16 * t217 + t139;
t136 = t78 * pkin(10) + t49;
t104 = pkin(4) * t198 + t128 * t199;
t103 = -t256 * t255 + t181;
t80 = t193 * pkin(5) + t113;
t70 = t142 - t226;
t66 = t202 * pkin(5) + t227;
t65 = -t108 * t234 + t238;
t56 = -t193 * pkin(10) + t68;
t54 = t109 * t206 + t168;
t50 = -t193 * t105 - t202 * t108;
t46 = t246 * pkin(5) + t57;
t36 = t257 * t56 + t143;
t35 = -t128 * t56 + t140;
t23 = -t105 * t74 - t108 * t41;
t18 = pkin(5) * t260 + t47;
t14 = -qJD(6) * t143 + t128 * t146 + t257 * t136 - t56 * t217;
t13 = -qJD(6) * t140 - t128 * t136 + t257 * t146 + t56 * t232;
t8 = -t128 * t16 + t156;
t2 = -qJD(6) * t9 + t139;
t3 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t219, 0.2e1 * (-t130 ^ 2 + t132 ^ 2) * qJD(2), 0, -0.2e1 * t219, 0, 0, t130 * t231, t132 * t231, 0, 0, -0.2e1 * t109 * t184, -0.2e1 * t109 * t105 + 0.2e1 * t108 * t184, 0, t76, 0, 0, 0.2e1 * t105 * t125 + 0.2e1 * t108 * t228, 0.2e1 * t109 * t228 - 0.2e1 * t125 * t184, -0.2e1 * t105 * t153 - 0.2e1 * t108 * t144 + 0.2e1 * t62 * t109 + 0.2e1 * t184 * t79, 0.2e1 * t125 * t228 + 0.2e1 * t144 * t153 - 0.2e1 * t251, -0.2e1 * t109 * t177 - 0.2e1 * t200, 0.2e1 * t107 * t206 - t168 * t263, 0.2e1 * t108 * t155 + 0.2e1 * t109 * t238, -0.2e1 * t109 * t178 + 0.2e1 * t200, -0.2e1 * t108 * t264 - 0.2e1 * t109 * t239, t76, 0.2e1 * t25 * t108 + 0.2e1 * t52 * t105 + 0.2e1 * t79 * t176 + 0.2e1 * (-t79 * t233 + t244) * t109, 0.2e1 * t24 * t108 - 0.2e1 * t53 * t105 + 0.2e1 * t79 * t175 + 0.2e1 * (t234 * t79 + t243) * t109, 0.2e1 * t259 * t109 + 0.2e1 * t52 * t175 + 0.2e1 * t53 * t176, -0.2e1 * t24 * t53 + 0.2e1 * t25 * t52 - 0.2e1 * t251, -0.2e1 * t63 * t32, 0.2e1 * t32 * t246 - 0.2e1 * t260 * t63, 0.2e1 * t105 * t63 - 0.2e1 * t108 * t32, 0.2e1 * t246 * t260, -0.2e1 * t246 * t105 - 0.2e1 * t108 * t260, t76, 0.2e1 * t20 * t105 + 0.2e1 * t7 * t108 + 0.2e1 * t47 * t246 + 0.2e1 * t260 * t57, -0.2e1 * t105 * t21 + 0.2e1 * t108 * t6 - 0.2e1 * t32 * t57 + 0.2e1 * t47 * t63, 0.2e1 * t20 * t32 - 0.2e1 * t21 * t260 + 0.2e1 * t6 * t246 - 0.2e1 * t7 * t63, 0.2e1 * t20 * t7 - 0.2e1 * t21 * t6 + 0.2e1 * t47 * t57, -0.2e1 * t45 * t11, 0.2e1 * t11 * t44 - 0.2e1 * t12 * t45, 0.2e1 * t105 * t45 - 0.2e1 * t108 * t11, 0.2e1 * t44 * t12, -0.2e1 * t105 * t44 - 0.2e1 * t108 * t12, t76, 0.2e1 * t105 * t8 + 0.2e1 * t108 * t2 + 0.2e1 * t12 * t46 + 0.2e1 * t18 * t44, 0.2e1 * t1 * t108 - 0.2e1 * t105 * t9 - 0.2e1 * t11 * t46 + 0.2e1 * t18 * t45, 0.2e1 * t1 * t44 + 0.2e1 * t11 * t8 - 0.2e1 * t12 * t9 - 0.2e1 * t2 * t45, -0.2e1 * t1 * t9 + 0.2e1 * t18 * t46 + 0.2e1 * t2 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t235, 0, -t236, 0, -pkin(7) * t235, pkin(7) * t236, 0, 0, 0, 0, -t184, 0, -t105, 0, -t62, -t144 (-t241 * t105 + t242 * t184) * pkin(2) (t144 * t241 - t62 * t242) * pkin(2), -t54, t220 * t263 - t177 + t178, t183, t54, t65, 0, -t243 + t147 * t129 + (-t79 * t129 - t131 * t160) * qJD(4), t244 + t147 * t131 + (t129 * t160 - t79 * t131) * qJD(4), -t129 * t25 - t131 * t24 + (-t53 * t129 - t52 * t131) * qJD(4), -t24 * t186 - t25 * t187 + t62 * t123 + (-t186 * t52 - t187 * t53) * qJD(4), -t111 * t32 - t63 * t78, -t152 + t248, t189, t193 * t260 + t246 * t202, t50, 0, -t105 * t265 + t49 * t108 + t113 * t260 + t47 * t193 + t57 * t202 + t246 * t227, -t105 * t68 + t108 * t48 + t111 * t47 - t113 * t32 + t227 * t63 - t57 * t78, -t7 * t111 + t6 * t193 + t20 * t78 - t21 * t202 + t48 * t246 - t260 * t68 - t265 * t32 - t49 * t63, t113 * t47 + t20 * t49 - t21 * t48 + t227 * t57 - t265 * t7 - t6 * t68, -t11 * t75 - t40 * t45, -t194 + t249, t192, t12 * t74 + t41 * t44, t23, 0, t105 * t35 + t108 * t14 + t12 * t80 + t18 * t74 + t41 * t46 + t44 * t66, -t105 * t36 + t108 * t13 - t11 * t80 + t18 * t75 - t40 * t46 + t45 * t66, t1 * t74 + t11 * t35 - t12 * t36 + t13 * t44 - t14 * t45 - t2 * t75 + t40 * t8 - t41 * t9, -t1 * t36 - t13 * t9 + t14 * t8 + t18 * t80 + t2 * t35 + t46 * t66; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t220, -0.2e1 * t206, 0, -0.2e1 * t220, 0, 0, t129 * t230, t131 * t230, 0, 0, -0.2e1 * t245, -0.2e1 * t111 * t202 + 0.2e1 * t193 * t78, 0, 0.2e1 * t158, 0, 0, 0.2e1 * t113 * t202 + 0.2e1 * t193 * t227, 0.2e1 * t111 * t227 - 0.2e1 * t113 * t78, -0.2e1 * t49 * t111 + 0.2e1 * t193 * t48 - 0.2e1 * t202 * t68 - 0.2e1 * t265 * t78, 0.2e1 * t113 * t227 - 0.2e1 * t265 * t49 - 0.2e1 * t48 * t68, -0.2e1 * t252, 0.2e1 * t74 * t40 - 0.2e1 * t75 * t41, 0, 0.2e1 * t253, 0, 0, 0.2e1 * t41 * t80 + 0.2e1 * t66 * t74, -0.2e1 * t40 * t80 + 0.2e1 * t66 * t75, 0.2e1 * t13 * t74 - 0.2e1 * t14 * t75 + 0.2e1 * t35 * t40 - 0.2e1 * t36 * t41, -0.2e1 * t13 * t36 + 0.2e1 * t14 * t35 + 0.2e1 * t66 * t80; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t105, -t184, 0, t228, 0, 0, 0, 0, 0, 0, t65, -t183, t178 + t177, -t259, 0, 0, 0, 0, 0, 0, t50, -t189, t152 + t248, -t6 * t111 - t193 * t7 - t20 * t202 - t21 * t78, 0, 0, 0, 0, 0, 0, t23, -t192, t194 + t249, -t1 * t75 - t2 * t74 - t40 * t9 - t41 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t48 * t111 - t193 * t49 + t202 * t265 - t68 * t78, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t13 * t75 - t14 * t74 - t35 * t41 - t36 * t40; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t158 - 0.2e1 * t245, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t252 + 0.2e1 * t253; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t155, 0, -t264, t105, t25, t24, 0, 0, 0, 0, -t32, 0, -t260, t105, t105 * t229 - t108 * t204 + t7 (-t256 * t105 - t108 * t215) * pkin(4) + t6 (t256 * (t109 * t197 - t207) + t258 * t32 + (-t258 * t246 + (t240 * t256 + t63) * t256) * qJD(5)) * pkin(4) (-t256 * t6 + t258 * t7 + (-t256 * t20 + t258 * t21) * qJD(5)) * pkin(4), 0, 0, -t11, 0, -t12, t105, t103 * t105 + t70 * t108 + t137, -t104 * t105 + t108 * t69 + t1, t103 * t11 - t104 * t12 + t44 * t69 - t45 * t70, -t1 * t104 + t103 * t2 - t69 * t9 + t70 * t8; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t233, 0, -t234, 0, -t131 * t185, t129 * t185, 0, 0, 0, 0, -t78, 0, -t202, 0, t49, t48 (-t256 * t202 + t258 * t78 + (t256 * t111 - t258 * t193) * qJD(5)) * pkin(4) (-t256 * t48 + t258 * t49 + (t256 * t265 + t258 * t68) * qJD(5)) * pkin(4), 0, 0, -t40, 0, -t41, 0, t14, t13, t103 * t40 - t104 * t41 + t69 * t74 - t70 * t75, t103 * t14 - t104 * t13 + t35 * t70 - t36 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t234, -t233, 0, 0, 0, 0, 0, 0, 0, 0, -t202, t78, 0 (-t78 * t256 - t202 * t258 + (t111 * t258 + t193 * t256) * qJD(5)) * pkin(4), 0, 0, 0, 0, 0, 0, -t41, t40, 0, -t103 * t41 - t104 * t40 - t69 * t75 - t70 * t74; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t204, -0.2e1 * t205, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t70, 0.2e1 * t69, 0, 0.2e1 * t103 * t70 - 0.2e1 * t104 * t69; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, 0, -t260, t105, t7, t6, 0, 0, 0, 0, -t11, 0, -t12, t105, -t108 * t226 + t257 * t254 + t137 (-t105 * t128 - t108 * t217) * pkin(5) + t1 (t257 * t11 - t12 * t128 + (t128 * t45 - t257 * t44) * qJD(6)) * pkin(5) (t257 * t2 - t1 * t128 + (-t128 * t8 + t257 * t9) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t78, 0, -t202, 0, t49, t48, 0, 0, 0, 0, -t40, 0, -t41, 0, t14, t13 (t257 * t40 - t128 * t41 + (t128 * t75 - t257 * t74) * qJD(6)) * pkin(5) (t257 * t14 - t128 * t13 + (-t128 * t35 + t257 * t36) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t202, t78, 0, 0, 0, 0, 0, 0, 0, 0, -t41, t40, 0 (-t257 * t41 - t128 * t40 + (t128 * t74 + t257 * t75) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t204, -t205, 0, 0, 0, 0, 0, 0, 0, 0, t142 + t208, -t203 + t69, 0 (t257 * t70 - t128 * t69 + (-t103 * t128 + t257 * t104) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t208, -0.2e1 * t203, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t11, 0, -t12, t105, t2, t1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t40, 0, -t41, 0, t14, t13, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t41, t40, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, t69, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t226, -t203, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
