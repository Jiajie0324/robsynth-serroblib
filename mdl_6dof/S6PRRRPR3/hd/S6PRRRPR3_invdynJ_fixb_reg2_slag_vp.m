% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRRRPR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d3,d4,d6,theta1]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 23:14
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRRRPR3_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRRRPR3_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRRRPR3_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRRRPR3_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRRRPR3_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6PRRRPR3_invdynJ_fixb_reg2_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 23:14:08
% EndTime: 2019-03-08 23:14:23
% DurationCPUTime: 8.92s
% Computational Cost: add. (8818->621), mult. (19962->794), div. (0->0), fcn. (15477->14), ass. (0->331)
t217 = sin(qJ(2));
t212 = sin(pkin(6));
t360 = qJD(1) * t212;
t333 = t217 * t360;
t216 = sin(qJ(3));
t353 = qJD(3) * t216;
t253 = pkin(3) * t353 - t333;
t422 = cos(qJ(4));
t322 = qJD(4) * t422;
t219 = cos(qJ(3));
t213 = cos(pkin(6));
t359 = qJD(1) * t213;
t183 = t219 * t359;
t165 = qJD(2) * pkin(8) + t333;
t314 = pkin(9) * qJD(2) + t165;
t112 = -t216 * t314 + t183;
t331 = t216 * t359;
t113 = t219 * t314 + t331;
t215 = sin(qJ(4));
t371 = t215 * t113;
t65 = t112 * t422 - t371;
t447 = pkin(3) * t322 - t65;
t334 = t422 * t219;
t294 = qJD(2) * t334;
t358 = qJD(2) * t216;
t329 = t215 * t358;
t150 = -t294 + t329;
t206 = qJD(3) + qJD(4);
t214 = sin(qJ(6));
t218 = cos(qJ(6));
t116 = -t218 * t150 + t206 * t214;
t160 = t215 * t219 + t216 * t422;
t152 = t160 * qJD(2);
t439 = qJD(6) + t152;
t303 = t439 * t116;
t204 = qJDD(3) + qJDD(4);
t347 = qJD(6) * t218;
t348 = qJD(6) * t214;
t111 = t206 * t160;
t318 = qJDD(2) * t422;
t342 = t216 * qJDD(2);
t282 = t215 * t342 - t219 * t318;
t80 = qJD(2) * t111 + t282;
t41 = -t150 * t347 - t218 * t204 + t206 * t348 - t214 * t80;
t446 = t41 - t303;
t118 = t150 * t214 + t206 * t218;
t304 = t439 * t118;
t350 = qJD(6) * t118;
t42 = t204 * t214 - t218 * t80 + t350;
t445 = -t42 + t304;
t221 = -pkin(9) - pkin(8);
t172 = t221 * t216;
t173 = t221 * t219;
t120 = t215 * t172 - t173 * t422;
t323 = qJD(3) * t422;
t271 = t221 * t323;
t297 = qJD(3) * t215 * t221;
t220 = cos(qJ(2));
t332 = t220 * t360;
t401 = qJD(4) * t120 - t160 * t332 + t216 * t297 - t219 * t271;
t370 = t215 * t216;
t285 = t206 * t370;
t110 = t285 + (-t322 - t323) * t219;
t444 = -qJ(5) * t110 + qJD(5) * t160 - t253;
t341 = t219 * qJDD(2);
t298 = -t206 * t294 - t215 * t341 - t216 * t318;
t79 = qJD(2) * t285 + t298;
t197 = pkin(3) * t219 + pkin(2);
t345 = qJD(1) * qJD(2);
t321 = t217 * t345;
t374 = t212 * t220;
t283 = -qJDD(1) * t374 + t212 * t321;
t344 = qJD(2) * qJD(3);
t319 = t216 * t344;
t98 = pkin(3) * t319 - qJDD(2) * t197 + t283;
t227 = qJ(5) * t79 - qJD(5) * t152 + t98;
t426 = pkin(4) + pkin(10);
t15 = t426 * t80 + t227;
t109 = qJD(3) * pkin(3) + t112;
t62 = -t422 * t109 + t371;
t366 = qJD(5) + t62;
t414 = t152 * pkin(5);
t367 = t414 + t366;
t35 = -t206 * t426 + t367;
t141 = -qJD(2) * t197 - t332;
t236 = -qJ(5) * t152 + t141;
t61 = t150 * t426 + t236;
t21 = t214 * t35 + t218 * t61;
t351 = qJD(4) * t215;
t320 = t220 * t345;
t397 = qJDD(2) * pkin(8);
t132 = t397 + (qJDD(1) * t217 + t320) * t212;
t343 = qJDD(1) * t213;
t181 = t219 * t343;
t54 = qJDD(3) * pkin(3) + t181 + (-pkin(9) * qJDD(2) - t132) * t216 - t113 * qJD(3);
t335 = qJD(3) * t183 + t219 * t132 + t216 * t343;
t68 = -t165 * t353 + t335;
t56 = (-t319 + t341) * pkin(9) + t68;
t308 = t109 * t351 + t113 * t322 + t215 * t56 - t422 * t54;
t284 = qJDD(5) + t308;
t9 = -pkin(5) * t79 - t204 * t426 + t284;
t2 = -qJD(6) * t21 - t214 * t15 + t218 * t9;
t443 = t21 * t439 + t2;
t442 = -t110 * pkin(5) + t401;
t404 = qJD(5) + t447;
t441 = t111 * t426 - t444;
t376 = t212 * t217;
t261 = -t213 * t219 + t216 * t376;
t119 = -t422 * t172 - t173 * t215;
t210 = qJ(3) + qJ(4);
t203 = cos(t210);
t400 = cos(pkin(11));
t315 = t400 * t220;
t211 = sin(pkin(11));
t379 = t211 * t217;
t144 = -t213 * t315 + t379;
t316 = t400 * t217;
t378 = t211 * t220;
t146 = t213 * t378 + t316;
t290 = g(1) * t146 + g(2) * t144;
t248 = g(3) * t374 - t290;
t244 = t248 * t203;
t440 = -t119 * t204 - t206 * t401 - t244;
t309 = -t109 * t322 + t113 * t351 - t215 * t54 - t422 * t56;
t198 = t204 * qJ(5);
t435 = -t206 * qJD(5) - t198;
t11 = t309 + t435;
t10 = -pkin(5) * t80 - t11;
t415 = t150 * pkin(5);
t108 = t422 * t113;
t63 = t215 * t109 + t108;
t55 = -t206 * qJ(5) - t63;
t43 = -t55 - t415;
t438 = t10 * t214 + t43 * t347;
t405 = t414 + t404;
t64 = t112 * t215 + t108;
t47 = t64 - t415;
t142 = t152 * pkin(10);
t199 = pkin(3) * t358;
t93 = pkin(4) * t152 + qJ(5) * t150;
t86 = t199 + t93;
t70 = t142 + t86;
t27 = -t214 * t70 + t218 * t47;
t339 = pkin(3) * t351;
t437 = t218 * t339 - t27;
t292 = -t64 + t339;
t434 = t334 - t370;
t402 = -t172 * t322 - t173 * t351 - t216 * t271 - t219 * t297 + t434 * t332;
t202 = sin(t210);
t399 = qJ(5) * t202;
t436 = (pkin(4) * t203 + t399) * t374;
t372 = t214 * t220;
t176 = t212 * t372;
t375 = t212 * t219;
t149 = t213 * t216 + t217 * t375;
t89 = t149 * t215 + t261 * t422;
t75 = t218 * t89 + t176;
t433 = qJD(3) * t261;
t223 = qJD(3) ^ 2;
t398 = qJDD(2) * pkin(2);
t131 = t283 - t398;
t267 = -t131 + t290;
t431 = -pkin(8) * t223 + t212 * (-g(3) * t220 + t321) + t267 + t398;
t355 = qJD(2) * t220;
t327 = t219 * t355;
t295 = t212 * t327;
t230 = t295 - t433;
t249 = t149 * qJD(3);
t328 = t216 * t355;
t296 = t212 * t328;
t231 = t249 + t296;
t33 = t149 * t351 + t215 * t231 - t230 * t422 + t261 * t322;
t357 = qJD(2) * t217;
t90 = t149 * t422 - t215 * t261;
t430 = t212 * (-t152 * t357 - t220 * t79) + t204 * t90 - t206 * t33;
t34 = qJD(4) * t90 + t215 * t230 + t231 * t422;
t429 = t212 * (t150 * t357 - t220 * t80) - t204 * t89 - t206 * t34;
t278 = t214 * t61 - t218 * t35;
t1 = -t278 * qJD(6) + t218 * t15 + t214 * t9;
t428 = -t120 * t204 + t202 * t248 + t206 * t402;
t427 = t152 ^ 2;
t145 = t213 * t316 + t378;
t317 = t212 * t400;
t99 = t145 * t202 + t203 * t317;
t425 = t99 * pkin(10);
t268 = -qJ(5) * t160 - t197;
t81 = -t426 * t434 + t268;
t87 = pkin(5) * t160 + t119;
t36 = -t214 * t81 + t218 * t87;
t424 = qJD(6) * t36 + t214 * t442 + t441 * t218;
t37 = t214 * t87 + t218 * t81;
t423 = -qJD(6) * t37 - t441 * t214 + t218 * t442;
t421 = pkin(3) * t215;
t420 = pkin(4) * t204;
t147 = -t213 * t379 + t315;
t380 = t211 * t212;
t101 = t147 * t202 - t203 * t380;
t419 = pkin(10) * t101;
t135 = t202 * t376 - t213 * t203;
t418 = pkin(10) * t135;
t417 = g(3) * t212;
t416 = t1 * t214;
t413 = qJD(2) * pkin(2);
t8 = t10 * t218;
t412 = t278 * t214;
t411 = t206 * t63;
t410 = t21 * t214;
t409 = t214 * t42;
t408 = t218 * t41;
t74 = -qJDD(6) + t79;
t406 = t426 * t74;
t403 = -pkin(5) * t111 - t402;
t396 = t111 * t214;
t395 = t118 * t116;
t392 = t439 * t150;
t391 = t144 * t203;
t390 = t146 * t203;
t389 = t150 * t152;
t388 = t150 * t206;
t386 = t434 * t214;
t385 = t434 * t218;
t384 = t165 * t216;
t340 = t422 * pkin(3);
t196 = -t340 - pkin(4);
t193 = -pkin(10) + t196;
t383 = t193 * t218;
t382 = t202 * t214;
t381 = t202 * t218;
t377 = t212 * t216;
t369 = t218 * t111;
t368 = t218 * t220;
t365 = qJDD(1) - g(3);
t364 = -t144 * t197 - t145 * t221;
t363 = -t146 * t197 - t147 * t221;
t208 = t216 ^ 2;
t209 = t219 ^ 2;
t362 = t208 - t209;
t361 = t208 + t209;
t356 = qJD(2) * t219;
t354 = qJD(3) * t213;
t352 = qJD(3) * t217;
t349 = qJD(6) * t439;
t17 = t278 * t348;
t337 = t212 * t368;
t224 = qJD(2) ^ 2;
t336 = t216 * t224 * t219;
t330 = t212 * t357;
t326 = -t150 ^ 2 + t427;
t325 = -t150 * t21 + t8;
t324 = -t152 * t21 - t2;
t100 = t145 * t203 - t202 * t317;
t313 = -t99 * pkin(4) + t100 * qJ(5);
t102 = t147 * t203 + t202 * t380;
t312 = -t101 * pkin(4) + qJ(5) * t102;
t310 = t439 * t43;
t136 = t202 * t213 + t203 * t376;
t307 = -t135 * pkin(4) + qJ(5) * t136;
t306 = -t42 + t350;
t305 = t439 ^ 2;
t300 = -pkin(4) * t391 - t144 * t399 + t364;
t299 = -pkin(4) * t390 - t146 * t399 + t363;
t293 = t219 * t319;
t291 = (-t147 * t216 + t211 * t375) * pkin(3);
t289 = g(1) * t147 + g(2) * t145;
t288 = -pkin(4) * t111 + t444;
t163 = t197 * t374;
t287 = -t221 * t376 + t163;
t281 = t21 * t218 + t412;
t277 = t43 * t218 * t152 - t150 * t278 + t438;
t276 = -t110 * t152 - t160 * t79;
t275 = t111 * t150 - t434 * t80;
t274 = t110 * t206 - t160 * t204;
t273 = t111 * t206 - t204 * t434;
t122 = t183 - t384;
t123 = t165 * t219 + t331;
t272 = t122 * t216 - t123 * t219;
t270 = t261 * pkin(3);
t269 = qJDD(2) * t220 - t217 * t224;
t266 = -t214 * t89 + t337;
t265 = -t214 * t305 - t218 * t74;
t260 = -t347 * t434 + t396;
t259 = -t348 * t434 - t369;
t257 = t212 * t355 + t354;
t256 = g(1) * t101 + g(2) * t99 + g(3) * t135;
t255 = g(1) * t102 + g(2) * t100 + g(3) * t136;
t254 = t269 * t212;
t252 = t17 - t256;
t251 = t214 * t74 - t218 * t305;
t250 = t291 + t312;
t247 = -t152 * t412 - t252;
t246 = (-t145 * t216 - t219 * t317) * pkin(3);
t245 = -t270 + t307;
t243 = t150 * t33 + t152 * t34 - t79 * t89 - t80 * t90;
t242 = t110 * t150 - t111 * t152 - t160 * t80 - t434 * t79;
t241 = t256 - t308;
t239 = t255 + t309;
t238 = -t193 * t349 - t255;
t237 = t349 * t426 - t255;
t166 = -t332 - t413;
t235 = -pkin(8) * qJDD(3) + (t166 + t332 - t413) * qJD(3);
t234 = t246 + t313;
t233 = -t141 * t152 + t241;
t232 = t141 * t150 + t239;
t58 = -t206 * t329 - t298 + t388;
t78 = pkin(4) * t150 + t236;
t229 = t152 * t78 + qJDD(5) - t241;
t228 = -t150 * t78 - t239 - t435;
t69 = -t123 * qJD(3) - t216 * t132 + t181;
t226 = -t69 * t216 + t68 * t219 + (-t122 * t219 - t123 * t216) * qJD(3) - t289;
t225 = -g(3) * t376 - t119 * t79 - t120 * t80 + t150 * t402 + t152 * t401 - t289;
t194 = qJ(5) + t421;
t97 = -pkin(4) * t434 + t268;
t88 = pkin(5) * t434 + t120;
t77 = t142 + t93;
t59 = -t152 * t206 + t80;
t57 = t79 - t388;
t51 = -pkin(4) * t206 + t366;
t46 = t63 - t415;
t30 = t214 * t46 + t218 * t77;
t29 = -t214 * t77 + t218 * t46;
t28 = t214 * t47 + t218 * t70;
t26 = -t116 * t150 + t251;
t25 = t118 * t150 + t265;
t24 = pkin(4) * t80 + t227;
t23 = t218 * t303 + t409;
t22 = -t214 * t304 - t408;
t19 = qJD(6) * t75 + t214 * t34 + t218 * t330;
t18 = qJD(6) * t266 - t214 * t330 + t218 * t34;
t12 = t284 - t420;
t3 = (-t42 - t304) * t218 + (t41 + t303) * t214;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t365, 0, 0, 0, 0, 0, 0, t254 (-qJDD(2) * t217 - t220 * t224) * t212, 0, -g(3) + (t213 ^ 2 + (t217 ^ 2 + t220 ^ 2) * t212 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, -t261 * qJDD(3) + t219 * t254 + (-t249 - 0.2e1 * t296) * qJD(3), -t149 * qJDD(3) - t269 * t377 + (-0.2e1 * t295 + t433) * qJD(3) (t149 * qJDD(2) + t257 * t356 + t261 * t344) * t219 + (qJDD(2) * t261 - t149 * t344 + t257 * t358) * t216, -t69 * t261 + t68 * t149 - g(3) - t272 * t354 + (t123 * (-t216 * t352 + t327) + t122 * (-t219 * t352 - t328) - t131 * t220 + t166 * t357) * t212, 0, 0, 0, 0, 0, 0, t429, -t430, t243, -t309 * t90 + t308 * t89 - t33 * t63 + t34 * t62 - g(3) + (t141 * t357 - t220 * t98) * t212, 0, 0, 0, 0, 0, 0, t243, -t429, t430, -t11 * t90 + t12 * t89 + t33 * t55 + t34 * t51 - g(3) + (-t220 * t24 + t357 * t78) * t212, 0, 0, 0, 0, 0, 0, -t116 * t33 + t18 * t439 + t42 * t90 - t74 * t75, -t118 * t33 - t19 * t439 - t266 * t74 - t41 * t90, -t116 * t19 - t118 * t18 + t266 * t42 + t41 * t75, -t1 * t266 + t10 * t90 - t18 * t278 + t19 * t21 + t2 * t75 - t33 * t43 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t365 * t374 + t290, -t365 * t376 + t289, 0, 0, qJDD(2) * t208 + 0.2e1 * t293, 0.2e1 * t216 * t341 - 0.2e1 * t344 * t362, qJDD(3) * t216 + t219 * t223, qJDD(2) * t209 - 0.2e1 * t293, qJDD(3) * t219 - t216 * t223, 0, t235 * t216 + t219 * t431, -t216 * t431 + t235 * t219, t361 * t397 + (-g(3) * t217 - t320 * t361) * t212 + t226, t267 * pkin(2) + t226 * pkin(8) + (-g(3) * (pkin(2) * t220 + pkin(8) * t217) + (-t166 * t217 + t220 * t272) * qJD(1)) * t212, t276, t242, -t274, t275, -t273, 0, t111 * t141 + t150 * t253 - t197 * t80 - t434 * t98 + t440, -t110 * t141 + t152 * t253 + t160 * t98 + t197 * t79 + t428, -t110 * t62 - t111 * t63 + t160 * t308 - t309 * t434 + t225, -g(1) * t363 - g(2) * t364 - g(3) * t287 + t119 * t308 - t120 * t309 + t141 * t253 - t98 * t197 + t401 * t62 - t402 * t63, 0, t274, t273, t276, t242, t275, -t11 * t434 - t110 * t51 + t111 * t55 + t12 * t160 + t225, -t111 * t78 + t150 * t288 + t24 * t434 - t80 * t97 - t440, t110 * t78 + t152 * t288 - t160 * t24 + t79 * t97 - t428, t24 * t97 - t11 * t120 + t12 * t119 - g(1) * t299 - g(2) * t300 - g(3) * (t287 + t436) - t288 * t78 + t402 * t55 + t401 * t51, t118 * t260 + t386 * t41 (-t116 * t214 + t118 * t218) * t111 - (-t409 - t408 + (-t116 * t218 - t118 * t214) * qJD(6)) * t434, -t110 * t118 - t160 * t41 + t260 * t439 + t386 * t74, t116 * t259 + t385 * t42, t110 * t116 - t160 * t42 - t259 * t439 + t385 * t74, -t110 * t439 - t160 * t74, -t36 * t74 + t2 * t160 + t278 * t110 + t88 * t42 - t43 * t369 - g(1) * (-t146 * t382 + t147 * t218) - g(2) * (-t144 * t382 + t145 * t218) - (t202 * t372 + t217 * t218) * t417 - (t348 * t43 - t8) * t434 + t423 * t439 + t403 * t116, t37 * t74 - t1 * t160 + t21 * t110 - t88 * t41 + t43 * t396 - g(1) * (-t146 * t381 - t147 * t214) - g(2) * (-t144 * t381 - t145 * t214) - (t202 * t368 - t214 * t217) * t417 - t438 * t434 - t424 * t439 + t403 * t118, t36 * t41 - t37 * t42 - t423 * t118 - t424 * t116 + t281 * t111 - t244 - (t1 * t218 - t2 * t214 + (t218 * t278 - t410) * qJD(6)) * t434, t1 * t37 + t2 * t36 + t10 * t88 - g(1) * (pkin(5) * t147 - pkin(10) * t390 + t299) - g(2) * (pkin(5) * t145 - pkin(10) * t391 + t300) - g(3) * (t163 + t436) + t403 * t43 - (pkin(10) * t203 * t220 + (pkin(5) - t221) * t217) * t417 + t424 * t21 - t423 * t278; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t336, t362 * t224, t342, t336, t341, qJDD(3), g(3) * t261 + t181 + (-g(1) * t211 + g(2) * t400) * t375 + (-qJD(2) * t166 - t132 + t289) * t216, -t166 * t356 - g(1) * (-t147 * t219 - t211 * t377) - g(2) * (-t145 * t219 + t216 * t317) + g(3) * t149 + (t122 + t384) * qJD(3) - t335, 0, 0, t389, t326, t58, -t389, -t282, t204, t64 * t206 + (-t150 * t358 + t204 * t422 - t206 * t351) * pkin(3) + t233, t65 * t206 + (-t152 * t358 - t204 * t215 - t206 * t322) * pkin(3) + t232 (t63 - t64) * t152 + (t62 + t65) * t150 + (t422 * t79 - t215 * t80 + (-t150 * t422 + t152 * t215) * qJD(4)) * pkin(3), -g(1) * t291 - g(2) * t246 + g(3) * t270 - t141 * t199 + t292 * t62 - t308 * t340 - t309 * t421 + t447 * t63, t204, t57, t59, t389, t326, -t389, -t194 * t80 - t196 * t79 + (t292 - t55) * t152 + (t51 - t404) * t150, t150 * t86 + t292 * t206 + (-pkin(4) + t196) * t204 + t229, t152 * t86 + t194 * t204 + t206 * t404 + t228, -g(1) * t250 - g(2) * t234 - g(3) * t245 - t11 * t194 + t12 * t196 + t292 * t51 - t404 * t55 - t78 * t86, t22, t3, t25, t23, t26, t392, t405 * t116 + t194 * t42 + t238 * t214 - t74 * t383 + t437 * t439 + t277, t439 * t28 - t194 * t41 + t405 * t118 + t238 * t218 + (t193 * t74 - t339 * t439 - t310) * t214 + t325, t116 * t28 + t118 * t27 + (-t116 * t339 + t193 * t306 - t1) * t214 + (-t118 * t339 + t193 * t41 + (-t116 * t193 - t21) * qJD(6) + t324) * t218 + t247, t339 * t410 + t2 * t383 + t10 * t194 - t21 * t28 - g(1) * (t250 - t419) - g(2) * (t234 - t425) - g(3) * (t245 - t418) + t405 * t43 - t437 * t278 + (t21 * t347 + t17 + t416) * t193; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t389, t326, t58, -t389, -t282, t204, t233 + t411, -t206 * t62 + t232, 0, 0, t204, t57, t59, t389, t326, -t389, pkin(4) * t79 - qJ(5) * t80 + (-t55 - t63) * t152 + (t51 - t366) * t150, t150 * t93 + t229 - t411 - 0.2e1 * t420, t152 * t93 + t206 * t366 + t198 + t228, -t12 * pkin(4) - g(1) * t312 - g(2) * t313 - g(3) * t307 - t11 * qJ(5) - t366 * t55 - t51 * t63 - t78 * t93, t22, t3, t25, t23, t26, t392, qJ(5) * t42 + t116 * t367 + t214 * t237 + t218 * t406 - t29 * t439 + t277, -qJ(5) * t41 + t439 * t30 + t367 * t118 + (-t310 - t406) * t214 + t237 * t218 + t325, t116 * t30 + t118 * t29 + (-t306 * t426 - t1) * t214 + (-t426 * t41 + (t116 * t426 - t21) * qJD(6) + t324) * t218 + t247, t10 * qJ(5) - t21 * t30 + t278 * t29 - g(1) * (t312 - t419) - g(2) * (t313 - t425) - g(3) * (t307 - t418) + t367 * t43 - (qJD(6) * t281 + t2 * t218 + t416) * t426; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t58, t204 - t389, -t206 ^ 2 - t427, t206 * t55 + t229 - t420, 0, 0, 0, 0, 0, 0, -t116 * t206 + t265, -t118 * t206 + t251, t214 * t445 + t218 * t446, -t206 * t43 + (t152 * t278 + t1) * t214 + t443 * t218 + t252; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t395, -t116 ^ 2 + t118 ^ 2, -t446, -t395, t445, -t74, -t43 * t118 - g(1) * (t101 * t218 - t146 * t214) - g(2) * (-t144 * t214 + t218 * t99) - g(3) * (t135 * t218 + t176) + t443, -t278 * t439 + t43 * t116 - g(1) * (-t101 * t214 - t146 * t218) - g(2) * (-t144 * t218 - t214 * t99) - g(3) * (-t135 * t214 + t337) - t1, 0, 0;];
tau_reg  = t4;
