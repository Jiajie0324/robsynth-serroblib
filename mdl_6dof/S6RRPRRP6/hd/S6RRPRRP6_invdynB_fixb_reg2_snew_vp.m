% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 18:11
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRRP6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP6_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP6_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP6_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP6_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 18:06:56
% EndTime: 2019-05-06 18:08:50
% DurationCPUTime: 95.19s
% Computational Cost: add. (336918->994), mult. (885552->1538), div. (0->0), fcn. (707440->12), ass. (0->739)
t1273 = sin(qJ(1));
t1277 = cos(qJ(1));
t1267 = sin(pkin(6));
t1269 = cos(pkin(6));
t1272 = sin(qJ(2));
t1276 = cos(qJ(2));
t1266 = sin(pkin(11));
t1268 = cos(pkin(11));
t1271 = sin(qJ(4));
t1275 = cos(qJ(4));
t1409 = t1267 * t1276;
t1394 = qJD(1) * t1409;
t1410 = t1267 * t1272;
t1395 = qJD(1) * t1410;
t1223 = t1266 * t1394 + t1268 * t1395;
t1258 = qJD(1) * t1269 + qJD(2);
t1197 = t1223 * t1271 - t1275 * t1258;
t1193 = qJD(5) + t1197;
t1464 = t1193 ^ 2;
t1199 = t1223 * t1275 + t1258 * t1271;
t1270 = sin(qJ(5));
t1274 = cos(qJ(5));
t1221 = t1266 * t1395 - t1268 * t1394;
t1311 = qJD(4) + t1221;
t1162 = t1199 * t1270 - t1274 * t1311;
t1465 = t1162 ^ 2;
t1112 = t1465 - t1464;
t1164 = t1274 * t1199 + t1270 * t1311;
t1093 = t1164 * t1162;
t1400 = qJDD(1) * t1272;
t1439 = qJD(1) * t1276;
t1230 = (qJD(2) * t1439 + t1400) * t1267;
t1253 = qJD(2) * t1395;
t1399 = qJDD(1) * t1276;
t1367 = t1267 * t1399 - t1253;
t1185 = t1268 * t1230 + t1266 * t1367;
t1257 = qJDD(1) * t1269 + qJDD(2);
t1379 = t1271 * t1185 - t1275 * t1257;
t1127 = -t1199 * qJD(4) - t1379;
t1123 = qJDD(5) - t1127;
t1479 = t1093 + t1123;
t1436 = t1479 * t1270;
t968 = t1112 * t1274 - t1436;
t1128 = -t1197 * qJD(4) + t1275 * t1185 + t1271 * t1257;
t1377 = t1230 * t1266 - t1268 * t1367;
t1366 = qJDD(4) + t1377;
t1380 = t1270 * t1128 - t1274 * t1366;
t982 = (qJD(5) - t1193) * t1164 + t1380;
t893 = -t1271 * t982 + t1275 * t968;
t1435 = t1479 * t1274;
t963 = t1112 * t1270 + t1435;
t835 = t1266 * t893 - t1268 * t963;
t839 = t1266 * t963 + t1268 * t893;
t1350 = t1272 * t839 + t1276 * t835;
t889 = t1271 * t968 + t1275 * t982;
t742 = -t1267 * t889 + t1269 * t1350;
t767 = t1272 * t835 - t1276 * t839;
t1619 = t1273 * t742 + t1277 * t767;
t1161 = t1164 ^ 2;
t1090 = t1161 - t1465;
t1286 = -t1274 * t1128 - t1270 * t1366;
t1283 = -t1162 * qJD(5) - t1286;
t1425 = t1162 * t1193;
t1473 = -t1425 + t1283;
t1451 = t1270 * t1473;
t1404 = qJD(5) + t1193;
t981 = t1164 * t1404 + t1380;
t904 = t1274 * t981 + t1451;
t864 = -t1090 * t1271 + t1275 * t904;
t900 = -t1270 * t981 + t1274 * t1473;
t798 = t1266 * t864 + t1268 * t900;
t800 = -t1266 * t900 + t1268 * t864;
t1359 = t1272 * t800 + t1276 * t798;
t862 = t1090 * t1275 + t1271 * t904;
t712 = -t1267 * t862 + t1269 * t1359;
t736 = t1272 * t798 - t1276 * t800;
t1618 = t1273 * t712 + t1277 * t736;
t1617 = -t1273 * t767 + t1277 * t742;
t1616 = -t1273 * t736 + t1277 * t712;
t1611 = t1267 * t1350 + t1269 * t889;
t1610 = t1267 * t1359 + t1269 * t862;
t1474 = -t1425 - t1283;
t1518 = -t1270 * t982 + t1274 * t1474;
t1477 = t1161 + t1465;
t1517 = -t1270 * t1474 - t1274 * t982;
t1535 = -t1271 * t1477 + t1275 * t1517;
t1559 = t1266 * t1518 + t1268 * t1535;
t1561 = t1266 * t1535 - t1268 * t1518;
t1584 = -t1272 * t1561 + t1276 * t1559;
t1538 = t1271 * t1517 + t1275 * t1477;
t1583 = t1272 * t1559 + t1276 * t1561;
t1589 = -t1267 * t1538 + t1269 * t1583;
t1602 = t1273 * t1584 + t1277 * t1589;
t1609 = pkin(7) * t1602;
t1604 = -t1273 * t1589 + t1277 * t1584;
t1608 = pkin(7) * t1604;
t1607 = pkin(1) * t1589;
t1591 = t1267 * t1583 + t1269 * t1538;
t1606 = pkin(1) * t1591;
t1113 = -t1161 + t1464;
t1480 = -t1093 + t1123;
t1434 = t1480 * t1270;
t1520 = -t1113 * t1274 - t1434;
t1433 = t1480 * t1274;
t1519 = -t1113 * t1270 + t1433;
t1534 = -t1271 * t1474 + t1275 * t1519;
t1560 = -t1266 * t1520 + t1268 * t1534;
t1562 = t1266 * t1534 + t1268 * t1520;
t1582 = -t1272 * t1562 + t1276 * t1560;
t1537 = t1271 * t1519 + t1275 * t1474;
t1581 = t1272 * t1560 + t1276 * t1562;
t1588 = -t1267 * t1537 + t1269 * t1581;
t1605 = -t1273 * t1588 + t1277 * t1582;
t1603 = t1273 * t1582 + t1277 * t1588;
t1601 = (-t1267 * t1591 - t1269 * t1589) * pkin(8);
t1600 = pkin(8) * t1584;
t1590 = t1267 * t1581 + t1269 * t1537;
t1587 = qJ(3) * t1561;
t1586 = pkin(2) * t1561 + pkin(9) * t1535;
t1585 = -pkin(2) * t1538 + qJ(3) * t1559;
t1064 = t1464 + t1161;
t937 = t1064 * t1274 + t1436;
t1580 = pkin(3) * t937;
t1579 = pkin(4) * t937;
t1578 = pkin(10) * t937;
t949 = t1064 * t1270 - t1435;
t1577 = pkin(10) * t949;
t1574 = pkin(9) * t1538;
t1573 = t1266 * t937;
t1571 = t1268 * t937;
t1569 = t1271 * t949;
t1568 = t1275 * t949;
t1563 = -pkin(3) * t1538 - pkin(4) * t1477 - pkin(10) * t1517;
t1038 = -qJD(5) * t1164 - t1380;
t1421 = t1193 * t1270;
t1391 = t1162 * t1421;
t1315 = -t1038 * t1274 - t1391;
t1420 = t1193 * t1274;
t1390 = t1162 * t1420;
t1316 = -t1038 * t1270 + t1390;
t1393 = t1271 * t1093;
t1467 = t1275 * t1316 - t1393;
t1492 = -t1266 * t1315 + t1268 * t1467;
t1494 = t1266 * t1467 + t1268 * t1315;
t1514 = -t1272 * t1494 + t1276 * t1492;
t1392 = t1275 * t1093;
t1468 = t1271 * t1316 + t1392;
t1513 = t1272 * t1492 + t1276 * t1494;
t1539 = -t1267 * t1468 + t1269 * t1513;
t1558 = -t1273 * t1539 + t1277 * t1514;
t1109 = t1164 * t1420;
t1370 = t1109 + t1391;
t1108 = t1164 * t1421;
t1371 = t1108 - t1390;
t1466 = t1123 * t1271 + t1275 * t1371;
t1493 = -t1266 * t1370 + t1268 * t1466;
t1495 = t1266 * t1466 + t1268 * t1370;
t1512 = -t1272 * t1495 + t1276 * t1493;
t1470 = -t1275 * t1123 + t1271 * t1371;
t1511 = t1272 * t1493 + t1276 * t1495;
t1540 = -t1267 * t1470 + t1269 * t1511;
t1557 = -t1273 * t1540 + t1277 * t1512;
t1556 = t1273 * t1514 + t1277 * t1539;
t1555 = t1273 * t1512 + t1277 * t1540;
t1554 = pkin(10) * t1518;
t1542 = t1267 * t1511 + t1269 * t1470;
t1541 = t1267 * t1513 + t1269 * t1468;
t980 = t1274 * t1283 - t1108;
t1373 = t1275 * t980 + t1393;
t979 = -t1270 * t1283 - t1109;
t1469 = -t1266 * t979 + t1268 * t1373;
t1471 = t1266 * t1373 + t1268 * t979;
t1489 = -t1272 * t1471 + t1276 * t1469;
t1372 = t1271 * t980 - t1392;
t1488 = t1272 * t1469 + t1276 * t1471;
t1515 = -t1267 * t1372 + t1269 * t1488;
t1536 = -t1273 * t1515 + t1277 * t1489;
t1533 = t1273 * t1489 + t1277 * t1515;
t1472 = -t1464 - t1465;
t1491 = t1270 * t1472 + t1433;
t1532 = pkin(3) * t1491;
t1531 = pkin(4) * t1491;
t1490 = t1274 * t1472 - t1434;
t1530 = pkin(10) * t1490;
t1529 = pkin(10) * t1491;
t1526 = t1266 * t1491;
t1525 = t1268 * t1491;
t1524 = t1271 * t1490;
t1522 = t1275 * t1490;
t1516 = t1267 * t1488 + t1269 * t1372;
t1510 = 2 * qJD(6);
t1508 = qJ(6) * t1473;
t1184 = t1223 * t1221;
t1476 = -t1184 + t1257;
t1507 = t1266 * t1476;
t1504 = t1268 * t1476;
t1148 = t1199 * t1197;
t1478 = -t1148 + t1366;
t1499 = t1271 * t1478;
t1496 = t1275 * t1478;
t1169 = t1311 * t1197;
t1074 = -t1169 + t1128;
t1297 = t1311 ^ 2;
t1263 = t1267 ^ 2;
t1278 = qJD(1) ^ 2;
t1440 = qJD(1) * t1258;
t1487 = t1263 * (-t1269 * t1278 + t1440);
t1209 = t1258 * t1221;
t1475 = -t1209 + t1185;
t1239 = t1258 * t1394;
t1202 = t1239 + t1230;
t1089 = pkin(5) * t1162 - qJ(6) * t1164;
t1145 = pkin(4) * t1197 - pkin(10) * t1199;
t1251 = t1273 * g(1) - t1277 * g(2);
t1456 = pkin(8) * t1267;
t1291 = qJDD(1) * pkin(1) + t1278 * t1456 + t1251;
t1210 = t1269 * g(3) + t1267 * t1291;
t1312 = -pkin(2) * t1258 + qJ(3) * t1395;
t1265 = t1276 ^ 2;
t1412 = t1263 * t1278;
t1386 = t1265 * t1412;
t1140 = pkin(2) * t1367 + qJ(3) * t1386 + t1312 * t1395 - qJDD(3) + t1210;
t1419 = t1223 * t1258;
t1149 = t1377 + t1419;
t1280 = t1149 * pkin(3) - pkin(9) * t1475 - t1140;
t1252 = g(1) * t1277 + g(2) * t1273;
t1227 = -pkin(1) * t1278 + qJDD(1) * t1456 - t1252;
t1285 = t1269 * t1291;
t1173 = -g(3) * t1410 + t1276 * t1227 + t1272 * t1285;
t1110 = -pkin(2) * t1386 + qJ(3) * t1367 + t1258 * t1312 + t1173;
t1378 = -t1272 * t1227 + t1276 * t1285;
t1407 = t1272 * t1278;
t1385 = t1263 * t1407;
t1281 = t1257 * pkin(2) - t1230 * qJ(3) + (pkin(2) * t1385 + (qJ(3) * t1440 - g(3)) * t1267) * t1276 + t1378;
t1016 = -0.2e1 * qJD(3) * t1221 + t1268 * t1110 + t1266 * t1281;
t1180 = pkin(3) * t1221 - pkin(9) * t1223;
t1463 = t1258 ^ 2;
t971 = -pkin(3) * t1463 + pkin(9) * t1257 - t1180 * t1221 + t1016;
t911 = t1271 * t1280 + t1275 * t971;
t871 = -pkin(4) * t1297 + pkin(10) * t1366 - t1197 * t1145 + t911;
t1292 = t1311 * t1199;
t1381 = t1266 * t1110 - t1268 * t1281;
t1462 = 0.2e1 * qJD(3);
t970 = -t1257 * pkin(3) - t1463 * pkin(9) + (t1462 + t1180) * t1223 + t1381;
t899 = -t1074 * pkin(10) + (-t1127 + t1292) * pkin(4) + t970;
t805 = t1270 * t899 + t1274 * t871;
t1365 = t1123 * qJ(6) - t1162 * t1089 + t1193 * t1510 + t805;
t1194 = t1197 ^ 2;
t1195 = t1199 ^ 2;
t1219 = t1221 ^ 2;
t1220 = t1223 ^ 2;
t1461 = pkin(2) * t1267;
t1460 = pkin(2) * t1269;
t1459 = pkin(3) * t1266;
t1458 = pkin(4) * t1271;
t1457 = pkin(5) * t1274;
t804 = t1270 * t871 - t1274 * t899;
t1455 = qJ(6) * t1274;
t910 = t1271 * t971 - t1275 * t1280;
t870 = -t1366 * pkin(4) - t1297 * pkin(10) + t1199 * t1145 + t910;
t1453 = t1270 * t870;
t1449 = t1271 * t970;
t1015 = t1223 * t1462 + t1381;
t920 = -t1015 * t1268 + t1016 * t1266;
t1447 = t1272 * t920;
t1446 = t1274 * t870;
t1443 = t1275 * t970;
t1441 = t1276 * t920;
t1099 = t1148 + t1366;
t1432 = t1099 * t1271;
t1431 = t1099 * t1275;
t1427 = t1140 * t1266;
t1426 = t1140 * t1268;
t1176 = t1184 + t1257;
t1424 = t1176 * t1266;
t1423 = t1176 * t1268;
t1422 = t1193 * t1164;
t1250 = t1276 * t1385;
t1228 = t1250 + t1257;
t1418 = t1228 * t1272;
t1417 = t1228 * t1276;
t1229 = -t1250 + t1257;
t1416 = t1229 * t1272;
t1415 = t1229 * t1276;
t1414 = t1258 * t1266;
t1413 = t1258 * t1268;
t1411 = t1267 * t1257;
t1408 = t1272 * t1210;
t1406 = t1276 * t1210;
t1403 = t1477 - t1464;
t1264 = t1272 ^ 2;
t1401 = t1264 + t1265;
t1398 = -pkin(3) * t1268 - pkin(2);
t1397 = -pkin(4) * t1275 - pkin(3);
t1396 = t1267 * t1440;
t1389 = t1266 * t1148;
t1388 = t1268 * t1148;
t1387 = t1264 * t1412;
t1384 = t1267 * t1184;
t1383 = t1269 * t1184;
t1382 = qJ(6) * t1270 + pkin(4);
t817 = t1271 * t910 + t1275 * t911;
t921 = t1015 * t1266 + t1268 * t1016;
t1213 = -t1251 * t1273 - t1277 * t1252;
t1375 = t1164 * t1089 + qJDD(6) + t804;
t1249 = qJDD(1) * t1277 - t1273 * t1278;
t1374 = -pkin(7) * t1249 - g(3) * t1273;
t1218 = -t1463 - t1387;
t1178 = -t1218 * t1272 - t1415;
t1369 = pkin(8) * t1178 - t1408;
t1234 = -t1463 - t1386;
t1188 = t1234 * t1276 - t1418;
t1368 = pkin(8) * t1188 + t1406;
t737 = t1270 * t805 - t1274 * t804;
t738 = t1270 * t804 + t1274 * t805;
t816 = t1271 * t911 - t1275 * t910;
t776 = -pkin(5) * t1464 + t1365;
t1313 = -t1123 * pkin(5) + t1375;
t781 = qJ(6) * t1464 - t1313;
t719 = -t1270 * t781 + t1274 * t776;
t1284 = -t1038 * pkin(5) - t1508 + t870;
t797 = (pkin(5) * t1193 - (2 * qJD(6))) * t1164 + t1284;
t698 = t1271 * t797 + t1275 * t719;
t718 = t1270 * t776 + t1274 * t781;
t658 = t1266 * t698 - t1268 * t718;
t659 = t1266 * t718 + t1268 * t698;
t1364 = t1272 * t659 + t1276 * t658;
t716 = t1271 * t870 + t1275 * t738;
t680 = t1266 * t716 - t1268 * t737;
t681 = t1266 * t737 + t1268 * t716;
t1363 = t1272 * t681 + t1276 * t680;
t794 = t1266 * t817 - t1268 * t970;
t795 = t1266 * t970 + t1268 * t817;
t1360 = t1272 * t795 + t1276 * t794;
t875 = -t1271 * t1473 - t1568;
t812 = t1266 * t875 - t1571;
t814 = t1268 * t875 + t1573;
t1357 = t1272 * t814 + t1276 * t812;
t876 = t1271 * t981 + t1522;
t813 = t1266 * t876 - t1525;
t815 = t1268 * t876 + t1526;
t1356 = t1272 * t815 + t1276 * t813;
t989 = t1162 * t1404 + t1286;
t880 = -t1271 * t989 + t1568;
t824 = t1266 * t880 + t1571;
t826 = t1268 * t880 - t1573;
t1355 = t1272 * t826 + t1276 * t824;
t983 = -t1038 + t1422;
t881 = t1271 * t983 + t1522;
t825 = t1266 * t881 - t1525;
t827 = t1268 * t881 + t1526;
t1354 = t1272 * t827 + t1276 * t825;
t1343 = t1272 * t921 + t1441;
t1107 = t1194 + t1195;
t1071 = -t1199 * t1221 + t1379;
t1075 = -t1169 - t1128;
t997 = -t1071 * t1275 - t1075 * t1271;
t935 = t1107 * t1268 + t1266 * t997;
t936 = -t1107 * t1266 + t1268 * t997;
t1342 = t1272 * t936 + t1276 * t935;
t1147 = -t1195 + t1194;
t1072 = (-0.2e1 * qJD(4) - t1221) * t1199 - t1379;
t996 = t1072 * t1275 - t1074 * t1271;
t941 = t1147 * t1268 + t1266 * t996;
t942 = -t1147 * t1266 + t1268 * t996;
t1341 = t1272 * t942 + t1276 * t941;
t1122 = -t1297 - t1194;
t1031 = t1122 * t1275 - t1499;
t945 = t1031 * t1266 + t1072 * t1268;
t946 = t1031 * t1268 - t1072 * t1266;
t1340 = t1272 * t946 + t1276 * t945;
t1135 = -t1195 - t1297;
t1044 = -t1135 * t1271 - t1431;
t951 = t1044 * t1266 - t1074 * t1268;
t952 = t1044 * t1268 + t1074 * t1266;
t1339 = t1272 * t952 + t1276 * t951;
t1168 = -t1195 + t1297;
t1056 = -t1168 * t1271 + t1496;
t956 = t1056 * t1266 + t1075 * t1268;
t958 = t1056 * t1268 - t1075 * t1266;
t1338 = t1272 * t958 + t1276 * t956;
t1167 = t1194 - t1297;
t1057 = t1167 * t1275 - t1432;
t957 = t1057 * t1266 + t1071 * t1268;
t959 = t1057 * t1268 - t1071 * t1266;
t1337 = t1272 * t959 + t1276 * t957;
t1288 = t1275 * t1169;
t1068 = -t1271 * t1127 + t1288;
t1017 = t1068 * t1266 + t1388;
t1019 = t1068 * t1268 - t1389;
t1335 = t1017 * t1276 + t1019 * t1272;
t1289 = t1271 * t1292;
t1070 = t1275 * t1128 - t1289;
t1018 = t1070 * t1266 - t1388;
t1020 = t1070 * t1268 + t1389;
t1334 = t1018 * t1276 + t1020 * t1272;
t1097 = -t1288 + t1289;
t1059 = t1266 * t1097 - t1268 * t1366;
t1060 = t1268 * t1097 + t1266 * t1366;
t1333 = t1059 * t1276 + t1060 * t1272;
t1078 = -t1149 * t1266 + t1268 * t1475;
t1080 = -t1149 * t1268 - t1266 * t1475;
t1332 = t1078 * t1276 + t1080 * t1272;
t1154 = t1209 + t1185;
t1314 = -t1377 + t1419;
t1079 = -t1154 * t1268 + t1266 * t1314;
t1081 = t1154 * t1266 + t1268 * t1314;
t1331 = t1079 * t1276 + t1081 * t1272;
t1174 = -t1463 - t1219;
t1102 = t1174 * t1266 + t1504;
t1103 = t1174 * t1268 - t1507;
t1330 = t1102 * t1276 + t1103 * t1272;
t1192 = -t1220 - t1463;
t1120 = t1192 * t1268 - t1424;
t1121 = -t1192 * t1266 - t1423;
t1329 = t1120 * t1276 + t1121 * t1272;
t1207 = -t1220 + t1463;
t1129 = t1207 * t1268 + t1507;
t1131 = -t1207 * t1266 + t1504;
t1328 = t1129 * t1276 + t1131 * t1272;
t1206 = t1219 - t1463;
t1130 = t1206 * t1266 + t1423;
t1132 = t1206 * t1268 - t1424;
t1327 = t1130 * t1276 + t1132 * t1272;
t1141 = t1221 * t1414 - t1268 * t1377;
t1142 = t1221 * t1413 + t1266 * t1377;
t1326 = t1141 * t1276 + t1142 * t1272;
t1143 = t1185 * t1266 + t1223 * t1413;
t1144 = t1185 * t1268 - t1223 * t1414;
t1325 = t1143 * t1276 + t1144 * t1272;
t1165 = (-t1221 * t1266 - t1223 * t1268) * t1258;
t1166 = (-t1221 * t1268 + t1223 * t1266) * t1258;
t1324 = t1165 * t1276 + t1166 * t1272;
t1172 = g(3) * t1409 - t1378;
t1323 = -t1276 * t1172 + t1272 * t1173;
t1101 = t1172 * t1272 + t1173 * t1276;
t1238 = t1258 * t1395;
t1205 = -t1238 + t1367;
t1322 = t1202 * t1276 + t1205 * t1272;
t1203 = -t1239 + t1230;
t1204 = t1238 + t1367;
t1321 = -t1203 * t1276 + t1204 * t1272;
t1320 = t1218 * t1276 - t1416;
t1232 = t1463 - t1387;
t1319 = t1232 * t1276 + t1418;
t1318 = t1234 * t1272 + t1417;
t1233 = -t1463 + t1386;
t1317 = t1233 * t1272 + t1415;
t1212 = t1251 * t1277 - t1252 * t1273;
t670 = -pkin(4) * t718 - pkin(5) * t781 - qJ(6) * t776;
t678 = -pkin(10) * t718 + (pkin(5) * t1270 - t1455) * t797;
t697 = t1271 * t719 - t1275 * t797;
t639 = -pkin(9) * t697 - t1271 * t670 + t1275 * t678;
t647 = -pkin(3) * t697 - pkin(10) * t719 + (t1382 + t1457) * t797;
t615 = -pkin(2) * t697 + qJ(3) * t659 + t1266 * t639 + t1268 * t647;
t617 = -qJ(3) * t658 - t1266 * t647 + t1268 * t639;
t641 = -t1272 * t658 + t1276 * t659;
t1310 = pkin(8) * t641 + t1272 * t617 + t1276 * t615;
t715 = t1271 * t738 - t1275 * t870;
t655 = -pkin(9) * t715 + (-pkin(10) * t1275 + t1458) * t737;
t665 = -pkin(3) * t715 + pkin(4) * t870 - pkin(10) * t738;
t630 = -pkin(2) * t715 + qJ(3) * t681 + t1266 * t655 + t1268 * t665;
t633 = -qJ(3) * t680 - t1266 * t665 + t1268 * t655;
t648 = -t1272 * t680 + t1276 * t681;
t1309 = pkin(8) * t648 + t1272 * t633 + t1276 * t630;
t770 = pkin(5) * t1403 + t1365;
t772 = qJ(6) * t1403 + t1313;
t701 = -t1270 * t770 + t1274 * t772 - t1554;
t808 = -pkin(4) * t1518 - pkin(5) * t1474 + qJ(6) * t982;
t676 = -t1271 * t808 + t1275 * t701 - t1574;
t685 = -t1270 * t772 - t1274 * t770 + t1563;
t645 = t1266 * t676 + t1268 * t685 + t1585;
t646 = -t1266 * t685 + t1268 * t676 - t1587;
t1308 = t1272 * t646 + t1276 * t645 + t1600;
t721 = -t737 - t1554;
t699 = t1275 * t721 + t1458 * t1518 - t1574;
t702 = t1563 - t738;
t649 = t1266 * t699 + t1268 * t702 + t1585;
t652 = -t1266 * t702 + t1268 * t699 - t1587;
t1307 = t1272 * t652 + t1276 * t649 + t1600;
t743 = -t1579 - qJ(6) * t1479 + (-t1064 + t1464) * pkin(5) - t1365;
t1282 = t1164 * t1510 - t1284;
t779 = -pkin(5) * t1422 + t1282 + t1508;
t745 = -pkin(5) * t1451 + t1274 * t779 - t1578;
t873 = t1275 * t1473 - t1569;
t682 = -pkin(9) * t873 - t1271 * t743 + t1275 * t745;
t717 = -pkin(3) * t873 + t1577 - t1270 * t779 + (-pkin(4) - t1457) * t1473;
t650 = -pkin(2) * t873 + qJ(3) * t814 + t1266 * t682 + t1268 * t717;
t653 = -qJ(3) * t812 - t1266 * t717 + t1268 * t682;
t748 = -t1272 * t812 + t1276 * t814;
t1306 = pkin(8) * t748 + t1272 * t653 + t1276 * t650;
t746 = -t1531 + (-t1472 - t1464) * qJ(6) + (-t1480 - t1123) * pkin(5) + t1375;
t780 = (-t983 - t1422) * pkin(5) + t1282;
t747 = -t1270 * t780 - t1455 * t983 - t1529;
t879 = -t1275 * t983 + t1524;
t684 = -pkin(9) * t879 - t1271 * t746 + t1275 * t747;
t720 = -pkin(3) * t879 - t1274 * t780 + t1382 * t983 - t1530;
t651 = -pkin(2) * t879 + qJ(3) * t827 + t1266 * t684 + t1268 * t720;
t654 = -qJ(3) * t825 - t1266 * t720 + t1268 * t684;
t754 = -t1272 * t825 + t1276 * t827;
t1305 = pkin(8) * t754 + t1272 * t654 + t1276 * t651;
t774 = t804 - t1531;
t811 = t1453 - t1529;
t874 = -t1275 * t981 + t1524;
t710 = -pkin(9) * t874 - t1271 * t774 + t1275 * t811;
t752 = -pkin(3) * t874 + pkin(4) * t981 + t1446 - t1530;
t660 = -pkin(2) * t874 + qJ(3) * t815 + t1266 * t710 + t1268 * t752;
t669 = -qJ(3) * t813 - t1266 * t752 + t1268 * t710;
t749 = -t1272 * t813 + t1276 * t815;
t1304 = pkin(8) * t749 + t1272 * t669 + t1276 * t660;
t775 = t805 + t1579;
t818 = t1446 + t1578;
t878 = t1275 * t989 + t1569;
t714 = -pkin(9) * t878 - t1271 * t775 + t1275 * t818;
t756 = -pkin(3) * t878 - pkin(4) * t989 - t1453 - t1577;
t661 = -pkin(2) * t878 + qJ(3) * t826 + t1266 * t714 + t1268 * t756;
t671 = -qJ(3) * t824 - t1266 * t756 + t1268 * t714;
t753 = -t1272 * t824 + t1276 * t826;
t1303 = pkin(8) * t753 + t1272 * t671 + t1276 * t661;
t700 = qJ(3) * t795 + (-pkin(9) * t1266 + t1398) * t816;
t709 = -qJ(3) * t794 + (-pkin(9) * t1268 + t1459) * t816;
t729 = -t1272 * t794 + t1276 * t795;
t1302 = pkin(8) * t729 + t1272 * t709 + t1276 * t700;
t995 = -t1071 * t1271 + t1075 * t1275;
t796 = -pkin(9) * t995 - t816;
t744 = qJ(3) * t936 + t1266 * t796 + t1398 * t995;
t751 = -qJ(3) * t935 + t1268 * t796 + t1459 * t995;
t847 = -t1272 * t935 + t1276 * t936;
t1301 = pkin(8) * t847 + t1272 * t751 + t1276 * t744;
t1030 = t1122 * t1271 + t1496;
t861 = -pkin(3) * t1030 + t910;
t912 = -pkin(9) * t1030 + t1449;
t771 = -pkin(2) * t1030 + qJ(3) * t946 + t1266 * t912 + t1268 * t861;
t782 = -qJ(3) * t945 - t1266 * t861 + t1268 * t912;
t867 = -t1272 * t945 + t1276 * t946;
t1300 = pkin(8) * t867 + t1272 * t782 + t1276 * t771;
t1043 = t1135 * t1275 - t1432;
t866 = -pkin(3) * t1043 + t911;
t915 = -pkin(9) * t1043 + t1443;
t773 = -pkin(2) * t1043 + qJ(3) * t952 + t1266 * t915 + t1268 * t866;
t785 = -qJ(3) * t951 - t1266 * t866 + t1268 * t915;
t872 = -t1272 * t951 + t1276 * t952;
t1299 = pkin(8) * t872 + t1272 * t785 + t1276 * t773;
t1002 = -t1079 * t1272 + t1081 * t1276;
t1158 = -t1219 - t1220;
t877 = -pkin(2) * t1158 + qJ(3) * t1081 + t921;
t896 = -qJ(3) * t1079 - t920;
t1298 = pkin(8) * t1002 + t1272 * t896 + t1276 * t877;
t1007 = -pkin(2) * t1149 + qJ(3) * t1103 + t1426;
t1024 = -t1102 * t1272 + t1103 * t1276;
t1051 = -qJ(3) * t1102 - t1427;
t1296 = pkin(8) * t1024 + t1007 * t1276 + t1051 * t1272;
t1013 = -pkin(2) * t1475 + qJ(3) * t1121 - t1427;
t1048 = -t1120 * t1272 + t1121 * t1276;
t1058 = -qJ(3) * t1120 - t1426;
t1295 = pkin(8) * t1048 + t1013 * t1276 + t1058 * t1272;
t1155 = t1203 * t1272 + t1204 * t1276;
t1294 = pkin(8) * t1155 + t1101;
t840 = t1276 * t921 - t1447;
t908 = pkin(2) * t1140 + qJ(3) * t921;
t1293 = pkin(8) * t840 - qJ(3) * t1447 + t1276 * t908;
t1290 = t1271 * t1169;
t1287 = t1275 * t1292;
t1262 = t1267 * t1263;
t1248 = qJDD(1) * t1273 + t1277 * t1278;
t1241 = t1269 * t1257;
t1236 = t1401 * t1412;
t1235 = (t1264 - t1265) * t1412;
t1231 = -pkin(7) * t1248 + g(3) * t1277;
t1208 = t1401 * t1396;
t1201 = (t1400 + (qJD(2) + t1258) * t1439) * t1267;
t1200 = t1230 * t1276 - t1264 * t1396;
t1196 = -t1265 * t1396 - t1272 * t1367;
t1187 = t1233 * t1276 - t1416;
t1186 = -t1232 * t1272 + t1417;
t1183 = t1220 - t1219;
t1171 = (t1262 * t1276 * t1278 + t1202 * t1269) * t1272;
t1170 = (-t1262 * t1407 + (-t1253 + (-t1272 * t1440 + t1399) * t1267) * t1269) * t1276;
t1156 = -t1202 * t1272 + t1205 * t1276;
t1139 = t1267 * t1205 + t1269 * t1318;
t1138 = -t1267 * t1204 + t1269 * t1317;
t1137 = -t1267 * t1203 + t1269 * t1319;
t1136 = -t1269 * t1205 + t1267 * t1318;
t1134 = -t1267 * t1201 + t1269 * t1320;
t1133 = t1269 * t1201 + t1267 * t1320;
t1126 = -t1267 * t1235 + t1269 * t1322;
t1125 = t1267 * t1236 + t1269 * t1321;
t1124 = -t1269 * t1236 + t1267 * t1321;
t1096 = -t1290 - t1287;
t1095 = -t1139 * t1273 + t1188 * t1277;
t1094 = t1139 * t1277 + t1188 * t1273;
t1088 = -t1165 * t1272 + t1166 * t1276;
t1085 = -t1134 * t1273 + t1178 * t1277;
t1084 = t1134 * t1277 + t1178 * t1273;
t1083 = t1267 * t1210 + t1269 * t1323;
t1082 = -t1269 * t1210 + t1267 * t1323;
t1077 = t1269 * t1324 - t1411;
t1069 = t1271 * t1128 + t1287;
t1067 = t1275 * t1127 + t1290;
t1066 = -t1143 * t1272 + t1144 * t1276;
t1065 = -t1141 * t1272 + t1142 * t1276;
t1062 = -t1125 * t1273 + t1155 * t1277;
t1061 = t1125 * t1277 + t1155 * t1273;
t1055 = t1167 * t1271 + t1431;
t1054 = t1168 * t1275 + t1499;
t1053 = -t1130 * t1272 + t1132 * t1276;
t1052 = -t1129 * t1272 + t1131 * t1276;
t1045 = -t1408 + (-t1136 * t1267 - t1139 * t1269) * pkin(8);
t1035 = -t1406 + (-t1133 * t1267 - t1134 * t1269) * pkin(8);
t1034 = t1269 * t1325 - t1384;
t1033 = t1269 * t1326 + t1384;
t1032 = -pkin(1) * t1136 + t1267 * t1172 + t1269 * t1368;
t1023 = -pkin(1) * t1133 + t1267 * t1173 + t1269 * t1369;
t1012 = -t1267 * t1314 + t1269 * t1327;
t1011 = -t1267 * t1154 + t1269 * t1328;
t1010 = pkin(8) * t1101 * t1269 - pkin(1) * t1082;
t1009 = -t1083 * t1273 + t1101 * t1277;
t1008 = t1083 * t1277 + t1101 * t1273;
t1006 = -t1267 * t1475 + t1269 * t1329;
t1005 = t1267 * t1329 + t1269 * t1475;
t1004 = -pkin(1) * t1124 + t1269 * t1294;
t1003 = (-t1082 * t1267 - t1083 * t1269) * pkin(8);
t1001 = -t1078 * t1272 + t1080 * t1276;
t1000 = -t1267 * t1149 + t1269 * t1330;
t999 = t1269 * t1149 + t1267 * t1330;
t998 = (-t1124 * t1267 - t1125 * t1269) * pkin(8) - t1323;
t994 = t1072 * t1271 + t1074 * t1275;
t960 = pkin(2) * t1120 - t1016;
t955 = pkin(2) * t1102 - t1015;
t954 = -t1059 * t1272 + t1060 * t1276;
t953 = -t1267 * t1183 + t1269 * t1332;
t944 = -t1267 * t1158 + t1269 * t1331;
t943 = t1269 * t1158 + t1267 * t1331;
t926 = -t1018 * t1272 + t1020 * t1276;
t925 = -t1017 * t1272 + t1019 * t1276;
t924 = -t1006 * t1273 + t1048 * t1277;
t923 = t1006 * t1277 + t1048 * t1273;
t922 = -t1267 * t1096 + t1269 * t1333;
t914 = -t1000 * t1273 + t1024 * t1277;
t913 = t1000 * t1277 + t1024 * t1273;
t895 = -t1267 * t1069 + t1269 * t1334;
t894 = -t1267 * t1067 + t1269 * t1335;
t885 = -t1272 * t957 + t1276 * t959;
t884 = -t1272 * t956 + t1276 * t958;
t883 = t1002 * t1277 - t1273 * t944;
t882 = t1002 * t1273 + t1277 * t944;
t852 = -t1272 * t941 + t1276 * t942;
t846 = -t1267 * t1055 + t1269 * t1337;
t845 = -t1267 * t1054 + t1269 * t1338;
t844 = -t1267 * t1043 + t1269 * t1339;
t843 = t1269 * t1043 + t1267 * t1339;
t842 = -t1267 * t1030 + t1269 * t1340;
t841 = t1269 * t1030 + t1267 * t1340;
t831 = -t1272 * t1013 + t1276 * t1058 + (-t1005 * t1267 - t1006 * t1269) * pkin(8);
t830 = pkin(2) * t951 - pkin(3) * t1074 + pkin(9) * t1044 + t1449;
t823 = t1267 * t1140 + t1269 * t1343;
t822 = -t1269 * t1140 + t1267 * t1343;
t821 = pkin(2) * t945 + pkin(3) * t1072 + pkin(9) * t1031 - t1443;
t820 = -t1272 * t1007 + t1276 * t1051 + (-t1000 * t1269 - t1267 * t999) * pkin(8);
t819 = -t1267 * t994 + t1269 * t1341;
t810 = -t1267 * t995 + t1269 * t1342;
t809 = t1267 * t1342 + t1269 * t995;
t807 = -pkin(1) * t1005 - t1267 * t960 + t1269 * t1295;
t806 = -pkin(1) * t999 - t1267 * t955 + t1269 * t1296;
t784 = -t1273 * t844 + t1277 * t872;
t783 = t1273 * t872 + t1277 * t844;
t778 = -t1273 * t842 + t1277 * t867;
t777 = t1273 * t867 + t1277 * t842;
t769 = pkin(2) * t935 + pkin(3) * t1107 + pkin(9) * t997 + t817;
t760 = -t1273 * t810 + t1277 * t847;
t759 = t1273 * t847 + t1277 * t810;
t758 = -t1273 * t823 + t1277 * t840;
t757 = t1273 * t840 + t1277 * t823;
t755 = -t1272 * t877 + t1276 * t896 + (-t1267 * t943 - t1269 * t944) * pkin(8);
t750 = -pkin(1) * t943 - t1079 * t1461 + t1269 * t1298;
t734 = -t1267 * t879 + t1269 * t1354;
t733 = -t1267 * t878 + t1269 * t1355;
t732 = t1267 * t1354 + t1269 * t879;
t731 = t1267 * t1355 + t1269 * t878;
t730 = pkin(2) * t794 - pkin(3) * t970 + pkin(9) * t817;
t726 = -t1267 * t874 + t1269 * t1356;
t725 = -t1267 * t873 + t1269 * t1357;
t724 = t1267 * t1356 + t1269 * t874;
t723 = t1267 * t1357 + t1269 * t873;
t722 = -qJ(3) * t1441 - t1272 * t908 + (-t1267 * t822 - t1269 * t823) * pkin(8);
t711 = -pkin(1) * t822 + t1269 * t1293 - t1461 * t920;
t704 = -t1267 * t816 + t1269 * t1360;
t703 = t1267 * t1360 + t1269 * t816;
t696 = -t1273 * t734 + t1277 * t754;
t695 = -t1273 * t733 + t1277 * t753;
t694 = t1273 * t754 + t1277 * t734;
t693 = t1273 * t753 + t1277 * t733;
t692 = pkin(2) * t824 + pkin(9) * t880 + t1271 * t818 + t1275 * t775 + t1580;
t691 = pkin(2) * t813 + pkin(9) * t876 + t1271 * t811 + t1275 * t774 - t1532;
t690 = -t1273 * t726 + t1277 * t749;
t689 = -t1273 * t725 + t1277 * t748;
t688 = t1273 * t749 + t1277 * t726;
t687 = t1273 * t748 + t1277 * t725;
t686 = -t1272 * t773 + t1276 * t785 + (-t1267 * t843 - t1269 * t844) * pkin(8);
t683 = -t1272 * t771 + t1276 * t782 + (-t1267 * t841 - t1269 * t842) * pkin(8);
t679 = -pkin(1) * t843 - t1267 * t830 + t1269 * t1299;
t677 = -pkin(1) * t841 - t1267 * t821 + t1269 * t1300;
t668 = t1271 * t721 + t1397 * t1518 + t1586;
t667 = -t1273 * t704 + t1277 * t729;
t666 = t1273 * t729 + t1277 * t704;
t664 = pkin(2) * t825 + pkin(9) * t881 + t1271 * t747 + t1275 * t746 - t1532;
t663 = -t1272 * t744 + t1276 * t751 + (-t1267 * t809 - t1269 * t810) * pkin(8);
t662 = pkin(2) * t812 + pkin(9) * t875 + t1271 * t745 + t1275 * t743 - t1580;
t657 = -pkin(1) * t809 - t1267 * t769 + t1269 * t1301;
t656 = -pkin(3) * t1518 + t1271 * t701 + t1275 * t808 + t1586;
t644 = -t1267 * t715 + t1269 * t1363;
t643 = t1267 * t1363 + t1269 * t715;
t642 = -t1272 * t700 + t1276 * t709 + (-t1267 * t703 - t1269 * t704) * pkin(8);
t640 = pkin(2) * t680 + pkin(9) * t716 + (-pkin(10) * t1271 + t1397) * t737;
t638 = -pkin(1) * t703 - t1267 * t730 + t1269 * t1302;
t637 = -t1272 * t661 + t1276 * t671 + (-t1267 * t731 - t1269 * t733) * pkin(8);
t636 = -t1272 * t660 + t1276 * t669 + (-t1267 * t724 - t1269 * t726) * pkin(8);
t635 = -t1267 * t697 + t1269 * t1364;
t634 = t1267 * t1364 + t1269 * t697;
t632 = -pkin(1) * t731 - t1267 * t692 + t1269 * t1303;
t631 = -pkin(1) * t724 - t1267 * t691 + t1269 * t1304;
t629 = -t1272 * t651 + t1276 * t654 + (-t1267 * t732 - t1269 * t734) * pkin(8);
t628 = -t1272 * t650 + t1276 * t653 + (-t1267 * t723 - t1269 * t725) * pkin(8);
t627 = -t1273 * t644 + t1277 * t648;
t626 = t1273 * t648 + t1277 * t644;
t625 = -t1272 * t649 + t1276 * t652 + t1601;
t624 = pkin(2) * t658 - pkin(3) * t718 + pkin(9) * t698 + t1271 * t678 + t1275 * t670;
t623 = -pkin(1) * t732 - t1267 * t664 + t1269 * t1305;
t622 = -pkin(1) * t723 - t1267 * t662 + t1269 * t1306;
t621 = -t1272 * t645 + t1276 * t646 + t1601;
t620 = -t1267 * t668 + t1269 * t1307 - t1606;
t619 = -t1273 * t635 + t1277 * t641;
t618 = t1273 * t641 + t1277 * t635;
t616 = -t1267 * t656 + t1269 * t1308 - t1606;
t614 = -t1272 * t630 + t1276 * t633 + (-t1267 * t643 - t1269 * t644) * pkin(8);
t613 = -pkin(1) * t643 - t1267 * t640 + t1269 * t1309;
t612 = -t1272 * t615 + t1276 * t617 + (-t1267 * t634 - t1269 * t635) * pkin(8);
t611 = -pkin(1) * t634 - t1267 * t624 + t1269 * t1310;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1248, -t1249, 0, t1213, 0, 0, 0, 0, 0, 0, t1095, t1085, t1062, t1009, 0, 0, 0, 0, 0, 0, t914, t924, t883, t758, 0, 0, 0, 0, 0, 0, t778, t784, t760, t667, 0, 0, 0, 0, 0, 0, t690, t695, t1604, t627, 0, 0, 0, 0, 0, 0, t696, t1604, t689, t619; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1249, -t1248, 0, t1212, 0, 0, 0, 0, 0, 0, t1094, t1084, t1061, t1008, 0, 0, 0, 0, 0, 0, t913, t923, t882, t757, 0, 0, 0, 0, 0, 0, t777, t783, t759, t666, 0, 0, 0, 0, 0, 0, t688, t693, t1602, t626, 0, 0, 0, 0, 0, 0, t694, t1602, t687, t618; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1136, t1133, t1124, t1082, 0, 0, 0, 0, 0, 0, t999, t1005, t943, t822, 0, 0, 0, 0, 0, 0, t841, t843, t809, t703, 0, 0, 0, 0, 0, 0, t724, t731, t1591, t643, 0, 0, 0, 0, 0, 0, t732, t1591, t723, t634; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1249, 0, -t1248, 0, t1374, -t1231, -t1212, -pkin(7) * t1212, -t1171 * t1273 + t1200 * t1277, -t1126 * t1273 + t1156 * t1277, -t1137 * t1273 + t1186 * t1277, -t1170 * t1273 + t1196 * t1277, -t1138 * t1273 + t1187 * t1277, t1208 * t1277 + t1273 * t1411, -pkin(7) * t1094 - t1032 * t1273 + t1045 * t1277, -pkin(7) * t1084 - t1023 * t1273 + t1035 * t1277, -pkin(7) * t1061 - t1004 * t1273 + t1277 * t998, -pkin(7) * t1008 + t1003 * t1277 - t1010 * t1273, -t1034 * t1273 + t1066 * t1277, t1001 * t1277 - t1273 * t953, -t1011 * t1273 + t1052 * t1277, -t1033 * t1273 + t1065 * t1277, -t1012 * t1273 + t1053 * t1277, -t1077 * t1273 + t1088 * t1277, -pkin(7) * t913 - t1273 * t806 + t1277 * t820, -pkin(7) * t923 - t1273 * t807 + t1277 * t831, -pkin(7) * t882 - t1273 * t750 + t1277 * t755, -pkin(7) * t757 - t1273 * t711 + t1277 * t722, -t1273 * t895 + t1277 * t926, -t1273 * t819 + t1277 * t852, -t1273 * t845 + t1277 * t884, -t1273 * t894 + t1277 * t925, -t1273 * t846 + t1277 * t885, -t1273 * t922 + t1277 * t954, -pkin(7) * t777 - t1273 * t677 + t1277 * t683, -pkin(7) * t783 - t1273 * t679 + t1277 * t686, -pkin(7) * t759 - t1273 * t657 + t1277 * t663, -pkin(7) * t666 - t1273 * t638 + t1277 * t642, t1536, t1618, t1605, t1558, -t1619, t1557, -pkin(7) * t688 - t1273 * t631 + t1277 * t636, -pkin(7) * t693 - t1273 * t632 + t1277 * t637, -t1273 * t620 + t1277 * t625 - t1609, -pkin(7) * t626 - t1273 * t613 + t1277 * t614, t1536, t1605, -t1618, t1557, t1619, t1558, -pkin(7) * t694 - t1273 * t623 + t1277 * t629, -t1273 * t616 + t1277 * t621 - t1609, -pkin(7) * t687 - t1273 * t622 + t1277 * t628, -pkin(7) * t618 - t1273 * t611 + t1277 * t612; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1248, 0, t1249, 0, t1231, t1374, t1213, pkin(7) * t1213, t1171 * t1277 + t1200 * t1273, t1126 * t1277 + t1156 * t1273, t1137 * t1277 + t1186 * t1273, t1170 * t1277 + t1196 * t1273, t1138 * t1277 + t1187 * t1273, t1208 * t1273 - t1277 * t1411, pkin(7) * t1095 + t1032 * t1277 + t1045 * t1273, pkin(7) * t1085 + t1023 * t1277 + t1035 * t1273, pkin(7) * t1062 + t1004 * t1277 + t1273 * t998, pkin(7) * t1009 + t1003 * t1273 + t1010 * t1277, t1034 * t1277 + t1066 * t1273, t1001 * t1273 + t1277 * t953, t1011 * t1277 + t1052 * t1273, t1033 * t1277 + t1065 * t1273, t1012 * t1277 + t1053 * t1273, t1077 * t1277 + t1088 * t1273, pkin(7) * t914 + t1273 * t820 + t1277 * t806, pkin(7) * t924 + t1273 * t831 + t1277 * t807, pkin(7) * t883 + t1273 * t755 + t1277 * t750, pkin(7) * t758 + t1273 * t722 + t1277 * t711, t1273 * t926 + t1277 * t895, t1273 * t852 + t1277 * t819, t1273 * t884 + t1277 * t845, t1273 * t925 + t1277 * t894, t1273 * t885 + t1277 * t846, t1273 * t954 + t1277 * t922, pkin(7) * t778 + t1273 * t683 + t1277 * t677, pkin(7) * t784 + t1273 * t686 + t1277 * t679, pkin(7) * t760 + t1273 * t663 + t1277 * t657, pkin(7) * t667 + t1273 * t642 + t1277 * t638, t1533, -t1616, t1603, t1556, t1617, t1555, pkin(7) * t690 + t1273 * t636 + t1277 * t631, pkin(7) * t695 + t1273 * t637 + t1277 * t632, t1273 * t625 + t1277 * t620 + t1608, pkin(7) * t627 + t1273 * t614 + t1277 * t613, t1533, t1603, t1616, t1555, -t1617, t1556, pkin(7) * t696 + t1273 * t629 + t1277 * t623, t1273 * t621 + t1277 * t616 + t1608, pkin(7) * t689 + t1273 * t628 + t1277 * t622, pkin(7) * t619 + t1273 * t612 + t1277 * t611; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1251, t1252, 0, 0, (t1230 * t1267 + t1276 * t1487) * t1272, t1269 * t1235 + t1267 * t1322, t1269 * t1203 + t1267 * t1319, (t1267 * t1367 - t1272 * t1487) * t1276, t1269 * t1204 + t1267 * t1317, t1241, pkin(1) * t1139 - t1269 * t1172 + t1267 * t1368, pkin(1) * t1134 - t1269 * t1173 + t1267 * t1369, pkin(1) * t1125 + t1267 * t1294, pkin(1) * t1083 + t1101 * t1456, t1267 * t1325 + t1383, t1269 * t1183 + t1267 * t1332, t1269 * t1154 + t1267 * t1328, t1267 * t1326 - t1383, t1267 * t1327 + t1269 * t1314, t1267 * t1324 + t1241, pkin(1) * t1000 + t1267 * t1296 + t1269 * t955, pkin(1) * t1006 + t1267 * t1295 + t1269 * t960, pkin(1) * t944 + t1079 * t1460 + t1267 * t1298, pkin(1) * t823 + t1267 * t1293 + t1460 * t920, t1269 * t1069 + t1267 * t1334, t1267 * t1341 + t1269 * t994, t1269 * t1054 + t1267 * t1338, t1269 * t1067 + t1267 * t1335, t1269 * t1055 + t1267 * t1337, t1269 * t1096 + t1267 * t1333, pkin(1) * t842 + t1267 * t1300 + t1269 * t821, pkin(1) * t844 + t1267 * t1299 + t1269 * t830, pkin(1) * t810 + t1267 * t1301 + t1269 * t769, pkin(1) * t704 + t1267 * t1302 + t1269 * t730, t1516, -t1610, t1590, t1541, t1611, t1542, pkin(1) * t726 + t1267 * t1304 + t1269 * t691, pkin(1) * t733 + t1267 * t1303 + t1269 * t692, t1267 * t1307 + t1269 * t668 + t1607, pkin(1) * t644 + t1267 * t1309 + t1269 * t640, t1516, t1590, t1610, t1542, -t1611, t1541, pkin(1) * t734 + t1267 * t1305 + t1269 * t664, t1267 * t1308 + t1269 * t656 + t1607, pkin(1) * t725 + t1267 * t1306 + t1269 * t662, pkin(1) * t635 + t1267 * t1310 + t1269 * t624;];
tauB_reg  = t1;
