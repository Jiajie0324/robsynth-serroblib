% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RRPRRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
% 
% Output:
% tau_reg [6x30]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 12:15
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRRP6_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP6_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP6_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP6_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP6_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP6_invdynJ_fixb_regmin_slag_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 12:14:15
% EndTime: 2019-03-09 12:14:41
% DurationCPUTime: 12.42s
% Computational Cost: add. (15378->686), mult. (43213->905), div. (0->0), fcn. (35643->12), ass. (0->336)
t253 = sin(pkin(6));
t260 = cos(qJ(2));
t431 = cos(pkin(11));
t362 = t260 * t431;
t337 = qJD(1) * t362;
t225 = t253 * t337;
t256 = sin(qJ(2));
t430 = sin(pkin(11));
t364 = t256 * t430;
t341 = t253 * t364;
t310 = qJD(1) * t341;
t295 = t310 - t225;
t475 = qJD(4) + t295;
t432 = cos(pkin(6));
t363 = t260 * t432;
t243 = pkin(1) * t363;
t239 = qJD(1) * t243;
t449 = pkin(8) + qJ(3);
t373 = t449 * t256;
t347 = t253 * t373;
t187 = -qJD(1) * t347 + t239;
t365 = t256 * t432;
t242 = pkin(1) * t365;
t412 = t253 * t260;
t188 = (t412 * t449 + t242) * qJD(1);
t360 = t431 * t188;
t123 = t187 * t430 + t360;
t255 = sin(qJ(4));
t259 = cos(qJ(4));
t484 = -t123 + t475 * (pkin(4) * t255 - pkin(10) * t259);
t258 = cos(qJ(5));
t486 = t484 * t258;
t250 = t253 ^ 2;
t485 = 0.2e1 * t250;
t469 = qJD(4) * t475;
t476 = t295 * t475 + t469;
t483 = t476 * t259;
t482 = pkin(1) * t485;
t292 = t256 * t431 + t260 * t430;
t285 = qJD(1) * t292;
t201 = t253 * t285;
t358 = t432 * qJD(1);
t315 = t358 + qJD(2);
t171 = t255 * t201 - t259 * t315;
t155 = -qJD(2) * t310 + (qJD(2) * t337 + qJDD(1) * t292) * t253;
t350 = t432 * qJDD(1);
t309 = t350 + qJDD(2);
t276 = t259 * t155 + t255 * t309;
t263 = -qJD(4) * t171 + t276;
t481 = qJD(5) * t475 + t263;
t254 = sin(qJ(5));
t407 = t258 * t259;
t140 = t201 * t254 - t295 * t407;
t394 = qJD(5) * t254;
t329 = t255 * t394 + t140;
t395 = qJD(4) * t259;
t376 = t258 * t395;
t480 = t329 - t376;
t257 = sin(qJ(1));
t261 = cos(qJ(1));
t361 = t261 * t432;
t479 = -t257 * t256 + t260 * t361;
t284 = qJD(2) * t292;
t332 = qJDD(1) * t364;
t340 = t253 * t362;
t223 = qJDD(1) * t340;
t385 = qJDD(4) - t223;
t265 = t385 + (qJD(1) * t284 + t332) * t253;
t249 = pkin(2) * t260 + pkin(1);
t338 = t249 * t253;
t211 = -qJD(1) * t338 + qJD(3);
t120 = pkin(3) * t295 - pkin(9) * t201 + t211;
t396 = qJD(4) * t255;
t366 = qJD(2) * t449;
t294 = qJD(3) * t260 - t256 * t366;
t348 = pkin(1) * qJD(2) * t432;
t312 = qJD(1) * t348;
t342 = pkin(1) * t350;
t389 = qJDD(1) * t260;
t369 = t253 * t389;
t381 = pkin(8) * t369 + t256 * t342 + t260 * t312;
t115 = (qJ(3) * t389 + qJD(1) * t294) * t253 + t381;
t293 = -t256 * t312 + t260 * t342;
t397 = qJD(3) * t256;
t97 = t309 * pkin(2) + (-qJDD(1) * t373 + (-t260 * t366 - t397) * qJD(1)) * t253 + t293;
t52 = t431 * t115 + t430 * t97;
t47 = pkin(9) * t309 + t52;
t268 = (-qJD(2) * t285 - t332) * t253;
t154 = t223 + t268;
t328 = t249 * qJDD(1);
t390 = qJD(1) * qJD(2);
t372 = t256 * t390;
t346 = t253 * t372;
t386 = pkin(2) * t346 + qJDD(3);
t478 = t253 * t328 - t386;
t68 = -pkin(3) * t154 - pkin(9) * t155 - t478;
t288 = pkin(2) * t432 - t347;
t174 = qJD(2) * pkin(2) + qJD(1) * t288 + t239;
t103 = t430 * t174 + t360;
t93 = pkin(9) * t315 + t103;
t357 = t120 * t396 + t255 * t47 - t259 * t68 + t93 * t395;
t12 = -pkin(4) * t265 + t357;
t313 = t259 * pkin(4) + t255 * pkin(10) + pkin(3);
t380 = t431 * pkin(2);
t218 = -t380 - t313;
t393 = qJD(5) * t258;
t180 = t430 * t188;
t124 = t187 * t431 - t180;
t414 = t253 * t256;
t378 = qJD(1) * t414;
t349 = pkin(2) * t378;
t134 = pkin(3) * t201 + pkin(9) * t295 + t349;
t404 = t259 * t124 + t255 * t134;
t56 = pkin(10) * t201 + t404;
t477 = -t218 * t393 - t254 * t484 + t258 * t56;
t170 = qJD(5) + t171;
t326 = t432 * t430;
t327 = t432 * t431;
t206 = t256 * t327 + t260 * t326;
t219 = t364 - t362;
t164 = t206 * t261 - t219 * t257;
t411 = t253 * t261;
t142 = t164 * t259 - t255 * t411;
t205 = -t256 * t326 + t260 * t327;
t163 = t261 * t205 - t257 * t292;
t75 = t142 * t254 + t163 * t258;
t76 = t142 * t258 - t163 * t254;
t379 = t430 * pkin(2);
t247 = t379 + pkin(9);
t417 = t247 * t258;
t423 = t295 * t255;
t446 = qJ(6) * t423 + (-t247 * t394 - qJD(6)) * t259 + (qJ(6) - t417) * t396 - t477;
t419 = t247 * t254;
t367 = pkin(5) + t419;
t402 = t254 * t218 + t247 * t407;
t436 = -pkin(5) * t423 + qJD(5) * t402 - t254 * t56 - t367 * t396 - t486;
t410 = t254 * t259;
t139 = -t258 * t201 - t295 * t410;
t323 = pkin(5) * t254 - qJ(6) * t258;
t307 = t247 + t323;
t324 = pkin(5) * t258 + qJ(6) * t254;
t355 = -t255 * t124 + t259 * t134;
t55 = -pkin(4) * t201 - t355;
t435 = -pkin(5) * t139 + qJ(6) * t140 + (qJD(5) * t324 - qJD(6) * t258) * t255 + t307 * t395 - t55;
t472 = (qJDD(2) + 0.2e1 * t350) * t253;
t471 = t259 * t295 + t395;
t470 = t396 + t423;
t277 = -t259 * t201 - t255 * t315;
t354 = t255 * t155 - t259 * t309;
t74 = -qJD(4) * t277 + t354;
t73 = qJDD(5) + t74;
t165 = t206 * t257 + t219 * t261;
t413 = t253 * t257;
t145 = -t165 * t255 - t259 * t413;
t204 = t292 * t253;
t302 = -t204 * t255 + t259 * t432;
t353 = -t164 * t255 - t259 * t411;
t297 = g(1) * t145 - g(2) * t353 - g(3) * t302;
t166 = -t205 * t257 - t261 * t292;
t203 = t341 - t340;
t468 = g(1) * t166 + g(2) * t163 - g(3) * t203;
t109 = -t254 * t277 - t258 * t475;
t111 = t254 * t475 - t258 * t277;
t53 = t259 * t120 - t255 * t93;
t40 = -pkin(4) * t475 - t53;
t21 = t109 * pkin(5) - t111 * qJ(6) + t40;
t460 = pkin(10) * t73;
t467 = t170 * t21 - t460;
t330 = t254 * t395 - t139;
t290 = t255 * t393 + t330;
t35 = -t254 * t265 - t258 * t481 - t277 * t394;
t441 = t254 * t35;
t466 = -t111 * t290 + t255 * t441;
t199 = t253 * t284;
t186 = t243 + t288;
t401 = pkin(8) * t412 + t242;
t195 = qJ(3) * t412 + t401;
t132 = t430 * t186 + t431 * t195;
t122 = pkin(9) * t432 + t132;
t399 = qJD(2) * t253;
t200 = t219 * t399;
t398 = qJD(2) * t256;
t377 = t253 * t398;
t135 = pkin(2) * t377 + pkin(3) * t199 + pkin(9) * t200;
t458 = pkin(9) * t204;
t138 = pkin(3) * t203 - t338 - t458;
t240 = t260 * t348;
t177 = t253 * t294 + t240;
t374 = t449 * t253;
t178 = -t253 * t397 + (-t260 * t374 - t242) * qJD(2);
t95 = t177 * t431 + t178 * t430;
t299 = -t122 * t396 + t255 * t135 + t138 * t395 + t259 * t95;
t27 = pkin(10) * t199 + t299;
t405 = t259 * t122 + t255 * t138;
t61 = pkin(10) * t203 + t405;
t131 = t186 * t431 - t430 * t195;
t121 = -pkin(3) * t432 - t131;
t184 = t204 * t259 + t255 * t432;
t67 = -pkin(4) * t302 - t184 * pkin(10) + t121;
t319 = t254 * t67 + t258 * t61;
t129 = qJD(4) * t184 - t200 * t255;
t130 = qJD(4) * t302 - t200 * t259;
t94 = t177 * t430 - t431 * t178;
t38 = t129 * pkin(4) - t130 * pkin(10) + t94;
t465 = -qJD(5) * t319 - t254 * t27 + t258 * t38;
t51 = -t430 * t115 + t431 * t97;
t46 = -pkin(3) * t309 - t51;
t464 = -t46 - t468;
t463 = t111 ^ 2;
t462 = t170 ^ 2;
t262 = qJD(1) ^ 2;
t461 = pkin(5) * t73;
t455 = g(1) * t257;
t450 = t253 * pkin(8);
t96 = -pkin(4) * t277 + pkin(10) * t171;
t448 = t254 * t96 + t258 * t53;
t445 = pkin(10) * qJD(5);
t444 = qJ(6) * t73;
t54 = t255 * t120 + t259 * t93;
t41 = pkin(10) * t475 + t54;
t102 = t174 * t431 - t180;
t92 = -pkin(3) * t315 - t102;
t48 = t171 * pkin(4) + pkin(10) * t277 + t92;
t19 = t254 * t48 + t258 * t41;
t14 = qJ(6) * t170 + t19;
t443 = t14 * t170;
t442 = t170 * t19;
t440 = t254 * t73;
t439 = t258 * t73;
t438 = t259 * t35;
t36 = t254 * t481 - t258 * t265 - t277 * t393;
t437 = t259 * t36;
t409 = t255 * t258;
t434 = t170 * t376 + t73 * t409;
t433 = -qJD(6) * t254 + t170 * t323 - t54;
t429 = t109 * t170;
t428 = t111 * t109;
t427 = t111 * t170;
t424 = t277 * t201;
t421 = t201 * t171;
t420 = t218 * t258;
t418 = t247 * t255;
t416 = t247 * t259;
t415 = t250 * t262;
t18 = -t254 * t41 + t258 * t48;
t406 = qJD(6) - t18;
t251 = t256 ^ 2;
t400 = -t260 ^ 2 + t251;
t391 = qJD(4) - t225;
t387 = t256 * qJDD(1);
t384 = g(3) * t412;
t382 = t260 * t415;
t375 = t170 * t394;
t371 = t260 * t390;
t370 = t253 * t387;
t303 = -t120 * t395 - t255 * t68 - t259 * t47 + t396 * t93;
t11 = pkin(10) * t265 - t303;
t17 = t74 * pkin(4) - pkin(10) * t263 + t46;
t368 = t254 * t11 - t258 * t17 + t41 * t393 + t48 * t394;
t359 = t111 * t396 + t438;
t356 = -t255 * t122 + t138 * t259;
t209 = pkin(2) * t365 - t374;
t352 = -t209 * t257 + t261 * t249;
t351 = t170 * t258;
t345 = t479 * pkin(2);
t146 = -t165 * t259 + t255 * t413;
t79 = t146 * t254 + t166 * t258;
t344 = -g(1) * t75 + g(2) * t79;
t80 = t146 * t258 - t166 * t254;
t343 = g(1) * t76 - g(2) * t80;
t336 = t253 * t262 * t432;
t334 = g(1) * t353 + g(2) * t145;
t333 = g(1) * t261 + g(2) * t257;
t331 = g(2) * t411 - g(3) * t432;
t136 = t184 * t254 - t203 * t258;
t137 = t184 * t258 + t203 * t254;
t325 = -pkin(5) * t136 + qJ(6) * t137;
t13 = -pkin(5) * t170 + t406;
t322 = t13 * t258 - t14 * t254;
t321 = t13 * t254 + t14 * t258;
t318 = -t254 * t61 + t258 * t67;
t317 = -t209 * t261 - t249 * t257;
t314 = 0.2e1 * t358 + qJD(2);
t311 = -t122 * t395 + t135 * t259 - t138 * t396 - t255 * t95;
t308 = pkin(4) + t324;
t60 = -pkin(4) * t203 - t356;
t306 = -t170 * t393 - t440;
t3 = t258 * t11 + t254 * t17 + t48 * t393 - t394 * t41;
t305 = t254 * t38 + t258 * t27 + t67 * t393 - t394 * t61;
t304 = t170 * t40 - t460;
t152 = -t203 * t410 - t204 * t258;
t81 = t163 * t410 - t164 * t258;
t83 = t165 * t258 + t166 * t410;
t301 = g(1) * t83 + g(2) * t81 + g(3) * t152;
t153 = -t203 * t407 + t204 * t254;
t82 = t163 * t407 + t164 * t254;
t84 = -t165 * t254 + t166 * t407;
t300 = -g(1) * t84 - g(2) * t82 - g(3) * t153;
t298 = -t371 - t387;
t296 = -g(1) * t146 - g(2) * t142 - g(3) * t184;
t215 = -t261 * t256 - t257 * t363;
t28 = -pkin(4) * t199 - t311;
t287 = t109 * t480 - t36 * t409;
t286 = t215 * pkin(2);
t282 = g(1) * t79 + g(2) * t75 + g(3) * t136 - t368;
t275 = t170 * t445 - t297;
t5 = t36 * pkin(5) + t35 * qJ(6) - t111 * qJD(6) + t12;
t274 = -t275 - t5;
t1 = qJD(6) * t170 + t3 + t444;
t2 = qJDD(6) + t368 - t461;
t273 = qJD(5) * t322 + t1 * t258 + t2 * t254;
t272 = -g(1) * t80 - g(2) * t76 - g(3) * t137 + t3;
t271 = -t255 * t476 + t259 * t265;
t270 = t111 * t21 + qJDD(6) - t282;
t269 = t315 * t401;
t266 = -qJDD(4) + t154;
t264 = -t437 + t109 * t396 + (t109 * t295 - t440) * t255 - t290 * t170;
t248 = -t380 - pkin(3);
t216 = -t257 * t365 + t261 * t260;
t214 = -t256 * t361 - t257 * t260;
t194 = t307 * t255;
t176 = t259 * t367 - t420;
t175 = -qJ(6) * t259 + t402;
t62 = pkin(5) * t111 + qJ(6) * t109;
t59 = -qJD(5) * t136 + t130 * t258 + t199 * t254;
t58 = qJD(5) * t137 + t130 * t254 - t199 * t258;
t32 = -t325 + t60;
t30 = pkin(5) * t277 + t254 * t53 - t258 * t96;
t29 = -qJ(6) * t277 + t448;
t23 = pkin(5) * t302 - t318;
t22 = -qJ(6) * t302 + t319;
t20 = -t35 + t429;
t8 = pkin(5) * t58 - qJ(6) * t59 - qJD(6) * t137 + t28;
t7 = -pkin(5) * t129 - t465;
t6 = qJ(6) * t129 - qJD(6) * t302 + t305;
t4 = [qJDD(1), -g(2) * t261 + t455, t333 (qJDD(1) * t251 + 0.2e1 * t256 * t371) * t250 (t260 * t387 - t390 * t400) * t485, t260 * t314 * t399 + t256 * t472, t260 * t472 - t314 * t377, t309 * t432, -qJD(2) * t269 + (-pkin(8) * t414 + t243) * t309 + (t298 * t450 + t293) * t432 - g(1) * t214 - g(2) * t216 + (t389 - t372) * t482 -(-pkin(8) * t377 + t240) * t315 - t401 * t309 - (-pkin(8) * t346 + t381) * t432 + g(1) * t479 - g(2) * t215 + t298 * t482, t102 * t200 - t103 * t199 - t131 * t155 + t132 * t154 + t201 * t94 - t203 * t52 - t204 * t51 - t253 * t333 - t295 * t95, t52 * t132 + t103 * t95 + t51 * t131 - t102 * t94 - g(1) * t317 - g(2) * t352 + (pkin(2) * t211 * t398 + t249 * t478) * t253, -t130 * t277 + t184 * t263, t129 * t277 - t130 * t171 - t184 * t74 + t263 * t302, t130 * t391 + t184 * t385 + t263 * t203 - t277 * t199 + (t184 * t332 + (t130 * t364 + t184 * t284) * qJD(1)) * t253, -t129 * t391 + t302 * t385 - t74 * t203 - t171 * t199 + (t302 * t332 + (-t129 * t364 + t284 * t302) * qJD(1)) * t253, t385 * t203 + t391 * t199 + (t203 * t332 + (t199 * t364 + t203 * t284) * qJD(1)) * t253, g(1) * t142 - g(2) * t146 + t121 * t74 + t92 * t129 + t94 * t171 + t53 * t199 - t203 * t357 + t265 * t356 - t302 * t46 + t311 * t475, t121 * t263 + t92 * t130 + t46 * t184 - t54 * t199 + t203 * t303 + t266 * t405 - t277 * t94 - t299 * t475 + t334, t111 * t59 - t137 * t35, -t109 * t59 - t111 * t58 + t136 * t35 - t137 * t36, t111 * t129 + t137 * t73 + t170 * t59 + t302 * t35, -t109 * t129 - t136 * t73 - t170 * t58 + t302 * t36, t129 * t170 - t302 * t73, t28 * t109 + t12 * t136 + t18 * t129 + t170 * t465 + t302 * t368 + t318 * t73 + t60 * t36 + t40 * t58 + t343, t28 * t111 + t12 * t137 - t19 * t129 - t170 * t305 + t3 * t302 - t319 * t73 - t60 * t35 + t40 * t59 + t344, t109 * t8 - t129 * t13 + t136 * t5 - t170 * t7 + t2 * t302 + t21 * t58 - t23 * t73 + t32 * t36 + t343, -t1 * t136 - t109 * t6 + t111 * t7 + t13 * t59 + t137 * t2 - t14 * t58 - t22 * t36 - t23 * t35 - t334, -t1 * t302 - t111 * t8 + t129 * t14 - t137 * t5 + t170 * t6 - t21 * t59 + t22 * t73 + t32 * t35 - t344, t1 * t22 + t14 * t6 + t5 * t32 + t21 * t8 + t2 * t23 + t13 * t7 - g(1) * (-pkin(3) * t164 - pkin(4) * t142 - pkin(5) * t76 + pkin(9) * t163 + pkin(10) * t353 - qJ(6) * t75 + t317) - g(2) * (-pkin(3) * t165 + pkin(4) * t146 + pkin(5) * t80 - pkin(9) * t166 + pkin(10) * t145 + qJ(6) * t79 + t352); 0, 0, 0, -t256 * t382, t400 * t415, -t260 * t336 + t370, t256 * t336 + t369, t309, pkin(1) * t256 * t415 - pkin(8) * t370 - g(1) * t215 - g(2) * t479 + qJD(1) * t269 - t371 * t450 + t293 - t384, pkin(1) * t382 + (-pkin(8) * t378 + t239) * t358 + g(1) * t216 - g(2) * t214 + g(3) * t414 + t239 * qJD(2) - t381 (t103 - t123) * t201 - (t102 - t124) * t295 + (t154 * t430 - t155 * t431) * pkin(2), -pkin(2) * t384 - g(1) * t286 - g(2) * t345 + t102 * t123 - t103 * t124 - t211 * t349 + t379 * t52 + t380 * t51 (-qJD(4) * t201 + t309) * t255 ^ 2 + ((qJD(4) * t315 + t155) * t255 - t475 * t277) * t259, -t171 * t471 - t255 * t74 + t259 * t263 + t277 * t470, t265 * t255 + t424 + t483, t271 + t421, -t475 * t201, -t123 * t171 - t53 * t201 + t248 * t74 + t259 * t464 - t265 * t418 - t355 * t475 - t416 * t469 + t470 * t92, t123 * t277 + t54 * t201 + t248 * t263 - t255 * t464 + t266 * t416 + t404 * t475 + t418 * t469 + t471 * t92, -t111 * t480 - t35 * t409, t287 + t466, t111 * t423 - t170 * t329 + t359 + t434, t437 - t330 * t170 + (-t109 * t475 + t306) * t255, t170 * t255 * t475 - t259 * t73, t73 * t420 - t55 * t109 - t40 * t139 + (t486 + (-qJD(5) * t218 + t56) * t254) * t170 + (t40 * t254 * qJD(4) + t368 + (qJD(4) * t109 + t306) * t247) * t259 + (t40 * t393 + t12 * t254 + t18 * t295 + t247 * t36 + (t170 * t419 + t18) * qJD(4)) * t255 + t300, -t402 * t73 - t55 * t111 - t40 * t140 + t477 * t170 + (t247 * t375 + t3 + (t111 * t247 + t258 * t40) * qJD(4)) * t259 + (-t40 * t394 + t12 * t258 - t19 * t295 - t247 * t35 + (t170 * t417 - t19) * qJD(4)) * t255 + t301, -t176 * t73 + t194 * t36 + t2 * t259 + t330 * t21 - t436 * t170 + t435 * t109 + (-t13 * t475 + t21 * t393 + t254 * t5) * t255 + t300, -t13 * t140 + t139 * t14 - t175 * t36 - t176 * t35 + t436 * t111 - t446 * t109 + t322 * t395 + (-qJD(5) * t321 - t1 * t254 + t2 * t258 - t468) * t255, -t1 * t259 + t175 * t73 + t194 * t35 + (t140 - t376) * t21 + t446 * t170 - t435 * t111 + (t14 * t475 + t21 * t394 - t258 * t5) * t255 - t301, t1 * t175 + t5 * t194 + t2 * t176 - g(1) * (t84 * pkin(5) - t165 * pkin(9) + t83 * qJ(6) + t166 * t313 + t286) - g(2) * (pkin(5) * t82 + pkin(9) * t164 + qJ(6) * t81 + t163 * t313 + t345) - g(3) * (pkin(2) * t412 + pkin(5) * t153 + qJ(6) * t152 - t203 * t313 + t458) + t435 * t21 + t446 * t14 + t436 * t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t201 ^ 2 - t295 ^ 2, t102 * t201 + t103 * t295 + (-t328 - t455) * t253 + t331 + t386, 0, 0, 0, 0, 0, t271 - t421, t424 - t483 + (-t385 + t268) * t255, 0, 0, 0, 0, 0, t264 (t111 * t295 - t439) * t255 + t480 * t170 + t359, t264, t287 - t466, -t140 * t170 - t438 + (-t111 * t475 - t375) * t255 + t434, -g(1) * t413 - t13 * t139 - t14 * t140 + (qJD(4) * t321 - t5) * t259 + (t21 * t475 + t273) * t255 + t331; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t277 * t171, -t171 ^ 2 + t277 ^ 2, t171 * t295 + t276, -t277 * t295 - t354, t265, t277 * t92 + t475 * t54 + t297 - t357, t92 * t171 + t475 * t53 - t296 + t303, t111 * t351 - t441 (-t35 - t429) * t258 + (-t36 - t427) * t254, t111 * t277 + t170 * t351 + t440, -t109 * t277 - t254 * t462 + t439, t170 * t277, -pkin(4) * t36 - t54 * t109 + t18 * t277 + (t53 * t170 + t304) * t254 + (-t12 + (-t96 - t445) * t170 + t297) * t258, pkin(4) * t35 + t448 * t170 - t19 * t277 - t54 * t111 + t304 * t258 + (t12 + t275) * t254, t433 * t109 - t13 * t277 + t170 * t30 + t254 * t467 + t274 * t258 - t308 * t36, t109 * t29 - t111 * t30 + (t1 + t170 * t13 + (qJD(5) * t111 - t36) * pkin(10)) * t258 + (t2 - t443 + (qJD(5) * t109 - t35) * pkin(10)) * t254 + t296, -t433 * t111 + t14 * t277 - t170 * t29 + t274 * t254 - t258 * t467 - t308 * t35, -t13 * t30 - t14 * t29 + t433 * t21 + (t273 + t296) * pkin(10) + (-t5 + t297) * t308; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t428, -t109 ^ 2 + t463, t20, -t36 + t427, t73, -t111 * t40 + t282 + t442, t109 * t40 + t170 * t18 - t272, -t109 * t62 - t270 + t442 + 0.2e1 * t461, pkin(5) * t35 - qJ(6) * t36 + (t14 - t19) * t111 + (t13 - t406) * t109, 0.2e1 * t444 - t109 * t21 + t111 * t62 + (0.2e1 * qJD(6) - t18) * t170 + t272, t1 * qJ(6) - t2 * pkin(5) - t21 * t62 - t13 * t19 - g(1) * (-pkin(5) * t79 + qJ(6) * t80) - g(2) * (-pkin(5) * t75 + qJ(6) * t76) - g(3) * t325 + t406 * t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t428 - t73, t20, -t462 - t463, t270 - t443 - t461;];
tau_reg  = t4;
