% Calculate vector of inverse dynamics joint torques for
% S6RRPRRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d5,theta3]';
% MDP [30x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRPRRP6_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 12:15
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRPRRP6_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(30,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRRP6_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRRP6_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRRP6_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRRP6_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRRP6_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [30 1]), ...
  'S6RRPRRP6_invdynJ_fixb_mdp_slag_vp: MDP has to be [30x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 12:14:41
% EndTime: 2019-03-09 12:15:06
% DurationCPUTime: 19.68s
% Computational Cost: add. (15467->779), mult. (43313->1004), div. (0->0), fcn. (35643->12), ass. (0->333)
t739 = sin(pkin(6));
t746 = cos(qJ(2));
t934 = cos(pkin(11));
t850 = t746 * t934;
t826 = qJD(1) * t850;
t711 = t739 * t826;
t742 = sin(qJ(2));
t933 = sin(pkin(11));
t852 = t742 * t933;
t830 = t739 * t852;
t798 = qJD(1) * t830;
t781 = t798 - t711;
t963 = qJD(4) + t781;
t935 = cos(pkin(6));
t851 = t746 * t935;
t729 = pkin(1) * t851;
t725 = qJD(1) * t729;
t937 = pkin(8) + qJ(3);
t860 = t937 * t742;
t834 = t739 * t860;
t673 = -qJD(1) * t834 + t725;
t853 = t742 * t935;
t728 = pkin(1) * t853;
t910 = t739 * t746;
t674 = (t910 * t937 + t728) * qJD(1);
t848 = t934 * t674;
t609 = t673 * t933 + t848;
t741 = sin(qJ(4));
t745 = cos(qJ(4));
t973 = t609 - t963 * (pkin(4) * t741 - pkin(10) * t745);
t957 = qJD(4) * t963;
t964 = t781 * t963 + t957;
t972 = t964 * t745;
t744 = cos(qJ(5));
t971 = t973 * t744;
t736 = t739 ^ 2;
t970 = 0.2e1 * pkin(1) * t736;
t778 = t742 * t934 + t746 * t933;
t771 = qJD(1) * t778;
t687 = t739 * t771;
t847 = t935 * qJD(1);
t802 = t847 + qJD(2);
t657 = t741 * t687 - t745 * t802;
t641 = -qJD(2) * t798 + (qJD(2) * t826 + qJDD(1) * t778) * t739;
t839 = t935 * qJDD(1);
t797 = t839 + qJDD(2);
t763 = t745 * t641 + t797 * t741;
t749 = -qJD(4) * t657 + t763;
t969 = qJD(5) * t963 + t749;
t740 = sin(qJ(5));
t903 = t744 * t745;
t626 = t687 * t740 - t781 * t903;
t883 = qJD(5) * t740;
t816 = t741 * t883 + t626;
t884 = qJD(4) * t745;
t863 = t744 * t884;
t968 = t816 - t863;
t743 = sin(qJ(1));
t747 = cos(qJ(1));
t849 = t747 * t935;
t967 = -t743 * t742 + t746 * t849;
t770 = qJD(2) * t778;
t819 = qJDD(1) * t852;
t829 = t739 * t850;
t709 = qJDD(1) * t829;
t872 = qJDD(4) - t709;
t751 = t872 + (qJD(1) * t770 + t819) * t739;
t835 = pkin(1) * qJD(2) * t935;
t799 = qJD(1) * t835;
t831 = pkin(1) * t839;
t779 = -t742 * t799 + t746 * t831;
t854 = qJD(2) * t937;
t886 = qJD(3) * t742;
t583 = t797 * pkin(2) + (-qJDD(1) * t860 + (-t746 * t854 - t886) * qJD(1)) * t739 + t779;
t780 = qJD(3) * t746 - t742 * t854;
t875 = qJDD(1) * t746;
t856 = t739 * t875;
t868 = pkin(8) * t856 + t742 * t831 + t746 * t799;
t601 = (qJ(3) * t875 + qJD(1) * t780) * t739 + t868;
t538 = t933 * t583 + t934 * t601;
t533 = pkin(9) * t797 + t538;
t754 = (-qJD(2) * t771 - t819) * t739;
t640 = t709 + t754;
t735 = pkin(2) * t746 + pkin(1);
t815 = t735 * qJDD(1);
t877 = qJD(1) * qJD(2);
t859 = t742 * t877;
t833 = t739 * t859;
t873 = pkin(2) * t833 + qJDD(3);
t966 = t739 * t815 - t873;
t554 = -pkin(3) * t640 - pkin(9) * t641 - t966;
t774 = pkin(2) * t935 - t834;
t660 = qJD(2) * pkin(2) + qJD(1) * t774 + t725;
t589 = t933 * t660 + t848;
t579 = pkin(9) * t802 + t589;
t827 = t735 * t739;
t697 = -qJD(1) * t827 + qJD(3);
t606 = pkin(3) * t781 - pkin(9) * t687 + t697;
t885 = qJD(4) * t741;
t836 = t741 * t533 - t745 * t554 + t579 * t884 + t606 * t885;
t498 = -pkin(4) * t751 + t836;
t666 = t933 * t674;
t610 = t673 * t934 - t666;
t912 = t739 * t742;
t865 = qJD(1) * t912;
t838 = pkin(2) * t865;
t620 = pkin(3) * t687 + pkin(9) * t781 + t838;
t895 = t745 * t610 + t741 * t620;
t542 = pkin(10) * t687 + t895;
t800 = t745 * pkin(4) + t741 * pkin(10) + pkin(3);
t867 = t934 * pkin(2);
t704 = -t867 - t800;
t882 = qJD(5) * t744;
t965 = t744 * t542 - t704 * t882 + t740 * t973;
t656 = qJD(5) + t657;
t813 = t935 * t933;
t814 = t935 * t934;
t692 = t742 * t814 + t746 * t813;
t705 = t852 - t850;
t650 = t692 * t747 - t705 * t743;
t909 = t739 * t747;
t628 = t650 * t745 - t741 * t909;
t691 = -t742 * t813 + t746 * t814;
t649 = t747 * t691 - t743 * t778;
t561 = t628 * t740 + t649 * t744;
t562 = t628 * t744 - t649 * t740;
t764 = -t745 * t687 - t741 * t802;
t962 = qJD(4) * t764 - t741 * t641 + t745 * t797;
t866 = t933 * pkin(2);
t733 = t866 + pkin(9);
t917 = t733 * t740;
t855 = pkin(5) + t917;
t891 = t740 * t704 + t733 * t903;
t920 = t781 * t741;
t902 = pkin(5) * t920 - qJD(5) * t891 + t542 * t740 + t855 * t885 - t971;
t689 = t830 - t829;
t672 = t729 + t774;
t890 = pkin(8) * t910 + t728;
t681 = qJ(3) * t910 + t890;
t618 = t933 * t672 + t934 * t681;
t608 = pkin(9) * t935 + t618;
t690 = t778 * t739;
t947 = pkin(9) * t690;
t624 = pkin(3) * t689 - t827 - t947;
t896 = t745 * t608 + t741 * t624;
t547 = pkin(10) * t689 + t896;
t617 = t672 * t934 - t933 * t681;
t607 = -pkin(3) * t935 - t617;
t670 = t690 * t745 + t741 * t935;
t791 = -t690 * t741 + t745 * t935;
t553 = -pkin(4) * t791 - t670 * pkin(10) + t607;
t959 = t744 * t547 + t740 * t553;
t915 = t733 * t744;
t897 = qJ(6) * t920 + (-t733 * t883 - qJD(6)) * t745 + (qJ(6) - t915) * t885 - t965;
t844 = -t741 * t610 + t620 * t745;
t541 = -pkin(4) * t687 - t844;
t907 = t740 * t745;
t625 = -t744 * t687 - t781 * t907;
t810 = pkin(5) * t740 - qJ(6) * t744;
t794 = t733 + t810;
t811 = pkin(5) * t744 + qJ(6) * t740;
t894 = -pkin(5) * t625 + qJ(6) * t626 - t541 + (qJD(5) * t811 - qJD(6) * t744) * t741 + t794 * t884;
t958 = (qJDD(2) + 0.2e1 * t839) * t739;
t559 = qJDD(5) - t962;
t651 = t692 * t743 + t705 * t747;
t911 = t739 * t743;
t631 = -t651 * t741 - t745 * t911;
t842 = -t650 * t741 - t745 * t909;
t784 = g(1) * t631 - g(2) * t842 - g(3) * t791;
t652 = -t691 * t743 - t747 * t778;
t956 = g(1) * t652 + g(2) * t649 - g(3) * t689;
t539 = -t741 * t579 + t745 * t606;
t526 = -pkin(4) * t963 - t539;
t595 = -t740 * t764 - t744 * t963;
t597 = t740 * t963 - t744 * t764;
t507 = t595 * pkin(5) - t597 * qJ(6) + t526;
t946 = pkin(10) * t559;
t955 = t507 * t656 - t946;
t817 = t740 * t884 - t625;
t776 = t741 * t882 + t817;
t521 = -t740 * t751 - t744 * t969 - t764 * t883;
t929 = t521 * t740;
t954 = -t597 * t776 + t741 * t929;
t685 = t739 * t770;
t726 = t746 * t835;
t663 = t739 * t780 + t726;
t861 = t937 * t739;
t664 = -t739 * t886 + (-t746 * t861 - t728) * qJD(2);
t581 = t663 * t934 + t664 * t933;
t888 = qJD(2) * t739;
t686 = t705 * t888;
t887 = qJD(2) * t742;
t864 = t739 * t887;
t621 = pkin(2) * t864 + pkin(3) * t685 + pkin(9) * t686;
t788 = t745 * t581 - t608 * t885 + t741 * t621 + t624 * t884;
t513 = pkin(10) * t685 + t788;
t580 = t663 * t933 - t934 * t664;
t615 = qJD(4) * t670 - t686 * t741;
t616 = qJD(4) * t791 - t686 * t745;
t524 = t615 * pkin(4) - t616 * pkin(10) + t580;
t953 = -qJD(5) * t959 - t513 * t740 + t524 * t744;
t537 = t583 * t934 - t933 * t601;
t532 = -pkin(3) * t797 - t537;
t952 = t532 + t956;
t951 = t597 ^ 2;
t950 = t656 ^ 2;
t748 = qJD(1) ^ 2;
t948 = pkin(5) * t559;
t943 = g(1) * t743;
t938 = t739 * pkin(8);
t936 = pkin(10) * qJD(5);
t932 = qJ(6) * t559;
t540 = t745 * t579 + t741 * t606;
t527 = pkin(10) * t963 + t540;
t588 = t660 * t934 - t666;
t578 = -pkin(3) * t802 - t588;
t534 = t657 * pkin(4) + pkin(10) * t764 + t578;
t505 = t527 * t744 + t534 * t740;
t500 = qJ(6) * t656 + t505;
t931 = t500 * t656;
t930 = t505 * t656;
t928 = t521 * t745;
t522 = t740 * t969 - t744 * t751 - t764 * t882;
t927 = t522 * t745;
t926 = t595 * t656;
t925 = t597 * t595;
t924 = t597 * t656;
t921 = t764 * t687;
t919 = t781 * t745;
t918 = t687 * t657;
t916 = t733 * t741;
t914 = t733 * t745;
t913 = t736 * t748;
t908 = t740 * t559;
t906 = t741 * t744;
t904 = t744 * t559;
t582 = -pkin(4) * t764 + pkin(10) * t657;
t901 = t744 * t539 + t740 * t582;
t898 = t656 * t863 + t741 * t904;
t892 = -qJD(6) * t740 + t656 * t810 - t540;
t737 = t742 ^ 2;
t889 = -t746 ^ 2 + t737;
t881 = t578 * qJD(4);
t879 = qJD(4) - t711;
t504 = -t527 * t740 + t534 * t744;
t878 = qJD(6) - t504;
t876 = qJDD(1) * t742;
t871 = g(3) * t910;
t869 = t746 * t913;
t862 = t656 * t883;
t858 = t746 * t877;
t857 = t739 * t876;
t846 = t597 * t885 + t928;
t845 = -t741 * t608 + t624 * t745;
t695 = pkin(2) * t853 - t861;
t841 = -t695 * t743 + t747 * t735;
t840 = t656 * t744;
t789 = -t745 * t533 - t741 * t554 + t579 * t885 - t606 * t884;
t497 = pkin(10) * t751 - t789;
t503 = -pkin(4) * t962 - pkin(10) * t749 + t532;
t837 = t740 * t497 - t744 * t503 + t527 * t882 + t534 * t883;
t832 = t967 * pkin(2);
t825 = t739 * t748 * t935;
t632 = -t651 * t745 + t741 * t911;
t565 = t632 * t740 + t652 * t744;
t823 = -g(1) * t561 + g(2) * t565;
t566 = t632 * t744 - t652 * t740;
t822 = g(1) * t562 - g(2) * t566;
t821 = g(1) * t842 + g(2) * t631;
t820 = g(1) * t747 + g(2) * t743;
t818 = g(2) * t909 - g(3) * t935;
t622 = t670 * t740 - t689 * t744;
t623 = t670 * t744 + t689 * t740;
t812 = -pkin(5) * t622 + qJ(6) * t623;
t499 = -pkin(5) * t656 + t878;
t809 = t499 * t744 - t500 * t740;
t808 = t499 * t740 + t500 * t744;
t805 = -t547 * t740 + t553 * t744;
t804 = -t695 * t747 - t735 * t743;
t801 = 0.2e1 * t847 + qJD(2);
t796 = pkin(4) + t811;
t795 = -t741 * t581 - t608 * t884 + t621 * t745 - t624 * t885;
t546 = -pkin(4) * t689 - t845;
t793 = -t656 * t882 - t908;
t792 = t526 * t656 - t946;
t790 = -t858 - t876;
t489 = t744 * t497 + t740 * t503 - t527 * t883 + t534 * t882;
t787 = t744 * t513 + t740 * t524 - t547 * t883 + t553 * t882;
t567 = t649 * t907 - t650 * t744;
t569 = t651 * t744 + t652 * t907;
t638 = -t689 * t907 - t690 * t744;
t786 = g(1) * t569 + g(2) * t567 + g(3) * t638;
t568 = t649 * t903 + t650 * t740;
t570 = -t651 * t740 + t652 * t903;
t639 = -t689 * t903 + t690 * t740;
t785 = -g(1) * t570 - g(2) * t568 - g(3) * t639;
t783 = -g(1) * t632 - g(2) * t628 - g(3) * t670;
t782 = t797 * MDP(8);
t701 = -t747 * t742 - t743 * t851;
t514 = -pkin(4) * t685 - t795;
t773 = t701 * pkin(2);
t772 = -t522 * t906 + t595 * t968;
t762 = -t656 * t936 + t784;
t761 = g(1) * t565 + g(2) * t561 + g(3) * t622 - t837;
t491 = t522 * pkin(5) + t521 * qJ(6) - t597 * qJD(6) + t498;
t760 = -t491 + t762;
t487 = qJD(6) * t656 + t489 + t932;
t488 = qJDD(6) + t837 - t948;
t759 = qJD(5) * t809 + t487 * t744 + t488 * t740;
t758 = -t741 * t964 + t745 * t751;
t757 = -g(1) * t566 - g(2) * t562 - g(3) * t623 + t489;
t756 = t802 * t890;
t755 = t507 * t597 + qJDD(6) - t761;
t752 = -qJDD(4) + t640;
t734 = -t867 - pkin(3);
t702 = -t743 * t853 + t747 * t746;
t700 = -t742 * t849 - t743 * t746;
t680 = t794 * t741;
t662 = -t704 * t744 + t745 * t855;
t661 = -qJ(6) * t745 + t891;
t548 = pkin(5) * t597 + qJ(6) * t595;
t545 = -qJD(5) * t622 + t616 * t744 + t685 * t740;
t544 = qJD(5) * t623 + t616 * t740 - t685 * t744;
t518 = t546 - t812;
t516 = pkin(5) * t764 + t539 * t740 - t582 * t744;
t515 = -qJ(6) * t764 + t901;
t509 = pkin(5) * t791 - t805;
t508 = -qJ(6) * t791 + t959;
t506 = -t521 + t926;
t494 = pkin(5) * t544 - qJ(6) * t545 - qJD(6) * t623 + t514;
t493 = -pkin(5) * t615 - t953;
t492 = qJ(6) * t615 - qJD(6) * t791 + t787;
t1 = [(t489 * t791 + t498 * t623 - t505 * t615 + t514 * t597 - t546 * t521 + t526 * t545 - t559 * t959 - t656 * t787 + t823) * MDP(26) + (-t537 * t690 - t538 * t689 + t580 * t687 - t581 * t781 + t588 * t686 - t589 * t685 - t617 * t641 + t618 * t640 - t739 * t820) * MDP(11) + (t521 * t622 - t522 * t623 - t544 * t597 - t545 * t595) * MDP(21) + (-t521 * t623 + t545 * t597) * MDP(20) + t820 * MDP(3) + (-t487 * t622 + t488 * t623 - t492 * t595 + t493 * t597 + t499 * t545 - t500 * t544 - t508 * t522 - t509 * t521 - t821) * MDP(28) + (-t616 * t764 + t670 * t749) * MDP(13) + (t616 * t879 + t670 * t872 + t749 * t689 - t764 * t685 + (t670 * t819 + (t616 * t852 + t670 * t770) * qJD(1)) * t739) * MDP(15) + (t498 * t622 + t504 * t615 + t514 * t595 + t546 * t522 + t526 * t544 + t805 * t559 + t656 * t953 + t791 * t837 + t822) * MDP(25) + (t522 * t791 - t544 * t656 - t559 * t622 - t595 * t615) * MDP(23) + (t521 * t791 + t545 * t656 + t559 * t623 + t597 * t615) * MDP(22) + (-t559 * t791 + t615 * t656) * MDP(24) + (t488 * t791 + t491 * t622 - t493 * t656 + t494 * t595 - t499 * t615 + t507 * t544 - t509 * t559 + t518 * t522 + t822) * MDP(27) + (-t487 * t791 - t491 * t623 + t492 * t656 - t494 * t597 + t500 * t615 - t507 * t545 + t508 * t559 + t518 * t521 - t823) * MDP(29) + (t615 * t764 - t616 * t657 + t670 * t962 + t749 * t791) * MDP(14) + (-t615 * t879 + t791 * t872 + t962 * t689 - t657 * t685 + (t791 * t819 + (-t615 * t852 + t770 * t791) * qJD(1)) * t739) * MDP(16) + (g(1) * t628 - g(2) * t632 - t532 * t791 + t539 * t685 + t578 * t615 + t580 * t657 - t607 * t962 - t689 * t836 + t751 * t845 + t795 * t963) * MDP(18) + (t487 * t508 + t500 * t492 + t491 * t518 + t507 * t494 + t488 * t509 + t499 * t493 - g(1) * (-pkin(3) * t650 - pkin(4) * t628 - pkin(5) * t562 + pkin(9) * t649 + pkin(10) * t842 - qJ(6) * t561 + t804) - g(2) * (-pkin(3) * t651 + pkin(4) * t632 + pkin(5) * t566 - pkin(9) * t652 + pkin(10) * t631 + qJ(6) * t565 + t841)) * MDP(30) + (-(-pkin(8) * t864 + t726) * t802 - t890 * t797 - (-pkin(8) * t833 + t868) * t935 + g(1) * t967 - g(2) * t701 + t790 * t970) * MDP(10) + ((qJDD(1) * t737 + 0.2e1 * t742 * t858) * MDP(4) + 0.2e1 * (t742 * t875 - t877 * t889) * MDP(5)) * t736 + (-qJD(2) * t756 + (-pkin(8) * t912 + t729) * t797 + (t790 * t938 + t779) * t935 - g(1) * t700 - g(2) * t702 + (t875 - t859) * t970) * MDP(9) + (t538 * t618 + t589 * t581 + t537 * t617 - t588 * t580 - g(1) * t804 - g(2) * t841 + (pkin(2) * t697 * t887 + t735 * t966) * t739) * MDP(12) + (t746 * t801 * t888 + t742 * t958) * MDP(6) + (t746 * t958 - t801 * t864) * MDP(7) + t935 * t782 + (-g(2) * t747 + t943) * MDP(2) + (t872 * t689 + t879 * t685 + (t689 * t819 + (t685 * t852 + t689 * t770) * qJD(1)) * t739) * MDP(17) + (t532 * t670 - t540 * t685 + t578 * t616 - t580 * t764 + t607 * t749 + t689 * t789 + t752 * t896 - t788 * t963 + t821) * MDP(19) + qJDD(1) * MDP(1); ((t589 - t609) * t687 - (t588 - t610) * t781 + (t640 * t933 - t641 * t934) * pkin(2)) * MDP(11) + (t758 + t918) * MDP(16) + (t704 * t904 - t526 * t625 - t541 * t595 + (-t971 + (-qJD(5) * t704 + t542) * t740) * t656 + (t526 * t740 * qJD(4) + t837 + (qJD(4) * t595 + t793) * t733) * t745 + (t526 * t882 + t498 * t740 + t504 * t781 + t733 * t522 + (t656 * t917 + t504) * qJD(4)) * t741 + t785) * MDP(25) + (t487 * t661 + t491 * t680 + t488 * t662 - g(1) * (t570 * pkin(5) - t651 * pkin(9) + t569 * qJ(6) + t652 * t800 + t773) - g(2) * (pkin(5) * t568 + pkin(9) * t650 + qJ(6) * t567 + t649 * t800 + t832) - g(3) * (pkin(2) * t910 + pkin(5) * t639 + qJ(6) * t638 - t689 * t800 + t947) + t894 * t507 + t897 * t500 - t902 * t499) * MDP(30) + (t741 * t962 + t745 * t749 - (-t885 - t920) * t764 + (-t884 - t919) * t657) * MDP(14) + (-t539 * t687 + t578 * t920 - t609 * t657 - t734 * t962 + t741 * t881 - t745 * t952 - t751 * t916 - t844 * t963 - t914 * t957) * MDP(18) + (pkin(1) * t742 * t913 - pkin(8) * t857 - g(1) * t701 - g(2) * t967 + qJD(1) * t756 - t858 * t938 + t779 - t871) * MDP(9) + (-t521 * t906 - t597 * t968) * MDP(20) - t963 * t687 * MDP(17) + (-t891 * t559 - t541 * t597 - t526 * t626 + t965 * t656 + (t733 * t862 + t489 + (t526 * t744 + t597 * t733) * qJD(4)) * t745 + (-t526 * t883 + t498 * t744 - t505 * t781 - t733 * t521 + (t656 * t915 - t505) * qJD(4)) * t741 + t786) * MDP(26) + (-t487 * t745 + t521 * t680 + t559 * t661 + t897 * t656 - t894 * t597 + (t626 - t863) * t507 + (-t491 * t744 + t500 * t963 + t507 * t883) * t741 - t786) * MDP(29) + (t488 * t745 + t522 * t680 - t559 * t662 + t902 * t656 + t894 * t595 + t817 * t507 + (t491 * t740 - t499 * t963 + t507 * t882) * t741 + t785) * MDP(27) + (t656 * t741 * t963 - t559 * t745) * MDP(24) + (t927 - t817 * t656 + (-t595 * t963 + t793) * t741) * MDP(23) + (-t746 * t825 + t857) * MDP(6) + (-t499 * t626 + t500 * t625 - t521 * t662 - t522 * t661 - t902 * t597 - t897 * t595 + t809 * t884 + (-qJD(5) * t808 - t487 * t740 + t488 * t744 - t956) * t741) * MDP(28) + (t772 + t954) * MDP(21) + (t742 * t825 + t856) * MDP(7) + (pkin(1) * t869 + (-pkin(8) * t865 + t725) * t847 + g(1) * t702 - g(2) * t700 + g(3) * t912 + t725 * qJD(2) - t868) * MDP(10) + t889 * MDP(5) * t913 + (t540 * t687 + t578 * t919 + t609 * t764 + t734 * t749 + t741 * t952 + t745 * t881 + t752 * t914 + t895 * t963 + t916 * t957) * MDP(19) + ((-qJD(4) * t687 + t797) * t741 ^ 2 + ((qJD(4) * t802 + t641) * t741 - t963 * t764) * t745) * MDP(13) + (-pkin(2) * t871 - g(1) * t773 - g(2) * t832 + t537 * t867 + t538 * t866 + t588 * t609 - t589 * t610 - t697 * t838) * MDP(12) - t742 * MDP(4) * t869 + (t597 * t920 - t656 * t816 + t846 + t898) * MDP(22) + t782 + (t751 * t741 + t921 + t972) * MDP(15); (-t687 ^ 2 - t781 ^ 2) * MDP(11) + (t588 * t687 + t589 * t781 + (-t815 - t943) * t739 + t818 + t873) * MDP(12) + (t758 - t918) * MDP(18) + (t921 - t972 + (-t872 + t754) * t741) * MDP(19) + ((t597 * t781 - t904) * t741 + t968 * t656 + t846) * MDP(26) + (t772 - t954) * MDP(28) + (-t928 - t626 * t656 + (-t597 * t963 - t862) * t741 + t898) * MDP(29) + (-g(1) * t911 - t499 * t625 - t500 * t626 + (qJD(4) * t808 - t491) * t745 + (t507 * t963 + t759) * t741 + t818) * MDP(30) + (MDP(25) + MDP(27)) * (-t927 + t595 * t885 + (t595 * t781 - t908) * t741 - t776 * t656); -t657 ^ 2 * MDP(14) + (t657 * t781 + t763) * MDP(15) + t962 * MDP(16) + t751 * MDP(17) + (t540 * t963 + t784 - t836) * MDP(18) + (t539 * t963 + t578 * t657 - t783 + t789) * MDP(19) + (t597 * t840 - t929) * MDP(20) + ((-t521 - t926) * t744 + (-t522 - t924) * t740) * MDP(21) + (t656 * t840 + t908) * MDP(22) + (-t740 * t950 + t904) * MDP(23) + (-pkin(4) * t522 - t540 * t595 + (t539 * t656 + t792) * t740 + (-t498 + (-t582 - t936) * t656 + t784) * t744) * MDP(25) + (pkin(4) * t521 + t901 * t656 - t540 * t597 + t792 * t744 + (t498 - t762) * t740) * MDP(26) + (t516 * t656 - t522 * t796 + t892 * t595 + t740 * t955 + t760 * t744) * MDP(27) + (t515 * t595 - t516 * t597 + (t487 + t656 * t499 + (qJD(5) * t597 - t522) * pkin(10)) * t744 + (t488 - t931 + (qJD(5) * t595 - t521) * pkin(10)) * t740 + t783) * MDP(28) + (-t515 * t656 - t521 * t796 - t892 * t597 + t760 * t740 - t744 * t955) * MDP(29) + (-t499 * t516 - t500 * t515 + t892 * t507 + (t759 + t783) * pkin(10) + (-t491 + t784) * t796) * MDP(30) + (-t657 * MDP(13) + MDP(14) * t764 - MDP(16) * t963 + t578 * MDP(18) + t597 * MDP(22) - t595 * MDP(23) + t656 * MDP(24) + t504 * MDP(25) - t505 * MDP(26) - t499 * MDP(27) + t500 * MDP(29)) * t764; MDP(20) * t925 + (-t595 ^ 2 + t951) * MDP(21) + t506 * MDP(22) + (-t522 + t924) * MDP(23) + t559 * MDP(24) + (-t526 * t597 + t761 + t930) * MDP(25) + (t504 * t656 + t526 * t595 - t757) * MDP(26) + (-t548 * t595 - t755 + t930 + 0.2e1 * t948) * MDP(27) + (pkin(5) * t521 - qJ(6) * t522 + (t500 - t505) * t597 + (t499 - t878) * t595) * MDP(28) + (0.2e1 * t932 - t507 * t595 + t548 * t597 + (0.2e1 * qJD(6) - t504) * t656 + t757) * MDP(29) + (t487 * qJ(6) - t488 * pkin(5) - t507 * t548 - t499 * t505 - g(1) * (-pkin(5) * t565 + qJ(6) * t566) - g(2) * (-pkin(5) * t561 + qJ(6) * t562) - g(3) * t812 + t878 * t500) * MDP(30); (t925 - t559) * MDP(27) + t506 * MDP(28) + (-t950 - t951) * MDP(29) + (t755 - t931 - t948) * MDP(30);];
tau  = t1;
