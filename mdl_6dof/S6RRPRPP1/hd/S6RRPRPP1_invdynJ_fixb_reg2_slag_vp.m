% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RRPRPP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,theta3,theta5]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 09:48
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RRPRPP1_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPP1_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPP1_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPP1_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPP1_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRPP1_invdynJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 09:47:59
% EndTime: 2019-03-09 09:48:16
% DurationCPUTime: 10.29s
% Computational Cost: add. (13429->670), mult. (31615->806), div. (0->0), fcn. (23653->14), ass. (0->311)
t252 = sin(pkin(9));
t256 = sin(qJ(2));
t259 = cos(qJ(2));
t390 = cos(pkin(9));
t206 = t252 * t259 + t256 * t390;
t192 = t206 * qJD(1);
t255 = sin(qJ(4));
t258 = cos(qJ(4));
t157 = -t258 * qJD(2) + t192 * t255;
t159 = qJD(2) * t255 + t192 * t258;
t251 = sin(pkin(10));
t389 = cos(pkin(10));
t95 = t389 * t157 + t159 * t251;
t401 = t192 * t95;
t190 = t206 * qJD(2);
t332 = t390 * t259;
t348 = t256 * qJDD(1);
t305 = -qJDD(1) * t332 + t252 * t348;
t144 = qJD(1) * t190 + t305;
t139 = qJDD(4) + t144;
t224 = qJD(1) * t332;
t353 = qJD(1) * t256;
t188 = t252 * t353 - t224;
t178 = qJD(4) + t188;
t330 = t389 * t258;
t431 = -t251 * t255 + t330;
t205 = t251 * t258 + t389 * t255;
t187 = t205 * qJD(4);
t438 = t205 * t188 + t187;
t427 = -t139 * t431 + t178 * t438;
t448 = -t401 - t427;
t447 = -t427 + t401;
t352 = qJD(4) * t255;
t191 = qJD(4) * t330 - t251 * t352;
t437 = t431 * t188 + t191;
t350 = qJD(1) * qJD(2);
t336 = t256 * t350;
t271 = qJDD(1) * t206 - t252 * t336;
t265 = qJD(2) * t224 + t271;
t349 = qJD(2) * qJD(4);
t89 = -t255 * qJDD(2) + t192 * t352 + (-t265 - t349) * t258;
t264 = -t258 * qJDD(2) + t255 * t265;
t90 = qJD(4) * t159 + t264;
t49 = -t251 * t89 + t389 * t90;
t322 = -t205 * t49 - t437 * t95;
t290 = -t251 * t157 + t159 * t389;
t50 = -t251 * t90 - t389 * t89;
t442 = t290 * t438 - t50 * t431;
t446 = t322 - t442;
t445 = t322 + t442;
t422 = pkin(2) * t252;
t233 = pkin(8) + t422;
t248 = qJ(2) + pkin(9);
t242 = cos(t248);
t230 = g(3) * t242;
t240 = sin(t248);
t257 = sin(qJ(1));
t260 = cos(qJ(1));
t314 = g(1) * t260 + g(2) * t257;
t281 = t314 * t240 - t230;
t254 = -qJ(3) - pkin(7);
t334 = qJD(2) * t254;
t185 = -qJD(3) * t256 + t259 * t334;
t215 = t254 * t256;
t138 = qJDD(2) * pkin(2) + qJD(1) * t185 + qJDD(1) * t215;
t184 = qJD(3) * t259 + t256 * t334;
t216 = t254 * t259;
t147 = qJD(1) * t184 - qJDD(1) * t216;
t83 = t390 * t138 - t252 * t147;
t81 = -qJDD(2) * pkin(3) - t83;
t444 = -qJD(4) * t178 * t233 + t281 - t81;
t309 = t205 * t139 + t178 * t437;
t400 = t192 * t290;
t443 = t309 + t400;
t359 = qJ(5) + t233;
t199 = t359 * t258;
t329 = t359 * t255;
t134 = t199 * t389 - t251 * t329;
t247 = qJ(4) + pkin(10);
t239 = sin(t247);
t441 = t134 * t139 + t239 * t281;
t396 = t95 * t178;
t34 = t50 + t396;
t378 = t188 * t255;
t440 = t352 + t378;
t439 = t95 * t290;
t291 = -t252 * t256 + t332;
t194 = t291 * qJD(2);
t351 = qJD(4) * t258;
t338 = t206 * t351;
t294 = t194 * t255 + t338;
t411 = t290 ^ 2;
t326 = qJD(4) * t359;
t164 = qJD(5) * t258 - t255 * t326;
t284 = -qJD(5) * t255 - t258 * t326;
t118 = pkin(2) * t353 + pkin(3) * t192 + pkin(8) * t188;
t209 = qJD(1) * t216;
t195 = t252 * t209;
t208 = qJD(1) * t215;
t149 = t208 * t390 + t195;
t78 = t258 * t118 - t149 * t255;
t59 = qJ(5) * t188 * t258 + pkin(4) * t192 + t78;
t79 = t255 * t118 + t258 * t149;
t66 = qJ(5) * t378 + t79;
t394 = (-t284 + t59) * t389 + (t164 - t66) * t251;
t413 = t259 * pkin(2);
t238 = pkin(1) + t413;
t213 = -qJD(1) * t238 + qJD(3);
t107 = pkin(3) * t188 - pkin(8) * t192 + t213;
t405 = qJD(2) * pkin(2);
t198 = t208 + t405;
t333 = t390 * t209;
t143 = t252 * t198 - t333;
t130 = qJD(2) * pkin(8) + t143;
t346 = pkin(2) * t336 + qJDD(3);
t347 = t259 * qJDD(1);
t386 = qJDD(1) * pkin(1);
t72 = -pkin(2) * t347 + t144 * pkin(3) - pkin(8) * t265 + t346 - t386;
t84 = t252 * t138 + t390 * t147;
t82 = qJDD(2) * pkin(8) + t84;
t22 = t107 * t351 - t130 * t352 + t255 * t72 + t258 * t82;
t69 = t258 * t107 - t130 * t255;
t436 = -t178 * t69 + t22;
t325 = t178 * t255;
t434 = t159 * t325;
t148 = t208 * t252 - t333;
t319 = pkin(4) * t440 - t148;
t141 = -pkin(3) * t291 - pkin(8) * t206 - t238;
t155 = t252 * t215 - t216 * t390;
t150 = t258 * t155;
t92 = t255 * t141 + t150;
t432 = g(1) * t257 - g(2) * t260;
t430 = t192 * qJD(2);
t429 = pkin(5) * t49 - qJ(6) * t50 - qJD(6) * t290;
t416 = g(3) * t240;
t282 = t242 * t314 + t416;
t142 = t198 * t390 + t195;
t129 = -qJD(2) * pkin(3) - t142;
t93 = t157 * pkin(4) + qJD(5) + t129;
t43 = t95 * pkin(5) - qJ(6) * t290 + t93;
t426 = -t43 * t290 - qJDD(6);
t425 = t178 ^ 2;
t424 = t192 ^ 2;
t421 = pkin(2) * t256;
t420 = pkin(5) * t139;
t415 = g(3) * t259;
t414 = t258 * pkin(4);
t70 = t107 * t255 + t130 * t258;
t61 = -qJ(5) * t157 + t70;
t57 = t389 * t61;
t60 = -qJ(5) * t159 + t69;
t28 = t251 * t60 + t57;
t412 = t28 * t290;
t409 = t95 ^ 2;
t68 = t258 * t72;
t23 = -qJD(4) * t70 - t255 * t82 + t68;
t13 = pkin(4) * t139 + qJ(5) * t89 - qJD(5) * t159 + t23;
t16 = -qJ(5) * t90 - qJD(5) * t157 + t22;
t3 = t389 * t13 - t251 * t16;
t4 = t251 * t13 + t389 * t16;
t303 = -qJ(5) * t194 - qJD(5) * t206;
t117 = t184 * t390 + t252 * t185;
t345 = t256 * t405;
t119 = pkin(3) * t190 - pkin(8) * t194 + t345;
t328 = -t117 * t255 + t258 * t119;
t31 = pkin(4) * t190 + t303 * t258 + (-t150 + (qJ(5) * t206 - t141) * t255) * qJD(4) + t328;
t341 = t258 * t117 + t255 * t119 + t141 * t351;
t37 = -qJ(5) * t338 + (-qJD(4) * t155 + t303) * t255 + t341;
t9 = t251 * t31 + t389 * t37;
t54 = pkin(4) * t178 + t60;
t25 = t251 * t54 + t57;
t33 = t251 * t59 + t389 * t66;
t374 = t206 * t258;
t91 = t258 * t141 - t155 * t255;
t65 = -pkin(4) * t291 - qJ(5) * t374 + t91;
t375 = t206 * t255;
t73 = -qJ(5) * t375 + t92;
t41 = t251 * t65 + t389 * t73;
t407 = pkin(5) * t438 - qJ(6) * t437 - qJD(6) * t205 + t319;
t403 = t178 * t70;
t402 = t178 * t290;
t399 = t251 * t61;
t398 = t255 * t89;
t397 = t258 * t90;
t395 = t192 * pkin(5) + t394;
t102 = t164 * t389 + t251 * t284;
t26 = qJ(6) * t192 + t33;
t393 = t102 - t26;
t392 = t102 - t33;
t391 = -t157 * t351 - t255 * t90;
t388 = pkin(7) * qJDD(1);
t384 = t139 * t255;
t383 = t157 * t188;
t382 = t157 * t192;
t381 = t159 * t157;
t380 = t159 * t192;
t379 = t178 * t192;
t377 = t192 * t188;
t373 = t239 * t257;
t372 = t240 * t257;
t371 = t240 * t260;
t241 = cos(t247);
t370 = t241 * t260;
t237 = pkin(3) + t414;
t211 = t242 * t237;
t369 = t242 * t260;
t366 = t254 * t260;
t365 = t255 * t257;
t364 = t255 * t260;
t363 = t257 * t241;
t362 = t257 * t258;
t126 = t258 * t139;
t361 = t258 * t260;
t360 = t260 * t239;
t29 = t389 * t60 - t399;
t358 = qJD(6) - t29;
t249 = t256 ^ 2;
t250 = t259 ^ 2;
t355 = t249 - t250;
t354 = t249 + t250;
t343 = t242 * t364;
t262 = qJD(1) ^ 2;
t342 = t256 * t262 * t259;
t340 = t390 * pkin(2);
t116 = t184 * t252 - t390 * t185;
t154 = -t390 * t215 - t216 * t252;
t219 = t260 * t238;
t327 = -t254 * t257 + t219;
t324 = t178 * t258;
t321 = t259 * t336;
t320 = -g(1) * t372 + g(2) * t371;
t235 = -t340 - pkin(3);
t317 = pkin(3) * t242 + pkin(8) * t240;
t165 = t242 * t373 + t370;
t167 = t242 * t360 - t363;
t316 = g(1) * t165 - g(2) * t167;
t166 = t242 * t363 - t360;
t168 = t241 * t369 + t373;
t315 = g(1) * t166 - g(2) * t168;
t312 = -t409 - t411;
t311 = -t409 + t411;
t115 = pkin(4) * t375 + t154;
t122 = t205 * t206;
t74 = -t191 * t206 - t194 * t205;
t308 = t122 * t49 - t74 * t95;
t253 = -qJ(5) - pkin(8);
t307 = -t242 * t253 - t421;
t306 = pkin(5) * t241 + qJ(6) * t239;
t304 = -t255 * t70 - t258 * t69;
t80 = pkin(4) * t294 + t116;
t301 = -t178 * t440 + t126;
t300 = t49 + t402;
t299 = -t49 + t402;
t298 = -t240 * t253 + t211 + t413;
t295 = -0.2e1 * pkin(1) * t350 - pkin(7) * qJDD(2);
t179 = t242 * t365 + t361;
t8 = -t251 * t37 + t31 * t389;
t24 = t389 * t54 - t399;
t40 = -t251 * t73 + t389 * t65;
t293 = t194 * t258 - t206 * t352;
t292 = -t431 * t49 + t438 * t95;
t214 = t235 - t414;
t289 = t129 * t178 - t139 * t233;
t287 = g(1) * t167 + g(2) * t165 + t239 * t416 + t3;
t177 = -qJDD(1) * t238 + t346;
t133 = t199 * t251 + t329 * t389;
t285 = -t133 * t139 - t230 * t241 + (g(1) * t370 + g(2) * t363) * t240;
t48 = pkin(4) * t90 + qJDD(5) + t81;
t283 = -t50 + t396;
t278 = pkin(4) * t365 + t237 * t369 - t253 * t371 + t327;
t261 = qJD(2) ^ 2;
t277 = -pkin(7) * t261 + 0.2e1 * t386 + t432;
t276 = pkin(1) * t262 + t314 - t388;
t123 = t431 * t206;
t75 = t206 * t187 - t194 * t431;
t275 = t122 * t50 + t123 * t49 - t290 * t74 - t75 * t95;
t274 = g(1) * t168 + g(2) * t166 + t241 * t416 - t4;
t273 = t28 * t178 + t287;
t272 = t122 * t139 - t178 * t74 + t190 * t95 - t291 * t49;
t270 = -t366 + t253 * t372 + pkin(4) * t364 + (-t238 - t211) * t257;
t268 = -t102 * t95 + t133 * t50 - t134 * t49 - t282;
t267 = t48 - t281;
t234 = -pkin(4) * t389 - pkin(5);
t229 = pkin(4) * t251 + qJ(6);
t227 = pkin(4) * t362;
t186 = t188 ^ 2;
t182 = t242 * t361 + t365;
t181 = -t343 + t362;
t180 = -t242 * t362 + t364;
t131 = t139 * qJ(6);
t120 = -pkin(5) * t431 - t205 * qJ(6) + t214;
t76 = -t139 * t291 + t178 * t190;
t55 = pkin(5) * t122 - qJ(6) * t123 + t115;
t52 = pkin(4) * t159 + pkin(5) * t290 + qJ(6) * t95;
t47 = -qJD(4) * t92 + t328;
t46 = -t155 * t352 + t341;
t39 = pkin(5) * t291 - t40;
t38 = -qJ(6) * t291 + t41;
t36 = t309 - t400;
t21 = qJ(6) * t178 + t25;
t20 = -t178 * pkin(5) + qJD(6) - t24;
t19 = -pkin(5) * t74 + qJ(6) * t75 - qJD(6) * t123 + t80;
t18 = t123 * t50 - t290 * t75;
t17 = t205 * t50 + t290 * t437;
t10 = t123 * t139 - t178 * t75 + t190 * t290 - t291 * t50;
t7 = -t190 * pkin(5) - t8;
t6 = qJ(6) * t190 - qJD(6) * t291 + t9;
t5 = t48 + t429;
t2 = qJDD(6) - t3 - t420;
t1 = qJD(6) * t178 + t131 + t4;
t11 = [0, 0, 0, 0, 0, qJDD(1), t432, t314, 0, 0, qJDD(1) * t249 + 0.2e1 * t321, 0.2e1 * t256 * t347 - 0.2e1 * t350 * t355, qJDD(2) * t256 + t259 * t261, qJDD(1) * t250 - 0.2e1 * t321, qJDD(2) * t259 - t256 * t261, 0, t256 * t295 + t259 * t277, -t256 * t277 + t259 * t295, 0.2e1 * t354 * t388 - t314, -g(1) * (-pkin(1) * t257 + pkin(7) * t260) - g(2) * (pkin(1) * t260 + pkin(7) * t257) + (pkin(7) ^ 2 * t354 + pkin(1) ^ 2) * qJDD(1), t192 * t194 + t206 * t265, -t206 * t144 - t194 * t188 - t192 * t190 + t265 * t291, qJD(2) * t194 + qJDD(2) * t206, -t144 * t291 + t188 * t190, -qJD(2) * t190 + qJDD(2) * t291, 0, -qJDD(2) * t154 - t144 * t238 - t177 * t291 + t190 * t213 + t432 * t242 + (t188 * t421 - t116) * qJD(2), -t117 * qJD(2) - t155 * qJDD(2) + t177 * t206 + t192 * t345 + t213 * t194 - t238 * t265 + t320, t116 * t192 - t117 * t188 - t142 * t194 - t143 * t190 - t155 * t144 + t154 * t265 - t83 * t206 + t291 * t84 - t314, t84 * t155 + t143 * t117 - t83 * t154 - t142 * t116 - t177 * t238 + t213 * t345 - g(1) * (-t238 * t257 - t366) - g(2) * t327, t159 * t293 - t374 * t89 (-t157 * t258 - t159 * t255) * t194 + (t398 - t397 + (t157 * t255 - t159 * t258) * qJD(4)) * t206, t126 * t206 + t159 * t190 + t178 * t293 + t291 * t89, t157 * t294 + t375 * t90, -t139 * t375 - t157 * t190 - t178 * t294 + t291 * t90, t76, -g(1) * t180 - g(2) * t182 + t116 * t157 + t129 * t294 + t139 * t91 + t154 * t90 + t178 * t47 + t190 * t69 - t23 * t291 + t375 * t81, -g(1) * t179 - g(2) * t181 + t116 * t159 + t129 * t293 - t139 * t92 - t154 * t89 - t178 * t46 - t190 * t70 + t22 * t291 + t374 * t81, -t157 * t46 - t159 * t47 + t89 * t91 - t90 * t92 + t304 * t194 + (-t22 * t255 - t23 * t258 + (t255 * t69 - t258 * t70) * qJD(4)) * t206 - t320, -g(2) * t219 + t129 * t116 + t81 * t154 + t22 * t92 + t23 * t91 + t70 * t46 + t69 * t47 + (g(1) * t254 - g(2) * t317) * t260 + (-g(1) * (-t238 - t317) + g(2) * t254) * t257, t18, -t275, t10, t308, -t272, t76, t115 * t49 + t122 * t48 + t139 * t40 + t178 * t8 + t190 * t24 - t291 * t3 - t74 * t93 + t80 * t95 + t315, t115 * t50 + t123 * t48 - t139 * t41 - t178 * t9 - t190 * t25 + t290 * t80 + t291 * t4 - t75 * t93 - t316, -t122 * t4 - t123 * t3 + t24 * t75 + t25 * t74 - t290 * t8 - t40 * t50 - t41 * t49 - t9 * t95 - t320, -g(1) * t270 - g(2) * t278 + t48 * t115 + t24 * t8 + t25 * t9 + t3 * t40 + t4 * t41 + t93 * t80, t18, t10, t275, t76, t272, t308, t122 * t5 - t139 * t39 - t178 * t7 + t19 * t95 - t190 * t20 + t2 * t291 - t43 * t74 + t49 * t55 + t315, -t1 * t122 + t123 * t2 - t20 * t75 + t21 * t74 + t290 * t7 - t38 * t49 + t39 * t50 - t6 * t95 - t320, -t1 * t291 - t123 * t5 + t139 * t38 + t178 * t6 - t19 * t290 + t190 * t21 + t43 * t75 - t50 * t55 + t316, t1 * t38 + t21 * t6 + t5 * t55 + t43 * t19 + t2 * t39 + t20 * t7 - g(1) * (-pkin(5) * t166 - qJ(6) * t165 + t270) - g(2) * (pkin(5) * t168 + qJ(6) * t167 + t278); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t342, t355 * t262, t348, t342, t347, qJDD(2), t256 * t276 - t415, g(3) * t256 + t259 * t276, 0, 0, t377, -t186 + t424 (t224 + t188) * qJD(2) + t271, -t377, -t305, qJDD(2), t148 * qJD(2) - t213 * t192 + (qJDD(2) * t390 - t188 * t353) * pkin(2) + t83 + t281, qJD(2) * t149 + t188 * t213 + (-qJDD(2) * t252 - t192 * t353) * pkin(2) + t282 - t84, -t144 * t422 - t265 * t340 - (-t143 + t148) * t192 + (t149 - t142) * t188, t142 * t148 - t143 * t149 + (t390 * t83 - t415 + t252 * t84 + (-qJD(1) * t213 + t314) * t256) * pkin(2), t159 * t324 - t398 (-t89 - t383) * t258 - t434 + t391, t178 * t324 - t380 + t384, t157 * t325 - t397, t301 + t382, -t379, -t148 * t157 - t178 * t78 - t192 * t69 + t235 * t90 + t289 * t255 + t258 * t444, -t148 * t159 + t178 * t79 + t192 * t70 - t235 * t89 - t255 * t444 + t289 * t258, t157 * t79 + t159 * t78 + (-t188 * t69 - t233 * t90 + t22 + (t159 * t233 - t69) * qJD(4)) * t258 + (-t188 * t70 - t233 * t89 - t23 + (t157 * t233 - t70) * qJD(4)) * t255 - t282, t81 * t235 - t70 * t79 - t69 * t78 - t129 * t148 - g(3) * (t317 + t413) + (qJD(4) * t304 + t22 * t258 - t23 * t255) * t233 + t314 * (pkin(3) * t240 - pkin(8) * t242 + t421) t17, t446, t36, t292, t447, -t379, -t178 * t394 - t192 * t24 + t214 * t49 + t319 * t95 - t431 * t48 + t438 * t93 + t285, -t178 * t392 + t192 * t25 + t205 * t48 + t214 * t50 + t290 * t319 + t437 * t93 - t441, -t205 * t3 - t24 * t437 - t25 * t438 + t290 * t394 + t33 * t95 + t4 * t431 + t268, -g(3) * t298 - t3 * t133 + t4 * t134 + t48 * t214 - t24 * t394 + t25 * t392 + t319 * t93 + t314 * (t237 * t240 - t307) t17, t36, -t446, -t379, -t447, t292, t120 * t49 - t178 * t395 + t192 * t20 + t407 * t95 + t43 * t438 - t431 * t5 + t285, t1 * t431 + t2 * t205 + t20 * t437 - t21 * t438 + t26 * t95 + t290 * t395 + t268, -t120 * t50 + t178 * t393 - t192 * t21 - t205 * t5 - t290 * t407 - t43 * t437 + t441, t1 * t134 + t5 * t120 + t2 * t133 - g(3) * (t242 * t306 + t298) + t407 * t43 + t393 * t21 + t395 * t20 + t314 * (-(-t237 - t306) * t240 - t307); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t305 + 0.2e1 * t430 (t224 - t188) * qJD(2) + t271, -t186 - t424, t142 * t192 + t143 * t188 + t177 - t432, 0, 0, 0, 0, 0, 0, t301 - t382, -t258 * t425 - t380 - t384 (t89 - t383) * t258 + t434 + t391, -t129 * t192 + (t23 + t403) * t258 + t436 * t255 - t432, 0, 0, 0, 0, 0, 0, t448, -t443, t445, -t192 * t93 + t205 * t4 - t24 * t438 + t25 * t437 + t3 * t431 - t432, 0, 0, 0, 0, 0, 0, t448, t445, t443, t1 * t205 - t192 * t43 - t2 * t431 + t20 * t438 + t21 * t437 - t432; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t381, -t157 ^ 2 + t159 ^ 2, t157 * t178 - t89, -t381, t159 * t178 - t192 * t351 - t255 * t349 - t264, t139, -t130 * t351 - g(1) * t181 + g(2) * t179 - t129 * t159 + t403 + t68 + (-qJD(4) * t107 + t416 - t82) * t255, g(1) * t182 - g(2) * t180 + t129 * t157 + t258 * t416 - t436, 0, 0, t439, t311, t34, -t439, t299, t139, -t93 * t290 + (t139 * t389 - t159 * t95) * pkin(4) + t273, t178 * t29 + t93 * t95 + (-t139 * t251 - t159 * t290) * pkin(4) + t274, t25 * t290 - t412 + (-t251 * t49 - t389 * t50) * pkin(4) + (-t24 + t29) * t95, -g(1) * t227 + t24 * t28 - t25 * t29 + (g(2) * t361 - t93 * t159 + t4 * t251 + t255 * t282 + t3 * t389) * pkin(4), t439, t34, -t311, t139, -t299, -t439, -t52 * t95 + (pkin(5) - t234) * t139 + t273 + t426, t21 * t290 - t229 * t49 + t234 * t50 - t412 + (t20 - t358) * t95, t139 * t229 - t43 * t95 + t52 * t290 + t131 + (0.2e1 * qJD(6) - t29) * t178 - t274, t1 * t229 + t2 * t234 - t43 * t52 - t20 * t28 - g(1) * (-pkin(4) * t343 - pkin(5) * t167 + qJ(6) * t168 + t227) - g(2) * (-pkin(4) * t179 - pkin(5) * t165 + qJ(6) * t166) + t358 * t21 - (-pkin(4) * t255 - pkin(5) * t239 + qJ(6) * t241) * t416; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t300, -t283, t312, t24 * t290 + t25 * t95 + t267, 0, 0, 0, 0, 0, 0, t300, t312, t283, -t20 * t290 + t21 * t95 + t267 + t429; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJDD(4) - t305 - t430 + t439, t34, -t425 - t411, -t178 * t21 - t287 - t420 - t426;];
tau_reg  = t11;
