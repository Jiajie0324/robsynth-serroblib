% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPRPP1
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d4,theta3,theta5]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 12:21
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPRPP1_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPP1_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPP1_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPP1_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPP1_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPRPP1_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 12:19:08
% EndTime: 2019-05-06 12:19:38
% DurationCPUTime: 17.18s
% Computational Cost: add. (51230->570), mult. (119399->757), div. (0->0), fcn. (86877->10), ass. (0->358)
t328 = sin(qJ(2));
t330 = cos(qJ(2));
t323 = sin(pkin(9));
t325 = cos(pkin(9));
t387 = qJD(1) * t330;
t388 = qJD(1) * t328;
t299 = t323 * t387 + t325 * t388;
t327 = sin(qJ(4));
t329 = cos(qJ(4));
t281 = -t329 * qJD(2) + t299 * t327;
t313 = t328 * qJDD(1);
t376 = qJD(1) * qJD(2);
t368 = t330 * t376;
t304 = t313 + t368;
t314 = t330 * qJDD(1);
t369 = t328 * t376;
t305 = t314 - t369;
t276 = t304 * t325 + t305 * t323;
t351 = -t327 * qJDD(2) - t329 * t276;
t234 = -qJD(4) * t281 - t351;
t322 = sin(pkin(10));
t324 = cos(pkin(10));
t282 = qJD(2) * t327 + t299 * t329;
t352 = t329 * qJDD(2) - t327 * t276;
t341 = -qJD(4) * t282 + t352;
t335 = t324 * t234 + t322 * t341;
t248 = t324 * t281 + t282 * t322;
t297 = t323 * t388 - t325 * t387;
t294 = qJD(4) + t297;
t405 = t248 * t294;
t451 = t335 - t405;
t361 = t304 * t323 - t325 * t305;
t273 = qJDD(4) + t361;
t250 = -t281 * t322 + t282 * t324;
t404 = t250 * t248;
t183 = -t404 - t273;
t411 = t183 * t322;
t246 = t250 ^ 2;
t438 = t294 ^ 2;
t454 = -t246 - t438;
t120 = -t324 * t454 - t411;
t410 = t183 * t324;
t122 = t322 * t454 - t410;
t90 = t120 * t327 - t122 * t329;
t69 = t323 * t90 - t325 * t451;
t71 = t323 * t451 + t325 * t90;
t77 = t120 * t329 + t122 * t327;
t543 = -pkin(1) * t77 + pkin(7) * (t328 * t69 - t330 * t71);
t542 = qJ(3) * t69;
t541 = -pkin(2) * t69 + pkin(3) * t451 - pkin(8) * t90;
t540 = -pkin(2) * t77 - qJ(3) * t71;
t227 = t294 * t250;
t364 = t234 * t322 - t324 * t341;
t155 = -t364 + t227;
t440 = t248 ^ 2;
t222 = t440 - t438;
t136 = -t222 * t322 + t410;
t140 = -t222 * t324 - t411;
t95 = t136 * t327 - t140 * t329;
t538 = t328 * (t155 * t323 + t325 * t95) + t330 * (-t155 * t325 + t323 * t95);
t535 = pkin(3) * t77;
t534 = pkin(8) * t77;
t453 = t246 - t440;
t456 = t227 + t364;
t104 = -t456 * t322 + t324 * t451;
t414 = t451 * t322;
t106 = t456 * t324 + t414;
t58 = t104 * t327 + t106 * t329;
t530 = t328 * (-t323 * t453 + t325 * t58) + t330 * (t323 * t58 + t325 * t453);
t527 = pkin(4) * t120;
t165 = -t440 - t246;
t449 = t405 + t335;
t479 = t155 * t324 + t449 * t322;
t480 = t155 * t322 - t324 * t449;
t495 = -t327 * t480 + t329 * t479;
t510 = -t165 * t325 + t323 * t495;
t526 = qJ(3) * t510;
t525 = qJ(5) * t120;
t524 = qJ(5) * t122;
t523 = pkin(2) * t510 - pkin(3) * t165 + pkin(8) * t495;
t494 = t327 * t479 + t329 * t480;
t509 = t165 * t323 + t325 * t495;
t522 = -pkin(2) * t494 + qJ(3) * t509;
t521 = t136 * t329 + t140 * t327;
t520 = pkin(7) * (-t328 * t510 + t330 * t509) - pkin(1) * t494;
t517 = pkin(3) * t494;
t516 = pkin(8) * t494;
t450 = -t404 + t273;
t409 = t450 * t322;
t448 = -t438 - t440;
t459 = t324 * t448 - t409;
t176 = t324 * t450;
t460 = t322 * t448 + t176;
t478 = -t327 * t460 + t329 * t459;
t497 = t323 * t478 - t325 * t456;
t515 = qJ(3) * t497;
t514 = pkin(2) * t497 - pkin(3) * t456 + pkin(8) * t478;
t477 = t327 * t459 + t329 * t460;
t496 = t323 * t456 + t325 * t478;
t512 = -pkin(2) * t477 + qJ(3) * t496;
t511 = -t104 * t329 + t106 * t327;
t508 = pkin(7) * (-t328 * t497 + t330 * t496) - pkin(1) * t477;
t223 = -t246 + t438;
t481 = t324 * t223 + t409;
t482 = -t223 * t322 + t176;
t492 = -t327 * t481 + t329 * t482;
t507 = t328 * (t323 * t449 + t325 * t492) + t330 * (t323 * t492 - t325 * t449);
t504 = pkin(3) * t477;
t431 = pkin(4) * t480;
t503 = pkin(8) * t477;
t502 = qJ(5) * t480;
t498 = -pkin(4) * t165 + qJ(5) * t479;
t493 = t327 * t482 + t329 * t481;
t430 = pkin(4) * t460;
t489 = qJ(5) * t459;
t488 = qJ(5) * t460;
t487 = qJ(6) * t451;
t274 = t299 * t297;
t447 = -t274 + qJDD(2);
t473 = t323 * t447;
t467 = t325 * t447;
t255 = t282 * t281;
t452 = -t255 + t273;
t462 = t327 * t452;
t461 = t329 * t452;
t386 = qJD(2) * t299;
t256 = t361 + t386;
t374 = t325 * t404;
t375 = t323 * t404;
t397 = t294 * t324;
t373 = t248 * t397;
t348 = t322 * t364 + t373;
t398 = t294 * t322;
t355 = t248 * t398 - t324 * t364;
t442 = -t327 * t355 + t329 * t348;
t458 = t328 * (t325 * t442 - t375) + t330 * (t323 * t442 + t374);
t264 = t325 * t273;
t399 = t273 * t323;
t346 = (-t248 * t322 - t250 * t324) * t294;
t220 = t250 * t398;
t354 = t220 - t373;
t443 = -t327 * t346 + t329 * t354;
t457 = t328 * (t325 * t443 + t399) + t330 * (t323 * t443 - t264);
t263 = t294 * t281;
t207 = t234 + t263;
t381 = qJD(5) * t248;
t239 = -0.2e1 * t381;
t379 = qJD(6) * t294;
t455 = t239 + 0.2e1 * t379;
t292 = qJD(2) * t297;
t258 = t276 - t292;
t320 = t330 ^ 2;
t433 = sin(qJ(1));
t434 = cos(qJ(1));
t344 = g(1) * t434 + g(2) * t433;
t422 = qJDD(1) * pkin(7);
t339 = -t344 + t422;
t389 = qJ(3) * qJD(2);
t428 = t328 * g(3);
t436 = qJD(2) ^ 2;
t251 = t330 * t339 - t428 - t436 * pkin(2) + t305 * qJ(3) + (t328 * t389 + (-pkin(1) * t330 - pkin(2) * t320) * qJD(1)) * qJD(1);
t427 = t330 * g(3);
t331 = -t328 * t339 - t427 - t304 * qJ(3) + qJDD(2) * pkin(2) + (t330 * t389 + (t330 * pkin(2) + pkin(1)) * t388) * qJD(1);
t190 = -0.2e1 * qJD(3) * t297 + t325 * t251 + t323 * t331;
t446 = pkin(5) * t364 - t487;
t195 = pkin(5) * t248 - qJ(6) * t250;
t265 = pkin(3) * t297 - pkin(8) * t299;
t163 = -pkin(3) * t436 + qJDD(2) * pkin(8) - t265 * t297 + t190;
t356 = g(1) * t433 - t434 * g(2);
t343 = qJDD(1) * pkin(1) + t356;
t437 = qJD(1) ^ 2;
t253 = (qJ(3) * t320 + pkin(7)) * t437 + t305 * pkin(2) - qJDD(3) - (qJD(2) * pkin(2) - qJ(3) * t388) * t388 + t343;
t175 = t256 * pkin(3) - t258 * pkin(8) - t253;
t113 = t327 * t163 - t329 * t175;
t83 = pkin(4) * t452 - qJ(5) * t207 - t113;
t114 = t329 * t163 + t327 * t175;
t260 = pkin(4) * t294 - qJ(5) * t282;
t439 = t281 ^ 2;
t86 = -pkin(4) * t439 + qJ(5) * t341 - t294 * t260 + t114;
t426 = t322 * t83 + t324 * t86;
t358 = t273 * qJ(6) - t248 * t195 + t426;
t445 = t527 - pkin(5) * (t454 + t438) - qJ(6) * t183 + t358;
t203 = (qJD(4) - t294) * t282 - t352;
t444 = t327 * t354 + t329 * t346;
t441 = t327 * t348 + t329 * t355;
t280 = t282 ^ 2;
t295 = t297 ^ 2;
t296 = t299 ^ 2;
t365 = t322 * t86 - t324 * t83;
t380 = qJD(5) * t250;
t45 = t365 + 0.2e1 * t380;
t46 = t239 + t426;
t28 = t322 * t46 - t324 * t45;
t435 = pkin(4) * t28;
t432 = pkin(3) * t323;
t429 = pkin(5) * t324;
t425 = t28 * t327;
t424 = t28 * t329;
t423 = qJ(6) * t324;
t363 = t323 * t251 - t325 * t331;
t350 = -qJDD(2) * pkin(3) - t436 * pkin(8) + t363;
t338 = -t341 * pkin(4) - t439 * qJ(5) + t282 * t260 + qJDD(5) + t350;
t360 = (0.2e1 * qJD(3) + t265) * t299;
t110 = t360 + t338;
t421 = t110 * t322;
t420 = t110 * t324;
t162 = t360 + t350;
t413 = t162 * t327;
t412 = t162 * t329;
t215 = t255 + t273;
t408 = t215 * t327;
t407 = t215 * t329;
t403 = t253 * t323;
t402 = t253 * t325;
t268 = qJDD(2) + t274;
t401 = t268 * t323;
t400 = t268 * t325;
t396 = t294 * t327;
t395 = t294 * t329;
t382 = qJD(3) * t299;
t189 = t363 + 0.2e1 * t382;
t124 = -t189 * t325 + t190 * t323;
t394 = t328 * t124;
t312 = t330 * t437 * t328;
t393 = t328 * (qJDD(2) + t312);
t392 = t330 * (qJDD(2) - t312);
t385 = qJD(2) * t323;
t384 = qJD(2) * t325;
t377 = qJD(4) + t294;
t372 = t323 * t255;
t371 = t325 * t255;
t370 = -pkin(3) * t325 - pkin(2);
t367 = -qJ(6) * t322 - pkin(4);
t29 = t322 * t45 + t324 * t46;
t74 = t113 * t327 + t329 * t114;
t125 = t189 * t323 + t325 * t190;
t336 = -pkin(1) * t437 + t339;
t283 = t328 * t336 + t427;
t284 = t330 * t336 - t428;
t362 = t328 * t283 + t330 * t284;
t359 = (0.2e1 * qJD(5) + t195) * t250;
t357 = -t426 - t527;
t73 = -t113 * t329 + t114 * t327;
t349 = t358 + t455;
t257 = -t361 + t386;
t347 = -t273 * pkin(5) - qJ(6) * t438 + qJDD(6) + t365;
t41 = -pkin(5) * t438 + t349;
t42 = t359 + t347;
t22 = t322 * t41 - t324 * t42;
t345 = pkin(4) * t22 - pkin(5) * t42 + qJ(6) * t41;
t342 = -pkin(5) * t449 + qJ(6) * t155 + t431;
t149 = t250 * t397 + t322 * t335;
t150 = t324 * t335 - t220;
t101 = -t149 * t327 + t150 * t329;
t334 = t328 * (t325 * t101 + t375) + t330 * (t323 * t101 - t374);
t333 = -pkin(5) * t450 - qJ(6) * t448 + t347 - t430;
t291 = -0.2e1 * t382;
t332 = 0.2e1 * qJD(6) * t250 - t299 * t265 + t291 - t338 - t446;
t319 = t328 ^ 2;
t317 = t320 * t437;
t315 = t319 * t437;
t306 = t314 - 0.2e1 * t369;
t303 = t313 + 0.2e1 * t368;
t301 = pkin(7) * t437 + t343;
t288 = -t296 - t436;
t287 = -t296 + t436;
t286 = t295 - t436;
t266 = -t436 - t295;
t262 = -t280 + t438;
t261 = -t438 + t439;
t259 = t276 + t292;
t254 = -t295 - t296;
t252 = t280 - t439;
t241 = -0.2e1 * t380;
t240 = 0.2e1 * t381;
t237 = -t280 - t438;
t236 = -t288 * t323 - t400;
t235 = t288 * t325 - t401;
t232 = -t438 - t439;
t225 = t280 + t439;
t219 = t266 * t325 - t473;
t218 = t266 * t323 + t467;
t213 = (-t281 * t329 + t282 * t327) * t294;
t210 = t257 * t325 + t259 * t323;
t209 = t257 * t323 - t259 * t325;
t208 = t281 * t377 + t351;
t206 = t234 - t263;
t204 = -t282 * t377 + t352;
t199 = t234 * t329 - t282 * t396;
t198 = t281 * t395 - t327 * t341;
t192 = t261 * t329 - t408;
t191 = -t262 * t327 + t461;
t178 = -t237 * t327 - t407;
t177 = t237 * t329 - t408;
t168 = t232 * t329 - t462;
t167 = t232 * t327 + t461;
t144 = -t203 * t329 + t207 * t327;
t143 = t204 * t329 - t206 * t327;
t142 = -t203 * t327 - t207 * t329;
t129 = t178 * t325 - t208 * t323;
t128 = t178 * t323 + t208 * t325;
t127 = t168 * t325 - t204 * t323;
t126 = t168 * t323 + t204 * t325;
t119 = t144 * t325 - t225 * t323;
t118 = t144 * t323 + t225 * t325;
t115 = -pkin(8) * t177 + t412;
t111 = -pkin(8) * t167 + t413;
t98 = t149 * t329 + t150 * t327;
t87 = -pkin(3) * t177 + t114;
t85 = -pkin(3) * t167 + t113;
t76 = t420 + t525;
t75 = t421 - t488;
t64 = -pkin(4) * t451 + t421 - t524;
t63 = (pkin(5) * t294 - 0.2e1 * qJD(6)) * t250 + t110 + t446;
t62 = -pkin(4) * t456 - t420 + t489;
t54 = -t162 * t325 + t323 * t74;
t53 = -pkin(8) * t142 - t73;
t48 = t332 + (-t456 - t227) * pkin(5);
t47 = -pkin(5) * t227 + t332 + t487;
t43 = -t431 - t517;
t40 = -qJ(6) * t165 + t42;
t39 = -t322 * t48 - t423 * t456 - t488;
t38 = (-t165 - t438) * pkin(5) + t349;
t37 = -pkin(5) * t414 + t324 * t47 - t525;
t36 = -t342 - t517;
t35 = t324 * t48 + t367 * t456 + t489;
t34 = t524 + t322 * t47 + (pkin(4) + t429) * t451;
t33 = t239 - t357 + t535;
t32 = -t327 * t64 + t329 * t76 + t534;
t31 = -t430 + t45 - t504;
t30 = -t327 * t62 + t329 * t75 - t503;
t27 = t333 + t359 - t504;
t26 = t240 - 0.2e1 * t379 - t445 - t535;
t25 = -pkin(4) * t110 + qJ(5) * t29;
t24 = -t28 - t502;
t23 = t322 * t42 + t324 * t41;
t21 = t29 + t498;
t20 = -t322 * t38 + t324 * t40 - t502;
t19 = t322 * t40 + t324 * t38 + t498;
t18 = -t327 * t35 + t329 * t39 - t503;
t17 = -t327 * t34 + t329 * t37 - t534;
t16 = -qJ(5) * t22 + (pkin(5) * t322 - t423) * t63;
t15 = t29 * t329 - t425;
t14 = t29 * t327 + t424;
t13 = t110 * t323 + t15 * t325;
t12 = -t110 * t325 + t15 * t323;
t11 = qJ(5) * t23 + (t367 - t429) * t63;
t10 = -t22 * t327 + t23 * t329;
t9 = t22 * t329 + t23 * t327;
t8 = t10 * t325 + t323 * t63;
t7 = t10 * t323 - t325 * t63;
t6 = -t21 * t327 + t24 * t329 - t516;
t5 = -pkin(3) * t14 - t435;
t4 = -t19 * t327 + t20 * t329 - t516;
t3 = -pkin(8) * t14 - qJ(5) * t424 - t25 * t327;
t2 = -pkin(3) * t9 - t345;
t1 = -pkin(8) * t9 - t11 * t327 + t16 * t329;
t44 = [0, 0, 0, 0, 0, qJDD(1), t356, t344, 0, 0, (t304 + t368) * t328, t303 * t330 + t328 * t306, t393 + t330 * (-t315 + t436), (t305 - t369) * t330, t328 * (t317 - t436) + t392, 0, t330 * t301 + pkin(1) * t306 + pkin(7) * (t330 * (-t317 - t436) - t393), -t328 * t301 - pkin(1) * t303 + pkin(7) * (-t392 - t328 * (-t315 - t436)), pkin(1) * (t315 + t317) + (t319 + t320) * t422 + t362, pkin(1) * t301 + pkin(7) * t362, t328 * (t276 * t325 - t299 * t385) + t330 * (t276 * t323 + t299 * t384), t328 * (-t256 * t325 - t258 * t323) + t330 * (-t256 * t323 + t258 * t325), t328 * (-t287 * t323 + t467) + t330 * (t287 * t325 + t473), t328 * (t297 * t384 + t323 * t361) + t330 * (t297 * t385 - t325 * t361), t328 * (t286 * t325 - t401) + t330 * (t286 * t323 + t400), (t328 * (-t297 * t325 + t299 * t323) + t330 * (-t297 * t323 - t299 * t325)) * qJD(2), t328 * (-qJ(3) * t218 - t403) + t330 * (-pkin(2) * t256 + qJ(3) * t219 + t402) - pkin(1) * t256 + pkin(7) * (-t328 * t218 + t219 * t330), t328 * (-qJ(3) * t235 - t402) + t330 * (-pkin(2) * t258 + qJ(3) * t236 - t403) - pkin(1) * t258 + pkin(7) * (-t328 * t235 + t236 * t330), t328 * (-qJ(3) * t209 - t124) + t330 * (-pkin(2) * t254 + qJ(3) * t210 + t125) - pkin(1) * t254 + pkin(7) * (-t328 * t209 + t210 * t330), -qJ(3) * t394 + t330 * (pkin(2) * t253 + qJ(3) * t125) + pkin(1) * t253 + pkin(7) * (t125 * t330 - t394), t328 * (t199 * t325 + t372) + t330 * (t199 * t323 - t371), t328 * (t143 * t325 + t252 * t323) + t330 * (t143 * t323 - t252 * t325), t328 * (t191 * t325 + t207 * t323) + t330 * (t191 * t323 - t207 * t325), t328 * (t198 * t325 - t372) + t330 * (t198 * t323 + t371), t328 * (t192 * t325 - t203 * t323) + t330 * (t192 * t323 + t203 * t325), t328 * (t213 * t325 + t399) + t330 * (t213 * t323 - t264), t328 * (-qJ(3) * t126 + t111 * t325 - t323 * t85) + t330 * (-pkin(2) * t167 + qJ(3) * t127 + t111 * t323 + t325 * t85) - pkin(1) * t167 + pkin(7) * (-t328 * t126 + t127 * t330), t328 * (-qJ(3) * t128 + t115 * t325 - t323 * t87) + t330 * (-pkin(2) * t177 + qJ(3) * t129 + t115 * t323 + t325 * t87) - pkin(1) * t177 + pkin(7) * (-t328 * t128 + t129 * t330), t328 * (-qJ(3) * t118 + t325 * t53) + t330 * (qJ(3) * t119 + t323 * t53) + pkin(7) * (-t328 * t118 + t119 * t330) + (t328 * t432 + t330 * t370 - pkin(1)) * t142, (t328 * (-pkin(8) * t325 + t432) + t330 * (-pkin(8) * t323 + t370) - pkin(1)) * t73 + (pkin(7) + qJ(3)) * (-t328 * t54 + t330 * (t162 * t323 + t325 * t74)), t334, -t530, t507, t458, t538, t457, t328 * (t30 * t325 - t31 * t323 - t515) + t330 * (t30 * t323 + t31 * t325 + t512) + t508, t328 * (t32 * t325 - t323 * t33 - t542) + t330 * (t32 * t323 + t325 * t33 - t540) - t543, t328 * (-t323 * t43 + t325 * t6 - t526) + t330 * (t323 * t6 + t325 * t43 + t522) + t520, t328 * (-qJ(3) * t12 + t3 * t325 - t323 * t5) + t330 * (-pkin(2) * t14 + qJ(3) * t13 + t3 * t323 + t325 * t5) - pkin(1) * t14 + pkin(7) * (-t328 * t12 + t13 * t330), t334, t507, t530, t457, -t538, t458, t328 * (t18 * t325 - t27 * t323 - t515) + t330 * (t18 * t323 + t27 * t325 + t512) + t508, t328 * (-t323 * t36 + t325 * t4 - t526) + t330 * (t323 * t4 + t325 * t36 + t522) + t520, t328 * (t17 * t325 - t26 * t323 + t542) + t330 * (t17 * t323 + t26 * t325 + t540) + t543, t328 * (-qJ(3) * t7 + t1 * t325 - t2 * t323) + t330 * (-pkin(2) * t9 + qJ(3) * t8 + t1 * t323 + t2 * t325) - pkin(1) * t9 + pkin(7) * (-t328 * t7 + t330 * t8); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t312, t315 - t317, t313, t312, t314, qJDD(2), -t283, -t284, 0, 0, t274, t296 - t295, t259, -t274, t257, qJDD(2), pkin(2) * t218 + t291 - t363, pkin(2) * t235 - t190, pkin(2) * t209, pkin(2) * t124, t234 * t327 + t282 * t395, t204 * t327 + t206 * t329, t262 * t329 + t462, t281 * t396 + t329 * t341, t261 * t327 + t407, (-t281 * t327 - t282 * t329) * t294, pkin(2) * t126 + pkin(3) * t204 + pkin(8) * t168 - t412, pkin(2) * t128 + pkin(3) * t208 + pkin(8) * t178 + t413, pkin(2) * t118 + pkin(3) * t225 + pkin(8) * t144 + t74, pkin(2) * t54 - pkin(3) * t162 + pkin(8) * t74, t98, -t511, t493, t441, -t521, t444, t327 * t75 + t329 * t62 + t514, t327 * t76 + t329 * t64 - t541, t21 * t329 + t24 * t327 + t523, pkin(2) * t12 - pkin(3) * t110 + pkin(8) * t15 - qJ(5) * t425 + t25 * t329, t98, t493, t511, t444, t521, t441, t327 * t39 + t329 * t35 + t514, t19 * t329 + t20 * t327 + t523, t327 * t37 + t329 * t34 + t541, pkin(2) * t7 - pkin(3) * t63 + pkin(8) * t10 + t11 * t329 + t16 * t327; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t256, t258, t254, -t253, 0, 0, 0, 0, 0, 0, t167, t177, t142, t73, 0, 0, 0, 0, 0, 0, t477, -t77, t494, t14, 0, 0, 0, 0, 0, 0, t477, t494, t77, t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t255, t252, t207, -t255, -t203, t273, -t113, -t114, 0, 0, t404, t453, t449, -t404, t155, t273, t241 - t365 + t430, t240 + t357, t431, t435, t404, t449, -t453, t273, -t155, -t404, -t195 * t250 + t241 - t333, t342, t445 + t455, t345; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t456, t451, t165, t110, 0, 0, 0, 0, 0, 0, t456, t165, -t451, t63; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t450, t449, t454, t42;];
tauJ_reg  = t44;
