% Calculate inertial parameters regressor of joint inertia matrix time derivative for
% S6RPPRRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 02:11
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPPRRP6_inertiaDJ_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRP6_inertiaDJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRP6_inertiaDJ_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S6RPPRRP6_inertiaDJ_reg2_slag_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 02:11:18
% EndTime: 2019-03-09 02:11:22
% DurationCPUTime: 1.61s
% Computational Cost: add. (947->153), mult. (1908->263), div. (0->0), fcn. (1340->4), ass. (0->108)
t56 = sin(qJ(5));
t50 = t56 ^ 2;
t58 = cos(qJ(5));
t52 = t58 ^ 2;
t117 = t50 + t52;
t59 = cos(qJ(4));
t47 = t59 * qJD(4);
t24 = t117 * t47;
t55 = pkin(1) + qJ(3);
t122 = t59 * pkin(8);
t57 = sin(qJ(4));
t84 = t57 * pkin(4) - t122;
t71 = t84 + t55;
t54 = -pkin(7) + qJ(2);
t91 = t54 * t47;
t73 = -t57 * qJD(2) - t91;
t127 = qJD(5) * t71 - t73;
t118 = t50 - t52;
t51 = t57 ^ 2;
t53 = t59 ^ 2;
t89 = (t51 - t53) * qJD(4);
t34 = t118 * qJD(5);
t123 = pkin(8) * t57;
t85 = pkin(4) * t59 + t123;
t68 = t85 * qJD(4) + qJD(3);
t49 = qJD(5) * t58;
t96 = t57 * t49;
t4 = -t127 * t56 - t54 * t96 + t58 * t68;
t79 = pkin(5) * t56 - qJ(6) * t58;
t19 = t79 * qJD(5) - t56 * qJD(6);
t120 = t59 * t19;
t74 = -t54 + t79;
t18 = t74 * t59;
t80 = t58 * pkin(5) + t56 * qJ(6);
t32 = -pkin(4) - t80;
t126 = (t32 * t57 + t122) * qJD(4) - qJD(5) * t18 - t120;
t109 = t57 * qJD(4);
t72 = t59 * qJD(2) - t54 * t109;
t125 = t85 * qJD(5) - t72;
t67 = -t80 * qJD(5) + t58 * qJD(6);
t124 = 0.2e1 * qJD(6);
t121 = t56 * t54;
t36 = t58 * t57 * t54;
t15 = t56 * t71 + t36;
t119 = pkin(8) * t24;
t115 = t51 + t53;
t114 = qJD(4) * t18;
t48 = qJD(5) * t56;
t113 = qJD(5) * t59;
t112 = t53 * qJD(2);
t111 = t55 * qJD(3);
t107 = qJ(2) * qJD(2);
t106 = qJ(6) * qJD(4);
t105 = -0.2e1 * pkin(4) * qJD(5);
t104 = t57 * t121;
t102 = pkin(5) * t47;
t101 = pkin(8) * t48;
t100 = pkin(8) * t49;
t99 = t54 * t48;
t98 = t57 * t48;
t97 = t56 * t113;
t95 = t58 * t113;
t94 = t56 * t49;
t93 = t58 * t109;
t92 = t57 * t47;
t90 = t59 * t106;
t41 = 0.2e1 * t92;
t88 = t127 * t58 + t56 * t68;
t87 = t56 * t93;
t86 = t53 * t94;
t7 = t57 * qJ(6) + t15;
t8 = -t58 * (t55 - t122) + (-t58 * pkin(4) - pkin(5) + t121) * t57;
t83 = t56 * t8 + t58 * t7;
t82 = t56 * t7 - t58 * t8;
t14 = t58 * t71 - t104;
t78 = t14 * t58 + t15 * t56;
t77 = t14 * t56 - t15 * t58;
t5 = -t74 * t109 + (-qJD(2) - t67) * t59;
t70 = -t5 + (t32 * t59 - t123) * qJD(5);
t66 = t84 * qJD(4) - t54 * t113;
t1 = t90 + (qJD(6) - t99) * t57 + t88;
t2 = -t102 - t4;
t65 = -t83 * qJD(5) - t1 * t56 + t2 * t58;
t64 = -t82 * qJD(5) + t1 * t58 + t2 * t56;
t3 = t54 * t98 - t88;
t63 = t77 * qJD(5) + t3 * t56 - t4 * t58;
t62 = -t78 * qJD(5) - t3 * t58 - t4 * t56;
t60 = 0.2e1 * qJD(2);
t42 = t54 * t112;
t40 = -0.2e1 * t94;
t39 = 0.2e1 * t94;
t33 = t115 * qJD(2);
t30 = -t56 * t109 + t95;
t29 = t56 * t47 + t96;
t28 = t115 * t49;
t27 = -t93 - t97;
t26 = -t58 * t47 + t98;
t25 = t115 * t48;
t23 = t117 * t109;
t17 = -0.2e1 * t52 * t92 - 0.2e1 * t86;
t16 = -0.2e1 * t50 * t92 + 0.2e1 * t86;
t13 = t118 * t113 + t87;
t12 = -t56 * t89 + t57 * t95;
t11 = -t118 * t109 + 0.4e1 * t59 * t94;
t10 = -0.2e1 * t57 * t97 - 0.2e1 * t58 * t89;
t9 = t53 * t34 + 0.2e1 * t59 * t87;
t6 = (-0.1e1 + t117) * t41;
t20 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t60, 0.2e1 * t107, 0, 0, 0, 0, 0, 0, 0, t60, 0.2e1 * qJD(3), 0.2e1 * t107 + 0.2e1 * t111, -0.2e1 * t92, 0.2e1 * t89, 0, t41, 0, 0, 0.2e1 * qJD(3) * t57 + 0.2e1 * t55 * t47, 0.2e1 * qJD(3) * t59 - 0.2e1 * t55 * t109, -0.2e1 * t33, 0.2e1 * t51 * t54 * qJD(2) + 0.2e1 * t111 + 0.2e1 * t42, t17, 0.2e1 * t9, t10, t16, -0.2e1 * t12, t41, 0.2e1 * t4 * t57 + 0.2e1 * (-t56 * qJD(2) - t54 * t49) * t53 + 0.2e1 * (t14 + 0.2e1 * t104) * t47, 0.2e1 * t3 * t57 + 0.2e1 * (-qJD(2) * t58 + t99) * t53 + 0.2e1 * (-t15 + 0.2e1 * t36) * t47, 0.2e1 * t78 * t109 + 0.2e1 * t63 * t59, -0.2e1 * t54 ^ 2 * t92 + 0.2e1 * t14 * t4 - 0.2e1 * t15 * t3 + 0.2e1 * t42, t17, t10, -0.2e1 * t9, t41, 0.2e1 * t12, t16, 0.2e1 * (-t56 * t114 - t2) * t57 + 0.2e1 * (-qJD(4) * t8 + t18 * t49 + t5 * t56) * t59, 0.2e1 * t82 * t109 + 0.2e1 * t65 * t59, 0.2e1 * (t58 * t114 + t1) * t57 + 0.2e1 * (qJD(4) * t7 + t18 * t48 - t5 * t58) * t59, 0.2e1 * t7 * t1 + 0.2e1 * t18 * t5 + 0.2e1 * t8 * t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -qJD(3), 0, 0, 0, 0, 0, 0, -t47, t109, 0, -qJD(3), 0, 0, 0, 0, 0, 0, t26, t29, -t23, t63, 0, 0, 0, 0, 0, 0, t26, -t23, -t29, t65; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJD(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t33, 0, 0, 0, 0, 0, 0, -t28, t25, 0, t112 - t77 * t47 + (t62 - 0.2e1 * t91) * t57, 0, 0, 0, 0, 0, 0, -t28, 0, -t25 (t83 * qJD(4) - t5) * t59 + (t64 + t114) * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6, 0, 0, 0, 0, 0, 0, 0, 0, 0, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t109, 0, -t47, 0, t72, t73, 0, 0, -t13, -t11, t29, t13, -t26, 0, -t125 * t58 + t66 * t56, t125 * t56 + t66 * t58, t62, t72 * pkin(4) + t62 * pkin(8), -t13, t29, t11, 0, t26, t13, -t126 * t56 + t70 * t58, t64, t126 * t58 + t70 * t56, t64 * pkin(8) + t18 * t19 + t5 * t32; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t109, -t47, 0, 0, 0, 0, 0, 0, 0, 0, t27, -t30, t24, -pkin(4) * t109 + t119, 0, 0, 0, 0, 0, 0, t27, t24, t30, t32 * t109 + t119 - t120; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t39, -0.2e1 * t34, 0, t40, 0, 0, t56 * t105, t58 * t105, 0, 0, t39, 0, 0.2e1 * t34, 0, 0, t40, -0.2e1 * t19 * t58 + 0.2e1 * t32 * t48, 0, -0.2e1 * t19 * t56 - 0.2e1 * t32 * t49, 0.2e1 * t32 * t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t27, 0, -t30, t47, t4, t3, 0, 0, 0, t27, 0, t47, t30, 0, t4 + 0.2e1 * t102 (pkin(5) * t109 - qJ(6) * t113) * t58 + (t57 * t106 + (pkin(5) * qJD(5) - qJD(6)) * t59) * t56, 0.2e1 * t90 + (t124 - t99) * t57 + t88, -t2 * pkin(5) + t1 * qJ(6) + t7 * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t48, t49, 0, 0, 0, 0, 0, 0, 0, 0, t48, 0, -t49, t19; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t29, t26, 0, 0, 0, 0, 0, 0, 0, 0, -t29, 0, -t26, -t79 * t47 + t67 * t57; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, 0, -t48, 0, -t100, t101, 0, 0, 0, t49, 0, 0, t48, 0, -t100, t67, -t101, t67 * pkin(8); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t124, qJ(6) * t124; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t47, t27, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t29; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t49, 0, t100; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t20;
