% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPPRRP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [8x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d4,d5]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 15:02
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPPRRP6_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(8,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPPRRP6_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPPRRP6_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPPRRP6_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPPRRP6_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [8 1]), ...
  'S6RPPRRP6_invdynB_fixb_reg2_snew_vp: pkin has to be [8x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 15:01:28
% EndTime: 2019-05-05 15:01:41
% DurationCPUTime: 7.85s
% Computational Cost: add. (13612->438), mult. (25793->553), div. (0->0), fcn. (14649->6), ass. (0->315)
t516 = sin(qJ(5));
t519 = cos(qJ(5));
t520 = cos(qJ(4));
t573 = qJD(1) * t520;
t479 = qJD(4) * t516 + t519 * t573;
t517 = sin(qJ(4));
t569 = qJD(1) * qJD(4);
t558 = t517 * t569;
t565 = qJDD(1) * t520;
t483 = -t558 + t565;
t552 = -t519 * qJDD(4) + t516 * t483;
t501 = qJD(1) * t517 + qJD(5);
t570 = qJD(5) + t501;
t384 = t479 * t570 + t552;
t477 = -t519 * qJD(4) + t516 * t573;
t537 = -t516 * qJDD(4) - t519 * t483;
t527 = qJD(5) * t477 + t537;
t589 = t477 * t501;
t641 = -t589 - t527;
t598 = t641 * t516;
t334 = t384 * t519 + t598;
t474 = t479 ^ 2;
t617 = t477 ^ 2;
t430 = t474 - t617;
t309 = t334 * t517 + t430 * t520;
t332 = -t384 * t516 + t519 * t641;
t518 = sin(qJ(1));
t521 = cos(qJ(1));
t701 = t309 * t518 - t332 * t521;
t700 = t309 * t521 + t332 * t518;
t616 = t501 ^ 2;
t454 = t617 - t616;
t437 = t479 * t477;
t557 = t520 * t569;
t567 = qJDD(1) * t517;
t482 = -t557 - t567;
t475 = qJDD(5) - t482;
t629 = t437 + t475;
t595 = t629 * t516;
t365 = t454 * t519 - t595;
t385 = (qJD(5) - t501) * t479 + t552;
t326 = t365 * t517 + t385 * t520;
t594 = t629 * t519;
t361 = t454 * t516 + t594;
t699 = t326 * t518 + t361 * t521;
t698 = t326 * t521 - t361 * t518;
t626 = -t589 + t527;
t649 = -t385 * t516 + t626 * t519;
t628 = t474 + t617;
t648 = -t385 * t519 - t626 * t516;
t667 = t517 * t648 + t520 * t628;
t677 = -t518 * t649 + t521 * t667;
t697 = pkin(6) * t677;
t679 = t518 * t667 + t521 * t649;
t696 = pkin(6) * t679;
t420 = t616 + t474;
t347 = t420 * t519 + t595;
t695 = pkin(4) * t347;
t694 = pkin(8) * t347;
t355 = t420 * t516 - t594;
t693 = pkin(8) * t355;
t692 = t347 * t518;
t691 = t347 * t521;
t607 = pkin(1) + qJ(3);
t690 = t347 * t607;
t689 = t355 * t517;
t688 = t355 * t520;
t606 = qJ(2) - pkin(7);
t665 = -t517 * t628 + t520 * t648;
t685 = t606 * t665;
t684 = t606 * t667;
t614 = pkin(2) + pkin(3);
t683 = t614 * t347;
t682 = t334 * t520 - t430 * t517;
t681 = t365 * t520 - t385 * t517;
t455 = -t474 + t616;
t630 = -t437 + t475;
t593 = t630 * t516;
t651 = t519 * t455 + t593;
t592 = t630 * t519;
t650 = -t455 * t516 + t592;
t666 = t517 * t650 + t520 * t626;
t680 = t518 * t666 + t521 * t651;
t678 = -t518 * t651 + t521 * t666;
t676 = pkin(4) * t628 + pkin(8) * t648 - t607 * t665 + t614 * t667;
t675 = pkin(8) * t649;
t664 = -t517 * t626 + t520 * t650;
t625 = -t616 - t617;
t640 = t516 * t625 + t592;
t663 = pkin(4) * t640;
t637 = t519 * t625 - t593;
t662 = pkin(8) * t637;
t661 = pkin(8) * t640;
t658 = t517 * t637;
t657 = t518 * t640;
t656 = t520 * t637;
t655 = t521 * t640;
t654 = t607 * t640;
t653 = t614 * t640;
t652 = t641 * qJ(6);
t647 = 2 * qJD(6);
t415 = -qJD(5) * t479 - t552;
t583 = t501 * t516;
t541 = t519 * t415 + t477 * t583;
t582 = t501 * t519;
t560 = t477 * t582;
t535 = -t415 * t516 + t560;
t561 = t520 * t437;
t622 = t517 * t535 + t561;
t639 = t518 * t622 + t521 * t541;
t531 = (-t477 * t516 - t479 * t519) * t501;
t450 = t479 * t583;
t540 = t450 - t560;
t623 = -t520 * t475 + t517 * t540;
t638 = t518 * t623 + t521 * t531;
t636 = -t518 * t541 + t521 * t622;
t635 = -t518 * t531 + t521 * t623;
t523 = qJD(1) ^ 2;
t515 = t523 * pkin(7);
t493 = t518 * g(1) - t521 * g(2);
t539 = -qJDD(2) + t493;
t528 = t523 * qJ(2) + t539;
t554 = t607 * qJDD(1);
t526 = t554 + t528;
t612 = pkin(4) * t520;
t547 = pkin(8) * t517 + t612;
t615 = 2 * qJD(3);
t367 = -t482 * pkin(4) - t483 * pkin(8) - t515 + (qJD(4) * t547 + t615) * qJD(1) + t526;
t522 = qJD(4) ^ 2;
t613 = pkin(4) * t517;
t546 = -pkin(8) * t520 + t613;
t534 = t523 * t546;
t568 = qJD(2) * qJD(1);
t510 = 0.2e1 * t568;
t494 = t521 * g(1) + t518 * g(2);
t512 = qJDD(1) * qJ(2);
t536 = t494 - t512;
t618 = t607 * t523 - qJDD(3) + t536;
t434 = -qJDD(1) * pkin(7) + t510 - t618;
t555 = t520 * g(3) - t517 * t434;
t382 = -t522 * pkin(4) + qJDD(4) * pkin(8) - t517 * t534 - t555;
t325 = t516 * t367 + t519 * t382;
t424 = pkin(5) * t477 - qJ(6) * t479;
t538 = t475 * qJ(6) - t477 * t424 + t501 * t647 + t325;
t377 = t479 * t582 - t516 * t527;
t378 = -t519 * t527 - t450;
t543 = t517 * t378 - t561;
t624 = t521 * t377 + t518 * t543;
t562 = t517 * t437;
t621 = t520 * t535 - t562;
t620 = t475 * t517 + t520 * t540;
t619 = -t377 * t518 + t521 * t543;
t611 = pkin(5) * t519;
t564 = qJDD(1) * t521;
t486 = -t518 * t523 + t564;
t610 = pkin(6) * t486;
t566 = qJDD(1) * t518;
t487 = t521 * t523 + t566;
t609 = pkin(6) * t487;
t608 = t415 * pkin(5);
t605 = qJ(6) * t519;
t604 = qJDD(1) * pkin(1);
t559 = t517 * t520 * t523;
t490 = qJDD(4) + t559;
t588 = t490 * t517;
t587 = t490 * t520;
t491 = qJDD(4) - t559;
t586 = t491 * t517;
t585 = t491 * t520;
t584 = t501 * t479;
t513 = t517 ^ 2;
t581 = t513 * t523;
t514 = t520 ^ 2;
t580 = t514 * t523;
t417 = t517 * g(3) + t520 * t434;
t381 = qJDD(4) * pkin(4) + t522 * pkin(8) - t520 * t534 + t417;
t579 = t516 * t381;
t563 = qJD(1) * t615;
t448 = t526 + t563;
t433 = -t515 + t448;
t578 = t517 * t433;
t577 = t519 * t381;
t576 = t520 * t433;
t324 = -t519 * t367 + t516 * t382;
t575 = t628 - t616;
t574 = t513 + t514;
t556 = -qJ(6) * t516 - pkin(4);
t285 = t516 * t324 + t519 * t325;
t352 = -t517 * t417 - t520 * t555;
t449 = -0.2e1 * t568 + t618;
t393 = -t448 * t518 - t521 * t449;
t461 = -pkin(1) * t523 + t510 - t536;
t462 = t528 + t604;
t401 = t521 * t461 - t462 * t518;
t439 = -t493 * t518 - t521 * t494;
t551 = t518 * t559;
t550 = t521 * t559;
t548 = t479 * t424 + qJDD(6) + t324;
t545 = g(3) * t518 + t610;
t544 = g(3) * t521 - t609;
t542 = t520 * t378 + t562;
t284 = -t324 * t519 + t325 * t516;
t351 = t520 * t417 - t517 * t555;
t392 = t448 * t521 - t449 * t518;
t398 = t461 * t518 + t462 * t521;
t438 = t493 * t521 - t494 * t518;
t533 = -t494 + 0.2e1 * t512 + t510;
t532 = -t475 * pkin(5) + t548;
t507 = -pkin(2) * t523 + g(3);
t530 = -pkin(2) * t566 + t521 * t507 - t609;
t525 = -pkin(5) * t584 + t479 * t647 + t381;
t524 = t525 + t652;
t499 = -t522 - t580;
t498 = t522 - t580;
t497 = -t522 - t581;
t496 = -t522 + t581;
t489 = (-t513 + t514) * t523;
t488 = t574 * t523;
t485 = t574 * qJDD(1);
t484 = -0.2e1 * t558 + t565;
t481 = 0.2e1 * t557 + t567;
t476 = t574 * t569;
t453 = t482 * t520 + t513 * t569;
t452 = t483 * t517 + t514 * t569;
t447 = -t499 * t517 - t587;
t446 = t496 * t517 + t587;
t445 = t498 * t520 + t586;
t444 = t497 * t520 - t586;
t443 = t499 * t520 - t588;
t442 = t497 * t517 + t585;
t441 = t614 * t485;
t435 = -pkin(2) * t564 - t507 * t518 - t610;
t429 = -t485 * t521 + t488 * t518;
t428 = -t485 * t518 - t488 * t521;
t425 = -pkin(2) * t448 + qJ(2) * g(3);
t422 = -t481 * t517 + t484 * t520;
t421 = -pkin(2) * t449 + t607 * g(3);
t403 = t443 * t521 - t484 * t518;
t402 = t442 * t521 - t481 * t518;
t400 = t443 * t518 + t484 * t521;
t399 = t442 * t518 + t481 * t521;
t390 = t477 * t570 + t537;
t383 = -t415 + t584;
t342 = t614 * t488 + t352;
t341 = -t606 * t447 - t614 * t484 + t578;
t340 = -t606 * t444 - t614 * t481 - t576;
t339 = t351 * t521 - t433 * t518;
t338 = t351 * t518 + t433 * t521;
t322 = t383 * t517 + t656;
t321 = -t390 * t517 + t688;
t320 = -t383 * t520 + t658;
t319 = t390 * t520 + t689;
t318 = -t577 + t694;
t317 = t614 * t443 - t607 * t447 + t555;
t316 = t614 * t442 - t607 * t444 + t417;
t315 = t384 * t517 + t656;
t314 = -t517 * t641 - t688;
t313 = -t384 * t520 + t658;
t312 = t520 * t641 - t689;
t311 = -t579 - t661;
t304 = t524 + t608;
t303 = qJ(6) * t616 - t532;
t302 = -pkin(5) * t616 + t538;
t301 = t325 + t695;
t300 = t324 - t663;
t299 = -t606 * t352 - t614 * t433;
t298 = t320 * t521 - t657;
t297 = t319 * t521 + t692;
t296 = t320 * t518 + t655;
t295 = t319 * t518 - t691;
t294 = t313 * t521 - t657;
t293 = t312 * t521 - t692;
t292 = t313 * t518 + t655;
t291 = t312 * t518 + t691;
t290 = -pkin(4) * t649 - pkin(5) * t626 + qJ(6) * t385;
t289 = t575 * qJ(6) + t532;
t288 = (-t383 + t415) * pkin(5) + t524;
t287 = t525 + t608 + 0.2e1 * t652;
t286 = t575 * pkin(5) + t538;
t279 = t614 * t351 - t607 * t352;
t278 = t285 * t520 - t381 * t517;
t277 = t285 * t517 + t381 * t520;
t276 = -t663 + (-t625 - t616) * qJ(6) + (-t630 - t475) * pkin(5) + t548;
t275 = -t695 - qJ(6) * t629 + (-t420 + t616) * pkin(5) - t538;
t274 = -t288 * t516 - t383 * t605 - t661;
t273 = -t284 - t675;
t272 = -pkin(5) * t598 + t287 * t519 - t694;
t271 = t302 * t519 - t303 * t516;
t270 = t302 * t516 + t303 * t519;
t269 = t271 * t520 - t304 * t517;
t268 = t271 * t517 + t304 * t520;
t267 = t277 * t521 - t284 * t518;
t266 = t277 * t518 + t284 * t521;
t265 = -t286 * t516 + t289 * t519 - t675;
t264 = pkin(4) * t390 + t614 * t319 - t607 * t321 - t579 + t693;
t263 = -pkin(4) * t384 + t614 * t313 - t607 * t315 + t577 + t662;
t262 = t520 * t301 + t517 * t318 - t606 * t321 + t683;
t261 = -pkin(8) * t270 + (-pkin(5) * t516 + t605) * t304;
t260 = t520 * t300 + t517 * t311 - t606 * t315 - t653;
t259 = -pkin(4) * t270 - pkin(5) * t303 - qJ(6) * t302;
t258 = t519 * t288 + t614 * t320 - t607 * t322 + t556 * t383 + t662;
t257 = -t693 + t516 * t287 + (pkin(4) + t611) * t641 - t607 * t314 + t614 * t312;
t256 = t268 * t521 - t270 * t518;
t255 = t268 * t518 + t270 * t521;
t254 = t517 * t273 - t685 + (-t612 - t614) * t649;
t253 = t285 + t676;
t252 = t517 * t274 + t520 * t276 - t606 * t322 - t653;
t251 = t517 * t272 + t520 * t275 - t606 * t314 - t683;
t250 = t519 * t286 + t516 * t289 + t676;
t249 = t517 * t265 + t520 * t290 - t614 * t649 - t685;
t248 = pkin(4) * t381 + pkin(8) * t285 + t614 * t277 - t607 * t278;
t247 = -t606 * t278 + (-t547 - t614) * t284;
t246 = pkin(8) * t271 - t607 * t269 + t614 * t268 + (-t556 + t611) * t304;
t245 = t520 * t259 + t517 * t261 - t606 * t269 - t614 * t270;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t487, -t486, 0, t439, 0, 0, 0, 0, 0, 0, 0, t487, t486, t401, 0, 0, 0, 0, 0, 0, 0, t486, -t487, t393, 0, 0, 0, 0, 0, 0, t402, t403, t429, t339, 0, 0, 0, 0, 0, 0, t294, t297, t677, t267, 0, 0, 0, 0, 0, 0, t298, t677, t293, t256; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t486, -t487, 0, t438, 0, 0, 0, 0, 0, 0, 0, -t486, t487, t398, 0, 0, 0, 0, 0, 0, 0, t487, t486, t392, 0, 0, 0, 0, 0, 0, t399, t400, t428, t338, 0, 0, 0, 0, 0, 0, t292, t295, t679, t266, 0, 0, 0, 0, 0, 0, t296, t679, t291, t255; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t444, t447, 0, t352, 0, 0, 0, 0, 0, 0, t315, t321, t665, t278, 0, 0, 0, 0, 0, 0, t322, t665, t314, t269; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t486, 0, -t487, 0, -t545, -t544, -t438, -pkin(6) * t438, 0, -t486, t487, 0, 0, 0, -t398, t545, t544, -pkin(6) * t398 + (-pkin(1) * t518 + qJ(2) * t521) * g(3), 0, t487, t486, 0, 0, 0, -t392, t530, t435, -pkin(6) * t392 - t421 * t518 + t425 * t521, t452 * t521 - t551, t422 * t521 - t489 * t518, t445 * t521 - t518 * t565, t453 * t521 + t551, t446 * t521 + t517 * t566, -qJDD(4) * t518 - t476 * t521, -pkin(6) * t399 - t316 * t518 + t340 * t521, -pkin(6) * t400 - t317 * t518 + t341 * t521, -pkin(6) * t428 + t342 * t521 + t441 * t518, -pkin(6) * t338 - t279 * t518 + t299 * t521, t619, -t700, t678, t636, t698, t635, -pkin(6) * t292 + t260 * t521 - t263 * t518, -pkin(6) * t295 + t262 * t521 - t264 * t518, -t253 * t518 + t254 * t521 - t696, -pkin(6) * t266 + t247 * t521 - t248 * t518, t619, t678, t700, t635, -t698, t636, -pkin(6) * t296 + t252 * t521 - t258 * t518, t249 * t521 - t250 * t518 - t696, -pkin(6) * t291 + t251 * t521 - t257 * t518, -pkin(6) * t255 + t245 * t521 - t246 * t518; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t487, 0, t486, 0, t544, -t545, t439, pkin(6) * t439, 0, -t487, -t486, 0, 0, 0, t401, -t544, t545, pkin(6) * t401 + (pkin(1) * t521 + qJ(2) * t518) * g(3), 0, -t486, t487, 0, 0, 0, t393, -t435, t530, pkin(6) * t393 + t421 * t521 + t425 * t518, t452 * t518 + t550, t422 * t518 + t489 * t521, t445 * t518 + t520 * t564, t453 * t518 - t550, t446 * t518 - t517 * t564, qJDD(4) * t521 - t476 * t518, pkin(6) * t402 + t316 * t521 + t340 * t518, pkin(6) * t403 + t317 * t521 + t341 * t518, pkin(6) * t429 + t342 * t518 - t441 * t521, pkin(6) * t339 + t279 * t521 + t299 * t518, t624, -t701, t680, t639, t699, t638, pkin(6) * t294 + t260 * t518 + t263 * t521, pkin(6) * t297 + t262 * t518 + t264 * t521, t253 * t521 + t254 * t518 + t697, pkin(6) * t267 + t247 * t518 + t248 * t521, t624, t680, t701, t638, -t699, t639, pkin(6) * t298 + t252 * t518 + t258 * t521, t249 * t518 + t250 * t521 + t697, pkin(6) * t293 + t251 * t518 + t257 * t521, pkin(6) * t256 + t245 * t518 + t246 * t521; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t493, t494, 0, 0, qJDD(1), 0, 0, 0, 0, 0, 0, -t539 - 0.2e1 * t604, t533, pkin(1) * t462 + qJ(2) * t461, qJDD(1), 0, 0, 0, 0, 0, 0, qJDD(3) + t533, t539 + 0.2e1 * t554 + t563, -qJ(2) * t449 + t607 * t448, (t483 - t558) * t520, -t481 * t520 - t484 * t517, -t498 * t517 + t585, (-t482 + t557) * t517, t496 * t520 - t588, 0, t606 * t442 + t607 * t481 + t578, t606 * t443 + t607 * t484 + t576, -t606 * t485 - t607 * t488 - t351, t606 * t351 + t433 * t607, t542, -t682, t664, t621, t681, t620, -t517 * t300 + t520 * t311 + t313 * t606 + t654, -t517 * t301 + t520 * t318 + t319 * t606 - t690, t520 * t273 + t684 + (t607 + t613) * t649, t606 * t277 + (t546 + t607) * t284, t542, t664, t682, t620, -t681, t621, t520 * t274 - t517 * t276 + t320 * t606 + t654, t520 * t265 - t517 * t290 + t607 * t649 + t684, t520 * t272 - t517 * t275 + t312 * t606 + t690, -t517 * t259 + t520 * t261 + t268 * t606 + t270 * t607;];
tauB_reg  = t1;
