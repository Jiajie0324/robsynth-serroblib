% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RRPPRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,d6,theta3]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x32]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 09:27
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RRPPRR8_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR8_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR8_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR8_inertiaDJ_regmin_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 09:26:08
% EndTime: 2019-03-09 09:26:14
% DurationCPUTime: 1.80s
% Computational Cost: add. (1879->245), mult. (4655->427), div. (0->0), fcn. (4249->8), ass. (0->138)
t111 = sin(pkin(10));
t109 = t111 ^ 2;
t112 = cos(pkin(10));
t182 = (t112 ^ 2 + t109) * qJD(3);
t114 = sin(qJ(5));
t101 = t114 * t111;
t116 = cos(qJ(5));
t181 = t116 * t112 + t101;
t117 = cos(qJ(2));
t115 = sin(qJ(2));
t161 = qJD(2) * t115;
t180 = qJ(4) * t161 - t117 * qJD(4);
t164 = t115 * qJ(3);
t78 = -t112 * pkin(3) - t111 * qJ(4) - pkin(2);
t179 = qJD(2) * (-t117 * t78 + t164);
t178 = qJD(5) + qJD(6);
t177 = -pkin(3) - pkin(4);
t176 = cos(qJ(6));
t175 = pkin(5) * t117;
t174 = -pkin(8) + qJ(3);
t108 = t117 * pkin(3);
t130 = -pkin(2) * t117 - t164;
t79 = -pkin(1) + t130;
t167 = t111 * t117;
t97 = pkin(7) * t167;
t40 = t117 * pkin(4) + t108 + t97 + (-pkin(8) * t115 - t79) * t112;
t169 = t111 * t115;
t165 = t112 * t117;
t98 = pkin(7) * t165;
t58 = t111 * t79 + t98;
t53 = -qJ(4) * t117 + t58;
t45 = pkin(8) * t169 + t53;
t173 = t114 * t40 + t116 * t45;
t83 = t174 * t111;
t84 = t174 * t112;
t172 = t114 * t83 + t116 * t84;
t67 = -t115 * qJD(3) + (pkin(2) * t115 - qJ(3) * t117) * qJD(2);
t171 = t112 * t67;
t170 = qJ(3) * t182;
t168 = t111 * t116;
t166 = t112 * t115;
t160 = qJD(2) * t117;
t159 = qJD(3) * t112;
t158 = qJD(3) * t117;
t157 = qJD(5) * t114;
t156 = qJD(5) * t115;
t155 = qJD(5) * t116;
t154 = qJD(5) * t117;
t113 = sin(qJ(6));
t153 = qJD(6) * t113;
t152 = t109 * qJD(4);
t151 = t111 * qJD(3);
t150 = t111 * qJD(4);
t148 = -0.2e1 * pkin(1) * qJD(2);
t92 = t112 * t160;
t147 = -t156 * t101 - t114 * t92 - t155 * t166;
t104 = pkin(7) * t160;
t146 = qJ(4) * t92 + qJD(4) * t166 - t104;
t145 = t176 * pkin(5);
t89 = t111 * t160;
t118 = t116 * t89 + t147;
t139 = -pkin(7) * t111 - pkin(3);
t22 = -t171 + (-pkin(8) * t165 + (-pkin(4) + t139) * t115) * qJD(2);
t60 = t111 * t67;
t23 = t60 + (-pkin(7) * t166 + pkin(8) * t167) * qJD(2) + t180;
t8 = -t114 * t22 - t116 * t23 - t40 * t155 + t157 * t45;
t5 = pkin(9) * t118 - t8;
t144 = t176 * t5;
t143 = pkin(5) * t161;
t142 = pkin(5) * t153;
t141 = pkin(7) * t161;
t86 = t114 * t166;
t133 = t115 * t168 - t86;
t13 = pkin(9) * t133 + t173;
t140 = t176 * t13;
t77 = -t112 * t114 + t168;
t35 = t156 * t77 + t160 * t181;
t9 = -t173 * qJD(5) - t114 * t23 + t116 * t22;
t4 = -t35 * pkin(9) - t143 + t9;
t138 = -t113 * t5 + t176 * t4;
t137 = t115 * t160;
t57 = t112 * t79 - t97;
t136 = -t114 * t45 + t116 * t40;
t135 = -t114 * t84 + t116 * t83;
t70 = t112 * pkin(4) - t78;
t134 = qJD(6) * t145;
t132 = -t111 * t155 + t112 * t157;
t131 = t176 * t181;
t50 = t111 * t141 + t171;
t51 = -t112 * t141 + t60;
t129 = -t111 * t50 + t112 * t51;
t126 = (-pkin(5) * t116 + t177) * t111;
t65 = t181 * t115;
t12 = -t65 * pkin(9) + t136 + t175;
t125 = t113 * t13 - t176 * t12;
t124 = t113 * t12 + t140;
t32 = -pkin(9) * t77 + t135;
t33 = -pkin(9) * t181 + t172;
t123 = t113 * t33 - t176 * t32;
t122 = t113 * t32 + t176 * t33;
t25 = -t114 * t151 - t116 * t159 - t83 * t155 + t157 * t84;
t121 = t113 * t116 + t176 * t114;
t120 = t113 * t114 - t176 * t116;
t119 = t176 * t133;
t44 = -t113 * t181 + t176 * t77;
t31 = t113 * t133 + t176 * t65;
t26 = -t172 * qJD(5) - t114 * t159 + t116 * t151;
t96 = qJ(4) * t166;
t88 = t117 * t151;
t87 = -0.2e1 * t137;
t76 = 0.2e1 * t182;
t69 = t181 * qJD(5);
t61 = -t96 + (pkin(3) * t111 + pkin(7)) * t115;
t55 = -pkin(5) * t132 + t150;
t54 = t108 - t57;
t52 = t96 + (t177 * t111 - pkin(7)) * t115;
t49 = t178 * t121;
t48 = t178 * t120;
t47 = pkin(5) * t181 + t70;
t46 = pkin(3) * t89 - t146;
t43 = t113 * t77 + t131;
t42 = t139 * t161 - t171;
t39 = t177 * t89 + t146;
t38 = t51 + t180;
t30 = t113 * t65 - t119;
t24 = t86 * pkin(5) + t96 + (-pkin(7) + t126) * t115;
t18 = t69 * pkin(9) + t26;
t17 = pkin(9) * t132 - t25;
t16 = t44 * qJD(6) - t113 * t69 - t176 * t132;
t15 = qJD(6) * t131 - t113 * t132 + t77 * t153 + t176 * t69;
t14 = -pkin(5) * t147 + t126 * t160 + t146;
t11 = t31 * qJD(6) + t113 * t35 - t176 * t118;
t10 = -qJD(6) * t119 - t113 * t118 + t65 * t153 - t176 * t35;
t7 = -t122 * qJD(6) - t113 * t17 + t176 * t18;
t6 = t123 * qJD(6) - t113 * t18 - t176 * t17;
t2 = -qJD(6) * t124 + t138;
t1 = qJD(6) * t125 - t113 * t4 - t144;
t3 = [0, 0, 0, 0.2e1 * t137, 0.2e1 * (-t115 ^ 2 + t117 ^ 2) * qJD(2), 0, 0, 0, t115 * t148, t117 * t148, -0.2e1 * t50 * t117 + 0.2e1 * (t57 + 0.2e1 * t97) * t161, 0.2e1 * t51 * t117 + 0.2e1 * (-t58 + 0.2e1 * t98) * t161, 0.2e1 * (-t111 * t51 - t112 * t50) * t115 + 0.2e1 * (-t111 * t58 - t112 * t57) * t160, 0.2e1 * pkin(7) ^ 2 * t137 + 0.2e1 * t57 * t50 + 0.2e1 * t58 * t51, 0.2e1 * t46 * t169 + 0.2e1 * t42 * t117 + 0.2e1 * (-t115 * t54 + t167 * t61) * qJD(2), 0.2e1 * (-t111 * t38 + t112 * t42) * t115 + 0.2e1 * (-t111 * t53 + t112 * t54) * t160, -0.2e1 * t46 * t166 - 0.2e1 * t38 * t117 + 0.2e1 * (t115 * t53 - t165 * t61) * qJD(2), 0.2e1 * t38 * t53 + 0.2e1 * t42 * t54 + 0.2e1 * t46 * t61, 0.2e1 * t65 * t35, 0.2e1 * t118 * t65 + 0.2e1 * t133 * t35, 0.2e1 * t117 * t35 - 0.2e1 * t161 * t65, 0.2e1 * t117 * t118 - 0.2e1 * t133 * t161, t87, 0.2e1 * t9 * t117 - 0.2e1 * t118 * t52 - 0.2e1 * t133 * t39 - 0.2e1 * t136 * t161, 0.2e1 * t8 * t117 + 0.2e1 * t173 * t161 + 0.2e1 * t52 * t35 + 0.2e1 * t39 * t65, -0.2e1 * t31 * t10, 0.2e1 * t10 * t30 - 0.2e1 * t11 * t31, -0.2e1 * t10 * t117 - 0.2e1 * t161 * t31, -0.2e1 * t11 * t117 + 0.2e1 * t161 * t30, t87, 0.2e1 * t24 * t11 + 0.2e1 * t2 * t117 + 0.2e1 * t125 * t161 + 0.2e1 * t14 * t30, 0.2e1 * t1 * t117 - 0.2e1 * t24 * t10 + 0.2e1 * t124 * t161 + 0.2e1 * t14 * t31; 0, 0, 0, 0, 0, t160, -t161, 0, -t104, t141, t88 + (t111 * t130 - t98) * qJD(2), t112 * t158 + (t112 * t130 + t97) * qJD(2), t129, -pkin(2) * t104 + (-t111 * t57 + t112 * t58) * qJD(3) + t129 * qJ(3), -t111 * t179 - t46 * t112 - t115 * t152 + t88, t111 * t42 + t112 * t38, -t46 * t111 + (t115 * t150 - t158 + t179) * t112, t46 * t78 + (qJ(3) * t38 + qJD(3) * t53) * t112 + (qJ(3) * t42 + qJD(3) * t54 - qJD(4) * t61) * t111, t35 * t77 - t65 * t69, t118 * t77 + t132 * t65 - t133 * t69 - t181 * t35, -t117 * t69 - t161 * t77, t117 * t132 + t161 * t181, 0, t26 * t117 - t118 * t70 - t132 * t52 - t133 * t150 - t135 * t161 + t181 * t39, t25 * t117 + t65 * t150 + t161 * t172 + t70 * t35 + t39 * t77 - t52 * t69, -t10 * t44 - t15 * t31, t10 * t43 - t11 * t44 + t15 * t30 - t16 * t31, -t117 * t15 - t161 * t44, -t117 * t16 + t161 * t43, 0, t47 * t11 + t7 * t117 + t123 * t161 + t14 * t43 + t24 * t16 + t55 * t30, -t47 * t10 + t6 * t117 + t122 * t161 + t14 * t44 - t24 * t15 + t55 * t31; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76, 0.2e1 * t170, 0.2e1 * t112 * t150, t76, 0.2e1 * t152, -0.2e1 * t150 * t78 + 0.2e1 * t170, -0.2e1 * t77 * t69, 0.2e1 * t132 * t77 + 0.2e1 * t181 * t69, 0, 0, 0, -0.2e1 * t132 * t70 + 0.2e1 * t150 * t181, 0.2e1 * t150 * t77 - 0.2e1 * t69 * t70, -0.2e1 * t44 * t15, 0.2e1 * t15 * t43 - 0.2e1 * t16 * t44, 0, 0, 0, 0.2e1 * t16 * t47 + 0.2e1 * t43 * t55, -0.2e1 * t15 * t47 + 0.2e1 * t44 * t55; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t89, t92, 0, t104, t89, 0, -t92, t46, 0, 0, 0, 0, 0, t118, -t35, 0, 0, 0, 0, 0, -t11, t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t150, 0, 0, 0, 0, 0, t132, t69, 0, 0, 0, 0, 0, -t16, t15; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t161, t92, 0, t42, 0, 0, 0, 0, 0, -t114 * t154 - t116 * t161, t114 * t161 - t116 * t154, 0, 0, 0, 0, 0, -t49 * t117 + t120 * t161, t48 * t117 + t121 * t161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t35, t118, -t161, t9, t8, 0, 0, -t10, -t11, -t161, -t176 * t143 + (-t140 + (-t12 - t175) * t113) * qJD(6) + t138, -t144 + (-t4 + t143) * t113 + (-t117 * t145 + t125) * qJD(6); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t69, t132, 0, t26, t25, 0, 0, -t15, -t16, 0, t7, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t157, -t155, 0, 0, 0, 0, 0, -t49, t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.2e1 * t142, -0.2e1 * t134; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t10, -t11, -t161, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t15, -t16, 0, t7, t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t49, t48; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t142, -t134; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
