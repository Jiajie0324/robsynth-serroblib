% Calculate inertial parameters regressor of coriolis joint torque vector for
% S6RRPPRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,d6,theta3]';
% 
% Output:
% tauc_reg [6x(6*10)]
%   inertial parameter regressor of coriolis joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 09:27
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauc_reg = S6RRPPRR8_coriolisvecJ_fixb_reg2_slag_vp(qJ, qJD, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR8_coriolisvecJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR8_coriolisvecJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR8_coriolisvecJ_fixb_reg2_slag_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From coriolisvec_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 09:26:08
% EndTime: 2019-03-09 09:26:26
% DurationCPUTime: 8.04s
% Computational Cost: add. (10030->545), mult. (24234->748), div. (0->0), fcn. (16987->8), ass. (0->266)
t254 = sin(pkin(10));
t255 = cos(pkin(10));
t258 = sin(qJ(5));
t260 = cos(qJ(5));
t261 = cos(qJ(2));
t326 = qJD(1) * t261;
t301 = t255 * t326;
t303 = t254 * t326;
t315 = qJD(5) * t260;
t316 = qJD(5) * t258;
t334 = -t254 * t315 + t255 * t316 + t258 * t301 - t260 * t303;
t198 = t254 * t258 + t255 * t260;
t177 = t198 * qJD(5);
t270 = t198 * t261;
t333 = qJD(1) * t270 + t177;
t239 = qJD(5) + t326;
t227 = qJD(6) + t239;
t259 = sin(qJ(2));
t281 = pkin(2) * t259 - qJ(3) * t261;
t204 = t281 * qJD(1);
t179 = t254 * t204;
t327 = qJD(1) * t259;
t240 = qJ(4) * t327;
t341 = t255 * t259;
t342 = t254 * t261;
t271 = -pkin(7) * t341 + pkin(8) * t342;
t110 = qJD(1) * t271 + t179 + t240;
t367 = -pkin(8) + qJ(3);
t216 = t367 * t254;
t217 = t367 * t255;
t143 = t258 * t216 + t260 * t217;
t319 = qJD(3) * t260;
t320 = qJD(3) * t258;
t306 = -pkin(7) * t254 - pkin(3);
t340 = t255 * t261;
t311 = pkin(8) * t340;
t267 = -t311 + (-pkin(4) + t306) * t259;
t347 = t204 * t255;
t92 = qJD(1) * t267 - t347;
t364 = qJD(5) * t143 - t110 * t258 - t254 * t319 + t255 * t320 + t260 * t92;
t363 = t260 * t110 - t216 * t315 + t217 * t316 - t254 * t320 - t255 * t319 + t258 * t92;
t304 = t254 * t327;
t313 = t255 * qJD(2);
t191 = t304 - t313;
t302 = t255 * t327;
t325 = qJD(2) * t254;
t193 = t302 + t325;
t277 = t191 * t258 + t193 * t260;
t351 = t277 * t239;
t312 = qJD(1) * qJD(2);
t297 = t261 * t312;
t223 = t254 * t297;
t287 = t255 * t297;
t70 = qJD(5) * t277 - t260 * t223 + t258 * t287;
t401 = -t70 + t351;
t252 = t259 ^ 2;
t253 = t261 ^ 2;
t292 = qJD(1) * (t252 - 0.2e1 * t253);
t400 = (t191 * t259 + t254 * t292) * qJD(2);
t257 = sin(qJ(6));
t278 = -t260 * t191 + t193 * t258;
t369 = cos(qJ(6));
t371 = t257 * t277 + t278 * t369;
t399 = t371 ^ 2;
t372 = -t257 * t278 + t277 * t369;
t387 = t372 ^ 2;
t398 = -pkin(5) * t327 - pkin(9) * t333 + t364;
t397 = -pkin(9) * t334 + t363;
t396 = t227 * t371;
t395 = t227 * t372;
t368 = t371 * t372;
t250 = t254 ^ 2;
t251 = t255 ^ 2;
t349 = t191 * t255;
t394 = ((t250 - t251) * qJD(2) - t193 * t254 - t349) * t326;
t323 = qJD(2) * t261;
t393 = (t254 * (t193 + 0.2e1 * t302) + t349) * t323;
t390 = t387 - t399;
t298 = qJD(6) * t369;
t314 = qJD(6) * t257;
t69 = -t191 * t315 + t193 * t316 - t258 * t223 - t260 * t287;
t22 = t257 * t70 + t277 * t314 + t278 * t298 + t369 * t69;
t389 = -t22 + t396;
t174 = qJD(2) * t281 - qJD(3) * t259;
t159 = t174 * qJD(1);
t242 = pkin(7) * t327;
t209 = (qJD(3) - t242) * qJD(2);
t106 = t159 * t255 - t254 * t209;
t370 = -pkin(3) - pkin(4);
t60 = (t259 * t370 - t311) * t312 - t106;
t107 = t254 * t159 + t255 * t209;
t296 = t259 * t312;
t307 = qJ(4) * t296 + t107;
t61 = (pkin(8) * t325 - qJD(4)) * t326 + t307;
t356 = qJ(3) * t259;
t212 = -pkin(2) * t261 - pkin(1) - t356;
t183 = t212 * qJD(1);
t243 = pkin(7) * t326;
t220 = qJD(2) * qJ(3) + t243;
t130 = t183 * t255 - t254 * t220;
t109 = pkin(3) * t326 + qJD(4) - t130;
t68 = pkin(4) * t326 - pkin(8) * t193 + t109;
t131 = t254 * t183 + t255 * t220;
t112 = -qJ(4) * t326 + t131;
t74 = pkin(8) * t191 + t112;
t12 = t258 * t60 + t260 * t61 + t68 * t315 - t316 * t74;
t11 = -pkin(9) * t70 + t12;
t32 = -t258 * t74 + t260 * t68;
t28 = -pkin(9) * t277 + t32;
t26 = pkin(5) * t239 + t28;
t33 = t258 * t68 + t260 * t74;
t29 = -pkin(9) * t278 + t33;
t13 = -qJD(5) * t33 - t258 * t61 + t260 * t60;
t8 = -pkin(5) * t296 + pkin(9) * t69 + t13;
t266 = -t11 * t369 - t257 * t8 - t26 * t298 + t29 * t314;
t256 = qJD(2) * pkin(2);
t211 = qJD(3) + t242 - t256;
t102 = t191 * pkin(3) - t193 * qJ(4) + t211;
t71 = -pkin(4) * t191 - t102;
t41 = pkin(5) * t278 + t71;
t388 = t41 * t371 + t266;
t386 = t277 ^ 2;
t385 = t278 ^ 2;
t384 = -0.2e1 * t312;
t383 = -t239 * t32 + t12;
t382 = t239 * t33 + t13;
t353 = t278 * t239;
t381 = t69 - t353;
t236 = pkin(7) * t342;
t249 = t261 * pkin(3);
t115 = pkin(4) * t261 + t236 + t249 + (-pkin(8) * t259 - t212) * t255;
t237 = pkin(7) * t340;
t155 = t254 * t212 + t237;
t145 = -qJ(4) * t261 + t155;
t344 = t254 * t259;
t128 = pkin(8) * t344 + t145;
t46 = t258 * t115 + t260 * t128;
t318 = qJD(4) * t254;
t332 = qJ(4) * t301 - t243;
t289 = -t303 * t370 + t318 - t332;
t189 = t193 ^ 2;
t379 = -t191 ^ 2 - t189;
t317 = qJD(4) * t261;
t324 = qJD(2) * t259;
t378 = qJ(4) * t324 - t317;
t309 = t369 * t29;
t7 = t257 * t26 + t309;
t2 = -qJD(6) * t7 - t257 * t11 + t369 * t8;
t376 = -t372 * t41 + t2;
t23 = qJD(6) * t372 - t257 * t69 + t369 * t70;
t375 = -t23 + t395;
t142 = t260 * t216 - t217 * t258;
t343 = t254 * t260;
t199 = -t255 * t258 + t343;
t97 = -pkin(9) * t199 + t142;
t98 = -pkin(9) * t198 + t143;
t40 = t257 * t97 + t369 * t98;
t366 = qJD(6) * t40 - t257 * t397 + t369 * t398;
t39 = -t257 * t98 + t369 * t97;
t365 = -qJD(6) * t39 + t257 * t398 + t369 * t397;
t362 = t198 * t298 + t199 * t314 - t257 * t334 + t333 * t369;
t127 = -t257 * t198 + t199 * t369;
t361 = qJD(6) * t127 - t257 * t333 - t334 * t369;
t358 = t257 * t29;
t357 = -pkin(5) * t334 + t289;
t355 = t109 * t259;
t354 = t112 * t259;
t352 = t277 * t278;
t350 = t174 * t255;
t346 = t239 * t261;
t263 = qJD(1) ^ 2;
t345 = t253 * t263;
t339 = t261 * t263;
t262 = qJD(2) ^ 2;
t338 = t262 * t259;
t337 = t262 * t261;
t272 = t257 * t258 - t260 * t369;
t336 = t227 * t272;
t203 = t257 * t260 + t258 * t369;
t335 = t227 * t203;
t299 = t261 * t313;
t331 = -qJ(4) * t299 - qJD(4) * t341;
t328 = t252 - t253;
t322 = qJD(3) * t193;
t321 = qJD(3) * t255;
t210 = -t255 * pkin(3) - t254 * qJ(4) - pkin(2);
t310 = pkin(7) * t324;
t308 = t254 * t345;
t305 = pkin(3) * t254 + pkin(7);
t300 = t254 * t323;
t294 = -t211 - t256;
t293 = pkin(1) * t384;
t45 = t260 * t115 - t128 * t258;
t154 = t212 * t255 - t236;
t180 = t255 * pkin(4) - t210;
t291 = t191 + t313;
t290 = -t193 + t325;
t151 = pkin(3) * t303 - t332;
t288 = t151 + t318;
t238 = pkin(7) * t297;
t95 = pkin(3) * t223 - qJ(4) * t287 - t193 * qJD(4) + t238;
t286 = t261 * t296;
t285 = t254 * t370 - pkin(7);
t284 = t259 * t306;
t283 = -t193 * t326 + t223;
t280 = pkin(4) * t223 + t95;
t276 = qJD(1) * t291;
t275 = qJD(1) * t290;
t148 = -pkin(7) * t302 + t179;
t162 = t254 * t174;
t140 = -t255 * t310 + t162;
t274 = t191 * t300 + t250 * t286;
t169 = t198 * t259;
t37 = pkin(5) * t261 - pkin(9) * t169 + t45;
t168 = t258 * t341 - t259 * t343;
t38 = -pkin(9) * t168 + t46;
t20 = -t257 * t38 + t369 * t37;
t21 = t257 * t37 + t369 * t38;
t94 = -t257 * t168 + t169 * t369;
t81 = qJD(2) * t267 - t350;
t82 = qJD(2) * t271 + t162 + t378;
t24 = t115 * t315 - t128 * t316 + t258 * t81 + t260 * t82;
t35 = pkin(5) * t70 - t280;
t268 = t276 * t342;
t233 = qJ(4) * t341;
t144 = t259 * t285 + t233;
t108 = t285 * t323 - t331;
t25 = -qJD(5) * t46 - t258 * t82 + t260 * t81;
t235 = t259 * t339;
t222 = qJD(3) * t303;
t221 = -0.2e1 * t286;
t171 = t191 * t326;
t170 = t191 * t321;
t163 = t259 * t305 - t233;
t147 = pkin(7) * t304 + t347;
t146 = -t154 + t249;
t141 = t171 + t287;
t139 = t254 * t310 + t350;
t136 = pkin(5) * t198 + t180;
t135 = qJD(1) * t284 - t347;
t134 = t148 + t240;
t133 = t305 * t323 + t331;
t129 = (t193 * t255 + t251 * t327) * t323;
t126 = t198 * t369 + t199 * t257;
t125 = t275 * t340;
t119 = qJD(2) * t284 - t350;
t118 = t255 * t345 + t259 * t275;
t116 = (t193 * t259 + t255 * t292) * qJD(2);
t105 = t140 + t378;
t101 = qJD(5) * t199 * t259 + qJD(2) * t270;
t100 = t177 * t259 + t258 * t299 - t260 * t300;
t93 = t168 * t369 + t169 * t257;
t86 = pkin(5) * t168 + t144;
t85 = -pkin(3) * t296 - t106;
t73 = -qJD(1) * t317 + t307;
t44 = pkin(5) * t100 + t108;
t31 = qJD(6) * t94 + t100 * t369 + t257 * t101;
t30 = t257 * t100 - t101 * t369 + t168 * t298 + t169 * t314;
t17 = -pkin(9) * t100 + t24;
t16 = -pkin(5) * t324 - pkin(9) * t101 + t25;
t10 = t28 * t369 - t358;
t9 = -t257 * t28 - t309;
t6 = t26 * t369 - t358;
t4 = -qJD(6) * t21 + t16 * t369 - t257 * t17;
t3 = qJD(6) * t20 + t257 * t16 + t17 * t369;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t286, t328 * t384, t337, t221, -t338, 0, -pkin(7) * t337 + t259 * t293, pkin(7) * t338 + t261 * t293, 0, 0, t129, -t393, t116, t274, -t400, t221 (-qJD(1) * t139 - t106) * t261 + ((pkin(7) * t191 + t211 * t254) * t261 + (t130 + (t154 + 0.2e1 * t236) * qJD(1)) * t259) * qJD(2) (qJD(1) * t140 + t107) * t261 + ((pkin(7) * t193 + t211 * t255) * t261 + (-t131 + (-t155 + 0.2e1 * t237) * qJD(1)) * t259) * qJD(2), -t139 * t193 - t140 * t191 + (-t106 * t255 - t107 * t254) * t259 + (-t130 * t255 - t131 * t254 + (-t154 * t255 - t155 * t254) * qJD(1)) * t323, t106 * t154 + t107 * t155 + t130 * t139 + t131 * t140 + (t211 + t242) * pkin(7) * t323, t129, t116, t393, t221, t400, t274, t95 * t344 + t133 * t191 + (qJD(1) * t119 + t85) * t261 + (t102 * t342 - t355 + (-t146 * t259 + t163 * t342) * qJD(1)) * qJD(2), -t105 * t191 + t119 * t193 + (-t254 * t73 + t255 * t85) * t259 + (t109 * t255 - t112 * t254 + (-t145 * t254 + t146 * t255) * qJD(1)) * t323, -t95 * t341 - t133 * t193 + (-qJD(1) * t105 - t73) * t261 + (-t102 * t340 + t354 + (t145 * t259 - t163 * t340) * qJD(1)) * qJD(2), t102 * t133 + t105 * t112 + t109 * t119 + t145 * t73 + t146 * t85 + t163 * t95, t101 * t277 - t169 * t69, -t100 * t277 - t101 * t278 + t168 * t69 - t169 * t70, t101 * t239 - t261 * t69 + (-qJD(1) * t169 - t277) * t324, t100 * t278 + t168 * t70, -t100 * t239 - t261 * t70 + (qJD(1) * t168 + t278) * t324 (-t239 - t326) * t324, t100 * t71 + t108 * t278 + t13 * t261 + t144 * t70 - t168 * t280 + t239 * t25 + (-qJD(1) * t45 - t32) * t324, t101 * t71 + t108 * t277 - t12 * t261 - t144 * t69 - t169 * t280 - t239 * t24 + (qJD(1) * t46 + t33) * t324, -t100 * t33 - t101 * t32 - t12 * t168 - t13 * t169 - t24 * t278 - t25 * t277 + t45 * t69 - t46 * t70, t108 * t71 + t12 * t46 + t13 * t45 - t144 * t280 + t24 * t33 + t25 * t32, -t22 * t94 - t30 * t372, t22 * t93 - t23 * t94 + t30 * t371 - t31 * t372, -t22 * t261 - t227 * t30 + (-qJD(1) * t94 - t372) * t324, t23 * t93 + t31 * t371, -t227 * t31 - t23 * t261 + (qJD(1) * t93 + t371) * t324 (-t227 - t326) * t324, t2 * t261 + t227 * t4 + t23 * t86 + t31 * t41 + t35 * t93 + t44 * t371 + (-qJD(1) * t20 - t6) * t324, t266 * t261 - t22 * t86 - t227 * t3 - t30 * t41 + t35 * t94 + t44 * t372 + (qJD(1) * t21 + t7) * t324, -t2 * t94 + t20 * t22 - t21 * t23 + t266 * t93 - t3 * t371 + t30 * t6 - t31 * t7 - t372 * t4, t2 * t20 - t21 * t266 + t3 * t7 + t35 * t86 + t4 * t6 + t41 * t44; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t235, t328 * t263, 0, t235, 0, 0, t263 * pkin(1) * t259, pkin(1) * t339, 0, 0, t125, -t394, t118, -t268, t291 * t327 - t308, t235, t222 + ((-qJ(3) * t325 - t130) * t259 + (-pkin(7) * t291 + t254 * t294 + t147) * t261) * qJD(1) ((-qJ(3) * t313 + t131) * t259 + (-t148 + t290 * pkin(7) + (qJD(3) + t294) * t255) * t261) * qJD(1), t147 * t193 + t148 * t191 - t170 + (t130 * t326 + t107) * t255 + (t131 * t326 - t106 + t322) * t254, -t130 * t147 - t131 * t148 + (-t130 * t254 + t131 * t255) * qJD(3) + (-t106 * t254 + t107 * t255) * qJ(3) + t294 * t243, t125, t118, t394, t235, -t259 * t276 + t308, -t268, -t255 * t95 + t222 - t288 * t191 + (t355 - t135 * t261 + (-t102 * t261 + (t210 * t261 - t356) * qJD(2)) * t254) * qJD(1), t134 * t191 - t135 * t193 - t170 + (-t109 * t326 + t73) * t255 + (t112 * t326 + t322 + t85) * t254, -t254 * t95 + t288 * t193 + (-t354 + t134 * t261 + (qJ(3) * t324 + (-qJD(2) * t210 - qJD(3) + t102) * t261) * t255) * qJD(1), qJ(3) * t255 * t73 - t102 * t151 - t109 * t135 + t210 * t95 + (-t134 + t321) * t112 + (qJ(3) * t85 + qJD(3) * t109 - qJD(4) * t102) * t254, -t199 * t69 - t277 * t333, t198 * t69 - t199 * t70 + t277 * t334 + t278 * t333, -t333 * t239 + (-qJD(2) * t199 + t277) * t327, t198 * t70 - t278 * t334, t334 * t239 + (qJD(2) * t198 - t278) * t327, t239 * t327, t180 * t70 - t198 * t280 - t334 * t71 - t364 * t239 + t289 * t278 + (-qJD(2) * t142 + t32) * t327, -t180 * t69 - t199 * t280 - t333 * t71 + t363 * t239 + t289 * t277 + (qJD(2) * t143 - t33) * t327, -t12 * t198 - t13 * t199 + t142 * t69 - t143 * t70 + t277 * t364 + t278 * t363 + t32 * t333 + t33 * t334, t12 * t143 + t13 * t142 - t180 * t280 + t289 * t71 - t32 * t364 - t33 * t363, -t127 * t22 - t362 * t372, t126 * t22 - t127 * t23 - t361 * t372 + t362 * t371, -t362 * t227 + (-qJD(2) * t127 + t372) * t327, t126 * t23 + t361 * t371, -t361 * t227 + (qJD(2) * t126 - t371) * t327, t227 * t327, t126 * t35 + t136 * t23 + t357 * t371 + t361 * t41 - t366 * t227 + (-qJD(2) * t39 + t6) * t327, t127 * t35 - t136 * t22 + t357 * t372 - t362 * t41 + t365 * t227 + (qJD(2) * t40 - t7) * t327, t126 * t266 - t127 * t2 + t22 * t39 - t23 * t40 - t361 * t7 + t362 * t6 + t365 * t371 + t366 * t372, t136 * t35 + t2 * t39 - t266 * t40 + t357 * t41 - t365 * t7 - t366 * t6; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t283, t141, t379, t130 * t193 + t131 * t191 + t238, 0, 0, 0, 0, 0, 0, t283, t379, -t141, -t109 * t193 + t112 * t191 + t95, 0, 0, 0, 0, 0, 0, -t70 - t351, t69 + t353, t385 + t386, -t277 * t32 - t278 * t33 + t280, 0, 0, 0, 0, 0, 0, -t23 - t395, t22 + t396, t387 + t399, -t371 * t7 - t372 * t6 - t35; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t191 * t193 - t296, -t171 + t287, -t189 - t345, t102 * t193 + (-pkin(3) * t324 + t112 * t261) * qJD(1) - t106, 0, 0, 0, 0, 0, 0, -t239 * t316 - t278 * t193 + (-t258 * t346 - t260 * t324) * qJD(1), -t239 * t315 - t277 * t193 + (t258 * t324 - t260 * t346) * qJD(1), t258 * t401 + t381 * t260, -t193 * t71 + t258 * t383 + t260 * t382, 0, 0, 0, 0, 0, 0, -t193 * t371 - t227 * t335 + t272 * t296, -t193 * t372 + t203 * t296 + t227 * t336, -t203 * t23 - t22 * t272 + t335 * t372 + t336 * t371, -t193 * t41 - t2 * t272 - t203 * t266 - t335 * t6 - t336 * t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t352, -t385 + t386, -t381, -t352, t401, -t296, -t277 * t71 + t382, t278 * t71 - t383, 0, 0, t368, t390, t389, -t368, t375, -t296, -t9 * t227 + (-t227 * t314 - t277 * t371 - t296 * t369) * pkin(5) + t376, t10 * t227 + (-t227 * t298 + t257 * t296 - t277 * t372) * pkin(5) + t388, t10 * t371 + t7 * t372 - t6 * t371 + t9 * t372 + (t369 * t22 - t23 * t257 + (t257 * t372 - t369 * t371) * qJD(6)) * pkin(5), -t7 * t10 - t6 * t9 + (t369 * t2 - t266 * t257 - t277 * t41 + (-t257 * t6 + t369 * t7) * qJD(6)) * pkin(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t368, t390, t389, -t368, t375, -t296, t7 * t227 + t376, t6 * t227 + t388, 0, 0;];
tauc_reg  = t1;
