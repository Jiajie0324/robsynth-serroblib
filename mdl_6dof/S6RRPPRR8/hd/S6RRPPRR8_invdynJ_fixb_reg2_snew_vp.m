% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPPRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,d6,theta3]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 11:23
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPPRR8_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR8_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR8_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR8_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR8_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR8_invdynJ_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 11:21:25
% EndTime: 2019-05-06 11:21:50
% DurationCPUTime: 11.54s
% Computational Cost: add. (42952->532), mult. (95367->715), div. (0->0), fcn. (66361->10), ass. (0->326)
t293 = cos(pkin(10));
t292 = sin(pkin(10));
t296 = sin(qJ(2));
t344 = qJD(1) * qJD(2);
t279 = t296 * t344;
t300 = cos(qJ(2));
t343 = t300 * qJDD(1);
t268 = -t279 + t343;
t349 = qJD(1) * t296;
t260 = -t293 * qJD(2) + t292 * t349;
t262 = t292 * qJD(2) + t293 * t349;
t378 = t262 * t260;
t310 = t268 - t378;
t369 = t292 * t310;
t258 = t262 ^ 2;
t290 = t300 ^ 2;
t302 = qJD(1) ^ 2;
t286 = t290 * t302;
t395 = -t258 - t286;
t169 = -t293 * t395 - t369;
t363 = t293 * t310;
t185 = -t292 * t395 + t363;
t284 = t296 * qJDD(1);
t335 = t300 * t344;
t267 = t284 + t335;
t320 = t292 * qJDD(2) + t293 * t267;
t346 = t300 * qJD(1);
t337 = t260 * t346;
t205 = t320 + t337;
t434 = pkin(7) * (t300 * t185 + t296 * t205) + pkin(1) * t169;
t432 = pkin(2) * t169;
t431 = qJ(3) * t169;
t430 = qJ(3) * t185;
t390 = t260 ^ 2;
t199 = -t390 - t258;
t239 = -t293 * qJDD(2) + t292 * t267;
t247 = t262 * t346;
t206 = t239 + t247;
t306 = -t320 + t337;
t417 = -t293 * t206 - t292 * t306;
t428 = -pkin(2) * t199 + qJ(3) * t417;
t243 = t390 - t286;
t427 = t300 * t206 + t296 * (t293 * t243 + t369);
t207 = t239 - t247;
t365 = t293 * t207;
t371 = t292 * t205;
t426 = t296 * (t365 + t371) + t300 * (t258 - t390);
t425 = pkin(7) * (t296 * t199 + t300 * t417);
t211 = t268 + t378;
t362 = t293 * t211;
t392 = -t390 - t286;
t401 = t292 * t392 - t362;
t423 = pkin(2) * t401;
t422 = qJ(3) * t401;
t244 = -t258 + t286;
t368 = t292 * t211;
t420 = t293 * t244 - t368;
t400 = t293 * t392 + t368;
t418 = -pkin(2) * t207 + qJ(3) * t400;
t157 = -t292 * t206 + t293 * t306;
t416 = t243 * t292 - t363;
t414 = t296 * (-t292 * t244 - t362) + t300 * t306;
t413 = pkin(7) * (t296 * t207 + t300 * t400) - pkin(1) * t401;
t412 = pkin(3) * t207;
t294 = sin(qJ(6));
t295 = sin(qJ(5));
t299 = cos(qJ(5));
t221 = -t299 * t260 + t295 * t262;
t223 = t295 * t260 + t299 * t262;
t298 = cos(qJ(6));
t178 = t298 * t221 + t294 * t223;
t180 = -t294 * t221 + t298 * t223;
t129 = t180 * t178;
t263 = qJDD(5) + t268;
t255 = qJDD(6) + t263;
t398 = -t129 + t255;
t409 = t294 * t398;
t182 = t223 * t221;
t397 = -t182 + t263;
t408 = t295 * t397;
t406 = t298 * t398;
t405 = t299 * t397;
t379 = t207 * t292;
t402 = t205 * t293 - t379;
t297 = sin(qJ(1));
t301 = cos(qJ(1));
t325 = t301 * g(1) + t297 * g(2);
t380 = qJDD(1) * pkin(7);
t253 = -t302 * pkin(1) - t325 + t380;
t323 = -t300 * pkin(2) - t296 * qJ(3);
t265 = t323 * qJD(1);
t330 = qJD(1) * t265 + t253;
t399 = t330 * t296;
t162 = -t221 * qJD(5) + t295 * t239 + t299 * t320;
t277 = qJD(5) + t346;
t201 = t277 * t221;
t145 = -t201 + t162;
t146 = t201 + t162;
t161 = -t223 * qJD(5) + t299 * t239 - t295 * t320;
t202 = t277 * t223;
t396 = t202 + t161;
t226 = t260 * pkin(3) - t262 * qJ(4);
t334 = t297 * g(1) - t301 * g(2);
t252 = qJDD(1) * pkin(1) + t302 * pkin(7) + t334;
t322 = t267 + t335;
t189 = -t322 * qJ(3) + (-t268 + t279) * pkin(2) - t252;
t386 = t296 * g(3);
t389 = qJD(2) ^ 2;
t194 = -pkin(2) * t389 + qJDD(2) * qJ(3) + t300 * t330 - t386;
t350 = t292 * t189 + t293 * t194;
t393 = -t268 * qJ(4) - 0.2e1 * qJD(4) * t346 - t260 * t226 + t350;
t385 = t300 * g(3);
t318 = -qJDD(2) * pkin(2) - t389 * qJ(3) + qJDD(3) + t385;
t307 = t320 * qJ(4) - t318 - t412;
t357 = t296 * t253;
t391 = -(qJ(4) * t260 * t300 - t265 * t296) * qJD(1) - t307 + t357;
t176 = t178 ^ 2;
t177 = t180 ^ 2;
t219 = t221 ^ 2;
t220 = t223 ^ 2;
t273 = qJD(6) + t277;
t272 = t273 ^ 2;
t275 = t277 ^ 2;
t388 = 2 * qJD(3);
t387 = pkin(3) + pkin(4);
t347 = qJD(4) * t262;
t130 = -0.2e1 * t347 + t391;
t316 = pkin(4) * t346 - t262 * pkin(8);
t115 = t239 * pkin(4) + pkin(8) * t390 - t262 * t316 + t130;
t326 = t277 * pkin(5) - t223 * pkin(9);
t72 = t161 * pkin(5) + t219 * pkin(9) - t223 * t326 + t115;
t384 = t294 * t72;
t348 = qJD(3) * t260;
t250 = -0.2e1 * t348;
t312 = t250 + t393;
t116 = -pkin(3) * t286 + t312;
t105 = -pkin(4) * t390 + t239 * pkin(8) - t316 * t346 + t116;
t332 = -t293 * t189 + t292 * t194;
t309 = t268 * pkin(3) - qJ(4) * t286 + qJDD(4) + t332;
t345 = t388 + t226;
t95 = t268 * pkin(4) + t306 * pkin(8) + (t260 * pkin(4) + t345) * t262 + t309;
t60 = t295 * t105 - t299 * t95;
t44 = pkin(5) * t397 - pkin(9) * t146 - t60;
t61 = t299 * t105 + t295 * t95;
t45 = -t219 * pkin(5) + t161 * pkin(9) - t277 * t326 + t61;
t26 = t294 * t45 - t298 * t44;
t27 = t294 * t44 + t298 * t45;
t15 = -t298 * t26 + t294 * t27;
t383 = t295 * t15;
t382 = t298 * t72;
t381 = t299 * t15;
t377 = t273 * t178;
t376 = t273 * t294;
t375 = t273 * t298;
t374 = t277 * t295;
t373 = t277 * t299;
t193 = t318 + t399;
t372 = t292 * t193;
t366 = t293 * t193;
t123 = t129 + t255;
t361 = t294 * t123;
t360 = t295 * t115;
t167 = t182 + t263;
t359 = t295 * t167;
t276 = t300 * t302 * t296;
t356 = t296 * (qJDD(2) + t276);
t355 = t298 * t123;
t354 = t299 * t115;
t353 = t299 * t167;
t351 = t300 * (-t276 + qJDD(2));
t342 = t300 * t129;
t341 = t300 * t182;
t340 = t300 * t378;
t339 = t178 * qJD(6) - t294 * t161 - t298 * t162;
t149 = t250 + t350;
t338 = pkin(3) * t293 + pkin(2);
t16 = t294 * t26 + t298 * t27;
t148 = t262 * t388 + t332;
t104 = t292 * t148 + t293 * t149;
t333 = -t298 * t161 + t294 * t162;
t234 = t357 + t385;
t235 = t300 * t253 - t386;
t331 = t296 * t234 + t300 * t235;
t328 = t292 * t337;
t127 = -t272 - t176;
t90 = t294 * t127 + t406;
t327 = pkin(5) * t90 - t26;
t324 = t296 * (t247 * t292 + t293 * t320) - t340;
t39 = t295 * t61 - t299 * t60;
t40 = t295 * t60 + t299 * t61;
t321 = t293 * t148 - t292 * t149;
t319 = -pkin(1) + t323;
t317 = -t339 - t377;
t315 = -t293 * t239 - t328;
t240 = t293 * t247;
t314 = t240 + t328;
t151 = -t177 - t272;
t97 = t298 * t151 - t361;
t313 = pkin(5) * t97 - t27;
t308 = (-qJD(6) + t273) * t180 - t333;
t254 = t300 * t268;
t305 = t254 + t296 * (t260 * t293 - t262 * t292) * t346;
t117 = t262 * t345 + t309;
t303 = t296 * (t292 * t239 - t293 * t337) + t340;
t289 = t296 ^ 2;
t285 = t289 * t302;
t269 = -0.2e1 * t279 + t343;
t266 = t284 + 0.2e1 * t335;
t249 = 0.2e1 * t347;
t198 = -t220 + t275;
t197 = t219 - t275;
t195 = t292 * t320 - t240;
t192 = -t220 - t275;
t181 = t220 - t219;
t175 = -t275 - t219;
t164 = -t177 + t272;
t163 = t176 - t272;
t156 = (-t221 * t299 + t223 * t295) * t277;
t155 = (t221 * t295 + t223 * t299) * t277;
t150 = -t219 - t220;
t143 = -t202 + t161;
t140 = t299 * t197 - t359;
t139 = -t295 * t198 + t405;
t138 = -t295 * t197 - t353;
t137 = -t299 * t198 - t408;
t136 = t299 * t162 - t223 * t374;
t135 = -t295 * t162 - t223 * t373;
t134 = -t295 * t161 + t221 * t373;
t133 = -t299 * t161 - t221 * t374;
t132 = -t295 * t192 - t353;
t131 = t299 * t192 - t359;
t128 = t177 - t176;
t126 = t299 * t175 - t408;
t125 = t295 * t175 + t405;
t121 = (-t178 * t298 + t180 * t294) * t273;
t120 = (-t178 * t294 - t180 * t298) * t273;
t119 = t249 - t391 - t412;
t118 = t249 - t399 + (t205 + t337) * qJ(4) + t307;
t114 = -t176 - t177;
t113 = -qJ(4) * t199 + t117;
t112 = (-t199 - t286) * pkin(3) + t312;
t110 = -t180 * qJD(6) - t333;
t109 = t298 * t163 - t361;
t108 = -t294 * t164 + t406;
t107 = t294 * t163 + t355;
t106 = t298 * t164 + t409;
t102 = t295 * t146 + t299 * t396;
t101 = t299 * t143 - t295 * t145;
t100 = -t299 * t146 + t295 * t396;
t99 = -t295 * t143 - t299 * t145;
t98 = -t294 * t151 - t355;
t93 = t292 * t131 + t293 * t132;
t92 = -t293 * t131 + t292 * t132;
t91 = t298 * t127 - t409;
t88 = t292 * t125 + t293 * t126;
t87 = -t293 * t125 + t292 * t126;
t85 = t339 - t377;
t81 = (qJD(6) + t273) * t180 + t333;
t80 = -t180 * t376 - t298 * t339;
t79 = t180 * t375 - t294 * t339;
t78 = -t294 * t110 + t178 * t375;
t77 = t298 * t110 + t178 * t376;
t76 = -t295 * t120 + t299 * t121;
t75 = -t299 * t120 - t295 * t121;
t74 = t293 * t116 + t292 * t117;
t73 = t292 * t116 - t293 * t117;
t71 = -pkin(8) * t131 + qJ(4) * t145 - t354;
t70 = -pkin(8) * t125 - qJ(4) * t143 - t360;
t69 = -t295 * t107 + t299 * t109;
t68 = -t295 * t106 + t299 * t108;
t67 = -t299 * t107 - t295 * t109;
t66 = -t299 * t106 - t295 * t108;
t65 = t292 * t100 + t293 * t102;
t64 = -t293 * t100 + t292 * t102;
t63 = -t295 * t97 + t299 * t98;
t62 = t295 * t98 + t299 * t97;
t59 = -pkin(8) * t132 + t145 * t387 + t360;
t58 = -pkin(8) * t126 - t143 * t387 - t354;
t57 = -t295 * t90 + t299 * t91;
t56 = t295 * t91 + t299 * t90;
t55 = -t294 * t85 + t298 * t308;
t54 = -t294 * t317 - t298 * t81;
t53 = t294 * t308 + t298 * t85;
t52 = -t294 * t81 + t298 * t317;
t51 = pkin(5) * t53;
t50 = -pkin(9) * t97 - t382;
t49 = -t295 * t79 + t299 * t80;
t48 = -t295 * t77 + t299 * t78;
t47 = -t295 * t80 - t299 * t79;
t46 = -t295 * t78 - t299 * t77;
t42 = -pkin(9) * t90 - t384;
t41 = -pkin(5) * t317 + pkin(9) * t98 - t384;
t38 = t292 * t62 + t293 * t63;
t37 = t292 * t63 - t293 * t62;
t36 = -pkin(5) * t81 + pkin(9) * t91 + t382;
t35 = -pkin(8) * t39 - qJ(4) * t115;
t34 = t292 * t56 + t293 * t57;
t33 = t292 * t57 - t293 * t56;
t32 = -t295 * t53 + t299 * t55;
t31 = -t295 * t52 + t299 * t54;
t30 = t295 * t55 + t299 * t53;
t29 = -t295 * t54 - t299 * t52;
t28 = -pkin(8) * t100 + qJ(4) * t150 - t39;
t24 = -pkin(8) * t40 - t115 * t387;
t23 = -pkin(8) * t102 + t150 * t387 - t40;
t22 = t292 * t39 + t293 * t40;
t21 = t292 * t40 - t293 * t39;
t20 = -pkin(8) * t62 + qJ(4) * t317 - t295 * t41 + t299 * t50;
t19 = t292 * t30 + t293 * t32;
t18 = t292 * t32 - t293 * t30;
t17 = -pkin(8) * t56 + qJ(4) * t81 - t295 * t36 + t299 * t42;
t14 = -pkin(8) * t63 - t295 * t50 - t299 * t41 + t317 * t387;
t13 = pkin(5) * t15;
t12 = -pkin(8) * t57 - t295 * t42 - t299 * t36 + t387 * t81;
t11 = pkin(5) * t72 + pkin(9) * t16;
t10 = -pkin(9) * t53 - t15;
t9 = -pkin(5) * t114 + pkin(9) * t55 + t16;
t8 = t299 * t16 - t383;
t7 = t295 * t16 + t381;
t6 = -pkin(8) * t30 + qJ(4) * t114 + t299 * t10 - t295 * t9;
t5 = -pkin(8) * t32 - t295 * t10 + t114 * t387 - t299 * t9;
t4 = t292 * t7 + t293 * t8;
t3 = t292 * t8 - t293 * t7;
t2 = -pkin(8) * t7 - pkin(9) * t381 - qJ(4) * t72 - t295 * t11;
t1 = -pkin(8) * t8 + pkin(9) * t383 - t299 * t11 - t387 * t72;
t25 = [0, 0, 0, 0, 0, qJDD(1), t334, t325, 0, 0, t322 * t296, t300 * t266 + t296 * t269, t356 + t300 * (-t285 + t389), -t296 * t335 + t254, t296 * (t286 - t389) + t351, 0, t300 * t252 + pkin(1) * t269 + pkin(7) * (t300 * (-t286 - t389) - t356), -t296 * t252 - pkin(1) * t266 + pkin(7) * (-t351 - t296 * (-t285 - t389)), pkin(1) * (t285 + t286) + (t289 + t290) * t380 + t331, pkin(1) * t252 + pkin(7) * t331, t324, -t426, t414, t303, t427, t305, t296 * (t372 - t422) + t300 * (t148 - t423) + t413, t296 * (t366 + t431) + t300 * (t149 + t432) + t434, t319 * t157 + t296 * t321 + t425, pkin(7) * (t300 * t104 + t296 * t193) - t319 * t321, t324, t414, t426, t305, -t427, t303, t296 * (-qJ(4) * t365 - t292 * t119 - t422) + t300 * (pkin(3) * t211 - qJ(4) * t392 + t117 - t423) + t413, t296 * (-qJ(3) * t157 - t292 * t112 + t293 * t113) + t300 * (-pkin(2) * t157 - pkin(3) * t306 + qJ(4) * t206) - pkin(1) * t157 + t425, t296 * (-pkin(3) * t371 + t293 * t118 - t431) + t300 * (-t432 + qJ(4) * t310 + 0.2e1 * t348 + (t395 + t286) * pkin(3) - t393) - t434, t296 * (-qJ(3) * t73 + (pkin(3) * t292 - qJ(4) * t293) * t130) + t300 * (-pkin(2) * t73 + pkin(3) * t117 - qJ(4) * t116) - pkin(1) * t73 + pkin(7) * (t296 * t130 + t300 * t74), t296 * (-t292 * t135 + t293 * t136) + t341, t296 * (t293 * t101 - t292 * t99) + t300 * t181, t296 * (-t292 * t137 + t293 * t139) + t300 * t146, t296 * (-t292 * t133 + t293 * t134) - t341, t296 * (-t292 * t138 + t293 * t140) + t300 * t396, t296 * (-t292 * t155 + t293 * t156) + t300 * t263, t296 * (-qJ(3) * t87 - t292 * t58 + t293 * t70) + t300 * (-pkin(2) * t87 - qJ(4) * t126 + t125 * t387 - t60) - pkin(1) * t87 + pkin(7) * (t296 * t143 + t300 * t88), t296 * (-qJ(3) * t92 - t292 * t59 + t293 * t71) + t300 * (-pkin(2) * t92 - qJ(4) * t132 + t131 * t387 - t61) - pkin(1) * t92 + pkin(7) * (-t145 * t296 + t300 * t93), t296 * (-qJ(3) * t64 - t292 * t23 + t293 * t28) + t300 * (-pkin(2) * t64 - qJ(4) * t102 + t100 * t387) - pkin(1) * t64 + pkin(7) * (-t296 * t150 + t300 * t65), t296 * (-qJ(3) * t21 - t292 * t24 + t293 * t35) + t300 * (-pkin(2) * t21 - qJ(4) * t40 + t387 * t39) - pkin(1) * t21 + pkin(7) * (t296 * t115 + t300 * t22), t296 * (-t292 * t47 + t293 * t49) + t342, t296 * (-t292 * t29 + t293 * t31) + t300 * t128, t296 * (-t292 * t66 + t293 * t68) - t300 * t85, t296 * (-t292 * t46 + t293 * t48) - t342, t296 * (-t292 * t67 + t293 * t69) + t300 * t308, t296 * (-t292 * t75 + t293 * t76) + t300 * t255, t296 * (-qJ(3) * t33 - t292 * t12 + t293 * t17) + t300 * (-pkin(2) * t33 - qJ(4) * t57 + t387 * t56 + t327) - pkin(1) * t33 + pkin(7) * (-t296 * t81 + t300 * t34), t296 * (-qJ(3) * t37 - t14 * t292 + t20 * t293) + t300 * (-pkin(2) * t37 - qJ(4) * t63 + t387 * t62 + t313) - pkin(1) * t37 + pkin(7) * (-t296 * t317 + t300 * t38), t296 * (-qJ(3) * t18 - t292 * t5 + t293 * t6) + t300 * (-pkin(2) * t18 - qJ(4) * t32 + t30 * t387 + t51) - pkin(1) * t18 + pkin(7) * (-t114 * t296 + t19 * t300), t296 * (-qJ(3) * t3 - t1 * t292 + t2 * t293) + t300 * (-pkin(2) * t3 - qJ(4) * t8 + t387 * t7 + t13) - pkin(1) * t3 + pkin(7) * (t296 * t72 + t300 * t4); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t276, t285 - t286, t284, t276, t343, qJDD(2), -t234, -t235, 0, 0, t195, t402, t420, t315, t416, t314, -t366 + t418, -pkin(2) * t205 + t372 + t430, t104 + t428, -pkin(2) * t193 + qJ(3) * t104, t195, t420, -t402, t314, -t416, t315, -qJ(4) * t379 + t119 * t293 + t418, t112 * t293 + t113 * t292 + t428, t292 * t118 + t205 * t338 - t430, qJ(3) * t74 + (-qJ(4) * t292 - t338) * t130, t135 * t293 + t136 * t292, t101 * t292 + t293 * t99, t137 * t293 + t139 * t292, t133 * t293 + t134 * t292, t138 * t293 + t140 * t292, t155 * t293 + t156 * t292, -pkin(2) * t143 + qJ(3) * t88 + t292 * t70 + t293 * t58, pkin(2) * t145 + qJ(3) * t93 + t292 * t71 + t293 * t59, pkin(2) * t150 + qJ(3) * t65 + t23 * t293 + t28 * t292, -pkin(2) * t115 + qJ(3) * t22 + t24 * t293 + t292 * t35, t292 * t49 + t293 * t47, t29 * t293 + t292 * t31, t292 * t68 + t293 * t66, t292 * t48 + t293 * t46, t292 * t69 + t293 * t67, t292 * t76 + t293 * t75, pkin(2) * t81 + qJ(3) * t34 + t12 * t293 + t17 * t292, pkin(2) * t317 + qJ(3) * t38 + t14 * t293 + t20 * t292, pkin(2) * t114 + qJ(3) * t19 + t292 * t6 + t293 * t5, -pkin(2) * t72 + qJ(3) * t4 + t1 * t293 + t2 * t292; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t207, t205, t199, t193, 0, 0, 0, 0, 0, 0, t207, t199, -t205, t130, 0, 0, 0, 0, 0, 0, t143, -t145, -t150, t115, 0, 0, 0, 0, 0, 0, -t81, -t317, -t114, t72; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t211, -t306, t395, t117, 0, 0, 0, 0, 0, 0, t125, t131, t100, t39, 0, 0, 0, 0, 0, 0, t56, t62, t30, t7; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t182, t181, t146, -t182, t396, t263, -t60, -t61, 0, 0, t129, t128, -t85, -t129, t308, t255, t327, t313, t51, t13; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t129, t128, -t85, -t129, t308, t255, -t26, -t27, 0, 0;];
tauJ_reg  = t25;
