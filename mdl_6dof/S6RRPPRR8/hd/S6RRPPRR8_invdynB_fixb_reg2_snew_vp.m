% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPPRR8
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [10x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d5,d6,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 11:23
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPPRR8_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(10,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPPRR8_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPPRR8_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPPRR8_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPPRR8_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [10 1]), ...
  'S6RRPPRR8_invdynB_fixb_reg2_snew_vp: pkin has to be [10x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 11:21:50
% EndTime: 2019-05-06 11:22:32
% DurationCPUTime: 39.96s
% Computational Cost: add. (133188->793), mult. (295604->1144), div. (0->0), fcn. (205380->10), ass. (0->557)
t962 = cos(pkin(10));
t965 = sin(qJ(2));
t1024 = qJD(1) * t965;
t961 = sin(pkin(10));
t917 = -t962 * qJD(2) + t1024 * t961;
t919 = t961 * qJD(2) + t1024 * t962;
t1042 = t917 * t919;
t969 = cos(qJ(2));
t1016 = qJDD(1) * t969;
t1019 = qJD(1) * qJD(2);
t950 = t965 * t1019;
t927 = -t950 + t1016;
t982 = t927 - t1042;
t1049 = t982 * t962;
t915 = t919 ^ 2;
t959 = t969 ^ 2;
t971 = qJD(1) ^ 2;
t955 = t959 * t971;
t868 = t955 + t915;
t797 = t868 * t961 + t1049;
t1023 = qJD(1) * t969;
t1007 = t917 * t1023;
t1005 = t969 * t1019;
t1018 = qJDD(1) * t965;
t926 = t1005 + t1018;
t989 = qJDD(2) * t961 + t926 * t962;
t847 = t989 + t1007;
t742 = t797 * t969 + t847 * t965;
t1050 = t982 * t961;
t775 = t868 * t962 - t1050;
t966 = sin(qJ(1));
t970 = cos(qJ(1));
t692 = t742 * t966 + t775 * t970;
t1173 = pkin(6) * t692;
t694 = t742 * t970 - t775 * t966;
t1172 = pkin(6) * t694;
t740 = t797 * t965 - t847 * t969;
t1171 = pkin(7) * t740;
t1170 = pkin(1) * t740 + qJ(3) * t797;
t1169 = -pkin(1) * t775 - pkin(7) * t742;
t894 = -t962 * qJDD(2) + t926 * t961;
t902 = t919 * t1023;
t849 = t894 - t902;
t1054 = t849 * t962;
t1058 = t847 * t961;
t759 = t1054 + t1058;
t1076 = t917 ^ 2;
t871 = t915 - t1076;
t737 = t759 * t969 - t871 * t965;
t755 = t847 * t962 - t849 * t961;
t1168 = t737 * t966 + t755 * t970;
t1167 = t737 * t970 - t755 * t966;
t895 = t955 - t1076;
t800 = t895 * t962 - t1050;
t848 = t894 + t902;
t745 = t800 * t969 + t848 * t965;
t796 = t895 * t961 + t1049;
t1166 = t745 * t966 - t796 * t970;
t1165 = t745 * t970 + t796 * t966;
t974 = -t989 + t1007;
t1120 = -t848 * t961 + t974 * t962;
t1084 = t915 + t1076;
t1119 = -t848 * t962 - t974 * t961;
t1135 = -t1084 * t965 + t1119 * t969;
t1146 = t1120 * t966 + t1135 * t970;
t1164 = pkin(6) * t1146;
t1147 = -t1120 * t970 + t1135 * t966;
t1163 = pkin(6) * t1147;
t1161 = pkin(2) * t775;
t1001 = t927 + t1042;
t1047 = t1001 * t962;
t1085 = -t1076 - t955;
t1102 = t1085 * t961 - t1047;
t1048 = t1001 * t961;
t1101 = t1085 * t962 + t1048;
t1117 = t1101 * t969 + t849 * t965;
t1131 = t1102 * t966 + t1117 * t970;
t1160 = pkin(6) * t1131;
t1132 = -t1102 * t970 + t1117 * t966;
t1159 = pkin(6) * t1132;
t1158 = pkin(7) * t1135;
t1136 = t1084 * t969 + t1119 * t965;
t1157 = pkin(7) * t1136;
t1156 = qJ(3) * t775;
t1150 = -pkin(1) * t1136 - pkin(2) * t1084 - qJ(3) * t1119;
t1149 = t800 * t965 - t848 * t969;
t1148 = t759 * t965 + t871 * t969;
t1118 = t1101 * t965 - t969 * t849;
t1145 = pkin(7) * t1118;
t1142 = qJ(3) * t1120;
t1139 = -pkin(1) * t1118 - qJ(3) * t1101;
t1138 = -pkin(1) * t1102 + pkin(7) * t1117;
t898 = -t915 + t955;
t1104 = -t898 * t962 + t1048;
t1103 = -t898 * t961 - t1047;
t1115 = t1103 * t969 - t965 * t974;
t1134 = t1104 * t970 + t1115 * t966;
t1133 = -t1104 * t966 + t1115 * t970;
t1129 = pkin(2) * t1102;
t1125 = qJ(3) * t1102;
t1116 = t1103 * t965 + t969 * t974;
t1114 = pkin(3) * t849;
t964 = sin(qJ(5));
t968 = cos(qJ(5));
t864 = -t968 * t917 + t919 * t964;
t866 = t917 * t964 + t919 * t968;
t790 = t866 * t864;
t920 = qJDD(5) + t927;
t1088 = -t790 + t920;
t1108 = t1088 * t964;
t1107 = t1088 * t968;
t963 = sin(qJ(6));
t967 = cos(qJ(6));
t786 = t967 * t864 + t866 * t963;
t788 = -t864 * t963 + t866 * t967;
t708 = t788 * t786;
t912 = qJDD(6) + t920;
t1090 = -t708 + t912;
t1106 = t1090 * t963;
t1105 = t1090 * t967;
t1040 = t927 * t965;
t978 = (t917 * t962 - t919 * t961) * t1023;
t1078 = t969 * t978 - t1040;
t977 = (-t917 * t961 - t919 * t962) * t1023;
t1100 = t1078 * t966 + t970 * t977;
t1099 = t1078 * t970 - t966 * t977;
t1010 = t965 * t1042;
t980 = -t1007 * t962 + t894 * t961;
t1079 = t969 * t980 - t1010;
t979 = t1007 * t961 + t894 * t962;
t1098 = t1079 * t966 + t970 * t979;
t1097 = t1079 * t970 - t966 * t979;
t763 = -t866 * qJD(5) + t894 * t968 - t964 * t989;
t947 = qJD(5) + t1023;
t845 = t947 * t866;
t1089 = t763 + t845;
t764 = -t864 * qJD(5) + t964 * t894 + t968 * t989;
t844 = t947 * t864;
t728 = -t844 + t764;
t729 = t844 + t764;
t937 = g(1) * t970 + g(2) * t966;
t910 = -pkin(1) * t971 + qJDD(1) * pkin(7) - t937;
t1072 = pkin(2) * t969;
t991 = -qJ(3) * t965 - t1072;
t924 = t991 * qJD(1);
t1087 = (qJD(1) * t924 + t910) * t965;
t936 = t966 * g(1) - t970 * g(2);
t909 = qJDD(1) * pkin(1) + t971 * pkin(7) + t936;
t990 = t926 + t1005;
t807 = -t990 * qJ(3) + (-t927 + t950) * pkin(2) - t909;
t1075 = qJD(2) ^ 2;
t889 = -g(3) * t965 + t969 * t910;
t820 = -pkin(2) * t1075 + qJDD(2) * qJ(3) + t1023 * t924 + t889;
t1027 = t961 * t807 + t962 * t820;
t869 = pkin(3) * t917 - qJ(4) * t919;
t1086 = -t927 * qJ(4) - 0.2e1 * qJD(4) * t1023 - t917 * t869 + t1027;
t825 = t902 * t962 - t961 * t989;
t826 = t902 * t961 + t962 * t989;
t992 = t969 * t826 + t1010;
t1083 = t970 * t825 + t966 * t992;
t911 = t969 * t927;
t1082 = t965 * t978 + t911;
t1029 = t965 * t910;
t1041 = t917 * t969;
t1070 = t969 * g(3);
t988 = -qJDD(2) * pkin(2) - t1075 * qJ(3) + qJDD(3) + t1070;
t975 = t989 * qJ(4) - t1114 - t988;
t1081 = -qJD(1) * (qJ(4) * t1041 - t924 * t965) + t1029 - t975;
t1009 = t919 * t1041;
t1080 = t965 * t980 + t1009;
t1077 = -t825 * t966 + t970 * t992;
t784 = t786 ^ 2;
t785 = t788 ^ 2;
t862 = t864 ^ 2;
t863 = t866 ^ 2;
t939 = qJD(6) + t947;
t938 = t939 ^ 2;
t945 = t947 ^ 2;
t1074 = pkin(3) + pkin(4);
t1073 = pkin(2) * t965;
t1071 = pkin(3) * t962;
t1021 = qJD(3) * t919;
t908 = 0.2e1 * t1021;
t1026 = -t962 * t807 + t961 * t820;
t996 = t919 * t869 + qJDD(4) + t1026;
t981 = t927 * pkin(3) + t996;
t973 = -qJ(4) * t955 + t981;
t652 = pkin(4) * t1001 + pkin(8) * t974 + t908 + t973;
t1022 = qJD(3) * t917;
t906 = -0.2e1 * t1022;
t985 = t906 + t1086;
t687 = -pkin(3) * t955 + t985;
t986 = pkin(4) * t1023 - pkin(8) * t919;
t666 = -pkin(4) * t1076 + t894 * pkin(8) - t1023 * t986 + t687;
t589 = -t968 * t652 + t964 * t666;
t556 = pkin(5) * t1088 - pkin(9) * t729 - t589;
t590 = t964 * t652 + t968 * t666;
t995 = pkin(5) * t947 - pkin(9) * t866;
t562 = -t862 * pkin(5) + t763 * pkin(9) - t947 * t995 + t590;
t511 = -t967 * t556 + t963 * t562;
t512 = t963 * t556 + t967 * t562;
t485 = -t511 * t967 + t512 * t963;
t1069 = t485 * t964;
t1068 = t485 * t968;
t1020 = qJD(4) * t919;
t709 = -0.2e1 * t1020 + t1081;
t680 = t894 * pkin(4) + pkin(8) * t1076 - t919 * t986 + t709;
t610 = t763 * pkin(5) + t862 * pkin(9) - t866 * t995 + t680;
t1067 = t610 * t963;
t1066 = t610 * t967;
t702 = t708 + t912;
t1065 = t702 * t963;
t1064 = t702 * t967;
t769 = t790 + t920;
t1063 = t769 * t964;
t1062 = t769 * t968;
t819 = t988 + t1087;
t1061 = t819 * t961;
t1060 = t819 * t962;
t1044 = t909 * t965;
t1043 = t909 * t969;
t946 = t969 * t971 * t965;
t934 = -t946 + qJDD(2);
t1039 = t934 * t965;
t1038 = t934 * t969;
t935 = qJDD(2) + t946;
t1037 = t935 * t965;
t1036 = t939 * t786;
t1035 = t939 * t963;
t1034 = t939 * t967;
t1033 = t947 * t964;
t1032 = t947 * t968;
t958 = t965 ^ 2;
t1031 = t958 * t971;
t1030 = t964 * t680;
t1028 = t968 * t680;
t1025 = t958 + t959;
t1017 = qJDD(1) * t966;
t1015 = qJDD(1) * t970;
t1014 = t965 * t708;
t1013 = t969 * t708;
t1012 = t965 * t790;
t1011 = t969 * t790;
t1008 = t786 * qJD(6) - t963 * t763 - t967 * t764;
t735 = t908 + t1026;
t736 = t906 + t1027;
t1004 = qJ(4) * t961 + pkin(2);
t486 = t511 * t963 + t967 * t512;
t1003 = -t967 * t763 + t963 * t764;
t1002 = t1084 - t955;
t888 = t1029 + t1070;
t810 = t888 * t965 + t969 * t889;
t878 = -t936 * t966 - t970 * t937;
t999 = t966 * t946;
t998 = t970 * t946;
t931 = -t966 * t971 + t1015;
t994 = -pkin(6) * t931 - g(3) * t966;
t993 = t965 * t826 - t1009;
t539 = -t589 * t968 + t590 * t964;
t540 = t964 * t589 + t968 * t590;
t664 = -t735 * t962 + t736 * t961;
t665 = t735 * t961 + t736 * t962;
t809 = t888 * t969 - t889 * t965;
t877 = t936 * t970 - t937 * t966;
t987 = -t1008 - t1036;
t976 = (-qJD(6) + t939) * t788 - t1003;
t944 = -t955 - t1075;
t943 = t955 - t1075;
t942 = -t1031 - t1075;
t941 = -t1031 + t1075;
t933 = t955 - t1031;
t932 = t955 + t1031;
t930 = t970 * t971 + t1017;
t929 = t1025 * qJDD(1);
t928 = -0.2e1 * t950 + t1016;
t925 = 0.2e1 * t1005 + t1018;
t922 = t969 * t935;
t921 = t1025 * t1019;
t905 = 0.2e1 * t1020;
t903 = -pkin(6) * t930 + g(3) * t970;
t893 = -t1019 * t958 + t926 * t969;
t892 = -t1019 * t959 - t1040;
t887 = -t942 * t965 - t1038;
t886 = -t941 * t965 + t922;
t885 = t944 * t969 - t1037;
t884 = t943 * t969 - t1039;
t883 = t942 * t969 - t1039;
t882 = t944 * t965 + t922;
t874 = t929 * t970 - t932 * t966;
t873 = t929 * t966 + t932 * t970;
t870 = -t925 * t965 + t928 * t969;
t836 = -t863 + t945;
t835 = t862 - t945;
t834 = t887 * t970 + t925 * t966;
t833 = t885 * t970 - t928 * t966;
t832 = t887 * t966 - t925 * t970;
t831 = t885 * t966 + t928 * t970;
t828 = -pkin(7) * t883 - t1043;
t827 = -pkin(7) * t882 - t1044;
t818 = -pkin(1) * t883 + t889;
t817 = -pkin(1) * t882 + t888;
t816 = -t863 - t945;
t789 = t863 - t862;
t783 = t810 * t970 - t909 * t966;
t782 = t810 * t966 + t909 * t970;
t781 = -t945 - t862;
t766 = -t785 + t938;
t765 = t784 - t938;
t754 = (-t864 * t968 + t866 * t964) * t947;
t753 = (t864 * t964 + t866 * t968) * t947;
t749 = -t785 - t938;
t748 = -t862 - t863;
t739 = t1060 + t1156;
t726 = t763 - t845;
t724 = t835 * t968 - t1063;
t723 = -t836 * t964 + t1107;
t722 = -t835 * t964 - t1062;
t721 = -t836 * t968 - t1108;
t720 = -t1033 * t866 + t764 * t968;
t719 = -t1032 * t866 - t764 * t964;
t718 = t1032 * t864 - t763 * t964;
t717 = -t1033 * t864 - t763 * t968;
t716 = t1061 - t1125;
t711 = -t816 * t964 - t1062;
t710 = t816 * t968 - t1063;
t707 = t785 - t784;
t706 = -t938 - t784;
t705 = t781 * t968 - t1108;
t704 = t781 * t964 + t1107;
t700 = -pkin(2) * t1120 - pkin(3) * t974 + qJ(4) * t848;
t699 = (-t786 * t967 + t788 * t963) * t939;
t698 = (-t786 * t963 - t788 * t967) * t939;
t697 = -t753 * t961 + t754 * t962;
t696 = -t753 * t962 - t754 * t961;
t691 = -t1081 + t905 - t1114;
t690 = t905 - t1087 + (t847 + t1007) * qJ(4) + t975;
t689 = -t973 - 0.2e1 * t1021;
t688 = t736 + t1161;
t686 = t697 * t969 - t920 * t965;
t685 = t735 - t1129;
t679 = -t784 - t785;
t674 = qJ(4) * t1002 + t908 + t981;
t673 = pkin(3) * t1002 + t985;
t671 = -qJD(6) * t788 - t1003;
t670 = t765 * t967 - t1065;
t669 = -t766 * t963 + t1105;
t668 = t765 * t963 + t1064;
t667 = t766 * t967 + t1106;
t663 = t1089 * t968 + t729 * t964;
t662 = t726 * t968 - t728 * t964;
t661 = t1089 * t964 - t729 * t968;
t660 = -t726 * t964 - t728 * t968;
t658 = -t749 * t963 - t1064;
t657 = t749 * t967 - t1065;
t656 = -t722 * t961 + t724 * t962;
t655 = -t721 * t961 + t723 * t962;
t654 = -t722 * t962 - t724 * t961;
t653 = -t721 * t962 - t723 * t961;
t651 = -t719 * t961 + t720 * t962;
t650 = -t717 * t961 + t718 * t962;
t649 = -t719 * t962 - t720 * t961;
t648 = -t717 * t962 - t718 * t961;
t647 = pkin(2) * t847 - t1061 - t1170;
t644 = t710 * t961 + t711 * t962;
t643 = -t710 * t962 + t711 * t961;
t642 = pkin(2) * t849 + t1060 + t1139;
t641 = -qJ(4) * t1054 - t691 * t961 - t1125;
t640 = t665 * t969 + t819 * t965;
t639 = t665 * t965 - t819 * t969;
t638 = -pkin(3) * t1058 + t690 * t962 - t1156;
t637 = -t1129 + t908 + (-t1085 - t955) * qJ(4) + (t1001 + t927) * pkin(3) + t996;
t636 = t706 * t967 - t1106;
t635 = t706 * t963 + t1105;
t634 = t704 * t961 + t705 * t962;
t633 = -t704 * t962 + t705 * t961;
t631 = t1008 - t1036;
t627 = (qJD(6) + t939) * t788 + t1003;
t626 = -t1008 * t967 - t1035 * t788;
t625 = -t1008 * t963 + t1034 * t788;
t624 = t1034 * t786 - t671 * t963;
t623 = t1035 * t786 + t671 * t967;
t622 = -t664 - t1142;
t621 = t651 * t969 - t1012;
t620 = t650 * t969 + t1012;
t619 = -t1161 + qJ(4) * t982 + 0.2e1 * t1022 + (-t868 + t955) * pkin(3) - t1086;
t618 = -t698 * t964 + t699 * t968;
t617 = -t698 * t968 - t699 * t964;
t616 = t687 * t962 - t689 * t961;
t615 = t687 * t961 + t689 * t962;
t614 = -t1089 * t965 + t656 * t969;
t613 = t655 * t969 - t729 * t965;
t612 = t644 * t969 - t728 * t965;
t611 = t644 * t965 + t728 * t969;
t609 = -t688 * t965 + t739 * t969 - t1171;
t608 = t1004 * t849 - t962 * t691 + t1139;
t607 = t634 * t969 + t726 * t965;
t606 = t634 * t965 - t726 * t969;
t605 = -t685 * t965 + t716 * t969 - t1145;
t604 = -t961 * t690 + (-pkin(2) - t1071) * t847 + t1170;
t603 = -pkin(8) * t710 + qJ(4) * t728 - t1028;
t602 = -pkin(8) * t704 - qJ(4) * t726 - t1030;
t601 = -t668 * t964 + t670 * t968;
t600 = -t667 * t964 + t669 * t968;
t599 = -t668 * t968 - t670 * t964;
t598 = -t667 * t968 - t669 * t964;
t597 = t1150 - t665;
t596 = t661 * t961 + t663 * t962;
t595 = -t660 * t961 + t662 * t962;
t594 = -t661 * t962 + t663 * t961;
t593 = -t660 * t962 - t662 * t961;
t592 = -t657 * t964 + t658 * t968;
t591 = t657 * t968 + t658 * t964;
t588 = t616 * t969 + t709 * t965;
t587 = t616 * t965 - t709 * t969;
t586 = -t673 * t961 + t674 * t962 - t1142;
t585 = t1073 * t1120 + t622 * t969 - t1157;
t584 = t640 * t970 + t664 * t966;
t583 = t640 * t966 - t664 * t970;
t582 = t595 * t969 - t789 * t965;
t581 = -pkin(8) * t711 + t1074 * t728 + t1030;
t580 = -pkin(1) * t639 + pkin(2) * t819 - qJ(3) * t665;
t579 = t596 * t969 - t748 * t965;
t578 = t596 * t965 + t748 * t969;
t577 = -pkin(8) * t705 - t1074 * t726 - t1028;
t576 = -t635 * t964 + t636 * t968;
t575 = t635 * t968 + t636 * t964;
t574 = -t631 * t963 + t967 * t976;
t573 = -t627 * t967 - t963 * t987;
t572 = t631 * t967 + t963 * t976;
t571 = -t627 * t963 + t967 * t987;
t570 = -pkin(9) * t657 - t1066;
t569 = -t625 * t964 + t626 * t968;
t568 = -t623 * t964 + t624 * t968;
t567 = -t625 * t968 - t626 * t964;
t566 = -t623 * t968 - t624 * t964;
t565 = -qJ(3) * t615 + (pkin(3) * t961 - qJ(4) * t962) * t709;
t564 = t612 * t970 + t643 * t966;
t563 = t612 * t966 - t643 * t970;
t561 = -t617 * t961 + t618 * t962;
t560 = -t617 * t962 - t618 * t961;
t559 = t561 * t969 - t912 * t965;
t558 = -t637 * t965 + t641 * t969 - t1145;
t557 = -t673 * t962 - t674 * t961 + t1150;
t554 = -pkin(9) * t635 - t1067;
t553 = -pkin(2) * t615 - pkin(3) * t689 - qJ(4) * t687;
t552 = -t619 * t965 + t638 * t969 + t1171;
t551 = t607 * t970 + t633 * t966;
t550 = t607 * t966 - t633 * t970;
t549 = -pkin(7) * t639 + (-qJ(3) * t969 + t1073) * t664;
t548 = t586 * t969 - t700 * t965 - t1157;
t547 = t588 * t970 + t615 * t966;
t546 = t588 * t966 - t615 * t970;
t545 = -pkin(5) * t987 + pkin(9) * t658 - t1067;
t544 = -t599 * t961 + t601 * t962;
t543 = -t598 * t961 + t600 * t962;
t542 = -t599 * t962 - t601 * t961;
t541 = -t598 * t962 - t600 * t961;
t538 = t591 * t961 + t592 * t962;
t537 = -t591 * t962 + t592 * t961;
t536 = -pkin(5) * t627 + pkin(9) * t636 + t1066;
t535 = t579 * t970 + t594 * t966;
t534 = t579 * t966 - t594 * t970;
t533 = -pkin(2) * t643 - qJ(4) * t711 + t1074 * t710 - t590;
t532 = -pkin(8) * t539 - qJ(4) * t680;
t531 = -pkin(2) * t594 - qJ(4) * t663 + t1074 * t661;
t530 = t575 * t961 + t576 * t962;
t529 = -t575 * t962 + t576 * t961;
t528 = -t572 * t964 + t574 * t968;
t527 = -t571 * t964 + t573 * t968;
t526 = t572 * t968 + t574 * t964;
t525 = -t571 * t968 - t573 * t964;
t524 = -pkin(2) * t633 - qJ(4) * t705 + t1074 * t704 - t589;
t523 = -pkin(1) * t587 - qJ(3) * t616 + (t1004 + t1071) * t709;
t522 = t544 * t969 - t965 * t976;
t521 = t543 * t969 + t631 * t965;
t520 = -t567 * t961 + t569 * t962;
t519 = -t566 * t961 + t568 * t962;
t518 = -t567 * t962 - t569 * t961;
t517 = -t566 * t962 - t568 * t961;
t516 = -qJ(3) * t643 - t581 * t961 + t603 * t962;
t515 = t538 * t969 - t965 * t987;
t514 = t538 * t965 + t969 * t987;
t513 = -pkin(8) * t661 + qJ(4) * t748 - t539;
t509 = -qJ(3) * t633 - t577 * t961 + t602 * t962;
t508 = -pkin(8) * t540 - t1074 * t680;
t507 = -pkin(8) * t663 + t1074 * t748 - t540;
t506 = t520 * t969 - t1014;
t505 = t519 * t969 + t1014;
t504 = t530 * t969 - t627 * t965;
t503 = t530 * t965 + t627 * t969;
t502 = -pkin(1) * t611 - pkin(2) * t728 - qJ(3) * t644 - t581 * t962 - t603 * t961;
t501 = -pkin(7) * t587 - t553 * t965 + t565 * t969;
t500 = -pkin(1) * t606 + pkin(2) * t726 - qJ(3) * t634 - t577 * t962 - t602 * t961;
t499 = t539 * t961 + t540 * t962;
t498 = -t539 * t962 + t540 * t961;
t497 = t499 * t969 + t680 * t965;
t496 = t499 * t965 - t680 * t969;
t495 = t515 * t970 + t537 * t966;
t494 = t515 * t966 - t537 * t970;
t493 = -pkin(8) * t591 + qJ(4) * t987 - t545 * t964 + t570 * t968;
t492 = t526 * t961 + t528 * t962;
t491 = -t525 * t961 + t527 * t962;
t490 = -t526 * t962 + t528 * t961;
t489 = -t525 * t962 - t527 * t961;
t488 = -pkin(8) * t575 + qJ(4) * t627 - t536 * t964 + t554 * t968;
t487 = t491 * t969 - t707 * t965;
t484 = -pkin(8) * t592 + t1074 * t987 - t968 * t545 - t964 * t570;
t483 = t492 * t969 - t679 * t965;
t482 = t492 * t965 + t679 * t969;
t481 = t504 * t970 + t529 * t966;
t480 = t504 * t966 - t529 * t970;
t479 = -pkin(7) * t611 + t516 * t969 - t533 * t965;
t478 = -pkin(8) * t576 + t1074 * t627 - t968 * t536 - t964 * t554;
t477 = -pkin(7) * t606 + t509 * t969 - t524 * t965;
t476 = pkin(5) * t610 + pkin(9) * t486;
t475 = -qJ(3) * t594 - t507 * t961 + t513 * t962;
t474 = -pkin(9) * t572 - t485;
t473 = -pkin(5) * t679 + pkin(9) * t574 + t486;
t472 = -pkin(1) * t578 - pkin(2) * t748 - qJ(3) * t596 - t507 * t962 - t513 * t961;
t471 = -pkin(2) * t537 + pkin(5) * t657 - qJ(4) * t592 + t1074 * t591 - t512;
t470 = t497 * t970 + t498 * t966;
t469 = t497 * t966 - t498 * t970;
t468 = -qJ(3) * t498 - t508 * t961 + t532 * t962;
t467 = -pkin(2) * t529 + pkin(5) * t635 - qJ(4) * t576 + t1074 * t575 - t511;
t466 = -pkin(2) * t498 - qJ(4) * t540 + t1074 * t539;
t465 = -pkin(7) * t578 + t475 * t969 - t531 * t965;
t464 = t483 * t970 + t490 * t966;
t463 = t483 * t966 - t490 * t970;
t462 = t486 * t968 - t1069;
t461 = t486 * t964 + t1068;
t460 = -qJ(3) * t537 - t484 * t961 + t493 * t962;
t459 = -qJ(3) * t529 - t478 * t961 + t488 * t962;
t458 = -pkin(2) * t490 + pkin(5) * t572 - qJ(4) * t528 + t1074 * t526;
t457 = -pkin(1) * t496 + pkin(2) * t680 - qJ(3) * t499 - t508 * t962 - t532 * t961;
t456 = -pkin(1) * t514 - pkin(2) * t987 - qJ(3) * t538 - t484 * t962 - t493 * t961;
t455 = -pkin(8) * t526 + qJ(4) * t679 - t473 * t964 + t474 * t968;
t454 = -pkin(8) * t528 + t1074 * t679 - t968 * t473 - t964 * t474;
t453 = -pkin(1) * t503 - pkin(2) * t627 - qJ(3) * t530 - t478 * t962 - t488 * t961;
t452 = t461 * t961 + t462 * t962;
t451 = -t461 * t962 + t462 * t961;
t450 = t452 * t969 + t610 * t965;
t449 = t452 * t965 - t610 * t969;
t448 = -pkin(7) * t514 + t460 * t969 - t471 * t965;
t447 = -pkin(8) * t461 - pkin(9) * t1068 - qJ(4) * t610 - t476 * t964;
t446 = -pkin(7) * t496 - t466 * t965 + t468 * t969;
t445 = -pkin(8) * t462 + pkin(9) * t1069 - t1074 * t610 - t968 * t476;
t444 = -pkin(7) * t503 + t459 * t969 - t467 * t965;
t443 = -qJ(3) * t490 - t454 * t961 + t455 * t962;
t442 = t450 * t970 + t451 * t966;
t441 = t450 * t966 - t451 * t970;
t440 = -pkin(1) * t482 - pkin(2) * t679 - qJ(3) * t492 - t454 * t962 - t455 * t961;
t439 = -pkin(7) * t482 + t443 * t969 - t458 * t965;
t438 = -pkin(2) * t451 + pkin(5) * t485 - qJ(4) * t462 + t1074 * t461;
t437 = -qJ(3) * t451 - t445 * t961 + t447 * t962;
t436 = -pkin(1) * t449 + pkin(2) * t610 - qJ(3) * t452 - t445 * t962 - t447 * t961;
t435 = -pkin(7) * t449 + t437 * t969 - t438 * t965;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t930, -t931, 0, t878, 0, 0, 0, 0, 0, 0, t833, t834, t874, t783, 0, 0, 0, 0, 0, 0, t1131, t694, t1146, t584, 0, 0, 0, 0, 0, 0, t1131, t1146, -t694, t547, 0, 0, 0, 0, 0, 0, t551, t564, t535, t470, 0, 0, 0, 0, 0, 0, t481, t495, t464, t442; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t931, -t930, 0, t877, 0, 0, 0, 0, 0, 0, t831, t832, t873, t782, 0, 0, 0, 0, 0, 0, t1132, t692, t1147, t583, 0, 0, 0, 0, 0, 0, t1132, t1147, -t692, t546, 0, 0, 0, 0, 0, 0, t550, t563, t534, t469, 0, 0, 0, 0, 0, 0, t480, t494, t463, t441; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t882, t883, 0, -t809, 0, 0, 0, 0, 0, 0, t1118, t740, t1136, t639, 0, 0, 0, 0, 0, 0, t1118, t1136, -t740, t587, 0, 0, 0, 0, 0, 0, t606, t611, t578, t496, 0, 0, 0, 0, 0, 0, t503, t514, t482, t449; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t931, 0, -t930, 0, t994, -t903, -t877, -pkin(6) * t877, t893 * t970 - t999, t870 * t970 - t933 * t966, t1017 * t965 + t886 * t970, t892 * t970 + t999, t1016 * t966 + t884 * t970, qJDD(2) * t966 + t921 * t970, -pkin(6) * t831 - t817 * t966 + t827 * t970, -pkin(6) * t832 - t818 * t966 + t828 * t970, -pkin(6) * t873 + t809 * t970, -pkin(6) * t782 - (pkin(1) * t966 - pkin(7) * t970) * t809, t1077, -t1167, t1133, t1097, -t1165, t1099, t605 * t970 - t642 * t966 - t1159, t609 * t970 - t647 * t966 - t1173, t585 * t970 - t597 * t966 - t1163, -pkin(6) * t583 + t549 * t970 - t580 * t966, t1077, t1133, t1167, t1099, t1165, t1097, t558 * t970 - t608 * t966 - t1159, t548 * t970 - t557 * t966 - t1163, t552 * t970 - t604 * t966 + t1173, -pkin(6) * t546 + t501 * t970 - t523 * t966, t621 * t970 - t649 * t966, t582 * t970 - t593 * t966, t613 * t970 - t653 * t966, t620 * t970 - t648 * t966, t614 * t970 - t654 * t966, t686 * t970 - t696 * t966, -pkin(6) * t550 + t477 * t970 - t500 * t966, -pkin(6) * t563 + t479 * t970 - t502 * t966, -pkin(6) * t534 + t465 * t970 - t472 * t966, -pkin(6) * t469 + t446 * t970 - t457 * t966, t506 * t970 - t518 * t966, t487 * t970 - t489 * t966, t521 * t970 - t541 * t966, t505 * t970 - t517 * t966, t522 * t970 - t542 * t966, t559 * t970 - t560 * t966, -pkin(6) * t480 + t444 * t970 - t453 * t966, -pkin(6) * t494 + t448 * t970 - t456 * t966, -pkin(6) * t463 + t439 * t970 - t440 * t966, -pkin(6) * t441 + t435 * t970 - t436 * t966; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t930, 0, t931, 0, t903, t994, t878, pkin(6) * t878, t893 * t966 + t998, t870 * t966 + t933 * t970, -t1015 * t965 + t886 * t966, t892 * t966 - t998, -t1015 * t969 + t884 * t966, -qJDD(2) * t970 + t921 * t966, pkin(6) * t833 + t817 * t970 + t827 * t966, pkin(6) * t834 + t818 * t970 + t828 * t966, pkin(6) * t874 + t809 * t966, pkin(6) * t783 - (-pkin(1) * t970 - pkin(7) * t966) * t809, t1083, -t1168, t1134, t1098, -t1166, t1100, t605 * t966 + t642 * t970 + t1160, t609 * t966 + t647 * t970 + t1172, t585 * t966 + t597 * t970 + t1164, pkin(6) * t584 + t549 * t966 + t580 * t970, t1083, t1134, t1168, t1100, t1166, t1098, t558 * t966 + t608 * t970 + t1160, t548 * t966 + t557 * t970 + t1164, t552 * t966 + t604 * t970 - t1172, pkin(6) * t547 + t501 * t966 + t523 * t970, t621 * t966 + t649 * t970, t582 * t966 + t593 * t970, t613 * t966 + t653 * t970, t620 * t966 + t648 * t970, t614 * t966 + t654 * t970, t686 * t966 + t696 * t970, pkin(6) * t551 + t477 * t966 + t500 * t970, pkin(6) * t564 + t479 * t966 + t502 * t970, pkin(6) * t535 + t465 * t966 + t472 * t970, pkin(6) * t470 + t446 * t966 + t457 * t970, t506 * t966 + t518 * t970, t487 * t966 + t489 * t970, t521 * t966 + t541 * t970, t505 * t966 + t517 * t970, t522 * t966 + t542 * t970, t559 * t966 + t560 * t970, pkin(6) * t481 + t444 * t966 + t453 * t970, pkin(6) * t495 + t448 * t966 + t456 * t970, pkin(6) * t464 + t439 * t966 + t440 * t970, pkin(6) * t442 + t435 * t966 + t436 * t970; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t936, t937, 0, 0, t990 * t965, t925 * t969 + t928 * t965, t941 * t969 + t1037, -t1005 * t965 + t911, t943 * t965 + t1038, 0, pkin(1) * t928 + pkin(7) * t885 + t1043, -pkin(1) * t925 + pkin(7) * t887 - t1044, pkin(1) * t932 + pkin(7) * t929 + t810, pkin(1) * t909 + pkin(7) * t810, t993, -t1148, t1116, t1080, -t1149, t1082, t685 * t969 + t716 * t965 + t1138, t688 * t969 + t739 * t965 - t1169, t1158 + t965 * t622 + (-pkin(1) - t1072) * t1120, pkin(7) * t640 + (-pkin(1) + t991) * t664, t993, t1116, t1148, t1082, t1149, t1080, t637 * t969 + t641 * t965 + t1138, -pkin(1) * t1120 + t586 * t965 + t700 * t969 + t1158, t619 * t969 + t638 * t965 + t1169, -pkin(1) * t615 + pkin(7) * t588 + t553 * t969 + t565 * t965, t651 * t965 + t1011, t595 * t965 + t789 * t969, t655 * t965 + t729 * t969, t650 * t965 - t1011, t1089 * t969 + t656 * t965, t697 * t965 + t920 * t969, -pkin(1) * t633 + pkin(7) * t607 + t509 * t965 + t524 * t969, -pkin(1) * t643 + pkin(7) * t612 + t516 * t965 + t533 * t969, -pkin(1) * t594 + pkin(7) * t579 + t475 * t965 + t531 * t969, -pkin(1) * t498 + pkin(7) * t497 + t466 * t969 + t468 * t965, t520 * t965 + t1013, t491 * t965 + t707 * t969, t543 * t965 - t631 * t969, t519 * t965 - t1013, t544 * t965 + t969 * t976, t561 * t965 + t912 * t969, -pkin(1) * t529 + pkin(7) * t504 + t459 * t965 + t467 * t969, -pkin(1) * t537 + pkin(7) * t515 + t460 * t965 + t471 * t969, -pkin(1) * t490 + pkin(7) * t483 + t443 * t965 + t458 * t969, -pkin(1) * t451 + pkin(7) * t450 + t437 * t965 + t438 * t969;];
tauB_reg  = t1;
