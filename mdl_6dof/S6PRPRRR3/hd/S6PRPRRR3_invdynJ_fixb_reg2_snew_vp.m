% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6PRPRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,d6,theta1,theta3]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 00:44
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6PRPRRR3_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR3_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRR3_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRR3_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRR3_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRPRRR3_invdynJ_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 00:42:33
% EndTime: 2019-05-05 00:42:49
% DurationCPUTime: 7.13s
% Computational Cost: add. (34388->464), mult. (78560->714), div. (0->0), fcn. (63173->14), ass. (0->285)
t266 = sin(qJ(4));
t270 = cos(qJ(4));
t261 = sin(pkin(6));
t263 = cos(pkin(6));
t324 = sin(pkin(11));
t325 = cos(pkin(11));
t283 = t324 * g(1) - t325 * g(2);
t308 = -g(3) + qJDD(1);
t223 = -t261 * t283 + t263 * t308;
t260 = sin(pkin(12));
t262 = cos(pkin(12));
t241 = -t325 * g(1) - t324 * g(2);
t267 = sin(qJ(2));
t271 = cos(qJ(2));
t340 = t261 * t308 + t263 * t283;
t208 = t271 * t241 + t340 * t267;
t331 = qJD(2) ^ 2;
t341 = -t331 * pkin(2) + qJDD(2) * qJ(3) + (2 * qJD(2) * qJD(3)) + t208;
t175 = t260 * t223 + t341 * t262;
t299 = t262 * qJDD(2);
t275 = t262 ^ 2;
t304 = t275 * t331;
t279 = -pkin(3) * t304 + pkin(8) * t299 + t175;
t221 = t262 * t223;
t339 = t262 * t331;
t335 = t221 + (pkin(3) * t339 - pkin(8) * qJDD(2) - t341) * t260;
t124 = t266 * t279 - t270 * t335;
t284 = t260 * t270 + t262 * t266;
t233 = t284 * qJDD(2);
t234 = (-t260 * t266 + t262 * t270) * qJD(2);
t306 = t234 * qJD(4);
t218 = t233 + t306;
t348 = -t124 + (-t218 + t306) * pkin(9);
t264 = sin(qJ(6));
t235 = t284 * qJD(2);
t265 = sin(qJ(5));
t269 = cos(qJ(5));
t206 = t234 * t265 + t235 * t269;
t300 = t260 * qJDD(2);
t185 = -t266 * t300 + t270 * t299;
t305 = t235 * qJD(4);
t216 = t185 - t305;
t287 = -t269 * t216 + t265 * t218;
t159 = -qJD(5) * t206 - t287;
t158 = qJDD(6) - t159;
t257 = qJD(4) + qJD(5);
t268 = cos(qJ(6));
t188 = t206 * t264 - t268 * t257;
t190 = t206 * t268 + t257 * t264;
t162 = t190 * t188;
t338 = t158 - t162;
t347 = t264 * t338;
t204 = -t269 * t234 + t235 * t265;
t177 = t206 * t204;
t256 = qJDD(4) + qJDD(5);
t337 = -t177 + t256;
t346 = t265 * t337;
t219 = t234 * t235;
t334 = qJDD(4) + t219;
t345 = t266 * t334;
t344 = t268 * t338;
t343 = t269 * t337;
t342 = t270 * t334;
t173 = pkin(5) * t204 - pkin(10) * t206;
t332 = t257 ^ 2;
t277 = pkin(4) * t334 + t348;
t125 = t266 * t335 + t270 * t279;
t222 = qJD(4) * pkin(4) - pkin(9) * t235;
t231 = t234 ^ 2;
t113 = -t231 * pkin(4) + t216 * pkin(9) - qJD(4) * t222 + t125;
t309 = t269 * t113;
t68 = t265 * t277 + t309;
t52 = -t332 * pkin(5) + t256 * pkin(10) - t204 * t173 + t68;
t160 = -qJD(5) * t204 + t216 * t265 + t218 * t269;
t199 = t257 * t204;
t142 = t160 - t199;
t259 = qJDD(2) * pkin(2);
t286 = t267 * t241 - t340 * t271;
t194 = -t331 * qJ(3) + qJDD(3) - t259 + t286;
t273 = t260 ^ 2;
t182 = -pkin(3) * t299 + t194 + (-t273 * t331 - t304) * pkin(8);
t145 = -t216 * pkin(4) - t231 * pkin(9) + t235 * t222 + t182;
t76 = (t206 * t257 - t159) * pkin(5) - t142 * pkin(10) + t145;
t38 = t264 * t52 - t268 * t76;
t39 = t264 * t76 + t268 * t52;
t21 = t264 * t38 + t268 * t39;
t336 = t273 + t275;
t240 = t336 * t331;
t201 = qJD(6) + t204;
t288 = t264 * t160 - t268 * t256;
t114 = (qJD(6) - t201) * t190 + t288;
t186 = t188 ^ 2;
t187 = t190 ^ 2;
t200 = t201 ^ 2;
t202 = t204 ^ 2;
t203 = t206 ^ 2;
t232 = t235 ^ 2;
t330 = pkin(5) * t265;
t67 = t113 * t265 - t269 * t277;
t51 = -t256 * pkin(5) - t332 * pkin(10) + t173 * t206 + t67;
t329 = -pkin(5) * t51 + pkin(10) * t21;
t78 = -t124 * t270 + t125 * t266;
t328 = t260 * t78;
t48 = t264 * t51;
t40 = t265 * t68 - t269 * t67;
t327 = t266 * t40;
t49 = t268 * t51;
t326 = t270 * t40;
t121 = t158 + t162;
t323 = t121 * t264;
t322 = t121 * t268;
t321 = t145 * t265;
t320 = t145 * t269;
t171 = t177 + t256;
t319 = t171 * t265;
t318 = t171 * t269;
t317 = t182 * t266;
t316 = t182 * t270;
t315 = t201 * t264;
t314 = t201 * t268;
t213 = qJDD(4) - t219;
t313 = t213 * t266;
t312 = t213 * t270;
t311 = t257 * t265;
t310 = t257 * t269;
t302 = qJD(6) + t201;
t285 = -t268 * t160 - t264 * t256;
t119 = t302 * t188 + t285;
t155 = -t187 - t200;
t89 = -t155 * t264 - t322;
t298 = pkin(5) * t119 + pkin(10) * t89 + t48;
t116 = -t302 * t190 - t288;
t148 = -t200 - t186;
t86 = t148 * t268 - t347;
t297 = pkin(5) * t116 + pkin(10) * t86 - t49;
t295 = t265 * t162;
t294 = t269 * t162;
t293 = -pkin(5) * t269 - pkin(4);
t41 = t265 * t67 + t269 * t68;
t147 = t186 + t187;
t129 = -qJD(6) * t188 - t285;
t167 = t201 * t188;
t118 = t129 + t167;
t72 = -t114 * t268 + t118 * t264;
t291 = pkin(5) * t147 + pkin(10) * t72 + t21;
t290 = -t194 + t259;
t79 = t124 * t266 + t270 * t125;
t174 = t341 * t260 - t221;
t132 = t174 * t260 + t262 * t175;
t20 = t264 * t39 - t268 * t38;
t282 = (-qJD(5) + t257) * t206 - t287;
t272 = qJD(4) ^ 2;
t254 = t275 * qJDD(2);
t253 = t273 * qJDD(2);
t239 = t254 + t253;
t238 = t336 * t339;
t237 = t260 * t240;
t226 = -t232 - t272;
t225 = -t232 + t272;
t224 = t231 - t272;
t217 = t233 + 0.2e1 * t306;
t215 = -t185 + 0.2e1 * t305;
t211 = -t272 - t231;
t197 = -t203 + t332;
t196 = t202 - t332;
t193 = -t203 - t332;
t191 = -t231 - t232;
t184 = -t226 * t266 - t312;
t183 = t226 * t270 - t313;
t181 = t185 * t270 + t233 * t266;
t180 = t185 * t266 - t233 * t270;
t179 = t211 * t270 - t345;
t178 = t211 * t266 + t342;
t176 = t203 - t202;
t169 = -t332 - t202;
t166 = -t187 + t200;
t165 = t186 - t200;
t164 = (-t204 * t269 + t206 * t265) * t257;
t163 = (-t204 * t265 - t206 * t269) * t257;
t161 = t187 - t186;
t157 = -t202 - t203;
t156 = -t183 * t260 + t184 * t262;
t154 = t196 * t269 - t319;
t153 = -t197 * t265 + t343;
t152 = t196 * t265 + t318;
t151 = t197 * t269 + t346;
t150 = -t193 * t265 - t318;
t149 = t193 * t269 - t319;
t144 = -t180 * t260 + t181 * t262;
t143 = t160 + t199;
t138 = (qJD(5) + t257) * t206 + t287;
t137 = -t178 * t260 + t179 * t262;
t136 = t160 * t269 - t206 * t311;
t135 = t160 * t265 + t206 * t310;
t134 = -t159 * t265 + t204 * t310;
t133 = t159 * t269 + t204 * t311;
t131 = t169 * t269 - t346;
t130 = t169 * t265 + t343;
t128 = -qJD(6) * t190 - t288;
t127 = (-t188 * t268 + t190 * t264) * t201;
t126 = (-t188 * t264 - t190 * t268) * t201;
t117 = t129 - t167;
t110 = t129 * t268 - t190 * t315;
t109 = t129 * t264 + t190 * t314;
t108 = -t128 * t264 + t188 * t314;
t107 = t128 * t268 + t188 * t315;
t106 = -t149 * t266 + t150 * t270;
t105 = t149 * t270 + t150 * t266;
t103 = -pkin(9) * t149 + t320;
t102 = t127 * t269 + t158 * t265;
t101 = t127 * t265 - t158 * t269;
t100 = t165 * t268 - t323;
t99 = -t166 * t264 + t344;
t98 = t165 * t264 + t322;
t97 = t166 * t268 + t347;
t96 = t143 * t265 + t269 * t282;
t95 = -t138 * t269 - t142 * t265;
t94 = -t143 * t269 + t265 * t282;
t93 = -t138 * t265 + t142 * t269;
t92 = -pkin(9) * t130 + t321;
t91 = -t130 * t266 + t131 * t270;
t90 = t130 * t270 + t131 * t266;
t88 = t155 * t268 - t323;
t85 = t148 * t264 + t344;
t83 = t110 * t269 + t295;
t82 = t108 * t269 - t295;
t81 = t110 * t265 - t294;
t80 = t108 * t265 + t294;
t77 = -pkin(4) * t142 + pkin(9) * t150 + t321;
t74 = -pkin(4) * t138 + pkin(9) * t131 - t320;
t73 = t116 * t268 - t117 * t264;
t71 = t116 * t264 + t117 * t268;
t70 = -t114 * t264 - t118 * t268;
t65 = -t105 * t260 + t106 * t262;
t64 = t100 * t269 - t114 * t265;
t63 = t118 * t265 + t269 * t99;
t62 = t100 * t265 + t114 * t269;
t61 = -t118 * t269 + t265 * t99;
t60 = -t119 * t265 + t269 * t89;
t59 = t119 * t269 + t265 * t89;
t58 = -t116 * t265 + t269 * t86;
t57 = t116 * t269 + t265 * t86;
t56 = t161 * t265 + t269 * t73;
t55 = -t161 * t269 + t265 * t73;
t54 = -t266 * t94 + t270 * t96;
t53 = t266 * t96 + t270 * t94;
t47 = -t147 * t265 + t269 * t72;
t46 = t147 * t269 + t265 * t72;
t45 = -t260 * t90 + t262 * t91;
t44 = t262 * t79 - t328;
t43 = -pkin(10) * t88 + t49;
t42 = -pkin(10) * t85 + t48;
t35 = -t266 * t59 + t270 * t60;
t34 = t266 * t60 + t270 * t59;
t33 = -pkin(4) * t145 + pkin(9) * t41;
t32 = -t266 * t57 + t270 * t58;
t31 = t266 * t58 + t270 * t57;
t30 = -t260 * t53 + t262 * t54;
t29 = -t266 * t46 + t270 * t47;
t28 = t266 * t47 + t270 * t46;
t27 = -pkin(9) * t94 - t40;
t26 = -pkin(5) * t88 + t39;
t25 = -pkin(5) * t85 + t38;
t24 = -pkin(4) * t157 + pkin(9) * t96 + t41;
t23 = t270 * t41 - t327;
t22 = t266 * t41 + t326;
t18 = -t260 * t34 + t262 * t35;
t17 = -t260 * t31 + t262 * t32;
t16 = -t260 * t28 + t262 * t29;
t15 = -pkin(10) * t70 - t20;
t14 = t21 * t269 + t265 * t51;
t13 = t21 * t265 - t269 * t51;
t12 = -pkin(9) * t59 - t26 * t265 + t269 * t43;
t11 = -pkin(9) * t57 - t25 * t265 + t269 * t42;
t10 = -pkin(4) * t88 + pkin(9) * t60 + t26 * t269 + t265 * t43;
t9 = -pkin(4) * t85 + pkin(9) * t58 + t25 * t269 + t265 * t42;
t8 = -pkin(9) * t46 + t15 * t269 + t70 * t330;
t7 = -t22 * t260 + t23 * t262;
t6 = pkin(9) * t47 + t265 * t15 + t293 * t70;
t5 = -t13 * t266 + t14 * t270;
t4 = t13 * t270 + t14 * t266;
t3 = -pkin(9) * t13 + (-pkin(10) * t269 + t330) * t20;
t2 = pkin(9) * t14 + (-pkin(10) * t265 + t293) * t20;
t1 = -t260 * t4 + t262 * t5;
t19 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t308, 0, 0, 0, 0, 0, 0, (qJDD(2) * t271 - t331 * t267) * t261, (-qJDD(2) * t267 - t331 * t271) * t261, 0, t263 * t223 + (t208 * t267 - t271 * t286) * t261, 0, 0, 0, 0, 0, 0, (-t238 * t267 + t271 * t299) * t261, (t237 * t267 - t271 * t300) * t261, (t239 * t267 + t240 * t271) * t261, t263 * (-t174 * t262 + t175 * t260) + (t132 * t267 - t194 * t271) * t261, 0, 0, 0, 0, 0, 0, t263 * (t178 * t262 + t179 * t260) + (t137 * t267 - t215 * t271) * t261, t263 * (t183 * t262 + t184 * t260) + (t156 * t267 - t217 * t271) * t261, t263 * (t180 * t262 + t181 * t260) + (t144 * t267 - t191 * t271) * t261, t263 * (t260 * t79 + t262 * t78) + (-t182 * t271 + t267 * t44) * t261, 0, 0, 0, 0, 0, 0, t263 * (t260 * t91 + t262 * t90) + (-t138 * t271 + t267 * t45) * t261, t263 * (t105 * t262 + t106 * t260) + (-t142 * t271 + t267 * t65) * t261, t263 * (t260 * t54 + t262 * t53) + (-t157 * t271 + t267 * t30) * t261, t263 * (t22 * t262 + t23 * t260) + (-t145 * t271 + t267 * t7) * t261, 0, 0, 0, 0, 0, 0, t263 * (t260 * t32 + t262 * t31) + (t17 * t267 - t271 * t85) * t261, t263 * (t260 * t35 + t262 * t34) + (t18 * t267 - t271 * t88) * t261, t263 * (t260 * t29 + t262 * t28) + (t16 * t267 - t271 * t70) * t261, t263 * (t260 * t5 + t262 * t4) + (t1 * t267 - t20 * t271) * t261; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), -t286, -t208, 0, 0, t253, 0.2e1 * t260 * t299, 0, t254, 0, 0, -qJ(3) * t238 + t262 * t290, qJ(3) * t237 - t260 * t290, pkin(2) * t240 + qJ(3) * t239 + t132, -pkin(2) * t194 + qJ(3) * t132, t260 * (t218 * t270 - t266 * t305) + t262 * (t218 * t266 + t270 * t305), t260 * (-t215 * t270 - t217 * t266) + t262 * (-t215 * t266 + t217 * t270), t260 * (-t225 * t266 + t342) + t262 * (t225 * t270 + t345), t260 * (-t216 * t266 - t270 * t306) + t262 * (t216 * t270 - t266 * t306), t260 * (t224 * t270 - t313) + t262 * (t224 * t266 + t312), (t260 * (t234 * t270 + t235 * t266) + t262 * (t234 * t266 - t235 * t270)) * qJD(4), t260 * (-pkin(8) * t178 + t317) + t262 * (-pkin(3) * t215 + pkin(8) * t179 - t316) - pkin(2) * t215 + qJ(3) * t137, t260 * (-pkin(8) * t183 + t316) + t262 * (-pkin(3) * t217 + pkin(8) * t184 + t317) - pkin(2) * t217 + qJ(3) * t156, t260 * (-pkin(8) * t180 - t78) + t262 * (-pkin(3) * t191 + pkin(8) * t181 + t79) - pkin(2) * t191 + qJ(3) * t144, -pkin(8) * t328 + t262 * (-pkin(3) * t182 + pkin(8) * t79) - pkin(2) * t182 + qJ(3) * t44, t260 * (-t135 * t266 + t136 * t270) + t262 * (t135 * t270 + t136 * t266), t260 * (-t266 * t93 + t270 * t95) + t262 * (t266 * t95 + t270 * t93), t260 * (-t151 * t266 + t153 * t270) + t262 * (t151 * t270 + t153 * t266), t260 * (-t133 * t266 + t134 * t270) + t262 * (t133 * t270 + t134 * t266), t260 * (-t152 * t266 + t154 * t270) + t262 * (t152 * t270 + t154 * t266), t260 * (-t163 * t266 + t164 * t270) + t262 * (t163 * t270 + t164 * t266), t260 * (-pkin(8) * t90 - t266 * t74 + t270 * t92) + t262 * (-pkin(3) * t138 + pkin(8) * t91 + t266 * t92 + t270 * t74) - pkin(2) * t138 + qJ(3) * t45, t260 * (-pkin(8) * t105 + t103 * t270 - t266 * t77) + t262 * (-pkin(3) * t142 + pkin(8) * t106 + t103 * t266 + t270 * t77) - pkin(2) * t142 + qJ(3) * t65, t260 * (-pkin(8) * t53 - t24 * t266 + t27 * t270) + t262 * (-pkin(3) * t157 + pkin(8) * t54 + t24 * t270 + t266 * t27) - pkin(2) * t157 + qJ(3) * t30, t260 * (-pkin(8) * t22 - pkin(9) * t326 - t266 * t33) + t262 * (-pkin(3) * t145 + pkin(8) * t23 - pkin(9) * t327 + t270 * t33) - pkin(2) * t145 + qJ(3) * t7, t260 * (-t266 * t81 + t270 * t83) + t262 * (t266 * t83 + t270 * t81), t260 * (-t266 * t55 + t270 * t56) + t262 * (t266 * t56 + t270 * t55), t260 * (-t266 * t61 + t270 * t63) + t262 * (t266 * t63 + t270 * t61), t260 * (-t266 * t80 + t270 * t82) + t262 * (t266 * t82 + t270 * t80), t260 * (-t266 * t62 + t270 * t64) + t262 * (t266 * t64 + t270 * t62), t260 * (-t101 * t266 + t102 * t270) + t262 * (t101 * t270 + t102 * t266), t260 * (-pkin(8) * t31 + t11 * t270 - t266 * t9) + t262 * (-pkin(3) * t85 + pkin(8) * t32 + t11 * t266 + t270 * t9) - pkin(2) * t85 + qJ(3) * t17, t260 * (-pkin(8) * t34 - t10 * t266 + t12 * t270) + t262 * (-pkin(3) * t88 + pkin(8) * t35 + t10 * t270 + t12 * t266) - pkin(2) * t88 + qJ(3) * t18, t260 * (-pkin(8) * t28 - t266 * t6 + t270 * t8) + t262 * (-pkin(3) * t70 + pkin(8) * t29 + t266 * t8 + t270 * t6) - pkin(2) * t70 + qJ(3) * t16, t260 * (-pkin(8) * t4 - t2 * t266 + t270 * t3) + t262 * (-pkin(3) * t20 + pkin(8) * t5 + t2 * t270 + t266 * t3) - pkin(2) * t20 + qJ(3) * t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t299, t300, -t240, t194, 0, 0, 0, 0, 0, 0, t215, t217, t191, t182, 0, 0, 0, 0, 0, 0, t138, t142, t157, t145, 0, 0, 0, 0, 0, 0, t85, t88, t70, t20; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t219, t232 - t231, t233, t219, t185, qJDD(4), -t124, -t125, 0, 0, t177, t176, t143, -t177, t282, t256, pkin(4) * t130 - t67, -t309 - t265 * t348 + (-t265 * t334 + t149) * pkin(4), pkin(4) * t94, pkin(4) * t40, t109, t71, t97, t107, t98, t126, pkin(4) * t57 + t297, pkin(4) * t59 + t298, pkin(4) * t46 + t291, pkin(4) * t13 + t329; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t177, t176, t143, -t177, t282, t256, -t67, -t68, 0, 0, t109, t71, t97, t107, t98, t126, t297, t298, t291, t329; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t162, t161, t118, -t162, -t114, t158, -t38, -t39, 0, 0;];
tauJ_reg  = t19;
