% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6PRPRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,d6,theta1,theta3]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-08 20:34
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6PRPRRR3_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR3_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRR3_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRR3_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRR3_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRPRRR3_invdynJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-08 20:34:19
% EndTime: 2019-03-08 20:34:36
% DurationCPUTime: 10.24s
% Computational Cost: add. (13037->598), mult. (31312->797), div. (0->0), fcn. (26231->18), ass. (0->308)
t218 = sin(pkin(12));
t384 = pkin(8) + qJ(3);
t184 = t384 * t218;
t221 = cos(pkin(12));
t397 = cos(qJ(4));
t307 = t397 * t221;
t226 = sin(qJ(4));
t344 = t226 * t218;
t258 = -t307 + t344;
t220 = sin(pkin(6));
t229 = cos(qJ(2));
t346 = t220 * t229;
t240 = t258 * t346;
t299 = qJD(4) * t397;
t300 = qJD(3) * t397;
t444 = qJD(1) * t240 - t184 * t299 + t221 * t300;
t228 = cos(qJ(6));
t328 = qJD(6) * t228;
t285 = qJD(2) * t307;
t301 = qJD(2) * t344;
t170 = t285 - t301;
t225 = sin(qJ(5));
t396 = cos(qJ(5));
t178 = t218 * t397 + t226 * t221;
t407 = t178 * qJD(2);
t111 = t396 * t170 - t225 * t407;
t431 = t111 * t228;
t443 = t328 - t431;
t185 = t384 * t221;
t245 = qJD(4) * t178;
t332 = qJD(4) * t226;
t333 = qJD(3) * t226;
t442 = -pkin(9) * t245 - t185 * t332 - t218 * t333 + t444;
t239 = t178 * t346;
t140 = qJD(1) * t239;
t246 = qJD(4) * t258;
t441 = pkin(9) * t246 + t184 * t332 - t185 * t299 - t218 * t300 - t221 * t333 + t140;
t217 = pkin(12) + qJ(4);
t212 = qJ(5) + t217;
t205 = sin(t212);
t222 = cos(pkin(6));
t366 = cos(pkin(11));
t291 = t366 * t229;
t219 = sin(pkin(11));
t227 = sin(qJ(2));
t349 = t219 * t227;
t166 = -t222 * t291 + t349;
t292 = t366 * t227;
t348 = t219 * t229;
t168 = t222 * t348 + t292;
t280 = g(1) * t168 + g(2) * t166;
t408 = -g(3) * t346 + t280;
t440 = t408 * t205;
t224 = sin(qJ(6));
t320 = qJD(4) + qJD(5);
t335 = qJD(1) * t227;
t302 = t220 * t335;
t183 = qJD(2) * qJ(3) + t302;
t336 = qJD(1) * t222;
t195 = t221 * t336;
t379 = pkin(8) * qJD(2);
t132 = t195 + (-t183 - t379) * t218;
t146 = t221 * t183 + t218 * t336;
t133 = t221 * t379 + t146;
t80 = t226 * t132 + t133 * t397;
t69 = t170 * pkin(9) + t80;
t314 = t396 * t69;
t357 = t133 * t226;
t79 = t397 * t132 - t357;
t68 = -pkin(9) * t407 + t79;
t67 = qJD(4) * pkin(4) + t68;
t43 = t225 * t67 + t314;
t35 = pkin(10) * t320 + t43;
t207 = t221 * pkin(3) + pkin(2);
t306 = qJD(1) * t346;
t276 = qJD(3) - t306;
t160 = -qJD(2) * t207 + t276;
t124 = -pkin(4) * t170 + t160;
t256 = -t225 * t170 - t396 * t407;
t53 = -pkin(5) * t111 + pkin(10) * t256 + t124;
t272 = t224 * t35 - t228 * t53;
t425 = qJD(6) - t111;
t439 = t425 * t272;
t409 = -pkin(4) * t245 + t302;
t294 = qJDD(2) * t397;
t321 = t221 * qJDD(2);
t308 = qJD(4) * t285 + t218 * t294 + t226 * t321;
t126 = qJD(4) * t301 - t308;
t322 = t218 * qJDD(2);
t275 = -t221 * t294 + t226 * t322;
t427 = qJD(4) * t407;
t127 = t275 + t427;
t298 = qJD(5) * t396;
t331 = qJD(5) * t225;
t255 = -t396 * t126 - t225 * t127 + t170 * t298 - t331 * t407;
t410 = t111 * t320;
t438 = t255 - t410;
t361 = t111 ^ 2;
t362 = t256 ^ 2;
t437 = -t361 + t362;
t14 = t224 * t53 + t228 * t35;
t288 = t225 * t126 - t396 * t127;
t426 = qJD(5) * t256;
t55 = -t288 - t426;
t325 = qJDD(1) * t220;
t296 = t229 * t325;
t334 = qJD(2) * t227;
t297 = qJD(1) * t334;
t406 = t220 * t297 + qJDD(3);
t260 = -t296 + t406;
t277 = t207 * qJDD(2);
t136 = -t277 + t260;
t395 = pkin(4) * t127;
t82 = t136 + t395;
t16 = pkin(5) * t55 - pkin(10) * t255 + t82;
t319 = qJDD(4) + qJDD(5);
t323 = qJDD(2) * qJ(3);
t143 = t227 * t325 + t323 + (qJD(3) + t306) * qJD(2);
t324 = qJDD(1) * t222;
t119 = t221 * t143 + t218 * t324;
t100 = pkin(8) * t321 + t119;
t192 = t221 * t324;
t99 = t192 + (-pkin(8) * qJDD(2) - t143) * t218;
t290 = -t226 * t100 + t397 * t99;
t48 = -t80 * qJD(4) + t290;
t28 = qJDD(4) * pkin(4) + t126 * pkin(9) + t48;
t317 = -t397 * t100 - t132 * t299 - t226 * t99;
t47 = -t133 * t332 - t317;
t29 = -pkin(9) * t127 + t47;
t9 = t225 * t28 + t396 * t29 + t67 * t298 - t69 * t331;
t7 = pkin(10) * t319 + t9;
t3 = -qJD(6) * t14 + t228 * t16 - t224 * t7;
t414 = t425 * t14 + t3;
t287 = t228 * t320;
t329 = qJD(6) * t224;
t40 = -qJD(6) * t287 - t224 * t319 - t228 * t255 - t256 * t329;
t37 = t40 * t224;
t90 = t224 * t320 - t228 * t256;
t436 = t443 * t90 - t37;
t377 = t256 * t90;
t52 = qJDD(6) + t55;
t49 = t224 * t52;
t435 = t425 * t443 + t377 + t49;
t138 = -t397 * t184 - t226 * t185;
t101 = -pkin(9) * t178 + t138;
t139 = -t226 * t184 + t397 * t185;
t102 = -pkin(9) * t258 + t139;
t415 = t101 * t298 - t102 * t331 + t441 * t225 + t396 * t442;
t370 = t225 * t69;
t42 = t396 * t67 - t370;
t34 = -pkin(5) * t320 - t42;
t434 = t111 * t34;
t88 = -t224 * t256 - t287;
t378 = t256 * t88;
t238 = t396 * t258;
t74 = t178 * t331 + t225 * t245 + t238 * t320;
t248 = t225 * t258;
t75 = -qJD(5) * t248 + t178 * t298 - t225 * t246 + t245 * t396;
t433 = t75 * pkin(5) + t74 * pkin(10) - t409;
t432 = t425 * t256;
t358 = t111 * t256;
t169 = -t222 * t349 + t291;
t210 = sin(t217);
t211 = cos(t217);
t350 = t219 * t220;
t430 = -t169 * t210 + t211 * t350;
t347 = t220 * t227;
t429 = -t210 * t347 + t211 * t222;
t327 = t256 * qJD(4);
t428 = -t327 + t288;
t167 = t222 * t292 + t348;
t206 = cos(t212);
t293 = t220 * t366;
t120 = -t167 * t205 - t206 * t293;
t122 = -t169 * t205 + t206 * t350;
t147 = -t205 * t347 + t206 * t222;
t424 = g(1) * t122 + g(2) * t120 + g(3) * t147;
t295 = t225 * t29 - t396 * t28;
t10 = -t43 * qJD(5) - t295;
t8 = -pkin(5) * t319 - t10;
t418 = t8 * t224 + t34 * t328;
t423 = -t14 * t256 + t224 * t424 + t418;
t32 = t34 * t329;
t422 = -t272 * t256 + t32;
t121 = t167 * t206 - t205 * t293;
t123 = t169 * t206 + t205 * t350;
t148 = t205 * t222 + t206 * t347;
t253 = -g(1) * t123 - g(2) * t121 - g(3) * t148;
t421 = -t124 * t111 - t253 - t9;
t263 = -t228 * t40 - t90 * t329;
t368 = t228 * t88;
t371 = t224 * t90;
t271 = t368 + t371;
t365 = qJD(6) * t90;
t41 = t224 * t255 - t228 * t319 + t365;
t382 = -t224 * t41 - t88 * t328;
t420 = t111 * t271 + t263 + t382;
t419 = t124 * t256 - t295 - t424;
t71 = -pkin(5) * t256 - pkin(10) * t111;
t2 = -t272 * qJD(6) + t224 * t16 + t228 * t7;
t1 = t2 * t228;
t417 = -t3 * t224 + t1;
t416 = t2 + t439;
t61 = t225 * t101 + t102 * t396;
t383 = qJD(5) * t61 + t225 * t442 - t441 * t396;
t50 = t228 * t52;
t413 = t329 * t425 - t50;
t44 = t225 * t68 + t314;
t284 = pkin(4) * t331 - t44;
t412 = (-qJD(3) * t218 - qJD(4) * t185) * t226 + t444;
t411 = -t178 * qJD(3) - qJD(4) * t139 + t140;
t230 = qJD(2) ^ 2;
t252 = (qJDD(2) * t229 - t227 * t230) * t220;
t45 = t396 * t68 - t370;
t394 = pkin(4) * t407;
t58 = t394 + t71;
t18 = t224 * t58 + t228 * t45;
t393 = pkin(4) * t225;
t208 = pkin(10) + t393;
t286 = pkin(4) * t298;
t405 = -t208 * t329 + t228 * t286 - t18;
t364 = qJDD(2) * pkin(2);
t149 = t260 - t364;
t265 = -t149 + t280;
t403 = t220 * (-g(3) * t229 + t297) + t265 + t364;
t269 = (-t183 * t218 + t195) * t218 - t146 * t221;
t402 = t229 * t269 - (-qJD(2) * pkin(2) + t276) * t227;
t401 = t407 ^ 2;
t400 = qJD(4) ^ 2;
t128 = t178 * t225 + t238;
t129 = t178 * t396 - t248;
t150 = pkin(4) * t258 - t207;
t62 = t128 * pkin(5) - t129 * pkin(10) + t150;
t30 = -t224 * t61 + t228 * t62;
t399 = qJD(6) * t30 + t224 * t433 + t228 * t415;
t31 = t224 * t62 + t228 * t61;
t398 = -qJD(6) * t31 - t224 * t415 + t228 * t433;
t387 = g(3) * t220;
t385 = t90 * t88;
t375 = t272 * t224;
t373 = t224 * t74;
t372 = t224 * t88;
t369 = t228 * t74;
t367 = t228 * t90;
t39 = t41 * t228;
t363 = t425 * t224;
t355 = t407 * t170;
t353 = t206 * t224;
t352 = t206 * t228;
t345 = t224 * t229;
t343 = t228 * t229;
t342 = t229 * t230;
t341 = qJDD(1) - g(3);
t181 = pkin(4) * t211 + t207;
t213 = -pkin(9) - t384;
t340 = -t166 * t181 - t167 * t213;
t339 = -t168 * t181 - t169 * t213;
t214 = t218 ^ 2;
t216 = t221 ^ 2;
t337 = t214 + t216;
t330 = qJD(6) * t425;
t318 = g(3) * t347;
t316 = t396 * pkin(4);
t310 = t220 * t345;
t309 = t220 * t343;
t305 = t220 * t334;
t283 = t430 * pkin(4);
t281 = pkin(5) * t206 + pkin(10) * t205;
t279 = g(1) * t169 + g(2) * t167;
t274 = -t208 * t52 - t434;
t273 = t14 * t224 - t228 * t272;
t268 = t429 * pkin(4);
t266 = t111 * t363 - t413;
t163 = -t218 * t347 + t221 * t222;
t164 = t218 * t222 + t221 * t347;
t106 = t163 * t397 - t226 * t164;
t107 = t226 * t163 + t164 * t397;
t65 = t225 * t106 + t107 * t396;
t56 = -t224 * t65 - t309;
t262 = -t228 * t65 + t310;
t257 = t106 * t396 - t225 * t107;
t251 = -t167 * t210 - t211 * t293;
t250 = t1 + t253;
t249 = -t424 - t8;
t247 = -t279 - t318;
t241 = t251 * pkin(4);
t237 = t408 + t296;
t118 = -t143 * t218 + t192;
t236 = -t118 * t218 + t119 * t221 - t279;
t233 = -t237 + t406;
t232 = -t277 + t233;
t209 = -t316 - pkin(5);
t162 = t170 ^ 2;
t159 = t181 * t346;
t144 = t147 * pkin(5);
t114 = t122 * pkin(5);
t113 = t120 * pkin(5);
t78 = -qJD(2) * t239 - qJD(4) * t107;
t77 = -qJD(2) * t240 + qJD(4) * t106;
t60 = -t101 * t396 + t102 * t225;
t22 = qJD(5) * t65 + t225 * t77 - t396 * t78;
t21 = qJD(5) * t257 + t225 * t78 + t396 * t77;
t20 = t224 * t71 + t228 * t42;
t19 = -t224 * t42 + t228 * t71;
t17 = -t224 * t45 + t228 * t58;
t12 = qJD(6) * t262 - t21 * t224 + t228 * t305;
t11 = qJD(6) * t56 + t21 * t228 + t224 * t305;
t4 = [0, 0, 0, 0, 0, 0, 0, 0, 0, t341, 0, 0, 0, 0, 0, 0, t252 (-qJDD(2) * t227 - t342) * t220, 0, -g(3) + (t222 ^ 2 + (t227 ^ 2 + t229 ^ 2) * t220 ^ 2) * qJDD(1), 0, 0, 0, 0, 0, 0, t221 * t252, -t218 * t252, t337 * t220 * t342 + (-t163 * t218 + t164 * t221) * qJDD(2), t118 * t163 + t119 * t164 - g(3) + (-qJD(2) * t402 - t149 * t229) * t220, 0, 0, 0, 0, 0, 0, qJD(4) * t78 + qJDD(4) * t106 + (-t127 * t229 - t170 * t334) * t220, -qJD(4) * t77 - qJDD(4) * t107 + (t126 * t229 + t334 * t407) * t220, t106 * t126 - t107 * t127 + t170 * t77 - t407 * t78, t106 * t48 + t107 * t47 + t77 * t80 + t78 * t79 - g(3) + (-t136 * t229 + t160 * t334) * t220, 0, 0, 0, 0, 0, 0, -t22 * t320 + t257 * t319 + (-t111 * t334 - t229 * t55) * t220, -t21 * t320 - t65 * t319 + (-t229 * t255 - t256 * t334) * t220, t111 * t21 - t22 * t256 - t255 * t257 - t55 * t65, t10 * t257 + t21 * t43 - t22 * t42 + t65 * t9 - g(3) + (t124 * t334 - t229 * t82) * t220, 0, 0, 0, 0, 0, 0, t12 * t425 + t22 * t88 - t257 * t41 + t52 * t56, -t11 * t425 + t22 * t90 + t257 * t40 + t262 * t52, -t11 * t88 - t12 * t90 + t262 * t41 + t40 * t56, t11 * t14 - t12 * t272 - t2 * t262 + t22 * t34 - t257 * t8 + t3 * t56 - g(3); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(2), t237, -t341 * t347 + t279, 0, 0, t214 * qJDD(2), 0.2e1 * t218 * t321, 0, t216 * qJDD(2), 0, 0, t403 * t221, -t403 * t218, -t318 + t236 + (qJD(2) * t276 + t323) * t337, -t269 * qJD(3) + t265 * pkin(2) + t236 * qJ(3) + (-g(3) * (pkin(2) * t229 + qJ(3) * t227) + t402 * qJD(1)) * t220, -t126 * t178 - t246 * t407, t126 * t258 - t178 * t127 - t170 * t246 - t245 * t407, t178 * qJDD(4) - t258 * t400, t127 * t258 - t170 * t245, -qJDD(4) * t258 - t178 * t400, 0, t138 * qJDD(4) - t207 * t127 + t136 * t258 + t170 * t302 + t408 * t211 + (t160 * t178 + t411) * qJD(4), -qJD(4) * t412 - t139 * qJDD(4) + t207 * t126 + t136 * t178 - t160 * t246 - t210 * t408 - t302 * t407, t138 * t126 - t139 * t127 - t48 * t178 - t245 * t80 + t247 + (t79 * qJD(4) - t47) * t258 - t411 * t407 + t412 * t170, t47 * t139 + t48 * t138 - t136 * t207 - g(1) * (-t168 * t207 + t169 * t384) - g(2) * (-t166 * t207 + t167 * t384) + t412 * t80 + t411 * t79 + (-t160 * t335 - g(3) * (t207 * t229 + t227 * t384)) * t220, t129 * t255 + t256 * t74, -t111 * t74 - t128 * t255 - t129 * t55 + t256 * t75, t129 * t319 - t320 * t74, -t111 * t75 + t128 * t55, -t128 * t319 - t320 * t75, 0, t111 * t409 + t124 * t75 + t82 * t128 + t150 * t55 + t206 * t408 - t319 * t60 - t320 * t383, -t124 * t74 + t82 * t129 + t150 * t255 + t256 * t409 - t319 * t61 - t320 * t415 - t440, -t10 * t129 + t111 * t415 - t128 * t9 + t255 * t60 - t256 * t383 + t42 * t74 - t43 * t75 - t55 * t61 + t247, t9 * t61 - t10 * t60 + t82 * t150 - g(1) * t339 - g(2) * t340 - g(3) * (-t213 * t347 + t159) + t415 * t43 - t383 * t42 - t409 * t124, t129 * t263 - t367 * t74, t271 * t74 + (t37 - t39 + (-t367 + t372) * qJD(6)) * t129, t129 * t50 - t128 * t40 + t75 * t90 + (-t129 * t329 - t369) * t425, -t129 * t382 - t372 * t74, -t129 * t49 - t128 * t41 - t75 * t88 + (-t129 * t328 + t373) * t425, t128 * t52 + t425 * t75, t30 * t52 + t3 * t128 - t272 * t75 + t60 * t41 - t34 * t373 - g(1) * (-t168 * t352 + t169 * t224) - g(2) * (-t166 * t352 + t167 * t224) + t383 * t88 - (t206 * t343 + t224 * t227) * t387 + t418 * t129 + t398 * t425, -t31 * t52 - t2 * t128 - t14 * t75 - t60 * t40 - t34 * t369 - g(1) * (t168 * t353 + t169 * t228) - g(2) * (t166 * t353 + t167 * t228) + t383 * t90 - (-t206 * t345 + t227 * t228) * t387 + (t8 * t228 - t32) * t129 - t399 * t425, t30 * t40 - t31 * t41 - t398 * t90 - t399 * t88 + t273 * t74 + t440 + (-t2 * t224 - t228 * t3 + (-t14 * t228 - t375) * qJD(6)) * t129, t2 * t31 + t3 * t30 + t8 * t60 - g(1) * (-t168 * t281 + t339) - g(2) * (-t166 * t281 + t340) - g(3) * t159 + t383 * t34 - (-t213 * t227 + t229 * t281) * t387 + t399 * t14 - t398 * t272; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t321, t322, -t337 * t230, qJD(2) * t269 + t233 - t364, 0, 0, 0, 0, 0, 0, t275 + 0.2e1 * t427 (t170 - t301) * qJD(4) + t308, -t162 - t401, -t170 * t80 + t407 * t79 + t232, 0, 0, 0, 0, 0, 0, -t288 - t327 - 0.2e1 * t426, t255 + t410, -t361 - t362, -t111 * t43 - t256 * t42 + t232 + t395, 0, 0, 0, 0, 0, 0, t266 + t378, -t228 * t425 ^ 2 + t377 - t49 (t368 - t371) * t111 - t263 + t382, t224 * t416 + t228 * t414 + t256 * t34 - t408; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t355, -t162 + t401 (-t170 - t301) * qJD(4) + t308, t355, -t275, qJDD(4), -g(1) * t430 - g(2) * t251 - g(3) * t429 - t160 * t407 + t290, -t160 * t170 - g(1) * (-t169 * t211 - t210 * t350) - g(2) * (-t167 * t211 + t210 * t293) - g(3) * (-t210 * t222 - t211 * t347) + (t79 + t357) * qJD(4) + t317, 0, 0, t358, t437, t438, -t358, t428, t319, t44 * qJD(4) + (t44 - t43) * qJD(5) + (t111 * t407 + t319 * t396 - t320 * t331) * pkin(4) + t419, t45 * t320 + (-t225 * t319 + t256 * t407 - t298 * t320) * pkin(4) + t421, -t43 * t256 - t45 * t111 + t42 * t111 + t44 * t256 + (-t396 * t255 - t225 * t55 + (t111 * t396 - t225 * t256) * qJD(5)) * pkin(4), -g(1) * t283 - g(2) * t241 - g(3) * t268 + t10 * t316 - t124 * t394 + t9 * t393 + (t286 - t45) * t43 - t284 * t42, t436, t420, t435, t363 * t88 - t39, t266 - t378, t432, -t17 * t425 + t209 * t41 + t284 * t88 + (-t286 * t425 + t274) * t224 + (-t208 * t330 + t249) * t228 + t422, -t209 * t40 + t274 * t228 + t284 * t90 - t405 * t425 + t423, t17 * t90 + t18 * t88 + (-t88 * t286 - t111 * t272 - t208 * t41 + (t208 * t90 + t272) * qJD(6)) * t228 + (t90 * t286 + t111 * t14 - t208 * t40 - t3 + (t208 * t88 - t14) * qJD(6)) * t224 + t250, t286 * t375 + t8 * t209 + t272 * t17 - g(1) * (pkin(10) * t123 + t114 + t283) - g(2) * (t121 * pkin(10) + t113 + t241) - g(3) * (pkin(10) * t148 + t144 + t268) + t284 * t34 + (t272 * t328 + t417) * t208 + t405 * t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t358, t437, t438, -t358, t428, t319, t43 * qJD(4) + t419, t320 * t42 + t421, 0, 0, t436, t420, t435, t372 * t425 - t39, -t363 * t425 - t378 + t50, t432, -pkin(5) * t41 - t425 * t19 - t43 * t88 + (-pkin(10) * t52 - t434) * t224 + (-pkin(10) * t330 + t249) * t228 + t422, pkin(5) * t40 + pkin(10) * t413 + t20 * t425 - t34 * t431 - t43 * t90 + t423, t19 * t90 + t20 * t88 + (t439 + (-t41 + t365) * pkin(10)) * t228 + ((qJD(6) * t88 - t40) * pkin(10) - t414) * t224 + t250, -t8 * pkin(5) - g(1) * t114 - g(2) * t113 - g(3) * t144 + t272 * t19 - t14 * t20 - t34 * t43 + (-qJD(6) * t273 + t253 + t417) * pkin(10); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t385, -t88 ^ 2 + t90 ^ 2, t425 * t88 - t40, -t385, t425 * t90 - t41, t52, -t34 * t90 - g(1) * (-t123 * t224 + t168 * t228) - g(2) * (-t121 * t224 + t166 * t228) - g(3) * (-t148 * t224 - t309) + t414, t34 * t88 - g(1) * (-t123 * t228 - t168 * t224) - g(2) * (-t121 * t228 - t166 * t224) - g(3) * (-t148 * t228 + t310) - t416, 0, 0;];
tau_reg  = t4;
