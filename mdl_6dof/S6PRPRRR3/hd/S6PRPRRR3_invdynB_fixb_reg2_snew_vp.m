% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6PRPRRR3
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d2,d4,d5,d6,theta1,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-05 00:44
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6PRPRRR3_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6PRPRRR3_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6PRPRRR3_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6PRPRRR3_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6PRPRRR3_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6PRPRRR3_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-05 00:42:49
% EndTime: 2019-05-05 00:43:30
% DurationCPUTime: 42.14s
% Computational Cost: add. (332049->966), mult. (757142->1585), div. (0->0), fcn. (609335->14), ass. (0->686)
t1091 = qJD(2) ^ 2;
t943 = sin(pkin(11));
t946 = cos(pkin(11));
t1033 = g(1) * t943 - t946 * g(2);
t1059 = g(3) - qJDD(1);
t944 = sin(pkin(6));
t947 = cos(pkin(6));
t1105 = t947 * t1033 - t944 * t1059;
t919 = g(1) * t946 + g(2) * t943;
t951 = sin(qJ(2));
t955 = cos(qJ(2));
t854 = t1105 * t951 - t955 * t919;
t1106 = -pkin(2) * t1091 + qJDD(2) * qJ(3) + (2 * qJD(2) * qJD(3)) + t854;
t942 = sin(pkin(12));
t950 = sin(qJ(4));
t1064 = t942 * t950;
t945 = cos(pkin(12));
t954 = cos(qJ(4));
t906 = (t945 * t954 - t1064) * qJD(2);
t990 = t942 * t954 + t945 * t950;
t907 = t990 * qJD(2);
t949 = sin(qJ(5));
t953 = cos(qJ(5));
t850 = -t953 * t906 + t907 * t949;
t939 = qJD(4) + qJD(5);
t843 = t939 * t850;
t1055 = t907 * qJD(4);
t1049 = qJDD(2) * t945;
t900 = qJDD(2) * t1064 - t954 * t1049;
t866 = -t900 - t1055;
t1056 = t906 * qJD(4);
t1096 = t990 * qJDD(2);
t868 = t1096 + t1056;
t967 = qJD(5) * t850 - t866 * t949 - t868 * t953;
t1113 = t967 + t843;
t874 = t906 * t907;
t1095 = qJDD(4) + t874;
t1112 = t1095 * t950;
t1111 = t1095 * t954;
t852 = t906 * t949 + t907 * t953;
t799 = t852 * t850;
t938 = qJDD(4) + qJDD(5);
t1101 = -t799 + t938;
t1110 = t1101 * t949;
t1109 = t1101 * t953;
t948 = sin(qJ(6));
t952 = cos(qJ(6));
t831 = t852 * t948 - t952 * t939;
t833 = t852 * t952 + t939 * t948;
t777 = t833 * t831;
t1029 = -t953 * t866 + t868 * t949;
t769 = -qJD(5) * t852 - t1029;
t968 = qJDD(6) - t769;
t1102 = -t777 + t968;
t1108 = t1102 * t948;
t1107 = t1102 * t952;
t957 = t942 ^ 2;
t1057 = t1091 * t957;
t959 = t945 ^ 2;
t934 = t959 * t1091;
t914 = t934 + t1057;
t1047 = qJDD(2) * t955;
t1034 = t945 * t1047;
t1094 = t1091 * (t957 + t959);
t910 = t945 * t1094;
t982 = -t910 * t951 + t1034;
t1103 = t982 * t947;
t1048 = qJDD(2) * t951;
t885 = t1048 * t945 + t910 * t955;
t814 = t1103 * t946 - t885 * t943;
t1104 = t1103 * t943 + t885 * t946;
t876 = t982 * t944;
t716 = -t831 * qJD(6) + t948 * t938 - t952 * t967;
t847 = qJD(6) + t850;
t787 = t847 * t831;
t686 = -t787 + t716;
t1099 = t943 * t1059;
t1098 = t946 * t1059;
t1054 = t945 * t1091;
t891 = t1033 * t944 + t1059 * t947;
t888 = t945 * t891;
t1097 = -t888 + (pkin(3) * t1054 - pkin(8) * qJDD(2) - t1106) * t942;
t883 = -t1033 * t943 - t946 * t919;
t733 = (qJD(5) - t939) * t852 + t1029;
t1030 = -t952 * t938 - t948 * t967;
t683 = (qJD(6) - t847) * t833 + t1030;
t882 = t1033 * t946 - t943 * t919;
t829 = t831 ^ 2;
t830 = t833 ^ 2;
t846 = t847 ^ 2;
t848 = t850 ^ 2;
t849 = t852 ^ 2;
t1093 = t906 ^ 2;
t899 = t907 ^ 2;
t1092 = t939 ^ 2;
t1090 = pkin(5) * t949;
t853 = -t1105 * t955 - t919 * t951;
t789 = t853 * t951 + t854 * t955;
t1089 = pkin(7) * t789;
t941 = qJDD(2) * pkin(2);
t797 = t1106 * t945 - t942 * t891;
t962 = -pkin(3) * t934 + pkin(8) * t1049 + t797;
t708 = t1097 * t950 + t954 * t962;
t890 = qJD(4) * pkin(4) - pkin(9) * t907;
t682 = -pkin(4) * t1093 + pkin(9) * t866 - qJD(4) * t890 + t708;
t707 = -t1097 * t954 + t950 * t962;
t961 = (-t868 + t1056) * pkin(9) + t1095 * pkin(4) - t707;
t596 = t682 * t949 - t953 * t961;
t597 = t953 * t682 + t949 * t961;
t541 = -t596 * t953 + t597 * t949;
t1088 = t541 * t950;
t1087 = t541 * t954;
t795 = pkin(5) * t850 - pkin(10) * t852;
t565 = -t938 * pkin(5) - pkin(10) * t1092 + t795 * t852 + t596;
t1086 = t565 * t948;
t1085 = t565 * t952;
t625 = -t707 * t954 + t708 * t950;
t1084 = t625 * t942;
t1083 = t625 * t945;
t695 = t777 + t968;
t1082 = t695 * t948;
t1081 = t695 * t952;
t837 = -t1091 * qJ(3) + qJDD(3) + t853 - t941;
t812 = -pkin(3) * t1049 - pkin(8) * t914 + t837;
t742 = -t866 * pkin(4) - t1093 * pkin(9) + t890 * t907 + t812;
t1080 = t742 * t949;
t1079 = t742 * t953;
t793 = t799 + t938;
t1078 = t793 * t949;
t1077 = t793 * t953;
t1076 = t812 * t950;
t1075 = t812 * t954;
t1074 = t837 * t951;
t1073 = t837 * t955;
t1072 = t847 * t948;
t1071 = t847 * t952;
t863 = qJDD(4) - t874;
t1070 = t863 * t950;
t1069 = t863 * t954;
t1036 = t942 * t1054;
t889 = t1034 * t942 - t1036 * t951;
t1068 = t889 * t943;
t1067 = t889 * t946;
t1066 = t939 * t949;
t1065 = t939 * t953;
t1062 = t945 * t951;
t1061 = t951 * t891;
t1060 = t955 * t891;
t566 = -pkin(5) * t1092 + pkin(10) * t938 - t795 * t850 + t597;
t614 = t1113 * pkin(10) + (t852 * t939 - t769) * pkin(5) + t742;
t538 = t952 * t566 + t948 * t614;
t1050 = qJDD(2) * t944;
t1046 = qJDD(2) * t957;
t1044 = t949 * t777;
t1043 = t953 * t777;
t1042 = t951 * t799;
t1041 = t955 * t799;
t1040 = t951 * t874;
t1039 = t955 * t874;
t1038 = t942 * t1062;
t1037 = -pkin(5) * t953 - pkin(4);
t1035 = t942 * t1049;
t1031 = -t837 + t941;
t537 = t566 * t948 - t952 * t614;
t542 = t596 * t949 + t953 * t597;
t626 = t707 * t950 + t954 * t708;
t796 = t1106 * t942 + t888;
t722 = t796 * t942 + t945 * t797;
t1028 = t944 * t1038;
t1027 = t947 * t1038;
t1026 = t955 * t1036;
t721 = t796 * t945 - t797 * t942;
t933 = t959 * qJDD(2);
t912 = t933 + t1046;
t880 = t912 * t955 - t914 * t951;
t1024 = pkin(7) * t880 + t721 * t951;
t917 = -t1091 * t951 + t1047;
t1023 = -pkin(7) * t917 - t1061;
t988 = t1091 * t955 + t1048;
t1022 = -pkin(7) * t988 + t1060;
t1021 = t944 * t1026;
t1020 = t947 * t1026;
t474 = t537 * t948 + t538 * t952;
t444 = t474 * t949 - t565 * t953;
t445 = t474 * t953 + t565 * t949;
t411 = t444 * t954 + t445 * t950;
t412 = -t444 * t950 + t445 * t954;
t382 = -t411 * t942 + t412 * t945;
t473 = -t537 * t952 + t538 * t948;
t1019 = t382 * t951 - t473 * t955;
t476 = t542 * t950 + t1087;
t477 = t542 * t954 - t1088;
t427 = -t476 * t942 + t477 * t945;
t1018 = t427 * t951 - t742 * t955;
t687 = -t787 - t716;
t604 = -t683 * t952 - t687 * t948;
t745 = t829 + t830;
t562 = t604 * t949 + t745 * t953;
t563 = t604 * t953 - t745 * t949;
t507 = t562 * t954 + t563 * t950;
t508 = -t562 * t950 + t563 * t954;
t451 = -t507 * t942 + t508 * t945;
t602 = -t683 * t948 + t687 * t952;
t1017 = t451 * t951 - t602 * t955;
t685 = (-qJD(6) - t847) * t833 - t1030;
t605 = t685 * t952 - t686 * t948;
t775 = -t830 + t829;
t575 = t605 * t949 + t775 * t953;
t576 = t605 * t953 - t775 * t949;
t517 = t575 * t954 + t576 * t950;
t518 = -t575 * t950 + t576 * t954;
t460 = -t517 * t942 + t518 * t945;
t603 = -t685 * t948 - t686 * t952;
t1016 = t460 * t951 + t603 * t955;
t747 = -t846 - t829;
t640 = t747 * t952 - t1108;
t577 = t640 * t949 + t685 * t953;
t578 = t640 * t953 - t685 * t949;
t519 = t577 * t954 + t578 * t950;
t520 = -t577 * t950 + t578 * t954;
t462 = -t519 * t942 + t520 * t945;
t639 = t747 * t948 + t1107;
t1015 = t462 * t951 - t639 * t955;
t754 = -t830 - t846;
t642 = -t754 * t948 - t1081;
t579 = t642 * t949 - t686 * t953;
t580 = t642 * t953 + t686 * t949;
t524 = t579 * t954 + t580 * t950;
t525 = -t579 * t950 + t580 * t954;
t464 = -t524 * t942 + t525 * t945;
t641 = t754 * t952 - t1082;
t1014 = t464 * t951 - t641 * t955;
t783 = -t830 + t846;
t656 = -t783 * t948 + t1107;
t587 = t656 * t949 + t687 * t953;
t589 = t656 * t953 - t687 * t949;
t532 = t587 * t954 + t589 * t950;
t534 = -t587 * t950 + t589 * t954;
t471 = -t532 * t942 + t534 * t945;
t654 = -t783 * t952 - t1108;
t1013 = t471 * t951 + t654 * t955;
t782 = t829 - t846;
t657 = t782 * t952 - t1082;
t588 = t657 * t949 + t683 * t953;
t590 = t657 * t953 - t683 * t949;
t533 = t588 * t954 + t590 * t950;
t535 = -t588 * t950 + t590 * t954;
t472 = -t533 * t942 + t535 * t945;
t655 = -t782 * t948 - t1081;
t1012 = t472 * t951 + t655 * t955;
t715 = -qJD(6) * t833 - t1030;
t674 = t1071 * t831 - t715 * t948;
t632 = t674 * t949 + t1043;
t634 = t674 * t953 - t1044;
t551 = t632 * t954 + t634 * t950;
t553 = -t632 * t950 + t634 * t954;
t497 = -t551 * t942 + t553 * t945;
t673 = -t1072 * t831 - t715 * t952;
t1011 = t497 * t951 + t673 * t955;
t676 = -t1072 * t833 + t716 * t952;
t633 = t676 * t949 - t1043;
t635 = t676 * t953 + t1044;
t552 = t633 * t954 + t635 * t950;
t554 = -t633 * t950 + t635 * t954;
t498 = -t552 * t942 + t554 * t945;
t675 = -t1071 * t833 - t716 * t948;
t1010 = t498 * t951 + t675 * t955;
t732 = (qJD(5) + t939) * t852 + t1029;
t650 = -t1113 * t953 - t732 * t949;
t652 = t1113 * t949 - t732 * t953;
t571 = t650 * t954 + t652 * t950;
t573 = -t650 * t950 + t652 * t954;
t513 = -t571 * t942 + t573 * t945;
t798 = -t849 + t848;
t1009 = t513 * t951 + t798 * t955;
t737 = -t843 + t967;
t651 = -t733 * t949 + t737 * t953;
t653 = -t733 * t953 - t737 * t949;
t572 = t651 * t954 + t653 * t950;
t574 = -t651 * t950 + t653 * t954;
t514 = -t572 * t942 + t574 * t945;
t767 = -t848 - t849;
t1008 = t514 * t951 - t767 * t955;
t713 = (-t831 * t952 + t833 * t948) * t847;
t658 = t713 * t949 - t953 * t968;
t659 = t713 * t953 + t949 * t968;
t581 = t658 * t954 + t659 * t950;
t582 = -t658 * t950 + t659 * t954;
t527 = -t581 * t942 + t582 * t945;
t712 = (t831 * t948 + t833 * t952) * t847;
t1007 = t527 * t951 + t712 * t955;
t550 = t626 * t945 - t1084;
t1006 = t550 * t951 - t812 * t955;
t791 = -t1092 - t848;
t717 = t791 * t949 + t1109;
t718 = t791 * t953 - t1110;
t643 = t717 * t954 + t718 * t950;
t644 = -t717 * t950 + t718 * t954;
t561 = -t643 * t942 + t644 * t945;
t1005 = t561 * t951 - t732 * t955;
t836 = -t849 - t1092;
t748 = t836 * t953 - t1078;
t749 = -t836 * t949 - t1077;
t669 = t748 * t954 + t749 * t950;
t670 = -t748 * t950 + t749 * t954;
t594 = -t669 * t942 + t670 * t945;
t1004 = t1113 * t955 + t594 * t951;
t841 = -t849 + t1092;
t750 = t841 * t953 + t1110;
t752 = -t841 * t949 + t1109;
t677 = t750 * t954 + t752 * t950;
t679 = -t750 * t950 + t752 * t954;
t600 = -t677 * t942 + t679 * t945;
t1003 = t600 * t951 + t737 * t955;
t840 = t848 - t1092;
t751 = t840 * t949 + t1077;
t753 = t840 * t953 - t1078;
t678 = t751 * t954 + t753 * t950;
t680 = -t751 * t950 + t753 * t954;
t601 = -t678 * t942 + t680 * t945;
t1002 = t601 * t951 + t733 * t955;
t780 = (-t850 * t949 - t852 * t953) * t939;
t781 = (-t850 * t953 + t852 * t949) * t939;
t710 = t780 * t954 + t781 * t950;
t711 = -t780 * t950 + t781 * t954;
t628 = -t710 * t942 + t711 * t945;
t1001 = t628 * t951 - t938 * t955;
t1000 = t722 * t951 - t1073;
t956 = qJD(4) ^ 2;
t859 = -t956 - t1093;
t800 = t859 * t950 + t1111;
t801 = t859 * t954 - t1112;
t731 = -t800 * t942 + t801 * t945;
t865 = t900 + 0.2e1 * t1055;
t999 = t731 * t951 - t865 * t955;
t802 = -t1096 * t954 - t900 * t950;
t804 = t1096 * t950 - t900 * t954;
t740 = -t802 * t942 + t804 * t945;
t834 = -t899 - t1093;
t998 = t740 * t951 - t834 * t955;
t867 = t1096 + 0.2e1 * t1056;
t803 = -t865 * t950 + t867 * t954;
t805 = -t865 * t954 - t867 * t950;
t741 = -t803 * t942 + t805 * t945;
t873 = -t899 + t1093;
t997 = t741 * t951 + t873 * t955;
t892 = -t956 + t1093;
t817 = t892 * t950 + t1069;
t820 = t892 * t954 - t1070;
t759 = -t817 * t942 + t820 * t945;
t996 = t759 * t951 + t900 * t955;
t893 = -t899 + t956;
t818 = t893 * t954 + t1112;
t821 = -t893 * t950 + t1111;
t760 = -t818 * t942 + t821 * t945;
t995 = -t1096 * t955 + t760 * t951;
t894 = -t899 - t956;
t819 = t894 * t954 - t1070;
t822 = -t894 * t950 - t1069;
t761 = -t819 * t942 + t822 * t945;
t994 = t761 * t951 - t867 * t955;
t788 = t853 * t955 - t854 * t951;
t904 = t988 * t947;
t993 = t904 * t946 + t917 * t943;
t871 = t904 * t943 - t917 * t946;
t992 = t912 * t951 + t914 * t955;
t913 = t933 - t1046;
t915 = t934 - t1057;
t991 = t913 * t951 + t915 * t955;
t844 = (t906 * t950 - t907 * t954) * qJD(4);
t845 = (t906 * t954 + t907 * t950) * qJD(4);
t785 = -t844 * t942 + t845 * t945;
t989 = -qJDD(4) * t955 + t785 * t951;
t724 = t1066 * t850 + t769 * t953;
t725 = t1065 * t850 - t769 * t949;
t645 = t724 * t954 + t725 * t950;
t647 = -t724 * t950 + t725 * t954;
t569 = -t645 * t942 + t647 * t945;
t987 = t569 * t951 + t1041;
t726 = t1065 * t852 - t949 * t967;
t727 = -t1066 * t852 - t953 * t967;
t646 = t726 * t954 + t727 * t950;
t648 = -t726 * t950 + t727 * t954;
t570 = -t646 * t942 + t648 * t945;
t986 = t570 * t951 - t1041;
t823 = -t1056 * t950 + t866 * t954;
t824 = -t1056 * t954 - t866 * t950;
t764 = -t823 * t942 + t824 * t945;
t985 = t764 * t951 - t1039;
t825 = t1055 * t954 + t868 * t950;
t826 = -t1055 * t950 + t868 * t954;
t765 = -t825 * t942 + t826 * t945;
t984 = t765 * t951 + t1039;
t909 = t942 * t1094;
t983 = -t1047 * t942 + t909 * t951;
t386 = pkin(9) * t445 + (-pkin(10) * t949 + t1037) * t473;
t405 = -pkin(9) * t444 + (-pkin(10) * t953 + t1090) * t473;
t365 = -pkin(3) * t473 + pkin(8) * t412 + t386 * t954 + t405 * t950;
t369 = -pkin(8) * t411 - t386 * t950 + t405 * t954;
t381 = t411 * t945 + t412 * t942;
t353 = -qJ(3) * t381 - t365 * t942 + t369 * t945;
t367 = -pkin(2) * t381 - pkin(3) * t411 - pkin(4) * t444 + pkin(5) * t565 - pkin(10) * t474;
t376 = t382 * t955 + t473 * t951;
t980 = pkin(7) * t376 + t353 * t951 + t367 * t955;
t449 = -pkin(10) * t602 - t473;
t423 = pkin(9) * t563 + t1037 * t602 + t449 * t949;
t430 = -pkin(9) * t562 + t1090 * t602 + t449 * t953;
t384 = -pkin(3) * t602 + pkin(8) * t508 + t423 * t954 + t430 * t950;
t385 = -pkin(8) * t507 - t423 * t950 + t430 * t954;
t450 = t507 * t945 + t508 * t942;
t370 = -qJ(3) * t450 - t384 * t942 + t385 * t945;
t403 = -pkin(2) * t450 - pkin(3) * t507 - pkin(4) * t562 - pkin(5) * t745 - pkin(10) * t604 - t474;
t438 = t451 * t955 + t602 * t951;
t979 = pkin(7) * t438 + t370 * t951 + t403 * t955;
t499 = -pkin(5) * t639 + t537;
t543 = -pkin(10) * t639 + t1086;
t433 = -pkin(4) * t639 + pkin(9) * t578 + t499 * t953 + t543 * t949;
t439 = -pkin(9) * t577 - t499 * t949 + t543 * t953;
t394 = -pkin(3) * t639 + pkin(8) * t520 + t433 * t954 + t439 * t950;
t401 = -pkin(8) * t519 - t433 * t950 + t439 * t954;
t461 = t519 * t945 + t520 * t942;
t373 = -qJ(3) * t461 - t394 * t942 + t401 * t945;
t413 = -pkin(2) * t461 - pkin(3) * t519 - pkin(4) * t577 - pkin(5) * t685 - pkin(10) * t640 + t1085;
t447 = t462 * t955 + t639 * t951;
t978 = pkin(7) * t447 + t373 * t951 + t413 * t955;
t500 = -pkin(5) * t641 + t538;
t544 = -pkin(10) * t641 + t1085;
t434 = -pkin(4) * t641 + pkin(9) * t580 + t500 * t953 + t544 * t949;
t442 = -pkin(9) * t579 - t500 * t949 + t544 * t953;
t397 = -pkin(3) * t641 + pkin(8) * t525 + t434 * t954 + t442 * t950;
t402 = -pkin(8) * t524 - t434 * t950 + t442 * t954;
t463 = t524 * t945 + t525 * t942;
t374 = -qJ(3) * t463 - t397 * t942 + t402 * t945;
t415 = -pkin(2) * t463 - pkin(3) * t524 - pkin(4) * t579 + pkin(5) * t686 - pkin(10) * t642 - t1086;
t448 = t464 * t955 + t641 * t951;
t977 = pkin(7) * t448 + t374 * t951 + t415 * t955;
t523 = -pkin(4) * t742 + pkin(9) * t542;
t422 = -pkin(3) * t742 + pkin(8) * t477 - pkin(9) * t1088 + t523 * t954;
t425 = -pkin(8) * t476 - pkin(9) * t1087 - t523 * t950;
t426 = t476 * t945 + t477 * t942;
t378 = -qJ(3) * t426 - t422 * t942 + t425 * t945;
t404 = -pkin(2) * t426 - pkin(3) * t476 - pkin(4) * t541;
t424 = t427 * t955 + t742 * t951;
t976 = pkin(7) * t424 + t378 * t951 + t404 * t955;
t493 = -pkin(4) * t767 + pkin(9) * t653 + t542;
t505 = -pkin(9) * t651 - t541;
t431 = -pkin(3) * t767 + pkin(8) * t574 + t493 * t954 + t505 * t950;
t432 = -pkin(8) * t572 - t493 * t950 + t505 * t954;
t512 = t572 * t945 + t574 * t942;
t393 = -qJ(3) * t512 - t431 * t942 + t432 * t945;
t475 = -pkin(2) * t512 - pkin(3) * t572 - pkin(4) * t651;
t506 = t514 * t955 + t767 * t951;
t975 = pkin(7) * t506 + t393 * t951 + t475 * t955;
t609 = -pkin(4) * t732 + pkin(9) * t718 - t1079;
t649 = -pkin(9) * t717 + t1080;
t510 = -pkin(3) * t732 + pkin(8) * t644 + t609 * t954 + t649 * t950;
t536 = -pkin(8) * t643 - t609 * t950 + t649 * t954;
t560 = t643 * t945 + t644 * t942;
t440 = -qJ(3) * t560 - t510 * t942 + t536 * t945;
t484 = -pkin(2) * t560 - pkin(3) * t643 - pkin(4) * t717 + t596;
t546 = t561 * t955 + t732 * t951;
t974 = pkin(7) * t546 + t440 * t951 + t484 * t955;
t618 = pkin(4) * t1113 + pkin(9) * t749 + t1080;
t664 = -pkin(9) * t748 + t1079;
t529 = pkin(3) * t1113 + pkin(8) * t670 + t618 * t954 + t664 * t950;
t545 = -pkin(8) * t669 - t618 * t950 + t664 * t954;
t593 = t669 * t945 + t670 * t942;
t452 = -qJ(3) * t593 - t529 * t942 + t545 * t945;
t494 = -pkin(2) * t593 - pkin(3) * t669 - pkin(4) * t748 + t597;
t557 = -t1113 * t951 + t594 * t955;
t973 = pkin(7) * t557 + t452 * t951 + t494 * t955;
t549 = t626 * t942 + t1083;
t617 = -pkin(3) * t812 + pkin(8) * t626;
t490 = -pkin(8) * t1083 - qJ(3) * t549 - t617 * t942;
t531 = -pkin(2) * t549 - pkin(3) * t625;
t547 = t550 * t955 + t812 * t951;
t972 = pkin(7) * t547 + t490 * t951 + t531 * t955;
t607 = -pkin(3) * t834 + pkin(8) * t804 + t626;
t616 = -pkin(8) * t802 - t625;
t738 = t802 * t945 + t804 * t942;
t539 = -qJ(3) * t738 - t607 * t942 + t616 * t945;
t691 = -pkin(2) * t738 - pkin(3) * t802;
t697 = t740 * t955 + t834 * t951;
t971 = pkin(7) * t697 + t539 * t951 + t691 * t955;
t714 = -pkin(3) * t865 + pkin(8) * t801 - t1075;
t730 = t800 * t945 + t801 * t942;
t746 = -pkin(8) * t800 + t1076;
t608 = -qJ(3) * t730 - t714 * t942 + t746 * t945;
t621 = -pkin(2) * t730 - pkin(3) * t800 + t707;
t703 = t731 * t955 + t865 * t951;
t970 = pkin(7) * t703 + t608 * t951 + t621 * t955;
t723 = -pkin(3) * t867 + pkin(8) * t822 + t1076;
t755 = -pkin(8) * t819 + t1075;
t758 = t819 * t945 + t822 * t942;
t620 = -qJ(3) * t758 - t723 * t942 + t755 * t945;
t629 = -pkin(2) * t758 - pkin(3) * t819 + t708;
t719 = t761 * t955 + t867 * t951;
t969 = pkin(7) * t719 + t620 * t951 + t629 * t955;
t966 = -pkin(7) * t885 + t1074 * t942 + t796 * t955;
t884 = t1048 * t942 + t909 * t955;
t965 = pkin(7) * t884 + t1062 * t837 + t797 * t955;
t692 = t722 * t955 + t1074;
t963 = pkin(7) * t692 - (-pkin(2) * t955 - qJ(3) * t951) * t721;
t905 = t917 * t947;
t903 = t917 * t944;
t902 = t988 * t944;
t881 = t913 * t955 - t915 * t951;
t877 = t983 * t947;
t875 = t983 * t944;
t872 = -t905 * t943 - t946 * t988;
t870 = t905 * t946 - t943 * t988;
t861 = t992 * t947;
t860 = t992 * t944;
t857 = -t1020 + (-t944 * t959 - t1027) * qJDD(2);
t856 = t1020 + (-t944 * t957 + t1027) * qJDD(2);
t838 = -0.2e1 * t1035 * t944 + t947 * t991;
t815 = -t877 * t943 + t884 * t946;
t813 = t877 * t946 + t884 * t943;
t811 = -t1060 + (t902 * t944 + t904 * t947) * pkin(7);
t810 = -t1061 + (-t903 * t944 - t905 * t947) * pkin(7);
t809 = -t861 * t943 + t880 * t946;
t808 = t861 * t946 + t880 * t943;
t807 = -qJ(3) * t910 + t1031 * t945;
t806 = qJ(3) * t909 - t1031 * t942;
t786 = t789 * t947;
t784 = t844 * t945 + t845 * t942;
t776 = qJDD(4) * t951 + t785 * t955;
t774 = -pkin(1) * t903 + t1022 * t947 + t853 * t944;
t773 = pkin(1) * t902 + t1023 * t947 + t854 * t944;
t772 = -t788 * t947 + t891 * t944;
t771 = -t788 * t944 - t891 * t947;
t763 = t825 * t945 + t826 * t942;
t762 = t823 * t945 + t824 * t942;
t757 = t818 * t945 + t821 * t942;
t756 = t817 * t945 + t820 * t942;
t744 = t1096 * t951 + t760 * t955;
t743 = t759 * t955 - t900 * t951;
t739 = t803 * t945 + t805 * t942;
t729 = t765 * t955 - t1040;
t728 = t764 * t955 + t1040;
t709 = pkin(2) * t914 + qJ(3) * t912 + t722;
t705 = t741 * t955 - t873 * t951;
t704 = -t944 * t784 + t947 * t989;
t702 = -pkin(1) * t771 + t1089 * t947;
t701 = -t772 * t943 + t789 * t946;
t700 = t772 * t946 + t789 * t943;
t699 = t945 * t1073 - t797 * t951 + (-t875 * t944 - t877 * t947) * pkin(7);
t698 = t942 * t1073 - t796 * t951 + (-t1103 * t947 - t876 * t944) * pkin(7);
t693 = -pkin(2) * t837 + qJ(3) * t722;
t690 = (-t771 * t944 - t772 * t947) * pkin(7);
t689 = t955 * t721 + (-t860 * t944 - t861 * t947) * pkin(7);
t672 = -pkin(1) * t875 - t806 * t944 + t947 * t965;
t671 = -pkin(1) * t876 - t807 * t944 + t947 * t966;
t666 = -t944 * t757 + t947 * t995;
t665 = -t944 * t756 + t947 * t996;
t663 = -t763 * t944 + t947 * t984;
t662 = -t762 * t944 + t947 * t985;
t661 = -t944 * t758 + t947 * t994;
t660 = t758 * t947 + t944 * t994;
t638 = -t944 * t739 + t947 * t997;
t637 = -t944 * t730 + t947 * t999;
t636 = t947 * t730 + t944 * t999;
t631 = -t944 * t738 + t947 * t998;
t630 = t947 * t738 + t944 * t998;
t627 = t710 * t945 + t711 * t942;
t624 = t1000 * t947 + t721 * t944;
t623 = t1000 * t944 - t721 * t947;
t622 = t628 * t955 + t938 * t951;
t619 = -pkin(1) * t860 + t1024 * t947 - t709 * t944;
t615 = -pkin(2) * t867 + qJ(3) * t761 + t723 * t945 + t755 * t942;
t611 = -t661 * t943 + t719 * t946;
t610 = t661 * t946 + t719 * t943;
t606 = -pkin(2) * t865 + qJ(3) * t731 + t714 * t945 + t746 * t942;
t599 = t678 * t945 + t680 * t942;
t598 = t677 * t945 + t679 * t942;
t592 = -t637 * t943 + t703 * t946;
t591 = t637 * t946 + t703 * t943;
t586 = -t631 * t943 + t697 * t946;
t585 = t631 * t946 + t697 * t943;
t584 = -t624 * t943 + t692 * t946;
t583 = t624 * t946 + t692 * t943;
t568 = t646 * t945 + t648 * t942;
t567 = t645 * t945 + t647 * t942;
t559 = t601 * t955 - t733 * t951;
t558 = t600 * t955 - t737 * t951;
t556 = t570 * t955 + t1042;
t555 = t569 * t955 - t1042;
t548 = t1001 * t947 - t944 * t627;
t540 = -(pkin(2) * t951 - qJ(3) * t955) * t721 + (-t623 * t944 - t624 * t947) * pkin(7);
t530 = -pkin(1) * t623 - t693 * t944 + t947 * t963;
t528 = -pkin(2) * t834 + qJ(3) * t740 + t607 * t945 + t616 * t942;
t526 = t581 * t945 + t582 * t942;
t522 = t1002 * t947 - t944 * t599;
t521 = t1003 * t947 - t944 * t598;
t516 = t1004 * t947 - t944 * t593;
t515 = t1004 * t944 + t947 * t593;
t511 = t571 * t945 + t573 * t942;
t509 = t513 * t955 - t798 * t951;
t504 = t620 * t955 - t629 * t951 + (-t660 * t944 - t661 * t947) * pkin(7);
t503 = t527 * t955 - t712 * t951;
t502 = -t568 * t944 + t947 * t986;
t501 = -t567 * t944 + t947 * t987;
t496 = t552 * t945 + t554 * t942;
t495 = t551 * t945 + t553 * t942;
t492 = t1005 * t947 - t944 * t560;
t491 = t1005 * t944 + t947 * t560;
t489 = t1006 * t947 - t944 * t549;
t488 = t1006 * t944 + t947 * t549;
t487 = t608 * t955 - t621 * t951 + (-t636 * t944 - t637 * t947) * pkin(7);
t486 = -pkin(2) * t812 - pkin(8) * t1084 + qJ(3) * t550 + t617 * t945;
t485 = -pkin(1) * t660 - t615 * t944 + t947 * t969;
t483 = t498 * t955 - t675 * t951;
t482 = t497 * t955 - t673 * t951;
t481 = -t516 * t943 + t557 * t946;
t480 = t516 * t946 + t557 * t943;
t479 = -pkin(1) * t636 - t606 * t944 + t947 * t970;
t478 = t539 * t955 - t691 * t951 + (-t630 * t944 - t631 * t947) * pkin(7);
t470 = t533 * t945 + t535 * t942;
t469 = t532 * t945 + t534 * t942;
t468 = -t492 * t943 + t546 * t946;
t467 = t492 * t946 + t546 * t943;
t466 = -t489 * t943 + t547 * t946;
t465 = t489 * t946 + t547 * t943;
t459 = t517 * t945 + t518 * t942;
t458 = t472 * t955 - t655 * t951;
t457 = t471 * t955 - t654 * t951;
t456 = t1007 * t947 - t944 * t526;
t455 = t1009 * t947 - t944 * t511;
t454 = t1008 * t947 - t944 * t512;
t453 = t1008 * t944 + t947 * t512;
t446 = pkin(2) * t1113 + qJ(3) * t594 + t529 * t945 + t545 * t942;
t443 = t460 * t955 - t603 * t951;
t441 = -pkin(1) * t630 - t528 * t944 + t947 * t971;
t437 = t1010 * t947 - t944 * t496;
t436 = t1011 * t947 - t944 * t495;
t435 = -pkin(2) * t732 + qJ(3) * t561 + t510 * t945 + t536 * t942;
t429 = -t454 * t943 + t506 * t946;
t428 = t454 * t946 + t506 * t943;
t421 = t1012 * t947 - t944 * t470;
t420 = t1013 * t947 - t944 * t469;
t419 = t1014 * t947 - t944 * t463;
t418 = t1014 * t944 + t947 * t463;
t417 = t1015 * t947 - t944 * t461;
t416 = t1015 * t944 + t947 * t461;
t414 = t1016 * t947 - t944 * t459;
t410 = t490 * t955 - t531 * t951 + (-t488 * t944 - t489 * t947) * pkin(7);
t409 = t1017 * t947 - t944 * t450;
t408 = t1017 * t944 + t947 * t450;
t407 = t452 * t955 - t494 * t951 + (-t515 * t944 - t516 * t947) * pkin(7);
t406 = -pkin(1) * t488 - t486 * t944 + t947 * t972;
t400 = t440 * t955 - t484 * t951 + (-t491 * t944 - t492 * t947) * pkin(7);
t399 = -t419 * t943 + t448 * t946;
t398 = t419 * t946 + t448 * t943;
t396 = -t417 * t943 + t447 * t946;
t395 = t417 * t946 + t447 * t943;
t392 = -pkin(2) * t767 + qJ(3) * t514 + t431 * t945 + t432 * t942;
t391 = t1018 * t947 - t944 * t426;
t390 = t1018 * t944 + t947 * t426;
t389 = -pkin(1) * t515 - t446 * t944 + t947 * t973;
t388 = -t409 * t943 + t438 * t946;
t387 = t409 * t946 + t438 * t943;
t383 = -pkin(1) * t491 - t435 * t944 + t947 * t974;
t380 = -t391 * t943 + t424 * t946;
t379 = t391 * t946 + t424 * t943;
t377 = -pkin(2) * t742 + qJ(3) * t427 + t422 * t945 + t425 * t942;
t375 = t393 * t955 - t475 * t951 + (-t453 * t944 - t454 * t947) * pkin(7);
t372 = -pkin(2) * t641 + qJ(3) * t464 + t397 * t945 + t402 * t942;
t371 = -pkin(2) * t639 + qJ(3) * t462 + t394 * t945 + t401 * t942;
t368 = -pkin(1) * t453 - t392 * t944 + t947 * t975;
t366 = -pkin(2) * t602 + qJ(3) * t451 + t384 * t945 + t385 * t942;
t364 = t1019 * t947 - t944 * t381;
t363 = t1019 * t944 + t947 * t381;
t362 = t374 * t955 - t415 * t951 + (-t418 * t944 - t419 * t947) * pkin(7);
t361 = t373 * t955 - t413 * t951 + (-t416 * t944 - t417 * t947) * pkin(7);
t360 = t378 * t955 - t404 * t951 + (-t390 * t944 - t391 * t947) * pkin(7);
t359 = -t364 * t943 + t376 * t946;
t358 = t364 * t946 + t376 * t943;
t357 = t370 * t955 - t403 * t951 + (-t408 * t944 - t409 * t947) * pkin(7);
t356 = -pkin(1) * t390 - t377 * t944 + t947 * t976;
t355 = -pkin(1) * t418 - t372 * t944 + t947 * t977;
t354 = -pkin(1) * t416 - t371 * t944 + t947 * t978;
t352 = -pkin(2) * t473 + qJ(3) * t382 + t365 * t945 + t369 * t942;
t351 = -pkin(1) * t408 - t366 * t944 + t947 * t979;
t350 = t353 * t955 - t367 * t951 + (-t363 * t944 - t364 * t947) * pkin(7);
t349 = -pkin(1) * t363 - t352 * t944 + t947 * t980;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, 0, 0, 0, t883, 0, 0, 0, 0, 0, 0, t872, t871, 0, t701, 0, 0, 0, 0, 0, 0, -t1104, t815, t809, t584, 0, 0, 0, 0, 0, 0, t592, t611, t586, t466, 0, 0, 0, 0, 0, 0, t468, t481, t429, t380, 0, 0, 0, 0, 0, 0, t396, t399, t388, t359; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, 0, 0, 0, t882, 0, 0, 0, 0, 0, 0, t870, -t993, 0, t700, 0, 0, 0, 0, 0, 0, t814, t813, t808, t583, 0, 0, 0, 0, 0, 0, t591, t610, t585, t465, 0, 0, 0, 0, 0, 0, t467, t480, t428, t379, 0, 0, 0, 0, 0, 0, t395, t398, t387, t358; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -t1059, 0, 0, 0, 0, 0, 0, t903, -t902, 0, t771, 0, 0, 0, 0, 0, 0, t876, t875, t860, t623, 0, 0, 0, 0, 0, 0, t636, t660, t630, t488, 0, 0, 0, 0, 0, 0, t491, t515, t453, t390, 0, 0, 0, 0, 0, 0, t416, t418, t408, t363; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, 0, 0, 0, 0, -t1099, -t1098, -t882, -qJ(1) * t882, 0, 0, -t871, 0, t872, t943 * t1050, -qJ(1) * t870 - t774 * t943 + t810 * t946, qJ(1) * t993 - t773 * t943 + t811 * t946, -t786 * t943 + t788 * t946, -qJ(1) * t700 + t690 * t946 - t702 * t943, -t856 * t943 + t1067, -t838 * t943 + t881 * t946, t815, -t857 * t943 - t1067, t1104, 0, -qJ(1) * t814 - t671 * t943 + t698 * t946, -qJ(1) * t813 - t672 * t943 + t699 * t946, -qJ(1) * t808 - t619 * t943 + t689 * t946, -qJ(1) * t583 - t530 * t943 + t540 * t946, -t663 * t943 + t729 * t946, -t638 * t943 + t705 * t946, -t666 * t943 + t744 * t946, -t662 * t943 + t728 * t946, -t665 * t943 + t743 * t946, -t704 * t943 + t776 * t946, -qJ(1) * t591 - t479 * t943 + t487 * t946, -qJ(1) * t610 - t485 * t943 + t504 * t946, -qJ(1) * t585 - t441 * t943 + t478 * t946, -qJ(1) * t465 - t406 * t943 + t410 * t946, -t502 * t943 + t556 * t946, -t455 * t943 + t509 * t946, -t521 * t943 + t558 * t946, -t501 * t943 + t555 * t946, -t522 * t943 + t559 * t946, -t548 * t943 + t622 * t946, -qJ(1) * t467 - t383 * t943 + t400 * t946, -qJ(1) * t480 - t389 * t943 + t407 * t946, -qJ(1) * t428 - t368 * t943 + t375 * t946, -qJ(1) * t379 - t356 * t943 + t360 * t946, -t437 * t943 + t483 * t946, -t414 * t943 + t443 * t946, -t420 * t943 + t457 * t946, -t436 * t943 + t482 * t946, -t421 * t943 + t458 * t946, -t456 * t943 + t503 * t946, -qJ(1) * t395 - t354 * t943 + t361 * t946, -qJ(1) * t398 - t355 * t943 + t362 * t946, -qJ(1) * t387 - t351 * t943 + t357 * t946, -qJ(1) * t358 - t349 * t943 + t350 * t946; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, 0, 0, 0, 0, t1098, -t1099, t883, qJ(1) * t883, 0, 0, t993, 0, t870, -t946 * t1050, qJ(1) * t872 + t774 * t946 + t810 * t943, qJ(1) * t871 + t773 * t946 + t811 * t943, t786 * t946 + t788 * t943, qJ(1) * t701 + t690 * t943 + t702 * t946, t856 * t946 + t1068, t838 * t946 + t881 * t943, t813, t857 * t946 - t1068, -t814, 0, -qJ(1) * t1104 + t671 * t946 + t698 * t943, qJ(1) * t815 + t672 * t946 + t699 * t943, qJ(1) * t809 + t619 * t946 + t689 * t943, qJ(1) * t584 + t530 * t946 + t540 * t943, t663 * t946 + t729 * t943, t638 * t946 + t705 * t943, t666 * t946 + t744 * t943, t662 * t946 + t728 * t943, t665 * t946 + t743 * t943, t704 * t946 + t776 * t943, qJ(1) * t592 + t479 * t946 + t487 * t943, qJ(1) * t611 + t485 * t946 + t504 * t943, qJ(1) * t586 + t441 * t946 + t478 * t943, qJ(1) * t466 + t406 * t946 + t410 * t943, t502 * t946 + t556 * t943, t455 * t946 + t509 * t943, t521 * t946 + t558 * t943, t501 * t946 + t555 * t943, t522 * t946 + t559 * t943, t548 * t946 + t622 * t943, qJ(1) * t468 + t383 * t946 + t400 * t943, qJ(1) * t481 + t389 * t946 + t407 * t943, qJ(1) * t429 + t368 * t946 + t375 * t943, qJ(1) * t380 + t356 * t946 + t360 * t943, t437 * t946 + t483 * t943, t414 * t946 + t443 * t943, t420 * t946 + t457 * t943, t436 * t946 + t482 * t943, t421 * t946 + t458 * t943, t456 * t946 + t503 * t943, qJ(1) * t396 + t354 * t946 + t361 * t943, qJ(1) * t399 + t355 * t946 + t362 * t943, qJ(1) * t388 + t351 * t946 + t357 * t943, qJ(1) * t359 + t349 * t946 + t350 * t943; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, 0, t1033, t919, 0, 0, 0, 0, t902, 0, t903, t947 * qJDD(2), pkin(1) * t905 + t1022 * t944 - t853 * t947, -pkin(1) * t904 + t1023 * t944 - t854 * t947, t789 * t944, pkin(1) * t772 + t1089 * t944, t1021 + (t947 * t957 + t1028) * qJDD(2), 0.2e1 * t1035 * t947 + t944 * t991, t875, -t1021 + (t947 * t959 - t1028) * qJDD(2), -t876, 0, pkin(1) * t1103 + t807 * t947 + t944 * t966, pkin(1) * t877 + t806 * t947 + t944 * t965, pkin(1) * t861 + t1024 * t944 + t709 * t947, pkin(1) * t624 + t693 * t947 + t944 * t963, t763 * t947 + t944 * t984, t947 * t739 + t944 * t997, t947 * t757 + t944 * t995, t762 * t947 + t944 * t985, t947 * t756 + t944 * t996, t947 * t784 + t944 * t989, pkin(1) * t637 + t606 * t947 + t944 * t970, pkin(1) * t661 + t615 * t947 + t944 * t969, pkin(1) * t631 + t528 * t947 + t944 * t971, pkin(1) * t489 + t486 * t947 + t944 * t972, t568 * t947 + t944 * t986, t1009 * t944 + t947 * t511, t1003 * t944 + t947 * t598, t567 * t947 + t944 * t987, t1002 * t944 + t947 * t599, t1001 * t944 + t947 * t627, pkin(1) * t492 + t435 * t947 + t944 * t974, pkin(1) * t516 + t446 * t947 + t944 * t973, pkin(1) * t454 + t392 * t947 + t944 * t975, pkin(1) * t391 + t377 * t947 + t944 * t976, t1010 * t944 + t947 * t496, t1016 * t944 + t947 * t459, t1013 * t944 + t947 * t469, t1011 * t944 + t947 * t495, t1012 * t944 + t947 * t470, t1007 * t944 + t947 * t526, pkin(1) * t417 + t371 * t947 + t944 * t978, pkin(1) * t419 + t372 * t947 + t944 * t977, pkin(1) * t409 + t366 * t947 + t944 * t979, pkin(1) * t364 + t352 * t947 + t944 * t980;];
tauB_reg  = t1;
