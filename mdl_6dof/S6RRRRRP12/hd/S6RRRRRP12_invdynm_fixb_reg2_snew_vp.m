% Calculate inertial parameters regressor of inverse dynamics cutting torque vector with Newton-Euler for
% S6RRRRRP12
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d5]';
%
% Output:
% m_new_reg [(3*7)x(%Nl%*10)]
%   inertial parameter regressor of inverse dynamics cutting torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 07:55
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function m_new_reg = S6RRRRRP12_invdynm_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP12_invdynm_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP12_invdynm_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP12_invdynm_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP12_invdynm_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRRP12_invdynm_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_m_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 07:51:16
% EndTime: 2019-05-08 07:55:05
% DurationCPUTime: 241.58s
% Computational Cost: add. (1791101->1267), mult. (4424372->1879), div. (0->0), fcn. (3753568->14), ass. (0->888)
t2676 = cos(qJ(5));
t2671 = sin(qJ(5));
t2670 = cos(pkin(6));
t2954 = qJD(1) * t2670;
t2660 = qJD(2) + t2954;
t2673 = sin(qJ(3));
t2674 = sin(qJ(2));
t2678 = cos(qJ(3));
t2669 = cos(pkin(7));
t2679 = cos(qJ(2));
t2910 = t2669 * t2679;
t2667 = sin(pkin(7));
t2917 = t2667 * t2673;
t2668 = sin(pkin(6));
t2955 = qJD(1) * t2668;
t2621 = t2660 * t2917 + (t2673 * t2910 + t2674 * t2678) * t2955;
t2672 = sin(qJ(4));
t2677 = cos(qJ(4));
t2912 = t2668 * t2679;
t2890 = qJD(1) * t2912;
t2652 = t2667 * t2890;
t2920 = t2660 * t2669;
t2876 = -t2652 + t2920;
t2865 = qJD(3) + t2876;
t2600 = t2677 * t2621 + t2672 * t2865;
t2874 = t2669 * t2890;
t2913 = t2668 * t2674;
t2891 = qJD(1) * t2913;
t2915 = t2667 * t2678;
t2619 = -t2660 * t2915 + t2673 * t2891 - t2678 * t2874;
t2719 = qJD(4) + t2619;
t2558 = t2600 * t2671 - t2676 * t2719;
t2598 = t2621 * t2672 - t2677 * t2865;
t2658 = qJD(2) * t2891;
t2898 = qJDD(1) * t2679;
t2857 = t2668 * t2898 - t2658;
t2760 = t2669 * t2857;
t2875 = qJDD(1) * t2670 + qJDD(2);
t2697 = t2667 * t2875 + t2760;
t2899 = qJDD(1) * t2674;
t2953 = qJD(1) * t2679;
t2759 = qJD(2) * t2953 + t2899;
t2718 = t2759 * t2668;
t2688 = t2673 * t2697 + t2678 * t2718;
t2572 = -t2619 * qJD(3) + t2688;
t2897 = t2669 * t2875 + qJDD(3);
t2711 = t2667 * t2857 - t2897;
t2696 = -t2677 * t2572 + t2672 * t2711;
t2516 = -t2598 * qJD(4) - t2696;
t2700 = t2673 * t2718 - t2678 * t2697;
t2695 = t2621 * qJD(3) + t2700;
t2693 = qJDD(4) + t2695;
t2690 = -t2676 * t2516 - t2671 * t2693;
t2436 = -t2558 * qJD(5) - t2690;
t2595 = qJD(5) + t2598;
t2930 = t2558 * t2595;
t2984 = -t2930 + t2436;
t2942 = t2984 * t2671;
t2560 = t2676 * t2600 + t2671 * t2719;
t2879 = -t2671 * t2516 + t2676 * t2693;
t2435 = qJD(5) * t2560 - t2879;
t2526 = t2595 * t2560;
t2991 = t2435 + t2526;
t2311 = -t2991 * t2676 - t2942;
t2556 = t2560 ^ 2;
t2970 = t2558 ^ 2;
t2987 = t2556 - t2970;
t2269 = t2311 * t2672 - t2677 * t2987;
t2271 = t2311 * t2677 + t2672 * t2987;
t2307 = -t2991 * t2671 + t2676 * t2984;
t2825 = t2271 * t2673 - t2307 * t2678;
t2148 = t2669 * t2269 + t2667 * t2825;
t2150 = -t2667 * t2269 + t2669 * t2825;
t2208 = t2271 * t2678 + t2307 * t2673;
t2845 = t2150 * t2679 + t2208 * t2674;
t2057 = -t2668 * t2148 + t2670 * t2845;
t2098 = t2150 * t2674 - t2208 * t2679;
t2675 = sin(qJ(1));
t2680 = cos(qJ(1));
t3154 = t2675 * t2057 + t2098 * t2680;
t3153 = t2057 * t2680 - t2675 * t2098;
t2969 = t2595 ^ 2;
t2522 = t2970 - t2969;
t2504 = t2560 * t2558;
t2878 = -t2672 * t2572 - t2677 * t2711;
t2761 = t2600 * qJD(4) - t2878;
t2514 = qJDD(5) + t2761;
t2989 = t2504 + t2514;
t3009 = t2989 * t2671;
t2387 = t2522 * t2676 - t3009;
t2399 = t2435 - t2526;
t2295 = t2387 * t2672 + t2399 * t2677;
t2299 = t2387 * t2677 - t2399 * t2672;
t3008 = t2989 * t2676;
t2383 = t2522 * t2671 + t3008;
t2816 = t2299 * t2673 - t2383 * t2678;
t2185 = t2669 * t2295 + t2667 * t2816;
t2189 = -t2667 * t2295 + t2669 * t2816;
t2242 = t2299 * t2678 + t2383 * t2673;
t2837 = t2189 * t2679 + t2242 * t2674;
t2085 = -t2668 * t2185 + t2670 * t2837;
t2131 = t2189 * t2674 - t2242 * t2679;
t3152 = t2675 * t2085 + t2131 * t2680;
t3151 = t2085 * t2680 - t2675 * t2131;
t2081 = t2670 * t2185 + t2668 * t2837;
t2055 = t2670 * t2148 + t2668 * t2845;
t2523 = t2556 - t2969;
t2990 = -t2504 + t2514;
t2937 = t2990 * t2671;
t3037 = -t2523 * t2676 + t2937;
t2983 = t2930 + t2436;
t2936 = t2990 * t2676;
t3036 = t2523 * t2671 + t2936;
t3054 = t2672 * t2983 + t2677 * t3036;
t3073 = t2673 * t3037 + t2678 * t3054;
t3059 = t2672 * t3036 - t2677 * t2983;
t3074 = t2673 * t3054 - t2678 * t3037;
t3107 = -t2667 * t3059 + t2669 * t3074;
t3116 = -t2674 * t3107 + t2679 * t3073;
t3108 = t2667 * t3074 + t2669 * t3059;
t3115 = t2674 * t3073 + t2679 * t3107;
t3131 = -t2668 * t3108 + t2670 * t3115;
t3138 = -t2675 * t3131 + t2680 * t3116;
t3137 = t2675 * t3116 + t2680 * t3131;
t2982 = -t2969 - t2970;
t3004 = t2676 * t2982 - t2937;
t3029 = t2672 * t3004 - t2677 * t2991;
t3005 = t2671 * t2982 + t2936;
t3028 = t2672 * t2991 + t2677 * t3004;
t3058 = t2673 * t3028 - t2678 * t3005;
t3080 = t2667 * t3058 + t2669 * t3029;
t3053 = t2673 * t3005 + t2678 * t3028;
t3077 = -t2667 * t3029 + t2669 * t3058;
t3103 = t2674 * t3053 + t2679 * t3077;
t3117 = -t2668 * t3080 + t2670 * t3103;
t3136 = pkin(1) * t3117;
t3118 = t2668 * t3103 + t2670 * t3080;
t3135 = pkin(1) * t3118;
t3132 = t2668 * t3115 + t2670 * t3108;
t3106 = -t2674 * t3077 + t2679 * t3053;
t3130 = pkin(8) * (-t2675 * t3117 + t2680 * t3106);
t3129 = pkin(8) * (t2675 * t3106 + t2680 * t3117);
t3128 = (-t2668 * t3118 - t2670 * t3117) * pkin(9);
t3127 = pkin(9) * t3106;
t3114 = pkin(2) * t3077;
t3113 = pkin(2) * t3080;
t2927 = t2595 * t2671;
t2393 = -t2435 * t2676 + t2558 * t2927;
t2926 = t2595 * t2676;
t2885 = t2558 * t2926;
t2764 = t2435 * t2671 + t2885;
t2887 = t2672 * t2504;
t2976 = t2677 * t2764 - t2887;
t3002 = t2393 * t2673 + t2678 * t2976;
t2886 = t2677 * t2504;
t2977 = t2672 * t2764 + t2886;
t3003 = -t2393 * t2678 + t2673 * t2976;
t3031 = -t2667 * t2977 + t2669 * t3003;
t3057 = -t2674 * t3031 + t2679 * t3002;
t3034 = t2667 * t3003 + t2669 * t2977;
t3052 = t2674 * t3002 + t2679 * t3031;
t3075 = -t2668 * t3034 + t2670 * t3052;
t3105 = -t2675 * t3075 + t2680 * t3057;
t2520 = t2560 * t2927;
t2866 = t2520 - t2885;
t2975 = t2514 * t2672 + t2677 * t2866;
t2992 = (t2558 * t2671 + t2560 * t2676) * t2595;
t3001 = -t2673 * t2992 + t2678 * t2975;
t2978 = -t2677 * t2514 + t2672 * t2866;
t3000 = t2673 * t2975 + t2678 * t2992;
t3032 = -t2667 * t2978 + t2669 * t3000;
t3056 = -t2674 * t3032 + t2679 * t3001;
t3035 = t2667 * t3000 + t2669 * t2978;
t3051 = t2674 * t3001 + t2679 * t3032;
t3076 = -t2668 * t3035 + t2670 * t3051;
t3104 = -t2675 * t3076 + t2680 * t3056;
t3102 = t2675 * t3057 + t2680 * t3075;
t3101 = t2675 * t3056 + t2680 * t3076;
t3100 = (-t2667 * t3080 - t2669 * t3077) * pkin(10);
t2483 = t2969 + t2556;
t2359 = t2483 * t2676 + t3009;
t3099 = pkin(3) * t2359;
t3098 = pkin(4) * t2359;
t3097 = pkin(10) * t3053;
t3096 = pkin(12) * t2359;
t2368 = t2483 * t2671 - t3008;
t3095 = pkin(12) * t2368;
t3094 = t2359 * t2673;
t3093 = t2359 * t2678;
t3092 = t2368 * t2672;
t3091 = t2368 * t2677;
t3079 = t2668 * t3051 + t2670 * t3035;
t3078 = t2668 * t3052 + t2670 * t3034;
t3072 = pkin(3) * t3029;
t3071 = pkin(11) * t3029;
t3060 = -pkin(3) * t3005 + pkin(11) * t3028;
t2396 = t2436 * t2671 + t2560 * t2926;
t2397 = t2436 * t2676 - t2520;
t2867 = t2677 * t2397 + t2887;
t2868 = t2672 * t2397 - t2886;
t2972 = -t2667 * t2868 + (-t2396 * t2678 + t2673 * t2867) * t2669;
t2974 = t2396 * t2673 + t2678 * t2867;
t2998 = -t2674 * t2972 + t2679 * t2974;
t2973 = -t2396 * t2915 + t2669 * t2868 + t2867 * t2917;
t2999 = t2674 * t2974 + t2679 * t2972;
t3030 = -t2668 * t2973 + t2670 * t2999;
t3055 = -t2675 * t3030 + t2680 * t2998;
t3050 = t2675 * t2998 + t2680 * t3030;
t3048 = pkin(4) * t3005;
t3047 = pkin(12) * t3004;
t3046 = pkin(12) * t3005;
t3033 = t2668 * t2999 + t2670 * t2973;
t2986 = t2556 + t2970;
t3027 = pkin(4) * t2986;
t3026 = qJ(6) * t2984;
t3018 = t2672 * t2986;
t2550 = t2600 * t2598;
t2988 = -t2550 + t2693;
t3016 = t2672 * t2988;
t3013 = t2677 * t2986;
t3011 = t2677 * t2988;
t2659 = t2660 ^ 2;
t2656 = t2675 * g(1) - t2680 * g(2);
t2768 = qJDD(1) * pkin(1) + t2656;
t2754 = t2670 * t2768;
t2657 = g(1) * t2680 + t2675 * g(2);
t2971 = qJD(1) ^ 2;
t2959 = t2971 * pkin(1);
t2758 = t2657 + t2959;
t2856 = t2875 * pkin(2);
t2962 = pkin(10) * t2667;
t2687 = t2659 * t2962 + t2674 * t2758 + t2679 * t2754 + t2856;
t2916 = t2667 * t2674;
t2769 = -pkin(2) * t2679 - pkin(10) * t2916;
t2757 = t2769 * t2668;
t2961 = pkin(10) * t2669;
t2893 = -pkin(9) - t2961;
t2963 = pkin(9) * t2670;
t2896 = t2679 * t2963;
t2957 = t2679 * g(3);
t2684 = (-t2957 + t2893 * t2899 + ((-t2674 * t2757 + t2896) * qJD(1) + (-qJD(2) + t2660) * pkin(10) * t2910) * qJD(1)) * t2668 + t2687;
t2958 = t2670 * g(3);
t2873 = t2658 * pkin(2) - t2958;
t2665 = t2674 ^ 2;
t2666 = t2679 ^ 2;
t2900 = t2665 + t2666;
t2901 = qJD(2) + t2660;
t2914 = t2667 * t2679;
t2919 = t2660 * t2674;
t2686 = ((-pkin(1) + t2769) * qJDD(1) + (pkin(2) * t2919 - pkin(9) * t2955 + (-t2669 * t2900 * t2955 - t2901 * t2914) * pkin(10)) * qJD(1) - t2656) * t2668 + t2873;
t3007 = t2667 * t2686 + t2669 * t2684;
t2568 = t2719 * t2600;
t3006 = t2761 + t2568;
t2715 = t2719 ^ 2;
t2855 = t2865 ^ 2;
t2664 = t2668 ^ 2;
t2997 = t2664 * t2674;
t2925 = t2621 * t2619;
t2699 = -t2711 - t2925;
t2995 = t2673 * t2699;
t2993 = t2678 * t2699;
t2567 = t2719 * t2598;
t2476 = -t2567 + t2516;
t2603 = t2865 * t2619;
t2540 = -t2603 + t2572;
t2765 = t2865 * t2621;
t2985 = -t2673 * t2603 - t2678 * t2765;
t2952 = qJD(6) * t2595;
t2588 = 0.2e1 * t2952;
t2586 = pkin(3) * t2619 - pkin(11) * t2621;
t2661 = g(3) * t2913;
t2964 = pkin(9) * t2668;
t2720 = qJDD(1) * t2964 - t2657;
t2909 = t2670 * t2674;
t2546 = t2679 * t2720 + t2674 * t2754 - t2661 - t2659 * pkin(2) + t2697 * pkin(10) + (-pkin(1) * t2953 + (t2919 * t2961 + (pkin(9) * t2909 + t2679 * t2757) * qJD(1)) * t2668) * qJD(1);
t2903 = t2678 * t2546;
t2410 = -pkin(3) * t2855 - pkin(11) * t2711 - t2619 * t2586 + t2673 * t3007 + t2903;
t2682 = -t2667 * t2684 + t2669 * t2686 - t2540 * pkin(11) + (t2695 + t2765) * pkin(3);
t2315 = t2677 * t2410 + t2672 * t2682;
t2547 = pkin(4) * t2598 - pkin(12) * t2600;
t2261 = -pkin(4) * t2715 + pkin(12) * t2693 - t2598 * t2547 + t2315;
t2437 = t2673 * t2546 - t2678 * t3007;
t2409 = t2711 * pkin(3) - t2855 * pkin(11) + t2621 * t2586 + t2437;
t2302 = pkin(4) * t3006 - t2476 * pkin(12) + t2409;
t2202 = t2676 * t2261 + t2671 * t2302;
t2500 = pkin(5) * t2558 - qJ(6) * t2560;
t2854 = -pkin(5) * t2969 + t2514 * qJ(6) - t2558 * t2500 + t2202;
t2169 = t2588 + t2854;
t2201 = t2261 * t2671 - t2676 * t2302;
t2174 = -t2514 * pkin(5) - qJ(6) * t2969 + t2500 * t2560 + qJDD(6) + t2201;
t2097 = t2169 * t2676 + t2174 * t2671;
t2314 = t2672 * t2410 - t2677 * t2682;
t2260 = -t2693 * pkin(4) - t2715 * pkin(12) + t2600 * t2547 + t2314;
t2701 = t2435 * pkin(5) + t2260 - t3026;
t2197 = (pkin(5) * t2595 - 0.2e1 * qJD(6)) * t2560 + t2701;
t2881 = qJ(6) * t2671 + pkin(4);
t2965 = pkin(5) * t2676;
t2981 = -t2197 * (t2881 + t2965) + pkin(12) * t2097;
t2698 = 0.2e1 * qJD(6) * t2560 - t2701;
t2167 = (-t2991 - t2526) * pkin(5) + t2698;
t2980 = t2676 * t2167 - t2881 * t2991 + t3047;
t2166 = -pkin(5) * t2526 + t2698 + t3026;
t2979 = -t3095 + t2671 * t2166 + t2984 * (pkin(4) + t2965);
t2596 = t2598 ^ 2;
t2597 = t2600 ^ 2;
t2616 = t2619 ^ 2;
t2617 = t2621 ^ 2;
t2968 = pkin(3) * t2673;
t2967 = pkin(3) * t2678;
t2966 = pkin(4) * t2672;
t2956 = qJ(6) * t2676;
t2951 = t2260 * t2671;
t2950 = t2260 * t2676;
t2944 = t2983 * t2671;
t2943 = t2983 * t2676;
t2941 = t2409 * t2672;
t2940 = t2409 * t2677;
t2496 = t2550 + t2693;
t2935 = t2496 * t2672;
t2934 = t2496 * t2677;
t2562 = t2711 - t2925;
t2929 = t2562 * t2673;
t2928 = t2562 * t2678;
t2906 = t2674 * t2971;
t2882 = t2679 * t2906;
t2655 = t2664 * t2882;
t2636 = t2655 + t2875;
t2924 = t2636 * t2674;
t2923 = t2636 * t2679;
t2637 = -t2655 + t2875;
t2922 = t2637 * t2674;
t2921 = t2637 * t2679;
t2918 = t2664 * t2971;
t2486 = t2667 * t2687 - t2669 * t2873 + (t2667 * (-pkin(9) * t2899 - t2957) - t2669 * (-pkin(2) * t2898 - t2768) + ((t2667 * t2896 + (-t2769 * t2916 - t2669 * (-t2900 * t2961 - pkin(9))) * t2668) * qJD(1) + (-pkin(2) * t2674 + 0.2e1 * pkin(10) * t2914) * t2920) * qJD(1)) * t2668;
t2908 = t2673 * t2486;
t2907 = t2673 * t2572;
t2712 = t2964 * t2971 + t2768;
t2631 = t2668 * t2712 + t2958;
t2905 = t2674 * t2631;
t2904 = t2678 * t2486;
t2902 = t2679 * t2631;
t2895 = -pkin(4) * t2677 - pkin(3);
t2892 = t2660 * t2955;
t2889 = t2665 * t2918;
t2888 = t2666 * t2918;
t2884 = t2673 * t2550;
t2883 = t2678 * t2550;
t2880 = -t2660 + t2954;
t2118 = t2201 * t2671 + t2676 * t2202;
t2213 = t2314 * t2672 + t2677 * t2315;
t2877 = -t2656 * t2675 - t2680 * t2657;
t2872 = -pkin(4) * t2260 + pkin(12) * t2118;
t2654 = qJDD(1) * t2680 - t2675 * t2971;
t2871 = -pkin(8) * t2654 - g(3) * t2675;
t2870 = -pkin(5) * t2174 + qJ(6) * t2169;
t2869 = -pkin(5) * t2983 - qJ(6) * t2399;
t2864 = 0.2e1 * qJD(3) + t2876;
t2635 = -t2889 - t2659;
t2610 = -t2635 * t2674 - t2921;
t2863 = pkin(9) * t2610 - t2905;
t2641 = -t2659 - t2888;
t2614 = t2641 * t2679 - t2924;
t2862 = pkin(9) * t2614 + t2902;
t2571 = -t2855 - t2616;
t2510 = t2571 * t2678 - t2995;
t2861 = pkin(10) * t2510 + t2904;
t2579 = -t2617 - t2855;
t2519 = -t2579 * t2673 + t2928;
t2860 = pkin(10) * t2519 - t2908;
t2062 = t2097 * t2672 - t2197 * t2677;
t2063 = t2097 * t2677 + t2197 * t2672;
t2096 = t2169 * t2671 - t2174 * t2676;
t2851 = t2063 * t2673 - t2096 * t2678;
t2012 = -t2667 * t2062 + t2669 * t2851;
t2032 = t2063 * t2678 + t2096 * t2673;
t2853 = t2012 * t2679 + t2032 * t2674;
t2091 = t2118 * t2672 - t2260 * t2677;
t2092 = t2118 * t2677 + t2260 * t2672;
t2117 = -t2201 * t2676 + t2202 * t2671;
t2850 = t2092 * t2673 - t2117 * t2678;
t2027 = -t2667 * t2091 + t2669 * t2850;
t2043 = t2092 * t2678 + t2117 * t2673;
t2852 = t2027 * t2679 + t2043 * t2674;
t2212 = -t2314 * t2677 + t2315 * t2672;
t2836 = t2213 * t2673 - t2409 * t2678;
t2122 = -t2667 * t2212 + t2669 * t2836;
t2193 = t2213 * t2678 + t2409 * t2673;
t2849 = t2122 * t2679 + t2193 * t2674;
t2310 = -t2399 * t2676 + t2944;
t2251 = t2310 * t2672 + t3013;
t2253 = t2310 * t2677 - t3018;
t2306 = -t2399 * t2671 - t2943;
t2831 = t2253 * t2673 - t2306 * t2678;
t2141 = -t2667 * t2251 + t2669 * t2831;
t2198 = t2253 * t2678 + t2306 * t2673;
t2848 = t2141 * t2679 + t2198 * t2674;
t2401 = (-qJD(5) + t2595) * t2560 + t2879;
t2312 = t2401 * t2676 + t2944;
t2252 = t2312 * t2672 + t3013;
t2254 = t2312 * t2677 - t3018;
t2308 = t2401 * t2671 - t2943;
t2830 = t2254 * t2673 - t2308 * t2678;
t2142 = -t2667 * t2252 + t2669 * t2830;
t2199 = t2254 * t2678 + t2308 * t2673;
t2847 = t2142 * t2679 + t2199 * t2674;
t2276 = t2677 * t2984 - t3092;
t2278 = -t2672 * t2984 - t3091;
t2823 = t2278 * t2673 - t3093;
t2172 = -t2667 * t2276 + t2669 * t2823;
t2227 = t2278 * t2678 + t3094;
t2844 = t2172 * t2679 + t2227 * t2674;
t2406 = (qJD(5) + t2595) * t2558 + t2690;
t2283 = t2406 * t2677 + t3092;
t2285 = -t2406 * t2672 + t3091;
t2821 = t2285 * t2673 + t3093;
t2177 = -t2667 * t2283 + t2669 * t2821;
t2236 = t2285 * t2678 - t3094;
t2842 = t2177 * t2679 + t2236 * t2674;
t2475 = t2600 * t2619 + t2878;
t2477 = t2567 + t2516;
t2377 = t2475 * t2672 - t2477 * t2677;
t2379 = t2475 * t2677 + t2477 * t2672;
t2517 = t2596 + t2597;
t2805 = t2379 * t2673 + t2517 * t2678;
t2263 = -t2667 * t2377 + t2669 * t2805;
t2352 = t2379 * t2678 - t2517 * t2673;
t2827 = t2263 * t2679 + t2352 * t2674;
t2376 = t2476 * t2677 - t2672 * t3006;
t2378 = -t2476 * t2672 - t2677 * t3006;
t2549 = t2597 - t2596;
t2806 = t2378 * t2673 - t2549 * t2678;
t2275 = -t2667 * t2376 + t2669 * t2806;
t2357 = t2378 * t2678 + t2549 * t2673;
t2824 = t2275 * t2679 + t2357 * t2674;
t2531 = -t2715 - t2596;
t2441 = t2531 * t2672 + t3011;
t2442 = t2531 * t2677 - t3016;
t2799 = t2442 * t2673 - t2678 * t3006;
t2317 = -t2667 * t2441 + t2669 * t2799;
t2364 = t2442 * t2678 + t2673 * t3006;
t2815 = t2317 * t2679 + t2364 * t2674;
t2706 = t2670 * t2712;
t2749 = t2660 * t2667 + t2874;
t2713 = qJD(1) * t2749;
t2438 = t2903 + (t2669 * (-g(3) * t2912 + t2679 * t2706 + t2856) + t2667 * (-pkin(2) * t2857 - t2631) + (t2669 * (-qJD(2) * t2874 + t2660 * t2749) + t2667 * (-qJD(2) * t2652 - t2713 * t2912)) * pkin(10) + (t2669 * t2758 + (pkin(2) * t2713 + (-pkin(10) * t2667 ^ 2 + t2669 * t2893) * qJDD(1)) * t2668) * t2674) * t2673;
t2800 = -t2678 * t2437 + t2673 * t2438;
t2321 = t2667 * t2486 + t2669 * t2800;
t2343 = t2437 * t2673 + t2438 * t2678;
t2814 = t2321 * t2679 + t2343 * t2674;
t2545 = -t2597 - t2715;
t2445 = t2545 * t2677 - t2935;
t2446 = -t2545 * t2672 - t2934;
t2478 = (0.2e1 * qJD(4) + t2619) * t2598 + t2696;
t2797 = t2446 * t2673 + t2478 * t2678;
t2323 = -t2667 * t2445 + t2669 * t2797;
t2365 = t2446 * t2678 - t2478 * t2673;
t2813 = t2323 * t2679 + t2365 * t2674;
t2566 = -t2597 + t2715;
t2455 = t2566 * t2677 + t3016;
t2457 = -t2566 * t2672 + t3011;
t2794 = t2457 * t2673 - t2477 * t2678;
t2327 = -t2667 * t2455 + t2669 * t2794;
t2374 = t2457 * t2678 + t2477 * t2673;
t2812 = t2327 * t2679 + t2374 * t2674;
t2565 = t2596 - t2715;
t2456 = t2565 * t2672 + t2934;
t2458 = t2565 * t2677 - t2935;
t2473 = -t2568 + t2761;
t2793 = t2458 * t2673 + t2473 * t2678;
t2328 = -t2667 * t2456 + t2669 * t2793;
t2375 = t2458 * t2678 - t2473 * t2673;
t2811 = t2328 * t2679 + t2375 * t2674;
t2705 = t2672 * t2567;
t2469 = -t2677 * t2761 + t2705;
t2703 = t2677 * t2567;
t2470 = t2672 * t2761 + t2703;
t2763 = t2470 * t2673 + t2883;
t2355 = -t2667 * t2469 + t2669 * t2763;
t2424 = t2470 * t2678 - t2884;
t2808 = t2355 * t2679 + t2424 * t2674;
t2702 = t2677 * t2568;
t2471 = t2672 * t2516 + t2702;
t2704 = t2672 * t2568;
t2472 = t2677 * t2516 - t2704;
t2762 = t2472 * t2673 - t2883;
t2356 = -t2667 * t2471 + t2669 * t2762;
t2425 = t2472 * t2678 + t2884;
t2807 = t2356 * t2679 + t2425 * t2674;
t2505 = -t2705 - t2702;
t2506 = -t2703 + t2704;
t2689 = t2673 * t2506 - t2678 * t2693;
t2419 = -t2667 * t2505 + t2669 * t2689;
t2466 = t2678 * t2506 + t2673 * t2693;
t2802 = t2419 * t2679 + t2466 * t2674;
t2557 = -t2616 - t2617;
t2541 = t2603 + t2572;
t2691 = t2621 * t2876 - t2700;
t2786 = -t2541 * t2678 + t2673 * t2691;
t2427 = -t2667 * t2557 + t2669 * t2786;
t2468 = t2541 * t2673 + t2678 * t2691;
t2801 = t2427 * t2679 + t2468 * t2674;
t2587 = t2617 - t2616;
t2536 = t2621 * t2864 + t2700;
t2787 = -t2536 * t2673 + t2540 * t2678;
t2444 = -t2667 * t2587 + t2669 * t2787;
t2467 = -t2536 * t2678 - t2540 * t2673;
t2798 = t2444 * t2679 + t2467 * t2674;
t2781 = t2571 * t2673 + t2993;
t2448 = -t2667 * t2536 + t2669 * t2781;
t2796 = t2448 * t2679 + t2510 * t2674;
t2539 = -t2619 * t2864 + t2688;
t2784 = t2579 * t2678 + t2929;
t2454 = -t2667 * t2539 + t2669 * t2784;
t2795 = t2454 * t2679 + t2519 * t2674;
t2602 = -t2617 + t2855;
t2782 = t2602 * t2678 + t2995;
t2461 = -t2667 * t2541 + t2669 * t2782;
t2529 = -t2602 * t2673 + t2993;
t2792 = t2461 * t2679 + t2529 * t2674;
t2601 = t2616 - t2855;
t2783 = t2601 * t2673 - t2928;
t2462 = -t2667 * t2691 + t2669 * t2783;
t2530 = t2601 * t2678 + t2929;
t2791 = t2462 * t2679 + t2530 * t2674;
t2692 = t2678 * t2695;
t2767 = t2673 * t2865;
t2492 = -t2669 * t2692 + (t2667 * t2621 + t2669 * t2767) * t2619;
t2751 = t2678 * t2603;
t2534 = t2673 * t2695 + t2751;
t2790 = t2492 * t2679 + t2534 * t2674;
t2766 = t2678 * t2865;
t2494 = t2669 * t2907 + (-t2667 * t2619 + t2669 * t2766) * t2621;
t2752 = t2673 * t2765;
t2535 = t2678 * t2572 - t2752;
t2789 = t2494 * t2679 + t2535 * t2674;
t2533 = t2667 * t2711 + t2669 * t2985;
t2552 = -t2751 + t2752;
t2788 = t2533 * t2679 + t2552 * t2674;
t2708 = t2720 - t2959;
t2608 = t2674 * t2708 + (t2668 * g(3) - t2706) * t2679;
t2609 = t2674 * t2706 + t2679 * t2708 - t2661;
t2780 = -t2679 * t2608 + t2674 * t2609;
t2561 = t2608 * t2674 + t2609 * t2679;
t2645 = t2660 * t2890;
t2626 = t2645 + t2718;
t2644 = t2660 * t2891;
t2629 = -t2644 + t2857;
t2779 = t2626 * t2679 + t2629 * t2674;
t2627 = -t2645 + t2718;
t2628 = t2644 + t2857;
t2778 = -t2627 * t2679 + t2628 * t2674;
t2777 = t2635 * t2679 - t2922;
t2639 = t2659 - t2889;
t2776 = t2639 * t2679 + t2924;
t2775 = t2641 * t2674 + t2923;
t2640 = -t2659 + t2888;
t2774 = t2640 * t2674 + t2921;
t2773 = t2656 * t2680 - t2675 * t2657;
t2770 = t2668 * t2875;
t2756 = -pkin(4) * t2991 - t2950 + t3047;
t2755 = pkin(4) * t2406 + t2951 + t3095;
t2041 = -pkin(4) * t2096 - t2870;
t2044 = -pkin(12) * t2096 + (pkin(5) * t2671 - t2956) * t2197;
t1998 = -pkin(3) * t2096 + pkin(11) * t2063 + t2041 * t2677 + t2044 * t2672;
t2011 = t2669 * t2062 + t2667 * t2851;
t2001 = -pkin(11) * t2062 - t2041 * t2672 + t2044 * t2677;
t2013 = -pkin(3) * t2062 - t2981;
t2731 = pkin(10) * t2032 + t2001 * t2673 + t2013 * t2678;
t1965 = -pkin(2) * t2011 - t2667 * t1998 + t2669 * t2731;
t1970 = t2678 * t2001 - t2673 * t2013 + (-t2011 * t2667 - t2012 * t2669) * pkin(10);
t1997 = -t2012 * t2674 + t2032 * t2679;
t2748 = pkin(9) * t1997 + t1965 * t2679 + t1970 * t2674;
t2020 = pkin(11) * t2092 + (-pkin(12) * t2672 + t2895) * t2117;
t2026 = t2669 * t2091 + t2667 * t2850;
t2029 = -pkin(11) * t2091 + (-pkin(12) * t2677 + t2966) * t2117;
t2037 = -pkin(3) * t2091 - t2872;
t2730 = pkin(10) * t2043 + t2029 * t2673 + t2037 * t2678;
t1977 = -pkin(2) * t2026 - t2667 * t2020 + t2669 * t2730;
t1985 = t2678 * t2029 - t2673 * t2037 + (-t2026 * t2667 - t2027 * t2669) * pkin(10);
t2006 = -t2027 * t2674 + t2043 * t2679;
t2747 = pkin(9) * t2006 + t1977 * t2679 + t1985 * t2674;
t2157 = pkin(5) * t2986 + t2169;
t2162 = qJ(6) * t2986 + t2174;
t2071 = -pkin(12) * t2306 - t2157 * t2671 + t2162 * t2676;
t2211 = -pkin(4) * t2306 - t2869;
t2038 = -pkin(3) * t2306 + pkin(11) * t2253 + t2071 * t2672 + t2211 * t2677;
t2139 = t2669 * t2251 + t2667 * t2831;
t2042 = -pkin(11) * t2251 + t2071 * t2677 - t2211 * t2672;
t2710 = pkin(12) * t2310 + t2157 * t2676 + t2162 * t2671 + t3027;
t2060 = -pkin(3) * t2251 - t2710;
t2729 = pkin(10) * t2198 + t2042 * t2673 + t2060 * t2678;
t1996 = -pkin(2) * t2139 - t2667 * t2038 + t2669 * t2729;
t2007 = t2678 * t2042 - t2673 * t2060 + (-t2139 * t2667 - t2141 * t2669) * pkin(10);
t2088 = -t2141 * t2674 + t2198 * t2679;
t2746 = pkin(9) * t2088 + t1996 * t2679 + t2007 * t2674;
t2101 = -pkin(12) * t2308 - t2117;
t2059 = pkin(11) * t2254 + t2672 * t2101 + t2308 * t2895;
t2140 = t2669 * t2252 + t2667 * t2830;
t2064 = -pkin(11) * t2252 + t2101 * t2677 + t2308 * t2966;
t2716 = pkin(12) * t2312 + t2118 + t3027;
t2072 = -pkin(3) * t2252 - t2716;
t2726 = pkin(10) * t2199 + t2064 * t2673 + t2072 * t2678;
t2000 = -pkin(2) * t2140 - t2667 * t2059 + t2669 * t2726;
t2010 = t2678 * t2064 - t2673 * t2072 + (-t2140 * t2667 - t2142 * t2669) * pkin(10);
t2089 = -t2142 * t2674 + t2199 * t2679;
t2745 = pkin(9) * t2089 + t2000 * t2679 + t2010 * t2674;
t2709 = pkin(5) * t2483 + qJ(6) * t2989 + t2854;
t2134 = -t2709 - 0.2e1 * t2952 - t3098;
t2135 = -pkin(5) * t2942 + t2166 * t2676 - t3096;
t2045 = pkin(11) * t2278 + t2134 * t2677 + t2135 * t2672 - t3099;
t2170 = t2669 * t2276 + t2667 * t2823;
t2053 = -pkin(11) * t2276 - t2134 * t2672 + t2135 * t2677;
t2100 = -pkin(3) * t2276 - t2979;
t2728 = pkin(10) * t2227 + t2053 * t2673 + t2100 * t2678;
t2003 = -pkin(2) * t2170 - t2667 * t2045 + t2669 * t2728;
t2016 = t2678 * t2053 - t2673 * t2100 + (-t2170 * t2667 - t2172 * t2669) * pkin(10);
t2119 = -t2172 * t2674 + t2227 * t2679;
t2744 = pkin(9) * t2119 + t2003 * t2679 + t2016 * t2674;
t2136 = -t2167 * t2671 - t2956 * t2991 - t3046;
t2694 = pkin(5) * t2990 + qJ(6) * t2982 - t2174;
t2138 = -t2694 - t3048;
t2046 = t2136 * t2672 + t2138 * t2677 + t3060;
t2058 = t2136 * t2677 - t2138 * t2672 - t3071;
t2102 = -t2980 - t3072;
t2727 = t2058 * t2673 + t2102 * t2678 + t3097;
t2005 = -t2667 * t2046 + t2669 * t2727 - t3113;
t2017 = t2678 * t2058 - t2673 * t2102 + t3100;
t2743 = t2005 * t2679 + t2017 * t2674 + t3127;
t2165 = t2201 - t3048;
t2224 = t2951 - t3046;
t2086 = t2165 * t2677 + t2224 * t2672 + t3060;
t2090 = -t2165 * t2672 + t2224 * t2677 - t3071;
t2144 = -t2756 - t3072;
t2725 = t2090 * t2673 + t2144 * t2678 + t3097;
t2015 = -t2667 * t2086 + t2669 * t2725 - t3113;
t2028 = t2678 * t2090 - t2673 * t2144 + t3100;
t2742 = t2015 * t2679 + t2028 * t2674 + t3127;
t2168 = t2202 + t3098;
t2225 = t2950 + t3096;
t2087 = pkin(11) * t2285 + t2168 * t2677 + t2225 * t2672 + t3099;
t2175 = t2669 * t2283 + t2667 * t2821;
t2095 = -pkin(11) * t2283 - t2168 * t2672 + t2225 * t2677;
t2146 = -pkin(3) * t2283 - t2755;
t2724 = pkin(10) * t2236 + t2095 * t2673 + t2146 * t2678;
t2019 = -pkin(2) * t2175 - t2667 * t2087 + t2669 * t2724;
t2030 = t2678 * t2095 - t2673 * t2146 + (-t2175 * t2667 - t2177 * t2669) * pkin(10);
t2123 = -t2177 * t2674 + t2236 * t2679;
t2741 = pkin(9) * t2123 + t2019 * t2679 + t2030 * t2674;
t2121 = t2669 * t2212 + t2667 * t2836;
t2194 = -pkin(3) * t2409 + pkin(11) * t2213;
t2714 = pkin(10) * t2193 + (-pkin(11) * t2673 - t2967) * t2212;
t2035 = -pkin(2) * t2121 - t2667 * t2194 + t2669 * t2714;
t2036 = (-pkin(11) * t2678 + t2968) * t2212 + (-t2121 * t2667 - t2122 * t2669) * pkin(10);
t2077 = -t2122 * t2674 + t2193 * t2679;
t2740 = pkin(9) * t2077 + t2035 * t2679 + t2036 * t2674;
t2179 = pkin(3) * t2517 + pkin(11) * t2379 + t2213;
t2262 = t2669 * t2377 + t2667 * t2805;
t2192 = -pkin(11) * t2377 - t2212;
t2717 = pkin(10) * t2352 + t2192 * t2673 - t2377 * t2967;
t2066 = -pkin(2) * t2262 - t2667 * t2179 + t2669 * t2717;
t2103 = t2377 * t2968 + t2678 * t2192 + (-t2262 * t2667 - t2263 * t2669) * pkin(10);
t2214 = -t2263 * t2674 + t2352 * t2679;
t2739 = pkin(9) * t2214 + t2066 * t2679 + t2103 * t2674;
t2280 = -pkin(3) * t3006 + pkin(11) * t2442 - t2940;
t2316 = t2669 * t2441 + t2667 * t2799;
t2249 = -pkin(3) * t2441 + t2314;
t2330 = -pkin(11) * t2441 + t2941;
t2723 = pkin(10) * t2364 + t2249 * t2678 + t2330 * t2673;
t2113 = -pkin(2) * t2316 - t2667 * t2280 + t2669 * t2723;
t2133 = -t2673 * t2249 + t2678 * t2330 + (-t2316 * t2667 - t2317 * t2669) * pkin(10);
t2238 = -t2317 * t2674 + t2364 * t2679;
t2738 = pkin(9) * t2238 + t2113 * t2679 + t2133 * t2674;
t2287 = pkin(3) * t2478 + pkin(11) * t2446 + t2941;
t2322 = t2669 * t2445 + t2667 * t2797;
t2250 = -pkin(3) * t2445 + t2315;
t2333 = -pkin(11) * t2445 + t2940;
t2722 = pkin(10) * t2365 + t2250 * t2678 + t2333 * t2673;
t2116 = -pkin(2) * t2322 - t2667 * t2287 + t2669 * t2722;
t2137 = -t2673 * t2250 + t2678 * t2333 + (-t2322 * t2667 - t2323 * t2669) * pkin(10);
t2243 = -t2323 * t2674 + t2365 * t2679;
t2737 = pkin(9) * t2243 + t2116 * t2679 + t2137 * t2674;
t2320 = -t2669 * t2486 + t2667 * t2800;
t2223 = (-t2320 * t2667 - t2321 * t2669) * pkin(10);
t2233 = -t2321 * t2674 + t2343 * t2679;
t2234 = -pkin(2) * t2320 + t2343 * t2961;
t2736 = pkin(9) * t2233 + t2223 * t2674 + t2234 * t2679;
t2426 = t2669 * t2557 + t2667 * t2786;
t2244 = (-t2426 * t2667 - t2427 * t2669) * pkin(10) - t2800;
t2721 = pkin(10) * t2468 + t2343;
t2248 = -pkin(2) * t2426 + t2669 * t2721;
t2358 = -t2427 * t2674 + t2468 * t2679;
t2735 = pkin(9) * t2358 + t2244 * t2674 + t2248 * t2679;
t2447 = t2669 * t2536 + t2667 * t2781;
t2282 = -pkin(2) * t2447 + t2667 * t2437 + t2669 * t2861;
t2324 = -t2908 + (-t2447 * t2667 - t2448 * t2669) * pkin(10);
t2408 = -t2448 * t2674 + t2510 * t2679;
t2734 = pkin(9) * t2408 + t2282 * t2679 + t2324 * t2674;
t2453 = t2669 * t2539 + t2667 * t2784;
t2289 = -pkin(2) * t2453 + t2667 * t2438 + t2669 * t2860;
t2329 = -t2904 + (-t2453 * t2667 - t2454 * t2669) * pkin(10);
t2417 = -t2454 * t2674 + t2519 * t2679;
t2733 = pkin(9) * t2417 + t2289 * t2679 + t2329 * t2674;
t2590 = t2627 * t2674 + t2628 * t2679;
t2732 = pkin(9) * t2590 + t2561;
t2625 = (t2901 * t2953 + t2899) * t2668;
t2663 = t2668 * t2664;
t2653 = t2675 * qJDD(1) + t2680 * t2971;
t2651 = t2670 * t2875;
t2643 = t2900 * t2918;
t2642 = (t2665 - t2666) * t2918;
t2638 = -pkin(8) * t2653 + g(3) * t2680;
t2630 = t2900 * t2892;
t2623 = (-t2665 * t2660 * qJD(1) + t2679 * t2759) * t2668;
t2622 = -t2666 * t2892 - t2674 * t2857;
t2613 = t2640 * t2679 - t2922;
t2612 = -t2639 * t2674 + t2923;
t2607 = t2625 * t2909 + t2663 * t2882;
t2606 = (t2899 + (qJD(2) - t2880) * t2953) * t2997;
t2605 = (qJD(1) * t2880 * t2997 + t2668 * t2857) * t2679;
t2604 = (-t2663 * t2906 + (-t2658 + (-qJD(1) * t2919 + t2898) * t2668) * t2670) * t2679;
t2591 = -t2626 * t2674 + t2629 * t2679;
t2585 = t2668 * t2629 + t2670 * t2775;
t2584 = -t2668 * t2628 + t2670 * t2774;
t2583 = -t2668 * t2627 + t2670 * t2776;
t2582 = -t2670 * t2629 + t2668 * t2775;
t2581 = t2670 * t2628 + t2668 * t2774;
t2580 = t2670 * t2627 + t2668 * t2776;
t2578 = -t2668 * t2625 + t2670 * t2777;
t2577 = t2670 * t2625 + t2668 * t2777;
t2576 = -t2668 * t2642 + t2670 * t2779;
t2575 = t2668 * t2643 + t2670 * t2778;
t2574 = t2670 * t2642 + t2668 * t2779;
t2573 = -t2670 * t2643 + t2668 * t2778;
t2543 = t2668 * t2631 + t2670 * t2780;
t2542 = -t2670 * t2631 + t2668 * t2780;
t2532 = t2669 * t2897 + (t2985 - t2760) * t2667;
t2518 = -t2905 + (-t2582 * t2668 - t2585 * t2670) * pkin(9);
t2509 = -t2902 + (-t2577 * t2668 - t2578 * t2670) * pkin(9);
t2508 = -pkin(1) * t2582 + t2668 * t2608 + t2670 * t2862;
t2507 = pkin(1) * t2585 - t2670 * t2608 + t2668 * t2862;
t2499 = -pkin(1) * t2577 + t2668 * t2609 + t2670 * t2863;
t2498 = pkin(1) * t2578 - t2670 * t2609 + t2668 * t2863;
t2493 = t2667 * t2907 + (t2669 * t2619 + t2667 * t2766) * t2621;
t2491 = -t2667 * t2692 + (-t2669 * t2621 + t2667 * t2767) * t2619;
t2488 = pkin(1) * t2543 + t2561 * t2964;
t2487 = -pkin(1) * t2542 + t2561 * t2963;
t2485 = -pkin(1) * t2573 + t2670 * t2732;
t2484 = pkin(1) * t2575 + t2668 * t2732;
t2481 = -t2533 * t2674 + t2552 * t2679;
t2480 = (-t2542 * t2668 - t2543 * t2670) * pkin(9);
t2479 = (-t2573 * t2668 - t2575 * t2670) * pkin(9) - t2780;
t2460 = t2667 * t2783 + t2669 * t2691;
t2459 = t2669 * t2541 + t2667 * t2782;
t2443 = t2669 * t2587 + t2667 * t2787;
t2440 = -t2494 * t2674 + t2535 * t2679;
t2439 = -t2492 * t2674 + t2534 * t2679;
t2423 = -t2668 * t2532 + t2670 * t2788;
t2422 = t2670 * t2532 + t2668 * t2788;
t2421 = -t2462 * t2674 + t2530 * t2679;
t2420 = -t2461 * t2674 + t2529 * t2679;
t2418 = t2669 * t2505 + t2667 * t2689;
t2373 = -t2668 * t2493 + t2670 * t2789;
t2372 = -t2668 * t2491 + t2670 * t2790;
t2371 = t2670 * t2493 + t2668 * t2789;
t2370 = t2670 * t2491 + t2668 * t2790;
t2363 = -t2444 * t2674 + t2467 * t2679;
t2354 = t2669 * t2471 + t2667 * t2762;
t2353 = t2669 * t2469 + t2667 * t2763;
t2342 = -t2419 * t2674 + t2466 * t2679;
t2341 = -t2668 * t2460 + t2670 * t2791;
t2340 = -t2668 * t2459 + t2670 * t2792;
t2339 = t2670 * t2460 + t2668 * t2791;
t2338 = t2670 * t2459 + t2668 * t2792;
t2337 = -t2668 * t2453 + t2670 * t2795;
t2336 = t2670 * t2453 + t2668 * t2795;
t2332 = -t2668 * t2447 + t2670 * t2796;
t2331 = t2670 * t2447 + t2668 * t2796;
t2326 = t2669 * t2456 + t2667 * t2793;
t2325 = t2669 * t2455 + t2667 * t2794;
t2319 = -t2668 * t2443 + t2670 * t2798;
t2318 = t2670 * t2443 + t2668 * t2798;
t2304 = -t2668 * t2426 + t2670 * t2801;
t2303 = t2670 * t2426 + t2668 * t2801;
t2291 = -t2356 * t2674 + t2425 * t2679;
t2290 = -t2355 * t2674 + t2424 * t2679;
t2288 = pkin(2) * t2454 - t2669 * t2438 + t2667 * t2860;
t2281 = pkin(2) * t2448 - t2669 * t2437 + t2667 * t2861;
t2274 = t2669 * t2376 + t2667 * t2806;
t2273 = -t2668 * t2418 + t2670 * t2802;
t2272 = t2670 * t2418 + t2668 * t2802;
t2247 = pkin(2) * t2427 + t2667 * t2721;
t2246 = -t2328 * t2674 + t2375 * t2679;
t2245 = -t2327 * t2674 + t2374 * t2679;
t2235 = pkin(2) * t2321 + t2343 * t2962;
t2232 = -t2668 * t2354 + t2670 * t2807;
t2231 = -t2668 * t2353 + t2670 * t2808;
t2230 = t2670 * t2354 + t2668 * t2807;
t2229 = t2670 * t2353 + t2668 * t2808;
t2226 = -t2275 * t2674 + t2357 * t2679;
t2206 = -t2668 * t2326 + t2670 * t2811;
t2205 = -t2668 * t2325 + t2670 * t2812;
t2204 = t2670 * t2326 + t2668 * t2811;
t2203 = t2670 * t2325 + t2668 * t2812;
t2196 = -t2668 * t2322 + t2670 * t2813;
t2195 = t2670 * t2322 + t2668 * t2813;
t2191 = -t2668 * t2316 + t2670 * t2815;
t2190 = t2670 * t2316 + t2668 * t2815;
t2181 = -t2668 * t2320 + t2670 * t2814;
t2180 = t2670 * t2320 + t2668 * t2814;
t2164 = -t2668 * t2274 + t2670 * t2824;
t2163 = t2670 * t2274 + t2668 * t2824;
t2156 = -t2668 * t2262 + t2670 * t2827;
t2155 = t2670 * t2262 + t2668 * t2827;
t2145 = -t2674 * t2289 + t2679 * t2329 + (-t2336 * t2668 - t2337 * t2670) * pkin(9);
t2143 = -t2674 * t2282 + t2679 * t2324 + (-t2331 * t2668 - t2332 * t2670) * pkin(9);
t2128 = -pkin(1) * t2336 - t2668 * t2288 + t2670 * t2733;
t2127 = pkin(1) * t2337 + t2670 * t2288 + t2668 * t2733;
t2126 = -pkin(1) * t2331 - t2668 * t2281 + t2670 * t2734;
t2125 = pkin(1) * t2332 + t2670 * t2281 + t2668 * t2734;
t2115 = pkin(2) * t2323 + t2669 * t2287 + t2667 * t2722;
t2114 = t2679 * t2244 - t2674 * t2248 + (-t2303 * t2668 - t2304 * t2670) * pkin(9);
t2112 = pkin(2) * t2317 + t2669 * t2280 + t2667 * t2723;
t2094 = -pkin(1) * t2303 - t2668 * t2247 + t2670 * t2735;
t2093 = pkin(1) * t2304 + t2670 * t2247 + t2668 * t2735;
t2075 = -t2668 * t2175 + t2670 * t2842;
t2073 = t2670 * t2175 + t2668 * t2842;
t2069 = -t2668 * t2170 + t2670 * t2844;
t2067 = t2670 * t2170 + t2668 * t2844;
t2065 = pkin(2) * t2263 + t2669 * t2179 + t2667 * t2717;
t2061 = t2679 * t2223 - t2674 * t2234 + (-t2180 * t2668 - t2181 * t2670) * pkin(9);
t2052 = -pkin(1) * t2180 - t2668 * t2235 + t2670 * t2736;
t2051 = pkin(1) * t2181 + t2670 * t2235 + t2668 * t2736;
t2050 = -t2668 * t2140 + t2670 * t2847;
t2049 = -t2668 * t2139 + t2670 * t2848;
t2048 = t2670 * t2140 + t2668 * t2847;
t2047 = t2670 * t2139 + t2668 * t2848;
t2040 = -t2668 * t2121 + t2670 * t2849;
t2039 = t2670 * t2121 + t2668 * t2849;
t2034 = pkin(2) * t2122 + t2669 * t2194 + t2667 * t2714;
t2033 = -t2674 * t2116 + t2679 * t2137 + (-t2195 * t2668 - t2196 * t2670) * pkin(9);
t2031 = -t2674 * t2113 + t2679 * t2133 + (-t2190 * t2668 - t2191 * t2670) * pkin(9);
t2025 = -pkin(1) * t2195 - t2668 * t2115 + t2670 * t2737;
t2024 = pkin(1) * t2196 + t2670 * t2115 + t2668 * t2737;
t2023 = -pkin(1) * t2190 - t2668 * t2112 + t2670 * t2738;
t2022 = pkin(1) * t2191 + t2670 * t2112 + t2668 * t2738;
t2021 = -t2674 * t2066 + t2679 * t2103 + (-t2155 * t2668 - t2156 * t2670) * pkin(9);
t2018 = pkin(2) * t2177 + t2669 * t2087 + t2667 * t2724;
t2014 = t2669 * t2086 + t2667 * t2725 + t3114;
t2009 = -pkin(1) * t2155 - t2668 * t2065 + t2670 * t2739;
t2008 = pkin(1) * t2156 + t2670 * t2065 + t2668 * t2739;
t2004 = t2669 * t2046 + t2667 * t2727 + t3114;
t2002 = pkin(2) * t2172 + t2669 * t2045 + t2667 * t2728;
t1999 = pkin(2) * t2142 + t2669 * t2059 + t2667 * t2726;
t1995 = pkin(2) * t2141 + t2669 * t2038 + t2667 * t2729;
t1994 = -t2668 * t2026 + t2670 * t2852;
t1993 = t2670 * t2026 + t2668 * t2852;
t1992 = -t2674 * t2019 + t2679 * t2030 + (-t2073 * t2668 - t2075 * t2670) * pkin(9);
t1991 = -t2674 * t2035 + t2679 * t2036 + (-t2039 * t2668 - t2040 * t2670) * pkin(9);
t1990 = -t2674 * t2015 + t2679 * t2028 + t3128;
t1989 = -t2668 * t2011 + t2670 * t2853;
t1988 = t2670 * t2011 + t2668 * t2853;
t1987 = -pkin(1) * t2039 - t2668 * t2034 + t2670 * t2740;
t1986 = pkin(1) * t2040 + t2670 * t2034 + t2668 * t2740;
t1984 = -t2674 * t2005 + t2679 * t2017 + t3128;
t1983 = -t2674 * t2003 + t2679 * t2016 + (-t2067 * t2668 - t2069 * t2670) * pkin(9);
t1982 = -pkin(1) * t2073 - t2668 * t2018 + t2670 * t2741;
t1981 = pkin(1) * t2075 + t2670 * t2018 + t2668 * t2741;
t1980 = -t2668 * t2014 + t2670 * t2742 - t3135;
t1979 = t2670 * t2014 + t2668 * t2742 + t3136;
t1978 = -t2674 * t2000 + t2679 * t2010 + (-t2048 * t2668 - t2050 * t2670) * pkin(9);
t1976 = pkin(2) * t2027 + t2669 * t2020 + t2667 * t2730;
t1975 = -t2674 * t1996 + t2679 * t2007 + (-t2047 * t2668 - t2049 * t2670) * pkin(9);
t1974 = -t2668 * t2004 + t2670 * t2743 - t3135;
t1973 = t2670 * t2004 + t2668 * t2743 + t3136;
t1972 = -pkin(1) * t2067 - t2668 * t2002 + t2670 * t2744;
t1971 = pkin(1) * t2069 + t2670 * t2002 + t2668 * t2744;
t1969 = -pkin(1) * t2048 - t2668 * t1999 + t2670 * t2745;
t1968 = pkin(1) * t2050 + t2670 * t1999 + t2668 * t2745;
t1967 = -pkin(1) * t2047 - t2668 * t1995 + t2670 * t2746;
t1966 = pkin(1) * t2049 + t2670 * t1995 + t2668 * t2746;
t1964 = pkin(2) * t2012 + t2669 * t1998 + t2667 * t2731;
t1963 = -t2674 * t1977 + t2679 * t1985 + (-t1993 * t2668 - t1994 * t2670) * pkin(9);
t1962 = -pkin(1) * t1993 - t2668 * t1976 + t2670 * t2747;
t1961 = pkin(1) * t1994 + t2670 * t1976 + t2668 * t2747;
t1960 = -t2674 * t1965 + t2679 * t1970 + (-t1988 * t2668 - t1989 * t2670) * pkin(9);
t1959 = -pkin(1) * t1988 - t2668 * t1964 + t2670 * t2748;
t1958 = pkin(1) * t1989 + t2670 * t1964 + t2668 * t2748;
t1 = [0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t2654, 0, -t2653, 0, t2871, -t2638, -t2773, -pkin(8) * t2773, -t2675 * t2607 + t2623 * t2680, -t2675 * t2576 + t2591 * t2680, -t2675 * t2583 + t2612 * t2680, -t2675 * t2604 + t2622 * t2680, -t2675 * t2584 + t2613 * t2680, t2680 * t2630 + t2675 * t2770, t2680 * t2518 - t2675 * t2508 - pkin(8) * (t2585 * t2680 + t2675 * t2614), t2680 * t2509 - t2675 * t2499 - pkin(8) * (t2578 * t2680 + t2675 * t2610), t2680 * t2479 - t2675 * t2485 - pkin(8) * (t2575 * t2680 + t2675 * t2590), t2680 * t2480 - t2675 * t2487 - pkin(8) * (t2543 * t2680 + t2675 * t2561), -t2675 * t2373 + t2440 * t2680, -t2675 * t2319 + t2363 * t2680, -t2675 * t2340 + t2420 * t2680, -t2675 * t2372 + t2439 * t2680, -t2675 * t2341 + t2421 * t2680, -t2675 * t2423 + t2481 * t2680, t2680 * t2143 - t2675 * t2126 - pkin(8) * (t2332 * t2680 + t2675 * t2408), t2680 * t2145 - t2675 * t2128 - pkin(8) * (t2337 * t2680 + t2675 * t2417), t2680 * t2114 - t2675 * t2094 - pkin(8) * (t2304 * t2680 + t2675 * t2358), t2680 * t2061 - t2675 * t2052 - pkin(8) * (t2181 * t2680 + t2675 * t2233), -t2675 * t2232 + t2291 * t2680, -t2675 * t2164 + t2226 * t2680, -t2675 * t2205 + t2245 * t2680, -t2675 * t2231 + t2290 * t2680, -t2675 * t2206 + t2246 * t2680, -t2675 * t2273 + t2342 * t2680, t2680 * t2031 - t2675 * t2023 - pkin(8) * (t2191 * t2680 + t2675 * t2238), t2680 * t2033 - t2675 * t2025 - pkin(8) * (t2196 * t2680 + t2675 * t2243), t2680 * t2021 - t2675 * t2009 - pkin(8) * (t2156 * t2680 + t2675 * t2214), t2680 * t1991 - t2675 * t1987 - pkin(8) * (t2040 * t2680 + t2675 * t2077), t3055, -t3154, t3138, t3105, -t3152, t3104, -t2675 * t1980 + t2680 * t1990 - t3129, t2680 * t1992 - t2675 * t1982 - pkin(8) * (t2075 * t2680 + t2675 * t2123), t2680 * t1978 - t2675 * t1969 - pkin(8) * (t2050 * t2680 + t2675 * t2089), t2680 * t1963 - t2675 * t1962 - pkin(8) * (t1994 * t2680 + t2675 * t2006), t3055, t3138, t3154, t3104, t3152, t3105, -t2675 * t1974 + t2680 * t1984 - t3129, t2680 * t1975 - t2675 * t1967 - pkin(8) * (t2049 * t2680 + t2675 * t2088), t2680 * t1983 - t2675 * t1972 - pkin(8) * (t2069 * t2680 + t2675 * t2119), t2680 * t1960 - t2675 * t1959 - pkin(8) * (t1989 * t2680 + t2675 * t1997); 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t2653, 0, t2654, 0, t2638, t2871, t2877, pkin(8) * t2877, t2607 * t2680 + t2675 * t2623, t2576 * t2680 + t2675 * t2591, t2583 * t2680 + t2675 * t2612, t2604 * t2680 + t2675 * t2622, t2584 * t2680 + t2675 * t2613, t2675 * t2630 - t2680 * t2770, t2675 * t2518 + t2680 * t2508 + pkin(8) * (-t2675 * t2585 + t2614 * t2680), t2675 * t2509 + t2680 * t2499 + pkin(8) * (-t2675 * t2578 + t2610 * t2680), t2675 * t2479 + t2680 * t2485 + pkin(8) * (-t2675 * t2575 + t2590 * t2680), t2675 * t2480 + t2680 * t2487 + pkin(8) * (-t2675 * t2543 + t2561 * t2680), t2373 * t2680 + t2675 * t2440, t2319 * t2680 + t2675 * t2363, t2340 * t2680 + t2675 * t2420, t2372 * t2680 + t2675 * t2439, t2341 * t2680 + t2675 * t2421, t2423 * t2680 + t2675 * t2481, t2675 * t2143 + t2680 * t2126 + pkin(8) * (-t2675 * t2332 + t2408 * t2680), t2675 * t2145 + t2680 * t2128 + pkin(8) * (-t2675 * t2337 + t2417 * t2680), t2675 * t2114 + t2680 * t2094 + pkin(8) * (-t2675 * t2304 + t2358 * t2680), t2675 * t2061 + t2680 * t2052 + pkin(8) * (-t2675 * t2181 + t2233 * t2680), t2232 * t2680 + t2675 * t2291, t2164 * t2680 + t2675 * t2226, t2205 * t2680 + t2675 * t2245, t2231 * t2680 + t2675 * t2290, t2206 * t2680 + t2675 * t2246, t2273 * t2680 + t2675 * t2342, t2675 * t2031 + t2680 * t2023 + pkin(8) * (-t2675 * t2191 + t2238 * t2680), t2675 * t2033 + t2680 * t2025 + pkin(8) * (-t2675 * t2196 + t2243 * t2680), t2675 * t2021 + t2680 * t2009 + pkin(8) * (-t2675 * t2156 + t2214 * t2680), t2675 * t1991 + t2680 * t1987 + pkin(8) * (-t2675 * t2040 + t2077 * t2680), t3050, t3153, t3137, t3102, t3151, t3101, t2680 * t1980 + t2675 * t1990 + t3130, t2675 * t1992 + t2680 * t1982 + pkin(8) * (-t2675 * t2075 + t2123 * t2680), t2675 * t1978 + t2680 * t1969 + pkin(8) * (-t2675 * t2050 + t2089 * t2680), t2675 * t1963 + t2680 * t1962 + pkin(8) * (-t2675 * t1994 + t2006 * t2680), t3050, t3137, -t3153, t3101, -t3151, t3102, t2680 * t1974 + t2675 * t1984 + t3130, t2675 * t1975 + t2680 * t1967 + pkin(8) * (-t2675 * t2049 + t2088 * t2680), t2675 * t1983 + t2680 * t1972 + pkin(8) * (-t2675 * t2069 + t2119 * t2680), t2675 * t1960 + t2680 * t1959 + pkin(8) * (-t2675 * t1989 + t1997 * t2680); 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t2656, t2657, 0, 0, t2606, t2574, t2580, t2605, t2581, t2651, t2507, t2498, t2484, t2488, t2371, t2318, t2338, t2370, t2339, t2422, t2125, t2127, t2093, t2051, t2230, t2163, t2203, t2229, t2204, t2272, t2022, t2024, t2008, t1986, t3033, t2055, t3132, t3078, t2081, t3079, t1979, t1981, t1968, t1961, t3033, t3132, -t2055, t3079, -t2081, t3078, t1973, t1966, t1971, t1958; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), 0, -t2971, 0, 0, -g(3), -t2656, 0, t2623, t2591, t2612, t2622, t2613, t2630, t2518, t2509, t2479, t2480, t2440, t2363, t2420, t2439, t2421, t2481, t2143, t2145, t2114, t2061, t2291, t2226, t2245, t2290, t2246, t2342, t2031, t2033, t2021, t1991, t2998, -t2098, t3116, t3057, -t2131, t3056, t1990, t1992, t1978, t1963, t2998, t3116, t2098, t3056, t2131, t3057, t1984, t1975, t1983, t1960; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2971, 0, qJDD(1), 0, g(3), 0, -t2657, 0, t2607, t2576, t2583, t2604, t2584, -t2770, t2508, t2499, t2485, t2487, t2373, t2319, t2340, t2372, t2341, t2423, t2126, t2128, t2094, t2052, t2232, t2164, t2205, t2231, t2206, t2273, t2023, t2025, t2009, t1987, t3030, t2057, t3131, t3075, t2085, t3076, t1980, t1982, t1969, t1962, t3030, t3131, -t2057, t3076, -t2085, t3075, t1974, t1967, t1972, t1959; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), t2656, t2657, 0, 0, t2606, t2574, t2580, t2605, t2581, t2651, t2507, t2498, t2484, t2488, t2371, t2318, t2338, t2370, t2339, t2422, t2125, t2127, t2093, t2051, t2230, t2163, t2203, t2229, t2204, t2272, t2022, t2024, t2008, t1986, t3033, t2055, t3132, t3078, t2081, t3079, t1979, t1981, t1968, t1961, t3033, t3132, -t2055, t3079, -t2081, t3078, t1973, t1966, t1971, t1958; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2718, t2629, t2636, -t2645, t2640, t2645, 0, -t2631, t2608, 0, t2535, t2467, t2529, t2534, t2530, t2552, t2324, t2329, t2244, t2223, t2425, t2357, t2374, t2424, t2375, t2466, t2133, t2137, t2103, t2036, t2974, t2208, t3073, t3002, t2242, t3001, t2028, t2030, t2010, t1985, t2974, t3073, -t2208, t3001, -t2242, t3002, t2017, t2007, t2016, t1970; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2644, t2626, t2639, t2857, t2637, -t2644, t2631, 0, t2609, 0, t2494, t2444, t2461, t2492, t2462, t2533, t2282, t2289, t2248, t2234, t2356, t2275, t2327, t2355, t2328, t2419, t2113, t2116, t2066, t2035, t2972, t2150, t3107, t3031, t2189, t3032, t2015, t2019, t2000, t1977, t2972, t3107, -t2150, t3032, -t2189, t3031, t2005, t1996, t2003, t1965; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2655, t2642, t2627, t2655, t2628, t2875, -t2608, -t2609, 0, 0, t2493, t2443, t2459, t2491, t2460, t2532, t2281, t2288, t2247, t2235, t2354, t2274, t2325, t2353, t2326, t2418, t2112, t2115, t2065, t2034, t2973, t2148, t3108, t3034, t2185, t3035, t2014, t2018, t1999, t1976, t2973, t3108, -t2148, t3035, -t2185, t3034, t2004, t1995, t2002, t1964; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2572, -t2536, t2699, t2603, t2601, -t2603, 0, -t2486, t2437, 0, t2472, t2378, t2457, t2470, t2458, t2506, t2330, t2333, t2192, -pkin(11) * t2212, t2867, t2271, t3054, t2976, t2299, t2975, t2090, t2095, t2064, t2029, t2867, t3054, -t2271, t2975, -t2299, t2976, t2058, t2042, t2053, t2001; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2765, t2540, t2602, -t2695, -t2562, -t2765, t2486, 0, t2438, 0, -t2550, -t2549, -t2477, t2550, t2473, -t2693, t2249, t2250, -pkin(3) * t2377, -pkin(3) * t2212, -t2396, -t2307, -t3037, -t2393, -t2383, t2992, t2144, t2146, t2072, t2037, -t2396, -t3037, t2307, t2992, t2383, -t2393, t2102, t2060, t2100, t2013; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2925, t2587, t2541, -t2925, t2691, -t2711, -t2437, -t2438, 0, 0, t2471, t2376, t2455, t2469, t2456, t2505, t2280, t2287, t2179, t2194, t2868, t2269, t3059, t2977, t2295, t2978, t2086, t2087, t2059, t2020, t2868, t3059, -t2269, t2978, -t2295, t2977, t2046, t2038, t2045, t1998; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2516, -t3006, t2988, t2567, t2565, -t2567, 0, t2409, t2314, 0, t2397, t2311, t3036, t2764, t2387, t2866, t2224, t2225, t2101, -pkin(12) * t2117, t2397, t3036, -t2311, t2866, -t2387, t2764, t2136, t2071, t2135, t2044; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2568, t2476, t2566, -t2761, t2496, -t2568, -t2409, 0, t2315, 0, -t2504, -t2987, -t2983, t2504, t2399, -t2514, t2165, t2168, -pkin(4) * t2308, -pkin(4) * t2117, -t2504, -t2983, t2987, -t2514, -t2399, t2504, t2138, t2211, t2134, t2041; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2550, t2549, t2477, -t2550, -t2473, t2693, -t2314, -t2315, 0, 0, t2396, t2307, t3037, t2393, t2383, -t2992, t2756, t2755, t2716, t2872, t2396, t3037, -t2307, -t2992, -t2383, t2393, t2980, t2710, t2979, t2981; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2436, -t2991, t2990, t2930, t2522, -t2930, 0, t2260, t2201, 0, t2436, t2990, t2991, -t2930, -t2522, t2930, -qJ(6) * t2991, t2162, t2166, -qJ(6) * t2197; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2526, t2984, -t2523, -t2435, t2989, -t2526, -t2260, 0, t2202, 0, t2526, -t2523, -t2984, -t2526, -t2989, -t2435, t2167, t2157, pkin(5) * t2984, -pkin(5) * t2197; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2504, t2987, t2983, -t2504, -t2399, t2514, -t2201, -t2202, 0, 0, t2504, t2983, -t2987, t2514, t2399, -t2504, t2694, t2869, t2588 + t2709, t2870; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2436, t2990, t2991, -t2930, -t2522, t2930, 0, t2174, -t2197, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2504, t2983, -t2987, t2514, t2399, -t2504, -t2174, 0, t2169, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2526, t2523, t2984, t2526, t2989, t2435, t2197, -t2169, 0, 0;];
m_new_reg  = t1;
