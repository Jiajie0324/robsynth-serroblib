% Calculate vector of inverse dynamics joint torques for
% S6RRRRRP12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d5]';
% MDP [35x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRRRRP12_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-10 03:26
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRRRRP12_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1),zeros(35,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP12_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP12_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP12_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP12_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRRP12_invdynJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [35 1]), ...
  'S6RRRRRP12_invdynJ_fixb_mdp_slag_vp: MDP has to be [35x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-10 03:21:50
% EndTime: 2019-03-10 03:23:01
% DurationCPUTime: 55.05s
% Computational Cost: add. (37376->1082), mult. (106243->1429), div. (0->0), fcn. (89759->14), ass. (0->425)
t1301 = sin(pkin(7));
t1318 = cos(qJ(3));
t1192 = t1301 * t1318;
t1157 = qJD(3) * t1192;
t1053 = sin(pkin(6));
t1057 = sin(qJ(2));
t1060 = cos(qJ(2));
t1056 = sin(qJ(3));
t1302 = cos(pkin(7));
t1218 = t1056 * t1302;
t1107 = -t1057 * t1218 + t1060 * t1318;
t985 = t1107 * t1053;
t971 = qJD(1) * t985;
t1119 = t1157 - t971;
t1193 = t1302 * t1318;
t1217 = t1056 * t1301;
t1125 = pkin(2) * t1193 - pkin(10) * t1217;
t1303 = cos(pkin(6));
t1234 = pkin(1) * t1303;
t1046 = t1060 * t1234;
t1038 = qJD(1) * t1046;
t1145 = t1053 * (-pkin(10) * t1302 - pkin(9));
t1122 = t1057 * t1145;
t949 = qJD(1) * t1122 + t1038;
t1045 = t1057 * t1234;
t1087 = t1060 * t1145 - t1045;
t950 = t1087 * qJD(1);
t1213 = t1060 * t1301;
t1120 = pkin(2) * t1057 - pkin(10) * t1213;
t1109 = t1053 * t1120;
t989 = qJD(1) * t1109;
t1352 = t1125 * qJD(3) - t989 * t1217 - t950 * t1218 - t1318 * t949;
t870 = -t1301 * t950 + t1302 * t989;
t1105 = t1056 * t1060 + t1057 * t1193;
t984 = t1105 * t1053;
t970 = qJD(1) * t984;
t1351 = t970 * pkin(3) - t971 * pkin(11) + t870 - (pkin(3) * t1217 - pkin(11) * t1192) * qJD(3);
t1216 = t1057 * t1301;
t1183 = t1053 * t1216;
t1153 = qJD(1) * t1183;
t1350 = pkin(11) * t1153 - t1352;
t1095 = t1105 * qJD(2);
t1214 = t1060 * t1302;
t1106 = t1056 * t1214 + t1057 * t1318;
t1070 = qJD(3) * t1106 + t1095;
t1240 = t1057 * qJDD(1);
t1206 = t1056 * t1240;
t1067 = (qJD(1) * t1070 + t1206) * t1053;
t1211 = t1303 * qJD(1);
t1170 = t1211 + qJD(2);
t1116 = t1301 * t1170;
t1103 = t1056 * t1116;
t1203 = t1303 * qJDD(1);
t1162 = t1203 + qJDD(2);
t1113 = t1162 * t1301;
t1158 = t1060 * t1193;
t1141 = t1053 * t1158;
t1247 = -qJDD(1) * t1141 - t1318 * t1113;
t1084 = qJD(3) * t1103 + t1247;
t824 = t1067 + t1084;
t1349 = -qJDD(4) - t824;
t1055 = sin(qJ(4));
t1059 = cos(qJ(4));
t1000 = t1055 * t1217 - t1059 * t1302;
t1151 = t1055 * t1183;
t1332 = -qJD(1) * t1151 - qJD(4) * t1000 + t1059 * t1119;
t1215 = t1059 * t1301;
t1001 = t1055 * t1302 + t1056 * t1215;
t1150 = t1059 * t1183;
t1278 = qJD(1) * t1150 + qJD(4) * t1001 + t1055 * t1119;
t1244 = pkin(2) * t1218 + pkin(10) * t1192;
t1348 = t1244 * qJD(3) - t1056 * t949 + t1192 * t989 + t1193 * t950;
t1179 = qJD(3) * t1217;
t1144 = t1179 - t970;
t1333 = pkin(3) * t1153 + t1348;
t1251 = t1056 * t1057;
t1224 = t1053 * t1251;
t1191 = qJD(1) * t1224;
t1246 = -qJD(1) * t1141 - t1318 * t1116;
t917 = t1191 + t1246;
t1112 = qJD(4) + t917;
t1261 = qJD(4) * t1059;
t1263 = qJD(4) * t1055;
t993 = pkin(11) * t1302 + t1244;
t1232 = t1301 * pkin(2);
t994 = -pkin(3) * t1192 - pkin(11) * t1217 - t1232;
t1347 = t1055 * t1351 + t1350 * t1059 - t994 * t1261 + t1263 * t993;
t1346 = -pkin(12) * t1144 + t1347;
t1344 = -t1278 * pkin(4) + pkin(12) * t1332 - t1333;
t1054 = sin(qJ(5));
t1058 = cos(qJ(5));
t1061 = cos(qJ(1));
t1212 = t1061 * t1303;
t1317 = sin(qJ(1));
t1002 = t1057 * t1317 - t1060 * t1212;
t1003 = t1057 * t1212 + t1060 * t1317;
t1220 = t1053 * t1301;
t1181 = t1061 * t1220;
t889 = -t1002 * t1218 + t1003 * t1318 - t1056 * t1181;
t1221 = t1053 * t1302;
t953 = t1002 * t1301 - t1061 * t1221;
t831 = t1055 * t953 + t1059 * t889;
t888 = t1002 * t1193 + t1003 * t1056 + t1181 * t1318;
t774 = t1054 * t831 - t888 * t1058;
t775 = t1054 * t888 + t1058 * t831;
t956 = t1054 * t1001 + t1058 * t1192;
t1284 = qJD(5) * t956 - t1054 * t1144 - t1058 * t1332;
t957 = t1058 * t1001 - t1054 * t1192;
t1283 = qJD(5) * t957 + t1054 * t1332 - t1058 * t1144;
t1255 = t1053 * t1060;
t1114 = pkin(9) * t1255 + t1045;
t1180 = t1053 * t1214;
t913 = t1114 * qJD(1) + (qJD(1) * t1180 + t1116) * pkin(10);
t1091 = pkin(2) * t1303 + t1122;
t916 = qJD(2) * pkin(2) + qJD(1) * t1091 + t1038;
t1121 = pkin(2) * t1060 + pkin(10) * t1216;
t1118 = -pkin(1) - t1121;
t978 = t1118 * t1053;
t963 = qJD(1) * t978;
t799 = t963 * t1217 + t916 * t1218 + t1318 * t913;
t1338 = t799 - t1112 * (pkin(4) * t1055 - pkin(12) * t1059);
t1343 = t1338 * t1058;
t1342 = t1350 * t1055 - t1059 * t1351 - t993 * t1261 - t994 * t1263;
t1285 = -pkin(4) * t1144 - t1342;
t1096 = t1106 * t1053;
t919 = qJD(1) * t1096 + t1103;
t1182 = t1053 * t1213;
t1245 = qJD(1) * t1182 - qJD(3);
t1093 = -t1170 * t1302 + t1245;
t962 = t1059 * t1093;
t856 = t1055 * t919 + t962;
t855 = qJD(5) + t856;
t1259 = qJD(5) * t1058;
t1260 = qJD(5) * t1054;
t992 = -pkin(3) * t1302 - t1125;
t884 = t1000 * pkin(4) - t1001 * pkin(12) + t992;
t1277 = t1055 * t994 + t1059 * t993;
t887 = -pkin(12) * t1192 + t1277;
t1336 = t1344 * t1054 + t1058 * t1346 - t884 * t1259 + t1260 * t887;
t1208 = t1053 * t1240;
t1266 = qJD(1) * qJD(2);
t1226 = t1060 * t1266;
t1335 = t1053 * t1226 + t1208;
t1325 = t1055 * t917 + t1263;
t832 = -t1055 * t889 + t1059 * t953;
t1050 = t1053 ^ 2;
t1307 = pkin(1) * t1050;
t1334 = 0.2e1 * t1307;
t1294 = qJ(6) * t1278 + qJD(6) * t1000 - t1336;
t1281 = t1054 * t884 + t1058 * t887;
t1293 = -t1278 * pkin(5) + qJD(5) * t1281 - t1054 * t1346 + t1344 * t1058;
t1291 = pkin(5) * t1283 + qJ(6) * t1284 - t957 * qJD(6) + t1285;
t1090 = -qJDD(1) * t1182 + t1162 * t1302 + qJDD(3);
t1152 = qJD(2) * t1183;
t1073 = qJD(1) * t1152 + t1090;
t1204 = qJDD(1) * t1302;
t1176 = t1060 * t1204;
t1210 = t1302 * qJD(2);
t823 = -t1210 * t1191 + t1335 * t1318 + (t1053 * t1176 + t1113) * t1056 - t917 * qJD(3);
t1202 = t1055 * t823 - t1059 * t1073;
t858 = -t1055 * t1093 + t1059 * t919;
t756 = t858 * qJD(4) + t1202;
t755 = qJDD(5) + t756;
t1081 = -qJDD(4) - t1084;
t1330 = t1067 - t1081;
t1194 = t1303 * t1317;
t1108 = t1061 * t1057 + t1060 * t1194;
t1329 = t1108 * t1302 - t1317 * t1220;
t1328 = (qJDD(2) + 0.2e1 * t1203) * t1053;
t1161 = pkin(4) * t1059 + pkin(12) * t1055 + pkin(3);
t1258 = t1161 * t1058;
t798 = -t1056 * t913 + t1192 * t963 + t1193 * t916;
t840 = pkin(3) * t919 + pkin(11) * t917;
t1288 = t1055 * t840 + t1059 * t798;
t749 = pkin(12) * t919 + t1288;
t1327 = qJD(5) * t1258 + t1054 * t1338 + t1058 * t749;
t1326 = t1059 * t917 + t1261;
t1324 = qJD(3) * t919 + t1053 * (qJD(1) * t1095 + t1206) + qJDD(4) + t1247;
t1004 = -t1057 * t1194 + t1060 * t1061;
t892 = t1004 * t1056 + t1318 * t1329;
t1177 = t1303 * t1301;
t1126 = t1318 * t1177;
t943 = -t1126 - t1141 + t1224;
t1133 = g(1) * t892 + g(2) * t888 + g(3) * t943;
t1074 = -t1108 * t1301 - t1221 * t1317;
t893 = t1004 * t1318 - t1056 * t1329;
t834 = t1055 * t893 + t1059 * t1074;
t1178 = t1303 * t1302;
t1097 = t1182 - t1178;
t1147 = t1056 * t1177;
t944 = t1147 + t1096;
t882 = t944 * t1055 + t1059 * t1097;
t1136 = g(1) * t834 - g(2) * t832 + g(3) * t882;
t1315 = pkin(12) * t755;
t851 = -t1301 * t916 + t1302 * t963;
t771 = t917 * pkin(3) - t919 * pkin(11) + t851;
t781 = -pkin(11) * t1093 + t799;
t733 = -t1055 * t781 + t1059 * t771;
t726 = -pkin(4) * t1112 - t733;
t1099 = t1058 * t1112;
t810 = t1054 * t858 - t1099;
t1100 = t1054 * t1112;
t812 = t1058 * t858 + t1100;
t701 = t810 * pkin(5) - t812 * qJ(6) + t726;
t1323 = t701 * t855 - t1315;
t1308 = t944 * pkin(11);
t948 = t1046 + t1091;
t866 = -t1301 * t948 + t1302 * t978;
t794 = t943 * pkin(3) - t1308 + t866;
t935 = (t1180 + t1177) * pkin(10) + t1114;
t1236 = t978 * t1217 + t948 * t1218 + t1318 * t935;
t801 = -pkin(11) * t1097 + t1236;
t1287 = t1055 * t794 + t1059 * t801;
t742 = pkin(12) * t943 + t1287;
t1086 = -t1056 * t935 + t1192 * t978 + t1193 * t948;
t800 = pkin(3) * t1097 - t1086;
t883 = -t1055 * t1097 + t944 * t1059;
t753 = t882 * pkin(4) - t883 * pkin(12) + t800;
t1165 = t1054 * t753 + t1058 * t742;
t1160 = qJD(3) * t1193;
t1265 = qJD(3) * t1056;
t1039 = qJD(2) * t1046;
t951 = qJD(2) * t1122 + t1039;
t952 = t1087 * qJD(2);
t990 = qJD(2) * t1109;
t1110 = t978 * t1157 + t948 * t1160 + t990 * t1217 + t952 * t1218 - t1265 * t935 + t1318 * t951;
t759 = pkin(11) * t1152 + t1110;
t868 = qJD(3) * t1147 + t1053 * t1070;
t869 = qJD(3) * t1126 + ((t1158 - t1251) * qJD(3) + t1107 * qJD(2)) * t1053;
t871 = -t1301 * t952 + t1302 * t990;
t766 = t868 * pkin(3) - t869 * pkin(11) + t871;
t1131 = t1055 * t766 + t1059 * t759 + t794 * t1261 - t1263 * t801;
t696 = pkin(12) * t868 + t1131;
t1209 = t1302 * qJD(3);
t1185 = t1056 * t1209;
t1231 = t1318 * qJD(3);
t1076 = -t1056 * t951 - t978 * t1179 - t948 * t1185 + t1192 * t990 + t1193 * t952 - t935 * t1231;
t760 = -pkin(3) * t1152 - t1076;
t786 = -qJD(2) * t1150 + qJD(4) * t883 + t869 * t1055;
t787 = qJD(2) * t1151 - qJD(4) * t882 + t869 * t1059;
t711 = t786 * pkin(4) - t787 * pkin(12) + t760;
t1322 = -qJD(5) * t1165 - t1054 * t696 + t1058 * t711;
t1256 = t1053 * t1057;
t1237 = pkin(9) * t1256;
t1196 = qJD(1) * t1237;
t1032 = t1038 * qJD(2);
t1195 = pkin(1) * t1203;
t1239 = t1060 * qJDD(1);
t1207 = t1053 * t1239;
t1222 = pkin(9) * t1207 + t1057 * t1195 + t1032;
t1104 = -qJD(2) * t1196 + t1222;
t1186 = qJD(1) * t1210;
t846 = (t1113 + (-t1057 * t1186 + t1176) * t1053) * pkin(10) + t1104;
t1115 = -t1045 * t1266 + t1060 * t1195;
t1124 = -t1226 - t1240;
t1117 = t1124 * pkin(9);
t852 = t1162 * pkin(2) + ((-t1057 * t1204 - t1060 * t1186) * pkin(10) + t1117) * t1053 + t1115;
t895 = (qJDD(1) * t1118 + t1120 * t1266) * t1053;
t1146 = t1056 * t846 + t963 * t1179 + t916 * t1185 - t895 * t1192 - t852 * t1193 + t913 * t1231;
t721 = -pkin(3) * t1073 + t1146;
t1321 = -t721 + t1133;
t1320 = t812 ^ 2;
t1319 = t855 ^ 2;
t1062 = qJD(1) ^ 2;
t1316 = pkin(5) * t755;
t1306 = pkin(9) * t1053;
t1305 = pkin(11) * t1059;
t1304 = pkin(12) * qJD(5);
t1300 = qJ(6) * t755;
t734 = t1055 * t771 + t1059 * t781;
t727 = pkin(12) * t1112 + t734;
t780 = pkin(3) * t1093 - t798;
t739 = t856 * pkin(4) - t858 * pkin(12) + t780;
t699 = t1054 * t739 + t1058 * t727;
t695 = qJ(6) * t855 + t699;
t1299 = t695 * t855;
t1298 = t699 * t855;
t1297 = t810 * t855;
t1296 = t812 * t810;
t1295 = t812 * t855;
t783 = pkin(4) * t858 + pkin(12) * t856;
t1292 = t1054 * t783 + t1058 * t733;
t1252 = t1055 * t1058;
t1253 = t1054 * t1059;
t1282 = -qJD(6) * t1059 + (-qJD(4) * t1252 - qJD(5) * t1253) * pkin(11) - t1327 + t1325 * qJ(6);
t1017 = t1054 * t1161;
t1249 = t1058 * t1059;
t1254 = t1054 * t1055;
t1280 = -t1054 * t749 - qJD(5) * t1017 + (-qJD(4) * t1254 + qJD(5) * t1249) * pkin(11) + t1343 - t1325 * pkin(5);
t1172 = pkin(5) * t1054 - qJ(6) * t1058;
t1148 = pkin(11) + t1172;
t1173 = pkin(5) * t1058 + qJ(6) * t1054;
t1201 = -t1055 * t798 + t1059 * t840;
t748 = -pkin(4) * t919 - t1201;
t836 = -t1058 * t919 - t1253 * t917;
t837 = t1054 * t919 - t1249 * t917;
t1279 = -pkin(5) * t836 + qJ(6) * t837 - t748 + (qJD(5) * t1173 - qJD(6) * t1058) * t1055 + t1148 * t1261;
t1276 = -qJD(6) * t1054 + t1172 * t855 - t734;
t1270 = t1059 * t823;
t1069 = t1055 * t1073 + t1270;
t1066 = -qJD(4) * t856 + t1069;
t713 = -qJD(5) * t1099 + t1054 * t1349 - t1058 * t1066 + t1260 * t858;
t1275 = t1054 * t713;
t1274 = t1054 * t755;
t1271 = t1058 * t755;
t698 = -t1054 * t727 + t1058 * t739;
t1267 = qJD(6) - t698;
t1264 = qJD(4) * t1054;
t1262 = qJD(4) * t1058;
t1257 = t1050 * t1062;
t1243 = pkin(11) * t1249 - t1017;
t1051 = t1057 ^ 2;
t1242 = -t1060 ^ 2 + t1051;
t1238 = t1057 * t1307;
t1233 = pkin(10) * t1301;
t1230 = t855 * t1264;
t1229 = t855 * t1262;
t1228 = t855 * t1260;
t1227 = qJD(2) * t1256;
t1225 = t1060 * t1257;
t1223 = qJD(4) + t1246;
t1219 = t1055 * t1301;
t1200 = -t1055 * t801 + t1059 * t794;
t1198 = -t1055 * t993 + t1059 * t994;
t1197 = t1058 * t855;
t1111 = -t963 * t1157 - t916 * t1160 - t895 * t1217 - t852 * t1218 + t1265 * t913 - t1318 * t846;
t720 = pkin(11) * t1073 - t1111;
t788 = -t1301 * t852 + t1302 * t895;
t728 = t824 * pkin(3) - t823 * pkin(11) + t788;
t1132 = -t1055 * t728 - t1059 * t720 - t771 * t1261 + t1263 * t781;
t686 = pkin(12) * t1330 - t1132;
t692 = t756 * pkin(4) - pkin(12) * t1066 + t721;
t679 = -t1054 * t686 + t1058 * t692 - t727 * t1259 - t739 * t1260;
t689 = -t1055 * t720 + t1059 * t728 - t781 * t1261 - t771 * t1263;
t835 = -t1055 * t1074 + t893 * t1059;
t778 = t1054 * t835 - t892 * t1058;
t1189 = -g(1) * t774 + g(2) * t778;
t779 = t1054 * t892 + t1058 * t835;
t1188 = g(1) * t775 - g(2) * t779;
t1187 = g(1) * t832 + g(2) * t834;
t1184 = t1053 * t1062 * t1303;
t828 = t1054 * t883 - t943 * t1058;
t829 = t1054 * t943 + t1058 * t883;
t1174 = -pkin(5) * t828 + qJ(6) * t829;
t886 = pkin(4) * t1192 - t1198;
t1169 = 0.2e1 * t1211 + qJD(2);
t694 = -pkin(5) * t855 + t1267;
t1167 = -t1054 * t695 + t1058 * t694;
t1164 = -t1054 * t742 + t1058 * t753;
t1163 = -t1054 * t887 + t1058 * t884;
t1155 = -t1055 * t759 + t1059 * t766 - t801 * t1261 - t794 * t1263;
t1149 = pkin(4) + t1173;
t741 = -pkin(4) * t943 - t1200;
t1143 = t726 * t855 - t1315;
t1142 = -t1259 * t855 - t1274;
t802 = -t889 * t1058 - t1253 * t888;
t804 = -t893 * t1058 - t1253 * t892;
t853 = -t944 * t1058 - t1253 * t943;
t1140 = g(1) * t804 + g(2) * t802 + g(3) * t853;
t803 = t1054 * t889 - t1249 * t888;
t805 = t1054 * t893 - t1249 * t892;
t854 = t1054 * t944 - t1249 * t943;
t1139 = -g(1) * t805 - g(2) * t803 - g(3) * t854;
t910 = -t1002 * t1318 - t1003 * t1218;
t860 = t1003 * t1219 + t910 * t1059;
t909 = -t1002 * t1056 + t1003 * t1193;
t806 = t1054 * t860 - t909 * t1058;
t912 = -t1004 * t1218 - t1108 * t1318;
t862 = t1004 * t1219 + t912 * t1059;
t911 = t1004 * t1193 - t1056 * t1108;
t808 = t1054 * t862 - t911 * t1058;
t921 = t985 * t1059 + t1151;
t863 = t1054 * t921 - t984 * t1058;
t1138 = -g(1) * t808 - g(2) * t806 - g(3) * t863;
t807 = t1054 * t909 + t1058 * t860;
t809 = t1054 * t911 + t1058 * t862;
t864 = t1054 * t984 + t1058 * t921;
t1137 = -g(1) * t809 - g(2) * t807 - g(3) * t864;
t1135 = -g(1) * t835 - g(2) * t831 - g(3) * t883;
t859 = -t1003 * t1215 + t910 * t1055;
t861 = -t1004 * t1215 + t912 * t1055;
t920 = t1055 * t985 - t1150;
t1134 = -g(1) * t861 - g(2) * t859 - g(3) * t920;
t678 = t1054 * t692 + t1058 * t686 + t739 * t1259 - t1260 * t727;
t1129 = t1054 * t711 + t1058 * t696 + t753 * t1259 - t1260 * t742;
t1127 = t1060 * (t1209 + qJD(2));
t1123 = t1162 * MDP(8);
t697 = -pkin(4) * t868 - t1155;
t1102 = qJD(2) * t1193 + t1231;
t1101 = qJD(4) * t1112;
t1098 = -t1304 * t855 + t1136;
t1094 = g(1) * t778 + g(2) * t774 + g(3) * t828 + t679;
t687 = -pkin(4) * t1330 - t689;
t714 = qJD(5) * t1100 + t1054 * t1066 + t1058 * t1349 + t1259 * t858;
t680 = t714 * pkin(5) + t713 * qJ(6) - t812 * qJD(6) + t687;
t1092 = t1098 - t680;
t1089 = t1057 * t1102;
t1083 = -g(1) * t779 - g(2) * t775 - g(3) * t829 + t678;
t1082 = t1093 * t1301;
t1080 = t701 * t812 + qJDD(6) - t1094;
t1079 = t1170 * t1114;
t1078 = qJD(3) * t1082;
t1072 = t1112 * t917 + t1101;
t1071 = t1073 * t1301;
t995 = t1148 * t1055;
t966 = t1258 + (pkin(11) * t1054 + pkin(5)) * t1059;
t965 = -qJ(6) * t1059 + t1243;
t814 = pkin(5) * t956 - qJ(6) * t957 + t886;
t785 = -pkin(5) * t1000 - t1163;
t784 = qJ(6) * t1000 + t1281;
t752 = pkin(5) * t812 + qJ(6) * t810;
t736 = -qJD(5) * t828 + t1054 * t868 + t1058 * t787;
t735 = qJD(5) * t829 + t1054 * t787 - t868 * t1058;
t712 = -t1174 + t741;
t705 = -pkin(5) * t858 + t1054 * t733 - t1058 * t783;
t704 = qJ(6) * t858 + t1292;
t703 = -pkin(5) * t882 - t1164;
t702 = qJ(6) * t882 + t1165;
t700 = -t713 + t1297;
t683 = pkin(5) * t735 - qJ(6) * t736 - qJD(6) * t829 + t697;
t682 = -pkin(5) * t786 - t1322;
t681 = qJ(6) * t786 + qJD(6) * t882 + t1129;
t677 = qJDD(6) - t679 - t1316;
t676 = qJD(6) * t855 + t1300 + t678;
t1 = [(t676 * t702 + t695 * t681 + t680 * t712 + t701 * t683 + t677 * t703 + t694 * t682 - g(1) * (-pkin(1) * t1317 - t1003 * pkin(2) - pkin(3) * t889 - pkin(4) * t831 - pkin(5) * t775 - pkin(11) * t888 + t832 * pkin(12) - qJ(6) * t774 + t1061 * t1306) - g(2) * (t1061 * pkin(1) + t1004 * pkin(2) + t893 * pkin(3) + t835 * pkin(4) + t779 * pkin(5) + t892 * pkin(11) + t834 * pkin(12) + t778 * qJ(6) + t1306 * t1317) + (g(1) * t953 + g(2) * t1074) * pkin(10)) * MDP(35) + (-t1073 * t1097 - t1082 * t1227) * MDP(15) + (t1239 * t1334 - 0.2e1 * t1238 * t1266 - qJD(2) * t1079 + (t1046 - t1237) * t1162 + (t1053 * t1117 + t1115) * t1303 + g(1) * t1003 - g(2) * t1004) * MDP(9) + (-(-pkin(9) * t1227 + t1039) * t1170 - t1114 * t1162 - t1104 * t1303 - g(1) * t1002 + g(2) * t1108 + t1124 * t1334) * MDP(10) + (0.2e1 * (t1057 * t1239 - t1242 * t1266) * MDP(5) + (qJDD(1) * t1051 + 0.2e1 * t1057 * t1226) * MDP(4)) * t1050 + (-g(1) * t888 + g(2) * t892 - t1073 * t1236 + t1093 * t1110 - t1097 * t1111 - t1152 * t799 + t788 * t944 + t866 * t823 + t851 * t869 + t871 * t919) * MDP(17) + (g(1) * t889 - g(2) * t893 + t1073 * t1086 - t1076 * t1093 + t1097 * t1146 + t1152 * t798 + t788 * t943 + t866 * t824 + t851 * t868 + t871 * t917) * MDP(16) + (g(1) * t831 - g(2) * t835 + t1112 * t1155 - t1200 * t1349 + t689 * t943 + t721 * t882 + t733 * t868 + t800 * t756 + t760 * t856 + t780 * t786) * MDP(23) + (t1164 * t755 + t1322 * t855 + t679 * t882 + t687 * t828 + t697 * t810 + t698 * t786 + t741 * t714 + t726 * t735 + t1188) * MDP(30) + (-t1073 * t943 + t1093 * t868 + t1097 * t824 - t1152 * t917) * MDP(14) + (t1073 * t944 - t1093 * t869 - t1097 * t823 + t1152 * t919) * MDP(13) + (t787 * t1223 - t883 * t1081 + (-qJD(4) * t962 + t1055 * t1090 - t1263 * t919 + t1270) * t943 + t858 * t868 + (t883 * t1206 + (t883 * t1056 * t1127 + (qJD(2) * t1219 * t943 + t787 * t1056 + t1102 * t883) * t1057) * qJD(1)) * t1053) * MDP(20) + (t1066 * t883 + t858 * t787) * MDP(18) + (-t1066 * t882 - t883 * t756 - t858 * t786 - t787 * t856) * MDP(19) + (-t713 * t829 + t736 * t812) * MDP(25) + (t713 * t828 - t714 * t829 - t735 * t812 - t736 * t810) * MDP(26) + qJDD(1) * MDP(1) + (t823 * t944 + t869 * t919) * MDP(11) + (-t823 * t943 - t824 * t944 - t868 * t919 - t869 * t917) * MDP(12) + (g(1) * t1317 - g(2) * t1061) * MDP(2) + (g(1) * t1061 + g(2) * t1317) * MDP(3) + t1303 * t1123 + (-t1129 * t855 - t1165 * t755 - t678 * t882 + t687 * t829 + t697 * t812 - t699 * t786 - t741 * t713 + t726 * t736 + t1189) * MDP(31) + (t1066 * t800 - t1112 * t1131 + t1132 * t943 + t1287 * t1349 + t721 * t883 - t734 * t868 + t760 * t858 + t780 * t787 + t1187) * MDP(24) + (-t786 * t1223 + t882 * t1081 - t756 * t943 - t856 * t868 + (-t882 * t1206 + (-t882 * t1089 + (-t786 * t1057 - t1127 * t882) * t1056) * qJD(1)) * t1053) * MDP(21) + (-t1081 * t943 + t1223 * t868 + (t943 * t1206 + (t943 * t1089 + (t1057 * t868 + t1127 * t943) * t1056) * qJD(1)) * t1053) * MDP(22) + (-t676 * t828 + t677 * t829 - t681 * t810 + t682 * t812 + t694 * t736 - t695 * t735 - t702 * t714 - t703 * t713 - t1187) * MDP(33) + (-t677 * t882 + t680 * t828 - t682 * t855 + t683 * t810 - t694 * t786 + t701 * t735 - t703 * t755 + t712 * t714 + t1188) * MDP(32) + (t676 * t882 - t680 * t829 + t681 * t855 - t683 * t812 + t695 * t786 - t701 * t736 + t702 * t755 + t712 * t713 - t1189) * MDP(34) + (t1060 * t1328 - t1169 * t1227) * MDP(7) + (qJD(2) * t1169 * t1255 + t1057 * t1328) * MDP(6) + (t755 * t882 + t786 * t855) * MDP(29) + (-t714 * t882 - t735 * t855 - t755 * t828 - t786 * t810) * MDP(28) + (-t713 * t882 + t736 * t855 + t755 * t829 + t786 * t812) * MDP(27); (g(1) * t911 + g(2) * t909 + g(3) * t984 - t1073 * t1244 + t1093 * t1352 + t1302 * t1111 + t1119 * t851 + t1153 * t799 + t1217 * t788 - t1232 * t823 - t870 * t919) * MDP(17) + (t1163 * t755 + t679 * t1000 + t886 * t714 + t687 * t956 + ((-qJD(5) * t887 - t1344) * t1058 + (-qJD(5) * t884 + t1346) * t1054) * t855 + t1285 * t810 + t1283 * t726 + t1278 * t698 + t1137) * MDP(30) + (t1066 * t1001 + t1332 * t858) * MDP(18) + (-t1000 * t1066 - t1001 * t756 - t1278 * t858 - t1332 * t856) * MDP(19) + (t676 * t784 + t680 * t814 + t677 * t785 - g(1) * (-pkin(2) * t1108 + t912 * pkin(3) + t862 * pkin(4) + t809 * pkin(5) + t911 * pkin(11) + t861 * pkin(12) + t808 * qJ(6) + t1004 * t1233) - g(2) * (-t1002 * pkin(2) + t910 * pkin(3) + t860 * pkin(4) + t807 * pkin(5) + t909 * pkin(11) + t859 * pkin(12) + t806 * qJ(6) + t1003 * t1233) - g(3) * (t985 * pkin(3) + t921 * pkin(4) + t864 * pkin(5) + t984 * pkin(11) + t920 * pkin(12) + t863 * qJ(6) + t1053 * t1121) + t1291 * t701 + t1294 * t695 + t1293 * t694) * MDP(35) + (t1112 * t1144 + t1192 * t1349) * MDP(22) + (-t1001 * t1349 - t1066 * t1192 + t1112 * t1332 + t1144 * t858) * MDP(20) + (-g(1) * t862 - g(2) * t860 - g(3) * t921 + t721 * t1000 + t1112 * t1342 + t1144 * t733 - t1192 * t689 - t1198 * t1349 + t1278 * t780 + t1333 * t856 + t992 * t756) * MDP(23) + (t721 * t1001 + t1066 * t992 + t1112 * t1347 - t1192 * t1132 - t1144 * t734 + t1277 * t1349 + t1332 * t780 + t1333 * t858 - t1134) * MDP(24) + (t1000 * t1081 + t756 * t1192 - t1144 * t856 + (-t1000 * t1206 + (-t1000 * t1089 + (-t1000 * t1127 - t1057 * t1278) * t1056) * qJD(1)) * t1053 - t1278 * t1223) * MDP(21) + t1123 + t1242 * MDP(5) * t1257 + (-pkin(9) * t1335 + g(1) * t1108 + g(2) * t1002 - g(3) * t1255 + qJD(1) * t1079 + t1062 * t1238 + t1115) * MDP(9) - t1057 * MDP(4) * t1225 + (-t678 * t1000 - t1278 * t699 - t1281 * t755 - t1284 * t726 + t1285 * t812 + t1336 * t855 + t687 * t957 - t886 * t713 - t1138) * MDP(31) + (t1056 * t1071 - t1078 * t1318 + t1093 * t971 - t1153 * t919 + t1302 * t823) * MDP(13) + (t1056 * t1078 + t1071 * t1318 - t1093 * t970 + t1153 * t917 - t1302 * t824) * MDP(14) + (t1090 * t1302 - (qJD(1) * t1178 - t1245) * t1153) * MDP(15) + (-t1283 * t695 - t1284 * t694 + t1293 * t812 - t1294 * t810 - t676 * t956 + t677 * t957 - t713 * t785 - t714 * t784 + t1134) * MDP(33) + (-t1000 * t677 - t1278 * t694 + t1283 * t701 + t1291 * t810 - t1293 * t855 + t680 * t956 + t714 * t814 - t755 * t785 + t1137) * MDP(32) + (t1000 * t676 + t1278 * t695 + t1284 * t701 - t1291 * t812 + t1294 * t855 - t680 * t957 + t713 * t814 + t755 * t784 + t1138) * MDP(34) + (-t1000 * t714 - t1278 * t810 - t1283 * t855 - t755 * t956) * MDP(28) + (-t1283 * t812 + t1284 * t810 + t713 * t956 - t714 * t957) * MDP(26) + (-t1284 * t812 - t713 * t957) * MDP(25) + (-t1000 * t713 + t1278 * t812 - t1284 * t855 + t755 * t957) * MDP(27) + (t1000 * t755 + t1278 * t855) * MDP(29) + (pkin(1) * t1225 + (t1038 - t1196) * t1211 + g(1) * t1004 + g(2) * t1003 + g(3) * t1256 + t1032 - t1222) * MDP(10) + (t823 * t1192 - t824 * t1217 + t971 * t917 + t919 * t970 + (-t1192 * t917 - t1217 * t919) * qJD(3)) * MDP(12) + (t1119 * t919 + t1217 * t823) * MDP(11) + (-t1060 * t1184 + t1208) * MDP(6) + (t1057 * t1184 + t1207) * MDP(7) + (-g(1) * t912 - g(2) * t910 - g(3) * t985 + t1073 * t1125 + t1093 * t1348 + t1144 * t851 - t1302 * t1146 - t1153 * t798 - t1192 * t788 - t1232 * t824 - t870 * t917) * MDP(16); (-t755 * t1258 - t726 * t836 - t748 * t810 + (-t1343 + (qJD(5) * t1161 + t749) * t1054) * t855 + (t726 * t1264 - t679 + (qJD(4) * t810 + t1142) * pkin(11)) * t1059 + (t726 * t1259 + t687 * t1054 + t1112 * t698 + (t714 + t1230) * pkin(11)) * t1055 + t1139) * MDP(30) + (-t1093 * t919 - t824) * MDP(14) + (-t1093 * t799 - t851 * t919 + t1133 - t1146) * MDP(16) + (pkin(11) * t1055 * t1349 - pkin(3) * t756 + t1059 * t1321 - t1101 * t1305 - t1112 * t1201 + t1325 * t780 - t733 * t919 - t799 * t856) * MDP(23) + (-pkin(3) * t1066 + t1349 * t1305 + t734 * t919 - t799 * t858 + t1326 * t780 + (pkin(11) * t1263 + t1288) * t1112 - t1321 * t1055) * MDP(24) + t919 * t917 * MDP(11) + (t676 * t965 + t680 * t995 + t677 * t966 - g(1) * (pkin(5) * t805 + pkin(11) * t893 + qJ(6) * t804) - g(2) * (pkin(5) * t803 + pkin(11) * t889 + qJ(6) * t802) - g(3) * (pkin(5) * t854 + qJ(6) * t853 + t1308) + t1279 * t701 + t1282 * t695 + t1280 * t694 + t1133 * t1161) * MDP(35) + (-t1055 * t1072 + t1059 * t1324 + t856 * t919) * MDP(21) + (t1055 * t1324 + t1059 * t1072 - t858 * t919) * MDP(20) + (-t1093 * t917 + t823) * MDP(13) + (g(1) * t893 + g(2) * t889 + g(3) * t944 - t1093 * t798 + t851 * t917 + t1111) * MDP(17) + (-t917 ^ 2 + t919 ^ 2) * MDP(12) + (-t701 * t836 + t714 * t995 - t755 * t966 - t1280 * t855 + t1279 * t810 + (t1264 * t701 + t677) * t1059 + (t1054 * t680 - t1112 * t694 + t1259 * t701) * t1055 + t1139) * MDP(32) + (t701 * t837 + t713 * t995 + t755 * t965 + t1282 * t855 - t1279 * t812 + (-t1262 * t701 - t676) * t1059 + (-t1058 * t680 + t1112 * t695 + t1260 * t701) * t1055 - t1140) * MDP(34) + (-t694 * t837 + t695 * t836 - t713 * t966 - t714 * t965 + t1280 * t812 - t1282 * t810 + t1167 * t1261 + (-t1054 * t676 + t1058 * t677 + (-t1054 * t694 - t1058 * t695) * qJD(5) + t1133) * t1055) * MDP(33) + (t810 * t837 + t812 * t836 + (-t1054 * t812 - t1058 * t810) * t1261 + (t1275 - t1058 * t714 + (t1054 * t810 - t1058 * t812) * qJD(5)) * t1055) * MDP(26) + (-t837 * t855 + (t713 + t1229) * t1059 + (t1112 * t812 - t1228 + t1271) * t1055) * MDP(27) + (t1055 * t1112 * t855 - t1059 * t755) * MDP(29) + ((-qJD(4) * t919 + t1073) * t1055 ^ 2 + ((-qJD(4) * t1093 + t823) * t1055 + t1112 * t858) * t1059) * MDP(18) + (t836 * t855 + (t714 - t1230) * t1059 + (-t1112 * t810 + t1142) * t1055) * MDP(28) + (-t713 * t1252 + (qJD(4) * t1249 - qJD(5) * t1254 - t837) * t812) * MDP(25) - t1112 * t919 * MDP(22) + t1073 * MDP(15) + (-t1055 * t756 + t1059 * t1066 - t1325 * t858 - t1326 * t856) * MDP(19) + (-t1243 * t755 - t748 * t812 - t726 * t837 + t1327 * t855 + (t726 * t1262 + t678 + (qJD(4) * t812 + t1228) * pkin(11)) * t1059 + (-t726 * t1260 + t687 * t1058 - t1112 * t699 + (-t713 + t1229) * pkin(11)) * t1055 + t1140) * MDP(31); -t856 ^ 2 * MDP(19) + (t917 * t856 + t1069) * MDP(20) - t1202 * MDP(21) - t1349 * MDP(22) + (t1112 * t734 + t1136 + t689) * MDP(23) + (t1112 * t733 + t780 * t856 + t1132 - t1135) * MDP(24) + (t1197 * t812 - t1275) * MDP(25) + ((-t713 - t1297) * t1058 + (-t714 - t1295) * t1054) * MDP(26) + (t1197 * t855 + t1274) * MDP(27) + (-t1054 * t1319 + t1271) * MDP(28) + (-pkin(4) * t714 - t734 * t810 + (t733 * t855 + t1143) * t1054 + (-t687 + (-t783 - t1304) * t855 + t1136) * t1058) * MDP(30) + (pkin(4) * t713 + t1292 * t855 - t734 * t812 + t1143 * t1058 + (-t1098 + t687) * t1054) * MDP(31) + (t1054 * t1323 + t1092 * t1058 - t1149 * t714 + t1276 * t810 + t705 * t855) * MDP(32) + (t704 * t810 - t705 * t812 + (t676 + t855 * t694 + (qJD(5) * t812 - t714) * pkin(12)) * t1058 + (t677 - t1299 + (qJD(5) * t810 - t713) * pkin(12)) * t1054 + t1135) * MDP(33) + (t1092 * t1054 - t1058 * t1323 - t1149 * t713 - t1276 * t812 - t704 * t855) * MDP(34) + (-t694 * t705 - t695 * t704 + t1276 * t701 + (qJD(5) * t1167 + t677 * t1054 + t676 * t1058 + t1135) * pkin(12) + (-t680 + t1136) * t1149) * MDP(35) + (MDP(18) * t856 + t858 * MDP(19) + MDP(21) * t917 - t780 * MDP(23) - t812 * MDP(27) + t810 * MDP(28) - t855 * MDP(29) - t698 * MDP(30) + t699 * MDP(31) + t694 * MDP(32) - t695 * MDP(34)) * t858; MDP(25) * t1296 + (-t810 ^ 2 + t1320) * MDP(26) + t700 * MDP(27) + (-t714 + t1295) * MDP(28) + t755 * MDP(29) + (-t726 * t812 + t1094 + t1298) * MDP(30) + (t698 * t855 + t726 * t810 - t1083) * MDP(31) + (-t752 * t810 - t1080 + t1298 + 0.2e1 * t1316) * MDP(32) + (pkin(5) * t713 - qJ(6) * t714 + (t695 - t699) * t812 + (t694 - t1267) * t810) * MDP(33) + (0.2e1 * t1300 - t701 * t810 + t752 * t812 + (0.2e1 * qJD(6) - t698) * t855 + t1083) * MDP(34) + (t676 * qJ(6) - t677 * pkin(5) - t701 * t752 - t694 * t699 - g(1) * (-pkin(5) * t778 + qJ(6) * t779) - g(2) * (-pkin(5) * t774 + qJ(6) * t775) - g(3) * t1174 + t1267 * t695) * MDP(35); (t1296 - t755) * MDP(32) + t700 * MDP(33) + (-t1319 - t1320) * MDP(34) + (t1080 - t1299 - t1316) * MDP(35);];
tau  = t1;
