% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRRRRP12
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d2,d3,d4,d5]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-08 07:55
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRRRRP12_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRRP12_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRRRRP12_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRRRRP12_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRRRRP12_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RRRRRP12_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-08 07:55:05
% EndTime: 2019-05-08 07:55:34
% DurationCPUTime: 30.63s
% Computational Cost: add. (208123->405), mult. (514648->607), div. (0->0), fcn. (436697->14), ass. (0->328)
t3440 = cos(pkin(6));
t3432 = qJD(1) * t3440 + qJD(2);
t3444 = sin(qJ(2));
t3448 = cos(qJ(3));
t3449 = cos(qJ(2));
t3439 = cos(pkin(7));
t3443 = sin(qJ(3));
t3538 = t3439 * t3443;
t3437 = sin(pkin(7));
t3541 = t3437 * t3443;
t3438 = sin(pkin(6));
t3553 = qJD(1) * t3438;
t3400 = t3432 * t3541 + (t3444 * t3448 + t3449 * t3538) * t3553;
t3442 = sin(qJ(4));
t3447 = cos(qJ(4));
t3552 = qJD(1) * t3449;
t3528 = t3438 * t3552;
t3523 = t3432 * t3439 - t3437 * t3528;
t3521 = qJD(3) + t3523;
t3389 = t3447 * t3400 + t3442 * t3521;
t3539 = t3438 * t3444;
t3529 = qJD(1) * t3539;
t3398 = t3443 * t3529 + (-t3432 * t3437 - t3439 * t3528) * t3448;
t3533 = qJDD(1) * t3438;
t3416 = -qJD(2) * t3529 + t3449 * t3533;
t3431 = t3440 * qJDD(1) + qJDD(2);
t3532 = qJDD(1) * t3444;
t3473 = (qJD(2) * t3552 + t3532) * t3438;
t3374 = -t3398 * qJD(3) + t3416 * t3538 + t3431 * t3541 + t3448 * t3473;
t3519 = -t3416 * t3437 + t3439 * t3431 + qJDD(3);
t3524 = t3442 * t3374 - t3447 * t3519;
t3475 = qJD(4) * t3389 + qJDD(5) + t3524;
t3396 = qJD(4) + t3398;
t3441 = sin(qJ(5));
t3446 = cos(qJ(5));
t3364 = t3389 * t3441 - t3396 * t3446;
t3366 = t3389 * t3446 + t3396 * t3441;
t3547 = t3364 * t3366;
t3304 = t3475 + t3547;
t3362 = t3366 ^ 2;
t3387 = t3400 * t3442 - t3447 * t3521;
t3386 = qJD(5) + t3387;
t3562 = t3386 ^ 2;
t3567 = -t3362 - t3562;
t3278 = t3304 * t3446 + t3441 * t3567;
t3469 = -t3447 * t3374 - t3442 * t3519;
t3337 = -t3387 * qJD(4) - t3469;
t3481 = t3416 * t3439 + t3431 * t3437;
t3463 = -t3443 * t3473 + t3448 * t3481;
t3462 = -t3400 * qJD(3) + t3463;
t3461 = qJDD(4) - t3462;
t3458 = -t3364 * qJD(5) + t3446 * t3337 + t3441 * t3461;
t3546 = t3364 * t3386;
t3457 = t3458 - t3546;
t3245 = t3278 * t3442 + t3447 * t3457;
t3247 = t3278 * t3447 - t3442 * t3457;
t3276 = t3304 * t3441 - t3446 * t3567;
t3502 = t3247 * t3443 - t3276 * t3448;
t3205 = t3439 * t3245 + t3437 * t3502;
t3207 = -t3437 * t3245 + t3439 * t3502;
t3229 = t3247 * t3448 + t3276 * t3443;
t3510 = t3207 * t3449 + t3229 * t3444;
t3177 = -t3438 * t3205 + t3440 * t3510;
t3196 = t3207 * t3444 - t3229 * t3449;
t3445 = sin(qJ(1));
t3450 = cos(qJ(1));
t3612 = t3177 * t3445 + t3196 * t3450;
t3611 = t3177 * t3450 - t3196 * t3445;
t3175 = t3440 * t3205 + t3438 * t3510;
t3292 = t3458 + t3546;
t3526 = t3441 * t3337 - t3446 * t3461;
t3474 = (-qJD(5) + t3386) * t3366 - t3526;
t3564 = -t3292 * t3446 + t3441 * t3474;
t3334 = t3364 ^ 2;
t3320 = t3362 + t3334;
t3563 = t3292 * t3441 + t3446 * t3474;
t3578 = -t3320 * t3442 + t3447 * t3563;
t3583 = t3443 * t3564 + t3448 * t3578;
t3577 = t3320 * t3447 + t3442 * t3563;
t3584 = t3443 * t3578 - t3448 * t3564;
t3589 = -t3437 * t3577 + t3439 * t3584;
t3594 = -t3444 * t3589 + t3449 * t3583;
t3590 = t3437 * t3584 + t3439 * t3577;
t3593 = t3444 * t3583 + t3449 * t3589;
t3599 = -t3438 * t3590 + t3440 * t3593;
t3604 = -t3445 * t3599 + t3450 * t3594;
t3603 = t3445 * t3594 + t3450 * t3599;
t3600 = t3438 * t3593 + t3440 * t3590;
t3305 = t3475 - t3547;
t3565 = -t3562 - t3334;
t3570 = -t3305 * t3441 + t3446 * t3565;
t3582 = t3442 * t3570;
t3571 = t3305 * t3446 + t3441 * t3565;
t3581 = t3443 * t3571;
t3580 = t3447 * t3570;
t3579 = t3448 * t3571;
t3480 = t3521 * t3398;
t3348 = t3374 - t3480;
t3428 = t3445 * g(1) - t3450 * g(2);
t3476 = qJDD(1) * pkin(1) + t3428;
t3429 = -g(1) * t3450 - g(2) * t3445;
t3451 = qJD(1) ^ 2;
t3478 = -pkin(1) * t3451 + t3429;
t3556 = t3432 ^ 2;
t3460 = pkin(10) * t3437 * t3556 + t3440 * t3449 * t3476 + t3431 * pkin(2) - t3444 * t3478;
t3537 = t3449 * t3451;
t3466 = -t3449 * g(3) + (t3440 * t3537 - t3532) * pkin(9);
t3555 = pkin(10) * t3444;
t3472 = (-pkin(2) * t3449 - t3437 * t3555) * t3553;
t3470 = t3444 * t3472;
t3527 = (-qJD(2) + t3432) * t3449;
t3530 = t3439 * t3555;
t3454 = (-qJDD(1) * t3530 + (pkin(10) * t3439 * t3527 - t3470) * qJD(1) + t3466) * t3438 + t3460;
t3468 = t3451 * t3438 * pkin(9) + t3476;
t3435 = t3444 ^ 2;
t3436 = t3449 ^ 2;
t3566 = -t3435 - t3436;
t3477 = t3566 * t3439 * t3553;
t3554 = t3440 * g(3);
t3522 = -t3416 * pkin(2) - t3554;
t3531 = pkin(2) * t3432 * t3444;
t3536 = qJD(2) + t3432;
t3540 = t3437 * t3449;
t3456 = (qJD(1) * t3531 + (-t3437 * t3532 + (-t3536 * t3540 + t3477) * qJD(1)) * pkin(10) - t3468) * t3438 + t3522;
t3572 = t3437 * t3456 + t3439 * t3454;
t3518 = t3521 ^ 2;
t3561 = t3387 ^ 2;
t3560 = t3389 ^ 2;
t3559 = t3396 ^ 2;
t3558 = t3398 ^ 2;
t3557 = t3400 ^ 2;
t3545 = t3389 * t3387;
t3544 = t3398 * t3400;
t3434 = t3438 ^ 2;
t3542 = t3434 * t3451;
t3535 = qJD(4) - t3396;
t3465 = t3440 * t3468;
t3467 = pkin(9) * t3533 + t3478;
t3534 = t3444 * t3465 + t3449 * t3467;
t3356 = -t3556 * pkin(2) + t3481 * pkin(10) + (-t3444 * g(3) + (t3432 * t3530 + t3449 * t3472) * qJD(1)) * t3438 + t3534;
t3310 = t3448 * t3356 + t3443 * t3572;
t3382 = pkin(3) * t3398 - pkin(11) * t3400;
t3298 = -pkin(3) * t3518 + pkin(11) * t3519 - t3398 * t3382 + t3310;
t3452 = -t3437 * t3454 + t3439 * t3456 - t3348 * pkin(11) + (t3400 * t3521 - t3462) * pkin(3);
t3262 = t3447 * t3298 + t3442 * t3452;
t3357 = pkin(4) * t3387 - pkin(12) * t3389;
t3242 = -pkin(4) * t3559 + pkin(12) * t3461 - t3387 * t3357 + t3262;
t3520 = t3443 * t3356 - t3448 * t3572;
t3297 = -t3519 * pkin(3) - t3518 * pkin(11) + t3400 * t3382 + t3520;
t3322 = (qJD(4) + t3396) * t3389 + t3524;
t3525 = t3396 * t3387 - t3337;
t3459 = pkin(4) * t3322 + pkin(12) * t3525 + t3297;
t3225 = t3446 * t3242 + t3441 * t3459;
t3224 = -t3242 * t3441 + t3446 * t3459;
t3261 = -t3442 * t3298 + t3447 * t3452;
t3333 = pkin(5) * t3364 - qJ(6) * t3366;
t3204 = -pkin(5) * t3562 + qJ(6) * t3475 + 0.2e1 * qJD(6) * t3386 - t3364 * t3333 + t3225;
t3209 = -pkin(5) * t3475 - qJ(6) * t3562 + t3333 * t3366 + qJDD(6) - t3224;
t3189 = t3204 * t3446 + t3209 * t3441;
t3241 = -t3461 * pkin(4) - t3559 * pkin(12) + t3389 * t3357 - t3261;
t3479 = -qJD(5) * t3366 - t3526;
t3221 = -t3479 * pkin(5) + (pkin(5) * t3386 - 0.2e1 * qJD(6)) * t3366 + t3241 - t3457 * qJ(6);
t3173 = t3189 * t3442 - t3221 * t3447;
t3174 = t3189 * t3447 + t3221 * t3442;
t3188 = t3204 * t3441 - t3209 * t3446;
t3515 = t3174 * t3443 - t3188 * t3448;
t3162 = -t3437 * t3173 + t3439 * t3515;
t3165 = t3174 * t3448 + t3188 * t3443;
t3517 = t3162 * t3449 + t3165 * t3444;
t3191 = -t3224 * t3441 + t3225 * t3446;
t3186 = t3191 * t3442 - t3241 * t3447;
t3187 = t3191 * t3447 + t3241 * t3442;
t3190 = t3224 * t3446 + t3225 * t3441;
t3514 = t3187 * t3443 - t3190 * t3448;
t3164 = -t3437 * t3186 + t3439 * t3514;
t3168 = t3187 * t3448 + t3190 * t3443;
t3516 = t3164 * t3449 + t3168 * t3444;
t3226 = t3261 * t3447 + t3262 * t3442;
t3227 = -t3261 * t3442 + t3262 * t3447;
t3506 = t3227 * t3443 - t3297 * t3448;
t3195 = -t3437 * t3226 + t3439 * t3506;
t3218 = t3227 * t3448 + t3297 * t3443;
t3513 = t3195 * t3449 + t3218 * t3444;
t3288 = (qJD(5) + t3386) * t3366 + t3526;
t3246 = -t3288 * t3447 + t3582;
t3248 = t3288 * t3442 + t3580;
t3501 = t3248 * t3443 - t3579;
t3208 = -t3437 * t3246 + t3439 * t3501;
t3230 = t3248 * t3448 + t3581;
t3509 = t3208 * t3449 + t3230 * t3444;
t3289 = t3386 * t3366 - t3479;
t3250 = -t3289 * t3447 + t3582;
t3252 = t3289 * t3442 + t3580;
t3499 = t3252 * t3443 - t3579;
t3213 = -t3437 * t3250 + t3439 * t3499;
t3233 = t3252 * t3448 + t3581;
t3507 = t3213 * t3449 + t3233 * t3444;
t3323 = -t3389 * t3535 - t3524;
t3325 = t3387 * t3535 + t3469;
t3286 = t3323 * t3442 + t3325 * t3447;
t3287 = t3323 * t3447 - t3325 * t3442;
t3338 = -t3560 - t3561;
t3495 = t3287 * t3443 - t3338 * t3448;
t3244 = -t3437 * t3286 + t3439 * t3495;
t3274 = t3287 * t3448 + t3338 * t3443;
t3503 = t3244 * t3449 + t3274 * t3444;
t3331 = t3461 - t3545;
t3345 = -t3559 - t3561;
t3311 = t3331 * t3447 + t3345 * t3442;
t3312 = -t3331 * t3442 + t3345 * t3447;
t3492 = t3312 * t3443 - t3322 * t3448;
t3264 = -t3437 * t3311 + t3439 * t3492;
t3280 = t3312 * t3448 + t3322 * t3443;
t3498 = t3264 * t3449 + t3280 * t3444;
t3328 = -t3437 * t3460 + t3439 * t3522 + (-t3437 * t3466 - t3468 * t3439 + (t3437 * t3470 + (t3531 + (-0.2e1 * t3432 * t3540 + t3477) * pkin(10)) * t3439) * qJD(1)) * t3438;
t3493 = t3310 * t3443 - t3448 * t3520;
t3266 = -t3437 * t3328 + t3439 * t3493;
t3273 = t3310 * t3448 + t3443 * t3520;
t3497 = t3266 * t3449 + t3273 * t3444;
t3332 = -t3545 - t3461;
t3354 = -t3559 - t3560;
t3313 = t3332 * t3442 + t3354 * t3447;
t3314 = t3332 * t3447 - t3354 * t3442;
t3491 = t3314 * t3443 + t3448 * t3525;
t3268 = -t3437 * t3313 + t3439 * t3491;
t3281 = t3314 * t3448 - t3443 * t3525;
t3496 = t3268 * t3449 + t3281 * t3444;
t3363 = -t3557 - t3558;
t3347 = t3400 * t3523 + t3463;
t3349 = -t3480 - t3374;
t3488 = t3347 * t3443 + t3349 * t3448;
t3303 = -t3437 * t3363 + t3439 * t3488;
t3321 = t3347 * t3448 - t3349 * t3443;
t3494 = t3303 * t3449 + t3321 * t3444;
t3346 = (0.2e1 * qJD(3) + t3523) * t3400 - t3463;
t3369 = t3519 - t3544;
t3373 = -t3518 - t3558;
t3486 = t3369 * t3448 + t3373 * t3443;
t3316 = -t3437 * t3346 + t3439 * t3486;
t3335 = -t3369 * t3443 + t3373 * t3448;
t3490 = t3316 * t3449 + t3335 * t3444;
t3368 = -t3519 - t3544;
t3379 = -t3557 - t3518;
t3487 = t3368 * t3443 + t3379 * t3448;
t3318 = -t3437 * t3348 + t3439 * t3487;
t3339 = t3368 * t3448 - t3379 * t3443;
t3489 = t3318 * t3449 + t3339 * t3444;
t3390 = -t3444 * t3467 + (-t3438 * g(3) + t3465) * t3449;
t3391 = -g(3) * t3539 + t3534;
t3485 = t3390 * t3449 + t3391 * t3444;
t3403 = (qJD(1) * t3527 - t3532) * t3438;
t3419 = t3432 * t3529;
t3404 = t3416 + t3419;
t3484 = t3403 * t3449 + t3404 * t3444;
t3411 = -t3435 * t3542 - t3556;
t3427 = t3434 * t3444 * t3537;
t3415 = t3427 - t3431;
t3483 = t3411 * t3449 + t3415 * t3444;
t3414 = t3427 + t3431;
t3417 = -t3436 * t3542 - t3556;
t3482 = t3414 * t3449 + t3417 * t3444;
t3426 = -qJDD(1) * t3445 - t3450 * t3451;
t3425 = qJDD(1) * t3450 - t3445 * t3451;
t3418 = t3566 * t3542;
t3406 = -t3438 * t3468 - t3554;
t3405 = -t3416 + t3419;
t3402 = (t3536 * t3552 + t3532) * t3438;
t3393 = -t3414 * t3444 + t3417 * t3449;
t3392 = -t3411 * t3444 + t3415 * t3449;
t3383 = -t3403 * t3444 + t3404 * t3449;
t3381 = -t3438 * t3405 + t3440 * t3482;
t3380 = t3440 * t3405 + t3438 * t3482;
t3378 = -t3438 * t3402 + t3440 * t3483;
t3377 = t3440 * t3402 + t3438 * t3483;
t3376 = -t3438 * t3418 + t3440 * t3484;
t3375 = t3440 * t3418 + t3438 * t3484;
t3367 = -t3390 * t3444 + t3391 * t3449;
t3351 = -t3438 * t3406 + t3440 * t3485;
t3350 = t3440 * t3406 + t3438 * t3485;
t3317 = t3439 * t3348 + t3437 * t3487;
t3315 = t3439 * t3346 + t3437 * t3486;
t3302 = t3439 * t3363 + t3437 * t3488;
t3301 = -t3318 * t3444 + t3339 * t3449;
t3296 = -t3316 * t3444 + t3335 * t3449;
t3275 = -t3303 * t3444 + t3321 * t3449;
t3272 = -t3438 * t3317 + t3440 * t3489;
t3271 = t3440 * t3317 + t3438 * t3489;
t3270 = -t3438 * t3315 + t3440 * t3490;
t3269 = t3440 * t3315 + t3438 * t3490;
t3267 = t3439 * t3313 + t3437 * t3491;
t3265 = t3439 * t3328 + t3437 * t3493;
t3263 = t3439 * t3311 + t3437 * t3492;
t3256 = -t3438 * t3302 + t3440 * t3494;
t3255 = t3440 * t3302 + t3438 * t3494;
t3243 = t3439 * t3286 + t3437 * t3495;
t3235 = -t3268 * t3444 + t3281 * t3449;
t3234 = -t3264 * t3444 + t3280 * t3449;
t3231 = -t3266 * t3444 + t3273 * t3449;
t3228 = -t3244 * t3444 + t3274 * t3449;
t3220 = -t3438 * t3267 + t3440 * t3496;
t3219 = t3440 * t3267 + t3438 * t3496;
t3217 = -t3438 * t3263 + t3440 * t3498;
t3216 = t3440 * t3263 + t3438 * t3498;
t3215 = -t3438 * t3265 + t3440 * t3497;
t3214 = t3440 * t3265 + t3438 * t3497;
t3211 = t3439 * t3250 + t3437 * t3499;
t3206 = t3439 * t3246 + t3437 * t3501;
t3203 = -t3438 * t3243 + t3440 * t3503;
t3202 = t3440 * t3243 + t3438 * t3503;
t3197 = -t3213 * t3444 + t3233 * t3449;
t3194 = t3439 * t3226 + t3437 * t3506;
t3193 = -t3208 * t3444 + t3230 * t3449;
t3183 = -t3195 * t3444 + t3218 * t3449;
t3182 = -t3438 * t3211 + t3440 * t3507;
t3180 = t3440 * t3211 + t3438 * t3507;
t3178 = -t3438 * t3206 + t3440 * t3509;
t3176 = t3440 * t3206 + t3438 * t3509;
t3167 = -t3438 * t3194 + t3440 * t3513;
t3166 = t3440 * t3194 + t3438 * t3513;
t3163 = t3439 * t3186 + t3437 * t3514;
t3161 = t3439 * t3173 + t3437 * t3515;
t3160 = -t3164 * t3444 + t3168 * t3449;
t3159 = -t3162 * t3444 + t3165 * t3449;
t3158 = -t3438 * t3163 + t3440 * t3516;
t3157 = t3440 * t3163 + t3438 * t3516;
t3156 = -t3438 * t3161 + t3440 * t3517;
t3155 = t3440 * t3161 + t3438 * t3517;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t3426, -t3425, 0, -t3428 * t3445 + t3429 * t3450, 0, 0, 0, 0, 0, 0, -t3381 * t3445 + t3393 * t3450, -t3378 * t3445 + t3392 * t3450, -t3376 * t3445 + t3383 * t3450, -t3351 * t3445 + t3367 * t3450, 0, 0, 0, 0, 0, 0, -t3270 * t3445 + t3296 * t3450, -t3272 * t3445 + t3301 * t3450, -t3256 * t3445 + t3275 * t3450, -t3215 * t3445 + t3231 * t3450, 0, 0, 0, 0, 0, 0, -t3217 * t3445 + t3234 * t3450, -t3220 * t3445 + t3235 * t3450, -t3203 * t3445 + t3228 * t3450, -t3167 * t3445 + t3183 * t3450, 0, 0, 0, 0, 0, 0, -t3178 * t3445 + t3193 * t3450, t3612, t3604, -t3158 * t3445 + t3160 * t3450, 0, 0, 0, 0, 0, 0, -t3182 * t3445 + t3197 * t3450, t3604, -t3612, -t3156 * t3445 + t3159 * t3450; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t3425, t3426, 0, t3428 * t3450 + t3429 * t3445, 0, 0, 0, 0, 0, 0, t3381 * t3450 + t3393 * t3445, t3378 * t3450 + t3392 * t3445, t3376 * t3450 + t3383 * t3445, t3351 * t3450 + t3367 * t3445, 0, 0, 0, 0, 0, 0, t3270 * t3450 + t3296 * t3445, t3272 * t3450 + t3301 * t3445, t3256 * t3450 + t3275 * t3445, t3215 * t3450 + t3231 * t3445, 0, 0, 0, 0, 0, 0, t3217 * t3450 + t3234 * t3445, t3220 * t3450 + t3235 * t3445, t3203 * t3450 + t3228 * t3445, t3167 * t3450 + t3183 * t3445, 0, 0, 0, 0, 0, 0, t3178 * t3450 + t3193 * t3445, -t3611, t3603, t3158 * t3450 + t3160 * t3445, 0, 0, 0, 0, 0, 0, t3182 * t3450 + t3197 * t3445, t3603, t3611, t3156 * t3450 + t3159 * t3445; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t3380, t3377, t3375, t3350, 0, 0, 0, 0, 0, 0, t3269, t3271, t3255, t3214, 0, 0, 0, 0, 0, 0, t3216, t3219, t3202, t3166, 0, 0, 0, 0, 0, 0, t3176, -t3175, t3600, t3157, 0, 0, 0, 0, 0, 0, t3180, t3600, t3175, t3155; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3451, -qJDD(1), 0, t3429, 0, 0, 0, 0, 0, 0, t3393, t3392, t3383, t3367, 0, 0, 0, 0, 0, 0, t3296, t3301, t3275, t3231, 0, 0, 0, 0, 0, 0, t3234, t3235, t3228, t3183, 0, 0, 0, 0, 0, 0, t3193, t3196, t3594, t3160, 0, 0, 0, 0, 0, 0, t3197, t3594, -t3196, t3159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t3451, 0, t3428, 0, 0, 0, 0, 0, 0, t3381, t3378, t3376, t3351, 0, 0, 0, 0, 0, 0, t3270, t3272, t3256, t3215, 0, 0, 0, 0, 0, 0, t3217, t3220, t3203, t3167, 0, 0, 0, 0, 0, 0, t3178, -t3177, t3599, t3158, 0, 0, 0, 0, 0, 0, t3182, t3599, t3177, t3156; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t3380, t3377, t3375, t3350, 0, 0, 0, 0, 0, 0, t3269, t3271, t3255, t3214, 0, 0, 0, 0, 0, 0, t3216, t3219, t3202, t3166, 0, 0, 0, 0, 0, 0, t3176, -t3175, t3600, t3157, 0, 0, 0, 0, 0, 0, t3180, t3600, t3175, t3155; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3417, t3415, t3404, t3391, 0, 0, 0, 0, 0, 0, t3335, t3339, t3321, t3273, 0, 0, 0, 0, 0, 0, t3280, t3281, t3274, t3218, 0, 0, 0, 0, 0, 0, t3230, -t3229, t3583, t3168, 0, 0, 0, 0, 0, 0, t3233, t3583, t3229, t3165; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3414, t3411, t3403, t3390, 0, 0, 0, 0, 0, 0, t3316, t3318, t3303, t3266, 0, 0, 0, 0, 0, 0, t3264, t3268, t3244, t3195, 0, 0, 0, 0, 0, 0, t3208, -t3207, t3589, t3164, 0, 0, 0, 0, 0, 0, t3213, t3589, t3207, t3162; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3405, t3402, t3418, t3406, 0, 0, 0, 0, 0, 0, t3315, t3317, t3302, t3265, 0, 0, 0, 0, 0, 0, t3263, t3267, t3243, t3194, 0, 0, 0, 0, 0, 0, t3206, -t3205, t3590, t3163, 0, 0, 0, 0, 0, 0, t3211, t3590, t3205, t3161; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3373, t3368, t3347, t3310, 0, 0, 0, 0, 0, 0, t3312, t3314, t3287, t3227, 0, 0, 0, 0, 0, 0, t3248, -t3247, t3578, t3187, 0, 0, 0, 0, 0, 0, t3252, t3578, t3247, t3174; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3369, t3379, t3349, -t3520, 0, 0, 0, 0, 0, 0, -t3322, t3525, -t3338, -t3297, 0, 0, 0, 0, 0, 0, -t3571, t3276, -t3564, -t3190, 0, 0, 0, 0, 0, 0, -t3571, -t3564, -t3276, -t3188; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3346, t3348, t3363, t3328, 0, 0, 0, 0, 0, 0, t3311, t3313, t3286, t3226, 0, 0, 0, 0, 0, 0, t3246, -t3245, t3577, t3186, 0, 0, 0, 0, 0, 0, t3250, t3577, t3245, t3173; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3345, t3332, t3323, t3262, 0, 0, 0, 0, 0, 0, t3570, -t3278, t3563, t3191, 0, 0, 0, 0, 0, 0, t3570, t3563, t3278, t3189; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3331, t3354, t3325, t3261, 0, 0, 0, 0, 0, 0, -t3288, -t3457, t3320, -t3241, 0, 0, 0, 0, 0, 0, -t3289, t3320, t3457, -t3221; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3322, -t3525, t3338, t3297, 0, 0, 0, 0, 0, 0, t3571, -t3276, t3564, t3190, 0, 0, 0, 0, 0, 0, t3571, t3564, t3276, t3188; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3565, -t3304, t3474, t3225, 0, 0, 0, 0, 0, 0, t3565, t3474, t3304, t3204; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3305, t3567, -t3292, t3224, 0, 0, 0, 0, 0, 0, t3305, -t3292, -t3567, -t3209; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3288, t3457, -t3320, t3241, 0, 0, 0, 0, 0, 0, t3289, -t3320, -t3457, t3221; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3565, t3474, t3304, t3204; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3289, -t3320, -t3457, t3221; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3305, t3292, t3567, t3209;];
f_new_reg  = t1;
