% Calculate vector of inverse dynamics joint torques for
% S6RRPRPR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta3]';
% MDP [32x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RRPRPR10_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 11:10
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RRPRPR10_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1),zeros(32,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR10_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR10_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR10_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR10_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRPR10_invdynJ_fixb_mdp_slag_vp: pkin has to be [11x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [32 1]), ...
  'S6RRPRPR10_invdynJ_fixb_mdp_slag_vp: MDP has to be [32x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 11:09:48
% EndTime: 2019-03-09 11:10:10
% DurationCPUTime: 16.11s
% Computational Cost: add. (10570->740), mult. (26308->964), div. (0->0), fcn. (21544->14), ass. (0->317)
t710 = sin(qJ(4));
t885 = cos(pkin(11));
t894 = cos(qJ(4));
t783 = t894 * t885;
t884 = sin(pkin(11));
t654 = t710 * t884 - t783;
t706 = sin(pkin(6));
t714 = cos(qJ(2));
t866 = t706 * t714;
t749 = t783 * t866;
t809 = t706 * t884;
t781 = qJD(1) * t809;
t760 = t714 * t781;
t855 = qJD(1) * t749 + t654 * qJD(4) - t710 * t760;
t707 = cos(pkin(6));
t848 = qJD(1) * t707;
t689 = qJD(2) + t848;
t711 = sin(qJ(2));
t627 = t689 * t885 - t711 * t781;
t810 = t706 * t885;
t782 = qJD(1) * t810;
t758 = t711 * t782;
t628 = t689 * t884 + t758;
t751 = t710 * t627 + t628 * t894;
t901 = qJD(6) + t751;
t573 = -t894 * t627 + t628 * t710;
t918 = t573 ^ 2;
t713 = cos(qJ(6));
t847 = qJD(1) * t714;
t818 = t706 * t847;
t672 = -qJD(4) + t818;
t709 = sin(qJ(6));
t872 = t672 * t709;
t542 = -t713 * t573 - t872;
t917 = t542 * t573;
t916 = t542 * t901;
t544 = t573 * t709 - t672 * t713;
t915 = t544 * t573;
t914 = t544 * t901;
t913 = t573 * t672;
t769 = pkin(2) * t711 - qJ(3) * t714;
t849 = qJD(1) * t706;
t642 = t769 * t849;
t819 = t711 * t849;
t833 = pkin(1) * t848;
t643 = -pkin(8) * t819 + t714 * t833;
t584 = t885 * t642 - t643 * t884;
t820 = t885 * pkin(9);
t737 = t706 * (pkin(3) * t711 - t714 * t820);
t548 = qJD(1) * t737 + t584;
t585 = t884 * t642 + t885 * t643;
t564 = -pkin(9) * t760 + t585;
t804 = t884 * qJ(3);
t667 = -pkin(9) * t884 - t804;
t805 = t885 * qJ(3);
t668 = t805 + t820;
t801 = t884 * qJD(3);
t816 = qJD(4) * t894;
t912 = qJD(3) * t783 - t894 * t564 + t667 * t816 + (-qJD(4) * t668 - t548 - t801) * t710;
t655 = t710 * t885 + t884 * t894;
t726 = t655 * t866;
t854 = -qJD(1) * t726 + t655 * qJD(4);
t680 = pkin(8) * t818;
t644 = t711 * t833 + t680;
t616 = qJ(3) * t689 + t644;
t756 = -pkin(2) * t714 - qJ(3) * t711 - pkin(1);
t638 = t756 * t706;
t621 = qJD(1) * t638;
t552 = -t616 * t884 + t885 * t621;
t520 = -pkin(3) * t818 - t628 * pkin(9) + t552;
t553 = t885 * t616 + t884 * t621;
t526 = pkin(9) * t627 + t553;
t486 = -t894 * t520 + t526 * t710;
t841 = -qJD(5) - t486;
t895 = cos(qJ(1));
t822 = t895 * t711;
t712 = sin(qJ(1));
t863 = t712 * t714;
t650 = t707 * t822 + t863;
t703 = pkin(11) + qJ(4);
t699 = sin(t703);
t700 = cos(t703);
t823 = t706 * t895;
t597 = t650 * t699 + t700 * t823;
t821 = t895 * t714;
t864 = t711 * t712;
t649 = -t707 * t821 + t864;
t911 = t597 * t709 + t649 * t713;
t910 = t597 * t713 - t649 * t709;
t897 = t751 ^ 2;
t702 = t706 ^ 2;
t909 = 0.2e1 * t702;
t908 = t901 ^ 2;
t907 = t672 * t751;
t836 = qJDD(1) * t707;
t788 = qJDD(2) + t836;
t868 = t706 * t711;
t690 = pkin(8) * t868;
t832 = pkin(1) * qJD(2) * t707;
t792 = qJD(1) * t832;
t831 = pkin(1) * t836;
t789 = qJD(2) * t680 + qJDD(1) * t690 + t711 * t792 - t714 * t831;
t579 = -pkin(2) * t788 + qJDD(3) + t789;
t651 = t707 * t863 + t822;
t777 = g(1) * t651 + g(2) * t649;
t740 = g(3) * t866 - t777;
t906 = -t579 - t740;
t857 = qJ(5) * t819 - t912;
t613 = t710 * t667 + t668 * t894;
t905 = qJD(3) * t655 + qJD(4) * t613 + t548 * t894 - t710 * t564;
t904 = t584 + t801;
t607 = pkin(3) * t760 + t644;
t903 = qJ(5) * t855 - qJD(5) * t655 - t607;
t834 = qJDD(1) * t714;
t686 = t706 * t834;
t837 = qJD(1) * qJD(2);
t814 = t711 * t837;
t787 = t706 * t814;
t902 = -t787 + t686;
t840 = pkin(5) * t751 - t841;
t487 = t710 * t520 + t894 * t526;
t485 = qJ(5) * t672 - t487;
t890 = pkin(5) * t573;
t475 = -t485 - t890;
t743 = t884 * t788;
t796 = qJDD(1) * t885;
t774 = t711 * t796;
t802 = t885 * qJD(2);
t780 = t714 * t802;
t719 = t706 * (qJD(1) * t780 + t774) + t743;
t785 = t714 * t809;
t757 = qJD(2) * t785;
t786 = t711 * t809;
t732 = qJD(1) * t757 + qJDD(1) * t786 - t788 * t885;
t845 = qJD(4) * t710;
t509 = -t627 * t816 + t628 * t845 + t710 * t732 - t894 * t719;
t508 = -qJDD(6) + t509;
t896 = pkin(4) + pkin(10);
t900 = t896 * t508 + (t475 - t487 + t890) * t901;
t641 = qJDD(4) - t902;
t899 = -t613 * t641 + t740 * t699;
t612 = -t667 * t894 + t710 * t668;
t898 = -t612 * t641 - t740 * t700;
t731 = qJD(2) * t769 - qJD(3) * t711;
t619 = t731 * t706;
t846 = qJD(2) * t711;
t817 = t706 * t846;
t762 = -pkin(8) * t817 + t714 * t832;
t625 = qJD(3) * t707 + t762;
t559 = t885 * t619 - t625 * t884;
t530 = qJD(2) * t737 + t559;
t693 = pkin(8) * t866;
t893 = pkin(1) * t711;
t851 = t707 * t893 + t693;
t637 = qJ(3) * t707 + t851;
t580 = -t637 * t884 + t885 * t638;
t646 = t707 * t884 + t711 * t810;
t532 = -pkin(3) * t866 - t646 * pkin(9) + t580;
t560 = t884 * t619 + t885 * t625;
t545 = -pkin(9) * t757 + t560;
t581 = t885 * t637 + t884 * t638;
t808 = t707 * t885;
t735 = -t786 + t808;
t547 = pkin(9) * t735 + t581;
t747 = -t710 * t530 - t532 * t816 - t894 * t545 + t547 * t845;
t471 = -t706 * (qJ(5) * t846 - qJD(5) * t714) + t747;
t892 = pkin(3) * t706;
t891 = pkin(4) * t641;
t887 = g(3) * t706;
t886 = t714 * pkin(1);
t883 = MDP(6) * t706;
t882 = qJ(5) * t573;
t510 = t627 * t845 + t628 * t816 + t710 * t719 + t894 * t732;
t843 = qJD(6) * t713;
t827 = t709 * t510 + t573 * t843 + t713 * t641;
t844 = qJD(6) * t709;
t478 = t672 * t844 + t827;
t881 = t478 * t713;
t880 = t487 * t672;
t879 = t508 * t709;
t878 = t573 * t751;
t634 = t641 * qJ(5);
t873 = t654 * t709;
t871 = t699 * t709;
t870 = t699 * t713;
t869 = t702 * qJD(1) ^ 2;
t867 = t706 * t712;
t865 = t709 * t714;
t505 = t713 * t508;
t862 = t713 * t714;
t861 = t710 * t532 + t894 * t547;
t859 = -pkin(5) * t854 - t857;
t826 = pkin(8) * t686 + t711 * t831 + t714 * t792;
t736 = -pkin(8) * t787 + t826;
t558 = qJ(3) * t788 + t689 * qJD(3) + t736;
t566 = (qJD(1) * t731 + qJDD(1) * t756) * t706;
t513 = t885 * t558 + t884 * t566;
t858 = pkin(4) * t854 + t903;
t856 = pkin(4) * t819 + t905;
t645 = qJD(2) * t693 + t711 * t832;
t852 = t895 * pkin(1) + pkin(8) * t867;
t704 = t711 ^ 2;
t850 = -t714 ^ 2 + t704;
t842 = qJD(2) - t689;
t835 = qJDD(1) * t711;
t830 = t714 * t869;
t829 = t706 * t865;
t828 = t706 * t862;
t608 = pkin(3) * t757 + t645;
t825 = g(1) * t885;
t824 = g(2) * t885;
t815 = pkin(1) * t909;
t813 = t714 * t837;
t812 = -t712 * pkin(1) + pkin(8) * t823;
t811 = t579 * t884;
t806 = t712 * t884;
t803 = qJD(2) * t884;
t512 = -t558 * t884 + t885 * t566;
t490 = -pkin(3) * t902 - pkin(9) * t719 + t512;
t498 = -pkin(9) * t732 + t513;
t790 = -t894 * t490 + t710 * t498 + t520 * t845 + t526 * t816;
t764 = qJDD(5) + t790;
t461 = -pkin(5) * t509 - t641 * t896 + t764;
t525 = pkin(3) * t732 + t579;
t718 = t509 * qJ(5) - qJD(5) * t751 + t525;
t465 = t510 * t896 + t718;
t800 = t713 * t461 - t709 * t465;
t799 = -t713 * t510 + t641 * t709;
t798 = t709 * t819 + t713 * t854;
t797 = -t709 * t854 + t713 * t819;
t598 = t650 * t700 - t699 * t823;
t795 = t901 * t709;
t794 = t901 * t713;
t793 = t896 * t868;
t791 = -t710 * t490 - t894 * t498 - t520 * t816 + t526 * t845;
t698 = pkin(3) * t885 + pkin(2);
t784 = t895 * t884;
t652 = -t707 * t864 + t821;
t601 = t652 * t699 - t700 * t867;
t779 = g(1) * t597 - g(2) * t601;
t602 = t652 * t700 + t699 * t867;
t778 = -g(1) * t598 + g(2) * t602;
t776 = g(1) * t649 - g(2) * t651;
t775 = g(1) * t652 + g(2) * t650;
t773 = t532 * t894 - t710 * t547;
t744 = -t655 * qJ(5) - t698;
t578 = t654 * t896 + t744;
t771 = pkin(5) * t855 - qJD(1) * t793 + qJD(6) * t578 - t905;
t586 = t655 * pkin(5) + t612;
t770 = -qJD(6) * t586 - t854 * t896 - t903;
t768 = t709 * t461 + t713 * t465;
t474 = t672 * t896 + t840;
t609 = -pkin(2) * t689 + qJD(3) - t643;
t570 = -pkin(3) * t627 + t609;
t724 = -qJ(5) * t751 + t570;
t481 = t573 * t896 + t724;
t466 = t474 * t713 - t481 * t709;
t467 = t474 * t709 + t481 * t713;
t500 = pkin(4) * t866 - t773;
t591 = t646 * t894 + t710 * t735;
t482 = t591 * pkin(5) + pkin(10) * t866 + t500;
t727 = t894 * t735;
t590 = t646 * t710 - t727;
t595 = pkin(3) * t786 + t690 + (-t698 - t886) * t707;
t721 = -t591 * qJ(5) + t595;
t493 = t590 * t896 + t721;
t766 = t482 * t713 - t493 * t709;
t765 = t482 * t709 + t493 * t713;
t761 = t714 * t782;
t759 = t706 * t780;
t499 = qJ(5) * t866 - t861;
t754 = t788 * MDP(8);
t659 = qJD(5) * t672;
t463 = -t634 + t659 + t791;
t567 = t590 * t713 + t829;
t748 = -t530 * t894 + t532 * t845 + t710 * t545 + t547 * t816;
t636 = t699 * t707 + t700 * t868;
t745 = -g(1) * t602 - g(2) * t598 - g(3) * t636;
t742 = t654 * t844 - t798;
t741 = t654 * t843 - t797;
t739 = -g(3) * t868 - t775;
t537 = -qJD(4) * t727 - qJD(2) * t749 + (qJD(4) * t646 + t757) * t710;
t738 = qJ(5) * t537 - qJD(5) * t591 + t608;
t734 = -t509 - t913;
t730 = t745 - t791;
t635 = t699 * t868 - t707 * t700;
t729 = g(1) * t601 + g(2) * t597 + g(3) * t635 - t790;
t462 = -pkin(5) * t510 - t463;
t725 = t462 + (t896 * t901 + t882) * t901 + t745;
t495 = pkin(4) * t573 + t724;
t723 = t495 * t751 + qJDD(5) - t729;
t722 = -t512 * t884 + t513 * t885 + t739;
t468 = t510 * pkin(4) + t718;
t708 = -pkin(9) - qJ(3);
t640 = t690 + (-pkin(2) - t886) * t707;
t596 = t654 * pkin(4) + t744;
t587 = -t654 * pkin(5) + t613;
t568 = t590 * t709 - t828;
t563 = t601 * t709 + t651 * t713;
t562 = t601 * t713 - t651 * t709;
t538 = qJD(2) * t726 + qJD(4) * t591;
t515 = pkin(4) * t751 + t882;
t511 = t590 * pkin(4) + t721;
t502 = qJD(6) * t567 + t538 * t709 + t713 * t817;
t501 = -t713 * t538 - qJD(6) * t828 + (qJD(6) * t590 + t817) * t709;
t484 = pkin(4) * t672 - t841;
t483 = -pkin(5) * t590 - t499;
t480 = pkin(4) * t538 + t738;
t479 = qJD(6) * t544 + t799;
t473 = t538 * t896 + t738;
t472 = -pkin(4) * t817 + t748;
t470 = -pkin(5) * t538 - t471;
t469 = -t537 * pkin(5) - qJD(2) * t793 + t748;
t464 = t764 - t891;
t459 = -qJD(6) * t467 + t800;
t458 = qJD(6) * t466 + t768;
t1 = [(-t468 * t591 + t471 * t672 - t480 * t751 + t495 * t537 - t499 * t641 + t509 * t511 + t779) * MDP(24) + (-t595 * t509 + t525 * t591 - t570 * t537 + t608 * t751 - t861 * t641 - t747 * t672 - t779) * MDP(21) + ((-t486 * t846 + t714 * t790) * MDP(20) + (t510 * t714 - t573 * t846) * MDP(18) + (-g(1) * t784 - g(2) * t806 + (t811 + (qJD(1) * t580 + t552) * qJD(2)) * t711 + (-qJD(1) * t559 - qJDD(1) * t580 + t609 * t803 - t512) * t714) * MDP(11) + (t463 * t714 - t485 * t846) * MDP(24) + (t509 * t714 + t751 * t846) * MDP(17) + (-t487 * t846 - t714 * t791) * MDP(21) + (-t641 * t714 - t672 * t846) * MDP(19) + (-t464 * t714 + t484 * t846) * MDP(23) + (-t689 * t846 + t714 * qJDD(2) + (-t814 + 0.2e1 * t834) * t707) * MDP(7)) * t706 + (qJDD(1) * t704 + 0.2e1 * t711 * t813) * t702 * MDP(4) + (qJD(2) * t714 * t689 + t711 * qJDD(2) + (t813 + 0.2e1 * t835) * t707) * t883 + (g(1) * t712 - g(2) * t895) * MDP(2) + (g(1) * t895 + g(2) * t712) * MDP(3) + (t463 * t590 + t464 * t591 + t471 * t573 + t472 * t751 - t484 * t537 + t485 * t538 + t499 * t510 - t500 * t509 + t776) * MDP(22) + (t509 * t590 - t510 * t591 + t537 * t573 - t538 * t751) * MDP(16) + (-t509 * t591 - t537 * t751) * MDP(15) + (t595 * t510 + t525 * t590 + t570 * t538 + t608 * t573 + t773 * t641 + t748 * t672 - t778) * MDP(20) + (-t579 * t808 - t645 * t627 + t640 * t732 + t650 * t825 - t652 * t824) * MDP(11) + (-t468 * t590 - t472 * t672 - t480 * t573 - t495 * t538 + t500 * t641 - t510 * t511 + t778) * MDP(23) + (-t762 * t689 - t851 * t788 - t736 * t707 + (-t813 - t835) * t815 - t776) * MDP(10) + (t513 * t581 + t553 * t560 + t512 * t580 + t552 * t559 + t579 * t640 + t609 * t645 - g(1) * (-pkin(2) * t650 - qJ(3) * t649 + t812) - g(2) * (pkin(2) * t652 + qJ(3) * t651 + t852)) * MDP(14) + (t478 * t567 - t479 * t568 - t501 * t544 - t502 * t542) * MDP(27) + (t478 * t568 + t502 * t544) * MDP(26) + (t560 * t818 + t513 * t866 - t553 * t817 + t645 * t628 + t640 * t719 + t579 * t646 + t609 * t759 - g(1) * (t650 * t884 + t810 * t895) - g(2) * (-t652 * t884 + t712 * t810) + t902 * t581) * MDP(12) + (-t645 * t689 + (t707 * t886 - t690) * t788 - t789 * t707 + g(1) * t650 - g(2) * t652 + (-t814 + t834) * t815) * MDP(9) + (-t512 * t646 + t513 * t735 - t552 * t759 - t553 * t757 - t559 * t628 + t560 * t627 - t580 * t719 - t581 * t732 + t776) * MDP(13) + t707 * t754 + (t711 * t834 - t837 * t850) * MDP(5) * t909 + (t468 * t511 + t495 * t480 + t463 * t499 + t485 * t471 + t464 * t500 + t484 * t472 - g(1) * (-pkin(4) * t598 - qJ(5) * t597 + t649 * t708 - t650 * t698 + t784 * t892 + t812) - g(2) * (t602 * pkin(4) + t601 * qJ(5) - t651 * t708 + t652 * t698 + t806 * t892 + t852)) * MDP(25) + (-t479 * t591 - t501 * t901 - t508 * t567 + t537 * t542) * MDP(29) + (t478 * t591 + t502 * t901 - t508 * t568 - t537 * t544) * MDP(28) + (-t508 * t591 - t537 * t901) * MDP(30) + (-(qJD(6) * t766 + t469 * t709 + t473 * t713) * t901 + t765 * t508 - t458 * t591 + t467 * t537 + t470 * t544 + t483 * t478 + t462 * t568 + t475 * t502 + g(1) * t910 - g(2) * t562) * MDP(32) + ((-qJD(6) * t765 + t469 * t713 - t473 * t709) * t901 - t766 * t508 + t459 * t591 - t466 * t537 + t470 * t542 + t483 * t479 - t462 * t567 + t475 * t501 + g(1) * t911 - g(2) * t563) * MDP(31) + (t538 * t672 - t590 * t641) * MDP(18) + (t537 * t672 + t591 * t641) * MDP(17) + qJDD(1) * MDP(1); -t711 * MDP(4) * t830 + (t798 * t544 + t797 * t542 + (t881 - t479 * t709 + (-t542 * t713 - t544 * t709) * qJD(6)) * t654) * MDP(27) + t850 * MDP(5) * t869 + (t478 * t873 + t544 * t741) * MDP(26) + t754 + t672 * MDP(19) * t819 + (t842 * t847 + t835) * t883 + (-t468 * t655 + t485 * t819 + t495 * t855 + t509 * t596 + t672 * t857 - t751 * t858 - t899) * MDP(24) + (t509 * t654 - t510 * t655 + t573 * t855 - t751 * t854) * MDP(16) + (t641 * t655 + t672 * t855 - t751 * t819) * MDP(17) + (-t509 * t655 - t751 * t855) * MDP(15) + (t463 * t654 + t464 * t655 - t484 * t855 + t485 * t854 - t509 * t612 - t510 * t613 + t573 * t857 + t751 * t856 + t739) * MDP(22) + (-pkin(2) * t732 - t579 * t885 + t644 * t627 + t651 * t825 + t649 * t824 + ((-t885 * g(3) + qJDD(1) * t804) * t714 + ((-qJ(3) * t803 - t552) * t711 + (-t609 * t884 + t904) * t714) * qJD(1)) * t706) * MDP(11) + (t486 * t819 - t698 * t510 + t525 * t654 + t854 * t570 - t607 * t573 + t672 * t905 + t898) * MDP(20) + (-t552 * t584 - t553 * t585 - t609 * t644 + (-t552 * t884 + t553 * t885) * qJD(3) + t906 * pkin(2) + t722 * qJ(3)) * MDP(14) + (-t463 * t613 + t464 * t612 + t468 * t596 + t856 * t484 + t857 * t485 + t858 * t495 + (t711 * t887 + t775) * t708 + (-t714 * t887 + t777) * (pkin(4) * t700 + qJ(5) * t699 + t698)) * MDP(25) + (-pkin(2) * t719 + g(3) * t785 + t553 * t819 - t585 * t818 - t644 * t628 + t811 - t777 * t884 + (qJD(3) - t609) * t761 + (-qJD(2) * t758 + t796 * t866) * qJ(3)) * MDP(12) + (t644 * t689 + t869 * t893 - t740 - t789) * MDP(9) + (pkin(1) * t830 + t643 * t689 + (pkin(8) * t837 + g(3)) * t868 + t775 - t826) * MDP(10) + (t552 * t761 + t553 * t760 + t719 * t804 - t732 * t805 + t722 + t904 * t628 + (qJD(3) * t885 - t585) * t627) * MDP(13) + (t573 * t819 - t641 * t654 + t672 * t854) * MDP(18) + (-t819 * t842 + t686) * MDP(7) + (-t468 * t654 - t484 * t819 - t495 * t854 - t510 * t596 - t573 * t858 - t672 * t856 - t898) * MDP(23) + (-t479 * t655 - t505 * t654 + t542 * t855 - t742 * t901) * MDP(29) + (t478 * t655 - t508 * t873 - t544 * t855 + t741 * t901) * MDP(28) + (-(-t578 * t709 + t586 * t713) * t508 + t459 * t655 + t587 * t479 - t462 * t713 * t654 - g(1) * (-t651 * t871 + t652 * t713) - g(2) * (-t649 * t871 + t650 * t713) - (t699 * t865 + t711 * t713) * t887 + (t709 * t770 - t713 * t771) * t901 + t859 * t542 - t855 * t466 + t742 * t475) * MDP(31) + ((t578 * t713 + t586 * t709) * t508 - t458 * t655 + t587 * t478 + t462 * t873 - g(1) * (-t651 * t870 - t652 * t709) - g(2) * (-t649 * t870 - t650 * t709) - (t699 * t862 - t709 * t711) * t887 + (t709 * t771 + t713 * t770) * t901 + t859 * t544 + t855 * t467 + t741 * t475) * MDP(32) + (-t508 * t655 - t855 * t901) * MDP(30) + (t487 * t819 + t698 * t509 + t525 * t655 - t855 * t570 - t607 * t751 + t672 * t912 + t899) * MDP(21); (-t628 * t818 + t732) * MDP(11) + (t743 + (t774 + (t802 - t627) * t847) * t706) * MDP(12) + (-t627 ^ 2 - t628 ^ 2) * MDP(13) + (t552 * t628 - t553 * t627 - t906) * MDP(14) + (-t897 - t918) * MDP(22) + (-t484 * t751 - t485 * t573 + t468 + t740) * MDP(25) + (-t713 * t908 + t879 + t917) * MDP(31) + (t709 * t908 + t505 + t915) * MDP(32) + (-MDP(21) + MDP(24)) * (t509 - t913) + (MDP(20) - MDP(23)) * (t510 - t907); MDP(15) * t878 + (t897 - t918) * MDP(16) + t734 * MDP(17) + (-t510 - t907) * MDP(18) + t641 * MDP(19) + (-t570 * t751 + t729 - t880) * MDP(20) + (t486 * t672 + t570 * t573 - t730) * MDP(21) + (pkin(4) * t509 - qJ(5) * t510 + (-t485 - t487) * t751 + (t484 + t841) * t573) * MDP(22) + (t515 * t573 + t723 + t880 - 0.2e1 * t891) * MDP(23) + (-t495 * t573 + t515 * t751 + t672 * t841 + 0.2e1 * t634 - t659 + t730) * MDP(24) + (-t463 * qJ(5) - t464 * pkin(4) - t495 * t515 - t484 * t487 - g(1) * (-pkin(4) * t601 + qJ(5) * t602) - g(2) * (-pkin(4) * t597 + qJ(5) * t598) - g(3) * (-pkin(4) * t635 + qJ(5) * t636) + t841 * t485) * MDP(25) + (-t544 * t795 + t881) * MDP(26) + ((-t479 - t914) * t713 + (-t478 + t916) * t709) * MDP(27) + (-t795 * t901 - t505 + t915) * MDP(28) + (-t794 * t901 + t879 - t917) * MDP(29) + t901 * t573 * MDP(30) + (qJ(5) * t479 + t466 * t573 + t840 * t542 + t725 * t709 + t713 * t900) * MDP(31) + (qJ(5) * t478 - t467 * t573 + t840 * t544 - t709 * t900 + t725 * t713) * MDP(32); t734 * MDP(22) + (t641 - t878) * MDP(23) + (-t672 ^ 2 - t897) * MDP(24) + (-t485 * t672 + t723 - t891) * MDP(25) + (t542 * t672 - t505) * MDP(31) + (t544 * t672 + t879) * MDP(32) + (-MDP(31) * t795 - MDP(32) * t794) * t901; t544 * t542 * MDP(26) + (-t542 ^ 2 + t544 ^ 2) * MDP(27) + (t827 + t916) * MDP(28) + (-t799 + t914) * MDP(29) - t508 * MDP(30) + (t467 * t901 - t475 * t544 - g(1) * t562 - g(2) * t910 - g(3) * (t635 * t713 + t829) + t800) * MDP(31) + (t466 * t901 + t475 * t542 + g(1) * t563 + g(2) * t911 - g(3) * (-t635 * t709 + t828) - t768) * MDP(32) + (MDP(28) * t872 - MDP(29) * t544 - MDP(31) * t467 - MDP(32) * t466) * qJD(6);];
tau  = t1;
