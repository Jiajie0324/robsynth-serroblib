% Calculate inertial parameters regressor of inverse dynamics joint torque vector with Newton-Euler for
% S6RRPRPR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta3]';
% 
% Output:
% tauJ_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 15:47
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauJ_reg = S6RRPRPR10_invdynJ_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR10_invdynJ_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR10_invdynJ_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR10_invdynJ_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR10_invdynJ_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRPR10_invdynJ_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauJ_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 15:43:38
% EndTime: 2019-05-06 15:44:16
% DurationCPUTime: 19.33s
% Computational Cost: add. (84432->655), mult. (193314->924), div. (0->0), fcn. (156556->12), ass. (0->405)
t366 = sin(pkin(6));
t374 = cos(qJ(2));
t431 = qJD(1) * t374;
t419 = t366 * t431;
t352 = -qJD(4) + t419;
t350 = t352 ^ 2;
t368 = cos(pkin(6));
t360 = qJD(1) * t368 + qJD(2);
t365 = sin(pkin(11));
t367 = cos(pkin(11));
t371 = sin(qJ(2));
t432 = qJD(1) * t371;
t420 = t366 * t432;
t331 = t360 * t367 - t365 * t420;
t332 = t360 * t365 + t367 * t420;
t370 = sin(qJ(4));
t373 = cos(qJ(4));
t304 = -t373 * t331 + t332 * t370;
t486 = t304 ^ 2;
t249 = -t350 - t486;
t433 = qJD(1) * t366;
t418 = qJD(2) * t433;
t428 = qJDD(1) * t366;
t340 = -t371 * t418 + t374 * t428;
t334 = -qJDD(4) + t340;
t306 = t331 * t370 + t332 * t373;
t449 = t306 * t304;
t385 = t334 + t449;
t509 = t373 * t385;
t174 = t249 * t370 - t509;
t510 = t370 * t385;
t176 = t249 * t373 + t510;
t109 = t174 * t367 + t176 * t365;
t552 = pkin(1) * t109;
t551 = qJ(3) * t109;
t112 = t174 * t365 - t176 * t367;
t550 = qJ(3) * t112;
t549 = t112 * t371;
t548 = t112 * t374;
t278 = t486 - t350;
t386 = t334 - t449;
t507 = t386 * t373;
t200 = t278 * t370 - t507;
t508 = t386 * t370;
t204 = t278 * t373 + t508;
t140 = t200 * t367 + t204 * t365;
t547 = t368 * t140;
t546 = -pkin(2) * t109 - pkin(3) * t174;
t485 = t306 ^ 2;
t279 = -t485 + t350;
t198 = t279 * t373 - t510;
t201 = t279 * t370 + t509;
t138 = t198 * t367 - t201 * t365;
t339 = t371 * t428 + t374 * t418;
t410 = qJDD(1) * t368 + qJDD(2);
t310 = t367 * t339 + t365 * t410;
t412 = t339 * t365 - t367 * t410;
t387 = t373 * t310 - t370 * t412;
t238 = -t304 * qJD(4) + t387;
t450 = t304 * t352;
t215 = t450 - t238;
t545 = t368 * t138 - t366 * (-t374 * t215 + t371 * (t198 * t365 + t201 * t367));
t502 = -t485 - t350;
t185 = t373 * t502 + t508;
t188 = t370 * t502 - t507;
t125 = t185 * t367 - t188 * t365;
t544 = pkin(1) * t125;
t543 = qJ(3) * t125;
t128 = t185 * t365 + t188 * t367;
t542 = qJ(3) * t128;
t541 = t128 * t371;
t540 = t128 * t374;
t539 = t371 * (t200 * t365 - t204 * t367);
t538 = -pkin(2) * t125 - pkin(3) * t185;
t535 = pkin(9) * t174;
t534 = pkin(9) * t176;
t481 = -2 * qJD(5);
t530 = pkin(9) * t185;
t529 = pkin(9) * t188;
t528 = t215 * t370;
t527 = t215 * t373;
t505 = t238 + t450;
t405 = -pkin(2) * t374 - qJ(3) * t371;
t336 = t405 * t433;
t375 = qJD(1) ^ 2;
t478 = sin(qJ(1));
t479 = cos(qJ(1));
t393 = g(1) * t479 + g(2) * t478;
t335 = -t375 * pkin(1) + pkin(8) * t428 - t393;
t392 = g(1) * t478 - g(2) * t479;
t475 = pkin(8) * t366;
t382 = qJDD(1) * pkin(1) + t375 * t475 + t392;
t380 = t368 * t382;
t413 = t335 * t371 - t374 * t380;
t483 = t360 ^ 2;
t260 = -t410 * pkin(2) - t483 * qJ(3) + t366 * (g(3) * t374 + t336 * t432) + qJDD(3) + t413;
t311 = -pkin(3) * t419 - pkin(9) * t332;
t484 = t331 ^ 2;
t183 = t412 * pkin(3) - t484 * pkin(9) + t311 * t332 + t260;
t414 = t310 * t370 + t373 * t412;
t237 = qJD(4) * t306 + t414;
t376 = t237 * pkin(4) - qJ(5) * t505 + t183;
t525 = t306 * t481 + t376;
t500 = -t486 - t485;
t524 = pkin(2) * t500;
t523 = pkin(3) * t500;
t369 = sin(qJ(6));
t372 = cos(qJ(6));
t270 = -t372 * t304 - t352 * t369;
t272 = t304 * t369 - t352 * t372;
t220 = t272 * t270;
t234 = qJDD(6) + t238;
t506 = -t220 + t234;
t522 = t369 * t506;
t521 = t370 * t505;
t520 = t371 * t500;
t519 = t372 * t506;
t518 = t373 * t505;
t517 = t374 * t500;
t501 = t485 - t486;
t516 = t374 * t501;
t446 = t352 * t370;
t406 = t373 * t238 + t306 * t446;
t445 = t352 * t373;
t408 = t370 * t238 - t306 * t445;
t422 = t374 * t449;
t490 = t365 * t406 + t367 * t408;
t515 = t368 * t490 + (t371 * (-t365 * t408 + t367 * t406) - t422) * t366;
t396 = t237 * t370 - t304 * t445;
t407 = -t373 * t237 - t304 * t446;
t491 = t365 * t396 + t367 * t407;
t514 = t368 * t491 + (t371 * (-t365 * t407 + t367 * t396) + t422) * t366;
t394 = (t304 * t370 + t306 * t373) * t352;
t395 = (t304 * t373 - t306 * t370) * t352;
t441 = t366 * t374;
t442 = t366 * t371;
t492 = t365 * t395 + t367 * t394;
t513 = t368 * t492 + t334 * t441 + (-t365 * t394 + t367 * t395) * t442;
t447 = t331 * t332;
t389 = -t340 + t447;
t512 = t365 * t389;
t511 = t367 * t389;
t318 = t331 * t419;
t281 = -t318 - t310;
t319 = t332 * t419;
t504 = t319 + t412;
t294 = g(3) * t441 + t413;
t377 = -g(3) * t442 + t371 * t380;
t295 = t374 * t335 + t377;
t503 = t371 * t294 + t374 * t295;
t261 = -t483 * pkin(2) + t410 * qJ(3) + (t336 * t433 + t335) * t374 + t377;
t434 = qJD(1) * t360;
t474 = t368 * g(3);
t262 = -t340 * pkin(2) - t474 - t339 * qJ(3) + ((pkin(2) * t371 - qJ(3) * t374) * t434 - t382) * t366;
t482 = 2 * qJD(3);
t179 = t261 * t365 - t367 * t262 + t332 * t482;
t152 = t389 * pkin(3) + pkin(9) * t281 - t179;
t180 = t367 * t261 + t365 * t262 + t331 * t482;
t164 = -pkin(3) * t484 - pkin(9) * t412 + t311 * t419 + t180;
t102 = -t373 * t152 + t164 * t370;
t250 = pkin(4) * t304 - qJ(5) * t306;
t77 = t334 * pkin(4) - t350 * qJ(5) + t250 * t306 + qJDD(5) + t102;
t67 = -pkin(5) * t215 + t385 * pkin(10) + t77;
t275 = pkin(5) * t306 + pkin(10) * t352;
t416 = -pkin(4) * t352 + t481;
t73 = t376 + (-t275 + t416) * t306 - pkin(5) * t486 + pkin(10) * t237;
t41 = t369 * t73 - t372 * t67;
t42 = t369 * t67 + t372 * t73;
t24 = t369 * t42 - t372 * t41;
t480 = pkin(4) + pkin(10);
t103 = t152 * t370 + t164 * t373;
t384 = -t350 * pkin(4) - t250 * t304 + t103;
t468 = qJ(5) * t334;
t68 = -t468 - t237 * pkin(5) - t486 * pkin(10) + (t481 - t275) * t352 + t384;
t497 = qJ(5) * t68 - t24 * t480;
t268 = t270 ^ 2;
t269 = t272 ^ 2;
t184 = -t268 - t269;
t182 = -t270 * qJD(6) + t369 * t237 - t372 * t334;
t299 = qJD(6) + t306;
t455 = t270 * t299;
t162 = t182 + t455;
t415 = t372 * t237 + t334 * t369;
t388 = (-qJD(6) + t299) * t272 + t415;
t98 = -t162 * t372 + t369 * t388;
t496 = qJ(5) * t184 - t480 * t98 - t24;
t383 = 0.2e1 * qJD(5) * t352 - t384;
t495 = -pkin(4) * t502 - qJ(5) * (t386 + t334) - t383;
t296 = t299 ^ 2;
t205 = -t296 - t268;
t117 = t369 * t205 + t519;
t158 = (qJD(6) + t299) * t272 - t415;
t470 = t369 * t68;
t494 = qJ(5) * t158 - t117 * t480 + t470;
t427 = -t269 - t296;
t171 = t220 + t234;
t440 = t369 * t171;
t122 = t372 * t427 - t440;
t398 = t182 - t455;
t469 = t372 * t68;
t493 = qJ(5) * t398 - t122 * t480 + t469;
t329 = t332 ^ 2;
t362 = t366 ^ 2;
t477 = pkin(4) * t370;
t476 = pkin(4) * t373;
t62 = -t102 * t373 + t103 * t370;
t472 = t365 * t62;
t471 = t367 * t62;
t467 = t171 * t372;
t466 = t183 * t370;
t465 = t183 * t373;
t289 = t352 * t306;
t208 = t237 - t289;
t464 = t208 * t373;
t457 = t260 * t365;
t456 = t260 * t367;
t285 = t340 + t447;
t454 = t285 * t365;
t453 = t285 * t367;
t452 = t299 * t369;
t451 = t299 * t372;
t444 = t362 * t374;
t443 = t362 * t375;
t423 = t371 * t444;
t351 = t375 * t423;
t338 = t351 + t410;
t438 = t371 * t338;
t337 = -t351 + t410;
t436 = t374 * t337;
t429 = qJD(4) - t352;
t426 = t370 * t220;
t425 = t373 * t220;
t424 = t371 ^ 2 * t443;
t344 = t360 * t419;
t421 = t344 + t339;
t417 = qJ(5) * t370 + pkin(3);
t63 = t102 * t370 + t373 * t103;
t121 = t179 * t365 + t367 * t180;
t411 = t441 * t447;
t76 = -t383 - t468;
t409 = -pkin(4) * t77 + qJ(5) * t76;
t209 = (-qJD(4) - t352) * t306 - t414;
t404 = pkin(4) * t215 + qJ(5) * t209;
t25 = t369 * t41 + t372 * t42;
t401 = t179 * t367 - t180 * t365;
t400 = -t368 * t375 + t434;
t399 = -pkin(1) + t405;
t379 = pkin(4) * t385 - qJ(5) * t249 + t77;
t359 = t374 ^ 2 * t443;
t343 = t360 * t420;
t342 = -t359 + t424;
t341 = -t359 - t483;
t328 = -t424 - t483;
t326 = t340 * t441;
t320 = t366 * t382 + t474;
t317 = -t329 - t359;
t316 = -t329 + t359;
t315 = -t359 + t484;
t314 = t340 - t343;
t313 = t340 + t343;
t312 = -t344 + t339;
t297 = -t359 - t484;
t284 = -t318 + t310;
t282 = -t319 + t412;
t274 = (-t331 * t365 + t332 * t367) * t419;
t273 = -t329 - t484;
t267 = t310 * t365 - t319 * t367;
t266 = t318 * t365 - t367 * t412;
t256 = -t317 * t365 + t453;
t255 = t315 * t365 - t453;
t254 = t316 * t367 + t512;
t253 = t317 * t367 + t454;
t242 = -t269 + t296;
t241 = t268 - t296;
t240 = t297 * t367 - t512;
t239 = t297 * t365 + t511;
t223 = -t281 * t365 - t367 * t504;
t221 = -t282 * t365 + t284 * t367;
t219 = t269 - t268;
t212 = -t304 * t429 + t387;
t207 = t237 + t289;
t206 = t306 * t429 + t414;
t181 = -qJD(6) * t272 + t415;
t173 = (-t270 * t372 + t272 * t369) * t299;
t172 = (t270 * t369 + t272 * t372) * t299;
t166 = -pkin(2) * t284 + qJ(3) * t256 + t457;
t165 = -pkin(2) * t282 + qJ(3) * t240 - t456;
t156 = t182 * t372 - t272 * t452;
t155 = -t182 * t369 - t272 * t451;
t154 = t181 * t369 - t270 * t451;
t153 = -t181 * t372 - t270 * t452;
t150 = -t207 * t373 - t528;
t149 = -t464 - t521;
t148 = -t206 * t373 - t521;
t147 = t209 * t373 - t528;
t146 = -t207 * t370 + t527;
t145 = -t208 * t370 + t518;
t144 = -t206 * t370 + t518;
t143 = t209 * t370 + t527;
t142 = -t172 * t370 + t234 * t373;
t141 = t172 * t373 + t234 * t370;
t136 = t241 * t372 - t440;
t135 = -t242 * t369 + t519;
t134 = -t241 * t369 - t467;
t133 = -t242 * t372 - t522;
t124 = t465 - t530;
t123 = -t369 * t427 - t467;
t119 = t466 - t535;
t118 = t205 * t372 - t522;
t116 = -t155 * t370 + t425;
t115 = -t153 * t370 - t425;
t114 = t155 * t373 + t426;
t113 = t153 * t373 - t426;
t108 = -pkin(2) * t260 + qJ(3) * t121;
t107 = -pkin(3) * t505 + t466 - t529;
t106 = t306 * t416 + t376;
t105 = -pkin(3) * t206 - t465 + t534;
t104 = -pkin(2) * t273 + qJ(3) * t223 + t121;
t100 = t369 * t162 + t372 * t388;
t99 = -t158 * t372 - t369 * t398;
t97 = t158 * t369 - t372 * t398;
t96 = -t133 * t370 + t162 * t373;
t95 = -t134 * t370 + t373 * t388;
t94 = t133 * t373 + t162 * t370;
t93 = t134 * t373 + t370 * t388;
t92 = -t146 * t365 + t150 * t367;
t91 = -t143 * t365 + t147 * t367;
t90 = t146 * t367 + t150 * t365;
t89 = t145 * t367 + t149 * t365;
t88 = t144 * t367 + t148 * t365;
t87 = t143 * t367 + t147 * t365;
t86 = t141 * t367 + t142 * t365;
t85 = t122 * t370 + t373 * t398;
t84 = -t122 * t373 + t370 * t398;
t83 = t117 * t370 + t158 * t373;
t82 = -t117 * t373 + t158 * t370;
t81 = (t208 - t289) * pkin(4) + t525;
t80 = pkin(4) * t289 + qJ(5) * t212 - t525;
t79 = t219 * t373 - t370 * t97;
t78 = t219 * t370 + t373 * t97;
t75 = t184 * t373 + t370 * t98;
t74 = t184 * t370 - t373 * t98;
t72 = t114 * t367 + t116 * t365;
t71 = t113 * t367 + t115 * t365;
t70 = -qJ(5) * t500 + t77;
t69 = -pkin(4) * t500 + t76;
t65 = -t212 * t477 + t373 * t80 + t530;
t64 = qJ(5) * t464 - t370 * t81 + t535;
t61 = pkin(5) * t98 - qJ(5) * t100;
t60 = t529 + t370 * t80 + (pkin(3) + t476) * t212;
t59 = t208 * t417 + t373 * t81 - t534;
t58 = t365 * t96 + t367 * t94;
t57 = t365 * t95 + t367 * t93;
t56 = -pkin(3) * t183 + pkin(9) * t63;
t55 = -t365 * t84 + t367 * t85;
t54 = t365 * t85 + t367 * t84;
t53 = -t365 * t82 + t367 * t83;
t52 = t365 * t83 + t367 * t82;
t51 = -pkin(2) * t505 + t107 * t367 + t124 * t365 - t542;
t50 = t365 * t79 + t367 * t78;
t49 = -pkin(9) * t146 - t62;
t48 = t370 * t77 + t373 * t76;
t47 = t370 * t76 - t373 * t77;
t46 = -pkin(2) * t206 + t105 * t367 + t119 * t365 - t550;
t45 = -t365 * t74 + t367 * t75;
t44 = t365 * t75 + t367 * t74;
t43 = pkin(9) * t150 - t523 + t63;
t39 = pkin(5) * t398 - t123 * t480 - t470;
t38 = pkin(5) * t158 - t118 * t480 + t469;
t37 = -pkin(9) * t143 - t370 * t69 + t373 * t70;
t36 = pkin(9) * t147 + t370 * t70 + t373 * t69 - t523;
t35 = t367 * t63 - t472;
t34 = t365 * t63 + t471;
t33 = pkin(5) * t122 - qJ(5) * t123 - t42;
t32 = pkin(5) * t117 - qJ(5) * t118 - t41;
t31 = -pkin(9) * t47 + (-qJ(5) * t373 + t477) * t106;
t30 = pkin(2) * t212 + t365 * t65 + t367 * t60 + t542;
t29 = pkin(2) * t208 + t365 * t64 + t367 * t59 + t550;
t28 = -t365 * t47 + t367 * t48;
t27 = t365 * t48 + t367 * t47;
t26 = pkin(9) * t48 + (-t417 - t476) * t106;
t23 = qJ(3) * t92 + t365 * t49 + t367 * t43 - t524;
t22 = t24 * t370 + t373 * t68;
t21 = -t24 * t373 + t370 * t68;
t20 = pkin(5) * t184 - t100 * t480 - t25;
t19 = -pkin(2) * t183 - pkin(9) * t472 + qJ(3) * t35 + t367 * t56;
t18 = qJ(3) * t91 + t36 * t367 + t365 * t37 - t524;
t17 = -pkin(9) * t84 + t33 * t373 - t370 * t39;
t16 = -pkin(9) * t82 + t32 * t373 - t370 * t38;
t15 = -pkin(3) * t123 + pkin(9) * t85 + t33 * t370 + t373 * t39;
t14 = -pkin(3) * t118 + pkin(9) * t83 + t32 * t370 + t373 * t38;
t13 = -pkin(9) * t74 - t20 * t370 + t373 * t61;
t12 = pkin(5) * t24 - qJ(5) * t25;
t11 = -pkin(3) * t100 + pkin(9) * t75 + t20 * t373 + t370 * t61;
t10 = pkin(5) * t68 - t25 * t480;
t9 = -t21 * t365 + t22 * t367;
t8 = t21 * t367 + t22 * t365;
t7 = -pkin(2) * t106 + qJ(3) * t28 + t26 * t367 + t31 * t365;
t6 = -pkin(2) * t123 + qJ(3) * t55 + t15 * t367 + t17 * t365;
t5 = -pkin(2) * t118 + qJ(3) * t53 + t14 * t367 + t16 * t365;
t4 = -pkin(2) * t100 + qJ(3) * t45 + t11 * t367 + t13 * t365;
t3 = -pkin(9) * t21 - t10 * t370 + t12 * t373;
t2 = -pkin(3) * t25 + pkin(9) * t22 + t10 * t373 + t12 * t370;
t1 = -pkin(2) * t25 + qJ(3) * t9 + t2 * t367 + t3 * t365;
t40 = [0, 0, 0, 0, 0, qJDD(1), t392, t393, 0, 0, (t339 * t366 + t400 * t444) * t371, t368 * t342 + (t371 * t314 + t374 * t421) * t366, t368 * t312 + (t438 + t374 * (-t424 + t483)) * t366, -t400 * t423 + t326, t368 * t313 + (t371 * (t359 - t483) + t436) * t366, t368 * t410, (-t294 + pkin(1) * (t338 * t374 + t341 * t371)) * t368 + (t374 * t320 + pkin(1) * t314 + pkin(8) * (t341 * t374 - t438)) * t366, -t320 * t442 - t368 * t295 + pkin(1) * (-t366 * t421 + (t328 * t374 - t337 * t371) * t368) + (-t328 * t371 - t436) * t475, pkin(1) * (-t312 * t374 + t313 * t371) * t368 + (t312 * t371 + t313 * t374) * t475 + (pkin(1) * (t359 + t424) + t503) * t366, pkin(1) * (t320 * t366 + (-t294 * t374 + t295 * t371) * t368) + t503 * t475, (t310 * t367 + t319 * t365) * t442 + t411 + t368 * t267, t368 * t221 + (t371 * (-t282 * t367 - t284 * t365) + t374 * (-t329 + t484)) * t366, t368 * t254 + (t371 * (-t316 * t365 + t511) + t374 * t281) * t366, (t318 * t367 + t365 * t412) * t442 - t411 + t368 * t266, t368 * t255 + (t371 * (t315 * t367 + t454) + t374 * t504) * t366, t368 * t274 + t326 + t362 * t371 * (-t331 * t367 - t332 * t365) * t431, (t165 + pkin(1) * (t240 * t371 - t282 * t374)) * t368 + (t371 * (-qJ(3) * t239 + t457) + t374 * (-pkin(2) * t239 + t179) - pkin(1) * t239 + pkin(8) * (t240 * t374 + t282 * t371)) * t366, (t166 + pkin(1) * (t256 * t371 - t284 * t374)) * t368 + (t371 * (-qJ(3) * t253 + t456) + t374 * (-pkin(2) * t253 + t180) - pkin(1) * t253 + pkin(8) * (t256 * t374 + t284 * t371)) * t366, (t104 + pkin(1) * (t223 * t371 - t273 * t374)) * t368 + (t371 * t401 + pkin(8) * (t223 * t374 + t273 * t371) + t399 * (t281 * t367 - t365 * t504)) * t366, (t108 + pkin(1) * (t121 * t371 - t260 * t374)) * t368 + (pkin(8) * (t121 * t374 + t260 * t371) - t399 * t401) * t366, t515, t368 * t88 + (t371 * (-t144 * t365 + t148 * t367) - t516) * t366, t545, t514, t547 + (-t374 * t209 - t539) * t366, t513, (t46 + pkin(1) * (-t206 * t374 - t549)) * t368 + (t371 * (-t105 * t365 + t119 * t367 - t551) + t374 * (t102 + t546) - t552 + pkin(8) * (t206 * t371 - t548)) * t366, (t51 + pkin(1) * (-t374 * t505 - t541)) * t368 + (t371 * (-t107 * t365 + t124 * t367 - t543) + t374 * (t103 + t538) - t544 + pkin(8) * (t371 * t505 - t540)) * t366, (t23 + pkin(1) * (t371 * t92 - t517)) * t368 + (t371 * (-qJ(3) * t90 - t365 * t43 + t367 * t49) + t374 * (-pkin(2) * t90 - pkin(3) * t146) - pkin(1) * t90 + pkin(8) * (t374 * t92 + t520)) * t366, (t19 + pkin(1) * (-t183 * t374 + t35 * t371)) * t368 + (t371 * (-pkin(9) * t471 - qJ(3) * t34 - t365 * t56) + t374 * (-pkin(2) * t34 - pkin(3) * t62) - pkin(1) * t34 + pkin(8) * (t183 * t371 + t35 * t374)) * t366, t513, -t545, -t547 + (-t374 * t207 + t539) * t366, t515, t368 * t89 + (t371 * (-t145 * t365 + t149 * t367) - t516) * t366, t514, (t18 + pkin(1) * (t371 * t91 - t517)) * t368 + (t371 * (-qJ(3) * t87 - t36 * t365 + t367 * t37) + t374 * (-pkin(2) * t87 - pkin(3) * t143 - t404) - pkin(1) * t87 + pkin(8) * (t374 * t91 + t520)) * t366, (t29 + pkin(1) * (t208 * t374 + t549)) * t368 + (t371 * (-t365 * t59 + t367 * t64 + t551) + t374 * (-t379 - t546) + t552 + pkin(8) * (-t208 * t371 + t548)) * t366, (t30 + pkin(1) * (t212 * t374 + t541)) * t368 + (t371 * (-t365 * t60 + t367 * t65 + t543) + t374 * (-t495 - t538) + t544 + pkin(8) * (-t212 * t371 + t540)) * t366, (t7 + pkin(1) * (-t106 * t374 + t28 * t371)) * t368 + (t371 * (-qJ(3) * t27 - t26 * t365 + t31 * t367) + t374 * (-pkin(2) * t27 - pkin(3) * t47 - t409) - pkin(1) * t27 + pkin(8) * (t106 * t371 + t28 * t374)) * t366, t368 * t72 + (t371 * (-t114 * t365 + t116 * t367) - t374 * t156) * t366, t368 * t50 + (t371 * (-t365 * t78 + t367 * t79) - t374 * t99) * t366, t368 * t58 + (t371 * (-t365 * t94 + t367 * t96) - t374 * t135) * t366, t368 * t71 + (t371 * (-t113 * t365 + t115 * t367) + t374 * t154) * t366, t368 * t57 + (t371 * (-t365 * t93 + t367 * t95) - t374 * t136) * t366, t368 * t86 + (t371 * (-t141 * t365 + t142 * t367) - t374 * t173) * t366, (t5 + pkin(1) * (-t118 * t374 + t371 * t53)) * t368 + (t371 * (-qJ(3) * t52 - t14 * t365 + t16 * t367) + t374 * (-pkin(2) * t52 - pkin(3) * t82 - t494) - pkin(1) * t52 + pkin(8) * (t118 * t371 + t374 * t53)) * t366, (t6 + pkin(1) * (-t123 * t374 + t371 * t55)) * t368 + (t371 * (-qJ(3) * t54 - t15 * t365 + t17 * t367) + t374 * (-pkin(2) * t54 - pkin(3) * t84 - t493) - pkin(1) * t54 + pkin(8) * (t123 * t371 + t374 * t55)) * t366, (t4 + pkin(1) * (-t100 * t374 + t371 * t45)) * t368 + (t371 * (-qJ(3) * t44 - t11 * t365 + t13 * t367) + t374 * (-pkin(2) * t44 - pkin(3) * t74 - t496) - pkin(1) * t44 + pkin(8) * (t100 * t371 + t374 * t45)) * t366, (t1 + pkin(1) * (-t25 * t374 + t371 * t9)) * t368 + (t371 * (-qJ(3) * t8 - t2 * t365 + t3 * t367) + t374 * (-pkin(2) * t8 - pkin(3) * t21 - t497) - pkin(1) * t8 + pkin(8) * (t25 * t371 + t374 * t9)) * t366; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t351, t342, t312, t351, t313, t410, -t294, -t295, 0, 0, t267, t221, t254, t266, t255, t274, t165, t166, t104, t108, t490, t88, t138, t491, t140, t492, t46, t51, t23, t19, t492, -t138, -t140, t490, t89, t491, t18, t29, t30, t7, t72, t50, t58, t71, t57, t86, t5, t6, t4, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t282, t284, t273, t260, 0, 0, 0, 0, 0, 0, t206, t505, t500, t183, 0, 0, 0, 0, 0, 0, t500, -t208, -t212, t106, 0, 0, 0, 0, 0, 0, t118, t123, t100, t25; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t449, t501, -t215, -t449, t209, -t334, -t102, -t103, 0, 0, -t334, t215, t207, t449, t501, -t449, t404, t379, t495, t409, t156, t99, t135, -t154, t136, t173, t494, t493, t496, t497; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t215, -t385, t502, t77, 0, 0, 0, 0, 0, 0, t117, t122, t98, t24; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t220, t219, t162, -t220, t388, t234, -t41, -t42, 0, 0;];
tauJ_reg  = t40;
