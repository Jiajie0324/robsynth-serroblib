% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RRPRPR10
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta3]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 15:47
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RRPRPR10_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR10_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR10_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR10_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR10_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRPR10_invdynB_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 15:44:16
% EndTime: 2019-05-06 15:45:36
% DurationCPUTime: 81.77s
% Computational Cost: add. (312055->1002), mult. (715785->1567), div. (0->0), fcn. (578388->12), ass. (0->740)
t1192 = sin(qJ(1));
t1196 = cos(qJ(1));
t1186 = sin(pkin(6));
t1188 = cos(pkin(6));
t1191 = sin(qJ(2));
t1195 = cos(qJ(2));
t1185 = sin(pkin(11));
t1187 = cos(pkin(11));
t1358 = qJD(1) * t1188;
t1304 = qJD(2) + t1358;
t1331 = t1186 * t1191;
t1317 = qJD(1) * t1331;
t1144 = t1185 * t1304 + t1187 * t1317;
t1190 = sin(qJ(4));
t1194 = cos(qJ(4));
t1236 = t1185 * t1317 - t1187 * t1304;
t1103 = t1190 * t1144 + t1194 * t1236;
t1318 = t1191 * qJDD(1);
t1357 = qJD(1) * t1195;
t1151 = (qJD(2) * t1357 + t1318) * t1186;
t1300 = qJDD(1) * t1188 + qJDD(2);
t1116 = t1187 * t1151 + t1185 * t1300;
t1212 = t1185 * t1151 - t1187 * t1300;
t1201 = t1194 * t1116 - t1190 * t1212;
t1015 = -t1103 * qJD(4) + t1201;
t1330 = t1186 * t1195;
t1316 = qJD(1) * t1330;
t1170 = -qJD(4) + t1316;
t1341 = t1103 * t1170;
t1394 = t1341 - t1015;
t1166 = t1170 ^ 2;
t1105 = t1194 * t1144 - t1190 * t1236;
t1381 = t1105 ^ 2;
t1075 = -t1381 + t1166;
t1319 = qJDD(1) * t1186;
t1152 = -qJD(2) * t1317 + t1195 * t1319;
t1146 = -qJDD(4) + t1152;
t1342 = t1103 * t1105;
t1210 = t1146 + t1342;
t1399 = t1190 * t1210;
t960 = t1075 * t1194 - t1399;
t1398 = t1194 * t1210;
t963 = t1075 * t1190 + t1398;
t866 = t1185 * t960 + t1187 * t963;
t1273 = t1191 * t866 - t1195 * t1394;
t862 = t1185 * t963 - t1187 * t960;
t756 = -t1186 * t862 + t1188 * t1273;
t812 = t1191 * t1394 + t1195 * t866;
t1474 = t1192 * t756 - t1196 * t812;
t1473 = t1192 * t812 + t1196 * t756;
t1470 = t1186 * t1273 + t1188 * t862;
t1382 = t1103 ^ 2;
t1028 = -t1166 - t1382;
t926 = t1028 * t1190 - t1398;
t928 = t1028 * t1194 + t1399;
t828 = t1185 * t928 + t1187 * t926;
t1469 = qJ(3) * t828;
t831 = t1185 * t926 - t1187 * t928;
t1468 = qJ(3) * t831;
t1055 = t1381 + t1166;
t1211 = t1146 - t1342;
t1397 = t1211 * t1190;
t945 = t1055 * t1194 - t1397;
t1396 = t1211 * t1194;
t946 = t1055 * t1190 + t1396;
t846 = t1185 * t946 - t1187 * t945;
t1467 = qJ(3) * t846;
t848 = t1185 * t945 + t1187 * t946;
t1466 = qJ(3) * t848;
t1465 = t1186 * t828;
t1464 = t1186 * t846;
t1074 = t1382 - t1166;
t962 = t1074 * t1190 - t1396;
t966 = t1074 * t1194 + t1397;
t865 = t1185 * t966 + t1187 * t962;
t1462 = t1186 * t865;
t1461 = t1188 * t828;
t1460 = t1188 * t846;
t1458 = t1188 * t865;
t1457 = t1191 * t831;
t1456 = t1191 * t848;
t868 = t1185 * t962 - t1187 * t966;
t1455 = t1191 * t868;
t1454 = t1195 * t831;
t1453 = t1195 * t848;
t1452 = t1195 * t868;
t1451 = pkin(2) * t846 - pkin(3) * t945;
t1450 = -pkin(2) * t828 - pkin(3) * t926;
t1447 = pkin(9) * t926;
t1446 = pkin(9) * t928;
t1445 = pkin(9) * t945;
t1444 = pkin(9) * t946;
t1380 = -2 * qJD(5);
t1313 = t1191 * t1342;
t1334 = t1170 * t1190;
t1294 = t1194 * t1015 + t1105 * t1334;
t1333 = t1170 * t1194;
t1296 = t1190 * t1015 - t1105 * t1333;
t1385 = -t1185 * t1296 + t1187 * t1294;
t1405 = t1195 * t1385 + t1313;
t1384 = t1185 * t1294 + t1187 * t1296;
t1312 = t1195 * t1342;
t1407 = t1191 * t1385 - t1312;
t1429 = -t1186 * t1384 + t1188 * t1407;
t1443 = -t1192 * t1429 + t1196 * t1405;
t1302 = t1190 * t1116 + t1194 * t1212;
t1014 = qJD(4) * t1105 + t1302;
t1239 = t1014 * t1190 - t1103 * t1333;
t1295 = -t1194 * t1014 - t1103 * t1334;
t1387 = -t1185 * t1295 + t1187 * t1239;
t1404 = t1195 * t1387 - t1313;
t1386 = t1185 * t1239 + t1187 * t1295;
t1406 = t1191 * t1387 + t1312;
t1430 = -t1186 * t1386 + t1188 * t1406;
t1442 = -t1192 * t1430 + t1196 * t1404;
t1441 = t1192 * t1405 + t1196 * t1429;
t1440 = t1192 * t1404 + t1196 * t1430;
t1214 = t1144 * t1236;
t1408 = -t1152 - t1214;
t1439 = t1185 * t1408;
t1438 = t1187 * t1408;
t1395 = t1015 + t1341;
t1377 = pkin(2) * t1195;
t1297 = -qJ(3) * t1191 - t1377;
t1359 = qJD(1) * t1186;
t1148 = t1297 * t1359;
t1299 = t1304 ^ 2;
t1173 = g(1) * t1196 + g(2) * t1192;
t1197 = qJD(1) ^ 2;
t1147 = -pkin(1) * t1197 + pkin(8) * t1319 - t1173;
t1172 = t1192 * g(1) - t1196 * g(2);
t1374 = pkin(8) * t1186;
t1208 = qJDD(1) * pkin(1) + t1197 * t1374 + t1172;
t1205 = t1188 * t1208;
t1301 = t1191 * t1147 - t1195 * t1205;
t1042 = -t1300 * pkin(2) - t1299 * qJ(3) + (qJD(1) * t1148 * t1191 + g(3) * t1195) * t1186 + qJDD(3) + t1301;
t1117 = -pkin(3) * t1316 - pkin(9) * t1144;
t1220 = t1236 ^ 2;
t939 = t1212 * pkin(3) - t1220 * pkin(9) + t1144 * t1117 + t1042;
t1199 = t1014 * pkin(4) - qJ(5) * t1395 + t939;
t1433 = t1105 * t1380 + t1199;
t1432 = t1186 * t1406 + t1188 * t1386;
t1431 = t1186 * t1407 + t1188 * t1384;
t1328 = t1188 * t1195;
t1329 = t1188 * t1191;
t1237 = (t1103 * t1190 + t1105 * t1194) * t1170;
t1238 = (t1103 * t1194 - t1105 * t1190) * t1170;
t1388 = -t1185 * t1237 + t1187 * t1238;
t1389 = t1185 * t1238 + t1187 * t1237;
t1401 = t1146 * t1328 - t1186 * t1389 + t1329 * t1388;
t1403 = -t1146 * t1191 + t1195 * t1388;
t1428 = t1192 * t1403 + t1196 * t1401;
t1427 = -t1192 * t1401 + t1196 * t1403;
t1392 = -t1382 - t1381;
t1426 = pkin(2) * t1392;
t1425 = pkin(3) * t1392;
t1189 = sin(qJ(6));
t1011 = qJDD(6) + t1015;
t1193 = cos(qJ(6));
t1065 = -t1193 * t1103 - t1170 * t1189;
t1067 = t1103 * t1189 - t1170 * t1193;
t994 = t1067 * t1065;
t1400 = -t994 + t1011;
t1420 = t1189 * t1400;
t1419 = t1190 * t1394;
t1418 = t1190 * t1395;
t1417 = t1191 * t1392;
t1393 = -t1381 + t1382;
t1416 = t1191 * t1393;
t1414 = t1193 * t1400;
t1413 = t1194 * t1394;
t1412 = t1194 * t1395;
t1411 = t1195 * t1392;
t1410 = t1195 * t1393;
t1402 = t1146 * t1330 + t1188 * t1389 + t1331 * t1388;
t1182 = t1186 ^ 2;
t1332 = t1182 * t1197;
t1215 = qJD(1) * t1236;
t1127 = t1215 * t1330;
t1077 = -t1116 + t1127;
t1128 = t1144 * t1316;
t1080 = -t1212 - t1128;
t1030 = pkin(4) * t1103 - qJ(5) * t1105;
t1202 = -g(3) * t1331 + t1191 * t1205;
t1046 = -t1299 * pkin(2) + t1300 * qJ(3) + (t1148 * t1359 + t1147) * t1195 + t1202;
t1264 = qJD(1) * t1304;
t1240 = t1191 * t1264;
t1241 = t1195 * t1264;
t1373 = t1188 * g(3);
t1047 = -t1152 * pkin(2) - t1373 - t1151 * qJ(3) + (pkin(2) * t1240 - qJ(3) * t1241 - t1208) * t1186;
t933 = 0.2e1 * qJD(3) * t1144 + t1185 * t1046 - t1187 * t1047;
t882 = pkin(3) * t1408 + pkin(9) * t1077 - t933;
t934 = -0.2e1 * qJD(3) * t1236 + t1187 * t1046 + t1185 * t1047;
t902 = -pkin(3) * t1220 - pkin(9) * t1212 + t1117 * t1316 + t934;
t803 = t1190 * t902 - t1194 * t882;
t1247 = t1146 * pkin(4) - t1166 * qJ(5) + t1105 * t1030 + qJDD(5) + t803;
t739 = -pkin(5) * t1394 + t1210 * pkin(10) + t1247;
t1071 = pkin(5) * t1105 + pkin(10) * t1170;
t1306 = -pkin(4) * t1170 + t1380;
t761 = (-t1071 + t1306) * t1105 - t1382 * pkin(5) + t1014 * pkin(10) + t1199;
t1305 = -t1189 * t761 + t1193 * t739;
t673 = t1189 * t739 + t1193 * t761;
t635 = -t1189 * t1305 + t1193 * t673;
t634 = t1189 * t673 + t1193 * t1305;
t1064 = t1065 ^ 2;
t1383 = t1067 ^ 2;
t1098 = qJD(6) + t1105;
t1095 = t1098 ^ 2;
t1142 = t1144 ^ 2;
t1379 = pkin(4) + pkin(10);
t1378 = pkin(2) * t1191;
t1376 = pkin(4) * t1190;
t1375 = pkin(4) * t1194;
t804 = t1190 * t882 + t1194 * t902;
t1372 = qJ(5) * t1146;
t726 = t1190 * t804 - t1194 * t803;
t1371 = t1185 * t726;
t1370 = t1187 * t726;
t1251 = -t1166 * pkin(4) - t1030 * t1103 + t804;
t741 = -t1372 - t1014 * pkin(5) - t1382 * pkin(10) + (t1380 - t1071) * t1170 + t1251;
t1368 = t1189 * t741;
t923 = t994 + t1011;
t1367 = t1189 * t923;
t1366 = t1190 * t939;
t1364 = t1193 * t741;
t1363 = t1193 * t923;
t1362 = t1194 * t939;
t1086 = t1170 * t1105;
t969 = t1014 - t1086;
t1361 = t1194 * t969;
t1360 = qJD(1) * t1144;
t1349 = t1042 * t1185;
t1348 = t1042 * t1187;
t1347 = t1065 * t1098;
t1082 = t1152 - t1214;
t1346 = t1082 * t1185;
t1345 = t1082 * t1187;
t1344 = t1098 * t1189;
t1343 = t1098 * t1193;
t1323 = t1191 * t1195;
t1310 = t1182 * t1323;
t1169 = t1197 * t1310;
t1149 = -t1169 + t1300;
t1338 = t1149 * t1191;
t1337 = t1149 * t1195;
t1150 = t1169 + t1300;
t1336 = t1150 * t1191;
t1335 = t1150 * t1195;
t1061 = -t1127 * t1187 + t1185 * t1212;
t1327 = t1191 * t1061;
t1063 = t1116 * t1187 + t1128 * t1185;
t1326 = t1191 * t1063;
t1129 = t1186 * t1208 + t1373;
t1325 = t1191 * t1129;
t1324 = t1191 * t1152;
t1322 = t1195 * t1129;
t1321 = qJD(4) - t1170;
t1315 = t1190 * t994;
t1314 = t1194 * t994;
t1183 = t1191 ^ 2;
t1311 = t1183 * t1332;
t1309 = t1065 * qJD(6) - t1189 * t1014 + t1193 * t1146;
t1308 = -t1095 - t1383;
t1307 = qJ(5) * t1190 + pkin(3);
t842 = t1185 * t933 + t1187 * t934;
t727 = t1190 * t803 + t1194 * t804;
t1303 = t1193 * t1014 + t1189 * t1146;
t1131 = -t1172 * t1192 - t1196 * t1173;
t1168 = qJDD(1) * t1196 - t1192 * t1197;
t1298 = -pkin(7) * t1168 - g(3) * t1192;
t1141 = -t1311 - t1299;
t1107 = -t1141 * t1191 - t1337;
t1293 = pkin(8) * t1107 - t1325;
t1184 = t1195 ^ 2;
t1177 = t1184 * t1332;
t1156 = -t1177 - t1299;
t1111 = t1156 * t1195 - t1336;
t1292 = pkin(8) * t1111 + t1322;
t841 = t1185 * t934 - t1187 * t933;
t625 = t1190 * t741 - t1194 * t634;
t626 = t1190 * t634 + t1194 * t741;
t587 = -t1185 * t625 + t1187 * t626;
t1291 = t1191 * t587 - t1195 * t635;
t1216 = 0.2e1 * qJD(5) * t1170 - t1251;
t770 = -t1216 - t1372;
t689 = t1190 * t770 - t1194 * t1247;
t690 = t1190 * t1247 + t1194 * t770;
t645 = -t1185 * t689 + t1187 * t690;
t807 = t1105 * t1306 + t1199;
t1290 = t1191 * t645 - t1195 * t807;
t659 = t1187 * t727 - t1371;
t1289 = t1191 * t659 - t1195 * t939;
t1217 = (-qJD(6) + t1098) * t1067 + t1303;
t1249 = -t1309 + t1347;
t797 = t1189 * t1217 - t1193 * t1249;
t941 = -t1064 - t1383;
t768 = t1190 * t941 - t1194 * t797;
t769 = t1190 * t797 + t1194 * t941;
t686 = -t1185 * t768 + t1187 * t769;
t799 = t1189 * t1249 + t1193 * t1217;
t1288 = t1191 * t686 - t1195 * t799;
t1250 = -t1309 - t1347;
t891 = (qJD(6) + t1098) * t1067 - t1303;
t796 = t1189 * t891 - t1193 * t1250;
t993 = -t1064 + t1383;
t774 = t1190 * t993 + t1194 * t796;
t775 = -t1190 * t796 + t1194 * t993;
t698 = -t1185 * t774 + t1187 * t775;
t798 = t1189 * t1250 + t1193 * t891;
t1287 = t1191 * t698 + t1195 * t798;
t967 = -t1095 - t1064;
t836 = t1189 * t967 + t1414;
t778 = t1190 * t891 - t1194 * t836;
t779 = t1190 * t836 + t1194 * t891;
t707 = -t1185 * t778 + t1187 * t779;
t837 = t1193 * t967 - t1420;
t1286 = t1191 * t707 - t1195 * t837;
t843 = t1193 * t1308 - t1367;
t780 = t1190 * t1250 - t1194 * t843;
t781 = t1190 * t843 + t1194 * t1250;
t710 = -t1185 * t780 + t1187 * t781;
t844 = -t1189 * t1308 - t1363;
t1285 = t1191 * t710 - t1195 * t844;
t1018 = t1064 - t1095;
t859 = -t1018 * t1189 - t1363;
t792 = t1190 * t1217 + t1194 * t859;
t794 = -t1190 * t859 + t1194 * t1217;
t717 = -t1185 * t792 + t1187 * t794;
t861 = -t1018 * t1193 + t1367;
t1284 = t1191 * t717 + t1195 * t861;
t1019 = t1095 - t1383;
t858 = -t1019 * t1193 - t1420;
t793 = t1190 * t1249 + t1194 * t858;
t795 = -t1190 * t858 + t1194 * t1249;
t718 = -t1185 * t793 + t1187 * t795;
t860 = t1019 * t1189 - t1414;
t1283 = t1191 * t718 + t1195 * t860;
t935 = -qJD(6) * t1067 + t1303;
t883 = -t1065 * t1344 - t1193 * t935;
t832 = t1194 * t883 - t1315;
t834 = -t1190 * t883 - t1314;
t754 = -t1185 * t832 + t1187 * t834;
t884 = -t1065 * t1343 + t1189 * t935;
t1282 = t1191 * t754 + t1195 * t884;
t885 = -t1067 * t1343 + t1189 * t1309;
t833 = t1194 * t885 + t1315;
t835 = -t1190 * t885 + t1314;
t755 = -t1185 * t833 + t1187 * t835;
t886 = t1067 * t1344 + t1193 * t1309;
t1281 = t1191 * t755 + t1195 * t886;
t924 = (t1065 * t1189 + t1067 * t1193) * t1098;
t870 = t1011 * t1190 + t1194 * t924;
t871 = t1011 * t1194 - t1190 * t924;
t783 = -t1185 * t870 + t1187 * t871;
t925 = (t1065 * t1193 - t1067 * t1189) * t1098;
t1280 = t1191 * t783 + t1195 * t925;
t970 = (-qJD(4) - t1170) * t1105 - t1302;
t872 = t1190 * t970 + t1413;
t876 = t1194 * t970 - t1419;
t788 = -t1185 * t872 + t1187 * t876;
t1279 = t1191 * t788 - t1411;
t971 = -t1014 - t1086;
t875 = t1190 * t971 + t1413;
t879 = t1194 * t971 - t1419;
t791 = -t1185 * t875 + t1187 * t879;
t1278 = t1191 * t791 - t1411;
t968 = t1105 * t1321 + t1302;
t1277 = -t1195 * t968 - t1457;
t1276 = t1195 * t969 + t1457;
t1275 = -t1195 * t1395 + t1456;
t973 = -t1103 * t1321 + t1201;
t1274 = t1195 * t973 - t1456;
t1271 = t1195 * t971 + t1455;
t1270 = -t1195 * t970 - t1455;
t873 = -t1190 * t968 + t1412;
t877 = -t1194 * t968 - t1418;
t789 = -t1185 * t873 + t1187 * t877;
t1269 = t1191 * t789 + t1410;
t874 = -t1190 * t969 + t1412;
t878 = -t1361 - t1418;
t790 = -t1185 * t874 + t1187 * t878;
t1268 = t1191 * t790 + t1410;
t1267 = -t1042 * t1195 + t1191 * t842;
t1068 = t1220 + t1142;
t998 = -t1077 * t1185 + t1080 * t1187;
t1266 = t1068 * t1195 + t1191 * t998;
t1108 = -t1142 + t1220;
t1079 = t1128 - t1212;
t1081 = t1127 + t1116;
t997 = t1079 * t1187 - t1081 * t1185;
t1265 = t1108 * t1195 + t1191 * t997;
t1096 = -t1177 - t1220;
t1017 = t1096 * t1187 - t1439;
t1263 = t1017 * t1191 + t1079 * t1195;
t1125 = -t1142 - t1177;
t1036 = -t1125 * t1185 + t1345;
t1262 = t1036 * t1191 - t1081 * t1195;
t1124 = -t1142 + t1177;
t1037 = -t1124 * t1185 + t1438;
t1261 = t1037 * t1191 + t1077 * t1195;
t1123 = t1220 - t1177;
t1038 = t1123 * t1187 + t1346;
t1260 = t1038 * t1191 - t1080 * t1195;
t1093 = g(3) * t1330 + t1301;
t1094 = t1195 * t1147 + t1202;
t1259 = -t1195 * t1093 + t1191 * t1094;
t1029 = t1093 * t1191 + t1094 * t1195;
t1160 = t1186 * t1241;
t1119 = t1160 + t1151;
t1159 = t1186 * t1240;
t1122 = t1152 - t1159;
t1258 = t1119 * t1195 + t1122 * t1191;
t1120 = -t1160 + t1151;
t1121 = t1152 + t1159;
t1257 = -t1120 * t1195 + t1121 * t1191;
t1256 = t1141 * t1195 - t1338;
t1155 = t1177 - t1299;
t1255 = t1155 * t1191 + t1337;
t1154 = t1299 - t1311;
t1254 = t1154 * t1195 + t1336;
t1253 = t1156 * t1191 + t1335;
t1130 = t1172 * t1196 - t1173 * t1192;
t1252 = t1186 * t1300;
t1242 = t1186 * t1264;
t591 = pkin(5) * t741 - t1379 * t635;
t598 = pkin(5) * t634 - qJ(5) * t635;
t565 = -pkin(3) * t635 + pkin(9) * t626 + t1190 * t598 + t1194 * t591;
t572 = -pkin(9) * t625 - t1190 * t591 + t1194 * t598;
t586 = t1185 * t626 + t1187 * t625;
t556 = -qJ(3) * t586 - t1185 * t565 + t1187 * t572;
t570 = -pkin(2) * t586 - pkin(3) * t625 - qJ(5) * t741 + t1379 * t634;
t578 = t1191 * t635 + t1195 * t587;
t1234 = pkin(8) * t578 + t1191 * t556 + t1195 * t570;
t615 = pkin(5) * t941 - t1379 * t799 - t635;
t725 = pkin(5) * t797 - qJ(5) * t799;
t594 = -pkin(3) * t799 + pkin(9) * t769 + t1190 * t725 + t1194 * t615;
t599 = -pkin(9) * t768 - t1190 * t615 + t1194 * t725;
t685 = t1185 * t769 + t1187 * t768;
t575 = -qJ(3) * t685 - t1185 * t594 + t1187 * t599;
t597 = -pkin(2) * t685 - pkin(3) * t768 - qJ(5) * t941 + t1379 * t797 + t634;
t665 = t1191 * t799 + t1195 * t686;
t1233 = pkin(8) * t665 + t1191 * t575 + t1195 * t597;
t654 = pkin(5) * t836 - qJ(5) * t837 + t1305;
t667 = pkin(5) * t891 - t1379 * t837 + t1364;
t607 = -pkin(3) * t837 + pkin(9) * t779 + t1190 * t654 + t1194 * t667;
t610 = -pkin(9) * t778 - t1190 * t667 + t1194 * t654;
t706 = t1185 * t779 + t1187 * t778;
t580 = -qJ(3) * t706 - t1185 * t607 + t1187 * t610;
t627 = -pkin(2) * t706 - pkin(3) * t778 - qJ(5) * t891 + t1379 * t836 - t1368;
t674 = t1191 * t837 + t1195 * t707;
t1232 = pkin(8) * t674 + t1191 * t580 + t1195 * t627;
t655 = pkin(5) * t843 - qJ(5) * t844 - t673;
t669 = pkin(5) * t1250 - t1379 * t844 - t1368;
t609 = -pkin(3) * t844 + pkin(9) * t781 + t1190 * t655 + t1194 * t669;
t611 = -pkin(9) * t780 - t1190 * t669 + t1194 * t655;
t709 = t1185 * t781 + t1187 * t780;
t581 = -qJ(3) * t709 - t1185 * t609 + t1187 * t611;
t629 = -pkin(2) * t709 - pkin(3) * t780 - qJ(5) * t1250 + t1379 * t843 - t1364;
t675 = t1191 * t844 + t1195 * t710;
t1231 = pkin(8) * t675 + t1191 * t581 + t1195 * t629;
t641 = pkin(9) * t690 + (-t1307 - t1375) * t807;
t644 = t1185 * t690 + t1187 * t689;
t653 = -pkin(9) * t689 + (-qJ(5) * t1194 + t1376) * t807;
t590 = -qJ(3) * t644 - t1185 * t641 + t1187 * t653;
t603 = -pkin(2) * t644 - pkin(3) * t689 + pkin(4) * t1247 - qJ(5) * t770;
t636 = t1191 * t807 + t1195 * t645;
t1230 = pkin(8) * t636 + t1191 * t590 + t1195 * t603;
t743 = -pkin(4) * t1392 + t770;
t744 = -qJ(5) * t1392 + t1247;
t664 = pkin(9) * t876 + t1190 * t744 + t1194 * t743 - t1425;
t666 = -pkin(9) * t872 - t1190 * t743 + t1194 * t744;
t784 = t1185 * t876 + t1187 * t872;
t616 = -qJ(3) * t784 - t1185 * t664 + t1187 * t666;
t714 = -pkin(2) * t784 - pkin(3) * t872 - pkin(4) * t1394 - qJ(5) * t970;
t762 = t1195 * t788 + t1417;
t1229 = pkin(8) * t762 + t1191 * t616 + t1195 * t714;
t658 = t1185 * t727 + t1370;
t713 = -pkin(3) * t939 + pkin(9) * t727;
t621 = -pkin(9) * t1370 - qJ(3) * t658 - t1185 * t713;
t637 = -pkin(2) * t658 - pkin(3) * t726;
t657 = t1191 * t939 + t1195 * t659;
t1228 = pkin(8) * t657 + t1191 * t621 + t1195 * t637;
t677 = pkin(9) * t879 - t1425 + t727;
t691 = -pkin(9) * t875 - t726;
t787 = t1185 * t879 + t1187 * t875;
t631 = -qJ(3) * t787 - t1185 * t677 + t1187 * t691;
t740 = -pkin(2) * t787 - pkin(3) * t875;
t763 = t1195 * t791 + t1417;
t1227 = pkin(8) * t763 + t1191 * t631 + t1195 * t740;
t777 = (t969 - t1086) * pkin(4) + t1433;
t719 = t1194 * t777 + t1307 * t969 - t1446;
t732 = qJ(5) * t1361 - t1190 * t777 + t1447;
t650 = -t1185 * t719 + t1187 * t732 + t1469;
t684 = -pkin(4) * t1210 + qJ(5) * t1028 - t1247 - t1450;
t801 = -t1191 * t969 + t1454;
t1226 = pkin(8) * t801 + t1191 * t650 + t1195 * t684;
t776 = pkin(4) * t1086 + qJ(5) * t973 - t1433;
t723 = -t1444 + t1190 * t776 + (pkin(3) + t1375) * t973;
t734 = t1194 * t776 - t1376 * t973 - t1445;
t652 = -t1185 * t723 + t1187 * t734 + t1467;
t696 = -pkin(4) * t1055 + (t1211 + t1146) * qJ(5) + t1216 + t1451;
t810 = -t1191 * t973 - t1453;
t1225 = pkin(8) * t810 + t1191 * t652 + t1195 * t696;
t806 = -pkin(3) * t968 - t1362 + t1446;
t838 = t1366 - t1447;
t708 = -t1185 * t806 + t1187 * t838 - t1469;
t722 = t1450 + t803;
t800 = t1191 * t968 - t1454;
t1224 = pkin(8) * t800 + t1191 * t708 + t1195 * t722;
t808 = -pkin(3) * t1395 + t1366 + t1444;
t845 = t1362 + t1445;
t720 = -t1185 * t808 + t1187 * t845 - t1467;
t730 = -t1451 + t804;
t809 = t1191 * t1395 + t1453;
t1223 = pkin(8) * t809 + t1191 * t720 + t1195 * t730;
t1016 = t1096 * t1185 + t1438;
t889 = -pkin(2) * t1016 + t933;
t932 = -qJ(3) * t1016 + t1349;
t958 = t1017 * t1195 - t1079 * t1191;
t1222 = pkin(8) * t958 + t1191 * t932 + t1195 * t889;
t1033 = t1125 * t1187 + t1346;
t897 = -pkin(2) * t1033 + t934;
t942 = -qJ(3) * t1033 + t1348;
t982 = t1036 * t1195 + t1081 * t1191;
t1221 = pkin(8) * t982 + t1191 * t942 + t1195 * t897;
t1057 = t1120 * t1191 + t1121 * t1195;
t1219 = pkin(8) * t1057 + t1029;
t996 = t1077 * t1187 + t1080 * t1185;
t811 = -qJ(3) * t996 - t841;
t940 = -t1068 * t1191 + t1195 * t998;
t1218 = pkin(8) * t940 + t1191 * t811 - t1377 * t996;
t1213 = -t1188 * t1197 + t1264;
t820 = t1042 * t1191 + t1195 * t842;
t1209 = pkin(8) * t820 + t1297 * t841;
t1207 = t1191 * t1214;
t1206 = t1195 * t1214;
t1204 = t1188 * t1206;
t1203 = t1186 * t1332 + t1188 * t1242;
t1167 = qJDD(1) * t1192 + t1196 * t1197;
t1158 = -t1177 - t1311;
t1157 = -t1177 + t1311;
t1153 = -pkin(7) * t1167 + g(3) * t1196;
t1139 = t1152 * t1328;
t1138 = t1152 * t1330;
t1126 = t1304 * (t1183 + t1184) * t1359;
t1118 = (t1318 + (0.2e1 * qJD(2) + t1358) * t1357) * t1186;
t1113 = t1195 * t1151 - t1183 * t1242;
t1112 = -t1184 * t1242 - t1324;
t1110 = t1155 * t1195 - t1338;
t1109 = -t1154 * t1191 + t1335;
t1090 = (t1188 * t1151 + t1195 * t1203) * t1191;
t1089 = -t1203 * t1323 + t1139;
t1070 = (-t1185 * t1360 + t1187 * t1215) * t1330;
t1069 = (t1185 * t1215 + t1187 * t1360) * t1330;
t1062 = t1116 * t1185 - t1128 * t1187;
t1060 = -t1127 * t1185 - t1187 * t1212;
t1058 = -t1119 * t1191 + t1122 * t1195;
t1054 = t1186 * t1122 + t1188 * t1253;
t1053 = -t1186 * t1121 + t1188 * t1255;
t1052 = -t1186 * t1120 + t1188 * t1254;
t1051 = -t1188 * t1122 + t1186 * t1253;
t1050 = -t1186 * t1118 + t1188 * t1256;
t1049 = t1188 * t1118 + t1186 * t1256;
t1048 = t1070 * t1195 - t1324;
t1045 = -t1186 * t1157 + t1188 * t1258;
t1044 = -t1186 * t1158 + t1188 * t1257;
t1043 = t1188 * t1158 + t1186 * t1257;
t1035 = t1123 * t1185 - t1345;
t1034 = t1124 * t1187 + t1439;
t1027 = t1195 * t1063 + t1207;
t1026 = t1195 * t1061 - t1207;
t1000 = -t1054 * t1192 + t1111 * t1196;
t999 = t1054 * t1196 + t1111 * t1192;
t995 = t1079 * t1185 + t1081 * t1187;
t992 = -t1050 * t1192 + t1107 * t1196;
t991 = t1050 * t1196 + t1107 * t1192;
t990 = t1186 * t1129 + t1188 * t1259;
t989 = -t1188 * t1129 + t1186 * t1259;
t985 = -t1069 * t1186 + t1070 * t1329 + t1139;
t984 = t1038 * t1195 + t1080 * t1191;
t983 = t1037 * t1195 - t1077 * t1191;
t981 = -t1044 * t1192 + t1057 * t1196;
t980 = t1044 * t1196 + t1057 * t1192;
t978 = -t1108 * t1191 + t1195 * t997;
t949 = -t1186 * t1062 + t1188 * t1326 - t1204;
t948 = -t1186 * t1060 + t1188 * t1327 + t1204;
t943 = -t1325 + (-t1051 * t1186 - t1054 * t1188) * pkin(8);
t938 = -t1322 + (-t1049 * t1186 - t1050 * t1188) * pkin(8);
t937 = -pkin(1) * t1051 + t1186 * t1093 + t1188 * t1292;
t930 = -pkin(1) * t1049 + t1186 * t1094 + t1188 * t1293;
t916 = -pkin(2) * t1081 + qJ(3) * t1036 + t1349;
t915 = pkin(8) * t1029 * t1188 - pkin(1) * t989;
t914 = t1029 * t1196 - t1192 * t990;
t913 = t1029 * t1192 + t1196 * t990;
t912 = -t1186 * t1035 + t1188 * t1260;
t911 = -t1186 * t1034 + t1188 * t1261;
t910 = -t1186 * t1033 + t1188 * t1262;
t909 = t1188 * t1033 + t1186 * t1262;
t908 = pkin(2) * t1079 + qJ(3) * t1017 - t1348;
t905 = -pkin(1) * t1043 + t1188 * t1219;
t904 = (-t1186 * t989 - t1188 * t990) * pkin(8);
t903 = (-t1043 * t1186 - t1044 * t1188) * pkin(8) - t1259;
t901 = -t1186 * t1016 + t1188 * t1263;
t900 = t1188 * t1016 + t1186 * t1263;
t896 = -t1186 * t995 + t1188 * t1265;
t888 = -t1186 * t996 + t1188 * t1266;
t887 = t1186 * t1266 + t1188 * t996;
t840 = -t1192 * t910 + t1196 * t982;
t839 = t1192 * t982 + t1196 * t910;
t823 = -t1192 * t901 + t1196 * t958;
t822 = t1192 * t958 + t1196 * t901;
t821 = -pkin(2) * t1042 + qJ(3) * t842;
t819 = -t1192 * t888 + t1196 * t940;
t818 = t1192 * t940 + t1196 * t888;
t815 = t1191 * t970 - t1452;
t814 = -t1191 * t971 + t1452;
t805 = pkin(2) * t1068 + qJ(3) * t998 + t842;
t786 = t1185 * t878 + t1187 * t874;
t785 = t1185 * t877 + t1187 * t873;
t782 = t1185 * t871 + t1187 * t870;
t772 = t1195 * t790 - t1416;
t771 = t1195 * t789 - t1416;
t759 = t1188 * t1270 - t1462;
t758 = t1188 * t1271 + t1462;
t753 = t1185 * t835 + t1187 * t833;
t752 = t1185 * t834 + t1187 * t832;
t751 = t1188 * t1274 + t1464;
t750 = t1188 * t1275 - t1464;
t749 = t1186 * t1274 - t1460;
t748 = t1186 * t1275 + t1460;
t747 = -t1191 * t925 + t1195 * t783;
t746 = -t1186 * t841 + t1188 * t1267;
t745 = t1186 * t1267 + t1188 * t841;
t742 = -t1191 * t897 + t1195 * t942 + (-t1186 * t909 - t1188 * t910) * pkin(8);
t738 = t1188 * t1276 + t1465;
t737 = t1188 * t1277 - t1465;
t736 = t1186 * t1276 - t1461;
t735 = t1186 * t1277 + t1461;
t733 = -t1191 * t889 + t1195 * t932 + (-t1186 * t900 - t1188 * t901) * pkin(8);
t731 = -pkin(1) * t909 - t1186 * t916 + t1188 * t1221;
t729 = -t1191 * t886 + t1195 * t755;
t728 = -t1191 * t884 + t1195 * t754;
t724 = -pkin(1) * t900 - t1186 * t908 + t1188 * t1222;
t721 = t996 * t1378 + t1195 * t811 + (-t1186 * t887 - t1188 * t888) * pkin(8);
t716 = t1185 * t795 + t1187 * t793;
t715 = t1185 * t794 + t1187 * t792;
t712 = -t1192 * t746 + t1196 * t820;
t711 = t1192 * t820 + t1196 * t746;
t705 = -pkin(2) * t1395 + t1185 * t845 + t1187 * t808 + t1466;
t704 = -t1192 * t751 + t1196 * t810;
t703 = -t1192 * t750 + t1196 * t809;
t702 = t1192 * t810 + t1196 * t751;
t701 = t1192 * t809 + t1196 * t750;
t700 = -t1186 * t786 + t1188 * t1268;
t699 = -t1186 * t785 + t1188 * t1269;
t697 = t1185 * t775 + t1187 * t774;
t695 = -t1186 * t787 + t1188 * t1278;
t694 = -t1186 * t784 + t1188 * t1279;
t693 = t1186 * t1278 + t1188 * t787;
t692 = t1186 * t1279 + t1188 * t784;
t688 = -pkin(2) * t968 + t1185 * t838 + t1187 * t806 - t1468;
t687 = -t1186 * t782 + t1188 * t1280;
t683 = -t1192 * t738 + t1196 * t801;
t682 = -t1192 * t737 + t1196 * t800;
t681 = t1192 * t801 + t1196 * t738;
t680 = t1192 * t800 + t1196 * t737;
t679 = -t1191 * t860 + t1195 * t718;
t678 = -t1191 * t861 + t1195 * t717;
t676 = -pkin(1) * t887 - t1186 * t805 + t1188 * t1218;
t671 = -t1186 * t753 + t1188 * t1281;
t670 = -t1186 * t752 + t1188 * t1282;
t668 = -t1191 * t798 + t1195 * t698;
t663 = -t1192 * t695 + t1196 * t763;
t662 = -t1192 * t694 + t1196 * t762;
t661 = t1192 * t763 + t1196 * t695;
t660 = t1192 * t762 + t1196 * t694;
t656 = (-qJ(3) * t1195 + t1378) * t841 + (-t1186 * t745 - t1188 * t746) * pkin(8);
t651 = -pkin(1) * t745 - t1186 * t821 + t1188 * t1209;
t649 = pkin(2) * t973 + t1185 * t734 + t1187 * t723 - t1466;
t648 = -t1186 * t716 + t1188 * t1283;
t647 = -t1186 * t715 + t1188 * t1284;
t646 = pkin(2) * t969 + t1185 * t732 + t1187 * t719 + t1468;
t643 = -t1186 * t709 + t1188 * t1285;
t642 = t1186 * t1285 + t1188 * t709;
t640 = -t1186 * t706 + t1188 * t1286;
t639 = t1186 * t1286 + t1188 * t706;
t638 = -t1186 * t697 + t1188 * t1287;
t633 = -t1186 * t685 + t1188 * t1288;
t632 = t1186 * t1288 + t1188 * t685;
t630 = qJ(3) * t791 + t1185 * t691 + t1187 * t677 - t1426;
t628 = -t1191 * t730 + t1195 * t720 + (-t1186 * t748 - t1188 * t750) * pkin(8);
t624 = -t1191 * t722 + t1195 * t708 + (-t1186 * t735 - t1188 * t737) * pkin(8);
t623 = -t1192 * t643 + t1196 * t675;
t622 = t1192 * t675 + t1196 * t643;
t620 = -t1186 * t658 + t1188 * t1289;
t619 = t1186 * t1289 + t1188 * t658;
t618 = -t1192 * t640 + t1196 * t674;
t617 = t1192 * t674 + t1196 * t640;
t614 = -pkin(2) * t939 - pkin(9) * t1371 + qJ(3) * t659 + t1187 * t713;
t613 = qJ(3) * t788 + t1185 * t666 + t1187 * t664 - t1426;
t612 = -pkin(1) * t748 - t1186 * t705 + t1188 * t1223;
t608 = -pkin(1) * t735 - t1186 * t688 + t1188 * t1224;
t606 = -t1191 * t696 + t1195 * t652 + (-t1186 * t749 - t1188 * t751) * pkin(8);
t605 = -t1192 * t633 + t1196 * t665;
t604 = t1192 * t665 + t1196 * t633;
t602 = -t1191 * t684 + t1195 * t650 + (-t1186 * t736 - t1188 * t738) * pkin(8);
t601 = -t1186 * t644 + t1188 * t1290;
t600 = t1186 * t1290 + t1188 * t644;
t596 = -t1192 * t620 + t1196 * t657;
t595 = t1192 * t657 + t1196 * t620;
t593 = -t1191 * t740 + t1195 * t631 + (-t1186 * t693 - t1188 * t695) * pkin(8);
t592 = -pkin(1) * t749 - t1186 * t649 + t1188 * t1225;
t589 = -pkin(1) * t736 - t1186 * t646 + t1188 * t1226;
t588 = -t1191 * t714 + t1195 * t616 + (-t1186 * t692 - t1188 * t694) * pkin(8);
t585 = -pkin(2) * t807 + qJ(3) * t645 + t1185 * t653 + t1187 * t641;
t584 = -t1192 * t601 + t1196 * t636;
t583 = t1192 * t636 + t1196 * t601;
t582 = -pkin(1) * t693 - t1186 * t630 + t1188 * t1227;
t579 = -pkin(2) * t844 + qJ(3) * t710 + t1185 * t611 + t1187 * t609;
t577 = -pkin(2) * t837 + qJ(3) * t707 + t1185 * t610 + t1187 * t607;
t576 = -pkin(1) * t692 - t1186 * t613 + t1188 * t1229;
t574 = -pkin(2) * t799 + qJ(3) * t686 + t1185 * t599 + t1187 * t594;
t573 = -t1191 * t637 + t1195 * t621 + (-t1186 * t619 - t1188 * t620) * pkin(8);
t571 = -pkin(1) * t619 - t1186 * t614 + t1188 * t1228;
t569 = -t1186 * t586 + t1188 * t1291;
t568 = t1186 * t1291 + t1188 * t586;
t567 = -t1191 * t629 + t1195 * t581 + (-t1186 * t642 - t1188 * t643) * pkin(8);
t566 = -t1191 * t627 + t1195 * t580 + (-t1186 * t639 - t1188 * t640) * pkin(8);
t564 = -t1191 * t603 + t1195 * t590 + (-t1186 * t600 - t1188 * t601) * pkin(8);
t563 = -t1191 * t597 + t1195 * t575 + (-t1186 * t632 - t1188 * t633) * pkin(8);
t562 = -pkin(1) * t642 - t1186 * t579 + t1188 * t1231;
t561 = -pkin(1) * t600 - t1186 * t585 + t1188 * t1230;
t560 = -pkin(1) * t639 - t1186 * t577 + t1188 * t1232;
t559 = -t1192 * t569 + t1196 * t578;
t558 = t1192 * t578 + t1196 * t569;
t557 = -pkin(1) * t632 - t1186 * t574 + t1188 * t1233;
t555 = -pkin(2) * t635 + qJ(3) * t587 + t1185 * t572 + t1187 * t565;
t554 = -t1191 * t570 + t1195 * t556 + (-t1186 * t568 - t1188 * t569) * pkin(8);
t553 = -pkin(1) * t568 - t1186 * t555 + t1188 * t1234;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1167, -t1168, 0, t1131, 0, 0, 0, 0, 0, 0, t1000, t992, t981, t914, 0, 0, 0, 0, 0, 0, t823, t840, t819, t712, 0, 0, 0, 0, 0, 0, t682, t703, t663, t596, 0, 0, 0, 0, 0, 0, t662, t683, t704, t584, 0, 0, 0, 0, 0, 0, t618, t623, t605, t559; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1168, -t1167, 0, t1130, 0, 0, 0, 0, 0, 0, t999, t991, t980, t913, 0, 0, 0, 0, 0, 0, t822, t839, t818, t711, 0, 0, 0, 0, 0, 0, t680, t701, t661, t595, 0, 0, 0, 0, 0, 0, t660, t681, t702, t583, 0, 0, 0, 0, 0, 0, t617, t622, t604, t558; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1051, t1049, t1043, t989, 0, 0, 0, 0, 0, 0, t900, t909, t887, t745, 0, 0, 0, 0, 0, 0, t735, t748, t693, t619, 0, 0, 0, 0, 0, 0, t692, t736, t749, t600, 0, 0, 0, 0, 0, 0, t639, t642, t632, t568; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1168, 0, -t1167, 0, t1298, -t1153, -t1130, -pkin(7) * t1130, -t1090 * t1192 + t1113 * t1196, -t1045 * t1192 + t1058 * t1196, -t1052 * t1192 + t1109 * t1196, -t1089 * t1192 + t1112 * t1196, -t1053 * t1192 + t1110 * t1196, t1196 * t1126 + t1192 * t1252, -pkin(7) * t999 - t1192 * t937 + t1196 * t943, -pkin(7) * t991 - t1192 * t930 + t1196 * t938, -pkin(7) * t980 - t1192 * t905 + t1196 * t903, -pkin(7) * t913 - t1192 * t915 + t1196 * t904, t1027 * t1196 - t1192 * t949, -t1192 * t896 + t1196 * t978, -t1192 * t911 + t1196 * t983, t1026 * t1196 - t1192 * t948, -t1192 * t912 + t1196 * t984, t1048 * t1196 - t1192 * t985, -pkin(7) * t822 - t1192 * t724 + t1196 * t733, -pkin(7) * t839 - t1192 * t731 + t1196 * t742, -pkin(7) * t818 - t1192 * t676 + t1196 * t721, -pkin(7) * t711 - t1192 * t651 + t1196 * t656, t1443, -t1192 * t699 + t1196 * t771, t1474, t1442, -t1192 * t759 + t1196 * t815, t1427, -pkin(7) * t680 - t1192 * t608 + t1196 * t624, -pkin(7) * t701 - t1192 * t612 + t1196 * t628, -pkin(7) * t661 - t1192 * t582 + t1196 * t593, -pkin(7) * t595 - t1192 * t571 + t1196 * t573, t1427, -t1474, -t1192 * t758 + t1196 * t814, t1443, -t1192 * t700 + t1196 * t772, t1442, -pkin(7) * t660 - t1192 * t576 + t1196 * t588, -pkin(7) * t681 - t1192 * t589 + t1196 * t602, -pkin(7) * t702 - t1192 * t592 + t1196 * t606, -pkin(7) * t583 - t1192 * t561 + t1196 * t564, -t1192 * t671 + t1196 * t729, -t1192 * t638 + t1196 * t668, -t1192 * t648 + t1196 * t679, -t1192 * t670 + t1196 * t728, -t1192 * t647 + t1196 * t678, -t1192 * t687 + t1196 * t747, -pkin(7) * t617 - t1192 * t560 + t1196 * t566, -pkin(7) * t622 - t1192 * t562 + t1196 * t567, -pkin(7) * t604 - t1192 * t557 + t1196 * t563, -pkin(7) * t558 - t1192 * t553 + t1196 * t554; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1167, 0, t1168, 0, t1153, t1298, t1131, pkin(7) * t1131, t1090 * t1196 + t1113 * t1192, t1045 * t1196 + t1058 * t1192, t1052 * t1196 + t1109 * t1192, t1089 * t1196 + t1112 * t1192, t1053 * t1196 + t1110 * t1192, t1192 * t1126 - t1196 * t1252, pkin(7) * t1000 + t1192 * t943 + t1196 * t937, pkin(7) * t992 + t1192 * t938 + t1196 * t930, pkin(7) * t981 + t1192 * t903 + t1196 * t905, pkin(7) * t914 + t1192 * t904 + t1196 * t915, t1027 * t1192 + t1196 * t949, t1192 * t978 + t1196 * t896, t1192 * t983 + t1196 * t911, t1026 * t1192 + t1196 * t948, t1192 * t984 + t1196 * t912, t1048 * t1192 + t1196 * t985, pkin(7) * t823 + t1192 * t733 + t1196 * t724, pkin(7) * t840 + t1192 * t742 + t1196 * t731, pkin(7) * t819 + t1192 * t721 + t1196 * t676, pkin(7) * t712 + t1192 * t656 + t1196 * t651, t1441, t1192 * t771 + t1196 * t699, -t1473, t1440, t1192 * t815 + t1196 * t759, t1428, pkin(7) * t682 + t1192 * t624 + t1196 * t608, pkin(7) * t703 + t1192 * t628 + t1196 * t612, pkin(7) * t663 + t1192 * t593 + t1196 * t582, pkin(7) * t596 + t1192 * t573 + t1196 * t571, t1428, t1473, t1192 * t814 + t1196 * t758, t1441, t1192 * t772 + t1196 * t700, t1440, pkin(7) * t662 + t1192 * t588 + t1196 * t576, pkin(7) * t683 + t1192 * t602 + t1196 * t589, pkin(7) * t704 + t1192 * t606 + t1196 * t592, pkin(7) * t584 + t1192 * t564 + t1196 * t561, t1192 * t729 + t1196 * t671, t1192 * t668 + t1196 * t638, t1192 * t679 + t1196 * t648, t1192 * t728 + t1196 * t670, t1192 * t678 + t1196 * t647, t1192 * t747 + t1196 * t687, pkin(7) * t618 + t1192 * t566 + t1196 * t560, pkin(7) * t623 + t1192 * t567 + t1196 * t562, pkin(7) * t605 + t1192 * t563 + t1196 * t557, pkin(7) * t559 + t1192 * t554 + t1196 * t553; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1172, t1173, 0, 0, (t1182 * t1195 * t1213 + t1186 * t1151) * t1191, t1188 * t1157 + t1186 * t1258, t1188 * t1120 + t1186 * t1254, -t1213 * t1310 + t1138, t1188 * t1121 + t1186 * t1255, t1188 * t1300, pkin(1) * t1054 - t1188 * t1093 + t1186 * t1292, pkin(1) * t1050 - t1188 * t1094 + t1186 * t1293, pkin(1) * t1044 + t1186 * t1219, pkin(1) * t990 + t1029 * t1374, t1188 * t1062 + (-t1206 + t1326) * t1186, t1186 * t1265 + t1188 * t995, t1188 * t1034 + t1186 * t1261, t1188 * t1060 + (t1206 + t1327) * t1186, t1188 * t1035 + t1186 * t1260, t1069 * t1188 + t1070 * t1331 + t1138, pkin(1) * t901 + t1186 * t1222 + t1188 * t908, pkin(1) * t910 + t1186 * t1221 + t1188 * t916, pkin(1) * t888 + t1186 * t1218 + t1188 * t805, pkin(1) * t746 + t1186 * t1209 + t1188 * t821, t1431, t1186 * t1269 + t1188 * t785, -t1470, t1432, t1186 * t1270 + t1458, t1402, pkin(1) * t737 + t1186 * t1224 + t1188 * t688, pkin(1) * t750 + t1186 * t1223 + t1188 * t705, pkin(1) * t695 + t1186 * t1227 + t1188 * t630, pkin(1) * t620 + t1186 * t1228 + t1188 * t614, t1402, t1470, t1186 * t1271 - t1458, t1431, t1186 * t1268 + t1188 * t786, t1432, pkin(1) * t694 + t1186 * t1229 + t1188 * t613, pkin(1) * t738 + t1186 * t1226 + t1188 * t646, pkin(1) * t751 + t1186 * t1225 + t1188 * t649, pkin(1) * t601 + t1186 * t1230 + t1188 * t585, t1186 * t1281 + t1188 * t753, t1186 * t1287 + t1188 * t697, t1186 * t1283 + t1188 * t716, t1186 * t1282 + t1188 * t752, t1186 * t1284 + t1188 * t715, t1186 * t1280 + t1188 * t782, pkin(1) * t640 + t1186 * t1232 + t1188 * t577, pkin(1) * t643 + t1186 * t1231 + t1188 * t579, pkin(1) * t633 + t1186 * t1233 + t1188 * t574, pkin(1) * t569 + t1186 * t1234 + t1188 * t555;];
tauB_reg  = t1;
