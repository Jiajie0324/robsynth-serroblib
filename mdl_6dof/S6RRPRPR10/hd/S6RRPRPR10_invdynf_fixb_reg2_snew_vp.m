% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RRPRPR10
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [11x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,d1,d2,d4,d6,theta3]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 15:47
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RRPRPR10_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(11,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRPRPR10_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RRPRPR10_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RRPRPR10_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RRPRPR10_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [11 1]), ...
  'S6RRPRPR10_invdynf_fixb_reg2_snew_vp: pkin has to be [11x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 15:47:17
% EndTime: 2019-05-06 15:47:29
% DurationCPUTime: 13.18s
% Computational Cost: add. (65073->375), mult. (149757->517), div. (0->0), fcn. (120845->12), ass. (0->304)
t2725 = cos(qJ(2));
t2716 = sin(pkin(6));
t2721 = sin(qJ(2));
t2797 = t2716 * t2721;
t2788 = qJD(1) * t2797;
t2790 = qJDD(1) * t2716;
t2690 = -qJD(2) * t2788 + t2725 * t2790;
t2750 = -qJDD(4) + t2690;
t2715 = sin(pkin(11));
t2717 = cos(pkin(11));
t2718 = cos(pkin(6));
t2781 = qJD(1) * t2718 + qJD(2);
t2681 = t2715 * t2781 + t2717 * t2788;
t2720 = sin(qJ(4));
t2724 = cos(qJ(4));
t2747 = t2715 * t2788 - t2717 * t2781;
t2656 = t2720 * t2681 + t2724 * t2747;
t2658 = t2724 * t2681 - t2720 * t2747;
t2801 = t2656 * t2658;
t2613 = t2750 + t2801;
t2655 = t2656 ^ 2;
t2796 = t2716 * t2725;
t2787 = qJD(1) * t2796;
t2703 = -qJD(4) + t2787;
t2699 = t2703 ^ 2;
t2615 = -t2699 - t2655;
t2575 = t2613 * t2724 - t2615 * t2720;
t2576 = t2613 * t2720 + t2615 * t2724;
t2543 = t2575 * t2715 + t2576 * t2717;
t2828 = t2543 * t2721;
t2827 = t2543 * t2725;
t2542 = t2575 * t2717 - t2576 * t2715;
t2826 = t2716 * t2542;
t2825 = t2718 * t2542;
t2741 = t2750 - t2801;
t2809 = t2658 ^ 2;
t2784 = -t2699 - t2809;
t2583 = t2720 * t2741 + t2724 * t2784;
t2586 = t2720 * t2784 - t2724 * t2741;
t2554 = t2583 * t2715 + t2586 * t2717;
t2824 = t2554 * t2721;
t2823 = t2554 * t2725;
t2551 = t2583 * t2717 - t2586 * t2715;
t2822 = t2716 * t2551;
t2821 = t2718 * t2551;
t2689 = qJD(2) * t2787 + t2721 * t2790;
t2776 = qJDD(1) * t2718 + qJDD(2);
t2664 = t2717 * t2689 + t2715 * t2776;
t2777 = -t2689 * t2715 + t2717 * t2776;
t2742 = -t2724 * t2664 - t2720 * t2777;
t2738 = -t2656 * qJD(4) - t2742;
t2800 = t2656 * t2703;
t2594 = t2738 + t2800;
t2815 = -t2655 - t2809;
t2820 = t2721 * t2815;
t2819 = t2725 * t2815;
t2743 = t2681 * t2747;
t2646 = -t2690 - t2743;
t2744 = t2747 ^ 2;
t2775 = t2781 ^ 2;
t2818 = -2 * qJD(3);
t2791 = t2703 + qJD(4);
t2734 = t2656 * t2791 + t2742;
t2817 = t2720 * t2734;
t2816 = t2724 * t2734;
t2671 = t2747 * t2787;
t2641 = -t2664 + t2671;
t2719 = sin(qJ(6));
t2723 = cos(qJ(6));
t2779 = t2720 * t2664 - t2724 * t2777;
t2608 = qJD(4) * t2658 + t2779;
t2686 = (-pkin(2) * t2725 - qJ(3) * t2721) * t2716 * qJD(1);
t2722 = sin(qJ(1));
t2726 = cos(qJ(1));
t2706 = -g(1) * t2726 - g(2) * t2722;
t2727 = qJD(1) ^ 2;
t2685 = -pkin(1) * t2727 + pkin(8) * t2790 + t2706;
t2705 = t2722 * g(1) - t2726 * g(2);
t2739 = t2727 * t2716 * pkin(8) + qJDD(1) * pkin(1) + t2705;
t2736 = t2718 * t2739;
t2778 = t2721 * t2685 - t2725 * t2736;
t2746 = -t2776 * pkin(2) - t2775 * qJ(3) + qJDD(3) + t2778;
t2789 = g(3) * t2796;
t2665 = -pkin(3) * t2787 - pkin(9) * t2681;
t2813 = -t2777 * pkin(3) - t2744 * pkin(9) + t2681 * t2665;
t2814 = t2608 * pkin(4) - qJ(5) * t2594;
t2730 = -t2655 * pkin(5) + t2608 * pkin(10) + t2686 * t2788 + t2746 + t2789 + t2813 + t2814;
t2792 = t2725 * t2685 + t2721 * t2736;
t2805 = qJD(1) * t2686;
t2626 = -t2775 * pkin(2) + t2776 * qJ(3) + (-g(3) * t2721 + t2725 * t2805) * t2716 + t2792;
t2772 = qJD(1) * t2781;
t2748 = t2725 * t2772;
t2749 = t2721 * t2772;
t2806 = t2718 * g(3);
t2627 = -t2690 * pkin(2) - t2806 - t2689 * qJ(3) + (pkin(2) * t2749 - qJ(3) * t2748 - t2739) * t2716;
t2578 = -t2715 * t2626 + t2717 * t2627 + t2681 * t2818;
t2560 = pkin(3) * t2646 + t2641 * pkin(9) + t2578;
t2579 = t2717 * t2626 + t2715 * t2627 + t2747 * t2818;
t2569 = -pkin(3) * t2744 + pkin(9) * t2777 + t2665 * t2787 + t2579;
t2535 = t2724 * t2560 - t2720 * t2569;
t2745 = pkin(4) * t2750 - t2699 * qJ(5) + qJDD(5) - t2535;
t2731 = t2750 * pkin(10) + t2745 + (t2738 - t2800) * pkin(5);
t2639 = pkin(5) * t2658 + pkin(10) * t2703;
t2807 = -2 * qJD(5);
t2783 = -pkin(4) * t2703 + t2807;
t2773 = -t2639 + t2783;
t2617 = pkin(4) * t2656 - qJ(5) * t2658;
t2782 = pkin(10) * t2656 + t2617;
t2728 = -t2719 * t2730 + t2723 * t2731 + (-t2719 * t2773 + t2723 * t2782) * t2658;
t2635 = -t2723 * t2656 - t2703 * t2719;
t2812 = t2635 ^ 2;
t2637 = t2656 * t2719 - t2703 * t2723;
t2811 = t2637 ^ 2;
t2654 = qJD(6) + t2658;
t2810 = t2654 ^ 2;
t2808 = t2681 ^ 2;
t2802 = t2637 * t2635;
t2798 = t2716 ^ 2 * t2727;
t2795 = qJD(4) - t2703;
t2794 = qJD(6) - t2654;
t2793 = qJD(6) + t2654;
t2714 = t2725 ^ 2;
t2786 = t2714 * t2798;
t2785 = -t2810 - t2811;
t2780 = t2723 * t2608 + t2719 * t2750;
t2774 = t2681 * t2787;
t2489 = t2723 * t2730 + t2719 * t2731 + (t2719 * t2782 + t2723 * t2773) * t2658;
t2475 = t2719 * t2489 + t2723 * t2728;
t2536 = t2720 * t2560 + t2724 * t2569;
t2737 = -t2699 * pkin(4) - qJ(5) * t2750 - t2656 * t2617 + t2536;
t2510 = -t2608 * pkin(5) - t2655 * pkin(10) + (t2807 - t2639) * t2703 + t2737;
t2471 = -t2475 * t2724 + t2510 * t2720;
t2472 = t2475 * t2720 + t2510 * t2724;
t2466 = -t2471 * t2715 + t2472 * t2717;
t2476 = t2723 * t2489 - t2719 * t2728;
t2771 = t2466 * t2721 - t2476 * t2725;
t2521 = t2703 * t2807 + t2737;
t2522 = t2658 * t2617 + t2745;
t2494 = t2521 * t2720 - t2522 * t2724;
t2495 = t2521 * t2724 + t2522 * t2720;
t2483 = -t2494 * t2715 + t2495 * t2717;
t2623 = (g(3) * t2725 + t2721 * t2805) * t2716 + t2746;
t2580 = t2623 + t2813;
t2537 = t2658 * t2783 + t2580 + t2814;
t2770 = t2483 * t2721 - t2537 * t2725;
t2504 = t2535 * t2724 + t2536 * t2720;
t2505 = -t2535 * t2720 + t2536 * t2724;
t2486 = -t2504 * t2715 + t2505 * t2717;
t2769 = t2486 * t2721 - t2580 * t2725;
t2565 = -t2637 * t2794 + t2780;
t2757 = -t2719 * t2608 + t2723 * t2750;
t2740 = t2635 * t2794 + t2757;
t2531 = t2719 * t2565 + t2723 * t2740;
t2582 = -t2811 - t2812;
t2519 = -t2531 * t2724 + t2582 * t2720;
t2520 = t2531 * t2720 + t2582 * t2724;
t2493 = -t2519 * t2715 + t2520 * t2717;
t2532 = t2723 * t2565 - t2719 * t2740;
t2768 = t2493 * t2721 - t2532 * t2725;
t2588 = -t2810 - t2812;
t2735 = -qJDD(6) - t2738;
t2732 = -t2735 - t2802;
t2545 = t2719 * t2588 + t2723 * t2732;
t2564 = t2637 * t2793 - t2780;
t2523 = -t2545 * t2724 + t2564 * t2720;
t2524 = t2545 * t2720 + t2564 * t2724;
t2501 = -t2523 * t2715 + t2524 * t2717;
t2546 = t2723 * t2588 - t2719 * t2732;
t2767 = t2501 * t2721 - t2546 * t2725;
t2573 = t2735 - t2802;
t2549 = t2719 * t2573 + t2723 * t2785;
t2566 = -t2635 * t2793 - t2757;
t2525 = -t2549 * t2724 + t2566 * t2720;
t2526 = t2549 * t2720 + t2566 * t2724;
t2503 = -t2525 * t2715 + t2526 * t2717;
t2550 = t2723 * t2573 - t2719 * t2785;
t2766 = t2503 * t2721 - t2550 * t2725;
t2591 = -t2658 * t2791 - t2779;
t2555 = t2591 * t2720 + t2816;
t2557 = t2591 * t2724 - t2817;
t2529 = -t2555 * t2715 + t2557 * t2717;
t2765 = t2529 * t2721 - t2819;
t2647 = t2703 * t2658;
t2592 = -t2608 - t2647;
t2556 = t2592 * t2720 + t2816;
t2558 = t2592 * t2724 - t2817;
t2530 = -t2556 * t2715 + t2558 * t2717;
t2764 = t2530 * t2721 - t2819;
t2589 = t2658 * t2795 + t2779;
t2763 = -t2589 * t2725 + t2828;
t2590 = t2608 - t2647;
t2762 = t2590 * t2725 - t2828;
t2548 = -t2578 * t2715 + t2579 * t2717;
t2761 = t2548 * t2721 - t2623 * t2725;
t2760 = -t2594 * t2725 - t2824;
t2593 = -t2656 * t2795 - t2742;
t2759 = t2593 * t2725 + t2824;
t2643 = -t2774 + t2777;
t2604 = -t2641 * t2715 + t2643 * t2717;
t2638 = -t2744 - t2808;
t2758 = t2604 * t2721 - t2638 * t2725;
t2653 = -t2786 - t2744;
t2610 = -t2646 * t2715 + t2653 * t2717;
t2642 = -t2774 - t2777;
t2756 = t2610 * t2721 - t2642 * t2725;
t2645 = t2690 - t2743;
t2670 = -t2786 - t2808;
t2619 = t2645 * t2717 - t2670 * t2715;
t2644 = t2671 + t2664;
t2755 = t2619 * t2721 - t2644 * t2725;
t2651 = -t2778 - t2789;
t2652 = -g(3) * t2797 + t2792;
t2754 = t2651 * t2725 + t2652 * t2721;
t2667 = t2716 * t2748 - t2689;
t2693 = t2716 * t2749;
t2668 = t2690 + t2693;
t2753 = t2667 * t2725 + t2668 * t2721;
t2713 = t2721 ^ 2;
t2680 = -t2713 * t2798 - t2775;
t2702 = t2725 * t2721 * t2798;
t2688 = t2702 - t2776;
t2752 = t2680 * t2725 + t2688 * t2721;
t2687 = t2702 + t2776;
t2691 = -t2775 - t2786;
t2751 = t2687 * t2725 + t2691 * t2721;
t2701 = -qJDD(1) * t2722 - t2726 * t2727;
t2700 = qJDD(1) * t2726 - t2722 * t2727;
t2692 = (-t2713 - t2714) * t2798;
t2673 = -t2716 * t2739 - t2806;
t2669 = -t2690 + t2693;
t2666 = t2781 * t2787 + t2689;
t2661 = -t2687 * t2721 + t2691 * t2725;
t2660 = -t2680 * t2721 + t2688 * t2725;
t2634 = -t2667 * t2721 + t2668 * t2725;
t2631 = -t2716 * t2669 + t2718 * t2751;
t2630 = t2718 * t2669 + t2716 * t2751;
t2629 = -t2716 * t2666 + t2718 * t2752;
t2628 = t2718 * t2666 + t2716 * t2752;
t2625 = -t2716 * t2692 + t2718 * t2753;
t2624 = t2718 * t2692 + t2716 * t2753;
t2618 = t2645 * t2715 + t2670 * t2717;
t2616 = -t2651 * t2721 + t2652 * t2725;
t2609 = t2646 * t2717 + t2653 * t2715;
t2603 = t2641 * t2717 + t2643 * t2715;
t2602 = -t2716 * t2673 + t2718 * t2754;
t2601 = t2718 * t2673 + t2716 * t2754;
t2598 = t2619 * t2725 + t2644 * t2721;
t2587 = t2610 * t2725 + t2642 * t2721;
t2581 = t2604 * t2725 + t2638 * t2721;
t2571 = -t2716 * t2618 + t2718 * t2755;
t2570 = t2718 * t2618 + t2716 * t2755;
t2568 = -t2716 * t2609 + t2718 * t2756;
t2567 = t2718 * t2609 + t2716 * t2756;
t2562 = -t2716 * t2603 + t2718 * t2758;
t2561 = t2718 * t2603 + t2716 * t2758;
t2547 = t2578 * t2717 + t2579 * t2715;
t2540 = t2548 * t2725 + t2623 * t2721;
t2539 = -t2593 * t2721 + t2823;
t2538 = t2594 * t2721 - t2823;
t2534 = -t2590 * t2721 - t2827;
t2533 = t2589 * t2721 + t2827;
t2528 = t2556 * t2717 + t2558 * t2715;
t2527 = t2555 * t2717 + t2557 * t2715;
t2518 = t2530 * t2725 + t2820;
t2517 = t2529 * t2725 + t2820;
t2516 = t2718 * t2759 + t2822;
t2515 = t2718 * t2760 - t2822;
t2514 = t2716 * t2759 - t2821;
t2513 = t2716 * t2760 + t2821;
t2512 = -t2716 * t2547 + t2718 * t2761;
t2511 = t2718 * t2547 + t2716 * t2761;
t2509 = t2718 * t2762 - t2826;
t2508 = t2718 * t2763 + t2826;
t2507 = t2716 * t2762 + t2825;
t2506 = t2716 * t2763 - t2825;
t2502 = t2525 * t2717 + t2526 * t2715;
t2500 = t2523 * t2717 + t2524 * t2715;
t2499 = -t2716 * t2528 + t2718 * t2764;
t2498 = -t2716 * t2527 + t2718 * t2765;
t2497 = t2718 * t2528 + t2716 * t2764;
t2496 = t2718 * t2527 + t2716 * t2765;
t2492 = t2519 * t2717 + t2520 * t2715;
t2491 = t2503 * t2725 + t2550 * t2721;
t2490 = t2501 * t2725 + t2546 * t2721;
t2487 = t2493 * t2725 + t2532 * t2721;
t2485 = t2504 * t2717 + t2505 * t2715;
t2484 = t2486 * t2725 + t2580 * t2721;
t2482 = t2494 * t2717 + t2495 * t2715;
t2481 = -t2716 * t2502 + t2718 * t2766;
t2480 = t2718 * t2502 + t2716 * t2766;
t2479 = -t2716 * t2500 + t2718 * t2767;
t2478 = t2718 * t2500 + t2716 * t2767;
t2477 = t2483 * t2725 + t2537 * t2721;
t2474 = -t2716 * t2492 + t2718 * t2768;
t2473 = t2718 * t2492 + t2716 * t2768;
t2470 = -t2716 * t2485 + t2718 * t2769;
t2469 = t2718 * t2485 + t2716 * t2769;
t2468 = -t2716 * t2482 + t2718 * t2770;
t2467 = t2718 * t2482 + t2716 * t2770;
t2465 = t2471 * t2717 + t2472 * t2715;
t2464 = t2466 * t2725 + t2476 * t2721;
t2463 = -t2716 * t2465 + t2718 * t2771;
t2462 = t2718 * t2465 + t2716 * t2771;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t2701, -t2700, 0, -t2705 * t2722 + t2706 * t2726, 0, 0, 0, 0, 0, 0, -t2631 * t2722 + t2661 * t2726, -t2629 * t2722 + t2660 * t2726, -t2625 * t2722 + t2634 * t2726, -t2602 * t2722 + t2616 * t2726, 0, 0, 0, 0, 0, 0, -t2568 * t2722 + t2587 * t2726, -t2571 * t2722 + t2598 * t2726, -t2562 * t2722 + t2581 * t2726, -t2512 * t2722 + t2540 * t2726, 0, 0, 0, 0, 0, 0, -t2508 * t2722 + t2533 * t2726, -t2515 * t2722 + t2538 * t2726, -t2499 * t2722 + t2518 * t2726, -t2470 * t2722 + t2484 * t2726, 0, 0, 0, 0, 0, 0, -t2498 * t2722 + t2517 * t2726, -t2509 * t2722 + t2534 * t2726, -t2516 * t2722 + t2539 * t2726, -t2468 * t2722 + t2477 * t2726, 0, 0, 0, 0, 0, 0, -t2479 * t2722 + t2490 * t2726, -t2481 * t2722 + t2491 * t2726, -t2474 * t2722 + t2487 * t2726, -t2463 * t2722 + t2464 * t2726; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t2700, t2701, 0, t2705 * t2726 + t2706 * t2722, 0, 0, 0, 0, 0, 0, t2631 * t2726 + t2661 * t2722, t2629 * t2726 + t2660 * t2722, t2625 * t2726 + t2634 * t2722, t2602 * t2726 + t2616 * t2722, 0, 0, 0, 0, 0, 0, t2568 * t2726 + t2587 * t2722, t2571 * t2726 + t2598 * t2722, t2562 * t2726 + t2581 * t2722, t2512 * t2726 + t2540 * t2722, 0, 0, 0, 0, 0, 0, t2508 * t2726 + t2533 * t2722, t2515 * t2726 + t2538 * t2722, t2499 * t2726 + t2518 * t2722, t2470 * t2726 + t2484 * t2722, 0, 0, 0, 0, 0, 0, t2498 * t2726 + t2517 * t2722, t2509 * t2726 + t2534 * t2722, t2516 * t2726 + t2539 * t2722, t2468 * t2726 + t2477 * t2722, 0, 0, 0, 0, 0, 0, t2479 * t2726 + t2490 * t2722, t2481 * t2726 + t2491 * t2722, t2474 * t2726 + t2487 * t2722, t2463 * t2726 + t2464 * t2722; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2630, t2628, t2624, t2601, 0, 0, 0, 0, 0, 0, t2567, t2570, t2561, t2511, 0, 0, 0, 0, 0, 0, t2506, t2513, t2497, t2469, 0, 0, 0, 0, 0, 0, t2496, t2507, t2514, t2467, 0, 0, 0, 0, 0, 0, t2478, t2480, t2473, t2462; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2727, -qJDD(1), 0, t2706, 0, 0, 0, 0, 0, 0, t2661, t2660, t2634, t2616, 0, 0, 0, 0, 0, 0, t2587, t2598, t2581, t2540, 0, 0, 0, 0, 0, 0, t2533, t2538, t2518, t2484, 0, 0, 0, 0, 0, 0, t2517, t2534, t2539, t2477, 0, 0, 0, 0, 0, 0, t2490, t2491, t2487, t2464; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t2727, 0, t2705, 0, 0, 0, 0, 0, 0, t2631, t2629, t2625, t2602, 0, 0, 0, 0, 0, 0, t2568, t2571, t2562, t2512, 0, 0, 0, 0, 0, 0, t2508, t2515, t2499, t2470, 0, 0, 0, 0, 0, 0, t2498, t2509, t2516, t2468, 0, 0, 0, 0, 0, 0, t2479, t2481, t2474, t2463; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t2630, t2628, t2624, t2601, 0, 0, 0, 0, 0, 0, t2567, t2570, t2561, t2511, 0, 0, 0, 0, 0, 0, t2506, t2513, t2497, t2469, 0, 0, 0, 0, 0, 0, t2496, t2507, t2514, t2467, 0, 0, 0, 0, 0, 0, t2478, t2480, t2473, t2462; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2691, t2688, t2668, t2652, 0, 0, 0, 0, 0, 0, t2610, t2619, t2604, t2548, 0, 0, 0, 0, 0, 0, t2543, -t2554, t2530, t2486, 0, 0, 0, 0, 0, 0, t2529, -t2543, t2554, t2483, 0, 0, 0, 0, 0, 0, t2501, t2503, t2493, t2466; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2687, t2680, t2667, t2651, 0, 0, 0, 0, 0, 0, -t2642, -t2644, -t2638, -t2623, 0, 0, 0, 0, 0, 0, -t2589, -t2594, -t2815, -t2580, 0, 0, 0, 0, 0, 0, -t2815, t2590, t2593, -t2537, 0, 0, 0, 0, 0, 0, -t2546, -t2550, -t2532, -t2476; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2669, t2666, t2692, t2673, 0, 0, 0, 0, 0, 0, t2609, t2618, t2603, t2547, 0, 0, 0, 0, 0, 0, -t2542, t2551, t2528, t2485, 0, 0, 0, 0, 0, 0, t2527, t2542, -t2551, t2482, 0, 0, 0, 0, 0, 0, t2500, t2502, t2492, t2465; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2653, t2645, t2643, t2579, 0, 0, 0, 0, 0, 0, t2576, -t2586, t2558, t2505, 0, 0, 0, 0, 0, 0, t2557, -t2576, t2586, t2495, 0, 0, 0, 0, 0, 0, t2524, t2526, t2520, t2472; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2646, t2670, t2641, t2578, 0, 0, 0, 0, 0, 0, -t2575, t2583, t2556, t2504, 0, 0, 0, 0, 0, 0, t2555, t2575, -t2583, t2494, 0, 0, 0, 0, 0, 0, t2523, t2525, t2519, t2471; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2642, t2644, t2638, t2623, 0, 0, 0, 0, 0, 0, t2589, t2594, t2815, t2580, 0, 0, 0, 0, 0, 0, t2815, -t2590, -t2593, t2537, 0, 0, 0, 0, 0, 0, t2546, t2550, t2532, t2476; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2615, t2741, t2592, t2536, 0, 0, 0, 0, 0, 0, t2591, -t2615, -t2741, t2521, 0, 0, 0, 0, 0, 0, t2564, t2566, t2582, t2510; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2613, t2784, t2734, t2535, 0, 0, 0, 0, 0, 0, t2734, t2613, -t2784, -t2522, 0, 0, 0, 0, 0, 0, -t2545, -t2549, -t2531, -t2475; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2589, t2594, t2815, t2580, 0, 0, 0, 0, 0, 0, t2815, -t2590, -t2593, t2537, 0, 0, 0, 0, 0, 0, t2546, t2550, t2532, t2476; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2815, -t2590, -t2593, t2537, 0, 0, 0, 0, 0, 0, t2546, t2550, t2532, t2476; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2591, t2615, t2741, -t2521, 0, 0, 0, 0, 0, 0, -t2564, -t2566, -t2582, -t2510; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t2734, -t2613, t2784, t2522, 0, 0, 0, 0, 0, 0, t2545, t2549, t2531, t2475; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2588, t2573, t2565, t2489; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2732, t2785, t2740, t2728; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t2564, t2566, t2582, t2510;];
f_new_reg  = t1;
