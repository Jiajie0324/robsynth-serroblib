% Calculate minimal parameter regressor of joint inertia matrix time derivative for
% S6RPRPRR13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d5,d6,theta2]';
% 
% Output:
% MMD_reg [((6+1)*6/2)x32]
%   minimal parameter regressor of inerta matrix time derivative
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:26
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MMD_reg = S6RPRPRR13_inertiaDJ_regmin_slag_vp(qJ, qJD, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR13_inertiaDJ_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR13_inertiaDJ_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RPRPRR13_inertiaDJ_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From inertiaD_joint_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:25:21
% EndTime: 2019-03-09 04:25:30
% DurationCPUTime: 2.82s
% Computational Cost: add. (4227->281), mult. (12717->530), div. (0->0), fcn. (13556->12), ass. (0->155)
t106 = sin(pkin(12));
t109 = cos(pkin(12));
t112 = sin(qJ(3));
t193 = cos(pkin(7));
t199 = cos(qJ(3));
t143 = t193 * t199;
t108 = sin(pkin(6));
t189 = t106 * t108;
t194 = cos(pkin(6));
t162 = pkin(1) * t194;
t99 = t109 * t162;
t61 = t194 * pkin(2) + t99 + (-t193 * pkin(9) - qJ(2)) * t189;
t134 = t61 * t143;
t107 = sin(pkin(7));
t153 = qJD(3) * t199;
t144 = t107 * t153;
t152 = t108 * t193;
t181 = qJD(2) * t108;
t149 = t194 * t107;
t187 = t108 * t109;
t196 = qJ(2) * t187 + t106 * t162;
t57 = (t109 * t152 + t149) * pkin(9) + t196;
t190 = t106 * t107;
t69 = (-pkin(2) * t109 - pkin(9) * t190 - pkin(1)) * t108;
t28 = t112 * (qJD(2) * t106 * t152 + qJD(3) * t57) - t199 * t109 * t181 - qJD(3) * t134 - t69 * t144;
t74 = t107 * t187 - t194 * t193;
t72 = qJD(4) * t74;
t27 = t72 + t28;
t113 = cos(qJ(6));
t111 = sin(qJ(5));
t114 = cos(qJ(5));
t142 = pkin(5) * t114 + pkin(11) * t111;
t203 = t113 * t142;
t161 = t107 * t199;
t77 = -t111 * t161 + t114 * t193;
t104 = t113 ^ 2;
t110 = sin(qJ(6));
t184 = t110 ^ 2 - t104;
t148 = t184 * qJD(6);
t59 = t112 * t189 - t143 * t187 - t199 * t149;
t118 = t112 * t57 - t69 * t161 - t134;
t200 = pkin(3) + pkin(10);
t151 = t112 * t193;
t60 = t112 * t149 + (t199 * t106 + t109 * t151) * t108;
t19 = t60 * pkin(4) + t200 * t74 + t118;
t42 = -t107 * t61 + t193 * t69;
t132 = -t60 * qJ(4) + t42;
t23 = t200 * t59 + t132;
t138 = t111 * t19 + t114 * t23;
t52 = t199 * t57;
t29 = (t106 * t143 + t109 * t112) * t181 + (t52 + (t107 * t69 + t193 * t61) * t112) * qJD(3);
t53 = t59 * qJD(3);
t21 = -t53 * pkin(4) + t29;
t85 = t181 * t190;
t129 = t53 * qJ(4) - t60 * qJD(4) + t85;
t54 = t60 * qJD(3);
t25 = t200 * t54 + t129;
t6 = -t138 * qJD(5) - t111 * t25 + t114 * t21;
t202 = 0.2e1 * t74;
t201 = 0.2e1 * qJD(4);
t198 = t114 * pkin(11);
t197 = t29 * t74;
t136 = t74 * t111 + t59 * t114;
t34 = t136 * qJD(5) + t54 * t111;
t44 = t59 * t111 - t74 * t114;
t36 = t44 * t110 - t60 * t113;
t15 = -t36 * qJD(6) - t53 * t110 + t34 * t113;
t195 = t15 * t110;
t192 = qJD(5) * t36;
t37 = t60 * t110 + t44 * t113;
t191 = qJD(5) * t37;
t188 = t107 * t112;
t186 = t111 * t200;
t185 = t114 * t200;
t103 = t111 ^ 2;
t105 = t114 ^ 2;
t183 = t103 - t105;
t182 = t103 + t105;
t180 = qJD(5) * t110;
t179 = qJD(5) * t111;
t178 = qJD(5) * t113;
t177 = qJD(5) * t114;
t176 = qJD(5) * t200;
t175 = qJD(6) * t110;
t174 = qJD(6) * t113;
t173 = qJD(6) * t114;
t172 = qJD(6) * t200;
t171 = -0.2e1 * pkin(5) * qJD(6);
t169 = t136 * t180;
t168 = t136 * t178;
t166 = t110 * t186;
t165 = t110 * t185;
t164 = t113 * t188;
t163 = t113 * t186;
t160 = t110 * t173;
t159 = t110 * t172;
t158 = t113 * t173;
t97 = qJD(3) * t188;
t157 = t110 * t174;
t156 = t111 * t178;
t155 = t113 * t177;
t154 = t111 * t177;
t31 = t74 * qJ(4) - t61 * t151 - t69 * t188 - t52;
t147 = t183 * qJD(5);
t145 = t110 * t156;
t141 = t111 * pkin(5) - t198;
t11 = t60 * pkin(11) + t138;
t26 = -t59 * pkin(4) - t31;
t13 = -pkin(5) * t136 - t44 * pkin(11) + t26;
t8 = t113 * t11 + t110 * t13;
t140 = t110 * t37 + t113 * t36;
t139 = -t111 * t23 + t114 * t19;
t135 = -0.2e1 * t194 * t181;
t10 = -t60 * pkin(5) - t139;
t4 = t53 * pkin(5) - t6;
t131 = t10 * t174 + t4 * t110;
t130 = t10 * t175 - t4 * t113;
t128 = t111 * t53 - t60 * t177;
t35 = t44 * qJD(5) - t54 * t114;
t127 = t110 * t35 - t136 * t174;
t126 = -t113 * t35 - t136 * t175;
t65 = t77 * qJD(5) - t114 * t97;
t76 = t111 * t193 + t114 * t161;
t125 = t65 * t110 + t76 * t174;
t124 = -t65 * t113 + t76 * t175;
t67 = t110 * t188 + t113 * t77;
t88 = qJ(4) + t141;
t71 = t110 * t88 - t163;
t5 = -t111 * t21 - t114 * t25 - t19 * t177 + t23 * t179;
t122 = t53 * pkin(11) + t5;
t121 = t193 * t54 + t74 * t97;
t119 = t74 * t144 - t193 * t53;
t16 = -t54 * pkin(4) - t27;
t116 = t35 * pkin(5) - t34 * pkin(11) + t16;
t81 = t110 * t179 - t158;
t80 = t110 * t177 + t111 * t174;
t79 = -t156 - t160;
t78 = t111 * t175 - t155;
t70 = t113 * t88 + t166;
t66 = -t110 * t77 + t164;
t64 = qJD(5) * t76 - t111 * t97;
t46 = t113 * qJD(4) - t71 * qJD(6) + (t165 + t203) * qJD(5);
t45 = -t111 * t159 - t110 * (t142 * qJD(5) + qJD(4)) - t88 * t174 + t200 * t155;
t41 = -0.2e1 * t60 * t53;
t40 = -t67 * qJD(6) + t110 * t64 + t113 * t144;
t39 = -qJD(6) * t164 - t110 * t144 + t113 * t64 + t77 * t175;
t38 = -t53 * t114 - t60 * t179;
t33 = t54 * pkin(3) + t129;
t32 = t74 * pkin(3) + t118;
t30 = t59 * pkin(3) + t132;
t14 = qJD(6) * t37 + t34 * t110 + t53 * t113;
t7 = -t110 * t11 + t113 * t13;
t2 = -t8 * qJD(6) + t110 * t122 + t113 * t116;
t1 = t11 * t175 - t110 * t116 + t113 * t122 - t13 * t174;
t3 = [0, 0, 0, t106 * t135, t109 * t135, 0.2e1 * (t106 ^ 2 + t109 ^ 2) * t108 ^ 2 * qJD(2), 0.2e1 * (t196 * t109 + (qJ(2) * t189 - t99) * t106) * t181, t41, 0.2e1 * t53 * t59 - 0.2e1 * t60 * t54, t53 * t202, t54 * t202, 0, 0.2e1 * t42 * t54 + 0.2e1 * t59 * t85 + 0.2e1 * t197, -0.2e1 * t28 * t74 - 0.2e1 * t42 * t53 + 0.2e1 * t60 * t85, 0.2e1 * t27 * t59 + 0.2e1 * t29 * t60 + 0.2e1 * t31 * t54 - 0.2e1 * t32 * t53, -0.2e1 * t30 * t54 - 0.2e1 * t33 * t59 - 0.2e1 * t197, 0.2e1 * t27 * t74 + 0.2e1 * t30 * t53 - 0.2e1 * t33 * t60, 0.2e1 * t31 * t27 + 0.2e1 * t32 * t29 + 0.2e1 * t30 * t33, 0.2e1 * t44 * t34, 0.2e1 * t136 * t34 - 0.2e1 * t44 * t35, 0.2e1 * t34 * t60 - 0.2e1 * t44 * t53, -0.2e1 * t136 * t53 - 0.2e1 * t35 * t60, t41, -0.2e1 * t136 * t16 - 0.2e1 * t139 * t53 + 0.2e1 * t26 * t35 + 0.2e1 * t6 * t60, 0.2e1 * t138 * t53 + 0.2e1 * t16 * t44 + 0.2e1 * t26 * t34 + 0.2e1 * t5 * t60, 0.2e1 * t37 * t15, -0.2e1 * t37 * t14 - 0.2e1 * t15 * t36, -0.2e1 * t136 * t15 + 0.2e1 * t37 * t35, 0.2e1 * t136 * t14 - 0.2e1 * t36 * t35, -0.2e1 * t136 * t35, 0.2e1 * t10 * t14 - 0.2e1 * t136 * t2 + 0.2e1 * t7 * t35 + 0.2e1 * t4 * t36, -0.2e1 * t1 * t136 + 0.2e1 * t10 * t15 - 0.2e1 * t8 * t35 + 0.2e1 * t4 * t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t121, t119 (t199 * t53 - t112 * t54 + (t112 * t60 - t199 * t59) * qJD(3)) * t107, -t121, -t119, t33 * t193 + (-t199 * t29 - t112 * t27 + (t112 * t32 - t199 * t31) * qJD(3)) * t107, 0, 0, 0, 0, 0, t76 * t53 - t65 * t60 + (t112 * t35 - t136 * t153) * t107, t77 * t53 + t64 * t60 + (t112 * t34 + t44 * t153) * t107, 0, 0, 0, 0, 0, -t136 * t40 + t76 * t14 + t66 * t35 + t65 * t36, -t136 * t39 + t76 * t15 - t67 * t35 + t65 * t37; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, -t53, -t54, 0, -t29, t28, t53 * pkin(3) - qJ(4) * t54 - qJD(4) * t59, t29, -t27 - t72, -t29 * pkin(3) - t27 * qJ(4) - t31 * qJD(4), t34 * t114 - t44 * t179, -t34 * t111 - t114 * t35 + (-t111 * t136 - t114 * t44) * qJD(5), t38, t128, 0, t53 * t185 + qJ(4) * t35 - qJD(4) * t136 + t16 * t111 + (t114 * t26 + t60 * t186) * qJD(5), -t53 * t186 + qJ(4) * t34 + qJD(4) * t44 + t16 * t114 + (-t111 * t26 + t60 * t185) * qJD(5), -t37 * t160 + (t114 * t15 - t37 * t179) * t113, t140 * t179 + (-t195 - t113 * t14 + (t110 * t36 - t113 * t37) * qJD(6)) * t114 (t15 + t168) * t111 + (-t126 + t191) * t114 (-t14 - t169) * t111 + (-t127 - t192) * t114, t35 * t111 - t136 * t177, t70 * t35 - t46 * t136 + (t2 + (-t10 * t110 - t200 * t36) * qJD(5)) * t111 + (qJD(5) * t7 + t14 * t200 + t131) * t114, -t71 * t35 - t45 * t136 + (t1 + (-t10 * t113 - t200 * t37) * qJD(5)) * t111 + (-qJD(5) * t8 + t15 * t200 - t130) * t114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t97, -t144, 0, t97, t144 (qJD(4) * t112 + (-pkin(3) * t112 + t199 * qJ(4)) * qJD(3)) * t107, 0, 0, 0, 0, 0 (t111 * t153 + t112 * t177) * t107 (-t112 * t179 + t114 * t153) * t107, 0, 0, 0, 0, 0 (-t180 * t76 + t40) * t111 + (qJD(5) * t66 + t125) * t114 (-t178 * t76 + t39) * t111 + (-qJD(5) * t67 - t124) * t114; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t201, qJ(4) * t201, -0.2e1 * t154, 0.2e1 * t147, 0, 0, 0, 0.2e1 * qJ(4) * t177 + 0.2e1 * qJD(4) * t111, -0.2e1 * qJ(4) * t179 + 0.2e1 * qJD(4) * t114, -0.2e1 * t104 * t154 - 0.2e1 * t105 * t157, 0.2e1 * t105 * t148 + 0.4e1 * t114 * t145, -0.2e1 * t111 * t160 - 0.2e1 * t183 * t178, 0.2e1 * t110 * t147 - 0.2e1 * t111 * t158, 0.2e1 * t154, 0.2e1 * t105 * t113 * t172 + 0.2e1 * t46 * t111 + 0.2e1 * (t70 - 0.2e1 * t166) * t177, -0.2e1 * t105 * t159 + 0.2e1 * t45 * t111 + 0.2e1 * (-t71 - 0.2e1 * t163) * t177; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t53, 0, 0, t29, 0, 0, 0, 0, 0, t38, t128, 0, 0, 0, 0, 0 (-t14 + t169) * t114 + (-t127 + t192) * t111 (-t15 + t168) * t114 + (t126 + t191) * t111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t182 * t174, t182 * t175; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, -t35, -t53, t6, t5, t37 * t174 + t195, -qJD(6) * t140 - t110 * t14 + t15 * t113, t127, -t126, 0, -pkin(5) * t14 - pkin(11) * t127 + t130, -pkin(5) * t15 + pkin(11) * t126 + t131; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t65, t64, 0, 0, 0, 0, 0, t124, t125; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t179, -t177, 0, t111 * t176, t114 * t176, -t114 * t148 - t145, -0.4e1 * t114 * t157 + t184 * t179, t80, -t78, 0 (t165 - t203) * qJD(6) + (t110 * t141 + t163) * qJD(5) (t110 * t142 + t113 * t185) * qJD(6) + (-t113 * t198 + (pkin(5) * t113 - t110 * t200) * t111) * qJD(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t179, -t177, 0, 0, 0, 0, 0, t79, t81; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2e1 * t157, -0.2e1 * t148, 0, 0, 0, t110 * t171, t113 * t171; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t15, -t14, t35, t2, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t40, t39; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t79, t81, t177, t46, t45; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t80, t78; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t174, -t175, 0, -pkin(11) * t174, pkin(11) * t175; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0;];
MMD_reg  = t3;
