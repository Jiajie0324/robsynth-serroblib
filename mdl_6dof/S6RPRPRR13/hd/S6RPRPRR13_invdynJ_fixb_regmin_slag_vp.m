% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RPRPRR13
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d5,d6,theta2]';
% 
% Output:
% tau_reg [6x32]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 04:26
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRPRR13_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRPRR13_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRPRR13_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRPRR13_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRPRR13_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RPRPRR13_invdynJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 04:25:26
% EndTime: 2019-03-09 04:25:46
% DurationCPUTime: 8.28s
% Computational Cost: add. (11136->601), mult. (35646->823), div. (0->0), fcn. (31387->14), ass. (0->290)
t245 = sin(qJ(3));
t385 = cos(pkin(7));
t402 = cos(qJ(3));
t316 = t385 * t402;
t241 = sin(pkin(6));
t242 = cos(pkin(12));
t378 = t241 * t242;
t283 = t316 * t378;
t273 = qJD(1) * t283;
t240 = sin(pkin(7));
t386 = cos(pkin(6));
t335 = t386 * t240;
t300 = t402 * t335;
t239 = sin(pkin(12));
t369 = qJD(1) * t241;
t351 = t239 * t369;
t146 = -qJD(1) * t300 + t245 * t351 - t273;
t309 = t386 * t385;
t350 = t242 * t369;
t185 = -qJD(1) * t309 + t240 * t350 - qJD(3);
t244 = sin(qJ(5));
t248 = cos(qJ(5));
t100 = -t248 * t146 - t185 * t244;
t339 = t245 * t385;
t317 = t242 * t339;
t318 = t245 * t335;
t160 = t241 * (t239 * t402 + t317) + t318;
t411 = qJD(1) * t160;
t422 = qJD(5) + t411;
t426 = t100 * t422;
t246 = sin(qJ(1));
t249 = cos(qJ(1));
t337 = t249 * t386;
t191 = t246 * t239 - t242 * t337;
t192 = t239 * t337 + t246 * t242;
t376 = t241 * t249;
t379 = t240 * t245;
t107 = -t191 * t339 + t192 * t402 - t376 * t379;
t243 = sin(qJ(6));
t247 = cos(qJ(6));
t352 = t241 * t402;
t326 = t240 * t352;
t106 = t191 * t316 + t192 * t245 + t249 * t326;
t340 = t241 * t385;
t164 = t191 * t240 - t249 * t340;
t83 = t106 * t244 + t164 * t248;
t425 = -t107 * t247 + t243 * t83;
t424 = t107 * t243 + t247 * t83;
t265 = t241 * (t239 * t316 + t242 * t245);
t174 = qJD(1) * t265;
t368 = qJD(3) * t245;
t349 = t240 * t368;
t423 = t174 - t349;
t190 = t240 * t378 - t309;
t354 = pkin(1) * t386;
t195 = qJ(2) * t378 + t239 * t354;
t264 = (t242 * t340 + t335) * pkin(9);
t156 = t264 + t195;
t232 = t242 * t354;
t380 = t239 * t241;
t261 = t386 * pkin(2) + (-pkin(9) * t385 - qJ(2)) * t380;
t161 = t232 + t261;
t178 = (-pkin(9) * t239 * t240 - pkin(2) * t242 - pkin(1)) * t241;
t299 = qJD(3) * t316;
t319 = t239 * t340;
t348 = qJD(3) * t402;
t321 = t240 * t348;
t325 = t242 * t352;
t253 = -t245 * (qJD(2) * t319 + qJD(3) * t156) + qJD(2) * t325 + t161 * t299 + t178 * t321;
t60 = t190 * qJD(4) - t253;
t357 = t245 * t380;
t419 = (-t300 + t357) * qJD(3);
t418 = -t283 - t300;
t99 = qJD(6) + t100;
t417 = t106 * t248 - t164 * t244;
t102 = t146 * t244 - t185 * t248;
t74 = t102 * t243 - t247 * t422;
t416 = t422 * t74;
t331 = t99 * t422;
t237 = t241 ^ 2;
t415 = t237 * (t239 ^ 2 + t242 ^ 2);
t332 = qJD(1) * t386;
t322 = pkin(1) * t332;
t188 = qJ(2) * t350 + t239 * t322;
t131 = qJD(1) * t264 + t188;
t224 = t242 * t322;
t141 = qJD(1) * t261 + t224;
t170 = qJD(1) * t178 + qJD(2);
t353 = t240 * t402;
t69 = t245 * t131 - t141 * t316 - t170 * t353;
t414 = qJD(4) + t69;
t269 = -t244 * t385 - t248 * t353;
t324 = t240 * t351;
t413 = -qJD(5) * t269 + t244 * t423 + t248 * t324;
t197 = -t244 * t353 + t248 * t385;
t412 = qJD(5) * t197 - t244 * t324 + t248 * t423;
t175 = (-t245 * t319 + t325) * qJD(1);
t298 = t321 - t175;
t410 = -qJD(5) + t422;
t159 = t357 + t418;
t302 = t159 * t248 + t190 * t244;
t338 = t246 * t386;
t193 = -t239 * t338 + t249 * t242;
t274 = t249 * t239 + t242 * t338;
t262 = t274 * t385;
t110 = t193 * t245 - t246 * t326 + t262 * t402;
t165 = t240 * t274 + t246 * t340;
t84 = t110 * t248 - t165 * t244;
t282 = g(1) * t84 + g(2) * t417 + g(3) * t302;
t372 = pkin(4) * t411 + t414;
t403 = pkin(3) + pkin(10);
t37 = t185 * t403 + t372;
t98 = -t141 * t240 + t385 * t170;
t290 = -qJ(4) * t411 + t98;
t39 = t146 * t403 + t290;
t14 = t244 * t37 + t248 * t39;
t358 = qJDD(1) * t242;
t345 = t241 * t358;
t184 = -qJDD(1) * t309 + t240 * t345 - qJDD(3);
t320 = qJDD(1) * t354;
t360 = qJD(1) * qJD(2);
t347 = t241 * t360;
t172 = qJ(2) * t345 + t239 * t320 + t242 * t347;
t116 = qJDD(1) * t264 + t172;
t222 = t242 * t320;
t117 = qJDD(1) * t261 - t239 * t347 + t222;
t122 = t141 * t339;
t166 = qJDD(1) * t178 + qJDD(2);
t296 = qJD(3) * t122 + t245 * t116 - t117 * t316 + t131 * t348 - t166 * t353 + t170 * t349;
t276 = qJDD(4) + t296;
t359 = qJDD(1) * t241;
t346 = t239 * t359;
t96 = qJD(1) * t419 - qJD(3) * t273 - qJDD(1) * t318 - t317 * t359 - t402 * t346;
t17 = -pkin(4) * t96 + t184 * t403 + t276;
t86 = -t117 * t240 + t385 * t166;
t267 = qJ(4) * t96 - qJD(4) * t411 + t86;
t149 = t160 * qJD(3);
t278 = qJDD(1) * t418 + t245 * t346;
t97 = qJD(1) * t149 + t278;
t25 = t403 * t97 + t267;
t342 = -t248 * t17 + t244 * t25;
t94 = -qJDD(5) + t96;
t4 = pkin(5) * t94 + qJD(5) * t14 + t342;
t409 = (pkin(5) * t102 + pkin(11) * t99) * t99 + t282 + t4;
t180 = t185 * qJ(4);
t70 = t402 * t131 + t170 * t379 + t122;
t55 = -pkin(4) * t146 + t70;
t40 = -t180 + t55;
t408 = -t40 * t422 - t403 * t94;
t216 = pkin(5) * t244 - pkin(11) * t248 + qJ(4);
t315 = pkin(5) * t248 + pkin(11) * t244;
t333 = t184 * t244 + t248 * t97;
t49 = qJD(5) * t102 - t333;
t46 = qJDD(6) + t49;
t407 = (t315 * qJD(5) - (-pkin(4) - t315) * t411 + t414) * t99 + t216 * t46;
t365 = qJD(5) * t248;
t367 = qJD(5) * t244;
t48 = t146 * t365 - t248 * t184 + t185 * t367 + t244 * t97;
t76 = t102 * t247 + t243 * t422;
t23 = qJD(6) * t76 + t243 * t48 + t247 * t94;
t406 = t240 * (t184 * t245 + t185 * t348 - t351 * t411) - t175 * t185 - t385 * t96;
t405 = t240 * (t146 * t351 + t184 * t402 - t185 * t368) + t174 * t185 - t385 * t97;
t288 = t244 * t17 + t248 * t25 + t37 * t365 - t367 * t39;
t3 = -pkin(11) * t94 + t288;
t12 = pkin(11) * t422 + t14;
t29 = pkin(5) * t100 - pkin(11) * t102 + t40;
t308 = t12 * t243 - t247 * t29;
t177 = qJ(4) * t184;
t179 = qJD(4) * t185;
t297 = -t402 * t116 - t117 * t339 + t131 * t368 - t141 * t299 - t166 * t379 - t170 * t321;
t28 = t177 + t179 + t297;
t18 = -pkin(4) * t97 - t28;
t8 = pkin(5) * t49 - pkin(11) * t48 + t18;
t1 = -t308 * qJD(6) + t243 * t8 + t247 * t3;
t404 = t411 ^ 2;
t401 = pkin(1) * t237;
t400 = pkin(3) * t159;
t399 = pkin(3) * t184;
t398 = g(1) * t246;
t397 = t74 * t99;
t396 = t76 * t99;
t260 = t245 * t156 - t161 * t316 - t178 * t353;
t43 = t160 * pkin(4) + t190 * t403 + t260;
t103 = -t161 * t240 + t385 * t178;
t383 = qJ(4) * t160;
t289 = t103 - t383;
t52 = t159 * t403 + t289;
t304 = t244 * t43 + t248 * t52;
t384 = qJ(4) * t146;
t73 = t403 * t411 + t384;
t395 = t244 * t55 + t248 * t73;
t394 = t185 * t70;
t362 = qJD(6) * t247;
t363 = qJD(6) * t243;
t22 = -t102 * t363 - t243 * t94 + t247 * t48 + t362 * t422;
t392 = t22 * t243;
t391 = t243 * t46;
t390 = t243 * t99;
t389 = t247 * t46;
t328 = t247 * t99;
t382 = t411 * t146;
t381 = t411 * t244;
t377 = t241 * t246;
t375 = t243 * t403;
t374 = t247 * t403;
t371 = t249 * pkin(1) + qJ(2) * t377;
t366 = qJD(5) * t247;
t364 = qJD(5) * t403;
t139 = t402 * t156;
t334 = t385 * t161;
t355 = t178 * t379 + t245 * t334 + t139;
t344 = -t246 * pkin(1) + qJ(2) * t376;
t251 = qJD(1) ^ 2;
t336 = t251 * t386;
t330 = t422 * t76;
t329 = t422 ^ 2;
t327 = t422 * t102;
t67 = t190 * qJ(4) - t355;
t209 = t240 * qJD(2) * t380;
t314 = -g(1) * t106 + g(2) * t110;
t313 = g(1) * t249 + g(2) * t246;
t311 = qJD(2) * t332;
t310 = g(2) * t376 - g(3) * t386;
t6 = t12 * t247 + t243 * t29;
t21 = pkin(11) * t160 + t304;
t105 = t159 * t244 - t190 * t248;
t57 = -pkin(4) * t159 - t67;
t32 = -pkin(5) * t302 - pkin(11) * t105 + t57;
t307 = t21 * t247 + t243 * t32;
t306 = -t21 * t243 + t247 * t32;
t13 = -t244 * t39 + t248 * t37;
t305 = -t244 * t52 + t248 * t43;
t148 = -qJD(3) * t283 + t419;
t64 = qJD(2) * t265 + (t139 + (t178 * t240 + t334) * t245) * qJD(3);
t47 = -t148 * pkin(4) + t64;
t286 = qJ(4) * t148 - qJD(4) * t160 + t209;
t56 = t149 * t403 + t286;
t303 = -t244 * t56 + t248 * t47;
t80 = t105 * t247 + t160 * t243;
t79 = t105 * t243 - t160 * t247;
t301 = (-qJ(2) * t351 + t224) * t239 - t188 * t242;
t295 = -t362 * t99 - t391;
t294 = -t363 * t99 + t389;
t293 = -t244 * t329 - t248 * t94;
t292 = -t197 * t243 + t247 * t379;
t291 = t197 * t247 + t243 * t379;
t287 = t244 * t47 + t248 * t56 + t43 * t365 - t367 * t52;
t280 = g(1) * t110 + g(2) * t106 + g(3) * t159;
t111 = t193 * t402 + (t240 * t377 - t262) * t245;
t279 = g(1) * t111 + g(2) * t107 + g(3) * t160;
t277 = g(1) * t107 - g(2) * t111 + t64 * t185;
t272 = t244 * t94 - t248 * t329;
t271 = t18 - t279;
t11 = -pkin(5) * t422 - t13;
t270 = -pkin(11) * t46 + (t11 + t13) * t99;
t2 = -qJD(6) * t6 - t243 * t3 + t247 * t8;
t263 = -qJD(6) * t403 * t99 + t279;
t257 = (-pkin(11) * t146 - qJD(6) * t216 + t395) * t99 + t280;
t256 = t280 - t296;
t255 = -t279 - t297;
t254 = -t146 * t185 - t96;
t61 = pkin(3) * t146 + t290;
t252 = t411 * t61 + qJDD(4) - t256;
t38 = -t149 * pkin(4) - t60;
t225 = -pkin(1) * t359 + qJDD(2);
t194 = -qJ(2) * t380 + t232;
t171 = t222 + (-qJ(2) * qJDD(1) - t360) * t380;
t95 = pkin(3) * t411 + t384;
t88 = -t146 * t243 + t247 * t381;
t87 = t247 * t146 + t243 * t381;
t85 = t110 * t244 + t165 * t248;
t78 = qJD(5) * t105 - t149 * t248;
t77 = qJD(5) * t302 + t149 * t244;
t71 = pkin(3) * t149 + t286;
t68 = t190 * pkin(3) + t260;
t66 = t289 + t400;
t63 = t180 - t70;
t62 = pkin(3) * t185 + t414;
t59 = t111 * t243 + t247 * t85;
t58 = t111 * t247 - t243 * t85;
t35 = -qJD(6) * t79 - t148 * t243 + t247 * t77;
t34 = qJD(6) * t80 + t148 * t247 + t243 * t77;
t31 = pkin(3) * t97 + t267;
t30 = t276 + t399;
t26 = pkin(5) * t146 + t244 * t73 - t248 * t55;
t20 = -pkin(5) * t160 - t305;
t19 = t78 * pkin(5) - t77 * pkin(11) + t38;
t10 = pkin(5) * t148 + qJD(5) * t304 - t303;
t9 = -pkin(11) * t148 + t287;
t5 = [qJDD(1), -g(2) * t249 + t398, t313, t171 * t386 + g(1) * t192 - g(2) * t193 + (-t225 * t242 - t239 * t311) * t241 + (t194 * t386 + t242 * t401) * qJDD(1), -t172 * t386 - g(1) * t191 + g(2) * t274 + (t225 * t239 - t242 * t311) * t241 + (-t195 * t386 - t239 * t401) * qJDD(1), t360 * t415 + (-t171 * t239 + t172 * t242 + (-t194 * t239 + t195 * t242) * qJDD(1) - t313) * t241, t172 * t195 + t171 * t194 - g(1) * t344 - g(2) * t371 + (-t225 * pkin(1) - qJD(2) * t301) * t241, -t148 * t411 - t160 * t96, t146 * t148 - t149 * t411 + t159 * t96 - t160 * t97, t148 * t185 - t160 * t184 + t190 * t96, t149 * t185 + t159 * t184 + t190 * t97, t184 * t190, t103 * t97 + t146 * t209 + t98 * t149 + t86 * t159 + t184 * t260 + t190 * t296 + t277, -t103 * t96 - t98 * t148 + t86 * t160 + t184 * t355 + t185 * t253 - t190 * t297 + t209 * t411 + t314, g(1) * t164 - g(2) * t165 + t146 * t60 - t148 * t62 + t149 * t63 + t159 * t28 + t160 * t30 + t411 * t64 + t67 * t97 - t68 * t96, -t146 * t71 - t149 * t61 - t159 * t31 - t184 * t68 - t190 * t30 - t66 * t97 - t277, t148 * t61 - t160 * t31 + t184 * t67 + t185 * t60 + t190 * t28 - t411 * t71 + t66 * t96 - t314, t31 * t66 + t61 * t71 + t28 * t67 + t63 * t60 + t30 * t68 + t62 * t64 - g(1) * (-t192 * pkin(2) - pkin(3) * t107 - pkin(9) * t164 - qJ(4) * t106 + t344) - g(2) * (t193 * pkin(2) + t111 * pkin(3) + pkin(9) * t165 + t110 * qJ(4) + t371) t102 * t77 + t105 * t48, -t100 * t77 - t102 * t78 - t105 * t49 + t302 * t48, -t102 * t148 - t105 * t94 + t160 * t48 + t422 * t77, t100 * t148 - t160 * t49 - t302 * t94 - t422 * t78, -t148 * t422 - t160 * t94, t303 * t422 - t305 * t94 - t342 * t160 - t13 * t148 + t38 * t100 + t57 * t49 - t18 * t302 + t40 * t78 + g(1) * t83 - g(2) * t85 + (-t14 * t160 - t304 * t422) * qJD(5), g(1) * t417 - g(2) * t84 + t38 * t102 + t18 * t105 + t14 * t148 - t288 * t160 - t287 * t422 + t304 * t94 + t40 * t77 + t57 * t48, t22 * t80 + t35 * t76, -t22 * t79 - t23 * t80 - t34 * t76 - t35 * t74, -t22 * t302 + t35 * t99 + t46 * t80 + t76 * t78, t23 * t302 - t34 * t99 - t46 * t79 - t74 * t78, -t302 * t46 + t78 * t99 (-qJD(6) * t307 + t19 * t247 - t243 * t9) * t99 + t306 * t46 - t2 * t302 - t308 * t78 + t10 * t74 + t20 * t23 + t4 * t79 + t11 * t34 + g(1) * t424 - g(2) * t59 -(qJD(6) * t306 + t19 * t243 + t247 * t9) * t99 - t307 * t46 + t1 * t302 - t6 * t78 + t10 * t76 + t20 * t22 + t4 * t80 + t11 * t35 - g(1) * t425 - g(2) * t58; 0, 0, 0 (t239 * t336 - t358) * t241 (qJDD(1) * t239 + t242 * t336) * t241, -t251 * t415, qJDD(2) + (-pkin(1) * qJDD(1) + qJD(1) * t301 - t398) * t241 + t310, 0, 0, 0, 0, 0, -t405, t406, t175 * t146 - t174 * t411 + (t402 * t96 - t245 * t97 + (-t146 * t402 + t245 * t411) * qJD(3)) * t240, t405, -t406, -g(1) * t377 + t31 * t385 - t62 * t174 + t63 * t175 + (-t61 * t351 - t402 * t30 - t245 * t28 + (t245 * t62 - t402 * t63) * qJD(3)) * t240 + t310, 0, 0, 0, 0, 0, t298 * t100 - t269 * t94 + t49 * t379 - t412 * t422, t298 * t102 + t197 * t94 + t48 * t379 + t413 * t422, 0, 0, 0, 0, 0, -t269 * t23 + t292 * t46 + (-qJD(6) * t291 + t243 * t413 + t247 * t298) * t99 + t412 * t74, -t269 * t22 - t291 * t46 + (-qJD(6) * t292 - t243 * t298 + t247 * t413) * t99 + t412 * t76; 0, 0, 0, 0, 0, 0, 0, t382, -t146 ^ 2 + t404, t254, -t278 - (qJD(3) + t185) * t411, -t184, -t411 * t98 + t256 - t394, t146 * t98 + t185 * t69 - t255, pkin(3) * t96 - qJ(4) * t97 + (-t63 - t70) * t411 + (t62 - t414) * t146, t146 * t95 + t252 + t394 + 0.2e1 * t399, -t146 * t61 - t185 * t414 + t411 * t95 - 0.2e1 * t177 - t179 + t255, -t28 * qJ(4) - t30 * pkin(3) - t61 * t95 - t62 * t70 - g(1) * (-pkin(3) * t110 + qJ(4) * t111) - g(2) * (-pkin(3) * t106 + qJ(4) * t107) - g(3) * (t383 - t400) - t414 * t63, -t244 * t327 + t248 * t48 (-t49 - t327) * t248 + (-t48 + t426) * t244, t102 * t146 + t293, -t100 * t146 + t272, t422 * t146, qJ(4) * t49 + t13 * t146 + t372 * t100 + (-t422 * t55 - t408) * t248 + ((t73 + t364) * t422 + t271) * t244, qJ(4) * t48 + t395 * t422 - t14 * t146 + t372 * t102 + t408 * t244 + (t364 * t422 + t271) * t248, t22 * t247 * t248 + (-t244 * t366 - t248 * t363 - t88) * t76, t74 * t88 + t76 * t87 + (t243 * t76 + t247 * t74) * t367 + (-t392 - t23 * t247 + (t243 * t74 - t247 * t76) * qJD(6)) * t248, -t88 * t99 + (-t366 * t99 + t22) * t244 + (t330 + t294) * t248, t87 * t99 + (qJD(5) * t390 - t23) * t244 + (t295 - t416) * t248, t244 * t46 + t248 * t331, -t11 * t87 - t26 * t74 + t407 * t247 + t257 * t243 + (t46 * t375 + t2 + (-t11 * t243 - t403 * t74) * qJD(5) - t263 * t247) * t244 + (t11 * t362 - t308 * t411 + t403 * t23 + t4 * t243 + (t375 * t99 - t308) * qJD(5)) * t248, -t11 * t88 - t26 * t76 - t407 * t243 + t257 * t247 + (t46 * t374 - t1 + (-t11 * t247 - t403 * t76) * qJD(5) + t263 * t243) * t244 + (-t11 * t363 - t6 * t411 + t403 * t22 + t4 * t247 + (t374 * t99 - t6) * qJD(5)) * t248; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t254, -t184 - t382, -t185 ^ 2 - t404, -t185 * t63 + t252 + t399, 0, 0, 0, 0, 0, t100 * t185 + t293, t102 * t185 + t272, 0, 0, 0, 0, 0, t185 * t328 + (-t243 * t331 - t23) * t248 + (t295 + t416) * t244, -t185 * t390 + (-t247 * t331 - t22) * t248 + (t330 - t294) * t244; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t102 * t100, -t100 ^ 2 + t102 ^ 2, t48 + t426, t102 * t410 + t333, -t94, -t102 * t40 + t14 * t410 - t282 - t342, g(1) * t85 + g(2) * t83 + g(3) * t105 + t100 * t40 + t13 * t422 - t288, t328 * t76 + t392 (t22 - t397) * t247 + (-t23 - t396) * t243, -t102 * t76 + t328 * t99 + t391, -t243 * t99 ^ 2 + t102 * t74 + t389, -t99 * t102, -pkin(5) * t23 + t102 * t308 - t14 * t74 + t270 * t243 - t247 * t409, -pkin(5) * t22 + t6 * t102 - t14 * t76 + t243 * t409 + t270 * t247; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t76 * t74, -t74 ^ 2 + t76 ^ 2, t22 + t397, -t23 + t396, t46, -g(1) * t58 + g(2) * t425 + g(3) * t79 - t11 * t76 + t6 * t99 + t2, g(1) * t59 + g(2) * t424 + g(3) * t80 + t11 * t74 - t308 * t99 - t1;];
tau_reg  = t5;
