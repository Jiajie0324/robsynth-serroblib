% Calculate vector of inverse dynamics joint torques for
% S6RPRRRP12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d5,theta2]';
% MDP [32x1]
%   Minimal dynamic parameter vector (fixed base model)
%   see S6RPRRRP12_convert_par2_MPV_fixb.m
% 
% Output:
% tau [6x1]
%   joint torques of inverse dynamics (contains inertial, gravitational Coriolis and centrifugal forces)

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:53
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau = S6RPRRRP12_invdynJ_fixb_mdp_slag_vp(qJ, qJD, qJDD, g, pkin, MDP)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1),zeros(32,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP12_invdynJ_fixb_mdp_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP12_invdynJ_fixb_mdp_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP12_invdynJ_fixb_mdp_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP12_invdynJ_fixb_mdp_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RPRRRP12_invdynJ_fixb_mdp_slag_vp: pkin has to be [12x1] (double)');
assert(isreal(MDP) && all(size(MDP) == [32 1]), ...
  'S6RPRRRP12_invdynJ_fixb_mdp_slag_vp: MDP has to be [32x1] (double)'); 

%% Symbolic Calculation
% From invdyn_joint_fixb_mdp_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 06:51:15
% EndTime: 2019-03-09 06:51:45
% DurationCPUTime: 24.32s
% Computational Cost: add. (24000->810), mult. (75995->1059), div. (0->0), fcn. (66128->14), ass. (0->314)
t783 = sin(pkin(12));
t785 = cos(pkin(12));
t965 = cos(pkin(6));
t980 = cos(qJ(1));
t884 = t965 * t980;
t978 = sin(qJ(1));
t830 = t978 * t783 - t785 * t884;
t784 = sin(pkin(6));
t963 = sin(pkin(7));
t903 = t784 * t963;
t964 = cos(pkin(7));
t1007 = t830 * t964 + t980 * t903;
t736 = t783 * t884 + t785 * t978;
t788 = sin(qJ(3));
t979 = cos(qJ(3));
t662 = t1007 * t788 - t736 * t979;
t787 = sin(qJ(4));
t790 = cos(qJ(4));
t904 = t784 * t964;
t986 = t830 * t963 - t980 * t904;
t625 = t662 * t790 - t787 * t986;
t659 = t1007 * t979 + t736 * t788;
t786 = sin(qJ(5));
t789 = cos(qJ(5));
t577 = t625 * t786 + t659 * t789;
t578 = t625 * t789 - t659 * t786;
t950 = t783 * t784;
t909 = qJD(1) * t950;
t868 = t963 * t965;
t831 = t979 * t868;
t882 = t964 * t979;
t854 = t785 * t882;
t996 = -t784 * t854 - t831;
t932 = t996 * qJD(1);
t694 = t788 * t909 + t932;
t829 = qJD(4) + t694;
t902 = t788 * t964;
t817 = t784 * (-t783 * t902 + t785 * t979);
t881 = t963 * t979;
t847 = qJD(3) * t881;
t1008 = qJD(1) * t817 - t847;
t624 = t662 * t787 + t790 * t986;
t771 = t785 * t784 * qJ(2);
t897 = qJD(1) * t965;
t889 = pkin(1) * t897;
t734 = qJD(1) * t771 + t783 * t889;
t807 = (t785 * t904 + t868) * pkin(9);
t683 = qJD(1) * t807 + t734;
t769 = t785 * t889;
t808 = t965 * pkin(2) + (-pkin(9) * t964 - qJ(2)) * t950;
t689 = qJD(1) * t808 + t769;
t1001 = t979 * t683 + t689 * t902;
t727 = (-pkin(9) * t783 * t963 - pkin(2) * t785 - pkin(1)) * t784;
t715 = qJD(1) * t727 + qJD(2);
t901 = t788 * t963;
t609 = t715 * t901 + t1001;
t1006 = t609 - t829 * (pkin(4) * t787 - pkin(11) * t790);
t886 = t785 * t902;
t826 = t783 * t979 + t886;
t846 = t788 * t868;
t708 = t784 * t826 + t846;
t697 = t708 * qJD(3);
t796 = qJD(1) * t697;
t916 = qJDD(1) * t784;
t905 = t783 * t916;
t933 = t996 * qJDD(1);
t832 = t788 * t905 + t933;
t828 = qJDD(4) + t832;
t990 = t796 + t828;
t927 = qJD(4) * t787;
t1005 = pkin(10) * t927;
t1000 = t788 * t683 - t689 * t882;
t740 = t787 * t901 - t790 * t964;
t880 = qJD(1) * t903;
t852 = t783 * t880;
t999 = qJD(4) * t740 + t1008 * t790 + t787 * t852;
t741 = t787 * t964 + t790 * t901;
t936 = qJD(4) * t741 - t1008 * t787 + t790 * t852;
t816 = t784 * (t783 * t882 + t785 * t788);
t723 = qJD(1) * t816;
t879 = qJD(3) * t901;
t998 = t723 - t879;
t698 = t708 * qJD(1);
t869 = t965 * t964;
t920 = -t785 * t880 + qJD(3);
t825 = -qJD(1) * t869 - t920;
t647 = t787 * t698 + t790 * t825;
t636 = -qJD(3) * t694 + qJDD(1) * t846 + t886 * t916 + t979 * t905;
t814 = t785 * t903 - t869;
t823 = qJDD(1) * t814 - qJDD(3);
t801 = t790 * t636 - t823 * t787;
t792 = -qJD(4) * t647 + t801;
t997 = qJD(5) * t829 + t792;
t953 = t694 * t787;
t995 = t927 + t953;
t646 = qJD(5) + t647;
t912 = pkin(1) * t965;
t739 = t783 * t912 + t771;
t702 = t807 + t739;
t775 = t785 * t912;
t709 = t775 + t808;
t913 = t979 * t702 + (t964 * t709 + t963 * t727) * t788;
t781 = t784 ^ 2;
t994 = t781 * (t783 ^ 2 + t785 ^ 2);
t949 = t783 * t788;
t914 = t784 * t949;
t707 = t914 + t996;
t650 = -t709 * t963 + t964 * t727;
t967 = t708 * pkin(10);
t600 = t707 * pkin(3) + t650 - t967;
t607 = -pkin(10) * t814 + t913;
t943 = t787 * t600 + t790 * t607;
t552 = pkin(11) * t707 + t943;
t804 = -t788 * t702 + t709 * t882 + t727 * t881;
t606 = pkin(3) * t814 - t804;
t657 = t708 * t787 + t790 * t814;
t658 = t708 * t790 - t787 * t814;
t565 = t657 * pkin(4) - t658 * pkin(11) + t606;
t992 = t789 * t552 + t786 * t565;
t883 = t965 * t978;
t820 = t783 * t980 + t785 * t883;
t989 = t820 * t964 - t978 * t903;
t608 = t715 * t881 - t1000;
t638 = pkin(3) * t698 + pkin(10) * t694;
t942 = t790 * t608 + t787 * t638;
t561 = pkin(11) * t698 + t942;
t858 = pkin(4) * t790 + pkin(11) * t787 + pkin(3);
t923 = qJD(5) * t789;
t988 = t1006 * t786 + t789 * t561 + t858 * t923;
t649 = t790 * t698 - t787 * t825;
t894 = t787 * t636 + t790 * t823;
t574 = t649 * qJD(4) + t894;
t573 = qJDD(5) + t574;
t737 = -t783 * t883 + t785 * t980;
t663 = t737 * t788 + t979 * t989;
t833 = g(1) * t663 + g(2) * t659 + g(3) * t707;
t664 = t737 * t979 - t788 * t989;
t797 = -t820 * t963 - t904 * t978;
t626 = t664 * t787 + t790 * t797;
t835 = g(1) * t626 - g(2) * t624 + g(3) * t657;
t643 = -t689 * t963 + t964 * t715;
t585 = t694 * pkin(3) - t698 * pkin(10) + t643;
t589 = -pkin(10) * t825 + t609;
t546 = t790 * t585 - t787 * t589;
t541 = -pkin(4) * t829 - t546;
t614 = t649 * t786 - t789 * t829;
t616 = t789 * t649 + t786 * t829;
t525 = t614 * pkin(5) - t616 * qJ(6) + t541;
t974 = pkin(11) * t573;
t987 = t525 * t646 - t974;
t594 = qJD(2) * t817 + qJD(3) * t804;
t696 = (t831 + (t854 - t949) * t784) * qJD(3);
t851 = t783 * qJD(2) * t903;
t629 = t697 * pkin(3) - t696 * pkin(10) + t851;
t925 = qJD(4) * t790;
t840 = t790 * t594 + t600 * t925 - t607 * t927 + t787 * t629;
t528 = pkin(11) * t697 + t840;
t595 = qJD(2) * t816 + qJD(3) * t913;
t618 = qJD(4) * t658 + t696 * t787;
t619 = -qJD(4) * t657 + t696 * t790;
t544 = t618 * pkin(4) - t619 * pkin(11) + t595;
t985 = -qJD(5) * t992 - t528 * t786 + t544 * t789;
t888 = qJDD(1) * t912;
t918 = qJD(1) * qJD(2);
t906 = t784 * t918;
t719 = qJDD(1) * t771 + t783 * t888 + t785 * t906;
t670 = qJDD(1) * t807 + t719;
t767 = t785 * t888;
t672 = qJDD(1) * t808 - t783 * t906 + t767;
t711 = qJDD(1) * t727 + qJDD(2);
t845 = qJD(3) * t1001 + t788 * t670 - t672 * t882 - t711 * t881 + t715 * t879;
t554 = pkin(3) * t823 + t845;
t984 = t554 - t833;
t982 = t616 ^ 2;
t981 = t646 ^ 2;
t977 = pkin(1) * t781;
t976 = pkin(5) * t573;
t975 = pkin(10) * t790;
t966 = pkin(11) * qJD(5);
t962 = qJ(6) * t573;
t547 = t787 * t585 + t790 * t589;
t542 = pkin(11) * t829 + t547;
t588 = pkin(3) * t825 - t608;
t557 = t647 * pkin(4) - t649 * pkin(11) + t588;
t522 = t542 * t789 + t557 * t786;
t517 = qJ(6) * t646 + t522;
t961 = t517 * t646;
t960 = t522 * t646;
t637 = t796 + t832;
t793 = qJDD(4) + t637;
t924 = qJD(5) * t786;
t538 = t649 * t924 - t786 * t793 - t789 * t997;
t959 = t538 * t786;
t958 = t573 * t786;
t957 = t573 * t789;
t956 = t614 * t646;
t955 = t616 * t614;
t954 = t616 * t646;
t952 = t694 * t790;
t951 = t858 * t789;
t948 = t786 * t790;
t947 = t789 * t790;
t598 = pkin(4) * t649 + pkin(11) * t647;
t946 = t789 * t546 + t786 * t598;
t717 = t789 * t741 - t786 * t881;
t941 = -qJD(5) * t717 + t786 * t999 - t789 * t998;
t827 = -t786 * t741 - t789 * t881;
t940 = -qJD(5) * t827 + t786 * t998 + t789 * t999;
t922 = qJD(5) * t790;
t926 = qJD(4) * t789;
t939 = -qJD(6) * t790 + (-t786 * t922 - t787 * t926) * pkin(10) - t988 + t995 * qJ(6);
t938 = -t858 * t924 + (-t561 - t1005) * t786 + (pkin(10) * t922 + t1006) * t789 - t995 * pkin(5);
t895 = -t787 * t608 + t638 * t790;
t560 = -pkin(4) * t698 - t895;
t631 = -t694 * t948 - t789 * t698;
t632 = -t694 * t947 + t698 * t786;
t865 = pkin(5) * t786 - qJ(6) * t789;
t849 = pkin(10) + t865;
t866 = pkin(5) * t789 + qJ(6) * t786;
t937 = -pkin(5) * t631 + qJ(6) * t632 - t560 + (qJD(5) * t866 - qJD(6) * t789) * t787 + t849 * t925;
t935 = -qJD(6) * t786 + t646 * t865 - t547;
t931 = pkin(10) * t947 - t786 * t858;
t910 = t784 * t978;
t930 = t980 * pkin(1) + qJ(2) * t910;
t928 = qJD(4) * t786;
t921 = t588 * qJD(4);
t521 = -t542 * t786 + t557 * t789;
t919 = qJD(6) - t521;
t917 = qJDD(1) * t783;
t915 = g(1) * t978;
t911 = t784 * t980;
t908 = t646 * t924;
t907 = qJD(4) + t932;
t791 = qJD(1) ^ 2;
t900 = t791 * t965;
t896 = t600 * t790 - t787 * t607;
t893 = t646 * t789;
t824 = qJD(3) * t1000 - t979 * t670 - t672 * t902 - t711 * t901 - t715 * t847;
t553 = -pkin(10) * t823 - t824;
t630 = -t672 * t963 + t964 * t711;
t566 = t637 * pkin(3) - t636 * pkin(10) + t630;
t841 = -t790 * t553 - t787 * t566 - t585 * t925 + t589 * t927;
t514 = pkin(11) * t990 - t841;
t520 = t574 * pkin(4) - pkin(11) * t792 + t554;
t892 = t786 * t514 - t789 * t520 + t542 * t923 + t557 * t924;
t891 = t787 * t553 - t790 * t566 + t585 * t927 + t589 * t925;
t885 = -pkin(1) * t978 + qJ(2) * t911;
t627 = t664 * t790 - t787 * t797;
t579 = t627 * t786 - t663 * t789;
t877 = g(1) * t577 + g(2) * t579;
t580 = t627 * t789 + t663 * t786;
t876 = -g(1) * t578 - g(2) * t580;
t875 = g(1) * t624 + g(2) * t626;
t874 = qJD(2) * t897;
t872 = g(2) * t911 - g(3) * t965;
t871 = t786 * t925 - t631;
t870 = t789 * t925 - t632;
t620 = t658 * t786 - t707 * t789;
t621 = t658 * t789 + t707 * t786;
t867 = -pkin(5) * t620 + qJ(6) * t621;
t516 = -pkin(5) * t646 + t919;
t864 = t516 * t789 - t517 * t786;
t860 = -t552 * t786 + t565 * t789;
t859 = (-qJ(2) * t909 + t769) * t783 - t734 * t785;
t850 = pkin(4) + t866;
t848 = -t787 * t594 - t600 * t927 - t607 * t925 + t629 * t790;
t551 = -pkin(4) * t707 - t896;
t844 = -t646 * t923 - t958;
t842 = t541 * t646 - t974;
t506 = t789 * t514 + t786 * t520 - t542 * t924 + t557 * t923;
t839 = t789 * t528 + t786 * t544 - t552 * t924 + t565 * t923;
t838 = g(1) * t980 + g(2) * t978;
t610 = -t659 * t948 + t662 * t789;
t612 = -t663 * t948 - t664 * t789;
t644 = -t707 * t948 - t708 * t789;
t837 = g(1) * t612 + g(2) * t610 + g(3) * t644;
t611 = -t659 * t947 - t662 * t786;
t613 = -t663 * t947 + t664 * t786;
t645 = -t707 * t947 + t708 * t786;
t836 = -g(1) * t613 - g(2) * t611 - g(3) * t645;
t834 = -g(1) * t627 + g(2) * t625 - g(3) * t658;
t529 = -pkin(4) * t697 - t848;
t822 = qJD(4) * t829;
t815 = -t646 * t966 + t835;
t813 = t823 * MDP(12);
t811 = g(1) * t579 - g(2) * t577 + g(3) * t620 - t892;
t539 = t649 * t923 + t786 * t997 - t789 * t793;
t508 = -pkin(4) * t793 + t539 * pkin(5) + t538 * qJ(6) - t616 * qJD(6) + t891;
t809 = -t508 + t815;
t802 = -g(1) * t580 + g(2) * t578 - g(3) * t621 + t506;
t800 = t525 * t616 + qJDD(6) - t811;
t795 = t694 * t829 + t822;
t770 = -pkin(1) * t916 + qJDD(2);
t738 = -qJ(2) * t950 + t775;
t732 = t849 * t787;
t722 = t951 + (pkin(10) * t786 + pkin(5)) * t790;
t721 = -qJ(6) * t790 + t931;
t718 = t767 + (-qJ(2) * qJDD(1) - t918) * t950;
t569 = pkin(5) * t616 + qJ(6) * t614;
t568 = -qJD(5) * t620 + t619 * t789 + t697 * t786;
t567 = qJD(5) * t621 + t619 * t786 - t697 * t789;
t534 = t551 - t867;
t531 = -pkin(5) * t649 + t546 * t786 - t598 * t789;
t530 = qJ(6) * t649 + t946;
t526 = -t538 + t956;
t524 = -pkin(5) * t657 - t860;
t523 = qJ(6) * t657 + t992;
t515 = -pkin(4) * t990 + t891;
t511 = pkin(5) * t567 - qJ(6) * t568 - qJD(6) * t621 + t529;
t510 = -pkin(5) * t618 - t985;
t509 = qJ(6) * t618 + qJD(6) * t657 + t839;
t505 = qJDD(6) + t892 - t976;
t504 = qJD(6) * t646 + t506 + t962;
t1 = [(-t547 * t697 + t554 * t658 + t588 * t619 + t595 * t649 + t606 * t792 + t707 * t841 - t829 * t840 - t943 * t990 + t875) * MDP(21) + (-t504 * t620 + t505 * t621 - t509 * t614 + t510 * t616 + t516 * t568 - t517 * t567 - t523 * t539 - t524 * t538 - t875) * MDP(30) + (-t505 * t657 + t508 * t620 - t510 * t646 + t511 * t614 - t516 * t618 - t524 * t573 + t525 * t567 + t534 * t539 + t876) * MDP(29) + (t504 * t657 - t508 * t621 + t509 * t646 - t511 * t616 + t517 * t618 + t523 * t573 - t525 * t568 + t534 * t538 - t877) * MDP(31) + (-g(1) * t625 - g(2) * t627 + t546 * t697 + t554 * t657 + t606 * t574 + t588 * t618 + t595 * t647 - t707 * t891 + t793 * t896 + t829 * t848) * MDP(20) + (-t658 * t574 - t649 * t618 - t619 * t647 - t657 * t792) * MDP(16) + (t649 * t619 + t658 * t792) * MDP(15) + (-g(1) * t662 - g(2) * t664 + t595 * t825 + t630 * t707 + t650 * t637 + t643 * t697 + t694 * t851 - t804 * t823 + t814 * t845) * MDP(13) + t814 * t813 + (-t636 * t814 - t696 * t825 - t708 * t823) * MDP(10) + (t637 * t814 + t697 * t825 + t707 * t823) * MDP(11) + (t504 * t523 + t517 * t509 + t508 * t534 + t525 * t511 + t505 * t524 + t516 * t510 - g(1) * (-t736 * pkin(2) + t662 * pkin(3) + t625 * pkin(4) + t578 * pkin(5) - pkin(10) * t659 + t624 * pkin(11) + t577 * qJ(6) + t885) - g(2) * (t737 * pkin(2) + t664 * pkin(3) + t627 * pkin(4) + t580 * pkin(5) + t663 * pkin(10) + t626 * pkin(11) + t579 * qJ(6) + t930) + (g(1) * t986 + g(2) * t797) * pkin(9)) * MDP(32) + (-g(1) * t659 + g(2) * t663 + t594 * t825 + t630 * t708 + t650 * t636 + t643 * t696 + t698 * t851 - t814 * t824 + t823 * t913) * MDP(14) + t838 * MDP(3) + (t515 * t620 + t521 * t618 + t529 * t614 + t551 * t539 + t541 * t567 + t860 * t573 + t646 * t985 - t657 * t892 + t876) * MDP(27) + (-t506 * t657 + t515 * t621 - t522 * t618 + t529 * t616 - t551 * t538 + t541 * t568 - t573 * t992 - t646 * t839 + t877) * MDP(28) + (-t636 * t707 - t637 * t708 - t694 * t696 - t697 * t698) * MDP(9) + (t636 * t708 + t696 * t698) * MDP(8) + (-t539 * t657 - t567 * t646 - t573 * t620 - t614 * t618) * MDP(25) + (-t538 * t657 + t568 * t646 + t573 * t621 + t616 * t618) * MDP(24) + (t573 * t657 + t618 * t646) * MDP(26) + (t538 * t620 - t539 * t621 - t567 * t616 - t568 * t614) * MDP(23) + (-t538 * t621 + t568 * t616) * MDP(22) + (t828 * t707 + (t907 + (t707 + t914) * qJD(1)) * t697) * MDP(19) + (-t618 * t907 - t657 * t828 - t574 * t707 - t647 * t697 + (-t618 * t914 - t657 * t697) * qJD(1)) * MDP(18) + (t918 * t994 + (-t718 * t783 + t719 * t785 + (-t738 * t783 + t739 * t785) * qJDD(1) - t838) * t784) * MDP(6) + (t719 * t739 + t718 * t738 - g(1) * t885 - g(2) * t930 + (-t770 * pkin(1) - qJD(2) * t859) * t784) * MDP(7) + (t619 * t907 + t658 * (qJD(1) * qJD(3) * t846 + qJDD(4) + t933) + t792 * t707 + t649 * t697 + (t658 * t788 * t917 + (qJD(3) * t658 * t826 + t619 * t949) * qJD(1)) * t784) * MDP(17) + (-t719 * t965 - g(1) * t830 + g(2) * t820 + (t770 * t783 - t785 * t874) * t784 + (-t739 * t965 - t783 * t977) * qJDD(1)) * MDP(5) + (t718 * t965 + g(1) * t736 - g(2) * t737 + (-t770 * t785 - t783 * t874) * t784 + (t738 * t965 + t785 * t977) * qJDD(1)) * MDP(4) + (-g(2) * t980 + t915) * MDP(2) + qJDD(1) * MDP(1); -t791 * MDP(6) * t994 + (qJDD(2) + t872) * MDP(7) + (t637 * t964 - t694 * t852 - t823 * t881 - t825 * t998) * MDP(13) + (-t1008 * t825 + t636 * t964 - t698 * t852 + t823 * t901) * MDP(14) + (-t740 * t828 - t574 * t881 - t723 * t647 + (t647 * t901 - t698 * t740) * qJD(3) - t936 * t829) * MDP(20) + (-t649 * t998 - t741 * t990 - t792 * t881 + t829 * t999) * MDP(21) + (t538 * t827 - t539 * t717 + t614 * t940 - t616 * t941) * MDP(30) + (-g(1) * t910 + t504 * t717 - t505 * t827 + t508 * t740 - t516 * t941 - t517 * t940 + t525 * t936 + t872) * MDP(32) + (MDP(28) - MDP(31)) * (-t538 * t740 - t573 * t717 + t616 * t936 + t646 * t940) + (MDP(27) + MDP(29)) * (t740 * t539 + t573 * t827 + t614 * t936 + t646 * t941) + ((-qJDD(1) * t785 + t783 * t900) * MDP(4) + (t785 * t900 + t917) * MDP(5) + (-pkin(1) * qJDD(1) + qJD(1) * t859 - t915) * MDP(7)) * t784; (-t609 * t825 - t643 * t698 + t833 - t845) * MDP(13) - t829 * t698 * MDP(19) + (-pkin(3) * t792 + t547 * t698 + t588 * t952 - t609 * t649 + t790 * t921 - t990 * t975 + (t942 + t1005) * t829 + t984 * t787) * MDP(21) + (-t573 * t951 - t541 * t631 - t560 * t614 + (-t1006 * t789 + (qJD(5) * t858 + t561) * t786) * t646 + (t541 * t928 + t892 + (qJD(4) * t614 + t844) * pkin(10)) * t790 + (t541 * t923 + t515 * t786 + t829 * t521 + (t646 * t928 + t539) * pkin(10)) * t787 + t836) * MDP(27) - t813 + (t698 * t920 + (t698 * t869 - t697) * qJD(1) - t832) * MDP(11) + (-t787 * t574 + t790 * t792 - t995 * t649 + (-t925 - t952) * t647) * MDP(16) + (-t694 * t825 + t636) * MDP(10) + (g(1) * t664 - g(2) * t662 + g(3) * t708 - t608 * t825 + t643 * t694 + t824) * MDP(14) + (t504 * t721 + t508 * t732 + t505 * t722 - g(1) * (pkin(5) * t613 + pkin(10) * t664 + qJ(6) * t612) - g(2) * (pkin(5) * t611 - pkin(10) * t662 + qJ(6) * t610) - g(3) * (pkin(5) * t645 + qJ(6) * t644 + t967) + t937 * t525 + t939 * t517 + t938 * t516 + t833 * t858) * MDP(32) + t698 * t694 * MDP(8) + (-t694 ^ 2 + t698 ^ 2) * MDP(9) + (-pkin(3) * t574 - t546 * t698 + t588 * t953 - t609 * t647 - t822 * t975 - t829 * t895 + (-pkin(10) * t793 + t921) * t787 - t984 * t790) * MDP(20) + (-t931 * t573 - t560 * t616 - t541 * t632 + t988 * t646 + (t541 * t926 + t506 + (qJD(4) * t616 + t908) * pkin(10)) * t790 + (-t541 * t924 + t515 * t789 - t829 * t522 + (t646 * t926 - t538) * pkin(10)) * t787 + t837) * MDP(28) + (-t649 * t698 + t787 * t990 + t790 * t795) * MDP(17) + (t647 * t698 - t787 * t795 + t790 * t990) * MDP(18) + ((-qJD(4) * t698 - t823) * t787 ^ 2 + ((-qJD(4) * t825 + t636) * t787 + t829 * t649) * t790) * MDP(15) + (t646 * t787 * t829 - t573 * t790) * MDP(26) + (t539 * t790 - t871 * t646 + (-t614 * t829 + t844) * t787) * MDP(25) + (-t538 * t787 * t789 + (-t787 * t924 + t870) * t616) * MDP(22) + (t505 * t790 + t539 * t732 - t573 * t722 - t938 * t646 + t937 * t614 + t871 * t525 + (t508 * t786 - t516 * t829 + t525 * t923) * t787 + t836) * MDP(29) + (-t504 * t790 + t538 * t732 + t573 * t721 + t939 * t646 - t937 * t616 - t870 * t525 + (-t508 * t789 + t517 * t829 + t525 * t924) * t787 - t837) * MDP(31) + (-t516 * t632 + t517 * t631 - t538 * t722 - t539 * t721 + t938 * t616 - t939 * t614 + t864 * t925 + (-t504 * t786 + t505 * t789 + (-t516 * t786 - t517 * t789) * qJD(5) + t833) * t787) * MDP(30) + (t538 * t790 + t870 * t646 + (t616 * t829 - t908 + t957) * t787) * MDP(24) + (t614 * t632 + t616 * t631 + (-t614 * t789 - t616 * t786) * t925 + (t959 - t539 * t789 + (t614 * t786 - t616 * t789) * qJD(5)) * t787) * MDP(23); -t647 ^ 2 * MDP(16) + (t694 * t647 + t801) * MDP(17) - t894 * MDP(18) + t793 * MDP(19) + (t547 * t829 + t835 - t891) * MDP(20) + (t546 * t829 + t588 * t647 - t834 + t841) * MDP(21) + (t616 * t893 - t959) * MDP(22) + ((-t538 - t956) * t789 + (-t539 - t954) * t786) * MDP(23) + (t646 * t893 + t958) * MDP(24) + (-t786 * t981 + t957) * MDP(25) + (-pkin(4) * t539 - t547 * t614 + (t546 * t646 + t842) * t786 + (-t515 + (-t598 - t966) * t646 + t835) * t789) * MDP(27) + (pkin(4) * t538 + t946 * t646 - t547 * t616 + t842 * t789 + (t515 - t815) * t786) * MDP(28) + (t531 * t646 - t539 * t850 + t935 * t614 + t786 * t987 + t809 * t789) * MDP(29) + (t530 * t614 - t531 * t616 + (t504 + t646 * t516 + (qJD(5) * t616 - t539) * pkin(11)) * t789 + (t505 - t961 + (qJD(5) * t614 - t538) * pkin(11)) * t786 + t834) * MDP(30) + (-t530 * t646 - t538 * t850 - t935 * t616 + t809 * t786 - t789 * t987) * MDP(31) + (-t516 * t531 - t517 * t530 + t935 * t525 + (qJD(5) * t864 + t504 * t789 + t505 * t786 + t834) * pkin(11) + (-t508 + t835) * t850) * MDP(32) + (MDP(15) * t647 + t649 * MDP(16) + MDP(18) * t694 - t588 * MDP(20) - t616 * MDP(24) + t614 * MDP(25) - t646 * MDP(26) - t521 * MDP(27) + t522 * MDP(28) + t516 * MDP(29) - t517 * MDP(31)) * t649; MDP(22) * t955 + (-t614 ^ 2 + t982) * MDP(23) + t526 * MDP(24) + (-t539 + t954) * MDP(25) + t573 * MDP(26) + (-t541 * t616 + t811 + t960) * MDP(27) + (t521 * t646 + t541 * t614 - t802) * MDP(28) + (-t569 * t614 - t800 + t960 + 0.2e1 * t976) * MDP(29) + (pkin(5) * t538 - qJ(6) * t539 + (t517 - t522) * t616 + (t516 - t919) * t614) * MDP(30) + (0.2e1 * t962 - t525 * t614 + t569 * t616 + (0.2e1 * qJD(6) - t521) * t646 + t802) * MDP(31) + (t504 * qJ(6) - t505 * pkin(5) - t525 * t569 - t516 * t522 - g(1) * (-pkin(5) * t579 + qJ(6) * t580) - g(2) * (pkin(5) * t577 - qJ(6) * t578) - g(3) * t867 + t919 * t517) * MDP(32); (t955 - t573) * MDP(29) + t526 * MDP(30) + (-t981 - t982) * MDP(31) + (t800 - t961 - t976) * MDP(32);];
tau  = t1;
