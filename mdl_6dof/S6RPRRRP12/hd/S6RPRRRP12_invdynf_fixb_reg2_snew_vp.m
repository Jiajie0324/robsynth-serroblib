% Calculate inertial parameters regressor of inverse dynamics cutting forces vector with Newton-Euler for
% S6RPRRRP12
% Use Code from Maple symbolic Code Generation
%
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d5,theta2]';
%
% Output:
% f_new_reg [(3*7)x(7*10)]
%   inertial parameter regressor of inverse dynamics cutting forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 02:30
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function f_new_reg = S6RPRRRP12_invdynf_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP12_invdynf_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP12_invdynf_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP12_invdynf_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP12_invdynf_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RPRRRP12_invdynf_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_f_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 02:29:40
% EndTime: 2019-05-06 02:30:06
% DurationCPUTime: 28.52s
% Computational Cost: add. (153904->408), mult. (480029->608), div. (0->0), fcn. (412210->14), ass. (0->328)
t3385 = sin(pkin(12));
t3387 = sin(pkin(6));
t3388 = cos(pkin(12));
t3397 = cos(qJ(3));
t3393 = sin(qJ(3));
t3386 = sin(pkin(7));
t3390 = cos(pkin(6));
t3490 = t3386 * t3390;
t3477 = t3393 * t3490;
t3389 = cos(pkin(7));
t3485 = t3389 * t3393;
t3349 = (t3477 + (t3385 * t3397 + t3388 * t3485) * t3387) * qJD(1);
t3392 = sin(qJ(4));
t3396 = cos(qJ(4));
t3489 = t3387 * t3388;
t3479 = qJD(1) * t3489;
t3368 = t3386 * t3479;
t3486 = t3389 * t3390;
t3465 = qJD(1) * t3486 - t3368;
t3426 = qJD(3) + t3465;
t3340 = t3396 * t3349 + t3392 * t3426;
t3487 = t3388 * t3389;
t3532 = t3387 * (-t3385 * t3393 + t3397 * t3487) + t3397 * t3490;
t3347 = t3532 * qJD(1);
t3483 = qJDD(1) * t3387;
t3471 = t3388 * t3483;
t3472 = t3385 * t3483;
t3328 = t3347 * qJD(3) + qJDD(1) * t3477 + t3397 * t3472 + t3471 * t3485;
t3482 = qJDD(1) * t3390;
t3421 = -t3386 * t3471 + t3389 * t3482 + qJDD(3);
t3467 = t3328 * t3392 - t3396 * t3421;
t3420 = qJD(4) * t3340 + qJDD(5) + t3467;
t3346 = qJD(4) - t3347;
t3391 = sin(qJ(5));
t3395 = cos(qJ(5));
t3315 = t3340 * t3391 - t3346 * t3395;
t3317 = t3340 * t3395 + t3346 * t3391;
t3497 = t3315 * t3317;
t3256 = t3420 + t3497;
t3313 = t3317 ^ 2;
t3338 = t3349 * t3392 - t3396 * t3426;
t3335 = qJD(5) + t3338;
t3512 = t3335 ^ 2;
t3518 = -t3313 - t3512;
t3227 = t3256 * t3395 + t3391 * t3518;
t3414 = -t3396 * t3328 - t3392 * t3421;
t3296 = -t3338 * qJD(4) - t3414;
t3525 = t3532 * qJDD(1);
t3409 = t3349 * qJD(3) + qJDD(4) - t3525;
t3406 = -t3315 * qJD(5) + t3395 * t3296 + t3391 * t3409;
t3496 = t3315 * t3335;
t3405 = t3406 - t3496;
t3195 = t3227 * t3392 + t3396 * t3405;
t3197 = t3227 * t3396 - t3392 * t3405;
t3225 = t3256 * t3391 - t3395 * t3518;
t3448 = t3197 * t3393 - t3225 * t3397;
t3155 = t3195 * t3389 + t3386 * t3448;
t3157 = -t3195 * t3386 + t3389 * t3448;
t3179 = t3197 * t3397 + t3225 * t3393;
t3456 = t3157 * t3388 + t3179 * t3385;
t3127 = -t3155 * t3387 + t3390 * t3456;
t3146 = t3157 * t3385 - t3179 * t3388;
t3394 = sin(qJ(1));
t3398 = cos(qJ(1));
t3568 = t3127 * t3394 + t3146 * t3398;
t3567 = t3127 * t3398 - t3146 * t3394;
t3125 = t3155 * t3390 + t3387 * t3456;
t3246 = t3406 + t3496;
t3469 = t3296 * t3391 - t3395 * t3409;
t3418 = (-qJD(5) + t3335) * t3317 - t3469;
t3514 = -t3246 * t3395 + t3391 * t3418;
t3282 = t3315 ^ 2;
t3268 = t3313 + t3282;
t3513 = t3246 * t3391 + t3395 * t3418;
t3534 = -t3268 * t3392 + t3396 * t3513;
t3539 = t3393 * t3514 + t3397 * t3534;
t3533 = t3268 * t3396 + t3392 * t3513;
t3540 = t3393 * t3534 - t3397 * t3514;
t3545 = -t3386 * t3533 + t3389 * t3540;
t3550 = -t3385 * t3545 + t3388 * t3539;
t3546 = t3386 * t3540 + t3389 * t3533;
t3549 = t3385 * t3539 + t3388 * t3545;
t3555 = -t3387 * t3546 + t3390 * t3549;
t3560 = -t3394 * t3555 + t3398 * t3550;
t3559 = t3394 * t3550 + t3398 * t3555;
t3556 = t3387 * t3549 + t3390 * t3546;
t3257 = t3420 - t3497;
t3516 = -t3512 - t3282;
t3523 = -t3257 * t3391 + t3395 * t3516;
t3538 = t3392 * t3523;
t3524 = t3257 * t3395 + t3391 * t3516;
t3537 = t3393 * t3524;
t3536 = t3396 * t3523;
t3535 = t3397 * t3524;
t3419 = (t3387 * t3487 + t3490) * pkin(9);
t3492 = t3385 * t3387;
t3478 = t3386 * t3492;
t3408 = -(-pkin(2) * t3489 - pkin(9) * t3478) * t3492 + t3390 * t3419;
t3378 = g(1) * t3394 - g(2) * t3398;
t3399 = qJD(1) ^ 2;
t3488 = t3387 * t3399;
t3417 = -qJ(2) * t3488 - t3378;
t3416 = qJDD(1) * pkin(1) - t3417;
t3413 = t3390 * t3416;
t3410 = (-t3387 * g(3) + t3413) * t3388;
t3379 = -g(1) * t3398 - g(2) * t3394;
t3422 = pkin(1) * t3399 - t3379;
t3427 = -pkin(9) * t3385 * t3386 - pkin(2) * t3388;
t3470 = -t3390 * g(3) + qJDD(2);
t3480 = pkin(2) * t3482;
t3503 = pkin(9) * t3389;
t3504 = pkin(2) * t3390;
t3506 = -2 * qJD(2);
t3381 = t3385 ^ 2;
t3383 = t3388 ^ 2;
t3517 = -t3381 - t3383;
t3527 = t3389 * (t3480 + t3410 + ((-qJ(2) - t3503) * t3483 + t3422) * t3385 + (qJD(1) * t3408 + t3492 * t3506) * qJD(1)) + t3386 * (((-pkin(1) + t3427) * qJDD(1) + t3417) * t3387 + (t3385 * t3504 + (t3387 * t3389 * t3517 - t3388 * t3490) * pkin(9)) * t3488 + t3470);
t3425 = t3426 ^ 2;
t3522 = 2 * qJD(2);
t3521 = t3347 * t3426;
t3511 = t3338 ^ 2;
t3510 = t3340 ^ 2;
t3509 = t3346 ^ 2;
t3508 = t3347 ^ 2;
t3507 = t3349 ^ 2;
t3384 = t3390 ^ 2;
t3505 = 0.2e1 * qJD(3);
t3495 = t3338 * t3340;
t3494 = t3347 * t3349;
t3382 = t3387 ^ 2;
t3493 = t3382 * t3399;
t3484 = qJD(4) - t3346;
t3415 = qJ(2) * t3483 - t3422;
t3337 = -g(3) * t3492 + t3385 * t3413 + t3388 * t3415 + t3479 * t3522;
t3481 = t3385 * t3503;
t3302 = qJDD(1) * t3419 + (-pkin(2) * t3384 + (t3390 * t3481 + t3427 * t3489) * t3387) * t3399 + t3337;
t3253 = t3397 * t3302 + t3393 * t3527;
t3325 = -pkin(3) * t3347 - pkin(10) * t3349;
t3238 = -pkin(3) * t3425 + pkin(10) * t3421 + t3347 * t3325 + t3253;
t3350 = -t3387 * t3416 + t3470;
t3402 = -t3386 * (-g(3) * t3489 - t3385 * t3415 + t3388 * t3413 + t3480) + t3389 * (-pkin(2) * t3471 + t3350);
t3403 = t3478 * t3522 + (-t3386 * t3408 + t3389 * ((-t3387 * t3481 + t3504) * t3492 - t3419 * t3489)) * qJD(1);
t3400 = (-t3328 - t3347 * (qJD(3) - t3368)) * pkin(10) + ((t3505 - t3368) * t3349 - t3525) * pkin(3) + (t3403 + (pkin(3) * t3349 - pkin(10) * t3347) * t3486) * qJD(1) + t3402;
t3206 = t3396 * t3238 + t3392 * t3400;
t3304 = pkin(4) * t3338 - pkin(11) * t3340;
t3192 = -t3509 * pkin(4) + pkin(11) * t3409 - t3338 * t3304 + t3206;
t3464 = t3393 * t3302 - t3397 * t3527;
t3237 = -t3421 * pkin(3) - t3425 * pkin(10) + t3349 * t3325 + t3464;
t3273 = (qJD(4) + t3346) * t3340 + t3467;
t3468 = t3346 * t3338 - t3296;
t3407 = pkin(4) * t3273 + pkin(11) * t3468 + t3237;
t3173 = t3395 * t3192 + t3391 * t3407;
t3474 = t3390 * t3488;
t3172 = -t3192 * t3391 + t3395 * t3407;
t3205 = -t3238 * t3392 + t3396 * t3400;
t3281 = pkin(5) * t3315 - qJ(6) * t3317;
t3154 = -pkin(5) * t3512 + qJ(6) * t3420 + 0.2e1 * qJD(6) * t3335 - t3315 * t3281 + t3173;
t3159 = -pkin(5) * t3420 - qJ(6) * t3512 + t3281 * t3317 + qJDD(6) - t3172;
t3139 = t3154 * t3395 + t3159 * t3391;
t3191 = -t3409 * pkin(4) - t3509 * pkin(11) + t3304 * t3340 - t3205;
t3423 = -qJD(5) * t3317 - t3469;
t3171 = -t3423 * pkin(5) + (pkin(5) * t3335 - 0.2e1 * qJD(6)) * t3317 + t3191 - t3405 * qJ(6);
t3123 = t3139 * t3392 - t3171 * t3396;
t3124 = t3139 * t3396 + t3171 * t3392;
t3138 = t3154 * t3391 - t3159 * t3395;
t3461 = t3124 * t3393 - t3138 * t3397;
t3112 = -t3123 * t3386 + t3389 * t3461;
t3115 = t3124 * t3397 + t3138 * t3393;
t3463 = t3112 * t3388 + t3115 * t3385;
t3143 = -t3172 * t3391 + t3173 * t3395;
t3136 = t3143 * t3392 - t3191 * t3396;
t3137 = t3143 * t3396 + t3191 * t3392;
t3142 = t3172 * t3395 + t3173 * t3391;
t3460 = t3137 * t3393 - t3142 * t3397;
t3114 = -t3136 * t3386 + t3389 * t3460;
t3118 = t3137 * t3397 + t3142 * t3393;
t3462 = t3114 * t3388 + t3118 * t3385;
t3176 = t3205 * t3396 + t3206 * t3392;
t3177 = -t3205 * t3392 + t3206 * t3396;
t3452 = t3177 * t3393 - t3237 * t3397;
t3145 = -t3176 * t3386 + t3389 * t3452;
t3168 = t3177 * t3397 + t3237 * t3393;
t3459 = t3145 * t3388 + t3168 * t3385;
t3242 = (qJD(5) + t3335) * t3317 + t3469;
t3196 = -t3242 * t3396 + t3538;
t3198 = t3242 * t3392 + t3536;
t3447 = t3198 * t3393 - t3535;
t3158 = -t3196 * t3386 + t3389 * t3447;
t3180 = t3198 * t3397 + t3537;
t3455 = t3158 * t3388 + t3180 * t3385;
t3243 = t3335 * t3317 - t3423;
t3200 = -t3243 * t3396 + t3538;
t3202 = t3243 * t3392 + t3536;
t3445 = t3202 * t3393 - t3535;
t3163 = -t3200 * t3386 + t3389 * t3445;
t3183 = t3202 * t3397 + t3537;
t3453 = t3163 * t3388 + t3183 * t3385;
t3274 = -t3340 * t3484 - t3467;
t3276 = t3338 * t3484 + t3414;
t3239 = t3274 * t3392 + t3276 * t3396;
t3240 = t3274 * t3396 - t3276 * t3392;
t3286 = -t3510 - t3511;
t3441 = t3240 * t3393 - t3286 * t3397;
t3194 = -t3239 * t3386 + t3389 * t3441;
t3224 = t3240 * t3397 + t3286 * t3393;
t3449 = t3194 * t3388 + t3224 * t3385;
t3278 = t3403 * qJD(1) + t3402;
t3440 = t3253 * t3393 - t3397 * t3464;
t3212 = -t3278 * t3386 + t3389 * t3440;
t3223 = t3253 * t3397 + t3393 * t3464;
t3444 = t3212 * t3388 + t3223 * t3385;
t3283 = t3409 - t3495;
t3297 = -t3509 - t3511;
t3259 = t3283 * t3396 + t3297 * t3392;
t3260 = -t3283 * t3392 + t3297 * t3396;
t3438 = t3260 * t3393 - t3273 * t3397;
t3216 = -t3259 * t3386 + t3389 * t3438;
t3230 = t3260 * t3397 + t3273 * t3393;
t3443 = t3216 * t3388 + t3230 * t3385;
t3284 = -t3495 - t3409;
t3301 = -t3509 - t3510;
t3263 = t3284 * t3392 + t3301 * t3396;
t3264 = t3284 * t3396 - t3301 * t3392;
t3437 = t3264 * t3393 + t3397 * t3468;
t3218 = -t3263 * t3386 + t3389 * t3437;
t3235 = t3264 * t3397 - t3393 * t3468;
t3442 = t3218 * t3388 + t3235 * t3385;
t3314 = -t3507 - t3508;
t3307 = t3349 * t3465 + t3525;
t3309 = -t3328 + t3521;
t3434 = t3307 * t3393 + t3309 * t3397;
t3255 = -t3314 * t3386 + t3389 * t3434;
t3277 = t3307 * t3397 - t3309 * t3393;
t3439 = t3255 * t3388 + t3277 * t3385;
t3306 = (t3505 + t3465) * t3349 - t3525;
t3319 = -t3425 - t3508;
t3321 = t3421 + t3494;
t3433 = t3319 * t3393 + t3321 * t3397;
t3266 = -t3306 * t3386 + t3389 * t3433;
t3285 = t3319 * t3397 - t3321 * t3393;
t3436 = t3266 * t3388 + t3285 * t3385;
t3308 = t3328 + t3521;
t3320 = -t3421 + t3494;
t3322 = -t3507 - t3425;
t3432 = t3320 * t3393 + t3322 * t3397;
t3270 = -t3308 * t3386 + t3389 * t3432;
t3287 = t3320 * t3397 - t3322 * t3393;
t3435 = t3270 * t3388 + t3287 * t3385;
t3336 = t3410 + ((-qJ(2) * qJDD(1) + qJD(1) * t3506) * t3387 + t3422) * t3385;
t3431 = t3336 * t3388 + t3337 * t3385;
t3371 = t3388 * t3474;
t3358 = t3371 - t3472;
t3370 = t3385 * t3474;
t3359 = t3370 + t3471;
t3430 = t3358 * t3388 + t3359 * t3385;
t3369 = t3388 * t3385 * t3493;
t3361 = t3369 + t3482;
t3365 = (-t3382 * t3383 - t3384) * t3399;
t3429 = t3361 * t3388 + t3365 * t3385;
t3362 = t3369 - t3482;
t3364 = (-t3381 * t3382 - t3384) * t3399;
t3428 = t3362 * t3385 + t3364 * t3388;
t3376 = -qJDD(1) * t3394 - t3398 * t3399;
t3375 = qJDD(1) * t3398 - t3394 * t3399;
t3363 = t3517 * t3493;
t3360 = t3370 - t3471;
t3357 = t3371 + t3472;
t3343 = t3362 * t3388 - t3364 * t3385;
t3342 = -t3361 * t3385 + t3365 * t3388;
t3341 = -t3358 * t3385 + t3359 * t3388;
t3332 = -t3357 * t3387 + t3390 * t3428;
t3331 = -t3360 * t3387 + t3390 * t3429;
t3330 = t3357 * t3390 + t3387 * t3428;
t3329 = t3360 * t3390 + t3387 * t3429;
t3327 = -t3363 * t3387 + t3390 * t3430;
t3326 = t3363 * t3390 + t3387 * t3430;
t3303 = -t3336 * t3385 + t3337 * t3388;
t3289 = -t3350 * t3387 + t3390 * t3431;
t3288 = t3350 * t3390 + t3387 * t3431;
t3269 = t3308 * t3389 + t3386 * t3432;
t3265 = t3306 * t3389 + t3386 * t3433;
t3254 = t3314 * t3389 + t3386 * t3434;
t3251 = -t3270 * t3385 + t3287 * t3388;
t3241 = -t3266 * t3385 + t3285 * t3388;
t3229 = -t3255 * t3385 + t3277 * t3388;
t3222 = -t3269 * t3387 + t3390 * t3435;
t3221 = t3269 * t3390 + t3387 * t3435;
t3220 = -t3265 * t3387 + t3390 * t3436;
t3219 = t3265 * t3390 + t3387 * t3436;
t3217 = t3263 * t3389 + t3386 * t3437;
t3215 = t3259 * t3389 + t3386 * t3438;
t3214 = -t3254 * t3387 + t3390 * t3439;
t3213 = t3254 * t3390 + t3387 * t3439;
t3211 = t3278 * t3389 + t3386 * t3440;
t3193 = t3239 * t3389 + t3386 * t3441;
t3185 = -t3218 * t3385 + t3235 * t3388;
t3184 = -t3216 * t3385 + t3230 * t3388;
t3181 = -t3212 * t3385 + t3223 * t3388;
t3178 = -t3194 * t3385 + t3224 * t3388;
t3170 = -t3217 * t3387 + t3390 * t3442;
t3169 = t3217 * t3390 + t3387 * t3442;
t3167 = -t3215 * t3387 + t3390 * t3443;
t3166 = t3215 * t3390 + t3387 * t3443;
t3165 = -t3211 * t3387 + t3390 * t3444;
t3164 = t3211 * t3390 + t3387 * t3444;
t3161 = t3200 * t3389 + t3386 * t3445;
t3156 = t3196 * t3389 + t3386 * t3447;
t3153 = -t3193 * t3387 + t3390 * t3449;
t3152 = t3193 * t3390 + t3387 * t3449;
t3147 = -t3163 * t3385 + t3183 * t3388;
t3144 = t3176 * t3389 + t3386 * t3452;
t3141 = -t3158 * t3385 + t3180 * t3388;
t3133 = -t3145 * t3385 + t3168 * t3388;
t3132 = -t3161 * t3387 + t3390 * t3453;
t3130 = t3161 * t3390 + t3387 * t3453;
t3128 = -t3156 * t3387 + t3390 * t3455;
t3126 = t3156 * t3390 + t3387 * t3455;
t3117 = -t3144 * t3387 + t3390 * t3459;
t3116 = t3144 * t3390 + t3387 * t3459;
t3113 = t3136 * t3389 + t3386 * t3460;
t3111 = t3123 * t3389 + t3386 * t3461;
t3110 = -t3114 * t3385 + t3118 * t3388;
t3109 = -t3112 * t3385 + t3115 * t3388;
t3108 = -t3113 * t3387 + t3390 * t3462;
t3107 = t3113 * t3390 + t3387 * t3462;
t3106 = -t3111 * t3387 + t3390 * t3463;
t3105 = t3111 * t3390 + t3387 * t3463;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, t3376, -t3375, 0, -t3378 * t3394 + t3379 * t3398, 0, 0, 0, 0, 0, 0, -t3331 * t3394 + t3342 * t3398, -t3332 * t3394 + t3343 * t3398, -t3327 * t3394 + t3341 * t3398, -t3289 * t3394 + t3303 * t3398, 0, 0, 0, 0, 0, 0, -t3220 * t3394 + t3241 * t3398, -t3222 * t3394 + t3251 * t3398, -t3214 * t3394 + t3229 * t3398, -t3165 * t3394 + t3181 * t3398, 0, 0, 0, 0, 0, 0, -t3167 * t3394 + t3184 * t3398, -t3170 * t3394 + t3185 * t3398, -t3153 * t3394 + t3178 * t3398, -t3117 * t3394 + t3133 * t3398, 0, 0, 0, 0, 0, 0, -t3128 * t3394 + t3141 * t3398, t3568, t3560, -t3108 * t3394 + t3110 * t3398, 0, 0, 0, 0, 0, 0, -t3132 * t3394 + t3147 * t3398, t3560, -t3568, -t3106 * t3394 + t3109 * t3398; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t3375, t3376, 0, t3378 * t3398 + t3379 * t3394, 0, 0, 0, 0, 0, 0, t3331 * t3398 + t3342 * t3394, t3332 * t3398 + t3343 * t3394, t3327 * t3398 + t3341 * t3394, t3289 * t3398 + t3303 * t3394, 0, 0, 0, 0, 0, 0, t3220 * t3398 + t3241 * t3394, t3222 * t3398 + t3251 * t3394, t3214 * t3398 + t3229 * t3394, t3165 * t3398 + t3181 * t3394, 0, 0, 0, 0, 0, 0, t3167 * t3398 + t3184 * t3394, t3170 * t3398 + t3185 * t3394, t3153 * t3398 + t3178 * t3394, t3117 * t3398 + t3133 * t3394, 0, 0, 0, 0, 0, 0, t3128 * t3398 + t3141 * t3394, -t3567, t3559, t3108 * t3398 + t3110 * t3394, 0, 0, 0, 0, 0, 0, t3132 * t3398 + t3147 * t3394, t3559, t3567, t3106 * t3398 + t3109 * t3394; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t3329, t3330, t3326, t3288, 0, 0, 0, 0, 0, 0, t3219, t3221, t3213, t3164, 0, 0, 0, 0, 0, 0, t3166, t3169, t3152, t3116, 0, 0, 0, 0, 0, 0, t3126, -t3125, t3556, t3107, 0, 0, 0, 0, 0, 0, t3130, t3556, t3125, t3105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3399, -qJDD(1), 0, t3379, 0, 0, 0, 0, 0, 0, t3342, t3343, t3341, t3303, 0, 0, 0, 0, 0, 0, t3241, t3251, t3229, t3181, 0, 0, 0, 0, 0, 0, t3184, t3185, t3178, t3133, 0, 0, 0, 0, 0, 0, t3141, t3146, t3550, t3110, 0, 0, 0, 0, 0, 0, t3147, t3550, -t3146, t3109; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, qJDD(1), -t3399, 0, t3378, 0, 0, 0, 0, 0, 0, t3331, t3332, t3327, t3289, 0, 0, 0, 0, 0, 0, t3220, t3222, t3214, t3165, 0, 0, 0, 0, 0, 0, t3167, t3170, t3153, t3117, 0, 0, 0, 0, 0, 0, t3128, -t3127, t3555, t3108, 0, 0, 0, 0, 0, 0, t3132, t3555, t3127, t3106; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t3329, t3330, t3326, t3288, 0, 0, 0, 0, 0, 0, t3219, t3221, t3213, t3164, 0, 0, 0, 0, 0, 0, t3166, t3169, t3152, t3116, 0, 0, 0, 0, 0, 0, t3126, -t3125, t3556, t3107, 0, 0, 0, 0, 0, 0, t3130, t3556, t3125, t3105; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3365, t3362, t3359, t3337, 0, 0, 0, 0, 0, 0, t3285, t3287, t3277, t3223, 0, 0, 0, 0, 0, 0, t3230, t3235, t3224, t3168, 0, 0, 0, 0, 0, 0, t3180, -t3179, t3539, t3118, 0, 0, 0, 0, 0, 0, t3183, t3539, t3179, t3115; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3361, t3364, t3358, t3336, 0, 0, 0, 0, 0, 0, t3266, t3270, t3255, t3212, 0, 0, 0, 0, 0, 0, t3216, t3218, t3194, t3145, 0, 0, 0, 0, 0, 0, t3158, -t3157, t3545, t3114, 0, 0, 0, 0, 0, 0, t3163, t3545, t3157, t3112; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3360, t3357, t3363, t3350, 0, 0, 0, 0, 0, 0, t3265, t3269, t3254, t3211, 0, 0, 0, 0, 0, 0, t3215, t3217, t3193, t3144, 0, 0, 0, 0, 0, 0, t3156, -t3155, t3546, t3113, 0, 0, 0, 0, 0, 0, t3161, t3546, t3155, t3111; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3319, t3320, t3307, t3253, 0, 0, 0, 0, 0, 0, t3260, t3264, t3240, t3177, 0, 0, 0, 0, 0, 0, t3198, -t3197, t3534, t3137, 0, 0, 0, 0, 0, 0, t3202, t3534, t3197, t3124; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3321, t3322, t3309, -t3464, 0, 0, 0, 0, 0, 0, -t3273, t3468, -t3286, -t3237, 0, 0, 0, 0, 0, 0, -t3524, t3225, -t3514, -t3142, 0, 0, 0, 0, 0, 0, -t3524, -t3514, -t3225, -t3138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3306, t3308, t3314, t3278, 0, 0, 0, 0, 0, 0, t3259, t3263, t3239, t3176, 0, 0, 0, 0, 0, 0, t3196, -t3195, t3533, t3136, 0, 0, 0, 0, 0, 0, t3200, t3533, t3195, t3123; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3297, t3284, t3274, t3206, 0, 0, 0, 0, 0, 0, t3523, -t3227, t3513, t3143, 0, 0, 0, 0, 0, 0, t3523, t3513, t3227, t3139; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3283, t3301, t3276, t3205, 0, 0, 0, 0, 0, 0, -t3242, -t3405, t3268, -t3191, 0, 0, 0, 0, 0, 0, -t3243, t3268, t3405, -t3171; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3273, -t3468, t3286, t3237, 0, 0, 0, 0, 0, 0, t3524, -t3225, t3514, t3142, 0, 0, 0, 0, 0, 0, t3524, t3514, t3225, t3138; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3516, -t3256, t3418, t3173, 0, 0, 0, 0, 0, 0, t3516, t3418, t3256, t3154; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3257, t3518, -t3246, t3172, 0, 0, 0, 0, 0, 0, t3257, -t3246, -t3518, -t3159; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3242, t3405, -t3268, t3191, 0, 0, 0, 0, 0, 0, t3243, -t3268, -t3405, t3171; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3516, t3418, t3256, t3154; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t3243, -t3268, -t3405, t3171; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t3257, t3246, t3518, t3159;];
f_new_reg  = t1;
