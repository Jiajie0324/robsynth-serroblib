% Calculate minimal parameter regressor of inverse dynamics joint torque vector for
% S6RPRRRP12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d5,theta2]';
% 
% Output:
% tau_reg [6x32]
%   minimal parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:53
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRRP12_invdynJ_fixb_regmin_slag_vp(qJ, qJD, qJDD, g, ...
  pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP12_invdynJ_fixb_regmin_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP12_invdynJ_fixb_regmin_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP12_invdynJ_fixb_regmin_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP12_invdynJ_fixb_regmin_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RPRRRP12_invdynJ_fixb_regmin_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_minpar_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 06:50:44
% EndTime: 2019-03-09 06:51:15
% DurationCPUTime: 15.66s
% Computational Cost: add. (23907->715), mult. (75891->958), div. (0->0), fcn. (66128->14), ass. (0->313)
t280 = sin(pkin(12));
t282 = cos(pkin(12));
t446 = cos(pkin(6));
t472 = cos(qJ(1));
t378 = t446 * t472;
t470 = sin(qJ(1));
t233 = t280 * t378 + t282 * t470;
t285 = sin(qJ(3));
t471 = cos(qJ(3));
t326 = t470 * t280 - t282 * t378;
t281 = sin(pkin(6));
t444 = sin(pkin(7));
t397 = t281 * t444;
t445 = cos(pkin(7));
t500 = t326 * t445 + t472 * t397;
t159 = -t233 * t471 + t285 * t500;
t284 = sin(qJ(4));
t287 = cos(qJ(4));
t398 = t281 * t445;
t480 = t326 * t444 - t472 * t398;
t122 = t159 * t287 - t284 * t480;
t156 = t233 * t285 + t500 * t471;
t283 = sin(qJ(5));
t286 = cos(qJ(5));
t74 = t122 * t283 + t156 * t286;
t75 = t122 * t286 - t156 * t283;
t437 = t280 * t281;
t405 = qJD(1) * t437;
t364 = t444 * t446;
t327 = t471 * t364;
t376 = t445 * t471;
t349 = t282 * t376;
t490 = -t281 * t349 - t327;
t426 = t490 * qJD(1);
t191 = t285 * t405 + t426;
t325 = qJD(4) + t191;
t396 = t285 * t445;
t312 = t281 * (-t280 * t396 + t282 * t471);
t375 = t444 * t471;
t343 = qJD(3) * t375;
t501 = qJD(1) * t312 - t343;
t121 = t159 * t284 + t287 * t480;
t224 = (-pkin(9) * t280 * t444 - pkin(2) * t282 - pkin(1)) * t281;
t212 = qJD(1) * t224 + qJD(2);
t395 = t285 * t444;
t268 = t282 * t281 * qJ(2);
t390 = qJD(1) * t446;
t385 = pkin(1) * t390;
t231 = qJD(1) * t268 + t280 * t385;
t304 = (t282 * t398 + t364) * pkin(9);
t180 = qJD(1) * t304 + t231;
t266 = t282 * t385;
t305 = t446 * pkin(2) + (-pkin(9) * t445 - qJ(2)) * t437;
t186 = qJD(1) * t305 + t266;
t495 = t471 * t180 + t186 * t396;
t106 = t212 * t395 + t495;
t498 = -t106 + t325 * (pkin(4) * t284 - pkin(11) * t287);
t380 = t282 * t396;
t322 = t280 * t471 + t380;
t342 = t285 * t364;
t205 = t281 * t322 + t342;
t194 = t205 * qJD(3);
t293 = qJD(1) * t194;
t412 = qJDD(1) * t281;
t401 = t280 * t412;
t427 = t490 * qJDD(1);
t328 = t285 * t401 + t427;
t324 = qJDD(4) + t328;
t486 = t293 + t324;
t421 = qJD(4) * t284;
t499 = pkin(10) * t421;
t494 = t285 * t180 - t186 * t376;
t237 = t284 * t395 - t287 * t445;
t374 = qJD(1) * t397;
t347 = t280 * t374;
t493 = qJD(4) * t237 + t284 * t347 + t501 * t287;
t238 = t284 * t445 + t287 * t395;
t429 = qJD(4) * t238 - t501 * t284 + t287 * t347;
t311 = t281 * (t280 * t376 + t282 * t285);
t220 = qJD(1) * t311;
t373 = qJD(3) * t395;
t492 = t220 - t373;
t195 = t205 * qJD(1);
t365 = t446 * t445;
t415 = -t282 * t374 + qJD(3);
t321 = -qJD(1) * t365 - t415;
t144 = t284 * t195 + t287 * t321;
t133 = -t191 * qJD(3) + qJDD(1) * t342 + t380 * t412 + t471 * t401;
t309 = t282 * t397 - t365;
t319 = qJDD(1) * t309 - qJDD(3);
t297 = t287 * t133 - t284 * t319;
t289 = -qJD(4) * t144 + t297;
t491 = qJD(5) * t325 + t289;
t483 = t191 * t284 + t421;
t143 = qJD(5) + t144;
t408 = pkin(1) * t446;
t236 = t280 * t408 + t268;
t199 = t304 + t236;
t272 = t282 * t408;
t206 = t272 + t305;
t409 = t471 * t199 + (t445 * t206 + t444 * t224) * t285;
t278 = t281 ^ 2;
t489 = t278 * (t280 ^ 2 + t282 ^ 2);
t300 = -t285 * t199 + t206 * t376 + t224 * t375;
t377 = t446 * t470;
t316 = t280 * t472 + t282 * t377;
t485 = t316 * t445 - t470 * t397;
t419 = qJD(4) * t287;
t484 = t191 * t287 + t419;
t353 = pkin(4) * t287 + pkin(11) * t284 + pkin(3);
t417 = qJD(5) * t286;
t105 = t212 * t375 - t494;
t135 = pkin(3) * t195 + pkin(10) * t191;
t432 = t287 * t105 + t284 * t135;
t58 = pkin(11) * t195 + t432;
t482 = -t498 * t283 + t286 * t58 + t353 * t417;
t146 = t287 * t195 - t284 * t321;
t388 = t284 * t133 + t287 * t319;
t71 = qJD(4) * t146 + t388;
t70 = qJDD(5) + t71;
t234 = -t280 * t377 + t282 * t472;
t160 = t234 * t285 + t471 * t485;
t436 = t280 * t285;
t410 = t281 * t436;
t204 = t410 + t490;
t329 = g(1) * t160 + g(2) * t156 + g(3) * t204;
t161 = t234 * t471 - t285 * t485;
t294 = -t316 * t444 - t398 * t470;
t123 = t161 * t284 + t287 * t294;
t154 = t205 * t284 + t287 * t309;
t331 = g(1) * t123 - g(2) * t121 + g(3) * t154;
t111 = t146 * t283 - t286 * t325;
t113 = t286 * t146 + t283 * t325;
t140 = -t186 * t444 + t445 * t212;
t82 = t191 * pkin(3) - t195 * pkin(10) + t140;
t86 = -pkin(10) * t321 + t106;
t43 = -t284 * t86 + t287 * t82;
t38 = -pkin(4) * t325 - t43;
t22 = t111 * pkin(5) - t113 * qJ(6) + t38;
t473 = pkin(11) * t70;
t481 = t143 * t22 - t473;
t104 = -pkin(10) * t309 + t409;
t193 = (t327 + (t349 - t436) * t281) * qJD(3);
t346 = t280 * qJD(2) * t397;
t126 = t194 * pkin(3) - t193 * pkin(10) + t346;
t91 = qJD(2) * t312 + qJD(3) * t300;
t147 = -t206 * t444 + t445 * t224;
t461 = t205 * pkin(10);
t97 = t204 * pkin(3) + t147 - t461;
t336 = -t104 * t421 + t284 * t126 + t287 * t91 + t97 * t419;
t25 = pkin(11) * t194 + t336;
t451 = t287 * t104 + t284 * t97;
t49 = pkin(11) * t204 + t451;
t103 = pkin(3) * t309 - t300;
t155 = t205 * t287 - t284 * t309;
t62 = t154 * pkin(4) - t155 * pkin(11) + t103;
t357 = t283 * t62 + t286 * t49;
t115 = qJD(4) * t155 + t193 * t284;
t116 = -qJD(4) * t154 + t193 * t287;
t92 = qJD(2) * t311 + qJD(3) * t409;
t41 = t115 * pkin(4) - t116 * pkin(11) + t92;
t479 = -qJD(5) * t357 - t25 * t283 + t286 * t41;
t382 = qJDD(1) * t408;
t414 = qJD(1) * qJD(2);
t402 = t281 * t414;
t216 = qJDD(1) * t268 + t280 * t382 + t282 * t402;
t167 = qJDD(1) * t304 + t216;
t264 = t282 * t382;
t169 = qJDD(1) * t305 - t280 * t402 + t264;
t208 = qJDD(1) * t224 + qJDD(2);
t341 = qJD(3) * t495 + t285 * t167 - t169 * t376 - t208 * t375 + t212 * t373;
t51 = pkin(3) * t319 + t341;
t478 = -t51 + t329;
t214 = t286 * t238 - t283 * t375;
t134 = t293 + t328;
t290 = qJDD(4) + t134;
t418 = qJD(5) * t283;
t35 = t146 * t418 - t283 * t290 - t286 * t491;
t323 = -t283 * t238 - t286 * t375;
t430 = -qJD(5) * t323 + t283 * t492 + t286 * t493;
t477 = t113 * t429 + t143 * t430 - t214 * t70 - t237 * t35;
t476 = t113 ^ 2;
t475 = t143 ^ 2;
t474 = pkin(5) * t70;
t469 = pkin(1) * t278;
t468 = pkin(10) * t287;
t95 = pkin(4) * t146 + pkin(11) * t144;
t460 = t283 * t95 + t286 * t43;
t44 = t284 * t82 + t287 * t86;
t458 = pkin(11) * qJD(5);
t457 = qJ(6) * t70;
t39 = pkin(11) * t325 + t44;
t85 = pkin(3) * t321 - t105;
t54 = t144 * pkin(4) - t146 * pkin(11) + t85;
t19 = t283 * t54 + t286 * t39;
t14 = qJ(6) * t143 + t19;
t456 = t14 * t143;
t455 = t143 * t19;
t454 = t283 * t35;
t453 = t283 * t70;
t452 = t286 * t70;
t416 = qJD(5) * t287;
t420 = qJD(4) * t286;
t450 = -qJD(6) * t287 + (-t283 * t416 - t284 * t420) * pkin(10) - t482 + t483 * qJ(6);
t449 = -t353 * t418 + (-t58 - t499) * t283 + (pkin(10) * t416 - t498) * t286 - t483 * pkin(5);
t435 = t283 * t287;
t128 = -t191 * t435 - t286 * t195;
t434 = t286 * t287;
t129 = -t191 * t434 + t195 * t283;
t361 = pkin(5) * t283 - qJ(6) * t286;
t344 = pkin(10) + t361;
t362 = pkin(5) * t286 + qJ(6) * t283;
t389 = -t284 * t105 + t135 * t287;
t57 = -pkin(4) * t195 - t389;
t448 = -pkin(5) * t128 + qJ(6) * t129 + (qJD(5) * t362 - qJD(6) * t286) * t284 + t344 * t419 - t57;
t447 = -qJD(6) * t283 + t143 * t361 - t44;
t443 = t111 * t143;
t442 = t113 * t111;
t441 = t113 * t143;
t438 = t353 * t286;
t18 = -t283 * t39 + t286 * t54;
t433 = qJD(6) - t18;
t431 = -qJD(5) * t214 + t283 * t493 - t286 * t492;
t425 = pkin(10) * t434 - t283 * t353;
t406 = t281 * t470;
t424 = t472 * pkin(1) + qJ(2) * t406;
t422 = qJD(4) * t283;
t413 = qJDD(1) * t280;
t411 = g(1) * t470;
t407 = t281 * t472;
t404 = t143 * t418;
t403 = qJD(4) + t426;
t320 = qJD(3) * t494 - t471 * t167 - t169 * t396 - t208 * t395 - t212 * t343;
t50 = -pkin(10) * t319 - t320;
t127 = -t169 * t444 + t445 * t208;
t63 = t134 * pkin(3) - t133 * pkin(10) + t127;
t339 = -t284 * t63 - t287 * t50 - t82 * t419 + t421 * t86;
t11 = pkin(11) * t486 - t339;
t17 = t71 * pkin(4) - pkin(11) * t289 + t51;
t400 = t283 * t11 - t286 * t17 + t39 * t417 + t54 * t418;
t399 = -t284 * t104 + t287 * t97;
t288 = qJD(1) ^ 2;
t394 = t288 * t446;
t391 = t284 * t50 - t287 * t63 + t86 * t419 + t82 * t421;
t387 = t143 * t286;
t124 = t161 * t287 - t284 * t294;
t76 = t124 * t283 - t160 * t286;
t384 = g(1) * t74 + g(2) * t76;
t77 = t124 * t286 + t160 * t283;
t383 = -g(1) * t75 - g(2) * t77;
t379 = -pkin(1) * t470 + qJ(2) * t407;
t371 = g(1) * t121 + g(2) * t123;
t370 = qJD(2) * t390;
t368 = g(2) * t407 - g(3) * t446;
t367 = t283 * t419 - t128;
t366 = t286 * t419 - t129;
t117 = t155 * t283 - t204 * t286;
t118 = t155 * t286 + t204 * t283;
t363 = -pkin(5) * t117 + qJ(6) * t118;
t13 = -pkin(5) * t143 + t433;
t360 = t13 * t286 - t14 * t283;
t356 = -t283 * t49 + t286 * t62;
t355 = (-qJ(2) * t405 + t266) * t280 - t231 * t282;
t354 = -t104 * t419 + t126 * t287 - t284 * t91 - t97 * t421;
t345 = pkin(4) + t362;
t48 = -pkin(4) * t204 - t399;
t340 = -t143 * t417 - t453;
t3 = t286 * t11 + t283 * t17 - t39 * t418 + t54 * t417;
t338 = t286 * t25 + t283 * t41 + t62 * t417 - t418 * t49;
t337 = t143 * t38 - t473;
t334 = g(1) * t472 + g(2) * t470;
t107 = -t156 * t435 + t159 * t286;
t109 = -t160 * t435 - t161 * t286;
t141 = -t204 * t435 - t205 * t286;
t333 = g(1) * t109 + g(2) * t107 + g(3) * t141;
t108 = -t156 * t434 - t159 * t283;
t110 = -t160 * t434 + t161 * t283;
t142 = -t204 * t434 + t205 * t283;
t332 = -g(1) * t110 - g(2) * t108 - g(3) * t142;
t330 = -g(1) * t124 + g(2) * t122 - g(3) * t155;
t26 = -pkin(4) * t194 - t354;
t318 = qJD(4) * t325;
t315 = g(1) * t76 - g(2) * t74 + g(3) * t117 - t400;
t310 = t143 * t458 - t331;
t36 = t146 * t417 + t283 * t491 - t286 * t290;
t307 = t111 * t429 + t143 * t431 + t237 * t36 + t323 * t70;
t5 = -pkin(4) * t290 + t36 * pkin(5) + t35 * qJ(6) - t113 * qJD(6) + t391;
t306 = -t310 - t5;
t302 = -g(1) * t77 + g(2) * t75 - g(3) * t118 + t3;
t298 = t113 * t22 + qJDD(6) - t315;
t292 = t191 * t325 + t318;
t267 = -pkin(1) * t412 + qJDD(2);
t235 = -qJ(2) * t437 + t272;
t229 = t344 * t284;
t219 = t438 + (pkin(10) * t283 + pkin(5)) * t287;
t218 = -qJ(6) * t287 + t425;
t215 = t264 + (-qJ(2) * qJDD(1) - t414) * t437;
t66 = pkin(5) * t113 + qJ(6) * t111;
t65 = -qJD(5) * t117 + t116 * t286 + t194 * t283;
t64 = qJD(5) * t118 + t116 * t283 - t194 * t286;
t31 = -t363 + t48;
t28 = -pkin(5) * t146 + t283 * t43 - t286 * t95;
t27 = qJ(6) * t146 + t460;
t23 = -t35 + t443;
t21 = -pkin(5) * t154 - t356;
t20 = qJ(6) * t154 + t357;
t12 = -pkin(4) * t486 + t391;
t8 = pkin(5) * t64 - qJ(6) * t65 - qJD(6) * t118 + t26;
t7 = -pkin(5) * t115 - t479;
t6 = qJ(6) * t115 + qJD(6) * t154 + t338;
t2 = qJDD(6) + t400 - t474;
t1 = qJD(6) * t143 + t3 + t457;
t4 = [qJDD(1), -g(2) * t472 + t411, t334, t215 * t446 + g(1) * t233 - g(2) * t234 + (-t267 * t282 - t280 * t370) * t281 + (t235 * t446 + t282 * t469) * qJDD(1), -t216 * t446 - g(1) * t326 + g(2) * t316 + (t267 * t280 - t282 * t370) * t281 + (-t236 * t446 - t280 * t469) * qJDD(1), t414 * t489 + (-t215 * t280 + t216 * t282 + (-t235 * t280 + t236 * t282) * qJDD(1) - t334) * t281, t216 * t236 + t215 * t235 - g(1) * t379 - g(2) * t424 + (-t267 * pkin(1) - qJD(2) * t355) * t281, t133 * t205 + t193 * t195, -t133 * t204 - t134 * t205 - t191 * t193 - t194 * t195, -t133 * t309 - t193 * t321 - t205 * t319, t134 * t309 + t194 * t321 + t204 * t319, t319 * t309, -g(1) * t159 - g(2) * t161 + t127 * t204 + t147 * t134 + t140 * t194 + t191 * t346 - t300 * t319 + t309 * t341 + t321 * t92, -g(1) * t156 + g(2) * t160 + t127 * t205 + t147 * t133 + t140 * t193 + t195 * t346 - t309 * t320 + t319 * t409 + t321 * t91, t146 * t116 + t155 * t289, -t146 * t115 - t116 * t144 - t154 * t289 - t155 * t71, t116 * t403 + t155 * (qJD(1) * qJD(3) * t342 + qJDD(4) + t427) + t289 * t204 + t146 * t194 + (t155 * t285 * t413 + (qJD(3) * t155 * t322 + t116 * t436) * qJD(1)) * t281, -t115 * t403 - t154 * t324 - t71 * t204 - t144 * t194 + (-t115 * t410 - t154 * t194) * qJD(1), t324 * t204 + (t403 + (t204 + t410) * qJD(1)) * t194, -g(1) * t122 - g(2) * t124 + t103 * t71 + t85 * t115 + t92 * t144 + t51 * t154 + t43 * t194 - t204 * t391 + t290 * t399 + t325 * t354, t103 * t289 + t85 * t116 + t92 * t146 + t51 * t155 - t44 * t194 + t204 * t339 - t325 * t336 - t451 * t486 + t371, t113 * t65 - t118 * t35, -t111 * t65 - t113 * t64 + t117 * t35 - t118 * t36, t113 * t115 + t118 * t70 + t143 * t65 - t154 * t35, -t111 * t115 - t117 * t70 - t143 * t64 - t154 * t36, t115 * t143 + t154 * t70, t26 * t111 + t18 * t115 + t12 * t117 + t143 * t479 - t154 * t400 + t356 * t70 + t48 * t36 + t38 * t64 + t383, t26 * t113 - t19 * t115 + t12 * t118 - t143 * t338 - t3 * t154 - t48 * t35 - t357 * t70 + t38 * t65 + t384, t111 * t8 - t115 * t13 + t117 * t5 - t143 * t7 - t154 * t2 - t21 * t70 + t22 * t64 + t31 * t36 + t383, -t1 * t117 - t111 * t6 + t113 * t7 + t118 * t2 + t13 * t65 - t14 * t64 - t20 * t36 - t21 * t35 - t371, t1 * t154 - t113 * t8 + t115 * t14 - t118 * t5 + t143 * t6 + t20 * t70 - t22 * t65 + t31 * t35 - t384, t1 * t20 + t14 * t6 + t5 * t31 + t22 * t8 + t2 * t21 + t13 * t7 - g(1) * (-t233 * pkin(2) + t159 * pkin(3) + t122 * pkin(4) + t75 * pkin(5) - pkin(10) * t156 + t121 * pkin(11) + t74 * qJ(6) + t379) - g(2) * (t234 * pkin(2) + t161 * pkin(3) + t124 * pkin(4) + t77 * pkin(5) + t160 * pkin(10) + t123 * pkin(11) + t76 * qJ(6) + t424) + (g(1) * t480 + g(2) * t294) * pkin(9); 0, 0, 0 (-qJDD(1) * t282 + t280 * t394) * t281 (t282 * t394 + t413) * t281, -t288 * t489, qJDD(2) + (-pkin(1) * qJDD(1) + qJD(1) * t355 - t411) * t281 + t368, 0, 0, 0, 0, 0, t134 * t445 - t191 * t347 - t319 * t375 - t321 * t492, t133 * t445 - t195 * t347 + t319 * t395 - t501 * t321, 0, 0, 0, 0, 0, -t237 * t324 - t71 * t375 - t220 * t144 + (t144 * t395 - t195 * t237) * qJD(3) - t429 * t325, -t146 * t492 - t238 * t486 - t289 * t375 + t325 * t493, 0, 0, 0, 0, 0, t307, t477, t307, t111 * t430 - t113 * t431 - t214 * t36 + t323 * t35, -t477, -g(1) * t406 + t1 * t214 - t13 * t431 - t14 * t430 - t2 * t323 + t22 * t429 + t5 * t237 + t368; 0, 0, 0, 0, 0, 0, 0, t195 * t191, -t191 ^ 2 + t195 ^ 2, -t191 * t321 + t133, t195 * t415 + (t195 * t365 - t194) * qJD(1) - t328, -t319, -t106 * t321 - t140 * t195 + t329 - t341, g(1) * t161 - g(2) * t159 + g(3) * t205 - t105 * t321 + t140 * t191 + t320 (-qJD(4) * t195 - t319) * t284 ^ 2 + ((-qJD(4) * t321 + t133) * t284 + t325 * t146) * t287, -t144 * t484 - t146 * t483 - t284 * t71 + t287 * t289, -t146 * t195 + t284 * t486 + t287 * t292, t144 * t195 - t284 * t292 + t287 * t486, -t325 * t195, -pkin(10) * t284 * t290 - pkin(3) * t71 - t106 * t144 - t43 * t195 + t287 * t478 - t318 * t468 - t325 * t389 + t483 * t85, -pkin(3) * t289 - t106 * t146 + t44 * t195 - t486 * t468 + t484 * t85 + (t432 + t499) * t325 - t478 * t284, -t284 * t286 * t35 + (-t284 * t418 + t366) * t113, t111 * t129 + t113 * t128 + (-t111 * t286 - t113 * t283) * t419 + (t454 - t286 * t36 + (t111 * t283 - t113 * t286) * qJD(5)) * t284, t287 * t35 + t366 * t143 + (t113 * t325 - t404 + t452) * t284, t287 * t36 - t367 * t143 + (-t111 * t325 + t340) * t284, t143 * t284 * t325 - t287 * t70, -t70 * t438 - t57 * t111 - t38 * t128 + (t498 * t286 + (qJD(5) * t353 + t58) * t283) * t143 + (t38 * t422 + t400 + (qJD(4) * t111 + t340) * pkin(10)) * t287 + (t38 * t417 + t12 * t283 + t325 * t18 + (t143 * t422 + t36) * pkin(10)) * t284 + t332, -t425 * t70 - t57 * t113 - t38 * t129 + t482 * t143 + (t38 * t420 + t3 + (qJD(4) * t113 + t404) * pkin(10)) * t287 + (-t38 * t418 + t12 * t286 - t325 * t19 + (t143 * t420 - t35) * pkin(10)) * t284 + t333, t2 * t287 - t219 * t70 + t229 * t36 + t367 * t22 - t449 * t143 + t448 * t111 + (-t13 * t325 + t22 * t417 + t283 * t5) * t284 + t332, t128 * t14 - t129 * t13 - t218 * t36 - t219 * t35 + t449 * t113 - t450 * t111 + t360 * t419 + (-t1 * t283 + t2 * t286 + (-t13 * t283 - t14 * t286) * qJD(5) + t329) * t284, -t1 * t287 + t218 * t70 + t229 * t35 - t366 * t22 + t450 * t143 - t448 * t113 + (t14 * t325 + t22 * t418 - t286 * t5) * t284 - t333, t1 * t218 + t5 * t229 + t2 * t219 - g(1) * (pkin(5) * t110 + pkin(10) * t161 + qJ(6) * t109) - g(2) * (pkin(5) * t108 - pkin(10) * t159 + qJ(6) * t107) - g(3) * (pkin(5) * t142 + qJ(6) * t141 + t461) + t448 * t22 + t450 * t14 + t449 * t13 + t329 * t353; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t146 * t144, -t144 ^ 2 + t146 ^ 2, t191 * t144 + t297, t146 * t191 - t388, t290, -t85 * t146 + t325 * t44 + t331 - t391, t85 * t144 + t325 * t43 - t330 + t339, t113 * t387 - t454 (-t35 - t443) * t286 + (-t36 - t441) * t283, -t113 * t146 + t143 * t387 + t453, t111 * t146 - t283 * t475 + t452, -t143 * t146, -pkin(4) * t36 - t44 * t111 - t18 * t146 + (t43 * t143 + t337) * t283 + (-t12 + (-t95 - t458) * t143 + t331) * t286, pkin(4) * t35 + t460 * t143 + t19 * t146 - t44 * t113 + t337 * t286 + (t12 + t310) * t283, t447 * t111 + t13 * t146 + t143 * t28 + t283 * t481 + t306 * t286 - t345 * t36, t111 * t27 - t113 * t28 + (t1 + t143 * t13 + (qJD(5) * t113 - t36) * pkin(11)) * t286 + (t2 - t456 + (qJD(5) * t111 - t35) * pkin(11)) * t283 + t330, -t447 * t113 - t14 * t146 - t143 * t27 + t306 * t283 - t286 * t481 - t345 * t35, -t13 * t28 - t14 * t27 + t447 * t22 + (qJD(5) * t360 + t1 * t286 + t2 * t283 + t330) * pkin(11) + (-t5 + t331) * t345; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t442, -t111 ^ 2 + t476, t23, -t36 + t441, t70, -t113 * t38 + t315 + t455, t111 * t38 + t143 * t18 - t302, -t111 * t66 - t298 + t455 + 0.2e1 * t474, pkin(5) * t35 - qJ(6) * t36 + (t14 - t19) * t113 + (t13 - t433) * t111, 0.2e1 * t457 - t111 * t22 + t113 * t66 + (0.2e1 * qJD(6) - t18) * t143 + t302, t1 * qJ(6) - t2 * pkin(5) - t22 * t66 - t13 * t19 - g(1) * (-pkin(5) * t76 + qJ(6) * t77) - g(2) * (pkin(5) * t74 - qJ(6) * t75) - g(3) * t363 + t433 * t14; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t442 - t70, t23, -t475 - t476, t298 - t456 - t474;];
tau_reg  = t4;
