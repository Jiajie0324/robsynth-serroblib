% Calculate inertial parameters regressor of inverse dynamics base forces vector with Newton-Euler for
% S6RPRRRP12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d5,theta2]';
% 
% Output:
% tauB_reg [6x(7*10)]
%   inertial parameter regressor of inverse dynamics base forces vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-05-06 02:30
% Revision: 89c353f7eff3bd693eda4e29f35b2761dbc3ada0 (2019-05-03)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tauB_reg = S6RPRRRP12_invdynB_fixb_reg2_snew_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP12_invdynB_fixb_reg2_snew_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP12_invdynB_fixb_reg2_snew_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP12_invdynB_fixb_reg2_snew_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP12_invdynB_fixb_reg2_snew_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RPRRRP12_invdynB_fixb_reg2_snew_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_fixb_NewtonEuler_tauB_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-05-06 02:23:43
% EndTime: 2019-05-06 02:26:20
% DurationCPUTime: 164.80s
% Computational Cost: add. (810039->1137), mult. (2523385->1826), div. (0->0), fcn. (2166622->14), ass. (0->856)
t1440 = sin(qJ(1));
t1444 = cos(qJ(1));
t1433 = sin(pkin(6));
t1436 = cos(pkin(6));
t1431 = sin(pkin(12));
t1434 = cos(pkin(12));
t1443 = cos(qJ(3));
t1435 = cos(pkin(7));
t1439 = sin(qJ(3));
t1650 = t1435 * t1439;
t1432 = sin(pkin(7));
t1655 = t1432 * t1439;
t1461 = t1436 * t1655 + (t1431 * t1443 + t1434 * t1650) * t1433;
t1381 = t1461 * qJD(1);
t1653 = t1433 * t1434;
t1725 = -t1432 * t1653 + t1435 * t1436;
t1394 = qJD(1) * t1725 + qJD(3);
t1438 = sin(qJ(4));
t1442 = cos(qJ(4));
t1361 = t1381 * t1438 - t1442 * t1394;
t1356 = qJD(5) + t1361;
t1712 = t1356 ^ 2;
t1363 = t1381 * t1442 + t1394 * t1438;
t1437 = sin(qJ(5));
t1441 = cos(qJ(5));
t1657 = t1431 * t1439;
t1652 = t1433 * t1435;
t1626 = t1434 * t1652;
t1654 = t1432 * t1443;
t1746 = -t1436 * t1654 - t1443 * t1626;
t1379 = (t1433 * t1657 + t1746) * qJD(1);
t1480 = qJD(4) + t1379;
t1327 = t1363 * t1437 - t1441 * t1480;
t1713 = t1327 ^ 2;
t1282 = t1713 - t1712;
t1329 = t1441 * t1363 + t1437 * t1480;
t1266 = t1329 * t1327;
t1457 = t1461 * qJDD(1);
t1345 = -qJD(3) * t1379 + t1457;
t1640 = qJDD(1) * t1434;
t1619 = t1433 * t1640;
t1639 = qJDD(1) * t1436;
t1393 = -t1432 * t1619 + t1435 * t1639 + qJDD(3);
t1615 = t1438 * t1345 - t1442 * t1393;
t1291 = -t1363 * qJD(4) - t1615;
t1290 = qJDD(5) - t1291;
t1728 = t1266 + t1290;
t1686 = t1728 * t1437;
t1149 = t1282 * t1441 - t1686;
t1641 = qJDD(1) * t1433;
t1621 = t1431 * t1641;
t1510 = qJDD(1) * t1746 + t1439 * t1621;
t1473 = -qJD(3) * t1381 - t1510;
t1465 = qJDD(4) - t1473;
t1624 = t1361 * qJD(4) - t1442 * t1345 - t1438 * t1393;
t1616 = -t1437 * t1624 - t1441 * t1465;
t1169 = (qJD(5) - t1356) * t1329 + t1616;
t1070 = t1149 * t1442 - t1169 * t1438;
t1685 = t1728 * t1441;
t1144 = t1282 * t1437 + t1685;
t1009 = t1070 * t1443 + t1144 * t1439;
t1066 = t1149 * t1438 + t1169 * t1442;
t1562 = t1070 * t1439 - t1144 * t1443;
t959 = -t1066 * t1432 + t1435 * t1562;
t1584 = t1009 * t1431 + t1434 * t959;
t955 = t1066 * t1435 + t1432 * t1562;
t857 = -t1433 * t955 + t1436 * t1584;
t900 = -t1009 * t1434 + t1431 * t959;
t1902 = t1440 * t857 + t1444 * t900;
t1645 = qJD(5) + t1356;
t1168 = t1329 * t1645 + t1616;
t1455 = -t1437 * t1465 + t1441 * t1624;
t1453 = -t1327 * qJD(5) - t1455;
t1675 = t1327 * t1356;
t1723 = -t1675 + t1453;
t1689 = t1723 * t1437;
t1083 = -t1168 * t1441 - t1689;
t1325 = t1329 ^ 2;
t1257 = t1325 - t1713;
t1042 = t1083 * t1438 - t1257 * t1442;
t1044 = t1083 * t1442 + t1257 * t1438;
t1077 = -t1168 * t1437 + t1441 * t1723;
t1571 = t1044 * t1439 - t1077 * t1443;
t925 = -t1042 * t1432 + t1435 * t1571;
t975 = t1044 * t1443 + t1077 * t1439;
t1596 = t1431 * t975 + t1434 * t925;
t923 = t1042 * t1435 + t1432 * t1571;
t835 = -t1433 * t923 + t1436 * t1596;
t870 = t1431 * t925 - t1434 * t975;
t1901 = t1440 * t835 + t1444 * t870;
t1900 = -t1440 * t900 + t1444 * t857;
t1899 = -t1440 * t870 + t1444 * t835;
t1894 = t1433 * t1584 + t1436 * t955;
t1893 = t1433 * t1596 + t1436 * t923;
t1724 = -t1675 - t1453;
t1769 = -t1169 * t1437 + t1724 * t1441;
t1726 = t1325 + t1713;
t1768 = -t1169 * t1441 - t1724 * t1437;
t1790 = -t1438 * t1726 + t1442 * t1768;
t1810 = t1439 * t1769 + t1443 * t1790;
t1793 = t1438 * t1768 + t1442 * t1726;
t1812 = t1439 * t1790 - t1443 * t1769;
t1844 = -t1432 * t1793 + t1435 * t1812;
t1855 = -t1431 * t1844 + t1434 * t1810;
t1846 = t1432 * t1812 + t1435 * t1793;
t1853 = t1431 * t1810 + t1434 * t1844;
t1868 = -t1433 * t1846 + t1436 * t1853;
t1877 = t1440 * t1855 + t1444 * t1868;
t1888 = pkin(8) * t1877;
t1879 = -t1440 * t1868 + t1444 * t1855;
t1887 = pkin(8) * t1879;
t1886 = pkin(1) * t1868;
t1870 = t1433 * t1853 + t1436 * t1846;
t1885 = pkin(1) * t1870;
t1283 = -t1325 + t1712;
t1729 = -t1266 + t1290;
t1684 = t1729 * t1437;
t1771 = -t1283 * t1441 - t1684;
t1683 = t1729 * t1441;
t1770 = -t1283 * t1437 + t1683;
t1789 = -t1438 * t1724 + t1442 * t1770;
t1811 = -t1439 * t1771 + t1443 * t1789;
t1792 = t1438 * t1770 + t1442 * t1724;
t1813 = t1439 * t1789 + t1443 * t1771;
t1843 = -t1432 * t1792 + t1435 * t1813;
t1856 = -t1431 * t1843 + t1434 * t1811;
t1845 = t1432 * t1813 + t1435 * t1792;
t1854 = t1431 * t1811 + t1434 * t1843;
t1867 = -t1433 * t1845 + t1436 * t1854;
t1880 = -t1440 * t1867 + t1444 * t1856;
t1878 = t1440 * t1856 + t1444 * t1867;
t1876 = (-t1433 * t1870 - t1436 * t1868) * qJ(2);
t1875 = qJ(2) * t1855;
t1869 = t1433 * t1854 + t1436 * t1845;
t1866 = pkin(2) * t1844;
t1865 = pkin(2) * t1846;
t1852 = (-t1432 * t1846 - t1435 * t1844) * pkin(9);
t1851 = pkin(9) * t1810;
t1670 = t1356 * t1441;
t1278 = t1329 * t1670;
t1671 = t1356 * t1437;
t1634 = t1327 * t1671;
t1605 = t1278 + t1634;
t1277 = t1329 * t1671;
t1633 = t1327 * t1670;
t1606 = t1277 - t1633;
t1717 = t1290 * t1438 + t1442 * t1606;
t1741 = -t1439 * t1605 + t1443 * t1717;
t1720 = -t1442 * t1290 + t1438 * t1606;
t1744 = t1439 * t1717 + t1443 * t1605;
t1763 = -t1432 * t1720 + t1435 * t1744;
t1797 = -t1431 * t1763 + t1434 * t1741;
t1766 = t1432 * t1744 + t1435 * t1720;
t1795 = t1431 * t1741 + t1434 * t1763;
t1814 = -t1433 * t1766 + t1436 * t1795;
t1842 = -t1440 * t1814 + t1444 * t1797;
t1207 = -qJD(5) * t1329 - t1616;
t1519 = -t1207 * t1441 - t1634;
t1520 = -t1207 * t1437 + t1633;
t1636 = t1438 * t1266;
t1718 = t1442 * t1520 - t1636;
t1740 = -t1439 * t1519 + t1443 * t1718;
t1635 = t1442 * t1266;
t1719 = t1438 * t1520 + t1635;
t1743 = t1439 * t1718 + t1443 * t1519;
t1764 = -t1432 * t1719 + t1435 * t1743;
t1796 = -t1431 * t1764 + t1434 * t1740;
t1767 = t1432 * t1743 + t1435 * t1719;
t1794 = t1431 * t1740 + t1434 * t1764;
t1815 = -t1433 * t1767 + t1436 * t1794;
t1841 = -t1440 * t1815 + t1444 * t1796;
t1840 = t1440 * t1797 + t1444 * t1814;
t1839 = t1440 * t1796 + t1444 * t1815;
t1238 = t1712 + t1325;
t1126 = t1238 * t1441 + t1686;
t1838 = pkin(3) * t1126;
t1837 = pkin(4) * t1126;
t1836 = pkin(10) * t1790;
t1835 = pkin(10) * t1793;
t1834 = pkin(11) * t1126;
t1134 = t1238 * t1437 - t1685;
t1833 = pkin(11) * t1134;
t1832 = t1126 * t1439;
t1831 = t1126 * t1443;
t1830 = t1134 * t1438;
t1829 = t1134 * t1442;
t1818 = -pkin(3) * t1793 - pkin(4) * t1726 - pkin(11) * t1768;
t1817 = t1433 * t1794 + t1436 * t1767;
t1816 = t1433 * t1795 + t1436 * t1766;
t1809 = pkin(11) * t1769;
t1165 = -t1437 * t1453 - t1278;
t1166 = t1441 * t1453 - t1277;
t1607 = t1442 * t1166 + t1636;
t1608 = t1438 * t1166 - t1635;
t1649 = t1435 * t1443;
t1714 = t1165 * t1649 - t1432 * t1608 + t1607 * t1650;
t1716 = -t1165 * t1439 + t1443 * t1607;
t1738 = -t1431 * t1714 + t1434 * t1716;
t1715 = t1165 * t1654 + t1435 * t1608 + t1607 * t1655;
t1739 = t1431 * t1716 + t1434 * t1714;
t1762 = -t1433 * t1715 + t1436 * t1739;
t1791 = -t1440 * t1762 + t1444 * t1738;
t1788 = t1440 * t1738 + t1444 * t1762;
t1722 = -t1712 - t1713;
t1745 = t1437 * t1722 + t1683;
t1787 = pkin(3) * t1745;
t1786 = pkin(4) * t1745;
t1742 = t1441 * t1722 - t1684;
t1785 = pkin(11) * t1742;
t1784 = pkin(11) * t1745;
t1777 = t1438 * t1742;
t1776 = t1439 * t1745;
t1774 = t1442 * t1742;
t1773 = t1443 * t1745;
t1765 = t1433 * t1739 + t1436 * t1715;
t1710 = -2 * qJD(2);
t1761 = 2 * qJD(6);
t1759 = qJ(6) * t1723;
t1315 = t1363 * t1361;
t1727 = -t1315 + t1465;
t1750 = t1438 * t1727;
t1747 = t1442 * t1727;
t1332 = t1480 * t1361;
t1250 = t1624 + t1332;
t1658 = t1431 * t1433;
t1630 = t1432 * t1658;
t1476 = t1433 * (-pkin(2) * t1653 - pkin(9) * t1630);
t1656 = t1432 * t1436;
t1516 = t1626 + t1656;
t1485 = pkin(9) * t1516;
t1450 = -t1431 * t1476 + t1436 * t1485;
t1420 = t1440 * g(1) - t1444 * g(2);
t1445 = qJD(1) ^ 2;
t1701 = qJ(2) * t1433;
t1511 = -t1445 * t1701 - t1420;
t1475 = qJDD(1) * pkin(1) - t1511;
t1617 = t1436 * g(3) - qJDD(2);
t1382 = t1433 * t1475 + t1617;
t1451 = -pkin(2) * t1619 - t1382;
t1466 = t1436 * t1475;
t1638 = pkin(2) * t1639;
t1452 = -g(3) * t1653 + t1434 * t1466 + t1638;
t1421 = t1444 * g(1) + t1440 * g(2);
t1513 = t1445 * pkin(1) + t1421;
t1471 = qJ(2) * t1641 - t1513;
t1708 = pkin(2) * t1436;
t1515 = -pkin(9) * t1431 * t1652 + t1708;
t1253 = qJD(1) * (qJD(1) * (t1432 * t1450 - t1435 * (-t1485 * t1653 + t1515 * t1658)) + t1630 * t1710) + t1432 * (-t1431 * t1471 + t1452) - t1435 * t1451;
t1478 = t1480 ^ 2;
t1669 = t1379 * t1381;
t1472 = t1393 - t1669;
t1737 = t1439 * t1472;
t1734 = t1443 * t1472;
t1731 = (-t1433 * g(3) + t1466) * t1434;
t1428 = t1433 ^ 2;
t1430 = t1436 ^ 2;
t1629 = t1431 * t1434 * t1445;
t1730 = (t1428 + t1430) * t1433 * t1629;
t1366 = t1394 * t1379;
t1310 = -t1366 + t1345;
t1426 = t1431 ^ 2;
t1429 = t1434 ^ 2;
t1643 = t1426 + t1429;
t1256 = pkin(5) * t1327 - qJ(6) * t1329;
t1459 = -g(3) * t1658 + t1431 * t1466;
t1709 = 2 * qJD(2);
t1300 = t1434 * t1471 + qJDD(1) * t1485 + (t1653 * t1709 + (t1434 * t1476 - t1436 * t1515) * qJD(1)) * qJD(1) + t1459;
t1702 = pkin(9) * t1435;
t1622 = -qJ(2) - t1702;
t1192 = t1443 * t1300 + (t1445 * t1485 * t1725 + t1432 * t1451 + t1435 * t1452) * t1439 + (t1435 * t1513 + ((-pkin(9) * t1432 ^ 2 + t1435 * t1622) * qJDD(1) + (pkin(2) * qJD(1) * t1516 + t1435 * t1710) * qJD(1)) * t1433) * t1657;
t1341 = pkin(3) * t1379 - pkin(10) * t1381;
t1711 = t1394 ^ 2;
t1152 = -pkin(3) * t1711 + t1393 * pkin(10) - t1379 * t1341 + t1192;
t1647 = qJD(3) + t1394;
t1306 = t1381 * t1647 + t1510;
t1447 = t1306 * pkin(3) - pkin(10) * t1310 - t1253;
t1076 = t1442 * t1152 + t1438 * t1447;
t1304 = pkin(4) * t1361 - pkin(11) * t1363;
t1031 = -pkin(4) * t1478 + pkin(11) * t1465 - t1361 * t1304 + t1076;
t1703 = pkin(9) * t1432;
t1191 = t1439 * t1300 - (t1638 + t1731 + (t1622 * t1641 + t1513) * t1431 + (qJD(1) * t1450 + t1658 * t1710) * qJD(1)) * t1649 - (-t1617 + ((-pkin(2) * t1434 - t1431 * t1703 - pkin(1)) * qJDD(1) + t1511 + (t1431 * t1708 + (-t1434 * t1656 - t1643 * t1652) * pkin(9)) * t1445) * t1433) * t1654;
t1151 = -t1393 * pkin(3) - t1711 * pkin(10) + t1381 * t1341 + t1191;
t1474 = t1480 * t1363;
t1073 = t1250 * pkin(11) + (-t1291 + t1474) * pkin(4) + t1151;
t969 = t1441 * t1031 + t1437 * t1073;
t1578 = t1290 * qJ(6) - t1327 * t1256 + t1356 * t1761 + t969;
t1359 = t1361 ^ 2;
t1360 = t1363 ^ 2;
t1377 = t1379 ^ 2;
t1378 = t1381 ^ 2;
t1707 = pkin(3) * t1439;
t1706 = pkin(3) * t1443;
t1705 = pkin(4) * t1438;
t1704 = pkin(5) * t1441;
t1700 = qJ(6) * t1441;
t1075 = t1152 * t1438 - t1442 * t1447;
t1030 = -t1465 * pkin(4) - t1478 * pkin(11) + t1304 * t1363 + t1075;
t1698 = t1030 * t1437;
t1697 = t1030 * t1441;
t1696 = t1151 * t1438;
t1695 = t1151 * t1442;
t1682 = t1253 * t1439;
t1681 = t1253 * t1443;
t1270 = t1315 + t1465;
t1680 = t1270 * t1438;
t1679 = t1270 * t1442;
t1334 = -t1393 - t1669;
t1674 = t1334 * t1439;
t1673 = t1334 * t1443;
t1672 = t1356 * t1329;
t1668 = t1381 * t1439;
t1667 = t1382 * t1431;
t1666 = t1382 * t1434;
t1412 = t1428 * t1629;
t1399 = t1412 + t1639;
t1665 = t1399 * t1431;
t1664 = t1399 * t1434;
t1400 = -t1412 + t1639;
t1663 = t1400 * t1431;
t1662 = t1400 * t1434;
t1661 = t1426 * t1428;
t1660 = t1428 * t1429;
t1659 = t1428 * t1445;
t1648 = t1436 * t1445;
t968 = t1437 * t1031 - t1441 * t1073;
t1644 = t1726 - t1712;
t1642 = qJDD(1) * t1428;
t1637 = -pkin(4) * t1442 - pkin(3);
t1632 = t1439 * t1315;
t1631 = t1443 * t1315;
t1625 = t1433 * t1648;
t1623 = qJ(6) * t1437 + pkin(4);
t1620 = t1431 * t1640;
t1618 = t1433 * t1639;
t979 = t1075 * t1438 + t1442 * t1076;
t1384 = -t1420 * t1440 - t1444 * t1421;
t1610 = t1329 * t1256 + qJDD(6) + t968;
t1418 = qJDD(1) * t1444 - t1440 * t1445;
t1609 = -pkin(8) * t1418 - g(3) * t1440;
t1333 = -t1711 - t1377;
t1272 = t1333 * t1443 - t1737;
t1604 = pkin(9) * t1272 + t1681;
t1337 = -t1378 - t1711;
t1274 = -t1337 * t1439 + t1673;
t1603 = pkin(9) * t1274 - t1682;
t937 = -pkin(5) * t1712 + t1578;
t1514 = -pkin(5) * t1290 + t1610;
t944 = qJ(6) * t1712 - t1514;
t868 = -t1437 * t944 + t1441 * t937;
t1462 = -t1207 * pkin(5) + t1030 - t1759;
t967 = (pkin(5) * t1356 - (2 * qJD(6))) * t1329 + t1462;
t839 = t1438 * t967 + t1442 * t868;
t867 = t1437 * t937 + t1441 * t944;
t1593 = t1439 * t839 - t1443 * t867;
t838 = t1438 * t868 - t1442 * t967;
t779 = -t1432 * t838 + t1435 * t1593;
t803 = t1439 * t867 + t1443 * t839;
t1602 = t1431 * t803 + t1434 * t779;
t889 = t1437 * t968 + t1441 * t969;
t864 = t1030 * t1438 + t1442 * t889;
t888 = t1437 * t969 - t1441 * t968;
t1592 = t1439 * t864 - t1443 * t888;
t863 = -t1030 * t1442 + t1438 * t889;
t794 = -t1432 * t863 + t1435 * t1592;
t822 = t1439 * t888 + t1443 * t864;
t1601 = t1431 * t822 + t1434 * t794;
t1579 = -t1151 * t1443 + t1439 * t979;
t978 = -t1075 * t1442 + t1076 * t1438;
t891 = -t1432 * t978 + t1435 * t1579;
t962 = t1151 * t1439 + t1443 * t979;
t1600 = t1431 * t962 + t1434 * t891;
t1047 = t1442 * t1723 - t1830;
t1049 = -t1438 * t1723 - t1829;
t1569 = t1049 * t1439 - t1831;
t940 = -t1047 * t1432 + t1435 * t1569;
t994 = t1049 * t1443 + t1832;
t1595 = t1431 * t994 + t1434 * t940;
t1048 = -t1168 * t1442 + t1777;
t1050 = t1168 * t1438 + t1774;
t1568 = t1050 * t1439 - t1773;
t941 = -t1048 * t1432 + t1435 * t1568;
t995 = t1050 * t1443 + t1776;
t1594 = t1431 * t995 + t1434 * t941;
t1407 = (-t1430 - t1660) * t1445;
t1371 = t1407 * t1434 - t1665;
t1591 = qJ(2) * t1371 + t1666;
t1405 = (-t1430 - t1661) * t1445;
t1373 = -t1405 * t1431 - t1662;
t1590 = qJ(2) * t1373 - t1667;
t1176 = t1327 * t1645 + t1455;
t1057 = -t1176 * t1438 + t1829;
t1001 = t1057 * t1443 - t1832;
t1055 = t1176 * t1442 + t1830;
t1567 = t1057 * t1439 + t1831;
t947 = -t1055 * t1432 + t1435 * t1567;
t1589 = t1001 * t1431 + t1434 * t947;
t1170 = -t1207 + t1672;
t1058 = t1170 * t1438 + t1774;
t1002 = t1058 * t1443 + t1776;
t1056 = -t1170 * t1442 + t1777;
t1566 = t1058 * t1439 - t1773;
t948 = -t1056 * t1432 + t1435 * t1566;
t1588 = t1002 * t1431 + t1434 * t948;
t1245 = -t1363 * t1379 + t1615;
t1249 = -t1332 + t1624;
t1156 = -t1245 * t1438 + t1249 * t1442;
t1158 = -t1245 * t1442 - t1249 * t1438;
t1273 = t1359 + t1360;
t1551 = t1158 * t1439 + t1273 * t1443;
t1040 = -t1156 * t1432 + t1435 * t1551;
t1120 = t1158 * t1443 - t1273 * t1439;
t1573 = t1040 * t1434 + t1120 * t1431;
t1246 = (-0.2e1 * qJD(4) - t1379) * t1363 - t1615;
t1155 = t1246 * t1438 - t1250 * t1442;
t1157 = t1246 * t1442 + t1250 * t1438;
t1312 = -t1360 + t1359;
t1552 = t1157 * t1439 + t1312 * t1443;
t1046 = -t1155 * t1432 + t1435 * t1552;
t1125 = t1157 * t1443 - t1312 * t1439;
t1570 = t1046 * t1434 + t1125 * t1431;
t1547 = -t1191 * t1443 + t1192 * t1439;
t1086 = t1253 * t1432 + t1435 * t1547;
t1109 = t1191 * t1439 + t1192 * t1443;
t1561 = t1086 * t1434 + t1109 * t1431;
t1293 = -t1478 - t1359;
t1200 = t1293 * t1438 + t1747;
t1201 = t1293 * t1442 - t1750;
t1545 = t1201 * t1439 + t1246 * t1443;
t1090 = -t1200 * t1432 + t1435 * t1545;
t1131 = t1201 * t1443 - t1246 * t1439;
t1560 = t1090 * t1434 + t1131 * t1431;
t1299 = -t1360 - t1478;
t1214 = t1299 * t1442 - t1680;
t1215 = -t1299 * t1438 - t1679;
t1543 = t1215 * t1439 + t1250 * t1443;
t1093 = -t1214 * t1432 + t1435 * t1543;
t1137 = t1215 * t1443 - t1250 * t1439;
t1559 = t1093 * t1434 + t1137 * t1431;
t1331 = -t1360 + t1478;
t1227 = t1331 * t1442 + t1750;
t1229 = -t1331 * t1438 + t1747;
t1540 = t1229 * t1439 + t1249 * t1443;
t1098 = -t1227 * t1432 + t1435 * t1540;
t1140 = t1229 * t1443 - t1249 * t1439;
t1558 = t1098 * t1434 + t1140 * t1431;
t1330 = t1359 - t1478;
t1228 = t1330 * t1438 + t1679;
t1230 = t1330 * t1442 - t1680;
t1539 = t1230 * t1439 + t1245 * t1443;
t1099 = -t1228 * t1432 + t1435 * t1539;
t1141 = t1230 * t1443 - t1245 * t1439;
t1557 = t1099 * t1434 + t1141 * t1431;
t1470 = t1438 * t1332;
t1240 = t1442 * t1291 + t1470;
t1468 = t1442 * t1332;
t1241 = -t1438 * t1291 + t1468;
t1518 = t1241 * t1439 + t1631;
t1123 = -t1240 * t1432 + t1435 * t1518;
t1189 = t1241 * t1443 - t1632;
t1554 = t1123 * t1434 + t1189 * t1431;
t1467 = t1442 * t1474;
t1242 = -t1438 * t1624 + t1467;
t1469 = t1438 * t1474;
t1243 = -t1442 * t1624 - t1469;
t1517 = t1243 * t1439 - t1631;
t1124 = -t1242 * t1432 + t1435 * t1517;
t1190 = t1243 * t1443 + t1632;
t1553 = t1124 * t1434 + t1190 * t1431;
t1267 = -t1470 - t1467;
t1268 = -t1468 + t1469;
t1454 = t1439 * t1268 - t1443 * t1465;
t1184 = -t1432 * t1267 + t1435 * t1454;
t1236 = t1443 * t1268 + t1439 * t1465;
t1548 = t1184 * t1434 + t1236 * t1431;
t1326 = -t1377 - t1378;
t1311 = t1366 + t1345;
t1463 = (-qJD(3) + t1394) * t1381 - t1510;
t1532 = -t1311 * t1443 + t1439 * t1463;
t1194 = -t1326 * t1432 + t1435 * t1532;
t1252 = t1311 * t1439 + t1443 * t1463;
t1546 = t1194 * t1434 + t1252 * t1431;
t1346 = t1378 - t1377;
t1533 = -t1306 * t1439 + t1310 * t1443;
t1213 = -t1346 * t1432 + t1435 * t1533;
t1251 = -t1306 * t1443 - t1310 * t1439;
t1544 = t1213 * t1434 + t1251 * t1431;
t1531 = t1333 * t1439 + t1734;
t1217 = -t1306 * t1432 + t1435 * t1531;
t1542 = t1217 * t1434 + t1272 * t1431;
t1309 = -t1379 * t1647 + t1457;
t1530 = t1337 * t1443 + t1674;
t1223 = -t1309 * t1432 + t1435 * t1530;
t1541 = t1223 * t1434 + t1274 * t1431;
t1365 = -t1378 + t1711;
t1528 = t1365 * t1443 + t1737;
t1233 = -t1311 * t1432 + t1435 * t1528;
t1294 = -t1365 * t1439 + t1734;
t1538 = t1233 * t1434 + t1294 * t1431;
t1364 = t1377 - t1711;
t1529 = t1364 * t1439 - t1673;
t1234 = -t1432 * t1463 + t1435 * t1529;
t1295 = t1364 * t1443 + t1674;
t1537 = t1234 * t1434 + t1295 * t1431;
t1464 = t1443 * t1473;
t1260 = t1435 * t1464 + (t1381 * t1432 + t1394 * t1650) * t1379;
t1301 = t1366 * t1443 - t1439 * t1473;
t1536 = t1260 * t1434 + t1301 * t1431;
t1262 = t1345 * t1650 + (-t1379 * t1432 + t1394 * t1649) * t1381;
t1303 = t1345 * t1443 - t1394 * t1668;
t1535 = t1262 * t1434 + t1303 * t1431;
t1512 = t1394 * (-t1379 * t1439 - t1381 * t1443);
t1297 = -t1393 * t1432 + t1435 * t1512;
t1316 = (-t1379 * t1443 + t1668) * t1394;
t1534 = t1297 * t1434 + t1316 * t1431;
t1456 = (qJ(2) * qJDD(1) + qJD(1) * t1709) * t1433 - t1513;
t1357 = t1431 * t1456 - t1731;
t1358 = t1434 * t1456 + t1459;
t1527 = -t1357 * t1434 + t1358 * t1431;
t1302 = t1357 * t1431 + t1358 * t1434;
t1414 = t1434 * t1625;
t1395 = t1414 + t1621;
t1413 = t1431 * t1625;
t1398 = -t1413 + t1619;
t1526 = t1395 * t1434 + t1398 * t1431;
t1396 = -t1414 + t1621;
t1397 = t1413 + t1619;
t1525 = -t1396 * t1434 + t1397 * t1431;
t1404 = (t1430 - t1661) * t1445;
t1524 = t1404 * t1434 + t1665;
t1523 = t1407 * t1431 + t1664;
t1522 = t1405 * t1434 - t1663;
t1406 = (-t1430 + t1660) * t1445;
t1521 = t1406 * t1431 + t1662;
t1383 = t1420 * t1444 - t1421 * t1440;
t820 = -pkin(4) * t867 - pkin(5) * t944 - qJ(6) * t937;
t823 = -pkin(11) * t867 + (pkin(5) * t1437 - t1700) * t967;
t767 = -pkin(10) * t838 - t1438 * t820 + t1442 * t823;
t780 = -pkin(3) * t838 - pkin(11) * t868 + (t1623 + t1704) * t967;
t1509 = pkin(9) * t803 + t1439 * t767 + t1443 * t780;
t800 = -pkin(10) * t863 + (-pkin(11) * t1442 + t1705) * t888;
t812 = -pkin(3) * t863 + pkin(4) * t1030 - pkin(11) * t889;
t1508 = pkin(9) * t822 + t1439 * t800 + t1443 * t812;
t926 = pkin(5) * t1644 + t1578;
t931 = qJ(6) * t1644 + t1514;
t847 = -t1437 * t926 + t1441 * t931 - t1809;
t980 = -pkin(4) * t1769 - pkin(5) * t1724 + qJ(6) * t1169;
t821 = -t1438 * t980 + t1442 * t847 - t1835;
t836 = -t1437 * t931 - t1441 * t926 + t1818;
t1507 = t1439 * t821 + t1443 * t836 + t1851;
t903 = -t1837 - qJ(6) * t1728 + (-t1238 + t1712) * pkin(5) - t1578;
t1460 = t1329 * t1761 - t1462;
t942 = -pkin(5) * t1672 + t1460 + t1759;
t907 = -pkin(5) * t1689 + t1441 * t942 - t1834;
t831 = -pkin(10) * t1047 - t1438 * t903 + t1442 * t907;
t869 = -pkin(3) * t1047 + t1833 - t1437 * t942 + (-pkin(4) - t1704) * t1723;
t1506 = pkin(9) * t994 + t1439 * t831 + t1443 * t869;
t872 = -t888 - t1809;
t840 = t1442 * t872 + t1705 * t1769 - t1835;
t852 = t1818 - t889;
t1505 = t1439 * t840 + t1443 * t852 + t1851;
t935 = t968 - t1786;
t990 = t1698 - t1784;
t860 = -pkin(10) * t1048 - t1438 * t935 + t1442 * t990;
t917 = -pkin(3) * t1048 + pkin(4) * t1168 + t1697 - t1785;
t1504 = pkin(9) * t995 + t1439 * t860 + t1443 * t917;
t936 = t969 + t1837;
t992 = t1697 + t1834;
t865 = -pkin(10) * t1055 - t1438 * t936 + t1442 * t992;
t921 = -pkin(3) * t1055 - pkin(4) * t1176 - t1698 - t1833;
t1503 = pkin(9) * t1001 + t1439 * t865 + t1443 * t921;
t908 = -t1786 + (-t1722 - t1712) * qJ(6) + (-t1729 - t1290) * pkin(5) + t1610;
t943 = (-t1170 - t1672) * pkin(5) + t1460;
t909 = -t1170 * t1700 - t1437 * t943 - t1784;
t833 = -pkin(10) * t1056 - t1438 * t908 + t1442 * t909;
t873 = -pkin(3) * t1056 + t1170 * t1623 - t1441 * t943 - t1785;
t1502 = pkin(9) * t1002 + t1439 * t833 + t1443 * t873;
t766 = -pkin(3) * t867 + pkin(10) * t839 + t1438 * t823 + t1442 * t820;
t778 = t1432 * t1593 + t1435 * t838;
t736 = -pkin(2) * t778 - t1432 * t766 + t1435 * t1509;
t739 = -t1439 * t780 + t1443 * t767 + (-t1432 * t778 - t1435 * t779) * pkin(9);
t765 = -t1431 * t779 + t1434 * t803;
t1501 = qJ(2) * t765 + t1431 * t739 + t1434 * t736;
t787 = pkin(10) * t864 + (-pkin(11) * t1438 + t1637) * t888;
t793 = t1432 * t1592 + t1435 * t863;
t746 = -pkin(2) * t793 - t1432 * t787 + t1435 * t1508;
t754 = -t1439 * t812 + t1443 * t800 + (-t1432 * t793 - t1435 * t794) * pkin(9);
t774 = -t1431 * t794 + t1434 * t822;
t1500 = qJ(2) * t774 + t1431 * t754 + t1434 * t746;
t817 = -pkin(3) * t1769 + t1438 * t847 + t1442 * t980 + t1836;
t764 = -t1432 * t817 + t1435 * t1507 - t1865;
t775 = -t1439 * t836 + t1443 * t821 + t1852;
t1499 = t1431 * t775 + t1434 * t764 + t1875;
t837 = t1438 * t872 + t1637 * t1769 + t1836;
t769 = -t1432 * t837 + t1435 * t1505 - t1865;
t777 = -t1439 * t852 + t1443 * t840 + t1852;
t1498 = t1431 * t777 + t1434 * t769 + t1875;
t825 = pkin(10) * t1049 + t1438 * t907 + t1442 * t903 - t1838;
t938 = t1047 * t1435 + t1432 * t1569;
t771 = -pkin(2) * t938 - t1432 * t825 + t1435 * t1506;
t783 = -t1439 * t869 + t1443 * t831 + (-t1432 * t938 - t1435 * t940) * pkin(9);
t886 = -t1431 * t940 + t1434 * t994;
t1497 = qJ(2) * t886 + t1431 * t783 + t1434 * t771;
t826 = pkin(10) * t1058 + t1438 * t909 + t1442 * t908 - t1787;
t946 = t1056 * t1435 + t1432 * t1566;
t773 = -pkin(2) * t946 - t1432 * t826 + t1435 * t1502;
t786 = -t1439 * t873 + t1443 * t833 + (-t1432 * t946 - t1435 * t948) * pkin(9);
t895 = t1002 * t1434 - t1431 * t948;
t1496 = qJ(2) * t895 + t1431 * t786 + t1434 * t773;
t858 = pkin(10) * t1050 + t1438 * t990 + t1442 * t935 - t1787;
t939 = t1048 * t1435 + t1432 * t1568;
t782 = -pkin(2) * t939 - t1432 * t858 + t1435 * t1504;
t799 = -t1439 * t917 + t1443 * t860 + (-t1432 * t939 - t1435 * t941) * pkin(9);
t887 = -t1431 * t941 + t1434 * t995;
t1495 = qJ(2) * t887 + t1431 * t799 + t1434 * t782;
t859 = pkin(10) * t1057 + t1438 * t992 + t1442 * t936 + t1838;
t945 = t1055 * t1435 + t1432 * t1567;
t785 = -pkin(2) * t945 - t1432 * t859 + t1435 * t1503;
t801 = -t1439 * t921 + t1443 * t865 + (-t1432 * t945 - t1435 * t947) * pkin(9);
t894 = t1001 * t1434 - t1431 * t947;
t1494 = qJ(2) * t894 + t1431 * t801 + t1434 * t785;
t1477 = pkin(9) * t962 + (-pkin(10) * t1439 - t1706) * t978;
t890 = t1432 * t1579 + t1435 * t978;
t963 = -pkin(3) * t1151 + pkin(10) * t979;
t806 = -pkin(2) * t890 - t1432 * t963 + t1435 * t1477;
t807 = (-pkin(10) * t1443 + t1707) * t978 + (-t1432 * t890 - t1435 * t891) * pkin(9);
t853 = -t1431 * t891 + t1434 * t962;
t1493 = qJ(2) * t853 + t1431 * t807 + t1434 * t806;
t1039 = t1156 * t1435 + t1432 * t1551;
t964 = -pkin(10) * t1156 - t978;
t1479 = pkin(9) * t1120 - t1156 * t1706 + t1439 * t964;
t951 = pkin(3) * t1273 + pkin(10) * t1158 + t979;
t842 = -pkin(2) * t1039 - t1432 * t951 + t1435 * t1479;
t874 = t1156 * t1707 + t1443 * t964 + (-t1039 * t1432 - t1040 * t1435) * pkin(9);
t991 = -t1040 * t1431 + t1120 * t1434;
t1492 = qJ(2) * t991 + t1431 * t874 + t1434 * t842;
t1085 = -t1253 * t1435 + t1432 * t1547;
t981 = (-t1085 * t1432 - t1086 * t1435) * pkin(9);
t996 = -t1086 * t1431 + t1109 * t1434;
t997 = -pkin(2) * t1085 + t1109 * t1702;
t1491 = qJ(2) * t996 + t1431 * t981 + t1434 * t997;
t1016 = -pkin(3) * t1200 + t1075;
t1094 = -pkin(10) * t1200 + t1696;
t1490 = pkin(9) * t1131 + t1016 * t1443 + t1094 * t1439;
t1017 = -pkin(3) * t1214 + t1076;
t1100 = -pkin(10) * t1214 + t1695;
t1489 = pkin(9) * t1137 + t1017 * t1443 + t1100 * t1439;
t1488 = pkin(9) * t1252 + t1109;
t1005 = -t1090 * t1431 + t1131 * t1434;
t1051 = pkin(3) * t1246 + pkin(10) * t1201 - t1695;
t1089 = t1200 * t1435 + t1432 * t1545;
t882 = -pkin(2) * t1089 - t1051 * t1432 + t1435 * t1490;
t902 = -t1016 * t1439 + t1094 * t1443 + (-t1089 * t1432 - t1090 * t1435) * pkin(9);
t1487 = qJ(2) * t1005 + t1431 * t902 + t1434 * t882;
t1010 = -t1093 * t1431 + t1137 * t1434;
t1054 = pkin(3) * t1250 + pkin(10) * t1215 + t1696;
t1092 = t1214 * t1435 + t1432 * t1543;
t885 = -pkin(2) * t1092 - t1054 * t1432 + t1435 * t1489;
t906 = -t1017 * t1439 + t1100 * t1443 + (-t1092 * t1432 - t1093 * t1435) * pkin(9);
t1486 = qJ(2) * t1010 + t1431 * t906 + t1434 * t885;
t1193 = t1326 * t1435 + t1432 * t1532;
t1011 = (-t1193 * t1432 - t1194 * t1435) * pkin(9) - t1547;
t1015 = -pkin(2) * t1193 + t1435 * t1488;
t1130 = -t1194 * t1431 + t1252 * t1434;
t1484 = qJ(2) * t1130 + t1011 * t1431 + t1015 * t1434;
t1216 = t1306 * t1435 + t1432 * t1531;
t1053 = -pkin(2) * t1216 + t1191 * t1432 + t1435 * t1604;
t1095 = -t1682 + (-t1216 * t1432 - t1217 * t1435) * pkin(9);
t1167 = -t1217 * t1431 + t1272 * t1434;
t1483 = qJ(2) * t1167 + t1053 * t1434 + t1095 * t1431;
t1222 = t1309 * t1435 + t1432 * t1530;
t1060 = -pkin(2) * t1222 + t1192 * t1432 + t1435 * t1603;
t1101 = -t1681 + (-t1222 * t1432 - t1223 * t1435) * pkin(9);
t1185 = -t1223 * t1431 + t1274 * t1434;
t1482 = qJ(2) * t1185 + t1060 * t1434 + t1101 * t1431;
t1367 = t1396 * t1431 + t1397 * t1434;
t1481 = qJ(2) * t1367 + t1302;
t1417 = qJDD(1) * t1440 + t1444 * t1445;
t1403 = -pkin(8) * t1417 + g(3) * t1444;
t1402 = t1643 * t1659;
t1401 = (t1426 - t1429) * t1659;
t1391 = t1643 * t1625;
t1390 = (-t1426 * t1648 + t1620) * t1433;
t1389 = (-t1429 * t1648 - t1620) * t1433;
t1376 = t1426 * t1618 + t1730;
t1375 = t1429 * t1618 - t1730;
t1372 = -t1404 * t1431 + t1664;
t1370 = t1406 * t1434 - t1663;
t1368 = -t1395 * t1431 + t1398 * t1434;
t1352 = -t1395 * t1433 + t1436 * t1522;
t1351 = -t1396 * t1433 + t1436 * t1524;
t1350 = t1398 * t1433 + t1436 * t1523;
t1349 = -t1397 * t1433 + t1436 * t1521;
t1348 = t1395 * t1436 + t1433 * t1522;
t1347 = -t1398 * t1436 + t1433 * t1523;
t1344 = -t1401 * t1433 + t1436 * t1526;
t1343 = t1402 * t1433 + t1436 * t1525;
t1342 = -t1402 * t1436 + t1433 * t1525;
t1320 = -t1352 * t1440 + t1373 * t1444;
t1319 = -t1350 * t1440 + t1371 * t1444;
t1318 = t1352 * t1444 + t1373 * t1440;
t1317 = t1350 * t1444 + t1371 * t1440;
t1314 = -t1343 * t1440 + t1367 * t1444;
t1313 = t1343 * t1444 + t1367 * t1440;
t1296 = t1393 * t1435 + t1432 * t1512;
t1280 = t1382 * t1433 + t1436 * t1527;
t1279 = -t1382 * t1436 + t1433 * t1527;
t1276 = -t1666 + (-t1348 * t1433 - t1352 * t1436) * qJ(2);
t1275 = -t1667 + (-t1347 * t1433 - t1350 * t1436) * qJ(2);
t1264 = -pkin(1) * t1347 + t1357 * t1433 + t1436 * t1591;
t1263 = -pkin(1) * t1348 + t1358 * t1433 + t1436 * t1590;
t1261 = t1345 * t1655 + (t1379 * t1435 + t1394 * t1654) * t1381;
t1259 = t1432 * t1464 + (-t1381 * t1435 + t1394 * t1655) * t1379;
t1244 = -pkin(1) * t1342 + t1436 * t1481;
t1239 = -t1297 * t1431 + t1316 * t1434;
t1235 = (-t1342 * t1433 - t1343 * t1436) * qJ(2) - t1527;
t1232 = t1432 * t1529 + t1435 * t1463;
t1231 = t1311 * t1435 + t1432 * t1528;
t1226 = qJ(2) * t1302 * t1436 - pkin(1) * t1279;
t1225 = -t1280 * t1440 + t1302 * t1444;
t1224 = t1280 * t1444 + t1302 * t1440;
t1212 = t1346 * t1435 + t1432 * t1533;
t1206 = (-t1279 * t1433 - t1280 * t1436) * qJ(2);
t1203 = -t1262 * t1431 + t1303 * t1434;
t1202 = -t1260 * t1431 + t1301 * t1434;
t1188 = -t1296 * t1433 + t1436 * t1534;
t1187 = -t1234 * t1431 + t1295 * t1434;
t1186 = -t1233 * t1431 + t1294 * t1434;
t1183 = t1435 * t1267 + t1432 * t1454;
t1139 = -t1261 * t1433 + t1436 * t1535;
t1138 = -t1259 * t1433 + t1436 * t1536;
t1136 = -t1213 * t1431 + t1251 * t1434;
t1122 = t1242 * t1435 + t1432 * t1517;
t1121 = t1240 * t1435 + t1432 * t1518;
t1111 = -t1232 * t1433 + t1436 * t1537;
t1110 = -t1231 * t1433 + t1436 * t1538;
t1108 = -t1184 * t1431 + t1236 * t1434;
t1107 = -t1222 * t1433 + t1436 * t1541;
t1106 = t1222 * t1436 + t1433 * t1541;
t1105 = -t1216 * t1433 + t1436 * t1542;
t1104 = t1216 * t1436 + t1433 * t1542;
t1097 = t1228 * t1435 + t1432 * t1539;
t1096 = t1227 * t1435 + t1432 * t1540;
t1091 = -t1212 * t1433 + t1436 * t1544;
t1088 = -t1193 * t1433 + t1436 * t1546;
t1087 = t1193 * t1436 + t1433 * t1546;
t1062 = -t1124 * t1431 + t1190 * t1434;
t1061 = -t1123 * t1431 + t1189 * t1434;
t1059 = pkin(2) * t1223 - t1192 * t1435 + t1432 * t1603;
t1052 = pkin(2) * t1217 - t1191 * t1435 + t1432 * t1604;
t1045 = t1155 * t1435 + t1432 * t1552;
t1034 = -t1183 * t1433 + t1436 * t1548;
t1033 = -t1107 * t1440 + t1185 * t1444;
t1032 = t1107 * t1444 + t1185 * t1440;
t1023 = -t1105 * t1440 + t1167 * t1444;
t1022 = t1105 * t1444 + t1167 * t1440;
t1014 = pkin(2) * t1194 + t1432 * t1488;
t1013 = -t1099 * t1431 + t1141 * t1434;
t1012 = -t1098 * t1431 + t1140 * t1434;
t1004 = -t1088 * t1440 + t1130 * t1444;
t1003 = t1088 * t1444 + t1130 * t1440;
t1000 = -t1122 * t1433 + t1436 * t1553;
t999 = -t1121 * t1433 + t1436 * t1554;
t998 = pkin(2) * t1086 + t1109 * t1703;
t993 = -t1046 * t1431 + t1125 * t1434;
t973 = -t1097 * t1433 + t1436 * t1557;
t972 = -t1096 * t1433 + t1436 * t1558;
t966 = -t1092 * t1433 + t1436 * t1559;
t965 = t1092 * t1436 + t1433 * t1559;
t961 = -t1089 * t1433 + t1436 * t1560;
t960 = t1089 * t1436 + t1433 * t1560;
t950 = -t1085 * t1433 + t1436 * t1561;
t949 = t1085 * t1436 + t1433 * t1561;
t934 = -t1045 * t1433 + t1436 * t1570;
t933 = -t1039 * t1433 + t1436 * t1573;
t932 = t1039 * t1436 + t1433 * t1573;
t920 = -t1060 * t1431 + t1101 * t1434 + (-t1106 * t1433 - t1107 * t1436) * qJ(2);
t912 = -t1053 * t1431 + t1095 * t1434 + (-t1104 * t1433 - t1105 * t1436) * qJ(2);
t911 = t1010 * t1444 - t1440 * t966;
t910 = t1010 * t1440 + t1444 * t966;
t905 = t1005 * t1444 - t1440 * t961;
t904 = t1005 * t1440 + t1444 * t961;
t897 = -pkin(1) * t1106 - t1059 * t1433 + t1436 * t1482;
t896 = -pkin(1) * t1104 - t1052 * t1433 + t1436 * t1483;
t893 = -t1440 * t950 + t1444 * t996;
t892 = t1440 * t996 + t1444 * t950;
t884 = pkin(2) * t1093 + t1054 * t1435 + t1432 * t1489;
t883 = t1011 * t1434 - t1015 * t1431 + (-t1087 * t1433 - t1088 * t1436) * qJ(2);
t881 = pkin(2) * t1090 + t1051 * t1435 + t1432 * t1490;
t880 = -t1440 * t933 + t1444 * t991;
t879 = t1440 * t991 + t1444 * t933;
t866 = -pkin(1) * t1087 - t1014 * t1433 + t1436 * t1484;
t851 = -t1433 * t946 + t1436 * t1588;
t850 = -t1433 * t945 + t1436 * t1589;
t849 = t1433 * t1588 + t1436 * t946;
t848 = t1433 * t1589 + t1436 * t945;
t846 = -t1433 * t939 + t1436 * t1594;
t845 = -t1433 * t938 + t1436 * t1595;
t844 = t1433 * t1594 + t1436 * t939;
t843 = t1433 * t1595 + t1436 * t938;
t841 = pkin(2) * t1040 + t1432 * t1479 + t1435 * t951;
t832 = -t1431 * t997 + t1434 * t981 + (-t1433 * t949 - t1436 * t950) * qJ(2);
t824 = -pkin(1) * t949 - t1433 * t998 + t1436 * t1491;
t819 = -t1433 * t890 + t1436 * t1600;
t818 = t1433 * t1600 + t1436 * t890;
t816 = -t1440 * t851 + t1444 * t895;
t815 = -t1440 * t850 + t1444 * t894;
t814 = t1440 * t895 + t1444 * t851;
t813 = t1440 * t894 + t1444 * t850;
t811 = -t1440 * t846 + t1444 * t887;
t810 = -t1440 * t845 + t1444 * t886;
t809 = t1440 * t887 + t1444 * t846;
t808 = t1440 * t886 + t1444 * t845;
t805 = pkin(2) * t891 + t1432 * t1477 + t1435 * t963;
t804 = -t1431 * t885 + t1434 * t906 + (-t1433 * t965 - t1436 * t966) * qJ(2);
t802 = -t1431 * t882 + t1434 * t902 + (-t1433 * t960 - t1436 * t961) * qJ(2);
t792 = -pkin(1) * t965 - t1433 * t884 + t1436 * t1486;
t791 = -pkin(1) * t960 - t1433 * t881 + t1436 * t1487;
t790 = -t1440 * t819 + t1444 * t853;
t789 = t1440 * t853 + t1444 * t819;
t788 = -t1431 * t842 + t1434 * t874 + (-t1433 * t932 - t1436 * t933) * qJ(2);
t784 = pkin(2) * t947 + t1432 * t1503 + t1435 * t859;
t781 = pkin(2) * t941 + t1432 * t1504 + t1435 * t858;
t776 = -pkin(1) * t932 - t1433 * t841 + t1436 * t1492;
t772 = pkin(2) * t948 + t1432 * t1502 + t1435 * t826;
t770 = pkin(2) * t940 + t1432 * t1506 + t1435 * t825;
t768 = t1432 * t1505 + t1435 * t837 + t1866;
t763 = t1432 * t1507 + t1435 * t817 + t1866;
t762 = -t1433 * t793 + t1436 * t1601;
t761 = t1433 * t1601 + t1436 * t793;
t760 = -t1431 * t785 + t1434 * t801 + (-t1433 * t848 - t1436 * t850) * qJ(2);
t759 = -t1431 * t806 + t1434 * t807 + (-t1433 * t818 - t1436 * t819) * qJ(2);
t758 = -t1431 * t782 + t1434 * t799 + (-t1433 * t844 - t1436 * t846) * qJ(2);
t757 = -t1433 * t778 + t1436 * t1602;
t756 = t1433 * t1602 + t1436 * t778;
t755 = -pkin(1) * t818 - t1433 * t805 + t1436 * t1493;
t753 = -t1431 * t773 + t1434 * t786 + (-t1433 * t849 - t1436 * t851) * qJ(2);
t752 = -t1431 * t771 + t1434 * t783 + (-t1433 * t843 - t1436 * t845) * qJ(2);
t751 = -pkin(1) * t848 - t1433 * t784 + t1436 * t1494;
t750 = -pkin(1) * t844 - t1433 * t781 + t1436 * t1495;
t749 = -t1440 * t762 + t1444 * t774;
t748 = t1440 * t774 + t1444 * t762;
t747 = -t1431 * t769 + t1434 * t777 + t1876;
t745 = pkin(2) * t794 + t1432 * t1508 + t1435 * t787;
t744 = -t1431 * t764 + t1434 * t775 + t1876;
t743 = -pkin(1) * t849 - t1433 * t772 + t1436 * t1496;
t742 = -pkin(1) * t843 - t1433 * t770 + t1436 * t1497;
t741 = -t1440 * t757 + t1444 * t765;
t740 = t1440 * t765 + t1444 * t757;
t738 = -t1433 * t768 + t1436 * t1498 - t1885;
t737 = -t1433 * t763 + t1436 * t1499 - t1885;
t735 = pkin(2) * t779 + t1432 * t1509 + t1435 * t766;
t734 = -t1431 * t746 + t1434 * t754 + (-t1433 * t761 - t1436 * t762) * qJ(2);
t733 = -pkin(1) * t761 - t1433 * t745 + t1436 * t1500;
t732 = -t1431 * t736 + t1434 * t739 + (-t1433 * t756 - t1436 * t757) * qJ(2);
t731 = -pkin(1) * t756 - t1433 * t735 + t1436 * t1501;
t1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, -g(1), 0, 0, 0, 0, 0, 0, -t1417, -t1418, 0, t1384, 0, 0, 0, 0, 0, 0, t1319, t1320, t1314, t1225, 0, 0, 0, 0, 0, 0, t1023, t1033, t1004, t893, 0, 0, 0, 0, 0, 0, t905, t911, t880, t790, 0, 0, 0, 0, 0, 0, t811, t815, t1879, t749, 0, 0, 0, 0, 0, 0, t816, t1879, t810, t741; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(2), 0, 0, 0, 0, 0, 0, t1418, -t1417, 0, t1383, 0, 0, 0, 0, 0, 0, t1317, t1318, t1313, t1224, 0, 0, 0, 0, 0, 0, t1022, t1032, t1003, t892, 0, 0, 0, 0, 0, 0, t904, t910, t879, t789, 0, 0, 0, 0, 0, 0, t809, t813, t1877, t748, 0, 0, 0, 0, 0, 0, t814, t1877, t808, t740; 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, 0, 0, 0, -g(3), 0, 0, 0, 0, 0, 0, t1347, t1348, t1342, t1279, 0, 0, 0, 0, 0, 0, t1104, t1106, t1087, t949, 0, 0, 0, 0, 0, 0, t960, t965, t932, t818, 0, 0, 0, 0, 0, 0, t844, t848, t1870, t761, 0, 0, 0, 0, 0, 0, t849, t1870, t843, t756; 0, 0, 0, 0, 0, 0, 0, -g(3), g(2), 0, 0, 0, t1418, 0, -t1417, 0, t1609, -t1403, -t1383, -pkin(8) * t1383, -t1376 * t1440 + t1390 * t1444, -t1344 * t1440 + t1368 * t1444, -t1351 * t1440 + t1372 * t1444, -t1375 * t1440 + t1389 * t1444, -t1349 * t1440 + t1370 * t1444, t1391 * t1444 + t1440 * t1618, -pkin(8) * t1317 - t1264 * t1440 + t1275 * t1444, -pkin(8) * t1318 - t1263 * t1440 + t1276 * t1444, -pkin(8) * t1313 + t1235 * t1444 - t1244 * t1440, -pkin(8) * t1224 + t1206 * t1444 - t1226 * t1440, -t1139 * t1440 + t1203 * t1444, -t1091 * t1440 + t1136 * t1444, -t1110 * t1440 + t1186 * t1444, -t1138 * t1440 + t1202 * t1444, -t1111 * t1440 + t1187 * t1444, -t1188 * t1440 + t1239 * t1444, -pkin(8) * t1022 - t1440 * t896 + t1444 * t912, -pkin(8) * t1032 - t1440 * t897 + t1444 * t920, -pkin(8) * t1003 - t1440 * t866 + t1444 * t883, -pkin(8) * t892 - t1440 * t824 + t1444 * t832, -t1000 * t1440 + t1062 * t1444, -t1440 * t934 + t1444 * t993, t1012 * t1444 - t1440 * t972, t1061 * t1444 - t1440 * t999, t1013 * t1444 - t1440 * t973, -t1034 * t1440 + t1108 * t1444, -pkin(8) * t904 - t1440 * t791 + t1444 * t802, -pkin(8) * t910 - t1440 * t792 + t1444 * t804, -pkin(8) * t879 - t1440 * t776 + t1444 * t788, -pkin(8) * t789 - t1440 * t755 + t1444 * t759, t1791, -t1901, t1880, t1841, -t1902, t1842, -pkin(8) * t809 - t1440 * t750 + t1444 * t758, -pkin(8) * t813 - t1440 * t751 + t1444 * t760, -t1440 * t738 + t1444 * t747 - t1888, -pkin(8) * t748 - t1440 * t733 + t1444 * t734, t1791, t1880, t1901, t1842, t1902, t1841, -pkin(8) * t814 - t1440 * t743 + t1444 * t753, -t1440 * t737 + t1444 * t744 - t1888, -pkin(8) * t808 - t1440 * t742 + t1444 * t752, -pkin(8) * t740 - t1440 * t731 + t1444 * t732; 0, 0, 0, 0, 0, 0, g(3), 0, -g(1), 0, 0, 0, t1417, 0, t1418, 0, t1403, t1609, t1384, pkin(8) * t1384, t1376 * t1444 + t1390 * t1440, t1344 * t1444 + t1368 * t1440, t1351 * t1444 + t1372 * t1440, t1375 * t1444 + t1389 * t1440, t1349 * t1444 + t1370 * t1440, t1391 * t1440 - t1444 * t1618, pkin(8) * t1319 + t1264 * t1444 + t1275 * t1440, pkin(8) * t1320 + t1263 * t1444 + t1276 * t1440, pkin(8) * t1314 + t1235 * t1440 + t1244 * t1444, pkin(8) * t1225 + t1206 * t1440 + t1226 * t1444, t1139 * t1444 + t1203 * t1440, t1091 * t1444 + t1136 * t1440, t1110 * t1444 + t1186 * t1440, t1138 * t1444 + t1202 * t1440, t1111 * t1444 + t1187 * t1440, t1188 * t1444 + t1239 * t1440, pkin(8) * t1023 + t1440 * t912 + t1444 * t896, pkin(8) * t1033 + t1440 * t920 + t1444 * t897, pkin(8) * t1004 + t1440 * t883 + t1444 * t866, pkin(8) * t893 + t1440 * t832 + t1444 * t824, t1000 * t1444 + t1062 * t1440, t1440 * t993 + t1444 * t934, t1012 * t1440 + t1444 * t972, t1061 * t1440 + t1444 * t999, t1013 * t1440 + t1444 * t973, t1034 * t1444 + t1108 * t1440, pkin(8) * t905 + t1440 * t802 + t1444 * t791, pkin(8) * t911 + t1440 * t804 + t1444 * t792, pkin(8) * t880 + t1440 * t788 + t1444 * t776, pkin(8) * t790 + t1440 * t759 + t1444 * t755, t1788, t1899, t1878, t1839, t1900, t1840, pkin(8) * t811 + t1440 * t758 + t1444 * t750, pkin(8) * t815 + t1440 * t760 + t1444 * t751, t1440 * t747 + t1444 * t738 + t1887, pkin(8) * t749 + t1440 * t734 + t1444 * t733, t1788, t1878, -t1899, t1840, -t1900, t1839, pkin(8) * t816 + t1440 * t753 + t1444 * t743, t1440 * t744 + t1444 * t737 + t1887, pkin(8) * t810 + t1440 * t752 + t1444 * t742, pkin(8) * t741 + t1440 * t732 + t1444 * t731; 0, 0, 0, 0, 0, 0, -g(2), g(1), 0, 0, 0, 0, 0, 0, 0, qJDD(1), t1420, t1421, 0, 0, t1426 * t1642, t1401 * t1436 + t1433 * t1526, t1396 * t1436 + t1433 * t1524, t1429 * t1642, t1397 * t1436 + t1433 * t1521, t1430 * qJDD(1), pkin(1) * t1350 - t1357 * t1436 + t1433 * t1591, pkin(1) * t1352 - t1358 * t1436 + t1433 * t1590, pkin(1) * t1343 + t1433 * t1481, pkin(1) * t1280 + t1302 * t1701, t1261 * t1436 + t1433 * t1535, t1212 * t1436 + t1433 * t1544, t1231 * t1436 + t1433 * t1538, t1259 * t1436 + t1433 * t1536, t1232 * t1436 + t1433 * t1537, t1296 * t1436 + t1433 * t1534, pkin(1) * t1105 + t1052 * t1436 + t1433 * t1483, pkin(1) * t1107 + t1059 * t1436 + t1433 * t1482, pkin(1) * t1088 + t1014 * t1436 + t1433 * t1484, pkin(1) * t950 + t1433 * t1491 + t1436 * t998, t1122 * t1436 + t1433 * t1553, t1045 * t1436 + t1433 * t1570, t1096 * t1436 + t1433 * t1558, t1121 * t1436 + t1433 * t1554, t1097 * t1436 + t1433 * t1557, t1183 * t1436 + t1433 * t1548, pkin(1) * t961 + t1433 * t1487 + t1436 * t881, pkin(1) * t966 + t1433 * t1486 + t1436 * t884, pkin(1) * t933 + t1433 * t1492 + t1436 * t841, pkin(1) * t819 + t1433 * t1493 + t1436 * t805, t1765, t1893, t1869, t1817, t1894, t1816, pkin(1) * t846 + t1433 * t1495 + t1436 * t781, pkin(1) * t850 + t1433 * t1494 + t1436 * t784, t1433 * t1498 + t1436 * t768 + t1886, pkin(1) * t762 + t1433 * t1500 + t1436 * t745, t1765, t1869, -t1893, t1816, -t1894, t1817, pkin(1) * t851 + t1433 * t1496 + t1436 * t772, t1433 * t1499 + t1436 * t763 + t1886, pkin(1) * t845 + t1433 * t1497 + t1436 * t770, pkin(1) * t757 + t1433 * t1501 + t1436 * t735;];
tauB_reg  = t1;
