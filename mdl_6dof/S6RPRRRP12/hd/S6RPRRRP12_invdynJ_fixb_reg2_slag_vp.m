% Calculate inertial parameters regressor of inverse dynamics joint torque vector for
% S6RPRRRP12
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% qJD [6x1]
%   Generalized joint velocities
% qJDD [6x1]
%   Generalized joint accelerations
% g [3x1]
%   gravitation vector in mdh base frame [m/s^2]
% pkin [12x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,alpha2,alpha3,d1,d3,d4,d5,theta2]';
% 
% Output:
% tau_reg [6x(6*10)]
%   inertial parameter regressor of inverse dynamics joint torque vector

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 06:53
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function tau_reg = S6RPRRRP12_invdynJ_fixb_reg2_slag_vp(qJ, qJD, qJDD, g, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(6,1),zeros(6,1),zeros(3,1),zeros(12,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RPRRRP12_invdynJ_fixb_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(qJD) && all(size(qJD) == [6 1]), ...
  'S6RPRRRP12_invdynJ_fixb_reg2_slag_vp: qJD has to be [6x1] (double)');
assert(isreal(qJDD) && all(size(qJDD) == [6 1]), ...
  'S6RPRRRP12_invdynJ_fixb_reg2_slag_vp: qJDD has to be [6x1] (double)');
assert(isreal(g) && all(size(g) == [3 1]), ...
  'S6RPRRRP12_invdynJ_fixb_reg2_slag_vp: g has to be [3x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [12 1]), ...
  'S6RPRRRP12_invdynJ_fixb_reg2_slag_vp: pkin has to be [12x1] (double)');

%% Symbolic Calculation
% From invdyn_joint_fixb_regressor_matlab.m
% OptimizationMode: 2
% StartTime: 2019-03-09 06:50:46
% EndTime: 2019-03-09 06:51:29
% DurationCPUTime: 22.74s
% Computational Cost: add. (35957->876), mult. (114655->1131), div. (0->0), fcn. (99099->14), ass. (0->380)
t339 = sin(pkin(12));
t340 = sin(pkin(6));
t341 = cos(pkin(12));
t541 = cos(pkin(7));
t562 = sin(qJ(3));
t462 = t541 * t562;
t564 = cos(qJ(3));
t372 = t340 * (-t339 * t462 + t341 * t564);
t268 = qJD(1) * t372;
t540 = sin(pkin(7));
t461 = t540 * t564;
t420 = qJD(3) * t461;
t604 = -t268 + t420;
t342 = cos(pkin(6));
t563 = sin(qJ(1));
t484 = t563 * t341;
t565 = cos(qJ(1));
t488 = t565 * t339;
t284 = t342 * t488 + t484;
t460 = t540 * t562;
t432 = t340 * t460;
t333 = t563 * t339;
t487 = t565 * t341;
t418 = -t342 * t487 + t333;
t583 = t418 * t541;
t202 = -t284 * t564 + t565 * t432 + t562 * t583;
t344 = sin(qJ(4));
t346 = cos(qJ(4));
t477 = t340 * t541;
t595 = t418 * t540 - t565 * t477;
t155 = t202 * t346 - t344 * t595;
t433 = t340 * t461;
t199 = t284 * t562 + t433 * t565 + t564 * t583;
t343 = sin(qJ(5));
t345 = cos(qJ(5));
t103 = t155 * t343 + t199 * t345;
t104 = t155 * t345 - t199 * t343;
t523 = t339 * t340;
t467 = t562 * t523;
t463 = t541 * t564;
t522 = t340 * t341;
t411 = t463 * t522;
t431 = t342 * t461;
t513 = (-t411 - t431) * qJD(1);
t235 = qJD(1) * t467 + t513;
t390 = qJD(4) + t235;
t558 = pkin(10) * t346;
t510 = qJD(4) * t344;
t271 = (-pkin(9) * t339 * t540 - pkin(2) * t341 - pkin(1)) * t340;
t258 = qJD(1) * t271 + qJD(2);
t483 = qJ(2) * qJD(1) * t340;
t561 = pkin(1) * t342;
t495 = qJD(1) * t561;
t280 = t339 * t495 + t341 * t483;
t384 = (t341 * t477 + t342 * t540) * pkin(9);
t224 = qJD(1) * t384 + t280;
t324 = t341 * t495;
t385 = t342 * pkin(2) + (-pkin(9) * t541 - qJ(2)) * t523;
t230 = qJD(1) * t385 + t324;
t597 = -t562 * t224 + t230 * t463;
t132 = t258 * t461 + t597;
t430 = t342 * t460;
t594 = t564 * t339 + t341 * t462;
t251 = t340 * t594 + t430;
t239 = t251 * qJD(1);
t168 = pkin(3) * t239 + pkin(10) * t235;
t95 = t346 * t132 + t344 * t168;
t587 = pkin(10) * t510 + t95;
t288 = t344 * t460 - t346 * t541;
t474 = qJD(1) * t540;
t459 = t340 * t474;
t423 = t339 * t459;
t581 = -qJD(4) * t288 - t344 * t423 + t604 * t346;
t373 = t340 * (t339 * t463 + t341 * t562);
t267 = qJD(1) * t373;
t419 = qJD(3) * t460;
t578 = t419 - t267;
t603 = t202 * t344 + t346 * t595;
t238 = t251 * qJD(3);
t356 = qJD(1) * t238;
t579 = -t411 + t467;
t250 = -t431 + t579;
t397 = t250 * qJDD(1);
t389 = qJDD(4) + t397;
t580 = t356 + t389;
t599 = pkin(11) * t239 + t587;
t593 = t564 * t224 + t230 * t462;
t133 = t258 * t460 + t593;
t598 = -qJD(5) * t558 - t133 + t390 * (pkin(4) * t344 - pkin(11) * t346);
t289 = t344 * t541 + t346 * t460;
t392 = -t343 * t289 - t345 * t461;
t515 = -qJD(5) * t392 - t578 * t343 - t581 * t345;
t514 = qJD(4) * t289 + t604 * t344 + t346 * t423;
t396 = t342 * t484 + t488;
t596 = t396 * t540 + t563 * t477;
t475 = t342 * t541;
t476 = t340 * t540;
t391 = t341 * t476 - t475;
t529 = t235 * t344;
t592 = t510 + t529;
t401 = qJDD(1) * t391 - qJDD(3);
t378 = t239 * t510 + t344 * t401;
t500 = qJDD(1) * t340;
t166 = qJD(3) * t235 - qJDD(1) * t430 - t594 * t500;
t503 = -t341 * t459 + qJD(3);
t403 = -qJD(1) * t475 - t503;
t381 = qJD(4) * t403 + t166;
t573 = t346 * t381 + t378;
t591 = -qJD(5) * t390 + t573;
t177 = t239 * t344 + t346 * t403;
t176 = qJD(5) + t177;
t473 = t344 * t166 - t346 * t401;
t179 = t346 * t239 - t344 * t403;
t504 = t179 * qJD(4);
t100 = -t473 + t504;
t99 = qJDD(5) + t100;
t138 = t179 * t343 - t345 * t390;
t140 = t345 * t179 + t343 * t390;
t520 = t343 * t346;
t161 = -t235 * t520 - t345 * t239;
t519 = t345 * t346;
t162 = -t235 * t519 + t239 * t343;
t509 = qJD(4) * t346;
t167 = t356 + t397;
t349 = qJDD(4) + t167;
t507 = qJD(5) * t345;
t57 = t179 * t507 - t343 * t591 - t345 * t349;
t550 = t345 * t57;
t508 = qJD(5) * t343;
t56 = t179 * t508 - t343 * t349 + t345 * t591;
t552 = t343 * t56;
t590 = t344 * ((t138 * t343 - t140 * t345) * qJD(5) - t550 + t552) - (t138 * t345 + t140 * t343) * t509 + t138 * t162 + t140 * t161;
t452 = t343 * t509 - t161;
t551 = t343 * t99;
t589 = t452 * t176 + t344 * (t138 * t390 + t176 * t507 + t551) - t346 * t57;
t536 = t140 * t176;
t538 = t138 * t176;
t588 = t343 * (t57 + t536) + t345 * (t56 + t538);
t316 = -pkin(4) * t346 - pkin(11) * t344 - pkin(3);
t544 = t316 * t507 + t343 * t598 - t345 * t599;
t336 = t339 ^ 2;
t337 = t340 ^ 2;
t338 = t341 ^ 2;
t584 = t337 * (t336 + t338);
t326 = qJ(2) * t522;
t287 = t339 * t561 + t326;
t244 = t384 + t287;
t330 = t341 * t561;
t252 = t330 + t385;
t142 = -t562 * t244 + t252 * t463 + t271 * t461;
t525 = t250 * t346;
t526 = t250 * t344;
t582 = -pkin(4) * t525 - pkin(11) * t526;
t528 = t235 * t346;
t577 = -t509 - t528;
t448 = pkin(5) * t345 + qJ(6) * t343;
t173 = -t230 * t540 + t541 * t258;
t110 = t235 * pkin(3) - t239 * pkin(10) + t173;
t113 = -pkin(10) * t403 + t133;
t65 = t346 * t110 - t344 * t113;
t60 = -pkin(4) * t390 - t65;
t31 = t138 * pkin(5) - t140 * qJ(6) + t60;
t566 = pkin(11) * t99;
t576 = t176 * t31 - t566;
t118 = qJD(2) * t372 + qJD(3) * t142;
t180 = -t252 * t540 + t541 * t271;
t248 = t250 * pkin(3);
t479 = -t251 * pkin(10) + t248;
t124 = t180 + t479;
t143 = t564 * t244 + t252 * t462 + t271 * t460;
t131 = -pkin(10) * t391 + t143;
t237 = qJD(3) * t579 - t342 * t420;
t422 = t339 * qJD(2) * t476;
t159 = t238 * pkin(3) + t237 * pkin(10) + t422;
t43 = t346 * t118 + t124 * t509 - t131 * t510 + t344 * t159;
t37 = pkin(11) * t238 + t43;
t80 = t344 * t124 + t346 * t131;
t71 = pkin(11) * t250 + t80;
t130 = pkin(3) * t391 - t142;
t197 = t251 * t344 + t346 * t391;
t192 = t197 * pkin(4);
t198 = t251 * t346 - t344 * t391;
t88 = -t198 * pkin(11) + t130 + t192;
t556 = t343 * t88 + t345 * t71;
t119 = qJD(2) * t373 + qJD(3) * t143;
t144 = qJD(4) * t198 - t237 * t344;
t145 = -qJD(4) * t197 - t237 * t346;
t63 = t144 * pkin(4) - t145 * pkin(11) + t119;
t9 = -qJD(5) * t556 - t343 * t37 + t345 * t63;
t543 = -t316 * t508 + t343 * t599 + t345 * t598;
t429 = t343 * t461;
t260 = t345 * t289 - t429;
t570 = t140 * t514 + t176 * t515 - t260 * t99 - t288 * t56;
t569 = t140 ^ 2;
t568 = t176 ^ 2;
t567 = pkin(5) * t99;
t559 = pkin(10) * t344;
t557 = pkin(11) * t140;
t555 = qJ(6) * t99;
t66 = t344 * t110 + t346 * t113;
t61 = pkin(11) * t390 + t66;
t112 = pkin(3) * t403 - t132;
t76 = t177 * pkin(4) - t179 * pkin(11) + t112;
t28 = t343 * t76 + t345 * t61;
t22 = qJ(6) * t176 + t28;
t554 = t176 * t22;
t553 = t176 * t28;
t549 = t345 * t99;
t547 = qJ(6) * t592 - qJD(6) * t346 + t544;
t546 = -pkin(5) * t592 - t543;
t447 = pkin(5) * t343 - qJ(6) * t345;
t421 = pkin(10) + t447;
t94 = -t344 * t132 + t168 * t346;
t83 = -pkin(4) * t239 - t94;
t545 = -pkin(5) * t161 + qJ(6) * t162 + (qJD(5) * t448 - qJD(6) * t345) * t344 + t421 * t509 - t83;
t542 = -qJD(6) * t343 + t176 * t447 - t66;
t122 = pkin(4) * t179 + pkin(11) * t177;
t49 = t343 * t122 + t345 * t65;
t537 = t140 * t138;
t535 = t176 * t179;
t534 = t179 * t177;
t533 = t199 * t344;
t532 = t199 * t346;
t285 = -t333 * t342 + t487;
t371 = t396 * t541;
t203 = t285 * t562 + t371 * t564 - t433 * t563;
t531 = t203 * t344;
t530 = t203 * t346;
t527 = t239 * t235;
t524 = t316 * t345;
t347 = qJD(1) ^ 2;
t521 = t342 * t347;
t518 = t346 * t100;
t27 = -t343 * t61 + t345 * t76;
t517 = qJD(6) - t27;
t516 = qJD(5) * t429 - t289 * t507 - t343 * t581 + t345 * t578;
t276 = pkin(10) * t519 + t343 * t316;
t489 = t340 * t563;
t512 = t565 * pkin(1) + qJ(2) * t489;
t505 = t112 * qJD(4);
t502 = qJD(1) * qJD(2);
t501 = qJDD(1) * t337;
t499 = qJDD(1) * t341;
t498 = qJDD(1) * t342;
t497 = g(1) * t563;
t496 = g(2) * t565;
t493 = pkin(1) * t498;
t193 = t199 * pkin(3);
t492 = -pkin(4) * t532 - pkin(11) * t533 - t193;
t195 = t203 * pkin(3);
t491 = -pkin(4) * t530 - pkin(11) * t531 - t195;
t480 = t340 * t502;
t262 = qJDD(1) * t326 + t339 * t493 + t341 * t480;
t490 = t340 * t565;
t482 = qJD(4) + t513;
t481 = t138 ^ 2 - t569;
t478 = g(2) * t490 - g(3) * t342;
t210 = qJDD(1) * t384 + t262;
t322 = t341 * t493;
t466 = t339 * t480;
t214 = qJDD(1) * t385 + t322 - t466;
t254 = qJDD(1) * t271 + qJDD(2);
t77 = qJD(3) * t597 + t564 * t210 + t214 * t462 + t254 * t460 + t258 * t420;
t72 = -pkin(10) * t401 + t77;
t160 = -t214 * t540 + t541 * t254;
t89 = t167 * pkin(3) + t166 * pkin(10) + t160;
t412 = -t110 * t509 + t113 * t510 - t344 * t89 - t346 * t72;
t15 = pkin(11) * t580 - t412;
t417 = qJD(3) * t593 + t562 * t210 - t214 * t463 - t254 * t461 + t258 * t419;
t73 = pkin(3) * t401 + t417;
t26 = t100 * pkin(4) + pkin(11) * t573 + t73;
t4 = -t343 * t15 + t345 * t26 - t61 * t507 - t76 * t508;
t79 = t124 * t346 - t344 * t131;
t472 = t344 * t390;
t471 = t176 * t343;
t470 = t176 * t345;
t469 = t110 * t510 + t113 * t509 + t344 * t72 - t346 * t89;
t468 = 0.2e1 * t340 * t498;
t464 = -pkin(1) * t563 + qJ(2) * t490;
t204 = t285 * t564 - t371 * t562 + t432 * t563;
t157 = t204 * t346 + t344 * t596;
t105 = t157 * t343 - t203 * t345;
t457 = -g(1) * t103 - g(2) * t105;
t106 = t157 * t345 + t203 * t343;
t456 = -g(1) * t104 - g(2) * t106;
t156 = t204 * t344 - t346 * t596;
t455 = g(1) * t603 + g(2) * t156;
t454 = -g(1) * t199 + g(2) * t203;
t451 = t345 * t509 - t162;
t450 = (qJD(5) * t138 - t56) * pkin(11);
t146 = t198 * t343 - t250 * t345;
t147 = t198 * t345 + t250 * t343;
t449 = -pkin(5) * t146 + qJ(6) * t147;
t90 = qJD(5) * t147 + t145 * t343 - t238 * t345;
t446 = t138 * t90 + t146 * t57;
t21 = -pkin(5) * t176 + t517;
t445 = t21 * t345 - t22 * t343;
t443 = -t27 * t345 - t28 * t343;
t34 = -t343 * t71 + t345 * t88;
t48 = t122 * t345 - t343 * t65;
t439 = -t138 * t179 - t549;
t435 = (-t339 * t483 + t324) * t339 - t280 * t341;
t44 = -t344 * t118 - t124 * t510 - t131 * t509 + t159 * t346;
t70 = -pkin(4) * t250 - t79;
t325 = -pkin(1) * t500 + qJDD(2);
t416 = pkin(1) * t501 - t325 * t340;
t3 = t345 * t15 + t343 * t26 + t76 * t507 - t508 * t61;
t8 = t343 * t63 + t345 * t37 + t88 * t507 - t508 * t71;
t414 = t176 * t60 - t566;
t410 = g(1) * t565 + g(2) * t563;
t134 = -t199 * t520 + t202 * t345;
t136 = -t203 * t520 - t204 * t345;
t174 = -t250 * t520 - t251 * t345;
t409 = g(1) * t136 + g(2) * t134 + g(3) * t174;
t135 = -t199 * t519 - t202 * t343;
t137 = -t203 * t519 + t204 * t343;
t175 = -t250 * t519 + t251 * t343;
t408 = -g(1) * t137 - g(2) * t135 - g(3) * t175;
t407 = g(1) * t156 - g(2) * t603 + g(3) * t197;
t406 = -g(1) * t157 + g(2) * t155 - g(3) * t198;
t405 = g(1) * t203 + g(2) * t199 + g(3) * t250;
t404 = g(1) * t204 - g(2) * t202 + g(3) * t251;
t400 = t138 * t471 - t550;
t399 = -g(1) * t489 + t478;
t398 = -pkin(11) * t550 + t406;
t38 = -pkin(4) * t238 - t44;
t91 = t238 * t343 - t198 * t508 + (qJD(5) * t250 + t145) * t345;
t388 = t138 * t91 + t140 * t90 - t146 * t56 + t147 * t57;
t386 = t138 * t144 + t146 * t99 + t176 * t90 + t197 * t57;
t383 = pkin(11) * qJD(5) * t176 - t407;
t382 = g(1) * t105 - g(2) * t103 + g(3) * t146 + t4;
t380 = qJD(4) * t390;
t377 = t138 * t515 - t140 * t516 - t260 * t57 + t392 * t56;
t376 = t138 * t514 + t176 * t516 + t288 * t57 + t392 * t99;
t5 = -pkin(4) * t349 + t57 * pkin(5) + t56 * qJ(6) - t140 * qJD(6) + t469;
t375 = -t383 - t5;
t16 = -pkin(4) * t580 + t469;
t374 = t16 + t383;
t369 = t344 * t469 - t346 * t412 - t404;
t366 = -g(1) * t106 + g(2) * t104 - g(3) * t147 + t3;
t365 = t343 * t344 * t57 + (t344 * t507 + t452) * t138;
t364 = t140 * t31 + qJDD(6) - t382;
t362 = -t284 * pkin(2) - pkin(9) * t595 + t464;
t361 = t285 * pkin(2) + pkin(9) * t596 + t512;
t359 = t202 * pkin(3) - pkin(10) * t199 + t362;
t357 = t204 * pkin(3) + t203 * pkin(10) + t361;
t355 = t235 * t390 + t380;
t354 = t155 * pkin(4) + pkin(11) * t603 + t359;
t353 = t157 * pkin(4) + t156 * pkin(11) + t357;
t348 = t57 - t536;
t311 = -pkin(4) - t448;
t286 = -qJ(2) * t523 + t330;
t278 = t421 * t344;
t275 = -pkin(10) * t520 + t524;
t266 = -t524 + (pkin(10) * t343 + pkin(5)) * t346;
t265 = -qJ(6) * t346 + t276;
t261 = t322 + (-qJ(2) * qJDD(1) - t502) * t523;
t150 = t156 * pkin(4);
t148 = t603 * pkin(4);
t92 = pkin(5) * t140 + qJ(6) * t138;
t58 = t176 * t472 - t346 * t99;
t53 = t144 * t176 + t197 * t99;
t45 = -t449 + t70;
t40 = -pkin(5) * t179 - t48;
t39 = qJ(6) * t179 + t49;
t33 = -t56 + t538;
t32 = -t140 * t179 + t176 * t470 + t551;
t30 = -pkin(5) * t197 - t34;
t29 = qJ(6) * t197 + t556;
t23 = t140 * t470 - t552;
t20 = -t344 * t345 * t56 + (-t344 * t508 + t451) * t140;
t19 = t140 * t91 - t147 * t56;
t12 = pkin(5) * t90 - qJ(6) * t91 - qJD(6) * t147 + t38;
t11 = t346 * t56 + t451 * t176 + (t140 * t390 - t176 * t508 + t549) * t344;
t10 = t140 * t144 + t147 * t99 + t176 * t91 - t197 * t56;
t7 = -pkin(5) * t144 - t9;
t6 = qJ(6) * t144 + qJD(6) * t197 + t8;
t2 = qJDD(6) - t4 - t567;
t1 = qJD(6) * t176 + t3 + t555;
t13 = [0, 0, 0, 0, 0, qJDD(1), t497 - t496, t410, 0, 0, t336 * t501, 0.2e1 * t337 * t339 * t499, t339 * t468, t338 * t501, t341 * t468, t342 ^ 2 * qJDD(1), g(1) * t284 - g(2) * t285 + t416 * t341 + (qJDD(1) * t286 + t261 - t466) * t342, -g(1) * t333 + (t496 - t416) * t339 + (-t287 * qJDD(1) - t262 + (t410 - t480) * t341) * t342, t502 * t584 + (-t261 * t339 + t262 * t341 + (-t286 * t339 + t287 * t341) * qJDD(1) - t410) * t340, t262 * t287 + t261 * t286 - g(1) * t464 - g(2) * t512 + (-t325 * pkin(1) - qJD(2) * t435) * t340, -t166 * t251 - t237 * t239, t166 * t250 - t167 * t251 + t235 * t237 - t238 * t239, t166 * t391 + t237 * t403 - t251 * t401, t167 * t250 + t235 * t238, t167 * t391 + t238 * t403 + t250 * t401, t401 * t391, -g(1) * t202 - g(2) * t204 + t119 * t403 - t142 * t401 + t160 * t250 + t180 * t167 + t173 * t238 + t235 * t422 + t391 * t417, t118 * t403 + t143 * t401 + t160 * t251 - t180 * t166 - t173 * t237 + t239 * t422 + t391 * t77 + t454, g(1) * t595 - g(2) * t596 - t118 * t235 + t119 * t239 + t132 * t237 - t133 * t238 + t142 * t166 - t143 * t167 - t77 * t250 + t251 * t417, -g(1) * t362 - g(2) * t361 + t133 * t118 - t132 * t119 - t142 * t417 + t77 * t143 + t160 * t180 + t173 * t422, t179 * t145 - t198 * t573, -t198 * t100 - t179 * t144 - t145 * t177 + t197 * t573, t145 * t390 + t179 * t238 + t198 * t349 - t250 * t573, t100 * t197 + t144 * t177, -t144 * t482 - t197 * t389 - t100 * t250 - t177 * t238 + (-t144 * t467 - t197 * t238) * qJD(1), t389 * t250 + (t482 + (t250 + t467) * qJD(1)) * t238, -g(1) * t155 - g(2) * t157 + t130 * t100 + t112 * t144 + t119 * t177 + t73 * t197 + t65 * t238 - t250 * t469 + t349 * t79 + t390 * t44, t112 * t145 + t119 * t179 - t130 * t573 + t73 * t198 - t66 * t238 + t250 * t412 - t390 * t43 - t580 * t80 + t455, -t80 * t100 - t66 * t144 - t65 * t145 - t43 * t177 - t44 * t179 + t197 * t412 + t198 * t469 + t573 * t79 - t454, -g(1) * t359 - g(2) * t357 + t112 * t119 + t73 * t130 - t412 * t80 + t66 * t43 + t65 * t44 - t469 * t79, t19, -t388, t10, t446, -t386, t53, t138 * t38 + t144 * t27 + t146 * t16 + t176 * t9 + t197 * t4 + t34 * t99 + t57 * t70 + t60 * t90 + t456, t140 * t38 - t144 * t28 + t147 * t16 - t176 * t8 - t197 * t3 - t556 * t99 - t56 * t70 + t60 * t91 - t457, -t138 * t8 - t140 * t9 - t146 * t3 - t147 * t4 - t27 * t91 - t28 * t90 + t34 * t56 - t556 * t57 - t455, -g(1) * t354 - g(2) * t353 + t16 * t70 + t27 * t9 + t28 * t8 + t3 * t556 + t4 * t34 + t60 * t38, t19, t10, t388, t53, t386, t446, t12 * t138 - t144 * t21 + t146 * t5 - t176 * t7 - t197 * t2 - t30 * t99 + t31 * t90 + t45 * t57 + t456, -t1 * t146 - t138 * t6 + t140 * t7 + t147 * t2 + t21 * t91 - t22 * t90 - t29 * t57 - t30 * t56 - t455, t1 * t197 - t12 * t140 + t144 * t22 - t147 * t5 + t176 * t6 + t29 * t99 - t31 * t91 + t45 * t56 + t457, t1 * t29 + t22 * t6 + t5 * t45 + t31 * t12 + t2 * t30 + t21 * t7 - g(1) * (t104 * pkin(5) + t103 * qJ(6) + t354) - g(2) * (t106 * pkin(5) + t105 * qJ(6) + t353); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 (t339 * t521 - t499) * t340 (qJDD(1) * t339 + t341 * t521) * t340, -t347 * t584, qJDD(2) + (-pkin(1) * qJDD(1) + qJD(1) * t435 - t497) * t340 + t478, 0, 0, 0, 0, 0, 0, t167 * t541 - t235 * t423 - t401 * t461 + t403 * t578, -t166 * t541 - t239 * t423 + t401 * t460 + t604 * t403, t166 * t461 - t167 * t460 + t268 * t235 - t267 * t239 + (-t235 * t461 + t239 * t460) * qJD(3), -t417 * t461 + t77 * t460 + t160 * t541 + t132 * t267 - t133 * t268 + (-t173 * t339 * t474 - t497) * t340 + (-t132 * t460 + t133 * t461) * qJD(3) + t478, 0, 0, 0, 0, 0, 0, -t288 * t389 - t100 * t461 - t267 * t177 + (t177 * t460 - t239 * t288) * qJD(3) - t514 * t390, t179 * t578 - t289 * t580 - t390 * t581 + t461 * t573, -t289 * t100 - t177 * t581 + t179 * t514 - t288 * t573, t112 * t578 + t288 * t469 - t289 * t412 - t73 * t461 - t514 * t65 + t581 * t66 + t399, 0, 0, 0, 0, 0, 0, t376, t570, t377, t16 * t288 + t3 * t260 + t27 * t516 - t28 * t515 + t392 * t4 + t514 * t60 + t399, 0, 0, 0, 0, 0, 0, t376, t377, -t570, t1 * t260 - t2 * t392 - t21 * t516 - t22 * t515 + t5 * t288 + t31 * t514 + t399; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t527, -t235 ^ 2 + t239 ^ 2, -t235 * t403 - t166, -t527, t239 * t503 + (t239 * t475 - t238) * qJD(1) - t397, -t401, -t133 * t403 - t173 * t239 + t405 - t417, -t132 * t403 + t173 * t235 + t404 - t77, 0, 0, -t378 * t344 + (t179 * t390 - t344 * t381) * t346, -t179 * t529 - t346 * t573 + (-t100 - t504) * t344 + t577 * t177, -t179 * t239 + t344 * t580 + t346 * t355, t177 * t472 - t518, t177 * t239 - t344 * t355 + t346 * t580, -t390 * t239, -pkin(3) * t100 + g(1) * t530 + g(2) * t532 + g(3) * t525 + t112 * t529 - t133 * t177 - t65 * t239 + t344 * t505 - t73 * t346 - t349 * t559 - t380 * t558 - t390 * t94, pkin(3) * t573 - g(1) * t531 - g(2) * t533 - g(3) * t526 + t112 * t528 - t133 * t179 + t66 * t239 + t73 * t344 + t346 * t505 + t390 * t587 - t558 * t580, -pkin(10) * t518 + t587 * t177 + t94 * t179 + t504 * t558 - t573 * t559 + t577 * t65 - t592 * t66 + t369, -t73 * pkin(3) + g(1) * t195 + g(2) * t193 + g(3) * t248 - t112 * t133 - t65 * t94 - t66 * t95 + ((-t66 * t344 - t65 * t346) * qJD(4) + t369) * pkin(10), t20, t590, t11, t365, -t589, t58, -t138 * t83 - t161 * t60 + t275 * t99 + t543 * t176 + (-t4 + (pkin(10) * t138 + t343 * t60) * qJD(4)) * t346 + (pkin(10) * t57 + t16 * t343 + t27 * t390 + t507 * t60) * t344 + t408, -t140 * t83 - t162 * t60 - t276 * t99 - t544 * t176 + (t3 + (pkin(10) * t140 + t345 * t60) * qJD(4)) * t346 + (-pkin(10) * t56 + t16 * t345 - t28 * t390 - t508 * t60) * t344 + t409, t161 * t28 + t162 * t27 + t275 * t56 - t276 * t57 - t543 * t140 - t544 * t138 + t443 * t509 + (-t3 * t343 - t345 * t4 + (t27 * t343 - t28 * t345) * qJD(5) + t405) * t344, t3 * t276 + t4 * t275 - t60 * t83 - g(1) * t491 - g(2) * t492 - g(3) * (-t248 + t582) + t544 * t28 + t543 * t27 + (t16 * t344 + t509 * t60 - t404) * pkin(10), t20, t11, -t590, t58, t589, t365, t2 * t346 - t266 * t99 + t278 * t57 + t452 * t31 - t546 * t176 + t545 * t138 + (-t21 * t390 + t31 * t507 + t343 * t5) * t344 + t408, t161 * t22 - t162 * t21 - t265 * t57 - t266 * t56 + t546 * t140 - t547 * t138 + t445 * t509 + (-t1 * t343 + t2 * t345 + (-t21 * t343 - t22 * t345) * qJD(5) + t405) * t344, -t1 * t346 + t265 * t99 + t278 * t56 - t451 * t31 + t547 * t176 - t545 * t140 + (t22 * t390 + t31 * t508 - t345 * t5) * t344 - t409, t1 * t265 + t5 * t278 + t2 * t266 - g(1) * (pkin(5) * t137 + pkin(10) * t204 + qJ(6) * t136 + t491) - g(2) * (pkin(5) * t135 - pkin(10) * t202 + qJ(6) * t134 + t492) - g(3) * (pkin(5) * t175 + qJ(6) * t174 - t479 + t582) + t545 * t31 + t547 * t22 + t546 * t21; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t534, -t177 ^ 2 + t179 ^ 2, t177 * t390 - t573, -t534, t179 * t235 + t473, t349, -t112 * t179 + t390 * t66 + t407 - t469, t112 * t177 + t390 * t65 - t406 + t412, 0, 0, t23, -t588, t32, t400, -t343 * t568 - t439, -t535, -pkin(4) * t57 - t138 * t66 - t176 * t48 - t179 * t27 + t343 * t414 - t345 * t374, pkin(4) * t56 - t140 * t66 + t176 * t49 + t179 * t28 + t343 * t374 + t345 * t414, t138 * t49 + t140 * t48 + (-t177 * t27 + t3 + (-t27 + t557) * qJD(5)) * t345 + (-t4 + t450 - t553) * t343 + t398, -t16 * pkin(4) + g(1) * t150 - g(2) * t148 + g(3) * t192 - t27 * t48 - t28 * t49 - t60 * t66 + (qJD(5) * t443 + t3 * t345 - t4 * t343 + t406) * pkin(11), t23, t32, t588, -t535, t176 * t471 + t439, t400, t542 * t138 + t176 * t40 + t179 * t21 + t311 * t57 + t343 * t576 + t375 * t345, t138 * t39 - t140 * t40 + (t177 * t21 + t1 + (t21 + t557) * qJD(5)) * t345 + (t2 + t450 - t554) * t343 + t398, -t542 * t140 - t176 * t39 - t179 * t22 + t311 * t56 + t375 * t343 - t345 * t576, t5 * t311 - t22 * t39 - t21 * t40 - g(1) * (-t156 * t448 - t150) - g(2) * (t448 * t603 + t148) - g(3) * (-t197 * t448 - t192) + t542 * t31 + (qJD(5) * t445 + t1 * t345 + t2 * t343 + t406) * pkin(11); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t537, -t481, t33, -t537, -t348, t99, -t140 * t60 + t382 + t553, t138 * t60 + t176 * t27 - t366, 0, 0, t537, t33, t481, t99, t348, -t537, -t138 * t92 - t364 + t553 + 0.2e1 * t567, pkin(5) * t56 - qJ(6) * t57 + (t22 - t28) * t140 + (t21 - t517) * t138, 0.2e1 * t555 - t138 * t31 + t140 * t92 + (0.2e1 * qJD(6) - t27) * t176 + t366, t1 * qJ(6) - t2 * pkin(5) - t31 * t92 - t21 * t28 - g(1) * (-pkin(5) * t105 + qJ(6) * t106) - g(2) * (pkin(5) * t103 - qJ(6) * t104) - g(3) * t449 + t517 * t22; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t537 - t99, t33, -t568 - t569, t364 - t554 - t567;];
tau_reg  = t13;
