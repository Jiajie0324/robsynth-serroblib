% Calculate inertial parameters regressor of joint inertia matrix for
% S6RRRRPP6
% Use Code from Maple symbolic Code Generation
% 
% Input:
% qJ [6x1]
%   Generalized joint coordinates (joint angles)
% pkin [9x1]
%   kinematic parameters (e.g. lengths of the links)
%   pkin=[a2,a3,a4,a5,a6,d1,d2,d3,d4]';
% 
% Output:
% MM_reg [((6+1)*6/2)x(6*10)]
%   inertial parameter regressor of joint inertia matrix
%   (only lower left triangular matrix (including diagonal) due to symmetry

% Quelle: HybrDyn-Toolbox
% Datum: 2019-03-09 21:16
% Revision: 8e0af74c1e634ead9bab9e082796ada77f031ee9 (2019-03-08)
% Moritz Schappler, moritz.schappler@imes.uni-hannover.de
% (C) Institut für Mechatronische Systeme, Universität Hannover

function MM_reg = S6RRRRPP6_inertiaJ_reg2_slag_vp(qJ, pkin)
%% Coder Information
%#codegen
%$cgargs {zeros(6,1),zeros(9,1)}
assert(isreal(qJ) && all(size(qJ) == [6 1]), ...
  'S6RRRRPP6_inertiaJ_reg2_slag_vp: qJ has to be [6x1] (double)');
assert(isreal(pkin) && all(size(pkin) == [9 1]), ...
  'S6RRRRPP6_inertiaJ_reg2_slag_vp: pkin has to be [9x1] (double)');

%% Symbolic Calculation
% From inertia_joint_joint_fixb_regressor_matlab.m
t69 = sin(qJ(4));
t70 = sin(qJ(3));
t72 = cos(qJ(4));
t73 = cos(qJ(3));
t42 = t69 * t73 + t72 * t70;
t71 = sin(qJ(2));
t32 = t42 * t71;
t30 = t32 ^ 2;
t104 = t73 * t71;
t107 = t70 * t71;
t34 = t72 * t104 - t69 * t107;
t31 = t34 ^ 2;
t40 = t69 * t70 - t72 * t73;
t38 = t40 ^ 2;
t39 = t42 ^ 2;
t120 = t69 * pkin(3);
t53 = qJ(5) + t120;
t130 = t53 ^ 2;
t129 = -0.2e1 * t42;
t58 = -t73 * pkin(3) - pkin(2);
t128 = 0.2e1 * t58;
t127 = -0.2e1 * t71;
t74 = cos(qJ(2));
t126 = 0.2e1 * t74;
t125 = -pkin(9) - pkin(8);
t124 = pkin(2) * t73;
t123 = pkin(7) * t70;
t122 = t32 * pkin(5);
t64 = t71 ^ 2;
t121 = t64 * pkin(7);
t61 = t71 * pkin(7);
t119 = t72 * pkin(3);
t47 = t125 * t73;
t90 = t125 * t70;
t21 = -t69 * t47 - t72 * t90;
t118 = t21 * t74;
t23 = -t72 * t47 + t69 * t90;
t117 = t23 * t74;
t116 = t32 * t34;
t115 = t32 * t40;
t114 = t32 * t74;
t17 = t34 * t42;
t113 = t34 * t74;
t112 = t40 * t42;
t111 = t40 * t74;
t110 = t42 * t74;
t109 = t53 * t32;
t108 = t53 * t40;
t106 = t70 * t73;
t105 = t70 * t74;
t103 = t73 * t74;
t67 = pkin(4) + qJ(6);
t46 = -t74 * pkin(2) - t71 * pkin(8) - pkin(1);
t37 = t73 * t46;
t15 = -pkin(9) * t104 + t37 + (-pkin(3) - t123) * t74;
t93 = pkin(7) * t103;
t20 = t93 + (-pkin(9) * t71 + t46) * t70;
t102 = -t72 * t15 + t69 * t20;
t7 = t69 * t15 + t72 * t20;
t45 = pkin(3) * t107 + t61;
t63 = t70 ^ 2;
t65 = t73 ^ 2;
t101 = t63 + t65;
t100 = qJ(5) * t32;
t99 = qJ(5) * t40;
t98 = t53 * qJ(5);
t97 = t74 * qJ(5);
t96 = -0.2e1 * t116;
t95 = -0.2e1 * t112;
t94 = t71 * t126;
t92 = t70 * t104;
t62 = t74 * pkin(4);
t4 = t62 + t102;
t91 = -0.2e1 * t97 + t7;
t89 = t21 ^ 2 + t23 ^ 2;
t57 = -pkin(4) - t119;
t88 = -t34 * pkin(5) - t4;
t3 = t97 - t7;
t87 = -t34 * qJ(5) + t45;
t86 = t21 * t34 - t23 * t32;
t27 = -pkin(7) * t105 + t37;
t28 = t70 * t46 + t93;
t85 = -t27 * t70 + t28 * t73;
t84 = -t32 * t42 - t40 * t34;
t83 = -t42 * qJ(5) + t58;
t82 = (-qJ(5) - t53) * t74 + t7;
t81 = 0.2e1 * t21 * t42 - 0.2e1 * t23 * t40;
t79 = pkin(7) ^ 2;
t77 = -0.2e1 * pkin(4);
t76 = qJ(5) ^ 2;
t75 = 0.2e1 * qJ(5);
t66 = t74 ^ 2;
t60 = t64 * t79;
t55 = t75 + t120;
t50 = qJ(6) - t57;
t48 = 0.2e1 * t53;
t26 = -0.2e1 * t113;
t25 = -0.2e1 * t114;
t14 = t40 * pkin(4) + t83;
t11 = -t40 * pkin(5) + t23;
t10 = t42 * pkin(5) + t21;
t9 = t67 * t40 + t83;
t8 = t32 * pkin(4) + t87;
t5 = t67 * t32 + t87;
t2 = -t3 - t122;
t1 = t74 * qJ(6) - t88;
t6 = [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t64, t94, 0, t66, 0, 0, pkin(1) * t126, pkin(1) * t127, 0.2e1 * (t64 + t66) * pkin(7), pkin(1) ^ 2 + t66 * t79 + t60, t65 * t64, -0.2e1 * t64 * t106, t103 * t127, t63 * t64, t70 * t94, t66, 0.2e1 * t70 * t121 - 0.2e1 * t27 * t74, 0.2e1 * t73 * t121 + 0.2e1 * t28 * t74, 0.2e1 * (-t27 * t73 - t28 * t70) * t71, t27 ^ 2 + t28 ^ 2 + t60, t31, t96, t26, t30, 0.2e1 * t114, t66, 0.2e1 * t102 * t74 + 0.2e1 * t45 * t32, 0.2e1 * t45 * t34 + 0.2e1 * t7 * t74, 0.2e1 * t102 * t34 - 0.2e1 * t7 * t32, t102 ^ 2 + t45 ^ 2 + t7 ^ 2, t66, 0.2e1 * t113, t25, t31, t96, t30, 0.2e1 * t3 * t32 + 0.2e1 * t4 * t34, -0.2e1 * t8 * t32 - 0.2e1 * t4 * t74, 0.2e1 * t3 * t74 - 0.2e1 * t8 * t34, t3 ^ 2 + t4 ^ 2 + t8 ^ 2, t66, t25, t26, t30, 0.2e1 * t116, t31, 0.2e1 * t1 * t34 - 0.2e1 * t2 * t32, -0.2e1 * t2 * t74 - 0.2e1 * t5 * t34, 0.2e1 * t1 * t74 + 0.2e1 * t5 * t32, t1 ^ 2 + t2 ^ 2 + t5 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t71, 0, t74, 0, -t61, -t74 * pkin(7), 0, 0, t92 (-t63 + t65) * t71, -t105, -t92, -t103, 0, -pkin(7) * t104 + (-pkin(2) * t71 + pkin(8) * t74) * t70, pkin(8) * t103 + (t123 - t124) * t71, t85, -pkin(2) * t61 + t85 * pkin(8), t17, t84, -t110, t115, t111, 0, t58 * t32 + t45 * t40 + t118, t58 * t34 + t45 * t42 + t117, t102 * t42 - t7 * t40 + t86, t102 * t21 + t7 * t23 + t45 * t58, 0, t110, -t111, t17, t84, t115, t3 * t40 + t4 * t42 + t86, -t14 * t32 - t8 * t40 - t118, -t14 * t34 - t8 * t42 - t117, t8 * t14 + t4 * t21 - t3 * t23, 0, -t111, -t110, t115, -t84, t17, t1 * t42 + t10 * t34 - t11 * t32 - t2 * t40, -t11 * t74 - t9 * t34 - t5 * t42, t10 * t74 + t9 * t32 + t5 * t40, t1 * t10 + t2 * t11 + t5 * t9; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, t63, 0.2e1 * t106, 0, t65, 0, 0, 0.2e1 * t124, -0.2e1 * pkin(2) * t70, 0.2e1 * t101 * pkin(8), t101 * pkin(8) ^ 2 + pkin(2) ^ 2, t39, t95, 0, t38, 0, 0, t40 * t128, t42 * t128, t81, t58 ^ 2 + t89, 0, 0, 0, t39, t95, t38, t81, -0.2e1 * t14 * t40, t14 * t129, t14 ^ 2 + t89, 0, 0, 0, t38, 0.2e1 * t112, t39, 0.2e1 * t10 * t42 - 0.2e1 * t11 * t40, t9 * t129, 0.2e1 * t9 * t40, t10 ^ 2 + t11 ^ 2 + t9 ^ 2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t104, 0, -t107, -t74, t27, -t28, 0, 0, 0, 0, t34, 0, -t32, -t74, -t74 * t119 - t102, t74 * t120 - t7 (-t32 * t69 - t34 * t72) * pkin(3) (-t102 * t72 + t69 * t7) * pkin(3), -t74, -t34, t32, 0, 0, 0, t57 * t34 - t109, -t57 * t74 + t4, t82, -t3 * t53 + t4 * t57, -t74, t32, t34, 0, 0, 0, -t50 * t34 - t109, t82 - t122 (-qJ(6) - t50) * t74 + t88, -t1 * t50 + t2 * t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t70, 0, t73, 0, -t70 * pkin(8), -t73 * pkin(8), 0, 0, 0, 0, t42, 0, -t40, 0, -t21, -t23 (-t40 * t69 - t42 * t72) * pkin(3) (-t21 * t72 + t23 * t69) * pkin(3), 0, -t42, t40, 0, 0, 0, t57 * t42 - t108, t21, t23, t21 * t57 + t23 * t53, 0, t40, t42, 0, 0, 0, -t50 * t42 - t108, t11, -t10, -t10 * t50 + t11 * t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.2e1 * t119, -0.2e1 * t120, 0 (t69 ^ 2 + t72 ^ 2) * pkin(3) ^ 2, 1, 0, 0, 0, 0, 0, 0, 0.2e1 * t57, t48, t57 ^ 2 + t130, 1, 0, 0, 0, 0, 0, 0, t48, 0.2e1 * t50, t50 ^ 2 + t130; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, 0, -t32, -t74, -t102, -t7, 0, 0, -t74, -t34, t32, 0, 0, 0, -pkin(4) * t34 - t100, 0.2e1 * t62 + t102, t91, -t4 * pkin(4) - t3 * qJ(5), -t74, t32, t34, 0, 0, 0, -t67 * t34 - t100, t91 - t122 (-qJ(6) - t67) * t74 + t88, t2 * qJ(5) - t1 * t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, 0, -t40, 0, -t21, -t23, 0, 0, 0, -t42, t40, 0, 0, 0, -pkin(4) * t42 - t99, t21, t23, -t21 * pkin(4) + t23 * qJ(5), 0, t40, t42, 0, 0, 0, -t67 * t42 - t99, t11, -t10, t11 * qJ(5) - t10 * t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, t119, -t120, 0, 0, 1, 0, 0, 0, 0, 0, 0, t77 - t119, t55, -t57 * pkin(4) + t98, 1, 0, 0, 0, 0, 0, 0, t55, 0.2e1 * pkin(4) + 0.2e1 * qJ(6) + t119, t50 * t67 + t98; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, t77, t75, pkin(4) ^ 2 + t76, 1, 0, 0, 0, 0, 0, 0, t75, 0.2e1 * t67, t67 ^ 2 + t76; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t34, -t74, 0, t4, 0, 0, 0, 0, 0, 0, t34, 0, t74, t1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, t42, 0, 0, t21, 0, 0, 0, 0, 0, 0, t42, 0, 0, t10; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, t57, 0, 0, 0, 0, 0, 0, 0, 0, -1, -t50; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -pkin(4), 0, 0, 0, 0, 0, 0, 0, 0, -1, -t67; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t32, -t74, 0, t2; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -t40, 0, 0, t11; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, t53; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, qJ(5); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1;];
MM_reg  = t6;
